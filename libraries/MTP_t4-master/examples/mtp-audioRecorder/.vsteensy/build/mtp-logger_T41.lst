
.vsteensy/build/mtp-logger_T41.elf:     file format elf32-littlearm

SYMBOL TABLE:
60000000 l    d  .text.progmem	00000000 .text.progmem
00000000 l    d  .text.itcm	00000000 .text.itcm
00014850 l    d  .fini	00000000 .fini
00014854 l    d  .ARM.exidx	00000000 .ARM.exidx
0001485c l    d  .text.itcm.padding	00000000 .text.itcm.padding
20000000 l    d  .data	00000000 .data
20001610 l    d  .bss	00000000 .bss
20200000 l    d  .bss.dma	00000000 .bss.dma
70000000 l    d  .bss.extram	00000000 .bss.extram
60017a2c l    d  .text.csf	00000000 .text.csf
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 bootdata.c
00000000 l    df *ABS*	00000000 startup.c
0000e600 l       .text.itcm	00000000 _MSP
00000000 l    df *ABS*	00000000 usb.c
0000db9c l     F .text.itcm	00000070 schedule_transfer
0000dc0c l     F .text.itcm	00000036 run_callbacks
0000dc44 l     F .text.itcm	000000a0 endpoint0_transmit.constprop.1
0000dce4 l     F .text.itcm	0000066c isr
20006204 l     O .bss	00000004 endpointN_notify_mask
20006208 l     O .bss	00000001 sof_usage
20006214 l     O .bss	00000004 endpoint0_notify_mask
20006218 l     O .bss	00000001 usb_reboot_timer
20006220 l     O .bss	00000008 endpoint0_setupdata
20006228 l     O .bss	00000008 reply_buffer
20006230 l     O .bss	00000008 endpoint0_buffer
00000000 l    df *ABS*	00000000 tempmon.c
2000624c l     O .bss	00000004 s_hotTemp
20006250 l     O .bss	00000004 s_hot_ROOM
20006254 l     O .bss	00000004 s_roomC_hotC
20006258 l     O .bss	00000004 s_hotCount
00000000 l    df *ABS*	00000000 analog.c
200063b9 l     O .bss	00000001 calibrating
00000000 l    df *ABS*	00000000 usb_desc.c
60001b40 l     O .text.progmem	0000000a qualifier_descriptor
20000c2c l     O .data	00000012 device_descriptor
00000000 l    df *ABS*	00000000 serialEvent.cpp
00000000 l    df *ABS*	00000000 c:/users/zimme/documents/arduino-1.8.12/hardware/tools/arm/bin/../lib/gcc/arm-none-eabi/5.4.1/armv7e-m/fpu/crti.o
00000000 l    df *ABS*	00000000 c:/users/zimme/documents/arduino-1.8.12/hardware/tools/arm/bin/../lib/gcc/arm-none-eabi/5.4.1/armv7e-m/fpu/crtn.o
00000000 l    df *ABS*	00000000 crtstuff.c
00000020 l     F .text.itcm	00000000 __do_global_dtors_aux
20001610 l       .bss	00000000 completed.8605
00000044 l     F .text.itcm	00000000 frame_dummy
20001614 l       .bss	00000000 object.8610
60001ba8 l     O .text.progmem	00000000 __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000 mtp-logger.ino
000001e4 l     F .text.itcm	00000002 __tcf_0
000003fc l     F .text.itcm	00000080 logg(unsigned long, char const*) [clone .part.52]
0000047c l     F .text.itcm	00000054 set_audioClock(int, long, unsigned long, bool) [clone .part.57]
000004d0 l     F .text.itcm	00000258 acq_init(long) [clone .part.58]
00001854 l     F .text.itcm	00000174 _GLOBAL__sub_I_sd_str
20001a40 l     O .bss	00000200 acq_rx_buffer
20001d44 l     O .bss	00000002 front_
20001d48 l     O .bss	00001000 tdm_rx_buffer
20000bb4 l     O .data	00000014 mfile
20005b02 l     O .bss	00000002 rear_
20005b0c l     O .bss	00000004 check_filing(short)::to
20005b10 l     O .bss	00000004 logg(unsigned long, char const*)::to
00000000 l    df *ABS*	00000000 SD.cpp
0000d004 l     F .text.itcm	00000060 _GLOBAL__sub_I_SD
00000000 l    df *ABS*	00000000 Storage.cpp
00001c24 l     F .text.itcm	000000a0 File::invalidate() [clone .isra.1]
000021a4 l     F .text.itcm	00000084 MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.6] [clone .constprop.14]
00003638 l     F .text.itcm	00000036 MTPStorage_SD::ScanAll(unsigned long) [clone .part.7] [clone .constprop.12]
00003670 l     F .text.itcm	00000030 MTPStorage_SD::StartGetObjectHandles(unsigned long, unsigned long) [clone .part.8] [clone .constprop.13]
00003e9c l     F .text.itcm	000000b2 MTPStorage_SD::DeleteObject(unsigned long) [clone .part.9] [clone .constprop.11]
00004a48 l     F .text.itcm	00000a4c mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]
00000000 l    df *ABS*	00000000 MTP.cpp
000056a8 l     F .text.itcm	00000080 MTPD::write(char const*, int) [clone .part.2]
000057f4 l     F .text.itcm	000000c8 MTPD::GetDevicePropDesc(unsigned long) [clone .part.4]
00006de0 l     F .text.itcm	00000038 MTPD::setObjectPropValue(unsigned long, unsigned long) [clone .part.6]
20000340 l     O .data	00000028 supported_op
20000368 l     O .data	00000010 propertyList
20005b18 l     O .bss	00000004 MTPD::write(char const*, int)::dst
20005b1c l     O .bss	00000004 MTPD::read(char*, unsigned long)::index
200003c0 l     O .data	00000008 supported_events
00000000 l    df *ABS*	00000000 SPI.cpp
000079b8 l     F .text.itcm	00000058 SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]
00000000 l    df *ABS*	00000000 ExFatFile.cpp
00000000 l    df *ABS*	00000000 ExFatPartition.cpp
0000883c l     F .text.itcm	0000001e FsCache::sync() [clone .part.2]
000088c8 l     F .text.itcm	00000034 ExFatPartition::fatGet(unsigned long, unsigned long*) [clone .part.3]
000088fc l     F .text.itcm	0000002a ExFatPartition::fatPut(unsigned long, unsigned long) [clone .part.4]
00000000 l    df *ABS*	00000000 upcase.cpp
00000000 l    df *ABS*	00000000 ExFatFileWrite.cpp
00000000 l    df *ABS*	00000000 FatFile.cpp
000097c4 l     F .text.itcm	00000032 FatFile::openRoot(FatVolume*) [clone .part.36]
000098e0 l     F .text.itcm	00000094 FatFile::sync() [clone .part.40]
00000000 l    df *ABS*	00000000 FatPartition.cpp
0000a544 l     F .text.itcm	0000004a FatCache::sync() [clone .part.8]
00000000 l    df *ABS*	00000000 FatFileLFN.cpp
0000a974 l     F .text.itcm	0000002a lfnGetChar(DirLfn_t*, unsigned char)
00000000 l    df *ABS*	00000000 FatFileSFN.cpp
0000b2fc l     F .text.itcm	00000066 FatFile::getSFN(char*) [clone .part.2]
00000000 l    df *ABS*	00000000 FsFile.cpp
00000000 l    df *ABS*	00000000 FsVolume.cpp
00000000 l    df *ABS*	00000000 FsNew.cpp
00000000 l    df *ABS*	00000000 SdSpiCard.cpp
0000b6bc l     F .text.itcm	00000018 SdSpiCard::spiStart() [clone .part.6] [clone .constprop.23]
0000b6d4 l     F .text.itcm	00000022 SdSpiCard::spiStop() [clone .part.7] [clone .constprop.26]
00000000 l    df *ABS*	00000000 SdioTeensy.cpp
0000be6c l     F .text.itcm	00000030 sdIrs()
0000be9c l     F .text.itcm	00000018 isBusyCommandComplete()
0000beb4 l     F .text.itcm	00000010 isBusyCommandInhibit()
0000bec4 l     F .text.itcm	0000000c isBusyDMA()
0000bed0 l     F .text.itcm	00000014 isBusyFifoRead()
0000bee4 l     F .text.itcm	00000014 isBusyFifoWrite()
0000bef8 l     F .text.itcm	00000018 isBusyTransferComplete()
0000bf10 l     F .text.itcm	000000d0 setSdclk(unsigned long)
0000c044 l     F .text.itcm	00000028 waitTimeout(bool (*)())
0000c06c l     F .text.itcm	0000004c yieldTimeout(bool (*)())
0000c0c8 l     F .text.itcm	00000044 enableGPIO(bool) [clone .part.0]
0000c12c l     F .text.itcm	00000068 cardCommand(unsigned long, unsigned long)
0000c1b4 l     F .text.itcm	0000005c readReg16(unsigned long, void*)
0000c210 l     F .text.itcm	0000002c isBusyCMD13()
0000c258 l     F .text.itcm	00000020 waitDmaStatus() [clone .part.7]
0000c278 l     F .text.itcm	000000b8 rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)
0000c470 l     F .text.itcm	0000006c transferStop()
0000c7f0 l     F .text.itcm	0000009c cardCMD6(unsigned long, unsigned char*)
20005b28 l     O .bss	00000001 m_version2
20005b2c l     O .bss	00000010 m_cid
20005b3c l     O .bss	00000004 m_busyFcn
20005b40 l     O .bss	00000001 m_highCapacity
20005b44 l     O .bss	00000004 m_ocr
20005b48 l     O .bss	00000004 m_rca
20005b4c l     O .bss	00000004 m_irqstat
20000c1c l     O .data	00000001 m_errorCode
20005b50 l     O .bss	00000001 m_initDone
20005b54 l     O .bss	00000010 m_csd
20005b64 l     O .bss	00000001 m_dmaBusy
20005b68 l     O .bss	00000004 m_sdClkKhz
20005b6c l     O .bss	00000004 m_errorLine
00000000 l    df *ABS*	00000000 SdSpiTeensy3.cpp
00000000 l    df *ABS*	00000000 SdSpiChipSelect.cpp
00000000 l    df *ABS*	00000000 memcpy-armv7m.o
00000000 l    df *ABS*	00000000 usb_serial.c
0000d198 l     F .text.itcm	0000006c rx_queue_transfer
0000d204 l     F .text.itcm	000000b4 rx_event
0000d2b8 l     F .text.itcm	00000098 usb_serial_flush_callback
0000d350 l     F .text.itcm	0000017c usb_serial_write.part.1
20006024 l     O .bss	00000010 rx_index
20006034 l     O .bss	00000002 tx_packet_size
20006036 l     O .bss	00000001 tx_noautoflush
20006037 l     O .bss	00000001 tx_head
20006040 l     O .bss	00000100 rx_transfer
20006140 l     O .bss	00000001 rx_tail
20006144 l     O .bss	00000009 rx_list
2000614e l     O .bss	00000002 rx_packet_size
20200000 l     O .bss.dma	00001000 rx_buffer
20201000 l     O .bss.dma	00002000 txbuffer
20006150 l     O .bss	00000010 rx_count
20006160 l     O .bss	00000004 rx_available
20006164 l     O .bss	00000001 rx_head
20006165 l     O .bss	00000001 transmit_previous_timeout
20006166 l     O .bss	00000002 tx_available
20006180 l     O .bss	00000080 tx_transfer
00000000 l    df *ABS*	00000000 clockspeed.c
00000000 l    df *ABS*	00000000 delay.c
00000000 l    df *ABS*	00000000 rtc.c
00000000 l    df *ABS*	00000000 extmem.c
00000000 l    df *ABS*	00000000 nonstd.c
00000000 l    df *ABS*	00000000 sm_pool.c
00000000 l    df *ABS*	00000000 digital.c
0000ebec l     F .text.itcm	0000004c digitalWrite.part.0
00000000 l    df *ABS*	00000000 pwm.c
00000000 l    df *ABS*	00000000 usb_mtp.c
0000ef7c l     F .text.itcm	00000034 rx_event
0000efb0 l     F .text.itcm	00000068 rx_queue_transfer
2000625c l     O .bss	00000002 tx_packet_size
2000625e l     O .bss	00000001 tx_head
20006260 l     O .bss	00000080 rx_transfer
200062e0 l     O .bss	00000001 rx_tail
200062e4 l     O .bss	00000005 rx_list
200062ea l     O .bss	00000002 rx_packet_size
20203000 l     O .bss.dma	00000800 rx_buffer
20203800 l     O .bss.dma	00000800 txbuffer
200062ec l     O .bss	00000001 rx_head
20006300 l     O .bss	00000080 tx_transfer
00000000 l    df *ABS*	00000000 yield.cpp
20006380 l     O .bss	00000001 yield::running
00000000 l    df *ABS*	00000000 EventResponder.cpp
00000000 l    df *ABS*	00000000 DMAChannel.cpp
00000000 l    df *ABS*	00000000 usb_inst.cpp
00000000 l    df *ABS*	00000000 Print.cpp
00000000 l    df *ABS*	00000000 main.cpp
00000000 l    df *ABS*	00000000 new.cpp
00000000 l    df *ABS*	00000000 sm_malloc.c
00000000 l    df *ABS*	00000000 sm_hash.c
00000000 l    df *ABS*	00000000 sm_util.c
00000000 l    df *ABS*	00000000 atexit_arm.cc
00000000 l    df *ABS*	00000000 _arm_addsubdf3.o
00000000 l    df *ABS*	00000000 _arm_muldivdf3.o
00000000 l    df *ABS*	00000000 _arm_cmpdf2.o
00000000 l    df *ABS*	00000000 _arm_unorddf2.o
00000000 l    df *ABS*	00000000 _arm_fixdfsi.o
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 cxa_atexit.c
00000000 l    df *ABS*	00000000 efgcvt.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 mbtowc_r.c
00000000 l    df *ABS*	00000000 lib_a-memchr.o
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 strcpy.c
00000000 l    df *ABS*	00000000 strlcat.c
00000000 l    df *ABS*	00000000 strlcpy.c
00000000 l    df *ABS*	00000000 lib_a-strlen.o
00000000 l    df *ABS*	00000000 strncmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
20000930 l     O .data	00000010 zeroes.7258
20000980 l     O .data	00000010 blanks.7257
00000000 l    df *ABS*	00000000 vdprintf.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 dtoa.c
00012d74 l     F .text.itcm	00000128 quorem
00000000 l    df *ABS*	00000000 ecvtbuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 localeconv.c
00000000 l    df *ABS*	00000000 mprec.c
20000b98 l     O .data	0000000c p05.6087
00000000 l    df *ABS*	00000000 vfprintf.c
00000000 l    df *ABS*	00000000 vasnprintf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 impure.c
20000c68 l     O .data	00000428 impure_data
00000000 l    df *ABS*	00000000 locale.c
00000000 l    df *ABS*	00000000 ctype_.c
00000000 l    df *ABS*	00000000 FsDateTime.cpp
00000000 l    df *ABS*	00000000 HardwareSerial.cpp
00000000 l    df *ABS*	00000000 reent.c
00000000 l    df *ABS*	00000000 
00000000 l       *UND*	00000000 __fini_array_end
00000000 l       *UND*	00000000 __bss_start__
00000000 l       *UND*	00000000 __bss_end__
00000000 l       *UND*	00000000 software_init_hook
00000000 l       *UND*	00000000 __fini_array_start
00000000 l       *UND*	00000000 hardware_init_hook
00000000 l       *UND*	00000000 __libc_fini
00000000 l       *UND*	00000000 __stack
60001b58 l     F .text.progmem	00000008 __pwm_init_veneer
60001b60 l     F .text.progmem	00000008 __startup_late_hook_veneer
60001b68 l     F .text.progmem	00000008 __delay_veneer
60001b70 l     F .text.progmem	00000008 __memset_veneer
60001b78 l     F .text.progmem	00000008 __main_veneer
60001b80 l     F .text.progmem	00000008 __startup_early_hook_veneer
60001b88 l     F .text.progmem	00000008 __set_arm_clock_veneer
60001b90 l     F .text.progmem	00000008 __usb_init_serialnumber_veneer
60001b98 l     F .text.progmem	00000008 __sm_set_pool_veneer
60001ba0 l     F .text.progmem	00000008 ____libc_init_array_veneer
00014840 l     F .text.itcm	00000008 ___init_veneer
00002058 g     F .text.itcm	0000014c MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)
00001194 g     F .text.itcm	0000006c pushData(unsigned long*)
000101d0 g     F .text.itcm	0000002c .hidden __aeabi_dcmpun
0000d708 g     F .text.itcm	0000000c usb_serial_available
00010194 g     F .text.itcm	00000012 .hidden __aeabi_dcmple
00011270 g     F .text.itcm	000000ba strcpy
000100d0 g     F .text.itcm	0000007a .hidden __cmpdf2
0000e60c g     F .text.itcm	00000002 startup_default_late_hook
0000c608 g     F .text.itcm	00000088 SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)
0000f2bc  w    F .text.itcm	000000f0 yield
20005b08 g     O .bss	00000004 acq_miss
2000620c g     O .bss	00000004 usb_timer1_callback
0000a35c g     F .text.itcm	000001e8 FatFile::write(void const*, unsigned int)
000100d0 g     F .text.itcm	0000007a .hidden __eqdf2
0000b630  w    F .text.itcm	00000002 SdSpiCard::~SdSpiCard()
0000f60c g     F .text.itcm	000000bc Print::printNumber64(unsigned long long, unsigned char, unsigned char)
00008310 g     F .text.itcm	000003d8 ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)
20001c40 g     O .bss	00000104 storage
60001a4c g     O .text.progmem	00000018 usb_string_manufacturer_name_default
0000e700 g     F .text.itcm	00000020 extmem_malloc
60001480 g     F .text.progmem	000003bc configure_external_ram
0000a2e4 g     F .text.itcm	00000076 FatFile::truncate()
00001200 g     F .text.itcm	00000088 acq_isr()
00002498 g     F .text.itcm	0000003c MTPStorage_SD::GetObjectInfo(unsigned long, char*, unsigned long*, unsigned long*, unsigned short*)
0000fc40 g     F .text.itcm	0000005a .hidden __floatdidf
20001630 g     O .bss	00000008 dma
000016e8 g     F .text.itcm	000000a4 do_logger(unsigned short, short)
20005b20 g     O .bss	00000004 FsDateTime::callback
0000f5bc g     F .text.itcm	00000020 Print::println()
00008208 g     F .text.itcm	00000108 ExFatFile::seekSet(unsigned long long)
00013cd4 g     F .text.itcm	00000100 fcvtbuf
0000b604  w    F .text.itcm	00000004 SdSpiCard::errorCode() const
000000c0  w    F .text.itcm	0000000c File::flush()
0000f814 g     F .text.itcm	00000044 smalloc_uinthash
00010e1c g     F .text.itcm	00000002 __malloc_unlock
00000240  w    F .text.itcm	000000bc SDFile::openNextFile(unsigned char)
20005b24 g     O .bss	00000004 FsVolume::m_cwv
00009bb8 g     F .text.itcm	000000c6 FatFile::open(FatFile*, char const*, int)
600019bc g     F .text.progmem	00000058 analog_init
00012c24 g     F .text.itcm	0000004a _vdprintf_r
00007de0 g     F .text.itcm	0000006c SPIClass::setSCK(unsigned char)
20000c24 g     O .data	00000004 F_CPU_ACTUAL
200000cc  w    O .data	00000060 vtable for SDFile
00010cb4 g     F .text.itcm	000000c6 memmove
000036a0 g     F .text.itcm	00000046 MTPStorage_SD::StartGetObjectHandles(unsigned long, unsigned long)
0001405c g     F .text.itcm	0000004c _Balloc
000019e4  w    F .text.itcm	00000004 MTPStorage_SD::get_FSCount()
0001485c g       .ARM.exidx	00000000 __exidx_end
0000a768 g     F .text.itcm	0000003a FatPartition::freeChain(unsigned long)
20006394 g     O .bss	00000001 EventResponder::runningFromYield
0000cf58 g     F .text.itcm	00000016 SdSpiArduinoDriver::receive()
0000b7dc g     F .text.itcm	00000080 SdSpiCard::cardCommand(unsigned char, unsigned long)
20005b00 g     O .bss	00000002 maxCount
0000eac0 g     F .text.itcm	00000028 smalloc_verify_pool
0000f590 g     F .text.itcm	0000002c Print::write(unsigned char const*, unsigned int)
000100c0 g     F .text.itcm	0000008a .hidden __gtdf2
0000a9a0 g     F .text.itcm	00000024 FatFile::lfnChecksum(unsigned char*)
00010594 g     F .text.itcm	0000000c __errno
00000ac4  w    F .text.itcm	00000026 SDFile::isDirectory()
60001000 g     O .text.progmem	00000020 ImageVectorTable
000013e0 g     F .text.itcm	00000088 makeFilename(char*)
00000cdc  w    F .text.itcm	00000028 File::~File()
20006384 g     O .bss	00000004 EventResponder::firstInterrupt
0000e498 g     F .text.itcm	00000028 usb_transfer_status
00005db4 g     F .text.itcm	0000008a MTPD::GetObjectHandles(unsigned long, unsigned long)
0000eb38 g     F .text.itcm	00000090 sm_set_pool
0000b634  w    F .text.itcm	0000000e SdSpiCard::~SdSpiCard()
0000b384 g     F .text.itcm	00000084 FsBaseFile::FsBaseFile(FsBaseFile const&)
00008d5c g     F .text.itcm	00000018 ExFatPartition::rootLength()
0000b608  w    F .text.itcm	00000004 SdSpiCard::errorData() const
0000f580  w    F .text.itcm	00000008 usb_serial_class::write(unsigned char const*, unsigned int)
20000508 g     O .data	00000370 digital_pin_to_info_PGM
20008ac0 g     O .bss	00000004 errno
0000ba28 g     F .text.itcm	00000054 SdSpiCard::readOCR(unsigned long*)
0000cf70 g     F .text.itcm	00000020 SdSpiArduinoDriver::receive(unsigned char*, unsigned int)
0000af68 g     F .text.itcm	00000394 FatFile::open(FatFile*, fname_t*, int)
00008c4c g     F .text.itcm	00000012 ExFatPartition::fatGet(unsigned long, unsigned long*)
00014858 g       .text.itcm	00000000 _etext
00007a10 g     F .text.itcm	000000d4 _spi_dma_rxISR0()
20001610 g       .bss	00000000 _sbss
0000cff4 g     F .text.itcm	00000006 sdCsInit(unsigned char)
0001015c g     F .text.itcm	00000010 .hidden __aeabi_cdcmple
0000bfec g     F .text.itcm	0000000c SdioCard::errorData() const
000019f8 g     F .text.itcm	0000000c MTPStorage_SD::totalSize(unsigned long)
0000480c g     F .text.itcm	000000fe MTPStorage_SD::copy(unsigned long, unsigned long, unsigned long)
0000c718 g     F .text.itcm	000000a0 SdioCard::writeSector(unsigned long, unsigned char const*)
60001bc0 g       *ABS*	00000000 _stextload
0000178c g     F .text.itcm	000000c8 loop
0000e350 g     F .text.itcm	00000064 usb_config_rx
00005c1c g     F .text.itcm	00000170 MTPD::GetStorageInfo(unsigned long)
00007f38 g     F .text.itcm	000000fc ExFatFile::parsePathName(char const*, ExName_t*, char const**)
0000cbf0 g     F .text.itcm	000000bc SdioCard::readData(unsigned char*)
0000b738 g     F .text.itcm	00000074 SdSpiCard::readData(unsigned char*, unsigned int)
20006388 g     O .bss	00000004 EventResponder::lastInterrupt
0000b408 g     F .text.itcm	00000028 FsBaseFile::close()
0000d064 g     F .text.itcm	00000134 memcpy
0000f874 g     F .text.itcm	000000ac smalloc_is_alloc
0001014c g     F .text.itcm	00000020 .hidden __aeabi_cdrcmple
000000a4  w    F .text.itcm	0000000c File::available()
000036e8 g     F .text.itcm	000007b4 MTPStorage_SD::removeFile(unsigned long, char*)
00002e14 g     F .text.itcm	00000822 MTPStorage_SD::ScanDir(unsigned long, unsigned long)
00001338 g     F .text.itcm	00000048 file_writeHeader()
00008c84 g     F .text.itcm	00000068 ExFatPartition::freeChain(unsigned long)
0000279c g     F .text.itcm	0000046c MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)
00009e30 g     F .text.itcm	00000028 FatFile::peek()
00011540 g     F .text.itcm	000016e4 _svfprintf_r
0000fbd0 g     F .text.itcm	00000022 .hidden __floatsidf
00000210  w    F .text.itcm	00000014 SDFile::whoami()
2000162c  w    O .bss	00000001 SDFile::name()::zeroterm
20006244 g     O .bss	00000004 systick_millis_count
000100c8 g     F .text.itcm	00000082 .hidden __ltdf2
000093c0 g     F .text.itcm	000000ae ExFatFile::rename(ExFatFile*, char const*)
0000f234 g     F .text.itcm	00000030 usb_mtp_available
0000084c  w    F .text.itcm	00000044 SDFile::truncate(unsigned long long)
000070b8 g     F .text.itcm	000008e4 MTPD::loop()
0001024c g     F .text.itcm	00000000 .hidden __aeabi_uldivmod
20006238 g     O .bss	00000001 usb_configuration
00000084  w    F .text.itcm	00000006 SdCardInterface::status()
60000000 g     O .text.progmem	00000200 FlexSPI_NOR_Config
0000eae8 g     F .text.itcm	00000050 sm_align_pool
0000c7b8 g     F .text.itcm	00000038 SdioCard::syncDevice()
0000c4e0 g     F .text.itcm	000000bc SdioCard::writeData(unsigned char const*)
00000308  w    F .text.itcm	0000005a StreamFile<FsBaseFile, unsigned long long>::available()
00009e58 g     F .text.itcm	00000042 FatFile::readDirCache(bool)
20005b04 g     O .bss	00000004 loop_count
60001a4c  w    O .text.progmem	00000018 usb_string_manufacturer_name
60001a14 g     O .text.progmem	00000008 usb_string_mtp
000105f0 g     F .text.itcm	00000010 malloc
000012e4 g     F .text.itcm	00000054 do_menu(short)
20000048  w    O .data	00000024 vtable for FsFile
0000799c  w    F .text.itcm	0000001c EventResponder::triggerEvent(int, void*)
00007084 g     F .text.itcm	00000034 MTPD::setObjectPropValue(unsigned long, unsigned long)
20000aa8 g     O .data	000000c8 __mprec_tens
6000129c g     F .text.progmem	000000ec usb_init
20005b14 g     O .bss	00000004 sessionID_
0000b61c  w    F .text.itcm	00000004 SdSpiCard::type() const
00000c54  w    F .text.itcm	00000088 SDFile::seek(unsigned long long, int)
200063c4 g     O .bss	00000004 __malloc_top_pad
20008300 g     O .bss	00000004 systick_safe_read
0000b644 g     F .text.itcm	00000076 SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)
aaaaaabf g       *ABS*	00000000 _flexram_bank_config
00009470 g     F .text.itcm	000000e4 ExFatFile::truncate()
20000ba4 g     O .data	00000000 .hidden __dso_handle
0000fbb0 g     F .text.itcm	0000001e .hidden __aeabi_ui2d
00014040 g     F .text.itcm	0000001c _localeconv_r
20000bac g     O .data	00000008 sd_str
0000cf00 g     F .text.itcm	00000058 SdSpiArduinoDriver::deactivate()
000141d8 g     F .text.itcm	00000012 __i2b
20000000 g       .data	00000000 _sdata
0000f018 g     F .text.itcm	000000a0 usb_mtp_configure
20000ba8 g     O .data	00000004 t_on
60001ad4 g     O .text.progmem	00000069 usb_config_descriptor_480
0000011c  w    F .text.itcm	0000000c File::operator bool()
0000a5f0 g     F .text.itcm	0000000e FatCache::sync()
0001027c g     F .text.itcm	000002e2 .hidden __udivmoddi4
000068e8 g     F .text.itcm	000001d8 MTPD::getObjectPropValue(unsigned long, unsigned long)
0000f92c g     F .text.itcm	00000000 .hidden __aeabi_drsub
000097f8 g     F .text.itcm	00000034 FatFile::addCluster()
00011200 g     F .text.itcm	00000024 _sbrk_r
0000ba7c g     F .text.itcm	0000004a SdSpiCard::readRegister(unsigned char, void*)
0000c10c g     F .text.itcm	00000020 SdioCard::type() const
00000098  w    F .text.itcm	0000000c File::write(void const*, unsigned int)
0000e608 g     F .text.itcm	00000002 startup_default_early_hook
6000102c g     F .text.progmem	00000270 ResetHandler
0000d788 g     F .text.itcm	00000020 usb_serial_getchar
00000800  w    F .text.itcm	0000004c SDFile::name()
200063f0 g     O .bss	00000008 usb_cdc_line_coding
0000ec38 g     F .text.itcm	0000000a digitalWrite
2000638c g     O .bss	00000004 EventResponder::lastYield
00007f10 g     F .text.itcm	00000028 ExFatFile::openRoot(ExFatVolume*)
0000037c  w    F .text.itcm	00000038 StreamFile<FsBaseFile, unsigned long long>::read()
00010180 g     F .text.itcm	00000012 .hidden __aeabi_dcmplt
20008400 g     O .bss	00000010 extmem_smalloc_pool
200063c0 g     O .bss	00000004 __malloc_max_sbrked_mem
00000a28  w    F .text.itcm	0000001a SDFile::position()
0000ec44 g     F .text.itcm	00000080 pinMode
0000bd74 g     F .text.itcm	00000042 SdSpiCard::writeStop()
00002c08 g     F .text.itcm	00000160 MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)
0000fbf4 g     F .text.itcm	0000003a .hidden __extendsfdf2
0000fef0 g     F .text.itcm	000001d0 .hidden __aeabi_ddiv
0000f938 g     F .text.itcm	00000276 .hidden __adddf3
000060e4 g     F .text.itcm	00000090 MTPD::getObjectPropsSupported(unsigned long)
60017a2c g     O .text.csf	00000c00 hab_csf
00005728 g     F .text.itcm	000000cc MTPD::writestring(char const*)
0000be38 g     F .text.itcm	00000032 SdSpiCard::writeData(unsigned char const*)
000000b0  w    F .text.itcm	00000010 File::peek()
0000a7a4 g     F .text.itcm	000000ae FatPartition::freeClusterCount()
20280000 g       .text.csf	00000000 _heap_end
00000aec  w    F .text.itcm	000000d0 SDClass::open(char const*, unsigned char)
00014854 g       .ARM.exidx	00000000 __exidx_start
70000000 g       .bss.extram	00000000 _extram_end
0000fc9c g     F .text.itcm	00000254 .hidden __aeabi_dmul
000002fc  w    F .text.itcm	0000000c DMAChannel::~DMAChannel()
0000bc70 g     F .text.itcm	00000050 SdSpiCard::writeStart(unsigned long)
20006390 g     O .bss	00000004 EventResponder::firstYield
2000091c g     O .data	00000004 _global_impure_ptr
00001a10 g     F .text.itcm	00000080 MTPStorage_SD::write(char const*, unsigned long)
000003c8  w    F .text.itcm	00000034 StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)
00010e20 g     F .text.itcm	000003de _realloc_r
00000a60  w    F .text.itcm	00000018 SDFile::read(void*, unsigned int)
000105a0 g     F .text.itcm	00000050 __libc_init_array
0000e770 g     F .text.itcm	00000350 dtostrf
0000092c  w    F .text.itcm	00000044 SDFile::rewindDirectory()
000087ec g     F .text.itcm	0000000e ExFatFile::open(ExFatVolume*, char const*, int)
0000bff8 g     F .text.itcm	0000001c SdioCard::readCID(CID*)
000091a0 g     F .text.itcm	000000e6 ExFatFile::addDirCluster()
00004a14 g     F .text.itcm	00000034 mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*)
0000bde4 g     F .text.itcm	00000052 SdSpiCard::writeData(unsigned char, unsigned char const*)
20000b70 g     O .data	00000028 __mprec_bigtens
0000e610  w    F .text.itcm	0000008c HardFault_HandlerC
0000f568  w    F .text.itcm	00000004 usb_serial_class::clear()
0000fbb0 g     F .text.itcm	0000001e .hidden __floatunsidf
0000e69c g     F .text.itcm	00000030 _sbrk
6001641c g       *ABS*	00000000 _sdataload
0001446c g     F .text.itcm	00000042 __mcmp
00003f64 g     F .text.itcm	000008a8 mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)
2000012c  w    O .data	00000028 vtable for SDClass
000001d0  w    F .text.itcm	00000012 SDFile::operator bool()
20000c28 g     O .data	00000004 __brkval
20006168 g     O .bss	00000001 usb_cdc_line_rtsdtr
60001b4c g     F .text.progmem	00000000 _init
0000d4cc g     F .text.itcm	00000002 usb_serial_reset
000098c0 g     F .text.itcm	0000001e FatFile::cacheDirEntry(unsigned char)
20001d46 g     O .bss	00000002 state
00000728  w    F .text.itcm	00000062 SDClass::remove(char const*)
00000224  w    F .text.itcm	0000001c SDFile::close()
00000e10  w    F .text.itcm	0000005c SDFile::~SDFile()
60001a68 g     O .text.progmem	00000069 usb_config_descriptor_12
0000cecc g     F .text.itcm	00000034 SdSpiArduinoDriver::begin(SdSpiConfig)
20008b00 g       .bss	00000000 _ebss
0000c690 g     F .text.itcm	00000088 SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)
000058bc g     F .text.itcm	000002dc MTPD::WriteDescriptor()
0000f858 g     F .text.itcm	0000001c smalloc_mktag
20000bc8 g     O .data	00000004 propertyListNum
00000bbc  w    F .text.itcm	00000014 StreamFile<FsBaseFile, unsigned long long>::flush()
0000a590 g     F .text.itcm	0000005e FatCache::read(unsigned long, unsigned char)
0001413c g     F .text.itcm	00000040 __hi0bits
000101fc g     F .text.itcm	0000004e .hidden __fixdfsi
00009288 g     F .text.itcm	0000005a ExFatFile::mkdir(ExFatFile*, ExName_t*)
20204080 g       .bss.dma	00000000 _heap_start
00005b98 g     F .text.itcm	00000084 MTPD::WriteStorageIDs()
0000d000  w    F .text.itcm	00000002 SDClass::~SDClass()
00005494 g     F .text.itcm	00000214 MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)
000002fc  w    F .text.itcm	0000000c DMAChannel::~DMAChannel()
2000183c g     O .bss	00000200 diskBuffer
20002d48 g     O .bss	00000968 sdx
00000cdc  w    F .text.itcm	00000028 File::~File()
00000e6c g     F .text.itcm	00000270 storage_configure()
00000003 g       *ABS*	00000000 _itcm_block_count
20007000 g     O .bss	00000020 endpoint0_transfer_data
0000f6e0 g     F .text.itcm	00000004 operator delete(void*, unsigned int)
0000ecc4 g     F .text.itcm	000002b8 pwm_init
0000f938 g     F .text.itcm	00000276 .hidden __aeabi_dadd
000100c8 g     F .text.itcm	00000082 .hidden __ledf2
6000183c g     F .text.progmem	00000064 usb_pll_start
0001431c g     F .text.itcm	000000a0 __pow5mult
0000a080 g     F .text.itcm	0000005c FatFile::rmdir()
0000fc30 g     F .text.itcm	0000006a .hidden __aeabi_ul2d
0000a6e4 g     F .text.itcm	00000082 FatPartition::allocateCluster(unsigned long, unsigned long*)
000008e0  w    F .text.itcm	0000004c SDClass::exists(char const*)
00000000  w      *UND*	00000000 __deregister_frame_info
20007020 g     O .bss	00000020 endpoint0_transfer_ack
200063f8 g     O .bss	00000004 usb_cdc_line_rtsdtr_millis
0000e44c g     F .text.itcm	00000028 usb_transmit
0000f474 g     F .text.itcm	00000020 systick_isr
0000013c  w    F .text.itcm	0000000c File::isDirectory()
0000b364 g     F .text.itcm	00000020 FatFile::getSFN(char*)
0000bbc0 g     F .text.itcm	00000074 SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)
20000c58 g     O .data	00000010 Serial
000000d8  w    F .text.itcm	00000016 File::seek(unsigned long long, int)
0000f588  w    F .text.itcm	00000006 usb_serial_class::write(unsigned char)
0000b4b0 g     F .text.itcm	0000005e FsBaseFile::openNext(FsBaseFile*, int)
0000e608  w    F .text.itcm	00000002 startup_early_hook
00008e0c g     F .text.itcm	0000008e ExFatFile::addCluster()
2000006c  w    O .data	00000060 vtable for File
000009d4  w    F .text.itcm	00000054 SDClass::usedSize()
0000d6c4 g     F .text.itcm	00000044 usb_serial_peekchar
000101bc g     F .text.itcm	00000012 .hidden __aeabi_dcmpgt
00010bb0 g     F .text.itcm	00000000 memchr
0000a67c g     F .text.itcm	00000066 FatPartition::fatPut(unsigned long, unsigned long)
0000d8d8 g     F .text.itcm	000002c4 set_arm_clock
2000623c g     O .bss	00000004 systick_cycle_count
20000c40 g     O .data	00000016 usb_string_serial_number_default
00013e70 g     F .text.itcm	000001d0 _free_r
0000c4dc g     F .text.itcm	00000004 SdioCard::readStop()
00008868 g     F .text.itcm	00000060 FsCache::get(unsigned long, unsigned char)
000101a8 g     F .text.itcm	00000012 .hidden __aeabi_dcmpge
0000490c g     F .text.itcm	00000108 MTPStorage_SD::CopyFiles(unsigned long, unsigned long, unsigned long)
0000f578  w    F .text.itcm	00000004 usb_serial_class::flush()
0000f934 g     F .text.itcm	0000027a .hidden __aeabi_dsub
0000a854 g     F .text.itcm	0000011e FatPartition::init(BlockDeviceInterface*, unsigned char)
00009994 g     F .text.itcm	0000015c FatFile::mkdir(FatFile*, fname_t*)
2000160c g     O .data	00000004 __malloc_sbrk_base
0000f570  w    F .text.itcm	00000004 usb_serial_class::read()
00000180  w    F .text.itcm	0000000c File::rewindDirectory()
0000ad80 g     F .text.itcm	00000128 FatFile::remove()
0000fc30 g     F .text.itcm	0000006a .hidden __floatundidf
0000e6cc  w    F .text.itcm	00000004 __cxa_pure_virtual
000143bc g     F .text.itcm	000000ae __lshift
00009af0 g     F .text.itcm	000000c8 FatFile::mkdir(FatFile*, char const*, bool)
0000e41c g     F .text.itcm	0000002e usb_prepare_transfer
00008db0 g     F .text.itcm	0000005a exFatCmpName(DirName_t const*, char const*, unsigned int, unsigned int)
0000e5f0 g     F .text.itcm	00000018 unused_interrupt_vector
00014680 g     F .text.itcm	00000100 __ssprint_r
600018a0 g     F .text.progmem	0000011c tempmon_init
20006200 g     O .bss	00000004 usb_timer0_callback
00014780 g     F .text.itcm	0000005e _vasnprintf_r
0000f6d8  w    F .text.itcm	00000002 serialEvent()
00012cd0 g     F .text.itcm	000000a4 __register_exitproc
000086e8 g     F .text.itcm	00000104 ExFatFile::open(ExFatFile*, char const*, int)
00011380 g     F .text.itcm	0000002c strlcpy
0001149c g     F .text.itcm	000000a0 strncmp
00001468 g     F .text.itcm	00000140 checkPath(unsigned short, char*)
000092e4 g     F .text.itcm	000000dc ExFatFile::mkdir(ExFatFile*, char const*, bool)
0000d714 g     F .text.itcm	00000074 usb_serial_flush_input
00008cec g     F .text.itcm	00000070 ExFatPartition::freeClusterCount()
00002688 g     F .text.itcm	00000064 MTPStorage_SD::ConstructFilename(int, char*, int)
000141ec g     F .text.itcm	00000130 __multiply
20001a3c g     O .bss	00000004 acq_count
0000d7a8 g     F .text.itcm	0000002c usb_serial_putchar
00000025 g       *ABS*	00000000 _teensy_model_identifier
200063c8 g     O .bss	00000028 __malloc_current_mallinfo
200003d8 g     O .data	00000070 SPIClass::spiclass_lpspi4_hardware
000145c4 g     F .text.itcm	000000ba __d2b
20006398 g     O .bss	00000020 HardwareSerial::s_serials_with_serial_events
0000c0b8  w    F .text.itcm	0000000e SdioCard::~SdioCard()
000019e8  w    F .text.itcm	00000008 MTPStorage_SD::get_FSName(unsigned long)
00007e68 g     F .text.itcm	000000a8 ExFatFile::getName(char*, unsigned int)
0000c59c g     F .text.itcm	0000006c SdioCard::writeStart(unsigned long)
0000f168 g     F .text.itcm	000000cc usb_mtp_send
00010564 g     F .text.itcm	0000000c __cxa_atexit
00008034 g     F .text.itcm	000001a8 ExFatFile::read(void*, unsigned int)
0000fbd0 g     F .text.itcm	00000022 .hidden __aeabi_i2d
00000a78  w    F .text.itcm	00000018 SDFile::peek()
00008928 g     F .text.itcm	0000000e FsCache::sync()
20000bcc g     O .data	00000050 SPI
00010c50 g     F .text.itcm	00000062 memcmp
200008f0  w    O .data	00000028 vtable for usb_serial_class
0000cf90 g     F .text.itcm	00000012 SdSpiArduinoDriver::send(unsigned char)
00006ad8 g     F .text.itcm	0000011c MTPD::GetObject(unsigned long)
0000cffc g     F .text.itcm	00000004 sdCsWrite(unsigned char, bool)
20006240 g     O .bss	00000004 scale_cpu_cycles_to_microseconds
00010560  w    F .text.itcm	00000002 .hidden __aeabi_ldiv0
00008f74 g     F .text.itcm	0000005a ExFatFile::rmdir()
00006174 g     F .text.itcm	00000772 MTPD::getObjectPropDesc(unsigned long, unsigned long)
0000fef0 g     F .text.itcm	000001d0 .hidden __divdf3
0000bad8 g     F .text.itcm	00000098 SdSpiCard::sectorCount()
000019f4 g     F .text.itcm	00000004 MTPStorage_SD::has_directories(unsigned long)
20001200 g     O .data	00000408 __malloc_av_
000003b4  w    F .text.itcm	00000014 SDFile::flush()
0000fc9c g     F .text.itcm	00000254 .hidden __muldf3
0000d838 g     F .text.itcm	000000a0 usb_serial_flush_output
00010e18 g     F .text.itcm	00000002 __malloc_lock
0000aafc g     F .text.itcm	00000284 FatFile::parsePathName(char const*, fname_t*, char const**)
20008800 g     O .bss	000002c0 _VectorsRam
0000cfa4 g     F .text.itcm	0000004e SdSpiArduinoDriver::send(unsigned char const*, unsigned int)
000147e0 g     F .text.itcm	0000005e _calloc_r
00007ae4 g     F .text.itcm	00000230 SPIClass::begin()
00006d2c g     F .text.itcm	00000070 MTPD::read(char*, unsigned long)
00001380 g     F .text.itcm	00000038 file_writeData(void*, unsigned long)
20000c56 g     O .data	00000001 yield_active_check_flags
00009140 g     F .text.itcm	0000005e ExFatFile::sync()
20006210 g     O .bss	00000001 usb_high_speed
00009e9c g     F .text.itcm	000001e2 FatFile::rename(FatFile*, char const*)
0000c23c g     F .text.itcm	0000001c SdioCard::isBusy()
0000bc34 g     F .text.itcm	0000003a SdSpiCard::readStop()
00010d7c g     F .text.itcm	0000009a memset
0000f6c8 g     F .text.itcm	00000010 main
200063bc g     O .bss	00000004 __malloc_max_total_mem
0000f6e4 g     F .text.itcm	0000012e sm_malloc_pool
00008938 g     F .text.itcm	000000b2 ExFatPartition::bitmapFind(unsigned long, unsigned long)
20204000 g     O .bss.dma	00000069 usb_descriptor_buffer
00009554 g     F .text.itcm	00000270 ExFatFile::write(void const*, unsigned int)
20000280 g     O .data	00000060 vtable for MTPStorage_SD
00006e18 g     F .text.itcm	00000158 MTPD::SendObjectInfo(unsigned long, unsigned long)
0001132c g     F .text.itcm	00000052 strlcat
00000bf8  w    F .text.itcm	0000005a SDFile::available()
00000110  w    F .text.itcm	0000000c File::close()
0000f264 g     F .text.itcm	00000058 usb_init_serialnumber
60001bb4 g       .text.progmem	00000000 __init_array_end
00012ea0 g     F .text.itcm	00000e34 _dtoa_r
00010610 g     F .text.itcm	00000570 _malloc_r
200063b8 g     O .bss	00000001 HardwareSerial::s_count_serials_with_serial_events
00012c88 g     F .text.itcm	0000001a __ascii_wctomb
0000b384 g     F .text.itcm	00000084 FsBaseFile::FsBaseFile(FsBaseFile const&)
0000fc40 g     F .text.itcm	0000005a .hidden __aeabi_l2d
200003c8  w    O .data	00000010 SPIClass::beginTransaction(SPISettings)::clk_sel
0000f3ac g     F .text.itcm	00000080 EventResponder::triggerEventNotImmediate()
00007e4c g     F .text.itcm	00000008 SPIClass::transfer(void const*, void*, unsigned int)
00000031 g       *ABS*	00000000 __rtc_localtime
0000e58c g     F .text.itcm	00000064 micros
00000148  w    F .text.itcm	00000038 File::openNextFile(unsigned char)
00008fd0 g     F .text.itcm	00000170 ExFatFile::syncDir()
00013dd4 g     F .text.itcm	0000009c _malloc_trim_r
60001a64 g     O .text.progmem	00000004 string0
0000d7d4 g     F .text.itcm	00000018 usb_serial_write
000019c8  w    F .text.itcm	0000001a MTPStorage_SD::addFilesystem(FS&, char const*)
0000e60c  w    F .text.itcm	00000002 startup_late_hook
0000f574  w    F .text.itcm	00000004 usb_serial_class::available()
60001b4a g     O .text.progmem	00000001 _serialEvent_default
00006d9c g     F .text.itcm	00000044 MTPD::readstring(char*)
0000a2d8 g     F .text.itcm	0000000c FatFile::sync()
00000890  w    F .text.itcm	00000050 SDClass::mkdir(char const*)
20008000 g     O .bss	00000300 endpoint_queue_head
60001a1c  w    O .text.progmem	0000002e usb_string_product_name
00005d8c g     F .text.itcm	00000028 MTPD::GetNumObjects(unsigned long, unsigned long)
0000e4c0 g     F .text.itcm	000000cc delay
000100d0 g     F .text.itcm	0000007a .hidden __nedf2
20006396 g     O .bss	00000002 dma_channel_allocated_mask
00001b0c g     F .text.itcm	00000118 MTPStorage_SD::CloseIndex()
00014850 g     F .fini	00000000 _fini
00000128  w    F .text.itcm	00000014 File::name()
60001020 g     O .text.progmem	0000000c BootData
0000bb70 g     F .text.itcm	00000050 SdSpiCard::readStart(unsigned long)
000087fc g     F .text.itcm	00000040 ExFatFile::openNext(ExFatFile*, int)
00011224 g     F .text.itcm	0000004c sprintf
0000f5ec g     F .text.itcm	0000001e Print::printf(char const*, ...)
00009974 g     F .text.itcm	0000001e FatFile::close()
0000ebc8 g     F .text.itcm	00000024 Panic_Temp_isr
000000f0  w    F .text.itcm	00000010 File::position()
00000d04  w    F .text.itcm	00000064 SDFile::~SDFile()
0000a600 g     F .text.itcm	0000000c FatPartition::clusterStartSector(unsigned long) const
0000c040  w    F .text.itcm	00000002 SdioCard::~SdioCard()
00000364  w    F .text.itcm	00000018 StreamFile<FsBaseFile, unsigned long long>::peek()
000001b8  w    F .text.itcm	00000018 File::write(unsigned char)
00012ca4 g     F .text.itcm	0000002c _write_r
20005b70 g     O .bss	000004b4 SD
0000c39c g     F .text.itcm	000000d4 SdioCard::erase(unsigned long, unsigned long)
00007d14 g     F .text.itcm	0000006c SPIClass::setMOSI(unsigned char)
0000f0b8 g     F .text.itcm	000000b0 usb_mtp_recv
20001090 g     O .data	00000004 _impure_ptr
20000000  w    O .data	00000024 vtable for Stream
000081dc g     F .text.itcm	0000002c ExFatFile::peek()
20000024  w    O .data	00000024 vtable for StreamFile<FsBaseFile, unsigned long long>
0000aea8 g     F .text.itcm	000000be FatFile::lfnUniqueSfn(fname_t*)
00000be4  w    F .text.itcm	00000014 SDFile::write(void const*, unsigned int)
0000b5d8 g     F .text.itcm	00000028 FsVolume::open(char const*, int)
0000bfe0 g     F .text.itcm	0000000c SdioCard::errorCode() const
00009c80 g     F .text.itcm	0000000e FatFile::open(FatVolume*, char const*, int)
00000bd0  w    F .text.itcm	00000014 StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)
60001ba8 g       .text.progmem	00000000 __preinit_array_end
0000b630  w    F .text.itcm	00000002 SdSpiCard::~SdSpiCard()
000089ec g     F .text.itcm	000000ec ExFatPartition::init(BlockDeviceInterface*, unsigned char)
00008bbc g     F .text.itcm	00000036 ExFatPartition::dirCache(DirPos_t*, unsigned char)
0000bcc0 g     F .text.itcm	000000b4 SdSpiCard::erase(unsigned long, unsigned long)
00003f50 g     F .text.itcm	00000012 MTPStorage_SD::DeleteObject(unsigned long)
00010b80 g     F .text.itcm	0000002a __ascii_mbtowc
0000b6f8 g     F .text.itcm	0000003e SdSpiCard::isBusy()
20000450 g     O .data	00000058 vtable for SdSpiCard
2000163c g     O .bss	00000200 header
0000bad0  w    F .text.itcm	00000008 SdSpiCard::readCID(CID*)
000010dc g     F .text.itcm	000000b8 setup
20000878 g     O .data	00000078 usb_descriptor_list
0000c194 g     F .text.itcm	00000020 SdioCard::status()
00001a90 g     F .text.itcm	0000007c MTPStorage_SD::ResetIndex()
00006ac0 g     F .text.itcm	00000018 MTPD::pull_packet(unsigned char*)
00000080  w    F .text.itcm	00000002 Print::flush()
00000100  w    F .text.itcm	00000010 File::size()
00000970  w    F .text.itcm	00000062 SDClass::rmdir(char const*)
000015a8 g     F .text.itcm	00000140 file_open(unsigned short)
00009c9c g     F .text.itcm	00000192 FatFile::read(void*, unsigned int)
00006bf4 g     F .text.itcm	00000138 MTPD::GetPartialObject(unsigned long, unsigned long, unsigned long)
00009c90 g     F .text.itcm	0000000c FatFile::openRoot(FatVolume*)
20068000 g       .text.csf	00000000 _estack
0000b600 g     F .text.itcm	00000004 operator new(unsigned int, unsigned long*)
0000bac8  w    F .text.itcm	00000008 SdSpiCard::readCSD(csd_t*)
0000f534 g     F .text.itcm	00000034 DMAChannel::release()
0000018c  w    F .text.itcm	0000002c File::read()
0000d7ec g     F .text.itcm	0000004c usb_serial_write_buffer_free
0000b7ac g     F .text.itcm	00000030 SdSpiCard::waitNotBusy(unsigned short)
0001016c g     F .text.itcm	00000012 .hidden __aeabi_dcmpeq
0000d4d0 g     F .text.itcm	00000108 usb_serial_configure
00000d68  w    F .text.itcm	00000030 File::~File()
0000f5dc  w    F .text.itcm	0000000e _write
20001638 g     O .bss	00000004 maxDel
20001610 g       .data	00000000 _edata
00008c60 g     F .text.itcm	00000024 ExFatPartition::fatPut(unsigned long, unsigned long)
20006248 g     O .bss	00000001 external_psram_size
00005e40 g     F .text.itcm	000002a4 MTPD::GetObjectInfo(unsigned long)
0000c040  w    F .text.itcm	00000002 SdioCard::~SdioCard()
0000bdb8 g     F .text.itcm	0000002c SdSpiCard::syncDevice()
0000982c g     F .text.itcm	00000094 FatFile::addDirCluster()
0000008c  w    F .text.itcm	0000000c File::read(void*, unsigned int)
0000f57c  w    F .text.itcm	00000004 usb_serial_class::availableForWrite()
000000cc  w    F .text.itcm	0000000c File::truncate(unsigned long long)
0000e720 g     F .text.itcm	0000004e ultoa
0000d000  w    F .text.itcm	00000002 SDClass::~SDClass()
0000b85c g     F .text.itcm	000001cc SdSpiCard::begin(SdSpiConfig)
0000b430 g     F .text.itcm	00000080 FsBaseFile::open(FsVolume*, char const*, int)
00002228 g     F .text.itcm	00000210 MTPStorage_SD::ReadIndexRecord(unsigned long)
0000f6dc g     F .text.itcm	00000004 operator new(unsigned int)
0000f42c g     F .text.itcm	00000044 EventResponder::runFromInterrupt()
20001608 g     O .data	00000004 __malloc_trim_threshold
0000f56c  w    F .text.itcm	00000004 usb_serial_class::peek()
00010570 g     F .text.itcm	00000024 fcvtf
00002438 g     F .text.itcm	0000005e MTPStorage_SD::GetNextObjectHandle(unsigned long)
00000d98  w    F .text.itcm	00000078 MTPStorage_SD::~MTPStorage_SD()
200036c0 g     O .bss	00002440 mtpd
000144b0 g     F .text.itcm	00000114 __mdiff
0000c030 g     F .text.itcm	00000010 SdioCard::readOCR(unsigned long*)
000101fc g     F .text.itcm	0000004e .hidden __aeabi_d2iz
00002d68 g     F .text.itcm	000000aa MTPStorage_SD::Create(unsigned long, unsigned long, bool, char const*)
00008bf4 g     F .text.itcm	00000058 ExFatPartition::dirSeek(DirPos_t*, unsigned long)
0000c4dc g     F .text.itcm	00000004 SdioCard::writeStop()
0000b620  w    F .text.itcm	00000010 SdSpiCard::writeSector(unsigned long, unsigned char const*)
00007e54 g     F .text.itcm	00000014 ExFatFile::close()
20000990 g     O .data	00000101 _ctype_
0000b60c  w    F .text.itcm	00000010 SdSpiCard::readSector(unsigned long, unsigned char*)
60001ba8 g       .text.progmem	00000000 __init_array_start
00010560  w    F .text.itcm	00000002 .hidden __aeabi_idiv0
00001cc4 g     F .text.itcm	00000394 MTPStorage_SD::OpenIndex()
000101d0 g     F .text.itcm	0000002c .hidden __unorddf2
20000c20 g     O .data	00000004 F_BUS_ACTUAL
0000078c  w    F .text.itcm	00000074 SDClass::rename(char const*, char const*)
00000000 g       .text.itcm	00000000 _stext
0000f494 g     F .text.itcm	000000a0 DMAChannel::begin(bool)
000113c0 g     F .text.itcm	000000dc strlen
0000a9c4 g     F .text.itcm	0000002e FatFile::openCluster(FatFile*)
0001015c g     F .text.itcm	00000010 .hidden __aeabi_cdcmpeq
000100c0 g     F .text.itcm	0000008a .hidden __gedf2
0000a0dc g     F .text.itcm	00000092 FatFile::seekSet(unsigned long)
60001a1c g     O .text.progmem	0000002e usb_string_product_name_default
00012c70 g     F .text.itcm	00000018 vdprintf
0000c330 g     F .text.itcm	0000006c SdioCard::sectorCount()
0000b510 g     F .text.itcm	000000c8 FsVolume::begin(BlockDeviceInterface*)
0000a248 g     F .text.itcm	0000008e FatFile::openNext(FatFile*, int)
200004a8 g     O .data	00000058 vtable for SdioCard
0000fbf4 g     F .text.itcm	0000003a .hidden __aeabi_f2d
000024ec g     F .text.itcm	0000019c MTPStorage_SD::close()
0000a9f4 g     F .text.itcm	00000108 FatFile::getName(char*, unsigned int)
60001388 g     F .text.progmem	000000f8 configure_cache
00000d98  w    F .text.itcm	00000078 MTPStorage_SD::~MTPStorage_SD()
000026ec g     F .text.itcm	000000b0 MTPStorage_SD::rename(unsigned long, char const*)
0000ccac g     F .text.itcm	0000006c SdioCard::readStart(unsigned long)
00000000  w      *UND*	00000000 _Jv_RegisterClasses
0000cdc8 g     F .text.itcm	00000104 SdSpiArduinoDriver::activate()
000019f0 g     F .text.itcm	00000004 MTPStorage_SD::readonly(unsigned long)
0000f934 g     F .text.itcm	0000027a .hidden __subdf3
00001288 g     F .text.itcm	0000005c pullData(unsigned long*, unsigned long)
60001ba8 g       .text.progmem	00000000 __preinit_array_start
0000e474 g     F .text.itcm	00000024 usb_receive
00008ad8 g     F .text.itcm	000000aa ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)
000024d4 g     F .text.itcm	00000016 MTPStorage_SD::GetSize(unsigned long)
000001e8  w    F .text.itcm	00000028 File::whoami()
200036b0 g     O .bss	00000004 data_buffer
0001417c g     F .text.itcm	0000005a __lo0bits
00008b84 g     F .text.itcm	00000038 ExFatPartition::chainSize(unsigned long)
0000a170 g     F .text.itcm	000000d6 FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)
00018628 g       *ABS*	00000000 _flashimagelen
0000f920 g     F .text.itcm	0000000a __aeabi_atexit
00000000  w      *UND*	00000000 __register_frame_info
0000e6d0 g     F .text.itcm	00000030 rtc_get
00008e9c g     F .text.itcm	000000d6 ExFatFile::remove()
70000000 g       .bss.extram	00000000 _extram_start
0000f470 g     F .text.itcm	00000004 pendablesrvreq_isr
00000a90  w    F .text.itcm	00000034 SDClass::totalSize()
00006f70 g     F .text.itcm	00000114 MTPD::SendObject()
00001a04 g     F .text.itcm	0000000c MTPStorage_SD::usedSize(unsigned long)
0000007c  w    F .text.itcm	00000004 Print::availableForWrite()
20001094 g     O .data	0000016c __global_locale
00007d80 g     F .text.itcm	00000060 SPIClass::setMISO(unsigned char)
000013b8 g     F .text.itcm	00000028 file_close()
0000c88c g     F .text.itcm	00000364 SdioCard::begin(SdioConfig)
0000885c g     F .text.itcm	0000000c FsCache::invalidate()
0000d5d8 g     F .text.itcm	000000ec usb_serial_read
0000e3b4 g     F .text.itcm	00000068 usb_config_tx
0000a60c g     F .text.itcm	00000070 FatPartition::fatGet(unsigned long, unsigned long*)
00010600 g     F .text.itcm	00000010 free
000140bc g     F .text.itcm	00000080 __multadd
000140a8 g     F .text.itcm	00000012 _Bfree
00000a44  w    F .text.itcm	0000001a SDFile::size()
00000e10  w    F .text.itcm	0000005c SDFile::~SDFile()
20000c40  w    O .data	00000016 usb_string_serial_number
00008d74 g     F .text.itcm	0000003c exFatHashName(char const*, unsigned int, unsigned short)
0000cd18 g     F .text.itcm	000000b0 SdioCard::readSector(unsigned long, unsigned char*)
0000c014 g     F .text.itcm	0000001c SdioCard::readCSD(csd_t*)



Disassembly of section .text.progmem:

60000000 <FlexSPI_NOR_Config>:
60000000:	FCFB...V........
	...
60000044:	................
	...
60000080:	.....2.&........
60000090:	...$............
	...
600000b0:	................
	...
600000d0:	 ...............
	...
60000100:	................
60000110:	..... ..........
	...
60000130:	`...............
	...
600001c0:	................
600001d0:	................
	...
60000200:	................
60000210:	................
60000220:	................
60000230:	................
60000240:	................
60000250:	................
60000260:	................
60000270:	................
60000280:	................
60000290:	................
600002a0:	................
600002b0:	................
600002c0:	................
600002d0:	................
600002e0:	................
600002f0:	................
60000300:	................
60000310:	................
60000320:	................
60000330:	................
60000340:	................
60000350:	................
60000360:	................
60000370:	................
60000380:	................
60000390:	................
600003a0:	................
600003b0:	................
600003c0:	................
600003d0:	................
600003e0:	................
600003f0:	................
60000400:	................
60000410:	................
60000420:	................
60000430:	................
60000440:	................
60000450:	................
60000460:	................
60000470:	................
60000480:	................
60000490:	................
600004a0:	................
600004b0:	................
600004c0:	................
600004d0:	................
600004e0:	................
600004f0:	................
60000500:	................
60000510:	................
60000520:	................
60000530:	................
60000540:	................
60000550:	................
60000560:	................
60000570:	................
60000580:	................
60000590:	................
600005a0:	................
600005b0:	................
600005c0:	................
600005d0:	................
600005e0:	................
600005f0:	................
60000600:	................
60000610:	................
60000620:	................
60000630:	................
60000640:	................
60000650:	................
60000660:	................
60000670:	................
60000680:	................
60000690:	................
600006a0:	................
600006b0:	................
600006c0:	................
600006d0:	................
600006e0:	................
600006f0:	................
60000700:	................
60000710:	................
60000720:	................
60000730:	................
60000740:	................
60000750:	................
60000760:	................
60000770:	................
60000780:	................
60000790:	................
600007a0:	................
600007b0:	................
600007c0:	................
600007d0:	................
600007e0:	................
600007f0:	................
60000800:	................
60000810:	................
60000820:	................
60000830:	................
60000840:	................
60000850:	................
60000860:	................
60000870:	................
60000880:	................
60000890:	................
600008a0:	................
600008b0:	................
600008c0:	................
600008d0:	................
600008e0:	................
600008f0:	................
60000900:	................
60000910:	................
60000920:	................
60000930:	................
60000940:	................
60000950:	................
60000960:	................
60000970:	................
60000980:	................
60000990:	................
600009a0:	................
600009b0:	................
600009c0:	................
600009d0:	................
600009e0:	................
600009f0:	................
60000a00:	................
60000a10:	................
60000a20:	................
60000a30:	................
60000a40:	................
60000a50:	................
60000a60:	................
60000a70:	................
60000a80:	................
60000a90:	................
60000aa0:	................
60000ab0:	................
60000ac0:	................
60000ad0:	................
60000ae0:	................
60000af0:	................
60000b00:	................
60000b10:	................
60000b20:	................
60000b30:	................
60000b40:	................
60000b50:	................
60000b60:	................
60000b70:	................
60000b80:	................
60000b90:	................
60000ba0:	................
60000bb0:	................
60000bc0:	................
60000bd0:	................
60000be0:	................
60000bf0:	................
60000c00:	................
60000c10:	................
60000c20:	................
60000c30:	................
60000c40:	................
60000c50:	................
60000c60:	................
60000c70:	................
60000c80:	................
60000c90:	................
60000ca0:	................
60000cb0:	................
60000cc0:	................
60000cd0:	................
60000ce0:	................
60000cf0:	................
60000d00:	................
60000d10:	................
60000d20:	................
60000d30:	................
60000d40:	................
60000d50:	................
60000d60:	................
60000d70:	................
60000d80:	................
60000d90:	................
60000da0:	................
60000db0:	................
60000dc0:	................
60000dd0:	................
60000de0:	................
60000df0:	................
60000e00:	................
60000e10:	................
60000e20:	................
60000e30:	................
60000e40:	................
60000e50:	................
60000e60:	................
60000e70:	................
60000e80:	................
60000e90:	................
60000ea0:	................
60000eb0:	................
60000ec0:	................
60000ed0:	................
60000ee0:	................
60000ef0:	................
60000f00:	................
60000f10:	................
60000f20:	................
60000f30:	................
60000f40:	................
60000f50:	................
60000f60:	................
60000f70:	................
60000f80:	................
60000f90:	................
60000fa0:	................
60000fb0:	................
60000fc0:	................
60000fd0:	................
60000fe0:	................
60000ff0:	................

60001000 <ImageVectorTable>:
60001000:	.. C-..`........
60001010:	 ..`...`,z.`....

60001020 <BootData>:
60001020:	...`(.......

6000102c <ResetHandler>:
void ResetHandler(void)
{
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
6000102c:	ldr	r3, [pc, #472]	; (60001208 <ResetHandler+0x1dc>)
	IOMUXC_GPR_GPR16 = 0x00200007;
	IOMUXC_GPR_GPR14 = 0x00AA0000;
6000102e:	mov.w	r1, #11141120	; 0xaa0000
void ResetHandler(void)
{
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
60001032:	ldr	r2, [pc, #472]	; (6000120c <ResetHandler+0x1e0>)
	IOMUXC_GPR_GPR16 = 0x00200007;
60001034:	ldr	r0, [pc, #472]	; (60001210 <ResetHandler+0x1e4>)
void startup_early_hook(void)		__attribute__ ((weak, alias("startup_default_early_hook")));
void startup_default_late_hook(void) {}
void startup_late_hook(void)		__attribute__ ((weak, alias("startup_default_late_hook")));
__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
void ResetHandler(void)
{
60001036:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
6000103a:	str	r2, [r3, #68]	; 0x44
	IOMUXC_GPR_GPR16 = 0x00200007;
6000103c:	str	r0, [r3, #64]	; 0x40
	IOMUXC_GPR_GPR14 = 0x00AA0000;
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
6000103e:	ldr	r2, [pc, #468]	; (60001214 <ResetHandler+0x1e8>)
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
	IOMUXC_GPR_GPR16 = 0x00200007;
	IOMUXC_GPR_GPR14 = 0x00AA0000;
60001040:	str	r1, [r3, #56]	; 0x38
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
60001042:	mov	sp, r2
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
60001044:	ldr	r2, [pc, #464]	; (60001218 <ResetHandler+0x1ec>)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
	IOMUXC_GPR_GPR16 = 0x00200007;
	IOMUXC_GPR_GPR14 = 0x00AA0000;
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
#endif
	PMU_MISC0_SET = 1<<3; //Use bandgap-based bias currents for best performance (Page 1175)
60001046:	add.w	r3, r3, #180224	; 0x2c000
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
6000104a:	ldr	r1, [pc, #464]	; (6000121c <ResetHandler+0x1f0>)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
	IOMUXC_GPR_GPR16 = 0x00200007;
	IOMUXC_GPR_GPR14 = 0x00AA0000;
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
#endif
	PMU_MISC0_SET = 1<<3; //Use bandgap-based bias currents for best performance (Page 1175)
6000104c:	movs	r0, #8
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
6000104e:	cmp	r2, r1
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
	IOMUXC_GPR_GPR16 = 0x00200007;
	IOMUXC_GPR_GPR14 = 0x00AA0000;
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
#endif
	PMU_MISC0_SET = 1<<3; //Use bandgap-based bias currents for best performance (Page 1175)
60001050:	str.w	r0, [r3, #340]	; 0x154
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
60001054:	beq.n	60001076 <ResetHandler+0x4a>
	while (dest < dest_end) {
60001056:	ldr	r3, [pc, #456]	; (60001220 <ResetHandler+0x1f4>)
60001058:	cmp	r2, r3
6000105a:	bcs.n	60001076 <ResetHandler+0x4a>
6000105c:	mvns	r4, r2
6000105e:	mov	r0, r1
60001060:	add	r3, r4
60001062:	bic.w	r3, r3, #3
60001066:	adds	r3, #4
60001068:	add	r3, r1
		*dest++ = *src++;
6000106a:	ldr.w	r1, [r0], #4

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
6000106e:	cmp	r0, r3
		*dest++ = *src++;
60001070:	str.w	r1, [r2], #4

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
60001074:	bne.n	6000106a <ResetHandler+0x3e>
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
60001076:	ldr	r2, [pc, #428]	; (60001224 <ResetHandler+0x1f8>)
60001078:	ldr	r1, [pc, #428]	; (60001228 <ResetHandler+0x1fc>)
6000107a:	cmp	r2, r1
6000107c:	beq.n	6000109e <ResetHandler+0x72>
	while (dest < dest_end) {
6000107e:	ldr	r3, [pc, #428]	; (6000122c <ResetHandler+0x200>)
60001080:	cmp	r2, r3
60001082:	bcs.n	6000109e <ResetHandler+0x72>
60001084:	mvns	r4, r2
60001086:	mov	r0, r1
60001088:	add	r3, r4
6000108a:	bic.w	r3, r3, #3
6000108e:	adds	r3, #4
60001090:	add	r3, r1
		*dest++ = *src++;
60001092:	ldr.w	r1, [r0], #4

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
60001096:	cmp	r0, r3
		*dest++ = *src++;
60001098:	str.w	r1, [r2], #4

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
6000109c:	bne.n	60001092 <ResetHandler+0x66>
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_clear(uint32_t *dest, uint32_t *dest_end)
{
	while (dest < dest_end) {
6000109e:	ldr	r2, [pc, #400]	; (60001230 <ResetHandler+0x204>)
600010a0:	ldr	r3, [pc, #400]	; (60001234 <ResetHandler+0x208>)
600010a2:	cmp	r2, r3
600010a4:	bcs.n	600010be <ResetHandler+0x92>
600010a6:	mvns	r0, r2
600010a8:	mov	r1, r2
		*dest++ = 0;
600010aa:	movs	r4, #0
600010ac:	add	r3, r0
600010ae:	bic.w	r3, r3, #3
600010b2:	adds	r3, #4
600010b4:	add	r3, r2
600010b6:	str.w	r4, [r1], #4
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_clear(uint32_t *dest, uint32_t *dest_end)
{
	while (dest < dest_end) {
600010ba:	cmp	r3, r1
600010bc:	bne.n	600010b6 <ResetHandler+0x8a>
	memory_copy(&_stext, &_stextload, &_etext);
	memory_copy(&_sdata, &_sdataload, &_edata);
	memory_clear(&_sbss, &_ebss);

	// enable FPU
	SCB_CPACR = 0x00F00000;
600010be:	ldr	r2, [pc, #376]	; (60001238 <ResetHandler+0x20c>)
600010c0:	mov.w	r1, #15728640	; 0xf00000
600010c4:	ldr	r3, [pc, #372]	; (6000123c <ResetHandler+0x210>)
600010c6:	str	r1, [r2, #0]
600010c8:	add.w	r1, r3, #704	; 0x2c0
600010cc:	ldr	r2, [pc, #368]	; (60001240 <ResetHandler+0x214>)

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
600010ce:	str.w	r2, [r3, #4]!
600010d2:	cmp	r1, r3
600010d4:	bne.n	600010ce <ResetHandler+0xa2>
600010d6:	ldr	r3, [pc, #364]	; (60001244 <ResetHandler+0x218>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
600010d8:	movs	r1, #128	; 0x80
600010da:	ldr	r2, [pc, #364]	; (60001248 <ResetHandler+0x21c>)
600010dc:	strb.w	r1, [r3], #1
600010e0:	cmp	r3, r2
600010e2:	bne.n	600010dc <ResetHandler+0xb0>
}

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
600010e4:	ldr	r4, [pc, #356]	; (6000124c <ResetHandler+0x220>)
600010e6:	mov.w	r7, #2155905152	; 0x80808080
	reset_PFD();
	
	// Configure clocks
	// TODO: make sure all affected peripherals are turned off!
	// PIT & GPT timers to run from 24 MHz clock (independent of CPU speed)
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600010ea:	ldr	r6, [pc, #356]	; (60001250 <ResetHandler+0x224>)
	// UARTs run from 24 MHz clock (works if PLL3 off or bypassed)
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;

#if defined(__IMXRT1062__)
	// Use fast GPIO6, GPIO7, GPIO8, GPIO9
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600010ec:	mov.w	r2, #4294967295
	SCB_CPACR = 0x00F00000;

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
	SCB_VTOR = (uint32_t)_VectorsRam;
600010f0:	ldr.w	sl, [pc, #412]	; 60001290 <ResetHandler+0x264>
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
600010f4:	movs	r5, #0
	SCB_CPACR = 0x00F00000;

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
	SCB_VTOR = (uint32_t)_VectorsRam;
600010f6:	ldr	r3, [pc, #348]	; (60001254 <ResetHandler+0x228>)

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
600010f8:	ldr.w	r9, [pc, #408]	; 60001294 <ResetHandler+0x268>
	//PLL3:
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
600010fc:	ldr.w	r8, [pc, #408]	; 60001298 <ResetHandler+0x26c>
	SCB_CPACR = 0x00F00000;

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
	SCB_VTOR = (uint32_t)_VectorsRam;
60001100:	str.w	sl, [r3]
}

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
60001104:	str.w	r7, [r4, #260]	; 0x104
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
60001108:	str.w	r9, [r4, #256]	; 0x100
	//PLL3:
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
6000110c:	str.w	r7, [r4, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
60001110:	str.w	r8, [r4, #240]	; 0xf0
	reset_PFD();
	
	// Configure clocks
	// TODO: make sure all affected peripherals are turned off!
	// PIT & GPT timers to run from 24 MHz clock (independent of CPU speed)
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
60001114:	ldr	r3, [r6, #28]
	// UARTs run from 24 MHz clock (works if PLL3 off or bypassed)
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;

#if defined(__IMXRT1062__)
	// Use fast GPIO6, GPIO7, GPIO8, GPIO9
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
60001116:	ldr	r1, [pc, #240]	; (60001208 <ResetHandler+0x1dc>)
	reset_PFD();
	
	// Configure clocks
	// TODO: make sure all affected peripherals are turned off!
	// PIT & GPT timers to run from 24 MHz clock (independent of CPU speed)
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
60001118:	bic.w	r3, r3, #127	; 0x7f
6000111c:	orr.w	r3, r3, #64	; 0x40
60001120:	str	r3, [r6, #28]
	// UARTs run from 24 MHz clock (works if PLL3 off or bypassed)
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;
60001122:	ldr	r3, [r6, #36]	; 0x24
60001124:	bic.w	r3, r3, #127	; 0x7f
60001128:	orr.w	r3, r3, #64	; 0x40
6000112c:	str	r3, [r6, #36]	; 0x24

#if defined(__IMXRT1062__)
	// Use fast GPIO6, GPIO7, GPIO8, GPIO9
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
6000112e:	str	r2, [r1, #104]	; 0x68
	IOMUXC_GPR_GPR27 = 0xFFFFFFFF;
60001130:	str	r2, [r1, #108]	; 0x6c
	IOMUXC_GPR_GPR28 = 0xFFFFFFFF;
60001132:	str	r2, [r1, #112]	; 0x70
	IOMUXC_GPR_GPR29 = 0xFFFFFFFF;
60001134:	str	r2, [r1, #116]	; 0x74
	// must enable PRINT_DEBUG_STUFF in debug/print.h
	printf_debug_init();
	printf("\n***********IMXRT Startup**********\n");
	printf("test %d %d %d\n", 1, -1234567, 3);

	configure_cache();
60001136:	bl	60001388 <configure_cache>
extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
6000113a:	ldr	r2, [pc, #284]	; (60001258 <ResetHandler+0x22c>)
6000113c:	movs	r0, #99	; 0x63
	SYST_CVR = 0;
6000113e:	ldr	r3, [pc, #284]	; (6000125c <ResetHandler+0x230>)
#define SYSTICK_EXT_FREQ 100000

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
60001140:	ldr	r1, [pc, #284]	; (60001260 <ResetHandler+0x234>)
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
60001142:	str	r0, [r2, #0]
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
60001144:	movs	r2, #3
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
60001146:	str	r5, [r3, #0]
#define SYSTICK_EXT_FREQ 100000

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
60001148:	str.w	r1, [sl, #56]	; 0x38
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
6000114c:	str.w	r2, [r3, #-8]
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
60001150:	ldr	r1, [pc, #272]	; (60001264 <ResetHandler+0x238>)
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
60001152:	ldr	r2, [pc, #276]	; (60001268 <ResetHandler+0x23c>)

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
60001154:	ldr	r0, [pc, #276]	; (6000126c <ResetHandler+0x240>)
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
60001156:	str.w	r2, [r3, #3336]	; 0xd08
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
6000115a:	ldr	r3, [r1, #0]
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
6000115c:	ldr	r2, [pc, #272]	; (60001270 <ResetHandler+0x244>)
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
6000115e:	orr.w	r3, r3, #16777216	; 0x1000000

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
60001162:	str.w	r0, [sl, #60]	; 0x3c
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
60001166:	ldr	r0, [pc, #268]	; (60001274 <ResetHandler+0x248>)
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
60001168:	str	r3, [r1, #0]
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
6000116a:	ldr	r3, [r2, #0]
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
6000116c:	ldr	r1, [pc, #264]	; (60001278 <ResetHandler+0x24c>)
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
6000116e:	orr.w	r3, r3, #1
60001172:	str	r3, [r2, #0]
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
60001174:	ldr	r3, [r0, #0]
60001176:	str	r3, [r1, #0]
	printf("\n***********IMXRT Startup**********\n");
	printf("test %d %d %d\n", 1, -1234567, 3);

	configure_cache();
	configure_systick();
	usb_pll_start();	
60001178:	bl	6000183c <usb_pll_start>
}

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
6000117c:	str.w	r7, [r4, #260]	; 0x104
	configure_cache();
	configure_systick();
	usb_pll_start();	
	reset_PFD(); //TODO: is this really needed?
#ifdef F_CPU
	set_arm_clock(F_CPU);
60001180:	ldr	r0, [pc, #248]	; (6000127c <ResetHandler+0x250>)

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
60001182:	str.w	r9, [r4, #256]	; 0x100
	//PLL3:
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
60001186:	str.w	r7, [r4, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
6000118a:	str.w	r8, [r4, #240]	; 0xf0
	configure_cache();
	configure_systick();
	usb_pll_start();	
	reset_PFD(); //TODO: is this really needed?
#ifdef F_CPU
	set_arm_clock(F_CPU);
6000118e:	bl	60001b88 <__set_arm_clock_veneer>
#endif

	// Undo PIT timer usage by ROM startup
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
60001192:	ldr	r1, [r6, #108]	; 0x6c
	PIT_MCR = 0;
60001194:	ldr	r2, [pc, #232]	; (60001280 <ResetHandler+0x254>)
#ifdef F_CPU
	set_arm_clock(F_CPU);
#endif

	// Undo PIT timer usage by ROM startup
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
60001196:	orr.w	r1, r1, #12288	; 0x3000
	PIT_TCTRL1 = 0;
	PIT_TCTRL2 = 0;
	PIT_TCTRL3 = 0;

	// initialize RTC
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
6000119a:	ldr	r3, [pc, #232]	; (60001284 <ResetHandler+0x258>)
#ifdef F_CPU
	set_arm_clock(F_CPU);
#endif

	// Undo PIT timer usage by ROM startup
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
6000119c:	str	r1, [r6, #108]	; 0x6c
	PIT_MCR = 0;
6000119e:	str	r5, [r2, #0]
	PIT_TCTRL0 = 0;
600011a0:	str.w	r5, [r2, #264]	; 0x108
	PIT_TCTRL1 = 0;
600011a4:	str.w	r5, [r2, #280]	; 0x118
	PIT_TCTRL2 = 0;
600011a8:	str.w	r5, [r2, #296]	; 0x128
	PIT_TCTRL3 = 0;
600011ac:	str.w	r5, [r2, #312]	; 0x138

	// initialize RTC
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
600011b0:	ldr	r2, [r3, #56]	; 0x38
600011b2:	lsls	r2, r2, #31
600011b4:	bmi.n	600011c8 <ResetHandler+0x19c>
		// if SRTC isn't running, start it with default Jan 1, 2019
		SNVS_LPSRTCLR = 1546300800u << 15;
		SNVS_LPSRTCMR = 1546300800u >> 17;
600011b6:	movw	r2, #11797	; 0x2e15
	PIT_TCTRL3 = 0;

	// initialize RTC
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
		// if SRTC isn't running, start it with default Jan 1, 2019
		SNVS_LPSRTCLR = 1546300800u << 15;
600011ba:	ldr	r1, [pc, #204]	; (60001288 <ResetHandler+0x25c>)
600011bc:	str	r1, [r3, #84]	; 0x54
		SNVS_LPSRTCMR = 1546300800u >> 17;
600011be:	str	r2, [r3, #80]	; 0x50
		SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
600011c0:	ldr	r2, [r3, #56]	; 0x38
600011c2:	orr.w	r2, r2, #1
600011c6:	str	r2, [r3, #56]	; 0x38
	}
	SNVS_HPCR |= SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS;
600011c8:	ldr	r2, [pc, #184]	; (60001284 <ResetHandler+0x258>)
600011ca:	ldr	r4, [pc, #192]	; (6000128c <ResetHandler+0x260>)
600011cc:	ldr	r3, [r2, #8]
600011ce:	orr.w	r3, r3, #65537	; 0x10001
600011d2:	str	r3, [r2, #8]

#ifdef ARDUINO_TEENSY41
	configure_external_ram();
600011d4:	bl	60001480 <configure_external_ram>
#endif
	startup_early_hook();
600011d8:	bl	60001b80 <__startup_early_hook_veneer>
extern volatile uint32_t systick_millis_count;

static inline uint32_t millis(void) __attribute__((always_inline, unused));
static inline uint32_t millis(void)
{
	return systick_millis_count;
600011dc:	ldr	r3, [r4, #0]
	while (millis() < 20) ; // wait at least 20ms before starting USB
600011de:	cmp	r3, #19
600011e0:	bls.n	600011dc <ResetHandler+0x1b0>
	usb_init();
600011e2:	bl	6000129c <usb_init>
	analog_init();
600011e6:	bl	600019bc <analog_init>
	pwm_init();
600011ea:	bl	60001b58 <__pwm_init_veneer>
	tempmon_init();
600011ee:	bl	600018a0 <tempmon_init>

	startup_late_hook();
600011f2:	bl	60001b60 <__startup_late_hook_veneer>
600011f6:	ldr	r3, [r4, #0]
	while (millis() < 300) ; // wait at least 300ms before calling user code
600011f8:	cmp.w	r3, #300	; 0x12c
600011fc:	bcc.n	600011f6 <ResetHandler+0x1ca>
	//printf("before C++ constructors\n");
	__libc_init_array();
600011fe:	bl	60001ba0 <____libc_init_array_veneer>
	//printf("after C++ constructors\n");
	//printf("before setup\n");
	main();
60001202:	bl	60001b78 <__main_veneer>
60001206:	b.n	60001206 <ResetHandler+0x1da>
60001208:	.word	0x400ac000
6000120c:	.word	0xaaaaaabf
60001210:	.word	0x00200007
60001214:	.word	0x20068000
60001218:	.word	0x00000000
6000121c:	.word	0x60001bc0
60001220:	.word	0x00014858
60001224:	.word	0x20000000
60001228:	.word	0x6001641c
6000122c:	.word	0x20001610
60001230:	.word	0x20001610
60001234:	.word	0x20008b00
60001238:	.word	0xe000ed88
6000123c:	.word	0x200087fc
60001240:	.word	0x0000e5f1
60001244:	.word	0xe000e400
60001248:	.word	0xe000e4a0
6000124c:	.word	0x400d8000
60001250:	.word	0x400fc000
60001254:	.word	0xe000ed08
60001258:	.word	0xe000e014
6000125c:	.word	0xe000e018
60001260:	.word	0x0000f471
60001264:	.word	0xe000edfc
60001268:	.word	0x20200000
6000126c:	.word	0x0000f475
60001270:	.word	0xe0001000
60001274:	.word	0xe0001004
60001278:	.word	0x2000623c
6000127c:	.word	0x08f0d180
60001280:	.word	0x40084000
60001284:	.word	0x400d4000
60001288:	.word	0x56c00000
6000128c:	.word	0x20006244
60001290:	.word	0x20008800
60001294:	.word	0x2018101b
60001298:	.word	0x13110d0c

6000129c <usb_init>:
FLASHMEM void usb_init(void)
{
	// TODO: only enable when VBUS detected
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
6000129c:	ldr	r3, [pc, #192]	; (60001360 <usb_init+0xc4>)
6000129e:	movw	r2, #3937	; 0xf61

static void run_callbacks(endpoint_t *ep);


FLASHMEM void usb_init(void)
{
600012a2:	push	{r4, r5, r6, lr}
	// TODO: only enable when VBUS detected
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
600012a4:	str.w	r2, [r3, #288]	; 0x120

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
600012a8:	movw	r5, #1028	; 0x404
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
		| PMU_REG_3P0_ENABLE_LINREG;

	usb_init_serialnumber();
600012ac:	bl	60001b90 <__usb_init_serialnumber_veneer>

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
600012b0:	ldr	r1, [pc, #176]	; (60001364 <usb_init+0xc8>)
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
600012b2:	ldr	r0, [pc, #180]	; (60001368 <usb_init+0xcc>)

	usb_init_serialnumber();

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
600012b4:	ldr.w	r2, [r1, #128]	; 0x80
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
600012b8:	ldr	r4, [pc, #176]	; (6000136c <usb_init+0xd0>)

	usb_init_serialnumber();

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
600012ba:	orr.w	r2, r2, #3
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
600012be:	ldr	r3, [pc, #176]	; (60001370 <usb_init+0xd4>)

	usb_init_serialnumber();

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
600012c0:	str.w	r2, [r1, #128]	; 0x80
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
600012c4:	str.w	r5, [r0, #352]	; 0x160
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
600012c8:	ldr	r2, [r4, #0]
600012ca:	ands	r3, r2
600012cc:	cbnz	r3, 600012d6 <usb_init+0x3a>
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
600012ce:	ldr.w	r3, [r0, #424]	; 0x1a8
600012d2:	lsls	r2, r3, #30
600012d4:	beq.n	6000130c <usb_init+0x70>
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
600012d6:	ldr	r3, [pc, #144]	; (60001368 <usb_init+0xcc>)
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
600012d8:	mov.w	r1, #2147483648	; 0x80000000
600012dc:	ldr	r2, [pc, #140]	; (6000136c <usb_init+0xd0>)
600012de:	str	r1, [r2, #52]	; 0x34
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
600012e0:	mov	r2, r3
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
600012e2:	ldr.w	r1, [r3, #320]	; 0x140
600012e6:	orr.w	r1, r1, #2
600012ea:	str.w	r1, [r3, #320]	; 0x140
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
600012ee:	ldr.w	r3, [r2, #320]	; 0x140
600012f2:	lsls	r3, r3, #30
600012f4:	bmi.n	600012ee <usb_init+0x52>
		NVIC_CLEAR_PENDING(IRQ_USB1);
600012f6:	mov.w	r0, #131072	; 0x20000
600012fa:	ldr	r1, [pc, #120]	; (60001374 <usb_init+0xd8>)
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
600012fc:	ldr	r3, [pc, #108]	; (6000136c <usb_init+0xd0>)
600012fe:	mov.w	r2, #2147483648	; 0x80000000
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
		NVIC_CLEAR_PENDING(IRQ_USB1);
60001302:	str	r0, [r1, #0]
		//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
		//printf("USBPHY1_TX=%08lX\n", USBPHY1_TX);
		//printf("USBPHY1_RX=%08lX\n", USBPHY1_RX);
		//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);
		//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);
		delay(25);
60001304:	movs	r0, #25
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
		NVIC_CLEAR_PENDING(IRQ_USB1);
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
60001306:	str	r2, [r3, #56]	; 0x38
		//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
		//printf("USBPHY1_TX=%08lX\n", USBPHY1_TX);
		//printf("USBPHY1_RX=%08lX\n", USBPHY1_RX);
		//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);
		//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);
		delay(25);
60001308:	bl	60001b68 <__delay_veneer>
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
6000130c:	ldr	r5, [pc, #104]	; (60001378 <usb_init+0xdc>)
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
	USBPHY1_PWD = 0;
6000130e:	movs	r2, #0
	// ENDPTFLUSH	pg 3247
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
60001310:	ldr	r3, [pc, #88]	; (6000136c <usb_init+0xd0>)
60001312:	mov.w	r1, #1073741824	; 0x40000000
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
60001316:	ldr	r4, [pc, #80]	; (60001368 <usb_init+0xcc>)
60001318:	movs	r6, #10
	// ENDPTFLUSH	pg 3247
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
6000131a:	str	r1, [r3, #56]	; 0x38
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
6000131c:	mov	r0, r5
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
	USBPHY1_PWD = 0;
6000131e:	str	r2, [r3, #0]
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001320:	mov	r1, r2
	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
60001322:	str.w	r6, [r4, #424]	; 0x1a8
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001326:	mov.w	r2, #768	; 0x300
6000132a:	bl	60001b70 <__memset_veneer>
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
6000132e:	mov.w	r6, #4227072	; 0x408000
	endpoint_queue_head[1].config = (64 << 16);
60001332:	mov.w	r0, #4194304	; 0x400000
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
	//  Recommended: enable all device interrupts including: USBINT, USBERRINT,
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
60001336:	movw	r3, #323	; 0x143
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
#else
extern void (* _VectorsRam[NVIC_NUM_INTERRUPTS+16])(void);
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
6000133a:	ldr	r2, [pc, #64]	; (6000137c <usb_init+0xe0>)
6000133c:	ldr	r1, [pc, #64]	; (60001380 <usb_init+0xe4>)
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
6000133e:	str	r6, [r5, #0]
	endpoint_queue_head[1].config = (64 << 16);
60001340:	str	r0, [r5, #64]	; 0x40
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
60001342:	str.w	r5, [r4, #344]	; 0x158
60001346:	str.w	r1, [r2, #516]	; 0x204
	//  Recommended: enable all device interrupts including: USBINT, USBERRINT,
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
6000134a:	str.w	r3, [r4, #328]	; 0x148
		USB_USBINTR_URE | USB_USBINTR_SLE;
	//_VectorsRam[IRQ_USB1+16] = &isr;
	attachInterruptVector(IRQ_USB1, &isr);
	NVIC_ENABLE_IRQ(IRQ_USB1);
6000134e:	ldr	r2, [pc, #52]	; (60001384 <usb_init+0xe8>)
60001350:	mov.w	r1, #131072	; 0x20000
	//printf("USB1_ENDPTCTRL0=%08lX\n", USB1_ENDPTCTRL0);
	//printf("USB1_ENDPTCTRL1=%08lX\n", USB1_ENDPTCTRL1);
	//printf("USB1_ENDPTCTRL2=%08lX\n", USB1_ENDPTCTRL2);
	//printf("USB1_ENDPTCTRL3=%08lX\n", USB1_ENDPTCTRL3);
	USB1_USBCMD = USB_USBCMD_RS;
60001354:	movs	r3, #1
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
		USB_USBINTR_URE | USB_USBINTR_SLE;
	//_VectorsRam[IRQ_USB1+16] = &isr;
	attachInterruptVector(IRQ_USB1, &isr);
	NVIC_ENABLE_IRQ(IRQ_USB1);
60001356:	str	r1, [r2, #0]
	//printf("USB1_ENDPTCTRL0=%08lX\n", USB1_ENDPTCTRL0);
	//printf("USB1_ENDPTCTRL1=%08lX\n", USB1_ENDPTCTRL1);
	//printf("USB1_ENDPTCTRL2=%08lX\n", USB1_ENDPTCTRL2);
	//printf("USB1_ENDPTCTRL3=%08lX\n", USB1_ENDPTCTRL3);
	USB1_USBCMD = USB_USBCMD_RS;
60001358:	str.w	r3, [r4, #320]	; 0x140
6000135c:	pop	{r4, r5, r6, pc}
6000135e:	nop
60001360:	.word	0x400d8000
60001364:	.word	0x400fc000
60001368:	.word	0x402e0000
6000136c:	.word	0x400d9000
60001370:	.word	0x001e1c00
60001374:	.word	0xe000e28c
60001378:	.word	0x20008000
6000137c:	.word	0x20008800
60001380:	.word	0x0000dce5
60001384:	.word	0xe000e10c

60001388 <configure_cache>:
#define SIZE_2G		(SCB_MPU_RASR_SIZE(30) | SCB_MPU_RASR_ENABLE)
#define SIZE_4G		(SCB_MPU_RASR_SIZE(31) | SCB_MPU_RASR_ENABLE)
#define REGION(n)	(SCB_MPU_RBAR_REGION(n) | SCB_MPU_RBAR_VALID)

FLASHMEM void configure_cache(void)
{
60001388:	push	{r4, r5, r6, r7, lr}
	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU

	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
6000138a:	ldr	r2, [pc, #160]	; (6000142c <configure_cache+0xa4>)
	//printf("MPU_TYPE = %08lX\n", SCB_MPU_TYPE);
	//printf("CCR = %08lX\n", SCB_CCR);

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU
6000138c:	movs	r0, #0

	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
6000138e:	ldr	r3, [pc, #160]	; (60001430 <configure_cache+0xa8>)
	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU

	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
60001390:	mov.w	ip, #16
	//printf("MPU_TYPE = %08lX\n", SCB_MPU_TYPE);
	//printf("CCR = %08lX\n", SCB_CCR);

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU
60001394:	ldr	r4, [pc, #156]	; (60001434 <configure_cache+0xac>)

	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
	
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
60001396:	movs	r7, #17

	SCB_MPU_CTRL = 0; // turn off MPU

	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
60001398:	ldr.w	lr, [pc, #216]	; 60001474 <configure_cache+0xec>
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;

	// TODO: trap regions should be created last, because the hardware gives
	//  priority to the higher number ones.
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
6000139c:	movs	r6, #18
	//printf("MPU_TYPE = %08lX\n", SCB_MPU_TYPE);
	//printf("CCR = %08lX\n", SCB_CCR);

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU
6000139e:	str	r0, [r4, #0]
	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;

	// TODO: protect access to power supply config

	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
600013a0:	movs	r5, #1
	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU

	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
600013a2:	str.w	ip, [r2]
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
600013a6:	str.w	lr, [r3]
	
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
600013aa:	str	r7, [r2, #0]
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;
600013ac:	ldr.w	lr, [pc, #200]	; 60001478 <configure_cache+0xf0>

	// TODO: trap regions should be created last, because the hardware gives
	//  priority to the higher number ones.
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;
600013b0:	ldr	r7, [pc, #132]	; (60001438 <configure_cache+0xb0>)
	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
	
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;
600013b2:	str.w	lr, [r3]

	// TODO: trap regions should be created last, because the hardware gives
	//  priority to the higher number ones.
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
600013b6:	str	r6, [r2, #0]
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;
600013b8:	str	r7, [r3, #0]

	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
600013ba:	ldr	r6, [pc, #128]	; (6000143c <configure_cache+0xb4>)
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
600013bc:	ldr	r7, [pc, #128]	; (60001440 <configure_cache+0xb8>)
	// TODO: trap regions should be created last, because the hardware gives
	//  priority to the higher number ones.
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;

	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
600013be:	str	r6, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
600013c0:	ldr	r1, [pc, #128]	; (60001444 <configure_cache+0xbc>)
	//  priority to the higher number ones.
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;

	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
600013c2:	str	r7, [r3, #0]

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
600013c4:	ldr	r6, [pc, #128]	; (60001448 <configure_cache+0xc0>)
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
600013c6:	orr.w	r1, r1, #21

	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
600013ca:	ldr	r7, [pc, #128]	; (6000144c <configure_cache+0xc4>)
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;

	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
600013cc:	str	r6, [r2, #0]
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
600013ce:	str	r7, [r3, #0]
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;

	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
600013d0:	add.w	r7, r7, #196608	; 0x30000

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;
600013d4:	ldr	r6, [pc, #120]	; (60001450 <configure_cache+0xc8>)
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
600013d6:	str	r1, [r2, #0]
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;

	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
600013d8:	adds	r7, #2

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;
600013da:	str	r6, [r3, #0]

	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
600013dc:	ldr.w	lr, [pc, #156]	; 6000147c <configure_cache+0xf4>
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;

	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
600013e0:	ldr	r6, [pc, #112]	; (60001454 <configure_cache+0xcc>)
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
600013e2:	ldr	r1, [pc, #116]	; (60001458 <configure_cache+0xd0>)
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;

	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
600013e4:	str.w	lr, [r2]
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
600013e8:	str	r7, [r3, #0]

	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
600013ea:	str	r6, [r2, #0]
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;

	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
600013ec:	ldr	r7, [pc, #108]	; (6000145c <configure_cache+0xd4>)

	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;

	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
600013ee:	str	r1, [r3, #0]

	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
600013f0:	ldr	r6, [pc, #108]	; (60001460 <configure_cache+0xd8>)

	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
600013f2:	ldr	r1, [pc, #112]	; (60001464 <configure_cache+0xdc>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;

	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;

	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
600013f4:	str	r7, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
600013f6:	str	r6, [r3, #0]

	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | NOEXEC | SIZE_256M;
600013f8:	ldr	r7, [pc, #108]	; (60001468 <configure_cache+0xe0>)
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;

	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;

	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
600013fa:	str	r1, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | NOEXEC | SIZE_256M;

	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
600013fc:	ldr	r6, [pc, #108]	; (6000146c <configure_cache+0xe4>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;
600013fe:	ldr	r1, [pc, #112]	; (60001470 <configure_cache+0xe8>)

	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;

	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | NOEXEC | SIZE_256M;
60001400:	str	r7, [r3, #0]

	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
60001402:	str	r6, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;
60001404:	str	r1, [r3, #0]

	// TODO: protect access to power supply config

	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
60001406:	str	r5, [r4, #0]

	// cache enable, ARM DDI0403E, pg 628
	asm("dsb");
60001408:	dsb	sy
	asm("isb");
6000140c:	isb	sy
	SCB_CACHE_ICIALLU = 0;
60001410:	str.w	r0, [r3, #432]	; 0x1b0

	asm("dsb");
60001414:	dsb	sy
	asm("isb");
60001418:	isb	sy
	SCB_CCR |= (SCB_CCR_IC | SCB_CCR_DC);
6000141c:	ldr.w	r3, [r2, #-136]
60001420:	orr.w	r3, r3, #196608	; 0x30000
60001424:	str.w	r3, [r2, #-136]
60001428:	pop	{r4, r5, r6, r7, pc}
6000142a:	nop
6000142c:	.word	0xe000ed9c
60001430:	.word	0xe000eda0
60001434:	.word	0xe000ed94
60001438:	.word	0x00100009
6000143c:	.word	0x00200013
60001440:	.word	0x07020021
60001444:	.word	0x20008b00
60001448:	.word	0x20000014
6000144c:	.word	0x13080025
60001450:	.word	0x10000009
60001454:	.word	0x40000017
60001458:	.word	0x13100033
6000145c:	.word	0x60000018
60001460:	.word	0x070b002f
60001464:	.word	0x70000019
60001468:	.word	0x170b0037
6000146c:	.word	0x7000001a
60001470:	.word	0x130b002f
60001474:	.word	0x1000003f
60001478:	.word	0x03080025
6000147c:	.word	0x20200016

60001480 <configure_external_ram>:
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
	return id & 0xFFFF;
}

FLASHMEM void configure_external_ram()
{
60001480:	push	{r4, r5, r6, r7, lr}
	// initialize pins
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
60001482:	ldr	r3, [pc, #564]	; (600016b8 <configure_external_ram+0x238>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_27 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_28 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_29 = 0x170F9; // 47K pullup, strong drive, max speed, hyst

	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_22 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS1_B (Flash)
60001484:	movs	r2, #24
	// initialize pins
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_24 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 0x100F9; // strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
60001486:	ldr	r6, [pc, #564]	; (600016bc <configure_external_ram+0x23c>)
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_26 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA0
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_27 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA1
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_28 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA2
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_29 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA3

	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
60001488:	movs	r0, #1
}

FLASHMEM void configure_external_ram()
{
	// initialize pins
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
6000148a:	ldr	r1, [pc, #564]	; (600016c0 <configure_external_ram+0x240>)
		 | FLEXSPI_MCR0_IPGRANTWAIT_MASK | FLEXSPI_MCR0_SCKFREERUNEN
		 | FLEXSPI_MCR0_COMBINATIONEN | FLEXSPI_MCR0_DOZEEN
		 | FLEXSPI_MCR0_HSEN | FLEXSPI_MCR0_ATDFEN | FLEXSPI_MCR0_ARDFEN
		 | FLEXSPI_MCR0_RXCLKSRC_MASK | FLEXSPI_MCR0_SWRESET))
		| FLEXSPI_MCR0_AHBGRANTWAIT(0xFF) | FLEXSPI_MCR0_IPGRANTWAIT(0xFF)
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
6000148c:	movw	lr, #34572	; 0x870c

FLASHMEM void configure_external_ram()
{
	// initialize pins
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
60001490:	ldr	r5, [pc, #560]	; (600016c4 <configure_external_ram+0x244>)
		 | FLEXSPI_MCR0_COMBINATIONEN | FLEXSPI_MCR0_DOZEEN
		 | FLEXSPI_MCR0_HSEN | FLEXSPI_MCR0_ATDFEN | FLEXSPI_MCR0_ARDFEN
		 | FLEXSPI_MCR0_RXCLKSRC_MASK | FLEXSPI_MCR0_SWRESET))
		| FLEXSPI_MCR0_AHBGRANTWAIT(0xFF) | FLEXSPI_MCR0_IPGRANTWAIT(0xFF)
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
60001492:	mov.w	r7, #4294967295
{
	// initialize pins
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_24 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 0x100F9; // strong drive, max speed, hyst
60001496:	ldr	r4, [pc, #560]	; (600016c8 <configure_external_ram+0x248>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
	return id & 0xFFFF;
}

FLASHMEM void configure_external_ram()
{
60001498:	sub	sp, #12
	// initialize pins
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
6000149a:	str.w	r1, [r3, #604]	; 0x25c
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
6000149e:	str.w	r5, [r3, #608]	; 0x260
	// RX watermark = one 64 bit line
	FLEXSPI2_IPRXFCR = (FLEXSPI_IPRXFCR & 0xFFFFFFC0) | FLEXSPI_IPRXFCR_CLRIPRXF;
	// TX watermark = one 64 bit line
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;

	FLEXSPI2_INTEN = 0;
600014a2:	movs	r5, #0
FLASHMEM void configure_external_ram()
{
	// initialize pins
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_24 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
600014a4:	str.w	r1, [r3, #612]	; 0x264
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 0x100F9; // strong drive, max speed, hyst
600014a8:	str.w	r4, [r3, #616]	; 0x268
	FLEXSPI2_IPRXFCR = (FLEXSPI_IPRXFCR & 0xFFFFFFC0) | FLEXSPI_IPRXFCR_CLRIPRXF;
	// TX watermark = one 64 bit line
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;

	FLEXSPI2_INTEN = 0;
	FLEXSPI2_FLSHA1CR0 = 0x2000; // 8 MByte
600014ac:	mov.w	r4, #8192	; 0x2000
	// initialize pins
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_24 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 0x100F9; // strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
600014b0:	str.w	r6, [r3, #620]	; 0x26c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_26 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA0
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_27 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA1
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_28 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA2
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_29 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA3

	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
600014b4:	ldr	r1, [pc, #532]	; (600016cc <configure_external_ram+0x24c>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_24 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 0x100F9; // strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_27 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
600014b6:	str.w	r6, [r3, #624]	; 0x270
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_28 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
600014ba:	str.w	r6, [r3, #628]	; 0x274
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_29 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
600014be:	str.w	r6, [r3, #632]	; 0x278
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT2_SELECT_INPUT = 1; // GPIO_EMC_28 for Mode: ALT8
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT3_SELECT_INPUT = 1; // GPIO_EMC_29 for Mode: ALT8
	IOMUXC_FLEXSPI2_IPP_IND_SCK_FA_SELECT_INPUT = 1; // GPIO_EMC_25 for Mode: ALT8

	// turn on clock  (TODO: increase clock speed later, slow & cautious for first release)
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
600014c2:	ldr	r6, [pc, #524]	; (600016d0 <configure_external_ram+0x250>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_27 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_28 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_29 = 0x170F9; // 47K pullup, strong drive, max speed, hyst

	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_22 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS1_B (Flash)
600014c4:	str	r2, [r3, #108]	; 0x6c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_23 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DQS
600014c6:	str	r2, [r3, #112]	; 0x70
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_24 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS0_B (RAM)
600014c8:	str	r2, [r3, #116]	; 0x74
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_25 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SCLK
600014ca:	str	r2, [r3, #120]	; 0x78
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_26 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA0
600014cc:	str	r2, [r3, #124]	; 0x7c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_27 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA1
600014ce:	str.w	r2, [r3, #128]	; 0x80
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_28 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA2
600014d2:	str.w	r2, [r3, #132]	; 0x84
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_29 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA3
600014d6:	str.w	r2, [r3, #136]	; 0x88

	FLEXSPI2_INTEN = 0;
	FLEXSPI2_FLSHA1CR0 = 0x2000; // 8 MByte
	FLEXSPI2_FLSHA1CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
		| FLEXSPI_FLSHCR1_TCSH(3) | FLEXSPI_FLSHCR1_TCSS(3);
	FLEXSPI2_FLSHA1CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
600014da:	movw	r2, #1541	; 0x605
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_26 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA0
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_27 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA1
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_28 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA2
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_29 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA3

	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
600014de:	str.w	r0, [r1, #812]	; 0x32c
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT0_SELECT_INPUT = 1; // GPIO_EMC_26 for Mode: ALT8
600014e2:	str.w	r0, [r1, #816]	; 0x330
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT1_SELECT_INPUT = 1; // GPIO_EMC_27 for Mode: ALT8
600014e6:	str.w	r0, [r1, #820]	; 0x334
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT2_SELECT_INPUT = 1; // GPIO_EMC_28 for Mode: ALT8
600014ea:	str.w	r0, [r1, #824]	; 0x338
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT3_SELECT_INPUT = 1; // GPIO_EMC_29 for Mode: ALT8
600014ee:	str.w	r0, [r1, #828]	; 0x33c
	IOMUXC_FLEXSPI2_IPP_IND_SCK_FA_SELECT_INPUT = 1; // GPIO_EMC_25 for Mode: ALT8
600014f2:	str.w	r0, [r1, #848]	; 0x350
	FLEXSPI2_MCR0 &= ~FLEXSPI_MCR0_MDIS;

	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
	volatile uint32_t *luttable = &FLEXSPI2_LUT0;
	for (int i=0; i < 64; i++) luttable[i] = 0;
600014f6:	mov	r1, r5
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT2_SELECT_INPUT = 1; // GPIO_EMC_28 for Mode: ALT8
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT3_SELECT_INPUT = 1; // GPIO_EMC_29 for Mode: ALT8
	IOMUXC_FLEXSPI2_IPP_IND_SCK_FA_SELECT_INPUT = 1; // GPIO_EMC_25 for Mode: ALT8

	// turn on clock  (TODO: increase clock speed later, slow & cautious for first release)
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
600014f8:	ldr	r3, [r6, #24]
		| CCM_CBCMR_FLEXSPI2_PODF(5) | CCM_CBCMR_FLEXSPI2_CLK_SEL(3); // 88 MHz
600014fa:	ldr	r0, [pc, #472]	; (600016d4 <configure_external_ram+0x254>)
600014fc:	ands	r0, r3
600014fe:	ldr	r3, [pc, #472]	; (600016d8 <configure_external_ram+0x258>)
60001500:	orrs	r3, r0
	CCM_CCGR7 |= CCM_CCGR7_FLEXSPI2(CCM_CCGR_ON);

	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_MDIS;
60001502:	ldr	r0, [pc, #472]	; (600016dc <configure_external_ram+0x25c>)
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT2_SELECT_INPUT = 1; // GPIO_EMC_28 for Mode: ALT8
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT3_SELECT_INPUT = 1; // GPIO_EMC_29 for Mode: ALT8
	IOMUXC_FLEXSPI2_IPP_IND_SCK_FA_SELECT_INPUT = 1; // GPIO_EMC_25 for Mode: ALT8

	// turn on clock  (TODO: increase clock speed later, slow & cautious for first release)
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
60001504:	str	r3, [r6, #24]
		| CCM_CBCMR_FLEXSPI2_PODF(5) | CCM_CBCMR_FLEXSPI2_CLK_SEL(3); // 88 MHz
	CCM_CCGR7 |= CCM_CCGR7_FLEXSPI2(CCM_CCGR_ON);
60001506:	ldr.w	r3, [r6, #132]	; 0x84
6000150a:	orr.w	r3, r3, #12
6000150e:	str.w	r3, [r6, #132]	; 0x84
		| FLEXSPI_FLSHCR2_ARDSEQID(5) | FLEXSPI_FLSHCR2_ARDSEQNUM(0);

	FLEXSPI2_MCR0 &= ~FLEXSPI_MCR0_MDIS;

	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
60001512:	movs	r6, #2
	// turn on clock  (TODO: increase clock speed later, slow & cautious for first release)
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
		| CCM_CBCMR_FLEXSPI2_PODF(5) | CCM_CBCMR_FLEXSPI2_CLK_SEL(3); // 88 MHz
	CCM_CCGR7 |= CCM_CCGR7_FLEXSPI2(CCM_CCGR_ON);

	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_MDIS;
60001514:	ldr	r3, [r0, #0]
60001516:	orrs	r3, r6
60001518:	str	r3, [r0, #0]
	FLEXSPI2_MCR0 = (FLEXSPI2_MCR0 & ~(FLEXSPI_MCR0_AHBGRANTWAIT_MASK
6000151a:	ldr	r3, [r0, #0]
		 | FLEXSPI_MCR0_IPGRANTWAIT_MASK | FLEXSPI_MCR0_SCKFREERUNEN
		 | FLEXSPI_MCR0_COMBINATIONEN | FLEXSPI_MCR0_DOZEEN
		 | FLEXSPI_MCR0_HSEN | FLEXSPI_MCR0_ATDFEN | FLEXSPI_MCR0_ARDFEN
		 | FLEXSPI_MCR0_RXCLKSRC_MASK | FLEXSPI_MCR0_SWRESET))
		| FLEXSPI_MCR0_AHBGRANTWAIT(0xFF) | FLEXSPI_MCR0_IPGRANTWAIT(0xFF)
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
6000151c:	and.w	lr, r3, lr
60001520:	ldr	r3, [pc, #444]	; (600016e0 <configure_external_ram+0x260>)
60001522:	orr.w	r3, lr, r3
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
60001526:	ldr.w	lr, [pc, #496]	; 60001718 <configure_external_ram+0x298>
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
		| CCM_CBCMR_FLEXSPI2_PODF(5) | CCM_CBCMR_FLEXSPI2_CLK_SEL(3); // 88 MHz
	CCM_CCGR7 |= CCM_CCGR7_FLEXSPI2(CCM_CCGR_ON);

	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_MDIS;
	FLEXSPI2_MCR0 = (FLEXSPI2_MCR0 & ~(FLEXSPI_MCR0_AHBGRANTWAIT_MASK
6000152a:	str	r3, [r0, #0]
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
		 | FLEXSPI_MCR2_SCKBDIFFOPT | FLEXSPI_MCR2_SAMEDEVICEEN
		 | FLEXSPI_MCR2_CLRLEARNPHASE | FLEXSPI_MCR2_CLRAHBBUFOPT))
		| FLEXSPI_MCR2_RESUMEWAIT(0x20) /*| FLEXSPI_MCR2_SAMEDEVICEEN*/;
6000152c:	ldr	r3, [pc, #436]	; (600016e4 <configure_external_ram+0x264>)
		 | FLEXSPI_MCR0_COMBINATIONEN | FLEXSPI_MCR0_DOZEEN
		 | FLEXSPI_MCR0_HSEN | FLEXSPI_MCR0_ATDFEN | FLEXSPI_MCR0_ARDFEN
		 | FLEXSPI_MCR0_RXCLKSRC_MASK | FLEXSPI_MCR0_SWRESET))
		| FLEXSPI_MCR0_AHBGRANTWAIT(0xFF) | FLEXSPI_MCR0_IPGRANTWAIT(0xFF)
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
6000152e:	str	r7, [r0, #4]
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
60001530:	ldr.w	r7, [lr, #8]
		 | FLEXSPI_MCR2_SCKBDIFFOPT | FLEXSPI_MCR2_SAMEDEVICEEN
		 | FLEXSPI_MCR2_CLRLEARNPHASE | FLEXSPI_MCR2_CLRAHBBUFOPT))
		| FLEXSPI_MCR2_RESUMEWAIT(0x20) /*| FLEXSPI_MCR2_SAMEDEVICEEN*/;
60001534:	ands	r3, r7
	FLEXSPI2_AHBCR = FLEXSPI2_AHBCR & ~(FLEXSPI_AHBCR_READADDROPT | FLEXSPI_AHBCR_PREFETCHEN
		| FLEXSPI_AHBCR_BUFFERABLEEN | FLEXSPI_AHBCR_CACHABLEEN);
	uint32_t mask = (FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_PRIORITY_MASK
		| FLEXSPI_AHBRXBUFCR0_MSTRID_MASK | FLEXSPI_AHBRXBUFCR0_BUFSZ_MASK);
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
60001536:	ldr	r7, [pc, #432]	; (600016e8 <configure_external_ram+0x268>)
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
		 | FLEXSPI_MCR2_SCKBDIFFOPT | FLEXSPI_MCR2_SAMEDEVICEEN
		 | FLEXSPI_MCR2_CLRLEARNPHASE | FLEXSPI_MCR2_CLRAHBBUFOPT))
		| FLEXSPI_MCR2_RESUMEWAIT(0x20) /*| FLEXSPI_MCR2_SAMEDEVICEEN*/;
60001538:	orr.w	r3, r3, #536870912	; 0x20000000
		 | FLEXSPI_MCR0_HSEN | FLEXSPI_MCR0_ATDFEN | FLEXSPI_MCR0_ARDFEN
		 | FLEXSPI_MCR0_RXCLKSRC_MASK | FLEXSPI_MCR0_SWRESET))
		| FLEXSPI_MCR0_AHBGRANTWAIT(0xFF) | FLEXSPI_MCR0_IPGRANTWAIT(0xFF)
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
6000153c:	str	r3, [r0, #8]
		 | FLEXSPI_MCR2_SCKBDIFFOPT | FLEXSPI_MCR2_SAMEDEVICEEN
		 | FLEXSPI_MCR2_CLRLEARNPHASE | FLEXSPI_MCR2_CLRAHBBUFOPT))
		| FLEXSPI_MCR2_RESUMEWAIT(0x20) /*| FLEXSPI_MCR2_SAMEDEVICEEN*/;

	FLEXSPI2_AHBCR = FLEXSPI2_AHBCR & ~(FLEXSPI_AHBCR_READADDROPT | FLEXSPI_AHBCR_PREFETCHEN
6000153e:	ldr	r3, [r0, #12]
60001540:	bic.w	r3, r3, #120	; 0x78
60001544:	str	r3, [r0, #12]
		| FLEXSPI_AHBCR_BUFFERABLEEN | FLEXSPI_AHBCR_CACHABLEEN);
	uint32_t mask = (FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_PRIORITY_MASK
		| FLEXSPI_AHBRXBUFCR0_MSTRID_MASK | FLEXSPI_AHBRXBUFCR0_BUFSZ_MASK);
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60001546:	ldr	r3, [r0, #32]
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
60001548:	ands	r7, r3
6000154a:	ldr	r3, [pc, #416]	; (600016ec <configure_external_ram+0x26c>)
6000154c:	orrs	r3, r7
	FLEXSPI2_AHBRXBUF1CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
6000154e:	ldr	r7, [pc, #408]	; (600016e8 <configure_external_ram+0x268>)

	FLEXSPI2_AHBCR = FLEXSPI2_AHBCR & ~(FLEXSPI_AHBCR_READADDROPT | FLEXSPI_AHBCR_PREFETCHEN
		| FLEXSPI_AHBCR_BUFFERABLEEN | FLEXSPI_AHBCR_CACHABLEEN);
	uint32_t mask = (FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_PRIORITY_MASK
		| FLEXSPI_AHBRXBUFCR0_MSTRID_MASK | FLEXSPI_AHBRXBUFCR0_BUFSZ_MASK);
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60001550:	str	r3, [r0, #32]
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
	FLEXSPI2_AHBRXBUF1CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60001552:	ldr	r3, [r0, #32]
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
60001554:	ands	r7, r3
60001556:	ldr	r3, [pc, #404]	; (600016ec <configure_external_ram+0x26c>)
60001558:	orrs	r3, r7
	FLEXSPI2_AHBRXBUF2CR0 = mask;
6000155a:	ldr	r7, [pc, #404]	; (600016f0 <configure_external_ram+0x270>)
		| FLEXSPI_AHBCR_BUFFERABLEEN | FLEXSPI_AHBCR_CACHABLEEN);
	uint32_t mask = (FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_PRIORITY_MASK
		| FLEXSPI_AHBRXBUFCR0_MSTRID_MASK | FLEXSPI_AHBRXBUFCR0_BUFSZ_MASK);
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
	FLEXSPI2_AHBRXBUF1CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
6000155c:	str	r3, [r0, #36]	; 0x24
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
	FLEXSPI2_AHBRXBUF2CR0 = mask;
6000155e:	str	r7, [r0, #40]	; 0x28
	FLEXSPI2_AHBRXBUF3CR0 = mask;
60001560:	str	r7, [r0, #44]	; 0x2c

	// RX watermark = one 64 bit line
	FLEXSPI2_IPRXFCR = (FLEXSPI_IPRXFCR & 0xFFFFFFC0) | FLEXSPI_IPRXFCR_CLRIPRXF;
60001562:	ldr.w	r3, [lr, #184]	; 0xb8
	// TX watermark = one 64 bit line
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;

	FLEXSPI2_INTEN = 0;
	FLEXSPI2_FLSHA1CR0 = 0x2000; // 8 MByte
	FLEXSPI2_FLSHA1CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
60001566:	ldr	r7, [pc, #396]	; (600016f4 <configure_external_ram+0x274>)
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
	FLEXSPI2_AHBRXBUF2CR0 = mask;
	FLEXSPI2_AHBRXBUF3CR0 = mask;

	// RX watermark = one 64 bit line
	FLEXSPI2_IPRXFCR = (FLEXSPI_IPRXFCR & 0xFFFFFFC0) | FLEXSPI_IPRXFCR_CLRIPRXF;
60001568:	bic.w	r3, r3, #63	; 0x3f
6000156c:	orr.w	r3, r3, #1
60001570:	str.w	r3, [r0, #184]	; 0xb8
	// TX watermark = one 64 bit line
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;
60001574:	ldr.w	r3, [lr, #188]	; 0xbc
	FLEXSPI2_FLSHA2CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
		| FLEXSPI_FLSHCR2_ARDSEQID(5) | FLEXSPI_FLSHCR2_ARDSEQNUM(0);

	FLEXSPI2_MCR0 &= ~FLEXSPI_MCR0_MDIS;

	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
60001578:	ldr.w	lr, [pc, #388]	; 60001700 <configure_external_ram+0x280>
	FLEXSPI2_AHBRXBUF3CR0 = mask;

	// RX watermark = one 64 bit line
	FLEXSPI2_IPRXFCR = (FLEXSPI_IPRXFCR & 0xFFFFFFC0) | FLEXSPI_IPRXFCR_CLRIPRXF;
	// TX watermark = one 64 bit line
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;
6000157c:	bic.w	r3, r3, #63	; 0x3f
60001580:	orr.w	r3, r3, #1
60001584:	str.w	r3, [r0, #188]	; 0xbc

	FLEXSPI2_INTEN = 0;
60001588:	str	r5, [r0, #16]
	FLEXSPI2_FLSHA1CR0 = 0x2000; // 8 MByte
6000158a:	str	r4, [r0, #96]	; 0x60
	FLEXSPI2_FLSHA1CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
6000158c:	str	r7, [r0, #112]	; 0x70
		| FLEXSPI_FLSHCR1_TCSH(3) | FLEXSPI_FLSHCR1_TCSS(3);
	FLEXSPI2_FLSHA1CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
6000158e:	str.w	r2, [r0, #128]	; 0x80
		| FLEXSPI_FLSHCR2_ARDSEQID(5) | FLEXSPI_FLSHCR2_ARDSEQNUM(0);

	FLEXSPI2_FLSHA2CR0 = 0x2000; // 8 MByte
60001592:	str	r4, [r0, #100]	; 0x64
	FLEXSPI2_FLSHA2CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
60001594:	str	r7, [r0, #116]	; 0x74
		| FLEXSPI_FLSHCR1_TCSH(3) | FLEXSPI_FLSHCR1_TCSS(3);
	FLEXSPI2_FLSHA2CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
60001596:	str.w	r2, [r0, #132]	; 0x84
		| FLEXSPI_FLSHCR2_ARDSEQID(5) | FLEXSPI_FLSHCR2_ARDSEQNUM(0);

	FLEXSPI2_MCR0 &= ~FLEXSPI_MCR0_MDIS;
6000159a:	ldr	r4, [r0, #0]

	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
6000159c:	ldr	r3, [pc, #344]	; (600016f8 <configure_external_ram+0x278>)
	FLEXSPI2_FLSHA2CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
		| FLEXSPI_FLSHCR1_TCSH(3) | FLEXSPI_FLSHCR1_TCSS(3);
	FLEXSPI2_FLSHA2CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
		| FLEXSPI_FLSHCR2_ARDSEQID(5) | FLEXSPI_FLSHCR2_ARDSEQNUM(0);

	FLEXSPI2_MCR0 &= ~FLEXSPI_MCR0_MDIS;
6000159e:	bic.w	r4, r4, #2

	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
	volatile uint32_t *luttable = &FLEXSPI2_LUT0;
	for (int i=0; i < 64; i++) luttable[i] = 0;
600015a2:	ldr	r2, [pc, #344]	; (600016fc <configure_external_ram+0x27c>)
	FLEXSPI2_FLSHA2CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
		| FLEXSPI_FLSHCR1_TCSH(3) | FLEXSPI_FLSHCR1_TCSS(3);
	FLEXSPI2_FLSHA2CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
		| FLEXSPI_FLSHCR2_ARDSEQID(5) | FLEXSPI_FLSHCR2_ARDSEQNUM(0);

	FLEXSPI2_MCR0 &= ~FLEXSPI_MCR0_MDIS;
600015a4:	str	r4, [r0, #0]

	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
600015a6:	str.w	lr, [r0, #24]
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
600015aa:	str	r6, [r0, #28]
	volatile uint32_t *luttable = &FLEXSPI2_LUT0;
	for (int i=0; i < 64; i++) luttable[i] = 0;
600015ac:	str.w	r1, [r3], #4
600015b0:	cmp	r3, r2
600015b2:	bne.n	600015ac <configure_external_ram+0x12c>
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_SWRESET;
600015b4:	ldr	r3, [pc, #292]	; (600016dc <configure_external_ram+0x25c>)
600015b6:	ldr	r2, [r3, #0]
	while (FLEXSPI2_MCR0 & FLEXSPI_MCR0_SWRESET) ; // wait
600015b8:	mov	r1, r3

	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
	volatile uint32_t *luttable = &FLEXSPI2_LUT0;
	for (int i=0; i < 64; i++) luttable[i] = 0;
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_SWRESET;
600015ba:	orr.w	r2, r2, #1
600015be:	str	r2, [r3, #0]
	while (FLEXSPI2_MCR0 & FLEXSPI_MCR0_SWRESET) ; // wait
600015c0:	ldr	r3, [r1, #0]
600015c2:	ldr	r2, [pc, #280]	; (600016dc <configure_external_ram+0x25c>)
600015c4:	ands.w	r3, r3, #1
600015c8:	bne.n	600015c0 <configure_external_ram+0x140>

	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
600015ca:	ldr	r6, [pc, #308]	; (60001700 <configure_external_ram+0x280>)
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
600015cc:	movs	r5, #2

	// cmd index 0 = exit QPI mode
	FLEXSPI2_LUT0 = LUT0(CMD_SDR, PINS4, 0xF5);
600015ce:	movw	r4, #1781	; 0x6f5
	// cmd index 1 = reset enable
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
600015d2:	movw	r0, #1126	; 0x466
	// cmd index 2 = reset
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
600015d6:	movw	r1, #1177	; 0x499
	// cmd index 3 = read ID bytes
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
600015da:	ldr	r7, [pc, #296]	; (60001704 <configure_external_ram+0x284>)
	volatile uint32_t *luttable = &FLEXSPI2_LUT0;
	for (int i=0; i < 64; i++) luttable[i] = 0;
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_SWRESET;
	while (FLEXSPI2_MCR0 & FLEXSPI_MCR0_SWRESET) ; // wait

	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
600015dc:	str	r6, [r2, #24]
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
	// cmd index 2 = reset
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
	// cmd index 3 = read ID bytes
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
600015de:	movw	r6, #9217	; 0x2401
	for (int i=0; i < 64; i++) luttable[i] = 0;
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_SWRESET;
	while (FLEXSPI2_MCR0 & FLEXSPI_MCR0_SWRESET) ; // wait

	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
600015e2:	str	r5, [r2, #28]
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
	// cmd index 3 = read ID bytes
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
	// cmd index 4 = enter QPI mode
	FLEXSPI2_LUT16 = LUT0(CMD_SDR, PINS1, 0x35);
600015e4:	movw	r5, #1077	; 0x435

	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;

	// cmd index 0 = exit QPI mode
	FLEXSPI2_LUT0 = LUT0(CMD_SDR, PINS4, 0xF5);
600015e8:	str.w	r4, [r2, #512]	; 0x200
	// cmd index 5 = read QPI
	FLEXSPI2_LUT20 = LUT0(CMD_SDR, PINS4, 0xEB) | LUT1(ADDR_SDR, PINS4, 24);
	FLEXSPI2_LUT21 = LUT0(DUMMY_SDR, PINS4, 6) | LUT1(READ_SDR, PINS4, 1);
	// cmd index 6 = write QPI
	FLEXSPI2_LUT24 = LUT0(CMD_SDR, PINS4, 0x38) | LUT1(ADDR_SDR, PINS4, 24);
	FLEXSPI2_LUT25 = LUT0(WRITE_SDR, PINS4, 1);
600015ec:	movw	r4, #8705	; 0x2201
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;

	// cmd index 0 = exit QPI mode
	FLEXSPI2_LUT0 = LUT0(CMD_SDR, PINS4, 0xF5);
	// cmd index 1 = reset enable
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
600015f0:	str.w	r0, [r2, #528]	; 0x210

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600015f4:	movs	r0, #1
	// cmd index 0 = exit QPI mode
	FLEXSPI2_LUT0 = LUT0(CMD_SDR, PINS4, 0xF5);
	// cmd index 1 = reset enable
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
	// cmd index 2 = reset
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
600015f6:	str.w	r1, [r2, #544]	; 0x220
FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600015fa:	mov	r1, r2
	// cmd index 1 = reset enable
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
	// cmd index 2 = reset
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
	// cmd index 3 = read ID bytes
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
600015fc:	str.w	r7, [r2, #560]	; 0x230
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
	// cmd index 4 = enter QPI mode
	FLEXSPI2_LUT16 = LUT0(CMD_SDR, PINS1, 0x35);
	// cmd index 5 = read QPI
	FLEXSPI2_LUT20 = LUT0(CMD_SDR, PINS4, 0xEB) | LUT1(ADDR_SDR, PINS4, 24);
60001600:	add.w	r7, r7, #3657433088	; 0xda000000
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
	// cmd index 2 = reset
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
	// cmd index 3 = read ID bytes
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
60001604:	str.w	r6, [r2, #564]	; 0x234
	// cmd index 4 = enter QPI mode
	FLEXSPI2_LUT16 = LUT0(CMD_SDR, PINS1, 0x35);
	// cmd index 5 = read QPI
	FLEXSPI2_LUT20 = LUT0(CMD_SDR, PINS4, 0xEB) | LUT1(ADDR_SDR, PINS4, 24);
60001608:	add.w	r7, r7, #588	; 0x24c
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
	// cmd index 3 = read ID bytes
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
	// cmd index 4 = enter QPI mode
	FLEXSPI2_LUT16 = LUT0(CMD_SDR, PINS1, 0x35);
6000160c:	str.w	r5, [r2, #576]	; 0x240
	// cmd index 5 = read QPI
	FLEXSPI2_LUT20 = LUT0(CMD_SDR, PINS4, 0xEB) | LUT1(ADDR_SDR, PINS4, 24);
	FLEXSPI2_LUT21 = LUT0(DUMMY_SDR, PINS4, 6) | LUT1(READ_SDR, PINS4, 1);
60001610:	ldr	r6, [pc, #244]	; (60001708 <configure_external_ram+0x288>)
	// cmd index 6 = write QPI
	FLEXSPI2_LUT24 = LUT0(CMD_SDR, PINS4, 0x38) | LUT1(ADDR_SDR, PINS4, 24);
60001612:	ldr	r5, [pc, #248]	; (6000170c <configure_external_ram+0x28c>)
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
	// cmd index 4 = enter QPI mode
	FLEXSPI2_LUT16 = LUT0(CMD_SDR, PINS1, 0x35);
	// cmd index 5 = read QPI
	FLEXSPI2_LUT20 = LUT0(CMD_SDR, PINS4, 0xEB) | LUT1(ADDR_SDR, PINS4, 24);
60001614:	str.w	r7, [r2, #592]	; 0x250
	FLEXSPI2_LUT21 = LUT0(DUMMY_SDR, PINS4, 6) | LUT1(READ_SDR, PINS4, 1);
60001618:	str.w	r6, [r2, #596]	; 0x254
	// cmd index 6 = write QPI
	FLEXSPI2_LUT24 = LUT0(CMD_SDR, PINS4, 0x38) | LUT1(ADDR_SDR, PINS4, 24);
6000161c:	str.w	r5, [r2, #608]	; 0x260
	FLEXSPI2_LUT25 = LUT0(WRITE_SDR, PINS4, 1);
60001620:	str.w	r4, [r2, #612]	; 0x264
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001624:	str.w	r3, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001628:	str.w	r3, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
6000162c:	str.w	r0, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001630:	ldr	r3, [r1, #20]
60001632:	ldr	r2, [pc, #168]	; (600016dc <configure_external_ram+0x25c>)
60001634:	lsls	r5, r3, #31
60001636:	bpl.n	60001630 <configure_external_ram+0x1b0>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001638:	movs	r3, #1
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
6000163a:	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
6000163c:	mov.w	r0, #65536	; 0x10000
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001640:	mov	r1, r2
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001642:	str	r3, [r2, #20]
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001644:	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001648:	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
6000164c:	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001650:	ldr	r3, [r1, #20]
60001652:	ldr	r2, [pc, #136]	; (600016dc <configure_external_ram+0x25c>)
60001654:	lsls	r4, r3, #31
60001656:	bpl.n	60001650 <configure_external_ram+0x1d0>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001658:	movs	r3, #1
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
6000165a:	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
6000165c:	mov.w	r0, #131072	; 0x20000
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001660:	mov	r1, r2
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001662:	str	r3, [r2, #20]
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001664:	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001668:	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
6000166c:	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001670:	ldr	r3, [r1, #20]
60001672:	ldr	r2, [pc, #104]	; (600016dc <configure_external_ram+0x25c>)
60001674:	lsls	r0, r3, #31
60001676:	bpl.n	60001670 <configure_external_ram+0x1f0>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001678:	movs	r3, #1
}

FLASHMEM static uint32_t flexspi2_psram_id(uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
6000167a:	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
6000167c:	ldr	r0, [pc, #144]	; (60001710 <configure_external_ram+0x290>)
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
6000167e:	mov	r1, r2
{
	FLEXSPI2_IPCR0 = addr;
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001680:	str	r3, [r2, #20]
}

FLASHMEM static uint32_t flexspi2_psram_id(uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001682:	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
60001686:	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
6000168a:	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
6000168e:	ldr	r3, [r1, #20]
60001690:	ldr	r2, [pc, #72]	; (600016dc <configure_external_ram+0x25c>)
60001692:	lsls	r3, r3, #31
60001694:	bpl.n	6000168e <configure_external_ram+0x20e>
	uint32_t id = FLEXSPI2_RFDR0;
60001696:	ldr.w	r3, [r2, #256]	; 0x100

	// look for the first PSRAM chip
	flexspi2_command(0, 0); // exit quad mode
	flexspi2_command(1, 0); // reset enable
	flexspi2_command(2, 0); // reset (is this really necessary?)
	if (flexspi2_psram_id(0) == 0x5D0D) {
6000169a:	movw	r1, #23821	; 0x5d0d
	FLEXSPI2_IPCR0 = addr;
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
	uint32_t id = FLEXSPI2_RFDR0;
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
6000169e:	movs	r0, #33	; 0x21

	// look for the first PSRAM chip
	flexspi2_command(0, 0); // exit quad mode
	flexspi2_command(1, 0); // reset enable
	flexspi2_command(2, 0); // reset (is this really necessary?)
	if (flexspi2_psram_id(0) == 0x5D0D) {
600016a0:	uxth	r3, r3
	FLEXSPI2_IPCR0 = addr;
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
	uint32_t id = FLEXSPI2_RFDR0;
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
600016a2:	str	r0, [r2, #20]

	// look for the first PSRAM chip
	flexspi2_command(0, 0); // exit quad mode
	flexspi2_command(1, 0); // reset enable
	flexspi2_command(2, 0); // reset (is this really necessary?)
	if (flexspi2_psram_id(0) == 0x5D0D) {
600016a4:	cmp	r3, r1
600016a6:	beq.n	6000171c <configure_external_ram+0x29c>
			external_psram_size * 0x100000 -
			((uint32_t)&_extram_end - (uint32_t)&_extram_start),
			1, NULL);
	} else {
		// No PSRAM
		memset(&extmem_smalloc_pool, 0, sizeof(extmem_smalloc_pool));
600016a8:	ldr	r3, [pc, #104]	; (60001714 <configure_external_ram+0x294>)
600016aa:	movs	r2, #0
600016ac:	str	r2, [r3, #0]
600016ae:	str	r2, [r3, #4]
600016b0:	str	r2, [r3, #8]
600016b2:	str	r2, [r3, #12]
	}
}
600016b4:	add	sp, #12
600016b6:	pop	{r4, r5, r6, r7, pc}
600016b8:	.word	0x401f8000
600016bc:	.word	0x000170f9
600016c0:	.word	0x0001b0f9
600016c4:	.word	0x000110f9
600016c8:	.word	0x000100f9
600016cc:	.word	0x401f8400
600016d0:	.word	0x400fc000
600016d4:	.word	0x1ffffcff
600016d8:	.word	0xa0000300
600016dc:	.word	0x402a4000
600016e0:	.word	0xffff0012
600016e4:	.word	0x00f737ff
600016e8:	.word	0x7cf0ff00
600016ec:	.word	0x80000040
600016f0:	.word	0x830f00ff
600016f4:	.word	0x00020063
600016f8:	.word	0x402a4200
600016fc:	.word	0x402a4300
60001700:	.word	0x5af05af0
60001704:	.word	0x3018049f
60001708:	.word	0x26013206
6000170c:	.word	0x0a180638
60001710:	.word	0x00030004
60001714:	.word	0x20008400
60001718:	.word	0x402a8000
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
6000171c:	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
6000171e:	mov.w	r0, #262144	; 0x40000
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001722:	movs	r3, #1
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001724:	mov	r1, r2
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001726:	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
6000172a:	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
6000172e:	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001732:	ldr	r3, [r1, #20]
60001734:	ldr	r2, [pc, #236]	; (60001824 <configure_external_ram+0x3a4>)
60001736:	lsls	r7, r3, #31
60001738:	bpl.n	60001732 <configure_external_ram+0x2b2>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
6000173a:	movs	r3, #1
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
6000173c:	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001740:	movs	r0, #0
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001742:	mov	r1, r2
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001744:	str	r3, [r2, #20]
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001746:	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
6000174a:	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
6000174e:	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001752:	ldr	r3, [r1, #20]
60001754:	ldr	r2, [pc, #204]	; (60001824 <configure_external_ram+0x3a4>)
60001756:	lsls	r6, r3, #31
60001758:	bpl.n	60001752 <configure_external_ram+0x2d2>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
6000175a:	movs	r3, #1
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
6000175c:	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001760:	mov.w	r0, #65536	; 0x10000
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001764:	mov	r1, r2
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001766:	str	r3, [r2, #20]
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001768:	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
6000176c:	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001770:	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001774:	ldr	r3, [r1, #20]
60001776:	ldr	r2, [pc, #172]	; (60001824 <configure_external_ram+0x3a4>)
60001778:	lsls	r5, r3, #31
6000177a:	bpl.n	60001774 <configure_external_ram+0x2f4>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
6000177c:	movs	r3, #1
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
6000177e:	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001782:	mov.w	r0, #131072	; 0x20000
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001786:	mov	r1, r2
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001788:	str	r3, [r2, #20]
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
6000178a:	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
6000178e:	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001792:	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001796:	ldr	r3, [r1, #20]
60001798:	ldr	r2, [pc, #136]	; (60001824 <configure_external_ram+0x3a4>)
6000179a:	lsls	r4, r3, #31
6000179c:	bpl.n	60001796 <configure_external_ram+0x316>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
6000179e:	movs	r3, #1
}

FLASHMEM static uint32_t flexspi2_psram_id(uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
600017a0:	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
600017a4:	ldr	r0, [pc, #128]	; (60001828 <configure_external_ram+0x3a8>)
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600017a6:	mov	r1, r2
{
	FLEXSPI2_IPCR0 = addr;
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
600017a8:	str	r3, [r2, #20]
}

FLASHMEM static uint32_t flexspi2_psram_id(uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
600017aa:	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
600017ae:	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600017b2:	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600017b6:	ldr	r3, [r1, #20]
600017b8:	ldr	r2, [pc, #104]	; (60001824 <configure_external_ram+0x3a4>)
600017ba:	lsls	r0, r3, #31
600017bc:	bpl.n	600017b6 <configure_external_ram+0x336>
	uint32_t id = FLEXSPI2_RFDR0;
600017be:	ldr.w	r3, [r2, #256]	; 0x100
		// first PSRAM chip is present, look for a second PSRAM chip
		flexspi2_command(4, 0);
		flexspi2_command(0, 0x800000); // exit quad mode
		flexspi2_command(1, 0x800000); // reset enable
		flexspi2_command(2, 0x800000); // reset (is this really necessary?)
		if (flexspi2_psram_id(0x800000) == 0x5D0D) {
600017c2:	movw	r1, #23821	; 0x5d0d
	FLEXSPI2_IPCR0 = addr;
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
	uint32_t id = FLEXSPI2_RFDR0;
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
600017c6:	movs	r0, #33	; 0x21
		// first PSRAM chip is present, look for a second PSRAM chip
		flexspi2_command(4, 0);
		flexspi2_command(0, 0x800000); // exit quad mode
		flexspi2_command(1, 0x800000); // reset enable
		flexspi2_command(2, 0x800000); // reset (is this really necessary?)
		if (flexspi2_psram_id(0x800000) == 0x5D0D) {
600017c8:	uxth	r3, r3
	FLEXSPI2_IPCR0 = addr;
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
	uint32_t id = FLEXSPI2_RFDR0;
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
600017ca:	str	r0, [r2, #20]
		// first PSRAM chip is present, look for a second PSRAM chip
		flexspi2_command(4, 0);
		flexspi2_command(0, 0x800000); // exit quad mode
		flexspi2_command(1, 0x800000); // reset enable
		flexspi2_command(2, 0x800000); // reset (is this really necessary?)
		if (flexspi2_psram_id(0x800000) == 0x5D0D) {
600017cc:	cmp	r3, r1
600017ce:	beq.n	600017f2 <configure_external_ram+0x372>
			flexspi2_command(4, 0x800000);
			// Two PSRAM chips are present, 16 MByte
			external_psram_size = 16;
		} else {
			// One PSRAM chip is present, 8 MByte
			external_psram_size = 8;
600017d0:	ldr	r3, [pc, #88]	; (6000182c <configure_external_ram+0x3ac>)
600017d2:	movs	r2, #8
600017d4:	mov.w	r4, #8388608	; 0x800000
600017d8:	strb	r2, [r3, #0]
		}
		// TODO: zero uninitialized EXTMEM variables
		// TODO: copy from flash to initialize EXTMEM variables
		sm_set_pool(&extmem_smalloc_pool, &_extram_end,
600017da:	ldr	r1, [pc, #84]	; (60001830 <configure_external_ram+0x3b0>)
600017dc:	movs	r0, #0
600017de:	ldr	r2, [pc, #84]	; (60001834 <configure_external_ram+0x3b4>)
600017e0:	movs	r3, #1
600017e2:	str	r0, [sp, #0]
600017e4:	subs	r2, r2, r1
600017e6:	ldr	r0, [pc, #80]	; (60001838 <configure_external_ram+0x3b8>)
600017e8:	add	r2, r4
600017ea:	bl	60001b98 <__sm_set_pool_veneer>
			1, NULL);
	} else {
		// No PSRAM
		memset(&extmem_smalloc_pool, 0, sizeof(extmem_smalloc_pool));
	}
}
600017ee:	add	sp, #12
600017f0:	pop	{r4, r5, r6, r7, pc}
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
600017f2:	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600017f6:	mov.w	r1, #262144	; 0x40000
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600017fa:	movs	r3, #1
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600017fc:	mov	r0, r2
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
600017fe:	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001802:	str.w	r1, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001806:	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
6000180a:	ldr	r3, [r0, #20]
6000180c:	ldr	r1, [pc, #20]	; (60001824 <configure_external_ram+0x3a4>)
6000180e:	lsls	r3, r3, #31
60001810:	bpl.n	6000180a <configure_external_ram+0x38a>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001812:	movs	r0, #1
		flexspi2_command(1, 0x800000); // reset enable
		flexspi2_command(2, 0x800000); // reset (is this really necessary?)
		if (flexspi2_psram_id(0x800000) == 0x5D0D) {
			flexspi2_command(4, 0x800000);
			// Two PSRAM chips are present, 16 MByte
			external_psram_size = 16;
60001814:	ldr	r3, [pc, #20]	; (6000182c <configure_external_ram+0x3ac>)
60001816:	movs	r2, #16
60001818:	mov.w	r4, #16777216	; 0x1000000
{
	FLEXSPI2_IPCR0 = addr;
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
6000181c:	str	r0, [r1, #20]
		flexspi2_command(1, 0x800000); // reset enable
		flexspi2_command(2, 0x800000); // reset (is this really necessary?)
		if (flexspi2_psram_id(0x800000) == 0x5D0D) {
			flexspi2_command(4, 0x800000);
			// Two PSRAM chips are present, 16 MByte
			external_psram_size = 16;
6000181e:	strb	r2, [r3, #0]
60001820:	b.n	600017da <configure_external_ram+0x35a>
60001822:	nop
60001824:	.word	0x402a4000
60001828:	.word	0x00030004
6000182c:	.word	0x20006248
60001830:	.word	0x70000000
60001834:	.word	0x70000000
60001838:	.word	0x20008400

6000183c <usb_pll_start>:

#endif // ARDUINO_TEENSY41


FLASHMEM void usb_pll_start()
{
6000183c:	push	{r4, r5, r6, r7}
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
6000183e:	ldr	r2, [pc, #92]	; (6000189c <usb_pll_start+0x60>)
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_EN_USB_CLKS)) {
			printf("  enable USB clocks\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
60001840:	movs	r7, #64	; 0x40
			printf("  wait for lock\n");
			continue;
		}
		if (n & CCM_ANALOG_PLL_USB1_BYPASS) {
			printf("  turn off bypass\n");
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
60001842:	mov.w	r1, #65536	; 0x10000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_POWER)) {
			printf("  power up PLL\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
60001846:	mov.w	r6, #4096	; 0x1000
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_ENABLE)) {
			printf("  enable PLL\n");
			// TODO: should this be done so early, or later??
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
6000184a:	mov.w	r5, #8192	; 0x2000
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
		printf("CCM_ANALOG_PLL_USB1=%08lX\n", n);
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
			printf("  ERROR, 528 MHz mode!\n"); // never supposed to use this mode!
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
6000184e:	mov.w	r4, #49152	; 0xc000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_BYPASS;	// bypass
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
60001852:	movw	r0, #12354	; 0x3042


FLASHMEM void usb_pll_start()
{
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
60001856:	ldr	r3, [r2, #16]
		printf("CCM_ANALOG_PLL_USB1=%08lX\n", n);
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
60001858:	tst.w	r3, #2
6000185c:	beq.n	6000186c <usb_pll_start+0x30>
			printf("  ERROR, 528 MHz mode!\n"); // never supposed to use this mode!
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
6000185e:	str	r4, [r2, #24]
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_BYPASS;	// bypass
60001860:	str	r1, [r2, #20]
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
60001862:	str	r0, [r2, #24]


FLASHMEM void usb_pll_start()
{
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
60001864:	ldr	r3, [r2, #16]
		printf("CCM_ANALOG_PLL_USB1=%08lX\n", n);
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
60001866:	tst.w	r3, #2
6000186a:	bne.n	6000185e <usb_pll_start+0x22>
				CCM_ANALOG_PLL_USB1_DIV_SELECT |		// use 480 MHz
				CCM_ANALOG_PLL_USB1_ENABLE |			// disable
				CCM_ANALOG_PLL_USB1_EN_USB_CLKS;		// disable usb
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_ENABLE)) {
6000186c:	tst.w	r3, #8192	; 0x2000
60001870:	bne.n	60001876 <usb_pll_start+0x3a>
			printf("  enable PLL\n");
			// TODO: should this be done so early, or later??
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
60001872:	str	r5, [r2, #20]
			continue;
60001874:	b.n	60001856 <usb_pll_start+0x1a>
		}
		if (!(n & CCM_ANALOG_PLL_USB1_POWER)) {
60001876:	tst.w	r3, #4096	; 0x1000
6000187a:	bne.n	60001880 <usb_pll_start+0x44>
			printf("  power up PLL\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
6000187c:	str	r6, [r2, #20]
			continue;
6000187e:	b.n	60001856 <usb_pll_start+0x1a>
		}
		if (!(n & CCM_ANALOG_PLL_USB1_LOCK)) {
60001880:	cmp	r3, #0
60001882:	bge.n	60001856 <usb_pll_start+0x1a>
			printf("  wait for lock\n");
			continue;
		}
		if (n & CCM_ANALOG_PLL_USB1_BYPASS) {
60001884:	tst.w	r3, #65536	; 0x10000
60001888:	beq.n	6000188e <usb_pll_start+0x52>
			printf("  turn off bypass\n");
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
6000188a:	str	r1, [r2, #24]
			continue;
6000188c:	b.n	60001856 <usb_pll_start+0x1a>
		}
		if (!(n & CCM_ANALOG_PLL_USB1_EN_USB_CLKS)) {
6000188e:	lsls	r3, r3, #25
60001890:	bmi.n	60001896 <usb_pll_start+0x5a>
			printf("  enable USB clocks\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
60001892:	str	r7, [r2, #20]
			continue;
60001894:	b.n	60001856 <usb_pll_start+0x1a>
		}
		return; // everything is as it should be  :-)
	}
}
60001896:	pop	{r4, r5, r6, r7}
60001898:	bx	lr
6000189a:	nop
6000189c:	.word	0x400d8000

600018a0 <tempmon_init>:
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
600018a0:	ldr	r2, [pc, #236]	; (60001990 <tempmon_init+0xf0>)
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
600018a2:	vmov.f32	s13, #57	; 0x41c80000  25.0

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
600018a6:	ldr	r1, [pc, #236]	; (60001994 <tempmon_init+0xf4>)
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring

  //PANIC shutdown:
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
600018a8:	movs	r0, #0
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
600018aa:	ldr	r3, [r2, #0]
  asm volatile ("dsb":::"memory");
  while (1) asm ("wfi");
}

FLASHMEM void tempmon_init(void)
{
600018ac:	push	{r4, r5, r6, r7, lr}
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
600018ae:	bic.w	r3, r3, #1

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
600018b2:	movs	r4, #3
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
600018b4:	ldr.w	lr, [pc, #256]	; 600019b8 <tempmon_init+0x118>
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
600018b8:	str	r3, [r2, #0]

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
600018ba:	str.w	r4, [r2, #144]	; 0x90
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
600018be:	ldr.w	r3, [r1, #224]	; 0xe0
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;
600018c2:	ldr	r7, [pc, #212]	; (60001998 <tempmon_init+0xf8>)
  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
600018c4:	uxtb	r5, r3
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
600018c6:	ubfx	r4, r3, #8, #12
600018ca:	ldr	r6, [pc, #208]	; (6000199c <tempmon_init+0xfc>)
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;
600018cc:	rsb	r3, r4, r3, lsr #20
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
600018d0:	vmov	s15, r5
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600018d4:	sub.w	r1, r5, #85	; 0x55
  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
600018d8:	str.w	r5, [lr]
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
600018dc:	vcvt.f32.s32	s14, s15
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600018e0:	add.w	r5, r3, r3, lsl #2
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600018e4:	vmov	s15, r4
600018e8:	mul.w	r1, r3, r1
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;
600018ec:	str	r3, [r7, #0]
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
600018ee:	add.w	r3, r3, r3, lsl #6
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600018f2:	vcvt.f32.s32	s10, s15
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
600018f6:	vmov	s15, r1
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600018fa:	subs	r1, r1, r5
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
600018fc:	vsub.f32	s13, s14, s13
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001900:	vcvt.f32.u32	s14, s15
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
60001904:	ldr	r5, [pc, #152]	; (600019a0 <tempmon_init+0x100>)
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001906:	vmov	s15, r1
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
6000190a:	add	r3, r1
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
6000190c:	vstr	s13, [r5]
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001910:	vcvt.f32.u32	s15, s15
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001914:	str	r4, [r6, #0]
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001916:	vdiv.f32	s11, s14, s13
6000191a:	ldr	r6, [pc, #136]	; (600019a4 <tempmon_init+0x104>)
6000191c:	ldr	r5, [r2, #0]
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
6000191e:	ldr	r1, [pc, #136]	; (600019a8 <tempmon_init+0x108>)
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring

  //PANIC shutdown:
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60001920:	ldr	r4, [pc, #136]	; (600019ac <tempmon_init+0x10c>)
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001922:	vdiv.f32	s12, s15, s13
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001926:	vmov	s15, r3
6000192a:	ldr	r3, [pc, #132]	; (600019b0 <tempmon_init+0x110>)
6000192c:	str.w	r3, [r6, #320]	; 0x140
60001930:	vcvt.f32.u32	s15, s15
60001934:	vdiv.f32	s14, s15, s13
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001938:	vadd.f32	s11, s11, s10
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
6000193c:	vadd.f32	s13, s12, s10
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001940:	vcvt.u32.f32	s11, s11
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001944:	vcvt.u32.f32	s13, s13
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001948:	vmov	r3, s11
6000194c:	orr.w	r3, r5, r3, lsl #20
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001950:	vmov	r5, s13
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001954:	vadd.f32	s15, s14, s10
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001958:	str	r3, [r2, #0]
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
6000195a:	and.w	r1, r1, r5, lsl #16
6000195e:	ldr.w	r3, [r2, #272]	; 0x110
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001962:	vcvt.u32.f32	s15, s15
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001966:	orrs	r3, r1
60001968:	str.w	r3, [r2, #272]	; 0x110
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
6000196c:	vmov	r3, s15
60001970:	ldr.w	r1, [r2, #272]	; 0x110
60001974:	ubfx	r3, r3, #0, #12
60001978:	orrs	r3, r1
6000197a:	str.w	r3, [r2, #272]	; 0x110
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring
6000197e:	ldr	r3, [r2, #0]
60001980:	orr.w	r3, r3, #2
60001984:	str	r3, [r2, #0]

  //PANIC shutdown:
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60001986:	strb	r0, [r4, #0]
  attachInterruptVector(IRQ_TEMPERATURE_PANIC, &Panic_Temp_isr);
  NVIC_ENABLE_IRQ(IRQ_TEMPERATURE_PANIC);
60001988:	ldr	r3, [pc, #40]	; (600019b4 <tempmon_init+0x114>)
6000198a:	movs	r2, #1
6000198c:	str	r2, [r3, #0]
6000198e:	pop	{r4, r5, r6, r7, pc}
60001990:	.word	0x400d8180
60001994:	.word	0x401f4400
60001998:	.word	0x20006254
6000199c:	.word	0x20006258
600019a0:	.word	0x20006250
600019a4:	.word	0x20008800
600019a8:	.word	0x0fff0000
600019ac:	.word	0xe000e440
600019b0:	.word	0x0000ebc9
600019b4:	.word	0xe000e108
600019b8:	.word	0x2000624c

600019bc <analog_init>:
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
600019bc:	ldr	r3, [pc, #68]	; (60001a04 <analog_init+0x48>)
	} else {
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
600019be:	ldr	r1, [pc, #72]	; (60001a08 <analog_init+0x4c>)
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
600019c0:	ldr	r0, [r3, #108]	; 0x6c
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) ;
600019c2:	mov	r2, r1
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
600019c4:	orr.w	r0, r0, #196608	; 0x30000
}

#define MAX_ADC_CLOCK 20000000

FLASHMEM void analog_init(void)
{
600019c8:	push	{r4, r5}
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
600019ca:	str	r0, [r3, #108]	; 0x6c
	} else {
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
600019cc:	movw	r5, #1591	; 0x637
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
	CCM_CCGR1 |= CCM_CCGR1_ADC2(CCM_CCGR_ON);
600019d0:	ldr	r0, [r3, #108]	; 0x6c
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
600019d2:	movs	r4, #160	; 0xa0
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
	CCM_CCGR1 |= CCM_CCGR1_ADC2(CCM_CCGR_ON);
600019d4:	orr.w	r0, r0, #768	; 0x300
600019d8:	str	r0, [r3, #108]	; 0x6c
	} else {
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
600019da:	str	r5, [r1, #68]	; 0x44
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
600019dc:	str	r4, [r1, #72]	; 0x48
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) ;
600019de:	ldr	r3, [r2, #72]	; 0x48
600019e0:	lsls	r3, r3, #24
600019e2:	bmi.n	600019de <analog_init+0x22>
	calibrating = 0;
	//ADC2
	ADC2_CFG = mode | ADC_CFG_ADHSC;
600019e4:	ldr	r3, [pc, #36]	; (60001a0c <analog_init+0x50>)
600019e6:	movw	r0, #1591	; 0x637
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
600019ea:	movs	r1, #160	; 0xa0
	calibrating = 1;
	while (ADC2_GC & ADC_GC_CAL) ;
600019ec:	mov	r2, r3
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) ;
	calibrating = 0;
	//ADC2
	ADC2_CFG = mode | ADC_CFG_ADHSC;
600019ee:	str	r0, [r3, #68]	; 0x44
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
600019f0:	str	r1, [r3, #72]	; 0x48
	calibrating = 1;
	while (ADC2_GC & ADC_GC_CAL) ;
600019f2:	ldr	r3, [r2, #72]	; 0x48
600019f4:	ands.w	r3, r3, #128	; 0x80
600019f8:	bne.n	600019f2 <analog_init+0x36>
	calibrating = 0;
600019fa:	ldr	r2, [pc, #20]	; (60001a10 <analog_init+0x54>)
600019fc:	strb	r3, [r2, #0]
}
600019fe:	pop	{r4, r5}
60001a00:	bx	lr
60001a02:	nop
60001a04:	.word	0x400fc000
60001a08:	.word	0x400c4000
60001a0c:	.word	0x400c8000
60001a10:	.word	0x200063b9

60001a14 <usb_string_mtp>:
60001a14:	..M.T.P.

60001a1c <usb_string_product_name_default>:
60001a1c:	..T.e.e.n.s.y. .
60001a2c:	M.T.P. .D.i.s.k.
60001a3c:	/.S.e.r.i.a.l...

60001a4c <usb_string_manufacturer_name_default>:
60001a4c:	..T.e.e.n.s.y.d.
60001a5c:	u.i.n.o.

60001a64 <string0>:
60001a64:	....

60001a68 <usb_config_descriptor_12>:
60001a68:	..i.....2.......
60001a78:	...........$....
60001a88:	$....$...$......
60001a98:	................
60001aa8:	.@......@.......
60001ab8:	........@......@
60001ac8:	............

60001ad4 <usb_config_descriptor_480>:
60001ad4:	..i.....2.......
60001ae4:	...........$....
60001af4:	$....$...$......
60001b04:	................
60001b14:	................
60001b24:	................
60001b34:	............

60001b40 <qualifier_descriptor>:
60001b40:	.......@..

60001b4a <_serialEvent_default>:
60001b4a:	..

60001b4c <_init>:
60001b4c:	push	{r3, r4, r5, r6, r7, lr}
60001b4e:	nop
60001b50:	pop	{r3, r4, r5, r6, r7}
60001b52:	pop	{r3}
60001b54:	mov	lr, r3
60001b56:	bx	lr

60001b58 <__pwm_init_veneer>:
60001b58:	ldr.w	pc, [pc]	; 60001b5c <__pwm_init_veneer+0x4>
60001b5c:	.word	0x0000ecc5

60001b60 <__startup_late_hook_veneer>:
60001b60:	ldr.w	pc, [pc]	; 60001b64 <__startup_late_hook_veneer+0x4>
60001b64:	.word	0x0000e60d

60001b68 <__delay_veneer>:
60001b68:	ldr.w	pc, [pc]	; 60001b6c <__delay_veneer+0x4>
60001b6c:	.word	0x0000e4c1

60001b70 <__memset_veneer>:
60001b70:	ldr.w	pc, [pc]	; 60001b74 <__memset_veneer+0x4>
60001b74:	.word	0x00010d7d

60001b78 <__main_veneer>:
60001b78:	ldr.w	pc, [pc]	; 60001b7c <__main_veneer+0x4>
60001b7c:	.word	0x0000f6c9

60001b80 <__startup_early_hook_veneer>:
60001b80:	ldr.w	pc, [pc]	; 60001b84 <__startup_early_hook_veneer+0x4>
60001b84:	.word	0x0000e609

60001b88 <__set_arm_clock_veneer>:
60001b88:	ldr.w	pc, [pc]	; 60001b8c <__set_arm_clock_veneer+0x4>
60001b8c:	.word	0x0000d8d9

60001b90 <__usb_init_serialnumber_veneer>:
60001b90:	ldr.w	pc, [pc]	; 60001b94 <__usb_init_serialnumber_veneer+0x4>
60001b94:	.word	0x0000f265

60001b98 <__sm_set_pool_veneer>:
60001b98:	ldr.w	pc, [pc]	; 60001b9c <__sm_set_pool_veneer+0x4>
60001b9c:	.word	0x0000eb39

60001ba0 <____libc_init_array_veneer>:
60001ba0:	ldr.w	pc, [pc]	; 60001ba4 <____libc_init_array_veneer+0x4>
60001ba4:	.word	0x000105a1

60001ba8 <__init_array_start>:
60001ba8:	.word	0x00000045
60001bac:	.word	0x00001855
60001bb0:	.word	0x0000d005

60001bb4 <__init_array_end>:
60001bb4:	.word	0xffffffff
60001bb8:	.word	0xffffffff
60001bbc:	.word	0xffffffff

Disassembly of section .text.itcm:

00000000 <_stext>:
	...

00000020 <__do_global_dtors_aux>:
    /* ready to read temperature code value */
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    /* Calculate temperature */
    tmeas = s_hotTemp - (float)((nmeas - s_hotCount) * s_hot_ROOM / s_roomC_hotC);

    return tmeas;
      20:	.word	0x4c05b510
      24:	ldrb	r3, [r4, #0]
    }

    /* ready to read temperature code value */
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    /* Calculate temperature */
    tmeas = s_hotTemp - (float)((nmeas - s_hotCount) * s_hot_ROOM / s_roomC_hotC);
      26:	cbnz	r3, 36 <__rtc_localtime+0x5>

    return tmeas;
      28:	ldr	r3, [pc, #16]	; (3c <__rtc_localtime+0xb>)
      2a:	cbz	r3, 32 <__rtc_localtime+0x1>
      2c:	ldr	r0, [pc, #16]	; (40 <__rtc_localtime+0xf>)
      2e:	nop.w
      32:	movs	r3, #1
      34:	strb	r3, [r4, #0]
      36:	.short	0xbd10
      38:	asrs	r0, r2, #24
      3a:	movs	r0, #0
      3c:	movs	r0, r0
      3e:	movs	r0, r0
}
      40:	ldr	r0, [pc, #336]	; (194 <File::read()+0x8>)
      42:	movs	r1, r0

00000044 <frame_dummy>:
      44:	ldr	r3, [pc, #32]	; (68 <frame_dummy+0x24>)
      46:	push	{r4, lr}
      48:	.word	0x4908b11b
      4c:	ldr	r0, [pc, #32]	; (70 <frame_dummy+0x2c>)
      4e:	.short	0xf3af
      50:	strh	r0, [r0, #0]
      52:	.short	0x4808
      54:	ldr	r3, [r0, #0]
      56:	.short	0xb903
      58:	pop	{r4, pc}
      5a:	ldr	r3, [pc, #28]	; (78 <frame_dummy+0x34>)
{
	if (mult < 1 || mult > 3) return;
	uint32_t config = (packet_size << 16) | (mult << 30);
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
      5c:	.word	0xd0fb2b00
      60:	ldmia.w	sp!, {r4, lr}
      64:	.word	0xbf004718
      mode |= ADC_CFG_AVGS(2);
      mode1 |= ADC_CFG_AVGS(2);

    } else if (num >= 8) {
      mode |= ADC_CFG_AVGS(1);
      mode1 |= ADC_CFG_AVGS(1);
      68:	movs	r0, r0
    } else {
      mode |= 0;
      mode1 |= 0;
    }

  ADC1_CFG = mode;
      6a:	.short	0x0000
  ADC2_CFG = mode1;
  
  if(num >= 4){
      6c:	asrs	r4, r2, #24
      mode |= 0;
      mode1 |= 0;
    }

  ADC1_CFG = mode;
  ADC2_CFG = mode1;
      6e:	.short	0x2000
    } else {
      mode |= 0;
      mode1 |= 0;
    }

  ADC1_CFG = mode;
      70:	ldr	r0, [pc, #336]	; (1c4 <File::write(unsigned char)+0xc>)
  ADC2_CFG = mode1;
      72:	.short	0x0001
  
  if(num >= 4){
      74:	asrs	r0, r2, #24
      ADC1_GC |= ADC_GC_AVGE;// turns on averaging
      ADC2_GC |= ADC_GC_AVGE;// turns on averaging
  }
}
      76:	movs	r0, #0
      78:	.word	0x00000000

0000007c <Print::availableForWrite()>:
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
	virtual size_t write(const uint8_t *buffer, size_t size);
	virtual int availableForWrite(void)		{ return 0; }
      7c:	movs	r0, #0
      7e:	.short	0x4770

00000080 <Print::flush()>:
	virtual void flush()				{ }
      80:	bx	lr
      82:	nop

00000084 <SdCardInterface::status()>:
   * \return The number of 512 byte data sectors in the card
   *         or zero if an error occurs.
   */
  virtual uint32_t sectorCount() = 0;
  /** \return card status. */
  virtual uint32_t status() {return 0XFFFFFFFF;}
      84:	.word	0x30fff04f
      88:	bx	lr
    } else {
      sign = '+';
      tz &= 0X7F;
    }
    if (tz) {
      str = fsFmtField(str, 15*(tz%4), 0);
      8a:	nop

0000008c <File::read(void*, unsigned int)>:
	unsigned int getRefcount() { // testing only
		return refcount;
	}
#endif
	virtual size_t read(void *buf, size_t nbyte) {
		return (f) ? f->read(buf, nbyte) : 0;
      8c:	.word	0xb1106900
      90:	ldr	r3, [r0, #0]
      92:	.short	0x6a9b
      94:	bx	r3
	}
      96:	.short	0x4770

00000098 <File::write(void const*, unsigned int)>:
	virtual size_t write(const void *buf, size_t size) {
		return (f) ? f->write(buf, size) : 0;
      98:	ldr	r0, [r0, #16]
      9a:	.short	0xb110
      9c:	ldr	r3, [r0, #0]
      9e:	.short	0x6adb
      a0:	bx	r3
	}
      a2:	.short	0x4770

000000a4 <File::available()>:
	virtual int available() {
		return (f) ? f->available() : 0;
      a4:	ldr	r0, [r0, #16]
      a6:	.short	0xb110
      a8:	ldr	r3, [r0, #0]
      aa:	.short	0x691b
      ac:	bx	r3
	}
      ae:	bx	lr

000000b0 <File::peek()>:
	virtual int peek() {
		return (f) ? f->peek() : -1;
      b0:	ldr	r0, [r0, #16]
      b2:	cbz	r0, ba <File::peek()+0xa>
      b4:	ldr	r3, [r0, #0]
      b6:	ldr	r3, [r3, #24]
      b8:	.word	0xf04f4718
	}
      bc:	adds	r0, #255	; 0xff
      be:	.short	0x4770

000000c0 <File::flush()>:
	virtual void flush() {
		if (f) f->flush();
      c0:	ldr	r0, [r0, #16]
      c2:	cbz	r0, ca <File::flush()+0xa>
      c4:	.word	0x68db6803
      c8:	bx	r3
      ca:	bx	lr

000000cc <File::truncate(unsigned long long)>:
	}
	virtual bool truncate(uint64_t size=0) {
		return (f) ? f->truncate(size) : false;
      cc:	ldr	r0, [r0, #16]
      ce:	cbz	r0, d6 <File::truncate(unsigned long long)+0xa>
      d0:	ldr	r1, [r0, #0]
      d2:	ldr	r1, [r1, #48]	; 0x30
      d4:	bx	r1
	}
      d6:	bx	lr

000000d8 <File::seek(unsigned long long, int)>:
	virtual bool seek(uint64_t pos, int mode) {
      d8:	.word	0x6900b410
		return (f) ? f->seek(pos, mode) : false;
      dc:	cbz	r0, e8 <File::seek(unsigned long long, int)+0x10>
      de:	.short	0x6804
      e0:	ldr	r1, [r4, #52]	; 0x34
	}
      e2:	.short	0xf85d
      e4:	ldr	r3, [pc, #16]	; (f8 <File::position()+0x8>)
	}
	virtual bool truncate(uint64_t size=0) {
		return (f) ? f->truncate(size) : false;
	}
	virtual bool seek(uint64_t pos, int mode) {
		return (f) ? f->seek(pos, mode) : false;
      e6:	.short	0x4708
	}
      e8:	ldr.w	r4, [sp], #4
      ec:	.word	0xbf004770

000000f0 <File::position()>:
	virtual uint64_t position() {
		return (f) ? f->position() : 0;
      f0:	ldr	r0, [r0, #16]
      f2:	.short	0xb110
      f4:	ldr	r3, [r0, #0]
      f6:	ldr	r3, [r3, #56]	; 0x38
      f8:	bx	r3
	}
      fa:	movs	r0, #0
      fc:	movs	r1, #0
      fe:	bx	lr

00000100 <File::size()>:
	virtual uint64_t size() {
		return (f) ? f->size() : 0;
     100:	ldr	r0, [r0, #16]
     102:	cbz	r0, 10a <File::size()+0xa>
     104:	ldr	r3, [r0, #0]
     106:	ldr	r3, [r3, #60]	; 0x3c
     108:	bx	r3
	}
     10a:	movs	r0, #0
     10c:	.word	0x47702100

00000110 <File::close()>:
	virtual void close() {
		if (f) f->close();
     110:	ldr	r0, [r0, #16]
     112:	cbz	r0, 11a <File::close()+0xa>
     114:	ldr	r3, [r0, #0]
     116:	ldr	r3, [r3, #64]	; 0x40
     118:	bx	r3
     11a:	bx	lr

0000011c <File::operator bool()>:
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
     11c:	ldr	r0, [r0, #16]
     11e:	cbz	r0, 126 <File::operator bool()+0xa>
     120:	ldr	r3, [r0, #0]
     122:	ldr	r3, [r3, #68]	; 0x44
     124:	bx	r3
	}
     126:	.short	0x4770

00000128 <File::name()>:
	virtual const char* name() {
		return (f) ? f->name() : "";
     128:	ldr	r0, [r0, #16]
     12a:	cbz	r0, 132 <File::name()+0xa>
     12c:	ldr	r3, [r0, #0]
     12e:	ldr	r3, [r3, #72]	; 0x48
     130:	bx	r3
	}
     132:	ldr	r0, [pc, #4]	; (138 <File::name()+0x10>)
     134:	bx	lr
     136:	nop
     138:	lsls	r4, r5, #5
     13a:	movs	r0, #0

0000013c <File::isDirectory()>:
	virtual bool isDirectory() {
		return (f) ? f->isDirectory() : false;
     13c:	.word	0xb1106900
     140:	ldr	r3, [r0, #0]
     142:	.short	0x6cdb
     144:	bx	r3
	}
     146:	.short	0x4770

00000148 <File::openNextFile(unsigned char)>:
	virtual File openNextFile(uint8_t mode=0) {
     148:	push	{r3, r4, r5, lr}
		return (f) ? f->openNextFile(mode) : *this;
     14a:	ldr	r3, [r1, #16]
		return (f) ? f->name() : "";
	}
	virtual bool isDirectory() {
		return (f) ? f->isDirectory() : false;
	}
	virtual File openNextFile(uint8_t mode=0) {
     14c:	.word	0xb12b4604
		return (f) ? f->openNextFile(mode) : *this;
     150:	ldr	r5, [r3, #0]
     152:	.short	0x4619
     154:	ldr	r3, [r5, #80]	; 0x50
     156:	.short	0x4798
	}
     158:	mov	r0, r4
     15a:	.short	0xbd38
#include "Print.h"

class Stream : public Print
{
  public:
	constexpr Stream() : _timeout(1000), read_error(0) {}
     15c:	mov.w	r0, #1000	; 0x3e8
			//"File(File *file) constructor only accepts pointers "
			//"to derived classes, not File itself");
		f = file;
		if (f) f->refcount++;
	}
	File(const File &file) {
     160:	.word	0x71234a06
     164:	strb	r3, [r4, #12]
     166:	.short	0x60a0
     168:	str	r2, [r4, #0]
		//Serial.println("File copy constructor");
		//static int copycount=0;
		//if (++copycount > 20) while (1) ;
		f = file.f;
     16a:	.short	0x690b
     16c:	str	r3, [r4, #16]
		if (f) f->refcount++;
     16e:	.short	0x2b00
     170:	beq.n	158 <File::openNextFile(unsigned char)+0x10>
     172:	.short	0x691a
	virtual bool isDirectory() {
		return (f) ? f->isDirectory() : false;
	}
	virtual File openNextFile(uint8_t mode=0) {
		return (f) ? f->openNextFile(mode) : *this;
	}
     174:	mov	r0, r4
	File(const File &file) {
		//Serial.println("File copy constructor");
		//static int copycount=0;
		//if (++copycount > 20) while (1) ;
		f = file.f;
		if (f) f->refcount++;
     176:	.short	0x3201
     178:	str	r2, [r3, #16]
	virtual bool isDirectory() {
		return (f) ? f->isDirectory() : false;
	}
	virtual File openNextFile(uint8_t mode=0) {
		return (f) ? f->openNextFile(mode) : *this;
	}
     17a:	.short	0xbd38
     17c:	lsls	r4, r6, #1
     17e:	.short	0x2000

00000180 <File::rewindDirectory()>:
	virtual void rewindDirectory(void) {
		if (f) f->rewindDirectory();
     180:	ldr	r0, [r0, #16]
     182:	cbz	r0, 18a <File::rewindDirectory()+0xa>
     184:	.word	0x6d5b6803
     188:	bx	r3
     18a:	.short	0x4770

0000018c <File::read()>:
	}
	bool seek(uint64_t pos) {
		return seek(pos, SeekSet);
	}
	int read() {
		if (!f) return -1;
     18c:	ldr	r0, [r0, #16]
     18e:	.short	0xb180
		unsigned char b;
		if (f->read(&b, 1) < 1) return -1;
     190:	ldr	r3, [r0, #0]
     192:	.short	0x2201
		if (f) f->rewindDirectory();
	}
	bool seek(uint64_t pos) {
		return seek(pos, SeekSet);
	}
	int read() {
     194:	push	{lr}
     196:	.short	0xb083
		if (!f) return -1;
		unsigned char b;
		if (f->read(&b, 1) < 1) return -1;
     198:	ldr	r3, [r3, #40]	; 0x28
     19a:	.short	0xf10d
     19c:	lsls	r7, r0, #4
     19e:	blx	r3
     1a0:	.word	0xf89db120
		return b;
     1a4:	movs	r7, r0
	}
     1a6:	.short	0xb003
     1a8:	ldr.w	pc, [sp], #4
	}
	bool seek(uint64_t pos) {
		return seek(pos, SeekSet);
	}
	int read() {
		if (!f) return -1;
     1ac:	mov.w	r0, #4294967295
     1b0:	.word	0xf04fe7f9
     1b4:	adds	r0, #255	; 0xff
		unsigned char b;
		if (f->read(&b, 1) < 1) return -1;
		return b;
	}
     1b6:	.short	0x4770

000001b8 <File::write(unsigned char)>:
	size_t write(uint8_t b) {
     1b8:	push	{r4, lr}
     1ba:	sub	sp, #8
		return write(&b, 1);
     1bc:	ldr	r4, [r0, #0]
     1be:	movs	r2, #1
		if (!f) return -1;
		unsigned char b;
		if (f->read(&b, 1) < 1) return -1;
		return b;
	}
	size_t write(uint8_t b) {
     1c0:	.word	0xf803ab02
     1c4:	adds	r1, r0, #4
		return write(&b, 1);
     1c6:	.short	0x4619
     1c8:	ldr	r3, [r4, #44]	; 0x2c
     1ca:	.short	0x4798
	}
     1cc:	add	sp, #8
     1ce:	.short	0xbd10

000001d0 <SDFile::operator bool()>:
  bool isHidden() {
    return m_fFile ? m_fFile->isHidden() :
           m_xFile ? m_xFile->isHidden() : false;
  }
  /** \return True if this is an open file/directory else false. */
  bool isOpen() {return m_fFile || m_xFile;}
     1d0:	ldr	r3, [r0, #92]	; 0x5c
     1d2:	.short	0xb10b
     1d4:	movs	r0, #1
		}
		sdfatfile.close();
	}
	virtual operator bool() {
		return sdfatfile.isOpen();
	}
     1d6:	bx	lr
     1d8:	.word	0x30006e00
     1dc:	it	ne
     1de:	.short	0x2001
     1e0:	bx	lr	; unpredictable branch in IT block

	// write out computed CTRL
	port->CTRL = ctrl;

	// Bit 3 10 bit - Will assume that begin already cleared it.
	// process some other bits which change other registers.
	if (format & 0x08) 	port->BAUD |= LPUART_BAUD_M10;
     1e2:	.short	0xbf00

000001e4 <__tcf_0>:
  return state;
}

/************ Basic File System Interface *************************/
#include "SD.h"
extern SDClass sdx[];
     1e4:	bx	lr	; unpredictable branch in IT block

     1e6:	.short	0xbf00

000001e8 <File::whoami()>:
	}
	virtual ~File() {
		invalidate();
	}
#ifdef FILE_WHOAMI
	virtual void whoami() { // testing only
     1e8:	push	{r4, lr}
     1ea:	.short	0x4604
		Serial.printf("  File    this=%x, f=%x\n", (int)this, (int)f);
     1ec:	ldr	r1, [pc, #24]	; (208 <File::whoami()+0x20>)
     1ee:	.short	0x4807
     1f0:	ldr	r3, [r4, #16]
     1f2:	movne	r2, r4
     1f4:	.word	0xf9faf00f
		if (f) f->whoami();
     1f8:	ldr	r0, [r4, #16]
     1fa:	.short	0xb120
     1fc:	ldr	r3, [r0, #0]
	}
     1fe:	.short	0xe8bd
     200:	ands	r0, r2
		invalidate();
	}
#ifdef FILE_WHOAMI
	virtual void whoami() { // testing only
		Serial.printf("  File    this=%x, f=%x\n", (int)this, (int)f);
		if (f) f->whoami();
     202:	.short	0x6a5b
     204:	bx	r3
     206:	.short	0xbd10
     208:	lsls	r4, r2, #5
     20a:	.short	0x2000
     20c:	lsrs	r0, r3, #17
     20e:	movs	r0, #0

00000210 <SDFile::whoami()>:
	virtual ~SDFile(void) {
		if (sdfatfile) sdfatfile.close();
		if (filename) free(filename);
	}
#ifdef FILE_WHOAMI
	virtual void whoami() {
     210:	.word	0x49024602
		Serial.printf("   SDFile this=%x, refcount=%u\n",
			(int)this, getRefcount());
     214:	ldr	r0, [pc, #8]	; (220 <SDFile::whoami()+0x10>)
     216:	.short	0x6913
     218:	b.w	f5ec <Print::printf(char const*, ...)>
     21c:	.word	0x20000170
     220:	lsrs	r0, r3, #17
     222:	.short	0x2000

00000224 <SDFile::close()>:
		return sdfatfile.curPosition();
	}
	virtual uint64_t size() {
		return sdfatfile.size();
	}
	virtual void close() {
     224:	push	{r4, lr}
     226:	.short	0x4604
		if (filename) {
     228:	ldr	r0, [r0, #100]	; 0x64
     22a:	cbz	r0, 234 <SDFile::close()+0x10>
			free(filename);
     22c:	.word	0xf9e8f010
			filename = nullptr;
     230:	movs	r3, #0
     232:	.short	0x6663
		}
		sdfatfile.close();
     234:	add.w	r0, r4, #36	; 0x24
	}
     238:	.word	0x4010e8bd
	virtual void close() {
		if (filename) {
			free(filename);
			filename = nullptr;
		}
		sdfatfile.close();
     23c:	b.w	b408 <FsBaseFile::close()>

00000240 <SDFile::openNextFile(unsigned char)>:
		return filename;
	}
	virtual boolean isDirectory(void) {
		return sdfatfile.isDirectory();
	}
	virtual File openNextFile(uint8_t mode=0) {
     240:	.word	0x41f0e92d
class __FlashStringHelper;

class Print
{
  public:
	constexpr Print() : write_error(0) {}
     244:	movs	r3, #0
     246:	sub	sp, #80	; 0x50
     248:	.word	0x747af44f
};
/**
 * \class FsFile
 * \brief FsBaseFile file with Arduino Stream.
 */
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
     24c:	ldr	r7, [pc, #152]	; (2e8 <SDFile::openNextFile(unsigned char)+0xa8>)
   * \param[in] oflag open flags.
   * \return a FatStream object.
   */
  FsFile openNextFile(oflag_t oflag = O_RDONLY) {
    FsFile tmpFile;
    tmpFile.openNext(this, oflag);
     24e:	mov	r2, r3
     250:	mov	r5, r0
     252:	adds	r1, #36	; 0x24
     254:	add	r0, sp, #16
     256:	strb.w	r3, [sp, #4]
     25a:	strb.w	r3, [sp, #12]
 * \class FsBaseFile
 * \brief FsBaseFile class.
 */
class FsBaseFile {
 public:
  FsBaseFile() : m_fFile(nullptr), m_xFile(nullptr) {}
     25e:	str	r3, [sp, #72]	; 0x48
     260:	.word	0x94029313
};
/**
 * \class FsFile
 * \brief FsBaseFile file with Arduino Stream.
 */
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
     264:	str	r7, [sp, #0]
   * \param[in] oflag open flags.
   * \return a FatStream object.
   */
  FsFile openNextFile(oflag_t oflag = O_RDONLY) {
    FsFile tmpFile;
    tmpFile.openNext(this, oflag);
     266:	.short	0xf00b
     268:			; <UNDEFINED> instruction: 0xf9239b12
  bool isHidden() {
    return m_fFile ? m_fFile->isHidden() :
           m_xFile ? m_xFile->isHidden() : false;
  }
  /** \return True if this is an open file/directory else false. */
  bool isOpen() {return m_fFile || m_xFile;}
     26c:	.word	0xd0312b00
		SDFAT_FILE file = sdfatfile.openNextFile();
		if (file) return File(new SDFile(file));
     270:	movs	r0, #104	; 0x68
     272:	.short	0x2600
     274:	bl	f6dc <operator new(unsigned int)>
//#define BYTE 0
//#endif

class __FlashStringHelper;

class Print
     278:	.word	0x3004f89d
     27c:	mov	r4, r0
	// Classes derived from File are never meant to be constructed
	// anywhere other than open() in the parent FS class and
	// openNextFile() while traversing a directory.
	// Only the abstract File class which references these derived
	// classes is meant to have a public constructor!
	SDFile(const SDFAT_FILE &file) : sdfatfile(file), filename(nullptr) { }
     27e:	.short	0x4a1b
     280:	mov.w	r8, #1000	; 0x3e8
/**
 * \class StreamFile
 * \brief StreamFile class.
 */
template<class BaseFile, typename PosType>
class StreamFile : public stream_t, public BaseFile {
     284:	.word	0x76233024
     288:	add	r1, sp, #16
#define Stream_h

#include <inttypes.h>
#include "Print.h"

class Stream : public Print
     28a:	.short	0x9b02
     28c:	str	r2, [r4, #0]
     28e:	.short	0x61e3
     290:	ldr	r2, [pc, #92]	; (2f0 <SDFile::openNextFile(unsigned char)+0xb0>)
     292:	.short	0xf89d
     294:	adds	r0, #12
     296:	.short	0x6162
     298:	strb.w	r3, [r4, #32]
{
  public:
	constexpr Print() : write_error(0) {}
     29c:	.word	0x73267126

#define FILE_WHOAMI

class File : public Stream {
public:
	constexpr File() : f(nullptr) { }
     2a0:	str	r6, [r4, #16]
{
  public:
	constexpr Stream() : _timeout(1000), read_error(0) {}
     2a2:	.short	0xf8c4
     2a4:	strh	r0, [r1, #0]
     2a6:	.short	0xf00b
     2a8:	str??.w	r6, [sp], #-35
	File(File *file) {
     2ac:	ldr	r2, [pc, #68]	; (2f4 <SDFile::openNextFile(unsigned char)+0xb4>)
		// or is_base_of
		//static_assert(std::is_same<decltype(*file),File>::value,
			//"File(File *file) constructor only accepts pointers "
			//"to derived classes, not File itself");
		f = file;
		if (f) f->refcount++;
     2ae:	.short	0x3301
};
/**
 * \class FsFile
 * \brief FsBaseFile file with Arduino Stream.
 */
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
     2b0:	str	r7, [r4, #20]
     2b2:	.short	0x6666
     2b4:	strb	r6, [r5, #4]
     2b6:	.short	0xf8c5
     2b8:	strh	r0, [r1, #0]
     2ba:	.short	0x732e
		// can we use is_same or is_polymorphic with static_assert?
		// or is_base_of
		//static_assert(std::is_same<decltype(*file),File>::value,
			//"File(File *file) constructor only accepts pointers "
			//"to derived classes, not File itself");
		f = file;
     2bc:	str	r4, [r5, #16]
		if (f) f->refcount++;
     2be:	.short	0x6123
#define FILE_WHOAMI

class File : public Stream {
public:
	constexpr File() : f(nullptr) { }
	File(File *file) {
     2c0:	str	r2, [r5, #0]
     2c2:	.short	0x4b0d
 */
class FsBaseFile {
 public:
  FsBaseFile() : m_fFile(nullptr), m_xFile(nullptr) {}

  ~FsBaseFile() {close();}
     2c4:	add	r0, sp, #16
     2c6:	.short	0x9300
     2c8:	bl	b408 <FsBaseFile::close()>
	}
	virtual File openNextFile(uint8_t mode=0) {
		SDFAT_FILE file = sdfatfile.openNextFile();
		if (file) return File(new SDFile(file));
		return File();
	}
     2cc:	.word	0xb0144628
     2d0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  bool isHidden() {
    return m_fFile ? m_fFile->isHidden() :
           m_xFile ? m_xFile->isHidden() : false;
  }
  /** \return True if this is an open file/directory else false. */
  bool isOpen() {return m_fFile || m_xFile;}
     2d4:	.word	0x2b009b13
     2d8:	bne.n	270 <SDFile::openNextFile(unsigned char)+0x30>

#define FILE_WHOAMI

class File : public Stream {
public:
	constexpr File() : f(nullptr) { }
     2da:	.short	0x4a06
     2dc:	strb	r3, [r5, #4]
     2de:	.short	0x60ac
     2e0:	strb	r3, [r5, #12]
     2e2:	.short	0x612b
     2e4:	str	r2, [r5, #0]
     2e6:	b.n	2c2 <SDFile::openNextFile(unsigned char)+0x82>
     2e8:	.word	0x20000050
     2ec:	lsls	r4, r2, #3
     2ee:	.short	0x2000
     2f0:	movs	r0, r1
     2f2:	movs	r0, #0
     2f4:	.word	0x20000074
     2f8:	movs	r4, r5
     2fa:	.short	0x2000

000002fc <DMAChannel::~DMAChannel()>:
	}
	DMAChannel & operator = (const DMASetting &rhs) {
		copy_tcd(TCD, rhs.TCD);
		return *this;
	}
	~DMAChannel() {
     2fc:	push	{r4, lr}
     2fe:	.short	0x4604
		release();
     300:	bl	f534 <DMAChannel::release()>
	}
     304:	.word	0xbd104620

00000308 <StreamFile<FsBaseFile, unsigned long long>::available()>:
  StreamFile() {}

  /** \return number of bytes available from the current position to EOF
   *   or INT_MAX if more than INT_MAX bytes are available.
   */
  int available() {
     308:	ldr	r2, [r0, #72]	; 0x48
  /** \return number of bytes available from the current position to EOF
   *   or INT_MAX if more than INT_MAX bytes are available.
   */
  int available() {
    return m_fFile ? m_fFile->available() :
           m_xFile ? m_xFile->available() : 0;
     30a:	.short	0xb162
  void fsetpos(const fspos_t* pos);
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint32_t available32() {
    return isFile() ? fileSize() - curPosition() : 0;
     30c:	ldrb	r3, [r2, #0]
     30e:	.short	0xf003
     310:	lsls	r0, r1, #12
     312:	.short	0xf003
     314:	lsls	r7, r7, #3
     316:	.short	0xb30b
   * Zero is returned for directory files.
   *
   */
  int available() {
    uint32_t n = available32();
    return n > INT_MAX ? INT_MAX : n;
     318:	ldr	r3, [r2, #28]
     31a:	.short	0x6950
     31c:	subs	r0, r3, r0
     31e:	.short	0xbf48
     320:	mvnmi.w	r0, #2147483648	; 0x80000000
     324:	.word	0x6cc14770
     328:	cbz	r1, 35e <StreamFile<FsBaseFile, unsigned long long>::available()+0x56>
  }
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint64_t available64() {
    return isFile() ? fileSize() - curPosition() : 0;
     32a:	.short	0xf891
     32c:	adds	r0, #49	; 0x31
     32e:	.short	0xf003
     330:	lsls	r0, r1, #12
     332:	and.w	r0, r3, #255	; 0xff
     336:	cbz	r3, 35c <StreamFile<FsBaseFile, unsigned long long>::available()+0x54>
     338:	ldrd	r2, r3, [r1, #16]
     33c:	ldrd	r0, r1, [r1]
     340:	.word	0x1a10b430
     344:	mov.w	r5, #0
     348:	.word	0x4400f06f
     34c:	sbc.w	r1, r3, r1
     350:	cmp	r5, r1
     352:	it	eq
     354:	.word	0xd2004284
     358:	mov	r0, r4
    return BaseFile::available();
  }
     35a:	.short	0xbc30
     35c:	bx	lr	; unpredictable branch in IT block

     35e:	moveq	r0, r1
     360:	bx	lr
     362:	nop

00000364 <StreamFile<FsBaseFile, unsigned long long>::peek()>:
  }
  /** Return the next available byte without consuming it.
   *
   * \return The byte if no error and not at eof else -1;
   */
  int peek() {
     364:	ldr	r3, [r0, #72]	; 0x48
   *
   * \return The byte if no error and not at eof else -1;
   */
  int peek() {
    return m_fFile ? m_fFile->peek() :
           m_xFile ? m_xFile->peek() : -1;
     366:	.short	0xb113
     368:	mov	r0, r3
     36a:	b.w	9e30 <FatFile::peek()>
     36e:	.short	0x6cc0
     370:	cbz	r0, 376 <StreamFile<FsBaseFile, unsigned long long>::peek()+0x12>
     372:	.short	0xf007
     374:	iteet	cc
    return BaseFile::peek();
  }
     376:	movcc.w	r0, #4294967295
     37a:	bxcs	lr	; unpredictable branch in IT block


0000037c <StreamFile<FsBaseFile, unsigned long long>::read()>:
  /** Read the next byte from a file.
   *
   * \return For success return the next byte in the file as an int.
   * If an error occurs or end of file is reached return -1.
   */
  int read() {
     37c:	ldrcs	r3, [r0, #72]	; 0x48
     37e:	pushcc	{lr}
     380:	sub	sp, #12
   * read() called before a file has been opened, corrupt file system
   * or an I/O error occurred.
   */
  int read(void* buf, size_t count) {
    return m_fFile ? m_fFile->read(buf, count) :
           m_xFile ? m_xFile->read(buf, count) : -1;
     382:	cbz	r3, 39e <StreamFile<FsBaseFile, unsigned long long>::read()+0x22>
     384:	mov	r0, r3
     386:	movs	r2, #1
     388:	add.w	r1, sp, #7
     38c:	bl	9c9c <FatFile::read(void*, unsigned int)>
   * \return For success return the next byte in the file as an int.
   * If an error occurs or end of file is reached return -1.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
     390:	cmp	r0, #1
     392:	bne.n	3ae <StreamFile<FsBaseFile, unsigned long long>::read()+0x32>
     394:	.word	0x0007f89d
    return BaseFile::read();
  }
     398:	add	sp, #12
     39a:	.short	0xf85d
     39c:			; <UNDEFINED> instruction: 0xfb046cc0
   * read() called before a file has been opened, corrupt file system
   * or an I/O error occurred.
   */
  int read(void* buf, size_t count) {
    return m_fFile ? m_fFile->read(buf, count) :
           m_xFile ? m_xFile->read(buf, count) : -1;
     3a0:	cbz	r0, 3ae <StreamFile<FsBaseFile, unsigned long long>::read()+0x32>
     3a2:	movs	r2, #1
     3a4:	add.w	r1, sp, #7
     3a8:	bl	8034 <ExFatFile::read(void*, unsigned int)>
     3ac:	b.n	390 <StreamFile<FsBaseFile, unsigned long long>::read()+0x14>
   * \return For success return the next byte in the file as an int.
   * If an error occurs or end of file is reached return -1.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
     3ae:	mov.w	r0, #4294967295
     3b2:	.short	0xe7f1

000003b4 <SDFile::flush()>:
		return sdfatfile.peek();
	}
	virtual int available() {
		return sdfatfile.available();
	}
	virtual void flush() {
     3b4:	ldr	r3, [r0, #92]	; 0x5c
   *
   * \return true for success or false for failure.
   */
  bool sync() {
    return m_fFile ? m_fFile->sync() :
           m_xFile ? m_xFile->sync() : false;
     3b6:	cbz	r3, 3be <SDFile::flush()+0xa>
     3b8:	mov	r0, r3
     3ba:	.short	0xf009
     3bc:	iteet	hi
     3be:	ldrhi	r0, [r0, #96]	; 0x60
     3c0:	cbz	r0, 3c6 <SDFile::flush()+0x12>	; unpredictable <IT:ls>
     3c2:	bls.w	9140 <ExFatFile::sync()>	; unpredictable branch in IT block

     3c6:	bxhi	lr

000003c8 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)>:
  /** Write a byte to a file. Required by the Arduino Print class.
   * \param[in] b the byte to be written.
   * Use getWriteError to check for errors.
   * \return 1 for success and 0 for failure.
   */
  size_t write(uint8_t b) {
     3c8:	push	{lr}
     3ca:	ldr	r3, [r0, #72]	; 0x48
     3cc:	sub	sp, #12
     3ce:	strb.w	r1, [sp, #7]
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const void* buf, size_t count) {
    return m_fFile ? m_fFile->write(buf, count) :
           m_xFile ? m_xFile->write(buf, count) : 0;
     3d2:	cbz	r3, 3e6 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)+0x1e>
     3d4:	mov	r0, r3
     3d6:	movs	r2, #1
     3d8:	add.w	r1, sp, #7
     3dc:	bl	a35c <FatFile::write(void const*, unsigned int)>
    return BaseFile::write(b);
  }
     3e0:	add	sp, #12
     3e2:	.short	0xf85d
     3e4:			; <UNDEFINED> instruction: 0xfb046cc0
     3e8:	cmp	r0, #0
     3ea:	beq.n	3e0 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)+0x18>
     3ec:	movs	r2, #1
     3ee:	add.w	r1, sp, #7
     3f2:	bl	9554 <ExFatFile::write(void const*, unsigned int)>
     3f6:	add	sp, #12
     3f8:	ldr.w	pc, [sp], #4

000003fc <logg(unsigned long, char const*) [clone .part.52]>:
extern uint16_t maxCount;
void logg(uint32_t del, const char *txt)
{ static uint32_t to;
  if(millis()-to > del)
  {
    Serial.printf("%s: %6d %4d %4d %4d %4d %d\n",
     3fc:	ldr	r1, [pc, #84]	; (454 <logg(unsigned long, char const*) [clone .part.52]+0x58>)
            txt,loop_count, acq_count, acq_miss,maxCount, maxDel,state); 
     3fe:	mov	r2, r0
}

/**************** Online logging *******************************/
extern uint32_t loop_count, acq_count, acq_miss, maxDel;
extern uint16_t maxCount;
void logg(uint32_t del, const char *txt)
     400:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
{ static uint32_t to;
  if(millis()-to > del)
  {
    Serial.printf("%s: %6d %4d %4d %4d %4d %d\n",
            txt,loop_count, acq_count, acq_miss,maxCount, maxDel,state); 
     404:	ldrsh.w	r0, [r1]
}

/**************** Online logging *******************************/
extern uint32_t loop_count, acq_count, acq_miss, maxDel;
extern uint16_t maxCount;
void logg(uint32_t del, const char *txt)
     408:	sub	sp, #24
{ static uint32_t to;
  if(millis()-to > del)
  {
    Serial.printf("%s: %6d %4d %4d %4d %4d %d\n",
            txt,loop_count, acq_count, acq_miss,maxCount, maxDel,state); 
     40a:	ldr	r4, [pc, #76]	; (458 <logg(unsigned long, char const*) [clone .part.52]+0x5c>)
extern uint16_t maxCount;
void logg(uint32_t del, const char *txt)
{ static uint32_t to;
  if(millis()-to > del)
  {
    Serial.printf("%s: %6d %4d %4d %4d %4d %d\n",
     40c:	ldr	r5, [pc, #76]	; (45c <logg(unsigned long, char const*) [clone .part.52]+0x60>)
            txt,loop_count, acq_count, acq_miss,maxCount, maxDel,state); 
     40e:	ldr	r6, [pc, #80]	; (460 <logg(unsigned long, char const*) [clone .part.52]+0x64>)
     410:	str	r0, [sp, #16]
     412:	.short	0x6821
     414:	ldr	r0, [r6, #0]
     416:	ldrh.w	lr, [r5]
     41a:	.short	0x4f12
     41c:	str	r0, [sp, #4]
     41e:	str	r1, [sp, #12]
     420:	str.w	lr, [sp, #8]
     424:	.word	0xf8df6839
     428:	strh	r0, [r2, #2]
     42a:	str	r1, [sp, #0]
     42c:	ldr.w	r3, [r8]
     430:	ldr	r1, [pc, #52]	; (468 <logg(unsigned long, char const*) [clone .part.52]+0x6c>)
     432:	ldr	r0, [pc, #56]	; (46c <logg(unsigned long, char const*) [clone .part.52]+0x70>)
     434:	bl	f5ec <Print::printf(char const*, ...)>
     438:	ldr	r1, [pc, #52]	; (470 <logg(unsigned long, char const*) [clone .part.52]+0x74>)
    loop_count=0;
     43a:	.short	0x2300
    acq_count=0;
    acq_miss=0;
    maxCount=0;
    maxDel=0;
    to=millis();
     43c:	ldr	r2, [pc, #52]	; (474 <logg(unsigned long, char const*) [clone .part.52]+0x78>)
     43e:	ldr	r1, [r1, #0]
{ static uint32_t to;
  if(millis()-to > del)
  {
    Serial.printf("%s: %6d %4d %4d %4d %4d %d\n",
            txt,loop_count, acq_count, acq_miss,maxCount, maxDel,state); 
    loop_count=0;
     440:	str.w	r3, [r8]
    acq_count=0;
     444:	str	r3, [r7, #0]
    acq_miss=0;
     446:	str	r3, [r6, #0]
    maxCount=0;
     448:	strh	r3, [r5, #0]
    maxDel=0;
     44a:	str	r3, [r4, #0]
    to=millis();
     44c:	str	r1, [r2, #0]
  }
}
     44e:	add	sp, #24
     450:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     454:	adds	r6, r0, #5
     456:	movs	r0, #0
     458:	asrs	r0, r7, #24
     45a:	movs	r0, #0
     45c:	ldrh	r0, [r0, r4]
     45e:	.short	0x2000
     460:	ldrh	r0, [r1, r4]
     462:	movs	r0, #0
     464:	subs	r4, r7, r0
     466:	movs	r0, #0
     468:	lsls	r0, r2, #6
     46a:	movs	r0, #0
     46c:	lsrs	r0, r3, #17
     46e:	movs	r0, #0
     470:	str	r4, [r0, #36]	; 0x24
     472:	movs	r0, #0
     474:	ldrh	r0, [r2, r4]
     476:	.short	0x2000
     478:	ldrh	r4, [r0, r4]
     47a:	.short	0x2000

0000047c <set_audioClock(int, long, unsigned long, bool) [clone .part.57]>:
      {
          if (!force && (CCM_ANALOG_PLL_AUDIO & CCM_ANALOG_PLL_AUDIO_ENABLE)) return;

          CCM_ANALOG_PLL_AUDIO = CCM_ANALOG_PLL_AUDIO_BYPASS | CCM_ANALOG_PLL_AUDIO_ENABLE
                      | CCM_ANALOG_PLL_AUDIO_POST_DIV_SELECT(2) // 2: 1/4; 1: 1/2; 0: 1/1
                      | CCM_ANALOG_PLL_AUDIO_DIV_SELECT(nfact);
     47c:	and.w	r0, r0, #63	; 0x3f
     480:	ldr	r3, [pc, #68]	; (4c8 <set_audioClock(int, long, unsigned long, bool) [clone .part.57]+0x4c>)

          CCM_ANALOG_PLL_AUDIO_NUM   = nmult & CCM_ANALOG_PLL_AUDIO_NUM_MASK;
          CCM_ANALOG_PLL_AUDIO_DENOM = ndiv & CCM_ANALOG_PLL_AUDIO_DENOM_MASK;
     482:	bic.w	r2, r2, #3758096384	; 0xe0000000

          CCM_ANALOG_PLL_AUDIO = CCM_ANALOG_PLL_AUDIO_BYPASS | CCM_ANALOG_PLL_AUDIO_ENABLE
                      | CCM_ANALOG_PLL_AUDIO_POST_DIV_SELECT(2) // 2: 1/4; 1: 1/2; 0: 1/1
                      | CCM_ANALOG_PLL_AUDIO_DIV_SELECT(nfact);

          CCM_ANALOG_PLL_AUDIO_NUM   = nmult & CCM_ANALOG_PLL_AUDIO_NUM_MASK;
     486:	bic.w	r1, r1, #3758096384	; 0xe0000000
      {
          if (!force && (CCM_ANALOG_PLL_AUDIO & CCM_ANALOG_PLL_AUDIO_ENABLE)) return;

          CCM_ANALOG_PLL_AUDIO = CCM_ANALOG_PLL_AUDIO_BYPASS | CCM_ANALOG_PLL_AUDIO_ENABLE
                      | CCM_ANALOG_PLL_AUDIO_POST_DIV_SELECT(2) // 2: 1/4; 1: 1/2; 0: 1/1
                      | CCM_ANALOG_PLL_AUDIO_DIV_SELECT(nfact);
     48a:	.short	0xf440
     48c:	asrs	r1, r1, #2
  //Teensy 4.x

    #define IMXRT_CACHE_ENABLED 2 // 0=disabled, 1=WT, 2= WB

    /************************* I2S *************************************************/
    void set_audioClock(int nfact, int32_t nmult, uint32_t ndiv, bool force) // sets PLL4
     48e:	push	{r4}
      {
          if (!force && (CCM_ANALOG_PLL_AUDIO & CCM_ANALOG_PLL_AUDIO_ENABLE)) return;

          CCM_ANALOG_PLL_AUDIO = CCM_ANALOG_PLL_AUDIO_BYPASS | CCM_ANALOG_PLL_AUDIO_ENABLE
                      | CCM_ANALOG_PLL_AUDIO_POST_DIV_SELECT(2) // 2: 1/4; 1: 1/2; 0: 1/1
                      | CCM_ANALOG_PLL_AUDIO_DIV_SELECT(nfact);
     490:	str	r0, [r3, #112]	; 0x70

          CCM_ANALOG_PLL_AUDIO_NUM   = nmult & CCM_ANALOG_PLL_AUDIO_NUM_MASK;
          CCM_ANALOG_PLL_AUDIO_DENOM = ndiv & CCM_ANALOG_PLL_AUDIO_DENOM_MASK;
          
          CCM_ANALOG_PLL_AUDIO &= ~CCM_ANALOG_PLL_AUDIO_POWERDOWN;//Switch on PLL
          while (!(CCM_ANALOG_PLL_AUDIO & CCM_ANALOG_PLL_AUDIO_LOCK)) {}; //Wait for pll-lock
     492:	mov	r4, r3

          CCM_ANALOG_PLL_AUDIO = CCM_ANALOG_PLL_AUDIO_BYPASS | CCM_ANALOG_PLL_AUDIO_ENABLE
                      | CCM_ANALOG_PLL_AUDIO_POST_DIV_SELECT(2) // 2: 1/4; 1: 1/2; 0: 1/1
                      | CCM_ANALOG_PLL_AUDIO_DIV_SELECT(nfact);

          CCM_ANALOG_PLL_AUDIO_NUM   = nmult & CCM_ANALOG_PLL_AUDIO_NUM_MASK;
     494:	str.w	r1, [r3, #128]	; 0x80
          CCM_ANALOG_PLL_AUDIO_DENOM = ndiv & CCM_ANALOG_PLL_AUDIO_DENOM_MASK;
     498:	.word	0x2090f8c3
          
          CCM_ANALOG_PLL_AUDIO &= ~CCM_ANALOG_PLL_AUDIO_POWERDOWN;//Switch on PLL
     49c:	ldr	r2, [r3, #112]	; 0x70
     49e:	.short	0xf422
     4a0:	strh	r0, [r0, r2]
     4a2:	.short	0x671a
          while (!(CCM_ANALOG_PLL_AUDIO & CCM_ANALOG_PLL_AUDIO_LOCK)) {}; //Wait for pll-lock
     4a4:	ldr	r3, [r4, #112]	; 0x70
     4a6:	.short	0x4a08
     4a8:	cmp	r3, #0
     4aa:	.short	0xdafb
          
          const int div_post_pll = 1; // other values: 2,4
          CCM_ANALOG_MISC2 &= ~(CCM_ANALOG_MISC2_DIV_MSB | CCM_ANALOG_MISC2_DIV_LSB);
     4ac:	ldr.w	r1, [r2, #368]	; 0x170
     4b0:	ldr	r3, [pc, #24]	; (4cc <set_audioClock(int, long, unsigned long, bool) [clone .part.57]+0x50>)
          if(div_post_pll>1) CCM_ANALOG_MISC2 |= CCM_ANALOG_MISC2_DIV_LSB;
          if(div_post_pll>3) CCM_ANALOG_MISC2 |= CCM_ANALOG_MISC2_DIV_MSB;
          
          CCM_ANALOG_PLL_AUDIO &= ~CCM_ANALOG_PLL_AUDIO_BYPASS;   //Disable Bypass
      }
     4b2:	ldr.w	r4, [sp], #4
          
          CCM_ANALOG_PLL_AUDIO &= ~CCM_ANALOG_PLL_AUDIO_POWERDOWN;//Switch on PLL
          while (!(CCM_ANALOG_PLL_AUDIO & CCM_ANALOG_PLL_AUDIO_LOCK)) {}; //Wait for pll-lock
          
          const int div_post_pll = 1; // other values: 2,4
          CCM_ANALOG_MISC2 &= ~(CCM_ANALOG_MISC2_DIV_MSB | CCM_ANALOG_MISC2_DIV_LSB);
     4b6:	.short	0x400b
     4b8:	str.w	r3, [r2, #368]	; 0x170
          if(div_post_pll>1) CCM_ANALOG_MISC2 |= CCM_ANALOG_MISC2_DIV_LSB;
          if(div_post_pll>3) CCM_ANALOG_MISC2 |= CCM_ANALOG_MISC2_DIV_MSB;
          
          CCM_ANALOG_PLL_AUDIO &= ~CCM_ANALOG_PLL_AUDIO_BYPASS;   //Disable Bypass
     4bc:	.word	0xf4236f13
     4c0:	adds	r3, #128	; 0x80
     4c2:	.short	0x6713
      }
     4c4:	bx	lr
     4c6:	.short	0xbf00
     4c8:	strh	r0, [r0, #0]
     4ca:	.short	0x400d
     4cc:	ldrb	r7, [r7, #31]
     4ce:	.short	0xff7f

000004d0 <acq_init(long) [clone .part.58]>:
      {
          I2S1_RCSR &= ~(I2S_RCSR_RE | I2S_RCSR_BCE);
          //DMA_CERQ = dma.channel;     
      }

      void acq_init(int32_t fsamp)
     4d0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
          //PLL:
          int fs = fsamp;
          int ovr = FRAME_I2S*32;
          // PLL between 27*24 = 648MHz und 54*24=1296MHz
          int n1 = 4;                    //4; //SAI prescaler 4 => (n1*n2) = multiple of 4
          int n2 = 1 + (24000000 * 27) / (fs * ovr * n1);
     4d4:	lsls	r1, r0, #8
     4d6:	ldr	r5, [pc, #480]	; (6b8 <acq_init(long) [clone .part.58]+0x1e8>)
          Serial.printf("fs=%d, n1=%d, n2=%d, %d (>27 && < 54)\r\n", 
                        fs, n1,n2,n1*n2*(fs/1000)*ovr/24000);
     4d8:	.word	0xb0834c78
     4dc:	ldr.w	lr, [pc, #564]	; 714 <acq_init(long) [clone .part.58]+0x244>
      {
          I2S1_RCSR &= ~(I2S_RCSR_RE | I2S_RCSR_BCE);
          //DMA_CERQ = dma.channel;     
      }

      void acq_init(int32_t fsamp)
     4e0:	mov	r6, r0
          int ovr = FRAME_I2S*32;
          // PLL between 27*24 = 648MHz und 54*24=1296MHz
          int n1 = 4;                    //4; //SAI prescaler 4 => (n1*n2) = multiple of 4
          int n2 = 1 + (24000000 * 27) / (fs * ovr * n1);
          Serial.printf("fs=%d, n1=%d, n2=%d, %d (>27 && < 54)\r\n", 
                        fs, n1,n2,n1*n2*(fs/1000)*ovr/24000);
     4e2:	smull	r2, r4, r4, r0
     4e6:	asrs	r2, r0, #31
     4e8:	.word	0xf2422304
     4ec:	ldrb	r0, [r2, #0]
          I2S1_RCR2 = I2S_RCR2_SYNC(0) | I2S_TCR2_BCP | I2S_RCR2_MSEL(1)
              | I2S_RCR2_BCD | I2S_RCR2_DIV(0);
          
          I2S1_RCR4 = I2S_RCR4_FRSZ((FRAME_I2S-1)) | I2S_RCR4_SYWD(0) | I2S_RCR4_MF
              | I2S_RCR4_FSE | I2S_RCR4_FSD;
          I2S1_RCR5 = I2S_RCR5_WNW(31) | I2S_RCR5_W0W(31) | I2S_RCR5_FBT(31);
     4ee:	.short	0xf8df
     4f0:	str	r2, [sp, #160]	; 0xa0
          //PLL:
          int fs = fsamp;
          int ovr = FRAME_I2S*32;
          // PLL between 27*24 = 648MHz und 54*24=1296MHz
          int n1 = 4;                    //4; //SAI prescaler 4 => (n1*n2) = multiple of 4
          int n2 = 1 + (24000000 * 27) / (fs * ovr * n1);
     4f2:	sdiv	r5, r5, r1
     4f6:	.short	0x1c6f
          Serial.printf("fs=%d, n1=%d, n2=%d, %d (>27 && < 54)\r\n", 
                        fs, n1,n2,n1*n2*(fs/1000)*ovr/24000);
     4f8:	rsb	r1, r2, r4, asr #6
     4fc:	.word	0x48704602
     500:	lsls	r4, r7, #2
     502:	.short	0x9700

          n1 = n1 / 2; //Double Speed for TDM

          CCM_CS1CDR = (CCM_CS1CDR & ~(CCM_CS1CDR_SAI1_CLK_PRED_MASK | CCM_CS1CDR_SAI1_CLK_PODF_MASK))
              | CCM_CS1CDR_SAI1_CLK_PRED((n1-1)) // &0x07
              | CCM_CS1CDR_SAI1_CLK_PODF((n2-1)); // &0x3f
     504:	and.w	r5, r5, #63	; 0x3f
          int ovr = FRAME_I2S*32;
          // PLL between 27*24 = 648MHz und 54*24=1296MHz
          int n1 = 4;                    //4; //SAI prescaler 4 => (n1*n2) = multiple of 4
          int n2 = 1 + (24000000 * 27) / (fs * ovr * n1);
          Serial.printf("fs=%d, n1=%d, n2=%d, %d (>27 && < 54)\r\n", 
                        fs, n1,n2,n1*n2*(fs/1000)*ovr/24000);
     508:	mul.w	r4, r1, r4
     50c:	ldr	r1, [pc, #436]	; (6c4 <acq_init(long) [clone .part.58]+0x1f4>)
     50e:	.short	0x01a4
     510:	smull	ip, lr, lr, r4
     514:	.word	0xebc417e4
     518:	movs	r4, #110	; 0x6e
     51a:	.short	0x9401
     51c:	bl	f5ec <Print::printf(char const*, ...)>

          double C = ((double)fs * ovr * n1 * n2) / 24000000;
     520:	.word	0xf00f4630
     524:	smmla	r2, r5, r0, r2
     528:	ldr	r3, [pc, #412]	; (6c8 <acq_init(long) [clone .part.58]+0x1f8>)
     52a:	.short	0xf00f
     52c:			; <UNDEFINED> instruction: 0xfbb72200
     530:	.word	0xf00f4b66
     534:			; <UNDEFINED> instruction: 0xfbb34682
     538:	.word	0x4638468b
     53c:	bl	fbd0 <__aeabi_i2d>
     540:	.word	0x460b4602
     544:	mov	r0, sl
     546:	.short	0x4659
     548:	bl	fc9c <__aeabi_dmul>
     54c:	.word	0xe9d3a356
     550:	movs	r3, #0
     552:	bl	fef0 <__aeabi_ddiv>
     556:	mov	r6, r0
     558:	mov	r7, r1
          int c0 = C;
     55a:	.short	0xf00f
     55c:	cdp2	6, 4, cr4, cr15, cr4, {0}
     560:	.word	0x46394630
     564:	add	r3, pc, #328	; (adr r3, 6b0 <acq_init(long) [clone .part.58]+0x1e0>)
     566:	.short	0xe9d3
     568:	movs	r3, #0
     56a:	.short	0xf00f
     56c:			; <UNDEFINED> instruction: 0xfb974606
     570:	mov	r7, r1
     572:	mul.w	r0, r8, r4
     576:	.short	0xf00f
     578:	smlad	r6, fp, fp, r4
     57c:	.word	0x46394602
     580:	mov	r0, r6

          CCM_CS1CDR = (CCM_CS1CDR & ~(CCM_CS1CDR_SAI1_CLK_PRED_MASK | CCM_CS1CDR_SAI1_CLK_PODF_MASK))
              | CCM_CS1CDR_SAI1_CLK_PRED((n1-1)) // &0x07
              | CCM_CS1CDR_SAI1_CLK_PODF((n2-1)); // &0x3f

          IOMUXC_GPR_GPR1 = (IOMUXC_GPR_GPR1 & ~(IOMUXC_GPR_GPR1_SAI1_MCLK1_SEL_MASK))
     582:	.short	0x4f53
     584:	bl	f934 <__aeabi_dsub>
                  | (IOMUXC_GPR_GPR1_SAI1_MCLK_DIR | IOMUXC_GPR_GPR1_SAI1_MCLK1_SEL(0));	//Select MCLK

          I2S1_RMR = 0;
     588:	movs	r6, #0
     58a:	bl	101fc <__aeabi_d2iz>
     58e:	mov	r2, r8
     590:	mov	r1, r0
     592:	.short	0x4620
     594:	bl	47c <set_audioClock(int, long, unsigned long, bool) [clone .part.57]>
          int c2 = 10000;
          int c1 = C * c2 - (c0 * c2);
          set_audioClock(c0, c1, c2, true);

          // clear SAI1_CLK register locations
          CCM_CSCMR1 = (CCM_CSCMR1 & ~(CCM_CSCMR1_SAI1_CLK_SEL_MASK))
     598:	.word	0xe180f8df

          n1 = n1 / 2; //Double Speed for TDM

          CCM_CS1CDR = (CCM_CS1CDR & ~(CCM_CS1CDR_SAI1_CLK_PRED_MASK | CCM_CS1CDR_SAI1_CLK_PODF_MASK))
              | CCM_CS1CDR_SAI1_CLK_PRED((n1-1)) // &0x07
              | CCM_CS1CDR_SAI1_CLK_PODF((n2-1)); // &0x3f
     59c:	ldr	r1, [pc, #308]	; (6d4 <acq_init(long) [clone .part.58]+0x204>)

          IOMUXC_GPR_GPR1 = (IOMUXC_GPR_GPR1 & ~(IOMUXC_GPR_GPR1_SAI1_MCLK1_SEL_MASK))
                  | (IOMUXC_GPR_GPR1_SAI1_MCLK_DIR | IOMUXC_GPR_GPR1_SAI1_MCLK1_SEL(0));	//Select MCLK

          I2S1_RMR = 0;
          I2S1_RCR1 = I2S_RCR1_RFW(4);
     59e:	.short	0x2404
          int c2 = 10000;
          int c1 = C * c2 - (c0 * c2);
          set_audioClock(c0, c1, c2, true);

          // clear SAI1_CLK register locations
          CCM_CSCMR1 = (CCM_CSCMR1 & ~(CCM_CSCMR1_SAI1_CLK_SEL_MASK))
     5a0:	ldr.w	r0, [lr, #28]
                  | (IOMUXC_GPR_GPR1_SAI1_MCLK_DIR | IOMUXC_GPR_GPR1_SAI1_MCLK1_SEL(0));	//Select MCLK

          I2S1_RMR = 0;
          I2S1_RCR1 = I2S_RCR1_RFW(4);
          I2S1_RCR2 = I2S_RCR2_SYNC(0) | I2S_TCR2_BCP | I2S_RCR2_MSEL(1)
              | I2S_RCR2_BCD | I2S_RCR2_DIV(0);
     5a4:	mov.w	ip, #117440512	; 0x7000000
          CCM_CS1CDR = (CCM_CS1CDR & ~(CCM_CS1CDR_SAI1_CLK_PRED_MASK | CCM_CS1CDR_SAI1_CLK_PODF_MASK))
              | CCM_CS1CDR_SAI1_CLK_PRED((n1-1)) // &0x07
              | CCM_CS1CDR_SAI1_CLK_PODF((n2-1)); // &0x3f

          IOMUXC_GPR_GPR1 = (IOMUXC_GPR_GPR1 & ~(IOMUXC_GPR_GPR1_SAI1_MCLK1_SEL_MASK))
                  | (IOMUXC_GPR_GPR1_SAI1_MCLK_DIR | IOMUXC_GPR_GPR1_SAI1_MCLK1_SEL(0));	//Select MCLK
     5a8:	.word	0xf4204b4b
          int c1 = C * c2 - (c0 * c2);
          set_audioClock(c0, c1, c2, true);

          // clear SAI1_CLK register locations
          CCM_CSCMR1 = (CCM_CSCMR1 & ~(CCM_CSCMR1_SAI1_CLK_SEL_MASK))
              | CCM_CSCMR1_SAI1_CLK_SEL(2); // &0x03 // (0,1,2): PLL3PFD0, PLL5, PLL4
     5ac:	str	r0, [r0, #4]
              | CCM_CS1CDR_SAI1_CLK_PODF((n2-1)); // &0x3f

          IOMUXC_GPR_GPR1 = (IOMUXC_GPR_GPR1 & ~(IOMUXC_GPR_GPR1_SAI1_MCLK1_SEL_MASK))
                  | (IOMUXC_GPR_GPR1_SAI1_MCLK_DIR | IOMUXC_GPR_GPR1_SAI1_MCLK1_SEL(0));	//Select MCLK

          I2S1_RMR = 0;
     5ae:	ldr	r2, [pc, #300]	; (6dc <acq_init(long) [clone .part.58]+0x20c>)
          I2S1_RCR1 = I2S_RCR1_RFW(4);
          I2S1_RCR2 = I2S_RCR2_SYNC(0) | I2S_TCR2_BCP | I2S_RCR2_MSEL(1)
              | I2S_RCR2_BCD | I2S_RCR2_DIV(0);
          
          I2S1_RCR4 = I2S_RCR4_FRSZ((FRAME_I2S-1)) | I2S_RCR4_SYWD(0) | I2S_RCR4_MF
              | I2S_RCR4_FSE | I2S_RCR4_FSD;
     5b0:	.word	0x816cf8df
          int c1 = C * c2 - (c0 * c2);
          set_audioClock(c0, c1, c2, true);

          // clear SAI1_CLK register locations
          CCM_CSCMR1 = (CCM_CSCMR1 & ~(CCM_CSCMR1_SAI1_CLK_SEL_MASK))
              | CCM_CSCMR1_SAI1_CLK_SEL(2); // &0x03 // (0,1,2): PLL3PFD0, PLL5, PLL4
     5b4:	orr.w	r0, r0, #2048	; 0x800
     5b8:	.word	0x001cf8ce

          n1 = n1 / 2; //Double Speed for TDM

          CCM_CS1CDR = (CCM_CS1CDR & ~(CCM_CS1CDR_SAI1_CLK_PRED_MASK | CCM_CS1CDR_SAI1_CLK_PODF_MASK))
     5bc:	ldr.w	r0, [lr, #40]	; 0x28
              | CCM_CS1CDR_SAI1_CLK_PRED((n1-1)) // &0x07
              | CCM_CS1CDR_SAI1_CLK_PODF((n2-1)); // &0x3f
     5c0:	.word	0xf0414001
     5c4:	lsls	r0, r0, #5
     5c6:	.short	0x430d
          
          I2S1_RCR4 = I2S_RCR4_FRSZ((FRAME_I2S-1)) | I2S_RCR4_SYWD(0) | I2S_RCR4_MF
              | I2S_RCR4_FSE | I2S_RCR4_FSD;
          I2S1_RCR5 = I2S_RCR5_WNW(31) | I2S_RCR5_W0W(31) | I2S_RCR5_FBT(31);

        	CORE_PIN23_CONFIG = 3;  //1:MCLK 
     5c8:	movs	r1, #3

          n1 = n1 / 2; //Double Speed for TDM

          CCM_CS1CDR = (CCM_CS1CDR & ~(CCM_CS1CDR_SAI1_CLK_PRED_MASK | CCM_CS1CDR_SAI1_CLK_PODF_MASK))
              | CCM_CS1CDR_SAI1_CLK_PRED((n1-1)) // &0x07
              | CCM_CS1CDR_SAI1_CLK_PODF((n2-1)); // &0x3f
     5ca:	.short	0xf8ce
     5cc:	str	r0, [r5, r0]
          dma.TCD->SLAST = 0;
#elif N_ADC==2
          I2S1_RCR3 = I2S_RCR3_RCE_2CH;
          CORE_PIN8_CONFIG  = 3;  //RX_DATA0
          CORE_PIN6_CONFIG  = 3;  //RX_DATA1
          IOMUXC_SAI1_RX_DATA0_SELECT_INPUT = 2; // GPIO_B1_00_ALT3, pg 873
     5ce:	mov.w	lr, #2

          CCM_CS1CDR = (CCM_CS1CDR & ~(CCM_CS1CDR_SAI1_CLK_PRED_MASK | CCM_CS1CDR_SAI1_CLK_PODF_MASK))
              | CCM_CS1CDR_SAI1_CLK_PRED((n1-1)) // &0x07
              | CCM_CS1CDR_SAI1_CLK_PODF((n2-1)); // &0x3f

          IOMUXC_GPR_GPR1 = (IOMUXC_GPR_GPR1 & ~(IOMUXC_GPR_GPR1_SAI1_MCLK1_SEL_MASK))
     5d2:	ldr	r0, [r7, #4]
#elif N_ADC==2
          I2S1_RCR3 = I2S_RCR3_RCE_2CH;
          CORE_PIN8_CONFIG  = 3;  //RX_DATA0
          CORE_PIN6_CONFIG  = 3;  //RX_DATA1
          IOMUXC_SAI1_RX_DATA0_SELECT_INPUT = 2; // GPIO_B1_00_ALT3, pg 873
          IOMUXC_SAI1_RX_DATA1_SELECT_INPUT = 1; // GPIO_B0_10_ALT3, pg 873
     5d4:	movs	r5, #1
          CCM_CS1CDR = (CCM_CS1CDR & ~(CCM_CS1CDR_SAI1_CLK_PRED_MASK | CCM_CS1CDR_SAI1_CLK_PODF_MASK))
              | CCM_CS1CDR_SAI1_CLK_PRED((n1-1)) // &0x07
              | CCM_CS1CDR_SAI1_CLK_PODF((n2-1)); // &0x3f

          IOMUXC_GPR_GPR1 = (IOMUXC_GPR_GPR1 & ~(IOMUXC_GPR_GPR1_SAI1_MCLK1_SEL_MASK))
                  | (IOMUXC_GPR_GPR1_SAI1_MCLK_DIR | IOMUXC_GPR_GPR1_SAI1_MCLK1_SEL(0));	//Select MCLK
     5d6:	.short	0x4003
     5d8:	orr.w	r0, r3, #524288	; 0x80000
          
          I2S1_RCR4 = I2S_RCR4_FRSZ((FRAME_I2S-1)) | I2S_RCR4_SYWD(0) | I2S_RCR4_MF
              | I2S_RCR4_FSE | I2S_RCR4_FSD;
          I2S1_RCR5 = I2S_RCR5_WNW(31) | I2S_RCR5_W0W(31) | I2S_RCR5_FBT(31);

        	CORE_PIN23_CONFIG = 3;  //1:MCLK 
     5dc:	.word	0x60784b40
          dma.TCD->SOFF = 0;
          dma.TCD->ATTR = DMA_TCD_ATTR_SSIZE(2) | DMA_TCD_ATTR_DSIZE(2);
          dma.TCD->NBYTES_MLNO = 4;
          dma.TCD->SLAST = 0;
#elif N_ADC==2
          I2S1_RCR3 = I2S_RCR3_RCE_2CH;
     5e0:	mov.w	r0, #196608	; 0x30000
              | CCM_CS1CDR_SAI1_CLK_PODF((n2-1)); // &0x3f

          IOMUXC_GPR_GPR1 = (IOMUXC_GPR_GPR1 & ~(IOMUXC_GPR_GPR1_SAI1_MCLK1_SEL_MASK))
                  | (IOMUXC_GPR_GPR1_SAI1_MCLK_DIR | IOMUXC_GPR_GPR1_SAI1_MCLK1_SEL(0));	//Select MCLK

          I2S1_RMR = 0;
     5e4:	.word	0x60e0f8c2
          dma.TCD->SLAST = 0;
#elif N_ADC==2
          I2S1_RCR3 = I2S_RCR3_RCE_2CH;
          CORE_PIN8_CONFIG  = 3;  //RX_DATA0
          CORE_PIN6_CONFIG  = 3;  //RX_DATA1
          IOMUXC_SAI1_RX_DATA0_SELECT_INPUT = 2; // GPIO_B1_00_ALT3, pg 873
     5e8:	add.w	r7, r7, #1359872	; 0x14c000

          IOMUXC_GPR_GPR1 = (IOMUXC_GPR_GPR1 & ~(IOMUXC_GPR_GPR1_SAI1_MCLK1_SEL_MASK))
                  | (IOMUXC_GPR_GPR1_SAI1_MCLK_DIR | IOMUXC_GPR_GPR1_SAI1_MCLK1_SEL(0));	//Select MCLK

          I2S1_RMR = 0;
          I2S1_RCR1 = I2S_RCR1_RFW(4);
     5ec:	.word	0x408cf8c2
          I2S1_RCR2 = I2S_RCR2_SYNC(0) | I2S_TCR2_BCP | I2S_RCR2_MSEL(1)
              | I2S_RCR2_BCD | I2S_RCR2_DIV(0);
     5f0:	str.w	ip, [r2, #144]	; 0x90
          dma.TCD->SLAST = 0;
#elif N_ADC==2
          I2S1_RCR3 = I2S_RCR3_RCE_2CH;
          CORE_PIN8_CONFIG  = 3;  //RX_DATA0
          CORE_PIN6_CONFIG  = 3;  //RX_DATA1
          IOMUXC_SAI1_RX_DATA0_SELECT_INPUT = 2; // GPIO_B1_00_ALT3, pg 873
     5f4:	.word	0x6780f507
          I2S1_RCR1 = I2S_RCR1_RFW(4);
          I2S1_RCR2 = I2S_RCR2_SYNC(0) | I2S_TCR2_BCP | I2S_RCR2_MSEL(1)
              | I2S_RCR2_BCD | I2S_RCR2_DIV(0);
          
          I2S1_RCR4 = I2S_RCR4_FRSZ((FRAME_I2S-1)) | I2S_RCR4_SYWD(0) | I2S_RCR4_MF
              | I2S_RCR4_FSE | I2S_RCR4_FSD;
     5f8:	str.w	r8, [r2, #152]	; 0x98
          dma.TCD->SOFF = 4;
          dma.TCD->ATTR = DMA_TCD_ATTR_SSIZE(2) | DMA_TCD_ATTR_DSIZE(2);
          dma.TCD->NBYTES_MLOFFYES = DMA_TCD_NBYTES_SMLOE |
              DMA_TCD_NBYTES_MLOFFYES_MLOFF(-8) |
              DMA_TCD_NBYTES_MLOFFYES_NBYTES(8);
          dma.TCD->SLAST = -8;
     5fc:	.word	0x0c07f06f
          I2S1_RCR2 = I2S_RCR2_SYNC(0) | I2S_TCR2_BCP | I2S_RCR2_MSEL(1)
              | I2S_RCR2_BCD | I2S_RCR2_DIV(0);
          
          I2S1_RCR4 = I2S_RCR4_FRSZ((FRAME_I2S-1)) | I2S_RCR4_SYWD(0) | I2S_RCR4_MF
              | I2S_RCR4_FSE | I2S_RCR4_FSD;
          I2S1_RCR5 = I2S_RCR5_WNW(31) | I2S_RCR5_W0W(31) | I2S_RCR5_FBT(31);
     600:	str.w	r9, [r2, #156]	; 0x9c
          IOMUXC_SAI1_RX_DATA0_SELECT_INPUT = 2; // GPIO_B1_00_ALT3, pg 873
          IOMUXC_SAI1_RX_DATA1_SELECT_INPUT = 1; // GPIO_B0_10_ALT3, pg 873

          dma.TCD->SADDR = &I2S1_RDR0;
          dma.TCD->SOFF = 4;
          dma.TCD->ATTR = DMA_TCD_ATTR_SSIZE(2) | DMA_TCD_ATTR_DSIZE(2);
     604:	.word	0x2802f240
          
          I2S1_RCR4 = I2S_RCR4_FRSZ((FRAME_I2S-1)) | I2S_RCR4_SYWD(0) | I2S_RCR4_MF
              | I2S_RCR4_FSE | I2S_RCR4_FSD;
          I2S1_RCR5 = I2S_RCR5_WNW(31) | I2S_RCR5_W0W(31) | I2S_RCR5_FBT(31);

        	CORE_PIN23_CONFIG = 3;  //1:MCLK 
     608:	str.w	r1, [r3, #288]	; 0x120
          CORE_PIN21_CONFIG = 3;  //1:RX_BCLK
     60c:	.word	0x1128f8c3
          CORE_PIN20_CONFIG = 3;  //1:RX_SYNC
     610:	str.w	r1, [r3, #292]	; 0x124
          dma.TCD->SOFF = 0;
          dma.TCD->ATTR = DMA_TCD_ATTR_SSIZE(2) | DMA_TCD_ATTR_DSIZE(2);
          dma.TCD->NBYTES_MLNO = 4;
          dma.TCD->SLAST = 0;
#elif N_ADC==2
          I2S1_RCR3 = I2S_RCR3_RCE_2CH;
     614:	.word	0x0094f8c2
          CORE_PIN8_CONFIG  = 3;  //RX_DATA0
          CORE_PIN6_CONFIG  = 3;  //RX_DATA1
          IOMUXC_SAI1_RX_DATA0_SELECT_INPUT = 2; // GPIO_B1_00_ALT3, pg 873
          IOMUXC_SAI1_RX_DATA1_SELECT_INPUT = 1; // GPIO_B0_10_ALT3, pg 873

          dma.TCD->SADDR = &I2S1_RDR0;
     618:	ldr	r0, [pc, #200]	; (6e4 <acq_init(long) [clone .part.58]+0x214>)
          dma.TCD->ATTR = DMA_TCD_ATTR_SSIZE(2) | DMA_TCD_ATTR_DSIZE(2);
          dma.TCD->NBYTES_MLNO = 4;
          dma.TCD->SLAST = 0;
#elif N_ADC==2
          I2S1_RCR3 = I2S_RCR3_RCE_2CH;
          CORE_PIN8_CONFIG  = 3;  //RX_DATA0
     61a:	str.w	r1, [r3, #380]	; 0x17c
          CORE_PIN6_CONFIG  = 3;  //RX_DATA1
     61e:	str.w	r1, [r3, #356]	; 0x164
          IOMUXC_SAI1_RX_DATA0_SELECT_INPUT = 2; // GPIO_B1_00_ALT3, pg 873
          IOMUXC_SAI1_RX_DATA1_SELECT_INPUT = 1; // GPIO_B0_10_ALT3, pg 873

          dma.TCD->SADDR = &I2S1_RDR0;
     622:	ldr	r3, [r0, #0]
     624:	ldr	r1, [pc, #192]	; (6e8 <acq_init(long) [clone .part.58]+0x218>)
          dma.TCD->SLAST = 0;
#elif N_ADC==2
          I2S1_RCR3 = I2S_RCR3_RCE_2CH;
          CORE_PIN8_CONFIG  = 3;  //RX_DATA0
          CORE_PIN6_CONFIG  = 3;  //RX_DATA1
          IOMUXC_SAI1_RX_DATA0_SELECT_INPUT = 2; // GPIO_B1_00_ALT3, pg 873
     626:	str.w	lr, [r7, #404]	; 0x194
          dma.TCD->DADDR = tdm_rx_buffer;
          dma.TCD->DOFF = 4;
          dma.TCD->CITER_ELINKNO = NBUF_I2S;
          dma.TCD->DLASTSGA = -sizeof(tdm_rx_buffer);
          dma.TCD->BITER_ELINKNO = NBUF_I2S;
          dma.TCD->CSR = DMA_TCD_CSR_INTHALF | DMA_TCD_CSR_INTMAJOR;
     62a:	mov.w	lr, #6
#elif N_ADC==2
          I2S1_RCR3 = I2S_RCR3_RCE_2CH;
          CORE_PIN8_CONFIG  = 3;  //RX_DATA0
          CORE_PIN6_CONFIG  = 3;  //RX_DATA1
          IOMUXC_SAI1_RX_DATA0_SELECT_INPUT = 2; // GPIO_B1_00_ALT3, pg 873
          IOMUXC_SAI1_RX_DATA1_SELECT_INPUT = 1; // GPIO_B0_10_ALT3, pg 873
     62e:	str.w	r5, [r7, #408]	; 0x198
              DMA_TCD_NBYTES_MLOFFYES_NBYTES(8);
          dma.TCD->SLAST = -8;
#endif
          dma.TCD->DADDR = tdm_rx_buffer;
          dma.TCD->DOFF = 4;
          dma.TCD->CITER_ELINKNO = NBUF_I2S;
     632:	.short	0xf44f
     634:	strb	r0, [r0, #28]
          CORE_PIN8_CONFIG  = 3;  //RX_DATA0
          CORE_PIN6_CONFIG  = 3;  //RX_DATA1
          IOMUXC_SAI1_RX_DATA0_SELECT_INPUT = 2; // GPIO_B1_00_ALT3, pg 873
          IOMUXC_SAI1_RX_DATA1_SELECT_INPUT = 1; // GPIO_B0_10_ALT3, pg 873

          dma.TCD->SADDR = &I2S1_RDR0;
     636:	.short	0x6019
          dma.TCD->NBYTES_MLOFFYES = DMA_TCD_NBYTES_SMLOE |
              DMA_TCD_NBYTES_MLOFFYES_MLOFF(-8) |
              DMA_TCD_NBYTES_MLOFFYES_NBYTES(8);
          dma.TCD->SLAST = -8;
#endif
          dma.TCD->DADDR = tdm_rx_buffer;
     638:	ldr	r1, [pc, #176]	; (6ec <acq_init(long) [clone .part.58]+0x21c>)
          CORE_PIN6_CONFIG  = 3;  //RX_DATA1
          IOMUXC_SAI1_RX_DATA0_SELECT_INPUT = 2; // GPIO_B1_00_ALT3, pg 873
          IOMUXC_SAI1_RX_DATA1_SELECT_INPUT = 1; // GPIO_B0_10_ALT3, pg 873

          dma.TCD->SADDR = &I2S1_RDR0;
          dma.TCD->SOFF = 4;
     63a:	.short	0x809c
          dma.TCD->NBYTES_MLOFFYES = DMA_TCD_NBYTES_SMLOE |
              DMA_TCD_NBYTES_MLOFFYES_MLOFF(-8) |
              DMA_TCD_NBYTES_MLOFFYES_NBYTES(8);
          dma.TCD->SLAST = -8;
#endif
          dma.TCD->DADDR = tdm_rx_buffer;
     63c:	str	r1, [r3, #16]
          dma.TCD->SADDR = &I2S1_RDR0;
          dma.TCD->SOFF = 4;
          dma.TCD->ATTR = DMA_TCD_ATTR_SSIZE(2) | DMA_TCD_ATTR_DSIZE(2);
          dma.TCD->NBYTES_MLOFFYES = DMA_TCD_NBYTES_SMLOE |
              DMA_TCD_NBYTES_MLOFFYES_MLOFF(-8) |
              DMA_TCD_NBYTES_MLOFFYES_NBYTES(8);
     63e:	.short	0x492c
          dma.TCD->SLAST = -8;
#endif
          dma.TCD->DADDR = tdm_rx_buffer;
          dma.TCD->DOFF = 4;
          dma.TCD->CITER_ELINKNO = NBUF_I2S;
     640:	strh	r7, [r3, #22]
          dma.TCD->SADDR = &I2S1_RDR0;
          dma.TCD->SOFF = 4;
          dma.TCD->ATTR = DMA_TCD_ATTR_SSIZE(2) | DMA_TCD_ATTR_DSIZE(2);
          dma.TCD->NBYTES_MLOFFYES = DMA_TCD_NBYTES_SMLOE |
              DMA_TCD_NBYTES_MLOFFYES_MLOFF(-8) |
              DMA_TCD_NBYTES_MLOFFYES_NBYTES(8);
     642:	.short	0x6099
          dma.TCD->SLAST = -8;
#endif
          dma.TCD->DADDR = tdm_rx_buffer;
          dma.TCD->DOFF = 4;
          dma.TCD->CITER_ELINKNO = NBUF_I2S;
          dma.TCD->DLASTSGA = -sizeof(tdm_rx_buffer);
     644:	ldr	r1, [pc, #172]	; (6f4 <acq_init(long) [clone .part.58]+0x224>)
          dma.TCD->BITER_ELINKNO = NBUF_I2S;
     646:	.short	0x83df
	}

	void attachInterrupt(void (*isr)(void), uint8_t prio) {
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
		NVIC_SET_PRIORITY(IRQ_DMA_CH0 + channel, prio);
     648:	movs	r7, #96	; 0x60
              DMA_TCD_NBYTES_MLOFFYES_MLOFF(-8) |
              DMA_TCD_NBYTES_MLOFFYES_NBYTES(8);
          dma.TCD->SLAST = -8;
#endif
          dma.TCD->DADDR = tdm_rx_buffer;
          dma.TCD->DOFF = 4;
     64a:	.short	0x829c
          IOMUXC_SAI1_RX_DATA0_SELECT_INPUT = 2; // GPIO_B1_00_ALT3, pg 873
          IOMUXC_SAI1_RX_DATA1_SELECT_INPUT = 1; // GPIO_B0_10_ALT3, pg 873

          dma.TCD->SADDR = &I2S1_RDR0;
          dma.TCD->SOFF = 4;
          dma.TCD->ATTR = DMA_TCD_ATTR_SSIZE(2) | DMA_TCD_ATTR_DSIZE(2);
     64c:	strh.w	r8, [r3, #6]
	// trigger moves a single data unit, which is typically 8, 16 or
	// 32 bits.  If a channel is configured for 200 transfers

	// Use a hardware trigger to make the DMA channel run
	void triggerAtHardwareEvent(uint8_t source) {
		volatile uint32_t *mux = &DMAMUX_CHCFG0 + channel;
     650:	.word	0xf8c37904
          dma.TCD->NBYTES_MLOFFYES = DMA_TCD_NBYTES_SMLOE |
              DMA_TCD_NBYTES_MLOFFYES_MLOFF(-8) |
              DMA_TCD_NBYTES_MLOFFYES_NBYTES(8);
          dma.TCD->SLAST = -8;
     654:	stmia	r0!, {r2, r3}
#endif
          dma.TCD->DADDR = tdm_rx_buffer;
          dma.TCD->DOFF = 4;
          dma.TCD->CITER_ELINKNO = NBUF_I2S;
          dma.TCD->DLASTSGA = -sizeof(tdm_rx_buffer);
     656:	.short	0x6199
          dma.TCD->BITER_ELINKNO = NBUF_I2S;
          dma.TCD->CSR = DMA_TCD_CSR_INTHALF | DMA_TCD_CSR_INTMAJOR;
     658:	strh.w	lr, [r3, #28]
     65c:	.word	0x4b274926
		//mux = (volatile uint32_t *)&(DMAMUX_CHCFG0) + channel;
		*mux = 0;
     660:	str.w	r6, [r1, r4, lsl #2]
		*mux = (source & 0x7F) | DMAMUX_CHCFG_ENBL;
     664:	.word	0x3024f841
     668:	ldrb	r3, [r0, #4]
	/***************************************/
	/**    Enable / Disable               **/
	/***************************************/

	void enable(void) {
		DMA_SERQ = channel;
     66a:	.short	0x4e25
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
	}

	void attachInterrupt(void (*isr)(void), uint8_t prio) {
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
     66c:	and.w	r1, r3, #31
          dma.triggerAtHardwareEvent(DMAMUX_SOURCE_SAI1_RX);
          dma.enable();

          I2S1_RCSR =  I2S_RCSR_FRDE | I2S_RCSR_FR;
     670:	.word	0x76f34c24
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
	}

	void attachInterrupt(void (*isr)(void), uint8_t prio) {
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
     674:	add.w	r6, r3, #16
     678:	.word	0x4088f8c2
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
     67c:	lsls	r5, r1
     67e:	.short	0x115b
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
	}

	void attachInterrupt(void (*isr)(void), uint8_t prio) {
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
     680:	ldr	r1, [pc, #132]	; (708 <acq_init(long) [clone .part.58]+0x238>)
     682:	.short	0xf8df
     684:	b.n	7c8 <SDClass::rename(char const*, char const*)+0x3c>
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
     686:	.short	0x4c21
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
	}

	void attachInterrupt(void (*isr)(void), uint8_t prio) {
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
     688:	str.w	lr, [r1, r6, lsl #2]
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
     68c:	.word	0x5023f844
		NVIC_SET_PRIORITY(IRQ_DMA_CH0 + channel, prio);
     690:	ldr	r1, [pc, #124]	; (710 <acq_init(long) [clone .part.58]+0x240>)
     692:	.short	0x7903
     694:	strb	r7, [r3, r1]
      }

      void acq_start(void)
      {
          //DMA_SERQ = dma.channel;
          I2S1_RCSR |= (I2S_RCSR_RE | I2S_RCSR_BCE);
     696:	.short	0xf8d2
     698:	adds	r0, #136	; 0x88
     69a:	orr.w	r3, r3, #2415919104	; 0x90000000
     69e:	str.w	r3, [r2, #136]	; 0x88
          dma.enable();

          I2S1_RCSR =  I2S_RCSR_FRDE | I2S_RCSR_FR;
          dma.attachInterrupt(acq_isr,I2S_DMA_PRIO*16);	
          acq_start();
      }
     6a2:	add	sp, #12
     6a4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     6a8:	movs	r0, r0
     6aa:	.short	0x0000
     6ac:	b.n	d70 <File::~File()+0x8>
     6ae:	adcs	r6, r6
     6b0:	movs	r0, r0
     6b2:	movs	r0, r0
     6b4:	ldrh	r0, [r0, #0]
     6b6:	lsrs	r3, r0
     6b8:	sxth	r0, r0
     6ba:	movs	r6, #159	; 0x9f
     6bc:	ldr	r5, [pc, #844]	; (a0c <SDClass::usedSize()+0x38>)
     6be:	asrs	r2, r4, #1
     6c0:	lsrs	r0, r3, #17
     6c2:	movs	r0, #0
     6c4:	lsls	r4, r5, #6
     6c6:	.short	0x2000
     6c8:	movs	r0, r0
     6ca:	eors	r0, r2
     6cc:	movs	r0, r0
     6ce:	.short	0x4010
     6d0:	.word	0x400ac000
     6d4:	.word	0xfffffe00
     6d8:	.word	0xfff7fff8
     6dc:	.word	0x40384000
     6e0:	.word	0x401f8000
     6e4:	.word	0x20001630
     6e8:	.word	0x403840a0
     6ec:	.word	0x20001d48
     6f0:	.word	0xbfffe008
     6f4:	.word	0xfffff000
     6f8:	.word	0x400ec000
     6fc:	.word	0x80000013
     700:	.word	0x400e8000
     704:	.word	0x02000001
     708:	.word	0x20008800
     70c:	.word	0xe000e100
     710:	.word	0xe000e400
     714:	.word	0x057619f1
     718:	.word	0x1f1f1f00
     71c:	.word	0x400fc000
     720:	.word	0x00010019
     724:	.word	0x00001201

00000728 <SDClass::remove(char const*)>:
		return sdfs.mkdir(filepath);
	}
	bool rename(const char *oldfilepath, const char *newfilepath) {
		return sdfs.rename(oldfilepath, newfilepath);
	}
	bool remove(const char *filepath) {
     728:	push	{r4, r5, lr}
     72a:	ldr.w	r4, [r0, #1148]	; 0x47c
     72e:	sub	sp, #60	; 0x3c
  *
   * \return true for success or false for failure.
  */
  bool remove(const char *path) {
    return m_fVol ? m_fVol->remove(path) :
           m_xVol ? m_xVol->remove(path) : false;
     730:	cbz	r4, 75c <SDClass::remove(char const*)+0x34>
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attributes(FILE_ATTR_CLOSED), m_error(0), m_flags(0) {}
     732:	movs	r5, #0
   *
   * \return true for success or false for failure.
   */
  bool remove(const char* path) {
    FatFile tmp;
    return tmp.open(this, path, O_WRONLY) && tmp.remove();
     734:	mov	r2, r1
     736:	mov	r0, sp
     738:	mov	r1, r4
     73a:	movs	r3, #1
     73c:	strb.w	r5, [sp]
     740:	strb.w	r5, [sp, #1]
     744:	strb.w	r5, [sp, #2]
     748:	bl	9c80 <FatFile::open(FatVolume*, char const*, int)>
     74c:	cbnz	r0, 752 <SDClass::remove(char const*)+0x2a>
		return sdfs.remove(filepath);
	}
     74e:	add	sp, #60	; 0x3c
     750:	pop	{r4, r5, pc}
     752:	mov	r0, sp
     754:	bl	ad80 <FatFile::remove()>
     758:	add	sp, #60	; 0x3c
     75a:	pop	{r4, r5, pc}
     75c:	ldr.w	r0, [r0, #1152]	; 0x480
     760:	cmp	r0, #0
     762:	beq.n	74e <SDClass::remove(char const*)+0x26>
   *
   * \return true for success or false for failure.
   */
  bool remove(const ExChar_t* path) {
    ExFatFile tmp;
    return tmp.open(this, path, O_WRONLY) && tmp.remove();
     764:	mov	r2, r1
     766:	movs	r3, #1
     768:	mov	r1, r0
     76a:	mov	r0, sp
 * \brief Basic file class.
 */
class ExFatFile {
 public:
  /** Create an instance. */
  ExFatFile() : m_attributes(FILE_ATTR_CLOSED), m_error(0), m_flags(0) {}
     76c:	strb.w	r4, [sp, #49]	; 0x31
     770:	strb.w	r4, [sp, #50]	; 0x32
     774:	strb.w	r4, [sp, #51]	; 0x33
     778:	bl	87ec <ExFatFile::open(ExFatVolume*, char const*, int)>
     77c:	cmp	r0, #0
     77e:	beq.n	74e <SDClass::remove(char const*)+0x26>
     780:	mov	r0, sp
     782:	bl	8e9c <ExFatFile::remove()>
     786:	add	sp, #60	; 0x3c
     788:	pop	{r4, r5, pc}
     78a:	nop

0000078c <SDClass::rename(char const*, char const*)>:
		return sdfs.exists(filepath);
	}
	bool mkdir(const char *filepath) {
		return sdfs.mkdir(filepath);
	}
	bool rename(const char *oldfilepath, const char *newfilepath) {
     78c:	push	{r4, r5, r6, lr}
     78e:	ldr.w	r4, [r0, #1148]	; 0x47c
     792:	sub	sp, #56	; 0x38
     794:	mov	r6, r2
   *
   * \return true for success or false for failure.
   */
  bool rename(const char *oldPath, const char *newPath) {
    return m_fVol ? m_fVol->rename(oldPath, newPath) :
           m_xVol ? m_xVol->rename(oldPath, newPath) : false;
     796:	cbz	r4, 7ca <SDClass::rename(char const*, char const*)+0x3e>
     798:	movs	r5, #0
    return truncate(path.c_str(), length);
  }
#endif  // ENABLE_ARDUINO_STRING

 private:
  FatFile* vwd() {return &m_vwd;}
     79a:	addw	r4, r4, #1084	; 0x43c
   *
   * \return true for success or false for failure.
   */
  bool rename(const char *oldPath, const char *newPath) {
    FatFile file;
    return file.open(vwd(), oldPath, O_RDONLY) && file.rename(vwd(), newPath);
     79e:	mov	r2, r1
     7a0:	mov	r0, sp
     7a2:	mov	r1, r4
     7a4:	mov	r3, r5
     7a6:	strb.w	r5, [sp]
     7aa:	strb.w	r5, [sp, #1]
     7ae:	strb.w	r5, [sp, #2]
     7b2:	bl	9bb8 <FatFile::open(FatFile*, char const*, int)>
     7b6:	cbnz	r0, 7bc <SDClass::rename(char const*, char const*)+0x30>
		return sdfs.rename(oldfilepath, newfilepath);
	}
     7b8:	add	sp, #56	; 0x38
     7ba:	pop	{r4, r5, r6, pc}
     7bc:	mov	r2, r6
     7be:	mov	r1, r4
     7c0:	mov	r0, sp
     7c2:	bl	9e9c <FatFile::rename(FatFile*, char const*)>
     7c6:	add	sp, #56	; 0x38
     7c8:	pop	{r4, r5, r6, pc}
     7ca:	ldr.w	r0, [r0, #1152]	; 0x480
     7ce:	cmp	r0, #0
     7d0:	beq.n	7b8 <SDClass::rename(char const*, char const*)+0x2c>
  bool rmdir(const char* path);
#endif  //  USE_EXFAT_UNICODE_NAMES

 private:
  friend ExFatFile;
  ExFatFile* vwd() {return &m_vwd;}
     7d2:	add.w	r5, r0, #1088	; 0x440
   *
   * \return true for success or false for failure.
   */
  bool rename(const ExChar_t* oldPath, const ExChar_t* newPath) {
    ExFatFile file;
    return file.open(vwd(), oldPath, O_RDONLY) && file.rename(vwd(), newPath);
     7d6:	mov	r2, r1
     7d8:	mov	r3, r4
     7da:	mov	r0, sp
     7dc:	mov	r1, r5
     7de:	strb.w	r4, [sp, #49]	; 0x31
     7e2:	strb.w	r4, [sp, #50]	; 0x32
     7e6:	strb.w	r4, [sp, #51]	; 0x33
     7ea:	bl	86e8 <ExFatFile::open(ExFatFile*, char const*, int)>
     7ee:	cmp	r0, #0
     7f0:	beq.n	7b8 <SDClass::rename(char const*, char const*)+0x2c>
     7f2:	mov	r2, r6
     7f4:	mov	r1, r5
     7f6:	mov	r0, sp
     7f8:	bl	93c0 <ExFatFile::rename(ExFatFile*, char const*)>
     7fc:	add	sp, #56	; 0x38
     7fe:	pop	{r4, r5, r6, pc}

00000800 <SDFile::name()>:
		sdfatfile.close();
	}
	virtual operator bool() {
		return sdfatfile.isOpen();
	}
	virtual const char * name() {
     800:	push	{r3, r4, r5, lr}
		if (!filename) {
     802:	ldr	r4, [r0, #100]	; 0x64
     804:	cbz	r4, 80a <SDFile::name()+0xa>
				static char zeroterm = 0;
				filename = &zeroterm;
			}
		}
		return filename;
	}
     806:	mov	r0, r4
     808:	pop	{r3, r4, r5, pc}
     80a:	mov	r5, r0
	virtual operator bool() {
		return sdfatfile.isOpen();
	}
	virtual const char * name() {
		if (!filename) {
			filename = (char *)malloc(MAX_FILENAME_LEN);
     80c:	mov.w	r0, #256	; 0x100
     810:	bl	105f0 <malloc>
     814:	mov	r1, r0
     816:	str	r0, [r5, #100]	; 0x64
			if (filename) {
     818:	cbz	r0, 83c <SDFile::name()+0x3c>
   *             truncated if the file's name is too long.
   * \return The length of the returned string.
   */
  size_t getName(char* name, size_t len) {
    *name = 0;
    return m_fFile ? m_fFile->getName(name, len) :
     81a:	ldr	r0, [r5, #92]	; 0x5c
   *             must be at least 13 bytes long.  The file's name will be
   *             truncated if the file's name is too long.
   * \return The length of the returned string.
   */
  size_t getName(char* name, size_t len) {
    *name = 0;
     81c:	strb	r4, [r1, #0]
    return m_fFile ? m_fFile->getName(name, len) :
           m_xFile ? m_xFile->getName(name, len) : 0;
     81e:	cbz	r0, 82c <SDFile::name()+0x2c>
   *             truncated if the file's name is too long.
   * \return The length of the returned string.
   */
  size_t getName(char* name, size_t len) {
    *name = 0;
    return m_fFile ? m_fFile->getName(name, len) :
     820:	mov.w	r2, #256	; 0x100
     824:	bl	a9f4 <FatFile::getName(char*, unsigned int)>
     828:	ldr	r4, [r5, #100]	; 0x64
     82a:	b.n	806 <SDFile::name()+0x6>
           m_xFile ? m_xFile->getName(name, len) : 0;
     82c:	ldr	r0, [r5, #96]	; 0x60
     82e:	cbz	r0, 842 <SDFile::name()+0x42>
     830:	mov.w	r2, #256	; 0x100
     834:	bl	7e68 <ExFatFile::getName(char*, unsigned int)>
     838:	ldr	r4, [r5, #100]	; 0x64
     83a:	b.n	806 <SDFile::name()+0x6>
				sdfatfile.getName(filename, MAX_FILENAME_LEN);
			} else {
				static char zeroterm = 0;
				filename = &zeroterm;
     83c:	ldr	r4, [pc, #8]	; (848 <SDFile::name()+0x48>)
     83e:	str	r4, [r5, #100]	; 0x64
     840:	b.n	806 <SDFile::name()+0x6>
     842:	mov	r4, r1
     844:	b.n	806 <SDFile::name()+0x6>
     846:	nop
     848:	.word	0x2000162c

0000084c <SDFile::truncate(unsigned long long)>:
		sdfatfile.flush();
	}
	virtual size_t read(void *buf, size_t nbyte) {
		return sdfatfile.read(buf, nbyte);
	}
	virtual bool truncate(uint64_t size=0) {
     84c:	push	{r4, r6, r7, lr}
     84e:	ldr	r4, [r0, #92]	; 0x5c
   *
   * \return true for success or false for failure.
   */
  bool truncate(uint64_t length) {
    return m_fFile ? length < (1ULL << 32) && m_fFile->truncate(length) :
           m_xFile ? m_xFile->truncate(length) : false;
     850:	cbz	r4, 876 <SDFile::truncate(unsigned long long)+0x2a>
   * \param[in] length The desired length for the file.
   *
   * \return true for success or false for failure.
   */
  bool truncate(uint64_t length) {
    return m_fFile ? length < (1ULL << 32) && m_fFile->truncate(length) :
     852:	cmp	r3, #1
     854:	it	eq
     856:	cmpeq	r2, #0
     858:	bcc.n	85e <SDFile::truncate(unsigned long long)+0x12>
     85a:	movs	r0, #0
		return sdfatfile.truncate(size);
	}
     85c:	pop	{r4, r6, r7, pc}
   * \param[in] length The desired length for the file.
   *
   * \return true for success or false for failure.
   */
  bool truncate(uint32_t length) {
    return seekSet(length) && truncate();
     85e:	mov	r1, r2
     860:	mov	r0, r4
     862:	bl	a0dc <FatFile::seekSet(unsigned long)>
     866:	cmp	r0, #0
     868:	beq.n	85a <SDFile::truncate(unsigned long long)+0xe>
     86a:	mov	r0, r4
     86c:	bl	a2e4 <FatFile::truncate()>
     870:	cmp	r0, #0
     872:	beq.n	85a <SDFile::truncate(unsigned long long)+0xe>
     874:	pop	{r4, r6, r7, pc}
           m_xFile ? m_xFile->truncate(length) : false;
     876:	ldr	r4, [r0, #96]	; 0x60
     878:	cmp	r4, #0
     87a:	beq.n	85a <SDFile::truncate(unsigned long long)+0xe>
   * \param[in] length The desired length for the file.
   *
   * \return true for success or false for failure.
   */
  bool truncate(uint64_t length) {
    return seekSet(length) && truncate();
     87c:	mov	r0, r4
     87e:	bl	8208 <ExFatFile::seekSet(unsigned long long)>
     882:	cmp	r0, #0
     884:	beq.n	85a <SDFile::truncate(unsigned long long)+0xe>
     886:	mov	r0, r4
     888:	ldmia.w	sp!, {r4, r6, r7, lr}
     88c:	b.w	9470 <ExFatFile::truncate()>

00000890 <SDClass::mkdir(char const*)>:
		return File();
	}
	bool exists(const char *filepath) {
		return sdfs.exists(filepath);
	}
	bool mkdir(const char *filepath) {
     890:	push	{r4, r5, lr}
     892:	ldr.w	r4, [r0, #1148]	; 0x47c
     896:	sub	sp, #60	; 0x3c
   *
   * \return true for success or false for failure.
   */
  bool mkdir(const char *path, bool pFlag = true) {
    return m_fVol ? m_fVol->mkdir(path, pFlag) :
           m_xVol ? m_xVol->mkdir(path, pFlag) : false;
     898:	cbz	r4, 8ba <SDClass::mkdir(char const*)+0x2a>
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attributes(FILE_ATTR_CLOSED), m_error(0), m_flags(0) {}
     89a:	movs	r5, #0
   *
   * \return true for success or false for failure.
   */
  bool mkdir(const char* path, bool pFlag = true) {
    FatFile sub;
    return sub.mkdir(vwd(), path, pFlag);
     89c:	mov	r2, r1
     89e:	movs	r3, #1
     8a0:	addw	r1, r4, #1084	; 0x43c
     8a4:	mov	r0, sp
     8a6:	strb.w	r5, [sp]
     8aa:	strb.w	r5, [sp, #1]
     8ae:	strb.w	r5, [sp, #2]
     8b2:	bl	9af0 <FatFile::mkdir(FatFile*, char const*, bool)>
		return sdfs.mkdir(filepath);
	}
     8b6:	add	sp, #60	; 0x3c
     8b8:	pop	{r4, r5, pc}
     8ba:	ldr.w	r0, [r0, #1152]	; 0x480
     8be:	cmp	r0, #0
     8c0:	beq.n	8b6 <SDClass::mkdir(char const*)+0x26>
   *
   * \return true for success or false for failure.
   */
  bool mkdir(const ExChar_t* path, bool pFlag = true) {
    ExFatFile sub;
    return sub.mkdir(vwd(), path, pFlag);
     8c2:	mov	r2, r1
     8c4:	movs	r3, #1
     8c6:	add.w	r1, r0, #1088	; 0x440
     8ca:	mov	r0, sp
 * \brief Basic file class.
 */
class ExFatFile {
 public:
  /** Create an instance. */
  ExFatFile() : m_attributes(FILE_ATTR_CLOSED), m_error(0), m_flags(0) {}
     8cc:	strb.w	r4, [sp, #49]	; 0x31
     8d0:	strb.w	r4, [sp, #50]	; 0x32
     8d4:	strb.w	r4, [sp, #51]	; 0x33
     8d8:	bl	92e4 <ExFatFile::mkdir(ExFatFile*, char const*, bool)>
     8dc:	add	sp, #60	; 0x3c
     8de:	pop	{r4, r5, pc}

000008e0 <SDClass::exists(char const*)>:
		else if (mode == FILE_WRITE_BEGIN) flags = O_RDWR | O_CREAT;
		SDFAT_FILE file = sdfs.open(filepath, flags);
		if (file) return File(new SDFile(file));
		return File();
	}
	bool exists(const char *filepath) {
     8e0:	push	{r4, r5, lr}
     8e2:	ldr.w	r4, [r0, #1148]	; 0x47c
     8e6:	sub	sp, #60	; 0x3c
   *
   * \return true if the file exists else false.
   */
  bool exists(const char* path) {
    return m_fVol ? m_fVol->exists(path) :
           m_xVol ? m_xVol->exists(path) : false;
     8e8:	cbz	r4, 908 <SDClass::exists(char const*)+0x28>
     8ea:	movs	r5, #0
   *
   * \return true if the file exists else false.
   */
  bool exists(const char* path) {
    FatFile tmp;
    return tmp.open(this, path, O_RDONLY);
     8ec:	mov	r2, r1
     8ee:	mov	r0, sp
     8f0:	mov	r1, r4
     8f2:	mov	r3, r5
     8f4:	strb.w	r5, [sp]
     8f8:	strb.w	r5, [sp, #1]
     8fc:	strb.w	r5, [sp, #2]
     900:	bl	9c80 <FatFile::open(FatVolume*, char const*, int)>
		return sdfs.exists(filepath);
	}
     904:	add	sp, #60	; 0x3c
     906:	pop	{r4, r5, pc}
     908:	ldr.w	r0, [r0, #1152]	; 0x480
     90c:	cmp	r0, #0
     90e:	beq.n	904 <SDClass::exists(char const*)+0x24>
   *
   * \return true if the file exists else false.
   */
  bool exists(const ExChar_t* path) {
    ExFatFile tmp;
    return tmp.open(this, path, O_RDONLY);
     910:	mov	r2, r1
     912:	mov	r3, r4
     914:	mov	r1, r0
     916:	mov	r0, sp
     918:	strb.w	r4, [sp, #49]	; 0x31
     91c:	strb.w	r4, [sp, #50]	; 0x32
     920:	strb.w	r4, [sp, #51]	; 0x33
     924:	bl	87ec <ExFatFile::open(ExFatVolume*, char const*, int)>
     928:	add	sp, #60	; 0x3c
     92a:	pop	{r4, r5, pc}

0000092c <SDFile::rewindDirectory()>:
	virtual File openNextFile(uint8_t mode=0) {
		SDFAT_FILE file = sdfatfile.openNextFile();
		if (file) return File(new SDFile(file));
		return File();
	}
	virtual void rewindDirectory(void) {
     92c:	ldr	r3, [r0, #92]	; 0x5c
           m_xFile ? m_xFile->getWriteError() : true;
  }
  /** \return True if this is a directory else false. */
  bool isDir() {
    return m_fFile ? m_fFile->isDir() :
           m_xFile ? m_xFile->isDir() : false;
     92e:	cbz	r3, 958 <SDFile::rewindDirectory()+0x2c>
  int read() {
    return BaseFile::read();
  }
  /** Rewind a file if it is a directory */
  void rewindDirectory() {
    if (BaseFile::isDir()) {
     930:	ldrb	r2, [r3, #0]
     932:	tst.w	r2, #112	; 0x70
     936:	bne.n	93a <SDFile::rewindDirectory()+0xe>
     938:	bx	lr
     93a:	push	{r4, lr}
     93c:	mov	r4, r0
   * \return true for success or false for failure.
   */
  bool remove(const char* path);
  /** Set the file's current position to zero. */
  void rewind() {
    seekSet(0);
     93e:	movs	r1, #0
     940:	mov	r0, r3
     942:	bl	a0dc <FatFile::seekSet(unsigned long)>
     946:	ldr	r0, [r4, #96]	; 0x60
           m_xFile ? m_xFile->rename(dirFile->m_xFile, newPath) : false;
  }
  /** Set the file's current position to zero. */
  void rewind() {
    if (m_fFile) m_fFile->rewind();
    if (m_xFile) m_xFile->rewind();
     948:	cbz	r0, 956 <SDFile::rewindDirectory()+0x2a>
   * \return true for success or false for failure.
   */
  bool rename(ExFatFile* dirFile, const ExChar_t* newPath);
  /** Set the file's current position to zero. */
  void rewind() {
    seekSet(0);
     94a:	movs	r2, #0
     94c:	movs	r3, #0
		sdfatfile.rewindDirectory();
	}
     94e:	ldmia.w	sp!, {r4, lr}
     952:	b.w	8208 <ExFatFile::seekSet(unsigned long long)>
     956:	pop	{r4, pc}
           m_xFile ? m_xFile->getWriteError() : true;
  }
  /** \return True if this is a directory else false. */
  bool isDir() {
    return m_fFile ? m_fFile->isDir() :
           m_xFile ? m_xFile->isDir() : false;
     958:	ldr	r0, [r0, #96]	; 0x60
     95a:	cmp	r0, #0
     95c:	beq.n	938 <SDFile::rewindDirectory()+0xc>
     95e:	ldrb.w	r3, [r0, #49]	; 0x31
     962:	tst.w	r3, #80	; 0x50
     966:	beq.n	938 <SDFile::rewindDirectory()+0xc>
     968:	movs	r2, #0
     96a:	movs	r3, #0
     96c:	b.w	8208 <ExFatFile::seekSet(unsigned long long)>

00000970 <SDClass::rmdir(char const*)>:
		return sdfs.rename(oldfilepath, newfilepath);
	}
	bool remove(const char *filepath) {
		return sdfs.remove(filepath);
	}
	bool rmdir(const char *filepath) {
     970:	push	{r4, r5, lr}
     972:	ldr.w	r4, [r0, #1148]	; 0x47c
     976:	sub	sp, #60	; 0x3c
   *
   * \return true for success or false for failure.
   */
  bool rmdir(const char *path) {
    return m_fVol ? m_fVol->rmdir(path) :
           m_xVol ? m_xVol->rmdir(path) : false;
     978:	cbz	r4, 9a4 <SDClass::rmdir(char const*)+0x34>
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attributes(FILE_ATTR_CLOSED), m_error(0), m_flags(0) {}
     97a:	movs	r5, #0
   *
   * \return true for success or false for failure.
   */
  bool rmdir(const char* path) {
    FatFile sub;
    return sub.open(this, path, O_RDONLY) && sub.rmdir();
     97c:	mov	r2, r1
     97e:	mov	r0, sp
     980:	mov	r1, r4
     982:	mov	r3, r5
     984:	strb.w	r5, [sp]
     988:	strb.w	r5, [sp, #1]
     98c:	strb.w	r5, [sp, #2]
     990:	bl	9c80 <FatFile::open(FatVolume*, char const*, int)>
     994:	cbnz	r0, 99a <SDClass::rmdir(char const*)+0x2a>
		return sdfs.rmdir(filepath);
	}
     996:	add	sp, #60	; 0x3c
     998:	pop	{r4, r5, pc}
     99a:	mov	r0, sp
     99c:	bl	a080 <FatFile::rmdir()>
     9a0:	add	sp, #60	; 0x3c
     9a2:	pop	{r4, r5, pc}
     9a4:	ldr.w	r0, [r0, #1152]	; 0x480
     9a8:	cmp	r0, #0
     9aa:	beq.n	996 <SDClass::rmdir(char const*)+0x26>
   *
   * \return true for success or false for failure.
   */
  bool rmdir(const ExChar_t* path) {
    ExFatFile sub;
    return sub.open(this, path, O_RDONLY) && sub.rmdir();
     9ac:	mov	r2, r1
     9ae:	mov	r3, r4
     9b0:	mov	r1, r0
     9b2:	mov	r0, sp
 * \brief Basic file class.
 */
class ExFatFile {
 public:
  /** Create an instance. */
  ExFatFile() : m_attributes(FILE_ATTR_CLOSED), m_error(0), m_flags(0) {}
     9b4:	strb.w	r4, [sp, #49]	; 0x31
     9b8:	strb.w	r4, [sp, #50]	; 0x32
     9bc:	strb.w	r4, [sp, #51]	; 0x33
     9c0:	bl	87ec <ExFatFile::open(ExFatVolume*, char const*, int)>
     9c4:	cmp	r0, #0
     9c6:	beq.n	996 <SDClass::rmdir(char const*)+0x26>
     9c8:	mov	r0, sp
     9ca:	bl	8f74 <ExFatFile::rmdir()>
     9ce:	add	sp, #60	; 0x3c
     9d0:	pop	{r4, r5, pc}
     9d2:	nop

000009d4 <SDClass::usedSize()>:
	uint64_t usedSize() {
     9d4:	push	{r3, r4, r5, lr}
     9d6:	mov	r5, r0
     9d8:	ldr.w	r0, [r0, #1148]	; 0x47c
  /** Change global working volume to this volume. */
  void chvol() {m_cwv = this;}
  /** \return The total number of clusters in the volume. */
  uint32_t clusterCount() {
    return m_fVol ? m_fVol->clusterCount() :
           m_xVol ? m_xVol->clusterCount() : 0;
     9dc:	cbz	r0, a10 <SDClass::usedSize()+0x3c>
    m_cache.invalidate();
    return m_cache.buffer();
  }
  /** \return The total number of clusters in the volume. */
  uint32_t clusterCount() const {
    return m_lastCluster - 1;
     9de:	ldr	r4, [r0, #28]
     9e0:	subs	r4, #1
    return m_fVol ? m_fVol->fatStartSector() :
           m_xVol ? m_xVol->fatStartSector() : 0;
  }
  /** \return the free cluster count. */
  uint32_t freeClusterCount() {
    return m_fVol ? m_fVol->freeClusterCount() :
     9e2:	bl	a7a4 <FatPartition::freeClusterCount()>
     9e6:	ldr.w	r3, [r5, #1148]	; 0x47c
		return (uint64_t)(sdfs.clusterCount() - sdfs.freeClusterCount())
     9ea:	subs	r4, r4, r0
   */
  bool begin(BlockDevice* blockDev);
  /** \return the number of bytes in a cluster. */
  uint32_t bytesPerCluster() {
    return m_fVol ? m_fVol->bytesPerCluster() :
           m_xVol ? m_xVol->bytesPerCluster() : 0;
     9ec:	cbz	r3, a00 <SDClass::usedSize()+0x2c>
     9ee:	ldrb	r0, [r3, #6]
     9f0:	mov.w	r3, #512	; 0x200
     9f4:	lsl.w	r0, r3, r0
     9f8:	uxth	r0, r0
     9fa:	umull	r0, r1, r0, r4
     9fe:	pop	{r3, r4, r5, pc}
     a00:	ldr.w	r3, [r5, #1152]	; 0x480
     a04:	cbz	r3, a22 <SDClass::usedSize()+0x4e>
     a06:	ldr.w	r0, [r3, #1076]	; 0x434
     a0a:	umull	r0, r1, r0, r4
     a0e:	pop	{r3, r4, r5, pc}
  /** Change global working volume to this volume. */
  void chvol() {m_cwv = this;}
  /** \return The total number of clusters in the volume. */
  uint32_t clusterCount() {
    return m_fVol ? m_fVol->clusterCount() :
           m_xVol ? m_xVol->clusterCount() : 0;
     a10:	ldr.w	r3, [r5, #1152]	; 0x480
     a14:	cbz	r3, a22 <SDClass::usedSize()+0x4e>
           m_xVol ? m_xVol->fatStartSector() : 0;
  }
  /** \return the free cluster count. */
  uint32_t freeClusterCount() {
    return m_fVol ? m_fVol->freeClusterCount() :
           m_xVol ? m_xVol->freeClusterCount() : 0;
     a16:	mov	r0, r3
     a18:	ldr.w	r4, [r3, #1064]	; 0x428
     a1c:	bl	8cec <ExFatPartition::freeClusterCount()>
     a20:	b.n	9e6 <SDClass::usedSize()+0x12>
  /** Change global working volume to this volume. */
  void chvol() {m_cwv = this;}
  /** \return The total number of clusters in the volume. */
  uint32_t clusterCount() {
    return m_fVol ? m_fVol->clusterCount() :
           m_xVol ? m_xVol->clusterCount() : 0;
     a22:	movs	r0, #0
     a24:	movs	r1, #0
		  * (uint64_t)sdfs.bytesPerCluster();
	}
     a26:	pop	{r3, r4, r5, pc}

00000a28 <SDFile::position()>:
		if (mode == SeekSet) return sdfatfile.seekSet(pos);
		if (mode == SeekCur) return sdfatfile.seekCur(pos);
		if (mode == SeekEnd) return sdfatfile.seekEnd(pos);
		return false;
	}
	virtual uint64_t position() {
     a28:	ldr	r3, [r0, #92]	; 0x5c
   */
  bool close();
  /** \return The current position for a file or directory. */
  uint64_t curPosition() {
    return m_fFile ? m_fFile->curPosition() :
           m_xFile ? m_xFile->curPosition() : 0;
     a2a:	cbz	r3, a32 <SDFile::position()+0xa>
     a2c:	ldr	r0, [r3, #20]
     a2e:	movs	r1, #0
     a30:	bx	lr
     a32:	ldr	r3, [r0, #96]	; 0x60
     a34:	cbz	r3, a3c <SDFile::position()+0x14>
     a36:	ldmia.w	r3, {r0, r1}
     a3a:	bx	lr
     a3c:	mov	r0, r3
     a3e:	mov	r1, r3
		return sdfatfile.curPosition();
	}
     a40:	bx	lr
     a42:	nop

00000a44 <SDFile::size()>:
	virtual uint64_t size() {
     a44:	ldr	r3, [r0, #92]	; 0x5c
           m_xFile ? m_xFile->fgets(str, num, delim) : -1;
  }
  /** \return The total number of bytes in a file. */
  uint64_t fileSize() {
    return m_fFile ? m_fFile->fileSize() :
           m_xFile ? m_xFile->fileSize() : 0;
     a46:	cbz	r3, a4e <SDFile::size()+0xa>
     a48:	ldr	r0, [r3, #28]
     a4a:	movs	r1, #0
     a4c:	bx	lr
     a4e:	ldr	r3, [r0, #96]	; 0x60
     a50:	cbz	r3, a58 <SDFile::size()+0x14>
     a52:	ldr	r0, [r3, #16]
     a54:	ldr	r1, [r3, #20]
     a56:	bx	lr
     a58:	mov	r0, r3
     a5a:	mov	r1, r3
		return sdfatfile.size();
	}
     a5c:	bx	lr
     a5e:	nop

00000a60 <SDFile::read(void*, unsigned int)>:
		return sdfatfile.available();
	}
	virtual void flush() {
		sdfatfile.flush();
	}
	virtual size_t read(void *buf, size_t nbyte) {
     a60:	ldr	r3, [r0, #92]	; 0x5c
   * read() called before a file has been opened, corrupt file system
   * or an I/O error occurred.
   */
  int read(void* buf, size_t count) {
    return m_fFile ? m_fFile->read(buf, count) :
           m_xFile ? m_xFile->read(buf, count) : -1;
     a62:	cbz	r3, a6a <SDFile::read(void*, unsigned int)+0xa>
     a64:	mov	r0, r3
     a66:	b.w	9c9c <FatFile::read(void*, unsigned int)>
     a6a:	ldr	r0, [r0, #96]	; 0x60
     a6c:	cbz	r0, a72 <SDFile::read(void*, unsigned int)+0x12>
     a6e:	b.w	8034 <ExFatFile::read(void*, unsigned int)>
		return sdfatfile.read(buf, nbyte);
	}
     a72:	mov.w	r0, #4294967295
     a76:	bx	lr

00000a78 <SDFile::peek()>:
	}
#endif
	virtual size_t write(const void *buf, size_t size) {
		return sdfatfile.write(buf, size);
	}
	virtual int peek() {
     a78:	ldr	r3, [r0, #92]	; 0x5c
   *
   * \return The byte if no error and not at eof else -1;
   */
  int peek() {
    return m_fFile ? m_fFile->peek() :
           m_xFile ? m_xFile->peek() : -1;
     a7a:	cbz	r3, a82 <SDFile::peek()+0xa>
     a7c:	mov	r0, r3
     a7e:	b.w	9e30 <FatFile::peek()>
     a82:	ldr	r0, [r0, #96]	; 0x60
     a84:	cbz	r0, a8a <SDFile::peek()+0x12>
     a86:	b.w	81dc <ExFatFile::peek()>
		return sdfatfile.peek();
	}
     a8a:	mov.w	r0, #4294967295
     a8e:	bx	lr

00000a90 <SDClass::totalSize()>:
	}
	uint64_t usedSize() {
		return (uint64_t)(sdfs.clusterCount() - sdfs.freeClusterCount())
		  * (uint64_t)sdfs.bytesPerCluster();
	}
	uint64_t totalSize() {
     a90:	ldr.w	r2, [r0, #1148]	; 0x47c
     a94:	cbz	r2, aaa <SDClass::totalSize()+0x1a>
     a96:	ldrb	r1, [r2, #6]
     a98:	mov.w	r3, #512	; 0x200
     a9c:	ldr	r0, [r2, #28]
     a9e:	lsls	r3, r1
     aa0:	subs	r0, #1
     aa2:	uxth	r3, r3
     aa4:	umull	r0, r1, r3, r0
     aa8:	bx	lr
     aaa:	ldr.w	r2, [r0, #1152]	; 0x480
     aae:	cbz	r2, abe <SDClass::totalSize()+0x2e>
     ab0:	ldr.w	r3, [r2, #1064]	; 0x428
     ab4:	ldr.w	r0, [r2, #1076]	; 0x434
     ab8:	umull	r0, r1, r3, r0
     abc:	bx	lr
     abe:	movs	r0, #0
     ac0:	movs	r1, #0
		return (uint64_t)sdfs.clusterCount() * (uint64_t)sdfs.bytesPerCluster();
	}
     ac2:	bx	lr

00000ac4 <SDFile::isDirectory()>:
				filename = &zeroterm;
			}
		}
		return filename;
	}
	virtual boolean isDirectory(void) {
     ac4:	ldr	r3, [r0, #92]	; 0x5c
           m_xFile ? m_xFile->getWriteError() : true;
  }
  /** \return True if this is a directory else false. */
  bool isDir() {
    return m_fFile ? m_fFile->isDir() :
           m_xFile ? m_xFile->isDir() : false;
     ac6:	cbz	r3, ad6 <SDFile::isDirectory()+0x12>
    /** \return True if the file is contiguous. */
  bool isContiguous() const {return m_flags & FILE_FLAG_CONTIGUOUS;}
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
  /** \return True if this is a directory. */
  bool isDir() const {
    return m_attributes & FILE_ATTR_DIR;
     ac8:	ldrb	r3, [r3, #0]
     aca:	tst.w	r3, #112	; 0x70
     ace:	ite	ne
     ad0:	movne	r0, #1
     ad2:	moveq	r0, #0
     ad4:	bx	lr
     ad6:	ldr	r0, [r0, #96]	; 0x60
     ad8:	cbz	r0, ae8 <SDFile::isDirectory()+0x24>
    return isOpen() ? m_error & WRITE_ERROR : true;
  }
  /** \return True if the file is contiguous. */
  bool isContiguous() const {return m_flags & FILE_FLAG_CONTIGUOUS;}
  /** \return True if this is a directory. */
  bool isDir() const  {return m_attributes & FILE_ATTR_DIR;}
     ada:	ldrb.w	r3, [r0, #49]	; 0x31
     ade:	tst.w	r3, #80	; 0x50
     ae2:	ite	ne
     ae4:	movne	r0, #1
     ae6:	moveq	r0, #0
		return sdfatfile.isDirectory();
	}
     ae8:	bx	lr
     aea:	nop

00000aec <SDClass::open(char const*, unsigned char)>:
		return sdfs.begin(SdSpiConfig(csPin, SHARED_SPI, SD_SCK_MHZ(16)));
		//return sdfs.begin(csPin, SD_SCK_MHZ(24));
	}
	File open(const char *filepath, uint8_t mode = FILE_READ) {
		oflag_t flags = O_READ;
		if (mode == FILE_WRITE) flags = O_RDWR | O_CREAT | O_AT_END;
     aec:	cmp	r3, #1
		}
#endif
		return sdfs.begin(SdSpiConfig(csPin, SHARED_SPI, SD_SCK_MHZ(16)));
		//return sdfs.begin(csPin, SD_SCK_MHZ(24));
	}
	File open(const char *filepath, uint8_t mode = FILE_READ) {
     aee:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     af2:	mov	r5, r0
     af4:	sub	sp, #80	; 0x50
		oflag_t flags = O_READ;
		if (mode == FILE_WRITE) flags = O_RDWR | O_CREAT | O_AT_END;
     af6:	beq.n	b7a <SDClass::open(char const*, unsigned char)+0x8e>
		else if (mode == FILE_WRITE_BEGIN) flags = O_RDWR | O_CREAT;
     af8:	cmp	r3, #2
		SDFAT_FILE file = sdfs.open(filepath, flags);
     afa:	add.w	r1, r1, #4
		//return sdfs.begin(csPin, SD_SCK_MHZ(24));
	}
	File open(const char *filepath, uint8_t mode = FILE_READ) {
		oflag_t flags = O_READ;
		if (mode == FILE_WRITE) flags = O_RDWR | O_CREAT | O_AT_END;
		else if (mode == FILE_WRITE_BEGIN) flags = O_RDWR | O_CREAT;
     afe:	movw	r3, #514	; 0x202
		SDFAT_FILE file = sdfs.open(filepath, flags);
     b02:	mov	r0, sp
		//return sdfs.begin(csPin, SD_SCK_MHZ(24));
	}
	File open(const char *filepath, uint8_t mode = FILE_READ) {
		oflag_t flags = O_READ;
		if (mode == FILE_WRITE) flags = O_RDWR | O_CREAT | O_AT_END;
		else if (mode == FILE_WRITE_BEGIN) flags = O_RDWR | O_CREAT;
     b04:	it	ne
     b06:	movne	r3, #0
		SDFAT_FILE file = sdfs.open(filepath, flags);
     b08:	bl	b5d8 <FsVolume::open(char const*, int)>
  bool isHidden() {
    return m_fFile ? m_fFile->isHidden() :
           m_xFile ? m_xFile->isHidden() : false;
  }
  /** \return True if this is an open file/directory else false. */
  bool isOpen() {return m_fFile || m_xFile;}
     b0c:	ldr	r3, [sp, #72]	; 0x48
     b0e:	cmp	r3, #0
     b10:	beq.n	b8c <SDClass::open(char const*, unsigned char)+0xa0>
		if (file) return File(new SDFile(file));
     b12:	movs	r0, #104	; 0x68
/**
 * \class StreamFile
 * \brief StreamFile class.
 */
template<class BaseFile, typename PosType>
class StreamFile : public stream_t, public BaseFile {
     b14:	add	r7, sp, #16
     b16:	bl	f6dc <operator new(unsigned int)>
//#define BYTE 0
//#endif

class __FlashStringHelper;

class Print
     b1a:	ldrb.w	r2, [sp, #4]
     b1e:	mov	r4, r0
#define Stream_h

#include <inttypes.h>
#include "Print.h"

class Stream : public Print
     b20:	ldr	r3, [pc, #132]	; (ba8 <SDClass::open(char const*, unsigned char)+0xbc>)
	// Classes derived from File are never meant to be constructed
	// anywhere other than open() in the parent FS class and
	// openNextFile() while traversing a directory.
	// Only the abstract File class which references these derived
	// classes is meant to have a public constructor!
	SDFile(const SDFAT_FILE &file) : sdfatfile(file), filename(nullptr) { }
     b22:	ldr	r1, [pc, #136]	; (bac <SDClass::open(char const*, unsigned char)+0xc0>)
{
  public:
	constexpr Print() : write_error(0) {}
     b24:	movs	r6, #0
{
  public:
	constexpr Stream() : _timeout(1000), read_error(0) {}
     b26:	mov.w	r8, #1000	; 0x3e8
//#define BYTE 0
//#endif

class __FlashStringHelper;

class Print
     b2a:	strb	r2, [r4, #24]
#define Stream_h

#include <inttypes.h>
#include "Print.h"

class Stream : public Print
     b2c:	str	r3, [r4, #20]
     b2e:	adds	r0, #36	; 0x24
     b30:	ldr	r3, [sp, #8]
     b32:	ldrb.w	r2, [sp, #12]
     b36:	str	r1, [r4, #0]
     b38:	mov	r1, r7
     b3a:	str	r3, [r4, #28]
     b3c:	strb.w	r2, [r4, #32]
{
  public:
	constexpr Print() : write_error(0) {}
     b40:	strb	r6, [r4, #4]
{
  public:
	constexpr Stream() : _timeout(1000), read_error(0) {}
     b42:	strb	r6, [r4, #12]
     b44:	str	r6, [r4, #16]
     b46:	str.w	r8, [r4, #8]
     b4a:	bl	b384 <FsBaseFile::FsBaseFile(FsBaseFile const&)>
		// or is_base_of
		//static_assert(std::is_same<decltype(*file),File>::value,
			//"File(File *file) constructor only accepts pointers "
			//"to derived classes, not File itself");
		f = file;
		if (f) f->refcount++;
     b4e:	ldr	r3, [r4, #16]
};
/**
 * \class FsFile
 * \brief FsBaseFile file with Arduino Stream.
 */
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
     b50:	ldr	r1, [pc, #92]	; (bb0 <SDClass::open(char const*, unsigned char)+0xc4>)
     b52:	adds	r3, #1
#define FILE_WHOAMI

class File : public Stream {
public:
	constexpr File() : f(nullptr) { }
	File(File *file) {
     b54:	ldr	r2, [pc, #92]	; (bb4 <SDClass::open(char const*, unsigned char)+0xc8>)
     b56:	str	r6, [r4, #100]	; 0x64
     b58:	strb	r6, [r5, #4]
     b5a:	str.w	r8, [r5, #8]
     b5e:	strb	r6, [r5, #12]
		// can we use is_same or is_polymorphic with static_assert?
		// or is_base_of
		//static_assert(std::is_same<decltype(*file),File>::value,
			//"File(File *file) constructor only accepts pointers "
			//"to derived classes, not File itself");
		f = file;
     b60:	str	r4, [r5, #16]
     b62:	str	r1, [r4, #20]
		if (f) f->refcount++;
     b64:	str	r3, [r4, #16]
#define FILE_WHOAMI

class File : public Stream {
public:
	constexpr File() : f(nullptr) { }
	File(File *file) {
     b66:	str	r2, [r5, #0]
     b68:	ldr	r3, [pc, #76]	; (bb8 <SDClass::open(char const*, unsigned char)+0xcc>)
 */
class FsBaseFile {
 public:
  FsBaseFile() : m_fFile(nullptr), m_xFile(nullptr) {}

  ~FsBaseFile() {close();}
     b6a:	mov	r0, r7
     b6c:	str	r3, [sp, #0]
     b6e:	bl	b408 <FsBaseFile::close()>
		if (mode == FILE_WRITE) flags = O_RDWR | O_CREAT | O_AT_END;
		else if (mode == FILE_WRITE_BEGIN) flags = O_RDWR | O_CREAT;
		SDFAT_FILE file = sdfs.open(filepath, flags);
		if (file) return File(new SDFile(file));
		return File();
	}
     b72:	mov	r0, r5
     b74:	add	sp, #80	; 0x50
     b76:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return sdfs.begin(SdSpiConfig(csPin, SHARED_SPI, SD_SCK_MHZ(16)));
		//return sdfs.begin(csPin, SD_SCK_MHZ(24));
	}
	File open(const char *filepath, uint8_t mode = FILE_READ) {
		oflag_t flags = O_READ;
		if (mode == FILE_WRITE) flags = O_RDWR | O_CREAT | O_AT_END;
     b7a:	movw	r3, #16898	; 0x4202
		else if (mode == FILE_WRITE_BEGIN) flags = O_RDWR | O_CREAT;
		SDFAT_FILE file = sdfs.open(filepath, flags);
     b7e:	adds	r1, #4
     b80:	mov	r0, sp
     b82:	bl	b5d8 <FsVolume::open(char const*, int)>
  bool isHidden() {
    return m_fFile ? m_fFile->isHidden() :
           m_xFile ? m_xFile->isHidden() : false;
  }
  /** \return True if this is an open file/directory else false. */
  bool isOpen() {return m_fFile || m_xFile;}
     b86:	ldr	r3, [sp, #72]	; 0x48
     b88:	cmp	r3, #0
     b8a:	bne.n	b12 <SDClass::open(char const*, unsigned char)+0x26>
     b8c:	ldr	r3, [sp, #76]	; 0x4c
     b8e:	cmp	r3, #0
     b90:	bne.n	b12 <SDClass::open(char const*, unsigned char)+0x26>
     b92:	mov.w	r1, #1000	; 0x3e8

#define FILE_WHOAMI

class File : public Stream {
public:
	constexpr File() : f(nullptr) { }
     b96:	ldr	r2, [pc, #28]	; (bb4 <SDClass::open(char const*, unsigned char)+0xc8>)
     b98:	strb	r3, [r5, #4]
     b9a:	add	r7, sp, #16
     b9c:	strb	r3, [r5, #12]
     b9e:	str	r3, [r5, #16]
     ba0:	str	r1, [r5, #8]
     ba2:	str	r2, [r5, #0]
     ba4:	b.n	b68 <SDClass::open(char const*, unsigned char)+0x7c>
     ba6:	nop
     ba8:	.word	0x20000008
     bac:	.word	0x200000d4
     bb0:	.word	0x20000050
     bb4:	.word	0x20000074
     bb8:	.word	0x2000002c

00000bbc <StreamFile<FsBaseFile, unsigned long long>::flush()>:
   */
  int available() {
    return BaseFile::available();
  }
  /** Ensure that any bytes written to the file are saved to the SD card. */
  void flush() {
     bbc:	ldr	r3, [r0, #72]	; 0x48
   *
   * \return true for success or false for failure.
   */
  bool sync() {
    return m_fFile ? m_fFile->sync() :
           m_xFile ? m_xFile->sync() : false;
     bbe:	cbz	r3, bc6 <StreamFile<FsBaseFile, unsigned long long>::flush()+0xa>
     bc0:	mov	r0, r3
     bc2:	b.w	a2d8 <FatFile::sync()>
     bc6:	ldr	r0, [r0, #76]	; 0x4c
     bc8:	cbz	r0, bce <StreamFile<FsBaseFile, unsigned long long>::flush()+0x12>
     bca:	b.w	9140 <ExFatFile::sync()>
     bce:	bx	lr

00000bd0 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)>:
   * \param[in] size Number of bytes to write.
   *
   * \return For success write() returns the number of bytes written, always
   * \a size.
   */
  size_t write(const uint8_t* buffer, size_t size) {
     bd0:	ldr	r3, [r0, #72]	; 0x48
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const void* buf, size_t count) {
    return m_fFile ? m_fFile->write(buf, count) :
           m_xFile ? m_xFile->write(buf, count) : 0;
     bd2:	cbz	r3, bda <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)+0xa>
     bd4:	mov	r0, r3
     bd6:	b.w	a35c <FatFile::write(void const*, unsigned int)>
     bda:	ldr	r0, [r0, #76]	; 0x4c
     bdc:	cbz	r0, be2 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)+0x12>
     bde:	b.w	9554 <ExFatFile::write(void const*, unsigned int)>
    return BaseFile::write(buffer, size);
  }
     be2:	bx	lr

00000be4 <SDFile::write(void const*, unsigned int)>:
	virtual void whoami() {
		Serial.printf("   SDFile this=%x, refcount=%u\n",
			(int)this, getRefcount());
	}
#endif
	virtual size_t write(const void *buf, size_t size) {
     be4:	ldr	r3, [r0, #92]	; 0x5c
     be6:	cbz	r3, bee <SDFile::write(void const*, unsigned int)+0xa>
     be8:	mov	r0, r3
     bea:	b.w	a35c <FatFile::write(void const*, unsigned int)>
     bee:	ldr	r0, [r0, #96]	; 0x60
     bf0:	cbz	r0, bf6 <SDFile::write(void const*, unsigned int)+0x12>
     bf2:	b.w	9554 <ExFatFile::write(void const*, unsigned int)>
		return sdfatfile.write(buf, size);
	}
     bf6:	bx	lr

00000bf8 <SDFile::available()>:
	virtual int peek() {
		return sdfatfile.peek();
	}
	virtual int available() {
     bf8:	ldr	r2, [r0, #92]	; 0x5c
  /** \return number of bytes available from the current position to EOF
   *   or INT_MAX if more than INT_MAX bytes are available.
   */
  int available() {
    return m_fFile ? m_fFile->available() :
           m_xFile ? m_xFile->available() : 0;
     bfa:	cbz	r2, c16 <SDFile::available()+0x1e>
  void fsetpos(const fspos_t* pos);
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint32_t available32() {
    return isFile() ? fileSize() - curPosition() : 0;
     bfc:	ldrb	r3, [r2, #0]
     bfe:	and.w	r3, r3, #8
     c02:	and.w	r0, r3, #255	; 0xff
     c06:	cbz	r3, c4c <SDFile::available()+0x54>
   * Zero is returned for directory files.
   *
   */
  int available() {
    uint32_t n = available32();
    return n > INT_MAX ? INT_MAX : n;
     c08:	ldr	r3, [r2, #28]
     c0a:	ldr	r0, [r2, #20]
     c0c:	subs	r0, r3, r0
     c0e:	it	mi
     c10:	mvnmi.w	r0, #2147483648	; 0x80000000
     c14:	bx	lr
     c16:	ldr	r1, [r0, #96]	; 0x60
     c18:	cbz	r1, c4e <SDFile::available()+0x56>
  }
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint64_t available64() {
    return isFile() ? fileSize() - curPosition() : 0;
     c1a:	ldrb.w	r3, [r1, #49]	; 0x31
     c1e:	and.w	r3, r3, #8
     c22:	and.w	r0, r3, #255	; 0xff
     c26:	cbz	r3, c4c <SDFile::available()+0x54>
     c28:	ldrd	r2, r3, [r1, #16]
     c2c:	ldrd	r0, r1, [r1]
     c30:	push	{r4, r5}
     c32:	subs	r0, r2, r0
     c34:	mov.w	r5, #0
     c38:	mvn.w	r4, #2147483648	; 0x80000000
     c3c:	sbc.w	r1, r3, r1
     c40:	cmp	r5, r1
     c42:	it	eq
     c44:	cmpeq	r4, r0
     c46:	bcs.n	c4a <SDFile::available()+0x52>
     c48:	mov	r0, r4
		return sdfatfile.available();
	}
     c4a:	pop	{r4, r5}
     c4c:	bx	lr
     c4e:	mov	r0, r1
     c50:	bx	lr
     c52:	nop

00000c54 <SDFile::seek(unsigned long long, int)>:
		return sdfatfile.read(buf, nbyte);
	}
	virtual bool truncate(uint64_t size=0) {
		return sdfatfile.truncate(size);
	}
	virtual bool seek(uint64_t pos, int mode = SeekSet) {
     c54:	push	{r4, r6, r7}
     c56:	ldr	r4, [sp, #12]
     c58:	mov	r6, r2
     c5a:	mov	r7, r3
		if (mode == SeekSet) return sdfatfile.seekSet(pos);
     c5c:	cbz	r4, c6c <SDFile::seek(unsigned long long, int)+0x18>
		if (mode == SeekCur) return sdfatfile.seekCur(pos);
     c5e:	cmp	r4, #1
     c60:	beq.n	ca0 <SDFile::seek(unsigned long long, int)+0x4c>
		if (mode == SeekEnd) return sdfatfile.seekEnd(pos);
     c62:	cmp	r4, #2
     c64:	beq.n	c82 <SDFile::seek(unsigned long long, int)+0x2e>
		return false;
	}
     c66:	movs	r0, #0
     c68:	pop	{r4, r6, r7}
     c6a:	bx	lr
     c6c:	ldr	r4, [r0, #92]	; 0x5c
   *
   * \return true for success or false for failure.
   */
  bool seekSet(uint64_t pos) {
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
           m_xFile ? m_xFile->seekSet(pos) : false;
     c6e:	cbz	r4, ca8 <SDFile::seek(unsigned long long, int)+0x54>
   * \param[in] pos The new position in bytes from the beginning of the file.
   *
   * \return true for success or false for failure.
   */
  bool seekSet(uint64_t pos) {
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
     c70:	cmp	r3, #1
     c72:	it	eq
     c74:	cmpeq	r2, #0
     c76:	bcs.n	c66 <SDFile::seek(unsigned long long, int)+0x12>
     c78:	mov	r0, r4
     c7a:	mov	r1, r2
     c7c:	pop	{r4, r6, r7}
     c7e:	b.w	a0dc <FatFile::seekSet(unsigned long)>
     c82:	ldr	r3, [r0, #92]	; 0x5c
           m_xFile ? m_xFile->fgets(str, num, delim) : -1;
  }
  /** \return The total number of bytes in a file. */
  uint64_t fileSize() {
    return m_fFile ? m_fFile->fileSize() :
           m_xFile ? m_xFile->fileSize() : 0;
     c84:	cbz	r3, cb4 <SDFile::seek(unsigned long long, int)+0x60>
   * Can't be used for directory files since file size is not defined.
   * \param[in] offset The new position in bytes from end-of-file.
   * \return true for success or false for failure.
   */
  bool seekEnd(int64_t offset = 0) {
    return seekSet(fileSize() + offset);
     c86:	ldr	r2, [r3, #28]
     c88:	adds	r6, r6, r2
     c8a:	adc.w	r7, r7, #0
   * \param[in] pos The new position in bytes from the beginning of the file.
   *
   * \return true for success or false for failure.
   */
  bool seekSet(uint64_t pos) {
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
     c8e:	cmp	r7, #1
     c90:	it	eq
     c92:	cmpeq	r6, #0
     c94:	bcs.n	c66 <SDFile::seek(unsigned long long, int)+0x12>
     c96:	mov	r1, r6
     c98:	mov	r0, r3
     c9a:	pop	{r4, r6, r7}
     c9c:	b.w	a0dc <FatFile::seekSet(unsigned long)>
     ca0:	ldr	r3, [r0, #92]	; 0x5c
   */
  bool close();
  /** \return The current position for a file or directory. */
  uint64_t curPosition() {
    return m_fFile ? m_fFile->curPosition() :
           m_xFile ? m_xFile->curPosition() : 0;
     ca2:	cbz	r3, cca <SDFile::seek(unsigned long long, int)+0x76>
  /** Set the files position to current position + \a pos. See seekSet().
   * \param[in] offset The new position in bytes from the current position.
   * \return true for success or false for failure.
   */
  bool seekCur(int64_t offset) {
    return seekSet(curPosition() + offset);
     ca4:	ldr	r2, [r3, #20]
     ca6:	b.n	c88 <SDFile::seek(unsigned long long, int)+0x34>
   *
   * \return true for success or false for failure.
   */
  bool seekSet(uint64_t pos) {
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
           m_xFile ? m_xFile->seekSet(pos) : false;
     ca8:	ldr	r0, [r0, #96]	; 0x60
     caa:	cmp	r0, #0
     cac:	beq.n	c66 <SDFile::seek(unsigned long long, int)+0x12>
     cae:	pop	{r4, r6, r7}
     cb0:	b.w	8208 <ExFatFile::seekSet(unsigned long long)>
           m_xFile ? m_xFile->fgets(str, num, delim) : -1;
  }
  /** \return The total number of bytes in a file. */
  uint64_t fileSize() {
    return m_fFile ? m_fFile->fileSize() :
           m_xFile ? m_xFile->fileSize() : 0;
     cb4:	ldr	r3, [r0, #96]	; 0x60
     cb6:	cmp	r3, #0
     cb8:	beq.n	c66 <SDFile::seek(unsigned long long, int)+0x12>
   *
   * \return true for success or false for failure.
   */
  bool seekSet(uint64_t pos) {
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
           m_xFile ? m_xFile->seekSet(pos) : false;
     cba:	mov	r0, r3
     cbc:	ldrd	r2, r3, [r3, #16]
     cc0:	adds	r2, r2, r6
     cc2:	adcs	r3, r7
     cc4:	pop	{r4, r6, r7}
     cc6:	b.w	8208 <ExFatFile::seekSet(unsigned long long)>
   */
  bool close();
  /** \return The current position for a file or directory. */
  uint64_t curPosition() {
    return m_fFile ? m_fFile->curPosition() :
           m_xFile ? m_xFile->curPosition() : 0;
     cca:	ldr	r3, [r0, #96]	; 0x60
     ccc:	cmp	r3, #0
     cce:	beq.n	c66 <SDFile::seek(unsigned long long, int)+0x12>
   *
   * \return true for success or false for failure.
   */
  bool seekSet(uint64_t pos) {
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
           m_xFile ? m_xFile->seekSet(pos) : false;
     cd0:	mov	r0, r3
     cd2:	ldrd	r2, r3, [r3]
     cd6:	adds	r2, r2, r6
     cd8:	adcs	r3, r7
     cda:	b.n	cae <SDFile::seek(unsigned long long, int)+0x5a>

00000cdc <File::~File()>:
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
     cdc:	ldr	r3, [pc, #32]	; (d00 <File::~File()+0x24>)
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
     cde:	ldr	r2, [r0, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
     ce0:	push	{r4, lr}
     ce2:	mov	r4, r0
     ce4:	str	r3, [r0, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
     ce6:	cbz	r2, cfa <File::~File()+0x1e>
     ce8:	ldr	r3, [r2, #16]
     cea:	subs	r3, #1
     cec:	str	r3, [r2, #16]
     cee:	cbnz	r3, cfa <File::~File()+0x1e>
     cf0:	ldr	r0, [r0, #16]
     cf2:	cbz	r0, cfa <File::~File()+0x1e>
     cf4:	ldr	r3, [r0, #0]
     cf6:	ldr	r3, [r3, #32]
     cf8:	blx	r3
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
		invalidate();
	}
     cfa:	mov	r0, r4
     cfc:	pop	{r4, pc}
     cfe:	nop
     d00:	.word	0x20000074

00000d04 <SDFile::~SDFile()>:
	// Only the abstract File class which references these derived
	// classes is meant to have a public constructor!
	SDFile(const SDFAT_FILE &file) : sdfatfile(file), filename(nullptr) { }
	friend class SDClass;
public:
	virtual ~SDFile(void) {
     d04:	push	{r3, r4, r5, lr}
     d06:	ldr	r2, [pc, #84]	; (d5c <SDFile::~SDFile()+0x58>)
     d08:	mov	r4, r0
  bool isHidden() {
    return m_fFile ? m_fFile->isHidden() :
           m_xFile ? m_xFile->isHidden() : false;
  }
  /** \return True if this is an open file/directory else false. */
  bool isOpen() {return m_fFile || m_xFile;}
     d0a:	ldr	r3, [r0, #92]	; 0x5c
		if (sdfatfile) sdfatfile.close();
     d0c:	add.w	r5, r0, #36	; 0x24
	// Only the abstract File class which references these derived
	// classes is meant to have a public constructor!
	SDFile(const SDFAT_FILE &file) : sdfatfile(file), filename(nullptr) { }
	friend class SDClass;
public:
	virtual ~SDFile(void) {
     d10:	str	r2, [r0, #0]
     d12:	cbz	r3, d52 <SDFile::~SDFile()+0x4e>
		if (sdfatfile) sdfatfile.close();
     d14:	mov	r0, r5
     d16:	bl	b408 <FsBaseFile::close()>
		if (filename) free(filename);
     d1a:	ldr	r0, [r4, #100]	; 0x64
     d1c:	cbz	r0, d22 <SDFile::~SDFile()+0x1e>
     d1e:	bl	10600 <free>
/**
 * \class StreamFile
 * \brief StreamFile class.
 */
template<class BaseFile, typename PosType>
class StreamFile : public stream_t, public BaseFile {
     d22:	ldr	r3, [pc, #60]	; (d60 <SDFile::~SDFile()+0x5c>)
 */
class FsBaseFile {
 public:
  FsBaseFile() : m_fFile(nullptr), m_xFile(nullptr) {}

  ~FsBaseFile() {close();}
     d24:	mov	r0, r5
     d26:	str	r3, [r4, #20]
     d28:	bl	b408 <FsBaseFile::close()>
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
     d2c:	ldr	r3, [pc, #52]	; (d64 <SDFile::~SDFile()+0x60>)
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
     d2e:	ldr	r2, [r4, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
     d30:	str	r3, [r4, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
     d32:	cbz	r2, d46 <SDFile::~SDFile()+0x42>
     d34:	ldr	r3, [r2, #16]
     d36:	subs	r3, #1
     d38:	str	r3, [r2, #16]
     d3a:	cbnz	r3, d46 <SDFile::~SDFile()+0x42>
     d3c:	ldr	r0, [r4, #16]
     d3e:	cbz	r0, d46 <SDFile::~SDFile()+0x42>
     d40:	ldr	r3, [r0, #0]
     d42:	ldr	r3, [r3, #32]
     d44:	blx	r3
	}
     d46:	mov	r0, r4
     d48:	movs	r1, #104	; 0x68
     d4a:	bl	f6e0 <operator delete(void*, unsigned int)>
     d4e:	mov	r0, r4
     d50:	pop	{r3, r4, r5, pc}
  bool isHidden() {
    return m_fFile ? m_fFile->isHidden() :
           m_xFile ? m_xFile->isHidden() : false;
  }
  /** \return True if this is an open file/directory else false. */
  bool isOpen() {return m_fFile || m_xFile;}
     d52:	ldr	r3, [r0, #96]	; 0x60
     d54:	cmp	r3, #0
     d56:	bne.n	d14 <SDFile::~SDFile()+0x10>
     d58:	b.n	d1a <SDFile::~SDFile()+0x16>
     d5a:	nop
     d5c:	.word	0x200000d4
     d60:	.word	0x2000002c
     d64:	.word	0x20000074

00000d68 <File::~File()>:
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
     d68:	ldr	r3, [pc, #40]	; (d94 <File::~File()+0x2c>)
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
     d6a:	ldr	r2, [r0, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
     d6c:	push	{r4, lr}
     d6e:	mov	r4, r0
     d70:	str	r3, [r0, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
     d72:	cbz	r2, d86 <File::~File()+0x1e>
     d74:	ldr	r3, [r2, #16]
     d76:	subs	r3, #1
     d78:	str	r3, [r2, #16]
     d7a:	cbnz	r3, d86 <File::~File()+0x1e>
     d7c:	ldr	r0, [r0, #16]
     d7e:	cbz	r0, d86 <File::~File()+0x1e>
     d80:	ldr	r3, [r0, #0]
     d82:	ldr	r3, [r3, #32]
     d84:	blx	r3
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
		invalidate();
	}
     d86:	mov	r0, r4
     d88:	movs	r1, #20
     d8a:	bl	f6e0 <operator delete(void*, unsigned int)>
     d8e:	mov	r0, r4
     d90:	pop	{r4, pc}
     d92:	nop
     d94:	.word	0x20000074

00000d98 <MTPStorage_SD::~MTPStorage_SD()>:

  void mtp_yield(void);


// Storage implementation for SD. SD needs to be already initialized.
class MTPStorage_SD : public MTPStorageInterface, mSD_Base
     d98:	push	{r3, r4, r5, lr}
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
     d9a:	ldr.w	r2, [r0, #224]	; 0xe0
     d9e:	mov	r4, r0
     da0:	ldr	r3, [pc, #100]	; (e08 <MTPStorage_SD::~MTPStorage_SD()+0x70>)
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
     da2:	ldr	r5, [pc, #104]	; (e0c <MTPStorage_SD::~MTPStorage_SD()+0x74>)
     da4:	str	r3, [r0, #0]
     da6:	str.w	r5, [r0, #208]	; 0xd0
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
     daa:	cbz	r2, db4 <MTPStorage_SD::~MTPStorage_SD()+0x1c>
     dac:	ldr	r3, [r2, #16]
     dae:	subs	r3, #1
     db0:	str	r3, [r2, #16]
     db2:	cbz	r3, de8 <MTPStorage_SD::~MTPStorage_SD()+0x50>
     db4:	ldr.w	r2, [r4, #204]	; 0xcc
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
     db8:	str.w	r5, [r4, #188]	; 0xbc
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
     dbc:	cbz	r2, dc6 <MTPStorage_SD::~MTPStorage_SD()+0x2e>
     dbe:	ldr	r3, [r2, #16]
     dc0:	subs	r3, #1
     dc2:	str	r3, [r2, #16]
     dc4:	cbz	r3, df8 <MTPStorage_SD::~MTPStorage_SD()+0x60>
     dc6:	ldr.w	r2, [r4, #184]	; 0xb8
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
     dca:	str.w	r5, [r4, #168]	; 0xa8
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
     dce:	cbz	r2, de4 <MTPStorage_SD::~MTPStorage_SD()+0x4c>
     dd0:	ldr	r3, [r2, #16]
     dd2:	subs	r3, #1
     dd4:	str	r3, [r2, #16]
     dd6:	cbnz	r3, de4 <MTPStorage_SD::~MTPStorage_SD()+0x4c>
     dd8:	ldr.w	r0, [r4, #184]	; 0xb8
     ddc:	cbz	r0, de4 <MTPStorage_SD::~MTPStorage_SD()+0x4c>
     dde:	ldr	r3, [r0, #0]
     de0:	ldr	r3, [r3, #32]
     de2:	blx	r3
     de4:	mov	r0, r4
     de6:	pop	{r3, r4, r5, pc}
     de8:	ldr.w	r0, [r0, #224]	; 0xe0
     dec:	cmp	r0, #0
     dee:	beq.n	db4 <MTPStorage_SD::~MTPStorage_SD()+0x1c>
     df0:	ldr	r3, [r0, #0]
     df2:	ldr	r3, [r3, #32]
     df4:	blx	r3
     df6:	b.n	db4 <MTPStorage_SD::~MTPStorage_SD()+0x1c>
     df8:	ldr.w	r0, [r4, #204]	; 0xcc
     dfc:	cmp	r0, #0
     dfe:	beq.n	dc6 <MTPStorage_SD::~MTPStorage_SD()+0x2e>
     e00:	ldr	r3, [r0, #0]
     e02:	ldr	r3, [r3, #32]
     e04:	blx	r3
     e06:	b.n	dc6 <MTPStorage_SD::~MTPStorage_SD()+0x2e>
     e08:	.word	0x20000288
     e0c:	.word	0x20000074

00000e10 <SDFile::~SDFile()>:
	// Only the abstract File class which references these derived
	// classes is meant to have a public constructor!
	SDFile(const SDFAT_FILE &file) : sdfatfile(file), filename(nullptr) { }
	friend class SDClass;
public:
	virtual ~SDFile(void) {
     e10:	push	{r3, r4, r5, lr}
     e12:	ldr	r2, [pc, #76]	; (e60 <SDFile::~SDFile()+0x50>)
     e14:	mov	r4, r0
     e16:	ldr	r3, [r0, #92]	; 0x5c
		if (sdfatfile) sdfatfile.close();
     e18:	add.w	r5, r0, #36	; 0x24
	// Only the abstract File class which references these derived
	// classes is meant to have a public constructor!
	SDFile(const SDFAT_FILE &file) : sdfatfile(file), filename(nullptr) { }
	friend class SDClass;
public:
	virtual ~SDFile(void) {
     e1c:	str	r2, [r0, #0]
     e1e:	cbz	r3, e56 <SDFile::~SDFile()+0x46>
		if (sdfatfile) sdfatfile.close();
     e20:	mov	r0, r5
     e22:	bl	b408 <FsBaseFile::close()>
		if (filename) free(filename);
     e26:	ldr	r0, [r4, #100]	; 0x64
     e28:	cbz	r0, e2e <SDFile::~SDFile()+0x1e>
     e2a:	bl	10600 <free>
     e2e:	ldr	r3, [pc, #52]	; (e64 <SDFile::~SDFile()+0x54>)
 */
class FsBaseFile {
 public:
  FsBaseFile() : m_fFile(nullptr), m_xFile(nullptr) {}

  ~FsBaseFile() {close();}
     e30:	mov	r0, r5
     e32:	str	r3, [r4, #20]
     e34:	bl	b408 <FsBaseFile::close()>
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
     e38:	ldr	r3, [pc, #44]	; (e68 <SDFile::~SDFile()+0x58>)
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
     e3a:	ldr	r2, [r4, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
     e3c:	str	r3, [r4, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
     e3e:	cbz	r2, e52 <SDFile::~SDFile()+0x42>
     e40:	ldr	r3, [r2, #16]
     e42:	subs	r3, #1
     e44:	str	r3, [r2, #16]
     e46:	cbnz	r3, e52 <SDFile::~SDFile()+0x42>
     e48:	ldr	r0, [r4, #16]
     e4a:	cbz	r0, e52 <SDFile::~SDFile()+0x42>
     e4c:	ldr	r3, [r0, #0]
     e4e:	ldr	r3, [r3, #32]
     e50:	blx	r3
	}
     e52:	mov	r0, r4
     e54:	pop	{r3, r4, r5, pc}
  bool isHidden() {
    return m_fFile ? m_fFile->isHidden() :
           m_xFile ? m_xFile->isHidden() : false;
  }
  /** \return True if this is an open file/directory else false. */
  bool isOpen() {return m_fFile || m_xFile;}
     e56:	ldr	r3, [r0, #96]	; 0x60
     e58:	cmp	r3, #0
     e5a:	bne.n	e20 <SDFile::~SDFile()+0x10>
     e5c:	b.n	e26 <SDFile::~SDFile()+0x16>
     e5e:	nop
     e60:	.word	0x200000d4
     e64:	.word	0x2000002c
     e68:	.word	0x20000074

00000e6c <storage_configure()>:
MTPStorage_SD storage;
MTPD       mtpd(&storage);


void storage_configure()
{
     e6c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     e70:	ldr.w	r8, [pc, #608]	; 10d4 <storage_configure()+0x268>
     e74:	sub	sp, #60	; 0x3c
  #if USE_SD==1
    #if defined SD_SCK
      SPI.setMOSI(SD_MOSI);
     e76:	movs	r1, #11
     e78:	ldr	r0, [pc, #560]	; (10ac <storage_configure()+0x240>)
     e7a:	bl	7d14 <SPIClass::setMOSI(unsigned char)>
     e7e:	addw	r5, r8, #1164	; 0x48c
      SPI.setMISO(SD_MISO);
     e82:	movs	r1, #12
     e84:	ldr	r0, [pc, #548]	; (10ac <storage_configure()+0x240>)
     e86:	bl	7d80 <SPIClass::setMISO(unsigned char)>
      SPI.setSCK(SD_SCK);
     e8a:	movs	r1, #13
     e8c:	ldr	r0, [pc, #540]	; (10ac <storage_configure()+0x240>)
     e8e:	bl	7de0 <SPIClass::setSCK(unsigned char)>
   * \param[in] config SDIO configuration.
   * \return generic card pointer or nullptr if SDIO is not supported.
   */
  SdCard* newCard(SdioConfig config) {
#if HAS_SDIO_CLASS
    m_sdioCard.begin(config);
     e92:	mov	r0, r5
     e94:	mov.w	r1, #0
     e98:	bl	c88c <SdioCard::begin(SdioConfig)>
   *
   * \param[in] sdioConfig SDIO configuration.
   * \return true for success or false for failure.
   */
  bool cardBegin(SdioConfig sdioConfig) {
    m_card = m_cardFactory.newCard(sdioConfig);
     e9c:	str.w	r5, [r8, #1160]	; 0x488
    return m_card && !m_card->errorCode();
     ea0:	cbz	r5, eaa <storage_configure()+0x3e>
     ea2:	mov	r0, r5
     ea4:	bl	bfe0 <SdioCard::errorCode() const>
     ea8:	cbz	r0, eba <storage_configure()+0x4e>
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     eaa:	movs	r1, #10
     eac:	ldr	r0, [pc, #512]	; (10b0 <storage_configure()+0x244>)
     eae:	bl	d7d4 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
     eb2:	ldr	r0, [pc, #512]	; (10b4 <storage_configure()+0x248>)
     eb4:	bl	f5bc <Print::println()>
     eb8:	b.n	eb8 <storage_configure()+0x4c>
     eba:	add.w	r4, r8, #4
   *
   * \param[in] sdioConfig SDIO configuration.
   * \return true for success or false for failure.
   */
  bool begin(SdioConfig sdioConfig) {
    return cardBegin(sdioConfig) && Vol::begin(m_card);
     ebe:	ldr.w	r1, [r8, #1160]	; 0x488
     ec2:	mov	r0, r4
     ec4:	bl	b510 <FsVolume::begin(BlockDeviceInterface*)>
     ec8:	cmp	r0, #0
     eca:	beq.n	eaa <storage_configure()+0x3e>
    mSD_Base() {
      fsCount = 0;
    }

    void sd_addFilesystem(FS &fs, const char *name) {
      if (fsCount < MTPD_MAX_FILESYSTEMS) {
     ecc:	ldr	r3, [pc, #488]	; (10b8 <storage_configure()+0x24c>)
     ece:	mov.w	sl, #254	; 0xfe
     ed2:	ldr.w	fp, [pc, #516]	; 10d8 <storage_configure()+0x26c>
     ed6:	mov.w	r9, #0
     eda:	ldr	r3, [r3, #4]
     edc:	cmp	r3, #19
     ede:	bgt.n	ef6 <storage_configure()+0x8a>
        sd_name[fsCount] = name;
     ee0:	ldr	r2, [pc, #468]	; (10b8 <storage_configure()+0x24c>)
     ee2:	ldr.w	r1, [fp]
     ee6:	add.w	r0, r2, r3, lsl #2
        sdx[fsCount++] = &fs;
     eea:	ldr	r4, [pc, #460]	; (10b8 <storage_configure()+0x24c>)
     eec:	adds	r2, r3, #1
      fsCount = 0;
    }

    void sd_addFilesystem(FS &fs, const char *name) {
      if (fsCount < MTPD_MAX_FILESYSTEMS) {
        sd_name[fsCount] = name;
     eee:	str	r1, [r0, #8]
        sdx[fsCount++] = &fs;
     ef0:	str	r2, [r4, #4]
     ef2:	str.w	r8, [r0, #88]	; 0x58
      {
        pinMode(cs[ii],OUTPUT); digitalWriteFast(cs[ii],HIGH);
        if(!sdx[ii].sdfs.begin(SdSpiConfig(cs[ii], SHARED_SPI, SPI_SPEED))) {Serial.println("No storage"); while(1);}
        storage.addFilesystem(sdx[ii], sd_str[ii]);
      }
        uint64_t totalSize = sdx[ii].totalSize();
     ef6:	ldr.w	r1, [r8]
     efa:	ldr	r2, [pc, #448]	; (10bc <storage_configure()+0x250>)
     efc:	ldr	r3, [r1, #28]
     efe:	cmp	r3, r2
     f00:	bne.w	103c <storage_configure()+0x1d0>
     f04:	ldr.w	r2, [r8, #1148]	; 0x47c
     f08:	cmp	r2, #0
     f0a:	beq.w	106c <storage_configure()+0x200>
     f0e:	ldrb	r0, [r2, #6]
     f10:	mov.w	r3, #512	; 0x200
     f14:	ldr	r2, [r2, #28]
     f16:	lsls	r3, r0
     f18:	subs	r2, #1
     f1a:	uxth	r3, r3
     f1c:	umull	r2, r3, r3, r2
  uint8_t bytesPerClusterShift() {
    return m_sectorsPerClusterShift + m_bytesPerSectorShift;
  }
  /** \return Number of bytes in a cluster. */
  uint16_t bytesPerCluster() {
    return m_bytesPerSector << m_sectorsPerClusterShift;
     f20:	strd	r2, r3, [sp, #8]
        uint64_t usedSize  = sdx[ii].usedSize();
     f24:	ldr	r3, [r1, #24]
     f26:	ldr	r2, [pc, #408]	; (10c0 <storage_configure()+0x254>)
     f28:	cmp	r3, r2
     f2a:	bne.w	1032 <storage_configure()+0x1c6>
     f2e:	ldr.w	r0, [r8, #1148]	; 0x47c
     f32:	cmp	r0, #0
     f34:	beq.w	105a <storage_configure()+0x1ee>
    m_cache.invalidate();
    return m_cache.buffer();
  }
  /** \return The total number of clusters in the volume. */
  uint32_t clusterCount() const {
    return m_lastCluster - 1;
     f38:	ldr	r4, [r0, #28]
     f3a:	subs	r4, #1
    return m_fVol ? m_fVol->fatStartSector() :
           m_xVol ? m_xVol->fatStartSector() : 0;
  }
  /** \return the free cluster count. */
  uint32_t freeClusterCount() {
    return m_fVol ? m_fVol->freeClusterCount() :
     f3c:	bl	a7a4 <FatPartition::freeClusterCount()>
     f40:	ldr.w	r3, [r8, #1148]	; 0x47c
	}
	bool rmdir(const char *filepath) {
		return sdfs.rmdir(filepath);
	}
	uint64_t usedSize() {
		return (uint64_t)(sdfs.clusterCount() - sdfs.freeClusterCount())
     f44:	subs	r4, r4, r0
   */
  bool begin(BlockDevice* blockDev);
  /** \return the number of bytes in a cluster. */
  uint32_t bytesPerCluster() {
    return m_fVol ? m_fVol->bytesPerCluster() :
           m_xVol ? m_xVol->bytesPerCluster() : 0;
     f46:	cmp	r3, #0
     f48:	beq.n	104a <storage_configure()+0x1de>
     f4a:	ldrb	r2, [r3, #6]
     f4c:	mov.w	r3, #512	; 0x200
     f50:	lsls	r3, r2
     f52:	uxth	r3, r3
     f54:	umull	r4, r5, r3, r4
        Serial.printf("Storage %d %d %s ",ii,cs[ii],sd_str[ii]); Serial.print(totalSize); Serial.print(" "); Serial.println(usedSize);
     f58:	ldr.w	r1, [fp], #4
	size_t print(int n)				{ return print((long)n); }
	size_t print(unsigned int n)			{ return printNumber(n, 10, 0); }
	size_t print(long n);
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
	size_t print(int64_t n);
	size_t print(uint64_t n)			{ return printNumber64(n, 10, 0); }
     f5c:	movs	r7, #0
     f5e:	movs	r6, #10
     f60:	mov	r2, r9
     f62:	mov	r3, sl
     f64:	str	r1, [sp, #0]
     f66:	ldr	r0, [pc, #332]	; (10b4 <storage_configure()+0x248>)
      SPI.setMOSI(SD_MOSI);
      SPI.setMISO(SD_MISO);
      SPI.setSCK(SD_SCK);
    #endif

    for(int ii=0; ii<nsd; ii++)
     f68:	add.w	r9, r9, #1
        if(!sdx[ii].sdfs.begin(SdSpiConfig(cs[ii], SHARED_SPI, SPI_SPEED))) {Serial.println("No storage"); while(1);}
        storage.addFilesystem(sdx[ii], sd_str[ii]);
      }
        uint64_t totalSize = sdx[ii].totalSize();
        uint64_t usedSize  = sdx[ii].usedSize();
        Serial.printf("Storage %d %d %s ",ii,cs[ii],sd_str[ii]); Serial.print(totalSize); Serial.print(" "); Serial.println(usedSize);
     f6c:	ldr	r1, [pc, #340]	; (10c4 <storage_configure()+0x258>)
     f6e:	addw	r8, r8, #1204	; 0x4b4
     f72:	bl	f5ec <Print::printf(char const*, ...)>
     f76:	ldr	r0, [pc, #316]	; (10b4 <storage_configure()+0x248>)
     f78:	ldrd	r2, r3, [sp, #8]
     f7c:	stmia.w	sp, {r6, r7}
     f80:	bl	f60c <Print::printNumber64(unsigned long long, unsigned char, unsigned char)>
     f84:	movs	r1, #1
     f86:	ldr	r0, [pc, #320]	; (10c8 <storage_configure()+0x25c>)
     f88:	bl	d7d4 <usb_serial_write>
     f8c:	mov	r2, r4
     f8e:	mov	r3, r5
     f90:	ldr	r0, [pc, #288]	; (10b4 <storage_configure()+0x248>)
     f92:	stmia.w	sp, {r6, r7}
     f96:	bl	f60c <Print::printNumber64(unsigned long long, unsigned char, unsigned char)>
	size_t println(int n)				{ return print(n) + println(); }
	size_t println(unsigned int n)			{ return print(n) + println(); }
	size_t println(long n)				{ return print(n) + println(); }
	size_t println(unsigned long n)			{ return print(n) + println(); }
	size_t println(int64_t n)			{ return print(n) + println(); }
	size_t println(uint64_t n)			{ return print(n) + println(); }
     f9a:	ldr	r0, [pc, #280]	; (10b4 <storage_configure()+0x248>)
     f9c:	bl	f5bc <Print::println()>
      SPI.setMOSI(SD_MOSI);
      SPI.setMISO(SD_MISO);
      SPI.setSCK(SD_SCK);
    #endif

    for(int ii=0; ii<nsd; ii++)
     fa0:	cmp.w	r9, #2
     fa4:	beq.n	102c <storage_configure()+0x1c0>
     fa6:	mov.w	sl, #38	; 0x26
     faa:	add.w	r3, r8, #4
        if(!sdx[ii].sdfs.begin(SdioConfig(FIFO_SDIO))) {Serial.println("No storage"); while(1);};
        storage.addFilesystem(sdx[ii], sd_str[ii]);
      }
      else if(cs[ii]<BUILTIN_SDCARD)
      {
        pinMode(cs[ii],OUTPUT); digitalWriteFast(cs[ii],HIGH);
     fae:	movs	r1, #1
     fb0:	add	r4, sp, #32
     fb2:	uxtb.w	r6, sl
     fb6:	str	r3, [sp, #8]
     fb8:	add.w	r5, r8, #1176	; 0x498
     fbc:	mov	r0, r6
     fbe:	bl	ec44 <pinMode>
     fc2:	ldr	r3, [pc, #264]	; (10cc <storage_configure()+0x260>)
     fc4:	add	r2, sp, #20
     fc6:	strb.w	r6, [sp, #20]
     fca:	str	r3, [sp, #24]
				CORE_PIN54_PORTCLEAR = CORE_PIN54_BITMASK;
#endif
			}
		}
	} else {
		if(val) *portSetRegister(pin) = digitalPinToBitMask(pin);
     fcc:	mov.w	lr, r6, lsl #4
     fd0:	strb.w	r7, [sp, #21]
     fd4:	str	r7, [sp, #28]
     fd6:	ldr	r3, [pc, #248]	; (10d0 <storage_configure()+0x264>)
     fd8:	ldmia	r2, {r0, r1, r2}
     fda:	stmia.w	r4, {r0, r1, r2}
     fde:	add.w	r2, r3, lr
     fe2:	ldr	r1, [pc, #232]	; (10cc <storage_configure()+0x260>)
     fe4:	strb.w	r6, [sp, #32]
     fe8:	add	r3, sp, #44	; 0x2c
     fea:	strb.w	r7, [sp, #33]	; 0x21
     fee:	str	r7, [sp, #40]	; 0x28
     ff0:	str	r1, [sp, #36]	; 0x24
     ff2:	ldr.w	ip, [r2, #12]
     ff6:	ldr	r2, [pc, #216]	; (10d0 <storage_configure()+0x264>)
     ff8:	ldr.w	r7, [r2, lr]
     ffc:	ldmia.w	r4, {r0, r1, r2}
    1000:	str.w	ip, [r7, #132]	; 0x84
    1004:	stmia.w	r3, {r0, r1, r2}
   *
   * \param[in] config SPI configuration.
   * \return generic card pointer.
   */
  SdCard* newCard(SdSpiConfig config) {
    m_spiCard.begin(config);
    1008:	mov	r0, r5
    100a:	ldmia	r3, {r1, r2, r3}
    100c:	bl	b85c <SdSpiCard::begin(SdSpiConfig)>
   *
   * \param[in] spiConfig SPI configuration.
   * \return true for success or false for failure.
   */
  bool cardBegin(SdSpiConfig spiConfig) {
    m_card = m_cardFactory.newCard(spiConfig);
    1010:	str.w	r5, [r8, #1160]	; 0x488
    return m_card && !m_card->errorCode();
    1014:	cbz	r5, 101c <storage_configure()+0x1b0>
    1016:	ldrb.w	r3, [r8, #1199]	; 0x4af
    101a:	cbz	r3, 1084 <storage_configure()+0x218>
    101c:	movs	r1, #10
    101e:	ldr	r0, [pc, #144]	; (10b0 <storage_configure()+0x244>)
    1020:	bl	d7d4 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    1024:	ldr	r0, [pc, #140]	; (10b4 <storage_configure()+0x248>)
    1026:	bl	f5bc <Print::println()>
    102a:	b.n	102a <storage_configure()+0x1be>
      uint64_t usedSize  = ramfs[ii].usedSize();
      Serial.printf("Storage %d %s ",ii,lfs_str[ii]); Serial.print(totalSize); Serial.print(" "); Serial.println(usedSize);

    }
    #endif
}
    102c:	add	sp, #60	; 0x3c
    102e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        pinMode(cs[ii],OUTPUT); digitalWriteFast(cs[ii],HIGH);
        if(!sdx[ii].sdfs.begin(SdSpiConfig(cs[ii], SHARED_SPI, SPI_SPEED))) {Serial.println("No storage"); while(1);}
        storage.addFilesystem(sdx[ii], sd_str[ii]);
      }
        uint64_t totalSize = sdx[ii].totalSize();
        uint64_t usedSize  = sdx[ii].usedSize();
    1032:	mov	r0, r8
    1034:	blx	r3
    1036:	mov	r4, r0
    1038:	mov	r5, r1
    103a:	b.n	f58 <storage_configure()+0xec>
      {
        pinMode(cs[ii],OUTPUT); digitalWriteFast(cs[ii],HIGH);
        if(!sdx[ii].sdfs.begin(SdSpiConfig(cs[ii], SHARED_SPI, SPI_SPEED))) {Serial.println("No storage"); while(1);}
        storage.addFilesystem(sdx[ii], sd_str[ii]);
      }
        uint64_t totalSize = sdx[ii].totalSize();
    103c:	mov	r0, r8
    103e:	blx	r3
    1040:	strd	r0, r1, [sp, #8]
    1044:	ldr.w	r1, [r8]
    1048:	b.n	f24 <storage_configure()+0xb8>
    104a:	ldr.w	r3, [r8, #1152]	; 0x480
    104e:	cbz	r3, 109c <storage_configure()+0x230>
    1050:	ldr.w	r3, [r3, #1076]	; 0x434
    1054:	umull	r4, r5, r3, r4
    1058:	b.n	f58 <storage_configure()+0xec>
  /** Change global working volume to this volume. */
  void chvol() {m_cwv = this;}
  /** \return The total number of clusters in the volume. */
  uint32_t clusterCount() {
    return m_fVol ? m_fVol->clusterCount() :
           m_xVol ? m_xVol->clusterCount() : 0;
    105a:	ldr.w	r3, [r8, #1152]	; 0x480
    105e:	cbz	r3, 109c <storage_configure()+0x230>
           m_xVol ? m_xVol->fatStartSector() : 0;
  }
  /** \return the free cluster count. */
  uint32_t freeClusterCount() {
    return m_fVol ? m_fVol->freeClusterCount() :
           m_xVol ? m_xVol->freeClusterCount() : 0;
    1060:	mov	r0, r3
    1062:	ldr.w	r4, [r3, #1064]	; 0x428
    1066:	bl	8cec <ExFatPartition::freeClusterCount()>
    106a:	b.n	f40 <storage_configure()+0xd4>
  /** Change global working volume to this volume. */
  void chvol() {m_cwv = this;}
  /** \return The total number of clusters in the volume. */
  uint32_t clusterCount() {
    return m_fVol ? m_fVol->clusterCount() :
           m_xVol ? m_xVol->clusterCount() : 0;
    106c:	ldr.w	r3, [r8, #1152]	; 0x480
    1070:	cbz	r3, 10a2 <storage_configure()+0x236>
    1072:	ldr.w	r2, [r3, #1064]	; 0x428
    1076:	ldr.w	r3, [r3, #1076]	; 0x434
    107a:	umull	r3, r4, r2, r3
    107e:	strd	r3, r4, [sp, #8]
    1082:	b.n	f24 <storage_configure()+0xb8>
   *
   * \param[in] spiConfig SPI configuration.
   * \return true for success or false for failure.
   */
  bool begin(SdSpiConfig spiConfig) {
    return cardBegin(spiConfig) && Vol::begin(m_card);
    1084:	mov	r1, r5
    1086:	ldr	r0, [sp, #8]
    1088:	bl	b510 <FsVolume::begin(BlockDeviceInterface*)>
    108c:	cmp	r0, #0
    108e:	beq.n	101c <storage_configure()+0x1b0>
    mSD_Base() {
      fsCount = 0;
    }

    void sd_addFilesystem(FS &fs, const char *name) {
      if (fsCount < MTPD_MAX_FILESYSTEMS) {
    1090:	ldr	r3, [pc, #36]	; (10b8 <storage_configure()+0x24c>)
    1092:	ldr	r3, [r3, #4]
    1094:	cmp	r3, #19
    1096:	ble.w	ee0 <storage_configure()+0x74>
    109a:	b.n	ef6 <storage_configure()+0x8a>
    109c:	movs	r4, #0
    109e:	movs	r5, #0
    10a0:	b.n	f58 <storage_configure()+0xec>
    10a2:	movs	r3, #0
    10a4:	movs	r4, #0
    10a6:	strd	r3, r4, [sp, #8]
    10aa:	b.n	f24 <storage_configure()+0xb8>
    10ac:	.word	0x20000bcc
    10b0:	.word	0x200001d4
    10b4:	.word	0x20000c58
    10b8:	.word	0x20001c40
    10bc:	.word	0x00000a91
    10c0:	.word	0x000009d5
    10c4:	.word	0x200001e0
    10c8:	.word	0x200003b4
    10cc:	.word	0x00f42400
    10d0:	.word	0x20000508
    10d4:	.word	0x20002d48
    10d8:	.word	0x20000bac

000010dc <setup>:

void acq_init(int32_t fsamp);
int16_t acq_check(int16_t state);

void setup()
{ while(!Serial && millis()<3000); 
    10dc:	push	{r4, r5, r6, lr}
    10de:	ldr	r1, [pc, #132]	; (1164 <setup+0x88>)
    10e0:	movw	r0, #2999	; 0xbb7
    10e4:	ldr	r2, [pc, #128]	; (1168 <setup+0x8c>)
        uint8_t stopbits(void) { uint8_t b = usb_cdc_line_coding[1]; if (!b) b = 1; return b; }
        uint8_t paritytype(void) { return usb_cdc_line_coding[1] >> 8; } // 0=none, 1=odd, 2=even
        uint8_t numbits(void) { return usb_cdc_line_coding[1] >> 16; }
        uint8_t dtr(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) ? 1 : 0; }
        uint8_t rts(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_RTS) ? 1 : 0; }
        operator bool() { return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    10e6:	ldr	r4, [pc, #132]	; (116c <setup+0x90>)
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
    10e8:	ldr	r6, [pc, #132]	; (1170 <setup+0x94>)
        uint8_t stopbits(void) { uint8_t b = usb_cdc_line_coding[1]; if (!b) b = 1; return b; }
        uint8_t paritytype(void) { return usb_cdc_line_coding[1] >> 8; } // 0=none, 1=odd, 2=even
        uint8_t numbits(void) { return usb_cdc_line_coding[1] >> 16; }
        uint8_t dtr(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) ? 1 : 0; }
        uint8_t rts(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_RTS) ? 1 : 0; }
        operator bool() { return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    10ea:	ldrb	r3, [r1, #0]
    10ec:	cmp	r3, #0
    10ee:	beq.n	115c <setup+0x80>
    10f0:	ldrb	r3, [r4, #0]
    10f2:	lsls	r3, r3, #31
    10f4:	bpl.n	115c <setup+0x80>
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
    10f6:	ldr	r3, [r2, #0]
    10f8:	ldr	r5, [r6, #0]
        uint8_t stopbits(void) { uint8_t b = usb_cdc_line_coding[1]; if (!b) b = 1; return b; }
        uint8_t paritytype(void) { return usb_cdc_line_coding[1] >> 8; } // 0=none, 1=odd, 2=even
        uint8_t numbits(void) { return usb_cdc_line_coding[1] >> 16; }
        uint8_t dtr(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) ? 1 : 0; }
        uint8_t rts(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_RTS) ? 1 : 0; }
        operator bool() { return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    10fa:	subs	r3, r3, r5
    10fc:	cmp	r3, #14
    10fe:	bls.n	115c <setup+0x80>
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    1100:	movs	r1, #10
    1102:	ldr	r0, [pc, #112]	; (1174 <setup+0x98>)
    1104:	bl	d7d4 <usb_serial_write>
    1108:	ldr	r0, [pc, #108]	; (1178 <setup+0x9c>)
    110a:	bl	f5bc <Print::println()>
  Serial.println("MTP logger");

  usb_mtp_configure();
    110e:	bl	f018 <usb_mtp_configure>
  storage_configure();
    1112:	bl	e6c <storage_configure()>
          //DMA_CERQ = dma.channel;     
      }

      void acq_init(int32_t fsamp)
      {
          CCM_CCGR5 |= CCM_CCGR5_SAI1(CCM_CCGR_ON);
    1116:	ldr	r2, [pc, #100]	; (117c <setup+0xa0>)

          // if either transmitter or receiver is enabled, do nothing
          if (I2S1_RCSR & I2S_RCSR_RE) return;
    1118:	ldr	r1, [pc, #100]	; (1180 <setup+0xa4>)
          //DMA_CERQ = dma.channel;     
      }

      void acq_init(int32_t fsamp)
      {
          CCM_CCGR5 |= CCM_CCGR5_SAI1(CCM_CCGR_ON);
    111a:	ldr	r3, [r2, #124]	; 0x7c
    111c:	orr.w	r3, r3, #786432	; 0xc0000
    1120:	str	r3, [r2, #124]	; 0x7c

          // if either transmitter or receiver is enabled, do nothing
          if (I2S1_RCSR & I2S_RCSR_RE) return;
    1122:	ldr.w	r3, [r1, #136]	; 0x88
    1126:	cmp	r3, #0
    1128:	blt.n	1130 <setup+0x54>
    112a:	ldr	r0, [pc, #88]	; (1184 <setup+0xa8>)
    112c:	bl	4d0 <acq_init(long) [clone .part.58]>

  usb_mtp_configure();
  storage_configure();

  acq_init(93750); // is fixed for this example, to be modified below
  state=-1;
    1130:	ldr	r3, [pc, #84]	; (1188 <setup+0xac>)
    1132:	movw	r2, #65535	; 0xffff
    1136:	movs	r1, #10
    1138:	ldr	r0, [pc, #80]	; (118c <setup+0xb0>)
    113a:	strh	r2, [r3, #0]
    113c:	bl	d7d4 <usb_serial_write>
    1140:	ldr	r0, [pc, #52]	; (1178 <setup+0x9c>)
    1142:	bl	f5bc <Print::println()>
    1146:	movs	r1, #55	; 0x37
    1148:	ldr	r0, [pc, #68]	; (1190 <setup+0xb4>)
    114a:	bl	d7d4 <usb_serial_write>
    114e:	ldr	r0, [pc, #40]	; (1178 <setup+0x9c>)
    1150:	bl	f5bc <Print::println()>

  Serial.println("Setup done");
  Serial.println(" Enter s to start acquisition and q to stop acquisition");
  Serial.flush();
}
    1154:	ldmia.w	sp!, {r4, r5, r6, lr}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
    1158:	b.w	d838 <usb_serial_flush_output>
extern volatile uint32_t systick_millis_count;

static inline uint32_t millis(void) __attribute__((always_inline, unused));
static inline uint32_t millis(void)
{
	return systick_millis_count;
    115c:	ldr	r3, [r2, #0]

void acq_init(int32_t fsamp);
int16_t acq_check(int16_t state);

void setup()
{ while(!Serial && millis()<3000); 
    115e:	cmp	r3, r0
    1160:	bls.n	10ea <setup+0xe>
    1162:	b.n	1100 <setup+0x24>
    1164:	.word	0x20006238
    1168:	.word	0x20006244
    116c:	.word	0x20006168
    1170:	.word	0x200063f8
    1174:	.word	0x200001f4
    1178:	.word	0x20000c58
    117c:	.word	0x400fc000
    1180:	.word	0x40384000
    1184:	.word	0x00016e36
    1188:	.word	0x20001d46
    118c:	.word	0x20000200
    1190:	.word	0x2000020c

00001194 <pushData(unsigned long*)>:
uint16_t maxCount=0;

void resetData(void) {  front_ = 0;  rear_ = 0; }

uint16_t pushData(uint32_t * src)
{ uint16_t f =front_ + 1;
    1194:	push	{r4, r5, r6, lr}
    1196:	ldr	r6, [pc, #88]	; (11f0 <pushData(unsigned long*)+0x5c>)
  if(f >= MAXBUF) f=0;
  if(f == rear_) return 0;
    1198:	ldr	r3, [pc, #88]	; (11f4 <pushData(unsigned long*)+0x60>)
uint16_t maxCount=0;

void resetData(void) {  front_ = 0;  rear_ = 0; }

uint16_t pushData(uint32_t * src)
{ uint16_t f =front_ + 1;
    119a:	ldrh	r4, [r6, #0]
  if(f >= MAXBUF) f=0;
  if(f == rear_) return 0;
    119c:	ldrh	r5, [r3, #0]
uint16_t maxCount=0;

void resetData(void) {  front_ = 0;  rear_ = 0; }

uint16_t pushData(uint32_t * src)
{ uint16_t f =front_ + 1;
    119e:	adds	r4, #1
    11a0:	uxth	r4, r4
  if(f >= MAXBUF) f=0;
    11a2:	cmp.w	r4, #1000	; 0x3e8
    11a6:	it	cs
    11a8:	movcs	r4, #0
  if(f == rear_) return 0;
    11aa:	cmp	r4, r5
    11ac:	beq.n	11ec <pushData(unsigned long*)+0x58>

  uint32_t *ptr= data_buffer+f*NBUF_ACQ;
    11ae:	ldr	r3, [pc, #72]	; (11f8 <pushData(unsigned long*)+0x64>)
    11b0:	mov	r1, r0
  memcpy(ptr,src,NBUF_ACQ*4);
    11b2:	mov.w	r2, #512	; 0x200
    11b6:	ldr	r0, [r3, #0]
    11b8:	add.w	r0, r0, r4, lsl #9
    11bc:	bl	d064 <memcpy>
  front_ = f;
  //
  uint16_t count;
  count = (front_ >= rear_) ? (front_ - rear_) : front_+ (MAXBUF -rear_) ;
    11c0:	cmp	r4, r5
  if(f >= MAXBUF) f=0;
  if(f == rear_) return 0;

  uint32_t *ptr= data_buffer+f*NBUF_ACQ;
  memcpy(ptr,src,NBUF_ACQ*4);
  front_ = f;
    11c2:	strh	r4, [r6, #0]
  //
  uint16_t count;
  count = (front_ >= rear_) ? (front_ - rear_) : front_+ (MAXBUF -rear_) ;
    11c4:	bcs.n	11dc <pushData(unsigned long*)+0x48>
    11c6:	rsb	r5, r5, #1000	; 0x3e8
  if(count>maxCount) maxCount=count;
    11ca:	ldr	r3, [pc, #48]	; (11fc <pushData(unsigned long*)+0x68>)
  uint32_t *ptr= data_buffer+f*NBUF_ACQ;
  memcpy(ptr,src,NBUF_ACQ*4);
  front_ = f;
  //
  uint16_t count;
  count = (front_ >= rear_) ? (front_ - rear_) : front_+ (MAXBUF -rear_) ;
    11cc:	add	r4, r5
  if(count>maxCount) maxCount=count;
    11ce:	ldrh	r2, [r3, #0]
  uint32_t *ptr= data_buffer+f*NBUF_ACQ;
  memcpy(ptr,src,NBUF_ACQ*4);
  front_ = f;
  //
  uint16_t count;
  count = (front_ >= rear_) ? (front_ - rear_) : front_+ (MAXBUF -rear_) ;
    11d0:	uxth	r4, r4
  if(count>maxCount) maxCount=count;
    11d2:	cmp	r2, r4
    11d4:	bcs.n	11e8 <pushData(unsigned long*)+0x54>
    11d6:	strh	r4, [r3, #0]
  //
  return 1;
    11d8:	movs	r0, #1
    11da:	pop	{r4, r5, r6, pc}
  uint32_t *ptr= data_buffer+f*NBUF_ACQ;
  memcpy(ptr,src,NBUF_ACQ*4);
  front_ = f;
  //
  uint16_t count;
  count = (front_ >= rear_) ? (front_ - rear_) : front_+ (MAXBUF -rear_) ;
    11dc:	subs	r4, r4, r5
  if(count>maxCount) maxCount=count;
    11de:	ldr	r3, [pc, #28]	; (11fc <pushData(unsigned long*)+0x68>)
  uint32_t *ptr= data_buffer+f*NBUF_ACQ;
  memcpy(ptr,src,NBUF_ACQ*4);
  front_ = f;
  //
  uint16_t count;
  count = (front_ >= rear_) ? (front_ - rear_) : front_+ (MAXBUF -rear_) ;
    11e0:	uxth	r4, r4
  if(count>maxCount) maxCount=count;
    11e2:	ldrh	r2, [r3, #0]
    11e4:	cmp	r2, r4
    11e6:	bcc.n	11d6 <pushData(unsigned long*)+0x42>
  //
  return 1;
    11e8:	movs	r0, #1
}
    11ea:	pop	{r4, r5, r6, pc}
void resetData(void) {  front_ = 0;  rear_ = 0; }

uint16_t pushData(uint32_t * src)
{ uint16_t f =front_ + 1;
  if(f >= MAXBUF) f=0;
  if(f == rear_) return 0;
    11ec:	movs	r0, #0
    11ee:	pop	{r4, r5, r6, pc}
    11f0:	.word	0x20001d44
    11f4:	.word	0x20005b02
    11f8:	.word	0x200036b0
    11fc:	.word	0x20005b00

00001200 <acq_isr()>:
    {
        uint32_t daddr;
        uint32_t *src;
        acq_count++;

        daddr = (uint32_t)(dma.TCD->DADDR);
    1200:	ldr	r1, [pc, #100]	; (1268 <acq_isr()+0x68>)
        dma.clearInterrupt();

        if (daddr < (uint32_t)tdm_rx_buffer + sizeof(tdm_rx_buffer) / 2) {
    1202:	ldr	r3, [pc, #104]	; (126c <acq_isr()+0x6c>)
    {
        uint32_t daddr;
        uint32_t *src;
        acq_count++;

        daddr = (uint32_t)(dma.TCD->DADDR);
    1204:	ldr	r2, [r1, #0]
            // need to remove data from the second half
            src = &tdm_rx_buffer[NBUF_I2S];
        } else {
            // DMA is receiving to the second half of the buffer
            // need to remove data from the first half
            src = &tdm_rx_buffer[0];
    1206:	sub.w	r0, r3, #2048	; 0x800

  uint32_t acq_count=0;
  uint32_t acq_miss=0;

    void acq_isr(void)
    {
    120a:	push	{r4, r5, r6, lr}
        uint32_t daddr;
        uint32_t *src;
        acq_count++;
    120c:	ldr	r4, [pc, #96]	; (1270 <acq_isr()+0x70>)

        daddr = (uint32_t)(dma.TCD->DADDR);
    120e:	ldr	r5, [r2, #16]

    void acq_isr(void)
    {
        uint32_t daddr;
        uint32_t *src;
        acq_count++;
    1210:	ldr	r2, [r4, #0]
            // need to remove data from the second half
            src = &tdm_rx_buffer[NBUF_I2S];
        } else {
            // DMA is receiving to the second half of the buffer
            // need to remove data from the first half
            src = &tdm_rx_buffer[0];
    1212:	cmp	r5, r3
    1214:	it	cc
    1216:	movcc	r0, r3
    1218:	ldrb	r6, [r1, #4]

    void acq_isr(void)
    {
        uint32_t daddr;
        uint32_t *src;
        acq_count++;
    121a:	adds	r2, #1
	void detachInterrupt(void) {
		NVIC_DISABLE_IRQ(IRQ_DMA_CH0 + channel);
	}

	void clearInterrupt(void) {
		DMA_CINT = channel;
    121c:	ldr	r5, [pc, #84]	; (1274 <acq_isr()+0x74>)
// want to delete anything the cache may have stored, so your next
// read is certain to access the physical memory.
__attribute__((always_inline, unused))
static inline void arm_dcache_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    121e:	bic.w	r3, r0, #31
	uint32_t end_addr = (uint32_t)addr + size;
    1222:	add.w	r1, r0, #2048	; 0x800
    1226:	str	r2, [r4, #0]
    1228:	strb	r6, [r5, #31]
	asm volatile("": : :"memory");
	asm("dsb");
    122a:	dsb	sy
	do {
		SCB_CACHE_DCIMVAC = location;
    122e:	ldr	r2, [pc, #72]	; (1278 <acq_isr()+0x78>)
    1230:	str	r3, [r2, #0]
		location += 32;
    1232:	adds	r3, #32
	} while (location < end_addr);
    1234:	cmp	r1, r3
    1236:	bhi.n	1230 <acq_isr()+0x30>
	asm("dsb");
    1238:	dsb	sy
	asm("isb");
    123c:	isb	sy
    1240:	ldr	r2, [pc, #56]	; (127c <acq_isr()+0x7c>)
    1242:	movs	r3, #0

        for(int jj=0;jj<NCH_ACQ;jj++)
        {
          for(int ii=0; ii<NBUF_ACQ;ii++)
          {
            acq_rx_buffer[jj+ii*NCH_ACQ]=src[jj+ii*NCH_I2S];
    1244:	ldr.w	r1, [r0, r3, lsl #2]
    1248:	adds	r3, #4
            arm_dcache_delete((void*)src, sizeof(tdm_rx_buffer) / 2);
        #endif

        for(int jj=0;jj<NCH_ACQ;jj++)
        {
          for(int ii=0; ii<NBUF_ACQ;ii++)
    124a:	cmp.w	r3, #512	; 0x200
          {
            acq_rx_buffer[jj+ii*NCH_ACQ]=src[jj+ii*NCH_I2S];
    124e:	str.w	r1, [r2, #4]!
            arm_dcache_delete((void*)src, sizeof(tdm_rx_buffer) / 2);
        #endif

        for(int jj=0;jj<NCH_ACQ;jj++)
        {
          for(int ii=0; ii<NBUF_ACQ;ii++)
    1252:	bne.n	1244 <acq_isr()+0x44>
          {
            acq_rx_buffer[jj+ii*NCH_ACQ]=src[jj+ii*NCH_I2S];
          }
        }

        if(!pushData(acq_rx_buffer)) acq_miss++;
    1254:	ldr	r0, [pc, #40]	; (1280 <acq_isr()+0x80>)
    1256:	bl	1194 <pushData(unsigned long*)>
    125a:	cbnz	r0, 1264 <acq_isr()+0x64>
    125c:	ldr	r2, [pc, #36]	; (1284 <acq_isr()+0x84>)
    125e:	ldr	r3, [r2, #0]
    1260:	adds	r3, #1
    1262:	str	r3, [r2, #0]
    1264:	pop	{r4, r5, r6, pc}
    1266:	nop
    1268:	.word	0x20001630
    126c:	.word	0x20002548
    1270:	.word	0x20001a3c
    1274:	.word	0x400e8000
    1278:	.word	0xe000ef5c
    127c:	.word	0x20001a3c
    1280:	.word	0x20001a40
    1284:	.word	0x20005b08

00001288 <pullData(unsigned long*, unsigned long)>:
  //
  return 1;
}

uint16_t pullData(uint32_t * dst, uint32_t ndbl)
{ uint16_t r = (rear_/ndbl) ;
    1288:	push	{r3, r4, r5, lr}
    128a:	ldr	r5, [pc, #76]	; (12d8 <pullData(unsigned long*, unsigned long)+0x50>)
  if(r == (front_/ndbl)) return 0;
    128c:	ldr	r3, [pc, #76]	; (12dc <pullData(unsigned long*, unsigned long)+0x54>)
  //
  return 1;
}

uint16_t pullData(uint32_t * dst, uint32_t ndbl)
{ uint16_t r = (rear_/ndbl) ;
    128e:	ldrh	r2, [r5, #0]
  if(r == (front_/ndbl)) return 0;
    1290:	ldrh	r4, [r3, #0]
  //
  return 1;
}

uint16_t pullData(uint32_t * dst, uint32_t ndbl)
{ uint16_t r = (rear_/ndbl) ;
    1292:	udiv	r2, r2, r1
  if(r == (front_/ndbl)) return 0;
    1296:	udiv	r4, r4, r1
    129a:	cmp	r2, r4
    129c:	beq.n	12d4 <pullData(unsigned long*, unsigned long)+0x4c>
    129e:	uxth	r3, r2
  if(++r >= (MAXBUF/ndbl)) r=0;
    12a0:	mov.w	r2, #1000	; 0x3e8
    12a4:	adds	r3, #1
    12a6:	udiv	r2, r2, r1
    12aa:	uxth	r3, r3
    12ac:	cmp	r3, r2
    12ae:	bcs.n	12cc <pullData(unsigned long*, unsigned long)+0x44>
    12b0:	lsls	r2, r1, #9
    12b2:	smulbb	r1, r1, r3
    12b6:	mul.w	r3, r2, r3
    12ba:	uxth	r4, r1
  uint32_t *ptr= data_buffer + r*ndbl*NBUF_ACQ;
    12bc:	ldr	r1, [pc, #32]	; (12e0 <pullData(unsigned long*, unsigned long)+0x58>)
  memcpy(dst,ptr,ndbl*NBUF_ACQ*4);
    12be:	ldr	r1, [r1, #0]
    12c0:	add	r1, r3
    12c2:	bl	d064 <memcpy>
  rear_ = r*ndbl;
    12c6:	strh	r4, [r5, #0]
  return 1;
    12c8:	movs	r0, #1
    12ca:	pop	{r3, r4, r5, pc}
    12cc:	movs	r4, #0
    12ce:	lsls	r2, r1, #9
    12d0:	mov	r3, r4
    12d2:	b.n	12bc <pullData(unsigned long*, unsigned long)+0x34>
  return 1;
}

uint16_t pullData(uint32_t * dst, uint32_t ndbl)
{ uint16_t r = (rear_/ndbl) ;
  if(r == (front_/ndbl)) return 0;
    12d4:	movs	r0, #0
  if(++r >= (MAXBUF/ndbl)) r=0;
  uint32_t *ptr= data_buffer + r*ndbl*NBUF_ACQ;
  memcpy(dst,ptr,ndbl*NBUF_ACQ*4);
  rear_ = r*ndbl;
  return 1;
}
    12d6:	pop	{r3, r4, r5, pc}
    12d8:	.word	0x20005b02
    12dc:	.word	0x20001d44
    12e0:	.word	0x200036b0

000012e4 <do_menu(short)>:
void do_menu1(void);
void do_menu2(void);
void do_menu3(void);

int16_t do_menu(int16_t state)
{ // check Serial input
    12e4:	push	{r4, lr}
    12e6:	mov	r4, r0
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    12e8:	bl	d708 <usb_serial_available>
  if(!Serial.available()) return state;
    12ec:	cbnz	r0, 12f2 <do_menu(short)+0xe>
      break;
    default:
      break;
  }
  return state;
}
    12ee:	mov	r0, r4
    12f0:	pop	{r4, pc}
        virtual int read() { return usb_serial_getchar(); }
    12f2:	bl	d788 <usb_serial_getchar>

int16_t do_menu(int16_t state)
{ // check Serial input
  if(!Serial.available()) return state;
  char cc = Serial.read();
  switch(cc)
    12f6:	uxtb	r0, r0
    12f8:	cmp	r0, #113	; 0x71
    12fa:	beq.n	1316 <do_menu(short)+0x32>
    12fc:	cmp	r0, #115	; 0x73
    12fe:	bne.n	12ee <do_menu(short)+0xa>
  {
    case 's': // start acquisition
      if(state>=0) return state;
    1300:	cmp	r4, #0
    1302:	bge.n	12ee <do_menu(short)+0xa>
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    1304:	movs	r1, #6
    1306:	ldr	r0, [pc, #36]	; (132c <do_menu(short)+0x48>)
    1308:	bl	d7d4 <usb_serial_write>
    130c:	ldr	r0, [pc, #32]	; (1330 <do_menu(short)+0x4c>)
    130e:	bl	f5bc <Print::println()>
    1312:	movs	r4, #0
    1314:	b.n	12ee <do_menu(short)+0xa>
      state=0;
      Serial.println("\nStart");
      break;
    case 'q': // stop acquisition
      if(state<0) return state;
    1316:	cmp	r4, #0
    1318:	blt.n	12ee <do_menu(short)+0xa>
    131a:	movs	r1, #5
    131c:	ldr	r0, [pc, #20]	; (1334 <do_menu(short)+0x50>)
    131e:	bl	d7d4 <usb_serial_write>
    1322:	ldr	r0, [pc, #12]	; (1330 <do_menu(short)+0x4c>)
      state=4;
    1324:	movs	r4, #4
    1326:	bl	f5bc <Print::println()>
    132a:	b.n	12ee <do_menu(short)+0xa>
    132c:	.word	0x20000244
    1330:	.word	0x20000c58
    1334:	.word	0x2000024c

00001338 <file_writeHeader()>:
  mfile = sdx[store].open(filename,FILE_WRITE);
  return !(!mfile);
}

int16_t file_writeHeader(void)
{ if(!mfile) return 0;
    1338:	push	{r4, lr}
	}
	virtual void close() {
		if (f) f->close();
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
    133a:	ldr	r4, [pc, #60]	; (1378 <file_writeHeader()+0x40>)
    133c:	ldr	r0, [r4, #16]
    133e:	cbz	r0, 1372 <file_writeHeader()+0x3a>
    1340:	ldr	r3, [r0, #0]
    1342:	ldr	r3, [r3, #68]	; 0x44
    1344:	blx	r3
    1346:	cbz	r0, 1372 <file_writeHeader()+0x3a>
}

/****************** File Utilities *****************************/
void makeHeader(char *header)
{
  memset(header,0,512);
    1348:	mov.w	r2, #512	; 0x200
    134c:	movs	r1, #0
    134e:	ldr	r0, [pc, #44]	; (137c <file_writeHeader()+0x44>)
    1350:	bl	10d7c <memset>
#endif
	virtual size_t read(void *buf, size_t nbyte) {
		return (f) ? f->read(buf, nbyte) : 0;
	}
	virtual size_t write(const void *buf, size_t size) {
		return (f) ? f->write(buf, size) : 0;
    1354:	ldr	r0, [r4, #16]
    1356:	cbz	r0, 1370 <file_writeHeader()+0x38>
    1358:	ldr	r3, [r0, #0]
    135a:	mov.w	r2, #512	; 0x200
    135e:	ldr	r1, [pc, #28]	; (137c <file_writeHeader()+0x44>)
    1360:	ldr	r3, [r3, #44]	; 0x2c
    1362:	blx	r3
    1364:	sub.w	r0, r0, #512	; 0x200
    1368:	clz	r0, r0
    136c:	lsrs	r0, r0, #5
    136e:	sxth	r0, r0
int16_t file_writeHeader(void)
{ if(!mfile) return 0;
  makeHeader(header);
  size_t nb = mfile.write(header,512);
  return (nb==512);
}
    1370:	pop	{r4, pc}
  mfile = sdx[store].open(filename,FILE_WRITE);
  return !(!mfile);
}

int16_t file_writeHeader(void)
{ if(!mfile) return 0;
    1372:	movs	r0, #0
    1374:	pop	{r4, pc}
    1376:	nop
    1378:	.word	0x20000bb4
    137c:	.word	0x2000163c

00001380 <file_writeData(void*, unsigned long)>:
  size_t nb = mfile.write(header,512);
  return (nb==512);
}

int16_t file_writeData(void *diskBuffer, uint32_t nd)
{ if(!mfile) return 0;
    1380:	push	{r4, r5, r6, lr}
	}
	virtual void close() {
		if (f) f->close();
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
    1382:	ldr	r6, [pc, #48]	; (13b4 <file_writeData(void*, unsigned long)+0x34>)
    1384:	ldr	r3, [r6, #16]
    1386:	cbz	r3, 13b0 <file_writeData(void*, unsigned long)+0x30>
    1388:	ldr	r2, [r3, #0]
    138a:	mov	r5, r0
    138c:	mov	r0, r3
    138e:	mov	r4, r1
    1390:	ldr	r3, [r2, #68]	; 0x44
    1392:	blx	r3
    1394:	cbz	r0, 13b0 <file_writeData(void*, unsigned long)+0x30>
#endif
	virtual size_t read(void *buf, size_t nbyte) {
		return (f) ? f->read(buf, nbyte) : 0;
	}
	virtual size_t write(const void *buf, size_t size) {
		return (f) ? f->write(buf, size) : 0;
    1396:	ldr	r0, [r6, #16]
    1398:	cbz	r0, 13a4 <file_writeData(void*, unsigned long)+0x24>
    139a:	ldr	r3, [r0, #0]
    139c:	mov	r1, r5
    139e:	mov	r2, r4
    13a0:	ldr	r3, [r3, #44]	; 0x2c
    13a2:	blx	r3
  uint32_t nb = mfile.write(diskBuffer,nd);
  return (nb==nd);
    13a4:	subs	r0, r4, r0
    13a6:	clz	r0, r0
    13aa:	lsrs	r0, r0, #5
    13ac:	sxth	r0, r0
}
    13ae:	pop	{r4, r5, r6, pc}
  size_t nb = mfile.write(header,512);
  return (nb==512);
}

int16_t file_writeData(void *diskBuffer, uint32_t nd)
{ if(!mfile) return 0;
    13b0:	movs	r0, #0
    13b2:	pop	{r4, r5, r6, pc}
    13b4:	.word	0x20000bb4

000013b8 <file_close()>:
  uint32_t nb = mfile.write(diskBuffer,nd);
  return (nb==nd);
}

int16_t file_close(void)
{ mfile.close();
    13b8:	push	{r4, lr}
	}
	virtual uint64_t size() {
		return (f) ? f->size() : 0;
	}
	virtual void close() {
		if (f) f->close();
    13ba:	ldr	r4, [pc, #32]	; (13dc <file_close()+0x24>)
    13bc:	ldr	r0, [r4, #16]
    13be:	cbz	r0, 13d8 <file_close()+0x20>
    13c0:	ldr	r3, [r0, #0]
    13c2:	ldr	r3, [r3, #64]	; 0x40
    13c4:	blx	r3
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
    13c6:	ldr	r0, [r4, #16]
    13c8:	cbz	r0, 13d8 <file_close()+0x20>
    13ca:	ldr	r3, [r0, #0]
    13cc:	ldr	r3, [r3, #68]	; 0x44
    13ce:	blx	r3
    13d0:	eor.w	r0, r0, #1
    13d4:	uxtb	r0, r0
  return (!mfile);
}
    13d6:	pop	{r4, pc}
  uint32_t nb = mfile.write(diskBuffer,nd);
  return (nb==nd);
}

int16_t file_close(void)
{ mfile.close();
    13d8:	movs	r0, #1
    13da:	pop	{r4, pc}
    13dc:	.word	0x20000bb4

000013e0 <makeFilename(char*)>:
{
  memset(header,0,512);
}

int16_t makeFilename(char *filename)
{
    13e0:	push	{r4, r5, r6, r7, lr}
    13e2:	sub	sp, #12
    13e4:	mov	r5, r0
  uint32_t tt = rtc_get();
    13e6:	bl	e6d0 <rtc_get>
  int dd;
  ss= tt % 60; tt /= 60;
  mm= tt % 60; tt /= 60;
  hh= tt % 24; tt /= 24;
  dd= tt;
  sprintf(filename,"/%d/%02d_%02d_%02d.raw",dd,hh,mm,ss);
    13ea:	ldr	r1, [pc, #100]	; (1450 <makeFilename(char*)+0x70>)
  memset(header,0,512);
}

int16_t makeFilename(char *filename)
{
  uint32_t tt = rtc_get();
    13ec:	mov	r7, r0
  int dd;
  ss= tt % 60; tt /= 60;
  mm= tt % 60; tt /= 60;
  hh= tt % 24; tt /= 24;
  dd= tt;
  sprintf(filename,"/%d/%02d_%02d_%02d.raw",dd,hh,mm,ss);
    13ee:	ldr	r3, [pc, #100]	; (1454 <makeFilename(char*)+0x74>)
    13f0:	ldr	r4, [pc, #100]	; (1458 <makeFilename(char*)+0x78>)
    13f2:	mov	r0, r5
    13f4:	umull	r2, r6, r1, r7
    13f8:	umull	r2, r3, r3, r7
    13fc:	ldr	r2, [pc, #92]	; (145c <makeFilename(char*)+0x7c>)
    13fe:	lsrs	r6, r6, #5
    1400:	lsrs	r3, r3, #11
    1402:	umull	lr, r2, r2, r7
    1406:	umull	lr, r1, r1, r6
    140a:	umull	lr, r4, r4, r3
    140e:	rsb	lr, r6, r6, lsl #4
    1412:	lsrs	r1, r1, #5
    1414:	lsrs	r4, r4, #4
    1416:	rsb	r1, r1, r1, lsl #4
    141a:	sub.w	r7, r7, lr, lsl #2
    141e:	sub.w	r6, r6, r1, lsl #2
    1422:	ldr	r1, [pc, #60]	; (1460 <makeFilename(char*)+0x80>)
    1424:	add.w	r4, r4, r4, lsl #1
    1428:	lsrs	r2, r2, #16
    142a:	sub.w	r3, r3, r4, lsl #3
    142e:	stmia.w	sp, {r6, r7}
    1432:	bl	11224 <sprintf>
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
    1436:	mov	r0, r5
    1438:	bl	113c0 <strlen>
    143c:	mov	r1, r0
    143e:	mov	r0, r5
    1440:	bl	d7d4 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    1444:	ldr	r0, [pc, #28]	; (1464 <makeFilename(char*)+0x84>)
    1446:	bl	f5bc <Print::println()>
  Serial.println(filename);
  return 1;
}
    144a:	movs	r0, #1
    144c:	add	sp, #12
    144e:	pop	{r4, r5, r6, r7, pc}
    1450:	.word	0x88888889
    1454:	.word	0x91a2b3c5
    1458:	.word	0xaaaaaaab
    145c:	.word	0xc22e4507
    1460:	.word	0x20000254
    1464:	.word	0x20000c58

00001468 <checkPath(unsigned short, char*)>:

int16_t checkPath(uint16_t store, char *filename)
{
    1468:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    146c:	mov	r6, r0
    146e:	sub	sp, #56	; 0x38
  int ln=strlen(filename);
    1470:	mov	r0, r1
  Serial.println(filename);
  return 1;
}

int16_t checkPath(uint16_t store, char *filename)
{
    1472:	mov	r5, r1
  int ln=strlen(filename);
    1474:	bl	113c0 <strlen>
  int i1=-1;
  for(int ii=0;ii<ln;ii++) if(filename[ii]=='/') i1=ii;
    1478:	cmp	r0, #0
    147a:	ble.n	155c <checkPath(unsigned short, char*)+0xf4>
    147c:	subs	r1, r5, #1
    147e:	movs	r3, #0
    1480:	mov.w	r2, #4294967295
    1484:	ldrb.w	r4, [r1, #1]!
    1488:	cmp	r4, #47	; 0x2f
    148a:	it	eq
    148c:	moveq	r2, r3
    148e:	adds	r3, #1
    1490:	cmp	r0, r3
    1492:	bne.n	1484 <checkPath(unsigned short, char*)+0x1c>
  if(i1<0) return 1; // no path
    1494:	cmp	r2, #0
    1496:	blt.n	155c <checkPath(unsigned short, char*)+0xf4>
  filename[i1]=0;
  if(!sdx[store].exists(filename))
    1498:	movw	r3, #1204	; 0x4b4
{
  int ln=strlen(filename);
  int i1=-1;
  for(int ii=0;ii<ln;ii++) if(filename[ii]=='/') i1=ii;
  if(i1<0) return 1; // no path
  filename[i1]=0;
    149c:	mov.w	lr, #0
  if(!sdx[store].exists(filename))
    14a0:	ldr	r7, [pc, #244]	; (1598 <checkPath(unsigned short, char*)+0x130>)
{
  int ln=strlen(filename);
  int i1=-1;
  for(int ii=0;ii<ln;ii++) if(filename[ii]=='/') i1=ii;
  if(i1<0) return 1; // no path
  filename[i1]=0;
    14a2:	add.w	r8, r5, r2
  if(!sdx[store].exists(filename))
    14a6:	mul.w	r3, r3, r6
    14aa:	ldr	r1, [pc, #240]	; (159c <checkPath(unsigned short, char*)+0x134>)
{
  int ln=strlen(filename);
  int i1=-1;
  for(int ii=0;ii<ln;ii++) if(filename[ii]=='/') i1=ii;
  if(i1<0) return 1; // no path
  filename[i1]=0;
    14ac:	strb.w	lr, [r5, r2]
  if(!sdx[store].exists(filename))
    14b0:	ldr	r2, [r7, r3]
    14b2:	adds	r4, r7, r3
    14b4:	ldr	r3, [r2, #4]
    14b6:	cmp	r3, r1
    14b8:	bne.n	1564 <checkPath(unsigned short, char*)+0xfc>
    14ba:	ldr.w	ip, [r4, #1148]	; 0x47c
   *
   * \return true if the file exists else false.
   */
  bool exists(const char* path) {
    return m_fVol ? m_fVol->exists(path) :
           m_xVol ? m_xVol->exists(path) : false;
    14be:	cmp.w	ip, #0
    14c2:	beq.n	14ec <checkPath(unsigned short, char*)+0x84>
   *
   * \return true if the file exists else false.
   */
  bool exists(const char* path) {
    FatFile tmp;
    return tmp.open(this, path, O_RDONLY);
    14c4:	mov	r1, ip
    14c6:	mov	r3, lr
    14c8:	mov	r2, r5
    14ca:	mov	r0, sp
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attributes(FILE_ATTR_CLOSED), m_error(0), m_flags(0) {}
    14cc:	strb.w	lr, [sp]
    14d0:	strb.w	lr, [sp, #1]
    14d4:	strb.w	lr, [sp, #2]
    14d8:	bl	9c80 <FatFile::open(FatVolume*, char const*, int)>
    14dc:	cbz	r0, 150c <checkPath(unsigned short, char*)+0xa4>
  { Serial.println(filename); 
    if(!sdx[store].mkdir(filename)) return 0;
  }

  filename[i1]='/';
    14de:	movs	r3, #47	; 0x2f
  return 1;
    14e0:	movs	r0, #1
  if(!sdx[store].exists(filename))
  { Serial.println(filename); 
    if(!sdx[store].mkdir(filename)) return 0;
  }

  filename[i1]='/';
    14e2:	strb.w	r3, [r8]
  return 1;
}
    14e6:	add	sp, #56	; 0x38
    14e8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    14ec:	ldr.w	r1, [r4, #1152]	; 0x480
    14f0:	cbz	r1, 150c <checkPath(unsigned short, char*)+0xa4>
   *
   * \return true if the file exists else false.
   */
  bool exists(const ExChar_t* path) {
    ExFatFile tmp;
    return tmp.open(this, path, O_RDONLY);
    14f2:	mov	r3, ip
    14f4:	mov	r2, r5
    14f6:	mov	r0, sp
 * \brief Basic file class.
 */
class ExFatFile {
 public:
  /** Create an instance. */
  ExFatFile() : m_attributes(FILE_ATTR_CLOSED), m_error(0), m_flags(0) {}
    14f8:	strb.w	ip, [sp, #49]	; 0x31
    14fc:	strb.w	ip, [sp, #50]	; 0x32
    1500:	strb.w	ip, [sp, #51]	; 0x33
    1504:	bl	87ec <ExFatFile::open(ExFatVolume*, char const*, int)>
  int ln=strlen(filename);
  int i1=-1;
  for(int ii=0;ii<ln;ii++) if(filename[ii]=='/') i1=ii;
  if(i1<0) return 1; // no path
  filename[i1]=0;
  if(!sdx[store].exists(filename))
    1508:	cmp	r0, #0
    150a:	bne.n	14de <checkPath(unsigned short, char*)+0x76>
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
    150c:	mov	r0, r5
    150e:	bl	113c0 <strlen>
    1512:	mov	r1, r0
    1514:	mov	r0, r5
    1516:	bl	d7d4 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    151a:	ldr	r0, [pc, #132]	; (15a0 <checkPath(unsigned short, char*)+0x138>)
    151c:	bl	f5bc <Print::println()>
  { Serial.println(filename); 
    if(!sdx[store].mkdir(filename)) return 0;
    1520:	movw	r3, #1204	; 0x4b4
    1524:	ldr	r2, [pc, #124]	; (15a4 <checkPath(unsigned short, char*)+0x13c>)
    1526:	mul.w	r6, r3, r6
    152a:	ldr	r3, [r7, r6]
    152c:	ldr	r3, [r3, #8]
    152e:	cmp	r3, r2
    1530:	bne.n	1590 <checkPath(unsigned short, char*)+0x128>
    1532:	ldr.w	r6, [r4, #1148]	; 0x47c
   *
   * \return true for success or false for failure.
   */
  bool mkdir(const char *path, bool pFlag = true) {
    return m_fVol ? m_fVol->mkdir(path, pFlag) :
           m_xVol ? m_xVol->mkdir(path, pFlag) : false;
    1536:	cbz	r6, 156c <checkPath(unsigned short, char*)+0x104>
    1538:	movs	r4, #0
   *
   * \return true for success or false for failure.
   */
  bool mkdir(const char* path, bool pFlag = true) {
    FatFile sub;
    return sub.mkdir(vwd(), path, pFlag);
    153a:	mov	r2, r5
    153c:	addw	r1, r6, #1084	; 0x43c
    1540:	movs	r3, #1
    1542:	mov	r0, sp
    1544:	strb.w	r4, [sp]
    1548:	strb.w	r4, [sp, #1]
    154c:	strb.w	r4, [sp, #2]
    1550:	bl	9af0 <FatFile::mkdir(FatFile*, char const*, bool)>
    1554:	cmp	r0, #0
    1556:	bne.n	14de <checkPath(unsigned short, char*)+0x76>
    1558:	movs	r0, #0
    155a:	b.n	14e6 <checkPath(unsigned short, char*)+0x7e>
int16_t checkPath(uint16_t store, char *filename)
{
  int ln=strlen(filename);
  int i1=-1;
  for(int ii=0;ii<ln;ii++) if(filename[ii]=='/') i1=ii;
  if(i1<0) return 1; // no path
    155c:	movs	r0, #1
    if(!sdx[store].mkdir(filename)) return 0;
  }

  filename[i1]='/';
  return 1;
}
    155e:	add	sp, #56	; 0x38
    1560:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  int ln=strlen(filename);
  int i1=-1;
  for(int ii=0;ii<ln;ii++) if(filename[ii]=='/') i1=ii;
  if(i1<0) return 1; // no path
  filename[i1]=0;
  if(!sdx[store].exists(filename))
    1564:	mov	r1, r5
    1566:	mov	r0, r4
    1568:	blx	r3
    156a:	b.n	14dc <checkPath(unsigned short, char*)+0x74>
    156c:	ldr.w	r1, [r4, #1152]	; 0x480
    1570:	cmp	r1, #0
    1572:	beq.n	1558 <checkPath(unsigned short, char*)+0xf0>
   *
   * \return true for success or false for failure.
   */
  bool mkdir(const ExChar_t* path, bool pFlag = true) {
    ExFatFile sub;
    return sub.mkdir(vwd(), path, pFlag);
    1574:	mov	r2, r5
    1576:	add.w	r1, r1, #1088	; 0x440
    157a:	movs	r3, #1
    157c:	mov	r0, sp
    157e:	strb.w	r6, [sp, #49]	; 0x31
    1582:	strb.w	r6, [sp, #50]	; 0x32
    1586:	strb.w	r6, [sp, #51]	; 0x33
    158a:	bl	92e4 <ExFatFile::mkdir(ExFatFile*, char const*, bool)>
    158e:	b.n	1554 <checkPath(unsigned short, char*)+0xec>
  { Serial.println(filename); 
    if(!sdx[store].mkdir(filename)) return 0;
    1590:	mov	r1, r5
    1592:	mov	r0, r4
    1594:	blx	r3
    1596:	b.n	1554 <checkPath(unsigned short, char*)+0xec>
    1598:	.word	0x20002d48
    159c:	.word	0x000008e1
    15a0:	.word	0x20000c58
    15a4:	.word	0x00000891

000015a8 <file_open(unsigned short)>:
void makeHeader(char *header);
int16_t makeFilename(char *filename);
int16_t checkPath(uint16_t store, char *filename);

int16_t file_open(uint16_t store)
{ char filename[80];
    15a8:	push	{r4, r5, r6, r7, lr}
    15aa:	sub	sp, #188	; 0xbc
    15ac:	mov	r4, r0
  if(!makeFilename(filename)) return 0;
    15ae:	add	r0, sp, #24
    15b0:	bl	13e0 <makeFilename(char*)>
    15b4:	cbnz	r0, 15bc <file_open(unsigned short)+0x14>
    15b6:	movs	r0, #0
  if(!checkPath(store, filename)) return 0;
  mfile = sdx[store].open(filename,FILE_WRITE);
  return !(!mfile);
}
    15b8:	add	sp, #188	; 0xbc
    15ba:	pop	{r4, r5, r6, r7, pc}
int16_t checkPath(uint16_t store, char *filename);

int16_t file_open(uint16_t store)
{ char filename[80];
  if(!makeFilename(filename)) return 0;
  if(!checkPath(store, filename)) return 0;
    15bc:	add	r1, sp, #24
    15be:	mov	r0, r4
    15c0:	bl	1468 <checkPath(unsigned short, char*)>
    15c4:	cmp	r0, #0
    15c6:	beq.n	15b6 <file_open(unsigned short)+0xe>
  mfile = sdx[store].open(filename,FILE_WRITE);
    15c8:	movw	r3, #1204	; 0x4b4
    15cc:	ldr	r1, [pc, #248]	; (16c8 <file_open(unsigned short)+0x120>)
    15ce:	ldr	r2, [pc, #252]	; (16cc <file_open(unsigned short)+0x124>)
    15d0:	mul.w	r4, r3, r4
    15d4:	ldr	r3, [r1, r4]
    15d6:	add	r1, r4
    15d8:	ldr	r4, [r3, #0]
    15da:	cmp	r4, r2
	}
	File open(const char *filepath, uint8_t mode = FILE_READ) {
		oflag_t flags = O_READ;
		if (mode == FILE_WRITE) flags = O_RDWR | O_CREAT | O_AT_END;
		else if (mode == FILE_WRITE_BEGIN) flags = O_RDWR | O_CREAT;
		SDFAT_FILE file = sdfs.open(filepath, flags);
    15dc:	add	r2, sp, #24
    15de:	bne.n	16a2 <file_open(unsigned short)+0xfa>
    15e0:	movw	r3, #16898	; 0x4202
    15e4:	adds	r1, #4
    15e6:	add	r0, sp, #104	; 0x68
    15e8:	bl	b5d8 <FsVolume::open(char const*, int)>
    15ec:	ldr	r3, [sp, #176]	; 0xb0
    15ee:	cmp	r3, #0
    15f0:	beq.n	16aa <file_open(unsigned short)+0x102>
		if (file) return File(new SDFile(file));
    15f2:	movs	r0, #104	; 0x68
class __FlashStringHelper;

class Print
{
  public:
	constexpr Print() : write_error(0) {}
    15f4:	movs	r5, #0
    15f6:	bl	f6dc <operator new(unsigned int)>
//#define BYTE 0
//#endif

class __FlashStringHelper;

class Print
    15fa:	ldrb.w	r2, [sp, #108]	; 0x6c
    15fe:	mov	r4, r0
#define Stream_h

#include <inttypes.h>
#include "Print.h"

class Stream : public Print
    1600:	ldr	r3, [pc, #204]	; (16d0 <file_open(unsigned short)+0x128>)
	// Classes derived from File are never meant to be constructed
	// anywhere other than open() in the parent FS class and
	// openNextFile() while traversing a directory.
	// Only the abstract File class which references these derived
	// classes is meant to have a public constructor!
	SDFile(const SDFAT_FILE &file) : sdfatfile(file), filename(nullptr) { }
    1602:	ldr	r1, [pc, #208]	; (16d4 <file_open(unsigned short)+0x12c>)
{
  public:
	constexpr Stream() : _timeout(1000), read_error(0) {}
    1604:	mov.w	r7, #1000	; 0x3e8
    1608:	strb	r2, [r4, #24]
    160a:	add	r6, sp, #120	; 0x78
#define Stream_h

#include <inttypes.h>
#include "Print.h"

class Stream : public Print
    160c:	ldr	r2, [sp, #112]	; 0x70
    160e:	adds	r0, #36	; 0x24
    1610:	str	r3, [r4, #20]
    1612:	ldrb.w	r3, [sp, #116]	; 0x74
    1616:	str	r1, [r4, #0]
    1618:	mov	r1, r6
    161a:	str	r2, [r4, #28]
    161c:	strb.w	r3, [r4, #32]
{
  public:
	constexpr Print() : write_error(0) {}
    1620:	strb	r5, [r4, #4]
{
  public:
	constexpr Stream() : _timeout(1000), read_error(0) {}
    1622:	strb	r5, [r4, #12]

#define FILE_WHOAMI

class File : public Stream {
public:
	constexpr File() : f(nullptr) { }
    1624:	str	r5, [r4, #16]
    1626:	str	r7, [r4, #8]
    1628:	bl	b384 <FsBaseFile::FsBaseFile(FsBaseFile const&)>
		// or is_base_of
		//static_assert(std::is_same<decltype(*file),File>::value,
			//"File(File *file) constructor only accepts pointers "
			//"to derived classes, not File itself");
		f = file;
		if (f) f->refcount++;
    162c:	ldr	r3, [r4, #16]
};
/**
 * \class FsFile
 * \brief FsBaseFile file with Arduino Stream.
 */
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    162e:	ldr	r1, [pc, #168]	; (16d8 <file_open(unsigned short)+0x130>)
    1630:	adds	r3, #1
#define FILE_WHOAMI

class File : public Stream {
public:
	constexpr File() : f(nullptr) { }
	File(File *file) {
    1632:	ldr	r2, [pc, #168]	; (16dc <file_open(unsigned short)+0x134>)
    1634:	str	r5, [r4, #100]	; 0x64
    1636:	strb.w	r5, [sp, #8]
    163a:	str	r7, [sp, #12]
    163c:	strb.w	r5, [sp, #16]
		// can we use is_same or is_polymorphic with static_assert?
		// or is_base_of
		//static_assert(std::is_same<decltype(*file),File>::value,
			//"File(File *file) constructor only accepts pointers "
			//"to derived classes, not File itself");
		f = file;
    1640:	str	r4, [sp, #20]
    1642:	str	r1, [r4, #20]
		if (f) f->refcount++;
    1644:	str	r3, [r4, #16]
#define FILE_WHOAMI

class File : public Stream {
public:
	constexpr File() : f(nullptr) { }
	File(File *file) {
    1646:	str	r2, [sp, #4]
    1648:	ldr	r3, [pc, #148]	; (16e0 <file_open(unsigned short)+0x138>)
 */
class FsBaseFile {
 public:
  FsBaseFile() : m_fFile(nullptr), m_xFile(nullptr) {}

  ~FsBaseFile() {close();}
    164a:	mov	r0, r6
    164c:	str	r3, [sp, #104]	; 0x68
    164e:	bl	b408 <FsBaseFile::close()>
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    1652:	ldr	r4, [pc, #144]	; (16e4 <file_open(unsigned short)+0x13c>)
    1654:	ldr	r2, [r4, #16]
    1656:	cbz	r2, 166a <file_open(unsigned short)+0xc2>
    1658:	ldr	r3, [r2, #16]
    165a:	subs	r3, #1
    165c:	str	r3, [r2, #16]
    165e:	cbnz	r3, 166a <file_open(unsigned short)+0xc2>
    1660:	ldr	r0, [r4, #16]
    1662:	cbz	r0, 166a <file_open(unsigned short)+0xc2>
    1664:	ldr	r3, [r0, #0]
    1666:	ldr	r3, [r3, #32]
    1668:	blx	r3
	File& operator = (const File &file) {
		//Serial.println("File assignment");
		//static int assigncount=0;
		//if (++assigncount > 20) while (1) ;
		invalidate();
		f = file.f;
    166a:	ldr	r3, [sp, #20]
    166c:	str	r3, [r4, #16]
		if (f) f->refcount++;
    166e:	cbz	r3, 1690 <file_open(unsigned short)+0xe8>
    1670:	ldr	r2, [r3, #16]
		return *this;
	}
	virtual ~File() {
    1672:	ldr	r1, [pc, #104]	; (16dc <file_open(unsigned short)+0x134>)
		//Serial.println("File assignment");
		//static int assigncount=0;
		//if (++assigncount > 20) while (1) ;
		invalidate();
		f = file.f;
		if (f) f->refcount++;
    1674:	adds	r2, #1
		return *this;
	}
	virtual ~File() {
    1676:	str	r1, [sp, #4]
		//Serial.println("File assignment");
		//static int assigncount=0;
		//if (++assigncount > 20) while (1) ;
		invalidate();
		f = file.f;
		if (f) f->refcount++;
    1678:	str	r2, [r3, #16]
    167a:	ldr	r2, [sp, #20]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    167c:	cbz	r2, 1690 <file_open(unsigned short)+0xe8>
    167e:	ldr	r3, [r2, #16]
    1680:	subs	r3, #1
    1682:	str	r3, [r2, #16]
    1684:	cbnz	r3, 1690 <file_open(unsigned short)+0xe8>
    1686:	ldr	r0, [sp, #20]
    1688:	cbz	r0, 1690 <file_open(unsigned short)+0xe8>
    168a:	ldr	r3, [r0, #0]
    168c:	ldr	r3, [r3, #32]
    168e:	blx	r3
	}
	virtual void close() {
		if (f) f->close();
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
    1690:	ldr	r0, [r4, #16]
    1692:	cmp	r0, #0
    1694:	beq.n	15b8 <file_open(unsigned short)+0x10>
    1696:	ldr	r3, [r0, #0]
    1698:	ldr	r3, [r3, #68]	; 0x44
    169a:	blx	r3
    169c:	sxth	r0, r0
  return !(!mfile);
}
    169e:	add	sp, #188	; 0xbc
    16a0:	pop	{r4, r5, r6, r7, pc}

int16_t file_open(uint16_t store)
{ char filename[80];
  if(!makeFilename(filename)) return 0;
  if(!checkPath(store, filename)) return 0;
  mfile = sdx[store].open(filename,FILE_WRITE);
    16a2:	movs	r3, #1
    16a4:	add	r0, sp, #4
    16a6:	blx	r4
    16a8:	b.n	1652 <file_open(unsigned short)+0xaa>
  bool isHidden() {
    return m_fFile ? m_fFile->isHidden() :
           m_xFile ? m_xFile->isHidden() : false;
  }
  /** \return True if this is an open file/directory else false. */
  bool isOpen() {return m_fFile || m_xFile;}
    16aa:	ldr	r3, [sp, #180]	; 0xb4
    16ac:	cmp	r3, #0
    16ae:	bne.n	15f2 <file_open(unsigned short)+0x4a>
    16b0:	mov.w	r1, #1000	; 0x3e8

#define FILE_WHOAMI

class File : public Stream {
public:
	constexpr File() : f(nullptr) { }
    16b4:	ldr	r2, [pc, #36]	; (16dc <file_open(unsigned short)+0x134>)
    16b6:	strb.w	r3, [sp, #8]
    16ba:	add	r6, sp, #120	; 0x78
    16bc:	strb.w	r3, [sp, #16]
    16c0:	str	r3, [sp, #20]
    16c2:	str	r1, [sp, #12]
    16c4:	str	r2, [sp, #4]
    16c6:	b.n	1648 <file_open(unsigned short)+0xa0>
    16c8:	.word	0x20002d48
    16cc:	.word	0x00000aed
    16d0:	.word	0x20000008
    16d4:	.word	0x200000d4
    16d8:	.word	0x20000050
    16dc:	.word	0x20000074
    16e0:	.word	0x2000002c
    16e4:	.word	0x20000bb4

000016e8 <do_logger(unsigned short, short)>:
#define NBUF_DISK (NDBL*NBUF_ACQ)
uint32_t diskBuffer[NBUF_DISK];
uint32_t maxDel=0;

int16_t do_logger(uint16_t store, int16_t state)
{ uint32_t to=millis();
    16e8:	push	{r3, r4, r5, r6, r7, lr}
    16ea:	ldr	r5, [pc, #148]	; (1780 <do_logger(unsigned short, short)+0x98>)
    16ec:	mov	r7, r0
    16ee:	mov	r4, r1
  if(pullData(diskBuffer,NDBL))
    16f0:	ldr	r0, [pc, #144]	; (1784 <do_logger(unsigned short, short)+0x9c>)
    16f2:	movs	r1, #1
    16f4:	ldr	r6, [r5, #0]
    16f6:	bl	1288 <pullData(unsigned long*, unsigned long)>
    16fa:	cbz	r0, 1710 <do_logger(unsigned short, short)+0x28>
  {
    if(state==0)
    16fc:	cbz	r4, 172e <do_logger(unsigned short, short)+0x46>
    { // acquisition is running, need to open file
      if(!file_open(store)) return -2;
      state=1;
    }
    if(state==1)
    16fe:	cmp	r4, #1
    1700:	beq.n	1736 <do_logger(unsigned short, short)+0x4e>
    { // file just opended, need to write header
      if(!file_writeHeader()) return -3;
      state=2;
      
    }
    if(state>=2)
    1702:	ble.n	1714 <do_logger(unsigned short, short)+0x2c>
    { // write data to disk
      if(!file_writeData(diskBuffer,NBUF_DISK*4)) return -4;
    1704:	mov.w	r1, #512	; 0x200
    1708:	ldr	r0, [pc, #120]	; (1784 <do_logger(unsigned short, short)+0x9c>)
    170a:	bl	1380 <file_writeData(void*, unsigned long)>
    170e:	cbz	r0, 1762 <do_logger(unsigned short, short)+0x7a>
    }
  }

  if(state==3)
    1710:	cmp	r4, #3
    1712:	beq.n	174c <do_logger(unsigned short, short)+0x64>
  { // close file, but continue acquisition
    if(!file_close()) return -5;
    state=0;
  }

  if(state==4)
    1714:	cmp	r4, #4
    1716:	beq.n	1756 <do_logger(unsigned short, short)+0x6e>
    1718:	ldr	r3, [r5, #0]
    if(!file_close()) return -6;
    state=-1;
  }

  uint32_t dt=millis()-to;
  if(dt>maxDel) maxDel=dt;
    171a:	ldr	r2, [pc, #108]	; (1788 <do_logger(unsigned short, short)+0xa0>)
  { // close file and stop acquisition
    if(!file_close()) return -6;
    state=-1;
  }

  uint32_t dt=millis()-to;
    171c:	subs	r3, r3, r6
  if(dt>maxDel) maxDel=dt;
    171e:	ldr	r1, [r2, #0]
    1720:	cmp	r3, r1
    1722:	bls.n	172a <do_logger(unsigned short, short)+0x42>
    1724:	str	r3, [r2, #0]

  return state;
    1726:	mov	r0, r4
    1728:	pop	{r3, r4, r5, r6, r7, pc}
    172a:	mov	r0, r4
    172c:	pop	{r3, r4, r5, r6, r7, pc}
{ uint32_t to=millis();
  if(pullData(diskBuffer,NDBL))
  {
    if(state==0)
    { // acquisition is running, need to open file
      if(!file_open(store)) return -2;
    172e:	mov	r0, r7
    1730:	bl	15a8 <file_open(unsigned short)>
    1734:	cbz	r0, 1768 <do_logger(unsigned short, short)+0x80>
      state=1;
    }
    if(state==1)
    { // file just opended, need to write header
      if(!file_writeHeader()) return -3;
    1736:	bl	1338 <file_writeHeader()>
    173a:	cbz	r0, 176e <do_logger(unsigned short, short)+0x86>
      state=2;
      
    }
    if(state>=2)
    { // write data to disk
      if(!file_writeData(diskBuffer,NBUF_DISK*4)) return -4;
    173c:	mov.w	r1, #512	; 0x200
    1740:	ldr	r0, [pc, #64]	; (1784 <do_logger(unsigned short, short)+0x9c>)
    1742:	bl	1380 <file_writeData(void*, unsigned long)>
    1746:	cbz	r0, 1762 <do_logger(unsigned short, short)+0x7a>
      state=1;
    }
    if(state==1)
    { // file just opended, need to write header
      if(!file_writeHeader()) return -3;
      state=2;
    1748:	movs	r4, #2
    174a:	b.n	1718 <do_logger(unsigned short, short)+0x30>
    }
  }

  if(state==3)
  { // close file, but continue acquisition
    if(!file_close()) return -5;
    174c:	bl	13b8 <file_close()>
    1750:	cbz	r0, 177a <do_logger(unsigned short, short)+0x92>
    state=0;
    1752:	movs	r4, #0
    1754:	b.n	1718 <do_logger(unsigned short, short)+0x30>
  }

  if(state==4)
  { // close file and stop acquisition
    if(!file_close()) return -6;
    1756:	bl	13b8 <file_close()>
    175a:	cbz	r0, 1774 <do_logger(unsigned short, short)+0x8c>
    state=-1;
    175c:	mov.w	r4, #4294967295
    1760:	b.n	1718 <do_logger(unsigned short, short)+0x30>
      state=2;
      
    }
    if(state>=2)
    { // write data to disk
      if(!file_writeData(diskBuffer,NBUF_DISK*4)) return -4;
    1762:	mvn.w	r0, #3
    1766:	pop	{r3, r4, r5, r6, r7, pc}
{ uint32_t to=millis();
  if(pullData(diskBuffer,NDBL))
  {
    if(state==0)
    { // acquisition is running, need to open file
      if(!file_open(store)) return -2;
    1768:	mvn.w	r0, #1
    176c:	pop	{r3, r4, r5, r6, r7, pc}
      state=1;
    }
    if(state==1)
    { // file just opended, need to write header
      if(!file_writeHeader()) return -3;
    176e:	mvn.w	r0, #2
    1772:	pop	{r3, r4, r5, r6, r7, pc}
    state=0;
  }

  if(state==4)
  { // close file and stop acquisition
    if(!file_close()) return -6;
    1774:	mvn.w	r0, #5
    1778:	pop	{r3, r4, r5, r6, r7, pc}
    }
  }

  if(state==3)
  { // close file, but continue acquisition
    if(!file_close()) return -5;
    177a:	mvn.w	r0, #4
    177e:	pop	{r3, r4, r5, r6, r7, pc}
    1780:	.word	0x20006244
    1784:	.word	0x2000183c
    1788:	.word	0x20001638

0000178c <loop>:
  Serial.flush();
}

uint32_t loop_count=0;
void loop()
{ loop_count++;
    178c:	ldr	r2, [pc, #160]	; (1830 <loop+0xa4>)
    178e:	ldr	r3, [r2, #0]
    1790:	push	{r4, r5, r6, lr}
  state = do_menu(state);
    1792:	ldr	r4, [pc, #160]	; (1834 <loop+0xa8>)
  Serial.flush();
}

uint32_t loop_count=0;
void loop()
{ loop_count++;
    1794:	adds	r3, #1
    1796:	sub	sp, #8
  state = do_menu(state);
    1798:	ldrsh.w	r0, [r4]
  Serial.flush();
}

uint32_t loop_count=0;
void loop()
{ loop_count++;
    179c:	str	r3, [r2, #0]
  state = do_menu(state);
    179e:	bl	12e4 <do_menu(short)>
    17a2:	mov	r1, r0
    17a4:	strh	r0, [r4, #0]
        if(!pushData(acq_rx_buffer)) acq_miss++;

    }

  int16_t acq_check(int16_t state)
  { if(!state)
    17a6:	cbnz	r0, 17d6 <loop+0x4a>
      }

      void acq_start(void)
      {
          //DMA_SERQ = dma.channel;
          I2S1_RCSR |= (I2S_RCSR_RE | I2S_RCSR_BCE);
    17a8:	ldr	r2, [pc, #140]	; (1838 <loop+0xac>)
    17aa:	ldr.w	r3, [r2, #136]	; 0x88
    17ae:	orr.w	r3, r3, #2415919104	; 0x90000000
    17b2:	str.w	r3, [r2, #136]	; 0x88
  state = check_filing(state);
  //
  if(state<0)
    mtpd.loop();
  else
    state=do_logger(0,state);
    17b6:	movs	r0, #0
    17b8:	bl	16e8 <do_logger(unsigned short, short)>
    17bc:	strh	r0, [r4, #0]

  if(state>=0) logg(1000,"loop");
    17be:	cmp	r0, #0
    17c0:	blt.n	17d2 <loop+0x46>
    17c2:	ldr	r3, [pc, #120]	; (183c <loop+0xb0>)
/**************** Online logging *******************************/
extern uint32_t loop_count, acq_count, acq_miss, maxDel;
extern uint16_t maxCount;
void logg(uint32_t del, const char *txt)
{ static uint32_t to;
  if(millis()-to > del)
    17c4:	ldr	r2, [pc, #120]	; (1840 <loop+0xb4>)
    17c6:	ldr	r3, [r3, #0]
    17c8:	ldr	r2, [r2, #0]
    17ca:	subs	r3, r3, r2
    17cc:	cmp.w	r3, #1000	; 0x3e8
    17d0:	bhi.n	17ea <loop+0x5e>
  else
    state=do_logger(0,state);

  if(state>=0) logg(1000,"loop");
  //asm("wfi"); // may wait forever on T4.x
}
    17d2:	add	sp, #8
    17d4:	pop	{r4, r5, r6, pc}
  int16_t acq_check(int16_t state)
  { if(!state)
    { // start acquisition
      acq_start();
    }
    if(state>3)
    17d6:	cmp	r0, #3
    17d8:	ble.n	17f6 <loop+0x6a>
          I2S1_RCSR |= (I2S_RCSR_RE | I2S_RCSR_BCE);
      }

      void acq_stop(void)
      {
          I2S1_RCSR &= ~(I2S_RCSR_RE | I2S_RCSR_BCE);
    17da:	ldr	r2, [pc, #92]	; (1838 <loop+0xac>)
    17dc:	ldr.w	r3, [r2, #136]	; 0x88
    17e0:	bic.w	r3, r3, #2415919104	; 0x90000000
    17e4:	str.w	r3, [r2, #136]	; 0x88
    17e8:	b.n	17b6 <loop+0x2a>
    17ea:	ldr	r0, [pc, #88]	; (1844 <loop+0xb8>)
  else
    state=do_logger(0,state);

  if(state>=0) logg(1000,"loop");
  //asm("wfi"); // may wait forever on T4.x
}
    17ec:	add	sp, #8
    17ee:	ldmia.w	sp!, {r4, r5, r6, lr}
    17f2:	b.w	3fc <logg(unsigned long, char const*) [clone .part.52]>

uint32_t t_on = 60;
int16_t check_filing(int16_t state)
{
  static uint32_t to;
  if(state==2)
    17f6:	cmp	r0, #2
    17f8:	bne.n	181e <loop+0x92>
    17fa:	str	r0, [sp, #4]
  {
    uint32_t tt = rtc_get();
    17fc:	bl	e6d0 <rtc_get>
    uint32_t dt = tt % t_on;
    1800:	ldr	r3, [pc, #68]	; (1848 <loop+0xbc>)
    if(dt<to) state = 3;
    1802:	ldr	r2, [pc, #72]	; (184c <loop+0xc0>)
{
  static uint32_t to;
  if(state==2)
  {
    uint32_t tt = rtc_get();
    uint32_t dt = tt % t_on;
    1804:	ldr	r3, [r3, #0]
    if(dt<to) state = 3;
    1806:	ldr	r5, [r2, #0]
    1808:	ldr	r1, [sp, #4]
{
  static uint32_t to;
  if(state==2)
  {
    uint32_t tt = rtc_get();
    uint32_t dt = tt % t_on;
    180a:	udiv	r6, r0, r3
    180e:	mls	r0, r6, r3, r0
    if(dt<to) state = 3;
    1812:	cmp	r0, r5
    1814:	it	cc
    1816:	movcc	r1, #3
    to = dt;
    1818:	str	r0, [r2, #0]
uint32_t loop_count=0;
void loop()
{ loop_count++;
  state = do_menu(state);
  state = acq_check(state);
  state = check_filing(state);
    181a:	strh	r1, [r4, #0]
    181c:	b.n	17b6 <loop+0x2a>
  //
  if(state<0)
    181e:	cmp	r0, #0
    1820:	bge.n	17b6 <loop+0x2a>
    mtpd.loop();
    1822:	ldr	r0, [pc, #44]	; (1850 <loop+0xc4>)
    1824:	bl	70b8 <MTPD::loop()>
    1828:	ldrsh.w	r0, [r4]
    182c:	b.n	17be <loop+0x32>
    182e:	nop
    1830:	.word	0x20005b04
    1834:	.word	0x20001d46
    1838:	.word	0x40384000
    183c:	.word	0x20006244
    1840:	.word	0x20005b10
    1844:	.word	0x2000026c
    1848:	.word	0x20000ba8
    184c:	.word	0x20005b0c
    1850:	.word	0x200036c0

00001854 <_GLOBAL__sub_I_sd_str>:
    if(state>3)
    { // stop acquisition
      acq_stop();
    }
    return state;
  }
    1854:	push	{r3, r4, r5, r6, r7, lr}
//------------------------------------------------------------------------------
/**
 * \class SdioCard
 * \brief Raw SDIO access to SD and SDHC flash memory cards.
 */
class SdioCard : public SdCardInterface {
    1856:	ldr	r1, [pc, #300]	; (1984 <_GLOBAL__sub_I_sd_str+0x130>)
 * \class FsVolume
 * \brief FsVolume class.
 */
class FsVolume {
 public:
  FsVolume() : m_fVol(nullptr), m_xVol(nullptr) {}
    1858:	movs	r4, #0


class SDClass : public FS
{
public:
	SDClass() { }
    185a:	ldr	r3, [pc, #300]	; (1988 <_GLOBAL__sub_I_sd_str+0x134>)
		init_AlwaysInline(MSBFIRST, SPI_MODE0);
	}
private:
	void init_AlwaysInline(uint8_t bitOrder, uint8_t dataMode)
	  __attribute__((__always_inline__)) {
			tcr = LPSPI_TCR_FRAMESZ(7);    // TCR has polarity and bit order too
    185c:	movs	r5, #7
    185e:	ldr.w	ip, [pc, #348]	; 19bc <_GLOBAL__sub_I_sd_str+0x168>
#else  // HAS_SDIO_CLASS
class SdSpiCard {
#endif  // HAS_SDIO_CLASS
 public:
  /** Construct an instance of SdSpiCard. */
  SdSpiCard() : m_errorCode(SD_CARD_ERROR_INIT_NOT_CALLED), m_type(0) {}
    1862:	movs	r7, #40	; 0x28
  return state;
}

/************ Basic File System Interface *************************/
#include "SD.h"
extern SDClass sdx[];
    1864:	ldr	r6, [pc, #292]	; (198c <_GLOBAL__sub_I_sd_str+0x138>)
    1866:	mov	r0, r4
    1868:	ldr.w	lr, [pc, #340]	; 19c0 <_GLOBAL__sub_I_sd_str+0x16c>
    186c:	str.w	r1, [r3, #1164]	; 0x48c
    1870:	mov	r2, r6
    1872:	str.w	r1, [r3, #2368]	; 0x940
public:
	SPISettings(uint32_t clockIn, uint8_t bitOrderIn, uint8_t dataModeIn) : _clock(clockIn) {
		init_AlwaysInline(bitOrderIn, dataModeIn);
	}

	SPISettings() : _clock(4000000) {
    1876:	ldr	r1, [pc, #280]	; (1990 <_GLOBAL__sub_I_sd_str+0x13c>)
    1878:	str.w	ip, [r3]
    187c:	str.w	ip, [r3, #1204]	; 0x4b4
    1880:	str.w	r4, [r3, #1148]	; 0x47c
    1884:	str.w	r4, [r3, #1152]	; 0x480
 * \class SdioConfig
 * \brief SDIO card configuration.
 */
class SdioConfig {
 public:
  SdioConfig() : m_options(FIFO_SDIO) {}
    1888:	strb.w	r4, [r3, #1172]	; 0x494
    188c:	strb.w	r4, [r3, #1202]	; 0x4b2
    1890:	str.w	r4, [r3, #2352]	; 0x930
    1894:	str.w	r4, [r3, #2356]	; 0x934
    1898:	strb.w	r4, [r3, #2376]	; 0x948
    189c:	strb.w	r4, [r3, #2406]	; 0x966
    18a0:	str.w	lr, [r3, #1176]	; 0x498
    18a4:	str.w	lr, [r3, #2380]	; 0x94c
    18a8:	str.w	r1, [r3, #1184]	; 0x4a0
    18ac:	str.w	r1, [r3, #2388]	; 0x954
		init_AlwaysInline(MSBFIRST, SPI_MODE0);
	}
private:
	void init_AlwaysInline(uint8_t bitOrder, uint8_t dataMode)
	  __attribute__((__always_inline__)) {
			tcr = LPSPI_TCR_FRAMESZ(7);    // TCR has polarity and bit order too
    18b0:	str.w	r5, [r3, #1188]	; 0x4a4
    18b4:	str.w	r5, [r3, #2392]	; 0x958
    18b8:	strb.w	r7, [r3, #1199]	; 0x4af
    18bc:	strb.w	r7, [r3, #2403]	; 0x963
    18c0:	mov.w	r7, #1000	; 0x3e8
    18c4:	ldr	r1, [pc, #204]	; (1994 <_GLOBAL__sub_I_sd_str+0x140>)
    18c6:	bl	f920 <__aeabi_atexit>

class mSD_Base
{
  public:
    mSD_Base() {
      fsCount = 0;
    18ca:	ldr	r5, [pc, #204]	; (1998 <_GLOBAL__sub_I_sd_str+0x144>)
    18cc:	ldr	r3, [pc, #204]	; (199c <_GLOBAL__sub_I_sd_str+0x148>)

  void mtp_yield(void);


// Storage implementation for SD. SD needs to be already initialized.
class MTPStorage_SD : public MTPStorageInterface, mSD_Base
    18ce:	mvn.w	r1, #1
    18d2:	ldr.w	lr, [pc, #240]	; 19c4 <_GLOBAL__sub_I_sd_str+0x170>
  const int nfs = sizeof(lfs_size)/sizeof(int);

  LittleFS_RAM ramfs[nfs]; // needs to be declared if LittleFS is used in storage.h
#endif

MTPStorage_SD storage;
    18d6:	mov	r2, r6

class mSD_Base
{
  public:
    mSD_Base() {
      fsCount = 0;
    18d8:	str	r4, [r5, #4]
    18da:	mov	r0, r5
    18dc:	strb.w	r4, [r5, #172]	; 0xac
    18e0:	strb.w	r4, [r5, #180]	; 0xb4
    18e4:	str.w	r4, [r5, #184]	; 0xb8
    18e8:	strb.w	r4, [r5, #192]	; 0xc0
    18ec:	strb.w	r4, [r5, #200]	; 0xc8
    18f0:	str.w	r4, [r5, #204]	; 0xcc
    18f4:	strb.w	r4, [r5, #212]	; 0xd4
    18f8:	strb.w	r4, [r5, #220]	; 0xdc
    18fc:	str.w	r4, [r5, #224]	; 0xe0

  void mtp_yield(void);


// Storage implementation for SD. SD needs to be already initialized.
class MTPStorage_SD : public MTPStorageInterface, mSD_Base
    1900:	str.w	r1, [r5, #240]	; 0xf0
    1904:	str.w	r7, [r5, #176]	; 0xb0
    1908:	str.w	r7, [r5, #196]	; 0xc4
    190c:	str.w	r7, [r5, #216]	; 0xd8

// MTP Responder.
class MTPD {
public:

  explicit MTPD(MTPStorageInterface* storage): storage_(storage) {}
    1910:	movw	r7, #9248	; 0x2420
    1914:	str.w	r3, [r5, #168]	; 0xa8
    1918:	str.w	r3, [r5, #188]	; 0xbc
    191c:	str.w	r3, [r5, #208]	; 0xd0
    1920:	ldr	r1, [pc, #124]	; (19a0 <_GLOBAL__sub_I_sd_str+0x14c>)
    1922:	str.w	lr, [r5]
    1926:	str.w	r4, [r5, #228]	; 0xe4
    192a:	str.w	r4, [r5, #232]	; 0xe8
    192e:	str.w	r4, [r5, #236]	; 0xec
    1932:	str.w	r4, [r5, #244]	; 0xf4
    1936:	strb.w	r4, [r5, #248]	; 0xf8
    193a:	strb.w	r4, [r5, #249]	; 0xf9
    193e:	bl	f920 <__aeabi_atexit>
    1942:	ldr	r3, [pc, #96]	; (19a4 <_GLOBAL__sub_I_sd_str+0x150>)
    1944:	movw	r1, #9252	; 0x2424
    1948:	movw	r2, #9256	; 0x2428
//    extern "C" uint8_t external_psram_size;
//    uint8_t size = external_psram_size;
//    uint32_t *memory_begin = (uint32_t *)(0x70000000);
//    uint32_t *data_buffer = memory_begin;

    uint32_t *data_buffer = (uint32_t *)extmem_malloc(MAXBUF*128*sizeof(uint32_t));
    194c:	mov.w	r0, #512000	; 0x7d000
    1950:	strb	r4, [r3, r1]
    1952:	str	r4, [r3, r2]
    1954:	str	r5, [r3, #0]
    1956:	str	r4, [r3, r7]
    1958:	bl	e700 <extmem_malloc>
    195c:	ldr	r3, [pc, #72]	; (19a8 <_GLOBAL__sub_I_sd_str+0x154>)
}

/************ Basic File System Interface *************************/
#include "SD.h"
extern SDClass sdx[];
static File mfile;
    195e:	mov	r2, r6
	/*************************************************/
	/**    Channel Allocation                       **/
	/*************************************************/

	DMAChannel() {
		begin();
    1960:	ldr	r5, [pc, #72]	; (19ac <_GLOBAL__sub_I_sd_str+0x158>)
//    extern "C" uint8_t external_psram_size;
//    uint8_t size = external_psram_size;
//    uint32_t *memory_begin = (uint32_t *)(0x70000000);
//    uint32_t *data_buffer = memory_begin;

    uint32_t *data_buffer = (uint32_t *)extmem_malloc(MAXBUF*128*sizeof(uint32_t));
    1962:	str	r0, [r3, #0]
}

/************ Basic File System Interface *************************/
#include "SD.h"
extern SDClass sdx[];
static File mfile;
    1964:	ldr	r1, [pc, #72]	; (19b0 <_GLOBAL__sub_I_sd_str+0x15c>)
    1966:	ldr	r0, [pc, #76]	; (19b4 <_GLOBAL__sub_I_sd_str+0x160>)
    1968:	bl	f920 <__aeabi_atexit>
    196c:	mov	r1, r4
    196e:	mov	r0, r5
    1970:	bl	f494 <DMAChannel::begin(bool)>
  static uint32_t tdm_rx_buffer[2*NBUF_I2S];
  static uint32_t acq_rx_buffer[NBUF_ACQ];
  #define I2S_DMA_PRIO 6

  #include "DMAChannel.h"
  DMAChannel dma;
    1974:	mov	r2, r6
    1976:	mov	r0, r5
    1978:	ldr	r1, [pc, #60]	; (19b8 <_GLOBAL__sub_I_sd_str+0x164>)
    if(state>3)
    { // stop acquisition
      acq_stop();
    }
    return state;
  }
    197a:	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  static uint32_t tdm_rx_buffer[2*NBUF_I2S];
  static uint32_t acq_rx_buffer[NBUF_ACQ];
  #define I2S_DMA_PRIO 6

  #include "DMAChannel.h"
  DMAChannel dma;
    197e:	b.w	f920 <__aeabi_atexit>
    1982:	nop
    1984:	.word	0x200004b0
    1988:	.word	0x20002d48
    198c:	.word	0x20000ba4
    1990:	.word	0x003d0900
    1994:	.word	0x000001e5
    1998:	.word	0x20001c40
    199c:	.word	0x20000074
    19a0:	.word	0x00000d99
    19a4:	.word	0x200036c0
    19a8:	.word	0x200036b0
    19ac:	.word	0x20001630
    19b0:	.word	0x00000cdd
    19b4:	.word	0x20000bb4
    19b8:	.word	0x000002fd
    19bc:	.word	0x20000134
    19c0:	.word	0x20000458
    19c4:	.word	0x20000288

000019c8 <MTPStorage_SD::addFilesystem(FS&, char const*)>:
    mSD_Base() {
      fsCount = 0;
    }

    void sd_addFilesystem(FS &fs, const char *name) {
      if (fsCount < MTPD_MAX_FILESYSTEMS) {
    19c8:	ldr	r3, [r0, #4]
    19ca:	cmp	r3, #19
    19cc:	bgt.n	19e0 <MTPStorage_SD::addFilesystem(FS&, char const*)+0x18>

// Storage implementation for SD. SD needs to be already initialized.
class MTPStorage_SD : public MTPStorageInterface, mSD_Base
{ 
public:
  void addFilesystem(FS &fs, const char *name) { sd_addFilesystem(fs, name);}
    19ce:	push	{r4}
    19d0:	add.w	r4, r0, r3, lsl #2
    }

    void sd_addFilesystem(FS &fs, const char *name) {
      if (fsCount < MTPD_MAX_FILESYSTEMS) {
        sd_name[fsCount] = name;
        sdx[fsCount++] = &fs;
    19d4:	adds	r3, #1
      fsCount = 0;
    }

    void sd_addFilesystem(FS &fs, const char *name) {
      if (fsCount < MTPD_MAX_FILESYSTEMS) {
        sd_name[fsCount] = name;
    19d6:	str	r2, [r4, #8]
        sdx[fsCount++] = &fs;
    19d8:	str	r3, [r0, #4]
    19da:	str	r1, [r4, #88]	; 0x58

// Storage implementation for SD. SD needs to be already initialized.
class MTPStorage_SD : public MTPStorageInterface, mSD_Base
{ 
public:
  void addFilesystem(FS &fs, const char *name) { sd_addFilesystem(fs, name);}
    19dc:	ldr.w	r4, [sp], #4
    19e0:	bx	lr
    19e2:	nop

000019e4 <MTPStorage_SD::get_FSCount()>:
  Record ReadIndexRecord(uint32_t i) ;
  uint16_t ConstructFilename(int i, char* out, int len) ;
  void OpenFileByIndex(uint32_t i, uint32_t mode = FILE_READ) ;
  void printRecord(int h, Record *p);

  uint32_t get_FSCount(void) {return sd_getFSCount();}
    19e4:	ldr	r0, [r0, #4]
    19e6:	bx	lr

000019e8 <MTPStorage_SD::get_FSName(unsigned long)>:
      for(int ii=0; ii<fsCount;ii++) if(!strcmp(name,sd_name[ii])) return ii;
      return 0xFFFFFFFFUL;
    }

    uint32_t sd_getFSCount(void) {return fsCount;}
    const char *sd_getFSName(uint32_t store) { return sd_name[store];}
    19e8:	add.w	r1, r0, r1, lsl #2
  uint16_t ConstructFilename(int i, char* out, int len) ;
  void OpenFileByIndex(uint32_t i, uint32_t mode = FILE_READ) ;
  void printRecord(int h, Record *p);

  uint32_t get_FSCount(void) {return sd_getFSCount();}
  const char *get_FSName(uint32_t storage) { return sd_getFSName(storage);}
    19ec:	ldr	r0, [r1, #8]
    19ee:	bx	lr

000019f0 <MTPStorage_SD::readonly(unsigned long)>:

// These should probably be weak.
void mtp_yield() {}
void mtp_lock_storage(bool lock) {}

  bool MTPStorage_SD::readonly(uint32_t store) { return false; }
    19f0:	movs	r0, #0
    19f2:	bx	lr

000019f4 <MTPStorage_SD::has_directories(unsigned long)>:
  bool MTPStorage_SD::has_directories(uint32_t store) { return true; }
    19f4:	movs	r0, #1
    19f6:	bx	lr

000019f8 <MTPStorage_SD::totalSize(unsigned long)>:
    bool sd_rename(uint32_t store, char *oldfilename, char *newfilename) { return sdx[store]->rename(oldfilename,newfilename);  }
    bool sd_remove(uint32_t store, const char *filename) {    Serial.println(filename);
return sdx[store]->remove(filename);  }
    bool sd_rmdir(uint32_t store, char *filename) { return sdx[store]->rmdir(filename);  }

    uint64_t sd_totalSize(uint32_t store) { return sdx[store]->totalSize();  }
    19f8:	add.w	r1, r0, r1, lsl #2
    19fc:	ldr	r0, [r1, #88]	; 0x58
    19fe:	ldr	r3, [r0, #0]
    1a00:	ldr	r3, [r3, #28]
    1a02:	bx	r3

00001a04 <MTPStorage_SD::usedSize(unsigned long)>:
    uint64_t sd_usedSize(uint32_t store)  { return sdx[store]->usedSize();  }
    1a04:	add.w	r1, r0, r1, lsl #2
    1a08:	ldr	r0, [r1, #88]	; 0x58
    1a0a:	ldr	r3, [r0, #0]
    1a0c:	ldr	r3, [r3, #24]
    1a0e:	bx	r3

00001a10 <MTPStorage_SD::write(char const*, unsigned long)>:
#endif
	virtual size_t read(void *buf, size_t nbyte) {
		return (f) ? f->read(buf, nbyte) : 0;
	}
	virtual size_t write(const void *buf, size_t size) {
		return (f) ? f->write(buf, size) : 0;
    1a10:	ldr.w	r0, [r0, #204]	; 0xcc
    1a14:	cmp	r0, #0
    1a16:	beq.n	1a7e <MTPStorage_SD::write(char const*, unsigned long)+0x6e>
    1a18:	ldr	r3, [pc, #112]	; (1a8c <MTPStorage_SD::write(char const*, unsigned long)+0x7c>)
    #endif
    return ret;
  }

  size_t MTPStorage_SD::write(const char* data, uint32_t bytes)
  {
    1a1a:	push	{r4, r5, r6}
    1a1c:	ldr	r4, [r0, #0]
    1a1e:	ldr	r4, [r4, #44]	; 0x2c
    1a20:	cmp	r4, r3
    1a22:	bne.n	1a78 <MTPStorage_SD::write(char const*, unsigned long)+0x68>
    1a24:	ldr	r0, [r0, #16]
    1a26:	cbz	r0, 1a72 <MTPStorage_SD::write(char const*, unsigned long)+0x62>
    1a28:	ldr	r4, [r0, #0]
    1a2a:	ldr	r4, [r4, #44]	; 0x2c
    1a2c:	cmp	r4, r3
    1a2e:	bne.n	1a78 <MTPStorage_SD::write(char const*, unsigned long)+0x68>
    1a30:	ldr	r0, [r0, #16]
    1a32:	cbz	r0, 1a72 <MTPStorage_SD::write(char const*, unsigned long)+0x62>
    1a34:	ldr	r4, [r0, #0]
    1a36:	ldr	r4, [r4, #44]	; 0x2c
    1a38:	cmp	r4, r3
    1a3a:	bne.n	1a78 <MTPStorage_SD::write(char const*, unsigned long)+0x68>
    1a3c:	ldr	r0, [r0, #16]
    1a3e:	cbz	r0, 1a72 <MTPStorage_SD::write(char const*, unsigned long)+0x62>
    1a40:	ldr	r4, [r0, #0]
    1a42:	ldr	r4, [r4, #44]	; 0x2c
    1a44:	cmp	r4, r3
    1a46:	bne.n	1a78 <MTPStorage_SD::write(char const*, unsigned long)+0x68>
    1a48:	ldr	r0, [r0, #16]
    1a4a:	cbz	r0, 1a72 <MTPStorage_SD::write(char const*, unsigned long)+0x62>
    1a4c:	mov	r6, r2
    1a4e:	ldr	r2, [r0, #0]
    1a50:	mov	r5, r1
    1a52:	ldr	r4, [r2, #44]	; 0x2c
    1a54:	cmp	r4, r3
    1a56:	bne.n	1a82 <MTPStorage_SD::write(char const*, unsigned long)+0x72>
    1a58:	ldr	r0, [r0, #16]
    1a5a:	cbz	r0, 1a72 <MTPStorage_SD::write(char const*, unsigned long)+0x62>
    1a5c:	ldr	r2, [r0, #0]
    1a5e:	ldr	r4, [r2, #44]	; 0x2c
    1a60:	cmp	r4, r3
    1a62:	bne.n	1a82 <MTPStorage_SD::write(char const*, unsigned long)+0x72>
    1a64:	ldr	r0, [r0, #16]
    1a66:	cbz	r0, 1a72 <MTPStorage_SD::write(char const*, unsigned long)+0x62>
    1a68:	ldr	r3, [r0, #0]
    1a6a:	mov	r2, r6
    1a6c:	ldr	r3, [r3, #44]	; 0x2c
      mtp_lock_storage(true);
      size_t ret = file_.write(data,bytes);
      mtp_lock_storage(false);
      return ret;
  }
    1a6e:	pop	{r4, r5, r6}
    1a70:	bx	r3
    1a72:	movs	r0, #0
    1a74:	pop	{r4, r5, r6}
    1a76:	bx	lr
    1a78:	mov	r3, r4
    1a7a:	pop	{r4, r5, r6}
    1a7c:	bx	r3
    1a7e:	movs	r0, #0
    1a80:	bx	lr
    1a82:	mov	r2, r6
    1a84:	mov	r1, r5
    1a86:	mov	r3, r4
    1a88:	pop	{r4, r5, r6}
    1a8a:	bx	r3
    1a8c:	.word	0x00000099

00001a90 <MTPStorage_SD::ResetIndex()>:
	}
	virtual void close() {
		if (f) f->close();
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
    1a90:	ldr.w	r3, [r0, #184]	; 0xb8
    1a94:	cmp	r3, #0
    1a96:	beq.n	1b00 <MTPStorage_SD::ResetIndex()+0x70>
    1a98:	ldr	r2, [r3, #0]
    1a9a:	ldr	r1, [pc, #108]	; (1b08 <MTPStorage_SD::ResetIndex()+0x78>)
    1a9c:	ldr	r2, [r2, #68]	; 0x44
    1a9e:	cmp	r2, r1
    index_=sd_open(0,indexFile, FILE_WRITE_BEGIN);
    if(!index_) Serial.println("cannot open Index file"); 
    mtp_lock_storage(false);
  }

  void MTPStorage_SD::ResetIndex() {
    1aa0:	push	{r4, lr}
    1aa2:	mov	r4, r0
    1aa4:	bne.n	1afa <MTPStorage_SD::ResetIndex()+0x6a>
    1aa6:	ldr	r0, [r3, #16]
    1aa8:	cbz	r0, 1af8 <MTPStorage_SD::ResetIndex()+0x68>
    1aaa:	ldr	r3, [r0, #0]
    1aac:	ldr	r3, [r3, #68]	; 0x44
    1aae:	cmp	r3, r2
    1ab0:	bne.n	1b02 <MTPStorage_SD::ResetIndex()+0x72>
    1ab2:	ldr	r0, [r0, #16]
    1ab4:	cbz	r0, 1af8 <MTPStorage_SD::ResetIndex()+0x68>
    1ab6:	ldr	r2, [r0, #0]
    1ab8:	ldr	r2, [r2, #68]	; 0x44
    1aba:	cmp	r2, r3
    1abc:	bne.n	1afc <MTPStorage_SD::ResetIndex()+0x6c>
    1abe:	ldr	r0, [r0, #16]
    1ac0:	cbz	r0, 1af8 <MTPStorage_SD::ResetIndex()+0x68>
    1ac2:	ldr	r3, [r0, #0]
    1ac4:	ldr	r3, [r3, #68]	; 0x44
    1ac6:	cmp	r3, r2
    1ac8:	bne.n	1b02 <MTPStorage_SD::ResetIndex()+0x72>
    1aca:	ldr	r0, [r0, #16]
    1acc:	cbz	r0, 1af8 <MTPStorage_SD::ResetIndex()+0x68>
    1ace:	ldr	r2, [r0, #0]
    1ad0:	ldr	r2, [r2, #68]	; 0x44
    1ad2:	cmp	r2, r3
    1ad4:	bne.n	1afc <MTPStorage_SD::ResetIndex()+0x6c>
    1ad6:	ldr	r0, [r0, #16]
    1ad8:	cbz	r0, 1af8 <MTPStorage_SD::ResetIndex()+0x68>
    1ada:	ldr	r3, [r0, #0]
    1adc:	ldr	r3, [r3, #68]	; 0x44
    1ade:	blx	r3
    if(!sd_isOpen(index_)) return;
    1ae0:	cbz	r0, 1af8 <MTPStorage_SD::ResetIndex()+0x68>
    CloseIndex();
    1ae2:	ldr	r3, [r4, #0]
    1ae4:	mov	r0, r4
    1ae6:	ldr	r3, [r3, #64]	; 0x40
    1ae8:	blx	r3
//    OpenIndex();

    all_scanned_ = false;
    1aea:	movs	r2, #0
    open_file_ = 0xFFFFFFFEUL;
    1aec:	mvn.w	r3, #1
  void MTPStorage_SD::ResetIndex() {
    if(!sd_isOpen(index_)) return;
    CloseIndex();
//    OpenIndex();

    all_scanned_ = false;
    1af0:	strb.w	r2, [r4, #249]	; 0xf9
    open_file_ = 0xFFFFFFFEUL;
    1af4:	str.w	r3, [r4, #240]	; 0xf0
    1af8:	pop	{r4, pc}
    1afa:	mov	r0, r3
    1afc:	blx	r2
    1afe:	b.n	1ae0 <MTPStorage_SD::ResetIndex()+0x50>
    1b00:	bx	lr
    1b02:	blx	r3
    1b04:	b.n	1ae0 <MTPStorage_SD::ResetIndex()+0x50>
    1b06:	nop
    1b08:	.word	0x0000011d

00001b0c <MTPStorage_SD::CloseIndex()>:

  uint64_t MTPStorage_SD::totalSize(uint32_t store) { return sd_totalSize(store); }
  uint64_t MTPStorage_SD::usedSize(uint32_t store) { return sd_usedSize(store); }

  void MTPStorage_SD::CloseIndex()
  {
    1b0c:	push	{r4, lr}
    1b0e:	mov	r4, r0
    1b10:	ldr.w	r0, [r0, #184]	; 0xb8
    1b14:	cmp	r0, #0
    1b16:	beq.n	1bf8 <MTPStorage_SD::CloseIndex()+0xec>
    1b18:	ldr	r3, [r0, #0]
    1b1a:	ldr	r2, [pc, #256]	; (1c1c <MTPStorage_SD::CloseIndex()+0x110>)
    1b1c:	ldr	r3, [r3, #68]	; 0x44
    1b1e:	cmp	r3, r2
    1b20:	bne.n	1c04 <MTPStorage_SD::CloseIndex()+0xf8>
    1b22:	ldr	r0, [r0, #16]
    1b24:	cmp	r0, #0
    1b26:	beq.n	1bf8 <MTPStorage_SD::CloseIndex()+0xec>
    1b28:	ldr	r2, [r0, #0]
    1b2a:	ldr	r2, [r2, #68]	; 0x44
    1b2c:	cmp	r2, r3
    1b2e:	bne.n	1c16 <MTPStorage_SD::CloseIndex()+0x10a>
    1b30:	ldr	r0, [r0, #16]
    1b32:	cmp	r0, #0
    1b34:	beq.n	1bf8 <MTPStorage_SD::CloseIndex()+0xec>
    1b36:	ldr	r3, [r0, #0]
    1b38:	ldr	r3, [r3, #68]	; 0x44
    1b3a:	cmp	r3, r2
    1b3c:	bne.n	1c04 <MTPStorage_SD::CloseIndex()+0xf8>
    1b3e:	ldr	r0, [r0, #16]
    1b40:	cmp	r0, #0
    1b42:	beq.n	1bf8 <MTPStorage_SD::CloseIndex()+0xec>
    1b44:	ldr	r2, [r0, #0]
    1b46:	ldr	r2, [r2, #68]	; 0x44
    1b48:	cmp	r2, r3
    1b4a:	bne.n	1c16 <MTPStorage_SD::CloseIndex()+0x10a>
    1b4c:	ldr	r0, [r0, #16]
    1b4e:	cmp	r0, #0
    1b50:	beq.n	1bf8 <MTPStorage_SD::CloseIndex()+0xec>
    1b52:	ldr	r3, [r0, #0]
    1b54:	ldr	r3, [r3, #68]	; 0x44
    1b56:	cmp	r3, r2
    1b58:	bne.n	1c04 <MTPStorage_SD::CloseIndex()+0xf8>
    1b5a:	ldr	r0, [r0, #16]
    1b5c:	cmp	r0, #0
    1b5e:	beq.n	1bf8 <MTPStorage_SD::CloseIndex()+0xec>
    1b60:	ldr	r3, [r0, #0]
    1b62:	ldr	r3, [r3, #68]	; 0x44
    1b64:	blx	r3
    mtp_lock_storage(true);
    if(sd_isOpen(index_)) index_.close();
    1b66:	cmp	r0, #0
    1b68:	beq.n	1bf8 <MTPStorage_SD::CloseIndex()+0xec>
	}
	virtual uint64_t size() {
		return (f) ? f->size() : 0;
	}
	virtual void close() {
		if (f) f->close();
    1b6a:	ldr.w	r0, [r4, #184]	; 0xb8
    1b6e:	cmp	r0, #0
    1b70:	beq.n	1bf8 <MTPStorage_SD::CloseIndex()+0xec>
    1b72:	ldr	r2, [r0, #0]
    1b74:	ldr	r3, [pc, #168]	; (1c20 <MTPStorage_SD::CloseIndex()+0x114>)
    1b76:	ldr	r2, [r2, #64]	; 0x40
    1b78:	cmp	r2, r3
    1b7a:	bne.n	1c08 <MTPStorage_SD::CloseIndex()+0xfc>
    1b7c:	ldr	r0, [r0, #16]
    1b7e:	cmp	r0, #0
    1b80:	beq.n	1bf8 <MTPStorage_SD::CloseIndex()+0xec>
    1b82:	ldr	r2, [r0, #0]
    1b84:	ldr	r2, [r2, #64]	; 0x40
    1b86:	cmp	r2, r3
    1b88:	bne.n	1c08 <MTPStorage_SD::CloseIndex()+0xfc>
    1b8a:	ldr	r0, [r0, #16]
    1b8c:	cmp	r0, #0
    1b8e:	beq.n	1bf8 <MTPStorage_SD::CloseIndex()+0xec>
    1b90:	ldr	r2, [r0, #0]
    1b92:	ldr	r2, [r2, #64]	; 0x40
    1b94:	cmp	r2, r3
    1b96:	bne.n	1c08 <MTPStorage_SD::CloseIndex()+0xfc>
    1b98:	ldr	r0, [r0, #16]
    1b9a:	cmp	r0, #0
    1b9c:	beq.n	1bf8 <MTPStorage_SD::CloseIndex()+0xec>
    1b9e:	ldr	r2, [r0, #0]
    1ba0:	ldr	r2, [r2, #64]	; 0x40
    1ba2:	cmp	r2, r3
    1ba4:	bne.n	1c08 <MTPStorage_SD::CloseIndex()+0xfc>
    1ba6:	ldr	r0, [r0, #16]
    1ba8:	cbz	r0, 1bf8 <MTPStorage_SD::CloseIndex()+0xec>
    1baa:	ldr	r2, [r0, #0]
    1bac:	ldr	r2, [r2, #64]	; 0x40
    1bae:	cmp	r2, r3
    1bb0:	bne.n	1c08 <MTPStorage_SD::CloseIndex()+0xfc>
    1bb2:	ldr	r0, [r0, #16]
    1bb4:	cbz	r0, 1bf8 <MTPStorage_SD::CloseIndex()+0xec>
    1bb6:	ldr	r2, [r0, #0]
    1bb8:	ldr	r2, [r2, #64]	; 0x40
    1bba:	cmp	r2, r3
    1bbc:	bne.n	1c08 <MTPStorage_SD::CloseIndex()+0xfc>
    1bbe:	ldr	r0, [r0, #16]
    1bc0:	cbz	r0, 1bf8 <MTPStorage_SD::CloseIndex()+0xec>
    1bc2:	ldr	r2, [r0, #0]
    1bc4:	ldr	r2, [r2, #64]	; 0x40
    1bc6:	cmp	r2, r3
    1bc8:	bne.n	1c08 <MTPStorage_SD::CloseIndex()+0xfc>
    1bca:	ldr	r0, [r0, #16]
    1bcc:	cbz	r0, 1bf8 <MTPStorage_SD::CloseIndex()+0xec>
    1bce:	ldr	r2, [r0, #0]
    1bd0:	ldr	r2, [r2, #64]	; 0x40
    1bd2:	cmp	r2, r3
    1bd4:	bne.n	1c08 <MTPStorage_SD::CloseIndex()+0xfc>
    1bd6:	ldr	r0, [r0, #16]
    1bd8:	cbz	r0, 1bf8 <MTPStorage_SD::CloseIndex()+0xec>
    1bda:	ldr	r2, [r0, #0]
    1bdc:	ldr	r2, [r2, #64]	; 0x40
    1bde:	cmp	r2, r3
    1be0:	bne.n	1c08 <MTPStorage_SD::CloseIndex()+0xfc>
    1be2:	ldr	r0, [r0, #16]
    1be4:	cbz	r0, 1bf8 <MTPStorage_SD::CloseIndex()+0xec>
    1be6:	ldr	r2, [r0, #0]
    1be8:	ldr	r2, [r2, #64]	; 0x40
    1bea:	cmp	r2, r3
    1bec:	bne.n	1c08 <MTPStorage_SD::CloseIndex()+0xfc>
    1bee:	ldr	r0, [r0, #16]
    1bf0:	cbz	r0, 1bf8 <MTPStorage_SD::CloseIndex()+0xec>
    1bf2:	ldr	r3, [r0, #0]
    1bf4:	ldr	r3, [r3, #64]	; 0x40
    1bf6:	blx	r3
    mtp_lock_storage(false);
    index_generated = false;
    1bf8:	movs	r3, #0
    1bfa:	strb.w	r3, [r4, #248]	; 0xf8
    index_entries_ = 0;
    1bfe:	str.w	r3, [r4, #244]	; 0xf4
    1c02:	pop	{r4, pc}
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
    1c04:	blx	r3
    1c06:	b.n	1b66 <MTPStorage_SD::CloseIndex()+0x5a>
	}
	virtual uint64_t size() {
		return (f) ? f->size() : 0;
	}
	virtual void close() {
		if (f) f->close();
    1c08:	blx	r2
  void MTPStorage_SD::CloseIndex()
  {
    mtp_lock_storage(true);
    if(sd_isOpen(index_)) index_.close();
    mtp_lock_storage(false);
    index_generated = false;
    1c0a:	movs	r3, #0
    1c0c:	strb.w	r3, [r4, #248]	; 0xf8
    index_entries_ = 0;
    1c10:	str.w	r3, [r4, #244]	; 0xf4
    1c14:	pop	{r4, pc}
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
    1c16:	blx	r2
    1c18:	b.n	1b66 <MTPStorage_SD::CloseIndex()+0x5a>
    1c1a:	nop
    1c1c:	.word	0x0000011d
    1c20:	.word	0x00000111

00001c24 <File::invalidate() [clone .isra.1]>:
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    1c24:	ldr	r2, [r0, #0]
    1c26:	cmp	r2, #0
    1c28:	beq.n	1ca4 <File::invalidate() [clone .isra.1]+0x80>
    1c2a:	ldr	r3, [r2, #16]
    1c2c:	subs	r3, #1
    1c2e:	str	r3, [r2, #16]
    1c30:	cmp	r3, #0
    1c32:	bne.n	1ca4 <File::invalidate() [clone .isra.1]+0x80>
	}
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
    1c34:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		if (f && --(f->refcount) == 0) delete f;
    1c38:	ldr	r4, [r0, #0]
    1c3a:	cmp	r4, #0
    1c3c:	beq.n	1ca6 <File::invalidate() [clone .isra.1]+0x82>
    1c3e:	ldr	r3, [r4, #0]
    1c40:	ldr	r1, [pc, #120]	; (1cbc <File::invalidate() [clone .isra.1]+0x98>)
    1c42:	ldr	r3, [r3, #32]
    1c44:	cmp	r3, r1
    1c46:	bne.n	1caa <File::invalidate() [clone .isra.1]+0x86>
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    1c48:	ldr	r6, [pc, #116]	; (1cc0 <File::invalidate() [clone .isra.1]+0x9c>)
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    1c4a:	ldr	r2, [r4, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    1c4c:	str	r6, [r4, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    1c4e:	cbz	r2, 1c98 <File::invalidate() [clone .isra.1]+0x74>
    1c50:	ldr	r3, [r2, #16]
    1c52:	subs	r3, #1
    1c54:	str	r3, [r2, #16]
    1c56:	cbnz	r3, 1c98 <File::invalidate() [clone .isra.1]+0x74>
    1c58:	ldr	r5, [r4, #16]
    1c5a:	cbz	r5, 1c98 <File::invalidate() [clone .isra.1]+0x74>
    1c5c:	ldr	r3, [r5, #0]
    1c5e:	ldr	r3, [r3, #32]
    1c60:	cmp	r3, r1
    1c62:	bne.n	1cb2 <File::invalidate() [clone .isra.1]+0x8e>
    1c64:	ldr	r2, [r5, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    1c66:	str	r6, [r5, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    1c68:	cbz	r2, 1c90 <File::invalidate() [clone .isra.1]+0x6c>
    1c6a:	ldr	r3, [r2, #16]
    1c6c:	subs	r3, #1
    1c6e:	str	r3, [r2, #16]
    1c70:	cbnz	r3, 1c90 <File::invalidate() [clone .isra.1]+0x6c>
    1c72:	ldr	r7, [r5, #16]
    1c74:	cbz	r7, 1c90 <File::invalidate() [clone .isra.1]+0x6c>
    1c76:	ldr	r3, [r7, #0]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    1c78:	mov	r0, r7
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    1c7a:	ldr	r3, [r3, #32]
    1c7c:	cmp	r3, r1
    1c7e:	bne.n	1cb8 <File::invalidate() [clone .isra.1]+0x94>
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    1c80:	str.w	r6, [r0], #16
		invalidate();
    1c84:	bl	1c24 <File::invalidate() [clone .isra.1]>
	}
    1c88:	mov	r0, r7
    1c8a:	movs	r1, #20
    1c8c:	bl	f6e0 <operator delete(void*, unsigned int)>
    1c90:	mov	r0, r5
    1c92:	movs	r1, #20
    1c94:	bl	f6e0 <operator delete(void*, unsigned int)>
    1c98:	mov	r0, r4
    1c9a:	movs	r1, #20
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
	}
    1c9c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
		invalidate();
	}
    1ca0:	b.w	f6e0 <operator delete(void*, unsigned int)>
    1ca4:	bx	lr
    1ca6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    1caa:	mov	r0, r4
	}
    1cac:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    1cb0:	bx	r3
    1cb2:	mov	r0, r5
    1cb4:	blx	r3
    1cb6:	b.n	1c98 <File::invalidate() [clone .isra.1]+0x74>
    1cb8:	blx	r3
    1cba:	b.n	1c90 <File::invalidate() [clone .isra.1]+0x6c>
    1cbc:	.word	0x00000d69
    1cc0:	.word	0x20000074

00001cc4 <MTPStorage_SD::OpenIndex()>:
  }

  void MTPStorage_SD::OpenIndex() 
  { if(sd_isOpen(index_)) return; // only once
    1cc4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    1cc8:	mov	r4, r0
	}
	virtual void close() {
		if (f) f->close();
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
    1cca:	ldr.w	r0, [r0, #184]	; 0xb8
    1cce:	sub	sp, #28
    1cd0:	cbz	r0, 1d24 <MTPStorage_SD::OpenIndex()+0x60>
    1cd2:	ldr	r3, [r0, #0]
    1cd4:	ldr	r2, [pc, #536]	; (1ef0 <MTPStorage_SD::OpenIndex()+0x22c>)
    1cd6:	ldr	r3, [r3, #68]	; 0x44
    1cd8:	cmp	r3, r2
    1cda:	bne.w	1ff4 <MTPStorage_SD::OpenIndex()+0x330>
    1cde:	ldr	r0, [r0, #16]
    1ce0:	cbz	r0, 1d24 <MTPStorage_SD::OpenIndex()+0x60>
    1ce2:	ldr	r2, [r0, #0]
    1ce4:	ldr	r2, [r2, #68]	; 0x44
    1ce6:	cmp	r2, r3
    1ce8:	bne.w	2008 <MTPStorage_SD::OpenIndex()+0x344>
    1cec:	ldr	r0, [r0, #16]
    1cee:	cbz	r0, 1d24 <MTPStorage_SD::OpenIndex()+0x60>
    1cf0:	ldr	r3, [r0, #0]
    1cf2:	ldr	r3, [r3, #68]	; 0x44
    1cf4:	cmp	r3, r2
    1cf6:	bne.w	1ff4 <MTPStorage_SD::OpenIndex()+0x330>
    1cfa:	ldr	r0, [r0, #16]
    1cfc:	cbz	r0, 1d24 <MTPStorage_SD::OpenIndex()+0x60>
    1cfe:	ldr	r2, [r0, #0]
    1d00:	ldr	r2, [r2, #68]	; 0x44
    1d02:	cmp	r2, r3
    1d04:	bne.w	2008 <MTPStorage_SD::OpenIndex()+0x344>
    1d08:	ldr	r0, [r0, #16]
    1d0a:	cbz	r0, 1d24 <MTPStorage_SD::OpenIndex()+0x60>
    1d0c:	ldr	r3, [r0, #0]
    1d0e:	ldr	r3, [r3, #68]	; 0x44
    1d10:	cmp	r3, r2
    1d12:	bne.w	1ff4 <MTPStorage_SD::OpenIndex()+0x330>
    1d16:	ldr	r0, [r0, #16]
    1d18:	cbz	r0, 1d24 <MTPStorage_SD::OpenIndex()+0x60>
    1d1a:	ldr	r3, [r0, #0]
    1d1c:	ldr	r3, [r3, #68]	; 0x44
    1d1e:	blx	r3
    1d20:	cmp	r0, #0
    1d22:	bne.n	1df8 <MTPStorage_SD::OpenIndex()+0x134>
    }

    uint32_t sd_getFSCount(void) {return fsCount;}
    const char *sd_getFSName(uint32_t store) { return sd_name[store];}

    File sd_open(uint32_t store, const char *filename, uint32_t mode) { return sdx[store]->open(filename,mode);  }
    1d24:	ldr	r1, [r4, #88]	; 0x58
    1d26:	movs	r3, #2
    1d28:	ldr	r2, [pc, #456]	; (1ef4 <MTPStorage_SD::OpenIndex()+0x230>)
    1d2a:	add	r0, sp, #4
    1d2c:	ldr	r5, [r1, #0]
    1d2e:	ldr	r5, [r5, #0]
    1d30:	blx	r5
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    1d32:	ldr.w	r3, [r4, #184]	; 0xb8
    1d36:	cbz	r3, 1d44 <MTPStorage_SD::OpenIndex()+0x80>
    1d38:	ldr	r2, [r3, #16]
    1d3a:	subs	r2, #1
    1d3c:	str	r2, [r3, #16]
    1d3e:	cmp	r2, #0
    1d40:	beq.w	1f08 <MTPStorage_SD::OpenIndex()+0x244>
	File& operator = (const File &file) {
		//Serial.println("File assignment");
		//static int assigncount=0;
		//if (++assigncount > 20) while (1) ;
		invalidate();
		f = file.f;
    1d44:	ldr	r3, [sp, #20]
    1d46:	str.w	r3, [r4, #184]	; 0xb8
		if (f) f->refcount++;
    1d4a:	cbz	r3, 1d64 <MTPStorage_SD::OpenIndex()+0xa0>
    1d4c:	ldr	r2, [r3, #16]
		return *this;
	}
	virtual ~File() {
    1d4e:	ldr	r1, [pc, #424]	; (1ef8 <MTPStorage_SD::OpenIndex()+0x234>)
		//Serial.println("File assignment");
		//static int assigncount=0;
		//if (++assigncount > 20) while (1) ;
		invalidate();
		f = file.f;
		if (f) f->refcount++;
    1d50:	adds	r2, #1
		return *this;
	}
	virtual ~File() {
    1d52:	str	r1, [sp, #4]
		//Serial.println("File assignment");
		//static int assigncount=0;
		//if (++assigncount > 20) while (1) ;
		invalidate();
		f = file.f;
		if (f) f->refcount++;
    1d54:	str	r2, [r3, #16]
    1d56:	ldr	r2, [sp, #20]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    1d58:	cbz	r2, 1d64 <MTPStorage_SD::OpenIndex()+0xa0>
    1d5a:	ldr	r3, [r2, #16]
    1d5c:	subs	r3, #1
    1d5e:	str	r3, [r2, #16]
    1d60:	cmp	r3, #0
    1d62:	beq.n	1dfe <MTPStorage_SD::OpenIndex()+0x13a>
	}
	virtual void close() {
		if (f) f->close();
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
    1d64:	ldr.w	r0, [r4, #184]	; 0xb8
    1d68:	cmp	r0, #0
    1d6a:	beq.n	1dea <MTPStorage_SD::OpenIndex()+0x126>
    1d6c:	ldr	r2, [r0, #0]
    1d6e:	ldr	r3, [pc, #384]	; (1ef0 <MTPStorage_SD::OpenIndex()+0x22c>)
    1d70:	ldr	r2, [r2, #68]	; 0x44
    1d72:	cmp	r2, r3
    1d74:	bne.w	1ffe <MTPStorage_SD::OpenIndex()+0x33a>
    1d78:	ldr	r0, [r0, #16]
    1d7a:	cmp	r0, #0
    1d7c:	beq.n	1dea <MTPStorage_SD::OpenIndex()+0x126>
    1d7e:	ldr	r2, [r0, #0]
    1d80:	ldr	r2, [r2, #68]	; 0x44
    1d82:	cmp	r2, r3
    1d84:	bne.w	1ffe <MTPStorage_SD::OpenIndex()+0x33a>
    1d88:	ldr	r0, [r0, #16]
    1d8a:	cmp	r0, #0
    1d8c:	beq.n	1dea <MTPStorage_SD::OpenIndex()+0x126>
    1d8e:	ldr	r2, [r0, #0]
    1d90:	ldr	r2, [r2, #68]	; 0x44
    1d92:	cmp	r2, r3
    1d94:	bne.w	1ffe <MTPStorage_SD::OpenIndex()+0x33a>
    1d98:	ldr	r0, [r0, #16]
    1d9a:	cbz	r0, 1dea <MTPStorage_SD::OpenIndex()+0x126>
    1d9c:	ldr	r2, [r0, #0]
    1d9e:	ldr	r2, [r2, #68]	; 0x44
    1da0:	cmp	r2, r3
    1da2:	bne.w	1ffe <MTPStorage_SD::OpenIndex()+0x33a>
    1da6:	ldr	r0, [r0, #16]
    1da8:	cbz	r0, 1dea <MTPStorage_SD::OpenIndex()+0x126>
    1daa:	ldr	r2, [r0, #0]
    1dac:	ldr	r2, [r2, #68]	; 0x44
    1dae:	cmp	r2, r3
    1db0:	bne.w	1ffe <MTPStorage_SD::OpenIndex()+0x33a>
    1db4:	ldr	r0, [r0, #16]
    1db6:	cbz	r0, 1dea <MTPStorage_SD::OpenIndex()+0x126>
    1db8:	ldr	r2, [r0, #0]
    1dba:	ldr	r2, [r2, #68]	; 0x44
    1dbc:	cmp	r2, r3
    1dbe:	bne.w	1ffe <MTPStorage_SD::OpenIndex()+0x33a>
    1dc2:	ldr	r0, [r0, #16]
    1dc4:	cbz	r0, 1dea <MTPStorage_SD::OpenIndex()+0x126>
    1dc6:	ldr	r2, [r0, #0]
    1dc8:	ldr	r2, [r2, #68]	; 0x44
    1dca:	cmp	r2, r3
    1dcc:	bne.w	1ffe <MTPStorage_SD::OpenIndex()+0x33a>
    1dd0:	ldr	r0, [r0, #16]
    1dd2:	cbz	r0, 1dea <MTPStorage_SD::OpenIndex()+0x126>
    1dd4:	ldr	r2, [r0, #0]
    1dd6:	ldr	r2, [r2, #68]	; 0x44
    1dd8:	cmp	r2, r3
    1dda:	bne.w	1ffe <MTPStorage_SD::OpenIndex()+0x33a>
    1dde:	ldr	r0, [r0, #16]
    1de0:	cbz	r0, 1dea <MTPStorage_SD::OpenIndex()+0x126>
    1de2:	ldr	r3, [r0, #0]
    1de4:	ldr	r3, [r3, #68]	; 0x44
    1de6:	blx	r3
    mtp_lock_storage(true);
    index_=sd_open(0,indexFile, FILE_WRITE_BEGIN);
    if(!index_) Serial.println("cannot open Index file"); 
    1de8:	cbnz	r0, 1df8 <MTPStorage_SD::OpenIndex()+0x134>
    1dea:	movs	r1, #22
    1dec:	ldr	r0, [pc, #268]	; (1efc <MTPStorage_SD::OpenIndex()+0x238>)
    1dee:	bl	d7d4 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    1df2:	ldr	r0, [pc, #268]	; (1f00 <MTPStorage_SD::OpenIndex()+0x23c>)
    1df4:	bl	f5bc <Print::println()>
    mtp_lock_storage(false);
  }
    1df8:	add	sp, #28
    1dfa:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    1dfe:	ldr	r5, [sp, #20]
    1e00:	cmp	r5, #0
    1e02:	beq.n	1d64 <MTPStorage_SD::OpenIndex()+0xa0>
    1e04:	ldr	r2, [r5, #0]
    1e06:	ldr	r3, [pc, #252]	; (1f04 <MTPStorage_SD::OpenIndex()+0x240>)
    1e08:	ldr	r2, [r2, #32]
    1e0a:	cmp	r2, r3
    1e0c:	bne.w	2018 <MTPStorage_SD::OpenIndex()+0x354>
    1e10:	ldr	r0, [r5, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    1e12:	str	r1, [r5, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    1e14:	cmp	r0, #0
    1e16:	beq.n	1ee6 <MTPStorage_SD::OpenIndex()+0x222>
    1e18:	ldr	r2, [r0, #16]
    1e1a:	subs	r2, #1
    1e1c:	str	r2, [r0, #16]
    1e1e:	cmp	r2, #0
    1e20:	bne.n	1ee6 <MTPStorage_SD::OpenIndex()+0x222>
    1e22:	ldr	r6, [r5, #16]
    1e24:	cmp	r6, #0
    1e26:	beq.n	1ee6 <MTPStorage_SD::OpenIndex()+0x222>
    1e28:	ldr	r2, [r6, #0]
    1e2a:	ldr	r2, [r2, #32]
    1e2c:	cmp	r2, r3
    1e2e:	bne.w	201e <MTPStorage_SD::OpenIndex()+0x35a>
    1e32:	ldr	r0, [r6, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    1e34:	str	r1, [r6, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    1e36:	cmp	r0, #0
    1e38:	beq.n	1ede <MTPStorage_SD::OpenIndex()+0x21a>
    1e3a:	ldr	r2, [r0, #16]
    1e3c:	subs	r2, #1
    1e3e:	str	r2, [r0, #16]
    1e40:	cmp	r2, #0
    1e42:	bne.n	1ede <MTPStorage_SD::OpenIndex()+0x21a>
    1e44:	ldr	r7, [r6, #16]
    1e46:	cmp	r7, #0
    1e48:	beq.n	1ede <MTPStorage_SD::OpenIndex()+0x21a>
    1e4a:	ldr	r2, [r7, #0]
    1e4c:	ldr	r2, [r2, #32]
    1e4e:	cmp	r2, r3
    1e50:	bne.w	2030 <MTPStorage_SD::OpenIndex()+0x36c>
    1e54:	ldr	r0, [r7, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    1e56:	str	r1, [r7, #0]
    1e58:	ldr.w	lr, [pc, #156]	; 1ef8 <MTPStorage_SD::OpenIndex()+0x234>
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    1e5c:	cmp	r0, #0
    1e5e:	beq.n	1ed6 <MTPStorage_SD::OpenIndex()+0x212>
    1e60:	ldr	r2, [r0, #16]
    1e62:	subs	r2, #1
    1e64:	str	r2, [r0, #16]
    1e66:	cmp	r2, #0
    1e68:	bne.n	1ed6 <MTPStorage_SD::OpenIndex()+0x212>
    1e6a:	ldr.w	r8, [r7, #16]
    1e6e:	cmp.w	r8, #0
    1e72:	beq.n	1ed6 <MTPStorage_SD::OpenIndex()+0x212>
    1e74:	ldr.w	r2, [r8]
    1e78:	ldr	r2, [r2, #32]
    1e7a:	cmp	r2, r3
    1e7c:	bne.w	203c <MTPStorage_SD::OpenIndex()+0x378>
    1e80:	ldr.w	r0, [r8, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    1e84:	str.w	lr, [r8]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    1e88:	cbz	r0, 1ece <MTPStorage_SD::OpenIndex()+0x20a>
    1e8a:	ldr	r2, [r0, #16]
    1e8c:	subs	r2, #1
    1e8e:	str	r2, [r0, #16]
    1e90:	cbnz	r2, 1ece <MTPStorage_SD::OpenIndex()+0x20a>
    1e92:	ldr.w	r9, [r8, #16]
    1e96:	cmp.w	r9, #0
    1e9a:	beq.n	1ece <MTPStorage_SD::OpenIndex()+0x20a>
    1e9c:	ldr.w	r2, [r9]
    1ea0:	ldr	r2, [r2, #32]
    1ea2:	cmp	r2, r3
    1ea4:	bne.w	2048 <MTPStorage_SD::OpenIndex()+0x384>
    1ea8:	ldr.w	r2, [r9, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    1eac:	str.w	r1, [r9]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    1eb0:	cbz	r2, 1ec6 <MTPStorage_SD::OpenIndex()+0x202>
    1eb2:	ldr	r3, [r2, #16]
    1eb4:	subs	r3, #1
    1eb6:	str	r3, [r2, #16]
    1eb8:	cbnz	r3, 1ec6 <MTPStorage_SD::OpenIndex()+0x202>
    1eba:	ldr.w	r0, [r9, #16]
    1ebe:	cbz	r0, 1ec6 <MTPStorage_SD::OpenIndex()+0x202>
    1ec0:	ldr	r3, [r0, #0]
    1ec2:	ldr	r3, [r3, #32]
    1ec4:	blx	r3
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
		invalidate();
	}
    1ec6:	mov	r0, r9
    1ec8:	movs	r1, #20
    1eca:	bl	f6e0 <operator delete(void*, unsigned int)>
    1ece:	mov	r0, r8
    1ed0:	movs	r1, #20
    1ed2:	bl	f6e0 <operator delete(void*, unsigned int)>
    1ed6:	mov	r0, r7
    1ed8:	movs	r1, #20
    1eda:	bl	f6e0 <operator delete(void*, unsigned int)>
    1ede:	mov	r0, r6
    1ee0:	movs	r1, #20
    1ee2:	bl	f6e0 <operator delete(void*, unsigned int)>
    1ee6:	mov	r0, r5
    1ee8:	movs	r1, #20
    1eea:	bl	f6e0 <operator delete(void*, unsigned int)>
    1eee:	b.n	1d64 <MTPStorage_SD::OpenIndex()+0xa0>
    1ef0:	.word	0x0000011d
    1ef4:	.word	0x200002e0
    1ef8:	.word	0x20000074
    1efc:	.word	0x200002f0
    1f00:	.word	0x20000c58
    1f04:	.word	0x00000d69
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    1f08:	ldr.w	r5, [r4, #184]	; 0xb8
    1f0c:	cmp	r5, #0
    1f0e:	beq.w	1d44 <MTPStorage_SD::OpenIndex()+0x80>
    1f12:	ldr	r2, [r5, #0]
    1f14:	ldr	r3, [pc, #312]	; (2050 <MTPStorage_SD::OpenIndex()+0x38c>)
    1f16:	ldr	r2, [r2, #32]
    1f18:	cmp	r2, r3
    1f1a:	bne.n	2012 <MTPStorage_SD::OpenIndex()+0x34e>
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    1f1c:	ldr	r1, [pc, #308]	; (2054 <MTPStorage_SD::OpenIndex()+0x390>)
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    1f1e:	ldr	r0, [r5, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    1f20:	str	r1, [r5, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    1f22:	cmp	r0, #0
    1f24:	beq.n	1fea <MTPStorage_SD::OpenIndex()+0x326>
    1f26:	ldr	r2, [r0, #16]
    1f28:	subs	r2, #1
    1f2a:	str	r2, [r0, #16]
    1f2c:	cmp	r2, #0
    1f2e:	bne.n	1fea <MTPStorage_SD::OpenIndex()+0x326>
    1f30:	ldr	r6, [r5, #16]
    1f32:	cmp	r6, #0
    1f34:	beq.n	1fea <MTPStorage_SD::OpenIndex()+0x326>
    1f36:	ldr	r2, [r6, #0]
    1f38:	ldr	r2, [r2, #32]
    1f3a:	cmp	r2, r3
    1f3c:	bne.n	2024 <MTPStorage_SD::OpenIndex()+0x360>
    1f3e:	ldr	r0, [r6, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    1f40:	str	r1, [r6, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    1f42:	cmp	r0, #0
    1f44:	beq.n	1fe2 <MTPStorage_SD::OpenIndex()+0x31e>
    1f46:	ldr	r2, [r0, #16]
    1f48:	subs	r2, #1
    1f4a:	str	r2, [r0, #16]
    1f4c:	cmp	r2, #0
    1f4e:	bne.n	1fe2 <MTPStorage_SD::OpenIndex()+0x31e>
    1f50:	ldr	r7, [r6, #16]
    1f52:	cmp	r7, #0
    1f54:	beq.n	1fe2 <MTPStorage_SD::OpenIndex()+0x31e>
    1f56:	ldr	r2, [r7, #0]
    1f58:	ldr	r2, [r2, #32]
    1f5a:	cmp	r2, r3
    1f5c:	bne.n	202a <MTPStorage_SD::OpenIndex()+0x366>
    1f5e:	ldr	r0, [r7, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    1f60:	str	r1, [r7, #0]
    1f62:	ldr.w	lr, [pc, #240]	; 2054 <MTPStorage_SD::OpenIndex()+0x390>
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    1f66:	cmp	r0, #0
    1f68:	beq.n	1fda <MTPStorage_SD::OpenIndex()+0x316>
    1f6a:	ldr	r2, [r0, #16]
    1f6c:	subs	r2, #1
    1f6e:	str	r2, [r0, #16]
    1f70:	cbnz	r2, 1fda <MTPStorage_SD::OpenIndex()+0x316>
    1f72:	ldr.w	r8, [r7, #16]
    1f76:	cmp.w	r8, #0
    1f7a:	beq.n	1fda <MTPStorage_SD::OpenIndex()+0x316>
    1f7c:	ldr.w	r2, [r8]
    1f80:	ldr	r2, [r2, #32]
    1f82:	cmp	r2, r3
    1f84:	bne.n	2036 <MTPStorage_SD::OpenIndex()+0x372>
    1f86:	ldr.w	r0, [r8, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    1f8a:	str.w	lr, [r8]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    1f8e:	cbz	r0, 1fd2 <MTPStorage_SD::OpenIndex()+0x30e>
    1f90:	ldr	r2, [r0, #16]
    1f92:	subs	r2, #1
    1f94:	str	r2, [r0, #16]
    1f96:	cbnz	r2, 1fd2 <MTPStorage_SD::OpenIndex()+0x30e>
    1f98:	ldr.w	r9, [r8, #16]
    1f9c:	cmp.w	r9, #0
    1fa0:	beq.n	1fd2 <MTPStorage_SD::OpenIndex()+0x30e>
    1fa2:	ldr.w	r2, [r9]
    1fa6:	ldr	r2, [r2, #32]
    1fa8:	cmp	r2, r3
    1faa:	bne.n	2042 <MTPStorage_SD::OpenIndex()+0x37e>
    1fac:	ldr.w	r2, [r9, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    1fb0:	str.w	r1, [r9]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    1fb4:	cbz	r2, 1fca <MTPStorage_SD::OpenIndex()+0x306>
    1fb6:	ldr	r3, [r2, #16]
    1fb8:	subs	r3, #1
    1fba:	str	r3, [r2, #16]
    1fbc:	cbnz	r3, 1fca <MTPStorage_SD::OpenIndex()+0x306>
    1fbe:	ldr.w	r0, [r9, #16]
    1fc2:	cbz	r0, 1fca <MTPStorage_SD::OpenIndex()+0x306>
    1fc4:	ldr	r3, [r0, #0]
    1fc6:	ldr	r3, [r3, #32]
    1fc8:	blx	r3
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
		invalidate();
	}
    1fca:	mov	r0, r9
    1fcc:	movs	r1, #20
    1fce:	bl	f6e0 <operator delete(void*, unsigned int)>
    1fd2:	mov	r0, r8
    1fd4:	movs	r1, #20
    1fd6:	bl	f6e0 <operator delete(void*, unsigned int)>
    1fda:	mov	r0, r7
    1fdc:	movs	r1, #20
    1fde:	bl	f6e0 <operator delete(void*, unsigned int)>
    1fe2:	mov	r0, r6
    1fe4:	movs	r1, #20
    1fe6:	bl	f6e0 <operator delete(void*, unsigned int)>
    1fea:	mov	r0, r5
    1fec:	movs	r1, #20
    1fee:	bl	f6e0 <operator delete(void*, unsigned int)>
    1ff2:	b.n	1d44 <MTPStorage_SD::OpenIndex()+0x80>
	}
	virtual void close() {
		if (f) f->close();
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
    1ff4:	blx	r3
    index_generated = false;
    index_entries_ = 0;
  }

  void MTPStorage_SD::OpenIndex() 
  { if(sd_isOpen(index_)) return; // only once
    1ff6:	cmp	r0, #0
    1ff8:	bne.w	1df8 <MTPStorage_SD::OpenIndex()+0x134>
    1ffc:	b.n	1d24 <MTPStorage_SD::OpenIndex()+0x60>
    1ffe:	blx	r2
    mtp_lock_storage(true);
    index_=sd_open(0,indexFile, FILE_WRITE_BEGIN);
    if(!index_) Serial.println("cannot open Index file"); 
    2000:	cmp	r0, #0
    2002:	bne.w	1df8 <MTPStorage_SD::OpenIndex()+0x134>
    2006:	b.n	1dea <MTPStorage_SD::OpenIndex()+0x126>
    2008:	blx	r2
    index_generated = false;
    index_entries_ = 0;
  }

  void MTPStorage_SD::OpenIndex() 
  { if(sd_isOpen(index_)) return; // only once
    200a:	cmp	r0, #0
    200c:	bne.w	1df8 <MTPStorage_SD::OpenIndex()+0x134>
    2010:	b.n	1d24 <MTPStorage_SD::OpenIndex()+0x60>
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    2012:	mov	r0, r5
    2014:	blx	r2
    2016:	b.n	1d44 <MTPStorage_SD::OpenIndex()+0x80>
    2018:	mov	r0, r5
    201a:	blx	r2
    201c:	b.n	1d64 <MTPStorage_SD::OpenIndex()+0xa0>
    201e:	mov	r0, r6
    2020:	blx	r2
    2022:	b.n	1ee6 <MTPStorage_SD::OpenIndex()+0x222>
    2024:	mov	r0, r6
    2026:	blx	r2
    2028:	b.n	1fea <MTPStorage_SD::OpenIndex()+0x326>
    202a:	mov	r0, r7
    202c:	blx	r2
    202e:	b.n	1fe2 <MTPStorage_SD::OpenIndex()+0x31e>
    2030:	mov	r0, r7
    2032:	blx	r2
    2034:	b.n	1ede <MTPStorage_SD::OpenIndex()+0x21a>
    2036:	mov	r0, r8
    2038:	blx	r2
    203a:	b.n	1fda <MTPStorage_SD::OpenIndex()+0x316>
    203c:	mov	r0, r8
    203e:	blx	r2
    2040:	b.n	1ed6 <MTPStorage_SD::OpenIndex()+0x212>
    2042:	mov	r0, r9
    2044:	blx	r2
    2046:	b.n	1fd2 <MTPStorage_SD::OpenIndex()+0x30e>
    2048:	mov	r0, r9
    204a:	blx	r2
    204c:	b.n	1ece <MTPStorage_SD::OpenIndex()+0x20a>
    204e:	nop
    2050:	.word	0x00000d69
    2054:	.word	0x20000074

00002058 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>:
    all_scanned_ = false;
    open_file_ = 0xFFFFFFFEUL;
  }

  void MTPStorage_SD::WriteIndexRecord(uint32_t i, const Record& r) 
  { OpenIndex();
    2058:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    205c:	mov	r6, r0
    205e:	sub	sp, #8
    2060:	mov	r4, r1
    2062:	mov	r7, r2
    2064:	bl	1cc4 <MTPStorage_SD::OpenIndex()>
	}
	virtual bool truncate(uint64_t size=0) {
		return (f) ? f->truncate(size) : false;
	}
	virtual bool seek(uint64_t pos, int mode) {
		return (f) ? f->seek(pos, mode) : false;
    2068:	ldr.w	r5, [r6, #184]	; 0xb8
    mtp_lock_storage(true);
    index_.seek((sizeof(r) * i));
    206c:	add.w	r4, r4, r4, lsl #4
    2070:	cmp	r5, #0
    2072:	beq.n	213e <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0xe6>
    2074:	ldr.w	lr, [r5]
    2078:	lsls	r2, r4, #4
    207a:	ldr	r1, [pc, #288]	; (219c <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x144>)
    207c:	mov.w	ip, #0
    2080:	ldr.w	r4, [lr, #52]	; 0x34
    2084:	cmp	r4, r1
    2086:	bne.n	2168 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x110>
    2088:	ldr	r1, [r5, #16]
    208a:	cmp	r1, #0
    208c:	beq.n	2134 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0xdc>
    208e:	ldr	r0, [r1, #0]
    2090:	ldr.w	r8, [r0, #52]	; 0x34
    2094:	cmp	r8, r4
    2096:	bne.n	2174 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x11c>
    2098:	ldr	r0, [r1, #16]
    209a:	cmp	r0, #0
    209c:	beq.n	2144 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0xec>
    209e:	ldr	r4, [r0, #0]
    20a0:	ldr	r4, [r4, #52]	; 0x34
    20a2:	cmp	r4, r8
    20a4:	bne.n	2180 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x128>
    20a6:	ldr	r0, [r0, #16]
    20a8:	cmp	r0, #0
    20aa:	beq.n	2144 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0xec>
    20ac:	ldr	r3, [r0, #0]
    20ae:	ldr.w	r8, [r3, #52]	; 0x34
    20b2:	cmp	r8, r4
    20b4:	bne.n	218a <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x132>
    20b6:	ldr	r0, [r0, #16]
    20b8:	cmp	r0, #0
    20ba:	beq.n	2144 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0xec>
    20bc:	ldr	r3, [r0, #0]
    20be:	ldr	r4, [r3, #52]	; 0x34
    20c0:	cmp	r4, r8
    20c2:	bne.n	2194 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x13c>
    20c4:	ldr	r0, [r0, #16]
    20c6:	cmp	r0, #0
    20c8:	beq.n	2144 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0xec>
    20ca:	ldr	r1, [r0, #0]
    20cc:	mov	r3, ip
    20ce:	str.w	ip, [sp]
    20d2:	ldr	r1, [r1, #52]	; 0x34
    20d4:	blx	r1
#endif
	virtual size_t read(void *buf, size_t nbyte) {
		return (f) ? f->read(buf, nbyte) : 0;
	}
	virtual size_t write(const void *buf, size_t size) {
		return (f) ? f->write(buf, size) : 0;
    20d6:	ldr.w	r5, [r6, #184]	; 0xb8
    20da:	cmp	r5, #0
    20dc:	beq.n	213e <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0xe6>
    20de:	ldr	r2, [r5, #0]
    20e0:	ldr	r3, [pc, #188]	; (21a0 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x148>)
    20e2:	ldr	r4, [r2, #44]	; 0x2c
    20e4:	cmp	r4, r3
    20e6:	bne.n	2152 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0xfa>
    20e8:	ldr	r0, [r5, #16]
    20ea:	cbz	r0, 213e <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0xe6>
    20ec:	ldr	r2, [r0, #0]
    20ee:	ldr	r4, [r2, #44]	; 0x2c
    20f0:	cmp	r4, r3
    20f2:	bne.n	2164 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x10c>
    20f4:	ldr	r0, [r0, #16]
    20f6:	cbz	r0, 213e <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0xe6>
    20f8:	ldr	r2, [r0, #0]
    20fa:	ldr	r4, [r2, #44]	; 0x2c
    20fc:	cmp	r4, r3
    20fe:	bne.n	2164 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x10c>
    2100:	ldr	r0, [r0, #16]
    2102:	cbz	r0, 213e <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0xe6>
    2104:	ldr	r2, [r0, #0]
    2106:	ldr	r4, [r2, #44]	; 0x2c
    2108:	cmp	r4, r3
    210a:	bne.n	2164 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x10c>
    210c:	ldr	r0, [r0, #16]
    210e:	cbz	r0, 213e <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0xe6>
    2110:	ldr	r2, [r0, #0]
    2112:	ldr	r4, [r2, #44]	; 0x2c
    2114:	cmp	r4, r3
    2116:	bne.n	2164 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x10c>
    2118:	ldr	r0, [r0, #16]
    211a:	cbz	r0, 213e <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0xe6>
    211c:	ldr	r2, [r0, #0]
    211e:	ldr	r4, [r2, #44]	; 0x2c
    2120:	cmp	r4, r3
    2122:	bne.n	2164 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x10c>
    2124:	ldr	r0, [r0, #16]
    2126:	cbz	r0, 213e <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0xe6>
    2128:	ldr	r3, [r0, #0]
    212a:	mov	r1, r7
    212c:	mov.w	r2, #272	; 0x110
    2130:	ldr	r3, [r3, #44]	; 0x2c
    2132:	b.n	215c <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x104>
    2134:	ldr.w	r4, [lr, #44]	; 0x2c
    2138:	ldr	r3, [pc, #100]	; (21a0 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x148>)
    213a:	cmp	r4, r3
    213c:	bne.n	2152 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0xfa>
    index_.write((char*)&r, sizeof(r));
    mtp_lock_storage(false);
  }
    213e:	add	sp, #8
    2140:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2144:	ldr.w	r4, [lr, #44]	; 0x2c
    2148:	ldr	r3, [pc, #84]	; (21a0 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x148>)
    214a:	cmp	r4, r3
    214c:	bne.n	2152 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0xfa>
    214e:	mov	r0, r1
    2150:	b.n	20ec <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x94>
    2152:	mov	r1, r7
    2154:	mov	r0, r5
    2156:	mov.w	r2, #272	; 0x110
    215a:	mov	r3, r4
    215c:	add	sp, #8
    215e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    2162:	bx	r3
    2164:	mov	r1, r7
    2166:	b.n	2156 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0xfe>
	}
	virtual bool truncate(uint64_t size=0) {
		return (f) ? f->truncate(size) : false;
	}
	virtual bool seek(uint64_t pos, int mode) {
		return (f) ? f->seek(pos, mode) : false;
    2168:	str.w	ip, [sp]
    216c:	mov	r3, ip
    216e:	mov	r0, r5
    2170:	blx	r4
    2172:	b.n	20d6 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x7e>
    2174:	str.w	ip, [sp]
    2178:	mov	r3, ip
    217a:	mov	r0, r1
    217c:	blx	r8
    217e:	b.n	20d6 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x7e>
    2180:	str.w	ip, [sp]
    2184:	mov	r3, ip
    2186:	blx	r4
    2188:	b.n	20d6 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x7e>
    218a:	str.w	ip, [sp]
    218e:	mov	r3, ip
    2190:	blx	r8
    2192:	b.n	20d6 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x7e>
    2194:	movs	r3, #0
    2196:	str	r3, [sp, #0]
    2198:	blx	r4
    219a:	b.n	20d6 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x7e>
    219c:	.word	0x000000d9
    21a0:	.word	0x00000099

000021a4 <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.6] [clone .constprop.14]>:
  }

  // MTP object handles should not change or be re-used during a session.
  // This would be easy if we could just have a list of all files in memory.
  // Since our RAM is limited, we'll keep the index in a file instead.
  void MTPStorage_SD::GenerateIndex(uint32_t store)
    21a4:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    21a8:	mov	r4, r0
  { if (index_generated) return; 
    index_generated = true;
    21aa:	movs	r7, #1
  }

  // MTP object handles should not change or be re-used during a session.
  // This would be easy if we could just have a list of all files in memory.
  // Since our RAM is limited, we'll keep the index in a file instead.
  void MTPStorage_SD::GenerateIndex(uint32_t store)
    21ac:	sub	sp, #272	; 0x110
    21ae:	movs	r1, #13
    21b0:	ldr	r0, [pc, #108]	; (2220 <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.6] [clone .constprop.14]+0x7c>)
  { if (index_generated) return; 
    index_generated = true;
    21b2:	strb.w	r7, [r4, #248]	; 0xf8
    21b6:	bl	d7d4 <usb_serial_write>
    21ba:	ldr	r0, [pc, #104]	; (2224 <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.6] [clone .constprop.14]+0x80>)
    21bc:	bl	f5bc <Print::println()>
    bool sd_mkdir(uint32_t store, char *filename) {  return sdx[store]->mkdir(filename);  }
    bool sd_rename(uint32_t store, char *oldfilename, char *newfilename) { return sdx[store]->rename(oldfilename,newfilename);  }
    bool sd_remove(uint32_t store, const char *filename) {    Serial.println(filename);
return sdx[store]->remove(filename);  }
    21c0:	ldr	r0, [r4, #88]	; 0x58
    21c2:	ldr	r1, [pc, #92]	; (2220 <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.6] [clone .constprop.14]+0x7c>)
    21c4:	ldr	r3, [r0, #0]
    21c6:	ldr	r3, [r3, #16]
    21c8:	blx	r3
    21ca:	ldr	r3, [r4, #4]
    sd_remove(0,indexFile);
    mtp_lock_storage(false);

    num_storage = sd_getFSCount();

    index_entries_ = 0;
    21cc:	movs	r1, #0
    // first remove old index file
    mtp_lock_storage(true);
    sd_remove(0,indexFile);
    mtp_lock_storage(false);

    num_storage = sd_getFSCount();
    21ce:	str.w	r3, [r4, #228]	; 0xe4

    index_entries_ = 0;
    Record r;
    for(int ii=0; ii<num_storage; ii++)
    21d2:	cmp	r3, r1
    sd_remove(0,indexFile);
    mtp_lock_storage(false);

    num_storage = sd_getFSCount();

    index_entries_ = 0;
    21d4:	str.w	r1, [r4, #244]	; 0xf4
    Record r;
    for(int ii=0; ii<num_storage; ii++)
    21d8:	ble.n	221a <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.6] [clone .constprop.14]+0x76>
    21da:	mov	r5, r1
    {
      r.store = ii; // 
      r.parent = 0xFFFFFFFFUL; // 
      r.sibling = 0;
    21dc:	mov	r6, r1
    index_entries_ = 0;
    Record r;
    for(int ii=0; ii<num_storage; ii++)
    {
      r.store = ii; // 
      r.parent = 0xFFFFFFFFUL; // 
    21de:	mov.w	r8, #4294967295
    21e2:	b.n	21e8 <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.6] [clone .constprop.14]+0x44>
    21e4:	ldr.w	r1, [r4, #244]	; 0xf4
    index_.write((char*)&r, sizeof(r));
    mtp_lock_storage(false);
  }

  uint32_t MTPStorage_SD::AppendIndexRecord(const Record& r) 
  { uint32_t new_record = index_entries_++;
    21e8:	adds	r0, r1, #1
      r.parent = 0xFFFFFFFFUL; // 
      r.sibling = 0;
      r.child = 0;
      r.isdir = true;
      r.scanned = false;
      strcpy(r.name, "/");
    21ea:	movs	r3, #47	; 0x2f
    mtp_lock_storage(false);
  }

  uint32_t MTPStorage_SD::AppendIndexRecord(const Record& r) 
  { uint32_t new_record = index_entries_++;
    WriteIndexRecord(new_record, r);
    21ec:	mov	r2, sp

    index_entries_ = 0;
    Record r;
    for(int ii=0; ii<num_storage; ii++)
    {
      r.store = ii; // 
    21ee:	strh.w	r5, [sp, #14]
    index_.write((char*)&r, sizeof(r));
    mtp_lock_storage(false);
  }

  uint32_t MTPStorage_SD::AppendIndexRecord(const Record& r) 
  { uint32_t new_record = index_entries_++;
    21f2:	str.w	r0, [r4, #244]	; 0xf4
    WriteIndexRecord(new_record, r);
    21f6:	mov	r0, r4
      r.parent = 0xFFFFFFFFUL; // 
      r.sibling = 0;
      r.child = 0;
      r.isdir = true;
      r.scanned = false;
      strcpy(r.name, "/");
    21f8:	strh.w	r3, [sp, #16]

    num_storage = sd_getFSCount();

    index_entries_ = 0;
    Record r;
    for(int ii=0; ii<num_storage; ii++)
    21fc:	adds	r5, #1
    {
      r.store = ii; // 
      r.parent = 0xFFFFFFFFUL; // 
    21fe:	str.w	r8, [sp]
      r.sibling = 0;
    2202:	str	r6, [sp, #8]
      r.child = 0;
    2204:	str	r6, [sp, #4]
      r.isdir = true;
    2206:	strb.w	r7, [sp, #12]
      r.scanned = false;
    220a:	strb.w	r6, [sp, #13]
    mtp_lock_storage(false);
  }

  uint32_t MTPStorage_SD::AppendIndexRecord(const Record& r) 
  { uint32_t new_record = index_entries_++;
    WriteIndexRecord(new_record, r);
    220e:	bl	2058 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>

    num_storage = sd_getFSCount();

    index_entries_ = 0;
    Record r;
    for(int ii=0; ii<num_storage; ii++)
    2212:	ldr.w	r3, [r4, #228]	; 0xe4
    2216:	cmp	r3, r5
    2218:	bgt.n	21e4 <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.6] [clone .constprop.14]+0x40>
      r.isdir = true;
      r.scanned = false;
      strcpy(r.name, "/");
      AppendIndexRecord(r);
    }
  }
    221a:	add	sp, #272	; 0x110
    221c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2220:	.word	0x200002e0
    2224:	.word	0x20000c58

00002228 <MTPStorage_SD::ReadIndexRecord(unsigned long)>:
    return new_record;
  }

  // TODO(hubbe): Cache a few records for speed.
  Record MTPStorage_SD::ReadIndexRecord(uint32_t i) 
  {
    2228:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    222c:	mov	r5, r1
    222e:	mov	r4, r2
    2230:	sub	sp, #8
    Record ret;
    memset(&ret, 0, sizeof(ret));
    2232:	movs	r1, #0
    2234:	mov.w	r2, #272	; 0x110
    return new_record;
  }

  // TODO(hubbe): Cache a few records for speed.
  Record MTPStorage_SD::ReadIndexRecord(uint32_t i) 
  {
    2238:	mov	r6, r0
    Record ret;
    memset(&ret, 0, sizeof(ret));
    223a:	bl	10d7c <memset>
    if (i > index_entries_) 
    223e:	ldr.w	r3, [r5, #244]	; 0xf4
    2242:	cmp	r3, r4
    2244:	bcc.w	23be <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x196>
    { memset(&ret, 0, sizeof(ret));
      return ret;
    }
    OpenIndex();
    2248:	mov	r0, r5
    mtp_lock_storage(true);
    index_.seek(sizeof(ret) * i);
    224a:	add.w	r4, r4, r4, lsl #4
    memset(&ret, 0, sizeof(ret));
    if (i > index_entries_) 
    { memset(&ret, 0, sizeof(ret));
      return ret;
    }
    OpenIndex();
    224e:	bl	1cc4 <MTPStorage_SD::OpenIndex()>
    2252:	ldr.w	r0, [r5, #184]	; 0xb8
    mtp_lock_storage(true);
    index_.seek(sizeof(ret) * i);
    2256:	mov.w	ip, #0
    225a:	lsls	r2, r4, #4
    225c:	cmp	r0, #0
    225e:	beq.w	23b6 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x18e>
    2262:	ldr	r7, [r0, #0]
    2264:	ldr	r4, [pc, #456]	; (2430 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x208>)
    2266:	ldr	r1, [r7, #52]	; 0x34
    2268:	cmp	r1, r4
    226a:	bne.w	23ea <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x1c2>
    226e:	ldr	r1, [r0, #16]
    2270:	cmp	r1, #0
    2272:	beq.w	23d2 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x1aa>
    2276:	ldr	r3, [r1, #0]
    2278:	ldr.w	r8, [r3, #52]	; 0x34
    227c:	cmp	r8, r4
    227e:	bne.w	2418 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x1f0>
    2282:	ldr.w	lr, [r1, #16]
    2286:	cmp.w	lr, #0
    228a:	beq.n	233e <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x116>
    228c:	ldr.w	r3, [lr]
    2290:	ldr.w	r8, [r3, #52]	; 0x34
    2294:	cmp	r8, r4
    2296:	bne.w	240c <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x1e4>
    229a:	ldr.w	lr, [lr, #16]
    229e:	cmp.w	lr, #0
    22a2:	beq.n	233e <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x116>
    22a4:	ldr.w	r3, [lr]
    22a8:	ldr.w	r8, [r3, #52]	; 0x34
    22ac:	cmp	r8, r4
    22ae:	bne.w	240c <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x1e4>
    22b2:	ldr.w	lr, [lr, #16]
    22b6:	cmp.w	lr, #0
    22ba:	beq.n	233e <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x116>
    22bc:	ldr.w	r3, [lr]
    22c0:	ldr.w	r8, [r3, #52]	; 0x34
    22c4:	cmp	r8, r4
    22c6:	bne.w	2424 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x1fc>
    22ca:	ldr.w	lr, [lr, #16]
    22ce:	cmp.w	lr, #0
    22d2:	beq.n	233e <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x116>
    22d4:	ldr.w	r3, [lr]
    22d8:	ldr.w	r8, [r3, #52]	; 0x34
    22dc:	cmp	r8, r4
    22de:	bne.w	2424 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x1fc>
    22e2:	ldr.w	lr, [lr, #16]
    22e6:	cmp.w	lr, #0
    22ea:	beq.n	233e <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x116>
    22ec:	ldr.w	r3, [lr]
    22f0:	ldr.w	r8, [r3, #52]	; 0x34
    22f4:	cmp	r8, r4
    22f6:	bne.w	2424 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x1fc>
    22fa:	ldr.w	lr, [lr, #16]
    22fe:	cmp.w	lr, #0
    2302:	beq.n	233e <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x116>
    2304:	ldr.w	r3, [lr]
    2308:	ldr.w	r8, [r3, #52]	; 0x34
    230c:	cmp	r8, r4
    230e:	bne.w	2424 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x1fc>
    2312:	ldr.w	lr, [lr, #16]
    2316:	cmp.w	lr, #0
    231a:	beq.n	233e <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x116>
    231c:	ldr.w	r3, [lr]
    2320:	ldr.w	r8, [r3, #52]	; 0x34
    2324:	cmp	r8, r4
    2326:	bne.n	2424 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x1fc>
    2328:	ldr.w	r4, [lr, #16]
    232c:	cbz	r4, 233e <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x116>
    232e:	ldr	r1, [r4, #0]
    2330:	mov	r3, ip
    2332:	str.w	ip, [sp]
    2336:	mov	r0, r4
    2338:	ldr	r1, [r1, #52]	; 0x34
    233a:	blx	r1
    233c:	b.n	23f2 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x1ca>
	unsigned int getRefcount() { // testing only
		return refcount;
	}
#endif
	virtual size_t read(void *buf, size_t nbyte) {
		return (f) ? f->read(buf, nbyte) : 0;
    233e:	ldr	r4, [r7, #40]	; 0x28
    2340:	ldr	r3, [pc, #240]	; (2434 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x20c>)
    2342:	cmp	r4, r3
    2344:	bne.n	23da <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x1b2>
    2346:	mov	r0, r1
    2348:	ldr	r2, [r0, #0]
    234a:	ldr	r4, [r2, #40]	; 0x28
    234c:	cmp	r4, r3
    234e:	bne.n	23da <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x1b2>
    2350:	ldr	r0, [r0, #16]
    2352:	cmp	r0, #0
    2354:	beq.n	23b6 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x18e>
    2356:	ldr	r2, [r0, #0]
    2358:	ldr	r4, [r2, #40]	; 0x28
    235a:	cmp	r4, r3
    235c:	bne.n	23da <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x1b2>
    235e:	ldr	r0, [r0, #16]
    2360:	cbz	r0, 23b6 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x18e>
    2362:	ldr	r2, [r0, #0]
    2364:	ldr	r4, [r2, #40]	; 0x28
    2366:	cmp	r4, r3
    2368:	bne.n	23da <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x1b2>
    236a:	ldr	r0, [r0, #16]
    236c:	cbz	r0, 23b6 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x18e>
    236e:	ldr	r2, [r0, #0]
    2370:	ldr	r4, [r2, #40]	; 0x28
    2372:	cmp	r4, r3
    2374:	bne.n	23da <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x1b2>
    2376:	ldr	r0, [r0, #16]
    2378:	cbz	r0, 23b6 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x18e>
    237a:	ldr	r2, [r0, #0]
    237c:	ldr	r4, [r2, #40]	; 0x28
    237e:	cmp	r4, r3
    2380:	bne.n	23da <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x1b2>
    2382:	ldr	r0, [r0, #16]
    2384:	cbz	r0, 23b6 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x18e>
    2386:	ldr	r2, [r0, #0]
    2388:	ldr	r4, [r2, #40]	; 0x28
    238a:	cmp	r4, r3
    238c:	bne.n	23da <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x1b2>
    238e:	ldr	r0, [r0, #16]
    2390:	cbz	r0, 23b6 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x18e>
    2392:	ldr	r2, [r0, #0]
    2394:	ldr	r4, [r2, #40]	; 0x28
    2396:	cmp	r4, r3
    2398:	bne.n	23da <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x1b2>
    239a:	ldr	r0, [r0, #16]
    239c:	cbz	r0, 23b6 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x18e>
    239e:	ldr	r2, [r0, #0]
    23a0:	ldr	r4, [r2, #40]	; 0x28
    23a2:	cmp	r4, r3
    23a4:	bne.n	23da <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x1b2>
    23a6:	ldr	r0, [r0, #16]
    23a8:	cbz	r0, 23b6 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x18e>
    23aa:	ldr	r3, [r0, #0]
    23ac:	mov.w	r2, #272	; 0x110
    23b0:	mov	r1, r6
    23b2:	ldr	r3, [r3, #40]	; 0x28
    23b4:	blx	r3
    index_.read((char *)&ret, sizeof(ret));
    mtp_lock_storage(false);

    return ret;
  }
    23b6:	mov	r0, r6
    23b8:	add	sp, #8
    23ba:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  Record MTPStorage_SD::ReadIndexRecord(uint32_t i) 
  {
    Record ret;
    memset(&ret, 0, sizeof(ret));
    if (i > index_entries_) 
    { memset(&ret, 0, sizeof(ret));
    23be:	mov.w	r2, #272	; 0x110
    23c2:	movs	r1, #0
    23c4:	mov	r0, r6
    23c6:	bl	10d7c <memset>
    index_.seek(sizeof(ret) * i);
    index_.read((char *)&ret, sizeof(ret));
    mtp_lock_storage(false);

    return ret;
  }
    23ca:	mov	r0, r6
    23cc:	add	sp, #8
    23ce:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    23d2:	ldr	r4, [r7, #40]	; 0x28
    23d4:	ldr	r3, [pc, #92]	; (2434 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x20c>)
    23d6:	cmp	r4, r3
    23d8:	beq.n	23b6 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x18e>
    23da:	mov.w	r2, #272	; 0x110
    23de:	mov	r1, r6
    23e0:	blx	r4
    23e2:	mov	r0, r6
    23e4:	add	sp, #8
    23e6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}
	virtual bool truncate(uint64_t size=0) {
		return (f) ? f->truncate(size) : false;
	}
	virtual bool seek(uint64_t pos, int mode) {
		return (f) ? f->seek(pos, mode) : false;
    23ea:	str.w	ip, [sp]
    23ee:	mov	r3, ip
    23f0:	blx	r1
	unsigned int getRefcount() { // testing only
		return refcount;
	}
#endif
	virtual size_t read(void *buf, size_t nbyte) {
		return (f) ? f->read(buf, nbyte) : 0;
    23f2:	ldr.w	r0, [r5, #184]	; 0xb8
    23f6:	cmp	r0, #0
    23f8:	beq.n	23b6 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x18e>
    23fa:	ldr	r2, [r0, #0]
    23fc:	ldr	r3, [pc, #52]	; (2434 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x20c>)
    23fe:	ldr	r4, [r2, #40]	; 0x28
    2400:	cmp	r4, r3
    2402:	bne.n	23da <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x1b2>
    2404:	ldr	r0, [r0, #16]
    2406:	cmp	r0, #0
    2408:	bne.n	2348 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x120>
    240a:	b.n	23b6 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x18e>
	}
	virtual bool truncate(uint64_t size=0) {
		return (f) ? f->truncate(size) : false;
	}
	virtual bool seek(uint64_t pos, int mode) {
		return (f) ? f->seek(pos, mode) : false;
    240c:	str.w	ip, [sp]
    2410:	mov	r3, ip
    2412:	mov	r0, lr
    2414:	blx	r8
    2416:	b.n	23f2 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x1ca>
    2418:	str.w	ip, [sp]
    241c:	mov	r3, ip
    241e:	mov	r0, r1
    2420:	blx	r8
    2422:	b.n	23f2 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x1ca>
    2424:	movs	r3, #0
    2426:	mov	r0, lr
    2428:	str	r3, [sp, #0]
    242a:	blx	r8
    242c:	b.n	23f2 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x1ca>
    242e:	nop
    2430:	.word	0x000000d9
    2434:	.word	0x0000008d

00002438 <MTPStorage_SD::GetNextObjectHandle(unsigned long)>:
      next_ = 1;
    }
  }

  uint32_t MTPStorage_SD::GetNextObjectHandle(uint32_t  store)
  {
    2438:	push	{r4, r5, lr}
    while (true) 
    { if (next_ == 0) return 0;
    243a:	ldr.w	r5, [r0, #252]	; 0xfc
      next_ = 1;
    }
  }

  uint32_t MTPStorage_SD::GetNextObjectHandle(uint32_t  store)
  {
    243e:	sub	sp, #276	; 0x114
    while (true) 
    { if (next_ == 0) return 0;
    2440:	cbz	r5, 248e <MTPStorage_SD::GetNextObjectHandle(unsigned long)+0x56>
    2442:	mov	r4, r0
    2444:	b.n	2458 <MTPStorage_SD::GetNextObjectHandle(unsigned long)+0x20>

      int ret = next_;
      Record r = ReadIndexRecord(ret);
      if (follow_sibling_) 
      { next_ = r.sibling;
    2446:	ldr	r3, [sp, #8]
    2448:	str.w	r3, [r4, #252]	; 0xfc
      } 
      else 
      { next_++;
        if (next_ >= index_entries_) next_ = 0;
      }
      if (r.name[0]) return ret;
    244c:	ldrb.w	r3, [sp, #16]
    2450:	cbnz	r3, 2488 <MTPStorage_SD::GetNextObjectHandle(unsigned long)+0x50>
  }

  uint32_t MTPStorage_SD::GetNextObjectHandle(uint32_t  store)
  {
    while (true) 
    { if (next_ == 0) return 0;
    2452:	ldr.w	r5, [r4, #252]	; 0xfc
    2456:	cbz	r5, 248e <MTPStorage_SD::GetNextObjectHandle(unsigned long)+0x56>

      int ret = next_;
      Record r = ReadIndexRecord(ret);
    2458:	mov	r2, r5
    245a:	mov	r1, r4
    245c:	mov	r0, sp
    245e:	bl	2228 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
      if (follow_sibling_) 
    2462:	ldrb.w	r2, [r4, #256]	; 0x100
    2466:	cmp	r2, #0
    2468:	bne.n	2446 <MTPStorage_SD::GetNextObjectHandle(unsigned long)+0xe>
      { next_ = r.sibling;
      } 
      else 
      { next_++;
    246a:	ldr.w	r3, [r4, #252]	; 0xfc
        if (next_ >= index_entries_) next_ = 0;
    246e:	ldr.w	r1, [r4, #244]	; 0xf4
      Record r = ReadIndexRecord(ret);
      if (follow_sibling_) 
      { next_ = r.sibling;
      } 
      else 
      { next_++;
    2472:	adds	r3, #1
    2474:	str.w	r3, [r4, #252]	; 0xfc
        if (next_ >= index_entries_) next_ = 0;
    2478:	cmp	r3, r1
      }
      if (r.name[0]) return ret;
    247a:	ldrb.w	r3, [sp, #16]
      if (follow_sibling_) 
      { next_ = r.sibling;
      } 
      else 
      { next_++;
        if (next_ >= index_entries_) next_ = 0;
    247e:	it	cs
    2480:	strcs.w	r2, [r4, #252]	; 0xfc
      }
      if (r.name[0]) return ret;
    2484:	cmp	r3, #0
    2486:	beq.n	2452 <MTPStorage_SD::GetNextObjectHandle(unsigned long)+0x1a>
    }
  }
    2488:	mov	r0, r5
    248a:	add	sp, #276	; 0x114
    248c:	pop	{r4, r5, pc}
  }

  uint32_t MTPStorage_SD::GetNextObjectHandle(uint32_t  store)
  {
    while (true) 
    { if (next_ == 0) return 0;
    248e:	movs	r5, #0
      { next_++;
        if (next_ >= index_entries_) next_ = 0;
      }
      if (r.name[0]) return ret;
    }
  }
    2490:	mov	r0, r5
    2492:	add	sp, #276	; 0x114
    2494:	pop	{r4, r5, pc}
    2496:	nop

00002498 <MTPStorage_SD::GetObjectInfo(unsigned long, char*, unsigned long*, unsigned long*, unsigned short*)>:

  void MTPStorage_SD::GetObjectInfo(uint32_t handle, char* name, uint32_t* size, uint32_t* parent, uint16_t *store)
  {
    2498:	push	{r4, r5, r6, r7, lr}
    249a:	sub	sp, #276	; 0x114
    249c:	mov	r7, r2
    Record r = ReadIndexRecord(handle);
    249e:	mov	r2, r1
    24a0:	mov	r1, r0
    24a2:	mov	r0, sp
      if (r.name[0]) return ret;
    }
  }

  void MTPStorage_SD::GetObjectInfo(uint32_t handle, char* name, uint32_t* size, uint32_t* parent, uint16_t *store)
  {
    24a4:	mov	r5, r3
    24a6:	ldr	r6, [sp, #296]	; 0x128
    24a8:	ldr	r4, [sp, #300]	; 0x12c
    Record r = ReadIndexRecord(handle);
    24aa:	bl	2228 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    strcpy(name, r.name);
    24ae:	mov	r0, r7
    24b0:	add	r1, sp, #16
    24b2:	bl	11270 <strcpy>
    *parent = r.parent;
    24b6:	ldr	r2, [sp, #0]
    *size = r.isdir ? 0xFFFFFFFFUL : r.child;
    24b8:	ldrb.w	r3, [sp, #12]

  void MTPStorage_SD::GetObjectInfo(uint32_t handle, char* name, uint32_t* size, uint32_t* parent, uint16_t *store)
  {
    Record r = ReadIndexRecord(handle);
    strcpy(name, r.name);
    *parent = r.parent;
    24bc:	str	r2, [r6, #0]
    *size = r.isdir ? 0xFFFFFFFFUL : r.child;
    24be:	cbnz	r3, 24ce <MTPStorage_SD::GetObjectInfo(unsigned long, char*, unsigned long*, unsigned long*, unsigned short*)+0x36>
    24c0:	ldr	r3, [sp, #4]
    *store = r.store;
    24c2:	ldrh.w	r2, [sp, #14]
  void MTPStorage_SD::GetObjectInfo(uint32_t handle, char* name, uint32_t* size, uint32_t* parent, uint16_t *store)
  {
    Record r = ReadIndexRecord(handle);
    strcpy(name, r.name);
    *parent = r.parent;
    *size = r.isdir ? 0xFFFFFFFFUL : r.child;
    24c6:	str	r3, [r5, #0]
    *store = r.store;
    24c8:	strh	r2, [r4, #0]
  }
    24ca:	add	sp, #276	; 0x114
    24cc:	pop	{r4, r5, r6, r7, pc}
  void MTPStorage_SD::GetObjectInfo(uint32_t handle, char* name, uint32_t* size, uint32_t* parent, uint16_t *store)
  {
    Record r = ReadIndexRecord(handle);
    strcpy(name, r.name);
    *parent = r.parent;
    *size = r.isdir ? 0xFFFFFFFFUL : r.child;
    24ce:	mov.w	r3, #4294967295
    24d2:	b.n	24c2 <MTPStorage_SD::GetObjectInfo(unsigned long, char*, unsigned long*, unsigned long*, unsigned short*)+0x2a>

000024d4 <MTPStorage_SD::GetSize(unsigned long)>:
    *store = r.store;
  }

  uint32_t MTPStorage_SD::GetSize(uint32_t handle) 
  {
    24d4:	push	{lr}
    24d6:	sub	sp, #276	; 0x114
    return ReadIndexRecord(handle).child;
    24d8:	mov	r2, r1
    24da:	mov	r1, r0
    24dc:	mov	r0, sp
    24de:	bl	2228 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
  }
    24e2:	ldr	r0, [sp, #4]
    24e4:	add	sp, #276	; 0x114
    24e6:	ldr.w	pc, [sp], #4
    24ea:	nop

000024ec <MTPStorage_SD::close()>:
      mtp_lock_storage(false);
      return ret;
  }

  void MTPStorage_SD::close() 
  {
    24ec:	push	{r4, r5, r6, lr}
	}
	virtual uint64_t position() {
		return (f) ? f->position() : 0;
	}
	virtual uint64_t size() {
		return (f) ? f->size() : 0;
    24ee:	ldr.w	r3, [r0, #204]	; 0xcc
    24f2:	sub	sp, #272	; 0x110
    24f4:	mov	r4, r0
    24f6:	cmp	r3, #0
    24f8:	beq.n	2594 <MTPStorage_SD::close()+0xa8>
    24fa:	ldr	r5, [r3, #0]
    24fc:	ldr	r1, [pc, #384]	; (2680 <MTPStorage_SD::close()+0x194>)
    24fe:	ldr	r2, [r5, #60]	; 0x3c
    2500:	cmp	r2, r1
    2502:	bne.w	2674 <MTPStorage_SD::close()+0x188>
    2506:	ldr	r2, [r3, #16]
    2508:	cmp	r2, #0
    250a:	beq.w	2664 <MTPStorage_SD::close()+0x178>
    250e:	ldr	r0, [r2, #0]
    2510:	ldr	r6, [r0, #60]	; 0x3c
    2512:	cmp	r6, r1
    2514:	bne.n	25bc <MTPStorage_SD::close()+0xd0>
    2516:	ldr	r0, [r2, #16]
    2518:	cmp	r0, #0
    251a:	beq.n	2586 <MTPStorage_SD::close()+0x9a>
    251c:	ldr	r6, [r0, #0]
    251e:	ldr	r6, [r6, #60]	; 0x3c
    2520:	cmp	r6, r1
    2522:	bne.n	25be <MTPStorage_SD::close()+0xd2>
    2524:	ldr	r0, [r0, #16]
    2526:	cmp	r0, #0
    2528:	beq.n	2586 <MTPStorage_SD::close()+0x9a>
    252a:	ldr	r6, [r0, #0]
    252c:	ldr	r6, [r6, #60]	; 0x3c
    252e:	cmp	r6, r1
    2530:	bne.n	25be <MTPStorage_SD::close()+0xd2>
    2532:	ldr	r0, [r0, #16]
    2534:	cbz	r0, 2586 <MTPStorage_SD::close()+0x9a>
    2536:	ldr	r6, [r0, #0]
    2538:	ldr	r6, [r6, #60]	; 0x3c
    253a:	cmp	r6, r1
    253c:	bne.n	25be <MTPStorage_SD::close()+0xd2>
    253e:	ldr	r0, [r0, #16]
    2540:	cbz	r0, 2586 <MTPStorage_SD::close()+0x9a>
    2542:	ldr	r6, [r0, #0]
    2544:	ldr	r6, [r6, #60]	; 0x3c
    2546:	cmp	r6, r1
    2548:	bne.n	25be <MTPStorage_SD::close()+0xd2>
    254a:	ldr	r0, [r0, #16]
    254c:	cbz	r0, 2586 <MTPStorage_SD::close()+0x9a>
    254e:	ldr	r6, [r0, #0]
    2550:	ldr	r6, [r6, #60]	; 0x3c
    2552:	cmp	r6, r1
    2554:	bne.n	25be <MTPStorage_SD::close()+0xd2>
    2556:	ldr	r0, [r0, #16]
    2558:	cbz	r0, 2586 <MTPStorage_SD::close()+0x9a>
    255a:	ldr	r6, [r0, #0]
    255c:	ldr	r6, [r6, #60]	; 0x3c
    255e:	cmp	r6, r1
    2560:	bne.n	25be <MTPStorage_SD::close()+0xd2>
    2562:	ldr	r0, [r0, #16]
    2564:	cbz	r0, 2586 <MTPStorage_SD::close()+0x9a>
    2566:	ldr	r6, [r0, #0]
    2568:	ldr	r6, [r6, #60]	; 0x3c
    256a:	cmp	r6, r1
    256c:	bne.n	25be <MTPStorage_SD::close()+0xd2>
    256e:	ldr	r0, [r0, #16]
    2570:	cbz	r0, 2586 <MTPStorage_SD::close()+0x9a>
    2572:	ldr	r6, [r0, #0]
    2574:	ldr	r6, [r6, #60]	; 0x3c
    2576:	cmp	r6, r1
    2578:	bne.n	25be <MTPStorage_SD::close()+0xd2>
    257a:	ldr	r0, [r0, #16]
    257c:	cbz	r0, 2586 <MTPStorage_SD::close()+0x9a>
    257e:	ldr	r3, [r0, #0]
    2580:	ldr	r3, [r3, #60]	; 0x3c
    2582:	blx	r3
    2584:	b.n	25c0 <MTPStorage_SD::close()+0xd4>
	}
	virtual void close() {
		if (f) f->close();
    2586:	ldr	r6, [r5, #64]	; 0x40
    2588:	ldr	r1, [pc, #248]	; (2684 <MTPStorage_SD::close()+0x198>)
    258a:	cmp	r6, r1
    258c:	bne.n	267a <MTPStorage_SD::close()+0x18e>
    258e:	mov	r0, r2
    2590:	movs	r5, #0
    2592:	b.n	25da <MTPStorage_SD::close()+0xee>
    mtp_lock_storage(true);
    uint32_t size = (uint32_t) file_.size();
    2594:	mov	r5, r3
    file_.close();
    mtp_lock_storage(false);
    //
    // update record with file size
    Record r = ReadIndexRecord(open_file_);
    2596:	ldr.w	r2, [r4, #240]	; 0xf0
    259a:	mov	r1, r4
    259c:	mov	r0, sp
    259e:	bl	2228 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    r.child = size;
    WriteIndexRecord(open_file_, r);
    25a2:	mov	r2, sp
    25a4:	ldr.w	r1, [r4, #240]	; 0xf0
    25a8:	mov	r0, r4
    file_.close();
    mtp_lock_storage(false);
    //
    // update record with file size
    Record r = ReadIndexRecord(open_file_);
    r.child = size;
    25aa:	str	r5, [sp, #4]
    WriteIndexRecord(open_file_, r);
    25ac:	bl	2058 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    open_file_ = 0xFFFFFFFEUL;
    25b0:	mvn.w	r3, #1
    25b4:	str.w	r3, [r4, #240]	; 0xf0
  }
    25b8:	add	sp, #272	; 0x110
    25ba:	pop	{r4, r5, r6, pc}
	}
	virtual uint64_t position() {
		return (f) ? f->position() : 0;
	}
	virtual uint64_t size() {
		return (f) ? f->size() : 0;
    25bc:	mov	r0, r2
    25be:	blx	r6
	}
	virtual void close() {
		if (f) f->close();
    25c0:	ldr.w	r3, [r4, #204]	; 0xcc
  }

  void MTPStorage_SD::close() 
  {
    mtp_lock_storage(true);
    uint32_t size = (uint32_t) file_.size();
    25c4:	mov	r5, r0
    25c6:	cmp	r3, #0
    25c8:	beq.n	2596 <MTPStorage_SD::close()+0xaa>
    25ca:	ldr	r2, [r3, #0]
    25cc:	ldr	r1, [pc, #180]	; (2684 <MTPStorage_SD::close()+0x198>)
    25ce:	ldr	r6, [r2, #64]	; 0x40
    25d0:	cmp	r6, r1
    25d2:	bne.n	266e <MTPStorage_SD::close()+0x182>
    25d4:	ldr	r0, [r3, #16]
    25d6:	cmp	r0, #0
    25d8:	beq.n	2596 <MTPStorage_SD::close()+0xaa>
    25da:	ldr	r3, [r0, #0]
    25dc:	ldr	r3, [r3, #64]	; 0x40
    25de:	cmp	r3, r1
    25e0:	bne.n	2660 <MTPStorage_SD::close()+0x174>
    25e2:	ldr	r0, [r0, #16]
    25e4:	cmp	r0, #0
    25e6:	beq.n	2596 <MTPStorage_SD::close()+0xaa>
    25e8:	ldr	r3, [r0, #0]
    25ea:	ldr	r3, [r3, #64]	; 0x40
    25ec:	cmp	r3, r1
    25ee:	bne.n	2660 <MTPStorage_SD::close()+0x174>
    25f0:	ldr	r0, [r0, #16]
    25f2:	cmp	r0, #0
    25f4:	beq.n	2596 <MTPStorage_SD::close()+0xaa>
    25f6:	ldr	r3, [r0, #0]
    25f8:	ldr	r3, [r3, #64]	; 0x40
    25fa:	cmp	r3, r1
    25fc:	bne.n	2660 <MTPStorage_SD::close()+0x174>
    25fe:	ldr	r0, [r0, #16]
    2600:	cmp	r0, #0
    2602:	beq.n	2596 <MTPStorage_SD::close()+0xaa>
    2604:	ldr	r3, [r0, #0]
    2606:	ldr	r3, [r3, #64]	; 0x40
    2608:	cmp	r3, r1
    260a:	bne.n	2660 <MTPStorage_SD::close()+0x174>
    260c:	ldr	r0, [r0, #16]
    260e:	cmp	r0, #0
    2610:	beq.n	2596 <MTPStorage_SD::close()+0xaa>
    2612:	ldr	r3, [r0, #0]
    2614:	ldr	r3, [r3, #64]	; 0x40
    2616:	cmp	r3, r1
    2618:	bne.n	2660 <MTPStorage_SD::close()+0x174>
    261a:	ldr	r0, [r0, #16]
    261c:	cmp	r0, #0
    261e:	beq.n	2596 <MTPStorage_SD::close()+0xaa>
    2620:	ldr	r3, [r0, #0]
    2622:	ldr	r3, [r3, #64]	; 0x40
    2624:	cmp	r3, r1
    2626:	bne.n	2660 <MTPStorage_SD::close()+0x174>
    2628:	ldr	r0, [r0, #16]
    262a:	cmp	r0, #0
    262c:	beq.n	2596 <MTPStorage_SD::close()+0xaa>
    262e:	ldr	r3, [r0, #0]
    2630:	ldr	r3, [r3, #64]	; 0x40
    2632:	cmp	r3, r1
    2634:	bne.n	2660 <MTPStorage_SD::close()+0x174>
    2636:	ldr	r0, [r0, #16]
    2638:	cmp	r0, #0
    263a:	beq.n	2596 <MTPStorage_SD::close()+0xaa>
    263c:	ldr	r3, [r0, #0]
    263e:	ldr	r3, [r3, #64]	; 0x40
    2640:	cmp	r3, r1
    2642:	bne.n	2660 <MTPStorage_SD::close()+0x174>
    2644:	ldr	r0, [r0, #16]
    2646:	cmp	r0, #0
    2648:	beq.n	2596 <MTPStorage_SD::close()+0xaa>
    264a:	ldr	r3, [r0, #0]
    264c:	ldr	r3, [r3, #64]	; 0x40
    264e:	cmp	r3, r1
    2650:	bne.n	2660 <MTPStorage_SD::close()+0x174>
    2652:	ldr	r0, [r0, #16]
    2654:	cmp	r0, #0
    2656:	beq.n	2596 <MTPStorage_SD::close()+0xaa>
    2658:	ldr	r3, [r0, #0]
    265a:	ldr	r3, [r3, #64]	; 0x40
    265c:	blx	r3
    265e:	b.n	2596 <MTPStorage_SD::close()+0xaa>
    2660:	blx	r3
    2662:	b.n	2596 <MTPStorage_SD::close()+0xaa>
    2664:	ldr	r6, [r5, #64]	; 0x40
    2666:	mov	r5, r2
    2668:	ldr	r1, [pc, #24]	; (2684 <MTPStorage_SD::close()+0x198>)
    266a:	cmp	r6, r1
    266c:	beq.n	2596 <MTPStorage_SD::close()+0xaa>
    266e:	mov	r0, r3
    2670:	blx	r6
    2672:	b.n	2596 <MTPStorage_SD::close()+0xaa>
	}
	virtual uint64_t position() {
		return (f) ? f->position() : 0;
	}
	virtual uint64_t size() {
		return (f) ? f->size() : 0;
    2674:	mov	r0, r3
    2676:	blx	r2
    2678:	b.n	25c0 <MTPStorage_SD::close()+0xd4>
	}
	virtual void close() {
		if (f) f->close();
    267a:	movs	r5, #0
    267c:	b.n	266e <MTPStorage_SD::close()+0x182>
    267e:	nop
    2680:	.word	0x00000101
    2684:	.word	0x00000111

00002688 <MTPStorage_SD::ConstructFilename(int, char*, int)>:

    return ret;
  }

  uint16_t MTPStorage_SD::ConstructFilename(int i, char* out, int len) // construct filename rexursively
  {
    2688:	push	{r4, r5, r6, lr}
    268a:	mov	r6, r0
    268c:	sub	sp, #272	; 0x110
    268e:	mov	r4, r2
    Record tmp = ReadIndexRecord(i);
    2690:	mov	r2, r1
    2692:	mov	r0, sp
    2694:	mov	r1, r6

    return ret;
  }

  uint16_t MTPStorage_SD::ConstructFilename(int i, char* out, int len) // construct filename rexursively
  {
    2696:	mov	r5, r3
    Record tmp = ReadIndexRecord(i);
    2698:	bl	2228 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
      
    if (tmp.parent==0xFFFFFFFFUL) //flags the root object
    269c:	ldr	r1, [sp, #0]
    269e:	adds	r3, r1, #1
    26a0:	beq.n	26d8 <MTPStorage_SD::ConstructFilename(int, char*, int)+0x50>
    { strcpy(out, "/");
      return tmp.store;
    }
    else 
    { ConstructFilename(tmp.parent, out, len);
    26a2:	mov	r3, r5
    26a4:	mov	r2, r4
    26a6:	mov	r0, r6
    26a8:	bl	2688 <MTPStorage_SD::ConstructFilename(int, char*, int)>
      if (out[strlen(out)-1] != '/') strlcat(out, "/",len);
    26ac:	mov	r0, r4
    26ae:	bl	113c0 <strlen>
    26b2:	add	r0, r4
    26b4:	ldrb.w	r3, [r0, #-1]
    26b8:	cmp	r3, #47	; 0x2f
    26ba:	beq.n	26c6 <MTPStorage_SD::ConstructFilename(int, char*, int)+0x3e>
    26bc:	mov	r2, r5
    26be:	ldr	r1, [pc, #40]	; (26e8 <MTPStorage_SD::ConstructFilename(int, char*, int)+0x60>)
    26c0:	mov	r0, r4
    26c2:	bl	1132c <strlcat>
      strlcat(out, tmp.name,len);
    26c6:	mov	r2, r5
    26c8:	mov	r0, r4
    26ca:	add	r1, sp, #16
    26cc:	bl	1132c <strlcat>
      return tmp.store;
    26d0:	ldrh.w	r0, [sp, #14]
    }
  }
    26d4:	add	sp, #272	; 0x110
    26d6:	pop	{r4, r5, r6, pc}
  uint16_t MTPStorage_SD::ConstructFilename(int i, char* out, int len) // construct filename rexursively
  {
    Record tmp = ReadIndexRecord(i);
      
    if (tmp.parent==0xFFFFFFFFUL) //flags the root object
    { strcpy(out, "/");
    26d8:	ldr	r3, [pc, #12]	; (26e8 <MTPStorage_SD::ConstructFilename(int, char*, int)+0x60>)
      return tmp.store;
    26da:	ldrh.w	r0, [sp, #14]
  uint16_t MTPStorage_SD::ConstructFilename(int i, char* out, int len) // construct filename rexursively
  {
    Record tmp = ReadIndexRecord(i);
      
    if (tmp.parent==0xFFFFFFFFUL) //flags the root object
    { strcpy(out, "/");
    26de:	ldrh	r3, [r3, #0]
    26e0:	strh	r3, [r4, #0]
    { ConstructFilename(tmp.parent, out, len);
      if (out[strlen(out)-1] != '/') strlcat(out, "/",len);
      strlcat(out, tmp.name,len);
      return tmp.store;
    }
  }
    26e2:	add	sp, #272	; 0x110
    26e4:	pop	{r4, r5, r6, pc}
    26e6:	nop
    26e8:	.word	0x20000308

000026ec <MTPStorage_SD::rename(unsigned long, char const*)>:
    WriteIndexRecord(open_file_, r);
    open_file_ = 0xFFFFFFFEUL;
  }

  bool MTPStorage_SD::rename(uint32_t handle, const char* name) 
  { char oldName[MAX_FILENAME_LEN];
    26ec:	push	{r4, r5, r6, r7, lr}
    26ee:	subw	sp, sp, #1044	; 0x414
    char newName[MAX_FILENAME_LEN];
    char temp[MAX_FILENAME_LEN];

    uint16_t store = ConstructFilename(handle, oldName, MAX_FILENAME_LEN);
    26f2:	mov.w	r3, #256	; 0x100
    WriteIndexRecord(open_file_, r);
    open_file_ = 0xFFFFFFFEUL;
  }

  bool MTPStorage_SD::rename(uint32_t handle, const char* name) 
  { char oldName[MAX_FILENAME_LEN];
    26f6:	mov	r7, r2
    26f8:	mov	r5, r1
    char newName[MAX_FILENAME_LEN];
    char temp[MAX_FILENAME_LEN];

    uint16_t store = ConstructFilename(handle, oldName, MAX_FILENAME_LEN);
    26fa:	mov	r2, sp
    WriteIndexRecord(open_file_, r);
    open_file_ = 0xFFFFFFFEUL;
  }

  bool MTPStorage_SD::rename(uint32_t handle, const char* name) 
  { char oldName[MAX_FILENAME_LEN];
    26fc:	mov	r4, r0
    char newName[MAX_FILENAME_LEN];
    char temp[MAX_FILENAME_LEN];

    uint16_t store = ConstructFilename(handle, oldName, MAX_FILENAME_LEN);
    26fe:	bl	2688 <MTPStorage_SD::ConstructFilename(int, char*, int)>
    2702:	mov	r6, r0
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
    2704:	mov	r0, sp
    2706:	bl	113c0 <strlen>
    270a:	mov	r1, r0
    270c:	mov	r0, sp
    uint32_t sd_getFSCount(void) {return fsCount;}
    const char *sd_getFSName(uint32_t store) { return sd_name[store];}

    File sd_open(uint32_t store, const char *filename, uint32_t mode) { return sdx[store]->open(filename,mode);  }
    bool sd_mkdir(uint32_t store, char *filename) {  return sdx[store]->mkdir(filename);  }
    bool sd_rename(uint32_t store, char *oldfilename, char *newfilename) { return sdx[store]->rename(oldfilename,newfilename);  }
    270e:	add.w	r6, r4, r6, lsl #2
    2712:	bl	d7d4 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    2716:	ldr	r0, [pc, #128]	; (2798 <MTPStorage_SD::rename(unsigned long, char const*)+0xac>)
    2718:	bl	f5bc <Print::println()>
    Serial.println(oldName);

    Record p1 = ReadIndexRecord(handle);
    271c:	mov	r2, r5
    271e:	mov	r1, r4
    2720:	add	r0, sp, #768	; 0x300
    2722:	bl	2228 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    strlcpy(temp,p1.name,MAX_FILENAME_LEN);
    2726:	add	r1, sp, #784	; 0x310
    2728:	mov.w	r2, #256	; 0x100
    272c:	add	r0, sp, #512	; 0x200
    272e:	bl	11380 <strlcpy>
    strlcpy(p1.name,name,MAX_FILENAME_LEN);
    2732:	mov	r1, r7
    2734:	mov.w	r2, #256	; 0x100
    2738:	add	r0, sp, #784	; 0x310
    273a:	bl	11380 <strlcpy>

    WriteIndexRecord(handle, p1);
    273e:	add	r2, sp, #768	; 0x300
    2740:	mov	r1, r5
    2742:	mov	r0, r4
    2744:	bl	2058 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    ConstructFilename(handle, newName, MAX_FILENAME_LEN);
    2748:	add	r2, sp, #256	; 0x100
    274a:	mov.w	r3, #256	; 0x100
    274e:	mov	r1, r5
    2750:	mov	r0, r4
    2752:	bl	2688 <MTPStorage_SD::ConstructFilename(int, char*, int)>
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
    2756:	add	r0, sp, #256	; 0x100
    2758:	bl	113c0 <strlen>
    275c:	mov	r1, r0
    275e:	add	r0, sp, #256	; 0x100
    2760:	bl	d7d4 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    2764:	ldr	r0, [pc, #48]	; (2798 <MTPStorage_SD::rename(unsigned long, char const*)+0xac>)
    2766:	bl	f5bc <Print::println()>
    276a:	ldr	r0, [r6, #88]	; 0x58
    276c:	add	r2, sp, #256	; 0x100
    276e:	mov	r1, sp
    2770:	ldr	r3, [r0, #0]
    2772:	ldr	r3, [r3, #12]
    2774:	blx	r3
    Serial.println(newName);

    if (sd_rename(store,oldName,newName)) return true;
    2776:	mov	r6, r0
    2778:	cbnz	r0, 2790 <MTPStorage_SD::rename(unsigned long, char const*)+0xa4>

    // rename failed; undo index update
    strlcpy(p1.name,temp,MAX_FILENAME_LEN);
    277a:	add	r1, sp, #512	; 0x200
    277c:	mov.w	r2, #256	; 0x100
    2780:	add	r0, sp, #784	; 0x310
    2782:	bl	11380 <strlcpy>
    WriteIndexRecord(handle, p1);
    2786:	add	r2, sp, #768	; 0x300
    2788:	mov	r1, r5
    278a:	mov	r0, r4
    278c:	bl	2058 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    return false;
  }
    2790:	mov	r0, r6
    2792:	addw	sp, sp, #1044	; 0x414
    2796:	pop	{r4, r5, r6, r7, pc}
    2798:	.word	0x20000c58

0000279c <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)>:
    }
  }

  void MTPStorage_SD::OpenFileByIndex(uint32_t i, uint32_t mode) 
  {
    if (open_file_ == i && mode_ == mode) return;
    279c:	ldr.w	r3, [r0, #240]	; 0xf0
    27a0:	cmp	r3, r1
      return tmp.store;
    }
  }

  void MTPStorage_SD::OpenFileByIndex(uint32_t i, uint32_t mode) 
  {
    27a2:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    27a6:	sub	sp, #292	; 0x124
    if (open_file_ == i && mode_ == mode) return;
    27a8:	beq.w	2ba0 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x404>
    27ac:	mov	r4, r0
    27ae:	mov	r6, r2
    char filename[MAX_FILENAME_LEN];
    uint16_t store = ConstructFilename(i, filename, MAX_FILENAME_LEN);
    27b0:	mov.w	r3, #256	; 0x100
    27b4:	add	r2, sp, #32
    27b6:	mov	r5, r1
    27b8:	bl	2688 <MTPStorage_SD::ConstructFilename(int, char*, int)>
    27bc:	mov	r7, r0
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
    27be:	ldr.w	r0, [r4, #204]	; 0xcc
    27c2:	cmp	r0, #0
    27c4:	beq.w	28d8 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x13c>
    27c8:	ldr	r2, [r0, #0]
    27ca:	ldr	r3, [pc, #348]	; (2928 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x18c>)
    27cc:	ldr	r2, [r2, #68]	; 0x44
    27ce:	cmp	r2, r3
    27d0:	bne.w	2bb0 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x414>
    27d4:	ldr	r0, [r0, #16]
    27d6:	cmp	r0, #0
    27d8:	beq.n	28d8 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x13c>
    27da:	ldr	r2, [r0, #0]
    27dc:	ldr	r2, [r2, #68]	; 0x44
    27de:	cmp	r2, r3
    27e0:	bne.w	2bb0 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x414>
    27e4:	ldr	r0, [r0, #16]
    27e6:	cmp	r0, #0
    27e8:	beq.n	28d8 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x13c>
    27ea:	ldr	r2, [r0, #0]
    27ec:	ldr	r2, [r2, #68]	; 0x44
    27ee:	cmp	r2, r3
    27f0:	bne.w	2bb0 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x414>
    27f4:	ldr	r0, [r0, #16]
    27f6:	cmp	r0, #0
    27f8:	beq.n	28d8 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x13c>
    27fa:	ldr	r2, [r0, #0]
    27fc:	ldr	r2, [r2, #68]	; 0x44
    27fe:	cmp	r2, r3
    2800:	bne.w	2bb0 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x414>
    2804:	ldr	r0, [r0, #16]
    2806:	cmp	r0, #0
    2808:	beq.n	28d8 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x13c>
    280a:	ldr	r2, [r0, #0]
    280c:	ldr	r2, [r2, #68]	; 0x44
    280e:	cmp	r2, r3
    2810:	bne.w	2bb0 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x414>
    2814:	ldr	r0, [r0, #16]
    2816:	cmp	r0, #0
    2818:	beq.n	28d8 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x13c>
    281a:	ldr	r2, [r0, #0]
    281c:	ldr	r2, [r2, #68]	; 0x44
    281e:	cmp	r2, r3
    2820:	bne.w	2bb0 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x414>
    2824:	ldr	r0, [r0, #16]
    2826:	cmp	r0, #0
    2828:	beq.n	28d8 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x13c>
    282a:	ldr	r2, [r0, #0]
    282c:	ldr	r2, [r2, #68]	; 0x44
    282e:	cmp	r2, r3
    2830:	bne.w	2bb0 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x414>
    2834:	ldr	r0, [r0, #16]
    2836:	cmp	r0, #0
    2838:	beq.n	28d8 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x13c>
    283a:	ldr	r2, [r0, #0]
    283c:	ldr	r2, [r2, #68]	; 0x44
    283e:	cmp	r2, r3
    2840:	bne.w	2bb0 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x414>
    2844:	ldr	r0, [r0, #16]
    2846:	cmp	r0, #0
    2848:	beq.n	28d8 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x13c>
    284a:	ldr	r2, [r0, #0]
    284c:	ldr	r2, [r2, #68]	; 0x44
    284e:	cmp	r2, r3
    2850:	bne.w	2bb0 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x414>
    2854:	ldr	r0, [r0, #16]
    2856:	cmp	r0, #0
    2858:	beq.n	28d8 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x13c>
    285a:	ldr	r3, [r0, #0]
    285c:	ldr	r3, [r3, #68]	; 0x44
    285e:	blx	r3

    mtp_lock_storage(true);
    if(sd_isOpen(file_)) file_.close();
    2860:	cmp	r0, #0
    2862:	beq.n	28d8 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x13c>
	}
	virtual uint64_t size() {
		return (f) ? f->size() : 0;
	}
	virtual void close() {
		if (f) f->close();
    2864:	ldr.w	r0, [r4, #204]	; 0xcc
    2868:	cmp	r0, #0
    286a:	beq.n	28d8 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x13c>
    286c:	ldr	r2, [r0, #0]
    286e:	ldr	r3, [pc, #188]	; (292c <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x190>)
    2870:	ldr	r2, [r2, #64]	; 0x40
    2872:	cmp	r2, r3
    2874:	bne.w	2bb4 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x418>
    2878:	ldr	r0, [r0, #16]
    287a:	cmp	r0, #0
    287c:	beq.n	28d8 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x13c>
    287e:	ldr	r2, [r0, #0]
    2880:	ldr	r2, [r2, #64]	; 0x40
    2882:	cmp	r2, r3
    2884:	bne.w	2bb4 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x418>
    2888:	ldr	r0, [r0, #16]
    288a:	cbz	r0, 28d8 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x13c>
    288c:	ldr	r2, [r0, #0]
    288e:	ldr	r2, [r2, #64]	; 0x40
    2890:	cmp	r2, r3
    2892:	bne.w	2bb4 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x418>
    2896:	ldr	r0, [r0, #16]
    2898:	cbz	r0, 28d8 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x13c>
    289a:	ldr	r2, [r0, #0]
    289c:	ldr	r2, [r2, #64]	; 0x40
    289e:	cmp	r2, r3
    28a0:	bne.w	2bb4 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x418>
    28a4:	ldr	r0, [r0, #16]
    28a6:	cbz	r0, 28d8 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x13c>
    28a8:	ldr	r2, [r0, #0]
    28aa:	ldr	r2, [r2, #64]	; 0x40
    28ac:	cmp	r2, r3
    28ae:	bne.w	2bb4 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x418>
    28b2:	ldr	r0, [r0, #16]
    28b4:	cbz	r0, 28d8 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x13c>
    28b6:	ldr	r2, [r0, #0]
    28b8:	ldr	r2, [r2, #64]	; 0x40
    28ba:	cmp	r2, r3
    28bc:	bne.w	2bb4 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x418>
    28c0:	ldr	r0, [r0, #16]
    28c2:	cbz	r0, 28d8 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x13c>
    28c4:	ldr	r2, [r0, #0]
    28c6:	ldr	r2, [r2, #64]	; 0x40
    28c8:	cmp	r2, r3
    28ca:	bne.w	2bb4 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x418>
    28ce:	ldr	r0, [r0, #16]
    28d0:	cbz	r0, 28d8 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x13c>
    28d2:	ldr	r3, [r0, #0]
    28d4:	ldr	r3, [r3, #64]	; 0x40
    28d6:	blx	r3
    }

    uint32_t sd_getFSCount(void) {return fsCount;}
    const char *sd_getFSName(uint32_t store) { return sd_name[store];}

    File sd_open(uint32_t store, const char *filename, uint32_t mode) { return sdx[store]->open(filename,mode);  }
    28d8:	add.w	r7, r4, r7, lsl #2
    28dc:	add	r2, sp, #32
    28de:	uxtb	r3, r6
    28e0:	add	r0, sp, #12
    28e2:	ldr	r1, [r7, #88]	; 0x58
    28e4:	ldr	r7, [r1, #0]
    28e6:	ldr	r7, [r7, #0]
    28e8:	blx	r7
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    28ea:	ldr.w	r2, [r4, #204]	; 0xcc
    28ee:	cbz	r2, 28f8 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x15c>
    28f0:	ldr	r3, [r2, #16]
    28f2:	subs	r3, #1
    28f4:	str	r3, [r2, #16]
    28f6:	cbz	r3, 2934 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x198>
	File& operator = (const File &file) {
		//Serial.println("File assignment");
		//static int assigncount=0;
		//if (++assigncount > 20) while (1) ;
		invalidate();
		f = file.f;
    28f8:	ldr	r2, [sp, #28]
    28fa:	str.w	r2, [r4, #204]	; 0xcc
		if (f) f->refcount++;
    28fe:	cbz	r2, 291a <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x17e>
    2900:	ldr	r1, [r2, #16]
		return *this;
	}
	virtual ~File() {
    2902:	ldr	r3, [pc, #44]	; (2930 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x194>)
		//Serial.println("File assignment");
		//static int assigncount=0;
		//if (++assigncount > 20) while (1) ;
		invalidate();
		f = file.f;
		if (f) f->refcount++;
    2904:	adds	r1, #1
		return *this;
	}
	virtual ~File() {
    2906:	str	r3, [sp, #12]
		//Serial.println("File assignment");
		//static int assigncount=0;
		//if (++assigncount > 20) while (1) ;
		invalidate();
		f = file.f;
		if (f) f->refcount++;
    2908:	str	r1, [r2, #16]
    290a:	ldr	r1, [sp, #28]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    290c:	cbz	r1, 291a <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x17e>
    290e:	ldr	r2, [r1, #16]
    2910:	subs	r2, #1
    2912:	str	r2, [r1, #16]
    2914:	cmp	r2, #0
    2916:	beq.w	2a70 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x2d4>
    file_=sd_open(store,filename,mode);
    open_file_ = i;
    291a:	str.w	r5, [r4, #240]	; 0xf0
    mode_ = mode;
    291e:	str.w	r6, [r4, #236]	; 0xec
    mtp_lock_storage(false);
  }
    2922:	add	sp, #292	; 0x124
    2924:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2928:	.word	0x0000011d
    292c:	.word	0x00000111
    2930:	.word	0x20000074
    2934:	ldr.w	r7, [r4, #204]	; 0xcc
    2938:	cmp	r7, #0
    293a:	beq.n	28f8 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x15c>
    293c:	ldr	r3, [r7, #0]
    293e:	ldr	r1, [pc, #680]	; (2be8 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x44c>)
    2940:	ldr	r3, [r3, #32]
    2942:	cmp	r3, r1
    2944:	bne.w	2bb8 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x41c>
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    2948:	ldr	r3, [pc, #672]	; (2bec <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x450>)
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    294a:	ldr	r0, [r7, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    294c:	str	r3, [r7, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    294e:	cmp	r0, #0
    2950:	beq.w	2a66 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x2ca>
    2954:	ldr	r2, [r0, #16]
    2956:	subs	r2, #1
    2958:	str	r2, [r0, #16]
    295a:	cmp	r2, #0
    295c:	bne.w	2a66 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x2ca>
    2960:	ldr.w	r8, [r7, #16]
    2964:	cmp.w	r8, #0
    2968:	beq.n	2a66 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x2ca>
    296a:	ldr.w	r2, [r8]
    296e:	ldr	r2, [r2, #32]
    2970:	cmp	r2, r1
    2972:	bne.w	2bd6 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x43a>
    2976:	ldr.w	r0, [r8, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    297a:	str.w	r3, [r8]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    297e:	cmp	r0, #0
    2980:	beq.n	2a5e <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x2c2>
    2982:	ldr	r2, [r0, #16]
    2984:	subs	r2, #1
    2986:	str	r2, [r0, #16]
    2988:	cmp	r2, #0
    298a:	bne.n	2a5e <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x2c2>
    298c:	ldr.w	r9, [r8, #16]
    2990:	cmp.w	r9, #0
    2994:	beq.n	2a5e <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x2c2>
    2996:	ldr.w	r2, [r9]
    299a:	ldr	r2, [r2, #32]
    299c:	cmp	r2, r1
    299e:	bne.w	2bca <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x42e>
    29a2:	ldr.w	r0, [r9, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    29a6:	str.w	r3, [r9]
    29aa:	ldr.w	lr, [pc, #576]	; 2bec <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x450>
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    29ae:	cmp	r0, #0
    29b0:	beq.n	2a56 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x2ba>
    29b2:	ldr	r2, [r0, #16]
    29b4:	subs	r2, #1
    29b6:	str	r2, [r0, #16]
    29b8:	cmp	r2, #0
    29ba:	bne.n	2a56 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x2ba>
    29bc:	ldr.w	sl, [r9, #16]
    29c0:	cmp.w	sl, #0
    29c4:	beq.n	2a56 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x2ba>
    29c6:	ldr.w	r2, [sl]
    29ca:	ldr	r2, [r2, #32]
    29cc:	cmp	r2, r1
    29ce:	bne.w	2be2 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x446>
    29d2:	ldr.w	r0, [sl, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    29d6:	str.w	lr, [sl]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    29da:	cmp	r0, #0
    29dc:	beq.n	2a4e <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x2b2>
    29de:	ldr	r2, [r0, #16]
    29e0:	subs	r2, #1
    29e2:	str	r2, [r0, #16]
    29e4:	cmp	r2, #0
    29e6:	bne.n	2a4e <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x2b2>
    29e8:	ldr.w	fp, [sl, #16]
    29ec:	cmp.w	fp, #0
    29f0:	beq.n	2a4e <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x2b2>
    29f2:	ldr.w	r2, [fp]
    29f6:	ldr	r2, [r2, #32]
    29f8:	cmp	r2, r1
    29fa:	bne.w	2bf6 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x45a>
    29fe:	ldr.w	r2, [fp, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    2a02:	str.w	r3, [fp]
    2a06:	ldr	r0, [pc, #484]	; (2bec <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x450>)
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    2a08:	cbz	r2, 2a46 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x2aa>
    2a0a:	ldr	r3, [r2, #16]
    2a0c:	subs	r3, #1
    2a0e:	str	r3, [r2, #16]
    2a10:	cbnz	r3, 2a46 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x2aa>
    2a12:	ldr.w	r2, [fp, #16]
    2a16:	cbz	r2, 2a46 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x2aa>
    2a18:	ldr	r3, [r2, #0]
    2a1a:	ldr	r3, [r3, #32]
    2a1c:	cmp	r3, r1
    2a1e:	bne.w	2c02 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x466>
    2a22:	ldr	r1, [r2, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    2a24:	str	r0, [r2, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    2a26:	cbz	r1, 2a3e <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x2a2>
    2a28:	ldr	r3, [r1, #16]
    2a2a:	subs	r3, #1
    2a2c:	str	r3, [r1, #16]
    2a2e:	cbnz	r3, 2a3e <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x2a2>
    2a30:	ldr	r0, [r2, #16]
    2a32:	cbz	r0, 2a3e <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x2a2>
    2a34:	ldr	r3, [r0, #0]
    2a36:	str	r2, [sp, #4]
    2a38:	ldr	r3, [r3, #32]
    2a3a:	blx	r3
    2a3c:	ldr	r2, [sp, #4]
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
		invalidate();
	}
    2a3e:	mov	r0, r2
    2a40:	movs	r1, #20
    2a42:	bl	f6e0 <operator delete(void*, unsigned int)>
    2a46:	mov	r0, fp
    2a48:	movs	r1, #20
    2a4a:	bl	f6e0 <operator delete(void*, unsigned int)>
    2a4e:	mov	r0, sl
    2a50:	movs	r1, #20
    2a52:	bl	f6e0 <operator delete(void*, unsigned int)>
    2a56:	mov	r0, r9
    2a58:	movs	r1, #20
    2a5a:	bl	f6e0 <operator delete(void*, unsigned int)>
    2a5e:	mov	r0, r8
    2a60:	movs	r1, #20
    2a62:	bl	f6e0 <operator delete(void*, unsigned int)>
    2a66:	mov	r0, r7
    2a68:	movs	r1, #20
    2a6a:	bl	f6e0 <operator delete(void*, unsigned int)>
    2a6e:	b.n	28f8 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x15c>
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    2a70:	ldr	r7, [sp, #28]
    2a72:	cmp	r7, #0
    2a74:	beq.w	291a <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x17e>
    2a78:	ldr	r2, [r7, #0]
    2a7a:	ldr	r1, [pc, #364]	; (2be8 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x44c>)
    2a7c:	ldr	r2, [r2, #32]
    2a7e:	cmp	r2, r1
    2a80:	bne.w	2bbe <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x422>
    2a84:	ldr	r0, [r7, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    2a86:	str	r3, [r7, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    2a88:	cmp	r0, #0
    2a8a:	beq.w	2b96 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x3fa>
    2a8e:	ldr	r2, [r0, #16]
    2a90:	subs	r2, #1
    2a92:	str	r2, [r0, #16]
    2a94:	cmp	r2, #0
    2a96:	bne.n	2b96 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x3fa>
    2a98:	ldr.w	r8, [r7, #16]
    2a9c:	cmp.w	r8, #0
    2aa0:	beq.n	2b96 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x3fa>
    2aa2:	ldr.w	r2, [r8]
    2aa6:	ldr	r2, [r2, #32]
    2aa8:	cmp	r2, r1
    2aaa:	bne.w	2bd0 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x434>
    2aae:	ldr.w	r0, [r8, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    2ab2:	str.w	r3, [r8]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    2ab6:	cmp	r0, #0
    2ab8:	beq.n	2b8e <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x3f2>
    2aba:	ldr	r2, [r0, #16]
    2abc:	subs	r2, #1
    2abe:	str	r2, [r0, #16]
    2ac0:	cmp	r2, #0
    2ac2:	bne.n	2b8e <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x3f2>
    2ac4:	ldr.w	r9, [r8, #16]
    2ac8:	cmp.w	r9, #0
    2acc:	beq.n	2b8e <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x3f2>
    2ace:	ldr.w	r2, [r9]
    2ad2:	ldr	r2, [r2, #32]
    2ad4:	cmp	r2, r1
    2ad6:	bne.n	2bc4 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x428>
    2ad8:	ldr.w	r0, [r9, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    2adc:	str.w	r3, [r9]
    2ae0:	ldr.w	lr, [pc, #264]	; 2bec <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x450>
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    2ae4:	cmp	r0, #0
    2ae6:	beq.n	2b86 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x3ea>
    2ae8:	ldr	r2, [r0, #16]
    2aea:	subs	r2, #1
    2aec:	str	r2, [r0, #16]
    2aee:	cmp	r2, #0
    2af0:	bne.n	2b86 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x3ea>
    2af2:	ldr.w	sl, [r9, #16]
    2af6:	cmp.w	sl, #0
    2afa:	beq.n	2b86 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x3ea>
    2afc:	ldr.w	r2, [sl]
    2b00:	ldr	r2, [r2, #32]
    2b02:	cmp	r2, r1
    2b04:	bne.n	2bdc <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x440>
    2b06:	ldr.w	r0, [sl, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    2b0a:	str.w	lr, [sl]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    2b0e:	cmp	r0, #0
    2b10:	beq.n	2b7e <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x3e2>
    2b12:	ldr	r2, [r0, #16]
    2b14:	subs	r2, #1
    2b16:	str	r2, [r0, #16]
    2b18:	cmp	r2, #0
    2b1a:	bne.n	2b7e <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x3e2>
    2b1c:	ldr.w	fp, [sl, #16]
    2b20:	cmp.w	fp, #0
    2b24:	beq.n	2b7e <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x3e2>
    2b26:	ldr.w	r2, [fp]
    2b2a:	ldr	r2, [r2, #32]
    2b2c:	cmp	r2, r1
    2b2e:	bne.n	2bf0 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x454>
    2b30:	ldr.w	r2, [fp, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    2b34:	str.w	r3, [fp]
    2b38:	ldr	r0, [pc, #176]	; (2bec <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x450>)
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    2b3a:	cbz	r2, 2b76 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x3da>
    2b3c:	ldr	r3, [r2, #16]
    2b3e:	subs	r3, #1
    2b40:	str	r3, [r2, #16]
    2b42:	cbnz	r3, 2b76 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x3da>
    2b44:	ldr.w	r2, [fp, #16]
    2b48:	cbz	r2, 2b76 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x3da>
    2b4a:	ldr	r3, [r2, #0]
    2b4c:	ldr	r3, [r3, #32]
    2b4e:	cmp	r3, r1
    2b50:	bne.n	2bfc <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x460>
    2b52:	ldr	r1, [r2, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    2b54:	str	r0, [r2, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    2b56:	cbz	r1, 2b6e <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x3d2>
    2b58:	ldr	r3, [r1, #16]
    2b5a:	subs	r3, #1
    2b5c:	str	r3, [r1, #16]
    2b5e:	cbnz	r3, 2b6e <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x3d2>
    2b60:	ldr	r0, [r2, #16]
    2b62:	cbz	r0, 2b6e <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x3d2>
    2b64:	ldr	r3, [r0, #0]
    2b66:	str	r2, [sp, #4]
    2b68:	ldr	r3, [r3, #32]
    2b6a:	blx	r3
    2b6c:	ldr	r2, [sp, #4]
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
		invalidate();
	}
    2b6e:	mov	r0, r2
    2b70:	movs	r1, #20
    2b72:	bl	f6e0 <operator delete(void*, unsigned int)>
    2b76:	mov	r0, fp
    2b78:	movs	r1, #20
    2b7a:	bl	f6e0 <operator delete(void*, unsigned int)>
    2b7e:	mov	r0, sl
    2b80:	movs	r1, #20
    2b82:	bl	f6e0 <operator delete(void*, unsigned int)>
    2b86:	mov	r0, r9
    2b88:	movs	r1, #20
    2b8a:	bl	f6e0 <operator delete(void*, unsigned int)>
    2b8e:	mov	r0, r8
    2b90:	movs	r1, #20
    2b92:	bl	f6e0 <operator delete(void*, unsigned int)>
    2b96:	mov	r0, r7
    2b98:	movs	r1, #20
    2b9a:	bl	f6e0 <operator delete(void*, unsigned int)>
    2b9e:	b.n	291a <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x17e>
    }
  }

  void MTPStorage_SD::OpenFileByIndex(uint32_t i, uint32_t mode) 
  {
    if (open_file_ == i && mode_ == mode) return;
    2ba0:	ldr.w	r3, [r0, #236]	; 0xec
    2ba4:	cmp	r3, r2
    2ba6:	bne.w	27ac <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x10>
    if(sd_isOpen(file_)) file_.close();
    file_=sd_open(store,filename,mode);
    open_file_ = i;
    mode_ = mode;
    mtp_lock_storage(false);
  }
    2baa:	add	sp, #292	; 0x124
    2bac:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	}
	virtual void close() {
		if (f) f->close();
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
    2bb0:	blx	r2
    2bb2:	b.n	2860 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0xc4>
	}
	virtual uint64_t size() {
		return (f) ? f->size() : 0;
	}
	virtual void close() {
		if (f) f->close();
    2bb4:	blx	r2
    2bb6:	b.n	28d8 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x13c>
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    2bb8:	mov	r0, r7
    2bba:	blx	r3
    2bbc:	b.n	28f8 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x15c>
    2bbe:	mov	r0, r7
    2bc0:	blx	r2
    2bc2:	b.n	291a <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x17e>
    2bc4:	mov	r0, r9
    2bc6:	blx	r2
    2bc8:	b.n	2b8e <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x3f2>
    2bca:	mov	r0, r9
    2bcc:	blx	r2
    2bce:	b.n	2a5e <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x2c2>
    2bd0:	mov	r0, r8
    2bd2:	blx	r2
    2bd4:	b.n	2b96 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x3fa>
    2bd6:	mov	r0, r8
    2bd8:	blx	r2
    2bda:	b.n	2a66 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x2ca>
    2bdc:	mov	r0, sl
    2bde:	blx	r2
    2be0:	b.n	2b86 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x3ea>
    2be2:	mov	r0, sl
    2be4:	blx	r2
    2be6:	b.n	2a56 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x2ba>
    2be8:	.word	0x00000d69
    2bec:	.word	0x20000074
    2bf0:	mov	r0, fp
    2bf2:	blx	r2
    2bf4:	b.n	2b7e <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x3e2>
    2bf6:	mov	r0, fp
    2bf8:	blx	r2
    2bfa:	b.n	2a4e <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x2b2>
    2bfc:	mov	r0, r2
    2bfe:	blx	r3
    2c00:	b.n	2b76 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x3da>
    2c02:	mov	r0, r2
    2c04:	blx	r3
    2c06:	b.n	2a46 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x2aa>

00002c08 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)>:
  {
    return ReadIndexRecord(handle).child;
  }

  void MTPStorage_SD::read(uint32_t handle, uint32_t pos, char* out, uint32_t bytes)
  {
    2c08:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2c0c:	mov	r5, r0
    2c0e:	sub	sp, #8
    2c10:	mov	r7, r2
    OpenFileByIndex(handle);
    2c12:	movs	r2, #0
  {
    return ReadIndexRecord(handle).child;
  }

  void MTPStorage_SD::read(uint32_t handle, uint32_t pos, char* out, uint32_t bytes)
  {
    2c14:	mov	r8, r3
    2c16:	ldr.w	r9, [sp, #40]	; 0x28
    OpenFileByIndex(handle);
    2c1a:	bl	279c <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)>
	}
	virtual bool truncate(uint64_t size=0) {
		return (f) ? f->truncate(size) : false;
	}
	virtual bool seek(uint64_t pos, int mode) {
		return (f) ? f->seek(pos, mode) : false;
    2c1e:	ldr.w	r4, [r5, #204]	; 0xcc
    2c22:	cmp	r4, #0
    2c24:	beq.n	2cfa <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0xf2>
    2c26:	ldr	r0, [r4, #0]
    2c28:	movs	r3, #0
    2c2a:	ldr	r2, [pc, #308]	; (2d60 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x158>)
    2c2c:	ldr	r6, [r0, #52]	; 0x34
    2c2e:	cmp	r6, r2
    2c30:	bne.n	2d2a <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x122>
    2c32:	ldr	r1, [r4, #16]
    2c34:	cmp	r1, #0
    2c36:	beq.n	2cf2 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0xea>
    2c38:	ldr	r2, [r1, #0]
    2c3a:	ldr.w	sl, [r2, #52]	; 0x34
    2c3e:	cmp	sl, r6
    2c40:	bne.n	2d34 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x12c>
    2c42:	ldr.w	lr, [r1, #16]
    2c46:	cmp.w	lr, #0
    2c4a:	beq.n	2d00 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0xf8>
    2c4c:	ldr.w	r2, [lr]
    2c50:	ldr	r6, [r2, #52]	; 0x34
    2c52:	cmp	r6, sl
    2c54:	bne.n	2d3e <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x136>
    2c56:	ldr.w	lr, [lr, #16]
    2c5a:	cmp.w	lr, #0
    2c5e:	beq.n	2d00 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0xf8>
    2c60:	ldr.w	r2, [lr]
    2c64:	ldr.w	sl, [r2, #52]	; 0x34
    2c68:	cmp	sl, r6
    2c6a:	bne.n	2d48 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x140>
    2c6c:	ldr.w	lr, [lr, #16]
    2c70:	cmp.w	lr, #0
    2c74:	beq.n	2d00 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0xf8>
    2c76:	ldr.w	r3, [lr]
    2c7a:	ldr	r6, [r3, #52]	; 0x34
    2c7c:	cmp	r6, sl
    2c7e:	bne.n	2d52 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x14a>
    2c80:	ldr.w	r6, [lr, #16]
    2c84:	cmp	r6, #0
    2c86:	beq.n	2d00 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0xf8>
    2c88:	ldr	r1, [r6, #0]
    2c8a:	movs	r3, #0
    2c8c:	mov	r2, r7
    2c8e:	mov	r0, r6
    2c90:	str	r3, [sp, #0]
    2c92:	ldr	r1, [r1, #52]	; 0x34
    2c94:	blx	r1
	unsigned int getRefcount() { // testing only
		return refcount;
	}
#endif
	virtual size_t read(void *buf, size_t nbyte) {
		return (f) ? f->read(buf, nbyte) : 0;
    2c96:	ldr.w	r4, [r5, #204]	; 0xcc
    2c9a:	cmp	r4, #0
    2c9c:	beq.n	2cfa <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0xf2>
    2c9e:	ldr	r2, [r4, #0]
    2ca0:	ldr	r3, [pc, #192]	; (2d64 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x15c>)
    2ca2:	ldr	r5, [r2, #40]	; 0x28
    2ca4:	cmp	r5, r3
    2ca6:	bne.n	2d0c <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x104>
    2ca8:	ldr	r0, [r4, #16]
    2caa:	cbz	r0, 2cfa <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0xf2>
    2cac:	ldr	r2, [r0, #0]
    2cae:	ldr	r4, [r2, #40]	; 0x28
    2cb0:	cmp	r4, r3
    2cb2:	bne.n	2d1c <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x114>
    2cb4:	ldr	r0, [r0, #16]
    2cb6:	cbz	r0, 2cfa <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0xf2>
    2cb8:	ldr	r2, [r0, #0]
    2cba:	ldr	r4, [r2, #40]	; 0x28
    2cbc:	cmp	r4, r3
    2cbe:	bne.n	2d1c <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x114>
    2cc0:	ldr	r0, [r0, #16]
    2cc2:	cbz	r0, 2cfa <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0xf2>
    2cc4:	ldr	r2, [r0, #0]
    2cc6:	ldr	r4, [r2, #40]	; 0x28
    2cc8:	cmp	r4, r3
    2cca:	bne.n	2d1c <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x114>
    2ccc:	ldr	r0, [r0, #16]
    2cce:	cbz	r0, 2cfa <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0xf2>
    2cd0:	ldr	r2, [r0, #0]
    2cd2:	ldr	r4, [r2, #40]	; 0x28
    2cd4:	cmp	r4, r3
    2cd6:	bne.n	2d1c <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x114>
    2cd8:	ldr	r0, [r0, #16]
    2cda:	cbz	r0, 2cfa <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0xf2>
    2cdc:	ldr	r2, [r0, #0]
    2cde:	ldr	r4, [r2, #40]	; 0x28
    2ce0:	cmp	r4, r3
    2ce2:	bne.n	2d1c <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x114>
    2ce4:	ldr	r0, [r0, #16]
    2ce6:	cbz	r0, 2cfa <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0xf2>
    2ce8:	ldr	r3, [r0, #0]
    2cea:	mov	r2, r9
    2cec:	mov	r1, r8
    2cee:	ldr	r3, [r3, #40]	; 0x28
    2cf0:	b.n	2d14 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x10c>
    2cf2:	ldr	r5, [r0, #40]	; 0x28
    2cf4:	ldr	r3, [pc, #108]	; (2d64 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x15c>)
    2cf6:	cmp	r5, r3
    2cf8:	bne.n	2d0c <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x104>
    mtp_lock_storage(true);
    file_.seek(pos);
    file_.read(out,bytes);
    mtp_lock_storage(false);
  }
    2cfa:	add	sp, #8
    2cfc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2d00:	ldr	r5, [r0, #40]	; 0x28
    2d02:	ldr	r3, [pc, #96]	; (2d64 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x15c>)
    2d04:	cmp	r5, r3
    2d06:	bne.n	2d0c <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x104>
    2d08:	mov	r0, r1
    2d0a:	b.n	2cac <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0xa4>
    2d0c:	mov	r2, r9
    2d0e:	mov	r1, r8
    2d10:	mov	r0, r4
    2d12:	mov	r3, r5
    2d14:	add	sp, #8
    2d16:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2d1a:	bx	r3
    2d1c:	mov	r2, r9
    2d1e:	mov	r1, r8
    2d20:	mov	r3, r4
    2d22:	add	sp, #8
    2d24:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2d28:	bx	r3
	}
	virtual bool truncate(uint64_t size=0) {
		return (f) ? f->truncate(size) : false;
	}
	virtual bool seek(uint64_t pos, int mode) {
		return (f) ? f->seek(pos, mode) : false;
    2d2a:	str	r3, [sp, #0]
    2d2c:	mov	r2, r7
    2d2e:	mov	r0, r4
    2d30:	blx	r6
    2d32:	b.n	2c96 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x8e>
    2d34:	str	r3, [sp, #0]
    2d36:	mov	r2, r7
    2d38:	mov	r0, r1
    2d3a:	blx	sl
    2d3c:	b.n	2c96 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x8e>
    2d3e:	str	r3, [sp, #0]
    2d40:	mov	r2, r7
    2d42:	mov	r0, lr
    2d44:	blx	r6
    2d46:	b.n	2c96 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x8e>
    2d48:	str	r3, [sp, #0]
    2d4a:	mov	r2, r7
    2d4c:	mov	r0, lr
    2d4e:	blx	sl
    2d50:	b.n	2c96 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x8e>
    2d52:	movs	r3, #0
    2d54:	mov	r2, r7
    2d56:	mov	r0, lr
    2d58:	str	r3, [sp, #0]
    2d5a:	blx	r6
    2d5c:	b.n	2c96 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x8e>
    2d5e:	nop
    2d60:	.word	0x000000d9
    2d64:	.word	0x0000008d

00002d68 <MTPStorage_SD::Create(unsigned long, unsigned long, bool, char const*)>:
    }
    return 1;
  }

  uint32_t MTPStorage_SD::Create(uint32_t store, uint32_t parent,  bool folder, const char* filename)
  {
    2d68:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    uint32_t ret;
    if (parent == 0xFFFFFFFFUL) parent = store;
    2d6c:	cmp.w	r2, #4294967295
    2d70:	ite	ne
    2d72:	movne	r6, r2
    2d74:	moveq	r6, r1
    }
    return 1;
  }

  uint32_t MTPStorage_SD::Create(uint32_t store, uint32_t parent,  bool folder, const char* filename)
  {
    2d76:	sub.w	sp, sp, #800	; 0x320
    2d7a:	mov	r4, r0
    2d7c:	mov	r7, r1
    uint32_t ret;
    if (parent == 0xFFFFFFFFUL) parent = store;
    Record p = ReadIndexRecord(parent);
    2d7e:	mov	r2, r6
    2d80:	mov	r1, r0
    2d82:	add	r0, sp, #256	; 0x100
    }
    return 1;
  }

  uint32_t MTPStorage_SD::Create(uint32_t store, uint32_t parent,  bool folder, const char* filename)
  {
    2d84:	mov	r8, r3
    uint32_t ret;
    if (parent == 0xFFFFFFFFUL) parent = store;
    Record p = ReadIndexRecord(parent);
    2d86:	bl	2228 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    Record r;
    strlcpy(r.name, filename,MAX_FILENAME_LEN);
    2d8a:	ldr	r1, [sp, #824]	; 0x338
    2d8c:	mov.w	r2, #256	; 0x100
    2d90:	add	r0, sp, #544	; 0x220
    2d92:	bl	11380 <strlcpy>
    index_.write((char*)&r, sizeof(r));
    mtp_lock_storage(false);
  }

  uint32_t MTPStorage_SD::AppendIndexRecord(const Record& r) 
  { uint32_t new_record = index_entries_++;
    2d96:	ldr.w	r5, [r4, #244]	; 0xf4
    Record r;
    strlcpy(r.name, filename,MAX_FILENAME_LEN);
    r.store = p.store;
    r.parent = parent;
    r.child = 0;
    r.sibling = p.child;
    2d9a:	ldr	r0, [sp, #260]	; 0x104
    Record p = ReadIndexRecord(parent);
    Record r;
    strlcpy(r.name, filename,MAX_FILENAME_LEN);
    r.store = p.store;
    r.parent = parent;
    r.child = 0;
    2d9c:	movs	r2, #0
    index_.write((char*)&r, sizeof(r));
    mtp_lock_storage(false);
  }

  uint32_t MTPStorage_SD::AppendIndexRecord(const Record& r) 
  { uint32_t new_record = index_entries_++;
    2d9e:	adds	r3, r5, #1
    uint32_t ret;
    if (parent == 0xFFFFFFFFUL) parent = store;
    Record p = ReadIndexRecord(parent);
    Record r;
    strlcpy(r.name, filename,MAX_FILENAME_LEN);
    r.store = p.store;
    2da0:	ldrh.w	lr, [sp, #270]	; 0x10e
    mtp_lock_storage(false);
  }

  uint32_t MTPStorage_SD::AppendIndexRecord(const Record& r) 
  { uint32_t new_record = index_entries_++;
    WriteIndexRecord(new_record, r);
    2da4:	mov	r1, r5
    Record p = ReadIndexRecord(parent);
    Record r;
    strlcpy(r.name, filename,MAX_FILENAME_LEN);
    r.store = p.store;
    r.parent = parent;
    r.child = 0;
    2da6:	str	r2, [sp, #532]	; 0x214
    index_.write((char*)&r, sizeof(r));
    mtp_lock_storage(false);
  }

  uint32_t MTPStorage_SD::AppendIndexRecord(const Record& r) 
  { uint32_t new_record = index_entries_++;
    2da8:	str.w	r3, [r4, #244]	; 0xf4
    r.parent = parent;
    r.child = 0;
    r.sibling = p.child;
    r.isdir = folder;
    // New folder is empty, scanned = true.
    r.scanned = 1;
    2dac:	movs	r3, #1
    mtp_lock_storage(false);
  }

  uint32_t MTPStorage_SD::AppendIndexRecord(const Record& r) 
  { uint32_t new_record = index_entries_++;
    WriteIndexRecord(new_record, r);
    2dae:	add	r2, sp, #528	; 0x210
    Record r;
    strlcpy(r.name, filename,MAX_FILENAME_LEN);
    r.store = p.store;
    r.parent = parent;
    r.child = 0;
    r.sibling = p.child;
    2db0:	str	r0, [sp, #536]	; 0x218
    mtp_lock_storage(false);
  }

  uint32_t MTPStorage_SD::AppendIndexRecord(const Record& r) 
  { uint32_t new_record = index_entries_++;
    WriteIndexRecord(new_record, r);
    2db2:	mov	r0, r4
    if (parent == 0xFFFFFFFFUL) parent = store;
    Record p = ReadIndexRecord(parent);
    Record r;
    strlcpy(r.name, filename,MAX_FILENAME_LEN);
    r.store = p.store;
    r.parent = parent;
    2db4:	str	r6, [sp, #528]	; 0x210
    r.child = 0;
    r.sibling = p.child;
    r.isdir = folder;
    2db6:	strb.w	r8, [sp, #540]	; 0x21c
    uint32_t ret;
    if (parent == 0xFFFFFFFFUL) parent = store;
    Record p = ReadIndexRecord(parent);
    Record r;
    strlcpy(r.name, filename,MAX_FILENAME_LEN);
    r.store = p.store;
    2dba:	strh.w	lr, [sp, #542]	; 0x21e
    r.parent = parent;
    r.child = 0;
    r.sibling = p.child;
    r.isdir = folder;
    // New folder is empty, scanned = true.
    r.scanned = 1;
    2dbe:	strb.w	r3, [sp, #541]	; 0x21d
    mtp_lock_storage(false);
  }

  uint32_t MTPStorage_SD::AppendIndexRecord(const Record& r) 
  { uint32_t new_record = index_entries_++;
    WriteIndexRecord(new_record, r);
    2dc2:	bl	2058 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    r.sibling = p.child;
    r.isdir = folder;
    // New folder is empty, scanned = true.
    r.scanned = 1;
    ret = p.child = AppendIndexRecord(r);
    WriteIndexRecord(parent, p);
    2dc6:	mov	r1, r6
    2dc8:	add	r2, sp, #256	; 0x100
    2dca:	mov	r0, r4
    r.child = 0;
    r.sibling = p.child;
    r.isdir = folder;
    // New folder is empty, scanned = true.
    r.scanned = 1;
    ret = p.child = AppendIndexRecord(r);
    2dcc:	str	r5, [sp, #260]	; 0x104
    WriteIndexRecord(parent, p);
    2dce:	bl	2058 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    if (folder) 
    2dd2:	cmp.w	r8, #0
    2dd6:	bne.n	2dec <MTPStorage_SD::Create(unsigned long, unsigned long, bool, char const*)+0x84>
      sd_mkdir(store,filename);
      mtp_lock_storage(false);
    } 
    else 
    {
      OpenFileByIndex(ret, FILE_WRITE_BEGIN);
    2dd8:	mov	r0, r4
    2dda:	movs	r2, #2
    2ddc:	mov	r1, r5
    2dde:	bl	279c <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)>
      Serial.print(store); Serial.print(" "); 
      Serial.print(parent); Serial.print(" "); 
      Serial.println(filename);
    #endif
    return ret;
  }
    2de2:	mov	r0, r5
    2de4:	add.w	sp, sp, #800	; 0x320
    2de8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = p.child = AppendIndexRecord(r);
    WriteIndexRecord(parent, p);
    if (folder) 
    {
      char filename[MAX_FILENAME_LEN];
      ConstructFilename(ret, filename, MAX_FILENAME_LEN);
    2dec:	mov	r0, r4
    bool sd_mkdir(uint32_t store, char *filename) {  return sdx[store]->mkdir(filename);  }
    2dee:	add.w	r4, r4, r7, lsl #2
    2df2:	mov	r1, r5
    2df4:	mov	r2, sp
    2df6:	mov.w	r3, #256	; 0x100
    2dfa:	bl	2688 <MTPStorage_SD::ConstructFilename(int, char*, int)>
    2dfe:	ldr	r0, [r4, #88]	; 0x58
    2e00:	mov	r1, sp
    2e02:	ldr	r3, [r0, #0]
    2e04:	ldr	r3, [r3, #8]
    2e06:	blx	r3
      Serial.print(store); Serial.print(" "); 
      Serial.print(parent); Serial.print(" "); 
      Serial.println(filename);
    #endif
    return ret;
  }
    2e08:	mov	r0, r5
    2e0a:	add.w	sp, sp, #800	; 0x320
    2e0e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2e12:	nop

00002e14 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)>:
      AppendIndexRecord(r);
    }
  }

  void MTPStorage_SD::ScanDir(uint32_t store, uint32_t i) 
  { if (i == 0xFFFFFFFFUL) i = store;
    2e14:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2e18:	cmp.w	r2, #4294967295
    2e1c:	ite	ne
    2e1e:	movne	r5, r2
    2e20:	moveq	r5, r1
    2e22:	sub.w	sp, sp, #564	; 0x234
    
    Record record = ReadIndexRecord(i);
    2e26:	mov	r1, r0
      AppendIndexRecord(r);
    }
  }

  void MTPStorage_SD::ScanDir(uint32_t store, uint32_t i) 
  { if (i == 0xFFFFFFFFUL) i = store;
    2e28:	mov	r4, r0
    
    Record record = ReadIndexRecord(i);
    2e2a:	mov	r2, r5
    2e2c:	add	r0, sp, #16
    2e2e:	bl	2228 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    if (record.isdir && !record.scanned) {
    2e32:	ldrb.w	r3, [sp, #28]
    2e36:	cbz	r3, 2e3e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x2a>
    2e38:	ldrb.w	r2, [sp, #29]
    2e3c:	cbz	r2, 2e46 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x32>
      }
      record.scanned = true;
      record.child = sibling;
      WriteIndexRecord(i, record);
    }
  }
    2e3e:	add.w	sp, sp, #564	; 0x234
    2e42:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  void MTPStorage_SD::ScanDir(uint32_t store, uint32_t i) 
  { if (i == 0xFFFFFFFFUL) i = store;
    
    Record record = ReadIndexRecord(i);
    if (record.isdir && !record.scanned) {
      OpenFileByIndex(i);
    2e46:	mov	r0, r4
    2e48:	mov	r1, r5
    2e4a:	bl	279c <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)>
	}
	virtual void close() {
		if (f) f->close();
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
    2e4e:	ldr.w	r0, [r4, #204]	; 0xcc
    2e52:	cmp	r0, #0
    2e54:	beq.n	2e3e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x2a>
    2e56:	ldr	r3, [r0, #0]
    2e58:	ldr	r7, [pc, #200]	; (2f24 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x110>)
    2e5a:	ldr	r3, [r3, #68]	; 0x44
    2e5c:	cmp	r3, r7
    2e5e:	bne.n	2f1e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x10a>
    2e60:	ldr	r0, [r0, #16]
    2e62:	cmp	r0, #0
    2e64:	beq.n	2e3e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x2a>
    2e66:	ldr	r3, [r0, #0]
    2e68:	ldr	r3, [r3, #68]	; 0x44
    2e6a:	cmp	r3, r7
    2e6c:	bne.n	2f1e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x10a>
    2e6e:	ldr	r0, [r0, #16]
    2e70:	cmp	r0, #0
    2e72:	beq.n	2e3e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x2a>
    2e74:	ldr	r3, [r0, #0]
    2e76:	ldr	r3, [r3, #68]	; 0x44
    2e78:	cmp	r3, r7
    2e7a:	bne.n	2f1e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x10a>
    2e7c:	ldr	r0, [r0, #16]
    2e7e:	cmp	r0, #0
    2e80:	beq.n	2e3e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x2a>
    2e82:	ldr	r3, [r0, #0]
    2e84:	ldr	r3, [r3, #68]	; 0x44
    2e86:	cmp	r3, r7
    2e88:	bne.n	2f1e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x10a>
    2e8a:	ldr	r0, [r0, #16]
    2e8c:	cmp	r0, #0
    2e8e:	beq.n	2e3e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x2a>
    2e90:	ldr	r3, [r0, #0]
    2e92:	ldr	r3, [r3, #68]	; 0x44
    2e94:	cmp	r3, r7
    2e96:	bne.n	2f1e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x10a>
    2e98:	ldr	r0, [r0, #16]
    2e9a:	cmp	r0, #0
    2e9c:	beq.n	2e3e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x2a>
    2e9e:	ldr	r3, [r0, #0]
    2ea0:	ldr	r3, [r3, #68]	; 0x44
    2ea2:	blx	r3
      if (!sd_isOpen(file_)) return;
    2ea4:	cmp	r0, #0
    2ea6:	beq.n	2e3e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x2a>
			//"File(File *file) constructor only accepts pointers "
			//"to derived classes, not File itself");
		f = file;
		if (f) f->refcount++;
	}
	File(const File &file) {
    2ea8:	ldr.w	r9, [pc, #124]	; 2f28 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x114>
    2eac:	mov.w	r8, #0
    2eb0:	ldr.w	fp, [pc, #120]	; 2f2c <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x118>
	}
	virtual bool isDirectory() {
		return (f) ? f->isDirectory() : false;
	}
	virtual File openNextFile(uint8_t mode=0) {
		return (f) ? f->openNextFile(mode) : *this;
    2eb4:	ldr.w	r1, [r4, #204]	; 0xcc
    2eb8:	cmp	r1, #0
    2eba:	beq.n	2f30 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x11c>
    2ebc:	ldr	r3, [r1, #0]
    2ebe:	ldr	r3, [r3, #80]	; 0x50
    2ec0:	cmp	r3, fp
    2ec2:	bne.w	33e2 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5ce>
    2ec6:	ldr	r1, [r1, #16]
    2ec8:	cmp	r1, #0
    2eca:	beq.n	2f30 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x11c>
    2ecc:	ldr	r3, [r1, #0]
    2ece:	ldr	r3, [r3, #80]	; 0x50
    2ed0:	cmp	r3, fp
    2ed2:	bne.w	33e2 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5ce>
    2ed6:	ldr	r1, [r1, #16]
    2ed8:	cbz	r1, 2f30 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x11c>
    2eda:	ldr	r3, [r1, #0]
    2edc:	ldr	r3, [r3, #80]	; 0x50
    2ede:	cmp	r3, fp
    2ee0:	bne.w	33e2 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5ce>
    2ee4:	ldr	r1, [r1, #16]
    2ee6:	cbz	r1, 2f30 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x11c>
    2ee8:	ldr	r3, [r1, #0]
    2eea:	ldr	r3, [r3, #80]	; 0x50
    2eec:	cmp	r3, fp
    2eee:	bne.w	33e2 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5ce>
    2ef2:	ldr	r1, [r1, #16]
    2ef4:	cbz	r1, 2f30 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x11c>
    2ef6:	ldr	r3, [r1, #0]
    2ef8:	ldr	r3, [r3, #80]	; 0x50
    2efa:	cmp	r3, fp
    2efc:	bne.w	33e2 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5ce>
    2f00:	ldr	r1, [r1, #16]
    2f02:	cbz	r1, 2f30 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x11c>
    2f04:	ldr	r3, [r1, #0]
    2f06:	ldr	r3, [r3, #80]	; 0x50
    2f08:	cmp	r3, fp
    2f0a:	bne.w	33e2 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5ce>
    2f0e:	ldr	r1, [r1, #16]
    2f10:	cbz	r1, 2f30 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x11c>
    2f12:	ldr	r3, [r1, #0]
    2f14:	movs	r2, #0
    2f16:	add	r0, sp, #288	; 0x120
    2f18:	ldr	r3, [r3, #80]	; 0x50
    2f1a:	blx	r3
    2f1c:	b.n	2f46 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x132>
	}
	virtual void close() {
		if (f) f->close();
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
    2f1e:	blx	r3
    2f20:	b.n	2ea4 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x90>
    2f22:	nop
    2f24:	.word	0x0000011d
    2f28:	.word	0x20000074
    2f2c:	.word	0x00000149
class __FlashStringHelper;

class Print
{
  public:
	constexpr Print() : write_error(0) {}
    2f30:	movs	r3, #0
    2f32:	mov.w	r2, #1000	; 0x3e8
			//"File(File *file) constructor only accepts pointers "
			//"to derived classes, not File itself");
		f = file;
		if (f) f->refcount++;
	}
	File(const File &file) {
    2f36:	str.w	r9, [sp, #288]	; 0x120
    2f3a:	strb.w	r3, [sp, #292]	; 0x124
    2f3e:	strb.w	r3, [sp, #300]	; 0x12c
		//Serial.println("File copy constructor");
		//static int copycount=0;
		//if (++copycount > 20) while (1) ;
		f = file.f;
    2f42:	str	r3, [sp, #304]	; 0x130
    2f44:	str	r2, [sp, #296]	; 0x128
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    2f46:	ldr.w	r2, [r4, #224]	; 0xe0
    2f4a:	cmp	r2, #0
    2f4c:	beq.n	2fe2 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x1ce>
    2f4e:	ldr	r3, [r2, #16]
    2f50:	subs	r3, #1
    2f52:	str	r3, [r2, #16]
    2f54:	cmp	r3, #0
    2f56:	bne.n	2fe2 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x1ce>
    2f58:	ldr.w	r6, [r4, #224]	; 0xe0
    2f5c:	cmp	r6, #0
    2f5e:	beq.n	2fe2 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x1ce>
    2f60:	ldr	r3, [r6, #0]
    2f62:	ldr	r0, [pc, #636]	; (31e0 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3cc>)
    2f64:	ldr	r3, [r3, #32]
    2f66:	cmp	r3, r0
    2f68:	bne.w	3404 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5f0>
    2f6c:	ldr	r2, [r6, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    2f6e:	str.w	r9, [r6]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    2f72:	cbz	r2, 2fda <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x1c6>
    2f74:	ldr	r3, [r2, #16]
    2f76:	subs	r3, #1
    2f78:	str	r3, [r2, #16]
    2f7a:	cbnz	r3, 2fda <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x1c6>
    2f7c:	ldr.w	sl, [r6, #16]
    2f80:	cmp.w	sl, #0
    2f84:	beq.n	2fda <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x1c6>
    2f86:	ldr.w	r3, [sl]
    2f8a:	ldr	r3, [r3, #32]
    2f8c:	cmp	r3, r0
    2f8e:	bne.w	35d2 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x7be>
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    2f92:	ldr	r3, [pc, #592]	; (31e4 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3d0>)
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    2f94:	ldr.w	r2, [sl, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    2f98:	str.w	r3, [sl]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    2f9c:	cbz	r2, 2fd2 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x1be>
    2f9e:	ldr	r3, [r2, #16]
    2fa0:	subs	r3, #1
    2fa2:	str	r3, [r2, #16]
    2fa4:	cbnz	r3, 2fd2 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x1be>
    2fa6:	ldr.w	r3, [sl, #16]
    2faa:	cbz	r3, 2fd2 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x1be>
    2fac:	ldr	r2, [r3, #0]
    2fae:	ldr	r2, [r2, #32]
    2fb0:	cmp	r2, r0
    2fb2:	bne.w	35e4 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x7d0>
    2fb6:	ldr	r1, [r3, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    2fb8:	str.w	r9, [r3]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    2fbc:	cbz	r1, 2fca <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x1b6>
    2fbe:	ldr	r2, [r1, #16]
    2fc0:	subs	r2, #1
    2fc2:	str	r2, [r1, #16]
    2fc4:	cmp	r2, #0
    2fc6:	beq.w	341c <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x608>
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
		invalidate();
	}
    2fca:	mov	r0, r3
    2fcc:	movs	r1, #20
    2fce:	bl	f6e0 <operator delete(void*, unsigned int)>
    2fd2:	mov	r0, sl
    2fd4:	movs	r1, #20
    2fd6:	bl	f6e0 <operator delete(void*, unsigned int)>
    2fda:	mov	r0, r6
    2fdc:	movs	r1, #20
    2fde:	bl	f6e0 <operator delete(void*, unsigned int)>
	File& operator = (const File &file) {
		//Serial.println("File assignment");
		//static int assigncount=0;
		//if (++assigncount > 20) while (1) ;
		invalidate();
		f = file.f;
    2fe2:	ldr	r3, [sp, #304]	; 0x130
    2fe4:	str.w	r3, [r4, #224]	; 0xe0
		if (f) f->refcount++;
    2fe8:	cmp	r3, #0
    2fea:	beq.n	308e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x27a>
    2fec:	ldr	r2, [r3, #16]
    2fee:	adds	r2, #1
    2ff0:	str	r2, [r3, #16]
    2ff2:	ldr	r2, [sp, #304]	; 0x130
		return *this;
	}
	virtual ~File() {
    2ff4:	str.w	r9, [sp, #288]	; 0x120
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    2ff8:	cmp	r2, #0
    2ffa:	beq.n	308e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x27a>
    2ffc:	ldr	r3, [r2, #16]
    2ffe:	subs	r3, #1
    3000:	str	r3, [r2, #16]
    3002:	cmp	r3, #0
    3004:	bne.n	308e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x27a>
    3006:	ldr	r6, [sp, #304]	; 0x130
    3008:	cmp	r6, #0
    300a:	beq.n	308e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x27a>
    300c:	ldr	r3, [r6, #0]
    300e:	ldr	r0, [pc, #464]	; (31e0 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3cc>)
    3010:	ldr	r3, [r3, #32]
    3012:	cmp	r3, r0
    3014:	bne.w	33fe <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5ea>
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    3018:	ldr	r3, [pc, #456]	; (31e4 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3d0>)
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    301a:	ldr	r2, [r6, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    301c:	str	r3, [r6, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    301e:	cbz	r2, 3086 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x272>
    3020:	ldr	r3, [r2, #16]
    3022:	subs	r3, #1
    3024:	str	r3, [r2, #16]
    3026:	cbnz	r3, 3086 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x272>
    3028:	ldr.w	sl, [r6, #16]
    302c:	cmp.w	sl, #0
    3030:	beq.n	3086 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x272>
    3032:	ldr.w	r3, [sl]
    3036:	ldr	r3, [r3, #32]
    3038:	cmp	r3, r0
    303a:	bne.w	35d8 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x7c4>
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    303e:	ldr	r3, [pc, #420]	; (31e4 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3d0>)
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    3040:	ldr.w	r2, [sl, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    3044:	str.w	r3, [sl]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    3048:	cbz	r2, 307e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x26a>
    304a:	ldr	r3, [r2, #16]
    304c:	subs	r3, #1
    304e:	str	r3, [r2, #16]
    3050:	cbnz	r3, 307e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x26a>
    3052:	ldr.w	r3, [sl, #16]
    3056:	cbz	r3, 307e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x26a>
    3058:	ldr	r2, [r3, #0]
    305a:	ldr	r2, [r2, #32]
    305c:	cmp	r2, r0
    305e:	bne.w	35de <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x7ca>
    3062:	ldr	r1, [r3, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    3064:	str.w	r9, [r3]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    3068:	cbz	r1, 3076 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x262>
    306a:	ldr	r2, [r1, #16]
    306c:	subs	r2, #1
    306e:	str	r2, [r1, #16]
    3070:	cmp	r2, #0
    3072:	beq.w	34fa <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x6e6>
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
		invalidate();
	}
    3076:	mov	r0, r3
    3078:	movs	r1, #20
    307a:	bl	f6e0 <operator delete(void*, unsigned int)>
    307e:	mov	r0, sl
    3080:	movs	r1, #20
    3082:	bl	f6e0 <operator delete(void*, unsigned int)>
    3086:	mov	r0, r6
    3088:	movs	r1, #20
    308a:	bl	f6e0 <operator delete(void*, unsigned int)>
	}
	virtual void close() {
		if (f) f->close();
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
    308e:	ldr.w	r0, [r4, #224]	; 0xe0
    3092:	cmp	r0, #0
    3094:	beq.w	31c0 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3ac>
    3098:	ldr	r3, [r0, #0]
    309a:	ldr	r3, [r3, #68]	; 0x44
    309c:	cmp	r3, r7
    309e:	bne.w	31dc <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3c8>
    30a2:	ldr	r0, [r0, #16]
    30a4:	cmp	r0, #0
    30a6:	beq.w	31c0 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3ac>
    30aa:	ldr	r3, [r0, #0]
    30ac:	ldr	r3, [r3, #68]	; 0x44
    30ae:	cmp	r3, r7
    30b0:	bne.w	31dc <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3c8>
    30b4:	ldr	r0, [r0, #16]
    30b6:	cmp	r0, #0
    30b8:	beq.w	31c0 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3ac>
    30bc:	ldr	r3, [r0, #0]
    30be:	ldr	r3, [r3, #68]	; 0x44
    30c0:	cmp	r3, r7
    30c2:	bne.w	31dc <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3c8>
    30c6:	ldr	r0, [r0, #16]
    30c8:	cmp	r0, #0
    30ca:	beq.n	31c0 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3ac>
    30cc:	ldr	r3, [r0, #0]
    30ce:	ldr	r3, [r3, #68]	; 0x44
    30d0:	cmp	r3, r7
    30d2:	bne.w	31dc <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3c8>
    30d6:	ldr	r0, [r0, #16]
    30d8:	cmp	r0, #0
    30da:	beq.n	31c0 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3ac>
    30dc:	ldr	r3, [r0, #0]
    30de:	ldr	r3, [r3, #68]	; 0x44
    30e0:	cmp	r3, r7
    30e2:	bne.n	31dc <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3c8>
    30e4:	ldr	r0, [r0, #16]
    30e6:	cmp	r0, #0
    30e8:	beq.n	31c0 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3ac>
    30ea:	ldr	r3, [r0, #0]
    30ec:	ldr	r3, [r3, #68]	; 0x44
    30ee:	cmp	r3, r7
    30f0:	bne.n	31dc <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3c8>
    30f2:	ldr	r0, [r0, #16]
    30f4:	cmp	r0, #0
    30f6:	beq.n	31c0 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3ac>
    30f8:	ldr	r3, [r0, #0]
    30fa:	ldr	r3, [r3, #68]	; 0x44
    30fc:	cmp	r3, r7
    30fe:	bne.n	31dc <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3c8>
    3100:	ldr	r0, [r0, #16]
    3102:	cmp	r0, #0
    3104:	beq.n	31c0 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3ac>
    3106:	ldr	r3, [r0, #0]
    3108:	ldr	r3, [r3, #68]	; 0x44
    310a:	cmp	r3, r7
    310c:	bne.n	31dc <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3c8>
    310e:	ldr	r0, [r0, #16]
    3110:	cmp	r0, #0
    3112:	beq.n	31c0 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3ac>
    3114:	ldr	r3, [r0, #0]
    3116:	ldr	r3, [r3, #68]	; 0x44
    3118:	blx	r3
      int sibling = 0;
      while (true) 
      { mtp_lock_storage(true);
        child_=file_.openNextFile();
        mtp_lock_storage(false);
        if(!sd_isOpen(child_)) break;
    311a:	cmp	r0, #0
    311c:	beq.n	31c0 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3ac>

        Record r;
        r.store = record.store;
    311e:	ldrh.w	r2, [sp, #30]
	}
	virtual const char* name() {
		return (f) ? f->name() : "";
	}
	virtual bool isDirectory() {
		return (f) ? f->isDirectory() : false;
    3122:	ldr.w	r3, [r4, #224]	; 0xe0
        r.parent = i;
    3126:	str	r5, [sp, #288]	; 0x120
        r.sibling = sibling;
    3128:	str.w	r8, [sp, #296]	; 0x128
        child_=file_.openNextFile();
        mtp_lock_storage(false);
        if(!sd_isOpen(child_)) break;

        Record r;
        r.store = record.store;
    312c:	strh.w	r2, [sp, #302]	; 0x12e
    3130:	cmp	r3, #0
    3132:	beq.w	3356 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x542>
    3136:	ldr	r1, [r3, #0]
    3138:	ldr	r2, [pc, #172]	; (31e8 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3d4>)
    313a:	ldr	r1, [r1, #76]	; 0x4c
    313c:	cmp	r1, r2
    313e:	bne.n	31ec <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3d8>
    3140:	ldr	r0, [r3, #16]
    3142:	cmp	r0, #0
    3144:	beq.w	3356 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x542>
    3148:	ldr	r1, [r0, #0]
    314a:	ldr	r1, [r1, #76]	; 0x4c
    314c:	cmp	r1, r2
    314e:	bne.n	31ee <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3da>
    3150:	ldr	r0, [r0, #16]
    3152:	cmp	r0, #0
    3154:	beq.w	3356 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x542>
    3158:	ldr	r1, [r0, #0]
    315a:	ldr	r1, [r1, #76]	; 0x4c
    315c:	cmp	r1, r2
    315e:	bne.n	31ee <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3da>
    3160:	ldr	r0, [r0, #16]
    3162:	cmp	r0, #0
    3164:	beq.w	3356 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x542>
    3168:	ldr	r1, [r0, #0]
    316a:	ldr	r1, [r1, #76]	; 0x4c
    316c:	cmp	r1, r2
    316e:	bne.n	31ee <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3da>
    3170:	ldr	r0, [r0, #16]
    3172:	cmp	r0, #0
    3174:	beq.w	3356 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x542>
    3178:	ldr	r1, [r0, #0]
    317a:	ldr	r1, [r1, #76]	; 0x4c
    317c:	cmp	r1, r2
    317e:	bne.n	31ee <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3da>
    3180:	ldr	r0, [r0, #16]
    3182:	cmp	r0, #0
    3184:	beq.w	3356 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x542>
    3188:	ldr	r1, [r0, #0]
    318a:	ldr	r1, [r1, #76]	; 0x4c
    318c:	cmp	r1, r2
    318e:	bne.n	31ee <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3da>
    3190:	ldr	r0, [r0, #16]
    3192:	cmp	r0, #0
    3194:	beq.w	3356 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x542>
    3198:	ldr	r1, [r0, #0]
    319a:	ldr	r1, [r1, #76]	; 0x4c
    319c:	cmp	r1, r2
    319e:	bne.n	31ee <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3da>
    31a0:	ldr	r0, [r0, #16]
    31a2:	cmp	r0, #0
    31a4:	beq.w	3356 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x542>
    31a8:	ldr	r1, [r0, #0]
    31aa:	ldr	r1, [r1, #76]	; 0x4c
    31ac:	cmp	r1, r2
    31ae:	bne.n	31ee <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3da>
    31b0:	ldr	r0, [r0, #16]
    31b2:	cmp	r0, #0
    31b4:	beq.w	3356 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x542>
    31b8:	ldr	r3, [r0, #0]
    31ba:	ldr	r3, [r3, #76]	; 0x4c
    31bc:	blx	r3
    31be:	b.n	31f0 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3dc>
        r.scanned = false;
        sd_getName(child_,r.name, MAX_FILENAME_LEN);
        sibling = AppendIndexRecord(r);
        child_.close();
      }
      record.scanned = true;
    31c0:	movs	r3, #1
      record.child = sibling;
      WriteIndexRecord(i, record);
    31c2:	mov	r1, r5
    31c4:	mov	r0, r4
    31c6:	add	r2, sp, #16
        sd_getName(child_,r.name, MAX_FILENAME_LEN);
        sibling = AppendIndexRecord(r);
        child_.close();
      }
      record.scanned = true;
      record.child = sibling;
    31c8:	str.w	r8, [sp, #20]
        r.scanned = false;
        sd_getName(child_,r.name, MAX_FILENAME_LEN);
        sibling = AppendIndexRecord(r);
        child_.close();
      }
      record.scanned = true;
    31cc:	strb.w	r3, [sp, #29]
      record.child = sibling;
      WriteIndexRecord(i, record);
    31d0:	bl	2058 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    }
  }
    31d4:	add.w	sp, sp, #564	; 0x234
    31d8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	}
	virtual void close() {
		if (f) f->close();
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
    31dc:	blx	r3
    31de:	b.n	311a <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x306>
    31e0:	.word	0x00000d69
    31e4:	.word	0x20000074
    31e8:	.word	0x0000013d
	}
	virtual const char* name() {
		return (f) ? f->name() : "";
	}
	virtual bool isDirectory() {
		return (f) ? f->isDirectory() : false;
    31ec:	mov	r0, r3
    31ee:	blx	r1

        Record r;
        r.store = record.store;
        r.parent = i;
        r.sibling = sibling;
        r.isdir = child_.isDirectory();
    31f0:	strb.w	r0, [sp, #300]	; 0x12c
    31f4:	ldr.w	r3, [r4, #224]	; 0xe0
        r.child = r.isdir ? 0 : (uint32_t) child_.size();
    31f8:	cmp	r0, #0
    31fa:	beq.w	335c <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x548>
    31fe:	movs	r0, #0
        r.scanned = false;
    3200:	movs	r2, #0
        Record r;
        r.store = record.store;
        r.parent = i;
        r.sibling = sibling;
        r.isdir = child_.isDirectory();
        r.child = r.isdir ? 0 : (uint32_t) child_.size();
    3202:	str	r0, [sp, #292]	; 0x124
        r.scanned = false;
    3204:	strb.w	r2, [sp, #301]	; 0x12d
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
	}
	virtual const char* name() {
		return (f) ? f->name() : "";
    3208:	cmp	r3, #0
    320a:	beq.w	33de <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5ca>
    320e:	ldr	r1, [r3, #0]
    3210:	ldr	r2, [pc, #504]	; (340c <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5f8>)
    3212:	ldr	r1, [r1, #72]	; 0x48
    3214:	cmp	r1, r2
    3216:	bne.w	33d6 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5c2>
    321a:	ldr	r0, [r3, #16]
    321c:	cmp	r0, #0
    321e:	beq.w	33de <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5ca>
    3222:	ldr	r3, [r0, #0]
    3224:	ldr	r3, [r3, #72]	; 0x48
    3226:	cmp	r3, r2
    3228:	bne.n	329c <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x488>
    322a:	ldr	r0, [r0, #16]
    322c:	cmp	r0, #0
    322e:	beq.w	33de <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5ca>
    3232:	ldr	r3, [r0, #0]
    3234:	ldr	r3, [r3, #72]	; 0x48
    3236:	cmp	r3, r2
    3238:	bne.n	329c <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x488>
    323a:	ldr	r0, [r0, #16]
    323c:	cmp	r0, #0
    323e:	beq.w	33de <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5ca>
    3242:	ldr	r3, [r0, #0]
    3244:	ldr	r3, [r3, #72]	; 0x48
    3246:	cmp	r3, r2
    3248:	bne.n	329c <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x488>
    324a:	ldr	r0, [r0, #16]
    324c:	cmp	r0, #0
    324e:	beq.w	33de <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5ca>
    3252:	ldr	r3, [r0, #0]
    3254:	ldr	r3, [r3, #72]	; 0x48
    3256:	cmp	r3, r2
    3258:	bne.n	329c <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x488>
    325a:	ldr	r0, [r0, #16]
    325c:	cmp	r0, #0
    325e:	beq.w	33de <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5ca>
    3262:	ldr	r3, [r0, #0]
    3264:	ldr	r3, [r3, #72]	; 0x48
    3266:	cmp	r3, r2
    3268:	bne.n	329c <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x488>
    326a:	ldr	r0, [r0, #16]
    326c:	cmp	r0, #0
    326e:	beq.w	33de <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5ca>
    3272:	ldr	r3, [r0, #0]
    3274:	ldr	r3, [r3, #72]	; 0x48
    3276:	cmp	r3, r2
    3278:	bne.n	329c <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x488>
    327a:	ldr	r0, [r0, #16]
    327c:	cmp	r0, #0
    327e:	beq.w	33de <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5ca>
    3282:	ldr	r3, [r0, #0]
    3284:	ldr	r3, [r3, #72]	; 0x48
    3286:	cmp	r3, r2
    3288:	bne.n	329c <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x488>
    328a:	ldr	r0, [r0, #16]
    328c:	cmp	r0, #0
    328e:	beq.w	33de <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5ca>
    3292:	ldr	r3, [r0, #0]
    3294:	ldr	r3, [r3, #72]	; 0x48
    3296:	blx	r3
    3298:	mov	r1, r0
    329a:	b.n	32a0 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x48c>
    329c:	blx	r3
    329e:	mov	r1, r0
        sd_getName(child_,r.name, MAX_FILENAME_LEN);
    32a0:	mov.w	r2, #256	; 0x100
    32a4:	add	r0, sp, #304	; 0x130
    32a6:	bl	11380 <strlcpy>
    index_.write((char*)&r, sizeof(r));
    mtp_lock_storage(false);
  }

  uint32_t MTPStorage_SD::AppendIndexRecord(const Record& r) 
  { uint32_t new_record = index_entries_++;
    32aa:	ldr.w	r1, [r4, #244]	; 0xf4
    WriteIndexRecord(new_record, r);
    32ae:	mov	r0, r4
    32b0:	add	r2, sp, #288	; 0x120
    index_.write((char*)&r, sizeof(r));
    mtp_lock_storage(false);
  }

  uint32_t MTPStorage_SD::AppendIndexRecord(const Record& r) 
  { uint32_t new_record = index_entries_++;
    32b2:	adds	r3, r1, #1
        r.sibling = sibling;
        r.isdir = child_.isDirectory();
        r.child = r.isdir ? 0 : (uint32_t) child_.size();
        r.scanned = false;
        sd_getName(child_,r.name, MAX_FILENAME_LEN);
        sibling = AppendIndexRecord(r);
    32b4:	mov	r8, r1
    index_.write((char*)&r, sizeof(r));
    mtp_lock_storage(false);
  }

  uint32_t MTPStorage_SD::AppendIndexRecord(const Record& r) 
  { uint32_t new_record = index_entries_++;
    32b6:	str.w	r3, [r4, #244]	; 0xf4
    WriteIndexRecord(new_record, r);
    32ba:	bl	2058 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
	}
	virtual uint64_t size() {
		return (f) ? f->size() : 0;
	}
	virtual void close() {
		if (f) f->close();
    32be:	ldr.w	r0, [r4, #224]	; 0xe0
    32c2:	cmp	r0, #0
    32c4:	beq.w	2eb4 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0xa0>
    32c8:	ldr	r2, [r0, #0]
    32ca:	ldr	r3, [pc, #324]	; (3410 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5fc>)
    32cc:	ldr	r2, [r2, #64]	; 0x40
    32ce:	cmp	r2, r3
    32d0:	bne.n	3352 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x53e>
    32d2:	ldr	r0, [r0, #16]
    32d4:	cmp	r0, #0
    32d6:	beq.w	2eb4 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0xa0>
    32da:	ldr	r2, [r0, #0]
    32dc:	ldr	r2, [r2, #64]	; 0x40
    32de:	cmp	r2, r3
    32e0:	bne.n	3352 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x53e>
    32e2:	ldr	r0, [r0, #16]
    32e4:	cmp	r0, #0
    32e6:	beq.w	2eb4 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0xa0>
    32ea:	ldr	r2, [r0, #0]
    32ec:	ldr	r2, [r2, #64]	; 0x40
    32ee:	cmp	r2, r3
    32f0:	bne.n	3352 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x53e>
    32f2:	ldr	r0, [r0, #16]
    32f4:	cmp	r0, #0
    32f6:	beq.w	2eb4 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0xa0>
    32fa:	ldr	r2, [r0, #0]
    32fc:	ldr	r2, [r2, #64]	; 0x40
    32fe:	cmp	r2, r3
    3300:	bne.n	3352 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x53e>
    3302:	ldr	r0, [r0, #16]
    3304:	cmp	r0, #0
    3306:	beq.w	2eb4 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0xa0>
    330a:	ldr	r2, [r0, #0]
    330c:	ldr	r2, [r2, #64]	; 0x40
    330e:	cmp	r2, r3
    3310:	bne.n	3352 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x53e>
    3312:	ldr	r0, [r0, #16]
    3314:	cmp	r0, #0
    3316:	beq.w	2eb4 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0xa0>
    331a:	ldr	r2, [r0, #0]
    331c:	ldr	r2, [r2, #64]	; 0x40
    331e:	cmp	r2, r3
    3320:	bne.n	3352 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x53e>
    3322:	ldr	r0, [r0, #16]
    3324:	cmp	r0, #0
    3326:	beq.w	2eb4 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0xa0>
    332a:	ldr	r2, [r0, #0]
    332c:	ldr	r2, [r2, #64]	; 0x40
    332e:	cmp	r2, r3
    3330:	bne.n	3352 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x53e>
    3332:	ldr	r0, [r0, #16]
    3334:	cmp	r0, #0
    3336:	beq.w	2eb4 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0xa0>
    333a:	ldr	r2, [r0, #0]
    333c:	ldr	r2, [r2, #64]	; 0x40
    333e:	cmp	r2, r3
    3340:	bne.n	3352 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x53e>
    3342:	ldr	r0, [r0, #16]
    3344:	cmp	r0, #0
    3346:	beq.w	2eb4 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0xa0>
    334a:	ldr	r3, [r0, #0]
    334c:	ldr	r3, [r3, #64]	; 0x40
    334e:	blx	r3
    3350:	b.n	2eb4 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0xa0>
    3352:	blx	r2
    if (record.isdir && !record.scanned) {
      OpenFileByIndex(i);
      if (!sd_isOpen(file_)) return;
    
      int sibling = 0;
      while (true) 
    3354:	b.n	2eb4 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0xa0>

        Record r;
        r.store = record.store;
        r.parent = i;
        r.sibling = sibling;
        r.isdir = child_.isDirectory();
    3356:	movs	r2, #0
    3358:	strb.w	r2, [sp, #300]	; 0x12c
	}
	virtual uint64_t position() {
		return (f) ? f->position() : 0;
	}
	virtual uint64_t size() {
		return (f) ? f->size() : 0;
    335c:	cmp	r3, #0
    335e:	beq.n	33f4 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5e0>
    3360:	ldr	r1, [r3, #0]
    3362:	ldr	r2, [pc, #176]	; (3414 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x600>)
    3364:	ldr	r1, [r1, #60]	; 0x3c
    3366:	cmp	r1, r2
    3368:	bne.n	33ea <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5d6>
    336a:	ldr	r0, [r3, #16]
    336c:	cbz	r0, 33c2 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5ae>
    336e:	ldr	r1, [r0, #0]
    3370:	ldr	r1, [r1, #60]	; 0x3c
    3372:	cmp	r1, r2
    3374:	bne.n	33ec <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5d8>
    3376:	ldr	r0, [r0, #16]
    3378:	cbz	r0, 33c2 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5ae>
    337a:	ldr	r1, [r0, #0]
    337c:	ldr	r1, [r1, #60]	; 0x3c
    337e:	cmp	r1, r2
    3380:	bne.n	33ec <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5d8>
    3382:	ldr	r0, [r0, #16]
    3384:	cbz	r0, 33c2 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5ae>
    3386:	ldr	r1, [r0, #0]
    3388:	ldr	r1, [r1, #60]	; 0x3c
    338a:	cmp	r1, r2
    338c:	bne.n	33ec <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5d8>
    338e:	ldr	r0, [r0, #16]
    3390:	cbz	r0, 33c2 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5ae>
    3392:	ldr	r1, [r0, #0]
    3394:	ldr	r1, [r1, #60]	; 0x3c
    3396:	cmp	r1, r2
    3398:	bne.n	33ec <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5d8>
    339a:	ldr	r0, [r0, #16]
    339c:	cbz	r0, 33c2 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5ae>
    339e:	ldr	r1, [r0, #0]
    33a0:	ldr	r1, [r1, #60]	; 0x3c
    33a2:	cmp	r1, r2
    33a4:	bne.n	33ec <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5d8>
    33a6:	ldr	r0, [r0, #16]
    33a8:	cbz	r0, 33c2 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5ae>
    33aa:	ldr	r1, [r0, #0]
    33ac:	ldr	r1, [r1, #60]	; 0x3c
    33ae:	cmp	r1, r2
    33b0:	bne.n	33ec <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5d8>
    33b2:	ldr	r0, [r0, #16]
    33b4:	cbz	r0, 33c2 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5ae>
    33b6:	ldr	r3, [r0, #0]
    33b8:	ldr	r3, [r3, #60]	; 0x3c
    33ba:	blx	r3
    33bc:	ldr.w	r3, [r4, #224]	; 0xe0
    33c0:	b.n	3200 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3ec>
        r.child = r.isdir ? 0 : (uint32_t) child_.size();
    33c2:	movs	r2, #0
        r.scanned = false;
    33c4:	strb.w	r2, [sp, #301]	; 0x12d
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
	}
	virtual const char* name() {
		return (f) ? f->name() : "";
    33c8:	ldr	r1, [r3, #0]
        Record r;
        r.store = record.store;
        r.parent = i;
        r.sibling = sibling;
        r.isdir = child_.isDirectory();
        r.child = r.isdir ? 0 : (uint32_t) child_.size();
    33ca:	str	r2, [sp, #292]	; 0x124
    33cc:	ldr	r1, [r1, #72]	; 0x48
    33ce:	ldr	r2, [pc, #60]	; (340c <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5f8>)
    33d0:	cmp	r1, r2
    33d2:	beq.w	321a <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x406>
    33d6:	mov	r0, r3
    33d8:	blx	r1
    33da:	mov	r1, r0
    33dc:	b.n	32a0 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x48c>
    33de:	ldr	r1, [pc, #56]	; (3418 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x604>)
    33e0:	b.n	32a0 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x48c>
	}
	virtual bool isDirectory() {
		return (f) ? f->isDirectory() : false;
	}
	virtual File openNextFile(uint8_t mode=0) {
		return (f) ? f->openNextFile(mode) : *this;
    33e2:	movs	r2, #0
    33e4:	add	r0, sp, #288	; 0x120
    33e6:	blx	r3
    33e8:	b.n	2f46 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x132>
	}
	virtual uint64_t position() {
		return (f) ? f->position() : 0;
	}
	virtual uint64_t size() {
		return (f) ? f->size() : 0;
    33ea:	mov	r0, r3
    33ec:	blx	r1
    33ee:	ldr.w	r3, [r4, #224]	; 0xe0
    33f2:	b.n	3200 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3ec>
    33f4:	str	r3, [sp, #292]	; 0x124
        r.scanned = false;
    33f6:	strb.w	r3, [sp, #301]	; 0x12d
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
	}
	virtual const char* name() {
		return (f) ? f->name() : "";
    33fa:	ldr	r1, [pc, #28]	; (3418 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x604>)
    33fc:	b.n	32a0 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x48c>
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    33fe:	mov	r0, r6
    3400:	blx	r3
    3402:	b.n	308e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x27a>
    3404:	mov	r0, r6
    3406:	blx	r3
    3408:	b.n	2fe2 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x1ce>
    340a:	nop
    340c:	.word	0x00000129
    3410:	.word	0x00000111
    3414:	.word	0x00000101
    3418:	.word	0x2000016c
    341c:	ldr	r2, [r3, #16]
    341e:	cmp	r2, #0
    3420:	beq.w	2fca <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x1b6>
    3424:	ldr	r1, [r2, #0]
    3426:	ldr	r1, [r1, #32]
    3428:	cmp	r1, r0
    342a:	bne.w	35f4 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x7e0>
    342e:	ldr.w	lr, [r2, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    3432:	str.w	r9, [r2]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    3436:	cmp.w	lr, #0
    343a:	beq.n	34ec <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x6d8>
    343c:	ldr.w	r1, [lr, #16]
    3440:	subs	r1, #1
    3442:	str.w	r1, [lr, #16]
    3446:	cmp	r1, #0
    3448:	bne.n	34ec <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x6d8>
    344a:	ldr	r1, [r2, #16]
    344c:	str	r1, [sp, #0]
    344e:	cmp	r1, #0
    3450:	beq.n	34ec <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x6d8>
    3452:	ldr	r1, [sp, #0]
    3454:	ldr	r1, [r1, #0]
    3456:	ldr	r1, [r1, #32]
    3458:	cmp	r1, r0
    345a:	bne.w	360c <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x7f8>
    345e:	ldr	r1, [sp, #0]
    3460:	ldr.w	lr, [r1, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    3464:	str.w	r9, [r1]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    3468:	cmp.w	lr, #0
    346c:	beq.n	34dc <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x6c8>
    346e:	ldr.w	r1, [lr, #16]
    3472:	subs	r1, #1
    3474:	str.w	r1, [lr, #16]
    3478:	cbnz	r1, 34dc <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x6c8>
    347a:	ldr	r1, [sp, #0]
    347c:	ldr.w	ip, [r1, #16]
    3480:	cmp.w	ip, #0
    3484:	beq.n	34dc <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x6c8>
    3486:	ldr.w	r1, [ip]
    348a:	ldr	r1, [r1, #32]
    348c:	cmp	r1, r0
    348e:	bne.w	3628 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x814>
    3492:	ldr.w	r0, [ip, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    3496:	str.w	r9, [ip]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    349a:	cbz	r0, 34cc <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x6b8>
    349c:	ldr	r1, [r0, #16]
    349e:	add.w	lr, r1, #4294967295
    34a2:	str.w	lr, [r0, #16]
    34a6:	cmp.w	lr, #0
    34aa:	bne.n	34cc <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x6b8>
    34ac:	ldr.w	r0, [ip, #16]
    34b0:	cbz	r0, 34cc <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x6b8>
    34b2:	ldr.w	lr, [r0]
    34b6:	str.w	ip, [sp, #12]
    34ba:	str	r2, [sp, #8]
    34bc:	str	r3, [sp, #4]
    34be:	ldr.w	r3, [lr, #32]
    34c2:	blx	r3
    34c4:	ldr.w	ip, [sp, #12]
    34c8:	ldr	r2, [sp, #8]
    34ca:	ldr	r3, [sp, #4]
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
		invalidate();
	}
    34cc:	mov	r0, ip
    34ce:	movs	r1, #20
    34d0:	str	r2, [sp, #8]
    34d2:	str	r3, [sp, #4]
    34d4:	bl	f6e0 <operator delete(void*, unsigned int)>
    34d8:	ldr	r3, [sp, #4]
    34da:	ldr	r2, [sp, #8]
    34dc:	ldr	r0, [sp, #0]
    34de:	movs	r1, #20
    34e0:	str	r2, [sp, #8]
    34e2:	str	r3, [sp, #4]
    34e4:	bl	f6e0 <operator delete(void*, unsigned int)>
    34e8:	ldr	r3, [sp, #4]
    34ea:	ldr	r2, [sp, #8]
    34ec:	mov	r0, r2
    34ee:	movs	r1, #20
    34f0:	str	r3, [sp, #0]
    34f2:	bl	f6e0 <operator delete(void*, unsigned int)>
    34f6:	ldr	r3, [sp, #0]
    34f8:	b.n	2fca <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x1b6>
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    34fa:	ldr	r2, [r3, #16]
    34fc:	cmp	r2, #0
    34fe:	beq.w	3076 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x262>
    3502:	ldr	r1, [r2, #0]
    3504:	ldr	r1, [r1, #32]
    3506:	cmp	r1, r0
    3508:	bne.n	35ea <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x7d6>
    350a:	ldr.w	lr, [r2, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    350e:	str.w	r9, [r2]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    3512:	cmp.w	lr, #0
    3516:	beq.n	35c4 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x7b0>
    3518:	ldr.w	r1, [lr, #16]
    351c:	subs	r1, #1
    351e:	str.w	r1, [lr, #16]
    3522:	cmp	r1, #0
    3524:	bne.n	35c4 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x7b0>
    3526:	ldr	r1, [r2, #16]
    3528:	str	r1, [sp, #0]
    352a:	cmp	r1, #0
    352c:	beq.n	35c4 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x7b0>
    352e:	ldr	r1, [sp, #0]
    3530:	ldr	r1, [r1, #0]
    3532:	ldr	r1, [r1, #32]
    3534:	cmp	r1, r0
    3536:	bne.n	35fe <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x7ea>
    3538:	ldr	r1, [sp, #0]
    353a:	ldr.w	lr, [r1, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    353e:	str.w	r9, [r1]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    3542:	cmp.w	lr, #0
    3546:	beq.n	35b4 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x7a0>
    3548:	ldr.w	r1, [lr, #16]
    354c:	subs	r1, #1
    354e:	str.w	r1, [lr, #16]
    3552:	cbnz	r1, 35b4 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x7a0>
    3554:	ldr	r1, [sp, #0]
    3556:	ldr.w	ip, [r1, #16]
    355a:	cmp.w	ip, #0
    355e:	beq.n	35b4 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x7a0>
    3560:	ldr.w	r1, [ip]
    3564:	ldr	r1, [r1, #32]
    3566:	cmp	r1, r0
    3568:	bne.n	361a <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x806>
    356a:	ldr.w	r0, [ip, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    356e:	str.w	r9, [ip]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    3572:	cbz	r0, 35a4 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x790>
    3574:	ldr	r1, [r0, #16]
    3576:	add.w	lr, r1, #4294967295
    357a:	str.w	lr, [r0, #16]
    357e:	cmp.w	lr, #0
    3582:	bne.n	35a4 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x790>
    3584:	ldr.w	r0, [ip, #16]
    3588:	cbz	r0, 35a4 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x790>
    358a:	ldr.w	lr, [r0]
    358e:	str.w	ip, [sp, #12]
    3592:	str	r2, [sp, #8]
    3594:	str	r3, [sp, #4]
    3596:	ldr.w	r3, [lr, #32]
    359a:	blx	r3
    359c:	ldr.w	ip, [sp, #12]
    35a0:	ldr	r2, [sp, #8]
    35a2:	ldr	r3, [sp, #4]
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
		invalidate();
	}
    35a4:	mov	r0, ip
    35a6:	movs	r1, #20
    35a8:	str	r2, [sp, #8]
    35aa:	str	r3, [sp, #4]
    35ac:	bl	f6e0 <operator delete(void*, unsigned int)>
    35b0:	ldr	r3, [sp, #4]
    35b2:	ldr	r2, [sp, #8]
    35b4:	ldr	r0, [sp, #0]
    35b6:	movs	r1, #20
    35b8:	str	r2, [sp, #8]
    35ba:	str	r3, [sp, #4]
    35bc:	bl	f6e0 <operator delete(void*, unsigned int)>
    35c0:	ldr	r3, [sp, #4]
    35c2:	ldr	r2, [sp, #8]
    35c4:	mov	r0, r2
    35c6:	movs	r1, #20
    35c8:	str	r3, [sp, #0]
    35ca:	bl	f6e0 <operator delete(void*, unsigned int)>
    35ce:	ldr	r3, [sp, #0]
    35d0:	b.n	3076 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x262>
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    35d2:	mov	r0, sl
    35d4:	blx	r3
    35d6:	b.n	2fda <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x1c6>
    35d8:	mov	r0, sl
    35da:	blx	r3
    35dc:	b.n	3086 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x272>
    35de:	mov	r0, r3
    35e0:	blx	r2
    35e2:	b.n	307e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x26a>
    35e4:	mov	r0, r3
    35e6:	blx	r2
    35e8:	b.n	2fd2 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x1be>
    35ea:	str	r3, [sp, #0]
    35ec:	mov	r0, r2
    35ee:	blx	r1
    35f0:	ldr	r3, [sp, #0]
    35f2:	b.n	3076 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x262>
    35f4:	str	r3, [sp, #0]
    35f6:	mov	r0, r2
    35f8:	blx	r1
    35fa:	ldr	r3, [sp, #0]
    35fc:	b.n	2fca <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x1b6>
    35fe:	str	r2, [sp, #8]
    3600:	str	r3, [sp, #4]
    3602:	ldr	r0, [sp, #0]
    3604:	blx	r1
    3606:	ldr	r2, [sp, #8]
    3608:	ldr	r3, [sp, #4]
    360a:	b.n	35c4 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x7b0>
    360c:	str	r2, [sp, #8]
    360e:	str	r3, [sp, #4]
    3610:	ldr	r0, [sp, #0]
    3612:	blx	r1
    3614:	ldr	r2, [sp, #8]
    3616:	ldr	r3, [sp, #4]
    3618:	b.n	34ec <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x6d8>
    361a:	str	r2, [sp, #8]
    361c:	mov	r0, ip
    361e:	str	r3, [sp, #4]
    3620:	blx	r1
    3622:	ldr	r2, [sp, #8]
    3624:	ldr	r3, [sp, #4]
    3626:	b.n	35b4 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x7a0>
    3628:	str	r2, [sp, #8]
    362a:	mov	r0, ip
    362c:	str	r3, [sp, #4]
    362e:	blx	r1
    3630:	ldr	r2, [sp, #8]
    3632:	ldr	r3, [sp, #4]
    3634:	b.n	34dc <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x6c8>
    3636:	nop

00003638 <MTPStorage_SD::ScanAll(unsigned long) [clone .part.7] [clone .constprop.12]>:
    }
  }

  void MTPStorage_SD::ScanAll(uint32_t store) 
  { if (all_scanned_) return;
    all_scanned_ = true;
    3638:	movs	r2, #1

  // MTP object handles should not change or be re-used during a session.
  // This would be easy if we could just have a list of all files in memory.
  // Since our RAM is limited, we'll keep the index in a file instead.
  void MTPStorage_SD::GenerateIndex(uint32_t store)
  { if (index_generated) return; 
    363a:	ldrb.w	r3, [r0, #248]	; 0xf8
      record.child = sibling;
      WriteIndexRecord(i, record);
    }
  }

  void MTPStorage_SD::ScanAll(uint32_t store) 
    363e:	push	{r4, r5, r6, lr}
    3640:	mov	r5, r0
    3642:	mov	r6, r1
  { if (all_scanned_) return;
    all_scanned_ = true;
    3644:	strb.w	r2, [r0, #249]	; 0xf9

  // MTP object handles should not change or be re-used during a session.
  // This would be easy if we could just have a list of all files in memory.
  // Since our RAM is limited, we'll keep the index in a file instead.
  void MTPStorage_SD::GenerateIndex(uint32_t store)
  { if (index_generated) return; 
    3648:	cbz	r3, 3668 <MTPStorage_SD::ScanAll(unsigned long) [clone .part.7] [clone .constprop.12]+0x30>
  void MTPStorage_SD::ScanAll(uint32_t store) 
  { if (all_scanned_) return;
    all_scanned_ = true;

    GenerateIndex(store);
    for (uint32_t i = 0; i < index_entries_; i++)  ScanDir(store,i);
    364a:	ldr.w	r3, [r5, #244]	; 0xf4
    364e:	cbz	r3, 3666 <MTPStorage_SD::ScanAll(unsigned long) [clone .part.7] [clone .constprop.12]+0x2e>
    3650:	movs	r4, #0
    3652:	mov	r2, r4
    3654:	mov	r1, r6
    3656:	mov	r0, r5
    3658:	adds	r4, #1
    365a:	bl	2e14 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)>
    365e:	ldr.w	r3, [r5, #244]	; 0xf4
    3662:	cmp	r3, r4
    3664:	bhi.n	3652 <MTPStorage_SD::ScanAll(unsigned long) [clone .part.7] [clone .constprop.12]+0x1a>
    3666:	pop	{r4, r5, r6, pc}
    3668:	bl	21a4 <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.6] [clone .constprop.14]>
    366c:	b.n	364a <MTPStorage_SD::ScanAll(unsigned long) [clone .part.7] [clone .constprop.12]+0x12>
    366e:	nop

00003670 <MTPStorage_SD::StartGetObjectHandles(unsigned long, unsigned long) [clone .part.8] [clone .constprop.13]>:
  }

  void MTPStorage_SD::StartGetObjectHandles(uint32_t store, uint32_t parent) 
    3670:	push	{r4, r5, lr}
  { 
    GenerateIndex(store);
    if (parent) 
    { if (parent == 0xFFFFFFFFUL) parent = store; // As per initizalization
    3672:	cmp.w	r2, #4294967295
    3676:	ite	ne
    3678:	movne	r5, r2
    367a:	moveq	r5, r1

    GenerateIndex(store);
    for (uint32_t i = 0; i < index_entries_; i++)  ScanDir(store,i);
  }

  void MTPStorage_SD::StartGetObjectHandles(uint32_t store, uint32_t parent) 
    367c:	sub	sp, #276	; 0x114
    367e:	mov	r4, r0
  { 
    GenerateIndex(store);
    if (parent) 
    { if (parent == 0xFFFFFFFFUL) parent = store; // As per initizalization

      ScanDir(store, parent);
    3680:	mov	r2, r5
    3682:	bl	2e14 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)>
      follow_sibling_ = true;
    3686:	movs	r3, #1
      // Root folder?
      next_ = ReadIndexRecord(parent).child;
    3688:	mov	r2, r5
    368a:	mov	r1, r4
    GenerateIndex(store);
    if (parent) 
    { if (parent == 0xFFFFFFFFUL) parent = store; // As per initizalization

      ScanDir(store, parent);
      follow_sibling_ = true;
    368c:	strb.w	r3, [r4, #256]	; 0x100
      // Root folder?
      next_ = ReadIndexRecord(parent).child;
    3690:	mov	r0, sp
    3692:	bl	2228 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    3696:	ldr	r3, [sp, #4]
    3698:	str.w	r3, [r4, #252]	; 0xfc
    { 
      ScanAll(store);
      follow_sibling_ = false;
      next_ = 1;
    }
  }
    369c:	add	sp, #276	; 0x114
    369e:	pop	{r4, r5, pc}

000036a0 <MTPStorage_SD::StartGetObjectHandles(unsigned long, unsigned long)>:

  // MTP object handles should not change or be re-used during a session.
  // This would be easy if we could just have a list of all files in memory.
  // Since our RAM is limited, we'll keep the index in a file instead.
  void MTPStorage_SD::GenerateIndex(uint32_t store)
  { if (index_generated) return; 
    36a0:	ldrb.w	r3, [r0, #248]	; 0xf8
    GenerateIndex(store);
    for (uint32_t i = 0; i < index_entries_; i++)  ScanDir(store,i);
  }

  void MTPStorage_SD::StartGetObjectHandles(uint32_t store, uint32_t parent) 
  { 
    36a4:	push	{r4, lr}
    36a6:	mov	r4, r0
    36a8:	sub	sp, #8

  // MTP object handles should not change or be re-used during a session.
  // This would be easy if we could just have a list of all files in memory.
  // Since our RAM is limited, we'll keep the index in a file instead.
  void MTPStorage_SD::GenerateIndex(uint32_t store)
  { if (index_generated) return; 
    36aa:	cbz	r3, 36d0 <MTPStorage_SD::StartGetObjectHandles(unsigned long, unsigned long)+0x30>
  }

  void MTPStorage_SD::StartGetObjectHandles(uint32_t store, uint32_t parent) 
  { 
    GenerateIndex(store);
    if (parent) 
    36ac:	cbz	r2, 36ba <MTPStorage_SD::StartGetObjectHandles(unsigned long, unsigned long)+0x1a>
    36ae:	mov	r0, r4
    { 
      ScanAll(store);
      follow_sibling_ = false;
      next_ = 1;
    }
  }
    36b0:	add	sp, #8
    36b2:	ldmia.w	sp!, {r4, lr}
    36b6:	b.w	3670 <MTPStorage_SD::StartGetObjectHandles(unsigned long, unsigned long) [clone .part.8] [clone .constprop.13]>
      WriteIndexRecord(i, record);
    }
  }

  void MTPStorage_SD::ScanAll(uint32_t store) 
  { if (all_scanned_) return;
    36ba:	ldrb.w	r3, [r4, #249]	; 0xf9
    36be:	cbz	r3, 36de <MTPStorage_SD::StartGetObjectHandles(unsigned long, unsigned long)+0x3e>
      next_ = ReadIndexRecord(parent).child;
    } 
    else 
    { 
      ScanAll(store);
      follow_sibling_ = false;
    36c0:	movs	r2, #0
      next_ = 1;
    36c2:	movs	r3, #1
      next_ = ReadIndexRecord(parent).child;
    } 
    else 
    { 
      ScanAll(store);
      follow_sibling_ = false;
    36c4:	strb.w	r2, [r4, #256]	; 0x100
      next_ = 1;
    36c8:	str.w	r3, [r4, #252]	; 0xfc
    }
  }
    36cc:	add	sp, #8
    36ce:	pop	{r4, pc}
    36d0:	stmia.w	sp, {r1, r2}
    36d4:	bl	21a4 <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.6] [clone .constprop.14]>
    36d8:	ldmia.w	sp, {r1, r2}
    36dc:	b.n	36ac <MTPStorage_SD::StartGetObjectHandles(unsigned long, unsigned long)+0xc>
    36de:	mov	r0, r4
    36e0:	bl	3638 <MTPStorage_SD::ScanAll(unsigned long) [clone .part.7] [clone .constprop.12]>
    36e4:	b.n	36c0 <MTPStorage_SD::StartGetObjectHandles(unsigned long, unsigned long)+0x20>
    36e6:	nop

000036e8 <MTPStorage_SD::removeFile(unsigned long, char*)>:
    file_.read(out,bytes);
    mtp_lock_storage(false);
  }

void MTPStorage_SD::removeFile(uint32_t store, char *file)
{ 
    36e8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    36ec:	add.w	r9, r0, r1, lsl #2
    36f0:	sub	sp, #340	; 0x154
    }

    uint32_t sd_getFSCount(void) {return fsCount;}
    const char *sd_getFSName(uint32_t store) { return sd_name[store];}

    File sd_open(uint32_t store, const char *filename, uint32_t mode) { return sdx[store]->open(filename,mode);  }
    36f2:	movs	r3, #0
    36f4:	str	r1, [sp, #12]
    36f6:	ldr.w	r1, [r9, #88]	; 0x58
    36fa:	str	r0, [sp, #8]
    36fc:	add	r0, sp, #40	; 0x28
    36fe:	ldr	r4, [r1, #0]
    3700:	str	r2, [sp, #4]
    3702:	ldr	r4, [r4, #0]
    3704:	blx	r4
	}
	virtual const char* name() {
		return (f) ? f->name() : "";
	}
	virtual bool isDirectory() {
		return (f) ? f->isDirectory() : false;
    3706:	ldr	r0, [sp, #56]	; 0x38
    3708:	cmp	r0, #0
    370a:	beq.w	3ab4 <MTPStorage_SD::removeFile(unsigned long, char*)+0x3cc>
    370e:	ldr	r3, [r0, #0]
    3710:	ldr.w	sl, [pc, #868]	; 3a78 <MTPStorage_SD::removeFile(unsigned long, char*)+0x390>
    3714:	ldr	r3, [r3, #76]	; 0x4c
    3716:	cmp	r3, sl
    3718:	bne.w	3c18 <MTPStorage_SD::removeFile(unsigned long, char*)+0x530>
    371c:	ldr	r0, [r0, #16]
    371e:	cmp	r0, #0
    3720:	beq.w	3ab4 <MTPStorage_SD::removeFile(unsigned long, char*)+0x3cc>
    3724:	ldr	r3, [r0, #0]
    3726:	ldr	r3, [r3, #76]	; 0x4c
    3728:	cmp	r3, sl
    372a:	bne.w	3c18 <MTPStorage_SD::removeFile(unsigned long, char*)+0x530>
    372e:	ldr	r0, [r0, #16]
    3730:	cmp	r0, #0
    3732:	beq.w	3ab4 <MTPStorage_SD::removeFile(unsigned long, char*)+0x3cc>
    3736:	ldr	r3, [r0, #0]
    3738:	ldr	r3, [r3, #76]	; 0x4c
    373a:	cmp	r3, sl
    373c:	bne.w	3c18 <MTPStorage_SD::removeFile(unsigned long, char*)+0x530>
    3740:	ldr	r0, [r0, #16]
    3742:	cmp	r0, #0
    3744:	beq.w	3ab4 <MTPStorage_SD::removeFile(unsigned long, char*)+0x3cc>
    3748:	ldr	r3, [r0, #0]
    374a:	ldr	r3, [r3, #76]	; 0x4c
    374c:	cmp	r3, sl
    374e:	bne.w	3c18 <MTPStorage_SD::removeFile(unsigned long, char*)+0x530>
    3752:	ldr	r0, [r0, #16]
    3754:	cmp	r0, #0
    3756:	beq.w	3ab4 <MTPStorage_SD::removeFile(unsigned long, char*)+0x3cc>
    375a:	ldr	r3, [r0, #0]
    375c:	ldr	r3, [r3, #76]	; 0x4c
    375e:	cmp	r3, sl
    3760:	bne.w	3c18 <MTPStorage_SD::removeFile(unsigned long, char*)+0x530>
    3764:	ldr	r0, [r0, #16]
    3766:	cmp	r0, #0
    3768:	beq.w	3ab4 <MTPStorage_SD::removeFile(unsigned long, char*)+0x3cc>
    376c:	ldr	r3, [r0, #0]
    376e:	ldr	r3, [r3, #76]	; 0x4c
    3770:	cmp	r3, sl
    3772:	bne.w	3c18 <MTPStorage_SD::removeFile(unsigned long, char*)+0x530>
    3776:	ldr	r0, [r0, #16]
    3778:	cmp	r0, #0
    377a:	beq.w	3ab4 <MTPStorage_SD::removeFile(unsigned long, char*)+0x3cc>
    377e:	ldr	r3, [r0, #0]
    3780:	ldr	r3, [r3, #76]	; 0x4c
    3782:	cmp	r3, sl
    3784:	bne.w	3c18 <MTPStorage_SD::removeFile(unsigned long, char*)+0x530>
    3788:	ldr	r0, [r0, #16]
    378a:	cmp	r0, #0
    378c:	beq.w	3ab4 <MTPStorage_SD::removeFile(unsigned long, char*)+0x3cc>
    3790:	ldr	r3, [r0, #0]
    3792:	ldr	r3, [r3, #76]	; 0x4c
    3794:	cmp	r3, sl
    3796:	bne.w	3c18 <MTPStorage_SD::removeFile(unsigned long, char*)+0x530>
    379a:	ldr	r0, [r0, #16]
    379c:	cmp	r0, #0
    379e:	beq.w	3ab4 <MTPStorage_SD::removeFile(unsigned long, char*)+0x3cc>
    37a2:	ldr	r3, [r0, #0]
    37a4:	ldr	r3, [r3, #76]	; 0x4c
    37a6:	blx	r3
  char tname[MAX_FILENAME_LEN];
  File f1=sd_open(store,file,0);
  if(f1.isDirectory())
    37a8:	cmp	r0, #0
    37aa:	beq.w	3ab4 <MTPStorage_SD::removeFile(unsigned long, char*)+0x3cc>
    37ae:	ldr.w	fp, [pc, #700]	; 3a6c <MTPStorage_SD::removeFile(unsigned long, char*)+0x384>
    37b2:	movs	r4, #0
    37b4:	ldr.w	r8, [pc, #708]	; 3a7c <MTPStorage_SD::removeFile(unsigned long, char*)+0x394>
    37b8:	mov	r7, fp
	}
	virtual File openNextFile(uint8_t mode=0) {
		return (f) ? f->openNextFile(mode) : *this;
    37ba:	ldr	r1, [sp, #56]	; 0x38
    37bc:	cmp	r1, #0
    37be:	beq.w	3a9e <MTPStorage_SD::removeFile(unsigned long, char*)+0x3b6>
    37c2:	ldr	r3, [r1, #0]
    37c4:	ldr	r2, [pc, #668]	; (3a64 <MTPStorage_SD::removeFile(unsigned long, char*)+0x37c>)
    37c6:	ldr	r3, [r3, #80]	; 0x50
    37c8:	cmp	r3, r2
    37ca:	bne.w	3c1c <MTPStorage_SD::removeFile(unsigned long, char*)+0x534>
    37ce:	ldr	r1, [r1, #16]
    37d0:	cmp	r1, #0
    37d2:	beq.w	3a9e <MTPStorage_SD::removeFile(unsigned long, char*)+0x3b6>
    37d6:	ldr	r3, [r1, #0]
    37d8:	ldr	r3, [r3, #80]	; 0x50
    37da:	cmp	r3, r2
    37dc:	bne.w	3c1c <MTPStorage_SD::removeFile(unsigned long, char*)+0x534>
    37e0:	ldr	r1, [r1, #16]
    37e2:	cmp	r1, #0
    37e4:	beq.w	3a9e <MTPStorage_SD::removeFile(unsigned long, char*)+0x3b6>
    37e8:	ldr	r3, [r1, #0]
    37ea:	ldr	r3, [r3, #80]	; 0x50
    37ec:	cmp	r3, r2
    37ee:	bne.w	3c1c <MTPStorage_SD::removeFile(unsigned long, char*)+0x534>
    37f2:	ldr	r1, [r1, #16]
    37f4:	cmp	r1, #0
    37f6:	beq.w	3a9e <MTPStorage_SD::removeFile(unsigned long, char*)+0x3b6>
    37fa:	ldr	r3, [r1, #0]
    37fc:	ldr	r3, [r3, #80]	; 0x50
    37fe:	cmp	r3, r2
    3800:	bne.w	3c1c <MTPStorage_SD::removeFile(unsigned long, char*)+0x534>
    3804:	ldr	r1, [r1, #16]
    3806:	cmp	r1, #0
    3808:	beq.w	3a9e <MTPStorage_SD::removeFile(unsigned long, char*)+0x3b6>
    380c:	ldr	r3, [r1, #0]
    380e:	ldr	r3, [r3, #80]	; 0x50
    3810:	cmp	r3, r2
    3812:	bne.w	3c1c <MTPStorage_SD::removeFile(unsigned long, char*)+0x534>
    3816:	ldr	r1, [r1, #16]
    3818:	cmp	r1, #0
    381a:	beq.w	3a9e <MTPStorage_SD::removeFile(unsigned long, char*)+0x3b6>
    381e:	ldr	r3, [r1, #0]
    3820:	ldr	r3, [r3, #80]	; 0x50
    3822:	cmp	r3, r2
    3824:	bne.w	3c1c <MTPStorage_SD::removeFile(unsigned long, char*)+0x534>
    3828:	ldr	r1, [r1, #16]
    382a:	cmp	r1, #0
    382c:	beq.w	3a9e <MTPStorage_SD::removeFile(unsigned long, char*)+0x3b6>
    3830:	ldr	r3, [r1, #0]
    3832:	movs	r2, #0
    3834:	add	r0, sp, #60	; 0x3c
    3836:	ldr	r3, [r3, #80]	; 0x50
    3838:	blx	r3
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    383a:	cbz	r4, 3858 <MTPStorage_SD::removeFile(unsigned long, char*)+0x170>
    383c:	ldr	r3, [r4, #16]
    383e:	subs	r3, #1
    3840:	str	r3, [r4, #16]
    3842:	cbnz	r3, 3858 <MTPStorage_SD::removeFile(unsigned long, char*)+0x170>
    3844:	ldr	r3, [r4, #0]
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
		invalidate();
	}
    3846:	mov	r0, r4
    3848:	ldr	r2, [pc, #540]	; (3a68 <MTPStorage_SD::removeFile(unsigned long, char*)+0x380>)
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    384a:	ldr	r3, [r3, #32]
    384c:	cmp	r3, r2
    384e:	bne.w	3e0c <MTPStorage_SD::removeFile(unsigned long, char*)+0x724>
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
		invalidate();
	}
    3852:	movs	r1, #20
    3854:	bl	f6e0 <operator delete(void*, unsigned int)>
	File& operator = (const File &file) {
		//Serial.println("File assignment");
		//static int assigncount=0;
		//if (++assigncount > 20) while (1) ;
		invalidate();
		f = file.f;
    3858:	ldr	r4, [sp, #76]	; 0x4c
		if (f) f->refcount++;
    385a:	cmp	r4, #0
    385c:	beq.w	3dd8 <MTPStorage_SD::removeFile(unsigned long, char*)+0x6f0>
    3860:	ldr	r3, [r4, #16]
	}
	virtual void close() {
		if (f) f->close();
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
    3862:	ldr	r2, [r4, #0]
		//Serial.println("File assignment");
		//static int assigncount=0;
		//if (++assigncount > 20) while (1) ;
		invalidate();
		f = file.f;
		if (f) f->refcount++;
    3864:	adds	r0, r3, #1
    3866:	str	r0, [r4, #16]
	}
	virtual void close() {
		if (f) f->close();
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
    3868:	ldr	r2, [r2, #68]	; 0x44
    386a:	cmp	r2, r8
    386c:	bne.w	3dc4 <MTPStorage_SD::removeFile(unsigned long, char*)+0x6dc>
    3870:	cmp	r0, #0
    3872:	beq.w	3da4 <MTPStorage_SD::removeFile(unsigned long, char*)+0x6bc>
    3876:	ldr.w	r3, [r3, #1]
    387a:	ldr	r3, [r3, #68]	; 0x44
    387c:	cmp	r3, r8
    387e:	bne.w	3dbc <MTPStorage_SD::removeFile(unsigned long, char*)+0x6d4>
    3882:	ldr	r0, [r0, #16]
    3884:	cmp	r0, #0
    3886:	beq.w	3da4 <MTPStorage_SD::removeFile(unsigned long, char*)+0x6bc>
    388a:	ldr	r3, [r0, #0]
    388c:	ldr	r3, [r3, #68]	; 0x44
    388e:	cmp	r3, r8
    3890:	bne.w	3dbc <MTPStorage_SD::removeFile(unsigned long, char*)+0x6d4>
    3894:	ldr	r0, [r0, #16]
    3896:	cmp	r0, #0
    3898:	beq.w	3da4 <MTPStorage_SD::removeFile(unsigned long, char*)+0x6bc>
    389c:	ldr	r3, [r0, #0]
    389e:	ldr	r3, [r3, #68]	; 0x44
    38a0:	cmp	r3, r8
    38a2:	bne.w	3dbc <MTPStorage_SD::removeFile(unsigned long, char*)+0x6d4>
    38a6:	ldr	r0, [r0, #16]
    38a8:	cmp	r0, #0
    38aa:	beq.w	3da4 <MTPStorage_SD::removeFile(unsigned long, char*)+0x6bc>
    38ae:	ldr	r3, [r0, #0]
    38b0:	ldr	r3, [r3, #68]	; 0x44
    38b2:	cmp	r3, r8
    38b4:	bne.w	3dbc <MTPStorage_SD::removeFile(unsigned long, char*)+0x6d4>
    38b8:	ldr	r0, [r0, #16]
    38ba:	cmp	r0, #0
    38bc:	beq.w	3da4 <MTPStorage_SD::removeFile(unsigned long, char*)+0x6bc>
    38c0:	ldr	r3, [r0, #0]
    38c2:	ldr	r3, [r3, #68]	; 0x44
    38c4:	blx	r3
    38c6:	ldr	r2, [sp, #76]	; 0x4c
    38c8:	mov	r6, r0
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    38ca:	str	r7, [sp, #60]	; 0x3c
    38cc:	ldr	r1, [pc, #412]	; (3a6c <MTPStorage_SD::removeFile(unsigned long, char*)+0x384>)
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    38ce:	cmp	r2, #0
    38d0:	beq.n	3968 <MTPStorage_SD::removeFile(unsigned long, char*)+0x280>
    38d2:	ldr	r3, [r2, #16]
    38d4:	subs	r3, #1
    38d6:	str	r3, [r2, #16]
    38d8:	cmp	r3, #0
    38da:	bne.n	3968 <MTPStorage_SD::removeFile(unsigned long, char*)+0x280>
    38dc:	ldr	r5, [sp, #76]	; 0x4c
    38de:	cmp	r5, #0
    38e0:	beq.n	3968 <MTPStorage_SD::removeFile(unsigned long, char*)+0x280>
    38e2:	ldr	r3, [r5, #0]
    38e4:	ldr	r2, [pc, #384]	; (3a68 <MTPStorage_SD::removeFile(unsigned long, char*)+0x380>)
    38e6:	ldr	r3, [r3, #32]
    38e8:	cmp	r3, r2
    38ea:	bne.w	3dce <MTPStorage_SD::removeFile(unsigned long, char*)+0x6e6>
    38ee:	ldr	r2, [r5, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    38f0:	str	r1, [r5, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    38f2:	cmp	r2, #0
    38f4:	beq.n	3960 <MTPStorage_SD::removeFile(unsigned long, char*)+0x278>
    38f6:	ldr	r3, [r2, #16]
    38f8:	subs	r3, #1
    38fa:	str	r3, [r2, #16]
    38fc:	cbnz	r3, 3960 <MTPStorage_SD::removeFile(unsigned long, char*)+0x278>
    38fe:	ldr.w	fp, [r5, #16]
    3902:	cmp.w	fp, #0
    3906:	beq.n	3960 <MTPStorage_SD::removeFile(unsigned long, char*)+0x278>
    3908:	ldr.w	r3, [fp]
    390c:	ldr	r2, [pc, #344]	; (3a68 <MTPStorage_SD::removeFile(unsigned long, char*)+0x380>)
    390e:	ldr	r3, [r3, #32]
    3910:	cmp	r3, r2
    3912:	bne.w	3e10 <MTPStorage_SD::removeFile(unsigned long, char*)+0x728>
    3916:	ldr.w	r2, [fp, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    391a:	str.w	r1, [fp]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    391e:	cbz	r2, 3958 <MTPStorage_SD::removeFile(unsigned long, char*)+0x270>
    3920:	ldr	r3, [r2, #16]
    3922:	subs	r3, #1
    3924:	str	r3, [r2, #16]
    3926:	cbnz	r3, 3958 <MTPStorage_SD::removeFile(unsigned long, char*)+0x270>
    3928:	ldr.w	r3, [fp, #16]
    392c:	cbz	r3, 3958 <MTPStorage_SD::removeFile(unsigned long, char*)+0x270>
    392e:	ldr	r2, [r3, #0]
    3930:	ldr	r1, [pc, #308]	; (3a68 <MTPStorage_SD::removeFile(unsigned long, char*)+0x380>)
    3932:	ldr	r2, [r2, #32]
    3934:	cmp	r2, r1
    3936:	bne.w	3e16 <MTPStorage_SD::removeFile(unsigned long, char*)+0x72e>
    393a:	ldr	r1, [r3, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    393c:	str	r7, [r3, #0]
    393e:	ldr.w	ip, [pc, #300]	; 3a6c <MTPStorage_SD::removeFile(unsigned long, char*)+0x384>
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    3942:	cbz	r1, 3950 <MTPStorage_SD::removeFile(unsigned long, char*)+0x268>
    3944:	ldr	r2, [r1, #16]
    3946:	subs	r2, #1
    3948:	str	r2, [r1, #16]
    394a:	cmp	r2, #0
    394c:	beq.w	3c30 <MTPStorage_SD::removeFile(unsigned long, char*)+0x548>
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
		invalidate();
	}
    3950:	mov	r0, r3
    3952:	movs	r1, #20
    3954:	bl	f6e0 <operator delete(void*, unsigned int)>
    3958:	mov	r0, fp
    395a:	movs	r1, #20
    395c:	bl	f6e0 <operator delete(void*, unsigned int)>
    3960:	mov	r0, r5
    3962:	movs	r1, #20
    3964:	bl	f6e0 <operator delete(void*, unsigned int)>
  {
    File f2;
    while(f2=f1.openNextFile())
    3968:	cmp	r6, #0
    396a:	beq.w	3dd8 <MTPStorage_SD::removeFile(unsigned long, char*)+0x6f0>
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
	}
	virtual const char* name() {
		return (f) ? f->name() : "";
    396e:	cmp	r4, #0
    3970:	beq.w	3d74 <MTPStorage_SD::removeFile(unsigned long, char*)+0x68c>
    3974:	ldr	r2, [r4, #0]
    3976:	ldr	r3, [pc, #248]	; (3a70 <MTPStorage_SD::removeFile(unsigned long, char*)+0x388>)
    3978:	ldr	r2, [r2, #72]	; 0x48
    397a:	cmp	r2, r3
    397c:	bne.w	3db0 <MTPStorage_SD::removeFile(unsigned long, char*)+0x6c8>
    3980:	ldr	r0, [r4, #16]
    3982:	cmp	r0, #0
    3984:	beq.w	3db8 <MTPStorage_SD::removeFile(unsigned long, char*)+0x6d0>
    3988:	ldr	r2, [r0, #0]
    398a:	ldr	r2, [r2, #72]	; 0x48
    398c:	cmp	r2, r3
    398e:	bne.w	3db2 <MTPStorage_SD::removeFile(unsigned long, char*)+0x6ca>
    3992:	ldr	r0, [r0, #16]
    3994:	cmp	r0, #0
    3996:	beq.w	3db8 <MTPStorage_SD::removeFile(unsigned long, char*)+0x6d0>
    399a:	ldr	r2, [r0, #0]
    399c:	ldr	r2, [r2, #72]	; 0x48
    399e:	cmp	r2, r3
    39a0:	bne.w	3db2 <MTPStorage_SD::removeFile(unsigned long, char*)+0x6ca>
    39a4:	ldr	r0, [r0, #16]
    39a6:	cmp	r0, #0
    39a8:	beq.w	3db8 <MTPStorage_SD::removeFile(unsigned long, char*)+0x6d0>
    39ac:	ldr	r2, [r0, #0]
    39ae:	ldr	r2, [r2, #72]	; 0x48
    39b0:	cmp	r2, r3
    39b2:	bne.w	3db2 <MTPStorage_SD::removeFile(unsigned long, char*)+0x6ca>
    39b6:	ldr	r0, [r0, #16]
    39b8:	cmp	r0, #0
    39ba:	beq.w	3db8 <MTPStorage_SD::removeFile(unsigned long, char*)+0x6d0>
    39be:	ldr	r2, [r0, #0]
    39c0:	ldr	r2, [r2, #72]	; 0x48
    39c2:	cmp	r2, r3
    39c4:	bne.w	3db2 <MTPStorage_SD::removeFile(unsigned long, char*)+0x6ca>
    39c8:	ldr	r0, [r0, #16]
    39ca:	cmp	r0, #0
    39cc:	beq.w	3db8 <MTPStorage_SD::removeFile(unsigned long, char*)+0x6d0>
    39d0:	ldr	r2, [r0, #0]
    39d2:	ldr	r2, [r2, #72]	; 0x48
    39d4:	cmp	r2, r3
    39d6:	bne.w	3db2 <MTPStorage_SD::removeFile(unsigned long, char*)+0x6ca>
    39da:	ldr	r0, [r0, #16]
    39dc:	cmp	r0, #0
    39de:	beq.w	3db8 <MTPStorage_SD::removeFile(unsigned long, char*)+0x6d0>
    39e2:	ldr	r3, [r0, #0]
    39e4:	ldr	r3, [r3, #72]	; 0x48
    39e6:	blx	r3
    39e8:	mov	r3, r0
    { sprintf(tname,"%s/%s",file,f2.name());
    39ea:	add	r5, sp, #80	; 0x50
    39ec:	ldr	r2, [sp, #4]
    39ee:	ldr	r1, [pc, #132]	; (3a74 <MTPStorage_SD::removeFile(unsigned long, char*)+0x38c>)
    39f0:	mov	r0, r5
    39f2:	bl	11224 <sprintf>
	}
	virtual bool isDirectory() {
		return (f) ? f->isDirectory() : false;
    39f6:	ldr	r3, [r4, #0]
    39f8:	ldr	r3, [r3, #76]	; 0x4c
    39fa:	cmp	r3, sl
    39fc:	bne.w	3daa <MTPStorage_SD::removeFile(unsigned long, char*)+0x6c2>
    3a00:	ldr	r0, [r4, #16]
    3a02:	cmp	r0, #0
    3a04:	beq.w	3d82 <MTPStorage_SD::removeFile(unsigned long, char*)+0x69a>
    3a08:	ldr	r3, [r0, #0]
    3a0a:	ldr	r3, [r3, #76]	; 0x4c
    3a0c:	cmp	r3, sl
    3a0e:	bne.w	3dac <MTPStorage_SD::removeFile(unsigned long, char*)+0x6c4>
    3a12:	ldr	r0, [r0, #16]
    3a14:	cmp	r0, #0
    3a16:	beq.w	3d82 <MTPStorage_SD::removeFile(unsigned long, char*)+0x69a>
    3a1a:	ldr	r3, [r0, #0]
    3a1c:	ldr	r3, [r3, #76]	; 0x4c
    3a1e:	cmp	r3, sl
    3a20:	bne.w	3dac <MTPStorage_SD::removeFile(unsigned long, char*)+0x6c4>
    3a24:	ldr	r0, [r0, #16]
    3a26:	cmp	r0, #0
    3a28:	beq.w	3d82 <MTPStorage_SD::removeFile(unsigned long, char*)+0x69a>
    3a2c:	ldr	r3, [r0, #0]
    3a2e:	ldr	r3, [r3, #76]	; 0x4c
    3a30:	cmp	r3, sl
    3a32:	bne.w	3dac <MTPStorage_SD::removeFile(unsigned long, char*)+0x6c4>
    3a36:	ldr	r0, [r0, #16]
    3a38:	cmp	r0, #0
    3a3a:	beq.w	3d82 <MTPStorage_SD::removeFile(unsigned long, char*)+0x69a>
    3a3e:	ldr	r3, [r0, #0]
    3a40:	ldr	r3, [r3, #76]	; 0x4c
    3a42:	cmp	r3, sl
    3a44:	bne.w	3dac <MTPStorage_SD::removeFile(unsigned long, char*)+0x6c4>
    3a48:	ldr	r0, [r0, #16]
    3a4a:	cmp	r0, #0
    3a4c:	beq.w	3d82 <MTPStorage_SD::removeFile(unsigned long, char*)+0x69a>
    3a50:	ldr	r3, [r0, #0]
    3a52:	ldr	r3, [r3, #76]	; 0x4c
    3a54:	cmp	r3, sl
    3a56:	bne.w	3dac <MTPStorage_SD::removeFile(unsigned long, char*)+0x6c4>
    3a5a:	ldr	r0, [r0, #16]
    3a5c:	cmp	r0, #0
    3a5e:	beq.w	3d82 <MTPStorage_SD::removeFile(unsigned long, char*)+0x69a>
    3a62:	b.n	3a80 <MTPStorage_SD::removeFile(unsigned long, char*)+0x398>
    3a64:	.word	0x00000149
    3a68:	.word	0x00000d69
    3a6c:	.word	0x20000074
    3a70:	.word	0x00000129
    3a74:	.word	0x2000030c
    3a78:	.word	0x0000013d
    3a7c:	.word	0x0000011d
    3a80:	ldr	r3, [r0, #0]
    3a82:	ldr	r3, [r3, #76]	; 0x4c
    3a84:	blx	r3
      if(f2.isDirectory()) removeFile(store,tname); else sd_remove(store,tname);
    3a86:	cmp	r0, #0
    3a88:	beq.w	3d82 <MTPStorage_SD::removeFile(unsigned long, char*)+0x69a>
    3a8c:	ldr	r1, [sp, #12]
    3a8e:	mov	r2, r5
    3a90:	ldr	r0, [sp, #8]
    3a92:	bl	36e8 <MTPStorage_SD::removeFile(unsigned long, char*)>
	}
	virtual File openNextFile(uint8_t mode=0) {
		return (f) ? f->openNextFile(mode) : *this;
    3a96:	ldr	r1, [sp, #56]	; 0x38
    3a98:	cmp	r1, #0
    3a9a:	bne.w	37c2 <MTPStorage_SD::removeFile(unsigned long, char*)+0xda>
    3a9e:	movs	r3, #0
    3aa0:	mov.w	r2, #1000	; 0x3e8
			//"File(File *file) constructor only accepts pointers "
			//"to derived classes, not File itself");
		f = file;
		if (f) f->refcount++;
	}
	File(const File &file) {
    3aa4:	str	r7, [sp, #60]	; 0x3c
    3aa6:	strb.w	r3, [sp, #64]	; 0x40
    3aaa:	strb.w	r3, [sp, #72]	; 0x48
		//Serial.println("File copy constructor");
		//static int copycount=0;
		//if (++copycount > 20) while (1) ;
		f = file.f;
    3aae:	str	r3, [sp, #76]	; 0x4c
    3ab0:	str	r2, [sp, #68]	; 0x44
    3ab2:	b.n	383a <MTPStorage_SD::removeFile(unsigned long, char*)+0x152>
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
    3ab4:	ldr	r4, [sp, #4]
    3ab6:	ldr.w	fp, [pc, #368]	; 3c28 <MTPStorage_SD::removeFile(unsigned long, char*)+0x540>
    3aba:	mov	r0, r4
    3abc:	bl	113c0 <strlen>
    3ac0:	mov	r1, r0
    3ac2:	mov	r0, r4
    3ac4:	bl	d7d4 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    3ac8:	ldr	r0, [pc, #344]	; (3c24 <MTPStorage_SD::removeFile(unsigned long, char*)+0x53c>)
    3aca:	bl	f5bc <Print::println()>
    bool sd_mkdir(uint32_t store, char *filename) {  return sdx[store]->mkdir(filename);  }
    bool sd_rename(uint32_t store, char *oldfilename, char *newfilename) { return sdx[store]->rename(oldfilename,newfilename);  }
    bool sd_remove(uint32_t store, const char *filename) {    Serial.println(filename);
return sdx[store]->remove(filename);  }
    3ace:	ldr.w	r0, [r9, #88]	; 0x58
    3ad2:	mov	r1, r4
    3ad4:	ldr	r3, [r0, #0]
    3ad6:	ldr	r3, [r3, #16]
    3ad8:	blx	r3
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    3ada:	ldr	r2, [sp, #56]	; 0x38
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    3adc:	str.w	fp, [sp, #40]	; 0x28
    3ae0:	ldr	r1, [pc, #324]	; (3c28 <MTPStorage_SD::removeFile(unsigned long, char*)+0x540>)
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    3ae2:	cmp	r2, #0
    3ae4:	beq.w	3c12 <MTPStorage_SD::removeFile(unsigned long, char*)+0x52a>
    3ae8:	ldr	r3, [r2, #16]
    3aea:	subs	r3, #1
    3aec:	str	r3, [r2, #16]
    3aee:	cmp	r3, #0
    3af0:	bne.w	3c12 <MTPStorage_SD::removeFile(unsigned long, char*)+0x52a>
    3af4:	ldr	r4, [sp, #56]	; 0x38
    3af6:	cmp	r4, #0
    3af8:	beq.w	3c12 <MTPStorage_SD::removeFile(unsigned long, char*)+0x52a>
    3afc:	ldr	r3, [r4, #0]
    3afe:	ldr	r0, [pc, #300]	; (3c2c <MTPStorage_SD::removeFile(unsigned long, char*)+0x544>)
    3b00:	ldr	r3, [r3, #32]
    3b02:	cmp	r3, r0
    3b04:	bne.w	3e1c <MTPStorage_SD::removeFile(unsigned long, char*)+0x734>
    3b08:	ldr	r2, [r4, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    3b0a:	str	r1, [r4, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    3b0c:	cmp	r2, #0
    3b0e:	beq.n	3c0a <MTPStorage_SD::removeFile(unsigned long, char*)+0x522>
    3b10:	ldr	r3, [r2, #16]
    3b12:	subs	r3, #1
    3b14:	str	r3, [r2, #16]
    3b16:	cmp	r3, #0
    3b18:	bne.n	3c0a <MTPStorage_SD::removeFile(unsigned long, char*)+0x522>
    3b1a:	ldr	r5, [r4, #16]
    3b1c:	cmp	r5, #0
    3b1e:	beq.n	3c0a <MTPStorage_SD::removeFile(unsigned long, char*)+0x522>
    3b20:	ldr	r3, [r5, #0]
    3b22:	ldr	r3, [r3, #32]
    3b24:	cmp	r3, r0
    3b26:	bne.w	3e30 <MTPStorage_SD::removeFile(unsigned long, char*)+0x748>
    3b2a:	ldr	r2, [r5, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    3b2c:	str	r1, [r5, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    3b2e:	cmp	r2, #0
    3b30:	beq.n	3c02 <MTPStorage_SD::removeFile(unsigned long, char*)+0x51a>
    3b32:	ldr	r3, [r2, #16]
    3b34:	subs	r3, #1
    3b36:	str	r3, [r2, #16]
    3b38:	cmp	r3, #0
    3b3a:	bne.n	3c02 <MTPStorage_SD::removeFile(unsigned long, char*)+0x51a>
    3b3c:	ldr	r6, [r5, #16]
    3b3e:	cmp	r6, #0
    3b40:	beq.n	3c02 <MTPStorage_SD::removeFile(unsigned long, char*)+0x51a>
    3b42:	ldr	r3, [r6, #0]
    3b44:	ldr	r3, [r3, #32]
    3b46:	cmp	r3, r0
    3b48:	bne.w	3e44 <MTPStorage_SD::removeFile(unsigned long, char*)+0x75c>
    3b4c:	ldr	r2, [r6, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    3b4e:	str.w	fp, [r6]
    3b52:	ldr	r1, [pc, #212]	; (3c28 <MTPStorage_SD::removeFile(unsigned long, char*)+0x540>)
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    3b54:	cmp	r2, #0
    3b56:	beq.n	3bfa <MTPStorage_SD::removeFile(unsigned long, char*)+0x512>
    3b58:	ldr	r3, [r2, #16]
    3b5a:	subs	r3, #1
    3b5c:	str	r3, [r2, #16]
    3b5e:	cmp	r3, #0
    3b60:	bne.n	3bfa <MTPStorage_SD::removeFile(unsigned long, char*)+0x512>
    3b62:	ldr	r7, [r6, #16]
    3b64:	cmp	r7, #0
    3b66:	beq.n	3bfa <MTPStorage_SD::removeFile(unsigned long, char*)+0x512>
    3b68:	ldr	r3, [r7, #0]
    3b6a:	ldr	r3, [r3, #32]
    3b6c:	cmp	r3, r0
    3b6e:	bne.w	3e4a <MTPStorage_SD::removeFile(unsigned long, char*)+0x762>
    3b72:	ldr	r2, [r7, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    3b74:	str	r1, [r7, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    3b76:	cmp	r2, #0
    3b78:	beq.n	3bf2 <MTPStorage_SD::removeFile(unsigned long, char*)+0x50a>
    3b7a:	ldr	r3, [r2, #16]
    3b7c:	subs	r3, #1
    3b7e:	str	r3, [r2, #16]
    3b80:	cmp	r3, #0
    3b82:	bne.n	3bf2 <MTPStorage_SD::removeFile(unsigned long, char*)+0x50a>
    3b84:	ldr.w	r8, [r7, #16]
    3b88:	cmp.w	r8, #0
    3b8c:	beq.n	3bf2 <MTPStorage_SD::removeFile(unsigned long, char*)+0x50a>
    3b8e:	ldr.w	r3, [r8]
    3b92:	ldr	r3, [r3, #32]
    3b94:	cmp	r3, r0
    3b96:	bne.w	3e6c <MTPStorage_SD::removeFile(unsigned long, char*)+0x784>
    3b9a:	ldr.w	r2, [r8, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    3b9e:	str.w	fp, [r8]
    3ba2:	ldr	r1, [pc, #132]	; (3c28 <MTPStorage_SD::removeFile(unsigned long, char*)+0x540>)
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    3ba4:	cbz	r2, 3bea <MTPStorage_SD::removeFile(unsigned long, char*)+0x502>
    3ba6:	ldr	r3, [r2, #16]
    3ba8:	subs	r3, #1
    3baa:	str	r3, [r2, #16]
    3bac:	cbnz	r3, 3bea <MTPStorage_SD::removeFile(unsigned long, char*)+0x502>
    3bae:	ldr.w	r9, [r8, #16]
    3bb2:	cmp.w	r9, #0
    3bb6:	beq.n	3bea <MTPStorage_SD::removeFile(unsigned long, char*)+0x502>
    3bb8:	ldr.w	r3, [r9]
    3bbc:	ldr	r3, [r3, #32]
    3bbe:	cmp	r3, r0
    3bc0:	bne.w	3e82 <MTPStorage_SD::removeFile(unsigned long, char*)+0x79a>
    3bc4:	ldr.w	r2, [r9, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    3bc8:	str.w	r1, [r9]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    3bcc:	cbz	r2, 3be2 <MTPStorage_SD::removeFile(unsigned long, char*)+0x4fa>
    3bce:	ldr	r3, [r2, #16]
    3bd0:	subs	r3, #1
    3bd2:	str	r3, [r2, #16]
    3bd4:	cbnz	r3, 3be2 <MTPStorage_SD::removeFile(unsigned long, char*)+0x4fa>
    3bd6:	ldr.w	r0, [r9, #16]
    3bda:	cbz	r0, 3be2 <MTPStorage_SD::removeFile(unsigned long, char*)+0x4fa>
    3bdc:	ldr	r3, [r0, #0]
    3bde:	ldr	r3, [r3, #32]
    3be0:	blx	r3
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
		invalidate();
	}
    3be2:	mov	r0, r9
    3be4:	movs	r1, #20
    3be6:	bl	f6e0 <operator delete(void*, unsigned int)>
    3bea:	mov	r0, r8
    3bec:	movs	r1, #20
    3bee:	bl	f6e0 <operator delete(void*, unsigned int)>
    3bf2:	mov	r0, r7
    3bf4:	movs	r1, #20
    3bf6:	bl	f6e0 <operator delete(void*, unsigned int)>
    3bfa:	mov	r0, r6
    3bfc:	movs	r1, #20
    3bfe:	bl	f6e0 <operator delete(void*, unsigned int)>
    3c02:	mov	r0, r5
    3c04:	movs	r1, #20
    3c06:	bl	f6e0 <operator delete(void*, unsigned int)>
    3c0a:	mov	r0, r4
    3c0c:	movs	r1, #20
    3c0e:	bl	f6e0 <operator delete(void*, unsigned int)>
  }
  else
  {
    sd_remove(store,file);
  }
}
    3c12:	add	sp, #340	; 0x154
    3c14:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	}
	virtual const char* name() {
		return (f) ? f->name() : "";
	}
	virtual bool isDirectory() {
		return (f) ? f->isDirectory() : false;
    3c18:	blx	r3
    3c1a:	b.n	37a8 <MTPStorage_SD::removeFile(unsigned long, char*)+0xc0>
	}
	virtual File openNextFile(uint8_t mode=0) {
		return (f) ? f->openNextFile(mode) : *this;
    3c1c:	movs	r2, #0
    3c1e:	add	r0, sp, #60	; 0x3c
    3c20:	blx	r3
    3c22:	b.n	383a <MTPStorage_SD::removeFile(unsigned long, char*)+0x152>
    3c24:	.word	0x20000c58
    3c28:	.word	0x20000074
    3c2c:	.word	0x00000d69
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    3c30:	ldr	r2, [r3, #16]
    3c32:	cmp	r2, #0
    3c34:	beq.w	3950 <MTPStorage_SD::removeFile(unsigned long, char*)+0x268>
    3c38:	ldr	r1, [r2, #0]
    3c3a:	ldr	r0, [pc, #588]	; (3e88 <MTPStorage_SD::removeFile(unsigned long, char*)+0x7a0>)
    3c3c:	ldr	r1, [r1, #32]
    3c3e:	cmp	r1, r0
    3c40:	bne.w	3e26 <MTPStorage_SD::removeFile(unsigned long, char*)+0x73e>
    3c44:	ldr.w	lr, [r2, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    3c48:	str.w	ip, [r2]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    3c4c:	cmp.w	lr, #0
    3c50:	beq.w	3d66 <MTPStorage_SD::removeFile(unsigned long, char*)+0x67e>
    3c54:	ldr.w	r1, [lr, #16]
    3c58:	subs	r1, #1
    3c5a:	str.w	r1, [lr, #16]
    3c5e:	cmp	r1, #0
    3c60:	bne.w	3d66 <MTPStorage_SD::removeFile(unsigned long, char*)+0x67e>
    3c64:	ldr	r1, [r2, #16]
    3c66:	str	r1, [sp, #16]
    3c68:	cmp	r1, #0
    3c6a:	beq.n	3d66 <MTPStorage_SD::removeFile(unsigned long, char*)+0x67e>
    3c6c:	ldr	r1, [sp, #16]
    3c6e:	ldr	r0, [pc, #536]	; (3e88 <MTPStorage_SD::removeFile(unsigned long, char*)+0x7a0>)
    3c70:	ldr	r1, [r1, #0]
    3c72:	ldr	r1, [r1, #32]
    3c74:	cmp	r1, r0
    3c76:	bne.w	3e36 <MTPStorage_SD::removeFile(unsigned long, char*)+0x74e>
    3c7a:	ldr	r1, [sp, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    3c7c:	ldr.w	ip, [pc, #536]	; 3e98 <MTPStorage_SD::removeFile(unsigned long, char*)+0x7b0>
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    3c80:	ldr.w	lr, [r1, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    3c84:	str	r7, [r1, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    3c86:	cmp.w	lr, #0
    3c8a:	beq.n	3d56 <MTPStorage_SD::removeFile(unsigned long, char*)+0x66e>
    3c8c:	ldr.w	r1, [lr, #16]
    3c90:	subs	r1, #1
    3c92:	str.w	r1, [lr, #16]
    3c96:	cmp	r1, #0
    3c98:	bne.n	3d56 <MTPStorage_SD::removeFile(unsigned long, char*)+0x66e>
    3c9a:	ldr	r1, [sp, #16]
    3c9c:	ldr	r1, [r1, #16]
    3c9e:	str	r1, [sp, #20]
    3ca0:	cmp	r1, #0
    3ca2:	beq.n	3d56 <MTPStorage_SD::removeFile(unsigned long, char*)+0x66e>
    3ca4:	ldr	r1, [sp, #20]
    3ca6:	ldr	r0, [pc, #480]	; (3e88 <MTPStorage_SD::removeFile(unsigned long, char*)+0x7a0>)
    3ca8:	ldr	r1, [r1, #0]
    3caa:	ldr	r1, [r1, #32]
    3cac:	cmp	r1, r0
    3cae:	bne.w	3e50 <MTPStorage_SD::removeFile(unsigned long, char*)+0x768>
    3cb2:	ldr	r0, [sp, #20]
    3cb4:	ldr.w	lr, [r0, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    3cb8:	str.w	ip, [r0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    3cbc:	cmp.w	lr, #0
    3cc0:	beq.n	3d46 <MTPStorage_SD::removeFile(unsigned long, char*)+0x65e>
    3cc2:	ldr.w	r1, [lr, #16]
    3cc6:	subs	r1, #1
    3cc8:	str.w	r1, [lr, #16]
    3ccc:	cmp	r1, #0
    3cce:	bne.n	3d46 <MTPStorage_SD::removeFile(unsigned long, char*)+0x65e>
    3cd0:	ldr	r1, [sp, #20]
    3cd2:	ldr	r1, [r1, #16]
    3cd4:	str	r1, [sp, #24]
    3cd6:	cmp	r1, #0
    3cd8:	beq.n	3d46 <MTPStorage_SD::removeFile(unsigned long, char*)+0x65e>
    3cda:	ldr	r1, [sp, #24]
    3cdc:	ldr	r0, [pc, #424]	; (3e88 <MTPStorage_SD::removeFile(unsigned long, char*)+0x7a0>)
    3cde:	ldr	r1, [r1, #0]
    3ce0:	ldr	r1, [r1, #32]
    3ce2:	cmp	r1, r0
    3ce4:	bne.w	3e5e <MTPStorage_SD::removeFile(unsigned long, char*)+0x776>
    3ce8:	ldr	r0, [sp, #24]
    3cea:	ldr.w	lr, [r0, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    3cee:	str.w	ip, [r0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    3cf2:	cmp.w	lr, #0
    3cf6:	beq.n	3d36 <MTPStorage_SD::removeFile(unsigned long, char*)+0x64e>
    3cf8:	ldr.w	r1, [lr, #16]
    3cfc:	subs	r1, #1
    3cfe:	str.w	r1, [lr, #16]
    3d02:	cbnz	r1, 3d36 <MTPStorage_SD::removeFile(unsigned long, char*)+0x64e>
    3d04:	ldr	r1, [sp, #24]
    3d06:	ldr	r1, [r1, #16]
    3d08:	cbz	r1, 3d36 <MTPStorage_SD::removeFile(unsigned long, char*)+0x64e>
    3d0a:	ldr	r0, [r1, #0]
    3d0c:	ldr	r0, [r0, #32]
    3d0e:	mov	lr, r0
    3d10:	ldr	r0, [pc, #372]	; (3e88 <MTPStorage_SD::removeFile(unsigned long, char*)+0x7a0>)
    3d12:	cmp	lr, r0
    3d14:	bne.w	3e72 <MTPStorage_SD::removeFile(unsigned long, char*)+0x78a>
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    3d18:	mov	r0, r1
    3d1a:	str	r2, [sp, #36]	; 0x24
    3d1c:	str	r3, [sp, #32]
    3d1e:	str.w	r7, [r0], #16
    3d22:	str	r1, [sp, #28]
		invalidate();
    3d24:	bl	1c24 <File::invalidate() [clone .isra.1]>
	}
    3d28:	ldr	r1, [sp, #28]
    3d2a:	mov	r0, r1
    3d2c:	movs	r1, #20
    3d2e:	bl	f6e0 <operator delete(void*, unsigned int)>
    3d32:	ldr	r3, [sp, #32]
    3d34:	ldr	r2, [sp, #36]	; 0x24
    3d36:	ldr	r0, [sp, #24]
    3d38:	movs	r1, #20
    3d3a:	str	r2, [sp, #32]
    3d3c:	str	r3, [sp, #28]
    3d3e:	bl	f6e0 <operator delete(void*, unsigned int)>
    3d42:	ldr	r3, [sp, #28]
    3d44:	ldr	r2, [sp, #32]
    3d46:	ldr	r0, [sp, #20]
    3d48:	movs	r1, #20
    3d4a:	str	r2, [sp, #28]
    3d4c:	str	r3, [sp, #24]
    3d4e:	bl	f6e0 <operator delete(void*, unsigned int)>
    3d52:	ldr	r3, [sp, #24]
    3d54:	ldr	r2, [sp, #28]
    3d56:	ldr	r0, [sp, #16]
    3d58:	movs	r1, #20
    3d5a:	str	r2, [sp, #24]
    3d5c:	str	r3, [sp, #20]
    3d5e:	bl	f6e0 <operator delete(void*, unsigned int)>
    3d62:	ldr	r3, [sp, #20]
    3d64:	ldr	r2, [sp, #24]
    3d66:	mov	r0, r2
    3d68:	movs	r1, #20
    3d6a:	str	r3, [sp, #16]
    3d6c:	bl	f6e0 <operator delete(void*, unsigned int)>
    3d70:	ldr	r3, [sp, #16]
    3d72:	b.n	3950 <MTPStorage_SD::removeFile(unsigned long, char*)+0x268>
  File f1=sd_open(store,file,0);
  if(f1.isDirectory())
  {
    File f2;
    while(f2=f1.openNextFile())
    { sprintf(tname,"%s/%s",file,f2.name());
    3d74:	add	r5, sp, #80	; 0x50
    3d76:	ldr	r3, [pc, #276]	; (3e8c <MTPStorage_SD::removeFile(unsigned long, char*)+0x7a4>)
    3d78:	ldr	r2, [sp, #4]
    3d7a:	ldr	r1, [pc, #276]	; (3e90 <MTPStorage_SD::removeFile(unsigned long, char*)+0x7a8>)
    3d7c:	mov	r0, r5
    3d7e:	bl	11224 <sprintf>
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
    3d82:	mov	r0, r5
    3d84:	bl	113c0 <strlen>
    3d88:	mov	r1, r0
    3d8a:	mov	r0, r5
    3d8c:	bl	d7d4 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    3d90:	ldr	r0, [pc, #256]	; (3e94 <MTPStorage_SD::removeFile(unsigned long, char*)+0x7ac>)
    3d92:	bl	f5bc <Print::println()>
    3d96:	ldr.w	r0, [r9, #88]	; 0x58
    3d9a:	mov	r1, r5
    3d9c:	ldr	r3, [r0, #0]
    3d9e:	ldr	r3, [r3, #16]
    3da0:	blx	r3
    3da2:	b.n	37ba <MTPStorage_SD::removeFile(unsigned long, char*)+0xd2>
    3da4:	ldr	r2, [sp, #76]	; 0x4c
	}
	virtual void close() {
		if (f) f->close();
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
    3da6:	movs	r6, #0
    3da8:	b.n	38ca <MTPStorage_SD::removeFile(unsigned long, char*)+0x1e2>
	}
	virtual const char* name() {
		return (f) ? f->name() : "";
	}
	virtual bool isDirectory() {
		return (f) ? f->isDirectory() : false;
    3daa:	mov	r0, r4
    3dac:	blx	r3
    3dae:	b.n	3a86 <MTPStorage_SD::removeFile(unsigned long, char*)+0x39e>
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
	}
	virtual const char* name() {
		return (f) ? f->name() : "";
    3db0:	mov	r0, r4
    3db2:	blx	r2
    3db4:	mov	r3, r0
    3db6:	b.n	39ea <MTPStorage_SD::removeFile(unsigned long, char*)+0x302>
    3db8:	ldr	r3, [pc, #208]	; (3e8c <MTPStorage_SD::removeFile(unsigned long, char*)+0x7a4>)
    3dba:	b.n	39ea <MTPStorage_SD::removeFile(unsigned long, char*)+0x302>
	}
	virtual void close() {
		if (f) f->close();
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
    3dbc:	blx	r3
    3dbe:	ldr	r2, [sp, #76]	; 0x4c
    3dc0:	mov	r6, r0
    3dc2:	b.n	38ca <MTPStorage_SD::removeFile(unsigned long, char*)+0x1e2>
    3dc4:	mov	r0, r4
    3dc6:	blx	r2
    3dc8:	ldr	r2, [sp, #76]	; 0x4c
    3dca:	mov	r6, r0
    3dcc:	b.n	38ca <MTPStorage_SD::removeFile(unsigned long, char*)+0x1e2>
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    3dce:	mov	r0, r5
    3dd0:	blx	r3
  char tname[MAX_FILENAME_LEN];
  File f1=sd_open(store,file,0);
  if(f1.isDirectory())
  {
    File f2;
    while(f2=f1.openNextFile())
    3dd2:	cmp	r6, #0
    3dd4:	bne.w	396e <MTPStorage_SD::removeFile(unsigned long, char*)+0x286>
    bool sd_rmdir(uint32_t store, char *filename) { return sdx[store]->rmdir(filename);  }
    3dd8:	ldr.w	r0, [r9, #88]	; 0x58
    3ddc:	mov	fp, r7
    3dde:	ldr	r1, [sp, #4]
    3de0:	ldr	r3, [r0, #0]
    3de2:	ldr	r3, [r3, #20]
    3de4:	blx	r3
    3de6:	cmp	r4, #0
    3de8:	beq.w	3ada <MTPStorage_SD::removeFile(unsigned long, char*)+0x3f2>
    3dec:	ldr	r3, [r4, #16]
    3dee:	subs	r3, #1
    3df0:	str	r3, [r4, #16]
    3df2:	cmp	r3, #0
    3df4:	bne.w	3ada <MTPStorage_SD::removeFile(unsigned long, char*)+0x3f2>
    3df8:	ldr	r3, [r4, #0]
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
		invalidate();
	}
    3dfa:	mov	r0, r4
    3dfc:	ldr	r2, [pc, #136]	; (3e88 <MTPStorage_SD::removeFile(unsigned long, char*)+0x7a0>)
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    3dfe:	ldr	r3, [r3, #32]
    3e00:	cmp	r3, r2
    3e02:	bne.n	3e22 <MTPStorage_SD::removeFile(unsigned long, char*)+0x73a>
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
		invalidate();
	}
    3e04:	movs	r1, #20
    3e06:	bl	f6e0 <operator delete(void*, unsigned int)>
    3e0a:	b.n	3ada <MTPStorage_SD::removeFile(unsigned long, char*)+0x3f2>
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    3e0c:	blx	r3
    3e0e:	b.n	3858 <MTPStorage_SD::removeFile(unsigned long, char*)+0x170>
    3e10:	mov	r0, fp
    3e12:	blx	r3
    3e14:	b.n	3960 <MTPStorage_SD::removeFile(unsigned long, char*)+0x278>
    3e16:	mov	r0, r3
    3e18:	blx	r2
    3e1a:	b.n	3958 <MTPStorage_SD::removeFile(unsigned long, char*)+0x270>
    3e1c:	mov	r0, r4
    3e1e:	blx	r3
  }
  else
  {
    sd_remove(store,file);
  }
}
    3e20:	b.n	3c12 <MTPStorage_SD::removeFile(unsigned long, char*)+0x52a>
    3e22:	blx	r3
    3e24:	b.n	3ada <MTPStorage_SD::removeFile(unsigned long, char*)+0x3f2>
    3e26:	str	r3, [sp, #16]
    3e28:	mov	r0, r2
    3e2a:	blx	r1
    3e2c:	ldr	r3, [sp, #16]
    3e2e:	b.n	3950 <MTPStorage_SD::removeFile(unsigned long, char*)+0x268>
    3e30:	mov	r0, r5
    3e32:	blx	r3
    3e34:	b.n	3c0a <MTPStorage_SD::removeFile(unsigned long, char*)+0x522>
    3e36:	str	r2, [sp, #24]
    3e38:	str	r3, [sp, #20]
    3e3a:	ldr	r0, [sp, #16]
    3e3c:	blx	r1
    3e3e:	ldr	r2, [sp, #24]
    3e40:	ldr	r3, [sp, #20]
    3e42:	b.n	3d66 <MTPStorage_SD::removeFile(unsigned long, char*)+0x67e>
    3e44:	mov	r0, r6
    3e46:	blx	r3
    3e48:	b.n	3c02 <MTPStorage_SD::removeFile(unsigned long, char*)+0x51a>
    3e4a:	mov	r0, r7
    3e4c:	blx	r3
    3e4e:	b.n	3bfa <MTPStorage_SD::removeFile(unsigned long, char*)+0x512>
    3e50:	str	r2, [sp, #28]
    3e52:	str	r3, [sp, #24]
    3e54:	ldr	r0, [sp, #20]
    3e56:	blx	r1
    3e58:	ldr	r2, [sp, #28]
    3e5a:	ldr	r3, [sp, #24]
    3e5c:	b.n	3d56 <MTPStorage_SD::removeFile(unsigned long, char*)+0x66e>
    3e5e:	str	r2, [sp, #32]
    3e60:	str	r3, [sp, #28]
    3e62:	ldr	r0, [sp, #24]
    3e64:	blx	r1
    3e66:	ldr	r2, [sp, #32]
    3e68:	ldr	r3, [sp, #28]
    3e6a:	b.n	3d46 <MTPStorage_SD::removeFile(unsigned long, char*)+0x65e>
    3e6c:	mov	r0, r8
    3e6e:	blx	r3
    3e70:	b.n	3bf2 <MTPStorage_SD::removeFile(unsigned long, char*)+0x50a>
    3e72:	str	r2, [sp, #32]
    3e74:	mov	r0, r1
    3e76:	str	r3, [sp, #28]
    3e78:	mov	r3, lr
    3e7a:	blx	r3
    3e7c:	ldr	r2, [sp, #32]
    3e7e:	ldr	r3, [sp, #28]
    3e80:	b.n	3d36 <MTPStorage_SD::removeFile(unsigned long, char*)+0x64e>
    3e82:	mov	r0, r9
    3e84:	blx	r3
    3e86:	b.n	3bea <MTPStorage_SD::removeFile(unsigned long, char*)+0x502>
    3e88:	.word	0x00000d69
    3e8c:	.word	0x2000016c
    3e90:	.word	0x2000030c
    3e94:	.word	0x20000c58
    3e98:	.word	0x20000074

00003e9c <MTPStorage_SD::DeleteObject(unsigned long) [clone .part.9] [clone .constprop.11]>:

  bool MTPStorage_SD::DeleteObject(uint32_t object)
    3e9c:	push	{r4, r5, r6, r7, lr}
    3e9e:	subw	sp, sp, #1348	; 0x544
    3ea2:	mov	r5, r0
    3ea4:	mov	r6, r1
  {
    if(object==0xFFFFFFFFUL) return true; // don't do anything if trying to delete a root directory see below

    // first create full filename
    char filename[MAX_FILENAME_LEN];
    ConstructFilename(object, filename, MAX_FILENAME_LEN);
    3ea6:	mov.w	r3, #256	; 0x100
    3eaa:	add	r2, sp, #272	; 0x110
    3eac:	bl	2688 <MTPStorage_SD::ConstructFilename(int, char*, int)>

    Record r = ReadIndexRecord(object);
    3eb0:	mov	r2, r6
    3eb2:	mov	r1, r5
    3eb4:	add	r0, sp, #528	; 0x210
    3eb6:	bl	2228 <MTPStorage_SD::ReadIndexRecord(unsigned long)>

    // remove file from storage (assume it is always working)
    mtp_lock_storage(true);
    removeFile(r.store,filename);
    3eba:	add	r2, sp, #272	; 0x110
    3ebc:	ldrh.w	r1, [sp, #542]	; 0x21e
    3ec0:	mov	r0, r5
    3ec2:	bl	36e8 <MTPStorage_SD::removeFile(unsigned long, char*)>
    mtp_lock_storage(false);

    // mark object as deleted
    r.name[0]=0;
    3ec6:	movs	r3, #0
    WriteIndexRecord(object, r);
    3ec8:	add	r2, sp, #528	; 0x210
    3eca:	mov	r1, r6
    3ecc:	mov	r0, r5
    mtp_lock_storage(true);
    removeFile(r.store,filename);
    mtp_lock_storage(false);

    // mark object as deleted
    r.name[0]=0;
    3ece:	strb.w	r3, [sp, #544]	; 0x220
    WriteIndexRecord(object, r);
    3ed2:	bl	2058 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    
    // update index file
    Record t = ReadIndexRecord(r.parent);
    3ed6:	ldr	r2, [sp, #528]	; 0x210
    3ed8:	mov	r1, r5
    3eda:	add	r0, sp, #800	; 0x320
    3edc:	bl	2228 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    if(t.child==object)
    3ee0:	ldr	r7, [sp, #804]	; 0x324
    3ee2:	cmp	r6, r7
    3ee4:	beq.n	3f36 <MTPStorage_SD::DeleteObject(unsigned long) [clone .part.9] [clone .constprop.11]+0x9a>
    }
    else
    { // link junger to older sibling
      // find junger sibling
      uint32_t is = t.child;
      Record x = ReadIndexRecord(is);
    3ee6:	mov	r2, r7
    3ee8:	mov	r1, r5
    3eea:	add.w	r0, sp, #1072	; 0x430
    3eee:	bl	2228 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
      while((x.sibling != object)) { is=x.sibling; x=ReadIndexRecord(is);}
    3ef2:	ldr.w	r4, [sp, #1080]	; 0x438
    3ef6:	cmp	r6, r4
    3ef8:	bne.n	3efe <MTPStorage_SD::DeleteObject(unsigned long) [clone .part.9] [clone .constprop.11]+0x62>
    3efa:	b.n	3f4a <MTPStorage_SD::DeleteObject(unsigned long) [clone .part.9] [clone .constprop.11]+0xae>
    3efc:	mov	r4, r3
    3efe:	mov	r2, r4
    3f00:	mov	r1, r5
    3f02:	mov	r0, sp
    3f04:	bl	2228 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    3f08:	mov.w	r2, #272	; 0x110
    3f0c:	mov	r1, sp
    3f0e:	add.w	r0, sp, #1072	; 0x430
    3f12:	bl	d064 <memcpy>
    3f16:	ldr.w	r3, [sp, #1080]	; 0x438
    3f1a:	cmp	r6, r3
    3f1c:	bne.n	3efc <MTPStorage_SD::DeleteObject(unsigned long) [clone .part.9] [clone .constprop.11]+0x60>
      // is points now to junder sibling
      x.sibling = r.sibling;
      WriteIndexRecord(is, x);
    3f1e:	mov	r0, r5
      // find junger sibling
      uint32_t is = t.child;
      Record x = ReadIndexRecord(is);
      while((x.sibling != object)) { is=x.sibling; x=ReadIndexRecord(is);}
      // is points now to junder sibling
      x.sibling = r.sibling;
    3f20:	ldr	r3, [sp, #536]	; 0x218
      WriteIndexRecord(is, x);
    3f22:	add.w	r2, sp, #1072	; 0x430
    3f26:	mov	r1, r4
      // find junger sibling
      uint32_t is = t.child;
      Record x = ReadIndexRecord(is);
      while((x.sibling != object)) { is=x.sibling; x=ReadIndexRecord(is);}
      // is points now to junder sibling
      x.sibling = r.sibling;
    3f28:	str.w	r3, [sp, #1080]	; 0x438
      WriteIndexRecord(is, x);
    3f2c:	bl	2058 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    }
    return 1;
  }
    3f30:	addw	sp, sp, #1348	; 0x544
    3f34:	pop	{r4, r5, r6, r7, pc}
    // update index file
    Record t = ReadIndexRecord(r.parent);
    if(t.child==object)
    { // we are the jungest, simply relink parent to older sibling
      t.child = r.sibling;
      WriteIndexRecord(r.parent, t);
    3f36:	mov	r0, r5
    
    // update index file
    Record t = ReadIndexRecord(r.parent);
    if(t.child==object)
    { // we are the jungest, simply relink parent to older sibling
      t.child = r.sibling;
    3f38:	ldr	r3, [sp, #536]	; 0x218
      WriteIndexRecord(r.parent, t);
    3f3a:	add	r2, sp, #800	; 0x320
    3f3c:	ldr	r1, [sp, #528]	; 0x210
    
    // update index file
    Record t = ReadIndexRecord(r.parent);
    if(t.child==object)
    { // we are the jungest, simply relink parent to older sibling
      t.child = r.sibling;
    3f3e:	str	r3, [sp, #804]	; 0x324
      WriteIndexRecord(r.parent, t);
    3f40:	bl	2058 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
      // is points now to junder sibling
      x.sibling = r.sibling;
      WriteIndexRecord(is, x);
    }
    return 1;
  }
    3f44:	addw	sp, sp, #1348	; 0x544
    3f48:	pop	{r4, r5, r6, r7, pc}
    else
    { // link junger to older sibling
      // find junger sibling
      uint32_t is = t.child;
      Record x = ReadIndexRecord(is);
      while((x.sibling != object)) { is=x.sibling; x=ReadIndexRecord(is);}
    3f4a:	mov	r4, r7
    3f4c:	b.n	3f1e <MTPStorage_SD::DeleteObject(unsigned long) [clone .part.9] [clone .constprop.11]+0x82>
    3f4e:	nop

00003f50 <MTPStorage_SD::DeleteObject(unsigned long)>:
  }
}

  bool MTPStorage_SD::DeleteObject(uint32_t object)
  {
    if(object==0xFFFFFFFFUL) return true; // don't do anything if trying to delete a root directory see below
    3f50:	adds	r2, r1, #1
    3f52:	beq.n	3f5e <MTPStorage_SD::DeleteObject(unsigned long)+0xe>
    sd_remove(store,file);
  }
}

  bool MTPStorage_SD::DeleteObject(uint32_t object)
  {
    3f54:	push	{r3, lr}
    3f56:	bl	3e9c <MTPStorage_SD::DeleteObject(unsigned long) [clone .part.9] [clone .constprop.11]>
      // is points now to junder sibling
      x.sibling = r.sibling;
      WriteIndexRecord(is, x);
    }
    return 1;
  }
    3f5a:	movs	r0, #1
    3f5c:	pop	{r3, pc}
    3f5e:	movs	r0, #1
    3f60:	bx	lr
    3f62:	nop

00003f64 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)>:
    }

    uint32_t sd_getFSCount(void) {return fsCount;}
    const char *sd_getFSName(uint32_t store) { return sd_name[store];}

    File sd_open(uint32_t store, const char *filename, uint32_t mode) { return sdx[store]->open(filename,mode);  }
    3f64:	add.w	r1, r0, r1, lsl #2
    3f68:	ldr	r1, [r1, #84]	; 0x54
  WriteIndexRecord(newHandle,p2);
  return true;
}
/************************************** mSD_Base *******************************/
bool mSD_Base::sd_copy(uint32_t store0, char *oldfilename, uint32_t store1, char *newfilename)
{
    3f6a:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3f6e:	ldr	r4, [r1, #0]
    3f70:	subw	sp, sp, #2092	; 0x82c
    3f74:	mov	r6, r0
    3f76:	mov	r7, r3
    3f78:	mov	r0, sp
    3f7a:	movs	r3, #0
    3f7c:	ldr	r4, [r4, #0]
    3f7e:	blx	r4
	}
	virtual void close() {
		if (f) f->close();
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
    3f80:	ldr	r2, [sp, #16]
    3f82:	cmp	r2, #0
    3f84:	beq.w	43ae <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x44a>
    3f88:	ldr	r3, [r2, #0]
    3f8a:	ldr	r5, [pc, #624]	; (41fc <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x298>)
    3f8c:	ldr	r3, [r3, #68]	; 0x44
    3f8e:	cmp	r3, r5
    3f90:	bne.w	430c <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x3a8>
    3f94:	ldr	r0, [r2, #16]
    3f96:	cmp	r0, #0
    3f98:	beq.w	41bc <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x258>
    3f9c:	ldr	r3, [r0, #0]
    3f9e:	ldr	r3, [r3, #68]	; 0x44
    3fa0:	cmp	r3, r5
    3fa2:	bne.w	430e <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x3aa>
    3fa6:	ldr	r0, [r0, #16]
    3fa8:	cmp	r0, #0
    3faa:	beq.w	41bc <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x258>
    3fae:	ldr	r3, [r0, #0]
    3fb0:	ldr	r3, [r3, #68]	; 0x44
    3fb2:	cmp	r3, r5
    3fb4:	bne.w	430e <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x3aa>
    3fb8:	ldr	r0, [r0, #16]
    3fba:	cmp	r0, #0
    3fbc:	beq.w	41bc <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x258>
    3fc0:	ldr	r3, [r0, #0]
    3fc2:	ldr	r3, [r3, #68]	; 0x44
    3fc4:	cmp	r3, r5
    3fc6:	bne.w	430e <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x3aa>
    3fca:	ldr	r0, [r0, #16]
    3fcc:	cmp	r0, #0
    3fce:	beq.w	41bc <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x258>
    3fd2:	ldr	r3, [r0, #0]
    3fd4:	ldr	r3, [r3, #68]	; 0x44
    3fd6:	cmp	r3, r5
    3fd8:	bne.w	430e <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x3aa>
    3fdc:	ldr	r0, [r0, #16]
    3fde:	cmp	r0, #0
    3fe0:	beq.w	41bc <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x258>
    3fe4:	ldr	r3, [r0, #0]
    3fe6:	ldr	r3, [r3, #68]	; 0x44
    3fe8:	cmp	r3, r5
    3fea:	bne.w	430e <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x3aa>
    3fee:	ldr	r0, [r0, #16]
    3ff0:	cmp	r0, #0
    3ff2:	beq.w	41bc <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x258>
    3ff6:	ldr	r3, [r0, #0]
    3ff8:	ldr	r3, [r3, #68]	; 0x44
    3ffa:	cmp	r3, r5
    3ffc:	bne.w	430e <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x3aa>
    4000:	ldr	r0, [r0, #16]
    4002:	cmp	r0, #0
    4004:	beq.w	41bc <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x258>
    4008:	ldr	r3, [r0, #0]
    400a:	ldr	r3, [r3, #68]	; 0x44
    400c:	blx	r3
    400e:	mov	r4, r0
  #if DEBUG>1
    Serial.print("From "); Serial.print(store0); Serial.print(": ");Serial.println(oldfilename);
    Serial.print("To   "); Serial.print(store1); Serial.print(": ");Serial.println(newfilename);
  #endif

  File f1 = sd_open(store0,oldfilename,FILE_READ); if(!f1) {DBG_FAIL_MACRO; return false;}
    4010:	cmp	r4, #0
    4012:	beq.w	47f6 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x892>
    4016:	add.w	r6, r6, r7, lsl #2
    401a:	add	r0, sp, #20
    401c:	movs	r3, #2
    401e:	ldr.w	r2, [sp, #2128]	; 0x850
    4022:	ldr	r1, [r6, #84]	; 0x54
    4024:	ldr	r4, [r1, #0]
    4026:	ldr	r4, [r4, #0]
    4028:	blx	r4
    402a:	ldr	r0, [sp, #36]	; 0x24
    402c:	cmp	r0, #0
    402e:	beq.w	4314 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x3b0>
    4032:	ldr	r3, [r0, #0]
    4034:	ldr	r3, [r3, #68]	; 0x44
    4036:	cmp	r3, r5
    4038:	bne.w	44de <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x57a>
    403c:	ldr	r0, [r0, #16]
    403e:	cmp	r0, #0
    4040:	beq.w	4314 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x3b0>
    4044:	ldr	r3, [r0, #0]
    4046:	ldr	r3, [r3, #68]	; 0x44
    4048:	cmp	r3, r5
    404a:	bne.w	44de <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x57a>
    404e:	ldr	r0, [r0, #16]
    4050:	cmp	r0, #0
    4052:	beq.w	4314 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x3b0>
    4056:	ldr	r3, [r0, #0]
    4058:	ldr	r3, [r3, #68]	; 0x44
    405a:	cmp	r3, r5
    405c:	bne.w	44de <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x57a>
    4060:	ldr	r0, [r0, #16]
    4062:	cmp	r0, #0
    4064:	beq.w	4314 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x3b0>
    4068:	ldr	r3, [r0, #0]
    406a:	ldr	r3, [r3, #68]	; 0x44
    406c:	cmp	r3, r5
    406e:	bne.w	44de <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x57a>
    4072:	ldr	r0, [r0, #16]
    4074:	cmp	r0, #0
    4076:	beq.w	4314 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x3b0>
    407a:	ldr	r3, [r0, #0]
    407c:	ldr	r3, [r3, #68]	; 0x44
    407e:	cmp	r3, r5
    4080:	bne.w	44de <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x57a>
    4084:	ldr	r0, [r0, #16]
    4086:	cmp	r0, #0
    4088:	beq.w	4314 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x3b0>
    408c:	ldr	r3, [r0, #0]
    408e:	ldr	r3, [r3, #68]	; 0x44
    4090:	cmp	r3, r5
    4092:	bne.w	44de <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x57a>
    4096:	ldr	r0, [r0, #16]
    4098:	cmp	r0, #0
    409a:	beq.w	4314 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x3b0>
    409e:	ldr	r3, [r0, #0]
    40a0:	ldr	r3, [r3, #68]	; 0x44
    40a2:	cmp	r3, r5
    40a4:	bne.w	44de <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x57a>
    40a8:	ldr	r0, [r0, #16]
    40aa:	cmp	r0, #0
    40ac:	beq.w	4314 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x3b0>
    40b0:	ldr	r3, [r0, #0]
    40b2:	ldr	r3, [r3, #68]	; 0x44
    40b4:	cmp	r3, r5
    40b6:	bne.w	44de <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x57a>
    40ba:	ldr	r0, [r0, #16]
    40bc:	cmp	r0, #0
    40be:	beq.w	4314 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x3b0>
    40c2:	ldr	r3, [r0, #0]
    40c4:	ldr	r3, [r3, #68]	; 0x44
    40c6:	cmp	r3, r5
    40c8:	bne.w	44de <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x57a>
    40cc:	ldr	r0, [r0, #16]
    40ce:	cmp	r0, #0
    40d0:	beq.w	4314 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x3b0>
    40d4:	ldr	r3, [r0, #0]
    40d6:	ldr	r3, [r3, #68]	; 0x44
    40d8:	cmp	r3, r5
    40da:	bne.w	44de <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x57a>
    40de:	ldr	r0, [r0, #16]
    40e0:	cmp	r0, #0
    40e2:	beq.w	4314 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x3b0>
    40e6:	ldr	r3, [r0, #0]
    40e8:	ldr	r3, [r3, #68]	; 0x44
    40ea:	blx	r3
  File f2 = sd_open(store1,newfilename,FILE_WRITE_BEGIN);
  if(!f2) { f1.close(); {DBG_FAIL_MACRO; return false;}}
    40ec:	cmp	r0, #0
    40ee:	beq.w	4314 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x3b0>
    40f2:	mov.w	r4, #4294967295
    40f6:	ldr	r5, [pc, #264]	; (4200 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x29c>)
	}
	virtual size_t write(const void *buf, size_t size) {
		return (f) ? f->write(buf, size) : 0;
	}
	virtual int available() {
		return (f) ? f->available() : 0;
    40f8:	ldr	r3, [sp, #16]
    40fa:	cmp	r3, #0
    40fc:	beq.w	46fa <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x796>
    4100:	ldr	r1, [r3, #0]
    4102:	ldr	r2, [r1, #16]
    4104:	cmp	r2, r5
    4106:	bne.w	46ec <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x788>
    410a:	ldr	r2, [r3, #16]
    410c:	cmp	r2, #0
    410e:	beq.w	46f2 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x78e>
    4112:	ldr	r0, [r2, #0]
    4114:	ldr	r6, [r0, #16]
    4116:	cmp	r6, r5
    4118:	bne.w	4594 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x630>
    411c:	ldr	r0, [r2, #16]
    411e:	cmp	r0, #0
    4120:	beq.w	44e2 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x57e>
    4124:	ldr	r6, [r0, #0]
    4126:	ldr	r6, [r6, #16]
    4128:	cmp	r6, r5
    412a:	bne.w	4596 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x632>
    412e:	ldr	r0, [r0, #16]
    4130:	cmp	r0, #0
    4132:	beq.w	44e2 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x57e>
    4136:	ldr	r6, [r0, #0]
    4138:	ldr	r6, [r6, #16]
    413a:	cmp	r6, r5
    413c:	bne.w	4596 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x632>
    4140:	ldr	r0, [r0, #16]
    4142:	cmp	r0, #0
    4144:	beq.w	44e2 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x57e>
    4148:	ldr	r6, [r0, #0]
    414a:	ldr	r6, [r6, #16]
    414c:	cmp	r6, r5
    414e:	bne.w	4596 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x632>
    4152:	ldr	r0, [r0, #16]
    4154:	cmp	r0, #0
    4156:	beq.w	44e2 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x57e>
    415a:	ldr	r6, [r0, #0]
    415c:	ldr	r6, [r6, #16]
    415e:	cmp	r6, r5
    4160:	bne.w	4596 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x632>
    4164:	ldr	r0, [r0, #16]
    4166:	cmp	r0, #0
    4168:	beq.w	44e2 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x57e>
    416c:	ldr	r6, [r0, #0]
    416e:	ldr	r6, [r6, #16]
    4170:	cmp	r6, r5
    4172:	bne.w	4596 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x632>
    4176:	ldr	r0, [r0, #16]
    4178:	cmp	r0, #0
    417a:	beq.w	44e2 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x57e>
    417e:	ldr	r6, [r0, #0]
    4180:	ldr	r6, [r6, #16]
    4182:	cmp	r6, r5
    4184:	bne.w	4596 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x632>
    4188:	ldr	r0, [r0, #16]
    418a:	cmp	r0, #0
    418c:	beq.w	44e2 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x57e>
    4190:	ldr	r6, [r0, #0]
    4192:	ldr	r6, [r6, #16]
    4194:	cmp	r6, r5
    4196:	bne.w	4596 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x632>
    419a:	ldr	r0, [r0, #16]
    419c:	cmp	r0, #0
    419e:	beq.w	44e2 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x57e>
    41a2:	ldr	r6, [r0, #0]
    41a4:	ldr	r6, [r6, #16]
    41a6:	cmp	r6, r5
    41a8:	bne.w	4596 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x632>
    41ac:	ldr	r0, [r0, #16]
    41ae:	cmp	r0, #0
    41b0:	beq.w	44e2 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x57e>
    41b4:	ldr	r3, [r0, #0]
    41b6:	ldr	r3, [r3, #16]
    41b8:	blx	r3
    41ba:	b.n	4598 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x634>
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    41bc:	ldr	r6, [pc, #68]	; (4204 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x2a0>)
    41be:	movs	r4, #0
    41c0:	str	r6, [sp, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    41c2:	ldr	r3, [r2, #16]
    41c4:	subs	r3, #1
    41c6:	str	r3, [r2, #16]
    41c8:	cbnz	r3, 41f0 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x28c>
    41ca:	ldr	r5, [sp, #16]
    41cc:	cbz	r5, 41f0 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x28c>
    41ce:	ldr	r3, [r5, #0]
    41d0:	ldr	r2, [pc, #52]	; (4208 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x2a4>)
    41d2:	ldr	r3, [r3, #32]
    41d4:	cmp	r3, r2
    41d6:	bne.w	478a <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x826>
    41da:	ldr	r1, [r5, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    41dc:	str	r6, [r5, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    41de:	cbz	r1, 41e8 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x284>
    41e0:	ldr	r3, [r1, #16]
    41e2:	subs	r3, #1
    41e4:	str	r3, [r1, #16]
    41e6:	cbz	r3, 420c <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x2a8>
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
		invalidate();
	}
    41e8:	mov	r0, r5
    41ea:	movs	r1, #20
    41ec:	bl	f6e0 <operator delete(void*, unsigned int)>
  // close all files
  f1.close();
  f2.close();
  if(nd<0) {DBG_FAIL_MACRO; return false;}
  return true;
}
    41f0:	mov	r0, r4
    41f2:	addw	sp, sp, #2092	; 0x82c
    41f6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    41fa:	nop
    41fc:	.word	0x0000011d
    4200:	.word	0x000000a5
    4204:	.word	0x20000074
    4208:	.word	0x00000d69
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    420c:	ldr	r7, [r5, #16]
    420e:	cmp	r7, #0
    4210:	beq.n	41e8 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x284>
    4212:	ldr	r3, [r7, #0]
    4214:	ldr	r3, [r3, #32]
    4216:	cmp	r3, r2
    4218:	bne.w	47ac <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x848>
    421c:	ldr	r1, [r7, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    421e:	str	r6, [r7, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    4220:	cmp	r1, #0
    4222:	beq.n	4302 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x39e>
    4224:	ldr	r3, [r1, #16]
    4226:	subs	r3, #1
    4228:	str	r3, [r1, #16]
    422a:	cmp	r3, #0
    422c:	bne.n	4302 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x39e>
    422e:	ldr.w	r8, [r7, #16]
    4232:	cmp.w	r8, #0
    4236:	beq.n	4302 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x39e>
    4238:	ldr.w	r3, [r8]
    423c:	ldr	r3, [r3, #32]
    423e:	cmp	r3, r2
    4240:	bne.w	47d2 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x86e>
    4244:	ldr.w	r1, [r8, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    4248:	str.w	r6, [r8]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    424c:	cmp	r1, #0
    424e:	beq.n	42fa <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x396>
    4250:	ldr	r3, [r1, #16]
    4252:	subs	r3, #1
    4254:	str	r3, [r1, #16]
    4256:	cmp	r3, #0
    4258:	bne.n	42fa <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x396>
    425a:	ldr.w	r9, [r8, #16]
    425e:	cmp.w	r9, #0
    4262:	beq.n	42fa <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x396>
    4264:	ldr.w	r3, [r9]
    4268:	ldr	r3, [r3, #32]
    426a:	cmp	r3, r2
    426c:	bne.w	47d8 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x874>
    4270:	ldr.w	r1, [r9, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    4274:	str.w	r6, [r9]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    4278:	cmp	r1, #0
    427a:	beq.n	42f2 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x38e>
    427c:	ldr	r3, [r1, #16]
    427e:	subs	r3, #1
    4280:	str	r3, [r1, #16]
    4282:	cmp	r3, #0
    4284:	bne.n	42f2 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x38e>
    4286:	ldr.w	sl, [r9, #16]
    428a:	cmp.w	sl, #0
    428e:	beq.n	42f2 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x38e>
    4290:	ldr.w	r3, [sl]
    4294:	ldr	r3, [r3, #32]
    4296:	cmp	r3, r2
    4298:	bne.w	47ea <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x886>
    429c:	ldr.w	r1, [sl, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    42a0:	str.w	r6, [sl]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    42a4:	cbz	r1, 42ea <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x386>
    42a6:	ldr	r3, [r1, #16]
    42a8:	subs	r3, #1
    42aa:	str	r3, [r1, #16]
    42ac:	cbnz	r3, 42ea <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x386>
    42ae:	ldr.w	fp, [sl, #16]
    42b2:	cmp.w	fp, #0
    42b6:	beq.n	42ea <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x386>
    42b8:	ldr.w	r3, [fp]
    42bc:	ldr	r3, [r3, #32]
    42be:	cmp	r3, r2
    42c0:	bne.w	47f0 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x88c>
    42c4:	ldr.w	r2, [fp, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    42c8:	str.w	r6, [fp]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    42cc:	cbz	r2, 42e2 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x37e>
    42ce:	ldr	r3, [r2, #16]
    42d0:	subs	r3, #1
    42d2:	str	r3, [r2, #16]
    42d4:	cbnz	r3, 42e2 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x37e>
    42d6:	ldr.w	r0, [fp, #16]
    42da:	cbz	r0, 42e2 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x37e>
    42dc:	ldr	r3, [r0, #0]
    42de:	ldr	r3, [r3, #32]
    42e0:	blx	r3
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
		invalidate();
	}
    42e2:	mov	r0, fp
    42e4:	movs	r1, #20
    42e6:	bl	f6e0 <operator delete(void*, unsigned int)>
    42ea:	mov	r0, sl
    42ec:	movs	r1, #20
    42ee:	bl	f6e0 <operator delete(void*, unsigned int)>
    42f2:	mov	r0, r9
    42f4:	movs	r1, #20
    42f6:	bl	f6e0 <operator delete(void*, unsigned int)>
    42fa:	mov	r0, r8
    42fc:	movs	r1, #20
    42fe:	bl	f6e0 <operator delete(void*, unsigned int)>
    4302:	mov	r0, r7
    4304:	movs	r1, #20
    4306:	bl	f6e0 <operator delete(void*, unsigned int)>
    430a:	b.n	41e8 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x284>
	}
	virtual void close() {
		if (f) f->close();
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
    430c:	mov	r0, r2
    430e:	blx	r3
    4310:	mov	r4, r0
    4312:	b.n	4010 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0xac>
	}
	virtual uint64_t size() {
		return (f) ? f->size() : 0;
	}
	virtual void close() {
		if (f) f->close();
    4314:	ldr	r0, [sp, #16]
    4316:	cmp	r0, #0
    4318:	beq.n	43ba <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x456>
    431a:	ldr	r3, [r0, #0]
    431c:	ldr	r1, [pc, #616]	; (4588 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x624>)
    431e:	ldr	r3, [r3, #64]	; 0x40
    4320:	cmp	r3, r1
    4322:	bne.w	44d6 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x572>
    4326:	ldr	r0, [r0, #16]
    4328:	cmp	r0, #0
    432a:	beq.n	43ba <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x456>
    432c:	ldr	r3, [r0, #0]
    432e:	ldr	r3, [r3, #64]	; 0x40
    4330:	cmp	r3, r1
    4332:	bne.w	44d6 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x572>
    4336:	ldr	r0, [r0, #16]
    4338:	cmp	r0, #0
    433a:	beq.n	43ba <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x456>
    433c:	ldr	r3, [r0, #0]
    433e:	ldr	r3, [r3, #64]	; 0x40
    4340:	cmp	r3, r1
    4342:	bne.w	44d6 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x572>
    4346:	ldr	r0, [r0, #16]
    4348:	cmp	r0, #0
    434a:	beq.n	43ba <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x456>
    434c:	ldr	r3, [r0, #0]
    434e:	ldr	r3, [r3, #64]	; 0x40
    4350:	cmp	r3, r1
    4352:	bne.w	44d6 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x572>
    4356:	ldr	r0, [r0, #16]
    4358:	cmp	r0, #0
    435a:	beq.n	43ba <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x456>
    435c:	ldr	r3, [r0, #0]
    435e:	ldr	r3, [r3, #64]	; 0x40
    4360:	cmp	r3, r1
    4362:	bne.w	44d6 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x572>
    4366:	ldr	r0, [r0, #16]
    4368:	cbz	r0, 43ba <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x456>
    436a:	ldr	r3, [r0, #0]
    436c:	ldr	r3, [r3, #64]	; 0x40
    436e:	cmp	r3, r1
    4370:	bne.w	44d6 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x572>
    4374:	ldr	r0, [r0, #16]
    4376:	cbz	r0, 43ba <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x456>
    4378:	ldr	r3, [r0, #0]
    437a:	ldr	r3, [r3, #64]	; 0x40
    437c:	cmp	r3, r1
    437e:	bne.w	44d6 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x572>
    4382:	ldr	r0, [r0, #16]
    4384:	cbz	r0, 43ba <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x456>
    4386:	ldr	r3, [r0, #0]
    4388:	ldr	r3, [r3, #64]	; 0x40
    438a:	cmp	r3, r1
    438c:	bne.w	44d6 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x572>
    4390:	ldr	r0, [r0, #16]
    4392:	cbz	r0, 43ba <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x456>
    4394:	ldr	r3, [r0, #0]
    4396:	ldr	r3, [r3, #64]	; 0x40
    4398:	cmp	r3, r1
    439a:	bne.w	44d6 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x572>
    439e:	ldr	r0, [r0, #16]
    43a0:	cbz	r0, 43ba <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x456>
    43a2:	ldr	r3, [r0, #0]
    Serial.print("To   "); Serial.print(store1); Serial.print(": ");Serial.println(newfilename);
  #endif

  File f1 = sd_open(store0,oldfilename,FILE_READ); if(!f1) {DBG_FAIL_MACRO; return false;}
  File f2 = sd_open(store1,newfilename,FILE_WRITE_BEGIN);
  if(!f2) { f1.close(); {DBG_FAIL_MACRO; return false;}}
    43a4:	movs	r4, #0
    43a6:	ldr	r3, [r3, #64]	; 0x40
    43a8:	blx	r3
    43aa:	ldr	r3, [sp, #36]	; 0x24
    43ac:	b.n	43be <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x45a>
  #if DEBUG>1
    Serial.print("From "); Serial.print(store0); Serial.print(": ");Serial.println(oldfilename);
    Serial.print("To   "); Serial.print(store1); Serial.print(": ");Serial.println(newfilename);
  #endif

  File f1 = sd_open(store0,oldfilename,FILE_READ); if(!f1) {DBG_FAIL_MACRO; return false;}
    43ae:	mov	r4, r2
  // close all files
  f1.close();
  f2.close();
  if(nd<0) {DBG_FAIL_MACRO; return false;}
  return true;
}
    43b0:	mov	r0, r4
    43b2:	addw	sp, sp, #2092	; 0x82c
    43b6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    43ba:	ldr	r3, [sp, #36]	; 0x24
    Serial.print("To   "); Serial.print(store1); Serial.print(": ");Serial.println(newfilename);
  #endif

  File f1 = sd_open(store0,oldfilename,FILE_READ); if(!f1) {DBG_FAIL_MACRO; return false;}
  File f2 = sd_open(store1,newfilename,FILE_WRITE_BEGIN);
  if(!f2) { f1.close(); {DBG_FAIL_MACRO; return false;}}
    43bc:	movs	r4, #0
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    43be:	ldr	r6, [pc, #460]	; (458c <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x628>)
    43c0:	str	r6, [sp, #20]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    43c2:	cmp	r3, #0
    43c4:	beq.w	44ca <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x566>
    43c8:	ldr	r2, [r3, #16]
    43ca:	subs	r2, #1
    43cc:	str	r2, [r3, #16]
    43ce:	cmp	r2, #0
    43d0:	bne.n	44ca <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x566>
    43d2:	ldr	r5, [sp, #36]	; 0x24
    43d4:	cmp	r5, #0
    43d6:	beq.n	44ca <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x566>
    43d8:	ldr	r3, [r5, #0]
    43da:	ldr	r2, [pc, #436]	; (4590 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x62c>)
    43dc:	ldr	r3, [r3, #32]
    43de:	cmp	r3, r2
    43e0:	bne.w	47b2 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x84e>
    43e4:	ldr	r1, [r5, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    43e6:	str	r6, [r5, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    43e8:	cmp	r1, #0
    43ea:	beq.n	44c2 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x55e>
    43ec:	ldr	r3, [r1, #16]
    43ee:	subs	r3, #1
    43f0:	str	r3, [r1, #16]
    43f2:	cmp	r3, #0
    43f4:	bne.n	44c2 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x55e>
    43f6:	ldr	r7, [r5, #16]
    43f8:	cmp	r7, #0
    43fa:	beq.n	44c2 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x55e>
    43fc:	ldr	r3, [r7, #0]
    43fe:	ldr	r3, [r3, #32]
    4400:	cmp	r3, r2
    4402:	bne.w	47cc <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x868>
    4406:	ldr	r1, [r7, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    4408:	str	r6, [r7, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    440a:	cmp	r1, #0
    440c:	beq.n	44ba <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x556>
    440e:	ldr	r3, [r1, #16]
    4410:	subs	r3, #1
    4412:	str	r3, [r1, #16]
    4414:	cmp	r3, #0
    4416:	bne.n	44ba <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x556>
    4418:	ldr.w	r8, [r7, #16]
    441c:	cmp.w	r8, #0
    4420:	beq.n	44ba <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x556>
    4422:	ldr.w	r3, [r8]
    4426:	ldr	r3, [r3, #32]
    4428:	cmp	r3, r2
    442a:	bne.w	47de <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x87a>
    442e:	ldr.w	r1, [r8, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    4432:	str.w	r6, [r8]
    4436:	ldr	r0, [pc, #340]	; (458c <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x628>)
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    4438:	cmp	r1, #0
    443a:	beq.n	44b2 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x54e>
    443c:	ldr	r3, [r1, #16]
    443e:	subs	r3, #1
    4440:	str	r3, [r1, #16]
    4442:	cmp	r3, #0
    4444:	bne.n	44b2 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x54e>
    4446:	ldr.w	r9, [r8, #16]
    444a:	cmp.w	r9, #0
    444e:	beq.n	44b2 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x54e>
    4450:	ldr.w	r3, [r9]
    4454:	ldr	r3, [r3, #32]
    4456:	cmp	r3, r2
    4458:	bne.w	47e4 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x880>
    445c:	ldr.w	r1, [r9, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    4460:	str.w	r0, [r9]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    4464:	cbz	r1, 44aa <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x546>
    4466:	ldr	r3, [r1, #16]
    4468:	subs	r3, #1
    446a:	str	r3, [r1, #16]
    446c:	cbnz	r3, 44aa <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x546>
    446e:	ldr.w	sl, [r9, #16]
    4472:	cmp.w	sl, #0
    4476:	beq.n	44aa <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x546>
    4478:	ldr.w	r3, [sl]
    447c:	ldr	r3, [r3, #32]
    447e:	cmp	r3, r2
    4480:	bne.w	4800 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x89c>
    4484:	ldr.w	r2, [sl, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    4488:	str.w	r6, [sl]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    448c:	cbz	r2, 44a2 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x53e>
    448e:	ldr	r3, [r2, #16]
    4490:	subs	r3, #1
    4492:	str	r3, [r2, #16]
    4494:	cbnz	r3, 44a2 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x53e>
    4496:	ldr.w	r0, [sl, #16]
    449a:	cbz	r0, 44a2 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x53e>
    449c:	ldr	r3, [r0, #0]
    449e:	ldr	r3, [r3, #32]
    44a0:	blx	r3
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
		invalidate();
	}
    44a2:	mov	r0, sl
    44a4:	movs	r1, #20
    44a6:	bl	f6e0 <operator delete(void*, unsigned int)>
    44aa:	mov	r0, r9
    44ac:	movs	r1, #20
    44ae:	bl	f6e0 <operator delete(void*, unsigned int)>
    44b2:	mov	r0, r8
    44b4:	movs	r1, #20
    44b6:	bl	f6e0 <operator delete(void*, unsigned int)>
    44ba:	mov	r0, r7
    44bc:	movs	r1, #20
    44be:	bl	f6e0 <operator delete(void*, unsigned int)>
    44c2:	mov	r0, r5
    44c4:	movs	r1, #20
    44c6:	bl	f6e0 <operator delete(void*, unsigned int)>
    44ca:	ldr	r2, [sp, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    44cc:	str	r6, [sp, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    44ce:	cmp	r2, #0
    44d0:	bne.w	41c2 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x25e>
    44d4:	b.n	41f0 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x28c>
	}
	virtual uint64_t size() {
		return (f) ? f->size() : 0;
	}
	virtual void close() {
		if (f) f->close();
    44d6:	blx	r3
    44d8:	movs	r4, #0
    44da:	ldr	r3, [sp, #36]	; 0x24
    44dc:	b.n	43be <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x45a>
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
    44de:	blx	r3
    44e0:	b.n	40ec <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x188>
	}
	virtual uint64_t size() {
		return (f) ? f->size() : 0;
	}
	virtual void close() {
		if (f) f->close();
    44e2:	ldr	r5, [r1, #64]	; 0x40
    44e4:	ldr	r1, [pc, #160]	; (4588 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x624>)
    44e6:	cmp	r5, r1
    44e8:	bne.w	47b8 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x854>
    44ec:	mov	r0, r2
    44ee:	ldr	r3, [r0, #0]
    44f0:	ldr	r3, [r3, #64]	; 0x40
    44f2:	cmp	r3, r1
    44f4:	bne.w	47a8 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x844>
    44f8:	ldr	r0, [r0, #16]
    44fa:	cmp	r0, #0
    44fc:	beq.w	46fa <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x796>
    4500:	ldr	r3, [r0, #0]
    4502:	ldr	r3, [r3, #64]	; 0x40
    4504:	cmp	r3, r1
    4506:	bne.w	47a8 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x844>
    450a:	ldr	r0, [r0, #16]
    450c:	cmp	r0, #0
    450e:	beq.w	46fa <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x796>
    4512:	ldr	r3, [r0, #0]
    4514:	ldr	r3, [r3, #64]	; 0x40
    4516:	cmp	r3, r1
    4518:	bne.w	47a8 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x844>
    451c:	ldr	r0, [r0, #16]
    451e:	cmp	r0, #0
    4520:	beq.w	46fa <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x796>
    4524:	ldr	r3, [r0, #0]
    4526:	ldr	r3, [r3, #64]	; 0x40
    4528:	cmp	r3, r1
    452a:	bne.w	47a8 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x844>
    452e:	ldr	r0, [r0, #16]
    4530:	cmp	r0, #0
    4532:	beq.w	46fa <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x796>
    4536:	ldr	r3, [r0, #0]
    4538:	ldr	r3, [r3, #64]	; 0x40
    453a:	cmp	r3, r1
    453c:	bne.w	47a8 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x844>
    4540:	ldr	r0, [r0, #16]
    4542:	cmp	r0, #0
    4544:	beq.w	46fa <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x796>
    4548:	ldr	r3, [r0, #0]
    454a:	ldr	r3, [r3, #64]	; 0x40
    454c:	cmp	r3, r1
    454e:	bne.w	47a8 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x844>
    4552:	ldr	r0, [r0, #16]
    4554:	cmp	r0, #0
    4556:	beq.w	46fa <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x796>
    455a:	ldr	r3, [r0, #0]
    455c:	ldr	r3, [r3, #64]	; 0x40
    455e:	cmp	r3, r1
    4560:	bne.w	47a8 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x844>
    4564:	ldr	r0, [r0, #16]
    4566:	cmp	r0, #0
    4568:	beq.w	46fa <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x796>
    456c:	ldr	r3, [r0, #0]
    456e:	ldr	r3, [r3, #64]	; 0x40
    4570:	cmp	r3, r1
    4572:	bne.w	47a8 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x844>
    4576:	ldr	r0, [r0, #16]
    4578:	cmp	r0, #0
    457a:	beq.w	46fa <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x796>
    457e:	ldr	r3, [r0, #0]
    4580:	ldr	r3, [r3, #64]	; 0x40
    4582:	blx	r3
    4584:	b.n	46fa <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x796>
    4586:	nop
    4588:	.word	0x00000111
    458c:	.word	0x20000074
    4590:	.word	0x00000d69
	}
	virtual size_t write(const void *buf, size_t size) {
		return (f) ? f->write(buf, size) : 0;
	}
	virtual int available() {
		return (f) ? f->available() : 0;
    4594:	mov	r0, r2
    4596:	blx	r6

  while(f1.available()>0)
    4598:	cmp	r0, #0
	unsigned int getRefcount() { // testing only
		return refcount;
	}
#endif
	virtual size_t read(void *buf, size_t nbyte) {
		return (f) ? f->read(buf, nbyte) : 0;
    459a:	ldr	r3, [sp, #16]
    459c:	ble.n	4648 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6e4>
    459e:	cmp	r3, #0
    45a0:	beq.n	4650 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6ec>
    45a2:	ldr	r1, [r3, #0]
    45a4:	ldr	r2, [pc, #536]	; (47c0 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x85c>)
    45a6:	ldr	r4, [r1, #40]	; 0x28
    45a8:	cmp	r4, r2
    45aa:	bne.n	462a <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6c6>
    45ac:	ldr	r0, [r3, #16]
    45ae:	cmp	r0, #0
    45b0:	beq.n	4650 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6ec>
    45b2:	ldr	r1, [r0, #0]
    45b4:	ldr	r4, [r1, #40]	; 0x28
    45b6:	cmp	r4, r2
    45b8:	bne.n	462c <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6c8>
    45ba:	ldr	r0, [r0, #16]
    45bc:	cmp	r0, #0
    45be:	beq.n	4650 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6ec>
    45c0:	ldr	r1, [r0, #0]
    45c2:	ldr	r4, [r1, #40]	; 0x28
    45c4:	cmp	r4, r2
    45c6:	bne.n	462c <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6c8>
    45c8:	ldr	r0, [r0, #16]
    45ca:	cmp	r0, #0
    45cc:	beq.n	4650 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6ec>
    45ce:	ldr	r1, [r0, #0]
    45d0:	ldr	r4, [r1, #40]	; 0x28
    45d2:	cmp	r4, r2
    45d4:	bne.n	462c <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6c8>
    45d6:	ldr	r0, [r0, #16]
    45d8:	cmp	r0, #0
    45da:	beq.n	4650 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6ec>
    45dc:	ldr	r1, [r0, #0]
    45de:	ldr	r4, [r1, #40]	; 0x28
    45e0:	cmp	r4, r2
    45e2:	bne.n	462c <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6c8>
    45e4:	ldr	r0, [r0, #16]
    45e6:	cmp	r0, #0
    45e8:	beq.n	4650 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6ec>
    45ea:	ldr	r1, [r0, #0]
    45ec:	ldr	r4, [r1, #40]	; 0x28
    45ee:	cmp	r4, r2
    45f0:	bne.n	462c <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6c8>
    45f2:	ldr	r0, [r0, #16]
    45f4:	cbz	r0, 4650 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6ec>
    45f6:	ldr	r1, [r0, #0]
    45f8:	ldr	r4, [r1, #40]	; 0x28
    45fa:	cmp	r4, r2
    45fc:	bne.n	462c <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6c8>
    45fe:	ldr	r0, [r0, #16]
    4600:	cbz	r0, 4650 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6ec>
    4602:	ldr	r1, [r0, #0]
    4604:	ldr	r4, [r1, #40]	; 0x28
    4606:	cmp	r4, r2
    4608:	bne.n	462c <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6c8>
    460a:	ldr	r0, [r0, #16]
    460c:	cbz	r0, 4650 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6ec>
    460e:	ldr	r1, [r0, #0]
    4610:	ldr	r4, [r1, #40]	; 0x28
    4612:	cmp	r4, r2
    4614:	bne.n	462c <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6c8>
    4616:	ldr	r0, [r0, #16]
    4618:	cbz	r0, 4650 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6ec>
    461a:	ldr	r3, [r0, #0]
    461c:	mov.w	r2, #2048	; 0x800
    4620:	add	r1, sp, #40	; 0x28
    4622:	ldr	r3, [r3, #40]	; 0x28
    4624:	blx	r3
    4626:	mov	r2, r0
    4628:	b.n	4636 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6d2>
    462a:	mov	r0, r3
    462c:	mov.w	r2, #2048	; 0x800
    4630:	add	r1, sp, #40	; 0x28
    4632:	blx	r4
    4634:	mov	r2, r0
  {
    nd=f1.read(buffer,nbuf);
    if(nd<0) break;     // read error
    4636:	subs	r4, r2, #0
    4638:	blt.n	4646 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6e2>
	}
	virtual size_t write(const void *buf, size_t size) {
		return (f) ? f->write(buf, size) : 0;
    463a:	ldr	r0, [sp, #36]	; 0x24
    463c:	cbnz	r0, 465c <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6f8>
    f2.write(buffer,nd);
    if(nd<nbuf) break;  // end of file
    463e:	cmp.w	r4, #2048	; 0x800
    4642:	bge.w	40f8 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x194>
    4646:	ldr	r3, [sp, #16]
	}
	virtual uint64_t size() {
		return (f) ? f->size() : 0;
	}
	virtual void close() {
		if (f) f->close();
    4648:	cmp	r3, #0
    464a:	bne.w	4796 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x832>
    464e:	b.n	46fa <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x796>
#endif
	virtual size_t read(void *buf, size_t nbyte) {
		return (f) ? f->read(buf, nbyte) : 0;
	}
	virtual size_t write(const void *buf, size_t size) {
		return (f) ? f->write(buf, size) : 0;
    4650:	ldr	r0, [sp, #36]	; 0x24
    4652:	cmp	r0, #0
    4654:	beq.w	4790 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x82c>
    4658:	movs	r2, #0
  File f2 = sd_open(store1,newfilename,FILE_WRITE_BEGIN);
  if(!f2) { f1.close(); {DBG_FAIL_MACRO; return false;}}

  while(f1.available()>0)
  {
    nd=f1.read(buffer,nbuf);
    465a:	mov	r4, r2
    465c:	ldr	r1, [r0, #0]
    465e:	ldr	r3, [pc, #356]	; (47c4 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x860>)
    4660:	ldr	r6, [r1, #44]	; 0x2c
    4662:	cmp	r6, r3
    4664:	bne.n	46e6 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x782>
    4666:	ldr	r0, [r0, #16]
    4668:	cmp	r0, #0
    466a:	beq.n	463e <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6da>
    466c:	ldr	r1, [r0, #0]
    466e:	ldr	r6, [r1, #44]	; 0x2c
    4670:	cmp	r6, r3
    4672:	bne.n	46e6 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x782>
    4674:	ldr	r0, [r0, #16]
    4676:	cmp	r0, #0
    4678:	beq.n	463e <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6da>
    467a:	ldr	r1, [r0, #0]
    467c:	ldr	r6, [r1, #44]	; 0x2c
    467e:	cmp	r6, r3
    4680:	bne.n	46e6 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x782>
    4682:	ldr	r0, [r0, #16]
    4684:	cmp	r0, #0
    4686:	beq.n	463e <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6da>
    4688:	ldr	r1, [r0, #0]
    468a:	ldr	r6, [r1, #44]	; 0x2c
    468c:	cmp	r6, r3
    468e:	bne.n	46e6 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x782>
    4690:	ldr	r0, [r0, #16]
    4692:	cmp	r0, #0
    4694:	beq.n	463e <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6da>
    4696:	ldr	r1, [r0, #0]
    4698:	ldr	r6, [r1, #44]	; 0x2c
    469a:	cmp	r6, r3
    469c:	bne.n	46e6 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x782>
    469e:	ldr	r0, [r0, #16]
    46a0:	cmp	r0, #0
    46a2:	beq.n	463e <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6da>
    46a4:	ldr	r1, [r0, #0]
    46a6:	ldr	r6, [r1, #44]	; 0x2c
    46a8:	cmp	r6, r3
    46aa:	bne.n	46e6 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x782>
    46ac:	ldr	r0, [r0, #16]
    46ae:	cmp	r0, #0
    46b0:	beq.n	463e <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6da>
    46b2:	ldr	r1, [r0, #0]
    46b4:	ldr	r6, [r1, #44]	; 0x2c
    46b6:	cmp	r6, r3
    46b8:	bne.n	46e6 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x782>
    46ba:	ldr	r0, [r0, #16]
    46bc:	cmp	r0, #0
    46be:	beq.n	463e <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6da>
    46c0:	ldr	r1, [r0, #0]
    46c2:	ldr	r6, [r1, #44]	; 0x2c
    46c4:	cmp	r6, r3
    46c6:	bne.n	46e6 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x782>
    46c8:	ldr	r0, [r0, #16]
    46ca:	cmp	r0, #0
    46cc:	beq.n	463e <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6da>
    46ce:	ldr	r1, [r0, #0]
    46d0:	ldr	r6, [r1, #44]	; 0x2c
    46d2:	cmp	r6, r3
    46d4:	bne.n	46e6 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x782>
    46d6:	ldr	r0, [r0, #16]
    46d8:	cmp	r0, #0
    46da:	beq.n	463e <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6da>
    46dc:	ldr	r3, [r0, #0]
    46de:	add	r1, sp, #40	; 0x28
    46e0:	ldr	r3, [r3, #44]	; 0x2c
    46e2:	blx	r3
    46e4:	b.n	463e <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6da>
    46e6:	add	r1, sp, #40	; 0x28
    46e8:	blx	r6
    46ea:	b.n	463e <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6da>
	}
	virtual int available() {
		return (f) ? f->available() : 0;
    46ec:	mov	r0, r3
    46ee:	blx	r2
    46f0:	b.n	4598 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x634>
	}
	virtual uint64_t size() {
		return (f) ? f->size() : 0;
	}
	virtual void close() {
		if (f) f->close();
    46f2:	ldr	r5, [r1, #64]	; 0x40
    46f4:	ldr	r2, [pc, #208]	; (47c8 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x864>)
    46f6:	cmp	r5, r2
    46f8:	bne.n	47b8 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x854>
    46fa:	ldr	r3, [sp, #36]	; 0x24
    46fc:	cmp	r3, #0
    46fe:	beq.n	4784 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x820>
    4700:	ldr	r2, [r3, #0]
    4702:	ldr	r1, [pc, #196]	; (47c8 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x864>)
    4704:	ldr	r2, [r2, #64]	; 0x40
    4706:	cmp	r2, r1
    4708:	bne.n	477e <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x81a>
    470a:	ldr	r0, [r3, #16]
    470c:	cmp	r0, #0
    470e:	beq.n	4784 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x820>
    4710:	ldr	r2, [r0, #0]
    4712:	ldr	r2, [r2, #64]	; 0x40
    4714:	cmp	r2, r1
    4716:	bne.n	4780 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x81c>
    4718:	ldr	r0, [r0, #16]
    471a:	cmp	r0, #0
    471c:	beq.n	4784 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x820>
    471e:	ldr	r2, [r0, #0]
    4720:	ldr	r2, [r2, #64]	; 0x40
    4722:	cmp	r2, r1
    4724:	bne.n	4780 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x81c>
    4726:	ldr	r0, [r0, #16]
    4728:	cmp	r0, #0
    472a:	beq.n	4784 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x820>
    472c:	ldr	r2, [r0, #0]
    472e:	ldr	r2, [r2, #64]	; 0x40
    4730:	cmp	r2, r1
    4732:	bne.n	4780 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x81c>
    4734:	ldr	r0, [r0, #16]
    4736:	cbz	r0, 4784 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x820>
    4738:	ldr	r2, [r0, #0]
    473a:	ldr	r2, [r2, #64]	; 0x40
    473c:	cmp	r2, r1
    473e:	bne.n	4780 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x81c>
    4740:	ldr	r0, [r0, #16]
    4742:	cbz	r0, 4784 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x820>
    4744:	ldr	r2, [r0, #0]
    4746:	ldr	r2, [r2, #64]	; 0x40
    4748:	cmp	r2, r1
    474a:	bne.n	4780 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x81c>
    474c:	ldr	r0, [r0, #16]
    474e:	cbz	r0, 4784 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x820>
    4750:	ldr	r2, [r0, #0]
    4752:	ldr	r2, [r2, #64]	; 0x40
    4754:	cmp	r2, r1
    4756:	bne.n	4780 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x81c>
    4758:	ldr	r0, [r0, #16]
    475a:	cbz	r0, 4784 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x820>
    475c:	ldr	r2, [r0, #0]
    475e:	ldr	r2, [r2, #64]	; 0x40
    4760:	cmp	r2, r1
    4762:	bne.n	4780 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x81c>
    4764:	ldr	r0, [r0, #16]
    4766:	cbz	r0, 4784 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x820>
    4768:	ldr	r2, [r0, #0]
    476a:	ldr	r2, [r2, #64]	; 0x40
    476c:	cmp	r2, r1
    476e:	bne.n	4780 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x81c>
    4770:	ldr	r0, [r0, #16]
    4772:	cbz	r0, 4784 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x820>
    4774:	ldr	r3, [r0, #0]
    4776:	ldr	r3, [r3, #64]	; 0x40
    4778:	blx	r3
    477a:	ldr	r3, [sp, #36]	; 0x24
    477c:	b.n	4784 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x820>
    477e:	mov	r0, r3
    4780:	blx	r2
    4782:	ldr	r3, [sp, #36]	; 0x24
    if(nd<nbuf) break;  // end of file
  }
  // close all files
  f1.close();
  f2.close();
  if(nd<0) {DBG_FAIL_MACRO; return false;}
    4784:	mvns	r4, r4
    4786:	lsrs	r4, r4, #31
    4788:	b.n	43be <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x45a>
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    478a:	mov	r0, r5
    478c:	blx	r3
    478e:	b.n	41f0 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x28c>
	}
	virtual uint64_t size() {
		return (f) ? f->size() : 0;
	}
	virtual void close() {
		if (f) f->close();
    4790:	cmp	r3, #0
    4792:	beq.n	47fc <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x898>
  File f2 = sd_open(store1,newfilename,FILE_WRITE_BEGIN);
  if(!f2) { f1.close(); {DBG_FAIL_MACRO; return false;}}

  while(f1.available()>0)
  {
    nd=f1.read(buffer,nbuf);
    4794:	mov	r4, r0
    4796:	ldr	r2, [r3, #0]
    4798:	ldr	r1, [pc, #44]	; (47c8 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x864>)
    479a:	ldr	r5, [r2, #64]	; 0x40
    479c:	cmp	r5, r1
    479e:	bne.n	47b8 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x854>
    47a0:	ldr	r0, [r3, #16]
    47a2:	cmp	r0, #0
    47a4:	beq.n	46fa <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x796>
    47a6:	b.n	44ee <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x58a>
    47a8:	blx	r3
    47aa:	b.n	46fa <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x796>
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    47ac:	mov	r0, r7
    47ae:	blx	r3
    47b0:	b.n	41e8 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x284>
    47b2:	mov	r0, r5
    47b4:	blx	r3
    47b6:	b.n	44ca <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x566>
	}
	virtual uint64_t size() {
		return (f) ? f->size() : 0;
	}
	virtual void close() {
		if (f) f->close();
    47b8:	mov	r0, r3
    47ba:	blx	r5
    47bc:	b.n	46fa <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x796>
    47be:	nop
    47c0:	.word	0x0000008d
    47c4:	.word	0x00000099
    47c8:	.word	0x00000111
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    47cc:	mov	r0, r7
    47ce:	blx	r3
    47d0:	b.n	44c2 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x55e>
    47d2:	mov	r0, r8
    47d4:	blx	r3
    47d6:	b.n	4302 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x39e>
    47d8:	mov	r0, r9
    47da:	blx	r3
    47dc:	b.n	42fa <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x396>
    47de:	mov	r0, r8
    47e0:	blx	r3
    47e2:	b.n	44ba <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x556>
    47e4:	mov	r0, r9
    47e6:	blx	r3
    47e8:	b.n	44b2 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x54e>
    47ea:	mov	r0, sl
    47ec:	blx	r3
    47ee:	b.n	42f2 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x38e>
    47f0:	mov	r0, fp
    47f2:	blx	r3
    47f4:	b.n	42ea <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x386>
    47f6:	ldr	r2, [sp, #16]
    47f8:	ldr	r6, [pc, #12]	; (4808 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x8a4>)
    47fa:	b.n	44cc <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x568>
    47fc:	mov	r4, r3
    47fe:	b.n	4784 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x820>
    4800:	mov	r0, sl
    4802:	blx	r3
    4804:	b.n	44aa <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x546>
    4806:	nop
    4808:	.word	0x20000074

0000480c <MTPStorage_SD::copy(unsigned long, unsigned long, unsigned long)>:
    WriteIndexRecord(newParent,p2o);      
    return false;
  }

  uint32_t MTPStorage_SD::copy(uint32_t handle, uint32_t newStore, uint32_t newParent ) 
  { 
    480c:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4810:	sub.w	sp, sp, #1336	; 0x538
    if(newParent==0xFFFFFFFFUL) newParent=newStore;
    4814:	cmp.w	r3, #4294967295
    4818:	ite	ne
    481a:	movne	r7, r3
    481c:	moveq	r7, r2
    WriteIndexRecord(newParent,p2o);      
    return false;
  }

  uint32_t MTPStorage_SD::copy(uint32_t handle, uint32_t newStore, uint32_t newParent ) 
  { 
    481e:	mov	r4, r0
    if(newParent==0xFFFFFFFFUL) newParent=newStore;

    Record p1 = ReadIndexRecord(handle);
    4820:	mov	r2, r1
    WriteIndexRecord(newParent,p2o);      
    return false;
  }

  uint32_t MTPStorage_SD::copy(uint32_t handle, uint32_t newStore, uint32_t newParent ) 
  { 
    4822:	mov	r8, r1
    if(newParent==0xFFFFFFFFUL) newParent=newStore;

    Record p1 = ReadIndexRecord(handle);
    4824:	mov	r1, r0
    4826:	add	r0, sp, #520	; 0x208
    4828:	bl	2228 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    Record p2 = ReadIndexRecord(newParent);
    482c:	mov	r2, r7
    482e:	mov	r1, r4
    4830:	add	r0, sp, #792	; 0x318
    4832:	bl	2228 <MTPStorage_SD::ReadIndexRecord(unsigned long)>

    uint32_t newHandle;
    if(p1.isdir)
    4836:	ldrb.w	r6, [sp, #532]	; 0x214
    483a:	cmp	r6, #0
    483c:	bne.n	48c4 <MTPStorage_SD::copy(unsigned long, unsigned long, unsigned long)+0xb8>
      CopyFiles(handle, p2.store, newHandle);
    }
    else
    {  
      Record r;
      strlcpy(r.name, p1.name,MAX_FILENAME_LEN);
    483e:	add	r1, sp, #536	; 0x218
    4840:	mov.w	r2, #256	; 0x100
    4844:	add.w	r0, sp, #1080	; 0x438
    4848:	bl	11380 <strlcpy>
    index_.write((char*)&r, sizeof(r));
    mtp_lock_storage(false);
  }

  uint32_t MTPStorage_SD::AppendIndexRecord(const Record& r) 
  { uint32_t new_record = index_entries_++;
    484c:	ldr.w	r5, [r4, #244]	; 0xf4
    }
    else
    {  
      Record r;
      strlcpy(r.name, p1.name,MAX_FILENAME_LEN);
      r.store = p2.store;
    4850:	ldrh.w	lr, [sp, #806]	; 0x326
    mtp_lock_storage(false);
  }

  uint32_t MTPStorage_SD::AppendIndexRecord(const Record& r) 
  { uint32_t new_record = index_entries_++;
    WriteIndexRecord(new_record, r);
    4854:	add.w	r2, sp, #1064	; 0x428
    index_.write((char*)&r, sizeof(r));
    mtp_lock_storage(false);
  }

  uint32_t MTPStorage_SD::AppendIndexRecord(const Record& r) 
  { uint32_t new_record = index_entries_++;
    4858:	adds	r1, r5, #1
      Record r;
      strlcpy(r.name, p1.name,MAX_FILENAME_LEN);
      r.store = p2.store;
      r.parent = newParent;
      r.child = 0;
      r.sibling = p2.child;
    485a:	ldr	r3, [sp, #796]	; 0x31c
    mtp_lock_storage(false);
  }

  uint32_t MTPStorage_SD::AppendIndexRecord(const Record& r) 
  { uint32_t new_record = index_entries_++;
    WriteIndexRecord(new_record, r);
    485c:	mov	r0, r4
    }
    else
    {  
      Record r;
      strlcpy(r.name, p1.name,MAX_FILENAME_LEN);
      r.store = p2.store;
    485e:	strh.w	lr, [sp, #1078]	; 0x436
    index_.write((char*)&r, sizeof(r));
    mtp_lock_storage(false);
  }

  uint32_t MTPStorage_SD::AppendIndexRecord(const Record& r) 
  { uint32_t new_record = index_entries_++;
    4862:	str.w	r1, [r4, #244]	; 0xf4
    WriteIndexRecord(new_record, r);
    4866:	mov	r1, r5
      Record r;
      strlcpy(r.name, p1.name,MAX_FILENAME_LEN);
      r.store = p2.store;
      r.parent = newParent;
      r.child = 0;
      r.sibling = p2.child;
    4868:	str.w	r3, [sp, #1072]	; 0x430
    else
    {  
      Record r;
      strlcpy(r.name, p1.name,MAX_FILENAME_LEN);
      r.store = p2.store;
      r.parent = newParent;
    486c:	str.w	r7, [sp, #1064]	; 0x428
      r.child = 0;
    4870:	str.w	r6, [sp, #1068]	; 0x42c
      r.sibling = p2.child;
      r.isdir = 0;
    4874:	strb.w	r6, [sp, #1076]	; 0x434
      r.scanned = 0;
    4878:	strb.w	r6, [sp, #1077]	; 0x435
    mtp_lock_storage(false);
  }

  uint32_t MTPStorage_SD::AppendIndexRecord(const Record& r) 
  { uint32_t new_record = index_entries_++;
    WriteIndexRecord(new_record, r);
    487c:	bl	2058 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
      r.child = 0;
      r.sibling = p2.child;
      r.isdir = 0;
      r.scanned = 0;
      newHandle = p2.child = AppendIndexRecord(r);
      WriteIndexRecord(newParent, p2);
    4880:	add	r2, sp, #792	; 0x318
    4882:	mov	r1, r7
    4884:	mov	r0, r4

      char oldfilename[MAX_FILENAME_LEN];
      char newfilename[MAX_FILENAME_LEN];
      uint32_t store0 = ConstructFilename(handle,oldfilename,MAX_FILENAME_LEN);
      uint32_t store1 = ConstructFilename(newHandle,newfilename,MAX_FILENAME_LEN);
    4886:	add	r6, sp, #264	; 0x108
      r.parent = newParent;
      r.child = 0;
      r.sibling = p2.child;
      r.isdir = 0;
      r.scanned = 0;
      newHandle = p2.child = AppendIndexRecord(r);
    4888:	str	r5, [sp, #796]	; 0x31c
      WriteIndexRecord(newParent, p2);
    488a:	bl	2058 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>

      char oldfilename[MAX_FILENAME_LEN];
      char newfilename[MAX_FILENAME_LEN];
      uint32_t store0 = ConstructFilename(handle,oldfilename,MAX_FILENAME_LEN);
    488e:	mov	r1, r8
    4890:	add	r2, sp, #8
    4892:	mov.w	r3, #256	; 0x100
    4896:	mov	r0, r4
    4898:	bl	2688 <MTPStorage_SD::ConstructFilename(int, char*, int)>
    489c:	mov	r7, r0
      uint32_t store1 = ConstructFilename(newHandle,newfilename,MAX_FILENAME_LEN);
    489e:	mov	r1, r5
    48a0:	mov	r2, r6
    48a2:	mov.w	r3, #256	; 0x100
    48a6:	mov	r0, r4
    48a8:	bl	2688 <MTPStorage_SD::ConstructFilename(int, char*, int)>

      sd_copy(store0,oldfilename,store1,newfilename);
    48ac:	str	r6, [sp, #0]
    48ae:	mov	r3, r0
    48b0:	add	r2, sp, #8
    48b2:	mov	r1, r7
    48b4:	adds	r0, r4, #4
    48b6:	bl	3f64 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)>
    }

    return newHandle;
  }
    48ba:	mov	r0, r5
    48bc:	add.w	sp, sp, #1336	; 0x538
    48c0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    Record p2 = ReadIndexRecord(newParent);

    uint32_t newHandle;
    if(p1.isdir)
    {
      ScanDir(p1.store+1,handle);
    48c4:	ldrh.w	r1, [sp, #534]	; 0x216
    48c8:	mov	r2, r8
    48ca:	mov	r0, r4
      newHandle = Create(p2.store,newParent,p1.isdir,p1.name);
    48cc:	add	r5, sp, #536	; 0x218
    Record p2 = ReadIndexRecord(newParent);

    uint32_t newHandle;
    if(p1.isdir)
    {
      ScanDir(p1.store+1,handle);
    48ce:	adds	r1, #1
    48d0:	bl	2e14 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)>
      newHandle = Create(p2.store,newParent,p1.isdir,p1.name);
    48d4:	ldrb.w	r3, [sp, #532]	; 0x214
    48d8:	ldr	r0, [r4, #0]
    48da:	mov	r2, r7
    48dc:	adds	r3, #0
    48de:	ldrh.w	r1, [sp, #806]	; 0x326
    48e2:	str	r5, [sp, #0]
    48e4:	it	ne
    48e6:	movne	r3, #1
    48e8:	ldr	r5, [r0, #44]	; 0x2c
    48ea:	mov	r0, r4
    48ec:	blx	r5
    48ee:	mov	r5, r0
      CopyFiles(handle, p2.store, newHandle);
    48f0:	ldr	r0, [r4, #0]
    48f2:	mov	r1, r8
    48f4:	ldrh.w	r2, [sp, #806]	; 0x326
    48f8:	mov	r3, r5
    48fa:	ldr	r6, [r0, #84]	; 0x54
    48fc:	mov	r0, r4
    48fe:	blx	r6

      sd_copy(store0,oldfilename,store1,newfilename);
    }

    return newHandle;
  }
    4900:	mov	r0, r5
    4902:	add.w	sp, sp, #1336	; 0x538
    4906:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    490a:	nop

0000490c <MTPStorage_SD::CopyFiles(unsigned long, unsigned long, unsigned long)>:

bool MTPStorage_SD::CopyFiles(uint32_t handle, uint32_t store, uint32_t newHandle)
{ // assume handle and newHandle point to existing directories
    490c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4910:	mov	r4, r0
    4912:	sub.w	sp, sp, #1608	; 0x648
  if(newHandle==0xFFFFFFFFUL) newHandle=store;
    4916:	cmp.w	r3, #4294967295
    491a:	ite	ne
    491c:	movne	r8, r3
    491e:	moveq	r8, r2
  #if DEBUG>1
    Serial.printf("%d -> %d\n",handle,newHandle);
  #endif

  Record p1=ReadIndexRecord(handle);
    4920:	mov	r2, r1
    4922:	add	r0, sp, #520	; 0x208
    4924:	mov	r1, r4
    4926:	bl	2228 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
  Record p2=ReadIndexRecord(newHandle);
    492a:	mov	r2, r8
    492c:	mov	r1, r4
    492e:	add	r0, sp, #792	; 0x318
  if(newHandle==0xFFFFFFFFUL) newHandle=store;
  #if DEBUG>1
    Serial.printf("%d -> %d\n",handle,newHandle);
  #endif

  Record p1=ReadIndexRecord(handle);
    4930:	ldrh.w	r9, [sp, #534]	; 0x216
  Record p2=ReadIndexRecord(newHandle);
    4934:	bl	2228 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
  uint32_t ix= p1.child;
    4938:	ldr	r6, [sp, #524]	; 0x20c
  uint32_t iy= 0;
  while(ix)
    493a:	cmp	r6, #0
    493c:	beq.n	4a10 <MTPStorage_SD::CopyFiles(unsigned long, unsigned long, unsigned long)+0x104>
    493e:	movs	r5, #0
    4940:	add	r7, sp, #264	; 0x108

      ScanDir(p1.store,ix); 
      CopyFiles(ix,p2.store,iy); 
    }
    else
    { sd_copy(p1.store,oldfilename,py.store,newfilename);
    4942:	add.w	sl, r4, #4
    4946:	b.n	497a <MTPStorage_SD::CopyFiles(unsigned long, unsigned long, unsigned long)+0x6e>
    bool sd_mkdir(uint32_t store, char *filename) {  return sdx[store]->mkdir(filename);  }
    4948:	ldrh.w	r3, [sp, #1350]	; 0x546
    494c:	add.w	r3, r4, r3, lsl #2
    4950:	ldr	r0, [r3, #88]	; 0x58
    4952:	ldr	r3, [r0, #0]
    4954:	ldr	r3, [r3, #8]
    4956:	blx	r3

    if(py.isdir) 
    { 
      sd_mkdir(py.store,newfilename);

      ScanDir(p1.store,ix); 
    4958:	mov	r2, r6
    495a:	mov	r1, r9
    495c:	mov	r0, r4
    495e:	bl	2e14 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)>
      CopyFiles(ix,p2.store,iy); 
    4962:	ldr	r2, [r4, #0]
    4964:	mov	r1, r6
    4966:	mov	r3, r5
    4968:	ldr	r6, [r2, #84]	; 0x54
    496a:	mov	r0, r4
    496c:	ldrh.w	r2, [sp, #806]	; 0x326
    4970:	blx	r6
    }
    else
    { sd_copy(p1.store,oldfilename,py.store,newfilename);
    }
    ix = px.sibling;
    4972:	ldr.w	r6, [sp, #1072]	; 0x430

  Record p1=ReadIndexRecord(handle);
  Record p2=ReadIndexRecord(newHandle);
  uint32_t ix= p1.child;
  uint32_t iy= 0;
  while(ix)
    4976:	cmp	r6, #0
    4978:	beq.n	49fa <MTPStorage_SD::CopyFiles(unsigned long, unsigned long, unsigned long)+0xee>
  { // get child
    Record px = ReadIndexRecord(ix) ;
    497a:	mov	r2, r6
    497c:	mov	r1, r4
    497e:	add.w	r0, sp, #1064	; 0x428
    4982:	bl	2228 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    Record py = px;
    4986:	mov.w	r2, #272	; 0x110
    498a:	add.w	r1, sp, #1064	; 0x428
    498e:	add.w	r0, sp, #1336	; 0x538
    4992:	bl	d064 <memcpy>
    py.store = p2.store;
    py.parent = newHandle;
    py.sibling = iy;
    4996:	str.w	r5, [sp, #1344]	; 0x540
    index_.write((char*)&r, sizeof(r));
    mtp_lock_storage(false);
  }

  uint32_t MTPStorage_SD::AppendIndexRecord(const Record& r) 
  { uint32_t new_record = index_entries_++;
    499a:	ldr.w	r5, [r4, #244]	; 0xf4
    WriteIndexRecord(new_record, r);
    499e:	add.w	r2, sp, #1336	; 0x538
  uint32_t iy= 0;
  while(ix)
  { // get child
    Record px = ReadIndexRecord(ix) ;
    Record py = px;
    py.store = p2.store;
    49a2:	ldrh.w	lr, [sp, #806]	; 0x326
    mtp_lock_storage(false);
  }

  uint32_t MTPStorage_SD::AppendIndexRecord(const Record& r) 
  { uint32_t new_record = index_entries_++;
    WriteIndexRecord(new_record, r);
    49a6:	mov	r0, r4
    index_.write((char*)&r, sizeof(r));
    mtp_lock_storage(false);
  }

  uint32_t MTPStorage_SD::AppendIndexRecord(const Record& r) 
  { uint32_t new_record = index_entries_++;
    49a8:	adds	r3, r5, #1
    WriteIndexRecord(new_record, r);
    49aa:	mov	r1, r5
  uint32_t iy= 0;
  while(ix)
  { // get child
    Record px = ReadIndexRecord(ix) ;
    Record py = px;
    py.store = p2.store;
    49ac:	strh.w	lr, [sp, #1350]	; 0x546
    index_.write((char*)&r, sizeof(r));
    mtp_lock_storage(false);
  }

  uint32_t MTPStorage_SD::AppendIndexRecord(const Record& r) 
  { uint32_t new_record = index_entries_++;
    49b0:	str.w	r3, [r4, #244]	; 0xf4
  while(ix)
  { // get child
    Record px = ReadIndexRecord(ix) ;
    Record py = px;
    py.store = p2.store;
    py.parent = newHandle;
    49b4:	str.w	r8, [sp, #1336]	; 0x538
    mtp_lock_storage(false);
  }

  uint32_t MTPStorage_SD::AppendIndexRecord(const Record& r) 
  { uint32_t new_record = index_entries_++;
    WriteIndexRecord(new_record, r);
    49b8:	bl	2058 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    py.sibling = iy;
    iy = AppendIndexRecord(py);

    char oldfilename[MAX_FILENAME_LEN];
    char newfilename[MAX_FILENAME_LEN];
    ConstructFilename(ix,oldfilename,MAX_FILENAME_LEN);
    49bc:	mov.w	r3, #256	; 0x100
    49c0:	add	r2, sp, #8
    49c2:	mov	r1, r6
    49c4:	mov	r0, r4
    49c6:	bl	2688 <MTPStorage_SD::ConstructFilename(int, char*, int)>
    ConstructFilename(iy,newfilename,MAX_FILENAME_LEN);
    49ca:	mov	r1, r5
    49cc:	mov.w	r3, #256	; 0x100
    49d0:	mov	r2, r7
    49d2:	mov	r0, r4
    49d4:	bl	2688 <MTPStorage_SD::ConstructFilename(int, char*, int)>

    if(py.isdir) 
    49d8:	ldrb.w	r3, [sp, #1348]	; 0x544
    49dc:	mov	r1, r7

      ScanDir(p1.store,ix); 
      CopyFiles(ix,p2.store,iy); 
    }
    else
    { sd_copy(p1.store,oldfilename,py.store,newfilename);
    49de:	add	r2, sp, #8
    49e0:	mov	r0, sl
    char oldfilename[MAX_FILENAME_LEN];
    char newfilename[MAX_FILENAME_LEN];
    ConstructFilename(ix,oldfilename,MAX_FILENAME_LEN);
    ConstructFilename(iy,newfilename,MAX_FILENAME_LEN);

    if(py.isdir) 
    49e2:	cmp	r3, #0
    49e4:	bne.n	4948 <MTPStorage_SD::CopyFiles(unsigned long, unsigned long, unsigned long)+0x3c>

      ScanDir(p1.store,ix); 
      CopyFiles(ix,p2.store,iy); 
    }
    else
    { sd_copy(p1.store,oldfilename,py.store,newfilename);
    49e6:	ldrh.w	r3, [sp, #1350]	; 0x546
    49ea:	mov	r1, r9
    49ec:	str	r7, [sp, #0]
    49ee:	bl	3f64 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)>
    }
    ix = px.sibling;
    49f2:	ldr.w	r6, [sp, #1072]	; 0x430

  Record p1=ReadIndexRecord(handle);
  Record p2=ReadIndexRecord(newHandle);
  uint32_t ix= p1.child;
  uint32_t iy= 0;
  while(ix)
    49f6:	cmp	r6, #0
    49f8:	bne.n	497a <MTPStorage_SD::CopyFiles(unsigned long, unsigned long, unsigned long)+0x6e>
    { sd_copy(p1.store,oldfilename,py.store,newfilename);
    }
    ix = px.sibling;
  }
  p2.child=iy;
  WriteIndexRecord(newHandle,p2);
    49fa:	mov	r0, r4
    49fc:	mov	r1, r8
    49fe:	add	r2, sp, #792	; 0x318
    else
    { sd_copy(p1.store,oldfilename,py.store,newfilename);
    }
    ix = px.sibling;
  }
  p2.child=iy;
    4a00:	str	r5, [sp, #796]	; 0x31c
  WriteIndexRecord(newHandle,p2);
    4a02:	bl	2058 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
  return true;
}
    4a06:	movs	r0, #1
    4a08:	add.w	sp, sp, #1608	; 0x648
    4a0c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  #endif

  Record p1=ReadIndexRecord(handle);
  Record p2=ReadIndexRecord(newHandle);
  uint32_t ix= p1.child;
  uint32_t iy= 0;
    4a10:	mov	r5, r6
    4a12:	b.n	49fa <MTPStorage_SD::CopyFiles(unsigned long, unsigned long, unsigned long)+0xee>

00004a14 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*)>:
  if(nd<0) {DBG_FAIL_MACRO; return false;}
  return true;
}

bool mSD_Base::sd_moveDir(uint32_t store0, char *oldfilename, uint32_t store1, char *newfilename)
{ // old and new are directory paths
    4a14:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4a18:	mov	r5, r3
    4a1a:	add.w	r3, r0, r3, lsl #2
    4a1e:	mov	r4, r0
    4a20:	ldr	r6, [sp, #24]
    4a22:	ldr	r0, [r3, #84]	; 0x54
    4a24:	mov	r7, r1
    4a26:	mov	r1, r6
    4a28:	mov	r8, r2
    4a2a:	ldr	r3, [r0, #0]
    4a2c:	ldr	r3, [r3, #8]
    4a2e:	blx	r3

  char tmp0Name[MAX_FILENAME_LEN];
  char tmp1Name[MAX_FILENAME_LEN];

  if(!sd_mkdir(store1,newfilename))  {DBG_FAIL_MACRO; return false;}
    4a30:	cbnz	r0, 4a36 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*)+0x22>
        }
      }
    }
  }
  return sd_rmdir(store0,oldfilename);
}
    4a32:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4a36:	str	r6, [sp, #24]
    4a38:	mov	r3, r5
    4a3a:	mov	r2, r8
    4a3c:	mov	r1, r7
    4a3e:	mov	r0, r4
    4a40:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    4a44:	b.w	4a48 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]>

00004a48 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]>:
  f2.close();
  if(nd<0) {DBG_FAIL_MACRO; return false;}
  return true;
}

bool mSD_Base::sd_moveDir(uint32_t store0, char *oldfilename, uint32_t store1, char *newfilename)
    4a48:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4a4c:	add.w	sl, r0, r1, lsl #2
    4a50:	mov	r8, r1
    4a52:	sub.w	sp, sp, #596	; 0x254
    4a56:	mov	r9, r0
    }

    uint32_t sd_getFSCount(void) {return fsCount;}
    const char *sd_getFSName(uint32_t store) { return sd_name[store];}

    File sd_open(uint32_t store, const char *filename, uint32_t mode) { return sdx[store]->open(filename,mode);  }
    4a58:	ldr.w	r1, [sl, #84]	; 0x54
    4a5c:	str	r3, [sp, #8]
    4a5e:	add	r0, sp, #40	; 0x28
    4a60:	ldr	r4, [r1, #0]
    4a62:	movs	r3, #0
    4a64:	str	r2, [sp, #12]
    4a66:	ldr	r4, [r4, #0]
    4a68:	blx	r4
	}
	virtual void close() {
		if (f) f->close();
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
    4a6a:	ldr	r3, [sp, #56]	; 0x38
    4a6c:	cmp	r3, #0
    4a6e:	beq.w	53c6 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x97e>
    4a72:	ldr	r2, [r3, #0]
    4a74:	ldr	r6, [pc, #460]	; (4c44 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x1fc>)
    4a76:	ldr	r2, [r2, #68]	; 0x44
    4a78:	cmp	r2, r6
    4a7a:	bne.w	4d52 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x30a>
    4a7e:	ldr	r0, [r3, #16]
    4a80:	cmp	r0, #0
    4a82:	beq.w	4c00 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x1b8>
    4a86:	ldr	r2, [r0, #0]
    4a88:	ldr	r2, [r2, #68]	; 0x44
    4a8a:	cmp	r2, r6
    4a8c:	bne.w	4d54 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x30c>
    4a90:	ldr	r0, [r0, #16]
    4a92:	cmp	r0, #0
    4a94:	beq.w	4c00 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x1b8>
    4a98:	ldr	r2, [r0, #0]
    4a9a:	ldr	r2, [r2, #68]	; 0x44
    4a9c:	cmp	r2, r6
    4a9e:	bne.w	4d54 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x30c>
    4aa2:	ldr	r0, [r0, #16]
    4aa4:	cmp	r0, #0
    4aa6:	beq.w	4c00 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x1b8>
    4aaa:	ldr	r2, [r0, #0]
    4aac:	ldr	r2, [r2, #68]	; 0x44
    4aae:	cmp	r2, r6
    4ab0:	bne.w	4d54 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x30c>
    4ab4:	ldr	r0, [r0, #16]
    4ab6:	cmp	r0, #0
    4ab8:	beq.w	4c00 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x1b8>
    4abc:	ldr	r2, [r0, #0]
    4abe:	ldr	r2, [r2, #68]	; 0x44
    4ac0:	cmp	r2, r6
    4ac2:	bne.w	4d54 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x30c>
    4ac6:	ldr	r0, [r0, #16]
    4ac8:	cmp	r0, #0
    4aca:	beq.w	4c00 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x1b8>
    4ace:	ldr	r2, [r0, #0]
    4ad0:	ldr	r2, [r2, #68]	; 0x44
    4ad2:	cmp	r2, r6
    4ad4:	bne.w	4d54 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x30c>
    4ad8:	ldr	r0, [r0, #16]
    4ada:	cmp	r0, #0
    4adc:	beq.w	4c00 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x1b8>
    4ae0:	ldr	r2, [r0, #0]
    4ae2:	ldr	r2, [r2, #68]	; 0x44
    4ae4:	cmp	r2, r6
    4ae6:	bne.w	4d54 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x30c>
    4aea:	ldr	r0, [r0, #16]
    4aec:	cmp	r0, #0
    4aee:	beq.w	4c00 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x1b8>
    4af2:	ldr	r3, [r0, #0]
    4af4:	ldr	r3, [r3, #68]	; 0x44
    4af6:	blx	r3
    4af8:	mov	r4, r0
  char tmp1Name[MAX_FILENAME_LEN];

  if(!sd_mkdir(store1,newfilename))  {DBG_FAIL_MACRO; return false;}

  File f1=sd_open(store0,oldfilename,FILE_READ);
  if(!f1) {DBG_FAIL_MACRO; return false;}
    4afa:	cmp	r4, #0
    4afc:	beq.w	547c <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0xa34>
    4b00:	add	r4, sp, #336	; 0x150
    4b02:	ldr.w	fp, [pc, #336]	; 4c54 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x20c>
  { while(1)
    {
      strlcpy(tmp0Name,oldfilename,MAX_FILENAME_LEN);
    4b06:	mov.w	r2, #256	; 0x100
    4b0a:	ldr	r1, [sp, #12]
    4b0c:	add	r0, sp, #80	; 0x50
    4b0e:	bl	11380 <strlcpy>
      if(tmp0Name[strlen(tmp0Name)-1]!='/') strlcat(tmp0Name,"/",MAX_FILENAME_LEN);
    4b12:	add	r0, sp, #80	; 0x50
    4b14:	bl	113c0 <strlen>
    4b18:	add	r3, sp, #80	; 0x50
    4b1a:	add	r0, r3
    4b1c:	ldrb.w	r3, [r0, #-1]
    4b20:	cmp	r3, #47	; 0x2f
    4b22:	beq.n	4b30 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0xe8>
    4b24:	mov.w	r2, #256	; 0x100
    4b28:	ldr	r1, [pc, #284]	; (4c48 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x200>)
    4b2a:	add	r0, sp, #80	; 0x50
    4b2c:	bl	1132c <strlcat>

      strlcpy(tmp1Name,newfilename,MAX_FILENAME_LEN);
    4b30:	mov.w	r2, #256	; 0x100
    4b34:	ldr	r1, [sp, #632]	; 0x278
    4b36:	mov	r0, r4
    4b38:	bl	11380 <strlcpy>
      if(tmp1Name[strlen(tmp1Name)-1]!='/') strlcat(tmp1Name,"/",MAX_FILENAME_LEN);
    4b3c:	mov	r0, r4
    4b3e:	bl	113c0 <strlen>
    4b42:	add	r0, r4
    4b44:	ldrb.w	r3, [r0, #-1]
    4b48:	cmp	r3, #47	; 0x2f
    4b4a:	beq.n	4b58 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x110>
    4b4c:	mov.w	r2, #256	; 0x100
    4b50:	ldr	r1, [pc, #244]	; (4c48 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x200>)
    4b52:	mov	r0, r4
    4b54:	bl	1132c <strlcat>
	}
	virtual bool isDirectory() {
		return (f) ? f->isDirectory() : false;
	}
	virtual File openNextFile(uint8_t mode=0) {
		return (f) ? f->openNextFile(mode) : *this;
    4b58:	ldr	r1, [sp, #56]	; 0x38
    4b5a:	cmp	r1, #0
    4b5c:	beq.w	4e16 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3ce>
    4b60:	ldr	r3, [r1, #0]
    4b62:	ldr	r2, [pc, #232]	; (4c4c <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x204>)
    4b64:	ldr	r3, [r3, #80]	; 0x50
    4b66:	cmp	r3, r2
    4b68:	bne.w	4e3c <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3f4>
    4b6c:	ldr	r1, [r1, #16]
    4b6e:	cmp	r1, #0
    4b70:	beq.w	4e16 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3ce>
    4b74:	ldr	r3, [r1, #0]
    4b76:	ldr	r3, [r3, #80]	; 0x50
    4b78:	cmp	r3, r2
    4b7a:	bne.w	4e3c <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3f4>
    4b7e:	ldr	r1, [r1, #16]
    4b80:	cmp	r1, #0
    4b82:	beq.w	4e16 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3ce>
    4b86:	ldr	r3, [r1, #0]
    4b88:	ldr	r3, [r3, #80]	; 0x50
    4b8a:	cmp	r3, r2
    4b8c:	bne.w	4e3c <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3f4>
    4b90:	ldr	r1, [r1, #16]
    4b92:	cmp	r1, #0
    4b94:	beq.w	4e16 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3ce>
    4b98:	ldr	r3, [r1, #0]
    4b9a:	ldr	r3, [r3, #80]	; 0x50
    4b9c:	cmp	r3, r2
    4b9e:	bne.w	4e3c <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3f4>
    4ba2:	ldr	r1, [r1, #16]
    4ba4:	cmp	r1, #0
    4ba6:	beq.w	4e16 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3ce>
    4baa:	ldr	r3, [r1, #0]
    4bac:	ldr	r3, [r3, #80]	; 0x50
    4bae:	cmp	r3, r2
    4bb0:	bne.w	4e3c <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3f4>
    4bb4:	ldr	r1, [r1, #16]
    4bb6:	cmp	r1, #0
    4bb8:	beq.w	4e16 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3ce>
    4bbc:	ldr	r3, [r1, #0]
    4bbe:	ldr	r3, [r3, #80]	; 0x50
    4bc0:	cmp	r3, r2
    4bc2:	bne.w	4e3c <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3f4>
    4bc6:	ldr	r1, [r1, #16]
    4bc8:	cmp	r1, #0
    4bca:	beq.w	4e16 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3ce>
    4bce:	ldr	r3, [r1, #0]
    4bd0:	ldr	r3, [r3, #80]	; 0x50
    4bd2:	cmp	r3, r2
    4bd4:	bne.w	4e3c <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3f4>
    4bd8:	ldr	r1, [r1, #16]
    4bda:	cmp	r1, #0
    4bdc:	beq.w	4e16 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3ce>
    4be0:	ldr	r3, [r1, #0]
    4be2:	ldr	r3, [r3, #80]	; 0x50
    4be4:	cmp	r3, r2
    4be6:	bne.w	4e3c <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3f4>
    4bea:	ldr	r1, [r1, #16]
    4bec:	cmp	r1, #0
    4bee:	beq.w	4e16 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3ce>
    4bf2:	add	r5, sp, #60	; 0x3c
    4bf4:	ldr	r3, [r1, #0]
    4bf6:	movs	r2, #0
    4bf8:	mov	r0, r5
    4bfa:	ldr	r3, [r3, #80]	; 0x50
    4bfc:	blx	r3
    4bfe:	b.n	4e44 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3fc>
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    4c00:	ldr.w	fp, [pc, #80]	; 4c54 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x20c>
    4c04:	movs	r4, #0
    4c06:	str.w	fp, [sp, #40]	; 0x28
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    4c0a:	ldr	r2, [r3, #16]
    4c0c:	subs	r2, #1
    4c0e:	str	r2, [r3, #16]
    4c10:	cbnz	r2, 4c3a <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x1f2>
    4c12:	ldr	r5, [sp, #56]	; 0x38
    4c14:	cbz	r5, 4c3a <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x1f2>
    4c16:	ldr	r2, [r5, #0]
    4c18:	ldr	r3, [pc, #52]	; (4c50 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x208>)
    4c1a:	ldr	r2, [r2, #32]
    4c1c:	cmp	r2, r3
    4c1e:	bne.w	53e0 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x998>
    4c22:	ldr	r1, [r5, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    4c24:	str.w	fp, [r5]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    4c28:	cbz	r1, 4c32 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x1ea>
    4c2a:	ldr	r2, [r1, #16]
    4c2c:	subs	r2, #1
    4c2e:	str	r2, [r1, #16]
    4c30:	cbz	r2, 4c58 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x210>
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
		invalidate();
	}
    4c32:	mov	r0, r5
    4c34:	movs	r1, #20
    4c36:	bl	f6e0 <operator delete(void*, unsigned int)>
        }
      }
    }
  }
  return sd_rmdir(store0,oldfilename);
}
    4c3a:	mov	r0, r4
    4c3c:	add.w	sp, sp, #596	; 0x254
    4c40:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4c44:	.word	0x0000011d
    4c48:	.word	0x20000308
    4c4c:	.word	0x00000149
    4c50:	.word	0x00000d69
    4c54:	.word	0x20000074
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    4c58:	ldr	r6, [r5, #16]
    4c5a:	cmp	r6, #0
    4c5c:	beq.n	4c32 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x1ea>
    4c5e:	ldr	r2, [r6, #0]
    4c60:	ldr	r2, [r2, #32]
    4c62:	cmp	r2, r3
    4c64:	bne.w	53f6 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x9ae>
    4c68:	ldr	r1, [r6, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    4c6a:	str.w	fp, [r6]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    4c6e:	cmp	r1, #0
    4c70:	beq.n	4d48 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x300>
    4c72:	ldr	r2, [r1, #16]
    4c74:	subs	r2, #1
    4c76:	str	r2, [r1, #16]
    4c78:	cmp	r2, #0
    4c7a:	bne.n	4d48 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x300>
    4c7c:	ldr	r7, [r6, #16]
    4c7e:	cmp	r7, #0
    4c80:	beq.n	4d48 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x300>
    4c82:	ldr	r2, [r7, #0]
    4c84:	ldr	r2, [r2, #32]
    4c86:	cmp	r2, r3
    4c88:	bne.w	5412 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x9ca>
    4c8c:	ldr	r1, [r7, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    4c8e:	str.w	fp, [r7]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    4c92:	cmp	r1, #0
    4c94:	beq.n	4d40 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x2f8>
    4c96:	ldr	r2, [r1, #16]
    4c98:	subs	r2, #1
    4c9a:	str	r2, [r1, #16]
    4c9c:	cmp	r2, #0
    4c9e:	bne.n	4d40 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x2f8>
    4ca0:	ldr.w	r8, [r7, #16]
    4ca4:	cmp.w	r8, #0
    4ca8:	beq.n	4d40 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x2f8>
    4caa:	ldr.w	r2, [r8]
    4cae:	ldr	r2, [r2, #32]
    4cb0:	cmp	r2, r3
    4cb2:	bne.w	5428 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x9e0>
    4cb6:	ldr.w	r1, [r8, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    4cba:	str.w	fp, [r8]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    4cbe:	cmp	r1, #0
    4cc0:	beq.n	4d38 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x2f0>
    4cc2:	ldr	r2, [r1, #16]
    4cc4:	subs	r2, #1
    4cc6:	str	r2, [r1, #16]
    4cc8:	cmp	r2, #0
    4cca:	bne.n	4d38 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x2f0>
    4ccc:	ldr.w	r9, [r8, #16]
    4cd0:	cmp.w	r9, #0
    4cd4:	beq.n	4d38 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x2f0>
    4cd6:	ldr.w	r2, [r9]
    4cda:	ldr	r2, [r2, #32]
    4cdc:	cmp	r2, r3
    4cde:	bne.w	5450 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0xa08>
    4ce2:	ldr.w	r1, [r9, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    4ce6:	str.w	fp, [r9]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    4cea:	cbz	r1, 4d30 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x2e8>
    4cec:	ldr	r2, [r1, #16]
    4cee:	subs	r2, #1
    4cf0:	str	r2, [r1, #16]
    4cf2:	cbnz	r2, 4d30 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x2e8>
    4cf4:	ldr.w	sl, [r9, #16]
    4cf8:	cmp.w	sl, #0
    4cfc:	beq.n	4d30 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x2e8>
    4cfe:	ldr.w	r2, [sl]
    4d02:	ldr	r2, [r2, #32]
    4d04:	cmp	r2, r3
    4d06:	bne.w	5456 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0xa0e>
    4d0a:	ldr.w	r2, [sl, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    4d0e:	str.w	fp, [sl]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    4d12:	cbz	r2, 4d28 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x2e0>
    4d14:	ldr	r3, [r2, #16]
    4d16:	subs	r3, #1
    4d18:	str	r3, [r2, #16]
    4d1a:	cbnz	r3, 4d28 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x2e0>
    4d1c:	ldr.w	r0, [sl, #16]
    4d20:	cbz	r0, 4d28 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x2e0>
    4d22:	ldr	r3, [r0, #0]
    4d24:	ldr	r3, [r3, #32]
    4d26:	blx	r3
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
		invalidate();
	}
    4d28:	mov	r0, sl
    4d2a:	movs	r1, #20
    4d2c:	bl	f6e0 <operator delete(void*, unsigned int)>
    4d30:	mov	r0, r9
    4d32:	movs	r1, #20
    4d34:	bl	f6e0 <operator delete(void*, unsigned int)>
    4d38:	mov	r0, r8
    4d3a:	movs	r1, #20
    4d3c:	bl	f6e0 <operator delete(void*, unsigned int)>
    4d40:	mov	r0, r7
    4d42:	movs	r1, #20
    4d44:	bl	f6e0 <operator delete(void*, unsigned int)>
    4d48:	mov	r0, r6
    4d4a:	movs	r1, #20
    4d4c:	bl	f6e0 <operator delete(void*, unsigned int)>
    4d50:	b.n	4c32 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x1ea>
	}
	virtual void close() {
		if (f) f->close();
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
    4d52:	mov	r0, r3
    4d54:	blx	r2
    4d56:	mov	r4, r0
    4d58:	b.n	4afa <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0xb2>
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    4d5a:	str.w	fp, [r5]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    4d5e:	ldr	r3, [r2, #16]
    4d60:	subs	r3, #1
    4d62:	str	r3, [r2, #16]
    4d64:	cmp	r3, #0
    4d66:	bne.n	4e16 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3ce>
    4d68:	ldr	r4, [r5, #16]
    4d6a:	cmp	r4, #0
    4d6c:	beq.n	4e16 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3ce>
    4d6e:	ldr	r2, [r4, #0]
    4d70:	ldr	r3, [pc, #192]	; (4e34 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3ec>)
    4d72:	ldr	r2, [r2, #32]
    4d74:	cmp	r2, r3
    4d76:	bne.w	5402 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x9ba>
    4d7a:	ldr	r1, [r4, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    4d7c:	str.w	fp, [r4]
    4d80:	ldr	r0, [pc, #180]	; (4e38 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3f0>)
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    4d82:	cmp	r1, #0
    4d84:	beq.n	4e0e <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3c6>
    4d86:	ldr	r2, [r1, #16]
    4d88:	subs	r2, #1
    4d8a:	str	r2, [r1, #16]
    4d8c:	cmp	r2, #0
    4d8e:	bne.n	4e0e <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3c6>
    4d90:	ldr	r5, [r4, #16]
    4d92:	cmp	r5, #0
    4d94:	beq.n	4e0e <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3c6>
    4d96:	ldr	r2, [r5, #0]
    4d98:	ldr	r2, [r2, #32]
    4d9a:	cmp	r2, r3
    4d9c:	bne.w	5418 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x9d0>
    4da0:	ldr	r1, [r5, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    4da2:	str	r0, [r5, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    4da4:	cmp	r1, #0
    4da6:	beq.n	4e06 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3be>
    4da8:	ldr	r2, [r1, #16]
    4daa:	subs	r2, #1
    4dac:	str	r2, [r1, #16]
    4dae:	cbnz	r2, 4e06 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3be>
    4db0:	ldr	r6, [r5, #16]
    4db2:	cbz	r6, 4e06 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3be>
    4db4:	ldr	r2, [r6, #0]
    4db6:	ldr	r2, [r2, #32]
    4db8:	cmp	r2, r3
    4dba:	bne.w	543e <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x9f6>
    4dbe:	ldr	r1, [r6, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    4dc0:	str.w	fp, [r6]
    4dc4:	ldr	r0, [pc, #112]	; (4e38 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3f0>)
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    4dc6:	cbz	r1, 4dfe <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3b6>
    4dc8:	ldr	r2, [r1, #16]
    4dca:	subs	r2, #1
    4dcc:	str	r2, [r1, #16]
    4dce:	cbnz	r2, 4dfe <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3b6>
    4dd0:	ldr	r7, [r6, #16]
    4dd2:	cbz	r7, 4dfe <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3b6>
    4dd4:	ldr	r2, [r7, #0]
    4dd6:	ldr	r2, [r2, #32]
    4dd8:	cmp	r2, r3
    4dda:	bne.w	5444 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x9fc>
    4dde:	ldr	r2, [r7, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    4de0:	str	r0, [r7, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    4de2:	cbz	r2, 4df6 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3ae>
    4de4:	ldr	r3, [r2, #16]
    4de6:	subs	r3, #1
    4de8:	str	r3, [r2, #16]
    4dea:	cbnz	r3, 4df6 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3ae>
    4dec:	ldr	r0, [r7, #16]
    4dee:	cbz	r0, 4df6 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3ae>
    4df0:	ldr	r3, [r0, #0]
    4df2:	ldr	r3, [r3, #32]
    4df4:	blx	r3
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
		invalidate();
	}
    4df6:	mov	r0, r7
    4df8:	movs	r1, #20
    4dfa:	bl	f6e0 <operator delete(void*, unsigned int)>
    4dfe:	mov	r0, r6
    4e00:	movs	r1, #20
    4e02:	bl	f6e0 <operator delete(void*, unsigned int)>
    4e06:	mov	r0, r5
    4e08:	movs	r1, #20
    4e0a:	bl	f6e0 <operator delete(void*, unsigned int)>
    4e0e:	mov	r0, r4
    4e10:	movs	r1, #20
    4e12:	bl	f6e0 <operator delete(void*, unsigned int)>
    bool sd_mkdir(uint32_t store, char *filename) {  return sdx[store]->mkdir(filename);  }
    bool sd_rename(uint32_t store, char *oldfilename, char *newfilename) { return sdx[store]->rename(oldfilename,newfilename);  }
    bool sd_remove(uint32_t store, const char *filename) {    Serial.println(filename);
return sdx[store]->remove(filename);  }
    bool sd_rmdir(uint32_t store, char *filename) { return sdx[store]->rmdir(filename);  }
    4e16:	ldr.w	r0, [sl, #84]	; 0x54
    4e1a:	ldr	r1, [sp, #12]
    4e1c:	ldr	r3, [r0, #0]
    4e1e:	ldr	r3, [r3, #20]
    4e20:	blx	r3
    4e22:	ldr	r3, [sp, #56]	; 0x38
    4e24:	mov	r4, r0
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    4e26:	str.w	fp, [sp, #40]	; 0x28
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    4e2a:	cmp	r3, #0
    4e2c:	bne.w	4c0a <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x1c2>
    4e30:	b.n	4c3a <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x1f2>
    4e32:	nop
    4e34:	.word	0x00000d69
    4e38:	.word	0x20000074
	}
	virtual bool isDirectory() {
		return (f) ? f->isDirectory() : false;
	}
	virtual File openNextFile(uint8_t mode=0) {
		return (f) ? f->openNextFile(mode) : *this;
    4e3c:	add	r5, sp, #60	; 0x3c
    4e3e:	movs	r2, #0
    4e40:	mov	r0, r5
    4e42:	blx	r3
	}
	virtual void close() {
		if (f) f->close();
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
    4e44:	ldr	r2, [r5, #16]
    4e46:	cmp	r2, #0
    4e48:	beq.n	4e16 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3ce>
    4e4a:	ldr	r3, [r2, #0]
    4e4c:	ldr	r3, [r3, #68]	; 0x44
    4e4e:	cmp	r3, r6
    4e50:	bne.w	5394 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x94c>
    4e54:	ldr	r0, [r2, #16]
    4e56:	cmp	r0, #0
    4e58:	beq.w	4d5a <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x312>
    4e5c:	ldr	r1, [r0, #0]
    4e5e:	ldr	r1, [r1, #68]	; 0x44
    4e60:	cmp	r1, r6
    4e62:	bne.w	53aa <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x962>
    4e66:	ldr	r0, [r0, #16]
    4e68:	cmp	r0, #0
    4e6a:	beq.w	4d5a <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x312>
    4e6e:	ldr	r3, [r0, #0]
    4e70:	ldr	r3, [r3, #68]	; 0x44
    4e72:	cmp	r3, r6
    4e74:	bne.w	5396 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x94e>
    4e78:	ldr	r0, [r0, #16]
    4e7a:	cmp	r0, #0
    4e7c:	beq.w	4d5a <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x312>
    4e80:	ldr	r3, [r0, #0]
    4e82:	ldr	r3, [r3, #68]	; 0x44
    4e84:	cmp	r3, r6
    4e86:	bne.w	5396 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x94e>
    4e8a:	ldr	r0, [r0, #16]
    4e8c:	cmp	r0, #0
    4e8e:	beq.w	4d5a <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x312>
    4e92:	ldr	r3, [r0, #0]
    4e94:	ldr	r3, [r3, #68]	; 0x44
    4e96:	cmp	r3, r6
    4e98:	bne.w	5396 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x94e>
    4e9c:	ldr	r0, [r0, #16]
    4e9e:	cmp	r0, #0
    4ea0:	beq.w	4d5a <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x312>
    4ea4:	ldr	r3, [r0, #0]
    4ea6:	ldr	r3, [r3, #68]	; 0x44
    4ea8:	cmp	r3, r6
    4eaa:	bne.w	5396 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x94e>
    4eae:	ldr	r0, [r0, #16]
    4eb0:	cmp	r0, #0
    4eb2:	beq.w	4d5a <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x312>
    4eb6:	ldr	r3, [r0, #0]
    4eb8:	ldr	r3, [r3, #68]	; 0x44
    4eba:	blx	r3

      strlcpy(tmp1Name,newfilename,MAX_FILENAME_LEN);
      if(tmp1Name[strlen(tmp1Name)-1]!='/') strlcat(tmp1Name,"/",MAX_FILENAME_LEN);

      File f2=f1.openNextFile();
      if(!f2) break;
    4ebc:	cmp	r0, #0
    4ebe:	beq.w	546e <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0xa26>
	}
	virtual const char* name() {
		return (f) ? f->name() : "";
    4ec2:	ldr	r0, [r5, #16]
    4ec4:	cmp	r0, #0
    4ec6:	beq.w	5390 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x948>
    4eca:	ldr	r2, [r0, #0]
    4ecc:	ldr	r3, [pc, #696]	; (5188 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x740>)
    4ece:	ldr	r2, [r2, #72]	; 0x48
    4ed0:	cmp	r2, r3
    4ed2:	bne.w	539a <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x952>
    4ed6:	ldr	r0, [r0, #16]
    4ed8:	cmp	r0, #0
    4eda:	beq.w	5390 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x948>
    4ede:	ldr	r2, [r0, #0]
    4ee0:	ldr	r2, [r2, #72]	; 0x48
    4ee2:	cmp	r2, r3
    4ee4:	bne.w	539a <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x952>
    4ee8:	ldr	r0, [r0, #16]
    4eea:	cmp	r0, #0
    4eec:	beq.w	5390 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x948>
    4ef0:	ldr	r2, [r0, #0]
    4ef2:	ldr	r2, [r2, #72]	; 0x48
    4ef4:	cmp	r2, r3
    4ef6:	bne.w	539a <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x952>
    4efa:	ldr	r0, [r0, #16]
    4efc:	cmp	r0, #0
    4efe:	beq.w	5390 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x948>
    4f02:	ldr	r2, [r0, #0]
    4f04:	ldr	r2, [r2, #72]	; 0x48
    4f06:	cmp	r2, r3
    4f08:	bne.w	539a <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x952>
    4f0c:	ldr	r0, [r0, #16]
    4f0e:	cmp	r0, #0
    4f10:	beq.w	5390 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x948>
    4f14:	ldr	r2, [r0, #0]
    4f16:	ldr	r2, [r2, #72]	; 0x48
    4f18:	cmp	r2, r3
    4f1a:	bne.w	539a <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x952>
    4f1e:	ldr	r0, [r0, #16]
    4f20:	cmp	r0, #0
    4f22:	beq.w	5390 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x948>
    4f26:	ldr	r2, [r0, #0]
    4f28:	ldr	r2, [r2, #72]	; 0x48
    4f2a:	cmp	r2, r3
    4f2c:	bne.w	539a <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x952>
    4f30:	ldr	r0, [r0, #16]
    4f32:	cmp	r0, #0
    4f34:	beq.w	5390 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x948>
    4f38:	ldr	r3, [r0, #0]
    4f3a:	ldr	r3, [r3, #72]	; 0x48
    4f3c:	blx	r3
    4f3e:	mov	r1, r0
      { // generate filenames
        strlcat(tmp0Name,f2.name(),MAX_FILENAME_LEN);
    4f40:	mov.w	r2, #256	; 0x100
    4f44:	add	r0, sp, #80	; 0x50
    4f46:	bl	1132c <strlcat>
    4f4a:	ldr	r0, [r5, #16]
    4f4c:	cmp	r0, #0
    4f4e:	beq.w	538c <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x944>
    4f52:	ldr	r2, [r0, #0]
    4f54:	ldr	r3, [pc, #560]	; (5188 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x740>)
    4f56:	ldr	r2, [r2, #72]	; 0x48
    4f58:	cmp	r2, r3
    4f5a:	bne.w	53a4 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x95c>
    4f5e:	ldr	r0, [r0, #16]
    4f60:	cmp	r0, #0
    4f62:	beq.w	538c <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x944>
    4f66:	ldr	r2, [r0, #0]
    4f68:	ldr	r2, [r2, #72]	; 0x48
    4f6a:	cmp	r2, r3
    4f6c:	bne.w	53a4 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x95c>
    4f70:	ldr	r0, [r0, #16]
    4f72:	cmp	r0, #0
    4f74:	beq.w	538c <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x944>
    4f78:	ldr	r2, [r0, #0]
    4f7a:	ldr	r2, [r2, #72]	; 0x48
    4f7c:	cmp	r2, r3
    4f7e:	bne.w	53a4 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x95c>
    4f82:	ldr	r0, [r0, #16]
    4f84:	cmp	r0, #0
    4f86:	beq.w	538c <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x944>
    4f8a:	ldr	r2, [r0, #0]
    4f8c:	ldr	r2, [r2, #72]	; 0x48
    4f8e:	cmp	r2, r3
    4f90:	bne.w	53a4 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x95c>
    4f94:	ldr	r0, [r0, #16]
    4f96:	cmp	r0, #0
    4f98:	beq.w	538c <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x944>
    4f9c:	ldr	r2, [r0, #0]
    4f9e:	ldr	r2, [r2, #72]	; 0x48
    4fa0:	cmp	r2, r3
    4fa2:	bne.w	53a4 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x95c>
    4fa6:	ldr	r0, [r0, #16]
    4fa8:	cmp	r0, #0
    4faa:	beq.w	538c <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x944>
    4fae:	ldr	r2, [r0, #0]
    4fb0:	ldr	r2, [r2, #72]	; 0x48
    4fb2:	cmp	r2, r3
    4fb4:	bne.w	53a4 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x95c>
    4fb8:	ldr	r0, [r0, #16]
    4fba:	cmp	r0, #0
    4fbc:	beq.w	538c <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x944>
    4fc0:	ldr	r3, [r0, #0]
    4fc2:	ldr	r3, [r3, #72]	; 0x48
    4fc4:	blx	r3
    4fc6:	mov	r1, r0
        strlcat(tmp1Name,f2.name(),MAX_FILENAME_LEN);
    4fc8:	mov.w	r2, #256	; 0x100
    4fcc:	mov	r0, r4
    4fce:	bl	1132c <strlcat>
	}
	virtual bool isDirectory() {
		return (f) ? f->isDirectory() : false;
    4fd2:	ldr	r0, [r5, #16]
    4fd4:	cmp	r0, #0
    4fd6:	beq.w	5258 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x810>
    4fda:	ldr	r2, [r0, #0]
    4fdc:	ldr	r3, [pc, #428]	; (518c <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x744>)
    4fde:	ldr	r2, [r2, #76]	; 0x4c
    4fe0:	cmp	r2, r3
    4fe2:	bne.w	53a0 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x958>
    4fe6:	ldr	r0, [r0, #16]
    4fe8:	cmp	r0, #0
    4fea:	beq.w	5258 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x810>
    4fee:	ldr	r2, [r0, #0]
    4ff0:	ldr	r2, [r2, #76]	; 0x4c
    4ff2:	cmp	r2, r3
    4ff4:	bne.w	53a0 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x958>
    4ff8:	ldr	r0, [r0, #16]
    4ffa:	cmp	r0, #0
    4ffc:	beq.w	5258 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x810>
    5000:	ldr	r2, [r0, #0]
    5002:	ldr	r2, [r2, #76]	; 0x4c
    5004:	cmp	r2, r3
    5006:	bne.w	53a0 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x958>
    500a:	ldr	r0, [r0, #16]
    500c:	cmp	r0, #0
    500e:	beq.w	5258 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x810>
    5012:	ldr	r2, [r0, #0]
    5014:	ldr	r2, [r2, #76]	; 0x4c
    5016:	cmp	r2, r3
    5018:	bne.w	53a0 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x958>
    501c:	ldr	r0, [r0, #16]
    501e:	cmp	r0, #0
    5020:	beq.w	5258 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x810>
    5024:	ldr	r2, [r0, #0]
    5026:	ldr	r2, [r2, #76]	; 0x4c
    5028:	cmp	r2, r3
    502a:	bne.w	53a0 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x958>
    502e:	ldr	r0, [r0, #16]
    5030:	cmp	r0, #0
    5032:	beq.w	5258 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x810>
    5036:	ldr	r2, [r0, #0]
    5038:	ldr	r2, [r2, #76]	; 0x4c
    503a:	cmp	r2, r3
    503c:	bne.w	53a0 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x958>
    5040:	ldr	r0, [r0, #16]
    5042:	cmp	r0, #0
    5044:	beq.w	5258 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x810>
    5048:	ldr	r3, [r0, #0]
    504a:	ldr	r3, [r3, #76]	; 0x4c
    504c:	blx	r3

        if(f2.isDirectory())
    504e:	cmp	r0, #0
    5050:	beq.w	5258 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x810>
        { 
          if(!sd_moveDir(store0, tmp0Name, store1, tmp1Name)) {DBG_FAIL_MACRO; return false;}
    5054:	str	r4, [sp, #0]
    5056:	add	r2, sp, #80	; 0x50
    5058:	ldr	r3, [sp, #8]
    505a:	mov	r1, r8
    505c:	mov	r0, r9
    505e:	bl	4a14 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*)>
    5062:	cmp	r0, #0
    5064:	beq.w	528e <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x846>
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    5068:	ldr	r2, [r5, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    506a:	str.w	fp, [r5]
    506e:	ldr	r1, [pc, #288]	; (5190 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x748>)
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    5070:	cmp	r2, #0
    5072:	beq.w	4b06 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0xbe>
    5076:	ldr	r3, [r2, #16]
    5078:	subs	r3, #1
    507a:	str	r3, [r2, #16]
    507c:	cmp	r3, #0
    507e:	bne.w	4b06 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0xbe>
    5082:	ldr	r5, [r5, #16]
    5084:	cmp	r5, #0
    5086:	beq.w	4b06 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0xbe>
    508a:	ldr	r2, [r5, #0]
    508c:	ldr	r3, [pc, #260]	; (5194 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x74c>)
    508e:	ldr	r2, [r2, #32]
    5090:	cmp	r2, r3
    5092:	bne.w	53ae <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x966>
    5096:	ldr	r0, [r5, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    5098:	str	r1, [r5, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    509a:	cmp	r0, #0
    509c:	beq.w	524e <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x806>
    50a0:	ldr	r2, [r0, #16]
    50a2:	subs	r2, #1
    50a4:	str	r2, [r0, #16]
    50a6:	cmp	r2, #0
    50a8:	bne.w	524e <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x806>
    50ac:	ldr	r7, [r5, #16]
    50ae:	cmp	r7, #0
    50b0:	beq.w	524e <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x806>
    50b4:	ldr	r2, [r7, #0]
    50b6:	ldr	r2, [r2, #32]
    50b8:	cmp	r2, r3
    50ba:	bne.w	53b6 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x96e>
    50be:	ldr	r0, [r7, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    50c0:	str	r1, [r7, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    50c2:	cmp	r0, #0
    50c4:	beq.w	5246 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x7fe>
    50c8:	ldr	r2, [r0, #16]
    50ca:	subs	r2, #1
    50cc:	str	r2, [r0, #16]
    50ce:	cmp	r2, #0
    50d0:	bne.w	5246 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x7fe>
    50d4:	ldr	r2, [r7, #16]
    50d6:	cmp	r2, #0
    50d8:	beq.w	5246 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x7fe>
    50dc:	ldr	r1, [r2, #0]
    50de:	ldr	r1, [r1, #32]
    50e0:	cmp	r1, r3
    50e2:	bne.w	53d2 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x98a>
    50e6:	ldr.w	lr, [r2, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    50ea:	str.w	fp, [r2]
    50ee:	ldr	r0, [pc, #160]	; (5190 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x748>)
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    50f0:	cmp.w	lr, #0
    50f4:	beq.w	523e <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x7f6>
    50f8:	ldr.w	r1, [lr, #16]
    50fc:	subs	r1, #1
    50fe:	str.w	r1, [lr, #16]
    5102:	cmp	r1, #0
    5104:	bne.w	523e <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x7f6>
    5108:	ldr	r1, [r2, #16]
    510a:	str	r1, [sp, #16]
    510c:	cmp	r1, #0
    510e:	beq.w	523e <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x7f6>
    5112:	ldr	r1, [sp, #16]
    5114:	ldr	r1, [r1, #0]
    5116:	ldr	r1, [r1, #32]
    5118:	cmp	r1, r3
    511a:	bne.w	53e6 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x99e>
    511e:	ldr	r1, [sp, #16]
    5120:	ldr.w	lr, [r1, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    5124:	str	r0, [r1, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    5126:	cmp.w	lr, #0
    512a:	beq.w	5232 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x7ea>
    512e:	ldr.w	r1, [lr, #16]
    5132:	subs	r1, #1
    5134:	str.w	r1, [lr, #16]
    5138:	cmp	r1, #0
    513a:	bne.n	5232 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x7ea>
    513c:	ldr	r1, [sp, #16]
    513e:	ldr	r1, [r1, #16]
    5140:	str	r1, [sp, #20]
    5142:	cmp	r1, #0
    5144:	beq.n	5232 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x7ea>
    5146:	ldr	r0, [sp, #20]
    5148:	ldr	r1, [r0, #0]
    514a:	ldr	r1, [r1, #32]
    514c:	cmp	r1, r3
    514e:	bne.w	5408 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x9c0>
    5152:	ldr.w	lr, [r0, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    5156:	str.w	fp, [r0]
    515a:	ldr	r0, [pc, #52]	; (5190 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x748>)
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    515c:	cmp.w	lr, #0
    5160:	beq.n	5226 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x7de>
    5162:	ldr.w	r1, [lr, #16]
    5166:	subs	r1, #1
    5168:	str.w	r1, [lr, #16]
    516c:	cmp	r1, #0
    516e:	bne.n	5226 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x7de>
    5170:	ldr	r1, [sp, #20]
    5172:	ldr	r1, [r1, #16]
    5174:	str	r1, [sp, #24]
    5176:	cmp	r1, #0
    5178:	beq.n	5226 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x7de>
    517a:	ldr	r1, [sp, #24]
    517c:	ldr	r1, [r1, #0]
    517e:	ldr	r1, [r1, #32]
    5180:	cmp	r1, r3
    5182:	bne.w	541e <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x9d6>
    5186:	b.n	5198 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x750>
    5188:	.word	0x00000129
    518c:	.word	0x0000013d
    5190:	.word	0x20000074
    5194:	.word	0x00000d69
    5198:	ldr	r1, [sp, #24]
    519a:	ldr.w	lr, [r1, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    519e:	str	r0, [r1, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    51a0:	cmp.w	lr, #0
    51a4:	beq.n	521a <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x7d2>
    51a6:	ldr.w	r1, [lr, #16]
    51aa:	subs	r1, #1
    51ac:	str.w	r1, [lr, #16]
    51b0:	cmp	r1, #0
    51b2:	bne.n	521a <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x7d2>
    51b4:	ldr	r1, [sp, #24]
    51b6:	ldr	r1, [r1, #16]
    51b8:	str	r1, [sp, #28]
    51ba:	cbz	r1, 521a <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x7d2>
    51bc:	ldr	r1, [sp, #28]
    51be:	ldr	r1, [r1, #0]
    51c0:	ldr	r1, [r1, #32]
    51c2:	cmp	r1, r3
    51c4:	bne.w	5434 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x9ec>
    51c8:	ldr	r1, [sp, #28]
    51ca:	ldr.w	lr, [r1, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    51ce:	str	r0, [r1, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    51d0:	cmp.w	lr, #0
    51d4:	beq.n	520e <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x7c6>
    51d6:	ldr.w	r1, [lr, #16]
    51da:	subs	r1, #1
    51dc:	str.w	r1, [lr, #16]
    51e0:	cbnz	r1, 520e <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x7c6>
    51e2:	ldr	r1, [sp, #28]
    51e4:	ldr	r1, [r1, #16]
    51e6:	cbz	r1, 520e <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x7c6>
    51e8:	ldr	r0, [r1, #0]
    51ea:	ldr	r0, [r0, #32]
    51ec:	cmp	r0, r3
    51ee:	mov	lr, r0
    51f0:	bne.w	545c <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0xa14>
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    51f4:	mov	r0, r1
    51f6:	str	r2, [sp, #36]	; 0x24
    51f8:	str	r1, [sp, #32]
    51fa:	str.w	fp, [r0], #16
		invalidate();
    51fe:	bl	1c24 <File::invalidate() [clone .isra.1]>
	}
    5202:	ldr	r1, [sp, #32]
    5204:	mov	r0, r1
    5206:	movs	r1, #20
    5208:	bl	f6e0 <operator delete(void*, unsigned int)>
    520c:	ldr	r2, [sp, #36]	; 0x24
    520e:	ldr	r0, [sp, #28]
    5210:	movs	r1, #20
    5212:	str	r2, [sp, #32]
    5214:	bl	f6e0 <operator delete(void*, unsigned int)>
    5218:	ldr	r2, [sp, #32]
    521a:	ldr	r0, [sp, #24]
    521c:	movs	r1, #20
    521e:	str	r2, [sp, #28]
    5220:	bl	f6e0 <operator delete(void*, unsigned int)>
    5224:	ldr	r2, [sp, #28]
    5226:	ldr	r0, [sp, #20]
    5228:	movs	r1, #20
    522a:	str	r2, [sp, #24]
    522c:	bl	f6e0 <operator delete(void*, unsigned int)>
    5230:	ldr	r2, [sp, #24]
    5232:	ldr	r0, [sp, #16]
    5234:	movs	r1, #20
    5236:	str	r2, [sp, #20]
    5238:	bl	f6e0 <operator delete(void*, unsigned int)>
    523c:	ldr	r2, [sp, #20]
    523e:	mov	r0, r2
    5240:	movs	r1, #20
    5242:	bl	f6e0 <operator delete(void*, unsigned int)>
    5246:	mov	r0, r7
    5248:	movs	r1, #20
    524a:	bl	f6e0 <operator delete(void*, unsigned int)>
    524e:	mov	r0, r5
    5250:	movs	r1, #20
    5252:	bl	f6e0 <operator delete(void*, unsigned int)>
    5256:	b.n	4b06 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0xbe>
        }
        else
        { 
          if(!sd_copy(store0, tmp0Name, store1, tmp1Name)) {DBG_FAIL_MACRO; return false;}
    5258:	str	r4, [sp, #0]
    525a:	add	r2, sp, #80	; 0x50
    525c:	ldr	r3, [sp, #8]
    525e:	mov	r1, r8
    5260:	mov	r0, r9
    5262:	bl	3f64 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)>
    5266:	cbz	r0, 528e <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x846>
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
    5268:	add	r0, sp, #80	; 0x50
    526a:	bl	113c0 <strlen>
    526e:	mov	r1, r0
    5270:	add	r0, sp, #80	; 0x50
    5272:	bl	d7d4 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    5276:	ldr	r0, [pc, #524]	; (5484 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0xa3c>)
    5278:	bl	f5bc <Print::println()>

    File sd_open(uint32_t store, const char *filename, uint32_t mode) { return sdx[store]->open(filename,mode);  }
    bool sd_mkdir(uint32_t store, char *filename) {  return sdx[store]->mkdir(filename);  }
    bool sd_rename(uint32_t store, char *oldfilename, char *newfilename) { return sdx[store]->rename(oldfilename,newfilename);  }
    bool sd_remove(uint32_t store, const char *filename) {    Serial.println(filename);
return sdx[store]->remove(filename);  }
    527c:	ldr.w	r0, [sl, #84]	; 0x54
    5280:	add	r1, sp, #80	; 0x50
    5282:	ldr	r3, [r0, #0]
    5284:	ldr	r3, [r3, #16]
    5286:	blx	r3
          if(!sd_remove(store0,tmp0Name)) {DBG_FAIL_MACRO; return false;}
    5288:	cmp	r0, #0
    528a:	bne.w	5068 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x620>
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    528e:	ldr	r2, [r5, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    5290:	str.w	fp, [r5]
    5294:	ldr	r1, [pc, #496]	; (5488 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0xa40>)
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    5296:	cmp	r2, #0
    5298:	beq.n	5386 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x93e>
    529a:	ldr	r3, [r2, #16]
    529c:	subs	r3, #1
    529e:	str	r3, [r2, #16]
    52a0:	cmp	r3, #0
    52a2:	bne.n	5386 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x93e>
    52a4:	ldr	r4, [r5, #16]
    52a6:	cmp	r4, #0
    52a8:	beq.n	5386 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x93e>
    52aa:	ldr	r2, [r4, #0]
    52ac:	ldr	r3, [pc, #476]	; (548c <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0xa44>)
    52ae:	ldr	r2, [r2, #32]
    52b0:	cmp	r2, r3
    52b2:	bne.w	53fc <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x9b4>
    52b6:	ldr	r0, [r4, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    52b8:	str	r1, [r4, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    52ba:	cmp	r0, #0
    52bc:	beq.n	537e <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x936>
    52be:	ldr	r2, [r0, #16]
    52c0:	subs	r2, #1
    52c2:	str	r2, [r0, #16]
    52c4:	cmp	r2, #0
    52c6:	bne.n	537e <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x936>
    52c8:	ldr	r5, [r4, #16]
    52ca:	cmp	r5, #0
    52cc:	beq.n	537e <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x936>
    52ce:	ldr	r2, [r5, #0]
    52d0:	ldr	r2, [r2, #32]
    52d2:	cmp	r2, r3
    52d4:	bne.w	53f0 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x9a8>
    52d8:	ldr	r0, [r5, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    52da:	str	r1, [r5, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    52dc:	cmp	r0, #0
    52de:	beq.n	5376 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x92e>
    52e0:	ldr	r2, [r0, #16]
    52e2:	subs	r2, #1
    52e4:	str	r2, [r0, #16]
    52e6:	cmp	r2, #0
    52e8:	bne.n	5376 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x92e>
    52ea:	ldr	r6, [r5, #16]
    52ec:	cmp	r6, #0
    52ee:	beq.n	5376 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x92e>
    52f0:	ldr	r2, [r6, #0]
    52f2:	ldr	r2, [r2, #32]
    52f4:	cmp	r2, r3
    52f6:	bne.w	542e <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x9e6>
    52fa:	ldr	r1, [r6, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    52fc:	str.w	fp, [r6]
    5300:	ldr	r0, [pc, #388]	; (5488 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0xa40>)
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    5302:	cmp	r1, #0
    5304:	beq.n	536e <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x926>
    5306:	ldr	r2, [r1, #16]
    5308:	subs	r2, #1
    530a:	str	r2, [r1, #16]
    530c:	cbnz	r2, 536e <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x926>
    530e:	ldr	r7, [r6, #16]
    5310:	cbz	r7, 536e <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x926>
    5312:	ldr	r2, [r7, #0]
    5314:	ldr	r2, [r2, #32]
    5316:	cmp	r2, r3
    5318:	bne.w	544a <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0xa02>
    531c:	ldr	r1, [r7, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    531e:	str	r0, [r7, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    5320:	cbz	r1, 5366 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x91e>
    5322:	ldr	r2, [r1, #16]
    5324:	subs	r2, #1
    5326:	str	r2, [r1, #16]
    5328:	cbnz	r2, 5366 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x91e>
    532a:	ldr.w	r8, [r7, #16]
    532e:	cmp.w	r8, #0
    5332:	beq.n	5366 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x91e>
    5334:	ldr.w	r2, [r8]
    5338:	ldr	r2, [r2, #32]
    533a:	cmp	r2, r3
    533c:	bne.w	5468 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0xa20>
    5340:	ldr.w	r2, [r8, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    5344:	str.w	fp, [r8]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    5348:	cbz	r2, 535e <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x916>
    534a:	ldr	r3, [r2, #16]
    534c:	subs	r3, #1
    534e:	str	r3, [r2, #16]
    5350:	cbnz	r3, 535e <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x916>
    5352:	ldr.w	r0, [r8, #16]
    5356:	cbz	r0, 535e <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x916>
    5358:	ldr	r3, [r0, #0]
    535a:	ldr	r3, [r3, #32]
    535c:	blx	r3
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
		invalidate();
	}
    535e:	mov	r0, r8
    5360:	movs	r1, #20
    5362:	bl	f6e0 <operator delete(void*, unsigned int)>
    5366:	mov	r0, r7
    5368:	movs	r1, #20
    536a:	bl	f6e0 <operator delete(void*, unsigned int)>
    536e:	mov	r0, r6
    5370:	movs	r1, #20
    5372:	bl	f6e0 <operator delete(void*, unsigned int)>
    5376:	mov	r0, r5
    5378:	movs	r1, #20
    537a:	bl	f6e0 <operator delete(void*, unsigned int)>
    537e:	mov	r0, r4
    5380:	movs	r1, #20
    5382:	bl	f6e0 <operator delete(void*, unsigned int)>
    5386:	ldr	r3, [sp, #56]	; 0x38
    5388:	movs	r4, #0
    538a:	b.n	4e26 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3de>
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
	}
	virtual const char* name() {
		return (f) ? f->name() : "";
    538c:	ldr	r1, [pc, #256]	; (5490 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0xa48>)
    538e:	b.n	4fc8 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x580>
    5390:	ldr	r1, [pc, #252]	; (5490 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0xa48>)
    5392:	b.n	4f40 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x4f8>
	}
	virtual void close() {
		if (f) f->close();
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
    5394:	mov	r0, r2
    5396:	blx	r3
    5398:	b.n	4ebc <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x474>
	}
	virtual const char* name() {
		return (f) ? f->name() : "";
    539a:	blx	r2
    539c:	mov	r1, r0
    539e:	b.n	4f40 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x4f8>
	}
	virtual bool isDirectory() {
		return (f) ? f->isDirectory() : false;
    53a0:	blx	r2
    53a2:	b.n	504e <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x606>
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
	}
	virtual const char* name() {
		return (f) ? f->name() : "";
    53a4:	blx	r2
    53a6:	mov	r1, r0
    53a8:	b.n	4fc8 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x580>
	}
	virtual void close() {
		if (f) f->close();
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
    53aa:	blx	r1
    53ac:	b.n	4ebc <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x474>
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    53ae:	mov	r0, r5
    53b0:	blx	r2
    53b2:	b.w	4b06 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0xbe>
    53b6:	mov	r0, r7
    53b8:	blx	r2
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
		invalidate();
	}
    53ba:	mov	r0, r5
    53bc:	movs	r1, #20
    53be:	bl	f6e0 <operator delete(void*, unsigned int)>
    53c2:	b.w	4b06 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0xbe>
  char tmp1Name[MAX_FILENAME_LEN];

  if(!sd_mkdir(store1,newfilename))  {DBG_FAIL_MACRO; return false;}

  File f1=sd_open(store0,oldfilename,FILE_READ);
  if(!f1) {DBG_FAIL_MACRO; return false;}
    53c6:	mov	r4, r3
        }
      }
    }
  }
  return sd_rmdir(store0,oldfilename);
}
    53c8:	mov	r0, r4
    53ca:	add.w	sp, sp, #596	; 0x254
    53ce:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    53d2:	mov	r0, r2
    53d4:	blx	r1
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
		invalidate();
	}
    53d6:	mov	r0, r7
    53d8:	movs	r1, #20
    53da:	bl	f6e0 <operator delete(void*, unsigned int)>
    53de:	b.n	524e <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x806>
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    53e0:	mov	r0, r5
    53e2:	blx	r2
    53e4:	b.n	4c3a <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x1f2>
    53e6:	str	r2, [sp, #20]
    53e8:	ldr	r0, [sp, #16]
    53ea:	blx	r1
    53ec:	ldr	r2, [sp, #20]
    53ee:	b.n	523e <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x7f6>
    53f0:	mov	r0, r5
    53f2:	blx	r2
    53f4:	b.n	537e <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x936>
    53f6:	mov	r0, r6
    53f8:	blx	r2
    53fa:	b.n	4c32 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x1ea>
    53fc:	mov	r0, r4
    53fe:	blx	r2
    5400:	b.n	5386 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x93e>
    5402:	mov	r0, r4
    5404:	blx	r2
    5406:	b.n	4e16 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3ce>
    5408:	str	r2, [sp, #24]
    540a:	ldr	r0, [sp, #20]
    540c:	blx	r1
    540e:	ldr	r2, [sp, #24]
    5410:	b.n	5232 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x7ea>
    5412:	mov	r0, r7
    5414:	blx	r2
    5416:	b.n	4d48 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x300>
    5418:	mov	r0, r5
    541a:	blx	r2
    541c:	b.n	4e0e <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3c6>
    541e:	str	r2, [sp, #28]
    5420:	ldr	r0, [sp, #24]
    5422:	blx	r1
    5424:	ldr	r2, [sp, #28]
    5426:	b.n	5226 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x7de>
    5428:	mov	r0, r8
    542a:	blx	r2
    542c:	b.n	4d40 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x2f8>
    542e:	mov	r0, r6
    5430:	blx	r2
    5432:	b.n	5376 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x92e>
    5434:	str	r2, [sp, #32]
    5436:	ldr	r0, [sp, #28]
    5438:	blx	r1
    543a:	ldr	r2, [sp, #32]
    543c:	b.n	521a <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x7d2>
    543e:	mov	r0, r6
    5440:	blx	r2
    5442:	b.n	4e06 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3be>
    5444:	mov	r0, r7
    5446:	blx	r2
    5448:	b.n	4dfe <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3b6>
    544a:	mov	r0, r7
    544c:	blx	r2
    544e:	b.n	536e <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x926>
    5450:	mov	r0, r9
    5452:	blx	r2
    5454:	b.n	4d38 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x2f0>
    5456:	mov	r0, sl
    5458:	blx	r2
    545a:	b.n	4d30 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x2e8>
    545c:	str	r2, [sp, #32]
    545e:	mov	r0, r1
    5460:	mov	r3, lr
    5462:	blx	r3
    5464:	ldr	r2, [sp, #32]
    5466:	b.n	520e <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x7c6>
    5468:	mov	r0, r8
    546a:	blx	r2
    546c:	b.n	5366 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x91e>
    546e:	ldr	r2, [r5, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    5470:	str.w	fp, [r5]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    5474:	cmp	r2, #0
    5476:	beq.w	4e16 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3ce>
    547a:	b.n	4d5e <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x316>
    547c:	ldr	r3, [sp, #56]	; 0x38
    547e:	ldr.w	fp, [pc, #8]	; 5488 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0xa40>
    5482:	b.n	4e26 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3de>
    5484:	.word	0x20000c58
    5488:	.word	0x20000074
    548c:	.word	0x00000d69
    5490:	.word	0x2000016c

00005494 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)>:
 * save p2
 * 
*/

  bool MTPStorage_SD::move(uint32_t handle, uint32_t newStore, uint32_t newParent ) 
  { 
    5494:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5498:	subw	sp, sp, #2696	; 0xa88
    #if DEBUG>1
      Serial.printf("%d -> %d %d\n",handle,newStorage,newParent);
    #endif
    if(newParent==0xFFFFFFFFUL) newParent=newStore; //storage runs from 1, while record.store runs from 0
    549c:	cmp.w	r3, #4294967295
    54a0:	ite	ne
    54a2:	movne	r7, r3
    54a4:	moveq	r7, r2
 * save p2
 * 
*/

  bool MTPStorage_SD::move(uint32_t handle, uint32_t newStore, uint32_t newParent ) 
  { 
    54a6:	mov	r4, r0
    #if DEBUG>1
      Serial.printf("%d -> %d %d\n",handle,newStorage,newParent);
    #endif
    if(newParent==0xFFFFFFFFUL) newParent=newStore; //storage runs from 1, while record.store runs from 0

    Record p1 = ReadIndexRecord(handle);
    54a8:	mov	r2, r1
 * save p2
 * 
*/

  bool MTPStorage_SD::move(uint32_t handle, uint32_t newStore, uint32_t newParent ) 
  { 
    54aa:	mov	r6, r1
    #if DEBUG>1
      Serial.printf("%d -> %d %d\n",handle,newStorage,newParent);
    #endif
    if(newParent==0xFFFFFFFFUL) newParent=newStore; //storage runs from 1, while record.store runs from 0

    Record p1 = ReadIndexRecord(handle);
    54ac:	mov	r1, r0
    54ae:	add	r0, sp, #792	; 0x318
    54b0:	bl	2228 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    Record p2 = ReadIndexRecord(newParent);
    54b4:	mov	r2, r7
    54b6:	mov	r1, r4
    54b8:	add.w	r0, sp, #1064	; 0x428
    54bc:	bl	2228 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    Record p3 = ReadIndexRecord(p1.parent); 
    54c0:	ldr	r2, [sp, #792]	; 0x318
    54c2:	mov	r1, r4
    54c4:	add.w	r0, sp, #1336	; 0x538
    54c8:	bl	2228 <MTPStorage_SD::ReadIndexRecord(unsigned long)>

    if(p1.isdir) 
    54cc:	ldrb.w	r3, [sp, #804]	; 0x324
    54d0:	cbz	r3, 54dc <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x48>
    { if(!p1.scanned) 
    54d2:	ldrb.w	r3, [sp, #805]	; 0x325
    54d6:	cmp	r3, #0
    54d8:	beq.w	5688 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x1f4>
      { ScanDir(p1.store, handle) ; // in case scan directory
        WriteIndexRecord(handle, p1);
      }
    }

    Record p1o = p1;
    54dc:	mov.w	r2, #272	; 0x110
    54e0:	add	r1, sp, #792	; 0x318
    54e2:	add.w	r0, sp, #1608	; 0x648
    54e6:	bl	d064 <memcpy>
    Record p2o = p2;
    54ea:	mov.w	r2, #272	; 0x110
    54ee:	add.w	r1, sp, #1064	; 0x428
    54f2:	add.w	r0, sp, #1880	; 0x758
    54f6:	bl	d064 <memcpy>
    Record p3o = p3;

    char oldName[MAX_FILENAME_LEN];
    ConstructFilename(handle, oldName, MAX_FILENAME_LEN);
    54fa:	add	r2, sp, #280	; 0x118
    54fc:	mov.w	r3, #256	; 0x100
    5500:	mov	r1, r6
    5502:	mov	r0, r4
    5504:	bl	2688 <MTPStorage_SD::ConstructFilename(int, char*, int)>
    uint32_t jx=-1;
    Record pxo;

      // remove index from old parent
      Record px;
      if(p3.child==handle)
    5508:	ldr.w	r8, [sp, #1340]	; 0x53c
    550c:	cmp	r6, r8
    550e:	beq.w	564e <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x1ba>
        p3.child = p1.sibling;
        WriteIndexRecord(p1.parent, p3);    
      }
      else
      { jx = p3.child;
        px = ReadIndexRecord(jx); 
    5512:	mov	r2, r8
    5514:	mov	r1, r4
    5516:	add	r0, sp, #8
    5518:	bl	2228 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    551c:	add	r1, sp, #8
    551e:	mov.w	r2, #272	; 0x110
    5522:	addw	r0, sp, #2424	; 0x978
    5526:	bl	d064 <memcpy>
        pxo = px;
    552a:	addw	r1, sp, #2424	; 0x978
    552e:	addw	r0, sp, #2152	; 0x868
    5532:	mov.w	r2, #272	; 0x110
    5536:	bl	d064 <memcpy>
        while(handle != px.sibling)
    553a:	ldr.w	r5, [sp, #2432]	; 0x980
    553e:	cmp	r6, r5
    5540:	bne.n	5546 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0xb2>
    5542:	b.n	56a0 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x20c>
    5544:	mov	r5, r3
        {
          jx = px.sibling;
          px = ReadIndexRecord(jx); 
    5546:	mov	r2, r5
    5548:	mov	r1, r4
    554a:	add	r0, sp, #8
    554c:	bl	2228 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    5550:	mov.w	r2, #272	; 0x110
    5554:	add	r1, sp, #8
    5556:	addw	r0, sp, #2424	; 0x978
    555a:	bl	d064 <memcpy>
          pxo = px;
    555e:	mov.w	r2, #272	; 0x110
    5562:	addw	r1, sp, #2424	; 0x978
    5566:	addw	r0, sp, #2152	; 0x868
    556a:	bl	d064 <memcpy>
      }
      else
      { jx = p3.child;
        px = ReadIndexRecord(jx); 
        pxo = px;
        while(handle != px.sibling)
    556e:	ldr.w	r3, [sp, #2432]	; 0x980
    5572:	cmp	r6, r3
    5574:	bne.n	5544 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0xb0>
        {
          jx = px.sibling;
          px = ReadIndexRecord(jx); 
          pxo = px;
        }
        px.sibling = p1.sibling;
    5576:	ldr	r3, [sp, #800]	; 0x320
        WriteIndexRecord(jx, px);
    5578:	addw	r2, sp, #2424	; 0x978
    557c:	mov	r1, r5
    557e:	mov	r0, r4
        {
          jx = px.sibling;
          px = ReadIndexRecord(jx); 
          pxo = px;
        }
        px.sibling = p1.sibling;
    5580:	str.w	r3, [sp, #2432]	; 0x980
        WriteIndexRecord(jx, px);
    5584:	bl	2058 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
      }
    
      // add to new parent
      p1.parent = newParent;
      p1.store = p2.store;
      p1.sibling = p2.child;
    5588:	ldr.w	r3, [sp, #1068]	; 0x42c
      p2.child = handle;
      WriteIndexRecord(handle, p1);
    558c:	add	r2, sp, #792	; 0x318
        WriteIndexRecord(jx, px);
      }
    
      // add to new parent
      p1.parent = newParent;
      p1.store = p2.store;
    558e:	ldrh.w	lr, [sp, #1078]	; 0x436
      p1.sibling = p2.child;
      p2.child = handle;
      WriteIndexRecord(handle, p1);
    5592:	mov	r1, r6
    5594:	mov	r0, r4
      }
    
      // add to new parent
      p1.parent = newParent;
      p1.store = p2.store;
      p1.sibling = p2.child;
    5596:	str	r3, [sp, #800]	; 0x320
        WriteIndexRecord(jx, px);
      }
    
      // add to new parent
      p1.parent = newParent;
      p1.store = p2.store;
    5598:	strh.w	lr, [sp, #806]	; 0x326
        px.sibling = p1.sibling;
        WriteIndexRecord(jx, px);
      }
    
      // add to new parent
      p1.parent = newParent;
    559c:	str	r7, [sp, #792]	; 0x318
      p1.store = p2.store;
      p1.sibling = p2.child;
      p2.child = handle;
    559e:	str.w	r6, [sp, #1068]	; 0x42c
      WriteIndexRecord(handle, p1);
    55a2:	bl	2058 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
      WriteIndexRecord(newParent,p2);
    55a6:	add.w	r2, sp, #1064	; 0x428
    55aa:	mov	r1, r7
    55ac:	mov	r0, r4
    55ae:	bl	2058 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>

      // now working on disk storage
      char newName[MAX_FILENAME_LEN];
      ConstructFilename(handle, newName, MAX_FILENAME_LEN);
    55b2:	mov.w	r3, #256	; 0x100
    55b6:	mov	r1, r6
    55b8:	add	r2, sp, #536	; 0x218
    55ba:	mov	r0, r4
    55bc:	bl	2688 <MTPStorage_SD::ConstructFilename(int, char*, int)>
        Serial.print(p1.store); Serial.print(": ");Serial.println(newName);
        dumpIndexList();
      #endif


    if(p1o.store == p2o.store)
    55c0:	ldrh.w	r1, [sp, #1622]	; 0x656
    55c4:	ldrh.w	r3, [sp, #1894]	; 0x766
    55c8:	cmp	r1, r3
    55ca:	beq.n	5666 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x1d2>
    { // do a simple rename (works for files and directories)
      if(sd_rename(p1o.store,oldName,newName)) return true; else {DBG_FAIL_MACRO; goto fail;}
    }
    else if(!p1o.isdir)
    55cc:	ldrb.w	r2, [sp, #1620]	; 0x654
    55d0:	cbz	r2, 5614 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x180>
    { if(sd_copy(p1o.store,oldName, p2o.store, newName)) 
      { sd_remove(p2o.store,oldName); return true; } else { DBG_FAIL_MACRO; goto fail;}
    }
    else
    { // move directory cross mtp-disks
      if(sd_moveDir(p1o.store,oldName,p2o.store,newName)) return true; else {DBG_FAIL_MACRO; goto fail;}
    55d2:	add	r2, sp, #536	; 0x218
    55d4:	adds	r0, r4, #4
    55d6:	str	r2, [sp, #0]
    55d8:	add	r2, sp, #280	; 0x118
    55da:	bl	4a14 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*)>
    55de:	cmp	r0, #0
    55e0:	bne.n	567a <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x1e6>
    }

  fail:
    // undo changes in index list
    if(jx<0) WriteIndexRecord(p1.parent, p3o); else WriteIndexRecord(jx, pxo);
    55e2:	mov	r1, r5
    55e4:	addw	r2, sp, #2152	; 0x868
    55e8:	mov	r0, r4
    WriteIndexRecord(handle, p1o);
    WriteIndexRecord(newParent,p2o);      
    return false;
    55ea:	mov.w	r8, #0
      if(sd_moveDir(p1o.store,oldName,p2o.store,newName)) return true; else {DBG_FAIL_MACRO; goto fail;}
    }

  fail:
    // undo changes in index list
    if(jx<0) WriteIndexRecord(p1.parent, p3o); else WriteIndexRecord(jx, pxo);
    55ee:	bl	2058 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    WriteIndexRecord(handle, p1o);
    55f2:	add.w	r2, sp, #1608	; 0x648
    55f6:	mov	r1, r6
    55f8:	mov	r0, r4
    55fa:	bl	2058 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    WriteIndexRecord(newParent,p2o);      
    55fe:	add.w	r2, sp, #1880	; 0x758
    5602:	mov	r1, r7
    5604:	mov	r0, r4
    5606:	bl	2058 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    return false;
  }
    560a:	mov	r0, r8
    560c:	addw	sp, sp, #2696	; 0xa88
    5610:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(p1o.store == p2o.store)
    { // do a simple rename (works for files and directories)
      if(sd_rename(p1o.store,oldName,newName)) return true; else {DBG_FAIL_MACRO; goto fail;}
    }
    else if(!p1o.isdir)
    { if(sd_copy(p1o.store,oldName, p2o.store, newName)) 
    5614:	add	r2, sp, #536	; 0x218
    5616:	adds	r0, r4, #4
    5618:	str	r2, [sp, #0]
    561a:	add	r2, sp, #280	; 0x118
    561c:	bl	3f64 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)>
    5620:	mov	r8, r0
    5622:	cmp	r0, #0
    5624:	beq.n	55e2 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x14e>
      { sd_remove(p2o.store,oldName); return true; } else { DBG_FAIL_MACRO; goto fail;}
    5626:	ldrh.w	r5, [sp, #1894]	; 0x766
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
    562a:	add	r0, sp, #280	; 0x118
    562c:	bl	113c0 <strlen>
    5630:	mov	r1, r0
    5632:	add.w	r4, r4, r5, lsl #2
    5636:	add	r0, sp, #280	; 0x118
    5638:	bl	d7d4 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    563c:	ldr	r0, [pc, #100]	; (56a4 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x210>)
    563e:	bl	f5bc <Print::println()>
    5642:	ldr	r0, [r4, #88]	; 0x58
    5644:	add	r1, sp, #280	; 0x118
    5646:	ldr	r3, [r0, #0]
    5648:	ldr	r3, [r3, #16]
    564a:	blx	r3
    564c:	b.n	560a <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x176>

      // remove index from old parent
      Record px;
      if(p3.child==handle)
      {
        p3.child = p1.sibling;
    564e:	ldr	r3, [sp, #800]	; 0x320
        WriteIndexRecord(p1.parent, p3);    
    5650:	add.w	r2, sp, #1336	; 0x538
    5654:	ldr	r1, [sp, #792]	; 0x318
    5656:	mov	r0, r4

      // remove index from old parent
      Record px;
      if(p3.child==handle)
      {
        p3.child = p1.sibling;
    5658:	str.w	r3, [sp, #1340]	; 0x53c
    #if DEBUG>1
      Serial.print(p1.store); Serial.print(": "); Serial.println(oldName);
      dumpIndexList();
    #endif

    uint32_t jx=-1;
    565c:	mov.w	r5, #4294967295
      // remove index from old parent
      Record px;
      if(p3.child==handle)
      {
        p3.child = p1.sibling;
        WriteIndexRecord(p1.parent, p3);    
    5660:	bl	2058 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    5664:	b.n	5588 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0xf4>
    uint32_t sd_getFSCount(void) {return fsCount;}
    const char *sd_getFSName(uint32_t store) { return sd_name[store];}

    File sd_open(uint32_t store, const char *filename, uint32_t mode) { return sdx[store]->open(filename,mode);  }
    bool sd_mkdir(uint32_t store, char *filename) {  return sdx[store]->mkdir(filename);  }
    bool sd_rename(uint32_t store, char *oldfilename, char *newfilename) { return sdx[store]->rename(oldfilename,newfilename);  }
    5666:	add.w	r3, r4, r1, lsl #2
    566a:	add	r2, sp, #536	; 0x218
    566c:	add	r1, sp, #280	; 0x118
    566e:	ldr	r0, [r3, #88]	; 0x58
    5670:	ldr	r3, [r0, #0]
    5672:	ldr	r3, [r3, #12]
    5674:	blx	r3
      #endif


    if(p1o.store == p2o.store)
    { // do a simple rename (works for files and directories)
      if(sd_rename(p1o.store,oldName,newName)) return true; else {DBG_FAIL_MACRO; goto fail;}
    5676:	cmp	r0, #0
    5678:	beq.n	55e2 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x14e>
    567a:	mov.w	r8, #1
    // undo changes in index list
    if(jx<0) WriteIndexRecord(p1.parent, p3o); else WriteIndexRecord(jx, pxo);
    WriteIndexRecord(handle, p1o);
    WriteIndexRecord(newParent,p2o);      
    return false;
  }
    567e:	mov	r0, r8
    5680:	addw	sp, sp, #2696	; 0xa88
    5684:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    Record p2 = ReadIndexRecord(newParent);
    Record p3 = ReadIndexRecord(p1.parent); 

    if(p1.isdir) 
    { if(!p1.scanned) 
      { ScanDir(p1.store, handle) ; // in case scan directory
    5688:	mov	r2, r6
    568a:	ldrh.w	r1, [sp, #806]	; 0x326
    568e:	mov	r0, r4
    5690:	bl	2e14 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)>
        WriteIndexRecord(handle, p1);
    5694:	add	r2, sp, #792	; 0x318
    5696:	mov	r1, r6
    5698:	mov	r0, r4
    569a:	bl	2058 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    569e:	b.n	54dc <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x48>
      }
      else
      { jx = p3.child;
        px = ReadIndexRecord(jx); 
        pxo = px;
        while(handle != px.sibling)
    56a0:	mov	r5, r8
    56a2:	b.n	5576 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0xe2>
    56a4:	.word	0x20000c58

000056a8 <MTPD::write(char const*, int) [clone .part.2]>:
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    56a8:	movw	r3, #9256	; 0x2428
    56ac:	ldr	r3, [r0, r3]
    int MTPD::fetch_packet(uint8_t *data_buffer)
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    56ae:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    56b2:	mov	r5, r1
    56b4:	mov	r8, r2
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    56b6:	cbnz	r3, 56c0 <MTPD::write(char const*, int) [clone .part.2]+0x18>
    56b8:	ldr	r7, [pc, #104]	; (5724 <MTPD::write(char const*, int) [clone .part.2]+0x7c>)
    56ba:	add.w	r2, r0, #544	; 0x220
    56be:	str	r2, [r7, #0]
        write_length_ += len;
    56c0:	add	r3, r8
    56c2:	movw	r2, #9256	; 0x2428
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    56c6:	cmp.w	r8, #0
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    56ca:	str	r3, [r0, r2]
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    56cc:	ble.n	571e <MTPD::write(char const*, int) [clone .part.2]+0x76>
    56ce:	add.w	r9, r0, #1056	; 0x420
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    56d2:	add.w	r6, r0, #544	; 0x220
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    56d6:	movs	r4, #0
    56d8:	ldr	r7, [pc, #72]	; (5724 <MTPD::write(char const*, int) [clone .part.2]+0x7c>)
    56da:	b.n	56e0 <MTPD::write(char const*, int) [clone .part.2]+0x38>
    56dc:	cmp	r8, r4
    56de:	ble.n	571e <MTPD::write(char const*, int) [clone .part.2]+0x76>
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
    56e0:	ldr	r3, [r7, #0]
    56e2:	rsb	r2, r4, r8
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    56e6:	mov	r1, r5
    56e8:	rsb	sl, r3, r9
    56ec:	mov	r0, r3
    56ee:	cmp	sl, r2
    56f0:	it	ge
    56f2:	movge	sl, r2
    56f4:	mov	r2, sl
          pos += to_copy;
    56f6:	add	r4, sl
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    56f8:	bl	d064 <memcpy>
    56fc:	mov	r3, r0
          pos += to_copy;
          src += to_copy;
    56fe:	add	r5, sl
          dst += to_copy;
    5700:	add	r3, sl
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    5702:	cmp	r3, r9
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    5704:	str	r3, [r7, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    5706:	bne.n	56dc <MTPD::write(char const*, int) [clone .part.2]+0x34>

#elif defined(__IMXRT1062__)  

    int MTPD::push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    5708:	movs	r2, #60	; 0x3c
    570a:	mov.w	r1, #512	; 0x200
    570e:	mov	r0, r6
    5710:	bl	f168 <usb_mtp_send>
    5714:	cmp	r0, #0
    5716:	ble.n	5708 <MTPD::write(char const*, int) [clone .part.2]+0x60>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    5718:	cmp	r8, r4
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    571a:	str	r6, [r7, #0]
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    571c:	bgt.n	56e0 <MTPD::write(char const*, int) [clone .part.2]+0x38>
    571e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5722:	nop
    5724:	.word	0x20005b18

00005728 <MTPD::writestring(char const*)>:
  void MTPD::write64(uint64_t x) { write((char*)&x, sizeof(x)); }

#define Store2Storage(x) (x+1)
#define Storage2Store(x) (x-1)

  void MTPD::writestring(const char* str) {
    5728:	push	{r4, r5, r6, r7, lr}
    if (*str) 
    572a:	ldrb	r3, [r1, #0]
  void MTPD::write64(uint64_t x) { write((char*)&x, sizeof(x)); }

#define Store2Storage(x) (x+1)
#define Storage2Store(x) (x-1)

  void MTPD::writestring(const char* str) {
    572c:	sub	sp, #12
    572e:	mov	r6, r0
    if (*str) 
    5730:	cmp	r3, #0
    5732:	beq.n	57a8 <MTPD::writestring(char const*)+0x80>
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    5734:	movw	r5, #9252	; 0x2424
#define Store2Storage(x) (x+1)
#define Storage2Store(x) (x-1)

  void MTPD::writestring(const char* str) {
    if (*str) 
    { write8(strlen(str) + 1);
    5738:	mov	r0, r1
    573a:	mov	r4, r1
    573c:	bl	113c0 <strlen>
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    5740:	ldrb	r2, [r6, r5]
    5742:	adds	r0, #1
    5744:	strb.w	r0, [sp, #3]
    5748:	cmp	r2, #0
    574a:	beq.n	57d0 <MTPD::writestring(char const*)+0xa8>
      {
        write_length_ += len;
    574c:	movw	r1, #9256	; 0x2428
    5750:	ldr	r3, [r6, r1]
    5752:	adds	r3, #1
    5754:	str	r3, [r6, r1]
#define Storage2Store(x) (x-1)

  void MTPD::writestring(const char* str) {
    if (*str) 
    { write8(strlen(str) + 1);
      while (*str) {  write16(*str);  ++str;  } write16(0);
    5756:	ldrb	r3, [r4, #0]
    5758:	cbz	r3, 579a <MTPD::writestring(char const*)+0x72>
    575a:	movw	r7, #9252	; 0x2424
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
      {
        write_length_ += len;
    575e:	movw	r5, #9256	; 0x2428
    5762:	add	r7, r6
    5764:	add	r5, r6
    5766:	b.n	5774 <MTPD::writestring(char const*)+0x4c>
    5768:	ldr	r3, [r5, #0]
    576a:	adds	r3, #2
    576c:	str	r3, [r5, #0]
#define Storage2Store(x) (x-1)

  void MTPD::writestring(const char* str) {
    if (*str) 
    { write8(strlen(str) + 1);
      while (*str) {  write16(*str);  ++str;  } write16(0);
    576e:	ldrb.w	r3, [r4, #1]!
    5772:	cbz	r3, 5792 <MTPD::writestring(char const*)+0x6a>
    5774:	strh.w	r3, [sp, #6]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    5778:	cmp	r2, #0
    577a:	bne.n	5768 <MTPD::writestring(char const*)+0x40>
    577c:	movs	r2, #2
    577e:	add.w	r1, sp, #6
    5782:	mov	r0, r6
    5784:	bl	56a8 <MTPD::write(char const*, int) [clone .part.2]>
#define Storage2Store(x) (x-1)

  void MTPD::writestring(const char* str) {
    if (*str) 
    { write8(strlen(str) + 1);
      while (*str) {  write16(*str);  ++str;  } write16(0);
    5788:	ldrb.w	r3, [r4, #1]!
    578c:	ldrb	r2, [r7, #0]
    578e:	cmp	r3, #0
    5790:	bne.n	5774 <MTPD::writestring(char const*)+0x4c>
    5792:	movs	r3, #0
    5794:	strh.w	r3, [sp, #4]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    5798:	cbz	r2, 57e6 <MTPD::writestring(char const*)+0xbe>
      {
        write_length_ += len;
    579a:	movw	r2, #9256	; 0x2428
    579e:	ldr	r3, [r6, r2]
    57a0:	adds	r3, #2
    57a2:	str	r3, [r6, r2]
    { write8(strlen(str) + 1);
      while (*str) {  write16(*str);  ++str;  } write16(0);
    } else 
    { write8(0);
    }
  }
    57a4:	add	sp, #12
    57a6:	pop	{r4, r5, r6, r7, pc}
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    57a8:	movw	r2, #9252	; 0x2424
    57ac:	strb.w	r3, [sp, #2]
    57b0:	ldrb	r3, [r0, r2]
    57b2:	cbz	r3, 57c2 <MTPD::writestring(char const*)+0x9a>
      {
        write_length_ += len;
    57b4:	movw	r2, #9256	; 0x2428
    57b8:	ldr	r3, [r0, r2]
    57ba:	adds	r3, #1
    57bc:	str	r3, [r0, r2]
    { write8(strlen(str) + 1);
      while (*str) {  write16(*str);  ++str;  } write16(0);
    } else 
    { write8(0);
    }
  }
    57be:	add	sp, #12
    57c0:	pop	{r4, r5, r6, r7, pc}
    57c2:	movs	r2, #1
    57c4:	add.w	r1, sp, #2
    57c8:	bl	56a8 <MTPD::write(char const*, int) [clone .part.2]>
    57cc:	add	sp, #12
    57ce:	pop	{r4, r5, r6, r7, pc}
    57d0:	movs	r2, #1
    57d2:	add.w	r1, sp, #3
    57d6:	mov	r0, r6
    57d8:	bl	56a8 <MTPD::write(char const*, int) [clone .part.2]>
#define Storage2Store(x) (x-1)

  void MTPD::writestring(const char* str) {
    if (*str) 
    { write8(strlen(str) + 1);
      while (*str) {  write16(*str);  ++str;  } write16(0);
    57dc:	ldrb	r3, [r4, #0]
    57de:	ldrb	r2, [r6, r5]
    57e0:	cmp	r3, #0
    57e2:	bne.n	575a <MTPD::writestring(char const*)+0x32>
    57e4:	b.n	5792 <MTPD::writestring(char const*)+0x6a>
    57e6:	mov	r0, r6
    57e8:	movs	r2, #2
    57ea:	add	r1, sp, #4
    57ec:	bl	56a8 <MTPD::write(char const*, int) [clone .part.2]>
    } else 
    { write8(0);
    }
  }
    57f0:	add	sp, #12
    57f2:	pop	{r4, r5, r6, r7, pc}

000057f4 <MTPD::GetDevicePropDesc(unsigned long) [clone .part.4]>:
        writestring(MTP_NAME);
        break;
    }
  }

  void MTPD::GetDevicePropDesc(uint32_t prop) {
    57f4:	push	{r4, r5, r6, r7, lr}
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    57f6:	movw	r6, #9252	; 0x2424
        writestring(MTP_NAME);
        break;
    }
  }

  void MTPD::GetDevicePropDesc(uint32_t prop) {
    57fa:	sub	sp, #12
    57fc:	mov	r4, r0
    57fe:	mov	r5, r1
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    5800:	ldrb	r3, [r0, r6]
    5802:	strh.w	r1, [sp, #4]
    5806:	cmp	r3, #0
    5808:	beq.n	587c <MTPD::GetDevicePropDesc(unsigned long) [clone .part.4]+0x88>
      {
        write_length_ += len;
    580a:	movw	r2, #9256	; 0x2428
    580e:	movw	r1, #65535	; 0xffff
    5812:	ldr	r3, [r0, r2]
    5814:	strh.w	r1, [sp, #6]
    5818:	adds	r3, #2
    581a:	str	r3, [r0, r2]
    581c:	movw	r2, #9256	; 0x2428
    5820:	movs	r1, #0
    5822:	ldr	r3, [r4, r2]
    5824:	strb.w	r1, [sp, #2]
    5828:	adds	r3, #2
    582a:	str	r3, [r4, r2]
    582c:	movw	r2, #9256	; 0x2428
    5830:	ldr	r3, [r4, r2]
    5832:	adds	r3, #1
    5834:	str	r3, [r4, r2]
      }
    }
  }

  void MTPD::GetDevicePropValue(uint32_t prop) {
    switch (prop) {
    5836:	movw	r3, #54274	; 0xd402
    583a:	cmp	r5, r3
    583c:	beq.n	586a <MTPD::GetDevicePropDesc(unsigned long) [clone .part.4]+0x76>
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    583e:	movw	r3, #9252	; 0x2424
    5842:	movs	r2, #0
    5844:	ldrb	r3, [r4, r3]
    5846:	strb.w	r2, [sp, #3]
    584a:	cbz	r3, 585a <MTPD::GetDevicePropDesc(unsigned long) [clone .part.4]+0x66>
      {
        write_length_ += len;
    584c:	movw	r2, #9256	; 0x2428
    5850:	ldr	r3, [r4, r2]
    5852:	adds	r3, #1
    5854:	str	r3, [r4, r2]
        write8(0);       // read-only
        GetDevicePropValue(prop);
        GetDevicePropValue(prop);
        write8(0);       // no form
    }
  }
    5856:	add	sp, #12
    5858:	pop	{r4, r5, r6, r7, pc}
    585a:	mov	r0, r4
    585c:	movs	r2, #1
    585e:	add.w	r1, sp, #3
    5862:	bl	56a8 <MTPD::write(char const*, int) [clone .part.2]>
    5866:	add	sp, #12
    5868:	pop	{r4, r5, r6, r7, pc}
  void MTPD::GetDevicePropValue(uint32_t prop) {
    switch (prop) {
      case 0xd402: // friendly name
        // This is the name we'll actually see in the windows explorer.
        // Should probably be configurable.
        writestring(MTP_NAME);
    586a:	mov	r0, r4
    586c:	ldr	r1, [pc, #72]	; (58b8 <MTPD::GetDevicePropDesc(unsigned long) [clone .part.4]+0xc4>)
    586e:	bl	5728 <MTPD::writestring(char const*)>
    5872:	ldr	r1, [pc, #68]	; (58b8 <MTPD::GetDevicePropDesc(unsigned long) [clone .part.4]+0xc4>)
    5874:	mov	r0, r4
    5876:	bl	5728 <MTPD::writestring(char const*)>
    587a:	b.n	583e <MTPD::GetDevicePropDesc(unsigned long) [clone .part.4]+0x4a>
    587c:	movs	r2, #2
    587e:	add	r1, sp, #4
    5880:	bl	56a8 <MTPD::write(char const*, int) [clone .part.2]>
    5884:	movw	r3, #65535	; 0xffff
    5888:	ldrb	r7, [r4, r6]
    588a:	strh.w	r3, [sp, #6]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    588e:	cmp	r7, #0
    5890:	bne.n	581c <MTPD::GetDevicePropDesc(unsigned long) [clone .part.4]+0x28>
    5892:	movs	r2, #2
    5894:	add.w	r1, sp, #6
    5898:	mov	r0, r4
    589a:	bl	56a8 <MTPD::write(char const*, int) [clone .part.2]>
    589e:	ldrb	r3, [r4, r6]
    58a0:	strb.w	r7, [sp, #2]
    58a4:	cmp	r3, #0
    58a6:	bne.n	582c <MTPD::GetDevicePropDesc(unsigned long) [clone .part.4]+0x38>
    58a8:	movs	r2, #1
    58aa:	add.w	r1, sp, #2
    58ae:	mov	r0, r4
    58b0:	bl	56a8 <MTPD::write(char const*, int) [clone .part.2]>
    58b4:	b.n	5836 <MTPD::GetDevicePropDesc(unsigned long) [clone .part.4]+0x42>
    58b6:	nop
    58b8:	.word	0x20000378

000058bc <MTPD::WriteDescriptor()>:
    } else 
    { write8(0);
    }
  }

  void MTPD::WriteDescriptor() {
    58bc:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    58c0:	movw	r4, #9252	; 0x2424
    } else 
    { write8(0);
    }
  }

  void MTPD::WriteDescriptor() {
    58c4:	sub	sp, #68	; 0x44
    58c6:	movs	r6, #100	; 0x64
    58c8:	mov	r5, r0
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    58ca:	ldrb	r3, [r0, r4]
    58cc:	strh.w	r6, [sp, #8]
    58d0:	cmp	r3, #0
    58d2:	beq.w	5a86 <MTPD::WriteDescriptor()+0x1ca>
      {
        write_length_ += len;
    58d6:	movw	r2, #9256	; 0x2428
    58da:	movs	r1, #6
    58dc:	ldr	r3, [r0, r2]
    58de:	str	r1, [sp, #24]
    58e0:	adds	r3, #2
    58e2:	str	r3, [r0, r2]
    58e4:	movw	r2, #9256	; 0x2428
    58e8:	movs	r1, #100	; 0x64
    58ea:	ldr	r3, [r5, r2]
    58ec:	strh.w	r1, [sp, #6]
    58f0:	adds	r3, #4
    58f2:	str	r3, [r5, r2]
    58f4:	movw	r2, #9256	; 0x2428
    58f8:	ldr	r3, [r5, r2]
    58fa:	adds	r3, #2
    58fc:	str	r3, [r5, r2]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    58fe:	movw	r4, #9252	; 0x2424
  void MTPD::WriteDescriptor() {
    write16(100);  // MTP version
    write32(6);    // MTP extension
//    write32(0xFFFFFFFFUL);    // MTP extension
    write16(100);  // MTP version
    writestring("microsoft.com: 1.0;");
    5902:	ldr	r1, [pc, #628]	; (5b78 <MTPD::WriteDescriptor()+0x2bc>)
    5904:	mov	r0, r5
    5906:	bl	5728 <MTPD::writestring(char const*)>
    590a:	movs	r2, #0
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    590c:	ldrb	r3, [r5, r4]
    590e:	strh.w	r2, [sp, #4]
    5912:	cmp	r3, #0
    5914:	beq.w	5b54 <MTPD::WriteDescriptor()+0x298>
      {
        write_length_ += len;
    5918:	movw	r2, #9256	; 0x2428
    591c:	movs	r1, #20
    591e:	ldr	r3, [r5, r2]
    5920:	str	r1, [sp, #20]
    5922:	adds	r3, #2
    5924:	str	r3, [r5, r2]
    5926:	movw	r2, #9256	; 0x2428
    592a:	movs	r6, #1
    592c:	ldr	r3, [r5, r2]
    592e:	adds	r3, #4
    5930:	str	r3, [r5, r2]
    5932:	ldr	r4, [pc, #584]	; (5b7c <MTPD::WriteDescriptor()+0x2c0>)
    5934:	movw	r8, #9252	; 0x2424
    5938:	movw	r7, #9256	; 0x2428
    593c:	movw	r3, #4097	; 0x1001
    5940:	add.w	r9, r4, #38	; 0x26
    5944:	add	r8, r5
    5946:	add	r7, r5
    5948:	b.n	595a <MTPD::WriteDescriptor()+0x9e>
    594a:	ldr	r3, [r7, #0]
    writestring("microsoft.com: 1.0;");
    write16(0);    // functional mode

    // Supported operations (array of uint16)
    write32(supported_op_num);
    for(int ii=0; ii<supported_op_num;ii++) write16(supported_op[ii]);
    594c:	cmp	r4, r9
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
      {
        write_length_ += len;
    594e:	add.w	r3, r3, #2
    5952:	str	r3, [r7, #0]
    writestring("microsoft.com: 1.0;");
    write16(0);    // functional mode

    // Supported operations (array of uint16)
    write32(supported_op_num);
    for(int ii=0; ii<supported_op_num;ii++) write16(supported_op[ii]);
    5954:	beq.n	5976 <MTPD::WriteDescriptor()+0xba>
    5956:	ldrh.w	r3, [r4, #2]!
    595a:	strh.w	r3, [sp, #10]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    595e:	cmp	r6, #0
    5960:	bne.n	594a <MTPD::WriteDescriptor()+0x8e>
    5962:	movs	r2, #2
    5964:	add.w	r1, sp, #10
    5968:	mov	r0, r5
    596a:	bl	56a8 <MTPD::write(char const*, int) [clone .part.2]>
    writestring("microsoft.com: 1.0;");
    write16(0);    // functional mode

    // Supported operations (array of uint16)
    write32(supported_op_num);
    for(int ii=0; ii<supported_op_num;ii++) write16(supported_op[ii]);
    596e:	cmp	r4, r9
    5970:	ldrb.w	r6, [r8]
    5974:	bne.n	5956 <MTPD::WriteDescriptor()+0x9a>
    5976:	movs	r2, #4
    5978:	str	r2, [sp, #28]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    597a:	cmp	r6, #0
    597c:	beq.w	5b44 <MTPD::WriteDescriptor()+0x288>
      {
        write_length_ += len;
    5980:	movw	r2, #9256	; 0x2428
    5984:	ldr	r3, [r5, r2]
    5986:	adds	r3, #4
    5988:	str	r3, [r5, r2]
    598a:	ldr	r4, [pc, #500]	; (5b80 <MTPD::WriteDescriptor()+0x2c4>)
    598c:	movw	r9, #9252	; 0x2424
    5990:	movw	r7, #9256	; 0x2428
    5994:	movw	r3, #16388	; 0x4004
    5998:	add.w	r8, r4, #6
    599c:	add	r9, r5
    599e:	add	r7, r5
    59a0:	strh.w	r3, [sp, #12]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    59a4:	cbz	r6, 59be <MTPD::WriteDescriptor()+0x102>
      {
        write_length_ += len;
    59a6:	ldr	r3, [r7, #0]
    write32(supported_op_num);
    for(int ii=0; ii<supported_op_num;ii++) write16(supported_op[ii]);
    
    // Events (array of uint16)
    write32(supported_event_num);      
    for(int ii=0; ii<supported_event_num;ii++) write16(supported_events[ii]);
    59a8:	cmp	r8, r4
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
      {
        write_length_ += len;
    59aa:	add.w	r3, r3, #2
    59ae:	str	r3, [r7, #0]
    write32(supported_op_num);
    for(int ii=0; ii<supported_op_num;ii++) write16(supported_op[ii]);
    
    // Events (array of uint16)
    write32(supported_event_num);      
    for(int ii=0; ii<supported_event_num;ii++) write16(supported_events[ii]);
    59b0:	beq.n	59d0 <MTPD::WriteDescriptor()+0x114>
    59b2:	ldrh.w	r3, [r4, #2]!
    59b6:	strh.w	r3, [sp, #12]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    59ba:	cmp	r6, #0
    59bc:	bne.n	59a6 <MTPD::WriteDescriptor()+0xea>
    59be:	movs	r2, #2
    59c0:	add	r1, sp, #12
    59c2:	mov	r0, r5
    59c4:	bl	56a8 <MTPD::write(char const*, int) [clone .part.2]>
    write32(supported_op_num);
    for(int ii=0; ii<supported_op_num;ii++) write16(supported_op[ii]);
    
    // Events (array of uint16)
    write32(supported_event_num);      
    for(int ii=0; ii<supported_event_num;ii++) write16(supported_events[ii]);
    59c8:	cmp	r8, r4
    59ca:	ldrb.w	r6, [r9]
    59ce:	bne.n	59b2 <MTPD::WriteDescriptor()+0xf6>
    59d0:	movs	r3, #1
    59d2:	str	r3, [sp, #40]	; 0x28
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    59d4:	cmp	r6, #0
    59d6:	beq.n	5abe <MTPD::WriteDescriptor()+0x202>
      {
        write_length_ += len;
    59d8:	movw	r2, #9256	; 0x2428
    59dc:	movw	r1, #54274	; 0xd402
    59e0:	ldr	r3, [r5, r2]
    59e2:	strh.w	r1, [sp, #18]
    59e6:	adds	r3, #4
    59e8:	str	r3, [r5, r2]
    59ea:	movw	r2, #9256	; 0x2428
    59ee:	movs	r1, #0
    59f0:	ldr	r3, [r5, r2]
    59f2:	str	r1, [sp, #36]	; 0x24
    59f4:	adds	r3, #2
    59f6:	str	r3, [r5, r2]
    59f8:	movw	r2, #9256	; 0x2428
    59fc:	movs	r1, #2
    59fe:	ldr	r3, [r5, r2]
    5a00:	str	r1, [sp, #32]
    5a02:	adds	r3, #4
    5a04:	str	r3, [r5, r2]
    5a06:	movw	r2, #9256	; 0x2428
    5a0a:	mov.w	r1, #12288	; 0x3000
    5a0e:	ldr	r3, [r5, r2]
    5a10:	strh.w	r1, [sp, #16]
    5a14:	adds	r3, #4
    5a16:	str	r3, [r5, r2]
    5a18:	movw	r2, #9256	; 0x2428
    5a1c:	movw	r1, #12289	; 0x3001
    5a20:	ldr	r3, [r5, r2]
    5a22:	strh.w	r1, [sp, #14]
    5a26:	adds	r3, #2
    5a28:	str	r3, [r5, r2]
    5a2a:	movw	r2, #9256	; 0x2428
    5a2e:	ldr	r3, [r5, r2]
    5a30:	adds	r3, #2
    5a32:	str	r3, [r5, r2]

    write32(2);       // Playback formats (array of uint16)
    write16(0x3000);  // Undefined format
    write16(0x3001);  // Folders (associations)

    writestring(MTP_MANUF);     // Manufacturer
    5a34:	ldr	r1, [pc, #332]	; (5b84 <MTPD::WriteDescriptor()+0x2c8>)
    5a36:	mov	r0, r5
    5a38:	bl	5728 <MTPD::writestring(char const*)>
    writestring(MTP_MODEL);     // Model
    5a3c:	ldr	r1, [pc, #328]	; (5b88 <MTPD::WriteDescriptor()+0x2cc>)
    5a3e:	mov	r0, r5
    5a40:	bl	5728 <MTPD::writestring(char const*)>
    //writestring(MTP_VERS);      // version
    //writestring(MTP_SERNR);     // serial
    
    char buf[20];    
    dtostrf( (float)(TEENSYDUINO / 100.0f), 3, 2, buf);
    5a44:	vldr	s0, [pc, #324]	; 5b8c <MTPD::WriteDescriptor()+0x2d0>
    5a48:	add	r2, sp, #44	; 0x2c
    5a4a:	movs	r1, #2
    5a4c:	movs	r0, #3
    5a4e:	bl	e770 <dtostrf>
    strlcat(buf, " / MTP " MTP_VERS, sizeof(buf) );
    5a52:	movs	r2, #20
    5a54:	ldr	r1, [pc, #312]	; (5b90 <MTPD::WriteDescriptor()+0x2d4>)
    5a56:	add	r0, sp, #44	; 0x2c
    5a58:	bl	1132c <strlcat>
    writestring( buf );    
    5a5c:	mov	r0, r5
    5a5e:	add	r1, sp, #44	; 0x2c
    5a60:	bl	5728 <MTPD::writestring(char const*)>
    5a64:	add	r3, sp, #44	; 0x2c
    5a66:	ldr	r2, [pc, #300]	; (5b94 <MTPD::WriteDescriptor()+0x2d8>)
    5a68:	add.w	r0, sp, #54	; 0x36
    #pragma GCC diagnostic push
    #pragma GCC diagnostic ignored "-Warray-bounds"
    for (size_t i=0; i<10; i++) buf[i] = usb_string_serial_number.wString[i];
    5a6c:	ldrh.w	r1, [r2, #2]!
    5a70:	strb.w	r1, [r3], #1
    5a74:	cmp	r3, r0
    5a76:	bne.n	5a6c <MTPD::WriteDescriptor()+0x1b0>
    #pragma GCC diagnostic pop
    writestring(buf);    
    5a78:	add	r1, sp, #44	; 0x2c
    5a7a:	mov	r0, r5
    5a7c:	bl	5728 <MTPD::writestring(char const*)>
  }
    5a80:	add	sp, #68	; 0x44
    5a82:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    5a86:	movs	r2, #2
    5a88:	add	r1, sp, #8
    5a8a:	bl	56a8 <MTPD::write(char const*, int) [clone .part.2]>
    5a8e:	movs	r2, #6
    5a90:	ldrb	r3, [r5, r4]
    5a92:	str	r2, [sp, #24]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    5a94:	cmp	r3, #0
    5a96:	bne.w	58e4 <MTPD::WriteDescriptor()+0x28>
    5a9a:	movs	r2, #4
    5a9c:	add	r1, sp, #24
    5a9e:	mov	r0, r5
    5aa0:	bl	56a8 <MTPD::write(char const*, int) [clone .part.2]>
    5aa4:	ldrb	r3, [r5, r4]
    5aa6:	strh.w	r6, [sp, #6]
    5aaa:	cmp	r3, #0
    5aac:	bne.w	58f4 <MTPD::WriteDescriptor()+0x38>
    5ab0:	movs	r2, #2
    5ab2:	add.w	r1, sp, #6
    5ab6:	mov	r0, r5
    5ab8:	bl	56a8 <MTPD::write(char const*, int) [clone .part.2]>
    5abc:	b.n	58fe <MTPD::WriteDescriptor()+0x42>
    5abe:	movw	r4, #9252	; 0x2424
    5ac2:	movs	r2, #4
    5ac4:	add	r1, sp, #40	; 0x28
    5ac6:	mov	r0, r5
    5ac8:	bl	56a8 <MTPD::write(char const*, int) [clone .part.2]>
    5acc:	movw	r2, #54274	; 0xd402
    5ad0:	ldrb	r3, [r5, r4]
    5ad2:	strh.w	r2, [sp, #18]
    5ad6:	cmp	r3, #0
    5ad8:	bne.n	59ea <MTPD::WriteDescriptor()+0x12e>
    5ada:	movs	r2, #2
    5adc:	add.w	r1, sp, #18
    5ae0:	mov	r0, r5
    5ae2:	bl	56a8 <MTPD::write(char const*, int) [clone .part.2]>
    5ae6:	ldrb	r3, [r5, r4]
    5ae8:	str	r6, [sp, #36]	; 0x24
    5aea:	cmp	r3, #0
    5aec:	bne.n	59f8 <MTPD::WriteDescriptor()+0x13c>
    5aee:	movs	r2, #4
    5af0:	add	r1, sp, #36	; 0x24
    5af2:	mov	r0, r5
    5af4:	movs	r6, #2
    5af6:	bl	56a8 <MTPD::write(char const*, int) [clone .part.2]>
    5afa:	ldrb	r3, [r5, r4]
    5afc:	str	r6, [sp, #32]
    5afe:	cmp	r3, #0
    5b00:	bne.n	5a06 <MTPD::WriteDescriptor()+0x14a>
    5b02:	movs	r2, #4
    5b04:	add	r1, sp, #32
    5b06:	mov	r0, r5
    5b08:	bl	56a8 <MTPD::write(char const*, int) [clone .part.2]>
    5b0c:	mov.w	r2, #12288	; 0x3000
    5b10:	ldrb	r3, [r5, r4]
    5b12:	strh.w	r2, [sp, #16]
    5b16:	cmp	r3, #0
    5b18:	bne.w	5a18 <MTPD::WriteDescriptor()+0x15c>
    5b1c:	mov	r2, r6
    5b1e:	add	r1, sp, #16
    5b20:	mov	r0, r5
    5b22:	bl	56a8 <MTPD::write(char const*, int) [clone .part.2]>
    5b26:	movw	r2, #12289	; 0x3001
    5b2a:	ldrb	r3, [r5, r4]
    5b2c:	strh.w	r2, [sp, #14]
    5b30:	cmp	r3, #0
    5b32:	bne.w	5a2a <MTPD::WriteDescriptor()+0x16e>
    5b36:	mov	r2, r6
    5b38:	add.w	r1, sp, #14
    5b3c:	mov	r0, r5
    5b3e:	bl	56a8 <MTPD::write(char const*, int) [clone .part.2]>
    5b42:	b.n	5a34 <MTPD::WriteDescriptor()+0x178>
    5b44:	add	r1, sp, #28
    5b46:	mov	r0, r5
    5b48:	bl	56a8 <MTPD::write(char const*, int) [clone .part.2]>
    5b4c:	movw	r3, #9252	; 0x2424
    5b50:	ldrb	r6, [r5, r3]
    5b52:	b.n	598a <MTPD::WriteDescriptor()+0xce>
    5b54:	movs	r2, #2
    5b56:	add	r1, sp, #4
    5b58:	mov	r0, r5
    5b5a:	bl	56a8 <MTPD::write(char const*, int) [clone .part.2]>
    5b5e:	movs	r2, #20
    5b60:	ldrb	r3, [r5, r4]
    5b62:	str	r2, [sp, #20]
    5b64:	cmp	r3, #0
    5b66:	bne.w	5926 <MTPD::WriteDescriptor()+0x6a>
    5b6a:	movs	r2, #4
    5b6c:	add	r1, sp, #20
    5b6e:	mov	r0, r5
    5b70:	bl	56a8 <MTPD::write(char const*, int) [clone .part.2]>
    5b74:	ldrb	r6, [r5, r4]
    5b76:	b.n	5932 <MTPD::WriteDescriptor()+0x76>
    5b78:	.word	0x20000380
    5b7c:	.word	0x20000340
    5b80:	.word	0x200003c0
    5b84:	.word	0x20000394
    5b88:	.word	0x20000378
    5b8c:	.word	0x3fc147ae
    5b90:	.word	0x2000039c
    5b94:	.word	0x20000c40

00005b98 <MTPD::WriteStorageIDs()>:
    for (size_t i=0; i<10; i++) buf[i] = usb_string_serial_number.wString[i];
    #pragma GCC diagnostic pop
    writestring(buf);    
  }

  void MTPD::WriteStorageIDs() {
    5b98:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5b9c:	mov	r8, r0
    uint32_t num=storage_->get_FSCount();
    5b9e:	ldr	r0, [r0, #0]
    5ba0:	ldr	r2, [pc, #116]	; (5c18 <MTPD::WriteStorageIDs()+0x80>)
    for (size_t i=0; i<10; i++) buf[i] = usb_string_serial_number.wString[i];
    #pragma GCC diagnostic pop
    writestring(buf);    
  }

  void MTPD::WriteStorageIDs() {
    5ba2:	sub	sp, #8
    uint32_t num=storage_->get_FSCount();
    5ba4:	ldr	r3, [r0, #0]
    5ba6:	ldr	r3, [r3, #4]
    5ba8:	cmp	r3, r2
    5baa:	bne.n	5c12 <MTPD::WriteStorageIDs()+0x7a>
    {
      for(int ii=0; ii<fsCount;ii++) if(!strcmp(name,sd_name[ii])) return ii;
      return 0xFFFFFFFFUL;
    }

    uint32_t sd_getFSCount(void) {return fsCount;}
    5bac:	ldr	r6, [r0, #4]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    5bae:	movw	r3, #9252	; 0x2424
    5bb2:	str	r6, [sp, #0]
    5bb4:	ldrb.w	r3, [r8, r3]
    5bb8:	cbz	r3, 5c06 <MTPD::WriteStorageIDs()+0x6e>
      {
        write_length_ += len;
    5bba:	movw	r2, #9256	; 0x2428
    5bbe:	ldr.w	r3, [r8, r2]
    5bc2:	adds	r3, #4
    5bc4:	str.w	r3, [r8, r2]
  }

  void MTPD::WriteStorageIDs() {
    uint32_t num=storage_->get_FSCount();
    write32(num); // number of storages (disks)
    for(uint32_t ii=0;ii<num;ii++)  write32(Store2Storage(ii)); // storage id
    5bc8:	cbz	r6, 5c00 <MTPD::WriteStorageIDs()+0x68>
    5bca:	movw	r7, #9252	; 0x2424
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
      {
        write_length_ += len;
    5bce:	movw	r5, #9256	; 0x2428
  }

  void MTPD::WriteStorageIDs() {
    uint32_t num=storage_->get_FSCount();
    write32(num); // number of storages (disks)
    for(uint32_t ii=0;ii<num;ii++)  write32(Store2Storage(ii)); // storage id
    5bd2:	movs	r4, #0
    5bd4:	add	r7, r8
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
      {
        write_length_ += len;
    5bd6:	add	r5, r8
    5bd8:	b.n	5be6 <MTPD::WriteStorageIDs()+0x4e>
    5bda:	ldr	r3, [r5, #0]
  }

  void MTPD::WriteStorageIDs() {
    uint32_t num=storage_->get_FSCount();
    write32(num); // number of storages (disks)
    for(uint32_t ii=0;ii<num;ii++)  write32(Store2Storage(ii)); // storage id
    5bdc:	cmp	r6, r4
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
      {
        write_length_ += len;
    5bde:	add.w	r3, r3, #4
    5be2:	str	r3, [r5, #0]
  }

  void MTPD::WriteStorageIDs() {
    uint32_t num=storage_->get_FSCount();
    write32(num); // number of storages (disks)
    for(uint32_t ii=0;ii<num;ii++)  write32(Store2Storage(ii)); // storage id
    5be4:	beq.n	5c00 <MTPD::WriteStorageIDs()+0x68>
    5be6:	adds	r4, #1
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    5be8:	ldrb	r3, [r7, #0]
    5bea:	str	r4, [sp, #4]
    5bec:	cmp	r3, #0
    5bee:	bne.n	5bda <MTPD::WriteStorageIDs()+0x42>
    5bf0:	movs	r2, #4
    5bf2:	mov	r0, r8
    5bf4:	add.w	r1, sp, r2
    5bf8:	bl	56a8 <MTPD::write(char const*, int) [clone .part.2]>
  }

  void MTPD::WriteStorageIDs() {
    uint32_t num=storage_->get_FSCount();
    write32(num); // number of storages (disks)
    for(uint32_t ii=0;ii<num;ii++)  write32(Store2Storage(ii)); // storage id
    5bfc:	cmp	r6, r4
    5bfe:	bne.n	5be6 <MTPD::WriteStorageIDs()+0x4e>
  }
    5c00:	add	sp, #8
    5c02:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5c06:	movs	r2, #4
    5c08:	mov	r1, sp
    5c0a:	mov	r0, r8
    5c0c:	bl	56a8 <MTPD::write(char const*, int) [clone .part.2]>
    5c10:	b.n	5bc8 <MTPD::WriteStorageIDs()+0x30>
    #pragma GCC diagnostic pop
    writestring(buf);    
  }

  void MTPD::WriteStorageIDs() {
    uint32_t num=storage_->get_FSCount();
    5c12:	blx	r3
    5c14:	mov	r6, r0
    5c16:	b.n	5bae <MTPD::WriteStorageIDs()+0x16>
    5c18:	.word	0x000019e5

00005c1c <MTPD::GetStorageInfo(unsigned long)>:
    write32(num); // number of storages (disks)
    for(uint32_t ii=0;ii<num;ii++)  write32(Store2Storage(ii)); // storage id
  }

  void MTPD::GetStorageInfo(uint32_t storage) {
    5c1c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5c20:	mov	r4, r0
    uint32_t store = Storage2Store(storage);
    write16(storage_->readonly(store) ? 0x0001 : 0x0004);   // storage type (removable RAM)
    5c22:	ldr	r0, [r0, #0]
    write32(num); // number of storages (disks)
    for(uint32_t ii=0;ii<num;ii++)  write32(Store2Storage(ii)); // storage id
  }

  void MTPD::GetStorageInfo(uint32_t storage) {
    uint32_t store = Storage2Store(storage);
    5c24:	subs	r5, r1, #1
    uint32_t num=storage_->get_FSCount();
    write32(num); // number of storages (disks)
    for(uint32_t ii=0;ii<num;ii++)  write32(Store2Storage(ii)); // storage id
  }

  void MTPD::GetStorageInfo(uint32_t storage) {
    5c26:	sub	sp, #32
    uint32_t store = Storage2Store(storage);
    write16(storage_->readonly(store) ? 0x0001 : 0x0004);   // storage type (removable RAM)
    5c28:	ldr	r3, [r0, #0]
    5c2a:	mov	r1, r5
    5c2c:	ldr	r3, [r3, #20]
    5c2e:	blx	r3
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    5c30:	movw	r3, #9252	; 0x2424
    for(uint32_t ii=0;ii<num;ii++)  write32(Store2Storage(ii)); // storage id
  }

  void MTPD::GetStorageInfo(uint32_t storage) {
    uint32_t store = Storage2Store(storage);
    write16(storage_->readonly(store) ? 0x0001 : 0x0004);   // storage type (removable RAM)
    5c34:	cmp	r0, #0
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    5c36:	ldrb	r3, [r4, r3]
    for(uint32_t ii=0;ii<num;ii++)  write32(Store2Storage(ii)); // storage id
  }

  void MTPD::GetStorageInfo(uint32_t storage) {
    uint32_t store = Storage2Store(storage);
    write16(storage_->readonly(store) ? 0x0001 : 0x0004);   // storage type (removable RAM)
    5c38:	ite	eq
    5c3a:	moveq	r2, #4
    5c3c:	movne	r2, #1
    5c3e:	strh.w	r2, [sp, #6]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    5c42:	cmp	r3, #0
    5c44:	beq.n	5d0a <MTPD::GetStorageInfo(unsigned long)+0xee>
      {
        write_length_ += len;
    5c46:	movw	r2, #9256	; 0x2428
    5c4a:	ldr	r3, [r4, r2]
    5c4c:	adds	r3, #2
    5c4e:	str	r3, [r4, r2]
  }

  void MTPD::GetStorageInfo(uint32_t storage) {
    uint32_t store = Storage2Store(storage);
    write16(storage_->readonly(store) ? 0x0001 : 0x0004);   // storage type (removable RAM)
    write16(storage_->has_directories(store) ? 0x0002: 0x0001);   // filesystem type (generic hierarchical)
    5c50:	ldr	r0, [r4, #0]
    5c52:	mov	r1, r5
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    5c54:	movw	r7, #9252	; 0x2424
  }

  void MTPD::GetStorageInfo(uint32_t storage) {
    uint32_t store = Storage2Store(storage);
    write16(storage_->readonly(store) ? 0x0001 : 0x0004);   // storage type (removable RAM)
    write16(storage_->has_directories(store) ? 0x0002: 0x0001);   // filesystem type (generic hierarchical)
    5c58:	ldr	r3, [r0, #0]
    5c5a:	ldr	r3, [r3, #24]
    5c5c:	blx	r3
    5c5e:	cmp	r0, #0
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    5c60:	ldrb	r6, [r4, r7]
  }

  void MTPD::GetStorageInfo(uint32_t storage) {
    uint32_t store = Storage2Store(storage);
    write16(storage_->readonly(store) ? 0x0001 : 0x0004);   // storage type (removable RAM)
    write16(storage_->has_directories(store) ? 0x0002: 0x0001);   // filesystem type (generic hierarchical)
    5c62:	ite	eq
    5c64:	moveq	r3, #1
    5c66:	movne	r3, #2
    5c68:	strh.w	r3, [sp, #10]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    5c6c:	cmp	r6, #0
    5c6e:	beq.n	5d5a <MTPD::GetStorageInfo(unsigned long)+0x13e>
      {
        write_length_ += len;
    5c70:	movw	r2, #9256	; 0x2428
    5c74:	movs	r1, #0
    5c76:	ldr	r3, [r4, r2]
    5c78:	strh.w	r1, [sp, #8]
    5c7c:	adds	r3, #2
    5c7e:	str	r3, [r4, r2]
    5c80:	movw	r2, #9256	; 0x2428
    5c84:	ldr	r3, [r4, r2]
    5c86:	adds	r3, #2
    5c88:	str	r3, [r4, r2]
    uint32_t store = Storage2Store(storage);
    write16(storage_->readonly(store) ? 0x0001 : 0x0004);   // storage type (removable RAM)
    write16(storage_->has_directories(store) ? 0x0002: 0x0001);   // filesystem type (generic hierarchical)
    write16(0x0000);   // access capability (read-write)

    uint64_t ntotal = storage_->totalSize(store) ; 
    5c8a:	ldr	r0, [r4, #0]
    5c8c:	mov	r1, r5
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    5c8e:	movw	sl, #9252	; 0x2424
    uint32_t store = Storage2Store(storage);
    write16(storage_->readonly(store) ? 0x0001 : 0x0004);   // storage type (removable RAM)
    write16(storage_->has_directories(store) ? 0x0002: 0x0001);   // filesystem type (generic hierarchical)
    write16(0x0000);   // access capability (read-write)

    uint64_t ntotal = storage_->totalSize(store) ; 
    5c92:	ldr	r3, [r0, #0]
    5c94:	ldr	r3, [r3, #12]
    5c96:	blx	r3
    5c98:	mov	r6, r0
    uint64_t nused = storage_->usedSize(store) ; 
    5c9a:	ldr	r0, [r4, #0]
    uint32_t store = Storage2Store(storage);
    write16(storage_->readonly(store) ? 0x0001 : 0x0004);   // storage type (removable RAM)
    write16(storage_->has_directories(store) ? 0x0002: 0x0001);   // filesystem type (generic hierarchical)
    write16(0x0000);   // access capability (read-write)

    uint64_t ntotal = storage_->totalSize(store) ; 
    5c9c:	mov	r7, r1
    uint64_t nused = storage_->usedSize(store) ; 
    5c9e:	mov	r1, r5
    5ca0:	ldr	r3, [r0, #0]
    5ca2:	ldr	r3, [r3, #16]
    5ca4:	blx	r3
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    5ca6:	ldrb.w	r3, [r4, sl]
    write16(storage_->readonly(store) ? 0x0001 : 0x0004);   // storage type (removable RAM)
    write16(storage_->has_directories(store) ? 0x0002: 0x0001);   // filesystem type (generic hierarchical)
    write16(0x0000);   // access capability (read-write)

    uint64_t ntotal = storage_->totalSize(store) ; 
    uint64_t nused = storage_->usedSize(store) ; 
    5caa:	mov	r8, r0
    5cac:	mov	r9, r1
    5cae:	strd	r6, r7, [sp, #24]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    5cb2:	cmp	r3, #0
    5cb4:	beq.n	5d18 <MTPD::GetStorageInfo(unsigned long)+0xfc>
      {
        write_length_ += len;
    5cb6:	movw	r2, #9256	; 0x2428
    5cba:	subs	r6, r6, r0
    5cbc:	ldr	r3, [r4, r2]
    5cbe:	sbc.w	r7, r7, r1
    5cc2:	adds	r3, #8
    5cc4:	strd	r6, r7, [sp, #16]
    5cc8:	str	r3, [r4, r2]
    5cca:	movw	r2, #9256	; 0x2428
    5cce:	mov.w	r1, #4294967295
    5cd2:	ldr	r3, [r4, r2]
    5cd4:	str	r1, [sp, #12]
    5cd6:	adds	r3, #8
    5cd8:	str	r3, [r4, r2]
    5cda:	movw	r2, #9256	; 0x2428
    5cde:	ldr	r3, [r4, r2]
    5ce0:	adds	r3, #4
    5ce2:	str	r3, [r4, r2]

    write64(ntotal);  // max capacity
    write64((ntotal-nused));  // free space (100M)
    //
    write32(0xFFFFFFFFUL);  // free space (objects)
    const char *name = storage_->get_FSName(store);
    5ce4:	ldr	r0, [r4, #0]
    5ce6:	ldr	r2, [pc, #156]	; (5d84 <MTPD::GetStorageInfo(unsigned long)+0x168>)
    5ce8:	ldr	r3, [r0, #0]
    5cea:	ldr	r3, [r3, #8]
    5cec:	cmp	r3, r2
    5cee:	bne.n	5d7c <MTPD::GetStorageInfo(unsigned long)+0x160>
    const char *sd_getFSName(uint32_t store) { return sd_name[store];}
    5cf0:	add.w	r0, r0, r5, lsl #2
    5cf4:	ldr	r1, [r0, #8]
    writestring(name);  // storage descriptor
    5cf6:	mov	r0, r4
    5cf8:	bl	5728 <MTPD::writestring(char const*)>
    writestring("");  // volume identifier
    5cfc:	mov	r0, r4
    5cfe:	ldr	r1, [pc, #136]	; (5d88 <MTPD::GetStorageInfo(unsigned long)+0x16c>)
    5d00:	bl	5728 <MTPD::writestring(char const*)>

    //printf("%d %d ",storage,store); Serial.println(name); Serial.flush();
  }
    5d04:	add	sp, #32
    5d06:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5d0a:	movs	r2, #2
    5d0c:	add.w	r1, sp, #6
    5d10:	mov	r0, r4
    5d12:	bl	56a8 <MTPD::write(char const*, int) [clone .part.2]>
    5d16:	b.n	5c50 <MTPD::GetStorageInfo(unsigned long)+0x34>
    5d18:	movs	r2, #8
    5d1a:	add	r1, sp, #24
    5d1c:	mov	r0, r4
    5d1e:	bl	56a8 <MTPD::write(char const*, int) [clone .part.2]>
    5d22:	subs.w	r6, r6, r8
    5d26:	ldrb.w	r3, [r4, sl]
    5d2a:	sbc.w	r7, r7, r9
    5d2e:	strd	r6, r7, [sp, #16]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    5d32:	cmp	r3, #0
    5d34:	bne.n	5cca <MTPD::GetStorageInfo(unsigned long)+0xae>
    5d36:	movs	r2, #8
    5d38:	add	r1, sp, #16
    5d3a:	mov	r0, r4
    5d3c:	bl	56a8 <MTPD::write(char const*, int) [clone .part.2]>
    5d40:	mov.w	r2, #4294967295
    5d44:	ldrb.w	r3, [r4, sl]
    5d48:	str	r2, [sp, #12]
    5d4a:	cmp	r3, #0
    5d4c:	bne.n	5cda <MTPD::GetStorageInfo(unsigned long)+0xbe>
    5d4e:	movs	r2, #4
    5d50:	add	r1, sp, #12
    5d52:	mov	r0, r4
    5d54:	bl	56a8 <MTPD::write(char const*, int) [clone .part.2]>
    5d58:	b.n	5ce4 <MTPD::GetStorageInfo(unsigned long)+0xc8>
    5d5a:	movs	r2, #2
    5d5c:	add.w	r1, sp, #10
    5d60:	mov	r0, r4
    5d62:	bl	56a8 <MTPD::write(char const*, int) [clone .part.2]>
    5d66:	ldrb	r3, [r4, r7]
    5d68:	strh.w	r6, [sp, #8]
    5d6c:	cmp	r3, #0
    5d6e:	bne.n	5c80 <MTPD::GetStorageInfo(unsigned long)+0x64>
    5d70:	movs	r2, #2
    5d72:	add	r1, sp, #8
    5d74:	mov	r0, r4
    5d76:	bl	56a8 <MTPD::write(char const*, int) [clone .part.2]>
    5d7a:	b.n	5c8a <MTPD::GetStorageInfo(unsigned long)+0x6e>

    write64(ntotal);  // max capacity
    write64((ntotal-nused));  // free space (100M)
    //
    write32(0xFFFFFFFFUL);  // free space (objects)
    const char *name = storage_->get_FSName(store);
    5d7c:	mov	r1, r5
    5d7e:	blx	r3
    5d80:	mov	r1, r0
    5d82:	b.n	5cf6 <MTPD::GetStorageInfo(unsigned long)+0xda>
    5d84:	.word	0x000019e9
    5d88:	.word	0x2000016c

00005d8c <MTPD::GetNumObjects(unsigned long, unsigned long)>:

    //printf("%d %d ",storage,store); Serial.println(name); Serial.flush();
  }

  uint32_t MTPD::GetNumObjects(uint32_t storage, uint32_t parent) 
  { uint32_t store = Storage2Store(storage);
    5d8c:	push	{r4, r5, r6, lr}
    5d8e:	mov	r6, r0
    storage_->StartGetObjectHandles(store, parent);
    5d90:	ldr	r0, [r0, #0]

    //printf("%d %d ",storage,store); Serial.println(name); Serial.flush();
  }

  uint32_t MTPD::GetNumObjects(uint32_t storage, uint32_t parent) 
  { uint32_t store = Storage2Store(storage);
    5d92:	subs	r5, r1, #1
    storage_->StartGetObjectHandles(store, parent);
    int num = 0;
    5d94:	movs	r4, #0
    //printf("%d %d ",storage,store); Serial.println(name); Serial.flush();
  }

  uint32_t MTPD::GetNumObjects(uint32_t storage, uint32_t parent) 
  { uint32_t store = Storage2Store(storage);
    storage_->StartGetObjectHandles(store, parent);
    5d96:	ldr	r3, [r0, #0]
    5d98:	mov	r1, r5
    5d9a:	ldr	r3, [r3, #28]
    5d9c:	blx	r3
    5d9e:	b.n	5da2 <MTPD::GetNumObjects(unsigned long, unsigned long)+0x16>
    int num = 0;
    while (storage_->GetNextObjectHandle(store)) num++;
    5da0:	adds	r4, #1
    5da2:	ldr	r0, [r6, #0]
    5da4:	mov	r1, r5
    5da6:	ldr	r3, [r0, #0]
    5da8:	ldr	r3, [r3, #32]
    5daa:	blx	r3
    5dac:	cmp	r0, #0
    5dae:	bne.n	5da0 <MTPD::GetNumObjects(unsigned long, unsigned long)+0x14>
    return num;
  }
    5db0:	mov	r0, r4
    5db2:	pop	{r4, r5, r6, pc}

00005db4 <MTPD::GetObjectHandles(unsigned long, unsigned long)>:

  void MTPD::GetObjectHandles(uint32_t storage, uint32_t parent) 
  { uint32_t store = Storage2Store(storage);
    5db4:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if (write_get_length_) {
    5db8:	movw	r5, #9252	; 0x2424
    while (storage_->GetNextObjectHandle(store)) num++;
    return num;
  }

  void MTPD::GetObjectHandles(uint32_t storage, uint32_t parent) 
  { uint32_t store = Storage2Store(storage);
    5dbc:	sub	sp, #8
    5dbe:	mov	r4, r0
    if (write_get_length_) {
    5dc0:	ldrb	r3, [r0, r5]
    5dc2:	cbnz	r3, 5e1e <MTPD::GetObjectHandles(unsigned long, unsigned long)+0x6a>
    5dc4:	mov	r6, r1
    5dc6:	mov	r8, r2
      write_length_ = GetNumObjects(storage, parent);
      write_length_++;
      write_length_ *= 4;
    }
    else{
      write32(GetNumObjects(storage, parent));
    5dc8:	bl	5d8c <MTPD::GetNumObjects(unsigned long, unsigned long)>
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    5dcc:	ldrb	r3, [r4, r5]
    5dce:	str	r0, [sp, #0]
    5dd0:	cbz	r3, 5e32 <MTPD::GetObjectHandles(unsigned long, unsigned long)+0x7e>
      {
        write_length_ += len;
    5dd2:	movw	r2, #9256	; 0x2428
    5dd6:	ldr	r3, [r4, r2]
    5dd8:	adds	r3, #4
    5dda:	str	r3, [r4, r2]
      write_length_ *= 4;
    }
    else{
      write32(GetNumObjects(storage, parent));
      int handle;
      storage_->StartGetObjectHandles(store, parent);
    5ddc:	ldr	r0, [r4, #0]
    while (storage_->GetNextObjectHandle(store)) num++;
    return num;
  }

  void MTPD::GetObjectHandles(uint32_t storage, uint32_t parent) 
  { uint32_t store = Storage2Store(storage);
    5dde:	subs	r6, #1
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    5de0:	movw	r7, #9252	; 0x2424
      {
        write_length_ += len;
    5de4:	movw	r5, #9256	; 0x2428
      write_length_ *= 4;
    }
    else{
      write32(GetNumObjects(storage, parent));
      int handle;
      storage_->StartGetObjectHandles(store, parent);
    5de8:	ldr	r3, [r0, #0]
    5dea:	mov	r2, r8
    5dec:	mov	r1, r6
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    5dee:	add	r7, r4
      write_length_ *= 4;
    }
    else{
      write32(GetNumObjects(storage, parent));
      int handle;
      storage_->StartGetObjectHandles(store, parent);
    5df0:	ldr	r3, [r3, #28]
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
      {
        write_length_ += len;
    5df2:	add	r5, r4
      write_length_ *= 4;
    }
    else{
      write32(GetNumObjects(storage, parent));
      int handle;
      storage_->StartGetObjectHandles(store, parent);
    5df4:	blx	r3
      while ((handle = storage_->GetNextObjectHandle(store))) write32(handle);
    5df6:	ldr	r0, [r4, #0]
    5df8:	mov	r1, r6
    5dfa:	ldr	r3, [r0, #0]
    5dfc:	ldr	r3, [r3, #32]
    5dfe:	blx	r3
    5e00:	cbz	r0, 5e2c <MTPD::GetObjectHandles(unsigned long, unsigned long)+0x78>
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    5e02:	ldrb	r3, [r7, #0]
    5e04:	str	r0, [sp, #4]
    5e06:	cbz	r3, 5e10 <MTPD::GetObjectHandles(unsigned long, unsigned long)+0x5c>
      {
        write_length_ += len;
    5e08:	ldr	r3, [r5, #0]
    5e0a:	adds	r3, #4
    5e0c:	str	r3, [r5, #0]
    5e0e:	b.n	5df6 <MTPD::GetObjectHandles(unsigned long, unsigned long)+0x42>
    5e10:	movs	r2, #4
    5e12:	mov	r0, r4
    5e14:	add.w	r1, sp, r2
    5e18:	bl	56a8 <MTPD::write(char const*, int) [clone .part.2]>
    5e1c:	b.n	5df6 <MTPD::GetObjectHandles(unsigned long, unsigned long)+0x42>
  }

  void MTPD::GetObjectHandles(uint32_t storage, uint32_t parent) 
  { uint32_t store = Storage2Store(storage);
    if (write_get_length_) {
      write_length_ = GetNumObjects(storage, parent);
    5e1e:	bl	5d8c <MTPD::GetNumObjects(unsigned long, unsigned long)>
      write_length_++;
      write_length_ *= 4;
    5e22:	adds	r0, #1
    5e24:	movw	r3, #9256	; 0x2428
    5e28:	lsls	r0, r0, #2
    5e2a:	str	r0, [r4, r3]
      write32(GetNumObjects(storage, parent));
      int handle;
      storage_->StartGetObjectHandles(store, parent);
      while ((handle = storage_->GetNextObjectHandle(store))) write32(handle);
    }
  }
    5e2c:	add	sp, #8
    5e2e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5e32:	movs	r2, #4
    5e34:	mov	r1, sp
    5e36:	mov	r0, r4
    5e38:	bl	56a8 <MTPD::write(char const*, int) [clone .part.2]>
    5e3c:	b.n	5ddc <MTPD::GetObjectHandles(unsigned long, unsigned long)+0x28>
    5e3e:	nop

00005e40 <MTPD::GetObjectInfo(unsigned long)>:
  
  void MTPD::GetObjectInfo(uint32_t handle) 
  {
    5e40:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5e44:	mov	r4, r0
    5e46:	sub	sp, #328	; 0x148
    char filename[MAX_FILENAME_LEN];
    uint32_t size, parent;
    uint16_t store;
    storage_->GetObjectInfo(handle, filename, &size, &parent, &store);
    5e48:	ldr	r0, [r0, #0]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    5e4a:	movw	r6, #9252	; 0x2424
  void MTPD::GetObjectInfo(uint32_t handle) 
  {
    char filename[MAX_FILENAME_LEN];
    uint32_t size, parent;
    uint16_t store;
    storage_->GetObjectInfo(handle, filename, &size, &parent, &store);
    5e4e:	add.w	r5, sp, #10
    5e52:	add	r7, sp, #24
    5e54:	ldr.w	lr, [r0]
    5e58:	add	r3, sp, #20
    5e5a:	str	r5, [sp, #4]
    5e5c:	add	r2, sp, #72	; 0x48
    5e5e:	str	r7, [sp, #0]
    5e60:	ldr.w	r8, [lr, #36]	; 0x24
    5e64:	blx	r8
    5e66:	ldrh	r3, [r5, #0]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    5e68:	ldrb	r2, [r4, r6]
    5e6a:	adds	r3, #1
    5e6c:	str	r3, [sp, #28]
    5e6e:	cmp	r2, #0
    5e70:	beq.w	5f84 <MTPD::GetObjectInfo(unsigned long)+0x144>
      {
        write_length_ += len;
    5e74:	movw	r2, #9256	; 0x2428
    uint16_t store;
    storage_->GetObjectInfo(handle, filename, &size, &parent, &store);

    uint32_t storage = Store2Storage(store);
    write32(storage); // storage
    write16(size == 0xFFFFFFFFUL ? 0x3001 : 0x0000); // format
    5e78:	ldr	r1, [sp, #20]
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
      {
        write_length_ += len;
    5e7a:	ldr	r3, [r4, r2]
    uint16_t store;
    storage_->GetObjectInfo(handle, filename, &size, &parent, &store);

    uint32_t storage = Store2Storage(store);
    write32(storage); // storage
    write16(size == 0xFFFFFFFFUL ? 0x3001 : 0x0000); // format
    5e7c:	adds	r1, #1
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
      {
        write_length_ += len;
    5e7e:	add.w	r3, r3, #4
    5e82:	str	r3, [r4, r2]
    uint16_t store;
    storage_->GetObjectInfo(handle, filename, &size, &parent, &store);

    uint32_t storage = Store2Storage(store);
    write32(storage); // storage
    write16(size == 0xFFFFFFFFUL ? 0x3001 : 0x0000); // format
    5e84:	beq.w	60d4 <MTPD::GetObjectInfo(unsigned long)+0x294>
    5e88:	movs	r3, #0
    5e8a:	strh.w	r3, [sp, #16]
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
      {
        write_length_ += len;
    5e8e:	movw	r2, #9256	; 0x2428
    5e92:	movs	r1, #0
    5e94:	ldr	r3, [r4, r2]
    5e96:	strh.w	r1, [sp, #14]
    5e9a:	adds	r3, #2
    5e9c:	str	r3, [r4, r2]
    5e9e:	movw	r2, #9256	; 0x2428
    5ea2:	ldr	r1, [sp, #20]
    5ea4:	ldr	r3, [r4, r2]
    5ea6:	str	r1, [sp, #60]	; 0x3c
    5ea8:	adds	r3, #2
    5eaa:	str	r3, [r4, r2]
    5eac:	movw	r2, #9256	; 0x2428
    5eb0:	movs	r1, #0
    5eb2:	ldr	r3, [r4, r2]
    5eb4:	strh.w	r1, [sp, #12]
    5eb8:	adds	r3, #4
    5eba:	str	r3, [r4, r2]
    5ebc:	movw	r2, #9256	; 0x2428
    5ec0:	movs	r1, #0
    5ec2:	ldr	r3, [r4, r2]
    5ec4:	str	r1, [sp, #56]	; 0x38
    5ec6:	adds	r3, #2
    5ec8:	str	r3, [r4, r2]
    5eca:	movw	r2, #9256	; 0x2428
    5ece:	movs	r1, #0
    5ed0:	ldr	r3, [r4, r2]
    5ed2:	str	r1, [sp, #52]	; 0x34
    5ed4:	adds	r3, #4
    5ed6:	str	r3, [r4, r2]
    5ed8:	movw	r2, #9256	; 0x2428
    5edc:	movs	r1, #0
    5ede:	ldr	r3, [r4, r2]
    5ee0:	str	r1, [sp, #48]	; 0x30
    5ee2:	adds	r3, #4
    5ee4:	str	r3, [r4, r2]
    5ee6:	movw	r2, #9256	; 0x2428
    5eea:	movs	r1, #0
    5eec:	ldr	r3, [r4, r2]
    5eee:	str	r1, [sp, #44]	; 0x2c
    5ef0:	adds	r3, #4
    5ef2:	str	r3, [r4, r2]
    5ef4:	movw	r2, #9256	; 0x2428
    5ef8:	movs	r1, #0
    5efa:	ldr	r3, [r4, r2]
    5efc:	str	r1, [sp, #40]	; 0x28
    5efe:	adds	r3, #4
    5f00:	str	r3, [r4, r2]
    5f02:	movw	r2, #9256	; 0x2428
    5f06:	movs	r1, #0
    5f08:	ldr	r3, [r4, r2]
    5f0a:	str	r1, [sp, #36]	; 0x24
    5f0c:	adds	r3, #4
    5f0e:	str	r3, [r4, r2]
    5f10:	movw	r2, #9256	; 0x2428
    5f14:	ldr	r1, [r7, #0]
    5f16:	ldr	r3, [r4, r2]
    5f18:	str	r1, [sp, #32]
    5f1a:	adds	r3, #4
    5f1c:	str	r3, [r4, r2]
    5f1e:	ldr	r2, [sp, #20]
    5f20:	movw	r1, #9256	; 0x2428
    5f24:	sub.w	r2, r2, #4294967295
    5f28:	ldr	r3, [r4, r1]
    5f2a:	clz	r2, r2
    5f2e:	adds	r3, #4
    5f30:	lsrs	r2, r2, #5
    5f32:	str	r3, [r4, r1]
    5f34:	strh.w	r2, [sp, #18]
    5f38:	movw	r2, #9256	; 0x2428
    5f3c:	movs	r1, #0
    5f3e:	ldr	r3, [r4, r2]
    5f40:	str	r1, [sp, #68]	; 0x44
    5f42:	adds	r3, #2
    5f44:	str	r3, [r4, r2]
    5f46:	movw	r2, #9256	; 0x2428
    5f4a:	movs	r1, #0
    5f4c:	ldr	r3, [r4, r2]
    5f4e:	str	r1, [sp, #64]	; 0x40
    5f50:	adds	r3, #4
    5f52:	str	r3, [r4, r2]
    5f54:	movw	r2, #9256	; 0x2428
    5f58:	ldr	r3, [r4, r2]
    5f5a:	adds	r3, #4
    5f5c:	str	r3, [r4, r2]
    write32(0); // bit depth
    write32(parent); // parent
    write16(size == 0xFFFFFFFFUL ? 1 : 0); // association type
    write32(0); // association description
    write32(0);  // sequence number
    writestring(filename);
    5f5e:	add	r1, sp, #72	; 0x48
    5f60:	mov	r0, r4
    5f62:	bl	5728 <MTPD::writestring(char const*)>
    writestring("");  // date created
    5f66:	mov	r0, r4
    5f68:	ldr	r1, [pc, #372]	; (60e0 <MTPD::GetObjectInfo(unsigned long)+0x2a0>)
    5f6a:	bl	5728 <MTPD::writestring(char const*)>
    writestring("");  // date modified
    5f6e:	mov	r0, r4
    5f70:	ldr	r1, [pc, #364]	; (60e0 <MTPD::GetObjectInfo(unsigned long)+0x2a0>)
    5f72:	bl	5728 <MTPD::writestring(char const*)>
    writestring("");  // keywords
    5f76:	mov	r0, r4
    5f78:	ldr	r1, [pc, #356]	; (60e0 <MTPD::GetObjectInfo(unsigned long)+0x2a0>)
    5f7a:	bl	5728 <MTPD::writestring(char const*)>
  }
    5f7e:	add	sp, #328	; 0x148
    5f80:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5f84:	movs	r2, #4
    5f86:	add	r1, sp, #28
    5f88:	mov	r0, r4
    5f8a:	bl	56a8 <MTPD::write(char const*, int) [clone .part.2]>
    uint16_t store;
    storage_->GetObjectInfo(handle, filename, &size, &parent, &store);

    uint32_t storage = Store2Storage(store);
    write32(storage); // storage
    write16(size == 0xFFFFFFFFUL ? 0x3001 : 0x0000); // format
    5f8e:	ldr	r2, [sp, #20]
    5f90:	movw	r3, #12289	; 0x3001
    5f94:	ldrb	r5, [r4, r6]
    5f96:	adds	r2, #1
    5f98:	it	ne
    5f9a:	movne	r3, #0
    5f9c:	strh.w	r3, [sp, #16]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    5fa0:	cmp	r5, #0
    5fa2:	bne.w	5e8e <MTPD::GetObjectInfo(unsigned long)+0x4e>
    5fa6:	add	r1, sp, #16
    5fa8:	movs	r2, #2
    5faa:	mov	r0, r4
    5fac:	bl	56a8 <MTPD::write(char const*, int) [clone .part.2]>
    5fb0:	ldrb	r3, [r4, r6]
    5fb2:	strh.w	r5, [sp, #14]
    5fb6:	cmp	r3, #0
    5fb8:	bne.w	5e9e <MTPD::GetObjectInfo(unsigned long)+0x5e>
    5fbc:	movs	r2, #2
    5fbe:	add.w	r1, sp, #14
    5fc2:	mov	r0, r4
    5fc4:	bl	56a8 <MTPD::write(char const*, int) [clone .part.2]>
    5fc8:	ldr	r2, [sp, #20]
    5fca:	ldrb	r3, [r4, r6]
    5fcc:	str	r2, [sp, #60]	; 0x3c
    5fce:	cmp	r3, #0
    5fd0:	bne.w	5eac <MTPD::GetObjectInfo(unsigned long)+0x6c>
    5fd4:	add	r1, sp, #60	; 0x3c
    5fd6:	movs	r2, #4
    5fd8:	mov	r0, r4
    5fda:	bl	56a8 <MTPD::write(char const*, int) [clone .part.2]>
    5fde:	ldrb	r3, [r4, r6]
    5fe0:	strh.w	r5, [sp, #12]
    5fe4:	cmp	r3, #0
    5fe6:	bne.w	5ebc <MTPD::GetObjectInfo(unsigned long)+0x7c>
    5fea:	add	r1, sp, #12
    5fec:	movs	r2, #2
    5fee:	mov	r0, r4
    5ff0:	bl	56a8 <MTPD::write(char const*, int) [clone .part.2]>
    5ff4:	ldrb	r3, [r4, r6]
    5ff6:	str	r5, [sp, #56]	; 0x38
    5ff8:	cmp	r3, #0
    5ffa:	bne.w	5eca <MTPD::GetObjectInfo(unsigned long)+0x8a>
    5ffe:	add	r1, sp, #56	; 0x38
    6000:	movs	r2, #4
    6002:	mov	r0, r4
    6004:	bl	56a8 <MTPD::write(char const*, int) [clone .part.2]>
    6008:	ldrb	r3, [r4, r6]
    600a:	str	r5, [sp, #52]	; 0x34
    600c:	cmp	r3, #0
    600e:	bne.w	5ed8 <MTPD::GetObjectInfo(unsigned long)+0x98>
    6012:	add	r1, sp, #52	; 0x34
    6014:	movs	r2, #4
    6016:	mov	r0, r4
    6018:	bl	56a8 <MTPD::write(char const*, int) [clone .part.2]>
    601c:	ldrb	r3, [r4, r6]
    601e:	str	r5, [sp, #48]	; 0x30
    6020:	cmp	r3, #0
    6022:	bne.w	5ee6 <MTPD::GetObjectInfo(unsigned long)+0xa6>
    6026:	add	r1, sp, #48	; 0x30
    6028:	movs	r2, #4
    602a:	mov	r0, r4
    602c:	bl	56a8 <MTPD::write(char const*, int) [clone .part.2]>
    6030:	ldrb	r3, [r4, r6]
    6032:	str	r5, [sp, #44]	; 0x2c
    6034:	cmp	r3, #0
    6036:	bne.w	5ef4 <MTPD::GetObjectInfo(unsigned long)+0xb4>
    603a:	add	r1, sp, #44	; 0x2c
    603c:	movs	r2, #4
    603e:	mov	r0, r4
    6040:	bl	56a8 <MTPD::write(char const*, int) [clone .part.2]>
    6044:	ldrb	r3, [r4, r6]
    6046:	str	r5, [sp, #40]	; 0x28
    6048:	cmp	r3, #0
    604a:	bne.w	5f02 <MTPD::GetObjectInfo(unsigned long)+0xc2>
    604e:	add	r1, sp, #40	; 0x28
    6050:	movs	r2, #4
    6052:	mov	r0, r4
    6054:	bl	56a8 <MTPD::write(char const*, int) [clone .part.2]>
    6058:	ldrb	r3, [r4, r6]
    605a:	str	r5, [sp, #36]	; 0x24
    605c:	cmp	r3, #0
    605e:	bne.w	5f10 <MTPD::GetObjectInfo(unsigned long)+0xd0>
    6062:	movw	r5, #9252	; 0x2424
    6066:	movs	r2, #4
    6068:	add	r1, sp, #36	; 0x24
    606a:	mov	r0, r4
    606c:	bl	56a8 <MTPD::write(char const*, int) [clone .part.2]>
    6070:	ldr	r2, [r7, #0]
    6072:	ldrb	r3, [r4, r5]
    6074:	str	r2, [sp, #32]
    6076:	cmp	r3, #0
    6078:	bne.w	5f1e <MTPD::GetObjectInfo(unsigned long)+0xde>
    607c:	add	r1, sp, #32
    607e:	movs	r2, #4
    6080:	mov	r0, r4
    6082:	bl	56a8 <MTPD::write(char const*, int) [clone .part.2]>
    6086:	ldr	r3, [sp, #20]
    6088:	ldrb	r7, [r4, r5]
    608a:	sub.w	r3, r3, #4294967295
    608e:	clz	r3, r3
    6092:	lsrs	r3, r3, #5
    6094:	strh.w	r3, [sp, #18]
    6098:	cmp	r7, #0
    609a:	bne.w	5f38 <MTPD::GetObjectInfo(unsigned long)+0xf8>
    609e:	add.w	r1, sp, #18
    60a2:	movs	r2, #2
    60a4:	mov	r0, r4
    60a6:	bl	56a8 <MTPD::write(char const*, int) [clone .part.2]>
    60aa:	ldrb	r6, [r4, r5]
    60ac:	str	r7, [sp, #68]	; 0x44
    60ae:	cmp	r6, #0
    60b0:	bne.w	5f46 <MTPD::GetObjectInfo(unsigned long)+0x106>
    60b4:	add	r1, sp, #68	; 0x44
    60b6:	movs	r2, #4
    60b8:	mov	r0, r4
    60ba:	bl	56a8 <MTPD::write(char const*, int) [clone .part.2]>
    60be:	ldrb	r3, [r4, r5]
    60c0:	str	r6, [sp, #64]	; 0x40
    60c2:	cmp	r3, #0
    60c4:	bne.w	5f54 <MTPD::GetObjectInfo(unsigned long)+0x114>
    60c8:	add	r1, sp, #64	; 0x40
    60ca:	movs	r2, #4
    60cc:	mov	r0, r4
    60ce:	bl	56a8 <MTPD::write(char const*, int) [clone .part.2]>
    60d2:	b.n	5f5e <MTPD::GetObjectInfo(unsigned long)+0x11e>
    60d4:	movw	r3, #12289	; 0x3001
    60d8:	strh.w	r3, [sp, #16]
    60dc:	b.n	5e8e <MTPD::GetObjectInfo(unsigned long)+0x4e>
    60de:	nop
    60e0:	.word	0x2000016c

000060e4 <MTPD::getObjectPropsSupported(unsigned long)>:
        write8(0);       // no form
    }
  }

    void MTPD::getObjectPropsSupported(uint32_t p1)
    {
    60e4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    60e8:	movw	r2, #9252	; 0x2424
    }
  }

    void MTPD::getObjectPropsSupported(uint32_t p1)
    {
      write32(propertyListNum);
    60ec:	ldr.w	r8, [pc, #128]	; 6170 <MTPD::getObjectPropsSupported(unsigned long)+0x8c>
        write8(0);       // no form
    }
  }

    void MTPD::getObjectPropsSupported(uint32_t p1)
    {
    60f0:	sub	sp, #12
    60f2:	mov	r9, r0
      write32(propertyListNum);
    60f4:	ldr.w	r3, [r8]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    60f8:	ldrb	r2, [r0, r2]
    60fa:	str	r3, [sp, #4]
    60fc:	cbz	r2, 615a <MTPD::getObjectPropsSupported(unsigned long)+0x76>
      {
        write_length_ += len;
    60fe:	movw	r1, #9256	; 0x2428
    6102:	ldr	r2, [r0, r1]
    6104:	adds	r2, #4
    6106:	str	r2, [r0, r1]
  }

    void MTPD::getObjectPropsSupported(uint32_t p1)
    {
      write32(propertyListNum);
      for(uint32_t ii=0; ii<propertyListNum;ii++) write16(propertyList[ii]);
    6108:	cbz	r3, 6154 <MTPD::getObjectPropsSupported(unsigned long)+0x70>
    610a:	movw	r7, #9252	; 0x2424
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
      {
        write_length_ += len;
    610e:	movw	r6, #9256	; 0x2428
    6112:	ldr	r5, [pc, #88]	; (616c <MTPD::getObjectPropsSupported(unsigned long)+0x88>)
  }

    void MTPD::getObjectPropsSupported(uint32_t p1)
    {
      write32(propertyListNum);
      for(uint32_t ii=0; ii<propertyListNum;ii++) write16(propertyList[ii]);
    6114:	movw	r3, #56321	; 0xdc01
    6118:	add	r7, r9
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
      {
        write_length_ += len;
    611a:	add	r6, r9
  }

    void MTPD::getObjectPropsSupported(uint32_t p1)
    {
      write32(propertyListNum);
      for(uint32_t ii=0; ii<propertyListNum;ii++) write16(propertyList[ii]);
    611c:	movs	r4, #0
    611e:	b.n	6134 <MTPD::getObjectPropsSupported(unsigned long)+0x50>
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
      {
        write_length_ += len;
    6120:	ldr	r3, [r6, #0]
  }

    void MTPD::getObjectPropsSupported(uint32_t p1)
    {
      write32(propertyListNum);
      for(uint32_t ii=0; ii<propertyListNum;ii++) write16(propertyList[ii]);
    6122:	adds	r4, #1
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
      {
        write_length_ += len;
    6124:	adds	r3, #2
    6126:	str	r3, [r6, #0]
  }

    void MTPD::getObjectPropsSupported(uint32_t p1)
    {
      write32(propertyListNum);
      for(uint32_t ii=0; ii<propertyListNum;ii++) write16(propertyList[ii]);
    6128:	ldr.w	r3, [r8]
    612c:	cmp	r3, r4
    612e:	bls.n	6154 <MTPD::getObjectPropsSupported(unsigned long)+0x70>
    6130:	ldrh.w	r3, [r5, #2]!
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    6134:	ldrb	r2, [r7, #0]
    6136:	strh.w	r3, [sp, #2]
    613a:	cmp	r2, #0
    613c:	bne.n	6120 <MTPD::getObjectPropsSupported(unsigned long)+0x3c>
    613e:	movs	r2, #2
    6140:	mov	r0, r9
  }

    void MTPD::getObjectPropsSupported(uint32_t p1)
    {
      write32(propertyListNum);
      for(uint32_t ii=0; ii<propertyListNum;ii++) write16(propertyList[ii]);
    6142:	adds	r4, #1
    6144:	add.w	r1, sp, r2
    6148:	bl	56a8 <MTPD::write(char const*, int) [clone .part.2]>
    614c:	ldr.w	r3, [r8]
    6150:	cmp	r3, r4
    6152:	bhi.n	6130 <MTPD::getObjectPropsSupported(unsigned long)+0x4c>
    }
    6154:	add	sp, #12
    6156:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    615a:	movs	r2, #4
    615c:	add.w	r1, sp, r2
    6160:	bl	56a8 <MTPD::write(char const*, int) [clone .part.2]>
    6164:	ldr.w	r3, [r8]
    6168:	b.n	6108 <MTPD::getObjectPropsSupported(unsigned long)+0x24>
    616a:	nop
    616c:	.word	0x20000368
    6170:	.word	0x20000bc8

00006174 <MTPD::getObjectPropDesc(unsigned long, unsigned long)>:

    void MTPD::getObjectPropDesc(uint32_t p1, uint32_t p2)
    {
      switch(p1)
    6174:	mvn.w	r3, #56320	; 0xdc00
    6178:	add	r3, r1
      write32(propertyListNum);
      for(uint32_t ii=0; ii<propertyListNum;ii++) write16(propertyList[ii]);
    }

    void MTPD::getObjectPropDesc(uint32_t p1, uint32_t p2)
    {
    617a:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    617e:	mov	r4, r0
    6180:	sub	sp, #148	; 0x94
      switch(p1)
    6182:	cmp	r3, #67	; 0x43
    6184:	bhi.w	62a4 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x130>
    6188:	tbh	[pc, r3, lsl #1]
    618c:	.word	0x00d900ba
    6190:	.word	0x014200f8
    6194:	.word	0x008c008c
    6198:	.word	0x01af0161
    619c:	.word	0x008c01f9
    61a0:	.word	0x008c0243
    61a4:	.word	0x008c008c
    61a8:	.word	0x008c008c
    61ac:	.word	0x008c008c
    61b0:	.word	0x008c008c
    61b4:	.word	0x008c008c
    61b8:	.word	0x008c008c
    61bc:	.word	0x008c008c
    61c0:	.word	0x008c008c
    61c4:	.word	0x008c008c
    61c8:	.word	0x008c008c
    61cc:	.word	0x008c008c
    61d0:	.word	0x008c008c
    61d4:	.word	0x008c008c
    61d8:	.word	0x008c008c
    61dc:	.word	0x008c008c
    61e0:	.word	0x008c008c
    61e4:	.word	0x008c008c
    61e8:	.word	0x008c008c
    61ec:	.word	0x008c008c
    61f0:	.word	0x008c008c
    61f4:	.word	0x008c008c
    61f8:	.word	0x008c008c
    61fc:	.word	0x008c008c
    6200:	.word	0x008c008c
    6204:	.word	0x008c008c
    6208:	.word	0x008c008c
    620c:	.word	0x008c028b
    6210:	.word	0x008f008c
    6214:	movs	r2, #2
    6216:	add.w	r1, sp, #66	; 0x42
    621a:	bl	56a8 <MTPD::write(char const*, int) [clone .part.2]>
    621e:	movs	r3, #10
    6220:	ldrb	r6, [r4, r5]
    6222:	strh.w	r3, [sp, #64]	; 0x40
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    6226:	cmp	r6, #0
    6228:	bne.w	66c0 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x54c>
    622c:	movs	r2, #2
    622e:	add	r1, sp, #64	; 0x40
    6230:	mov	r0, r4
    6232:	bl	56a8 <MTPD::write(char const*, int) [clone .part.2]>
    6236:	ldrb	r3, [r4, r5]
    6238:	strb.w	r6, [sp, #24]
    623c:	cmp	r3, #0
    623e:	bne.w	66ca <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x556>
    6242:	movs	r2, #1
    6244:	add	r1, sp, #24
    6246:	mov	r0, r4
    6248:	mov.w	r8, #0
    624c:	bl	56a8 <MTPD::write(char const*, int) [clone .part.2]>
    6250:	mov.w	r9, #0
    6254:	ldrb	r3, [r4, r5]
    6256:	strd	r8, r9, [sp, #136]	; 0x88
    625a:	cmp	r3, #0
    625c:	bne.w	66d4 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x560>
    6260:	movs	r2, #8
    6262:	add	r1, sp, #136	; 0x88
    6264:	mov	r0, r4
    6266:	bl	56a8 <MTPD::write(char const*, int) [clone .part.2]>
    626a:	ldrb	r7, [r4, r5]
    626c:	strd	r8, r9, [sp, #128]	; 0x80
    6270:	cmp	r7, #0
    6272:	bne.w	6442 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x2ce>
    6276:	movs	r2, #8
    6278:	add	r1, sp, #128	; 0x80
    627a:	mov	r0, r4
    627c:	bl	56a8 <MTPD::write(char const*, int) [clone .part.2]>
    6280:	ldrb	r6, [r4, r5]
    6282:	str	r7, [sp, #112]	; 0x70
    6284:	cbnz	r6, 62e6 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x172>
    6286:	movs	r2, #4
    6288:	add	r1, sp, #112	; 0x70
    628a:	mov	r0, r4
    628c:	bl	56a8 <MTPD::write(char const*, int) [clone .part.2]>
    6290:	ldrb	r3, [r4, r5]
    6292:	strb.w	r6, [sp, #23]
    6296:	cbnz	r3, 62f0 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x17c>
    6298:	mov	r0, r4
    629a:	movs	r2, #1
    629c:	add.w	r1, sp, #23
    62a0:	bl	56a8 <MTPD::write(char const*, int) [clone .part.2]>
          write8(0);
          break;
        default:
          break;
      }
    }
    62a4:	add	sp, #148	; 0x94
    62a6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    62aa:	movw	r5, #9252	; 0x2424
    62ae:	movw	r2, #56388	; 0xdc44
    62b2:	ldrb	r3, [r0, r5]
    62b4:	strh.w	r2, [sp, #70]	; 0x46
    62b8:	cmp	r3, #0
    62ba:	beq.w	6864 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6f0>
      {
        write_length_ += len;
    62be:	movw	r2, #9256	; 0x2428
    62c2:	ldr	r3, [r4, r2]
    62c4:	adds	r3, #2
    62c6:	str	r3, [r4, r2]
    62c8:	movw	r2, #9256	; 0x2428
    62cc:	ldr	r3, [r4, r2]
    62ce:	adds	r3, #2
    62d0:	str	r3, [r4, r2]
    62d2:	movw	r2, #9256	; 0x2428
    62d6:	ldr	r3, [r4, r2]
    62d8:	adds	r3, #1
    62da:	str	r3, [r4, r2]
    62dc:	movw	r2, #9256	; 0x2428
    62e0:	ldr	r3, [r4, r2]
    62e2:	adds	r3, #1
    62e4:	str	r3, [r4, r2]
    62e6:	movw	r2, #9256	; 0x2428
    62ea:	ldr	r3, [r4, r2]
    62ec:	adds	r3, #4
    62ee:	str	r3, [r4, r2]
    62f0:	movw	r2, #9256	; 0x2428
    62f4:	ldr	r3, [r4, r2]
    62f6:	adds	r3, #1
    62f8:	str	r3, [r4, r2]
          write8(0);
          break;
        default:
          break;
      }
    }
    62fa:	add	sp, #148	; 0x94
    62fc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    6300:	movw	r5, #9252	; 0x2424
    6304:	movw	r2, #56321	; 0xdc01
    6308:	ldrb	r3, [r0, r5]
    630a:	strh.w	r2, [sp, #30]
    630e:	cmp	r3, #0
    6310:	beq.w	67ea <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x676>
      {
        write_length_ += len;
    6314:	movw	r2, #9256	; 0x2428
    6318:	ldr	r3, [r4, r2]
    631a:	adds	r3, #2
    631c:	str	r3, [r4, r2]
    631e:	movw	r2, #9256	; 0x2428
    6322:	ldr	r3, [r4, r2]
    6324:	adds	r3, #2
    6326:	str	r3, [r4, r2]
    6328:	movw	r2, #9256	; 0x2428
    632c:	ldr	r3, [r4, r2]
    632e:	adds	r3, #1
    6330:	str	r3, [r4, r2]
    6332:	movw	r2, #9256	; 0x2428
    6336:	ldr	r3, [r4, r2]
    6338:	adds	r3, #4
    633a:	str	r3, [r4, r2]
    633c:	b.n	62e6 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x172>
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    633e:	movw	r5, #9252	; 0x2424
    6342:	movw	r2, #56322	; 0xdc02
    6346:	ldrb	r3, [r0, r5]
    6348:	strh.w	r2, [sp, #36]	; 0x24
    634c:	cmp	r3, #0
    634e:	beq.w	6762 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x5ee>
      {
        write_length_ += len;
    6352:	movw	r2, #9256	; 0x2428
    6356:	ldr	r3, [r4, r2]
    6358:	adds	r3, #2
    635a:	str	r3, [r4, r2]
    635c:	movw	r2, #9256	; 0x2428
    6360:	ldr	r3, [r4, r2]
    6362:	adds	r3, #2
    6364:	str	r3, [r4, r2]
    6366:	movw	r2, #9256	; 0x2428
    636a:	ldr	r3, [r4, r2]
    636c:	adds	r3, #1
    636e:	str	r3, [r4, r2]
    6370:	movw	r2, #9256	; 0x2428
    6374:	ldr	r3, [r4, r2]
    6376:	adds	r3, #2
    6378:	str	r3, [r4, r2]
    637a:	b.n	62e6 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x172>
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    637c:	movw	r5, #9252	; 0x2424
    6380:	movw	r2, #56323	; 0xdc03
    6384:	ldrb	r3, [r0, r5]
    6386:	strh.w	r2, [sp, #42]	; 0x2a
    638a:	cmp	r3, #0
    638c:	bne.n	6352 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1de>
    638e:	movs	r2, #2
    6390:	add.w	r1, sp, #42	; 0x2a
    6394:	bl	56a8 <MTPD::write(char const*, int) [clone .part.2]>
    6398:	movs	r7, #4
    639a:	ldrb.w	r8, [r4, r5]
    639e:	strh.w	r7, [sp, #40]	; 0x28
    63a2:	cmp.w	r8, #0
    63a6:	bne.n	635c <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1e8>
    63a8:	movs	r2, #2
    63aa:	add	r1, sp, #40	; 0x28
    63ac:	mov	r0, r4
    63ae:	bl	56a8 <MTPD::write(char const*, int) [clone .part.2]>
    63b2:	ldrb	r6, [r4, r5]
    63b4:	strb.w	r8, [sp, #9]
    63b8:	cmp	r6, #0
    63ba:	bne.n	6366 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1f2>
    63bc:	movs	r2, #1
    63be:	add.w	r1, sp, #9
    63c2:	mov	r0, r4
    63c4:	bl	56a8 <MTPD::write(char const*, int) [clone .part.2]>
    63c8:	ldrb.w	r8, [r4, r5]
    63cc:	strh.w	r6, [sp, #38]	; 0x26
    63d0:	cmp.w	r8, #0
    63d4:	bne.n	6370 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1fc>
    63d6:	movs	r2, #2
    63d8:	add.w	r1, sp, #38	; 0x26
    63dc:	mov	r0, r4
    63de:	bl	56a8 <MTPD::write(char const*, int) [clone .part.2]>
    63e2:	ldrb	r6, [r4, r5]
    63e4:	str.w	r8, [sp, #84]	; 0x54
    63e8:	cmp	r6, #0
    63ea:	bne.w	62e6 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x172>
    63ee:	mov	r2, r7
    63f0:	add	r1, sp, #84	; 0x54
    63f2:	mov	r0, r4
    63f4:	bl	56a8 <MTPD::write(char const*, int) [clone .part.2]>
    63f8:	ldrb	r3, [r4, r5]
    63fa:	strb.w	r6, [sp, #8]
    63fe:	cmp	r3, #0
    6400:	bne.w	62f0 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x17c>
    6404:	mov	r0, r4
    6406:	movs	r2, #1
    6408:	add	r1, sp, #8
    640a:	bl	56a8 <MTPD::write(char const*, int) [clone .part.2]>
    640e:	b.n	62a4 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x130>
    6410:	movw	r5, #9252	; 0x2424
    6414:	movw	r2, #56324	; 0xdc04
    6418:	ldrb	r3, [r0, r5]
    641a:	strh.w	r2, [sp, #46]	; 0x2e
    641e:	cmp	r3, #0
    6420:	beq.w	66e0 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x56c>
      {
        write_length_ += len;
    6424:	movw	r2, #9256	; 0x2428
    6428:	ldr	r3, [r0, r2]
    642a:	adds	r3, #2
    642c:	str	r3, [r0, r2]
    642e:	movw	r2, #9256	; 0x2428
    6432:	ldr	r3, [r4, r2]
    6434:	adds	r3, #2
    6436:	str	r3, [r4, r2]
    6438:	movw	r2, #9256	; 0x2428
    643c:	ldr	r3, [r4, r2]
    643e:	adds	r3, #1
    6440:	str	r3, [r4, r2]
    6442:	movw	r2, #9256	; 0x2428
    6446:	ldr	r3, [r4, r2]
    6448:	adds	r3, #8
    644a:	str	r3, [r4, r2]
    644c:	b.n	62e6 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x172>
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    644e:	movw	r5, #9252	; 0x2424
    6452:	movw	r2, #56327	; 0xdc07
    6456:	ldrb	r3, [r0, r5]
    6458:	strh.w	r2, [sp, #50]	; 0x32
    645c:	cmp	r3, #0
    645e:	bne.w	62be <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x14a>
    6462:	movs	r2, #2
    6464:	add.w	r1, sp, #50	; 0x32
    6468:	bl	56a8 <MTPD::write(char const*, int) [clone .part.2]>
    646c:	movw	r2, #65535	; 0xffff
    6470:	ldrb	r3, [r4, r5]
    6472:	strh.w	r2, [sp, #48]	; 0x30
    6476:	cmp	r3, #0
    6478:	bne.w	62c8 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x154>
    647c:	movs	r2, #2
    647e:	add	r1, sp, #48	; 0x30
    6480:	mov	r0, r4
    6482:	movs	r6, #1
    6484:	bl	56a8 <MTPD::write(char const*, int) [clone .part.2]>
    6488:	ldrb	r7, [r4, r5]
    648a:	strb.w	r6, [sp, #14]
    648e:	cmp	r7, #0
    6490:	bne.w	62d2 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x15e>
    6494:	mov	r2, r6
    6496:	add.w	r1, sp, #14
    649a:	mov	r0, r4
    649c:	bl	56a8 <MTPD::write(char const*, int) [clone .part.2]>
    64a0:	ldrb.w	r8, [r4, r5]
    64a4:	strb.w	r7, [sp, #13]
    64a8:	cmp.w	r8, #0
    64ac:	bne.w	62dc <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x168>
    64b0:	mov	r2, r6
    64b2:	add.w	r1, sp, #13
    64b6:	mov	r0, r4
    64b8:	bl	56a8 <MTPD::write(char const*, int) [clone .part.2]>
    64bc:	ldrb	r7, [r4, r5]
    64be:	str.w	r8, [sp, #92]	; 0x5c
    64c2:	cmp	r7, #0
    64c4:	bne.w	62e6 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x172>
    64c8:	movs	r2, #4
    64ca:	add	r1, sp, #92	; 0x5c
    64cc:	mov	r0, r4
    64ce:	bl	56a8 <MTPD::write(char const*, int) [clone .part.2]>
    64d2:	ldrb	r3, [r4, r5]
    64d4:	strb.w	r7, [sp, #12]
    64d8:	cmp	r3, #0
    64da:	bne.w	62f0 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x17c>
    64de:	mov	r2, r6
    64e0:	mov	r0, r4
    64e2:	add	r1, sp, #12
    64e4:	bl	56a8 <MTPD::write(char const*, int) [clone .part.2]>
    64e8:	b.n	62a4 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x130>
    64ea:	movw	r5, #9252	; 0x2424
    64ee:	movw	r2, #56328	; 0xdc08
    64f2:	ldrb	r3, [r0, r5]
    64f4:	strh.w	r2, [sp, #54]	; 0x36
    64f8:	cmp	r3, #0
    64fa:	bne.w	62be <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x14a>
    64fe:	movs	r2, #2
    6500:	add.w	r1, sp, #54	; 0x36
    6504:	bl	56a8 <MTPD::write(char const*, int) [clone .part.2]>
    6508:	movw	r3, #65535	; 0xffff
    650c:	ldrb	r7, [r4, r5]
    650e:	strh.w	r3, [sp, #52]	; 0x34
    6512:	cmp	r7, #0
    6514:	bne.w	62c8 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x154>
    6518:	movs	r2, #2
    651a:	add	r1, sp, #52	; 0x34
    651c:	mov	r0, r4
    651e:	bl	56a8 <MTPD::write(char const*, int) [clone .part.2]>
    6522:	ldrb	r6, [r4, r5]
    6524:	strb.w	r7, [sp, #17]
    6528:	cmp	r6, #0
    652a:	bne.w	62d2 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x15e>
    652e:	movs	r2, #1
    6530:	add.w	r1, sp, #17
    6534:	mov	r0, r4
    6536:	bl	56a8 <MTPD::write(char const*, int) [clone .part.2]>
    653a:	ldrb	r7, [r4, r5]
    653c:	strb.w	r6, [sp, #16]
    6540:	cmp	r7, #0
    6542:	bne.w	62dc <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x168>
    6546:	movs	r2, #1
    6548:	add	r1, sp, #16
    654a:	mov	r0, r4
    654c:	bl	56a8 <MTPD::write(char const*, int) [clone .part.2]>
    6550:	ldrb	r6, [r4, r5]
    6552:	str	r7, [sp, #96]	; 0x60
    6554:	cmp	r6, #0
    6556:	bne.w	62e6 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x172>
    655a:	movs	r2, #4
    655c:	add	r1, sp, #96	; 0x60
    655e:	mov	r0, r4
    6560:	bl	56a8 <MTPD::write(char const*, int) [clone .part.2]>
    6564:	ldrb	r3, [r4, r5]
    6566:	strb.w	r6, [sp, #15]
    656a:	cmp	r3, #0
    656c:	bne.w	62f0 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x17c>
    6570:	mov	r0, r4
    6572:	movs	r2, #1
    6574:	add.w	r1, sp, #15
    6578:	bl	56a8 <MTPD::write(char const*, int) [clone .part.2]>
    657c:	b.n	62a4 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x130>
    657e:	movw	r5, #9252	; 0x2424
    6582:	movw	r2, #56329	; 0xdc09
    6586:	ldrb	r3, [r0, r5]
    6588:	strh.w	r2, [sp, #58]	; 0x3a
    658c:	cmp	r3, #0
    658e:	bne.w	62be <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x14a>
    6592:	movs	r2, #2
    6594:	add.w	r1, sp, #58	; 0x3a
    6598:	bl	56a8 <MTPD::write(char const*, int) [clone .part.2]>
    659c:	movw	r3, #65535	; 0xffff
    65a0:	ldrb	r7, [r4, r5]
    65a2:	strh.w	r3, [sp, #56]	; 0x38
    65a6:	cmp	r7, #0
    65a8:	bne.w	62c8 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x154>
    65ac:	movs	r2, #2
    65ae:	add	r1, sp, #56	; 0x38
    65b0:	mov	r0, r4
    65b2:	bl	56a8 <MTPD::write(char const*, int) [clone .part.2]>
    65b6:	ldrb	r6, [r4, r5]
    65b8:	strb.w	r7, [sp, #20]
    65bc:	cmp	r6, #0
    65be:	bne.w	62d2 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x15e>
    65c2:	movs	r2, #1
    65c4:	add	r1, sp, #20
    65c6:	mov	r0, r4
    65c8:	bl	56a8 <MTPD::write(char const*, int) [clone .part.2]>
    65cc:	ldrb	r7, [r4, r5]
    65ce:	strb.w	r6, [sp, #19]
    65d2:	cmp	r7, #0
    65d4:	bne.w	62dc <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x168>
    65d8:	movs	r2, #1
    65da:	add.w	r1, sp, #19
    65de:	mov	r0, r4
    65e0:	bl	56a8 <MTPD::write(char const*, int) [clone .part.2]>
    65e4:	ldrb	r6, [r4, r5]
    65e6:	str	r7, [sp, #100]	; 0x64
    65e8:	cmp	r6, #0
    65ea:	bne.w	62e6 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x172>
    65ee:	movs	r2, #4
    65f0:	add	r1, sp, #100	; 0x64
    65f2:	mov	r0, r4
    65f4:	bl	56a8 <MTPD::write(char const*, int) [clone .part.2]>
    65f8:	ldrb	r3, [r4, r5]
    65fa:	strb.w	r6, [sp, #18]
    65fe:	cmp	r3, #0
    6600:	bne.w	62f0 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x17c>
    6604:	mov	r0, r4
    6606:	movs	r2, #1
    6608:	add.w	r1, sp, #18
    660c:	bl	56a8 <MTPD::write(char const*, int) [clone .part.2]>
    6610:	b.n	62a4 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x130>
    6612:	movw	r5, #9252	; 0x2424
    6616:	movw	r2, #56331	; 0xdc0b
    661a:	ldrb	r3, [r0, r5]
    661c:	strh.w	r2, [sp, #62]	; 0x3e
    6620:	cmp	r3, #0
    6622:	bne.w	6314 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1a0>
    6626:	movs	r2, #2
    6628:	add.w	r1, sp, #62	; 0x3e
    662c:	bl	56a8 <MTPD::write(char const*, int) [clone .part.2]>
    6630:	movs	r3, #6
    6632:	ldrb	r7, [r4, r5]
    6634:	strh.w	r3, [sp, #60]	; 0x3c
    6638:	cmp	r7, #0
    663a:	bne.w	631e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1aa>
    663e:	movs	r2, #2
    6640:	add	r1, sp, #60	; 0x3c
    6642:	mov	r0, r4
    6644:	bl	56a8 <MTPD::write(char const*, int) [clone .part.2]>
    6648:	ldrb	r6, [r4, r5]
    664a:	strb.w	r7, [sp, #22]
    664e:	cmp	r6, #0
    6650:	bne.w	6328 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1b4>
    6654:	movs	r2, #1
    6656:	add.w	r1, sp, #22
    665a:	mov	r0, r4
    665c:	bl	56a8 <MTPD::write(char const*, int) [clone .part.2]>
    6660:	ldrb	r7, [r4, r5]
    6662:	str	r6, [sp, #108]	; 0x6c
    6664:	cmp	r7, #0
    6666:	bne.w	6332 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1be>
    666a:	movs	r2, #4
    666c:	add	r1, sp, #108	; 0x6c
    666e:	mov	r0, r4
    6670:	bl	56a8 <MTPD::write(char const*, int) [clone .part.2]>
    6674:	ldrb	r6, [r4, r5]
    6676:	str	r7, [sp, #104]	; 0x68
    6678:	cmp	r6, #0
    667a:	bne.w	62e6 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x172>
    667e:	movs	r2, #4
    6680:	add	r1, sp, #104	; 0x68
    6682:	mov	r0, r4
    6684:	bl	56a8 <MTPD::write(char const*, int) [clone .part.2]>
    6688:	ldrb	r3, [r4, r5]
    668a:	strb.w	r6, [sp, #21]
    668e:	cmp	r3, #0
    6690:	bne.w	62f0 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x17c>
    6694:	mov	r0, r4
    6696:	movs	r2, #1
    6698:	add.w	r1, sp, #21
    669c:	bl	56a8 <MTPD::write(char const*, int) [clone .part.2]>
    66a0:	b.n	62a4 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x130>
    66a2:	movw	r5, #9252	; 0x2424
    66a6:	movw	r2, #56385	; 0xdc41
    66aa:	ldrb	r3, [r0, r5]
    66ac:	strh.w	r2, [sp, #66]	; 0x42
    66b0:	cmp	r3, #0
    66b2:	beq.w	6214 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xa0>
      {
        write_length_ += len;
    66b6:	movw	r2, #9256	; 0x2428
    66ba:	ldr	r3, [r0, r2]
    66bc:	adds	r3, #2
    66be:	str	r3, [r0, r2]
    66c0:	movw	r2, #9256	; 0x2428
    66c4:	ldr	r3, [r4, r2]
    66c6:	adds	r3, #2
    66c8:	str	r3, [r4, r2]
    66ca:	movw	r2, #9256	; 0x2428
    66ce:	ldr	r3, [r4, r2]
    66d0:	adds	r3, #1
    66d2:	str	r3, [r4, r2]
    66d4:	movw	r2, #9256	; 0x2428
    66d8:	ldr	r3, [r4, r2]
    66da:	adds	r3, #8
    66dc:	str	r3, [r4, r2]
    66de:	b.n	6442 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x2ce>
    66e0:	movs	r2, #2
    66e2:	add.w	r1, sp, #46	; 0x2e
    66e6:	bl	56a8 <MTPD::write(char const*, int) [clone .part.2]>
    66ea:	movs	r6, #8
    66ec:	ldrb	r7, [r4, r5]
    66ee:	strh.w	r6, [sp, #44]	; 0x2c
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    66f2:	cmp	r7, #0
    66f4:	bne.w	642e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x2ba>
    66f8:	movs	r2, #2
    66fa:	add	r1, sp, #44	; 0x2c
    66fc:	mov	r0, r4
    66fe:	bl	56a8 <MTPD::write(char const*, int) [clone .part.2]>
    6702:	ldrb	r3, [r4, r5]
    6704:	strb.w	r7, [sp, #11]
    6708:	cmp	r3, #0
    670a:	bne.w	6438 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x2c4>
    670e:	movs	r2, #1
    6710:	add.w	r1, sp, #11
    6714:	mov	r0, r4
    6716:	bl	56a8 <MTPD::write(char const*, int) [clone .part.2]>
    671a:	movs	r2, #0
    671c:	movs	r3, #0
    671e:	ldrb	r7, [r4, r5]
    6720:	strd	r2, r3, [sp, #120]	; 0x78
    6724:	cmp	r7, #0
    6726:	bne.w	6442 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x2ce>
    672a:	mov	r2, r6
    672c:	add	r1, sp, #120	; 0x78
    672e:	mov	r0, r4
    6730:	bl	56a8 <MTPD::write(char const*, int) [clone .part.2]>
    6734:	ldrb	r6, [r4, r5]
    6736:	str	r7, [sp, #88]	; 0x58
    6738:	cmp	r6, #0
    673a:	bne.w	62e6 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x172>
    673e:	movs	r2, #4
    6740:	add	r1, sp, #88	; 0x58
    6742:	mov	r0, r4
    6744:	bl	56a8 <MTPD::write(char const*, int) [clone .part.2]>
    6748:	ldrb	r3, [r4, r5]
    674a:	strb.w	r6, [sp, #10]
    674e:	cmp	r3, #0
    6750:	bne.w	62f0 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x17c>
    6754:	mov	r0, r4
    6756:	movs	r2, #1
    6758:	add.w	r1, sp, #10
    675c:	bl	56a8 <MTPD::write(char const*, int) [clone .part.2]>
    6760:	b.n	62a4 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x130>
    6762:	movs	r2, #2
    6764:	add	r1, sp, #36	; 0x24
    6766:	bl	56a8 <MTPD::write(char const*, int) [clone .part.2]>
    676a:	movs	r7, #4
    676c:	ldrb.w	r8, [r4, r5]
    6770:	strh.w	r7, [sp, #34]	; 0x22
    6774:	cmp.w	r8, #0
    6778:	bne.w	635c <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1e8>
    677c:	movs	r2, #2
    677e:	add.w	r1, sp, #34	; 0x22
    6782:	mov	r0, r4
    6784:	bl	56a8 <MTPD::write(char const*, int) [clone .part.2]>
    6788:	ldrb	r6, [r4, r5]
    678a:	strb.w	r8, [sp, #7]
    678e:	cmp	r6, #0
    6790:	bne.w	6366 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1f2>
    6794:	movs	r2, #1
    6796:	add.w	r1, sp, #7
    679a:	mov	r0, r4
    679c:	bl	56a8 <MTPD::write(char const*, int) [clone .part.2]>
    67a0:	ldrb.w	r8, [r4, r5]
    67a4:	strh.w	r6, [sp, #32]
    67a8:	cmp.w	r8, #0
    67ac:	bne.w	6370 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1fc>
    67b0:	movs	r2, #2
    67b2:	add	r1, sp, #32
    67b4:	mov	r0, r4
    67b6:	bl	56a8 <MTPD::write(char const*, int) [clone .part.2]>
    67ba:	ldrb	r6, [r4, r5]
    67bc:	str.w	r8, [sp, #80]	; 0x50
    67c0:	cmp	r6, #0
    67c2:	bne.w	62e6 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x172>
    67c6:	mov	r2, r7
    67c8:	add	r1, sp, #80	; 0x50
    67ca:	mov	r0, r4
    67cc:	bl	56a8 <MTPD::write(char const*, int) [clone .part.2]>
    67d0:	ldrb	r3, [r4, r5]
    67d2:	strb.w	r6, [sp, #6]
    67d6:	cmp	r3, #0
    67d8:	bne.w	62f0 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x17c>
    67dc:	mov	r0, r4
    67de:	movs	r2, #1
    67e0:	add.w	r1, sp, #6
    67e4:	bl	56a8 <MTPD::write(char const*, int) [clone .part.2]>
    67e8:	b.n	62a4 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x130>
    67ea:	movs	r2, #2
    67ec:	add.w	r1, sp, #30
    67f0:	bl	56a8 <MTPD::write(char const*, int) [clone .part.2]>
    67f4:	movs	r3, #6
    67f6:	ldrb	r7, [r4, r5]
    67f8:	strh.w	r3, [sp, #28]
    67fc:	cmp	r7, #0
    67fe:	bne.w	631e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1aa>
    6802:	movs	r2, #2
    6804:	add	r1, sp, #28
    6806:	mov	r0, r4
    6808:	bl	56a8 <MTPD::write(char const*, int) [clone .part.2]>
    680c:	ldrb	r6, [r4, r5]
    680e:	strb.w	r7, [sp, #5]
    6812:	cmp	r6, #0
    6814:	bne.w	6328 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1b4>
    6818:	movs	r2, #1
    681a:	add.w	r1, sp, #5
    681e:	mov	r0, r4
    6820:	bl	56a8 <MTPD::write(char const*, int) [clone .part.2]>
    6824:	ldrb	r7, [r4, r5]
    6826:	str	r6, [sp, #76]	; 0x4c
    6828:	cmp	r7, #0
    682a:	bne.w	6332 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1be>
    682e:	movs	r2, #4
    6830:	add	r1, sp, #76	; 0x4c
    6832:	mov	r0, r4
    6834:	bl	56a8 <MTPD::write(char const*, int) [clone .part.2]>
    6838:	ldrb	r6, [r4, r5]
    683a:	str	r7, [sp, #72]	; 0x48
    683c:	cmp	r6, #0
    683e:	bne.w	62e6 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x172>
    6842:	movs	r2, #4
    6844:	add	r1, sp, #72	; 0x48
    6846:	mov	r0, r4
    6848:	bl	56a8 <MTPD::write(char const*, int) [clone .part.2]>
    684c:	ldrb	r3, [r4, r5]
    684e:	strb.w	r6, [sp, #4]
    6852:	cmp	r3, #0
    6854:	bne.w	62f0 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x17c>
    6858:	mov	r0, r4
    685a:	movs	r2, #1
    685c:	add	r1, sp, #4
    685e:	bl	56a8 <MTPD::write(char const*, int) [clone .part.2]>
    6862:	b.n	62a4 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x130>
    6864:	movs	r2, #2
    6866:	add.w	r1, sp, #70	; 0x46
    686a:	bl	56a8 <MTPD::write(char const*, int) [clone .part.2]>
    686e:	movw	r3, #65535	; 0xffff
    6872:	ldrb	r7, [r4, r5]
    6874:	strh.w	r3, [sp, #68]	; 0x44
    6878:	cmp	r7, #0
    687a:	bne.w	62c8 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x154>
    687e:	movs	r2, #2
    6880:	add	r1, sp, #68	; 0x44
    6882:	mov	r0, r4
    6884:	bl	56a8 <MTPD::write(char const*, int) [clone .part.2]>
    6888:	ldrb	r6, [r4, r5]
    688a:	strb.w	r7, [sp, #27]
    688e:	cmp	r6, #0
    6890:	bne.w	62d2 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x15e>
    6894:	movs	r2, #1
    6896:	add.w	r1, sp, #27
    689a:	mov	r0, r4
    689c:	bl	56a8 <MTPD::write(char const*, int) [clone .part.2]>
    68a0:	ldrb	r7, [r4, r5]
    68a2:	strb.w	r6, [sp, #26]
    68a6:	cmp	r7, #0
    68a8:	bne.w	62dc <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x168>
    68ac:	movs	r2, #1
    68ae:	add.w	r1, sp, #26
    68b2:	mov	r0, r4
    68b4:	bl	56a8 <MTPD::write(char const*, int) [clone .part.2]>
    68b8:	ldrb	r6, [r4, r5]
    68ba:	str	r7, [sp, #116]	; 0x74
    68bc:	cmp	r6, #0
    68be:	bne.w	62e6 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x172>
    68c2:	movs	r2, #4
    68c4:	add	r1, sp, #116	; 0x74
    68c6:	mov	r0, r4
    68c8:	bl	56a8 <MTPD::write(char const*, int) [clone .part.2]>
    68cc:	ldrb	r3, [r4, r5]
    68ce:	strb.w	r6, [sp, #25]
    68d2:	cmp	r3, #0
    68d4:	bne.w	62f0 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x17c>
    68d8:	mov	r0, r4
    68da:	movs	r2, #1
    68dc:	add.w	r1, sp, #25
    68e0:	bl	56a8 <MTPD::write(char const*, int) [clone .part.2]>
          write8(0);
          break;
        default:
          break;
      }
    }
    68e4:	b.n	62a4 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x130>
    68e6:	nop

000068e8 <MTPD::getObjectPropValue(unsigned long, unsigned long)>:

    void MTPD::getObjectPropValue(uint32_t p1, uint32_t p2)
    { char name[MAX_FILENAME_LEN];
    68e8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    68ec:	mov	r4, r0
    68ee:	sub	sp, #316	; 0x13c
      uint32_t dir;
      uint32_t size;
      uint32_t parent;
      uint16_t store;
      storage_->GetObjectInfo(p1,name,&size,&parent, &store);
    68f0:	ldr	r0, [r0, #0]
          break;
      }
    }

    void MTPD::getObjectPropValue(uint32_t p1, uint32_t p2)
    { char name[MAX_FILENAME_LEN];
    68f2:	mov	r7, r2
      uint32_t dir;
      uint32_t size;
      uint32_t parent;
      uint16_t store;
      storage_->GetObjectInfo(p1,name,&size,&parent, &store);
    68f4:	add.w	r5, sp, #10
    68f8:	add	r6, sp, #20
    68fa:	ldr.w	lr, [r0]
    68fe:	add	r3, sp, #16
    6900:	str	r5, [sp, #4]
    6902:	add	r2, sp, #56	; 0x38
    6904:	str	r6, [sp, #0]
          break;
      }
    }

    void MTPD::getObjectPropValue(uint32_t p1, uint32_t p2)
    { char name[MAX_FILENAME_LEN];
    6906:	mov	r9, r1
      uint32_t dir;
      uint32_t size;
      uint32_t parent;
      uint16_t store;
      storage_->GetObjectInfo(p1,name,&size,&parent, &store);
    6908:	ldr.w	r8, [lr, #36]	; 0x24
    690c:	blx	r8
      dir = size == 0xFFFFFFFFUL;
      uint32_t storage = Store2Storage(store);
      switch(p2)
    690e:	mvn.w	r3, #56320	; 0xdc00
      uint32_t size;
      uint32_t parent;
      uint16_t store;
      storage_->GetObjectInfo(p1,name,&size,&parent, &store);
      dir = size == 0xFFFFFFFFUL;
      uint32_t storage = Store2Storage(store);
    6912:	ldrh	r2, [r5, #0]
      switch(p2)
    6914:	add	r3, r7
      uint32_t dir;
      uint32_t size;
      uint32_t parent;
      uint16_t store;
      storage_->GetObjectInfo(p1,name,&size,&parent, &store);
      dir = size == 0xFFFFFFFFUL;
    6916:	ldr	r1, [sp, #16]
      uint32_t storage = Store2Storage(store);
    6918:	adds	r5, r2, #1
      switch(p2)
    691a:	cmp	r3, #67	; 0x43
    691c:	bhi.n	69a6 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xbe>
    691e:	tbb	[pc, r3]
    6922:	.short	0x6153
    6924:	.word	0x4242ac9d
    6928:	.word	0x4245454c
    692c:	.word	0x42424276
    6930:	.word	0x42424242
    6934:	.word	0x42424242
    6938:	.word	0x42424242
    693c:	.word	0x42424242
    6940:	.word	0x42424242
    6944:	.word	0x42424242
    6948:	.word	0x42424242
    694c:	.word	0x42424242
    6950:	.word	0x42424242
    6954:	.word	0x42424242
    6958:	.word	0x42424242
    695c:	.word	0x42424242
    6960:	.word	0x42864242
    6964:	.short	0x4c42
    6966:	movs	r2, #4
    6968:	add	r1, sp, #52	; 0x34
    696a:	mov	r0, r4
    696c:	bl	56a8 <MTPD::write(char const*, int) [clone .part.2]>
    6970:	ldr	r2, [r6, #0]
    6972:	ldrb	r3, [r4, r7]
    6974:	str	r2, [sp, #48]	; 0x30
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    6976:	cmp	r3, #0
    6978:	bne.n	6a46 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x15e>
    697a:	add	r1, sp, #48	; 0x30
    697c:	movs	r2, #4
    697e:	mov	r0, r4
    6980:	bl	56a8 <MTPD::write(char const*, int) [clone .part.2]>
    6984:	ldrb	r6, [r4, r7]
    6986:	str	r5, [sp, #44]	; 0x2c
    6988:	cmp	r6, #0
    698a:	bne.n	6a50 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x168>
    698c:	add	r1, sp, #44	; 0x2c
    698e:	movs	r2, #4
    6990:	mov	r0, r4
    6992:	bl	56a8 <MTPD::write(char const*, int) [clone .part.2]>
    6996:	ldrb	r3, [r4, r7]
    6998:	str	r6, [sp, #40]	; 0x28
    699a:	cbnz	r3, 69d4 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xec>
    699c:	add	r1, sp, #40	; 0x28
    699e:	mov	r0, r4
    69a0:	movs	r2, #4
    69a2:	bl	56a8 <MTPD::write(char const*, int) [clone .part.2]>
          writestring(name);
          break;
        default:
          break;
      }
    }
    69a6:	add	sp, #316	; 0x13c
    69a8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          break;
        case MTP_PROPERTY_DATE_CREATED:       //0xDC08:
          writestring("");
          break;
        case MTP_PROPERTY_DATE_MODIFIED:      //0xDC09:
          writestring("");
    69ac:	mov	r0, r4
    69ae:	ldr	r1, [pc, #268]	; (6abc <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x1d4>)
    69b0:	bl	5728 <MTPD::writestring(char const*)>
          writestring(name);
          break;
        default:
          break;
      }
    }
    69b4:	add	sp, #316	; 0x13c
    69b6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          write32(parent);
          write32(storage);
          write32(0);
          break;
        case MTP_PROPERTY_NAME:               //0xDC44:
          writestring(name);
    69ba:	add	r1, sp, #56	; 0x38
    69bc:	mov	r0, r4
    69be:	bl	5728 <MTPD::writestring(char const*)>
          break;
        default:
          break;
      }
    }
    69c2:	add	sp, #316	; 0x13c
    69c4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    69c8:	movw	r3, #9252	; 0x2424
    69cc:	str	r5, [sp, #24]
    69ce:	ldrb	r3, [r4, r3]
    69d0:	cmp	r3, #0
    69d2:	beq.n	6ab0 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x1c8>
      {
        write_length_ += len;
    69d4:	movw	r2, #9256	; 0x2428
    69d8:	ldr	r3, [r4, r2]
    69da:	adds	r3, #4
    69dc:	str	r3, [r4, r2]
          writestring(name);
          break;
        default:
          break;
      }
    }
    69de:	add	sp, #316	; 0x13c
    69e0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      {
        case MTP_PROPERTY_STORAGE_ID:         //0xDC01:
          write32(storage);
          break;
        case MTP_PROPERTY_OBJECT_FORMAT:      //0xDC02:
          write16(dir?0x3001:0x3000);
    69e4:	adds	r1, #1
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    69e6:	movw	r2, #9252	; 0x2424
      {
        case MTP_PROPERTY_STORAGE_ID:         //0xDC01:
          write32(storage);
          break;
        case MTP_PROPERTY_OBJECT_FORMAT:      //0xDC02:
          write16(dir?0x3001:0x3000);
    69ea:	movw	r3, #12289	; 0x3001
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    69ee:	ldrb	r2, [r4, r2]
      {
        case MTP_PROPERTY_STORAGE_ID:         //0xDC01:
          write32(storage);
          break;
        case MTP_PROPERTY_OBJECT_FORMAT:      //0xDC02:
          write16(dir?0x3001:0x3000);
    69f0:	it	ne
    69f2:	movne.w	r3, #12288	; 0x3000
    69f6:	strh.w	r3, [sp, #12]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    69fa:	cmp	r2, #0
    69fc:	beq.n	6aa4 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x1bc>
      {
        write_length_ += len;
    69fe:	movw	r2, #9256	; 0x2428
    6a02:	ldr	r3, [r4, r2]
    6a04:	adds	r3, #2
    6a06:	str	r3, [r4, r2]
          writestring(name);
          break;
        default:
          break;
      }
    }
    6a08:	add	sp, #316	; 0x13c
    6a0a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          break;
        case MTP_PROPERTY_DATE_MODIFIED:      //0xDC09:
          writestring("");
          break;
        case MTP_PROPERTY_PARENT_OBJECT:      //0xDC0B:
          write32((store==parent)? 0: parent);
    6a0e:	ldr	r3, [r6, #0]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    6a10:	movw	r1, #9252	; 0x2424
          break;
        case MTP_PROPERTY_DATE_MODIFIED:      //0xDC09:
          writestring("");
          break;
        case MTP_PROPERTY_PARENT_OBJECT:      //0xDC0B:
          write32((store==parent)? 0: parent);
    6a14:	cmp	r2, r3
    6a16:	it	eq
    6a18:	moveq	r3, #0
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    6a1a:	ldrb	r2, [r4, r1]
    6a1c:	str	r3, [sp, #36]	; 0x24
    6a1e:	cmp	r2, #0
    6a20:	bne.n	69d4 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xec>
    6a22:	add	r1, sp, #36	; 0x24
    6a24:	mov	r0, r4
    6a26:	movs	r2, #4
    6a28:	bl	56a8 <MTPD::write(char const*, int) [clone .part.2]>
    6a2c:	b.n	69a6 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xbe>
    6a2e:	movw	r7, #9252	; 0x2424
    6a32:	str.w	r9, [sp, #52]	; 0x34
    6a36:	ldrb	r3, [r4, r7]
    6a38:	cmp	r3, #0
    6a3a:	beq.n	6966 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x7e>
      {
        write_length_ += len;
    6a3c:	movw	r2, #9256	; 0x2428
    6a40:	ldr	r3, [r4, r2]
    6a42:	adds	r3, #4
    6a44:	str	r3, [r4, r2]
    6a46:	movw	r2, #9256	; 0x2428
    6a4a:	ldr	r3, [r4, r2]
    6a4c:	adds	r3, #4
    6a4e:	str	r3, [r4, r2]
    6a50:	movw	r2, #9256	; 0x2428
    6a54:	ldr	r3, [r4, r2]
    6a56:	adds	r3, #4
    6a58:	str	r3, [r4, r2]
    6a5a:	b.n	69d4 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xec>
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    6a5c:	movw	r3, #9252	; 0x2424
    6a60:	movs	r2, #0
    6a62:	ldrb	r3, [r4, r3]
    6a64:	strh.w	r2, [sp, #14]
    6a68:	cmp	r3, #0
    6a6a:	bne.n	69fe <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x116>
    6a6c:	add.w	r1, sp, #14
    6a70:	mov	r0, r4
    6a72:	movs	r2, #2
    6a74:	bl	56a8 <MTPD::write(char const*, int) [clone .part.2]>
    6a78:	b.n	69a6 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xbe>
    6a7a:	movw	r6, #9252	; 0x2424
    6a7e:	str	r1, [sp, #32]
    6a80:	ldrb	r5, [r4, r6]
    6a82:	cmp	r5, #0
    6a84:	bne.n	6a50 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x168>
    6a86:	add	r1, sp, #32
    6a88:	movs	r2, #4
    6a8a:	mov	r0, r4
    6a8c:	bl	56a8 <MTPD::write(char const*, int) [clone .part.2]>
    6a90:	ldrb	r3, [r4, r6]
    6a92:	str	r5, [sp, #28]
    6a94:	cmp	r3, #0
    6a96:	bne.n	69d4 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xec>
    6a98:	add	r1, sp, #28
    6a9a:	mov	r0, r4
    6a9c:	movs	r2, #4
    6a9e:	bl	56a8 <MTPD::write(char const*, int) [clone .part.2]>
    6aa2:	b.n	69a6 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xbe>
    6aa4:	add	r1, sp, #12
    6aa6:	mov	r0, r4
    6aa8:	movs	r2, #2
    6aaa:	bl	56a8 <MTPD::write(char const*, int) [clone .part.2]>
    6aae:	b.n	69a6 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xbe>
    6ab0:	add	r1, sp, #24
    6ab2:	mov	r0, r4
    6ab4:	movs	r2, #4
    6ab6:	bl	56a8 <MTPD::write(char const*, int) [clone .part.2]>
    6aba:	b.n	69a6 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xbe>
    6abc:	.word	0x2000016c

00006ac0 <MTPD::pull_packet(unsigned char*)>:
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
      return 1;
    }

    int MTPD::pull_packet(uint8_t *data_buffer)
    {
    6ac0:	push	{r4, lr}
    6ac2:	mov	r4, r1
      while(!usb_mtp_available());
    6ac4:	bl	f234 <usb_mtp_available>
    6ac8:	cmp	r0, #0
    6aca:	beq.n	6ac4 <MTPD::pull_packet(unsigned char*)+0x4>
      return usb_mtp_recv(data_buffer,60);
    6acc:	mov	r0, r4
    6ace:	movs	r1, #60	; 0x3c
    }
    6ad0:	ldmia.w	sp!, {r4, lr}
    }

    int MTPD::pull_packet(uint8_t *data_buffer)
    {
      while(!usb_mtp_available());
      return usb_mtp_recv(data_buffer,60);
    6ad4:	b.w	f0b8 <usb_mtp_recv>

00006ad8 <MTPD::GetObject(unsigned long)>:
        }
      }
    }

    void MTPD::GetObject(uint32_t object_id) 
    {
    6ad8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6adc:	mov	fp, r0
      uint32_t size = storage_->GetSize(object_id);
    6ade:	ldr	r0, [r0, #0]
        }
      }
    }

    void MTPD::GetObject(uint32_t object_id) 
    {
    6ae0:	sub	sp, #28
      uint32_t size = storage_->GetSize(object_id);
    6ae2:	ldr	r3, [r0, #0]
        }
      }
    }

    void MTPD::GetObject(uint32_t object_id) 
    {
    6ae4:	str	r1, [sp, #16]
      uint32_t size = storage_->GetSize(object_id);
    6ae6:	ldr	r3, [r3, #40]	; 0x28
    6ae8:	blx	r3

      if (write_get_length_) {
    6aea:	movw	r3, #9252	; 0x2424
      }
    }

    void MTPD::GetObject(uint32_t object_id) 
    {
      uint32_t size = storage_->GetSize(object_id);
    6aee:	mov	sl, r0

      if (write_get_length_) {
    6af0:	ldrb.w	r7, [fp, r3]
    6af4:	cmp	r7, #0
    6af6:	bne.n	6bda <MTPD::GetObject(unsigned long)+0x102>
      } else 
      { 
        uint32_t pos = 0; // into data
        uint32_t len = sizeof(MTPHeader);

        disk_pos=DISK_BUFFER_SIZE;
    6af8:	movw	r2, #9248	; 0x2420
    6afc:	mov.w	r3, #8192	; 0x2000
    6b00:	str.w	r3, [fp, r2]
        while(pos<size)
    6b04:	cmp	r0, #0
    6b06:	beq.n	6bee <MTPD::GetObject(unsigned long)+0x116>
    6b08:	mov	r8, r3
    6b0a:	add.w	r6, fp, #544	; 0x220
    6b0e:	add.w	r3, fp, #1056	; 0x420
    6b12:	movw	r9, #9248	; 0x2420
    6b16:	str.w	fp, [sp, #20]
    6b1a:	movs	r5, #12
    6b1c:	add	r9, fp
    6b1e:	mov	fp, r3
    6b20:	mov	r3, r6
    6b22:	mov	r6, r8
    6b24:	mov	r8, r3
    6b26:	b.n	6b6c <MTPD::GetObject(unsigned long)+0x94>
    6b28:	str	r3, [sp, #12]
    6b2a:	rsb	r3, r6, #8192	; 0x2000
    6b2e:	ldr	r2, [sp, #12]
          }

          uint32_t to_copy = min(size-pos,MTP_TX_SIZE-len);
          to_copy = min (to_copy, DISK_BUFFER_SIZE-disk_pos);

          memcpy(tx_data_buffer+len,disk_buffer+disk_pos,to_copy);
    6b30:	add.w	r0, r8, r5
    6b34:	add.w	r1, fp, r6
    6b38:	cmp	r2, r3
    6b3a:	it	cs
    6b3c:	movcs	r2, r3
    6b3e:	rsb	r3, r5, #512	; 0x200
    6b42:	cmp	r2, r3
    6b44:	mov	r4, r2
    6b46:	it	cs
    6b48:	movcs	r4, r3
    6b4a:	mov	r2, r4
          disk_pos += to_copy;
          pos += to_copy;
          len += to_copy;
    6b4c:	add	r5, r4
          }

          uint32_t to_copy = min(size-pos,MTP_TX_SIZE-len);
          to_copy = min (to_copy, DISK_BUFFER_SIZE-disk_pos);

          memcpy(tx_data_buffer+len,disk_buffer+disk_pos,to_copy);
    6b4e:	bl	d064 <memcpy>
          disk_pos += to_copy;
    6b52:	ldr.w	r3, [r9]
          pos += to_copy;
    6b56:	add	r7, r4
          len += to_copy;

          if(len==MTP_TX_SIZE)
    6b58:	cmp.w	r5, #512	; 0x200

          uint32_t to_copy = min(size-pos,MTP_TX_SIZE-len);
          to_copy = min (to_copy, DISK_BUFFER_SIZE-disk_pos);

          memcpy(tx_data_buffer+len,disk_buffer+disk_pos,to_copy);
          disk_pos += to_copy;
    6b5c:	add	r4, r3
    6b5e:	str.w	r4, [r9]
          pos += to_copy;
          len += to_copy;

          if(len==MTP_TX_SIZE)
    6b62:	beq.n	6ba8 <MTPD::GetObject(unsigned long)+0xd0>
      { 
        uint32_t pos = 0; // into data
        uint32_t len = sizeof(MTPHeader);

        disk_pos=DISK_BUFFER_SIZE;
        while(pos<size)
    6b64:	cmp	sl, r7
    6b66:	bls.n	6bc0 <MTPD::GetObject(unsigned long)+0xe8>
    6b68:	ldr.w	r6, [r9]
        {
          if(disk_pos==DISK_BUFFER_SIZE)
    6b6c:	cmp.w	r6, #8192	; 0x2000
          {
            uint32_t nread=min(size-pos,(uint32_t)DISK_BUFFER_SIZE);
    6b70:	rsb	r3, r7, sl
        uint32_t len = sizeof(MTPHeader);

        disk_pos=DISK_BUFFER_SIZE;
        while(pos<size)
        {
          if(disk_pos==DISK_BUFFER_SIZE)
    6b74:	bne.n	6b28 <MTPD::GetObject(unsigned long)+0x50>
          {
            uint32_t nread=min(size-pos,(uint32_t)DISK_BUFFER_SIZE);
    6b76:	mov	r1, r3
    6b78:	str	r3, [sp, #12]
            storage_->read(object_id,pos,(char *)disk_buffer,nread);
    6b7a:	ldr	r3, [sp, #20]
    6b7c:	mov	r2, r7
//#include <algorithm> // this isn't really needed, is it?  (slows down compiling)
#include <utility>
// https://forum.pjrc.com/threads/44596-Teensyduino-1-37-Beta-2-(Arduino-1-8-3-support)?p=145150&viewfull=1#post145150
template<class A, class B>
constexpr auto min(A&& a, B&& b) -> decltype(a < b ? std::forward<A>(a) : std::forward<B>(b)) {
  return a < b ? std::forward<A>(a) : std::forward<B>(b);
    6b7e:	cmp.w	r1, #8192	; 0x2000
    6b82:	mov	ip, r1
    6b84:	ldr	r0, [r3, #0]
    6b86:	mov	r3, fp
    6b88:	it	cs
    6b8a:	movcs.w	ip, #8192	; 0x2000
    6b8e:	ldr	r1, [sp, #16]
    6b90:	ldr.w	lr, [r0]
    6b94:	str.w	ip, [sp]
    6b98:	ldr.w	r4, [lr, #48]	; 0x30
    6b9c:	blx	r4
    6b9e:	mov	r3, r6
    6ba0:	movs	r6, #0
            disk_pos=0;
    6ba2:	str.w	r6, [r9]
    6ba6:	b.n	6b2e <MTPD::GetObject(unsigned long)+0x56>

#elif defined(__IMXRT1062__)  

    int MTPD::push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    6ba8:	movs	r2, #60	; 0x3c
    6baa:	mov.w	r1, #512	; 0x200
    6bae:	mov	r0, r8
    6bb0:	bl	f168 <usb_mtp_send>
    6bb4:	cmp	r0, #0
    6bb6:	ble.n	6ba8 <MTPD::GetObject(unsigned long)+0xd0>
      { 
        uint32_t pos = 0; // into data
        uint32_t len = sizeof(MTPHeader);

        disk_pos=DISK_BUFFER_SIZE;
        while(pos<size)
    6bb8:	cmp	sl, r7
          pos += to_copy;
          len += to_copy;

          if(len==MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            len=0;
    6bba:	mov.w	r5, #0
      { 
        uint32_t pos = 0; // into data
        uint32_t len = sizeof(MTPHeader);

        disk_pos=DISK_BUFFER_SIZE;
        while(pos<size)
    6bbe:	bhi.n	6b68 <MTPD::GetObject(unsigned long)+0x90>
    6bc0:	mov	r6, r8
          if(len==MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            len=0;
          }
        }
        if(len>0)
    6bc2:	cbz	r5, 6bd4 <MTPD::GetObject(unsigned long)+0xfc>

#elif defined(__IMXRT1062__)  

    int MTPD::push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    6bc4:	movs	r2, #60	; 0x3c
    6bc6:	mov.w	r1, #512	; 0x200
    6bca:	mov	r0, r6
    6bcc:	bl	f168 <usb_mtp_send>
    6bd0:	cmp	r0, #0
    6bd2:	ble.n	6bc4 <MTPD::GetObject(unsigned long)+0xec>
        if(len>0)
        { push_packet(tx_data_buffer,MTP_TX_SIZE);
          len=0;
        }
      }
    }
    6bd4:	add	sp, #28
    6bd6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    void MTPD::GetObject(uint32_t object_id) 
    {
      uint32_t size = storage_->GetSize(object_id);

      if (write_get_length_) {
        write_length_ += size;
    6bda:	movw	r2, #9256	; 0x2428
    6bde:	ldr.w	r3, [fp, r2]
    6be2:	add	r3, r0
    6be4:	str.w	r3, [fp, r2]
        if(len>0)
        { push_packet(tx_data_buffer,MTP_TX_SIZE);
          len=0;
        }
      }
    }
    6be8:	add	sp, #28
    6bea:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6bee:	add.w	r6, fp, #544	; 0x220
    6bf2:	b.n	6bc4 <MTPD::GetObject(unsigned long)+0xec>

00006bf4 <MTPD::GetPartialObject(unsigned long, unsigned long, unsigned long)>:
    uint32_t MTPD::GetPartialObject(uint32_t object_id, uint32_t offset, uint32_t NumBytes) 
    {
    6bf4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6bf8:	mov	fp, r0
      uint32_t size = storage_->GetSize(object_id);
    6bfa:	ldr	r0, [r0, #0]
          len=0;
        }
      }
    }
    uint32_t MTPD::GetPartialObject(uint32_t object_id, uint32_t offset, uint32_t NumBytes) 
    {
    6bfc:	sub	sp, #28
    6bfe:	mov	sl, r3
      uint32_t size = storage_->GetSize(object_id);
    6c00:	ldr	r3, [r0, #0]
          len=0;
        }
      }
    }
    uint32_t MTPD::GetPartialObject(uint32_t object_id, uint32_t offset, uint32_t NumBytes) 
    {
    6c02:	mov	r7, r2
    6c04:	str	r1, [sp, #12]
      uint32_t size = storage_->GetSize(object_id);
    6c06:	ldr	r3, [r3, #40]	; 0x28
    6c08:	blx	r3

      size -= offset;
    6c0a:	subs	r0, r0, r7
      if(NumBytes == 0xffffffff) NumBytes=size;
      if (NumBytes<size) size=NumBytes;
    6c0c:	cmp	r0, sl
    6c0e:	bls.w	6d22 <MTPD::GetPartialObject(unsigned long, unsigned long, unsigned long)+0x12e>
    6c12:	cmp.w	sl, #4294967295
    6c16:	beq.w	6d22 <MTPD::GetPartialObject(unsigned long, unsigned long, unsigned long)+0x12e>

      if (write_get_length_) {
    6c1a:	movw	r3, #9252	; 0x2424
    6c1e:	ldrb.w	r3, [fp, r3]
    6c22:	cmp	r3, #0
    6c24:	bne.n	6d0c <MTPD::GetPartialObject(unsigned long, unsigned long, unsigned long)+0x118>
      } else 
      { 
        uint32_t pos = offset; // into data
        uint32_t len = sizeof(MTPHeader);

        disk_pos=DISK_BUFFER_SIZE;
    6c26:	movw	r1, #9248	; 0x2420
    6c2a:	mov.w	r2, #8192	; 0x2000
        while(pos<size)
    6c2e:	cmp	sl, r7
      } else 
      { 
        uint32_t pos = offset; // into data
        uint32_t len = sizeof(MTPHeader);

        disk_pos=DISK_BUFFER_SIZE;
    6c30:	str.w	r2, [fp, r1]
        while(pos<size)
    6c34:	bls.n	6d26 <MTPD::GetPartialObject(unsigned long, unsigned long, unsigned long)+0x132>
    6c36:	add.w	r6, fp, #544	; 0x220
    6c3a:	movw	r9, #9248	; 0x2420
        {
          if(disk_pos==DISK_BUFFER_SIZE)
          {
            uint32_t nread=min(size-pos,(uint32_t)DISK_BUFFER_SIZE);
            storage_->read(object_id,pos,(char *)disk_buffer,nread);
            disk_pos=0;
    6c3e:	str	r3, [sp, #16]
    6c40:	add.w	r3, fp, #1056	; 0x420
    6c44:	add	r9, fp
    6c46:	str.w	fp, [sp, #20]
    6c4a:	mov	fp, r3
    6c4c:	mov	r3, r6
      { 
        uint32_t pos = offset; // into data
        uint32_t len = sizeof(MTPHeader);

        disk_pos=DISK_BUFFER_SIZE;
        while(pos<size)
    6c4e:	movs	r5, #12
    6c50:	mov	r6, r2
    6c52:	mov	r8, r3
    6c54:	b.n	6c9a <MTPD::GetPartialObject(unsigned long, unsigned long, unsigned long)+0xa6>
    6c56:	str	r3, [sp, #8]
    6c58:	rsb	r3, r6, #8192	; 0x2000
    6c5c:	ldr	r2, [sp, #8]
          }

          uint32_t to_copy = min(size-pos,MTP_TX_SIZE-len);
          to_copy = min (to_copy, DISK_BUFFER_SIZE-disk_pos);

          memcpy(tx_data_buffer+len,disk_buffer+disk_pos,to_copy);
    6c5e:	add.w	r0, r8, r5
    6c62:	add.w	r1, fp, r6
    6c66:	cmp	r2, r3
    6c68:	it	cs
    6c6a:	movcs	r2, r3
    6c6c:	rsb	r3, r5, #512	; 0x200
    6c70:	cmp	r2, r3
    6c72:	mov	r4, r2
    6c74:	it	cs
    6c76:	movcs	r4, r3
    6c78:	mov	r2, r4
          disk_pos += to_copy;
          pos += to_copy;
          len += to_copy;
    6c7a:	add	r5, r4
          }

          uint32_t to_copy = min(size-pos,MTP_TX_SIZE-len);
          to_copy = min (to_copy, DISK_BUFFER_SIZE-disk_pos);

          memcpy(tx_data_buffer+len,disk_buffer+disk_pos,to_copy);
    6c7c:	bl	d064 <memcpy>
          disk_pos += to_copy;
    6c80:	ldr.w	r3, [r9]
          pos += to_copy;
    6c84:	add	r7, r4
          len += to_copy;

          if(len==MTP_TX_SIZE)
    6c86:	cmp.w	r5, #512	; 0x200

          uint32_t to_copy = min(size-pos,MTP_TX_SIZE-len);
          to_copy = min (to_copy, DISK_BUFFER_SIZE-disk_pos);

          memcpy(tx_data_buffer+len,disk_buffer+disk_pos,to_copy);
          disk_pos += to_copy;
    6c8a:	add	r4, r3
    6c8c:	str.w	r4, [r9]
          pos += to_copy;
          len += to_copy;

          if(len==MTP_TX_SIZE)
    6c90:	beq.n	6cd8 <MTPD::GetPartialObject(unsigned long, unsigned long, unsigned long)+0xe4>
      { 
        uint32_t pos = offset; // into data
        uint32_t len = sizeof(MTPHeader);

        disk_pos=DISK_BUFFER_SIZE;
        while(pos<size)
    6c92:	cmp	sl, r7
    6c94:	bls.n	6cf0 <MTPD::GetPartialObject(unsigned long, unsigned long, unsigned long)+0xfc>
    6c96:	ldr.w	r6, [r9]
        {
          if(disk_pos==DISK_BUFFER_SIZE)
    6c9a:	cmp.w	r6, #8192	; 0x2000
          {
            uint32_t nread=min(size-pos,(uint32_t)DISK_BUFFER_SIZE);
    6c9e:	rsb	r3, r7, sl
        uint32_t len = sizeof(MTPHeader);

        disk_pos=DISK_BUFFER_SIZE;
        while(pos<size)
        {
          if(disk_pos==DISK_BUFFER_SIZE)
    6ca2:	bne.n	6c56 <MTPD::GetPartialObject(unsigned long, unsigned long, unsigned long)+0x62>
          {
            uint32_t nread=min(size-pos,(uint32_t)DISK_BUFFER_SIZE);
    6ca4:	mov	r1, r3
    6ca6:	str	r3, [sp, #8]
            storage_->read(object_id,pos,(char *)disk_buffer,nread);
    6ca8:	ldr	r3, [sp, #20]
    6caa:	mov	r2, r7
    6cac:	cmp.w	r1, #8192	; 0x2000
    6cb0:	mov	ip, r1
    6cb2:	ldr	r0, [r3, #0]
    6cb4:	mov	r3, fp
    6cb6:	it	cs
    6cb8:	movcs.w	ip, #8192	; 0x2000
    6cbc:	ldr	r1, [sp, #12]
    6cbe:	ldr.w	lr, [r0]
    6cc2:	str.w	ip, [sp]
    6cc6:	ldr.w	r4, [lr, #48]	; 0x30
    6cca:	blx	r4
            disk_pos=0;
    6ccc:	ldr	r2, [sp, #16]
    6cce:	mov	r3, r6
    6cd0:	movs	r6, #0
    6cd2:	str.w	r2, [r9]
    6cd6:	b.n	6c5c <MTPD::GetPartialObject(unsigned long, unsigned long, unsigned long)+0x68>

#elif defined(__IMXRT1062__)  

    int MTPD::push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    6cd8:	movs	r2, #60	; 0x3c
    6cda:	mov.w	r1, #512	; 0x200
    6cde:	mov	r0, r8
    6ce0:	bl	f168 <usb_mtp_send>
    6ce4:	cmp	r0, #0
    6ce6:	ble.n	6cd8 <MTPD::GetPartialObject(unsigned long, unsigned long, unsigned long)+0xe4>
      { 
        uint32_t pos = offset; // into data
        uint32_t len = sizeof(MTPHeader);

        disk_pos=DISK_BUFFER_SIZE;
        while(pos<size)
    6ce8:	cmp	sl, r7
          pos += to_copy;
          len += to_copy;

          if(len==MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            len=0;
    6cea:	mov.w	r5, #0
      { 
        uint32_t pos = offset; // into data
        uint32_t len = sizeof(MTPHeader);

        disk_pos=DISK_BUFFER_SIZE;
        while(pos<size)
    6cee:	bhi.n	6c96 <MTPD::GetPartialObject(unsigned long, unsigned long, unsigned long)+0xa2>
    6cf0:	mov	r6, r8
          if(len==MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            len=0;
          }
        }
        if(len>0)
    6cf2:	cbz	r5, 6d04 <MTPD::GetPartialObject(unsigned long, unsigned long, unsigned long)+0x110>

#elif defined(__IMXRT1062__)  

    int MTPD::push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    6cf4:	movs	r2, #60	; 0x3c
    6cf6:	mov.w	r1, #512	; 0x200
    6cfa:	mov	r0, r6
    6cfc:	bl	f168 <usb_mtp_send>
    6d00:	cmp	r0, #0
    6d02:	ble.n	6cf4 <MTPD::GetPartialObject(unsigned long, unsigned long, unsigned long)+0x100>
        { push_packet(tx_data_buffer,MTP_TX_SIZE);
          len=0;
        }
      }
      return size;
    }
    6d04:	mov	r0, sl
    6d06:	add	sp, #28
    6d08:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      size -= offset;
      if(NumBytes == 0xffffffff) NumBytes=size;
      if (NumBytes<size) size=NumBytes;

      if (write_get_length_) {
        write_length_ += size;
    6d0c:	movw	r2, #9256	; 0x2428
        { push_packet(tx_data_buffer,MTP_TX_SIZE);
          len=0;
        }
      }
      return size;
    }
    6d10:	mov	r0, sl
      size -= offset;
      if(NumBytes == 0xffffffff) NumBytes=size;
      if (NumBytes<size) size=NumBytes;

      if (write_get_length_) {
        write_length_ += size;
    6d12:	ldr.w	r3, [fp, r2]
    6d16:	add	r3, sl
    6d18:	str.w	r3, [fp, r2]
        { push_packet(tx_data_buffer,MTP_TX_SIZE);
          len=0;
        }
      }
      return size;
    }
    6d1c:	add	sp, #28
    6d1e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    }
    uint32_t MTPD::GetPartialObject(uint32_t object_id, uint32_t offset, uint32_t NumBytes) 
    {
      uint32_t size = storage_->GetSize(object_id);

      size -= offset;
    6d22:	mov	sl, r0
    6d24:	b.n	6c1a <MTPD::GetPartialObject(unsigned long, unsigned long, unsigned long)+0x26>
    6d26:	add.w	r6, fp, #544	; 0x220
    6d2a:	b.n	6cf4 <MTPD::GetPartialObject(unsigned long, unsigned long, unsigned long)+0x100>

00006d2c <MTPD::read(char*, unsigned long)>:
    printf("\r\n"); \
    }


    void MTPD::read(char* data, uint32_t size) 
    {
    6d2c:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      static int index=0;
      if(!size) 
    6d30:	cbz	r2, 6d8e <MTPD::read(char*, unsigned long)+0x62>
    6d32:	ldr.w	fp, [pc, #100]	; 6d98 <MTPD::read(char*, unsigned long)+0x6c>
    6d36:	mov	r8, r0
    6d38:	mov	r6, r1
    6d3a:	mov	r5, r2

      while (size) {
        uint32_t to_copy = MTP_RX_SIZE - index;
        to_copy = min(to_copy, size);
        if (data) {
          memcpy(data, rx_data_buffer + index, to_copy);
    6d3c:	add.w	r7, r0, #32
          data += to_copy;
        }
        size -= to_copy;
        index += to_copy;
    6d40:	mov	r9, fp
        index=0;
        return;
      }

      while (size) {
        uint32_t to_copy = MTP_RX_SIZE - index;
    6d42:	ldr.w	sl, [fp]
        to_copy = min(to_copy, size);
        if (data) {
          memcpy(data, rx_data_buffer + index, to_copy);
    6d46:	mov	r0, r6
        index=0;
        return;
      }

      while (size) {
        uint32_t to_copy = MTP_RX_SIZE - index;
    6d48:	rsb	r4, sl, #512	; 0x200
        to_copy = min(to_copy, size);
        if (data) {
          memcpy(data, rx_data_buffer + index, to_copy);
    6d4c:	add.w	r1, r7, sl
    6d50:	cmp	r4, r5
    6d52:	it	cs
    6d54:	movcs	r4, r5
      }

      while (size) {
        uint32_t to_copy = MTP_RX_SIZE - index;
        to_copy = min(to_copy, size);
        if (data) {
    6d56:	cbz	r6, 6d60 <MTPD::read(char*, unsigned long)+0x34>
          memcpy(data, rx_data_buffer + index, to_copy);
    6d58:	mov	r2, r4
          data += to_copy;
    6d5a:	add	r6, r4

      while (size) {
        uint32_t to_copy = MTP_RX_SIZE - index;
        to_copy = min(to_copy, size);
        if (data) {
          memcpy(data, rx_data_buffer + index, to_copy);
    6d5c:	bl	d064 <memcpy>
          data += to_copy;
        }
        size -= to_copy;
        index += to_copy;
    6d60:	add.w	r3, r4, sl
        to_copy = min(to_copy, size);
        if (data) {
          memcpy(data, rx_data_buffer + index, to_copy);
          data += to_copy;
        }
        size -= to_copy;
    6d64:	subs	r4, r5, r4
        index += to_copy;
        if (index == MTP_RX_SIZE) {
    6d66:	cmp.w	r3, #512	; 0x200
        if (data) {
          memcpy(data, rx_data_buffer + index, to_copy);
          data += to_copy;
        }
        size -= to_copy;
        index += to_copy;
    6d6a:	str.w	r3, [fp]
      {
        index=0;
        return;
      }

      while (size) {
    6d6e:	mov	r5, r4
          memcpy(data, rx_data_buffer + index, to_copy);
          data += to_copy;
        }
        size -= to_copy;
        index += to_copy;
        if (index == MTP_RX_SIZE) {
    6d70:	beq.n	6d7a <MTPD::read(char*, unsigned long)+0x4e>
      {
        index=0;
        return;
      }

      while (size) {
    6d72:	cmp	r4, #0
    6d74:	bne.n	6d42 <MTPD::read(char*, unsigned long)+0x16>
    6d76:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
          data += to_copy;
        }
        size -= to_copy;
        index += to_copy;
        if (index == MTP_RX_SIZE) {
          pull_packet(rx_data_buffer);
    6d7a:	mov	r1, r7
    6d7c:	mov	r0, r8
    6d7e:	bl	6ac0 <MTPD::pull_packet(unsigned char*)>
          index=0;
    6d82:	movs	r3, #0
    6d84:	str.w	r3, [r9]
      {
        index=0;
        return;
      }

      while (size) {
    6d88:	cmp	r4, #0
    6d8a:	bne.n	6d42 <MTPD::read(char*, unsigned long)+0x16>
    6d8c:	b.n	6d76 <MTPD::read(char*, unsigned long)+0x4a>
    void MTPD::read(char* data, uint32_t size) 
    {
      static int index=0;
      if(!size) 
      {
        index=0;
    6d8e:	ldr	r3, [pc, #8]	; (6d98 <MTPD::read(char*, unsigned long)+0x6c>)
    6d90:	str	r2, [r3, #0]
        return;
    6d92:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6d96:	nop
    6d98:	.word	0x20005b1c

00006d9c <MTPD::readstring(char*)>:

  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
  uint32_t MTPD::read32() { uint32_t ret; read((char*)&ret, sizeof(ret)); return ret; }

  void MTPD::readstring(char* buffer) {
    6d9c:	push	{r4, r5, r6, lr}
    6d9e:	sub	sp, #8
    6da0:	mov	r4, r1
      return header.len - 12;
    else
      return 0;
  }

  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
    6da2:	movs	r2, #1
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
  uint32_t MTPD::read32() { uint32_t ret; read((char*)&ret, sizeof(ret)); return ret; }

  void MTPD::readstring(char* buffer) {
    6da4:	mov	r6, r0
      return header.len - 12;
    else
      return 0;
  }

  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
    6da6:	add.w	r1, sp, #6
    6daa:	bl	6d2c <MTPD::read(char*, unsigned long)>
    6dae:	ldrb.w	r2, [sp, #6]
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
  uint32_t MTPD::read32() { uint32_t ret; read((char*)&ret, sizeof(ret)); return ret; }

  void MTPD::readstring(char* buffer) {
    int len = read8();
    if (!buffer) {
    6db2:	cbz	r4, 6dd4 <MTPD::readstring(char*)+0x38>
      read(NULL, len * 2);
    } else {
      for (int i = 0; i < len; i++) {
    6db4:	cbz	r2, 6dd0 <MTPD::readstring(char*)+0x34>
    6db6:	adds	r5, r4, r2
    else
      return 0;
  }

  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    6db8:	movs	r2, #2
    6dba:	add.w	r1, sp, #6
    6dbe:	mov	r0, r6
    6dc0:	bl	6d2c <MTPD::read(char*, unsigned long)>
    6dc4:	ldrh.w	r3, [sp, #6]
    if (!buffer) {
      read(NULL, len * 2);
    } else {
      for (int i = 0; i < len; i++) {
        int16_t c2;
        *(buffer++) = c2 = read16();
    6dc8:	strb.w	r3, [r4], #1
  void MTPD::readstring(char* buffer) {
    int len = read8();
    if (!buffer) {
      read(NULL, len * 2);
    } else {
      for (int i = 0; i < len; i++) {
    6dcc:	cmp	r5, r4
    6dce:	bne.n	6db8 <MTPD::readstring(char*)+0x1c>
        int16_t c2;
        *(buffer++) = c2 = read16();
      }
    }
  }
    6dd0:	add	sp, #8
    6dd2:	pop	{r4, r5, r6, pc}
  uint32_t MTPD::read32() { uint32_t ret; read((char*)&ret, sizeof(ret)); return ret; }

  void MTPD::readstring(char* buffer) {
    int len = read8();
    if (!buffer) {
      read(NULL, len * 2);
    6dd4:	lsls	r2, r2, #1
    6dd6:	mov	r1, r4
    6dd8:	mov	r0, r6
    6dda:	bl	6d2c <MTPD::read(char*, unsigned long)>
    6dde:	b.n	6dd0 <MTPD::readstring(char*)+0x34>

00006de0 <MTPD::setObjectPropValue(unsigned long, unsigned long) [clone .part.6]>:
      }
      storage_->close();
      return true;
    }

    uint32_t MTPD::setObjectPropValue(uint32_t handle, uint32_t p2)
    6de0:	push	{r4, r5, lr}
    6de2:	sub	sp, #260	; 0x104
    6de4:	mov	r4, r0
    6de6:	mov	r5, r1
  }

  uint32_t MTPD::ReadMTPHeader() 
  {
    MTPHeader header;
    read((char *)&header, sizeof(MTPHeader));
    6de8:	movs	r2, #12
    6dea:	mov	r1, sp
    6dec:	bl	6d2c <MTPD::read(char*, unsigned long)>
         
      if(p2==0xDC07)
      { 
        char filename[MAX_FILENAME_LEN]; 
        ReadMTPHeader();
        readstring(filename);
    6df0:	mov	r1, sp
    6df2:	mov	r0, r4
    6df4:	bl	6d9c <MTPD::readstring(char*)>
        if(storage_->rename(handle,filename)) return 0x2001; else return 0x2005;
    6df8:	ldr	r0, [r4, #0]
    6dfa:	mov	r2, sp
    6dfc:	mov	r1, r5
    6dfe:	ldr	r3, [r0, #0]
    6e00:	ldr	r3, [r3, #72]	; 0x48
    6e02:	blx	r3
    6e04:	movw	r2, #8193	; 0x2001
    6e08:	movw	r3, #8197	; 0x2005
      }
      else
        return 0x2005;
    }
    6e0c:	cmp	r0, #0
    6e0e:	ite	ne
    6e10:	movne	r0, r2
    6e12:	moveq	r0, r3
    6e14:	add	sp, #260	; 0x104
    6e16:	pop	{r4, r5, pc}

00006e18 <MTPD::SendObjectInfo(unsigned long, unsigned long)>:
          index=0;
        }
      }
    }

    uint32_t MTPD::SendObjectInfo(uint32_t storage, uint32_t parent) {
    6e18:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6e1c:	mov	r9, r1
    6e1e:	sub	sp, #284	; 0x11c
    6e20:	mov	r4, r0
      pull_packet(rx_data_buffer);
    6e22:	add.w	r1, r0, #32
      read(0,0); // resync read
//      printContainer(); 
      uint32_t store = Storage2Store(storage);
    6e26:	add.w	r3, r9, #4294967295
  }

  uint32_t MTPD::ReadMTPHeader() 
  {
    MTPHeader header;
    read((char *)&header, sizeof(MTPHeader));
    6e2a:	add	r6, sp, #24
          index=0;
        }
      }
    }

    uint32_t MTPD::SendObjectInfo(uint32_t storage, uint32_t parent) {
    6e2c:	mov	fp, r2
    void MTPD::read(char* data, uint32_t size) 
    {
      static int index=0;
      if(!size) 
      {
        index=0;
    6e2e:	movs	r5, #0

    uint32_t MTPD::SendObjectInfo(uint32_t storage, uint32_t parent) {
      pull_packet(rx_data_buffer);
      read(0,0); // resync read
//      printContainer(); 
      uint32_t store = Storage2Store(storage);
    6e30:	str	r3, [sp, #12]
        }
      }
    }

    uint32_t MTPD::SendObjectInfo(uint32_t storage, uint32_t parent) {
      pull_packet(rx_data_buffer);
    6e32:	bl	6ac0 <MTPD::pull_packet(unsigned char*)>
    void MTPD::read(char* data, uint32_t size) 
    {
      static int index=0;
      if(!size) 
      {
        index=0;
    6e36:	ldr	r3, [pc, #308]	; (6f6c <MTPD::SendObjectInfo(unsigned long, unsigned long)+0x154>)
  }

  uint32_t MTPD::ReadMTPHeader() 
  {
    MTPHeader header;
    read((char *)&header, sizeof(MTPHeader));
    6e38:	mov	r0, r4
    6e3a:	mov	r1, r6
    6e3c:	movs	r2, #12
    void MTPD::read(char* data, uint32_t size) 
    {
      static int index=0;
      if(!size) 
      {
        index=0;
    6e3e:	str	r5, [r3, #0]
  }

  uint32_t MTPD::ReadMTPHeader() 
  {
    MTPHeader header;
    read((char *)&header, sizeof(MTPHeader));
    6e40:	bl	6d2c <MTPD::read(char*, unsigned long)>
    // check that the type is data
    if(header.type==2)
    6e44:	ldrh	r3, [r6, #4]
    6e46:	cmp	r3, #2
    6e48:	beq.w	6f64 <MTPD::SendObjectInfo(unsigned long, unsigned long)+0x14c>
    6e4c:	mvn.w	r5, #51	; 0x33
      return 0;
  }

  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
  uint32_t MTPD::read32() { uint32_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    6e50:	movs	r2, #4
    6e52:	mov	r1, r6
    6e54:	mov	r0, r4
    6e56:	bl	6d2c <MTPD::read(char*, unsigned long)>
    else
      return 0;
  }

  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    6e5a:	movs	r2, #2
    6e5c:	mov	r1, r6
    6e5e:	mov	r0, r4
    6e60:	bl	6d2c <MTPD::read(char*, unsigned long)>

      int len=ReadMTPHeader();
      char filename[MAX_FILENAME_LEN];

      read32(); len -=4; // storage
      bool dir = (read16() == 0x3001); len -=2; // format
    6e64:	movw	r3, #12289	; 0x3001
    else
      return 0;
  }

  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    6e68:	ldrh.w	sl, [r6]
    6e6c:	movs	r2, #2
    6e6e:	mov	r1, r6
    6e70:	mov	r0, r4

      int len=ReadMTPHeader();
      char filename[MAX_FILENAME_LEN];

      read32(); len -=4; // storage
      bool dir = (read16() == 0x3001); len -=2; // format
    6e72:	rsb	sl, r3, sl
    else
      return 0;
  }

  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    6e76:	bl	6d2c <MTPD::read(char*, unsigned long)>
  uint32_t MTPD::read32() { uint32_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    6e7a:	movs	r2, #4
    6e7c:	mov	r1, r6
    6e7e:	mov	r0, r4

      int len=ReadMTPHeader();
      char filename[MAX_FILENAME_LEN];

      read32(); len -=4; // storage
      bool dir = (read16() == 0x3001); len -=2; // format
    6e80:	clz	sl, sl
      return 0;
  }

  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
  uint32_t MTPD::read32() { uint32_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    6e84:	bl	6d2c <MTPD::read(char*, unsigned long)>
    else
      return 0;
  }

  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    6e88:	movs	r2, #2
    6e8a:	mov	r1, r6
    6e8c:	mov	r0, r4
    6e8e:	bl	6d2c <MTPD::read(char*, unsigned long)>
  uint32_t MTPD::read32() { uint32_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    6e92:	movs	r2, #4
    6e94:	mov	r1, r6
    6e96:	mov	r0, r4
    6e98:	bl	6d2c <MTPD::read(char*, unsigned long)>
    6e9c:	movs	r2, #4
    6e9e:	mov	r1, r6
    6ea0:	mov	r0, r4
    6ea2:	bl	6d2c <MTPD::read(char*, unsigned long)>
    6ea6:	movs	r2, #4
    6ea8:	mov	r1, r6
    6eaa:	mov	r0, r4
    6eac:	bl	6d2c <MTPD::read(char*, unsigned long)>
    6eb0:	movs	r2, #4
    6eb2:	mov	r1, r6
    6eb4:	mov	r0, r4
    6eb6:	bl	6d2c <MTPD::read(char*, unsigned long)>
    6eba:	movs	r2, #4
    6ebc:	mov	r1, r6
    6ebe:	mov	r0, r4
    6ec0:	bl	6d2c <MTPD::read(char*, unsigned long)>
    6ec4:	movs	r2, #4
    6ec6:	mov	r1, r6
    6ec8:	mov	r0, r4
    6eca:	bl	6d2c <MTPD::read(char*, unsigned long)>
    6ece:	movs	r2, #4
    6ed0:	mov	r1, r6
    6ed2:	mov	r0, r4
    6ed4:	bl	6d2c <MTPD::read(char*, unsigned long)>
    else
      return 0;
  }

  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    6ed8:	movs	r2, #2
    6eda:	mov	r1, r6
    6edc:	mov	r0, r4
    6ede:	bl	6d2c <MTPD::read(char*, unsigned long)>
  uint32_t MTPD::read32() { uint32_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    6ee2:	movs	r2, #4
    6ee4:	mov	r1, r6
    6ee6:	mov	r0, r4
    6ee8:	bl	6d2c <MTPD::read(char*, unsigned long)>
    6eec:	movs	r2, #4
    6eee:	mov	r1, r6
    6ef0:	mov	r0, r4
    6ef2:	bl	6d2c <MTPD::read(char*, unsigned long)>
      read32(); len -=4; // bit depth
      read32(); len -=4; // parent
      read16(); len -=2; // association type
      read32(); len -=4; // association description
      read32(); len -=4; // sequence number
      readstring(filename); len -= (2*(strlen(filename)+1)+1); 
    6ef6:	mov	r1, r6
    6ef8:	mov	r0, r4

      int len=ReadMTPHeader();
      char filename[MAX_FILENAME_LEN];

      read32(); len -=4; // storage
      bool dir = (read16() == 0x3001); len -=2; // format
    6efa:	mov.w	sl, sl, lsr #5
      read32(); len -=4; // bit depth
      read32(); len -=4; // parent
      read16(); len -=2; // association type
      read32(); len -=4; // association description
      read32(); len -=4; // sequence number
      readstring(filename); len -= (2*(strlen(filename)+1)+1); 
    6efe:	bl	6d9c <MTPD::readstring(char*)>
    6f02:	mov	r0, r6
    6f04:	bl	113c0 <strlen>
    6f08:	adds	r0, #1
    6f0a:	sub.w	r8, r5, r0, lsl #1
    6f0e:	add.w	r5, r8, #4294967295
      // ignore rest of ObjectInfo
      while(len>=4) { read32(); len-=4;}
    6f12:	cmp	r5, #3
    6f14:	ble.n	6f3c <MTPD::SendObjectInfo(unsigned long, unsigned long)+0x124>
    6f16:	mov	r9, r5
    6f18:	add	r7, sp, #20
    6f1a:	sub.w	r9, r9, #4
      return 0;
  }

  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
  uint32_t MTPD::read32() { uint32_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    6f1e:	movs	r2, #4
    6f20:	mov	r1, r7
    6f22:	mov	r0, r4
    6f24:	bl	6d2c <MTPD::read(char*, unsigned long)>
      read16(); len -=2; // association type
      read32(); len -=4; // association description
      read32(); len -=4; // sequence number
      readstring(filename); len -= (2*(strlen(filename)+1)+1); 
      // ignore rest of ObjectInfo
      while(len>=4) { read32(); len-=4;}
    6f28:	cmp.w	r9, #3
    6f2c:	bgt.n	6f1a <MTPD::SendObjectInfo(unsigned long, unsigned long)+0x102>
    6f2e:	sub.w	r8, r8, #5
    6f32:	subs	r5, #4
    6f34:	bic.w	r8, r8, #3
    6f38:	rsb	r5, r8, r5
      while(len) {read8(); len--;}
    6f3c:	cbz	r5, 6f4e <MTPD::SendObjectInfo(unsigned long, unsigned long)+0x136>
    6f3e:	add	r7, sp, #20
      return header.len - 12;
    else
      return 0;
  }

  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
    6f40:	movs	r2, #1
    6f42:	mov	r1, r7
    6f44:	mov	r0, r4
    6f46:	bl	6d2c <MTPD::read(char*, unsigned long)>
      read32(); len -=4; // association description
      read32(); len -=4; // sequence number
      readstring(filename); len -= (2*(strlen(filename)+1)+1); 
      // ignore rest of ObjectInfo
      while(len>=4) { read32(); len-=4;}
      while(len) {read8(); len--;}
    6f4a:	subs	r5, #1
    6f4c:	bne.n	6f40 <MTPD::SendObjectInfo(unsigned long, unsigned long)+0x128>

      return storage_->Create(store, parent, dir, filename);
    6f4e:	ldr	r0, [r4, #0]
    6f50:	mov	r3, sl
    6f52:	mov	r2, fp
    6f54:	ldr	r1, [sp, #12]
    6f56:	ldr	r4, [r0, #0]
    6f58:	str	r6, [sp, #0]
    6f5a:	ldr	r4, [r4, #44]	; 0x2c
    6f5c:	blx	r4
    }
    6f5e:	add	sp, #284	; 0x11c
    6f60:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6f64:	ldr	r5, [r6, #0]
    6f66:	subs	r5, #64	; 0x40
    6f68:	b.n	6e50 <MTPD::SendObjectInfo(unsigned long, unsigned long)+0x38>
    6f6a:	nop
    6f6c:	.word	0x20005b1c

00006f70 <MTPD::SendObject()>:

    bool MTPD::SendObject() 
    { 
    6f70:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      pull_packet(rx_data_buffer);
    6f74:	add.w	sl, r0, #32

      return storage_->Create(store, parent, dir, filename);
    }

    bool MTPD::SendObject() 
    { 
    6f78:	sub	sp, #20
    6f7a:	mov	r9, r0
    void MTPD::read(char* data, uint32_t size) 
    {
      static int index=0;
      if(!size) 
      {
        index=0;
    6f7c:	movs	r4, #0
      return storage_->Create(store, parent, dir, filename);
    }

    bool MTPD::SendObject() 
    { 
      pull_packet(rx_data_buffer);
    6f7e:	mov	r1, sl
    6f80:	bl	6ac0 <MTPD::pull_packet(unsigned char*)>
    void MTPD::read(char* data, uint32_t size) 
    {
      static int index=0;
      if(!size) 
      {
        index=0;
    6f84:	ldr	r3, [pc, #248]	; (7080 <MTPD::SendObject()+0x110>)
  }

  uint32_t MTPD::ReadMTPHeader() 
  {
    MTPHeader header;
    read((char *)&header, sizeof(MTPHeader));
    6f86:	mov	r0, r9
    6f88:	movs	r2, #12
    6f8a:	add	r1, sp, #4
    void MTPD::read(char* data, uint32_t size) 
    {
      static int index=0;
      if(!size) 
      {
        index=0;
    6f8c:	str	r4, [r3, #0]
  }

  uint32_t MTPD::ReadMTPHeader() 
  {
    MTPHeader header;
    read((char *)&header, sizeof(MTPHeader));
    6f8e:	bl	6d2c <MTPD::read(char*, unsigned long)>
    // check that the type is data
    if(header.type==2)
    6f92:	ldrh.w	r3, [sp, #8]
    6f96:	cmp	r3, #2
    6f98:	beq.n	6fb4 <MTPD::SendObject()+0x44>
      read(0,0);
//      printContainer(); 

      uint32_t len = ReadMTPHeader();
      uint32_t index = sizeof(MTPHeader);
      disk_pos=0;
    6f9a:	movw	r3, #9248	; 0x2420
    6f9e:	str.w	r4, [r9, r3]
      //printf("len %d\n",disk_pos);
      if(disk_pos)
      {
        if(storage_->write((const char *)disk_buffer, disk_pos)<disk_pos) return false;
      }
      storage_->close();
    6fa2:	ldr.w	r0, [r9]
    6fa6:	ldr	r3, [r0, #0]
    6fa8:	ldr	r3, [r3, #56]	; 0x38
    6faa:	blx	r3
      return true;
    6fac:	movs	r0, #1
    }
    6fae:	add	sp, #20
    6fb0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  {
    MTPHeader header;
    read((char *)&header, sizeof(MTPHeader));
    // check that the type is data
    if(header.type==2)
      return header.len - 12;
    6fb4:	ldr	r7, [sp, #4]
      read(0,0);
//      printContainer(); 

      uint32_t len = ReadMTPHeader();
      uint32_t index = sizeof(MTPHeader);
      disk_pos=0;
    6fb6:	movw	r3, #9248	; 0x2420
  {
    MTPHeader header;
    read((char *)&header, sizeof(MTPHeader));
    // check that the type is data
    if(header.type==2)
      return header.len - 12;
    6fba:	subs	r7, #12
      read(0,0);
//      printContainer(); 

      uint32_t len = ReadMTPHeader();
      uint32_t index = sizeof(MTPHeader);
      disk_pos=0;
    6fbc:	str.w	r4, [r9, r3]
      
      while((int)len>0)
    6fc0:	cmp	r7, r4
    6fc2:	ble.n	6fa2 <MTPD::SendObject()+0x32>
    6fc4:	movw	r8, #9248	; 0x2420
    6fc8:	mov	r0, r4
    6fca:	add.w	fp, r9, #1056	; 0x420
    6fce:	movs	r5, #12
    6fd0:	add	r8, r9
      { uint32_t bytes = MTP_RX_SIZE - index;                     // how many data in usb-packet
    6fd2:	rsb	r4, r5, #512	; 0x200
    6fd6:	rsb	r6, r0, #8192	; 0x2000
        bytes = min(bytes,len);                                   // loimit at end
        uint32_t to_copy=min(bytes, DISK_BUFFER_SIZE-disk_pos);   // how many data to copy to disk buffer
        memcpy(disk_buffer+disk_pos, rx_data_buffer + index,to_copy);
    6fda:	add.w	r1, sl, r5
    6fde:	add	r0, fp
    6fe0:	cmp	r4, r7
    6fe2:	it	cs
    6fe4:	movcs	r4, r7
    6fe6:	cmp	r6, r4
    6fe8:	it	cs
    6fea:	movcs	r6, r4
    6fec:	mov	r2, r6
        disk_pos += to_copy;
        bytes -= to_copy;
        len -= to_copy;
    6fee:	subs	r7, r7, r6
      
      while((int)len>0)
      { uint32_t bytes = MTP_RX_SIZE - index;                     // how many data in usb-packet
        bytes = min(bytes,len);                                   // loimit at end
        uint32_t to_copy=min(bytes, DISK_BUFFER_SIZE-disk_pos);   // how many data to copy to disk buffer
        memcpy(disk_buffer+disk_pos, rx_data_buffer + index,to_copy);
    6ff0:	bl	d064 <memcpy>
        disk_pos += to_copy;
    6ff4:	ldr.w	r2, [r8]
    6ff8:	add	r2, r6
        bytes -= to_copy;
        len -= to_copy;
        //printf("a %d %d %d %d %d\n", len,disk_pos,bytes,index,to_copy);
        //
        if(disk_pos==DISK_BUFFER_SIZE)
    6ffa:	cmp.w	r2, #8192	; 0x2000
      while((int)len>0)
      { uint32_t bytes = MTP_RX_SIZE - index;                     // how many data in usb-packet
        bytes = min(bytes,len);                                   // loimit at end
        uint32_t to_copy=min(bytes, DISK_BUFFER_SIZE-disk_pos);   // how many data to copy to disk buffer
        memcpy(disk_buffer+disk_pos, rx_data_buffer + index,to_copy);
        disk_pos += to_copy;
    6ffe:	str.w	r2, [r8]
        bytes -= to_copy;
        len -= to_copy;
        //printf("a %d %d %d %d %d\n", len,disk_pos,bytes,index,to_copy);
        //
        if(disk_pos==DISK_BUFFER_SIZE)
    7002:	beq.n	7032 <MTPD::SendObject()+0xc2>
            disk_pos += bytes;
            len -= bytes;
          }
          //printf("b %d %d %d %d %d\n", len,disk_pos,bytes,index,to_copy);
        }
        if(len>0)  // we have still data to be transfered
    7004:	cbnz	r7, 706a <MTPD::SendObject()+0xfa>
    7006:	movw	r3, #9248	; 0x2420
    700a:	ldr.w	r2, [r9, r3]
        { pull_packet(rx_data_buffer);
          index=0;
        }
      }
      //printf("len %d\n",disk_pos);
      if(disk_pos)
    700e:	cmp	r2, #0
    7010:	beq.n	6fa2 <MTPD::SendObject()+0x32>
      {
        if(storage_->write((const char *)disk_buffer, disk_pos)<disk_pos) return false;
    7012:	ldr.w	r0, [r9]
    7016:	mov	r1, fp
    7018:	ldr	r3, [r0, #0]
    701a:	ldr	r3, [r3, #52]	; 0x34
    701c:	blx	r3
    701e:	movw	r3, #9248	; 0x2420
    7022:	ldr.w	r3, [r9, r3]
    7026:	cmp	r0, r3
    7028:	bcs.n	6fa2 <MTPD::SendObject()+0x32>
        len -= to_copy;
        //printf("a %d %d %d %d %d\n", len,disk_pos,bytes,index,to_copy);
        //
        if(disk_pos==DISK_BUFFER_SIZE)
        {
          if(storage_->write((const char *)disk_buffer, DISK_BUFFER_SIZE)<DISK_BUFFER_SIZE) return false;
    702a:	movs	r0, #0
      {
        if(storage_->write((const char *)disk_buffer, disk_pos)<disk_pos) return false;
      }
      storage_->close();
      return true;
    }
    702c:	add	sp, #20
    702e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        len -= to_copy;
        //printf("a %d %d %d %d %d\n", len,disk_pos,bytes,index,to_copy);
        //
        if(disk_pos==DISK_BUFFER_SIZE)
        {
          if(storage_->write((const char *)disk_buffer, DISK_BUFFER_SIZE)<DISK_BUFFER_SIZE) return false;
    7032:	ldr.w	r0, [r9]
    7036:	mov	r1, fp
    7038:	ldr	r3, [r0, #0]
    703a:	ldr	r3, [r3, #52]	; 0x34
    703c:	blx	r3
    703e:	cmp.w	r0, #8192	; 0x2000
    7042:	bcc.n	702a <MTPD::SendObject()+0xba>
          disk_pos =0;
    7044:	movs	r3, #0

          if(bytes) // we have still data in transfer buffer, copy to initial disk_buffer
    7046:	subs	r4, r4, r6
        //printf("a %d %d %d %d %d\n", len,disk_pos,bytes,index,to_copy);
        //
        if(disk_pos==DISK_BUFFER_SIZE)
        {
          if(storage_->write((const char *)disk_buffer, DISK_BUFFER_SIZE)<DISK_BUFFER_SIZE) return false;
          disk_pos =0;
    7048:	str.w	r3, [r8]

          if(bytes) // we have still data in transfer buffer, copy to initial disk_buffer
    704c:	beq.n	7004 <MTPD::SendObject()+0x94>
          {
            memcpy(disk_buffer,rx_data_buffer+index+to_copy,bytes);
    704e:	adds	r1, r6, r5
    7050:	mov	r2, r4
    7052:	mov	r0, fp
            disk_pos += bytes;
            len -= bytes;
    7054:	subs	r7, r7, r4
          if(storage_->write((const char *)disk_buffer, DISK_BUFFER_SIZE)<DISK_BUFFER_SIZE) return false;
          disk_pos =0;

          if(bytes) // we have still data in transfer buffer, copy to initial disk_buffer
          {
            memcpy(disk_buffer,rx_data_buffer+index+to_copy,bytes);
    7056:	add	r1, sl
    7058:	bl	d064 <memcpy>
            disk_pos += bytes;
    705c:	ldr.w	r3, [r8]
    7060:	add	r4, r3
    7062:	str.w	r4, [r8]
            len -= bytes;
          }
          //printf("b %d %d %d %d %d\n", len,disk_pos,bytes,index,to_copy);
        }
        if(len>0)  // we have still data to be transfered
    7066:	cmp	r7, #0
    7068:	beq.n	7006 <MTPD::SendObject()+0x96>
        { pull_packet(rx_data_buffer);
    706a:	mov	r1, sl
    706c:	mov	r0, r9
    706e:	bl	6ac0 <MTPD::pull_packet(unsigned char*)>

      uint32_t len = ReadMTPHeader();
      uint32_t index = sizeof(MTPHeader);
      disk_pos=0;
      
      while((int)len>0)
    7072:	cmp	r7, #0
          }
          //printf("b %d %d %d %d %d\n", len,disk_pos,bytes,index,to_copy);
        }
        if(len>0)  // we have still data to be transfered
        { pull_packet(rx_data_buffer);
          index=0;
    7074:	mov.w	r5, #0

      uint32_t len = ReadMTPHeader();
      uint32_t index = sizeof(MTPHeader);
      disk_pos=0;
      
      while((int)len>0)
    7078:	ble.n	7006 <MTPD::SendObject()+0x96>
    707a:	ldr.w	r0, [r8]
    707e:	b.n	6fd2 <MTPD::SendObject()+0x62>
    7080:	.word	0x20005b1c

00007084 <MTPD::setObjectPropValue(unsigned long, unsigned long)>:
      storage_->close();
      return true;
    }

    uint32_t MTPD::setObjectPropValue(uint32_t handle, uint32_t p2)
    { pull_packet(rx_data_buffer);
    7084:	push	{r4, r5, r6, lr}
    7086:	mov	r6, r1
    7088:	add.w	r1, r0, #32
    708c:	mov	r5, r2
    708e:	mov	r4, r0
    7090:	bl	6ac0 <MTPD::pull_packet(unsigned char*)>
      read(0,0);
      //printContainer(); 
         
      if(p2==0xDC07)
    7094:	movw	r3, #56327	; 0xdc07
    void MTPD::read(char* data, uint32_t size) 
    {
      static int index=0;
      if(!size) 
      {
        index=0;
    7098:	ldr	r2, [pc, #24]	; (70b4 <MTPD::setObjectPropValue(unsigned long, unsigned long)+0x30>)
    709a:	movs	r1, #0
    uint32_t MTPD::setObjectPropValue(uint32_t handle, uint32_t p2)
    { pull_packet(rx_data_buffer);
      read(0,0);
      //printContainer(); 
         
      if(p2==0xDC07)
    709c:	cmp	r5, r3
    void MTPD::read(char* data, uint32_t size) 
    {
      static int index=0;
      if(!size) 
      {
        index=0;
    709e:	str	r1, [r2, #0]
    uint32_t MTPD::setObjectPropValue(uint32_t handle, uint32_t p2)
    { pull_packet(rx_data_buffer);
      read(0,0);
      //printContainer(); 
         
      if(p2==0xDC07)
    70a0:	beq.n	70a8 <MTPD::setObjectPropValue(unsigned long, unsigned long)+0x24>
        readstring(filename);
        if(storage_->rename(handle,filename)) return 0x2001; else return 0x2005;
      }
      else
        return 0x2005;
    }
    70a2:	movw	r0, #8197	; 0x2005
    70a6:	pop	{r4, r5, r6, pc}
    70a8:	mov	r1, r6
    70aa:	mov	r0, r4
    70ac:	ldmia.w	sp!, {r4, r5, r6, lr}
    70b0:	b.w	6de0 <MTPD::setObjectPropValue(unsigned long, unsigned long) [clone .part.6]>
    70b4:	.word	0x20005b1c

000070b8 <MTPD::loop()>:

    void MTPD::loop(void)
    { if(!usb_mtp_available()) return;
    70b8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    70bc:	sub	sp, #52	; 0x34
    70be:	mov	r4, r0
    70c0:	bl	f234 <usb_mtp_available>
    70c4:	cbnz	r0, 70cc <MTPD::loop()+0x14>

            memcpy(tx_data_buffer,rx_data_buffer,len);
            push_packet(tx_data_buffer,len); // for acknowledge use rx_data_buffer
        }
      }
    }
    70c6:	add	sp, #52	; 0x34
    70c8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return 0x2005;
    }

    void MTPD::loop(void)
    { if(!usb_mtp_available()) return;
      if(fetch_packet(rx_data_buffer))
    70cc:	add.w	r7, r4, #32
      return usb_mtp_recv(data_buffer,60);
    }

    int MTPD::fetch_packet(uint8_t *data_buffer)
    {
      return usb_mtp_recv(data_buffer,60);
    70d0:	movs	r1, #60	; 0x3c
    70d2:	mov	r0, r7
    70d4:	bl	f0b8 <usb_mtp_recv>
        return 0x2005;
    }

    void MTPD::loop(void)
    { if(!usb_mtp_available()) return;
      if(fetch_packet(rx_data_buffer))
    70d8:	cmp	r0, #0
    70da:	beq.n	70c6 <MTPD::loop()+0xe>
      { printContainer(); // to switch on set debug to 1 at beginning of file
    70dc:	ldr	r0, [r4, #40]	; 0x28
    70de:	ldrh	r1, [r4, #36]	; 0x24
    70e0:	ldr	r3, [r4, #32]
    70e2:	ldrh	r2, [r4, #38]	; 0x26
    70e4:	str	r0, [sp, #4]
    70e6:	str	r1, [sp, #0]
    70e8:	ldr	r0, [pc, #740]	; (73d0 <MTPD::loop()+0x318>)
    70ea:	ldr	r1, [pc, #744]	; (73d4 <MTPD::loop()+0x31c>)
    70ec:	bl	f5ec <Print::printf(char const*, ...)>
    70f0:	ldr	r3, [r4, #32]
    70f2:	cmp	r3, #12
    70f4:	bhi.w	7304 <MTPD::loop()+0x24c>
    70f8:	ldr	r1, [pc, #732]	; (73d8 <MTPD::loop()+0x320>)
        int id = CONTAINER->transaction_id;
        int len= CONTAINER->len;
        int typ= CONTAINER->type;
        TID=id;

        int return_code =0x2001; //OK use as default value
    70fa:	movw	sl, #8197	; 0x2005
    }

    void MTPD::loop(void)
    { if(!usb_mtp_available()) return;
      if(fetch_packet(rx_data_buffer))
      { printContainer(); // to switch on set debug to 1 at beginning of file
    70fe:	ldr	r0, [pc, #720]	; (73d0 <MTPD::loop()+0x318>)
        int id = CONTAINER->transaction_id;
        int len= CONTAINER->len;
        int typ= CONTAINER->type;
        TID=id;

        int return_code =0x2001; //OK use as default value
    7100:	movw	fp, #8193	; 0x2001
    }

    void MTPD::loop(void)
    { if(!usb_mtp_available()) return;
      if(fetch_packet(rx_data_buffer))
      { printContainer(); // to switch on set debug to 1 at beginning of file
    7104:	bl	f5ec <Print::printf(char const*, ...)>
        int p2 = CONTAINER->params[1];
        int p3 = CONTAINER->params[2];
        int id = CONTAINER->transaction_id;
        int len= CONTAINER->len;
        int typ= CONTAINER->type;
        TID=id;
    7108:	movw	r1, #9260	; 0x242c
        int p1 = CONTAINER->params[0];
        int p2 = CONTAINER->params[1];
        int p3 = CONTAINER->params[2];
        int id = CONTAINER->transaction_id;
        int len= CONTAINER->len;
        int typ= CONTAINER->type;
    710c:	ldrh	r0, [r4, #36]	; 0x24

        int return_code =0x2001; //OK use as default value

        if(typ==2) return_code=0x2005; // we should only get cmds

        switch (op)
    710e:	movw	r2, #4108	; 0x100c

        int op = CONTAINER->op;
        int p1 = CONTAINER->params[0];
        int p2 = CONTAINER->params[1];
        int p3 = CONTAINER->params[2];
        int id = CONTAINER->transaction_id;
    7112:	ldr.w	r8, [r4, #40]	; 0x28
    void MTPD::loop(void)
    { if(!usb_mtp_available()) return;
      if(fetch_packet(rx_data_buffer))
      { printContainer(); // to switch on set debug to 1 at beginning of file

        int op = CONTAINER->op;
    7116:	ldrh	r3, [r4, #38]	; 0x26
        int p2 = CONTAINER->params[1];
        int p3 = CONTAINER->params[2];
        int id = CONTAINER->transaction_id;
        int len= CONTAINER->len;
        int typ= CONTAINER->type;
        TID=id;
    7118:	str.w	r8, [r4, r1]

        int return_code =0x2001; //OK use as default value
    711c:	cmp	r0, #2
    711e:	ite	eq
    7120:	moveq	r1, sl
    7122:	movne	r1, fp

        if(typ==2) return_code=0x2005; // we should only get cmds

        switch (op)
    7124:	cmp	r3, r2
    { if(!usb_mtp_available()) return;
      if(fetch_packet(rx_data_buffer))
      { printContainer(); // to switch on set debug to 1 at beginning of file

        int op = CONTAINER->op;
        int p1 = CONTAINER->params[0];
    7126:	ldr.w	r9, [r4, #44]	; 0x2c
        int id = CONTAINER->transaction_id;
        int len= CONTAINER->len;
        int typ= CONTAINER->type;
        TID=id;

        int return_code =0x2001; //OK use as default value
    712a:	str	r1, [sp, #8]
      if(fetch_packet(rx_data_buffer))
      { printContainer(); // to switch on set debug to 1 at beginning of file

        int op = CONTAINER->op;
        int p1 = CONTAINER->params[0];
        int p2 = CONTAINER->params[1];
    712c:	ldr	r1, [r4, #48]	; 0x30
        int p3 = CONTAINER->params[2];
    712e:	ldr	r5, [r4, #52]	; 0x34
      if(fetch_packet(rx_data_buffer))
      { printContainer(); // to switch on set debug to 1 at beginning of file

        int op = CONTAINER->op;
        int p1 = CONTAINER->params[0];
        int p2 = CONTAINER->params[1];
    7130:	str	r1, [sp, #12]
        int p3 = CONTAINER->params[2];
        int id = CONTAINER->transaction_id;
        int len= CONTAINER->len;
    7132:	ldr	r6, [r4, #32]

        int return_code =0x2001; //OK use as default value

        if(typ==2) return_code=0x2005; // we should only get cmds

        switch (op)
    7134:	beq.w	76fa <MTPD::loop()+0x642>
    7138:	bhi.n	717c <MTPD::loop()+0xc4>
    713a:	movw	r2, #4101	; 0x1005
    713e:	cmp	r3, r2
    7140:	beq.w	756c <MTPD::loop()+0x4b4>
    7144:	bls.w	7274 <MTPD::loop()+0x1bc>
    7148:	movw	r2, #4104	; 0x1008
    714c:	cmp	r3, r2
    714e:	beq.w	77c0 <MTPD::loop()+0x708>
    7152:	bhi.w	7368 <MTPD::loop()+0x2b0>
    7156:	movw	r2, #4102	; 0x1006
    715a:	cmp	r3, r2
    715c:	beq.w	779e <MTPD::loop()+0x6e6>
    7160:	movw	r2, #4103	; 0x1007
    7164:	cmp	r3, r2
    7166:	bne.w	777e <MTPD::loop()+0x6c6>
                p1 = GetNumObjects(p1, p3);
            }
            break;

          case 0x1007:  // GetObjectHandles
            if (p2) 
    716a:	ldr	r3, [sp, #12]
    716c:	cmp	r3, #0
    716e:	beq.w	78dc <MTPD::loop()+0x824>
    7172:	add.w	r5, r4, #544	; 0x220
          case 0x1009:  // GetObject
            TRANSMIT(GetObject(p1));
            break;

          case 0x100B:  // DeleteObject
              if (p2) {
    7176:	movw	r0, #8212	; 0x2014
    717a:	b.n	71b0 <MTPD::loop()+0xf8>

        int return_code =0x2001; //OK use as default value

        if(typ==2) return_code=0x2005; // we should only get cmds

        switch (op)
    717c:	movw	r2, #4122	; 0x101a
    7180:	cmp	r3, r2
    7182:	beq.w	75e2 <MTPD::loop()+0x52a>
    7186:	bhi.n	71da <MTPD::loop()+0x122>
    7188:	movw	r2, #4116	; 0x1014
    718c:	cmp	r3, r2
    718e:	beq.w	771a <MTPD::loop()+0x662>
    7192:	bhi.w	7334 <MTPD::loop()+0x27c>
    7196:	movw	r2, #4109	; 0x100d
    719a:	cmp	r3, r2
    719c:	beq.w	7788 <MTPD::loop()+0x6d0>
    71a0:	movw	r2, #4112	; 0x1010
    71a4:	cmp	r3, r2
    71a6:	bne.w	777e <MTPD::loop()+0x6c6>
              TRANSMIT(GetDevicePropValue(p1));
              break;

          case 0x1010:  // Reset
              return_code = 0x2005;
              break;
    71aa:	mov	r0, sl
    71ac:	add.w	r5, r4, #544	; 0x220
              return_code = 0x2005;  // operation not supported
              break;
        }
        if(return_code)
        {
            CONTAINER->type=3;
    71b0:	movs	r3, #3
            CONTAINER->len=len;
            CONTAINER->op=return_code;
    71b2:	strh	r0, [r4, #38]	; 0x26
              break;
        }
        if(return_code)
        {
            CONTAINER->type=3;
            CONTAINER->len=len;
    71b4:	str	r6, [r4, #32]
            CONTAINER->params[0]=p1;
            #if DEBUG >1
              printContainer(); // to switch on set debug to 2 at beginning of file
            #endif

            memcpy(tx_data_buffer,rx_data_buffer,len);
    71b6:	mov	r1, r7
        if(return_code)
        {
            CONTAINER->type=3;
            CONTAINER->len=len;
            CONTAINER->op=return_code;
            CONTAINER->transaction_id=id;
    71b8:	str.w	r8, [r4, #40]	; 0x28
            CONTAINER->params[0]=p1;
            #if DEBUG >1
              printContainer(); // to switch on set debug to 2 at beginning of file
            #endif

            memcpy(tx_data_buffer,rx_data_buffer,len);
    71bc:	mov	r2, r6
        {
            CONTAINER->type=3;
            CONTAINER->len=len;
            CONTAINER->op=return_code;
            CONTAINER->transaction_id=id;
            CONTAINER->params[0]=p1;
    71be:	str.w	r9, [r4, #44]	; 0x2c
            #if DEBUG >1
              printContainer(); // to switch on set debug to 2 at beginning of file
            #endif

            memcpy(tx_data_buffer,rx_data_buffer,len);
    71c2:	mov	r0, r5
              return_code = 0x2005;  // operation not supported
              break;
        }
        if(return_code)
        {
            CONTAINER->type=3;
    71c4:	strh	r3, [r4, #36]	; 0x24
            CONTAINER->params[0]=p1;
            #if DEBUG >1
              printContainer(); // to switch on set debug to 2 at beginning of file
            #endif

            memcpy(tx_data_buffer,rx_data_buffer,len);
    71c6:	bl	d064 <memcpy>

#elif defined(__IMXRT1062__)  

    int MTPD::push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    71ca:	movs	r2, #60	; 0x3c
    71cc:	mov	r1, r6
    71ce:	mov	r0, r5
    71d0:	bl	f168 <usb_mtp_send>
    71d4:	cmp	r0, #0
    71d6:	ble.n	71ca <MTPD::loop()+0x112>
    71d8:	b.n	70c6 <MTPD::loop()+0xe>

        int return_code =0x2001; //OK use as default value

        if(typ==2) return_code=0x2005; // we should only get cmds

        switch (op)
    71da:	movw	r2, #38914	; 0x9802
    71de:	cmp	r3, r2
    71e0:	beq.w	7602 <MTPD::loop()+0x54a>
    71e4:	bhi.w	739a <MTPD::loop()+0x2e2>
    71e8:	movw	r2, #4123	; 0x101b
    71ec:	cmp	r3, r2
    71ee:	beq.w	7472 <MTPD::loop()+0x3ba>
    71f2:	movw	r2, #38913	; 0x9801
    71f6:	cmp	r3, r2
    71f8:	bne.w	777e <MTPD::loop()+0x6c6>
          case 0x101B:  // GetPartialObject
              TRANSMIT1(GetPartialObject(p1,p2,p3));
              break;

          case 0x9801:  // getObjectPropsSupported
              TRANSMIT(getObjectPropsSupported(p1));
    71fc:	movw	r5, #9256	; 0x2428
    7200:	mov.w	sl, #0
    7204:	movs	r3, #1
    7206:	movw	fp, #9252	; 0x2424
    720a:	str.w	sl, [r4, r5]
    720e:	mov	r1, r9
    7210:	strb.w	r3, [r4, fp]
    7214:	mov	r0, r4
    7216:	bl	60e4 <MTPD::getObjectPropsSupported(unsigned long)>
    721a:	ldr	r3, [r4, r5]
    721c:	ldrh.w	lr, [r4, #38]	; 0x26
    7220:	mov.w	ip, #2
    7224:	add.w	r0, r3, #12
    7228:	strb.w	sl, [r4, fp]
    722c:	ldr	r3, [r4, #40]	; 0x28
    722e:	movs	r2, #12
    7230:	str.w	sl, [r4, r5]
    7234:	add	r1, sp, #16
    7236:	str	r0, [sp, #16]
    7238:	mov	r0, r4
    723a:	str	r3, [sp, #24]
    723c:	add.w	r5, r4, #544	; 0x220
    7240:	strh.w	ip, [sp, #20]
    7244:	strh.w	lr, [sp, #22]
    7248:	bl	56a8 <MTPD::write(char const*, int) [clone .part.2]>
    724c:	mov	r1, r9
    724e:	mov	r0, r4
    7250:	bl	60e4 <MTPD::getObjectPropsSupported(unsigned long)>
    7254:	ldr	r3, [sp, #16]
    7256:	ubfx	sl, r3, #0, #9
    725a:	cmp.w	sl, #0
    725e:	beq.n	726e <MTPD::loop()+0x1b6>

#elif defined(__IMXRT1062__)  

    int MTPD::push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    7260:	movs	r2, #60	; 0x3c
    7262:	mov	r1, sl
    7264:	mov	r0, r5
    7266:	bl	f168 <usb_mtp_send>
    726a:	cmp	r0, #0
    726c:	ble.n	7260 <MTPD::loop()+0x1a8>
    726e:	ldrh.w	r0, [sp, #8]
              TRANSMIT(getObjectPropDesc(p1,p2));
              break;

          case 0x9803:  // getObjectPropertyValue
              TRANSMIT(getObjectPropValue(p1,p2));
              break;
    7272:	b.n	71b0 <MTPD::loop()+0xf8>

        int return_code =0x2001; //OK use as default value

        if(typ==2) return_code=0x2005; // we should only get cmds

        switch (op)
    7274:	movw	r2, #4098	; 0x1002
    7278:	cmp	r3, r2
    727a:	beq.w	745a <MTPD::loop()+0x3a2>
    727e:	bls.w	73e0 <MTPD::loop()+0x328>
    7282:	movw	r2, #4099	; 0x1003
    7286:	cmp	r3, r2
    7288:	beq.w	73c6 <MTPD::loop()+0x30e>
    728c:	movw	r2, #4100	; 0x1004
    7290:	cmp	r3, r2
    7292:	bne.w	777e <MTPD::loop()+0x6c6>

          case 0x1003:  // CloseSession
            break;

          case 0x1004:  // GetStorageIDs
              TRANSMIT(WriteStorageIDs());
    7296:	movw	r5, #9256	; 0x2428
    729a:	mov.w	sl, #0
    729e:	movs	r3, #1
    72a0:	movw	fp, #9252	; 0x2424
    72a4:	str.w	sl, [r4, r5]
    72a8:	mov	r0, r4
    72aa:	strb.w	r3, [r4, fp]
    72ae:	bl	5b98 <MTPD::WriteStorageIDs()>
    72b2:	ldr	r3, [r4, r5]
    72b4:	mov.w	lr, #2
    72b8:	strb.w	sl, [r4, fp]
    72bc:	adds	r3, #12
    72be:	ldrh.w	ip, [r4, #38]	; 0x26
    72c2:	str.w	sl, [r4, r5]
    72c6:	movs	r2, #12
    72c8:	ldr	r5, [r4, #40]	; 0x28
    72ca:	add	r1, sp, #16
    72cc:	mov	r0, r4
    72ce:	str	r3, [sp, #16]
    72d0:	strh.w	lr, [sp, #20]
    72d4:	strh.w	ip, [sp, #22]
    72d8:	str	r5, [sp, #24]
    72da:	bl	56a8 <MTPD::write(char const*, int) [clone .part.2]>
    72de:	mov	r0, r4
    72e0:	add.w	r5, r4, #544	; 0x220
    72e4:	bl	5b98 <MTPD::WriteStorageIDs()>
    72e8:	ldr	r3, [sp, #16]
    72ea:	ubfx	sl, r3, #0, #9
    72ee:	cmp.w	sl, #0
    72f2:	beq.n	726e <MTPD::loop()+0x1b6>

#elif defined(__IMXRT1062__)  

    int MTPD::push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    72f4:	movs	r2, #60	; 0x3c
    72f6:	mov	r1, sl
    72f8:	mov	r0, r5
    72fa:	bl	f168 <usb_mtp_send>
    72fe:	cmp	r0, #0
    7300:	ble.n	72f4 <MTPD::loop()+0x23c>
    7302:	b.n	726e <MTPD::loop()+0x1b6>
    }

    void MTPD::loop(void)
    { if(!usb_mtp_available()) return;
      if(fetch_packet(rx_data_buffer))
      { printContainer(); // to switch on set debug to 1 at beginning of file
    7304:	ldr	r2, [r4, #44]	; 0x2c
    7306:	ldr	r1, [pc, #212]	; (73dc <MTPD::loop()+0x324>)
    7308:	ldr	r0, [pc, #196]	; (73d0 <MTPD::loop()+0x318>)
    730a:	bl	f5ec <Print::printf(char const*, ...)>
    730e:	ldr	r3, [r4, #32]
    7310:	cmp	r3, #16
    7312:	bls.w	70f8 <MTPD::loop()+0x40>
    7316:	ldr	r2, [r4, #48]	; 0x30
    7318:	ldr	r1, [pc, #192]	; (73dc <MTPD::loop()+0x324>)
    731a:	ldr	r0, [pc, #180]	; (73d0 <MTPD::loop()+0x318>)
    731c:	bl	f5ec <Print::printf(char const*, ...)>
    7320:	ldr	r3, [r4, #32]
    7322:	cmp	r3, #20
    7324:	bls.w	70f8 <MTPD::loop()+0x40>
    7328:	ldr	r2, [r4, #52]	; 0x34
    732a:	ldr	r1, [pc, #176]	; (73dc <MTPD::loop()+0x324>)
    732c:	ldr	r0, [pc, #160]	; (73d0 <MTPD::loop()+0x318>)
    732e:	bl	f5ec <Print::printf(char const*, ...)>
    7332:	b.n	70f8 <MTPD::loop()+0x40>

        int return_code =0x2001; //OK use as default value

        if(typ==2) return_code=0x2005; // we should only get cmds

        switch (op)
    7334:	movw	r2, #4117	; 0x1015
    7338:	cmp	r3, r2
    733a:	beq.w	7836 <MTPD::loop()+0x77e>
    733e:	movw	r2, #4121	; 0x1019
    7342:	cmp	r3, r2
    7344:	bne.w	777e <MTPD::loop()+0x6c6>
        return 0x2001;
    }

    uint32_t MTPD::moveObject(uint32_t handle, uint32_t newStorage, uint32_t newHandle)
    { uint32_t store1=Storage2Store(newStorage);
      if(storage_->move(handle,store1,newHandle)) return 0x2001; else return  0x2005;
    7348:	ldr	r0, [r4, #0]
    734a:	mov	r3, r5
    734c:	ldr	r2, [sp, #12]
    734e:	mov	r1, r9
    7350:	ldr	r6, [r0, #0]
    7352:	add.w	r5, r4, #544	; 0x220
    7356:	subs	r2, #1
    7358:	ldr	r6, [r6, #76]	; 0x4c
    735a:	blx	r6
              break;

          case 0x1019:  // MoveObject
              return_code = moveObject(p1,p2,p3);
              len = 12;
              break;
    735c:	movs	r6, #12
        return 0x2001;
    }

    uint32_t MTPD::moveObject(uint32_t handle, uint32_t newStorage, uint32_t newHandle)
    { uint32_t store1=Storage2Store(newStorage);
      if(storage_->move(handle,store1,newHandle)) return 0x2001; else return  0x2005;
    735e:	cmp	r0, #0
    7360:	ite	eq
    7362:	moveq	r0, sl
    7364:	movne	r0, fp
              break;

          case 0x1019:  // MoveObject
              return_code = moveObject(p1,p2,p3);
              len = 12;
              break;
    7366:	b.n	71b0 <MTPD::loop()+0xf8>

        int return_code =0x2001; //OK use as default value

        if(typ==2) return_code=0x2005; // we should only get cmds

        switch (op)
    7368:	movw	r2, #4105	; 0x1009
    736c:	cmp	r3, r2
    736e:	beq.w	767a <MTPD::loop()+0x5c2>
    7372:	movw	r2, #4107	; 0x100b
    7376:	cmp	r3, r2
    7378:	bne.w	777e <MTPD::loop()+0x6c6>
          case 0x1009:  // GetObject
            TRANSMIT(GetObject(p1));
            break;

          case 0x100B:  // DeleteObject
              if (p2) {
    737c:	ldr	r3, [sp, #12]
    737e:	cmp	r3, #0
    7380:	bne.w	7172 <MTPD::loop()+0xba>
                return_code = 0x2014; // spec by format unsupported
              } else {
                if (!storage_->DeleteObject(p1)) {
    7384:	ldr	r0, [r4, #0]
    7386:	mov	r1, r9
    7388:	ldr	r3, [r0, #0]
    738a:	ldr	r3, [r3, #60]	; 0x3c
    738c:	blx	r3
    738e:	cbnz	r0, 73c6 <MTPD::loop()+0x30e>
    7390:	add.w	r5, r4, #544	; 0x220
    7394:	movw	r0, #8210	; 0x2012
    7398:	b.n	71b0 <MTPD::loop()+0xf8>

        int return_code =0x2001; //OK use as default value

        if(typ==2) return_code=0x2005; // we should only get cmds

        switch (op)
    739a:	movw	r2, #38915	; 0x9803
    739e:	cmp	r3, r2
    73a0:	beq.w	74f4 <MTPD::loop()+0x43c>
    73a4:	movw	r2, #38916	; 0x9804
    73a8:	cmp	r3, r2
    73aa:	bne.w	777e <MTPD::loop()+0x6c6>
          case 0x9803:  // getObjectPropertyValue
              TRANSMIT(getObjectPropValue(p1,p2));
              break;

          case 0x9804:  // setObjectPropertyValue
              return_code = setObjectPropValue(p1,p2);
    73ae:	ldr	r2, [sp, #12]
    73b0:	mov	r1, r9
    73b2:	mov	r0, r4
    73b4:	bl	7084 <MTPD::setObjectPropValue(unsigned long, unsigned long)>

          default:
              return_code = 0x2005;  // operation not supported
              break;
        }
        if(return_code)
    73b8:	cmp	r0, #0
    73ba:	beq.w	70c6 <MTPD::loop()+0xe>
    73be:	uxth	r0, r0
    73c0:	add.w	r5, r4, #544	; 0x220
    73c4:	b.n	71b0 <MTPD::loop()+0xf8>
    73c6:	ldrh.w	r0, [sp, #8]
    73ca:	add.w	r5, r4, #544	; 0x220
    73ce:	b.n	71b0 <MTPD::loop()+0xf8>
    73d0:	.word	0x20000c58
    73d4:	.word	0x200003a8
    73d8:	.word	0x200003bc
    73dc:	.word	0x200003b8

        int return_code =0x2001; //OK use as default value

        if(typ==2) return_code=0x2005; // we should only get cmds

        switch (op)
    73e0:	movw	r2, #4097	; 0x1001
    73e4:	cmp	r3, r2
    73e6:	bne.w	777e <MTPD::loop()+0x6c6>
        {
          case 0x1001:
            TRANSMIT(WriteDescriptor());
    73ea:	movw	r5, #9256	; 0x2428
    73ee:	mov.w	sl, #0
    73f2:	movs	r3, #1
    73f4:	movw	fp, #9252	; 0x2424
    73f8:	str.w	sl, [r4, r5]
    73fc:	mov	r0, r4
    73fe:	strb.w	r3, [r4, fp]
    7402:	bl	58bc <MTPD::WriteDescriptor()>
    7406:	ldr	r3, [r4, r5]
    7408:	mov.w	lr, #2
    740c:	strb.w	sl, [r4, fp]
    7410:	adds	r3, #12
    7412:	ldrh.w	ip, [r4, #38]	; 0x26
    7416:	str.w	sl, [r4, r5]
    741a:	movs	r2, #12
    741c:	ldr	r5, [r4, #40]	; 0x28
    741e:	add	r1, sp, #16
    7420:	mov	r0, r4
    7422:	str	r3, [sp, #16]
    7424:	strh.w	lr, [sp, #20]
    7428:	strh.w	ip, [sp, #22]
    742c:	str	r5, [sp, #24]
    742e:	bl	56a8 <MTPD::write(char const*, int) [clone .part.2]>
    7432:	mov	r0, r4
    7434:	add.w	r5, r4, #544	; 0x220
    7438:	bl	58bc <MTPD::WriteDescriptor()>
    743c:	ldr	r3, [sp, #16]
    743e:	ubfx	sl, r3, #0, #9
    7442:	cmp.w	sl, #0
    7446:	beq.w	726e <MTPD::loop()+0x1b6>

#elif defined(__IMXRT1062__)  

    int MTPD::push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    744a:	movs	r2, #60	; 0x3c
    744c:	mov	r1, sl
    744e:	mov	r0, r5
    7450:	bl	f168 <usb_mtp_send>
    7454:	cmp	r0, #0
    7456:	ble.n	744a <MTPD::loop()+0x392>
    7458:	b.n	726e <MTPD::loop()+0x1b6>
    }
    
    void MTPD::openSession(uint32_t id)
    {
      sessionID_ = id;
      storage_->ResetIndex();
    745a:	ldr	r0, [r4, #0]
    745c:	add.w	r5, r4, #544	; 0x220
      return storage_->copy(handle,store1,newHandle);
    }
    
    void MTPD::openSession(uint32_t id)
    {
      sessionID_ = id;
    7460:	ldr	r2, [pc, #856]	; (77bc <MTPD::loop()+0x704>)
      storage_->ResetIndex();
    7462:	ldr	r3, [r0, #0]
      return storage_->copy(handle,store1,newHandle);
    }
    
    void MTPD::openSession(uint32_t id)
    {
      sessionID_ = id;
    7464:	str.w	r9, [r2]
      storage_->ResetIndex();
    7468:	ldr	r3, [r3, #68]	; 0x44
    746a:	blx	r3
    746c:	ldrh.w	r0, [sp, #8]
    7470:	b.n	71b0 <MTPD::loop()+0xf8>
              else
              { p1 = return_code; return_code=0x2001; len = 16;  }
              break;

          case 0x101B:  // GetPartialObject
              TRANSMIT1(GetPartialObject(p1,p2,p3));
    7472:	movw	sl, #9256	; 0x2428
    7476:	mov.w	fp, #0
    747a:	movs	r2, #1
    747c:	movw	r1, #9252	; 0x2424
    7480:	str.w	fp, [r4, sl]
    7484:	mov	r3, r5
    7486:	strb	r2, [r4, r1]
    7488:	mov	r0, r4
    748a:	ldr	r2, [sp, #12]
    748c:	mov	r1, r9
    748e:	bl	6bf4 <MTPD::GetPartialObject(unsigned long, unsigned long, unsigned long)>
    7492:	ldr.w	r3, [r4, sl]
    7496:	movw	r1, #9252	; 0x2424
    749a:	ldrh.w	lr, [r4, #38]	; 0x26
    749e:	adds	r3, #16
    74a0:	mov.w	ip, #2
    74a4:	strb.w	fp, [r4, r1]
    74a8:	movs	r2, #32
    74aa:	str.w	fp, [r4, sl]
    74ae:	add	r1, sp, #16
    74b0:	str	r3, [sp, #16]
    74b2:	ldr	r3, [r4, #40]	; 0x28
    74b4:	str	r0, [sp, #28]
    74b6:	mov	r0, r4
    74b8:	strh.w	ip, [sp, #20]
    74bc:	strh.w	lr, [sp, #22]
    74c0:	str	r3, [sp, #24]
    74c2:	bl	56a8 <MTPD::write(char const*, int) [clone .part.2]>
    74c6:	mov	r3, r5
    74c8:	ldr	r2, [sp, #12]
    74ca:	mov	r1, r9
    74cc:	mov	r0, r4
    74ce:	bl	6bf4 <MTPD::GetPartialObject(unsigned long, unsigned long, unsigned long)>
    74d2:	ldr	r3, [sp, #16]
    74d4:	add.w	r5, r4, #544	; 0x220
    74d8:	ubfx	sl, r3, #0, #9
    74dc:	cmp.w	sl, #0
    74e0:	beq.w	726e <MTPD::loop()+0x1b6>

#elif defined(__IMXRT1062__)  

    int MTPD::push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    74e4:	movs	r2, #60	; 0x3c
    74e6:	mov	r1, sl
    74e8:	mov	r0, r5
    74ea:	bl	f168 <usb_mtp_send>
    74ee:	cmp	r0, #0
    74f0:	ble.n	74e4 <MTPD::loop()+0x42c>
    74f2:	b.n	726e <MTPD::loop()+0x1b6>
          case 0x9802:  // getObjectPropDesc
              TRANSMIT(getObjectPropDesc(p1,p2));
              break;

          case 0x9803:  // getObjectPropertyValue
              TRANSMIT(getObjectPropValue(p1,p2));
    74f4:	movw	r5, #9256	; 0x2428
    74f8:	mov.w	sl, #0
    74fc:	movs	r3, #1
    74fe:	movw	fp, #9252	; 0x2424
    7502:	str.w	sl, [r4, r5]
    7506:	mov	r1, r9
    7508:	ldr	r2, [sp, #12]
    750a:	mov	r0, r4
    750c:	strb.w	r3, [r4, fp]
    7510:	bl	68e8 <MTPD::getObjectPropValue(unsigned long, unsigned long)>
    7514:	ldr	r3, [r4, r5]
    7516:	ldrh.w	ip, [r4, #38]	; 0x26
    751a:	mov.w	lr, #2
    751e:	adds	r3, #12
    7520:	strb.w	sl, [r4, fp]
    7524:	str.w	sl, [r4, r5]
    7528:	movs	r2, #12
    752a:	str	r3, [sp, #16]
    752c:	add	r1, sp, #16
    752e:	ldr	r3, [r4, #40]	; 0x28
    7530:	mov	r0, r4
    7532:	strh.w	lr, [sp, #20]
    7536:	add.w	r5, r4, #544	; 0x220
    753a:	str	r3, [sp, #24]
    753c:	strh.w	ip, [sp, #22]
    7540:	bl	56a8 <MTPD::write(char const*, int) [clone .part.2]>
    7544:	ldr	r2, [sp, #12]
    7546:	mov	r1, r9
    7548:	mov	r0, r4
    754a:	bl	68e8 <MTPD::getObjectPropValue(unsigned long, unsigned long)>
    754e:	ldr	r3, [sp, #16]
    7550:	ubfx	sl, r3, #0, #9
    7554:	cmp.w	sl, #0
    7558:	beq.w	726e <MTPD::loop()+0x1b6>

#elif defined(__IMXRT1062__)  

    int MTPD::push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    755c:	movs	r2, #60	; 0x3c
    755e:	mov	r1, sl
    7560:	mov	r0, r5
    7562:	bl	f168 <usb_mtp_send>
    7566:	cmp	r0, #0
    7568:	ble.n	755c <MTPD::loop()+0x4a4>
    756a:	b.n	726e <MTPD::loop()+0x1b6>
          case 0x1004:  // GetStorageIDs
              TRANSMIT(WriteStorageIDs());
            break;

          case 0x1005:  // GetStorageInfo
            TRANSMIT(GetStorageInfo(p1));
    756c:	movw	r5, #9256	; 0x2428
    7570:	mov.w	sl, #0
    7574:	movs	r3, #1
    7576:	movw	fp, #9252	; 0x2424
    757a:	str.w	sl, [r4, r5]
    757e:	mov	r1, r9
    7580:	strb.w	r3, [r4, fp]
    7584:	mov	r0, r4
    7586:	bl	5c1c <MTPD::GetStorageInfo(unsigned long)>
    758a:	ldr	r3, [r4, r5]
    758c:	ldrh.w	lr, [r4, #38]	; 0x26
    7590:	mov.w	ip, #2
    7594:	add.w	r0, r3, #12
    7598:	strb.w	sl, [r4, fp]
    759c:	ldr	r3, [r4, #40]	; 0x28
    759e:	movs	r2, #12
    75a0:	str.w	sl, [r4, r5]
    75a4:	add	r1, sp, #16
    75a6:	str	r0, [sp, #16]
    75a8:	mov	r0, r4
    75aa:	str	r3, [sp, #24]
    75ac:	add.w	r5, r4, #544	; 0x220
    75b0:	strh.w	ip, [sp, #20]
    75b4:	strh.w	lr, [sp, #22]
    75b8:	bl	56a8 <MTPD::write(char const*, int) [clone .part.2]>
    75bc:	mov	r1, r9
    75be:	mov	r0, r4
    75c0:	bl	5c1c <MTPD::GetStorageInfo(unsigned long)>
    75c4:	ldr	r3, [sp, #16]
    75c6:	ubfx	sl, r3, #0, #9
    75ca:	cmp.w	sl, #0
    75ce:	beq.w	726e <MTPD::loop()+0x1b6>

#elif defined(__IMXRT1062__)  

    int MTPD::push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    75d2:	movs	r2, #60	; 0x3c
    75d4:	mov	r1, sl
    75d6:	mov	r0, r5
    75d8:	bl	f168 <usb_mtp_send>
    75dc:	cmp	r0, #0
    75de:	ble.n	75d2 <MTPD::loop()+0x51a>
    75e0:	b.n	726e <MTPD::loop()+0x1b6>
      if(storage_->move(handle,store1,newHandle)) return 0x2001; else return  0x2005;
    }
    
    uint32_t MTPD::copyObject(uint32_t handle, uint32_t newStorage, uint32_t newHandle)
    { uint32_t store1=Storage2Store(newStorage);
      return storage_->copy(handle,store1,newHandle);
    75e2:	ldr	r0, [r4, #0]
    75e4:	mov	r3, r5
    75e6:	ldr	r2, [sp, #12]
    75e8:	mov	r1, r9
    75ea:	ldr	r5, [r0, #0]
    75ec:	subs	r2, #1
    75ee:	ldr	r5, [r5, #80]	; 0x50
    75f0:	blx	r5
              len = 12;
              break;

          case 0x101A:  // CopyObject
              return_code = copyObject(p1,p2,p3);
              if(!return_code) 
    75f2:	cmp	r0, #0
    75f4:	beq.n	76f0 <MTPD::loop()+0x638>
    75f6:	mov	r9, r0
    75f8:	add.w	r5, r4, #544	; 0x220
    75fc:	mov	r0, fp
    75fe:	movs	r6, #16
    7600:	b.n	71b0 <MTPD::loop()+0xf8>
          case 0x9801:  // getObjectPropsSupported
              TRANSMIT(getObjectPropsSupported(p1));
              break;

          case 0x9802:  // getObjectPropDesc
              TRANSMIT(getObjectPropDesc(p1,p2));
    7602:	movw	r5, #9256	; 0x2428
    7606:	mov.w	sl, #0
    760a:	movs	r3, #1
    760c:	movw	fp, #9252	; 0x2424
    7610:	str.w	sl, [r4, r5]
    7614:	mov	r1, r9
    7616:	ldr	r2, [sp, #12]
    7618:	mov	r0, r4
    761a:	strb.w	r3, [r4, fp]
    761e:	bl	6174 <MTPD::getObjectPropDesc(unsigned long, unsigned long)>
    7622:	ldr	r3, [r4, r5]
    7624:	ldrh.w	ip, [r4, #38]	; 0x26
    7628:	mov.w	lr, #2
    762c:	adds	r3, #12
    762e:	strb.w	sl, [r4, fp]
    7632:	str.w	sl, [r4, r5]
    7636:	movs	r2, #12
    7638:	str	r3, [sp, #16]
    763a:	add	r1, sp, #16
    763c:	ldr	r3, [r4, #40]	; 0x28
    763e:	mov	r0, r4
    7640:	strh.w	lr, [sp, #20]
    7644:	add.w	r5, r4, #544	; 0x220
    7648:	str	r3, [sp, #24]
    764a:	strh.w	ip, [sp, #22]
    764e:	bl	56a8 <MTPD::write(char const*, int) [clone .part.2]>
    7652:	ldr	r2, [sp, #12]
    7654:	mov	r1, r9
    7656:	mov	r0, r4
    7658:	bl	6174 <MTPD::getObjectPropDesc(unsigned long, unsigned long)>
    765c:	ldr	r3, [sp, #16]
    765e:	ubfx	sl, r3, #0, #9
    7662:	cmp.w	sl, #0
    7666:	beq.w	726e <MTPD::loop()+0x1b6>

#elif defined(__IMXRT1062__)  

    int MTPD::push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    766a:	movs	r2, #60	; 0x3c
    766c:	mov	r1, sl
    766e:	mov	r0, r5
    7670:	bl	f168 <usb_mtp_send>
    7674:	cmp	r0, #0
    7676:	ble.n	766a <MTPD::loop()+0x5b2>
    7678:	b.n	726e <MTPD::loop()+0x1b6>
          case 0x1008:  // GetObjectInfo
            TRANSMIT(GetObjectInfo(p1));
            break;

          case 0x1009:  // GetObject
            TRANSMIT(GetObject(p1));
    767a:	movw	r5, #9256	; 0x2428
    767e:	mov.w	sl, #0
    7682:	movs	r3, #1
    7684:	movw	fp, #9252	; 0x2424
    7688:	str.w	sl, [r4, r5]
    768c:	mov	r1, r9
    768e:	strb.w	r3, [r4, fp]
    7692:	mov	r0, r4
    7694:	bl	6ad8 <MTPD::GetObject(unsigned long)>
    7698:	ldr	r3, [r4, r5]
    769a:	ldrh.w	lr, [r4, #38]	; 0x26
    769e:	mov.w	ip, #2
    76a2:	add.w	r0, r3, #12
    76a6:	strb.w	sl, [r4, fp]
    76aa:	ldr	r3, [r4, #40]	; 0x28
    76ac:	movs	r2, #12
    76ae:	str.w	sl, [r4, r5]
    76b2:	add	r1, sp, #16
    76b4:	str	r0, [sp, #16]
    76b6:	mov	r0, r4
    76b8:	str	r3, [sp, #24]
    76ba:	add.w	r5, r4, #544	; 0x220
    76be:	strh.w	ip, [sp, #20]
    76c2:	strh.w	lr, [sp, #22]
    76c6:	bl	56a8 <MTPD::write(char const*, int) [clone .part.2]>
    76ca:	mov	r1, r9
    76cc:	mov	r0, r4
    76ce:	bl	6ad8 <MTPD::GetObject(unsigned long)>
    76d2:	ldr	r3, [sp, #16]
    76d4:	ubfx	sl, r3, #0, #9
    76d8:	cmp.w	sl, #0
    76dc:	beq.w	726e <MTPD::loop()+0x1b6>

#elif defined(__IMXRT1062__)  

    int MTPD::push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    76e0:	movs	r2, #60	; 0x3c
    76e2:	mov	r1, sl
    76e4:	mov	r0, r5
    76e6:	bl	f168 <usb_mtp_send>
    76ea:	cmp	r0, #0
    76ec:	ble.n	76e0 <MTPD::loop()+0x628>
    76ee:	b.n	726e <MTPD::loop()+0x1b6>
              len = 12;
              break;

          case 0x101A:  // CopyObject
              return_code = copyObject(p1,p2,p3);
              if(!return_code) 
    76f0:	mov	r0, sl
    76f2:	add.w	r5, r4, #544	; 0x220
    76f6:	movs	r6, #12
    76f8:	b.n	71b0 <MTPD::loop()+0xf8>
                }
              }
              break;

          case 0x100C:  // SendObjectInfo
              p3 = SendObjectInfo(p1, // storage
    76fa:	ldr.w	sl, [sp, #12]
    76fe:	mov	r1, r9
    7700:	mov	r0, r4
    7702:	add.w	r5, r4, #544	; 0x220
    7706:	mov	r2, sl
                                  p2); // parent

              CONTAINER->params[1]=p2;
              CONTAINER->params[2]=p3;
              len = 12 + 3 * 4;
              break;
    7708:	movs	r6, #24
                }
              }
              break;

          case 0x100C:  // SendObjectInfo
              p3 = SendObjectInfo(p1, // storage
    770a:	bl	6e18 <MTPD::SendObjectInfo(unsigned long, unsigned long)>
                                  p2); // parent

              CONTAINER->params[1]=p2;
    770e:	str.w	sl, [r4, #48]	; 0x30
              CONTAINER->params[2]=p3;
    7712:	str	r0, [r4, #52]	; 0x34
    7714:	ldrh.w	r0, [sp, #8]
              len = 12 + 3 * 4;
              break;
    7718:	b.n	71b0 <MTPD::loop()+0xf8>
        break;
    }
  }

  void MTPD::GetDevicePropDesc(uint32_t prop) {
    switch (prop) {
    771a:	movw	r2, #54274	; 0xd402
              if(!SendObject()) return_code = 0x2005;
              len = 12;
              break;

          case 0x1014:  // GetDevicePropDesc
              TRANSMIT(GetDevicePropDesc(p1));
    771e:	movw	sl, #9256	; 0x2428
    7722:	movs	r5, #0
    7724:	movw	fp, #9252	; 0x2424
    7728:	movs	r1, #1
        break;
    }
  }

  void MTPD::GetDevicePropDesc(uint32_t prop) {
    switch (prop) {
    772a:	cmp	r9, r2
              if(!SendObject()) return_code = 0x2005;
              len = 12;
              break;

          case 0x1014:  // GetDevicePropDesc
              TRANSMIT(GetDevicePropDesc(p1));
    772c:	str.w	r5, [r4, sl]
    7730:	strb.w	r1, [r4, fp]
        break;
    }
  }

  void MTPD::GetDevicePropDesc(uint32_t prop) {
    switch (prop) {
    7734:	beq.w	789a <MTPD::loop()+0x7e2>
              if(!SendObject()) return_code = 0x2005;
              len = 12;
              break;

          case 0x1014:  // GetDevicePropDesc
              TRANSMIT(GetDevicePropDesc(p1));
    7738:	mov.w	lr, #12
    773c:	strb.w	r5, [r4, fp]
    7740:	movs	r5, #2
    7742:	add	r1, sp, #16
    7744:	mov	r2, lr
    7746:	mov	r0, r4
    7748:	strh.w	r3, [sp, #22]
    774c:	str.w	r8, [sp, #24]
    7750:	str.w	lr, [sp, #16]
    7754:	strh.w	r5, [sp, #20]
    7758:	bl	56a8 <MTPD::write(char const*, int) [clone .part.2]>
    775c:	ldr	r3, [sp, #16]
    775e:	add.w	r5, r4, #544	; 0x220
    7762:	ubfx	sl, r3, #0, #9
    7766:	cmp.w	sl, #0
    776a:	beq.w	726e <MTPD::loop()+0x1b6>

#elif defined(__IMXRT1062__)  

    int MTPD::push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    776e:	movs	r2, #60	; 0x3c
    7770:	mov	r1, sl
    7772:	mov	r0, r5
    7774:	bl	f168 <usb_mtp_send>
    7778:	cmp	r0, #0
    777a:	ble.n	776e <MTPD::loop()+0x6b6>
    777c:	b.n	726e <MTPD::loop()+0x1b6>
    777e:	add.w	r5, r4, #544	; 0x220
              return_code = setObjectPropValue(p1,p2);
              break;

          default:
              return_code = 0x2005;  // operation not supported
              break;
    7782:	movw	r0, #8197	; 0x2005
    7786:	b.n	71b0 <MTPD::loop()+0xf8>
              CONTAINER->params[2]=p3;
              len = 12 + 3 * 4;
              break;

          case 0x100D:  // SendObject
              if(!SendObject()) return_code = 0x2005;
    7788:	mov	r0, r4
    778a:	bl	6f70 <MTPD::SendObject()>
    778e:	cmp	r0, #0
    7790:	beq.n	76f0 <MTPD::loop()+0x638>
    7792:	ldrh.w	r0, [sp, #8]
    7796:	add.w	r5, r4, #544	; 0x220
    779a:	movs	r6, #12
    779c:	b.n	71b0 <MTPD::loop()+0xf8>
          case 0x1005:  // GetStorageInfo
            TRANSMIT(GetStorageInfo(p1));
            break;

          case 0x1006:  // GetNumObjects
            if (p2) 
    779e:	ldr	r3, [sp, #12]
    77a0:	cmp	r3, #0
    77a2:	bne.w	7172 <MTPD::loop()+0xba>
            {
                return_code = 0x2014; // spec by format unsupported
            } else 
            {
                p1 = GetNumObjects(p1, p3);
    77a6:	mov	r2, r5
    77a8:	mov	r1, r9
    77aa:	mov	r0, r4
    77ac:	add.w	r5, r4, #544	; 0x220
    77b0:	bl	5d8c <MTPD::GetNumObjects(unsigned long, unsigned long)>
    77b4:	mov	r9, r0
    77b6:	ldrh.w	r0, [sp, #8]
    77ba:	b.n	71b0 <MTPD::loop()+0xf8>
    77bc:	.word	0x20005b14
              TRANSMIT(GetObjectHandles(p1, p3));
            }
            break;

          case 0x1008:  // GetObjectInfo
            TRANSMIT(GetObjectInfo(p1));
    77c0:	movw	r5, #9256	; 0x2428
    77c4:	mov.w	sl, #0
    77c8:	movs	r3, #1
    77ca:	movw	fp, #9252	; 0x2424
    77ce:	str.w	sl, [r4, r5]
    77d2:	mov	r1, r9
    77d4:	strb.w	r3, [r4, fp]
    77d8:	mov	r0, r4
    77da:	bl	5e40 <MTPD::GetObjectInfo(unsigned long)>
    77de:	ldr	r3, [r4, r5]
    77e0:	ldrh.w	lr, [r4, #38]	; 0x26
    77e4:	mov.w	ip, #2
    77e8:	add.w	r0, r3, #12
    77ec:	strb.w	sl, [r4, fp]
    77f0:	ldr	r3, [r4, #40]	; 0x28
    77f2:	movs	r2, #12
    77f4:	str.w	sl, [r4, r5]
    77f8:	add	r1, sp, #16
    77fa:	str	r0, [sp, #16]
    77fc:	mov	r0, r4
    77fe:	str	r3, [sp, #24]
    7800:	add.w	r5, r4, #544	; 0x220
    7804:	strh.w	ip, [sp, #20]
    7808:	strh.w	lr, [sp, #22]
    780c:	bl	56a8 <MTPD::write(char const*, int) [clone .part.2]>
    7810:	mov	r1, r9
    7812:	mov	r0, r4
    7814:	bl	5e40 <MTPD::GetObjectInfo(unsigned long)>
    7818:	ldr	r3, [sp, #16]
    781a:	ubfx	sl, r3, #0, #9
    781e:	cmp.w	sl, #0
    7822:	beq.w	726e <MTPD::loop()+0x1b6>

#elif defined(__IMXRT1062__)  

    int MTPD::push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    7826:	movs	r2, #60	; 0x3c
    7828:	mov	r1, sl
    782a:	mov	r0, r5
    782c:	bl	f168 <usb_mtp_send>
    7830:	cmp	r0, #0
    7832:	ble.n	7826 <MTPD::loop()+0x76e>
    7834:	b.n	726e <MTPD::loop()+0x1b6>
      }
    }
  }

  void MTPD::GetDevicePropValue(uint32_t prop) {
    switch (prop) {
    7836:	movw	r2, #54274	; 0xd402
          case 0x1014:  // GetDevicePropDesc
              TRANSMIT(GetDevicePropDesc(p1));
              break;

          case 0x1015:  // GetDevicePropvalue
              TRANSMIT(GetDevicePropValue(p1));
    783a:	movw	sl, #9256	; 0x2428
    783e:	movs	r5, #0
    7840:	movw	fp, #9252	; 0x2424
    7844:	movs	r1, #1
      }
    }
  }

  void MTPD::GetDevicePropValue(uint32_t prop) {
    switch (prop) {
    7846:	cmp	r9, r2
          case 0x1014:  // GetDevicePropDesc
              TRANSMIT(GetDevicePropDesc(p1));
              break;

          case 0x1015:  // GetDevicePropvalue
              TRANSMIT(GetDevicePropValue(p1));
    7848:	str.w	r5, [r4, sl]
    784c:	strb.w	r1, [r4, fp]
      }
    }
  }

  void MTPD::GetDevicePropValue(uint32_t prop) {
    switch (prop) {
    7850:	beq.w	7956 <MTPD::loop()+0x89e>
          case 0x1014:  // GetDevicePropDesc
              TRANSMIT(GetDevicePropDesc(p1));
              break;

          case 0x1015:  // GetDevicePropvalue
              TRANSMIT(GetDevicePropValue(p1));
    7854:	mov.w	lr, #12
    7858:	strb.w	r5, [r4, fp]
    785c:	movs	r5, #2
    785e:	add	r1, sp, #16
    7860:	mov	r2, lr
    7862:	mov	r0, r4
    7864:	strh.w	r3, [sp, #22]
    7868:	str.w	r8, [sp, #24]
    786c:	str.w	lr, [sp, #16]
    7870:	strh.w	r5, [sp, #20]
    7874:	bl	56a8 <MTPD::write(char const*, int) [clone .part.2]>
    7878:	ldr	r3, [sp, #16]
    787a:	add.w	r5, r4, #544	; 0x220
    787e:	ubfx	sl, r3, #0, #9
    7882:	cmp.w	sl, #0
    7886:	beq.w	726e <MTPD::loop()+0x1b6>

#elif defined(__IMXRT1062__)  

    int MTPD::push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    788a:	movs	r2, #60	; 0x3c
    788c:	mov	r1, sl
    788e:	mov	r0, r5
    7890:	bl	f168 <usb_mtp_send>
    7894:	cmp	r0, #0
    7896:	ble.n	788a <MTPD::loop()+0x7d2>
    7898:	b.n	726e <MTPD::loop()+0x1b6>
    789a:	mov	r1, r9
    789c:	mov	r0, r4
    789e:	bl	57f4 <MTPD::GetDevicePropDesc(unsigned long) [clone .part.4]>
              if(!SendObject()) return_code = 0x2005;
              len = 12;
              break;

          case 0x1014:  // GetDevicePropDesc
              TRANSMIT(GetDevicePropDesc(p1));
    78a2:	ldr.w	r3, [r4, sl]
    78a6:	ldrh.w	lr, [r4, #38]	; 0x26
    78aa:	mov.w	ip, #2
    78ae:	add.w	r0, r3, #12
    78b2:	strb.w	r5, [r4, fp]
    78b6:	ldr	r3, [r4, #40]	; 0x28
    78b8:	add	r1, sp, #16
    78ba:	str	r0, [sp, #16]
    78bc:	movs	r2, #12
    78be:	mov	r0, r4
    78c0:	str.w	r5, [r4, sl]
    78c4:	strh.w	ip, [sp, #20]
    78c8:	strh.w	lr, [sp, #22]
    78cc:	str	r3, [sp, #24]
    78ce:	bl	56a8 <MTPD::write(char const*, int) [clone .part.2]>
    78d2:	mov	r1, r9
    78d4:	mov	r0, r4
    78d6:	bl	57f4 <MTPD::GetDevicePropDesc(unsigned long) [clone .part.4]>
    78da:	b.n	775c <MTPD::loop()+0x6a4>
          case 0x1007:  // GetObjectHandles
            if (p2) 
            { return_code = 0x2014; // spec by format unsupported
            } else 
            { 
              TRANSMIT(GetObjectHandles(p1, p3));
    78dc:	movw	sl, #9256	; 0x2428
    78e0:	movs	r3, #1
    78e2:	ldr	r1, [sp, #12]
    78e4:	movw	fp, #9252	; 0x2424
    78e8:	mov	r2, r5
    78ea:	mov	r0, r4
    78ec:	str.w	r1, [r4, sl]
    78f0:	mov	r1, r9
    78f2:	strb.w	r3, [r4, fp]
    78f6:	bl	5db4 <MTPD::GetObjectHandles(unsigned long, unsigned long)>
    78fa:	ldr.w	r3, [r4, sl]
    78fe:	ldr	r1, [sp, #12]
    7900:	mov.w	lr, #2
    7904:	adds	r3, #12
    7906:	ldrh.w	ip, [r4, #38]	; 0x26
    790a:	strb.w	r1, [r4, fp]
    790e:	movs	r2, #12
    7910:	str.w	r1, [r4, sl]
    7914:	mov	r0, r4
    7916:	str	r3, [sp, #16]
    7918:	add	r1, sp, #16
    791a:	ldr	r3, [r4, #40]	; 0x28
    791c:	strh.w	lr, [sp, #20]
    7920:	str	r3, [sp, #24]
    7922:	strh.w	ip, [sp, #22]
    7926:	bl	56a8 <MTPD::write(char const*, int) [clone .part.2]>
    792a:	mov	r2, r5
    792c:	mov	r1, r9
    792e:	mov	r0, r4
    7930:	add.w	r5, r4, #544	; 0x220
    7934:	bl	5db4 <MTPD::GetObjectHandles(unsigned long, unsigned long)>
    7938:	ldr	r3, [sp, #16]
    793a:	ubfx	sl, r3, #0, #9
    793e:	cmp.w	sl, #0
    7942:	beq.w	726e <MTPD::loop()+0x1b6>

#elif defined(__IMXRT1062__)  

    int MTPD::push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    7946:	movs	r2, #60	; 0x3c
    7948:	mov	r1, sl
    794a:	mov	r0, r5
    794c:	bl	f168 <usb_mtp_send>
    7950:	cmp	r0, #0
    7952:	ble.n	7946 <MTPD::loop()+0x88e>
    7954:	b.n	726e <MTPD::loop()+0x1b6>
  void MTPD::GetDevicePropValue(uint32_t prop) {
    switch (prop) {
      case 0xd402: // friendly name
        // This is the name we'll actually see in the windows explorer.
        // Should probably be configurable.
        writestring(MTP_NAME);
    7956:	mov	r0, r4
    7958:	ldr	r1, [pc, #60]	; (7998 <MTPD::loop()+0x8e0>)
    795a:	bl	5728 <MTPD::writestring(char const*)>
          case 0x1014:  // GetDevicePropDesc
              TRANSMIT(GetDevicePropDesc(p1));
              break;

          case 0x1015:  // GetDevicePropvalue
              TRANSMIT(GetDevicePropValue(p1));
    795e:	ldr.w	r3, [r4, sl]
    7962:	ldrh.w	lr, [r4, #38]	; 0x26
    7966:	mov.w	ip, #2
    796a:	add.w	r0, r3, #12
    796e:	strb.w	r5, [r4, fp]
    7972:	ldr	r3, [r4, #40]	; 0x28
    7974:	add	r1, sp, #16
    7976:	str	r0, [sp, #16]
    7978:	movs	r2, #12
    797a:	mov	r0, r4
    797c:	str.w	r5, [r4, sl]
    7980:	strh.w	ip, [sp, #20]
    7984:	strh.w	lr, [sp, #22]
    7988:	str	r3, [sp, #24]
    798a:	bl	56a8 <MTPD::write(char const*, int) [clone .part.2]>
  void MTPD::GetDevicePropValue(uint32_t prop) {
    switch (prop) {
      case 0xd402: // friendly name
        // This is the name we'll actually see in the windows explorer.
        // Should probably be configurable.
        writestring(MTP_NAME);
    798e:	ldr	r1, [pc, #8]	; (7998 <MTPD::loop()+0x8e0>)
    7990:	mov	r0, r4
    7992:	bl	5728 <MTPD::writestring(char const*)>
    7996:	b.n	7878 <MTPD::loop()+0x7c0>
    7998:	.word	0x20000378

0000799c <EventResponder::triggerEvent(int, void*)>:
	}

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
    799c:	push	{r4}
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    799e:	ldrb	r4, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    79a0:	str	r1, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    79a2:	cmp	r4, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    79a4:	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    79a6:	beq.n	79b0 <EventResponder::triggerEvent(int, void*)+0x14>
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
		}
	}
    79a8:	ldr.w	r4, [sp], #4
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    79ac:	b.w	f3ac <EventResponder::triggerEventNotImmediate()>
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    79b0:	ldr	r3, [r0, #8]
		} else {
			triggerEventNotImmediate();
		}
	}
    79b2:	ldr.w	r4, [sp], #4
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    79b6:	bx	r3

000079b8 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]>:
	if (interruptMask[n >> 5] == 0) {
		interruptMasksUsed &= ~(1 << (n >> 5));
	}
}

void SPIClass::transfer(const void * buf, void * retbuf, size_t count)
    79b8:	push	{r4, r5, r6}
    uint8_t *p_read = (uint8_t*)retbuf;
    size_t count_read = count;

	// Pass 1 keep it simple and don't try packing 8 bits into 16 yet..
	// Lets clear the reader queue
	port().CR = LPSPI_CR_RRF | LPSPI_CR_MEN;	// clear the queue and make sure still enabled. 
    79ba:	movw	r5, #513	; 0x201
    79be:	ldr	r4, [r0, #0]
    79c0:	str	r5, [r4, #16]

	while (count > 0) {
    79c2:	cbz	r3, 7a0c <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]+0x54>
    79c4:	mov	r6, r3
		// Push out the next byte; 
		port().TDR = p_write? *p_write++ : _transferWriteFill;
    79c6:	cbz	r1, 7a06 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]+0x4e>
    79c8:	ldrb	r5, [r1, #0]
    79ca:	adds	r1, #1
		count--; // how many bytes left to output.
    79cc:	subs	r3, #1
	// Lets clear the reader queue
	port().CR = LPSPI_CR_RRF | LPSPI_CR_MEN;	// clear the queue and make sure still enabled. 

	while (count > 0) {
		// Push out the next byte; 
		port().TDR = p_write? *p_write++ : _transferWriteFill;
    79ce:	str	r5, [r4, #100]	; 0x64
		count--; // how many bytes left to output.
		// Make sure queue is not full before pushing next byte out
		do {
			if ((port().RSR & LPSPI_RSR_RXEMPTY) == 0)  {
    79d0:	ldr	r5, [r4, #112]	; 0x70
    79d2:	lsls	r5, r5, #30
    79d4:	bmi.n	79e4 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]+0x2c>
				uint8_t b = port().RDR;  // Read any pending RX bytes in
    79d6:	ldr	r5, [r4, #116]	; 0x74
				if (p_read) *p_read++ = b; 
				count_read--;
    79d8:	subs	r6, #1
		port().TDR = p_write? *p_write++ : _transferWriteFill;
		count--; // how many bytes left to output.
		// Make sure queue is not full before pushing next byte out
		do {
			if ((port().RSR & LPSPI_RSR_RXEMPTY) == 0)  {
				uint8_t b = port().RDR;  // Read any pending RX bytes in
    79da:	uxtb	r5, r5
				if (p_read) *p_read++ = b; 
    79dc:	cbz	r2, 79e4 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]+0x2c>
    79de:	strb	r5, [r2, #0]
    79e0:	adds	r2, #1
    79e2:	ldr	r4, [r0, #0]
				count_read--;
			}
		} while ((port().SR & LPSPI_SR_TDF) == 0) ;
    79e4:	ldr	r5, [r4, #20]
	while (count > 0) {
		// Push out the next byte; 
		port().TDR = p_write? *p_write++ : _transferWriteFill;
		count--; // how many bytes left to output.
		// Make sure queue is not full before pushing next byte out
		do {
    79e6:	lsls	r5, r5, #31
    79e8:	bpl.n	79d0 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]+0x18>

	// Pass 1 keep it simple and don't try packing 8 bits into 16 yet..
	// Lets clear the reader queue
	port().CR = LPSPI_CR_RRF | LPSPI_CR_MEN;	// clear the queue and make sure still enabled. 

	while (count > 0) {
    79ea:	cmp	r3, #0
    79ec:	bne.n	79c6 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]+0xe>
		} while ((port().SR & LPSPI_SR_TDF) == 0) ;

	}

	// now lets wait for all of the read bytes to be returned...
	while (count_read) {
    79ee:	cbz	r6, 7a0c <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]+0x54>
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
private:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    79f0:	ldr	r1, [r0, #0]
		if ((port().RSR & LPSPI_RSR_RXEMPTY) == 0)  {
    79f2:	ldr	r3, [r1, #112]	; 0x70
    79f4:	lsls	r3, r3, #30
    79f6:	bmi.n	79f2 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]+0x3a>
			uint8_t b = port().RDR;  // Read any pending RX bytes in
    79f8:	ldr	r3, [r1, #116]	; 0x74
    79fa:	uxtb	r3, r3
			if (p_read) *p_read++ = b; 
    79fc:	cbz	r2, 7a02 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]+0x4a>
    79fe:	strb	r3, [r2, #0]
    7a00:	adds	r2, #1
			count_read--;
    7a02:	subs	r6, #1
    7a04:	b.n	79ee <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]+0x36>
	// Lets clear the reader queue
	port().CR = LPSPI_CR_RRF | LPSPI_CR_MEN;	// clear the queue and make sure still enabled. 

	while (count > 0) {
		// Push out the next byte; 
		port().TDR = p_write? *p_write++ : _transferWriteFill;
    7a06:	ldrb.w	r5, [r0, #60]	; 0x3c
    7a0a:	b.n	79cc <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]+0x14>
			uint8_t b = port().RDR;  // Read any pending RX bytes in
			if (p_read) *p_read++ = b; 
			count_read--;
		}
	}
}
    7a0c:	pop	{r4, r5, r6}
    7a0e:	bx	lr

00007a10 <_spi_dma_rxISR0()>:
	// Save back out
	port().TCR = tcr;

}

void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    7a10:	push	{r4, r5, r6, r7, lr}

//-------------------------------------------------------------------------
// DMA RX ISR
//-------------------------------------------------------------------------
void SPIClass::dma_rxisr(void) {
	_dmaRX->clearInterrupt();
    7a12:	ldr	r4, [pc, #192]	; (7ad4 <_spi_dma_rxISR0()+0xc4>)
	void detachInterrupt(void) {
		NVIC_DISABLE_IRQ(IRQ_DMA_CH0 + channel);
	}

	void clearInterrupt(void) {
		DMA_CINT = channel;
    7a14:	ldr	r3, [pc, #192]	; (7ad8 <_spi_dma_rxISR0()+0xc8>)
    7a16:	ldr	r0, [r4, #72]	; 0x48
	_dmaTX->clearComplete();
    7a18:	ldr	r5, [r4, #68]	; 0x44
    7a1a:	ldrb	r1, [r0, #4]
	_dmaRX->clearComplete();

	if (_dma_count_remaining) {
    7a1c:	ldr	r2, [r4, #64]	; 0x40
    7a1e:	strb	r1, [r3, #31]
    7a20:	ldrb	r1, [r5, #4]
	bool complete(void) {
		if (TCD->CSR & DMA_TCD_CSR_DONE) return true;
		return false;
	}
	void clearComplete(void) {
		DMA_CDNE = channel;
    7a22:	strb	r1, [r3, #28]
    7a24:	ldrb	r1, [r0, #4]
    7a26:	strb	r1, [r3, #28]
    7a28:	cbz	r2, 7a6a <_spi_dma_rxISR0()+0x5a>
		// What do I need to do to start it back up again...
		// We will use the BITR/CITR from RX as TX may have prefed some stuff
		if (_dma_count_remaining > MAX_DMA_COUNT) {
    7a2a:	cmp.w	r2, #32768	; 0x8000
    7a2e:	bcs.n	7a62 <_spi_dma_rxISR0()+0x52>
    7a30:	ldr	r3, [r5, #0]
#ifndef TRANSFER_COUNT_FIXED
inline void DMAChanneltransferCount(DMAChannel * dmac, unsigned int len) {
	// note does no validation of length...
	DMABaseClass::TCD_t *tcd = dmac->TCD;
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
		tcd->BITER = len & 0x7fff;
    7a32:	uxth	r2, r2
//=========================================================================
#ifndef TRANSFER_COUNT_FIXED
inline void DMAChanneltransferCount(DMAChannel * dmac, unsigned int len) {
	// note does no validation of length...
	DMABaseClass::TCD_t *tcd = dmac->TCD;
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    7a34:	ldrh	r1, [r3, #30]
    7a36:	lsls	r6, r1, #16
    7a38:	bmi.n	7ab2 <_spi_dma_rxISR0()+0xa2>
		tcd->BITER = len & 0x7fff;
    7a3a:	strh	r2, [r3, #30]
	} else {
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
	}
	tcd->CITER = tcd->BITER; 
    7a3c:	ldrh	r1, [r3, #30]
    7a3e:	uxth	r1, r1
    7a40:	strh	r1, [r3, #22]
    7a42:	ldr	r3, [r0, #0]
//=========================================================================
#ifndef TRANSFER_COUNT_FIXED
inline void DMAChanneltransferCount(DMAChannel * dmac, unsigned int len) {
	// note does no validation of length...
	DMABaseClass::TCD_t *tcd = dmac->TCD;
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    7a44:	ldrh	r1, [r3, #30]
    7a46:	lsls	r1, r1, #16
    7a48:	bmi.n	7aa4 <_spi_dma_rxISR0()+0x94>
		tcd->BITER = len & 0x7fff;
	} else {
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
    7a4a:	strh	r2, [r3, #30]
			_dma_count_remaining -= MAX_DMA_COUNT;
		} else {
			DMAChanneltransferCount(_dmaTX, _dma_count_remaining);
			DMAChanneltransferCount(_dmaRX, _dma_count_remaining);

			_dma_count_remaining = 0;
    7a4c:	movs	r1, #0
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
		tcd->BITER = len & 0x7fff;
	} else {
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
	}
	tcd->CITER = tcd->BITER; 
    7a4e:	ldrh	r2, [r3, #30]
    7a50:	uxth	r2, r2
    7a52:	strh	r2, [r3, #22]
			_dma_count_remaining -= MAX_DMA_COUNT;
		} else {
			DMAChanneltransferCount(_dmaTX, _dma_count_remaining);
			DMAChanneltransferCount(_dmaRX, _dma_count_remaining);

			_dma_count_remaining = 0;
    7a54:	str	r1, [r4, #64]	; 0x40
    7a56:	ldrb	r2, [r0, #4]
	/***************************************/
	/**    Enable / Disable               **/
	/***************************************/

	void enable(void) {
		DMA_SERQ = channel;
    7a58:	ldr	r3, [pc, #124]	; (7ad8 <_spi_dma_rxISR0()+0xc8>)
    7a5a:	strb	r2, [r3, #27]
    7a5c:	ldrb	r2, [r5, #4]
    7a5e:	strb	r2, [r3, #27]
    7a60:	pop	{r4, r5, r6, r7, pc}

	if (_dma_count_remaining) {
		// What do I need to do to start it back up again...
		// We will use the BITR/CITR from RX as TX may have prefed some stuff
		if (_dma_count_remaining > MAX_DMA_COUNT) {
			_dma_count_remaining -= MAX_DMA_COUNT;
    7a62:	ldr	r3, [pc, #120]	; (7adc <_spi_dma_rxISR0()+0xcc>)
    7a64:	add	r3, r2
    7a66:	str	r3, [r4, #64]	; 0x40
    7a68:	b.n	7a56 <_spi_dma_rxISR0()+0x46>

		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
		port().SR = 0x3f00;	// clear out all of the other status...

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
		_dma_event_responder->triggerEvent();
    7a6a:	ldr	r0, [r4, #76]	; 0x4c
		}
		_dmaRX->enable();
		_dmaTX->enable();
	} else {

		port().FCR = LPSPI_FCR_TXWATER(15); // _spi_fcr_save;	// restore the FSR status... 
    7a6c:	movs	r5, #15
    7a6e:	ldr	r3, [r4, #0]
 		port().DER = 0;		// DMA no longer doing TX (or RX)

		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
    7a70:	movw	lr, #769	; 0x301
		port().SR = 0x3f00;	// clear out all of the other status...

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
		_dma_event_responder->triggerEvent();
    7a74:	ldr	r1, [r0, #0]

		port().FCR = LPSPI_FCR_TXWATER(15); // _spi_fcr_save;	// restore the FSR status... 
 		port().DER = 0;		// DMA no longer doing TX (or RX)

		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
		port().SR = 0x3f00;	// clear out all of the other status...
    7a76:	mov.w	r7, #16128	; 0x3f00
		}
		_dmaRX->enable();
		_dmaTX->enable();
	} else {

		port().FCR = LPSPI_FCR_TXWATER(15); // _spi_fcr_save;	// restore the FSR status... 
    7a7a:	str	r5, [r3, #88]	; 0x58
 		port().DER = 0;		// DMA no longer doing TX (or RX)

		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
		port().SR = 0x3f00;	// clear out all of the other status...

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
    7a7c:	movs	r6, #3
		_dma_event_responder->triggerEvent();
    7a7e:	ldr	r5, [r1, #0]
    7a80:	ldr	r1, [pc, #92]	; (7ae0 <_spi_dma_rxISR0()+0xd0>)
		_dmaRX->enable();
		_dmaTX->enable();
	} else {

		port().FCR = LPSPI_FCR_TXWATER(15); // _spi_fcr_save;	// restore the FSR status... 
 		port().DER = 0;		// DMA no longer doing TX (or RX)
    7a82:	str	r2, [r3, #28]
    7a84:	cmp	r5, r1

		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
    7a86:	str.w	lr, [r3, #16]
		port().SR = 0x3f00;	// clear out all of the other status...
    7a8a:	str	r7, [r3, #20]

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
    7a8c:	strb.w	r6, [r4, #61]	; 0x3d
    7a90:	bne.n	7ac2 <_spi_dma_rxISR0()+0xb2>
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    7a92:	ldrb	r3, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    7a94:	str	r2, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    7a96:	cmp	r3, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    7a98:	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    7a9a:	beq.n	7acc <_spi_dma_rxISR0()+0xbc>
	// Save back out
	port().TCR = tcr;

}

void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    7a9c:	ldmia.w	sp!, {r4, r5, r6, r7, lr}
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    7aa0:	b.w	f3ac <EventResponder::triggerEventNotImmediate()>
	// note does no validation of length...
	DMABaseClass::TCD_t *tcd = dmac->TCD;
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
		tcd->BITER = len & 0x7fff;
	} else {
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
    7aa4:	ldrh	r1, [r3, #30]
    7aa6:	ubfx	r2, r2, #0, #9
    7aaa:	and.w	r1, r1, #65024	; 0xfe00
    7aae:	orrs	r2, r1
    7ab0:	b.n	7a4a <_spi_dma_rxISR0()+0x3a>
    7ab2:	ldrh	r1, [r3, #30]
    7ab4:	ubfx	r6, r2, #0, #9
    7ab8:	and.w	r1, r1, #65024	; 0xfe00
    7abc:	orrs	r1, r6
    7abe:	strh	r1, [r3, #30]
    7ac0:	b.n	7a3c <_spi_dma_rxISR0()+0x2c>

		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
		port().SR = 0x3f00;	// clear out all of the other status...

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
		_dma_event_responder->triggerEvent();
    7ac2:	mov	r3, r5
    7ac4:	mov	r1, r2
	// Save back out
	port().TCR = tcr;

}

void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    7ac6:	ldmia.w	sp!, {r4, r5, r6, r7, lr}

		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
		port().SR = 0x3f00;	// clear out all of the other status...

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
		_dma_event_responder->triggerEvent();
    7aca:	bx	r3
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    7acc:	ldr	r3, [r0, #8]
	// Save back out
	port().TCR = tcr;

}

void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    7ace:	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    7ad2:	bx	r3
    7ad4:	.word	0x20000bcc
    7ad8:	.word	0x400e8000
    7adc:	.word	0xffff8001
    7ae0:	.word	0x0000799d

00007ae4 <SPIClass::begin()>:
	const SPI_Hardware_t & hardware() { return *(const SPI_Hardware_t *)hardware_addr; }
    7ae4:	ldr	r3, [r0, #4]
#elif defined(__arm__) && defined(TEENSYDUINO) && (defined(__IMXRT1052__) || defined(__IMXRT1062__))

//#include "debug/printf.h"

void SPIClass::begin()
{
    7ae6:	push	{r4, r5, r6, r7, lr}

	// CBCMR[LPSPI_CLK_SEL] - PLL2 = 528 MHz
	// CBCMR[LPSPI_PODF] - div4 = 132 MHz


	hardware().clock_gate_register &= ~hardware().clock_gate_mask;
    7ae8:	ldmia.w	r3, {r1, r7}

	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_LPSPI_PODF_MASK | CCM_CBCMR_LPSPI_CLK_SEL_MASK)) |
    7aec:	ldr.w	lr, [pc, #508]	; 7cec <SPIClass::begin()+0x208>

	uint32_t fastio = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_SPEED(2);
	//uint32_t fastio = IOMUXC_PAD_DSE(6) | IOMUXC_PAD_SPEED(1);
	//uint32_t fastio = IOMUXC_PAD_DSE(3) | IOMUXC_PAD_SPEED(3);
	//Serial.printf("SPI MISO: %d MOSI: %d, SCK: %d\n", hardware().miso_pin[miso_pin_index], hardware().mosi_pin[mosi_pin_index], hardware().sck_pin[sck_pin_index]);
	*(portControlRegister(hardware().miso_pin[miso_pin_index])) = fastio;
    7af0:	movs	r6, #184	; 0xb8

	// CBCMR[LPSPI_CLK_SEL] - PLL2 = 528 MHz
	// CBCMR[LPSPI_PODF] - div4 = 132 MHz


	hardware().clock_gate_register &= ~hardware().clock_gate_mask;
    7af2:	ldr	r2, [r1, #0]
	hardware().mosi_select_input_register = hardware().mosi_select_val[mosi_pin_index];

	//digitalWriteFast(10, HIGH);
	//pinMode(10, OUTPUT);
	//digitalWriteFast(10, HIGH);
	port().CR = LPSPI_CR_RST;
    7af4:	movs	r5, #2


	hardware().clock_gate_register &= ~hardware().clock_gate_mask;

	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_LPSPI_PODF_MASK | CCM_CBCMR_LPSPI_CLK_SEL_MASK)) |
		CCM_CBCMR_LPSPI_PODF(2) | CCM_CBCMR_LPSPI_CLK_SEL(1); // pg 714
    7af6:	ldr	r4, [pc, #468]	; (7ccc <SPIClass::begin()+0x1e8>)

	// CBCMR[LPSPI_CLK_SEL] - PLL2 = 528 MHz
	// CBCMR[LPSPI_PODF] - div4 = 132 MHz


	hardware().clock_gate_register &= ~hardware().clock_gate_mask;
    7af8:	bic.w	r2, r2, r7

	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_LPSPI_PODF_MASK | CCM_CBCMR_LPSPI_CLK_SEL_MASK)) |
		CCM_CBCMR_LPSPI_PODF(2) | CCM_CBCMR_LPSPI_CLK_SEL(1); // pg 714
    7afc:	ldr	r7, [pc, #464]	; (7cd0 <SPIClass::begin()+0x1ec>)

	// CBCMR[LPSPI_CLK_SEL] - PLL2 = 528 MHz
	// CBCMR[LPSPI_PODF] - div4 = 132 MHz


	hardware().clock_gate_register &= ~hardware().clock_gate_mask;
    7afe:	str	r2, [r1, #0]

	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_LPSPI_PODF_MASK | CCM_CBCMR_LPSPI_CLK_SEL_MASK)) |
    7b00:	ldr.w	r2, [lr, #24]
		CCM_CBCMR_LPSPI_PODF(2) | CCM_CBCMR_LPSPI_CLK_SEL(1); // pg 714
    7b04:	ands	r4, r2

	uint32_t fastio = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_SPEED(2);
	//uint32_t fastio = IOMUXC_PAD_DSE(6) | IOMUXC_PAD_SPEED(1);
	//uint32_t fastio = IOMUXC_PAD_DSE(3) | IOMUXC_PAD_SPEED(3);
	//Serial.printf("SPI MISO: %d MOSI: %d, SCK: %d\n", hardware().miso_pin[miso_pin_index], hardware().mosi_pin[mosi_pin_index], hardware().sck_pin[sck_pin_index]);
	*(portControlRegister(hardware().miso_pin[miso_pin_index])) = fastio;
    7b06:	ldr	r2, [pc, #460]	; (7cd4 <SPIClass::begin()+0x1f0>)


	hardware().clock_gate_register &= ~hardware().clock_gate_mask;

	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_LPSPI_PODF_MASK | CCM_CBCMR_LPSPI_CLK_SEL_MASK)) |
		CCM_CBCMR_LPSPI_PODF(2) | CCM_CBCMR_LPSPI_CLK_SEL(1); // pg 714
    7b08:	orrs	r7, r4
	//digitalWriteFast(10, HIGH);
	port().CR = LPSPI_CR_RST;

	// Lets initialize the Transmit FIFO watermark to FIFO size - 1... 
	// BUGBUG:: I assume queue of 16 for now...
	port().FCR = LPSPI_FCR_TXWATER(15);
    7b0a:	movs	r4, #15


	hardware().clock_gate_register &= ~hardware().clock_gate_mask;

	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_LPSPI_PODF_MASK | CCM_CBCMR_LPSPI_CLK_SEL_MASK)) |
		CCM_CBCMR_LPSPI_PODF(2) | CCM_CBCMR_LPSPI_CLK_SEL(1); // pg 714
    7b0c:	str.w	r7, [lr, #24]

	uint32_t fastio = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_SPEED(2);
	//uint32_t fastio = IOMUXC_PAD_DSE(6) | IOMUXC_PAD_SPEED(1);
	//uint32_t fastio = IOMUXC_PAD_DSE(3) | IOMUXC_PAD_SPEED(3);
	//Serial.printf("SPI MISO: %d MOSI: %d, SCK: %d\n", hardware().miso_pin[miso_pin_index], hardware().mosi_pin[mosi_pin_index], hardware().sck_pin[sck_pin_index]);
	*(portControlRegister(hardware().miso_pin[miso_pin_index])) = fastio;
    7b10:	ldrb	r7, [r0, #16]
    7b12:	add	r7, r3
    7b14:	ldrb	r7, [r7, #16]
    7b16:	add.w	r7, r2, r7, lsl #4
    7b1a:	ldr	r7, [r7, #8]
    7b1c:	str	r6, [r7, #0]
	*(portControlRegister(hardware().mosi_pin[mosi_pin_index])) = fastio;
    7b1e:	ldrb	r7, [r0, #17]
    7b20:	add	r7, r3
    7b22:	ldrb.w	r7, [r7, #36]	; 0x24
    7b26:	add.w	r7, r2, r7, lsl #4
    7b2a:	ldr	r7, [r7, #8]
    7b2c:	str	r6, [r7, #0]
	*(portControlRegister(hardware().sck_pin[sck_pin_index])) = fastio;
    7b2e:	ldrb	r7, [r0, #18]
    7b30:	add	r7, r3
    7b32:	ldrb.w	r7, [r7, #56]	; 0x38
    7b36:	add.w	r7, r2, r7, lsl #4
    7b3a:	ldr	r7, [r7, #8]
    7b3c:	str	r6, [r7, #0]

	//printf("CBCMR = %08lX\n", CCM_CBCMR);
	hardware().clock_gate_register |= hardware().clock_gate_mask;
    7b3e:	ldr	r7, [r1, #0]
    7b40:	ldr	r6, [r3, #4]
    7b42:	orrs	r6, r7
    7b44:	str	r6, [r1, #0]
	*(portConfigRegister(hardware().miso_pin[miso_pin_index])) = hardware().miso_mux[miso_pin_index];
    7b46:	ldrb	r1, [r0, #16]
    7b48:	adds	r6, r3, r1
    7b4a:	add.w	r1, r3, r1, lsl #2
    7b4e:	ldrb	r6, [r6, #16]
    7b50:	ldr	r7, [r1, #20]
    7b52:	add.w	r1, r2, r6, lsl #4
    7b56:	ldr	r1, [r1, #4]
    7b58:	str	r7, [r1, #0]
	*(portConfigRegister(hardware().mosi_pin [mosi_pin_index])) = hardware().mosi_mux[mosi_pin_index];
    7b5a:	ldrb	r1, [r0, #17]
    7b5c:	adds	r6, r3, r1
    7b5e:	adds	r1, #10
    7b60:	ldrb.w	r6, [r6, #36]	; 0x24
    7b64:	ldr.w	r7, [r3, r1, lsl #2]
    7b68:	add.w	r1, r2, r6, lsl #4
    7b6c:	ldr	r1, [r1, #4]
    7b6e:	str	r7, [r1, #0]
	*(portConfigRegister(hardware().sck_pin [sck_pin_index])) = hardware().sck_mux[sck_pin_index];
    7b70:	ldrb	r1, [r0, #18]

	// Set the Mux pins 
	//Serial.println("SPI: Set Input select registers");
	hardware().sck_select_input_register = hardware().sck_select_val[sck_pin_index];
    7b72:	ldr.w	lr, [r3, #72]	; 0x48

	//printf("CBCMR = %08lX\n", CCM_CBCMR);
	hardware().clock_gate_register |= hardware().clock_gate_mask;
	*(portConfigRegister(hardware().miso_pin[miso_pin_index])) = hardware().miso_mux[miso_pin_index];
	*(portConfigRegister(hardware().mosi_pin [mosi_pin_index])) = hardware().mosi_mux[mosi_pin_index];
	*(portConfigRegister(hardware().sck_pin [sck_pin_index])) = hardware().sck_mux[sck_pin_index];
    7b76:	adds	r6, r3, r1
    7b78:	add.w	r1, r3, r1, lsl #2

	// Set the Mux pins 
	//Serial.println("SPI: Set Input select registers");
	hardware().sck_select_input_register = hardware().sck_select_val[sck_pin_index];
	hardware().miso_select_input_register = hardware().miso_select_val[miso_pin_index];
    7b7c:	ldr	r7, [r3, #32]

	//printf("CBCMR = %08lX\n", CCM_CBCMR);
	hardware().clock_gate_register |= hardware().clock_gate_mask;
	*(portConfigRegister(hardware().miso_pin[miso_pin_index])) = hardware().miso_mux[miso_pin_index];
	*(portConfigRegister(hardware().mosi_pin [mosi_pin_index])) = hardware().mosi_mux[mosi_pin_index];
	*(portConfigRegister(hardware().sck_pin [sck_pin_index])) = hardware().sck_mux[sck_pin_index];
    7b7e:	ldrb.w	r6, [r6, #56]	; 0x38
    7b82:	ldr	r1, [r1, #60]	; 0x3c
    7b84:	add.w	r2, r2, r6, lsl #4

	// Set the Mux pins 
	//Serial.println("SPI: Set Input select registers");
	hardware().sck_select_input_register = hardware().sck_select_val[sck_pin_index];
	hardware().miso_select_input_register = hardware().miso_select_val[miso_pin_index];
	hardware().mosi_select_input_register = hardware().mosi_select_val[mosi_pin_index];
    7b88:	ldr	r6, [r3, #52]	; 0x34

	//printf("CBCMR = %08lX\n", CCM_CBCMR);
	hardware().clock_gate_register |= hardware().clock_gate_mask;
	*(portConfigRegister(hardware().miso_pin[miso_pin_index])) = hardware().miso_mux[miso_pin_index];
	*(portConfigRegister(hardware().mosi_pin [mosi_pin_index])) = hardware().mosi_mux[mosi_pin_index];
	*(portConfigRegister(hardware().sck_pin [sck_pin_index])) = hardware().sck_mux[sck_pin_index];
    7b8a:	ldr	r2, [r2, #4]
    7b8c:	str	r1, [r2, #0]

	// Set the Mux pins 
	//Serial.println("SPI: Set Input select registers");
	hardware().sck_select_input_register = hardware().sck_select_val[sck_pin_index];
    7b8e:	ldrb	r1, [r0, #18]
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
private:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    7b90:	ldr	r2, [r0, #0]
    7b92:	add	r1, r3
    7b94:	ldrb.w	r1, [r1, #68]	; 0x44
    7b98:	str.w	r1, [lr]
	hardware().miso_select_input_register = hardware().miso_select_val[miso_pin_index];
    7b9c:	ldrb	r1, [r0, #16]
    7b9e:	add	r1, r3
    7ba0:	ldrb	r1, [r1, #28]
    7ba2:	str	r1, [r7, #0]
	hardware().mosi_select_input_register = hardware().mosi_select_val[mosi_pin_index];
    7ba4:	ldrb	r1, [r0, #17]
    7ba6:	add	r3, r1
    7ba8:	ldrb.w	r3, [r3, #48]	; 0x30
    7bac:	str	r3, [r6, #0]

	//digitalWriteFast(10, HIGH);
	//pinMode(10, OUTPUT);
	//digitalWriteFast(10, HIGH);
	port().CR = LPSPI_CR_RST;
    7bae:	str	r5, [r2, #16]

	// Lets initialize the Transmit FIFO watermark to FIFO size - 1... 
	// BUGBUG:: I assume queue of 16 for now...
	port().FCR = LPSPI_FCR_TXWATER(15);
    7bb0:	str	r4, [r2, #88]	; 0x58

	// Before using SPI.transfer() or asserting chip select pins,
	// this function is used to gain exclusive access to the SPI bus
	// and configure the correct settings.
	void beginTransaction(SPISettings settings) {
		if (interruptMasksUsed) {
    7bb2:	ldrb	r3, [r0, #19]
    7bb4:	cmp	r3, #0
    7bb6:	beq.n	7c0c <SPIClass::begin()+0x128>
			__disable_irq();
    7bb8:	cpsid	i
			if (interruptMasksUsed & 0x01) {
    7bba:	ldrb	r3, [r0, #19]
    7bbc:	lsls	r4, r3, #31
    7bbe:	bpl.n	7bce <SPIClass::begin()+0xea>
				interruptSave[0] = NVIC_ICER0 & interruptMask[0];
    7bc0:	ldr	r2, [pc, #276]	; (7cd8 <SPIClass::begin()+0x1f4>)
    7bc2:	ldr	r3, [r0, #20]
    7bc4:	ldr	r1, [r2, #0]
    7bc6:	ands	r3, r1
    7bc8:	str	r3, [r0, #40]	; 0x28
				NVIC_ICER0 = interruptSave[0];
    7bca:	str	r3, [r2, #0]
    7bcc:	ldrb	r3, [r0, #19]
			}
			if (interruptMasksUsed & 0x02) {
    7bce:	lsls	r1, r3, #30
    7bd0:	bpl.n	7be0 <SPIClass::begin()+0xfc>
				interruptSave[1] = NVIC_ICER1 & interruptMask[1];
    7bd2:	ldr	r2, [pc, #264]	; (7cdc <SPIClass::begin()+0x1f8>)
    7bd4:	ldr	r3, [r0, #24]
    7bd6:	ldr	r1, [r2, #0]
    7bd8:	ands	r3, r1
    7bda:	str	r3, [r0, #44]	; 0x2c
				NVIC_ICER1 = interruptSave[1];
    7bdc:	str	r3, [r2, #0]
    7bde:	ldrb	r3, [r0, #19]
			}
			if (interruptMasksUsed & 0x04) {
    7be0:	lsls	r2, r3, #29
    7be2:	bpl.n	7bf2 <SPIClass::begin()+0x10e>
				interruptSave[2] = NVIC_ICER2 & interruptMask[2];
    7be4:	ldr	r2, [pc, #248]	; (7ce0 <SPIClass::begin()+0x1fc>)
    7be6:	ldr	r3, [r0, #28]
    7be8:	ldr	r1, [r2, #0]
    7bea:	ands	r3, r1
    7bec:	str	r3, [r0, #48]	; 0x30
				NVIC_ICER2 = interruptSave[2];
    7bee:	str	r3, [r2, #0]
    7bf0:	ldrb	r3, [r0, #19]
			}
			if (interruptMasksUsed & 0x08) {
    7bf2:	lsls	r7, r3, #28
    7bf4:	bpl.n	7c04 <SPIClass::begin()+0x120>
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
    7bf6:	ldr	r2, [pc, #236]	; (7ce4 <SPIClass::begin()+0x200>)
    7bf8:	ldr	r3, [r0, #32]
    7bfa:	ldr	r1, [r2, #0]
    7bfc:	ands	r3, r1
    7bfe:	str	r3, [r0, #52]	; 0x34
				NVIC_ICER3 = interruptSave[3];
    7c00:	str	r3, [r2, #0]
    7c02:	ldrb	r3, [r0, #19]
			}
			if (interruptMasksUsed & 0x10) {
    7c04:	lsls	r6, r3, #27
    7c06:	bmi.n	7ca0 <SPIClass::begin()+0x1bc>
				interruptSave[4] = NVIC_ICER4 & interruptMask[4];
				NVIC_ICER4 = interruptSave[4];
			}
			__enable_irq();
    7c08:	cpsie	i
    7c0a:	ldr	r2, [r0, #0]
		}
		inTransactionFlag = 1;
		#endif

		//printf("trans\n");
		if (settings.clock() != _clock) {
    7c0c:	ldr	r5, [pc, #216]	; (7ce8 <SPIClass::begin()+0x204>)
    7c0e:	ldr	r3, [r0, #8]
    7c10:	cmp	r3, r5
    7c12:	beq.n	7cae <SPIClass::begin()+0x1ca>
						     396000000}; // PLL2 PFD2				

		    // First save away the new settings..
		    _clock = settings.clock();

			uint32_t cbcmr = CCM_CBCMR;
    7c14:	ldr	r3, [pc, #212]	; (7cec <SPIClass::begin()+0x208>)
						     720000000,  // PLL3 PFD0
						     528000000,  // PLL2
						     396000000}; // PLL2 PFD2				

		    // First save away the new settings..
		    _clock = settings.clock();
    7c16:	str	r5, [r0, #8]

			uint32_t cbcmr = CCM_CBCMR;
    7c18:	ldr	r3, [r3, #24]
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
    7c1a:	ldr	r4, [pc, #212]	; (7cf0 <SPIClass::begin()+0x20c>)
    7c1c:	ubfx	r6, r3, #4, #2
    7c20:	ubfx	r1, r3, #26, #3
			
			uint32_t d, div;		
			d = _clock ? clkhz/_clock : clkhz;
    7c24:	ldr	r3, [pc, #204]	; (7cf4 <SPIClass::begin()+0x210>)

		    // First save away the new settings..
		    _clock = settings.clock();

			uint32_t cbcmr = CCM_CBCMR;
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
    7c26:	ldr.w	r4, [r4, r6, lsl #2]
    7c2a:	adds	r1, #1
    7c2c:	udiv	r1, r4, r1
			
			uint32_t d, div;		
			d = _clock ? clkhz/_clock : clkhz;
    7c30:	umull	r4, r3, r3, r1

			if (d && clkhz/d > _clock) d++;
    7c34:	lsrs	r3, r3, #20
    7c36:	bne.n	7c8c <SPIClass::begin()+0x1a8>
				div = d-2;
			} else {
				div =0;
			}
	
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);
    7c38:	str	r3, [r0, #12]

		} 
		//Serial.printf("SPI.beginTransaction CCR:%x TCR:%x\n", _ccr, settings.tcr);
		port().CR = 0;
    7c3a:	movs	r6, #0
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
    7c3c:	movs	r5, #3
		port().CCR = _ccr;
		port().TCR = settings.tcr;
    7c3e:	movs	r4, #7
		port().CR = LPSPI_CR_MEN;
    7c40:	movs	r1, #1
	
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);

		} 
		//Serial.printf("SPI.beginTransaction CCR:%x TCR:%x\n", _ccr, settings.tcr);
		port().CR = 0;
    7c42:	str	r6, [r2, #16]
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
    7c44:	str	r5, [r2, #36]	; 0x24
		port().CCR = _ccr;
    7c46:	str	r3, [r2, #64]	; 0x40
		port().TCR = settings.tcr;
    7c48:	str	r4, [r2, #96]	; 0x60
		port().CR = LPSPI_CR_MEN;
    7c4a:	str	r1, [r2, #16]
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 0;
		#endif
		if (interruptMasksUsed) {
    7c4c:	ldrb	r3, [r0, #19]
    7c4e:	cbz	r3, 7c8a <SPIClass::begin()+0x1a6>
			if (interruptMasksUsed & 0x01) NVIC_ISER0 = interruptSave[0];
    7c50:	lsls	r5, r3, #31
    7c52:	bpl.n	7c5c <SPIClass::begin()+0x178>
    7c54:	ldr	r3, [pc, #160]	; (7cf8 <SPIClass::begin()+0x214>)
    7c56:	ldr	r2, [r0, #40]	; 0x28
    7c58:	str	r2, [r3, #0]
    7c5a:	ldrb	r3, [r0, #19]
			if (interruptMasksUsed & 0x02) NVIC_ISER1 = interruptSave[1];
    7c5c:	lsls	r4, r3, #30
    7c5e:	bpl.n	7c68 <SPIClass::begin()+0x184>
    7c60:	ldr	r3, [pc, #152]	; (7cfc <SPIClass::begin()+0x218>)
    7c62:	ldr	r2, [r0, #44]	; 0x2c
    7c64:	str	r2, [r3, #0]
    7c66:	ldrb	r3, [r0, #19]
			if (interruptMasksUsed & 0x04) NVIC_ISER2 = interruptSave[2];
    7c68:	lsls	r1, r3, #29
    7c6a:	bpl.n	7c74 <SPIClass::begin()+0x190>
    7c6c:	ldr	r3, [pc, #144]	; (7d00 <SPIClass::begin()+0x21c>)
    7c6e:	ldr	r2, [r0, #48]	; 0x30
    7c70:	str	r2, [r3, #0]
    7c72:	ldrb	r3, [r0, #19]
			if (interruptMasksUsed & 0x08) NVIC_ISER3 = interruptSave[3];
    7c74:	lsls	r2, r3, #28
    7c76:	bpl.n	7c80 <SPIClass::begin()+0x19c>
    7c78:	ldr	r3, [pc, #136]	; (7d04 <SPIClass::begin()+0x220>)
    7c7a:	ldr	r2, [r0, #52]	; 0x34
    7c7c:	str	r2, [r3, #0]
    7c7e:	ldrb	r3, [r0, #19]
			if (interruptMasksUsed & 0x10) NVIC_ISER4 = interruptSave[4];
    7c80:	lsls	r3, r3, #27
    7c82:	bpl.n	7c8a <SPIClass::begin()+0x1a6>
    7c84:	ldr	r2, [r0, #56]	; 0x38
    7c86:	ldr	r3, [pc, #128]	; (7d08 <SPIClass::begin()+0x224>)
    7c88:	str	r2, [r3, #0]
    7c8a:	pop	{r4, r5, r6, r7, pc}
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
			
			uint32_t d, div;		
			d = _clock ? clkhz/_clock : clkhz;

			if (d && clkhz/d > _clock) d++;
    7c8c:	udiv	r1, r1, r3
    7c90:	cmp	r1, r5
    7c92:	it	hi
    7c94:	addhi	r3, #1
			if (d > 257) d= 257;  // max div
    7c96:	cmp.w	r3, #258	; 0x102
    7c9a:	bcc.n	7cb2 <SPIClass::begin()+0x1ce>
    7c9c:	ldr	r3, [pc, #108]	; (7d0c <SPIClass::begin()+0x228>)
    7c9e:	b.n	7c38 <SPIClass::begin()+0x154>
			if (interruptMasksUsed & 0x08) {
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
				NVIC_ICER3 = interruptSave[3];
			}
			if (interruptMasksUsed & 0x10) {
				interruptSave[4] = NVIC_ICER4 & interruptMask[4];
    7ca0:	ldr	r2, [pc, #108]	; (7d10 <SPIClass::begin()+0x22c>)
    7ca2:	ldr	r3, [r0, #36]	; 0x24
    7ca4:	ldr	r1, [r2, #0]
    7ca6:	ands	r3, r1
    7ca8:	str	r3, [r0, #56]	; 0x38
				NVIC_ICER4 = interruptSave[4];
    7caa:	str	r3, [r2, #0]
    7cac:	b.n	7c08 <SPIClass::begin()+0x124>
    7cae:	ldr	r3, [r0, #12]
    7cb0:	b.n	7c3a <SPIClass::begin()+0x156>
			uint32_t d, div;		
			d = _clock ? clkhz/_clock : clkhz;

			if (d && clkhz/d > _clock) d++;
			if (d > 257) d= 257;  // max div
			if (d > 2) {
    7cb2:	cmp	r3, #2
    7cb4:	it	ls
    7cb6:	movls	r3, #0
    7cb8:	bls.n	7c38 <SPIClass::begin()+0x154>
    7cba:	subs	r3, #2
    7cbc:	lsrs	r4, r3, #1
    7cbe:	lsls	r1, r4, #16
    7cc0:	orr.w	r3, r3, r4, lsl #8
    7cc4:	and.w	r1, r1, #16711680	; 0xff0000
    7cc8:	orrs	r3, r1
    7cca:	b.n	7c38 <SPIClass::begin()+0x154>
    7ccc:	.word	0xe3ffffcf
    7cd0:	.word	0x08000010
    7cd4:	.word	0x20000508
    7cd8:	.word	0xe000e180
    7cdc:	.word	0xe000e184
    7ce0:	.word	0xe000e188
    7ce4:	.word	0xe000e18c
    7ce8:	.word	0x003d0900
    7cec:	.word	0x400fc000
    7cf0:	.word	0x200003c8
    7cf4:	.word	0x431bde83
    7cf8:	.word	0xe000e100
    7cfc:	.word	0xe000e104
    7d00:	.word	0xe000e108
    7d04:	.word	0xe000e10c
    7d08:	.word	0xe000e110
    7d0c:	.word	0x007f7fff
    7d10:	.word	0xe000e190

00007d14 <SPIClass::setMOSI(unsigned char)>:
	uint8_t setCS(uint8_t pin);

private:
private:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
	const SPI_Hardware_t & hardware() { return *(const SPI_Hardware_t *)hardware_addr; }
    7d14:	ldr	r2, [r0, #4]
	return 0;
}

void SPIClass::setMOSI(uint8_t pin)
{
	if (pin != hardware().mosi_pin[mosi_pin_index]) {
    7d16:	ldrb	r3, [r0, #17]
    7d18:	add	r3, r2
	}
	return 0;
}

void SPIClass::setMOSI(uint8_t pin)
{
    7d1a:	push	{r4, r5, r6, r7, lr}
	if (pin != hardware().mosi_pin[mosi_pin_index]) {
    7d1c:	ldrb.w	r3, [r3, #36]	; 0x24
    7d20:	cmp	r3, r1
    7d22:	beq.n	7d34 <SPIClass::setMOSI(unsigned char)+0x20>
		for (unsigned int i = 0; i < sizeof(hardware().mosi_pin); i++) {
			if (pin == hardware().mosi_pin[i] ) {
    7d24:	ldrb.w	r3, [r2, #36]	; 0x24
    7d28:	cmp	r1, r3
    7d2a:	beq.n	7d36 <SPIClass::setMOSI(unsigned char)+0x22>
    7d2c:	ldrb.w	r3, [r2, #37]	; 0x25
    7d30:	cmp	r1, r3
    7d32:	beq.n	7d74 <SPIClass::setMOSI(unsigned char)+0x60>
    7d34:	pop	{r4, r5, r6, r7, pc}
    7d36:	movs	r4, #0
    7d38:	mov	r1, r4
				if (hardware().clock_gate_register & hardware().clock_gate_mask) {
    7d3a:	ldr	r6, [r2, #0]
    7d3c:	ldr	r5, [r2, #4]
    7d3e:	ldr	r6, [r6, #0]
    7d40:	tst	r6, r5
    7d42:	beq.n	7d70 <SPIClass::setMOSI(unsigned char)+0x5c>
					// BUGBUG:: Unclear what to do with previous pin as there is no unused setting like t3.x
					uint32_t fastio = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_SPEED(2);
					*(portControlRegister(hardware().mosi_pin[i])) = fastio;
    7d44:	ldr	r5, [pc, #52]	; (7d7c <SPIClass::setMOSI(unsigned char)+0x68>)
					*(portConfigRegister(hardware().mosi_pin [i])) = hardware().mosi_mux[i];
    7d46:	adds	r6, r2, r1
		for (unsigned int i = 0; i < sizeof(hardware().mosi_pin); i++) {
			if (pin == hardware().mosi_pin[i] ) {
				if (hardware().clock_gate_register & hardware().clock_gate_mask) {
					// BUGBUG:: Unclear what to do with previous pin as there is no unused setting like t3.x
					uint32_t fastio = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_SPEED(2);
					*(portControlRegister(hardware().mosi_pin[i])) = fastio;
    7d48:	mov.w	lr, #184	; 0xb8
					*(portConfigRegister(hardware().mosi_pin [i])) = hardware().mosi_mux[i];
					hardware().mosi_select_input_register = hardware().mosi_select_val[i];
    7d4c:	ldr	r7, [r2, #52]	; 0x34
		for (unsigned int i = 0; i < sizeof(hardware().mosi_pin); i++) {
			if (pin == hardware().mosi_pin[i] ) {
				if (hardware().clock_gate_register & hardware().clock_gate_mask) {
					// BUGBUG:: Unclear what to do with previous pin as there is no unused setting like t3.x
					uint32_t fastio = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_SPEED(2);
					*(portControlRegister(hardware().mosi_pin[i])) = fastio;
    7d4e:	add.w	r3, r5, r3, lsl #4
					*(portConfigRegister(hardware().mosi_pin [i])) = hardware().mosi_mux[i];
    7d52:	adds	r1, #10
		for (unsigned int i = 0; i < sizeof(hardware().mosi_pin); i++) {
			if (pin == hardware().mosi_pin[i] ) {
				if (hardware().clock_gate_register & hardware().clock_gate_mask) {
					// BUGBUG:: Unclear what to do with previous pin as there is no unused setting like t3.x
					uint32_t fastio = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_SPEED(2);
					*(portControlRegister(hardware().mosi_pin[i])) = fastio;
    7d54:	ldr	r3, [r3, #8]
    7d56:	str.w	lr, [r3]
					*(portConfigRegister(hardware().mosi_pin [i])) = hardware().mosi_mux[i];
    7d5a:	ldrb.w	r3, [r6, #36]	; 0x24
    7d5e:	ldr.w	r2, [r2, r1, lsl #2]
    7d62:	add.w	r5, r5, r3, lsl #4
    7d66:	ldr	r3, [r5, #4]
    7d68:	str	r2, [r3, #0]
					hardware().mosi_select_input_register = hardware().mosi_select_val[i];
    7d6a:	ldrb.w	r3, [r6, #48]	; 0x30
    7d6e:	str	r3, [r7, #0]
				}	
				mosi_pin_index = i;
    7d70:	strb	r4, [r0, #17]
				return;
    7d72:	b.n	7d34 <SPIClass::setMOSI(unsigned char)+0x20>

void SPIClass::setMOSI(uint8_t pin)
{
	if (pin != hardware().mosi_pin[mosi_pin_index]) {
		for (unsigned int i = 0; i < sizeof(hardware().mosi_pin); i++) {
			if (pin == hardware().mosi_pin[i] ) {
    7d74:	movs	r4, #1
}

void SPIClass::setMOSI(uint8_t pin)
{
	if (pin != hardware().mosi_pin[mosi_pin_index]) {
		for (unsigned int i = 0; i < sizeof(hardware().mosi_pin); i++) {
    7d76:	mov	r1, r4
    7d78:	b.n	7d3a <SPIClass::setMOSI(unsigned char)+0x26>
    7d7a:	nop
    7d7c:	.word	0x20000508

00007d80 <SPIClass::setMISO(unsigned char)>:
    7d80:	ldr	r2, [r0, #4]
	}
}

void SPIClass::setMISO(uint8_t pin)
{
	if (pin != hardware().miso_pin[miso_pin_index]) {
    7d82:	ldrb	r3, [r0, #16]
    7d84:	add	r3, r2
		}
	}
}

void SPIClass::setMISO(uint8_t pin)
{
    7d86:	push	{r4, r5, r6, r7}
	if (pin != hardware().miso_pin[miso_pin_index]) {
    7d88:	ldrb	r3, [r3, #16]
    7d8a:	cmp	r3, r1
    7d8c:	beq.n	7d9a <SPIClass::setMISO(unsigned char)+0x1a>
		for (unsigned int i = 0; i < sizeof(hardware().miso_pin); i++) {
			if (pin == hardware().miso_pin[i] ) {
    7d8e:	ldrb	r3, [r2, #16]
    7d90:	cmp	r1, r3
    7d92:	beq.n	7d9e <SPIClass::setMISO(unsigned char)+0x1e>
    7d94:	ldrb	r3, [r2, #17]
    7d96:	cmp	r1, r3
    7d98:	beq.n	7dd6 <SPIClass::setMISO(unsigned char)+0x56>
				miso_pin_index = i;
				return;
			}
		}
	}
}
    7d9a:	pop	{r4, r5, r6, r7}
    7d9c:	bx	lr

void SPIClass::setMISO(uint8_t pin)
{
	if (pin != hardware().miso_pin[miso_pin_index]) {
		for (unsigned int i = 0; i < sizeof(hardware().miso_pin); i++) {
			if (pin == hardware().miso_pin[i] ) {
    7d9e:	movs	r4, #0
    7da0:	mov	r1, r4
				if (hardware().clock_gate_register & hardware().clock_gate_mask) {
    7da2:	ldr	r6, [r2, #0]
    7da4:	ldr	r5, [r2, #4]
    7da6:	ldr	r6, [r6, #0]
    7da8:	tst	r6, r5
    7daa:	beq.n	7dd2 <SPIClass::setMISO(unsigned char)+0x52>
					// BUGBUG:: Unclear what to do with previous pin as there is no unused setting like t3.x
					uint32_t fastio = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_SPEED(2);
					*(portControlRegister(hardware().miso_pin[i])) = fastio;
    7dac:	ldr	r5, [pc, #44]	; (7ddc <SPIClass::setMISO(unsigned char)+0x5c>)
					*(portConfigRegister(hardware().miso_pin[i])) = hardware().miso_mux[i];
    7dae:	adds	r6, r2, r1
		for (unsigned int i = 0; i < sizeof(hardware().miso_pin); i++) {
			if (pin == hardware().miso_pin[i] ) {
				if (hardware().clock_gate_register & hardware().clock_gate_mask) {
					// BUGBUG:: Unclear what to do with previous pin as there is no unused setting like t3.x
					uint32_t fastio = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_SPEED(2);
					*(portControlRegister(hardware().miso_pin[i])) = fastio;
    7db0:	movs	r7, #184	; 0xb8
					*(portConfigRegister(hardware().miso_pin[i])) = hardware().miso_mux[i];
    7db2:	adds	r1, #4
		for (unsigned int i = 0; i < sizeof(hardware().miso_pin); i++) {
			if (pin == hardware().miso_pin[i] ) {
				if (hardware().clock_gate_register & hardware().clock_gate_mask) {
					// BUGBUG:: Unclear what to do with previous pin as there is no unused setting like t3.x
					uint32_t fastio = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_SPEED(2);
					*(portControlRegister(hardware().miso_pin[i])) = fastio;
    7db4:	add.w	r3, r5, r3, lsl #4
					*(portConfigRegister(hardware().miso_pin[i])) = hardware().miso_mux[i];
    7db8:	add.w	r1, r2, r1, lsl #2
					hardware().miso_select_input_register = hardware().miso_select_val[i];
    7dbc:	ldr	r2, [r2, #32]
		for (unsigned int i = 0; i < sizeof(hardware().miso_pin); i++) {
			if (pin == hardware().miso_pin[i] ) {
				if (hardware().clock_gate_register & hardware().clock_gate_mask) {
					// BUGBUG:: Unclear what to do with previous pin as there is no unused setting like t3.x
					uint32_t fastio = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_SPEED(2);
					*(portControlRegister(hardware().miso_pin[i])) = fastio;
    7dbe:	ldr	r3, [r3, #8]
    7dc0:	str	r7, [r3, #0]
					*(portConfigRegister(hardware().miso_pin[i])) = hardware().miso_mux[i];
    7dc2:	ldrb	r3, [r6, #16]
    7dc4:	ldr	r1, [r1, #4]
    7dc6:	add.w	r5, r5, r3, lsl #4
    7dca:	ldr	r3, [r5, #4]
    7dcc:	str	r1, [r3, #0]
					hardware().miso_select_input_register = hardware().miso_select_val[i];
    7dce:	ldrb	r3, [r6, #28]
    7dd0:	str	r3, [r2, #0]
				}	
				miso_pin_index = i;
    7dd2:	strb	r4, [r0, #16]
				return;
    7dd4:	b.n	7d9a <SPIClass::setMISO(unsigned char)+0x1a>

void SPIClass::setMISO(uint8_t pin)
{
	if (pin != hardware().miso_pin[miso_pin_index]) {
		for (unsigned int i = 0; i < sizeof(hardware().miso_pin); i++) {
			if (pin == hardware().miso_pin[i] ) {
    7dd6:	movs	r4, #1
}

void SPIClass::setMISO(uint8_t pin)
{
	if (pin != hardware().miso_pin[miso_pin_index]) {
		for (unsigned int i = 0; i < sizeof(hardware().miso_pin); i++) {
    7dd8:	mov	r1, r4
    7dda:	b.n	7da2 <SPIClass::setMISO(unsigned char)+0x22>
    7ddc:	.word	0x20000508

00007de0 <SPIClass::setSCK(unsigned char)>:
    7de0:	ldr	r2, [r0, #4]
	}
}

void SPIClass::setSCK(uint8_t pin)
{
	if (pin != hardware().sck_pin[sck_pin_index]) {
    7de2:	ldrb	r3, [r0, #18]
    7de4:	add	r3, r2
		}
	}
}

void SPIClass::setSCK(uint8_t pin)
{
    7de6:	push	{r4, r5, r6, r7}
	if (pin != hardware().sck_pin[sck_pin_index]) {
    7de8:	ldrb.w	r3, [r3, #56]	; 0x38
    7dec:	cmp	r3, r1
    7dee:	beq.n	7e00 <SPIClass::setSCK(unsigned char)+0x20>
		for (unsigned int i = 0; i < sizeof(hardware().sck_pin); i++) {
			if (pin == hardware().sck_pin[i] ) {
    7df0:	ldrb.w	r3, [r2, #56]	; 0x38
    7df4:	cmp	r1, r3
    7df6:	beq.n	7e04 <SPIClass::setSCK(unsigned char)+0x24>
    7df8:	ldrb.w	r3, [r2, #57]	; 0x39
    7dfc:	cmp	r1, r3
    7dfe:	beq.n	7e40 <SPIClass::setSCK(unsigned char)+0x60>
				sck_pin_index = i;
				return;
			}
		}
	}
}
    7e00:	pop	{r4, r5, r6, r7}
    7e02:	bx	lr

void SPIClass::setSCK(uint8_t pin)
{
	if (pin != hardware().sck_pin[sck_pin_index]) {
		for (unsigned int i = 0; i < sizeof(hardware().sck_pin); i++) {
			if (pin == hardware().sck_pin[i] ) {
    7e04:	movs	r4, #0
    7e06:	mov	r1, r4
				if (hardware().clock_gate_register & hardware().clock_gate_mask) {
    7e08:	ldr	r6, [r2, #0]
    7e0a:	ldr	r5, [r2, #4]
    7e0c:	ldr	r6, [r6, #0]
    7e0e:	tst	r6, r5
    7e10:	beq.n	7e3c <SPIClass::setSCK(unsigned char)+0x5c>
					// BUGBUG:: Unclear what to do with previous pin as there is no unused setting like t3.x
					uint32_t fastio = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_SPEED(2);
					*(portControlRegister(hardware().sck_pin[i])) = fastio;
    7e12:	ldr	r5, [pc, #52]	; (7e48 <SPIClass::setSCK(unsigned char)+0x68>)
					*(portConfigRegister(hardware().sck_pin [i])) = hardware().sck_mux[i];
    7e14:	adds	r6, r2, r1
		for (unsigned int i = 0; i < sizeof(hardware().sck_pin); i++) {
			if (pin == hardware().sck_pin[i] ) {
				if (hardware().clock_gate_register & hardware().clock_gate_mask) {
					// BUGBUG:: Unclear what to do with previous pin as there is no unused setting like t3.x
					uint32_t fastio = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_SPEED(2);
					*(portControlRegister(hardware().sck_pin[i])) = fastio;
    7e16:	movs	r7, #184	; 0xb8
					*(portConfigRegister(hardware().sck_pin [i])) = hardware().sck_mux[i];
    7e18:	adds	r1, #14
		for (unsigned int i = 0; i < sizeof(hardware().sck_pin); i++) {
			if (pin == hardware().sck_pin[i] ) {
				if (hardware().clock_gate_register & hardware().clock_gate_mask) {
					// BUGBUG:: Unclear what to do with previous pin as there is no unused setting like t3.x
					uint32_t fastio = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_SPEED(2);
					*(portControlRegister(hardware().sck_pin[i])) = fastio;
    7e1a:	add.w	r3, r5, r3, lsl #4
					*(portConfigRegister(hardware().sck_pin [i])) = hardware().sck_mux[i];
    7e1e:	add.w	r1, r2, r1, lsl #2
					hardware().sck_select_input_register = hardware().sck_select_val[i];
    7e22:	ldr	r2, [r2, #72]	; 0x48
		for (unsigned int i = 0; i < sizeof(hardware().sck_pin); i++) {
			if (pin == hardware().sck_pin[i] ) {
				if (hardware().clock_gate_register & hardware().clock_gate_mask) {
					// BUGBUG:: Unclear what to do with previous pin as there is no unused setting like t3.x
					uint32_t fastio = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_SPEED(2);
					*(portControlRegister(hardware().sck_pin[i])) = fastio;
    7e24:	ldr	r3, [r3, #8]
    7e26:	str	r7, [r3, #0]
					*(portConfigRegister(hardware().sck_pin [i])) = hardware().sck_mux[i];
    7e28:	ldrb.w	r3, [r6, #56]	; 0x38
    7e2c:	ldr	r1, [r1, #4]
    7e2e:	add.w	r5, r5, r3, lsl #4
    7e32:	ldr	r3, [r5, #4]
    7e34:	str	r1, [r3, #0]
					hardware().sck_select_input_register = hardware().sck_select_val[i];
    7e36:	ldrb.w	r3, [r6, #68]	; 0x44
    7e3a:	str	r3, [r2, #0]
				}	
				sck_pin_index = i;
    7e3c:	strb	r4, [r0, #18]
				return;
    7e3e:	b.n	7e00 <SPIClass::setSCK(unsigned char)+0x20>

void SPIClass::setSCK(uint8_t pin)
{
	if (pin != hardware().sck_pin[sck_pin_index]) {
		for (unsigned int i = 0; i < sizeof(hardware().sck_pin); i++) {
			if (pin == hardware().sck_pin[i] ) {
    7e40:	movs	r4, #1
}

void SPIClass::setSCK(uint8_t pin)
{
	if (pin != hardware().sck_pin[sck_pin_index]) {
		for (unsigned int i = 0; i < sizeof(hardware().sck_pin); i++) {
    7e42:	mov	r1, r4
    7e44:	b.n	7e08 <SPIClass::setSCK(unsigned char)+0x28>
    7e46:	nop
    7e48:	.word	0x20000508

00007e4c <SPIClass::transfer(void const*, void*, unsigned int)>:
}

void SPIClass::transfer(const void * buf, void * retbuf, size_t count)
{

	if (count == 0) return;
    7e4c:	cbz	r3, 7e52 <SPIClass::transfer(void const*, void*, unsigned int)+0x6>
    7e4e:	b.w	79b8 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]>
    7e52:	bx	lr

00007e54 <ExFatFile::close()>:
#include "../common/DebugMacros.h"
#include "ExFatFile.h"
#include "ExFatVolume.h"
#include "upcase.h"
//-----------------------------------------------------------------------------
bool ExFatFile::close() {
    7e54:	push	{r4, lr}
    7e56:	mov	r4, r0
  bool rtn = sync();
    7e58:	bl	9140 <ExFatFile::sync()>
  m_attributes = FILE_ATTR_CLOSED;
    7e5c:	movs	r3, #0
    7e5e:	strb.w	r3, [r4, #49]	; 0x31
  m_flags = 0;
    7e62:	strb.w	r3, [r4, #51]	; 0x33
  return rtn;
}
    7e66:	pop	{r4, pc}

00007e68 <ExFatFile::getName(char*, unsigned int)>:
void ExFatFile::fsetpos(const fspos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
}
//-----------------------------------------------------------------------------
size_t ExFatFile::getName(ExChar_t *name, size_t length) {
    7e68:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  DirName_t* dn;
  DirPos_t pos = m_dirPos;
    7e6c:	add.w	r3, r0, #36	; 0x24
void ExFatFile::fsetpos(const fspos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
}
//-----------------------------------------------------------------------------
size_t ExFatFile::getName(ExChar_t *name, size_t length) {
    7e70:	sub	sp, #20
    7e72:	mov	r6, r0
    7e74:	mov	r8, r1
    7e76:	mov	r5, r2
  DirName_t* dn;
  DirPos_t pos = m_dirPos;
    7e78:	add.w	r9, sp, #4
  size_t n = 0;
  if (!isOpen()) {
    7e7c:	ldrb.w	r4, [r0, #49]	; 0x31
  m_curCluster = pos->cluster;
}
//-----------------------------------------------------------------------------
size_t ExFatFile::getName(ExChar_t *name, size_t length) {
  DirName_t* dn;
  DirPos_t pos = m_dirPos;
    7e80:	ldmia.w	r3, {r0, r1, r2}
    7e84:	stmia.w	r9, {r0, r1, r2}
  size_t n = 0;
  if (!isOpen()) {
    7e88:	cmp	r4, #0
    7e8a:	beq.n	7efe <ExFatFile::getName(char*, unsigned int)+0x96>
      DBG_FAIL_MACRO;
      goto fail;
  }
  for (uint8_t is = 1; is < m_setCount; is++) {
    7e8c:	ldrb.w	r3, [r6, #48]	; 0x30
    7e90:	cmp	r3, #1
    7e92:	bls.n	7f0c <ExFatFile::getName(char*, unsigned int)+0xa4>
    7e94:	movs	r7, #1
    7e96:	movs	r4, #0
    if (m_vol->dirSeek(&pos, is == 1 ? 64: 32) != 1) {
    7e98:	cmp	r7, #1
    7e9a:	mov	r1, r9
    7e9c:	ldr	r0, [r6, #32]
    7e9e:	ite	eq
    7ea0:	moveq	r2, #64	; 0x40
    7ea2:	movne	r2, #32
    7ea4:	bl	8bf4 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)>
    7ea8:	cmp	r0, #1
    7eaa:	bne.n	7efe <ExFatFile::getName(char*, unsigned int)+0x96>
      DBG_FAIL_MACRO;
      goto fail;
    }
    dn = reinterpret_cast<DirName_t*>
         (m_vol->dirCache(&pos, FsCache::CACHE_FOR_READ));
    7eac:	movs	r2, #0
    7eae:	mov	r1, r9
    7eb0:	ldr	r0, [r6, #32]
    7eb2:	bl	8bbc <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
    if (!dn || dn->type != EXFAT_TYPE_NAME) {
    7eb6:	cbz	r0, 7efe <ExFatFile::getName(char*, unsigned int)+0x96>
    7eb8:	ldrb	r3, [r0, #0]
    7eba:	cmp	r3, #193	; 0xc1
    7ebc:	bne.n	7efe <ExFatFile::getName(char*, unsigned int)+0x96>
    7ebe:	add.w	r1, r8, r4
    7ec2:	mov	r2, r4
    7ec4:	add.w	lr, r0, #30
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (uint8_t in = 0; in < 15; in++) {
      if ((n + 1) >= length) {
    7ec8:	adds	r4, #1
        goto done;
      }
      uint16_t c = getLe16(dn->unicode + 2*in);
      name[n++] = sizeof(ExChar_t) > 1 || c < 0X7F ? c : '?';
    7eca:	movs	r3, #63	; 0x3f
    if (!dn || dn->type != EXFAT_TYPE_NAME) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (uint8_t in = 0; in < 15; in++) {
      if ((n + 1) >= length) {
    7ecc:	cmp	r4, r5
    7ece:	bcs.n	7ef0 <ExFatFile::getName(char*, unsigned int)+0x88>
void lbaToMbrChs(uint8_t* chs, uint32_t capacityMB, uint32_t lba);
//-----------------------------------------------------------------------------
#if !defined(USE_SIMPLE_LITTLE_ENDIAN) || USE_SIMPLE_LITTLE_ENDIAN
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
    7ed0:	ldrh.w	r2, [r0, #2]!
        goto done;
      }
      uint16_t c = getLe16(dn->unicode + 2*in);
      name[n++] = sizeof(ExChar_t) > 1 || c < 0X7F ? c : '?';
    7ed4:	cmp	r2, #126	; 0x7e
    7ed6:	it	ls
    7ed8:	uxtbls	r3, r2
         (m_vol->dirCache(&pos, FsCache::CACHE_FOR_READ));
    if (!dn || dn->type != EXFAT_TYPE_NAME) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (uint8_t in = 0; in < 15; in++) {
    7eda:	cmp	r0, lr
    7edc:	mov	r2, r4
      if ((n + 1) >= length) {
        goto done;
      }
      uint16_t c = getLe16(dn->unicode + 2*in);
      name[n++] = sizeof(ExChar_t) > 1 || c < 0X7F ? c : '?';
    7ede:	strb.w	r3, [r1], #1
         (m_vol->dirCache(&pos, FsCache::CACHE_FOR_READ));
    if (!dn || dn->type != EXFAT_TYPE_NAME) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (uint8_t in = 0; in < 15; in++) {
    7ee2:	bne.n	7ec8 <ExFatFile::getName(char*, unsigned int)+0x60>
  size_t n = 0;
  if (!isOpen()) {
      DBG_FAIL_MACRO;
      goto fail;
  }
  for (uint8_t is = 1; is < m_setCount; is++) {
    7ee4:	adds	r7, #1
    7ee6:	ldrb.w	r3, [r6, #48]	; 0x30
    7eea:	uxtb	r7, r7
    7eec:	cmp	r3, r7
    7eee:	bhi.n	7e98 <ExFatFile::getName(char*, unsigned int)+0x30>
      uint16_t c = getLe16(dn->unicode + 2*in);
      name[n++] = sizeof(ExChar_t) > 1 || c < 0X7F ? c : '?';
    }
  }
 done:
  name[n] = 0;
    7ef0:	movs	r3, #0
  return n;
    7ef2:	mov	r0, r2
      uint16_t c = getLe16(dn->unicode + 2*in);
      name[n++] = sizeof(ExChar_t) > 1 || c < 0X7F ? c : '?';
    }
  }
 done:
  name[n] = 0;
    7ef4:	strb.w	r3, [r8, r2]
  return n;

 fail:
  *name = 0;
  return 0;
}
    7ef8:	add	sp, #20
    7efa:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 done:
  name[n] = 0;
  return n;

 fail:
  *name = 0;
    7efe:	movs	r3, #0
  return 0;
    7f00:	mov	r0, r3
 done:
  name[n] = 0;
  return n;

 fail:
  *name = 0;
    7f02:	strb.w	r3, [r8]
  return 0;
}
    7f06:	add	sp, #20
    7f08:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  size_t n = 0;
  if (!isOpen()) {
      DBG_FAIL_MACRO;
      goto fail;
  }
  for (uint8_t is = 1; is < m_setCount; is++) {
    7f0c:	movs	r2, #0
    7f0e:	b.n	7ef0 <ExFatFile::getName(char*, unsigned int)+0x88>

00007f10 <ExFatFile::openRoot(ExFatVolume*)>:
  m_flags = 0;
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::openRoot(ExFatVolume* vol) {
  if (isOpen()) {
    7f10:	ldrb.w	r2, [r0, #49]	; 0x31
    7f14:	cbz	r2, 7f1a <ExFatFile::openRoot(ExFatVolume*)+0xa>
  m_vol = vol;
  m_flags = FILE_FLAG_READ;
  return true;

 fail:
  return false;
    7f16:	movs	r0, #0
    7f18:	bx	lr
  m_attributes = FILE_ATTR_CLOSED;
  m_flags = 0;
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::openRoot(ExFatVolume* vol) {
    7f1a:	push	{r3, r4, r5, lr}
    7f1c:	mov	r5, r1
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
    7f1e:	mov	r1, r2
    7f20:	movs	r2, #56	; 0x38
    7f22:	mov	r4, r0
    7f24:	bl	10d7c <memset>
  m_attributes = FILE_ATTR_ROOT;
    7f28:	movs	r3, #64	; 0x40
  m_vol = vol;
  m_flags = FILE_FLAG_READ;
    7f2a:	movs	r0, #1
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
  m_attributes = FILE_ATTR_ROOT;
  m_vol = vol;
    7f2c:	str	r5, [r4, #32]
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
  m_attributes = FILE_ATTR_ROOT;
    7f2e:	strb.w	r3, [r4, #49]	; 0x31
  m_vol = vol;
  m_flags = FILE_FLAG_READ;
    7f32:	strb.w	r0, [r4, #51]	; 0x33
    7f36:	pop	{r3, r4, r5, pc}

00007f38 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>:
 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::parsePathName(const ExChar_t* path,
                            ExName_t* fname, const ExChar_t** ptr) {
    7f38:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  ExChar_t c;
  int end;
  int len = 0;

  // Skip leading spaces.
  while (*path == ' ') {
    7f3c:	ldrb	r0, [r1, #0]
    7f3e:	cmp	r0, #32
    7f40:	bne.n	7f4a <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x12>
    7f42:	ldrb.w	r0, [r1, #1]!
    7f46:	cmp	r0, #32
    7f48:	beq.n	7f42 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xa>
    path++;
  }
  fname->lfn = path;
    7f4a:	str	r1, [r2, #4]

  for (len = 0; ; len++) {
    c = path[len];
    7f4c:	ldrb	r0, [r1, #0]
    if (c == 0 || isDirSeparator(c)) {
    7f4e:	cmp	r0, #47	; 0x2f
    7f50:	beq.n	801c <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xe4>
    7f52:	cmp	r0, #0
    7f54:	beq.n	801c <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xe4>
 * \param[in] c character to be tested.
 *
 * \return true for legal character else false.
 */
inline bool lfnLegalChar(ExChar_t c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
    7f56:	cmp	r0, #92	; 0x5c
    7f58:	beq.n	7fa6 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x6e>
    7f5a:	sub.w	r4, r0, #34	; 0x22
    7f5e:	uxtb	r4, r4
    7f60:	cmp	r4, #26
    7f62:	bls.n	7fac <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x74>
    7f64:	adds	r5, r1, #1
 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::parsePathName(const ExChar_t* path,
                            ExName_t* fname, const ExChar_t** ptr) {
    7f66:	movs	r6, #0
    7f68:	ldr.w	lr, [pc, #196]	; 8030 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xf8>
    7f6c:	b.n	7f76 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x3e>
    7f6e:	cmp	r4, #26
    7f70:	lsr.w	r7, lr, r4
    7f74:	bls.n	7fbc <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x84>
      c == ':' || c == '<' || c == '>' || c == '?' || c == '|') {
    7f76:	sub.w	r4, r0, #62	; 0x3e
  while (*path == ' ') {
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    7f7a:	adds	r6, #1
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
    7f7c:	sub.w	ip, r0, #32
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    c = path[len];
    7f80:	mov	r8, r5
    7f82:	cmp	r4, #1
    7f84:	mov	r7, r6
    7f86:	bls.n	7fa6 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x6e>
    7f88:	cmp	r0, #124	; 0x7c
    7f8a:	beq.n	7fa6 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x6e>
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
    7f8c:	cmp.w	ip, #94	; 0x5e
    7f90:	bhi.n	7fa6 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x6e>
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    c = path[len];
    7f92:	ldrb.w	r0, [r5], #1
 * \param[in] c character to be tested.
 *
 * \return true for legal character else false.
 */
inline bool lfnLegalChar(ExChar_t c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
    7f96:	sub.w	r4, r0, #34	; 0x22
    if (c == 0 || isDirSeparator(c)) {
    7f9a:	cbz	r0, 7fc6 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x8e>
    7f9c:	cmp	r0, #47	; 0x2f
    7f9e:	uxtb	r4, r4
    7fa0:	beq.n	7fc6 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x8e>
    7fa2:	cmp	r0, #92	; 0x5c
    7fa4:	bne.n	7f6e <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x36>
      break;
    }
    if (!lfnLegalChar(c)) {
      return false;
    7fa6:	movs	r0, #0
    7fa8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7fac:	ldr	r5, [pc, #128]	; (8030 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xf8>)
    7fae:	lsr.w	r4, r5, r4
    7fb2:	lsls	r5, r4, #31
    7fb4:	bpl.n	7f64 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x2c>
    7fb6:	movs	r0, #0
    7fb8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7fbc:	lsls	r4, r7, #31
    7fbe:	bpl.n	7f76 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x3e>
    7fc0:	movs	r0, #0
    7fc2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    }
  }
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
    7fc6:	cmp	r0, #47	; 0x2f
    7fc8:	beq.n	7fce <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x96>
    7fca:	cmp	r0, #32
    7fcc:	bne.n	8016 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xde>
    7fce:	adds	r0, r6, #1
    7fd0:	add	r0, r1
    7fd2:	mov	r5, r0
    7fd4:	ldrb.w	r4, [r0], #1
    7fd8:	cmp	r4, #32
    7fda:	beq.n	7fd2 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x9a>
    7fdc:	cmp	r4, #47	; 0x2f
    7fde:	beq.n	7fd2 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x9a>
  *ptr = &path[end];
    7fe0:	str	r5, [r3, #0]

  // Back over spaces and dots.
  while (len) {
    7fe2:	cbz	r6, 800c <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xd4>
    c = path[len - 1];
    7fe4:	add	r7, r1
    7fe6:	ldrb.w	r3, [r7, #-1]
    if (c != '.' && c != ' ') {
    7fea:	cmp	r3, #32
    7fec:	beq.n	7ff2 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xba>
    7fee:	cmp	r3, #46	; 0x2e
    7ff0:	bne.n	8008 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xd0>
    7ff2:	subs	r3, r6, #1
    7ff4:	add	r1, r3
      break;
    }
    len--;
    7ff6:	mov	r6, r3
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
  *ptr = &path[end];

  // Back over spaces and dots.
  while (len) {
    7ff8:	cbz	r3, 800e <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xd6>
    c = path[len - 1];
    7ffa:	ldrb.w	r0, [r1, #-1]!
    7ffe:	subs	r3, #1
    if (c != '.' && c != ' ') {
    8000:	cmp	r0, #46	; 0x2e
    8002:	beq.n	7ff6 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xbe>
    8004:	cmp	r0, #32
    8006:	beq.n	7ff6 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xbe>
      break;
    }
    len--;
  }
  // Max length of LFN is 255.
  if (len > EXFAT_MAX_NAME_LENGTH) {
    8008:	cmp	r6, #255	; 0xff
    800a:	bgt.n	7fa6 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x6e>
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
  *ptr = &path[end];

  // Back over spaces and dots.
  while (len) {
    800c:	mov	r3, r6
  }
  // Max length of LFN is 255.
  if (len > EXFAT_MAX_NAME_LENGTH) {
    return false;
  }
  fname->len = len;
    800e:	str	r3, [r2, #0]
  return true;
    8010:	movs	r0, #1
    8012:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return false;
    }
  }
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
  *ptr = &path[end];
    8016:	str.w	r8, [r3]
    801a:	b.n	7fe4 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xac>
    if (!lfnLegalChar(c)) {
      return false;
    }
  }
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
    801c:	cmp	r0, #32
    801e:	beq.n	8024 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xec>
    8020:	cmp	r0, #47	; 0x2f
    8022:	bne.n	802a <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xf2>
    8024:	movs	r7, #0
  while (*path == ' ') {
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    8026:	mov	r6, r7
    8028:	b.n	7fce <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x96>
      return false;
    }
  }
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
  *ptr = &path[end];
    802a:	str	r1, [r3, #0]
    802c:	movs	r3, #0
    802e:	b.n	800e <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xd6>
    8030:	.word	0x05000101

00008034 <ExFatFile::read(void*, unsigned int)>:

 fail:
  return 0;
}
//-----------------------------------------------------------------------------
int ExFatFile::read(void* buf, size_t count) {
    8034:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8038:	ldrb.w	r3, [r0, #51]	; 0x33
    803c:	sub	sp, #12
    803e:	mov	r4, r0
  uint8_t* cache;
  uint16_t sectorOffset;
  uint32_t sector;
  uint32_t clusterOffset;

  if (!isReadable()) {
    8040:	lsls	r5, r3, #31
    8042:	bpl.w	81a8 <ExFatFile::read(void*, unsigned int)+0x174>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isContiguous() || isFile()) {
    8046:	lsls	r0, r3, #25
    8048:	mov	r5, r1
    804a:	mov	r6, r2
    804c:	bpl.w	81be <ExFatFile::read(void*, unsigned int)+0x18a>
    if ((m_curPosition + count) > m_validLength) {
    8050:	ldrd	r0, r1, [r4]
    8054:	ldrd	r2, r3, [r4, #16]
    8058:	adds.w	r8, r0, r6
    805c:	adc.w	r9, r1, #0
    8060:	cmp	r3, r9
    8062:	it	eq
    8064:	cmpeq	r2, r8
    8066:	bcc.w	81ca <ExFatFile::read(void*, unsigned int)+0x196>
      count = toRead = m_validLength - m_curPosition;
    }
  }
  while (toRead) {
    806a:	cmp	r6, #0
    806c:	beq.w	81ce <ExFatFile::read(void*, unsigned int)+0x19a>
    8070:	mov	sl, r4
    8072:	mov	r8, r6
        }
      }
    }
    sector = m_vol->clusterStartSector(m_curCluster) +
             (clusterOffset >> m_vol->bytesPerSectorShift());
    if (sectorOffset != 0 || toRead < m_vol->bytesPerSector()
    8074:	movw	r9, #511	; 0x1ff
    8078:	ldrd	r2, r3, [sl], #24
    807c:	b.n	8122 <ExFatFile::read(void*, unsigned int)+0xee>
  }
  while (toRead) {
    clusterOffset = m_curPosition & m_vol->clusterMask();
    sectorOffset = clusterOffset & m_vol->sectorMask();
    if (clusterOffset == 0) {
      if (m_curPosition == 0) {
    807e:	orrs	r3, r2
    8080:	bne.n	8160 <ExFatFile::read(void*, unsigned int)+0x12c>
        m_curCluster = isRoot()
                       ? m_vol->rootDirectoryCluster() : m_firstCluster;
    8082:	ldrb.w	r3, [r4, #49]	; 0x31
    8086:	lsls	r2, r3, #25
    8088:	ite	mi
    808a:	ldrmi.w	r1, [r0, #1068]	; 0x42c
    808e:	ldrpl	r1, [r4, #28]
      } else if (isContiguous()) {
        m_curCluster++;
    8090:	str	r1, [r4, #24]
          goto fail;
        }
      }
    }
    sector = m_vol->clusterStartSector(m_curCluster) +
             (clusterOffset >> m_vol->bytesPerSectorShift());
    8092:	subs	r1, #2
    8094:	lsrs	r7, r7, #9
  bool dataCacheSync() {return m_dataCache.sync();}
  //----------------------------------------------------------------------------
  uint32_t clusterMask() {return m_clusterMask;}
  uint32_t clusterStartSector(uint32_t cluster) {
    return m_clusterHeapStartSector +
           ((cluster - 2) << m_sectorsPerClusterShift);
    8096:	ldrb.w	ip, [r0, #1085]	; 0x43d
    if (sectorOffset != 0 || toRead < m_vol->bytesPerSector()
    809a:	cmp	r8, r9
          goto fail;
        }
      }
    }
    sector = m_vol->clusterStartSector(m_curCluster) +
             (clusterOffset >> m_vol->bytesPerSectorShift());
    809c:	ldr.w	r2, [r0, #1060]	; 0x424
    80a0:	lsl.w	lr, r1, ip
    80a4:	add.w	r1, r7, r2
    80a8:	add	r1, lr
    if (sectorOffset != 0 || toRead < m_vol->bytesPerSector()
    80aa:	bls.n	8136 <ExFatFile::read(void*, unsigned int)+0x102>
    80ac:	cmp.w	fp, #0
    80b0:	bne.n	8136 <ExFatFile::read(void*, unsigned int)+0x102>
    80b2:	ldr.w	r2, [r0, #532]	; 0x214
                          || sector == m_vol->dataCacheSector()) {
    80b6:	cmp	r1, r2
    80b8:	beq.n	8136 <ExFatFile::read(void*, unsigned int)+0x102>
        goto fail;
      }
      uint8_t* src = cache + sectorOffset;
      memcpy(dst, src, n);
#if USE_MULTI_SECTOR_IO
    } else if (toRead >= 2*m_vol->bytesPerSector()) {
    80ba:	cmp.w	r8, #1024	; 0x400
    80be:	bcc.n	816e <ExFatFile::read(void*, unsigned int)+0x13a>
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
      // Limit writes to current cluster.
      uint32_t maxNs = m_vol->sectorsPerCluster()
                       - (clusterOffset >> m_vol->bytesPerSectorShift());
    80c0:	mov.w	lr, #1
      }
      uint8_t* src = cache + sectorOffset;
      memcpy(dst, src, n);
#if USE_MULTI_SECTOR_IO
    } else if (toRead >= 2*m_vol->bytesPerSector()) {
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
    80c4:	mov.w	r3, r8, lsr #9
      // Limit writes to current cluster.
      uint32_t maxNs = m_vol->sectorsPerCluster()
                       - (clusterOffset >> m_vol->bytesPerSectorShift());
    80c8:	lsl.w	ip, lr, ip
    80cc:	rsb	lr, r7, ip
    80d0:	mov	r7, r3
    80d2:	cmp	r3, lr
    80d4:	it	cs
    80d6:	movcs	r7, lr
        ns = maxNs;
      }
      n = ns << m_vol->bytesPerSectorShift();
      // Check for cache sector in read range.
      if (sector <= m_vol->dataCacheSector()
          && m_vol->dataCacheSector() < (sector + ns)) {
    80d8:	cmp	r1, r2
      uint32_t maxNs = m_vol->sectorsPerCluster()
                       - (clusterOffset >> m_vol->bytesPerSectorShift());
      if (ns > maxNs) {
        ns = maxNs;
      }
      n = ns << m_vol->bytesPerSectorShift();
    80da:	mov.w	fp, r7, lsl #9
      // Check for cache sector in read range.
      if (sector <= m_vol->dataCacheSector()
          && m_vol->dataCacheSector() < (sector + ns)) {
    80de:	bhi.n	80f8 <ExFatFile::read(void*, unsigned int)+0xc4>
    80e0:	adds	r3, r1, r7
    80e2:	cmp	r3, r2
    80e4:	bls.n	80f8 <ExFatFile::read(void*, unsigned int)+0xc4>
  void dataCacheInvalidate() {m_dataCache.invalidate();}
  uint8_t* dataCacheGet(uint32_t sector, uint8_t option) {
    return m_dataCache.get(sector, option);
  }
  uint32_t dataCacheSector() {return m_dataCache.sector();}
  bool dataCacheSync() {return m_dataCache.sync();}
    80e6:	add.w	r0, r0, #524	; 0x20c
    80ea:	str	r1, [sp, #4]
    80ec:	bl	8928 <FsCache::sync()>
        // Flush cache if cache sector is in the range.
        if (!m_vol->dataCacheSync()) {
    80f0:	cmp	r0, #0
    80f2:	beq.n	81a8 <ExFatFile::read(void*, unsigned int)+0x174>
    80f4:	ldr	r0, [r4, #32]
    80f6:	ldr	r1, [sp, #4]
    80f8:	ldr.w	r0, [r0, #1080]	; 0x438
  bool writeSector(uint32_t sector, const uint8_t* src) {
    return m_blockDev->writeSector(sector, src);
  }
#if USE_MULTI_SECTOR_IO
  bool readSectors(uint32_t sector, uint8_t* dst, size_t count) {
    return m_blockDev->readSectors(sector, dst, count);
    80fc:	mov	r3, r7
    80fe:	mov	r2, r5
    8100:	ldr	r7, [r0, #0]
    8102:	ldr	r7, [r7, #12]
    8104:	blx	r7
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
      if (!m_vol->readSectors(sector, dst, ns)) {
    8106:	cmp	r0, #0
    8108:	beq.n	81a8 <ExFatFile::read(void*, unsigned int)+0x174>
    810a:	mov	r0, fp
    810c:	movs	r1, #0
      if (!m_vol->readSector(sector, dst)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    810e:	add	r5, fp
    m_curPosition += n;
    8110:	ldrd	r2, r3, [r4]
    8114:	adds	r2, r2, r0
    8116:	adcs	r3, r1
  if (isContiguous() || isFile()) {
    if ((m_curPosition + count) > m_validLength) {
      count = toRead = m_validLength - m_curPosition;
    }
  }
  while (toRead) {
    8118:	subs.w	r8, r8, fp
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    m_curPosition += n;
    811c:	strd	r2, r3, [r4]
  if (isContiguous() || isFile()) {
    if ((m_curPosition + count) > m_validLength) {
      count = toRead = m_validLength - m_curPosition;
    }
  }
  while (toRead) {
    8120:	beq.n	81ce <ExFatFile::read(void*, unsigned int)+0x19a>
    clusterOffset = m_curPosition & m_vol->clusterMask();
    8122:	ldr	r0, [r4, #32]
    8124:	ldr.w	r7, [r0, #1072]	; 0x430
    8128:	ands	r7, r2
    sectorOffset = clusterOffset & m_vol->sectorMask();
    812a:	ubfx	fp, r7, #0, #9
    if (clusterOffset == 0) {
    812e:	cmp	r7, #0
    8130:	beq.n	807e <ExFatFile::read(void*, unsigned int)+0x4a>
    8132:	ldr	r1, [r4, #24]
    8134:	b.n	8092 <ExFatFile::read(void*, unsigned int)+0x5e>
#endif  // USE_EXFAT_BITMAP_CACHE
  }
  void dataCacheDirty() {m_dataCache.dirty();}
  void dataCacheInvalidate() {m_dataCache.invalidate();}
  uint8_t* dataCacheGet(uint32_t sector, uint8_t option) {
    return m_dataCache.get(sector, option);
    8136:	add.w	r0, r0, #524	; 0x20c
    813a:	movs	r2, #0
    813c:	bl	8868 <FsCache::get(unsigned long, unsigned char)>
      if (n > toRead) {
        n = toRead;
      }
      // read sector to cache and copy data to caller
      cache = m_vol->dataCacheGet(sector, FsCache::CACHE_FOR_READ);
      if (!cache) {
    8140:	cbz	r0, 81a8 <ExFatFile::read(void*, unsigned int)+0x174>
    }
    sector = m_vol->clusterStartSector(m_curCluster) +
             (clusterOffset >> m_vol->bytesPerSectorShift());
    if (sectorOffset != 0 || toRead < m_vol->bytesPerSector()
                          || sector == m_vol->dataCacheSector()) {
      n = m_vol->bytesPerSector() - sectorOffset;
    8142:	rsb	r3, fp, #512	; 0x200
      if (!cache) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* src = cache + sectorOffset;
      memcpy(dst, src, n);
    8146:	add.w	r1, r0, fp
    814a:	mov	r0, r5
    814c:	cmp	r3, r8
    814e:	it	cs
    8150:	movcs	r3, r8
    8152:	mov	fp, r3
    8154:	mov	r2, r3
    8156:	bl	d064 <memcpy>
    815a:	movs	r1, #0
    815c:	mov	r0, fp
    815e:	b.n	810e <ExFatFile::read(void*, unsigned int)+0xda>
    sectorOffset = clusterOffset & m_vol->sectorMask();
    if (clusterOffset == 0) {
      if (m_curPosition == 0) {
        m_curCluster = isRoot()
                       ? m_vol->rootDirectoryCluster() : m_firstCluster;
      } else if (isContiguous()) {
    8160:	ldrb.w	r3, [r4, #51]	; 0x33
    8164:	lsls	r3, r3, #25
    8166:	bpl.n	8188 <ExFatFile::read(void*, unsigned int)+0x154>
        m_curCluster++;
    8168:	ldr	r1, [r4, #24]
    816a:	adds	r1, #1
    816c:	b.n	8090 <ExFatFile::read(void*, unsigned int)+0x5c>
    816e:	ldr.w	r0, [r0, #1080]	; 0x438
  uint16_t sectorMask() {return m_sectorMask;}
  bool syncDevice() {
    return m_blockDev->syncDevice();
  }
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
    8172:	mov	r2, r5
    8174:	ldr	r3, [r0, #0]
    8176:	ldr	r3, [r3, #8]
    8178:	blx	r3
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // read single sector
      n = m_vol->bytesPerSector();
      if (!m_vol->readSector(sector, dst)) {
    817a:	cbz	r0, 81a8 <ExFatFile::read(void*, unsigned int)+0x174>
    817c:	mov.w	r0, #512	; 0x200
    8180:	movs	r1, #0
        goto fail;
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // read single sector
      n = m_vol->bytesPerSector();
    8182:	mov.w	fp, #512	; 0x200
    8186:	b.n	810e <ExFatFile::read(void*, unsigned int)+0xda>
        m_curCluster = isRoot()
                       ? m_vol->rootDirectoryCluster() : m_firstCluster;
      } else if (isContiguous()) {
        m_curCluster++;
      } else {
        fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    8188:	mov	r2, sl
    818a:	ldr	r1, [r4, #24]
    818c:	bl	8c4c <ExFatPartition::fatGet(unsigned long, unsigned long*)>
    8190:	sxtb	r0, r0
        if (fg < 0) {
    8192:	cmp	r0, #0
    8194:	blt.n	81a8 <ExFatFile::read(void*, unsigned int)+0x174>
          DBG_FAIL_MACRO;
          goto fail;
        }
        if (fg == 0) {
    8196:	beq.n	819e <ExFatFile::read(void*, unsigned int)+0x16a>
    8198:	ldr	r0, [r4, #32]
    819a:	ldr	r1, [r4, #24]
    819c:	b.n	8092 <ExFatFile::read(void*, unsigned int)+0x5e>
          // EOF if directory.
          if (isDir()) {
    819e:	ldrb.w	r3, [r4, #49]	; 0x31
    81a2:	tst.w	r3, #80	; 0x50
    81a6:	bne.n	81d2 <ExFatFile::read(void*, unsigned int)+0x19e>
    toRead -= n;
  }
  return count - toRead;

fail:
  m_error |= READ_ERROR;
    81a8:	ldrb.w	r3, [r4, #50]	; 0x32
  return -1;
    81ac:	mov.w	r0, #4294967295
    toRead -= n;
  }
  return count - toRead;

fail:
  m_error |= READ_ERROR;
    81b0:	orr.w	r3, r3, #2
    81b4:	strb.w	r3, [r4, #50]	; 0x32
  return -1;
}
    81b8:	add	sp, #12
    81ba:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

  if (!isReadable()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isContiguous() || isFile()) {
    81be:	ldrb.w	r3, [r4, #49]	; 0x31
    81c2:	lsls	r1, r3, #28
    81c4:	bmi.w	8050 <ExFatFile::read(void*, unsigned int)+0x1c>
    81c8:	b.n	806a <ExFatFile::read(void*, unsigned int)+0x36>
    if ((m_curPosition + count) > m_validLength) {
      count = toRead = m_validLength - m_curPosition;
    81ca:	subs	r6, r2, r0
    81cc:	b.n	806a <ExFatFile::read(void*, unsigned int)+0x36>
        goto fail;
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // read single sector
      n = m_vol->bytesPerSector();
    81ce:	mov.w	r8, #0
    }
    dst += n;
    m_curPosition += n;
    toRead -= n;
  }
  return count - toRead;
    81d2:	rsb	r0, r8, r6

fail:
  m_error |= READ_ERROR;
  return -1;
}
    81d6:	add	sp, #12
    81d8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000081dc <ExFatFile::peek()>:
  }
  fname->len = len;
  return true;
}
//-----------------------------------------------------------------------------
int ExFatFile::peek() {
    81dc:	push	{r4, r5, r6, r7, lr}
    81de:	sub	sp, #12
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
    81e0:	movs	r2, #1
    81e2:	mov	r4, r0
  uint64_t curPosition = m_curPosition;
  uint32_t curCluster = m_curCluster;
    81e4:	ldr	r5, [r0, #24]
    81e6:	add.w	r1, sp, #7
  fname->len = len;
  return true;
}
//-----------------------------------------------------------------------------
int ExFatFile::peek() {
  uint64_t curPosition = m_curPosition;
    81ea:	ldrd	r6, r7, [r0]
    81ee:	bl	8034 <ExFatFile::read(void*, unsigned int)>
    81f2:	cmp	r0, #1
  uint32_t curCluster = m_curCluster;
  int c = read();
  m_curPosition = curPosition;
  m_curCluster = curCluster;
    81f4:	str	r5, [r4, #24]
    81f6:	ite	eq
    81f8:	ldrbeq.w	r0, [sp, #7]
    81fc:	movne.w	r0, #4294967295
//-----------------------------------------------------------------------------
int ExFatFile::peek() {
  uint64_t curPosition = m_curPosition;
  uint32_t curCluster = m_curCluster;
  int c = read();
  m_curPosition = curPosition;
    8200:	strd	r6, r7, [r4]
  m_curCluster = curCluster;
  return c;
}
    8204:	add	sp, #12
    8206:	pop	{r4, r5, r6, r7, pc}

00008208 <ExFatFile::seekSet(unsigned long long)>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::seekSet(uint64_t pos) {
    8208:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    820c:	ldrb.w	lr, [r0, #49]	; 0x31
    8210:	sub	sp, #20
    8212:	mov	r4, r0
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
    8214:	ldr	r5, [r0, #24]
  // error if file not open
  if (!isOpen()) {
    8216:	cmp.w	lr, #0
    821a:	beq.n	828a <ExFatFile::seekSet(unsigned long long)+0x82>
    821c:	mov	r6, r2
    821e:	mov	r7, r3
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    8220:	ldrd	r0, r1, [r0]
    8224:	cmp	r1, r3
    8226:	it	eq
    8228:	cmpeq	r0, r2
    822a:	beq.n	82f8 <ExFatFile::seekSet(unsigned long long)+0xf0>
    return true;
  }
  if (pos == 0) {
    822c:	orrs.w	r3, r6, r7
    8230:	bne.n	8294 <ExFatFile::seekSet(unsigned long long)+0x8c>
    // set position to start of file
    m_curCluster = 0;
    8232:	movs	r3, #0
    8234:	str	r3, [r4, #24]
    }
  }

done:
  m_curPosition = pos;
  return true;
    8236:	movs	r0, #1
      goto fail;
    }
  }

done:
  m_curPosition = pos;
    8238:	strd	r6, r7, [r4]
  return true;

fail:
  m_curCluster = tmp;
  return false;
}
    823c:	add	sp, #20
    823e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (isContiguous()) {
    m_curCluster = m_firstCluster + nNew;
    goto done;
  }
  // calculate cluster index for current position
  nCur = (m_curPosition - 1) >> m_vol->bytesPerClusterShift();
    8242:	adds.w	r2, r0, #4294967295
    8246:	adc.w	r3, r1, #4294967295
    824a:	lsr.w	ip, r2, ip
    824e:	lsl.w	r8, r3, r8
    8252:	lsr.w	sl, r3, sl
  if (nNew < nCur || m_curPosition == 0) {
    8256:	orrs.w	r3, r0, r1
  if (isContiguous()) {
    m_curCluster = m_firstCluster + nNew;
    goto done;
  }
  // calculate cluster index for current position
  nCur = (m_curPosition - 1) >> m_vol->bytesPerClusterShift();
    825a:	orr.w	ip, ip, r8
    825e:	orr.w	ip, ip, sl
  if (nNew < nCur || m_curPosition == 0) {
    8262:	beq.n	82fc <ExFatFile::seekSet(unsigned long long)+0xf4>
    8264:	cmp	fp, ip
    8266:	bcc.n	82fc <ExFatFile::seekSet(unsigned long long)+0xf4>
    // must follow chain from first cluster
    m_curCluster = isRoot() ? m_vol->rootDirectoryCluster() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
    8268:	rsb	fp, ip, fp
    826c:	mov	r9, r5
  }
  while (nNew--) {
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
    826e:	add.w	r8, r4, #24
    8272:	mov	r5, fp
    8274:	mov	r2, r8
    m_curCluster = isRoot() ? m_vol->rootDirectoryCluster() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    8276:	cmp	r5, #0
    8278:	beq.n	8236 <ExFatFile::seekSet(unsigned long long)+0x2e>
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
    827a:	ldr	r1, [r4, #24]
    827c:	subs	r5, #1
    827e:	ldr	r0, [r4, #32]
    8280:	bl	8c4c <ExFatPartition::fatGet(unsigned long, unsigned long*)>
    8284:	cmp	r0, #0
    8286:	bne.n	8274 <ExFatFile::seekSet(unsigned long long)+0x6c>
    8288:	mov	r5, r9
  m_curPosition = pos;
  return true;

fail:
  m_curCluster = tmp;
  return false;
    828a:	movs	r0, #0
done:
  m_curPosition = pos;
  return true;

fail:
  m_curCluster = tmp;
    828c:	str	r5, [r4, #24]
  return false;
}
    828e:	add	sp, #20
    8290:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (pos == 0) {
    // set position to start of file
    m_curCluster = 0;
    goto done;
  }
  if (isFile()) {
    8294:	tst.w	lr, #8
    8298:	bne.n	82ea <ExFatFile::seekSet(unsigned long long)+0xe2>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // calculate cluster index for new position
  nNew = (pos - 1) >> m_vol->bytesPerClusterShift();
    829a:	ldr	r3, [r4, #32]
    829c:	adds.w	r8, r6, #4294967295
    82a0:	ldrb.w	ip, [r3, #1085]	; 0x43d
    82a4:	adc.w	r9, r7, #4294967295
    82a8:	mov	sl, r8
    82aa:	str	r3, [sp, #12]
    82ac:	add.w	ip, ip, #9
    82b0:	mov	fp, r9
  if (isContiguous()) {
    82b2:	ldrb.w	r9, [r4, #51]	; 0x33
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // calculate cluster index for new position
  nNew = (pos - 1) >> m_vol->bytesPerClusterShift();
    82b6:	uxtb.w	ip, ip
  if (isContiguous()) {
    82ba:	tst.w	r9, #64	; 0x40
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // calculate cluster index for new position
  nNew = (pos - 1) >> m_vol->bytesPerClusterShift();
    82be:	rsb	r8, ip, #32
    82c2:	lsr.w	r2, sl, ip
    82c6:	strd	sl, fp, [sp]
    82ca:	ldr	r3, [sp, #4]
    82cc:	sub.w	sl, ip, #32
    82d0:	lsl.w	fp, r3, r8
    82d4:	lsr.w	r3, r3, sl
    82d8:	orr.w	r2, r2, fp
    82dc:	orr.w	fp, r2, r3
  if (isContiguous()) {
    82e0:	beq.n	8242 <ExFatFile::seekSet(unsigned long long)+0x3a>
    m_curCluster = m_firstCluster + nNew;
    82e2:	ldr	r3, [r4, #28]
    82e4:	add	r3, fp
    82e6:	str	r3, [r4, #24]
    goto done;
    82e8:	b.n	8236 <ExFatFile::seekSet(unsigned long long)+0x2e>
    // set position to start of file
    m_curCluster = 0;
    goto done;
  }
  if (isFile()) {
    if (pos > m_validLength) {
    82ea:	ldrd	r2, r3, [r4, #16]
    82ee:	cmp	r3, r7
    82f0:	it	eq
    82f2:	cmpeq	r2, r6
    82f4:	bcc.n	828a <ExFatFile::seekSet(unsigned long long)+0x82>
    82f6:	b.n	829a <ExFatFile::seekSet(unsigned long long)+0x92>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    return true;
    82f8:	movs	r0, #1
    82fa:	b.n	828e <ExFatFile::seekSet(unsigned long long)+0x86>
  }
  // calculate cluster index for current position
  nCur = (m_curPosition - 1) >> m_vol->bytesPerClusterShift();
  if (nNew < nCur || m_curPosition == 0) {
    // must follow chain from first cluster
    m_curCluster = isRoot() ? m_vol->rootDirectoryCluster() : m_firstCluster;
    82fc:	tst.w	lr, #64	; 0x40
    8300:	bne.n	8308 <ExFatFile::seekSet(unsigned long long)+0x100>
    8302:	ldr	r3, [r4, #28]
    8304:	str	r3, [r4, #24]
    8306:	b.n	826c <ExFatFile::seekSet(unsigned long long)+0x64>
    8308:	ldr	r3, [sp, #12]
    830a:	ldr.w	r3, [r3, #1068]	; 0x42c
    830e:	b.n	8304 <ExFatFile::seekSet(unsigned long long)+0xfc>

00008310 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)>:
 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::openRootFile(ExFatFile* dir, const ExChar_t* name,
                          uint8_t nameLength, oflag_t oflag) {
    8310:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8314:	mov	sl, r3
    8316:	sub	sp, #76	; 0x4c
  uint8_t freeCount = 0;
  uint8_t freeNeed;
  bool inSet = false;

  // error if already open
  if (isOpen() || !dir->isDir()) {
    8318:	ldrb.w	r3, [r0, #49]	; 0x31
 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::openRootFile(ExFatFile* dir, const ExChar_t* name,
                          uint8_t nameLength, oflag_t oflag) {
    831c:	mov	r5, r0
    831e:	str	r2, [sp, #0]
  uint8_t freeCount = 0;
  uint8_t freeNeed;
  bool inSet = false;

  // error if already open
  if (isOpen() || !dir->isDir()) {
    8320:	cbnz	r3, 832e <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
    8322:	ldrb.w	r3, [r1, #49]	; 0x31
    8326:	mov	r6, r1
    8328:	tst.w	r3, #80	; 0x50
    832c:	bne.n	8340 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x30>
  return sync();
#endif  // READ_ONLY
 fail:

  // close file
  m_attributes = FILE_ATTR_CLOSED;
    832e:	movs	r3, #0
  m_flags = 0;
  return false;
    8330:	mov	r0, r3
  return sync();
#endif  // READ_ONLY
 fail:

  // close file
  m_attributes = FILE_ATTR_CLOSED;
    8332:	strb.w	r3, [r5, #49]	; 0x31
  m_flags = 0;
    8336:	strb.w	r3, [r5, #51]	; 0x33
  return false;
}
    833a:	add	sp, #76	; 0x4c
    833c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  // error if already open
  if (isOpen() || !dir->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  switch (oflag & O_ACCMODE) {
    8340:	ldr	r3, [sp, #112]	; 0x70
    8342:	and.w	r3, r3, #3
    8346:	cmp	r3, #1
    8348:	beq.n	8358 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x48>
    834a:	cmp	r3, #2
    834c:	beq.w	8562 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x252>
    8350:	cmp	r3, #0
    8352:	bne.n	832e <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
    8354:	movs	r3, #1
    8356:	b.n	835a <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x4a>
    8358:	movs	r3, #2
      break;
    default:
      DBG_FAIL_MACRO;
      goto fail;
  }
  modeFlags |= oflag & O_APPEND ? FILE_FLAG_APPEND : 0;
    835a:	ldr	r2, [sp, #112]	; 0x70
    835c:	and.w	r2, r2, #8
    8360:	orrs	r3, r2
    8362:	str	r3, [sp, #4]
  if (name) {
    8364:	ldr	r3, [sp, #0]
    8366:	cmp	r3, #0
    8368:	beq.w	8566 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x256>
    nameHash = exFatHashName(name, nameLength, 0);
    836c:	mov	r0, r3
    836e:	movs	r2, #0
    8370:	mov	r1, sl
    8372:	bl	8d74 <exFatHashName(char const*, unsigned int, unsigned short)>
bool ExFatFile::seekSet(uint64_t pos) {
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
  // error if file not open
  if (!isOpen()) {
    8376:	ldrb.w	r3, [r6, #49]	; 0x31
      DBG_FAIL_MACRO;
      goto fail;
  }
  modeFlags |= oflag & O_APPEND ? FILE_FLAG_APPEND : 0;
  if (name) {
    nameHash = exFatHashName(name, nameLength, 0);
    837a:	str	r0, [sp, #8]
bool ExFatFile::seekSet(uint64_t pos) {
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
  // error if file not open
  if (!isOpen()) {
    837c:	cbz	r3, 8392 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x82>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    837e:	ldrd	r2, r3, [r6]
    8382:	orrs	r3, r2
    8384:	beq.n	8392 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x82>
    return true;
  }
  if (pos == 0) {
    // set position to start of file
    m_curCluster = 0;
    8386:	movs	r1, #0
      goto fail;
    }
  }

done:
  m_curPosition = pos;
    8388:	movs	r2, #0
    838a:	movs	r3, #0
  if (pos == m_curPosition) {
    return true;
  }
  if (pos == 0) {
    // set position to start of file
    m_curCluster = 0;
    838c:	str	r1, [r6, #24]
      goto fail;
    }
  }

done:
  m_curPosition = pos;
    838e:	strd	r2, r3, [r6]
  modeFlags |= oflag & O_APPEND ? FILE_FLAG_APPEND : 0;
  if (name) {
    nameHash = exFatHashName(name, nameLength, 0);
    dir->rewind();
  }
  freeNeed = 2 + (nameLength + 14)/15;
    8392:	add.w	r3, sl, #14
    8396:	ldr	r1, [pc, #736]	; (8678 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x368>)
  DirStream_t* dirStream;
  DirName_t*   dirName;
  uint8_t buf[32];
  uint8_t freeCount = 0;
  uint8_t freeNeed;
  bool inSet = false;
    8398:	mov.w	r9, #0
  modeFlags |= oflag & O_APPEND ? FILE_FLAG_APPEND : 0;
  if (name) {
    nameHash = exFatHashName(name, nameLength, 0);
    dir->rewind();
  }
  freeNeed = 2 + (nameLength + 14)/15;
    839c:	smull	r2, r1, r1, r3
    83a0:	asrs	r2, r3, #31

  DirFile_t*   dirFile;
  DirStream_t* dirStream;
  DirName_t*   dirName;
  uint8_t buf[32];
  uint8_t freeCount = 0;
    83a2:	mov	r4, r9
}
//------------------------------------------------------------------------------
bool ExFatFile::openRootFile(ExFatFile* dir, const ExChar_t* name,
                          uint8_t nameLength, oflag_t oflag) {
  int n;
  uint8_t nameOffset = 0;
    83a4:	mov	r7, r9
  modeFlags |= oflag & O_APPEND ? FILE_FLAG_APPEND : 0;
  if (name) {
    nameHash = exFatHashName(name, nameLength, 0);
    dir->rewind();
  }
  freeNeed = 2 + (nameLength + 14)/15;
    83a6:	add	r3, r1
    83a8:	rsb	r3, r2, r3, asr #3
    83ac:	uxtb	r3, r3
    83ae:	str	r3, [sp, #12]
    83b0:	adds	r3, #2
    83b2:	uxtb.w	fp, r3

  while (1) {
    n = dir->read(buf, 32);
    83b6:	movs	r2, #32
    83b8:	add	r1, sp, #40	; 0x28
    83ba:	mov	r0, r6
    83bc:	bl	8034 <ExFatFile::read(void*, unsigned int)>
    if (n == 0) {
    83c0:	cmp	r0, #0
    83c2:	beq.n	8440 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x130>
      goto create;
    }
    if (n != 32) {
    83c4:	cmp	r0, #32
    83c6:	bne.n	832e <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(buf[0] & 0x80)) {
    83c8:	ldrb.w	r3, [sp, #40]	; 0x28
    83cc:	lsls	r2, r3, #24
    83ce:	bmi.n	849e <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x18e>
      if (freeCount == 0) {
    83d0:	cmp	r4, #0
    83d2:	bne.n	8498 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x188>
        freePos.position = dir->curPosition() - 32;
    83d4:	ldr	r2, [r6, #0]
        freePos.cluster = dir->curCluster();
    83d6:	ldr	r1, [r6, #24]
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(buf[0] & 0x80)) {
      if (freeCount == 0) {
        freePos.position = dir->curPosition() - 32;
    83d8:	subs	r2, #32
        freePos.cluster = dir->curCluster();
    83da:	str	r1, [sp, #28]
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(buf[0] & 0x80)) {
      if (freeCount == 0) {
        freePos.position = dir->curPosition() - 32;
    83dc:	str	r2, [sp, #32]
        freePos.cluster = dir->curCluster();
      }
      if (freeCount < freeNeed) {
        freeCount++;
    83de:	adds	r4, #1
    83e0:	uxtb	r4, r4
      }
      if (!buf[0]) {
    83e2:	cbz	r3, 8440 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x130>
      if (buf[0] != EXFAT_TYPE_FILE) {
        continue;
      }
      inSet = true;
    }
    switch (buf[0]) {
    83e4:	cmp	r3, #192	; 0xc0
    83e6:	beq.w	8510 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x200>
    83ea:	cmp	r3, #193	; 0xc1
    83ec:	beq.n	84b4 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1a4>
    83ee:	cmp	r3, #133	; 0x85
    83f0:	bne.n	83b6 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xa6>
      case EXFAT_TYPE_FILE:
        memset(this, 0, sizeof(ExFatFile));
    83f2:	movs	r2, #56	; 0x38
    83f4:	movs	r1, #0
    83f6:	mov	r0, r5
    83f8:	bl	10d7c <memset>
        dirFile = reinterpret_cast<DirFile_t*>(buf);
        m_setCount = dirFile->setCount;
        m_attributes = getLe16(dirFile->attributes) & FILE_ATTR_COPY;
    83fc:	ldrb.w	r3, [sp, #44]	; 0x2c
    }
    switch (buf[0]) {
      case EXFAT_TYPE_FILE:
        memset(this, 0, sizeof(ExFatFile));
        dirFile = reinterpret_cast<DirFile_t*>(buf);
        m_setCount = dirFile->setCount;
    8400:	ldrb.w	r2, [sp, #41]	; 0x29
        m_attributes = getLe16(dirFile->attributes) & FILE_ATTR_COPY;
        if (!(m_attributes & EXFAT_ATTRIB_DIRECTORY)) {
    8404:	lsls	r0, r3, #27
    dir->rewind();
  }
  freeNeed = 2 + (nameLength + 14)/15;

  while (1) {
    n = dir->read(buf, 32);
    8406:	mov	r0, r6
    }
    switch (buf[0]) {
      case EXFAT_TYPE_FILE:
        memset(this, 0, sizeof(ExFatFile));
        dirFile = reinterpret_cast<DirFile_t*>(buf);
        m_setCount = dirFile->setCount;
    8408:	strb.w	r2, [r5, #48]	; 0x30
        m_attributes = getLe16(dirFile->attributes) & FILE_ATTR_COPY;
    840c:	and.w	r2, r3, #55	; 0x37
        if (!(m_attributes & EXFAT_ATTRIB_DIRECTORY)) {
          m_attributes |= FILE_ATTR_FILE;
    8410:	it	pl
    8412:	orrpl.w	r2, r2, #8
    8416:	strb.w	r2, [r5, #49]	; 0x31
        }
        m_vol = dir->volume();

        m_dirPos.cluster = dir->curCluster();
        m_dirPos.position = dir->curPosition() - 32;
    841a:	ldr	r3, [r6, #0]
    841c:	ldr	r1, [r6, #32]
    841e:	ldr	r2, [r6, #24]
    8420:	subs	r3, #32
        m_setCount = dirFile->setCount;
        m_attributes = getLe16(dirFile->attributes) & FILE_ATTR_COPY;
        if (!(m_attributes & EXFAT_ATTRIB_DIRECTORY)) {
          m_attributes |= FILE_ATTR_FILE;
        }
        m_vol = dir->volume();
    8422:	str	r1, [r5, #32]
    dir->rewind();
  }
  freeNeed = 2 + (nameLength + 14)/15;

  while (1) {
    n = dir->read(buf, 32);
    8424:	add	r1, sp, #40	; 0x28
        if (!(m_attributes & EXFAT_ATTRIB_DIRECTORY)) {
          m_attributes |= FILE_ATTR_FILE;
        }
        m_vol = dir->volume();

        m_dirPos.cluster = dir->curCluster();
    8426:	str	r2, [r5, #36]	; 0x24
    dir->rewind();
  }
  freeNeed = 2 + (nameLength + 14)/15;

  while (1) {
    n = dir->read(buf, 32);
    8428:	movs	r2, #32
          m_attributes |= FILE_ATTR_FILE;
        }
        m_vol = dir->volume();

        m_dirPos.cluster = dir->curCluster();
        m_dirPos.position = dir->curPosition() - 32;
    842a:	str	r3, [r5, #40]	; 0x28
        m_dirPos.isContiguous = dir->isContiguous();
    842c:	ldrb.w	r3, [r6, #51]	; 0x33
    8430:	ubfx	r3, r3, #6, #1
    8434:	strb.w	r3, [r5, #44]	; 0x2c
    dir->rewind();
  }
  freeNeed = 2 + (nameLength + 14)/15;

  while (1) {
    n = dir->read(buf, 32);
    8438:	bl	8034 <ExFatFile::read(void*, unsigned int)>
    if (n == 0) {
    843c:	cmp	r0, #0
    843e:	bne.n	83c4 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xb4>
#if READ_ONLY
  DBG_FAIL_MACRO;
  goto fail;
#else  // READ_ONLY
  // don't create unless O_CREAT and write
  if (!(oflag & O_CREAT) || !(modeFlags & FILE_FLAG_WRITE) || !name) {
    8440:	ldr	r3, [sp, #112]	; 0x70
    8442:	lsls	r1, r3, #22
    8444:	bpl.w	832e <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
    8448:	ldr	r3, [sp, #4]
    844a:	lsls	r2, r3, #30
    844c:	bpl.w	832e <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
    8450:	ldr	r3, [sp, #0]
    8452:	cmp	r3, #0
    8454:	beq.w	832e <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (freeCount < freeNeed) {
    8458:	cmp	r4, fp
    845a:	bcc.n	8476 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x166>
    845c:	b.n	856c <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x25c>
        goto fail;
      }
      dir->m_curCluster = curCluster;
      continue;
    }
    if (n != 32) {
    845e:	cmp	r0, #32
    8460:	bne.w	832e <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (freeCount == 0) {
    8464:	cbnz	r4, 8470 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x160>
      freePos.position = dir->curPosition() - 32;
    8466:	ldr	r2, [r6, #0]
      freePos.cluster = dir->curCluster();
    8468:	ldr	r1, [r6, #24]
    if (n != 32) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (freeCount == 0) {
      freePos.position = dir->curPosition() - 32;
    846a:	subs	r2, #32
      freePos.cluster = dir->curCluster();
    846c:	str	r1, [sp, #28]
    if (n != 32) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (freeCount == 0) {
      freePos.position = dir->curPosition() - 32;
    846e:	str	r2, [sp, #32]
      freePos.cluster = dir->curCluster();
    }
    freeCount++;
    8470:	uxtb	r4, r3
  // don't create unless O_CREAT and write
  if (!(oflag & O_CREAT) || !(modeFlags & FILE_FLAG_WRITE) || !name) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (freeCount < freeNeed) {
    8472:	cmp	fp, r4
    8474:	bls.n	856c <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x25c>
    n = dir->read(buf, 32);
    8476:	movs	r2, #32
    8478:	add	r1, sp, #40	; 0x28
    847a:	mov	r0, r6
    847c:	bl	8034 <ExFatFile::read(void*, unsigned int)>
    }
    if (freeCount == 0) {
      freePos.position = dir->curPosition() - 32;
      freePos.cluster = dir->curCluster();
    }
    freeCount++;
    8480:	adds	r3, r4, #1
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (freeCount < freeNeed) {
    n = dir->read(buf, 32);
    if (n == 0) {
    8482:	cmp	r0, #0
    8484:	bne.n	845e <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x14e>
      curCluster = dir->m_curCluster;
      if (!dir->addDirCluster()) {
    8486:	mov	r0, r6
    goto fail;
  }
  while (freeCount < freeNeed) {
    n = dir->read(buf, 32);
    if (n == 0) {
      curCluster = dir->m_curCluster;
    8488:	ldr	r7, [r6, #24]
      if (!dir->addDirCluster()) {
    848a:	bl	91a0 <ExFatFile::addDirCluster()>
    848e:	cmp	r0, #0
    8490:	beq.w	832e <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
        DBG_FAIL_MACRO;
        goto fail;
      }
      dir->m_curCluster = curCluster;
    8494:	str	r7, [r6, #24]
      continue;
    8496:	b.n	8472 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x162>
    if (!(buf[0] & 0x80)) {
      if (freeCount == 0) {
        freePos.position = dir->curPosition() - 32;
        freePos.cluster = dir->curCluster();
      }
      if (freeCount < freeNeed) {
    8498:	cmp	r4, fp
    849a:	bcs.n	83e2 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xd2>
    849c:	b.n	83de <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xce>
        freeCount++;
      }
      if (!buf[0]) {
        goto create;
      }
    } else if (!inSet) {
    849e:	cmp.w	r9, #0
    84a2:	bne.n	83e4 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xd4>
      if (freeCount < freeNeed) {
        freeCount = 0;
    84a4:	cmp	r4, fp
    84a6:	it	cc
    84a8:	movcc	r4, #0
      }
      if (buf[0] != EXFAT_TYPE_FILE) {
    84aa:	cmp	r3, #133	; 0x85
    84ac:	bne.n	83b6 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xa6>
        continue;
      }
      inSet = true;
    84ae:	mov.w	r9, #1
    84b2:	b.n	83f2 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xe2>
        }
        break;

      case EXFAT_TYPE_NAME:
        dirName = reinterpret_cast<DirName_t*>(buf);
        nCmp = nameLength - nameOffset;
    84b4:	rsb	r8, r7, sl
        if (nCmp > 15) {
          nCmp = 15;
        }
        if (!exFatCmpName(dirName, name, nameOffset, nCmp)) {
    84b8:	mov	r2, r7
    84ba:	ldr	r1, [sp, #0]
    84bc:	add	r0, sp, #40	; 0x28
        }
        break;

      case EXFAT_TYPE_NAME:
        dirName = reinterpret_cast<DirName_t*>(buf);
        nCmp = nameLength - nameOffset;
    84be:	uxtb.w	r8, r8
    84c2:	cmp.w	r8, #15
    84c6:	it	cs
    84c8:	movcs.w	r8, #15
        if (nCmp > 15) {
          nCmp = 15;
        }
        if (!exFatCmpName(dirName, name, nameOffset, nCmp)) {
    84cc:	mov	r3, r8
    84ce:	bl	8db0 <exFatCmpName(DirName_t const*, char const*, unsigned int, unsigned int)>
    84d2:	cmp	r0, #0
    84d4:	beq.n	8550 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x240>
          inSet = false;
          break;
        }
        nameOffset += nCmp;
    84d6:	add	r7, r8
    84d8:	uxtb	r7, r7

        if (nameOffset == nameLength) {
    84da:	cmp	sl, r7
    84dc:	bne.w	83b6 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xa6>
    }
  }

 found:
  // Don't open if create only.
  if (oflag & O_EXCL) {
    84e0:	ldr	r3, [sp, #112]	; 0x70
    84e2:	lsls	r3, r3, #20
    84e4:	bmi.w	832e <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Write, truncate, or at end is an error for a directory or read-only file.
  if ((oflag & (O_TRUNC | O_AT_END)) || (m_flags & FILE_FLAG_WRITE)) {
    84e8:	ldr	r3, [sp, #112]	; 0x70
    84ea:	tst.w	r3, #17408	; 0x4400
    84ee:	bne.w	8632 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x322>
    84f2:	ldrb.w	r3, [r5, #51]	; 0x33
    84f6:	lsls	r7, r3, #30
    84f8:	bmi.w	8632 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x322>
      goto fail;
    }
  }

#if !READ_ONLY
  if (oflag & O_TRUNC) {
    84fc:	ldr	r3, [sp, #112]	; 0x70
    84fe:	lsls	r3, r3, #21
    8500:	bmi.w	832e <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
    }
    if (!truncate(0)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if ((oflag & O_AT_END) && !seekSet(fileSize())) {
    8504:	ldr	r3, [sp, #112]	; 0x70
    8506:	lsls	r0, r3, #17
    8508:	bmi.w	867c <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x36c>
    DBG_FAIL_MACRO;
    goto fail;
  }
#endif  // READ_ONLY
  return true;
    850c:	movs	r0, #1
    850e:	b.n	833a <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x2a>
        break;

      case EXFAT_TYPE_STREAM:
        dirStream = reinterpret_cast<DirStream_t*>(buf);
        m_flags = modeFlags;
        if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
    8510:	ldrb.w	r3, [sp, #41]	; 0x29
        m_dirPos.isContiguous = dir->isContiguous();
        break;

      case EXFAT_TYPE_STREAM:
        dirStream = reinterpret_cast<DirStream_t*>(buf);
        m_flags = modeFlags;
    8514:	ldr	r2, [sp, #4]
        if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
    8516:	lsls	r1, r3, #30
        m_dirPos.isContiguous = dir->isContiguous();
        break;

      case EXFAT_TYPE_STREAM:
        dirStream = reinterpret_cast<DirStream_t*>(buf);
        m_flags = modeFlags;
    8518:	strb.w	r2, [r5, #51]	; 0x33
        if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
    851c:	bpl.n	8526 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x216>
          m_flags |= FILE_FLAG_CONTIGUOUS;
    851e:	orr.w	r3, r2, #64	; 0x40
    8522:	strb.w	r3, [r5, #51]	; 0x33
        }
        nameOffset = 0;
        m_validLength = getLe64(dirStream->validLength);
        m_firstCluster = getLe32(dirStream->firstCluster);
    8526:	ldr	r1, [sp, #60]	; 0x3c
        m_flags = modeFlags;
        if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
          m_flags |= FILE_FLAG_CONTIGUOUS;
        }
        nameOffset = 0;
        m_validLength = getLe64(dirStream->validLength);
    8528:	ldrd	r2, r3, [sp, #48]	; 0x30
        m_firstCluster = getLe32(dirStream->firstCluster);
    852c:	str	r1, [r5, #28]
        m_flags = modeFlags;
        if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
          m_flags |= FILE_FLAG_CONTIGUOUS;
        }
        nameOffset = 0;
        m_validLength = getLe64(dirStream->validLength);
    852e:	strd	r2, r3, [r5, #16]
        m_firstCluster = getLe32(dirStream->firstCluster);
        m_dataLength = getLe64(dirStream->dataLength);
    8532:	ldrd	r0, r1, [sp, #64]	; 0x40
        if (!name) {
    8536:	ldr	r3, [sp, #0]
          m_flags |= FILE_FLAG_CONTIGUOUS;
        }
        nameOffset = 0;
        m_validLength = getLe64(dirStream->validLength);
        m_firstCluster = getLe32(dirStream->firstCluster);
        m_dataLength = getLe64(dirStream->dataLength);
    8538:	strd	r0, r1, [r5, #8]
        if (!name) {
    853c:	cmp	r3, #0
    853e:	beq.n	84e0 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1d0>
          goto found;
        }
        if (nameLength != dirStream->nameLength ||
    8540:	ldrb.w	r3, [sp, #43]	; 0x2b
    8544:	cmp	r3, sl
    8546:	beq.n	8554 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x244>
            nameHash != getLe16(dirStream->nameHash)) {
          inSet = false;
    8548:	mov.w	r9, #0
        dirStream = reinterpret_cast<DirStream_t*>(buf);
        m_flags = modeFlags;
        if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
          m_flags |= FILE_FLAG_CONTIGUOUS;
        }
        nameOffset = 0;
    854c:	mov	r7, r9
    854e:	b.n	83b6 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xa6>
        nCmp = nameLength - nameOffset;
        if (nCmp > 15) {
          nCmp = 15;
        }
        if (!exFatCmpName(dirName, name, nameOffset, nCmp)) {
          inSet = false;
    8550:	mov	r9, r0
    8552:	b.n	83b6 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xa6>
        m_firstCluster = getLe32(dirStream->firstCluster);
        m_dataLength = getLe64(dirStream->dataLength);
        if (!name) {
          goto found;
        }
        if (nameLength != dirStream->nameLength ||
    8554:	ldrh.w	r3, [sp, #44]	; 0x2c
    8558:	ldr	r2, [sp, #8]
    855a:	cmp	r3, r2
    855c:	bne.n	8548 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x238>
        dirStream = reinterpret_cast<DirStream_t*>(buf);
        m_flags = modeFlags;
        if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
          m_flags |= FILE_FLAG_CONTIGUOUS;
        }
        nameOffset = 0;
    855e:	movs	r7, #0
    8560:	b.n	83b6 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xa6>
  // error if already open
  if (isOpen() || !dir->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  switch (oflag & O_ACCMODE) {
    8562:	movs	r3, #3
    8564:	b.n	835a <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x4a>
                          uint8_t nameLength, oflag_t oflag) {
  int n;
  uint8_t nameOffset = 0;
  uint8_t nCmp;
  uint8_t modeFlags;
  uint16_t nameHash = 0;
    8566:	ldr	r3, [sp, #0]
    8568:	str	r3, [sp, #8]
    856a:	b.n	8392 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x82>
      freePos.cluster = dir->curCluster();
    }
    freeCount++;
  }

  freePos.isContiguous = dir->isContiguous();
    856c:	ldrb.w	r3, [r6, #51]	; 0x33
  memset(this, 0, sizeof(ExFatFile));
    8570:	movs	r1, #0
    8572:	movs	r2, #56	; 0x38
    8574:	mov	r0, r5
      freePos.cluster = dir->curCluster();
    }
    freeCount++;
  }

  freePos.isContiguous = dir->isContiguous();
    8576:	ubfx	r3, r3, #6, #1
  memset(this, 0, sizeof(ExFatFile));
  m_vol = dir->volume();
  m_attributes = FILE_ATTR_FILE;
  m_dirPos = freePos;
  for (uint8_t i = 0; i < freeNeed; i++) {
    857a:	mov	r7, r1

  freePos.isContiguous = dir->isContiguous();
  memset(this, 0, sizeof(ExFatFile));
  m_vol = dir->volume();
  m_attributes = FILE_ATTR_FILE;
  m_dirPos = freePos;
    857c:	add.w	r8, sp, #28
    8580:	add.w	r4, r5, #36	; 0x24
      freePos.cluster = dir->curCluster();
    }
    freeCount++;
  }

  freePos.isContiguous = dir->isContiguous();
    8584:	strb.w	r3, [sp, #36]	; 0x24
  memset(this, 0, sizeof(ExFatFile));
    8588:	bl	10d7c <memset>
    }
    memset(cache, 0 , 32);
    if (i == 0) {
      dirFile = reinterpret_cast<DirFile_t*>(cache);
      dirFile->type = EXFAT_TYPE_FILE;
      m_setCount = freeNeed - 1;
    858c:	ldr	r2, [sp, #12]
    858e:	ldr	r3, [r6, #32]
    8590:	add.w	r6, sl, #30
    8594:	add.w	r9, r2, #1
  }

  freePos.isContiguous = dir->isContiguous();
  memset(this, 0, sizeof(ExFatFile));
  m_vol = dir->volume();
  m_attributes = FILE_ATTR_FILE;
    8598:	movs	r2, #8
    freeCount++;
  }

  freePos.isContiguous = dir->isContiguous();
  memset(this, 0, sizeof(ExFatFile));
  m_vol = dir->volume();
    859a:	str	r3, [r5, #32]
    859c:	uxtb	r6, r6
  m_attributes = FILE_ATTR_FILE;
    859e:	strb.w	r2, [r5, #49]	; 0x31
    }
    memset(cache, 0 , 32);
    if (i == 0) {
      dirFile = reinterpret_cast<DirFile_t*>(cache);
      dirFile->type = EXFAT_TYPE_FILE;
      m_setCount = freeNeed - 1;
    85a2:	uxtb.w	r9, r9
    85a6:	str.w	sl, [sp, #12]
    85aa:	ldr.w	sl, [sp]

  freePos.isContiguous = dir->isContiguous();
  memset(this, 0, sizeof(ExFatFile));
  m_vol = dir->volume();
  m_attributes = FILE_ATTR_FILE;
  m_dirPos = freePos;
    85ae:	ldmia.w	r8, {r0, r1, r2}
    85b2:	stmia.w	r4, {r0, r1, r2}
    85b6:	mov	r0, r3
      if (1 != m_vol->dirSeek(&freePos, 32)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    cache = m_vol->dirCache(&freePos, FsCache::CACHE_FOR_WRITE);
    85b8:	movs	r2, #1
    85ba:	mov	r1, r8
    85bc:	bl	8bbc <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
    if (!cache || (cache[0] & 0x80)) {
    85c0:	mov	r4, r0
    85c2:	cmp	r0, #0
    85c4:	beq.w	832e <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
    85c8:	ldrsb.w	r3, [r0]
    85cc:	cmp	r3, #0
    85ce:	blt.w	832e <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
      DBG_FAIL_MACRO;
      goto fail;
    }
    memset(cache, 0 , 32);
    85d2:	movs	r2, #32
    85d4:	movs	r1, #0
    85d6:	bl	10d7c <memset>
    if (i == 0) {
    85da:	cmp	r7, #0
    85dc:	beq.n	86ae <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x39e>
        FsDateTime::callback(&date, &time, &ms10);
        dirFile->createTimeMs = ms10;
        setLe16(dirFile->createTime, time);
        setLe16(dirFile->createDate, date);
      }
    } else if (i == 1) {
    85de:	cmp	r7, #1
    85e0:	beq.n	868e <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x37e>
    85e2:	rsb	r3, r7, r7, lsl #4
    85e6:	cmp	r6, #15

      dirStream->nameLength = nameLength;
      setLe16(dirStream->nameHash, nameHash);
    } else {
      dirName = reinterpret_cast<DirName_t*>(cache);
      dirName->type = EXFAT_TYPE_NAME;
    85e8:	mov.w	r1, #193	; 0xc1
    85ec:	mov	r2, r6
    85ee:	sub.w	r3, r3, #30
    85f2:	it	cs
    85f4:	movcs	r2, #15
    85f6:	strb	r1, [r4, #0]
    85f8:	uxtb	r3, r3
      nameOffset = 15*(i - 2);
      nCmp = nameLength - nameOffset;
      if (nCmp > 15) {
        nCmp = 15;
      }
      for (size_t k = 0; k < nCmp; k++) {
    85fa:	cbz	r2, 8612 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x302>
    85fc:	adds	r4, #2
    85fe:	sxth	r2, r2
    8600:	add	r3, sl
    8602:	add.w	r2, r4, r2, lsl #1
        setLe16(dirName->unicode + 2*k, name[k + nameOffset]);
    8606:	ldrb.w	r1, [r3], #1
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    860a:	strh.w	r1, [r4], #2
      nameOffset = 15*(i - 2);
      nCmp = nameLength - nameOffset;
      if (nCmp > 15) {
        nCmp = 15;
      }
      for (size_t k = 0; k < nCmp; k++) {
    860e:	cmp	r2, r4
    8610:	bne.n	8606 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x2f6>
  freePos.isContiguous = dir->isContiguous();
  memset(this, 0, sizeof(ExFatFile));
  m_vol = dir->volume();
  m_attributes = FILE_ATTR_FILE;
  m_dirPos = freePos;
  for (uint8_t i = 0; i < freeNeed; i++) {
    8612:	adds	r7, #1
    8614:	uxtb	r7, r7
    8616:	cmp	fp, r7
    8618:	bls.n	866e <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x35e>
    if (i) {
      if (1 != m_vol->dirSeek(&freePos, 32)) {
    861a:	movs	r2, #32
    861c:	mov	r1, r8
    861e:	ldr	r0, [r5, #32]
    8620:	bl	8bf4 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)>
    8624:	cmp	r0, #1
    8626:	bne.w	832e <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
    862a:	subs	r6, #15
    862c:	ldr	r0, [r5, #32]
    862e:	uxtb	r6, r6
    8630:	b.n	85b8 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x2a8>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Write, truncate, or at end is an error for a directory or read-only file.
  if ((oflag & (O_TRUNC | O_AT_END)) || (m_flags & FILE_FLAG_WRITE)) {
    if (isSubDir() || isReadOnly() || READ_ONLY) {
    8632:	ldrb.w	r3, [r5, #49]	; 0x31
    8636:	tst.w	r3, #17
    863a:	bne.w	832e <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
      goto fail;
    }
  }

#if !READ_ONLY
  if (oflag & O_TRUNC) {
    863e:	ldr	r3, [sp, #112]	; 0x70
    8640:	lsls	r6, r3, #21
    8642:	bpl.w	8504 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1f4>
    if (!(m_flags & FILE_FLAG_WRITE)) {
    8646:	ldrb.w	r3, [r5, #51]	; 0x33
    864a:	lsls	r4, r3, #30
    864c:	bpl.w	832e <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
   * \param[in] length The desired length for the file.
   *
   * \return true for success or false for failure.
   */
  bool truncate(uint64_t length) {
    return seekSet(length) && truncate();
    8650:	movs	r2, #0
    8652:	movs	r3, #0
    8654:	mov	r0, r5
    8656:	bl	8208 <ExFatFile::seekSet(unsigned long long)>
    865a:	cmp	r0, #0
    865c:	beq.w	832e <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
    8660:	mov	r0, r5
    8662:	bl	9470 <ExFatFile::truncate()>
    8666:	cmp	r0, #0
    8668:	beq.w	832e <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
    866c:	b.n	850c <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1fc>
      for (size_t k = 0; k < nCmp; k++) {
        setLe16(dirName->unicode + 2*k, name[k + nameOffset]);
      }
    }
  }
  return sync();
    866e:	mov	r0, r5
    8670:	bl	9140 <ExFatFile::sync()>
    8674:	b.n	833a <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x2a>
    8676:	nop
    8678:	.word	0x88888889
    }
    if (!truncate(0)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if ((oflag & O_AT_END) && !seekSet(fileSize())) {
    867c:	mov	r0, r5
    867e:	ldrd	r2, r3, [r5, #16]
    8682:	bl	8208 <ExFatFile::seekSet(unsigned long long)>
    8686:	cmp	r0, #0
    8688:	bne.w	850c <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1fc>
    868c:	b.n	832e <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
      }
    } else if (i == 1) {
      dirStream = reinterpret_cast<DirStream_t*>(cache);
      dirStream->type = EXFAT_TYPE_STREAM;
      dirStream->flags = EXFAT_FLAG_ALWAYS1 | EXFAT_FLAG_CONTIGUOUS;
      m_flags = modeFlags | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
    868e:	ldr	r3, [sp, #4]
        setLe16(dirFile->createTime, time);
        setLe16(dirFile->createDate, date);
      }
    } else if (i == 1) {
      dirStream = reinterpret_cast<DirStream_t*>(cache);
      dirStream->type = EXFAT_TYPE_STREAM;
    8690:	movs	r1, #192	; 0xc0
      dirStream->flags = EXFAT_FLAG_ALWAYS1 | EXFAT_FLAG_CONTIGUOUS;
    8692:	movs	r2, #3
      m_flags = modeFlags | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
    8694:	orn	r3, r3, #63	; 0x3f
        setLe16(dirFile->createTime, time);
        setLe16(dirFile->createDate, date);
      }
    } else if (i == 1) {
      dirStream = reinterpret_cast<DirStream_t*>(cache);
      dirStream->type = EXFAT_TYPE_STREAM;
    8698:	strb	r1, [r4, #0]
      dirStream->flags = EXFAT_FLAG_ALWAYS1 | EXFAT_FLAG_CONTIGUOUS;
    869a:	strb	r2, [r4, #1]
      m_flags = modeFlags | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
    869c:	strb.w	r3, [r5, #51]	; 0x33

      dirStream->nameLength = nameLength;
    86a0:	ldrb.w	r3, [sp, #12]
    86a4:	strb	r3, [r4, #3]
    86a6:	ldrh.w	r3, [sp, #8]
    86aa:	strh	r3, [r4, #4]
    86ac:	b.n	8612 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x302>
      goto fail;
    }
    memset(cache, 0 , 32);
    if (i == 0) {
      dirFile = reinterpret_cast<DirFile_t*>(cache);
      dirFile->type = EXFAT_TYPE_FILE;
    86ae:	movs	r3, #133	; 0x85
    86b0:	strb	r3, [r4, #0]
      m_setCount = freeNeed - 1;
      dirFile->setCount = m_setCount;
      if (FsDateTime::callback) {
    86b2:	ldr	r3, [pc, #48]	; (86e4 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x3d4>)
    }
    memset(cache, 0 , 32);
    if (i == 0) {
      dirFile = reinterpret_cast<DirFile_t*>(cache);
      dirFile->type = EXFAT_TYPE_FILE;
      m_setCount = freeNeed - 1;
    86b4:	strb.w	r9, [r5, #48]	; 0x30
      dirFile->setCount = m_setCount;
    86b8:	strb.w	r9, [r4, #1]
      if (FsDateTime::callback) {
    86bc:	ldr	r3, [r3, #0]
    86be:	cmp	r3, #0
    86c0:	beq.n	8612 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x302>
        uint16_t date, time;
        uint8_t ms10;
        FsDateTime::callback(&date, &time, &ms10);
    86c2:	add.w	r2, sp, #23
    86c6:	add.w	r1, sp, #26
    86ca:	add	r0, sp, #24
    86cc:	blx	r3
        dirFile->createTimeMs = ms10;
    86ce:	ldrb.w	r1, [sp, #23]
    86d2:	ldrh.w	r2, [sp, #26]
    86d6:	ldrh.w	r3, [sp, #24]
    86da:	strb	r1, [r4, #20]
    86dc:	strh	r2, [r4, #8]
    86de:	strh	r3, [r4, #10]
    86e0:	b.n	8612 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x302>
    86e2:	nop
    86e4:	.word	0x20005b20

000086e8 <ExFatFile::open(ExFatFile*, char const*, int)>:
//-----------------------------------------------------------------------------
bool ExFatFile::open(ExFatVolume* vol, const ExChar_t* path, int oflag) {
  return vol && open(vol->vwd(), path, oflag);
}
//------------------------------------------------------------------------------
bool ExFatFile::open(ExFatFile* dirFile, const ExChar_t* path, oflag_t oflag) {
    86e8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    86ec:	mov	r6, r0
    86ee:	sub	sp, #84	; 0x54
 * \brief Basic file class.
 */
class ExFatFile {
 public:
  /** Create an instance. */
  ExFatFile() : m_attributes(FILE_ATTR_CLOSED), m_error(0), m_flags(0) {}
    86f0:	movs	r0, #0
    86f2:	mov	r5, r1
  ExFatFile tmpDir;
  ExName_t fname;
  // error if already open
  if (isOpen() || !dirFile->isDir()) {
    86f4:	ldrb.w	r1, [r6, #49]	; 0x31
//-----------------------------------------------------------------------------
bool ExFatFile::open(ExFatVolume* vol, const ExChar_t* path, int oflag) {
  return vol && open(vol->vwd(), path, oflag);
}
//------------------------------------------------------------------------------
bool ExFatFile::open(ExFatFile* dirFile, const ExChar_t* path, oflag_t oflag) {
    86f8:	str	r2, [sp, #12]
    86fa:	strb.w	r0, [sp, #73]	; 0x49
    86fe:	strb.w	r0, [sp, #74]	; 0x4a
    8702:	strb.w	r0, [sp, #75]	; 0x4b
  ExFatFile tmpDir;
  ExName_t fname;
  // error if already open
  if (isOpen() || !dirFile->isDir()) {
    8706:	cbnz	r1, 8714 <ExFatFile::open(ExFatFile*, char const*, int)+0x2c>
    8708:	mov	r9, r3
    870a:	ldrb.w	r3, [r5, #49]	; 0x31
    870e:	tst.w	r3, #80	; 0x50
    8712:	bne.n	871c <ExFatFile::open(ExFatFile*, char const*, int)+0x34>
    close();
  }
  return open(dirFile, &fname, oflag);

fail:
  return false;
    8714:	movs	r0, #0
}
    8716:	add	sp, #84	; 0x54
    8718:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  // error if already open
  if (isOpen() || !dirFile->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    871c:	ldrb	r3, [r2, #0]
    871e:	mov	r4, r2
    8720:	cmp	r3, #47	; 0x2f
    8722:	beq.n	8790 <ExFatFile::open(ExFatFile*, char const*, int)+0xa8>
  uint8_t setCount() {return m_setCount;}
  bool mkdir(ExFatFile* parent, ExName_t* fname);
  bool openRootFile(ExFatFile* dir,
                    const ExChar_t* name, uint8_t nameLength, oflag_t oflag);
  bool open(ExFatFile* dirFile, ExName_t* fname, oflag_t oflag) {
    return openRootFile(dirFile, fname->lfn, fname->len, oflag);
    8724:	mov.w	r8, #0
      goto fail;
    }
    dirFile = &tmpDir;
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
    8728:	mov	r1, r4
    872a:	add	r3, sp, #12
    872c:	add	r2, sp, #16
    872e:	mov	r0, r6
    8730:	bl	7f38 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>
    8734:	cmp	r0, #0
    8736:	beq.n	8714 <ExFatFile::open(ExFatFile*, char const*, int)+0x2c>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (*path == 0) {
    8738:	ldr	r3, [sp, #12]
    873a:	ldrb	r3, [r3, #0]
    873c:	cmp	r3, #0
    873e:	beq.n	87ba <ExFatFile::open(ExFatFile*, char const*, int)+0xd2>
    8740:	ldrb.w	r3, [sp, #16]
    8744:	mov	r1, r5
    8746:	ldr	r2, [sp, #20]
    8748:	mov	r0, r6
    874a:	str.w	r8, [sp]
    874e:	bl	8310 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)>
      break;
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
    8752:	cmp	r0, #0
    8754:	beq.n	8714 <ExFatFile::open(ExFatFile*, char const*, int)+0x2c>
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
    8756:	mov	r4, r6
    8758:	add	r7, sp, #24
    875a:	add.w	lr, r6, #48	; 0x30
    875e:	ldr	r0, [r4, #0]
    8760:	adds	r4, #16
    8762:	ldr.w	r1, [r4, #-12]
    8766:	mov	r5, r7
    8768:	ldr.w	r2, [r4, #-8]
    876c:	adds	r7, #16
    876e:	ldr.w	r3, [r4, #-4]
    8772:	cmp	r4, lr
    8774:	stmia	r5!, {r0, r1, r2, r3}
    8776:	bne.n	875e <ExFatFile::open(ExFatFile*, char const*, int)+0x76>
    8778:	ldr	r0, [r4, #0]
    dirFile = &tmpDir;
    877a:	add	r5, sp, #24
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
    877c:	str	r0, [r7, #0]
#include "ExFatFile.h"
#include "ExFatVolume.h"
#include "upcase.h"
//-----------------------------------------------------------------------------
bool ExFatFile::close() {
  bool rtn = sync();
    877e:	mov	r0, r6
    8780:	bl	9140 <ExFatFile::sync()>
  m_attributes = FILE_ATTR_CLOSED;
    8784:	strb.w	r8, [r6, #49]	; 0x31
  m_flags = 0;
    8788:	strb.w	r8, [r6, #51]	; 0x33
    878c:	ldr	r4, [sp, #12]
    878e:	b.n	8728 <ExFatFile::open(ExFatFile*, char const*, int)+0x40>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
      path++;
    8790:	adds	r4, #1
    8792:	str	r4, [sp, #12]
  if (isOpen() || !dirFile->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
    8794:	ldrb	r1, [r4, #0]
    8796:	cmp	r1, #47	; 0x2f
    8798:	beq.n	8790 <ExFatFile::open(ExFatFile*, char const*, int)+0xa8>
      path++;
    }
    if (*path == 0) {
    879a:	cbz	r1, 87d2 <ExFatFile::open(ExFatFile*, char const*, int)+0xea>
bool ExFatFile::openRoot(ExFatVolume* vol) {
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
    879c:	add	r0, sp, #24
    879e:	movs	r2, #56	; 0x38
    87a0:	movs	r1, #0
      path++;
    }
    if (*path == 0) {
      return openRoot(dirFile->m_vol);
    }
    if (!tmpDir.openRoot(dirFile->m_vol)) {
    87a2:	ldr	r7, [r5, #32]
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile = &tmpDir;
    87a4:	mov	r5, r0
bool ExFatFile::openRoot(ExFatVolume* vol) {
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
    87a6:	bl	10d7c <memset>
  m_attributes = FILE_ATTR_ROOT;
    87aa:	movs	r2, #64	; 0x40
  m_vol = vol;
  m_flags = FILE_FLAG_READ;
    87ac:	movs	r3, #1
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
  m_attributes = FILE_ATTR_ROOT;
  m_vol = vol;
    87ae:	str	r7, [sp, #56]	; 0x38
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
  m_attributes = FILE_ATTR_ROOT;
    87b0:	strb.w	r2, [sp, #73]	; 0x49
  m_vol = vol;
  m_flags = FILE_FLAG_READ;
    87b4:	strb.w	r3, [sp, #75]	; 0x4b
    87b8:	b.n	8724 <ExFatFile::open(ExFatFile*, char const*, int)+0x3c>
    87ba:	ldrb.w	r3, [sp, #16]
    87be:	mov	r1, r5
    87c0:	ldr	r2, [sp, #20]
    87c2:	mov	r0, r6
    87c4:	str.w	r9, [sp]
    87c8:	bl	8310 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)>
  }
  return open(dirFile, &fname, oflag);

fail:
  return false;
}
    87cc:	add	sp, #84	; 0x54
    87ce:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
bool ExFatFile::openRoot(ExFatVolume* vol) {
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
    87d2:	movs	r2, #56	; 0x38
    87d4:	mov	r0, r6
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
      path++;
    }
    if (*path == 0) {
      return openRoot(dirFile->m_vol);
    87d6:	ldr	r4, [r5, #32]
bool ExFatFile::openRoot(ExFatVolume* vol) {
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
    87d8:	bl	10d7c <memset>
  m_attributes = FILE_ATTR_ROOT;
    87dc:	movs	r3, #64	; 0x40
  m_vol = vol;
  m_flags = FILE_FLAG_READ;
    87de:	movs	r0, #1
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
  m_attributes = FILE_ATTR_ROOT;
  m_vol = vol;
    87e0:	str	r4, [r6, #32]
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
  m_attributes = FILE_ATTR_ROOT;
    87e2:	strb.w	r3, [r6, #49]	; 0x31
  m_vol = vol;
  m_flags = FILE_FLAG_READ;
    87e6:	strb.w	r0, [r6, #51]	; 0x33
    87ea:	b.n	8716 <ExFatFile::open(ExFatFile*, char const*, int)+0x2e>

000087ec <ExFatFile::open(ExFatVolume*, char const*, int)>:
bool ExFatFile::open(const ExChar_t* path, int oflag) {
  return open(ExFatVolume::cwv(), path, oflag);
}
//-----------------------------------------------------------------------------
bool ExFatFile::open(ExFatVolume* vol, const ExChar_t* path, int oflag) {
  return vol && open(vol->vwd(), path, oflag);
    87ec:	cbz	r1, 87f6 <ExFatFile::open(ExFatVolume*, char const*, int)+0xa>
    87ee:	add.w	r1, r1, #1088	; 0x440
    87f2:	b.w	86e8 <ExFatFile::open(ExFatFile*, char const*, int)>
}
    87f6:	mov	r0, r1
    87f8:	bx	lr
    87fa:	nop

000087fc <ExFatFile::openNext(ExFatFile*, int)>:
  }
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::openNext(ExFatFile* dir, oflag_t oflag) {
  if (isOpen() || !dir->isDir() || (dir->curPosition() & 0X1F)) {
    87fc:	ldrb.w	r3, [r0, #49]	; 0x31
    8800:	cbnz	r3, 8818 <ExFatFile::openNext(ExFatFile*, int)+0x1c>
    DBG_FAIL_MACRO;
  }
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::openNext(ExFatFile* dir, oflag_t oflag) {
    8802:	push	{r4, r5, lr}
  if (isOpen() || !dir->isDir() || (dir->curPosition() & 0X1F)) {
    8804:	ldrb.w	r4, [r1, #49]	; 0x31
    DBG_FAIL_MACRO;
  }
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::openNext(ExFatFile* dir, oflag_t oflag) {
    8808:	sub	sp, #12
    880a:	mov	r5, r1
  if (isOpen() || !dir->isDir() || (dir->curPosition() & 0X1F)) {
    880c:	ands.w	r4, r4, #80	; 0x50
    8810:	bne.n	881c <ExFatFile::openNext(ExFatFile*, int)+0x20>
    goto fail;
  }
  return openRootFile(dir, nullptr, 0, oflag);

 fail:
  return false;
    8812:	mov	r0, r4
}
    8814:	add	sp, #12
    8816:	pop	{r4, r5, pc}
    goto fail;
  }
  return openRootFile(dir, nullptr, 0, oflag);

 fail:
  return false;
    8818:	movs	r0, #0
}
    881a:	bx	lr
  }
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::openNext(ExFatFile* dir, oflag_t oflag) {
  if (isOpen() || !dir->isDir() || (dir->curPosition() & 0X1F)) {
    881c:	ldrd	r4, r5, [r5]
    8820:	movs	r5, #0
    8822:	and.w	r4, r4, #31
    8826:	orrs	r4, r5
    8828:	beq.n	8830 <ExFatFile::openNext(ExFatFile*, int)+0x34>
    goto fail;
  }
  return openRootFile(dir, nullptr, 0, oflag);

 fail:
  return false;
    882a:	mov	r0, r3
}
    882c:	add	sp, #12
    882e:	pop	{r4, r5, pc}
bool ExFatFile::openNext(ExFatFile* dir, oflag_t oflag) {
  if (isOpen() || !dir->isDir() || (dir->curPosition() & 0X1F)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  return openRootFile(dir, nullptr, 0, oflag);
    8830:	str	r2, [sp, #0]
    8832:	mov	r2, r3
    8834:	bl	8310 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)>

 fail:
  return false;
}
    8838:	add	sp, #12
    883a:	pop	{r4, r5, pc}

0000883c <FsCache::sync() [clone .part.2]>:

fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FsCache::sync() {
    883c:	push	{r4, lr}
    883e:	mov	r4, r0
  if (m_status & CACHE_STATUS_DIRTY) {
    if (!m_blockDev->writeSector(m_sector, m_cacheBuffer)) {
    8840:	ldr	r0, [r0, #4]
    8842:	ldr	r3, [r0, #0]
    8844:	add.w	r2, r4, #12
    8848:	ldr	r1, [r4, #8]
    884a:	ldr	r3, [r3, #24]
    884c:	blx	r3
    884e:	cbz	r0, 8858 <FsCache::sync() [clone .part.2]+0x1c>
      DBG_FAIL_MACRO;
      goto fail;
    }
    m_status &= ~CACHE_STATUS_DIRTY;
    8850:	ldrb	r3, [r4, #0]
    8852:	bic.w	r3, r3, #1
    8856:	strb	r3, [r4, #0]
  }
  return true;

fail:
  return false;
}
    8858:	pop	{r4, pc}
    885a:	nop

0000885c <FsCache::invalidate()>:
#include "../common/DebugMacros.h"
#include "ExFatVolume.h"
#include "../common/FsStructs.h"
//-----------------------------------------------------------------------------
void FsCache::invalidate() {
  m_status = 0;
    885c:	movs	r2, #0
  m_sector = 0XFFFFFFFF;
    885e:	mov.w	r3, #4294967295
#include "../common/DebugMacros.h"
#include "ExFatVolume.h"
#include "../common/FsStructs.h"
//-----------------------------------------------------------------------------
void FsCache::invalidate() {
  m_status = 0;
    8862:	strb	r2, [r0, #0]
  m_sector = 0XFFFFFFFF;
    8864:	str	r3, [r0, #8]
    8866:	bx	lr

00008868 <FsCache::get(unsigned long, unsigned char)>:
}
//-----------------------------------------------------------------------------
uint8_t* FsCache::get(uint32_t sector, uint8_t option) {
    8868:	push	{r3, r4, r5, r6, r7, lr}
  if (!m_blockDev) {
    886a:	ldr	r3, [r0, #4]
    886c:	cbz	r3, 88ae <FsCache::get(unsigned long, unsigned char)+0x46>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_sector != sector) {
    886e:	ldr	r3, [r0, #8]
    8870:	mov	r4, r0
    8872:	mov	r5, r2
    8874:	mov	r7, r1
    8876:	cmp	r3, r1
    8878:	beq.n	8898 <FsCache::get(unsigned long, unsigned char)+0x30>
fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FsCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    887a:	ldrb	r3, [r0, #0]
    887c:	lsls	r2, r3, #31
    887e:	bmi.n	88a6 <FsCache::get(unsigned long, unsigned char)+0x3e>
  if (m_sector != sector) {
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
    8880:	lsls	r3, r5, #30
    8882:	bpl.n	88b2 <FsCache::get(unsigned long, unsigned char)+0x4a>
    8884:	add.w	r6, r4, #12
    8888:	movs	r2, #0
      }
    }
    m_status = 0;
    m_sector = sector;
  }
  m_status |= option & CACHE_STATUS_MASK;
    888a:	and.w	r5, r5, #1
    888e:	mov	r0, r6
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status = 0;
    m_sector = sector;
    8890:	str	r7, [r4, #8]
  }
  m_status |= option & CACHE_STATUS_MASK;
    8892:	orrs	r5, r2
    8894:	strb	r5, [r4, #0]
  return m_cacheBuffer;

fail:
  return nullptr;
}
    8896:	pop	{r3, r4, r5, r6, r7, pc}
    8898:	ldrsb.w	r2, [r0], #12
      }
    }
    m_status = 0;
    m_sector = sector;
  }
  m_status |= option & CACHE_STATUS_MASK;
    889c:	and.w	r5, r5, #1
    88a0:	orrs	r5, r2
    88a2:	strb	r5, [r4, #0]
  return m_cacheBuffer;

fail:
  return nullptr;
}
    88a4:	pop	{r3, r4, r5, r6, r7, pc}
    88a6:	bl	883c <FsCache::sync() [clone .part.2]>
  if (!m_blockDev) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_sector != sector) {
    if (!sync()) {
    88aa:	cmp	r0, #0
    88ac:	bne.n	8880 <FsCache::get(unsigned long, unsigned char)+0x18>
  }
  m_status |= option & CACHE_STATUS_MASK;
  return m_cacheBuffer;

fail:
  return nullptr;
    88ae:	movs	r0, #0
    88b0:	pop	{r3, r4, r5, r6, r7, pc}
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
      if (!m_blockDev->readSector(sector, m_cacheBuffer)) {
    88b2:	ldr	r0, [r4, #4]
    88b4:	add.w	r6, r4, #12
    88b8:	mov	r1, r7
    88ba:	ldr	r3, [r0, #0]
    88bc:	mov	r2, r6
    88be:	ldr	r3, [r3, #8]
    88c0:	blx	r3
    88c2:	cmp	r0, #0
    88c4:	bne.n	8888 <FsCache::get(unsigned long, unsigned char)+0x20>
    88c6:	b.n	88ae <FsCache::get(unsigned long, unsigned char)+0x46>

000088c8 <ExFatPartition::fatGet(unsigned long, unsigned long*) [clone .part.3]>:
    }
  }
  return 1;
}
//-----------------------------------------------------------------------------
uint8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
    88c8:	push	{r3, r4, r5, lr}
    88ca:	mov	r4, r1
#endif  // USE_EXFAT_BITMAP_CACHE
  }
  void dataCacheDirty() {m_dataCache.dirty();}
  void dataCacheInvalidate() {m_dataCache.invalidate();}
  uint8_t* dataCacheGet(uint32_t sector, uint8_t option) {
    return m_dataCache.get(sector, option);
    88cc:	ldr.w	r1, [r0, #1052]	; 0x41c
    88d0:	mov	r5, r2
    88d2:	add.w	r0, r0, #524	; 0x20c
    88d6:	movs	r2, #0
    88d8:	add.w	r1, r1, r4, lsr #7
    88dc:	bl	8868 <FsCache::get(unsigned long, unsigned char)>
    return -1;
  }
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));

  cache = dataCacheGet(sector, FsCache::CACHE_FOR_READ);
  if (!cache) {
    88e0:	cbz	r0, 88f4 <ExFatPartition::fatGet(unsigned long, unsigned long*) [clone .part.3]+0x2c>
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
}
inline uint32_t getLe32(const uint8_t* src) {
  return *reinterpret_cast<const uint32_t*>(src);
    88e2:	lsls	r4, r4, #2
    88e4:	ubfx	r4, r4, #0, #9
    88e8:	ldr	r3, [r0, r4]
    return -1;
  }
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));

  if (next == EXFAT_EOC) {
    88ea:	adds	r2, r3, #1
    88ec:	beq.n	88f8 <ExFatPartition::fatGet(unsigned long, unsigned long*) [clone .part.3]+0x30>
    return 0;
  }
  *value = next;
    88ee:	str	r3, [r5, #0]
  return 1;
    88f0:	movs	r0, #1
    88f2:	pop	{r3, r4, r5, pc}
  }
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));

  cache = dataCacheGet(sector, FsCache::CACHE_FOR_READ);
  if (!cache) {
    return -1;
    88f4:	movs	r0, #255	; 0xff
    88f6:	pop	{r3, r4, r5, pc}
  }
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));

  if (next == EXFAT_EOC) {
    return 0;
    88f8:	movs	r0, #0
  }
  *value = next;
  return 1;
}
    88fa:	pop	{r3, r4, r5, pc}

000088fc <ExFatPartition::fatPut(unsigned long, unsigned long) [clone .part.4]>:
//-----------------------------------------------------------------------------
bool ExFatPartition::fatPut(uint32_t cluster, uint32_t value) {
    88fc:	push	{r3, r4, r5, lr}
    88fe:	mov	r4, r1
    8900:	ldr.w	r1, [r0, #1052]	; 0x41c
    8904:	mov	r5, r2
    8906:	add.w	r0, r0, #524	; 0x20c
    890a:	movs	r2, #1
    890c:	add.w	r1, r1, r4, lsr #7
    8910:	bl	8868 <FsCache::get(unsigned long, unsigned char)>
    DBG_FAIL_MACRO;
    goto fail;
  }
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
  cache = dataCacheGet(sector, FsCache::CACHE_FOR_WRITE);
  if (!cache) {
    8914:	mov	r3, r0
    8916:	cbz	r0, 8924 <ExFatPartition::fatPut(unsigned long, unsigned long) [clone .part.4]+0x28>
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
}

inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
    8918:	lsls	r4, r4, #2
    DBG_FAIL_MACRO;
    goto fail;
  }
  setLe32(cache + ((cluster << 2) & m_sectorMask), value);
  return true;
    891a:	movs	r0, #1
    891c:	ubfx	r4, r4, #0, #9
    8920:	str	r5, [r3, r4]
    8922:	pop	{r3, r4, r5, pc}

 fail:
  return false;
}
    8924:	pop	{r3, r4, r5, pc}
    8926:	nop

00008928 <FsCache::sync()>:
fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FsCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    8928:	ldrb	r3, [r0, #0]
    892a:	lsls	r3, r3, #31
    892c:	bmi.n	8932 <FsCache::sync()+0xa>
  }
  return true;

fail:
  return false;
}
    892e:	movs	r0, #1
    8930:	bx	lr
    8932:	b.w	883c <FsCache::sync() [clone .part.2]>
    8936:	nop

00008938 <ExFatPartition::bitmapFind(unsigned long, unsigned long)>:
 fail:
  return false;
}
//-----------------------------------------------------------------------------
// return 0 if error, 1 if no space, else start cluster.
uint32_t ExFatPartition::bitmapFind(uint32_t cluster, uint32_t count) {
    8938:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    893c:	mov	r8, r0
    893e:	mov	r9, r2
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
    8940:	mov	fp, r1
    8942:	cmp	r1, #0
    8944:	beq.n	89ce <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x96>
    8946:	subs	r7, r1, #2
  if (start >= m_clusterCount) {
    8948:	ldr.w	r3, [r8, #1064]	; 0x428
    894c:	cmp	r7, r3
    894e:	bcs.n	89c6 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x8e>
    8950:	and.w	r5, r7, #7
    8954:	movs	r3, #1
    8956:	ubfx	sl, r7, #3, #9
    895a:	lsl.w	r5, r3, r5
    895e:	uxtb	r5, r5
    start = 0;
  }
  uint32_t endAlloc = start;
  uint32_t bgnAlloc = start;
    8960:	mov	r6, r7
uint32_t ExFatPartition::bitmapFind(uint32_t cluster, uint32_t count) {
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
  if (start >= m_clusterCount) {
    start = 0;
  }
  uint32_t endAlloc = start;
    8962:	mov	r4, r7
  bool bitmapModify(uint32_t cluster, uint32_t count, bool value);
  //----------------------------------------------------------------------------
  // Cache functions.
  uint8_t* bitmapCacheGet(uint32_t sector, uint8_t option) {
#if USE_EXFAT_BITMAP_CACHE
    return m_bitmapCache.get(sector, option);
    8964:	ldr.w	r1, [r8, #1060]	; 0x424
    8968:	movs	r2, #0
    896a:	mov	r0, r8
    896c:	add.w	r1, r1, r4, lsr #12
    8970:	bl	8868 <FsCache::get(unsigned long, unsigned char)>
  uint8_t mask = 1 << (start & 7);
  while (true) {
    uint32_t sector = m_clusterHeapStartSector +
                     (endAlloc >> (m_bytesPerSectorShift + 3));
    cache = bitmapCacheGet(sector, FsCache::CACHE_FOR_READ);
    if (!cache) {
    8974:	cbz	r0, 89a8 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x70>
    8976:	ldrb.w	r1, [r0, sl]
    897a:	b.n	8992 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x5a>
    }
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
        endAlloc++;
        if (!(mask & cache[i])) {
          if ((endAlloc - bgnAlloc) == count) {
    897c:	cmp	r2, r9
    897e:	beq.n	89d4 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x9c>
            return bgnAlloc + 2;
          }
        } else {
          bgnAlloc = endAlloc;
        }
        if (endAlloc == start) {
    8980:	cmp	r7, r4
    8982:	beq.n	89a6 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x6e>
          return 1;
        }
        if (endAlloc >= m_clusterCount) {
    8984:	ldr.w	r2, [r8, #1064]	; 0x428
    8988:	cmp	r4, r2
    898a:	bcs.n	89ba <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x82>
    cache = bitmapCacheGet(sector, FsCache::CACHE_FOR_READ);
    if (!cache) {
      return 0;
    }
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
    898c:	ands.w	r5, r3, #255	; 0xff
    8990:	beq.n	89ac <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x74>
        endAlloc++;
    8992:	adds	r4, #1
        if (!(mask & cache[i])) {
    8994:	tst	r5, r1
    cache = bitmapCacheGet(sector, FsCache::CACHE_FOR_READ);
    if (!cache) {
      return 0;
    }
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
    8996:	mov.w	r3, r5, lsl #1
        endAlloc++;
        if (!(mask & cache[i])) {
          if ((endAlloc - bgnAlloc) == count) {
    899a:	sub.w	r2, r4, r6
      return 0;
    }
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
        endAlloc++;
        if (!(mask & cache[i])) {
    899e:	beq.n	897c <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x44>
            return bgnAlloc + 2;
          }
        } else {
          bgnAlloc = endAlloc;
        }
        if (endAlloc == start) {
    89a0:	cmp	r7, r4
    if (!cache) {
      return 0;
    }
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
        endAlloc++;
    89a2:	mov	r6, r4
            return bgnAlloc + 2;
          }
        } else {
          bgnAlloc = endAlloc;
        }
        if (endAlloc == start) {
    89a4:	bne.n	8984 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x4c>
          return 1;
    89a6:	movs	r0, #1
      mask = 1;
    }
    i = 0;
  }
  return 0;
}
    89a8:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    89ac:	add.w	sl, sl, #1
          endAlloc = bgnAlloc = 0;
          i = sectorSize;
          break;
        }
      }
      mask = 1;
    89b0:	movs	r5, #1
                     (endAlloc >> (m_bytesPerSectorShift + 3));
    cache = bitmapCacheGet(sector, FsCache::CACHE_FOR_READ);
    if (!cache) {
      return 0;
    }
    for (; i < sectorSize; i++) {
    89b2:	cmp.w	sl, #512	; 0x200
    89b6:	bne.n	8976 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x3e>
    89b8:	b.n	89be <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x86>
        }
        if (endAlloc == start) {
          return 1;
        }
        if (endAlloc >= m_clusterCount) {
          endAlloc = bgnAlloc = 0;
    89ba:	movs	r6, #0
    89bc:	mov	r4, r6
          break;
        }
      }
      mask = 1;
    }
    i = 0;
    89be:	mov.w	sl, #0
    89c2:	movs	r5, #1
    89c4:	b.n	8964 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x2c>
    89c6:	movs	r7, #0
    89c8:	movs	r5, #1
//-----------------------------------------------------------------------------
// return 0 if error, 1 if no space, else start cluster.
uint32_t ExFatPartition::bitmapFind(uint32_t cluster, uint32_t count) {
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
  if (start >= m_clusterCount) {
    start = 0;
    89ca:	mov	sl, r7
    89cc:	b.n	8960 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x28>
  return false;
}
//-----------------------------------------------------------------------------
// return 0 if error, 1 if no space, else start cluster.
uint32_t ExFatPartition::bitmapFind(uint32_t cluster, uint32_t count) {
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
    89ce:	ldr.w	r7, [r0, #1048]	; 0x418
    89d2:	b.n	8948 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x10>
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
        endAlloc++;
        if (!(mask & cache[i])) {
          if ((endAlloc - bgnAlloc) == count) {
            if (cluster == 0 && count == 1) {
    89d4:	cmp.w	fp, #0
    89d8:	bne.n	89e4 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0xac>
    89da:	cmp.w	r9, #1
              // Start at found sector.  bitmapModify may increase this.
              m_bitmapStart = bgnAlloc;
    89de:	it	eq
    89e0:	streq.w	r6, [r8, #1048]	; 0x418
            }
            return bgnAlloc + 2;
    89e4:	adds	r0, r6, #2
    89e6:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    89ea:	nop

000089ec <ExFatPartition::init(BlockDeviceInterface*, unsigned char)>:

fail:
  return false;
}
//=============================================================================
bool ExFatPartition::init(BlockDevice* dev, uint8_t part) {
    89ec:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  pbs_t* pbs;
  BpbExFat_t* bpb;
  MbrSector_t* mbr;
  MbrPart_t* mp;

  m_fatType = 0;
    89f0:	movs	r3, #0

fail:
  return false;
}
//=============================================================================
bool ExFatPartition::init(BlockDevice* dev, uint8_t part) {
    89f2:	mov	r4, r0
#include "ExFatVolume.h"
#include "../common/FsStructs.h"
//-----------------------------------------------------------------------------
void FsCache::invalidate() {
  m_status = 0;
  m_sector = 0XFFFFFFFF;
    89f4:	mov.w	r6, #4294967295
#endif  // USE_EXFAT_BITMAP_CACHE
  }
  void dataCacheDirty() {m_dataCache.dirty();}
  void dataCacheInvalidate() {m_dataCache.invalidate();}
  uint8_t* dataCacheGet(uint32_t sector, uint8_t option) {
    return m_dataCache.get(sector, option);
    89f8:	add.w	r7, r0, #524	; 0x20c

fail:
  return false;
}
//=============================================================================
bool ExFatPartition::init(BlockDevice* dev, uint8_t part) {
    89fc:	mov	r5, r2
  BpbExFat_t* bpb;
  MbrSector_t* mbr;
  MbrPart_t* mp;

  m_fatType = 0;
  m_blockDev = dev;
    89fe:	str.w	r1, [r0, #1080]	; 0x438
  }
  /** Initialize the cache.
   * \param[in] blockDev Block device for this partition.
   */
  void init(BlockDevice* blockDev) {
    m_blockDev = blockDev;
    8a02:	str	r1, [r0, #4]
#endif  // USE_EXFAT_BITMAP_CACHE
  }
  void dataCacheDirty() {m_dataCache.dirty();}
  void dataCacheInvalidate() {m_dataCache.invalidate();}
  uint8_t* dataCacheGet(uint32_t sector, uint8_t option) {
    return m_dataCache.get(sector, option);
    8a04:	mov	r2, r3
  }
  /** Initialize the cache.
   * \param[in] blockDev Block device for this partition.
   */
  void init(BlockDevice* blockDev) {
    m_blockDev = blockDev;
    8a06:	str.w	r1, [r4, #528]	; 0x210
#endif  // USE_EXFAT_BITMAP_CACHE
  }
  void dataCacheDirty() {m_dataCache.dirty();}
  void dataCacheInvalidate() {m_dataCache.invalidate();}
  uint8_t* dataCacheGet(uint32_t sector, uint8_t option) {
    return m_dataCache.get(sector, option);
    8a0a:	mov	r0, r7
    8a0c:	mov	r1, r3
  pbs_t* pbs;
  BpbExFat_t* bpb;
  MbrSector_t* mbr;
  MbrPart_t* mp;

  m_fatType = 0;
    8a0e:	strb.w	r3, [r4, #1084]	; 0x43c
#include "../common/DebugMacros.h"
#include "ExFatVolume.h"
#include "../common/FsStructs.h"
//-----------------------------------------------------------------------------
void FsCache::invalidate() {
  m_status = 0;
    8a12:	strb	r3, [r4, #0]
    8a14:	strb.w	r3, [r4, #524]	; 0x20c
  m_sector = 0XFFFFFFFF;
    8a18:	str	r6, [r4, #8]
    8a1a:	str.w	r6, [r4, #532]	; 0x214
    8a1e:	bl	8868 <FsCache::get(unsigned long, unsigned char)>

  m_fatType = 0;
  m_blockDev = dev;
  cacheInit(m_blockDev);
  cache = dataCacheGet(0, FsCache::CACHE_FOR_READ);
  if (part > 4 || !cache) {
    8a22:	cmp	r5, #4
    8a24:	bhi.n	8a42 <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0x56>
    8a26:	mov	r6, r0
    8a28:	cbz	r0, 8a42 <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0x56>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (part >= 1) {
    8a2a:	cbnz	r5, 8a48 <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0x5c>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  pbs = reinterpret_cast<pbs_t*>(cache);
  if (strncmp(pbs->oemName, "EXFAT", 5)) {
    8a2c:	movs	r2, #5
    8a2e:	ldr	r1, [pc, #164]	; (8ad4 <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0xe8>)
    8a30:	adds	r0, r6, #3
    8a32:	bl	1149c <strncmp>
    8a36:	mov	r3, r0
    8a38:	cbnz	r0, 8a42 <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0x56>
    DBG_FAIL_MACRO;
    goto fail;
  }
  bpb = reinterpret_cast<BpbExFat_t*>(pbs->bpb);
  if (bpb->bytesPerSectorShift != m_bytesPerSectorShift) {
    8a3a:	ldrb.w	r2, [r6, #108]	; 0x6c
    8a3e:	cmp	r2, #9
    8a40:	beq.n	8a78 <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0x8c>
  bitmapFind(0, 1);
  m_fatType = FAT_TYPE_EXFAT;
  return true;

 fail:
  return false;
    8a42:	movs	r0, #0
    8a44:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (part >= 1) {
    mbr = reinterpret_cast<MbrSector_t*>(cache);
    mp = &mbr->part[part - 1];
    8a48:	subs	r3, r5, #1
    if ((mp->boot != 0 && mp->boot != 0X80) || mp->type == 0) {
    8a4a:	add.w	r3, r0, r3, lsl #4
    8a4e:	ldrb.w	r2, [r3, #446]	; 0x1be
    8a52:	ands.w	r2, r2, #127	; 0x7f
    8a56:	bne.n	8a42 <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0x56>
    8a58:	ldrb.w	r3, [r3, #450]	; 0x1c2
    8a5c:	cmp	r3, #0
    8a5e:	beq.n	8a42 <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0x56>
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
}
inline uint32_t getLe32(const uint8_t* src) {
  return *reinterpret_cast<const uint32_t*>(src);
    8a60:	add.w	r5, r0, r5, lsl #4
    8a64:	mov	r0, r7
    8a66:	ldr.w	r5, [r5, #438]	; 0x1b6
    8a6a:	mov	r1, r5
    8a6c:	bl	8868 <FsCache::get(unsigned long, unsigned char)>
      DBG_FAIL_MACRO;
      goto fail;
    }
    volStart = getLe32(mp->relativeSectors);
    cache = dataCacheGet(volStart, FsCache::CACHE_FOR_READ);
    if (!cache) {
    8a70:	mov	r6, r0
    8a72:	cmp	r0, #0
    8a74:	bne.n	8a2c <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0x40>
    8a76:	b.n	8a42 <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0x56>
  bpb = reinterpret_cast<BpbExFat_t*>(pbs->bpb);
  if (bpb->bytesPerSectorShift != m_bytesPerSectorShift) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_fatStartSector = volStart + getLe32(bpb->fatOffset);
    8a78:	ldr	r2, [r6, #80]	; 0x50
  m_fatLength = getLe32(bpb->fatLength);
  m_clusterHeapStartSector = volStart + getLe32(bpb->clusterHeapOffset);
  m_clusterCount = getLe32(bpb->clusterCount);
  m_rootDirectoryCluster = getLe32(bpb->rootDirectoryCluster);
  m_sectorsPerClusterShift = bpb->sectorsPerClusterShift;
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
    8a7a:	mov.w	r8, #1
  m_clusterMask = m_bytesPerCluster - 1;
  // Set m_bitmapStart to first free cluster.
  m_bitmapStart = 0;
  bitmapFind(0, 1);
    8a7e:	mov	r1, r0
    8a80:	mov	r0, r4
  bpb = reinterpret_cast<BpbExFat_t*>(pbs->bpb);
  if (bpb->bytesPerSectorShift != m_bytesPerSectorShift) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_fatStartSector = volStart + getLe32(bpb->fatOffset);
    8a82:	add.w	lr, r2, r5
  m_sectorsPerClusterShift = bpb->sectorsPerClusterShift;
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
  m_clusterMask = m_bytesPerCluster - 1;
  // Set m_bitmapStart to first free cluster.
  m_bitmapStart = 0;
  bitmapFind(0, 1);
    8a86:	mov	r2, r8
  bpb = reinterpret_cast<BpbExFat_t*>(pbs->bpb);
  if (bpb->bytesPerSectorShift != m_bytesPerSectorShift) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_fatStartSector = volStart + getLe32(bpb->fatOffset);
    8a88:	str.w	lr, [r4, #1052]	; 0x41c
  m_fatLength = getLe32(bpb->fatLength);
    8a8c:	ldr	r7, [r6, #84]	; 0x54
    8a8e:	str.w	r7, [r4, #1056]	; 0x420
  m_clusterHeapStartSector = volStart + getLe32(bpb->clusterHeapOffset);
    8a92:	ldr	r7, [r6, #88]	; 0x58
    8a94:	add	r5, r7
    8a96:	str.w	r5, [r4, #1060]	; 0x424
    8a9a:	ldr	r5, [r6, #92]	; 0x5c
  m_clusterCount = getLe32(bpb->clusterCount);
    8a9c:	str.w	r5, [r4, #1064]	; 0x428
    8aa0:	ldr	r5, [r6, #96]	; 0x60
  m_rootDirectoryCluster = getLe32(bpb->rootDirectoryCluster);
    8aa2:	str.w	r5, [r4, #1068]	; 0x42c
  m_sectorsPerClusterShift = bpb->sectorsPerClusterShift;
    8aa6:	ldrb.w	r5, [r6, #109]	; 0x6d
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
  m_clusterMask = m_bytesPerCluster - 1;
  // Set m_bitmapStart to first free cluster.
  m_bitmapStart = 0;
    8aaa:	str.w	r3, [r4, #1048]	; 0x418
  m_fatLength = getLe32(bpb->fatLength);
  m_clusterHeapStartSector = volStart + getLe32(bpb->clusterHeapOffset);
  m_clusterCount = getLe32(bpb->clusterCount);
  m_rootDirectoryCluster = getLe32(bpb->rootDirectoryCluster);
  m_sectorsPerClusterShift = bpb->sectorsPerClusterShift;
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
    8aae:	add.w	r3, r5, #9
  m_fatStartSector = volStart + getLe32(bpb->fatOffset);
  m_fatLength = getLe32(bpb->fatLength);
  m_clusterHeapStartSector = volStart + getLe32(bpb->clusterHeapOffset);
  m_clusterCount = getLe32(bpb->clusterCount);
  m_rootDirectoryCluster = getLe32(bpb->rootDirectoryCluster);
  m_sectorsPerClusterShift = bpb->sectorsPerClusterShift;
    8ab2:	strb.w	r5, [r4, #1085]	; 0x43d
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
    8ab6:	lsl.w	r3, r8, r3
  m_clusterMask = m_bytesPerCluster - 1;
    8aba:	subs	r5, r3, #1
  m_fatLength = getLe32(bpb->fatLength);
  m_clusterHeapStartSector = volStart + getLe32(bpb->clusterHeapOffset);
  m_clusterCount = getLe32(bpb->clusterCount);
  m_rootDirectoryCluster = getLe32(bpb->rootDirectoryCluster);
  m_sectorsPerClusterShift = bpb->sectorsPerClusterShift;
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
    8abc:	str.w	r3, [r4, #1076]	; 0x434
  m_clusterMask = m_bytesPerCluster - 1;
    8ac0:	str.w	r5, [r4, #1072]	; 0x430
  // Set m_bitmapStart to first free cluster.
  m_bitmapStart = 0;
  bitmapFind(0, 1);
    8ac4:	bl	8938 <ExFatPartition::bitmapFind(unsigned long, unsigned long)>
  m_fatType = FAT_TYPE_EXFAT;
    8ac8:	movs	r3, #64	; 0x40
  return true;
    8aca:	mov	r0, r8
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
  m_clusterMask = m_bytesPerCluster - 1;
  // Set m_bitmapStart to first free cluster.
  m_bitmapStart = 0;
  bitmapFind(0, 1);
  m_fatType = FAT_TYPE_EXFAT;
    8acc:	strb.w	r3, [r4, #1084]	; 0x43c
  return true;
    8ad0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8ad4:	.word	0x20000448

00008ad8 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>:
  }
  return 0;
}
//-----------------------------------------------------------------------------
bool ExFatPartition::bitmapModify(uint32_t cluster,
                                  uint32_t count, bool value) {
    8ad8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint32_t sector;
  uint32_t start = cluster - 2;
    8adc:	subs	r1, #2
  }
  return 0;
}
//-----------------------------------------------------------------------------
bool ExFatPartition::bitmapModify(uint32_t cluster,
                                  uint32_t count, bool value) {
    8ade:	mov	r5, r2
    8ae0:	mov	sl, r3
  uint32_t start = cluster - 2;
  size_t i;
  uint8_t* cache;
  uint8_t mask;
  cluster -= 2;
  if ((start + count) > m_clusterCount) {
    8ae2:	ldr.w	r2, [r0, #1064]	; 0x428
    8ae6:	adds	r3, r1, r5
    8ae8:	cmp	r3, r2
    8aea:	bhi.n	8b5e <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x86>
    8aec:	mov	r8, r0
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (value) {
    8aee:	cmp.w	sl, #0
    8af2:	bne.n	8b64 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x8c>
    if (start  <= m_bitmapStart && m_bitmapStart < (start + count)) {
      m_bitmapStart = (start + count) < m_clusterCount ? start + count : 0;
    }
  } else {
    if (start < m_bitmapStart) {
    8af4:	ldr.w	r3, [r0, #1048]	; 0x418
    8af8:	cmp	r1, r3
      m_bitmapStart = start;
    8afa:	it	cc
    8afc:	strcc.w	r1, [r0, #1048]	; 0x418
    }
  }
  mask = 1 << (start & 7);
    8b00:	and.w	r4, r1, #7
    8b04:	movs	r2, #1
  sector = m_clusterHeapStartSector +
                   (start >> (m_bytesPerSectorShift + 3));
    8b06:	ldr.w	r3, [r8, #1060]	; 0x424
  i = (start >> 3) & m_sectorMask;
    8b0a:	ubfx	r6, r1, #3, #9
  } else {
    if (start < m_bitmapStart) {
      m_bitmapStart = start;
    }
  }
  mask = 1 << (start & 7);
    8b0e:	lsl.w	r4, r2, r4
  sector = m_clusterHeapStartSector +
                   (start >> (m_bytesPerSectorShift + 3));
    8b12:	add.w	r9, r3, r1, lsr #12
  } else {
    if (start < m_bitmapStart) {
      m_bitmapStart = start;
    }
  }
  mask = 1 << (start & 7);
    8b16:	uxtb	r4, r4
  bool bitmapModify(uint32_t cluster, uint32_t count, bool value);
  //----------------------------------------------------------------------------
  // Cache functions.
  uint8_t* bitmapCacheGet(uint32_t sector, uint8_t option) {
#if USE_EXFAT_BITMAP_CACHE
    return m_bitmapCache.get(sector, option);
    8b18:	movs	r2, #1
    8b1a:	mov	r1, r9
    8b1c:	mov	r0, r8
  sector = m_clusterHeapStartSector +
                   (start >> (m_bytesPerSectorShift + 3));
  i = (start >> 3) & m_sectorMask;
  while (true) {
    cache = bitmapCacheGet(sector++, FsCache::CACHE_FOR_WRITE);
    8b1e:	add	r9, r2
    8b20:	bl	8868 <FsCache::get(unsigned long, unsigned char)>
    if (!cache) {
    8b24:	cbz	r0, 8b5e <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x86>
    8b26:	adds	r7, r0, r6
    8b28:	add.w	r0, r0, #512	; 0x200
    8b2c:	ldrb.w	r2, [r7], #1
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (; i < m_bytesPerSector; i++) {
      for (; mask; mask <<= 1) {
        if (value == static_cast<bool>(cache[i] & mask)) {
    8b30:	tst	r2, r4
          DBG_FAIL_MACRO;
          goto fail;
        }
        cache[i] ^= mask;
    8b32:	eor.w	r2, r2, r4
    if (!cache) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (; i < m_bytesPerSector; i++) {
      for (; mask; mask <<= 1) {
    8b36:	mov.w	r4, r4, lsl #1
        if (value == static_cast<bool>(cache[i] & mask)) {
    8b3a:	ite	ne
    8b3c:	movne	r6, #1
    8b3e:	moveq	r6, #0
    8b40:	cmp	r6, sl
    8b42:	beq.n	8b5e <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x86>
          DBG_FAIL_MACRO;
          goto fail;
        }
        cache[i] ^= mask;
        if (--count == 0) {
    8b44:	subs	r5, #1
      for (; mask; mask <<= 1) {
        if (value == static_cast<bool>(cache[i] & mask)) {
          DBG_FAIL_MACRO;
          goto fail;
        }
        cache[i] ^= mask;
    8b46:	strb.w	r2, [r7, #-1]
        if (--count == 0) {
    8b4a:	beq.n	8b7c <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0xa4>
    if (!cache) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (; i < m_bytesPerSector; i++) {
      for (; mask; mask <<= 1) {
    8b4c:	ands.w	r4, r4, #255	; 0xff
    8b50:	bne.n	8b30 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x58>
    cache = bitmapCacheGet(sector++, FsCache::CACHE_FOR_WRITE);
    if (!cache) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (; i < m_bytesPerSector; i++) {
    8b52:	cmp	r7, r0
          return true;
        }
      }
      mask = 1;
    }
    i = 0;
    8b54:	mov	r6, r4
    8b56:	mov.w	r4, #1
    cache = bitmapCacheGet(sector++, FsCache::CACHE_FOR_WRITE);
    if (!cache) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (; i < m_bytesPerSector; i++) {
    8b5a:	bne.n	8b2c <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x54>
    8b5c:	b.n	8b18 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x40>
    }
    i = 0;
  }

 fail:
  return false;
    8b5e:	movs	r0, #0
    8b60:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if ((start + count) > m_clusterCount) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (value) {
    if (start  <= m_bitmapStart && m_bitmapStart < (start + count)) {
    8b64:	ldr.w	r0, [r0, #1048]	; 0x418
    8b68:	cmp	r3, r0
    8b6a:	bls.n	8b00 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x28>
    8b6c:	cmp	r1, r0
    8b6e:	bhi.n	8b00 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x28>
      m_bitmapStart = (start + count) < m_clusterCount ? start + count : 0;
    8b70:	cmp	r3, r2
    8b72:	it	cs
    8b74:	movcs	r3, #0
    8b76:	str.w	r3, [r8, #1048]	; 0x418
    8b7a:	b.n	8b00 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x28>
          DBG_FAIL_MACRO;
          goto fail;
        }
        cache[i] ^= mask;
        if (--count == 0) {
          return true;
    8b7c:	movs	r0, #1
    i = 0;
  }

 fail:
  return false;
}
    8b7e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    8b82:	nop

00008b84 <ExFatPartition::chainSize(unsigned long)>:
//-----------------------------------------------------------------------------
uint32_t ExFatPartition::chainSize(uint32_t cluster) {
    8b84:	push	{r4, r5, r6, lr}
    8b86:	sub	sp, #8
    8b88:	mov	r5, r0
  uint32_t n = 0;
    8b8a:	movs	r4, #0

 fail:
  return false;
}
//-----------------------------------------------------------------------------
uint32_t ExFatPartition::chainSize(uint32_t cluster) {
    8b8c:	add	r6, sp, #8
    8b8e:	str.w	r1, [r6, #-4]!
uint8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
  uint8_t* cache;
uint32_t next;
  uint32_t sector;

  if (cluster > (m_clusterCount + 1)) {
    8b92:	ldr.w	r3, [r5, #1064]	; 0x428
//-----------------------------------------------------------------------------
uint32_t ExFatPartition::chainSize(uint32_t cluster) {
  uint32_t n = 0;
  int8_t status;
  do {
    status = fatGet(cluster, & cluster);
    8b96:	ldr	r1, [sp, #4]
uint8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
  uint8_t* cache;
uint32_t next;
  uint32_t sector;

  if (cluster > (m_clusterCount + 1)) {
    8b98:	adds	r3, #1
    8b9a:	cmp	r1, r3
    8b9c:	bls.n	8ba4 <ExFatPartition::chainSize(unsigned long)+0x20>
uint32_t ExFatPartition::chainSize(uint32_t cluster) {
  uint32_t n = 0;
  int8_t status;
  do {
    status = fatGet(cluster, & cluster);
    if (status < 0) return 0;
    8b9e:	movs	r0, #0
    n++;
  } while (status);
  return n;
}
    8ba0:	add	sp, #8
    8ba2:	pop	{r4, r5, r6, pc}
    8ba4:	mov	r2, r6
    8ba6:	mov	r0, r5
    8ba8:	bl	88c8 <ExFatPartition::fatGet(unsigned long, unsigned long*) [clone .part.3]>
  uint32_t n = 0;
  int8_t status;
  do {
    status = fatGet(cluster, & cluster);
    if (status < 0) return 0;
    n++;
    8bac:	adds	r4, #1
//-----------------------------------------------------------------------------
uint32_t ExFatPartition::chainSize(uint32_t cluster) {
  uint32_t n = 0;
  int8_t status;
  do {
    status = fatGet(cluster, & cluster);
    8bae:	sxtb	r0, r0
    if (status < 0) return 0;
    8bb0:	cmp	r0, #0
    8bb2:	blt.n	8b9e <ExFatPartition::chainSize(unsigned long)+0x1a>
}
//-----------------------------------------------------------------------------
uint32_t ExFatPartition::chainSize(uint32_t cluster) {
  uint32_t n = 0;
  int8_t status;
  do {
    8bb4:	bne.n	8b92 <ExFatPartition::chainSize(unsigned long)+0xe>
    status = fatGet(cluster, & cluster);
    if (status < 0) return 0;
    n++;
    8bb6:	mov	r0, r4
  } while (status);
  return n;
}
    8bb8:	add	sp, #8
    8bba:	pop	{r4, r5, r6, pc}

00008bbc <ExFatPartition::dirCache(DirPos_t*, unsigned char)>:
//-----------------------------------------------------------------------------
uint8_t* ExFatPartition::dirCache(DirPos_t* pos, uint8_t options) {
    8bbc:	push	{r4, r5, r6, lr}
    8bbe:	mov	r6, r1
    8bc0:	mov	r4, r0
#endif  // USE_EXFAT_BITMAP_CACHE
  }
  void dataCacheDirty() {m_dataCache.dirty();}
  void dataCacheInvalidate() {m_dataCache.invalidate();}
  uint8_t* dataCacheGet(uint32_t sector, uint8_t option) {
    return m_dataCache.get(sector, option);
    8bc2:	ldr.w	r5, [r0, #1072]	; 0x430
    8bc6:	add.w	r0, r0, #524	; 0x20c
    8bca:	ldr	r1, [r1, #4]
    8bcc:	ldr	r3, [r6, #0]
    8bce:	ands	r1, r5
    8bd0:	ldr.w	r5, [r4, #1060]	; 0x424
    8bd4:	subs	r3, #2
    8bd6:	ldrb.w	r4, [r4, #1085]	; 0x43d
    8bda:	add.w	r1, r5, r1, lsr #9
    8bde:	lsls	r3, r4
    8be0:	add	r1, r3
    8be2:	bl	8868 <FsCache::get(unsigned long, unsigned char)>
  uint32_t sector = clusterStartSector(pos->cluster);
  sector += (m_clusterMask & pos->position) >> m_bytesPerSectorShift;
  uint8_t* cache = dataCacheGet(sector, options);
  return cache ? cache + (pos->position & m_sectorMask) : nullptr;
    8be6:	cbz	r0, 8bf0 <ExFatPartition::dirCache(DirPos_t*, unsigned char)+0x34>
    8be8:	ldr	r3, [r6, #4]
    8bea:	ubfx	r3, r3, #0, #9
    8bee:	add	r0, r3
}
    8bf0:	pop	{r4, r5, r6, pc}
    8bf2:	nop

00008bf4 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)>:
//-----------------------------------------------------------------------------
// return -1 error, 0 EOC, 1 OK
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
    8bf4:	push	{r4, r5, r6, lr}
  int8_t status;
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
    8bf6:	ldr	r4, [r1, #4]
  uint8_t* cache = dataCacheGet(sector, options);
  return cache ? cache + (pos->position & m_sectorMask) : nullptr;
}
//-----------------------------------------------------------------------------
// return -1 error, 0 EOC, 1 OK
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
    8bf8:	mov	r5, r1
  int8_t status;
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
    8bfa:	ldr.w	r3, [r0, #1072]	; 0x430
  uint8_t* cache = dataCacheGet(sector, options);
  return cache ? cache + (pos->position & m_sectorMask) : nullptr;
}
//-----------------------------------------------------------------------------
// return -1 error, 0 EOC, 1 OK
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
    8bfe:	mov	r6, r0
  int8_t status;
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
  pos->position += offset;
    8c00:	adds	r1, r4, r2
}
//-----------------------------------------------------------------------------
// return -1 error, 0 EOC, 1 OK
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
  int8_t status;
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
    8c02:	ands	r4, r3
  pos->position += offset;
    8c04:	str	r1, [r5, #4]
  tmp >>= bytesPerClusterShift();
    8c06:	ldrb.w	r3, [r0, #1085]	; 0x43d
}
//-----------------------------------------------------------------------------
// return -1 error, 0 EOC, 1 OK
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
  int8_t status;
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
    8c0a:	add	r2, r4
  pos->position += offset;
  tmp >>= bytesPerClusterShift();
    8c0c:	adds	r3, #9
    8c0e:	uxtb	r3, r3
    8c10:	lsr.w	r4, r2, r3
  while (tmp--) {
    8c14:	cbz	r4, 8c26 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x32>
    if (pos->isContiguous) {
    8c16:	ldrb	r3, [r5, #8]
    8c18:	cbz	r3, 8c2a <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x36>
      pos->cluster++;
    8c1a:	ldr	r3, [r5, #0]
    8c1c:	adds	r3, #1
    8c1e:	str	r3, [r5, #0]
    8c20:	subs	r4, #1
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
  int8_t status;
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
  pos->position += offset;
  tmp >>= bytesPerClusterShift();
  while (tmp--) {
    8c22:	cmp	r4, #0
    8c24:	bne.n	8c16 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x22>
      if (status != 1) {
        return status;
      }
    }
  }
  return 1;
    8c26:	movs	r0, #1
    8c28:	pop	{r4, r5, r6, pc}
uint8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
  uint8_t* cache;
uint32_t next;
  uint32_t sector;

  if (cluster > (m_clusterCount + 1)) {
    8c2a:	ldr.w	r3, [r6, #1064]	; 0x428
  tmp >>= bytesPerClusterShift();
  while (tmp--) {
    if (pos->isContiguous) {
      pos->cluster++;
    } else {
      status = fatGet(pos->cluster, &pos->cluster);
    8c2e:	ldr	r1, [r5, #0]
uint8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
  uint8_t* cache;
uint32_t next;
  uint32_t sector;

  if (cluster > (m_clusterCount + 1)) {
    8c30:	adds	r3, #1
    8c32:	cmp	r1, r3
    8c34:	bls.n	8c3c <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x48>
  tmp >>= bytesPerClusterShift();
  while (tmp--) {
    if (pos->isContiguous) {
      pos->cluster++;
    } else {
      status = fatGet(pos->cluster, &pos->cluster);
    8c36:	mov.w	r0, #4294967295
        return status;
      }
    }
  }
  return 1;
}
    8c3a:	pop	{r4, r5, r6, pc}
    8c3c:	mov	r2, r5
    8c3e:	mov	r0, r6
    8c40:	bl	88c8 <ExFatPartition::fatGet(unsigned long, unsigned long*) [clone .part.3]>
  tmp >>= bytesPerClusterShift();
  while (tmp--) {
    if (pos->isContiguous) {
      pos->cluster++;
    } else {
      status = fatGet(pos->cluster, &pos->cluster);
    8c44:	sxtb	r0, r0
      if (status != 1) {
    8c46:	cmp	r0, #1
    8c48:	beq.n	8c20 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x2c>
    8c4a:	pop	{r4, r5, r6, pc}

00008c4c <ExFatPartition::fatGet(unsigned long, unsigned long*)>:
uint8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
  uint8_t* cache;
uint32_t next;
  uint32_t sector;

  if (cluster > (m_clusterCount + 1)) {
    8c4c:	ldr.w	r3, [r0, #1064]	; 0x428
    8c50:	adds	r3, #1
    8c52:	cmp	r3, r1
    8c54:	bcs.n	8c5a <ExFatPartition::fatGet(unsigned long, unsigned long*)+0xe>
  if (next == EXFAT_EOC) {
    return 0;
  }
  *value = next;
  return 1;
}
    8c56:	movs	r0, #255	; 0xff
    8c58:	bx	lr
    8c5a:	b.w	88c8 <ExFatPartition::fatGet(unsigned long, unsigned long*) [clone .part.3]>
    8c5e:	nop

00008c60 <ExFatPartition::fatPut(unsigned long, unsigned long)>:
//-----------------------------------------------------------------------------
bool ExFatPartition::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t sector;
  uint8_t* cache;
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
    8c60:	cmp	r1, #1
    8c62:	bls.n	8c80 <ExFatPartition::fatPut(unsigned long, unsigned long)+0x20>
    8c64:	ldr.w	r3, [r0, #1064]	; 0x428
    8c68:	adds	r3, #1
    8c6a:	cmp	r1, r3
  }
  *value = next;
  return 1;
}
//-----------------------------------------------------------------------------
bool ExFatPartition::fatPut(uint32_t cluster, uint32_t value) {
    8c6c:	push	{r4}
  uint32_t sector;
  uint8_t* cache;
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
    8c6e:	bls.n	8c78 <ExFatPartition::fatPut(unsigned long, unsigned long)+0x18>
  setLe32(cache + ((cluster << 2) & m_sectorMask), value);
  return true;

 fail:
  return false;
}
    8c70:	movs	r0, #0
    8c72:	ldr.w	r4, [sp], #4
    8c76:	bx	lr
    8c78:	ldr.w	r4, [sp], #4
    8c7c:	b.w	88fc <ExFatPartition::fatPut(unsigned long, unsigned long) [clone .part.4]>
    8c80:	movs	r0, #0
    8c82:	bx	lr

00008c84 <ExFatPartition::freeChain(unsigned long)>:
//-----------------------------------------------------------------------------
bool ExFatPartition::freeChain(uint32_t cluster) {
    8c84:	push	{r4, r5, r6, r7, lr}
    8c86:	mov	r4, r1
    8c88:	sub	sp, #12
    8c8a:	mov	r5, r0
  uint32_t next;
  uint32_t start = cluster;
    8c8c:	mov	r7, r1
uint8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
  uint8_t* cache;
uint32_t next;
  uint32_t sector;

  if (cluster > (m_clusterCount + 1)) {
    8c8e:	ldr.w	r3, [r5, #1064]	; 0x428
    8c92:	adds	r3, #1
    8c94:	cmp	r4, r3
    8c96:	bls.n	8c9e <ExFatPartition::freeChain(unsigned long)+0x1a>
  } while (status);

  return true;

 fail:
  return false;
    8c98:	movs	r0, #0
}
    8c9a:	add	sp, #12
    8c9c:	pop	{r4, r5, r6, r7, pc}
    8c9e:	mov	r1, r4
    8ca0:	add	r2, sp, #4
    8ca2:	mov	r0, r5
    8ca4:	bl	88c8 <ExFatPartition::fatGet(unsigned long, unsigned long*) [clone .part.3]>
}
//-----------------------------------------------------------------------------
bool ExFatPartition::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t sector;
  uint8_t* cache;
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
    8ca8:	cmp	r4, #1
bool ExFatPartition::freeChain(uint32_t cluster) {
  uint32_t next;
  uint32_t start = cluster;
  int8_t status;
  do {
    status = fatGet(cluster, &next);
    8caa:	sxtb	r6, r0
    8cac:	mov	r1, r4
    8cae:	mov	r0, r5
}
//-----------------------------------------------------------------------------
bool ExFatPartition::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t sector;
  uint8_t* cache;
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
    8cb0:	bls.n	8c98 <ExFatPartition::freeChain(unsigned long)+0x14>
    8cb2:	lsrs	r2, r6, #31
    8cb4:	bne.n	8c98 <ExFatPartition::freeChain(unsigned long)+0x14>
    8cb6:	ldr.w	r3, [r5, #1064]	; 0x428
    8cba:	adds	r3, #1
    8cbc:	cmp	r4, r3
    8cbe:	bhi.n	8c98 <ExFatPartition::freeChain(unsigned long)+0x14>
    8cc0:	bl	88fc <ExFatPartition::fatPut(unsigned long, unsigned long) [clone .part.4]>
    if (!fatPut(cluster, 0)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if ((cluster + 1) != next || status == 0) {
      if (!bitmapModify(start, cluster - start + 1, 0)) {
    8cc4:	mov	r1, r7
    8cc6:	movs	r3, #0
    status = fatGet(cluster, &next);
    if (status < 0) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!fatPut(cluster, 0)) {
    8cc8:	cmp	r0, #0
    8cca:	beq.n	8c98 <ExFatPartition::freeChain(unsigned long)+0x14>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if ((cluster + 1) != next || status == 0) {
    8ccc:	adds	r2, r4, #1
      if (!bitmapModify(start, cluster - start + 1, 0)) {
    8cce:	mov	r0, r5
    }
    if (!fatPut(cluster, 0)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if ((cluster + 1) != next || status == 0) {
    8cd0:	ldr	r4, [sp, #4]
    8cd2:	cbz	r6, 8cd8 <ExFatPartition::freeChain(unsigned long)+0x54>
    8cd4:	cmp	r2, r4
    8cd6:	beq.n	8c8e <ExFatPartition::freeChain(unsigned long)+0xa>
      if (!bitmapModify(start, cluster - start + 1, 0)) {
    8cd8:	subs	r2, r2, r7
    8cda:	bl	8ad8 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    8cde:	cmp	r0, #0
    8ce0:	beq.n	8c98 <ExFatPartition::freeChain(unsigned long)+0x14>
        DBG_FAIL_MACRO;
        goto fail;
      }
      start = next;
    8ce2:	ldr	r4, [sp, #4]
//-----------------------------------------------------------------------------
bool ExFatPartition::freeChain(uint32_t cluster) {
  uint32_t next;
  uint32_t start = cluster;
  int8_t status;
  do {
    8ce4:	cmp	r6, #0
    8ce6:	beq.n	8c9a <ExFatPartition::freeChain(unsigned long)+0x16>
    if ((cluster + 1) != next || status == 0) {
      if (!bitmapModify(start, cluster - start + 1, 0)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      start = next;
    8ce8:	mov	r7, r4
    8cea:	b.n	8c8e <ExFatPartition::freeChain(unsigned long)+0xa>

00008cec <ExFatPartition::freeClusterCount()>:

 fail:
  return false;
}
//-----------------------------------------------------------------------------
uint32_t ExFatPartition::freeClusterCount() {
    8cec:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint32_t nc = 0;
  uint32_t sector = m_clusterHeapStartSector;
  uint32_t usedCount = 0;
    8cf0:	movs	r4, #0

 fail:
  return false;
}
//-----------------------------------------------------------------------------
uint32_t ExFatPartition::freeClusterCount() {
    8cf2:	mov	r8, r0
  uint32_t nc = 0;
  uint32_t sector = m_clusterHeapStartSector;
    8cf4:	ldr.w	r6, [r0, #1060]	; 0x424
    8cf8:	add.w	r7, r0, #524	; 0x20c
 fail:
  return false;
}
//-----------------------------------------------------------------------------
uint32_t ExFatPartition::freeClusterCount() {
  uint32_t nc = 0;
    8cfc:	mov	r5, r4
    8cfe:	mov	r1, r6
    8d00:	movs	r2, #0
    8d02:	mov	r0, r7
  uint32_t sector = m_clusterHeapStartSector;
  uint32_t usedCount = 0;
  uint8_t* cache;

  while (true) {
    cache = dataCacheGet(sector++, FsCache::CACHE_FOR_READ);
    8d04:	adds	r6, #1
    8d06:	bl	8868 <FsCache::get(unsigned long, unsigned char)>
    if (!cache) {
    8d0a:	cbz	r0, 8d58 <ExFatPartition::freeClusterCount()+0x6c>
    8d0c:	add.w	lr, r0, #4294967295
    8d10:	ldr.w	ip, [r8, #1064]	; 0x428
    8d14:	add.w	r9, r5, #4096	; 0x1000
      return 0;
    }
    for (size_t i = 0; i < m_bytesPerSector; i++) {
      if (cache[i] == 0XFF) {
    8d18:	ldrb.w	r0, [lr, #1]!
    8d1c:	cmp	r0, #255	; 0xff
    8d1e:	beq.n	8d48 <ExFatPartition::freeClusterCount()+0x5c>
        usedCount+= 8;
      } else if (cache[i]) {
    8d20:	cbz	r0, 8d36 <ExFatPartition::freeClusterCount()+0x4a>
    8d22:	movs	r2, #8
    8d24:	movs	r3, #1
        for (uint8_t mask = 1; mask ; mask <<=1) {
          if ((mask & cache[i])) {
    8d26:	tst	r0, r3
    }
    for (size_t i = 0; i < m_bytesPerSector; i++) {
      if (cache[i] == 0XFF) {
        usedCount+= 8;
      } else if (cache[i]) {
        for (uint8_t mask = 1; mask ; mask <<=1) {
    8d28:	mov.w	r1, r3, lsl #1
          if ((mask & cache[i])) {
            usedCount++;
    8d2c:	it	ne
    8d2e:	addne	r4, #1
    }
    for (size_t i = 0; i < m_bytesPerSector; i++) {
      if (cache[i] == 0XFF) {
        usedCount+= 8;
      } else if (cache[i]) {
        for (uint8_t mask = 1; mask ; mask <<=1) {
    8d30:	subs	r2, #1
    8d32:	uxtb	r3, r1
    8d34:	bne.n	8d26 <ExFatPartition::freeClusterCount()+0x3a>
          if ((mask & cache[i])) {
            usedCount++;
          }
        }
      }
      nc += 8;
    8d36:	adds	r5, #8
      if (nc >= m_clusterCount) {
    8d38:	cmp	ip, r5
    8d3a:	bls.n	8d50 <ExFatPartition::freeClusterCount()+0x64>
  while (true) {
    cache = dataCacheGet(sector++, FsCache::CACHE_FOR_READ);
    if (!cache) {
      return 0;
    }
    for (size_t i = 0; i < m_bytesPerSector; i++) {
    8d3c:	cmp	r5, r9
    8d3e:	beq.n	8cfe <ExFatPartition::freeClusterCount()+0x12>
      if (cache[i] == 0XFF) {
    8d40:	ldrb.w	r0, [lr, #1]!
    8d44:	cmp	r0, #255	; 0xff
    8d46:	bne.n	8d20 <ExFatPartition::freeClusterCount()+0x34>
          if ((mask & cache[i])) {
            usedCount++;
          }
        }
      }
      nc += 8;
    8d48:	adds	r5, #8
    if (!cache) {
      return 0;
    }
    for (size_t i = 0; i < m_bytesPerSector; i++) {
      if (cache[i] == 0XFF) {
        usedCount+= 8;
    8d4a:	adds	r4, #8
            usedCount++;
          }
        }
      }
      nc += 8;
      if (nc >= m_clusterCount) {
    8d4c:	cmp	ip, r5
    8d4e:	bhi.n	8d3c <ExFatPartition::freeClusterCount()+0x50>
        return m_clusterCount - usedCount;
    8d50:	rsb	r0, r4, ip
    8d54:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      }
    }
  }
}
    8d58:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00008d5c <ExFatPartition::rootLength()>:
//-----------------------------------------------------------------------------
uint32_t ExFatPartition::rootLength() {
    8d5c:	push	{r4, lr}
    8d5e:	mov	r4, r0
  uint32_t nc = chainSize(m_rootDirectoryCluster);
    8d60:	ldr.w	r1, [r0, #1068]	; 0x42c
    8d64:	bl	8b84 <ExFatPartition::chainSize(unsigned long)>
  return nc << bytesPerClusterShift();
    8d68:	ldrb.w	r3, [r4, #1085]	; 0x43d
    8d6c:	adds	r3, #9
    8d6e:	uxtb	r3, r3
}
    8d70:	lsls	r0, r3
    8d72:	pop	{r4, pc}

00008d74 <exFatHashName(char const*, unsigned int, unsigned short)>:
static char toUpper(char c) {
  return c - ('a' <= c && c <= 'z' ? 'a' - 'A' : 0);
}
//-----------------------------------------------------------------------------
uint16_t exFatHashName(const char* name, size_t n, uint16_t hash) {
  for (size_t i = 0; i < n; i++) {
    8d74:	cbz	r1, 8dac <exFatHashName(char const*, unsigned int, unsigned short)+0x38>
    8d76:	add	r1, r0
//-----------------------------------------------------------------------------
static char toUpper(char c) {
  return c - ('a' <= c && c <= 'z' ? 'a' - 'A' : 0);
}
//-----------------------------------------------------------------------------
uint16_t exFatHashName(const char* name, size_t n, uint16_t hash) {
    8d78:	push	{r4, r5}
  for (size_t i = 0; i < n; i++) {
    uint8_t c = name[i];
    8d7a:	ldrb.w	r4, [r0], #1
    8d7e:	lsls	r3, r2, #15
    8d80:	orr.w	r2, r3, r2, lsr #1
    if ('a' <= c && c <= 'z') {
    8d84:	sub.w	r3, r4, #97	; 0x61
      c -= 'a' - 'A';
    8d88:	sub.w	r5, r4, #32
}
//-----------------------------------------------------------------------------
uint16_t exFatHashName(const char* name, size_t n, uint16_t hash) {
  for (size_t i = 0; i < n; i++) {
    uint8_t c = name[i];
    if ('a' <= c && c <= 'z') {
    8d8c:	cmp	r3, #25
      c -= 'a' - 'A';
    8d8e:	it	ls
    8d90:	uxtbls	r4, r5
static char toUpper(char c) {
  return c - ('a' <= c && c <= 'z' ? 'a' - 'A' : 0);
}
//-----------------------------------------------------------------------------
uint16_t exFatHashName(const char* name, size_t n, uint16_t hash) {
  for (size_t i = 0; i < n; i++) {
    8d92:	cmp	r1, r0
    uint8_t c = name[i];
    if ('a' <= c && c <= 'z') {
      c -= 'a' - 'A';
    }
    hash = ((hash << 15) | (hash >> 1)) + c;
    8d94:	uxtah	r2, r4, r2
    8d98:	uxth	r2, r2
    8d9a:	mov.w	r3, r2, lsl #15
    8d9e:	orr.w	r2, r3, r2, lsr #1
    8da2:	uxth	r2, r2
static char toUpper(char c) {
  return c - ('a' <= c && c <= 'z' ? 'a' - 'A' : 0);
}
//-----------------------------------------------------------------------------
uint16_t exFatHashName(const char* name, size_t n, uint16_t hash) {
  for (size_t i = 0; i < n; i++) {
    8da4:	bne.n	8d7a <exFatHashName(char const*, unsigned int, unsigned short)+0x6>
    }
    hash = ((hash << 15) | (hash >> 1)) + c;
    hash = ((hash << 15) | (hash >> 1));
  }
  return hash;
}
    8da6:	mov	r0, r2
    8da8:	pop	{r4, r5}
    8daa:	bx	lr
    8dac:	mov	r0, r2
    8dae:	bx	lr

00008db0 <exFatCmpName(DirName_t const*, char const*, unsigned int, unsigned int)>:
//-----------------------------------------------------------------------------
bool exFatCmpName(const DirName_t* unicode,
                  const char* name, size_t offset, size_t n) {
  uint16_t u;
  for (size_t i = 0; i < n; i++) {
    8db0:	cbz	r3, 8e06 <exFatCmpName(DirName_t const*, char const*, unsigned int, unsigned int)+0x56>
  }
  return hash;
}
//-----------------------------------------------------------------------------
bool exFatCmpName(const DirName_t* unicode,
                  const char* name, size_t offset, size_t n) {
    8db2:	push	{r4, r5, r6}
void lbaToMbrChs(uint8_t* chs, uint32_t capacityMB, uint32_t lba);
//-----------------------------------------------------------------------------
#if !defined(USE_SIMPLE_LITTLE_ENDIAN) || USE_SIMPLE_LITTLE_ENDIAN
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
    8db4:	ldrh	r4, [r0, #2]
  uint16_t u;
  for (size_t i = 0; i < n; i++) {
    u = getLe16(unicode->unicode + 2*i);
    if (u >= 0x7F  || toUpper(name[i + offset]) != toUpper(u)) {
    8db6:	cmp	r4, #126	; 0x7e
    8db8:	bhi.n	8dfa <exFatCmpName(DirName_t const*, char const*, unsigned int, unsigned int)+0x4a>
    8dba:	add	r3, r2
    8dbc:	adds	r0, #2
    8dbe:	add	r2, r1
    8dc0:	add	r1, r3
    8dc2:	ldrb.w	r3, [r2], #1
    8dc6:	uxtb	r4, r4
  }
  return true;
}
//-----------------------------------------------------------------------------
static char toUpper(char c) {
  return c - ('a' <= c && c <= 'z' ? 'a' - 'A' : 0);
    8dc8:	sub.w	r6, r3, #97	; 0x61
    8dcc:	sub.w	r5, r4, #97	; 0x61
    8dd0:	cmp	r6, #25
    8dd2:	ite	ls
    8dd4:	movls	r6, #32
    8dd6:	movhi	r6, #0
    8dd8:	cmp	r5, #25
    8dda:	sub.w	r3, r3, r6
    8dde:	ite	ls
    8de0:	movls	r5, #32
    8de2:	movhi	r5, #0
    8de4:	uxtb	r3, r3
bool exFatCmpName(const DirName_t* unicode,
                  const char* name, size_t offset, size_t n) {
  uint16_t u;
  for (size_t i = 0; i < n; i++) {
    u = getLe16(unicode->unicode + 2*i);
    if (u >= 0x7F  || toUpper(name[i + offset]) != toUpper(u)) {
    8de6:	subs	r4, r4, r5
    8de8:	uxtb	r4, r4
    8dea:	cmp	r4, r3
    8dec:	bne.n	8dfa <exFatCmpName(DirName_t const*, char const*, unsigned int, unsigned int)+0x4a>
}
//-----------------------------------------------------------------------------
bool exFatCmpName(const DirName_t* unicode,
                  const char* name, size_t offset, size_t n) {
  uint16_t u;
  for (size_t i = 0; i < n; i++) {
    8dee:	cmp	r2, r1
    8df0:	beq.n	8e00 <exFatCmpName(DirName_t const*, char const*, unsigned int, unsigned int)+0x50>
    8df2:	ldrh.w	r4, [r0, #2]!
    u = getLe16(unicode->unicode + 2*i);
    if (u >= 0x7F  || toUpper(name[i + offset]) != toUpper(u)) {
    8df6:	cmp	r4, #126	; 0x7e
    8df8:	bls.n	8dc2 <exFatCmpName(DirName_t const*, char const*, unsigned int, unsigned int)+0x12>
      return false;
    8dfa:	movs	r0, #0
    }
  }
  return true;
}
    8dfc:	pop	{r4, r5, r6}
    8dfe:	bx	lr
    u = getLe16(unicode->unicode + 2*i);
    if (u >= 0x7F  || toUpper(name[i + offset]) != toUpper(u)) {
      return false;
    }
  }
  return true;
    8e00:	movs	r0, #1
}
    8e02:	pop	{r4, r5, r6}
    8e04:	bx	lr
    u = getLe16(unicode->unicode + 2*i);
    if (u >= 0x7F  || toUpper(name[i + offset]) != toUpper(u)) {
      return false;
    }
  }
  return true;
    8e06:	movs	r0, #1
}
    8e08:	bx	lr
    8e0a:	nop

00008e0c <ExFatFile::addCluster()>:
  }
  return checksum;
}
//-----------------------------------------------------------------------------
bool ExFatFile::addCluster() {
  uint32_t find = m_vol->bitmapFind(m_curCluster ?  m_curCluster + 1 : 0, 1);
    8e0c:	ldr	r1, [r0, #24]
    checksum = ((checksum << 15) | (checksum >> 1)) + data[i];
  }
  return checksum;
}
//-----------------------------------------------------------------------------
bool ExFatFile::addCluster() {
    8e0e:	push	{r3, r4, r5, r6, r7, lr}
    8e10:	mov	r4, r0
  uint32_t find = m_vol->bitmapFind(m_curCluster ?  m_curCluster + 1 : 0, 1);
    8e12:	ldr	r0, [r0, #32]
    8e14:	cbz	r1, 8e18 <ExFatFile::addCluster()+0xc>
    8e16:	adds	r1, #1
    8e18:	movs	r2, #1
    8e1a:	bl	8938 <ExFatPartition::bitmapFind(unsigned long, unsigned long)>
  if (find < 2) {
    8e1e:	cmp	r0, #1
  }
  return checksum;
}
//-----------------------------------------------------------------------------
bool ExFatFile::addCluster() {
  uint32_t find = m_vol->bitmapFind(m_curCluster ?  m_curCluster + 1 : 0, 1);
    8e20:	mov	r6, r0
  if (find < 2) {
    8e22:	bls.n	8e82 <ExFatFile::addCluster()+0x76>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!m_vol->bitmapModify(find, 1, 1)) {
    8e24:	movs	r3, #1
    8e26:	mov	r1, r0
    8e28:	ldr	r0, [r4, #32]
    8e2a:	mov	r2, r3
    8e2c:	bl	8ad8 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    8e30:	mov	r7, r0
    8e32:	cbz	r0, 8e82 <ExFatFile::addCluster()+0x76>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_curCluster == 0) {
    8e34:	ldr	r3, [r4, #24]
    8e36:	cbz	r3, 8e88 <ExFatFile::addCluster()+0x7c>
    8e38:	ldrb.w	r2, [r4, #51]	; 0x33
    m_flags |= FILE_FLAG_CONTIGUOUS;
    goto done;
  }
  if (isContiguous()) {
    8e3c:	lsls	r1, r2, #25
    8e3e:	bpl.n	8e66 <ExFatFile::addCluster()+0x5a>
    if (find == (m_curCluster + 1)) {
    8e40:	adds	r1, r3, #1
    8e42:	cmp	r6, r1
    8e44:	beq.n	8e94 <ExFatFile::addCluster()+0x88>
      goto done;
    }
    // No longer contiguous so make FAT chain.
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
    8e46:	bic.w	r2, r2, #64	; 0x40

    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    8e4a:	ldr	r1, [r4, #28]
  if (isContiguous()) {
    if (find == (m_curCluster + 1)) {
      goto done;
    }
    // No longer contiguous so make FAT chain.
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
    8e4c:	strb.w	r2, [r4, #51]	; 0x33
    8e50:	b.n	8e5e <ExFatFile::addCluster()+0x52>

    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
      if (!m_vol->fatPut(c, c + 1)) {
    8e52:	ldr	r0, [r4, #32]
    8e54:	bl	8c60 <ExFatPartition::fatPut(unsigned long, unsigned long)>
      goto done;
    }
    // No longer contiguous so make FAT chain.
    m_flags &= ~FILE_FLAG_CONTIGUOUS;

    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    8e58:	mov	r1, r5
      if (!m_vol->fatPut(c, c + 1)) {
    8e5a:	cbz	r0, 8e82 <ExFatFile::addCluster()+0x76>
    8e5c:	ldr	r3, [r4, #24]
    8e5e:	adds	r5, r1, #1
      goto done;
    }
    // No longer contiguous so make FAT chain.
    m_flags &= ~FILE_FLAG_CONTIGUOUS;

    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    8e60:	cmp	r1, r3
      if (!m_vol->fatPut(c, c + 1)) {
    8e62:	mov	r2, r5
      goto done;
    }
    // No longer contiguous so make FAT chain.
    m_flags &= ~FILE_FLAG_CONTIGUOUS;

    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    8e64:	bcc.n	8e52 <ExFatFile::addCluster()+0x46>
        goto fail;
      }
    }
  }
  // New cluster is EOC.
  if (!m_vol->fatPut(find, EXFAT_EOC)) {
    8e66:	mov.w	r2, #4294967295
    8e6a:	mov	r1, r6
    8e6c:	ldr	r0, [r4, #32]
    8e6e:	bl	8c60 <ExFatPartition::fatPut(unsigned long, unsigned long)>
    8e72:	cbz	r0, 8e82 <ExFatFile::addCluster()+0x76>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Connect new cluster to existing chain.
  if (m_curCluster) {
    8e74:	ldr	r1, [r4, #24]
    8e76:	cbz	r1, 8e94 <ExFatFile::addCluster()+0x88>
    if (!m_vol->fatPut(m_curCluster, find)) {
    8e78:	mov	r2, r6
    8e7a:	ldr	r0, [r4, #32]
    8e7c:	bl	8c60 <ExFatPartition::fatPut(unsigned long, unsigned long)>
    8e80:	cbnz	r0, 8e94 <ExFatFile::addCluster()+0x88>
 done:
  m_curCluster = find;
  return true;

 fail:
  return false;
    8e82:	movs	r7, #0
}
    8e84:	mov	r0, r7
    8e86:	pop	{r3, r4, r5, r6, r7, pc}
  if (!m_vol->bitmapModify(find, 1, 1)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_curCluster == 0) {
    m_flags |= FILE_FLAG_CONTIGUOUS;
    8e88:	ldrb.w	r3, [r4, #51]	; 0x33
    8e8c:	orr.w	r3, r3, #64	; 0x40
    8e90:	strb.w	r3, [r4, #51]	; 0x33
      goto fail;
    }
  }

 done:
  m_curCluster = find;
    8e94:	str	r6, [r4, #24]
  return true;

 fail:
  return false;
}
    8e96:	mov	r0, r7
    8e98:	pop	{r3, r4, r5, r6, r7, pc}
    8e9a:	nop

00008e9c <ExFatFile::remove()>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::remove() {
    8e9c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  DirPos_t pos = m_dirPos;
    8ea0:	add.w	r3, r0, #36	; 0x24

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::remove() {
    8ea4:	sub	sp, #20
    8ea6:	ldrb.w	r4, [r0, #51]	; 0x33
    8eaa:	mov	r5, r0
  DirPos_t pos = m_dirPos;
    8eac:	add	r6, sp, #4
    8eae:	ldmia.w	r3, {r0, r1, r2}
    8eb2:	stmia.w	r6, {r0, r1, r2}
  uint8_t* cache;
  if (!isWritable()) {
    8eb6:	lsls	r2, r4, #30
    8eb8:	bpl.n	8ef2 <ExFatFile::remove()+0x56>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Free any clusters.
  if (m_firstCluster) {
    8eba:	ldr	r1, [r5, #28]
    8ebc:	cbnz	r1, 8efa <ExFatFile::remove()+0x5e>

  // Write entry to device.
  return m_vol->cacheSync();

 fail:
  return false;
    8ebe:	movs	r4, #0
  for (uint8_t i = 0; i <= m_setCount; i++) {
    if (i && m_vol->dirSeek(&pos, 32) != 1) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    cache = m_vol->dirCache(&pos, FsCache::CACHE_FOR_WRITE);
    8ec0:	movs	r2, #1
    8ec2:	mov	r1, r6
    8ec4:	ldr	r0, [r5, #32]
        goto fail;
      }
    }
  }

  for (uint8_t i = 0; i <= m_setCount; i++) {
    8ec6:	adds	r4, #1
    if (i && m_vol->dirSeek(&pos, 32) != 1) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    cache = m_vol->dirCache(&pos, FsCache::CACHE_FOR_WRITE);
    8ec8:	bl	8bbc <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
    if (!cache) {
    8ecc:	cbz	r0, 8ef2 <ExFatFile::remove()+0x56>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // Mark entry not used.
    cache[0] &= 0x7F;
    8ece:	ldrb	r3, [r0, #0]
        goto fail;
      }
    }
  }

  for (uint8_t i = 0; i <= m_setCount; i++) {
    8ed0:	uxtb	r4, r4
    if (!cache) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // Mark entry not used.
    cache[0] &= 0x7F;
    8ed2:	and.w	r3, r3, #127	; 0x7f
    8ed6:	strb	r3, [r0, #0]
        goto fail;
      }
    }
  }

  for (uint8_t i = 0; i <= m_setCount; i++) {
    8ed8:	ldrb.w	r3, [r5, #48]	; 0x30
    8edc:	cmp	r3, r4
    8ede:	bcc.n	8f44 <ExFatFile::remove()+0xa8>
    if (i && m_vol->dirSeek(&pos, 32) != 1) {
    8ee0:	cmp	r4, #0
    8ee2:	beq.n	8ec0 <ExFatFile::remove()+0x24>
    8ee4:	movs	r2, #32
    8ee6:	mov	r1, r6
    8ee8:	ldr	r0, [r5, #32]
    8eea:	bl	8bf4 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)>
    8eee:	cmp	r0, #1
    8ef0:	beq.n	8ec0 <ExFatFile::remove()+0x24>

  // Write entry to device.
  return m_vol->cacheSync();

 fail:
  return false;
    8ef2:	movs	r0, #0
}
    8ef4:	add	sp, #20
    8ef6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Free any clusters.
  if (m_firstCluster) {
    if (isContiguous()) {
    8efa:	lsls	r3, r4, #25
      uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    8efc:	ldr	r0, [r5, #32]
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Free any clusters.
  if (m_firstCluster) {
    if (isContiguous()) {
    8efe:	bpl.n	8f3a <ExFatFile::remove()+0x9e>
      uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
      if (!m_vol->bitmapModify(m_firstCluster, nc, 0)) {
    8f00:	ldrb.w	r2, [r0, #1085]	; 0x43d
    8f04:	movs	r3, #0
    8f06:	ldrd	r8, r9, [r5, #8]
    8f0a:	adds	r2, #9
    8f0c:	adds.w	r8, r8, #4294967295
    8f10:	uxtb	r2, r2
    8f12:	adc.w	r9, r9, #4294967295
    8f16:	rsb	r7, r2, #32
    8f1a:	sub.w	r4, r2, #32
    8f1e:	lsr.w	r2, r8, r2
    8f22:	lsl.w	r7, r9, r7
    8f26:	lsr.w	r4, r9, r4
    8f2a:	orrs	r2, r7
    8f2c:	orrs	r2, r4
    8f2e:	adds	r2, #1
    8f30:	bl	8ad8 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    8f34:	cmp	r0, #0
    8f36:	bne.n	8ebe <ExFatFile::remove()+0x22>
    8f38:	b.n	8ef2 <ExFatFile::remove()+0x56>
        DBG_FAIL_MACRO;
        goto fail;
      }
    } else {
      if (!m_vol->freeChain(m_firstCluster)) {
    8f3a:	bl	8c84 <ExFatPartition::freeChain(unsigned long)>
    8f3e:	cmp	r0, #0
    8f40:	bne.n	8ebe <ExFatFile::remove()+0x22>
    8f42:	b.n	8ef2 <ExFatFile::remove()+0x56>
    }
    // Mark entry not used.
    cache[0] &= 0x7F;
  }
  // Set this file closed.
  m_attributes = FILE_ATTR_CLOSED;
    8f44:	movs	r3, #0
  m_flags = 0;

  // Write entry to device.
  return m_vol->cacheSync();
    8f46:	ldr	r4, [r5, #32]
    }
    // Mark entry not used.
    cache[0] &= 0x7F;
  }
  // Set this file closed.
  m_attributes = FILE_ATTR_CLOSED;
    8f48:	strb.w	r3, [r5, #49]	; 0x31
#endif  // USE_EXFAT_BITMAP_CACHE
    m_dataCache.init(dev);
  }
  bool cacheSync() {
#if USE_EXFAT_BITMAP_CACHE
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    8f4c:	mov	r0, r4
  m_flags = 0;
    8f4e:	strb.w	r3, [r5, #51]	; 0x33
    8f52:	bl	8928 <FsCache::sync()>
    8f56:	cmp	r0, #0
    8f58:	beq.n	8ef2 <ExFatFile::remove()+0x56>
    8f5a:	add.w	r0, r4, #524	; 0x20c
    8f5e:	bl	8928 <FsCache::sync()>
    8f62:	cmp	r0, #0
    8f64:	beq.n	8ef2 <ExFatFile::remove()+0x56>
    8f66:	ldr.w	r0, [r4, #1080]	; 0x438
  bool fatPut(uint32_t cluster, uint32_t value);
  uint32_t chainSize(uint32_t cluster);
  bool freeChain(uint32_t cluster);
  uint16_t sectorMask() {return m_sectorMask;}
  bool syncDevice() {
    return m_blockDev->syncDevice();
    8f6a:	ldr	r3, [r0, #0]
    8f6c:	ldr	r3, [r3, #20]
    8f6e:	blx	r3
    8f70:	b.n	8ef4 <ExFatFile::remove()+0x58>
    8f72:	nop

00008f74 <ExFatFile::rmdir()>:
//------------------------------------------------------------------------------
bool ExFatFile::rmdir() {
  int n;
  uint8_t dir[32];
  // must be open subdirectory
  if (!isSubDir()) {
    8f74:	ldrb.w	r3, [r0, #49]	; 0x31
    8f78:	lsls	r1, r3, #27
    8f7a:	bmi.n	8f80 <ExFatFile::rmdir()+0xc>
  m_attributes = FILE_ATTR_FILE;
  m_flags |= FILE_FLAG_WRITE;
  return remove();

fail:
  return false;
    8f7c:	movs	r0, #0
}
    8f7e:	bx	lr

fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::rmdir() {
    8f80:	push	{r4, lr}
   * \return true for success or false for failure.
   */
  bool rename(ExFatFile* dirFile, const ExChar_t* newPath);
  /** Set the file's current position to zero. */
  void rewind() {
    seekSet(0);
    8f82:	movs	r2, #0
    8f84:	sub	sp, #32
    8f86:	movs	r3, #0
    8f88:	mov	r4, r0
    8f8a:	bl	8208 <ExFatFile::seekSet(unsigned long long)>
    8f8e:	b.n	8f9e <ExFatFile::rmdir()+0x2a>
  while (1) {
    n = read(dir, 32);
    if (n == 0) {
      break;
    }
    if (n != 32 || dir[0] & 0X80) {
    8f90:	cmp	r0, #32
    8f92:	bne.n	8fc8 <ExFatFile::rmdir()+0x54>
    8f94:	ldrb.w	r3, [sp]
    8f98:	lsls	r2, r3, #24
    8f9a:	bmi.n	8fc8 <ExFatFile::rmdir()+0x54>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (dir[0] == 0) {
    8f9c:	cbz	r3, 8fac <ExFatFile::rmdir()+0x38>
  }
  rewind();

  // make sure directory is empty
  while (1) {
    n = read(dir, 32);
    8f9e:	movs	r2, #32
    8fa0:	mov	r1, sp
    8fa2:	mov	r0, r4
    8fa4:	bl	8034 <ExFatFile::read(void*, unsigned int)>
    if (n == 0) {
    8fa8:	cmp	r0, #0
    8faa:	bne.n	8f90 <ExFatFile::rmdir()+0x1c>
      break;
    }
  }
  // convert empty directory to normal file for remove
  m_attributes = FILE_ATTR_FILE;
  m_flags |= FILE_FLAG_WRITE;
    8fac:	ldrb.w	r3, [r4, #51]	; 0x33
    if (dir[0] == 0) {
      break;
    }
  }
  // convert empty directory to normal file for remove
  m_attributes = FILE_ATTR_FILE;
    8fb0:	movs	r2, #8
  m_flags |= FILE_FLAG_WRITE;
  return remove();
    8fb2:	mov	r0, r4
      break;
    }
  }
  // convert empty directory to normal file for remove
  m_attributes = FILE_ATTR_FILE;
  m_flags |= FILE_FLAG_WRITE;
    8fb4:	orr.w	r3, r3, #2
    if (dir[0] == 0) {
      break;
    }
  }
  // convert empty directory to normal file for remove
  m_attributes = FILE_ATTR_FILE;
    8fb8:	strb.w	r2, [r4, #49]	; 0x31
  m_flags |= FILE_FLAG_WRITE;
    8fbc:	strb.w	r3, [r4, #51]	; 0x33
  return remove();
    8fc0:	bl	8e9c <ExFatFile::remove()>

fail:
  return false;
}
    8fc4:	add	sp, #32
    8fc6:	pop	{r4, pc}
  m_attributes = FILE_ATTR_FILE;
  m_flags |= FILE_FLAG_WRITE;
  return remove();

fail:
  return false;
    8fc8:	movs	r0, #0
}
    8fca:	add	sp, #32
    8fcc:	pop	{r4, pc}
    8fce:	nop

00008fd0 <ExFatFile::syncDir()>:
 fail:
  m_error |= WRITE_ERROR;
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::syncDir() {
    8fd0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  DirStream_t* ds;
  uint8_t* cache;
  uint16_t checksum = 0;
  uint8_t setCount = 0;

  DirPos_t pos = m_dirPos;
    8fd4:	movs	r7, #0
 fail:
  m_error |= WRITE_ERROR;
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::syncDir() {
    8fd6:	sub	sp, #28
  DirStream_t* ds;
  uint8_t* cache;
  uint16_t checksum = 0;
  uint8_t setCount = 0;

  DirPos_t pos = m_dirPos;
    8fd8:	add.w	fp, r0, #36	; 0x24
 fail:
  m_error |= WRITE_ERROR;
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::syncDir() {
    8fdc:	mov	r6, r0
  DirStream_t* ds;
  uint8_t* cache;
  uint16_t checksum = 0;
  uint8_t setCount = 0;

  DirPos_t pos = m_dirPos;
    8fde:	add.w	r8, sp, #12
bool ExFatFile::syncDir() {
  DirFile_t* df;
  DirStream_t* ds;
  uint8_t* cache;
  uint16_t checksum = 0;
  uint8_t setCount = 0;
    8fe2:	mov	sl, r7
//------------------------------------------------------------------------------
bool ExFatFile::syncDir() {
  DirFile_t* df;
  DirStream_t* ds;
  uint8_t* cache;
  uint16_t checksum = 0;
    8fe4:	mov	r4, r7
  uint8_t setCount = 0;

  DirPos_t pos = m_dirPos;
    8fe6:	ldmia.w	fp, {r0, r1, r2}
    8fea:	stmia.w	r8, {r0, r1, r2}

  for (uint8_t i = 0;; i++) {
    cache = m_vol->dirCache(&pos, FsCache::CACHE_FOR_READ);
    8fee:	movs	r2, #0
    8ff0:	mov	r1, r8
    8ff2:	ldr	r0, [r6, #32]
    8ff4:	uxtb.w	r9, r7
    8ff8:	bl	8bbc <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
    if (!cache) {
    8ffc:	mov	r5, r0
    8ffe:	cbz	r0, 900e <ExFatFile::syncDir()+0x3e>
      DBG_FAIL_MACRO;
      goto fail;
    }
    switch (cache[0]) {
    9000:	ldrb	r2, [r0, #0]
    9002:	cmp	r2, #192	; 0xc0
    9004:	beq.n	90c2 <ExFatFile::syncDir()+0xf2>
    9006:	cmp	r2, #193	; 0xc1
    9008:	beq.n	9022 <ExFatFile::syncDir()+0x52>
    900a:	cmp	r2, #133	; 0x85
    900c:	beq.n	9076 <ExFatFile::syncDir()+0xa6>
    goto fail;
  }
  return true;

 fail:
  m_error |= WRITE_ERROR;
    900e:	ldrb.w	r3, [r6, #50]	; 0x32
  return false;
    9012:	movs	r0, #0
    goto fail;
  }
  return true;

 fail:
  m_error |= WRITE_ERROR;
    9014:	orr.w	r3, r3, #1
    9018:	strb.w	r3, [r6, #50]	; 0x32
  return false;
}
    901c:	add	sp, #28
    901e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9022:	mov	r3, r2
    9024:	lsls	r1, r4, #15
}
//=============================================================================
#else  // READ_ONLY
//-----------------------------------------------------------------------------
static uint16_t exFatDirChecksum(const uint8_t* data, uint16_t checksum) {
  bool skip = data[0] == EXFAT_TYPE_FILE;
    9026:	sub.w	r0, r3, #133	; 0x85
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    902a:	movs	r2, #0
    902c:	orr.w	r4, r1, r4, lsr #1
}
//=============================================================================
#else  // READ_ONLY
//-----------------------------------------------------------------------------
static uint16_t exFatDirChecksum(const uint8_t* data, uint16_t checksum) {
  bool skip = data[0] == EXFAT_TYPE_FILE;
    9030:	clz	r0, r0
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    9034:	movs	r1, #1
    checksum = ((checksum << 15) | (checksum >> 1)) + data[i];
    9036:	uxtah	r4, r3, r4
}
//=============================================================================
#else  // READ_ONLY
//-----------------------------------------------------------------------------
static uint16_t exFatDirChecksum(const uint8_t* data, uint16_t checksum) {
  bool skip = data[0] == EXFAT_TYPE_FILE;
    903a:	lsrs	r0, r0, #5
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    checksum = ((checksum << 15) | (checksum >> 1)) + data[i];
    903c:	uxth	r4, r4
//=============================================================================
#else  // READ_ONLY
//-----------------------------------------------------------------------------
static uint16_t exFatDirChecksum(const uint8_t* data, uint16_t checksum) {
  bool skip = data[0] == EXFAT_TYPE_FILE;
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    903e:	add	r2, r1
    9040:	lsls	r3, r4, #15
    9042:	movs	r1, #3
    9044:	cmp	r2, #31
    9046:	orr.w	r3, r3, r4, lsr #1
    904a:	bhi.n	9060 <ExFatFile::syncDir()+0x90>
    checksum = ((checksum << 15) | (checksum >> 1)) + data[i];
    904c:	ldrb	r4, [r5, r2]
//=============================================================================
#else  // READ_ONLY
//-----------------------------------------------------------------------------
static uint16_t exFatDirChecksum(const uint8_t* data, uint16_t checksum) {
  bool skip = data[0] == EXFAT_TYPE_FILE;
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    904e:	cmp	r2, #1
    checksum = ((checksum << 15) | (checksum >> 1)) + data[i];
    9050:	uxtah	r3, r4, r3
    9054:	uxth	r4, r3
//=============================================================================
#else  // READ_ONLY
//-----------------------------------------------------------------------------
static uint16_t exFatDirChecksum(const uint8_t* data, uint16_t checksum) {
  bool skip = data[0] == EXFAT_TYPE_FILE;
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    9056:	bne.n	905c <ExFatFile::syncDir()+0x8c>
    9058:	cmp	r0, #0
    905a:	bne.n	903e <ExFatFile::syncDir()+0x6e>
    905c:	movs	r1, #1
    905e:	b.n	903e <ExFatFile::syncDir()+0x6e>
        DBG_FAIL_MACRO;
        goto fail;
        break;
    }
    checksum = exFatDirChecksum(cache, checksum);
    if (i == setCount) break;
    9060:	cmp	sl, r9
    9062:	beq.n	90fe <ExFatFile::syncDir()+0x12e>
    if (m_vol->dirSeek(&pos, 32) != 1) {
    9064:	movs	r2, #32
    9066:	mov	r1, r8
    9068:	ldr	r0, [r6, #32]
    906a:	adds	r7, #1
    906c:	bl	8bf4 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)>
    9070:	cmp	r0, #1
    9072:	beq.n	8fee <ExFatFile::syncDir()+0x1e>
    9074:	b.n	900e <ExFatFile::syncDir()+0x3e>
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    9076:	ldrb.w	r1, [r6, #49]	; 0x31
    switch (cache[0]) {
      case EXFAT_TYPE_FILE:
        df = reinterpret_cast<DirFile_t*>(cache);
        setCount = df->setCount;
        setLe16(df->attributes, m_attributes & FILE_ATTR_COPY);
        if (FsDateTime::callback) {
    907a:	ldr	r3, [pc, #192]	; (913c <ExFatFile::syncDir()+0x16c>)
    907c:	and.w	r1, r1, #55	; 0x37
      goto fail;
    }
    switch (cache[0]) {
      case EXFAT_TYPE_FILE:
        df = reinterpret_cast<DirFile_t*>(cache);
        setCount = df->setCount;
    9080:	ldrb.w	sl, [r0, #1]
        setLe16(df->attributes, m_attributes & FILE_ATTR_COPY);
        if (FsDateTime::callback) {
    9084:	ldr	r3, [r3, #0]
    9086:	strh	r1, [r0, #4]
    9088:	cmp	r3, #0
    908a:	beq.n	9022 <ExFatFile::syncDir()+0x52>
          m_vol->dataCacheDirty();
    908c:	ldr.w	ip, [r6, #32]
          uint16_t date, time;
          uint8_t ms10;
          FsDateTime::callback(&date, &time, &ms10);
    9090:	add.w	r2, sp, #7
    9094:	add.w	r1, sp, #10
    9098:	add	r0, sp, #8
    invalidate();
    return m_cacheBuffer;
  }
  /** Set current sector dirty. */
  void dirty() {
    m_status |= CACHE_STATUS_DIRTY;
    909a:	ldrb.w	lr, [ip, #524]	; 0x20c
    909e:	orr.w	lr, lr, #1
    90a2:	strb.w	lr, [ip, #524]	; 0x20c
    90a6:	blx	r3
          df->modifyTimeMs = ms10;
          setLe16(df->modifyTime, time);
          setLe16(df->modifyDate, date);
    90a8:	ldrh.w	r3, [sp, #8]
          m_vol->dataCacheDirty();
          uint16_t date, time;
          uint8_t ms10;
          FsDateTime::callback(&date, &time, &ms10);
          df->modifyTimeMs = ms10;
          setLe16(df->modifyTime, time);
    90ac:	ldrh.w	r2, [sp, #10]
        if (FsDateTime::callback) {
          m_vol->dataCacheDirty();
          uint16_t date, time;
          uint8_t ms10;
          FsDateTime::callback(&date, &time, &ms10);
          df->modifyTimeMs = ms10;
    90b0:	ldrb.w	r1, [sp, #7]
    90b4:	strh	r3, [r5, #14]
    90b6:	strh	r3, [r5, #18]
    90b8:	strb	r1, [r5, #21]
    90ba:	strh	r2, [r5, #12]
    90bc:	strh	r2, [r5, #16]
    90be:	ldrb	r3, [r5, #0]
    90c0:	b.n	9024 <ExFatFile::syncDir()+0x54>
        }
        break;

      case EXFAT_TYPE_STREAM:
        ds = reinterpret_cast<DirStream_t*>(cache);
        if (isContiguous()) {
    90c2:	ldrb.w	r3, [r6, #51]	; 0x33
    90c6:	tst.w	r3, #64	; 0x40
          ds->flags |= EXFAT_FLAG_CONTIGUOUS;
    90ca:	ldrb	r3, [r0, #1]
    90cc:	ite	ne
    90ce:	orrne.w	r3, r3, #2
        } else {
          ds->flags &= ~EXFAT_FLAG_CONTIGUOUS;
    90d2:	biceq.w	r3, r3, #2
    90d6:	strb	r3, [r0, #1]
        }
        setLe64(ds->validLength, m_validLength);
        setLe32(ds->firstCluster, m_firstCluster);
        setLe64(ds->dataLength, m_dataLength);
        m_vol->dataCacheDirty();
    90d8:	ldr	r0, [r6, #32]
          ds->flags |= EXFAT_FLAG_CONTIGUOUS;
        } else {
          ds->flags &= ~EXFAT_FLAG_CONTIGUOUS;
        }
        setLe64(ds->validLength, m_validLength);
        setLe32(ds->firstCluster, m_firstCluster);
    90da:	ldr	r1, [r6, #28]
        if (isContiguous()) {
          ds->flags |= EXFAT_FLAG_CONTIGUOUS;
        } else {
          ds->flags &= ~EXFAT_FLAG_CONTIGUOUS;
        }
        setLe64(ds->validLength, m_validLength);
    90dc:	ldrd	r2, r3, [r6, #16]
}

inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
    90e0:	str	r1, [r5, #20]
}
inline void setLe64(uint8_t* dst, uint64_t src) {
  *reinterpret_cast<uint64_t*>(dst) = src;
    90e2:	strd	r2, r3, [r5, #8]
        setLe32(ds->firstCluster, m_firstCluster);
        setLe64(ds->dataLength, m_dataLength);
    90e6:	ldrd	r2, r3, [r6, #8]
    90ea:	strd	r2, r3, [r5, #24]
    90ee:	ldrb.w	r3, [r0, #524]	; 0x20c
    90f2:	orr.w	r3, r3, #1
    90f6:	strb.w	r3, [r0, #524]	; 0x20c
    90fa:	ldrb	r3, [r5, #0]
    90fc:	b.n	9024 <ExFatFile::syncDir()+0x54>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  df = reinterpret_cast<DirFile_t *>
       (m_vol->dirCache(&m_dirPos, FsCache::CACHE_FOR_WRITE));
    90fe:	mov	r1, fp
    9100:	movs	r2, #1
    9102:	ldr	r0, [r6, #32]
    9104:	bl	8bbc <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
  if (!df) {
    9108:	cmp	r0, #0
    910a:	beq.n	900e <ExFatFile::syncDir()+0x3e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  setLe16(df->setChecksum, checksum);
  if (!m_vol->cacheSync()) {
    910c:	ldr	r5, [r6, #32]
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    910e:	strh	r4, [r0, #2]
#endif  // USE_EXFAT_BITMAP_CACHE
    m_dataCache.init(dev);
  }
  bool cacheSync() {
#if USE_EXFAT_BITMAP_CACHE
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    9110:	mov	r0, r5
    9112:	bl	8928 <FsCache::sync()>
    9116:	cmp	r0, #0
    9118:	beq.w	900e <ExFatFile::syncDir()+0x3e>
    911c:	add.w	r0, r5, #524	; 0x20c
    9120:	bl	8928 <FsCache::sync()>
    9124:	cmp	r0, #0
    9126:	beq.w	900e <ExFatFile::syncDir()+0x3e>
    912a:	ldr.w	r0, [r5, #1080]	; 0x438
  bool fatPut(uint32_t cluster, uint32_t value);
  uint32_t chainSize(uint32_t cluster);
  bool freeChain(uint32_t cluster);
  uint16_t sectorMask() {return m_sectorMask;}
  bool syncDevice() {
    return m_blockDev->syncDevice();
    912e:	ldr	r3, [r0, #0]
    9130:	ldr	r3, [r3, #20]
    9132:	blx	r3
#endif  // USE_EXFAT_BITMAP_CACHE
    m_dataCache.init(dev);
  }
  bool cacheSync() {
#if USE_EXFAT_BITMAP_CACHE
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    9134:	cmp	r0, #0
    9136:	beq.w	900e <ExFatFile::syncDir()+0x3e>
    913a:	b.n	901c <ExFatFile::syncDir()+0x4c>
    913c:	.word	0x20005b20

00009140 <ExFatFile::sync()>:
fail:
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::sync() {
  if (!isOpen()) {
    9140:	ldrb.w	r2, [r0, #49]	; 0x31
    9144:	cbz	r2, 916c <ExFatFile::sync()+0x2c>

fail:
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::sync() {
    9146:	push	{r3, r4, r5, lr}
  if (!isOpen()) {
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    9148:	ldrb.w	r2, [r0, #51]	; 0x33
    914c:	lsls	r1, r2, #24
    914e:	bmi.n	9170 <ExFatFile::sync()+0x30>
    // clear directory dirty
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    return syncDir();
  }
  if (!m_vol->cacheSync()) {
    9150:	ldr	r5, [r0, #32]
    9152:	mov	r4, r0
    9154:	mov	r0, r5
    9156:	bl	8928 <FsCache::sync()>
    915a:	cbnz	r0, 9180 <ExFatFile::sync()+0x40>
    goto fail;
  }
  return true;

 fail:
  m_error |= WRITE_ERROR;
    915c:	ldrb.w	r3, [r4, #50]	; 0x32
  return false;
    9160:	movs	r0, #0
    goto fail;
  }
  return true;

 fail:
  m_error |= WRITE_ERROR;
    9162:	orr.w	r3, r3, #1
    9166:	strb.w	r3, [r4, #50]	; 0x32
  return false;
}
    916a:	pop	{r3, r4, r5, pc}
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::sync() {
  if (!isOpen()) {
    return true;
    916c:	movs	r0, #1
  return true;

 fail:
  m_error |= WRITE_ERROR;
  return false;
}
    916e:	bx	lr
  if (!isOpen()) {
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    // clear directory dirty
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    9170:	and.w	r2, r2, #127	; 0x7f
    9174:	strb.w	r2, [r0, #51]	; 0x33
  return true;

 fail:
  m_error |= WRITE_ERROR;
  return false;
}
    9178:	ldmia.w	sp!, {r3, r4, r5, lr}
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    // clear directory dirty
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    return syncDir();
    917c:	b.w	8fd0 <ExFatFile::syncDir()>
    9180:	add.w	r0, r5, #524	; 0x20c
    9184:	bl	8928 <FsCache::sync()>
    9188:	cmp	r0, #0
    918a:	beq.n	915c <ExFatFile::sync()+0x1c>
    918c:	ldr.w	r0, [r5, #1080]	; 0x438
  bool fatPut(uint32_t cluster, uint32_t value);
  uint32_t chainSize(uint32_t cluster);
  bool freeChain(uint32_t cluster);
  uint16_t sectorMask() {return m_sectorMask;}
  bool syncDevice() {
    return m_blockDev->syncDevice();
    9190:	ldr	r3, [r0, #0]
    9192:	ldr	r3, [r3, #20]
    9194:	blx	r3
#endif  // USE_EXFAT_BITMAP_CACHE
    m_dataCache.init(dev);
  }
  bool cacheSync() {
#if USE_EXFAT_BITMAP_CACHE
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    9196:	cmp	r0, #0
    9198:	beq.n	915c <ExFatFile::sync()+0x1c>
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::sync() {
  if (!isOpen()) {
    return true;
    919a:	movs	r0, #1
    919c:	pop	{r3, r4, r5, pc}
    919e:	nop

000091a0 <ExFatFile::addDirCluster()>:

 fail:
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::addDirCluster() {
    91a0:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t sector;
  uint32_t dl = isRoot() ? m_vol->rootLength() : m_dataLength;
    91a4:	ldrb.w	r3, [r0, #49]	; 0x31

 fail:
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::addDirCluster() {
    91a8:	mov	r4, r0
  uint32_t sector;
  uint32_t dl = isRoot() ? m_vol->rootLength() : m_dataLength;
    91aa:	lsls	r1, r3, #25
    91ac:	bmi.n	9272 <ExFatFile::addDirCluster()+0xd2>
    91ae:	ldr	r0, [r0, #8]
    91b0:	ldr	r3, [r4, #32]
  uint8_t* cache;
  dl += m_vol->bytesPerCluster();
  if (dl >= 0X4000000) {
    91b2:	ldr.w	r3, [r3, #1076]	; 0x434
    91b6:	add	r0, r3
    91b8:	cmp.w	r0, #67108864	; 0x4000000
    91bc:	bcc.n	91c4 <ExFatFile::addDirCluster()+0x24>
  }
  return sync();

 fail:
  return false;
}
    91be:	movs	r0, #0
    91c0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  dl += m_vol->bytesPerCluster();
  if (dl >= 0X4000000) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!addCluster()) {
    91c4:	mov	r0, r4
    91c6:	bl	8e0c <ExFatFile::addCluster()>
    91ca:	cmp	r0, #0
    91cc:	beq.n	91be <ExFatFile::addDirCluster()+0x1e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  cache =  m_vol->cacheClear();
    91ce:	ldr	r6, [r4, #32]
  uint8_t* cacheBuffer() {
    return m_cacheBuffer;
  }
  /** \return Clear the cache and returns a pointer to the cache. */
  uint8_t* clear() {
    if (isDirty() && !sync()) {
    91d0:	ldrb.w	r3, [r6, #524]	; 0x20c

  /** Clear the cache and returns a pointer to the cache.  Not for normal apps.
   * \return A pointer to the cache buffer or zero if an error occurs.
   */
  uint8_t* cacheClear() {
    return m_dataCache.clear();
    91d4:	add.w	r5, r6, #524	; 0x20c
  uint8_t* cacheBuffer() {
    return m_cacheBuffer;
  }
  /** \return Clear the cache and returns a pointer to the cache. */
  uint8_t* clear() {
    if (isDirty() && !sync()) {
    91d8:	lsls	r2, r3, #31
    91da:	bmi.n	927a <ExFatFile::addDirCluster()+0xda>
      return nullptr;
    }
    invalidate();
    return m_cacheBuffer;
    91dc:	add.w	r6, r6, #536	; 0x218
  /** \return Clear the cache and returns a pointer to the cache. */
  uint8_t* clear() {
    if (isDirty() && !sync()) {
      return nullptr;
    }
    invalidate();
    91e0:	mov	r0, r5
    91e2:	bl	885c <FsCache::invalidate()>
  if (!cache) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(cache, 0, m_vol->bytesPerSector());
    91e6:	mov.w	r2, #512	; 0x200
    91ea:	movs	r1, #0
    91ec:	mov	r0, r6
    91ee:	bl	10d7c <memset>
  sector = m_vol->clusterStartSector(m_curCluster);
    91f2:	ldr	r2, [r4, #32]
  bool dataCacheSync() {return m_dataCache.sync();}
  //----------------------------------------------------------------------------
  uint32_t clusterMask() {return m_clusterMask;}
  uint32_t clusterStartSector(uint32_t cluster) {
    return m_clusterHeapStartSector +
           ((cluster - 2) << m_sectorsPerClusterShift);
    91f4:	ldr	r3, [r4, #24]
  for (uint32_t i = 0; i < m_vol->sectorsPerCluster(); i++) {
    91f6:	movs	r7, #1
    91f8:	ldrb.w	r1, [r2, #1085]	; 0x43d
    91fc:	sub.w	r8, r3, #2
    9200:	ldr.w	r3, [r2, #1060]	; 0x424
    9204:	lsl.w	r8, r8, r1
    9208:	add	r8, r3
    920a:	lsls.w	r3, r7, r1
    920e:	beq.n	9236 <ExFatFile::addDirCluster()+0x96>
    9210:	movs	r5, #0
    9212:	ldr.w	r0, [r2, #1080]	; 0x438
  }
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
  }
  bool writeSector(uint32_t sector, const uint8_t* src) {
    return m_blockDev->writeSector(sector, src);
    9216:	add.w	r1, r8, r5
    921a:	mov	r2, r6
    921c:	adds	r5, #1
    921e:	ldr	r3, [r0, #0]
    9220:	ldr	r3, [r3, #24]
    9222:	blx	r3
    if (!m_vol->writeSector(sector + i, cache)) {
    9224:	cmp	r0, #0
    9226:	beq.n	91be <ExFatFile::addDirCluster()+0x1e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(cache, 0, m_vol->bytesPerSector());
  sector = m_vol->clusterStartSector(m_curCluster);
  for (uint32_t i = 0; i < m_vol->sectorsPerCluster(); i++) {
    9228:	ldr	r2, [r4, #32]
    922a:	ldrb.w	r3, [r2, #1085]	; 0x43d
    922e:	lsl.w	r3, r7, r3
    9232:	cmp	r3, r5
    9234:	bhi.n	9212 <ExFatFile::addDirCluster()+0x72>
    if (!m_vol->writeSector(sector + i, cache)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  if (!isRoot()) {
    9236:	ldrb.w	r3, [r4, #49]	; 0x31
    923a:	lsls	r3, r3, #25
    923c:	bmi.n	9268 <ExFatFile::addDirCluster()+0xc8>
    m_flags |= FILE_FLAG_DIR_DIRTY;
    923e:	ldrb.w	r3, [r4, #51]	; 0x33
    m_dataLength  += m_vol->bytesPerCluster();
    9242:	movs	r7, #0
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  if (!isRoot()) {
    m_flags |= FILE_FLAG_DIR_DIRTY;
    9244:	orn	r3, r3, #127	; 0x7f
    9248:	strb.w	r3, [r4, #51]	; 0x33
    m_dataLength  += m_vol->bytesPerCluster();
    924c:	ldr.w	r6, [r2, #1076]	; 0x434
    9250:	ldrd	r2, r3, [r4, #8]
    m_validLength += m_vol->bytesPerCluster();
    9254:	ldrd	r0, r1, [r4, #16]
      goto fail;
    }
  }
  if (!isRoot()) {
    m_flags |= FILE_FLAG_DIR_DIRTY;
    m_dataLength  += m_vol->bytesPerCluster();
    9258:	adds	r2, r2, r6
    925a:	adcs	r3, r7
    m_validLength += m_vol->bytesPerCluster();
    925c:	adds	r0, r0, r6
    925e:	adcs	r1, r7
      goto fail;
    }
  }
  if (!isRoot()) {
    m_flags |= FILE_FLAG_DIR_DIRTY;
    m_dataLength  += m_vol->bytesPerCluster();
    9260:	strd	r2, r3, [r4, #8]
    m_validLength += m_vol->bytesPerCluster();
    9264:	strd	r0, r1, [r4, #16]
  }
  return sync();
    9268:	mov	r0, r4

 fail:
  return false;
}
    926a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  if (!isRoot()) {
    m_flags |= FILE_FLAG_DIR_DIRTY;
    m_dataLength  += m_vol->bytesPerCluster();
    m_validLength += m_vol->bytesPerCluster();
  }
  return sync();
    926e:	b.w	9140 <ExFatFile::sync()>
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::addDirCluster() {
  uint32_t sector;
  uint32_t dl = isRoot() ? m_vol->rootLength() : m_dataLength;
    9272:	ldr	r0, [r0, #32]
    9274:	bl	8d5c <ExFatPartition::rootLength()>
    9278:	b.n	91b0 <ExFatFile::addDirCluster()+0x10>
  uint8_t* cacheBuffer() {
    return m_cacheBuffer;
  }
  /** \return Clear the cache and returns a pointer to the cache. */
  uint8_t* clear() {
    if (isDirty() && !sync()) {
    927a:	mov	r0, r5
    927c:	bl	8928 <FsCache::sync()>
    9280:	cmp	r0, #0
    9282:	bne.n	91dc <ExFatFile::addDirCluster()+0x3c>
    9284:	b.n	91be <ExFatFile::addDirCluster()+0x1e>
    9286:	nop

00009288 <ExFatFile::mkdir(ExFatFile*, ExName_t*)>:
fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::mkdir(ExFatFile* parent, ExName_t* fname) {
  if (!parent->isDir()) {
    9288:	ldrb.w	r3, [r1, #49]	; 0x31
    928c:	tst.w	r3, #80	; 0x50
    9290:	bne.n	9296 <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0xe>
  m_flags = FILE_FLAG_READ | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
  return sync();

fail:
  return false;
}
    9292:	movs	r0, #0
    9294:	bx	lr

fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::mkdir(ExFatFile* parent, ExName_t* fname) {
    9296:	push	{r4, r5, lr}
  uint8_t setCount() {return m_setCount;}
  bool mkdir(ExFatFile* parent, ExName_t* fname);
  bool openRootFile(ExFatFile* dir,
                    const ExChar_t* name, uint8_t nameLength, oflag_t oflag);
  bool open(ExFatFile* dirFile, ExName_t* fname, oflag_t oflag) {
    return openRootFile(dirFile, fname->lfn, fname->len, oflag);
    9298:	movw	r5, #2562	; 0xa02
    929c:	sub	sp, #12
    929e:	ldrb	r3, [r2, #0]
    92a0:	mov	r4, r0
    92a2:	ldr	r2, [r2, #4]
    92a4:	str	r5, [sp, #0]
    92a6:	bl	8310 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)>
  if (!parent->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // create a normal file
  if (!open(parent, fname, O_CREAT | O_EXCL | O_RDWR)) {
    92aa:	cbnz	r0, 92b2 <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0x2a>
  m_flags = FILE_FLAG_READ | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
  return sync();

fail:
  return false;
}
    92ac:	movs	r0, #0
    92ae:	add	sp, #12
    92b0:	pop	{r4, r5, pc}
    DBG_FAIL_MACRO;
    goto fail;
  }
  // convert file to directory

  m_attributes = FILE_ATTR_SUBDIR;
    92b2:	movs	r3, #16

  // allocate and zero first cluster
  if (!addDirCluster()) {
    92b4:	mov	r0, r4
    DBG_FAIL_MACRO;
    goto fail;
  }
  // convert file to directory

  m_attributes = FILE_ATTR_SUBDIR;
    92b6:	strb.w	r3, [r4, #49]	; 0x31

  // allocate and zero first cluster
  if (!addDirCluster()) {
    92ba:	bl	91a0 <ExFatFile::addDirCluster()>
    92be:	cmp	r0, #0
    92c0:	beq.n	92ac <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0x24>
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_firstCluster = m_curCluster;
    92c2:	ldr	r1, [r4, #24]
   * \return true for success or false for failure.
   */
  bool rename(ExFatFile* dirFile, const ExChar_t* newPath);
  /** Set the file's current position to zero. */
  void rewind() {
    seekSet(0);
    92c4:	movs	r2, #0
    92c6:	movs	r3, #0
    92c8:	mov	r0, r4
    92ca:	str	r1, [r4, #28]
    92cc:	bl	8208 <ExFatFile::seekSet(unsigned long long)>

  // Set to start of dir
  rewind();
  m_flags = FILE_FLAG_READ | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
    92d0:	movs	r3, #193	; 0xc1
  return sync();
    92d2:	mov	r0, r4
  }
  m_firstCluster = m_curCluster;

  // Set to start of dir
  rewind();
  m_flags = FILE_FLAG_READ | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
    92d4:	strb.w	r3, [r4, #51]	; 0x33
  return sync();

fail:
  return false;
}
    92d8:	add	sp, #12
    92da:	ldmia.w	sp!, {r4, r5, lr}
  m_firstCluster = m_curCluster;

  // Set to start of dir
  rewind();
  m_flags = FILE_FLAG_READ | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
  return sync();
    92de:	b.w	9140 <ExFatFile::sync()>
    92e2:	nop

000092e4 <ExFatFile::mkdir(ExFatFile*, char const*, bool)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::mkdir(ExFatFile* parent, const ExChar_t* path, bool pFlag) {
    92e4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    92e8:	mov	r6, r0
    92ea:	sub	sp, #84	; 0x54
 * \brief Basic file class.
 */
class ExFatFile {
 public:
  /** Create an instance. */
  ExFatFile() : m_attributes(FILE_ATTR_CLOSED), m_error(0), m_flags(0) {}
    92ec:	movs	r0, #0
    92ee:	mov	r4, r1
  ExName_t fname;
  ExFatFile tmpDir;

  if (isOpen() || !parent->isDir()) {
    92f0:	ldrb.w	r1, [r6, #49]	; 0x31

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::mkdir(ExFatFile* parent, const ExChar_t* path, bool pFlag) {
    92f4:	str	r2, [sp, #12]
    92f6:	strb.w	r0, [sp, #73]	; 0x49
    92fa:	strb.w	r0, [sp, #74]	; 0x4a
    92fe:	strb.w	r0, [sp, #75]	; 0x4b
  ExName_t fname;
  ExFatFile tmpDir;

  if (isOpen() || !parent->isDir()) {
    9302:	cbnz	r1, 9310 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x2c>
    9304:	mov	r9, r3
    9306:	ldrb.w	r3, [r4, #49]	; 0x31
    930a:	tst.w	r3, #80	; 0x50
    930e:	bne.n	9318 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x34>
    close();
  }
  return mkdir(parent, &fname);

fail:
  return false;
    9310:	movs	r0, #0
}
    9312:	add	sp, #84	; 0x54
    9314:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

  if (isOpen() || !parent->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    9318:	ldrb	r3, [r2, #0]
    931a:	mov	r1, r2
    931c:	cmp	r3, #47	; 0x2f
    931e:	beq.n	9394 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xb0>
  uint8_t setCount() {return m_setCount;}
  bool mkdir(ExFatFile* parent, ExName_t* fname);
  bool openRootFile(ExFatFile* dir,
                    const ExChar_t* name, uint8_t nameLength, oflag_t oflag);
  bool open(ExFatFile* dirFile, ExName_t* fname, oflag_t oflag) {
    return openRootFile(dirFile, fname->lfn, fname->len, oflag);
    9320:	mov.w	r8, #0
      goto fail;
    }
    parent = &tmpDir;
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
    9324:	add	r3, sp, #12
    9326:	add	r2, sp, #16
    9328:	mov	r0, r6
    932a:	bl	7f38 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>
    932e:	cmp	r0, #0
    9330:	beq.n	9310 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x2c>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!*path) {
    9332:	ldr	r3, [sp, #12]
    9334:	ldrb	r3, [r3, #0]
    9336:	cmp	r3, #0
    9338:	beq.n	93b0 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xcc>
    933a:	ldrb.w	r3, [sp, #16]
    933e:	mov	r1, r4
    9340:	ldr	r2, [sp, #20]
    9342:	mov	r0, r6
    9344:	str.w	r8, [sp]
    9348:	bl	8310 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)>
      break;
    }
    if (!open(parent, &fname, O_RDONLY)) {
    934c:	cbnz	r0, 9362 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x7e>
      if (!pFlag || !mkdir(parent, &fname)) {
    934e:	cmp.w	r9, #0
    9352:	beq.n	9310 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x2c>
    9354:	mov	r1, r4
    9356:	add	r2, sp, #16
    9358:	mov	r0, r6
    935a:	bl	9288 <ExFatFile::mkdir(ExFatFile*, ExName_t*)>
    935e:	cmp	r0, #0
    9360:	beq.n	9310 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x2c>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    tmpDir = *this;
    9362:	mov	r4, r6
    9364:	add	r7, sp, #24
    9366:	add.w	lr, r6, #48	; 0x30
    936a:	ldr	r0, [r4, #0]
    936c:	adds	r4, #16
    936e:	ldr.w	r1, [r4, #-12]
    9372:	mov	r5, r7
    9374:	ldr.w	r2, [r4, #-8]
    9378:	adds	r7, #16
    937a:	ldr.w	r3, [r4, #-4]
    937e:	cmp	r4, lr
    9380:	stmia	r5!, {r0, r1, r2, r3}
    9382:	bne.n	936a <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x86>
    9384:	ldr	r0, [r4, #0]
    parent = &tmpDir;
    9386:	add	r4, sp, #24
      if (!pFlag || !mkdir(parent, &fname)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    tmpDir = *this;
    9388:	str	r0, [r7, #0]
    parent = &tmpDir;
    close();
    938a:	mov	r0, r6
    938c:	bl	7e54 <ExFatFile::close()>
    9390:	ldr	r1, [sp, #12]
      DBG_FAIL_MACRO;
      goto fail;
    }
    parent = &tmpDir;
  }
  while (1) {
    9392:	b.n	9324 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x40>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
      path++;
    9394:	adds	r1, #1
    9396:	str	r1, [sp, #12]
  if (isOpen() || !parent->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
    9398:	ldrb	r3, [r1, #0]
    939a:	cmp	r3, #47	; 0x2f
    939c:	beq.n	9394 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xb0>
      path++;
    }
    if (!tmpDir.openRoot(parent->m_vol)) {
    939e:	ldr	r1, [r4, #32]
    93a0:	add	r0, sp, #24
    93a2:	bl	7f10 <ExFatFile::openRoot(ExFatVolume*)>
    93a6:	cmp	r0, #0
    93a8:	beq.n	9310 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x2c>
      DBG_FAIL_MACRO;
      goto fail;
    }
    parent = &tmpDir;
    93aa:	add	r4, sp, #24
    93ac:	ldr	r1, [sp, #12]
    93ae:	b.n	9320 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x3c>
    }
    tmpDir = *this;
    parent = &tmpDir;
    close();
  }
  return mkdir(parent, &fname);
    93b0:	add	r2, sp, #16
    93b2:	mov	r1, r4
    93b4:	mov	r0, r6
    93b6:	bl	9288 <ExFatFile::mkdir(ExFatFile*, ExName_t*)>

fail:
  return false;
}
    93ba:	add	sp, #84	; 0x54
    93bc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000093c0 <ExFatFile::rename(ExFatFile*, char const*)>:
//------------------------------------------------------------------------------
bool ExFatFile::rename(const ExChar_t* newPath) {
  return rename(m_vol->vwd(), newPath);
}
//------------------------------------------------------------------------------
bool ExFatFile::rename(ExFatFile* dirFile, const ExChar_t* newPath) {
    93c0:	push	{r4, r5, r6, r7, lr}
  ExFatFile file;
  ExFatFile oldFile;

  // Must be an open file or subdirectory.
  if (!(isFile() || isSubDir())) {
    93c2:	ldrb.w	r4, [r0, #49]	; 0x31
//------------------------------------------------------------------------------
bool ExFatFile::rename(const ExChar_t* newPath) {
  return rename(m_vol->vwd(), newPath);
}
//------------------------------------------------------------------------------
bool ExFatFile::rename(ExFatFile* dirFile, const ExChar_t* newPath) {
    93c6:	sub	sp, #116	; 0x74
 * \brief Basic file class.
 */
class ExFatFile {
 public:
  /** Create an instance. */
  ExFatFile() : m_attributes(FILE_ATTR_CLOSED), m_error(0), m_flags(0) {}
    93c8:	movs	r3, #0
  ExFatFile file;
  ExFatFile oldFile;

  // Must be an open file or subdirectory.
  if (!(isFile() || isSubDir())) {
    93ca:	tst.w	r4, #24
    93ce:	strb.w	r3, [sp, #49]	; 0x31
    93d2:	strb.w	r3, [sp, #50]	; 0x32
    93d6:	strb.w	r3, [sp, #51]	; 0x33
    93da:	strb.w	r3, [sp, #105]	; 0x69
    93de:	strb.w	r3, [sp, #106]	; 0x6a
    93e2:	strb.w	r3, [sp, #107]	; 0x6b
    93e6:	beq.n	93f0 <ExFatFile::rename(ExFatFile*, char const*)+0x30>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Can't move file to new volume.
  if (m_vol != dirFile->m_vol) {
    93e8:	ldr	r3, [r1, #32]
    93ea:	ldr	r4, [r0, #32]
    93ec:	cmp	r4, r3
    93ee:	beq.n	93f6 <ExFatFile::rename(ExFatFile*, char const*)+0x36>
  oldFile.m_flags = FILE_FLAG_WRITE;
  oldFile.m_attributes = FILE_ATTR_FILE;
  return oldFile.remove();

fail:
  return false;
    93f0:	movs	r0, #0
}
    93f2:	add	sp, #116	; 0x74
    93f4:	pop	{r4, r5, r6, r7, pc}
    93f6:	mov	r4, r0
  // Can't move file to new volume.
  if (m_vol != dirFile->m_vol) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!file.open(dirFile, newPath, O_CREAT | O_EXCL | O_WRONLY)) {
    93f8:	movw	r3, #2561	; 0xa01
    93fc:	mov	r0, sp
    93fe:	bl	86e8 <ExFatFile::open(ExFatFile*, char const*, int)>
    9402:	cmp	r0, #0
    9404:	beq.n	93f0 <ExFatFile::rename(ExFatFile*, char const*)+0x30>
    DBG_FAIL_MACRO;
    goto fail;
  }
  oldFile = *this;
    9406:	mov	r5, r4
    9408:	add.w	lr, r4, #48	; 0x30
    940c:	add	r7, sp, #56	; 0x38
    940e:	ldr	r0, [r5, #0]
    9410:	adds	r5, #16
    9412:	ldr.w	r1, [r5, #-12]
    9416:	mov	r6, r7
    9418:	ldr.w	r2, [r5, #-8]
    941c:	adds	r7, #16
    941e:	ldr.w	r3, [r5, #-4]
    9422:	cmp	r5, lr
    9424:	stmia	r6!, {r0, r1, r2, r3}
    9426:	bne.n	940e <ExFatFile::rename(ExFatFile*, char const*)+0x4e>
    9428:	ldr	r0, [r5, #0]
  m_dirPos = file.m_dirPos;
    942a:	add	r2, sp, #36	; 0x24
    942c:	add.w	r3, r4, #36	; 0x24
  }
  if (!file.open(dirFile, newPath, O_CREAT | O_EXCL | O_WRONLY)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  oldFile = *this;
    9430:	str	r0, [r7, #0]
  m_dirPos = file.m_dirPos;
  m_setCount = file.m_setCount;
    9432:	ldrb.w	r5, [sp, #48]	; 0x30
  if (!file.open(dirFile, newPath, O_CREAT | O_EXCL | O_WRONLY)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  oldFile = *this;
  m_dirPos = file.m_dirPos;
    9436:	ldmia	r2, {r0, r1, r2}
    9438:	stmia.w	r3, {r0, r1, r2}
  m_setCount = file.m_setCount;
  m_flags |= FILE_FLAG_DIR_DIRTY;
    943c:	ldrb.w	r3, [r4, #51]	; 0x33
  if (!sync()) {
    9440:	mov	r0, r4
    DBG_FAIL_MACRO;
    goto fail;
  }
  oldFile = *this;
  m_dirPos = file.m_dirPos;
  m_setCount = file.m_setCount;
    9442:	strb.w	r5, [r4, #48]	; 0x30
  m_flags |= FILE_FLAG_DIR_DIRTY;
    9446:	orn	r3, r3, #127	; 0x7f
    944a:	strb.w	r3, [r4, #51]	; 0x33
  if (!sync()) {
    944e:	bl	9140 <ExFatFile::sync()>
    9452:	cmp	r0, #0
    9454:	beq.n	93f0 <ExFatFile::rename(ExFatFile*, char const*)+0x30>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Remove old directory entry;
  oldFile.m_firstCluster = 0;
    9456:	movs	r1, #0
  oldFile.m_flags = FILE_FLAG_WRITE;
    9458:	movs	r2, #2
  oldFile.m_attributes = FILE_ATTR_FILE;
    945a:	movs	r3, #8
  return oldFile.remove();
    945c:	add	r0, sp, #56	; 0x38
  if (!sync()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Remove old directory entry;
  oldFile.m_firstCluster = 0;
    945e:	str	r1, [sp, #84]	; 0x54
  oldFile.m_flags = FILE_FLAG_WRITE;
    9460:	strb.w	r2, [sp, #107]	; 0x6b
  oldFile.m_attributes = FILE_ATTR_FILE;
    9464:	strb.w	r3, [sp, #105]	; 0x69
  return oldFile.remove();
    9468:	bl	8e9c <ExFatFile::remove()>
    946c:	b.n	93f2 <ExFatFile::rename(ExFatFile*, char const*)+0x32>
    946e:	nop

00009470 <ExFatFile::truncate()>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::truncate() {
    9470:	ldrb.w	r3, [r0, #51]	; 0x33
  uint32_t toFree;
  // error if not a normal file or read-only
  if (!isWritable()) {
    9474:	lsls	r2, r3, #30
    9476:	bpl.n	94aa <ExFatFile::truncate()+0x3a>

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::truncate() {
    9478:	push	{r4, r5, r6, r7, lr}
  // error if not a normal file or read-only
  if (!isWritable()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_firstCluster == 0) {
    947a:	ldr	r5, [r0, #28]

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::truncate() {
    947c:	sub	sp, #12
  // error if not a normal file or read-only
  if (!isWritable()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_firstCluster == 0) {
    947e:	cbz	r5, 94a4 <ExFatFile::truncate()+0x34>
      return true;
  }
  if (isContiguous()) {
    9480:	and.w	r3, r3, #64	; 0x40
    9484:	mov	r4, r0
    9486:	and.w	r6, r3, #255	; 0xff
    948a:	cbnz	r3, 94ae <ExFatFile::truncate()+0x3e>
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else {
    // need to free chain
    if (m_curCluster) {
    948c:	ldr	r1, [r0, #24]
    948e:	cmp	r1, #0
    9490:	bne.n	9518 <ExFatFile::truncate()+0xa8>
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
    } else {
      toFree = m_firstCluster;
    9492:	str	r5, [sp, #4]
      m_firstCluster = 0;
    9494:	str	r1, [r0, #28]
    }
    if (toFree) {
      if (!m_vol->freeChain(toFree)) {
    9496:	mov	r1, r5
    9498:	ldr	r0, [r4, #32]
    949a:	bl	8c84 <ExFatPartition::freeChain(unsigned long)>
    949e:	cbnz	r0, 94f0 <ExFatFile::truncate()+0x80>
  m_validLength = m_curPosition;
  m_flags |= FILE_FLAG_DIR_DIRTY;
  return sync();

 fail:
  return false;
    94a0:	movs	r0, #0
    94a2:	b.n	94a6 <ExFatFile::truncate()+0x36>
  if (!isWritable()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_firstCluster == 0) {
      return true;
    94a4:	movs	r0, #1
  m_flags |= FILE_FLAG_DIR_DIRTY;
  return sync();

 fail:
  return false;
}
    94a6:	add	sp, #12
    94a8:	pop	{r4, r5, r6, r7, pc}
  m_validLength = m_curPosition;
  m_flags |= FILE_FLAG_DIR_DIRTY;
  return sync();

 fail:
  return false;
    94aa:	movs	r0, #0
}
    94ac:	bx	lr
    94ae:	ldr	r0, [r0, #32]
  if (m_firstCluster == 0) {
      return true;
  }
  if (isContiguous()) {
    uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    if (m_curCluster) {
    94b0:	ldr	r1, [r4, #24]
  }
  if (m_firstCluster == 0) {
      return true;
  }
  if (isContiguous()) {
    uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    94b2:	ldrb.w	r2, [r0, #1085]	; 0x43d
    94b6:	ldrd	r6, r7, [r4, #8]
    94ba:	adds	r2, #9
    94bc:	adds.w	r6, r6, #4294967295
    94c0:	uxtb	r2, r2
    94c2:	adc.w	r7, r7, #4294967295
    94c6:	rsb	lr, r2, #32
    94ca:	sub.w	r3, r2, #32
    94ce:	lsr.w	r2, r6, r2
    94d2:	lsl.w	lr, r7, lr
    94d6:	lsr.w	r3, r7, r3
    94da:	orr.w	r2, r2, lr
    94de:	orrs	r2, r3
    94e0:	adds	r2, #1
    if (m_curCluster) {
    94e2:	cbz	r1, 9512 <ExFatFile::truncate()+0xa2>
      toFree = m_curCluster + 1;
      nc -= 1 + m_curCluster - m_firstCluster;
    94e4:	subs	r5, #1
      return true;
  }
  if (isContiguous()) {
    uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    if (m_curCluster) {
      toFree = m_curCluster + 1;
    94e6:	adds	r3, r1, #1
      nc -= 1 + m_curCluster - m_firstCluster;
    94e8:	subs	r1, r5, r1
      return true;
  }
  if (isContiguous()) {
    uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    if (m_curCluster) {
      toFree = m_curCluster + 1;
    94ea:	str	r3, [sp, #4]
      nc -= 1 + m_curCluster - m_firstCluster;
    94ec:	add	r2, r1
    } else {
      toFree = m_firstCluster;
      m_firstCluster = 0;
    }
    if (nc && !m_vol->bitmapModify(toFree, nc, 0)) {
    94ee:	cbnz	r2, 9534 <ExFatFile::truncate()+0xc4>
      }
    }
  }
  m_dataLength = m_curPosition;
  m_validLength = m_curPosition;
  m_flags |= FILE_FLAG_DIR_DIRTY;
    94f0:	ldrb.w	r3, [r4, #51]	; 0x33
  return sync();
    94f4:	mov	r0, r4
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
  }
  m_dataLength = m_curPosition;
    94f6:	ldrd	r6, r7, [r4]
  m_validLength = m_curPosition;
  m_flags |= FILE_FLAG_DIR_DIRTY;
    94fa:	orn	r3, r3, #127	; 0x7f
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
  }
  m_dataLength = m_curPosition;
    94fe:	strd	r6, r7, [r4, #8]
  m_validLength = m_curPosition;
  m_flags |= FILE_FLAG_DIR_DIRTY;
    9502:	strb.w	r3, [r4, #51]	; 0x33
        goto fail;
      }
    }
  }
  m_dataLength = m_curPosition;
  m_validLength = m_curPosition;
    9506:	strd	r6, r7, [r4, #16]
  m_flags |= FILE_FLAG_DIR_DIRTY;
  return sync();
    950a:	bl	9140 <ExFatFile::sync()>

 fail:
  return false;
}
    950e:	add	sp, #12
    9510:	pop	{r4, r5, r6, r7, pc}
    uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    if (m_curCluster) {
      toFree = m_curCluster + 1;
      nc -= 1 + m_curCluster - m_firstCluster;
    } else {
      toFree = m_firstCluster;
    9512:	str	r5, [sp, #4]
      m_firstCluster = 0;
    9514:	str	r1, [r4, #28]
    9516:	b.n	94ee <ExFatFile::truncate()+0x7e>
      goto fail;
    }
  } else {
    // need to free chain
    if (m_curCluster) {
      toFree = 0;
    9518:	add	r2, sp, #8
      int8_t fg = m_vol->fatGet(m_curCluster, &toFree);
    951a:	ldr	r0, [r0, #32]
      goto fail;
    }
  } else {
    // need to free chain
    if (m_curCluster) {
      toFree = 0;
    951c:	str.w	r6, [r2, #-4]!
      int8_t fg = m_vol->fatGet(m_curCluster, &toFree);
    9520:	bl	8c4c <ExFatPartition::fatGet(unsigned long, unsigned long*)>
    9524:	sxtb	r0, r0
      if (fg < 0) {
    9526:	cmp	r0, #0
    9528:	blt.n	94a0 <ExFatFile::truncate()+0x30>
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (fg) {
    952a:	bne.n	9542 <ExFatFile::truncate()+0xd2>
      }
    } else {
      toFree = m_firstCluster;
      m_firstCluster = 0;
    }
    if (toFree) {
    952c:	ldr	r5, [sp, #4]
    952e:	cmp	r5, #0
    9530:	beq.n	94f0 <ExFatFile::truncate()+0x80>
    9532:	b.n	9496 <ExFatFile::truncate()+0x26>
      nc -= 1 + m_curCluster - m_firstCluster;
    } else {
      toFree = m_firstCluster;
      m_firstCluster = 0;
    }
    if (nc && !m_vol->bitmapModify(toFree, nc, 0)) {
    9534:	movs	r3, #0
    9536:	ldr	r1, [sp, #4]
    9538:	bl	8ad8 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    953c:	cmp	r0, #0
    953e:	bne.n	94f0 <ExFatFile::truncate()+0x80>
    9540:	b.n	94a0 <ExFatFile::truncate()+0x30>
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (fg) {
        // current cluster is end of chain
        if (!m_vol->fatPut(m_curCluster, EXFAT_EOC)) {
    9542:	mov.w	r2, #4294967295
    9546:	ldr	r1, [r4, #24]
    9548:	ldr	r0, [r4, #32]
    954a:	bl	8c60 <ExFatPartition::fatPut(unsigned long, unsigned long)>
    954e:	cmp	r0, #0
    9550:	bne.n	952c <ExFatFile::truncate()+0xbc>
    9552:	b.n	94a0 <ExFatFile::truncate()+0x30>

00009554 <ExFatFile::write(void const*, unsigned int)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
size_t ExFatFile::write(const void* buf, size_t nbyte) {
    9554:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9558:	ldrb.w	r3, [r0, #51]	; 0x33
    955c:	sub	sp, #20
    955e:	mov	r4, r0

  // number of bytes left to write  -  must be before goto statements
  size_t toWrite = nbyte;
  size_t n;
  // error if not an open file or is read-only
  if (!isWritable()) {
    9560:	lsls	r5, r3, #30

 fail:
  return false;
}
//------------------------------------------------------------------------------
size_t ExFatFile::write(const void* buf, size_t nbyte) {
    9562:	str	r2, [sp, #4]

  // number of bytes left to write  -  must be before goto statements
  size_t toWrite = nbyte;
  size_t n;
  // error if not an open file or is read-only
  if (!isWritable()) {
    9564:	bmi.n	957c <ExFatFile::write(void const*, unsigned int)+0x28>
  }
  return nbyte;

fail:
  // return for write error
  m_error |= WRITE_ERROR;
    9566:	ldrb.w	r3, [r4, #50]	; 0x32
  return -1;
    956a:	mov.w	r0, #4294967295
  }
  return nbyte;

fail:
  // return for write error
  m_error |= WRITE_ERROR;
    956e:	orr.w	r3, r3, #1
    9572:	strb.w	r3, [r4, #50]	; 0x32
  return -1;
}
    9576:	add	sp, #20
    9578:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (!isWritable()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & FILE_FLAG_APPEND)) {
    957c:	lsls	r2, r3, #28
    957e:	mov	r8, r1
    9580:	bmi.w	9790 <ExFatFile::write(void const*, unsigned int)+0x23c>
    if (!seekSet(m_validLength)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  while (toWrite) {
    9584:	ldr	r3, [sp, #4]
    9586:	cmp	r3, #0
    9588:	beq.w	97b8 <ExFatFile::write(void const*, unsigned int)+0x264>
    958c:	mov	r1, r4
    958e:	ldr	r5, [sp, #4]
      if (sectorOffset == 0 && m_curPosition >= m_validLength) {
        // start of new sector don't need to read into cache
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
      } else {
        // rewrite part of sector
        cacheOption = FsCache::CACHE_FOR_WRITE;
    9590:	mov.w	sl, #1
    9594:	mov	r9, r8
    9596:	ldrd	r2, r3, [r1], #24
    959a:	mov	fp, r2
    959c:	str	r1, [sp, #12]
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  while (toWrite) {
    clusterOffset = m_curPosition & m_vol->clusterMask();
    959e:	ldr	r0, [r4, #32]
    sectorOffset = clusterOffset & m_vol->sectorMask();
    if (clusterOffset == 0) {
      // start of new cluster
      if (m_curCluster != 0) {
    95a0:	ldr	r1, [r4, #24]
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  while (toWrite) {
    clusterOffset = m_curPosition & m_vol->clusterMask();
    95a2:	ldr.w	r6, [r0, #1072]	; 0x430
    95a6:	and.w	r6, r6, fp
    sectorOffset = clusterOffset & m_vol->sectorMask();
    95aa:	ubfx	r8, r6, #0, #9
    if (clusterOffset == 0) {
    95ae:	cbnz	r6, 9606 <ExFatFile::write(void const*, unsigned int)+0xb2>
      // start of new cluster
      if (m_curCluster != 0) {
    95b0:	cmp	r1, #0
    95b2:	beq.w	972a <ExFatFile::write(void const*, unsigned int)+0x1d6>
        int fg;

        if (isContiguous()) {
    95b6:	ldrb.w	r3, [r4, #51]	; 0x33
    95ba:	lsls	r3, r3, #25
    95bc:	bpl.w	975e <ExFatFile::write(void const*, unsigned int)+0x20a>
          uint32_t lc = m_firstCluster;
          lc += (m_dataLength - 1) >> m_vol->bytesPerClusterShift();
          if (m_curCluster < lc) {
    95c0:	ldrb.w	r2, [r0, #1085]	; 0x43d
      // start of new cluster
      if (m_curCluster != 0) {
        int fg;

        if (isContiguous()) {
          uint32_t lc = m_firstCluster;
    95c4:	ldr	r3, [r4, #28]
          lc += (m_dataLength - 1) >> m_vol->bytesPerClusterShift();
          if (m_curCluster < lc) {
    95c6:	adds	r2, #9
    95c8:	ldrd	fp, ip, [r4, #8]
    95cc:	uxtb	r2, r2
    95ce:	adds.w	fp, fp, #4294967295
    95d2:	rsb	lr, r2, #32
    95d6:	sub.w	r7, r2, #32
    95da:	adc.w	ip, ip, #4294967295
    95de:	lsr.w	r2, fp, r2
    95e2:	lsl.w	lr, ip, lr
    95e6:	lsr.w	r7, ip, r7
    95ea:	orr.w	r2, r2, lr
    95ee:	orrs	r2, r7
    95f0:	add	r2, r3
    95f2:	cmp	r1, r2
    95f4:	bcc.w	9758 <ExFatFile::write(void const*, unsigned int)+0x204>
            goto fail;
          }
        }
        if (fg == 0) {
          // add cluster if at end of chain
          if (!addCluster()) {
    95f8:	mov	r0, r4
    95fa:	bl	8e0c <ExFatFile::addCluster()>
    95fe:	cmp	r0, #0
    9600:	beq.n	9566 <ExFatFile::write(void const*, unsigned int)+0x12>
    9602:	ldr	r0, [r4, #32]
    9604:	ldr	r1, [r4, #24]
        }
      }
    }
    // sector for data write
    sector = m_vol->clusterStartSector(m_curCluster) +
             (clusterOffset >> m_vol->bytesPerSectorShift());
    9606:	lsrs	r6, r6, #9
    9608:	subs	r1, #2
    960a:	ldr.w	r7, [r0, #1060]	; 0x424
  bool dataCacheSync() {return m_dataCache.sync();}
  //----------------------------------------------------------------------------
  uint32_t clusterMask() {return m_clusterMask;}
  uint32_t clusterStartSector(uint32_t cluster) {
    return m_clusterHeapStartSector +
           ((cluster - 2) << m_sectorsPerClusterShift);
    960e:	ldrb.w	r3, [r0, #1085]	; 0x43d
    9612:	add	r7, r6
    9614:	lsls	r1, r3
    9616:	add	r1, r7

    if (sectorOffset != 0 || toWrite < m_vol->bytesPerSector()) {
    9618:	cmp.w	r8, #0
    961c:	bne.n	96d2 <ExFatFile::write(void const*, unsigned int)+0x17e>
    961e:	cmp.w	r5, #512	; 0x200
    9622:	bcc.n	96d2 <ExFatFile::write(void const*, unsigned int)+0x17e>
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
#if USE_MULTI_SECTOR_IO
    } else if (toWrite >= 2*m_vol->bytesPerSector()) {
    9624:	cmp.w	r5, #1024	; 0x400
    9628:	bcc.w	9732 <ExFatFile::write(void const*, unsigned int)+0x1de>
      // use multiple sector write command
      uint32_t ns = toWrite >> m_vol->bytesPerSectorShift();
      // Limit writes to current cluster.
      uint32_t maxNs = m_vol->sectorsPerCluster()
                       - (clusterOffset >> m_vol->bytesPerSectorShift());
    962c:	lsl.w	r2, sl, r3
        }
      }
#if USE_MULTI_SECTOR_IO
    } else if (toWrite >= 2*m_vol->bytesPerSector()) {
      // use multiple sector write command
      uint32_t ns = toWrite >> m_vol->bytesPerSectorShift();
    9630:	lsrs	r7, r5, #9
    9632:	ldr.w	r3, [r0, #532]	; 0x214
      // Limit writes to current cluster.
      uint32_t maxNs = m_vol->sectorsPerCluster()
                       - (clusterOffset >> m_vol->bytesPerSectorShift());
    9636:	subs	r2, r2, r6
    9638:	mov	r6, r7
    963a:	cmp	r7, r2
    963c:	it	cs
    963e:	movcs	r6, r2
        ns = maxNs;
      }
      n = ns << m_vol->bytesPerSectorShift();
      // Check for cache sector in write range.
      if (sector <= m_vol->dataCacheSector()
          && m_vol->dataCacheSector() < (sector + ns)) {
    9640:	cmp	r1, r3
      uint32_t maxNs = m_vol->sectorsPerCluster()
                       - (clusterOffset >> m_vol->bytesPerSectorShift());
      if (ns > maxNs) {
        ns = maxNs;
      }
      n = ns << m_vol->bytesPerSectorShift();
    9642:	mov.w	r7, r6, lsl #9
      // Check for cache sector in write range.
      if (sector <= m_vol->dataCacheSector()
          && m_vol->dataCacheSector() < (sector + ns)) {
    9646:	bhi.n	965c <ExFatFile::write(void const*, unsigned int)+0x108>
    9648:	adds	r2, r6, r1
    964a:	cmp	r2, r3
    964c:	bls.n	965c <ExFatFile::write(void const*, unsigned int)+0x108>
#else  // USE_EXFAT_BITMAP_CACHE
    return m_dataCache.sync() && syncDevice();
#endif  // USE_EXFAT_BITMAP_CACHE
  }
  void dataCacheDirty() {m_dataCache.dirty();}
  void dataCacheInvalidate() {m_dataCache.invalidate();}
    964e:	add.w	r0, r0, #524	; 0x20c
    9652:	str	r1, [sp, #8]
    9654:	bl	885c <FsCache::invalidate()>
    9658:	ldr	r0, [r4, #32]
    965a:	ldr	r1, [sp, #8]
    965c:	ldr.w	r0, [r0, #1080]	; 0x438
#if USE_MULTI_SECTOR_IO
  bool readSectors(uint32_t sector, uint8_t* dst, size_t count) {
    return m_blockDev->readSectors(sector, dst, count);
  }
  bool writeSectors(uint32_t sector, const uint8_t* src, size_t count) {
    return m_blockDev->writeSectors(sector, src, count);
    9660:	mov	r3, r6
    9662:	mov	r2, r9
    9664:	ldr	r6, [r0, #0]
    9666:	ldr	r6, [r6, #28]
    9668:	blx	r6
        // Invalidate cache if cache sector is in the range.
        m_vol->dataCacheInvalidate();
      }
      if (!m_vol->writeSectors(sector, src, ns)) {
    966a:	cmp	r0, #0
    966c:	beq.w	9566 <ExFatFile::write(void const*, unsigned int)+0x12>
    9670:	mov	r0, r7
    9672:	movs	r1, #0
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    src += n;
    9674:	add	r9, r7
    toWrite -= n;
    9676:	subs	r5, r5, r7
      if (!m_vol->writeSector(sector, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    9678:	ldrd	r2, r3, [r4]
    src += n;
    toWrite -= n;
    if (m_curPosition > m_validLength) {
    967c:	ldrd	r6, r7, [r4, #16]
      if (!m_vol->writeSector(sector, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    9680:	adds.w	fp, r2, r0
    9684:	adc.w	ip, r3, r1
    src += n;
    toWrite -= n;
    if (m_curPosition > m_validLength) {
    9688:	cmp	r7, ip
    968a:	it	eq
    968c:	cmpeq	r6, fp
      if (!m_vol->writeSector(sector, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    968e:	strd	fp, ip, [r4]
    src += n;
    toWrite -= n;
    if (m_curPosition > m_validLength) {
    9692:	bcs.n	96a4 <ExFatFile::write(void const*, unsigned int)+0x150>
      m_flags |= FILE_FLAG_DIR_DIRTY;
    9694:	ldrb.w	r1, [r4, #51]	; 0x33
    9698:	orn	r1, r1, #127	; 0x7f
      m_validLength = m_curPosition;
    969c:	strd	fp, ip, [r4, #16]
    }
    m_curPosition += n;
    src += n;
    toWrite -= n;
    if (m_curPosition > m_validLength) {
      m_flags |= FILE_FLAG_DIR_DIRTY;
    96a0:	strb.w	r1, [r4, #51]	; 0x33
    if (!seekSet(m_validLength)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  while (toWrite) {
    96a4:	cmp	r5, #0
    96a6:	bne.w	959e <ExFatFile::write(void const*, unsigned int)+0x4a>
    96aa:	mov	r2, fp
    96ac:	mov	r3, ip
      m_flags |= FILE_FLAG_DIR_DIRTY;
      m_validLength = m_curPosition;
    }
  }

  if (m_curPosition > m_dataLength) {
    96ae:	ldrd	r0, r1, [r4, #8]
    96b2:	cmp	r1, r3
    96b4:	it	eq
    96b6:	cmpeq	r0, r2
    96b8:	bcc.n	97a0 <ExFatFile::write(void const*, unsigned int)+0x24c>
    m_dataLength = m_curPosition;
    // update fileSize and insure sync will update dir entr
    m_flags |= FILE_FLAG_DIR_DIRTY;
  } else if (FsDateTime::callback) {
    96ba:	ldr	r3, [pc, #260]	; (97c0 <ExFatFile::write(void const*, unsigned int)+0x26c>)
    96bc:	ldr	r3, [r3, #0]
    96be:	cmp	r3, #0
    96c0:	beq.n	97b4 <ExFatFile::write(void const*, unsigned int)+0x260>
    // insure sync will update modified date and time
    m_flags |= FILE_FLAG_DIR_DIRTY;
    96c2:	ldrb.w	r3, [r4, #51]	; 0x33
    96c6:	ldr	r0, [sp, #4]
    96c8:	orn	r3, r3, #127	; 0x7f
    96cc:	strb.w	r3, [r4, #51]	; 0x33
    96d0:	b.n	9576 <ExFatFile::write(void const*, unsigned int)+0x22>
      // lesser of space and amount to write
      if (n > toWrite) {
        n = toWrite;
      }

      if (sectorOffset == 0 && m_curPosition >= m_validLength) {
    96d2:	cmp.w	r8, #0
    96d6:	bne.n	9726 <ExFatFile::write(void const*, unsigned int)+0x1d2>
    96d8:	ldrd	r2, r3, [r4, #16]
    96dc:	ldrd	r6, r7, [r4]
        // start of new sector don't need to read into cache
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
    96e0:	cmp	r7, r3
    96e2:	it	eq
    96e4:	cmpeq	r6, r2
    96e6:	ite	cc
    96e8:	movcc	r2, #1
    96ea:	movcs	r2, #3
#endif  // USE_EXFAT_BITMAP_CACHE
  }
  void dataCacheDirty() {m_dataCache.dirty();}
  void dataCacheInvalidate() {m_dataCache.invalidate();}
  uint8_t* dataCacheGet(uint32_t sector, uint8_t option) {
    return m_dataCache.get(sector, option);
    96ec:	add.w	r0, r0, #524	; 0x20c
    96f0:	bl	8868 <FsCache::get(unsigned long, unsigned char)>
      } else {
        // rewrite part of sector
        cacheOption = FsCache::CACHE_FOR_WRITE;
      }
      cache = m_vol->dataCacheGet(sector, cacheOption);
      if (!cache) {
    96f4:	cmp	r0, #0
    96f6:	beq.w	9566 <ExFatFile::write(void const*, unsigned int)+0x12>
             (clusterOffset >> m_vol->bytesPerSectorShift());

    if (sectorOffset != 0 || toWrite < m_vol->bytesPerSector()) {
      // partial sector - must use cache
      // max space in sector
      n = m_vol->bytesPerSector() - sectorOffset;
    96fa:	rsb	r7, r8, #512	; 0x200
      if (!cache) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = cache + sectorOffset;
      memcpy(dst, src, n);
    96fe:	add	r0, r8
    9700:	mov	r1, r9
    9702:	cmp	r7, r5
    9704:	it	cs
    9706:	movcs	r7, r5
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    9708:	add	r8, r7
      if (!cache) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = cache + sectorOffset;
      memcpy(dst, src, n);
    970a:	mov	r2, r7
    970c:	bl	d064 <memcpy>
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    9710:	cmp.w	r8, #512	; 0x200
    9714:	bne.n	9670 <ExFatFile::write(void const*, unsigned int)+0x11c>
  }
  uint32_t dataCacheSector() {return m_dataCache.sector();}
  bool dataCacheSync() {return m_dataCache.sync();}
    9716:	ldr	r0, [r4, #32]
    9718:	add.w	r0, r0, #524	; 0x20c
    971c:	bl	8928 <FsCache::sync()>
        // Force write if sector is full - improves large writes.
        if (!m_vol->dataCacheSync()) {
    9720:	cmp	r0, #0
    9722:	bne.n	9670 <ExFatFile::write(void const*, unsigned int)+0x11c>
    9724:	b.n	9566 <ExFatFile::write(void const*, unsigned int)+0x12>
      if (sectorOffset == 0 && m_curPosition >= m_validLength) {
        // start of new sector don't need to read into cache
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
      } else {
        // rewrite part of sector
        cacheOption = FsCache::CACHE_FOR_WRITE;
    9726:	movs	r2, #1
    9728:	b.n	96ec <ExFatFile::write(void const*, unsigned int)+0x198>
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
      } else {
        if (m_firstCluster == 0) {
    972a:	ldr	r1, [r4, #28]
    972c:	cbz	r1, 976c <ExFatFile::write(void const*, unsigned int)+0x218>
            DBG_FAIL_MACRO;
            goto fail;
          }
          m_firstCluster = m_curCluster;
        } else {
          m_curCluster = m_firstCluster;
    972e:	str	r1, [r4, #24]
    9730:	b.n	9606 <ExFatFile::write(void const*, unsigned int)+0xb2>
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // use single sector write command
      n = m_vol->bytesPerSector();
      if (m_vol->dataCacheSector() == sector) {
    9732:	ldr.w	r3, [r0, #532]	; 0x214
    9736:	cmp	r1, r3
    9738:	beq.n	9780 <ExFatFile::write(void const*, unsigned int)+0x22c>
    973a:	ldr.w	r0, [r0, #1080]	; 0x438
  }
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
  }
  bool writeSector(uint32_t sector, const uint8_t* src) {
    return m_blockDev->writeSector(sector, src);
    973e:	mov	r2, r9
    9740:	ldr	r3, [r0, #0]
    9742:	ldr	r3, [r3, #24]
    9744:	blx	r3
        m_vol->dataCacheInvalidate();
      }
      if (!m_vol->writeSector(sector, src)) {
    9746:	cmp	r0, #0
    9748:	beq.w	9566 <ExFatFile::write(void const*, unsigned int)+0x12>
    974c:	mov.w	r0, #512	; 0x200
    9750:	movs	r1, #0
        goto fail;
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // use single sector write command
      n = m_vol->bytesPerSector();
    9752:	mov.w	r7, #512	; 0x200
    9756:	b.n	9674 <ExFatFile::write(void const*, unsigned int)+0x120>

        if (isContiguous()) {
          uint32_t lc = m_firstCluster;
          lc += (m_dataLength - 1) >> m_vol->bytesPerClusterShift();
          if (m_curCluster < lc) {
            m_curCluster++;
    9758:	adds	r1, #1
    975a:	str	r1, [r4, #24]
    975c:	b.n	9606 <ExFatFile::write(void const*, unsigned int)+0xb2>
            fg = 1;
          } else {
            fg = 0;
          }
        } else {
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    975e:	ldr	r2, [sp, #12]
    9760:	bl	8c4c <ExFatPartition::fatGet(unsigned long, unsigned long*)>
          if (fg < 0) {
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
        if (fg == 0) {
    9764:	cmp	r0, #0
    9766:	bne.w	9602 <ExFatFile::write(void const*, unsigned int)+0xae>
    976a:	b.n	95f8 <ExFatFile::write(void const*, unsigned int)+0xa4>
          }
        }
      } else {
        if (m_firstCluster == 0) {
          // allocate first cluster of file
          if (!addCluster()) {
    976c:	mov	r0, r4
    976e:	bl	8e0c <ExFatFile::addCluster()>
    9772:	cmp	r0, #0
    9774:	beq.w	9566 <ExFatFile::write(void const*, unsigned int)+0x12>
            DBG_FAIL_MACRO;
            goto fail;
          }
          m_firstCluster = m_curCluster;
    9778:	ldr	r1, [r4, #24]
    977a:	ldr	r0, [r4, #32]
    977c:	str	r1, [r4, #28]
    977e:	b.n	9606 <ExFatFile::write(void const*, unsigned int)+0xb2>
#else  // USE_EXFAT_BITMAP_CACHE
    return m_dataCache.sync() && syncDevice();
#endif  // USE_EXFAT_BITMAP_CACHE
  }
  void dataCacheDirty() {m_dataCache.dirty();}
  void dataCacheInvalidate() {m_dataCache.invalidate();}
    9780:	add.w	r0, r0, #524	; 0x20c
    9784:	str	r1, [sp, #8]
    9786:	bl	885c <FsCache::invalidate()>
    978a:	ldr	r0, [r4, #32]
    978c:	ldr	r1, [sp, #8]
    978e:	b.n	973a <ExFatFile::write(void const*, unsigned int)+0x1e6>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & FILE_FLAG_APPEND)) {
    if (!seekSet(m_validLength)) {
    9790:	ldrd	r2, r3, [r0, #16]
    9794:	bl	8208 <ExFatFile::seekSet(unsigned long long)>
    9798:	cmp	r0, #0
    979a:	beq.w	9566 <ExFatFile::write(void const*, unsigned int)+0x12>
    979e:	b.n	9584 <ExFatFile::write(void const*, unsigned int)+0x30>
  }

  if (m_curPosition > m_dataLength) {
    m_dataLength = m_curPosition;
    // update fileSize and insure sync will update dir entr
    m_flags |= FILE_FLAG_DIR_DIRTY;
    97a0:	ldrb.w	r1, [r4, #51]	; 0x33
    97a4:	ldr	r0, [sp, #4]
    97a6:	orn	r1, r1, #127	; 0x7f
      m_validLength = m_curPosition;
    }
  }

  if (m_curPosition > m_dataLength) {
    m_dataLength = m_curPosition;
    97aa:	strd	r2, r3, [r4, #8]
    // update fileSize and insure sync will update dir entr
    m_flags |= FILE_FLAG_DIR_DIRTY;
    97ae:	strb.w	r1, [r4, #51]	; 0x33
    97b2:	b.n	9576 <ExFatFile::write(void const*, unsigned int)+0x22>
    97b4:	ldr	r0, [sp, #4]
    97b6:	b.n	9576 <ExFatFile::write(void const*, unsigned int)+0x22>
    97b8:	ldrd	r2, r3, [r4]
    97bc:	b.n	96ae <ExFatFile::write(void const*, unsigned int)+0x15a>
    97be:	nop
    97c0:	.word	0x20005b20

000097c4 <FatFile::openRoot(FatVolume*) [clone .part.36]>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
    97c4:	push	{r3, r4, r5, lr}
    97c6:	mov	r5, r1
    97c8:	mov	r4, r0
  // error if file is already open
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(FatFile));
    97ca:	movs	r2, #36	; 0x24
    97cc:	movs	r1, #0
    97ce:	bl	10d7c <memset>

  m_vol = vol;
    97d2:	str	r5, [r4, #8]
  switch (vol->fatType()) {
    97d4:	ldrb	r3, [r5, #7]
    97d6:	cmp	r3, #16
    97d8:	beq.n	97ec <FatFile::openRoot(FatVolume*) [clone .part.36]+0x28>
    97da:	cmp	r3, #32
    97dc:	bne.n	97e8 <FatFile::openRoot(FatVolume*) [clone .part.36]+0x24>
  case 16:
    m_attributes = FILE_ATTR_ROOT_FIXED;
    break;

  case 32:
    m_attributes = FILE_ATTR_ROOT32;
    97de:	movs	r3, #64	; 0x40
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = FILE_FLAG_READ;
    97e0:	movs	r0, #1
  case 16:
    m_attributes = FILE_ATTR_ROOT_FIXED;
    break;

  case 32:
    m_attributes = FILE_ATTR_ROOT32;
    97e2:	strb	r3, [r4, #0]
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = FILE_FLAG_READ;
    97e4:	strb	r0, [r4, #2]
    97e6:	pop	{r3, r4, r5, pc}
  return true;

fail:
  return false;
    97e8:	movs	r0, #0
}
    97ea:	pop	{r3, r4, r5, pc}
  switch (vol->fatType()) {
#if FAT12_SUPPORT
  case 12:
#endif  // FAT12_SUPPORT
  case 16:
    m_attributes = FILE_ATTR_ROOT_FIXED;
    97ec:	movs	r3, #32
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = FILE_FLAG_READ;
    97ee:	movs	r0, #1
  switch (vol->fatType()) {
#if FAT12_SUPPORT
  case 12:
#endif  // FAT12_SUPPORT
  case 16:
    m_attributes = FILE_ATTR_ROOT_FIXED;
    97f0:	strb	r3, [r4, #0]
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = FILE_FLAG_READ;
    97f2:	strb	r0, [r4, #2]
    97f4:	pop	{r3, r4, r5, pc}
    97f6:	nop

000097f8 <FatFile::addCluster()>:
#include "FatVolume.h"
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
#if USE_FAT_FILE_FLAG_CONTIGUOUS
  uint32_t cc = m_curCluster;
    97f8:	mov	r2, r0
#include "../common/DebugMacros.h"
#include "FatFile.h"
#include "FatVolume.h"
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
    97fa:	push	{r3, r4, r5, lr}
#if USE_FAT_FILE_FLAG_CONTIGUOUS
  uint32_t cc = m_curCluster;
    97fc:	ldr.w	r5, [r2, #16]!
#include "../common/DebugMacros.h"
#include "FatFile.h"
#include "FatVolume.h"
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
    9800:	mov	r4, r0
#if USE_FAT_FILE_FLAG_CONTIGUOUS
  uint32_t cc = m_curCluster;
  if (!m_vol->allocateCluster(m_curCluster, &m_curCluster)) {
    9802:	ldr	r0, [r0, #8]
    9804:	mov	r1, r5
    9806:	bl	a6e4 <FatPartition::allocateCluster(unsigned long, unsigned long*)>
    980a:	cbz	r0, 9822 <FatFile::addCluster()+0x2a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (cc == 0) {
    980c:	cbz	r5, 9824 <FatFile::addCluster()+0x2c>
    m_flags |= FILE_FLAG_CONTIGUOUS;
  } else if (m_curCluster != (cc + 1)) {
    980e:	ldr	r3, [r4, #16]
    9810:	adds	r5, #1
    9812:	cmp	r3, r5
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
    9814:	ldrb	r3, [r4, #2]
    9816:	it	ne
    9818:	andne.w	r3, r3, #191	; 0xbf
  }
  m_flags |= FILE_FLAG_DIR_DIRTY;
    981c:	orn	r3, r3, #127	; 0x7f
    9820:	strb	r3, [r4, #2]
  return false;
#else  // USE_FAT_FILE_FLAG_CONTIGUOUS
  m_flags |= FILE_FLAG_DIR_DIRTY;
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
}
    9822:	pop	{r3, r4, r5, pc}
  if (!m_vol->allocateCluster(m_curCluster, &m_curCluster)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (cc == 0) {
    m_flags |= FILE_FLAG_CONTIGUOUS;
    9824:	ldrb	r3, [r4, #2]
    9826:	orr.w	r3, r3, #64	; 0x40
    982a:	b.n	981c <FatFile::addCluster()+0x24>

0000982c <FatFile::addDirCluster()>:
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
}
//------------------------------------------------------------------------------
// Add a cluster to a directory file and zero the cluster.
// Return with first sector of cluster in the cache.
bool FatFile::addDirCluster() {
    982c:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t sector;
  cache_t* pc;

  if (isRootFixed()) {
    9830:	ldrb	r3, [r0, #0]
    9832:	and.w	r3, r3, #32
    9836:	cbnz	r3, 9844 <FatFile::addDirCluster()+0x18>
    9838:	and.w	r4, r3, #255	; 0xff
    DBG_FAIL_MACRO;
    goto fail;
  }
  // max folder size
  if (m_curPosition >= 512UL*4095) {
    983c:	ldr	r1, [r0, #20]
    983e:	ldr	r3, [pc, #124]	; (98bc <FatFile::addDirCluster()+0x90>)
    9840:	cmp	r1, r3
    9842:	bls.n	984c <FatFile::addDirCluster()+0x20>
  // Set position to EOF to avoid inconsistent curCluster/curPosition.
  m_curPosition += m_vol->bytesPerCluster();
  return true;

fail:
  return false;
    9844:	movs	r6, #0
}
    9846:	mov	r0, r6
    9848:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    984c:	mov	r5, r0
  // max folder size
  if (m_curPosition >= 512UL*4095) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!addCluster()) {
    984e:	bl	97f8 <FatFile::addCluster()>
    9852:	mov	r6, r0
    9854:	cmp	r0, #0
    9856:	beq.n	9844 <FatFile::addDirCluster()+0x18>
    DBG_FAIL_MACRO;
    goto fail;
  }
  sector = m_vol->clusterStartSector(m_curCluster);
    9858:	ldr	r1, [r5, #16]
    985a:	ldr	r0, [r5, #8]
    985c:	bl	a600 <FatPartition::clusterStartSector(unsigned long) const>
    9860:	mov	r7, r0
  bool cacheSync() {
    return m_cache.sync() && syncDevice();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t sector, uint8_t options) {
    return m_cache.read(sector, options);
    9862:	ldr	r0, [r5, #8]
    9864:	movs	r2, #5
    9866:	mov	r1, r7
    9868:	adds	r0, #36	; 0x24
    986a:	bl	a590 <FatCache::read(unsigned long, unsigned char)>
  pc = m_vol->cacheFetchData(sector, FatCache::CACHE_RESERVE_FOR_WRITE);
  if (!pc) {
    986e:	mov	r8, r0
    9870:	cmp	r0, #0
    9872:	beq.n	9844 <FatFile::addDirCluster()+0x18>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(pc, 0, m_vol->bytesPerSector());
    9874:	mov.w	r2, #512	; 0x200
    9878:	mov	r1, r4
    987a:	bl	10d7c <memset>
  // zero rest of clusters
  for (uint8_t i = 1; i < m_vol->sectorsPerCluster(); i++) {
    987e:	ldr	r3, [r5, #8]
    9880:	ldrb	r2, [r3, #4]
    9882:	cmp	r2, #1
    9884:	bls.n	98a8 <FatFile::addDirCluster()+0x7c>
    9886:	movs	r4, #1
    9888:	b.n	9894 <FatFile::addDirCluster()+0x68>
    988a:	ldr	r3, [r5, #8]
    988c:	uxtb	r4, r4
    988e:	ldrb	r2, [r3, #4]
    9890:	cmp	r2, r4
    9892:	bls.n	98a8 <FatFile::addDirCluster()+0x7c>
    9894:	ldr	r0, [r3, #0]
  }
  bool syncDevice() {
    return m_blockDev->syncDevice();
  }
  bool writeSector(uint32_t sector, const uint8_t* src) {
    return m_blockDev->writeSector(sector, src);
    9896:	adds	r1, r4, r7
    9898:	mov	r2, r8
    989a:	adds	r4, #1
    989c:	ldr	r3, [r0, #0]
    989e:	ldr	r3, [r3, #24]
    98a0:	blx	r3
    if (!m_vol->writeSector(sector + i, pc->data)) {
    98a2:	cmp	r0, #0
    98a4:	bne.n	988a <FatFile::addDirCluster()+0x5e>
    98a6:	b.n	9844 <FatFile::addDirCluster()+0x18>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Set position to EOF to avoid inconsistent curCluster/curPosition.
  m_curPosition += m_vol->bytesPerCluster();
    98a8:	ldrb	r3, [r3, #6]
    98aa:	mov.w	r2, #512	; 0x200
    98ae:	ldr	r1, [r5, #20]
    98b0:	lsl.w	r3, r2, r3
    98b4:	uxtah	r3, r1, r3
    98b8:	str	r3, [r5, #20]
    98ba:	b.n	9846 <FatFile::addDirCluster()+0x1a>
    98bc:	.word	0x001ffdff

000098c0 <FatFile::cacheDirEntry(unsigned char)>:
  return false;
}
//------------------------------------------------------------------------------
// cache a file's directory entry
// return pointer to cached entry or null for failure
DirFat_t* FatFile::cacheDirEntry(uint8_t action) {
    98c0:	push	{r4, lr}
    98c2:	mov	r4, r0
  bool cacheSync() {
    return m_cache.sync() && syncDevice();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t sector, uint8_t options) {
    return m_cache.read(sector, options);
    98c4:	ldr	r0, [r0, #8]
    98c6:	mov	r2, r1
    98c8:	adds	r0, #36	; 0x24
    98ca:	ldr	r1, [r4, #24]
    98cc:	bl	a590 <FatCache::read(unsigned long, unsigned char)>
  cache_t* pc;
  pc = m_vol->cacheFetchData(m_dirSector, action);
  if (!pc) {
    98d0:	cbz	r0, 98dc <FatFile::cacheDirEntry(unsigned char)+0x1c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  return pc->dir + (m_dirIndex & 0XF);
    98d2:	ldrh	r3, [r4, #4]
    98d4:	and.w	r3, r3, #15
    98d8:	add.w	r0, r0, r3, lsl #5

fail:
  return nullptr;
}
    98dc:	pop	{r4, pc}
    98de:	nop

000098e0 <FatFile::sync() [clone .part.40]>:
fail:
  m_curCluster = tmp;
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
    98e0:	push	{r4, r5, lr}
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    98e2:	ldrsb.w	r3, [r0, #2]
fail:
  m_curCluster = tmp;
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
    98e6:	sub	sp, #12
    98e8:	mov	r4, r0
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    98ea:	cmp	r3, #0
    98ec:	blt.n	9922 <FatFile::sync() [clone .part.40]+0x42>
      setLe16(dir->modifyTime, time);
    }
    // clear directory dirty
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
  }
  if (m_vol->cacheSync()) {
    98ee:	ldr	r5, [r4, #8]
  cache_t* cacheFetchFat(uint32_t sector, uint8_t options) {
    return m_fatCache.read(sector,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    98f0:	add.w	r0, r5, #36	; 0x24
    98f4:	bl	a5f0 <FatCache::sync()>
    98f8:	cbnz	r0, 9908 <FatFile::sync() [clone .part.40]+0x28>
    return true;
  }
  DBG_FAIL_MACRO;

fail:
  m_error |= WRITE_ERROR;
    98fa:	ldrb	r3, [r4, #1]
  return false;
    98fc:	movs	r0, #0
    return true;
  }
  DBG_FAIL_MACRO;

fail:
  m_error |= WRITE_ERROR;
    98fe:	orr.w	r3, r3, #1
    9902:	strb	r3, [r4, #1]
  return false;
}
    9904:	add	sp, #12
    9906:	pop	{r4, r5, pc}
    9908:	add.w	r0, r5, #560	; 0x230
    990c:	bl	a5f0 <FatCache::sync()>
    9910:	cmp	r0, #0
    9912:	beq.n	98fa <FatFile::sync() [clone .part.40]+0x1a>
    9914:	ldr	r0, [r5, #0]
  // sector I/O functions.
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
  }
  bool syncDevice() {
    return m_blockDev->syncDevice();
    9916:	ldr	r3, [r0, #0]
    9918:	ldr	r3, [r3, #20]
    991a:	blx	r3
  cache_t* cacheFetchFat(uint32_t sector, uint8_t options) {
    return m_fatCache.read(sector,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    991c:	cmp	r0, #0
    991e:	beq.n	98fa <FatFile::sync() [clone .part.40]+0x1a>
    9920:	b.n	9904 <FatFile::sync() [clone .part.40]+0x24>
  uint8_t ms10;
  if (!isOpen()) {
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    DirFat_t* dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
    9922:	movs	r1, #1
    9924:	bl	98c0 <FatFile::cacheDirEntry(unsigned char)>
    // check for deleted by another open file object
    if (!dir || dir->name[0] == FAT_NAME_DELETED) {
    9928:	mov	r5, r0
    992a:	cmp	r0, #0
    992c:	beq.n	98fa <FatFile::sync() [clone .part.40]+0x1a>
    992e:	ldrb	r3, [r0, #0]
    9930:	cmp	r3, #229	; 0xe5
    9932:	beq.n	98fa <FatFile::sync() [clone .part.40]+0x1a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // do not set filesize for dir files
    if (isFile()) {
    9934:	ldrb	r3, [r4, #0]
    9936:	lsls	r3, r3, #28
    9938:	bpl.n	993e <FatFile::sync() [clone .part.40]+0x5e>
      setLe32(dir->fileSize, m_fileSize);
    993a:	ldr	r3, [r4, #28]
}

inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
    993c:	str	r3, [r0, #28]
    }

    // update first cluster fields
    setLe16(dir->firstClusterLow, m_firstCluster & 0XFFFF);
    993e:	ldr	r3, [r4, #32]
    setLe16(dir->firstClusterHigh, m_firstCluster >> 16);

    // set modify time if user supplied a callback date/time function
    if (FsDateTime::callback) {
    9940:	ldr	r1, [pc, #44]	; (9970 <FatFile::sync() [clone .part.40]+0x90>)
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    9942:	lsrs	r2, r3, #16
    9944:	strh	r3, [r5, #26]
    9946:	ldr	r3, [r1, #0]
    9948:	strh	r2, [r5, #20]
    994a:	cbz	r3, 9966 <FatFile::sync() [clone .part.40]+0x86>
      FsDateTime::callback(&date, &time, &ms10);
    994c:	add.w	r2, sp, #3
    9950:	add.w	r1, sp, #6
    9954:	add	r0, sp, #4
    9956:	blx	r3
      setLe16(dir->modifyDate, date);
    9958:	ldrh.w	r3, [sp, #4]
    995c:	ldrh.w	r2, [sp, #6]
    9960:	strh	r3, [r5, #24]
    9962:	strh	r3, [r5, #18]
    9964:	strh	r2, [r5, #22]
      setLe16(dir->accessDate, date);
      setLe16(dir->modifyTime, time);
    }
    // clear directory dirty
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    9966:	ldrb	r3, [r4, #2]
    9968:	and.w	r3, r3, #127	; 0x7f
    996c:	strb	r3, [r4, #2]
    996e:	b.n	98ee <FatFile::sync() [clone .part.40]+0xe>
    9970:	.word	0x20005b20

00009974 <FatFile::close()>:

fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
    9974:	push	{r4, lr}
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    9976:	ldrb	r3, [r0, #0]

fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
    9978:	mov	r4, r0
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    997a:	cbnz	r3, 9986 <FatFile::close()+0x12>
  return nullptr;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
  bool rtn = sync();
  m_attributes = FILE_ATTR_CLOSED;
    997c:	movs	r3, #0
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    return true;
    997e:	movs	r0, #1
  return nullptr;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
  bool rtn = sync();
  m_attributes = FILE_ATTR_CLOSED;
    9980:	strb	r3, [r4, #0]
  m_flags = 0;
    9982:	strb	r3, [r4, #2]
  return rtn;
}
    9984:	pop	{r4, pc}
    9986:	bl	98e0 <FatFile::sync() [clone .part.40]>
  return nullptr;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
  bool rtn = sync();
  m_attributes = FILE_ATTR_CLOSED;
    998a:	movs	r3, #0
    998c:	strb	r3, [r4, #0]
  m_flags = 0;
    998e:	strb	r3, [r4, #2]
  return rtn;
}
    9990:	pop	{r4, pc}
    9992:	nop

00009994 <FatFile::mkdir(FatFile*, fname_t*)>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::mkdir(FatFile* parent, fname_t* fname) {
    9994:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t sector;
  DirFat_t dot;
  DirFat_t* dir;
  cache_t* pc;

  if (!parent->isDir()) {
    9998:	ldrb	r5, [r1, #0]

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::mkdir(FatFile* parent, fname_t* fname) {
    999a:	sub	sp, #32
  uint32_t sector;
  DirFat_t dot;
  DirFat_t* dir;
  cache_t* pc;

  if (!parent->isDir()) {
    999c:	tst.w	r5, #112	; 0x70
    99a0:	bne.n	99aa <FatFile::mkdir(FatFile*, fname_t*)+0x16>
  // write first sector
  return m_vol->cacheSync();

fail:
  return false;
}
    99a2:	movs	r0, #0
    99a4:	add	sp, #32
    99a6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (!parent->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // create a normal file
  if (!open(parent, fname, O_CREAT | O_EXCL | O_RDWR)) {
    99aa:	movw	r3, #2562	; 0xa02
    99ae:	mov	r4, r0
    99b0:	mov	r5, r1
    99b2:	bl	af68 <FatFile::open(FatFile*, fname_t*, int)>
    99b6:	cmp	r0, #0
    99b8:	beq.n	99a2 <FatFile::mkdir(FatFile*, fname_t*)+0xe>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // convert file to directory
  m_flags = FILE_FLAG_READ;
    99ba:	movs	r2, #1
  m_attributes = FILE_ATTR_SUBDIR;
    99bc:	movs	r3, #16

  // allocate and zero first cluster
  if (!addDirCluster()) {
    99be:	mov	r0, r4
  if (!open(parent, fname, O_CREAT | O_EXCL | O_RDWR)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // convert file to directory
  m_flags = FILE_FLAG_READ;
    99c0:	strb	r2, [r4, #2]
  m_attributes = FILE_ATTR_SUBDIR;
    99c2:	strb	r3, [r4, #0]

  // allocate and zero first cluster
  if (!addDirCluster()) {
    99c4:	bl	982c <FatFile::addDirCluster()>
    99c8:	cmp	r0, #0
    99ca:	beq.n	99a2 <FatFile::mkdir(FatFile*, fname_t*)+0xe>
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_firstCluster = m_curCluster;
    99cc:	ldr	r2, [r4, #16]
bool FatFile::seekSet(uint32_t pos) {
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
  // error if file not open
  if (!isOpen()) {
    99ce:	ldrb	r3, [r4, #0]
  // allocate and zero first cluster
  if (!addDirCluster()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_firstCluster = m_curCluster;
    99d0:	str	r2, [r4, #32]
bool FatFile::seekSet(uint32_t pos) {
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
  // error if file not open
  if (!isOpen()) {
    99d2:	cmp	r3, #0
    99d4:	bne.n	9ad0 <FatFile::mkdir(FatFile*, fname_t*)+0x13c>
  if (!sync()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // cache entry - should already be in cache due to sync() call
  dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
    99d6:	movs	r1, #1
    99d8:	mov	r0, r4
    99da:	bl	98c0 <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    99de:	mov	r7, r0
    99e0:	cmp	r0, #0
    99e2:	beq.n	99a2 <FatFile::mkdir(FatFile*, fname_t*)+0xe>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // change directory entry  attribute
  dir->attributes = FAT_ATTRIB_DIRECTORY;
    99e4:	movs	r3, #16

  // make entry for '.'
  memcpy(&dot, dir, sizeof(dot));
    99e6:	ldr	r0, [r0, #0]
    99e8:	ldr	r1, [r7, #4]
    99ea:	mov	lr, sp
  if (!dir) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // change directory entry  attribute
  dir->attributes = FAT_ATTRIB_DIRECTORY;
    99ec:	strb	r3, [r7, #11]

  // make entry for '.'
  memcpy(&dot, dir, sizeof(dot));
  dot.name[0] = '.';
    99ee:	mov.w	ip, #46	; 0x2e
  }
  // change directory entry  attribute
  dir->attributes = FAT_ATTRIB_DIRECTORY;

  // make entry for '.'
  memcpy(&dot, dir, sizeof(dot));
    99f2:	ldr	r2, [r7, #8]
  dot.name[0] = '.';
    99f4:	add	r6, sp, #32
  }
  // change directory entry  attribute
  dir->attributes = FAT_ATTRIB_DIRECTORY;

  // make entry for '.'
  memcpy(&dot, dir, sizeof(dot));
    99f6:	ldr	r3, [r7, #12]
    99f8:	ldrh.w	r8, [r7, #20]
    99fc:	stmia.w	lr!, {r0, r1, r2, r3}
    9a00:	ldr	r2, [r7, #24]
    9a02:	ldr	r3, [r7, #28]
    9a04:	ldr	r0, [r7, #16]
    9a06:	ldr	r1, [r7, #20]
  dot.name[0] = '.';
    9a08:	strb.w	ip, [r6, #-32]!
    9a0c:	add.w	ip, sp, #10
  }
  // change directory entry  attribute
  dir->attributes = FAT_ATTRIB_DIRECTORY;

  // make entry for '.'
  memcpy(&dot, dir, sizeof(dot));
    9a10:	ldrh	r7, [r7, #26]
    9a12:	stmia.w	lr!, {r0, r1, r2, r3}
    9a16:	mov	r3, r6
  dot.name[0] = '.';
  for (uint8_t i = 1; i < 11; i++) {
    dot.name[i] = ' ';
    9a18:	movs	r2, #32
    9a1a:	strb.w	r2, [r3, #1]!
  dir->attributes = FAT_ATTRIB_DIRECTORY;

  // make entry for '.'
  memcpy(&dot, dir, sizeof(dot));
  dot.name[0] = '.';
  for (uint8_t i = 1; i < 11; i++) {
    9a1e:	cmp	ip, r3
    9a20:	bne.n	9a1a <FatFile::mkdir(FatFile*, fname_t*)+0x86>
    dot.name[i] = ' ';
  }

  // cache sector for '.'  and '..'
  sector = m_vol->clusterStartSector(m_firstCluster);
    9a22:	ldr	r1, [r4, #32]
    9a24:	ldr	r0, [r4, #8]
    9a26:	bl	a600 <FatPartition::clusterStartSector(unsigned long) const>
  bool cacheSync() {
    return m_cache.sync() && syncDevice();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t sector, uint8_t options) {
    return m_cache.read(sector, options);
    9a2a:	ldr	r3, [r4, #8]
    9a2c:	mov	r1, r0
    9a2e:	movs	r2, #1
    9a30:	add.w	r0, r3, #36	; 0x24
    9a34:	bl	a590 <FatCache::read(unsigned long, unsigned char)>
  pc = m_vol->cacheFetchData(sector, FatCache::CACHE_FOR_WRITE);
  if (!pc) {
    9a38:	mov	lr, r0
    9a3a:	cmp	r0, #0
    9a3c:	beq.n	99a2 <FatFile::mkdir(FatFile*, fname_t*)+0xe>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // copy '.' to sector
  memcpy(&pc->dir[0], &dot, sizeof(dot));
    9a3e:	strh.w	r8, [sp, #20]
  // make entry for '..'
  dot.name[1] = '.';
    9a42:	mov.w	r8, #46	; 0x2e
  if (!pc) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // copy '.' to sector
  memcpy(&pc->dir[0], &dot, sizeof(dot));
    9a46:	strh.w	r7, [sp, #26]
  // make entry for '..'
  dot.name[1] = '.';
  setLe16(dot.firstClusterLow, parent->m_firstCluster & 0XFFFF);
  setLe16(dot.firstClusterHigh, parent->m_firstCluster >> 16);
  // copy '..' to sector
  memcpy(&pc->dir[1], &dot, sizeof(dot));
    9a4a:	mov	r7, r6
  if (!pc) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // copy '.' to sector
  memcpy(&pc->dir[0], &dot, sizeof(dot));
    9a4c:	ldmia	r6!, {r0, r1, r2, r3}
    9a4e:	str.w	r0, [lr]
    9a52:	str.w	r1, [lr, #4]
    9a56:	str.w	r2, [lr, #8]
    9a5a:	str.w	r3, [lr, #12]
  // make entry for '..'
  dot.name[1] = '.';
    9a5e:	strb.w	r8, [sp, #1]
  if (!pc) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // copy '.' to sector
  memcpy(&pc->dir[0], &dot, sizeof(dot));
    9a62:	ldmia	r6!, {r0, r1, r2, r3}
    9a64:	str.w	r0, [lr, #16]
    9a68:	str.w	r1, [lr, #20]
    9a6c:	str.w	r2, [lr, #24]
    9a70:	str.w	r3, [lr, #28]
  // make entry for '..'
  dot.name[1] = '.';
  setLe16(dot.firstClusterLow, parent->m_firstCluster & 0XFFFF);
    9a74:	ldr	r3, [r5, #32]
  setLe16(dot.firstClusterHigh, parent->m_firstCluster >> 16);
  // copy '..' to sector
  memcpy(&pc->dir[1], &dot, sizeof(dot));
    9a76:	lsrs	r2, r3, #16
    9a78:	strh.w	r3, [sp, #26]
    9a7c:	strh.w	r2, [sp, #20]
    9a80:	ldmia	r7!, {r0, r1, r2, r3}
    9a82:	str.w	r0, [lr, #32]
    9a86:	str.w	r1, [lr, #36]	; 0x24
    9a8a:	str.w	r2, [lr, #40]	; 0x28
    9a8e:	str.w	r3, [lr, #44]	; 0x2c
    9a92:	ldmia	r7!, {r0, r1, r2, r3}
    9a94:	str.w	r0, [lr, #48]	; 0x30
    9a98:	str.w	r1, [lr, #52]	; 0x34
    9a9c:	str.w	r2, [lr, #56]	; 0x38
    9aa0:	str.w	r3, [lr, #60]	; 0x3c
  // write first sector
  return m_vol->cacheSync();
    9aa4:	ldr	r4, [r4, #8]
  cache_t* cacheFetchFat(uint32_t sector, uint8_t options) {
    return m_fatCache.read(sector,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    9aa6:	add.w	r0, r4, #36	; 0x24
    9aaa:	bl	a5f0 <FatCache::sync()>
    9aae:	cmp	r0, #0
    9ab0:	beq.w	99a2 <FatFile::mkdir(FatFile*, fname_t*)+0xe>
    9ab4:	add.w	r0, r4, #560	; 0x230
    9ab8:	bl	a5f0 <FatCache::sync()>
    9abc:	cmp	r0, #0
    9abe:	beq.w	99a2 <FatFile::mkdir(FatFile*, fname_t*)+0xe>
    9ac2:	ldr	r0, [r4, #0]
  // sector I/O functions.
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
  }
  bool syncDevice() {
    return m_blockDev->syncDevice();
    9ac4:	ldr	r3, [r0, #0]
    9ac6:	ldr	r3, [r3, #20]

fail:
  return false;
}
    9ac8:	add	sp, #32
    9aca:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    9ace:	bx	r3
  if (!isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    9ad0:	ldr	r3, [r4, #20]
    9ad2:	cbz	r3, 9ae2 <FatFile::mkdir(FatFile*, fname_t*)+0x14e>
    }
  }

done:
  m_curPosition = pos;
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    9ad4:	ldrb	r3, [r4, #2]
  if (pos == m_curPosition) {
    return true;
  }
  if (pos == 0) {
    // set position to start of file
    m_curCluster = 0;
    9ad6:	movs	r2, #0
    }
  }

done:
  m_curPosition = pos;
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    9ad8:	bic.w	r3, r3, #32
  if (pos == m_curPosition) {
    return true;
  }
  if (pos == 0) {
    // set position to start of file
    m_curCluster = 0;
    9adc:	str	r2, [r4, #16]
      goto fail;
    }
  }

done:
  m_curPosition = pos;
    9ade:	str	r2, [r4, #20]
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    9ae0:	strb	r3, [r4, #2]
    9ae2:	mov	r0, r4
    9ae4:	bl	98e0 <FatFile::sync() [clone .part.40]>
  }
  m_firstCluster = m_curCluster;
  // Set to start of dir
  rewind();
  // force entry to device
  if (!sync()) {
    9ae8:	cmp	r0, #0
    9aea:	beq.w	99a2 <FatFile::mkdir(FatFile*, fname_t*)+0xe>
    9aee:	b.n	99d6 <FatFile::mkdir(FatFile*, fname_t*)+0x42>

00009af0 <FatFile::mkdir(FatFile*, char const*, bool)>:
void FatFile::fsetpos(const fspos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
}
//------------------------------------------------------------------------------
bool FatFile::mkdir(FatFile* parent, const char* path, bool pFlag) {
    9af0:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9af4:	mov	r6, r0
    9af6:	sub	sp, #72	; 0x48
    9af8:	movs	r0, #0
    9afa:	mov	r4, r1
  fname_t fname;
  FatFile tmpDir;

  if (isOpen() || !parent->isDir()) {
    9afc:	ldrb	r1, [r6, #0]
void FatFile::fsetpos(const fspos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
}
//------------------------------------------------------------------------------
bool FatFile::mkdir(FatFile* parent, const char* path, bool pFlag) {
    9afe:	str	r2, [sp, #4]
    9b00:	strb.w	r0, [sp, #36]	; 0x24
    9b04:	strb.w	r0, [sp, #37]	; 0x25
    9b08:	strb.w	r0, [sp, #38]	; 0x26
  fname_t fname;
  FatFile tmpDir;

  if (isOpen() || !parent->isDir()) {
    9b0c:	cbnz	r1, 9b18 <FatFile::mkdir(FatFile*, char const*, bool)+0x28>
    9b0e:	mov	r8, r3
    9b10:	ldrb	r3, [r4, #0]
    9b12:	tst.w	r3, #112	; 0x70
    9b16:	bne.n	9b20 <FatFile::mkdir(FatFile*, char const*, bool)+0x30>
    close();
  }
  return mkdir(parent, &fname);

fail:
  return false;
    9b18:	movs	r0, #0
}
    9b1a:	add	sp, #72	; 0x48
    9b1c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

  if (isOpen() || !parent->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    9b20:	ldrb	r3, [r2, #0]
    9b22:	mov	r0, r2
    9b24:	cmp	r3, #47	; 0x2f
    9b26:	beq.n	9b84 <FatFile::mkdir(FatFile*, char const*, bool)+0x94>
      goto fail;
    }
    if (!*path) {
      break;
    }
    if (!open(parent, &fname, O_RDONLY)) {
    9b28:	movs	r7, #0
      goto fail;
    }
    parent = &tmpDir;
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
    9b2a:	add	r2, sp, #4
    9b2c:	add	r1, sp, #12
    9b2e:	bl	aafc <FatFile::parsePathName(char const*, fname_t*, char const**)>
      goto fail;
    }
    if (!*path) {
      break;
    }
    if (!open(parent, &fname, O_RDONLY)) {
    9b32:	add	r2, sp, #12
    9b34:	mov	r1, r4
    9b36:	movs	r3, #0
      goto fail;
    }
    parent = &tmpDir;
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
    9b38:	cmp	r0, #0
    9b3a:	beq.n	9b18 <FatFile::mkdir(FatFile*, char const*, bool)+0x28>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!*path) {
    9b3c:	ldr	r5, [sp, #4]
      break;
    }
    if (!open(parent, &fname, O_RDONLY)) {
    9b3e:	mov	r0, r6
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!*path) {
    9b40:	ldrb	r5, [r5, #0]
    9b42:	cmp	r5, #0
    9b44:	beq.n	9ba8 <FatFile::mkdir(FatFile*, char const*, bool)+0xb8>
      break;
    }
    if (!open(parent, &fname, O_RDONLY)) {
    9b46:	bl	af68 <FatFile::open(FatFile*, fname_t*, int)>
    9b4a:	cbnz	r0, 9b60 <FatFile::mkdir(FatFile*, char const*, bool)+0x70>
      if (!pFlag || !mkdir(parent, &fname)) {
    9b4c:	cmp.w	r8, #0
    9b50:	beq.n	9b18 <FatFile::mkdir(FatFile*, char const*, bool)+0x28>
    9b52:	mov	r1, r4
    9b54:	add	r2, sp, #12
    9b56:	mov	r0, r6
    9b58:	bl	9994 <FatFile::mkdir(FatFile*, fname_t*)>
    9b5c:	cmp	r0, #0
    9b5e:	beq.n	9b18 <FatFile::mkdir(FatFile*, char const*, bool)+0x28>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    tmpDir = *this;
    9b60:	mov	r5, r6
    9b62:	add	r4, sp, #36	; 0x24
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    9b64:	ldrb.w	lr, [r6]
      if (!pFlag || !mkdir(parent, &fname)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    tmpDir = *this;
    9b68:	ldmia	r5!, {r0, r1, r2, r3}
    9b6a:	stmia	r4!, {r0, r1, r2, r3}
    9b6c:	ldmia	r5!, {r0, r1, r2, r3}
    9b6e:	ldr	r5, [r5, #0]
    9b70:	stmia	r4!, {r0, r1, r2, r3}
    9b72:	str	r5, [r4, #0]
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    9b74:	cmp.w	lr, #0
    9b78:	bne.n	9ba0 <FatFile::mkdir(FatFile*, char const*, bool)+0xb0>
  return nullptr;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
  bool rtn = sync();
  m_attributes = FILE_ATTR_CLOSED;
    9b7a:	strb	r7, [r6, #0]
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    tmpDir = *this;
    parent = &tmpDir;
    9b7c:	add	r4, sp, #36	; 0x24
}
//------------------------------------------------------------------------------
bool FatFile::close() {
  bool rtn = sync();
  m_attributes = FILE_ATTR_CLOSED;
  m_flags = 0;
    9b7e:	strb	r7, [r6, #2]
    9b80:	ldr	r0, [sp, #4]
    9b82:	b.n	9b2a <FatFile::mkdir(FatFile*, char const*, bool)+0x3a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
      path++;
    9b84:	adds	r0, #1
    9b86:	str	r0, [sp, #4]
  if (isOpen() || !parent->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
    9b88:	ldrb	r3, [r0, #0]
    9b8a:	cmp	r3, #47	; 0x2f
    9b8c:	beq.n	9b84 <FatFile::mkdir(FatFile*, char const*, bool)+0x94>
    9b8e:	ldr	r1, [r4, #8]
    9b90:	add	r0, sp, #36	; 0x24
    9b92:	bl	97c4 <FatFile::openRoot(FatVolume*) [clone .part.36]>
      path++;
    }
    if (!tmpDir.openRoot(parent->m_vol)) {
    9b96:	cmp	r0, #0
    9b98:	beq.n	9b18 <FatFile::mkdir(FatFile*, char const*, bool)+0x28>
      DBG_FAIL_MACRO;
      goto fail;
    }
    parent = &tmpDir;
    9b9a:	add	r4, sp, #36	; 0x24
    9b9c:	ldr	r0, [sp, #4]
    9b9e:	b.n	9b28 <FatFile::mkdir(FatFile*, char const*, bool)+0x38>
    9ba0:	mov	r0, r6
    9ba2:	bl	98e0 <FatFile::sync() [clone .part.40]>
    9ba6:	b.n	9b7a <FatFile::mkdir(FatFile*, char const*, bool)+0x8a>
    }
    tmpDir = *this;
    parent = &tmpDir;
    close();
  }
  return mkdir(parent, &fname);
    9ba8:	add	r2, sp, #12
    9baa:	mov	r1, r4
    9bac:	mov	r0, r6
    9bae:	bl	9994 <FatFile::mkdir(FatFile*, fname_t*)>

fail:
  return false;
}
    9bb2:	add	sp, #72	; 0x48
    9bb4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00009bb8 <FatFile::open(FatFile*, char const*, int)>:
//------------------------------------------------------------------------------
bool FatFile::open(FatVolume* vol, const char* path, oflag_t oflag) {
  return vol && open(vol->vwd(), path, oflag);
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
    9bb8:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9bbc:	mov	r6, r0
    9bbe:	sub	sp, #72	; 0x48
    9bc0:	movs	r0, #0
    9bc2:	mov	r5, r1
  FatFile tmpDir;
  fname_t fname;

  // error if already open
  if (isOpen() || !dirFile->isDir()) {
    9bc4:	ldrb	r1, [r6, #0]
//------------------------------------------------------------------------------
bool FatFile::open(FatVolume* vol, const char* path, oflag_t oflag) {
  return vol && open(vol->vwd(), path, oflag);
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
    9bc6:	str	r2, [sp, #4]
    9bc8:	strb.w	r0, [sp, #36]	; 0x24
    9bcc:	strb.w	r0, [sp, #37]	; 0x25
    9bd0:	strb.w	r0, [sp, #38]	; 0x26
  FatFile tmpDir;
  fname_t fname;

  // error if already open
  if (isOpen() || !dirFile->isDir()) {
    9bd4:	cbnz	r1, 9be0 <FatFile::open(FatFile*, char const*, int)+0x28>
    9bd6:	mov	r8, r3
    9bd8:	ldrb	r3, [r5, #0]
    9bda:	tst.w	r3, #112	; 0x70
    9bde:	bne.n	9be8 <FatFile::open(FatFile*, char const*, int)+0x30>
    close();
  }
  return open(dirFile, &fname, oflag);

fail:
  return false;
    9be0:	movs	r0, #0
}
    9be2:	add	sp, #72	; 0x48
    9be4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  // error if already open
  if (isOpen() || !dirFile->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    9be8:	ldrb	r3, [r2, #0]
    9bea:	mov	r0, r2
    9bec:	cmp	r3, #47	; 0x2f
    9bee:	beq.n	9c44 <FatFile::open(FatFile*, char const*, int)+0x8c>
      goto fail;
    }
    if (*path == 0) {
      break;
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
    9bf0:	movs	r7, #0
    9bf2:	b.n	9bfa <FatFile::open(FatFile*, char const*, int)+0x42>
    9bf4:	ldr	r0, [sp, #4]
  return nullptr;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
  bool rtn = sync();
  m_attributes = FILE_ATTR_CLOSED;
    9bf6:	strb	r7, [r6, #0]
  m_flags = 0;
    9bf8:	strb	r7, [r6, #2]
      goto fail;
    }
    dirFile = &tmpDir;
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
    9bfa:	add	r2, sp, #4
    9bfc:	add	r1, sp, #12
    9bfe:	bl	aafc <FatFile::parsePathName(char const*, fname_t*, char const**)>
      goto fail;
    }
    if (*path == 0) {
      break;
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
    9c02:	add	r2, sp, #12
    9c04:	mov	r1, r5
    9c06:	movs	r3, #0
      goto fail;
    }
    dirFile = &tmpDir;
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
    9c08:	cmp	r0, #0
    9c0a:	beq.n	9be0 <FatFile::open(FatFile*, char const*, int)+0x28>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (*path == 0) {
    9c0c:	ldr	r4, [sp, #4]
      break;
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
    9c0e:	mov	r0, r6
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (*path == 0) {
    9c10:	ldrb	r4, [r4, #0]
    9c12:	cbz	r4, 9c62 <FatFile::open(FatFile*, char const*, int)+0xaa>
      break;
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
    9c14:	bl	af68 <FatFile::open(FatFile*, fname_t*, int)>
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
    9c18:	mov	r5, r6
    9c1a:	add	r4, sp, #36	; 0x24
      goto fail;
    }
    if (*path == 0) {
      break;
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
    9c1c:	cmp	r0, #0
    9c1e:	beq.n	9be0 <FatFile::open(FatFile*, char const*, int)+0x28>
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    9c20:	ldrb.w	lr, [r6]
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
    9c24:	ldmia	r5!, {r0, r1, r2, r3}
    9c26:	stmia	r4!, {r0, r1, r2, r3}
    9c28:	ldmia	r5!, {r0, r1, r2, r3}
    9c2a:	ldr.w	ip, [r5]
    dirFile = &tmpDir;
    9c2e:	add	r5, sp, #36	; 0x24
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
    9c30:	stmia	r4!, {r0, r1, r2, r3}
    9c32:	str.w	ip, [r4]
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    9c36:	cmp.w	lr, #0
    9c3a:	beq.n	9bf4 <FatFile::open(FatFile*, char const*, int)+0x3c>
    9c3c:	mov	r0, r6
    9c3e:	bl	98e0 <FatFile::sync() [clone .part.40]>
    9c42:	b.n	9bf4 <FatFile::open(FatFile*, char const*, int)+0x3c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
      path++;
    9c44:	adds	r0, #1
    9c46:	str	r0, [sp, #4]
  if (isOpen() || !dirFile->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
    9c48:	ldrb	r3, [r0, #0]
    9c4a:	cmp	r3, #47	; 0x2f
    9c4c:	beq.n	9c44 <FatFile::open(FatFile*, char const*, int)+0x8c>
      path++;
    }
    if (*path == 0) {
    9c4e:	cbz	r3, 9c74 <FatFile::open(FatFile*, char const*, int)+0xbc>
    9c50:	ldr	r1, [r5, #8]
    9c52:	add	r0, sp, #36	; 0x24
    9c54:	bl	97c4 <FatFile::openRoot(FatVolume*) [clone .part.36]>
      return openRoot(dirFile->m_vol);
    }
    if (!tmpDir.openRoot(dirFile->m_vol)) {
    9c58:	cmp	r0, #0
    9c5a:	beq.n	9be0 <FatFile::open(FatFile*, char const*, int)+0x28>
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile = &tmpDir;
    9c5c:	add	r5, sp, #36	; 0x24
    9c5e:	ldr	r0, [sp, #4]
    9c60:	b.n	9bf0 <FatFile::open(FatFile*, char const*, int)+0x38>
    }
    tmpDir = *this;
    dirFile = &tmpDir;
    close();
  }
  return open(dirFile, &fname, oflag);
    9c62:	mov	r3, r8
    9c64:	add	r2, sp, #12
    9c66:	mov	r1, r5
    9c68:	mov	r0, r6
    9c6a:	bl	af68 <FatFile::open(FatFile*, fname_t*, int)>

fail:
  return false;
}
    9c6e:	add	sp, #72	; 0x48
    9c70:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9c74:	ldr	r1, [r5, #8]
    9c76:	mov	r0, r6
    9c78:	bl	97c4 <FatFile::openRoot(FatVolume*) [clone .part.36]>
    9c7c:	b.n	9be2 <FatFile::open(FatFile*, char const*, int)+0x2a>
    9c7e:	nop

00009c80 <FatFile::open(FatVolume*, char const*, int)>:
bool FatFile::open(const char* path, oflag_t oflag) {
  return open(FatVolume::cwv(), path, oflag);
}
//------------------------------------------------------------------------------
bool FatFile::open(FatVolume* vol, const char* path, oflag_t oflag) {
  return vol && open(vol->vwd(), path, oflag);
    9c80:	cbz	r1, 9c8a <FatFile::open(FatVolume*, char const*, int)+0xa>
    9c82:	addw	r1, r1, #1084	; 0x43c
    9c86:	b.w	9bb8 <FatFile::open(FatFile*, char const*, int)>
}
    9c8a:	mov	r0, r1
    9c8c:	bx	lr
    9c8e:	nop

00009c90 <FatFile::openRoot(FatVolume*)>:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
  // error if file is already open
  if (isOpen()) {
    9c90:	ldrb	r3, [r0, #0]
    9c92:	cbz	r3, 9c98 <FatFile::openRoot(FatVolume*)+0x8>
  m_flags = FILE_FLAG_READ;
  return true;

fail:
  return false;
}
    9c94:	movs	r0, #0
    9c96:	bx	lr
    9c98:	b.w	97c4 <FatFile::openRoot(FatVolume*) [clone .part.36]>

00009c9c <FatFile::read(void*, unsigned int)>:
  m_curPosition = curPosition;
  m_curCluster = curCluster;
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
    9c9c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  size_t toRead;
  uint32_t sector;  // raw device sector number
  cache_t* pc;

  // error if not open for read
  if (!isReadable()) {
    9ca0:	ldrb	r3, [r0, #2]
  m_curPosition = curPosition;
  m_curCluster = curCluster;
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
    9ca2:	sub	sp, #12
    9ca4:	mov	r5, r0
  size_t toRead;
  uint32_t sector;  // raw device sector number
  cache_t* pc;

  // error if not open for read
  if (!isReadable()) {
    9ca6:	lsls	r7, r3, #31
    9ca8:	bpl.w	9dc4 <FatFile::read(void*, unsigned int)+0x128>
    9cac:	mov	r7, r1
    9cae:	ldrb	r1, [r0, #0]
    9cb0:	mov	r9, r2
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (isFile()) {
    9cb2:	lsls	r6, r1, #28
    9cb4:	bmi.w	9dd6 <FatFile::read(void*, unsigned int)+0x13a>
    uint32_t tmp32 = m_fileSize - m_curPosition;
    if (nbyte >= tmp32) {
      nbyte = tmp32;
    }
  } else if (isRootFixed()) {
    9cb8:	lsls	r4, r1, #26
    9cba:	bpl.n	9cce <FatFile::read(void*, unsigned int)+0x32>
    uint16_t tmp16 = 32*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
    9cbc:	ldr	r2, [r0, #8]
    if (nbyte > tmp16) {
    9cbe:	ldr	r3, [r0, #20]
    9cc0:	ldrh	r2, [r2, #8]
    9cc2:	rsb	r3, r3, r2, lsl #5
    9cc6:	uxth	r3, r3
    9cc8:	cmp	r9, r3
    9cca:	it	cs
    9ccc:	movcs	r9, r3
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
    9cce:	cmp.w	r9, #0
    9cd2:	beq.w	9e22 <FatFile::read(void*, unsigned int)+0x186>
    9cd6:	ldr	r3, [r5, #20]
    size_t n;
    offset = m_curPosition & m_vol->sectorMask();  // offset in sector
    if (isRootFixed()) {
    9cd8:	lsls	r0, r1, #26
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
    9cda:	mov	r6, r9
    9cdc:	mov.w	r8, #0
        } else if (isFile() && isContiguous()) {
          m_curCluster++;
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    9ce0:	add.w	sl, r5, #16
    }
  }
  toRead = nbyte;
  while (toRead) {
    size_t n;
    offset = m_curPosition & m_vol->sectorMask();  // offset in sector
    9ce4:	ldr	r2, [r5, #8]
    9ce6:	ubfx	r4, r3, #0, #9
    if (isRootFixed()) {
    9cea:	bpl.n	9d6a <FatFile::read(void*, unsigned int)+0xce>
      sector = m_vol->rootDirStart()
               + (m_curPosition >> m_vol->bytesPerSectorShift());
    9cec:	ldr	r1, [r2, #32]
    9cee:	add.w	r1, r1, r3, lsr #9
        }
      }
      sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
    }
    if (offset != 0 || toRead < m_vol->bytesPerSector()
        || sector == m_vol->cacheSectorNumber()) {
    9cf2:	cmp	r4, #0
    9cf4:	bne.n	9d98 <FatFile::read(void*, unsigned int)+0xfc>
          }
        }
      }
      sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
    }
    if (offset != 0 || toRead < m_vol->bytesPerSector()
    9cf6:	cmp.w	r6, #512	; 0x200
    9cfa:	bcc.n	9d98 <FatFile::read(void*, unsigned int)+0xfc>
    9cfc:	ldr	r3, [r2, #44]	; 0x2c
        || sector == m_vol->cacheSectorNumber()) {
    9cfe:	cmp	r1, r3
    9d00:	beq.n	9d98 <FatFile::read(void*, unsigned int)+0xfc>
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_SECTOR_IO
    } else if (toRead >= 2*m_vol->bytesPerSector()) {
    9d02:	cmp.w	r6, #1024	; 0x400
    9d06:	bcc.n	9df8 <FatFile::read(void*, unsigned int)+0x15c>
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
      if (!isRootFixed()) {
    9d08:	ldrb	r0, [r5, #0]
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_SECTOR_IO
    } else if (toRead >= 2*m_vol->bytesPerSector()) {
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
    9d0a:	mov.w	fp, r6, lsr #9
      if (!isRootFixed()) {
    9d0e:	lsls	r0, r0, #26
    9d10:	bmi.n	9d1e <FatFile::read(void*, unsigned int)+0x82>
        uint32_t mb = m_vol->sectorsPerCluster() - sectorOfCluster;
    9d12:	ldrb	r0, [r2, #4]
    9d14:	rsb	r0, r8, r0
    9d18:	cmp	fp, r0
    9d1a:	it	cs
    9d1c:	movcs	fp, r0
        }
      }
      n = ns << m_vol->bytesPerSectorShift();
      // Check for cache sector in read range.
      if (sector <= m_vol->cacheSectorNumber()
          && sector < (m_vol->cacheSectorNumber() + ns)) {
    9d1e:	cmp	r1, r3
        uint32_t mb = m_vol->sectorsPerCluster() - sectorOfCluster;
        if (mb < ns) {
          ns = mb;
        }
      }
      n = ns << m_vol->bytesPerSectorShift();
    9d20:	mov.w	r4, fp, lsl #9
      // Check for cache sector in read range.
      if (sector <= m_vol->cacheSectorNumber()
          && sector < (m_vol->cacheSectorNumber() + ns)) {
    9d24:	bhi.n	9d3e <FatFile::read(void*, unsigned int)+0xa2>
    9d26:	add	r3, fp
    9d28:	cmp	r1, r3
    9d2a:	bcs.n	9d3e <FatFile::read(void*, unsigned int)+0xa2>
  }
  void cacheInvalidate() {
    m_cache.invalidate();
  }
  bool cacheSyncData() {
    return m_cache.sync();
    9d2c:	add.w	r0, r2, #36	; 0x24
    9d30:	str	r1, [sp, #4]
    9d32:	bl	a5f0 <FatCache::sync()>
        // Flush cache if cache sector is in the range.
        if (!m_vol->cacheSyncData()) {
    9d36:	cmp	r0, #0
    9d38:	beq.n	9dc4 <FatFile::read(void*, unsigned int)+0x128>
    9d3a:	ldr	r2, [r5, #8]
    9d3c:	ldr	r1, [sp, #4]
    9d3e:	ldr	r0, [r2, #0]
  bool writeSector(uint32_t sector, const uint8_t* src) {
    return m_blockDev->writeSector(sector, src);
  }
#if USE_MULTI_SECTOR_IO
  bool readSectors(uint32_t sector, uint8_t* dst, size_t ns) {
    return m_blockDev->readSectors(sector, dst, ns);
    9d40:	mov	r3, fp
    9d42:	mov	r2, r7
    9d44:	ldr.w	lr, [r0]
    9d48:	ldr.w	fp, [lr, #12]
    9d4c:	blx	fp
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
      if (!m_vol->readSectors(sector, dst, ns)) {
    9d4e:	cmp	r0, #0
    9d50:	beq.n	9dc4 <FatFile::read(void*, unsigned int)+0x128>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    m_curPosition += n;
    9d52:	ldr	r3, [r5, #20]
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
    9d54:	subs	r6, r6, r4
      if (!m_vol->readSector(sector, dst)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    9d56:	add	r7, r4
    m_curPosition += n;
    9d58:	add	r3, r4
    9d5a:	str	r3, [r5, #20]
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
    9d5c:	beq.n	9e22 <FatFile::read(void*, unsigned int)+0x186>
    9d5e:	ldrb	r1, [r5, #0]
    size_t n;
    offset = m_curPosition & m_vol->sectorMask();  // offset in sector
    9d60:	ubfx	r4, r3, #0, #9
    9d64:	ldr	r2, [r5, #8]
    if (isRootFixed()) {
    9d66:	lsls	r0, r1, #26
    9d68:	bmi.n	9cec <FatFile::read(void*, unsigned int)+0x50>
  }
  //----------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t sectorOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterSectorMask;
    9d6a:	ldrb.w	r8, [r2, #5]
    9d6e:	and.w	r8, r8, r3, lsr #9
      sector = m_vol->rootDirStart()
               + (m_curPosition >> m_vol->bytesPerSectorShift());
    } else {
      sectorOfCluster = m_vol->sectorOfCluster(m_curPosition);
      if (offset == 0 && sectorOfCluster == 0) {
    9d72:	cmp	r4, #0
    9d74:	bne.n	9df4 <FatFile::read(void*, unsigned int)+0x158>
    9d76:	cmp.w	r8, #0
    9d7a:	bne.n	9df4 <FatFile::read(void*, unsigned int)+0x158>
        // start of new cluster
        if (m_curPosition == 0) {
    9d7c:	cbnz	r3, 9de4 <FatFile::read(void*, unsigned int)+0x148>
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
    9d7e:	lsls	r0, r1, #25
    9d80:	ite	mi
    9d82:	ldrmi	r1, [r2, #32]
    9d84:	ldrpl	r1, [r5, #32]
#if USE_FAT_FILE_FLAG_CONTIGUOUS
        } else if (isFile() && isContiguous()) {
          m_curCluster++;
    9d86:	str	r1, [r5, #16]
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
      }
      sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
    9d88:	mov	r0, r2
    9d8a:	bl	a600 <FatPartition::clusterStartSector(unsigned long) const>
    9d8e:	ldr	r2, [r5, #8]
    9d90:	add.w	r1, r8, r0
    }
    if (offset != 0 || toRead < m_vol->bytesPerSector()
        || sector == m_vol->cacheSectorNumber()) {
    9d94:	cmp	r4, #0
    9d96:	beq.n	9cf6 <FatFile::read(void*, unsigned int)+0x5a>
  bool cacheSync() {
    return m_cache.sync() && syncDevice();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t sector, uint8_t options) {
    return m_cache.read(sector, options);
    9d98:	add.w	r0, r2, #36	; 0x24
    9d9c:	movs	r2, #0
    9d9e:	bl	a590 <FatCache::read(unsigned long, unsigned char)>
      if (n > toRead) {
        n = toRead;
      }
      // read sector to cache and copy data to caller
      pc = m_vol->cacheFetchData(sector, FatCache::CACHE_FOR_READ);
      if (!pc) {
    9da2:	cbz	r0, 9dc4 <FatFile::read(void*, unsigned int)+0x128>
      sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
    }
    if (offset != 0 || toRead < m_vol->bytesPerSector()
        || sector == m_vol->cacheSectorNumber()) {
      // amount to be read from current sector
      n = m_vol->bytesPerSector() - offset;
    9da4:	rsb	r3, r4, #512	; 0x200
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
    9da8:	adds	r1, r0, r4
    9daa:	mov	r0, r7
    9dac:	cmp	r3, r6
    9dae:	it	cs
    9db0:	movcs	r3, r6
    9db2:	mov	r2, r3
    9db4:	mov	r4, r3
    9db6:	bl	d064 <memcpy>
    9dba:	b.n	9d52 <FatFile::read(void*, unsigned int)+0xb6>
          if (fg < 0) {
            DBG_FAIL_MACRO;
            goto fail;
          }
          if (fg == 0) {
            if (isDir()) {
    9dbc:	ldrb	r3, [r5, #0]
    9dbe:	tst.w	r3, #112	; 0x70
    9dc2:	bne.n	9e24 <FatFile::read(void*, unsigned int)+0x188>
    toRead -= n;
  }
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
    9dc4:	ldrb	r3, [r5, #1]
  return -1;
    9dc6:	mov.w	r0, #4294967295
    toRead -= n;
  }
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
    9dca:	orr.w	r3, r3, #2
    9dce:	strb	r3, [r5, #1]
  return -1;
}
    9dd0:	add	sp, #12
    9dd2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (isFile()) {
    uint32_t tmp32 = m_fileSize - m_curPosition;
    9dd6:	ldr	r3, [r0, #28]
    9dd8:	ldr	r2, [r0, #20]
    9dda:	subs	r3, r3, r2
    9ddc:	cmp	r9, r3
    9dde:	it	cs
    9de0:	movcs	r9, r3
    9de2:	b.n	9cce <FatFile::read(void*, unsigned int)+0x32>
        // start of new cluster
        if (m_curPosition == 0) {
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
#if USE_FAT_FILE_FLAG_CONTIGUOUS
        } else if (isFile() && isContiguous()) {
    9de4:	lsls	r1, r1, #28
    9de6:	bpl.n	9e0c <FatFile::read(void*, unsigned int)+0x170>
    9de8:	ldrb	r3, [r5, #2]
    9dea:	lsls	r3, r3, #25
    9dec:	bpl.n	9e0c <FatFile::read(void*, unsigned int)+0x170>
          m_curCluster++;
    9dee:	ldr	r1, [r5, #16]
    9df0:	adds	r1, #1
    9df2:	b.n	9d86 <FatFile::read(void*, unsigned int)+0xea>
    9df4:	ldr	r1, [r5, #16]
    9df6:	b.n	9d88 <FatFile::read(void*, unsigned int)+0xec>
    9df8:	ldr	r0, [r2, #0]
  uint32_t m_lastCluster;             // Last cluster number in FAT.
  uint32_t m_rootDirStart;            // Start sector FAT16, cluster FAT32.
  //----------------------------------------------------------------------------
  // sector I/O functions.
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
    9dfa:	mov	r2, r7
    9dfc:	ldr	r3, [r0, #0]
    9dfe:	ldr	r3, [r3, #8]
    9e00:	blx	r3
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // read single sector
      n = m_vol->bytesPerSector();
      if (!m_vol->readSector(sector, dst)) {
    9e02:	cmp	r0, #0
    9e04:	beq.n	9dc4 <FatFile::read(void*, unsigned int)+0x128>
        goto fail;
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // read single sector
      n = m_vol->bytesPerSector();
    9e06:	mov.w	r4, #512	; 0x200
    9e0a:	b.n	9d52 <FatFile::read(void*, unsigned int)+0xb6>
        } else if (isFile() && isContiguous()) {
          m_curCluster++;
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    9e0c:	mov	r0, r2
    9e0e:	ldr	r1, [r5, #16]
    9e10:	mov	r2, sl
    9e12:	bl	a60c <FatPartition::fatGet(unsigned long, unsigned long*)>
          if (fg < 0) {
    9e16:	cmp	r0, #0
    9e18:	blt.n	9dc4 <FatFile::read(void*, unsigned int)+0x128>
            DBG_FAIL_MACRO;
            goto fail;
          }
          if (fg == 0) {
    9e1a:	beq.n	9dbc <FatFile::read(void*, unsigned int)+0x120>
    9e1c:	ldr	r2, [r5, #8]
    9e1e:	ldr	r1, [r5, #16]
    9e20:	b.n	9d88 <FatFile::read(void*, unsigned int)+0xec>
        goto fail;
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // read single sector
      n = m_vol->bytesPerSector();
    9e22:	movs	r6, #0
    }
    dst += n;
    m_curPosition += n;
    toRead -= n;
  }
  return nbyte - toRead;
    9e24:	rsb	r0, r6, r9

fail:
  m_error |= READ_ERROR;
  return -1;
}
    9e28:	add	sp, #12
    9e2a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9e2e:	nop

00009e30 <FatFile::peek()>:

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::peek() {
    9e30:	push	{r4, r5, r6, lr}
    9e32:	sub	sp, #8
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
    9e34:	movs	r2, #1
    9e36:	mov	r4, r0
  uint32_t curPosition = m_curPosition;
    9e38:	ldr	r6, [r0, #20]
    9e3a:	add.w	r1, sp, #7
  uint32_t curCluster = m_curCluster;
    9e3e:	ldr	r5, [r0, #16]
    9e40:	bl	9c9c <FatFile::read(void*, unsigned int)>
    9e44:	cmp	r0, #1
  int c = read();
  m_curPosition = curPosition;
    9e46:	str	r6, [r4, #20]
    9e48:	ite	eq
    9e4a:	ldrbeq.w	r0, [sp, #7]
    9e4e:	movne.w	r0, #4294967295
  m_curCluster = curCluster;
    9e52:	str	r5, [r4, #16]
  return c;
}
    9e54:	add	sp, #8
    9e56:	pop	{r4, r5, r6, pc}

00009e58 <FatFile::readDirCache(bool)>:
}
//------------------------------------------------------------------------------
// Read next directory entry into the cache
// Assumes file is correctly positioned
DirFat_t* FatFile::readDirCache(bool skipReadOk) {
  uint8_t i = (m_curPosition >> 5) & 0XF;
    9e58:	ldr	r3, [r0, #20]
  }
}
//------------------------------------------------------------------------------
// Read next directory entry into the cache
// Assumes file is correctly positioned
DirFat_t* FatFile::readDirCache(bool skipReadOk) {
    9e5a:	push	{r4, r5, lr}
  uint8_t i = (m_curPosition >> 5) & 0XF;
    9e5c:	ubfx	r5, r3, #5, #4
  }
}
//------------------------------------------------------------------------------
// Read next directory entry into the cache
// Assumes file is correctly positioned
DirFat_t* FatFile::readDirCache(bool skipReadOk) {
    9e60:	sub	sp, #12
    9e62:	mov	r4, r0
  uint8_t i = (m_curPosition >> 5) & 0XF;

  if (i == 0 || !skipReadOk) {
    9e64:	clz	r2, r5
    9e68:	lsrs	r2, r2, #5
    9e6a:	cmp	r2, r1
    9e6c:	bcs.n	9e7e <FatFile::readDirCache(bool)+0x26>
      }
      goto fail;
    }
    m_curPosition += 31;
  } else {
    m_curPosition += 32;
    9e6e:	adds	r3, #32
    9e70:	str	r3, [r0, #20]
  /** Reserve cache sector for write - do not read from sector device. */
  static const uint8_t CACHE_RESERVE_FOR_WRITE
    = CACHE_STATUS_DIRTY | CACHE_OPTION_NO_READ;
  /** \return Cache sector address. */
  cache_t* buffer() {
    return &m_buffer;
    9e72:	ldr	r0, [r4, #8]
    9e74:	adds	r0, #48	; 0x30
  }
  // return pointer to entry
  return reinterpret_cast<DirFat_t*>(m_vol->cacheAddress()) + i;
    9e76:	add.w	r0, r0, r5, lsl #5

fail:
  return nullptr;
}
    9e7a:	add	sp, #12
    9e7c:	pop	{r4, r5, pc}
// Assumes file is correctly positioned
DirFat_t* FatFile::readDirCache(bool skipReadOk) {
  uint8_t i = (m_curPosition >> 5) & 0XF;

  if (i == 0 || !skipReadOk) {
    int8_t n = read(&n, 1);
    9e7e:	movs	r2, #1
    9e80:	add.w	r1, sp, #7
    9e84:	bl	9c9c <FatFile::read(void*, unsigned int)>
    9e88:	sxtb	r0, r0
    if  (n != 1) {
    9e8a:	cmp	r0, #1
    9e8c:	bne.n	9e96 <FatFile::readDirCache(bool)+0x3e>
      if (n != 0) {
        DBG_FAIL_MACRO;
      }
      goto fail;
    }
    m_curPosition += 31;
    9e8e:	ldr	r3, [r4, #20]
    9e90:	adds	r3, #31
    9e92:	str	r3, [r4, #20]
    9e94:	b.n	9e72 <FatFile::readDirCache(bool)+0x1a>
  }
  // return pointer to entry
  return reinterpret_cast<DirFat_t*>(m_vol->cacheAddress()) + i;

fail:
  return nullptr;
    9e96:	movs	r0, #0
    9e98:	b.n	9e7a <FatFile::readDirCache(bool)+0x22>
    9e9a:	nop

00009e9c <FatFile::rename(FatFile*, char const*)>:
//------------------------------------------------------------------------------
bool FatFile::rename(const char* newPath) {
  return rename(m_vol->vwd(), newPath);
}
//------------------------------------------------------------------------------
bool FatFile::rename(FatFile* dirFile, const char* newPath) {
    9e9c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  FatFile oldFile;
  cache_t* pc;
  DirFat_t* dir;

  // Must be an open file or subdirectory.
  if (!(isFile() || isSubDir())) {
    9ea0:	ldrb	r5, [r0, #0]
//------------------------------------------------------------------------------
bool FatFile::rename(const char* newPath) {
  return rename(m_vol->vwd(), newPath);
}
//------------------------------------------------------------------------------
bool FatFile::rename(FatFile* dirFile, const char* newPath) {
    9ea2:	sub	sp, #108	; 0x6c
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attributes(FILE_ATTR_CLOSED), m_error(0), m_flags(0) {}
    9ea4:	movs	r4, #0
  FatFile oldFile;
  cache_t* pc;
  DirFat_t* dir;

  // Must be an open file or subdirectory.
  if (!(isFile() || isSubDir())) {
    9ea6:	tst.w	r5, #24
    9eaa:	strb.w	r4, [sp, #32]
    9eae:	strb.w	r4, [sp, #33]	; 0x21
    9eb2:	strb.w	r4, [sp, #34]	; 0x22
    9eb6:	strb.w	r4, [sp, #68]	; 0x44
    9eba:	strb.w	r4, [sp, #69]	; 0x45
    9ebe:	strb.w	r4, [sp, #70]	; 0x46
    9ec2:	beq.n	9ece <FatFile::rename(FatFile*, char const*)+0x32>
  if (!USE_LONG_FILE_NAMES && isLFN()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Can't move file to new volume.
  if (m_vol != dirFile->m_vol) {
    9ec4:	ldr	r6, [r0, #8]
    9ec6:	mov	r3, r0
    9ec8:	ldr	r5, [r1, #8]
    9eca:	cmp	r6, r5
    9ecc:	beq.n	9ed6 <FatFile::rename(FatFile*, char const*)+0x3a>
    goto fail;
  }
  return m_vol->cacheSync();

fail:
  return false;
    9ece:	movs	r0, #0
}
    9ed0:	add	sp, #108	; 0x6c
    9ed2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    9ed6:	mov	r5, r3
    9ed8:	mov	r8, r2
    9eda:	mov	r6, r1
    9edc:	bl	98e0 <FatFile::sync() [clone .part.40]>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // sync() and cache directory entry
  sync();
  oldFile = *this;
    9ee0:	mov	lr, r5
    9ee2:	add	r7, sp, #68	; 0x44
    9ee4:	ldmia.w	lr!, {r0, r1, r2, r3}
    9ee8:	stmia	r7!, {r0, r1, r2, r3}
    9eea:	ldmia.w	lr!, {r0, r1, r2, r3}
    9eee:	ldr.w	lr, [lr]
    9ef2:	stmia	r7!, {r0, r1, r2, r3}
  dir = cacheDirEntry(FatCache::CACHE_FOR_READ);
    9ef4:	mov	r1, r4
    9ef6:	mov	r0, r5
    DBG_FAIL_MACRO;
    goto fail;
  }
  // sync() and cache directory entry
  sync();
  oldFile = *this;
    9ef8:	str.w	lr, [r7]
  dir = cacheDirEntry(FatCache::CACHE_FOR_READ);
    9efc:	bl	98c0 <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    9f00:	mov	lr, r0
    9f02:	cmp	r0, #0
    9f04:	beq.n	9ece <FatFile::rename(FatFile*, char const*)+0x32>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // save directory entry
  memcpy(&entry, dir, sizeof(entry));
    9f06:	ldr	r0, [r0, #0]
    9f08:	mov	r7, sp
    9f0a:	ldr.w	r1, [lr, #4]
    9f0e:	ldr.w	r2, [lr, #8]
    9f12:	ldr.w	r3, [lr, #12]
  // make directory entry for new path
  if (isFile()) {
    9f16:	ldrb.w	ip, [r5]
  if (!dir) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // save directory entry
  memcpy(&entry, dir, sizeof(entry));
    9f1a:	stmia	r7!, {r0, r1, r2, r3}
  // make directory entry for new path
  if (isFile()) {
    9f1c:	and.w	ip, ip, #8
  if (!dir) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // save directory entry
  memcpy(&entry, dir, sizeof(entry));
    9f20:	ldr.w	r0, [lr, #16]
    9f24:	ldr.w	r1, [lr, #20]
    9f28:	ldr.w	r2, [lr, #24]
  // make directory entry for new path
  if (isFile()) {
    9f2c:	and.w	r9, ip, #255	; 0xff
  if (!dir) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // save directory entry
  memcpy(&entry, dir, sizeof(entry));
    9f30:	ldr.w	r3, [lr, #28]
    9f34:	stmia	r7!, {r0, r1, r2, r3}
  // make directory entry for new path
  if (isFile()) {
    9f36:	cmp.w	ip, #0
    9f3a:	beq.w	a068 <FatFile::rename(FatFile*, char const*)+0x1cc>
    if (!file.open(dirFile, newPath, O_CREAT | O_EXCL | O_WRONLY)) {
    9f3e:	mov	r2, r8
    9f40:	mov	r1, r6
    9f42:	movw	r3, #2561	; 0xa01
    9f46:	add	r0, sp, #32
    9f48:	bl	9bb8 <FatFile::open(FatFile*, char const*, int)>
    9f4c:	cmp	r0, #0
    9f4e:	beq.n	9ece <FatFile::rename(FatFile*, char const*)+0x32>
    // save cluster containing new dot dot
    dirCluster = file.m_firstCluster;
  }
  // change to new directory entry

  m_dirSector = file.m_dirSector;
    9f50:	ldr	r2, [sp, #56]	; 0x38
  m_dirIndex = file.m_dirIndex;
  m_lfnOrd = file.m_lfnOrd;
  m_dirCluster = file.m_dirCluster;
  // mark closed to avoid possible destructor close call
  file.m_attributes = FILE_ATTR_CLOSED;
    9f52:	movs	r6, #0
    dirCluster = file.m_firstCluster;
  }
  // change to new directory entry

  m_dirSector = file.m_dirSector;
  m_dirIndex = file.m_dirIndex;
    9f54:	ldrh.w	r3, [sp, #36]	; 0x24
  // mark closed to avoid possible destructor close call
  file.m_attributes = FILE_ATTR_CLOSED;
  file.m_flags = 0;

  // cache new directory entry
  dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
    9f58:	movs	r1, #1
    // save cluster containing new dot dot
    dirCluster = file.m_firstCluster;
  }
  // change to new directory entry

  m_dirSector = file.m_dirSector;
    9f5a:	str	r2, [r5, #24]
  // mark closed to avoid possible destructor close call
  file.m_attributes = FILE_ATTR_CLOSED;
  file.m_flags = 0;

  // cache new directory entry
  dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
    9f5c:	mov	r0, r5
    dirCluster = file.m_firstCluster;
  }
  // change to new directory entry

  m_dirSector = file.m_dirSector;
  m_dirIndex = file.m_dirIndex;
    9f5e:	strh	r3, [r5, #4]
  m_lfnOrd = file.m_lfnOrd;
    9f60:	ldrb.w	r2, [sp, #35]	; 0x23
  m_dirCluster = file.m_dirCluster;
    9f64:	ldr	r3, [sp, #44]	; 0x2c
  }
  // change to new directory entry

  m_dirSector = file.m_dirSector;
  m_dirIndex = file.m_dirIndex;
  m_lfnOrd = file.m_lfnOrd;
    9f66:	strb	r2, [r5, #3]
  m_dirCluster = file.m_dirCluster;
    9f68:	str	r3, [r5, #12]
  // mark closed to avoid possible destructor close call
  file.m_attributes = FILE_ATTR_CLOSED;
    9f6a:	strb.w	r6, [sp, #32]
  file.m_flags = 0;
    9f6e:	strb.w	r6, [sp, #34]	; 0x22

  // cache new directory entry
  dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
    9f72:	bl	98c0 <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    9f76:	cmp	r0, #0
    9f78:	beq.n	9ece <FatFile::rename(FatFile*, char const*)+0x32>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // copy all but name and name flags to new directory entry
  memcpy(&dir->createTimeMs, &entry.createTimeMs,
         sizeof(entry) - sizeof(dir->name) - 2);
    9f7a:	add	r3, sp, #104	; 0x68
  dir->attributes = entry.attributes;
    9f7c:	ldrb.w	r2, [sp, #11]
    DBG_FAIL_MACRO;
    goto fail;
  }
  // copy all but name and name flags to new directory entry
  memcpy(&dir->createTimeMs, &entry.createTimeMs,
         sizeof(entry) - sizeof(dir->name) - 2);
    9f80:	ldr.w	r7, [r3, #-91]!
  dir->attributes = entry.attributes;
    9f84:	strb	r2, [r0, #11]
    DBG_FAIL_MACRO;
    goto fail;
  }
  // copy all but name and name flags to new directory entry
  memcpy(&dir->createTimeMs, &entry.createTimeMs,
         sizeof(entry) - sizeof(dir->name) - 2);
    9f86:	ldr.w	lr, [r3, #4]
    9f8a:	str.w	r7, [r0, #13]
    9f8e:	ldr	r7, [r3, #8]
    9f90:	str.w	lr, [r0, #17]
    9f94:	str.w	r7, [r0, #21]
    9f98:	ldr.w	lr, [r3, #12]
    9f9c:	ldrh	r7, [r3, #16]
    9f9e:	ldrb	r3, [r3, #18]
    9fa0:	str.w	lr, [r0, #25]
    9fa4:	strh.w	r7, [r0, #29]
    9fa8:	strb	r3, [r0, #31]
  dir->attributes = entry.attributes;

  // update dot dot if directory
  if (dirCluster) {
    9faa:	cmp	r4, #0
    9fac:	beq.n	a024 <FatFile::rename(FatFile*, char const*)+0x188>
    // get new dot dot
    uint32_t sector = m_vol->clusterStartSector(dirCluster);
    9fae:	mov	r1, r4
    9fb0:	ldr	r0, [r5, #8]
    9fb2:	bl	a600 <FatPartition::clusterStartSector(unsigned long) const>
  bool cacheSync() {
    return m_cache.sync() && syncDevice();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t sector, uint8_t options) {
    return m_cache.read(sector, options);
    9fb6:	ldr	r3, [r5, #8]
    9fb8:	mov	r1, r0
    9fba:	mov	r2, r6
    9fbc:	add.w	r0, r3, #36	; 0x24
    9fc0:	bl	a590 <FatCache::read(unsigned long, unsigned char)>
    pc = m_vol->cacheFetchData(sector, FatCache::CACHE_FOR_READ);
    if (!pc) {
    9fc4:	cmp	r0, #0
    9fc6:	beq.n	9ece <FatFile::rename(FatFile*, char const*)+0x32>
      DBG_FAIL_MACRO;
      goto fail;
    }
    memcpy(&entry, &pc->dir[1], sizeof(entry));
    9fc8:	mov	r6, r0
    9fca:	mov	r7, sp
    9fcc:	ldr.w	r0, [r6, #32]!
    9fd0:	ldr	r1, [r6, #4]
    9fd2:	ldr	r2, [r6, #8]
    9fd4:	ldr	r3, [r6, #12]
    9fd6:	stmia	r7!, {r0, r1, r2, r3}
    9fd8:	ldr	r0, [r6, #16]
    9fda:	ldr	r1, [r6, #20]
    9fdc:	ldr	r2, [r6, #24]
    9fde:	ldr	r3, [r6, #28]
    9fe0:	stmia	r7!, {r0, r1, r2, r3}

    // free unused cluster
    if (!m_vol->freeChain(dirCluster)) {
    9fe2:	mov	r1, r4
    9fe4:	ldr	r0, [r5, #8]
    9fe6:	bl	a768 <FatPartition::freeChain(unsigned long)>
    9fea:	cmp	r0, #0
    9fec:	beq.w	9ece <FatFile::rename(FatFile*, char const*)+0x32>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // store new dot dot
    sector = m_vol->clusterStartSector(m_firstCluster);
    9ff0:	ldr	r1, [r5, #32]
    9ff2:	ldr	r0, [r5, #8]
    9ff4:	bl	a600 <FatPartition::clusterStartSector(unsigned long) const>
    9ff8:	ldr	r3, [r5, #8]
    9ffa:	mov	r1, r0
    9ffc:	movs	r2, #1
    9ffe:	add.w	r0, r3, #36	; 0x24
    a002:	bl	a590 <FatCache::read(unsigned long, unsigned char)>
    pc = m_vol->cacheFetchData(sector, FatCache::CACHE_FOR_WRITE);
    if (!pc) {
    a006:	mov	r7, r0
    a008:	cmp	r0, #0
    a00a:	beq.w	9ece <FatFile::rename(FatFile*, char const*)+0x32>
      DBG_FAIL_MACRO;
      goto fail;
    }
    memcpy(&pc->dir[1], &entry, sizeof(entry));
    a00e:	mov	r4, sp
    a010:	ldmia	r4!, {r0, r1, r2, r3}
    a012:	str	r0, [r7, #32]
    a014:	str	r1, [r7, #36]	; 0x24
    a016:	str	r2, [r7, #40]	; 0x28
    a018:	str	r3, [r7, #44]	; 0x2c
    a01a:	ldmia	r4!, {r0, r1, r2, r3}
    a01c:	str	r0, [r7, #48]	; 0x30
    a01e:	str	r1, [r7, #52]	; 0x34
    a020:	str	r2, [r7, #56]	; 0x38
    a022:	str	r3, [r7, #60]	; 0x3c
  }
  // Remove old directory entry;
  oldFile.m_firstCluster = 0;
    a024:	movs	r1, #0
  oldFile.m_flags = FILE_FLAG_WRITE;
    a026:	movs	r2, #2
  oldFile.m_attributes = FILE_ATTR_FILE;
    a028:	movs	r3, #8
  if (!oldFile.remove()) {
    a02a:	add	r0, sp, #68	; 0x44
      goto fail;
    }
    memcpy(&pc->dir[1], &entry, sizeof(entry));
  }
  // Remove old directory entry;
  oldFile.m_firstCluster = 0;
    a02c:	str	r1, [sp, #100]	; 0x64
  oldFile.m_flags = FILE_FLAG_WRITE;
    a02e:	strb.w	r2, [sp, #70]	; 0x46
  oldFile.m_attributes = FILE_ATTR_FILE;
    a032:	strb.w	r3, [sp, #68]	; 0x44
  if (!oldFile.remove()) {
    a036:	bl	ad80 <FatFile::remove()>
    a03a:	cmp	r0, #0
    a03c:	beq.w	9ece <FatFile::rename(FatFile*, char const*)+0x32>
    DBG_FAIL_MACRO;
    goto fail;
  }
  return m_vol->cacheSync();
    a040:	ldr	r4, [r5, #8]
  cache_t* cacheFetchFat(uint32_t sector, uint8_t options) {
    return m_fatCache.read(sector,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    a042:	add.w	r0, r4, #36	; 0x24
    a046:	bl	a5f0 <FatCache::sync()>
    a04a:	cmp	r0, #0
    a04c:	beq.w	9ece <FatFile::rename(FatFile*, char const*)+0x32>
    a050:	add.w	r0, r4, #560	; 0x230
    a054:	bl	a5f0 <FatCache::sync()>
    a058:	cmp	r0, #0
    a05a:	beq.w	9ece <FatFile::rename(FatFile*, char const*)+0x32>
    a05e:	ldr	r0, [r4, #0]
  // sector I/O functions.
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
  }
  bool syncDevice() {
    return m_blockDev->syncDevice();
    a060:	ldr	r3, [r0, #0]
    a062:	ldr	r3, [r3, #20]
    a064:	blx	r3
    a066:	b.n	9ed0 <FatFile::rename(FatFile*, char const*)+0x34>
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else {
    // don't create missing path prefix components
    if (!file.mkdir(dirFile, newPath, false)) {
    a068:	mov	r3, r9
    a06a:	mov	r2, r8
    a06c:	mov	r1, r6
    a06e:	add	r0, sp, #32
    a070:	bl	9af0 <FatFile::mkdir(FatFile*, char const*, bool)>
    a074:	cmp	r0, #0
    a076:	beq.w	9ece <FatFile::rename(FatFile*, char const*)+0x32>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // save cluster containing new dot dot
    dirCluster = file.m_firstCluster;
    a07a:	ldr	r4, [sp, #64]	; 0x40
    a07c:	b.n	9f50 <FatFile::rename(FatFile*, char const*)+0xb4>
    a07e:	nop

0000a080 <FatFile::rmdir()>:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::rmdir() {
  // must be open subdirectory
  if (!isSubDir() || (!USE_LONG_FILE_NAMES && isLFN())) {
    a080:	ldrb	r3, [r0, #0]
    a082:	lsls	r2, r3, #27
    a084:	bpl.n	a0bc <FatFile::rmdir()+0x3c>
  if (!isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    a086:	ldr	r3, [r0, #20]

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::rmdir() {
    a088:	push	{r4, lr}
    a08a:	mov	r4, r0
  if (!isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    a08c:	cbz	r3, a09c <FatFile::rmdir()+0x1c>
    }
  }

done:
  m_curPosition = pos;
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    a08e:	ldrb	r3, [r0, #2]
  if (pos == m_curPosition) {
    return true;
  }
  if (pos == 0) {
    // set position to start of file
    m_curCluster = 0;
    a090:	movs	r2, #0
    }
  }

done:
  m_curPosition = pos;
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    a092:	bic.w	r3, r3, #32
  if (pos == m_curPosition) {
    return true;
  }
  if (pos == 0) {
    // set position to start of file
    m_curCluster = 0;
    a096:	str	r2, [r0, #16]
      goto fail;
    }
  }

done:
  m_curPosition = pos;
    a098:	str	r2, [r0, #20]
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    a09a:	strb	r3, [r0, #2]
  }
  rewind();

  // make sure directory is empty
  while (1) {
    DirFat_t* dir = readDirCache(true);
    a09c:	movs	r1, #1
    a09e:	mov	r0, r4
    a0a0:	bl	9e58 <FatFile::readDirCache(bool)>
    if (!dir) {
    a0a4:	cbz	r0, a0c0 <FatFile::rmdir()+0x40>
      }
      DBG_FAIL_MACRO;
      goto fail;
    }
    // done if past last used entry
    if (dir->name[0] == FAT_NAME_FREE) {
    a0a6:	ldrb	r3, [r0, #0]
    a0a8:	cbz	r3, a0c6 <FatFile::rmdir()+0x46>
      break;
    }
    // skip empty slot, '.' or '..'
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == '.') {
    a0aa:	cmp	r3, #229	; 0xe5
    a0ac:	beq.n	a09c <FatFile::rmdir()+0x1c>
    a0ae:	cmp	r3, #46	; 0x2e
    a0b0:	beq.n	a09c <FatFile::rmdir()+0x1c>
      continue;
    }
    // error not empty
    if (isFileOrSubdir(dir)) {
    a0b2:	ldrb	r3, [r0, #11]
    a0b4:	lsls	r3, r3, #28
    a0b6:	bmi.n	a09c <FatFile::rmdir()+0x1c>
  m_flags |= FILE_FLAG_WRITE;
  return remove();

fail:
  return false;
}
    a0b8:	movs	r0, #0
    a0ba:	pop	{r4, pc}
    a0bc:	movs	r0, #0
    a0be:	bx	lr
  // make sure directory is empty
  while (1) {
    DirFat_t* dir = readDirCache(true);
    if (!dir) {
      // EOF if no error.
      if (!getError()) {
    a0c0:	ldrb	r3, [r4, #1]
    a0c2:	cmp	r3, #0
    a0c4:	bne.n	a0b8 <FatFile::rmdir()+0x38>
      goto fail;
    }
  }
  // convert empty directory to normal file for remove
  m_attributes = FILE_ATTR_FILE;
  m_flags |= FILE_FLAG_WRITE;
    a0c6:	ldrb	r3, [r4, #2]
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // convert empty directory to normal file for remove
  m_attributes = FILE_ATTR_FILE;
    a0c8:	movs	r2, #8
  m_flags |= FILE_FLAG_WRITE;
  return remove();
    a0ca:	mov	r0, r4
      goto fail;
    }
  }
  // convert empty directory to normal file for remove
  m_attributes = FILE_ATTR_FILE;
  m_flags |= FILE_FLAG_WRITE;
    a0cc:	orr.w	r3, r3, #2
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // convert empty directory to normal file for remove
  m_attributes = FILE_ATTR_FILE;
    a0d0:	strb	r2, [r4, #0]
  m_flags |= FILE_FLAG_WRITE;
    a0d2:	strb	r3, [r4, #2]
  return remove();

fail:
  return false;
}
    a0d4:	ldmia.w	sp!, {r4, lr}
    }
  }
  // convert empty directory to normal file for remove
  m_attributes = FILE_ATTR_FILE;
  m_flags |= FILE_FLAG_WRITE;
  return remove();
    a0d8:	b.w	ad80 <FatFile::remove()>

0000a0dc <FatFile::seekSet(unsigned long)>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::seekSet(uint32_t pos) {
    a0dc:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a0e0:	ldrb	r3, [r0, #0]
    a0e2:	mov	r4, r0
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
    a0e4:	ldr	r7, [r0, #16]
  // error if file not open
  if (!isOpen()) {
    a0e6:	cbz	r3, a116 <FatFile::seekSet(unsigned long)+0x3a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    a0e8:	ldr	r2, [r0, #20]
    a0ea:	mov	r6, r1
    a0ec:	cmp	r2, r1
    a0ee:	beq.n	a15a <FatFile::seekSet(unsigned long)+0x7e>
    return true;
  }
  if (pos == 0) {
    a0f0:	cbnz	r1, a104 <FatFile::seekSet(unsigned long)+0x28>
    // set position to start of file
    m_curCluster = 0;
    a0f2:	str	r1, [r4, #16]
    }
  }

done:
  m_curPosition = pos;
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    a0f4:	ldrb	r3, [r4, #2]
  return true;
    a0f6:	movs	r0, #1
      goto fail;
    }
  }

done:
  m_curPosition = pos;
    a0f8:	str	r6, [r4, #20]
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    a0fa:	bic.w	r3, r3, #32
    a0fe:	strb	r3, [r4, #2]
  return true;
    a100:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (pos == 0) {
    // set position to start of file
    m_curCluster = 0;
    goto done;
  }
  if (isFile()) {
    a104:	lsls	r0, r3, #28
    a106:	bmi.n	a11e <FatFile::seekSet(unsigned long)+0x42>
    if (pos > m_fileSize) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if (isRootFixed()) {
    a108:	lsls	r1, r3, #26
    a10a:	bpl.n	a124 <FatFile::seekSet(unsigned long)+0x48>
    a10c:	ldr	r3, [r4, #8]
    if (pos <= 32*m_vol->rootDirEntryCount()) {
    a10e:	ldrh	r3, [r3, #8]
    a110:	cmp.w	r6, r3, lsl #5
    a114:	bls.n	a0f4 <FatFile::seekSet(unsigned long)+0x18>
  m_curPosition = pos;
  m_flags &= ~FILE_FLAG_PREALLOCATE;
  return true;

fail:
  m_curCluster = tmp;
    a116:	str	r7, [r4, #16]
  return false;
    a118:	movs	r0, #0
    a11a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    // set position to start of file
    m_curCluster = 0;
    goto done;
  }
  if (isFile()) {
    if (pos > m_fileSize) {
    a11e:	ldr	r1, [r4, #28]
    a120:	cmp	r6, r1
    a122:	bhi.n	a116 <FatFile::seekSet(unsigned long)+0x3a>
    }
    DBG_FAIL_MACRO;
    goto fail;
  }
  // calculate cluster index for cur and new position
  nCur = (m_curPosition - 1) >> (m_vol->bytesPerClusterShift());
    a124:	ldr.w	lr, [r4, #8]
    a128:	subs	r0, r2, #1
  nNew = (pos - 1) >> (m_vol->bytesPerClusterShift());
    a12a:	subs	r5, r6, #1
    }
    DBG_FAIL_MACRO;
    goto fail;
  }
  // calculate cluster index for cur and new position
  nCur = (m_curPosition - 1) >> (m_vol->bytesPerClusterShift());
    a12c:	ldrb.w	r1, [lr, #6]
    a130:	adds	r1, #9
    a132:	uxtb	r1, r1
    a134:	lsrs	r0, r1
  nNew = (pos - 1) >> (m_vol->bytesPerClusterShift());
    a136:	lsrs	r5, r1

  if (nNew < nCur || m_curPosition == 0) {
    a138:	cbz	r2, a160 <FatFile::seekSet(unsigned long)+0x84>
    a13a:	cmp	r0, r5
    a13c:	bhi.n	a160 <FatFile::seekSet(unsigned long)+0x84>
    // must follow chain from first cluster
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
    a13e:	subs	r5, r5, r0
  }
  while (nNew--) {
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
    a140:	add.w	r8, r4, #16
    a144:	mov	r2, r8
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    a146:	cmp	r5, #0
    a148:	beq.n	a0f4 <FatFile::seekSet(unsigned long)+0x18>
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
    a14a:	ldr	r1, [r4, #16]
    a14c:	subs	r5, #1
    a14e:	ldr	r0, [r4, #8]
    a150:	bl	a60c <FatPartition::fatGet(unsigned long, unsigned long*)>
    a154:	cmp	r0, #0
    a156:	bgt.n	a144 <FatFile::seekSet(unsigned long)+0x68>
    a158:	b.n	a116 <FatFile::seekSet(unsigned long)+0x3a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    return true;
    a15a:	movs	r0, #1
  return true;

fail:
  m_curCluster = tmp;
  return false;
}
    a15c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  nCur = (m_curPosition - 1) >> (m_vol->bytesPerClusterShift());
  nNew = (pos - 1) >> (m_vol->bytesPerClusterShift());

  if (nNew < nCur || m_curPosition == 0) {
    // must follow chain from first cluster
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
    a160:	lsls	r3, r3, #25
    a162:	ite	mi
    a164:	ldrmi.w	r3, [lr, #32]
    a168:	ldrpl	r3, [r4, #32]
    a16a:	str	r3, [r4, #16]
    a16c:	b.n	a140 <FatFile::seekSet(unsigned long)+0x64>
    a16e:	nop

0000a170 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)>:
  return false;
}
//------------------------------------------------------------------------------
// open a cached directory entry.
bool FatFile::openCachedEntry(FatFile* dirFile, uint16_t dirIndex,
                              oflag_t oflag, uint8_t lfnOrd) {
    a170:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a174:	mov	r5, r1
    a176:	mov	r8, r2
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
    a178:	movs	r1, #0
    a17a:	movs	r2, #36	; 0x24
  return false;
}
//------------------------------------------------------------------------------
// open a cached directory entry.
bool FatFile::openCachedEntry(FatFile* dirFile, uint16_t dirIndex,
                              oflag_t oflag, uint8_t lfnOrd) {
    a17c:	mov	r4, r0
    a17e:	mov	r7, r3
    a180:	ldrb.w	r6, [sp, #24]
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
    a184:	bl	10d7c <memset>
  // location of entry in cache
  m_vol = dirFile->m_vol;
    a188:	ldr	r0, [r5, #8]
  m_dirIndex = dirIndex;
  m_dirCluster = dirFile->m_firstCluster;
  DirFat_t* dir = reinterpret_cast<DirFat_t*>(m_vol->cacheAddress());
  dir += 0XF & dirIndex;
    a18a:	and.w	r3, r8, #15
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
  // location of entry in cache
  m_vol = dirFile->m_vol;
  m_dirIndex = dirIndex;
  m_dirCluster = dirFile->m_firstCluster;
    a18e:	ldr	r1, [r5, #32]
  /** Reserve cache sector for write - do not read from sector device. */
  static const uint8_t CACHE_RESERVE_FOR_WRITE
    = CACHE_STATUS_DIRTY | CACHE_OPTION_NO_READ;
  /** \return Cache sector address. */
  cache_t* buffer() {
    return &m_buffer;
    a190:	add.w	r2, r0, #48	; 0x30
bool FatFile::openCachedEntry(FatFile* dirFile, uint16_t dirIndex,
                              oflag_t oflag, uint8_t lfnOrd) {
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
  // location of entry in cache
  m_vol = dirFile->m_vol;
    a194:	str	r0, [r4, #8]
  m_dirIndex = dirIndex;
  m_dirCluster = dirFile->m_firstCluster;
    a196:	str	r1, [r4, #12]
  DirFat_t* dir = reinterpret_cast<DirFat_t*>(m_vol->cacheAddress());
  dir += 0XF & dirIndex;
    a198:	add.w	r2, r2, r3, lsl #5
                              oflag_t oflag, uint8_t lfnOrd) {
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
  // location of entry in cache
  m_vol = dirFile->m_vol;
  m_dirIndex = dirIndex;
    a19c:	strh.w	r8, [r4, #4]
    a1a0:	ldrb	r1, [r2, #11]
  m_dirCluster = dirFile->m_firstCluster;
  DirFat_t* dir = reinterpret_cast<DirFat_t*>(m_vol->cacheAddress());
  dir += 0XF & dirIndex;

  // Must be file or subdirectory.
  if (!isFileOrSubdir(dir)) {
    a1a2:	lsls	r5, r1, #28
    a1a4:	bmi.n	a1ca <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x5a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_attributes = dir->attributes & FILE_ATTR_COPY;
    a1a6:	and.w	r1, r1, #23
    a1aa:	strb	r1, [r4, #0]
  if (isFileDir(dir)) {
    a1ac:	ldrb	r3, [r2, #11]
    a1ae:	tst.w	r3, #24
    a1b2:	bne.n	a1ba <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x4a>
    m_attributes |= FILE_ATTR_FILE;
    a1b4:	orr.w	r1, r1, #8
    a1b8:	strb	r1, [r4, #0]
  }
  m_lfnOrd = lfnOrd;

  switch (oflag & O_ACCMODE) {
    a1ba:	and.w	r3, r7, #3
  }
  m_attributes = dir->attributes & FILE_ATTR_COPY;
  if (isFileDir(dir)) {
    m_attributes |= FILE_ATTR_FILE;
  }
  m_lfnOrd = lfnOrd;
    a1be:	strb	r6, [r4, #3]

  switch (oflag & O_ACCMODE) {
    a1c0:	cmp	r3, #1
    a1c2:	beq.n	a1d6 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x66>
    a1c4:	cmp	r3, #2
    a1c6:	beq.n	a21e <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xae>
    a1c8:	cbz	r3, a214 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xa4>
    goto fail;
  }
  return true;

fail:
  m_attributes = FILE_ATTR_CLOSED;
    a1ca:	movs	r3, #0
    a1cc:	strb	r3, [r4, #0]
  m_flags = 0;
  return false;
    a1ce:	mov	r0, r3
  }
  return true;

fail:
  m_attributes = FILE_ATTR_CLOSED;
  m_flags = 0;
    a1d0:	strb	r3, [r4, #2]
  return false;
    a1d2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    case O_RDWR:
      m_flags = FILE_FLAG_READ | FILE_FLAG_WRITE;
      break;

    case O_WRONLY:
      m_flags = FILE_FLAG_WRITE;
    a1d6:	movs	r3, #2
    a1d8:	strb	r3, [r4, #2]
      DBG_FAIL_MACRO;
      goto fail;
  }

  if (m_flags & FILE_FLAG_WRITE) {
    if (isSubDir() || isReadOnly()) {
    a1da:	ldrb	r1, [r4, #0]
    a1dc:	tst.w	r1, #17
    a1e0:	bne.n	a1ca <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x5a>
    a1e2:	sxtb	r1, r3
    a1e4:	and.w	r5, r7, #1024	; 0x400
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  m_flags |= (oflag & O_APPEND ? FILE_FLAG_APPEND : 0);
    a1e8:	and.w	r3, r7, #8
    a1ec:	orrs	r3, r1
    a1ee:	uxtb	r3, r3
    a1f0:	strb	r3, [r4, #2]

  m_dirSector = m_vol->cacheSectorNumber();

  // copy first cluster number for directory fields
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16)
                 | getLe16(dir->firstClusterLow);
    a1f2:	ldrh.w	lr, [r2, #20]
    a1f6:	ldrh	r1, [r2, #26]
    a1f8:	ldr	r6, [r0, #44]	; 0x2c
    a1fa:	orr.w	r1, r1, lr, lsl #16
      goto fail;
    }
  }
  m_flags |= (oflag & O_APPEND ? FILE_FLAG_APPEND : 0);

  m_dirSector = m_vol->cacheSectorNumber();
    a1fe:	str	r6, [r4, #24]

  // copy first cluster number for directory fields
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16)
                 | getLe16(dir->firstClusterLow);

  if (oflag & O_TRUNC) {
    a200:	cbz	r5, a224 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xb4>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
    a202:	cbnz	r1, a23a <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xca>
      DBG_FAIL_MACRO;
      goto fail;
    }

    // need to update directory entry
    m_flags |= FILE_FLAG_DIR_DIRTY;
    a204:	orn	r3, r3, #127	; 0x7f
    a208:	strb	r3, [r4, #2]
  } else {
    m_firstCluster = firstCluster;
    m_fileSize = getLe32(dir->fileSize);
  }
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
    a20a:	lsls	r3, r7, #17
    a20c:	bmi.n	a22c <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xbc>
    DBG_FAIL_MACRO;
    goto fail;
  }
  return true;
    a20e:	movs	r0, #1
    a210:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  }
  m_lfnOrd = lfnOrd;

  switch (oflag & O_ACCMODE) {
    case O_RDONLY:
      if (oflag & O_TRUNC) {
    a214:	ands.w	r5, r7, #1024	; 0x400
    a218:	bne.n	a1ca <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x5a>
    a21a:	movs	r1, #1
    a21c:	b.n	a1e8 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x78>
      }
      m_flags = FILE_FLAG_READ;
      break;

    case O_RDWR:
      m_flags = FILE_FLAG_READ | FILE_FLAG_WRITE;
    a21e:	movs	r3, #3
    a220:	strb	r3, [r4, #2]
      break;
    a222:	b.n	a1da <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x6a>
    }

    // need to update directory entry
    m_flags |= FILE_FLAG_DIR_DIRTY;
  } else {
    m_firstCluster = firstCluster;
    a224:	str	r1, [r4, #32]
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
}
inline uint32_t getLe32(const uint8_t* src) {
  return *reinterpret_cast<const uint32_t*>(src);
    a226:	ldr	r3, [r2, #28]
    m_fileSize = getLe32(dir->fileSize);
    a228:	str	r3, [r4, #28]
    a22a:	b.n	a20a <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x9a>
  }
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
    a22c:	ldr	r1, [r4, #28]
    a22e:	mov	r0, r4
    a230:	bl	a0dc <FatFile::seekSet(unsigned long)>
    a234:	cmp	r0, #0
    a236:	bne.n	a20e <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x9e>
    a238:	b.n	a1ca <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x5a>
  // copy first cluster number for directory fields
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16)
                 | getLe16(dir->firstClusterLow);

  if (oflag & O_TRUNC) {
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
    a23a:	bl	a768 <FatPartition::freeChain(unsigned long)>
    a23e:	cmp	r0, #0
    a240:	beq.n	a1ca <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x5a>
    a242:	ldrb	r3, [r4, #2]
    a244:	b.n	a204 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x94>
    a246:	nop

0000a248 <FatFile::openNext(FatFile*, int)>:
  DirLfn_t* ldir;
  uint8_t lfnOrd = 0;
  uint16_t index;

  // Check for not open and valid directory..
  if (isOpen() || !dirFile->isDir() || (dirFile->curPosition() & 0X1F)) {
    a248:	ldrb	r3, [r0, #0]
    a24a:	cbnz	r3, a254 <FatFile::openNext(FatFile*, int)+0xc>
    a24c:	ldrb	r3, [r1, #0]
    a24e:	tst.w	r3, #112	; 0x70
    a252:	bne.n	a258 <FatFile::openNext(FatFile*, int)+0x10>
      lfnOrd = 0;
    }
  }

fail:
  return false;
    a254:	movs	r0, #0
}
    a256:	bx	lr
  m_attributes = FILE_ATTR_CLOSED;
  m_flags = 0;
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openNext(FatFile* dirFile, oflag_t oflag) {
    a258:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    a25c:	ldr	r6, [r1, #20]
    a25e:	sub	sp, #8
  DirLfn_t* ldir;
  uint8_t lfnOrd = 0;
  uint16_t index;

  // Check for not open and valid directory..
  if (isOpen() || !dirFile->isDir() || (dirFile->curPosition() & 0X1F)) {
    a260:	ands.w	r7, r6, #31
    a264:	bne.n	a2aa <FatFile::openNext(FatFile*, int)+0x62>
    a266:	mov	r9, r2
    a268:	mov	r5, r1
    a26a:	mov	r8, r0
    a26c:	mov	sl, r7
    a26e:	b.n	a28c <FatFile::openNext(FatFile*, int)+0x44>
    // done if last entry
    if (dir->name[0] == FAT_NAME_FREE) {
      goto fail;
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == '.' || dir->name[0] == FAT_NAME_DELETED) {
    a270:	sub.w	r2, r3, #229	; 0xe5
    a274:	clz	r2, r2
    a278:	lsrs	r2, r2, #5
    a27a:	cbnz	r2, a29e <FatFile::openNext(FatFile*, int)+0x56>
    a27c:	ldrb	r1, [r0, #11]
      lfnOrd = 0;
    } else if (isFileOrSubdir(dir)) {
    a27e:	tst.w	r1, #8
    a282:	beq.n	a2c0 <FatFile::openNext(FatFile*, int)+0x78>
      if (!openCachedEntry(dirFile, index, oflag, lfnOrd)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      return true;
    } else if (isLongName(dir)) {
    a284:	cmp	r1, #15
    a286:	beq.n	a2b2 <FatFile::openNext(FatFile*, int)+0x6a>
      if (ldir->order & FAT_ORDER_LAST_LONG_ENTRY) {
        lfnOrd = ldir->order & 0X1F;
        checksum = ldir->checksum;
      }
    } else {
      lfnOrd = 0;
    a288:	mov	r7, r2
    a28a:	ldr	r6, [r5, #20]
    goto fail;
  }
  while (1) {
    // read entry into cache
    index = dirFile->curPosition()/32;
    DirFat_t* dir = dirFile->readDirCache();
    a28c:	movs	r1, #0
    a28e:	mov	r0, r5
    a290:	bl	9e58 <FatFile::readDirCache(bool)>
    if (!dir) {
    a294:	cbz	r0, a2aa <FatFile::openNext(FatFile*, int)+0x62>
        DBG_FAIL_MACRO;
      }
      goto fail;
    }
    // done if last entry
    if (dir->name[0] == FAT_NAME_FREE) {
    a296:	ldrb	r3, [r0, #0]
    a298:	cbz	r3, a2aa <FatFile::openNext(FatFile*, int)+0x62>
      goto fail;
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == '.' || dir->name[0] == FAT_NAME_DELETED) {
    a29a:	cmp	r3, #46	; 0x2e
    a29c:	bne.n	a270 <FatFile::openNext(FatFile*, int)+0x28>
      lfnOrd = 0;
    a29e:	movs	r7, #0
    a2a0:	b.n	a28a <FatFile::openNext(FatFile*, int)+0x42>
    } else if (isFileOrSubdir(dir)) {
      if (lfnOrd && checksum != lfnChecksum(dir->name)) {
    a2a2:	bl	a9a0 <FatFile::lfnChecksum(unsigned char*)>
    a2a6:	cmp	r0, sl
    a2a8:	beq.n	a2c4 <FatFile::openNext(FatFile*, int)+0x7c>
      lfnOrd = 0;
    }
  }

fail:
  return false;
    a2aa:	movs	r0, #0
}
    a2ac:	add	sp, #8
    a2ae:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        goto fail;
      }
      return true;
    } else if (isLongName(dir)) {
      ldir = reinterpret_cast<DirLfn_t*>(dir);
      if (ldir->order & FAT_ORDER_LAST_LONG_ENTRY) {
    a2b2:	lsls	r2, r3, #25
    a2b4:	bpl.n	a28a <FatFile::openNext(FatFile*, int)+0x42>
        lfnOrd = ldir->order & 0X1F;
    a2b6:	and.w	r7, r3, #31
        checksum = ldir->checksum;
    a2ba:	ldrb.w	sl, [r0, #13]
    a2be:	b.n	a28a <FatFile::openNext(FatFile*, int)+0x42>
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == '.' || dir->name[0] == FAT_NAME_DELETED) {
      lfnOrd = 0;
    } else if (isFileOrSubdir(dir)) {
      if (lfnOrd && checksum != lfnChecksum(dir->name)) {
    a2c0:	cmp	r7, #0
    a2c2:	bne.n	a2a2 <FatFile::openNext(FatFile*, int)+0x5a>
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!openCachedEntry(dirFile, index, oflag, lfnOrd)) {
    a2c4:	str	r7, [sp, #0]
    a2c6:	mov	r3, r9
    a2c8:	ubfx	r2, r6, #5, #16
    a2cc:	mov	r1, r5
    a2ce:	mov	r0, r8
    a2d0:	bl	a170 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)>
    a2d4:	b.n	a2ac <FatFile::openNext(FatFile*, int)+0x64>
    a2d6:	nop

0000a2d8 <FatFile::sync()>:
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    a2d8:	ldrb	r3, [r0, #0]
    a2da:	cbz	r3, a2e0 <FatFile::sync()+0x8>
    a2dc:	b.w	98e0 <FatFile::sync() [clone .part.40]>
  DBG_FAIL_MACRO;

fail:
  m_error |= WRITE_ERROR;
  return false;
}
    a2e0:	movs	r0, #1
    a2e2:	bx	lr

0000a2e4 <FatFile::truncate()>:
}
//------------------------------------------------------------------------------
bool FatFile::truncate() {
  uint32_t toFree;
  // error if not a normal file or read-only
  if (!isWritable()) {
    a2e4:	ldrb	r3, [r0, #2]
    a2e6:	lsls	r3, r3, #30
    a2e8:	bpl.n	a320 <FatFile::truncate()+0x3c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_firstCluster == 0) {
    a2ea:	ldr	r3, [r0, #32]
    a2ec:	cbz	r3, a31c <FatFile::truncate()+0x38>
      return true;
  }
  if (m_curCluster) {
    a2ee:	ldr	r1, [r0, #16]

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::truncate() {
    a2f0:	push	{r4, lr}
    a2f2:	mov	r4, r0
    a2f4:	sub	sp, #8
    goto fail;
  }
  if (m_firstCluster == 0) {
      return true;
  }
  if (m_curCluster) {
    a2f6:	cbnz	r1, a336 <FatFile::truncate()+0x52>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
  } else {
    toFree = m_firstCluster;
    a2f8:	str	r3, [sp, #4]
    m_firstCluster = 0;
    a2fa:	str	r1, [r0, #32]
  }
  if (toFree) {
    if (!m_vol->freeChain(toFree)) {
    a2fc:	mov	r1, r3
    a2fe:	ldr	r0, [r4, #8]
    a300:	bl	a768 <FatPartition::freeChain(unsigned long)>
    a304:	cbz	r0, a332 <FatFile::truncate()+0x4e>
    }
  }
  m_fileSize = m_curPosition;

  // need to update directory entry
  m_flags |= FILE_FLAG_DIR_DIRTY;
    a306:	ldrb	r3, [r4, #2]
    if (!m_vol->freeChain(toFree)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  m_fileSize = m_curPosition;
    a308:	ldr	r1, [r4, #20]

  // need to update directory entry
  m_flags |= FILE_FLAG_DIR_DIRTY;
    a30a:	orn	r3, r3, #127	; 0x7f
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    a30e:	ldrb	r2, [r4, #0]
    if (!m_vol->freeChain(toFree)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  m_fileSize = m_curPosition;
    a310:	str	r1, [r4, #28]

  // need to update directory entry
  m_flags |= FILE_FLAG_DIR_DIRTY;
    a312:	strb	r3, [r4, #2]
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    a314:	cbnz	r2, a352 <FatFile::truncate()+0x6e>
  if (!isWritable()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_firstCluster == 0) {
      return true;
    a316:	movs	r0, #1
  }
  return true;

 fail:
  return false;
}
    a318:	add	sp, #8
    a31a:	pop	{r4, pc}
  if (!isWritable()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_firstCluster == 0) {
      return true;
    a31c:	movs	r0, #1
  }
  return true;

 fail:
  return false;
}
    a31e:	bx	lr
    goto fail;
  }
  return true;

 fail:
  return false;
    a320:	movs	r0, #0
}
    a322:	bx	lr
  }
  uint32_t clusterStartSector(uint32_t cluster) const;
  int8_t fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  bool fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
    a324:	mvn.w	r2, #4026531840	; 0xf0000000
    a328:	ldr	r1, [r4, #16]
    a32a:	ldr	r0, [r4, #8]
    a32c:	bl	a67c <FatPartition::fatPut(unsigned long, unsigned long)>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (fg) {
      // current cluster is end of chain
      if (!m_vol->fatPutEOC(m_curCluster)) {
    a330:	cbnz	r0, a34a <FatFile::truncate()+0x66>
    goto fail;
  }
  return true;

 fail:
  return false;
    a332:	movs	r0, #0
    a334:	b.n	a318 <FatFile::truncate()+0x34>
  }
  if (m_firstCluster == 0) {
      return true;
  }
  if (m_curCluster) {
    toFree = 0;
    a336:	movs	r3, #0
    a338:	add	r2, sp, #8
    int8_t fg = m_vol->fatGet(m_curCluster, &toFree);
    a33a:	ldr	r0, [r0, #8]
  }
  if (m_firstCluster == 0) {
      return true;
  }
  if (m_curCluster) {
    toFree = 0;
    a33c:	str.w	r3, [r2, #-4]!
    int8_t fg = m_vol->fatGet(m_curCluster, &toFree);
    a340:	bl	a60c <FatPartition::fatGet(unsigned long, unsigned long*)>
    if (fg < 0) {
    a344:	cmp	r0, #0
    a346:	blt.n	a332 <FatFile::truncate()+0x4e>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (fg) {
    a348:	bne.n	a324 <FatFile::truncate()+0x40>
    }
  } else {
    toFree = m_firstCluster;
    m_firstCluster = 0;
  }
  if (toFree) {
    a34a:	ldr	r3, [sp, #4]
    a34c:	cmp	r3, #0
    a34e:	beq.n	a306 <FatFile::truncate()+0x22>
    a350:	b.n	a2fc <FatFile::truncate()+0x18>
    a352:	mov	r0, r4
    a354:	bl	98e0 <FatFile::sync() [clone .part.40]>
    a358:	b.n	a318 <FatFile::truncate()+0x34>
    a35a:	nop

0000a35c <FatFile::write(void const*, unsigned int)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
size_t FatFile::write(const void* buf, size_t nbyte) {
    a35c:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a360:	ldrb	r3, [r0, #2]
    a362:	mov	r4, r0
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isWritable()) {
    a364:	lsls	r5, r3, #30
    a366:	bmi.n	a378 <FatFile::write(void const*, unsigned int)+0x1c>
  }
  return nbyte;

fail:
  // return for write error
  m_error |= WRITE_ERROR;
    a368:	ldrb	r3, [r4, #1]
  return -1;
    a36a:	mov.w	r0, #4294967295
  }
  return nbyte;

fail:
  // return for write error
  m_error |= WRITE_ERROR;
    a36e:	orr.w	r3, r3, #1
    a372:	strb	r3, [r4, #1]
  return -1;
    a374:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a378:	mov	r9, r2
  if (!isWritable()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & FILE_FLAG_APPEND)) {
    a37a:	lsls	r2, r3, #28
    a37c:	mov	r8, r1
    a37e:	bmi.w	a50c <FatFile::write(void const*, unsigned int)+0x1b0>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
    a382:	ldr	r2, [r4, #20]
    a384:	mvns	r3, r2
    a386:	cmp	r9, r3
    a388:	bhi.n	a368 <FatFile::write(void const*, unsigned int)+0xc>
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
    a38a:	cmp.w	r9, #0
    a38e:	beq.n	a418 <FatFile::write(void const*, unsigned int)+0xbc>
    a390:	mov	r6, r9
    m_part = vol;
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    a392:	mov.w	fp, #0
    m_lbn = 0XFFFFFFFF;
    a396:	mov.w	sl, #4294967295
    uint8_t sectorOfCluster = m_vol->sectorOfCluster(m_curPosition);
    a39a:	ldr	r0, [r4, #8]
    uint16_t sectorOffset = m_curPosition & m_vol->sectorMask();
    a39c:	ubfx	r7, r2, #0, #9
    if (sectorOfCluster == 0 && sectorOffset == 0) {
      // start of new cluster
      if (m_curCluster != 0) {
    a3a0:	ldr	r1, [r4, #16]
  }
  //----------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t sectorOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterSectorMask;
    a3a2:	ldrb	r5, [r0, #5]
    goto fail;
  }
  while (nToWrite) {
    uint8_t sectorOfCluster = m_vol->sectorOfCluster(m_curPosition);
    uint16_t sectorOffset = m_curPosition & m_vol->sectorMask();
    if (sectorOfCluster == 0 && sectorOffset == 0) {
    a3a4:	ands.w	r5, r5, r2, lsr #9
    a3a8:	bne.n	a494 <FatFile::write(void const*, unsigned int)+0x138>
    a3aa:	cmp	r7, #0
    a3ac:	bne.n	a494 <FatFile::write(void const*, unsigned int)+0x138>
      // start of new cluster
      if (m_curCluster != 0) {
    a3ae:	cmp	r1, #0
    a3b0:	beq.n	a438 <FatFile::write(void const*, unsigned int)+0xdc>
#if USE_FAT_FILE_FLAG_CONTIGUOUS
        int8_t fg;
        if (isContiguous() && m_fileSize > m_curPosition) {
    a3b2:	ldrb	r3, [r4, #2]
    a3b4:	lsls	r3, r3, #25
    a3b6:	bpl.n	a4ae <FatFile::write(void const*, unsigned int)+0x152>
    a3b8:	ldr	r3, [r4, #28]
    a3ba:	cmp	r3, r2
    a3bc:	bls.n	a4ae <FatFile::write(void const*, unsigned int)+0x152>
          m_curCluster++;
    a3be:	adds	r1, #1
    a3c0:	str	r1, [r4, #16]
          m_curCluster = m_firstCluster;
        }
      }
    }
    // sector for data write
    uint32_t sector = m_vol->clusterStartSector(m_curCluster)
    a3c2:	bl	a600 <FatPartition::clusterStartSector(unsigned long) const>
                      + sectorOfCluster;
    a3c6:	adds	r1, r5, r0

    if (sectorOffset != 0 || nToWrite < m_vol->bytesPerSector()) {
    a3c8:	cmp.w	r6, #512	; 0x200
    a3cc:	bcc.w	a51a <FatFile::write(void const*, unsigned int)+0x1be>
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
#if USE_MULTI_SECTOR_IO
    } else if (nToWrite >= 2*m_vol->bytesPerSector()) {
    a3d0:	cmp.w	r6, #1024	; 0x400
    a3d4:	ldr	r2, [r4, #8]
    a3d6:	bcc.n	a4d0 <FatFile::write(void const*, unsigned int)+0x174>
      // use multiple sector write command
      uint32_t maxSectors = m_vol->sectorsPerCluster() - sectorOfCluster;
    a3d8:	ldrb	r7, [r2, #4]
      uint32_t nSector = nToWrite >> m_vol->bytesPerSectorShift();
    a3da:	lsrs	r3, r6, #9
    a3dc:	ldr	r0, [r2, #44]	; 0x2c
        }
      }
#if USE_MULTI_SECTOR_IO
    } else if (nToWrite >= 2*m_vol->bytesPerSector()) {
      // use multiple sector write command
      uint32_t maxSectors = m_vol->sectorsPerCluster() - sectorOfCluster;
    a3de:	subs	r5, r7, r5
    a3e0:	cmp	r3, r5
    a3e2:	it	cs
    a3e4:	movcs	r3, r5
        nSector = maxSectors;
      }
      n = nSector << m_vol->bytesPerSectorShift();
      // Check for cache sector in write range.
      if (sector <= m_vol->cacheSectorNumber()
          && sector < (m_vol->cacheSectorNumber() + nSector)) {
    a3e6:	cmp	r0, r1
      uint32_t maxSectors = m_vol->sectorsPerCluster() - sectorOfCluster;
      uint32_t nSector = nToWrite >> m_vol->bytesPerSectorShift();
      if (nSector > maxSectors) {
        nSector = maxSectors;
      }
      n = nSector << m_vol->bytesPerSectorShift();
    a3e8:	mov.w	r5, r3, lsl #9
      // Check for cache sector in write range.
      if (sector <= m_vol->cacheSectorNumber()
          && sector < (m_vol->cacheSectorNumber() + nSector)) {
    a3ec:	bcc.n	a3fe <FatFile::write(void const*, unsigned int)+0xa2>
    a3ee:	add	r0, r3
    a3f0:	cmp	r0, r1
    a3f2:	bls.n	a3fe <FatFile::write(void const*, unsigned int)+0xa2>
    m_part = vol;
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    a3f4:	strb.w	fp, [r2, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
    a3f8:	str.w	sl, [r2, #44]	; 0x2c
    a3fc:	ldr	r2, [r4, #8]
    a3fe:	ldr	r0, [r2, #0]
#if USE_MULTI_SECTOR_IO
  bool readSectors(uint32_t sector, uint8_t* dst, size_t ns) {
    return m_blockDev->readSectors(sector, dst, ns);
  }
  bool writeSectors(uint32_t sector, const uint8_t* src, size_t ns) {
    return m_blockDev->writeSectors(sector, src, ns);
    a400:	mov	r2, r8
    a402:	ldr	r7, [r0, #0]
    a404:	ldr	r7, [r7, #28]
    a406:	blx	r7
        // Invalidate cache if cache sector is in the range.
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeSectors(sector, src, nSector)) {
    a408:	cmp	r0, #0
    a40a:	beq.n	a368 <FatFile::write(void const*, unsigned int)+0xc>
      if (!m_vol->writeSector(sector, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    a40c:	ldr	r2, [r4, #20]
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
    a40e:	subs	r6, r6, r5
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    src += n;
    a410:	add	r8, r5
      if (!m_vol->writeSector(sector, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    a412:	add	r2, r5
    a414:	str	r2, [r4, #20]
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
    a416:	bne.n	a39a <FatFile::write(void const*, unsigned int)+0x3e>
    }
    m_curPosition += n;
    src += n;
    nToWrite -= n;
  }
  if (m_curPosition > m_fileSize) {
    a418:	ldr	r3, [r4, #28]
    a41a:	cmp	r3, r2
    a41c:	bcc.w	a52a <FatFile::write(void const*, unsigned int)+0x1ce>
    // update fileSize and insure sync will update dir entry
    m_fileSize = m_curPosition;
    m_flags |= FILE_FLAG_DIR_DIRTY;
  } else if (FsDateTime::callback) {
    a420:	ldr	r3, [pc, #284]	; (a540 <FatFile::write(void const*, unsigned int)+0x1e4>)
    a422:	ldr	r3, [r3, #0]
    a424:	cmp	r3, #0
    a426:	beq.w	a53a <FatFile::write(void const*, unsigned int)+0x1de>
    // insure sync will update modified date and time
    m_flags |= FILE_FLAG_DIR_DIRTY;
    a42a:	ldrb	r3, [r4, #2]
    a42c:	mov	r0, r9
    a42e:	orn	r3, r3, #127	; 0x7f
    a432:	strb	r3, [r4, #2]
    a434:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
      } else {
        if (m_firstCluster == 0) {
    a438:	ldr	r1, [r4, #32]
    a43a:	cmp	r1, #0
    a43c:	beq.n	a4ec <FatFile::write(void const*, unsigned int)+0x190>
            DBG_FAIL_MACRO;
            goto fail;
          }
          m_firstCluster = m_curCluster;
        } else {
          m_curCluster = m_firstCluster;
    a43e:	str	r1, [r4, #16]
        }
      }
    }
    // sector for data write
    uint32_t sector = m_vol->clusterStartSector(m_curCluster)
    a440:	bl	a600 <FatPartition::clusterStartSector(unsigned long) const>
                      + sectorOfCluster;

    if (sectorOffset != 0 || nToWrite < m_vol->bytesPerSector()) {
    a444:	cmp.w	r6, #512	; 0x200
          m_curCluster = m_firstCluster;
        }
      }
    }
    // sector for data write
    uint32_t sector = m_vol->clusterStartSector(m_curCluster)
    a448:	mov	r1, r0
                      + sectorOfCluster;

    if (sectorOffset != 0 || nToWrite < m_vol->bytesPerSector()) {
    a44a:	bcs.n	a3d0 <FatFile::write(void const*, unsigned int)+0x74>
      // partial sector - must use cache
      // max space in sector
      n = m_vol->bytesPerSector() - sectorOffset;
    a44c:	rsb	r5, r7, #512	; 0x200
    a450:	ldr	r0, [r4, #8]
    a452:	cmp	r5, r6
    a454:	it	cs
    a456:	movcs	r5, r6
      // lesser of space and amount to write
      if (n > nToWrite) {
        n = nToWrite;
      }

      if (sectorOffset == 0 &&
    a458:	ldr	r2, [r4, #20]
    a45a:	ldr	r3, [r4, #28]
    a45c:	cmp	r2, r3
    a45e:	bcs.n	a466 <FatFile::write(void const*, unsigned int)+0x10a>
         (m_curPosition >= m_fileSize || m_flags & FILE_FLAG_PREALLOCATE)) {
    a460:	ldrb	r3, [r4, #2]
    a462:	lsls	r3, r3, #26
    a464:	bpl.n	a4aa <FatFile::write(void const*, unsigned int)+0x14e>
        // start of new sector don't need to read into cache
        cacheOption = FatCache::CACHE_RESERVE_FOR_WRITE;
    a466:	movs	r2, #5
  bool cacheSync() {
    return m_cache.sync() && syncDevice();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t sector, uint8_t options) {
    return m_cache.read(sector, options);
    a468:	adds	r0, #36	; 0x24
    a46a:	bl	a590 <FatCache::read(unsigned long, unsigned char)>
      } else {
        // rewrite part of sector
        cacheOption = FatCache::CACHE_FOR_WRITE;
      }
      pc = m_vol->cacheFetchData(sector, cacheOption);
      if (!pc) {
    a46e:	cmp	r0, #0
    a470:	beq.w	a368 <FatFile::write(void const*, unsigned int)+0xc>
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + sectorOffset;
      memcpy(dst, src, n);
    a474:	add	r0, r7
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    a476:	add	r7, r5
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + sectorOffset;
      memcpy(dst, src, n);
    a478:	mov	r2, r5
    a47a:	mov	r1, r8
    a47c:	bl	d064 <memcpy>
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    a480:	cmp.w	r7, #512	; 0x200
    a484:	bne.n	a40c <FatFile::write(void const*, unsigned int)+0xb0>
  }
  void cacheInvalidate() {
    m_cache.invalidate();
  }
  bool cacheSyncData() {
    return m_cache.sync();
    a486:	ldr	r0, [r4, #8]
    a488:	adds	r0, #36	; 0x24
    a48a:	bl	a5f0 <FatCache::sync()>
        // Force write if sector is full - improves large writes.
        if (!m_vol->cacheSyncData()) {
    a48e:	cmp	r0, #0
    a490:	bne.n	a40c <FatFile::write(void const*, unsigned int)+0xb0>
    a492:	b.n	a368 <FatFile::write(void const*, unsigned int)+0xc>
          m_curCluster = m_firstCluster;
        }
      }
    }
    // sector for data write
    uint32_t sector = m_vol->clusterStartSector(m_curCluster)
    a494:	bl	a600 <FatPartition::clusterStartSector(unsigned long) const>
                      + sectorOfCluster;
    a498:	adds	r1, r5, r0

    if (sectorOffset != 0 || nToWrite < m_vol->bytesPerSector()) {
    a49a:	cmp	r7, #0
    a49c:	beq.n	a3c8 <FatFile::write(void const*, unsigned int)+0x6c>
      // partial sector - must use cache
      // max space in sector
      n = m_vol->bytesPerSector() - sectorOffset;
    a49e:	rsb	r5, r7, #512	; 0x200
    a4a2:	ldr	r0, [r4, #8]
    a4a4:	cmp	r5, r6
    a4a6:	it	cs
    a4a8:	movcs	r5, r6
         (m_curPosition >= m_fileSize || m_flags & FILE_FLAG_PREALLOCATE)) {
        // start of new sector don't need to read into cache
        cacheOption = FatCache::CACHE_RESERVE_FOR_WRITE;
      } else {
        // rewrite part of sector
        cacheOption = FatCache::CACHE_FOR_WRITE;
    a4aa:	movs	r2, #1
    a4ac:	b.n	a468 <FatFile::write(void const*, unsigned int)+0x10c>
        int8_t fg;
        if (isContiguous() && m_fileSize > m_curPosition) {
          m_curCluster++;
          fg = 1;
        } else {
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    a4ae:	add.w	r2, r4, #16
    a4b2:	bl	a60c <FatPartition::fatGet(unsigned long, unsigned long*)>
          if (fg < 0) {
    a4b6:	cmp	r0, #0
    a4b8:	blt.w	a368 <FatFile::write(void const*, unsigned int)+0xc>
        if (fg < 0) {
          DBG_FAIL_MACRO;
          goto fail;
        }
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
        if (fg == 0) {
    a4bc:	bne.n	a4ca <FatFile::write(void const*, unsigned int)+0x16e>
          // add cluster if at end of chain
          if (!addCluster()) {
    a4be:	mov	r0, r4
    a4c0:	bl	97f8 <FatFile::addCluster()>
    a4c4:	cmp	r0, #0
    a4c6:	beq.w	a368 <FatFile::write(void const*, unsigned int)+0xc>
    a4ca:	ldr	r0, [r4, #8]
    a4cc:	ldr	r1, [r4, #16]
    a4ce:	b.n	a440 <FatFile::write(void const*, unsigned int)+0xe4>
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // use single sector write command
      n = m_vol->bytesPerSector();
      if (m_vol->cacheSectorNumber() == sector) {
    a4d0:	ldr	r3, [r2, #44]	; 0x2c
    a4d2:	cmp	r3, r1
    a4d4:	beq.n	a500 <FatFile::write(void const*, unsigned int)+0x1a4>
    a4d6:	ldr	r0, [r2, #0]
  }
  bool syncDevice() {
    return m_blockDev->syncDevice();
  }
  bool writeSector(uint32_t sector, const uint8_t* src) {
    return m_blockDev->writeSector(sector, src);
    a4d8:	mov	r2, r8
    a4da:	ldr	r3, [r0, #0]
    a4dc:	ldr	r3, [r3, #24]
    a4de:	blx	r3
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeSector(sector, src)) {
    a4e0:	cmp	r0, #0
    a4e2:	beq.w	a368 <FatFile::write(void const*, unsigned int)+0xc>
        goto fail;
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // use single sector write command
      n = m_vol->bytesPerSector();
    a4e6:	mov.w	r5, #512	; 0x200
    a4ea:	b.n	a40c <FatFile::write(void const*, unsigned int)+0xb0>
          }
        }
      } else {
        if (m_firstCluster == 0) {
          // allocate first cluster of file
          if (!addCluster()) {
    a4ec:	mov	r0, r4
    a4ee:	bl	97f8 <FatFile::addCluster()>
    a4f2:	cmp	r0, #0
    a4f4:	beq.w	a368 <FatFile::write(void const*, unsigned int)+0xc>
            DBG_FAIL_MACRO;
            goto fail;
          }
          m_firstCluster = m_curCluster;
    a4f8:	ldr	r1, [r4, #16]
    a4fa:	ldr	r0, [r4, #8]
    a4fc:	str	r1, [r4, #32]
    a4fe:	b.n	a440 <FatFile::write(void const*, unsigned int)+0xe4>
    m_part = vol;
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    a500:	strb.w	fp, [r2, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
    a504:	str.w	sl, [r2, #44]	; 0x2c
    a508:	ldr	r2, [r4, #8]
    a50a:	b.n	a4d6 <FatFile::write(void const*, unsigned int)+0x17a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & FILE_FLAG_APPEND)) {
    if (!seekSet(m_fileSize)) {
    a50c:	ldr	r1, [r0, #28]
    a50e:	bl	a0dc <FatFile::seekSet(unsigned long)>
    a512:	cmp	r0, #0
    a514:	beq.w	a368 <FatFile::write(void const*, unsigned int)+0xc>
    a518:	b.n	a382 <FatFile::write(void const*, unsigned int)+0x26>
    a51a:	cmp.w	r6, #512	; 0x200
    a51e:	mov	r5, r6
                      + sectorOfCluster;

    if (sectorOffset != 0 || nToWrite < m_vol->bytesPerSector()) {
      // partial sector - must use cache
      // max space in sector
      n = m_vol->bytesPerSector() - sectorOffset;
    a520:	ldr	r0, [r4, #8]
    a522:	it	cs
    a524:	movcs.w	r5, #512	; 0x200
    a528:	b.n	a458 <FatFile::write(void const*, unsigned int)+0xfc>
    nToWrite -= n;
  }
  if (m_curPosition > m_fileSize) {
    // update fileSize and insure sync will update dir entry
    m_fileSize = m_curPosition;
    m_flags |= FILE_FLAG_DIR_DIRTY;
    a52a:	ldrb	r3, [r4, #2]
    a52c:	mov	r0, r9
    src += n;
    nToWrite -= n;
  }
  if (m_curPosition > m_fileSize) {
    // update fileSize and insure sync will update dir entry
    m_fileSize = m_curPosition;
    a52e:	str	r2, [r4, #28]
    m_flags |= FILE_FLAG_DIR_DIRTY;
    a530:	orn	r3, r3, #127	; 0x7f
    a534:	strb	r3, [r4, #2]
    a536:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a53a:	mov	r0, r9
    a53c:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a540:	.word	0x20005b20

0000a544 <FatCache::sync() [clone .part.8]>:
fail:

  return nullptr;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
    a544:	ldr	r3, [r0, #4]
  }
  bool syncDevice() {
    return m_blockDev->syncDevice();
  }
  bool writeSector(uint32_t sector, const uint8_t* src) {
    return m_blockDev->writeSector(sector, src);
    a546:	ldr	r1, [r0, #8]
    a548:	push	{r4, r5, r6, lr}
  if (m_status & CACHE_STATUS_DIRTY) {
    if (!m_part->writeSector(m_lbn, m_buffer.data)) {
    a54a:	add.w	r6, r0, #12
fail:

  return nullptr;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
    a54e:	mov	r4, r0
    a550:	ldr	r0, [r3, #0]
    a552:	mov	r2, r6
    a554:	ldr	r3, [r0, #0]
    a556:	ldr	r3, [r3, #24]
    a558:	blx	r3
  if (m_status & CACHE_STATUS_DIRTY) {
    if (!m_part->writeSector(m_lbn, m_buffer.data)) {
    a55a:	cbz	r0, a56e <FatCache::sync() [clone .part.8]+0x2a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
    a55c:	ldrb	r3, [r4, #0]
    a55e:	mov	r5, r0
    a560:	lsls	r2, r3, #30
    a562:	bmi.n	a574 <FatCache::sync() [clone .part.8]+0x30>
      if (!m_part->writeSector(sector, m_buffer.data)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
    a564:	bic.w	r3, r3, #1
  }
  return true;

fail:
  return false;
}
    a568:	mov	r0, r5
      if (!m_part->writeSector(sector, m_buffer.data)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
    a56a:	strb	r3, [r4, #0]
  }
  return true;

fail:
  return false;
}
    a56c:	pop	{r4, r5, r6, pc}
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;

fail:
  return false;
    a56e:	movs	r5, #0
}
    a570:	mov	r0, r5
    a572:	pop	{r4, r5, r6, pc}
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
      uint32_t sector = m_lbn + m_part->sectorsPerFat();
    a574:	ldr	r3, [r4, #4]
    a576:	mov	r2, r6
    a578:	ldr	r1, [r4, #8]
    a57a:	ldr	r0, [r3, #0]
    a57c:	ldr	r6, [r3, #16]
    a57e:	ldr	r3, [r0, #0]
    a580:	add	r1, r6
    a582:	ldr	r3, [r3, #24]
    a584:	blx	r3
      if (!m_part->writeSector(sector, m_buffer.data)) {
    a586:	cmp	r0, #0
    a588:	beq.n	a56e <FatCache::sync() [clone .part.8]+0x2a>
    a58a:	ldrb	r3, [r4, #0]
    a58c:	b.n	a564 <FatCache::sync() [clone .part.8]+0x20>
    a58e:	nop

0000a590 <FatCache::read(unsigned long, unsigned char)>:
#define DBG_FILE "FatPartition.cpp"
#include "../common/DebugMacros.h"
#include "../common/FsStructs.h"
#include "FatPartition.h"
//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t sector, uint8_t option) {
    a590:	push	{r3, r4, r5, r6, r7, lr}
  if (m_lbn != sector) {
    a592:	ldr	r3, [r0, #8]
#define DBG_FILE "FatPartition.cpp"
#include "../common/DebugMacros.h"
#include "../common/FsStructs.h"
#include "FatPartition.h"
//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t sector, uint8_t option) {
    a594:	mov	r6, r0
    a596:	mov	r4, r2
  if (m_lbn != sector) {
    a598:	cmp	r3, r1
    a59a:	beq.n	a5bc <FatCache::read(unsigned long, unsigned char)+0x2c>

  return nullptr;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    a59c:	ldrb	r3, [r0, #0]
    a59e:	mov	r7, r1
    a5a0:	lsls	r2, r3, #31
    a5a2:	bmi.n	a5ca <FatCache::read(unsigned long, unsigned char)+0x3a>
  if (m_lbn != sector) {
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
    a5a4:	lsls	r3, r4, #29
    a5a6:	bpl.n	a5d6 <FatCache::read(unsigned long, unsigned char)+0x46>
    a5a8:	add.w	r5, r6, #12
    a5ac:	movs	r3, #0
      }
    }
    m_status = 0;
    m_lbn = sector;
  }
  m_status |= option & CACHE_STATUS_MASK;
    a5ae:	and.w	r4, r4, #3
    a5b2:	mov	r0, r5
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status = 0;
    m_lbn = sector;
    a5b4:	str	r7, [r6, #8]
  }
  m_status |= option & CACHE_STATUS_MASK;
    a5b6:	orrs	r4, r3
    a5b8:	strb	r4, [r6, #0]
  return &m_buffer;

fail:

  return nullptr;
}
    a5ba:	pop	{r3, r4, r5, r6, r7, pc}
    a5bc:	ldrsb.w	r3, [r0], #12
      }
    }
    m_status = 0;
    m_lbn = sector;
  }
  m_status |= option & CACHE_STATUS_MASK;
    a5c0:	and.w	r4, r4, #3
    a5c4:	orrs	r4, r3
    a5c6:	strb	r4, [r6, #0]
  return &m_buffer;

fail:

  return nullptr;
}
    a5c8:	pop	{r3, r4, r5, r6, r7, pc}
    a5ca:	bl	a544 <FatCache::sync() [clone .part.8]>
#include "../common/FsStructs.h"
#include "FatPartition.h"
//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t sector, uint8_t option) {
  if (m_lbn != sector) {
    if (!sync()) {
    a5ce:	cmp	r0, #0
    a5d0:	bne.n	a5a4 <FatCache::read(unsigned long, unsigned char)+0x14>
  m_status |= option & CACHE_STATUS_MASK;
  return &m_buffer;

fail:

  return nullptr;
    a5d2:	movs	r0, #0
    a5d4:	pop	{r3, r4, r5, r6, r7, pc}
    a5d6:	ldr	r3, [r6, #4]
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
      if (!m_part->readSector(sector, m_buffer.data)) {
    a5d8:	add.w	r5, r6, #12
  uint32_t m_lastCluster;             // Last cluster number in FAT.
  uint32_t m_rootDirStart;            // Start sector FAT16, cluster FAT32.
  //----------------------------------------------------------------------------
  // sector I/O functions.
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
    a5dc:	mov	r1, r7
    a5de:	ldr	r0, [r3, #0]
    a5e0:	mov	r2, r5
    a5e2:	ldr	r3, [r0, #0]
    a5e4:	ldr	r3, [r3, #8]
    a5e6:	blx	r3
    a5e8:	cmp	r0, #0
    a5ea:	bne.n	a5ac <FatCache::read(unsigned long, unsigned char)+0x1c>
    a5ec:	b.n	a5d2 <FatCache::read(unsigned long, unsigned char)+0x42>
    a5ee:	nop

0000a5f0 <FatCache::sync()>:

  return nullptr;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    a5f0:	ldrb	r3, [r0, #0]
    a5f2:	lsls	r3, r3, #31
    a5f4:	bmi.n	a5fa <FatCache::sync()+0xa>
  }
  return true;

fail:
  return false;
}
    a5f6:	movs	r0, #1
    a5f8:	bx	lr
    a5fa:	b.w	a544 <FatCache::sync() [clone .part.8]>
    a5fe:	nop

0000a600 <FatPartition::clusterStartSector(unsigned long) const>:
fail:
  return false;
}
//------------------------------------------------------------------------------
uint32_t FatPartition::clusterStartSector(uint32_t cluster) const {
  return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    a600:	ldrb	r3, [r0, #6]
    a602:	subs	r1, #2
    a604:	ldr	r0, [r0, #20]
    a606:	lsls	r1, r3
}
    a608:	add	r0, r1
    a60a:	bx	lr

0000a60c <FatPartition::fatGet(unsigned long, unsigned long*)>:
  uint32_t sector;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
    a60c:	cmp	r1, #1
    a60e:	bls.n	a676 <FatPartition::fatGet(unsigned long, unsigned long*)+0x6a>
    a610:	ldr	r3, [r0, #28]
    a612:	cmp	r1, r3
    a614:	bhi.n	a676 <FatPartition::fatGet(unsigned long, unsigned long*)+0x6a>
uint32_t FatPartition::clusterStartSector(uint32_t cluster) const {
  return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
}
//------------------------------------------------------------------------------
// Fetch a FAT entry - return -1 error, 0 EOC, else 1.
int8_t FatPartition::fatGet(uint32_t cluster, uint32_t* value) {
    a616:	push	{r4, r5, r6, lr}
    a618:	ldrb	r3, [r0, #7]
    a61a:	mov	r6, r2
    a61c:	mov	r5, r0
    a61e:	mov	r4, r1
  if (cluster < 2 || cluster > m_lastCluster) {
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (fatType() == 32) {
    a620:	cmp	r3, #32
    a622:	beq.n	a658 <FatPartition::fatGet(unsigned long, unsigned long*)+0x4c>
      DBG_FAIL_MACRO;
      goto fail;
    }
    next = getLe32(reinterpret_cast<uint8_t*>
                  (&pc->fat32[cluster & (m_sectorMask >> 2)]));
  } else if (fatType() == 16) {
    a624:	cmp	r3, #16
    a626:	bne.n	a652 <FatPartition::fatGet(unsigned long, unsigned long*)+0x46>
  FatCache m_cache;
#if USE_SEPARATE_FAT_CACHE
  FatCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t sector, uint8_t options) {
    return m_fatCache.read(sector,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
    a628:	ldr	r3, [r0, #24]
    a62a:	ubfx	r1, r1, #8, #8
    a62e:	movs	r2, #2
    a630:	add.w	r0, r0, #560	; 0x230
    a634:	add	r1, r3
    a636:	bl	a590 <FatCache::read(unsigned long, unsigned char)>
    cluster &= 0XFFFF;
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 1) );
    pc = cacheFetchFat(sector, FatCache::CACHE_FOR_READ);
    if (!pc) {
    a63a:	cbz	r0, a652 <FatPartition::fatGet(unsigned long, unsigned long*)+0x46>
void lbaToMbrChs(uint8_t* chs, uint32_t capacityMB, uint32_t lba);
//-----------------------------------------------------------------------------
#if !defined(USE_SIMPLE_LITTLE_ENDIAN) || USE_SIMPLE_LITTLE_ENDIAN
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
    a63c:	uxtb	r1, r4
      DBG_FAIL_MACRO;
      goto fail;
    }
    next = getLe16(reinterpret_cast<uint8_t*>
                  (&pc->fat16[cluster & (m_sectorMask >> 1)]));
    a63e:	ldrh.w	r3, [r0, r1, lsl #1]
    next = cluster & 1 ? tmp >> 4 : tmp & 0XFFF;
  } else {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isEOC(next)) {
    a642:	ldr	r2, [r5, #28]
    a644:	cmp	r3, r2
    a646:	bhi.n	a64e <FatPartition::fatGet(unsigned long, unsigned long*)+0x42>
    return 0;
  }
  *value = next;
    a648:	str	r3, [r6, #0]
  return 1;
    a64a:	movs	r0, #1
    a64c:	pop	{r4, r5, r6, pc}
  } else {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isEOC(next)) {
    return 0;
    a64e:	movs	r0, #0
  *value = next;
  return 1;

fail:
  return -1;
}
    a650:	pop	{r4, r5, r6, pc}
  }
  *value = next;
  return 1;

fail:
  return -1;
    a652:	mov.w	r0, #4294967295
    a656:	pop	{r4, r5, r6, pc}
    a658:	ldr	r1, [r0, #24]
    a65a:	movs	r2, #2
    a65c:	add.w	r0, r0, #560	; 0x230
    a660:	add.w	r1, r1, r4, lsr #7
    a664:	bl	a590 <FatCache::read(unsigned long, unsigned char)>
  }

  if (fatType() == 32) {
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    pc = cacheFetchFat(sector, FatCache::CACHE_FOR_READ);
    if (!pc) {
    a668:	cmp	r0, #0
    a66a:	beq.n	a652 <FatPartition::fatGet(unsigned long, unsigned long*)+0x46>
}
inline uint32_t getLe32(const uint8_t* src) {
  return *reinterpret_cast<const uint32_t*>(src);
    a66c:	and.w	r1, r4, #127	; 0x7f
    a670:	ldr.w	r3, [r0, r1, lsl #2]
    a674:	b.n	a642 <FatPartition::fatGet(unsigned long, unsigned long*)+0x36>
  }
  *value = next;
  return 1;

fail:
  return -1;
    a676:	mov.w	r0, #4294967295
}
    a67a:	bx	lr

0000a67c <FatPartition::fatPut(unsigned long, unsigned long)>:
bool FatPartition::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t sector;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
    a67c:	cmp	r1, #1
    a67e:	bls.n	a6bc <FatPartition::fatPut(unsigned long, unsigned long)+0x40>
fail:
  return -1;
}
//------------------------------------------------------------------------------
// Store a FAT entry
bool FatPartition::fatPut(uint32_t cluster, uint32_t value) {
    a680:	push	{r3, r4, r5, lr}
  uint32_t sector;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
    a682:	ldr	r3, [r0, #28]
    a684:	cmp	r1, r3
    a686:	bhi.n	a696 <FatPartition::fatPut(unsigned long, unsigned long)+0x1a>
    a688:	ldrb	r3, [r0, #7]
    a68a:	mov	r5, r2
    a68c:	mov	r4, r1
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (fatType() == 32) {
    a68e:	cmp	r3, #32
    a690:	beq.n	a6c0 <FatPartition::fatPut(unsigned long, unsigned long)+0x44>
    setLe32(reinterpret_cast<uint8_t*>
           (&pc->fat32[cluster & (m_sectorMask >> 2)]), value);
    return true;
  }

  if (fatType() == 16) {
    a692:	cmp	r3, #16
    a694:	beq.n	a69a <FatPartition::fatPut(unsigned long, unsigned long)+0x1e>
    DBG_FAIL_MACRO;
    goto fail;
  }

fail:
  return false;
    a696:	movs	r0, #0
    a698:	pop	{r3, r4, r5, pc}
    a69a:	ldr	r3, [r0, #24]
    a69c:	ubfx	r1, r1, #8, #8
    a6a0:	add.w	r0, r0, #560	; 0x230
    a6a4:	movs	r2, #3
    a6a6:	add	r1, r3
    a6a8:	bl	a590 <FatCache::read(unsigned long, unsigned char)>

  if (fatType() == 16) {
    cluster &= 0XFFFF;
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 1) );
    pc = cacheFetchFat(sector, FatCache::CACHE_FOR_WRITE);
    if (!pc) {
    a6ac:	mov	r3, r0
    a6ae:	cmp	r0, #0
    a6b0:	beq.n	a696 <FatPartition::fatPut(unsigned long, unsigned long)+0x1a>
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    a6b2:	uxtb	r1, r4
      DBG_FAIL_MACRO;
      goto fail;
    }
    setLe16(reinterpret_cast<uint8_t*>
           (&pc->fat16[cluster & (m_sectorMask >> 1)]), value);
    return true;
    a6b4:	movs	r0, #1
    a6b6:	strh.w	r5, [r3, r1, lsl #1]
    goto fail;
  }

fail:
  return false;
}
    a6ba:	pop	{r3, r4, r5, pc}
    DBG_FAIL_MACRO;
    goto fail;
  }

fail:
  return false;
    a6bc:	movs	r0, #0
}
    a6be:	bx	lr
    a6c0:	ldr	r1, [r0, #24]
    a6c2:	movs	r2, #3
    a6c4:	add.w	r0, r0, #560	; 0x230
    a6c8:	add.w	r1, r1, r4, lsr #7
    a6cc:	bl	a590 <FatCache::read(unsigned long, unsigned char)>
  }

  if (fatType() == 32) {
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    pc = cacheFetchFat(sector, FatCache::CACHE_FOR_WRITE);
    if (!pc) {
    a6d0:	mov	r3, r0
    a6d2:	cmp	r0, #0
    a6d4:	beq.n	a696 <FatPartition::fatPut(unsigned long, unsigned long)+0x1a>
}

inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
    a6d6:	and.w	r1, r4, #127	; 0x7f
      DBG_FAIL_MACRO;
      goto fail;
    }
    setLe32(reinterpret_cast<uint8_t*>
           (&pc->fat32[cluster & (m_sectorMask >> 2)]), value);
    return true;
    a6da:	movs	r0, #1
    a6dc:	str.w	r5, [r3, r1, lsl #2]
    a6e0:	pop	{r3, r4, r5, pc}
    a6e2:	nop

0000a6e4 <FatPartition::allocateCluster(unsigned long, unsigned long*)>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatPartition::allocateCluster(uint32_t current, uint32_t* next) {
    a6e4:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t find;
  bool setStart;
  if (m_allocSearchStart < current) {
    a6e8:	ldr	r4, [r0, #12]

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatPartition::allocateCluster(uint32_t current, uint32_t* next) {
    a6ea:	sub	sp, #8
    a6ec:	mov	r5, r0
    a6ee:	mov	r7, r1
  uint32_t find;
  bool setStart;
  if (m_allocSearchStart < current) {
    a6f0:	cmp	r4, r1

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatPartition::allocateCluster(uint32_t current, uint32_t* next) {
    a6f2:	mov	r8, r2
  uint32_t find;
  bool setStart;
  if (m_allocSearchStart < current) {
    a6f4:	bcs.n	a762 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x7e>
    a6f6:	mov	r4, r1
    // Try to keep file contiguous. Start just after current cluster.
    find = current;
    setStart = false;
    a6f8:	movs	r6, #0
  } else {
    find = m_allocSearchStart;
    setStart = true;
  }
  while (1) {
    find++;
    a6fa:	adds	r4, #1
    a6fc:	ldr	r3, [r5, #28]
      // Can't find space, already searched clusters after current.
      DBG_FAIL_MACRO;
      goto fail;
    }
    uint32_t f;
    int8_t fg = fatGet(find, &f);
    a6fe:	add	r2, sp, #4
    a700:	mov	r0, r5
    find = m_allocSearchStart;
    setStart = true;
  }
  while (1) {
    find++;
    if (find > m_lastCluster) {
    a702:	cmp	r4, r3
      // Can't find space, already searched clusters after current.
      DBG_FAIL_MACRO;
      goto fail;
    }
    uint32_t f;
    int8_t fg = fatGet(find, &f);
    a704:	mov	r1, r4
    find = m_allocSearchStart;
    setStart = true;
  }
  while (1) {
    find++;
    if (find > m_lastCluster) {
    a706:	bls.n	a71a <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x36>
      if (setStart) {
    a708:	cbnz	r6, a758 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x74>
        // Can't find space, checked all clusters.
        DBG_FAIL_MACRO;
        goto fail;
      }
      find = m_allocSearchStart;
    a70a:	ldr	r4, [r5, #12]
      setStart = true;
    a70c:	movs	r6, #1
      // Can't find space, already searched clusters after current.
      DBG_FAIL_MACRO;
      goto fail;
    }
    uint32_t f;
    int8_t fg = fatGet(find, &f);
    a70e:	add	r2, sp, #4
    a710:	mov	r0, r5
  } else {
    find = m_allocSearchStart;
    setStart = true;
  }
  while (1) {
    find++;
    a712:	adds	r4, #1
    if (find > m_lastCluster) {
    a714:	cmp	r4, r3
      // Can't find space, already searched clusters after current.
      DBG_FAIL_MACRO;
      goto fail;
    }
    uint32_t f;
    int8_t fg = fatGet(find, &f);
    a716:	mov	r1, r4
    find = m_allocSearchStart;
    setStart = true;
  }
  while (1) {
    find++;
    if (find > m_lastCluster) {
    a718:	bhi.n	a708 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x24>
      }
      find = m_allocSearchStart;
      setStart = true;
      continue;
    }
    if (find == current) {
    a71a:	cmp	r7, r4
    a71c:	beq.n	a758 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x74>
      // Can't find space, already searched clusters after current.
      DBG_FAIL_MACRO;
      goto fail;
    }
    uint32_t f;
    int8_t fg = fatGet(find, &f);
    a71e:	bl	a60c <FatPartition::fatGet(unsigned long, unsigned long*)>
    if (fg < 0) {
    a722:	cmp	r0, #0
    a724:	blt.n	a758 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x74>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (fg && f == 0) {
    a726:	beq.n	a6fa <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x16>
    a728:	ldr	r3, [sp, #4]
    a72a:	cmp	r3, #0
    a72c:	bne.n	a6fa <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x16>
      break;
    }
  }
  if (setStart) {
    a72e:	cbz	r6, a732 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x4e>
    m_allocSearchStart = find;
    a730:	str	r4, [r5, #12]
  }
  uint32_t clusterStartSector(uint32_t cluster) const;
  int8_t fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  bool fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
    a732:	mvn.w	r2, #4026531840	; 0xf0000000
    a736:	mov	r1, r4
    a738:	mov	r0, r5
    a73a:	bl	a67c <FatPartition::fatPut(unsigned long, unsigned long)>
  }
  // Mark end of chain.
  if (!fatPutEOC(find)) {
    a73e:	mov	r6, r0
    a740:	cbz	r0, a758 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x74>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (current) {
    a742:	cbnz	r7, a74a <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x66>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  updateFreeClusterCount(-1);
  *next = find;
    a744:	str.w	r4, [r8]
  return true;
    a748:	b.n	a75a <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x76>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (current) {
    // Link clusters.
    if (!fatPut(current, find)) {
    a74a:	mov	r1, r7
    a74c:	mov	r0, r5
    a74e:	mov	r2, r4
    a750:	bl	a67c <FatPartition::fatPut(unsigned long, unsigned long)>
    a754:	cmp	r0, #0
    a756:	bne.n	a744 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x60>
  updateFreeClusterCount(-1);
  *next = find;
  return true;

fail:
  return false;
    a758:	movs	r6, #0
}
    a75a:	mov	r0, r6
    a75c:	add	sp, #8
    a75e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    // Try to keep file contiguous. Start just after current cluster.
    find = current;
    setStart = false;
  } else {
    find = m_allocSearchStart;
    setStart = true;
    a762:	movs	r6, #1
    a764:	b.n	a6fa <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x16>
    a766:	nop

0000a768 <FatPartition::freeChain(unsigned long)>:
fail:
  return false;
}
//------------------------------------------------------------------------------
// free a cluster chain
bool FatPartition::freeChain(uint32_t cluster) {
    a768:	push	{r4, r5, r6, lr}
    a76a:	mov	r5, r0
    a76c:	sub	sp, #8
    a76e:	mov	r4, r1
    a770:	b.n	a786 <FatPartition::freeChain(unsigned long)+0x1e>
    if (fg < 0) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // free cluster
    if (!fatPut(cluster, 0)) {
    a772:	bl	a67c <FatPartition::fatPut(unsigned long, unsigned long)>
      goto fail;
    }
    // Add one to count of free clusters.
    updateFreeClusterCount(1);
    if (cluster < m_allocSearchStart) {
      m_allocSearchStart = cluster - 1;
    a776:	subs	r2, r4, #1
    if (fg < 0) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // free cluster
    if (!fatPut(cluster, 0)) {
    a778:	cbz	r0, a79c <FatPartition::freeChain(unsigned long)+0x34>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // Add one to count of free clusters.
    updateFreeClusterCount(1);
    if (cluster < m_allocSearchStart) {
    a77a:	ldr	r3, [r5, #12]
    a77c:	cmp	r4, r3
      m_allocSearchStart = cluster - 1;
    }
    cluster = next;
    a77e:	ldr	r4, [sp, #4]
      goto fail;
    }
    // Add one to count of free clusters.
    updateFreeClusterCount(1);
    if (cluster < m_allocSearchStart) {
      m_allocSearchStart = cluster - 1;
    a780:	it	cc
    a782:	strcc	r2, [r5, #12]
//------------------------------------------------------------------------------
// free a cluster chain
bool FatPartition::freeChain(uint32_t cluster) {
  uint32_t next;
  int8_t fg;
  do {
    a784:	cbz	r6, a79e <FatPartition::freeChain(unsigned long)+0x36>
    fg = fatGet(cluster, &next);
    a786:	add	r2, sp, #4
    a788:	mov	r1, r4
    a78a:	mov	r0, r5
    a78c:	bl	a60c <FatPartition::fatGet(unsigned long, unsigned long*)>
    if (fg < 0) {
    a790:	subs	r6, r0, #0
      DBG_FAIL_MACRO;
      goto fail;
    }
    // free cluster
    if (!fatPut(cluster, 0)) {
    a792:	mov	r1, r4
    a794:	mov.w	r2, #0
    a798:	mov	r0, r5
bool FatPartition::freeChain(uint32_t cluster) {
  uint32_t next;
  int8_t fg;
  do {
    fg = fatGet(cluster, &next);
    if (fg < 0) {
    a79a:	bge.n	a772 <FatPartition::freeChain(unsigned long)+0xa>
  } while (fg);

  return true;

fail:
  return false;
    a79c:	movs	r0, #0
}
    a79e:	add	sp, #8
    a7a0:	pop	{r4, r5, r6, pc}
    a7a2:	nop

0000a7a4 <FatPartition::freeClusterCount()>:
//------------------------------------------------------------------------------
int32_t FatPartition::freeClusterCount() {
    a7a4:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a7a8:	ldrb	r3, [r0, #7]
    return m_freeClusterCount;
  }
#endif  // MAINTAIN_FREE_CLUSTER_COUNT
  uint32_t free = 0;
  uint32_t sector;
  uint32_t todo = m_lastCluster + 1;
    a7aa:	ldr	r2, [r0, #28]
      }
      if (fg && c == 0) {
        free++;
      }
    }
  } else if (fatType() == 16 || fatType() == 32) {
    a7ac:	cmp	r3, #32
    return m_freeClusterCount;
  }
#endif  // MAINTAIN_FREE_CLUSTER_COUNT
  uint32_t free = 0;
  uint32_t sector;
  uint32_t todo = m_lastCluster + 1;
    a7ae:	add.w	r8, r2, #1
      }
      if (fg && c == 0) {
        free++;
      }
    }
  } else if (fatType() == 16 || fatType() == 32) {
    a7b2:	beq.n	a7c0 <FatPartition::freeClusterCount()+0x1c>
    a7b4:	cmp	r3, #16
    a7b6:	beq.n	a7c0 <FatPartition::freeClusterCount()+0x1c>
  }
  setFreeClusterCount(free);
  return free;

fail:
  return -1;
    a7b8:	mov.w	r0, #4294967295
    a7bc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (fg && c == 0) {
        free++;
      }
    }
  } else if (fatType() == 16 || fatType() == 32) {
    sector = m_fatStartSector;
    a7c0:	ldr	r5, [r0, #24]
    while (todo) {
    a7c2:	cmp.w	r8, #0
    a7c6:	beq.n	a844 <FatPartition::freeClusterCount()+0xa0>
    a7c8:	mov	r6, r0
    a7ca:	add.w	r7, r0, #560	; 0x230
    a7ce:	movs	r4, #0
  FatCache m_cache;
#if USE_SEPARATE_FAT_CACHE
  FatCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t sector, uint8_t options) {
    return m_fatCache.read(sector,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
    a7d0:	mov	r1, r5
    a7d2:	movs	r2, #2
    a7d4:	mov	r0, r7
      cache_t* pc = cacheFetchFat(sector++, FatCache::CACHE_FOR_READ);
    a7d6:	adds	r5, #1
    a7d8:	bl	a590 <FatCache::read(unsigned long, unsigned char)>
      if (!pc) {
    a7dc:	cmp	r0, #0
    a7de:	beq.n	a7b8 <FatPartition::freeClusterCount()+0x14>
        DBG_FAIL_MACRO;
        goto fail;
      }
      n =  fatType() == 16 ? m_bytesPerSector/2 : m_bytesPerSector/4;
    a7e0:	ldrb	r3, [r6, #7]
    a7e2:	cmp	r3, #16
    a7e4:	beq.n	a812 <FatPartition::freeClusterCount()+0x6e>
      if (todo < n) {
    a7e6:	cmp.w	r8, #127	; 0x7f
    a7ea:	bls.n	a83c <FatPartition::freeClusterCount()+0x98>
    a7ec:	movs	r1, #128	; 0x80
      cache_t* pc = cacheFetchFat(sector++, FatCache::CACHE_FOR_READ);
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      n =  fatType() == 16 ? m_bytesPerSector/2 : m_bytesPerSector/4;
    a7ee:	mov	r2, r1
    a7f0:	subs	r2, #1
    a7f2:	subs	r3, r0, #4
    a7f4:	uxth	r2, r2
    a7f6:	add.w	r0, r0, r2, lsl #2
            free++;
          }
        }
      } else {
        for (uint16_t i = 0; i < n; i++) {
          if (pc->fat32[i] == 0) {
    a7fa:	ldr.w	r2, [r3, #4]!
    a7fe:	cbnz	r2, a802 <FatPartition::freeClusterCount()+0x5e>
            free++;
    a800:	adds	r4, #1
          if (pc->fat16[i] == 0) {
            free++;
          }
        }
      } else {
        for (uint16_t i = 0; i < n; i++) {
    a802:	cmp	r3, r0
    a804:	bne.n	a7fa <FatPartition::freeClusterCount()+0x56>
        free++;
      }
    }
  } else if (fatType() == 16 || fatType() == 32) {
    sector = m_fatStartSector;
    while (todo) {
    a806:	subs.w	r8, r8, r1
    a80a:	bne.n	a7d0 <FatPartition::freeClusterCount()+0x2c>
    a80c:	mov	r0, r4
    a80e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      n =  fatType() == 16 ? m_bytesPerSector/2 : m_bytesPerSector/4;
      if (todo < n) {
    a812:	cmp.w	r8, #255	; 0xff
    a816:	bhi.n	a84a <FatPartition::freeClusterCount()+0xa6>
        n = todo;
    a818:	uxth.w	r3, r8
    a81c:	mov	r1, r8
    a81e:	subs	r2, r3, #1
    a820:	subs	r3, r0, #2
    a822:	uxth	r2, r2
    a824:	add.w	r0, r0, r2, lsl #1
      }
      if (fatType() == 16) {
        for (uint16_t i = 0; i < n; i++) {
          if (pc->fat16[i] == 0) {
    a828:	ldrh.w	r2, [r3, #2]!
    a82c:	cbnz	r2, a830 <FatPartition::freeClusterCount()+0x8c>
            free++;
    a82e:	adds	r4, #1
      n =  fatType() == 16 ? m_bytesPerSector/2 : m_bytesPerSector/4;
      if (todo < n) {
        n = todo;
      }
      if (fatType() == 16) {
        for (uint16_t i = 0; i < n; i++) {
    a830:	cmp	r0, r3
    a832:	bne.n	a828 <FatPartition::freeClusterCount()+0x84>
        free++;
      }
    }
  } else if (fatType() == 16 || fatType() == 32) {
    sector = m_fatStartSector;
    while (todo) {
    a834:	subs.w	r8, r8, r1
    a838:	bne.n	a7d0 <FatPartition::freeClusterCount()+0x2c>
    a83a:	b.n	a80c <FatPartition::freeClusterCount()+0x68>
        DBG_FAIL_MACRO;
        goto fail;
      }
      n =  fatType() == 16 ? m_bytesPerSector/2 : m_bytesPerSector/4;
      if (todo < n) {
        n = todo;
    a83c:	uxth.w	r2, r8
    a840:	mov	r1, r8
    a842:	b.n	a7f0 <FatPartition::freeClusterCount()+0x4c>
        free++;
      }
    }
  } else if (fatType() == 16 || fatType() == 32) {
    sector = m_fatStartSector;
    while (todo) {
    a844:	mov	r0, r8
    // invalid FAT type
    DBG_FAIL_MACRO;
    goto fail;
  }
  setFreeClusterCount(free);
  return free;
    a846:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      n =  fatType() == 16 ? m_bytesPerSector/2 : m_bytesPerSector/4;
      if (todo < n) {
    a84a:	mov.w	r1, #256	; 0x100
      cache_t* pc = cacheFetchFat(sector++, FatCache::CACHE_FOR_READ);
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      n =  fatType() == 16 ? m_bytesPerSector/2 : m_bytesPerSector/4;
    a84e:	mov	r3, r1
    a850:	b.n	a81e <FatPartition::freeClusterCount()+0x7a>
    a852:	nop

0000a854 <FatPartition::init(BlockDeviceInterface*, unsigned char)>:

fail:
  return -1;
}
//------------------------------------------------------------------------------
bool FatPartition::init(BlockDevice* dev, uint8_t part) {
    a854:	push	{r3, r4, r5, r6, r7, lr}
    a856:	mov	r4, r0
  m_blockDev = dev;
  pbs_t* pbs;
  BpbFat32_t* bpb;
  MbrSector_t* mbr;
  uint8_t tmp;
  m_fatType = 0;
    a858:	movs	r3, #0
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    m_lbn = 0XFFFFFFFF;
    a85a:	mov.w	r0, #4294967295
  m_allocSearchStart = 1;
    a85e:	movs	r5, #1
//------------------------------------------------------------------------------
bool FatPartition::init(BlockDevice* dev, uint8_t part) {
  uint32_t clusterCount;
  uint32_t totalSectors;
  uint32_t volumeStartSector = 0;
  m_blockDev = dev;
    a860:	str	r1, [r4, #0]
#if USE_SEPARATE_FAT_CACHE
  m_fatCache.init(this);
#endif  // USE_SEPARATE_FAT_CACHE
  // if part == 0 assume super floppy with FAT boot sector in sector zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
    a862:	mov	r6, r2
  }
  /** Initialize the cache.
   * \param[in] vol FatPartition that owns this FatCache.
   */
  void init(FatPartition *vol) {
    m_part = vol;
    a864:	str	r4, [r4, #40]	; 0x28
    a866:	str.w	r4, [r4, #564]	; 0x234
  pbs_t* pbs;
  BpbFat32_t* bpb;
  MbrSector_t* mbr;
  uint8_t tmp;
  m_fatType = 0;
  m_allocSearchStart = 1;
    a86a:	str	r5, [r4, #12]
  m_blockDev = dev;
  pbs_t* pbs;
  BpbFat32_t* bpb;
  MbrSector_t* mbr;
  uint8_t tmp;
  m_fatType = 0;
    a86c:	strb	r3, [r4, #7]
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    a86e:	strb.w	r3, [r4, #36]	; 0x24
    a872:	strb.w	r3, [r4, #560]	; 0x230
    m_lbn = 0XFFFFFFFF;
    a876:	str	r0, [r4, #44]	; 0x2c
    a878:	str.w	r0, [r4, #568]	; 0x238
#if USE_SEPARATE_FAT_CACHE
  m_fatCache.init(this);
#endif  // USE_SEPARATE_FAT_CACHE
  // if part == 0 assume super floppy with FAT boot sector in sector zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
    a87c:	cbz	r2, a8b6 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x62>
    if (part > 4) {
    a87e:	cmp	r2, #4
    a880:	bls.n	a886 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x32>
    m_fatType = 32;
  }
  return true;

fail:
  return false;
    a882:	movs	r0, #0
    a884:	pop	{r3, r4, r5, r6, r7, pc}
  bool cacheSync() {
    return m_cache.sync() && syncDevice();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t sector, uint8_t options) {
    return m_cache.read(sector, options);
    a886:	add.w	r5, r4, #36	; 0x24
    a88a:	mov	r2, r3
    a88c:	mov	r1, r3
    a88e:	mov	r0, r5
    a890:	bl	a590 <FatCache::read(unsigned long, unsigned char)>
      DBG_FAIL_MACRO;
      goto fail;
    }
    mbr = reinterpret_cast<MbrSector_t*>
          (cacheFetchData(0, FatCache::CACHE_FOR_READ));
    MbrPart_t *mp = mbr->part + part - 1;
    a894:	mvn.w	r3, #4026531840	; 0xf0000000
    a898:	add.w	r1, r0, #446	; 0x1be
    a89c:	add	r3, r6
    a89e:	lsls	r3, r3, #4
    a8a0:	adds	r2, r1, r3

    if (!mbr || mp->type == 0 || (mp->boot != 0 && mp->boot != 0X80)) {
    a8a2:	cmp	r0, #0
    a8a4:	beq.n	a882 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x2e>
    a8a6:	ldrb	r0, [r2, #4]
    a8a8:	cmp	r0, #0
    a8aa:	beq.n	a882 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x2e>
    a8ac:	ldrb	r3, [r1, r3]
    a8ae:	lsls	r3, r3, #25
    a8b0:	bne.n	a882 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x2e>
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
}
inline uint32_t getLe32(const uint8_t* src) {
  return *reinterpret_cast<const uint32_t*>(src);
    a8b2:	ldr	r6, [r2, #8]
    a8b4:	b.n	a8ba <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x66>
    a8b6:	add.w	r5, r4, #36	; 0x24
    a8ba:	mov	r0, r5
    a8bc:	movs	r2, #0
    a8be:	mov	r1, r6
    a8c0:	bl	a590 <FatCache::read(unsigned long, unsigned char)>
  }
  pbs = reinterpret_cast<pbs_t*>
        (cacheFetchData(volumeStartSector, FatCache::CACHE_FOR_READ));
  bpb = reinterpret_cast<BpbFat32_t*>(pbs->bpb);

  if (!pbs || bpb->fatCount != 2 || getLe16(bpb->bytesPerSector) != 512) {
    a8c4:	cmp	r0, #0
    a8c6:	beq.n	a882 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x2e>
    a8c8:	ldrb	r3, [r0, #16]
    a8ca:	cmp	r3, #2
    a8cc:	bne.n	a882 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x2e>
    a8ce:	ldrh.w	r3, [r0, #11]
    a8d2:	cmp.w	r3, #512	; 0x200
    a8d6:	bne.n	a882 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x2e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_sectorsPerCluster = bpb->sectorsPerCluster;
    a8d8:	ldrb	r2, [r0, #13]
  m_clusterSectorMask = m_sectorsPerCluster - 1;
  // determine shift that is same as multiply by m_sectorsPerCluster
  m_sectorsPerClusterShift = 0;
    a8da:	movs	r5, #0
  if (!pbs || bpb->fatCount != 2 || getLe16(bpb->bytesPerSector) != 512) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_sectorsPerCluster = bpb->sectorsPerCluster;
  m_clusterSectorMask = m_sectorsPerCluster - 1;
    a8dc:	subs	r3, r2, #1
  // determine shift that is same as multiply by m_sectorsPerCluster
  m_sectorsPerClusterShift = 0;
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    a8de:	cmp	r2, #1

  if (!pbs || bpb->fatCount != 2 || getLe16(bpb->bytesPerSector) != 512) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_sectorsPerCluster = bpb->sectorsPerCluster;
    a8e0:	strb	r2, [r4, #4]
  m_clusterSectorMask = m_sectorsPerCluster - 1;
  // determine shift that is same as multiply by m_sectorsPerCluster
  m_sectorsPerClusterShift = 0;
    a8e2:	strb	r5, [r4, #6]
  if (!pbs || bpb->fatCount != 2 || getLe16(bpb->bytesPerSector) != 512) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_sectorsPerCluster = bpb->sectorsPerCluster;
  m_clusterSectorMask = m_sectorsPerCluster - 1;
    a8e4:	strb	r3, [r4, #5]
  // determine shift that is same as multiply by m_sectorsPerCluster
  m_sectorsPerClusterShift = 0;
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    a8e6:	beq.n	a908 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0xb4>
    a8e8:	movs	r5, #1
    a8ea:	mov	r1, r5
    a8ec:	b.n	a8f0 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x9c>
    a8ee:	mov	r5, r3
    a8f0:	lsls	r1, r1, #1
    a8f2:	adds	r3, r5, #1
    a8f4:	uxtb	r1, r1
    a8f6:	uxtb	r3, r3
    a8f8:	cmp	r2, r1
    a8fa:	beq.n	a906 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0xb2>
    if (tmp == 0) {
    a8fc:	cmp	r3, #9
    a8fe:	bne.n	a8ee <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x9a>
    a900:	strb	r5, [r4, #6]
    m_fatType = 32;
  }
  return true;

fail:
  return false;
    a902:	movs	r0, #0
    a904:	pop	{r3, r4, r5, r6, r7, pc}
    a906:	strb	r5, [r4, #6]
      DBG_FAIL_MACRO;
      goto fail;
    }
    m_sectorsPerClusterShift++;
  }
  m_sectorsPerFat = getLe16(bpb->sectorsPerFat16);
    a908:	ldrh	r3, [r0, #22]
    a90a:	str	r3, [r4, #16]
  if (m_sectorsPerFat == 0) {
    a90c:	cbnz	r3, a912 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0xbe>
    a90e:	ldr	r3, [r0, #36]	; 0x24
    m_sectorsPerFat = getLe32(bpb->sectorsPerFat32);
    a910:	str	r3, [r4, #16]
  }
  m_fatStartSector = volumeStartSector + getLe16(bpb->reservedSectorCount);
    a912:	ldrh	r2, [r0, #14]
void lbaToMbrChs(uint8_t* chs, uint32_t capacityMB, uint32_t lba);
//-----------------------------------------------------------------------------
#if !defined(USE_SIMPLE_LITTLE_ENDIAN) || USE_SIMPLE_LITTLE_ENDIAN
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
    a914:	ldrh.w	r7, [r0, #17]
    a918:	add	r2, r6
  m_rootDirEntryCount = getLe16(bpb->rootDirEntryCount);

  // directory start for FAT16 dataStart for FAT32
  m_rootDirStart = m_fatStartSector + 2 * m_sectorsPerFat;
  // data start for FAT16 and FAT32
  m_dataStartSector = m_rootDirStart +
    a91a:	lsls	r1, r7, #5
    m_sectorsPerFat = getLe32(bpb->sectorsPerFat32);
  }
  m_fatStartSector = volumeStartSector + getLe16(bpb->reservedSectorCount);

  // count for FAT16 zero for FAT32
  m_rootDirEntryCount = getLe16(bpb->rootDirEntryCount);
    a91c:	strh	r7, [r4, #8]

  // directory start for FAT16 dataStart for FAT32
  m_rootDirStart = m_fatStartSector + 2 * m_sectorsPerFat;
    a91e:	add.w	r3, r2, r3, lsl #1
  }
  m_sectorsPerFat = getLe16(bpb->sectorsPerFat16);
  if (m_sectorsPerFat == 0) {
    m_sectorsPerFat = getLe32(bpb->sectorsPerFat32);
  }
  m_fatStartSector = volumeStartSector + getLe16(bpb->reservedSectorCount);
    a922:	str	r2, [r4, #24]
  m_rootDirEntryCount = getLe16(bpb->rootDirEntryCount);

  // directory start for FAT16 dataStart for FAT32
  m_rootDirStart = m_fatStartSector + 2 * m_sectorsPerFat;
  // data start for FAT16 and FAT32
  m_dataStartSector = m_rootDirStart +
    a924:	addw	r1, r1, #511	; 0x1ff
    ((32 * m_rootDirEntryCount + m_bytesPerSector - 1)/m_bytesPerSector);

  // total sectors for FAT16 or FAT32
  totalSectors = getLe16(bpb->totalSectors16);
    a928:	ldrh.w	r2, [r0, #19]

  // count for FAT16 zero for FAT32
  m_rootDirEntryCount = getLe16(bpb->rootDirEntryCount);

  // directory start for FAT16 dataStart for FAT32
  m_rootDirStart = m_fatStartSector + 2 * m_sectorsPerFat;
    a92c:	str	r3, [r4, #32]
  // data start for FAT16 and FAT32
  m_dataStartSector = m_rootDirStart +
    a92e:	add.w	r3, r3, r1, asr #9
    ((32 * m_rootDirEntryCount + m_bytesPerSector - 1)/m_bytesPerSector);
    a932:	str	r3, [r4, #20]

  // total sectors for FAT16 or FAT32
  totalSectors = getLe16(bpb->totalSectors16);
  if (totalSectors == 0) {
    a934:	cbz	r2, a95e <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x10a>
    totalSectors = getLe32(bpb->totalSectors32);
  }
  // total data sectors
  clusterCount = totalSectors - (m_dataStartSector - volumeStartSector);
    a936:	subs	r3, r6, r3
  m_lastCluster = clusterCount + 1;

  // Indicate unknown number of free clusters.
  setFreeClusterCount(-1);
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
    a938:	movw	r1, #4084	; 0xff4
  totalSectors = getLe16(bpb->totalSectors16);
  if (totalSectors == 0) {
    totalSectors = getLe32(bpb->totalSectors32);
  }
  // total data sectors
  clusterCount = totalSectors - (m_dataStartSector - volumeStartSector);
    a93c:	add	r3, r2

  // divide by cluster size to get cluster count
  clusterCount >>= m_sectorsPerClusterShift;
    a93e:	lsr.w	r5, r3, r5
  m_lastCluster = clusterCount + 1;
    a942:	adds	r3, r5, #1

  // Indicate unknown number of free clusters.
  setFreeClusterCount(-1);
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
    a944:	cmp	r5, r1
  // total data sectors
  clusterCount = totalSectors - (m_dataStartSector - volumeStartSector);

  // divide by cluster size to get cluster count
  clusterCount >>= m_sectorsPerClusterShift;
  m_lastCluster = clusterCount + 1;
    a946:	str	r3, [r4, #28]

  // Indicate unknown number of free clusters.
  setFreeClusterCount(-1);
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
    a948:	bls.n	a96a <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x116>
    m_fatType = 12;
    if (!FAT12_SUPPORT) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if (clusterCount < 65525) {
    a94a:	movw	r3, #65524	; 0xfff4
    a94e:	cmp	r5, r3
    a950:	bls.n	a962 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x10e>
}
inline uint32_t getLe32(const uint8_t* src) {
  return *reinterpret_cast<const uint32_t*>(src);
    a952:	ldr	r2, [r0, #44]	; 0x2c
    m_fatType = 16;
  } else {
    m_rootDirStart = getLe32(bpb->fat32RootCluster);
    m_fatType = 32;
    a954:	movs	r3, #32
  }
  return true;
    a956:	movs	r0, #1
      goto fail;
    }
  } else if (clusterCount < 65525) {
    m_fatType = 16;
  } else {
    m_rootDirStart = getLe32(bpb->fat32RootCluster);
    a958:	str	r2, [r4, #32]
    m_fatType = 32;
    a95a:	strb	r3, [r4, #7]
    a95c:	pop	{r3, r4, r5, r6, r7, pc}
    a95e:	ldr	r2, [r0, #32]
    a960:	b.n	a936 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0xe2>
    if (!FAT12_SUPPORT) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if (clusterCount < 65525) {
    m_fatType = 16;
    a962:	movs	r3, #16
  } else {
    m_rootDirStart = getLe32(bpb->fat32RootCluster);
    m_fatType = 32;
  }
  return true;
    a964:	movs	r0, #1
    if (!FAT12_SUPPORT) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if (clusterCount < 65525) {
    m_fatType = 16;
    a966:	strb	r3, [r4, #7]
    a968:	pop	{r3, r4, r5, r6, r7, pc}

  // Indicate unknown number of free clusters.
  setFreeClusterCount(-1);
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
    m_fatType = 12;
    a96a:	movs	r3, #12
    m_fatType = 32;
  }
  return true;

fail:
  return false;
    a96c:	movs	r0, #0

  // Indicate unknown number of free clusters.
  setFreeClusterCount(-1);
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
    m_fatType = 12;
    a96e:	strb	r3, [r4, #7]
    if (!FAT12_SUPPORT) {
      DBG_FAIL_MACRO;
      goto fail;
    a970:	pop	{r3, r4, r5, r6, r7, pc}
    a972:	nop

0000a974 <lfnGetChar(DirLfn_t*, unsigned char)>:
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \return The 16-bit character.
 */
static uint16_t lfnGetChar(DirLfn_t *ldir, uint8_t i) {
  if (i < 5) {
    a974:	cmp	r1, #4
    a976:	bls.n	a990 <lfnGetChar(DirLfn_t*, unsigned char)+0x1c>
    return getLe16(ldir->unicode1 + 2*i);
  } else if (i < 11) {
    a978:	cmp	r1, #10
    a97a:	bls.n	a988 <lfnGetChar(DirLfn_t*, unsigned char)+0x14>
    return getLe16(ldir->unicode2 + 2*i - 10);
  } else if (i < 13) {
    a97c:	cmp	r1, #12
    a97e:	bhi.n	a99a <lfnGetChar(DirLfn_t*, unsigned char)+0x26>
void lbaToMbrChs(uint8_t* chs, uint32_t capacityMB, uint32_t lba);
//-----------------------------------------------------------------------------
#if !defined(USE_SIMPLE_LITTLE_ENDIAN) || USE_SIMPLE_LITTLE_ENDIAN
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
    a980:	add.w	r1, r0, r1, lsl #1
    a984:	ldrh	r0, [r1, #6]
    a986:	bx	lr
    a988:	add.w	r1, r0, r1, lsl #1
    a98c:	ldrh	r0, [r1, #4]
 */
static uint16_t lfnGetChar(DirLfn_t *ldir, uint8_t i) {
  if (i < 5) {
    return getLe16(ldir->unicode1 + 2*i);
  } else if (i < 11) {
    return getLe16(ldir->unicode2 + 2*i - 10);
    a98e:	bx	lr
    a990:	add.w	r1, r0, r1, lsl #1
    a994:	ldrh.w	r0, [r1, #1]
 * \param[in] i Index of character.
 * \return The 16-bit character.
 */
static uint16_t lfnGetChar(DirLfn_t *ldir, uint8_t i) {
  if (i < 5) {
    return getLe16(ldir->unicode1 + 2*i);
    a998:	bx	lr
  } else if (i < 11) {
    return getLe16(ldir->unicode2 + 2*i - 10);
  } else if (i < 13) {
    return getLe16(ldir->unicode3 + 2*i - 22);
  }
  return 0;
    a99a:	movs	r0, #0
}
    a99c:	bx	lr
    a99e:	nop

0000a9a0 <FatFile::lfnChecksum(unsigned char*)>:
#include "../common/DebugMacros.h"
#include "FatFile.h"
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
    a9a0:	push	{r4}
    a9a2:	mov	r4, r0
  uint8_t sum = 0;
    a9a4:	movs	r0, #0
    a9a6:	subs	r2, r4, #1
    a9a8:	adds	r4, #10
  for (uint8_t i = 0; i < 11; i++) {
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
    a9aa:	lsrs	r3, r0, #1
    a9ac:	ldrb.w	r1, [r2, #1]!
    a9b0:	orr.w	r0, r3, r0, lsl #7
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
    a9b4:	cmp	r4, r2
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
    a9b6:	uxtab	r0, r1, r0
    a9ba:	uxtb	r0, r0
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
    a9bc:	bne.n	a9aa <FatFile::lfnChecksum(unsigned char*)+0xa>
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
  }
  return sum;
}
    a9be:	ldr.w	r4, [sp], #4
    a9c2:	bx	lr

0000a9c4 <FatFile::openCluster(FatFile*)>:
fail:
  name[0] = 0;
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openCluster(FatFile* file) {
    a9c4:	push	{r3, r4, r5, lr}
  if (file->m_dirCluster == 0) {
    a9c6:	ldr	r3, [r1, #12]
    a9c8:	cbz	r3, a9e8 <FatFile::openCluster(FatFile*)+0x24>
    a9ca:	mov	r4, r1
    return openRoot(file->m_vol);
  }
  memset(this, 0, sizeof(FatFile));
    a9cc:	movs	r2, #36	; 0x24
    a9ce:	movs	r1, #0
    a9d0:	mov	r5, r0
    a9d2:	bl	10d7c <memset>
  m_attributes = FILE_ATTR_SUBDIR;
    a9d6:	movs	r3, #16
  m_flags = FILE_FLAG_READ;
    a9d8:	movs	r0, #1
bool FatFile::openCluster(FatFile* file) {
  if (file->m_dirCluster == 0) {
    return openRoot(file->m_vol);
  }
  memset(this, 0, sizeof(FatFile));
  m_attributes = FILE_ATTR_SUBDIR;
    a9da:	strb	r3, [r5, #0]
  m_flags = FILE_FLAG_READ;
    a9dc:	strb	r0, [r5, #2]
  m_vol = file->m_vol;
    a9de:	ldr	r2, [r4, #8]
  m_firstCluster = file->m_dirCluster;
    a9e0:	ldr	r3, [r4, #12]
    return openRoot(file->m_vol);
  }
  memset(this, 0, sizeof(FatFile));
  m_attributes = FILE_ATTR_SUBDIR;
  m_flags = FILE_FLAG_READ;
  m_vol = file->m_vol;
    a9e2:	str	r2, [r5, #8]
  m_firstCluster = file->m_dirCluster;
    a9e4:	str	r3, [r5, #32]
  return true;
}
    a9e6:	pop	{r3, r4, r5, pc}
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openCluster(FatFile* file) {
  if (file->m_dirCluster == 0) {
    return openRoot(file->m_vol);
    a9e8:	ldr	r1, [r1, #8]
  m_attributes = FILE_ATTR_SUBDIR;
  m_flags = FILE_FLAG_READ;
  m_vol = file->m_vol;
  m_firstCluster = file->m_dirCluster;
  return true;
}
    a9ea:	ldmia.w	sp!, {r3, r4, r5, lr}
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openCluster(FatFile* file) {
  if (file->m_dirCluster == 0) {
    return openRoot(file->m_vol);
    a9ee:	b.w	9c90 <FatFile::openRoot(FatVolume*)>
    a9f2:	nop

0000a9f4 <FatFile::getName(char*, unsigned int)>:
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
    lfnPutChar(ldir, i, c);
  }
}
//==============================================================================
bool FatFile::getName(char* name, size_t size) {
    a9f4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a9f8:	movs	r3, #0
    a9fa:	sub	sp, #52	; 0x34
    a9fc:	mov	r5, r2
  FatFile dirFile;
  DirLfn_t* ldir;
  if (!isOpen() || size < 13) {
    a9fe:	ldrb	r2, [r0, #0]
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
    lfnPutChar(ldir, i, c);
  }
}
//==============================================================================
bool FatFile::getName(char* name, size_t size) {
    aa00:	mov	r9, r1
    aa02:	strb.w	r3, [sp, #12]
    aa06:	strb.w	r3, [sp, #13]
    aa0a:	strb.w	r3, [sp, #14]
  FatFile dirFile;
  DirLfn_t* ldir;
  if (!isOpen() || size < 13) {
    aa0e:	cmp	r2, #0
    aa10:	beq.n	aadc <FatFile::getName(char*, unsigned int)+0xe8>
    aa12:	cmp	r5, #12
    aa14:	ite	hi
    aa16:	movhi	r4, #0
    aa18:	movls	r4, #1
    aa1a:	cmp	r4, #0
    aa1c:	bne.n	aadc <FatFile::getName(char*, unsigned int)+0xe8>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!isLFN()) {
    aa1e:	ldrb	r3, [r0, #3]
    aa20:	mov	r8, r0
    aa22:	cmp	r3, #0
    aa24:	beq.n	aaea <FatFile::getName(char*, unsigned int)+0xf6>
    return getSFN(name);
  }
  if (!dirFile.openCluster(this)) {
    aa26:	mov	r1, r8
    aa28:	add	r0, sp, #12
    aa2a:	bl	a9c4 <FatFile::openCluster(FatFile*)>
    aa2e:	cmp	r0, #0
    aa30:	beq.n	aadc <FatFile::getName(char*, unsigned int)+0xe8>
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    aa32:	ldrb.w	r3, [r8, #3]
    aa36:	cmp	r3, #0
    aa38:	beq.n	aadc <FatFile::getName(char*, unsigned int)+0xe8>
    aa3a:	movs	r6, #1
    if (!dirFile.seekSet(32UL*(m_dirIndex - order))) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    ldir = reinterpret_cast<DirLfn_t*>(dirFile.readDirCache());
    aa3c:	str	r4, [sp, #4]
  if (!dirFile.openCluster(this)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    if (!dirFile.seekSet(32UL*(m_dirIndex - order))) {
    aa3e:	ldrh.w	r1, [r8, #4]
    aa42:	add	r0, sp, #12
    aa44:	subs	r1, r1, r6
    aa46:	lsls	r1, r1, #5
    aa48:	bl	a0dc <FatFile::seekSet(unsigned long)>
    aa4c:	mov	r7, r0
    aa4e:	cmp	r0, #0
    aa50:	beq.n	aadc <FatFile::getName(char*, unsigned int)+0xe8>
      DBG_FAIL_MACRO;
      goto fail;
    }
    ldir = reinterpret_cast<DirLfn_t*>(dirFile.readDirCache());
    aa52:	movs	r1, #0
    aa54:	add	r0, sp, #12
    aa56:	bl	9e58 <FatFile::readDirCache(bool)>
    if (!ldir) {
    aa5a:	mov	sl, r0
    aa5c:	cmp	r0, #0
    aa5e:	beq.n	aadc <FatFile::getName(char*, unsigned int)+0xe8>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME) {
    aa60:	ldrb	r3, [r0, #11]
    aa62:	cmp	r3, #15
    aa64:	bne.n	aadc <FatFile::getName(char*, unsigned int)+0xe8>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (order != (ldir->order & 0X1F)) {
    aa66:	ldrb	r3, [r0, #0]
    aa68:	and.w	r3, r3, #31
    aa6c:	cmp	r6, r3
    aa6e:	bne.n	aadc <FatFile::getName(char*, unsigned int)+0xe8>
  return 0;
}
//------------------------------------------------------------------------------
static bool lfnGetName(DirLfn_t *ldir, char* name, size_t n) {
  uint8_t i;
  size_t k = 13*((ldir->order & 0X1F) - 1);
    aa70:	subs	r3, r6, #1
    aa72:	add.w	r4, r3, r3, lsl #1
    aa76:	add.w	r4, r3, r4, lsl #2
    aa7a:	mov	r3, r4
    aa7c:	add.w	r2, r9, r4
    aa80:	add.w	fp, r4, #13
  for (i = 0; i < 13; i++) {
    uint16_t c = lfnGetChar(ldir, i);
    aa84:	subs	r1, r3, r4
    aa86:	mov	r0, sl
    aa88:	uxtb	r1, r1
    aa8a:	bl	a974 <lfnGetChar(DirLfn_t*, unsigned char)>
    if (c == 0 || k >= n) {
      break;
    }
    name[k++] = c >= 0X7F ? '?' : c;
    aa8e:	movs	r1, #63	; 0x3f
static bool lfnGetName(DirLfn_t *ldir, char* name, size_t n) {
  uint8_t i;
  size_t k = 13*((ldir->order & 0X1F) - 1);
  for (i = 0; i < 13; i++) {
    uint16_t c = lfnGetChar(ldir, i);
    if (c == 0 || k >= n) {
    aa90:	cbz	r0, aaf8 <FatFile::getName(char*, unsigned int)+0x104>
    aa92:	cmp	r5, r3
    aa94:	bls.n	aaf8 <FatFile::getName(char*, unsigned int)+0x104>
      break;
    }
    name[k++] = c >= 0X7F ? '?' : c;
    aa96:	cmp	r0, #126	; 0x7e
    aa98:	add.w	r3, r3, #1
    aa9c:	it	ls
    aa9e:	uxtbls	r1, r0
}
//------------------------------------------------------------------------------
static bool lfnGetName(DirLfn_t *ldir, char* name, size_t n) {
  uint8_t i;
  size_t k = 13*((ldir->order & 0X1F) - 1);
  for (i = 0; i < 13; i++) {
    aaa0:	cmp	fp, r3
    uint16_t c = lfnGetChar(ldir, i);
    if (c == 0 || k >= n) {
      break;
    }
    name[k++] = c >= 0X7F ? '?' : c;
    aaa2:	strb.w	r1, [r2], #1
}
//------------------------------------------------------------------------------
static bool lfnGetName(DirLfn_t *ldir, char* name, size_t n) {
  uint8_t i;
  size_t k = 13*((ldir->order & 0X1F) - 1);
  for (i = 0; i < 13; i++) {
    aaa6:	bne.n	aa84 <FatFile::getName(char*, unsigned int)+0x90>
      break;
    }
    name[k++] = c >= 0X7F ? '?' : c;
  }
  // Terminate with zero byte if name fits.
  if (k < n && (ldir->order & FAT_ORDER_LAST_LONG_ENTRY)) {
    aaa8:	cmp	r5, fp
    aaaa:	bls.n	aabc <FatFile::getName(char*, unsigned int)+0xc8>
    aaac:	ldrb.w	r3, [sl]
    aab0:	lsls	r2, r3, #25
    aab2:	bpl.n	aabc <FatFile::getName(char*, unsigned int)+0xc8>
    name[k] = 0;
    aab4:	ldrb.w	r3, [sp, #4]
    aab8:	strb.w	r3, [r9, fp]
  }
  // Truncate if name is too long.
  name[n - 1] = 0;
    aabc:	add.w	r3, r9, r5
    aac0:	ldrb.w	r2, [sp, #4]
    aac4:	strb.w	r2, [r3, #-1]
    }
    if (!lfnGetName(ldir, name, size)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (ldir->order & FAT_ORDER_LAST_LONG_ENTRY) {
    aac8:	ldrb.w	r3, [sl]
    aacc:	lsls	r3, r3, #25
    aace:	bmi.n	aae2 <FatFile::getName(char*, unsigned int)+0xee>
  }
  if (!dirFile.openCluster(this)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    aad0:	adds	r6, #1
    aad2:	ldrb.w	r3, [r8, #3]
    aad6:	uxtb	r6, r6
    aad8:	cmp	r3, r6
    aada:	bcs.n	aa3e <FatFile::getName(char*, unsigned int)+0x4a>
  }
  // Fall into fail.
  DBG_FAIL_MACRO;

fail:
  name[0] = 0;
    aadc:	movs	r7, #0
    aade:	strb.w	r7, [r9]
  return false;
}
    aae2:	mov	r0, r7
    aae4:	add	sp, #52	; 0x34
    aae6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (!isOpen() || size < 13) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!isLFN()) {
    return getSFN(name);
    aaea:	bl	b364 <FatFile::getSFN(char*)>
    aaee:	mov	r7, r0
  DBG_FAIL_MACRO;

fail:
  name[0] = 0;
  return false;
}
    aaf0:	mov	r0, r7
    aaf2:	add	sp, #52	; 0x34
    aaf4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
static bool lfnGetName(DirLfn_t *ldir, char* name, size_t n) {
  uint8_t i;
  size_t k = 13*((ldir->order & 0X1F) - 1);
  for (i = 0; i < 13; i++) {
    uint16_t c = lfnGetChar(ldir, i);
    if (c == 0 || k >= n) {
    aaf8:	mov	fp, r3
    aafa:	b.n	aaa8 <FatFile::getName(char*, unsigned int)+0xb4>

0000aafc <FatFile::parsePathName(char const*, fname_t*, char const**)>:
  m_firstCluster = file->m_dirCluster;
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::parsePathName(const char* path,
                            fname_t* fname, const char** ptr) {
    aafc:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int len = 0;
  int si;
  int dot;

  // Skip leading spaces.
  while (*path == ' ') {
    ab00:	ldrb	r3, [r0, #0]
    ab02:	cmp	r3, #32
    ab04:	bne.n	ab0e <FatFile::parsePathName(char const*, fname_t*, char const**)+0x12>
    ab06:	ldrb.w	r3, [r0, #1]!
    ab0a:	cmp	r3, #32
    ab0c:	beq.n	ab06 <FatFile::parsePathName(char const*, fname_t*, char const**)+0xa>
    path++;
  }
  fname->lfn = path;
    ab0e:	str	r0, [r1, #8]

  for (len = 0; ; len++) {
    c = path[len];
    ab10:	ldrb	r3, [r0, #0]
    if (c == 0 || isDirSeparator(c)) {
    ab12:	cmp	r3, #47	; 0x2f
    ab14:	beq.w	ad5c <FatFile::parsePathName(char const*, fname_t*, char const**)+0x260>
    ab18:	cmp	r3, #0
    ab1a:	beq.w	ad5c <FatFile::parsePathName(char const*, fname_t*, char const**)+0x260>
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(uint8_t c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
    ab1e:	cmp	r3, #92	; 0x5c
    ab20:	beq.n	ab6e <FatFile::parsePathName(char const*, fname_t*, char const**)+0x72>
    ab22:	sub.w	r4, r3, #34	; 0x22
    ab26:	uxtb	r4, r4
    ab28:	cmp	r4, #26
    ab2a:	bls.n	ab74 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x78>
    ab2c:	adds	r6, r0, #1
  m_firstCluster = file->m_dirCluster;
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::parsePathName(const char* path,
                            fname_t* fname, const char** ptr) {
    ab2e:	movs	r5, #0
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(uint8_t c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
    ab30:	ldr.w	lr, [pc, #584]	; ad7c <FatFile::parsePathName(char const*, fname_t*, char const**)+0x280>
    ab34:	b.n	ab3e <FatFile::parsePathName(char const*, fname_t*, char const**)+0x42>
    ab36:	cmp	r4, #26
    ab38:	lsr.w	r7, lr, r4
    ab3c:	bls.n	ab84 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x88>
      c == ':' || c == '<' || c == '>' || c == '?' || c == '|') {
    ab3e:	sub.w	r4, r3, #62	; 0x3e
  while (*path == ' ') {
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    ab42:	adds	r5, #1
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
    ab44:	sub.w	ip, r3, #32
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    c = path[len];
    ab48:	mov	r8, r6
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(uint8_t c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
      c == ':' || c == '<' || c == '>' || c == '?' || c == '|') {
    ab4a:	cmp	r4, #1
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    c = path[len];
    ab4c:	mov	r7, r5
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(uint8_t c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
      c == ':' || c == '<' || c == '>' || c == '?' || c == '|') {
    ab4e:	bls.n	ab6e <FatFile::parsePathName(char const*, fname_t*, char const**)+0x72>
    ab50:	cmp	r3, #124	; 0x7c
    ab52:	beq.n	ab6e <FatFile::parsePathName(char const*, fname_t*, char const**)+0x72>
  for (len = 0; ; len++) {
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
    ab54:	cmp.w	ip, #94	; 0x5e
    ab58:	bhi.n	ab6e <FatFile::parsePathName(char const*, fname_t*, char const**)+0x72>
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    c = path[len];
    ab5a:	ldrb.w	r3, [r6], #1
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(uint8_t c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
    ab5e:	sub.w	r4, r3, #34	; 0x22
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
    ab62:	cmp	r3, #47	; 0x2f
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(uint8_t c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
    ab64:	uxtb	r4, r4
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
    ab66:	beq.n	ab8e <FatFile::parsePathName(char const*, fname_t*, char const**)+0x92>
    ab68:	cbz	r3, ab8e <FatFile::parsePathName(char const*, fname_t*, char const**)+0x92>
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(uint8_t c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
    ab6a:	cmp	r3, #92	; 0x5c
    ab6c:	bne.n	ab36 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x3a>
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
  
 fail:
  return false;
    ab6e:	movs	r0, #0
    ab70:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(uint8_t c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
    ab74:	ldr	r5, [pc, #516]	; (ad7c <FatFile::parsePathName(char const*, fname_t*, char const**)+0x280>)
    ab76:	lsr.w	r4, r5, r4
    ab7a:	lsls	r5, r4, #31
    ab7c:	bpl.n	ab2c <FatFile::parsePathName(char const*, fname_t*, char const**)+0x30>
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
  
 fail:
  return false;
    ab7e:	movs	r0, #0
    ab80:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(uint8_t c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
    ab84:	lsls	r4, r7, #31
    ab86:	bpl.n	ab3e <FatFile::parsePathName(char const*, fname_t*, char const**)+0x42>
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
  
 fail:
  return false;
    ab88:	movs	r0, #0
    ab8a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
    ab8e:	cmp	r3, #32
    ab90:	beq.n	ab98 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x9c>
    ab92:	cmp	r3, #47	; 0x2f
    ab94:	bne.w	ad56 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x25a>
    ab98:	adds	r3, r5, #1
    ab9a:	add	r3, r0
    ab9c:	mov	r6, r3
    ab9e:	ldrb.w	r4, [r3], #1
    aba2:	cmp	r4, #32
    aba4:	beq.n	ab9c <FatFile::parsePathName(char const*, fname_t*, char const**)+0xa0>
    aba6:	cmp	r4, #47	; 0x2f
    aba8:	beq.n	ab9c <FatFile::parsePathName(char const*, fname_t*, char const**)+0xa0>
  *ptr = &path[end];
    abaa:	str	r6, [r2, #0]

  // Back over spaces and dots.
  while (len) {
    abac:	cbz	r5, abdc <FatFile::parsePathName(char const*, fname_t*, char const**)+0xe0>
    c = path[len - 1];
    abae:	add	r7, r0
    abb0:	ldrb.w	r3, [r7, #-1]
    if (c != '.' && c != ' ') {
    abb4:	cmp	r3, #32
    abb6:	beq.n	abbc <FatFile::parsePathName(char const*, fname_t*, char const**)+0xc0>
    abb8:	cmp	r3, #46	; 0x2e
    abba:	bne.n	abd2 <FatFile::parsePathName(char const*, fname_t*, char const**)+0xd6>
    abbc:	subs	r3, r5, #1
    abbe:	adds	r4, r0, r3
      break;
    }
    len--;
    abc0:	mov	r5, r3
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
  *ptr = &path[end];

  // Back over spaces and dots.
  while (len) {
    abc2:	cbz	r3, abdc <FatFile::parsePathName(char const*, fname_t*, char const**)+0xe0>
    c = path[len - 1];
    abc4:	ldrb.w	r2, [r4, #-1]!
    abc8:	subs	r3, #1
    if (c != '.' && c != ' ') {
    abca:	cmp	r2, #46	; 0x2e
    abcc:	beq.n	abc0 <FatFile::parsePathName(char const*, fname_t*, char const**)+0xc4>
    abce:	cmp	r2, #32
    abd0:	beq.n	abc0 <FatFile::parsePathName(char const*, fname_t*, char const**)+0xc4>
      break;
    }
    len--;
  }
  // Max length of LFN is 255.
  if (len > 255) {
    abd2:	cmp	r5, #255	; 0xff
    abd4:	bgt.n	ab6e <FatFile::parsePathName(char const*, fname_t*, char const**)+0x72>
    abd6:	mov	r7, r5
    abd8:	subs	r4, r5, #1
    abda:	b.n	abe2 <FatFile::parsePathName(char const*, fname_t*, char const**)+0xe6>
    abdc:	mov.w	r4, #4294967295
    abe0:	mov	r7, r5
    abe2:	add.w	r3, r1, #12
    abe6:	add.w	r6, r1, #23
    goto fail;
  }
  fname->len = len;
  // Blank file short name.
  for (uint8_t k = 0; k < 11; k++) {
    fname->sfn[k] = ' ';
    abea:	movs	r2, #32
  // Max length of LFN is 255.
  if (len > 255) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  fname->len = len;
    abec:	str	r7, [r1, #4]
  // Blank file short name.
  for (uint8_t k = 0; k < 11; k++) {
    fname->sfn[k] = ' ';
    abee:	strb.w	r2, [r3, #1]!
    DBG_FAIL_MACRO;
    goto fail;
  }
  fname->len = len;
  // Blank file short name.
  for (uint8_t k = 0; k < 11; k++) {
    abf2:	cmp	r3, r6
    abf4:	bne.n	abee <FatFile::parsePathName(char const*, fname_t*, char const**)+0xf2>
    fname->sfn[k] = ' ';
  }
  // skip leading spaces and dots.
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
    abf6:	ldrb	r3, [r0, #0]
    abf8:	cmp	r3, #46	; 0x2e
    abfa:	beq.n	ac02 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x106>
    abfc:	cmp	r3, #32
    abfe:	bne.w	ad4e <FatFile::parsePathName(char const*, fname_t*, char const**)+0x252>
    ac02:	mov	r6, r0
    ac04:	movs	r3, #0
    ac06:	ldrb.w	r2, [r6, #1]!
    ac0a:	adds	r3, #1
    ac0c:	cmp	r2, #46	; 0x2e
    ac0e:	beq.n	ac06 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x10a>
    ac10:	cmp	r2, #32
    ac12:	beq.n	ac06 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x10a>
    ac14:	mov.w	lr, #0
  // Not 8.3 if leading dot or space.
  is83 = !si;

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
    ac18:	adds	r2, r4, #1
    ac1a:	beq.n	ac34 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x138>
    ac1c:	ldrb	r6, [r0, r4]
    ac1e:	adds	r2, r0, r4
    ac20:	cmp	r6, #46	; 0x2e
    ac22:	bne.n	ac2e <FatFile::parsePathName(char const*, fname_t*, char const**)+0x132>
    ac24:	b.n	ac34 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x138>
    ac26:	ldrb.w	r6, [r2, #-1]!
    ac2a:	cmp	r6, #46	; 0x2e
    ac2c:	beq.n	ac34 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x138>
    ac2e:	adds.w	r4, r4, #4294967295
    ac32:	bcs.n	ac26 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x12a>
  for (; si < len; si++) {
    ac34:	cmp	r5, r3
    ac36:	mov.w	r9, #0
    ac3a:	ble.w	ad76 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x27a>
    ac3e:	mov.w	ip, #7
    ac42:	mov.w	r8, #8
    ac46:	mov	r6, r9
    ac48:	mov	sl, r9
    c = path[si];
    ac4a:	ldrb	r2, [r0, r3]
    if (c == ' ' || (c == '.' && dot != si)) {
    ac4c:	cmp	r2, #32
    ac4e:	beq.n	ac58 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x15c>
    ac50:	cmp	r2, #46	; 0x2e
    ac52:	bne.n	ac84 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x188>
    ac54:	cmp	r4, r3
    ac56:	beq.n	ac84 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x188>
      is83 = false;
    ac58:	mov.w	lr, #0
  // Not 8.3 if leading dot or space.
  is83 = !si;

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
  for (; si < len; si++) {
    ac5c:	adds	r3, #1
    ac5e:	cmp	r3, r5
    ac60:	blt.n	ac4a <FatFile::parsePathName(char const*, fname_t*, char const**)+0x14e>
      if (i < 7) {
        fname->seqPos = i;
      }
    }
  }
  if (fname->sfn[0] == ' ') {
    ac62:	ldrb	r3, [r1, #13]
    ac64:	cmp	r3, #32
    ac66:	beq.n	ab6e <FatFile::parsePathName(char const*, fname_t*, char const**)+0x72>
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (is83) {
    ac68:	cmp.w	lr, #0
    ac6c:	beq.n	ad1e <FatFile::parsePathName(char const*, fname_t*, char const**)+0x222>
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
    ac6e:	tst.w	sl, r9
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
    ac72:	mov.w	r0, #1
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (is83) {
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
    ac76:	it	ne
    ac78:	movne.w	r9, #2
    ac7c:	strb.w	r9, [r1]
    ac80:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  /** Check for a legal 8.3 character.
   * \param[in] c Character to be checked.
   * \return true for a legal 8.3 character.
   */
  static bool legal83Char(uint8_t c) {
    if (c == '"' || c == '|') {
    ac84:	cmp	r2, #34	; 0x22
    ac86:	beq.n	ac98 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x19c>
    ac88:	cmp	r2, #124	; 0x7c
    ac8a:	beq.n	ac98 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x19c>
      return false;
    }
    // *+,./
    if (0X2A <= c && c <= 0X2F && c != 0X2D) {
    ac8c:	sub.w	r7, r2, #42	; 0x2a
    ac90:	cmp	r7, #5
    ac92:	bhi.n	acbe <FatFile::parsePathName(char const*, fname_t*, char const**)+0x1c2>
    ac94:	cmp	r2, #45	; 0x2d
    ac96:	beq.n	acbe <FatFile::parsePathName(char const*, fname_t*, char const**)+0x1c2>
    c = path[si];
    if (c == ' ' || (c == '.' && dot != si)) {
      is83 = false;
      continue;
    }
    if (!legal83Char(c) && si != dot) {
    ac98:	cmp	r4, r3
    ac9a:	beq.n	acd6 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x1da>
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
    ac9c:	cmp	r6, ip
    ac9e:	ite	ls
    aca0:	movls	r2, #0
    aca2:	movhi	r2, #1
    aca4:	cbnz	r2, ad10 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x214>
    if (c == ' ' || (c == '.' && dot != si)) {
      is83 = false;
      continue;
    }
    if (!legal83Char(c) && si != dot) {
      is83 = false;
    aca6:	mov	lr, r2
      c = '_';
    aca8:	movs	r2, #95	; 0x5f
        c += 'A' - 'a';
        lc |= bit;
      } else if ('A' <= c && c <= 'Z') {
        uc |= bit;
      }
      fname->sfn[i++] = c;
    acaa:	adds	r7, r6, #1
    acac:	add.w	fp, r1, r6
    acb0:	uxtb	r6, r7
    acb2:	strb.w	r2, [fp, #13]
      if (i < 7) {
    acb6:	cmp	r6, #6
    acb8:	bhi.n	ac5c <FatFile::parsePathName(char const*, fname_t*, char const**)+0x160>
        fname->seqPos = i;
    acba:	strb	r6, [r1, #12]
    acbc:	b.n	ac5c <FatFile::parsePathName(char const*, fname_t*, char const**)+0x160>
      return false;
    }
    // :;<=>?
    if (0X3A <= c && c <= 0X3F) {
    acbe:	sub.w	r7, r2, #58	; 0x3a
    acc2:	cmp	r7, #5
    acc4:	bls.n	ac98 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x19c>
      return false;
    }
    // [\]
    if (0X5B <= c && c <= 0X5D) {
    acc6:	sub.w	r7, r2, #91	; 0x5b
    acca:	cmp	r7, #2
    accc:	bls.n	ac98 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x19c>
    c = path[si];
    if (c == ' ' || (c == '.' && dot != si)) {
      is83 = false;
      continue;
    }
    if (!legal83Char(c) && si != dot) {
    acce:	sub.w	r7, r2, #33	; 0x21
    acd2:	cmp	r7, #93	; 0x5d
    acd4:	bhi.n	ac98 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x19c>
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
    acd6:	cmp	r4, r3
    acd8:	beq.n	acf0 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x1f4>
    acda:	cmp	r6, ip
    acdc:	bhi.n	acf0 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x1f4>
      si = dot;
      in = 10;  // Max index for full 8.3 name.
      i = 8;    // Place for extension.
      bit = FAT_CASE_LC_EXT;  // bit for extension.
    } else {
      if ('a' <= c && c <= 'z') {
    acde:	sub.w	r7, r2, #97	; 0x61
    ace2:	cmp	r7, #25
    ace4:	bhi.n	ad40 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x244>
        c += 'A' - 'a';
    ace6:	subs	r2, #32
        lc |= bit;
    ace8:	orr.w	r9, r8, r9
      in = 10;  // Max index for full 8.3 name.
      i = 8;    // Place for extension.
      bit = FAT_CASE_LC_EXT;  // bit for extension.
    } else {
      if ('a' <= c && c <= 'z') {
        c += 'A' - 'a';
    acec:	uxtb	r2, r2
    acee:	b.n	acaa <FatFile::parsePathName(char const*, fname_t*, char const**)+0x1ae>
    if (!legal83Char(c) && si != dot) {
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
      if (in == 10) {
    acf0:	cmp.w	ip, #10
    acf4:	beq.n	ad16 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x21a>
        // Done - extension longer than three characters.
        is83 = false;
        break;
      }
      if (si != dot) {
    acf6:	cmp	r4, r3
    acf8:	beq.n	ad32 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x236>
        is83 = false;
      }
      // Break if no dot and base-name is longer than eight characters.
      if (si > dot) {
    acfa:	cmp	r4, r3
    acfc:	blt.n	ad16 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x21a>
    acfe:	mov	r3, r4
        break;
      }
      si = dot;
      in = 10;  // Max index for full 8.3 name.
    ad00:	mov.w	ip, #10
      i = 8;    // Place for extension.
    ad04:	movs	r6, #8
      bit = FAT_CASE_LC_EXT;  // bit for extension.
    ad06:	mov.w	r8, #16
        // Done - extension longer than three characters.
        is83 = false;
        break;
      }
      if (si != dot) {
        is83 = false;
    ad0a:	mov.w	lr, #0
    ad0e:	b.n	ac5c <FatFile::parsePathName(char const*, fname_t*, char const**)+0x160>
    if (!legal83Char(c) && si != dot) {
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
      if (in == 10) {
    ad10:	cmp.w	ip, #10
    ad14:	bne.n	acfa <FatFile::parsePathName(char const*, fname_t*, char const**)+0x1fe>
      if (i < 7) {
        fname->seqPos = i;
      }
    }
  }
  if (fname->sfn[0] == ' ') {
    ad16:	ldrb	r3, [r1, #13]
    ad18:	cmp	r3, #32
    ad1a:	beq.w	ab6e <FatFile::parsePathName(char const*, fname_t*, char const**)+0x72>

  if (is83) {
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
    ad1e:	ldrb	r3, [r1, #12]
  }

  if (is83) {
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    ad20:	movs	r0, #1
    fname->sfn[fname->seqPos] = '~';
    ad22:	movs	r4, #126	; 0x7e
    fname->sfn[fname->seqPos + 1] = '1';
    ad24:	movs	r2, #49	; 0x31

  if (is83) {
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
    ad26:	add	r3, r1
  }

  if (is83) {
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    ad28:	strb	r0, [r1, #0]
    fname->sfn[fname->seqPos] = '~';
    ad2a:	strb	r4, [r3, #13]
    fname->sfn[fname->seqPos + 1] = '1';
    ad2c:	strb	r2, [r3, #14]
    ad2e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ad32:	mov	r3, r4
      // Break if no dot and base-name is longer than eight characters.
      if (si > dot) {
        break;
      }
      si = dot;
      in = 10;  // Max index for full 8.3 name.
    ad34:	mov.w	ip, #10
      i = 8;    // Place for extension.
    ad38:	movs	r6, #8
      bit = FAT_CASE_LC_EXT;  // bit for extension.
    ad3a:	mov.w	r8, #16
    ad3e:	b.n	ac5c <FatFile::parsePathName(char const*, fname_t*, char const**)+0x160>
    } else {
      if ('a' <= c && c <= 'z') {
        c += 'A' - 'a';
        lc |= bit;
      } else if ('A' <= c && c <= 'Z') {
    ad40:	sub.w	r7, r2, #65	; 0x41
    ad44:	cmp	r7, #25
    ad46:	bhi.n	acaa <FatFile::parsePathName(char const*, fname_t*, char const**)+0x1ae>
        uc |= bit;
    ad48:	orr.w	sl, r8, sl
    ad4c:	b.n	acaa <FatFile::parsePathName(char const*, fname_t*, char const**)+0x1ae>
  // Blank file short name.
  for (uint8_t k = 0; k < 11; k++) {
    fname->sfn[k] = ' ';
  }
  // skip leading spaces and dots.
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
    ad4e:	mov.w	lr, #1
    ad52:	movs	r3, #0
    ad54:	b.n	ac18 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x11c>
      goto fail;
    }
  }
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
  *ptr = &path[end];
    ad56:	str.w	r8, [r2]
    ad5a:	b.n	abae <FatFile::parsePathName(char const*, fname_t*, char const**)+0xb2>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
    ad5c:	cmp	r3, #47	; 0x2f
  *ptr = &path[end];
    ad5e:	mov.w	r7, #0
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
    ad62:	beq.n	ad68 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x26c>
    ad64:	cmp	r3, #32
    ad66:	bne.n	ad6c <FatFile::parsePathName(char const*, fname_t*, char const**)+0x270>
  while (*path == ' ') {
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    ad68:	mov	r5, r7
    ad6a:	b.n	ab98 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x9c>
      goto fail;
    }
  }
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
  *ptr = &path[end];
    ad6c:	str	r0, [r2, #0]
    ad6e:	mov.w	r4, #4294967295
    ad72:	mov	r5, r7
    ad74:	b.n	abe2 <FatFile::parsePathName(char const*, fname_t*, char const**)+0xe6>
  // Not 8.3 if leading dot or space.
  is83 = !si;

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
  for (; si < len; si++) {
    ad76:	mov	sl, r9
    ad78:	b.n	ac62 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x166>
    ad7a:	nop
    ad7c:	.word	0x05000101

0000ad80 <FatFile::remove()>:

fail:
  return 0;
}
//------------------------------------------------------------------------------
bool FatFile::remove() {
    ad80:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  FatFile dirFile;
  DirFat_t* dir;
  DirLfn_t* ldir;

  // Cant' remove not open for write.
  if (!isWritable()) {
    ad84:	ldrb	r2, [r0, #2]

fail:
  return 0;
}
//------------------------------------------------------------------------------
bool FatFile::remove() {
    ad86:	sub	sp, #40	; 0x28
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attributes(FILE_ATTR_CLOSED), m_error(0), m_flags(0) {}
    ad88:	movs	r3, #0
  FatFile dirFile;
  DirFat_t* dir;
  DirLfn_t* ldir;

  // Cant' remove not open for write.
  if (!isWritable()) {
    ad8a:	lsls	r2, r2, #30
    ad8c:	strb.w	r3, [sp, #4]
    ad90:	strb.w	r3, [sp, #5]
    ad94:	strb.w	r3, [sp, #6]
    ad98:	bpl.n	ade0 <FatFile::remove()+0x60>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Free any clusters.
  if (m_firstCluster && !m_vol->freeChain(m_firstCluster)) {
    ad9a:	ldr	r1, [r0, #32]
    ad9c:	mov	r5, r0
    ad9e:	cbnz	r1, adea <FatFile::remove()+0x6a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Cache directory entry.
  dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
    ada0:	movs	r1, #1
    ada2:	mov	r0, r5
    ada4:	bl	98c0 <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    ada8:	cbz	r0, ade0 <FatFile::remove()+0x60>
    adaa:	subs	r1, r0, #1
    adac:	add.w	r7, r0, #10
#include "FatFile.h"
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
    adb0:	movs	r4, #0
  for (uint8_t i = 0; i < 11; i++) {
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
    adb2:	lsrs	r2, r4, #1
    adb4:	ldrb.w	r6, [r1, #1]!
    adb8:	orr.w	r3, r2, r4, lsl #7
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
    adbc:	cmp	r7, r1
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
    adbe:	uxtab	r3, r6, r3
    adc2:	uxtb	r4, r3
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
    adc4:	bne.n	adb2 <FatFile::remove()+0x32>
    goto fail;
  }
  checksum = lfnChecksum(dir->name);

  // Mark entry deleted.
  dir->name[0] = FAT_NAME_DELETED;
    adc6:	mov.w	r8, #229	; 0xe5

  // Set this file closed.
  m_attributes = FILE_ATTR_CLOSED;
    adca:	movs	r3, #0
    goto fail;
  }
  checksum = lfnChecksum(dir->name);

  // Mark entry deleted.
  dir->name[0] = FAT_NAME_DELETED;
    adcc:	strb.w	r8, [r0]
  // Set this file closed.
  m_attributes = FILE_ATTR_CLOSED;
  m_flags = 0;

  // Write entry to device.
  if (!m_vol->cacheSync()) {
    add0:	ldr	r6, [r5, #8]

  // Mark entry deleted.
  dir->name[0] = FAT_NAME_DELETED;

  // Set this file closed.
  m_attributes = FILE_ATTR_CLOSED;
    add2:	strb	r3, [r5, #0]
  cache_t* cacheFetchFat(uint32_t sector, uint8_t options) {
    return m_fatCache.read(sector,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    add4:	add.w	r0, r6, #36	; 0x24
  m_flags = 0;
    add8:	strb	r3, [r5, #2]
    adda:	bl	a5f0 <FatCache::sync()>
    adde:	cbnz	r0, adf6 <FatFile::remove()+0x76>
  }
  // Fall into fail.
  DBG_FAIL_MACRO;

fail:
  return false;
    ade0:	movs	r6, #0
}
    ade2:	mov	r0, r6
    ade4:	add	sp, #40	; 0x28
    ade6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (!isWritable()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Free any clusters.
  if (m_firstCluster && !m_vol->freeChain(m_firstCluster)) {
    adea:	ldr	r0, [r0, #8]
    adec:	bl	a768 <FatPartition::freeChain(unsigned long)>
    adf0:	cmp	r0, #0
    adf2:	bne.n	ada0 <FatFile::remove()+0x20>
    adf4:	b.n	ade0 <FatFile::remove()+0x60>
    adf6:	add.w	r0, r6, #560	; 0x230
    adfa:	bl	a5f0 <FatCache::sync()>
    adfe:	cmp	r0, #0
    ae00:	beq.n	ade0 <FatFile::remove()+0x60>
    ae02:	ldr	r0, [r6, #0]
  // sector I/O functions.
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
  }
  bool syncDevice() {
    return m_blockDev->syncDevice();
    ae04:	ldr	r3, [r0, #0]
    ae06:	ldr	r3, [r3, #20]
    ae08:	blx	r3
  cache_t* cacheFetchFat(uint32_t sector, uint8_t options) {
    return m_fatCache.read(sector,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    ae0a:	mov	r6, r0
    ae0c:	cmp	r0, #0
    ae0e:	beq.n	ade0 <FatFile::remove()+0x60>
  // Write entry to device.
  if (!m_vol->cacheSync()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!isLFN()) {
    ae10:	ldrb	r3, [r5, #3]
    ae12:	cmp	r3, #0
    ae14:	beq.n	ade2 <FatFile::remove()+0x62>
    // Done, no LFN entries.
    return true;
  }
  if (!dirFile.openCluster(this)) {
    ae16:	mov	r1, r5
    ae18:	add	r0, sp, #4
    ae1a:	bl	a9c4 <FatFile::openCluster(FatFile*)>
    ae1e:	cmp	r0, #0
    ae20:	beq.n	ade0 <FatFile::remove()+0x60>
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    ae22:	ldrb	r3, [r5, #3]
    ae24:	cmp	r3, #0
    ae26:	beq.n	ade0 <FatFile::remove()+0x60>
    ae28:	movs	r7, #1
    ae2a:	b.n	ae6c <FatFile::remove()+0xec>
    if (!dirFile.seekSet(32UL*(m_dirIndex - order))) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    ldir = reinterpret_cast<DirLfn_t*>(dirFile.readDirCache());
    ae2c:	add	r0, sp, #4
    ae2e:	bl	9e58 <FatFile::readDirCache(bool)>
  }
  if (!dirFile.openCluster(this)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    ae32:	adds	r3, r7, #1
    if (!dirFile.seekSet(32UL*(m_dirIndex - order))) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    ldir = reinterpret_cast<DirLfn_t*>(dirFile.readDirCache());
    if (!ldir) {
    ae34:	cmp	r0, #0
    ae36:	beq.n	ade0 <FatFile::remove()+0x60>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME ||
    ae38:	ldrb	r2, [r0, #11]
    ae3a:	cmp	r2, #15
    ae3c:	bne.n	ade0 <FatFile::remove()+0x60>
        order != (ldir->order & 0X1F) ||
    ae3e:	ldrb	r2, [r0, #0]
    ldir = reinterpret_cast<DirLfn_t*>(dirFile.readDirCache());
    if (!ldir) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME ||
    ae40:	and.w	r1, r2, #31
    ae44:	cmp	r7, r1
  }
  if (!dirFile.openCluster(this)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    ae46:	uxtb	r7, r3
    ldir = reinterpret_cast<DirLfn_t*>(dirFile.readDirCache());
    if (!ldir) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME ||
    ae48:	bne.n	ade0 <FatFile::remove()+0x60>
        order != (ldir->order & 0X1F) ||
    ae4a:	ldrb	r3, [r0, #13]
    ae4c:	cmp	r3, r4
    ae4e:	bne.n	ade0 <FatFile::remove()+0x60>
        checksum != ldir->checksum) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    last = ldir->order & FAT_ORDER_LAST_LONG_ENTRY;
    ldir->order = FAT_NAME_DELETED;
    ae50:	strb.w	r8, [r0]
    m_vol->cacheDirty();
    ae54:	ldr	r1, [r5, #8]
  cache_t* buffer() {
    return &m_buffer;
  }
  /** Set current sector dirty. */
  void dirty() {
    m_status |= CACHE_STATUS_DIRTY;
    ae56:	ldrb.w	r3, [r1, #36]	; 0x24
    ae5a:	orr.w	r3, r3, #1
    ae5e:	strb.w	r3, [r1, #36]	; 0x24
    if (last) {
    ae62:	lsls	r3, r2, #25
    ae64:	bmi.n	ae80 <FatFile::remove()+0x100>
  }
  if (!dirFile.openCluster(this)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    ae66:	ldrb	r3, [r5, #3]
    ae68:	cmp	r3, r7
    ae6a:	bcc.n	ade0 <FatFile::remove()+0x60>
    if (!dirFile.seekSet(32UL*(m_dirIndex - order))) {
    ae6c:	ldrh	r1, [r5, #4]
    ae6e:	add	r0, sp, #4
    ae70:	subs	r1, r1, r7
    ae72:	lsls	r1, r1, #5
    ae74:	bl	a0dc <FatFile::seekSet(unsigned long)>
      DBG_FAIL_MACRO;
      goto fail;
    }
    ldir = reinterpret_cast<DirLfn_t*>(dirFile.readDirCache());
    ae78:	movs	r1, #0
  if (!dirFile.openCluster(this)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    if (!dirFile.seekSet(32UL*(m_dirIndex - order))) {
    ae7a:	cmp	r0, #0
    ae7c:	bne.n	ae2c <FatFile::remove()+0xac>
    ae7e:	b.n	ade0 <FatFile::remove()+0x60>
    }
    last = ldir->order & FAT_ORDER_LAST_LONG_ENTRY;
    ldir->order = FAT_NAME_DELETED;
    m_vol->cacheDirty();
    if (last) {
      if (!m_vol->cacheSync()) {
    ae80:	ldr	r4, [r5, #8]
  cache_t* cacheFetchFat(uint32_t sector, uint8_t options) {
    return m_fatCache.read(sector,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    ae82:	add.w	r0, r4, #36	; 0x24
    ae86:	bl	a5f0 <FatCache::sync()>
    ae8a:	cmp	r0, #0
    ae8c:	beq.n	ade0 <FatFile::remove()+0x60>
    ae8e:	add.w	r0, r4, #560	; 0x230
    ae92:	bl	a5f0 <FatCache::sync()>
    ae96:	cmp	r0, #0
    ae98:	beq.n	ade0 <FatFile::remove()+0x60>
    ae9a:	ldr	r0, [r4, #0]
  // sector I/O functions.
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
  }
  bool syncDevice() {
    return m_blockDev->syncDevice();
    ae9c:	ldr	r3, [r0, #0]
    ae9e:	ldr	r3, [r3, #20]
    aea0:	blx	r3
  cache_t* cacheFetchFat(uint32_t sector, uint8_t options) {
    return m_fatCache.read(sector,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    aea2:	cmp	r0, #0
    aea4:	beq.n	ade0 <FatFile::remove()+0x60>
    aea6:	b.n	ade2 <FatFile::remove()+0x62>

0000aea8 <FatFile::lfnUniqueSfn(fname_t*)>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::lfnUniqueSfn(fname_t* fname) {
    aea8:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    aeac:	mov	r6, r1
    aeae:	mov	r4, r0
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;;
    aeb0:	mov.w	r8, #2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
      }
    }
    fname->sfn[pos] = '~';
    aeb4:	mov.w	r9, #126	; 0x7e
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::lfnUniqueSfn(fname_t* fname) {
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;;
    aeb8:	ldrb	r7, [r1, #12]
        goto fail;
      }
      if (dir->name[0] == FAT_NAME_FREE) {
        goto done;
      }
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    aeba:	add.w	r5, r1, #13
  for (uint8_t seq = 2; seq < 100; seq++) {
    if (seq < FIRST_HASH_SEQ) {
      fname->sfn[pos + 1] = '0' + seq;
    } else {
      DBG_PRINT_IF(seq > FIRST_HASH_SEQ);
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
    aebe:	ldr	r0, [r6, #4]
    aec0:	ldr	r1, [r6, #8]
    aec2:	add.w	r3, r8, r0
    aec6:	uxth	r3, r3
}
//------------------------------------------------------------------------------
// Daniel Bernstein University of Illinois at Chicago.
// Original had + instead of ^
static uint16_t Bernstein(uint16_t hash, const char *str, size_t len) {
  for (size_t i = 0; i < len; i++) {
    aec8:	cbz	r0, aede <FatFile::lfnUniqueSfn(fname_t*)+0x36>
    aeca:	add	r0, r1
    // hash = hash * 33 ^ str[i];
    hash = ((hash << 5) + hash) ^ str[i];
    aecc:	ldrb.w	r2, [r1], #1
    aed0:	add.w	r3, r3, r3, lsl #5
}
//------------------------------------------------------------------------------
// Daniel Bernstein University of Illinois at Chicago.
// Original had + instead of ^
static uint16_t Bernstein(uint16_t hash, const char *str, size_t len) {
  for (size_t i = 0; i < len; i++) {
    aed4:	cmp	r0, r1
    // hash = hash * 33 ^ str[i];
    hash = ((hash << 5) + hash) ^ str[i];
    aed6:	eor.w	r3, r3, r2
    aeda:	uxth	r3, r3
}
//------------------------------------------------------------------------------
// Daniel Bernstein University of Illinois at Chicago.
// Original had + instead of ^
static uint16_t Bernstein(uint16_t hash, const char *str, size_t len) {
  for (size_t i = 0; i < len; i++) {
    aedc:	bne.n	aecc <FatFile::lfnUniqueSfn(fname_t*)+0x24>
    aede:	cmp	r7, #3
    aee0:	it	cs
    aee2:	movcs	r7, #3
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
    aee4:	adds	r2, r7, #4
    aee6:	uxtb	r2, r2
        uint8_t h = hex & 0XF;
    aee8:	and.w	r1, r3, #15
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
    aeec:	add.w	lr, r2, #4294967295
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
    aef0:	lsrs	r3, r3, #4
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
    aef2:	cmp	r1, #9
    aef4:	add.w	r0, r1, #55	; 0x37
    aef8:	it	ls
    aefa:	addls.w	r0, r1, #48	; 0x30
    aefe:	adds	r1, r6, r2
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
    af00:	uxtb.w	r2, lr
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
    af04:	strb	r0, [r1, #13]
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
    af06:	cmp	r7, r2
    af08:	bcc.n	aee8 <FatFile::lfnUniqueSfn(fname_t*)+0x40>
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
      }
    }
    fname->sfn[pos] = '~';
    af0a:	adds	r3, r6, r7
   * \return true for success or false for failure.
   */
  bool remove(const char* path);
  /** Set the file's current position to zero. */
  void rewind() {
    seekSet(0);
    af0c:	movs	r1, #0
    af0e:	mov	r0, r4
    af10:	strb.w	r9, [r3, #13]
    af14:	bl	a0dc <FatFile::seekSet(unsigned long)>
    rewind();
    while (1) {
      dir = readDirCache(true);
    af18:	movs	r1, #1
    af1a:	mov	r0, r4
    af1c:	bl	9e58 <FatFile::readDirCache(bool)>
        goto fail;
      }
      if (dir->name[0] == FAT_NAME_FREE) {
        goto done;
      }
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    af20:	movs	r2, #11
    }
    fname->sfn[pos] = '~';
    rewind();
    while (1) {
      dir = readDirCache(true);
      if (!dir) {
    af22:	mov	r3, r0
    af24:	cbz	r0, af54 <FatFile::lfnUniqueSfn(fname_t*)+0xac>
          goto done;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (dir->name[0] == FAT_NAME_FREE) {
    af26:	ldrb.w	lr, [r0]
        goto done;
      }
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    af2a:	mov	r1, r0
    af2c:	mov	r0, r5
          goto done;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (dir->name[0] == FAT_NAME_FREE) {
    af2e:	cmp.w	lr, #0
    af32:	beq.n	af60 <FatFile::lfnUniqueSfn(fname_t*)+0xb8>
        goto done;
      }
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    af34:	ldrb	r3, [r3, #11]
    af36:	lsls	r3, r3, #28
    af38:	bmi.n	af18 <FatFile::lfnUniqueSfn(fname_t*)+0x70>
    af3a:	bl	10c50 <memcmp>
    af3e:	cmp	r0, #0
    af40:	bne.n	af18 <FatFile::lfnUniqueSfn(fname_t*)+0x70>
    af42:	add.w	r8, r8, #1
    af46:	uxth.w	r8, r8
  uint16_t hex;

  DBG_HALT_IF(!(fname->flags & FNAME_FLAG_LOST_CHARS));
  DBG_HALT_IF(fname->sfn[pos] != '~' && fname->sfn[pos + 1] != '1');

  for (uint8_t seq = 2; seq < 100; seq++) {
    af4a:	cmp.w	r8, #100	; 0x64
    af4e:	bne.n	aebe <FatFile::lfnUniqueSfn(fname_t*)+0x16>
fail:
  return false;

done:
  return true;
}
    af50:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    fname->sfn[pos] = '~';
    rewind();
    while (1) {
      dir = readDirCache(true);
      if (!dir) {
        if (!getError()) {
    af54:	ldrb	r0, [r4, #1]
    af56:	clz	r0, r0
    af5a:	lsrs	r0, r0, #5
    af5c:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

fail:
  return false;

done:
  return true;
    af60:	movs	r0, #1
    af62:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    af66:	nop

0000af68 <FatFile::open(FatFile*, fname_t*, int)>:
  
 fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
    af68:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint16_t time;
  DirFat_t* dir;
  DirLfn_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
    af6c:	ldrb	r4, [r1, #0]
  
 fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
    af6e:	sub	sp, #52	; 0x34
  uint16_t time;
  DirFat_t* dir;
  DirLfn_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
    af70:	tst.w	r4, #112	; 0x70
    af74:	beq.n	af7a <FatFile::open(FatFile*, fname_t*, int)+0x12>
    af76:	ldrb	r4, [r0, #0]
    af78:	cbz	r4, af82 <FatFile::open(FatFile*, fname_t*, int)+0x1a>
    goto fail;
  }
  return true;

fail:
  return false;
    af7a:	movs	r0, #0
}
    af7c:	add	sp, #52	; 0x34
    af7e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (!dirFile->isDir() || isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
    af82:	ldrb	r4, [r2, #0]
  uint16_t curIndex;
  uint16_t date;
  uint16_t time;
  DirFat_t* dir;
  DirLfn_t* ldir;
  size_t len = fname->len;
    af84:	ldr.w	sl, [r2, #4]
  if (!dirFile->isDir() || isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
    af88:	lsls	r4, r4, #30
    af8a:	bne.n	b01e <FatFile::open(FatFile*, fname_t*, int)+0xb6>
    af8c:	movs	r7, #1
  uint8_t freeNeed;
  uint8_t freeFound = 0;
  uint8_t order = 0;
  uint8_t checksum = 0;
  uint8_t ms10;
  uint16_t freeIndex = 0;
    af8e:	mov.w	r9, #0
    af92:	mov	r6, r1
    af94:	str	r3, [sp, #28]
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
    af96:	add.w	r3, r2, #13
    af9a:	str	r0, [sp, #36]	; 0x24
    af9c:	mov	r1, r9
    af9e:	mov	r0, r6
    afa0:	mov	fp, r2
    afa2:	str	r3, [sp, #16]
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
    afa4:	mov	r4, r9
  uint8_t order = 0;
  uint8_t checksum = 0;
    afa6:	str.w	r9, [sp, #24]
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
    afaa:	mov	r8, r9
  uint8_t freeNeed;
  uint8_t freeFound = 0;
  uint8_t order = 0;
    afac:	str.w	r9, [sp, #12]
 fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
    afb0:	str.w	r9, [sp, #20]
    afb4:	bl	a0dc <FatFile::seekSet(unsigned long)>
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
    afb8:	ldr	r5, [r6, #20]
    dir = dirFile->readDirCache(true);
    afba:	movs	r1, #1
    afbc:	mov	r0, r6
    afbe:	bl	9e58 <FatFile::readDirCache(bool)>
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
    afc2:	ubfx	r5, r5, #5, #16
    dir = dirFile->readDirCache(true);
    if (!dir) {
    afc6:	mov	r3, r0
    afc8:	cmp	r0, #0
    afca:	beq.w	b136 <FatFile::open(FatFile*, fname_t*, int)+0x1ce>
        goto fail;
      }
      // At EOF
      goto create;
    }
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == FAT_NAME_FREE) {
    afce:	ldrb	r2, [r0, #0]
    afd0:	sub.w	r1, r2, #229	; 0xe5
    afd4:	clz	r1, r1
    afd8:	lsrs	r1, r1, #5
    afda:	cmp	r2, #0
    afdc:	beq.n	b04a <FatFile::open(FatFile*, fname_t*, int)+0xe2>
    afde:	cmp	r1, #0
    afe0:	bne.n	b04a <FatFile::open(FatFile*, fname_t*, int)+0xe2>
      if (dir->name[0] == FAT_NAME_FREE) {
        goto create;
      }
    } else {
      if (freeFound < freeNeed) {
        freeFound = 0;
    afe2:	cmp	r4, r7
    afe4:	it	cc
    afe6:	movcc	r4, #0
      }
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == '.') {
    afe8:	cmp	r2, #46	; 0x2e
    afea:	beq.n	b044 <FatFile::open(FatFile*, fname_t*, int)+0xdc>
    afec:	cbnz	r1, b044 <FatFile::open(FatFile*, fname_t*, int)+0xdc>
    afee:	ldrb	r0, [r3, #11]
      lfnOrd = 0;
    } else if (isLongName(dir)) {
    aff0:	cmp	r0, #15
    aff2:	beq.n	b0b0 <FatFile::open(FatFile*, fname_t*, int)+0x148>
          // Not found.
          lfnOrd = 0;
          break;
        }
      }
    } else if (isFileOrSubdir(dir)) {
    aff4:	lsls	r2, r0, #28
    aff6:	bmi.n	b044 <FatFile::open(FatFile*, fname_t*, int)+0xdc>
      if (lfnOrd) {
    aff8:	cmp.w	r8, #0
    affc:	bne.w	b2b8 <FatFile::open(FatFile*, fname_t*, int)+0x350>
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
    b000:	mov	r0, r3
    b002:	movs	r2, #11
    b004:	ldr	r1, [sp, #16]
    b006:	bl	10c50 <memcmp>
    b00a:	cmp	r0, #0
    b00c:	bne.n	afb8 <FatFile::open(FatFile*, fname_t*, int)+0x50>
        if (!(fname->flags & FNAME_FLAG_LOST_CHARS)) {
    b00e:	ldrb.w	r3, [fp]
    b012:	lsls	r0, r3, #31
    b014:	bpl.w	b2e2 <FatFile::open(FatFile*, fname_t*, int)+0x37a>
          goto found;
        }
        fnameFound = true;
    b018:	movs	r3, #1
    b01a:	str	r3, [sp, #20]
    b01c:	b.n	afb8 <FatFile::open(FatFile*, fname_t*, int)+0x50>
  if (!dirFile->isDir() || isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
    b01e:	add.w	r4, sl, #12
    b022:	ldr	r7, [pc, #720]	; (b2f4 <FatFile::open(FatFile*, fname_t*, int)+0x38c>)
    b024:	umull	r4, r7, r7, r4
    b028:	lsrs	r7, r7, #2
    b02a:	adds	r7, #1
    b02c:	uxtb	r7, r7
    b02e:	b.n	af8e <FatFile::open(FatFile*, fname_t*, int)+0x26>
        if ((ldir->order & FAT_ORDER_LAST_LONG_ENTRY) == 0) {
          continue;
        }
        lfnOrd = order = ldir->order & 0X1F;
        checksum = ldir->checksum;
      } else if (ldir->order != --order || checksum != ldir->checksum) {
    b030:	ldr	r0, [sp, #12]
    b032:	subs	r0, #1
    b034:	uxtb	r0, r0
    b036:	cmp	r2, r0
    b038:	str	r0, [sp, #12]
    b03a:	bne.n	b044 <FatFile::open(FatFile*, fname_t*, int)+0xdc>
    b03c:	ldrb	r2, [r3, #13]
    b03e:	ldr	r0, [sp, #24]
    b040:	cmp	r0, r2
    b042:	beq.n	b0c8 <FatFile::open(FatFile*, fname_t*, int)+0x160>
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
          // Not found.
          lfnOrd = 0;
    b044:	mov.w	r8, #0
    b048:	b.n	afb8 <FatFile::open(FatFile*, fname_t*, int)+0x50>
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
    b04a:	cmp	r4, #0
    b04c:	it	eq
    b04e:	moveq	r9, r5
    }
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == FAT_NAME_FREE) {
      if (freeFound == 0) {
        freeIndex = curIndex;
      }
      if (freeFound < freeNeed) {
    b050:	cmp	r4, r7
    b052:	bcs.n	b058 <FatFile::open(FatFile*, fname_t*, int)+0xf0>
        freeFound++;
    b054:	adds	r4, #1
    b056:	uxtb	r4, r4
      }
      if (dir->name[0] == FAT_NAME_FREE) {
    b058:	cmp	r2, #0
    b05a:	bne.n	afe8 <FatFile::open(FatFile*, fname_t*, int)+0x80>
  }
  goto open;

create:
  // don't create unless O_CREAT and write mode
  if (!(oflag & O_CREAT) || !isWriteMode(oflag)) {
    b05c:	ldr	r2, [sp, #28]
    b05e:	mov	r3, r2
    b060:	lsls	r2, r3, #22
    b062:	bpl.n	af7a <FatFile::open(FatFile*, fname_t*, int)+0x12>
    b064:	and.w	r3, r3, #3
    b068:	subs	r3, #1
    b06a:	cmp	r3, #1
    b06c:	bhi.n	af7a <FatFile::open(FatFile*, fname_t*, int)+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // If at EOF start in next cluster.
  if (freeFound == 0) {
    b06e:	cmp	r4, #0
    b070:	it	eq
    b072:	moveq	r9, r5
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
    b074:	cmp	r4, r7
    b076:	bcc.n	b080 <FatFile::open(FatFile*, fname_t*, int)+0x118>
    b078:	b.n	b150 <FatFile::open(FatFile*, fname_t*, int)+0x1e8>
        goto fail;
      }
      // EOF if no error.
      break;
    }
    freeFound++;
    b07a:	uxtb	r4, r3
  // If at EOF start in next cluster.
  if (freeFound == 0) {
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
    b07c:	cmp	r7, r4
    b07e:	bls.n	b150 <FatFile::open(FatFile*, fname_t*, int)+0x1e8>
    dir = dirFile->readDirCache();
    b080:	movs	r1, #0
    b082:	mov	r0, r6
    b084:	bl	9e58 <FatFile::readDirCache(bool)>
        goto fail;
      }
      // EOF if no error.
      break;
    }
    freeFound++;
    b088:	adds	r3, r4, #1
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
    dir = dirFile->readDirCache();
    if (!dir) {
    b08a:	cmp	r0, #0
    b08c:	bne.n	b07a <FatFile::open(FatFile*, fname_t*, int)+0x112>
      if (dirFile->getError()) {
    b08e:	ldrb	r3, [r6, #1]
    b090:	cbz	r3, b09e <FatFile::open(FatFile*, fname_t*, int)+0x136>
    b092:	b.n	af7a <FatFile::open(FatFile*, fname_t*, int)+0x12>
    b094:	ldr	r3, [r6, #8]
    }
    // Done if more than one sector per cluster.  Max freeNeed is 21.
    if (dirFile->m_vol->sectorsPerCluster() > 1) {
      break;
    }
    freeFound += 16;
    b096:	uxtb	r4, r4
    if (!dirFile->addDirCluster()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // Done if more than one sector per cluster.  Max freeNeed is 21.
    if (dirFile->m_vol->sectorsPerCluster() > 1) {
    b098:	ldrb	r3, [r3, #4]
    b09a:	cmp	r3, #1
    b09c:	bhi.n	b150 <FatFile::open(FatFile*, fname_t*, int)+0x1e8>
      // EOF if no error.
      break;
    }
    freeFound++;
  }
  while (freeFound < freeNeed) {
    b09e:	cmp	r7, r4
    b0a0:	bls.n	b150 <FatFile::open(FatFile*, fname_t*, int)+0x1e8>
    // Will fail if FAT16 root.
    if (!dirFile->addDirCluster()) {
    b0a2:	mov	r0, r6
    }
    // Done if more than one sector per cluster.  Max freeNeed is 21.
    if (dirFile->m_vol->sectorsPerCluster() > 1) {
      break;
    }
    freeFound += 16;
    b0a4:	adds	r4, #16
    }
    freeFound++;
  }
  while (freeFound < freeNeed) {
    // Will fail if FAT16 root.
    if (!dirFile->addDirCluster()) {
    b0a6:	bl	982c <FatFile::addDirCluster()>
    b0aa:	cmp	r0, #0
    b0ac:	bne.n	b094 <FatFile::open(FatFile*, fname_t*, int)+0x12c>
    b0ae:	b.n	af7a <FatFile::open(FatFile*, fname_t*, int)+0x12>
    // skip empty slot or '.' or '..'
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == '.') {
      lfnOrd = 0;
    } else if (isLongName(dir)) {
      ldir = reinterpret_cast<DirLfn_t*>(dir);
      if (!lfnOrd) {
    b0b0:	cmp.w	r8, #0
    b0b4:	bne.n	b030 <FatFile::open(FatFile*, fname_t*, int)+0xc8>
        if ((ldir->order & FAT_ORDER_LAST_LONG_ENTRY) == 0) {
    b0b6:	lsls	r1, r2, #25
    b0b8:	bpl.w	afb8 <FatFile::open(FatFile*, fname_t*, int)+0x50>
          continue;
        }
        lfnOrd = order = ldir->order & 0X1F;
    b0bc:	and.w	r8, r2, #31
        checksum = ldir->checksum;
    b0c0:	ldrb	r2, [r3, #13]
      ldir = reinterpret_cast<DirLfn_t*>(dir);
      if (!lfnOrd) {
        if ((ldir->order & FAT_ORDER_LAST_LONG_ENTRY) == 0) {
          continue;
        }
        lfnOrd = order = ldir->order & 0X1F;
    b0c2:	str.w	r8, [sp, #12]
        checksum = ldir->checksum;
    b0c6:	str	r2, [sp, #24]
      } else if (ldir->order != --order || checksum != ldir->checksum) {
        lfnOrd = 0;
        continue;
      }
      size_t k = 13*(order - 1);
    b0c8:	ldr	r2, [sp, #12]
    b0ca:	subs	r2, #1
    b0cc:	add.w	r5, r2, r2, lsl #1
    b0d0:	add.w	r5, r2, r5, lsl #2
      if (k >= len) {
    b0d4:	cmp	sl, r5
        checksum = ldir->checksum;
      } else if (ldir->order != --order || checksum != ldir->checksum) {
        lfnOrd = 0;
        continue;
      }
      size_t k = 13*(order - 1);
    b0d6:	mov	r2, r5
      if (k >= len) {
    b0d8:	bls.n	b044 <FatFile::open(FatFile*, fname_t*, int)+0xdc>
    b0da:	add.w	r1, r5, #13
    b0de:	str.w	r8, [sp, #32]
    b0e2:	mov	r8, r1
    b0e4:	b.n	b112 <FatFile::open(FatFile*, fname_t*, int)+0x1aa>
}
#if USE_LONG_FILE_NAMES
//------------------------------------------------------------------------------
// Saves about 90 bytes of flash on 328 over tolower().
inline char lfnToLower(char c) {
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
    b0e6:	cmp.w	ip, #25
    b0ea:	add.w	r0, r1, #32
    b0ee:	it	ls
    b0f0:	uxtbls	r1, r0
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
    b0f2:	ldr.w	r0, [fp, #8]
    b0f6:	ldrb	r2, [r0, r2]
}
#if USE_LONG_FILE_NAMES
//------------------------------------------------------------------------------
// Saves about 90 bytes of flash on 328 over tolower().
inline char lfnToLower(char c) {
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
    b0f8:	sub.w	r0, r2, #65	; 0x41
    b0fc:	add.w	ip, r2, #32
    b100:	cmp	r0, #25
    b102:	it	ls
    b104:	uxtbls.w	r2, ip
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
    b108:	cmp	r2, r1
    b10a:	bne.n	b044 <FatFile::open(FatFile*, fname_t*, int)+0xdc>
      if (k >= len) {
        // Not found.
        lfnOrd = 0;
        continue;
      }
      for (uint8_t i = 0; i < 13; i++) {
    b10c:	cmp	lr, r8
    b10e:	mov	r2, lr
    b110:	beq.n	b14a <FatFile::open(FatFile*, fname_t*, int)+0x1e2>
        uint16_t u = lfnGetChar(ldir, i);
    b112:	subs	r1, r2, r5
    b114:	mov	r0, r3
    b116:	uxtb	r1, r1
    b118:	bl	a974 <lfnGetChar(DirLfn_t*, unsigned char)>
        if (k == len) {
    b11c:	cmp	sl, r2
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
    b11e:	add.w	lr, r2, #1
    b122:	uxtb	r1, r0
        lfnOrd = 0;
        continue;
      }
      for (uint8_t i = 0; i < 13; i++) {
        uint16_t u = lfnGetChar(ldir, i);
        if (k == len) {
    b124:	beq.w	b2aa <FatFile::open(FatFile*, fname_t*, int)+0x342>
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
    b128:	cmp	r0, #255	; 0xff
}
#if USE_LONG_FILE_NAMES
//------------------------------------------------------------------------------
// Saves about 90 bytes of flash on 328 over tolower().
inline char lfnToLower(char c) {
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
    b12a:	sub.w	ip, r1, #65	; 0x41
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
    b12e:	bls.n	b0e6 <FatFile::open(FatFile*, fname_t*, int)+0x17e>
          // Not found.
          lfnOrd = 0;
    b130:	mov.w	r8, #0
    b134:	b.n	afb8 <FatFile::open(FatFile*, fname_t*, int)+0x50>
  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
    dir = dirFile->readDirCache(true);
    if (!dir) {
      if (dirFile->getError()) {
    b136:	ldrb	r3, [r6, #1]
    b138:	cmp	r3, #0
    b13a:	bne.w	af7a <FatFile::open(FatFile*, fname_t*, int)+0x12>
  }
  goto open;

create:
  // don't create unless O_CREAT and write mode
  if (!(oflag & O_CREAT) || !isWriteMode(oflag)) {
    b13e:	ldr	r2, [sp, #28]
    b140:	mov	r3, r2
    b142:	lsls	r2, r3, #22
    b144:	bpl.w	af7a <FatFile::open(FatFile*, fname_t*, int)+0x12>
    b148:	b.n	b064 <FatFile::open(FatFile*, fname_t*, int)+0xfc>
    b14a:	ldr.w	r8, [sp, #32]
    b14e:	b.n	afb8 <FatFile::open(FatFile*, fname_t*, int)+0x50>
    if (dirFile->m_vol->sectorsPerCluster() > 1) {
      break;
    }
    freeFound += 16;
  }
  if (fnameFound) {
    b150:	ldr	r3, [sp, #20]
    b152:	cbz	r3, b162 <FatFile::open(FatFile*, fname_t*, int)+0x1fa>
    if (!dirFile->lfnUniqueSfn(fname)) {
    b154:	mov	r1, fp
    b156:	mov	r0, r6
    b158:	bl	aea8 <FatFile::lfnUniqueSfn(fname_t*)>
    b15c:	cmp	r0, #0
    b15e:	beq.w	af7a <FatFile::open(FatFile*, fname_t*, int)+0x12>
      goto fail;
    }
  }
  if (!dirFile->seekSet(32UL*freeIndex)) {
    b162:	mov.w	r1, r9, lsl #5
    b166:	mov	r0, r6
    b168:	bl	a0dc <FatFile::seekSet(unsigned long)>
    b16c:	cmp	r0, #0
    b16e:	beq.w	af7a <FatFile::open(FatFile*, fname_t*, int)+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
    b172:	subs	r7, #1
  for (order = lfnOrd ; order ; order--) {
    b174:	ands.w	r8, r7, #255	; 0xff
    b178:	beq.n	b224 <FatFile::open(FatFile*, fname_t*, int)+0x2bc>
    b17a:	mov	r7, r8
    ldir = reinterpret_cast<DirLfn_t*>(dirFile->readDirCache());
    b17c:	movs	r4, #0
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    ldir->attributes = FAT_ATTRIB_LONG_NAME;
    b17e:	movs	r5, #15
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
  for (order = lfnOrd ; order ; order--) {
    ldir = reinterpret_cast<DirLfn_t*>(dirFile->readDirCache());
    b180:	movs	r1, #0
    b182:	mov	r0, r6
    b184:	bl	9e58 <FatFile::readDirCache(bool)>
    if (!ldir) {
    b188:	cmp	r0, #0
    b18a:	beq.w	af7a <FatFile::open(FatFile*, fname_t*, int)+0x12>
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
    b18e:	ldr	r2, [r6, #8]
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    b190:	cmp	r7, r8
  cache_t* buffer() {
    return &m_buffer;
  }
  /** Set current sector dirty. */
  void dirty() {
    m_status |= CACHE_STATUS_DIRTY;
    b192:	ldrb.w	r3, [r2, #36]	; 0x24
    b196:	orr.w	r3, r3, #1
    b19a:	strb.w	r3, [r2, #36]	; 0x24
    b19e:	beq.w	b2ea <FatFile::open(FatFile*, fname_t*, int)+0x382>
    b1a2:	mov	r1, r7
    b1a4:	add.w	lr, fp, #12
    b1a8:	add.w	ip, fp, #23
#include "FatFile.h"
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
    b1ac:	movs	r3, #0
    if (!ldir) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    b1ae:	strb	r1, [r0, #0]
    ldir->attributes = FAT_ATTRIB_LONG_NAME;
    b1b0:	strb	r5, [r0, #11]
    ldir->mustBeZero1 = 0;
    b1b2:	strb	r4, [r0, #12]
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
    b1b4:	lsrs	r2, r3, #1
    b1b6:	ldrb.w	r9, [lr, #1]!
    b1ba:	orr.w	r3, r2, r3, lsl #7
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
    b1be:	cmp	lr, ip
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
    b1c0:	uxtab	r3, r9, r3
    b1c4:	uxtb	r3, r3
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
    b1c6:	bne.n	b1b4 <FatFile::open(FatFile*, fname_t*, int)+0x24c>
    setLe16(ldir->unicode3 + 2*i - 22, c);
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(DirLfn_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->order & 0X1F) - 1);
    b1c8:	and.w	r1, r1, #31
    }
    dirFile->m_vol->cacheDirty();
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    ldir->attributes = FAT_ATTRIB_LONG_NAME;
    ldir->mustBeZero1 = 0;
    ldir->checksum = lfnChecksum(fname->sfn);
    b1cc:	strb	r3, [r0, #13]
    b1ce:	add.w	lr, r0, #4
    setLe16(ldir->mustBeZero2, 0);
    lfnPutName(ldir, fname->lfn, len);
    b1d2:	ldr.w	ip, [fp, #8]
    setLe16(ldir->unicode3 + 2*i - 22, c);
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(DirLfn_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->order & 0X1F) - 1);
    b1d6:	subs	r1, #1
  for (uint8_t i = 0; i < 13; i++, k++) {
    b1d8:	movs	r3, #0
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    b1da:	strh	r4, [r0, #26]
    setLe16(ldir->unicode3 + 2*i - 22, c);
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(DirLfn_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->order & 0X1F) - 1);
    b1dc:	add.w	r2, r1, r1, lsl #1
    b1e0:	add.w	r2, r1, r2, lsl #2
    b1e4:	b.n	b200 <FatFile::open(FatFile*, fname_t*, int)+0x298>
 * \param[in] c  The 16-bit character.
 */
static void lfnPutChar(DirLfn_t *ldir, uint8_t i, uint16_t c) {
  if (i < 5) {
    setLe16(ldir->unicode1 + 2*i, c);
  } else if (i < 11) {
    b1e6:	cmp	r3, #10
    b1e8:	ite	ls
    b1ea:	strhls.w	r1, [lr]
    b1ee:	strhhi.w	r1, [lr, #2]
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(DirLfn_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->order & 0X1F) - 1);
  for (uint8_t i = 0; i < 13; i++, k++) {
    b1f2:	adds	r3, #1
    b1f4:	adds	r2, #1
    b1f6:	add.w	lr, lr, #2
    b1fa:	uxtb	r3, r3
    b1fc:	cmp	r3, #13
    b1fe:	beq.n	b21c <FatFile::open(FatFile*, fname_t*, int)+0x2b4>
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
    b200:	cmp	sl, r2
    b202:	ite	ne
    b204:	movne.w	r1, #4294967295
    b208:	moveq	r1, #0
    b20a:	ite	hi
    b20c:	ldrbhi.w	r1, [ip, r2]
    b210:	uxthls	r1, r1
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \param[in] c  The 16-bit character.
 */
static void lfnPutChar(DirLfn_t *ldir, uint8_t i, uint16_t c) {
  if (i < 5) {
    b212:	cmp	r3, #4
    b214:	bhi.n	b1e6 <FatFile::open(FatFile*, fname_t*, int)+0x27e>
    b216:	strh.w	r1, [lr, #-3]
    b21a:	b.n	b1f2 <FatFile::open(FatFile*, fname_t*, int)+0x28a>
  if (!dirFile->seekSet(32UL*freeIndex)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
  for (order = lfnOrd ; order ; order--) {
    b21c:	subs	r7, #1
    b21e:	ands.w	r7, r7, #255	; 0xff
    b222:	bne.n	b180 <FatFile::open(FatFile*, fname_t*, int)+0x218>
    ldir->mustBeZero1 = 0;
    ldir->checksum = lfnChecksum(fname->sfn);
    setLe16(ldir->mustBeZero2, 0);
    lfnPutName(ldir, fname->lfn, len);
  }
  curIndex = dirFile->m_curPosition/32;
    b224:	ldr	r5, [r6, #20]
  dir = dirFile->readDirCache();
    b226:	movs	r1, #0
    b228:	mov	r0, r6
    b22a:	bl	9e58 <FatFile::readDirCache(bool)>
    ldir->mustBeZero1 = 0;
    ldir->checksum = lfnChecksum(fname->sfn);
    setLe16(ldir->mustBeZero2, 0);
    lfnPutName(ldir, fname->lfn, len);
  }
  curIndex = dirFile->m_curPosition/32;
    b22e:	ubfx	r5, r5, #5, #16
  dir = dirFile->readDirCache();
  if (!dir) {
    b232:	mov	r4, r0
    b234:	cmp	r0, #0
    b236:	beq.w	af7a <FatFile::open(FatFile*, fname_t*, int)+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // initialize as empty file
  memset(dir, 0, sizeof(DirFat_t));
    b23a:	movs	r2, #32
    b23c:	movs	r1, #0
    b23e:	bl	10d7c <memset>
  memcpy(dir->name, fname->sfn, 11);
    b242:	mov	r3, fp

  // Set base-name and extension lower case bits.
  dir->caseFlags =  (FAT_CASE_LC_BASE | FAT_CASE_LC_EXT) & fname->flags;

  // set timestamps
  if (FsDateTime::callback) {
    b244:	ldr	r2, [pc, #176]	; (b2f8 <FatFile::open(FatFile*, fname_t*, int)+0x390>)
    DBG_FAIL_MACRO;
    goto fail;
  }
  // initialize as empty file
  memset(dir, 0, sizeof(DirFat_t));
  memcpy(dir->name, fname->sfn, 11);
    b246:	ldr.w	r0, [r3, #13]!
    b24a:	ldr	r1, [r3, #4]
    b24c:	str	r0, [r4, #0]
    b24e:	str	r1, [r4, #4]
    b250:	ldrh	r1, [r3, #8]
    b252:	ldrb	r3, [r3, #10]
    b254:	strh	r1, [r4, #8]
    b256:	strb	r3, [r4, #10]

  // Set base-name and extension lower case bits.
  dir->caseFlags =  (FAT_CASE_LC_BASE | FAT_CASE_LC_EXT) & fname->flags;
    b258:	ldrb.w	r3, [fp]

  // set timestamps
  if (FsDateTime::callback) {
    b25c:	ldr	r7, [r2, #0]
  // initialize as empty file
  memset(dir, 0, sizeof(DirFat_t));
  memcpy(dir->name, fname->sfn, 11);

  // Set base-name and extension lower case bits.
  dir->caseFlags =  (FAT_CASE_LC_BASE | FAT_CASE_LC_EXT) & fname->flags;
    b25e:	and.w	r3, r3, #24
    b262:	strb	r3, [r4, #12]

  // set timestamps
  if (FsDateTime::callback) {
    b264:	cbz	r7, b28a <FatFile::open(FatFile*, fname_t*, int)+0x322>
    // call user date/time function
    FsDateTime::callback(&date, &time, &ms10);
    b266:	add.w	r2, sp, #43	; 0x2b
    b26a:	add.w	r1, sp, #46	; 0x2e
    b26e:	add	r0, sp, #44	; 0x2c
    b270:	blx	r7
    dir->createTimeMs = ms10;
    setLe16(dir->createDate, date);
    b272:	ldrh.w	r3, [sp, #44]	; 0x2c
    setLe16(dir->createTime, time);
    b276:	ldrh.w	r2, [sp, #46]	; 0x2e

  // set timestamps
  if (FsDateTime::callback) {
    // call user date/time function
    FsDateTime::callback(&date, &time, &ms10);
    dir->createTimeMs = ms10;
    b27a:	ldrb.w	r1, [sp, #43]	; 0x2b
    b27e:	strh	r3, [r4, #16]
    b280:	strb	r1, [r4, #13]
    b282:	strh	r3, [r4, #18]
    b284:	strh	r3, [r4, #24]
    b286:	strh	r2, [r4, #14]
    b288:	strh	r2, [r4, #22]
    setLe16(dir->accessDate, date);
    setLe16(dir->modifyDate, date);
    setLe16(dir->modifyTime, time);;
  }
  // Force write of entry to device.
  dirFile->m_vol->cacheDirty();
    b28a:	ldr	r2, [r6, #8]
    b28c:	ldrb.w	r3, [r2, #36]	; 0x24
    b290:	orr.w	r3, r3, #1
    b294:	strb.w	r3, [r2, #36]	; 0x24

open:
  // open entry in cache.
  if (!openCachedEntry(dirFile, curIndex, oflag, lfnOrd)) {
    b298:	str.w	r8, [sp]
    b29c:	mov	r2, r5
    b29e:	ldr	r3, [sp, #28]
    b2a0:	mov	r1, r6
    b2a2:	ldr	r0, [sp, #36]	; 0x24
    b2a4:	bl	a170 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)>
    b2a8:	b.n	af7c <FatFile::open(FatFile*, fname_t*, int)+0x14>
      for (uint8_t i = 0; i < 13; i++) {
        uint16_t u = lfnGetChar(ldir, i);
        if (k == len) {
          if (u != 0) {
            // Not found.
            lfnOrd = 0;
    b2aa:	cmp	r0, #0
    b2ac:	ldr.w	r8, [sp, #32]
    b2b0:	it	ne
    b2b2:	movne.w	r8, #0
    b2b6:	b.n	afb8 <FatFile::open(FatFile*, fname_t*, int)+0x50>
          break;
        }
      }
    } else if (isFileOrSubdir(dir)) {
      if (lfnOrd) {
        if (1 == order && lfnChecksum(dir->name) == checksum) {
    b2b8:	ldr	r2, [sp, #12]
    b2ba:	cmp	r2, #1
    b2bc:	bne.w	af7a <FatFile::open(FatFile*, fname_t*, int)+0x12>
    b2c0:	subs	r4, r3, #1
    b2c2:	mov	r2, r1
    b2c4:	adds	r3, #10
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
    b2c6:	lsrs	r0, r2, #1
    b2c8:	ldrb.w	r1, [r4, #1]!
    b2cc:	orr.w	r2, r0, r2, lsl #7
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
    b2d0:	cmp	r4, r3
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
    b2d2:	uxtab	r2, r1, r2
    b2d6:	uxtb	r2, r2
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
    b2d8:	bne.n	b2c6 <FatFile::open(FatFile*, fname_t*, int)+0x35e>
          break;
        }
      }
    } else if (isFileOrSubdir(dir)) {
      if (lfnOrd) {
        if (1 == order && lfnChecksum(dir->name) == checksum) {
    b2da:	ldr	r3, [sp, #24]
    b2dc:	cmp	r3, r2
    b2de:	bne.w	af7a <FatFile::open(FatFile*, fname_t*, int)+0x12>
    }
  }

found:
  // Don't open if create only.
  if (oflag & O_EXCL) {
    b2e2:	ldr	r3, [sp, #28]
    b2e4:	lsls	r1, r3, #20
    b2e6:	bpl.n	b298 <FatFile::open(FatFile*, fname_t*, int)+0x330>
    b2e8:	b.n	af7a <FatFile::open(FatFile*, fname_t*, int)+0x12>
    if (!ldir) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    b2ea:	orr.w	r1, r7, #64	; 0x40
    b2ee:	uxtb	r1, r1
    b2f0:	b.n	b1a4 <FatFile::open(FatFile*, fname_t*, int)+0x23c>
    b2f2:	nop
    b2f4:	.word	0x4ec4ec4f
    b2f8:	.word	0x20005b20

0000b2fc <FatFile::getSFN(char*) [clone .part.2]>:
#include "../common/DebugMacros.h"
#include "../common/FsStructs.h"
#include "FatFile.h"
#include "FatVolume.h"
//------------------------------------------------------------------------------
bool FatFile::getSFN(char* name) {
    b2fc:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b300:	mov	r7, r1
    name[0] = '/';
    name[1] = '\0';
    return true;
  }
  // cache entry
  dir = reinterpret_cast<DirFat_t*>(cacheDirEntry(FatCache::CACHE_FOR_READ));
    b302:	movs	r1, #0
    b304:	bl	98c0 <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    b308:	cbz	r0, b34e <FatFile::getSFN(char*) [clone .part.2]+0x52>
    b30a:	movs	r2, #0
    b30c:	subs	r5, r0, #1
    b30e:	mov.w	ip, #8
      continue;
    }
    if (i == 8) {
      // Position bit for extension.
      lcBit = FAT_CASE_LC_EXT;
      name[j++] = '.';
    b312:	mov.w	r8, #46	; 0x2e
    name[1] = '\0';
    return true;
  }
  // cache entry
  dir = reinterpret_cast<DirFat_t*>(cacheDirEntry(FatCache::CACHE_FOR_READ));
  if (!dir) {
    b316:	mov	r4, r2
    DBG_FAIL_MACRO;
    goto fail;
  }
  // format name
  for (uint8_t i = 0; i < 11; i++) {
    if (dir->name[i] == ' ') {
    b318:	ldrb.w	r3, [r5, #1]!
    b31c:	cmp	r3, #32
    b31e:	beq.n	b342 <FatFile::getSFN(char*) [clone .part.2]+0x46>
      continue;
    }
    if (i == 8) {
    b320:	cmp	r2, #8
    b322:	beq.n	b352 <FatFile::getSFN(char*) [clone .part.2]+0x56>
      // Position bit for extension.
      lcBit = FAT_CASE_LC_EXT;
      name[j++] = '.';
    }
    char c = dir->name[i];
    if ('A' <= c && c <= 'Z' && (lcBit & dir->caseFlags)) {
    b324:	sub.w	r1, r3, #65	; 0x41
      c += 'a' - 'A';
    }
    name[j++] = c;
    b328:	adds	r6, r4, #1
      // Position bit for extension.
      lcBit = FAT_CASE_LC_EXT;
      name[j++] = '.';
    }
    char c = dir->name[i];
    if ('A' <= c && c <= 'Z' && (lcBit & dir->caseFlags)) {
    b32a:	cmp	r1, #25
    b32c:	bhi.n	b33e <FatFile::getSFN(char*) [clone .part.2]+0x42>
    b32e:	ldrb	r1, [r0, #12]
      c += 'a' - 'A';
    b330:	add.w	lr, r3, #32
      // Position bit for extension.
      lcBit = FAT_CASE_LC_EXT;
      name[j++] = '.';
    }
    char c = dir->name[i];
    if ('A' <= c && c <= 'Z' && (lcBit & dir->caseFlags)) {
    b334:	tst.w	ip, r1
      c += 'a' - 'A';
    b338:	it	ne
    b33a:	uxtbne.w	r3, lr
    }
    name[j++] = c;
    b33e:	strb	r3, [r7, r4]
    b340:	uxtb	r4, r6
    b342:	adds	r2, #1
  if (!dir) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // format name
  for (uint8_t i = 0; i < 11; i++) {
    b344:	cmp	r2, #11
    b346:	bne.n	b318 <FatFile::getSFN(char*) [clone .part.2]+0x1c>
    if ('A' <= c && c <= 'Z' && (lcBit & dir->caseFlags)) {
      c += 'a' - 'A';
    }
    name[j++] = c;
  }
  name[j] = 0;
    b348:	movs	r3, #0
  return true;
    b34a:	movs	r0, #1
    if ('A' <= c && c <= 'Z' && (lcBit & dir->caseFlags)) {
      c += 'a' - 'A';
    }
    name[j++] = c;
  }
  name[j] = 0;
    b34c:	strb	r3, [r7, r4]
  return true;

fail:
  return false;
}
    b34e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      continue;
    }
    if (i == 8) {
      // Position bit for extension.
      lcBit = FAT_CASE_LC_EXT;
      name[j++] = '.';
    b352:	adds	r1, r4, #1
    b354:	strb.w	r8, [r7, r4]
    if (dir->name[i] == ' ') {
      continue;
    }
    if (i == 8) {
      // Position bit for extension.
      lcBit = FAT_CASE_LC_EXT;
    b358:	mov.w	ip, #16
    b35c:	ldrb	r3, [r5, #0]
      name[j++] = '.';
    b35e:	uxtb	r4, r1
    b360:	b.n	b324 <FatFile::getSFN(char*) [clone .part.2]+0x28>
    b362:	nop

0000b364 <FatFile::getSFN(char*)>:
#include "../common/DebugMacros.h"
#include "../common/FsStructs.h"
#include "FatFile.h"
#include "FatVolume.h"
//------------------------------------------------------------------------------
bool FatFile::getSFN(char* name) {
    b364:	ldrb	r3, [r0, #0]
    b366:	mov	r2, r1
  uint8_t j = 0;
  uint8_t lcBit = FAT_CASE_LC_BASE;
  DirFat_t *dir;

  if (!isOpen()) {
    b368:	cbz	r3, b380 <FatFile::getSFN(char*)+0x1c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isRoot()) {
    b36a:	tst.w	r3, #96	; 0x60
    b36e:	beq.n	b37c <FatFile::getSFN(char*)+0x18>
    name[0] = '/';
    b370:	movs	r1, #47	; 0x2f
    name[1] = '\0';
    b372:	movs	r3, #0
    return true;
    b374:	movs	r0, #1
  if (!isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isRoot()) {
    name[0] = '/';
    b376:	strb	r1, [r2, #0]
    name[1] = '\0';
    b378:	strb	r3, [r2, #1]
    return true;
    b37a:	bx	lr
    b37c:	b.w	b2fc <FatFile::getSFN(char*) [clone .part.2]>
  }
  name[j] = 0;
  return true;

fail:
  return false;
    b380:	mov	r0, r3
}
    b382:	bx	lr

0000b384 <FsBaseFile::FsBaseFile(FsBaseFile const&)>:
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */
#include "FsLib.h"
//------------------------------------------------------------------------------
FsBaseFile::FsBaseFile(const FsBaseFile& from) {
    b384:	push	{r3, r4, r5, r6, r7, lr}
  m_fFile = nullptr;
    b386:	movs	r5, #0
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */
#include "FsLib.h"
//------------------------------------------------------------------------------
FsBaseFile::FsBaseFile(const FsBaseFile& from) {
    b388:	mov	r6, r0
    b38a:	mov	r7, r1
  m_fFile = nullptr;
    b38c:	str	r5, [r0, #56]	; 0x38
  m_xFile = nullptr;
  if (from.m_fFile) {
    b38e:	ldr	r4, [r1, #56]	; 0x38
 */
#include "FsLib.h"
//------------------------------------------------------------------------------
FsBaseFile::FsBaseFile(const FsBaseFile& from) {
  m_fFile = nullptr;
  m_xFile = nullptr;
    b390:	str	r5, [r0, #60]	; 0x3c
  if (from.m_fFile) {
    b392:	cbz	r4, b3b8 <FsBaseFile::FsBaseFile(FsBaseFile const&)+0x34>
    m_fFile = new (m_fileMem) FatFile;
    b394:	mov	r1, r0
    b396:	movs	r0, #36	; 0x24
    b398:	bl	b600 <operator new(unsigned int, unsigned long*)>
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attributes(FILE_ATTR_CLOSED), m_error(0), m_flags(0) {}
    b39c:	strb	r5, [r0, #0]
    b39e:	strb	r5, [r0, #1]
    *m_fFile = *from.m_fFile;
    b3a0:	mov	r4, r0
    b3a2:	strb	r5, [r0, #2]
//------------------------------------------------------------------------------
FsBaseFile::FsBaseFile(const FsBaseFile& from) {
  m_fFile = nullptr;
  m_xFile = nullptr;
  if (from.m_fFile) {
    m_fFile = new (m_fileMem) FatFile;
    b3a4:	str	r0, [r6, #56]	; 0x38
    *m_fFile = *from.m_fFile;
    b3a6:	ldr	r5, [r7, #56]	; 0x38
    b3a8:	ldmia	r5!, {r0, r1, r2, r3}
    b3aa:	stmia	r4!, {r0, r1, r2, r3}
    b3ac:	ldmia	r5!, {r0, r1, r2, r3}
    b3ae:	stmia	r4!, {r0, r1, r2, r3}
    b3b0:	ldr	r3, [r5, #0]
    b3b2:	str	r3, [r4, #0]
  } else if (from.m_xFile) {
    m_xFile = new (m_fileMem) ExFatFile;
    *m_xFile = *from.m_xFile;
  }
}
    b3b4:	mov	r0, r6
    b3b6:	pop	{r3, r4, r5, r6, r7, pc}
  m_fFile = nullptr;
  m_xFile = nullptr;
  if (from.m_fFile) {
    m_fFile = new (m_fileMem) FatFile;
    *m_fFile = *from.m_fFile;
  } else if (from.m_xFile) {
    b3b8:	ldr	r3, [r1, #60]	; 0x3c
    b3ba:	cmp	r3, #0
    b3bc:	beq.n	b3b4 <FsBaseFile::FsBaseFile(FsBaseFile const&)+0x30>
    m_xFile = new (m_fileMem) ExFatFile;
    b3be:	mov	r1, r0
    b3c0:	movs	r0, #56	; 0x38
    b3c2:	bl	b600 <operator new(unsigned int, unsigned long*)>
    b3c6:	strb.w	r4, [r0, #49]	; 0x31
    b3ca:	strb.w	r4, [r0, #50]	; 0x32
    *m_xFile = *from.m_xFile;
    b3ce:	mov	r2, r0
    b3d0:	strb.w	r4, [r0, #51]	; 0x33
  m_xFile = nullptr;
  if (from.m_fFile) {
    m_fFile = new (m_fileMem) FatFile;
    *m_fFile = *from.m_fFile;
  } else if (from.m_xFile) {
    m_xFile = new (m_fileMem) ExFatFile;
    b3d4:	str	r0, [r6, #60]	; 0x3c
    *m_xFile = *from.m_xFile;
    b3d6:	ldr	r3, [r7, #60]	; 0x3c
    b3d8:	add.w	r1, r3, #48	; 0x30
    b3dc:	ldr	r7, [r3, #0]
    b3de:	adds	r3, #16
    b3e0:	ldr.w	r5, [r3, #-12]
    b3e4:	adds	r2, #16
    b3e6:	ldr.w	r4, [r3, #-8]
    b3ea:	ldr.w	r0, [r3, #-4]
    b3ee:	cmp	r3, r1
    b3f0:	str.w	r7, [r2, #-16]
    b3f4:	str.w	r5, [r2, #-12]
    b3f8:	str.w	r4, [r2, #-8]
    b3fc:	str.w	r0, [r2, #-4]
    b400:	bne.n	b3dc <FsBaseFile::FsBaseFile(FsBaseFile const&)+0x58>
    b402:	ldr	r3, [r3, #0]
    b404:	str	r3, [r2, #0]
    b406:	b.n	b3b4 <FsBaseFile::FsBaseFile(FsBaseFile const&)+0x30>

0000b408 <FsBaseFile::close()>:
    *m_xFile = *from.m_xFile;
  }
  return *this;
}
//------------------------------------------------------------------------------
bool FsBaseFile::close() {
    b408:	push	{r4, lr}
    b40a:	mov	r4, r0
  if (m_fFile && m_fFile->close()) {
    b40c:	ldr	r0, [r0, #56]	; 0x38
    b40e:	cbz	r0, b41c <FsBaseFile::close()+0x14>
    b410:	bl	9974 <FatFile::close()>
    b414:	cbz	r0, b41c <FsBaseFile::close()+0x14>
    m_fFile = nullptr;
    b416:	movs	r3, #0
    b418:	str	r3, [r4, #56]	; 0x38
    return true;
    b41a:	pop	{r4, pc}
  }
  if (m_xFile && m_xFile->close()) {
    b41c:	ldr	r0, [r4, #60]	; 0x3c
    b41e:	cbz	r0, b42c <FsBaseFile::close()+0x24>
    b420:	bl	7e54 <ExFatFile::close()>
    b424:	cbz	r0, b42c <FsBaseFile::close()+0x24>
    m_xFile = nullptr;
    b426:	movs	r3, #0
    b428:	str	r3, [r4, #60]	; 0x3c
    b42a:	pop	{r4, pc}
    return true;
  }
  return false;
    b42c:	movs	r0, #0
}
    b42e:	pop	{r4, pc}

0000b430 <FsBaseFile::open(FsVolume*, char const*, int)>:
  }
  return false;
}
//------------------------------------------------------------------------------
bool FsBaseFile::open(FsVolume* vol, const char* path, oflag_t oflag) {
  if (!vol) {
    b430:	cbz	r1, b4a6 <FsBaseFile::open(FsVolume*, char const*, int)+0x76>
    m_xFile = nullptr;
  }
  return false;
}
//------------------------------------------------------------------------------
bool FsBaseFile::open(FsVolume* vol, const char* path, oflag_t oflag) {
    b432:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b436:	mov	r4, r1
    b438:	mov	r5, r0
    b43a:	mov	r8, r3
    b43c:	mov	r7, r2
  if (!vol) {
    return false;
  }
  close();
    b43e:	bl	b408 <FsBaseFile::close()>
  if (vol->m_fVol) {
    b442:	ldr.w	r6, [r4, #1144]	; 0x478
    b446:	cbz	r6, b474 <FsBaseFile::open(FsVolume*, char const*, int)+0x44>
    b448:	movs	r6, #0
    m_fFile = new (m_fileMem) FatFile;
    b44a:	mov	r1, r5
    b44c:	movs	r0, #36	; 0x24
    b44e:	bl	b600 <operator new(unsigned int, unsigned long*)>
    if (m_fFile && m_fFile->open(vol->m_fVol, path, oflag)) {
    b452:	mov	r3, r8
    b454:	strb	r6, [r0, #0]
    b456:	mov	r2, r7
    b458:	strb	r6, [r0, #1]
    b45a:	strb	r6, [r0, #2]
  if (!vol) {
    return false;
  }
  close();
  if (vol->m_fVol) {
    m_fFile = new (m_fileMem) FatFile;
    b45c:	str	r0, [r5, #56]	; 0x38
    if (m_fFile && m_fFile->open(vol->m_fVol, path, oflag)) {
    b45e:	ldr.w	r1, [r4, #1144]	; 0x478
    b462:	bl	9c80 <FatFile::open(FatVolume*, char const*, int)>
    b466:	cbz	r0, b46e <FsBaseFile::open(FsVolume*, char const*, int)+0x3e>
      return true;
    b468:	movs	r0, #1
    b46a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    }
    m_fFile = nullptr;
    b46e:	str	r0, [r5, #56]	; 0x38
    return false;
    b470:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  } else if (vol->m_xVol) {
    b474:	ldr.w	r3, [r4, #1148]	; 0x47c
    b478:	cbz	r3, b4aa <FsBaseFile::open(FsVolume*, char const*, int)+0x7a>
    m_xFile = new (m_fileMem) ExFatFile;
    b47a:	mov	r1, r5
    b47c:	movs	r0, #56	; 0x38
    b47e:	bl	b600 <operator new(unsigned int, unsigned long*)>
    if (m_xFile && m_xFile->open(vol->m_xVol, path, oflag)) {
    b482:	mov	r3, r8
    b484:	strb.w	r6, [r0, #49]	; 0x31
    b488:	mov	r2, r7
    b48a:	strb.w	r6, [r0, #50]	; 0x32
    b48e:	strb.w	r6, [r0, #51]	; 0x33
      return true;
    }
    m_fFile = nullptr;
    return false;
  } else if (vol->m_xVol) {
    m_xFile = new (m_fileMem) ExFatFile;
    b492:	str	r0, [r5, #60]	; 0x3c
    if (m_xFile && m_xFile->open(vol->m_xVol, path, oflag)) {
    b494:	ldr.w	r1, [r4, #1148]	; 0x47c
    b498:	bl	87ec <ExFatFile::open(ExFatVolume*, char const*, int)>
    b49c:	cmp	r0, #0
    b49e:	bne.n	b468 <FsBaseFile::open(FsVolume*, char const*, int)+0x38>
      return true;
    }
    m_xFile = nullptr;
    b4a0:	str	r0, [r5, #60]	; 0x3c
  }
  return false;
}
    b4a2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return false;
}
//------------------------------------------------------------------------------
bool FsBaseFile::open(FsVolume* vol, const char* path, oflag_t oflag) {
  if (!vol) {
    return false;
    b4a6:	movs	r0, #0
      return true;
    }
    m_xFile = nullptr;
  }
  return false;
}
    b4a8:	bx	lr
  return false;
}
//------------------------------------------------------------------------------
bool FsBaseFile::open(FsVolume* vol, const char* path, oflag_t oflag) {
  if (!vol) {
    return false;
    b4aa:	movs	r0, #0
    b4ac:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000b4b0 <FsBaseFile::openNext(FsBaseFile*, int)>:
    m_xFile = nullptr;
  }
  return false;
}
//------------------------------------------------------------------------------
bool FsBaseFile::openNext(FsBaseFile* dir, oflag_t oflag) {
    b4b0:	push	{r3, r4, r5, r6, r7, lr}
    b4b2:	mov	r5, r1
    b4b4:	mov	r7, r2
    b4b6:	mov	r4, r0
  close();
    b4b8:	bl	b408 <FsBaseFile::close()>
  if (dir->m_fFile) {
    b4bc:	ldr	r6, [r5, #56]	; 0x38
    b4be:	cbz	r6, b4e4 <FsBaseFile::openNext(FsBaseFile*, int)+0x34>
    m_fFile = new (m_fileMem) FatFile;
    b4c0:	mov	r1, r4
    b4c2:	movs	r0, #36	; 0x24
    b4c4:	bl	b600 <operator new(unsigned int, unsigned long*)>
    b4c8:	movs	r1, #0
    if (m_fFile->openNext(dir->m_fFile, oflag)) {
    b4ca:	mov	r2, r7
    b4cc:	strb	r1, [r0, #0]
    b4ce:	strb	r1, [r0, #1]
    b4d0:	strb	r1, [r0, #2]
}
//------------------------------------------------------------------------------
bool FsBaseFile::openNext(FsBaseFile* dir, oflag_t oflag) {
  close();
  if (dir->m_fFile) {
    m_fFile = new (m_fileMem) FatFile;
    b4d2:	str	r0, [r4, #56]	; 0x38
    if (m_fFile->openNext(dir->m_fFile, oflag)) {
    b4d4:	ldr	r1, [r5, #56]	; 0x38
    b4d6:	bl	a248 <FatFile::openNext(FatFile*, int)>
    b4da:	cbz	r0, b4e0 <FsBaseFile::openNext(FsBaseFile*, int)+0x30>
      return true;
    b4dc:	movs	r0, #1
    b4de:	pop	{r3, r4, r5, r6, r7, pc}
    }
    m_fFile = nullptr;
    b4e0:	str	r0, [r4, #56]	; 0x38
    b4e2:	pop	{r3, r4, r5, r6, r7, pc}
  } else if (dir->m_xFile) {
    b4e4:	ldr	r0, [r5, #60]	; 0x3c
    b4e6:	cbz	r0, b50c <FsBaseFile::openNext(FsBaseFile*, int)+0x5c>
    m_xFile = new (m_fileMem) ExFatFile;
    b4e8:	mov	r1, r4
    b4ea:	movs	r0, #56	; 0x38
    b4ec:	bl	b600 <operator new(unsigned int, unsigned long*)>
    if (m_xFile->openNext(dir->m_xFile, oflag)) {
    b4f0:	mov	r2, r7
    b4f2:	strb.w	r6, [r0, #49]	; 0x31
    b4f6:	strb.w	r6, [r0, #50]	; 0x32
    b4fa:	strb.w	r6, [r0, #51]	; 0x33
    if (m_fFile->openNext(dir->m_fFile, oflag)) {
      return true;
    }
    m_fFile = nullptr;
  } else if (dir->m_xFile) {
    m_xFile = new (m_fileMem) ExFatFile;
    b4fe:	str	r0, [r4, #60]	; 0x3c
    if (m_xFile->openNext(dir->m_xFile, oflag)) {
    b500:	ldr	r1, [r5, #60]	; 0x3c
    b502:	bl	87fc <ExFatFile::openNext(ExFatFile*, int)>
    b506:	cmp	r0, #0
    b508:	bne.n	b4dc <FsBaseFile::openNext(FsBaseFile*, int)+0x2c>
      return true;
    }
    m_xFile = nullptr;
    b50a:	str	r0, [r4, #60]	; 0x3c
  }
  return false;
}
    b50c:	pop	{r3, r4, r5, r6, r7, pc}
    b50e:	nop

0000b510 <FsVolume::begin(BlockDeviceInterface*)>:
 * DEALINGS IN THE SOFTWARE.
 */
#include "FsLib.h"
FsVolume* FsVolume::m_cwv = nullptr;
//------------------------------------------------------------------------------
bool FsVolume::begin(BlockDevice* blockDev) {
    b510:	push	{r4, r5, r6, lr}
  m_blockDev = blockDev;
  m_fVol = nullptr;
    b512:	movs	r6, #0
 * DEALINGS IN THE SOFTWARE.
 */
#include "FsLib.h"
FsVolume* FsVolume::m_cwv = nullptr;
//------------------------------------------------------------------------------
bool FsVolume::begin(BlockDevice* blockDev) {
    b514:	mov	r5, r0
  m_blockDev = blockDev;
  m_fVol = nullptr;
  m_xVol = new (m_volMem) ExFatVolume;
    b516:	mov.w	r0, #1144	; 0x478
 */
#include "FsLib.h"
FsVolume* FsVolume::m_cwv = nullptr;
//------------------------------------------------------------------------------
bool FsVolume::begin(BlockDevice* blockDev) {
  m_blockDev = blockDev;
    b51a:	str.w	r1, [r5, #1152]	; 0x480
  m_fVol = nullptr;
  m_xVol = new (m_volMem) ExFatVolume;
    b51e:	mov	r1, r5
#include "FsLib.h"
FsVolume* FsVolume::m_cwv = nullptr;
//------------------------------------------------------------------------------
bool FsVolume::begin(BlockDevice* blockDev) {
  m_blockDev = blockDev;
  m_fVol = nullptr;
    b520:	str.w	r6, [r5, #1144]	; 0x478
  m_xVol = new (m_volMem) ExFatVolume;
    b524:	bl	b600 <operator new(unsigned int, unsigned long*)>
    b528:	mov	r4, r0
  static const uint8_t CACHE_FOR_WRITE = CACHE_STATUS_DIRTY;
  /** Reserve cache sector for write - do not read from sector device. */
  static const uint8_t CACHE_RESERVE_FOR_WRITE
    = CACHE_STATUS_DIRTY | CACHE_OPTION_NO_READ;

  FsCache() : m_blockDev(nullptr) {
    b52a:	str	r6, [r0, #4]
    invalidate();
    b52c:	bl	885c <FsCache::invalidate()>
    b530:	add.w	r0, r4, #524	; 0x20c
  static const uint8_t CACHE_FOR_WRITE = CACHE_STATUS_DIRTY;
  /** Reserve cache sector for write - do not read from sector device. */
  static const uint8_t CACHE_RESERVE_FOR_WRITE
    = CACHE_STATUS_DIRTY | CACHE_OPTION_NO_READ;

  FsCache() : m_blockDev(nullptr) {
    b534:	str.w	r6, [r4, #528]	; 0x210
    invalidate();
    b538:	bl	885c <FsCache::invalidate()>
 * \class ExFatPartition
 * \brief Access exFat partitions on raw file devices.
 */
class ExFatPartition {
 public:
  ExFatPartition() : m_fatType(0) {}
    b53c:	strb.w	r6, [r4, #1084]	; 0x43c
    b540:	strb.w	r6, [r4, #1137]	; 0x471
   * \param[in] setCwv Set current working volume if true.
   * \param[in] part partition to initialize.
   * \return true for success or false for failure.
   */
  bool begin(BlockDevice* dev, bool setCwv = true, uint8_t part = 1) {
    if (!init(dev, part)) {
    b544:	mov	r0, r4
    b546:	strb.w	r6, [r4, #1138]	; 0x472
    b54a:	movs	r2, #1
    b54c:	strb.w	r6, [r4, #1139]	; 0x473
    b550:	str.w	r4, [r5, #1148]	; 0x47c
    b554:	ldr.w	r1, [r5, #1152]	; 0x480
    b558:	bl	89ec <ExFatPartition::init(BlockDeviceInterface*, unsigned char)>
    b55c:	cbnz	r0, b59c <FsVolume::begin(BlockDeviceInterface*)+0x8c>
  if (m_xVol && m_xVol->begin(m_blockDev, false)) {
    goto done;
  }
  m_xVol = nullptr;
    b55e:	movs	r6, #0
  m_fVol = new (m_volMem) FatVolume;
    b560:	mov	r1, r5
    b562:	mov.w	r0, #1120	; 0x460
  m_fVol = nullptr;
  m_xVol = new (m_volMem) ExFatVolume;
  if (m_xVol && m_xVol->begin(m_blockDev, false)) {
    goto done;
  }
  m_xVol = nullptr;
    b566:	str.w	r6, [r5, #1148]	; 0x47c
  m_fVol = new (m_volMem) FatVolume;
    b56a:	bl	b600 <operator new(unsigned int, unsigned long*)>
   * \param[in] setCwv Set current working volume if true.
   * \param[in] part partition to initialize.
   * \return true for success or false for failure.
   */
  bool begin(BlockDevice* dev, bool setCwv = true, uint8_t part = 1) {
    if (!init(dev, part)) {
    b56e:	movs	r2, #1
 */
class FatPartition {
 public:
  /** Create an instance of FatPartition
   */
  FatPartition() : m_fatType(0) {}
    b570:	strb	r6, [r0, #7]
    b572:	mov	r4, r0
    b574:	strb.w	r6, [r0, #1084]	; 0x43c
    b578:	strb.w	r6, [r0, #1085]	; 0x43d
    b57c:	strb.w	r6, [r0, #1086]	; 0x43e
    b580:	str.w	r0, [r5, #1144]	; 0x478
    b584:	ldr.w	r1, [r5, #1152]	; 0x480
    b588:	bl	a854 <FatPartition::init(BlockDeviceInterface*, unsigned char)>
    b58c:	cbnz	r0, b5ba <FsVolume::begin(BlockDeviceInterface*)+0xaa>
  if (m_fVol && m_fVol->begin(m_blockDev, false)) {
    goto done;
  }
  m_cwv = nullptr;
    b58e:	movs	r3, #0
    b590:	ldr	r2, [pc, #64]	; (b5d4 <FsVolume::begin(BlockDeviceInterface*)+0xc4>)
  m_fVol = nullptr;
  return false;
    b592:	mov	r0, r3
  m_xVol = nullptr;
  m_fVol = new (m_volMem) FatVolume;
  if (m_fVol && m_fVol->begin(m_blockDev, false)) {
    goto done;
  }
  m_cwv = nullptr;
    b594:	str	r3, [r2, #0]
  m_fVol = nullptr;
    b596:	str.w	r3, [r5, #1144]	; 0x478
  return false;
    b59a:	pop	{r4, r5, r6, pc}
  /**
   * Set volume working directory to root.
   * \return true for success or false for failure.
   */
  bool chdir() {
    m_vwd.close();
    b59c:	add.w	r6, r4, #1088	; 0x440
    b5a0:	mov	r0, r6
    b5a2:	bl	7e54 <ExFatFile::close()>
    return m_vwd.openRoot(this);
    b5a6:	mov	r1, r4
    b5a8:	mov	r0, r6
    b5aa:	bl	7f10 <ExFatFile::openRoot(ExFatVolume*)>
   */
  bool begin(BlockDevice* dev, bool setCwv = true, uint8_t part = 1) {
    if (!init(dev, part)) {
      return false;
    }
    if (!chdir()) {
    b5ae:	cmp	r0, #0
    b5b0:	beq.n	b55e <FsVolume::begin(BlockDeviceInterface*)+0x4e>

 done:
  m_cwv = this;
    b5b2:	ldr	r3, [pc, #32]	; (b5d4 <FsVolume::begin(BlockDeviceInterface*)+0xc4>)
  return true;
    b5b4:	movs	r0, #1
  m_cwv = nullptr;
  m_fVol = nullptr;
  return false;

 done:
  m_cwv = this;
    b5b6:	str	r5, [r3, #0]
  return true;
    b5b8:	pop	{r4, r5, r6, pc}
  /**
   * Set volume working directory to root.
   * \return true for success or false for failure.
   */
  bool chdir() {
    m_vwd.close();
    b5ba:	addw	r6, r4, #1084	; 0x43c
    b5be:	mov	r0, r6
    b5c0:	bl	9974 <FatFile::close()>
    return m_vwd.openRoot(this);
    b5c4:	mov	r1, r4
    b5c6:	mov	r0, r6
    b5c8:	bl	9c90 <FatFile::openRoot(FatVolume*)>
   */
  bool begin(BlockDevice* dev, bool setCwv = true, uint8_t part = 1) {
    if (!init(dev, part)) {
      return false;
    }
    if (!chdir()) {
    b5cc:	cmp	r0, #0
    b5ce:	bne.n	b5b2 <FsVolume::begin(BlockDeviceInterface*)+0xa2>
    b5d0:	b.n	b58e <FsVolume::begin(BlockDeviceInterface*)+0x7e>
    b5d2:	nop
    b5d4:	.word	0x20005b24

0000b5d8 <FsVolume::open(char const*, int)>:
bool FsVolume::ls(print_t* pr, const char* path, uint8_t flags) {
  FsBaseFile dir;
  return dir.open(this, path, O_RDONLY) && dir.ls(pr, flags);
}
//------------------------------------------------------------------------------
FsFile FsVolume::open(const char *path, oflag_t oflag) {
    b5d8:	push	{r3, r4, r5, r6, r7, lr}
class __FlashStringHelper;

class Print
{
  public:
	constexpr Print() : write_error(0) {}
    b5da:	movs	r5, #0
    b5dc:	mov.w	r7, #1000	; 0x3e8
};
/**
 * \class FsFile
 * \brief FsBaseFile file with Arduino Stream.
 */
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    b5e0:	ldr	r6, [pc, #24]	; (b5fc <FsVolume::open(char const*, int)+0x24>)
    b5e2:	mov	r4, r0
    b5e4:	str	r7, [r0, #8]
    b5e6:	strb	r5, [r0, #4]
    b5e8:	strb	r5, [r0, #12]
 * \class FsBaseFile
 * \brief FsBaseFile class.
 */
class FsBaseFile {
 public:
  FsBaseFile() : m_fFile(nullptr), m_xFile(nullptr) {}
    b5ea:	str	r5, [r0, #72]	; 0x48
    b5ec:	str	r5, [r0, #76]	; 0x4c
};
/**
 * \class FsFile
 * \brief FsBaseFile file with Arduino Stream.
 */
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    b5ee:	str.w	r6, [r0], #16
  FsFile tmpFile;
  tmpFile.open(this, path, oflag);
    b5f2:	bl	b430 <FsBaseFile::open(FsVolume*, char const*, int)>
  return tmpFile;
}
    b5f6:	mov	r0, r4
    b5f8:	pop	{r3, r4, r5, r6, r7, pc}
    b5fa:	nop
    b5fc:	.word	0x20000050

0000b600 <operator new(unsigned int, unsigned long*)>:
 */
#include "FsNew.h"
void* operator new(size_t size, newalign_t* ptr) {
  (void)size;
  return ptr;
}
    b600:	mov	r0, r1
    b602:	bx	lr

0000b604 <SdSpiCard::errorCode() const>:
  /**
   * \return code for the last error. See SdCardInfo.h for a list of error codes.
   */
  uint8_t errorCode() const {
    return m_errorCode;
  }
    b604:	ldrb	r0, [r0, #23]
    b606:	bx	lr

0000b608 <SdSpiCard::errorData() const>:
  /** \return error data for last error. */
  uint32_t errorData() const {
    return m_status;
  }
    b608:	ldrb	r0, [r0, #25]
    b60a:	bx	lr

0000b60c <SdSpiCard::readSector(unsigned long, unsigned char*)>:
   *
   * \param[in] sector Logical sector to be read.
   * \param[out] dst Pointer to the location that will receive the data.
   * \return true for success or false for failure.
   */
  bool readSector(uint32_t sector, uint8_t* dst) {
    b60c:	push	{r4}
#if ENABLE_DEDICATED_SPI
    return readSectors(sector, dst, 1);
    b60e:	ldr	r4, [r0, #0]
    b610:	movs	r3, #1
    b612:	ldr	r4, [r4, #12]
    b614:	mov	ip, r4
#else  // ENABLE_DEDICATED_SPI
    return readSingle(sector, dst);
#endif  // ENABLE_DEDICATED_SPI
  }
    b616:	ldr.w	r4, [sp], #4
   * \param[out] dst Pointer to the location that will receive the data.
   * \return true for success or false for failure.
   */
  bool readSector(uint32_t sector, uint8_t* dst) {
#if ENABLE_DEDICATED_SPI
    return readSectors(sector, dst, 1);
    b61a:	bx	ip

0000b61c <SdSpiCard::type() const>:
  /** Return the card type: SD V1, SD V2 or SDHC/SDXC
   * \return 0 - SD V1, 1 - SD V2, or 3 - SDHC/SDXC.
   */
  uint8_t type() const {
    return m_type;
  }
    b61c:	ldrb	r0, [r0, #26]
    b61e:	bx	lr

0000b620 <SdSpiCard::writeSector(unsigned long, unsigned char const*)>:
   *
   * \param[in] sector Logical sector to be written.
   * \param[in] src Pointer to the location of the data to be written.
   * \return true for success or false for failure.
   */
  bool writeSector(uint32_t sector, const uint8_t* src) {
    b620:	push	{r4}
#if ENABLE_DEDICATED_SPI
    return writeSectors(sector, src, 1);
    b622:	ldr	r4, [r0, #0]
    b624:	movs	r3, #1
    b626:	ldr	r4, [r4, #28]
    b628:	mov	ip, r4
#else  // ENABLE_DEDICATED_SPI
    return writeSingle(sector, src);
#endif  // ENABLE_DEDICATED_SPI
  }
    b62a:	ldr.w	r4, [sp], #4
   * \param[in] src Pointer to the location of the data to be written.
   * \return true for success or false for failure.
   */
  bool writeSector(uint32_t sector, const uint8_t* src) {
#if ENABLE_DEDICATED_SPI
    return writeSectors(sector, src, 1);
    b62e:	bx	ip

0000b630 <SdSpiCard::~SdSpiCard()>:
/**
 * \class SdSpiCard
 * \brief Raw access to SD and SDHC flash memory cards via SPI protocol.
 */
#if HAS_SDIO_CLASS
class SdSpiCard : public SdCardInterface {
    b630:	bx	lr
    b632:	nop

0000b634 <SdSpiCard::~SdSpiCard()>:
    b634:	push	{r4, lr}
    b636:	mov	r4, r0
    b638:	movs	r1, #28
    b63a:	bl	f6e0 <operator delete(void*, unsigned int)>
    b63e:	mov	r0, r4
    b640:	pop	{r4, pc}
    b642:	nop

0000b644 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)>:
  m_curState = IDLE_STATE;
#endif  // ENABLE_DEDICATED_SPI
  return true;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeSectors(uint32_t sector, const uint8_t* src, size_t ns) {
    b644:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b648:	mov	r7, r3
  #if ENABLE_DEDICATED_SPI
  if (m_curState != WRITE_STATE || m_curSector != sector) {
    b64a:	ldrb	r3, [r0, #20]
  m_curState = IDLE_STATE;
#endif  // ENABLE_DEDICATED_SPI
  return true;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeSectors(uint32_t sector, const uint8_t* src, size_t ns) {
    b64c:	mov	r4, r0
    b64e:	mov	r6, r1
  #if ENABLE_DEDICATED_SPI
  if (m_curState != WRITE_STATE || m_curSector != sector) {
    b650:	cmp	r3, #2
  m_curState = IDLE_STATE;
#endif  // ENABLE_DEDICATED_SPI
  return true;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeSectors(uint32_t sector, const uint8_t* src, size_t ns) {
    b652:	mov	r5, r2
  #if ENABLE_DEDICATED_SPI
  if (m_curState != WRITE_STATE || m_curSector != sector) {
    b654:	beq.n	b666 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x22>
    if (!syncDevice()) {
    b656:	ldr	r3, [r4, #0]
    b658:	mov	r0, r4
    b65a:	ldr	r3, [r3, #20]
    b65c:	blx	r3
    b65e:	cbnz	r0, b698 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x54>
      return false;
    b660:	movs	r0, #0
    b662:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return true;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeSectors(uint32_t sector, const uint8_t* src, size_t ns) {
  #if ENABLE_DEDICATED_SPI
  if (m_curState != WRITE_STATE || m_curSector != sector) {
    b666:	ldr	r3, [r0, #16]
    b668:	cmp	r3, r1
    b66a:	bne.n	b656 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x12>
      return false;
    }
    m_curSector = sector;
    m_curState = WRITE_STATE;
  }
  for (size_t i = 0; i < ns; i++, src += 512) {
    b66c:	cbz	r7, b688 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x44>
    b66e:	movs	r6, #0
    if (!writeData(src)) {
    b670:	ldr	r3, [r4, #0]
    b672:	mov	r1, r5
    b674:	mov	r0, r4
      return false;
    }
    m_curSector = sector;
    m_curState = WRITE_STATE;
  }
  for (size_t i = 0; i < ns; i++, src += 512) {
    b676:	adds	r6, #1
    if (!writeData(src)) {
    b678:	ldr	r3, [r3, #68]	; 0x44
      return false;
    }
    m_curSector = sector;
    m_curState = WRITE_STATE;
  }
  for (size_t i = 0; i < ns; i++, src += 512) {
    b67a:	add.w	r5, r5, #512	; 0x200
    if (!writeData(src)) {
    b67e:	blx	r3
    b680:	cmp	r0, #0
    b682:	beq.n	b660 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x1c>
      return false;
    }
    m_curSector = sector;
    m_curState = WRITE_STATE;
  }
  for (size_t i = 0; i < ns; i++, src += 512) {
    b684:	cmp	r7, r6
    b686:	bne.n	b670 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x2c>
    if (!writeData(src)) {
      return false;
    }
  }
  m_curSector += ns;
    b688:	ldr	r3, [r4, #16]
  return m_sharedSpi ? syncDevice() : true;
    b68a:	ldrb	r2, [r4, #21]
  for (size_t i = 0; i < ns; i++, src += 512) {
    if (!writeData(src)) {
      return false;
    }
  }
  m_curSector += ns;
    b68c:	add	r7, r3
    b68e:	str	r7, [r4, #16]
  return m_sharedSpi ? syncDevice() : true;
    b690:	cbnz	r2, b6ae <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x6a>
    b692:	movs	r0, #1
    b694:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  #if ENABLE_DEDICATED_SPI
  if (m_curState != WRITE_STATE || m_curSector != sector) {
    if (!syncDevice()) {
      return false;
    }
    if (!writeStart(sector)) {
    b698:	ldr	r3, [r4, #0]
    b69a:	mov	r1, r6
    b69c:	mov	r0, r4
    b69e:	ldr	r3, [r3, #72]	; 0x48
    b6a0:	blx	r3
    b6a2:	cmp	r0, #0
    b6a4:	beq.n	b660 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x1c>
      return false;
    }
    m_curSector = sector;
    m_curState = WRITE_STATE;
    b6a6:	movs	r3, #2
      return false;
    }
    if (!writeStart(sector)) {
      return false;
    }
    m_curSector = sector;
    b6a8:	str	r6, [r4, #16]
    m_curState = WRITE_STATE;
    b6aa:	strb	r3, [r4, #20]
    b6ac:	b.n	b66c <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x28>
    if (!writeData(src)) {
      return false;
    }
  }
  m_curSector += ns;
  return m_sharedSpi ? syncDevice() : true;
    b6ae:	ldr	r3, [r4, #0]
    b6b0:	mov	r0, r4
    b6b2:	ldr	r3, [r3, #20]

 fail:
  spiStop();
  return false;
#endif  // ENABLE_DEDICATED_SPI
}
    b6b4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    if (!writeData(src)) {
      return false;
    }
  }
  m_curSector += ns;
  return m_sharedSpi ? syncDevice() : true;
    b6b8:	bx	r3
    b6ba:	nop

0000b6bc <SdSpiCard::spiStart() [clone .part.6] [clone .constprop.23]>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStart() {
    b6bc:	push	{r4, lr}
    b6be:	mov	r4, r0
  bool waitNotBusy(SdMillis_t timeoutMS);
  bool writeData(uint8_t token, const uint8_t* src);

#if SPI_DRIVER_SELECT < 2
  void spiActivate() {
    m_spiDriver.activate();
    b6c0:	adds	r0, #4
    b6c2:	bl	cdc8 <SdSpiArduinoDriver::activate()>
  uint8_t cardCommand(uint8_t cmd, uint32_t arg);
  bool isTimedOut(SdMillis_t startMS, SdMillis_t timeoutMS);
  bool readData(uint8_t* dst, size_t count);
  bool readRegister(uint8_t cmd, void* buf);
  void spiSelect() {
    sdCsWrite(m_csPin, false);
    b6c6:	movs	r1, #0
    b6c8:	ldrb	r0, [r4, #22]
    b6ca:	bl	cffc <sdCsWrite(unsigned char, bool)>
  if (!m_spiActive) {
    spiActivate();
    spiSelect();
    m_spiActive = true;
    b6ce:	movs	r3, #1
    b6d0:	strb	r3, [r4, #24]
    b6d2:	pop	{r4, pc}

0000b6d4 <SdSpiCard::spiStop() [clone .part.7] [clone .constprop.26]>:
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
    b6d4:	push	{r3, r4, r5, lr}
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver.receive(buf, n);
  }
  void spiSend(uint8_t data) {
    m_spiDriver.send(data);
    b6d6:	adds	r5, r0, #4
    b6d8:	mov	r4, r0
  }
  void type(uint8_t value) {
    m_type = value;
  }
  void spiUnselect() {
    sdCsWrite(m_csPin, true);
    b6da:	movs	r1, #1
    b6dc:	ldrb	r0, [r0, #22]
    b6de:	bl	cffc <sdCsWrite(unsigned char, bool)>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver.receive(buf, n);
  }
  void spiSend(uint8_t data) {
    m_spiDriver.send(data);
    b6e2:	movs	r1, #255	; 0xff
    b6e4:	mov	r0, r5
    b6e6:	bl	cf90 <SdSpiArduinoDriver::send(unsigned char)>
  }
  void spiBegin(SdSpiConfig spiConfig) {
    m_spiDriver.begin(spiConfig);
  }
  void spiDeactivate() {
    m_spiDriver.deactivate();
    b6ea:	mov	r0, r5
    b6ec:	bl	cf00 <SdSpiArduinoDriver::deactivate()>
  if (m_spiActive) {
    spiUnselect();
    spiSend(0XFF);
    spiDeactivate();
    m_spiActive = false;
    b6f0:	movs	r3, #0
    b6f2:	strb	r3, [r4, #24]
    b6f4:	pop	{r3, r4, r5, pc}
    b6f6:	nop

0000b6f8 <SdSpiCard::isBusy()>:
bool SdSpiCard::eraseSingleSectorEnable() {
  csd_t csd;
  return readCSD(&csd) ? csd.v1.erase_blk_en : false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isBusy() {
    b6f8:	push	{r3, r4, r5, r6, r7, lr}
  bool rtn = true;
  bool spiActive = m_spiActive;
    b6fa:	ldrb	r7, [r0, #24]
bool SdSpiCard::eraseSingleSectorEnable() {
  csd_t csd;
  return readCSD(&csd) ? csd.v1.erase_blk_en : false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isBusy() {
    b6fc:	mov	r6, r0
  bool rtn = true;
  bool spiActive = m_spiActive;
  if (!spiActive) {
    b6fe:	cbnz	r7, b704 <SdSpiCard::isBusy()+0xc>
    b700:	bl	b6bc <SdSpiCard::spiStart() [clone .part.6] [clone .constprop.23]>
    b704:	adds	r5, r6, #4
bool SdSpiCard::eraseSingleSectorEnable() {
  csd_t csd;
  return readCSD(&csd) ? csd.v1.erase_blk_en : false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isBusy() {
    b706:	movs	r4, #8
  }
  uint8_t spiReceive() {
    return m_spiDriver.receive();
    b708:	mov	r0, r5
    b70a:	bl	cf58 <SdSpiArduinoDriver::receive()>
  bool spiActive = m_spiActive;
  if (!spiActive) {
    spiStart();
  }
  for (uint8_t i = 0; i < 8; i++) {
    if (0XFF == spiReceive()) {
    b70e:	cmp	r0, #255	; 0xff
    b710:	add.w	r3, r4, #4294967295
    b714:	beq.n	b732 <SdSpiCard::isBusy()+0x3a>
  bool rtn = true;
  bool spiActive = m_spiActive;
  if (!spiActive) {
    spiStart();
  }
  for (uint8_t i = 0; i < 8; i++) {
    b716:	ands.w	r4, r3, #255	; 0xff
    b71a:	bne.n	b708 <SdSpiCard::isBusy()+0x10>
  csd_t csd;
  return readCSD(&csd) ? csd.v1.erase_blk_en : false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isBusy() {
  bool rtn = true;
    b71c:	movs	r4, #1
    if (0XFF == spiReceive()) {
      rtn = false;
      break;
    }
  }
  if (!spiActive) {
    b71e:	cbnz	r7, b724 <SdSpiCard::isBusy()+0x2c>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    b720:	ldrb	r3, [r6, #24]
    b722:	cbnz	r3, b728 <SdSpiCard::isBusy()+0x30>
  }
  if (!spiActive) {
    spiStop();
  }
  return rtn;
}
    b724:	mov	r0, r4
    b726:	pop	{r3, r4, r5, r6, r7, pc}
    b728:	mov	r0, r6
    b72a:	bl	b6d4 <SdSpiCard::spiStop() [clone .part.7] [clone .constprop.26]>
    b72e:	mov	r0, r4
    b730:	pop	{r3, r4, r5, r6, r7, pc}
  if (!spiActive) {
    spiStart();
  }
  for (uint8_t i = 0; i < 8; i++) {
    if (0XFF == spiReceive()) {
      rtn = false;
    b732:	movs	r4, #0
    b734:	b.n	b71e <SdSpiCard::isBusy()+0x26>
    b736:	nop

0000b738 <SdSpiCard::readData(unsigned char*, unsigned int)>:
//------------------------------------------------------------------------------
bool SdSpiCard::readData(uint8_t *dst) {
  return readData(dst, 512);
}
//------------------------------------------------------------------------------
bool SdSpiCard::readData(uint8_t* dst, size_t count) {
    b738:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    b73c:	ldr	r6, [pc, #104]	; (b7a8 <SdSpiCard::readData(unsigned char*, unsigned int)+0x70>)
    b73e:	mov	r4, r0
    b740:	mov	r8, r1
    b742:	mov	r9, r2
    b744:	ldr	r5, [r6, #0]
    b746:	adds	r7, r0, #4

  DBG_BEGIN_TIME(DBG_WAIT_READ);
  // wait for start sector token
  SdMillis_t t0 = SysCall::curTimeMS();
  while ((m_status = spiReceive()) == 0XFF) {
    if (isTimedOut(t0, SD_READ_TIMEOUT)) {
    b748:	uxth	r5, r5
    b74a:	b.n	b758 <SdSpiCard::readData(unsigned char*, unsigned int)+0x20>
    b74c:	ldr	r3, [r6, #0]
    b74e:	uxth	r3, r3
    b750:	subs	r3, r3, r5
    b752:	cmp.w	r3, #300	; 0x12c
    b756:	bgt.n	b77c <SdSpiCard::readData(unsigned char*, unsigned int)+0x44>
    b758:	mov	r0, r7
    b75a:	bl	cf58 <SdSpiArduinoDriver::receive()>
#endif  // USE_SD_CRC

  DBG_BEGIN_TIME(DBG_WAIT_READ);
  // wait for start sector token
  SdMillis_t t0 = SysCall::curTimeMS();
  while ((m_status = spiReceive()) == 0XFF) {
    b75e:	cmp	r0, #255	; 0xff
    b760:	strb	r0, [r4, #25]
    b762:	beq.n	b74c <SdSpiCard::readData(unsigned char*, unsigned int)+0x14>
      error(SD_CARD_ERROR_READ_TIMEOUT);
      goto fail;
    }
  }
  DBG_END_TIME(DBG_WAIT_READ);
  if (m_status != DATA_START_SECTOR) {
    b764:	cmp	r0, #254	; 0xfe
    b766:	beq.n	b782 <SdSpiCard::readData(unsigned char*, unsigned int)+0x4a>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    b768:	movs	r3, #24
    b76a:	strb	r3, [r4, #23]
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    b76c:	ldrb	r0, [r4, #24]
    b76e:	cbz	r0, b778 <SdSpiCard::readData(unsigned char*, unsigned int)+0x40>
    b770:	mov	r0, r4
    b772:	bl	b6d4 <SdSpiCard::spiStop() [clone .part.7] [clone .constprop.26]>
#endif  // USE_SD_CRC
  return true;

fail:
  spiStop();
  return false;
    b776:	movs	r0, #0
}
    b778:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    b77c:	movs	r3, #29
    b77e:	strb	r3, [r4, #23]
    b780:	b.n	b76c <SdSpiCard::readData(unsigned char*, unsigned int)+0x34>
  }
  uint8_t spiReceive() {
    return m_spiDriver.receive();
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver.receive(buf, n);
    b782:	mov	r2, r9
    b784:	mov	r1, r8
    b786:	mov	r0, r7
    b788:	bl	cf70 <SdSpiArduinoDriver::receive(unsigned char*, unsigned int)>
  if (m_status != DATA_START_SECTOR) {
    error(SD_CARD_ERROR_READ_TOKEN);
    goto fail;
  }
  // transfer data
  if ((m_status = spiReceive(dst, count))) {
    b78c:	strb	r0, [r4, #25]
    b78e:	cbz	r0, b796 <SdSpiCard::readData(unsigned char*, unsigned int)+0x5e>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    b790:	movs	r3, #36	; 0x24
    b792:	strb	r3, [r4, #23]
    b794:	b.n	b76c <SdSpiCard::readData(unsigned char*, unsigned int)+0x34>
  }
  void spiDeactivate() {
    m_spiDriver.deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver.receive();
    b796:	mov	r0, r7
    b798:	bl	cf58 <SdSpiArduinoDriver::receive()>
    b79c:	mov	r0, r7
    b79e:	bl	cf58 <SdSpiArduinoDriver::receive()>
#else  // USE_SD_CRC
  // discard crc
  spiReceive();
  spiReceive();
#endif  // USE_SD_CRC
  return true;
    b7a2:	movs	r0, #1
    b7a4:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    b7a8:	.word	0x20006244

0000b7ac <SdSpiCard::waitNotBusy(unsigned short)>:
    m_spiActive = false;
  }
}
//------------------------------------------------------------------------------
// wait for card to go not busy
bool SdSpiCard::waitNotBusy(SdMillis_t timeoutMS) {
    b7ac:	push	{r3, r4, r5, r6, r7, lr}
    b7ae:	ldr	r5, [pc, #40]	; (b7d8 <SdSpiCard::waitNotBusy(unsigned short)+0x2c>)
    b7b0:	mov	r7, r1
    b7b2:	adds	r6, r0, #4
    b7b4:	ldr	r4, [r5, #0]
  }
  return false;
#else  // WDT_YIELD_TIME_MILLIS
  // Check not busy first since yield is not called in isTimedOut.
  while (spiReceive() != 0XFF) {
    if (isTimedOut(t0, timeoutMS)) {
    b7b6:	uxth	r4, r4
    b7b8:	b.n	b7c4 <SdSpiCard::waitNotBusy(unsigned short)+0x18>
    b7ba:	ldr	r3, [r5, #0]
    b7bc:	uxth	r3, r3
    b7be:	subs	r3, r3, r4
    b7c0:	cmp	r3, r7
    b7c2:	bgt.n	b7d2 <SdSpiCard::waitNotBusy(unsigned short)+0x26>
    b7c4:	mov	r0, r6
    b7c6:	bl	cf58 <SdSpiArduinoDriver::receive()>
    }
  }
  return false;
#else  // WDT_YIELD_TIME_MILLIS
  // Check not busy first since yield is not called in isTimedOut.
  while (spiReceive() != 0XFF) {
    b7ca:	cmp	r0, #255	; 0xff
    b7cc:	bne.n	b7ba <SdSpiCard::waitNotBusy(unsigned short)+0xe>
    if (isTimedOut(t0, timeoutMS)) {
      return false;
    }
  }
  return true;
    b7ce:	movs	r0, #1
#endif  // WDT_YIELD_TIME_MILLIS
}
    b7d0:	pop	{r3, r4, r5, r6, r7, pc}
  return false;
#else  // WDT_YIELD_TIME_MILLIS
  // Check not busy first since yield is not called in isTimedOut.
  while (spiReceive() != 0XFF) {
    if (isTimedOut(t0, timeoutMS)) {
      return false;
    b7d2:	movs	r0, #0
    b7d4:	pop	{r3, r4, r5, r6, r7, pc}
    b7d6:	nop
    b7d8:	.word	0x20006244

0000b7dc <SdSpiCard::cardCommand(unsigned char, unsigned long)>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
    b7dc:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  // select card
  if (!m_spiActive) {
    b7e0:	ldrb	r3, [r0, #24]
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
    b7e2:	sub	sp, #8
    b7e4:	mov	r6, r0
    b7e6:	mov	r8, r1
    b7e8:	str	r2, [sp, #4]
  // select card
  if (!m_spiActive) {
    b7ea:	cbnz	r3, b7f0 <SdSpiCard::cardCommand(unsigned char, unsigned long)+0x14>
    b7ec:	bl	b6bc <SdSpiCard::spiStart() [clone .part.6] [clone .constprop.23]>
    spiStart();
  }
  // wait if busy unless CMD0
  if (cmd != CMD0) {
    b7f0:	cmp.w	r8, #0
    b7f4:	bne.n	b850 <SdSpiCard::cardCommand(unsigned char, unsigned long)+0x74>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver.receive(buf, n);
  }
  void spiSend(uint8_t data) {
    m_spiDriver.send(data);
    b7f6:	adds	r5, r6, #4
    b7f8:	orr.w	r1, r8, #64	; 0x40
    b7fc:	add	r7, sp, #4
    b7fe:	add	r4, sp, #8
    b800:	mov	r0, r5
    b802:	bl	cf90 <SdSpiArduinoDriver::send(unsigned char)>
    b806:	ldrb.w	r1, [r4, #-1]!
    b80a:	mov	r0, r5
    b80c:	bl	cf90 <SdSpiArduinoDriver::send(unsigned char)>
  // send command
  spiSend(cmd | 0x40);

  // send argument
  uint8_t *pa = reinterpret_cast<uint8_t *>(&arg);
  for (int8_t i = 3; i >= 0; i--) {
    b810:	cmp	r4, r7
    b812:	bne.n	b806 <SdSpiCard::cardCommand(unsigned char, unsigned long)+0x2a>
    spiSend(pa[i]);
  }

  // send CRC - correct for CMD0 with arg zero or CMD8 with arg 0X1AA
  spiSend(cmd == CMD0 ? 0X95 : 0X87);
    b814:	cmp.w	r8, #0
    b818:	mov	r0, r5
  }
  void spiDeactivate() {
    m_spiDriver.deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver.receive();
    b81a:	mov.w	r4, #0
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver.receive(buf, n);
  }
  void spiSend(uint8_t data) {
    m_spiDriver.send(data);
    b81e:	ite	eq
    b820:	moveq	r1, #149	; 0x95
    b822:	movne	r1, #135	; 0x87
    b824:	bl	cf90 <SdSpiArduinoDriver::send(unsigned char)>
  }
  void spiDeactivate() {
    m_spiDriver.deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver.receive();
    b828:	mov	r0, r5
    b82a:	bl	cf58 <SdSpiArduinoDriver::receive()>
    b82e:	mov	r0, r5
    b830:	bl	cf58 <SdSpiArduinoDriver::receive()>

  // discard first fill byte to avoid MISO pull-up problem.
  spiReceive();

  // there are 1-8 fill bytes before response.  fill bytes should be 0XFF.
  for (uint8_t i = 0; ((m_status = spiReceive()) & 0X80) && i < 10; i++) {
    b834:	strb	r0, [r6, #25]
    b836:	uxtb	r3, r4
    b838:	adds	r4, #1
    b83a:	lsrs	r2, r0, #7
    b83c:	cmp	r3, #9
    b83e:	ite	hi
    b840:	movhi	r3, #0
    b842:	andls.w	r3, r2, #1
    b846:	cmp	r3, #0
    b848:	bne.n	b82e <SdSpiCard::cardCommand(unsigned char, unsigned long)+0x52>
  }
  return m_status;
}
    b84a:	add	sp, #8
    b84c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    spiStart();
  }
  // wait if busy unless CMD0
  if (cmd != CMD0) {
    DBG_BEGIN_TIME(DBG_CMD_BUSY);
    waitNotBusy(SD_CMD_TIMEOUT);
    b850:	mov.w	r1, #300	; 0x12c
    b854:	mov	r0, r6
    b856:	bl	b7ac <SdSpiCard::waitNotBusy(unsigned short)>
    b85a:	b.n	b7f6 <SdSpiCard::cardCommand(unsigned char, unsigned long)+0x1a>

0000b85c <SdSpiCard::begin(SdSpiConfig)>:
#endif  // CRC_CCITT
#endif  // USE_SD_CRC
//==============================================================================
// SdSpiCard member functions
//------------------------------------------------------------------------------
bool SdSpiCard::begin(SdSpiConfig spiConfig) {
    b85c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b860:	sub	sp, #36	; 0x24
  SdMillis_t t0 = SysCall::curTimeMS();
  m_errorCode = SD_CARD_ERROR_NONE;
    b862:	mov.w	sl, #0
#endif  // CRC_CCITT
#endif  // USE_SD_CRC
//==============================================================================
// SdSpiCard member functions
//------------------------------------------------------------------------------
bool SdSpiCard::begin(SdSpiConfig spiConfig) {
    b866:	mov	r6, r0
#if SPI_DRIVER_SELECT < 2
  void spiActivate() {
    m_spiDriver.activate();
  }
  void spiBegin(SdSpiConfig spiConfig) {
    m_spiDriver.begin(spiConfig);
    b868:	adds	r4, r0, #4
    b86a:	add	r7, sp, #4
  SdMillis_t t0 = SysCall::curTimeMS();
  m_errorCode = SD_CARD_ERROR_NONE;
    b86c:	strb.w	sl, [r0, #23]
  m_type = 0;
    b870:	strb.w	sl, [r0, #26]
  }
  void type(uint8_t value) {
    m_type = value;
  }
  void spiUnselect() {
    sdCsWrite(m_csPin, true);
    b874:	movs	r5, #10
    b876:	ldr.w	r9, [pc, #428]	; ba24 <SdSpiCard::begin(SdSpiConfig)+0x1c8>
#endif  // CRC_CCITT
#endif  // USE_SD_CRC
//==============================================================================
// SdSpiCard member functions
//------------------------------------------------------------------------------
bool SdSpiCard::begin(SdSpiConfig spiConfig) {
    b87a:	stmia.w	r7, {r1, r2, r3}
    b87e:	ldrb.w	r0, [sp, #4]
    b882:	ldr	r3, [sp, #8]
  SdMillis_t t0 = SysCall::curTimeMS();
  m_errorCode = SD_CARD_ERROR_NONE;
  m_type = 0;
  m_csPin = spiConfig.csPin;
    b884:	strb	r0, [r6, #22]
    b886:	str	r3, [sp, #0]
    b888:	ldrb.w	r8, [sp, #5]
    b88c:	ldr.w	fp, [r9]
  if (!m_spiDriverPtr) {
    error(SD_CARD_ERROR_INVALID_CARD_CONFIG);
    goto fail;
  }
#endif  // SPI_DRIVER_SELECT
  sdCsInit(m_csPin);
    b890:	bl	cff4 <sdCsInit(unsigned char)>
    b894:	ldrb	r0, [r6, #22]
    b896:	movs	r1, #1
    b898:	bl	cffc <sdCsWrite(unsigned char, bool)>
  /** Save high speed SPISettings after SD initialization.
   *
   * \param[in] maxSck Maximum SCK frequency.
   */
  void setSckSpeed(uint32_t maxSck) {
    m_spiSettings = SPISettings(maxSck, MSBFIRST, SPI_MODE0);
    b89c:	ldr	r1, [pc, #380]	; (ba1c <SdSpiCard::begin(SdSpiConfig)+0x1c0>)
    b89e:	movs	r2, #7
    b8a0:	add	r3, sp, #20
    b8a2:	str	r1, [r6, #8]
    b8a4:	str	r2, [r6, #12]
    b8a6:	ldmia.w	r7, {r0, r1, r2}
    b8aa:	stmia.w	r3, {r0, r1, r2}
#if SPI_DRIVER_SELECT < 2
  void spiActivate() {
    m_spiDriver.activate();
  }
  void spiBegin(SdSpiConfig spiConfig) {
    m_spiDriver.begin(spiConfig);
    b8ae:	mov	r0, r4
    b8b0:	ldmia	r3, {r1, r2, r3}
    b8b2:	bl	cecc <SdSpiArduinoDriver::begin(SdSpiConfig)>
  spiUnselect();
  spiSetSckSpeed(1000UL*SD_MAX_INIT_RATE_KHZ);
  spiBegin(spiConfig);
  uint32_t arg;
#if ENABLE_DEDICATED_SPI
  m_sharedSpi = !(spiConfig.options & DEDICATED_SPI);
    b8b6:	mvn.w	r3, r8
    b8ba:	mov	r0, r6
  m_spiActive = false;
    b8bc:	strb.w	sl, [r6, #24]
  spiUnselect();
  spiSetSckSpeed(1000UL*SD_MAX_INIT_RATE_KHZ);
  spiBegin(spiConfig);
  uint32_t arg;
#if ENABLE_DEDICATED_SPI
  m_sharedSpi = !(spiConfig.options & DEDICATED_SPI);
    b8c0:	ubfx	r3, r3, #7, #1
  m_spiActive = false;
  m_curState = IDLE_STATE;
    b8c4:	strb.w	sl, [r6, #20]
  spiUnselect();
  spiSetSckSpeed(1000UL*SD_MAX_INIT_RATE_KHZ);
  spiBegin(spiConfig);
  uint32_t arg;
#if ENABLE_DEDICATED_SPI
  m_sharedSpi = !(spiConfig.options & DEDICATED_SPI);
    b8c8:	strb	r3, [r6, #21]
    b8ca:	bl	b6bc <SdSpiCard::spiStart() [clone .part.6] [clone .constprop.23]>
  }
  void type(uint8_t value) {
    m_type = value;
  }
  void spiUnselect() {
    sdCsWrite(m_csPin, true);
    b8ce:	ldrb	r0, [r6, #22]
    b8d0:	movs	r1, #1
    b8d2:	bl	cffc <sdCsWrite(unsigned char, bool)>
    b8d6:	subs	r5, #1
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver.receive(buf, n);
  }
  void spiSend(uint8_t data) {
    m_spiDriver.send(data);
    b8d8:	movs	r1, #255	; 0xff
    b8da:	mov	r0, r4
    b8dc:	bl	cf90 <SdSpiArduinoDriver::send(unsigned char)>

  spiStart();

  // must supply min of 74 clock cycles with CS high.
  spiUnselect();
  for (uint8_t i = 0; i < 10; i++) {
    b8e0:	ands.w	r5, r5, #255	; 0xff
    b8e4:	bne.n	b8d6 <SdSpiCard::begin(SdSpiConfig)+0x7a>
  uint8_t cardCommand(uint8_t cmd, uint32_t arg);
  bool isTimedOut(SdMillis_t startMS, SdMillis_t timeoutMS);
  bool readData(uint8_t* dst, size_t count);
  bool readRegister(uint8_t cmd, void* buf);
  void spiSelect() {
    sdCsWrite(m_csPin, false);
    b8e6:	mov	r1, r5
    b8e8:	ldrb	r0, [r6, #22]
    b8ea:	movs	r7, #10
    b8ec:	bl	cffc <sdCsWrite(unsigned char, bool)>
  spiSelect();
  DBG_BEGIN_TIME(DBG_CMD0_TIME);
  // command to go idle in SPI mode
  for (uint8_t i = 1;; i++) {
    DBG_EVENT_COUNT(DBG_CMD0_COUNT);
    if (cardCommand(CMD0, 0) == R1_IDLE_STATE) {
    b8f0:	movs	r2, #0
    b8f2:	mov	r0, r6
    b8f4:	mov	r1, r2
    b8f6:	bl	b7dc <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    b8fa:	cmp	r0, #1
    b8fc:	mov	r5, r0
    b8fe:	beq.n	b936 <SdSpiCard::begin(SdSpiConfig)+0xda>
    b900:	subs	r3, r7, #1
      break;
    }
    if (i == SD_CMD0_RETRY) {
    b902:	ands.w	r7, r3, #255	; 0xff
    b906:	beq.n	b920 <SdSpiCard::begin(SdSpiConfig)+0xc4>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver.receive(buf, n);
  }
  void spiSend(uint8_t data) {
    m_spiDriver.send(data);
    b908:	movs	r1, #253	; 0xfd
    b90a:	mov	r0, r4
    b90c:	mov.w	r5, #520	; 0x208
    b910:	bl	cf90 <SdSpiArduinoDriver::send(unsigned char)>
  }
  void spiDeactivate() {
    m_spiDriver.deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver.receive();
    b914:	mov	r0, r4
    b916:	bl	cf58 <SdSpiArduinoDriver::receive()>
      goto fail;
    }
    // stop multi-block write
    spiSend(STOP_TRAN_TOKEN);
    // finish block transfer
    for (int i = 0; i < 520; i++) {
    b91a:	subs	r5, #1
    b91c:	bne.n	b914 <SdSpiCard::begin(SdSpiConfig)+0xb8>
    b91e:	b.n	b8f0 <SdSpiCard::begin(SdSpiConfig)+0x94>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    b920:	movs	r3, #1
    b922:	strb	r3, [r6, #23]
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    b924:	ldrb	r0, [r6, #24]
    b926:	cbz	r0, b930 <SdSpiCard::begin(SdSpiConfig)+0xd4>
    b928:	mov	r0, r6
    b92a:	bl	b6d4 <SdSpiCard::spiStop() [clone .part.7] [clone .constprop.26]>
  spiSetSckSpeed(spiConfig.maxSck);
  return true;

fail:
  spiStop();
  return false;
    b92e:	movs	r0, #0
}
    b930:	add	sp, #36	; 0x24
    b932:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    goto fail;
  }
#endif  // USE_SD_CRC

  // check SD version
  if (!(cardCommand(CMD8, 0x1AA) & R1_ILLEGAL_COMMAND)) {
    b936:	mov.w	r2, #426	; 0x1aa
    b93a:	movs	r1, #8
    b93c:	mov	r0, r6
    b93e:	bl	b7dc <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    b942:	lsls	r3, r0, #29
    b944:	bmi.n	b966 <SdSpiCard::begin(SdSpiConfig)+0x10a>
  bool readRegister(uint8_t cmd, void* buf);
  void spiSelect() {
    sdCsWrite(m_csPin, false);
  }
  void type(uint8_t value) {
    m_type = value;
    b946:	movs	r3, #2
    b948:	movs	r5, #4
    b94a:	strb	r3, [r6, #26]
    b94c:	subs	r5, #1
  }
  void spiDeactivate() {
    m_spiDriver.deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver.receive();
    b94e:	mov	r0, r4
    b950:	bl	cf58 <SdSpiArduinoDriver::receive()>
    type(SD_CARD_TYPE_SD2);
    for (uint8_t i = 0; i < 4; i++) {
      m_status = spiReceive();
    b954:	strb	r0, [r6, #25]
#endif  // USE_SD_CRC

  // check SD version
  if (!(cardCommand(CMD8, 0x1AA) & R1_ILLEGAL_COMMAND)) {
    type(SD_CARD_TYPE_SD2);
    for (uint8_t i = 0; i < 4; i++) {
    b956:	ands.w	r5, r5, #255	; 0xff
    b95a:	bne.n	b94c <SdSpiCard::begin(SdSpiConfig)+0xf0>
      m_status = spiReceive();
    }
    if (m_status != 0XAA) {
    b95c:	cmp	r0, #170	; 0xaa
    b95e:	beq.n	b968 <SdSpiCard::begin(SdSpiConfig)+0x10c>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    b960:	movs	r3, #6
    b962:	strb	r3, [r6, #23]
    b964:	b.n	b924 <SdSpiCard::begin(SdSpiConfig)+0xc8>
  bool readRegister(uint8_t cmd, void* buf);
  void spiSelect() {
    sdCsWrite(m_csPin, false);
  }
  void type(uint8_t value) {
    m_type = value;
    b966:	strb	r5, [r6, #26]
    }
  } else {
    type(SD_CARD_TYPE_SD1);
  }
  // initialize card and send host supports SDHC if SD2
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
    b968:	ldr	r3, [r6, #0]
    b96a:	ldr	r7, [pc, #180]	; (ba20 <SdSpiCard::begin(SdSpiConfig)+0x1c4>)
    b96c:	ldr	r3, [r3, #64]	; 0x40
    b96e:	cmp	r3, r7
    b970:	bne.n	b9d2 <SdSpiCard::begin(SdSpiConfig)+0x176>
  bool syncDevice();
  /** Return the card type: SD V1, SD V2 or SDHC/SDXC
   * \return 0 - SD V1, 1 - SD V2, or 3 - SDHC/SDXC.
   */
  uint8_t type() const {
    return m_type;
    b972:	ldrb	r0, [r6, #26]
    b974:	cmp	r0, #2
    b976:	ite	eq
    b978:	moveq.w	r5, #1073741824	; 0x40000000
    b97c:	movne	r5, #0
    b97e:	b.n	b98e <SdSpiCard::begin(SdSpiConfig)+0x132>
    b980:	ldr.w	r3, [r9]
  DBG_BEGIN_TIME(DBG_ACMD41_TIME);
  while (cardAcmd(ACMD41, arg) != R1_READY_STATE) {
    DBG_EVENT_COUNT(DBG_ACMD41_COUNT);
    // check for timeout
    if (isTimedOut(t0, SD_INIT_TIMEOUT)) {
    b984:	uxth	r3, r3
    b986:	subs	r3, r3, r2
    b988:	cmp.w	r3, #2000	; 0x7d0
    b98c:	bgt.n	b9d8 <SdSpiCard::begin(SdSpiConfig)+0x17c>
  void spiStop();

 private:
  // private functions
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
    cardCommand(CMD55, 0);
    b98e:	movs	r2, #0
    b990:	movs	r1, #55	; 0x37
    b992:	mov	r0, r6
    b994:	bl	b7dc <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    return cardCommand(cmd, arg);
    b998:	mov	r2, r5
    b99a:	movs	r1, #41	; 0x29
    b99c:	mov	r0, r6
    b99e:	bl	b7dc <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    b9a2:	uxth.w	r2, fp
    type(SD_CARD_TYPE_SD1);
  }
  // initialize card and send host supports SDHC if SD2
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
  DBG_BEGIN_TIME(DBG_ACMD41_TIME);
  while (cardAcmd(ACMD41, arg) != R1_READY_STATE) {
    b9a6:	cmp	r0, #0
    b9a8:	bne.n	b980 <SdSpiCard::begin(SdSpiConfig)+0x124>
    }
  }
  DBG_END_TIME(DBG_ACMD41_TIME);

  // if SD2 read OCR register to check for SDHC card
  if (type() == SD_CARD_TYPE_SD2) {
    b9aa:	ldr	r3, [r6, #0]
    b9ac:	ldr	r3, [r3, #64]	; 0x40
    b9ae:	cmp	r3, r7
    b9b0:	bne.n	b9de <SdSpiCard::begin(SdSpiConfig)+0x182>
  bool syncDevice();
  /** Return the card type: SD V1, SD V2 or SDHC/SDXC
   * \return 0 - SD V1, 1 - SD V2, or 3 - SDHC/SDXC.
   */
  uint8_t type() const {
    return m_type;
    b9b2:	ldrb	r0, [r6, #26]
    b9b4:	cmp	r0, #2
    b9b6:	beq.n	b9e4 <SdSpiCard::begin(SdSpiConfig)+0x188>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    b9b8:	ldrb	r3, [r6, #24]
    b9ba:	cbz	r3, b9c2 <SdSpiCard::begin(SdSpiConfig)+0x166>
    b9bc:	mov	r0, r6
    b9be:	bl	b6d4 <SdSpiCard::spiStop() [clone .part.7] [clone .constprop.26]>
    b9c2:	movs	r3, #7
    b9c4:	ldr	r2, [sp, #0]
      spiReceive();
    }
  }
  spiStop();
  spiSetSckSpeed(spiConfig.maxSck);
  return true;
    b9c6:	movs	r0, #1
    b9c8:	str	r2, [r6, #8]
    b9ca:	str	r3, [r6, #12]

fail:
  spiStop();
  return false;
}
    b9cc:	add	sp, #36	; 0x24
    b9ce:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    }
  } else {
    type(SD_CARD_TYPE_SD1);
  }
  // initialize card and send host supports SDHC if SD2
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
    b9d2:	mov	r0, r6
    b9d4:	blx	r3
    b9d6:	b.n	b974 <SdSpiCard::begin(SdSpiConfig)+0x118>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    b9d8:	movs	r3, #23
    b9da:	strb	r3, [r6, #23]
    b9dc:	b.n	b924 <SdSpiCard::begin(SdSpiConfig)+0xc8>
    }
  }
  DBG_END_TIME(DBG_ACMD41_TIME);

  // if SD2 read OCR register to check for SDHC card
  if (type() == SD_CARD_TYPE_SD2) {
    b9de:	mov	r0, r6
    b9e0:	blx	r3
    b9e2:	b.n	b9b4 <SdSpiCard::begin(SdSpiConfig)+0x158>
    if (cardCommand(CMD58, 0)) {
    b9e4:	movs	r2, #0
    b9e6:	movs	r1, #58	; 0x3a
    b9e8:	mov	r0, r6
    b9ea:	bl	b7dc <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    b9ee:	cbz	r0, b9f6 <SdSpiCard::begin(SdSpiConfig)+0x19a>
    b9f0:	movs	r3, #18
    b9f2:	strb	r3, [r6, #23]
    b9f4:	b.n	b924 <SdSpiCard::begin(SdSpiConfig)+0xc8>
  }
  void spiDeactivate() {
    m_spiDriver.deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver.receive();
    b9f6:	mov	r0, r4
    b9f8:	bl	cf58 <SdSpiArduinoDriver::receive()>
      error(SD_CARD_ERROR_CMD58);
      goto fail;
    }
    if ((spiReceive() & 0XC0) == 0XC0) {
    b9fc:	and.w	r0, r0, #192	; 0xc0
    ba00:	cmp	r0, #192	; 0xc0
    ba02:	bne.n	ba08 <SdSpiCard::begin(SdSpiConfig)+0x1ac>
  bool readRegister(uint8_t cmd, void* buf);
  void spiSelect() {
    sdCsWrite(m_csPin, false);
  }
  void type(uint8_t value) {
    m_type = value;
    ba04:	movs	r3, #3
    ba06:	strb	r3, [r6, #26]
  }
  void spiDeactivate() {
    m_spiDriver.deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver.receive();
    ba08:	mov	r0, r4
    ba0a:	bl	cf58 <SdSpiArduinoDriver::receive()>
    ba0e:	mov	r0, r4
    ba10:	bl	cf58 <SdSpiArduinoDriver::receive()>
    ba14:	mov	r0, r4
    ba16:	bl	cf58 <SdSpiArduinoDriver::receive()>
    ba1a:	b.n	b9b8 <SdSpiCard::begin(SdSpiConfig)+0x15c>
    ba1c:	.word	0x00061a80
    ba20:	.word	0x0000b61d
    ba24:	.word	0x20006244

0000ba28 <SdSpiCard::readOCR(unsigned long*)>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readOCR(uint32_t* ocr) {
    ba28:	push	{r3, r4, r5, r6, r7, lr}
  uint8_t *p = reinterpret_cast<uint8_t*>(ocr);
  syncDevice();
    ba2a:	ldr	r3, [r0, #0]
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readOCR(uint32_t* ocr) {
    ba2c:	mov	r5, r0
    ba2e:	mov	r6, r1
  uint8_t *p = reinterpret_cast<uint8_t*>(ocr);
  syncDevice();
    ba30:	ldr	r3, [r3, #20]
    ba32:	blx	r3
  if (cardCommand(CMD58, 0)) {
    ba34:	mov	r0, r5
    ba36:	movs	r2, #0
    ba38:	movs	r1, #58	; 0x3a
    ba3a:	bl	b7dc <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    ba3e:	cbnz	r0, ba5c <SdSpiCard::readOCR(unsigned long*)+0x34>
    ba40:	adds	r7, r5, #4
    ba42:	adds	r4, r6, #4
    ba44:	mov	r0, r7
    ba46:	bl	cf58 <SdSpiArduinoDriver::receive()>
    error(SD_CARD_ERROR_CMD58);
    goto fail;
  }
  for (uint8_t i = 0; i < 4; i++) {
    p[3 - i] = spiReceive();
    ba4a:	strb.w	r0, [r4, #-1]!
  syncDevice();
  if (cardCommand(CMD58, 0)) {
    error(SD_CARD_ERROR_CMD58);
    goto fail;
  }
  for (uint8_t i = 0; i < 4; i++) {
    ba4e:	cmp	r6, r4
    ba50:	bne.n	ba44 <SdSpiCard::readOCR(unsigned long*)+0x1c>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    ba52:	ldrb	r4, [r5, #24]
    ba54:	cbnz	r4, ba72 <SdSpiCard::readOCR(unsigned long*)+0x4a>
    ba56:	movs	r4, #1
  return true;

fail:
  spiStop();
  return false;
}
    ba58:	mov	r0, r4
    ba5a:	pop	{r3, r4, r5, r6, r7, pc}
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    ba5c:	movs	r3, #18
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    ba5e:	ldrb	r4, [r5, #24]
    ba60:	strb	r3, [r5, #23]
    ba62:	cmp	r4, #0
    ba64:	beq.n	ba58 <SdSpiCard::readOCR(unsigned long*)+0x30>
  spiStop();
  return true;

fail:
  spiStop();
  return false;
    ba66:	movs	r4, #0
    ba68:	mov	r0, r5
    ba6a:	bl	b6d4 <SdSpiCard::spiStop() [clone .part.7] [clone .constprop.26]>
}
    ba6e:	mov	r0, r4
    ba70:	pop	{r3, r4, r5, r6, r7, pc}
    ba72:	mov	r0, r5
    ba74:	bl	b6d4 <SdSpiCard::spiStop() [clone .part.7] [clone .constprop.26]>
    ba78:	mov	r0, r4
    ba7a:	pop	{r3, r4, r5, r6, r7, pc}

0000ba7c <SdSpiCard::readRegister(unsigned char, void*)>:
//------------------------------------------------------------------------------
/** read CID or CSR register */
bool SdSpiCard::readRegister(uint8_t cmd, void* buf) {
  uint8_t* dst = reinterpret_cast<uint8_t*>(buf);
  syncDevice();
    ba7c:	ldr	r3, [r0, #0]
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
/** read CID or CSR register */
bool SdSpiCard::readRegister(uint8_t cmd, void* buf) {
    ba7e:	push	{r4, r5, r6, lr}
    ba80:	mov	r4, r0
    ba82:	mov	r5, r1
  uint8_t* dst = reinterpret_cast<uint8_t*>(buf);
  syncDevice();
    ba84:	ldr	r3, [r3, #20]
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
/** read CID or CSR register */
bool SdSpiCard::readRegister(uint8_t cmd, void* buf) {
    ba86:	mov	r6, r2
  uint8_t* dst = reinterpret_cast<uint8_t*>(buf);
  syncDevice();
    ba88:	blx	r3
  if (cardCommand(cmd, 0)) {
    ba8a:	mov	r1, r5
    ba8c:	mov	r0, r4
    ba8e:	movs	r2, #0
    ba90:	bl	b7dc <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    ba94:	cbz	r0, baa8 <SdSpiCard::readRegister(unsigned char, void*)+0x2c>
    ba96:	movs	r3, #27
    ba98:	strb	r3, [r4, #23]
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    ba9a:	ldrb	r0, [r4, #24]
    ba9c:	cbz	r0, baa6 <SdSpiCard::readRegister(unsigned char, void*)+0x2a>
    ba9e:	mov	r0, r4
    baa0:	bl	b6d4 <SdSpiCard::spiStop() [clone .part.7] [clone .constprop.26]>
  spiStop();
  return true;

fail:
  spiStop();
  return false;
    baa4:	movs	r0, #0
}
    baa6:	pop	{r4, r5, r6, pc}
  syncDevice();
  if (cardCommand(cmd, 0)) {
    error(SD_CARD_ERROR_READ_REG);
    goto fail;
  }
  if (!readData(dst, 16)) {
    baa8:	mov	r1, r6
    baaa:	movs	r2, #16
    baac:	mov	r0, r4
    baae:	bl	b738 <SdSpiCard::readData(unsigned char*, unsigned int)>
    bab2:	cmp	r0, #0
    bab4:	beq.n	ba9a <SdSpiCard::readRegister(unsigned char, void*)+0x1e>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    bab6:	ldrb	r5, [r4, #24]
    bab8:	cmp	r5, #0
    baba:	beq.n	baa6 <SdSpiCard::readRegister(unsigned char, void*)+0x2a>
    babc:	mov	r0, r4
    babe:	bl	b6d4 <SdSpiCard::spiStop() [clone .part.7] [clone .constprop.26]>
    bac2:	mov	r0, r5
    bac4:	pop	{r4, r5, r6, pc}
    bac6:	nop

0000bac8 <SdSpiCard::readCSD(csd_t*)>:
   * \param[out] csd pointer to area for returned data.
   *
   * \return true for success or false for failure.
   */
  bool readCSD(csd_t* csd) {
    return readRegister(CMD9, csd);
    bac8:	mov	r2, r1
    baca:	movs	r1, #9
    bacc:	b.w	ba7c <SdSpiCard::readRegister(unsigned char, void*)>

0000bad0 <SdSpiCard::readCID(CID*)>:
   * \param[out] cid pointer to area for returned data.
   *
   * \return true for success or false for failure.
   */
  bool readCID(cid_t* cid) {
    return readRegister(CMD10, cid);
    bad0:	mov	r2, r1
    bad2:	movs	r1, #10
    bad4:	b.w	ba7c <SdSpiCard::readRegister(unsigned char, void*)>

0000bad8 <SdSpiCard::sectorCount()>:
  return false;
}
//------------------------------------------------------------------------------
uint32_t SdSpiCard::sectorCount() {
  csd_t csd;
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
    bad8:	ldr	r3, [r0, #0]
    bada:	ldr	r2, [pc, #144]	; (bb6c <SdSpiCard::sectorCount()+0x94>)
    badc:	ldr	r3, [r3, #52]	; 0x34
    bade:	cmp	r3, r2
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
uint32_t SdSpiCard::sectorCount() {
    bae0:	push	{r4, r5, lr}
    bae2:	sub	sp, #20
    bae4:	bne.n	bb46 <SdSpiCard::sectorCount()+0x6e>
   * \param[out] csd pointer to area for returned data.
   *
   * \return true for success or false for failure.
   */
  bool readCSD(csd_t* csd) {
    return readRegister(CMD9, csd);
    bae6:	mov	r2, sp
    bae8:	movs	r1, #9
    baea:	bl	ba7c <SdSpiCard::readRegister(unsigned char, void*)>
  csd_t csd;
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
    baee:	cbz	r0, bb00 <SdSpiCard::sectorCount()+0x28>
  csd1_t v1;
  csd2_t v2;
};
//-----------------------------------------------------------------------------
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    baf0:	ldrb.w	r3, [sp]
    baf4:	ands.w	r3, r3, #192	; 0xc0
    baf8:	beq.n	bb04 <SdSpiCard::sectorCount()+0x2c>
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
  } else if (csd->v2.csd_ver == 1) {
    bafa:	cmp	r3, #64	; 0x40
    bafc:	beq.n	bb4c <SdSpiCard::sectorCount()+0x74>
    bafe:	movs	r0, #0
}
    bb00:	add	sp, #20
    bb02:	pop	{r4, r5, pc}
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    uint8_t read_bl_len = csd->v1.read_bl_len;
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
    bb04:	ldrb.w	r4, [sp, #9]
};
//-----------------------------------------------------------------------------
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    uint8_t read_bl_len = csd->v1.read_bl_len;
    uint16_t c_size = (csd->v1.c_size_high << 10)
    bb08:	ldrb.w	r3, [sp, #6]
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    bb0c:	ldrb.w	r2, [sp, #7]
    bb10:	and.w	r4, r4, #3
  if (csd->v1.csd_ver == 0) {
    uint8_t read_bl_len = csd->v1.read_bl_len;
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    bb14:	ldrb.w	r0, [sp, #10]
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    bb18:	and.w	r3, r3, #3
    bb1c:	lsls	r4, r4, #1
  csd2_t v2;
};
//-----------------------------------------------------------------------------
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    uint8_t read_bl_len = csd->v1.read_bl_len;
    bb1e:	ldrb.w	r1, [sp, #5]
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    bb22:	lsls	r2, r2, #2
//-----------------------------------------------------------------------------
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    uint8_t read_bl_len = csd->v1.read_bl_len;
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    bb24:	ldrb.w	r5, [sp, #8]
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    bb28:	orr.w	r0, r4, r0, lsr #7
    bb2c:	and.w	r1, r1, #15
    bb30:	orr.w	r3, r2, r3, lsl #10
    bb34:	add	r0, r1
    bb36:	orr.w	r3, r3, r5, lsr #6
    bb3a:	subs	r0, #7
    bb3c:	adds	r3, #1
    bb3e:	lsl.w	r0, r3, r0
    bb42:	add	sp, #20
    bb44:	pop	{r4, r5, pc}
  return false;
}
//------------------------------------------------------------------------------
uint32_t SdSpiCard::sectorCount() {
  csd_t csd;
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
    bb46:	mov	r1, sp
    bb48:	blx	r3
    bb4a:	b.n	baee <SdSpiCard::sectorCount()+0x16>
  } else if (csd->v2.csd_ver == 1) {
    return (((uint32_t)csd->v2.c_size_high << 16) +
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    bb4c:	ldrb.w	r3, [sp, #9]
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
  } else if (csd->v2.csd_ver == 1) {
    return (((uint32_t)csd->v2.c_size_high << 16) +
    bb50:	ldrb.w	r1, [sp, #7]
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    bb54:	adds	r2, r3, #1
    bb56:	ldrb.w	r0, [sp, #8]
    bb5a:	and.w	r3, r1, #63	; 0x3f
    bb5e:	add.w	r3, r2, r3, lsl #16
    bb62:	add.w	r0, r3, r0, lsl #8
    bb66:	lsls	r0, r0, #10
}
    bb68:	add	sp, #20
    bb6a:	pop	{r4, r5, pc}
    bb6c:	.word	0x0000bac9

0000bb70 <SdSpiCard::readStart(unsigned long)>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t sector) {
  if (type() != SD_CARD_TYPE_SDHC) {
    bb70:	ldr	r3, [r0, #0]
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t sector) {
    bb72:	mov	r2, r1
    bb74:	push	{r4, r5, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
    bb76:	ldr	r3, [r3, #64]	; 0x40
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t sector) {
    bb78:	sub	sp, #12
    bb7a:	ldr	r5, [pc, #64]	; (bbbc <SdSpiCard::readStart(unsigned long)+0x4c>)
    bb7c:	mov	r4, r0
    bb7e:	cmp	r3, r5
    bb80:	bne.n	bbb4 <SdSpiCard::readStart(unsigned long)+0x44>
  bool syncDevice();
  /** Return the card type: SD V1, SD V2 or SDHC/SDXC
   * \return 0 - SD V1, 1 - SD V2, or 3 - SDHC/SDXC.
   */
  uint8_t type() const {
    return m_type;
    bb82:	ldrb	r0, [r0, #26]
  if (type() != SD_CARD_TYPE_SDHC) {
    bb84:	cmp	r0, #3
    sector <<= 9;
  }
  if (cardCommand(CMD18, sector)) {
    bb86:	mov.w	r1, #18
    bb8a:	mov	r0, r4
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t sector) {
  if (type() != SD_CARD_TYPE_SDHC) {
    sector <<= 9;
    bb8c:	it	ne
    bb8e:	lslne	r2, r2, #9
  }
  if (cardCommand(CMD18, sector)) {
    bb90:	bl	b7dc <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    bb94:	cbz	r0, bbae <SdSpiCard::readStart(unsigned long)+0x3e>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    bb96:	movs	r3, #12
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    bb98:	ldrb	r0, [r4, #24]
    bb9a:	strb	r3, [r4, #23]
    bb9c:	cbnz	r0, bba2 <SdSpiCard::readStart(unsigned long)+0x32>
  return true;

fail:
  spiStop();
  return false;
}
    bb9e:	add	sp, #12
    bba0:	pop	{r4, r5, pc}
    bba2:	mov	r0, r4
    bba4:	bl	b6d4 <SdSpiCard::spiStop() [clone .part.7] [clone .constprop.26]>
    bba8:	movs	r0, #0
    bbaa:	add	sp, #12
    bbac:	pop	{r4, r5, pc}
  if (cardCommand(CMD18, sector)) {
    error(SD_CARD_ERROR_CMD18);
    goto fail;
  }
//  spiStop();
  return true;
    bbae:	movs	r0, #1

fail:
  spiStop();
  return false;
}
    bbb0:	add	sp, #12
    bbb2:	pop	{r4, r5, pc}
    bbb4:	str	r1, [sp, #4]
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t sector) {
  if (type() != SD_CARD_TYPE_SDHC) {
    bbb6:	blx	r3
    bbb8:	ldr	r2, [sp, #4]
    bbba:	b.n	bb84 <SdSpiCard::readStart(unsigned long)+0x14>
    bbbc:	.word	0x0000b61d

0000bbc0 <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readSectors(uint32_t sector, uint8_t* dst, size_t ns) {
    bbc0:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    bbc4:	mov	r7, r3
#if ENABLE_DEDICATED_SPI
  if (m_curState != READ_STATE || sector != m_curSector) {
    bbc6:	ldrb	r3, [r0, #20]
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readSectors(uint32_t sector, uint8_t* dst, size_t ns) {
    bbc8:	mov	r6, r0
    bbca:	mov	r5, r1
#if ENABLE_DEDICATED_SPI
  if (m_curState != READ_STATE || sector != m_curSector) {
    bbcc:	cmp	r3, #1
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readSectors(uint32_t sector, uint8_t* dst, size_t ns) {
    bbce:	mov	r4, r2
#if ENABLE_DEDICATED_SPI
  if (m_curState != READ_STATE || sector != m_curSector) {
    bbd0:	beq.n	bbe2 <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x22>
    if (!syncDevice()) {
    bbd2:	ldr	r3, [r6, #0]
    bbd4:	mov	r0, r6
    bbd6:	ldr	r3, [r3, #20]
    bbd8:	blx	r3
    bbda:	cbnz	r0, bc14 <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x54>
      return false;
    bbdc:	movs	r0, #0
    bbde:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readSectors(uint32_t sector, uint8_t* dst, size_t ns) {
#if ENABLE_DEDICATED_SPI
  if (m_curState != READ_STATE || sector != m_curSector) {
    bbe2:	ldr	r3, [r0, #16]
    bbe4:	cmp	r3, r1
    bbe6:	bne.n	bbd2 <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x12>
      return false;
    }
    m_curSector = sector;
    m_curState = READ_STATE;
  }
  for (size_t i = 0; i < ns; i++, dst += 512) {
    bbe8:	cbz	r7, bc04 <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x44>
    bbea:	movs	r5, #0
    if (!readData(dst, 512)) {
    bbec:	mov.w	r2, #512	; 0x200
    bbf0:	mov	r1, r4
    bbf2:	mov	r0, r6
      return false;
    }
    m_curSector = sector;
    m_curState = READ_STATE;
  }
  for (size_t i = 0; i < ns; i++, dst += 512) {
    bbf4:	adds	r5, #1
    bbf6:	add	r4, r2
    if (!readData(dst, 512)) {
    bbf8:	bl	b738 <SdSpiCard::readData(unsigned char*, unsigned int)>
    bbfc:	cmp	r0, #0
    bbfe:	beq.n	bbdc <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x1c>
      return false;
    }
    m_curSector = sector;
    m_curState = READ_STATE;
  }
  for (size_t i = 0; i < ns; i++, dst += 512) {
    bc00:	cmp	r7, r5
    bc02:	bne.n	bbec <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x2c>
    if (!readData(dst, 512)) {
      return false;
    }
  }
  m_curSector += ns;
    bc04:	ldr	r3, [r6, #16]
  return m_sharedSpi ? syncDevice() : true;
    bc06:	ldrb	r2, [r6, #21]
  for (size_t i = 0; i < ns; i++, dst += 512) {
    if (!readData(dst, 512)) {
      return false;
    }
  }
  m_curSector += ns;
    bc08:	add	r7, r3
    bc0a:	str	r7, [r6, #16]
  return m_sharedSpi ? syncDevice() : true;
    bc0c:	cbnz	r2, bc28 <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x68>
    bc0e:	movs	r0, #1
    bc10:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
#if ENABLE_DEDICATED_SPI
  if (m_curState != READ_STATE || sector != m_curSector) {
    if (!syncDevice()) {
      return false;
    }
    if (!SdSpiCard::readStart(sector)) {
    bc14:	mov	r1, r5
    bc16:	mov	r0, r6
    bc18:	bl	bb70 <SdSpiCard::readStart(unsigned long)>
    bc1c:	cmp	r0, #0
    bc1e:	beq.n	bbdc <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x1c>
      return false;
    }
    m_curSector = sector;
    m_curState = READ_STATE;
    bc20:	movs	r3, #1
      return false;
    }
    if (!SdSpiCard::readStart(sector)) {
      return false;
    }
    m_curSector = sector;
    bc22:	str	r5, [r6, #16]
    m_curState = READ_STATE;
    bc24:	strb	r3, [r6, #20]
    bc26:	b.n	bbe8 <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x28>
    if (!readData(dst, 512)) {
      return false;
    }
  }
  m_curSector += ns;
  return m_sharedSpi ? syncDevice() : true;
    bc28:	ldr	r3, [r6, #0]
    bc2a:	mov	r0, r6
    bc2c:	ldr	r3, [r3, #20]
      return false;
    }
  }
  return readStop();
#endif  // ENABLE_DEDICATED_SPI
}
    bc2e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    if (!readData(dst, 512)) {
      return false;
    }
  }
  m_curSector += ns;
  return m_sharedSpi ? syncDevice() : true;
    bc32:	bx	r3

0000bc34 <SdSpiCard::readStop()>:
  csd_t csd;
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
}

//------------------------------------------------------------------------------
bool SdSpiCard::readStop() {
    bc34:	push	{r3, r4, r5, lr}
  if (cardCommand(CMD12, 0)) {
    bc36:	movs	r2, #0
    bc38:	movs	r1, #12
  csd_t csd;
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
}

//------------------------------------------------------------------------------
bool SdSpiCard::readStop() {
    bc3a:	mov	r5, r0
  if (cardCommand(CMD12, 0)) {
    bc3c:	bl	b7dc <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    bc40:	cbz	r0, bc4e <SdSpiCard::readStop()+0x1a>
    bc42:	movs	r3, #9
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    bc44:	ldrb	r4, [r5, #24]
    bc46:	strb	r3, [r5, #23]
    bc48:	cbnz	r4, bc62 <SdSpiCard::readStop()+0x2e>
  return true;

fail:
  spiStop();
  return false;
}
    bc4a:	mov	r0, r4
    bc4c:	pop	{r3, r4, r5, pc}
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    bc4e:	ldrb	r4, [r5, #24]
    bc50:	cbnz	r4, bc58 <SdSpiCard::readStop()+0x24>
  if (cardCommand(CMD12, 0)) {
    error(SD_CARD_ERROR_CMD12);
    goto fail;
  }
  spiStop();
  return true;
    bc52:	movs	r4, #1

fail:
  spiStop();
  return false;
}
    bc54:	mov	r0, r4
    bc56:	pop	{r3, r4, r5, pc}
    bc58:	mov	r0, r5
    bc5a:	bl	b6d4 <SdSpiCard::spiStop() [clone .part.7] [clone .constprop.26]>
    bc5e:	mov	r0, r4
    bc60:	pop	{r3, r4, r5, pc}
    bc62:	movs	r4, #0
    bc64:	mov	r0, r5
    bc66:	bl	b6d4 <SdSpiCard::spiStop() [clone .part.7] [clone .constprop.26]>
    bc6a:	mov	r0, r4
    bc6c:	pop	{r3, r4, r5, pc}
    bc6e:	nop

0000bc70 <SdSpiCard::writeStart(unsigned long)>:
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t sector) {
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    bc70:	ldr	r3, [r0, #0]
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t sector) {
    bc72:	mov	r2, r1
    bc74:	push	{r4, r5, lr}
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    bc76:	ldr	r3, [r3, #64]	; 0x40
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t sector) {
    bc78:	sub	sp, #12
    bc7a:	ldr	r5, [pc, #64]	; (bcbc <SdSpiCard::writeStart(unsigned long)+0x4c>)
    bc7c:	mov	r4, r0
    bc7e:	cmp	r3, r5
    bc80:	bne.n	bcb4 <SdSpiCard::writeStart(unsigned long)+0x44>
  bool syncDevice();
  /** Return the card type: SD V1, SD V2 or SDHC/SDXC
   * \return 0 - SD V1, 1 - SD V2, or 3 - SDHC/SDXC.
   */
  uint8_t type() const {
    return m_type;
    bc82:	ldrb	r0, [r0, #26]
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    bc84:	cmp	r0, #3
    sector <<= 9;
  }
  if (cardCommand(CMD25, sector)) {
    bc86:	mov.w	r1, #25
    bc8a:	mov	r0, r4
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t sector) {
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    sector <<= 9;
    bc8c:	it	ne
    bc8e:	lslne	r2, r2, #9
  }
  if (cardCommand(CMD25, sector)) {
    bc90:	bl	b7dc <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    bc94:	cbz	r0, bcae <SdSpiCard::writeStart(unsigned long)+0x3e>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    bc96:	movs	r3, #14
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    bc98:	ldrb	r0, [r4, #24]
    bc9a:	strb	r3, [r4, #23]
    bc9c:	cbnz	r0, bca2 <SdSpiCard::writeStart(unsigned long)+0x32>
  return true;

fail:
  spiStop();
  return false;
}
    bc9e:	add	sp, #12
    bca0:	pop	{r4, r5, pc}
    bca2:	mov	r0, r4
    bca4:	bl	b6d4 <SdSpiCard::spiStop() [clone .part.7] [clone .constprop.26]>
    bca8:	movs	r0, #0
    bcaa:	add	sp, #12
    bcac:	pop	{r4, r5, pc}
  }
  if (cardCommand(CMD25, sector)) {
    error(SD_CARD_ERROR_CMD25);
    goto fail;
  }
  return true;
    bcae:	movs	r0, #1

fail:
  spiStop();
  return false;
}
    bcb0:	add	sp, #12
    bcb2:	pop	{r4, r5, pc}
    bcb4:	str	r1, [sp, #4]
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t sector) {
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    bcb6:	blx	r3
    bcb8:	ldr	r2, [sp, #4]
    bcba:	b.n	bc84 <SdSpiCard::writeStart(unsigned long)+0x14>
    bcbc:	.word	0x0000b61d

0000bcc0 <SdSpiCard::erase(unsigned long, unsigned long)>:
//------------------------------------------------------------------------------
void SdSpiCard::dbgPrintStats() {::dbgPrintStats();}
//------------------------------------------------------------------------------
bool SdSpiCard::erase(uint32_t firstSector, uint32_t lastSector) {
  csd_t csd;
  if (!readCSD(&csd)) {
    bcc0:	ldr	r3, [r0, #0]
//------------------------------------------------------------------------------
void SdSpiCard::dbgClearStats() {::dbgClearStats();}
//------------------------------------------------------------------------------
void SdSpiCard::dbgPrintStats() {::dbgPrintStats();}
//------------------------------------------------------------------------------
bool SdSpiCard::erase(uint32_t firstSector, uint32_t lastSector) {
    bcc2:	push	{r4, r5, r6, r7, lr}
  csd_t csd;
  if (!readCSD(&csd)) {
    bcc4:	ldr	r3, [r3, #52]	; 0x34
//------------------------------------------------------------------------------
void SdSpiCard::dbgClearStats() {::dbgClearStats();}
//------------------------------------------------------------------------------
void SdSpiCard::dbgPrintStats() {::dbgPrintStats();}
//------------------------------------------------------------------------------
bool SdSpiCard::erase(uint32_t firstSector, uint32_t lastSector) {
    bcc6:	sub	sp, #20
    bcc8:	ldr	r7, [pc, #164]	; (bd70 <SdSpiCard::erase(unsigned long, unsigned long)+0xb0>)
    bcca:	mov	r4, r0
    bccc:	mov	r5, r1
    bcce:	mov	r6, r2
    bcd0:	cmp	r3, r7
    bcd2:	bne.n	bd2c <SdSpiCard::erase(unsigned long, unsigned long)+0x6c>
   * \param[out] csd pointer to area for returned data.
   *
   * \return true for success or false for failure.
   */
  bool readCSD(csd_t* csd) {
    return readRegister(CMD9, csd);
    bcd4:	mov	r2, sp
    bcd6:	movs	r1, #9
    bcd8:	bl	ba7c <SdSpiCard::readRegister(unsigned char, void*)>
  csd_t csd;
  if (!readCSD(&csd)) {
    bcdc:	cbz	r0, bd00 <SdSpiCard::erase(unsigned long, unsigned long)+0x40>
    goto fail;
  }
  // check for single sector erase
  if (!csd.v1.erase_blk_en) {
    bcde:	ldrb.w	r3, [sp, #10]
    bce2:	lsls	r2, r3, #25
    bce4:	bpl.n	bd10 <SdSpiCard::erase(unsigned long, unsigned long)+0x50>
      // error card can't erase specified area
      error(SD_CARD_ERROR_ERASE_SINGLE_SECTOR);
      goto fail;
    }
  }
  if (m_type != SD_CARD_TYPE_SDHC) {
    bce6:	ldrb	r3, [r4, #26]
    bce8:	cmp	r3, #3
    bcea:	beq.n	bcf0 <SdSpiCard::erase(unsigned long, unsigned long)+0x30>
    firstSector <<= 9;
    bcec:	lsls	r5, r5, #9
    lastSector <<= 9;
    bcee:	lsls	r6, r6, #9
  }
  if (cardCommand(CMD32, firstSector)
    bcf0:	mov	r2, r5
    bcf2:	movs	r1, #32
    bcf4:	mov	r0, r4
    bcf6:	bl	b7dc <SdSpiCard::cardCommand(unsigned char, unsigned long)>
      || cardCommand(CMD33, lastSector)
      || cardCommand(CMD38, 0)) {
    bcfa:	cbz	r0, bd32 <SdSpiCard::erase(unsigned long, unsigned long)+0x72>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    bcfc:	movs	r3, #37	; 0x25
    bcfe:	strb	r3, [r4, #23]
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    bd00:	ldrb	r0, [r4, #24]
    bd02:	cbz	r0, bd0c <SdSpiCard::erase(unsigned long, unsigned long)+0x4c>
    bd04:	mov	r0, r4
    bd06:	bl	b6d4 <SdSpiCard::spiStop() [clone .part.7] [clone .constprop.26]>
  spiStop();
  return true;

fail:
  spiStop();
  return false;
    bd0a:	movs	r0, #0
}
    bd0c:	add	sp, #20
    bd0e:	pop	{r4, r5, r6, r7, pc}
  }
  // check for single sector erase
  if (!csd.v1.erase_blk_en) {
    // erase size mask
    uint8_t m = (csd.v1.sector_size_high << 1) | csd.v1.sector_size_low;
    if ((firstSector & m) != 0 || ((lastSector + 1) & m) != 0) {
    bd10:	and.w	r3, r3, #63	; 0x3f
    goto fail;
  }
  // check for single sector erase
  if (!csd.v1.erase_blk_en) {
    // erase size mask
    uint8_t m = (csd.v1.sector_size_high << 1) | csd.v1.sector_size_low;
    bd14:	ldrb.w	r1, [sp, #11]
    if ((firstSector & m) != 0 || ((lastSector + 1) & m) != 0) {
    bd18:	adds	r2, r6, #1
    bd1a:	lsls	r3, r3, #1
    bd1c:	orrs	r2, r5
    bd1e:	orr.w	r3, r3, r1, lsr #7
    bd22:	tst	r3, r2
    bd24:	beq.n	bce6 <SdSpiCard::erase(unsigned long, unsigned long)+0x26>
    bd26:	movs	r3, #38	; 0x26
    bd28:	strb	r3, [r4, #23]
    bd2a:	b.n	bd00 <SdSpiCard::erase(unsigned long, unsigned long)+0x40>
//------------------------------------------------------------------------------
void SdSpiCard::dbgPrintStats() {::dbgPrintStats();}
//------------------------------------------------------------------------------
bool SdSpiCard::erase(uint32_t firstSector, uint32_t lastSector) {
  csd_t csd;
  if (!readCSD(&csd)) {
    bd2c:	mov	r1, sp
    bd2e:	blx	r3
    bd30:	b.n	bcdc <SdSpiCard::erase(unsigned long, unsigned long)+0x1c>
  if (m_type != SD_CARD_TYPE_SDHC) {
    firstSector <<= 9;
    lastSector <<= 9;
  }
  if (cardCommand(CMD32, firstSector)
      || cardCommand(CMD33, lastSector)
    bd32:	mov	r2, r6
    bd34:	movs	r1, #33	; 0x21
    bd36:	mov	r0, r4
    bd38:	bl	b7dc <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    bd3c:	cmp	r0, #0
    bd3e:	bne.n	bcfc <SdSpiCard::erase(unsigned long, unsigned long)+0x3c>
      || cardCommand(CMD38, 0)) {
    bd40:	mov	r2, r0
    bd42:	movs	r1, #38	; 0x26
    bd44:	mov	r0, r4
    bd46:	bl	b7dc <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    bd4a:	cmp	r0, #0
    bd4c:	bne.n	bcfc <SdSpiCard::erase(unsigned long, unsigned long)+0x3c>
    error(SD_CARD_ERROR_ERASE);
    goto fail;
  }
  DBG_BEGIN_TIME(DBG_ERASE_BUSY);
  if (!waitNotBusy(SD_ERASE_TIMEOUT)) {
    bd4e:	movw	r1, #10000	; 0x2710
    bd52:	mov	r0, r4
    bd54:	bl	b7ac <SdSpiCard::waitNotBusy(unsigned short)>
    bd58:	cbnz	r0, bd60 <SdSpiCard::erase(unsigned long, unsigned long)+0xa0>
    bd5a:	movs	r3, #39	; 0x27
    bd5c:	strb	r3, [r4, #23]
    bd5e:	b.n	bd00 <SdSpiCard::erase(unsigned long, unsigned long)+0x40>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    bd60:	ldrb	r5, [r4, #24]
    bd62:	cmp	r5, #0
    bd64:	beq.n	bd0c <SdSpiCard::erase(unsigned long, unsigned long)+0x4c>
    bd66:	mov	r0, r4
    bd68:	bl	b6d4 <SdSpiCard::spiStop() [clone .part.7] [clone .constprop.26]>
    error(SD_CARD_ERROR_ERASE_TIMEOUT);
    goto fail;
  }
  DBG_END_TIME(DBG_ERASE_BUSY);
  spiStop();
  return true;
    bd6c:	mov	r0, r5
    bd6e:	b.n	bd0c <SdSpiCard::erase(unsigned long, unsigned long)+0x4c>
    bd70:	.word	0x0000bac9

0000bd74 <SdSpiCard::writeStop()>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
    bd74:	push	{r4, r5, r6, lr}
  DBG_BEGIN_TIME(DBG_WRITE_STOP);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
    bd76:	mov.w	r1, #600	; 0x258
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
    bd7a:	mov	r5, r0
  DBG_BEGIN_TIME(DBG_WRITE_STOP);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
    bd7c:	bl	b7ac <SdSpiCard::waitNotBusy(unsigned short)>
    bd80:	mov	r6, r0
    bd82:	cbnz	r0, bd9c <SdSpiCard::writeStop()+0x28>
    bd84:	movs	r3, #30
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    bd86:	ldrb	r4, [r5, #24]
    bd88:	strb	r3, [r5, #23]
    bd8a:	cbnz	r4, bd90 <SdSpiCard::writeStop()+0x1c>

fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  spiStop();
  return false;
}
    bd8c:	mov	r0, r4
    bd8e:	pop	{r4, r5, r6, pc}
  return true;

fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  spiStop();
  return false;
    bd90:	mov	r4, r6
    bd92:	mov	r0, r5
    bd94:	bl	b6d4 <SdSpiCard::spiStop() [clone .part.7] [clone .constprop.26]>
}
    bd98:	mov	r0, r4
    bd9a:	pop	{r4, r5, r6, pc}
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver.receive(buf, n);
  }
  void spiSend(uint8_t data) {
    m_spiDriver.send(data);
    bd9c:	movs	r1, #253	; 0xfd
    bd9e:	adds	r0, r5, #4
    bda0:	bl	cf90 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    bda4:	ldrb	r4, [r5, #24]
    bda6:	cbnz	r4, bdae <SdSpiCard::writeStop()+0x3a>
    bda8:	mov	r4, r6

fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  spiStop();
  return false;
}
    bdaa:	mov	r0, r4
    bdac:	pop	{r4, r5, r6, pc}
    bdae:	mov	r0, r5
    bdb0:	bl	b6d4 <SdSpiCard::spiStop() [clone .part.7] [clone .constprop.26]>
    bdb4:	b.n	bd8c <SdSpiCard::writeStop()+0x18>
    bdb6:	nop

0000bdb8 <SdSpiCard::syncDevice()>:
  }
  return readStop();
#endif  // ENABLE_DEDICATED_SPI
}
//------------------------------------------------------------------------------
bool SdSpiCard::syncDevice() {
    bdb8:	push	{r4, lr}
#if ENABLE_DEDICATED_SPI
  if (m_curState == READ_STATE) {
    bdba:	ldrb	r3, [r0, #20]
  }
  return readStop();
#endif  // ENABLE_DEDICATED_SPI
}
//------------------------------------------------------------------------------
bool SdSpiCard::syncDevice() {
    bdbc:	mov	r4, r0
#if ENABLE_DEDICATED_SPI
  if (m_curState == READ_STATE) {
    bdbe:	cmp	r3, #1
    bdc0:	beq.n	bdce <SdSpiCard::syncDevice()+0x16>
    if (!SdSpiCard::readStop()) {
      return false;
    }
  } else if (m_curState == WRITE_STATE) {
    bdc2:	cmp	r3, #2
    bdc4:	beq.n	bdda <SdSpiCard::syncDevice()+0x22>
    if (!SdSpiCard::writeStop()) {
      return false;
    }
  }
  m_curState = IDLE_STATE;
    bdc6:	movs	r3, #0
#endif  // ENABLE_DEDICATED_SPI
  return true;
    bdc8:	movs	r0, #1
  } else if (m_curState == WRITE_STATE) {
    if (!SdSpiCard::writeStop()) {
      return false;
    }
  }
  m_curState = IDLE_STATE;
    bdca:	strb	r3, [r4, #20]
#endif  // ENABLE_DEDICATED_SPI
  return true;
    bdcc:	pop	{r4, pc}
}
//------------------------------------------------------------------------------
bool SdSpiCard::syncDevice() {
#if ENABLE_DEDICATED_SPI
  if (m_curState == READ_STATE) {
    if (!SdSpiCard::readStop()) {
    bdce:	bl	bc34 <SdSpiCard::readStop()>
    bdd2:	cmp	r0, #0
    bdd4:	bne.n	bdc6 <SdSpiCard::syncDevice()+0xe>
      return false;
    bdd6:	movs	r0, #0
    bdd8:	pop	{r4, pc}
    }
  } else if (m_curState == WRITE_STATE) {
    if (!SdSpiCard::writeStop()) {
    bdda:	bl	bd74 <SdSpiCard::writeStop()>
    bdde:	cmp	r0, #0
    bde0:	bne.n	bdc6 <SdSpiCard::syncDevice()+0xe>
    bde2:	b.n	bdd6 <SdSpiCard::syncDevice()+0x1e>

0000bde4 <SdSpiCard::writeData(unsigned char, unsigned char const*)>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send one sector of data for write sector or write multiple sectors
bool SdSpiCard::writeData(uint8_t token, const uint8_t* src) {
    bde4:	push	{r4, r5, r6, lr}
    bde6:	adds	r4, r0, #4
    bde8:	mov	r6, r2
    bdea:	mov	r5, r0
    bdec:	mov	r0, r4
    bdee:	bl	cf90 <SdSpiArduinoDriver::send(unsigned char)>
  }
  void spiSend(const uint8_t* buf, size_t n) {
    m_spiDriver.send(buf, n);
    bdf2:	mov.w	r2, #512	; 0x200
    bdf6:	mov	r1, r6
    bdf8:	mov	r0, r4
    bdfa:	bl	cfa4 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver.receive(buf, n);
  }
  void spiSend(uint8_t data) {
    m_spiDriver.send(data);
    bdfe:	mov	r0, r4
    be00:	movs	r1, #255	; 0xff
    be02:	bl	cf90 <SdSpiArduinoDriver::send(unsigned char)>
    be06:	mov	r0, r4
    be08:	movs	r1, #255	; 0xff
    be0a:	bl	cf90 <SdSpiArduinoDriver::send(unsigned char)>
  }
  void spiDeactivate() {
    m_spiDriver.deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver.receive();
    be0e:	mov	r0, r4
    be10:	bl	cf58 <SdSpiArduinoDriver::receive()>
  spiSend(src, 512);
  spiSend(crc >> 8);
  spiSend(crc & 0XFF);

  m_status = spiReceive();
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    be14:	and.w	r3, r0, #31
  spiSend(token);
  spiSend(src, 512);
  spiSend(crc >> 8);
  spiSend(crc & 0XFF);

  m_status = spiReceive();
    be18:	strb	r0, [r5, #25]
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    be1a:	cmp	r3, #5
    be1c:	beq.n	be32 <SdSpiCard::writeData(unsigned char, unsigned char const*)+0x4e>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    be1e:	movs	r3, #31
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    be20:	ldrb	r0, [r5, #24]
    be22:	strb	r3, [r5, #23]
    be24:	cbnz	r0, be28 <SdSpiCard::writeData(unsigned char, unsigned char const*)+0x44>
  return true;

fail:
  spiStop();
  return false;
}
    be26:	pop	{r4, r5, r6, pc}
    be28:	mov	r0, r5
    be2a:	bl	b6d4 <SdSpiCard::spiStop() [clone .part.7] [clone .constprop.26]>
  }
  return true;

fail:
  spiStop();
  return false;
    be2e:	movs	r0, #0
    be30:	pop	{r4, r5, r6, pc}
  m_status = spiReceive();
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    error(SD_CARD_ERROR_WRITE_DATA);
    goto fail;
  }
  return true;
    be32:	movs	r0, #1

fail:
  spiStop();
  return false;
}
    be34:	pop	{r4, r5, r6, pc}
    be36:	nop

0000be38 <SdSpiCard::writeData(unsigned char const*)>:
  spiStop();
  return false;
#endif  // ENABLE_DEDICATED_SPI
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeData(const uint8_t* src) {
    be38:	push	{r3, r4, r5, lr}
    be3a:	mov	r5, r1
  // wait for previous write to finish
  DBG_BEGIN_TIME(DBG_WRITE_BUSY);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
    be3c:	mov.w	r1, #600	; 0x258
  spiStop();
  return false;
#endif  // ENABLE_DEDICATED_SPI
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeData(const uint8_t* src) {
    be40:	mov	r4, r0
  // wait for previous write to finish
  DBG_BEGIN_TIME(DBG_WRITE_BUSY);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
    be42:	bl	b7ac <SdSpiCard::waitNotBusy(unsigned short)>
    be46:	cbnz	r0, be5a <SdSpiCard::writeData(unsigned char const*)+0x22>
    be48:	movs	r3, #35	; 0x23
    be4a:	strb	r3, [r4, #23]
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    be4c:	ldrb	r0, [r4, #24]
    be4e:	cbz	r0, be58 <SdSpiCard::writeData(unsigned char const*)+0x20>
    be50:	mov	r0, r4
    be52:	bl	b6d4 <SdSpiCard::spiStop() [clone .part.7] [clone .constprop.26]>
  }
  return true;

fail:
  spiStop();
  return false;
    be56:	movs	r0, #0
}
    be58:	pop	{r3, r4, r5, pc}
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
    error(SD_CARD_ERROR_WRITE_TIMEOUT);
    goto fail;
  }
  DBG_END_TIME(DBG_WRITE_BUSY);
  if (!writeData(WRITE_MULTIPLE_TOKEN, src)) {
    be5a:	mov	r2, r5
    be5c:	movs	r1, #252	; 0xfc
    be5e:	mov	r0, r4
    be60:	bl	bde4 <SdSpiCard::writeData(unsigned char, unsigned char const*)>
    be64:	cmp	r0, #0
    be66:	beq.n	be4c <SdSpiCard::writeData(unsigned char const*)+0x14>
  return true;

fail:
  spiStop();
  return false;
}
    be68:	pop	{r3, r4, r5, pc}
    be6a:	nop

0000be6c <sdIrs()>:
  return false;
}
//==============================================================================
// ISR
static void sdIrs() {
  SDHC_IRQSIGEN = 0;
    be6c:	ldr	r3, [pc, #32]	; (be90 <sdIrs()+0x24>)
    be6e:	movs	r1, #0
  m_irqstat = SDHC_IRQSTAT;
    be70:	ldr	r2, [pc, #32]	; (be94 <sdIrs()+0x28>)
  SDHC_IRQSTAT = m_irqstat;
#if defined(__IMXRT1062__)
  SDHC_MIX_CTRL &= ~(SDHC_MIX_CTRL_AC23EN | SDHC_MIX_CTRL_DMAEN);
#endif
  m_dmaBusy = false;
    be72:	ldr	r0, [pc, #36]	; (be98 <sdIrs()+0x2c>)
#endif  // USE_DEBUG_MODE
  return false;
}
//==============================================================================
// ISR
static void sdIrs() {
    be74:	push	{r4}
  SDHC_IRQSIGEN = 0;
    be76:	str	r1, [r3, #56]	; 0x38
  m_irqstat = SDHC_IRQSTAT;
    be78:	ldr	r4, [r3, #48]	; 0x30
    be7a:	str	r4, [r2, #0]
  SDHC_IRQSTAT = m_irqstat;
    be7c:	ldr	r2, [r2, #0]
#if defined(__IMXRT1062__)
  SDHC_MIX_CTRL &= ~(SDHC_MIX_CTRL_AC23EN | SDHC_MIX_CTRL_DMAEN);
#endif
  m_dmaBusy = false;
}
    be7e:	ldr.w	r4, [sp], #4
//==============================================================================
// ISR
static void sdIrs() {
  SDHC_IRQSIGEN = 0;
  m_irqstat = SDHC_IRQSTAT;
  SDHC_IRQSTAT = m_irqstat;
    be82:	str	r2, [r3, #48]	; 0x30
#if defined(__IMXRT1062__)
  SDHC_MIX_CTRL &= ~(SDHC_MIX_CTRL_AC23EN | SDHC_MIX_CTRL_DMAEN);
    be84:	ldr	r2, [r3, #72]	; 0x48
    be86:	bic.w	r2, r2, #129	; 0x81
    be8a:	str	r2, [r3, #72]	; 0x48
#endif
  m_dmaBusy = false;
    be8c:	strb	r1, [r0, #0]
}
    be8e:	bx	lr
    be90:	.word	0x402c0000
    be94:	.word	0x20005b4c
    be98:	.word	0x20005b64

0000be9c <isBusyCommandComplete()>:
  }
  return !(SDHC_CMDRSP0 & CARD_STATUS_READY_FOR_DATA);
}
//------------------------------------------------------------------------------
static bool isBusyCommandComplete() {
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_CC | SDHC_IRQSTAT_CMD_ERROR));
    be9c:	ldr	r3, [pc, #12]	; (beac <isBusyCommandComplete()+0x10>)
    be9e:	ldr	r0, [pc, #16]	; (beb0 <isBusyCommandComplete()+0x14>)
    bea0:	ldr	r3, [r3, #48]	; 0x30
    bea2:	ands	r0, r3
}
    bea4:	clz	r0, r0
    bea8:	lsrs	r0, r0, #5
    beaa:	bx	lr
    beac:	.word	0x402c0000
    beb0:	.word	0x000f0001

0000beb4 <isBusyCommandInhibit()>:
//------------------------------------------------------------------------------
static bool isBusyCommandInhibit() {
  return SDHC_PRSSTAT & SDHC_PRSSTAT_CIHB;
    beb4:	ldr	r3, [pc, #8]	; (bec0 <isBusyCommandInhibit()+0xc>)
    beb6:	ldr	r0, [r3, #36]	; 0x24
}
    beb8:	and.w	r0, r0, #1
    bebc:	bx	lr
    bebe:	nop
    bec0:	.word	0x402c0000

0000bec4 <isBusyDMA()>:
//------------------------------------------------------------------------------
static bool isBusyDMA() {
  return m_dmaBusy;
    bec4:	ldr	r3, [pc, #4]	; (becc <isBusyDMA()+0x8>)
    bec6:	ldrb	r0, [r3, #0]
}
    bec8:	bx	lr
    beca:	nop
    becc:	.word	0x20005b64

0000bed0 <isBusyFifoRead()>:
//------------------------------------------------------------------------------
static bool isBusyFifoRead() {
  return !(SDHC_PRSSTAT & SDHC_PRSSTAT_BREN);
    bed0:	ldr	r3, [pc, #12]	; (bee0 <isBusyFifoRead()+0x10>)
    bed2:	ldr	r0, [r3, #36]	; 0x24
    bed4:	eor.w	r0, r0, #2048	; 0x800
}
    bed8:	ubfx	r0, r0, #11, #1
    bedc:	bx	lr
    bede:	nop
    bee0:	.word	0x402c0000

0000bee4 <isBusyFifoWrite()>:
//------------------------------------------------------------------------------
static bool isBusyFifoWrite() {
  return !(SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN);
    bee4:	ldr	r3, [pc, #12]	; (bef4 <isBusyFifoWrite()+0x10>)
    bee6:	ldr	r0, [r3, #36]	; 0x24
    bee8:	eor.w	r0, r0, #1024	; 0x400
}
    beec:	ubfx	r0, r0, #10, #1
    bef0:	bx	lr
    bef2:	nop
    bef4:	.word	0x402c0000

0000bef8 <isBusyTransferComplete()>:
//------------------------------------------------------------------------------
static bool isBusyTransferComplete() {
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
    bef8:	ldr	r3, [pc, #12]	; (bf08 <isBusyTransferComplete()+0x10>)
    befa:	ldr	r0, [pc, #16]	; (bf0c <isBusyTransferComplete()+0x14>)
    befc:	ldr	r3, [r3, #48]	; 0x30
    befe:	ands	r0, r3
}
    bf00:	clz	r0, r0
    bf04:	lsrs	r0, r0, #5
    bf06:	bx	lr
    bf08:	.word	0x402c0000
    bf0c:	.word	0x117f0002

0000bf10 <setSdclk(unsigned long)>:
static void setSdclk(uint32_t kHzMax) {
  const uint32_t DVS_LIMIT = 0X10;
  const uint32_t SDCLKFS_LIMIT = 0X100;
  uint32_t dvs = 1;
  uint32_t sdclkfs = 1;
  uint32_t maxSdclk = 1000*kHzMax;
    bf10:	mov.w	r2, #1000	; 0x3e8
  CCM_CSCDR1 |= CCM_CSCDR1_USDHC1_CLK_PODF((1));
}
//------------------------------------------------------------------------------
static uint32_t baseClock() {
  uint32_t divider = ((CCM_CSCDR1 >> 11) & 0x7) + 1;
  return (528000000U * 3)/((CCM_ANALOG_PFD_528 & 0x3F)/6)/divider;
    bf14:	ldr	r3, [pc, #172]	; (bfc4 <setSdclk(unsigned long)+0xb4>)
//  CCM_CSCDR1 |= CCM_CSCDR1_USDHC1_CLK_PODF((7)); / &0x7  WHG
  CCM_CSCDR1 |= CCM_CSCDR1_USDHC1_CLK_PODF((1));
}
//------------------------------------------------------------------------------
static uint32_t baseClock() {
  uint32_t divider = ((CCM_CSCDR1 >> 11) & 0x7) + 1;
    bf16:	ldr	r1, [pc, #176]	; (bfc8 <setSdclk(unsigned long)+0xb8>)
static void setSdclk(uint32_t kHzMax) {
  const uint32_t DVS_LIMIT = 0X10;
  const uint32_t SDCLKFS_LIMIT = 0X100;
  uint32_t dvs = 1;
  uint32_t sdclkfs = 1;
  uint32_t maxSdclk = 1000*kHzMax;
    bf18:	mul.w	r0, r2, r0
//  CCM_CSCDR1 |= CCM_CSCDR1_USDHC1_CLK_PODF((7)); / &0x7  WHG
  CCM_CSCDR1 |= CCM_CSCDR1_USDHC1_CLK_PODF((1));
}
//------------------------------------------------------------------------------
static uint32_t baseClock() {
  uint32_t divider = ((CCM_CSCDR1 >> 11) & 0x7) + 1;
    bf1c:	ldr	r1, [r1, #36]	; 0x24
  return (528000000U * 3)/((CCM_ANALOG_PFD_528 & 0x3F)/6)/divider;
    bf1e:	ldr.w	r2, [r3, #256]	; 0x100
    bf22:	ldr	r3, [pc, #168]	; (bfcc <setSdclk(unsigned long)+0xbc>)
    bf24:	ubfx	r1, r1, #11, #3
    bf28:	and.w	r2, r2, #63	; 0x3f
    bf2c:	adds	r1, #1
    bf2e:	umull	r2, r3, r3, r2
  }
  d[15] = 0;
  return true;
}
//------------------------------------------------------------------------------
static void setSdclk(uint32_t kHzMax) {
    bf32:	push	{r4, r5, r6, r7}
  CCM_CSCDR1 |= CCM_CSCDR1_USDHC1_CLK_PODF((1));
}
//------------------------------------------------------------------------------
static uint32_t baseClock() {
  uint32_t divider = ((CCM_CSCDR1 >> 11) & 0x7) + 1;
  return (528000000U * 3)/((CCM_ANALOG_PFD_528 & 0x3F)/6)/divider;
    bf34:	lsrs	r3, r3, #2
    bf36:	ldr	r5, [pc, #152]	; (bfd0 <setSdclk(unsigned long)+0xc0>)
    bf38:	udiv	r5, r5, r3
    bf3c:	udiv	r5, r5, r1
  uint32_t dvs = 1;
  uint32_t sdclkfs = 1;
  uint32_t maxSdclk = 1000*kHzMax;
  uint32_t base = baseClock();

  while ((base/(sdclkfs*DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    bf40:	cmp.w	r0, r5, lsr #4
    bf44:	bcs.n	bfb8 <setSdclk(unsigned long)+0xa8>
    bf46:	movs	r2, #1
    bf48:	b.n	bf4e <setSdclk(unsigned long)+0x3e>
    bf4a:	cmp	r2, #255	; 0xff
    bf4c:	bhi.n	bf5a <setSdclk(unsigned long)+0x4a>
    sdclkfs <<= 1;
    bf4e:	lsls	r2, r2, #1
  uint32_t dvs = 1;
  uint32_t sdclkfs = 1;
  uint32_t maxSdclk = 1000*kHzMax;
  uint32_t base = baseClock();

  while ((base/(sdclkfs*DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    bf50:	lsls	r3, r2, #4
    bf52:	udiv	r3, r5, r3
    bf56:	cmp	r0, r3
    bf58:	bcc.n	bf4a <setSdclk(unsigned long)+0x3a>
    bf5a:	lsrs	r1, r2, #1
    bf5c:	lsls	r7, r1, #8
    sdclkfs <<= 1;
  }
  while ((base/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    bf5e:	udiv	r3, r5, r2
    bf62:	cmp	r0, r3
    bf64:	bcs.n	bfbe <setSdclk(unsigned long)+0xae>
    bf66:	lsls	r4, r2, #1
    bf68:	movs	r1, #1
    bf6a:	b.n	bf6e <setSdclk(unsigned long)+0x5e>
    bf6c:	mov	r4, r3
    dvs++;
    bf6e:	adds	r6, r1, #1
  uint32_t base = baseClock();

  while ((base/(sdclkfs*DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    sdclkfs <<= 1;
  }
  while ((base/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    bf70:	udiv	r3, r5, r4
    bf74:	cmp	r0, r3
    bf76:	add.w	r3, r2, r4
    bf7a:	bcs.n	bfb4 <setSdclk(unsigned long)+0xa4>
    bf7c:	cmp	r6, #16
    bf7e:	mov	r1, r6
    bf80:	bne.n	bf6c <setSdclk(unsigned long)+0x5c>
    bf82:	movs	r3, #240	; 0xf0
    dvs++;
  }
  m_sdClkKhz = base/(1000*sdclkfs*dvs);
    bf84:	mov.w	r2, #1000	; 0x3e8
  // Disable SDHC clock.
  SDHC_SYSCTL &= ~SDHC_SYSCTL_SDCLKEN;
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)

  // Change dividers.
  uint32_t sysctl = SDHC_SYSCTL & ~(SDHC_SYSCTL_DTOCV_MASK
    bf88:	ldr	r6, [pc, #72]	; (bfd4 <setSdclk(unsigned long)+0xc4>)
    sdclkfs <<= 1;
  }
  while ((base/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    dvs++;
  }
  m_sdClkKhz = base/(1000*sdclkfs*dvs);
    bf8a:	ldr	r1, [pc, #76]	; (bfd8 <setSdclk(unsigned long)+0xc8>)
    bf8c:	mul.w	r4, r2, r4
  // Change dividers.
  uint32_t sysctl = SDHC_SYSCTL & ~(SDHC_SYSCTL_DTOCV_MASK
                    | SDHC_SYSCTL_DVS_MASK | SDHC_SYSCTL_SDCLKFS_MASK);

  SDHC_SYSCTL = sysctl | SDHC_SYSCTL_DTOCV(0x0E) | SDHC_SYSCTL_DVS(dvs)
                | SDHC_SYSCTL_SDCLKFS(sdclkfs);
    bf90:	ldr	r0, [pc, #72]	; (bfdc <setSdclk(unsigned long)+0xcc>)

  // Wait until the SDHC clock is stable.
  while (!(SDHC_PRSSTAT & SDHC_PRSSTAT_SDSTB)) {
    bf92:	mov	r2, r6
    sdclkfs <<= 1;
  }
  while ((base/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    dvs++;
  }
  m_sdClkKhz = base/(1000*sdclkfs*dvs);
    bf94:	udiv	r5, r5, r4
    bf98:	str	r5, [r1, #0]
  // Disable SDHC clock.
  SDHC_SYSCTL &= ~SDHC_SYSCTL_SDCLKEN;
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)

  // Change dividers.
  uint32_t sysctl = SDHC_SYSCTL & ~(SDHC_SYSCTL_DTOCV_MASK
    bf9a:	ldr	r1, [r6, #44]	; 0x2c
                    | SDHC_SYSCTL_DVS_MASK | SDHC_SYSCTL_SDCLKFS_MASK);

  SDHC_SYSCTL = sysctl | SDHC_SYSCTL_DTOCV(0x0E) | SDHC_SYSCTL_DVS(dvs)
                | SDHC_SYSCTL_SDCLKFS(sdclkfs);
    bf9c:	ands	r0, r1
    bf9e:	orr.w	r0, r0, #917504	; 0xe0000
    bfa2:	orr.w	r1, r0, r7
    bfa6:	orrs	r1, r3
    bfa8:	str	r1, [r6, #44]	; 0x2c

  // Wait until the SDHC clock is stable.
  while (!(SDHC_PRSSTAT & SDHC_PRSSTAT_SDSTB)) {
    bfaa:	ldr	r3, [r2, #36]	; 0x24
    bfac:	lsls	r3, r3, #28
    bfae:	bpl.n	bfaa <setSdclk(unsigned long)+0x9a>

#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
  // Enable the SDHC clock.
  SDHC_SYSCTL |= SDHC_SYSCTL_SDCLKEN;
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
}
    bfb0:	pop	{r4, r5, r6, r7}
    bfb2:	bx	lr
    bfb4:	lsls	r3, r1, #4
    bfb6:	b.n	bf84 <setSdclk(unsigned long)+0x74>
  uint32_t dvs = 1;
  uint32_t sdclkfs = 1;
  uint32_t maxSdclk = 1000*kHzMax;
  uint32_t base = baseClock();

  while ((base/(sdclkfs*DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    bfb8:	movs	r7, #0
//------------------------------------------------------------------------------
static void setSdclk(uint32_t kHzMax) {
  const uint32_t DVS_LIMIT = 0X10;
  const uint32_t SDCLKFS_LIMIT = 0X100;
  uint32_t dvs = 1;
  uint32_t sdclkfs = 1;
    bfba:	movs	r2, #1
    bfbc:	b.n	bf5e <setSdclk(unsigned long)+0x4e>
  uint32_t base = baseClock();

  while ((base/(sdclkfs*DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    sdclkfs <<= 1;
  }
  while ((base/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    bfbe:	mov	r4, r2
    bfc0:	movs	r3, #0
    bfc2:	b.n	bf84 <setSdclk(unsigned long)+0x74>
    bfc4:	.word	0x400d8000
    bfc8:	.word	0x400fc000
    bfcc:	.word	0xaaaaaaab
    bfd0:	.word	0x5e69ec00
    bfd4:	.word	0x402c0000
    bfd8:	.word	0x20005b68
    bfdc:	.word	0xfff0000f

0000bfe0 <SdioCard::errorCode() const>:
  }
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdioCard::errorCode() const {
  return m_errorCode;
    bfe0:	ldr	r3, [pc, #4]	; (bfe8 <SdioCard::errorCode() const+0x8>)
}
    bfe2:	ldrb	r0, [r3, #0]
    bfe4:	bx	lr
    bfe6:	nop
    bfe8:	.word	0x20000c1c

0000bfec <SdioCard::errorData() const>:
//------------------------------------------------------------------------------
uint32_t SdioCard::errorData() const {
  return m_irqstat;
    bfec:	ldr	r3, [pc, #4]	; (bff4 <SdioCard::errorData() const+0x8>)
    bfee:	ldr	r0, [r3, #0]
}
    bff0:	bx	lr
    bff2:	nop
    bff4:	.word	0x20005b4c

0000bff8 <SdioCard::readCID(CID*)>:
//------------------------------------------------------------------------------
uint32_t SdioCard::kHzSdClk() {
  return m_sdClkKhz;
}
//------------------------------------------------------------------------------
bool SdioCard::readCID(cid_t* cid) {
    bff8:	push	{r4, r5}
  memcpy(cid, &m_cid, 16);
    bffa:	ldr	r4, [pc, #20]	; (c010 <SdioCard::readCID(CID*)+0x18>)
//------------------------------------------------------------------------------
uint32_t SdioCard::kHzSdClk() {
  return m_sdClkKhz;
}
//------------------------------------------------------------------------------
bool SdioCard::readCID(cid_t* cid) {
    bffc:	mov	r5, r1
  memcpy(cid, &m_cid, 16);
    bffe:	ldmia	r4!, {r0, r1, r2, r3}
    c000:	str	r0, [r5, #0]
  return true;
}
    c002:	movs	r0, #1
uint32_t SdioCard::kHzSdClk() {
  return m_sdClkKhz;
}
//------------------------------------------------------------------------------
bool SdioCard::readCID(cid_t* cid) {
  memcpy(cid, &m_cid, 16);
    c004:	str	r1, [r5, #4]
    c006:	str	r2, [r5, #8]
    c008:	str	r3, [r5, #12]
  return true;
}
    c00a:	pop	{r4, r5}
    c00c:	bx	lr
    c00e:	nop
    c010:	.word	0x20005b2c

0000c014 <SdioCard::readCSD(csd_t*)>:
//------------------------------------------------------------------------------
bool SdioCard::readCSD(csd_t* csd) {
    c014:	push	{r4, r5}
  memcpy(csd, &m_csd, 16);
    c016:	ldr	r4, [pc, #20]	; (c02c <SdioCard::readCSD(csd_t*)+0x18>)
bool SdioCard::readCID(cid_t* cid) {
  memcpy(cid, &m_cid, 16);
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readCSD(csd_t* csd) {
    c018:	mov	r5, r1
  memcpy(csd, &m_csd, 16);
    c01a:	ldmia	r4!, {r0, r1, r2, r3}
    c01c:	str	r0, [r5, #0]
  return true;
}
    c01e:	movs	r0, #1
  memcpy(cid, &m_cid, 16);
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readCSD(csd_t* csd) {
  memcpy(csd, &m_csd, 16);
    c020:	str	r1, [r5, #4]
    c022:	str	r2, [r5, #8]
    c024:	str	r3, [r5, #12]
  return true;
}
    c026:	pop	{r4, r5}
    c028:	bx	lr
    c02a:	nop
    c02c:	.word	0x20005b54

0000c030 <SdioCard::readOCR(unsigned long*)>:
  SDHC_IRQSTAT = m_irqstat;
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
//------------------------------------------------------------------------------
bool SdioCard::readOCR(uint32_t* ocr) {
  *ocr = m_ocr;
    c030:	ldr	r3, [pc, #8]	; (c03c <SdioCard::readOCR(unsigned long*)+0xc>)
  return true;
}
    c032:	movs	r0, #1
  SDHC_IRQSTAT = m_irqstat;
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
//------------------------------------------------------------------------------
bool SdioCard::readOCR(uint32_t* ocr) {
  *ocr = m_ocr;
    c034:	ldr	r3, [r3, #0]
    c036:	str	r3, [r1, #0]
  return true;
}
    c038:	bx	lr
    c03a:	nop
    c03c:	.word	0x20005b44

0000c040 <SdioCard::~SdioCard()>:
//------------------------------------------------------------------------------
/**
 * \class SdioCard
 * \brief Raw SDIO access to SD and SDHC flash memory cards.
 */
class SdioCard : public SdCardInterface {
    c040:	bx	lr
    c042:	nop

0000c044 <waitTimeout(bool (*)())>:
  }
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
//------------------------------------------------------------------------------
// Return true if timeout occurs.
static bool waitTimeout(bool (*fcn)()) {
    c044:	push	{r3, r4, r5, r6, r7, lr}
    c046:	mov	r5, r0
  uint32_t m = micros();
  while (fcn()) {
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    c048:	ldr	r7, [pc, #28]	; (c068 <waitTimeout(bool (*)())+0x24>)
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
//------------------------------------------------------------------------------
// Return true if timeout occurs.
static bool waitTimeout(bool (*fcn)()) {
  uint32_t m = micros();
    c04a:	bl	e58c <micros>
    c04e:	mov	r6, r0
    c050:	b.n	c05c <waitTimeout(bool (*)())+0x18>
  while (fcn()) {
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    c052:	bl	e58c <micros>
    c056:	subs	r0, r0, r6
    c058:	cmp	r0, r7
    c05a:	bhi.n	c064 <waitTimeout(bool (*)())+0x20>
}
//------------------------------------------------------------------------------
// Return true if timeout occurs.
static bool waitTimeout(bool (*fcn)()) {
  uint32_t m = micros();
  while (fcn()) {
    c05c:	blx	r5
    c05e:	mov	r4, r0
    c060:	cmp	r0, #0
    c062:	bne.n	c052 <waitTimeout(bool (*)())+0xe>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
      return true;
    }
  }
  return false;  // Caller will set errorCode.
}
    c064:	mov	r0, r4
    c066:	pop	{r3, r4, r5, r6, r7, pc}
    c068:	.word	0x000f4240

0000c06c <yieldTimeout(bool (*)())>:
  SDHC_PROCTL = proctl;
  return true;
}
//------------------------------------------------------------------------------
// Return true if timeout occurs.
static bool yieldTimeout(bool (*fcn)()) {
    c06c:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  m_busyFcn = fcn;
    c070:	ldr.w	r8, [pc, #64]	; c0b4 <yieldTimeout(bool (*)())+0x48>
  SDHC_PROCTL = proctl;
  return true;
}
//------------------------------------------------------------------------------
// Return true if timeout occurs.
static bool yieldTimeout(bool (*fcn)()) {
    c074:	mov	r5, r0
  m_busyFcn = fcn;
  uint32_t m = micros();
  while (fcn()) {
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    c076:	ldr	r7, [pc, #56]	; (c0b0 <yieldTimeout(bool (*)())+0x44>)
  return true;
}
//------------------------------------------------------------------------------
// Return true if timeout occurs.
static bool yieldTimeout(bool (*fcn)()) {
  m_busyFcn = fcn;
    c078:	str.w	r0, [r8]
  uint32_t m = micros();
    c07c:	bl	e58c <micros>
    c080:	mov	r6, r0
    c082:	b.n	c092 <yieldTimeout(bool (*)())+0x26>
  while (fcn()) {
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    c084:	bl	e58c <micros>
    c088:	subs	r0, r0, r6
    c08a:	cmp	r0, r7
    c08c:	bhi.n	c0a4 <yieldTimeout(bool (*)())+0x38>
  Particle.process();
}
#elif defined(ARDUINO)
inline void SysCall::yield() {
  // Use the external Arduino yield() function.
  ::yield();
    c08e:	bl	f2bc <yield>
//------------------------------------------------------------------------------
// Return true if timeout occurs.
static bool yieldTimeout(bool (*fcn)()) {
  m_busyFcn = fcn;
  uint32_t m = micros();
  while (fcn()) {
    c092:	blx	r5
    c094:	mov	r4, r0
    c096:	cmp	r0, #0
    c098:	bne.n	c084 <yieldTimeout(bool (*)())+0x18>
      m_busyFcn = 0;
      return true;
    }
    SysCall::yield();
  }
  m_busyFcn = 0;
    c09a:	str.w	r0, [r8]
  return false;  // Caller will set errorCode.
}
    c09e:	mov	r0, r4
    c0a0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
static bool yieldTimeout(bool (*fcn)()) {
  m_busyFcn = fcn;
  uint32_t m = micros();
  while (fcn()) {
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
      m_busyFcn = 0;
    c0a4:	movs	r3, #0
    }
    SysCall::yield();
  }
  m_busyFcn = 0;
  return false;  // Caller will set errorCode.
}
    c0a6:	mov	r0, r4
static bool yieldTimeout(bool (*fcn)()) {
  m_busyFcn = fcn;
  uint32_t m = micros();
  while (fcn()) {
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
      m_busyFcn = 0;
    c0a8:	str.w	r3, [r8]
    }
    SysCall::yield();
  }
  m_busyFcn = 0;
  return false;  // Caller will set errorCode.
}
    c0ac:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c0b0:	.word	0x000f4240
    c0b4:	.word	0x20005b3c

0000c0b8 <SdioCard::~SdioCard()>:
    c0b8:	push	{r4, lr}
    c0ba:	mov	r4, r0
    c0bc:	movs	r1, #12
    c0be:	bl	f6e0 <operator delete(void*, unsigned int)>
    c0c2:	mov	r0, r4
    c0c4:	pop	{r4, pc}
    c0c6:	nop

0000c0c8 <enableGPIO(bool) [clone .part.0]>:
static uint32_t baseClock() { return F_CPU;}

#elif defined(__IMXRT1062__)
//------------------------------------------------------------------------------
static void gpioMux(uint8_t mode) {
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    c0c8:	ldr	r3, [pc, #60]	; (c108 <enableGPIO(bool) [clone .part.0]+0x40>)
    c0ca:	movs	r2, #0

  const uint32_t DATA_MASK = CLOCK_MASK | IOMUXC_SW_PAD_CTL_PAD_PUE |
                             IOMUXC_SW_PAD_CTL_PAD_PUS(1);
  if (enable) {
    gpioMux(0);
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_04 = DATA_MASK;   // DAT2
    c0cc:	movw	r1, #28808	; 0x7088
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_05 = DATA_MASK;   // DAT3
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_00 = DATA_MASK;   // CMD
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_01 = CLOCK_MASK;  // CLK
    c0d0:	movw	r0, #4232	; 0x1088
static uint32_t baseClock() { return F_CPU;}

#elif defined(__IMXRT1062__)
//------------------------------------------------------------------------------
static void gpioMux(uint8_t mode) {
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    c0d4:	str.w	r2, [r3, #460]	; 0x1cc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_05 = mode;  // DAT3
    c0d8:	str.w	r2, [r3, #464]	; 0x1d0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_00 = mode;  // CMD
    c0dc:	str.w	r2, [r3, #444]	; 0x1bc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_01 = mode;  // CLK
    c0e0:	str.w	r2, [r3, #448]	; 0x1c0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_02 = mode;  // DAT0
    c0e4:	str.w	r2, [r3, #452]	; 0x1c4
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_03 = mode;  // DAT1
    c0e8:	str.w	r2, [r3, #456]	; 0x1c8

  const uint32_t DATA_MASK = CLOCK_MASK | IOMUXC_SW_PAD_CTL_PAD_PUE |
                             IOMUXC_SW_PAD_CTL_PAD_PUS(1);
  if (enable) {
    gpioMux(0);
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_04 = DATA_MASK;   // DAT2
    c0ec:	str.w	r1, [r3, #956]	; 0x3bc
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_05 = DATA_MASK;   // DAT3
    c0f0:	str.w	r1, [r3, #960]	; 0x3c0
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_00 = DATA_MASK;   // CMD
    c0f4:	str.w	r1, [r3, #940]	; 0x3ac
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_01 = CLOCK_MASK;  // CLK
    c0f8:	str.w	r0, [r3, #944]	; 0x3b0
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_02 = DATA_MASK;   // DAT0
    c0fc:	str.w	r1, [r3, #948]	; 0x3b4
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_03 = DATA_MASK;   // DAT1
    c100:	str.w	r1, [r3, #952]	; 0x3b8
    c104:	bx	lr
    c106:	nop
    c108:	.word	0x401f8000

0000c10c <SdioCard::type() const>:
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdioCard::type() const {
  return  m_version2 ? m_highCapacity ?
          SD_CARD_TYPE_SDHC : SD_CARD_TYPE_SD2 : SD_CARD_TYPE_SD1;
    c10c:	ldr	r3, [pc, #20]	; (c124 <SdioCard::type() const+0x18>)
    c10e:	ldrb	r3, [r3, #0]
    c110:	cbz	r3, c120 <SdioCard::type() const+0x14>
    c112:	ldr	r3, [pc, #20]	; (c128 <SdioCard::type() const+0x1c>)
    c114:	ldrb	r3, [r3, #0]
    c116:	cmp	r3, #0
    c118:	ite	ne
    c11a:	movne	r0, #3
    c11c:	moveq	r0, #2
    c11e:	bx	lr
    c120:	movs	r0, #1
}
    c122:	bx	lr
    c124:	.word	0x20005b28
    c128:	.word	0x20005b40

0000c12c <cardCommand(unsigned long, unsigned long)>:
// Static functions.
static bool cardAcmd(uint32_t rca, uint32_t xfertyp, uint32_t arg) {
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
}
//------------------------------------------------------------------------------
static bool cardCommand(uint32_t xfertyp, uint32_t arg) {
    c12c:	push	{r3, r4, r5, lr}
    c12e:	mov	r4, r0
  DBG_IRQSTAT();
  if (waitTimeout(isBusyCommandInhibit)) {
    c130:	ldr	r0, [pc, #80]	; (c184 <cardCommand(unsigned long, unsigned long)+0x58>)
// Static functions.
static bool cardAcmd(uint32_t rca, uint32_t xfertyp, uint32_t arg) {
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
}
//------------------------------------------------------------------------------
static bool cardCommand(uint32_t xfertyp, uint32_t arg) {
    c132:	mov	r5, r1
  DBG_IRQSTAT();
  if (waitTimeout(isBusyCommandInhibit)) {
    c134:	bl	c044 <waitTimeout(bool (*)())>
    c138:	cbnz	r0, c17e <cardCommand(unsigned long, unsigned long)+0x52>
    return false;  // Caller will set errorCode.
  }
  SDHC_CMDARG = arg;
    c13a:	ldr	r3, [pc, #76]	; (c188 <cardCommand(unsigned long, unsigned long)+0x5c>)
#if defined(__IMXRT1062__)
  // Set MIX_CTRL if data transfer.
  if (xfertyp & SDHC_XFERTYP_DPSEL) {
    c13c:	lsls	r1, r4, #10
static bool cardCommand(uint32_t xfertyp, uint32_t arg) {
  DBG_IRQSTAT();
  if (waitTimeout(isBusyCommandInhibit)) {
    return false;  // Caller will set errorCode.
  }
  SDHC_CMDARG = arg;
    c13e:	str	r5, [r3, #8]
#if defined(__IMXRT1062__)
  // Set MIX_CTRL if data transfer.
  if (xfertyp & SDHC_XFERTYP_DPSEL) {
    c140:	bpl.n	c152 <cardCommand(unsigned long, unsigned long)+0x26>
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_MASK;
    c142:	ldr	r1, [r3, #72]	; 0x48
    SDHC_MIX_CTRL |= xfertyp & SDHC_MIX_CTRL_MASK;
    c144:	uxtb	r2, r4
  }
  SDHC_CMDARG = arg;
#if defined(__IMXRT1062__)
  // Set MIX_CTRL if data transfer.
  if (xfertyp & SDHC_XFERTYP_DPSEL) {
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_MASK;
    c146:	bic.w	r1, r1, #255	; 0xff
    c14a:	str	r1, [r3, #72]	; 0x48
    SDHC_MIX_CTRL |= xfertyp & SDHC_MIX_CTRL_MASK;
    c14c:	ldr	r1, [r3, #72]	; 0x48
    c14e:	orrs	r2, r1
    c150:	str	r2, [r3, #72]	; 0x48
  }
  xfertyp &= ~SDHC_MIX_CTRL_MASK;
    c152:	bic.w	r4, r4, #255	; 0xff
#endif  // defined(__IMXRT1062__)
  SDHC_XFERTYP = xfertyp;
    c156:	ldr	r5, [pc, #48]	; (c188 <cardCommand(unsigned long, unsigned long)+0x5c>)
  if (waitTimeout(isBusyCommandComplete)) {
    c158:	ldr	r0, [pc, #48]	; (c18c <cardCommand(unsigned long, unsigned long)+0x60>)
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_MASK;
    SDHC_MIX_CTRL |= xfertyp & SDHC_MIX_CTRL_MASK;
  }
  xfertyp &= ~SDHC_MIX_CTRL_MASK;
#endif  // defined(__IMXRT1062__)
  SDHC_XFERTYP = xfertyp;
    c15a:	str	r4, [r5, #12]
  if (waitTimeout(isBusyCommandComplete)) {
    c15c:	bl	c044 <waitTimeout(bool (*)())>
    c160:	cbnz	r0, c17e <cardCommand(unsigned long, unsigned long)+0x52>
    return false;  // Caller will set errorCode.
  }
  m_irqstat = SDHC_IRQSTAT;
    c162:	ldr	r2, [r5, #48]	; 0x30
    c164:	ldr	r3, [pc, #40]	; (c190 <cardCommand(unsigned long, unsigned long)+0x64>)
    c166:	str	r2, [r3, #0]
  SDHC_IRQSTAT = m_irqstat;
    c168:	ldr	r2, [r3, #0]
    c16a:	str	r2, [r5, #48]	; 0x30

  return (m_irqstat & SDHC_IRQSTAT_CC) &&
    c16c:	ldr	r2, [r3, #0]
    c16e:	lsls	r2, r2, #31
    c170:	bpl.n	c17e <cardCommand(unsigned long, unsigned long)+0x52>
         !(m_irqstat & SDHC_IRQSTAT_CMD_ERROR);
    c172:	ldr	r3, [r3, #0]
    return false;  // Caller will set errorCode.
  }
  m_irqstat = SDHC_IRQSTAT;
  SDHC_IRQSTAT = m_irqstat;

  return (m_irqstat & SDHC_IRQSTAT_CC) &&
    c174:	tst.w	r3, #983040	; 0xf0000
    c178:	bne.n	c17e <cardCommand(unsigned long, unsigned long)+0x52>
    c17a:	movs	r0, #1
         !(m_irqstat & SDHC_IRQSTAT_CMD_ERROR);
}
    c17c:	pop	{r3, r4, r5, pc}
    return false;  // Caller will set errorCode.
  }
  m_irqstat = SDHC_IRQSTAT;
  SDHC_IRQSTAT = m_irqstat;

  return (m_irqstat & SDHC_IRQSTAT_CC) &&
    c17e:	movs	r0, #0
    c180:	pop	{r3, r4, r5, pc}
    c182:	nop
    c184:	.word	0x0000beb5
    c188:	.word	0x402c0000
    c18c:	.word	0x0000be9d
    c190:	.word	0x20005b4c

0000c194 <SdioCard::status()>:
//------------------------------------------------------------------------------
uint32_t SdioCard::sectorCount() {
  return sdCardCapacity(&m_csd);
}
//------------------------------------------------------------------------------
uint32_t SdioCard::status() {
    c194:	push	{r3, lr}
  while (SDHC_SYSCTL & SDHC_SYSCTL_INITA) {
  }
}
//------------------------------------------------------------------------------
static uint32_t statusCMD13() {
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    c196:	ldr	r3, [pc, #16]	; (c1a8 <SdioCard::status()+0x14>)
    c198:	ldr	r0, [pc, #16]	; (c1ac <SdioCard::status()+0x18>)
    c19a:	ldr	r1, [r3, #0]
    c19c:	bl	c12c <cardCommand(unsigned long, unsigned long)>
    c1a0:	cbz	r0, c1a6 <SdioCard::status()+0x12>
    c1a2:	ldr	r3, [pc, #12]	; (c1b0 <SdioCard::status()+0x1c>)
    c1a4:	ldr	r0, [r3, #16]
  return sdCardCapacity(&m_csd);
}
//------------------------------------------------------------------------------
uint32_t SdioCard::status() {
  return statusCMD13();
}
    c1a6:	pop	{r3, pc}
    c1a8:	.word	0x20005b48
    c1ac:	.word	0x0d1a0000
    c1b0:	.word	0x402c0000

0000c1b4 <readReg16(unsigned long, void*)>:
}
//------------------------------------------------------------------------------
// Read 16 byte CID or CSD register.
static bool readReg16(uint32_t xfertyp, void* data) {
  uint8_t* d = reinterpret_cast<uint8_t*>(data);
  if (!cardCommand(xfertyp, m_rca)) {
    c1b4:	ldr	r3, [pc, #80]	; (c208 <readReg16(unsigned long, void*)+0x54>)
  }
  return waitDmaStatus();
}
//------------------------------------------------------------------------------
// Read 16 byte CID or CSD register.
static bool readReg16(uint32_t xfertyp, void* data) {
    c1b6:	push	{r4, r5, r6, lr}
    c1b8:	mov	r6, r1
    c1ba:	sub	sp, #16
  uint8_t* d = reinterpret_cast<uint8_t*>(data);
  if (!cardCommand(xfertyp, m_rca)) {
    c1bc:	ldr	r1, [r3, #0]
    c1be:	bl	c12c <cardCommand(unsigned long, unsigned long)>
    c1c2:	cbz	r0, c202 <readReg16(unsigned long, void*)+0x4e>
    return false;  // Caller will set errorCode.
  }
  uint32_t sr[] = {SDHC_CMDRSP0, SDHC_CMDRSP1, SDHC_CMDRSP2, SDHC_CMDRSP3};
    c1c4:	ldr	r1, [pc, #68]	; (c20c <readReg16(unsigned long, void*)+0x58>)
    c1c6:	add.w	r5, r6, #15
  for (int i = 0; i < 15; i++) {
    c1ca:	movs	r3, #0
static bool readReg16(uint32_t xfertyp, void* data) {
  uint8_t* d = reinterpret_cast<uint8_t*>(data);
  if (!cardCommand(xfertyp, m_rca)) {
    return false;  // Caller will set errorCode.
  }
  uint32_t sr[] = {SDHC_CMDRSP0, SDHC_CMDRSP1, SDHC_CMDRSP2, SDHC_CMDRSP3};
    c1cc:	ldr	r2, [r1, #16]
    c1ce:	str	r2, [sp, #0]
    c1d0:	ldr	r4, [r1, #20]
    c1d2:	str	r4, [sp, #4]
    c1d4:	ldr	r4, [r1, #24]
    c1d6:	str	r4, [sp, #8]
    c1d8:	ldr	r1, [r1, #28]
    c1da:	str	r1, [sp, #12]
    c1dc:	b.n	c1e2 <readReg16(unsigned long, void*)+0x2e>
    c1de:	ldr.w	r2, [r4, #-16]
  for (int i = 0; i < 15; i++) {
    d[14 - i] = sr[i/4] >> 8*(i%4);
    c1e2:	and.w	r1, r3, #3
  uint8_t* d = reinterpret_cast<uint8_t*>(data);
  if (!cardCommand(xfertyp, m_rca)) {
    return false;  // Caller will set errorCode.
  }
  uint32_t sr[] = {SDHC_CMDRSP0, SDHC_CMDRSP1, SDHC_CMDRSP2, SDHC_CMDRSP3};
  for (int i = 0; i < 15; i++) {
    c1e6:	adds	r3, #1
    d[14 - i] = sr[i/4] >> 8*(i%4);
    c1e8:	lsls	r1, r1, #3
    c1ea:	bic.w	r4, r3, #3
  uint8_t* d = reinterpret_cast<uint8_t*>(data);
  if (!cardCommand(xfertyp, m_rca)) {
    return false;  // Caller will set errorCode.
  }
  uint32_t sr[] = {SDHC_CMDRSP0, SDHC_CMDRSP1, SDHC_CMDRSP2, SDHC_CMDRSP3};
  for (int i = 0; i < 15; i++) {
    c1ee:	cmp	r3, #15
    d[14 - i] = sr[i/4] >> 8*(i%4);
    c1f0:	lsr.w	r2, r2, r1
    c1f4:	add	r1, sp, #16
    c1f6:	strb.w	r2, [r5, #-1]!
    c1fa:	add	r4, r1
  uint8_t* d = reinterpret_cast<uint8_t*>(data);
  if (!cardCommand(xfertyp, m_rca)) {
    return false;  // Caller will set errorCode.
  }
  uint32_t sr[] = {SDHC_CMDRSP0, SDHC_CMDRSP1, SDHC_CMDRSP2, SDHC_CMDRSP3};
  for (int i = 0; i < 15; i++) {
    c1fc:	bne.n	c1de <readReg16(unsigned long, void*)+0x2a>
    d[14 - i] = sr[i/4] >> 8*(i%4);
  }
  d[15] = 0;
    c1fe:	movs	r3, #0
    c200:	strb	r3, [r6, #15]
  return true;
}
    c202:	add	sp, #16
    c204:	pop	{r4, r5, r6, pc}
    c206:	nop
    c208:	.word	0x20005b48
    c20c:	.word	0x402c0000

0000c210 <isBusyCMD13()>:
//------------------------------------------------------------------------------
static uint32_t statusCMD13() {
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
}
//------------------------------------------------------------------------------
static bool isBusyCMD13() {
    c210:	push	{r3, lr}
  if (!cardCommand(CMD13_XFERTYP, m_rca)) {
    c212:	ldr	r3, [pc, #28]	; (c230 <isBusyCMD13()+0x20>)
    c214:	ldr	r0, [pc, #28]	; (c234 <isBusyCMD13()+0x24>)
    c216:	ldr	r1, [r3, #0]
    c218:	bl	c12c <cardCommand(unsigned long, unsigned long)>
    c21c:	cbz	r0, c22c <isBusyCMD13()+0x1c>
    // Caller will timeout.
    return true;
  }
  return !(SDHC_CMDRSP0 & CARD_STATUS_READY_FOR_DATA);
    c21e:	ldr	r3, [pc, #24]	; (c238 <isBusyCMD13()+0x28>)
    c220:	ldr	r0, [r3, #16]
    c222:	eor.w	r0, r0, #256	; 0x100
    c226:	ubfx	r0, r0, #8, #1
    c22a:	pop	{r3, pc}
}
//------------------------------------------------------------------------------
static bool isBusyCMD13() {
  if (!cardCommand(CMD13_XFERTYP, m_rca)) {
    // Caller will timeout.
    return true;
    c22c:	movs	r0, #1
  }
  return !(SDHC_CMDRSP0 & CARD_STATUS_READY_FOR_DATA);
}
    c22e:	pop	{r3, pc}
    c230:	.word	0x20005b48
    c234:	.word	0x0d1a0000
    c238:	.word	0x402c0000

0000c23c <SdioCard::isBusy()>:
uint32_t SdioCard::errorLine() const {
  return m_errorLine;
}
//------------------------------------------------------------------------------
bool SdioCard::isBusy() {
  return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
    c23c:	ldr	r3, [pc, #16]	; (c250 <SdioCard::isBusy()+0x14>)
    c23e:	ldr	r3, [r3, #0]
    c240:	cbz	r3, c244 <SdioCard::isBusy()+0x8>
    c242:	bx	r3
    c244:	ldr	r3, [pc, #12]	; (c254 <SdioCard::isBusy()+0x18>)
    c246:	ldrb	r0, [r3, #0]
    c248:	cbnz	r0, c24c <SdioCard::isBusy()+0x10>
}
    c24a:	bx	lr
uint32_t SdioCard::errorLine() const {
  return m_errorLine;
}
//------------------------------------------------------------------------------
bool SdioCard::isBusy() {
  return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
    c24c:	b.w	c210 <isBusyCMD13()>
    c250:	.word	0x20005b3c
    c254:	.word	0x20005b50

0000c258 <waitDmaStatus() [clone .part.7]>:
//------------------------------------------------------------------------------
static bool waitDmaStatus() {
  if (yieldTimeout(isBusyDMA)) {
    return false;  // Caller will set errorCode.
  }
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    c258:	ldr	r3, [pc, #20]	; (c270 <waitDmaStatus() [clone .part.7]+0x18>)
    c25a:	ldr	r0, [r3, #0]
    c25c:	ands.w	r0, r0, #2
    c260:	beq.n	c26e <waitDmaStatus() [clone .part.7]+0x16>
    c262:	ldr	r3, [r3, #0]
    c264:	ldr	r0, [pc, #12]	; (c274 <waitDmaStatus() [clone .part.7]+0x1c>)
    c266:	ands	r0, r3
    c268:	clz	r0, r0
    c26c:	lsrs	r0, r0, #5
}
    c26e:	bx	lr
    c270:	.word	0x20005b4c
    c274:	.word	0x117f0000

0000c278 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>:
static bool isBusyTransferComplete() {
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
}
//------------------------------------------------------------------------------
static bool rdWrSectors(uint32_t xfertyp,
                       uint32_t sector, uint8_t* buf, size_t n) {
    c278:	push	{r3, r4, r5, r6, r7, lr}
    c27a:	ands.w	r4, r2, #3
    c27e:	it	ne
    c280:	movne	r4, #1
    c282:	cmp	r3, #0
    c284:	it	eq
    c286:	orreq.w	r4, r4, #1
  if ((3 & (uint32_t)buf) || n == 0) {
    c28a:	cbz	r4, c29e <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x26>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    c28c:	ldr	r1, [pc, #120]	; (c308 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x90>)
    c28e:	movs	r0, #36	; 0x24
  m_errorLine = line;
    c290:	ldr	r3, [pc, #120]	; (c30c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x94>)
    c292:	mov.w	r2, #470	; 0x1d6
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    c296:	strb	r0, [r1, #0]
  m_errorLine = line;
    c298:	str	r2, [r3, #0]
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512*sector)) {
    return false;
  }
  return waitDmaStatus();
}
    c29a:	movs	r0, #0
    c29c:	pop	{r3, r4, r5, r6, r7, pc}
    c29e:	mov	r6, r0
static bool rdWrSectors(uint32_t xfertyp,
                       uint32_t sector, uint8_t* buf, size_t n) {
  if ((3 & (uint32_t)buf) || n == 0) {
    return sdError(SD_CARD_ERROR_DMA);
  }
  if (yieldTimeout(isBusyCMD13)) {
    c2a0:	ldr	r0, [pc, #108]	; (c310 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x98>)
    c2a2:	mov	r5, r3
    c2a4:	mov	r7, r1
    c2a6:	mov	r4, r2
    c2a8:	bl	c06c <yieldTimeout(bool (*)())>
    c2ac:	cbnz	r0, c2f4 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x7c>
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)buf;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    c2ae:	lsls	r3, r5, #16
    c2b0:	ldr	r2, [pc, #96]	; (c314 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x9c>)
  }
  return true;
}
//------------------------------------------------------------------------------
static void enableDmaIrs() {
  m_dmaBusy = true;
    c2b2:	ldr	r5, [pc, #100]	; (c318 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xa0>)
    c2b4:	mov.w	lr, #1
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)buf;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    c2b8:	ands	r2, r3
  return true;
}
//------------------------------------------------------------------------------
static void enableDmaIrs() {
  m_dmaBusy = true;
  m_irqstat = 0;
    c2ba:	ldr	r1, [pc, #96]	; (c31c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xa4>)
  }
  return true;
}
//------------------------------------------------------------------------------
static void enableDmaIrs() {
  m_dmaBusy = true;
    c2bc:	strb.w	lr, [r5]
  }
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)buf;
    c2c0:	ldr	r3, [pc, #92]	; (c320 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xa8>)
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    c2c2:	orr.w	r2, r2, #512	; 0x200
  return true;
}
//------------------------------------------------------------------------------
static void enableDmaIrs() {
  m_dmaBusy = true;
  m_irqstat = 0;
    c2c6:	str	r0, [r1, #0]
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)buf;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    c2c8:	ldr	r5, [pc, #88]	; (c324 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xac>)
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512*sector)) {
    c2ca:	ldr	r1, [pc, #92]	; (c328 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xb0>)
  }
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)buf;
    c2cc:	str	r4, [r3, #0]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    c2ce:	str	r2, [r3, #4]
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    c2d0:	str	r5, [r3, #56]	; 0x38
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512*sector)) {
    c2d2:	ldrb	r3, [r1, #0]
    c2d4:	cbnz	r3, c304 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x8c>
    c2d6:	lsls	r1, r7, #9
    c2d8:	mov	r0, r6
    c2da:	bl	c12c <cardCommand(unsigned long, unsigned long)>
    c2de:	cmp	r0, #0
    c2e0:	beq.n	c29a <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x22>
  m_busyFcn = 0;
  return false;  // Caller will set errorCode.
}
//------------------------------------------------------------------------------
static bool waitDmaStatus() {
  if (yieldTimeout(isBusyDMA)) {
    c2e2:	ldr	r0, [pc, #72]	; (c32c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xb4>)
    c2e4:	bl	c06c <yieldTimeout(bool (*)())>
    c2e8:	cmp	r0, #0
    c2ea:	bne.n	c29a <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x22>
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512*sector)) {
    return false;
  }
  return waitDmaStatus();
}
    c2ec:	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    c2f0:	b.w	c258 <waitDmaStatus() [clone .part.7]>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    c2f4:	ldr	r1, [pc, #16]	; (c308 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x90>)
    c2f6:	movs	r0, #10
  m_errorLine = line;
    c2f8:	ldr	r3, [pc, #16]	; (c30c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x94>)
    c2fa:	movw	r2, #473	; 0x1d9
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    c2fe:	strb	r0, [r1, #0]
  m_errorLine = line;
    c300:	str	r2, [r3, #0]
                       uint32_t sector, uint8_t* buf, size_t n) {
  if ((3 & (uint32_t)buf) || n == 0) {
    return sdError(SD_CARD_ERROR_DMA);
  }
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
    c302:	b.n	c29a <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x22>
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)buf;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512*sector)) {
    c304:	mov	r1, r7
    c306:	b.n	c2d8 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x60>
    c308:	.word	0x20000c1c
    c30c:	.word	0x20005b6c
    c310:	.word	0x0000c211
    c314:	.word	0x1fff0000
    c318:	.word	0x20005b64
    c31c:	.word	0x20005b4c
    c320:	.word	0x402c0000
    c324:	.word	0x117f0002
    c328:	.word	0x20005b40
    c32c:	.word	0x0000bec5

0000c330 <SdioCard::sectorCount()>:
  csd1_t v1;
  csd2_t v2;
};
//-----------------------------------------------------------------------------
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    c330:	ldr	r1, [pc, #100]	; (c398 <SdioCard::sectorCount()+0x68>)
//------------------------------------------------------------------------------
bool SdioCard::readStop() {
  return transferStop();
}
//------------------------------------------------------------------------------
uint32_t SdioCard::sectorCount() {
    c332:	push	{r4, r5, r6}
    c334:	ldrb	r3, [r1, #0]
    c336:	ands.w	r3, r3, #192	; 0xc0
    c33a:	beq.n	c360 <SdioCard::sectorCount()+0x30>
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
  } else if (csd->v2.csd_ver == 1) {
    c33c:	cmp	r3, #64	; 0x40
    c33e:	beq.n	c346 <SdioCard::sectorCount()+0x16>
    return (((uint32_t)csd->v2.c_size_high << 16) +
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
  } else {
    return 0;
    c340:	movs	r0, #0
  return sdCardCapacity(&m_csd);
}
    c342:	pop	{r4, r5, r6}
    c344:	bx	lr
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
  } else if (csd->v2.csd_ver == 1) {
    return (((uint32_t)csd->v2.c_size_high << 16) +
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    c346:	ldrb	r3, [r1, #9]
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
  } else if (csd->v2.csd_ver == 1) {
    return (((uint32_t)csd->v2.c_size_high << 16) +
    c348:	ldrb	r4, [r1, #7]
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    c34a:	adds	r2, r3, #1
    c34c:	ldrb	r0, [r1, #8]
    c34e:	and.w	r3, r4, #63	; 0x3f
    c352:	add.w	r3, r2, r3, lsl #16
    c356:	add.w	r0, r3, r0, lsl #8
    c35a:	pop	{r4, r5, r6}
    c35c:	lsls	r0, r0, #10
    c35e:	bx	lr
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    uint8_t read_bl_len = csd->v1.read_bl_len;
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
    c360:	ldrb	r5, [r1, #9]
};
//-----------------------------------------------------------------------------
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    uint8_t read_bl_len = csd->v1.read_bl_len;
    uint16_t c_size = (csd->v1.c_size_high << 10)
    c362:	ldrb	r3, [r1, #6]
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    c364:	ldrb	r2, [r1, #7]
    c366:	and.w	r5, r5, #3
  if (csd->v1.csd_ver == 0) {
    uint8_t read_bl_len = csd->v1.read_bl_len;
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    c36a:	ldrb	r0, [r1, #10]
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    c36c:	and.w	r3, r3, #3
    c370:	lsls	r5, r5, #1
  csd2_t v2;
};
//-----------------------------------------------------------------------------
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    uint8_t read_bl_len = csd->v1.read_bl_len;
    c372:	ldrb	r4, [r1, #5]
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    c374:	lsls	r2, r2, #2
//-----------------------------------------------------------------------------
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    uint8_t read_bl_len = csd->v1.read_bl_len;
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    c376:	ldrb	r6, [r1, #8]
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    c378:	orr.w	r0, r5, r0, lsr #7
    c37c:	and.w	r1, r4, #15
    c380:	orr.w	r3, r2, r3, lsl #10
    c384:	add	r0, r1
    c386:	orr.w	r3, r3, r6, lsr #6
    c38a:	subs	r0, #7
    c38c:	adds	r3, #1
    c38e:	pop	{r4, r5, r6}
    c390:	lsl.w	r0, r3, r0
    c394:	bx	lr
    c396:	nop
    c398:	.word	0x20005b54

0000c39c <SdioCard::erase(unsigned long, unsigned long)>:
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::erase(uint32_t firstSector, uint32_t lastSector) {
  // check for single sector erase
  if (!m_csd.v1.erase_blk_en) {
    c39c:	ldr	r0, [pc, #176]	; (c450 <SdioCard::erase(unsigned long, unsigned long)+0xb4>)
  enableGPIO(true);
  m_initDone = true;
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::erase(uint32_t firstSector, uint32_t lastSector) {
    c39e:	push	{r3, r4, r5, lr}
  // check for single sector erase
  if (!m_csd.v1.erase_blk_en) {
    c3a0:	ldrb	r3, [r0, #10]
  enableGPIO(true);
  m_initDone = true;
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::erase(uint32_t firstSector, uint32_t lastSector) {
    c3a2:	mov	r5, r2
  // check for single sector erase
  if (!m_csd.v1.erase_blk_en) {
    c3a4:	and.w	r2, r3, #64	; 0x40
    c3a8:	cbnz	r2, c3c2 <SdioCard::erase(unsigned long, unsigned long)+0x26>
    // erase size mask
    uint8_t m = (m_csd.v1.sector_size_high << 1) | m_csd.v1.sector_size_low;
    if ((firstSector & m) != 0 || ((lastSector + 1) & m) != 0) {
    c3aa:	and.w	r3, r3, #63	; 0x3f
    c3ae:	and.w	r4, r2, #255	; 0xff
//------------------------------------------------------------------------------
bool SdioCard::erase(uint32_t firstSector, uint32_t lastSector) {
  // check for single sector erase
  if (!m_csd.v1.erase_blk_en) {
    // erase size mask
    uint8_t m = (m_csd.v1.sector_size_high << 1) | m_csd.v1.sector_size_low;
    c3b2:	ldrb	r2, [r0, #11]
    if ((firstSector & m) != 0 || ((lastSector + 1) & m) != 0) {
    c3b4:	adds	r0, r5, #1
    c3b6:	lsls	r3, r3, #1
    c3b8:	orrs	r0, r1
    c3ba:	orr.w	r3, r3, r2, lsr #7
    c3be:	tst	r3, r0
    c3c0:	bne.n	c406 <SdioCard::erase(unsigned long, unsigned long)+0x6a>
      // error card can't erase specified area
      return sdError(SD_CARD_ERROR_ERASE_SINGLE_SECTOR);
    }
  }
  if (!m_highCapacity) {
    c3c2:	ldr	r3, [pc, #144]	; (c454 <SdioCard::erase(unsigned long, unsigned long)+0xb8>)
    c3c4:	ldrb	r3, [r3, #0]
    c3c6:	cbnz	r3, c3cc <SdioCard::erase(unsigned long, unsigned long)+0x30>
    firstSector <<= 9;
    c3c8:	lsls	r1, r1, #9
    lastSector <<= 9;
    c3ca:	lsls	r5, r5, #9
  }
  if (!cardCommand(CMD32_XFERTYP, firstSector)) {
    c3cc:	ldr	r0, [pc, #136]	; (c458 <SdioCard::erase(unsigned long, unsigned long)+0xbc>)
    c3ce:	bl	c12c <cardCommand(unsigned long, unsigned long)>
    c3d2:	mov	r4, r0
    c3d4:	cbnz	r0, c3e8 <SdioCard::erase(unsigned long, unsigned long)+0x4c>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    c3d6:	ldr	r1, [pc, #132]	; (c45c <SdioCard::erase(unsigned long, unsigned long)+0xc0>)
    c3d8:	movs	r0, #15
  m_errorLine = line;
    c3da:	ldr	r3, [pc, #132]	; (c460 <SdioCard::erase(unsigned long, unsigned long)+0xc4>)
    c3dc:	mov.w	r2, #692	; 0x2b4
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    c3e0:	strb	r0, [r1, #0]
  m_errorLine = line;
    c3e2:	str	r2, [r3, #0]
  }
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_ERASE_TIMEOUT);
  }
  return true;
}
    c3e4:	mov	r0, r4
    c3e6:	pop	{r3, r4, r5, pc}
    lastSector <<= 9;
  }
  if (!cardCommand(CMD32_XFERTYP, firstSector)) {
    return sdError(SD_CARD_ERROR_CMD32);
  }
  if (!cardCommand(CMD33_XFERTYP, lastSector)) {
    c3e8:	mov	r1, r5
    c3ea:	ldr	r0, [pc, #120]	; (c464 <SdioCard::erase(unsigned long, unsigned long)+0xc8>)
    c3ec:	bl	c12c <cardCommand(unsigned long, unsigned long)>
    c3f0:	mov	r4, r0
    c3f2:	cbnz	r0, c418 <SdioCard::erase(unsigned long, unsigned long)+0x7c>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    c3f4:	ldr	r1, [pc, #100]	; (c45c <SdioCard::erase(unsigned long, unsigned long)+0xc0>)
    c3f6:	movs	r0, #16
  m_errorLine = line;
    c3f8:	ldr	r3, [pc, #100]	; (c460 <SdioCard::erase(unsigned long, unsigned long)+0xc4>)
    c3fa:	movw	r2, #695	; 0x2b7
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    c3fe:	strb	r0, [r1, #0]
  }
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_ERASE_TIMEOUT);
  }
  return true;
}
    c400:	mov	r0, r4
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    c402:	str	r2, [r3, #0]
  }
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_ERASE_TIMEOUT);
  }
  return true;
}
    c404:	pop	{r3, r4, r5, pc}
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    c406:	ldr	r1, [pc, #84]	; (c45c <SdioCard::erase(unsigned long, unsigned long)+0xc0>)
    c408:	movs	r0, #38	; 0x26
  m_errorLine = line;
    c40a:	ldr	r3, [pc, #84]	; (c460 <SdioCard::erase(unsigned long, unsigned long)+0xc4>)
    c40c:	mov.w	r2, #684	; 0x2ac
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    c410:	strb	r0, [r1, #0]
  }
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_ERASE_TIMEOUT);
  }
  return true;
}
    c412:	mov	r0, r4
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    c414:	str	r2, [r3, #0]
  }
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_ERASE_TIMEOUT);
  }
  return true;
}
    c416:	pop	{r3, r4, r5, pc}
    return sdError(SD_CARD_ERROR_CMD32);
  }
  if (!cardCommand(CMD33_XFERTYP, lastSector)) {
     return sdError(SD_CARD_ERROR_CMD33);
  }
  if (!cardCommand(CMD38_XFERTYP, 0)) {
    c418:	movs	r1, #0
    c41a:	ldr	r0, [pc, #76]	; (c468 <SdioCard::erase(unsigned long, unsigned long)+0xcc>)
    c41c:	bl	c12c <cardCommand(unsigned long, unsigned long)>
    c420:	mov	r4, r0
    c422:	cbnz	r0, c434 <SdioCard::erase(unsigned long, unsigned long)+0x98>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    c424:	ldr	r1, [pc, #52]	; (c45c <SdioCard::erase(unsigned long, unsigned long)+0xc0>)
    c426:	movs	r0, #17
  m_errorLine = line;
    c428:	ldr	r3, [pc, #52]	; (c460 <SdioCard::erase(unsigned long, unsigned long)+0xc4>)
    c42a:	movw	r2, #698	; 0x2ba
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    c42e:	strb	r0, [r1, #0]
  m_errorLine = line;
    c430:	str	r2, [r3, #0]
    c432:	b.n	c3e4 <SdioCard::erase(unsigned long, unsigned long)+0x48>
     return sdError(SD_CARD_ERROR_CMD33);
  }
  if (!cardCommand(CMD38_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD38);
  }
  if (waitTimeout(isBusyCMD13)) {
    c434:	ldr	r0, [pc, #52]	; (c46c <SdioCard::erase(unsigned long, unsigned long)+0xd0>)
    c436:	bl	c044 <waitTimeout(bool (*)())>
    c43a:	cmp	r0, #0
    c43c:	beq.n	c3e4 <SdioCard::erase(unsigned long, unsigned long)+0x48>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    c43e:	ldr	r1, [pc, #28]	; (c45c <SdioCard::erase(unsigned long, unsigned long)+0xc0>)
    c440:	movs	r0, #39	; 0x27
  m_errorLine = line;
    c442:	ldr	r3, [pc, #28]	; (c460 <SdioCard::erase(unsigned long, unsigned long)+0xc4>)
    c444:	movw	r2, #701	; 0x2bd
  }
  if (!cardCommand(CMD38_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD38);
  }
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_ERASE_TIMEOUT);
    c448:	movs	r4, #0
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    c44a:	strb	r0, [r1, #0]
  m_errorLine = line;
    c44c:	str	r2, [r3, #0]
    c44e:	b.n	c3e4 <SdioCard::erase(unsigned long, unsigned long)+0x48>
    c450:	.word	0x20005b54
    c454:	.word	0x20005b40
    c458:	.word	0x201a0000
    c45c:	.word	0x20000c1c
    c460:	.word	0x20005b6c
    c464:	.word	0x211a0000
    c468:	.word	0x261b0000
    c46c:	.word	0x0000c211

0000c470 <transferStop()>:
  // Enable the SDHC clock.
  SDHC_SYSCTL |= SDHC_SYSCTL_SDCLKEN;
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
}
//------------------------------------------------------------------------------
static bool transferStop() {
    c470:	push	{r4, lr}
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    c472:	movs	r1, #0
    c474:	ldr	r0, [pc, #80]	; (c4c8 <transferStop()+0x58>)
    c476:	bl	c12c <cardCommand(unsigned long, unsigned long)>
    c47a:	mov	r4, r0
    c47c:	cbnz	r0, c490 <transferStop()+0x20>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    c47e:	ldr	r1, [pc, #76]	; (c4cc <transferStop()+0x5c>)
    c480:	movs	r0, #9
  m_errorLine = line;
    c482:	ldr	r3, [pc, #76]	; (c4d0 <transferStop()+0x60>)
    c484:	mov.w	r2, #540	; 0x21c
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    c488:	strb	r0, [r1, #0]
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTD;
  // Restore registers.
  SDHC_IRQSTATEN = irqsststen;
  SDHC_PROCTL = proctl;
  return true;
}
    c48a:	mov	r0, r4
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    c48c:	str	r2, [r3, #0]
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTD;
  // Restore registers.
  SDHC_IRQSTATEN = irqsststen;
  SDHC_PROCTL = proctl;
  return true;
}
    c48e:	pop	{r4, pc}
//------------------------------------------------------------------------------
static bool transferStop() {
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD12);
  }
  if (yieldTimeout(isBusyCMD13)) {
    c490:	ldr	r0, [pc, #64]	; (c4d4 <transferStop()+0x64>)
    c492:	bl	c06c <yieldTimeout(bool (*)())>
    c496:	cbnz	r0, c4b2 <transferStop()+0x42>
    return sdError(SD_CARD_ERROR_CMD13);
  }
  // Save registers before reset DAT lines.
  uint32_t irqsststen = SDHC_IRQSTATEN;
    c498:	ldr	r3, [pc, #60]	; (c4d8 <transferStop()+0x68>)
    c49a:	ldr	r0, [r3, #52]	; 0x34
  uint32_t proctl = SDHC_PROCTL & ~SDHC_PROCTL_SABGREQ;
    c49c:	ldr	r2, [r3, #40]	; 0x28
  // Do reset to clear CDIHB.  Should be a better way!
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTD;
    c49e:	ldr	r1, [r3, #44]	; 0x2c
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  // Save registers before reset DAT lines.
  uint32_t irqsststen = SDHC_IRQSTATEN;
  uint32_t proctl = SDHC_PROCTL & ~SDHC_PROCTL_SABGREQ;
    c4a0:	bic.w	r2, r2, #65536	; 0x10000
  // Do reset to clear CDIHB.  Should be a better way!
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTD;
    c4a4:	orr.w	r1, r1, #67108864	; 0x4000000
    c4a8:	str	r1, [r3, #44]	; 0x2c
  // Restore registers.
  SDHC_IRQSTATEN = irqsststen;
    c4aa:	str	r0, [r3, #52]	; 0x34
  SDHC_PROCTL = proctl;
  return true;
}
    c4ac:	mov	r0, r4
  uint32_t proctl = SDHC_PROCTL & ~SDHC_PROCTL_SABGREQ;
  // Do reset to clear CDIHB.  Should be a better way!
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTD;
  // Restore registers.
  SDHC_IRQSTATEN = irqsststen;
  SDHC_PROCTL = proctl;
    c4ae:	str	r2, [r3, #40]	; 0x28
  return true;
}
    c4b0:	pop	{r4, pc}
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    c4b2:	ldr	r1, [pc, #24]	; (c4cc <transferStop()+0x5c>)
    c4b4:	movs	r0, #10
  m_errorLine = line;
    c4b6:	ldr	r3, [pc, #24]	; (c4d0 <transferStop()+0x60>)
    c4b8:	movw	r2, #543	; 0x21f
static bool transferStop() {
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD12);
  }
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
    c4bc:	movs	r4, #0
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    c4be:	strb	r0, [r1, #0]
  m_errorLine = line;
    c4c0:	str	r2, [r3, #0]
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTD;
  // Restore registers.
  SDHC_IRQSTATEN = irqsststen;
  SDHC_PROCTL = proctl;
  return true;
}
    c4c2:	mov	r0, r4
    c4c4:	pop	{r4, pc}
    c4c6:	nop
    c4c8:	.word	0x0cdb0000
    c4cc:	.word	0x20000c1c
    c4d0:	.word	0x20005b6c
    c4d4:	.word	0x0000c211
    c4d8:	.word	0x402c0000

0000c4dc <SdioCard::readStop()>:
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeStop() {
  return transferStop();
    c4dc:	b.w	c470 <transferStop()>

0000c4e0 <SdioCard::writeData(unsigned char const*)>:
uint8_t SdioCard::type() const {
  return  m_version2 ? m_highCapacity ?
          SD_CARD_TYPE_SDHC : SD_CARD_TYPE_SD2 : SD_CARD_TYPE_SD1;
}
//------------------------------------------------------------------------------
bool SdioCard::writeData(const uint8_t* src) {
    c4e0:	push	{r3, r4, r5, lr}
  DBG_IRQSTAT();
  const uint32_t* p32 = reinterpret_cast<const uint32_t*>(src);
  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_WTA)) {
    c4e2:	ldr	r3, [pc, #156]	; (c580 <SdioCard::writeData(unsigned char const*)+0xa0>)
uint8_t SdioCard::type() const {
  return  m_version2 ? m_highCapacity ?
          SD_CARD_TYPE_SDHC : SD_CARD_TYPE_SD2 : SD_CARD_TYPE_SD1;
}
//------------------------------------------------------------------------------
bool SdioCard::writeData(const uint8_t* src) {
    c4e4:	mov	r5, r1
  DBG_IRQSTAT();
  const uint32_t* p32 = reinterpret_cast<const uint32_t*>(src);
  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_WTA)) {
    c4e6:	ldr	r2, [r3, #36]	; 0x24
    c4e8:	lsls	r0, r2, #23
    c4ea:	bmi.n	c4fc <SdioCard::writeData(unsigned char const*)+0x1c>
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    c4ec:	ldr	r2, [r3, #40]	; 0x28
    c4ee:	bic.w	r2, r2, #65536	; 0x10000
    c4f2:	str	r2, [r3, #40]	; 0x28
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
    c4f4:	ldr	r2, [r3, #40]	; 0x28
    c4f6:	orr.w	r2, r2, #131072	; 0x20000
    c4fa:	str	r2, [r3, #40]	; 0x28
  }
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    c4fc:	ldr	r4, [pc, #128]	; (c580 <SdioCard::writeData(unsigned char const*)+0xa0>)
  if (waitTimeout(isBusyFifoWrite)) {
    c4fe:	ldr	r0, [pc, #132]	; (c584 <SdioCard::writeData(unsigned char const*)+0xa4>)
  const uint32_t* p32 = reinterpret_cast<const uint32_t*>(src);
  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_WTA)) {
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
  }
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    c500:	ldr	r3, [r4, #40]	; 0x28
    c502:	orr.w	r3, r3, #65536	; 0x10000
    c506:	str	r3, [r4, #40]	; 0x28
  if (waitTimeout(isBusyFifoWrite)) {
    c508:	bl	c044 <waitTimeout(bool (*)())>
    c50c:	cmp	r0, #0
    c50e:	bne.n	c56c <SdioCard::writeData(unsigned char const*)+0x8c>
    c510:	subs	r3, r5, #4
    return sdError(SD_CARD_ERROR_WRITE_FIFO);
  }
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN)) {
    c512:	mov	r0, r4
    c514:	add.w	r5, r5, #508	; 0x1fc
    c518:	ldr	r2, [r0, #36]	; 0x24
    c51a:	lsls	r1, r2, #21
    c51c:	bpl.n	c518 <SdioCard::writeData(unsigned char const*)+0x38>
    c51e:	add.w	r1, r3, #64	; 0x40
    }
    for (uint32_t i = 0; i < FIFO_WML; i++) {
      SDHC_DATPORT = p32[i];
    c522:	ldr.w	r2, [r3, #4]!
    c526:	ldr	r4, [pc, #88]	; (c580 <SdioCard::writeData(unsigned char const*)+0xa0>)
    return sdError(SD_CARD_ERROR_WRITE_FIFO);
  }
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN)) {
    }
    for (uint32_t i = 0; i < FIFO_WML; i++) {
    c528:	cmp	r1, r3
      SDHC_DATPORT = p32[i];
    c52a:	str	r2, [r0, #32]
    return sdError(SD_CARD_ERROR_WRITE_FIFO);
  }
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN)) {
    }
    for (uint32_t i = 0; i < FIFO_WML; i++) {
    c52c:	bne.n	c522 <SdioCard::writeData(unsigned char const*)+0x42>
  }
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
  if (waitTimeout(isBusyFifoWrite)) {
    return sdError(SD_CARD_ERROR_WRITE_FIFO);
  }
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    c52e:	cmp	r5, r1
    c530:	mov	r3, r1
    c532:	bne.n	c518 <SdioCard::writeData(unsigned char const*)+0x38>
    for (uint32_t i = 0; i < FIFO_WML; i++) {
      SDHC_DATPORT = p32[i];
    }
    p32 += FIFO_WML;
  }
  if (waitTimeout(isBusyTransferComplete)) {
    c534:	ldr	r0, [pc, #80]	; (c588 <SdioCard::writeData(unsigned char const*)+0xa8>)
    c536:	bl	c044 <waitTimeout(bool (*)())>
    c53a:	cbnz	r0, c55a <SdioCard::writeData(unsigned char const*)+0x7a>
    return sdError(SD_CARD_ERROR_WRITE_TIMEOUT);
  }
  m_irqstat = SDHC_IRQSTAT;
    c53c:	ldr	r2, [r4, #48]	; 0x30
    c53e:	ldr	r3, [pc, #76]	; (c58c <SdioCard::writeData(unsigned char const*)+0xac>)
    c540:	str	r2, [r3, #0]
  SDHC_IRQSTAT = m_irqstat;
    c542:	ldr	r2, [r3, #0]
    c544:	str	r2, [r4, #48]	; 0x30
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    c546:	ldr	r2, [r3, #0]
    c548:	lsls	r2, r2, #30
    c54a:	bpl.n	c57c <SdioCard::writeData(unsigned char const*)+0x9c>
    c54c:	ldr	r3, [r3, #0]
    c54e:	ldr	r0, [pc, #64]	; (c590 <SdioCard::writeData(unsigned char const*)+0xb0>)
    c550:	ands	r0, r3
    c552:	clz	r0, r0
    c556:	lsrs	r0, r0, #5
    c558:	pop	{r3, r4, r5, pc}
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    c55a:	ldr	r1, [pc, #56]	; (c594 <SdioCard::writeData(unsigned char const*)+0xb4>)
    c55c:	movs	r0, #35	; 0x23
  m_errorLine = line;
    c55e:	ldr	r3, [pc, #56]	; (c598 <SdioCard::writeData(unsigned char const*)+0xb8>)
    c560:	movw	r2, #905	; 0x389
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    c564:	strb	r0, [r1, #0]
      SDHC_DATPORT = p32[i];
    }
    p32 += FIFO_WML;
  }
  if (waitTimeout(isBusyTransferComplete)) {
    return sdError(SD_CARD_ERROR_WRITE_TIMEOUT);
    c566:	movs	r0, #0
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    c568:	str	r2, [r3, #0]
    c56a:	pop	{r3, r4, r5, pc}
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    c56c:	ldr	r1, [pc, #36]	; (c594 <SdioCard::writeData(unsigned char const*)+0xb4>)
    c56e:	movs	r4, #32
  m_errorLine = line;
    c570:	ldr	r3, [pc, #36]	; (c598 <SdioCard::writeData(unsigned char const*)+0xb8>)
    c572:	movw	r2, #894	; 0x37e
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
  }
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
  if (waitTimeout(isBusyFifoWrite)) {
    return sdError(SD_CARD_ERROR_WRITE_FIFO);
    c576:	movs	r0, #0
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    c578:	strb	r4, [r1, #0]
  m_errorLine = line;
    c57a:	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_WRITE_TIMEOUT);
  }
  m_irqstat = SDHC_IRQSTAT;
  SDHC_IRQSTAT = m_irqstat;
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
    c57c:	pop	{r3, r4, r5, pc}
    c57e:	nop
    c580:	.word	0x402c0000
    c584:	.word	0x0000bee5
    c588:	.word	0x0000bef9
    c58c:	.word	0x20005b4c
    c590:	.word	0x117f0000
    c594:	.word	0x20000c1c
    c598:	.word	0x20005b6c

0000c59c <SdioCard::writeStart(unsigned long)>:
    }
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeStart(uint32_t sector) {
    c59c:	push	{r4, lr}
  if (yieldTimeout(isBusyCMD13)) {
    c59e:	ldr	r0, [pc, #80]	; (c5f0 <SdioCard::writeStart(unsigned long)+0x54>)
    }
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeStart(uint32_t sector) {
    c5a0:	mov	r4, r1
  if (yieldTimeout(isBusyCMD13)) {
    c5a2:	bl	c06c <yieldTimeout(bool (*)())>
    c5a6:	cbnz	r0, c5dc <SdioCard::writeStart(unsigned long)+0x40>
    return sdError(SD_CARD_ERROR_CMD13);
  }
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    c5a8:	ldr	r3, [pc, #72]	; (c5f4 <SdioCard::writeStart(unsigned long)+0x58>)

#if defined(__IMXRT1062__)
  // Infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
    c5aa:	mov.w	r0, #512	; 0x200
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(0XFFFF) | SDHC_BLKATTR_BLKSIZE(512);
#endif  // defined(__IMXRT1062__)
  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    c5ae:	ldr	r1, [pc, #72]	; (c5f8 <SdioCard::writeStart(unsigned long)+0x5c>)
//------------------------------------------------------------------------------
bool SdioCard::writeStart(uint32_t sector) {
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    c5b0:	ldr	r2, [r3, #40]	; 0x28
    c5b2:	bic.w	r2, r2, #65536	; 0x10000
    c5b6:	str	r2, [r3, #40]	; 0x28

#if defined(__IMXRT1062__)
  // Infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
    c5b8:	str	r0, [r3, #4]
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(0XFFFF) | SDHC_BLKATTR_BLKSIZE(512);
#endif  // defined(__IMXRT1062__)
  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    c5ba:	ldrb	r3, [r1, #0]
    c5bc:	cbnz	r3, c5d8 <SdioCard::writeStart(unsigned long)+0x3c>
    c5be:	lsls	r1, r4, #9
    c5c0:	ldr	r0, [pc, #56]	; (c5fc <SdioCard::writeStart(unsigned long)+0x60>)
    c5c2:	bl	c12c <cardCommand(unsigned long, unsigned long)>
    c5c6:	cbnz	r0, c5d6 <SdioCard::writeStart(unsigned long)+0x3a>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    c5c8:	ldr	r1, [pc, #52]	; (c600 <SdioCard::writeStart(unsigned long)+0x64>)
    c5ca:	movs	r4, #14
  m_errorLine = line;
    c5cc:	ldr	r3, [pc, #52]	; (c604 <SdioCard::writeStart(unsigned long)+0x68>)
    c5ce:	movw	r2, #990	; 0x3de
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    c5d2:	strb	r4, [r1, #0]
  m_errorLine = line;
    c5d4:	str	r2, [r3, #0]
#endif  // defined(__IMXRT1062__)
  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    return sdError(SD_CARD_ERROR_CMD25);
  }
  return true;
}
    c5d6:	pop	{r4, pc}
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(0XFFFF) | SDHC_BLKATTR_BLKSIZE(512);
#endif  // defined(__IMXRT1062__)
  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    c5d8:	mov	r1, r4
    c5da:	b.n	c5c0 <SdioCard::writeStart(unsigned long)+0x24>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    c5dc:	ldr	r1, [pc, #32]	; (c600 <SdioCard::writeStart(unsigned long)+0x64>)
    c5de:	movs	r0, #10
  m_errorLine = line;
    c5e0:	ldr	r3, [pc, #32]	; (c604 <SdioCard::writeStart(unsigned long)+0x68>)
    c5e2:	movw	r2, #978	; 0x3d2
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    c5e6:	strb	r0, [r1, #0]
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeStart(uint32_t sector) {
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
    c5e8:	movs	r0, #0
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    c5ea:	str	r2, [r3, #0]
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeStart(uint32_t sector) {
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
    c5ec:	pop	{r4, pc}
    c5ee:	nop
    c5f0:	.word	0x0000c211
    c5f4:	.word	0x402c0000
    c5f8:	.word	0x20005b40
    c5fc:	.word	0x193a0020
    c600:	.word	0x20000c1c
    c604:	.word	0x20005b6c

0000c608 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)>:
    m_curSector++;
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
    c608:	push	{r3, r4, r5, r6, r7, lr}
    c60a:	mov	r6, r0
  if (m_sdioConfig.useDma()) {
    c60c:	ldrb	r0, [r0, #8]
    m_curSector++;
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
    c60e:	mov	r4, r1
    c610:	mov	r5, r2
  if (m_sdioConfig.useDma()) {
    c612:	lsls	r0, r0, #31
    m_curSector++;
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
    c614:	mov	r7, r3
  if (m_sdioConfig.useDma()) {
    c616:	bmi.n	c640 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x38>
    }
    if (!rdWrSectors(CMD18_DMA_XFERTYP, sector, dst, n)) {
      return sdError(SD_CARD_ERROR_CMD18);
    }
  } else {
    for (size_t i = 0; i < n; i++) {
    c618:	cbz	r3, c63c <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
    c61a:	add	r7, r1
    c61c:	b.n	c622 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x1a>
    c61e:	cmp	r4, r7
    c620:	beq.n	c63c <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
      if (!readSector(sector + i, dst + i*512UL)) {
    c622:	ldr	r3, [r6, #0]
    c624:	mov	r2, r5
    c626:	mov	r1, r4
    c628:	mov	r0, r6
    c62a:	ldr	r3, [r3, #8]
    c62c:	add.w	r5, r5, #512	; 0x200
    c630:	adds	r4, #1
    c632:	blx	r3
    c634:	cmp	r0, #0
    c636:	bne.n	c61e <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x16>
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
  if (m_sdioConfig.useDma()) {
    if ((uint32_t)dst & 3) {
      for (size_t i = 0; i < n; i++, sector++, dst += 512) {
        if (!readSector(sector, dst)) {
          return false;  // readSector will set errorCode.
    c638:	movs	r0, #0
    c63a:	pop	{r3, r4, r5, r6, r7, pc}
      if (!readSector(sector + i, dst + i*512UL)) {
        return false;
      }
    }
  }
  return true;
    c63c:	movs	r0, #1
    c63e:	pop	{r3, r4, r5, r6, r7, pc}
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
  if (m_sdioConfig.useDma()) {
    if ((uint32_t)dst & 3) {
    c640:	lsls	r0, r2, #30
    c642:	beq.n	c66a <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x62>
      for (size_t i = 0; i < n; i++, sector++, dst += 512) {
    c644:	cmp	r3, #0
    c646:	beq.n	c63c <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
    c648:	add	r7, r1
    c64a:	b.n	c650 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x48>
    c64c:	cmp	r7, r4
    c64e:	beq.n	c63c <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
        if (!readSector(sector, dst)) {
    c650:	ldr	r3, [r6, #0]
    c652:	mov	r2, r5
    c654:	mov	r1, r4
    c656:	mov	r0, r6
    c658:	ldr	r3, [r3, #8]
}
//------------------------------------------------------------------------------
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
  if (m_sdioConfig.useDma()) {
    if ((uint32_t)dst & 3) {
      for (size_t i = 0; i < n; i++, sector++, dst += 512) {
    c65a:	add.w	r5, r5, #512	; 0x200
    c65e:	adds	r4, #1
        if (!readSector(sector, dst)) {
    c660:	blx	r3
    c662:	cmp	r0, #0
    c664:	bne.n	c64c <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x44>
          return false;  // readSector will set errorCode.
    c666:	movs	r0, #0
    c668:	pop	{r3, r4, r5, r6, r7, pc}
        }
      }
      return true;
    }
    if (!rdWrSectors(CMD18_DMA_XFERTYP, sector, dst, n)) {
    c66a:	ldr	r0, [pc, #24]	; (c684 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x7c>)
    c66c:	bl	c278 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    c670:	cmp	r0, #0
    c672:	bne.n	c63c <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    c674:	ldr	r1, [pc, #16]	; (c688 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x80>)
    c676:	movs	r4, #12
  m_errorLine = line;
    c678:	ldr	r3, [pc, #16]	; (c68c <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x84>)
    c67a:	mov.w	r2, #820	; 0x334
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    c67e:	strb	r4, [r1, #0]
  m_errorLine = line;
    c680:	str	r2, [r3, #0]
    c682:	pop	{r3, r4, r5, r6, r7, pc}
    c684:	.word	0x123a0037
    c688:	.word	0x20000c1c
    c68c:	.word	0x20005b6c

0000c690 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)>:
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeSectors(uint32_t sector, const uint8_t* src, size_t n) {
    c690:	push	{r3, r4, r5, r6, r7, lr}
    c692:	mov	r6, r0
  if (m_sdioConfig.useDma()) {
    c694:	ldrb	r0, [r0, #8]
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeSectors(uint32_t sector, const uint8_t* src, size_t n) {
    c696:	mov	r4, r1
    c698:	mov	r5, r2
  if (m_sdioConfig.useDma()) {
    c69a:	lsls	r0, r0, #31
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeSectors(uint32_t sector, const uint8_t* src, size_t n) {
    c69c:	mov	r7, r3
  if (m_sdioConfig.useDma()) {
    c69e:	bmi.n	c6c8 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x38>
    }
    if (!rdWrSectors(CMD25_DMA_XFERTYP, sector, ptr, n)) {
      return sdError(SD_CARD_ERROR_CMD25);
    }
  } else {
    for (size_t i = 0; i < n; i++) {
    c6a0:	cbz	r3, c6c4 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
    c6a2:	add	r7, r1
    c6a4:	b.n	c6aa <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x1a>
    c6a6:	cmp	r4, r7
    c6a8:	beq.n	c6c4 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
      if (!writeSector(sector + i, src + i*512UL)) {
    c6aa:	ldr	r3, [r6, #0]
    c6ac:	mov	r2, r5
    c6ae:	mov	r1, r4
    c6b0:	mov	r0, r6
    c6b2:	ldr	r3, [r3, #24]
    c6b4:	add.w	r5, r5, #512	; 0x200
    c6b8:	adds	r4, #1
    c6ba:	blx	r3
    c6bc:	cmp	r0, #0
    c6be:	bne.n	c6a6 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x16>
  if (m_sdioConfig.useDma()) {
    uint8_t* ptr = const_cast<uint8_t*>(src);
    if (3 & (uint32_t)ptr) {
      for (size_t i = 0; i < n; i++, sector++, ptr += 512) {
        if (!writeSector(sector, ptr)) {
          return false;  // writeSector will set errorCode.
    c6c0:	movs	r0, #0
    c6c2:	pop	{r3, r4, r5, r6, r7, pc}
      if (!writeSector(sector + i, src + i*512UL)) {
        return false;
      }
    }
  }
  return true;
    c6c4:	movs	r0, #1
    c6c6:	pop	{r3, r4, r5, r6, r7, pc}
}
//------------------------------------------------------------------------------
bool SdioCard::writeSectors(uint32_t sector, const uint8_t* src, size_t n) {
  if (m_sdioConfig.useDma()) {
    uint8_t* ptr = const_cast<uint8_t*>(src);
    if (3 & (uint32_t)ptr) {
    c6c8:	lsls	r0, r2, #30
    c6ca:	beq.n	c6f2 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x62>
      for (size_t i = 0; i < n; i++, sector++, ptr += 512) {
    c6cc:	cmp	r3, #0
    c6ce:	beq.n	c6c4 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
    c6d0:	add	r7, r1
    c6d2:	b.n	c6d8 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x48>
    c6d4:	cmp	r7, r4
    c6d6:	beq.n	c6c4 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
        if (!writeSector(sector, ptr)) {
    c6d8:	ldr	r3, [r6, #0]
    c6da:	mov	r2, r5
    c6dc:	mov	r1, r4
    c6de:	mov	r0, r6
    c6e0:	ldr	r3, [r3, #24]
//------------------------------------------------------------------------------
bool SdioCard::writeSectors(uint32_t sector, const uint8_t* src, size_t n) {
  if (m_sdioConfig.useDma()) {
    uint8_t* ptr = const_cast<uint8_t*>(src);
    if (3 & (uint32_t)ptr) {
      for (size_t i = 0; i < n; i++, sector++, ptr += 512) {
    c6e2:	add.w	r5, r5, #512	; 0x200
    c6e6:	adds	r4, #1
        if (!writeSector(sector, ptr)) {
    c6e8:	blx	r3
    c6ea:	cmp	r0, #0
    c6ec:	bne.n	c6d4 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x44>
          return false;  // writeSector will set errorCode.
    c6ee:	movs	r0, #0
    c6f0:	pop	{r3, r4, r5, r6, r7, pc}
        }
      }
      return true;
    }
    if (!rdWrSectors(CMD25_DMA_XFERTYP, sector, ptr, n)) {
    c6f2:	ldr	r0, [pc, #24]	; (c70c <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x7c>)
    c6f4:	bl	c278 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    c6f8:	cmp	r0, #0
    c6fa:	bne.n	c6c4 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    c6fc:	ldr	r1, [pc, #16]	; (c710 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x80>)
    c6fe:	movs	r4, #14
  m_errorLine = line;
    c700:	ldr	r3, [pc, #16]	; (c714 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x84>)
    c702:	mov.w	r2, #964	; 0x3c4
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    c706:	strb	r4, [r1, #0]
  m_errorLine = line;
    c708:	str	r2, [r3, #0]
    c70a:	pop	{r3, r4, r5, r6, r7, pc}
    c70c:	.word	0x193a0027
    c710:	.word	0x20000c1c
    c714:	.word	0x20005b6c

0000c718 <SdioCard::writeSector(unsigned long, unsigned char const*)>:
  m_irqstat = SDHC_IRQSTAT;
  SDHC_IRQSTAT = m_irqstat;
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
//------------------------------------------------------------------------------
bool SdioCard::writeSector(uint32_t sector, const uint8_t* src) {
    c718:	push	{r4, r5, r6, lr}
  if (m_sdioConfig.useDma()) {
    c71a:	ldrb	r3, [r0, #8]
  m_irqstat = SDHC_IRQSTAT;
  SDHC_IRQSTAT = m_irqstat;
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
//------------------------------------------------------------------------------
bool SdioCard::writeSector(uint32_t sector, const uint8_t* src) {
    c71c:	mov	r5, r2
    c71e:	sub.w	sp, sp, #512	; 0x200
    c722:	mov	r6, r1
  if (m_sdioConfig.useDma()) {
    c724:	lsls	r2, r3, #31
    c726:	bpl.n	c75c <SdioCard::writeSector(unsigned long, unsigned char const*)+0x44>
    uint8_t *ptr;
    uint8_t aligned[512];
    if (3 & (uint32_t)src) {
    c728:	lsls	r3, r5, #30
    c72a:	beq.n	c73a <SdioCard::writeSector(unsigned long, unsigned char const*)+0x22>
      ptr = aligned;
      memcpy(aligned, src, 512);
    c72c:	mov	r1, r5
    c72e:	mov.w	r2, #512	; 0x200
    c732:	mov	r0, sp
bool SdioCard::writeSector(uint32_t sector, const uint8_t* src) {
  if (m_sdioConfig.useDma()) {
    uint8_t *ptr;
    uint8_t aligned[512];
    if (3 & (uint32_t)src) {
      ptr = aligned;
    c734:	mov	r5, sp
      memcpy(aligned, src, 512);
    c736:	bl	d064 <memcpy>
    } else {
      ptr = const_cast<uint8_t*>(src);
    }
  if (!rdWrSectors(CMD24_DMA_XFERTYP, sector, ptr, 1)) {
    c73a:	mov	r2, r5
    c73c:	mov	r1, r6
    c73e:	movs	r3, #1
    c740:	ldr	r0, [pc, #104]	; (c7ac <SdioCard::writeSector(unsigned long, unsigned char const*)+0x94>)
    c742:	bl	c278 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    c746:	cbnz	r0, c756 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x3e>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    c748:	ldr	r1, [pc, #100]	; (c7b0 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x98>)
    c74a:	movs	r4, #13
  m_errorLine = line;
    c74c:	ldr	r3, [pc, #100]	; (c7b4 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x9c>)
    c74e:	movw	r2, #923	; 0x39b
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    c752:	strb	r4, [r1, #0]
  m_errorLine = line;
    c754:	str	r2, [r3, #0]
      }
    }
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
  }
  return true;
}
    c756:	add.w	sp, sp, #512	; 0x200
    c75a:	pop	{r4, r5, r6, pc}
    }
  if (!rdWrSectors(CMD24_DMA_XFERTYP, sector, ptr, 1)) {
      return sdError(SD_CARD_ERROR_CMD24);
    }
  } else {
    if (m_curState != WRITE_STATE || m_curSector != sector) {
    c75c:	ldrb	r3, [r0, #9]
    c75e:	mov	r4, r0
    c760:	cmp	r3, #2
    c762:	beq.n	c776 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x5e>
      if (!syncDevice()) {
    c764:	ldr	r3, [r4, #0]
    c766:	mov	r0, r4
    c768:	ldr	r3, [r3, #20]
    c76a:	blx	r3
    c76c:	cbnz	r0, c796 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x7e>
        return false;
    c76e:	movs	r0, #0
      }
    }
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
  }
  return true;
}
    c770:	add.w	sp, sp, #512	; 0x200
    c774:	pop	{r4, r5, r6, pc}
    }
  if (!rdWrSectors(CMD24_DMA_XFERTYP, sector, ptr, 1)) {
      return sdError(SD_CARD_ERROR_CMD24);
    }
  } else {
    if (m_curState != WRITE_STATE || m_curSector != sector) {
    c776:	ldr	r3, [r0, #4]
    c778:	cmp	r1, r3
    c77a:	bne.n	c764 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x4c>
        return false;
      }
      m_curSector = sector;
      m_curState = WRITE_STATE;
    }
    if (!writeData(src)) {
    c77c:	ldr	r3, [r4, #0]
    c77e:	mov	r1, r5
    c780:	mov	r0, r4
    c782:	ldr	r3, [r3, #68]	; 0x44
    c784:	blx	r3
    c786:	cmp	r0, #0
    c788:	beq.n	c76e <SdioCard::writeSector(unsigned long, unsigned char const*)+0x56>
      return false;
    }
    m_curSector++;
    c78a:	ldr	r3, [r4, #4]
    c78c:	adds	r3, #1
    c78e:	str	r3, [r4, #4]
      }
    }
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
  }
  return true;
}
    c790:	add.w	sp, sp, #512	; 0x200
    c794:	pop	{r4, r5, r6, pc}
  } else {
    if (m_curState != WRITE_STATE || m_curSector != sector) {
      if (!syncDevice()) {
        return false;
      }
      if (!writeStart(sector )) {
    c796:	ldr	r3, [r4, #0]
    c798:	mov	r1, r6
    c79a:	mov	r0, r4
    c79c:	ldr	r3, [r3, #72]	; 0x48
    c79e:	blx	r3
    c7a0:	cmp	r0, #0
    c7a2:	beq.n	c76e <SdioCard::writeSector(unsigned long, unsigned char const*)+0x56>
        return false;
      }
      m_curSector = sector;
      m_curState = WRITE_STATE;
    c7a4:	movs	r3, #2
        return false;
      }
      if (!writeStart(sector )) {
        return false;
      }
      m_curSector = sector;
    c7a6:	str	r6, [r4, #4]
      m_curState = WRITE_STATE;
    c7a8:	strb	r3, [r4, #9]
    c7aa:	b.n	c77c <SdioCard::writeSector(unsigned long, unsigned char const*)+0x64>
    c7ac:	.word	0x183a0001
    c7b0:	.word	0x20000c1c
    c7b4:	.word	0x20005b6c

0000c7b8 <SdioCard::syncDevice()>:
uint32_t SdioCard::status() {
  return statusCMD13();
}
//------------------------------------------------------------------------------
bool SdioCard::syncDevice() {
  if (m_curState == READ_STATE) {
    c7b8:	ldrb	r3, [r0, #9]
    c7ba:	cmp	r3, #1
    c7bc:	beq.n	c7de <SdioCard::syncDevice()+0x26>
    m_curState = IDLE_STATE;
    if (!readStop()) {
      return false;
    }
  } else if (m_curState == WRITE_STATE) {
    c7be:	cmp	r3, #2
    c7c0:	beq.n	c7c6 <SdioCard::syncDevice()+0xe>
    if (!writeStop()) {
      return false;
    }
  }
  return true;
}
    c7c2:	movs	r0, #1
    c7c4:	bx	lr
//------------------------------------------------------------------------------
uint32_t SdioCard::status() {
  return statusCMD13();
}
//------------------------------------------------------------------------------
bool SdioCard::syncDevice() {
    c7c6:	push	{r4}
    if (!readStop()) {
      return false;
    }
  } else if (m_curState == WRITE_STATE) {
    m_curState = IDLE_STATE;
    if (!writeStop()) {
    c7c8:	ldr	r3, [r0, #0]
    m_curState = IDLE_STATE;
    if (!readStop()) {
      return false;
    }
  } else if (m_curState == WRITE_STATE) {
    m_curState = IDLE_STATE;
    c7ca:	movs	r4, #0
    c7cc:	ldr	r1, [pc, #28]	; (c7ec <SdioCard::syncDevice()+0x34>)
    c7ce:	strb	r4, [r0, #9]
    if (!writeStop()) {
    c7d0:	ldr	r3, [r3, #76]	; 0x4c
    c7d2:	cmp	r3, r1
    c7d4:	bne.n	c7e6 <SdioCard::syncDevice()+0x2e>
      return false;
    }
  }
  return true;
}
    c7d6:	ldr.w	r4, [sp], #4
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeStop() {
  return transferStop();
    c7da:	b.w	c470 <transferStop()>
  return statusCMD13();
}
//------------------------------------------------------------------------------
bool SdioCard::syncDevice() {
  if (m_curState == READ_STATE) {
    m_curState = IDLE_STATE;
    c7de:	movs	r3, #0
    c7e0:	strb	r3, [r0, #9]
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readStop() {
  return transferStop();
    c7e2:	b.w	c470 <transferStop()>
    if (!writeStop()) {
      return false;
    }
  }
  return true;
}
    c7e6:	ldr.w	r4, [sp], #4
    if (!readStop()) {
      return false;
    }
  } else if (m_curState == WRITE_STATE) {
    m_curState = IDLE_STATE;
    if (!writeStop()) {
    c7ea:	bx	r3
    c7ec:	.word	0x0000c4dd

0000c7f0 <cardCMD6(unsigned long, unsigned char*)>:

  return (m_irqstat & SDHC_IRQSTAT_CC) &&
         !(m_irqstat & SDHC_IRQSTAT_CMD_ERROR);
}
//------------------------------------------------------------------------------
static bool cardCMD6(uint32_t arg, uint8_t* status) {
    c7f0:	push	{r3, r4, r5, r6, r7, lr}
    c7f2:	mov	r5, r0
  // CMD6 returns 64 bytes.
  if (waitTimeout(isBusyCMD13)) {
    c7f4:	ldr	r0, [pc, #108]	; (c864 <cardCMD6(unsigned long, unsigned char*)+0x74>)

  return (m_irqstat & SDHC_IRQSTAT_CC) &&
         !(m_irqstat & SDHC_IRQSTAT_CMD_ERROR);
}
//------------------------------------------------------------------------------
static bool cardCMD6(uint32_t arg, uint8_t* status) {
    c7f6:	mov	r4, r1
  // CMD6 returns 64 bytes.
  if (waitTimeout(isBusyCMD13)) {
    c7f8:	bl	c044 <waitTimeout(bool (*)())>
    c7fc:	cbz	r0, c810 <cardCMD6(unsigned long, unsigned char*)+0x20>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    c7fe:	ldr	r1, [pc, #104]	; (c868 <cardCMD6(unsigned long, unsigned char*)+0x78>)
    c800:	movs	r0, #10
  m_errorLine = line;
    c802:	ldr	r3, [pc, #104]	; (c86c <cardCMD6(unsigned long, unsigned char*)+0x7c>)
    c804:	movw	r2, #377	; 0x179
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    c808:	strb	r0, [r1, #0]
}
//------------------------------------------------------------------------------
static bool cardCMD6(uint32_t arg, uint8_t* status) {
  // CMD6 returns 64 bytes.
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
    c80a:	movs	r0, #0
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    c80c:	str	r2, [r3, #0]
}
//------------------------------------------------------------------------------
static bool cardCMD6(uint32_t arg, uint8_t* status) {
  // CMD6 returns 64 bytes.
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
    c80e:	pop	{r3, r4, r5, r6, r7, pc}
  }
  return true;
}
//------------------------------------------------------------------------------
static void enableDmaIrs() {
  m_dmaBusy = true;
    c810:	ldr	r2, [pc, #92]	; (c870 <cardCMD6(unsigned long, unsigned char*)+0x80>)
    c812:	movs	r7, #1
  // CMD6 returns 64 bytes.
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)status;
    c814:	ldr	r3, [pc, #92]	; (c874 <cardCMD6(unsigned long, unsigned char*)+0x84>)
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    c816:	mov	r1, r5
  }
  return true;
}
//------------------------------------------------------------------------------
static void enableDmaIrs() {
  m_dmaBusy = true;
    c818:	strb	r7, [r2, #0]
  m_irqstat = 0;
    c81a:	ldr	r6, [pc, #92]	; (c878 <cardCMD6(unsigned long, unsigned char*)+0x88>)
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)status;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
    c81c:	ldr	r5, [pc, #92]	; (c87c <cardCMD6(unsigned long, unsigned char*)+0x8c>)
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    c81e:	ldr	r2, [pc, #96]	; (c880 <cardCMD6(unsigned long, unsigned char*)+0x90>)
  return true;
}
//------------------------------------------------------------------------------
static void enableDmaIrs() {
  m_dmaBusy = true;
  m_irqstat = 0;
    c820:	str	r0, [r6, #0]
  // CMD6 returns 64 bytes.
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)status;
    c822:	str	r4, [r3, #0]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    c824:	ldr	r0, [pc, #92]	; (c884 <cardCMD6(unsigned long, unsigned char*)+0x94>)
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)status;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
    c826:	str	r5, [r3, #4]
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    c828:	str	r2, [r3, #56]	; 0x38
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    c82a:	bl	c12c <cardCommand(unsigned long, unsigned long)>
    c82e:	cbnz	r0, c840 <cardCMD6(unsigned long, unsigned char*)+0x50>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    c830:	ldr	r1, [pc, #52]	; (c868 <cardCMD6(unsigned long, unsigned char*)+0x78>)
    c832:	movs	r4, #4
  m_errorLine = line;
    c834:	ldr	r3, [pc, #52]	; (c86c <cardCMD6(unsigned long, unsigned char*)+0x7c>)
    c836:	mov.w	r2, #384	; 0x180
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    c83a:	strb	r4, [r1, #0]
  m_errorLine = line;
    c83c:	str	r2, [r3, #0]
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)status;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    return sdError(SD_CARD_ERROR_CMD6);
    c83e:	pop	{r3, r4, r5, r6, r7, pc}
  m_busyFcn = 0;
  return false;  // Caller will set errorCode.
}
//------------------------------------------------------------------------------
static bool waitDmaStatus() {
  if (yieldTimeout(isBusyDMA)) {
    c840:	ldr	r0, [pc, #68]	; (c888 <cardCMD6(unsigned long, unsigned char*)+0x98>)
    c842:	bl	c06c <yieldTimeout(bool (*)())>
    c846:	cbnz	r0, c850 <cardCMD6(unsigned long, unsigned char*)+0x60>
    c848:	bl	c258 <waitDmaStatus() [clone .part.7]>
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    return sdError(SD_CARD_ERROR_CMD6);
  }
  if (!waitDmaStatus()) {
    c84c:	cbz	r0, c850 <cardCMD6(unsigned long, unsigned char*)+0x60>
    return sdError(SD_CARD_ERROR_DMA);
  }
  return true;
}
    c84e:	pop	{r3, r4, r5, r6, r7, pc}
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    c850:	ldr	r1, [pc, #20]	; (c868 <cardCMD6(unsigned long, unsigned char*)+0x78>)
    c852:	movs	r0, #36	; 0x24
  m_errorLine = line;
    c854:	ldr	r3, [pc, #20]	; (c86c <cardCMD6(unsigned long, unsigned char*)+0x7c>)
    c856:	movw	r2, #387	; 0x183
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    c85a:	strb	r0, [r1, #0]
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    return sdError(SD_CARD_ERROR_CMD6);
  }
  if (!waitDmaStatus()) {
    return sdError(SD_CARD_ERROR_DMA);
    c85c:	movs	r0, #0
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    c85e:	str	r2, [r3, #0]
    c860:	pop	{r3, r4, r5, r6, r7, pc}
    c862:	nop
    c864:	.word	0x0000c211
    c868:	.word	0x20000c1c
    c86c:	.word	0x20005b6c
    c870:	.word	0x20005b64
    c874:	.word	0x402c0000
    c878:	.word	0x20005b4c
    c87c:	.word	0x00010040
    c880:	.word	0x117f0002
    c884:	.word	0x063a0011
    c888:	.word	0x0000bec5

0000c88c <SdioCard::begin(SdioConfig)>:
  return false;  // Caller will set errorCode.
}
//==============================================================================
// Start of SdioCard member functions.
//==============================================================================
bool SdioCard::begin(SdioConfig sdioConfig) {
    c88c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  }
}
//------------------------------------------------------------------------------
static void initClock() {
  /* set PDF_528 PLL2PFD0 */
  CCM_ANALOG_PFD_528 |= (1 << 7);
    c890:	ldr	r2, [pc, #732]	; (cb70 <SdioCard::begin(SdioConfig)+0x2e4>)
//==============================================================================
bool SdioCard::begin(SdioConfig sdioConfig) {
  uint32_t kHzSdClk;
  uint32_t arg;
  m_sdioConfig = sdioConfig;
  m_curState = IDLE_STATE;
    c892:	movs	r3, #0
  m_initDone = false;
  m_errorCode = SD_CARD_ERROR_NONE;
    c894:	ldr	r5, [pc, #732]	; (cb74 <SdioCard::begin(SdioConfig)+0x2e8>)
static uint32_t baseClock() { return F_CPU;}

#elif defined(__IMXRT1062__)
//------------------------------------------------------------------------------
static void gpioMux(uint8_t mode) {
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    c896:	movs	r4, #5
// Start of SdioCard member functions.
//==============================================================================
bool SdioCard::begin(SdioConfig sdioConfig) {
  uint32_t kHzSdClk;
  uint32_t arg;
  m_sdioConfig = sdioConfig;
    c898:	strb	r1, [r0, #8]
  return false;  // Caller will set errorCode.
}
//==============================================================================
// Start of SdioCard member functions.
//==============================================================================
bool SdioCard::begin(SdioConfig sdioConfig) {
    c89a:	sub	sp, #68	; 0x44
  uint32_t kHzSdClk;
  uint32_t arg;
  m_sdioConfig = sdioConfig;
  m_curState = IDLE_STATE;
  m_initDone = false;
  m_errorCode = SD_CARD_ERROR_NONE;
    c89c:	strb	r3, [r5, #0]
//==============================================================================
bool SdioCard::begin(SdioConfig sdioConfig) {
  uint32_t kHzSdClk;
  uint32_t arg;
  m_sdioConfig = sdioConfig;
  m_curState = IDLE_STATE;
    c89e:	strb	r3, [r0, #9]
  }
}
//------------------------------------------------------------------------------
static void initClock() {
  /* set PDF_528 PLL2PFD0 */
  CCM_ANALOG_PFD_528 |= (1 << 7);
    c8a0:	ldr.w	r0, [r2, #256]	; 0x100
bool SdioCard::begin(SdioConfig sdioConfig) {
  uint32_t kHzSdClk;
  uint32_t arg;
  m_sdioConfig = sdioConfig;
  m_curState = IDLE_STATE;
  m_initDone = false;
    c8a4:	ldr	r7, [pc, #720]	; (cb78 <SdioCard::begin(SdioConfig)+0x2ec>)
  }
}
//------------------------------------------------------------------------------
static void initClock() {
  /* set PDF_528 PLL2PFD0 */
  CCM_ANALOG_PFD_528 |= (1 << 7);
    c8a6:	orr.w	r0, r0, #128	; 0x80
  uint32_t arg;
  m_sdioConfig = sdioConfig;
  m_curState = IDLE_STATE;
  m_initDone = false;
  m_errorCode = SD_CARD_ERROR_NONE;
  m_highCapacity = false;
    c8aa:	ldr	r6, [pc, #720]	; (cb7c <SdioCard::begin(SdioConfig)+0x2f0>)
  m_version2 = false;
    c8ac:	ldr.w	r8, [pc, #820]	; cbe4 <SdioCard::begin(SdioConfig)+0x358>
bool SdioCard::begin(SdioConfig sdioConfig) {
  uint32_t kHzSdClk;
  uint32_t arg;
  m_sdioConfig = sdioConfig;
  m_curState = IDLE_STATE;
  m_initDone = false;
    c8b0:	strb	r3, [r7, #0]
  m_errorCode = SD_CARD_ERROR_NONE;
  m_highCapacity = false;
    c8b2:	strb	r3, [r6, #0]
  m_version2 = false;
    c8b4:	strb.w	r3, [r8]
  }
}
//------------------------------------------------------------------------------
static void initClock() {
  /* set PDF_528 PLL2PFD0 */
  CCM_ANALOG_PFD_528 |= (1 << 7);
    c8b8:	str.w	r0, [r2, #256]	; 0x100
  CCM_ANALOG_PFD_528 &= ~(0x3F << 0);
    c8bc:	ldr.w	r0, [r2, #256]	; 0x100
  CCM_ANALOG_PFD_528 |= ((24) & 0x3F << 0);  // 12 - 35
  CCM_ANALOG_PFD_528 &= ~(1 << 7);

  /* Enable USDHC clock. */
  CCM_CCGR6 |= CCM_CCGR6_USDHC1(CCM_CCGR_ON);
    c8c0:	ldr	r3, [pc, #700]	; (cb80 <SdioCard::begin(SdioConfig)+0x2f4>)
}
//------------------------------------------------------------------------------
static void initClock() {
  /* set PDF_528 PLL2PFD0 */
  CCM_ANALOG_PFD_528 |= (1 << 7);
  CCM_ANALOG_PFD_528 &= ~(0x3F << 0);
    c8c2:	bic.w	r0, r0, #63	; 0x3f
static uint32_t baseClock() { return F_CPU;}

#elif defined(__IMXRT1062__)
//------------------------------------------------------------------------------
static void gpioMux(uint8_t mode) {
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    c8c6:	ldr	r1, [pc, #700]	; (cb84 <SdioCard::begin(SdioConfig)+0x2f8>)
}
//------------------------------------------------------------------------------
static void initClock() {
  /* set PDF_528 PLL2PFD0 */
  CCM_ANALOG_PFD_528 |= (1 << 7);
  CCM_ANALOG_PFD_528 &= ~(0x3F << 0);
    c8c8:	str.w	r0, [r2, #256]	; 0x100
  CCM_ANALOG_PFD_528 |= ((24) & 0x3F << 0);  // 12 - 35
    c8cc:	ldr.w	r0, [r2, #256]	; 0x100
    c8d0:	orr.w	r0, r0, #24
    c8d4:	str.w	r0, [r2, #256]	; 0x100
  CCM_ANALOG_PFD_528 &= ~(1 << 7);
    c8d8:	ldr.w	r0, [r2, #256]	; 0x100
    c8dc:	bic.w	r0, r0, #128	; 0x80
    c8e0:	str.w	r0, [r2, #256]	; 0x100

  /* Enable USDHC clock. */
  CCM_CCGR6 |= CCM_CCGR6_USDHC1(CCM_CCGR_ON);
    c8e4:	ldr.w	r2, [r3, #128]	; 0x80

  // Disable GPIO clock.
  enableGPIO(false);

#if defined (__IMXRT1062__)
  SDHC_MIX_CTRL |= 0x80000000;
    c8e8:	ldr	r0, [pc, #668]	; (cb88 <SdioCard::begin(SdioConfig)+0x2fc>)
  CCM_ANALOG_PFD_528 &= ~(0x3F << 0);
  CCM_ANALOG_PFD_528 |= ((24) & 0x3F << 0);  // 12 - 35
  CCM_ANALOG_PFD_528 &= ~(1 << 7);

  /* Enable USDHC clock. */
  CCM_CCGR6 |= CCM_CCGR6_USDHC1(CCM_CCGR_ON);
    c8ea:	orr.w	r2, r2, #12
    c8ee:	str.w	r2, [r3, #128]	; 0x80
  CCM_CSCDR1 &= ~(CCM_CSCDR1_USDHC1_CLK_PODF_MASK);
    c8f2:	ldr	r2, [r3, #36]	; 0x24
    c8f4:	bic.w	r2, r2, #14336	; 0x3800
    c8f8:	str	r2, [r3, #36]	; 0x24
  CCM_CSCMR1 |= CCM_CSCMR1_USDHC1_CLK_SEL;          // PLL2PFD0
    c8fa:	ldr	r2, [r3, #28]
    c8fc:	orr.w	r2, r2, #65536	; 0x10000
    c900:	str	r2, [r3, #28]
//  CCM_CSCDR1 |= CCM_CSCDR1_USDHC1_CLK_PODF((7)); / &0x7  WHG
  CCM_CSCDR1 |= CCM_CSCDR1_USDHC1_CLK_PODF((1));
    c902:	ldr	r2, [r3, #36]	; 0x24
    c904:	orr.w	r2, r2, #2048	; 0x800
    c908:	str	r2, [r3, #36]	; 0x24
#endif

  // Reset SDHC. Use default Water Mark Level of 16.
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTA | SDHC_SYSCTL_SDCLKFS(0x80);

  while (SDHC_SYSCTL & SDHC_SYSCTL_RSTA) {
    c90a:	mov	r2, r0
static uint32_t baseClock() { return F_CPU;}

#elif defined(__IMXRT1062__)
//------------------------------------------------------------------------------
static void gpioMux(uint8_t mode) {
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    c90c:	str.w	r4, [r1, #460]	; 0x1cc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_05 = mode;  // DAT3
    c910:	str.w	r4, [r1, #464]	; 0x1d0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_00 = mode;  // CMD
    c914:	str.w	r4, [r1, #444]	; 0x1bc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_01 = mode;  // CLK
    c918:	str.w	r4, [r1, #448]	; 0x1c0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_02 = mode;  // DAT0
    c91c:	str.w	r4, [r1, #452]	; 0x1c4
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_03 = mode;  // DAT1
    c920:	str.w	r4, [r1, #456]	; 0x1c8

  // Disable GPIO clock.
  enableGPIO(false);

#if defined (__IMXRT1062__)
  SDHC_MIX_CTRL |= 0x80000000;
    c924:	ldr	r1, [r0, #72]	; 0x48
#endif

  // Reset SDHC. Use default Water Mark Level of 16.
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTA | SDHC_SYSCTL_SDCLKFS(0x80);
    c926:	ldr	r3, [pc, #612]	; (cb8c <SdioCard::begin(SdioConfig)+0x300>)

  // Disable GPIO clock.
  enableGPIO(false);

#if defined (__IMXRT1062__)
  SDHC_MIX_CTRL |= 0x80000000;
    c928:	orr.w	r1, r1, #2147483648	; 0x80000000
    c92c:	str	r1, [r0, #72]	; 0x48
#endif

  // Reset SDHC. Use default Water Mark Level of 16.
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTA | SDHC_SYSCTL_SDCLKFS(0x80);
    c92e:	ldr	r1, [r0, #44]	; 0x2c
    c930:	orrs	r3, r1
    c932:	str	r3, [r0, #44]	; 0x2c

  while (SDHC_SYSCTL & SDHC_SYSCTL_RSTA) {
    c934:	ldr	r3, [r2, #44]	; 0x2c
    c936:	ldr	r4, [pc, #592]	; (cb88 <SdioCard::begin(SdioConfig)+0x2fc>)
    c938:	lsls	r1, r3, #7
    c93a:	bmi.n	c934 <SdioCard::begin(SdioConfig)+0xa8>
  }

  // Set initial SCK rate.
  setSdclk(SD_MAX_INIT_RATE_KHZ);
    c93c:	mov.w	r0, #400	; 0x190
    c940:	bl	bf10 <setSdclk(unsigned long)>
    c944:	bl	c0c8 <enableGPIO(bool) [clone .part.0]>

  enableGPIO(true);

  // Enable desired IRQSTAT bits.
  SDHC_IRQSTATEN = SDHC_IRQSTATEN_MASK;
    c948:	ldr	r1, [pc, #580]	; (cb90 <SdioCard::begin(SdioConfig)+0x304>)
#define DMA_NUM_CHANNELS        32

#ifdef __cplusplus
extern "C" void (* _VectorsRam[NVIC_NUM_INTERRUPTS+16])(void);
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
    c94a:	ldr	r3, [pc, #584]	; (cb94 <SdioCard::begin(SdioConfig)+0x308>)
    c94c:	ldr	r2, [pc, #584]	; (cb98 <SdioCard::begin(SdioConfig)+0x30c>)
    c94e:	str	r1, [r4, #52]	; 0x34
    c950:	str.w	r2, [r3, #504]	; 0x1f8

  attachInterruptVector(IRQ_SDHC, sdIrs);
  NVIC_SET_PRIORITY(IRQ_SDHC, 6*16);
    c954:	ldr	r3, [pc, #580]	; (cb9c <SdioCard::begin(SdioConfig)+0x310>)
    c956:	movs	r0, #96	; 0x60
  NVIC_ENABLE_IRQ(IRQ_SDHC);
    c958:	ldr	r2, [pc, #580]	; (cba0 <SdioCard::begin(SdioConfig)+0x314>)
    c95a:	mov.w	r1, #16384	; 0x4000

  // Enable desired IRQSTAT bits.
  SDHC_IRQSTATEN = SDHC_IRQSTATEN_MASK;

  attachInterruptVector(IRQ_SDHC, sdIrs);
  NVIC_SET_PRIORITY(IRQ_SDHC, 6*16);
    c95e:	strb	r0, [r3, #0]
  NVIC_ENABLE_IRQ(IRQ_SDHC);

  // Send 80 clocks to card.
  SDHC_SYSCTL |= SDHC_SYSCTL_INITA;
  while (SDHC_SYSCTL & SDHC_SYSCTL_INITA) {
    c960:	mov	r3, r4
  // Enable desired IRQSTAT bits.
  SDHC_IRQSTATEN = SDHC_IRQSTATEN_MASK;

  attachInterruptVector(IRQ_SDHC, sdIrs);
  NVIC_SET_PRIORITY(IRQ_SDHC, 6*16);
  NVIC_ENABLE_IRQ(IRQ_SDHC);
    c962:	str	r1, [r2, #0]

  // Send 80 clocks to card.
  SDHC_SYSCTL |= SDHC_SYSCTL_INITA;
    c964:	ldr	r2, [r4, #44]	; 0x2c
    c966:	orr.w	r2, r2, #134217728	; 0x8000000
    c96a:	str	r2, [r4, #44]	; 0x2c
  while (SDHC_SYSCTL & SDHC_SYSCTL_INITA) {
    c96c:	ldr	r1, [r3, #44]	; 0x2c
    c96e:	ands.w	r1, r1, #134217728	; 0x8000000
    c972:	bne.n	c96c <SdioCard::begin(SdioConfig)+0xe0>
  m_highCapacity = false;
  m_version2 = false;

  // initialize controller.
  initSDHC();
  if (!cardCommand(CMD0_XFERTYP, 0)) {
    c974:	mov	r0, r1
    c976:	bl	c12c <cardCommand(unsigned long, unsigned long)>
    c97a:	mov	r4, r0
    c97c:	cmp	r0, #0
    c97e:	beq.n	ca1c <SdioCard::begin(SdioConfig)+0x190>
    c980:	movs	r4, #3
    return sdError(SD_CARD_ERROR_CMD0);
  }
  // Try several times for case of reset delay.
  for (uint32_t i = 0; i < CMD8_RETRIES; i++) {
    if (cardCommand(CMD8_XFERTYP, 0X1AA)) {
    c982:	mov.w	r1, #426	; 0x1aa
    c986:	ldr	r0, [pc, #540]	; (cba4 <SdioCard::begin(SdioConfig)+0x318>)
    c988:	bl	c12c <cardCommand(unsigned long, unsigned long)>
    c98c:	cmp	r0, #0
    c98e:	bne.n	ca4a <SdioCard::begin(SdioConfig)+0x1be>
  initSDHC();
  if (!cardCommand(CMD0_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD0);
  }
  // Try several times for case of reset delay.
  for (uint32_t i = 0; i < CMD8_RETRIES; i++) {
    c990:	subs	r4, #1
    c992:	bne.n	c982 <SdioCard::begin(SdioConfig)+0xf6>
      }
      m_version2 = true;
      break;
    }
  }
  arg = m_version2 ? 0X40300000 : 0x00300000;
    c994:	ldrb.w	r3, [r8]
    c998:	ldr	r4, [pc, #524]	; (cba8 <SdioCard::begin(SdioConfig)+0x31c>)
    c99a:	cmp	r3, #0
    c99c:	it	eq
    c99e:	moveq.w	r4, #3145728	; 0x300000
  int m = micros();
    c9a2:	bl	e58c <micros>
  do {
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
    c9a6:	ldr.w	r8, [pc, #576]	; cbe8 <SdioCard::begin(SdioConfig)+0x35c>
      m_version2 = true;
      break;
    }
  }
  arg = m_version2 ? 0X40300000 : 0x00300000;
  int m = micros();
    c9aa:	mov	r9, r0
}
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
//==============================================================================
// Static functions.
static bool cardAcmd(uint32_t rca, uint32_t xfertyp, uint32_t arg) {
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    c9ac:	movs	r1, #0
    c9ae:	ldr	r0, [pc, #508]	; (cbac <SdioCard::begin(SdioConfig)+0x320>)
    c9b0:	bl	c12c <cardCommand(unsigned long, unsigned long)>
    c9b4:	cbnz	r0, c9cc <SdioCard::begin(SdioConfig)+0x140>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    c9b6:	movs	r1, #23
  m_errorLine = line;
    c9b8:	ldr	r3, [pc, #500]	; (cbb0 <SdioCard::begin(SdioConfig)+0x324>)
    c9ba:	movw	r2, #621	; 0x26d
  arg = m_version2 ? 0X40300000 : 0x00300000;
  int m = micros();
  do {
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
       ((micros() - m) > BUSY_TIMEOUT_MICROS)) {
      return sdError(SD_CARD_ERROR_ACMD41);
    c9be:	movs	r4, #0
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    c9c0:	strb	r1, [r5, #0]
  m_errorLine = line;
    c9c2:	str	r2, [r3, #0]

  // Enable GPIO.
  enableGPIO(true);
  m_initDone = true;
  return true;
}
    c9c4:	mov	r0, r4
    c9c6:	add	sp, #68	; 0x44
    c9c8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
}
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
//==============================================================================
// Static functions.
static bool cardAcmd(uint32_t rca, uint32_t xfertyp, uint32_t arg) {
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    c9cc:	mov	r1, r4
    c9ce:	ldr	r0, [pc, #484]	; (cbb4 <SdioCard::begin(SdioConfig)+0x328>)
    c9d0:	bl	c12c <cardCommand(unsigned long, unsigned long)>
    c9d4:	cmp	r0, #0
    c9d6:	beq.n	c9b6 <SdioCard::begin(SdioConfig)+0x12a>
  }
  arg = m_version2 ? 0X40300000 : 0x00300000;
  int m = micros();
  do {
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
       ((micros() - m) > BUSY_TIMEOUT_MICROS)) {
    c9d8:	bl	e58c <micros>
    }
  }
  arg = m_version2 ? 0X40300000 : 0x00300000;
  int m = micros();
  do {
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
    c9dc:	rsb	r0, r9, r0
       ((micros() - m) > BUSY_TIMEOUT_MICROS)) {
      return sdError(SD_CARD_ERROR_ACMD41);
    }
  } while ((SDHC_CMDRSP0 & 0x80000000) == 0);
    c9e0:	ldr	r2, [pc, #420]	; (cb88 <SdioCard::begin(SdioConfig)+0x2fc>)
    }
  }
  arg = m_version2 ? 0X40300000 : 0x00300000;
  int m = micros();
  do {
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
    c9e2:	cmp	r0, r8
    c9e4:	bhi.n	c9b6 <SdioCard::begin(SdioConfig)+0x12a>
       ((micros() - m) > BUSY_TIMEOUT_MICROS)) {
      return sdError(SD_CARD_ERROR_ACMD41);
    }
  } while ((SDHC_CMDRSP0 & 0x80000000) == 0);
    c9e6:	ldr	r3, [r2, #16]
      break;
    }
  }
  arg = m_version2 ? 0X40300000 : 0x00300000;
  int m = micros();
  do {
    c9e8:	cmp	r3, #0
    c9ea:	bge.n	c9ac <SdioCard::begin(SdioConfig)+0x120>
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
       ((micros() - m) > BUSY_TIMEOUT_MICROS)) {
      return sdError(SD_CARD_ERROR_ACMD41);
    }
  } while ((SDHC_CMDRSP0 & 0x80000000) == 0);
  m_ocr = SDHC_CMDRSP0;
    c9ec:	ldr	r1, [r2, #16]
    c9ee:	ldr	r3, [pc, #456]	; (cbb8 <SdioCard::begin(SdioConfig)+0x32c>)
    c9f0:	str	r1, [r3, #0]
  if (SDHC_CMDRSP0 & 0x40000000) {
    c9f2:	ldr	r3, [r2, #16]
    c9f4:	lsls	r2, r3, #1
    c9f6:	bpl.n	c9fc <SdioCard::begin(SdioConfig)+0x170>
    // Is high capacity.
    m_highCapacity = true;
    c9f8:	movs	r3, #1
    c9fa:	strb	r3, [r6, #0]
  }
  if (!cardCommand(CMD2_XFERTYP, 0)) {
    c9fc:	movs	r1, #0
    c9fe:	ldr	r0, [pc, #444]	; (cbbc <SdioCard::begin(SdioConfig)+0x330>)
    ca00:	bl	c12c <cardCommand(unsigned long, unsigned long)>
    ca04:	mov	r4, r0
    ca06:	cbnz	r0, ca30 <SdioCard::begin(SdioConfig)+0x1a4>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    ca08:	movs	r1, #2
  m_errorLine = line;
    ca0a:	ldr	r3, [pc, #420]	; (cbb0 <SdioCard::begin(SdioConfig)+0x324>)
    ca0c:	movw	r2, #630	; 0x276

  // Enable GPIO.
  enableGPIO(true);
  m_initDone = true;
  return true;
}
    ca10:	mov	r0, r4
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    ca12:	strb	r1, [r5, #0]
  m_errorLine = line;
    ca14:	str	r2, [r3, #0]

  // Enable GPIO.
  enableGPIO(true);
  m_initDone = true;
  return true;
}
    ca16:	add	sp, #68	; 0x44
    ca18:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    ca1c:	movs	r1, #1
  m_errorLine = line;
    ca1e:	ldr	r3, [pc, #400]	; (cbb0 <SdioCard::begin(SdioConfig)+0x324>)
    ca20:	mov.w	r2, #604	; 0x25c

  // Enable GPIO.
  enableGPIO(true);
  m_initDone = true;
  return true;
}
    ca24:	mov	r0, r4
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    ca26:	strb	r1, [r5, #0]
  m_errorLine = line;
    ca28:	str	r2, [r3, #0]

  // Enable GPIO.
  enableGPIO(true);
  m_initDone = true;
  return true;
}
    ca2a:	add	sp, #68	; 0x44
    ca2c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    m_highCapacity = true;
  }
  if (!cardCommand(CMD2_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD2);
  }
  if (!cardCommand(CMD3_XFERTYP, 0)) {
    ca30:	movs	r1, #0
    ca32:	ldr	r0, [pc, #396]	; (cbc0 <SdioCard::begin(SdioConfig)+0x334>)
    ca34:	bl	c12c <cardCommand(unsigned long, unsigned long)>
    ca38:	mov	r4, r0
    ca3a:	cbnz	r0, ca6e <SdioCard::begin(SdioConfig)+0x1e2>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    ca3c:	movs	r1, #3
  m_errorLine = line;
    ca3e:	ldr	r3, [pc, #368]	; (cbb0 <SdioCard::begin(SdioConfig)+0x324>)
    ca40:	movw	r2, #633	; 0x279
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    ca44:	strb	r1, [r5, #0]
  m_errorLine = line;
    ca46:	str	r2, [r3, #0]
  }
  if (!cardCommand(CMD2_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD2);
  }
  if (!cardCommand(CMD3_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD3);
    ca48:	b.n	c9c4 <SdioCard::begin(SdioConfig)+0x138>
    return sdError(SD_CARD_ERROR_CMD0);
  }
  // Try several times for case of reset delay.
  for (uint32_t i = 0; i < CMD8_RETRIES; i++) {
    if (cardCommand(CMD8_XFERTYP, 0X1AA)) {
      if (SDHC_CMDRSP0 != 0X1AA) {
    ca4a:	ldr	r3, [pc, #316]	; (cb88 <SdioCard::begin(SdioConfig)+0x2fc>)
    ca4c:	ldr	r3, [r3, #16]
    ca4e:	cmp.w	r3, #426	; 0x1aa
    ca52:	beq.n	ca64 <SdioCard::begin(SdioConfig)+0x1d8>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    ca54:	movs	r1, #6
  m_errorLine = line;
    ca56:	ldr	r3, [pc, #344]	; (cbb0 <SdioCard::begin(SdioConfig)+0x324>)
    ca58:	movw	r2, #610	; 0x262
  }
  // Try several times for case of reset delay.
  for (uint32_t i = 0; i < CMD8_RETRIES; i++) {
    if (cardCommand(CMD8_XFERTYP, 0X1AA)) {
      if (SDHC_CMDRSP0 != 0X1AA) {
        return sdError(SD_CARD_ERROR_CMD8);
    ca5c:	movs	r4, #0
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    ca5e:	strb	r1, [r5, #0]
  m_errorLine = line;
    ca60:	str	r2, [r3, #0]
  }
  // Try several times for case of reset delay.
  for (uint32_t i = 0; i < CMD8_RETRIES; i++) {
    if (cardCommand(CMD8_XFERTYP, 0X1AA)) {
      if (SDHC_CMDRSP0 != 0X1AA) {
        return sdError(SD_CARD_ERROR_CMD8);
    ca62:	b.n	c9c4 <SdioCard::begin(SdioConfig)+0x138>
      }
      m_version2 = true;
    ca64:	movs	r3, #1
      break;
    }
  }
  arg = m_version2 ? 0X40300000 : 0x00300000;
    ca66:	ldr	r4, [pc, #320]	; (cba8 <SdioCard::begin(SdioConfig)+0x31c>)
  for (uint32_t i = 0; i < CMD8_RETRIES; i++) {
    if (cardCommand(CMD8_XFERTYP, 0X1AA)) {
      if (SDHC_CMDRSP0 != 0X1AA) {
        return sdError(SD_CARD_ERROR_CMD8);
      }
      m_version2 = true;
    ca68:	strb.w	r3, [r8]
    ca6c:	b.n	c9a2 <SdioCard::begin(SdioConfig)+0x116>
    return sdError(SD_CARD_ERROR_CMD2);
  }
  if (!cardCommand(CMD3_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD3);
  }
  m_rca = SDHC_CMDRSP0 & 0xFFFF0000;
    ca6e:	ldr	r6, [pc, #280]	; (cb88 <SdioCard::begin(SdioConfig)+0x2fc>)
    ca70:	ldr	r3, [pc, #336]	; (cbc4 <SdioCard::begin(SdioConfig)+0x338>)
    ca72:	ldr	r2, [r6, #16]
    ca74:	ldr.w	r8, [pc, #372]	; cbec <SdioCard::begin(SdioConfig)+0x360>
    ca78:	ands	r3, r2

  if (!readReg16(CMD9_XFERTYP, &m_csd)) {
    ca7a:	ldr	r1, [pc, #332]	; (cbc8 <SdioCard::begin(SdioConfig)+0x33c>)
    ca7c:	ldr	r0, [pc, #332]	; (cbcc <SdioCard::begin(SdioConfig)+0x340>)
    return sdError(SD_CARD_ERROR_CMD2);
  }
  if (!cardCommand(CMD3_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD3);
  }
  m_rca = SDHC_CMDRSP0 & 0xFFFF0000;
    ca7e:	str.w	r3, [r8]

  if (!readReg16(CMD9_XFERTYP, &m_csd)) {
    ca82:	bl	c1b4 <readReg16(unsigned long, void*)>
    ca86:	mov	r4, r0
    ca88:	cbnz	r0, ca98 <SdioCard::begin(SdioConfig)+0x20c>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    ca8a:	movs	r1, #7
  m_errorLine = line;
    ca8c:	ldr	r3, [pc, #288]	; (cbb0 <SdioCard::begin(SdioConfig)+0x324>)
    ca8e:	movw	r2, #638	; 0x27e
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    ca92:	strb	r1, [r5, #0]
  m_errorLine = line;
    ca94:	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD3);
  }
  m_rca = SDHC_CMDRSP0 & 0xFFFF0000;

  if (!readReg16(CMD9_XFERTYP, &m_csd)) {
    return sdError(SD_CARD_ERROR_CMD9);
    ca96:	b.n	c9c4 <SdioCard::begin(SdioConfig)+0x138>
  }
  if (!readReg16(CMD10_XFERTYP, &m_cid)) {
    ca98:	ldr	r1, [pc, #308]	; (cbd0 <SdioCard::begin(SdioConfig)+0x344>)
    ca9a:	ldr	r0, [pc, #312]	; (cbd4 <SdioCard::begin(SdioConfig)+0x348>)
    ca9c:	bl	c1b4 <readReg16(unsigned long, void*)>
    caa0:	mov	r4, r0
    caa2:	cbnz	r0, cab2 <SdioCard::begin(SdioConfig)+0x226>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    caa4:	movs	r1, #8
  m_errorLine = line;
    caa6:	ldr	r3, [pc, #264]	; (cbb0 <SdioCard::begin(SdioConfig)+0x324>)
    caa8:	movw	r2, #641	; 0x281
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    caac:	strb	r1, [r5, #0]
  m_errorLine = line;
    caae:	str	r2, [r3, #0]

  if (!readReg16(CMD9_XFERTYP, &m_csd)) {
    return sdError(SD_CARD_ERROR_CMD9);
  }
  if (!readReg16(CMD10_XFERTYP, &m_cid)) {
    return sdError(SD_CARD_ERROR_CMD10);
    cab0:	b.n	c9c4 <SdioCard::begin(SdioConfig)+0x138>
  }
  if (!cardCommand(CMD7_XFERTYP, m_rca)) {
    cab2:	ldr.w	r1, [r8]
    cab6:	ldr	r0, [pc, #288]	; (cbd8 <SdioCard::begin(SdioConfig)+0x34c>)
    cab8:	bl	c12c <cardCommand(unsigned long, unsigned long)>
    cabc:	mov	r4, r0
    cabe:	cbnz	r0, cace <SdioCard::begin(SdioConfig)+0x242>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    cac0:	movs	r1, #5
  m_errorLine = line;
    cac2:	ldr	r3, [pc, #236]	; (cbb0 <SdioCard::begin(SdioConfig)+0x324>)
    cac4:	mov.w	r2, #644	; 0x284
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    cac8:	strb	r1, [r5, #0]
  m_errorLine = line;
    caca:	str	r2, [r3, #0]
  }
  if (!readReg16(CMD10_XFERTYP, &m_cid)) {
    return sdError(SD_CARD_ERROR_CMD10);
  }
  if (!cardCommand(CMD7_XFERTYP, m_rca)) {
    return sdError(SD_CARD_ERROR_CMD7);
    cacc:	b.n	c9c4 <SdioCard::begin(SdioConfig)+0x138>
}
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
//==============================================================================
// Static functions.
static bool cardAcmd(uint32_t rca, uint32_t xfertyp, uint32_t arg) {
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    cace:	ldr.w	r1, [r8]
    cad2:	ldr	r0, [pc, #216]	; (cbac <SdioCard::begin(SdioConfig)+0x320>)
    cad4:	bl	c12c <cardCommand(unsigned long, unsigned long)>
    cad8:	cbnz	r0, caea <SdioCard::begin(SdioConfig)+0x25e>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    cada:	movs	r1, #20
  m_errorLine = line;
    cadc:	ldr	r3, [pc, #208]	; (cbb0 <SdioCard::begin(SdioConfig)+0x324>)
    cade:	mov.w	r2, #648	; 0x288
  if (!cardCommand(CMD7_XFERTYP, m_rca)) {
    return sdError(SD_CARD_ERROR_CMD7);
  }
  // Set card to bus width four.
  if (!cardAcmd(m_rca, ACMD6_XFERTYP, 2)) {
    return sdError(SD_CARD_ERROR_ACMD6);
    cae2:	movs	r4, #0
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    cae4:	strb	r1, [r5, #0]
  m_errorLine = line;
    cae6:	str	r2, [r3, #0]
  if (!cardCommand(CMD7_XFERTYP, m_rca)) {
    return sdError(SD_CARD_ERROR_CMD7);
  }
  // Set card to bus width four.
  if (!cardAcmd(m_rca, ACMD6_XFERTYP, 2)) {
    return sdError(SD_CARD_ERROR_ACMD6);
    cae8:	b.n	c9c4 <SdioCard::begin(SdioConfig)+0x138>
}
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
//==============================================================================
// Static functions.
static bool cardAcmd(uint32_t rca, uint32_t xfertyp, uint32_t arg) {
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    caea:	movs	r1, #2
    caec:	ldr	r0, [pc, #236]	; (cbdc <SdioCard::begin(SdioConfig)+0x350>)
    caee:	bl	c12c <cardCommand(unsigned long, unsigned long)>
    caf2:	mov	r4, r0
    caf4:	cmp	r0, #0
    caf6:	beq.n	cada <SdioCard::begin(SdioConfig)+0x24e>
  // Set card to bus width four.
  if (!cardAcmd(m_rca, ACMD6_XFERTYP, 2)) {
    return sdError(SD_CARD_ERROR_ACMD6);
  }
  // Set SDHC to bus width four.
  SDHC_PROCTL &= ~SDHC_PROCTL_DTW_MASK;
    caf8:	ldr	r3, [r6, #40]	; 0x28
  SDHC_PROCTL |= SDHC_PROCTL_DTW(SDHC_PROCTL_DTW_4BIT);

  SDHC_WML = SDHC_WML_RDWML(FIFO_WML) | SDHC_WML_WRWML(FIFO_WML);
    cafa:	mov.w	r2, #1048592	; 0x100010

  // Determine if High Speed mode is supported and set frequency.
  // Check status[16] for error 0XF or status[16] for new mode 0X1.
  uint8_t status[64];
  if (cardCMD6(0X00FFFFFF, status) && (2 & status[13]) &&
    cafe:	mvn.w	r0, #4278190080	; 0xff000000
    cb02:	mov	r1, sp
  // Set card to bus width four.
  if (!cardAcmd(m_rca, ACMD6_XFERTYP, 2)) {
    return sdError(SD_CARD_ERROR_ACMD6);
  }
  // Set SDHC to bus width four.
  SDHC_PROCTL &= ~SDHC_PROCTL_DTW_MASK;
    cb04:	bic.w	r3, r3, #6
    cb08:	str	r3, [r6, #40]	; 0x28
  SDHC_PROCTL |= SDHC_PROCTL_DTW(SDHC_PROCTL_DTW_4BIT);
    cb0a:	ldr	r3, [r6, #40]	; 0x28
    cb0c:	orr.w	r3, r3, #2
    cb10:	str	r3, [r6, #40]	; 0x28

  SDHC_WML = SDHC_WML_RDWML(FIFO_WML) | SDHC_WML_WRWML(FIFO_WML);
    cb12:	str	r2, [r6, #68]	; 0x44

  // Determine if High Speed mode is supported and set frequency.
  // Check status[16] for error 0XF or status[16] for new mode 0X1.
  uint8_t status[64];
  if (cardCMD6(0X00FFFFFF, status) && (2 & status[13]) &&
    cb14:	bl	c7f0 <cardCMD6(unsigned long, unsigned char*)>
      cardCMD6(0X80FFFFF1, status) && (status[16] & 0XF) == 1) {
    cb18:	cbz	r0, cb22 <SdioCard::begin(SdioConfig)+0x296>
  SDHC_WML = SDHC_WML_RDWML(FIFO_WML) | SDHC_WML_WRWML(FIFO_WML);

  // Determine if High Speed mode is supported and set frequency.
  // Check status[16] for error 0XF or status[16] for new mode 0X1.
  uint8_t status[64];
  if (cardCMD6(0X00FFFFFF, status) && (2 & status[13]) &&
    cb1a:	ldrb.w	r3, [sp, #13]
    cb1e:	lsls	r3, r3, #30
    cb20:	bmi.n	cb50 <SdioCard::begin(SdioConfig)+0x2c4>
      cardCMD6(0X80FFFFF1, status) && (status[16] & 0XF) == 1) {
    kHzSdClk = 50000;
  } else {
    kHzSdClk = 25000;
    cb22:	movw	r0, #25000	; 0x61a8
static uint32_t baseClock() { return F_CPU;}

#elif defined(__IMXRT1062__)
//------------------------------------------------------------------------------
static void gpioMux(uint8_t mode) {
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    cb26:	ldr	r3, [pc, #92]	; (cb84 <SdioCard::begin(SdioConfig)+0x2f8>)
    cb28:	movs	r2, #5
    cb2a:	str.w	r2, [r3, #460]	; 0x1cc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_05 = mode;  // DAT3
    cb2e:	str.w	r2, [r3, #464]	; 0x1d0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_00 = mode;  // CMD
    cb32:	str.w	r2, [r3, #444]	; 0x1bc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_01 = mode;  // CLK
    cb36:	str.w	r2, [r3, #448]	; 0x1c0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_02 = mode;  // DAT0
    cb3a:	str.w	r2, [r3, #452]	; 0x1c4
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_03 = mode;  // DAT1
    cb3e:	str.w	r2, [r3, #456]	; 0x1c8
  }
  // Disable GPIO.
  enableGPIO(false);

  // Set the SDHC SCK frequency.
  setSdclk(kHzSdClk);
    cb42:	bl	bf10 <setSdclk(unsigned long)>
    cb46:	bl	c0c8 <enableGPIO(bool) [clone .part.0]>

  // Enable GPIO.
  enableGPIO(true);
  m_initDone = true;
    cb4a:	movs	r3, #1
    cb4c:	strb	r3, [r7, #0]
  return true;
    cb4e:	b.n	c9c4 <SdioCard::begin(SdioConfig)+0x138>

  // Determine if High Speed mode is supported and set frequency.
  // Check status[16] for error 0XF or status[16] for new mode 0X1.
  uint8_t status[64];
  if (cardCMD6(0X00FFFFFF, status) && (2 & status[13]) &&
      cardCMD6(0X80FFFFF1, status) && (status[16] & 0XF) == 1) {
    cb50:	mov	r1, sp
    cb52:	ldr	r0, [pc, #140]	; (cbe0 <SdioCard::begin(SdioConfig)+0x354>)
    cb54:	bl	c7f0 <cardCMD6(unsigned long, unsigned char*)>
  SDHC_WML = SDHC_WML_RDWML(FIFO_WML) | SDHC_WML_WRWML(FIFO_WML);

  // Determine if High Speed mode is supported and set frequency.
  // Check status[16] for error 0XF or status[16] for new mode 0X1.
  uint8_t status[64];
  if (cardCMD6(0X00FFFFFF, status) && (2 & status[13]) &&
    cb58:	cmp	r0, #0
    cb5a:	beq.n	cb22 <SdioCard::begin(SdioConfig)+0x296>
      cardCMD6(0X80FFFFF1, status) && (status[16] & 0XF) == 1) {
    cb5c:	ldrb.w	r3, [sp, #16]
    cb60:	and.w	r3, r3, #15
    cb64:	cmp	r3, #1
    cb66:	bne.n	cb22 <SdioCard::begin(SdioConfig)+0x296>
    kHzSdClk = 50000;
    cb68:	movw	r0, #50000	; 0xc350
    cb6c:	b.n	cb26 <SdioCard::begin(SdioConfig)+0x29a>
    cb6e:	nop
    cb70:	.word	0x400d8000
    cb74:	.word	0x20000c1c
    cb78:	.word	0x20005b50
    cb7c:	.word	0x20005b40
    cb80:	.word	0x400fc000
    cb84:	.word	0x401f8000
    cb88:	.word	0x402c0000
    cb8c:	.word	0x01008000
    cb90:	.word	0x117f000b
    cb94:	.word	0x20008800
    cb98:	.word	0x0000be6d
    cb9c:	.word	0xe000e46e
    cba0:	.word	0xe000e10c
    cba4:	.word	0x081a0000
    cba8:	.word	0x40300000
    cbac:	.word	0x371a0000
    cbb0:	.word	0x20005b6c
    cbb4:	.word	0x29020000
    cbb8:	.word	0x20005b44
    cbbc:	.word	0x02090000
    cbc0:	.word	0x031a0000
    cbc4:	.word	0xffff0000
    cbc8:	.word	0x20005b54
    cbcc:	.word	0x09090000
    cbd0:	.word	0x20005b2c
    cbd4:	.word	0x0a090000
    cbd8:	.word	0x071b0000
    cbdc:	.word	0x061a0000
    cbe0:	.word	0x80fffff1
    cbe4:	.word	0x20005b28
    cbe8:	.word	0x000f4240
    cbec:	.word	0x20005b48

0000cbf0 <SdioCard::readData(unsigned char*)>:
bool SdioCard::readCSD(csd_t* csd) {
  memcpy(csd, &m_csd, 16);
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readData(uint8_t *dst) {
    cbf0:	push	{r3, r4, r5, lr}
  DBG_IRQSTAT();
  uint32_t *p32 = reinterpret_cast<uint32_t*>(dst);

  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_RTA)) {
    cbf2:	ldr	r3, [pc, #156]	; (cc90 <SdioCard::readData(unsigned char*)+0xa0>)
bool SdioCard::readCSD(csd_t* csd) {
  memcpy(csd, &m_csd, 16);
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readData(uint8_t *dst) {
    cbf4:	mov	r5, r1
  DBG_IRQSTAT();
  uint32_t *p32 = reinterpret_cast<uint32_t*>(dst);

  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_RTA)) {
    cbf6:	ldr	r2, [r3, #36]	; 0x24
    cbf8:	lsls	r4, r2, #22
    cbfa:	bmi.n	cc18 <SdioCard::readData(unsigned char*)+0x28>
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    cbfc:	ldr	r2, [r3, #40]	; 0x28
    cbfe:	bic.w	r2, r2, #65536	; 0x10000
    cc02:	str	r2, [r3, #40]	; 0x28
    noInterrupts();
    cc04:	cpsid	i
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
    cc06:	ldr	r2, [r3, #40]	; 0x28
    cc08:	orr.w	r2, r2, #131072	; 0x20000
    cc0c:	str	r2, [r3, #40]	; 0x28
    SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    cc0e:	ldr	r2, [r3, #40]	; 0x28
    cc10:	orr.w	r2, r2, #65536	; 0x10000
    cc14:	str	r2, [r3, #40]	; 0x28
    interrupts();
    cc16:	cpsie	i
  }
  if (waitTimeout(isBusyFifoRead)) {
    cc18:	ldr	r0, [pc, #120]	; (cc94 <SdioCard::readData(unsigned char*)+0xa4>)
    cc1a:	bl	c044 <waitTimeout(bool (*)())>
    cc1e:	cmp	r0, #0
    cc20:	bne.n	cc7e <SdioCard::readData(unsigned char*)+0x8e>
    cc22:	subs	r3, r5, #4
    return sdError(SD_CARD_ERROR_READ_FIFO);
  }
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BREN)) {
    cc24:	ldr	r1, [pc, #104]	; (cc90 <SdioCard::readData(unsigned char*)+0xa0>)
    cc26:	add.w	r5, r5, #508	; 0x1fc
    cc2a:	ldr	r2, [r1, #36]	; 0x24
    cc2c:	lsls	r0, r2, #20
    cc2e:	bpl.n	cc2a <SdioCard::readData(unsigned char*)+0x3a>
    cc30:	add.w	r0, r3, #64	; 0x40
    }
    for (uint32_t i = 0; i < FIFO_WML; i++) {
      p32[i] = SDHC_DATPORT;
    cc34:	ldr	r2, [r1, #32]
    cc36:	ldr	r4, [pc, #88]	; (cc90 <SdioCard::readData(unsigned char*)+0xa0>)
    cc38:	str.w	r2, [r3, #4]!
    return sdError(SD_CARD_ERROR_READ_FIFO);
  }
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BREN)) {
    }
    for (uint32_t i = 0; i < FIFO_WML; i++) {
    cc3c:	cmp	r0, r3
    cc3e:	bne.n	cc34 <SdioCard::readData(unsigned char*)+0x44>
    interrupts();
  }
  if (waitTimeout(isBusyFifoRead)) {
    return sdError(SD_CARD_ERROR_READ_FIFO);
  }
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    cc40:	cmp	r5, r0
    cc42:	mov	r3, r0
    cc44:	bne.n	cc2a <SdioCard::readData(unsigned char*)+0x3a>
    for (uint32_t i = 0; i < FIFO_WML; i++) {
      p32[i] = SDHC_DATPORT;
    }
    p32 += FIFO_WML;
  }
  if (waitTimeout(isBusyTransferComplete)) {
    cc46:	ldr	r0, [pc, #80]	; (cc98 <SdioCard::readData(unsigned char*)+0xa8>)
    cc48:	bl	c044 <waitTimeout(bool (*)())>
    cc4c:	cbnz	r0, cc6c <SdioCard::readData(unsigned char*)+0x7c>
    return sdError(SD_CARD_ERROR_READ_TIMEOUT);
  }
  m_irqstat = SDHC_IRQSTAT;
    cc4e:	ldr	r2, [r4, #48]	; 0x30
    cc50:	ldr	r3, [pc, #72]	; (cc9c <SdioCard::readData(unsigned char*)+0xac>)
    cc52:	str	r2, [r3, #0]
  SDHC_IRQSTAT = m_irqstat;
    cc54:	ldr	r2, [r3, #0]
    cc56:	str	r2, [r4, #48]	; 0x30
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    cc58:	ldr	r2, [r3, #0]
    cc5a:	lsls	r2, r2, #30
    cc5c:	bpl.n	cc8e <SdioCard::readData(unsigned char*)+0x9e>
    cc5e:	ldr	r3, [r3, #0]
    cc60:	ldr	r0, [pc, #60]	; (cca0 <SdioCard::readData(unsigned char*)+0xb0>)
    cc62:	ands	r0, r3
    cc64:	clz	r0, r0
    cc68:	lsrs	r0, r0, #5
    cc6a:	pop	{r3, r4, r5, pc}
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    cc6c:	ldr	r1, [pc, #52]	; (cca4 <SdioCard::readData(unsigned char*)+0xb4>)
    cc6e:	movs	r0, #29
  m_errorLine = line;
    cc70:	ldr	r3, [pc, #52]	; (cca8 <SdioCard::readData(unsigned char*)+0xb8>)
    cc72:	movw	r2, #759	; 0x2f7
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    cc76:	strb	r0, [r1, #0]
      p32[i] = SDHC_DATPORT;
    }
    p32 += FIFO_WML;
  }
  if (waitTimeout(isBusyTransferComplete)) {
    return sdError(SD_CARD_ERROR_READ_TIMEOUT);
    cc78:	movs	r0, #0
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    cc7a:	str	r2, [r3, #0]
    cc7c:	pop	{r3, r4, r5, pc}
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    cc7e:	ldr	r1, [pc, #36]	; (cca4 <SdioCard::readData(unsigned char*)+0xb4>)
    cc80:	movs	r4, #26
  m_errorLine = line;
    cc82:	ldr	r3, [pc, #36]	; (cca8 <SdioCard::readData(unsigned char*)+0xb8>)
    cc84:	mov.w	r2, #748	; 0x2ec
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
    SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    interrupts();
  }
  if (waitTimeout(isBusyFifoRead)) {
    return sdError(SD_CARD_ERROR_READ_FIFO);
    cc88:	movs	r0, #0
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    cc8a:	strb	r4, [r1, #0]
  m_errorLine = line;
    cc8c:	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_READ_TIMEOUT);
  }
  m_irqstat = SDHC_IRQSTAT;
  SDHC_IRQSTAT = m_irqstat;
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
    cc8e:	pop	{r3, r4, r5, pc}
    cc90:	.word	0x402c0000
    cc94:	.word	0x0000bed1
    cc98:	.word	0x0000bef9
    cc9c:	.word	0x20005b4c
    cca0:	.word	0x117f0000
    cca4:	.word	0x20000c1c
    cca8:	.word	0x20005b6c

0000ccac <SdioCard::readStart(unsigned long)>:
  }
  return true;
}
//------------------------------------------------------------------------------
// SDHC will do Auto CMD12 after count sectors.
bool SdioCard::readStart(uint32_t sector) {
    ccac:	push	{r4, lr}
  DBG_IRQSTAT();
  if (yieldTimeout(isBusyCMD13)) {
    ccae:	ldr	r0, [pc, #80]	; (cd00 <SdioCard::readStart(unsigned long)+0x54>)
  }
  return true;
}
//------------------------------------------------------------------------------
// SDHC will do Auto CMD12 after count sectors.
bool SdioCard::readStart(uint32_t sector) {
    ccb0:	mov	r4, r1
  DBG_IRQSTAT();
  if (yieldTimeout(isBusyCMD13)) {
    ccb2:	bl	c06c <yieldTimeout(bool (*)())>
    ccb6:	cbnz	r0, ccec <SdioCard::readStart(unsigned long)+0x40>
    return sdError(SD_CARD_ERROR_CMD13);
  }
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    ccb8:	ldr	r3, [pc, #72]	; (cd04 <SdioCard::readStart(unsigned long)+0x58>)
#if defined(__IMXRT1062__)
  // Infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
    ccba:	mov.w	r0, #512	; 0x200
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(0XFFFF) | SDHC_BLKATTR_BLKSIZE(512);
#endif  // defined(__IMXRT1062__)

  if (!cardCommand(CMD18_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    ccbe:	ldr	r1, [pc, #72]	; (cd08 <SdioCard::readStart(unsigned long)+0x5c>)
bool SdioCard::readStart(uint32_t sector) {
  DBG_IRQSTAT();
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    ccc0:	ldr	r2, [r3, #40]	; 0x28
    ccc2:	orr.w	r2, r2, #65536	; 0x10000
    ccc6:	str	r2, [r3, #40]	; 0x28
#if defined(__IMXRT1062__)
  // Infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
    ccc8:	str	r0, [r3, #4]
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(0XFFFF) | SDHC_BLKATTR_BLKSIZE(512);
#endif  // defined(__IMXRT1062__)

  if (!cardCommand(CMD18_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    ccca:	ldrb	r3, [r1, #0]
    cccc:	cbnz	r3, cce8 <SdioCard::readStart(unsigned long)+0x3c>
    ccce:	lsls	r1, r4, #9
    ccd0:	ldr	r0, [pc, #56]	; (cd0c <SdioCard::readStart(unsigned long)+0x60>)
    ccd2:	bl	c12c <cardCommand(unsigned long, unsigned long)>
    ccd6:	cbnz	r0, cce6 <SdioCard::readStart(unsigned long)+0x3a>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    ccd8:	ldr	r1, [pc, #52]	; (cd10 <SdioCard::readStart(unsigned long)+0x64>)
    ccda:	movs	r4, #12
  m_errorLine = line;
    ccdc:	ldr	r3, [pc, #52]	; (cd14 <SdioCard::readStart(unsigned long)+0x68>)
    ccde:	mov.w	r2, #848	; 0x350
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    cce2:	strb	r4, [r1, #0]
  m_errorLine = line;
    cce4:	str	r2, [r3, #0]

  if (!cardCommand(CMD18_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    return sdError(SD_CARD_ERROR_CMD18);
  }
  return true;
}
    cce6:	pop	{r4, pc}
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(0XFFFF) | SDHC_BLKATTR_BLKSIZE(512);
#endif  // defined(__IMXRT1062__)

  if (!cardCommand(CMD18_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    cce8:	mov	r1, r4
    ccea:	b.n	ccd0 <SdioCard::readStart(unsigned long)+0x24>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    ccec:	ldr	r1, [pc, #32]	; (cd10 <SdioCard::readStart(unsigned long)+0x64>)
    ccee:	movs	r0, #10
  m_errorLine = line;
    ccf0:	ldr	r3, [pc, #32]	; (cd14 <SdioCard::readStart(unsigned long)+0x68>)
    ccf2:	mov.w	r2, #836	; 0x344
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    ccf6:	strb	r0, [r1, #0]
//------------------------------------------------------------------------------
// SDHC will do Auto CMD12 after count sectors.
bool SdioCard::readStart(uint32_t sector) {
  DBG_IRQSTAT();
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
    ccf8:	movs	r0, #0
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    ccfa:	str	r2, [r3, #0]
//------------------------------------------------------------------------------
// SDHC will do Auto CMD12 after count sectors.
bool SdioCard::readStart(uint32_t sector) {
  DBG_IRQSTAT();
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
    ccfc:	pop	{r4, pc}
    ccfe:	nop
    cd00:	.word	0x0000c211
    cd04:	.word	0x402c0000
    cd08:	.word	0x20005b40
    cd0c:	.word	0x123a0030
    cd10:	.word	0x20000c1c
    cd14:	.word	0x20005b6c

0000cd18 <SdioCard::readSector(unsigned long, unsigned char*)>:
bool SdioCard::readOCR(uint32_t* ocr) {
  *ocr = m_ocr;
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readSector(uint32_t sector, uint8_t* dst) {
    cd18:	push	{r4, r5, r6, lr}
  if (m_sdioConfig.useDma()) {
    cd1a:	ldrb	r3, [r0, #8]
bool SdioCard::readOCR(uint32_t* ocr) {
  *ocr = m_ocr;
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readSector(uint32_t sector, uint8_t* dst) {
    cd1c:	sub.w	sp, sp, #512	; 0x200
    cd20:	mov	r5, r2
  if (m_sdioConfig.useDma()) {
    cd22:	lsls	r4, r3, #31
    cd24:	bpl.n	cd4a <SdioCard::readSector(unsigned long, unsigned char*)+0x32>
    uint8_t aligned[512];

    uint8_t* ptr = (uint32_t)dst & 3 ? aligned : dst;
    cd26:	lsls	r3, r2, #30
    cd28:	beq.n	cd66 <SdioCard::readSector(unsigned long, unsigned char*)+0x4e>

    if (!rdWrSectors(CMD17_DMA_XFERTYP, sector, ptr, 1)) {
    cd2a:	movs	r3, #1
    cd2c:	ldr	r0, [pc, #140]	; (cdbc <SdioCard::readSector(unsigned long, unsigned char*)+0xa4>)
    cd2e:	mov	r2, sp
    cd30:	bl	c278 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    cd34:	cbz	r0, cd72 <SdioCard::readSector(unsigned long, unsigned char*)+0x5a>
      return sdError(SD_CARD_ERROR_CMD17);
    }
    if (ptr != dst) {
      memcpy(dst, aligned, 512);
    cd36:	mov	r1, sp
    cd38:	mov	r0, r5
    cd3a:	mov.w	r2, #512	; 0x200
    cd3e:	bl	d064 <memcpy>
      }
    }
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
    m_curSector++;
  }
  return true;
    cd42:	movs	r0, #1
}
    cd44:	add.w	sp, sp, #512	; 0x200
    cd48:	pop	{r4, r5, r6, pc}
    }
    if (ptr != dst) {
      memcpy(dst, aligned, 512);
    }
  } else {
    if (m_curState != READ_STATE || sector != m_curSector) {
    cd4a:	ldrb	r3, [r0, #9]
    cd4c:	mov	r4, r0
    cd4e:	mov	r6, r1
    cd50:	cmp	r3, #1
    cd52:	beq.n	cd88 <SdioCard::readSector(unsigned long, unsigned char*)+0x70>
      if (!syncDevice()) {
    cd54:	ldr	r3, [r4, #0]
    cd56:	mov	r0, r4
    cd58:	ldr	r3, [r3, #20]
    cd5a:	blx	r3
    cd5c:	cbnz	r0, cda6 <SdioCard::readSector(unsigned long, unsigned char*)+0x8e>
        return false;
    cd5e:	movs	r0, #0
    }
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
    m_curSector++;
  }
  return true;
}
    cd60:	add.w	sp, sp, #512	; 0x200
    cd64:	pop	{r4, r5, r6, pc}
  if (m_sdioConfig.useDma()) {
    uint8_t aligned[512];

    uint8_t* ptr = (uint32_t)dst & 3 ? aligned : dst;

    if (!rdWrSectors(CMD17_DMA_XFERTYP, sector, ptr, 1)) {
    cd66:	movs	r3, #1
    cd68:	ldr	r0, [pc, #80]	; (cdbc <SdioCard::readSector(unsigned long, unsigned char*)+0xa4>)
    cd6a:	bl	c278 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    cd6e:	cmp	r0, #0
    cd70:	bne.n	cd42 <SdioCard::readSector(unsigned long, unsigned char*)+0x2a>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    cd72:	ldr	r1, [pc, #76]	; (cdc0 <SdioCard::readSector(unsigned long, unsigned char*)+0xa8>)
    cd74:	movs	r0, #11
  m_errorLine = line;
    cd76:	ldr	r3, [pc, #76]	; (cdc4 <SdioCard::readSector(unsigned long, unsigned char*)+0xac>)
    cd78:	movw	r2, #778	; 0x30a
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    cd7c:	strb	r0, [r1, #0]
    uint8_t aligned[512];

    uint8_t* ptr = (uint32_t)dst & 3 ? aligned : dst;

    if (!rdWrSectors(CMD17_DMA_XFERTYP, sector, ptr, 1)) {
      return sdError(SD_CARD_ERROR_CMD17);
    cd7e:	movs	r0, #0
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    cd80:	str	r2, [r3, #0]
    }
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
    m_curSector++;
  }
  return true;
}
    cd82:	add.w	sp, sp, #512	; 0x200
    cd86:	pop	{r4, r5, r6, pc}
    }
    if (ptr != dst) {
      memcpy(dst, aligned, 512);
    }
  } else {
    if (m_curState != READ_STATE || sector != m_curSector) {
    cd88:	ldr	r3, [r0, #4]
    cd8a:	cmp	r1, r3
    cd8c:	bne.n	cd54 <SdioCard::readSector(unsigned long, unsigned char*)+0x3c>
        return false;
      }
      m_curSector = sector;
      m_curState = READ_STATE;
    }
    if (!readData(dst)) {
    cd8e:	mov	r1, r5
    cd90:	mov	r0, r4
    cd92:	bl	cbf0 <SdioCard::readData(unsigned char*)>
    cd96:	cmp	r0, #0
    cd98:	beq.n	cd5e <SdioCard::readSector(unsigned long, unsigned char*)+0x46>
      if (!syncDevice()) {
        return false;
      }
    }
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
    m_curSector++;
    cd9a:	ldr	r3, [r4, #4]
    cd9c:	adds	r3, #1
    cd9e:	str	r3, [r4, #4]
  }
  return true;
}
    cda0:	add.w	sp, sp, #512	; 0x200
    cda4:	pop	{r4, r5, r6, pc}
  } else {
    if (m_curState != READ_STATE || sector != m_curSector) {
      if (!syncDevice()) {
        return false;
      }
      if (!readStart(sector)) {
    cda6:	mov	r1, r6
    cda8:	mov	r0, r4
    cdaa:	bl	ccac <SdioCard::readStart(unsigned long)>
    cdae:	cmp	r0, #0
    cdb0:	beq.n	cd5e <SdioCard::readSector(unsigned long, unsigned char*)+0x46>
        return false;
      }
      m_curSector = sector;
      m_curState = READ_STATE;
    cdb2:	movs	r3, #1
        return false;
      }
      if (!readStart(sector)) {
        return false;
      }
      m_curSector = sector;
    cdb4:	str	r6, [r4, #4]
      m_curState = READ_STATE;
    cdb6:	strb	r3, [r4, #9]
    cdb8:	b.n	cd8e <SdioCard::readSector(unsigned long, unsigned char*)+0x76>
    cdba:	nop
    cdbc:	.word	0x113a0011
    cdc0:	.word	0x20000c1c
    cdc4:	.word	0x20005b6c

0000cdc8 <SdSpiArduinoDriver::activate()>:
#include "SdSpiDriver.h"
#if defined(SD_USE_CUSTOM_SPI) &&  defined(__arm__) && defined(CORE_TEENSY)
#define USE_BLOCK_TRANSFER 1
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::activate() {
  m_spi->beginTransaction(m_spiSettings);
    cdc8:	ldr	r3, [r0, #0]
    cdca:	ldr	r1, [r0, #4]
 */
#include "SdSpiDriver.h"
#if defined(SD_USE_CUSTOM_SPI) &&  defined(__arm__) && defined(CORE_TEENSY)
#define USE_BLOCK_TRANSFER 1
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::activate() {
    cdcc:	push	{r4, r5}

	// Before using SPI.transfer() or asserting chip select pins,
	// this function is used to gain exclusive access to the SPI bus
	// and configure the correct settings.
	void beginTransaction(SPISettings settings) {
		if (interruptMasksUsed) {
    cdce:	ldrb	r2, [r3, #19]
    cdd0:	ldr	r4, [r0, #8]
    cdd2:	cmp	r2, #0
    cdd4:	beq.n	ce28 <SdSpiArduinoDriver::activate()+0x60>
			__disable_irq();
    cdd6:	cpsid	i
			if (interruptMasksUsed & 0x01) {
    cdd8:	ldrb	r2, [r3, #19]
    cdda:	lsls	r5, r2, #31
    cddc:	bpl.n	cdec <SdSpiArduinoDriver::activate()+0x24>
				interruptSave[0] = NVIC_ICER0 & interruptMask[0];
    cdde:	ldr	r0, [pc, #204]	; (ceac <SdSpiArduinoDriver::activate()+0xe4>)
    cde0:	ldr	r2, [r3, #20]
    cde2:	ldr	r5, [r0, #0]
    cde4:	ands	r2, r5
    cde6:	str	r2, [r3, #40]	; 0x28
				NVIC_ICER0 = interruptSave[0];
    cde8:	str	r2, [r0, #0]
    cdea:	ldrb	r2, [r3, #19]
			}
			if (interruptMasksUsed & 0x02) {
    cdec:	lsls	r0, r2, #30
    cdee:	bpl.n	cdfe <SdSpiArduinoDriver::activate()+0x36>
				interruptSave[1] = NVIC_ICER1 & interruptMask[1];
    cdf0:	ldr	r0, [pc, #188]	; (ceb0 <SdSpiArduinoDriver::activate()+0xe8>)
    cdf2:	ldr	r2, [r3, #24]
    cdf4:	ldr	r5, [r0, #0]
    cdf6:	ands	r2, r5
    cdf8:	str	r2, [r3, #44]	; 0x2c
				NVIC_ICER1 = interruptSave[1];
    cdfa:	str	r2, [r0, #0]
    cdfc:	ldrb	r2, [r3, #19]
			}
			if (interruptMasksUsed & 0x04) {
    cdfe:	lsls	r5, r2, #29
    ce00:	bpl.n	ce10 <SdSpiArduinoDriver::activate()+0x48>
				interruptSave[2] = NVIC_ICER2 & interruptMask[2];
    ce02:	ldr	r0, [pc, #176]	; (ceb4 <SdSpiArduinoDriver::activate()+0xec>)
    ce04:	ldr	r2, [r3, #28]
    ce06:	ldr	r5, [r0, #0]
    ce08:	ands	r2, r5
    ce0a:	str	r2, [r3, #48]	; 0x30
				NVIC_ICER2 = interruptSave[2];
    ce0c:	str	r2, [r0, #0]
    ce0e:	ldrb	r2, [r3, #19]
			}
			if (interruptMasksUsed & 0x08) {
    ce10:	lsls	r0, r2, #28
    ce12:	bpl.n	ce22 <SdSpiArduinoDriver::activate()+0x5a>
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
    ce14:	ldr	r0, [pc, #160]	; (ceb8 <SdSpiArduinoDriver::activate()+0xf0>)
    ce16:	ldr	r2, [r3, #32]
    ce18:	ldr	r5, [r0, #0]
    ce1a:	ands	r2, r5
    ce1c:	str	r2, [r3, #52]	; 0x34
				NVIC_ICER3 = interruptSave[3];
    ce1e:	str	r2, [r0, #0]
    ce20:	ldrb	r2, [r3, #19]
			}
			if (interruptMasksUsed & 0x10) {
    ce22:	lsls	r2, r2, #27
    ce24:	bmi.n	ce7e <SdSpiArduinoDriver::activate()+0xb6>
				interruptSave[4] = NVIC_ICER4 & interruptMask[4];
				NVIC_ICER4 = interruptSave[4];
			}
			__enable_irq();
    ce26:	cpsie	i
		}
		inTransactionFlag = 1;
		#endif

		//printf("trans\n");
		if (settings.clock() != _clock) {
    ce28:	ldr	r2, [r3, #8]
    ce2a:	cmp	r2, r1
    ce2c:	beq.n	ce8c <SdSpiArduinoDriver::activate()+0xc4>
						     396000000}; // PLL2 PFD2				

		    // First save away the new settings..
		    _clock = settings.clock();

			uint32_t cbcmr = CCM_CBCMR;
    ce2e:	ldr	r2, [pc, #140]	; (cebc <SdSpiArduinoDriver::activate()+0xf4>)
						     720000000,  // PLL3 PFD0
						     528000000,  // PLL2
						     396000000}; // PLL2 PFD2				

		    // First save away the new settings..
		    _clock = settings.clock();
    ce30:	str	r1, [r3, #8]

			uint32_t cbcmr = CCM_CBCMR;
    ce32:	ldr	r2, [r2, #24]
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
    ce34:	ldr	r0, [pc, #136]	; (cec0 <SdSpiArduinoDriver::activate()+0xf8>)
    ce36:	ubfx	r5, r2, #4, #2
    ce3a:	ubfx	r2, r2, #26, #3
    ce3e:	ldr.w	r0, [r0, r5, lsl #2]
    ce42:	adds	r2, #1
    ce44:	udiv	r0, r0, r2
			
			uint32_t d, div;		
			d = _clock ? clkhz/_clock : clkhz;
    ce48:	cbz	r1, ce7a <SdSpiArduinoDriver::activate()+0xb2>
    ce4a:	udiv	r2, r0, r1

			if (d && clkhz/d > _clock) d++;
    ce4e:	cbz	r2, ce62 <SdSpiArduinoDriver::activate()+0x9a>
    ce50:	udiv	r0, r0, r2
    ce54:	cmp	r0, r1
    ce56:	it	hi
    ce58:	addhi	r2, #1
			if (d > 257) d= 257;  // max div
    ce5a:	cmp.w	r2, #258	; 0x102
    ce5e:	bcc.n	ce90 <SdSpiArduinoDriver::activate()+0xc8>
    ce60:	ldr	r2, [pc, #96]	; (cec4 <SdSpiArduinoDriver::activate()+0xfc>)
				div = d-2;
			} else {
				div =0;
			}
	
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);
    ce62:	str	r2, [r3, #12]
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
private:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    ce64:	ldr	r3, [r3, #0]
	
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);

		} 
		//Serial.printf("SPI.beginTransaction CCR:%x TCR:%x\n", _ccr, settings.tcr);
		port().CR = 0;
    ce66:	movs	r5, #0
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
    ce68:	movs	r0, #3
		port().CCR = _ccr;
		port().TCR = settings.tcr;
		port().CR = LPSPI_CR_MEN;
    ce6a:	movs	r1, #1
	
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);

		} 
		//Serial.printf("SPI.beginTransaction CCR:%x TCR:%x\n", _ccr, settings.tcr);
		port().CR = 0;
    ce6c:	str	r5, [r3, #16]
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
    ce6e:	str	r0, [r3, #36]	; 0x24
		port().CCR = _ccr;
    ce70:	str	r2, [r3, #64]	; 0x40
		port().TCR = settings.tcr;
    ce72:	str	r4, [r3, #96]	; 0x60
		port().CR = LPSPI_CR_MEN;
    ce74:	str	r1, [r3, #16]
  m_spi->beginTransaction(m_spiSettings);
}
    ce76:	pop	{r4, r5}
    ce78:	bx	lr

			uint32_t cbcmr = CCM_CBCMR;
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
			
			uint32_t d, div;		
			d = _clock ? clkhz/_clock : clkhz;
    ce7a:	mov	r2, r0
    ce7c:	b.n	ce4e <SdSpiArduinoDriver::activate()+0x86>
			if (interruptMasksUsed & 0x08) {
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
				NVIC_ICER3 = interruptSave[3];
			}
			if (interruptMasksUsed & 0x10) {
				interruptSave[4] = NVIC_ICER4 & interruptMask[4];
    ce7e:	ldr	r0, [pc, #72]	; (cec8 <SdSpiArduinoDriver::activate()+0x100>)
    ce80:	ldr	r2, [r3, #36]	; 0x24
    ce82:	ldr	r5, [r0, #0]
    ce84:	ands	r2, r5
    ce86:	str	r2, [r3, #56]	; 0x38
				NVIC_ICER4 = interruptSave[4];
    ce88:	str	r2, [r0, #0]
    ce8a:	b.n	ce26 <SdSpiArduinoDriver::activate()+0x5e>
    ce8c:	ldr	r2, [r3, #12]
    ce8e:	b.n	ce64 <SdSpiArduinoDriver::activate()+0x9c>
			uint32_t d, div;		
			d = _clock ? clkhz/_clock : clkhz;

			if (d && clkhz/d > _clock) d++;
			if (d > 257) d= 257;  // max div
			if (d > 2) {
    ce90:	cmp	r2, #2
    ce92:	it	ls
    ce94:	movls	r2, #0
    ce96:	bls.n	ce62 <SdSpiArduinoDriver::activate()+0x9a>
    ce98:	subs	r2, #2
    ce9a:	lsrs	r0, r2, #1
    ce9c:	lsls	r1, r0, #16
    ce9e:	orr.w	r2, r2, r0, lsl #8
    cea2:	and.w	r1, r1, #16711680	; 0xff0000
    cea6:	orrs	r2, r1
    cea8:	b.n	ce62 <SdSpiArduinoDriver::activate()+0x9a>
    ceaa:	nop
    ceac:	.word	0xe000e180
    ceb0:	.word	0xe000e184
    ceb4:	.word	0xe000e188
    ceb8:	.word	0xe000e18c
    cebc:	.word	0x400fc000
    cec0:	.word	0x200003c8
    cec4:	.word	0x007f7fff
    cec8:	.word	0xe000e190

0000cecc <SdSpiArduinoDriver::begin(SdSpiConfig)>:
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::begin(SdSpiConfig spiConfig) {
    cecc:	push	{lr}
    cece:	sub	sp, #20
    ced0:	add.w	lr, sp, #16
    ced4:	stmdb	lr, {r1, r2, r3}
    ced8:	ldr	r3, [sp, #12]
  if (spiConfig.spiPort) {
    ceda:	cbz	r3, ceea <SdSpiArduinoDriver::begin(SdSpiConfig)+0x1e>
    m_spi = spiConfig.spiPort;
    cedc:	str	r3, [r0, #0]
    m_spi->setSCK(SDCARD_SCK_PIN);
#endif  // defined(SDCARD_SPI) && defined(SDCARD_SS_PIN)
  } else {
    m_spi = &SPI;
  }
  m_spi->begin();
    cede:	mov	r0, r3
}
    cee0:	add	sp, #20
    cee2:	ldr.w	lr, [sp], #4
    m_spi->setSCK(SDCARD_SCK_PIN);
#endif  // defined(SDCARD_SPI) && defined(SDCARD_SS_PIN)
  } else {
    m_spi = &SPI;
  }
  m_spi->begin();
    cee6:	b.w	7ae4 <SPIClass::begin()>
    m_spi->setMISO(SDCARD_MISO_PIN);
    m_spi->setMOSI(SDCARD_MOSI_PIN);
    m_spi->setSCK(SDCARD_SCK_PIN);
#endif  // defined(SDCARD_SPI) && defined(SDCARD_SS_PIN)
  } else {
    m_spi = &SPI;
    ceea:	ldr	r2, [pc, #16]	; (cefc <SdSpiArduinoDriver::begin(SdSpiConfig)+0x30>)
    ceec:	mov	r3, r2
    ceee:	str	r2, [r0, #0]
  }
  m_spi->begin();
    cef0:	mov	r0, r3
}
    cef2:	add	sp, #20
    cef4:	ldr.w	lr, [sp], #4
    m_spi->setSCK(SDCARD_SCK_PIN);
#endif  // defined(SDCARD_SPI) && defined(SDCARD_SS_PIN)
  } else {
    m_spi = &SPI;
  }
  m_spi->begin();
    cef8:	b.w	7ae4 <SPIClass::begin()>
    cefc:	.word	0x20000bcc

0000cf00 <SdSpiArduinoDriver::deactivate()>:
}
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::deactivate() {
  m_spi->endTransaction();
    cf00:	ldr	r2, [r0, #0]
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 0;
		#endif
		if (interruptMasksUsed) {
    cf02:	ldrb	r3, [r2, #19]
    cf04:	cbz	r3, cf40 <SdSpiArduinoDriver::deactivate()+0x40>
			if (interruptMasksUsed & 0x01) NVIC_ISER0 = interruptSave[0];
    cf06:	lsls	r0, r3, #31
    cf08:	bpl.n	cf12 <SdSpiArduinoDriver::deactivate()+0x12>
    cf0a:	ldr	r3, [pc, #56]	; (cf44 <SdSpiArduinoDriver::deactivate()+0x44>)
    cf0c:	ldr	r1, [r2, #40]	; 0x28
    cf0e:	str	r1, [r3, #0]
    cf10:	ldrb	r3, [r2, #19]
			if (interruptMasksUsed & 0x02) NVIC_ISER1 = interruptSave[1];
    cf12:	lsls	r1, r3, #30
    cf14:	bpl.n	cf1e <SdSpiArduinoDriver::deactivate()+0x1e>
    cf16:	ldr	r3, [pc, #48]	; (cf48 <SdSpiArduinoDriver::deactivate()+0x48>)
    cf18:	ldr	r1, [r2, #44]	; 0x2c
    cf1a:	str	r1, [r3, #0]
    cf1c:	ldrb	r3, [r2, #19]
			if (interruptMasksUsed & 0x04) NVIC_ISER2 = interruptSave[2];
    cf1e:	lsls	r0, r3, #29
    cf20:	bpl.n	cf2a <SdSpiArduinoDriver::deactivate()+0x2a>
    cf22:	ldr	r3, [pc, #40]	; (cf4c <SdSpiArduinoDriver::deactivate()+0x4c>)
    cf24:	ldr	r1, [r2, #48]	; 0x30
    cf26:	str	r1, [r3, #0]
    cf28:	ldrb	r3, [r2, #19]
			if (interruptMasksUsed & 0x08) NVIC_ISER3 = interruptSave[3];
    cf2a:	lsls	r1, r3, #28
    cf2c:	bpl.n	cf36 <SdSpiArduinoDriver::deactivate()+0x36>
    cf2e:	ldr	r3, [pc, #32]	; (cf50 <SdSpiArduinoDriver::deactivate()+0x50>)
    cf30:	ldr	r1, [r2, #52]	; 0x34
    cf32:	str	r1, [r3, #0]
    cf34:	ldrb	r3, [r2, #19]
			if (interruptMasksUsed & 0x10) NVIC_ISER4 = interruptSave[4];
    cf36:	lsls	r3, r3, #27
    cf38:	bpl.n	cf40 <SdSpiArduinoDriver::deactivate()+0x40>
    cf3a:	ldr	r2, [r2, #56]	; 0x38
    cf3c:	ldr	r3, [pc, #20]	; (cf54 <SdSpiArduinoDriver::deactivate()+0x54>)
    cf3e:	str	r2, [r3, #0]
    cf40:	bx	lr
    cf42:	nop
    cf44:	.word	0xe000e100
    cf48:	.word	0xe000e104
    cf4c:	.word	0xe000e108
    cf50:	.word	0xe000e10c
    cf54:	.word	0xe000e110

0000cf58 <SdSpiArduinoDriver::receive()>:
}
//------------------------------------------------------------------------------
uint8_t SdSpiArduinoDriver::receive() {
    cf58:	ldr	r2, [r0, #0]
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    cf5a:	movs	r3, #255	; 0xff
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
private:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    cf5c:	ldr	r2, [r2, #0]
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    cf5e:	str	r3, [r2, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    cf60:	ldr	r3, [r2, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    cf62:	tst.w	r3, #2031616	; 0x1f0000
    cf66:	beq.n	cf60 <SdSpiArduinoDriver::receive()+0x8>
    cf68:	ldr	r0, [r2, #116]	; 0x74
  return m_spi->transfer(0XFF);
}
    cf6a:	uxtb	r0, r0
    cf6c:	bx	lr
    cf6e:	nop

0000cf70 <SdSpiArduinoDriver::receive(unsigned char*, unsigned int)>:
//------------------------------------------------------------------------------
uint8_t SdSpiArduinoDriver::receive(uint8_t* buf, size_t count) {
    cf70:	push	{r4, r5, r6, lr}
    cf72:	mov	r4, r1
    cf74:	mov	r6, r2
    cf76:	mov	r5, r0
#if USE_BLOCK_TRANSFER
  memset(buf, 0XFF, count);
    cf78:	movs	r1, #255	; 0xff
    cf7a:	mov	r0, r4
    cf7c:	bl	10d7c <memset>
				transfer16(buf, buf, count >> 1);
				return;
			}
		}
#endif
		transfer(buf, buf, count);
    cf80:	ldr	r0, [r5, #0]
    cf82:	mov	r3, r6
    cf84:	mov	r2, r4
    cf86:	mov	r1, r4
    cf88:	bl	7e4c <SPIClass::transfer(void const*, void*, unsigned int)>
  for (size_t i = 0; i < count; i++) {
    buf[i] = m_spi->transfer(0XFF);
  }
#endif  // USE_BLOCK_TRANSFER
  return 0;
}
    cf8c:	movs	r0, #0
    cf8e:	pop	{r4, r5, r6, pc}

0000cf90 <SdSpiArduinoDriver::send(unsigned char)>:
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::send(uint8_t data) {
    cf90:	ldr	r3, [r0, #0]
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
private:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    cf92:	ldr	r2, [r3, #0]
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    cf94:	str	r1, [r2, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    cf96:	ldr	r3, [r2, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    cf98:	tst.w	r3, #2031616	; 0x1f0000
    cf9c:	beq.n	cf96 <SdSpiArduinoDriver::send(unsigned char)+0x6>
    cf9e:	ldr	r3, [r2, #116]	; 0x74
    cfa0:	bx	lr
    cfa2:	nop

0000cfa4 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)>:
  m_spi->transfer(data);
}
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::send(const uint8_t* buf , size_t count) {
    cfa4:	push	{r4, r5, lr}
#if USE_BLOCK_TRANSFER
  uint32_t tmp[128];
  if (0 < count && count <= 512) {
    cfa6:	subs	r5, r2, #1
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::send(uint8_t data) {
  m_spi->transfer(data);
}
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::send(const uint8_t* buf , size_t count) {
    cfa8:	sub.w	sp, sp, #516	; 0x204
    cfac:	mov	r3, r2
#if USE_BLOCK_TRANSFER
  uint32_t tmp[128];
  if (0 < count && count <= 512) {
    cfae:	cmp.w	r5, #512	; 0x200
    cfb2:	bcc.n	cfd6 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x32>
    memcpy(tmp, buf, count);
    m_spi->transfer(tmp, count);
    return;
  }
#endif  // USE_BLOCK_TRANSFER
  for (size_t i = 0; i < count; i++) {
    cfb4:	cbz	r2, cfd0 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x2c>
    cfb6:	ldr	r2, [r0, #0]
    cfb8:	adds	r0, r1, r3
    cfba:	ldr	r2, [r2, #0]
    m_spi->transfer(buf[i]);
    cfbc:	ldrb.w	r3, [r1], #1
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    cfc0:	str	r3, [r2, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    cfc2:	ldr	r3, [r2, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    cfc4:	tst.w	r3, #2031616	; 0x1f0000
    cfc8:	beq.n	cfc2 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x1e>
    memcpy(tmp, buf, count);
    m_spi->transfer(tmp, count);
    return;
  }
#endif  // USE_BLOCK_TRANSFER
  for (size_t i = 0; i < count; i++) {
    cfca:	cmp	r1, r0
    cfcc:	ldr	r3, [r2, #116]	; 0x74
    cfce:	bne.n	cfbc <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x18>
    m_spi->transfer(buf[i]);
  }
}
    cfd0:	add.w	sp, sp, #516	; 0x204
    cfd4:	pop	{r4, r5, pc}
    cfd6:	mov	r4, r2
    cfd8:	mov	r5, r0
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::send(const uint8_t* buf , size_t count) {
#if USE_BLOCK_TRANSFER
  uint32_t tmp[128];
  if (0 < count && count <= 512) {
    memcpy(tmp, buf, count);
    cfda:	mov	r0, sp
    cfdc:	bl	d064 <memcpy>
				transfer16(buf, buf, count >> 1);
				return;
			}
		}
#endif
		transfer(buf, buf, count);
    cfe0:	mov	r3, r4
    cfe2:	mov	r2, sp
    cfe4:	mov	r1, sp
    cfe6:	ldr	r0, [r5, #0]
    cfe8:	bl	7e4c <SPIClass::transfer(void const*, void*, unsigned int)>
  }
#endif  // USE_BLOCK_TRANSFER
  for (size_t i = 0; i < count; i++) {
    m_spi->transfer(buf[i]);
  }
}
    cfec:	add.w	sp, sp, #516	; 0x204
    cff0:	pop	{r4, r5, pc}
    cff2:	nop

0000cff4 <sdCsInit(unsigned char)>:
#include "SdSpiDriver.h"
#if ENABLE_ARDUINO_FEATURES
#if SD_CHIP_SELECT_MODE == 0
//------------------------------------------------------------------------------
void sdCsInit(SdCsPin_t pin) {
  pinMode(pin, OUTPUT);
    cff4:	movs	r1, #1
    cff6:	b.w	ec44 <pinMode>
    cffa:	nop

0000cffc <sdCsWrite(unsigned char, bool)>:
}
//------------------------------------------------------------------------------
void sdCsWrite(SdCsPin_t pin, bool level) {
  digitalWrite(pin, level);
    cffc:	b.w	ec38 <digitalWrite>

0000d000 <SDClass::~SDClass()>:
	char *filename;
};



class SDClass : public FS
    d000:	bx	lr
    d002:	nop

0000d004 <_GLOBAL__sub_I_SD>:
 */

#include <Arduino.h>
#include <SD.h>

SDClass SD;
    d004:	push	{r4, r5, r6, r7}
{
public:
	SDClass() { }
    d006:	ldr	r3, [pc, #64]	; (d048 <_GLOBAL__sub_I_SD+0x44>)
    d008:	movs	r4, #0
    d00a:	ldr	r7, [pc, #64]	; (d04c <_GLOBAL__sub_I_SD+0x48>)
		init_AlwaysInline(MSBFIRST, SPI_MODE0);
	}
private:
	void init_AlwaysInline(uint8_t bitOrder, uint8_t dataMode)
	  __attribute__((__always_inline__)) {
			tcr = LPSPI_TCR_FRAMESZ(7);    // TCR has polarity and bit order too
    d00c:	movs	r6, #7
#else  // HAS_SDIO_CLASS
class SdSpiCard {
#endif  // HAS_SDIO_CLASS
 public:
  /** Construct an instance of SdSpiCard. */
  SdSpiCard() : m_errorCode(SD_CARD_ERROR_INIT_NOT_CALLED), m_type(0) {}
    d00e:	movs	r5, #40	; 0x28
    d010:	ldr	r2, [pc, #60]	; (d050 <_GLOBAL__sub_I_SD+0x4c>)
    d012:	ldr	r1, [pc, #64]	; (d054 <_GLOBAL__sub_I_SD+0x50>)
    d014:	mov	r0, r3
    d016:	str	r7, [r3, #0]
public:
	SPISettings(uint32_t clockIn, uint8_t bitOrderIn, uint8_t dataModeIn) : _clock(clockIn) {
		init_AlwaysInline(bitOrderIn, dataModeIn);
	}

	SPISettings() : _clock(4000000) {
    d018:	ldr	r7, [pc, #60]	; (d058 <_GLOBAL__sub_I_SD+0x54>)
    d01a:	str.w	r2, [r3, #1164]	; 0x48c
    d01e:	str.w	r1, [r3, #1176]	; 0x498
    d022:	str.w	r7, [r3, #1184]	; 0x4a0
		init_AlwaysInline(MSBFIRST, SPI_MODE0);
	}
private:
	void init_AlwaysInline(uint8_t bitOrder, uint8_t dataMode)
	  __attribute__((__always_inline__)) {
			tcr = LPSPI_TCR_FRAMESZ(7);    // TCR has polarity and bit order too
    d026:	str.w	r6, [r3, #1188]	; 0x4a4
    d02a:	strb.w	r5, [r3, #1199]	; 0x4af
    d02e:	str.w	r4, [r3, #1148]	; 0x47c
    d032:	str.w	r4, [r3, #1152]	; 0x480
 * \class SdioConfig
 * \brief SDIO card configuration.
 */
class SdioConfig {
 public:
  SdioConfig() : m_options(FIFO_SDIO) {}
    d036:	strb.w	r4, [r3, #1172]	; 0x494
    d03a:	strb.w	r4, [r3, #1202]	; 0x4b2
    d03e:	ldr	r2, [pc, #28]	; (d05c <_GLOBAL__sub_I_SD+0x58>)
    d040:	ldr	r1, [pc, #28]	; (d060 <_GLOBAL__sub_I_SD+0x5c>)
    d042:	pop	{r4, r5, r6, r7}
    d044:	b.w	f920 <__aeabi_atexit>
    d048:	.word	0x20005b70
    d04c:	.word	0x20000134
    d050:	.word	0x200004b0
    d054:	.word	0x20000458
    d058:	.word	0x003d0900
    d05c:	.word	0x20000ba4
    d060:	.word	0x0000d001

0000d064 <memcpy>:
	@ r1: src
	@ r2: len
#ifdef __ARM_FEATURE_UNALIGNED
	/* In case of UNALIGNED access supported, ip is not used in
	   function body.  */
	mov	ip, r0
    d064:	mov	ip, r0
#else
	push	{r0}
#endif
	orr	r3, r1, r0
    d066:	orr.w	r3, r1, r0
	ands	r3, r3, #3
    d06a:	ands.w	r3, r3, #3
	bne	.Lmisaligned_copy
    d06e:	bne.n	d14c <memcpy+0xe8>

.Lbig_block:
	subs	r2, __OPT_BIG_BLOCK_SIZE
    d070:	subs	r2, #64	; 0x40
	blo	.Lmid_block
    d072:	bcc.n	d0f8 <memcpy+0x94>
.Lbig_block_loop:
	BEGIN_UNROLL_BIG_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    d074:	ldr.w	r3, [r1], #4
    d078:	str.w	r3, [r0], #4
    d07c:	ldr.w	r3, [r1], #4
    d080:	str.w	r3, [r0], #4
    d084:	ldr.w	r3, [r1], #4
    d088:	str.w	r3, [r0], #4
    d08c:	ldr.w	r3, [r1], #4
    d090:	str.w	r3, [r0], #4
    d094:	ldr.w	r3, [r1], #4
    d098:	str.w	r3, [r0], #4
    d09c:	ldr.w	r3, [r1], #4
    d0a0:	str.w	r3, [r0], #4
    d0a4:	ldr.w	r3, [r1], #4
    d0a8:	str.w	r3, [r0], #4
    d0ac:	ldr.w	r3, [r1], #4
    d0b0:	str.w	r3, [r0], #4
    d0b4:	ldr.w	r3, [r1], #4
    d0b8:	str.w	r3, [r0], #4
    d0bc:	ldr.w	r3, [r1], #4
    d0c0:	str.w	r3, [r0], #4
    d0c4:	ldr.w	r3, [r1], #4
    d0c8:	str.w	r3, [r0], #4
    d0cc:	ldr.w	r3, [r1], #4
    d0d0:	str.w	r3, [r0], #4
    d0d4:	ldr.w	r3, [r1], #4
    d0d8:	str.w	r3, [r0], #4
    d0dc:	ldr.w	r3, [r1], #4
    d0e0:	str.w	r3, [r0], #4
    d0e4:	ldr.w	r3, [r1], #4
    d0e8:	str.w	r3, [r0], #4
    d0ec:	ldr.w	r3, [r1], #4
    d0f0:	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds	r0, __OPT_BIG_BLOCK_SIZE
	adds	r1, __OPT_BIG_BLOCK_SIZE
#endif
	subs	r2, __OPT_BIG_BLOCK_SIZE
    d0f4:	subs	r2, #64	; 0x40
	bhs .Lbig_block_loop
    d0f6:	bcs.n	d074 <memcpy+0x10>

.Lmid_block:
	adds	r2, __OPT_BIG_BLOCK_SIZE - __OPT_MID_BLOCK_SIZE
    d0f8:	adds	r2, #48	; 0x30
	blo	.Lcopy_word_by_word
    d0fa:	bcc.n	d120 <memcpy+0xbc>
.Lmid_block_loop:
	BEGIN_UNROLL_MID_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    d0fc:	ldr.w	r3, [r1], #4
    d100:	str.w	r3, [r0], #4
    d104:	ldr.w	r3, [r1], #4
    d108:	str.w	r3, [r0], #4
    d10c:	ldr.w	r3, [r1], #4
    d110:	str.w	r3, [r0], #4
    d114:	ldr.w	r3, [r1], #4
    d118:	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds    r0, __OPT_MID_BLOCK_SIZE
	adds    r1, __OPT_MID_BLOCK_SIZE
#endif
	subs	r2, __OPT_MID_BLOCK_SIZE
    d11c:	subs	r2, #16
	bhs	.Lmid_block_loop
    d11e:	bcs.n	d0fc <memcpy+0x98>

.Lcopy_word_by_word:
	adds	r2, __OPT_MID_BLOCK_SIZE - 4
    d120:	adds	r2, #12
	blo	.Lcopy_less_than_4
    d122:	bcc.n	d130 <memcpy+0xcc>

	/* Kernel loop for small block copy */
	.align 2
.Lcopy_word_by_word_loop:
	ldr	r3, [r1], #4
    d124:	ldr.w	r3, [r1], #4
	str	r3, [r0], #4
    d128:	str.w	r3, [r0], #4
	subs	r2, #4
    d12c:	subs	r2, #4
	bhs	.Lcopy_word_by_word_loop
    d12e:	bcs.n	d124 <memcpy+0xc0>

.Lcopy_less_than_4:
	adds	r2, #4
    d130:	adds	r2, #4
	beq	.Ldone
    d132:	beq.n	d146 <memcpy+0xe2>

	lsls	r2, r2, #31
    d134:	lsls	r2, r2, #31
	itt ne
    d136:	itt	ne
	ldrbne  r3, [r1], #1
    d138:	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    d13c:	strbne.w	r3, [r0], #1

	bcc	.Ldone
    d140:	bcc.n	d146 <memcpy+0xe2>
#ifdef __ARM_FEATURE_UNALIGNED
	ldrh	r3, [r1]
    d142:	ldrh	r3, [r1, #0]
	strh	r3, [r0]
    d144:	strh	r3, [r0, #0]
	strb	r3, [r0, #1]
#endif /* __ARM_FEATURE_UNALIGNED */

.Ldone:
#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    d146:	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    d148:	bx	lr
    d14a:	nop
#define Ldst_aligned Lbig_block

	/* Copy word by word using LDR when alignment can be done in hardware,
	i.e., SCTLR.A is set, supporting unaligned access in LDR and STR.  */

	cmp	r2, #8
    d14c:	cmp	r2, #8
	blo	.Lbyte_copy
    d14e:	bcc.n	d178 <memcpy+0x114>

	/* if src is aligned, just go to the big block loop.  */
	lsls	r3, r1, #30
    d150:	lsls	r3, r1, #30
	beq	.Ldst_aligned
    d152:	beq.n	d070 <memcpy+0xc>
	handling of aligned src and misaligned dst need more overhead than
	otherwise.  By doing this the worst case is when initial src is aligned,
	additional up to 4 byte additional copy will executed, which is
	acceptable.  */

	ands	r3, r0, #3
    d154:	ands.w	r3, r0, #3
	beq	.Ldst_aligned
    d158:	beq.n	d070 <memcpy+0xc>

	rsb	r3, #4
    d15a:	rsb	r3, r3, #4
	subs	r2, r3
    d15e:	subs	r2, r2, r3

	lsls    r3, r3, #31
    d160:	lsls	r3, r3, #31
	itt ne
    d162:	itt	ne
	ldrbne  r3, [r1], #1
    d164:	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    d168:	strbne.w	r3, [r0], #1

	bcc .Ldst_aligned
    d16c:	bcc.n	d070 <memcpy+0xc>

#ifdef __ARM_FEATURE_UNALIGNED
	ldrh    r3, [r1], #2
    d16e:	ldrh.w	r3, [r1], #2
	strh    r3, [r0], #2
    d172:	strh.w	r3, [r0], #2
	b	.Ldst_aligned
    d176:	b.n	d070 <memcpy+0xc>
	pop	{r4, r5}

#endif /* __ARM_FEATURE_UNALIGNED */

.Lbyte_copy:
	subs	r2, #4
    d178:	subs	r2, #4
	blo	.Lcopy_less_than_4
    d17a:	bcc.n	d130 <memcpy+0xcc>

.Lbyte_copy_loop:
	subs    r2, #1
    d17c:	subs	r2, #1
	ldrb    r3, [r1], #1
    d17e:	ldrb.w	r3, [r1], #1
	strb    r3, [r0], #1
    d182:	strb.w	r3, [r0], #1
	bhs	.Lbyte_copy_loop
    d186:	bcs.n	d17c <memcpy+0x118>

	ldrb	r3, [r1]
    d188:	ldrb	r3, [r1, #0]
	strb	r3, [r0]
    d18a:	strb	r3, [r0, #0]
	ldrb	r3, [r1, #1]
    d18c:	ldrb	r3, [r1, #1]
	strb	r3, [r0, #1]
    d18e:	strb	r3, [r0, #1]
	ldrb	r3, [r1, #2]
    d190:	ldrb	r3, [r1, #2]
	strb	r3, [r0, #2]
    d192:	strb	r3, [r0, #2]

#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    d194:	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    d196:	bx	lr

0000d198 <rx_queue_transfer>:
/*************************************************************************/
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
    d198:	push	{r3, r4, r5, r6, r7, lr}
	NVIC_DISABLE_IRQ(IRQ_USB1);
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    d19a:	ldr	r1, [pc, #80]	; (d1ec <rx_queue_transfer+0x54>)
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
    d19c:	mov.w	r7, #131072	; 0x20000
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    d1a0:	ldr	r5, [pc, #76]	; (d1f0 <rx_queue_transfer+0x58>)
/*************************************************************************/
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
    d1a2:	mov	r3, r0
	NVIC_DISABLE_IRQ(IRQ_USB1);
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    d1a4:	add.w	r4, r1, r0, lsl #9
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    d1a8:	ldr	r6, [pc, #72]	; (d1f4 <rx_queue_transfer+0x5c>)
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
    d1aa:	ldr	r2, [pc, #76]	; (d1f8 <rx_queue_transfer+0x60>)
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    d1ac:	add.w	r5, r5, r0, lsl #5
    d1b0:	mov	r1, r4
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
    d1b2:	str	r7, [r2, #0]
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    d1b4:	mov	r0, r5
    d1b6:	ldrh	r2, [r6, #0]
    d1b8:	bl	e41c <usb_prepare_transfer>
// read is certain to access the physical memory.
__attribute__((always_inline, unused))
static inline void arm_dcache_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
    d1bc:	ldrh	r1, [r6, #0]
// want to delete anything the cache may have stored, so your next
// read is certain to access the physical memory.
__attribute__((always_inline, unused))
static inline void arm_dcache_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    d1be:	bic.w	r3, r4, #31
	uint32_t end_addr = (uint32_t)addr + size;
    d1c2:	add	r1, r4
	asm volatile("": : :"memory");
	asm("dsb");
    d1c4:	dsb	sy
	do {
		SCB_CACHE_DCIMVAC = location;
    d1c8:	ldr	r2, [pc, #48]	; (d1fc <rx_queue_transfer+0x64>)
    d1ca:	str	r3, [r2, #0]
		location += 32;
    d1cc:	adds	r3, #32
	} while (location < end_addr);
    d1ce:	cmp	r1, r3
    d1d0:	bhi.n	d1ca <rx_queue_transfer+0x32>
	asm("dsb");
    d1d2:	dsb	sy
	asm("isb");
    d1d6:	isb	sy
	arm_dcache_delete(buffer, rx_packet_size);
	usb_receive(CDC_RX_ENDPOINT, rx_transfer + i);
    d1da:	movs	r0, #3
    d1dc:	mov	r1, r5
    d1de:	bl	e474 <usb_receive>
	NVIC_ENABLE_IRQ(IRQ_USB1);
    d1e2:	ldr	r3, [pc, #28]	; (d200 <rx_queue_transfer+0x68>)
    d1e4:	mov.w	r2, #131072	; 0x20000
    d1e8:	str	r2, [r3, #0]
    d1ea:	pop	{r3, r4, r5, r6, r7, pc}
    d1ec:	.word	0x20200000
    d1f0:	.word	0x20006040
    d1f4:	.word	0x2000614e
    d1f8:	.word	0xe000e18c
    d1fc:	.word	0xe000ef5c
    d200:	.word	0xe000e10c

0000d204 <rx_event>:
}

// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    d204:	ldr	r2, [pc, #144]	; (d298 <rx_event+0x94>)
    d206:	ldr	r3, [r0, #4]
	NVIC_ENABLE_IRQ(IRQ_USB1);
}

// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
    d208:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    d20c:	ubfx	r3, r3, #16, #15
    d210:	ldrh	r4, [r2, #0]
	int i = t->callback_param;
    d212:	ldr	r5, [r0, #28]
}

// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    d214:	subs	r4, r4, r3
	int i = t->callback_param;
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
    d216:	cmp	r4, #0
    d218:	ble.n	d28c <rx_event+0x88>
		// received a packet with data
		uint32_t head = rx_head;
    d21a:	ldr	r1, [pc, #128]	; (d29c <rx_event+0x98>)
		if (head != rx_tail) {
    d21c:	ldr	r2, [pc, #128]	; (d2a0 <rx_event+0x9c>)
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
	int i = t->callback_param;
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
		// received a packet with data
		uint32_t head = rx_head;
    d21e:	ldrb	r3, [r1, #0]
		if (head != rx_tail) {
    d220:	ldrb	r2, [r2, #0]
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
	int i = t->callback_param;
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
		// received a packet with data
		uint32_t head = rx_head;
    d222:	uxtb	r3, r3
		if (head != rx_tail) {
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
    d224:	ldr	r0, [pc, #124]	; (d2a4 <rx_event+0xa0>)
			uint32_t count = rx_count[ii];
    d226:	ldr	r6, [pc, #128]	; (d2a8 <rx_event+0xa4>)
	int i = t->callback_param;
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
		// received a packet with data
		uint32_t head = rx_head;
		if (head != rx_tail) {
    d228:	cmp	r3, r2
    d22a:	beq.n	d23c <rx_event+0x38>
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
    d22c:	ldrb.w	r8, [r0, r3]
			uint32_t count = rx_count[ii];
    d230:	ldrh.w	r7, [r6, r8, lsl #1]
			if (len <= CDC_RX_SIZE_480 - count) {
    d234:	rsb	r2, r7, #512	; 0x200
    d238:	cmp	r4, r2
    d23a:	bls.n	d262 <rx_event+0x5e>
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
    d23c:	adds	r3, #1
				return;
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
    d23e:	movs	r2, #0
    d240:	ldr	r7, [pc, #104]	; (d2ac <rx_event+0xa8>)
		if (++head > RX_NUM) head = 0;
    d242:	cmp	r3, #8
				// TODO: trigger serialEvent
				return;
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
    d244:	strh.w	r4, [r6, r5, lsl #1]
		rx_index[i] = 0;
    d248:	strh.w	r2, [r7, r5, lsl #1]
		if (++head > RX_NUM) head = 0;
		rx_list[head] = i;
		rx_head = head;
		rx_available += len;
    d24c:	ldr	r6, [pc, #96]	; (d2b0 <rx_event+0xac>)
    d24e:	ite	ls
    d250:	uxtbls	r2, r3
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
    d252:	movhi	r3, r2
		rx_list[head] = i;
		rx_head = head;
    d254:	strb	r2, [r1, #0]
		rx_available += len;
    d256:	ldr	r2, [r6, #0]
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
		rx_list[head] = i;
    d258:	strb	r5, [r0, r3]
		rx_head = head;
		rx_available += len;
    d25a:	add	r4, r2
    d25c:	str	r4, [r6, #0]
    d25e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
			uint32_t count = rx_count[ii];
			if (len <= CDC_RX_SIZE_480 - count) {
				// previous buffer has enough free space for this packet's data
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
    d262:	ldr	r3, [pc, #80]	; (d2b4 <rx_event+0xb0>)
    d264:	add.w	r0, r7, r8, lsl #9
    d268:	mov	r2, r4
					rx_buffer + i * CDC_RX_SIZE_480, len);
				rx_count[ii] = count + len;
    d26a:	add	r7, r4
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
			uint32_t count = rx_count[ii];
			if (len <= CDC_RX_SIZE_480 - count) {
				// previous buffer has enough free space for this packet's data
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
    d26c:	add.w	r1, r3, r5, lsl #9
    d270:	add	r0, r3
    d272:	bl	d064 <memcpy>
					rx_buffer + i * CDC_RX_SIZE_480, len);
				rx_count[ii] = count + len;
				rx_available += len;
    d276:	ldr	r2, [pc, #56]	; (d2b0 <rx_event+0xac>)
				rx_queue_transfer(i);
    d278:	mov	r0, r5
			uint32_t count = rx_count[ii];
			if (len <= CDC_RX_SIZE_480 - count) {
				// previous buffer has enough free space for this packet's data
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
					rx_buffer + i * CDC_RX_SIZE_480, len);
				rx_count[ii] = count + len;
    d27a:	strh.w	r7, [r6, r8, lsl #1]
				rx_available += len;
    d27e:	ldr	r3, [r2, #0]
    d280:	add	r4, r3
    d282:	str	r4, [r2, #0]
		// TODO: trigger serialEvent
	} else {
		// received a zero length packet
		rx_queue_transfer(i);
	}
}
    d284:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				// previous buffer has enough free space for this packet's data
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
					rx_buffer + i * CDC_RX_SIZE_480, len);
				rx_count[ii] = count + len;
				rx_available += len;
				rx_queue_transfer(i);
    d288:	b.w	d198 <rx_queue_transfer>
		rx_head = head;
		rx_available += len;
		// TODO: trigger serialEvent
	} else {
		// received a zero length packet
		rx_queue_transfer(i);
    d28c:	mov	r0, r5
	}
}
    d28e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		rx_head = head;
		rx_available += len;
		// TODO: trigger serialEvent
	} else {
		// received a zero length packet
		rx_queue_transfer(i);
    d292:	b.w	d198 <rx_queue_transfer>
    d296:	nop
    d298:	.word	0x2000614e
    d29c:	.word	0x20006164
    d2a0:	.word	0x20006140
    d2a4:	.word	0x20006144
    d2a8:	.word	0x20006150
    d2ac:	.word	0x20006024
    d2b0:	.word	0x20006160
    d2b4:	.word	0x20200000

0000d2b8 <usb_serial_flush_callback>:
	tx_noautoflush = 0;
}

static void usb_serial_flush_callback(void)
{
	if (tx_noautoflush) return;
    d2b8:	ldr	r3, [pc, #120]	; (d334 <usb_serial_flush_callback+0x7c>)
    d2ba:	ldrb	r2, [r3, #0]
    d2bc:	cbnz	r2, d2d6 <usb_serial_flush_callback+0x1e>
    d2be:	and.w	r3, r2, #255	; 0xff
	if (!usb_configuration) return;
    d2c2:	ldr	r2, [pc, #116]	; (d338 <usb_serial_flush_callback+0x80>)
    d2c4:	ldrb	r2, [r2, #0]
    d2c6:	cbz	r2, d2d6 <usb_serial_flush_callback+0x1e>
	tx_available = 0;
	tx_noautoflush = 0;
}

static void usb_serial_flush_callback(void)
{
    d2c8:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (tx_noautoflush) return;
	if (!usb_configuration) return;
	if (tx_available == 0) return;
    d2cc:	ldr	r5, [pc, #108]	; (d33c <usb_serial_flush_callback+0x84>)
    d2ce:	ldrh	r2, [r5, #0]
    d2d0:	cbnz	r2, d2d8 <usb_serial_flush_callback+0x20>
    d2d2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d2d6:	bx	lr
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
    d2d8:	ldr	r6, [pc, #100]	; (d340 <usb_serial_flush_callback+0x88>)
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
    d2da:	rsb	r8, r2, #2048	; 0x800
{
	if (tx_noautoflush) return;
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
    d2de:	ldr	r7, [pc, #100]	; (d344 <usb_serial_flush_callback+0x8c>)
    d2e0:	ldrb	r1, [r6, #0]
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    d2e2:	mov	r2, r8
	if (tx_noautoflush) return;
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    d2e4:	ldr	r4, [pc, #96]	; (d348 <usb_serial_flush_callback+0x90>)
{
	if (tx_noautoflush) return;
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
    d2e6:	add.w	r7, r7, r1, lsl #5
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    d2ea:	add.w	r4, r4, r1, lsl #11
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    d2ee:	mov	r0, r7
    d2f0:	mov	r1, r4
    d2f2:	bl	e41c <usb_prepare_transfer>
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
    d2f6:	add.w	r2, r8, r4
// any cached data written to memory, and then removed from the cache,
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    d2fa:	bic.w	r1, r4, #31
	uint32_t end_addr = (uint32_t)addr + size;
	asm volatile("": : :"memory");
	asm("dsb");
    d2fe:	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    d302:	ldr	r3, [pc, #72]	; (d34c <usb_serial_flush_callback+0x94>)
    d304:	str	r1, [r3, #0]
		location += 32;
    d306:	adds	r1, #32
	} while (location < end_addr);
    d308:	cmp	r2, r1
    d30a:	bhi.n	d304 <usb_serial_flush_callback+0x4c>
	asm("dsb");
    d30c:	dsb	sy
	asm("isb");
    d310:	isb	sy
	arm_dcache_flush_delete(txbuf, txnum);
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    d314:	movs	r0, #3
    d316:	mov	r1, r7
    d318:	bl	e44c <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    d31c:	ldrb	r3, [r6, #0]
    d31e:	ldr	r2, [pc, #32]	; (d340 <usb_serial_flush_callback+0x88>)
    d320:	adds	r3, #1
    d322:	uxtb	r3, r3
    d324:	cmp	r3, #3
    d326:	it	hi
    d328:	movhi	r3, #0
    d32a:	strb	r3, [r2, #0]
	tx_available = 0;
    d32c:	movs	r3, #0
    d32e:	strh	r3, [r5, #0]
    d330:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d334:	.word	0x20006036
    d338:	.word	0x20006238
    d33c:	.word	0x20006166
    d340:	.word	0x20006037
    d344:	.word	0x20006180
    d348:	.word	0x20201000
    d34c:	.word	0xe000ef70

0000d350 <usb_serial_write.part.1>:
{
	USB1_GPTIMER0CTRL = 0;
}


int usb_serial_write(const void *buffer, uint32_t size)
    d350:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d354:	sub	sp, #20
    d356:	str	r0, [sp, #8]
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
    d358:	str	r1, [sp, #4]
    d35a:	cmp	r1, #0
    d35c:	beq.w	d4a4 <usb_serial_write.part.1+0x154>
    d360:	movs	r3, #0
    d362:	ldr.w	r8, [pc, #348]	; d4c0 <usb_serial_write.part.1+0x170>
    d366:	ldr.w	r9, [pc, #332]	; d4b4 <usb_serial_write.part.1+0x164>
    d36a:	str	r3, [sp, #0]
				tx_available = TX_SIZE;
				transmit_previous_timeout = 0;
				break;
			}
			if (!waiting) {
				wait_begin_at = systick_millis_count;
    d36c:	ldr	r6, [pc, #312]	; (d4a8 <usb_serial_write.part.1+0x158>)
    d36e:	ldrh.w	r3, [r8]
				//printf("tx head=%d\n", tx_head);
				//printf("TXFILLTUNING=%08lX\n", USB1_TXFILLTUNING);
				//usb_print_transfer_log();
				//while (1) ;
			}
			if (!usb_configuration) return sent;
    d372:	ldr.w	sl, [pc, #336]	; d4c4 <usb_serial_write.part.1+0x174>
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
	asm volatile("": : :"memory");
	asm("dsb");
	do {
		SCB_CACHE_DCCIMVAC = location;
    d376:	ldr.w	fp, [pc, #336]	; d4c8 <usb_serial_write.part.1+0x178>
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
		transfer_t *xfer = tx_transfer + tx_head;
    d37a:	ldr	r2, [pc, #304]	; (d4ac <usb_serial_write.part.1+0x15c>)
    d37c:	ldrb	r4, [r2, #0]
    d37e:	ldr	r2, [pc, #304]	; (d4b0 <usb_serial_write.part.1+0x160>)
    d380:	add.w	r7, r2, r4, lsl #5
		int waiting=0;
		uint32_t wait_begin_at=0;
		while (!tx_available) {
    d384:	cmp	r3, #0
    d386:	bne.n	d466 <usb_serial_write.part.1+0x116>
    d388:	mov	r5, r3
    d38a:	mov	r4, r3
    d38c:	b.n	d3b8 <usb_serial_write.part.1+0x68>
			}
			if (!waiting) {
				wait_begin_at = systick_millis_count;
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
    d38e:	ldrb.w	r3, [r9]
				}
				tx_available = TX_SIZE;
				transmit_previous_timeout = 0;
				break;
			}
			if (!waiting) {
    d392:	cbnz	r4, d396 <usb_serial_write.part.1+0x46>
				wait_begin_at = systick_millis_count;
    d394:	ldr	r5, [r6, #0]
    d396:	movs	r4, #1
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
    d398:	cmp	r3, #0
    d39a:	bne.n	d45a <usb_serial_write.part.1+0x10a>
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
    d39c:	ldr	r3, [r6, #0]
    d39e:	subs	r3, r3, r5
    d3a0:	cmp	r3, #120	; 0x78
    d3a2:	bhi.n	d498 <usb_serial_write.part.1+0x148>
				//printf("tx head=%d\n", tx_head);
				//printf("TXFILLTUNING=%08lX\n", USB1_TXFILLTUNING);
				//usb_print_transfer_log();
				//while (1) ;
			}
			if (!usb_configuration) return sent;
    d3a4:	ldrb.w	r3, [sl]
    d3a8:	cmp	r3, #0
    d3aa:	beq.n	d45a <usb_serial_write.part.1+0x10a>
			yield();
    d3ac:	bl	f2bc <yield>
	if (!usb_configuration) return 0;
	while (size > 0) {
		transfer_t *xfer = tx_transfer + tx_head;
		int waiting=0;
		uint32_t wait_begin_at=0;
		while (!tx_available) {
    d3b0:	ldrh.w	r3, [r8]
    d3b4:	cmp	r3, #0
    d3b6:	bne.n	d462 <usb_serial_write.part.1+0x112>
			//digitalWriteFast(3, HIGH);
			uint32_t status = usb_transfer_status(xfer);
    d3b8:	mov	r0, r7
    d3ba:	bl	e498 <usb_transfer_status>
			if (!(status & 0x80)) {
    d3be:	ands.w	r0, r0, #128	; 0x80
			}
			if (!waiting) {
				wait_begin_at = systick_millis_count;
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
    d3c2:	ldr	r2, [pc, #240]	; (d4b4 <usb_serial_write.part.1+0x164>)
		int waiting=0;
		uint32_t wait_begin_at=0;
		while (!tx_available) {
			//digitalWriteFast(3, HIGH);
			uint32_t status = usb_transfer_status(xfer);
			if (!(status & 0x80)) {
    d3c4:	bne.n	d38e <usb_serial_write.part.1+0x3e>
				if (status & 0x68) {
					// TODO: what if status has errors???
					printf("ERROR status = %x, i=%d, ms=%u\n",
						status, tx_head, systick_millis_count);
				}
				tx_available = TX_SIZE;
    d3c6:	mov.w	r3, #2048	; 0x800
    d3ca:	ldr	r2, [pc, #224]	; (d4ac <usb_serial_write.part.1+0x15c>)
				transmit_previous_timeout = 0;
    d3cc:	strb.w	r0, [r9]
    d3d0:	ldrb	r4, [r2, #0]
    d3d2:	mov	r2, r3
				if (status & 0x68) {
					// TODO: what if status has errors???
					printf("ERROR status = %x, i=%d, ms=%u\n",
						status, tx_head, systick_millis_count);
				}
				tx_available = TX_SIZE;
    d3d4:	strh.w	r3, [r8]
			}
			if (!usb_configuration) return sent;
			yield();
		}
		//digitalWriteFast(3, LOW);
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    d3d8:	lsls	r4, r4, #11
		if (size >= tx_available) {
    d3da:	ldr	r5, [sp, #4]
			}
			if (!usb_configuration) return sent;
			yield();
		}
		//digitalWriteFast(3, LOW);
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    d3dc:	ldr	r1, [pc, #216]	; (d4b8 <usb_serial_write.part.1+0x168>)
    d3de:	add	r0, r4
		if (size >= tx_available) {
    d3e0:	cmp	r5, r2
			}
			if (!usb_configuration) return sent;
			yield();
		}
		//digitalWriteFast(3, LOW);
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    d3e2:	add	r0, r1
		if (size >= tx_available) {
    d3e4:	bcc.n	d46e <usb_serial_write.part.1+0x11e>
			memcpy(txdata, data, tx_available);
			//*(txbuffer + (tx_head * TX_SIZE)) = 'A' + tx_head; // to see which buffer
			//*(txbuffer + (tx_head * TX_SIZE) + 1) = ' '; // really see it
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    d3e6:	add	r4, r1
			yield();
		}
		//digitalWriteFast(3, LOW);
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
		if (size >= tx_available) {
			memcpy(txdata, data, tx_available);
    d3e8:	ldr	r1, [sp, #8]
    d3ea:	bl	d064 <memcpy>
			//*(txbuffer + (tx_head * TX_SIZE)) = 'A' + tx_head; // to see which buffer
			//*(txbuffer + (tx_head * TX_SIZE) + 1) = ' '; // really see it
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
    d3ee:	movs	r3, #0
    d3f0:	mov	r1, r4
    d3f2:	mov.w	r2, #2048	; 0x800
    d3f6:	mov	r0, r7
    d3f8:	bl	e41c <usb_prepare_transfer>
// any cached data written to memory, and then removed from the cache,
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    d3fc:	bic.w	r3, r4, #31
	uint32_t end_addr = (uint32_t)addr + size;
    d400:	add.w	r4, r4, #2048	; 0x800
	asm volatile("": : :"memory");
	asm("dsb");
    d404:	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    d408:	str.w	r3, [fp]
		location += 32;
    d40c:	adds	r3, #32
	} while (location < end_addr);
    d40e:	cmp	r4, r3
    d410:	bhi.n	d408 <usb_serial_write.part.1+0xb8>
	asm("dsb");
    d412:	dsb	sy
	asm("isb");
    d416:	isb	sy
			arm_dcache_flush_delete(txbuf, TX_SIZE);
			usb_transmit(CDC_TX_ENDPOINT, xfer);
    d41a:	movs	r0, #3
    d41c:	mov	r1, r7
    d41e:	bl	e44c <usb_transmit>
			if (++tx_head >= TX_NUM) tx_head = 0;
    d422:	ldr	r3, [pc, #136]	; (d4ac <usb_serial_write.part.1+0x15c>)
    d424:	ldr	r2, [pc, #132]	; (d4ac <usb_serial_write.part.1+0x15c>)
			size -= tx_available;
			sent += tx_available;
			data += tx_available;
			tx_available = 0;
    d426:	movs	r1, #0
			//*(txbuffer + (tx_head * TX_SIZE) + 1) = ' '; // really see it
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
			arm_dcache_flush_delete(txbuf, TX_SIZE);
			usb_transmit(CDC_TX_ENDPOINT, xfer);
			if (++tx_head >= TX_NUM) tx_head = 0;
    d428:	ldrb	r3, [r3, #0]
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
}

static void timer_stop(void)
{
	USB1_GPTIMER0CTRL = 0;
    d42a:	ldr	r0, [pc, #144]	; (d4bc <usb_serial_write.part.1+0x16c>)
			//*(txbuffer + (tx_head * TX_SIZE) + 1) = ' '; // really see it
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
			arm_dcache_flush_delete(txbuf, TX_SIZE);
			usb_transmit(CDC_TX_ENDPOINT, xfer);
			if (++tx_head >= TX_NUM) tx_head = 0;
    d42c:	adds	r3, #1
    d42e:	uxtb	r3, r3
    d430:	cmp	r3, #3
    d432:	it	hi
    d434:	movhi	r3, #0
    d436:	strb	r3, [r2, #0]
			size -= tx_available;
    d438:	ldrh.w	r2, [r8]
			sent += tx_available;
    d43c:	ldr	r3, [sp, #0]
			data += tx_available;
			tx_available = 0;
    d43e:	strh.w	r1, [r8]
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
			arm_dcache_flush_delete(txbuf, TX_SIZE);
			usb_transmit(CDC_TX_ENDPOINT, xfer);
			if (++tx_head >= TX_NUM) tx_head = 0;
			size -= tx_available;
			sent += tx_available;
    d442:	add	r3, r2
    d444:	str	r3, [sp, #0]
			data += tx_available;
    d446:	ldr	r3, [sp, #8]
    d448:	add	r3, r2
    d44a:	str	r3, [sp, #8]
    d44c:	mov	r3, r1
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
}

static void timer_stop(void)
{
	USB1_GPTIMER0CTRL = 0;
    d44e:	str.w	r1, [r0, #132]	; 0x84
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
    d452:	ldr	r1, [sp, #4]
    d454:	subs	r2, r1, r2
    d456:	str	r2, [sp, #4]
    d458:	bne.n	d37a <usb_serial_write.part.1+0x2a>
    d45a:	ldr	r0, [sp, #0]
			size = 0;
			timer_start_oneshot();
		}
	}
	return sent;
}
    d45c:	add	sp, #20
    d45e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d462:	ldr	r2, [pc, #72]	; (d4ac <usb_serial_write.part.1+0x15c>)
    d464:	ldrb	r4, [r2, #0]
    d466:	mov	r2, r3
    d468:	rsb	r0, r3, #2048	; 0x800
    d46c:	b.n	d3d8 <usb_serial_write.part.1+0x88>
			sent += tx_available;
			data += tx_available;
			tx_available = 0;
			timer_stop();
		} else {
			memcpy(txdata, data, size);
    d46e:	ldr	r4, [sp, #4]
    d470:	ldr	r1, [sp, #8]
    d472:	mov	r2, r4
    d474:	str	r3, [sp, #12]
    d476:	bl	d064 <memcpy>
			tx_available -= size;
    d47a:	ldr	r3, [sp, #12]
}

static void timer_start_oneshot(void)
{
	// restarts timer if already running (retriggerable one-shot)
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    d47c:	ldr	r2, [pc, #60]	; (d4bc <usb_serial_write.part.1+0x16c>)
    d47e:	mov.w	r1, #3221225472	; 0xc0000000
			data += tx_available;
			tx_available = 0;
			timer_stop();
		} else {
			memcpy(txdata, data, size);
			tx_available -= size;
    d482:	subs	r3, r3, r4
    d484:	strh.w	r3, [r8]
    d488:	ldr	r3, [sp, #0]
}

static void timer_start_oneshot(void)
{
	// restarts timer if already running (retriggerable one-shot)
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    d48a:	str.w	r1, [r2, #132]	; 0x84
    d48e:	mov	r0, r3
    d490:	add	r0, r4
			size = 0;
			timer_start_oneshot();
		}
	}
	return sent;
}
    d492:	add	sp, #20
    d494:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
				// waited too long, assume the USB host isn't listening
				transmit_previous_timeout = 1;
    d498:	movs	r3, #1
				return sent;
    d49a:	ldr	r0, [sp, #0]
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
				// waited too long, assume the USB host isn't listening
				transmit_previous_timeout = 1;
    d49c:	strb	r3, [r2, #0]
			size = 0;
			timer_start_oneshot();
		}
	}
	return sent;
}
    d49e:	add	sp, #20
    d4a0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
    d4a4:	ldr	r0, [sp, #4]
    d4a6:	b.n	d45c <usb_serial_write.part.1+0x10c>
    d4a8:	.word	0x20006244
    d4ac:	.word	0x20006037
    d4b0:	.word	0x20006180
    d4b4:	.word	0x20006165
    d4b8:	.word	0x20201000
    d4bc:	.word	0x402e0000
    d4c0:	.word	0x20006166
    d4c4:	.word	0x20006238
    d4c8:	.word	0xe000ef70

0000d4cc <usb_serial_reset>:
static void rx_queue_transfer(int i);
static void rx_event(transfer_t *t);


void usb_serial_reset(void)
{
    d4cc:	bx	lr
    d4ce:	nop

0000d4d0 <usb_serial_configure>:
void usb_serial_configure(void)
{
	int i;

	printf("usb_serial_configure\n");
	if (usb_high_speed) {
    d4d0:	ldr	r3, [pc, #196]	; (d598 <usb_serial_configure+0xc8>)
	printf("usb_serial_reset\n");
	// deallocate all transfer descriptors
}

void usb_serial_configure(void)
{
    d4d2:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int i;

	printf("usb_serial_configure\n");
	if (usb_high_speed) {
    d4d6:	ldrb	r3, [r3, #0]
		tx_packet_size = CDC_TX_SIZE_480;
    d4d8:	ldr	r7, [pc, #192]	; (d59c <usb_serial_configure+0xcc>)
void usb_serial_configure(void)
{
	int i;

	printf("usb_serial_configure\n");
	if (usb_high_speed) {
    d4da:	cmp	r3, #0
    d4dc:	beq.n	d588 <usb_serial_configure+0xb8>
		tx_packet_size = CDC_TX_SIZE_480;
    d4de:	mov.w	r3, #512	; 0x200
		rx_packet_size = CDC_RX_SIZE_480;
    d4e2:	ldr.w	r8, [pc, #236]	; d5d0 <usb_serial_configure+0x100>
{
	int i;

	printf("usb_serial_configure\n");
	if (usb_high_speed) {
		tx_packet_size = CDC_TX_SIZE_480;
    d4e6:	strh	r3, [r7, #0]
		rx_packet_size = CDC_RX_SIZE_480;
    d4e8:	strh.w	r3, [r8]
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
		rx_packet_size = CDC_RX_SIZE_12;
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
    d4ec:	movs	r1, #0
    d4ee:	movs	r2, #128	; 0x80
    d4f0:	ldr	r0, [pc, #172]	; (d5a0 <usb_serial_configure+0xd0>)
	tx_head = 0;
    d4f2:	mov	r5, r1
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
    d4f4:	ldr	r6, [pc, #172]	; (d5a4 <usb_serial_configure+0xd4>)
		rx_packet_size = CDC_RX_SIZE_480;
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
		rx_packet_size = CDC_RX_SIZE_12;
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
    d4f6:	bl	10d7c <memset>
	tx_head = 0;
    d4fa:	ldr	r4, [pc, #172]	; (d5a8 <usb_serial_configure+0xd8>)
	tx_available = 0;
    d4fc:	ldr	r3, [pc, #172]	; (d5ac <usb_serial_configure+0xdc>)
	memset(rx_transfer, 0, sizeof(rx_transfer));
    d4fe:	mov	r1, r5
    d500:	mov.w	r2, #256	; 0x100
    d504:	ldr	r0, [pc, #168]	; (d5b0 <usb_serial_configure+0xe0>)
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
		rx_packet_size = CDC_RX_SIZE_12;
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
    d506:	strb	r5, [r4, #0]
	rx_tail = 0;
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
	usb_config_rx(CDC_RX_ENDPOINT, rx_packet_size, 0, rx_event);
	usb_config_tx(CDC_TX_ENDPOINT, tx_packet_size, 1, NULL);
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    d508:	mov	r4, r5
		tx_packet_size = CDC_TX_SIZE_12;
		rx_packet_size = CDC_RX_SIZE_12;
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
    d50a:	strh	r5, [r3, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
    d50c:	bl	10d7c <memset>
	memset(rx_count, 0, sizeof(rx_count));
    d510:	str	r5, [r6, #0]
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
	rx_tail = 0;
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    d512:	mov	r3, r5
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
    d514:	str	r5, [r6, #4]
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
	rx_tail = 0;
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    d516:	mov	r2, r5
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
    d518:	str	r5, [r6, #8]
    d51a:	str	r5, [r6, #12]
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
    d51c:	ldr	r1, [pc, #148]	; (d5b4 <usb_serial_configure+0xe4>)
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
    d51e:	ldr	r6, [pc, #152]	; (d5b8 <usb_serial_configure+0xe8>)
	rx_head = 0;
	rx_tail = 0;
    d520:	ldr	r0, [pc, #152]	; (d5bc <usb_serial_configure+0xec>)
	rx_available = 0;
    d522:	ldr.w	lr, [pc, #176]	; d5d4 <usb_serial_configure+0x104>
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
    d526:	strb	r5, [r1, #0]
	rx_tail = 0;
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    d528:	movs	r1, #16
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
	rx_tail = 0;
    d52a:	strb	r5, [r0, #0]
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    d52c:	movs	r0, #2
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
    d52e:	str	r5, [r6, #0]
    d530:	str	r5, [r6, #4]
    d532:	str	r5, [r6, #8]
    d534:	str	r5, [r6, #12]
	rx_head = 0;
	rx_tail = 0;
	rx_available = 0;
    d536:	str.w	r5, [lr]
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    d53a:	bl	e3b4 <usb_config_tx>
	usb_config_rx(CDC_RX_ENDPOINT, rx_packet_size, 0, rx_event);
    d53e:	ldrh.w	r1, [r8]
    d542:	mov	r2, r5
    d544:	ldr	r3, [pc, #120]	; (d5c0 <usb_serial_configure+0xf0>)
    d546:	movs	r0, #3
    d548:	bl	e350 <usb_config_rx>
	usb_config_tx(CDC_TX_ENDPOINT, tx_packet_size, 1, NULL);
    d54c:	mov	r3, r5
    d54e:	ldrh	r1, [r7, #0]
    d550:	movs	r2, #1
    d552:	movs	r0, #3
    d554:	bl	e3b4 <usb_config_tx>
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    d558:	mov	r0, r4
    d55a:	adds	r4, #1
    d55c:	bl	d198 <rx_queue_transfer>
    d560:	cmp	r4, #8
    d562:	bne.n	d558 <usb_serial_configure+0x88>
static void timer_stop();

static void timer_config(void (*callback)(void), uint32_t microseconds)
{
	usb_timer0_callback = callback;
	USB1_GPTIMER0CTRL = 0;
    d564:	ldr	r3, [pc, #92]	; (d5c4 <usb_serial_configure+0xf4>)
	USB1_GPTIMER0LD = microseconds - 1;
    d566:	movs	r2, #74	; 0x4a
static void timer_start_oneshot();
static void timer_stop();

static void timer_config(void (*callback)(void), uint32_t microseconds)
{
	usb_timer0_callback = callback;
    d568:	ldr	r0, [pc, #92]	; (d5c8 <usb_serial_configure+0xf8>)
	USB1_GPTIMER0CTRL = 0;
    d56a:	movs	r1, #0
static void timer_start_oneshot();
static void timer_stop();

static void timer_config(void (*callback)(void), uint32_t microseconds)
{
	usb_timer0_callback = callback;
    d56c:	ldr	r4, [pc, #92]	; (d5cc <usb_serial_configure+0xfc>)
    d56e:	str	r4, [r0, #0]
	USB1_GPTIMER0CTRL = 0;
    d570:	str.w	r1, [r3, #132]	; 0x84
	USB1_GPTIMER0LD = microseconds - 1;
    d574:	str.w	r2, [r3, #128]	; 0x80
	USB1_USBINTR |= USB_USBINTR_TIE0;
    d578:	ldr.w	r2, [r3, #328]	; 0x148
    d57c:	orr.w	r2, r2, #16777216	; 0x1000000
    d580:	str.w	r2, [r3, #328]	; 0x148
    d584:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	printf("usb_serial_configure\n");
	if (usb_high_speed) {
		tx_packet_size = CDC_TX_SIZE_480;
		rx_packet_size = CDC_RX_SIZE_480;
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
    d588:	movs	r3, #64	; 0x40
		rx_packet_size = CDC_RX_SIZE_12;
    d58a:	ldr.w	r8, [pc, #68]	; d5d0 <usb_serial_configure+0x100>
	printf("usb_serial_configure\n");
	if (usb_high_speed) {
		tx_packet_size = CDC_TX_SIZE_480;
		rx_packet_size = CDC_RX_SIZE_480;
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
    d58e:	strh	r3, [r7, #0]
		rx_packet_size = CDC_RX_SIZE_12;
    d590:	strh.w	r3, [r8]
    d594:	b.n	d4ec <usb_serial_configure+0x1c>
    d596:	nop
    d598:	.word	0x20006210
    d59c:	.word	0x20006034
    d5a0:	.word	0x20006180
    d5a4:	.word	0x20006150
    d5a8:	.word	0x20006037
    d5ac:	.word	0x20006166
    d5b0:	.word	0x20006040
    d5b4:	.word	0x20006164
    d5b8:	.word	0x20006024
    d5bc:	.word	0x20006140
    d5c0:	.word	0x0000d205
    d5c4:	.word	0x402e0000
    d5c8:	.word	0x20006200
    d5cc:	.word	0x0000d2b9
    d5d0:	.word	0x2000614e
    d5d4:	.word	0x20006160

0000d5d8 <usb_serial_read>:
int usb_serial_read(void *buffer, uint32_t size)
{
	uint8_t *p = (uint8_t *)buffer;
	uint32_t count=0;

	NVIC_DISABLE_IRQ(IRQ_USB1);
    d5d8:	ldr	r3, [pc, #196]	; (d6a0 <usb_serial_read+0xc8>)
    d5da:	mov.w	r2, #131072	; 0x20000

//static int maxtimes=0;

// read a block of bytes to a buffer
int usb_serial_read(void *buffer, uint32_t size)
{
    d5de:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t *p = (uint8_t *)buffer;
	uint32_t count=0;

	NVIC_DISABLE_IRQ(IRQ_USB1);
    d5e2:	str	r2, [r3, #0]

//static int maxtimes=0;

// read a block of bytes to a buffer
int usb_serial_read(void *buffer, uint32_t size)
{
    d5e4:	sub	sp, #12
	uint8_t *p = (uint8_t *)buffer;
	uint32_t count=0;

	NVIC_DISABLE_IRQ(IRQ_USB1);
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
    d5e6:	ldr	r3, [pc, #188]	; (d6a4 <usb_serial_read+0xcc>)
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
    d5e8:	mov	r9, r1
	uint8_t *p = (uint8_t *)buffer;
	uint32_t count=0;

	NVIC_DISABLE_IRQ(IRQ_USB1);
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
    d5ea:	ldrb	r4, [r3, #0]
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
    d5ec:	cmp	r1, #0
    d5ee:	beq.n	d698 <usb_serial_read+0xc0>
    d5f0:	ldr	r3, [pc, #180]	; (d6a8 <usb_serial_read+0xd0>)
    d5f2:	uxtb	r4, r4
    d5f4:	ldrb	r3, [r3, #0]
    d5f6:	cmp	r4, r3
    d5f8:	beq.n	d69c <usb_serial_read+0xc4>
    d5fa:	mov	sl, r0
    d5fc:	movs	r7, #0
    d5fe:	ldr.w	fp, [pc, #192]	; d6c0 <usb_serial_read+0xe8>
		if (++tail > RX_NUM) tail = 0;
    d602:	adds	r4, #1
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
    d604:	ldr	r3, [pc, #164]	; (d6ac <usb_serial_read+0xd4>)
	uint32_t tail = rx_tail;
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
    d606:	rsb	r8, r7, r9
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    d60a:	mov	r0, sl
	NVIC_DISABLE_IRQ(IRQ_USB1);
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
    d60c:	cmp	r4, #9
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
    d60e:	str	r3, [sp, #4]
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
    d610:	ldr	r3, [pc, #156]	; (d6b0 <usb_serial_read+0xd8>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
    d612:	it	cs
    d614:	movcs	r4, #0
		uint32_t i = rx_list[tail];
    d616:	ldrb	r5, [r3, r4]
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
    d618:	ldr	r3, [pc, #144]	; (d6ac <usb_serial_read+0xd4>)
    d61a:	ldrh.w	lr, [r3, r5, lsl #1]
    d61e:	ldr	r3, [pc, #148]	; (d6b4 <usb_serial_read+0xdc>)
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    d620:	add.w	r1, lr, r5, lsl #9
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
    d624:	ldrh.w	r6, [r3, r5, lsl #1]
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    d628:	ldr	r3, [pc, #140]	; (d6b8 <usb_serial_read+0xe0>)
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
    d62a:	rsb	r6, lr, r6
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    d62e:	add	r1, r3
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
		 //printf("usb_serial_read, count=%d, size=%d, i=%d, index=%d, len=%d, avail=%d, c=%c\n",
		  //count, size, i, rx_index[i], len, avail, rx_buffer[i * CDC_RX_SIZE_480]);
		if (avail > len) {
    d630:	cmp	r8, r6
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    d632:	mov	r2, r6
			p += avail;
			rx_available -= avail;
			count += avail;
    d634:	add	r7, r6
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
		 //printf("usb_serial_read, count=%d, size=%d, i=%d, index=%d, len=%d, avail=%d, c=%c\n",
		  //count, size, i, rx_index[i], len, avail, rx_buffer[i * CDC_RX_SIZE_480]);
		if (avail > len) {
    d636:	bcs.n	d66c <usb_serial_read+0x94>
			// partially consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
    d638:	add.w	r1, lr, r5, lsl #9
    d63c:	mov	r2, r8
    d63e:	add	r1, r3
    d640:	bl	d064 <memcpy>
			rx_available -= len;
			rx_index[i] += len;
    d644:	ldr	r3, [sp, #4]
		 //printf("usb_serial_read, count=%d, size=%d, i=%d, index=%d, len=%d, avail=%d, c=%c\n",
		  //count, size, i, rx_index[i], len, avail, rx_buffer[i * CDC_RX_SIZE_480]);
		if (avail > len) {
			// partially consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
			rx_available -= len;
    d646:	ldr.w	r1, [fp]
    d64a:	mov	r0, r9
			rx_index[i] += len;
    d64c:	ldrh.w	r2, [r3, r5, lsl #1]
		 //printf("usb_serial_read, count=%d, size=%d, i=%d, index=%d, len=%d, avail=%d, c=%c\n",
		  //count, size, i, rx_index[i], len, avail, rx_buffer[i * CDC_RX_SIZE_480]);
		if (avail > len) {
			// partially consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
			rx_available -= len;
    d650:	rsb	r1, r8, r1
			rx_index[i] += len;
    d654:	add	r8, r2
		 //printf("usb_serial_read, count=%d, size=%d, i=%d, index=%d, len=%d, avail=%d, c=%c\n",
		  //count, size, i, rx_index[i], len, avail, rx_buffer[i * CDC_RX_SIZE_480]);
		if (avail > len) {
			// partially consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
			rx_available -= len;
    d656:	str.w	r1, [fp]
			rx_index[i] += len;
    d65a:	strh.w	r8, [r3, r5, lsl #1]
			count += avail;
			rx_tail = tail;
			rx_queue_transfer(i);
		}
	}
	NVIC_ENABLE_IRQ(IRQ_USB1);
    d65e:	ldr	r3, [pc, #92]	; (d6bc <usb_serial_read+0xe4>)
    d660:	mov.w	r2, #131072	; 0x20000
    d664:	str	r2, [r3, #0]
	return count;
}
    d666:	add	sp, #12
    d668:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    d66c:	bl	d064 <memcpy>
			p += avail;
			rx_available -= avail;
    d670:	ldr.w	r2, [fp]
			count += avail;
			rx_tail = tail;
    d674:	uxtb	r3, r4
			rx_queue_transfer(i);
    d676:	mov	r0, r5
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
			p += avail;
			rx_available -= avail;
    d678:	subs	r2, r2, r6
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
			p += avail;
    d67a:	add	sl, r6
			rx_available -= avail;
    d67c:	str.w	r2, [fp]
			count += avail;
			rx_tail = tail;
    d680:	ldr	r2, [pc, #32]	; (d6a4 <usb_serial_read+0xcc>)
    d682:	strb	r3, [r2, #0]
			rx_queue_transfer(i);
    d684:	bl	d198 <rx_queue_transfer>

	NVIC_DISABLE_IRQ(IRQ_USB1);
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
    d688:	cmp	r9, r7
    d68a:	bls.n	d694 <usb_serial_read+0xbc>
    d68c:	ldr	r3, [pc, #24]	; (d6a8 <usb_serial_read+0xd0>)
    d68e:	ldrb	r3, [r3, #0]
    d690:	cmp	r4, r3
    d692:	bne.n	d602 <usb_serial_read+0x2a>
    d694:	mov	r0, r7
    d696:	b.n	d65e <usb_serial_read+0x86>
    d698:	mov	r0, r1
    d69a:	b.n	d65e <usb_serial_read+0x86>
    d69c:	movs	r0, #0
    d69e:	b.n	d65e <usb_serial_read+0x86>
    d6a0:	.word	0xe000e18c
    d6a4:	.word	0x20006140
    d6a8:	.word	0x20006164
    d6ac:	.word	0x20006024
    d6b0:	.word	0x20006144
    d6b4:	.word	0x20006150
    d6b8:	.word	0x20200000
    d6bc:	.word	0xe000e10c
    d6c0:	.word	0x20006160

0000d6c4 <usb_serial_peekchar>:
}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
    d6c4:	ldr	r3, [pc, #44]	; (d6f4 <usb_serial_peekchar+0x30>)
	if (tail == rx_head) return -1;
    d6c6:	ldr	r2, [pc, #48]	; (d6f8 <usb_serial_peekchar+0x34>)
}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
    d6c8:	ldrb	r3, [r3, #0]
	if (tail == rx_head) return -1;
    d6ca:	ldrb	r2, [r2, #0]
}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
    d6cc:	uxtb	r3, r3
	if (tail == rx_head) return -1;
    d6ce:	cmp	r3, r2
    d6d0:	beq.n	d6ee <usb_serial_peekchar+0x2a>
	if (++tail > RX_NUM) tail = 0;
    d6d2:	adds	r3, #1
	uint32_t i = rx_list[tail];
    d6d4:	ldr	r0, [pc, #36]	; (d6fc <usb_serial_peekchar+0x38>)
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    d6d6:	ldr	r2, [pc, #40]	; (d700 <usb_serial_peekchar+0x3c>)
// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
	if (tail == rx_head) return -1;
	if (++tail > RX_NUM) tail = 0;
    d6d8:	cmp	r3, #9
	uint32_t i = rx_list[tail];
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    d6da:	ldr	r1, [pc, #40]	; (d704 <usb_serial_peekchar+0x40>)
// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
	if (tail == rx_head) return -1;
	if (++tail > RX_NUM) tail = 0;
    d6dc:	it	cs
    d6de:	movcs	r3, #0
	uint32_t i = rx_list[tail];
    d6e0:	ldrb	r3, [r0, r3]
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    d6e2:	ldrh.w	r1, [r1, r3, lsl #1]
    d6e6:	add.w	r3, r2, r3, lsl #9
    d6ea:	ldrb	r0, [r3, r1]
    d6ec:	bx	lr

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
	if (tail == rx_head) return -1;
    d6ee:	mov.w	r0, #4294967295
	if (++tail > RX_NUM) tail = 0;
	uint32_t i = rx_list[tail];
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
}
    d6f2:	bx	lr
    d6f4:	.word	0x20006140
    d6f8:	.word	0x20006164
    d6fc:	.word	0x20006144
    d700:	.word	0x20200000
    d704:	.word	0x20006024

0000d708 <usb_serial_available>:

// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	return rx_available;
    d708:	ldr	r3, [pc, #4]	; (d710 <usb_serial_available+0x8>)
    d70a:	ldr	r0, [r3, #0]
}
    d70c:	bx	lr
    d70e:	nop
    d710:	.word	0x20006160

0000d714 <usb_serial_flush_input>:

// discard any buffered input
void usb_serial_flush_input(void)
{
    d714:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t tail = rx_tail;
    d718:	ldr	r6, [pc, #84]	; (d770 <usb_serial_flush_input+0x5c>)
	while (tail != rx_head) {
    d71a:	ldr	r5, [pc, #88]	; (d774 <usb_serial_flush_input+0x60>)
}

// discard any buffered input
void usb_serial_flush_input(void)
{
	uint32_t tail = rx_tail;
    d71c:	ldrb	r4, [r6, #0]
	while (tail != rx_head) {
    d71e:	ldrb	r3, [r5, #0]
}

// discard any buffered input
void usb_serial_flush_input(void)
{
	uint32_t tail = rx_tail;
    d720:	uxtb	r4, r4
	while (tail != rx_head) {
    d722:	cmp	r4, r3
    d724:	beq.n	d76a <usb_serial_flush_input+0x56>
    d726:	ldr.w	r9, [pc, #84]	; d77c <usb_serial_flush_input+0x68>
    d72a:	ldr.w	fp, [pc, #84]	; d780 <usb_serial_flush_input+0x6c>
    d72e:	ldr.w	r8, [pc, #84]	; d784 <usb_serial_flush_input+0x70>
    d732:	ldr	r7, [pc, #68]	; (d778 <usb_serial_flush_input+0x64>)
		if (++tail > RX_NUM) tail = 0;
    d734:	adds	r4, #1
    d736:	cmp	r4, #8
    d738:	uxtb.w	sl, r4
    d73c:	bls.n	d742 <usb_serial_flush_input+0x2e>
    d73e:	movs	r4, #0
    d740:	mov	sl, r4
		uint32_t i = rx_list[tail];
    d742:	ldrb.w	r1, [r9, r4]
		rx_available -= rx_count[i] - rx_index[i];
    d746:	ldr.w	r2, [fp]
    d74a:	ldrh.w	r3, [r8, r1, lsl #1]
		rx_queue_transfer(i);
    d74e:	mov	r0, r1
{
	uint32_t tail = rx_tail;
	while (tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
		rx_available -= rx_count[i] - rx_index[i];
    d750:	ldrh.w	r1, [r7, r1, lsl #1]
    d754:	subs	r3, r3, r1
    d756:	subs	r3, r2, r3
    d758:	str.w	r3, [fp]
		rx_queue_transfer(i);
    d75c:	bl	d198 <rx_queue_transfer>
		rx_tail = tail;
    d760:	strb.w	sl, [r6]

// discard any buffered input
void usb_serial_flush_input(void)
{
	uint32_t tail = rx_tail;
	while (tail != rx_head) {
    d764:	ldrb	r3, [r5, #0]
    d766:	cmp	r4, r3
    d768:	bne.n	d734 <usb_serial_flush_input+0x20>
    d76a:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d76e:	nop
    d770:	.word	0x20006140
    d774:	.word	0x20006164
    d778:	.word	0x20006024
    d77c:	.word	0x20006144
    d780:	.word	0x20006160
    d784:	.word	0x20006150

0000d788 <usb_serial_getchar>:
}


// get the next character, or -1 if nothing received
int usb_serial_getchar(void)
{
    d788:	push	{lr}
    d78a:	sub	sp, #12
	uint8_t c;
	if (usb_serial_read(&c, 1)) return c;
    d78c:	movs	r1, #1
    d78e:	add.w	r0, sp, #7
    d792:	bl	d5d8 <usb_serial_read>
    d796:	cbz	r0, d7a2 <usb_serial_getchar+0x1a>
    d798:	ldrb.w	r0, [sp, #7]
	return -1;
}
    d79c:	add	sp, #12
    d79e:	ldr.w	pc, [sp], #4
// get the next character, or -1 if nothing received
int usb_serial_getchar(void)
{
	uint8_t c;
	if (usb_serial_read(&c, 1)) return c;
	return -1;
    d7a2:	mov.w	r0, #4294967295
    d7a6:	b.n	d79c <usb_serial_getchar+0x14>

0000d7a8 <usb_serial_putchar>:
int usb_serial_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
    d7a8:	ldr	r3, [pc, #36]	; (d7d0 <usb_serial_putchar+0x28>)
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    d7aa:	push	{lr}
    d7ac:	sub	sp, #12
int usb_serial_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
    d7ae:	ldrb	r3, [r3, #0]
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    d7b0:	strb.w	r0, [sp, #7]
int usb_serial_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
    d7b4:	cbnz	r3, d7c0 <usb_serial_putchar+0x18>
    d7b6:	and.w	r0, r3, #255	; 0xff

// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
	return usb_serial_write(&c, 1);
}
    d7ba:	add	sp, #12
    d7bc:	ldr.w	pc, [sp], #4
    d7c0:	movs	r1, #1
    d7c2:	add.w	r0, sp, #7
    d7c6:	bl	d350 <usb_serial_write.part.1>
    d7ca:	add	sp, #12
    d7cc:	ldr.w	pc, [sp], #4
    d7d0:	.word	0x20006238

0000d7d4 <usb_serial_write>:
int usb_serial_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
    d7d4:	ldr	r3, [pc, #16]	; (d7e8 <usb_serial_write+0x14>)
    d7d6:	ldrb	r3, [r3, #0]
    d7d8:	and.w	r2, r3, #255	; 0xff
    d7dc:	cbz	r3, d7e2 <usb_serial_write+0xe>
    d7de:	b.w	d350 <usb_serial_write.part.1>
			size = 0;
			timer_start_oneshot();
		}
	}
	return sent;
}
    d7e2:	mov	r0, r2
    d7e4:	bx	lr
    d7e6:	nop
    d7e8:	.word	0x20006238

0000d7ec <usb_serial_write_buffer_free>:

int usb_serial_write_buffer_free(void)
{
    d7ec:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t sum = 0;
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
    d7f0:	movs	r4, #0
}

int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
	tx_noautoflush = 1;
    d7f2:	ldr.w	r8, [pc, #64]	; d834 <usb_serial_write_buffer_free+0x48>
    d7f6:	movs	r3, #1
    d7f8:	ldr	r5, [pc, #48]	; (d82c <usb_serial_write_buffer_free+0x40>)
	return sent;
}

int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
    d7fa:	mov	r7, r4
    d7fc:	ldr	r6, [pc, #48]	; (d830 <usb_serial_write_buffer_free+0x44>)
	tx_noautoflush = 1;
    d7fe:	strb.w	r3, [r8]
	for (uint32_t i=0; i < TX_NUM; i++) {
		if (i == tx_head) continue;
    d802:	ldrb	r3, [r6, #0]
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
    d804:	mov	r0, r5
    d806:	adds	r5, #32
int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
		if (i == tx_head) continue;
    d808:	cmp	r3, r4

int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
    d80a:	add.w	r4, r4, #1
		if (i == tx_head) continue;
    d80e:	beq.n	d81c <usb_serial_write_buffer_free+0x30>
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
    d810:	bl	e498 <usb_transfer_status>
    d814:	lsls	r3, r0, #24
    d816:	it	pl
    d818:	addpl.w	r7, r7, #2048	; 0x800

int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
    d81c:	cmp	r4, #4
    d81e:	bne.n	d802 <usb_serial_write_buffer_free+0x16>
		if (i == tx_head) continue;
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
	}
	tx_noautoflush = 0;
    d820:	movs	r3, #0
	return sum;
}
    d822:	mov	r0, r7
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
		if (i == tx_head) continue;
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
	}
	tx_noautoflush = 0;
    d824:	strb.w	r3, [r8]
	return sum;
}
    d828:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d82c:	.word	0x20006180
    d830:	.word	0x20006037
    d834:	.word	0x20006036

0000d838 <usb_serial_flush_output>:

void usb_serial_flush_output(void)
{
    d838:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

	if (!usb_configuration) return;
    d83c:	ldr	r3, [pc, #124]	; (d8bc <usb_serial_flush_output+0x84>)
    d83e:	ldrb	r3, [r3, #0]
    d840:	cbz	r3, d848 <usb_serial_flush_output+0x10>
	if (tx_available == 0) return;
    d842:	ldr	r5, [pc, #124]	; (d8c0 <usb_serial_flush_output+0x88>)
    d844:	ldrh	r2, [r5, #0]
    d846:	cbnz	r2, d84c <usb_serial_flush_output+0x14>
    d848:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	tx_noautoflush = 1;
	transfer_t *xfer = tx_transfer + tx_head;
    d84c:	ldr.w	r8, [pc, #132]	; d8d4 <usb_serial_flush_output+0x9c>
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
    d850:	rsb	r9, r2, #2048	; 0x800
{

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
	transfer_t *xfer = tx_transfer + tx_head;
    d854:	ldr	r6, [pc, #108]	; (d8c4 <usb_serial_flush_output+0x8c>)
void usb_serial_flush_output(void)
{

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
    d856:	mov.w	lr, #1
	transfer_t *xfer = tx_transfer + tx_head;
    d85a:	ldrb.w	r1, [r8]
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    d85e:	mov	r2, r9

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
	transfer_t *xfer = tx_transfer + tx_head;
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    d860:	ldr	r4, [pc, #100]	; (d8c8 <usb_serial_flush_output+0x90>)
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    d862:	movs	r3, #0
{

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
	transfer_t *xfer = tx_transfer + tx_head;
    d864:	add.w	r6, r6, r1, lsl #5
void usb_serial_flush_output(void)
{

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
    d868:	ldr	r7, [pc, #96]	; (d8cc <usb_serial_flush_output+0x94>)
	transfer_t *xfer = tx_transfer + tx_head;
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    d86a:	add.w	r4, r4, r1, lsl #11
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    d86e:	mov	r0, r6
void usb_serial_flush_output(void)
{

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
    d870:	strb.w	lr, [r7]
	transfer_t *xfer = tx_transfer + tx_head;
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    d874:	mov	r1, r4
    d876:	bl	e41c <usb_prepare_transfer>
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
    d87a:	add.w	r2, r9, r4
// any cached data written to memory, and then removed from the cache,
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    d87e:	bic.w	r1, r4, #31
	uint32_t end_addr = (uint32_t)addr + size;
	asm volatile("": : :"memory");
	asm("dsb");
    d882:	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    d886:	ldr	r3, [pc, #72]	; (d8d0 <usb_serial_flush_output+0x98>)
    d888:	str	r1, [r3, #0]
		location += 32;
    d88a:	adds	r1, #32
	} while (location < end_addr);
    d88c:	cmp	r2, r1
    d88e:	bhi.n	d888 <usb_serial_flush_output+0x50>
	asm("dsb");
    d890:	dsb	sy
	asm("isb");
    d894:	isb	sy
	arm_dcache_flush_delete(txbuf, txnum);
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    d898:	movs	r0, #3
    d89a:	mov	r1, r6
    d89c:	bl	e44c <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    d8a0:	ldrb.w	r3, [r8]
    d8a4:	ldr	r2, [pc, #44]	; (d8d4 <usb_serial_flush_output+0x9c>)
    d8a6:	adds	r3, #1
    d8a8:	uxtb	r3, r3
    d8aa:	cmp	r3, #3
    d8ac:	it	hi
    d8ae:	movhi	r3, #0
    d8b0:	strb	r3, [r2, #0]
	tx_available = 0;
    d8b2:	movs	r3, #0
    d8b4:	strh	r3, [r5, #0]
	tx_noautoflush = 0;
    d8b6:	strb	r3, [r7, #0]
    d8b8:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    d8bc:	.word	0x20006238
    d8c0:	.word	0x20006166
    d8c4:	.word	0x20006180
    d8c8:	.word	0x20201000
    d8cc:	.word	0x20006036
    d8d0:	.word	0xe000ef70
    d8d4:	.word	0x20006037

0000d8d8 <set_arm_clock>:
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
    d8d8:	ldr	r2, [pc, #600]	; (db34 <set_arm_clock+0x25c>)
//  CCM_CBCDR  AHB_PODF
//  CCM_CBCDR  SEMC_PODF

uint32_t set_arm_clock(uint32_t frequency)
{
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    d8da:	ldr	r3, [pc, #604]	; (db38 <set_arm_clock+0x260>)
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
    d8dc:	cmp	r0, r2
//  CCM_CBCMR  PERIPH2_CLK_SEL
//  CCM_CBCDR  AHB_PODF
//  CCM_CBCDR  SEMC_PODF

uint32_t set_arm_clock(uint32_t frequency)
{
    d8de:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;
    d8e2:	ldr	r4, [pc, #600]	; (db3c <set_arm_clock+0x264>)
//  CCM_CBCDR  AHB_PODF
//  CCM_CBCDR  SEMC_PODF

uint32_t set_arm_clock(uint32_t frequency)
{
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    d8e4:	ldr.w	lr, [r3, #20]
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
    d8e8:	ldr	r1, [r3, #24]
	uint32_t dcdc = DCDC_REG3;
    d8ea:	ldr	r6, [r4, #12]

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
    d8ec:	bls.n	d928 <set_arm_clock+0x50>
		voltage = 1250; // 1.25V
#if defined(OVERCLOCK_STEPSIZE) && defined(OVERCLOCK_MAX_VOLT)
		if (frequency > 600000000) {
    d8ee:	ldr	r3, [pc, #592]	; (db40 <set_arm_clock+0x268>)
    d8f0:	cmp	r0, r3
    d8f2:	bls.w	db20 <set_arm_clock+0x248>
			voltage += ((frequency - 600000000) / OVERCLOCK_STEPSIZE) * 25;
    d8f6:	ldr	r3, [pc, #588]	; (db44 <set_arm_clock+0x26c>)
    d8f8:	movw	r5, #1575	; 0x627
    d8fc:	ldr	r7, [pc, #584]	; (db48 <set_arm_clock+0x270>)
    d8fe:	add	r3, r0
    d900:	ldr	r4, [pc, #584]	; (db4c <set_arm_clock+0x274>)
    d902:	lsrs	r2, r3, #8
    d904:	umull	r3, r2, r7, r2
    d908:	lsrs	r3, r2, #7
    d90a:	add.w	r3, r3, r3, lsl #2
    d90e:	add.w	r2, r3, r3, lsl #2
    d912:	addw	r3, r2, #1250	; 0x4e2
    d916:	cmp	r3, r5
    d918:	it	cs
    d91a:	movcs	r3, r5
    d91c:	sub.w	r3, r3, #800	; 0x320
    d920:	umull	r3, r5, r4, r3
    d924:	lsrs	r5, r5, #3
    d926:	b.n	d932 <set_arm_clock+0x5a>
			if (voltage > OVERCLOCK_MAX_VOLT) voltage = OVERCLOCK_MAX_VOLT;
		}
#endif
	} else if (frequency <= 24000000) {
    d928:	ldr	r5, [pc, #548]	; (db50 <set_arm_clock+0x278>)
    d92a:	cmp	r0, r5
    d92c:	ite	ls
    d92e:	movls	r5, #6
    d930:	movhi	r5, #14
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    d932:	ldr	r2, [pc, #516]	; (db38 <set_arm_clock+0x260>)
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    d934:	and.w	r7, r6, #31
	} else if (frequency <= 24000000) {
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    d938:	ldr.w	r3, [r2, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    d93c:	cmp	r7, r5
	} else if (frequency <= 24000000) {
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    d93e:	orr.w	r3, r3, #192	; 0xc0
    d942:	str.w	r3, [r2, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    d946:	bcs.n	d95e <set_arm_clock+0x86>
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    d948:	ldr	r3, [pc, #496]	; (db3c <set_arm_clock+0x264>)

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    d94a:	bic.w	r6, r6, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    d94e:	mov	r2, r3
	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    d950:	orrs	r6, r5
		DCDC_REG3 = dcdc;
    d952:	str	r6, [r3, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    d954:	ldr	r3, [r2, #0]
    d956:	cmp	r3, #0
    d958:	bge.n	d954 <set_arm_clock+0x7c>
    d95a:	and.w	r7, r6, #31
	}

	if (!(cbcdr & CCM_CBCDR_PERIPH_CLK_SEL)) {
    d95e:	ands.w	r3, lr, #33554432	; 0x2000000
    d962:	bne.n	d9c8 <set_arm_clock+0xf0>
		printf("need to switch to alternate clock during reconfigure of ARM PLL\n");
		const uint32_t need1s = CCM_ANALOG_PLL_USB1_ENABLE | CCM_ANALOG_PLL_USB1_POWER |
			CCM_ANALOG_PLL_USB1_LOCK | CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
		uint32_t sel, div;
		if ((CCM_ANALOG_PLL_USB1 & need1s) == need1s) {
    d964:	ldr	r4, [pc, #492]	; (db54 <set_arm_clock+0x27c>)
    d966:	ldr	r2, [pc, #496]	; (db58 <set_arm_clock+0x280>)
    d968:	ldr.w	ip, [r4, #16]
    d96c:	mov	r4, r2
    d96e:	and.w	r2, ip, r2
    d972:	cmp	r2, r4
    d974:	itet	eq
    d976:	moveq.w	r3, #402653184	; 0x18000000
    d97a:	movne.w	r2, #4096	; 0x1000
    d97e:	moveq	r2, #0
		} else {
			printf("USB PLL is off, use 24 MHz crystal\n");
			sel = 1;
			div = 0;
		}
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
    d980:	eor.w	r4, lr, r3
    d984:	tst.w	r4, #939524096	; 0x38000000
    d988:	beq.n	d99c <set_arm_clock+0xc4>
			// PERIPH_CLK2 divider needs to be changed
			cbcdr &= ~CCM_CBCDR_PERIPH_CLK2_PODF_MASK;
    d98a:	bic.w	lr, lr, #939524096	; 0x38000000
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
    d98e:	and.w	r3, r3, #939524096	; 0x38000000
			CCM_CBCDR = cbcdr;
    d992:	ldr	r4, [pc, #420]	; (db38 <set_arm_clock+0x260>)
			div = 0;
		}
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
			// PERIPH_CLK2 divider needs to be changed
			cbcdr &= ~CCM_CBCDR_PERIPH_CLK2_PODF_MASK;
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
    d994:	orr.w	lr, r3, lr
			CCM_CBCDR = cbcdr;
    d998:	str.w	lr, [r4, #20]
		}
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
    d99c:	eor.w	r3, r1, r2
    d9a0:	tst.w	r3, #12288	; 0x3000
    d9a4:	beq.n	d9b8 <set_arm_clock+0xe0>
			// PERIPH_CLK2 source select needs to be changed
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
			CCM_CBCMR = cbcmr;
    d9a6:	ldr	r3, [pc, #400]	; (db38 <set_arm_clock+0x260>)
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
			CCM_CBCDR = cbcdr;
		}
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
			// PERIPH_CLK2 source select needs to be changed
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
    d9a8:	bic.w	r1, r1, #12288	; 0x3000
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
    d9ac:	orrs	r1, r2
			CCM_CBCMR = cbcmr;
			while (CCM_CDHIPR & CCM_CDHIPR_PERIPH2_CLK_SEL_BUSY) ; // wait
    d9ae:	mov	r2, r3
		}
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
			// PERIPH_CLK2 source select needs to be changed
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
			CCM_CBCMR = cbcmr;
    d9b0:	str	r1, [r3, #24]
			while (CCM_CDHIPR & CCM_CDHIPR_PERIPH2_CLK_SEL_BUSY) ; // wait
    d9b2:	ldr	r3, [r2, #72]	; 0x48
    d9b4:	lsls	r4, r3, #28
    d9b6:	bmi.n	d9b2 <set_arm_clock+0xda>
		}
		// switch over to PERIPH_CLK2
		cbcdr |= CCM_CBCDR_PERIPH_CLK_SEL;
    d9b8:	orr.w	lr, lr, #33554432	; 0x2000000
		CCM_CBCDR = cbcdr;
    d9bc:	ldr	r2, [pc, #376]	; (db38 <set_arm_clock+0x260>)
    d9be:	str.w	lr, [r2, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    d9c2:	ldr	r3, [r2, #72]	; 0x48
    d9c4:	lsls	r1, r3, #26
    d9c6:	bmi.n	d9c2 <set_arm_clock+0xea>

	// TODO: check if PLL2 running, can 352, 396 or 528 can work? (no need for ARM PLL)

	// DIV_SELECT: 54-108 = official range 648 to 1296 in 12 MHz steps
	uint32_t div_arm = 1;
	uint32_t div_ahb = 1;
    d9c8:	movs	r1, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    d9ca:	ldr	r4, [pc, #400]	; (db5c <set_arm_clock+0x284>)
	}

	// TODO: check if PLL2 running, can 352, 396 or 528 can work? (no need for ARM PLL)

	// DIV_SELECT: 54-108 = official range 648 to 1296 in 12 MHz steps
	uint32_t div_arm = 1;
    d9cc:	mov	r2, r1
	uint32_t div_ahb = 1;
	while (frequency * div_arm * div_ahb < 648000000) {
    d9ce:	mul.w	r3, r1, r2
    d9d2:	mul.w	r3, r0, r3
    d9d6:	cmp	r3, r4
    d9d8:	bhi.n	d9ee <set_arm_clock+0x116>
		if (div_arm < 8) {
    d9da:	cmp	r2, #7
    d9dc:	bhi.w	db0a <set_arm_clock+0x232>
			div_arm = div_arm + 1;
    d9e0:	adds	r2, #1
	// TODO: check if PLL2 running, can 352, 396 or 528 can work? (no need for ARM PLL)

	// DIV_SELECT: 54-108 = official range 648 to 1296 in 12 MHz steps
	uint32_t div_arm = 1;
	uint32_t div_ahb = 1;
	while (frequency * div_arm * div_ahb < 648000000) {
    d9e2:	mul.w	r3, r1, r2
    d9e6:	mul.w	r3, r0, r3
    d9ea:	cmp	r3, r4
    d9ec:	bls.n	d9da <set_arm_clock+0x102>
			} else {
				break;
			}
		}
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    d9ee:	ldr	r0, [pc, #368]	; (db60 <set_arm_clock+0x288>)
    d9f0:	ldr	r4, [pc, #368]	; (db64 <set_arm_clock+0x28c>)
    d9f2:	add	r0, r3
    d9f4:	umull	r0, r3, r4, r0
    d9f8:	lsrs	r3, r3, #20
	if (mult > 108) mult = 108;
    d9fa:	cmp	r3, #108	; 0x6c
    d9fc:	bhi.w	db16 <set_arm_clock+0x23e>
	if (mult < 54) mult = 54;
    da00:	cmp	r3, #53	; 0x35
    da02:	bhi.w	db24 <set_arm_clock+0x24c>
    da06:	ldr.w	r8, [pc, #392]	; db90 <set_arm_clock+0x2b8>
    da0a:	movs	r3, #54	; 0x36
    da0c:	ldr	r0, [pc, #344]	; (db68 <set_arm_clock+0x290>)

	printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	const uint32_t arm_pll_mask = CCM_ANALOG_PLL_ARM_LOCK | CCM_ANALOG_PLL_ARM_BYPASS |
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    da0e:	ldr.w	ip, [pc, #324]	; db54 <set_arm_clock+0x27c>
    da12:	ldr	r4, [pc, #344]	; (db6c <set_arm_clock+0x294>)
    da14:	ldr.w	r9, [ip]
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
	if (mult > 108) mult = 108;
	if (mult < 54) mult = 54;
	printf("Freq: 12 MHz * %u / %u / %u\n", mult, div_arm, div_ahb);
	frequency = mult * 12000000 / div_arm / div_ahb;
    da18:	udiv	r0, r0, r2

	printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	const uint32_t arm_pll_mask = CCM_ANALOG_PLL_ARM_LOCK | CCM_ANALOG_PLL_ARM_BYPASS |
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    da1c:	and.w	r4, r9, r4
    da20:	cmp	r4, r8
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
	if (mult > 108) mult = 108;
	if (mult < 54) mult = 54;
	printf("Freq: 12 MHz * %u / %u / %u\n", mult, div_arm, div_ahb);
	frequency = mult * 12000000 / div_arm / div_ahb;
    da22:	udiv	r0, r0, r1

	printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	const uint32_t arm_pll_mask = CCM_ANALOG_PLL_ARM_LOCK | CCM_ANALOG_PLL_ARM_BYPASS |
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    da26:	beq.n	da40 <set_arm_clock+0x168>
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
		printf("ARM PLL needs reconfigure\n");
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
		// TODO: delay needed?
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
    da28:	orr.w	r3, r3, #8192	; 0x2000
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
		printf("ARM PLL needs reconfigure\n");
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
    da2c:	mov.w	r8, #4096	; 0x1000
		// TODO: delay needed?
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
		while (!(CCM_ANALOG_PLL_ARM & CCM_ANALOG_PLL_ARM_LOCK)) ; // wait for lock
    da30:	mov	r4, ip
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
		printf("ARM PLL needs reconfigure\n");
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
    da32:	str.w	r8, [ip]
		// TODO: delay needed?
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
    da36:	str.w	r3, [ip]
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
		while (!(CCM_ANALOG_PLL_ARM & CCM_ANALOG_PLL_ARM_LOCK)) ; // wait for lock
    da3a:	ldr	r3, [r4, #0]
    da3c:	cmp	r3, #0
    da3e:	bge.n	da3a <set_arm_clock+0x162>
		printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	} else {
		printf("ARM PLL already running at required frequency\n");
	}

	if ((CCM_CACRR & CCM_CACRR_ARM_PODF_MASK) != (div_arm - 1)) {
    da40:	ldr.w	ip, [pc, #244]	; db38 <set_arm_clock+0x260>
    da44:	subs	r2, #1
    da46:	ldr.w	r3, [ip, #16]
    da4a:	and.w	r3, r3, #7
    da4e:	cmp	r3, r2
    da50:	beq.n	da62 <set_arm_clock+0x18a>
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
    da52:	and.w	r2, r2, #7
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
    da56:	mov	r4, ip
	} else {
		printf("ARM PLL already running at required frequency\n");
	}

	if ((CCM_CACRR & CCM_CACRR_ARM_PODF_MASK) != (div_arm - 1)) {
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
    da58:	str.w	r2, [ip, #16]
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
    da5c:	ldr	r3, [r4, #72]	; 0x48
    da5e:	lsls	r3, r3, #15
    da60:	bmi.n	da5c <set_arm_clock+0x184>
	}

	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    da62:	subs	r1, #1
    da64:	lsls	r1, r1, #10
    da66:	eor.w	r3, lr, r1
    da6a:	tst.w	r3, #7168	; 0x1c00
    da6e:	beq.n	da8a <set_arm_clock+0x1b2>
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
		CCM_CBCDR = cbcdr;
    da70:	ldr	r3, [pc, #196]	; (db38 <set_arm_clock+0x260>)
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
	}

	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
    da72:	bic.w	lr, lr, #7168	; 0x1c00
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    da76:	and.w	r1, r1, #7168	; 0x1c00
		CCM_CBCDR = cbcdr;
		while (CCM_CDHIPR & CCM_CDHIPR_AHB_PODF_BUSY); // wait
    da7a:	mov	r2, r3
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
	}

	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    da7c:	orr.w	lr, r1, lr
		CCM_CBCDR = cbcdr;
    da80:	str.w	lr, [r3, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_AHB_PODF_BUSY); // wait
    da84:	ldr	r3, [r2, #72]	; 0x48
    da86:	lsls	r1, r3, #30
    da88:	bmi.n	da84 <set_arm_clock+0x1ac>
	}

	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    da8a:	ldr	r3, [pc, #228]	; (db70 <set_arm_clock+0x298>)
    da8c:	ldr	r1, [pc, #228]	; (db74 <set_arm_clock+0x29c>)
    da8e:	add	r3, r0
    da90:	lsrs	r3, r3, #7
    da92:	umull	r3, r1, r1, r3
    da96:	lsrs	r1, r1, #12
    da98:	cmp	r1, #4
    da9a:	it	cs
    da9c:	movcs	r1, #4
	if (div_ipg > 4) div_ipg = 4;
	if ((cbcdr & CCM_CBCDR_IPG_PODF_MASK) != (CCM_CBCDR_IPG_PODF(div_ipg - 1))) {
    da9e:	subs	r3, r1, #1
    daa0:	lsls	r3, r3, #8
    daa2:	eor.w	r2, lr, r3
    daa6:	tst.w	r2, #768	; 0x300
    daaa:	beq.n	dabc <set_arm_clock+0x1e4>
		cbcdr &= ~CCM_CBCDR_IPG_PODF_MASK;
    daac:	bic.w	lr, lr, #768	; 0x300
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    dab0:	and.w	r3, r3, #768	; 0x300
		// TODO: how to safely change IPG_PODF ??
		CCM_CBCDR = cbcdr;
    dab4:	ldr	r2, [pc, #128]	; (db38 <set_arm_clock+0x260>)

	uint32_t div_ipg = (frequency + 149999999) / 150000000;
	if (div_ipg > 4) div_ipg = 4;
	if ((cbcdr & CCM_CBCDR_IPG_PODF_MASK) != (CCM_CBCDR_IPG_PODF(div_ipg - 1))) {
		cbcdr &= ~CCM_CBCDR_IPG_PODF_MASK;
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    dab6:	orr.w	r3, r3, lr
		// TODO: how to safely change IPG_PODF ??
		CCM_CBCDR = cbcdr;
    daba:	str	r3, [r2, #20]
	}

	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
    dabc:	ldr	r3, [pc, #120]	; (db38 <set_arm_clock+0x260>)
    dabe:	ldr	r4, [r3, #20]
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    dac0:	mov	r2, r3
		CCM_CBCDR = cbcdr;
	}

	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
    dac2:	bic.w	r4, r4, #33554432	; 0x2000000
    dac6:	str	r4, [r3, #20]
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    dac8:	ldr	r3, [r2, #72]	; 0x48
    daca:	lsls	r3, r3, #26
    dacc:	bmi.n	dac8 <set_arm_clock+0x1f0>

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    dace:	ldr	r3, [pc, #168]	; (db78 <set_arm_clock+0x2a0>)
    dad0:	mov.w	r2, #4294967295
	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
    dad4:	ldr	r4, [pc, #164]	; (db7c <set_arm_clock+0x2a4>)
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);

	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    dad6:	cmp	r5, r7
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    dad8:	umull	lr, r3, r3, r0
	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
    dadc:	str	r0, [r4, #0]
	F_BUS_ACTUAL = frequency / div_ipg;
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    dade:	mov.w	r3, r3, lsr #18
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
    dae2:	ldr	r4, [pc, #156]	; (db80 <set_arm_clock+0x2a8>)
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    dae4:	udiv	r3, r2, r3
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
    dae8:	udiv	r1, r0, r1
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    daec:	ldr	r2, [pc, #148]	; (db84 <set_arm_clock+0x2ac>)
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
    daee:	str	r1, [r4, #0]
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    daf0:	str	r3, [r2, #0]

	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    daf2:	bcs.n	db06 <set_arm_clock+0x22e>
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    daf4:	ldr	r3, [pc, #68]	; (db3c <set_arm_clock+0x264>)
	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    daf6:	bic.w	r6, r6, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    dafa:	mov	r2, r3

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    dafc:	orrs	r6, r5
		DCDC_REG3 = dcdc;
    dafe:	str	r6, [r3, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    db00:	ldr	r3, [r2, #0]
    db02:	cmp	r3, #0
    db04:	bge.n	db00 <set_arm_clock+0x228>
	}

	return frequency;
}
    db06:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	uint32_t div_ahb = 1;
	while (frequency * div_arm * div_ahb < 648000000) {
		if (div_arm < 8) {
			div_arm = div_arm + 1;
		} else {
			if (div_ahb < 5) {
    db0a:	cmp	r1, #4
    db0c:	bhi.w	d9ee <set_arm_clock+0x116>
				div_ahb = div_ahb + 1;
    db10:	adds	r1, #1
				div_arm = 1;
    db12:	movs	r2, #1
    db14:	b.n	d9ce <set_arm_clock+0xf6>
    db16:	ldr.w	r8, [pc, #124]	; db94 <set_arm_clock+0x2bc>
				break;
			}
		}
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
	if (mult > 108) mult = 108;
    db1a:	movs	r3, #108	; 0x6c
    db1c:	ldr	r0, [pc, #104]	; (db88 <set_arm_clock+0x2b0>)
    db1e:	b.n	da0e <set_arm_clock+0x136>
    db20:	movs	r5, #18
    db22:	b.n	d932 <set_arm_clock+0x5a>
    db24:	ldr	r0, [pc, #100]	; (db8c <set_arm_clock+0x2b4>)
    db26:	ldr.w	r8, [pc, #112]	; db98 <set_arm_clock+0x2c0>
    db2a:	mul.w	r0, r0, r3
    db2e:	orr.w	r8, r3, r8
    db32:	b.n	da0e <set_arm_clock+0x136>
    db34:	.word	0x1f78a400
    db38:	.word	0x400fc000
    db3c:	.word	0x40080000
    db40:	.word	0x23c34600
    db44:	.word	0xdc3cba00
    db48:	.word	0x004cb223
    db4c:	.word	0x51eb851f
    db50:	.word	0x016e3600
    db54:	.word	0x400d8000
    db58:	.word	0x80003040
    db5c:	.word	0x269fb1ff
    db60:	.word	0x005b8d80
    db64:	.word	0x165e9f81
    db68:	.word	0x269fb200
    db6c:	.word	0x8001307f
    db70:	.word	0x08f0d17f
    db74:	.word	0x00e5109f
    db78:	.word	0x431bde83
    db7c:	.word	0x20000c24
    db80:	.word	0x20000c20
    db84:	.word	0x20006240
    db88:	.word	0x4d3f6400
    db8c:	.word	0x00b71b00
    db90:	.word	0x80002036
    db94:	.word	0x8000206c
    db98:	.word	0x80002000

0000db9c <schedule_transfer>:
{
	// when we stop at 6, why is the last transfer missing from the USB output?
	//if (transfer_log_count >= 6) return;

	//uint32_t ret = (*(const uint8_t *)transfer->pointer0) << 8;
	if (endpoint->callback_function) {
    db9c:	ldr	r3, [r0, #56]	; 0x38
	}
}
#endif

static void schedule_transfer(endpoint_t *endpoint, uint32_t epmask, transfer_t *transfer)
{
    db9e:	push	{r4, r5, r6, r7}
	// when we stop at 6, why is the last transfer missing from the USB output?
	//if (transfer_log_count >= 6) return;

	//uint32_t ret = (*(const uint8_t *)transfer->pointer0) << 8;
	if (endpoint->callback_function) {
    dba0:	cbz	r3, dbaa <schedule_transfer+0xe>
		transfer->status |= (1<<15);
    dba2:	ldr	r3, [r2, #4]
    dba4:	orr.w	r3, r3, #32768	; 0x8000
    dba8:	str	r3, [r2, #4]
	}
	__disable_irq();
    dbaa:	cpsid	i
	//digitalWriteFast(1, HIGH);
	// Executing A Transfer Descriptor, page 2468 (RT1060 manual, Rev 1, 12/2018)
	transfer_t *last = endpoint->last_transfer;
    dbac:	ldr	r4, [r0, #52]	; 0x34
	if (last) {
    dbae:	cbz	r4, dbe8 <schedule_transfer+0x4c>
		last->next = (uint32_t)transfer;
		if (USB1_ENDPTPRIME & epmask) goto end;
    dbb0:	ldr	r3, [pc, #80]	; (dc04 <schedule_transfer+0x68>)
	__disable_irq();
	//digitalWriteFast(1, HIGH);
	// Executing A Transfer Descriptor, page 2468 (RT1060 manual, Rev 1, 12/2018)
	transfer_t *last = endpoint->last_transfer;
	if (last) {
		last->next = (uint32_t)transfer;
    dbb2:	str	r2, [r4, #0]
		if (USB1_ENDPTPRIME & epmask) goto end;
    dbb4:	ldr.w	r4, [r3, #432]	; 0x1b0
    dbb8:	tst	r4, r1
    dbba:	bne.n	dbfc <schedule_transfer+0x60>
		//digitalWriteFast(2, HIGH);
		//ret |= 0x01;
		uint32_t status, cyccnt=ARM_DWT_CYCCNT;
    dbbc:	ldr	r5, [pc, #72]	; (dc08 <schedule_transfer+0x6c>)
    dbbe:	ldr	r7, [r5, #0]
    dbc0:	b.n	dbcc <schedule_transfer+0x30>
		do {
			USB1_USBCMD |= USB_USBCMD_ATDTW;
			status = USB1_ENDPTSTATUS;
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
    dbc2:	ldr	r4, [r5, #0]
    dbc4:	subs	r4, r4, r7
    dbc6:	cmp.w	r4, #2400	; 0x960
    dbca:	bcs.n	dbe4 <schedule_transfer+0x48>
		if (USB1_ENDPTPRIME & epmask) goto end;
		//digitalWriteFast(2, HIGH);
		//ret |= 0x01;
		uint32_t status, cyccnt=ARM_DWT_CYCCNT;
		do {
			USB1_USBCMD |= USB_USBCMD_ATDTW;
    dbcc:	ldr.w	r4, [r3, #320]	; 0x140
    dbd0:	orr.w	r4, r4, #16384	; 0x4000
    dbd4:	str.w	r4, [r3, #320]	; 0x140
			status = USB1_ENDPTSTATUS;
    dbd8:	ldr.w	r6, [r3, #440]	; 0x1b8
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
    dbdc:	ldr.w	r4, [r3, #320]	; 0x140
    dbe0:	lsls	r4, r4, #17
    dbe2:	bpl.n	dbc2 <schedule_transfer+0x26>
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
    dbe4:	tst	r1, r6
    dbe6:	bne.n	dbfc <schedule_transfer+0x60>
		//ret |= 0x02;
	}
	//digitalWriteFast(4, HIGH);
	endpoint->next = (uint32_t)transfer;
	endpoint->status = 0;
    dbe8:	movs	r3, #0
	USB1_ENDPTPRIME |= epmask;
    dbea:	ldr	r4, [pc, #24]	; (dc04 <schedule_transfer+0x68>)
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
		//ret |= 0x02;
	}
	//digitalWriteFast(4, HIGH);
	endpoint->next = (uint32_t)transfer;
    dbec:	str	r2, [r0, #8]
	endpoint->status = 0;
    dbee:	str	r3, [r0, #12]
	USB1_ENDPTPRIME |= epmask;
    dbf0:	ldr.w	r3, [r4, #432]	; 0x1b0
    dbf4:	orrs	r1, r3
    dbf6:	str.w	r1, [r4, #432]	; 0x1b0
	endpoint->first_transfer = transfer;
    dbfa:	str	r2, [r0, #48]	; 0x30
end:
	endpoint->last_transfer = transfer;
    dbfc:	str	r2, [r0, #52]	; 0x34
	__enable_irq();
    dbfe:	cpsie	i
	//digitalWriteFast(2, LOW);
	//digitalWriteFast(1, LOW);
	//if (transfer_log_head > LOG_SIZE) transfer_log_head = 0;
	//transfer_log[transfer_log_head++] = ret;
	//transfer_log_count++;
}
    dc00:	pop	{r4, r5, r6, r7}
    dc02:	bx	lr
    dc04:	.word	0x402e0000
    dc08:	.word	0xe0001004

0000dc0c <run_callbacks>:
	void (*callback_function)(transfer_t *completed_transfer);
	uint32_t unused1;
};*/

static void run_callbacks(endpoint_t *ep)
{
    dc0c:	push	{r4, r5, r6, lr}
    dc0e:	mov	r6, r0
	//printf("run_callbacks\n");
	transfer_t *first = ep->first_transfer;
    dc10:	ldr	r0, [r0, #48]	; 0x30
	if (first == NULL) return;
    dc12:	cbz	r0, dc3a <run_callbacks+0x2e>
    dc14:	mov	r2, r0
    dc16:	movs	r4, #0
    dc18:	b.n	dc22 <run_callbacks+0x16>
			//printf(" still active\n");
			ep->first_transfer = t;
			break;
		}
		count++;
		t = (transfer_t *)t->next;
    dc1a:	ldr	r2, [r2, #0]
			// found a still-active transfer, new list begins here
			//printf(" still active\n");
			ep->first_transfer = t;
			break;
		}
		count++;
    dc1c:	adds	r4, #1
		t = (transfer_t *)t->next;
		if ((uint32_t)t == 1) {
    dc1e:	cmp	r2, #1
    dc20:	beq.n	dc3c <run_callbacks+0x30>

	// count how many transfers are completed, then remove them from the endpoint's list
	uint32_t count = 0;
	transfer_t *t = first;
	while (1) {
		if (t->status & (1<<7)) {
    dc22:	ldr	r3, [r2, #4]
    dc24:	ands.w	r3, r3, #128	; 0x80
    dc28:	beq.n	dc1a <run_callbacks+0xe>
			// found a still-active transfer, new list begins here
			//printf(" still active\n");
			ep->first_transfer = t;
    dc2a:	str	r2, [r6, #48]	; 0x30
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
    dc2c:	cbz	r4, dc3a <run_callbacks+0x2e>
		transfer_t *next = (transfer_t *)first->next;
		ep->callback_function(first);
    dc2e:	ldr	r3, [r6, #56]	; 0x38
			break;
		}
	}
	// do all the callbacks
	while (count) {
		transfer_t *next = (transfer_t *)first->next;
    dc30:	ldr	r5, [r0, #0]
		ep->callback_function(first);
    dc32:	blx	r3
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
    dc34:	subs	r4, #1
		transfer_t *next = (transfer_t *)first->next;
		ep->callback_function(first);
		first = next;
    dc36:	mov	r0, r5
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
    dc38:	bne.n	dc2e <run_callbacks+0x22>
    dc3a:	pop	{r4, r5, r6, pc}
		count++;
		t = (transfer_t *)t->next;
		if ((uint32_t)t == 1) {
			// reached end of list, all need callbacks, new list is empty
			//printf(" end of list\n");
			ep->first_transfer = NULL;
    dc3c:	str	r3, [r6, #48]	; 0x30
			ep->last_transfer = NULL;
    dc3e:	str	r3, [r6, #52]	; 0x34
			break;
    dc40:	b.n	dc2c <run_callbacks+0x20>
    dc42:	nop

0000dc44 <endpoint0_transmit.constprop.1>:
#endif
	}
	USB1_ENDPTCTRL0 = 0x000010001; // stall
}

static void endpoint0_transmit(const void *data, uint32_t len, int notify)
    dc44:	push	{r4, r5, r6, r7, lr}
{
	//printf("tx %lu\n", len);
	if (len > 0) {
    dc46:	cbnz	r1, dc82 <endpoint0_transmit.constprop.1+0x3e>
    dc48:	ldr	r4, [pc, #132]	; (dcd0 <endpoint0_transmit.constprop.1+0x8c>)
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    dc4a:	ldr	r1, [pc, #136]	; (dcd4 <endpoint0_transmit.constprop.1+0x90>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    dc4c:	movs	r0, #0
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    dc4e:	ldr	r3, [pc, #136]	; (dcd8 <endpoint0_transmit.constprop.1+0x94>)
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    dc50:	movs	r2, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    dc52:	mov.w	r5, #65537	; 0x10001
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    dc56:	movs	r6, #128	; 0x80
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    dc58:	str	r2, [r1, #0]
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<0);
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
	while (USB1_ENDPTPRIME) ;
    dc5a:	mov	r2, r3
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
    dc5c:	str	r1, [r4, #8]
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    dc5e:	str	r6, [r1, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
    dc60:	str	r0, [r4, #12]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    dc62:	str.w	r5, [r3, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<0);
    dc66:	ldr.w	r4, [r3, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    dc6a:	ldr	r5, [pc, #112]	; (dcdc <endpoint0_transmit.constprop.1+0x98>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<0);
    dc6c:	orr.w	r4, r4, #1
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    dc70:	str	r0, [r1, #8]
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<0);
    dc72:	str.w	r4, [r3, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    dc76:	str	r0, [r5, #0]
	while (USB1_ENDPTPRIME) ;
    dc78:	ldr.w	r3, [r2, #432]	; 0x1b0
    dc7c:	cmp	r3, #0
    dc7e:	bne.n	dc78 <endpoint0_transmit.constprop.1+0x34>
}
    dc80:	pop	{r4, r5, r6, r7, pc}
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    dc82:	lsls	r1, r1, #16
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    dc84:	ldr	r3, [pc, #88]	; (dce0 <endpoint0_transmit.constprop.1+0x9c>)
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    dc86:	ldr	r5, [pc, #80]	; (dcd8 <endpoint0_transmit.constprop.1+0x94>)
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    dc88:	movs	r6, #1
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    dc8a:	ldr	r4, [pc, #68]	; (dcd0 <endpoint0_transmit.constprop.1+0x8c>)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    dc8c:	orr.w	r1, r1, #128	; 0x80
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
    dc90:	movs	r2, #0
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    dc92:	str	r6, [r3, #0]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    dc94:	str	r1, [r3, #4]
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
    dc96:	add.w	ip, r0, #4096	; 0x1000
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
    dc9a:	str	r2, [r4, #76]	; 0x4c
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
    dc9c:	add.w	lr, r0, #8192	; 0x2000
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    dca0:	str	r3, [r4, #72]	; 0x48
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
    dca2:	add.w	r7, r0, #12288	; 0x3000
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    dca6:	ldr.w	r1, [r5, #432]	; 0x1b0
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
    dcaa:	add.w	r6, r0, #16384	; 0x4000
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
    dcae:	mov	r2, r5
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    dcb0:	str	r0, [r3, #8]
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    dcb2:	orr.w	r1, r1, #65536	; 0x10000
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
    dcb6:	str.w	ip, [r3, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    dcba:	str.w	lr, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    dcbe:	str	r7, [r3, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
    dcc0:	str	r6, [r3, #24]
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    dcc2:	str.w	r1, [r5, #432]	; 0x1b0
		while (USB1_ENDPTPRIME) ;
    dcc6:	ldr.w	r3, [r2, #432]	; 0x1b0
    dcca:	cmp	r3, #0
    dccc:	bne.n	dcc6 <endpoint0_transmit.constprop.1+0x82>
    dcce:	b.n	dc4a <endpoint0_transmit.constprop.1+0x6>
    dcd0:	.word	0x20008000
    dcd4:	.word	0x20007020
    dcd8:	.word	0x402e0000
    dcdc:	.word	0x20006214
    dce0:	.word	0x20007000

0000dce4 <isr>:
	//USB1_PORTSC1 |= USB_PORTSC1_PFSC; // force 12 Mbit/sec
}


static void isr(void)
{
    dce4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	//printf("*");

	//  Port control in device mode is only used for
	//  status port reset, suspend, and current connect status.
	uint32_t status = USB1_USBSTS;
    dce8:	ldr	r4, [pc, #696]	; (dfa4 <isr+0x2c0>)
	//USB1_PORTSC1 |= USB_PORTSC1_PFSC; // force 12 Mbit/sec
}


static void isr(void)
{
    dcea:	sub	sp, #12
	//printf("*");

	//  Port control in device mode is only used for
	//  status port reset, suspend, and current connect status.
	uint32_t status = USB1_USBSTS;
    dcec:	ldr.w	r8, [r4, #324]	; 0x144

	// USB_USBSTS_SLI - set to 1 when enters a suspend state from an active state
	// USB_USBSTS_SRI - set at start of frame
	// USB_USBSTS_SRI - set when USB reset detected

	if (status & USB_USBSTS_UI) {
    dcf0:	tst.w	r8, #1
	//printf("*");

	//  Port control in device mode is only used for
	//  status port reset, suspend, and current connect status.
	uint32_t status = USB1_USBSTS;
	USB1_USBSTS = status;
    dcf4:	str.w	r8, [r4, #324]	; 0x144

	// USB_USBSTS_SLI - set to 1 when enters a suspend state from an active state
	// USB_USBSTS_SRI - set at start of frame
	// USB_USBSTS_SRI - set when USB reset detected

	if (status & USB_USBSTS_UI) {
    dcf8:	beq.n	ddb8 <isr+0xd4>
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
    dcfa:	ldr.w	r3, [r4, #428]	; 0x1ac
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    dcfe:	cmp	r3, #0
    dd00:	beq.n	ddae <isr+0xca>
				s.word1 = endpoint_queue_head[0].setup0;
				s.word2 = endpoint_queue_head[0].setup1;
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    dd02:	mov.w	fp, #65537	; 0x10001
    dd06:	ldr.w	r9, [pc, #708]	; dfcc <isr+0x2e8>
    dd0a:	ldr	r6, [pc, #668]	; (dfa8 <isr+0x2c4>)
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
			USB1_ENDPTSETUPSTAT = setupstatus;
			setup_t s;
			do {
				USB1_USBCMD |= USB_USBCMD_SUTW;
    dd0c:	mov	r5, r4
				s.word1 = endpoint_queue_head[0].setup0;
				s.word2 = endpoint_queue_head[0].setup1;
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    dd0e:	mov	sl, fp
	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
			USB1_ENDPTSETUPSTAT = setupstatus;
    dd10:	str.w	r3, [r4, #428]	; 0x1ac
    dd14:	ldr	r0, [r6, #40]	; 0x28
    dd16:	ldr	r2, [r6, #44]	; 0x2c
			setup_t s;
			do {
				USB1_USBCMD |= USB_USBCMD_SUTW;
    dd18:	ldr.w	r3, [r4, #320]	; 0x140
    dd1c:	orr.w	r3, r3, #8192	; 0x2000
    dd20:	str.w	r3, [r4, #320]	; 0x140
				s.word1 = endpoint_queue_head[0].setup0;
				s.word2 = endpoint_queue_head[0].setup1;
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
    dd24:	ldr.w	r3, [r4, #320]	; 0x140
    dd28:	lsls	r7, r3, #18
    dd2a:	bpl.n	dd18 <isr+0x34>
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
    dd2c:	ldr.w	r3, [r5, #320]	; 0x140
    dd30:	bic.w	r3, r3, #8192	; 0x2000
    dd34:	str.w	r3, [r5, #320]	; 0x140
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    dd38:	str.w	sl, [r5, #436]	; 0x1b4
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
    dd3c:	ldr.w	r3, [r4, #436]	; 0x1b4
    dd40:	ands.w	r3, r3, #65537	; 0x10001
    dd44:	bne.n	dd3c <isr+0x58>
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    dd46:	uxth	r1, r0
    dd48:	movw	r7, #1665	; 0x681
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
    dd4c:	str.w	r3, [r9]
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    dd50:	cmp	r1, r7
    dd52:	bhi.w	debe <isr+0x1da>
    dd56:	cmp.w	r1, #1664	; 0x680
    dd5a:	bcs.w	e130 <isr+0x44c>
    dd5e:	cmp.w	r1, #258	; 0x102
    dd62:	beq.w	e03c <isr+0x358>
    dd66:	bhi.w	df52 <isr+0x26e>
    dd6a:	cmp	r1, #128	; 0x80
    dd6c:	beq.w	e022 <isr+0x33e>
    dd70:	cmp	r1, #130	; 0x82
    dd72:	bne.w	df42 <isr+0x25e>
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		endpoint0_transmit(reply_buffer, 2, 0);
		return;
	  case 0x0082: // GET_STATUS (endpoint)
		endpoint = setup.wIndex & 0x7F;
    dd76:	uxth	r2, r2
    dd78:	and.w	r1, r2, #127	; 0x7f
		if (endpoint > 7) break;
    dd7c:	cmp	r1, #7
    dd7e:	bhi.w	df42 <isr+0x25e>
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
    dd82:	lsls	r1, r1, #2
    dd84:	ldr	r0, [pc, #548]	; (dfac <isr+0x2c8>)
		reply_buffer[0] = 0;
    dd86:	ldr	r7, [pc, #552]	; (dfb0 <isr+0x2cc>)
		return;
	  case 0x0082: // GET_STATUS (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
    dd88:	add	r0, r1
    dd8a:	ldr	r1, [r0, #0]
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    dd8c:	lsls	r0, r2, #24
	  case 0x0082: // GET_STATUS (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
		reply_buffer[0] = 0;
    dd8e:	strb	r3, [r7, #0]
		reply_buffer[1] = 0;
    dd90:	strb	r3, [r7, #1]
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    dd92:	bpl.w	e1ae <isr+0x4ca>
    dd96:	lsls	r2, r1, #15
    dd98:	bpl.n	dd9e <isr+0xba>
			reply_buffer[0] = 1;
    dd9a:	movs	r3, #1
    dd9c:	strb	r3, [r7, #0]
		}
		endpoint0_transmit(reply_buffer, 2, 0);
    dd9e:	movs	r1, #2
    dda0:	ldr	r0, [pc, #524]	; (dfb0 <isr+0x2cc>)
    dda2:	bl	dc44 <endpoint0_transmit.constprop.1>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    dda6:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    ddaa:	cmp	r3, #0
    ddac:	bne.n	dd10 <isr+0x2c>
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
		}
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
    ddae:	ldr	r2, [pc, #500]	; (dfa4 <isr+0x2c0>)
    ddb0:	ldr.w	r3, [r2, #444]	; 0x1bc
		if (completestatus) {
    ddb4:	cmp	r3, #0
    ddb6:	bne.n	de5a <isr+0x176>
			}
#endif

		}
	}
	if (status & USB_USBSTS_URI) { // page 3164
    ddb8:	tst.w	r8, #64	; 0x40
    ddbc:	beq.n	ddf0 <isr+0x10c>
		USB1_ENDPTSETUPSTAT = USB1_ENDPTSETUPSTAT; // Clear all setup token semaphores
    ddbe:	ldr	r3, [pc, #484]	; (dfa4 <isr+0x2c0>)
    ddc0:	ldr.w	r1, [r3, #428]	; 0x1ac
		USB1_ENDPTCOMPLETE = USB1_ENDPTCOMPLETE; // Clear all the endpoint complete status
		while (USB1_ENDPTPRIME != 0) ; // Wait for any endpoint priming
    ddc4:	mov	r2, r3
#endif

		}
	}
	if (status & USB_USBSTS_URI) { // page 3164
		USB1_ENDPTSETUPSTAT = USB1_ENDPTSETUPSTAT; // Clear all setup token semaphores
    ddc6:	str.w	r1, [r3, #428]	; 0x1ac
		USB1_ENDPTCOMPLETE = USB1_ENDPTCOMPLETE; // Clear all the endpoint complete status
    ddca:	ldr.w	r1, [r3, #444]	; 0x1bc
    ddce:	str.w	r1, [r3, #444]	; 0x1bc
		while (USB1_ENDPTPRIME != 0) ; // Wait for any endpoint priming
    ddd2:	ldr.w	r4, [r2, #432]	; 0x1b0
    ddd6:	ldr	r3, [pc, #460]	; (dfa4 <isr+0x2c0>)
    ddd8:	cmp	r4, #0
    ddda:	bne.n	ddd2 <isr+0xee>
		USB1_ENDPTFLUSH = 0xFFFFFFFF;  // Cancel all endpoint primed status
    dddc:	mov.w	r2, #4294967295
    dde0:	str.w	r2, [r3, #436]	; 0x1b4
		if ((USB1_PORTSC1 & USB_PORTSC1_PR)) {
    dde4:	ldr.w	r3, [r3, #388]	; 0x184
			// we took too long to respond :(
			// TODO; is this ever really a problem?
			//printf("reset too slow\n");
		}
		#if defined(CDC_STATUS_INTERFACE) && defined(CDC_DATA_INTERFACE)
		usb_serial_reset();
    dde8:	bl	d4cc <usb_serial_reset>
		#endif
		endpointN_notify_mask = 0;
    ddec:	ldr	r3, [pc, #452]	; (dfb4 <isr+0x2d0>)
    ddee:	str	r4, [r3, #0]
			// shut off USB - easier to see results in protocol analyzer
			//USB1_USBCMD &= ~USB_USBCMD_RS;
			//printf("shut off USB\n");
		//}
	}
	if (status & USB_USBSTS_TI0) {
    ddf0:	tst.w	r8, #16777216	; 0x1000000
    ddf4:	beq.n	ddfe <isr+0x11a>
		if (usb_timer0_callback != NULL) usb_timer0_callback();
    ddf6:	ldr	r3, [pc, #448]	; (dfb8 <isr+0x2d4>)
    ddf8:	ldr	r3, [r3, #0]
    ddfa:	cbz	r3, ddfe <isr+0x11a>
    ddfc:	blx	r3
	}
	if (status & USB_USBSTS_TI1) {
    ddfe:	tst.w	r8, #33554432	; 0x2000000
    de02:	beq.n	de0c <isr+0x128>
		if (usb_timer1_callback != NULL) usb_timer1_callback();
    de04:	ldr	r3, [pc, #436]	; (dfbc <isr+0x2d8>)
    de06:	ldr	r3, [r3, #0]
    de08:	cbz	r3, de0c <isr+0x128>
    de0a:	blx	r3
	}
	if (status & USB_USBSTS_PCI) {
    de0c:	tst.w	r8, #4
    de10:	beq.n	de24 <isr+0x140>
		if (USB1_PORTSC1 & USB_PORTSC1_HSP) {
    de12:	ldr	r3, [pc, #400]	; (dfa4 <isr+0x2c0>)
    de14:	ldr.w	r3, [r3, #388]	; 0x184
    de18:	ands.w	r3, r3, #512	; 0x200
    de1c:	beq.n	deb8 <isr+0x1d4>
			//printf("port at 480 Mbit\n");
			usb_high_speed = 1;
    de1e:	ldr	r3, [pc, #416]	; (dfc0 <isr+0x2dc>)
    de20:	movs	r2, #1
    de22:	strb	r2, [r3, #0]
		//printf("suspend\n");
	}
	if (status & USB_USBSTS_UEI) {
		//printf("error\n");
	}
	if ((USB1_USBINTR & USB_USBINTR_SRE) && (status & USB_USBSTS_SRI)) {
    de24:	ldr	r3, [pc, #380]	; (dfa4 <isr+0x2c0>)
    de26:	ldr.w	r2, [r3, #328]	; 0x148
    de2a:	lsls	r2, r2, #24
    de2c:	bpl.n	de54 <isr+0x170>
    de2e:	tst.w	r8, #128	; 0x80
    de32:	beq.n	de54 <isr+0x170>
		//printf("sof %d\n", usb_reboot_timer);
		if (usb_reboot_timer) {
    de34:	ldr	r1, [pc, #396]	; (dfc4 <isr+0x2e0>)
    de36:	ldrb	r2, [r1, #0]
    de38:	cbz	r2, de54 <isr+0x170>
			if (--usb_reboot_timer == 0) {
    de3a:	subs	r2, #1
    de3c:	uxtb	r2, r2
    de3e:	strb	r2, [r1, #0]
    de40:	cbnz	r2, de54 <isr+0x170>
	__enable_irq();
}

void usb_stop_sof_interrupts(int interface)
{
	sof_usage &= ~(1 << interface);
    de42:	ldr	r1, [pc, #388]	; (dfc8 <isr+0x2e4>)
    de44:	ldrb	r2, [r1, #0]
    de46:	and.w	r2, r2, #247	; 0xf7
    de4a:	strb	r2, [r1, #0]
	if (sof_usage == 0) {
    de4c:	cmp	r2, #0
    de4e:	beq.w	e2b6 <isr+0x5d2>
	if ((USB1_USBINTR & USB_USBINTR_SRE) && (status & USB_USBSTS_SRI)) {
		//printf("sof %d\n", usb_reboot_timer);
		if (usb_reboot_timer) {
			if (--usb_reboot_timer == 0) {
				usb_stop_sof_interrupts(NUM_INTERFACE);
				asm("bkpt #251"); // run bootloader
    de52:	bkpt	0x00fb
		#endif
		#ifdef FLIGHTSIM_INTERFACE
		usb_flightsim_flush_output();
		#endif
	}
}
    de54:	add	sp, #12
    de56:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		}
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
    de5a:	ldr	r1, [pc, #368]	; (dfcc <isr+0x2e8>)
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
		}
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
    de5c:	str.w	r3, [r2, #444]	; 0x1bc
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
    de60:	ldr	r0, [r1, #0]
    de62:	tst	r3, r0
    de64:	bne.w	e234 <isr+0x550>
				endpoint0_notify_mask = 0;
				endpoint0_complete();
			}
			completestatus &= endpointN_notify_mask;
    de68:	ldr	r2, [pc, #328]	; (dfb4 <isr+0x2d0>)
    de6a:	ldr	r5, [r2, #0]
#if 1
			if (completestatus) {
    de6c:	ands	r5, r3
    de6e:	beq.n	ddb8 <isr+0xd4>

				// transmit:
				uint32_t tx = completestatus >> 16;
				while (tx) {
    de70:	lsrs	r7, r5, #16
    de72:	beq.n	de94 <isr+0x1b0>
    de74:	ldr	r6, [pc, #304]	; (dfa8 <isr+0x2c4>)
					int p=__builtin_ctz(tx);
					run_callbacks(endpoint_queue_head + p * 2 + 1);
					tx &= ~(1<<p);
    de76:	mov.w	r9, #1
			if (completestatus) {

				// transmit:
				uint32_t tx = completestatus >> 16;
				while (tx) {
					int p=__builtin_ctz(tx);
    de7a:	rbit	r4, r7
    de7e:	clz	r4, r4
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    de82:	add.w	r0, r6, r4, lsl #7
					tx &= ~(1<<p);
    de86:	lsl.w	r4, r9, r4

				// transmit:
				uint32_t tx = completestatus >> 16;
				while (tx) {
					int p=__builtin_ctz(tx);
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    de8a:	adds	r0, #64	; 0x40
    de8c:	bl	dc0c <run_callbacks>
#if 1
			if (completestatus) {

				// transmit:
				uint32_t tx = completestatus >> 16;
				while (tx) {
    de90:	bics	r7, r4
    de92:	bne.n	de7a <isr+0x196>
					run_callbacks(endpoint_queue_head + p * 2 + 1);
					tx &= ~(1<<p);
				}

				// receive:
				uint32_t rx = completestatus & 0xffff;
    de94:	uxth	r5, r5
				while(rx) {
    de96:	cmp	r5, #0
    de98:	beq.n	ddb8 <isr+0xd4>
    de9a:	ldr	r6, [pc, #268]	; (dfa8 <isr+0x2c4>)
					int p=__builtin_ctz(rx);
					run_callbacks(endpoint_queue_head + p * 2);
					rx &= ~(1<<p);
    de9c:	movs	r7, #1
				}

				// receive:
				uint32_t rx = completestatus & 0xffff;
				while(rx) {
					int p=__builtin_ctz(rx);
    de9e:	rbit	r4, r5
    dea2:	clz	r4, r4
					run_callbacks(endpoint_queue_head + p * 2);
    dea6:	add.w	r0, r6, r4, lsl #7
					rx &= ~(1<<p);
    deaa:	lsl.w	r4, r7, r4

				// receive:
				uint32_t rx = completestatus & 0xffff;
				while(rx) {
					int p=__builtin_ctz(rx);
					run_callbacks(endpoint_queue_head + p * 2);
    deae:	bl	dc0c <run_callbacks>
					tx &= ~(1<<p);
				}

				// receive:
				uint32_t rx = completestatus & 0xffff;
				while(rx) {
    deb2:	bics	r5, r4
    deb4:	bne.n	de9e <isr+0x1ba>
    deb6:	b.n	ddb8 <isr+0xd4>
		if (USB1_PORTSC1 & USB_PORTSC1_HSP) {
			//printf("port at 480 Mbit\n");
			usb_high_speed = 1;
		} else {
			//printf("port at 12 Mbit\n");
			usb_high_speed = 0;
    deb8:	ldr	r2, [pc, #260]	; (dfc0 <isr+0x2dc>)
    deba:	strb	r3, [r2, #0]
    debc:	b.n	de24 <isr+0x140>
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    debe:	movw	r7, #8225	; 0x2021
    dec2:	cmp	r1, r7
    dec4:	beq.n	df3a <isr+0x256>
    dec6:	bhi.w	dfdc <isr+0x2f8>
    deca:	cmp.w	r1, #2176	; 0x880
    dece:	beq.w	e114 <isr+0x430>
    ded2:	cmp.w	r1, #2304	; 0x900
    ded6:	bne.n	df42 <isr+0x25e>
	  case 0x0500: // SET_ADDRESS
		endpoint0_receive(NULL, 0, 0);
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
		return;
	  case 0x0900: // SET_CONFIGURATION
		usb_configuration = setup.wValue;
    ded8:	ubfx	r0, r0, #16, #8
    dedc:	ldr	r1, [pc, #240]	; (dfd0 <isr+0x2ec>)
		// configure all other endpoints
		#if defined(ENDPOINT2_CONFIG)
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
		#endif
		#if defined(ENDPOINT3_CONFIG)
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
    dede:	mov.w	r2, #13107400	; 0xc800c8
		return;
	  case 0x0900: // SET_CONFIGURATION
		usb_configuration = setup.wValue;
		// configure all other endpoints
		#if defined(ENDPOINT2_CONFIG)
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
    dee2:	ldr	r7, [pc, #240]	; (dfd4 <isr+0x2f0>)
	  case 0x0500: // SET_ADDRESS
		endpoint0_receive(NULL, 0, 0);
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
		return;
	  case 0x0900: // SET_CONFIGURATION
		usb_configuration = setup.wValue;
    dee4:	strb	r0, [r1, #0]
		#endif
		#if defined(ENDPOINT4_CONFIG)
		USB1_ENDPTCTRL4 = ENDPOINT4_CONFIG;
		#endif
		#if defined(ENDPOINT5_CONFIG)
		USB1_ENDPTCTRL5 = ENDPOINT5_CONFIG;
    dee6:	mov.w	r1, #13369548	; 0xcc00cc
    deea:	str	r3, [sp, #4]
		return;
	  case 0x0900: // SET_CONFIGURATION
		usb_configuration = setup.wValue;
		// configure all other endpoints
		#if defined(ENDPOINT2_CONFIG)
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
    deec:	str.w	r7, [r5, #456]	; 0x1c8
		#endif
		#if defined(ENDPOINT3_CONFIG)
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
    def0:	str.w	r2, [r5, #460]	; 0x1cc
		#endif
		#if defined(ENDPOINT4_CONFIG)
		USB1_ENDPTCTRL4 = ENDPOINT4_CONFIG;
    def4:	str.w	r2, [r5, #464]	; 0x1d0
		#endif
		#if defined(ENDPOINT5_CONFIG)
		USB1_ENDPTCTRL5 = ENDPOINT5_CONFIG;
    def8:	str.w	r1, [r5, #468]	; 0x1d4
		#endif
		#if defined(ENDPOINT7_CONFIG)
		USB1_ENDPTCTRL7 = ENDPOINT7_CONFIG;
		#endif
		#if defined(CDC_STATUS_INTERFACE) && defined(CDC_DATA_INTERFACE)
		usb_serial_configure();
    defc:	bl	d4d0 <usb_serial_configure>
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    df00:	ldr	r2, [pc, #212]	; (dfd8 <isr+0x2f4>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    df02:	ldr	r3, [sp, #4]
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    df04:	movs	r1, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    df06:	movs	r0, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    df08:	str	r2, [r6, #72]	; 0x48
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    df0a:	str	r1, [r2, #4]
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    df0c:	str	r0, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    df0e:	str	r3, [r6, #76]	; 0x4c
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    df10:	str.w	fp, [r5, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    df14:	ldr.w	r1, [r5, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    df18:	str	r3, [r2, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
    df1a:	orr.w	r2, r1, #65536	; 0x10000
    df1e:	str.w	r2, [r5, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    df22:	ldr	r2, [pc, #168]	; (dfcc <isr+0x2e8>)
    df24:	str	r3, [r2, #0]
	while (USB1_ENDPTPRIME) ;
    df26:	ldr.w	r3, [r4, #432]	; 0x1b0
    df2a:	cmp	r3, #0
    df2c:	bne.n	df26 <isr+0x242>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    df2e:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    df32:	cmp	r3, #0
    df34:	bne.w	dd10 <isr+0x2c>
    df38:	b.n	ddae <isr+0xca>
		// fall through to next case, to always send ZLP ACK
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
    df3a:	lsrs	r1, r2, #16
    df3c:	cmp	r1, #7
    df3e:	beq.w	e1b6 <isr+0x4d2>
			return;
		}
		break;
#endif
	}
	USB1_ENDPTCTRL0 = 0x000010001; // stall
    df42:	str.w	fp, [r4, #448]	; 0x1c0
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    df46:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    df4a:	cmp	r3, #0
    df4c:	bne.w	dd10 <isr+0x2c>
    df50:	b.n	ddae <isr+0xca>
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    df52:	movw	r7, #770	; 0x302
    df56:	cmp	r1, r7
    df58:	beq.w	e0b4 <isr+0x3d0>
    df5c:	cmp.w	r1, #1280	; 0x500
    df60:	bne.n	df42 <isr+0x25e>
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    df62:	ldr	r2, [pc, #116]	; (dfd8 <isr+0x2f4>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    df64:	movs	r1, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    df66:	movs	r7, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    df68:	str	r3, [r6, #76]	; 0x4c
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    df6a:	str	r2, [r6, #72]	; 0x48
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    df6c:	str	r7, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    df6e:	str	r1, [r2, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    df70:	str.w	fp, [r5, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    df74:	ldr.w	r1, [r5, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    df78:	str	r3, [r2, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
    df7a:	orr.w	r3, r1, #65536	; 0x10000
    df7e:	str.w	r3, [r5, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    df82:	ldr.w	r3, [r4, #432]	; 0x1b0
    df86:	cmp	r3, #0
    df88:	bne.n	df82 <isr+0x29e>

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
	  case 0x0500: // SET_ADDRESS
		endpoint0_receive(NULL, 0, 0);
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
    df8a:	lsrs	r3, r0, #16
    df8c:	lsls	r3, r3, #25
    df8e:	orr.w	r3, r3, #16777216	; 0x1000000
    df92:	str.w	r3, [r5, #340]	; 0x154
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    df96:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    df9a:	cmp	r3, #0
    df9c:	bne.w	dd10 <isr+0x2c>
    dfa0:	b.n	ddae <isr+0xca>
    dfa2:	nop
    dfa4:	.word	0x402e0000
    dfa8:	.word	0x20008000
    dfac:	.word	0x402e01c0
    dfb0:	.word	0x20006228
    dfb4:	.word	0x20006204
    dfb8:	.word	0x20006200
    dfbc:	.word	0x2000620c
    dfc0:	.word	0x20006210
    dfc4:	.word	0x20006218
    dfc8:	.word	0x20006208
    dfcc:	.word	0x20006214
    dfd0:	.word	0x20006238
    dfd4:	.word	0x00cc0002
    dfd8:	.word	0x20007020
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    dfdc:	movw	r3, #8737	; 0x2221
    dfe0:	cmp	r1, r3
    dfe2:	beq.n	e09c <isr+0x3b8>
    dfe4:	movw	r3, #8993	; 0x2321
    dfe8:	cmp	r1, r3
    dfea:	bne.n	df42 <isr+0x25e>
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    dfec:	ldr	r3, [pc, #724]	; (e2c4 <isr+0x5e0>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    dfee:	movs	r2, #128	; 0x80
	endpoint0_transfer_ack.pointer0 = 0;
    dff0:	movs	r1, #0
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    dff2:	movs	r0, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    dff4:	str	r3, [r6, #72]	; 0x48
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    dff6:	str	r0, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    dff8:	str	r2, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    dffa:	str	r1, [r6, #76]	; 0x4c
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    dffc:	str.w	fp, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    e000:	ldr.w	r2, [r4, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    e004:	str	r1, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
    e006:	orr.w	r3, r2, #65536	; 0x10000
    e00a:	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    e00e:	ldr.w	r3, [r4, #432]	; 0x1b0
    e012:	cmp	r3, #0
    e014:	bne.n	e00e <isr+0x32a>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    e016:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    e01a:	cmp	r3, #0
    e01c:	bne.w	dd10 <isr+0x2c>
    e020:	b.n	ddae <isr+0xca>
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
		endpoint0_transmit(reply_buffer, 1, 0);
		return;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    e022:	ldr	r2, [pc, #676]	; (e2c8 <isr+0x5e4>)
		reply_buffer[1] = 0;
		endpoint0_transmit(reply_buffer, 2, 0);
    e024:	movs	r1, #2
    e026:	mov	r0, r2
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
		endpoint0_transmit(reply_buffer, 1, 0);
		return;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    e028:	strb	r3, [r2, #0]
		reply_buffer[1] = 0;
    e02a:	strb	r3, [r2, #1]
		endpoint0_transmit(reply_buffer, 2, 0);
    e02c:	bl	dc44 <endpoint0_transmit.constprop.1>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    e030:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    e034:	cmp	r3, #0
    e036:	bne.w	dd10 <isr+0x2c>
    e03a:	b.n	ddae <isr+0xca>
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
		}
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
    e03c:	uxth	r2, r2
    e03e:	and.w	r3, r2, #127	; 0x7f
		if (endpoint > 7) break;
    e042:	cmp	r3, #7
    e044:	bhi.w	df42 <isr+0x25e>
		dir = setup.wIndex & 0x80;
		if (dir) {
    e048:	tst.w	r2, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_TXS;
    e04c:	mov.w	r3, r3, lsl #2
    e050:	ldr	r2, [pc, #632]	; (e2cc <isr+0x5e8>)
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    e052:	mov.w	r1, #0
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    e056:	mov.w	r0, #1
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		if (dir) {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_TXS;
    e05a:	add	r2, r3
    e05c:	ldr	r3, [r2, #0]
    e05e:	ite	ne
    e060:	bicne.w	r3, r3, #65536	; 0x10000
		} else {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_RXS;
    e064:	biceq.w	r3, r3, #1
    e068:	str	r3, [r2, #0]
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    e06a:	movs	r2, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    e06c:	ldr	r3, [pc, #596]	; (e2c4 <isr+0x5e0>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    e06e:	str	r1, [r6, #76]	; 0x4c
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    e070:	str	r3, [r6, #72]	; 0x48
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    e072:	str	r0, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    e074:	str	r2, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    e076:	str.w	fp, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    e07a:	ldr.w	r2, [r4, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    e07e:	str	r1, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
    e080:	orr.w	r3, r2, #65536	; 0x10000
    e084:	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    e088:	ldr.w	r3, [r4, #432]	; 0x1b0
    e08c:	cmp	r3, #0
    e08e:	bne.n	e088 <isr+0x3a4>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    e090:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    e094:	cmp	r3, #0
    e096:	bne.w	dd10 <isr+0x2c>
    e09a:	b.n	ddae <isr+0xca>
		}
		break;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		#ifdef CDC_STATUS_INTERFACE
		if (setup.wIndex == CDC_STATUS_INTERFACE) {
    e09c:	uxth	r2, r2
    e09e:	cmp	r2, #1
    e0a0:	bne.n	dfec <isr+0x308>
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    e0a2:	ldr	r3, [pc, #556]	; (e2d0 <isr+0x5ec>)
			usb_cdc_line_rtsdtr = setup.wValue;
    e0a4:	ubfx	r0, r0, #16, #8
		break;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		#ifdef CDC_STATUS_INTERFACE
		if (setup.wIndex == CDC_STATUS_INTERFACE) {
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    e0a8:	ldr	r2, [pc, #552]	; (e2d4 <isr+0x5f0>)
    e0aa:	ldr	r1, [r3, #0]
			usb_cdc_line_rtsdtr = setup.wValue;
    e0ac:	ldr	r3, [pc, #552]	; (e2d8 <isr+0x5f4>)
		break;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		#ifdef CDC_STATUS_INTERFACE
		if (setup.wIndex == CDC_STATUS_INTERFACE) {
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    e0ae:	str	r1, [r2, #0]
			usb_cdc_line_rtsdtr = setup.wValue;
    e0b0:	strb	r0, [r3, #0]
    e0b2:	b.n	dfec <isr+0x308>
			reply_buffer[0] = 1;
		}
		endpoint0_transmit(reply_buffer, 2, 0);
		return;
	  case 0x0302: // SET_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
    e0b4:	uxth	r2, r2
    e0b6:	and.w	r3, r2, #127	; 0x7f
		if (endpoint > 7) break;
    e0ba:	cmp	r3, #7
    e0bc:	bhi.w	df42 <isr+0x25e>
		dir = setup.wIndex & 0x80;
		if (dir) {
    e0c0:	tst.w	r2, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_TXS;
    e0c4:	mov.w	r3, r3, lsl #2
    e0c8:	ldr	r2, [pc, #512]	; (e2cc <isr+0x5e8>)
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    e0ca:	mov.w	r1, #0
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    e0ce:	mov.w	r0, #1
	  case 0x0302: // SET_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		if (dir) {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_TXS;
    e0d2:	add	r2, r3
    e0d4:	ldr	r3, [r2, #0]
    e0d6:	ite	ne
    e0d8:	orrne.w	r3, r3, #65536	; 0x10000
		} else {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
    e0dc:	orreq.w	r3, r3, #1
    e0e0:	str	r3, [r2, #0]
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    e0e2:	movs	r2, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    e0e4:	ldr	r3, [pc, #476]	; (e2c4 <isr+0x5e0>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    e0e6:	str	r1, [r6, #76]	; 0x4c
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    e0e8:	str	r3, [r6, #72]	; 0x48
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    e0ea:	str	r0, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    e0ec:	str	r2, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    e0ee:	str.w	fp, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    e0f2:	ldr.w	r2, [r4, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    e0f6:	str	r1, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
    e0f8:	orr.w	r3, r2, #65536	; 0x10000
    e0fc:	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    e100:	ldr.w	r3, [r4, #432]	; 0x1b0
    e104:	cmp	r3, #0
    e106:	bne.n	e100 <isr+0x41c>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    e108:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    e10c:	cmp	r3, #0
    e10e:	bne.w	dd10 <isr+0x2c>
    e112:	b.n	ddae <isr+0xca>
		endpoint_queue_head[2].unused1 = (uint32_t)experimental_buffer;
		#endif
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    e114:	ldr	r2, [pc, #452]	; (e2dc <isr+0x5f8>)
		endpoint0_transmit(reply_buffer, 1, 0);
    e116:	movs	r1, #1
		endpoint_queue_head[2].unused1 = (uint32_t)experimental_buffer;
		#endif
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    e118:	ldr	r3, [pc, #428]	; (e2c8 <isr+0x5e4>)
    e11a:	ldrb	r2, [r2, #0]
		endpoint0_transmit(reply_buffer, 1, 0);
    e11c:	mov	r0, r3
		endpoint_queue_head[2].unused1 = (uint32_t)experimental_buffer;
		#endif
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    e11e:	strb	r2, [r3, #0]
		endpoint0_transmit(reply_buffer, 1, 0);
    e120:	bl	dc44 <endpoint0_transmit.constprop.1>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    e124:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    e128:	cmp	r3, #0
    e12a:	bne.w	dd10 <isr+0x2c>
    e12e:	b.n	ddae <isr+0xca>
		}
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    e130:	ldr	r3, [pc, #428]	; (e2e0 <isr+0x5fc>)
    e132:	ldr	r1, [r3, #4]
    e134:	cmp	r1, #0
    e136:	beq.w	df42 <isr+0x25e>
    e13a:	lsrs	r0, r0, #16
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    e13c:	uxth.w	lr, r2
    e140:	b.n	e14c <isr+0x468>
		}
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    e142:	adds	r3, #12
    e144:	ldr	r1, [r3, #4]
    e146:	cmp	r1, #0
    e148:	beq.w	df42 <isr+0x25e>
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    e14c:	ldrh	r7, [r3, #0]
    e14e:	cmp	r7, r0
    e150:	bne.n	e142 <isr+0x45e>
    e152:	ldrh	r7, [r3, #2]
    e154:	cmp	r7, lr
    e156:	bne.n	e142 <isr+0x45e>
				uint32_t datalen;
				if ((setup.wValue >> 8) == 3) {
    e158:	lsrs	r7, r0, #8
    e15a:	cmp	r7, #3
    e15c:	beq.w	e332 <isr+0x64e>
					// for string descriptors, use the descriptor's
					// length field, allowing runtime configured length.
					datalen = *(list->addr);
				} else {
					datalen = list->length;
    e160:	ldrh	r3, [r3, #8]
				}
				if (datalen > setup.wLength) datalen = setup.wLength;
    e162:	lsrs	r2, r2, #16
    e164:	cmp	r3, r2
    e166:	it	cs
    e168:	movcs	r3, r2

				// copy the descriptor, from PROGMEM to DMAMEM
				if (setup.wValue == 0x200) {
    e16a:	cmp.w	r0, #512	; 0x200
    e16e:	beq.w	e314 <isr+0x630>
					// config descriptor needs to adapt to speed
					const uint8_t *src = usb_config_descriptor_12;
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
				} else if (setup.wValue == 0x700) {
    e172:	cmp.w	r0, #1792	; 0x700
    e176:	beq.w	e290 <isr+0x5ac>
    e17a:	ldr	r7, [pc, #360]	; (e2e4 <isr+0x600>)
					const uint8_t *src = usb_config_descriptor_480;
					if (usb_high_speed) src = usb_config_descriptor_12;
					memcpy(usb_descriptor_buffer, src, datalen);
					usb_descriptor_buffer[1] = 7;
				} else {
					memcpy(usb_descriptor_buffer, list->addr, datalen);
    e17c:	mov	r2, r3
    e17e:	str	r3, [sp, #4]
    e180:	mov	r0, r7
    e182:	bl	d064 <memcpy>
    e186:	ldr	r3, [sp, #4]
// any cached data written to memory, and then removed from the cache,
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    e188:	bic.w	r2, r7, #31
	uint32_t end_addr = (uint32_t)addr + size;
    e18c:	add	r7, r3
	asm volatile("": : :"memory");
	asm("dsb");
    e18e:	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    e192:	ldr	r1, [pc, #340]	; (e2e8 <isr+0x604>)
    e194:	str	r2, [r1, #0]
		location += 32;
    e196:	adds	r2, #32
	} while (location < end_addr);
    e198:	cmp	r7, r2
    e19a:	bhi.n	e192 <isr+0x4ae>
	asm("dsb");
    e19c:	dsb	sy
	asm("isb");
    e1a0:	isb	sy
				}
				// prep transmit
				arm_dcache_flush_delete(usb_descriptor_buffer, datalen);
				endpoint0_transmit(usb_descriptor_buffer, datalen, 0);
    e1a4:	ldr	r0, [pc, #316]	; (e2e4 <isr+0x600>)
    e1a6:	mov	r1, r3
    e1a8:	bl	dc44 <endpoint0_transmit.constprop.1>
    e1ac:	b.n	dda6 <isr+0xc2>
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    e1ae:	lsls	r3, r1, #31
    e1b0:	bpl.w	dd9e <isr+0xba>
    e1b4:	b.n	dd9a <isr+0xb6>
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
		endpoint0_setupdata.bothwords = setupdata;
    e1b6:	ldr	r7, [pc, #308]	; (e2ec <isr+0x608>)
static void endpoint0_receive(void *data, uint32_t len, int notify)
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    e1b8:	mov.w	lr, #1
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
    e1bc:	str	r3, [r6, #12]
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    e1be:	ldr	r1, [pc, #304]	; (e2f0 <isr+0x60c>)
static void endpoint0_receive(void *data, uint32_t len, int notify)
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    e1c0:	ldr	r3, [pc, #304]	; (e2f4 <isr+0x610>)
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
		endpoint0_setupdata.bothwords = setupdata;
    e1c2:	str	r0, [r7, #0]
static void endpoint0_receive(void *data, uint32_t len, int notify)
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    e1c4:	str.w	lr, [r3]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    e1c8:	str	r1, [r3, #4]
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
    e1ca:	str	r3, [r6, #8]
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
    e1cc:	ldr	r1, [pc, #296]	; (e2f8 <isr+0x614>)
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
    e1ce:	ldr.w	r0, [r5, #432]	; 0x1b0
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
		endpoint0_setupdata.bothwords = setupdata;
    e1d2:	str	r2, [r7, #4]
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
    e1d4:	add.w	r7, r1, #4096	; 0x1000
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
    e1d8:	orr.w	r2, r0, lr
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    e1dc:	str	r1, [r3, #8]
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
    e1de:	add.w	lr, r1, #8192	; 0x2000
		endpoint0_transfer_data.pointer3 = addr + 12288;
    e1e2:	add.w	r0, r1, #12288	; 0x3000
		endpoint0_transfer_data.pointer4 = addr + 16384;
    e1e6:	add.w	r1, r1, #16384	; 0x4000
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
    e1ea:	str.w	r2, [r5, #432]	; 0x1b0
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
    e1ee:	str	r7, [r3, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    e1f0:	str.w	lr, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    e1f4:	str	r0, [r3, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
    e1f6:	str	r1, [r3, #24]
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
    e1f8:	ldr.w	r3, [r4, #432]	; 0x1b0
    e1fc:	cmp	r3, #0
    e1fe:	bne.n	e1f8 <isr+0x514>
	}
	endpoint0_transfer_ack.next = 1;
    e200:	ldr	r2, [pc, #192]	; (e2c4 <isr+0x5e0>)
    e202:	movs	r0, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    e204:	movw	r1, #32896	; 0x8080
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    e208:	str	r3, [r6, #76]	; 0x4c
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    e20a:	str	r0, [r2, #0]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    e20c:	mov.w	r0, #65536	; 0x10000
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    e210:	str	r2, [r6, #72]	; 0x48
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    e212:	str	r1, [r2, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    e214:	str.w	fp, [r5, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    e218:	ldr.w	r1, [r5, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    e21c:	str	r3, [r2, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
    e21e:	orr.w	r3, r1, r0
    e222:	str.w	r3, [r5, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    e226:	str.w	r0, [r9]
	while (USB1_ENDPTPRIME) ;
    e22a:	ldr.w	r3, [r4, #432]	; 0x1b0
    e22e:	cmp	r3, #0
    e230:	bne.n	e22a <isr+0x546>
    e232:	b.n	dda6 <isr+0xc2>

static void endpoint0_complete(void)
{
	setup_t setup;

	setup.bothwords = endpoint0_setupdata.bothwords;
    e234:	ldr	r0, [pc, #180]	; (e2ec <isr+0x608>)
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	// 0x2021 is CDC_SET_LINE_CODING
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    e236:	movw	r4, #8225	; 0x2021
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
				endpoint0_notify_mask = 0;
    e23a:	movs	r6, #0

	setup.bothwords = endpoint0_setupdata.bothwords;
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	// 0x2021 is CDC_SET_LINE_CODING
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    e23c:	ldrh	r5, [r0, #0]
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
				endpoint0_notify_mask = 0;
    e23e:	str	r6, [r1, #0]

	setup.bothwords = endpoint0_setupdata.bothwords;
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	// 0x2021 is CDC_SET_LINE_CODING
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    e240:	cmp	r5, r4

static void endpoint0_complete(void)
{
	setup_t setup;

	setup.bothwords = endpoint0_setupdata.bothwords;
    e242:	ldr	r0, [r0, #4]
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	// 0x2021 is CDC_SET_LINE_CODING
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    e244:	bne.w	de68 <isr+0x184>
    e248:	uxth	r1, r0
    e24a:	cmp	r1, #1
    e24c:	bne.w	de68 <isr+0x184>
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    e250:	ldr	r1, [pc, #164]	; (e2f8 <isr+0x614>)
    e252:	ldr	r4, [pc, #168]	; (e2fc <isr+0x618>)
    e254:	ldmia	r1, {r0, r1}
    e256:	lsrs	r5, r1, #16
		printf("usb_cdc_line_coding, baud=%u\n", usb_cdc_line_coding[0]);
		if (usb_cdc_line_coding[0] == 134) {
    e258:	cmp	r0, #134	; 0x86
	setup.bothwords = endpoint0_setupdata.bothwords;
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	// 0x2021 is CDC_SET_LINE_CODING
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    e25a:	str	r0, [r4, #0]
    e25c:	strh	r1, [r4, #4]
    e25e:	strb	r5, [r4, #6]
		printf("usb_cdc_line_coding, baud=%u\n", usb_cdc_line_coding[0]);
		if (usb_cdc_line_coding[0] == 134) {
    e260:	bne.w	de68 <isr+0x184>
}


void usb_start_sof_interrupts(int interface)
{
	__disable_irq();
    e264:	cpsid	i
	sof_usage |= (1 << interface);
    e266:	ldr	r0, [pc, #152]	; (e300 <isr+0x61c>)
    e268:	ldrb	r1, [r0, #0]
    e26a:	orr.w	r1, r1, #8
    e26e:	strb	r1, [r0, #0]
	uint32_t intr = USB1_USBINTR;
    e270:	ldr.w	r1, [r2, #328]	; 0x148
	if (!(intr & USB_USBINTR_SRE)) {
    e274:	lsls	r0, r1, #24
    e276:	bmi.n	e286 <isr+0x5a2>
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    e278:	orr.w	r1, r1, #128	; 0x80
{
	__disable_irq();
	sof_usage |= (1 << interface);
	uint32_t intr = USB1_USBINTR;
	if (!(intr & USB_USBINTR_SRE)) {
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
    e27c:	movs	r0, #128	; 0x80
    e27e:	str.w	r0, [r2, #324]	; 0x144
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    e282:	str.w	r1, [r2, #328]	; 0x148
	}
	__enable_irq();
    e286:	cpsie	i
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
		printf("usb_cdc_line_coding, baud=%u\n", usb_cdc_line_coding[0]);
		if (usb_cdc_line_coding[0] == 134) {
			usb_start_sof_interrupts(NUM_INTERFACE);
			usb_reboot_timer = 80; // TODO: 10 if only 12 Mbit/sec
    e288:	ldr	r2, [pc, #120]	; (e304 <isr+0x620>)
    e28a:	movs	r1, #80	; 0x50
    e28c:	strb	r1, [r2, #0]
    e28e:	b.n	de68 <isr+0x184>
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
				} else if (setup.wValue == 0x700) {
					// other speed config also needs to adapt
					const uint8_t *src = usb_config_descriptor_480;
					if (usb_high_speed) src = usb_config_descriptor_12;
    e290:	ldr	r0, [pc, #116]	; (e308 <isr+0x624>)
					memcpy(usb_descriptor_buffer, src, datalen);
    e292:	mov	r2, r3
    e294:	ldr	r7, [pc, #76]	; (e2e4 <isr+0x600>)
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
				} else if (setup.wValue == 0x700) {
					// other speed config also needs to adapt
					const uint8_t *src = usb_config_descriptor_480;
					if (usb_high_speed) src = usb_config_descriptor_12;
    e296:	ldrb.w	lr, [r0]
					const uint8_t *src = usb_config_descriptor_12;
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
				} else if (setup.wValue == 0x700) {
					// other speed config also needs to adapt
					const uint8_t *src = usb_config_descriptor_480;
    e29a:	ldr	r1, [pc, #112]	; (e30c <isr+0x628>)
    e29c:	ldr	r0, [pc, #112]	; (e310 <isr+0x62c>)
					if (usb_high_speed) src = usb_config_descriptor_12;
					memcpy(usb_descriptor_buffer, src, datalen);
    e29e:	str	r3, [sp, #4]
    e2a0:	cmp.w	lr, #0
    e2a4:	it	eq
    e2a6:	moveq	r1, r0
    e2a8:	mov	r0, r7
    e2aa:	bl	d064 <memcpy>
					usb_descriptor_buffer[1] = 7;
    e2ae:	movs	r2, #7
    e2b0:	ldr	r3, [sp, #4]
    e2b2:	strb	r2, [r7, #1]
    e2b4:	b.n	e188 <isr+0x4a4>

void usb_stop_sof_interrupts(int interface)
{
	sof_usage &= ~(1 << interface);
	if (sof_usage == 0) {
		USB1_USBINTR &= ~USB_USBINTR_SRE;
    e2b6:	ldr.w	r2, [r3, #328]	; 0x148
    e2ba:	bic.w	r2, r2, #128	; 0x80
    e2be:	str.w	r2, [r3, #328]	; 0x148
    e2c2:	b.n	de52 <isr+0x16e>
    e2c4:	.word	0x20007020
    e2c8:	.word	0x20006228
    e2cc:	.word	0x402e01c0
    e2d0:	.word	0x20006244
    e2d4:	.word	0x200063f8
    e2d8:	.word	0x20006168
    e2dc:	.word	0x20006238
    e2e0:	.word	0x20000878
    e2e4:	.word	0x20204000
    e2e8:	.word	0xe000ef70
    e2ec:	.word	0x20006220
    e2f0:	.word	0x00070080
    e2f4:	.word	0x20007000
    e2f8:	.word	0x20006230
    e2fc:	.word	0x200063f0
    e300:	.word	0x20006208
    e304:	.word	0x20006218
    e308:	.word	0x20006210
    e30c:	.word	0x60001a68
    e310:	.word	0x60001ad4

				// copy the descriptor, from PROGMEM to DMAMEM
				if (setup.wValue == 0x200) {
					// config descriptor needs to adapt to speed
					const uint8_t *src = usb_config_descriptor_12;
					if (usb_high_speed) src = usb_config_descriptor_480;
    e314:	ldr	r0, [pc, #40]	; (e340 <isr+0x65c>)
					memcpy(usb_descriptor_buffer, src, datalen);
    e316:	mov	r2, r3
				if (datalen > setup.wLength) datalen = setup.wLength;

				// copy the descriptor, from PROGMEM to DMAMEM
				if (setup.wValue == 0x200) {
					// config descriptor needs to adapt to speed
					const uint8_t *src = usb_config_descriptor_12;
    e318:	ldr	r1, [pc, #40]	; (e344 <isr+0x660>)
					if (usb_high_speed) src = usb_config_descriptor_480;
    e31a:	ldrb	r7, [r0, #0]
				if (datalen > setup.wLength) datalen = setup.wLength;

				// copy the descriptor, from PROGMEM to DMAMEM
				if (setup.wValue == 0x200) {
					// config descriptor needs to adapt to speed
					const uint8_t *src = usb_config_descriptor_12;
    e31c:	ldr	r0, [pc, #40]	; (e348 <isr+0x664>)
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
    e31e:	str	r3, [sp, #4]
    e320:	cmp	r7, #0
    e322:	it	eq
    e324:	moveq	r1, r0
    e326:	ldr	r0, [pc, #36]	; (e34c <isr+0x668>)
    e328:	bl	d064 <memcpy>
    e32c:	ldr	r7, [pc, #28]	; (e34c <isr+0x668>)
    e32e:	ldr	r3, [sp, #4]
    e330:	b.n	e188 <isr+0x4a4>
					// length field, allowing runtime configured length.
					datalen = *(list->addr);
				} else {
					datalen = list->length;
				}
				if (datalen > setup.wLength) datalen = setup.wLength;
    e332:	lsrs	r2, r2, #16
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
				uint32_t datalen;
				if ((setup.wValue >> 8) == 3) {
					// for string descriptors, use the descriptor's
					// length field, allowing runtime configured length.
					datalen = *(list->addr);
    e334:	ldrb	r3, [r1, #0]
    e336:	cmp	r3, r2
    e338:	it	cs
    e33a:	movcs	r3, r2
    e33c:	b.n	e172 <isr+0x48e>
    e33e:	nop
    e340:	.word	0x20006210
    e344:	.word	0x60001ad4
    e348:	.word	0x60001a68
    e34c:	.word	0x20204000

0000e350 <usb_config_rx>:
	qh->callback_function = callback;
}

void usb_config_rx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    e350:	cmp	r2, #0
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    e352:	sub.w	r2, r0, #2
	qh->next = 1; // Terminate bit = 1
	qh->callback_function = callback;
}

void usb_config_rx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
    e356:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    e35a:	ite	ne
    e35c:	movne	r7, #0
    e35e:	moveq.w	r7, #536870912	; 0x20000000
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    e362:	cmp	r2, #3
    e364:	bls.n	e36a <usb_config_rx+0x1a>
    e366:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    e36a:	mov.w	sl, r0, lsl #7
    e36e:	ldr.w	r9, [pc, #64]	; e3b0 <usb_config_rx+0x60>
    e372:	mov	r5, r1
    e374:	mov	r4, r0
    e376:	add.w	r6, sl, r9
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    e37a:	movs	r1, #0
    e37c:	movs	r2, #64	; 0x40
    e37e:	mov	r8, r3
    e380:	mov	r0, r6
    e382:	bl	10d7c <memset>
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    e386:	movs	r0, #1
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
    e388:	orr.w	r1, r7, r5, lsl #16
    e38c:	str.w	r1, [sl, r9]
	qh->next = 1; // Terminate bit = 1
	qh->callback_function = callback;
    e390:	str.w	r8, [r6, #56]	; 0x38

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    e394:	str	r0, [r6, #8]
void usb_config_rx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
	if (cb) endpointN_notify_mask |= (1 << ep);
    e396:	cmp.w	r8, #0
    e39a:	beq.n	e366 <usb_config_rx+0x16>
    e39c:	ldr	r3, [pc, #12]	; (e3ac <usb_config_rx+0x5c>)
    e39e:	lsls	r0, r4
    e3a0:	ldr	r4, [r3, #0]
    e3a2:	orrs	r0, r4
    e3a4:	str	r0, [r3, #0]
    e3a6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    e3aa:	nop
    e3ac:	.word	0x20006204
    e3b0:	.word	0x20008000

0000e3b4 <usb_config_tx>:
}

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    e3b4:	cmp	r2, #0
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    e3b6:	sub.w	r2, r0, #2
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
	if (cb) endpointN_notify_mask |= (1 << ep);
}

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
    e3ba:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    e3be:	ite	ne
    e3c0:	movne	r7, #0
    e3c2:	moveq.w	r7, #536870912	; 0x20000000
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    e3c6:	cmp	r2, #3
    e3c8:	bls.n	e3ce <usb_config_tx+0x1a>
    e3ca:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    e3ce:	movs	r2, #64	; 0x40

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    e3d0:	lsls	r5, r0, #7
    e3d2:	ldr.w	r9, [pc, #68]	; e418 <usb_config_tx+0x64>
    e3d6:	mov	r8, r1
    e3d8:	add	r5, r2
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    e3da:	movs	r1, #0
    e3dc:	mov	r4, r0
    e3de:	mov	r6, r3

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    e3e0:	add.w	sl, r5, r9
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    e3e4:	mov	r0, sl
    e3e6:	bl	10d7c <memset>
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    e3ea:	movs	r2, #1
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
    e3ec:	orr.w	r1, r7, r8, lsl #16
    e3f0:	str.w	r1, [r5, r9]
	qh->next = 1; // Terminate bit = 1
	qh->callback_function = callback;
    e3f4:	str.w	r6, [sl, #56]	; 0x38

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    e3f8:	str.w	r2, [sl, #8]
void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
    e3fc:	cmp	r6, #0
    e3fe:	beq.n	e3ca <usb_config_tx+0x16>
    e400:	add.w	r0, r4, #16
    e404:	ldr	r3, [pc, #12]	; (e414 <usb_config_tx+0x60>)
    e406:	lsls	r2, r0
    e408:	ldr	r0, [r3, #0]
    e40a:	orrs	r2, r0
    e40c:	str	r2, [r3, #0]
    e40e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    e412:	nop
    e414:	.word	0x20006204
    e418:	.word	0x20008000

0000e41c <usb_prepare_transfer>:


void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
	transfer->status = (len << 16) | (1<<7);
    e41c:	lsls	r2, r2, #16
	uint32_t addr = (uint32_t)data;
	transfer->pointer0 = addr;
    e41e:	str	r1, [r0, #8]
	transfer->pointer1 = addr + 4096;
	transfer->pointer2 = addr + 8192;
	transfer->pointer3 = addr + 12288;
	transfer->pointer4 = addr + 16384;
	transfer->callback_param = param;
    e420:	str	r3, [r0, #28]


void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
	transfer->status = (len << 16) | (1<<7);
    e422:	orr.w	r2, r2, #128	; 0x80
}



void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
    e426:	push	{r4, r5, r6, r7}
	transfer->next = 1;
	transfer->status = (len << 16) | (1<<7);
    e428:	str	r2, [r0, #4]



void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
    e42a:	movs	r7, #1
	transfer->status = (len << 16) | (1<<7);
	uint32_t addr = (uint32_t)data;
	transfer->pointer0 = addr;
	transfer->pointer1 = addr + 4096;
    e42c:	add.w	r6, r1, #4096	; 0x1000
	transfer->pointer2 = addr + 8192;
    e430:	add.w	r5, r1, #8192	; 0x2000
	transfer->pointer3 = addr + 12288;
    e434:	add.w	r4, r1, #12288	; 0x3000
	transfer->pointer4 = addr + 16384;
    e438:	add.w	r2, r1, #16384	; 0x4000



void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
    e43c:	str	r7, [r0, #0]
	transfer->status = (len << 16) | (1<<7);
	uint32_t addr = (uint32_t)data;
	transfer->pointer0 = addr;
	transfer->pointer1 = addr + 4096;
    e43e:	str	r6, [r0, #12]
	transfer->pointer2 = addr + 8192;
    e440:	str	r5, [r0, #16]
	transfer->pointer3 = addr + 12288;
    e442:	str	r4, [r0, #20]
	transfer->pointer4 = addr + 16384;
    e444:	str	r2, [r0, #24]
	transfer->callback_param = param;
}
    e446:	pop	{r4, r5, r6, r7}
    e448:	bx	lr
    e44a:	nop

0000e44c <usb_transmit>:
	}
}

void usb_transmit(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    e44c:	subs	r3, r0, #2
    e44e:	cmp	r3, #3
    e450:	bls.n	e454 <usb_transmit+0x8>
    e452:	bx	lr
		count--;
	}
}

void usb_transmit(int endpoint_number, transfer_t *transfer)
{
    e454:	push	{r4, r5}
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
    e456:	ldr	r3, [pc, #24]	; (e470 <usb_transmit+0x24>)
    e458:	add.w	r4, r0, #16
    e45c:	movs	r5, #1
    e45e:	mov	r2, r1
    e460:	add.w	r0, r3, r0, lsl #7
    e464:	lsl.w	r1, r5, r4
}
    e468:	pop	{r4, r5}
void usb_transmit(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
    e46a:	b.w	db9c <schedule_transfer>
    e46e:	nop
    e470:	.word	0x20008040

0000e474 <usb_receive>:
}

void usb_receive(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    e474:	subs	r3, r0, #2
    e476:	cmp	r3, #3
    e478:	bls.n	e47c <usb_receive+0x8>
    e47a:	bx	lr
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
}

void usb_receive(int endpoint_number, transfer_t *transfer)
{
    e47c:	push	{r4}
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
	uint32_t mask = 1 << endpoint_number;
	schedule_transfer(endpoint, mask, transfer);
    e47e:	ldr	r3, [pc, #20]	; (e494 <usb_receive+0x20>)
    e480:	movs	r4, #1
    e482:	mov	r2, r1
    e484:	lsl.w	r1, r4, r0
    e488:	add.w	r0, r3, r0, lsl #7
}
    e48c:	ldr.w	r4, [sp], #4
void usb_receive(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
	uint32_t mask = 1 << endpoint_number;
	schedule_transfer(endpoint, mask, transfer);
    e490:	b.w	db9c <schedule_transfer>
    e494:	.word	0x20008000

0000e498 <usb_transfer_status>:
uint32_t usb_transfer_status(const transfer_t *transfer)
{
#if defined(USB_MTPDISK) || defined(USB_MTPDISK_SERIAL)
	uint32_t status, cmd;
	//int count=0;
	cmd = USB1_USBCMD;
    e498:	ldr	r2, [pc, #32]	; (e4bc <usb_transfer_status+0x24>)
    e49a:	ldr.w	r3, [r2, #320]	; 0x140
	while (1) {
		__disable_irq();
    e49e:	cpsid	i
		USB1_USBCMD = cmd | USB_USBCMD_ATDTW;
    e4a0:	orr.w	r3, r3, #16384	; 0x4000
    e4a4:	str.w	r3, [r2, #320]	; 0x140
		status = transfer->status;
    e4a8:	ldr	r1, [r0, #4]
		cmd = USB1_USBCMD;
    e4aa:	ldr.w	r3, [r2, #320]	; 0x140
		__enable_irq();
    e4ae:	cpsie	i
		if (cmd & USB_USBCMD_ATDTW) return status;
    e4b0:	tst.w	r3, #16384	; 0x4000
    e4b4:	beq.n	e49e <usb_transfer_status+0x6>
		//if (++count > 1) break; // for completed, check 10 times
	}
#else
	return transfer->status;
#endif
}
    e4b6:	mov	r0, r1
    e4b8:	bx	lr
    e4ba:	nop
    e4bc:	.word	0x402e0000

0000e4c0 <delay>:

void delay(uint32_t msec)
{
	uint32_t start;

	if (msec == 0) return;
    e4c0:	cmp	r0, #0
    e4c2:	beq.n	e574 <delay+0xb4>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    e4c4:	movs	r2, #1
{

}*/

void delay(uint32_t msec)
{
    e4c6:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e4ca:	sub	sp, #20
    e4cc:	mov	fp, r0
    e4ce:	ldr	r4, [pc, #168]	; (e578 <delay+0xb8>)
    e4d0:	ldr	r5, [pc, #168]	; (e57c <delay+0xbc>)
    e4d2:	ldr	r6, [pc, #172]	; (e580 <delay+0xc0>)
    e4d4:	ldrd	r8, r9, [sp, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    e4d8:	ldrex	r3, [r4]
uint32_t micros(void)
{
	uint32_t smc, scc;
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
    e4dc:	ldr	r0, [r5, #0]
		scc = systick_cycle_count;
    e4de:	ldr	r3, [r6, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    e4e0:	strex	r1, r2, [r4]
	} while ( __STREXW(1, &systick_safe_read));
    e4e4:	cmp	r1, #0
    e4e6:	bne.n	e4d8 <delay+0x18>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    e4e8:	ldr	r7, [pc, #152]	; (e584 <delay+0xc4>)
    e4ea:	strd	r8, r9, [sp, #8]
    e4ee:	ldr	r2, [r7, #0]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
    e4f0:	subs	r3, r2, r3
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    e4f2:	ldr	r2, [pc, #148]	; (e588 <delay+0xc8>)
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
    e4f4:	mov.w	lr, #1000	; 0x3e8
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    e4f8:	str	r7, [sp, #4]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    e4fa:	ldr	r2, [r2, #0]
    e4fc:	movs	r7, #1
    e4fe:	umull	r2, r3, r3, r2
	if (frac > 1000) frac = 1000;
    e502:	mov.w	r2, #1000	; 0x3e8
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    e506:	mov	r8, r3
	if (frac > 1000) frac = 1000;
    e508:	movs	r3, #0
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    e50a:	cmp	r3, r1
    e50c:	it	eq
    e50e:	cmpeq	r2, r8
    e510:	ite	cs
    e512:	movcs	sl, r8
    e514:	movcc	sl, lr
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
    e516:	mla	sl, lr, r0, sl
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    e51a:	ldrex	r3, [r4]
uint32_t micros(void)
{
	uint32_t smc, scc;
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
    e51e:	ldr	r2, [r5, #0]
		scc = systick_cycle_count;
    e520:	ldr	r1, [r6, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    e522:	strex	r3, r7, [r4]
	} while ( __STREXW(1, &systick_safe_read));
    e526:	cmp	r3, #0
    e528:	bne.n	e51a <delay+0x5a>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    e52a:	ldr	r0, [sp, #4]
    e52c:	ldr	r0, [r0, #0]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
    e52e:	subs	r1, r0, r1
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    e530:	ldr	r0, [pc, #84]	; (e588 <delay+0xc8>)
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
    e532:	mov.w	lr, #1000	; 0x3e8
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    e536:	ldr	r0, [r0, #0]
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
    e538:	mul.w	r2, lr, r2
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    e53c:	umull	r0, r1, r1, r0
	if (frac > 1000) frac = 1000;
    e540:	mov.w	r0, #1000	; 0x3e8
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
    e544:	rsb	r2, sl, r2
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    e548:	mov	r8, r1
	if (frac > 1000) frac = 1000;
    e54a:	movs	r1, #0
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    e54c:	cmp	r1, r3
    e54e:	it	eq
    e550:	cmpeq	r0, r8
    e552:	ite	cs
    e554:	movcs	r3, r8
    e556:	movcc	r3, lr
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
    e558:	add	r2, r3
    e55a:	cmp	r2, lr
    e55c:	bcc.n	e56e <delay+0xae>
			if (--msec == 0) return;
    e55e:	subs.w	fp, fp, #1
			start += 1000;
    e562:	add.w	sl, sl, #1000	; 0x3e8

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
			if (--msec == 0) return;
    e566:	bne.n	e51a <delay+0x5a>
			start += 1000;
		}
		yield();
	}
	// TODO...
}
    e568:	add	sp, #20
    e56a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	while (1) {
		while ((micros() - start) >= 1000) {
			if (--msec == 0) return;
			start += 1000;
		}
		yield();
    e56e:	bl	f2bc <yield>
	}
    e572:	b.n	e51a <delay+0x5a>
    e574:	bx	lr
    e576:	nop
    e578:	.word	0x20008300
    e57c:	.word	0x20006244
    e580:	.word	0x2000623c
    e584:	.word	0xe0001004
    e588:	.word	0x20006240

0000e58c <micros>:
	// TODO...
}

uint32_t micros(void)
{
    e58c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
    e590:	ldr	r2, [pc, #72]	; (e5dc <micros+0x50>)
    e592:	movs	r6, #1
    e594:	ldr	r5, [pc, #72]	; (e5e0 <micros+0x54>)
    e596:	ldr	r4, [pc, #76]	; (e5e4 <micros+0x58>)
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    e598:	ldrex	r3, [r2]
	uint32_t smc, scc;
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
    e59c:	ldr	r1, [r5, #0]
		scc = systick_cycle_count;
    e59e:	ldr	r0, [r4, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    e5a0:	strex	r3, r6, [r2]
	} while ( __STREXW(1, &systick_safe_read));
    e5a4:	cmp	r3, #0
    e5a6:	bne.n	e598 <micros+0xc>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    e5a8:	ldr	r2, [pc, #60]	; (e5e8 <micros+0x5c>)
    e5aa:	ldr	r6, [r2, #0]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    e5ac:	ldr	r7, [pc, #60]	; (e5ec <micros+0x60>)
		smc = systick_millis_count;
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
    e5ae:	subs	r2, r6, r0
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
	if (frac > 1000) frac = 1000;
    e5b0:	mov.w	r9, #0
    e5b4:	mov.w	r8, #1000	; 0x3e8
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    e5b8:	ldr	r6, [r7, #0]
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
	return usec;
    e5ba:	mov.w	r0, #1000	; 0x3e8
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    e5be:	cmp	r9, r3
    e5c0:	umull	r6, r7, r2, r6
    e5c4:	it	eq
    e5c6:	cmpeq	r8, r7
    e5c8:	mov	r4, r7
    e5ca:	ite	cs
    e5cc:	movcs	r4, r7
    e5ce:	movcc	r4, r0
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
	return usec;
}
    e5d0:	mla	r0, r0, r1, r4
    e5d4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
    e5d8:	bx	lr
    e5da:	nop
    e5dc:	.word	0x20008300
    e5e0:	.word	0x20006244
    e5e4:	.word	0x2000623c
    e5e8:	.word	0xe0001004
    e5ec:	.word	0x20006240

0000e5f0 <unused_interrupt_vector>:
//  R0
// Code from :: https://community.nxp.com/thread/389002
__attribute__((naked))
void unused_interrupt_vector(void)
{
  __asm( ".syntax unified\n"
    e5f0:	movs	r0, #4
    e5f2:	mov	r1, lr
    e5f4:	tst	r0, r1
    e5f6:	beq.n	e600 <_MSP>
    e5f8:	mrs	r0, PSP
    e5fc:	b.w	e610 <HardFault_HandlerC>

0000e600 <_MSP>:
    e600:	mrs	r0, MSP
    e604:	b.w	e610 <HardFault_HandlerC>

0000e608 <startup_default_early_hook>:
         "B HardFault_HandlerC \n"
         "_MSP: \n"
         "MRS R0, MSP \n"
         "B HardFault_HandlerC \n"
         ".syntax divided\n") ;
}
    e608:	bx	lr
    e60a:	nop

0000e60c <startup_default_late_hook>:
#endif

extern int main (void);
void startup_default_early_hook(void) {}
void startup_early_hook(void)		__attribute__ ((weak, alias("startup_default_early_hook")));
void startup_default_late_hook(void) {}
    e60c:	bx	lr
    e60e:	nop

0000e610 <HardFault_HandlerC>:
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
    e610:	ldr	r3, [pc, #108]	; (e680 <HardFault_HandlerC+0x70>)
  printf(" _AFSR ::  %x\n", _AFSR);
  printf(" _BFAR ::  %x\n", _BFAR);
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
    e612:	movs	r1, #5
    e614:	ldr	r2, [pc, #108]	; (e684 <HardFault_HandlerC+0x74>)
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
    e616:	movs	r0, #56	; 0x38
         ".syntax divided\n") ;
}

__attribute__((weak))
void HardFault_HandlerC(unsigned int *hardfault_args)
{
    e618:	push	{r4, r5, lr}
  printf(" _AFSR ::  %x\n", _AFSR);
  printf(" _BFAR ::  %x\n", _BFAR);
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
    e61a:	str.w	r1, [r2, #328]	; 0x148
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
  GPIO2_DR_SET = (1 << 3);
    e61e:	movs	r1, #8
  printf(" _BFAR ::  %x\n", _BFAR);
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
    e620:	str.w	r0, [r2, #824]	; 0x338
         ".syntax divided\n") ;
}

__attribute__((weak))
void HardFault_HandlerC(unsigned int *hardfault_args)
{
    e624:	sub	sp, #12
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
    e626:	ldr	r2, [r3, #4]
  GPIO2_DR_SET = (1 << 3);
  GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);

  if ( F_CPU_ACTUAL >= 600000000 )
    e628:	ldr	r4, [pc, #92]	; (e688 <HardFault_HandlerC+0x78>)
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
    e62a:	orrs	r2, r1
  GPIO2_DR_SET = (1 << 3);
  GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);

  if ( F_CPU_ACTUAL >= 600000000 )
    e62c:	ldr	r0, [pc, #92]	; (e68c <HardFault_HandlerC+0x7c>)
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
    e62e:	str	r2, [r3, #4]
  GPIO2_DR_SET = (1 << 3);
    e630:	str.w	r1, [r3, #132]	; 0x84
  GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);
    e634:	str.w	r1, [r3, #136]	; 0x88

  if ( F_CPU_ACTUAL >= 600000000 )
    e638:	ldr	r3, [r4, #0]
    e63a:	cmp	r3, r0
    e63c:	bls.n	e644 <HardFault_HandlerC+0x34>
    set_arm_clock(300000000);
    e63e:	ldr	r0, [pc, #80]	; (e690 <HardFault_HandlerC+0x80>)
    e640:	bl	d8d8 <set_arm_clock>

  while (1)
  {
    GPIO2_DR_SET = (1 << 3); //digitalWrite(13, HIGH);
    e644:	ldr	r5, [pc, #56]	; (e680 <HardFault_HandlerC+0x70>)
    e646:	movs	r4, #8
    // digitalWrite(13, HIGH);
    for (nn = 0; nn < 2000000/2; nn++) ;
    e648:	movs	r0, #0
    e64a:	ldr	r2, [pc, #72]	; (e694 <HardFault_HandlerC+0x84>)
    GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);
    // digitalWrite(13, LOW);
    for (nn = 0; nn < 18000000/2; nn++) ;
    e64c:	ldr	r1, [pc, #72]	; (e698 <HardFault_HandlerC+0x88>)
  if ( F_CPU_ACTUAL >= 600000000 )
    set_arm_clock(300000000);

  while (1)
  {
    GPIO2_DR_SET = (1 << 3); //digitalWrite(13, HIGH);
    e64e:	str.w	r4, [r5, #132]	; 0x84
    // digitalWrite(13, HIGH);
    for (nn = 0; nn < 2000000/2; nn++) ;
    e652:	str	r0, [sp, #4]
    e654:	ldr	r3, [sp, #4]
    e656:	cmp	r3, r2
    e658:	bhi.n	e666 <HardFault_HandlerC+0x56>
    e65a:	ldr	r3, [sp, #4]
    e65c:	adds	r3, #1
    e65e:	str	r3, [sp, #4]
    e660:	ldr	r3, [sp, #4]
    e662:	cmp	r3, r2
    e664:	bls.n	e65a <HardFault_HandlerC+0x4a>
    GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);
    e666:	str.w	r4, [r5, #136]	; 0x88
    // digitalWrite(13, LOW);
    for (nn = 0; nn < 18000000/2; nn++) ;
    e66a:	str	r0, [sp, #4]
    e66c:	ldr	r3, [sp, #4]
    e66e:	cmp	r3, r1
    e670:	bhi.n	e64e <HardFault_HandlerC+0x3e>
    e672:	ldr	r3, [sp, #4]
    e674:	adds	r3, #1
    e676:	str	r3, [sp, #4]
    e678:	ldr	r3, [sp, #4]
    e67a:	cmp	r3, r1
    e67c:	bls.n	e672 <HardFault_HandlerC+0x62>
    e67e:	b.n	e64e <HardFault_HandlerC+0x3e>
    e680:	.word	0x401bc000
    e684:	.word	0x401f8000
    e688:	.word	0x20000c24
    e68c:	.word	0x23c345ff
    e690:	.word	0x11e1a300
    e694:	.word	0x000f423f
    e698:	.word	0x0089543f

0000e69c <_sbrk>:

char *__brkval = (char *)&_heap_start;

void * _sbrk(int incr)
{
        char *prev = __brkval;
    e69c:	ldr	r2, [pc, #36]	; (e6c4 <_sbrk+0x28>)
extern unsigned long _heap_end;

char *__brkval = (char *)&_heap_start;

void * _sbrk(int incr)
{
    e69e:	push	{r3, lr}
        char *prev = __brkval;
    e6a0:	ldr	r3, [r2, #0]
        if (incr != 0) {
    e6a2:	cbz	r0, e6ae <_sbrk+0x12>
                if (prev + incr > (char *)&_heap_end) {
    e6a4:	add	r0, r3
    e6a6:	ldr	r1, [pc, #32]	; (e6c8 <_sbrk+0x2c>)
    e6a8:	cmp	r0, r1
    e6aa:	bhi.n	e6b2 <_sbrk+0x16>
                        errno = ENOMEM;
                        return (void *)-1;
                }
                __brkval = prev + incr;
    e6ac:	str	r0, [r2, #0]
        }
        return prev;
}
    e6ae:	mov	r0, r3
    e6b0:	pop	{r3, pc}
void * _sbrk(int incr)
{
        char *prev = __brkval;
        if (incr != 0) {
                if (prev + incr > (char *)&_heap_end) {
                        errno = ENOMEM;
    e6b2:	bl	10594 <__errno>
    e6b6:	movs	r2, #12
                        return (void *)-1;
    e6b8:	mov.w	r3, #4294967295
void * _sbrk(int incr)
{
        char *prev = __brkval;
        if (incr != 0) {
                if (prev + incr > (char *)&_heap_end) {
                        errno = ENOMEM;
    e6bc:	str	r2, [r0, #0]
                        return (void *)-1;
                }
                __brkval = prev + incr;
        }
        return prev;
}
    e6be:	mov	r0, r3
    e6c0:	pop	{r3, pc}
    e6c2:	nop
    e6c4:	.word	0x20000c28
    e6c8:	.word	0x20280000

0000e6cc <__cxa_pure_virtual>:
}

__attribute__((weak))
void __cxa_pure_virtual()
{
	while (1) asm ("WFI");
    e6cc:	wfi
    e6ce:	b.n	e6cc <__cxa_pure_virtual>

0000e6d0 <rtc_get>:
#include "debug/printf.h"


unsigned long rtc_get(void)
{
	uint32_t hi1 = SNVS_HPRTCMR;
    e6d0:	ldr	r3, [pc, #40]	; (e6fc <rtc_get+0x2c>)
#include "imxrt.h"
#include "debug/printf.h"


unsigned long rtc_get(void)
{
    e6d2:	push	{r4, r5}
	uint32_t hi1 = SNVS_HPRTCMR;
    e6d4:	ldr	r0, [r3, #36]	; 0x24
	uint32_t lo1 = SNVS_HPRTCLR;
	while (1) {
		uint32_t hi2 = SNVS_HPRTCMR;
    e6d6:	mov	r4, r3


unsigned long rtc_get(void)
{
	uint32_t hi1 = SNVS_HPRTCMR;
	uint32_t lo1 = SNVS_HPRTCLR;
    e6d8:	ldr	r1, [r3, #40]	; 0x28
	while (1) {
		uint32_t hi2 = SNVS_HPRTCMR;
    e6da:	ldr	r2, [r4, #36]	; 0x24
		uint32_t lo2 = SNVS_HPRTCLR;
    e6dc:	ldr	r3, [r4, #40]	; 0x28
		if (lo1 == lo2 && hi1 == hi2) {
    e6de:	cmp	r1, r3
    e6e0:	it	eq
    e6e2:	cmpeq	r0, r2
unsigned long rtc_get(void)
{
	uint32_t hi1 = SNVS_HPRTCMR;
	uint32_t lo1 = SNVS_HPRTCLR;
	while (1) {
		uint32_t hi2 = SNVS_HPRTCMR;
    e6e4:	mov	r0, r2
		uint32_t lo2 = SNVS_HPRTCLR;
    e6e6:	mov	r1, r3
		if (lo1 == lo2 && hi1 == hi2) {
    e6e8:	ite	eq
    e6ea:	moveq	r5, #1
    e6ec:	movne	r5, #0
    e6ee:	cmp	r5, #0
    e6f0:	beq.n	e6da <rtc_get+0xa>
			return (hi2 << 17) | (lo2 >> 15);
    e6f2:	lsrs	r1, r3, #15
		}
		hi1 = hi2;
		lo1 = lo2;
	}
}
    e6f4:	pop	{r4, r5}
    e6f6:	orr.w	r0, r1, r2, lsl #17
    e6fa:	bx	lr
    e6fc:	.word	0x400d4000

0000e700 <extmem_malloc>:
#define IS_EXTMEM(addr) (((uint32_t)ptr >> 28) == 7)
#endif


void *extmem_malloc(size_t size)
{
    e700:	push	{r4, lr}
    e702:	mov	r4, r0
#ifdef HAS_EXTRAM
	void *ptr = sm_malloc_pool(&extmem_smalloc_pool, size);
    e704:	ldr	r0, [pc, #20]	; (e71c <extmem_malloc+0x1c>)
    e706:	mov	r1, r4
    e708:	bl	f6e4 <sm_malloc_pool>
	if (ptr) return ptr;
    e70c:	cbz	r0, e710 <extmem_malloc+0x10>
#endif
	return malloc(size);
}
    e70e:	pop	{r4, pc}
{
#ifdef HAS_EXTRAM
	void *ptr = sm_malloc_pool(&extmem_smalloc_pool, size);
	if (ptr) return ptr;
#endif
	return malloc(size);
    e710:	mov	r0, r4
}
    e712:	ldmia.w	sp!, {r4, lr}
{
#ifdef HAS_EXTRAM
	void *ptr = sm_malloc_pool(&extmem_smalloc_pool, size);
	if (ptr) return ptr;
#endif
	return malloc(size);
    e716:	b.w	105f0 <malloc>
    e71a:	nop
    e71c:	.word	0x20008400

0000e720 <ultoa>:
#include <stdlib.h>
#include <math.h>


char * ultoa(unsigned long val, char *buf, int radix)
{
    e720:	push	{r4, r5, r6, r7}
    e722:	subs	r6, r1, #1
	unsigned digit;
	int i=0, j;
    e724:	movs	r5, #0
#include <stdlib.h>
#include <math.h>


char * ultoa(unsigned long val, char *buf, int radix)
{
    e726:	mov	r7, r6
    e728:	b.n	e72c <ultoa+0xc>
	while (1) {
		digit = val % radix;
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
		val /= radix;
		if (val == 0) break;
		i++;
    e72a:	adds	r5, #1
	unsigned digit;
	int i=0, j;
	char t;

	while (1) {
		digit = val % radix;
    e72c:	udiv	r3, r0, r2
    e730:	mls	r0, r2, r3, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    e734:	add.w	r4, r0, #55	; 0x37
    e738:	cmp	r0, #9
    e73a:	add.w	r0, r0, #48	; 0x30
    e73e:	uxtb	r4, r4
    e740:	it	ls
    e742:	uxtbls	r4, r0
		val /= radix;
		if (val == 0) break;
    e744:	mov	r0, r3
	int i=0, j;
	char t;

	while (1) {
		digit = val % radix;
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    e746:	strb.w	r4, [r7, #1]!
		val /= radix;
		if (val == 0) break;
    e74a:	cmp	r3, #0
    e74c:	bne.n	e72a <ultoa+0xa>
		i++;
	}
	buf[i + 1] = 0;
    e74e:	adds	r2, r1, r5
    e750:	strb	r3, [r2, #1]
	for (j=0; j < i; j++, i--) {
    e752:	cbz	r5, e768 <ultoa+0x48>
    e754:	adds	r3, #1
		t = buf[j];
    e756:	ldrb.w	r4, [r6, #1]!
		buf[j] = buf[i];
    e75a:	ldrb	r7, [r2, #0]
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    e75c:	subs	r0, r5, r3
		t = buf[j];
		buf[j] = buf[i];
    e75e:	strb	r7, [r6, #0]
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    e760:	cmp	r3, r0
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
    e762:	strb.w	r4, [r2], #-1
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    e766:	blt.n	e754 <ultoa+0x34>
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
	}
	return buf;
}
    e768:	mov	r0, r1
    e76a:	pop	{r4, r5, r6, r7}
    e76c:	bx	lr
    e76e:	nop

0000e770 <dtostrf>:
	int decpt, sign, reqd, pad;
	const char *s, *e;
	char *p;

	int awidth = abs(width);
	if (isnanf(val)) {
    e770:	vcmp.f32	s0, s0
{
	int decpt, sign, reqd, pad;
	const char *s, *e;
	char *p;

	int awidth = abs(width);
    e774:	eor.w	r3, r0, r0, asr #31
char * fcvtf(float, int, int *, int *);
int isnanf (float x);
int isinff (float x);

char * dtostrf(float val, int width, unsigned int precision, char *buf)
{
    e778:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	int decpt, sign, reqd, pad;
	const char *s, *e;
	char *p;

	int awidth = abs(width);
	if (isnanf(val)) {
    e77c:	vmrs	APSR_nzcv, fpscr
char * fcvtf(float, int, int *, int *);
int isnanf (float x);
int isinff (float x);

char * dtostrf(float val, int width, unsigned int precision, char *buf)
{
    e780:	mov	r5, r0
    e782:	mov	r4, r2
	int decpt, sign, reqd, pad;
	const char *s, *e;
	char *p;

	int awidth = abs(width);
    e784:	sub.w	r3, r3, r0, asr #31
char * fcvtf(float, int, int *, int *);
int isnanf (float x);
int isinff (float x);

char * dtostrf(float val, int width, unsigned int precision, char *buf)
{
    e788:	vpush	{d8}
    e78c:	vmov.f32	s16, s0
    e790:	sub	sp, #16
	int decpt, sign, reqd, pad;
	const char *s, *e;
	char *p;

	int awidth = abs(width);
	if (isnanf(val)) {
    e792:	bvs.w	e9dc <dtostrf+0x26c>
			awidth--;
		}
		*buf = 0;
		return buf;
	}
	if (isinff(val)) {
    e796:	vabs.f32	s15, s0
    e79a:	vldr	s14, [pc, #792]	; eab4 <dtostrf+0x344>
    e79e:	vcmp.f32	s15, s14
    e7a2:	vmrs	APSR_nzcv, fpscr
    e7a6:	ble.n	e82e <dtostrf+0xbe>
		int ndigs = (val<0) ? 4 : 3;
    e7a8:	vcmpe.f32	s0, #0.0
    e7ac:	vmrs	APSR_nzcv, fpscr
    e7b0:	ite	mi
    e7b2:	movmi	r2, #4
    e7b4:	movpl	r2, #3
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
    e7b6:	cmp	r2, r3
    e7b8:	blt.n	e7fe <dtostrf+0x8e>
		if (width<0) {
    e7ba:	cmp	r0, #0
    e7bc:	blt.w	eaa0 <dtostrf+0x330>
		*buf = 0;
		return buf;
	}
	if (isinff(val)) {
		int ndigs = (val<0) ? 4 : 3;
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
    e7c0:	movs	r2, #0
			while (awidth) {
				*buf++ = ' ';
				awidth--;
			}
		}
		if (val<0) *buf++ = '-';
    e7c2:	vcmpe.f32	s16, #0.0
    e7c6:	vmrs	APSR_nzcv, fpscr
    e7ca:	bmi.w	ea62 <dtostrf+0x2f2>
		if (DTOA_UPPER) {
			*buf++ = 'I';  *buf++ = 'N';  *buf++ = 'F';
    e7ce:	movs	r5, #73	; 0x49
    e7d0:	movs	r0, #78	; 0x4e
    e7d2:	movs	r1, #70	; 0x46
    e7d4:	adds	r3, r4, #3
    e7d6:	strb	r5, [r4, #0]
    e7d8:	strb	r0, [r4, #1]
    e7da:	strb	r1, [r4, #2]
		} else {
			*buf++ = 'i';  *buf++ = 'n';  *buf++ = 'f';
		}
		while (awidth) {
    e7dc:	cmp	r2, #0
    e7de:	beq.w	eab0 <dtostrf+0x340>
    e7e2:	add	r2, r3
			*buf++ = ' ';
    e7e4:	movs	r1, #32
    e7e6:	strb.w	r1, [r3], #1
		if (DTOA_UPPER) {
			*buf++ = 'I';  *buf++ = 'N';  *buf++ = 'F';
		} else {
			*buf++ = 'i';  *buf++ = 'n';  *buf++ = 'f';
		}
		while (awidth) {
    e7ea:	cmp	r2, r3
    e7ec:	bne.n	e7e6 <dtostrf+0x76>
			*buf++ = ' ';
			awidth--;
		}
		*buf = 0;
    e7ee:	movs	r3, #0
		return buf;
    e7f0:	mov	r0, r2
		}
		while (awidth) {
			*buf++ = ' ';
			awidth--;
		}
		*buf = 0;
    e7f2:	strb	r3, [r2, #0]

	//char format[20];
	//sprintf(format, "%%%d.%df", width, precision);
	//sprintf(buf, format, val);
	return buf;
}
    e7f4:	add	sp, #16
    e7f6:	vpop	{d8}
    e7fa:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return buf;
	}
	if (isinff(val)) {
		int ndigs = (val<0) ? 4 : 3;
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
		if (width<0) {
    e7fe:	cmp	r0, #0
		*buf = 0;
		return buf;
	}
	if (isinff(val)) {
		int ndigs = (val<0) ? 4 : 3;
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
    e800:	sub.w	r2, r3, r2
		if (width<0) {
    e804:	bge.n	e7c2 <dtostrf+0x52>
			while (awidth) {
    e806:	cmp	r2, #0
    e808:	beq.w	eaa0 <dtostrf+0x330>
    e80c:	adds	r3, r4, r2
				*buf++ = ' ';
    e80e:	movs	r2, #32
    e810:	strb.w	r2, [r4], #1
	}
	if (isinff(val)) {
		int ndigs = (val<0) ? 4 : 3;
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
		if (width<0) {
			while (awidth) {
    e814:	cmp	r4, r3
    e816:	bne.n	e810 <dtostrf+0xa0>
				*buf++ = ' ';
				awidth--;
			}
		}
		if (val<0) *buf++ = '-';
    e818:	vcmpe.f32	s16, #0.0
    e81c:	vmrs	APSR_nzcv, fpscr
    e820:	bpl.w	ea52 <dtostrf+0x2e2>
    e824:	movs	r2, #0
    e826:	movs	r1, #45	; 0x2d
    e828:	adds	r4, r3, #1
    e82a:	strb	r1, [r3, #0]
    e82c:	b.n	e7ce <dtostrf+0x5e>
    e82e:	mov	r7, r1
		}
		*buf = 0;
		return buf;
	}

	s = fcvtf(val, precision, &decpt, &sign);
    e830:	add	r2, sp, #8
    e832:	add	r1, sp, #4
    e834:	mov	r0, r7
    e836:	mov	sl, r7
    e838:	bl	10570 <fcvtf>

	// if only 1 digit in output
	if (precision == 0 && decpt == 0) {
    e83c:	ldr.w	r9, [sp, #4]
		}
		*buf = 0;
		return buf;
	}

	s = fcvtf(val, precision, &decpt, &sign);
    e840:	mov	r8, r0

	// if only 1 digit in output
	if (precision == 0 && decpt == 0) {
    e842:	cmp	r7, #0
    e844:	beq.w	e956 <dtostrf+0x1e6>
    e848:	rsb	r3, r9, #0
		s = (*s < '5') ? "0" : "1";
		decpt++;
	}

	// if all zeros, limit to precision
	if (-decpt  > (int)precision) {
    e84c:	cmp	r3, r7
    e84e:	bgt.w	e9ca <dtostrf+0x25a>
    e852:	mov	r0, r8
    e854:	bl	113c0 <strlen>
    e858:	mov	r6, r0
	}

	reqd = strlen(s);

	// add 1 for decimal point
	if (reqd > decpt) reqd++;
    e85a:	cmp	r9, r6
    e85c:	it	lt
    e85e:	addlt	r6, #1

	// add 1 for zero in front of decimal point
	if (decpt == 0) reqd++;
    e860:	cmp.w	r9, #0
    e864:	beq.w	e9c6 <dtostrf+0x256>

	// if leading zeros after decimal point
	if (decpt < 0 && precision > 0) {
    e868:	cmp.w	r9, #0
    e86c:	bge.n	e8b4 <dtostrf+0x144>
    e86e:	cbz	r7, e8b4 <dtostrf+0x144>
		// ensure enough trailing zeros, add 2 for '0.'
		reqd = precision + 2;

		if (strlen(s) > precision + decpt) {
    e870:	add.w	r3, r9, r7
	if (decpt == 0) reqd++;

	// if leading zeros after decimal point
	if (decpt < 0 && precision > 0) {
		// ensure enough trailing zeros, add 2 for '0.'
		reqd = precision + 2;
    e874:	adds	r6, r7, #2

		if (strlen(s) > precision + decpt) {
    e876:	cmp	r3, r0
    e878:	bcs.n	e8b4 <dtostrf+0x144>

			int newPrecision = precision;
			int newDecimalPoint;

			// shift decimal point
			while (newPrecision > 0) {
    e87a:	cmp	r7, #0
    e87c:	ble.n	e88c <dtostrf+0x11c>
				val *= 10.0f;
    e87e:	vmov.f32	s15, #36	; 0x41200000  10.0

			int newPrecision = precision;
			int newDecimalPoint;

			// shift decimal point
			while (newPrecision > 0) {
    e882:	subs.w	sl, sl, #1
				val *= 10.0f;
    e886:	vmul.f32	s16, s16, s15

			int newPrecision = precision;
			int newDecimalPoint;

			// shift decimal point
			while (newPrecision > 0) {
    e88a:	bne.n	e882 <dtostrf+0x112>
				val *= 10.0f;
				newPrecision--;
			}

			// round after accounting for leading 0's
			s = fcvtf(val, newPrecision, &newDecimalPoint, &sign);
    e88c:	add	r2, sp, #8
    e88e:	mov	r0, sl
    e890:	vmov.f32	s0, s16
    e894:	add	r1, sp, #12
    e896:	bl	10570 <fcvtf>

			// if rounded up to new digit (e.g. 0.09 to 0.1), move decimal point
			if (newDecimalPoint - decpt == precision + 1) decpt++;
    e89a:	ldr.w	r9, [sp, #4]
    e89e:	ldr	r2, [sp, #12]
    e8a0:	adds	r3, r7, #1
				val *= 10.0f;
				newPrecision--;
			}

			// round after accounting for leading 0's
			s = fcvtf(val, newPrecision, &newDecimalPoint, &sign);
    e8a2:	mov	r8, r0

			// if rounded up to new digit (e.g. 0.09 to 0.1), move decimal point
			if (newDecimalPoint - decpt == precision + 1) decpt++;
    e8a4:	rsb	r2, r9, r2
    e8a8:	cmp	r2, r3
    e8aa:	bne.n	e8b4 <dtostrf+0x144>
    e8ac:	add.w	r9, r9, #1
    e8b0:	str.w	r9, [sp, #4]
		}
	}

	// add 1 for sign if negative
	if (sign) reqd++;
    e8b4:	ldr.w	lr, [sp, #8]
    e8b8:	cmp.w	lr, #0
    e8bc:	beq.n	e97c <dtostrf+0x20c>
    e8be:	adds	r6, #1

	p = buf;
	e = p + reqd;
	pad = width - reqd;
    e8c0:	subs	r0, r5, r6

	// add 1 for sign if negative
	if (sign) reqd++;

	p = buf;
	e = p + reqd;
    e8c2:	adds	r1, r4, r6
	pad = width - reqd;
	if (pad > 0) {
    e8c4:	cmp	r0, #0
    e8c6:	bgt.n	e986 <dtostrf+0x216>
	}

	// add 1 for sign if negative
	if (sign) reqd++;

	p = buf;
    e8c8:	mov	r2, r4
	pad = width - reqd;
	if (pad > 0) {
		e += pad;
		while (pad-- > 0) *p++ = ' ';
	}
	if (sign) *p++ = '-';
    e8ca:	movs	r0, #45	; 0x2d
    e8cc:	adds	r3, r2, #1
    e8ce:	strb	r0, [r2, #0]
	if (decpt == 0 && precision > 0) {
    e8d0:	cmp.w	r9, #0
    e8d4:	beq.n	e9b2 <dtostrf+0x242>
		*p++ = '0';
		*p++ = '.';
	}
	else if (decpt < 0 && precision > 0) {
    e8d6:	cbz	r7, e8fa <dtostrf+0x18a>
    e8d8:	cmp.w	r9, #0
    e8dc:	bge.n	e8fa <dtostrf+0x18a>
		*p++ = '0';
    e8de:	mov	r2, r3
    e8e0:	movs	r0, #48	; 0x30
		*p++ = '.';
    e8e2:	movs	r7, #46	; 0x2e
	if (decpt == 0 && precision > 0) {
		*p++ = '0';
		*p++ = '.';
	}
	else if (decpt < 0 && precision > 0) {
		*p++ = '0';
    e8e4:	strb.w	r0, [r2], #2
		*p++ = '.';
    e8e8:	strb	r7, [r3, #1]
    e8ea:	rsb	r3, r9, r2
		// print leading zeros
		while ( decpt < 0 ) {
			decpt++;
			*p++ = '0';
    e8ee:	strb.w	r0, [r2], #1
	}
	else if (decpt < 0 && precision > 0) {
		*p++ = '0';
		*p++ = '.';
		// print leading zeros
		while ( decpt < 0 ) {
    e8f2:	cmp	r2, r3
    e8f4:	bne.n	e8ee <dtostrf+0x17e>
    e8f6:	movs	r2, #0
    e8f8:	str	r2, [sp, #4]
			decpt++;
			*p++ = '0';
		}
	}
	// print digits
	while (p < e) {
    e8fa:	cmp	r3, r1
    e8fc:	bcs.n	e940 <dtostrf+0x1d0>
		*p++ = *s++;
    e8fe:	adds	r7, r3, #1
    e900:	ldrb.w	r2, [r8]
    e904:	add.w	r8, r8, #1
		if (p == e) break;
    e908:	cmp	r7, r1
			*p++ = '0';
		}
	}
	// print digits
	while (p < e) {
		*p++ = *s++;
    e90a:	strb	r2, [r3, #0]
		if (p == e) break;
    e90c:	beq.n	e942 <dtostrf+0x1d2>
    e90e:	ldr	r2, [sp, #4]
		if (--decpt == 0) *p++ = '.';
    e910:	mov.w	lr, #46	; 0x2e
    e914:	b.n	e92e <dtostrf+0x1be>
    e916:	strb.w	lr, [r3, #1]
    e91a:	adds	r3, #2
			decpt++;
			*p++ = '0';
		}
	}
	// print digits
	while (p < e) {
    e91c:	cmp	r3, r1
		*p++ = *s++;
    e91e:	add.w	r7, r3, #1
			decpt++;
			*p++ = '0';
		}
	}
	// print digits
	while (p < e) {
    e922:	bcs.n	e940 <dtostrf+0x1d0>
		*p++ = *s++;
    e924:	ldrb.w	r0, [r8], #1
		if (p == e) break;
    e928:	cmp	r7, r1
			*p++ = '0';
		}
	}
	// print digits
	while (p < e) {
		*p++ = *s++;
    e92a:	strb	r0, [r3, #0]
		if (p == e) break;
    e92c:	beq.n	e942 <dtostrf+0x1d2>
		if (--decpt == 0) *p++ = '.';
    e92e:	subs	r2, #1
    e930:	str	r2, [sp, #4]
    e932:	cmp	r2, #0
    e934:	beq.n	e916 <dtostrf+0x1a6>
    e936:	mov	r3, r7
			decpt++;
			*p++ = '0';
		}
	}
	// print digits
	while (p < e) {
    e938:	cmp	r3, r1
		*p++ = *s++;
    e93a:	add.w	r7, r3, #1
			decpt++;
			*p++ = '0';
		}
	}
	// print digits
	while (p < e) {
    e93e:	bcc.n	e924 <dtostrf+0x1b4>
    e940:	mov	r1, r3
		*p++ = *s++;
		if (p == e) break;
		if (--decpt == 0) *p++ = '.';
	}
	if (width < 0) {
    e942:	cmp	r5, #0
    e944:	blt.n	ea2a <dtostrf+0x2ba>
		pad = (reqd + width) * -1;
		while (pad-- > 0) *p++ = ' ';
	}
	*p = 0;
    e946:	movs	r3, #0

	//char format[20];
	//sprintf(format, "%%%d.%df", width, precision);
	//sprintf(buf, format, val);
	return buf;
    e948:	mov	r0, r4
	}
	if (width < 0) {
		pad = (reqd + width) * -1;
		while (pad-- > 0) *p++ = ' ';
	}
	*p = 0;
    e94a:	strb	r3, [r1, #0]

	//char format[20];
	//sprintf(format, "%%%d.%df", width, precision);
	//sprintf(buf, format, val);
	return buf;
}
    e94c:	add	sp, #16
    e94e:	vpop	{d8}
    e952:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	}

	s = fcvtf(val, precision, &decpt, &sign);

	// if only 1 digit in output
	if (precision == 0 && decpt == 0) {
    e956:	cmp.w	r9, #0
    e95a:	bne.w	e848 <dtostrf+0xd8>
		// round and move decimal point
		s = (*s < '5') ? "0" : "1";
		decpt++;
    e95e:	movs	r3, #1
	s = fcvtf(val, precision, &decpt, &sign);

	// if only 1 digit in output
	if (precision == 0 && decpt == 0) {
		// round and move decimal point
		s = (*s < '5') ? "0" : "1";
    e960:	ldrb.w	r8, [r0]
    e964:	ldr	r1, [pc, #336]	; (eab8 <dtostrf+0x348>)
    e966:	ldr	r2, [pc, #340]	; (eabc <dtostrf+0x34c>)
		decpt++;
    e968:	mov	r9, r3
    e96a:	str	r3, [sp, #4]
    e96c:	mov.w	r3, #4294967295
	s = fcvtf(val, precision, &decpt, &sign);

	// if only 1 digit in output
	if (precision == 0 && decpt == 0) {
		// round and move decimal point
		s = (*s < '5') ? "0" : "1";
    e970:	cmp.w	r8, #52	; 0x34
    e974:	ite	hi
    e976:	movhi	r8, r1
    e978:	movls	r8, r2
    e97a:	b.n	e84c <dtostrf+0xdc>
	// add 1 for sign if negative
	if (sign) reqd++;

	p = buf;
	e = p + reqd;
	pad = width - reqd;
    e97c:	subs	r0, r5, r6

	// add 1 for sign if negative
	if (sign) reqd++;

	p = buf;
	e = p + reqd;
    e97e:	adds	r1, r4, r6
	pad = width - reqd;
	if (pad > 0) {
    e980:	cmp	r0, #0
    e982:	ble.w	eaac <dtostrf+0x33c>
		e += pad;
    e986:	add	r1, r0
		decpt++;
	}

	// if all zeros, limit to precision
	if (-decpt  > (int)precision) {
		s = "0";
    e988:	mov	r2, r4
	p = buf;
	e = p + reqd;
	pad = width - reqd;
	if (pad > 0) {
		e += pad;
		while (pad-- > 0) *p++ = ' ';
    e98a:	subs	r0, #1
    e98c:	mov.w	ip, #32
    e990:	strb.w	ip, [r2], #1
    e994:	rsb	r3, r2, #1
    e998:	add	r3, r0
    e99a:	add	r3, r4
    e99c:	cmp	r3, #0
    e99e:	bgt.n	e990 <dtostrf+0x220>
    e9a0:	bic.w	r3, r0, r0, asr #31
    e9a4:	adds	r3, #1
    e9a6:	add	r3, r4
	}
	if (sign) *p++ = '-';
    e9a8:	cmp.w	lr, #0
    e9ac:	beq.n	e8d0 <dtostrf+0x160>
	p = buf;
	e = p + reqd;
	pad = width - reqd;
	if (pad > 0) {
		e += pad;
		while (pad-- > 0) *p++ = ' ';
    e9ae:	mov	r2, r3
    e9b0:	b.n	e8ca <dtostrf+0x15a>
	}
	if (sign) *p++ = '-';
	if (decpt == 0 && precision > 0) {
    e9b2:	cmp	r7, #0
    e9b4:	beq.n	e8fa <dtostrf+0x18a>
		*p++ = '0';
    e9b6:	mov	r2, r3
    e9b8:	movs	r7, #48	; 0x30
		*p++ = '.';
    e9ba:	movs	r0, #46	; 0x2e
		e += pad;
		while (pad-- > 0) *p++ = ' ';
	}
	if (sign) *p++ = '-';
	if (decpt == 0 && precision > 0) {
		*p++ = '0';
    e9bc:	strb.w	r7, [r2], #2
		*p++ = '.';
    e9c0:	strb	r0, [r3, #1]
    e9c2:	mov	r3, r2
    e9c4:	b.n	e8fa <dtostrf+0x18a>

	// add 1 for decimal point
	if (reqd > decpt) reqd++;

	// add 1 for zero in front of decimal point
	if (decpt == 0) reqd++;
    e9c6:	adds	r6, #1
    e9c8:	b.n	e8b4 <dtostrf+0x144>
	}

	// if all zeros, limit to precision
	if (-decpt  > (int)precision) {
		s = "0";
		decpt = -precision;
    e9ca:	movs	r6, #1
    e9cc:	rsb	r9, r7, #0
		decpt++;
	}

	// if all zeros, limit to precision
	if (-decpt  > (int)precision) {
		s = "0";
    e9d0:	ldr.w	r8, [pc, #232]	; eabc <dtostrf+0x34c>
		decpt = -precision;
    e9d4:	mov	r0, r6
    e9d6:	str.w	r9, [sp, #4]
    e9da:	b.n	e85a <dtostrf+0xea>
	const char *s, *e;
	char *p;

	int awidth = abs(width);
	if (isnanf(val)) {
		int ndigs = (val<0) ? 4 : 3;
    e9dc:	vcmpe.f32	s0, #0.0
    e9e0:	vmrs	APSR_nzcv, fpscr
    e9e4:	ite	mi
    e9e6:	movmi	r2, #4
    e9e8:	movpl	r2, #3
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
    e9ea:	cmp	r2, r3
    e9ec:	bge.n	ea66 <dtostrf+0x2f6>
		if (width<0) {
    e9ee:	cmp	r0, #0
	char *p;

	int awidth = abs(width);
	if (isnanf(val)) {
		int ndigs = (val<0) ? 4 : 3;
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
    e9f0:	sub.w	r3, r3, r2
		if (width<0) {
    e9f4:	blt.n	ea78 <dtostrf+0x308>
			while (awidth) {
				*buf++ = ' ';
				awidth--;
			}
		}
		if (copysignf(1.0f, val)<0) *buf++ = '-';
    e9f6:	vmov	r2, s16
    e9fa:	cmp	r2, #0
    e9fc:	blt.n	ea6e <dtostrf+0x2fe>
		if (DTOA_UPPER) {
			*buf++ = 'N';  *buf++ = 'A';  *buf++ = 'N';
    e9fe:	movs	r1, #78	; 0x4e
    ea00:	movs	r0, #65	; 0x41
    ea02:	adds	r2, r4, #3
    ea04:	strb	r1, [r4, #0]
    ea06:	strb	r1, [r4, #2]
    ea08:	strb	r0, [r4, #1]
		} else {
			*buf++ = 'n';  *buf++ = 'a';  *buf++ = 'n';
		}
		while (awidth) {
    ea0a:	cmp	r3, #0
    ea0c:	beq.n	eaa8 <dtostrf+0x338>
    ea0e:	add	r3, r2
			*buf++ = ' ';
    ea10:	movs	r1, #32
    ea12:	strb.w	r1, [r2], #1
		if (DTOA_UPPER) {
			*buf++ = 'N';  *buf++ = 'A';  *buf++ = 'N';
		} else {
			*buf++ = 'n';  *buf++ = 'a';  *buf++ = 'n';
		}
		while (awidth) {
    ea16:	cmp	r2, r3
    ea18:	bne.n	ea12 <dtostrf+0x2a2>
			*buf++ = ' ';
			awidth--;
		}
		*buf = 0;
    ea1a:	movs	r2, #0
		return buf;
    ea1c:	mov	r0, r3
		}
		while (awidth) {
			*buf++ = ' ';
			awidth--;
		}
		*buf = 0;
    ea1e:	strb	r2, [r3, #0]

	//char format[20];
	//sprintf(format, "%%%d.%df", width, precision);
	//sprintf(buf, format, val);
	return buf;
}
    ea20:	add	sp, #16
    ea22:	vpop	{d8}
    ea26:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		*p++ = *s++;
		if (p == e) break;
		if (--decpt == 0) *p++ = '.';
	}
	if (width < 0) {
		pad = (reqd + width) * -1;
    ea2a:	adds	r0, r5, r6
		while (pad-- > 0) *p++ = ' ';
    ea2c:	negs	r3, r0
    ea2e:	mvns	r0, r0
    ea30:	cmp	r3, #0
    ea32:	ble.n	e946 <dtostrf+0x1d6>
    ea34:	mov	r2, r1
    ea36:	movs	r5, #32
    ea38:	strb.w	r5, [r2], #1
    ea3c:	rsb	r3, r2, #1
    ea40:	add	r3, r0
    ea42:	add	r3, r1
    ea44:	cmp	r3, #0
    ea46:	bgt.n	ea38 <dtostrf+0x2c8>
    ea48:	bic.w	r3, r0, r0, asr #31
    ea4c:	adds	r3, #1
    ea4e:	add	r1, r3
    ea50:	b.n	e946 <dtostrf+0x1d6>
				awidth--;
			}
		}
		if (val<0) *buf++ = '-';
		if (DTOA_UPPER) {
			*buf++ = 'I';  *buf++ = 'N';  *buf++ = 'F';
    ea52:	movs	r4, #73	; 0x49
    ea54:	movs	r0, #78	; 0x4e
    ea56:	movs	r1, #70	; 0x46
    ea58:	adds	r2, r3, #3
    ea5a:	strb	r4, [r3, #0]
    ea5c:	strb	r0, [r3, #1]
    ea5e:	strb	r1, [r3, #2]
    ea60:	b.n	e7ee <dtostrf+0x7e>
    ea62:	mov	r3, r4
    ea64:	b.n	e826 <dtostrf+0xb6>

	int awidth = abs(width);
	if (isnanf(val)) {
		int ndigs = (val<0) ? 4 : 3;
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
		if (width<0) {
    ea66:	cmp	r0, #0
    ea68:	blt.n	ea9c <dtostrf+0x32c>
	char *p;

	int awidth = abs(width);
	if (isnanf(val)) {
		int ndigs = (val<0) ? 4 : 3;
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
    ea6a:	movs	r3, #0
    ea6c:	b.n	e9f6 <dtostrf+0x286>
    ea6e:	mov	r2, r4
			while (awidth) {
				*buf++ = ' ';
				awidth--;
			}
		}
		if (copysignf(1.0f, val)<0) *buf++ = '-';
    ea70:	movs	r1, #45	; 0x2d
    ea72:	adds	r4, r2, #1
    ea74:	strb	r1, [r2, #0]
    ea76:	b.n	e9fe <dtostrf+0x28e>
	int awidth = abs(width);
	if (isnanf(val)) {
		int ndigs = (val<0) ? 4 : 3;
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
		if (width<0) {
			while (awidth) {
    ea78:	cbz	r3, ea9c <dtostrf+0x32c>
    ea7a:	adds	r2, r4, r3
				*buf++ = ' ';
    ea7c:	movs	r3, #32
    ea7e:	strb.w	r3, [r4], #1
	int awidth = abs(width);
	if (isnanf(val)) {
		int ndigs = (val<0) ? 4 : 3;
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
		if (width<0) {
			while (awidth) {
    ea82:	cmp	r4, r2
    ea84:	bne.n	ea7e <dtostrf+0x30e>
				*buf++ = ' ';
				awidth--;
			}
		}
		if (copysignf(1.0f, val)<0) *buf++ = '-';
    ea86:	vmov	r3, s16
    ea8a:	cmp	r3, #0
    ea8c:	blt.n	eaa4 <dtostrf+0x334>
		if (DTOA_UPPER) {
			*buf++ = 'N';  *buf++ = 'A';  *buf++ = 'N';
    ea8e:	movs	r1, #78	; 0x4e
    ea90:	movs	r0, #65	; 0x41
    ea92:	adds	r3, r2, #3
    ea94:	strb	r1, [r2, #0]
    ea96:	strb	r1, [r2, #2]
    ea98:	strb	r0, [r2, #1]
    ea9a:	b.n	ea1a <dtostrf+0x2aa>

	int awidth = abs(width);
	if (isnanf(val)) {
		int ndigs = (val<0) ? 4 : 3;
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
		if (width<0) {
    ea9c:	mov	r2, r4
    ea9e:	b.n	ea86 <dtostrf+0x316>
		return buf;
	}
	if (isinff(val)) {
		int ndigs = (val<0) ? 4 : 3;
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
		if (width<0) {
    eaa0:	mov	r3, r4
    eaa2:	b.n	e818 <dtostrf+0xa8>
			while (awidth) {
				*buf++ = ' ';
				awidth--;
			}
		}
		if (copysignf(1.0f, val)<0) *buf++ = '-';
    eaa4:	movs	r3, #0
    eaa6:	b.n	ea70 <dtostrf+0x300>
		if (DTOA_UPPER) {
			*buf++ = 'N';  *buf++ = 'A';  *buf++ = 'N';
    eaa8:	mov	r3, r2
    eaaa:	b.n	ea1a <dtostrf+0x2aa>
	}

	// add 1 for sign if negative
	if (sign) reqd++;

	p = buf;
    eaac:	mov	r3, r4
    eaae:	b.n	e8d0 <dtostrf+0x160>
				awidth--;
			}
		}
		if (val<0) *buf++ = '-';
		if (DTOA_UPPER) {
			*buf++ = 'I';  *buf++ = 'N';  *buf++ = 'F';
    eab0:	mov	r2, r3
    eab2:	b.n	e7ee <dtostrf+0x7e>
    eab4:	.word	0x7f7fffff
    eab8:	.word	0x20000504
    eabc:	.word	0x20000500

0000eac0 <smalloc_verify_pool>:

struct smalloc_pool smalloc_curr_pool;

int smalloc_verify_pool(struct smalloc_pool *spool)
{
	if (!spool->pool || !spool->pool_size) return 0;
    eac0:	ldr	r3, [r0, #0]
    eac2:	cbz	r3, eae0 <smalloc_verify_pool+0x20>
    eac4:	ldr	r0, [r0, #4]
    eac6:	cbz	r0, eae2 <smalloc_verify_pool+0x22>
    eac8:	ldr	r3, [pc, #24]	; (eae4 <smalloc_verify_pool+0x24>)
    eaca:	umull	r2, r3, r3, r0
    eace:	lsrs	r3, r3, #3
    ead0:	add.w	r3, r3, r3, lsl #1
    ead4:	cmp.w	r0, r3, lsl #2
    ead8:	ite	eq
    eada:	moveq	r0, #1
    eadc:	movne	r0, #0
    eade:	bx	lr
    eae0:	mov	r0, r3
	if (spool->pool_size % HEADER_SZ) return 0;
	return 1;
}
    eae2:	bx	lr
    eae4:	.word	0xaaaaaaab

0000eae8 <sm_align_pool>:

int sm_align_pool(struct smalloc_pool *spool)
{
    eae8:	push	{r3, lr}

struct smalloc_pool smalloc_curr_pool;

int smalloc_verify_pool(struct smalloc_pool *spool)
{
	if (!spool->pool || !spool->pool_size) return 0;
    eaea:	ldr	r3, [r0, #0]
{
	size_t x;

	if (smalloc_verify_pool(spool)) return 1;

	x = spool->pool_size % HEADER_SZ;
    eaec:	ldr	r2, [r0, #4]

struct smalloc_pool smalloc_curr_pool;

int smalloc_verify_pool(struct smalloc_pool *spool)
{
	if (!spool->pool || !spool->pool_size) return 0;
    eaee:	cbz	r3, eb20 <sm_align_pool+0x38>
    eaf0:	cbz	r2, eb12 <sm_align_pool+0x2a>
	if (spool->pool_size % HEADER_SZ) return 0;
    eaf2:	ldr	r3, [pc, #64]	; (eb34 <sm_align_pool+0x4c>)
    eaf4:	umull	r1, r3, r3, r2
    eaf8:	lsrs	r3, r3, #3
    eafa:	add.w	r3, r3, r3, lsl #1
    eafe:	subs.w	r3, r2, r3, lsl #2
    eb02:	beq.n	eb0c <sm_align_pool+0x24>
	size_t x;

	if (smalloc_verify_pool(spool)) return 1;

	x = spool->pool_size % HEADER_SZ;
	if (x) spool->pool_size -= x;
    eb04:	subs	r2, r2, r3
    eb06:	str	r2, [r0, #4]
	if (spool->pool_size <= MIN_POOL_SZ) {
    eb08:	cmp	r2, #240	; 0xf0
    eb0a:	bls.n	eb12 <sm_align_pool+0x2a>

int sm_align_pool(struct smalloc_pool *spool)
{
	size_t x;

	if (smalloc_verify_pool(spool)) return 1;
    eb0c:	movs	r3, #1
		errno = ENOSPC;
		return 0;
	}

	return 1;
}
    eb0e:	mov	r0, r3
    eb10:	pop	{r3, pc}
	if (smalloc_verify_pool(spool)) return 1;

	x = spool->pool_size % HEADER_SZ;
	if (x) spool->pool_size -= x;
	if (spool->pool_size <= MIN_POOL_SZ) {
		errno = ENOSPC;
    eb12:	bl	10594 <__errno>
    eb16:	movs	r2, #28
    eb18:	movs	r3, #0
    eb1a:	str	r2, [r0, #0]
		return 0;
	}

	return 1;
}
    eb1c:	mov	r0, r3
    eb1e:	pop	{r3, pc}
{
	size_t x;

	if (smalloc_verify_pool(spool)) return 1;

	x = spool->pool_size % HEADER_SZ;
    eb20:	ldr	r3, [pc, #16]	; (eb34 <sm_align_pool+0x4c>)
    eb22:	umull	r1, r3, r3, r2
    eb26:	lsrs	r3, r3, #3
    eb28:	add.w	r3, r3, r3, lsl #1
	if (x) spool->pool_size -= x;
    eb2c:	subs.w	r3, r2, r3, lsl #2
    eb30:	bne.n	eb04 <sm_align_pool+0x1c>
    eb32:	b.n	eb08 <sm_align_pool+0x20>
    eb34:	.word	0xaaaaaaab

0000eb38 <sm_set_pool>:

	return 1;
}

int sm_set_pool(struct smalloc_pool *spool, void *new_pool, size_t new_pool_size, int do_zero, smalloc_oom_handler oom_handler)
{
    eb38:	push	{r4, r5, r6, lr}
	if (!spool) {
    eb3a:	mov	r4, r0
    eb3c:	cmp	r0, #0
    eb3e:	beq.n	ebb6 <sm_set_pool+0x7e>
		errno = EINVAL;
		return 0;
	}

	if (!new_pool || !new_pool_size) {
    eb40:	cbz	r1, eb4a <sm_set_pool+0x12>
    eb42:	clz	r5, r2
    eb46:	lsrs	r5, r5, #5
    eb48:	cbz	r5, eb8a <sm_set_pool+0x52>

struct smalloc_pool smalloc_curr_pool;

int smalloc_verify_pool(struct smalloc_pool *spool)
{
	if (!spool->pool || !spool->pool_size) return 0;
    eb4a:	ldr	r0, [r4, #0]
    eb4c:	cbz	r0, eb52 <sm_set_pool+0x1a>
    eb4e:	ldr	r2, [r4, #4]
    eb50:	cbnz	r2, eb60 <sm_set_pool+0x28>
			if (spool->do_zero) memset(spool->pool, 0, spool->pool_size);
			memset(spool, 0, sizeof(struct smalloc_pool));
			return 1;
		}

		errno = EINVAL;
    eb52:	bl	10594 <__errno>
    eb56:	movs	r3, #22
		return 0;
    eb58:	movs	r2, #0
			if (spool->do_zero) memset(spool->pool, 0, spool->pool_size);
			memset(spool, 0, sizeof(struct smalloc_pool));
			return 1;
		}

		errno = EINVAL;
    eb5a:	str	r3, [r0, #0]
		spool->do_zero = do_zero;
		memset(spool->pool, 0, spool->pool_size);
	}

	return 1;
}
    eb5c:	mov	r0, r2
    eb5e:	pop	{r4, r5, r6, pc}
struct smalloc_pool smalloc_curr_pool;

int smalloc_verify_pool(struct smalloc_pool *spool)
{
	if (!spool->pool || !spool->pool_size) return 0;
	if (spool->pool_size % HEADER_SZ) return 0;
    eb60:	ldr	r1, [pc, #96]	; (ebc4 <sm_set_pool+0x8c>)
    eb62:	umull	r3, r1, r1, r2
    eb66:	lsrs	r1, r1, #3
    eb68:	add.w	r1, r1, r1, lsl #1
    eb6c:	subs.w	r1, r2, r1, lsl #2
    eb70:	bne.n	eb52 <sm_set_pool+0x1a>
		return 0;
	}

	if (!new_pool || !new_pool_size) {
		if (smalloc_verify_pool(spool)) {
			if (spool->do_zero) memset(spool->pool, 0, spool->pool_size);
    eb72:	ldr	r3, [r4, #8]
    eb74:	cbz	r3, eb7a <sm_set_pool+0x42>
    eb76:	bl	10d7c <memset>
			memset(spool, 0, sizeof(struct smalloc_pool));
    eb7a:	movs	r3, #0
			return 1;
    eb7c:	movs	r2, #1
	}

	if (!new_pool || !new_pool_size) {
		if (smalloc_verify_pool(spool)) {
			if (spool->do_zero) memset(spool->pool, 0, spool->pool_size);
			memset(spool, 0, sizeof(struct smalloc_pool));
    eb7e:	str	r3, [r4, #0]
		spool->do_zero = do_zero;
		memset(spool->pool, 0, spool->pool_size);
	}

	return 1;
}
    eb80:	mov	r0, r2
	}

	if (!new_pool || !new_pool_size) {
		if (smalloc_verify_pool(spool)) {
			if (spool->do_zero) memset(spool->pool, 0, spool->pool_size);
			memset(spool, 0, sizeof(struct smalloc_pool));
    eb82:	str	r3, [r4, #4]
    eb84:	str	r3, [r4, #8]
    eb86:	str	r3, [r4, #12]
		spool->do_zero = do_zero;
		memset(spool->pool, 0, spool->pool_size);
	}

	return 1;
}
    eb88:	pop	{r4, r5, r6, pc}
    eb8a:	mov	r6, r3
		return 0;
	}

	spool->pool = new_pool;
	spool->pool_size = new_pool_size;
	spool->oomfn = oom_handler;
    eb8c:	ldr	r3, [sp, #16]
		errno = EINVAL;
		return 0;
	}

	spool->pool = new_pool;
	spool->pool_size = new_pool_size;
    eb8e:	stmia.w	r0, {r1, r2}
	spool->oomfn = oom_handler;
    eb92:	str	r3, [r0, #12]
	if (!sm_align_pool(spool)) return 0;
    eb94:	bl	eae8 <sm_align_pool>
    eb98:	mov	r2, r0
    eb9a:	cmp	r0, #0
    eb9c:	beq.n	eb5c <sm_set_pool+0x24>

	if (do_zero) {
    eb9e:	cbnz	r6, eba6 <sm_set_pool+0x6e>
		spool->do_zero = do_zero;
		memset(spool->pool, 0, spool->pool_size);
	}

	return 1;
    eba0:	movs	r2, #1
}
    eba2:	mov	r0, r2
    eba4:	pop	{r4, r5, r6, pc}
	spool->oomfn = oom_handler;
	if (!sm_align_pool(spool)) return 0;

	if (do_zero) {
		spool->do_zero = do_zero;
		memset(spool->pool, 0, spool->pool_size);
    eba6:	ldmia.w	r4, {r0, r2}
	spool->pool_size = new_pool_size;
	spool->oomfn = oom_handler;
	if (!sm_align_pool(spool)) return 0;

	if (do_zero) {
		spool->do_zero = do_zero;
    ebaa:	str	r6, [r4, #8]
		memset(spool->pool, 0, spool->pool_size);
    ebac:	mov	r1, r5
    ebae:	bl	10d7c <memset>
	}

	return 1;
    ebb2:	movs	r2, #1
    ebb4:	b.n	eb5c <sm_set_pool+0x24>
}

int sm_set_pool(struct smalloc_pool *spool, void *new_pool, size_t new_pool_size, int do_zero, smalloc_oom_handler oom_handler)
{
	if (!spool) {
		errno = EINVAL;
    ebb6:	bl	10594 <__errno>
    ebba:	movs	r3, #22
		return 0;
    ebbc:	mov	r2, r4
}

int sm_set_pool(struct smalloc_pool *spool, void *new_pool, size_t new_pool_size, int do_zero, smalloc_oom_handler oom_handler)
{
	if (!spool) {
		errno = EINVAL;
    ebbe:	str	r3, [r0, #0]
		return 0;
    ebc0:	b.n	eb5c <sm_set_pool+0x24>
    ebc2:	nop
    ebc4:	.word	0xaaaaaaab

0000ebc8 <Panic_Temp_isr>:

static uint32_t s_hotTemp, s_hotCount, s_roomC_hotC;
static float s_hot_ROOM;

void Panic_Temp_isr(void) {
  __disable_irq();
    ebc8:	cpsid	i
  IOMUXC_GPR_GPR16 = 0x00000007;
  SNVS_LPCR |= SNVS_LPCR_TOP; //Switch off now
    ebca:	ldr	r2, [pc, #24]	; (ebe4 <Panic_Temp_isr+0x1c>)
static uint32_t s_hotTemp, s_hotCount, s_roomC_hotC;
static float s_hot_ROOM;

void Panic_Temp_isr(void) {
  __disable_irq();
  IOMUXC_GPR_GPR16 = 0x00000007;
    ebcc:	movs	r1, #7
    ebce:	ldr	r3, [pc, #24]	; (ebe8 <Panic_Temp_isr+0x20>)
    ebd0:	str	r1, [r3, #64]	; 0x40
  SNVS_LPCR |= SNVS_LPCR_TOP; //Switch off now
    ebd2:	ldr	r3, [r2, #56]	; 0x38
    ebd4:	orr.w	r3, r3, #64	; 0x40
    ebd8:	str	r3, [r2, #56]	; 0x38
  asm volatile ("dsb":::"memory");
    ebda:	dsb	sy
  while (1) asm ("wfi");
    ebde:	wfi
    ebe0:	b.n	ebde <Panic_Temp_isr+0x16>
    ebe2:	nop
    ebe4:	.word	0x400d4000
    ebe8:	.word	0x400ac000

0000ebec <digitalWrite.part.0>:
{
	const struct digital_pin_bitband_and_config_table_struct *p;
	uint32_t pinmode, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
    ebec:	lsls	r0, r0, #4
    ebee:	ldr	r3, [pc, #60]	; (ec2c <digitalWrite.part.0+0x40>)
    ebf0:	adds	r2, r3, r0
	pinmode = *(p->reg + 1);
    ebf2:	ldr	r3, [r3, r0]
	{&CORE_PIN53_PORTREG, &CORE_PIN53_CONFIG, &CORE_PIN53_PADCONFIG, CORE_PIN53_BITMASK},
	{&CORE_PIN54_PORTREG, &CORE_PIN54_CONFIG, &CORE_PIN54_PADCONFIG, CORE_PIN54_BITMASK},
#endif
};

void digitalWrite(uint8_t pin, uint8_t val)
    ebf4:	push	{r4}
	uint32_t pinmode, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	pinmode = *(p->reg + 1);
	mask = p->mask;
    ebf6:	ldr	r0, [r2, #12]
	const struct digital_pin_bitband_and_config_table_struct *p;
	uint32_t pinmode, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	pinmode = *(p->reg + 1);
    ebf8:	ldr	r4, [r3, #4]
	mask = p->mask;
	if (pinmode & mask) {
    ebfa:	tst	r4, r0
    ebfc:	beq.n	ec0a <digitalWrite.part.0+0x1e>
		// pin is configured for output mode
		if (val) {
    ebfe:	cbz	r1, ec18 <digitalWrite.part.0+0x2c>
			*(p->reg + 0x21) = mask; // set register
    ec00:	str.w	r0, [r3, #132]	; 0x84
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		}
	}
}
    ec04:	ldr.w	r4, [sp], #4
    ec08:	bx	lr
		}
	} else {
		// pin is configured for input mode
		// value controls PULLUP/PULLDOWN resistors
		if (val) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    ec0a:	ldr	r3, [r2, #8]
			*(p->reg + 0x22) = mask; // clear register
		}
	} else {
		// pin is configured for input mode
		// value controls PULLUP/PULLDOWN resistors
		if (val) {
    ec0c:	cbnz	r1, ec22 <digitalWrite.part.0+0x36>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    ec0e:	ldr	r2, [pc, #32]	; (ec30 <digitalWrite.part.0+0x44>)
		}
	}
}
    ec10:	ldr.w	r4, [sp], #4
		// pin is configured for input mode
		// value controls PULLUP/PULLDOWN resistors
		if (val) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    ec14:	str	r2, [r3, #0]
		}
	}
}
    ec16:	bx	lr
	if (pinmode & mask) {
		// pin is configured for output mode
		if (val) {
			*(p->reg + 0x21) = mask; // set register
		} else {
			*(p->reg + 0x22) = mask; // clear register
    ec18:	str.w	r0, [r3, #136]	; 0x88
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		}
	}
}
    ec1c:	ldr.w	r4, [sp], #4
    ec20:	bx	lr
		}
	} else {
		// pin is configured for input mode
		// value controls PULLUP/PULLDOWN resistors
		if (val) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    ec22:	ldr	r2, [pc, #16]	; (ec34 <digitalWrite.part.0+0x48>)
		} else {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		}
	}
}
    ec24:	ldr.w	r4, [sp], #4
		}
	} else {
		// pin is configured for input mode
		// value controls PULLUP/PULLDOWN resistors
		if (val) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    ec28:	str	r2, [r3, #0]
		} else {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		}
	}
}
    ec2a:	bx	lr
    ec2c:	.word	0x20000508
    ec30:	.word	0x00013038
    ec34:	.word	0x0001f038

0000ec38 <digitalWrite>:
void digitalWrite(uint8_t pin, uint8_t val)
{
	const struct digital_pin_bitband_and_config_table_struct *p;
	uint32_t pinmode, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
    ec38:	cmp	r0, #54	; 0x36
    ec3a:	bhi.n	ec40 <digitalWrite+0x8>
    ec3c:	b.w	ebec <digitalWrite.part.0>
    ec40:	bx	lr
    ec42:	nop

0000ec44 <pinMode>:

void pinMode(uint8_t pin, uint8_t mode)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
    ec44:	cmp	r0, #54	; 0x36
    ec46:	bhi.n	ec82 <pinMode+0x3e>
	p = digital_pin_to_info_PGM + pin;
    ec48:	lsls	r0, r0, #4
    ec4a:	ldr	r2, [pc, #104]	; (ecb4 <pinMode+0x70>)
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    ec4c:	cmp	r1, #1
void pinMode(uint8_t pin, uint8_t mode)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
    ec4e:	add.w	r3, r2, r0
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    ec52:	ldr	r0, [r2, r0]
	p = digital_pin_to_info_PGM + pin;
	return (*(p->reg + 2) & p->mask) ? 1 : 0;
}

void pinMode(uint8_t pin, uint8_t mode)
{
    ec54:	push	{r4}
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    ec56:	beq.n	ec84 <pinMode+0x40>
    ec58:	cmp	r1, #4
    ec5a:	beq.n	ec84 <pinMode+0x40>
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    ec5c:	ldr	r4, [r3, #12]
    ec5e:	ldr	r2, [r0, #4]
    ec60:	bic.w	r2, r2, r4
    ec64:	str	r2, [r0, #4]
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
    ec66:	ldr	r2, [r3, #8]
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
		if (mode == INPUT) {
    ec68:	cbz	r1, eca6 <pinMode+0x62>
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else if (mode == INPUT_PULLUP) {
    ec6a:	cmp	r1, #2
    ec6c:	beq.n	ecac <pinMode+0x68>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else if (mode == INPUT_PULLDOWN) {
    ec6e:	cmp	r1, #3
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
		}
	}
	*(p->mux) = 5 | 0x10;
    ec70:	ldr	r3, [r3, #4]
}
    ec72:	ldr.w	r4, [sp], #4
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else if (mode == INPUT_PULLUP) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else if (mode == INPUT_PULLDOWN) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    ec76:	ite	eq
    ec78:	ldreq	r1, [pc, #60]	; (ecb8 <pinMode+0x74>)
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
    ec7a:	ldrne	r1, [pc, #64]	; (ecbc <pinMode+0x78>)
    ec7c:	str	r1, [r2, #0]
		}
	}
	*(p->mux) = 5 | 0x10;
    ec7e:	movs	r2, #21
    ec80:	str	r2, [r3, #0]
}
    ec82:	bx	lr
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
		*(p->reg + 1) |= p->mask; // TODO: atomic
    ec84:	ldr	r2, [r3, #12]
		if (mode == OUTPUT) {
    ec86:	cmp	r1, #1
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
		*(p->reg + 1) |= p->mask; // TODO: atomic
    ec88:	ldr	r4, [r0, #4]
    ec8a:	orr.w	r2, r2, r4
    ec8e:	str	r2, [r0, #4]
		if (mode == OUTPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
    ec90:	ldr	r2, [r3, #8]

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
		*(p->reg + 1) |= p->mask; // TODO: atomic
		if (mode == OUTPUT) {
    ec92:	beq.n	eca6 <pinMode+0x62>
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
    ec94:	movw	r1, #2104	; 0x838
    ec98:	str	r1, [r2, #0]
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
		}
	}
	*(p->mux) = 5 | 0x10;
    ec9a:	ldr	r3, [r3, #4]
    ec9c:	movs	r2, #21
}
    ec9e:	ldr.w	r4, [sp], #4
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
		}
	}
	*(p->mux) = 5 | 0x10;
    eca2:	str	r2, [r3, #0]
}
    eca4:	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
    eca6:	movs	r1, #56	; 0x38
    eca8:	str	r1, [r2, #0]
    ecaa:	b.n	ec9a <pinMode+0x56>
		} else if (mode == INPUT_PULLUP) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    ecac:	ldr	r1, [pc, #16]	; (ecc0 <pinMode+0x7c>)
    ecae:	str	r1, [r2, #0]
    ecb0:	b.n	ec9a <pinMode+0x56>
    ecb2:	nop
    ecb4:	.word	0x20000508
    ecb8:	.word	0x00013038
    ecbc:	.word	0x00010038
    ecc0:	.word	0x0001f038

0000ecc4 <pwm_init>:
}

void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    ecc4:	ldr	r0, [pc, #656]	; (ef58 <pwm_init+0x294>)
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    ecc6:	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    ecca:	ldr	r3, [pc, #656]	; (ef5c <pwm_init+0x298>)
}

void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    eccc:	ldr	r2, [r0, #120]	; 0x78
    ecce:	orr.w	r2, r2, #16711680	; 0xff0000
			TMR_CTRL_LENGTH | TMR_CTRL_OUTMODE(6);
	}
}

void pwm_init(void)
{
    ecd2:	push	{r4, r5, r6, r7, lr}
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    ecd4:	str	r2, [r0, #120]	; 0x78
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
    ecd6:	movs	r5, #0
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    ecd8:	ldr.w	r2, [r0, #128]	; 0x80

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    ecdc:	mov.w	r6, #61440	; 0xf000
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    ece0:	ldr	r4, [pc, #636]	; (ef60 <pwm_init+0x29c>)
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    ece2:	mov.w	lr, #57344	; 0xe000

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    ece6:	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    ece8:	mov.w	r7, #1024	; 0x400
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    ecec:	orrs	r4, r2
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    ecee:	mov	r2, r5
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    ecf0:	str.w	r4, [r0, #128]	; 0x80

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    ecf4:	strh.w	r6, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    ecf8:	movw	r6, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    ecfc:	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
    ed00:	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    ed04:	ldrh.w	r0, [r3, #392]	; 0x188
    ed08:	uxth	r0, r0
    ed0a:	orr.w	r0, r0, #240	; 0xf0
    ed0e:	strh.w	r0, [r3, #392]	; 0x188
    ed12:	add.w	r0, r1, r1, lsl #1
    ed16:	ldr	r3, [pc, #580]	; (ef5c <pwm_init+0x298>)
	for (i=0; i < 4; i++) {
    ed18:	adds	r1, #1
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    ed1a:	movs	r5, #0
    ed1c:	lsls	r0, r0, #5
    ed1e:	mov	r4, r3

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    ed20:	cmp	r1, #4
    ed22:	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    ed24:	strh.w	lr, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    ed28:	strh	r7, [r3, #6]
		p->SM[i].OCTRL = 0;
    ed2a:	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    ed2c:	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    ed2e:	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    ed30:	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    ed32:	strh	r6, [r3, #14]
		p->SM[i].VAL2 = 0;
    ed34:	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    ed36:	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    ed38:	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    ed3a:	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    ed3c:	bne.n	ed12 <pwm_init+0x4e>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    ed3e:	ldrh.w	r0, [r4, #392]	; 0x188
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    ed42:	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    ed46:	ldr	r3, [pc, #540]	; (ef64 <pwm_init+0x2a0>)
    ed48:	mov.w	r6, #61440	; 0xf000
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    ed4c:	uxth	r0, r0

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    ed4e:	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    ed50:	mov.w	r7, #57344	; 0xe000
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    ed54:	mov	r2, r5
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    ed56:	orr.w	r0, r0, ip
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    ed5a:	mov.w	lr, #1024	; 0x400
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    ed5e:	strh.w	r0, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    ed62:	ldrh.w	r0, [r4, #392]	; 0x188
    ed66:	uxth	r0, r0
    ed68:	orr.w	r0, r0, #3840	; 0xf00
    ed6c:	strh.w	r0, [r4, #392]	; 0x188

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    ed70:	strh.w	r6, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    ed74:	movw	r6, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    ed78:	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
    ed7c:	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    ed80:	ldrh.w	r0, [r3, #392]	; 0x188
    ed84:	uxth	r0, r0
    ed86:	orr.w	r0, r0, #240	; 0xf0
    ed8a:	strh.w	r0, [r3, #392]	; 0x188
    ed8e:	add.w	r0, r1, r1, lsl #1
    ed92:	ldr	r3, [pc, #464]	; (ef64 <pwm_init+0x2a0>)
	for (i=0; i < 4; i++) {
    ed94:	adds	r1, #1
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    ed96:	movs	r5, #0
    ed98:	lsls	r0, r0, #5
    ed9a:	mov	r4, r3

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    ed9c:	cmp	r1, #4
    ed9e:	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    eda0:	strh	r7, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    eda2:	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
    eda6:	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    eda8:	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    edaa:	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    edac:	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    edae:	strh	r6, [r3, #14]
		p->SM[i].VAL2 = 0;
    edb0:	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    edb2:	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    edb4:	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    edb6:	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    edb8:	bne.n	ed8e <pwm_init+0xca>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    edba:	ldrh.w	r0, [r4, #392]	; 0x188
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    edbe:	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    edc2:	ldr	r3, [pc, #420]	; (ef68 <pwm_init+0x2a4>)
    edc4:	mov.w	r6, #61440	; 0xf000
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    edc8:	uxth	r0, r0

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    edca:	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    edcc:	mov.w	r7, #57344	; 0xe000
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    edd0:	mov	r2, r5
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    edd2:	orr.w	r0, r0, ip
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    edd6:	mov.w	lr, #1024	; 0x400
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    edda:	strh.w	r0, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    edde:	ldrh.w	r0, [r4, #392]	; 0x188
    ede2:	uxth	r0, r0
    ede4:	orr.w	r0, r0, #3840	; 0xf00
    ede8:	strh.w	r0, [r4, #392]	; 0x188

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    edec:	strh.w	r6, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    edf0:	movw	r6, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    edf4:	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
    edf8:	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    edfc:	ldrh.w	r0, [r3, #392]	; 0x188
    ee00:	uxth	r0, r0
    ee02:	orr.w	r0, r0, #240	; 0xf0
    ee06:	strh.w	r0, [r3, #392]	; 0x188
    ee0a:	add.w	r0, r1, r1, lsl #1
    ee0e:	ldr	r3, [pc, #344]	; (ef68 <pwm_init+0x2a4>)
	for (i=0; i < 4; i++) {
    ee10:	adds	r1, #1
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    ee12:	movs	r5, #0
    ee14:	lsls	r0, r0, #5
    ee16:	mov	r4, r3

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    ee18:	cmp	r1, #4
    ee1a:	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    ee1c:	strh	r7, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    ee1e:	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
    ee22:	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    ee24:	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    ee26:	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    ee28:	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    ee2a:	strh	r6, [r3, #14]
		p->SM[i].VAL2 = 0;
    ee2c:	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    ee2e:	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    ee30:	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    ee32:	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    ee34:	bne.n	ee0a <pwm_init+0x146>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    ee36:	ldrh.w	r0, [r4, #392]	; 0x188
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    ee3a:	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    ee3e:	ldr	r3, [pc, #300]	; (ef6c <pwm_init+0x2a8>)
    ee40:	mov.w	r7, #61440	; 0xf000
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    ee44:	uxth	r0, r0

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    ee46:	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    ee48:	mov.w	r6, #57344	; 0xe000
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    ee4c:	mov	r2, r5
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    ee4e:	orr.w	r0, r0, ip
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    ee52:	mov.w	lr, #1024	; 0x400
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    ee56:	strh.w	r0, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    ee5a:	ldrh.w	r0, [r4, #392]	; 0x188
    ee5e:	uxth	r0, r0
    ee60:	orr.w	r0, r0, #3840	; 0xf00
    ee64:	strh.w	r0, [r4, #392]	; 0x188

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    ee68:	strh.w	r7, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    ee6c:	movw	r7, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    ee70:	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
    ee74:	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    ee78:	ldrh.w	r0, [r3, #392]	; 0x188
    ee7c:	uxth	r0, r0
    ee7e:	orr.w	r0, r0, #240	; 0xf0
    ee82:	strh.w	r0, [r3, #392]	; 0x188
    ee86:	add.w	r0, r1, r1, lsl #1
    ee8a:	ldr	r3, [pc, #224]	; (ef6c <pwm_init+0x2a8>)
	for (i=0; i < 4; i++) {
    ee8c:	adds	r1, #1
    ee8e:	lsls	r0, r0, #5
    ee90:	mov	r4, r3
    ee92:	cmp	r1, #4
    ee94:	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    ee96:	strh	r6, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    ee98:	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
    ee9c:	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    ee9e:	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    eea0:	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    eea2:	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    eea4:	strh	r7, [r3, #14]
		p->SM[i].VAL2 = 0;
    eea6:	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    eea8:	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    eeaa:	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    eeac:	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    eeae:	bne.n	ee86 <pwm_init+0x1c2>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    eeb0:	ldrh.w	r3, [r4, #392]	; 0x188
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    eeb4:	movs	r7, #15

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    eeb6:	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    eeb8:	movw	r6, #4097	; 0x1001
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    eebc:	uxth	r3, r3
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    eebe:	movw	lr, #24000	; 0x5dc0
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    eec2:	mov	r1, r2
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
		p->CH[i].CMPLD1 = 0;
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    eec4:	movw	r5, #12326	; 0x3026
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    eec8:	orrs	r3, r7
    eeca:	strh.w	r3, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    eece:	ldrh.w	r3, [r4, #392]	; 0x188
    eed2:	uxth	r3, r3
    eed4:	orr.w	r3, r3, #3840	; 0xf00
    eed8:	strh.w	r3, [r4, #392]	; 0x188
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    eedc:	lsls	r0, r2, #5
    eede:	ldr	r3, [pc, #144]	; (ef70 <pwm_init+0x2ac>)

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    eee0:	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    eee2:	add	r3, r0

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    eee4:	cmp	r2, #4
		p->CH[i].CTRL = 0; // stop timer
    eee6:	strh	r1, [r3, #12]
		p->CH[i].CNTR = 0;
    eee8:	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    eeea:	strh	r7, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    eeec:	strh	r6, [r3, #20]
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    eeee:	strh.w	lr, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    eef2:	strh	r1, [r3, #0]
		p->CH[i].CMPLD1 = 0;
    eef4:	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    eef6:	strh	r5, [r3, #12]

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    eef8:	bne.n	eedc <pwm_init+0x218>
    eefa:	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    eefc:	movs	r7, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    eefe:	movw	r6, #4097	; 0x1001
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    ef02:	movw	r5, #24000	; 0x5dc0
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    ef06:	mov	r1, r2
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
		p->CH[i].CMPLD1 = 0;
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    ef08:	movw	r4, #12326	; 0x3026
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    ef0c:	lsls	r0, r2, #5
    ef0e:	ldr	r3, [pc, #100]	; (ef74 <pwm_init+0x2b0>)

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    ef10:	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    ef12:	add	r3, r0

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    ef14:	cmp	r2, #4
		p->CH[i].CTRL = 0; // stop timer
    ef16:	strh	r1, [r3, #12]
		p->CH[i].CNTR = 0;
    ef18:	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    ef1a:	strh	r7, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    ef1c:	strh	r6, [r3, #20]
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    ef1e:	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    ef20:	strh	r1, [r3, #0]
		p->CH[i].CMPLD1 = 0;
    ef22:	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    ef24:	strh	r4, [r3, #12]

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    ef26:	bne.n	ef0c <pwm_init+0x248>
    ef28:	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    ef2a:	movs	r7, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    ef2c:	movw	r6, #4097	; 0x1001
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    ef30:	movw	r5, #24000	; 0x5dc0
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    ef34:	mov	r1, r2
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
		p->CH[i].CMPLD1 = 0;
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    ef36:	movw	r4, #12326	; 0x3026
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    ef3a:	lsls	r0, r2, #5
    ef3c:	ldr	r3, [pc, #56]	; (ef78 <pwm_init+0x2b4>)

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    ef3e:	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    ef40:	add	r3, r0

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    ef42:	cmp	r2, #4
		p->CH[i].CTRL = 0; // stop timer
    ef44:	strh	r1, [r3, #12]
		p->CH[i].CNTR = 0;
    ef46:	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    ef48:	strh	r7, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    ef4a:	strh	r6, [r3, #20]
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    ef4c:	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    ef4e:	strh	r1, [r3, #0]
		p->CH[i].CMPLD1 = 0;
    ef50:	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    ef52:	strh	r4, [r3, #12]

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    ef54:	bne.n	ef3a <pwm_init+0x276>
	flexpwm_init(&IMXRT_FLEXPWM3);
	flexpwm_init(&IMXRT_FLEXPWM4);
	quadtimer_init(&IMXRT_TMR1);
	quadtimer_init(&IMXRT_TMR2);
	quadtimer_init(&IMXRT_TMR3);
}
    ef56:	pop	{r4, r5, r6, r7, pc}
    ef58:	.word	0x400fc000
    ef5c:	.word	0x403dc000
    ef60:	.word	0xfc030000
    ef64:	.word	0x403e0000
    ef68:	.word	0x403e4000
    ef6c:	.word	0x403e8000
    ef70:	.word	0x401dc000
    ef74:	.word	0x401e0000
    ef78:	.word	0x401e4000

0000ef7c <rx_event>:
static void rx_event(transfer_t *t)
{
	int i = t->callback_param;
	//printf("rx event i=%d\n", i);
	// received a packet with data
	uint32_t head = rx_head;
    ef7c:	ldr	r2, [pc, #40]	; (efa8 <rx_event+0x2c>)
	usb_receive(MTP_RX_ENDPOINT, rx_transfer + i);
	NVIC_ENABLE_IRQ(IRQ_USB1);
}

static void rx_event(transfer_t *t)
{
    ef7e:	push	{r4}
	int i = t->callback_param;
	//printf("rx event i=%d\n", i);
	// received a packet with data
	uint32_t head = rx_head;
    ef80:	ldrb	r3, [r2, #0]
	NVIC_ENABLE_IRQ(IRQ_USB1);
}

static void rx_event(transfer_t *t)
{
	int i = t->callback_param;
    ef82:	ldr	r4, [r0, #28]
	//printf("rx event i=%d\n", i);
	// received a packet with data
	uint32_t head = rx_head;
	if (++head > RX_NUM) head = 0;
    ef84:	adds	r3, #1
    ef86:	cmp	r3, #4
    ef88:	bls.n	ef9a <rx_event+0x1e>
    ef8a:	movs	r1, #0
	rx_list[head] = i;
    ef8c:	ldr	r0, [pc, #28]	; (efac <rx_event+0x30>)
{
	int i = t->callback_param;
	//printf("rx event i=%d\n", i);
	// received a packet with data
	uint32_t head = rx_head;
	if (++head > RX_NUM) head = 0;
    ef8e:	mov	r3, r1
	rx_list[head] = i;
	rx_head = head;
    ef90:	strb	r1, [r2, #0]
	int i = t->callback_param;
	//printf("rx event i=%d\n", i);
	// received a packet with data
	uint32_t head = rx_head;
	if (++head > RX_NUM) head = 0;
	rx_list[head] = i;
    ef92:	strb	r4, [r0, r3]
	rx_head = head;
}
    ef94:	ldr.w	r4, [sp], #4
    ef98:	bx	lr
    ef9a:	uxtb	r1, r3
	int i = t->callback_param;
	//printf("rx event i=%d\n", i);
	// received a packet with data
	uint32_t head = rx_head;
	if (++head > RX_NUM) head = 0;
	rx_list[head] = i;
    ef9c:	ldr	r0, [pc, #12]	; (efac <rx_event+0x30>)
	rx_head = head;
    ef9e:	strb	r1, [r2, #0]
	int i = t->callback_param;
	//printf("rx event i=%d\n", i);
	// received a packet with data
	uint32_t head = rx_head;
	if (++head > RX_NUM) head = 0;
	rx_list[head] = i;
    efa0:	strb	r4, [r0, r3]
	rx_head = head;
}
    efa2:	ldr.w	r4, [sp], #4
    efa6:	bx	lr
    efa8:	.word	0x200062ec
    efac:	.word	0x200062e4

0000efb0 <rx_queue_transfer>:
/*************************************************************************/
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
    efb0:	push	{r4, r5, r6, lr}
	void *buffer = rx_buffer + i * MTP_RX_SIZE_480;
    efb2:	ldr	r1, [pc, #76]	; (f000 <rx_queue_transfer+0x50>)
/*************************************************************************/
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
    efb4:	mov	r3, r0
	void *buffer = rx_buffer + i * MTP_RX_SIZE_480;
	arm_dcache_delete(buffer, rx_packet_size);
    efb6:	ldr	r6, [pc, #76]	; (f004 <rx_queue_transfer+0x54>)
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
	void *buffer = rx_buffer + i * MTP_RX_SIZE_480;
    efb8:	add.w	r1, r1, r0, lsl #9
// read is certain to access the physical memory.
__attribute__((always_inline, unused))
static inline void arm_dcache_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
    efbc:	ldrh	r4, [r6, #0]
// want to delete anything the cache may have stored, so your next
// read is certain to access the physical memory.
__attribute__((always_inline, unused))
static inline void arm_dcache_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    efbe:	bic.w	r2, r1, #31
	uint32_t end_addr = (uint32_t)addr + size;
    efc2:	add	r4, r1
	asm volatile("": : :"memory");
	asm("dsb");
    efc4:	dsb	sy
	do {
		SCB_CACHE_DCIMVAC = location;
    efc8:	ldr	r5, [pc, #60]	; (f008 <rx_queue_transfer+0x58>)
    efca:	str	r2, [r5, #0]
		location += 32;
    efcc:	adds	r2, #32
	} while (location < end_addr);
    efce:	cmp	r4, r2
    efd0:	bhi.n	efca <rx_queue_transfer+0x1a>
	asm("dsb");
    efd2:	dsb	sy
	asm("isb");
    efd6:	isb	sy
	arm_dcache_delete(buffer, rx_packet_size);
	//memset(buffer, )
	NVIC_DISABLE_IRQ(IRQ_USB1);
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    efda:	ldr	r4, [pc, #48]	; (f00c <rx_queue_transfer+0x5c>)
static void rx_queue_transfer(int i)
{
	void *buffer = rx_buffer + i * MTP_RX_SIZE_480;
	arm_dcache_delete(buffer, rx_packet_size);
	//memset(buffer, )
	NVIC_DISABLE_IRQ(IRQ_USB1);
    efdc:	mov.w	r5, #131072	; 0x20000
    efe0:	ldr	r2, [pc, #44]	; (f010 <rx_queue_transfer+0x60>)
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    efe2:	add.w	r4, r4, r3, lsl #5
static void rx_queue_transfer(int i)
{
	void *buffer = rx_buffer + i * MTP_RX_SIZE_480;
	arm_dcache_delete(buffer, rx_packet_size);
	//memset(buffer, )
	NVIC_DISABLE_IRQ(IRQ_USB1);
    efe6:	str	r5, [r2, #0]
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    efe8:	mov	r0, r4
    efea:	ldrh	r2, [r6, #0]
    efec:	bl	e41c <usb_prepare_transfer>
	usb_receive(MTP_RX_ENDPOINT, rx_transfer + i);
    eff0:	mov	r1, r4
    eff2:	movs	r0, #4
    eff4:	bl	e474 <usb_receive>
	NVIC_ENABLE_IRQ(IRQ_USB1);
    eff8:	ldr	r3, [pc, #24]	; (f014 <rx_queue_transfer+0x64>)
    effa:	str	r5, [r3, #0]
    effc:	pop	{r4, r5, r6, pc}
    effe:	nop
    f000:	.word	0x20203000
    f004:	.word	0x200062ea
    f008:	.word	0xe000ef5c
    f00c:	.word	0x20006260
    f010:	.word	0xe000e18c
    f014:	.word	0xe000e10c

0000f018 <usb_mtp_configure>:
static void rx_event(transfer_t *t);
extern volatile uint8_t usb_configuration;


void usb_mtp_configure(void)
{
    f018:	push	{r3, r4, r5, r6, r7, lr}
	printf("usb_mtp_configure\n");
    	if (usb_high_speed) {
    f01a:	ldr	r3, [pc, #120]	; (f094 <usb_mtp_configure+0x7c>)
    f01c:	ldrb	r3, [r3, #0]
    f01e:	cbz	r3, f084 <usb_mtp_configure+0x6c>
		tx_packet_size = MTP_TX_SIZE_480;
    f020:	mov.w	r3, #512	; 0x200
    f024:	ldr	r2, [pc, #112]	; (f098 <usb_mtp_configure+0x80>)
		rx_packet_size = MTP_RX_SIZE_480;
    f026:	ldr	r5, [pc, #116]	; (f09c <usb_mtp_configure+0x84>)
    f028:	mov	r6, r3

void usb_mtp_configure(void)
{
	printf("usb_mtp_configure\n");
    	if (usb_high_speed) {
		tx_packet_size = MTP_TX_SIZE_480;
    f02a:	strh	r3, [r2, #0]
		rx_packet_size = MTP_RX_SIZE_480;
    f02c:	strh	r3, [r5, #0]
	} else {
		tx_packet_size = MTP_TX_SIZE_12;
		rx_packet_size = MTP_RX_SIZE_12;
    }
	memset(tx_transfer, 0, sizeof(tx_transfer));
    f02e:	movs	r1, #0
    f030:	movs	r2, #128	; 0x80
    f032:	ldr	r0, [pc, #108]	; (f0a0 <usb_mtp_configure+0x88>)
	memset(rx_transfer, 0, sizeof(rx_transfer));
	tx_head = 0;
    f034:	mov	r4, r1
		rx_packet_size = MTP_RX_SIZE_480;
	} else {
		tx_packet_size = MTP_TX_SIZE_12;
		rx_packet_size = MTP_RX_SIZE_12;
    }
	memset(tx_transfer, 0, sizeof(tx_transfer));
    f036:	bl	10d7c <memset>
	memset(rx_transfer, 0, sizeof(rx_transfer));
    f03a:	movs	r2, #128	; 0x80
    f03c:	ldr	r0, [pc, #100]	; (f0a4 <usb_mtp_configure+0x8c>)
    f03e:	mov	r1, r4
	tx_head = 0;
    f040:	ldr	r7, [pc, #100]	; (f0a8 <usb_mtp_configure+0x90>)
	} else {
		tx_packet_size = MTP_TX_SIZE_12;
		rx_packet_size = MTP_RX_SIZE_12;
    }
	memset(tx_transfer, 0, sizeof(tx_transfer));
	memset(rx_transfer, 0, sizeof(rx_transfer));
    f042:	bl	10d7c <memset>
	tx_head = 0;
	rx_head = 0;
    f046:	ldr	r0, [pc, #100]	; (f0ac <usb_mtp_configure+0x94>)
	rx_tail = 0;
	usb_config_tx(MTP_TX_ENDPOINT, tx_packet_size, 0, NULL);
    f048:	mov	r1, r6
    }
	memset(tx_transfer, 0, sizeof(tx_transfer));
	memset(rx_transfer, 0, sizeof(rx_transfer));
	tx_head = 0;
	rx_head = 0;
	rx_tail = 0;
    f04a:	ldr	r6, [pc, #100]	; (f0b0 <usb_mtp_configure+0x98>)
		rx_packet_size = MTP_RX_SIZE_12;
    }
	memset(tx_transfer, 0, sizeof(tx_transfer));
	memset(rx_transfer, 0, sizeof(rx_transfer));
	tx_head = 0;
	rx_head = 0;
    f04c:	strb	r4, [r0, #0]
	rx_tail = 0;
	usb_config_tx(MTP_TX_ENDPOINT, tx_packet_size, 0, NULL);
    f04e:	mov	r3, r4
    f050:	mov	r2, r4
    f052:	movs	r0, #4
		tx_packet_size = MTP_TX_SIZE_12;
		rx_packet_size = MTP_RX_SIZE_12;
    }
	memset(tx_transfer, 0, sizeof(tx_transfer));
	memset(rx_transfer, 0, sizeof(rx_transfer));
	tx_head = 0;
    f054:	strb	r4, [r7, #0]
	rx_head = 0;
	rx_tail = 0;
    f056:	strb	r4, [r6, #0]
	usb_config_tx(MTP_TX_ENDPOINT, tx_packet_size, 0, NULL);
    f058:	bl	e3b4 <usb_config_tx>
	usb_config_rx(MTP_RX_ENDPOINT, rx_packet_size, 0, rx_event);
    f05c:	ldrh	r1, [r5, #0]
    f05e:	mov	r2, r4
    f060:	ldr	r3, [pc, #80]	; (f0b4 <usb_mtp_configure+0x9c>)
    f062:	movs	r0, #4
    f064:	bl	e350 <usb_config_rx>
	int i;
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    f068:	mov	r0, r4
    f06a:	bl	efb0 <rx_queue_transfer>
    f06e:	movs	r0, #1
    f070:	bl	efb0 <rx_queue_transfer>
    f074:	movs	r0, #2
    f076:	bl	efb0 <rx_queue_transfer>
    f07a:	movs	r0, #3
}
    f07c:	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	rx_head = 0;
	rx_tail = 0;
	usb_config_tx(MTP_TX_ENDPOINT, tx_packet_size, 0, NULL);
	usb_config_rx(MTP_RX_ENDPOINT, rx_packet_size, 0, rx_event);
	int i;
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    f080:	b.w	efb0 <rx_queue_transfer>
	printf("usb_mtp_configure\n");
    	if (usb_high_speed) {
		tx_packet_size = MTP_TX_SIZE_480;
		rx_packet_size = MTP_RX_SIZE_480;
	} else {
		tx_packet_size = MTP_TX_SIZE_12;
    f084:	movs	r3, #64	; 0x40
    f086:	ldr	r2, [pc, #16]	; (f098 <usb_mtp_configure+0x80>)
		rx_packet_size = MTP_RX_SIZE_12;
    f088:	ldr	r5, [pc, #16]	; (f09c <usb_mtp_configure+0x84>)
    f08a:	mov	r6, r3
	printf("usb_mtp_configure\n");
    	if (usb_high_speed) {
		tx_packet_size = MTP_TX_SIZE_480;
		rx_packet_size = MTP_RX_SIZE_480;
	} else {
		tx_packet_size = MTP_TX_SIZE_12;
    f08c:	strh	r3, [r2, #0]
		rx_packet_size = MTP_RX_SIZE_12;
    f08e:	strh	r3, [r5, #0]
    f090:	b.n	f02e <usb_mtp_configure+0x16>
    f092:	nop
    f094:	.word	0x20006210
    f098:	.word	0x2000625c
    f09c:	.word	0x200062ea
    f0a0:	.word	0x20006300
    f0a4:	.word	0x20006260
    f0a8:	.word	0x2000625e
    f0ac:	.word	0x200062ec
    f0b0:	.word	0x200062e0
    f0b4:	.word	0x0000ef7d

0000f0b8 <usb_mtp_recv>:
	rx_head = head;
}


int usb_mtp_recv(void *buffer, uint32_t timeout)
{
    f0b8:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t wait_begin_at = systick_millis_count;
    f0bc:	ldr	r6, [pc, #140]	; (f14c <usb_mtp_recv+0x94>)
	uint32_t tail = rx_tail;
    f0be:	ldr.w	fp, [pc, #160]	; f160 <usb_mtp_recv+0xa8>
	while (1) {
		if (!usb_configuration) return -1; // usb not enumerated by host
    f0c2:	ldr	r7, [pc, #140]	; (f150 <usb_mtp_recv+0x98>)
}


int usb_mtp_recv(void *buffer, uint32_t timeout)
{
	uint32_t wait_begin_at = systick_millis_count;
    f0c4:	ldr.w	r9, [r6]
	uint32_t tail = rx_tail;
    f0c8:	ldrb.w	r4, [fp]
	while (1) {
		if (!usb_configuration) return -1; // usb not enumerated by host
    f0cc:	ldrb	r3, [r7, #0]
    f0ce:	cbz	r3, f10a <usb_mtp_recv+0x52>
		if (tail != rx_head) break;
    f0d0:	ldr.w	r8, [pc, #144]	; f164 <usb_mtp_recv+0xac>
    f0d4:	uxtb	r4, r4
    f0d6:	mov	r5, r1
    f0d8:	mov	sl, r0
    f0da:	ldrb.w	r3, [r8]
    f0de:	cmp	r4, r3
    f0e0:	bne.n	f112 <usb_mtp_recv+0x5a>
		if (systick_millis_count - wait_begin_at > timeout)  {
    f0e2:	ldr	r3, [r6, #0]
    f0e4:	rsb	r3, r9, r3
    f0e8:	cmp	r1, r3
    f0ea:	bcs.n	f100 <usb_mtp_recv+0x48>
    f0ec:	b.n	f13e <usb_mtp_recv+0x86>
{
	uint32_t wait_begin_at = systick_millis_count;
	uint32_t tail = rx_tail;
	while (1) {
		if (!usb_configuration) return -1; // usb not enumerated by host
		if (tail != rx_head) break;
    f0ee:	ldrb.w	r3, [r8]
    f0f2:	cmp	r4, r3
    f0f4:	bne.n	f112 <usb_mtp_recv+0x5a>
		if (systick_millis_count - wait_begin_at > timeout)  {
    f0f6:	ldr	r3, [r6, #0]
    f0f8:	rsb	r3, r9, r3
    f0fc:	cmp	r3, r5
    f0fe:	bhi.n	f13e <usb_mtp_recv+0x86>
			return 0;
		}
		yield();
    f100:	bl	f2bc <yield>
int usb_mtp_recv(void *buffer, uint32_t timeout)
{
	uint32_t wait_begin_at = systick_millis_count;
	uint32_t tail = rx_tail;
	while (1) {
		if (!usb_configuration) return -1; // usb not enumerated by host
    f104:	ldrb	r3, [r7, #0]
    f106:	cmp	r3, #0
    f108:	bne.n	f0ee <usb_mtp_recv+0x36>
    f10a:	mov.w	r0, #4294967295
    f10e:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			return 0;
		}
		yield();
	}
//	digitalWriteFast(0, LOW);
	if (++tail > RX_NUM) tail = 0;
    f112:	adds	r4, #1
    f114:	cmp	r4, #4
    f116:	bhi.n	f144 <usb_mtp_recv+0x8c>
    f118:	uxtb	r3, r4
	uint32_t i = rx_list[tail];
    f11a:	ldr	r2, [pc, #56]	; (f154 <usb_mtp_recv+0x9c>)
	rx_tail = tail;

	memcpy(buffer,  rx_buffer + i * MTP_RX_SIZE_480, rx_packet_size);
    f11c:	mov	r0, sl
    f11e:	ldr	r1, [pc, #56]	; (f158 <usb_mtp_recv+0xa0>)
		}
		yield();
	}
//	digitalWriteFast(0, LOW);
	if (++tail > RX_NUM) tail = 0;
	uint32_t i = rx_list[tail];
    f120:	ldrb	r5, [r2, r4]
	rx_tail = tail;

	memcpy(buffer,  rx_buffer + i * MTP_RX_SIZE_480, rx_packet_size);
    f122:	ldr	r4, [pc, #56]	; (f15c <usb_mtp_recv+0xa4>)
    f124:	add.w	r1, r1, r5, lsl #9
		yield();
	}
//	digitalWriteFast(0, LOW);
	if (++tail > RX_NUM) tail = 0;
	uint32_t i = rx_list[tail];
	rx_tail = tail;
    f128:	strb.w	r3, [fp]

	memcpy(buffer,  rx_buffer + i * MTP_RX_SIZE_480, rx_packet_size);
    f12c:	ldrh	r2, [r4, #0]
    f12e:	bl	d064 <memcpy>
	rx_queue_transfer(i);
    f132:	mov	r0, r5
    f134:	bl	efb0 <rx_queue_transfer>
	//memset(rx_transfer, 0, sizeof(rx_transfer));
	//usb_prepare_transfer(rx_transfer + 0, rx_buffer, rx_packet_size, 0);
	//usb_receive(MTP_RX_ENDPOINT, rx_transfer + 0);
	return rx_packet_size;
    f138:	ldrh	r0, [r4, #0]
}
    f13a:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t tail = rx_tail;
	while (1) {
		if (!usb_configuration) return -1; // usb not enumerated by host
		if (tail != rx_head) break;
		if (systick_millis_count - wait_begin_at > timeout)  {
			return 0;
    f13e:	movs	r0, #0
    f140:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f144:	movs	r3, #0
		}
		yield();
	}
//	digitalWriteFast(0, LOW);
	if (++tail > RX_NUM) tail = 0;
    f146:	mov	r4, r3
    f148:	b.n	f11a <usb_mtp_recv+0x62>
    f14a:	nop
    f14c:	.word	0x20006244
    f150:	.word	0x20006238
    f154:	.word	0x200062e4
    f158:	.word	0x20203000
    f15c:	.word	0x200062ea
    f160:	.word	0x200062e0
    f164:	.word	0x200062ec

0000f168 <usb_mtp_send>:
	//usb_receive(MTP_RX_ENDPOINT, rx_transfer + 0);
	return rx_packet_size;
}

int usb_mtp_send(const void *buffer, uint32_t len, uint32_t timeout)
{
    f168:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	transfer_t *xfer = tx_transfer + tx_head;
    f16c:	ldr.w	sl, [pc, #192]	; f230 <usb_mtp_send+0xc8>
	//usb_receive(MTP_RX_ENDPOINT, rx_transfer + 0);
	return rx_packet_size;
}

int usb_mtp_send(const void *buffer, uint32_t len, uint32_t timeout)
{
    f170:	mov	r8, r2
	transfer_t *xfer = tx_transfer + tx_head;
	uint32_t wait_begin_at = systick_millis_count;
    f172:	ldr	r5, [pc, #164]	; (f218 <usb_mtp_send+0xb0>)

	while (1) {
		if (!usb_configuration) return -1; // usb not enumerated by host
    f174:	ldr	r6, [pc, #164]	; (f21c <usb_mtp_send+0xb4>)
	return rx_packet_size;
}

int usb_mtp_send(const void *buffer, uint32_t len, uint32_t timeout)
{
	transfer_t *xfer = tx_transfer + tx_head;
    f176:	ldrb.w	r4, [sl]
    f17a:	ldr	r2, [pc, #164]	; (f220 <usb_mtp_send+0xb8>)
	uint32_t wait_begin_at = systick_millis_count;
    f17c:	ldr	r7, [r5, #0]

	while (1) {
		if (!usb_configuration) return -1; // usb not enumerated by host
    f17e:	ldrb	r3, [r6, #0]
	return rx_packet_size;
}

int usb_mtp_send(const void *buffer, uint32_t len, uint32_t timeout)
{
	transfer_t *xfer = tx_transfer + tx_head;
    f180:	add.w	r4, r2, r4, lsl #5
	uint32_t wait_begin_at = systick_millis_count;

	while (1) {
		if (!usb_configuration) return -1; // usb not enumerated by host
    f184:	cmp	r3, #0
    f186:	beq.n	f208 <usb_mtp_send+0xa0>
    f188:	mov	fp, r0
    f18a:	mov	r9, r1
    f18c:	b.n	f19e <usb_mtp_send+0x36>
		uint32_t status = usb_transfer_status(xfer);
		if (!(status & 0x80)) break; // transfer descriptor ready
		if (systick_millis_count - wait_begin_at > timeout) return 0;
    f18e:	ldr	r3, [r5, #0]
    f190:	subs	r3, r3, r7
    f192:	cmp	r3, r8
    f194:	bhi.n	f210 <usb_mtp_send+0xa8>
		yield();
    f196:	bl	f2bc <yield>
{
	transfer_t *xfer = tx_transfer + tx_head;
	uint32_t wait_begin_at = systick_millis_count;

	while (1) {
		if (!usb_configuration) return -1; // usb not enumerated by host
    f19a:	ldrb	r3, [r6, #0]
    f19c:	cbz	r3, f208 <usb_mtp_send+0xa0>
		uint32_t status = usb_transfer_status(xfer);
    f19e:	mov	r0, r4
    f1a0:	bl	e498 <usb_transfer_status>
		if (!(status & 0x80)) break; // transfer descriptor ready
    f1a4:	lsls	r3, r0, #24
    f1a6:	bmi.n	f18e <usb_mtp_send+0x26>
		if (systick_millis_count - wait_begin_at > timeout) return 0;
		yield();
	}
	uint8_t *txdata = txbuffer + (tx_head * MTP_TX_SIZE_480);
    f1a8:	ldr	r3, [pc, #120]	; (f224 <usb_mtp_send+0xbc>)
	memcpy(txdata, buffer, len);
    f1aa:	mov	r2, r9
		uint32_t status = usb_transfer_status(xfer);
		if (!(status & 0x80)) break; // transfer descriptor ready
		if (systick_millis_count - wait_begin_at > timeout) return 0;
		yield();
	}
	uint8_t *txdata = txbuffer + (tx_head * MTP_TX_SIZE_480);
    f1ac:	ldrb.w	r5, [sl]
	memcpy(txdata, buffer, len);
    f1b0:	mov	r1, fp
		uint32_t status = usb_transfer_status(xfer);
		if (!(status & 0x80)) break; // transfer descriptor ready
		if (systick_millis_count - wait_begin_at > timeout) return 0;
		yield();
	}
	uint8_t *txdata = txbuffer + (tx_head * MTP_TX_SIZE_480);
    f1b2:	add.w	r5, r3, r5, lsl #9
	memcpy(txdata, buffer, len);
    f1b6:	mov	r0, r5
    f1b8:	bl	d064 <memcpy>
	arm_dcache_flush_delete(txdata, tx_packet_size );
    f1bc:	ldr	r2, [pc, #104]	; (f228 <usb_mtp_send+0xc0>)
// any cached data written to memory, and then removed from the cache,
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    f1be:	bic.w	r3, r5, #31
	uint32_t end_addr = (uint32_t)addr + size;
    f1c2:	ldrh	r2, [r2, #0]
    f1c4:	add	r2, r5
	asm volatile("": : :"memory");
	asm("dsb");
    f1c6:	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    f1ca:	ldr	r1, [pc, #96]	; (f22c <usb_mtp_send+0xc4>)
    f1cc:	str	r3, [r1, #0]
		location += 32;
    f1ce:	adds	r3, #32
	} while (location < end_addr);
    f1d0:	cmp	r2, r3
    f1d2:	bhi.n	f1cc <usb_mtp_send+0x64>
	asm("dsb");
    f1d4:	dsb	sy
	asm("isb");
    f1d8:	isb	sy
	usb_prepare_transfer(xfer, txdata, len, 0);
    f1dc:	movs	r3, #0
    f1de:	mov	r2, r9
    f1e0:	mov	r1, r5
    f1e2:	mov	r0, r4
    f1e4:	bl	e41c <usb_prepare_transfer>
	usb_transmit(MTP_TX_ENDPOINT, xfer);
    f1e8:	mov	r1, r4
    f1ea:	movs	r0, #4
    f1ec:	bl	e44c <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    f1f0:	ldrb.w	r3, [sl]
    f1f4:	ldr	r2, [pc, #56]	; (f230 <usb_mtp_send+0xc8>)
	return len;
    f1f6:	mov	r0, r9
	uint8_t *txdata = txbuffer + (tx_head * MTP_TX_SIZE_480);
	memcpy(txdata, buffer, len);
	arm_dcache_flush_delete(txdata, tx_packet_size );
	usb_prepare_transfer(xfer, txdata, len, 0);
	usb_transmit(MTP_TX_ENDPOINT, xfer);
	if (++tx_head >= TX_NUM) tx_head = 0;
    f1f8:	adds	r3, #1
    f1fa:	uxtb	r3, r3
    f1fc:	cmp	r3, #3
    f1fe:	it	hi
    f200:	movhi	r3, #0
    f202:	strb	r3, [r2, #0]
	return len;
    f204:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
{
	transfer_t *xfer = tx_transfer + tx_head;
	uint32_t wait_begin_at = systick_millis_count;

	while (1) {
		if (!usb_configuration) return -1; // usb not enumerated by host
    f208:	mov.w	r0, #4294967295
    f20c:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		uint32_t status = usb_transfer_status(xfer);
		if (!(status & 0x80)) break; // transfer descriptor ready
		if (systick_millis_count - wait_begin_at > timeout) return 0;
    f210:	movs	r0, #0
	arm_dcache_flush_delete(txdata, tx_packet_size );
	usb_prepare_transfer(xfer, txdata, len, 0);
	usb_transmit(MTP_TX_ENDPOINT, xfer);
	if (++tx_head >= TX_NUM) tx_head = 0;
	return len;
}
    f212:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f216:	nop
    f218:	.word	0x20006244
    f21c:	.word	0x20006238
    f220:	.word	0x20006300
    f224:	.word	0x20203800
    f228:	.word	0x2000625c
    f22c:	.word	0xe000ef70
    f230:	.word	0x2000625e

0000f234 <usb_mtp_available>:

int usb_mtp_available(void)
{
	if (!usb_configuration) return 0;
    f234:	ldr	r3, [pc, #28]	; (f254 <usb_mtp_available+0x20>)
    f236:	ldrb	r3, [r3, #0]
    f238:	and.w	r0, r3, #255	; 0xff
    f23c:	cbz	r3, f252 <usb_mtp_available+0x1e>
	if (rx_head != rx_tail) return rx_packet_size;
    f23e:	ldr	r2, [pc, #24]	; (f258 <usb_mtp_available+0x24>)
    f240:	ldr	r3, [pc, #24]	; (f25c <usb_mtp_available+0x28>)
    f242:	ldrb	r2, [r2, #0]
    f244:	ldrb	r3, [r3, #0]
    f246:	cmp	r2, r3
    f248:	beq.n	f250 <usb_mtp_available+0x1c>
    f24a:	ldr	r3, [pc, #20]	; (f260 <usb_mtp_available+0x2c>)
    f24c:	ldrh	r0, [r3, #0]
    f24e:	bx	lr
	return len;
}

int usb_mtp_available(void)
{
	if (!usb_configuration) return 0;
    f250:	movs	r0, #0
	if (rx_head != rx_tail) return rx_packet_size;
	//if (!(usb_transfer_status(rx_transfer) & 0x80)) return MTP_RX_SIZE;
	return 0;
}
    f252:	bx	lr
    f254:	.word	0x20006238
    f258:	.word	0x200062ec
    f25c:	.word	0x200062e0
    f260:	.word	0x200062ea

0000f264 <usb_init_serialnumber>:
void usb_init_serialnumber(void)
{
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    f264:	ldr	r2, [pc, #72]	; (f2b0 <usb_init_serialnumber+0x4c>)
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    f266:	ldr	r3, [pc, #76]	; (f2b4 <usb_init_serialnumber+0x50>)
void usb_init_serialnumber(void)
{
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    f268:	ldr.w	r0, [r2, #544]	; 0x220
    f26c:	bic.w	r0, r0, #4278190080	; 0xff000000
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    f270:	cmp	r0, r3
	{'M','T','P'}
};
#endif

void usb_init_serialnumber(void)
{
    f272:	push	{r4, lr}
    f274:	sub	sp, #16
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    f276:	bhi.n	f27e <usb_init_serialnumber+0x1a>
    f278:	add.w	r0, r0, r0, lsl #2
    f27c:	lsls	r0, r0, #1
    f27e:	ldr	r4, [pc, #56]	; (f2b8 <usb_init_serialnumber+0x54>)
	ultoa(num, buf, 10);
    f280:	add	r1, sp, #4
    f282:	movs	r2, #10
    f284:	bl	e720 <ultoa>
    f288:	add	r1, sp, #4
	for (i=0; i<10; i++) {
    f28a:	movs	r3, #0
    f28c:	mov	r0, r4
		char c = buf[i];
    f28e:	ldrb.w	r2, [r1], #1
    f292:	adds	r3, #1
		if (!c) break;
    f294:	cbz	r2, f2a6 <usb_init_serialnumber+0x42>

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    f296:	cmp	r3, #10
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
    f298:	strh.w	r2, [r0, #2]!

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    f29c:	bne.n	f28e <usb_init_serialnumber+0x2a>
    f29e:	movs	r3, #22
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    f2a0:	strb	r3, [r4, #0]
}
    f2a2:	add	sp, #16
    f2a4:	pop	{r4, pc}
    f2a6:	lsls	r3, r3, #1
    f2a8:	uxtb	r3, r3
	for (i=0; i<10; i++) {
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    f2aa:	strb	r3, [r4, #0]
}
    f2ac:	add	sp, #16
    f2ae:	pop	{r4, pc}
    f2b0:	.word	0x401f4400
    f2b4:	.word	0x0098967f
    f2b8:	.word	0x20000c40

0000f2bc <yield>:

extern const uint8_t _serialEvent_default;	

void yield(void) __attribute__ ((weak));
void yield(void)
{
    f2bc:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	static uint8_t running=0;
	if (!yield_active_check_flags) return;	// nothing to do
    f2c0:	ldr	r6, [pc, #200]	; (f38c <yield+0xd0>)
    f2c2:	ldrb	r3, [r6, #0]
    f2c4:	cbz	r3, f2ec <yield+0x30>
	if (running) return; // TODO: does this need to be atomic?
    f2c6:	ldr	r7, [pc, #200]	; (f390 <yield+0xd4>)
    f2c8:	ldrb	r2, [r7, #0]
    f2ca:	cbnz	r2, f2ec <yield+0x30>
	running = 1;
    f2cc:	movs	r2, #1


	// USB Serail - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
    f2ce:	lsls	r1, r3, #31
void yield(void)
{
	static uint8_t running=0;
	if (!yield_active_check_flags) return;	// nothing to do
	if (running) return; // TODO: does this need to be atomic?
	running = 1;
    f2d0:	strb	r2, [r7, #0]


	// USB Serail - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
    f2d2:	bmi.n	f344 <yield+0x88>
		if (_serialEventUSB2_default) yield_active_check_flags &= ~YIELD_CHECK_USB_SERIALUSB2;
	}
#endif

	// Current workaround until integrate with EventResponder.
	if (yield_active_check_flags & YIELD_CHECK_HARDWARE_SERIAL) HardwareSerial::processSerialEventsList();
    f2d4:	lsls	r2, r3, #30
    f2d6:	bmi.n	f30c <yield+0x50>

	running = 0;
    f2d8:	movs	r2, #0
	if (yield_active_check_flags & YIELD_CHECK_EVENT_RESPONDER) EventResponder::runFromYield();
    f2da:	lsls	r3, r3, #29
#endif

	// Current workaround until integrate with EventResponder.
	if (yield_active_check_flags & YIELD_CHECK_HARDWARE_SERIAL) HardwareSerial::processSerialEventsList();

	running = 0;
    f2dc:	strb	r2, [r7, #0]
	if (yield_active_check_flags & YIELD_CHECK_EVENT_RESPONDER) EventResponder::runFromYield();
    f2de:	bpl.n	f2ec <yield+0x30>
	// Wait for event(s) to occur.  These are most likely to be useful when
	// used with a scheduler or RTOS.
	bool waitForEvent(EventResponderRef event, int timeout);
	EventResponder * waitForEvent(EventResponder *list, int listsize, int timeout);
	static void runFromYield() {
		if (!firstYield) return;  
    f2e0:	ldr	r3, [pc, #176]	; (f394 <yield+0xd8>)
    f2e2:	ldr	r2, [r3, #0]
    f2e4:	cbz	r2, f2ec <yield+0x30>
		// First, check if yield was called from an interrupt
		// never call normal handler functions from any interrupt context
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    f2e6:	mrs	r2, IPSR
		if (ipsr != 0) return;
    f2ea:	cbz	r2, f2f0 <yield+0x34>
    f2ec:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    f2f0:	mrs	r0, PRIMASK
		__disable_irq();
    f2f4:	cpsid	i
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
		if (ipsr != 0) return;
		// Next, check if any events have been triggered
		bool irq = disableInterrupts();
		EventResponder *first = firstYield;
    f2f6:	ldr	r2, [r3, #0]
		if (first == nullptr) {
    f2f8:	cbz	r2, f302 <yield+0x46>
			return;
		}
		// Finally, make sure we're not being recursively called,
		// which can happen if the user's function does anything
		// that calls yield.
		if (runningFromYield) {
    f2fa:	ldr	r4, [pc, #156]	; (f398 <yield+0xdc>)
    f2fc:	ldrb	r1, [r4, #0]
    f2fe:	cmp	r1, #0
    f300:	beq.n	f362 <yield+0xa6>
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    f302:	cmp	r0, #0
    f304:	bne.n	f2ec <yield+0x30>
    f306:	cpsie	i
    f308:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	*/

	operator bool()			{ return true; }

	static inline void processSerialEventsList() {
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    f30c:	ldr.w	r8, [pc, #148]	; f3a4 <yield+0xe8>
    f310:	ldrb.w	r2, [r8]
    f314:	cmp	r2, #0
    f316:	beq.n	f2d8 <yield+0x1c>
    f318:	movs	r4, #0
    f31a:	ldr.w	r9, [pc, #140]	; f3a8 <yield+0xec>
    f31e:	b.n	f32c <yield+0x70>
    f320:	adds	r4, #1
    f322:	ldrb.w	r3, [r8]
    f326:	uxtb	r4, r4
    f328:	cmp	r3, r4
    f32a:	bls.n	f354 <yield+0x98>
			s_serials_with_serial_events[i]->doYieldCode();
    f32c:	ldr.w	r5, [r9, r4, lsl #2]
	static HardwareSerial 	*s_serials_with_serial_events[7];
	#endif
	static uint8_t 			s_count_serials_with_serial_events;
	void addToSerialEventsList(); 
	inline void doYieldCode()  {
		if (available()) (*hardware->_serialEvent)();
    f330:	ldr	r3, [r5, #0]
    f332:	mov	r0, r5
    f334:	ldr	r3, [r3, #16]
    f336:	blx	r3
    f338:	cmp	r0, #0
    f33a:	beq.n	f320 <yield+0x64>
    f33c:	ldr	r3, [r5, #20]
    f33e:	ldr	r3, [r3, #8]
    f340:	blx	r3
    f342:	b.n	f320 <yield+0x64>
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    f344:	bl	d708 <usb_serial_available>
	running = 1;


	// USB Serail - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
		if (Serial.available()) serialEvent();
    f348:	cbnz	r0, f380 <yield+0xc4>
		if (_serialEvent_default) yield_active_check_flags &= ~YIELD_CHECK_USB_SERIAL;
    f34a:	ldr	r3, [pc, #80]	; (f39c <yield+0xe0>)
    f34c:	ldrb	r3, [r3, #0]
    f34e:	cbnz	r3, f358 <yield+0x9c>
    f350:	ldrb	r3, [r6, #0]
    f352:	b.n	f2d4 <yield+0x18>
    f354:	ldrb	r3, [r6, #0]
    f356:	b.n	f2d8 <yield+0x1c>
    f358:	ldrb	r3, [r6, #0]
    f35a:	and.w	r3, r3, #254	; 0xfe
    f35e:	strb	r3, [r6, #0]
    f360:	b.n	f2d4 <yield+0x18>
		if (runningFromYield) {
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
    f362:	movs	r6, #1
		firstYield = first->_next;
    f364:	ldr	r5, [r2, #20]
		if (runningFromYield) {
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
    f366:	strb	r6, [r4, #0]
		firstYield = first->_next;
    f368:	str	r5, [r3, #0]
		if (firstYield) {
    f36a:	cbz	r5, f386 <yield+0xca>
			firstYield->_prev = nullptr;
    f36c:	str	r1, [r5, #24]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    f36e:	cbnz	r0, f372 <yield+0xb6>
    f370:	cpsie	i
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
		}
		enableInterrupts(irq);
		first->_triggered = false;
    f372:	movs	r5, #0
		(*(first->_function))(*first);
    f374:	ldr	r3, [r2, #8]
    f376:	mov	r0, r2
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
		}
		enableInterrupts(irq);
		first->_triggered = false;
    f378:	strb	r5, [r2, #29]
		(*(first->_function))(*first);
    f37a:	blx	r3
		runningFromYield = false;
    f37c:	strb	r5, [r4, #0]
    f37e:	b.n	f2ec <yield+0x30>
	running = 1;


	// USB Serail - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
		if (Serial.available()) serialEvent();
    f380:	bl	f6d8 <serialEvent()>
    f384:	b.n	f34a <yield+0x8e>
		runningFromYield = true;
		firstYield = first->_next;
		if (firstYield) {
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
    f386:	ldr	r3, [pc, #24]	; (f3a0 <yield+0xe4>)
    f388:	str	r5, [r3, #0]
    f38a:	b.n	f36e <yield+0xb2>
    f38c:	.word	0x20000c56
    f390:	.word	0x20006380
    f394:	.word	0x20006390
    f398:	.word	0x20006394
    f39c:	.word	0x60001b4a
    f3a0:	.word	0x2000638c
    f3a4:	.word	0x200063b8
    f3a8:	.word	0x20006398

0000f3ac <EventResponder::triggerEventNotImmediate()>:
uint8_t _serialEvent_default __attribute__((weak)) PROGMEM = 0 ;	
uint8_t _serialEventUSB1_default __attribute__((weak)) PROGMEM = 0 ;	
uint8_t _serialEventUSB2_default __attribute__((weak)) PROGMEM = 0 ;	

void EventResponder::triggerEventNotImmediate()
{
    f3ac:	push	{r4}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    f3ae:	mrs	r2, PRIMASK
		__disable_irq();
    f3b2:	cpsid	i
	bool irq = disableInterrupts();
	if (_triggered == false) {
    f3b4:	ldrb	r3, [r0, #29]
    f3b6:	cbnz	r3, f3c6 <EventResponder::triggerEventNotImmediate()+0x1a>
		// not already triggered
		if (_type == EventTypeYield) {
    f3b8:	ldrb	r1, [r0, #28]
    f3ba:	cmp	r1, #1
    f3bc:	beq.n	f3d0 <EventResponder::triggerEventNotImmediate()+0x24>
				_next = nullptr;
				_prev = lastYield;
				_prev->_next = this;
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
    f3be:	cmp	r1, #3
    f3c0:	beq.n	f3e4 <EventResponder::triggerEventNotImmediate()+0x38>
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
		} else {
			// detached, easy :-)
		}
		_triggered = true;
    f3c2:	movs	r3, #1
    f3c4:	strb	r3, [r0, #29]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    f3c6:	cbnz	r2, f3ca <EventResponder::triggerEventNotImmediate()+0x1e>
    f3c8:	cpsie	i
	}
	enableInterrupts(irq);
}
    f3ca:	ldr.w	r4, [sp], #4
    f3ce:	bx	lr
	bool irq = disableInterrupts();
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
    f3d0:	ldr	r4, [pc, #68]	; (f418 <EventResponder::triggerEventNotImmediate()+0x6c>)
    f3d2:	ldr	r1, [r4, #0]
    f3d4:	cbz	r1, f400 <EventResponder::triggerEventNotImmediate()+0x54>
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
    f3d6:	ldr	r1, [pc, #68]	; (f41c <EventResponder::triggerEventNotImmediate()+0x70>)
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
    f3d8:	str	r3, [r0, #20]
				_prev = lastYield;
    f3da:	ldr	r3, [r1, #0]
				_prev->_next = this;
				lastYield = this;
    f3dc:	str	r0, [r1, #0]
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
    f3de:	str	r3, [r0, #24]
				_prev->_next = this;
    f3e0:	str	r0, [r3, #20]
    f3e2:	b.n	f3c2 <EventResponder::triggerEventNotImmediate()+0x16>
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
    f3e4:	ldr	r4, [pc, #56]	; (f420 <EventResponder::triggerEventNotImmediate()+0x74>)
    f3e6:	ldr	r1, [r4, #0]
    f3e8:	cbz	r1, f40c <EventResponder::triggerEventNotImmediate()+0x60>
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
    f3ea:	ldr	r1, [pc, #56]	; (f424 <EventResponder::triggerEventNotImmediate()+0x78>)
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
    f3ec:	str	r3, [r0, #20]
				_prev = lastInterrupt;
    f3ee:	ldr	r3, [r1, #0]
				_prev->_next = this;
				lastInterrupt = this;
    f3f0:	str	r0, [r1, #0]
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
    f3f2:	str	r3, [r0, #24]
				_prev->_next = this;
    f3f4:	str	r0, [r3, #20]
				lastInterrupt = this;
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
    f3f6:	ldr	r3, [pc, #48]	; (f428 <EventResponder::triggerEventNotImmediate()+0x7c>)
    f3f8:	mov.w	r1, #268435456	; 0x10000000
    f3fc:	str	r1, [r3, #0]
    f3fe:	b.n	f3c2 <EventResponder::triggerEventNotImmediate()+0x16>
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
    f400:	ldr	r3, [pc, #24]	; (f41c <EventResponder::triggerEventNotImmediate()+0x70>)
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
    f402:	str	r1, [r0, #20]
				_prev = nullptr;
    f404:	str	r1, [r0, #24]
				firstYield = this;
    f406:	str	r0, [r4, #0]
				lastYield = this;
    f408:	str	r0, [r3, #0]
    f40a:	b.n	f3c2 <EventResponder::triggerEventNotImmediate()+0x16>
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
    f40c:	ldr	r3, [pc, #20]	; (f424 <EventResponder::triggerEventNotImmediate()+0x78>)
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
    f40e:	str	r1, [r0, #20]
				_prev = nullptr;
    f410:	str	r1, [r0, #24]
				firstInterrupt = this;
    f412:	str	r0, [r4, #0]
				lastInterrupt = this;
    f414:	str	r0, [r3, #0]
    f416:	b.n	f3f6 <EventResponder::triggerEventNotImmediate()+0x4a>
    f418:	.word	0x20006390
    f41c:	.word	0x2000638c
    f420:	.word	0x20006384
    f424:	.word	0x20006388
    f428:	.word	0xe000ed04

0000f42c <EventResponder::runFromInterrupt()>:
{
	EventResponder::runFromInterrupt();
}

void EventResponder::runFromInterrupt()
{
    f42c:	push	{r4, r5, r6, lr}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    f42e:	mrs	r1, PRIMASK
		__disable_irq();
    f432:	cpsid	i
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    f434:	ldr	r4, [pc, #48]	; (f468 <EventResponder::runFromInterrupt()+0x3c>)
    f436:	ldr	r3, [r4, #0]
		if (first) {
    f438:	cbz	r3, f45e <EventResponder::runFromInterrupt()+0x32>
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    f43a:	ldr	r6, [pc, #48]	; (f46c <EventResponder::runFromInterrupt()+0x40>)
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
    f43c:	movs	r5, #0
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
    f43e:	ldr	r2, [r3, #20]
    f440:	str	r2, [r4, #0]
			if (firstInterrupt) {
    f442:	cbz	r2, f464 <EventResponder::runFromInterrupt()+0x38>
				firstInterrupt->_prev = nullptr;
    f444:	str	r5, [r2, #24]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    f446:	cbnz	r1, f44a <EventResponder::runFromInterrupt()+0x1e>
    f448:	cpsie	i
			} else {
				lastInterrupt = nullptr;
			}
			enableInterrupts(irq);
			first->_triggered = false;
    f44a:	strb	r5, [r3, #29]
			(*(first->_function))(*first);
    f44c:	mov	r0, r3
    f44e:	ldr	r3, [r3, #8]
    f450:	blx	r3
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    f452:	mrs	r1, PRIMASK
		__disable_irq();
    f456:	cpsid	i

void EventResponder::runFromInterrupt()
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    f458:	ldr	r3, [r4, #0]
		if (first) {
    f45a:	cmp	r3, #0
    f45c:	bne.n	f43e <EventResponder::runFromInterrupt()+0x12>
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    f45e:	cbnz	r1, f462 <EventResponder::runFromInterrupt()+0x36>
    f460:	cpsie	i
    f462:	pop	{r4, r5, r6, pc}
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    f464:	str	r2, [r6, #0]
    f466:	b.n	f446 <EventResponder::runFromInterrupt()+0x1a>
    f468:	.word	0x20006384
    f46c:	.word	0x20006388

0000f470 <pendablesrvreq_isr>:
	enableInterrupts(irq);
}

extern "C" void pendablesrvreq_isr(void)
{
	EventResponder::runFromInterrupt();
    f470:	b.w	f42c <EventResponder::runFromInterrupt()>

0000f474 <systick_isr>:
extern "C" volatile uint32_t systick_millis_count;
extern "C" volatile uint32_t systick_cycle_count;
extern "C" uint32_t systick_safe_read; // micros() synchronization
extern "C" void systick_isr(void)
{
	systick_cycle_count = ARM_DWT_CYCCNT;
    f474:	ldr	r2, [pc, #16]	; (f488 <systick_isr+0x14>)
    f476:	ldr	r3, [pc, #20]	; (f48c <systick_isr+0x18>)
    f478:	ldr	r1, [r2, #0]
	systick_millis_count++;
    f47a:	ldr	r2, [pc, #20]	; (f490 <systick_isr+0x1c>)
extern "C" volatile uint32_t systick_millis_count;
extern "C" volatile uint32_t systick_cycle_count;
extern "C" uint32_t systick_safe_read; // micros() synchronization
extern "C" void systick_isr(void)
{
	systick_cycle_count = ARM_DWT_CYCCNT;
    f47c:	str	r1, [r3, #0]
	systick_millis_count++;
    f47e:	ldr	r3, [r2, #0]
    f480:	adds	r3, #1
    f482:	str	r3, [r2, #0]
    f484:	bx	lr
    f486:	nop
    f488:	.word	0xe0001004
    f48c:	.word	0x2000623c
    f490:	.word	0x20006244

0000f494 <DMAChannel::begin(bool)>:
#warning "CR is defined as something?"
#endif


void DMAChannel::begin(bool force_initialization)
{
    f494:	push	{r4, r5, r6, r7}
	uint32_t ch = 0;

	__disable_irq();
    f496:	cpsid	i
	if (!force_initialization && TCD && channel < DMA_MAX_CHANNELS
    f498:	cbnz	r1, f4be <DMAChannel::begin(bool)+0x2a>
    f49a:	ldr	r2, [r0, #0]
    f49c:	cbz	r2, f4be <DMAChannel::begin(bool)+0x2a>
    f49e:	ldrb	r3, [r0, #4]
    f4a0:	cmp	r3, #15
    f4a2:	bhi.n	f4be <DMAChannel::begin(bool)+0x2a>
	  && (dma_channel_allocated_mask & (1 << channel))
    f4a4:	ldr	r4, [pc, #124]	; (f524 <DMAChannel::begin(bool)+0x90>)
    f4a6:	ldrh	r1, [r4, #0]
    f4a8:	asr.w	r5, r1, r3
    f4ac:	lsls	r5, r5, #31
    f4ae:	bpl.n	f4c2 <DMAChannel::begin(bool)+0x2e>
	  && (uint32_t)TCD == (uint32_t)(0x400E9000 + channel * 32)) {
    f4b0:	ldr	r5, [pc, #116]	; (f528 <DMAChannel::begin(bool)+0x94>)
    f4b2:	add	r5, r3
    f4b4:	cmp.w	r2, r5, lsl #5
    f4b8:	bne.n	f4c2 <DMAChannel::begin(bool)+0x2e>
		// DMA channel already allocated
		__enable_irq();
    f4ba:	cpsie	i
		return;
    f4bc:	b.n	f4dc <DMAChannel::begin(bool)+0x48>
    f4be:	ldr	r4, [pc, #100]	; (f524 <DMAChannel::begin(bool)+0x90>)
    f4c0:	ldrh	r1, [r4, #0]
#warning "CR is defined as something?"
#endif


void DMAChannel::begin(bool force_initialization)
{
    f4c2:	movs	r3, #0
		// DMA channel already allocated
		__enable_irq();
		return;
	}
	while (1) {
		if (!(dma_channel_allocated_mask & (1 << ch))) {
    f4c4:	asr.w	r2, r1, r3
    f4c8:	ands.w	r2, r2, #1
    f4cc:	beq.n	f4e0 <DMAChannel::begin(bool)+0x4c>
			dma_channel_allocated_mask |= (1 << ch);
			__enable_irq();
			break;
		}
		if (++ch >= DMA_MAX_CHANNELS) {
    f4ce:	adds	r3, #1
    f4d0:	cmp	r3, #16
    f4d2:	bne.n	f4c4 <DMAChannel::begin(bool)+0x30>
			__enable_irq();
    f4d4:	cpsie	i
			TCD = (TCD_t *)0;
    f4d6:	movs	r2, #0
			channel = DMA_MAX_CHANNELS;
    f4d8:	strb	r3, [r0, #4]
			__enable_irq();
			break;
		}
		if (++ch >= DMA_MAX_CHANNELS) {
			__enable_irq();
			TCD = (TCD_t *)0;
    f4da:	str	r2, [r0, #0]
	*p++ = 0;
	*p++ = 0;
	*p++ = 0;
	*p++ = 0;
	*p++ = 0;
}
    f4dc:	pop	{r4, r5, r6, r7}
    f4de:	bx	lr
		__enable_irq();
		return;
	}
	while (1) {
		if (!(dma_channel_allocated_mask & (1 << ch))) {
			dma_channel_allocated_mask |= (1 << ch);
    f4e0:	movs	r5, #1
    f4e2:	lsls	r5, r3
    f4e4:	orrs	r1, r5
    f4e6:	strh	r1, [r4, #0]
			__enable_irq();
    f4e8:	cpsie	i
			// attempts to use this object will hardfault
		}
	}
	channel = ch;

	CCM_CCGR5 |= CCM_CCGR5_DMA(CCM_CCGR_ON);
    f4ea:	ldr	r6, [pc, #64]	; (f52c <DMAChannel::begin(bool)+0x98>)
			channel = DMA_MAX_CHANNELS;
			return; // no more channels available
			// attempts to use this object will hardfault
		}
	}
	channel = ch;
    f4ec:	uxtb	r4, r3
	DMA_CR = DMA_CR_GRP1PRI | DMA_CR_EMLM | DMA_CR_EDBG;
	DMA_CERQ = ch;
	DMA_CERR = ch;
	DMA_CEEI = ch;
	DMA_CINT = ch;
	TCD = (TCD_t *)(0x400E9000 + ch * 32);
    f4ee:	ldr	r1, [pc, #56]	; (f528 <DMAChannel::begin(bool)+0x94>)
		}
	}
	channel = ch;

	CCM_CCGR5 |= CCM_CCGR5_DMA(CCM_CCGR_ON);
	DMA_CR = DMA_CR_GRP1PRI | DMA_CR_EMLM | DMA_CR_EDBG;
    f4f0:	movw	r7, #1154	; 0x482
			channel = DMA_MAX_CHANNELS;
			return; // no more channels available
			// attempts to use this object will hardfault
		}
	}
	channel = ch;
    f4f4:	strb	r4, [r0, #4]
	DMA_CR = DMA_CR_GRP1PRI | DMA_CR_EMLM | DMA_CR_EDBG;
	DMA_CERQ = ch;
	DMA_CERR = ch;
	DMA_CEEI = ch;
	DMA_CINT = ch;
	TCD = (TCD_t *)(0x400E9000 + ch * 32);
    f4f6:	add	r1, r3
			// attempts to use this object will hardfault
		}
	}
	channel = ch;

	CCM_CCGR5 |= CCM_CCGR5_DMA(CCM_CCGR_ON);
    f4f8:	ldr	r5, [r6, #124]	; 0x7c
	DMA_CR = DMA_CR_GRP1PRI | DMA_CR_EMLM | DMA_CR_EDBG;
	DMA_CERQ = ch;
	DMA_CERR = ch;
	DMA_CEEI = ch;
	DMA_CINT = ch;
	TCD = (TCD_t *)(0x400E9000 + ch * 32);
    f4fa:	lsls	r3, r1, #5
			// attempts to use this object will hardfault
		}
	}
	channel = ch;

	CCM_CCGR5 |= CCM_CCGR5_DMA(CCM_CCGR_ON);
    f4fc:	orr.w	r5, r5, #192	; 0xc0
	DMA_CR = DMA_CR_GRP1PRI | DMA_CR_EMLM | DMA_CR_EDBG;
    f500:	ldr	r1, [pc, #44]	; (f530 <DMAChannel::begin(bool)+0x9c>)
			// attempts to use this object will hardfault
		}
	}
	channel = ch;

	CCM_CCGR5 |= CCM_CCGR5_DMA(CCM_CCGR_ON);
    f502:	str	r5, [r6, #124]	; 0x7c
	DMA_CR = DMA_CR_GRP1PRI | DMA_CR_EMLM | DMA_CR_EDBG;
    f504:	str	r7, [r1, #0]
	DMA_CERQ = ch;
    f506:	strb	r4, [r1, #26]
	DMA_CERR = ch;
    f508:	strb	r4, [r1, #30]
	DMA_CEEI = ch;
    f50a:	strb	r4, [r1, #24]
	DMA_CINT = ch;
    f50c:	strb	r4, [r1, #31]
	TCD = (TCD_t *)(0x400E9000 + ch * 32);
    f50e:	str	r3, [r0, #0]
	uint32_t *p = (uint32_t *)TCD;
	*p++ = 0;
    f510:	str	r2, [r3, #0]
	*p++ = 0;
    f512:	str	r2, [r3, #4]
	*p++ = 0;
    f514:	str	r2, [r3, #8]
	*p++ = 0;
    f516:	str	r2, [r3, #12]
	*p++ = 0;
    f518:	str	r2, [r3, #16]
	*p++ = 0;
    f51a:	str	r2, [r3, #20]
	*p++ = 0;
    f51c:	str	r2, [r3, #24]
	*p++ = 0;
    f51e:	str	r2, [r3, #28]
}
    f520:	pop	{r4, r5, r6, r7}
    f522:	bx	lr
    f524:	.word	0x20006396
    f528:	.word	0x02007480
    f52c:	.word	0x400fc000
    f530:	.word	0x400e8000

0000f534 <DMAChannel::release()>:

void DMAChannel::release(void)
{
	if (channel >= DMA_MAX_CHANNELS) return;
    f534:	ldrb	r3, [r0, #4]
    f536:	cmp	r3, #15
    f538:	bhi.n	f55c <DMAChannel::release()+0x28>
	DMA_CERQ = channel;
    f53a:	ldr	r2, [pc, #36]	; (f560 <DMAChannel::release()+0x2c>)
    f53c:	strb	r3, [r2, #26]
	__disable_irq();
    f53e:	cpsid	i
	dma_channel_allocated_mask &= ~(1 << channel);
    f540:	ldr	r1, [pc, #32]	; (f564 <DMAChannel::release()+0x30>)
    f542:	movs	r3, #1
    f544:	ldrb	r2, [r0, #4]
    f546:	lsl.w	r2, r3, r2
    f54a:	ldrh	r3, [r1, #0]
    f54c:	bic.w	r3, r3, r2
    f550:	strh	r3, [r1, #0]
	__enable_irq();
    f552:	cpsie	i
	channel = DMA_MAX_CHANNELS;
    f554:	movs	r2, #16
	TCD = (TCD_t *)0;
    f556:	movs	r3, #0
	if (channel >= DMA_MAX_CHANNELS) return;
	DMA_CERQ = channel;
	__disable_irq();
	dma_channel_allocated_mask &= ~(1 << channel);
	__enable_irq();
	channel = DMA_MAX_CHANNELS;
    f558:	strb	r2, [r0, #4]
	TCD = (TCD_t *)0;
    f55a:	str	r3, [r0, #0]
    f55c:	bx	lr
    f55e:	nop
    f560:	.word	0x400e8000
    f564:	.word	0x20006396

0000f568 <usb_serial_class::clear()>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
    f568:	b.w	d714 <usb_serial_flush_input>

0000f56c <usb_serial_class::peek()>:
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
    f56c:	b.w	d6c4 <usb_serial_peekchar>

0000f570 <usb_serial_class::read()>:
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
    f570:	b.w	d788 <usb_serial_getchar>

0000f574 <usb_serial_class::available()>:
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    f574:	b.w	d708 <usb_serial_available>

0000f578 <usb_serial_class::flush()>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
    f578:	b.w	d838 <usb_serial_flush_output>

0000f57c <usb_serial_class::availableForWrite()>:
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
	size_t write(unsigned long n) { return write((uint8_t)n); }
	size_t write(long n) { return write((uint8_t)n); }
	size_t write(unsigned int n) { return write((uint8_t)n); }
	size_t write(int n) { return write((uint8_t)n); }
	virtual int availableForWrite() { return usb_serial_write_buffer_free(); }
    f57c:	b.w	d7ec <usb_serial_write_buffer_free>

0000f580 <usb_serial_class::write(unsigned char const*, unsigned int)>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    f580:	mov	r0, r1
    f582:	mov	r1, r2
    f584:	b.w	d7d4 <usb_serial_write>

0000f588 <usb_serial_class::write(unsigned char)>:
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    f588:	mov	r0, r1
    f58a:	b.w	d7a8 <usb_serial_putchar>
    f58e:	nop

0000f590 <Print::write(unsigned char const*, unsigned int)>:

#include "debug/printf.h"
#undef printf

size_t Print::write(const uint8_t *buffer, size_t size)
{
    f590:	push	{r3, r4, r5, r6, r7, lr}
	if (buffer == nullptr) return 0;
    f592:	mov	r6, r1
    f594:	cbz	r1, f5b4 <Print::write(unsigned char const*, unsigned int)+0x24>
	size_t count = 0;
	while (size--) count += write(*buffer++);
    f596:	cbz	r2, f5b8 <Print::write(unsigned char const*, unsigned int)+0x28>
    f598:	mov	r7, r0
    f59a:	mov	r4, r2
    f59c:	movs	r5, #0
    f59e:	ldr	r3, [r7, #0]
    f5a0:	mov	r0, r7
    f5a2:	ldrb.w	r1, [r6], #1
    f5a6:	ldr	r3, [r3, #0]
    f5a8:	blx	r3
    f5aa:	subs	r4, #1
    f5ac:	add	r5, r0
    f5ae:	bne.n	f59e <Print::write(unsigned char const*, unsigned int)+0xe>
    f5b0:	mov	r0, r5
    f5b2:	pop	{r3, r4, r5, r6, r7, pc}
#include "debug/printf.h"
#undef printf

size_t Print::write(const uint8_t *buffer, size_t size)
{
	if (buffer == nullptr) return 0;
    f5b4:	mov	r0, r1
    f5b6:	pop	{r3, r4, r5, r6, r7, pc}
    f5b8:	mov	r0, r2
	size_t count = 0;
	while (size--) count += write(*buffer++);
	return count;
}
    f5ba:	pop	{r3, r4, r5, r6, r7, pc}

0000f5bc <Print::println()>:
	if (n < 0) return printNumber64(-n, 10, 1);
	return printNumber64(n, 10, 0);
}

size_t Print::println(void)
{
    f5bc:	push	{r4, lr}
	uint8_t buf[2]={'\r', '\n'};
    f5be:	ldr	r4, [pc, #24]	; (f5d8 <Print::println()+0x1c>)
	if (n < 0) return printNumber64(-n, 10, 1);
	return printNumber64(n, 10, 0);
}

size_t Print::println(void)
{
    f5c0:	sub	sp, #8
	uint8_t buf[2]={'\r', '\n'};
	return write(buf, 2);
    f5c2:	ldr	r3, [r0, #0]
    f5c4:	movs	r2, #2
	return printNumber64(n, 10, 0);
}

size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    f5c6:	ldrh	r4, [r4, #0]
	return write(buf, 2);
    f5c8:	add	r1, sp, #4
    f5ca:	ldr	r3, [r3, #4]
	return printNumber64(n, 10, 0);
}

size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    f5cc:	strh.w	r4, [sp, #4]
	return write(buf, 2);
    f5d0:	blx	r3
}
    f5d2:	add	sp, #8
    f5d4:	pop	{r4, pc}
    f5d6:	nop
    f5d8:	.word	0x20000918

0000f5dc <_write>:

extern "C" {
__attribute__((weak))
int _write(int file, char *ptr, int len)
{
	((class Print *)file)->write((uint8_t *)ptr, len);
    f5dc:	ldr	r3, [r0, #0]
}

extern "C" {
__attribute__((weak))
int _write(int file, char *ptr, int len)
{
    f5de:	push	{r4, lr}
    f5e0:	mov	r4, r2
	((class Print *)file)->write((uint8_t *)ptr, len);
    f5e2:	ldr	r3, [r3, #4]
    f5e4:	blx	r3
	return len;
}
    f5e6:	mov	r0, r4
    f5e8:	pop	{r4, pc}
    f5ea:	nop

0000f5ec <Print::printf(char const*, ...)>:
}

int Print::printf(const char *format, ...)
{
    f5ec:	push	{r1, r2, r3}
    f5ee:	push	{lr}
    f5f0:	sub	sp, #8
    f5f2:	add	r3, sp, #12
    f5f4:	ldr.w	r1, [r3], #4
	va_list ap;
	va_start(ap, format);
#ifdef __STRICT_ANSI__
	return 0;  // TODO: make this work with -std=c++0x
#else
	return vdprintf((int)this, format, ap);
    f5f8:	mov	r2, r3
}

int Print::printf(const char *format, ...)
{
	va_list ap;
	va_start(ap, format);
    f5fa:	str	r3, [sp, #4]
#ifdef __STRICT_ANSI__
	return 0;  // TODO: make this work with -std=c++0x
#else
	return vdprintf((int)this, format, ap);
    f5fc:	bl	12c70 <vdprintf>
#endif
}
    f600:	add	sp, #8
    f602:	ldr.w	lr, [sp], #4
    f606:	add	sp, #12
    f608:	bx	lr
    f60a:	nop

0000f60c <Print::printNumber64(unsigned long long, unsigned char, unsigned char)>:
	}
	return write(buf + i, sizeof(buf) - i);
}

size_t Print::printNumber64(uint64_t n, uint8_t base, uint8_t sign)
{
    f60c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    f610:	sub	sp, #72	; 0x48
    f612:	ldrb.w	r6, [sp, #104]	; 0x68
    f616:	ldrb.w	sl, [sp, #108]	; 0x6c
	uint8_t buf[66];
	uint8_t digit, i;

	if (base < 2) return 0;
    f61a:	cmp	r6, #1
    f61c:	bls.n	f6c0 <Print::printNumber64(unsigned long long, unsigned char, unsigned char)+0xb4>
    f61e:	mov	r4, r2
    f620:	mov	r5, r3
    f622:	mov	r9, r0
	if (n == 0) {
    f624:	orrs.w	r3, r4, r5
    f628:	beq.n	f6b4 <Print::printNumber64(unsigned long long, unsigned char, unsigned char)+0xa8>
    f62a:	uxtb	r6, r6
    f62c:	movs	r7, #0
    f62e:	mov.w	r8, #65	; 0x41
    f632:	b.n	f638 <Print::printNumber64(unsigned long long, unsigned char, unsigned char)+0x2c>
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
			n /= base;
			if (n == 0) break;
			i--;
    f634:	uxtb.w	r8, r3
		buf[sizeof(buf) - 1] = '0';
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
    f638:	mov	r0, r4
    f63a:	mov	r1, r5
    f63c:	mov	r2, r6
    f63e:	mov	r3, r7
    f640:	bl	1024c <__aeabi_uldivmod>
    f644:	mov	r1, r3
    f646:	uxtb	r3, r2
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
			n /= base;
    f648:	mov	r0, r4
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    f64a:	cmp	r1, #0
    f64c:	add	r4, sp, #72	; 0x48
    f64e:	add.w	lr, r3, #55	; 0x37
    f652:	add.w	r3, r3, #48	; 0x30
    f656:	it	eq
    f658:	cmpeq	r2, #10
    f65a:	add	r4, r8
			n /= base;
    f65c:	mov	r1, r5
    f65e:	mov	r2, r6
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    f660:	it	cc
    f662:	uxtbcc.w	lr, r3
			n /= base;
    f666:	mov	r3, r7
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    f668:	it	cs
    f66a:	uxtbcs.w	lr, lr
    f66e:	strb.w	lr, [r4, #-68]
			n /= base;
    f672:	bl	1024c <__aeabi_uldivmod>
    f676:	mov	r4, r0
    f678:	mov	r5, r1
			if (n == 0) break;
			i--;
    f67a:	add.w	r3, r8, #4294967295
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
			n /= base;
			if (n == 0) break;
    f67e:	orrs.w	r2, r4, r5
    f682:	bne.n	f634 <Print::printNumber64(unsigned long long, unsigned char, unsigned char)+0x28>
			i--;
		}
	}
	if (sign) {
    f684:	cmp.w	sl, #0
    f688:	beq.n	f69c <Print::printNumber64(unsigned long long, unsigned char, unsigned char)+0x90>
		i--;
    f68a:	add.w	r8, r8, #4294967295
		buf[i] = '-';
    f68e:	add	r3, sp, #72	; 0x48
    f690:	movs	r2, #45	; 0x2d
			if (n == 0) break;
			i--;
		}
	}
	if (sign) {
		i--;
    f692:	uxtb.w	r8, r8
		buf[i] = '-';
    f696:	add	r3, r8
    f698:	strb.w	r2, [r3, #-68]
	}
	return write(buf + i, sizeof(buf) - i);
    f69c:	ldr.w	r3, [r9]
    f6a0:	add	r1, sp, #4
    f6a2:	rsb	r2, r8, #66	; 0x42
    f6a6:	mov	r0, r9
    f6a8:	add	r1, r8
    f6aa:	ldr	r3, [r3, #4]
    f6ac:	blx	r3
}
    f6ae:	add	sp, #72	; 0x48
    f6b0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	uint8_t buf[66];
	uint8_t digit, i;

	if (base < 2) return 0;
	if (n == 0) {
		buf[sizeof(buf) - 1] = '0';
    f6b4:	movs	r3, #48	; 0x30
		i = sizeof(buf) - 1;
    f6b6:	mov.w	r8, #65	; 0x41
	uint8_t buf[66];
	uint8_t digit, i;

	if (base < 2) return 0;
	if (n == 0) {
		buf[sizeof(buf) - 1] = '0';
    f6ba:	strb.w	r3, [sp, #69]	; 0x45
    f6be:	b.n	f684 <Print::printNumber64(unsigned long long, unsigned char, unsigned char)+0x78>
size_t Print::printNumber64(uint64_t n, uint8_t base, uint8_t sign)
{
	uint8_t buf[66];
	uint8_t digit, i;

	if (base < 2) return 0;
    f6c0:	movs	r0, #0
	if (sign) {
		i--;
		buf[i] = '-';
	}
	return write(buf + i, sizeof(buf) - i);
}
    f6c2:	add	sp, #72	; 0x48
    f6c4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0000f6c8 <main>:
 */

#include <Arduino.h>

extern "C" int main(void)
{
    f6c8:	push	{r3, lr}
	}


#else
	// Arduino's main() function just calls setup() and loop()....
	setup();
    f6ca:	bl	10dc <setup>
	while (1) {
		loop();
    f6ce:	bl	178c <loop>
		yield();
    f6d2:	bl	f2bc <yield>
    f6d6:	b.n	f6ce <main+0x6>

0000f6d8 <serialEvent()>:

#include <Arduino.h>
void serialEvent() __attribute__((weak));
void serialEvent() {
    f6d8:	bx	lr
    f6da:	nop

0000f6dc <operator new(unsigned int)>:
    f6dc:	b.w	105f0 <malloc>

0000f6e0 <operator delete(void*, unsigned int)>:
    f6e0:	b.w	10600 <free>

0000f6e4 <sm_malloc_pool>:
 */

#include "smalloc_i.h"

void *sm_malloc_pool(struct smalloc_pool *spool, size_t n)
{
    f6e4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f6e8:	mov	r5, r0
    f6ea:	sub	sp, #12
    f6ec:	mov	r8, r1
	struct smalloc_hdr *basehdr, *shdr, *dhdr;
	char *s;
	int found;
	size_t x;

again:	if (!smalloc_verify_pool(spool)) {
    f6ee:	mov	r0, r5
    f6f0:	bl	eac0 <smalloc_verify_pool>
    f6f4:	mov	r4, r0
    f6f6:	cmp	r0, #0
    f6f8:	beq.w	f802 <sm_malloc_pool+0x11e>
		errno = EINVAL;
		return NULL;
	}

	if (n == 0) n++; /* return a block successfully */
    f6fc:	cmp.w	r8, #0
	if (n > SIZE_MAX
	|| n > (spool->pool_size - HEADER_SZ)) goto oom;
    f700:	ldr	r3, [r5, #4]
again:	if (!smalloc_verify_pool(spool)) {
		errno = EINVAL;
		return NULL;
	}

	if (n == 0) n++; /* return a block successfully */
    f702:	it	eq
    f704:	moveq.w	r8, #1
	if (n > SIZE_MAX
    f708:	sub.w	r2, r3, #12
    f70c:	cmp	r8, r2
    f70e:	bhi.n	f74c <sm_malloc_pool+0x68>
	|| n > (spool->pool_size - HEADER_SZ)) goto oom;

	shdr = basehdr = spool->pool;
    f710:	ldr	r4, [r5, #0]
    f712:	movs	r6, #0
				/*
				 * did not see allocated block yet,
				 * but this free block is of enough size
				 * - finally, use it.
				 */
				if (n + HEADER_SZ <= x) {
    f714:	add.w	r9, r8, #12
    f718:	mov	r7, r4
	if (n == 0) n++; /* return a block successfully */
	if (n > SIZE_MAX
	|| n > (spool->pool_size - HEADER_SZ)) goto oom;

	shdr = basehdr = spool->pool;
	while (CHAR_PTR(shdr)-CHAR_PTR(basehdr) < spool->pool_size) {
    f71a:	cmp	r3, r6
    f71c:	bls.n	f74c <sm_malloc_pool+0x68>
		/*
		 * Already allocated block.
		 * Skip it by jumping over it.
		 */
		if (smalloc_is_alloc(spool, shdr)) {
    f71e:	mov	r1, r4
    f720:	mov	r0, r5
    f722:	bl	f874 <smalloc_is_alloc>
    f726:	cbnz	r0, f77a <sm_malloc_pool+0x96>
		 * Do a second search over them to find out if they're
		 * really large enough to fit the new allocation.
		 */
		else {
			dhdr = shdr; found = 0;
			while (CHAR_PTR(dhdr)-CHAR_PTR(basehdr) < spool->pool_size) {
    f728:	ldr	r3, [r5, #4]
    f72a:	cmp	r6, r3
    f72c:	bcs.n	f71a <sm_malloc_pool+0x36>
    f72e:	mov	sl, r4
    f730:	mov	r6, r4
				x = CHAR_PTR(dhdr)-CHAR_PTR(shdr);
				/*
				 * ugh, found next allocated block.
				 * skip this candidate then.
				 */
				if (smalloc_is_alloc(spool, dhdr))
    f732:	mov	r1, r6
    f734:	mov	r0, r5
    f736:	bl	f874 <smalloc_is_alloc>
		 */
		else {
			dhdr = shdr; found = 0;
			while (CHAR_PTR(dhdr)-CHAR_PTR(basehdr) < spool->pool_size) {
				/* pre calculate free block size */
				x = CHAR_PTR(dhdr)-CHAR_PTR(shdr);
    f73a:	rsb	r3, r4, sl
				/*
				 * ugh, found next allocated block.
				 * skip this candidate then.
				 */
				if (smalloc_is_alloc(spool, dhdr))
    f73e:	mov	fp, r0
    f740:	cbz	r0, f786 <sm_malloc_pool+0xa2>
    f742:	mov	r4, r6
    f744:	ldr	r3, [r5, #4]
    f746:	subs	r6, r6, r7
	if (n == 0) n++; /* return a block successfully */
	if (n > SIZE_MAX
	|| n > (spool->pool_size - HEADER_SZ)) goto oom;

	shdr = basehdr = spool->pool;
	while (CHAR_PTR(shdr)-CHAR_PTR(basehdr) < spool->pool_size) {
    f748:	cmp	r3, r6
    f74a:	bhi.n	f71e <sm_malloc_pool+0x3a>
		}

		shdr++;
	}

oom:	if (spool->oomfn) {
    f74c:	ldr	r3, [r5, #12]
    f74e:	cbz	r3, f768 <sm_malloc_pool+0x84>
		x = spool->oomfn(spool, n);
    f750:	mov	r1, r8
    f752:	mov	r0, r5
    f754:	blx	r3
		if (x > spool->pool_size) {
    f756:	ldr	r3, [r5, #4]
    f758:	cmp	r0, r3
    f75a:	bls.n	f768 <sm_malloc_pool+0x84>
			spool->pool_size = x;
    f75c:	str	r0, [r5, #4]
			if (sm_align_pool(spool)) goto again;
    f75e:	mov	r0, r5
    f760:	bl	eae8 <sm_align_pool>
    f764:	cmp	r0, #0
    f766:	bne.n	f6ee <sm_malloc_pool+0xa>
		}
	}

	errno = ENOMEM;
    f768:	bl	10594 <__errno>
	return NULL;
    f76c:	movs	r4, #0
			spool->pool_size = x;
			if (sm_align_pool(spool)) goto again;
		}
	}

	errno = ENOMEM;
    f76e:	movs	r3, #12
    f770:	str	r3, [r0, #0]
	return NULL;
}
    f772:	mov	r0, r4
    f774:	add	sp, #12
    f776:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f77a:	ldr	r2, [r4, #0]
    f77c:	ldr	r3, [r5, #4]
    f77e:	adds	r2, #24
		 * Already allocated block.
		 * Skip it by jumping over it.
		 */
		if (smalloc_is_alloc(spool, shdr)) {
			s = CHAR_PTR(HEADER_TO_USER(shdr));
			s += shdr->rsz + HEADER_SZ;
    f780:	add	r4, r2
    f782:	subs	r6, r4, r7
			shdr = HEADER_PTR(s);
			continue;
    f784:	b.n	f71a <sm_malloc_pool+0x36>
				if (n + HEADER_SZ <= x) {
					x -= HEADER_SZ;
					found = 1;
					goto outfound;
				}
				dhdr++;
    f786:	adds	r6, #12
				/*
				 * did not see allocated block yet,
				 * but this free block is of enough size
				 * - finally, use it.
				 */
				if (n + HEADER_SZ <= x) {
    f788:	cmp	r3, r9
		 * Do a second search over them to find out if they're
		 * really large enough to fit the new allocation.
		 */
		else {
			dhdr = shdr; found = 0;
			while (CHAR_PTR(dhdr)-CHAR_PTR(basehdr) < spool->pool_size) {
    f78a:	sub.w	r2, r6, r7
    f78e:	mov	sl, r6
				/*
				 * did not see allocated block yet,
				 * but this free block is of enough size
				 * - finally, use it.
				 */
				if (n + HEADER_SZ <= x) {
    f790:	bcs.n	f79e <sm_malloc_pool+0xba>
		 * Do a second search over them to find out if they're
		 * really large enough to fit the new allocation.
		 */
		else {
			dhdr = shdr; found = 0;
			while (CHAR_PTR(dhdr)-CHAR_PTR(basehdr) < spool->pool_size) {
    f792:	ldr	r3, [r5, #4]
    f794:	cmp	r2, r3
    f796:	bcc.n	f732 <sm_malloc_pool+0x4e>
				if (n + HEADER_SZ <= x) {
					x -= HEADER_SZ;
					found = 1;
					goto outfound;
				}
				dhdr++;
    f798:	mov	r4, r6
    f79a:	mov	r6, r2
    f79c:	b.n	f71a <sm_malloc_pool+0x36>
			}

outfound:		if (found) {
				uintptr_t tag;
				/* allocate and return this block */
				shdr->rsz = x;
    f79e:	subs	r3, #12
				shdr->usz = n;
    f7a0:	str.w	r8, [r4, #4]
				shdr->tag = tag = smalloc_mktag(shdr);
    f7a4:	mov	r0, r4
			}

outfound:		if (found) {
				uintptr_t tag;
				/* allocate and return this block */
				shdr->rsz = x;
    f7a6:	str	r3, [r4, #0]
				shdr->usz = n;
				shdr->tag = tag = smalloc_mktag(shdr);
    f7a8:	bl	f858 <smalloc_mktag>
				if (spool->do_zero) memset(HEADER_TO_USER(shdr), 0, shdr->rsz);
    f7ac:	ldr	r3, [r5, #8]
outfound:		if (found) {
				uintptr_t tag;
				/* allocate and return this block */
				shdr->rsz = x;
				shdr->usz = n;
				shdr->tag = tag = smalloc_mktag(shdr);
    f7ae:	mov	r7, r0
    f7b0:	str	r0, [sp, #4]
    f7b2:	str	r0, [r4, #8]
				if (spool->do_zero) memset(HEADER_TO_USER(shdr), 0, shdr->rsz);
    f7b4:	cbnz	r3, f7f2 <sm_malloc_pool+0x10e>
    f7b6:	add.w	r5, r4, #12
				s = CHAR_PTR(HEADER_TO_USER(shdr));
				s += shdr->usz;
    f7ba:	ldr	r3, [r4, #4]
    f7bc:	adds	r3, #12
    f7be:	adds	r6, r4, r3
    f7c0:	add.w	r8, r6, #12
				for (x = 0;
				x < sizeof(struct smalloc_hdr);
				x += sizeof(uintptr_t)) {
					tag = smalloc_uinthash(tag);
    f7c4:	mov	r0, r7
    f7c6:	bl	f814 <smalloc_uinthash>
    f7ca:	str	r0, [sp, #4]
					memcpy(s+x, &tag, sizeof(uintptr_t));
    f7cc:	ldr	r0, [sp, #4]
    f7ce:	str.w	r0, [r6], #4
				shdr->usz = n;
				shdr->tag = tag = smalloc_mktag(shdr);
				if (spool->do_zero) memset(HEADER_TO_USER(shdr), 0, shdr->rsz);
				s = CHAR_PTR(HEADER_TO_USER(shdr));
				s += shdr->usz;
				for (x = 0;
    f7d2:	cmp	r6, r8
    f7d4:	beq.n	f7da <sm_malloc_pool+0xf6>
    f7d6:	ldr	r7, [sp, #4]
    f7d8:	b.n	f7c4 <sm_malloc_pool+0xe0>
				x < sizeof(struct smalloc_hdr);
				x += sizeof(uintptr_t)) {
					tag = smalloc_uinthash(tag);
					memcpy(s+x, &tag, sizeof(uintptr_t));
				}
				memset(s+x, 0xff, shdr->rsz - shdr->usz);
    f7da:	ldr	r3, [r4, #4]
    f7dc:	mov	r0, r6
    f7de:	ldr	r2, [r4, #0]
				return HEADER_TO_USER(shdr);
    f7e0:	mov	r4, r5
				x < sizeof(struct smalloc_hdr);
				x += sizeof(uintptr_t)) {
					tag = smalloc_uinthash(tag);
					memcpy(s+x, &tag, sizeof(uintptr_t));
				}
				memset(s+x, 0xff, shdr->rsz - shdr->usz);
    f7e2:	movs	r1, #255	; 0xff
    f7e4:	subs	r2, r2, r3
    f7e6:	bl	10d7c <memset>
		}
	}

	errno = ENOMEM;
	return NULL;
}
    f7ea:	mov	r0, r4
    f7ec:	add	sp, #12
    f7ee:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				uintptr_t tag;
				/* allocate and return this block */
				shdr->rsz = x;
				shdr->usz = n;
				shdr->tag = tag = smalloc_mktag(shdr);
				if (spool->do_zero) memset(HEADER_TO_USER(shdr), 0, shdr->rsz);
    f7f2:	add.w	r0, r4, #12
    f7f6:	mov	r1, fp
    f7f8:	ldr	r2, [r4, #0]
    f7fa:	mov	r5, r0
    f7fc:	bl	10d7c <memset>
    f800:	b.n	f7ba <sm_malloc_pool+0xd6>
	char *s;
	int found;
	size_t x;

again:	if (!smalloc_verify_pool(spool)) {
		errno = EINVAL;
    f802:	bl	10594 <__errno>
    f806:	movs	r3, #22
    f808:	str	r3, [r0, #0]
		}
	}

	errno = ENOMEM;
	return NULL;
}
    f80a:	mov	r0, r4
    f80c:	add	sp, #12
    f80e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f812:	nop

0000f814 <smalloc_uinthash>:
	} while (0)
uintptr_t smalloc_uinthash(uintptr_t x)
{
	uintptr_t hash = 0;

	UIHOP(x, 0);
    f814:	lsls	r1, r0, #10
	UIHOP(x, 8);
    f816:	ubfx	r2, r0, #8, #8
	UIHOP(x, 16);
    f81a:	ubfx	r3, r0, #16, #8
	} while (0)
uintptr_t smalloc_uinthash(uintptr_t x)
{
	uintptr_t hash = 0;

	UIHOP(x, 0);
    f81e:	and.w	r1, r1, #261120	; 0x3fc00
    f822:	uxtab	r1, r1, r0
    f826:	eor.w	r1, r1, r1, lsr #6
	UIHOP(x, 8);
    f82a:	add	r2, r1
    f82c:	add.w	r2, r2, r2, lsl #10
    f830:	eor.w	r2, r2, r2, lsr #6
	UIHOP(x, 16);
    f834:	add	r3, r2
    f836:	add.w	r3, r3, r3, lsl #10
    f83a:	eor.w	r3, r3, r3, lsr #6
	UIHOP(x, 24);
    f83e:	add.w	r0, r3, r0, lsr #24
    f842:	add.w	r0, r0, r0, lsl #10
    f846:	eor.w	r0, r0, r0, lsr #6

	hash += hash << 3;
    f84a:	add.w	r0, r0, r0, lsl #3
	hash ^= hash >> 11;
    f84e:	eor.w	r0, r0, r0, lsr #11
	hash += hash << 15;

	return hash;
}
    f852:	add.w	r0, r0, r0, lsl #15
    f856:	bx	lr

0000f858 <smalloc_mktag>:
#undef UIHOP

uintptr_t smalloc_mktag(struct smalloc_hdr *shdr)
{
    f858:	push	{r4, lr}
    f85a:	mov	r4, r0
	uintptr_t r = smalloc_uinthash(PTR_UINT(shdr));
    f85c:	bl	f814 <smalloc_uinthash>
	r += shdr->rsz;
    f860:	ldr	r3, [r4, #0]
	r = smalloc_uinthash(r);
    f862:	add	r0, r3
    f864:	bl	f814 <smalloc_uinthash>
	r += shdr->usz;
    f868:	ldr	r3, [r4, #4]
	r = smalloc_uinthash(r);
	return r;
}
    f86a:	ldmia.w	sp!, {r4, lr}
{
	uintptr_t r = smalloc_uinthash(PTR_UINT(shdr));
	r += shdr->rsz;
	r = smalloc_uinthash(r);
	r += shdr->usz;
	r = smalloc_uinthash(r);
    f86e:	add	r0, r3
    f870:	b.w	f814 <smalloc_uinthash>

0000f874 <smalloc_is_alloc>:

#include "smalloc_i.h"

static int smalloc_check_bounds(struct smalloc_pool *spool, struct smalloc_hdr *shdr)
{
	if (!spool) return 0;
    f874:	cbz	r0, f8a4 <smalloc_is_alloc+0x30>
	if (CHAR_PTR(shdr) >= CHAR_PTR(spool->pool)
    f876:	ldr	r3, [r0, #0]
    f878:	cmp	r1, r3
    f87a:	bcc.n	f8a0 <smalloc_is_alloc+0x2c>
	&& CHAR_PTR(shdr) <= (CHAR_PTR(spool->pool)+spool->pool_size))
    f87c:	ldr	r2, [r0, #4]
    f87e:	add	r3, r2
    f880:	cmp	r1, r3
    f882:	bhi.n	f8a0 <smalloc_is_alloc+0x2c>
}

int smalloc_is_alloc(struct smalloc_pool *spool, struct smalloc_hdr *shdr)
{
	if (!smalloc_check_bounds(spool, shdr)) return 0;
	if (shdr->rsz == 0) return 0;
    f884:	ldr	r0, [r1, #0]
    f886:	cbz	r0, f8a4 <smalloc_is_alloc+0x30>
	if (shdr->rsz > SIZE_MAX) return 0;
	if (shdr->usz > SIZE_MAX) return 0;
	if (shdr->usz > shdr->rsz) return 0;
    f888:	ldr	r3, [r1, #4]
    f88a:	cmp	r0, r3
    f88c:	bcc.n	f8a0 <smalloc_is_alloc+0x2c>
	if (shdr->rsz % HEADER_SZ) return 0;
    f88e:	ldr	r3, [pc, #140]	; (f91c <smalloc_is_alloc+0xa8>)
    f890:	umull	r2, r3, r3, r0
    f894:	lsrs	r3, r3, #3
    f896:	add.w	r3, r3, r3, lsl #1
    f89a:	cmp.w	r0, r3, lsl #2
    f89e:	beq.n	f8a6 <smalloc_is_alloc+0x32>
	else smalloc_UB = handler;
}

int smalloc_is_alloc(struct smalloc_pool *spool, struct smalloc_hdr *shdr)
{
	if (!smalloc_check_bounds(spool, shdr)) return 0;
    f8a0:	movs	r0, #0
    f8a2:	bx	lr
	if (shdr->usz > SIZE_MAX) return 0;
	if (shdr->usz > shdr->rsz) return 0;
	if (shdr->rsz % HEADER_SZ) return 0;
	if (!smalloc_valid_tag(shdr)) return 0;
	return 1;
}
    f8a4:	bx	lr
	if (!handler) smalloc_UB = smalloc_do_crash;
	else smalloc_UB = handler;
}

int smalloc_is_alloc(struct smalloc_pool *spool, struct smalloc_hdr *shdr)
{
    f8a6:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f8aa:	mov	r4, r1
    f8ac:	sub	sp, #8
}

static int smalloc_valid_tag(struct smalloc_hdr *shdr)
{
	char *s;
	uintptr_t r = smalloc_mktag(shdr);
    f8ae:	mov	r0, r1
    f8b0:	bl	f858 <smalloc_mktag>
	size_t x;

	if (shdr->tag == r) {
    f8b4:	ldr	r3, [r4, #8]
}

static int smalloc_valid_tag(struct smalloc_hdr *shdr)
{
	char *s;
	uintptr_t r = smalloc_mktag(shdr);
    f8b6:	mov	r6, r0
    f8b8:	str	r0, [sp, #4]
	size_t x;

	if (shdr->tag == r) {
    f8ba:	cmp	r0, r3
    f8bc:	beq.n	f8c6 <smalloc_is_alloc+0x52>
	if (shdr->rsz == 0) return 0;
	if (shdr->rsz > SIZE_MAX) return 0;
	if (shdr->usz > SIZE_MAX) return 0;
	if (shdr->usz > shdr->rsz) return 0;
	if (shdr->rsz % HEADER_SZ) return 0;
	if (!smalloc_valid_tag(shdr)) return 0;
    f8be:	movs	r0, #0
	return 1;
}
    f8c0:	add	sp, #8
    f8c2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uintptr_t r = smalloc_mktag(shdr);
	size_t x;

	if (shdr->tag == r) {
		s = CHAR_PTR(HEADER_TO_USER(shdr));
		s += shdr->usz;
    f8c6:	ldr	r2, [r4, #4]
    f8c8:	adds	r2, #12
    f8ca:	add.w	r8, r4, r2
    f8ce:	mov	r7, r8
    f8d0:	add.w	r5, r8, #12
		for (x = 0; x < sizeof(struct smalloc_hdr); x += sizeof(uintptr_t)) {
			r = smalloc_uinthash(r);
    f8d4:	mov	r0, r6
    f8d6:	bl	f814 <smalloc_uinthash>
			if (memcmp(s+x, &r, sizeof(uintptr_t)) != 0) return 0;
    f8da:	movs	r2, #4

	if (shdr->tag == r) {
		s = CHAR_PTR(HEADER_TO_USER(shdr));
		s += shdr->usz;
		for (x = 0; x < sizeof(struct smalloc_hdr); x += sizeof(uintptr_t)) {
			r = smalloc_uinthash(r);
    f8dc:	mov	r6, r0
			if (memcmp(s+x, &r, sizeof(uintptr_t)) != 0) return 0;
    f8de:	mov	r0, r7
    f8e0:	add.w	r1, sp, r2
    f8e4:	add	r7, r2

	if (shdr->tag == r) {
		s = CHAR_PTR(HEADER_TO_USER(shdr));
		s += shdr->usz;
		for (x = 0; x < sizeof(struct smalloc_hdr); x += sizeof(uintptr_t)) {
			r = smalloc_uinthash(r);
    f8e6:	str	r6, [sp, #4]
			if (memcmp(s+x, &r, sizeof(uintptr_t)) != 0) return 0;
    f8e8:	bl	10c50 <memcmp>
    f8ec:	cmp	r0, #0
    f8ee:	bne.n	f8be <smalloc_is_alloc+0x4a>
	size_t x;

	if (shdr->tag == r) {
		s = CHAR_PTR(HEADER_TO_USER(shdr));
		s += shdr->usz;
		for (x = 0; x < sizeof(struct smalloc_hdr); x += sizeof(uintptr_t)) {
    f8f0:	cmp	r7, r5
    f8f2:	bne.n	f8d4 <smalloc_is_alloc+0x60>
			r = smalloc_uinthash(r);
			if (memcmp(s+x, &r, sizeof(uintptr_t)) != 0) return 0;
		}
		s += x; x = 0;
		while (x < shdr->rsz - shdr->usz) {
    f8f4:	ldr	r3, [r4, #0]
    f8f6:	ldr	r2, [r4, #4]
    f8f8:	subs	r3, r3, r2
    f8fa:	beq.n	f918 <smalloc_is_alloc+0xa4>
			if (s[x] != '\xFF') return 0;
    f8fc:	ldrb.w	r2, [r8, #12]
    f900:	cmp	r2, #255	; 0xff
    f902:	bne.n	f8be <smalloc_is_alloc+0x4a>
    f904:	adds	r3, #11
    f906:	add.w	r2, r8, r3
    f90a:	b.n	f914 <smalloc_is_alloc+0xa0>
    f90c:	ldrb.w	r3, [r5, #1]!
    f910:	cmp	r3, #255	; 0xff
    f912:	bne.n	f8be <smalloc_is_alloc+0x4a>
		for (x = 0; x < sizeof(struct smalloc_hdr); x += sizeof(uintptr_t)) {
			r = smalloc_uinthash(r);
			if (memcmp(s+x, &r, sizeof(uintptr_t)) != 0) return 0;
		}
		s += x; x = 0;
		while (x < shdr->rsz - shdr->usz) {
    f914:	cmp	r5, r2
    f916:	bne.n	f90c <smalloc_is_alloc+0x98>
	if (shdr->rsz > SIZE_MAX) return 0;
	if (shdr->usz > SIZE_MAX) return 0;
	if (shdr->usz > shdr->rsz) return 0;
	if (shdr->rsz % HEADER_SZ) return 0;
	if (!smalloc_valid_tag(shdr)) return 0;
	return 1;
    f918:	movs	r0, #1
    f91a:	b.n	f8c0 <smalloc_is_alloc+0x4c>
    f91c:	.word	0xaaaaaaab

0000f920 <__aeabi_atexit>:
    f920:	mov	r3, r1
    f922:	mov	r1, r0
    f924:	mov	r0, r3
    f926:	b.w	10564 <__cxa_atexit>
    f92a:	nop

0000f92c <__aeabi_drsub>:
    f92c:	eor.w	r1, r1, #2147483648	; 0x80000000
    f930:	b.n	f938 <__adddf3>
    f932:	nop

0000f934 <__aeabi_dsub>:
    f934:	eor.w	r3, r3, #2147483648	; 0x80000000

0000f938 <__adddf3>:
    f938:	push	{r4, r5, lr}
    f93a:	mov.w	r4, r1, lsl #1
    f93e:	mov.w	r5, r3, lsl #1
    f942:	teq	r4, r5
    f946:	it	eq
    f948:	teqeq	r0, r2
    f94c:	itttt	ne
    f94e:	orrsne.w	ip, r4, r0
    f952:	orrsne.w	ip, r5, r2
    f956:	mvnsne.w	ip, r4, asr #21
    f95a:	mvnsne.w	ip, r5, asr #21
    f95e:	beq.w	fb26 <__adddf3+0x1ee>
    f962:	mov.w	r4, r4, lsr #21
    f966:	rsbs	r5, r4, r5, lsr #21
    f96a:	it	lt
    f96c:	neglt	r5, r5
    f96e:	ble.n	f98a <__adddf3+0x52>
    f970:	add	r4, r5
    f972:	eor.w	r2, r0, r2
    f976:	eor.w	r3, r1, r3
    f97a:	eor.w	r0, r2, r0
    f97e:	eor.w	r1, r3, r1
    f982:	eor.w	r2, r0, r2
    f986:	eor.w	r3, r1, r3
    f98a:	cmp	r5, #54	; 0x36
    f98c:	it	hi
    f98e:	pophi	{r4, r5, pc}
    f990:	tst.w	r1, #2147483648	; 0x80000000
    f994:	mov.w	r1, r1, lsl #12
    f998:	mov.w	ip, #1048576	; 0x100000
    f99c:	orr.w	r1, ip, r1, lsr #12
    f9a0:	beq.n	f9a8 <__adddf3+0x70>
    f9a2:	negs	r0, r0
    f9a4:	sbc.w	r1, r1, r1, lsl #1
    f9a8:	tst.w	r3, #2147483648	; 0x80000000
    f9ac:	mov.w	r3, r3, lsl #12
    f9b0:	orr.w	r3, ip, r3, lsr #12
    f9b4:	beq.n	f9bc <__adddf3+0x84>
    f9b6:	negs	r2, r2
    f9b8:	sbc.w	r3, r3, r3, lsl #1
    f9bc:	teq	r4, r5
    f9c0:	beq.w	fb12 <__adddf3+0x1da>
    f9c4:	sub.w	r4, r4, #1
    f9c8:	rsbs	lr, r5, #32
    f9cc:	blt.n	f9ea <__adddf3+0xb2>
    f9ce:	lsl.w	ip, r2, lr
    f9d2:	lsr.w	r2, r2, r5
    f9d6:	adds	r0, r0, r2
    f9d8:	adc.w	r1, r1, #0
    f9dc:	lsl.w	r2, r3, lr
    f9e0:	adds	r0, r0, r2
    f9e2:	asr.w	r3, r3, r5
    f9e6:	adcs	r1, r3
    f9e8:	b.n	fa08 <__adddf3+0xd0>
    f9ea:	sub.w	r5, r5, #32
    f9ee:	add.w	lr, lr, #32
    f9f2:	cmp	r2, #1
    f9f4:	lsl.w	ip, r3, lr
    f9f8:	it	cs
    f9fa:	orrcs.w	ip, ip, #2
    f9fe:	asr.w	r3, r3, r5
    fa02:	adds	r0, r0, r3
    fa04:	adcs.w	r1, r1, r3, asr #31
    fa08:	and.w	r5, r1, #2147483648	; 0x80000000
    fa0c:	bpl.n	fa1e <__adddf3+0xe6>
    fa0e:	mov.w	lr, #0
    fa12:	rsbs	ip, ip, #0
    fa16:	sbcs.w	r0, lr, r0
    fa1a:	sbc.w	r1, lr, r1
    fa1e:	cmp.w	r1, #1048576	; 0x100000
    fa22:	bcc.n	fa5c <__adddf3+0x124>
    fa24:	cmp.w	r1, #2097152	; 0x200000
    fa28:	bcc.n	fa44 <__adddf3+0x10c>
    fa2a:	lsrs	r1, r1, #1
    fa2c:	movs.w	r0, r0, rrx
    fa30:	mov.w	ip, ip, rrx
    fa34:	add.w	r4, r4, #1
    fa38:	mov.w	r2, r4, lsl #21
    fa3c:	cmn.w	r2, #4194304	; 0x400000
    fa40:	bcs.w	fb78 <__adddf3+0x240>
    fa44:	cmp.w	ip, #2147483648	; 0x80000000
    fa48:	it	eq
    fa4a:	movseq.w	ip, r0, lsr #1
    fa4e:	adcs.w	r0, r0, #0
    fa52:	adc.w	r1, r1, r4, lsl #20
    fa56:	orr.w	r1, r1, r5
    fa5a:	pop	{r4, r5, pc}
    fa5c:	movs.w	ip, ip, lsl #1
    fa60:	adcs	r0, r0
    fa62:	adc.w	r1, r1, r1
    fa66:	tst.w	r1, #1048576	; 0x100000
    fa6a:	sub.w	r4, r4, #1
    fa6e:	bne.n	fa44 <__adddf3+0x10c>
    fa70:	teq	r1, #0
    fa74:	itt	eq
    fa76:	moveq	r1, r0
    fa78:	moveq	r0, #0
    fa7a:	clz	r3, r1
    fa7e:	it	eq
    fa80:	addeq	r3, #32
    fa82:	sub.w	r3, r3, #11
    fa86:	subs.w	r2, r3, #32
    fa8a:	bge.n	faa6 <__adddf3+0x16e>
    fa8c:	adds	r2, #12
    fa8e:	ble.n	faa2 <__adddf3+0x16a>
    fa90:	add.w	ip, r2, #20
    fa94:	rsb	r2, r2, #12
    fa98:	lsl.w	r0, r1, ip
    fa9c:	lsr.w	r1, r1, r2
    faa0:	b.n	fabc <__adddf3+0x184>
    faa2:	add.w	r2, r2, #20
    faa6:	it	le
    faa8:	rsble	ip, r2, #32
    faac:	lsl.w	r1, r1, r2
    fab0:	lsr.w	ip, r0, ip
    fab4:	itt	le
    fab6:	orrle.w	r1, r1, ip
    faba:	lslle	r0, r2
    fabc:	subs	r4, r4, r3
    fabe:	ittt	ge
    fac0:	addge.w	r1, r1, r4, lsl #20
    fac4:	orrge	r1, r5
    fac6:	popge	{r4, r5, pc}
    fac8:	mvn.w	r4, r4
    facc:	subs	r4, #31
    face:	bge.n	fb0a <__adddf3+0x1d2>
    fad0:	adds	r4, #12
    fad2:	bgt.n	faf2 <__adddf3+0x1ba>
    fad4:	add.w	r4, r4, #20
    fad8:	rsb	r2, r4, #32
    fadc:	lsr.w	r0, r0, r4
    fae0:	lsl.w	r3, r1, r2
    fae4:	orr.w	r0, r0, r3
    fae8:	lsr.w	r3, r1, r4
    faec:	orr.w	r1, r5, r3
    faf0:	pop	{r4, r5, pc}
    faf2:	rsb	r4, r4, #12
    faf6:	rsb	r2, r4, #32
    fafa:	lsr.w	r0, r0, r2
    fafe:	lsl.w	r3, r1, r4
    fb02:	orr.w	r0, r0, r3
    fb06:	mov	r1, r5
    fb08:	pop	{r4, r5, pc}
    fb0a:	lsr.w	r0, r1, r4
    fb0e:	mov	r1, r5
    fb10:	pop	{r4, r5, pc}
    fb12:	teq	r4, #0
    fb16:	eor.w	r3, r3, #1048576	; 0x100000
    fb1a:	itte	eq
    fb1c:	eoreq.w	r1, r1, #1048576	; 0x100000
    fb20:	addeq	r4, #1
    fb22:	subne	r5, #1
    fb24:	b.n	f9c4 <__adddf3+0x8c>
    fb26:	mvns.w	ip, r4, asr #21
    fb2a:	it	ne
    fb2c:	mvnsne.w	ip, r5, asr #21
    fb30:	beq.n	fb86 <__adddf3+0x24e>
    fb32:	teq	r4, r5
    fb36:	it	eq
    fb38:	teqeq	r0, r2
    fb3c:	beq.n	fb4a <__adddf3+0x212>
    fb3e:	orrs.w	ip, r4, r0
    fb42:	itt	eq
    fb44:	moveq	r1, r3
    fb46:	moveq	r0, r2
    fb48:	pop	{r4, r5, pc}
    fb4a:	teq	r1, r3
    fb4e:	ittt	ne
    fb50:	movne	r1, #0
    fb52:	movne	r0, #0
    fb54:	popne	{r4, r5, pc}
    fb56:	movs.w	ip, r4, lsr #21
    fb5a:	bne.n	fb68 <__adddf3+0x230>
    fb5c:	lsls	r0, r0, #1
    fb5e:	adcs	r1, r1
    fb60:	it	cs
    fb62:	orrcs.w	r1, r1, #2147483648	; 0x80000000
    fb66:	pop	{r4, r5, pc}
    fb68:	adds.w	r4, r4, #4194304	; 0x400000
    fb6c:	itt	cc
    fb6e:	addcc.w	r1, r1, #1048576	; 0x100000
    fb72:	popcc	{r4, r5, pc}
    fb74:	and.w	r5, r1, #2147483648	; 0x80000000
    fb78:	orr.w	r1, r5, #2130706432	; 0x7f000000
    fb7c:	orr.w	r1, r1, #15728640	; 0xf00000
    fb80:	mov.w	r0, #0
    fb84:	pop	{r4, r5, pc}
    fb86:	mvns.w	ip, r4, asr #21
    fb8a:	itte	ne
    fb8c:	movne	r1, r3
    fb8e:	movne	r0, r2
    fb90:	mvnseq.w	ip, r5, asr #21
    fb94:	itt	ne
    fb96:	movne	r3, r1
    fb98:	movne	r2, r0
    fb9a:	orrs.w	r4, r0, r1, lsl #12
    fb9e:	itte	eq
    fba0:	orrseq.w	r5, r2, r3, lsl #12
    fba4:	teqeq	r1, r3
    fba8:	orrne.w	r1, r1, #524288	; 0x80000
    fbac:	pop	{r4, r5, pc}
    fbae:	nop

0000fbb0 <__aeabi_ui2d>:
    fbb0:	teq	r0, #0
    fbb4:	itt	eq
    fbb6:	moveq	r1, #0
    fbb8:	bxeq	lr
    fbba:	push	{r4, r5, lr}
    fbbc:	mov.w	r4, #1024	; 0x400
    fbc0:	add.w	r4, r4, #50	; 0x32
    fbc4:	mov.w	r5, #0
    fbc8:	mov.w	r1, #0
    fbcc:	b.n	fa70 <__adddf3+0x138>
    fbce:	nop

0000fbd0 <__aeabi_i2d>:
    fbd0:	teq	r0, #0
    fbd4:	itt	eq
    fbd6:	moveq	r1, #0
    fbd8:	bxeq	lr
    fbda:	push	{r4, r5, lr}
    fbdc:	mov.w	r4, #1024	; 0x400
    fbe0:	add.w	r4, r4, #50	; 0x32
    fbe4:	ands.w	r5, r0, #2147483648	; 0x80000000
    fbe8:	it	mi
    fbea:	negmi	r0, r0
    fbec:	mov.w	r1, #0
    fbf0:	b.n	fa70 <__adddf3+0x138>
    fbf2:	nop

0000fbf4 <__aeabi_f2d>:
    fbf4:	lsls	r2, r0, #1
    fbf6:	mov.w	r1, r2, asr #3
    fbfa:	mov.w	r1, r1, rrx
    fbfe:	mov.w	r0, r2, lsl #28
    fc02:	itttt	ne
    fc04:	andsne.w	r3, r2, #4278190080	; 0xff000000
    fc08:	teqne	r3, #4278190080	; 0xff000000
    fc0c:	eorne.w	r1, r1, #939524096	; 0x38000000
    fc10:	bxne	lr
    fc12:	teq	r2, #0
    fc16:	ite	ne
    fc18:	teqne	r3, #4278190080	; 0xff000000
    fc1c:	bxeq	lr
    fc1e:	push	{r4, r5, lr}
    fc20:	mov.w	r4, #896	; 0x380
    fc24:	and.w	r5, r1, #2147483648	; 0x80000000
    fc28:	bic.w	r1, r1, #2147483648	; 0x80000000
    fc2c:	b.n	fa70 <__adddf3+0x138>
    fc2e:	nop

0000fc30 <__aeabi_ul2d>:
    fc30:	orrs.w	r2, r0, r1
    fc34:	it	eq
    fc36:	bxeq	lr
    fc38:	push	{r4, r5, lr}
    fc3a:	mov.w	r5, #0
    fc3e:	b.n	fc56 <__aeabi_l2d+0x16>

0000fc40 <__aeabi_l2d>:
    fc40:	orrs.w	r2, r0, r1
    fc44:	it	eq
    fc46:	bxeq	lr
    fc48:	push	{r4, r5, lr}
    fc4a:	ands.w	r5, r1, #2147483648	; 0x80000000
    fc4e:	bpl.n	fc56 <__aeabi_l2d+0x16>
    fc50:	negs	r0, r0
    fc52:	sbc.w	r1, r1, r1, lsl #1
    fc56:	mov.w	r4, #1024	; 0x400
    fc5a:	add.w	r4, r4, #50	; 0x32
    fc5e:	movs.w	ip, r1, lsr #22
    fc62:	beq.w	fa1e <__adddf3+0xe6>
    fc66:	mov.w	r2, #3
    fc6a:	movs.w	ip, ip, lsr #3
    fc6e:	it	ne
    fc70:	addne	r2, #3
    fc72:	movs.w	ip, ip, lsr #3
    fc76:	it	ne
    fc78:	addne	r2, #3
    fc7a:	add.w	r2, r2, ip, lsr #3
    fc7e:	rsb	r3, r2, #32
    fc82:	lsl.w	ip, r0, r3
    fc86:	lsr.w	r0, r0, r2
    fc8a:	lsl.w	lr, r1, r3
    fc8e:	orr.w	r0, r0, lr
    fc92:	lsr.w	r1, r1, r2
    fc96:	add	r4, r2
    fc98:	b.n	fa1e <__adddf3+0xe6>
    fc9a:	nop

0000fc9c <__aeabi_dmul>:
    fc9c:	push	{r4, r5, r6, lr}
    fc9e:	mov.w	ip, #255	; 0xff
    fca2:	orr.w	ip, ip, #1792	; 0x700
    fca6:	ands.w	r4, ip, r1, lsr #20
    fcaa:	ittte	ne
    fcac:	andsne.w	r5, ip, r3, lsr #20
    fcb0:	teqne	r4, ip
    fcb4:	teqne	r5, ip
    fcb8:	bleq	fe78 <__aeabi_dmul+0x1dc>
    fcbc:	add	r4, r5
    fcbe:	eor.w	r6, r1, r3
    fcc2:	bic.w	r1, r1, ip, lsl #21
    fcc6:	bic.w	r3, r3, ip, lsl #21
    fcca:	orrs.w	r5, r0, r1, lsl #12
    fcce:	it	ne
    fcd0:	orrsne.w	r5, r2, r3, lsl #12
    fcd4:	orr.w	r1, r1, #1048576	; 0x100000
    fcd8:	orr.w	r3, r3, #1048576	; 0x100000
    fcdc:	beq.n	fd50 <__aeabi_dmul+0xb4>
    fcde:	umull	ip, lr, r0, r2
    fce2:	mov.w	r5, #0
    fce6:	umlal	lr, r5, r1, r2
    fcea:	and.w	r2, r6, #2147483648	; 0x80000000
    fcee:	umlal	lr, r5, r0, r3
    fcf2:	mov.w	r6, #0
    fcf6:	umlal	r5, r6, r1, r3
    fcfa:	teq	ip, #0
    fcfe:	it	ne
    fd00:	orrne.w	lr, lr, #1
    fd04:	sub.w	r4, r4, #255	; 0xff
    fd08:	cmp.w	r6, #512	; 0x200
    fd0c:	sbc.w	r4, r4, #768	; 0x300
    fd10:	bcs.n	fd1c <__aeabi_dmul+0x80>
    fd12:	movs.w	lr, lr, lsl #1
    fd16:	adcs	r5, r5
    fd18:	adc.w	r6, r6, r6
    fd1c:	orr.w	r1, r2, r6, lsl #11
    fd20:	orr.w	r1, r1, r5, lsr #21
    fd24:	mov.w	r0, r5, lsl #11
    fd28:	orr.w	r0, r0, lr, lsr #21
    fd2c:	mov.w	lr, lr, lsl #11
    fd30:	subs.w	ip, r4, #253	; 0xfd
    fd34:	it	hi
    fd36:	cmphi.w	ip, #1792	; 0x700
    fd3a:	bhi.n	fd7a <__aeabi_dmul+0xde>
    fd3c:	cmp.w	lr, #2147483648	; 0x80000000
    fd40:	it	eq
    fd42:	movseq.w	lr, r0, lsr #1
    fd46:	adcs.w	r0, r0, #0
    fd4a:	adc.w	r1, r1, r4, lsl #20
    fd4e:	pop	{r4, r5, r6, pc}
    fd50:	and.w	r6, r6, #2147483648	; 0x80000000
    fd54:	orr.w	r1, r6, r1
    fd58:	orr.w	r0, r0, r2
    fd5c:	eor.w	r1, r1, r3
    fd60:	subs.w	r4, r4, ip, lsr #1
    fd64:	ittt	gt
    fd66:	rsbsgt	r5, r4, ip
    fd6a:	orrgt.w	r1, r1, r4, lsl #20
    fd6e:	popgt	{r4, r5, r6, pc}
    fd70:	orr.w	r1, r1, #1048576	; 0x100000
    fd74:	mov.w	lr, #0
    fd78:	subs	r4, #1
    fd7a:	bgt.w	fed4 <__aeabi_dmul+0x238>
    fd7e:	cmn.w	r4, #54	; 0x36
    fd82:	ittt	le
    fd84:	movle	r0, #0
    fd86:	andle.w	r1, r1, #2147483648	; 0x80000000
    fd8a:	pople	{r4, r5, r6, pc}
    fd8c:	rsb	r4, r4, #0
    fd90:	subs	r4, #32
    fd92:	bge.n	fe00 <__aeabi_dmul+0x164>
    fd94:	adds	r4, #12
    fd96:	bgt.n	fdd0 <__aeabi_dmul+0x134>
    fd98:	add.w	r4, r4, #20
    fd9c:	rsb	r5, r4, #32
    fda0:	lsl.w	r3, r0, r5
    fda4:	lsr.w	r0, r0, r4
    fda8:	lsl.w	r2, r1, r5
    fdac:	orr.w	r0, r0, r2
    fdb0:	and.w	r2, r1, #2147483648	; 0x80000000
    fdb4:	bic.w	r1, r1, #2147483648	; 0x80000000
    fdb8:	adds.w	r0, r0, r3, lsr #31
    fdbc:	lsr.w	r6, r1, r4
    fdc0:	adc.w	r1, r2, r6
    fdc4:	orrs.w	lr, lr, r3, lsl #1
    fdc8:	it	eq
    fdca:	biceq.w	r0, r0, r3, lsr #31
    fdce:	pop	{r4, r5, r6, pc}
    fdd0:	rsb	r4, r4, #12
    fdd4:	rsb	r5, r4, #32
    fdd8:	lsl.w	r3, r0, r4
    fddc:	lsr.w	r0, r0, r5
    fde0:	lsl.w	r2, r1, r4
    fde4:	orr.w	r0, r0, r2
    fde8:	and.w	r1, r1, #2147483648	; 0x80000000
    fdec:	adds.w	r0, r0, r3, lsr #31
    fdf0:	adc.w	r1, r1, #0
    fdf4:	orrs.w	lr, lr, r3, lsl #1
    fdf8:	it	eq
    fdfa:	biceq.w	r0, r0, r3, lsr #31
    fdfe:	pop	{r4, r5, r6, pc}
    fe00:	rsb	r5, r4, #32
    fe04:	lsl.w	r2, r0, r5
    fe08:	orr.w	lr, lr, r2
    fe0c:	lsr.w	r3, r0, r4
    fe10:	lsl.w	r2, r1, r5
    fe14:	orr.w	r3, r3, r2
    fe18:	lsr.w	r0, r1, r4
    fe1c:	and.w	r1, r1, #2147483648	; 0x80000000
    fe20:	lsr.w	r2, r1, r4
    fe24:	bic.w	r0, r0, r2
    fe28:	add.w	r0, r0, r3, lsr #31
    fe2c:	orrs.w	lr, lr, r3, lsl #1
    fe30:	it	eq
    fe32:	biceq.w	r0, r0, r3, lsr #31
    fe36:	pop	{r4, r5, r6, pc}
    fe38:	teq	r4, #0
    fe3c:	bne.n	fe5e <__aeabi_dmul+0x1c2>
    fe3e:	and.w	r6, r1, #2147483648	; 0x80000000
    fe42:	lsls	r0, r0, #1
    fe44:	adc.w	r1, r1, r1
    fe48:	tst.w	r1, #1048576	; 0x100000
    fe4c:	it	eq
    fe4e:	subeq	r4, #1
    fe50:	beq.n	fe42 <__aeabi_dmul+0x1a6>
    fe52:	orr.w	r1, r1, r6
    fe56:	teq	r5, #0
    fe5a:	it	ne
    fe5c:	bxne	lr
    fe5e:	and.w	r6, r3, #2147483648	; 0x80000000
    fe62:	lsls	r2, r2, #1
    fe64:	adc.w	r3, r3, r3
    fe68:	tst.w	r3, #1048576	; 0x100000
    fe6c:	it	eq
    fe6e:	subeq	r5, #1
    fe70:	beq.n	fe62 <__aeabi_dmul+0x1c6>
    fe72:	orr.w	r3, r3, r6
    fe76:	bx	lr
    fe78:	teq	r4, ip
    fe7c:	and.w	r5, ip, r3, lsr #20
    fe80:	it	ne
    fe82:	teqne	r5, ip
    fe86:	beq.n	fea2 <__aeabi_dmul+0x206>
    fe88:	orrs.w	r6, r0, r1, lsl #1
    fe8c:	it	ne
    fe8e:	orrsne.w	r6, r2, r3, lsl #1
    fe92:	bne.n	fe38 <__aeabi_dmul+0x19c>
    fe94:	eor.w	r1, r1, r3
    fe98:	and.w	r1, r1, #2147483648	; 0x80000000
    fe9c:	mov.w	r0, #0
    fea0:	pop	{r4, r5, r6, pc}
    fea2:	orrs.w	r6, r0, r1, lsl #1
    fea6:	itte	eq
    fea8:	moveq	r0, r2
    feaa:	moveq	r1, r3
    feac:	orrsne.w	r6, r2, r3, lsl #1
    feb0:	beq.n	fee6 <__aeabi_dmul+0x24a>
    feb2:	teq	r4, ip
    feb6:	bne.n	febe <__aeabi_dmul+0x222>
    feb8:	orrs.w	r6, r0, r1, lsl #12
    febc:	bne.n	fee6 <__aeabi_dmul+0x24a>
    febe:	teq	r5, ip
    fec2:	bne.n	fed0 <__aeabi_dmul+0x234>
    fec4:	orrs.w	r6, r2, r3, lsl #12
    fec8:	itt	ne
    feca:	movne	r0, r2
    fecc:	movne	r1, r3
    fece:	bne.n	fee6 <__aeabi_dmul+0x24a>
    fed0:	eor.w	r1, r1, r3
    fed4:	and.w	r1, r1, #2147483648	; 0x80000000
    fed8:	orr.w	r1, r1, #2130706432	; 0x7f000000
    fedc:	orr.w	r1, r1, #15728640	; 0xf00000
    fee0:	mov.w	r0, #0
    fee4:	pop	{r4, r5, r6, pc}
    fee6:	orr.w	r1, r1, #2130706432	; 0x7f000000
    feea:	orr.w	r1, r1, #16252928	; 0xf80000
    feee:	pop	{r4, r5, r6, pc}

0000fef0 <__aeabi_ddiv>:
    fef0:	push	{r4, r5, r6, lr}
    fef2:	mov.w	ip, #255	; 0xff
    fef6:	orr.w	ip, ip, #1792	; 0x700
    fefa:	ands.w	r4, ip, r1, lsr #20
    fefe:	ittte	ne
    ff00:	andsne.w	r5, ip, r3, lsr #20
    ff04:	teqne	r4, ip
    ff08:	teqne	r5, ip
    ff0c:	bleq	1005e <__aeabi_ddiv+0x16e>
    ff10:	sub.w	r4, r4, r5
    ff14:	eor.w	lr, r1, r3
    ff18:	orrs.w	r5, r2, r3, lsl #12
    ff1c:	mov.w	r1, r1, lsl #12
    ff20:	beq.w	10034 <__aeabi_ddiv+0x144>
    ff24:	mov.w	r3, r3, lsl #12
    ff28:	mov.w	r5, #268435456	; 0x10000000
    ff2c:	orr.w	r3, r5, r3, lsr #4
    ff30:	orr.w	r3, r3, r2, lsr #24
    ff34:	mov.w	r2, r2, lsl #8
    ff38:	orr.w	r5, r5, r1, lsr #4
    ff3c:	orr.w	r5, r5, r0, lsr #24
    ff40:	mov.w	r6, r0, lsl #8
    ff44:	and.w	r1, lr, #2147483648	; 0x80000000
    ff48:	cmp	r5, r3
    ff4a:	it	eq
    ff4c:	cmpeq	r6, r2
    ff4e:	adc.w	r4, r4, #253	; 0xfd
    ff52:	add.w	r4, r4, #768	; 0x300
    ff56:	bcs.n	ff5e <__aeabi_ddiv+0x6e>
    ff58:	lsrs	r3, r3, #1
    ff5a:	mov.w	r2, r2, rrx
    ff5e:	subs	r6, r6, r2
    ff60:	sbc.w	r5, r5, r3
    ff64:	lsrs	r3, r3, #1
    ff66:	mov.w	r2, r2, rrx
    ff6a:	mov.w	r0, #1048576	; 0x100000
    ff6e:	mov.w	ip, #524288	; 0x80000
    ff72:	subs.w	lr, r6, r2
    ff76:	sbcs.w	lr, r5, r3
    ff7a:	ittt	cs
    ff7c:	subcs	r6, r6, r2
    ff7e:	movcs	r5, lr
    ff80:	orrcs.w	r0, r0, ip
    ff84:	lsrs	r3, r3, #1
    ff86:	mov.w	r2, r2, rrx
    ff8a:	subs.w	lr, r6, r2
    ff8e:	sbcs.w	lr, r5, r3
    ff92:	ittt	cs
    ff94:	subcs	r6, r6, r2
    ff96:	movcs	r5, lr
    ff98:	orrcs.w	r0, r0, ip, lsr #1
    ff9c:	lsrs	r3, r3, #1
    ff9e:	mov.w	r2, r2, rrx
    ffa2:	subs.w	lr, r6, r2
    ffa6:	sbcs.w	lr, r5, r3
    ffaa:	ittt	cs
    ffac:	subcs	r6, r6, r2
    ffae:	movcs	r5, lr
    ffb0:	orrcs.w	r0, r0, ip, lsr #2
    ffb4:	lsrs	r3, r3, #1
    ffb6:	mov.w	r2, r2, rrx
    ffba:	subs.w	lr, r6, r2
    ffbe:	sbcs.w	lr, r5, r3
    ffc2:	ittt	cs
    ffc4:	subcs	r6, r6, r2
    ffc6:	movcs	r5, lr
    ffc8:	orrcs.w	r0, r0, ip, lsr #3
    ffcc:	orrs.w	lr, r5, r6
    ffd0:	beq.n	10004 <__aeabi_ddiv+0x114>
    ffd2:	mov.w	r5, r5, lsl #4
    ffd6:	orr.w	r5, r5, r6, lsr #28
    ffda:	mov.w	r6, r6, lsl #4
    ffde:	mov.w	r3, r3, lsl #3
    ffe2:	orr.w	r3, r3, r2, lsr #29
    ffe6:	mov.w	r2, r2, lsl #3
    ffea:	movs.w	ip, ip, lsr #4
    ffee:	bne.n	ff72 <__aeabi_ddiv+0x82>
    fff0:	tst.w	r1, #1048576	; 0x100000
    fff4:	bne.n	1000e <__aeabi_ddiv+0x11e>
    fff6:	orr.w	r1, r1, r0
    fffa:	mov.w	r0, #0
    fffe:	mov.w	ip, #2147483648	; 0x80000000
   10002:	b.n	ff72 <__aeabi_ddiv+0x82>
   10004:	tst.w	r1, #1048576	; 0x100000
   10008:	itt	eq
   1000a:	orreq	r1, r0
   1000c:	moveq	r0, #0
   1000e:	subs.w	ip, r4, #253	; 0xfd
   10012:	it	hi
   10014:	cmphi.w	ip, #1792	; 0x700
   10018:	bhi.w	fd7a <__aeabi_dmul+0xde>
   1001c:	subs.w	ip, r5, r3
   10020:	itt	eq
   10022:	subseq.w	ip, r6, r2
   10026:	movseq.w	ip, r0, lsr #1
   1002a:	adcs.w	r0, r0, #0
   1002e:	adc.w	r1, r1, r4, lsl #20
   10032:	pop	{r4, r5, r6, pc}
   10034:	and.w	lr, lr, #2147483648	; 0x80000000
   10038:	orr.w	r1, lr, r1, lsr #12
   1003c:	adds.w	r4, r4, ip, lsr #1
   10040:	ittt	gt
   10042:	rsbsgt	r5, r4, ip
   10046:	orrgt.w	r1, r1, r4, lsl #20
   1004a:	popgt	{r4, r5, r6, pc}
   1004c:	orr.w	r1, r1, #1048576	; 0x100000
   10050:	mov.w	lr, #0
   10054:	subs	r4, #1
   10056:	b.n	fd7a <__aeabi_dmul+0xde>
   10058:	orr.w	lr, r5, r6
   1005c:	b.n	fd7a <__aeabi_dmul+0xde>
   1005e:	and.w	r5, ip, r3, lsr #20
   10062:	teq	r4, ip
   10066:	it	eq
   10068:	teqeq	r5, ip
   1006c:	beq.w	fee6 <__aeabi_dmul+0x24a>
   10070:	teq	r4, ip
   10074:	bne.n	1008c <__aeabi_ddiv+0x19c>
   10076:	orrs.w	r4, r0, r1, lsl #12
   1007a:	bne.w	fee6 <__aeabi_dmul+0x24a>
   1007e:	teq	r5, ip
   10082:	bne.w	fed0 <__aeabi_dmul+0x234>
   10086:	mov	r0, r2
   10088:	mov	r1, r3
   1008a:	b.n	fee6 <__aeabi_dmul+0x24a>
   1008c:	teq	r5, ip
   10090:	bne.n	100a0 <__aeabi_ddiv+0x1b0>
   10092:	orrs.w	r5, r2, r3, lsl #12
   10096:	beq.w	fe94 <__aeabi_dmul+0x1f8>
   1009a:	mov	r0, r2
   1009c:	mov	r1, r3
   1009e:	b.n	fee6 <__aeabi_dmul+0x24a>
   100a0:	orrs.w	r6, r0, r1, lsl #1
   100a4:	it	ne
   100a6:	orrsne.w	r6, r2, r3, lsl #1
   100aa:	bne.w	fe38 <__aeabi_dmul+0x19c>
   100ae:	orrs.w	r4, r0, r1, lsl #1
   100b2:	bne.w	fed0 <__aeabi_dmul+0x234>
   100b6:	orrs.w	r5, r2, r3, lsl #1
   100ba:	bne.w	fe94 <__aeabi_dmul+0x1f8>
   100be:	b.n	fee6 <__aeabi_dmul+0x24a>

000100c0 <__gedf2>:
   100c0:	mov.w	ip, #4294967295
   100c4:	b.n	100d4 <__cmpdf2+0x4>
   100c6:	nop

000100c8 <__ledf2>:
   100c8:	mov.w	ip, #1
   100cc:	b.n	100d4 <__cmpdf2+0x4>
   100ce:	nop

000100d0 <__cmpdf2>:
   100d0:	mov.w	ip, #1
   100d4:	str.w	ip, [sp, #-4]!
   100d8:	mov.w	ip, r1, lsl #1
   100dc:	mvns.w	ip, ip, asr #21
   100e0:	mov.w	ip, r3, lsl #1
   100e4:	it	ne
   100e6:	mvnsne.w	ip, ip, asr #21
   100ea:	beq.n	10124 <__cmpdf2+0x54>
   100ec:	add	sp, #4
   100ee:	orrs.w	ip, r0, r1, lsl #1
   100f2:	ite	eq
   100f4:	orrseq.w	ip, r2, r3, lsl #1
   100f8:	teqne	r1, r3
   100fc:	ittt	eq
   100fe:	teqeq	r0, r2
   10102:	moveq	r0, #0
   10104:	bxeq	lr
   10106:	cmn.w	r0, #0
   1010a:	teq	r1, r3
   1010e:	it	pl
   10110:	cmppl	r1, r3
   10112:	it	eq
   10114:	cmpeq	r0, r2
   10116:	ite	cs
   10118:	asrcs	r0, r3, #31
   1011a:	mvncc.w	r0, r3, asr #31
   1011e:	orr.w	r0, r0, #1
   10122:	bx	lr
   10124:	mov.w	ip, r1, lsl #1
   10128:	mvns.w	ip, ip, asr #21
   1012c:	bne.n	10134 <__cmpdf2+0x64>
   1012e:	orrs.w	ip, r0, r1, lsl #12
   10132:	bne.n	10144 <__cmpdf2+0x74>
   10134:	mov.w	ip, r3, lsl #1
   10138:	mvns.w	ip, ip, asr #21
   1013c:	bne.n	100ec <__cmpdf2+0x1c>
   1013e:	orrs.w	ip, r2, r3, lsl #12
   10142:	beq.n	100ec <__cmpdf2+0x1c>
   10144:	ldr.w	r0, [sp], #4
   10148:	bx	lr
   1014a:	nop

0001014c <__aeabi_cdrcmple>:
   1014c:	mov	ip, r0
   1014e:	mov	r0, r2
   10150:	mov	r2, ip
   10152:	mov	ip, r1
   10154:	mov	r1, r3
   10156:	mov	r3, ip
   10158:	b.n	1015c <__aeabi_cdcmpeq>
   1015a:	nop

0001015c <__aeabi_cdcmpeq>:
   1015c:	push	{r0, lr}
   1015e:	bl	100d0 <__cmpdf2>
   10162:	cmp	r0, #0
   10164:	it	mi
   10166:	cmnmi.w	r0, #0
   1016a:	pop	{r0, pc}

0001016c <__aeabi_dcmpeq>:
   1016c:	str.w	lr, [sp, #-8]!
   10170:	bl	1015c <__aeabi_cdcmpeq>
   10174:	ite	eq
   10176:	moveq	r0, #1
   10178:	movne	r0, #0
   1017a:	ldr.w	pc, [sp], #8
   1017e:	nop

00010180 <__aeabi_dcmplt>:
   10180:	str.w	lr, [sp, #-8]!
   10184:	bl	1015c <__aeabi_cdcmpeq>
   10188:	ite	cc
   1018a:	movcc	r0, #1
   1018c:	movcs	r0, #0
   1018e:	ldr.w	pc, [sp], #8
   10192:	nop

00010194 <__aeabi_dcmple>:
   10194:	str.w	lr, [sp, #-8]!
   10198:	bl	1015c <__aeabi_cdcmpeq>
   1019c:	ite	ls
   1019e:	movls	r0, #1
   101a0:	movhi	r0, #0
   101a2:	ldr.w	pc, [sp], #8
   101a6:	nop

000101a8 <__aeabi_dcmpge>:
   101a8:	str.w	lr, [sp, #-8]!
   101ac:	bl	1014c <__aeabi_cdrcmple>
   101b0:	ite	ls
   101b2:	movls	r0, #1
   101b4:	movhi	r0, #0
   101b6:	ldr.w	pc, [sp], #8
   101ba:	nop

000101bc <__aeabi_dcmpgt>:
   101bc:	str.w	lr, [sp, #-8]!
   101c0:	bl	1014c <__aeabi_cdrcmple>
   101c4:	ite	cc
   101c6:	movcc	r0, #1
   101c8:	movcs	r0, #0
   101ca:	ldr.w	pc, [sp], #8
   101ce:	nop

000101d0 <__aeabi_dcmpun>:
   101d0:	mov.w	ip, r1, lsl #1
   101d4:	mvns.w	ip, ip, asr #21
   101d8:	bne.n	101e0 <__aeabi_dcmpun+0x10>
   101da:	orrs.w	ip, r0, r1, lsl #12
   101de:	bne.n	101f6 <__aeabi_dcmpun+0x26>
   101e0:	mov.w	ip, r3, lsl #1
   101e4:	mvns.w	ip, ip, asr #21
   101e8:	bne.n	101f0 <__aeabi_dcmpun+0x20>
   101ea:	orrs.w	ip, r2, r3, lsl #12
   101ee:	bne.n	101f6 <__aeabi_dcmpun+0x26>
   101f0:	mov.w	r0, #0
   101f4:	bx	lr
   101f6:	mov.w	r0, #1
   101fa:	bx	lr

000101fc <__aeabi_d2iz>:
   101fc:	mov.w	r2, r1, lsl #1
   10200:	adds.w	r2, r2, #2097152	; 0x200000
   10204:	bcs.n	10232 <__aeabi_d2iz+0x36>
   10206:	bpl.n	1022c <__aeabi_d2iz+0x30>
   10208:	mvn.w	r3, #992	; 0x3e0
   1020c:	subs.w	r2, r3, r2, asr #21
   10210:	bls.n	10238 <__aeabi_d2iz+0x3c>
   10212:	mov.w	r3, r1, lsl #11
   10216:	orr.w	r3, r3, #2147483648	; 0x80000000
   1021a:	orr.w	r3, r3, r0, lsr #21
   1021e:	tst.w	r1, #2147483648	; 0x80000000
   10222:	lsr.w	r0, r3, r2
   10226:	it	ne
   10228:	negne	r0, r0
   1022a:	bx	lr
   1022c:	mov.w	r0, #0
   10230:	bx	lr
   10232:	orrs.w	r0, r0, r1, lsl #12
   10236:	bne.n	10244 <__aeabi_d2iz+0x48>
   10238:	ands.w	r0, r1, #2147483648	; 0x80000000
   1023c:	it	eq
   1023e:	mvneq.w	r0, #2147483648	; 0x80000000
   10242:	bx	lr
   10244:	mov.w	r0, #0
   10248:	bx	lr
   1024a:	nop

0001024c <__aeabi_uldivmod>:
   1024c:	cbnz	r3, 10264 <__aeabi_uldivmod+0x18>
   1024e:	cbnz	r2, 10264 <__aeabi_uldivmod+0x18>
   10250:	cmp	r1, #0
   10252:	it	eq
   10254:	cmpeq	r0, #0
   10256:	itt	ne
   10258:	movne.w	r1, #4294967295
   1025c:	movne.w	r0, #4294967295
   10260:	b.w	10560 <__aeabi_idiv0>
   10264:	sub.w	ip, sp, #8
   10268:	strd	ip, lr, [sp, #-16]!
   1026c:	bl	1027c <__udivmoddi4>
   10270:	ldr.w	lr, [sp, #4]
   10274:	ldrd	r2, r3, [sp, #8]
   10278:	add	sp, #16
   1027a:	bx	lr

0001027c <__udivmoddi4>:
   1027c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   10280:	mov	ip, r1
   10282:	mov	r6, r1
   10284:	mov	r4, r0
   10286:	ldr	r5, [sp, #32]
   10288:	cmp	r3, #0
   1028a:	bne.n	1032e <__udivmoddi4+0xb2>
   1028c:	cmp	r2, r1
   1028e:	mov	r7, r2
   10290:	bls.n	1036c <__udivmoddi4+0xf0>
   10292:	clz	lr, r2
   10296:	cmp.w	lr, #0
   1029a:	beq.n	102b4 <__udivmoddi4+0x38>
   1029c:	rsb	r4, lr, #32
   102a0:	lsr.w	r4, r0, r4
   102a4:	lsl.w	r6, r1, lr
   102a8:	orr.w	ip, r4, r6
   102ac:	lsl.w	r7, r2, lr
   102b0:	lsl.w	r4, r0, lr
   102b4:	mov.w	r9, r7, lsr #16
   102b8:	lsrs	r2, r4, #16
   102ba:	udiv	r0, ip, r9
   102be:	uxth.w	r8, r7
   102c2:	mls	r6, r9, r0, ip
   102c6:	orr.w	r6, r2, r6, lsl #16
   102ca:	mul.w	r3, r0, r8
   102ce:	cmp	r3, r6
   102d0:	bls.n	102e6 <__udivmoddi4+0x6a>
   102d2:	adds	r6, r6, r7
   102d4:	add.w	r2, r0, #4294967295
   102d8:	bcs.w	10520 <__udivmoddi4+0x2a4>
   102dc:	cmp	r3, r6
   102de:	bls.w	10520 <__udivmoddi4+0x2a4>
   102e2:	subs	r0, #2
   102e4:	add	r6, r7
   102e6:	subs	r6, r6, r3
   102e8:	uxth	r2, r4
   102ea:	udiv	r3, r6, r9
   102ee:	mls	r6, r9, r3, r6
   102f2:	orr.w	r4, r2, r6, lsl #16
   102f6:	mul.w	r8, r3, r8
   102fa:	cmp	r8, r4
   102fc:	bls.n	10312 <__udivmoddi4+0x96>
   102fe:	adds	r4, r4, r7
   10300:	add.w	r2, r3, #4294967295
   10304:	bcs.w	1051c <__udivmoddi4+0x2a0>
   10308:	cmp	r8, r4
   1030a:	bls.w	1051c <__udivmoddi4+0x2a0>
   1030e:	subs	r3, #2
   10310:	add	r4, r7
   10312:	rsb	r4, r8, r4
   10316:	orr.w	r0, r3, r0, lsl #16
   1031a:	movs	r1, #0
   1031c:	cmp	r5, #0
   1031e:	beq.n	103e6 <__udivmoddi4+0x16a>
   10320:	lsr.w	r4, r4, lr
   10324:	movs	r3, #0
   10326:	str	r4, [r5, #0]
   10328:	str	r3, [r5, #4]
   1032a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1032e:	cmp	r3, r1
   10330:	bls.n	10342 <__udivmoddi4+0xc6>
   10332:	cmp	r5, #0
   10334:	beq.n	103e2 <__udivmoddi4+0x166>
   10336:	movs	r1, #0
   10338:	stmia.w	r5, {r0, r6}
   1033c:	mov	r0, r1
   1033e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   10342:	clz	r1, r3
   10346:	cmp	r1, #0
   10348:	bne.w	1046c <__udivmoddi4+0x1f0>
   1034c:	cmp	r3, r6
   1034e:	bcc.n	10356 <__udivmoddi4+0xda>
   10350:	cmp	r2, r0
   10352:	bhi.w	10546 <__udivmoddi4+0x2ca>
   10356:	subs	r4, r0, r2
   10358:	sbc.w	r6, r6, r3
   1035c:	movs	r0, #1
   1035e:	mov	ip, r6
   10360:	cmp	r5, #0
   10362:	beq.n	103e6 <__udivmoddi4+0x16a>
   10364:	stmia.w	r5, {r4, ip}
   10368:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1036c:	cbnz	r2, 10374 <__udivmoddi4+0xf8>
   1036e:	movs	r7, #1
   10370:	udiv	r7, r7, r2
   10374:	clz	lr, r7
   10378:	cmp.w	lr, #0
   1037c:	bne.n	103ea <__udivmoddi4+0x16e>
   1037e:	subs	r3, r6, r7
   10380:	mov.w	r8, r7, lsr #16
   10384:	uxth.w	ip, r7
   10388:	movs	r1, #1
   1038a:	udiv	r0, r3, r8
   1038e:	lsrs	r2, r4, #16
   10390:	mls	r6, r8, r0, r3
   10394:	orr.w	r6, r2, r6, lsl #16
   10398:	mul.w	r3, ip, r0
   1039c:	cmp	r3, r6
   1039e:	bls.n	103b0 <__udivmoddi4+0x134>
   103a0:	adds	r6, r6, r7
   103a2:	add.w	r2, r0, #4294967295
   103a6:	bcs.n	103ae <__udivmoddi4+0x132>
   103a8:	cmp	r3, r6
   103aa:	bhi.w	1054a <__udivmoddi4+0x2ce>
   103ae:	mov	r0, r2
   103b0:	subs	r6, r6, r3
   103b2:	uxth	r2, r4
   103b4:	udiv	r3, r6, r8
   103b8:	mls	r6, r8, r3, r6
   103bc:	orr.w	r4, r2, r6, lsl #16
   103c0:	mul.w	ip, ip, r3
   103c4:	cmp	ip, r4
   103c6:	bls.n	103d8 <__udivmoddi4+0x15c>
   103c8:	adds	r4, r4, r7
   103ca:	add.w	r2, r3, #4294967295
   103ce:	bcs.n	103d6 <__udivmoddi4+0x15a>
   103d0:	cmp	ip, r4
   103d2:	bhi.w	10540 <__udivmoddi4+0x2c4>
   103d6:	mov	r3, r2
   103d8:	rsb	r4, ip, r4
   103dc:	orr.w	r0, r3, r0, lsl #16
   103e0:	b.n	1031c <__udivmoddi4+0xa0>
   103e2:	mov	r1, r5
   103e4:	mov	r0, r5
   103e6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   103ea:	rsb	r1, lr, #32
   103ee:	lsl.w	r3, r6, lr
   103f2:	lsl.w	r7, r7, lr
   103f6:	lsr.w	r9, r0, r1
   103fa:	mov.w	r8, r7, lsr #16
   103fe:	lsrs	r6, r1
   10400:	orr.w	r9, r9, r3
   10404:	udiv	sl, r6, r8
   10408:	mov.w	r4, r9, lsr #16
   1040c:	mls	r6, r8, sl, r6
   10410:	uxth.w	ip, r7
   10414:	orr.w	r3, r4, r6, lsl #16
   10418:	mul.w	r2, sl, ip
   1041c:	cmp	r2, r3
   1041e:	lsl.w	r4, r0, lr
   10422:	bls.n	1043a <__udivmoddi4+0x1be>
   10424:	adds	r3, r3, r7
   10426:	add.w	r1, sl, #4294967295
   1042a:	bcs.w	1053c <__udivmoddi4+0x2c0>
   1042e:	cmp	r2, r3
   10430:	bls.w	1053c <__udivmoddi4+0x2c0>
   10434:	sub.w	sl, sl, #2
   10438:	add	r3, r7
   1043a:	subs	r3, r3, r2
   1043c:	uxth.w	r9, r9
   10440:	udiv	r1, r3, r8
   10444:	mls	r3, r8, r1, r3
   10448:	orr.w	r3, r9, r3, lsl #16
   1044c:	mul.w	r6, r1, ip
   10450:	cmp	r6, r3
   10452:	bls.n	10464 <__udivmoddi4+0x1e8>
   10454:	adds	r3, r3, r7
   10456:	add.w	r2, r1, #4294967295
   1045a:	bcs.n	10534 <__udivmoddi4+0x2b8>
   1045c:	cmp	r6, r3
   1045e:	bls.n	10534 <__udivmoddi4+0x2b8>
   10460:	subs	r1, #2
   10462:	add	r3, r7
   10464:	subs	r3, r3, r6
   10466:	orr.w	r1, r1, sl, lsl #16
   1046a:	b.n	1038a <__udivmoddi4+0x10e>
   1046c:	rsb	lr, r1, #32
   10470:	lsr.w	r4, r2, lr
   10474:	lsls	r3, r1
   10476:	orrs	r3, r4
   10478:	lsr.w	r7, r0, lr
   1047c:	lsl.w	r4, r6, r1
   10480:	mov.w	ip, r3, lsr #16
   10484:	lsr.w	r6, r6, lr
   10488:	orrs	r4, r7
   1048a:	udiv	r9, r6, ip
   1048e:	lsrs	r7, r4, #16
   10490:	mls	r6, ip, r9, r6
   10494:	uxth.w	r8, r3
   10498:	orr.w	r6, r7, r6, lsl #16
   1049c:	mul.w	r7, r9, r8
   104a0:	cmp	r7, r6
   104a2:	lsl.w	r2, r2, r1
   104a6:	lsl.w	sl, r0, r1
   104aa:	bls.n	104be <__udivmoddi4+0x242>
   104ac:	adds	r6, r6, r3
   104ae:	add.w	r0, r9, #4294967295
   104b2:	bcs.n	10538 <__udivmoddi4+0x2bc>
   104b4:	cmp	r7, r6
   104b6:	bls.n	10538 <__udivmoddi4+0x2bc>
   104b8:	sub.w	r9, r9, #2
   104bc:	add	r6, r3
   104be:	subs	r6, r6, r7
   104c0:	uxth	r0, r4
   104c2:	udiv	r4, r6, ip
   104c6:	mls	r6, ip, r4, r6
   104ca:	orr.w	r7, r0, r6, lsl #16
   104ce:	mul.w	r8, r4, r8
   104d2:	cmp	r8, r7
   104d4:	bls.n	104e6 <__udivmoddi4+0x26a>
   104d6:	adds	r7, r7, r3
   104d8:	add.w	r0, r4, #4294967295
   104dc:	bcs.n	10530 <__udivmoddi4+0x2b4>
   104de:	cmp	r8, r7
   104e0:	bls.n	10530 <__udivmoddi4+0x2b4>
   104e2:	subs	r4, #2
   104e4:	add	r7, r3
   104e6:	orr.w	r0, r4, r9, lsl #16
   104ea:	rsb	r7, r8, r7
   104ee:	umull	r8, r9, r0, r2
   104f2:	cmp	r7, r9
   104f4:	mov	r4, r8
   104f6:	mov	r6, r9
   104f8:	bcc.n	10524 <__udivmoddi4+0x2a8>
   104fa:	beq.n	10550 <__udivmoddi4+0x2d4>
   104fc:	cbz	r5, 10558 <__udivmoddi4+0x2dc>
   104fe:	subs.w	r3, sl, r4
   10502:	sbc.w	r7, r7, r6
   10506:	lsl.w	lr, r7, lr
   1050a:	lsrs	r3, r1
   1050c:	lsrs	r7, r1
   1050e:	orr.w	r3, lr, r3
   10512:	stmia.w	r5, {r3, r7}
   10516:	movs	r1, #0
   10518:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1051c:	mov	r3, r2
   1051e:	b.n	10312 <__udivmoddi4+0x96>
   10520:	mov	r0, r2
   10522:	b.n	102e6 <__udivmoddi4+0x6a>
   10524:	subs.w	r4, r8, r2
   10528:	sbc.w	r6, r9, r3
   1052c:	subs	r0, #1
   1052e:	b.n	104fc <__udivmoddi4+0x280>
   10530:	mov	r4, r0
   10532:	b.n	104e6 <__udivmoddi4+0x26a>
   10534:	mov	r1, r2
   10536:	b.n	10464 <__udivmoddi4+0x1e8>
   10538:	mov	r9, r0
   1053a:	b.n	104be <__udivmoddi4+0x242>
   1053c:	mov	sl, r1
   1053e:	b.n	1043a <__udivmoddi4+0x1be>
   10540:	subs	r3, #2
   10542:	add	r4, r7
   10544:	b.n	103d8 <__udivmoddi4+0x15c>
   10546:	mov	r0, r1
   10548:	b.n	10360 <__udivmoddi4+0xe4>
   1054a:	subs	r0, #2
   1054c:	add	r6, r7
   1054e:	b.n	103b0 <__udivmoddi4+0x134>
   10550:	cmp	sl, r8
   10552:	bcc.n	10524 <__udivmoddi4+0x2a8>
   10554:	mov	r6, r7
   10556:	b.n	104fc <__udivmoddi4+0x280>
   10558:	mov	r1, r5
   1055a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1055e:	nop

00010560 <__aeabi_idiv0>:
   10560:	bx	lr
   10562:	nop

00010564 <__cxa_atexit>:
   10564:	mov	r3, r2
   10566:	mov	r2, r1
   10568:	mov	r1, r0
   1056a:	movs	r0, #2
   1056c:	b.w	12cd0 <__register_exitproc>

00010570 <fcvtf>:
   10570:	push	{r4, r5, r6, lr}
   10572:	mov	r4, r0
   10574:	vmov	r0, s0
   10578:	mov	r5, r1
   1057a:	mov	r6, r2
   1057c:	bl	fbf4 <__aeabi_f2d>
   10580:	mov	r2, r6
   10582:	vmov	d0, r0, r1
   10586:	movs	r3, #0
   10588:	mov	r1, r5
   1058a:	mov	r0, r4
   1058c:	ldmia.w	sp!, {r4, r5, r6, lr}
   10590:	b.w	13cd4 <fcvtbuf>

00010594 <__errno>:
   10594:	ldr	r3, [pc, #4]	; (1059c <__errno+0x8>)
   10596:	ldr	r0, [r3, #0]
   10598:	bx	lr
   1059a:	nop
   1059c:	.word	0x20001090

000105a0 <__libc_init_array>:
   105a0:	push	{r4, r5, r6, lr}
   105a2:	ldr	r6, [pc, #60]	; (105e0 <__libc_init_array+0x40>)
   105a4:	ldr	r5, [pc, #60]	; (105e4 <__libc_init_array+0x44>)
   105a6:	subs	r6, r6, r5
   105a8:	asrs	r6, r6, #2
   105aa:	it	ne
   105ac:	movne	r4, #0
   105ae:	beq.n	105bc <__libc_init_array+0x1c>
   105b0:	adds	r4, #1
   105b2:	ldr.w	r3, [r5], #4
   105b6:	blx	r3
   105b8:	cmp	r6, r4
   105ba:	bne.n	105b0 <__libc_init_array+0x10>
   105bc:	ldr	r6, [pc, #40]	; (105e8 <__libc_init_array+0x48>)
   105be:	ldr	r5, [pc, #44]	; (105ec <__libc_init_array+0x4c>)
   105c0:	subs	r6, r6, r5
   105c2:	bl	14840 <___init_veneer>
   105c6:	asrs	r6, r6, #2
   105c8:	it	ne
   105ca:	movne	r4, #0
   105cc:	beq.n	105dc <__libc_init_array+0x3c>
   105ce:	adds	r4, #1
   105d0:	ldr.w	r3, [r5], #4
   105d4:	blx	r3
   105d6:	cmp	r6, r4
   105d8:	bne.n	105ce <__libc_init_array+0x2e>
   105da:	pop	{r4, r5, r6, pc}
   105dc:	pop	{r4, r5, r6, pc}
   105de:	nop
   105e0:	.word	0x60001ba8
   105e4:	.word	0x60001ba8
   105e8:	.word	0x60001bb4
   105ec:	.word	0x60001ba8

000105f0 <malloc>:
   105f0:	ldr	r3, [pc, #8]	; (105fc <malloc+0xc>)
   105f2:	mov	r1, r0
   105f4:	ldr	r0, [r3, #0]
   105f6:	b.w	10610 <_malloc_r>
   105fa:	nop
   105fc:	.word	0x20001090

00010600 <free>:
   10600:	ldr	r3, [pc, #8]	; (1060c <free+0xc>)
   10602:	mov	r1, r0
   10604:	ldr	r0, [r3, #0]
   10606:	b.w	13e70 <_free_r>
   1060a:	nop
   1060c:	.word	0x20001090

00010610 <_malloc_r>:
   10610:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10614:	add.w	r5, r1, #11
   10618:	cmp	r5, #22
   1061a:	sub	sp, #12
   1061c:	mov	r6, r0
   1061e:	bls.w	10760 <_malloc_r+0x150>
   10622:	bics.w	r5, r5, #7
   10626:	bmi.w	107a8 <_malloc_r+0x198>
   1062a:	cmp	r1, r5
   1062c:	bhi.w	107a8 <_malloc_r+0x198>
   10630:	bl	10e18 <__malloc_lock>
   10634:	cmp.w	r5, #504	; 0x1f8
   10638:	bcc.w	10b74 <_malloc_r+0x564>
   1063c:	lsrs	r3, r5, #9
   1063e:	beq.w	107b6 <_malloc_r+0x1a6>
   10642:	cmp	r3, #4
   10644:	bhi.w	1094e <_malloc_r+0x33e>
   10648:	lsrs	r0, r5, #6
   1064a:	add.w	lr, r0, #57	; 0x39
   1064e:	mov.w	r3, lr, lsl #1
   10652:	adds	r0, #56	; 0x38
   10654:	ldr	r7, [pc, #784]	; (10968 <_malloc_r+0x358>)
   10656:	add.w	r3, r7, r3, lsl #2
   1065a:	sub.w	r1, r3, #8
   1065e:	ldr	r4, [r3, #4]
   10660:	cmp	r1, r4
   10662:	bne.n	10674 <_malloc_r+0x64>
   10664:	b.n	107c0 <_malloc_r+0x1b0>
   10666:	cmp	r2, #0
   10668:	bge.w	107c4 <_malloc_r+0x1b4>
   1066c:	ldr	r4, [r4, #12]
   1066e:	cmp	r1, r4
   10670:	beq.w	107c0 <_malloc_r+0x1b0>
   10674:	ldr	r3, [r4, #4]
   10676:	bic.w	r3, r3, #3
   1067a:	subs	r2, r3, r5
   1067c:	cmp	r2, #15
   1067e:	ble.n	10666 <_malloc_r+0x56>
   10680:	ldr	r1, [pc, #740]	; (10968 <_malloc_r+0x358>)
   10682:	ldr	r4, [r7, #16]
   10684:	add.w	lr, r1, #8
   10688:	cmp	r4, lr
   1068a:	beq.w	109f4 <_malloc_r+0x3e4>
   1068e:	ldr	r3, [r4, #4]
   10690:	bic.w	r3, r3, #3
   10694:	subs	r2, r3, r5
   10696:	cmp	r2, #15
   10698:	bgt.w	109ce <_malloc_r+0x3be>
   1069c:	cmp	r2, #0
   1069e:	str.w	lr, [r1, #20]
   106a2:	str.w	lr, [r1, #16]
   106a6:	bge.w	107e6 <_malloc_r+0x1d6>
   106aa:	cmp.w	r3, #512	; 0x200
   106ae:	bcs.w	10980 <_malloc_r+0x370>
   106b2:	lsrs	r3, r3, #3
   106b4:	add.w	ip, r3, #1
   106b8:	movs	r2, #1
   106ba:	asrs	r3, r3, #2
   106bc:	lsl.w	r3, r2, r3
   106c0:	ldr	r2, [r1, #4]
   106c2:	ldr.w	r8, [r1, ip, lsl #3]
   106c6:	str.w	r8, [r4, #8]
   106ca:	add.w	r9, r1, ip, lsl #3
   106ce:	orrs	r2, r3
   106d0:	sub.w	r3, r9, #8
   106d4:	str	r3, [r4, #12]
   106d6:	str	r2, [r1, #4]
   106d8:	str.w	r4, [r1, ip, lsl #3]
   106dc:	str.w	r4, [r8, #12]
   106e0:	asrs	r3, r0, #2
   106e2:	movs	r4, #1
   106e4:	lsls	r4, r3
   106e6:	cmp	r4, r2
   106e8:	bhi.w	10800 <_malloc_r+0x1f0>
   106ec:	tst	r4, r2
   106ee:	bne.n	106fe <_malloc_r+0xee>
   106f0:	bic.w	r0, r0, #3
   106f4:	lsls	r4, r4, #1
   106f6:	tst	r4, r2
   106f8:	add.w	r0, r0, #4
   106fc:	beq.n	106f4 <_malloc_r+0xe4>
   106fe:	add.w	r9, r7, r0, lsl #3
   10702:	mov	ip, r9
   10704:	mov	r8, r0
   10706:	ldr.w	r1, [ip, #12]
   1070a:	cmp	ip, r1
   1070c:	bne.n	1071e <_malloc_r+0x10e>
   1070e:	b.n	109f8 <_malloc_r+0x3e8>
   10710:	cmp	r2, #0
   10712:	bge.w	10a18 <_malloc_r+0x408>
   10716:	ldr	r1, [r1, #12]
   10718:	cmp	ip, r1
   1071a:	beq.w	109f8 <_malloc_r+0x3e8>
   1071e:	ldr	r3, [r1, #4]
   10720:	bic.w	r3, r3, #3
   10724:	subs	r2, r3, r5
   10726:	cmp	r2, #15
   10728:	ble.n	10710 <_malloc_r+0x100>
   1072a:	mov	r4, r1
   1072c:	ldr.w	ip, [r1, #12]
   10730:	ldr.w	r8, [r4, #8]!
   10734:	adds	r3, r1, r5
   10736:	orr.w	r5, r5, #1
   1073a:	str	r5, [r1, #4]
   1073c:	orr.w	r1, r2, #1
   10740:	str.w	ip, [r8, #12]
   10744:	mov	r0, r6
   10746:	str.w	r8, [ip, #8]
   1074a:	str	r3, [r7, #20]
   1074c:	str	r3, [r7, #16]
   1074e:	str.w	lr, [r3, #12]
   10752:	str.w	lr, [r3, #8]
   10756:	str	r1, [r3, #4]
   10758:	str	r2, [r3, r2]
   1075a:	bl	10e1c <__malloc_unlock>
   1075e:	b.n	107a0 <_malloc_r+0x190>
   10760:	cmp	r1, #16
   10762:	bhi.n	107a8 <_malloc_r+0x198>
   10764:	bl	10e18 <__malloc_lock>
   10768:	movs	r5, #16
   1076a:	movs	r3, #6
   1076c:	movs	r0, #2
   1076e:	ldr	r7, [pc, #504]	; (10968 <_malloc_r+0x358>)
   10770:	add.w	r3, r7, r3, lsl #2
   10774:	sub.w	r2, r3, #8
   10778:	ldr	r4, [r3, #4]
   1077a:	cmp	r4, r2
   1077c:	beq.w	10a0a <_malloc_r+0x3fa>
   10780:	ldr	r3, [r4, #4]
   10782:	ldr	r1, [r4, #12]
   10784:	ldr	r5, [r4, #8]
   10786:	bic.w	r3, r3, #3
   1078a:	add	r3, r4
   1078c:	mov	r0, r6
   1078e:	ldr	r2, [r3, #4]
   10790:	str	r1, [r5, #12]
   10792:	orr.w	r2, r2, #1
   10796:	str	r5, [r1, #8]
   10798:	str	r2, [r3, #4]
   1079a:	bl	10e1c <__malloc_unlock>
   1079e:	adds	r4, #8
   107a0:	mov	r0, r4
   107a2:	add	sp, #12
   107a4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   107a8:	movs	r4, #0
   107aa:	movs	r3, #12
   107ac:	mov	r0, r4
   107ae:	str	r3, [r6, #0]
   107b0:	add	sp, #12
   107b2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   107b6:	movs	r3, #128	; 0x80
   107b8:	mov.w	lr, #64	; 0x40
   107bc:	movs	r0, #63	; 0x3f
   107be:	b.n	10654 <_malloc_r+0x44>
   107c0:	mov	r0, lr
   107c2:	b.n	10680 <_malloc_r+0x70>
   107c4:	add	r3, r4
   107c6:	ldr	r1, [r4, #12]
   107c8:	ldr	r2, [r3, #4]
   107ca:	ldr	r5, [r4, #8]
   107cc:	orr.w	r2, r2, #1
   107d0:	str	r1, [r5, #12]
   107d2:	mov	r0, r6
   107d4:	str	r5, [r1, #8]
   107d6:	str	r2, [r3, #4]
   107d8:	bl	10e1c <__malloc_unlock>
   107dc:	adds	r4, #8
   107de:	mov	r0, r4
   107e0:	add	sp, #12
   107e2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   107e6:	add	r3, r4
   107e8:	mov	r0, r6
   107ea:	ldr	r2, [r3, #4]
   107ec:	orr.w	r2, r2, #1
   107f0:	str	r2, [r3, #4]
   107f2:	bl	10e1c <__malloc_unlock>
   107f6:	adds	r4, #8
   107f8:	mov	r0, r4
   107fa:	add	sp, #12
   107fc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10800:	ldr	r4, [r7, #8]
   10802:	ldr	r3, [r4, #4]
   10804:	bic.w	r8, r3, #3
   10808:	cmp	r8, r5
   1080a:	bcc.n	10816 <_malloc_r+0x206>
   1080c:	rsb	r3, r5, r8
   10810:	cmp	r3, #15
   10812:	bgt.w	1092e <_malloc_r+0x31e>
   10816:	ldr	r3, [pc, #340]	; (1096c <_malloc_r+0x35c>)
   10818:	ldr.w	r9, [pc, #352]	; 1097c <_malloc_r+0x36c>
   1081c:	ldr	r2, [r3, #0]
   1081e:	ldr.w	r3, [r9]
   10822:	adds	r3, #1
   10824:	add	r2, r5
   10826:	add.w	sl, r4, r8
   1082a:	beq.w	10aee <_malloc_r+0x4de>
   1082e:	add.w	r2, r2, #4096	; 0x1000
   10832:	adds	r2, #15
   10834:	bic.w	r2, r2, #4080	; 0xff0
   10838:	bic.w	r2, r2, #15
   1083c:	mov	r1, r2
   1083e:	mov	r0, r6
   10840:	str	r2, [sp, #4]
   10842:	bl	11200 <_sbrk_r>
   10846:	cmp.w	r0, #4294967295
   1084a:	mov	fp, r0
   1084c:	ldr	r2, [sp, #4]
   1084e:	beq.w	10b02 <_malloc_r+0x4f2>
   10852:	cmp	sl, r0
   10854:	bhi.w	10a50 <_malloc_r+0x440>
   10858:	ldr	r3, [pc, #276]	; (10970 <_malloc_r+0x360>)
   1085a:	ldr	r1, [r3, #0]
   1085c:	cmp	sl, fp
   1085e:	add	r1, r2
   10860:	str	r1, [r3, #0]
   10862:	beq.w	10b0c <_malloc_r+0x4fc>
   10866:	ldr.w	r0, [r9]
   1086a:	ldr.w	lr, [pc, #272]	; 1097c <_malloc_r+0x36c>
   1086e:	adds	r0, #1
   10870:	ittet	ne
   10872:	rsbne	sl, sl, fp
   10876:	addne	r1, sl
   10878:	streq.w	fp, [lr]
   1087c:	strne	r1, [r3, #0]
   1087e:	ands.w	r1, fp, #7
   10882:	beq.w	10ab4 <_malloc_r+0x4a4>
   10886:	rsb	r0, r1, #8
   1088a:	rsb	r1, r1, #4096	; 0x1000
   1088e:	add	fp, r0
   10890:	adds	r1, #8
   10892:	add	r2, fp
   10894:	ubfx	r2, r2, #0, #12
   10898:	rsb	r9, r2, r1
   1089c:	mov	r1, r9
   1089e:	mov	r0, r6
   108a0:	str	r3, [sp, #4]
   108a2:	bl	11200 <_sbrk_r>
   108a6:	adds	r3, r0, #1
   108a8:	ldr	r3, [sp, #4]
   108aa:	beq.w	10b2c <_malloc_r+0x51c>
   108ae:	rsb	r2, fp, r0
   108b2:	add	r2, r9
   108b4:	orr.w	r2, r2, #1
   108b8:	ldr	r1, [r3, #0]
   108ba:	str.w	fp, [r7, #8]
   108be:	add	r1, r9
   108c0:	cmp	r4, r7
   108c2:	str.w	r2, [fp, #4]
   108c6:	str	r1, [r3, #0]
   108c8:	ldr.w	r9, [pc, #164]	; 10970 <_malloc_r+0x360>
   108cc:	beq.n	108fc <_malloc_r+0x2ec>
   108ce:	cmp.w	r8, #15
   108d2:	bls.w	10ad0 <_malloc_r+0x4c0>
   108d6:	ldr	r2, [r4, #4]
   108d8:	sub.w	r3, r8, #12
   108dc:	bic.w	r3, r3, #7
   108e0:	adds	r0, r4, r3
   108e2:	and.w	r2, r2, #1
   108e6:	mov.w	lr, #5
   108ea:	orrs	r2, r3
   108ec:	cmp	r3, #15
   108ee:	str	r2, [r4, #4]
   108f0:	str.w	lr, [r0, #4]
   108f4:	str.w	lr, [r0, #8]
   108f8:	bhi.w	10b34 <_malloc_r+0x524>
   108fc:	ldr	r3, [pc, #116]	; (10974 <_malloc_r+0x364>)
   108fe:	ldr	r4, [r7, #8]
   10900:	ldr	r2, [r3, #0]
   10902:	cmp	r1, r2
   10904:	it	hi
   10906:	strhi	r1, [r3, #0]
   10908:	ldr	r3, [pc, #108]	; (10978 <_malloc_r+0x368>)
   1090a:	ldr	r2, [r3, #0]
   1090c:	cmp	r1, r2
   1090e:	ldr	r2, [r4, #4]
   10910:	it	hi
   10912:	strhi	r1, [r3, #0]
   10914:	bic.w	r2, r2, #3
   10918:	cmp	r5, r2
   1091a:	sub.w	r3, r2, r5
   1091e:	bhi.n	10924 <_malloc_r+0x314>
   10920:	cmp	r3, #15
   10922:	bgt.n	1092e <_malloc_r+0x31e>
   10924:	mov	r0, r6
   10926:	bl	10e1c <__malloc_unlock>
   1092a:	movs	r4, #0
   1092c:	b.n	107a0 <_malloc_r+0x190>
   1092e:	adds	r2, r4, r5
   10930:	orr.w	r3, r3, #1
   10934:	orr.w	r5, r5, #1
   10938:	str	r5, [r4, #4]
   1093a:	mov	r0, r6
   1093c:	str	r2, [r7, #8]
   1093e:	str	r3, [r2, #4]
   10940:	bl	10e1c <__malloc_unlock>
   10944:	adds	r4, #8
   10946:	mov	r0, r4
   10948:	add	sp, #12
   1094a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1094e:	cmp	r3, #20
   10950:	bls.n	10a36 <_malloc_r+0x426>
   10952:	cmp	r3, #84	; 0x54
   10954:	bhi.w	10aa0 <_malloc_r+0x490>
   10958:	lsrs	r0, r5, #12
   1095a:	add.w	lr, r0, #111	; 0x6f
   1095e:	mov.w	r3, lr, lsl #1
   10962:	adds	r0, #110	; 0x6e
   10964:	b.n	10654 <_malloc_r+0x44>
   10966:	nop
   10968:	.word	0x20001200
   1096c:	.word	0x200063c4
   10970:	.word	0x200063c8
   10974:	.word	0x200063c0
   10978:	.word	0x200063bc
   1097c:	.word	0x2000160c
   10980:	lsrs	r2, r3, #9
   10982:	cmp	r2, #4
   10984:	bls.n	10a44 <_malloc_r+0x434>
   10986:	cmp	r2, #20
   10988:	bhi.w	10af2 <_malloc_r+0x4e2>
   1098c:	add.w	r1, r2, #92	; 0x5c
   10990:	lsls	r1, r1, #1
   10992:	adds	r2, #91	; 0x5b
   10994:	add.w	ip, r7, r1, lsl #2
   10998:	ldr.w	r1, [r7, r1, lsl #2]
   1099c:	ldr.w	r8, [pc, #476]	; 10b7c <_malloc_r+0x56c>
   109a0:	sub.w	ip, ip, #8
   109a4:	cmp	ip, r1
   109a6:	beq.w	10aba <_malloc_r+0x4aa>
   109aa:	ldr	r2, [r1, #4]
   109ac:	bic.w	r2, r2, #3
   109b0:	cmp	r3, r2
   109b2:	bcs.n	109ba <_malloc_r+0x3aa>
   109b4:	ldr	r1, [r1, #8]
   109b6:	cmp	ip, r1
   109b8:	bne.n	109aa <_malloc_r+0x39a>
   109ba:	ldr.w	ip, [r1, #12]
   109be:	ldr	r2, [r7, #4]
   109c0:	str.w	ip, [r4, #12]
   109c4:	str	r1, [r4, #8]
   109c6:	str.w	r4, [ip, #8]
   109ca:	str	r4, [r1, #12]
   109cc:	b.n	106e0 <_malloc_r+0xd0>
   109ce:	adds	r3, r4, r5
   109d0:	orr.w	r7, r2, #1
   109d4:	orr.w	r5, r5, #1
   109d8:	str	r5, [r4, #4]
   109da:	mov	r0, r6
   109dc:	str	r3, [r1, #20]
   109de:	str	r3, [r1, #16]
   109e0:	str.w	lr, [r3, #12]
   109e4:	str.w	lr, [r3, #8]
   109e8:	str	r7, [r3, #4]
   109ea:	str	r2, [r3, r2]
   109ec:	adds	r4, #8
   109ee:	bl	10e1c <__malloc_unlock>
   109f2:	b.n	107a0 <_malloc_r+0x190>
   109f4:	ldr	r2, [r1, #4]
   109f6:	b.n	106e0 <_malloc_r+0xd0>
   109f8:	add.w	r8, r8, #1
   109fc:	tst.w	r8, #3
   10a00:	add.w	ip, ip, #8
   10a04:	bne.w	10706 <_malloc_r+0xf6>
   10a08:	b.n	10a6c <_malloc_r+0x45c>
   10a0a:	ldr	r4, [r3, #12]
   10a0c:	cmp	r3, r4
   10a0e:	it	eq
   10a10:	addeq	r0, #2
   10a12:	beq.w	10680 <_malloc_r+0x70>
   10a16:	b.n	10780 <_malloc_r+0x170>
   10a18:	add	r3, r1
   10a1a:	mov	r4, r1
   10a1c:	ldr	r2, [r3, #4]
   10a1e:	ldr	r1, [r1, #12]
   10a20:	ldr.w	r5, [r4, #8]!
   10a24:	orr.w	r2, r2, #1
   10a28:	str	r2, [r3, #4]
   10a2a:	mov	r0, r6
   10a2c:	str	r1, [r5, #12]
   10a2e:	str	r5, [r1, #8]
   10a30:	bl	10e1c <__malloc_unlock>
   10a34:	b.n	107a0 <_malloc_r+0x190>
   10a36:	add.w	lr, r3, #92	; 0x5c
   10a3a:	add.w	r0, r3, #91	; 0x5b
   10a3e:	mov.w	r3, lr, lsl #1
   10a42:	b.n	10654 <_malloc_r+0x44>
   10a44:	lsrs	r2, r3, #6
   10a46:	add.w	r1, r2, #57	; 0x39
   10a4a:	lsls	r1, r1, #1
   10a4c:	adds	r2, #56	; 0x38
   10a4e:	b.n	10994 <_malloc_r+0x384>
   10a50:	cmp	r4, r7
   10a52:	ldr	r3, [pc, #296]	; (10b7c <_malloc_r+0x56c>)
   10a54:	beq.w	10858 <_malloc_r+0x248>
   10a58:	ldr	r4, [r3, #8]
   10a5a:	ldr	r2, [r4, #4]
   10a5c:	bic.w	r2, r2, #3
   10a60:	b.n	10918 <_malloc_r+0x308>
   10a62:	ldr.w	r3, [r9], #-8
   10a66:	cmp	r9, r3
   10a68:	bne.w	10b70 <_malloc_r+0x560>
   10a6c:	tst.w	r0, #3
   10a70:	add.w	r0, r0, #4294967295
   10a74:	bne.n	10a62 <_malloc_r+0x452>
   10a76:	ldr	r3, [r7, #4]
   10a78:	bic.w	r3, r3, r4
   10a7c:	str	r3, [r7, #4]
   10a7e:	lsls	r4, r4, #1
   10a80:	cmp	r4, r3
   10a82:	bhi.w	10800 <_malloc_r+0x1f0>
   10a86:	cmp	r4, #0
   10a88:	beq.w	10800 <_malloc_r+0x1f0>
   10a8c:	tst	r4, r3
   10a8e:	mov	r0, r8
   10a90:	bne.w	106fe <_malloc_r+0xee>
   10a94:	lsls	r4, r4, #1
   10a96:	tst	r4, r3
   10a98:	add.w	r0, r0, #4
   10a9c:	beq.n	10a94 <_malloc_r+0x484>
   10a9e:	b.n	106fe <_malloc_r+0xee>
   10aa0:	cmp.w	r3, #340	; 0x154
   10aa4:	bhi.n	10ad8 <_malloc_r+0x4c8>
   10aa6:	lsrs	r0, r5, #15
   10aa8:	add.w	lr, r0, #120	; 0x78
   10aac:	mov.w	r3, lr, lsl #1
   10ab0:	adds	r0, #119	; 0x77
   10ab2:	b.n	10654 <_malloc_r+0x44>
   10ab4:	mov.w	r1, #4096	; 0x1000
   10ab8:	b.n	10892 <_malloc_r+0x282>
   10aba:	movs	r1, #1
   10abc:	ldr.w	r3, [r8, #4]
   10ac0:	asrs	r2, r2, #2
   10ac2:	lsl.w	r2, r1, r2
   10ac6:	orrs	r2, r3
   10ac8:	str.w	r2, [r8, #4]
   10acc:	mov	r1, ip
   10ace:	b.n	109c0 <_malloc_r+0x3b0>
   10ad0:	movs	r3, #1
   10ad2:	str.w	r3, [fp, #4]
   10ad6:	b.n	10924 <_malloc_r+0x314>
   10ad8:	movw	r2, #1364	; 0x554
   10adc:	cmp	r3, r2
   10ade:	bhi.n	10b22 <_malloc_r+0x512>
   10ae0:	lsrs	r0, r5, #18
   10ae2:	add.w	lr, r0, #125	; 0x7d
   10ae6:	mov.w	r3, lr, lsl #1
   10aea:	adds	r0, #124	; 0x7c
   10aec:	b.n	10654 <_malloc_r+0x44>
   10aee:	adds	r2, #16
   10af0:	b.n	1083c <_malloc_r+0x22c>
   10af2:	cmp	r2, #84	; 0x54
   10af4:	bhi.n	10b44 <_malloc_r+0x534>
   10af6:	lsrs	r2, r3, #12
   10af8:	add.w	r1, r2, #111	; 0x6f
   10afc:	lsls	r1, r1, #1
   10afe:	adds	r2, #110	; 0x6e
   10b00:	b.n	10994 <_malloc_r+0x384>
   10b02:	ldr	r4, [r7, #8]
   10b04:	ldr	r2, [r4, #4]
   10b06:	bic.w	r2, r2, #3
   10b0a:	b.n	10918 <_malloc_r+0x308>
   10b0c:	ubfx	r0, sl, #0, #12
   10b10:	cmp	r0, #0
   10b12:	bne.w	10866 <_malloc_r+0x256>
   10b16:	add	r2, r8
   10b18:	ldr	r3, [r7, #8]
   10b1a:	orr.w	r2, r2, #1
   10b1e:	str	r2, [r3, #4]
   10b20:	b.n	108fc <_malloc_r+0x2ec>
   10b22:	movs	r3, #254	; 0xfe
   10b24:	mov.w	lr, #127	; 0x7f
   10b28:	movs	r0, #126	; 0x7e
   10b2a:	b.n	10654 <_malloc_r+0x44>
   10b2c:	movs	r2, #1
   10b2e:	mov.w	r9, #0
   10b32:	b.n	108b8 <_malloc_r+0x2a8>
   10b34:	add.w	r1, r4, #8
   10b38:	mov	r0, r6
   10b3a:	bl	13e70 <_free_r>
   10b3e:	ldr.w	r1, [r9]
   10b42:	b.n	108fc <_malloc_r+0x2ec>
   10b44:	cmp.w	r2, #340	; 0x154
   10b48:	bhi.n	10b56 <_malloc_r+0x546>
   10b4a:	lsrs	r2, r3, #15
   10b4c:	add.w	r1, r2, #120	; 0x78
   10b50:	lsls	r1, r1, #1
   10b52:	adds	r2, #119	; 0x77
   10b54:	b.n	10994 <_malloc_r+0x384>
   10b56:	movw	r1, #1364	; 0x554
   10b5a:	cmp	r2, r1
   10b5c:	bhi.n	10b6a <_malloc_r+0x55a>
   10b5e:	lsrs	r2, r3, #18
   10b60:	add.w	r1, r2, #125	; 0x7d
   10b64:	lsls	r1, r1, #1
   10b66:	adds	r2, #124	; 0x7c
   10b68:	b.n	10994 <_malloc_r+0x384>
   10b6a:	movs	r1, #254	; 0xfe
   10b6c:	movs	r2, #126	; 0x7e
   10b6e:	b.n	10994 <_malloc_r+0x384>
   10b70:	ldr	r3, [r7, #4]
   10b72:	b.n	10a7e <_malloc_r+0x46e>
   10b74:	lsrs	r0, r5, #3
   10b76:	adds	r3, r0, #1
   10b78:	lsls	r3, r3, #1
   10b7a:	b.n	1076e <_malloc_r+0x15e>
   10b7c:	.word	0x20001200

00010b80 <__ascii_mbtowc>:
   10b80:	sub	sp, #8
   10b82:	cbz	r1, 10b98 <__ascii_mbtowc+0x18>
   10b84:	cbz	r2, 10b9e <__ascii_mbtowc+0x1e>
   10b86:	cbz	r3, 10ba4 <__ascii_mbtowc+0x24>
   10b88:	ldrb	r3, [r2, #0]
   10b8a:	str	r3, [r1, #0]
   10b8c:	ldrb	r2, [r2, #0]
   10b8e:	adds	r0, r2, #0
   10b90:	it	ne
   10b92:	movne	r0, #1
   10b94:	add	sp, #8
   10b96:	bx	lr
   10b98:	add	r1, sp, #4
   10b9a:	cmp	r2, #0
   10b9c:	bne.n	10b86 <__ascii_mbtowc+0x6>
   10b9e:	mov	r0, r2
   10ba0:	add	sp, #8
   10ba2:	bx	lr
   10ba4:	mvn.w	r0, #1
   10ba8:	b.n	10b94 <__ascii_mbtowc+0x14>
   10baa:	nop
   10bac:	movs	r0, r0
	...

00010bb0 <memchr>:
   10bb0:	and.w	r1, r1, #255	; 0xff
   10bb4:	cmp	r2, #16
   10bb6:	blt.n	10c10 <memchr+0x60>
   10bb8:	tst.w	r0, #7
   10bbc:	beq.n	10bd0 <memchr+0x20>
   10bbe:	ldrb.w	r3, [r0], #1
   10bc2:	subs	r2, #1
   10bc4:	cmp	r3, r1
   10bc6:	beq.n	10c24 <memchr+0x74>
   10bc8:	tst.w	r0, #7
   10bcc:	cbz	r2, 10c20 <memchr+0x70>
   10bce:	bne.n	10bbe <memchr+0xe>
   10bd0:	push	{r4, r5, r6, r7}
   10bd2:	orr.w	r1, r1, r1, lsl #8
   10bd6:	orr.w	r1, r1, r1, lsl #16
   10bda:	bic.w	r4, r2, #7
   10bde:	mvns.w	r7, #0
   10be2:	movs	r3, #0
   10be4:	ldrd	r5, r6, [r0], #8
   10be8:	subs	r4, #8
   10bea:	eor.w	r5, r5, r1
   10bee:	eor.w	r6, r6, r1
   10bf2:	uadd8	r5, r5, r7
   10bf6:	sel	r5, r3, r7
   10bfa:	uadd8	r6, r6, r7
   10bfe:	sel	r6, r5, r7
   10c02:	cbnz	r6, 10c28 <memchr+0x78>
   10c04:	bne.n	10be4 <memchr+0x34>
   10c06:	pop	{r4, r5, r6, r7}
   10c08:	and.w	r1, r1, #255	; 0xff
   10c0c:	and.w	r2, r2, #7
   10c10:	cbz	r2, 10c20 <memchr+0x70>
   10c12:	ldrb.w	r3, [r0], #1
   10c16:	subs	r2, #1
   10c18:	eor.w	r3, r3, r1
   10c1c:	cbz	r3, 10c24 <memchr+0x74>
   10c1e:	bne.n	10c12 <memchr+0x62>
   10c20:	movs	r0, #0
   10c22:	bx	lr
   10c24:	subs	r0, #1
   10c26:	bx	lr
   10c28:	cmp	r5, #0
   10c2a:	itte	eq
   10c2c:	moveq	r5, r6
   10c2e:	subeq	r0, #3
   10c30:	subne	r0, #7
   10c32:	tst.w	r5, #1
   10c36:	bne.n	10c48 <memchr+0x98>
   10c38:	adds	r0, #1
   10c3a:	tst.w	r5, #256	; 0x100
   10c3e:	ittt	eq
   10c40:	addeq	r0, #1
   10c42:	tsteq.w	r5, #98304	; 0x18000
   10c46:	addeq	r0, #1
   10c48:	pop	{r4, r5, r6, r7}
   10c4a:	subs	r0, #1
   10c4c:	bx	lr
   10c4e:	nop

00010c50 <memcmp>:
   10c50:	cmp	r2, #3
   10c52:	push	{r4, r5, r6}
   10c54:	bls.n	10ca4 <memcmp+0x54>
   10c56:	orr.w	r3, r0, r1
   10c5a:	lsls	r3, r3, #30
   10c5c:	beq.n	10c82 <memcmp+0x32>
   10c5e:	ldrb	r4, [r0, #0]
   10c60:	ldrb	r5, [r1, #0]
   10c62:	cmp	r4, r5
   10c64:	bne.n	10cac <memcmp+0x5c>
   10c66:	add	r2, r0
   10c68:	adds	r3, r0, #1
   10c6a:	b.n	10c78 <memcmp+0x28>
   10c6c:	ldrb.w	r4, [r3], #1
   10c70:	ldrb.w	r5, [r1, #1]!
   10c74:	cmp	r4, r5
   10c76:	bne.n	10cac <memcmp+0x5c>
   10c78:	cmp	r3, r2
   10c7a:	bne.n	10c6c <memcmp+0x1c>
   10c7c:	movs	r0, #0
   10c7e:	pop	{r4, r5, r6}
   10c80:	bx	lr
   10c82:	mov	r4, r1
   10c84:	mov	r3, r0
   10c86:	ldr	r6, [r3, #0]
   10c88:	ldr	r5, [r4, #0]
   10c8a:	cmp	r6, r5
   10c8c:	mov	r0, r3
   10c8e:	mov	r1, r4
   10c90:	add.w	r3, r3, #4
   10c94:	add.w	r4, r4, #4
   10c98:	bne.n	10c5e <memcmp+0xe>
   10c9a:	subs	r2, #4
   10c9c:	cmp	r2, #3
   10c9e:	mov	r0, r3
   10ca0:	mov	r1, r4
   10ca2:	bhi.n	10c86 <memcmp+0x36>
   10ca4:	cmp	r2, #0
   10ca6:	bne.n	10c5e <memcmp+0xe>
   10ca8:	mov	r0, r2
   10caa:	b.n	10c7e <memcmp+0x2e>
   10cac:	subs	r0, r4, r5
   10cae:	pop	{r4, r5, r6}
   10cb0:	bx	lr
   10cb2:	nop

00010cb4 <memmove>:
   10cb4:	cmp	r0, r1
   10cb6:	push	{r4, r5, r6, r7, lr}
   10cb8:	bls.n	10cd6 <memmove+0x22>
   10cba:	adds	r3, r1, r2
   10cbc:	cmp	r0, r3
   10cbe:	bcs.n	10cd6 <memmove+0x22>
   10cc0:	adds	r1, r0, r2
   10cc2:	cmp	r2, #0
   10cc4:	beq.n	10d6a <memmove+0xb6>
   10cc6:	subs	r2, r3, r2
   10cc8:	ldrb.w	r4, [r3, #-1]!
   10ccc:	strb.w	r4, [r1, #-1]!
   10cd0:	cmp	r3, r2
   10cd2:	bne.n	10cc8 <memmove+0x14>
   10cd4:	pop	{r4, r5, r6, r7, pc}
   10cd6:	cmp	r2, #15
   10cd8:	bls.n	10d6c <memmove+0xb8>
   10cda:	orr.w	r3, r1, r0
   10cde:	lsls	r3, r3, #30
   10ce0:	bne.n	10d70 <memmove+0xbc>
   10ce2:	add.w	r4, r0, #16
   10ce6:	add.w	r3, r1, #16
   10cea:	mov	r5, r2
   10cec:	ldr.w	r6, [r3, #-16]
   10cf0:	str.w	r6, [r4, #-16]
   10cf4:	ldr.w	r6, [r3, #-12]
   10cf8:	str.w	r6, [r4, #-12]
   10cfc:	ldr.w	r6, [r3, #-8]
   10d00:	str.w	r6, [r4, #-8]
   10d04:	subs	r5, #16
   10d06:	ldr.w	r6, [r3, #-4]
   10d0a:	str.w	r6, [r4, #-4]
   10d0e:	cmp	r5, #15
   10d10:	add.w	r3, r3, #16
   10d14:	add.w	r4, r4, #16
   10d18:	bhi.n	10cec <memmove+0x38>
   10d1a:	sub.w	r3, r2, #16
   10d1e:	bic.w	r3, r3, #15
   10d22:	and.w	lr, r2, #15
   10d26:	adds	r3, #16
   10d28:	cmp.w	lr, #3
   10d2c:	add	r1, r3
   10d2e:	add	r3, r0
   10d30:	bls.n	10d76 <memmove+0xc2>
   10d32:	subs	r6, r3, #4
   10d34:	mov	r5, r1
   10d36:	mov	r4, lr
   10d38:	subs	r4, #4
   10d3a:	ldr.w	r7, [r5], #4
   10d3e:	str.w	r7, [r6, #4]!
   10d42:	cmp	r4, #3
   10d44:	bhi.n	10d38 <memmove+0x84>
   10d46:	sub.w	r4, lr, #4
   10d4a:	bic.w	r4, r4, #3
   10d4e:	adds	r4, #4
   10d50:	add	r3, r4
   10d52:	add	r1, r4
   10d54:	and.w	r2, r2, #3
   10d58:	cbz	r2, 10d74 <memmove+0xc0>
   10d5a:	subs	r3, #1
   10d5c:	add	r2, r1
   10d5e:	ldrb.w	r4, [r1], #1
   10d62:	strb.w	r4, [r3, #1]!
   10d66:	cmp	r2, r1
   10d68:	bne.n	10d5e <memmove+0xaa>
   10d6a:	pop	{r4, r5, r6, r7, pc}
   10d6c:	mov	r3, r0
   10d6e:	b.n	10d58 <memmove+0xa4>
   10d70:	mov	r3, r0
   10d72:	b.n	10d5a <memmove+0xa6>
   10d74:	pop	{r4, r5, r6, r7, pc}
   10d76:	mov	r2, lr
   10d78:	b.n	10d58 <memmove+0xa4>
   10d7a:	nop

00010d7c <memset>:
   10d7c:	push	{r4, r5, r6}
   10d7e:	lsls	r4, r0, #30
   10d80:	beq.n	10e10 <memset+0x94>
   10d82:	subs	r4, r2, #1
   10d84:	cmp	r2, #0
   10d86:	beq.n	10e0c <memset+0x90>
   10d88:	uxtb	r5, r1
   10d8a:	mov	r3, r0
   10d8c:	b.n	10d94 <memset+0x18>
   10d8e:	subs	r2, r4, #1
   10d90:	cbz	r4, 10e0c <memset+0x90>
   10d92:	mov	r4, r2
   10d94:	strb.w	r5, [r3], #1
   10d98:	lsls	r2, r3, #30
   10d9a:	bne.n	10d8e <memset+0x12>
   10d9c:	cmp	r4, #3
   10d9e:	bls.n	10dfe <memset+0x82>
   10da0:	uxtb	r5, r1
   10da2:	orr.w	r5, r5, r5, lsl #8
   10da6:	cmp	r4, #15
   10da8:	orr.w	r5, r5, r5, lsl #16
   10dac:	bls.n	10de2 <memset+0x66>
   10dae:	add.w	r2, r3, #16
   10db2:	mov	r6, r4
   10db4:	subs	r6, #16
   10db6:	cmp	r6, #15
   10db8:	str.w	r5, [r2, #-16]
   10dbc:	str.w	r5, [r2, #-12]
   10dc0:	str.w	r5, [r2, #-8]
   10dc4:	str.w	r5, [r2, #-4]
   10dc8:	add.w	r2, r2, #16
   10dcc:	bhi.n	10db4 <memset+0x38>
   10dce:	sub.w	r2, r4, #16
   10dd2:	bic.w	r2, r2, #15
   10dd6:	and.w	r4, r4, #15
   10dda:	adds	r2, #16
   10ddc:	cmp	r4, #3
   10dde:	add	r3, r2
   10de0:	bls.n	10dfe <memset+0x82>
   10de2:	mov	r6, r3
   10de4:	mov	r2, r4
   10de6:	subs	r2, #4
   10de8:	cmp	r2, #3
   10dea:	str.w	r5, [r6], #4
   10dee:	bhi.n	10de6 <memset+0x6a>
   10df0:	subs	r2, r4, #4
   10df2:	bic.w	r2, r2, #3
   10df6:	adds	r2, #4
   10df8:	add	r3, r2
   10dfa:	and.w	r4, r4, #3
   10dfe:	cbz	r4, 10e0c <memset+0x90>
   10e00:	uxtb	r1, r1
   10e02:	add	r4, r3
   10e04:	strb.w	r1, [r3], #1
   10e08:	cmp	r3, r4
   10e0a:	bne.n	10e04 <memset+0x88>
   10e0c:	pop	{r4, r5, r6}
   10e0e:	bx	lr
   10e10:	mov	r4, r2
   10e12:	mov	r3, r0
   10e14:	b.n	10d9c <memset+0x20>
   10e16:	nop

00010e18 <__malloc_lock>:
   10e18:	bx	lr
   10e1a:	nop

00010e1c <__malloc_unlock>:
   10e1c:	bx	lr
   10e1e:	nop

00010e20 <_realloc_r>:
   10e20:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10e24:	mov	r7, r2
   10e26:	sub	sp, #12
   10e28:	cmp	r1, #0
   10e2a:	beq.w	10fb0 <_realloc_r+0x190>
   10e2e:	mov	r6, r1
   10e30:	mov	r9, r0
   10e32:	add.w	r5, r7, #11
   10e36:	bl	10e18 <__malloc_lock>
   10e3a:	ldr.w	lr, [r6, #-4]
   10e3e:	cmp	r5, #22
   10e40:	bic.w	r4, lr, #3
   10e44:	sub.w	r8, r6, #8
   10e48:	bhi.n	10ecc <_realloc_r+0xac>
   10e4a:	movs	r2, #16
   10e4c:	mov	r5, r2
   10e4e:	cmp	r7, r5
   10e50:	bhi.n	10ed6 <_realloc_r+0xb6>
   10e52:	cmp	r4, r2
   10e54:	bge.n	10f42 <_realloc_r+0x122>
   10e56:	ldr	r3, [pc, #804]	; (1117c <_realloc_r+0x35c>)
   10e58:	ldr	r1, [r3, #8]
   10e5a:	add.w	r0, r8, r4
   10e5e:	cmp	r0, r1
   10e60:	ldr	r1, [r0, #4]
   10e62:	beq.w	11018 <_realloc_r+0x1f8>
   10e66:	bic.w	r3, r1, #1
   10e6a:	add	r3, r0
   10e6c:	ldr	r3, [r3, #4]
   10e6e:	lsls	r3, r3, #31
   10e70:	bpl.n	10f6e <_realloc_r+0x14e>
   10e72:	tst.w	lr, #1
   10e76:	beq.n	10ee4 <_realloc_r+0xc4>
   10e78:	mov	r1, r7
   10e7a:	mov	r0, r9
   10e7c:	bl	10610 <_malloc_r>
   10e80:	mov	r7, r0
   10e82:	cbz	r0, 10ebe <_realloc_r+0x9e>
   10e84:	ldr.w	r3, [r6, #-4]
   10e88:	bic.w	r3, r3, #1
   10e8c:	add	r3, r8
   10e8e:	sub.w	r2, r0, #8
   10e92:	cmp	r2, r3
   10e94:	beq.w	11120 <_realloc_r+0x300>
   10e98:	subs	r2, r4, #4
   10e9a:	cmp	r2, #36	; 0x24
   10e9c:	bhi.w	11102 <_realloc_r+0x2e2>
   10ea0:	cmp	r2, #19
   10ea2:	bhi.w	110ae <_realloc_r+0x28e>
   10ea6:	mov	r3, r0
   10ea8:	mov	r2, r6
   10eaa:	ldr	r1, [r2, #0]
   10eac:	str	r1, [r3, #0]
   10eae:	ldr	r1, [r2, #4]
   10eb0:	str	r1, [r3, #4]
   10eb2:	ldr	r2, [r2, #8]
   10eb4:	str	r2, [r3, #8]
   10eb6:	mov	r1, r6
   10eb8:	mov	r0, r9
   10eba:	bl	13e70 <_free_r>
   10ebe:	mov	r0, r9
   10ec0:	bl	10e1c <__malloc_unlock>
   10ec4:	mov	r0, r7
   10ec6:	add	sp, #12
   10ec8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10ecc:	bic.w	r5, r5, #7
   10ed0:	cmp	r5, #0
   10ed2:	mov	r2, r5
   10ed4:	bge.n	10e4e <_realloc_r+0x2e>
   10ed6:	movs	r3, #12
   10ed8:	movs	r0, #0
   10eda:	str.w	r3, [r9]
   10ede:	add	sp, #12
   10ee0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10ee4:	ldr.w	r3, [r6, #-8]
   10ee8:	rsb	sl, r3, r8
   10eec:	ldr.w	r3, [sl, #4]
   10ef0:	bic.w	ip, r3, #3
   10ef4:	add.w	r3, r4, ip
   10ef8:	cmp	r3, r2
   10efa:	blt.n	10e78 <_realloc_r+0x58>
   10efc:	mov	r7, sl
   10efe:	ldr.w	r1, [sl, #12]
   10f02:	ldr.w	r0, [r7, #8]!
   10f06:	subs	r2, r4, #4
   10f08:	cmp	r2, #36	; 0x24
   10f0a:	str	r1, [r0, #12]
   10f0c:	str	r0, [r1, #8]
   10f0e:	bhi.w	11140 <_realloc_r+0x320>
   10f12:	cmp	r2, #19
   10f14:	bls.w	1113c <_realloc_r+0x31c>
   10f18:	ldr	r1, [r6, #0]
   10f1a:	str.w	r1, [sl, #8]
   10f1e:	ldr	r1, [r6, #4]
   10f20:	str.w	r1, [sl, #12]
   10f24:	cmp	r2, #27
   10f26:	bhi.w	11180 <_realloc_r+0x360>
   10f2a:	adds	r6, #8
   10f2c:	add.w	r2, sl, #16
   10f30:	ldr	r1, [r6, #0]
   10f32:	str	r1, [r2, #0]
   10f34:	ldr	r1, [r6, #4]
   10f36:	str	r1, [r2, #4]
   10f38:	ldr	r1, [r6, #8]
   10f3a:	str	r1, [r2, #8]
   10f3c:	mov	r6, r7
   10f3e:	mov	r4, r3
   10f40:	mov	r8, sl
   10f42:	subs	r3, r4, r5
   10f44:	cmp	r3, #15
   10f46:	bhi.n	10f84 <_realloc_r+0x164>
   10f48:	ldr.w	r3, [r8, #4]
   10f4c:	and.w	r3, r3, #1
   10f50:	orrs	r3, r4
   10f52:	add	r4, r8
   10f54:	str.w	r3, [r8, #4]
   10f58:	ldr	r3, [r4, #4]
   10f5a:	orr.w	r3, r3, #1
   10f5e:	str	r3, [r4, #4]
   10f60:	mov	r0, r9
   10f62:	bl	10e1c <__malloc_unlock>
   10f66:	mov	r0, r6
   10f68:	add	sp, #12
   10f6a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10f6e:	bic.w	r1, r1, #3
   10f72:	add	r1, r4
   10f74:	cmp	r1, r2
   10f76:	blt.n	10fbc <_realloc_r+0x19c>
   10f78:	ldr	r3, [r0, #12]
   10f7a:	ldr	r2, [r0, #8]
   10f7c:	mov	r4, r1
   10f7e:	str	r3, [r2, #12]
   10f80:	str	r2, [r3, #8]
   10f82:	b.n	10f42 <_realloc_r+0x122>
   10f84:	ldr.w	r2, [r8, #4]
   10f88:	add.w	r1, r8, r5
   10f8c:	and.w	r2, r2, #1
   10f90:	orrs	r5, r2
   10f92:	orr.w	r2, r3, #1
   10f96:	add	r3, r1
   10f98:	str.w	r5, [r8, #4]
   10f9c:	str	r2, [r1, #4]
   10f9e:	ldr	r2, [r3, #4]
   10fa0:	orr.w	r2, r2, #1
   10fa4:	adds	r1, #8
   10fa6:	str	r2, [r3, #4]
   10fa8:	mov	r0, r9
   10faa:	bl	13e70 <_free_r>
   10fae:	b.n	10f60 <_realloc_r+0x140>
   10fb0:	mov	r1, r2
   10fb2:	add	sp, #12
   10fb4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10fb8:	b.w	10610 <_malloc_r>
   10fbc:	tst.w	lr, #1
   10fc0:	bne.w	10e78 <_realloc_r+0x58>
   10fc4:	ldr.w	r3, [r6, #-8]
   10fc8:	rsb	sl, r3, r8
   10fcc:	ldr.w	r3, [sl, #4]
   10fd0:	bic.w	ip, r3, #3
   10fd4:	add.w	lr, r1, ip
   10fd8:	cmp	lr, r2
   10fda:	blt.n	10ef4 <_realloc_r+0xd4>
   10fdc:	ldr	r3, [r0, #12]
   10fde:	ldr	r2, [r0, #8]
   10fe0:	mov	r7, sl
   10fe2:	str	r3, [r2, #12]
   10fe4:	str	r2, [r3, #8]
   10fe6:	ldr.w	r1, [r7, #8]!
   10fea:	ldr.w	r3, [sl, #12]
   10fee:	str	r3, [r1, #12]
   10ff0:	subs	r2, r4, #4
   10ff2:	cmp	r2, #36	; 0x24
   10ff4:	str	r1, [r3, #8]
   10ff6:	bhi.w	1112c <_realloc_r+0x30c>
   10ffa:	cmp	r2, #19
   10ffc:	bls.n	110c4 <_realloc_r+0x2a4>
   10ffe:	ldr	r3, [r6, #0]
   11000:	str.w	r3, [sl, #8]
   11004:	ldr	r3, [r6, #4]
   11006:	str.w	r3, [sl, #12]
   1100a:	cmp	r2, #27
   1100c:	bhi.w	11150 <_realloc_r+0x330>
   11010:	adds	r6, #8
   11012:	add.w	r3, sl, #16
   11016:	b.n	110c6 <_realloc_r+0x2a6>
   11018:	bic.w	fp, r1, #3
   1101c:	add	fp, r4
   1101e:	add.w	r0, r5, #16
   11022:	cmp	fp, r0
   11024:	bge.n	110da <_realloc_r+0x2ba>
   11026:	tst.w	lr, #1
   1102a:	bne.w	10e78 <_realloc_r+0x58>
   1102e:	ldr.w	r1, [r6, #-8]
   11032:	rsb	sl, r1, r8
   11036:	ldr.w	r1, [sl, #4]
   1103a:	bic.w	ip, r1, #3
   1103e:	add	fp, ip
   11040:	cmp	r0, fp
   11042:	bgt.w	10ef4 <_realloc_r+0xd4>
   11046:	mov	r7, sl
   11048:	ldr.w	r1, [sl, #12]
   1104c:	ldr.w	r0, [r7, #8]!
   11050:	subs	r2, r4, #4
   11052:	cmp	r2, #36	; 0x24
   11054:	str	r1, [r0, #12]
   11056:	str	r0, [r1, #8]
   11058:	bhi.w	111c4 <_realloc_r+0x3a4>
   1105c:	cmp	r2, #19
   1105e:	bls.w	111ac <_realloc_r+0x38c>
   11062:	ldr	r1, [r6, #0]
   11064:	str.w	r1, [sl, #8]
   11068:	ldr	r1, [r6, #4]
   1106a:	str.w	r1, [sl, #12]
   1106e:	cmp	r2, #27
   11070:	bhi.w	111d2 <_realloc_r+0x3b2>
   11074:	adds	r6, #8
   11076:	add.w	r2, sl, #16
   1107a:	ldr	r1, [r6, #0]
   1107c:	str	r1, [r2, #0]
   1107e:	ldr	r1, [r6, #4]
   11080:	str	r1, [r2, #4]
   11082:	ldr	r1, [r6, #8]
   11084:	str	r1, [r2, #8]
   11086:	add.w	r1, sl, r5
   1108a:	rsb	r2, r5, fp
   1108e:	orr.w	r2, r2, #1
   11092:	str	r1, [r3, #8]
   11094:	str	r2, [r1, #4]
   11096:	ldr.w	r3, [sl, #4]
   1109a:	and.w	r3, r3, #1
   1109e:	orrs	r5, r3
   110a0:	mov	r0, r9
   110a2:	str.w	r5, [sl, #4]
   110a6:	bl	10e1c <__malloc_unlock>
   110aa:	mov	r0, r7
   110ac:	b.n	10f68 <_realloc_r+0x148>
   110ae:	ldr	r3, [r6, #0]
   110b0:	str	r3, [r0, #0]
   110b2:	ldr	r3, [r6, #4]
   110b4:	str	r3, [r0, #4]
   110b6:	cmp	r2, #27
   110b8:	bhi.n	1110a <_realloc_r+0x2ea>
   110ba:	add.w	r3, r0, #8
   110be:	add.w	r2, r6, #8
   110c2:	b.n	10eaa <_realloc_r+0x8a>
   110c4:	mov	r3, r7
   110c6:	ldr	r2, [r6, #0]
   110c8:	str	r2, [r3, #0]
   110ca:	ldr	r2, [r6, #4]
   110cc:	str	r2, [r3, #4]
   110ce:	ldr	r2, [r6, #8]
   110d0:	str	r2, [r3, #8]
   110d2:	mov	r6, r7
   110d4:	mov	r4, lr
   110d6:	mov	r8, sl
   110d8:	b.n	10f42 <_realloc_r+0x122>
   110da:	add.w	r1, r8, r5
   110de:	rsb	fp, r5, fp
   110e2:	orr.w	r2, fp, #1
   110e6:	str	r1, [r3, #8]
   110e8:	str	r2, [r1, #4]
   110ea:	ldr.w	r3, [r6, #-4]
   110ee:	and.w	r3, r3, #1
   110f2:	orrs	r5, r3
   110f4:	mov	r0, r9
   110f6:	str.w	r5, [r6, #-4]
   110fa:	bl	10e1c <__malloc_unlock>
   110fe:	mov	r0, r6
   11100:	b.n	10f68 <_realloc_r+0x148>
   11102:	mov	r1, r6
   11104:	bl	10cb4 <memmove>
   11108:	b.n	10eb6 <_realloc_r+0x96>
   1110a:	ldr	r3, [r6, #8]
   1110c:	str	r3, [r0, #8]
   1110e:	ldr	r3, [r6, #12]
   11110:	str	r3, [r0, #12]
   11112:	cmp	r2, #36	; 0x24
   11114:	beq.n	11168 <_realloc_r+0x348>
   11116:	add.w	r3, r0, #16
   1111a:	add.w	r2, r6, #16
   1111e:	b.n	10eaa <_realloc_r+0x8a>
   11120:	ldr.w	r3, [r0, #-4]
   11124:	bic.w	r3, r3, #3
   11128:	add	r4, r3
   1112a:	b.n	10f42 <_realloc_r+0x122>
   1112c:	mov	r1, r6
   1112e:	mov	r0, r7
   11130:	mov	r4, lr
   11132:	mov	r8, sl
   11134:	bl	10cb4 <memmove>
   11138:	mov	r6, r7
   1113a:	b.n	10f42 <_realloc_r+0x122>
   1113c:	mov	r2, r7
   1113e:	b.n	10f30 <_realloc_r+0x110>
   11140:	mov	r1, r6
   11142:	mov	r0, r7
   11144:	mov	r4, r3
   11146:	mov	r8, sl
   11148:	bl	10cb4 <memmove>
   1114c:	mov	r6, r7
   1114e:	b.n	10f42 <_realloc_r+0x122>
   11150:	ldr	r3, [r6, #8]
   11152:	str.w	r3, [sl, #16]
   11156:	ldr	r3, [r6, #12]
   11158:	str.w	r3, [sl, #20]
   1115c:	cmp	r2, #36	; 0x24
   1115e:	beq.n	11198 <_realloc_r+0x378>
   11160:	adds	r6, #16
   11162:	add.w	r3, sl, #24
   11166:	b.n	110c6 <_realloc_r+0x2a6>
   11168:	ldr	r3, [r6, #16]
   1116a:	str	r3, [r0, #16]
   1116c:	ldr	r3, [r6, #20]
   1116e:	str	r3, [r0, #20]
   11170:	add.w	r2, r6, #24
   11174:	add.w	r3, r0, #24
   11178:	b.n	10eaa <_realloc_r+0x8a>
   1117a:	nop
   1117c:	.word	0x20001200
   11180:	ldr	r1, [r6, #8]
   11182:	str.w	r1, [sl, #16]
   11186:	ldr	r1, [r6, #12]
   11188:	str.w	r1, [sl, #20]
   1118c:	cmp	r2, #36	; 0x24
   1118e:	beq.n	111b0 <_realloc_r+0x390>
   11190:	adds	r6, #16
   11192:	add.w	r2, sl, #24
   11196:	b.n	10f30 <_realloc_r+0x110>
   11198:	ldr	r3, [r6, #16]
   1119a:	str.w	r3, [sl, #24]
   1119e:	ldr	r3, [r6, #20]
   111a0:	str.w	r3, [sl, #28]
   111a4:	adds	r6, #24
   111a6:	add.w	r3, sl, #32
   111aa:	b.n	110c6 <_realloc_r+0x2a6>
   111ac:	mov	r2, r7
   111ae:	b.n	1107a <_realloc_r+0x25a>
   111b0:	ldr	r2, [r6, #16]
   111b2:	str.w	r2, [sl, #24]
   111b6:	ldr	r2, [r6, #20]
   111b8:	str.w	r2, [sl, #28]
   111bc:	adds	r6, #24
   111be:	add.w	r2, sl, #32
   111c2:	b.n	10f30 <_realloc_r+0x110>
   111c4:	mov	r1, r6
   111c6:	mov	r0, r7
   111c8:	str	r3, [sp, #4]
   111ca:	bl	10cb4 <memmove>
   111ce:	ldr	r3, [sp, #4]
   111d0:	b.n	11086 <_realloc_r+0x266>
   111d2:	ldr	r1, [r6, #8]
   111d4:	str.w	r1, [sl, #16]
   111d8:	ldr	r1, [r6, #12]
   111da:	str.w	r1, [sl, #20]
   111de:	cmp	r2, #36	; 0x24
   111e0:	beq.n	111ea <_realloc_r+0x3ca>
   111e2:	adds	r6, #16
   111e4:	add.w	r2, sl, #24
   111e8:	b.n	1107a <_realloc_r+0x25a>
   111ea:	ldr	r2, [r6, #16]
   111ec:	str.w	r2, [sl, #24]
   111f0:	ldr	r2, [r6, #20]
   111f2:	str.w	r2, [sl, #28]
   111f6:	adds	r6, #24
   111f8:	add.w	r2, sl, #32
   111fc:	b.n	1107a <_realloc_r+0x25a>
   111fe:	nop

00011200 <_sbrk_r>:
   11200:	push	{r3, r4, r5, lr}
   11202:	ldr	r4, [pc, #28]	; (11220 <_sbrk_r+0x20>)
   11204:	movs	r3, #0
   11206:	mov	r5, r0
   11208:	mov	r0, r1
   1120a:	str	r3, [r4, #0]
   1120c:	bl	e69c <_sbrk>
   11210:	adds	r3, r0, #1
   11212:	beq.n	11216 <_sbrk_r+0x16>
   11214:	pop	{r3, r4, r5, pc}
   11216:	ldr	r3, [r4, #0]
   11218:	cmp	r3, #0
   1121a:	beq.n	11214 <_sbrk_r+0x14>
   1121c:	str	r3, [r5, #0]
   1121e:	pop	{r3, r4, r5, pc}
   11220:	.word	0x20008ac0

00011224 <sprintf>:
   11224:	push	{r1, r2, r3}
   11226:	push	{r4, r5, r6, r7, lr}
   11228:	sub	sp, #112	; 0x70
   1122a:	add	r3, sp, #132	; 0x84
   1122c:	ldr	r1, [pc, #60]	; (1126c <sprintf+0x48>)
   1122e:	ldr.w	r2, [r3], #4
   11232:	str	r3, [sp, #4]
   11234:	mov	r5, r0
   11236:	mvn.w	r4, #2147483648	; 0x80000000
   1123a:	ldr	r0, [r1, #0]
   1123c:	str	r5, [sp, #8]
   1123e:	mov.w	r7, #520	; 0x208
   11242:	movw	r6, #65535	; 0xffff
   11246:	add	r1, sp, #8
   11248:	str	r5, [sp, #24]
   1124a:	strh.w	r7, [sp, #20]
   1124e:	str	r4, [sp, #16]
   11250:	str	r4, [sp, #28]
   11252:	strh.w	r6, [sp, #22]
   11256:	bl	11540 <_svfprintf_r>
   1125a:	ldr	r3, [sp, #8]
   1125c:	movs	r2, #0
   1125e:	strb	r2, [r3, #0]
   11260:	add	sp, #112	; 0x70
   11262:	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   11266:	add	sp, #12
   11268:	bx	lr
   1126a:	nop
   1126c:	.word	0x20001090

00011270 <strcpy>:
   11270:	eor.w	r2, r0, r1
   11274:	mov	ip, r0
   11276:	tst.w	r2, #3
   1127a:	bne.n	1131c <strcpy+0xac>
   1127c:	tst.w	r1, #3
   11280:	bne.n	112e8 <strcpy+0x78>
   11282:	str.w	r4, [sp, #-4]!
   11286:	tst.w	r1, #4
   1128a:	ldr.w	r3, [r1], #4
   1128e:	beq.n	112a8 <strcpy+0x38>
   11290:	sub.w	r2, r3, #16843009	; 0x1010101
   11294:	bics	r2, r3
   11296:	tst.w	r2, #2155905152	; 0x80808080
   1129a:	itt	eq
   1129c:	streq.w	r3, [ip], #4
   112a0:	ldreq.w	r3, [r1], #4
   112a4:	bne.n	112d4 <strcpy+0x64>
   112a6:	nop
   112a8:	ldr.w	r4, [r1], #4
   112ac:	sub.w	r2, r3, #16843009	; 0x1010101
   112b0:	bics	r2, r3
   112b2:	tst.w	r2, #2155905152	; 0x80808080
   112b6:	sub.w	r2, r4, #16843009	; 0x1010101
   112ba:	bne.n	112d4 <strcpy+0x64>
   112bc:	str.w	r3, [ip], #4
   112c0:	bics	r2, r4
   112c2:	tst.w	r2, #2155905152	; 0x80808080
   112c6:	itt	eq
   112c8:	ldreq.w	r3, [r1], #4
   112cc:	streq.w	r4, [ip], #4
   112d0:	beq.n	112a8 <strcpy+0x38>
   112d2:	mov	r3, r4
   112d4:	strb.w	r3, [ip], #1
   112d8:	tst.w	r3, #255	; 0xff
   112dc:	mov.w	r3, r3, ror #8
   112e0:	bne.n	112d4 <strcpy+0x64>
   112e2:	ldr.w	r4, [sp], #4
   112e6:	bx	lr
   112e8:	tst.w	r1, #1
   112ec:	beq.n	112fc <strcpy+0x8c>
   112ee:	ldrb.w	r2, [r1], #1
   112f2:	strb.w	r2, [ip], #1
   112f6:	cmp	r2, #0
   112f8:	it	eq
   112fa:	bxeq	lr
   112fc:	tst.w	r1, #2
   11300:	beq.n	11282 <strcpy+0x12>
   11302:	ldrh.w	r2, [r1], #2
   11306:	tst.w	r2, #255	; 0xff
   1130a:	itet	ne
   1130c:	strhne.w	r2, [ip], #2
   11310:	strbeq.w	r2, [ip]
   11314:	tstne.w	r2, #65280	; 0xff00
   11318:	bne.n	11282 <strcpy+0x12>
   1131a:	bx	lr
   1131c:	ldrb.w	r2, [r1], #1
   11320:	strb.w	r2, [ip], #1
   11324:	cmp	r2, #0
   11326:	bne.n	1131c <strcpy+0xac>
   11328:	bx	lr
   1132a:	nop

0001132c <strlcat>:
   1132c:	push	{r4, r5, r6, lr}
   1132e:	cbz	r2, 1136e <strlcat+0x42>
   11330:	ldrb	r6, [r0, #0]
   11332:	cbz	r6, 1137a <strlcat+0x4e>
   11334:	adds	r3, r0, #1
   11336:	adds	r6, r0, r2
   11338:	b.n	11340 <strlcat+0x14>
   1133a:	ldrb	r5, [r3, #0]
   1133c:	adds	r3, #1
   1133e:	cbz	r5, 11346 <strlcat+0x1a>
   11340:	cmp	r6, r3
   11342:	mov	r4, r3
   11344:	bne.n	1133a <strlcat+0xe>
   11346:	subs	r6, r4, r0
   11348:	subs	r2, r2, r6
   1134a:	beq.n	11370 <strlcat+0x44>
   1134c:	ldrb	r3, [r1, #0]
   1134e:	mov	r5, r1
   11350:	cbz	r3, 11366 <strlcat+0x3a>
   11352:	cmp	r2, #1
   11354:	beq.n	1135c <strlcat+0x30>
   11356:	strb	r3, [r4, #0]
   11358:	subs	r2, #1
   1135a:	adds	r4, #1
   1135c:	ldrb.w	r3, [r5, #1]!
   11360:	cmp	r3, #0
   11362:	bne.n	11352 <strlcat+0x26>
   11364:	subs	r3, r5, r1
   11366:	movs	r2, #0
   11368:	strb	r2, [r4, #0]
   1136a:	adds	r0, r6, r3
   1136c:	pop	{r4, r5, r6, pc}
   1136e:	mov	r6, r2
   11370:	mov	r0, r1
   11372:	bl	113c0 <strlen>
   11376:	add	r0, r6
   11378:	pop	{r4, r5, r6, pc}
   1137a:	mov	r4, r0
   1137c:	b.n	1134c <strlcat+0x20>
   1137e:	nop

00011380 <strlcpy>:
   11380:	push	{r4}
   11382:	mov	r3, r1
   11384:	cbz	r2, 1139a <strlcpy+0x1a>
   11386:	b.n	11392 <strlcpy+0x12>
   11388:	ldrb.w	r4, [r3], #1
   1138c:	strb.w	r4, [r0], #1
   11390:	cbz	r4, 113a2 <strlcpy+0x22>
   11392:	subs	r2, #1
   11394:	bne.n	11388 <strlcpy+0x8>
   11396:	movs	r2, #0
   11398:	strb	r2, [r0, #0]
   1139a:	ldrb.w	r2, [r3], #1
   1139e:	cmp	r2, #0
   113a0:	bne.n	1139a <strlcpy+0x1a>
   113a2:	subs	r0, r3, r1
   113a4:	subs	r0, #1
   113a6:	ldr.w	r4, [sp], #4
   113aa:	bx	lr
	...

000113c0 <strlen>:
   113c0:	pld	[r0]
   113c4:	strd	r4, r5, [sp, #-8]!
   113c8:	bic.w	r1, r0, #7
   113cc:	mvn.w	ip, #0
   113d0:	ands.w	r4, r0, #7
   113d4:	pld	[r1, #32]
   113d8:	bne.w	1146e <strlen+0xae>
   113dc:	mov.w	r4, #0
   113e0:	mvn.w	r0, #7
   113e4:	ldrd	r2, r3, [r1]
   113e8:	pld	[r1, #64]	; 0x40
   113ec:	add.w	r0, r0, #8
   113f0:	uadd8	r2, r2, ip
   113f4:	sel	r2, r4, ip
   113f8:	uadd8	r3, r3, ip
   113fc:	sel	r3, r2, ip
   11400:	cbnz	r3, 11456 <strlen+0x96>
   11402:	ldrd	r2, r3, [r1, #8]
   11406:	uadd8	r2, r2, ip
   1140a:	add.w	r0, r0, #8
   1140e:	sel	r2, r4, ip
   11412:	uadd8	r3, r3, ip
   11416:	sel	r3, r2, ip
   1141a:	cbnz	r3, 11456 <strlen+0x96>
   1141c:	ldrd	r2, r3, [r1, #16]
   11420:	uadd8	r2, r2, ip
   11424:	add.w	r0, r0, #8
   11428:	sel	r2, r4, ip
   1142c:	uadd8	r3, r3, ip
   11430:	sel	r3, r2, ip
   11434:	cbnz	r3, 11456 <strlen+0x96>
   11436:	ldrd	r2, r3, [r1, #24]
   1143a:	add.w	r1, r1, #32
   1143e:	uadd8	r2, r2, ip
   11442:	add.w	r0, r0, #8
   11446:	sel	r2, r4, ip
   1144a:	uadd8	r3, r3, ip
   1144e:	sel	r3, r2, ip
   11452:	cmp	r3, #0
   11454:	beq.n	113e4 <strlen+0x24>
   11456:	cmp	r2, #0
   11458:	itt	eq
   1145a:	addeq	r0, #4
   1145c:	moveq	r2, r3
   1145e:	rev	r2, r2
   11460:	clz	r2, r2
   11464:	ldrd	r4, r5, [sp], #8
   11468:	add.w	r0, r0, r2, lsr #3
   1146c:	bx	lr
   1146e:	ldrd	r2, r3, [r1]
   11472:	and.w	r5, r4, #3
   11476:	rsb	r0, r4, #0
   1147a:	mov.w	r5, r5, lsl #3
   1147e:	tst.w	r4, #4
   11482:	pld	[r1, #64]	; 0x40
   11486:	lsl.w	r5, ip, r5
   1148a:	orn	r2, r2, r5
   1148e:	itt	ne
   11490:	ornne	r3, r3, r5
   11494:	movne	r2, ip
   11496:	mov.w	r4, #0
   1149a:	b.n	113f0 <strlen+0x30>

0001149c <strncmp>:
   1149c:	cmp	r2, #0
   1149e:	beq.n	11524 <strncmp+0x88>
   114a0:	orr.w	r3, r0, r1
   114a4:	ands.w	r3, r3, #3
   114a8:	push	{r4, r5, r6, r7}
   114aa:	bne.n	114f8 <strncmp+0x5c>
   114ac:	cmp	r2, #3
   114ae:	bls.n	114f8 <strncmp+0x5c>
   114b0:	ldr	r4, [r0, #0]
   114b2:	ldr	r5, [r1, #0]
   114b4:	cmp	r4, r5
   114b6:	bne.n	114f8 <strncmp+0x5c>
   114b8:	subs	r2, #4
   114ba:	beq.n	11528 <strncmp+0x8c>
   114bc:	sub.w	r5, r4, #16843009	; 0x1010101
   114c0:	bic.w	r4, r5, r4
   114c4:	tst.w	r4, #2155905152	; 0x80808080
   114c8:	bne.n	1152e <strncmp+0x92>
   114ca:	adds	r7, r0, #4
   114cc:	adds	r5, r1, #4
   114ce:	b.n	114ec <strncmp+0x50>
   114d0:	ldr.w	r3, [r7], #4
   114d4:	ldr	r6, [r1, #0]
   114d6:	sub.w	r4, r3, #16843009	; 0x1010101
   114da:	cmp	r3, r6
   114dc:	bic.w	r4, r4, r3
   114e0:	bne.n	114f8 <strncmp+0x5c>
   114e2:	subs	r2, #4
   114e4:	beq.n	11528 <strncmp+0x8c>
   114e6:	tst.w	r4, #2155905152	; 0x80808080
   114ea:	bne.n	11534 <strncmp+0x98>
   114ec:	cmp	r2, #3
   114ee:	mov	r1, r5
   114f0:	mov	r0, r7
   114f2:	add.w	r5, r5, #4
   114f6:	bhi.n	114d0 <strncmp+0x34>
   114f8:	ldrb	r3, [r0, #0]
   114fa:	ldrb	r4, [r1, #0]
   114fc:	cmp	r4, r3
   114fe:	add.w	r2, r2, #4294967295
   11502:	bne.n	1151e <strncmp+0x82>
   11504:	cbz	r2, 11528 <strncmp+0x8c>
   11506:	cbnz	r4, 1150e <strncmp+0x72>
   11508:	b.n	11538 <strncmp+0x9c>
   1150a:	cbz	r2, 11528 <strncmp+0x8c>
   1150c:	cbz	r3, 1152e <strncmp+0x92>
   1150e:	ldrb.w	r3, [r0, #1]!
   11512:	ldrb.w	r4, [r1, #1]!
   11516:	cmp	r3, r4
   11518:	add.w	r2, r2, #4294967295
   1151c:	beq.n	1150a <strncmp+0x6e>
   1151e:	subs	r0, r3, r4
   11520:	pop	{r4, r5, r6, r7}
   11522:	bx	lr
   11524:	mov	r0, r2
   11526:	bx	lr
   11528:	mov	r0, r2
   1152a:	pop	{r4, r5, r6, r7}
   1152c:	bx	lr
   1152e:	mov	r0, r3
   11530:	pop	{r4, r5, r6, r7}
   11532:	bx	lr
   11534:	movs	r0, #0
   11536:	b.n	11520 <strncmp+0x84>
   11538:	mov	r0, r4
   1153a:	b.n	11520 <strncmp+0x84>
   1153c:	movs	r0, r0
	...

00011540 <_svfprintf_r>:
   11540:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11544:	sub	sp, #260	; 0x104
   11546:	mov	r4, r1
   11548:	str	r1, [sp, #20]
   1154a:	mov	r5, r2
   1154c:	str	r3, [sp, #40]	; 0x28
   1154e:	str	r0, [sp, #24]
   11550:	bl	14040 <_localeconv_r>
   11554:	ldr	r3, [r0, #0]
   11556:	str	r3, [sp, #76]	; 0x4c
   11558:	mov	r0, r3
   1155a:	bl	113c0 <strlen>
   1155e:	ldrh	r3, [r4, #12]
   11560:	str	r0, [sp, #72]	; 0x48
   11562:	lsls	r6, r3, #24
   11564:	bpl.n	1156e <_svfprintf_r+0x2e>
   11566:	ldr	r3, [r4, #16]
   11568:	cmp	r3, #0
   1156a:	beq.w	127d0 <_svfprintf_r+0x1290>
   1156e:	vldr	d7, [pc, #664]	; 11808 <_svfprintf_r+0x2c8>
   11572:	movs	r3, #0
   11574:	vstr	d7, [sp, #64]	; 0x40
   11578:	str	r3, [sp, #56]	; 0x38
   1157a:	str	r3, [sp, #148]	; 0x94
   1157c:	str	r3, [sp, #144]	; 0x90
   1157e:	str	r3, [sp, #84]	; 0x54
   11580:	str	r3, [sp, #28]
   11582:	ldr.w	sl, [pc, #656]	; 11814 <_svfprintf_r+0x2d4>
   11586:	add	r3, sp, #192	; 0xc0
   11588:	str	r3, [sp, #140]	; 0x8c
   1158a:	mov	r9, r3
   1158c:	mov	r8, r5
   1158e:	ldrb.w	r3, [r8]
   11592:	mov	r4, r8
   11594:	cbz	r3, 115d2 <_svfprintf_r+0x92>
   11596:	cmp	r3, #37	; 0x25
   11598:	bne.n	115a0 <_svfprintf_r+0x60>
   1159a:	b.n	115d2 <_svfprintf_r+0x92>
   1159c:	cmp	r3, #37	; 0x25
   1159e:	beq.n	115a8 <_svfprintf_r+0x68>
   115a0:	ldrb.w	r3, [r4, #1]!
   115a4:	cmp	r3, #0
   115a6:	bne.n	1159c <_svfprintf_r+0x5c>
   115a8:	rsb	r5, r8, r4
   115ac:	cbz	r5, 115d2 <_svfprintf_r+0x92>
   115ae:	ldr	r3, [sp, #144]	; 0x90
   115b0:	ldr	r2, [sp, #148]	; 0x94
   115b2:	str.w	r8, [r9]
   115b6:	adds	r3, #1
   115b8:	add	r2, r5
   115ba:	cmp	r3, #7
   115bc:	str.w	r5, [r9, #4]
   115c0:	str	r2, [sp, #148]	; 0x94
   115c2:	str	r3, [sp, #144]	; 0x90
   115c4:	bgt.w	11714 <_svfprintf_r+0x1d4>
   115c8:	add.w	r9, r9, #8
   115cc:	ldr	r3, [sp, #28]
   115ce:	add	r3, r5
   115d0:	str	r3, [sp, #28]
   115d2:	ldrb	r3, [r4, #0]
   115d4:	cmp	r3, #0
   115d6:	beq.w	11726 <_svfprintf_r+0x1e6>
   115da:	movs	r3, #0
   115dc:	mov	r2, r3
   115de:	strb.w	r3, [sp, #111]	; 0x6f
   115e2:	mov	r1, r3
   115e4:	str	r3, [sp, #32]
   115e6:	str	r3, [sp, #12]
   115e8:	mov.w	fp, #4294967295
   115ec:	ldrb	r3, [r4, #1]
   115ee:	add.w	r8, r4, #1
   115f2:	mov	r5, fp
   115f4:	add.w	r8, r8, #1
   115f8:	sub.w	r0, r3, #32
   115fc:	cmp	r0, #88	; 0x58
   115fe:	bhi.w	11e6a <_svfprintf_r+0x92a>
   11602:	tbh	[pc, r0, lsl #1]
   11606:	.short	0x03a0
   11608:	.word	0x04320432
   1160c:	.word	0x043203a8
   11610:	.word	0x04320432
   11614:	.word	0x04320432
   11618:	.word	0x03af0432
   1161c:	.word	0x043203bd
   11620:	.word	0x00e2005d
   11624:	.word	0x01090432
   11628:	.word	0x01100110
   1162c:	.word	0x01100110
   11630:	.word	0x01100110
   11634:	.word	0x01100110
   11638:	.word	0x04320110
   1163c:	.word	0x04320432
   11640:	.word	0x04320432
   11644:	.word	0x04320432
   11648:	.word	0x04320432
   1164c:	.word	0x01200432
   11650:	.word	0x04320286
   11654:	.word	0x04320286
   11658:	.word	0x04320432
   1165c:	.word	0x02d40432
   11660:	.word	0x04320432
   11664:	.word	0x043202e5
   11668:	.word	0x04320432
   1166c:	.word	0x04320432
   11670:	.word	0x0432030f
   11674:	.word	0x033d0432
   11678:	.word	0x04320432
   1167c:	.word	0x04320432
   11680:	.word	0x04320432
   11684:	.word	0x04320432
   11688:	.word	0x04320432
   1168c:	.word	0x0391037e
   11690:	.word	0x02860286
   11694:	.word	0x03990286
   11698:	.word	0x04320391
   1169c:	.word	0x04070432
   116a0:	.word	0x04120432
   116a4:	.word	0x006400a3
   116a8:	.word	0x043203c2
   116ac:	.word	0x043203c9
   116b0:	.word	0x043203ea
   116b4:	.word	0x03f20432
   116b8:	ldr	r0, [sp, #32]
   116ba:	str	r3, [sp, #40]	; 0x28
   116bc:	negs	r0, r0
   116be:	str	r0, [sp, #32]
   116c0:	ldr	r3, [sp, #12]
   116c2:	orr.w	r3, r3, #4
   116c6:	str	r3, [sp, #12]
   116c8:	ldrb.w	r3, [r8]
   116cc:	b.n	115f4 <_svfprintf_r+0xb4>
   116ce:	ldr	r0, [sp, #40]	; 0x28
   116d0:	mov	fp, r5
   116d2:	movs	r1, #0
   116d4:	ldr	r4, [r0, #0]
   116d6:	strb.w	r1, [sp, #111]	; 0x6f
   116da:	adds	r7, r0, #4
   116dc:	ldr	r0, [sp, #12]
   116de:	movs	r3, #48	; 0x30
   116e0:	movs	r2, #120	; 0x78
   116e2:	cmp	fp, r1
   116e4:	strb.w	r3, [sp, #112]	; 0x70
   116e8:	mov.w	r5, #0
   116ec:	strb.w	r2, [sp, #113]	; 0x71
   116f0:	orr.w	r3, r0, #2
   116f4:	blt.w	11ea4 <_svfprintf_r+0x964>
   116f8:	bic.w	r3, r0, #128	; 0x80
   116fc:	orr.w	r3, r3, #2
   11700:	str	r3, [sp, #12]
   11702:	orrs.w	r3, r4, r5
   11706:	str	r7, [sp, #40]	; 0x28
   11708:	beq.w	11e50 <_svfprintf_r+0x910>
   1170c:	mov	r7, r1
   1170e:	str	r2, [sp, #52]	; 0x34
   11710:	ldr	r0, [pc, #252]	; (11810 <_svfprintf_r+0x2d0>)
   11712:	b.n	11ce2 <_svfprintf_r+0x7a2>
   11714:	add	r2, sp, #140	; 0x8c
   11716:	ldr	r1, [sp, #20]
   11718:	ldr	r0, [sp, #24]
   1171a:	bl	14680 <__ssprint_r>
   1171e:	cbnz	r0, 11734 <_svfprintf_r+0x1f4>
   11720:	add.w	r9, sp, #192	; 0xc0
   11724:	b.n	115cc <_svfprintf_r+0x8c>
   11726:	ldr	r3, [sp, #148]	; 0x94
   11728:	cbz	r3, 11734 <_svfprintf_r+0x1f4>
   1172a:	ldr	r0, [sp, #24]
   1172c:	ldr	r1, [sp, #20]
   1172e:	add	r2, sp, #140	; 0x8c
   11730:	bl	14680 <__ssprint_r>
   11734:	ldr	r3, [sp, #20]
   11736:	ldrh	r3, [r3, #12]
   11738:	tst.w	r3, #64	; 0x40
   1173c:	ldr	r3, [sp, #28]
   1173e:	it	ne
   11740:	movne.w	r3, #4294967295
   11744:	mov	r0, r3
   11746:	add	sp, #260	; 0x104
   11748:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1174c:	str	r3, [sp, #52]	; 0x34
   1174e:	mov	fp, r5
   11750:	cmp	r2, #0
   11752:	bne.w	12bbc <_svfprintf_r+0x167c>
   11756:	ldr	r2, [sp, #12]
   11758:	ands.w	r3, r2, #32
   1175c:	beq.w	11bec <_svfprintf_r+0x6ac>
   11760:	ldr	r7, [sp, #40]	; 0x28
   11762:	adds	r7, #7
   11764:	bic.w	r3, r7, #7
   11768:	movs	r7, #0
   1176a:	add.w	r1, r3, #8
   1176e:	cmp	fp, r7
   11770:	str	r1, [sp, #40]	; 0x28
   11772:	ldrd	r4, r5, [r3]
   11776:	strb.w	r7, [sp, #111]	; 0x6f
   1177a:	blt.w	12642 <_svfprintf_r+0x1102>
   1177e:	bic.w	r3, r2, #128	; 0x80
   11782:	str	r3, [sp, #12]
   11784:	orrs.w	r3, r4, r5
   11788:	beq.w	11e94 <_svfprintf_r+0x954>
   1178c:	add	r6, sp, #192	; 0xc0
   1178e:	lsrs	r2, r4, #3
   11790:	orr.w	r2, r2, r5, lsl #29
   11794:	lsrs	r1, r5, #3
   11796:	and.w	r3, r4, #7
   1179a:	mov	r5, r1
   1179c:	mov	r4, r2
   1179e:	adds	r3, #48	; 0x30
   117a0:	orrs.w	r2, r4, r5
   117a4:	strb.w	r3, [r6, #-1]!
   117a8:	bne.n	1178e <_svfprintf_r+0x24e>
   117aa:	ldr	r2, [sp, #12]
   117ac:	lsls	r1, r2, #31
   117ae:	bpl.w	118d0 <_svfprintf_r+0x390>
   117b2:	cmp	r3, #48	; 0x30
   117b4:	beq.w	118d0 <_svfprintf_r+0x390>
   117b8:	movs	r2, #48	; 0x30
   117ba:	subs	r3, r6, #1
   117bc:	strb.w	r2, [r6, #-1]
   117c0:	add	r2, sp, #192	; 0xc0
   117c2:	subs	r2, r2, r3
   117c4:	str	r2, [sp, #36]	; 0x24
   117c6:	mov	r6, r3
   117c8:	b.n	118d6 <_svfprintf_r+0x396>
   117ca:	ldrb.w	r3, [r8]
   117ce:	cmp	r3, #42	; 0x2a
   117d0:	add.w	r4, r8, #1
   117d4:	beq.w	12ba0 <_svfprintf_r+0x1660>
   117d8:	sub.w	r0, r3, #48	; 0x30
   117dc:	cmp	r0, #9
   117de:	it	ls
   117e0:	movls	r5, #0
   117e2:	bhi.w	12af2 <_svfprintf_r+0x15b2>
   117e6:	ldrb.w	r3, [r4], #1
   117ea:	add.w	r5, r5, r5, lsl #2
   117ee:	add.w	r5, r0, r5, lsl #1
   117f2:	sub.w	r0, r3, #48	; 0x30
   117f6:	cmp	r0, #9
   117f8:	bls.n	117e6 <_svfprintf_r+0x2a6>
   117fa:	orr.w	r5, r5, r5, asr #31
   117fe:	mov	r8, r4
   11800:	b.n	115f8 <_svfprintf_r+0xb8>
   11802:	nop
   11804:	nop.w
	...
   11810:	.word	0x20000964
   11814:	.word	0x20000930
   11818:	ldr	r3, [sp, #12]
   1181a:	orr.w	r3, r3, #128	; 0x80
   1181e:	str	r3, [sp, #12]
   11820:	ldrb.w	r3, [r8]
   11824:	b.n	115f4 <_svfprintf_r+0xb4>
   11826:	sub.w	r0, r3, #48	; 0x30
   1182a:	movs	r3, #0
   1182c:	mov	r4, r3
   1182e:	ldrb.w	r3, [r8], #1
   11832:	add.w	r4, r4, r4, lsl #2
   11836:	add.w	r4, r0, r4, lsl #1
   1183a:	sub.w	r0, r3, #48	; 0x30
   1183e:	cmp	r0, #9
   11840:	bls.n	1182e <_svfprintf_r+0x2ee>
   11842:	str	r4, [sp, #32]
   11844:	b.n	115f8 <_svfprintf_r+0xb8>
   11846:	str	r3, [sp, #52]	; 0x34
   11848:	mov	fp, r5
   1184a:	cmp	r2, #0
   1184c:	bne.w	12bd8 <_svfprintf_r+0x1698>
   11850:	ldr	r3, [sp, #12]
   11852:	orr.w	r3, r3, #16
   11856:	str	r3, [sp, #12]
   11858:	ldr	r3, [sp, #12]
   1185a:	lsls	r4, r3, #26
   1185c:	bpl.w	122ce <_svfprintf_r+0xd8e>
   11860:	ldr	r7, [sp, #40]	; 0x28
   11862:	adds	r7, #7
   11864:	bic.w	r7, r7, #7
   11868:	ldrd	r2, r3, [r7]
   1186c:	add.w	r1, r7, #8
   11870:	str	r1, [sp, #40]	; 0x28
   11872:	mov	r4, r2
   11874:	mov	r5, r3
   11876:	cmp	r2, #0
   11878:	sbcs.w	r3, r3, #0
   1187c:	blt.w	12344 <_svfprintf_r+0xe04>
   11880:	cmp.w	fp, #0
   11884:	ldrb.w	r7, [sp, #111]	; 0x6f
   11888:	blt.w	1230a <_svfprintf_r+0xdca>
   1188c:	ldr	r3, [sp, #12]
   1188e:	bic.w	r3, r3, #128	; 0x80
   11892:	str	r3, [sp, #12]
   11894:	orrs.w	r3, r4, r5
   11898:	beq.w	11c6c <_svfprintf_r+0x72c>
   1189c:	cmp	r5, #0
   1189e:	it	eq
   118a0:	cmpeq	r4, #10
   118a2:	bcc.w	11c76 <_svfprintf_r+0x736>
   118a6:	add	r6, sp, #192	; 0xc0
   118a8:	mov	r0, r4
   118aa:	mov	r1, r5
   118ac:	movs	r2, #10
   118ae:	movs	r3, #0
   118b0:	bl	1024c <__aeabi_uldivmod>
   118b4:	adds	r2, #48	; 0x30
   118b6:	strb.w	r2, [r6, #-1]!
   118ba:	mov	r0, r4
   118bc:	mov	r1, r5
   118be:	movs	r3, #0
   118c0:	movs	r2, #10
   118c2:	bl	1024c <__aeabi_uldivmod>
   118c6:	mov	r4, r0
   118c8:	mov	r5, r1
   118ca:	orrs.w	r3, r4, r5
   118ce:	bne.n	118a8 <_svfprintf_r+0x368>
   118d0:	add	r3, sp, #192	; 0xc0
   118d2:	subs	r3, r3, r6
   118d4:	str	r3, [sp, #36]	; 0x24
   118d6:	ldr	r3, [sp, #36]	; 0x24
   118d8:	cmp	r3, fp
   118da:	it	lt
   118dc:	movlt	r3, fp
   118de:	str	r3, [sp, #16]
   118e0:	movs	r3, #0
   118e2:	str	r3, [sp, #60]	; 0x3c
   118e4:	cbz	r7, 118ec <_svfprintf_r+0x3ac>
   118e6:	ldr	r3, [sp, #16]
   118e8:	adds	r3, #1
   118ea:	str	r3, [sp, #16]
   118ec:	ldr	r3, [sp, #12]
   118ee:	ands.w	r3, r3, #2
   118f2:	str	r3, [sp, #44]	; 0x2c
   118f4:	beq.n	118fc <_svfprintf_r+0x3bc>
   118f6:	ldr	r3, [sp, #16]
   118f8:	adds	r3, #2
   118fa:	str	r3, [sp, #16]
   118fc:	ldr	r3, [sp, #12]
   118fe:	ands.w	r3, r3, #132	; 0x84
   11902:	str	r3, [sp, #48]	; 0x30
   11904:	bne.w	11ebe <_svfprintf_r+0x97e>
   11908:	ldr	r3, [sp, #32]
   1190a:	ldr	r2, [sp, #16]
   1190c:	subs	r5, r3, r2
   1190e:	cmp	r5, #0
   11910:	ble.w	11ebe <_svfprintf_r+0x97e>
   11914:	cmp	r5, #16
   11916:	ldr	r1, [sp, #148]	; 0x94
   11918:	ldr	r2, [sp, #144]	; 0x90
   1191a:	ldr	r7, [pc, #672]	; (11bbc <_svfprintf_r+0x67c>)
   1191c:	ble.n	1196e <_svfprintf_r+0x42e>
   1191e:	str	r6, [sp, #80]	; 0x50
   11920:	mov	r0, r9
   11922:	movs	r4, #16
   11924:	mov	r9, r7
   11926:	ldr	r6, [sp, #20]
   11928:	mov	r7, r5
   1192a:	ldr	r5, [sp, #24]
   1192c:	b.n	11938 <_svfprintf_r+0x3f8>
   1192e:	subs	r7, #16
   11930:	cmp	r7, #16
   11932:	add.w	r0, r0, #8
   11936:	ble.n	11966 <_svfprintf_r+0x426>
   11938:	adds	r2, #1
   1193a:	ldr	r3, [pc, #640]	; (11bbc <_svfprintf_r+0x67c>)
   1193c:	str	r2, [sp, #144]	; 0x90
   1193e:	adds	r1, #16
   11940:	cmp	r2, #7
   11942:	str	r1, [sp, #148]	; 0x94
   11944:	stmia.w	r0, {r3, r4}
   11948:	ble.n	1192e <_svfprintf_r+0x3ee>
   1194a:	add	r2, sp, #140	; 0x8c
   1194c:	mov	r1, r6
   1194e:	mov	r0, r5
   11950:	bl	14680 <__ssprint_r>
   11954:	cmp	r0, #0
   11956:	bne.w	11734 <_svfprintf_r+0x1f4>
   1195a:	subs	r7, #16
   1195c:	cmp	r7, #16
   1195e:	ldr	r1, [sp, #148]	; 0x94
   11960:	ldr	r2, [sp, #144]	; 0x90
   11962:	add	r0, sp, #192	; 0xc0
   11964:	bgt.n	11938 <_svfprintf_r+0x3f8>
   11966:	ldr	r6, [sp, #80]	; 0x50
   11968:	mov	r5, r7
   1196a:	mov	r7, r9
   1196c:	mov	r9, r0
   1196e:	adds	r2, #1
   11970:	adds	r4, r5, r1
   11972:	cmp	r2, #7
   11974:	str	r4, [sp, #148]	; 0x94
   11976:	str	r2, [sp, #144]	; 0x90
   11978:	str.w	r7, [r9]
   1197c:	str.w	r5, [r9, #4]
   11980:	bgt.w	121de <_svfprintf_r+0xc9e>
   11984:	ldrb.w	r7, [sp, #111]	; 0x6f
   11988:	add.w	r9, r9, #8
   1198c:	cbz	r7, 119ac <_svfprintf_r+0x46c>
   1198e:	ldr	r3, [sp, #144]	; 0x90
   11990:	adds	r3, #1
   11992:	adds	r4, #1
   11994:	add.w	r1, sp, #111	; 0x6f
   11998:	movs	r2, #1
   1199a:	cmp	r3, #7
   1199c:	str	r4, [sp, #148]	; 0x94
   1199e:	str	r3, [sp, #144]	; 0x90
   119a0:	stmia.w	r9, {r1, r2}
   119a4:	bgt.w	120f2 <_svfprintf_r+0xbb2>
   119a8:	add.w	r9, r9, #8
   119ac:	ldr	r3, [sp, #44]	; 0x2c
   119ae:	cbz	r3, 119cc <_svfprintf_r+0x48c>
   119b0:	ldr	r3, [sp, #144]	; 0x90
   119b2:	adds	r3, #1
   119b4:	adds	r4, #2
   119b6:	add	r1, sp, #112	; 0x70
   119b8:	movs	r2, #2
   119ba:	cmp	r3, #7
   119bc:	str	r4, [sp, #148]	; 0x94
   119be:	str	r3, [sp, #144]	; 0x90
   119c0:	stmia.w	r9, {r1, r2}
   119c4:	bgt.w	1210a <_svfprintf_r+0xbca>
   119c8:	add.w	r9, r9, #8
   119cc:	ldr	r3, [sp, #48]	; 0x30
   119ce:	cmp	r3, #128	; 0x80
   119d0:	beq.w	11f96 <_svfprintf_r+0xa56>
   119d4:	ldr	r3, [sp, #36]	; 0x24
   119d6:	rsb	r7, r3, fp
   119da:	cmp	r7, #0
   119dc:	ble.n	11a46 <_svfprintf_r+0x506>
   119de:	ldr	r2, [pc, #480]	; (11bc0 <_svfprintf_r+0x680>)
   119e0:	ldr	r3, [sp, #144]	; 0x90
   119e2:	str	r2, [sp, #44]	; 0x2c
   119e4:	cmp	r7, #16
   119e6:	ble.n	11a2e <_svfprintf_r+0x4ee>
   119e8:	mov	r2, r4
   119ea:	mov.w	fp, #16
   119ee:	ldr	r5, [sp, #24]
   119f0:	ldr	r4, [sp, #20]
   119f2:	b.n	119fe <_svfprintf_r+0x4be>
   119f4:	subs	r7, #16
   119f6:	cmp	r7, #16
   119f8:	add.w	r9, r9, #8
   119fc:	ble.n	11a2c <_svfprintf_r+0x4ec>
   119fe:	adds	r3, #1
   11a00:	adds	r2, #16
   11a02:	cmp	r3, #7
   11a04:	str	r2, [sp, #148]	; 0x94
   11a06:	str	r3, [sp, #144]	; 0x90
   11a08:	stmia.w	r9, {sl, fp}
   11a0c:	ble.n	119f4 <_svfprintf_r+0x4b4>
   11a0e:	add	r2, sp, #140	; 0x8c
   11a10:	mov	r1, r4
   11a12:	mov	r0, r5
   11a14:	bl	14680 <__ssprint_r>
   11a18:	cmp	r0, #0
   11a1a:	bne.w	11734 <_svfprintf_r+0x1f4>
   11a1e:	subs	r7, #16
   11a20:	cmp	r7, #16
   11a22:	ldr	r2, [sp, #148]	; 0x94
   11a24:	ldr	r3, [sp, #144]	; 0x90
   11a26:	add.w	r9, sp, #192	; 0xc0
   11a2a:	bgt.n	119fe <_svfprintf_r+0x4be>
   11a2c:	mov	r4, r2
   11a2e:	adds	r3, #1
   11a30:	ldr	r2, [sp, #44]	; 0x2c
   11a32:	str	r3, [sp, #144]	; 0x90
   11a34:	add	r4, r7
   11a36:	cmp	r3, #7
   11a38:	str	r4, [sp, #148]	; 0x94
   11a3a:	stmia.w	r9, {r2, r7}
   11a3e:	bgt.w	120da <_svfprintf_r+0xb9a>
   11a42:	add.w	r9, r9, #8
   11a46:	ldr	r3, [sp, #12]
   11a48:	lsls	r2, r3, #23
   11a4a:	bmi.w	11ec2 <_svfprintf_r+0x982>
   11a4e:	ldr	r3, [sp, #144]	; 0x90
   11a50:	ldr	r1, [sp, #36]	; 0x24
   11a52:	str.w	r6, [r9]
   11a56:	adds	r3, #1
   11a58:	add	r4, r1
   11a5a:	cmp	r3, #7
   11a5c:	str	r4, [sp, #148]	; 0x94
   11a5e:	str.w	r1, [r9, #4]
   11a62:	str	r3, [sp, #144]	; 0x90
   11a64:	bgt.w	120ae <_svfprintf_r+0xb6e>
   11a68:	add.w	r9, r9, #8
   11a6c:	ldr	r3, [sp, #12]
   11a6e:	lsls	r1, r3, #29
   11a70:	bpl.n	11af2 <_svfprintf_r+0x5b2>
   11a72:	ldr	r3, [sp, #32]
   11a74:	ldr	r2, [sp, #16]
   11a76:	subs	r5, r3, r2
   11a78:	cmp	r5, #0
   11a7a:	ble.n	11af2 <_svfprintf_r+0x5b2>
   11a7c:	cmp	r5, #16
   11a7e:	ldr	r3, [sp, #144]	; 0x90
   11a80:	ldr	r7, [pc, #312]	; (11bbc <_svfprintf_r+0x67c>)
   11a82:	ble.n	11acc <_svfprintf_r+0x58c>
   11a84:	mov	r2, r4
   11a86:	movs	r6, #16
   11a88:	ldr.w	fp, [sp, #24]
   11a8c:	ldr	r4, [sp, #20]
   11a8e:	b.n	11a9a <_svfprintf_r+0x55a>
   11a90:	subs	r5, #16
   11a92:	cmp	r5, #16
   11a94:	add.w	r9, r9, #8
   11a98:	ble.n	11aca <_svfprintf_r+0x58a>
   11a9a:	adds	r3, #1
   11a9c:	ldr	r1, [pc, #284]	; (11bbc <_svfprintf_r+0x67c>)
   11a9e:	str	r3, [sp, #144]	; 0x90
   11aa0:	adds	r2, #16
   11aa2:	cmp	r3, #7
   11aa4:	str	r2, [sp, #148]	; 0x94
   11aa6:	stmia.w	r9, {r1, r6}
   11aaa:	ble.n	11a90 <_svfprintf_r+0x550>
   11aac:	add	r2, sp, #140	; 0x8c
   11aae:	mov	r1, r4
   11ab0:	mov	r0, fp
   11ab2:	bl	14680 <__ssprint_r>
   11ab6:	cmp	r0, #0
   11ab8:	bne.w	11734 <_svfprintf_r+0x1f4>
   11abc:	subs	r5, #16
   11abe:	cmp	r5, #16
   11ac0:	ldr	r2, [sp, #148]	; 0x94
   11ac2:	ldr	r3, [sp, #144]	; 0x90
   11ac4:	add.w	r9, sp, #192	; 0xc0
   11ac8:	bgt.n	11a9a <_svfprintf_r+0x55a>
   11aca:	mov	r4, r2
   11acc:	adds	r3, #1
   11ace:	add	r4, r5
   11ad0:	cmp	r3, #7
   11ad2:	str	r4, [sp, #148]	; 0x94
   11ad4:	str	r3, [sp, #144]	; 0x90
   11ad6:	str.w	r7, [r9]
   11ada:	str.w	r5, [r9, #4]
   11ade:	ble.n	11af2 <_svfprintf_r+0x5b2>
   11ae0:	add	r2, sp, #140	; 0x8c
   11ae2:	ldr	r1, [sp, #20]
   11ae4:	ldr	r0, [sp, #24]
   11ae6:	bl	14680 <__ssprint_r>
   11aea:	cmp	r0, #0
   11aec:	bne.w	11734 <_svfprintf_r+0x1f4>
   11af0:	ldr	r4, [sp, #148]	; 0x94
   11af2:	ldr	r3, [sp, #28]
   11af4:	ldr	r2, [sp, #32]
   11af6:	ldr	r1, [sp, #16]
   11af8:	cmp	r2, r1
   11afa:	ite	ge
   11afc:	addge	r3, r3, r2
   11afe:	addlt	r3, r3, r1
   11b00:	str	r3, [sp, #28]
   11b02:	cmp	r4, #0
   11b04:	bne.w	120c6 <_svfprintf_r+0xb86>
   11b08:	movs	r3, #0
   11b0a:	str	r3, [sp, #144]	; 0x90
   11b0c:	add.w	r9, sp, #192	; 0xc0
   11b10:	b.n	1158e <_svfprintf_r+0x4e>
   11b12:	str	r3, [sp, #52]	; 0x34
   11b14:	mov	fp, r5
   11b16:	cmp	r2, #0
   11b18:	bne.w	12be0 <_svfprintf_r+0x16a0>
   11b1c:	ldr	r3, [sp, #12]
   11b1e:	ldr	r7, [sp, #40]	; 0x28
   11b20:	lsls	r2, r3, #28
   11b22:	add.w	r7, r7, #7
   11b26:	bpl.w	12612 <_svfprintf_r+0x10d2>
   11b2a:	bic.w	r3, r7, #7
   11b2e:	vldr	d7, [r3]
   11b32:	vstr	d7, [sp, #64]	; 0x40
   11b36:	add.w	r2, r3, #8
   11b3a:	str	r2, [sp, #40]	; 0x28
   11b3c:	ldrd	r1, r2, [sp, #64]	; 0x40
   11b40:	bic.w	r3, r2, #2147483648	; 0x80000000
   11b44:	str	r1, [sp, #88]	; 0x58
   11b46:	str	r3, [sp, #92]	; 0x5c
   11b48:	ldrd	r4, r5, [sp, #88]	; 0x58
   11b4c:	mov.w	r2, #4294967295
   11b50:	mov	r0, r4
   11b52:	mov	r1, r5
   11b54:	ldr	r3, [pc, #108]	; (11bc4 <_svfprintf_r+0x684>)
   11b56:	bl	101d0 <__aeabi_dcmpun>
   11b5a:	cmp	r0, #0
   11b5c:	bne.w	12514 <_svfprintf_r+0xfd4>
   11b60:	mov.w	r2, #4294967295
   11b64:	ldr	r3, [pc, #92]	; (11bc4 <_svfprintf_r+0x684>)
   11b66:	mov	r0, r4
   11b68:	mov	r1, r5
   11b6a:	bl	10194 <__aeabi_dcmple>
   11b6e:	cmp	r0, #0
   11b70:	bne.w	12514 <_svfprintf_r+0xfd4>
   11b74:	movs	r2, #0
   11b76:	movs	r3, #0
   11b78:	ldrd	r0, r1, [sp, #64]	; 0x40
   11b7c:	bl	10180 <__aeabi_dcmplt>
   11b80:	cmp	r0, #0
   11b82:	bne.w	12a2a <_svfprintf_r+0x14ea>
   11b86:	ldrb.w	r7, [sp, #111]	; 0x6f
   11b8a:	ldr	r6, [pc, #60]	; (11bc8 <_svfprintf_r+0x688>)
   11b8c:	ldr	r3, [pc, #60]	; (11bcc <_svfprintf_r+0x68c>)
   11b8e:	ldr	r1, [sp, #12]
   11b90:	bic.w	r1, r1, #128	; 0x80
   11b94:	str	r1, [sp, #12]
   11b96:	ldr	r1, [sp, #52]	; 0x34
   11b98:	movs	r2, #3
   11b9a:	mov.w	fp, #0
   11b9e:	str	r2, [sp, #16]
   11ba0:	cmp	r1, #71	; 0x47
   11ba2:	it	le
   11ba4:	movle	r6, r3
   11ba6:	str	r2, [sp, #36]	; 0x24
   11ba8:	str.w	fp, [sp, #60]	; 0x3c
   11bac:	b.n	118e4 <_svfprintf_r+0x3a4>
   11bae:	ldr	r3, [sp, #12]
   11bb0:	orr.w	r3, r3, #8
   11bb4:	str	r3, [sp, #12]
   11bb6:	ldrb.w	r3, [r8]
   11bba:	b.n	115f4 <_svfprintf_r+0xb4>
   11bbc:	.word	0x20000980
   11bc0:	.word	0x20000930
   11bc4:	.word	0x7fefffff
   11bc8:	.word	0x20000944
   11bcc:	.word	0x20000940
   11bd0:	str	r3, [sp, #52]	; 0x34
   11bd2:	mov	fp, r5
   11bd4:	cmp	r2, #0
   11bd6:	bne.w	12bf8 <_svfprintf_r+0x16b8>
   11bda:	ldr	r3, [sp, #12]
   11bdc:	orr.w	r3, r3, #16
   11be0:	str	r3, [sp, #12]
   11be2:	ldr	r2, [sp, #12]
   11be4:	ands.w	r3, r2, #32
   11be8:	bne.w	11760 <_svfprintf_r+0x220>
   11bec:	ldr	r1, [sp, #12]
   11bee:	ands.w	r2, r1, #16
   11bf2:	beq.w	124ac <_svfprintf_r+0xf6c>
   11bf6:	ldr	r0, [sp, #40]	; 0x28
   11bf8:	strb.w	r3, [sp, #111]	; 0x6f
   11bfc:	cmp.w	fp, #0
   11c00:	ldr	r4, [r0, #0]
   11c02:	add.w	r7, r0, #4
   11c06:	mov.w	r5, #0
   11c0a:	blt.w	12640 <_svfprintf_r+0x1100>
   11c0e:	mov	r2, r1
   11c10:	bic.w	r2, r2, #128	; 0x80
   11c14:	str	r2, [sp, #12]
   11c16:	orrs.w	r2, r4, r5
   11c1a:	str	r7, [sp, #40]	; 0x28
   11c1c:	beq.w	11e94 <_svfprintf_r+0x954>
   11c20:	mov	r7, r3
   11c22:	b.n	1178c <_svfprintf_r+0x24c>
   11c24:	str	r3, [sp, #52]	; 0x34
   11c26:	mov	fp, r5
   11c28:	cmp	r2, #0
   11c2a:	bne.w	12bf0 <_svfprintf_r+0x16b0>
   11c2e:	ldr	r3, [sp, #12]
   11c30:	orr.w	r3, r3, #16
   11c34:	str	r3, [sp, #12]
   11c36:	ldr	r2, [sp, #12]
   11c38:	ands.w	r3, r2, #32
   11c3c:	beq.w	12298 <_svfprintf_r+0xd58>
   11c40:	ldr	r7, [sp, #40]	; 0x28
   11c42:	adds	r7, #7
   11c44:	bic.w	r3, r7, #7
   11c48:	movs	r7, #0
   11c4a:	add.w	r1, r3, #8
   11c4e:	cmp	fp, r7
   11c50:	str	r1, [sp, #40]	; 0x28
   11c52:	ldrd	r4, r5, [r3]
   11c56:	strb.w	r7, [sp, #111]	; 0x6f
   11c5a:	blt.w	1230a <_svfprintf_r+0xdca>
   11c5e:	bic.w	r3, r2, #128	; 0x80
   11c62:	str	r3, [sp, #12]
   11c64:	orrs.w	r3, r4, r5
   11c68:	bne.w	1189c <_svfprintf_r+0x35c>
   11c6c:	cmp.w	fp, #0
   11c70:	beq.w	11e5e <_svfprintf_r+0x91e>
   11c74:	movs	r4, #0
   11c76:	add	r6, sp, #256	; 0x100
   11c78:	adds	r4, #48	; 0x30
   11c7a:	strb.w	r4, [r6, #-65]!
   11c7e:	b.n	118d0 <_svfprintf_r+0x390>
   11c80:	str	r3, [sp, #52]	; 0x34
   11c82:	mov	fp, r5
   11c84:	cmp	r2, #0
   11c86:	bne.w	12be8 <_svfprintf_r+0x16a8>
   11c8a:	ldr	r3, [sp, #12]
   11c8c:	ldr	r0, [pc, #700]	; (11f4c <_svfprintf_r+0xa0c>)
   11c8e:	lsls	r5, r3, #26
   11c90:	bpl.w	11dfe <_svfprintf_r+0x8be>
   11c94:	ldr	r7, [sp, #40]	; 0x28
   11c96:	adds	r7, #7
   11c98:	bic.w	r3, r7, #7
   11c9c:	ldrd	r4, r5, [r3]
   11ca0:	add.w	r2, r3, #8
   11ca4:	str	r2, [sp, #40]	; 0x28
   11ca6:	ldr	r2, [sp, #12]
   11ca8:	ands.w	r7, r2, #1
   11cac:	beq.w	12122 <_svfprintf_r+0xbe2>
   11cb0:	orrs.w	r3, r4, r5
   11cb4:	beq.w	126bc <_svfprintf_r+0x117c>
   11cb8:	ldrb.w	r2, [sp, #52]	; 0x34
   11cbc:	strb.w	r2, [sp, #113]	; 0x71
   11cc0:	movs	r7, #0
   11cc2:	ldr	r2, [sp, #12]
   11cc4:	strb.w	r7, [sp, #111]	; 0x6f
   11cc8:	movs	r3, #48	; 0x30
   11cca:	cmp	fp, r7
   11ccc:	strb.w	r3, [sp, #112]	; 0x70
   11cd0:	orr.w	r3, r2, #2
   11cd4:	blt.w	12a34 <_svfprintf_r+0x14f4>
   11cd8:	bic.w	r3, r2, #128	; 0x80
   11cdc:	orr.w	r3, r3, #2
   11ce0:	str	r3, [sp, #12]
   11ce2:	add	r6, sp, #192	; 0xc0
   11ce4:	lsrs	r3, r4, #4
   11ce6:	and.w	r1, r4, #15
   11cea:	orr.w	r3, r3, r5, lsl #28
   11cee:	lsrs	r2, r5, #4
   11cf0:	mov	r4, r3
   11cf2:	mov	r5, r2
   11cf4:	ldrb	r3, [r0, r1]
   11cf6:	strb.w	r3, [r6, #-1]!
   11cfa:	orrs.w	r3, r4, r5
   11cfe:	bne.n	11ce4 <_svfprintf_r+0x7a4>
   11d00:	b.n	118d0 <_svfprintf_r+0x390>
   11d02:	ldr	r1, [sp, #40]	; 0x28
   11d04:	str	r3, [sp, #52]	; 0x34
   11d06:	ldr	r2, [r1, #0]
   11d08:	strb.w	r2, [sp, #152]	; 0x98
   11d0c:	movs	r3, #0
   11d0e:	mov	r2, r1
   11d10:	mov	r7, r3
   11d12:	strb.w	r3, [sp, #111]	; 0x6f
   11d16:	adds	r2, #4
   11d18:	movs	r3, #1
   11d1a:	str	r3, [sp, #16]
   11d1c:	mov	fp, r7
   11d1e:	str	r7, [sp, #60]	; 0x3c
   11d20:	str	r2, [sp, #40]	; 0x28
   11d22:	str	r3, [sp, #36]	; 0x24
   11d24:	add	r6, sp, #152	; 0x98
   11d26:	b.n	118ec <_svfprintf_r+0x3ac>
   11d28:	str	r3, [sp, #52]	; 0x34
   11d2a:	mov	fp, r5
   11d2c:	cmp	r2, #0
   11d2e:	beq.w	11858 <_svfprintf_r+0x318>
   11d32:	strb.w	r1, [sp, #111]	; 0x6f
   11d36:	b.n	11858 <_svfprintf_r+0x318>
   11d38:	ldr	r3, [sp, #12]
   11d3a:	orr.w	r3, r3, #64	; 0x40
   11d3e:	str	r3, [sp, #12]
   11d40:	ldrb.w	r3, [r8]
   11d44:	b.n	115f4 <_svfprintf_r+0xb4>
   11d46:	ldrb.w	r3, [r8]
   11d4a:	cmp	r1, #0
   11d4c:	bne.w	115f4 <_svfprintf_r+0xb4>
   11d50:	movs	r2, #1
   11d52:	movs	r1, #32
   11d54:	b.n	115f4 <_svfprintf_r+0xb4>
   11d56:	ldr	r3, [sp, #12]
   11d58:	orr.w	r3, r3, #1
   11d5c:	str	r3, [sp, #12]
   11d5e:	ldrb.w	r3, [r8]
   11d62:	b.n	115f4 <_svfprintf_r+0xb4>
   11d64:	ldr	r4, [sp, #40]	; 0x28
   11d66:	ldr	r3, [r4, #0]
   11d68:	str	r3, [sp, #32]
   11d6a:	mov	r0, r3
   11d6c:	cmp	r0, #0
   11d6e:	mov	r3, r4
   11d70:	add.w	r3, r3, #4
   11d74:	blt.w	116b8 <_svfprintf_r+0x178>
   11d78:	str	r3, [sp, #40]	; 0x28
   11d7a:	ldrb.w	r3, [r8]
   11d7e:	b.n	115f4 <_svfprintf_r+0xb4>
   11d80:	ldrb.w	r3, [r8]
   11d84:	movs	r2, #1
   11d86:	movs	r1, #43	; 0x2b
   11d88:	b.n	115f4 <_svfprintf_r+0xb4>
   11d8a:	ldr	r3, [sp, #12]
   11d8c:	orr.w	r3, r3, #32
   11d90:	str	r3, [sp, #12]
   11d92:	ldrb.w	r3, [r8]
   11d96:	b.n	115f4 <_svfprintf_r+0xb4>
   11d98:	ldr	r2, [sp, #40]	; 0x28
   11d9a:	str	r3, [sp, #52]	; 0x34
   11d9c:	ldr	r6, [r2, #0]
   11d9e:	movs	r4, #0
   11da0:	strb.w	r4, [sp, #111]	; 0x6f
   11da4:	adds	r7, r2, #4
   11da6:	cmp	r6, #0
   11da8:	beq.w	129e4 <_svfprintf_r+0x14a4>
   11dac:	cmp	r5, #0
   11dae:	blt.w	12874 <_svfprintf_r+0x1334>
   11db2:	mov	r2, r5
   11db4:	mov	r1, r4
   11db6:	mov	r0, r6
   11db8:	bl	10bb0 <memchr>
   11dbc:	cmp	r0, #0
   11dbe:	beq.w	12a88 <_svfprintf_r+0x1548>
   11dc2:	subs	r3, r0, r6
   11dc4:	str	r3, [sp, #36]	; 0x24
   11dc6:	mov	fp, r4
   11dc8:	bic.w	r3, r3, r3, asr #31
   11dcc:	str	r7, [sp, #40]	; 0x28
   11dce:	str	r3, [sp, #16]
   11dd0:	str.w	fp, [sp, #60]	; 0x3c
   11dd4:	ldrb.w	r7, [sp, #111]	; 0x6f
   11dd8:	b.n	118e4 <_svfprintf_r+0x3a4>
   11dda:	str	r3, [sp, #52]	; 0x34
   11ddc:	mov	fp, r5
   11dde:	cmp	r2, #0
   11de0:	beq.w	11c36 <_svfprintf_r+0x6f6>
   11de4:	strb.w	r1, [sp, #111]	; 0x6f
   11de8:	b.n	11c36 <_svfprintf_r+0x6f6>
   11dea:	str	r3, [sp, #52]	; 0x34
   11dec:	mov	fp, r5
   11dee:	cmp	r2, #0
   11df0:	bne.w	12c10 <_svfprintf_r+0x16d0>
   11df4:	ldr	r3, [sp, #12]
   11df6:	ldr	r0, [pc, #344]	; (11f50 <_svfprintf_r+0xa10>)
   11df8:	lsls	r5, r3, #26
   11dfa:	bmi.w	11c94 <_svfprintf_r+0x754>
   11dfe:	ldr	r3, [sp, #12]
   11e00:	lsls	r4, r3, #27
   11e02:	bpl.w	12682 <_svfprintf_r+0x1142>
   11e06:	ldr	r2, [sp, #40]	; 0x28
   11e08:	mov	r3, r2
   11e0a:	adds	r3, #4
   11e0c:	ldr	r4, [r2, #0]
   11e0e:	str	r3, [sp, #40]	; 0x28
   11e10:	movs	r5, #0
   11e12:	b.n	11ca6 <_svfprintf_r+0x766>
   11e14:	ldrb.w	r3, [r8]
   11e18:	cmp	r3, #108	; 0x6c
   11e1a:	beq.w	127a2 <_svfprintf_r+0x1262>
   11e1e:	ldr	r0, [sp, #12]
   11e20:	orr.w	r0, r0, #16
   11e24:	str	r0, [sp, #12]
   11e26:	b.w	115f4 <_svfprintf_r+0xb4>
   11e2a:	cmp	r2, #0
   11e2c:	bne.w	12c08 <_svfprintf_r+0x16c8>
   11e30:	ldr	r3, [sp, #12]
   11e32:	lsls	r3, r3, #26
   11e34:	bpl.w	124e6 <_svfprintf_r+0xfa6>
   11e38:	ldr	r2, [sp, #40]	; 0x28
   11e3a:	ldr	r1, [sp, #28]
   11e3c:	ldr	r3, [r2, #0]
   11e3e:	asrs	r5, r1, #31
   11e40:	mov	r0, r1
   11e42:	adds	r2, #4
   11e44:	mov	r1, r5
   11e46:	str	r2, [sp, #40]	; 0x28
   11e48:	strd	r0, r1, [r3]
   11e4c:	b.w	1158e <_svfprintf_r+0x4e>
   11e50:	ldr	r0, [pc, #252]	; (11f50 <_svfprintf_r+0xa10>)
   11e52:	str	r2, [sp, #52]	; 0x34
   11e54:	cmp.w	fp, #0
   11e58:	bne.w	12144 <_svfprintf_r+0xc04>
   11e5c:	mov	r7, fp
   11e5e:	mov.w	fp, #0
   11e62:	str.w	fp, [sp, #36]	; 0x24
   11e66:	add	r6, sp, #192	; 0xc0
   11e68:	b.n	118d6 <_svfprintf_r+0x396>
   11e6a:	str	r3, [sp, #52]	; 0x34
   11e6c:	cmp	r2, #0
   11e6e:	bne.w	12c00 <_svfprintf_r+0x16c0>
   11e72:	ldr	r2, [sp, #52]	; 0x34
   11e74:	cmp	r2, #0
   11e76:	beq.w	11726 <_svfprintf_r+0x1e6>
   11e7a:	movs	r3, #0
   11e7c:	movs	r1, #1
   11e7e:	mov	r7, r3
   11e80:	str	r1, [sp, #16]
   11e82:	strb.w	r2, [sp, #152]	; 0x98
   11e86:	strb.w	r3, [sp, #111]	; 0x6f
   11e8a:	mov	fp, r3
   11e8c:	str	r3, [sp, #60]	; 0x3c
   11e8e:	str	r1, [sp, #36]	; 0x24
   11e90:	add	r6, sp, #152	; 0x98
   11e92:	b.n	118ec <_svfprintf_r+0x3ac>
   11e94:	cmp.w	fp, #0
   11e98:	beq.w	12ab8 <_svfprintf_r+0x1578>
   11e9c:	movs	r7, #0
   11e9e:	movs	r4, #0
   11ea0:	movs	r5, #0
   11ea2:	b.n	1178c <_svfprintf_r+0x24c>
   11ea4:	ldr	r0, [pc, #168]	; (11f50 <_svfprintf_r+0xa10>)
   11ea6:	str	r3, [sp, #12]
   11ea8:	str	r2, [sp, #52]	; 0x34
   11eaa:	orrs.w	r3, r4, r5
   11eae:	str	r7, [sp, #40]	; 0x28
   11eb0:	mov.w	r7, #0
   11eb4:	bne.w	11ce2 <_svfprintf_r+0x7a2>
   11eb8:	movs	r4, #0
   11eba:	movs	r5, #0
   11ebc:	b.n	11ce2 <_svfprintf_r+0x7a2>
   11ebe:	ldr	r4, [sp, #148]	; 0x94
   11ec0:	b.n	1198c <_svfprintf_r+0x44c>
   11ec2:	ldr	r3, [sp, #52]	; 0x34
   11ec4:	cmp	r3, #101	; 0x65
   11ec6:	ble.w	1201e <_svfprintf_r+0xade>
   11eca:	movs	r2, #0
   11ecc:	movs	r3, #0
   11ece:	ldrd	r0, r1, [sp, #64]	; 0x40
   11ed2:	bl	1016c <__aeabi_dcmpeq>
   11ed6:	cmp	r0, #0
   11ed8:	beq.w	12148 <_svfprintf_r+0xc08>
   11edc:	ldr	r3, [sp, #144]	; 0x90
   11ede:	ldr	r2, [pc, #116]	; (11f54 <_svfprintf_r+0xa14>)
   11ee0:	str.w	r2, [r9]
   11ee4:	adds	r3, #1
   11ee6:	adds	r4, #1
   11ee8:	movs	r2, #1
   11eea:	cmp	r3, #7
   11eec:	str	r4, [sp, #148]	; 0x94
   11eee:	str	r3, [sp, #144]	; 0x90
   11ef0:	str.w	r2, [r9, #4]
   11ef4:	bgt.w	126d4 <_svfprintf_r+0x1194>
   11ef8:	add.w	r9, r9, #8
   11efc:	ldr	r3, [sp, #116]	; 0x74
   11efe:	ldr	r2, [sp, #56]	; 0x38
   11f00:	cmp	r3, r2
   11f02:	blt.n	11f0c <_svfprintf_r+0x9cc>
   11f04:	ldr	r3, [sp, #12]
   11f06:	lsls	r3, r3, #31
   11f08:	bpl.w	11a6c <_svfprintf_r+0x52c>
   11f0c:	ldr	r3, [sp, #144]	; 0x90
   11f0e:	ldr	r1, [sp, #72]	; 0x48
   11f10:	ldr	r2, [sp, #76]	; 0x4c
   11f12:	str.w	r2, [r9]
   11f16:	adds	r3, #1
   11f18:	add	r4, r1
   11f1a:	cmp	r3, #7
   11f1c:	str	r4, [sp, #148]	; 0x94
   11f1e:	str.w	r1, [r9, #4]
   11f22:	str	r3, [sp, #144]	; 0x90
   11f24:	bgt.w	127b6 <_svfprintf_r+0x1276>
   11f28:	add.w	r9, r9, #8
   11f2c:	ldr	r3, [sp, #56]	; 0x38
   11f2e:	subs	r5, r3, #1
   11f30:	cmp	r5, #0
   11f32:	ble.w	11a6c <_svfprintf_r+0x52c>
   11f36:	ldr	r2, [pc, #32]	; (11f58 <_svfprintf_r+0xa18>)
   11f38:	ldr	r3, [sp, #144]	; 0x90
   11f3a:	str	r2, [sp, #44]	; 0x2c
   11f3c:	cmp	r5, #16
   11f3e:	ble.w	12314 <_svfprintf_r+0xdd4>
   11f42:	movs	r6, #16
   11f44:	ldr	r7, [sp, #24]
   11f46:	ldr.w	fp, [sp, #20]
   11f4a:	b.n	11f68 <_svfprintf_r+0xa28>
   11f4c:	.word	0x20000950
   11f50:	.word	0x20000964
   11f54:	.word	0x20000500
   11f58:	.word	0x20000930
   11f5c:	add.w	r9, r9, #8
   11f60:	subs	r5, #16
   11f62:	cmp	r5, #16
   11f64:	ble.w	12314 <_svfprintf_r+0xdd4>
   11f68:	adds	r3, #1
   11f6a:	adds	r4, #16
   11f6c:	cmp	r3, #7
   11f6e:	str	r4, [sp, #148]	; 0x94
   11f70:	str	r3, [sp, #144]	; 0x90
   11f72:	str.w	sl, [r9]
   11f76:	str.w	r6, [r9, #4]
   11f7a:	ble.n	11f5c <_svfprintf_r+0xa1c>
   11f7c:	add	r2, sp, #140	; 0x8c
   11f7e:	mov	r1, fp
   11f80:	mov	r0, r7
   11f82:	bl	14680 <__ssprint_r>
   11f86:	cmp	r0, #0
   11f88:	bne.w	11734 <_svfprintf_r+0x1f4>
   11f8c:	ldr	r4, [sp, #148]	; 0x94
   11f8e:	ldr	r3, [sp, #144]	; 0x90
   11f90:	add.w	r9, sp, #192	; 0xc0
   11f94:	b.n	11f60 <_svfprintf_r+0xa20>
   11f96:	ldr	r3, [sp, #32]
   11f98:	ldr	r2, [sp, #16]
   11f9a:	subs	r7, r3, r2
   11f9c:	cmp	r7, #0
   11f9e:	ble.w	119d4 <_svfprintf_r+0x494>
   11fa2:	ldr	r2, [pc, #752]	; (12294 <_svfprintf_r+0xd54>)
   11fa4:	ldr	r3, [sp, #144]	; 0x90
   11fa6:	str	r2, [sp, #44]	; 0x2c
   11fa8:	cmp	r7, #16
   11faa:	ble.n	12004 <_svfprintf_r+0xac4>
   11fac:	mov	r2, r9
   11fae:	mov	r1, r4
   11fb0:	mov	r9, r7
   11fb2:	movs	r5, #16
   11fb4:	mov	r7, r6
   11fb6:	ldr	r4, [sp, #24]
   11fb8:	ldr	r6, [sp, #20]
   11fba:	b.n	11fca <_svfprintf_r+0xa8a>
   11fbc:	sub.w	r9, r9, #16
   11fc0:	cmp.w	r9, #16
   11fc4:	add.w	r2, r2, #8
   11fc8:	ble.n	11ffc <_svfprintf_r+0xabc>
   11fca:	adds	r3, #1
   11fcc:	adds	r1, #16
   11fce:	cmp	r3, #7
   11fd0:	str	r1, [sp, #148]	; 0x94
   11fd2:	str	r3, [sp, #144]	; 0x90
   11fd4:	str.w	sl, [r2]
   11fd8:	str	r5, [r2, #4]
   11fda:	ble.n	11fbc <_svfprintf_r+0xa7c>
   11fdc:	add	r2, sp, #140	; 0x8c
   11fde:	mov	r1, r6
   11fe0:	mov	r0, r4
   11fe2:	bl	14680 <__ssprint_r>
   11fe6:	cmp	r0, #0
   11fe8:	bne.w	11734 <_svfprintf_r+0x1f4>
   11fec:	sub.w	r9, r9, #16
   11ff0:	cmp.w	r9, #16
   11ff4:	ldr	r1, [sp, #148]	; 0x94
   11ff6:	ldr	r3, [sp, #144]	; 0x90
   11ff8:	add	r2, sp, #192	; 0xc0
   11ffa:	bgt.n	11fca <_svfprintf_r+0xa8a>
   11ffc:	mov	r6, r7
   11ffe:	mov	r4, r1
   12000:	mov	r7, r9
   12002:	mov	r9, r2
   12004:	adds	r3, #1
   12006:	ldr	r2, [sp, #44]	; 0x2c
   12008:	str	r3, [sp, #144]	; 0x90
   1200a:	add	r4, r7
   1200c:	cmp	r3, #7
   1200e:	str	r4, [sp, #148]	; 0x94
   12010:	stmia.w	r9, {r2, r7}
   12014:	bgt.w	12492 <_svfprintf_r+0xf52>
   12018:	add.w	r9, r9, #8
   1201c:	b.n	119d4 <_svfprintf_r+0x494>
   1201e:	ldr	r3, [sp, #56]	; 0x38
   12020:	ldr	r5, [sp, #144]	; 0x90
   12022:	cmp	r3, #1
   12024:	ble.w	1243c <_svfprintf_r+0xefc>
   12028:	adds	r5, #1
   1202a:	adds	r4, #1
   1202c:	movs	r3, #1
   1202e:	cmp	r5, #7
   12030:	str	r4, [sp, #148]	; 0x94
   12032:	str	r5, [sp, #144]	; 0x90
   12034:	str.w	r6, [r9]
   12038:	str.w	r3, [r9, #4]
   1203c:	bgt.w	1245e <_svfprintf_r+0xf1e>
   12040:	add.w	r9, r9, #8
   12044:	ldr	r2, [sp, #72]	; 0x48
   12046:	ldr	r3, [sp, #76]	; 0x4c
   12048:	str.w	r3, [r9]
   1204c:	adds	r5, #1
   1204e:	add	r4, r2
   12050:	cmp	r5, #7
   12052:	str	r4, [sp, #148]	; 0x94
   12054:	str	r5, [sp, #144]	; 0x90
   12056:	str.w	r2, [r9, #4]
   1205a:	bgt.w	12478 <_svfprintf_r+0xf38>
   1205e:	add.w	r9, r9, #8
   12062:	movs	r3, #0
   12064:	movs	r2, #0
   12066:	ldrd	r0, r1, [sp, #64]	; 0x40
   1206a:	bl	1016c <__aeabi_dcmpeq>
   1206e:	ldr	r3, [sp, #56]	; 0x38
   12070:	cmp	r0, #0
   12072:	bne.w	121fc <_svfprintf_r+0xcbc>
   12076:	subs	r3, #1
   12078:	adds	r5, #1
   1207a:	adds	r6, #1
   1207c:	add	r4, r3
   1207e:	cmp	r5, #7
   12080:	str	r5, [sp, #144]	; 0x90
   12082:	str	r4, [sp, #148]	; 0x94
   12084:	str.w	r6, [r9]
   12088:	str.w	r3, [r9, #4]
   1208c:	bgt.w	1227a <_svfprintf_r+0xd3a>
   12090:	add.w	r9, r9, #8
   12094:	ldr	r2, [sp, #84]	; 0x54
   12096:	str.w	r2, [r9, #4]
   1209a:	adds	r5, #1
   1209c:	add	r4, r2
   1209e:	add	r3, sp, #124	; 0x7c
   120a0:	cmp	r5, #7
   120a2:	str	r4, [sp, #148]	; 0x94
   120a4:	str	r5, [sp, #144]	; 0x90
   120a6:	str.w	r3, [r9]
   120aa:	ble.w	11a68 <_svfprintf_r+0x528>
   120ae:	add	r2, sp, #140	; 0x8c
   120b0:	ldr	r1, [sp, #20]
   120b2:	ldr	r0, [sp, #24]
   120b4:	bl	14680 <__ssprint_r>
   120b8:	cmp	r0, #0
   120ba:	bne.w	11734 <_svfprintf_r+0x1f4>
   120be:	ldr	r4, [sp, #148]	; 0x94
   120c0:	add.w	r9, sp, #192	; 0xc0
   120c4:	b.n	11a6c <_svfprintf_r+0x52c>
   120c6:	add	r2, sp, #140	; 0x8c
   120c8:	ldr	r1, [sp, #20]
   120ca:	ldr	r0, [sp, #24]
   120cc:	bl	14680 <__ssprint_r>
   120d0:	cmp	r0, #0
   120d2:	beq.w	11b08 <_svfprintf_r+0x5c8>
   120d6:	b.w	11734 <_svfprintf_r+0x1f4>
   120da:	add	r2, sp, #140	; 0x8c
   120dc:	ldr	r1, [sp, #20]
   120de:	ldr	r0, [sp, #24]
   120e0:	bl	14680 <__ssprint_r>
   120e4:	cmp	r0, #0
   120e6:	bne.w	11734 <_svfprintf_r+0x1f4>
   120ea:	ldr	r4, [sp, #148]	; 0x94
   120ec:	add.w	r9, sp, #192	; 0xc0
   120f0:	b.n	11a46 <_svfprintf_r+0x506>
   120f2:	add	r2, sp, #140	; 0x8c
   120f4:	ldr	r1, [sp, #20]
   120f6:	ldr	r0, [sp, #24]
   120f8:	bl	14680 <__ssprint_r>
   120fc:	cmp	r0, #0
   120fe:	bne.w	11734 <_svfprintf_r+0x1f4>
   12102:	ldr	r4, [sp, #148]	; 0x94
   12104:	add.w	r9, sp, #192	; 0xc0
   12108:	b.n	119ac <_svfprintf_r+0x46c>
   1210a:	add	r2, sp, #140	; 0x8c
   1210c:	ldr	r1, [sp, #20]
   1210e:	ldr	r0, [sp, #24]
   12110:	bl	14680 <__ssprint_r>
   12114:	cmp	r0, #0
   12116:	bne.w	11734 <_svfprintf_r+0x1f4>
   1211a:	ldr	r4, [sp, #148]	; 0x94
   1211c:	add.w	r9, sp, #192	; 0xc0
   12120:	b.n	119cc <_svfprintf_r+0x48c>
   12122:	cmp.w	fp, #0
   12126:	strb.w	r7, [sp, #111]	; 0x6f
   1212a:	blt.w	126ec <_svfprintf_r+0x11ac>
   1212e:	bic.w	r3, r2, #128	; 0x80
   12132:	str	r3, [sp, #12]
   12134:	orrs.w	r3, r4, r5
   12138:	bne.w	11ce2 <_svfprintf_r+0x7a2>
   1213c:	cmp.w	fp, #0
   12140:	beq.w	11e5c <_svfprintf_r+0x91c>
   12144:	movs	r7, #0
   12146:	b.n	11eb8 <_svfprintf_r+0x978>
   12148:	ldr	r5, [sp, #116]	; 0x74
   1214a:	cmp	r5, #0
   1214c:	ble.w	126f2 <_svfprintf_r+0x11b2>
   12150:	ldr	r3, [sp, #60]	; 0x3c
   12152:	ldr	r2, [sp, #56]	; 0x38
   12154:	cmp	r3, r2
   12156:	it	ge
   12158:	movge	r3, r2
   1215a:	cmp	r3, #0
   1215c:	mov	r5, r3
   1215e:	ble.n	1217c <_svfprintf_r+0xc3c>
   12160:	ldr	r3, [sp, #144]	; 0x90
   12162:	str.w	r6, [r9]
   12166:	adds	r3, #1
   12168:	add	r4, r5
   1216a:	cmp	r3, #7
   1216c:	str	r4, [sp, #148]	; 0x94
   1216e:	str.w	r5, [r9, #4]
   12172:	str	r3, [sp, #144]	; 0x90
   12174:	bgt.w	128ca <_svfprintf_r+0x138a>
   12178:	add.w	r9, r9, #8
   1217c:	ldr	r3, [sp, #60]	; 0x3c
   1217e:	cmp	r5, #0
   12180:	it	ge
   12182:	subge	r3, r3, r5
   12184:	cmp	r3, #0
   12186:	mov	r5, r3
   12188:	ble.w	1237c <_svfprintf_r+0xe3c>
   1218c:	ldr	r2, [pc, #260]	; (12294 <_svfprintf_r+0xd54>)
   1218e:	ldr	r3, [sp, #144]	; 0x90
   12190:	str	r2, [sp, #44]	; 0x2c
   12192:	cmp	r5, #16
   12194:	ble.w	1269e <_svfprintf_r+0x115e>
   12198:	mov	r2, r4
   1219a:	movs	r7, #16
   1219c:	ldr.w	fp, [sp, #24]
   121a0:	ldr	r4, [sp, #20]
   121a2:	b.n	121b0 <_svfprintf_r+0xc70>
   121a4:	add.w	r9, r9, #8
   121a8:	subs	r5, #16
   121aa:	cmp	r5, #16
   121ac:	ble.w	1269c <_svfprintf_r+0x115c>
   121b0:	adds	r3, #1
   121b2:	adds	r2, #16
   121b4:	cmp	r3, #7
   121b6:	str	r2, [sp, #148]	; 0x94
   121b8:	str	r3, [sp, #144]	; 0x90
   121ba:	str.w	sl, [r9]
   121be:	str.w	r7, [r9, #4]
   121c2:	ble.n	121a4 <_svfprintf_r+0xc64>
   121c4:	add	r2, sp, #140	; 0x8c
   121c6:	mov	r1, r4
   121c8:	mov	r0, fp
   121ca:	bl	14680 <__ssprint_r>
   121ce:	cmp	r0, #0
   121d0:	bne.w	11734 <_svfprintf_r+0x1f4>
   121d4:	ldr	r2, [sp, #148]	; 0x94
   121d6:	ldr	r3, [sp, #144]	; 0x90
   121d8:	add.w	r9, sp, #192	; 0xc0
   121dc:	b.n	121a8 <_svfprintf_r+0xc68>
   121de:	add	r2, sp, #140	; 0x8c
   121e0:	ldr	r1, [sp, #20]
   121e2:	ldr	r0, [sp, #24]
   121e4:	bl	14680 <__ssprint_r>
   121e8:	cmp	r0, #0
   121ea:	bne.w	11734 <_svfprintf_r+0x1f4>
   121ee:	ldrb.w	r7, [sp, #111]	; 0x6f
   121f2:	ldr	r4, [sp, #148]	; 0x94
   121f4:	add.w	r9, sp, #192	; 0xc0
   121f8:	b.w	1198c <_svfprintf_r+0x44c>
   121fc:	subs	r6, r3, #1
   121fe:	cmp	r6, #0
   12200:	ble.w	12094 <_svfprintf_r+0xb54>
   12204:	ldr	r3, [pc, #140]	; (12294 <_svfprintf_r+0xd54>)
   12206:	str	r3, [sp, #44]	; 0x2c
   12208:	cmp	r6, #16
   1220a:	ble.n	12266 <_svfprintf_r+0xd26>
   1220c:	str.w	r8, [sp, #36]	; 0x24
   12210:	movs	r7, #16
   12212:	mov	r8, r6
   12214:	ldr.w	fp, [sp, #24]
   12218:	ldr	r6, [sp, #20]
   1221a:	b.n	1222a <_svfprintf_r+0xcea>
   1221c:	sub.w	r8, r8, #16
   12220:	cmp.w	r8, #16
   12224:	add.w	r9, r9, #8
   12228:	ble.n	12260 <_svfprintf_r+0xd20>
   1222a:	adds	r5, #1
   1222c:	adds	r4, #16
   1222e:	cmp	r5, #7
   12230:	str	r4, [sp, #148]	; 0x94
   12232:	str	r5, [sp, #144]	; 0x90
   12234:	str.w	sl, [r9]
   12238:	str.w	r7, [r9, #4]
   1223c:	ble.n	1221c <_svfprintf_r+0xcdc>
   1223e:	add	r2, sp, #140	; 0x8c
   12240:	mov	r1, r6
   12242:	mov	r0, fp
   12244:	bl	14680 <__ssprint_r>
   12248:	cmp	r0, #0
   1224a:	bne.w	11734 <_svfprintf_r+0x1f4>
   1224e:	sub.w	r8, r8, #16
   12252:	cmp.w	r8, #16
   12256:	ldr	r4, [sp, #148]	; 0x94
   12258:	ldr	r5, [sp, #144]	; 0x90
   1225a:	add.w	r9, sp, #192	; 0xc0
   1225e:	bgt.n	1222a <_svfprintf_r+0xcea>
   12260:	mov	r6, r8
   12262:	ldr.w	r8, [sp, #36]	; 0x24
   12266:	ldr	r3, [sp, #44]	; 0x2c
   12268:	adds	r5, #1
   1226a:	add	r4, r6
   1226c:	cmp	r5, #7
   1226e:	str	r4, [sp, #148]	; 0x94
   12270:	str	r5, [sp, #144]	; 0x90
   12272:	stmia.w	r9, {r3, r6}
   12276:	ble.w	12090 <_svfprintf_r+0xb50>
   1227a:	add	r2, sp, #140	; 0x8c
   1227c:	ldr	r1, [sp, #20]
   1227e:	ldr	r0, [sp, #24]
   12280:	bl	14680 <__ssprint_r>
   12284:	cmp	r0, #0
   12286:	bne.w	11734 <_svfprintf_r+0x1f4>
   1228a:	ldr	r4, [sp, #148]	; 0x94
   1228c:	ldr	r5, [sp, #144]	; 0x90
   1228e:	add.w	r9, sp, #192	; 0xc0
   12292:	b.n	12094 <_svfprintf_r+0xb54>
   12294:	.word	0x20000930
   12298:	ldr	r1, [sp, #12]
   1229a:	ands.w	r2, r1, #16
   1229e:	beq.w	12648 <_svfprintf_r+0x1108>
   122a2:	ldr	r0, [sp, #40]	; 0x28
   122a4:	strb.w	r3, [sp, #111]	; 0x6f
   122a8:	cmp.w	fp, #0
   122ac:	ldr	r4, [r0, #0]
   122ae:	add.w	r7, r0, #4
   122b2:	mov.w	r5, #0
   122b6:	blt.n	12306 <_svfprintf_r+0xdc6>
   122b8:	mov	r2, r1
   122ba:	bic.w	r2, r2, #128	; 0x80
   122be:	str	r2, [sp, #12]
   122c0:	orrs.w	r2, r4, r5
   122c4:	str	r7, [sp, #40]	; 0x28
   122c6:	mov	r7, r3
   122c8:	bne.w	1189c <_svfprintf_r+0x35c>
   122cc:	b.n	11c6c <_svfprintf_r+0x72c>
   122ce:	ldr	r3, [sp, #12]
   122d0:	lsls	r0, r3, #27
   122d2:	bmi.n	1232a <_svfprintf_r+0xdea>
   122d4:	ldr	r3, [sp, #12]
   122d6:	lsls	r1, r3, #25
   122d8:	bpl.n	1232a <_svfprintf_r+0xdea>
   122da:	ldr	r1, [sp, #40]	; 0x28
   122dc:	ldrsh.w	r4, [r1]
   122e0:	adds	r1, #4
   122e2:	asrs	r5, r4, #31
   122e4:	mov	r2, r4
   122e6:	mov	r3, r5
   122e8:	str	r1, [sp, #40]	; 0x28
   122ea:	b.w	11876 <_svfprintf_r+0x336>
   122ee:	ldr	r1, [sp, #40]	; 0x28
   122f0:	strb.w	r3, [sp, #111]	; 0x6f
   122f4:	cmp.w	fp, #0
   122f8:	ldr	r4, [r1, #0]
   122fa:	add.w	r7, r1, #4
   122fe:	mov.w	r5, #0
   12302:	bge.w	1279e <_svfprintf_r+0x125e>
   12306:	str	r7, [sp, #40]	; 0x28
   12308:	mov	r7, r3
   1230a:	orrs.w	r3, r4, r5
   1230e:	bne.w	1189c <_svfprintf_r+0x35c>
   12312:	b.n	11c76 <_svfprintf_r+0x736>
   12314:	adds	r3, #1
   12316:	ldr	r2, [sp, #44]	; 0x2c
   12318:	str	r3, [sp, #144]	; 0x90
   1231a:	add	r4, r5
   1231c:	cmp	r3, #7
   1231e:	str	r4, [sp, #148]	; 0x94
   12320:	stmia.w	r9, {r2, r5}
   12324:	ble.w	11a68 <_svfprintf_r+0x528>
   12328:	b.n	120ae <_svfprintf_r+0xb6e>
   1232a:	ldr	r2, [sp, #40]	; 0x28
   1232c:	ldr	r4, [r2, #0]
   1232e:	mov	r3, r2
   12330:	adds	r3, #4
   12332:	asrs	r5, r4, #31
   12334:	mov	r2, r4
   12336:	str	r3, [sp, #40]	; 0x28
   12338:	cmp	r2, #0
   1233a:	mov	r3, r5
   1233c:	sbcs.w	r3, r3, #0
   12340:	bge.w	11880 <_svfprintf_r+0x340>
   12344:	negs	r4, r4
   12346:	mov.w	r7, #45	; 0x2d
   1234a:	sbc.w	r5, r5, r5, lsl #1
   1234e:	cmp.w	fp, #0
   12352:	strb.w	r7, [sp, #111]	; 0x6f
   12356:	blt.w	1189c <_svfprintf_r+0x35c>
   1235a:	ldr	r3, [sp, #12]
   1235c:	bic.w	r3, r3, #128	; 0x80
   12360:	str	r3, [sp, #12]
   12362:	b.w	1189c <_svfprintf_r+0x35c>
   12366:	add	r2, sp, #140	; 0x8c
   12368:	ldr	r1, [sp, #20]
   1236a:	ldr	r0, [sp, #24]
   1236c:	bl	14680 <__ssprint_r>
   12370:	cmp	r0, #0
   12372:	bne.w	11734 <_svfprintf_r+0x1f4>
   12376:	ldr	r4, [sp, #148]	; 0x94
   12378:	add.w	r9, sp, #192	; 0xc0
   1237c:	ldr	r2, [sp, #60]	; 0x3c
   1237e:	ldr	r3, [sp, #116]	; 0x74
   12380:	add	r2, r6
   12382:	mov	r7, r2
   12384:	ldr	r2, [sp, #56]	; 0x38
   12386:	cmp	r3, r2
   12388:	blt.n	1241a <_svfprintf_r+0xeda>
   1238a:	ldr	r2, [sp, #12]
   1238c:	lsls	r5, r2, #31
   1238e:	bmi.n	1241a <_svfprintf_r+0xeda>
   12390:	ldr	r1, [sp, #56]	; 0x38
   12392:	add	r6, r1
   12394:	subs	r5, r6, r7
   12396:	subs	r3, r1, r3
   12398:	cmp	r5, r3
   1239a:	it	ge
   1239c:	movge	r5, r3
   1239e:	cmp	r5, #0
   123a0:	mov	r6, r5
   123a2:	ble.n	123c0 <_svfprintf_r+0xe80>
   123a4:	ldr	r2, [sp, #144]	; 0x90
   123a6:	str.w	r7, [r9]
   123aa:	adds	r2, #1
   123ac:	add	r4, r5
   123ae:	cmp	r2, #7
   123b0:	str	r4, [sp, #148]	; 0x94
   123b2:	str.w	r5, [r9, #4]
   123b6:	str	r2, [sp, #144]	; 0x90
   123b8:	bgt.w	129b8 <_svfprintf_r+0x1478>
   123bc:	add.w	r9, r9, #8
   123c0:	cmp	r6, #0
   123c2:	ite	ge
   123c4:	subge	r5, r3, r6
   123c6:	movlt	r5, r3
   123c8:	cmp	r5, #0
   123ca:	ble.w	11a6c <_svfprintf_r+0x52c>
   123ce:	ldr	r2, [pc, #744]	; (126b8 <_svfprintf_r+0x1178>)
   123d0:	ldr	r3, [sp, #144]	; 0x90
   123d2:	str	r2, [sp, #44]	; 0x2c
   123d4:	cmp	r5, #16
   123d6:	ble.n	12314 <_svfprintf_r+0xdd4>
   123d8:	movs	r6, #16
   123da:	ldr	r7, [sp, #24]
   123dc:	ldr.w	fp, [sp, #20]
   123e0:	b.n	123ec <_svfprintf_r+0xeac>
   123e2:	add.w	r9, r9, #8
   123e6:	subs	r5, #16
   123e8:	cmp	r5, #16
   123ea:	ble.n	12314 <_svfprintf_r+0xdd4>
   123ec:	adds	r3, #1
   123ee:	adds	r4, #16
   123f0:	cmp	r3, #7
   123f2:	str	r4, [sp, #148]	; 0x94
   123f4:	str	r3, [sp, #144]	; 0x90
   123f6:	str.w	sl, [r9]
   123fa:	str.w	r6, [r9, #4]
   123fe:	ble.n	123e2 <_svfprintf_r+0xea2>
   12400:	add	r2, sp, #140	; 0x8c
   12402:	mov	r1, fp
   12404:	mov	r0, r7
   12406:	bl	14680 <__ssprint_r>
   1240a:	cmp	r0, #0
   1240c:	bne.w	11734 <_svfprintf_r+0x1f4>
   12410:	ldr	r4, [sp, #148]	; 0x94
   12412:	ldr	r3, [sp, #144]	; 0x90
   12414:	add.w	r9, sp, #192	; 0xc0
   12418:	b.n	123e6 <_svfprintf_r+0xea6>
   1241a:	ldr	r2, [sp, #144]	; 0x90
   1241c:	ldr	r0, [sp, #72]	; 0x48
   1241e:	ldr	r1, [sp, #76]	; 0x4c
   12420:	str.w	r1, [r9]
   12424:	adds	r2, #1
   12426:	add	r4, r0
   12428:	cmp	r2, #7
   1242a:	str	r4, [sp, #148]	; 0x94
   1242c:	str.w	r0, [r9, #4]
   12430:	str	r2, [sp, #144]	; 0x90
   12432:	bgt.w	1299e <_svfprintf_r+0x145e>
   12436:	add.w	r9, r9, #8
   1243a:	b.n	12390 <_svfprintf_r+0xe50>
   1243c:	ldr	r3, [sp, #12]
   1243e:	lsls	r0, r3, #31
   12440:	bmi.w	12028 <_svfprintf_r+0xae8>
   12444:	adds	r5, #1
   12446:	adds	r4, #1
   12448:	movs	r3, #1
   1244a:	cmp	r5, #7
   1244c:	str	r4, [sp, #148]	; 0x94
   1244e:	str	r5, [sp, #144]	; 0x90
   12450:	str.w	r6, [r9]
   12454:	str.w	r3, [r9, #4]
   12458:	ble.w	12090 <_svfprintf_r+0xb50>
   1245c:	b.n	1227a <_svfprintf_r+0xd3a>
   1245e:	add	r2, sp, #140	; 0x8c
   12460:	ldr	r1, [sp, #20]
   12462:	ldr	r0, [sp, #24]
   12464:	bl	14680 <__ssprint_r>
   12468:	cmp	r0, #0
   1246a:	bne.w	11734 <_svfprintf_r+0x1f4>
   1246e:	ldr	r4, [sp, #148]	; 0x94
   12470:	ldr	r5, [sp, #144]	; 0x90
   12472:	add.w	r9, sp, #192	; 0xc0
   12476:	b.n	12044 <_svfprintf_r+0xb04>
   12478:	add	r2, sp, #140	; 0x8c
   1247a:	ldr	r1, [sp, #20]
   1247c:	ldr	r0, [sp, #24]
   1247e:	bl	14680 <__ssprint_r>
   12482:	cmp	r0, #0
   12484:	bne.w	11734 <_svfprintf_r+0x1f4>
   12488:	ldr	r4, [sp, #148]	; 0x94
   1248a:	ldr	r5, [sp, #144]	; 0x90
   1248c:	add.w	r9, sp, #192	; 0xc0
   12490:	b.n	12062 <_svfprintf_r+0xb22>
   12492:	add	r2, sp, #140	; 0x8c
   12494:	ldr	r1, [sp, #20]
   12496:	ldr	r0, [sp, #24]
   12498:	bl	14680 <__ssprint_r>
   1249c:	cmp	r0, #0
   1249e:	bne.w	11734 <_svfprintf_r+0x1f4>
   124a2:	ldr	r4, [sp, #148]	; 0x94
   124a4:	add.w	r9, sp, #192	; 0xc0
   124a8:	b.w	119d4 <_svfprintf_r+0x494>
   124ac:	ldr	r1, [sp, #12]
   124ae:	ands.w	r3, r1, #64	; 0x40
   124b2:	beq.w	12628 <_svfprintf_r+0x10e8>
   124b6:	ldr	r0, [sp, #40]	; 0x28
   124b8:	strb.w	r2, [sp, #111]	; 0x6f
   124bc:	mov	r3, r0
   124be:	cmp.w	fp, #0
   124c2:	add.w	r3, r3, #4
   124c6:	ldrh	r4, [r0, #0]
   124c8:	mov.w	r5, #0
   124cc:	blt.w	12850 <_svfprintf_r+0x1310>
   124d0:	bic.w	r1, r1, #128	; 0x80
   124d4:	str	r1, [sp, #12]
   124d6:	orrs.w	r1, r4, r5
   124da:	str	r3, [sp, #40]	; 0x28
   124dc:	beq.w	11e94 <_svfprintf_r+0x954>
   124e0:	mov	r7, r2
   124e2:	b.w	1178c <_svfprintf_r+0x24c>
   124e6:	ldr	r3, [sp, #12]
   124e8:	lsls	r7, r3, #27
   124ea:	bmi.n	12504 <_svfprintf_r+0xfc4>
   124ec:	ldr	r3, [sp, #12]
   124ee:	lsls	r6, r3, #25
   124f0:	bpl.n	12504 <_svfprintf_r+0xfc4>
   124f2:	ldr	r2, [sp, #40]	; 0x28
   124f4:	ldr	r3, [r2, #0]
   124f6:	adds	r2, #4
   124f8:	str	r2, [sp, #40]	; 0x28
   124fa:	ldrh.w	r2, [sp, #28]
   124fe:	strh	r2, [r3, #0]
   12500:	b.w	1158e <_svfprintf_r+0x4e>
   12504:	ldr	r2, [sp, #40]	; 0x28
   12506:	ldr	r3, [r2, #0]
   12508:	adds	r2, #4
   1250a:	str	r2, [sp, #40]	; 0x28
   1250c:	ldr	r2, [sp, #28]
   1250e:	str	r2, [r3, #0]
   12510:	b.w	1158e <_svfprintf_r+0x4e>
   12514:	ldrd	r0, r1, [sp, #64]	; 0x40
   12518:	mov	r2, r0
   1251a:	mov	r3, r1
   1251c:	bl	101d0 <__aeabi_dcmpun>
   12520:	cmp	r0, #0
   12522:	bne.w	12b20 <_svfprintf_r+0x15e0>
   12526:	ldr	r3, [sp, #52]	; 0x34
   12528:	cmp.w	fp, #4294967295
   1252c:	bic.w	r7, r3, #32
   12530:	beq.w	12a02 <_svfprintf_r+0x14c2>
   12534:	cmp	r7, #71	; 0x47
   12536:	beq.w	1283e <_svfprintf_r+0x12fe>
   1253a:	ldr	r3, [sp, #68]	; 0x44
   1253c:	ldr	r2, [sp, #12]
   1253e:	cmp	r3, #0
   12540:	orr.w	r2, r2, #256	; 0x100
   12544:	str	r2, [sp, #44]	; 0x2c
   12546:	blt.w	12a3a <_svfprintf_r+0x14fa>
   1254a:	vldr	d7, [sp, #64]	; 0x40
   1254e:	vstr	d7, [sp, #96]	; 0x60
   12552:	movs	r3, #0
   12554:	str	r3, [sp, #16]
   12556:	ldr	r3, [sp, #52]	; 0x34
   12558:	cmp	r3, #102	; 0x66
   1255a:	beq.w	12a08 <_svfprintf_r+0x14c8>
   1255e:	cmp	r3, #70	; 0x46
   12560:	beq.w	127ee <_svfprintf_r+0x12ae>
   12564:	cmp	r7, #69	; 0x45
   12566:	ite	eq
   12568:	addeq.w	r5, fp, #1
   1256c:	movne	r5, fp
   1256e:	add	r2, sp, #132	; 0x84
   12570:	add	r3, sp, #120	; 0x78
   12572:	str	r2, [sp, #4]
   12574:	str	r3, [sp, #0]
   12576:	mov	r2, r5
   12578:	add	r3, sp, #116	; 0x74
   1257a:	movs	r1, #2
   1257c:	vldr	d0, [sp, #96]	; 0x60
   12580:	ldr	r0, [sp, #24]
   12582:	bl	12ea0 <_dtoa_r>
   12586:	ldr	r3, [sp, #52]	; 0x34
   12588:	cmp	r3, #103	; 0x67
   1258a:	mov	r6, r0
   1258c:	bne.w	12a66 <_svfprintf_r+0x1526>
   12590:	ldr	r3, [sp, #12]
   12592:	lsls	r2, r3, #31
   12594:	bpl.w	12b0a <_svfprintf_r+0x15ca>
   12598:	adds	r4, r6, r5
   1259a:	movs	r2, #0
   1259c:	movs	r3, #0
   1259e:	ldrd	r0, r1, [sp, #96]	; 0x60
   125a2:	bl	1016c <__aeabi_dcmpeq>
   125a6:	cmp	r0, #0
   125a8:	bne.w	128c6 <_svfprintf_r+0x1386>
   125ac:	ldr	r3, [sp, #132]	; 0x84
   125ae:	cmp	r4, r3
   125b0:	bls.n	125c0 <_svfprintf_r+0x1080>
   125b2:	movs	r1, #48	; 0x30
   125b4:	adds	r2, r3, #1
   125b6:	str	r2, [sp, #132]	; 0x84
   125b8:	strb	r1, [r3, #0]
   125ba:	ldr	r3, [sp, #132]	; 0x84
   125bc:	cmp	r4, r3
   125be:	bhi.n	125b4 <_svfprintf_r+0x1074>
   125c0:	subs	r3, r3, r6
   125c2:	cmp	r7, #71	; 0x47
   125c4:	str	r3, [sp, #56]	; 0x38
   125c6:	beq.w	128b8 <_svfprintf_r+0x1378>
   125ca:	ldr	r3, [sp, #52]	; 0x34
   125cc:	cmp	r3, #101	; 0x65
   125ce:	ble.w	12a84 <_svfprintf_r+0x1544>
   125d2:	ldr	r3, [sp, #52]	; 0x34
   125d4:	cmp	r3, #102	; 0x66
   125d6:	ldr	r3, [sp, #116]	; 0x74
   125d8:	str	r3, [sp, #60]	; 0x3c
   125da:	beq.w	12a9e <_svfprintf_r+0x155e>
   125de:	ldr	r2, [sp, #60]	; 0x3c
   125e0:	ldr	r1, [sp, #56]	; 0x38
   125e2:	cmp	r2, r1
   125e4:	blt.w	12a4c <_svfprintf_r+0x150c>
   125e8:	ldr	r3, [sp, #12]
   125ea:	lsls	r1, r3, #31
   125ec:	bmi.w	12b0e <_svfprintf_r+0x15ce>
   125f0:	bic.w	r3, r2, r2, asr #31
   125f4:	str	r2, [sp, #36]	; 0x24
   125f6:	movs	r2, #103	; 0x67
   125f8:	str	r2, [sp, #52]	; 0x34
   125fa:	ldr	r2, [sp, #16]
   125fc:	cmp	r2, #0
   125fe:	bne.w	12860 <_svfprintf_r+0x1320>
   12602:	str	r3, [sp, #16]
   12604:	ldr	r3, [sp, #44]	; 0x2c
   12606:	str	r3, [sp, #12]
   12608:	mov	fp, r2
   1260a:	ldrb.w	r7, [sp, #111]	; 0x6f
   1260e:	b.w	118e4 <_svfprintf_r+0x3a4>
   12612:	bic.w	r7, r7, #7
   12616:	vldr	d7, [r7]
   1261a:	add.w	r3, r7, #8
   1261e:	vstr	d7, [sp, #64]	; 0x40
   12622:	str	r3, [sp, #40]	; 0x28
   12624:	b.w	11b3c <_svfprintf_r+0x5fc>
   12628:	ldr	r1, [sp, #40]	; 0x28
   1262a:	strb.w	r3, [sp, #111]	; 0x6f
   1262e:	cmp.w	fp, #0
   12632:	ldr	r4, [r1, #0]
   12634:	add.w	r7, r1, #4
   12638:	mov.w	r5, #0
   1263c:	bge.w	12798 <_svfprintf_r+0x1258>
   12640:	str	r7, [sp, #40]	; 0x28
   12642:	movs	r7, #0
   12644:	b.w	1178c <_svfprintf_r+0x24c>
   12648:	ldr	r1, [sp, #12]
   1264a:	ands.w	r3, r1, #64	; 0x40
   1264e:	beq.w	122ee <_svfprintf_r+0xdae>
   12652:	ldr	r0, [sp, #40]	; 0x28
   12654:	strb.w	r2, [sp, #111]	; 0x6f
   12658:	mov	r3, r0
   1265a:	cmp.w	fp, #0
   1265e:	add.w	r3, r3, #4
   12662:	ldrh	r4, [r0, #0]
   12664:	mov.w	r5, #0
   12668:	blt.w	1284a <_svfprintf_r+0x130a>
   1266c:	bic.w	r1, r1, #128	; 0x80
   12670:	str	r1, [sp, #12]
   12672:	orrs.w	r1, r4, r5
   12676:	str	r3, [sp, #40]	; 0x28
   12678:	mov	r7, r2
   1267a:	bne.w	1189c <_svfprintf_r+0x35c>
   1267e:	b.w	11c6c <_svfprintf_r+0x72c>
   12682:	ldr	r3, [sp, #12]
   12684:	ldr	r2, [sp, #40]	; 0x28
   12686:	tst.w	r3, #64	; 0x40
   1268a:	mov	r3, r2
   1268c:	beq.w	12854 <_svfprintf_r+0x1314>
   12690:	adds	r3, #4
   12692:	ldrh	r4, [r2, #0]
   12694:	str	r3, [sp, #40]	; 0x28
   12696:	movs	r5, #0
   12698:	b.w	11ca6 <_svfprintf_r+0x766>
   1269c:	mov	r4, r2
   1269e:	adds	r3, #1
   126a0:	ldr	r2, [sp, #44]	; 0x2c
   126a2:	str	r3, [sp, #144]	; 0x90
   126a4:	add	r4, r5
   126a6:	cmp	r3, #7
   126a8:	str	r4, [sp, #148]	; 0x94
   126aa:	stmia.w	r9, {r2, r5}
   126ae:	bgt.w	12366 <_svfprintf_r+0xe26>
   126b2:	add.w	r9, r9, #8
   126b6:	b.n	1237c <_svfprintf_r+0xe3c>
   126b8:	.word	0x20000930
   126bc:	movs	r7, #0
   126be:	cmp	fp, r7
   126c0:	strb.w	r7, [sp, #111]	; 0x6f
   126c4:	blt.w	11eb8 <_svfprintf_r+0x978>
   126c8:	ldr	r3, [sp, #12]
   126ca:	bic.w	r3, r3, #128	; 0x80
   126ce:	str	r3, [sp, #12]
   126d0:	b.w	11e54 <_svfprintf_r+0x914>
   126d4:	add	r2, sp, #140	; 0x8c
   126d6:	ldr	r1, [sp, #20]
   126d8:	ldr	r0, [sp, #24]
   126da:	bl	14680 <__ssprint_r>
   126de:	cmp	r0, #0
   126e0:	bne.w	11734 <_svfprintf_r+0x1f4>
   126e4:	ldr	r4, [sp, #148]	; 0x94
   126e6:	add.w	r9, sp, #192	; 0xc0
   126ea:	b.n	11efc <_svfprintf_r+0x9bc>
   126ec:	ldr	r7, [sp, #40]	; 0x28
   126ee:	b.w	11eaa <_svfprintf_r+0x96a>
   126f2:	ldr	r3, [sp, #144]	; 0x90
   126f4:	ldr	r2, [pc, #736]	; (129d8 <_svfprintf_r+0x1498>)
   126f6:	str.w	r2, [r9]
   126fa:	adds	r3, #1
   126fc:	adds	r4, #1
   126fe:	movs	r2, #1
   12700:	cmp	r3, #7
   12702:	str	r4, [sp, #148]	; 0x94
   12704:	str	r3, [sp, #144]	; 0x90
   12706:	str.w	r2, [r9, #4]
   1270a:	bgt.w	12824 <_svfprintf_r+0x12e4>
   1270e:	add.w	r9, r9, #8
   12712:	cbnz	r5, 12720 <_svfprintf_r+0x11e0>
   12714:	ldr	r3, [sp, #56]	; 0x38
   12716:	cbnz	r3, 12720 <_svfprintf_r+0x11e0>
   12718:	ldr	r3, [sp, #12]
   1271a:	lsls	r7, r3, #31
   1271c:	bpl.w	11a6c <_svfprintf_r+0x52c>
   12720:	ldr	r3, [sp, #144]	; 0x90
   12722:	ldr	r1, [sp, #72]	; 0x48
   12724:	ldr	r2, [sp, #76]	; 0x4c
   12726:	str.w	r2, [r9]
   1272a:	adds	r3, #1
   1272c:	add	r4, r1
   1272e:	cmp	r3, #7
   12730:	str	r4, [sp, #148]	; 0x94
   12732:	str.w	r1, [r9, #4]
   12736:	str	r3, [sp, #144]	; 0x90
   12738:	bgt.w	12ad6 <_svfprintf_r+0x1596>
   1273c:	add.w	r9, r9, #8
   12740:	negs	r5, r5
   12742:	cmp	r5, #0
   12744:	ble.w	1289c <_svfprintf_r+0x135c>
   12748:	ldr	r2, [pc, #656]	; (129dc <_svfprintf_r+0x149c>)
   1274a:	str	r2, [sp, #44]	; 0x2c
   1274c:	cmp	r5, #16
   1274e:	ble.w	128e4 <_svfprintf_r+0x13a4>
   12752:	mov	r2, r4
   12754:	movs	r7, #16
   12756:	ldr.w	fp, [sp, #24]
   1275a:	ldr	r4, [sp, #20]
   1275c:	b.n	1276a <_svfprintf_r+0x122a>
   1275e:	add.w	r9, r9, #8
   12762:	subs	r5, #16
   12764:	cmp	r5, #16
   12766:	ble.w	128e2 <_svfprintf_r+0x13a2>
   1276a:	adds	r3, #1
   1276c:	adds	r2, #16
   1276e:	cmp	r3, #7
   12770:	str	r2, [sp, #148]	; 0x94
   12772:	str	r3, [sp, #144]	; 0x90
   12774:	str.w	sl, [r9]
   12778:	str.w	r7, [r9, #4]
   1277c:	ble.n	1275e <_svfprintf_r+0x121e>
   1277e:	add	r2, sp, #140	; 0x8c
   12780:	mov	r1, r4
   12782:	mov	r0, fp
   12784:	bl	14680 <__ssprint_r>
   12788:	cmp	r0, #0
   1278a:	bne.w	11734 <_svfprintf_r+0x1f4>
   1278e:	ldr	r2, [sp, #148]	; 0x94
   12790:	ldr	r3, [sp, #144]	; 0x90
   12792:	add.w	r9, sp, #192	; 0xc0
   12796:	b.n	12762 <_svfprintf_r+0x1222>
   12798:	ldr	r2, [sp, #12]
   1279a:	b.w	11c10 <_svfprintf_r+0x6d0>
   1279e:	ldr	r2, [sp, #12]
   127a0:	b.n	122ba <_svfprintf_r+0xd7a>
   127a2:	ldr	r3, [sp, #12]
   127a4:	orr.w	r3, r3, #32
   127a8:	str	r3, [sp, #12]
   127aa:	add.w	r8, r8, #1
   127ae:	ldrb.w	r3, [r8]
   127b2:	b.w	115f4 <_svfprintf_r+0xb4>
   127b6:	add	r2, sp, #140	; 0x8c
   127b8:	ldr	r1, [sp, #20]
   127ba:	ldr	r0, [sp, #24]
   127bc:	bl	14680 <__ssprint_r>
   127c0:	cmp	r0, #0
   127c2:	bne.w	11734 <_svfprintf_r+0x1f4>
   127c6:	ldr	r4, [sp, #148]	; 0x94
   127c8:	add.w	r9, sp, #192	; 0xc0
   127cc:	b.w	11f2c <_svfprintf_r+0x9ec>
   127d0:	movs	r1, #64	; 0x40
   127d2:	ldr	r0, [sp, #24]
   127d4:	bl	10610 <_malloc_r>
   127d8:	ldr	r2, [sp, #20]
   127da:	str	r0, [r2, #0]
   127dc:	str	r0, [r2, #16]
   127de:	cmp	r0, #0
   127e0:	beq.w	12bca <_svfprintf_r+0x168a>
   127e4:	ldr	r2, [sp, #20]
   127e6:	movs	r3, #64	; 0x40
   127e8:	str	r3, [r2, #20]
   127ea:	b.w	1156e <_svfprintf_r+0x2e>
   127ee:	add	r2, sp, #132	; 0x84
   127f0:	add	r3, sp, #120	; 0x78
   127f2:	str	r2, [sp, #4]
   127f4:	str	r3, [sp, #0]
   127f6:	mov	r2, fp
   127f8:	add	r3, sp, #116	; 0x74
   127fa:	movs	r1, #3
   127fc:	vldr	d0, [sp, #96]	; 0x60
   12800:	ldr	r0, [sp, #24]
   12802:	bl	12ea0 <_dtoa_r>
   12806:	mov	r5, fp
   12808:	mov	r6, r0
   1280a:	ldr	r3, [sp, #52]	; 0x34
   1280c:	cmp	r3, #70	; 0x46
   1280e:	add.w	r4, r6, r5
   12812:	bne.w	1259a <_svfprintf_r+0x105a>
   12816:	ldrb	r3, [r6, #0]
   12818:	cmp	r3, #48	; 0x30
   1281a:	beq.w	12b2c <_svfprintf_r+0x15ec>
   1281e:	ldr	r5, [sp, #116]	; 0x74
   12820:	add	r4, r5
   12822:	b.n	1259a <_svfprintf_r+0x105a>
   12824:	add	r2, sp, #140	; 0x8c
   12826:	ldr	r1, [sp, #20]
   12828:	ldr	r0, [sp, #24]
   1282a:	bl	14680 <__ssprint_r>
   1282e:	cmp	r0, #0
   12830:	bne.w	11734 <_svfprintf_r+0x1f4>
   12834:	ldr	r5, [sp, #116]	; 0x74
   12836:	ldr	r4, [sp, #148]	; 0x94
   12838:	add.w	r9, sp, #192	; 0xc0
   1283c:	b.n	12712 <_svfprintf_r+0x11d2>
   1283e:	cmp.w	fp, #0
   12842:	it	eq
   12844:	moveq.w	fp, #1
   12848:	b.n	1253a <_svfprintf_r+0xffa>
   1284a:	str	r3, [sp, #40]	; 0x28
   1284c:	mov	r7, r2
   1284e:	b.n	1230a <_svfprintf_r+0xdca>
   12850:	str	r3, [sp, #40]	; 0x28
   12852:	b.n	12642 <_svfprintf_r+0x1102>
   12854:	adds	r3, #4
   12856:	ldr	r4, [r2, #0]
   12858:	str	r3, [sp, #40]	; 0x28
   1285a:	movs	r5, #0
   1285c:	b.w	11ca6 <_svfprintf_r+0x766>
   12860:	movs	r7, #45	; 0x2d
   12862:	str	r3, [sp, #16]
   12864:	ldr	r3, [sp, #44]	; 0x2c
   12866:	str	r3, [sp, #12]
   12868:	strb.w	r7, [sp, #111]	; 0x6f
   1286c:	mov.w	fp, #0
   12870:	b.w	118e6 <_svfprintf_r+0x3a6>
   12874:	mov	r0, r6
   12876:	bl	113c0 <strlen>
   1287a:	mov	fp, r4
   1287c:	mov	r3, r0
   1287e:	str	r0, [sp, #36]	; 0x24
   12880:	b.w	11dc8 <_svfprintf_r+0x888>
   12884:	add	r2, sp, #140	; 0x8c
   12886:	ldr	r1, [sp, #20]
   12888:	ldr	r0, [sp, #24]
   1288a:	bl	14680 <__ssprint_r>
   1288e:	cmp	r0, #0
   12890:	bne.w	11734 <_svfprintf_r+0x1f4>
   12894:	ldr	r4, [sp, #148]	; 0x94
   12896:	ldr	r3, [sp, #144]	; 0x90
   12898:	add.w	r9, sp, #192	; 0xc0
   1289c:	ldr	r1, [sp, #56]	; 0x38
   1289e:	str.w	r6, [r9]
   128a2:	adds	r3, #1
   128a4:	add	r4, r1
   128a6:	cmp	r3, #7
   128a8:	str	r4, [sp, #148]	; 0x94
   128aa:	str	r3, [sp, #144]	; 0x90
   128ac:	str.w	r1, [r9, #4]
   128b0:	ble.w	11a68 <_svfprintf_r+0x528>
   128b4:	b.w	120ae <_svfprintf_r+0xb6e>
   128b8:	ldr	r3, [sp, #116]	; 0x74
   128ba:	adds	r5, r3, #3
   128bc:	blt.n	128fc <_svfprintf_r+0x13bc>
   128be:	cmp	fp, r3
   128c0:	blt.n	128fc <_svfprintf_r+0x13bc>
   128c2:	str	r3, [sp, #60]	; 0x3c
   128c4:	b.n	125de <_svfprintf_r+0x109e>
   128c6:	mov	r3, r4
   128c8:	b.n	125c0 <_svfprintf_r+0x1080>
   128ca:	add	r2, sp, #140	; 0x8c
   128cc:	ldr	r1, [sp, #20]
   128ce:	ldr	r0, [sp, #24]
   128d0:	bl	14680 <__ssprint_r>
   128d4:	cmp	r0, #0
   128d6:	bne.w	11734 <_svfprintf_r+0x1f4>
   128da:	ldr	r4, [sp, #148]	; 0x94
   128dc:	add.w	r9, sp, #192	; 0xc0
   128e0:	b.n	1217c <_svfprintf_r+0xc3c>
   128e2:	mov	r4, r2
   128e4:	adds	r3, #1
   128e6:	ldr	r2, [sp, #44]	; 0x2c
   128e8:	str	r3, [sp, #144]	; 0x90
   128ea:	add	r4, r5
   128ec:	cmp	r3, #7
   128ee:	str	r4, [sp, #148]	; 0x94
   128f0:	stmia.w	r9, {r2, r5}
   128f4:	bgt.n	12884 <_svfprintf_r+0x1344>
   128f6:	add.w	r9, r9, #8
   128fa:	b.n	1289c <_svfprintf_r+0x135c>
   128fc:	ldr	r2, [sp, #52]	; 0x34
   128fe:	subs	r2, #2
   12900:	str	r2, [sp, #52]	; 0x34
   12902:	subs	r3, #1
   12904:	cmp	r3, #0
   12906:	ldrb.w	r2, [sp, #52]	; 0x34
   1290a:	str	r3, [sp, #116]	; 0x74
   1290c:	it	lt
   1290e:	neglt	r3, r3
   12910:	strb.w	r2, [sp, #124]	; 0x7c
   12914:	ite	lt
   12916:	movlt	r2, #45	; 0x2d
   12918:	movge	r2, #43	; 0x2b
   1291a:	cmp	r3, #9
   1291c:	strb.w	r2, [sp, #125]	; 0x7d
   12920:	ble.w	12afa <_svfprintf_r+0x15ba>
   12924:	add.w	r0, sp, #139	; 0x8b
   12928:	mov	r4, r0
   1292a:	ldr	r2, [pc, #180]	; (129e0 <_svfprintf_r+0x14a0>)
   1292c:	smull	r2, r1, r2, r3
   12930:	asrs	r2, r3, #31
   12932:	rsb	r2, r2, r1, asr #2
   12936:	add.w	r1, r2, r2, lsl #2
   1293a:	sub.w	r3, r3, r1, lsl #1
   1293e:	add.w	r1, r3, #48	; 0x30
   12942:	cmp	r2, #9
   12944:	mov	r3, r2
   12946:	strb.w	r1, [r4, #-1]!
   1294a:	bgt.n	1292a <_svfprintf_r+0x13ea>
   1294c:	mov	r1, r4
   1294e:	adds	r3, #48	; 0x30
   12950:	uxtb	r2, r3
   12952:	strb.w	r2, [r1, #-1]!
   12956:	cmp	r0, r1
   12958:	bls.w	12bc4 <_svfprintf_r+0x1684>
   1295c:	add.w	r1, sp, #126	; 0x7e
   12960:	mov	r3, r4
   12962:	b.n	12968 <_svfprintf_r+0x1428>
   12964:	ldrb.w	r2, [r3], #1
   12968:	strb.w	r2, [r1], #1
   1296c:	cmp	r0, r3
   1296e:	bne.n	12964 <_svfprintf_r+0x1424>
   12970:	adds	r3, r0, #1
   12972:	subs	r3, r3, r4
   12974:	add.w	r2, sp, #126	; 0x7e
   12978:	add	r3, r2
   1297a:	add	r2, sp, #124	; 0x7c
   1297c:	subs	r3, r3, r2
   1297e:	ldr	r2, [sp, #56]	; 0x38
   12980:	str	r3, [sp, #84]	; 0x54
   12982:	cmp	r2, #1
   12984:	add	r3, r2
   12986:	str	r3, [sp, #36]	; 0x24
   12988:	ble.w	12b5a <_svfprintf_r+0x161a>
   1298c:	ldr	r3, [sp, #36]	; 0x24
   1298e:	ldr	r2, [sp, #72]	; 0x48
   12990:	add	r3, r2
   12992:	movs	r2, #0
   12994:	str	r3, [sp, #36]	; 0x24
   12996:	str	r2, [sp, #60]	; 0x3c
   12998:	bic.w	r3, r3, r3, asr #31
   1299c:	b.n	125fa <_svfprintf_r+0x10ba>
   1299e:	add	r2, sp, #140	; 0x8c
   129a0:	ldr	r1, [sp, #20]
   129a2:	ldr	r0, [sp, #24]
   129a4:	bl	14680 <__ssprint_r>
   129a8:	cmp	r0, #0
   129aa:	bne.w	11734 <_svfprintf_r+0x1f4>
   129ae:	ldr	r3, [sp, #116]	; 0x74
   129b0:	ldr	r4, [sp, #148]	; 0x94
   129b2:	add.w	r9, sp, #192	; 0xc0
   129b6:	b.n	12390 <_svfprintf_r+0xe50>
   129b8:	add	r2, sp, #140	; 0x8c
   129ba:	ldr	r1, [sp, #20]
   129bc:	ldr	r0, [sp, #24]
   129be:	bl	14680 <__ssprint_r>
   129c2:	cmp	r0, #0
   129c4:	bne.w	11734 <_svfprintf_r+0x1f4>
   129c8:	ldr	r3, [sp, #116]	; 0x74
   129ca:	ldr	r2, [sp, #56]	; 0x38
   129cc:	ldr	r4, [sp, #148]	; 0x94
   129ce:	subs	r3, r2, r3
   129d0:	add.w	r9, sp, #192	; 0xc0
   129d4:	b.n	123c0 <_svfprintf_r+0xe80>
   129d6:	nop
   129d8:	.word	0x20000500
   129dc:	.word	0x20000930
   129e0:	.word	0x66666667
   129e4:	cmp	r5, #6
   129e6:	mov	r3, r5
   129e8:	it	cs
   129ea:	movcs	r3, #6
   129ec:	str	r3, [sp, #36]	; 0x24
   129ee:	bic.w	r3, r3, r3, asr #31
   129f2:	mov	fp, r6
   129f4:	str	r7, [sp, #40]	; 0x28
   129f6:	str	r6, [sp, #60]	; 0x3c
   129f8:	mov	r7, r6
   129fa:	str	r3, [sp, #16]
   129fc:	ldr	r6, [pc, #536]	; (12c18 <_svfprintf_r+0x16d8>)
   129fe:	b.w	118e4 <_svfprintf_r+0x3a4>
   12a02:	mov.w	fp, #6
   12a06:	b.n	1253a <_svfprintf_r+0xffa>
   12a08:	add	r2, sp, #132	; 0x84
   12a0a:	add	r3, sp, #120	; 0x78
   12a0c:	str	r2, [sp, #4]
   12a0e:	str	r3, [sp, #0]
   12a10:	mov	r2, fp
   12a12:	add	r3, sp, #116	; 0x74
   12a14:	movs	r1, #3
   12a16:	vldr	d0, [sp, #96]	; 0x60
   12a1a:	ldr	r0, [sp, #24]
   12a1c:	bl	12ea0 <_dtoa_r>
   12a20:	mov	r5, fp
   12a22:	mov	r6, r0
   12a24:	add.w	r4, r0, fp
   12a28:	b.n	12816 <_svfprintf_r+0x12d6>
   12a2a:	movs	r7, #45	; 0x2d
   12a2c:	strb.w	r7, [sp, #111]	; 0x6f
   12a30:	b.w	11b8a <_svfprintf_r+0x64a>
   12a34:	str	r3, [sp, #12]
   12a36:	b.w	11ce2 <_svfprintf_r+0x7a2>
   12a3a:	ldrd	r1, r2, [sp, #64]	; 0x40
   12a3e:	add.w	r3, r2, #2147483648	; 0x80000000
   12a42:	str	r3, [sp, #100]	; 0x64
   12a44:	movs	r3, #45	; 0x2d
   12a46:	str	r1, [sp, #96]	; 0x60
   12a48:	str	r3, [sp, #16]
   12a4a:	b.n	12556 <_svfprintf_r+0x1016>
   12a4c:	ldr	r2, [sp, #72]	; 0x48
   12a4e:	ldr	r3, [sp, #56]	; 0x38
   12a50:	add	r3, r2
   12a52:	ldr	r2, [sp, #60]	; 0x3c
   12a54:	str	r3, [sp, #36]	; 0x24
   12a56:	cmp	r2, #0
   12a58:	ble.w	12b6e <_svfprintf_r+0x162e>
   12a5c:	movs	r2, #103	; 0x67
   12a5e:	bic.w	r3, r3, r3, asr #31
   12a62:	str	r2, [sp, #52]	; 0x34
   12a64:	b.n	125fa <_svfprintf_r+0x10ba>
   12a66:	ldr	r3, [sp, #52]	; 0x34
   12a68:	cmp	r3, #71	; 0x47
   12a6a:	bne.w	12598 <_svfprintf_r+0x1058>
   12a6e:	ldr	r3, [sp, #12]
   12a70:	lsls	r3, r3, #31
   12a72:	bmi.w	1280a <_svfprintf_r+0x12ca>
   12a76:	ldr	r3, [sp, #132]	; 0x84
   12a78:	cmp	r7, #71	; 0x47
   12a7a:	sub.w	r3, r3, r6
   12a7e:	str	r3, [sp, #56]	; 0x38
   12a80:	beq.w	128b8 <_svfprintf_r+0x1378>
   12a84:	ldr	r3, [sp, #116]	; 0x74
   12a86:	b.n	12902 <_svfprintf_r+0x13c2>
   12a88:	bic.w	r3, r5, r5, asr #31
   12a8c:	str	r7, [sp, #40]	; 0x28
   12a8e:	str	r3, [sp, #16]
   12a90:	str	r5, [sp, #36]	; 0x24
   12a92:	mov	fp, r0
   12a94:	str	r0, [sp, #60]	; 0x3c
   12a96:	ldrb.w	r7, [sp, #111]	; 0x6f
   12a9a:	b.w	118e4 <_svfprintf_r+0x3a4>
   12a9e:	cmp	r3, #0
   12aa0:	ble.n	12b7e <_svfprintf_r+0x163e>
   12aa2:	cmp.w	fp, #0
   12aa6:	bne.n	12b48 <_svfprintf_r+0x1608>
   12aa8:	ldr	r2, [sp, #12]
   12aaa:	lsls	r4, r2, #31
   12aac:	bmi.n	12b48 <_svfprintf_r+0x1608>
   12aae:	mov	r2, r3
   12ab0:	str	r2, [sp, #36]	; 0x24
   12ab2:	bic.w	r3, r3, r3, asr #31
   12ab6:	b.n	125fa <_svfprintf_r+0x10ba>
   12ab8:	ldr	r3, [sp, #12]
   12aba:	lsls	r3, r3, #31
   12abc:	mov	r7, fp
   12abe:	bpl.n	12acc <_svfprintf_r+0x158c>
   12ac0:	add	r6, sp, #256	; 0x100
   12ac2:	movs	r3, #48	; 0x30
   12ac4:	strb.w	r3, [r6, #-65]!
   12ac8:	b.w	118d0 <_svfprintf_r+0x390>
   12acc:	str.w	fp, [sp, #36]	; 0x24
   12ad0:	add	r6, sp, #192	; 0xc0
   12ad2:	b.w	118d6 <_svfprintf_r+0x396>
   12ad6:	add	r2, sp, #140	; 0x8c
   12ad8:	ldr	r1, [sp, #20]
   12ada:	ldr	r0, [sp, #24]
   12adc:	bl	14680 <__ssprint_r>
   12ae0:	cmp	r0, #0
   12ae2:	bne.w	11734 <_svfprintf_r+0x1f4>
   12ae6:	ldr	r5, [sp, #116]	; 0x74
   12ae8:	ldr	r4, [sp, #148]	; 0x94
   12aea:	ldr	r3, [sp, #144]	; 0x90
   12aec:	add.w	r9, sp, #192	; 0xc0
   12af0:	b.n	12740 <_svfprintf_r+0x1200>
   12af2:	mov	r8, r4
   12af4:	movs	r5, #0
   12af6:	b.w	115f8 <_svfprintf_r+0xb8>
   12afa:	adds	r3, #48	; 0x30
   12afc:	movs	r2, #48	; 0x30
   12afe:	strb.w	r3, [sp, #127]	; 0x7f
   12b02:	strb.w	r2, [sp, #126]	; 0x7e
   12b06:	add	r3, sp, #128	; 0x80
   12b08:	b.n	1297a <_svfprintf_r+0x143a>
   12b0a:	ldr	r3, [sp, #132]	; 0x84
   12b0c:	b.n	125c0 <_svfprintf_r+0x1080>
   12b0e:	ldr	r2, [sp, #72]	; 0x48
   12b10:	ldr	r3, [sp, #60]	; 0x3c
   12b12:	add	r3, r2
   12b14:	movs	r2, #103	; 0x67
   12b16:	str	r3, [sp, #36]	; 0x24
   12b18:	str	r2, [sp, #52]	; 0x34
   12b1a:	bic.w	r3, r3, r3, asr #31
   12b1e:	b.n	125fa <_svfprintf_r+0x10ba>
   12b20:	ldr	r6, [pc, #248]	; (12c1c <_svfprintf_r+0x16dc>)
   12b22:	ldr	r3, [pc, #252]	; (12c20 <_svfprintf_r+0x16e0>)
   12b24:	ldrb.w	r7, [sp, #111]	; 0x6f
   12b28:	b.w	11b8e <_svfprintf_r+0x64e>
   12b2c:	movs	r2, #0
   12b2e:	movs	r3, #0
   12b30:	ldrd	r0, r1, [sp, #96]	; 0x60
   12b34:	bl	1016c <__aeabi_dcmpeq>
   12b38:	cmp	r0, #0
   12b3a:	bne.w	1281e <_svfprintf_r+0x12de>
   12b3e:	rsb	r5, r5, #1
   12b42:	str	r5, [sp, #116]	; 0x74
   12b44:	add	r4, r5
   12b46:	b.n	1259a <_svfprintf_r+0x105a>
   12b48:	ldr	r3, [sp, #60]	; 0x3c
   12b4a:	ldr	r2, [sp, #72]	; 0x48
   12b4c:	adds	r5, r3, r2
   12b4e:	add.w	r3, r5, fp
   12b52:	str	r3, [sp, #36]	; 0x24
   12b54:	bic.w	r3, r3, r3, asr #31
   12b58:	b.n	125fa <_svfprintf_r+0x10ba>
   12b5a:	ldr	r3, [sp, #12]
   12b5c:	ands.w	r3, r3, #1
   12b60:	bne.w	1298c <_svfprintf_r+0x144c>
   12b64:	str	r3, [sp, #60]	; 0x3c
   12b66:	ldr	r3, [sp, #36]	; 0x24
   12b68:	bic.w	r3, r3, r3, asr #31
   12b6c:	b.n	125fa <_svfprintf_r+0x10ba>
   12b6e:	ldr	r3, [sp, #60]	; 0x3c
   12b70:	ldr	r2, [sp, #36]	; 0x24
   12b72:	rsb	r3, r3, #1
   12b76:	add	r2, r3
   12b78:	mov	r3, r2
   12b7a:	str	r2, [sp, #36]	; 0x24
   12b7c:	b.n	12a5c <_svfprintf_r+0x151c>
   12b7e:	cmp.w	fp, #0
   12b82:	bne.n	12b8a <_svfprintf_r+0x164a>
   12b84:	ldr	r3, [sp, #12]
   12b86:	lsls	r0, r3, #31
   12b88:	bpl.n	12b9a <_svfprintf_r+0x165a>
   12b8a:	ldr	r3, [sp, #72]	; 0x48
   12b8c:	adds	r5, r3, #1
   12b8e:	add.w	r3, r5, fp
   12b92:	str	r3, [sp, #36]	; 0x24
   12b94:	bic.w	r3, r3, r3, asr #31
   12b98:	b.n	125fa <_svfprintf_r+0x10ba>
   12b9a:	movs	r3, #1
   12b9c:	str	r3, [sp, #36]	; 0x24
   12b9e:	b.n	125fa <_svfprintf_r+0x10ba>
   12ba0:	ldr	r0, [sp, #40]	; 0x28
   12ba2:	ldrb.w	r3, [r8, #1]
   12ba6:	ldr	r5, [r0, #0]
   12ba8:	adds	r0, #4
   12baa:	cmp	r5, #0
   12bac:	str	r0, [sp, #40]	; 0x28
   12bae:	mov	r8, r4
   12bb0:	bge.w	115f4 <_svfprintf_r+0xb4>
   12bb4:	mov.w	r5, #4294967295
   12bb8:	b.w	115f4 <_svfprintf_r+0xb4>
   12bbc:	strb.w	r1, [sp, #111]	; 0x6f
   12bc0:	b.w	11756 <_svfprintf_r+0x216>
   12bc4:	add.w	r3, sp, #126	; 0x7e
   12bc8:	b.n	1297a <_svfprintf_r+0x143a>
   12bca:	ldr	r2, [sp, #24]
   12bcc:	movs	r3, #12
   12bce:	str	r3, [r2, #0]
   12bd0:	mov.w	r0, #4294967295
   12bd4:	b.w	11746 <_svfprintf_r+0x206>
   12bd8:	strb.w	r1, [sp, #111]	; 0x6f
   12bdc:	b.w	11850 <_svfprintf_r+0x310>
   12be0:	strb.w	r1, [sp, #111]	; 0x6f
   12be4:	b.w	11b1c <_svfprintf_r+0x5dc>
   12be8:	strb.w	r1, [sp, #111]	; 0x6f
   12bec:	b.w	11c8a <_svfprintf_r+0x74a>
   12bf0:	strb.w	r1, [sp, #111]	; 0x6f
   12bf4:	b.w	11c2e <_svfprintf_r+0x6ee>
   12bf8:	strb.w	r1, [sp, #111]	; 0x6f
   12bfc:	b.w	11bda <_svfprintf_r+0x69a>
   12c00:	strb.w	r1, [sp, #111]	; 0x6f
   12c04:	b.w	11e72 <_svfprintf_r+0x932>
   12c08:	strb.w	r1, [sp, #111]	; 0x6f
   12c0c:	b.w	11e30 <_svfprintf_r+0x8f0>
   12c10:	strb.w	r1, [sp, #111]	; 0x6f
   12c14:	b.w	11df4 <_svfprintf_r+0x8b4>
   12c18:	.word	0x20000978
   12c1c:	.word	0x2000094c
   12c20:	.word	0x20000948

00012c24 <_vdprintf_r>:
   12c24:	push	{r4, r5, r6, r7, lr}
   12c26:	sub.w	sp, sp, #532	; 0x214
   12c2a:	add	r5, sp, #16
   12c2c:	str	r3, [sp, #0]
   12c2e:	mov	r7, r1
   12c30:	mov	r3, r2
   12c32:	mov.w	r4, #512	; 0x200
   12c36:	add	r2, sp, #12
   12c38:	mov	r1, r5
   12c3a:	str	r4, [sp, #12]
   12c3c:	mov	r6, r0
   12c3e:	bl	14780 <_vasnprintf_r>
   12c42:	cbz	r0, 12c68 <_vdprintf_r+0x44>
   12c44:	mov	r4, r0
   12c46:	mov	r2, r0
   12c48:	mov	r1, r7
   12c4a:	ldr	r3, [sp, #12]
   12c4c:	mov	r0, r6
   12c4e:	bl	12ca4 <_write_r>
   12c52:	cmp	r4, r5
   12c54:	str	r0, [sp, #12]
   12c56:	beq.n	12c62 <_vdprintf_r+0x3e>
   12c58:	mov	r0, r6
   12c5a:	mov	r1, r4
   12c5c:	bl	13e70 <_free_r>
   12c60:	ldr	r0, [sp, #12]
   12c62:	add.w	sp, sp, #532	; 0x214
   12c66:	pop	{r4, r5, r6, r7, pc}
   12c68:	mov.w	r0, #4294967295
   12c6c:	b.n	12c62 <_vdprintf_r+0x3e>
   12c6e:	nop

00012c70 <vdprintf>:
   12c70:	push	{r4}
   12c72:	ldr	r4, [pc, #16]	; (12c84 <vdprintf+0x14>)
   12c74:	mov	r3, r2
   12c76:	mov	r2, r1
   12c78:	mov	r1, r0
   12c7a:	ldr	r0, [r4, #0]
   12c7c:	ldr.w	r4, [sp], #4
   12c80:	b.w	12c24 <_vdprintf_r>
   12c84:	.word	0x20001090

00012c88 <__ascii_wctomb>:
   12c88:	cbz	r1, 12c94 <__ascii_wctomb+0xc>
   12c8a:	cmp	r2, #255	; 0xff
   12c8c:	bhi.n	12c98 <__ascii_wctomb+0x10>
   12c8e:	strb	r2, [r1, #0]
   12c90:	movs	r0, #1
   12c92:	bx	lr
   12c94:	mov	r0, r1
   12c96:	bx	lr
   12c98:	movs	r3, #138	; 0x8a
   12c9a:	str	r3, [r0, #0]
   12c9c:	mov.w	r0, #4294967295
   12ca0:	bx	lr
   12ca2:	nop

00012ca4 <_write_r>:
   12ca4:	push	{r4, r5, r6, lr}
   12ca6:	mov	r5, r1
   12ca8:	ldr	r4, [pc, #32]	; (12ccc <_write_r+0x28>)
   12caa:	mov	r1, r2
   12cac:	mov	r6, r0
   12cae:	mov	r2, r3
   12cb0:	mov	r0, r5
   12cb2:	movs	r3, #0
   12cb4:	str	r3, [r4, #0]
   12cb6:	bl	f5dc <_write>
   12cba:	adds	r3, r0, #1
   12cbc:	beq.n	12cc0 <_write_r+0x1c>
   12cbe:	pop	{r4, r5, r6, pc}
   12cc0:	ldr	r3, [r4, #0]
   12cc2:	cmp	r3, #0
   12cc4:	beq.n	12cbe <_write_r+0x1a>
   12cc6:	str	r3, [r6, #0]
   12cc8:	pop	{r4, r5, r6, pc}
   12cca:	nop
   12ccc:	.word	0x20008ac0

00012cd0 <__register_exitproc>:
   12cd0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   12cd4:	ldr	r4, [pc, #148]	; (12d6c <__register_exitproc+0x9c>)
   12cd6:	ldr	r5, [r4, #0]
   12cd8:	ldr.w	r4, [r5, #328]	; 0x148
   12cdc:	mov	r6, r0
   12cde:	mov	r8, r1
   12ce0:	mov	sl, r2
   12ce2:	mov	r9, r3
   12ce4:	cbz	r4, 12d58 <__register_exitproc+0x88>
   12ce6:	ldr	r0, [r4, #4]
   12ce8:	cmp	r0, #31
   12cea:	bgt.n	12d1c <__register_exitproc+0x4c>
   12cec:	adds	r3, r0, #1
   12cee:	cbz	r6, 12d0e <__register_exitproc+0x3e>
   12cf0:	add.w	r5, r4, r0, lsl #2
   12cf4:	movs	r2, #1
   12cf6:	str.w	sl, [r5, #136]	; 0x88
   12cfa:	ldr.w	r1, [r4, #392]	; 0x188
   12cfe:	lsls	r2, r0
   12d00:	orrs	r1, r2
   12d02:	cmp	r6, #2
   12d04:	str.w	r1, [r4, #392]	; 0x188
   12d08:	str.w	r9, [r5, #264]	; 0x108
   12d0c:	beq.n	12d4c <__register_exitproc+0x7c>
   12d0e:	adds	r0, #2
   12d10:	str	r3, [r4, #4]
   12d12:	str.w	r8, [r4, r0, lsl #2]
   12d16:	movs	r0, #0
   12d18:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   12d1c:	ldr	r3, [pc, #80]	; (12d70 <__register_exitproc+0xa0>)
   12d1e:	cbz	r3, 12d62 <__register_exitproc+0x92>
   12d20:	mov.w	r0, #400	; 0x190
   12d24:	bl	105f0 <malloc>
   12d28:	mov	r4, r0
   12d2a:	cbz	r0, 12d62 <__register_exitproc+0x92>
   12d2c:	ldr.w	r3, [r5, #328]	; 0x148
   12d30:	movs	r7, #0
   12d32:	stmia.w	r0, {r3, r7}
   12d36:	str.w	r4, [r5, #328]	; 0x148
   12d3a:	mov	r0, r7
   12d3c:	movs	r3, #1
   12d3e:	str.w	r7, [r4, #392]	; 0x188
   12d42:	str.w	r7, [r4, #396]	; 0x18c
   12d46:	cmp	r6, #0
   12d48:	beq.n	12d0e <__register_exitproc+0x3e>
   12d4a:	b.n	12cf0 <__register_exitproc+0x20>
   12d4c:	ldr.w	r1, [r4, #396]	; 0x18c
   12d50:	orrs	r2, r1
   12d52:	str.w	r2, [r4, #396]	; 0x18c
   12d56:	b.n	12d0e <__register_exitproc+0x3e>
   12d58:	add.w	r4, r5, #332	; 0x14c
   12d5c:	str.w	r4, [r5, #328]	; 0x148
   12d60:	b.n	12ce6 <__register_exitproc+0x16>
   12d62:	mov.w	r0, #4294967295
   12d66:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   12d6a:	nop
   12d6c:	.word	0x2000091c
   12d70:	.word	0x000105f1

00012d74 <quorem>:
   12d74:	ldr	r2, [r0, #16]
   12d76:	ldr	r3, [r1, #16]
   12d78:	cmp	r3, r2
   12d7a:	bgt.w	12e98 <quorem+0x124>
   12d7e:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12d82:	add.w	r8, r3, #4294967295
   12d86:	add.w	r7, r1, #20
   12d8a:	add.w	fp, r0, #20
   12d8e:	ldr.w	r2, [r7, r8, lsl #2]
   12d92:	ldr.w	r3, [fp, r8, lsl #2]
   12d96:	mov.w	r4, r8, lsl #2
   12d9a:	sub	sp, #12
   12d9c:	adds	r2, #1
   12d9e:	udiv	r9, r3, r2
   12da2:	add.w	r3, fp, r4
   12da6:	str	r4, [sp, #0]
   12da8:	add.w	sl, r7, r4
   12dac:	str	r3, [sp, #4]
   12dae:	cmp.w	r9, #0
   12db2:	beq.n	12e28 <quorem+0xb4>
   12db4:	movs	r5, #0
   12db6:	mov	ip, r7
   12db8:	mov	lr, fp
   12dba:	mov	r3, r5
   12dbc:	ldr.w	r6, [ip], #4
   12dc0:	ldr.w	r2, [lr]
   12dc4:	uxth	r4, r6
   12dc6:	mla	r5, r9, r4, r5
   12dca:	lsrs	r6, r6, #16
   12dcc:	lsrs	r4, r5, #16
   12dce:	mla	r4, r9, r6, r4
   12dd2:	uxth	r5, r5
   12dd4:	subs	r3, r3, r5
   12dd6:	uxth	r6, r4
   12dd8:	uxtah	r3, r3, r2
   12ddc:	rsb	r6, r6, r2, lsr #16
   12de0:	add.w	r6, r6, r3, asr #16
   12de4:	uxth	r3, r3
   12de6:	orr.w	r3, r3, r6, lsl #16
   12dea:	cmp	sl, ip
   12dec:	str.w	r3, [lr], #4
   12df0:	mov.w	r5, r4, lsr #16
   12df4:	mov.w	r3, r6, asr #16
   12df8:	bcs.n	12dbc <quorem+0x48>
   12dfa:	ldr	r3, [sp, #0]
   12dfc:	ldr.w	r3, [fp, r3]
   12e00:	cbnz	r3, 12e28 <quorem+0xb4>
   12e02:	ldr	r4, [sp, #4]
   12e04:	subs	r3, r4, #4
   12e06:	cmp	fp, r3
   12e08:	bcs.n	12e24 <quorem+0xb0>
   12e0a:	ldr.w	r3, [r4, #-4]
   12e0e:	cbnz	r3, 12e24 <quorem+0xb0>
   12e10:	sub.w	r3, r4, #8
   12e14:	b.n	12e1c <quorem+0xa8>
   12e16:	ldr	r2, [r3, #0]
   12e18:	subs	r3, #4
   12e1a:	cbnz	r2, 12e24 <quorem+0xb0>
   12e1c:	cmp	fp, r3
   12e1e:	add.w	r8, r8, #4294967295
   12e22:	bcc.n	12e16 <quorem+0xa2>
   12e24:	str.w	r8, [r0, #16]
   12e28:	mov	r4, r0
   12e2a:	bl	1446c <__mcmp>
   12e2e:	cmp	r0, #0
   12e30:	blt.n	12e90 <quorem+0x11c>
   12e32:	add.w	r9, r9, #1
   12e36:	mov	r5, fp
   12e38:	movs	r3, #0
   12e3a:	ldr.w	r1, [r7], #4
   12e3e:	ldr	r0, [r5, #0]
   12e40:	uxth	r2, r1
   12e42:	subs	r2, r3, r2
   12e44:	lsrs	r1, r1, #16
   12e46:	uxtah	r2, r2, r0
   12e4a:	rsb	r3, r1, r0, lsr #16
   12e4e:	add.w	r3, r3, r2, asr #16
   12e52:	uxth	r1, r2
   12e54:	orr.w	r1, r1, r3, lsl #16
   12e58:	cmp	sl, r7
   12e5a:	str.w	r1, [r5], #4
   12e5e:	mov.w	r3, r3, asr #16
   12e62:	bcs.n	12e3a <quorem+0xc6>
   12e64:	ldr.w	r2, [fp, r8, lsl #2]
   12e68:	add.w	r3, fp, r8, lsl #2
   12e6c:	cbnz	r2, 12e90 <quorem+0x11c>
   12e6e:	subs	r2, r3, #4
   12e70:	cmp	fp, r2
   12e72:	bcs.n	12e8c <quorem+0x118>
   12e74:	ldr.w	r2, [r3, #-4]
   12e78:	cbnz	r2, 12e8c <quorem+0x118>
   12e7a:	subs	r3, #8
   12e7c:	b.n	12e84 <quorem+0x110>
   12e7e:	ldr	r2, [r3, #0]
   12e80:	subs	r3, #4
   12e82:	cbnz	r2, 12e8c <quorem+0x118>
   12e84:	cmp	fp, r3
   12e86:	add.w	r8, r8, #4294967295
   12e8a:	bcc.n	12e7e <quorem+0x10a>
   12e8c:	str.w	r8, [r4, #16]
   12e90:	mov	r0, r9
   12e92:	add	sp, #12
   12e94:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12e98:	movs	r0, #0
   12e9a:	bx	lr
   12e9c:	movs	r0, r0
	...

00012ea0 <_dtoa_r>:
   12ea0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12ea4:	vmov	r6, r7, d0
   12ea8:	sub	sp, #108	; 0x6c
   12eaa:	ldr	r4, [r0, #64]	; 0x40
   12eac:	ldr	r5, [sp, #144]	; 0x90
   12eae:	str	r1, [sp, #0]
   12eb0:	mov	r9, r0
   12eb2:	str	r2, [sp, #20]
   12eb4:	str	r3, [sp, #12]
   12eb6:	vmov	sl, s0
   12eba:	mov	fp, r7
   12ebc:	cbz	r4, 12ed4 <_dtoa_r+0x34>
   12ebe:	ldr	r2, [r0, #68]	; 0x44
   12ec0:	str	r2, [r4, #4]
   12ec2:	movs	r3, #1
   12ec4:	lsls	r3, r2
   12ec6:	str	r3, [r4, #8]
   12ec8:	mov	r1, r4
   12eca:	bl	140a8 <_Bfree>
   12ece:	movs	r3, #0
   12ed0:	str.w	r3, [r9, #64]	; 0x40
   12ed4:	cmp.w	fp, #0
   12ed8:	mov	r4, fp
   12eda:	blt.n	12f46 <_dtoa_r+0xa6>
   12edc:	movs	r3, #0
   12ede:	str	r3, [r5, #0]
   12ee0:	ldr	r3, [pc, #644]	; (13168 <_dtoa_r+0x2c8>)
   12ee2:	mov	r2, r3
   12ee4:	ands	r3, r4
   12ee6:	cmp	r3, r2
   12ee8:	beq.n	12f18 <_dtoa_r+0x78>
   12eea:	movs	r2, #0
   12eec:	movs	r3, #0
   12eee:	mov	r0, sl
   12ef0:	mov	r1, fp
   12ef2:	bl	1016c <__aeabi_dcmpeq>
   12ef6:	mov	r6, sl
   12ef8:	mov	r7, fp
   12efa:	mov	r8, r0
   12efc:	cbz	r0, 12f52 <_dtoa_r+0xb2>
   12efe:	ldr	r2, [sp, #12]
   12f00:	movs	r3, #1
   12f02:	str	r3, [r2, #0]
   12f04:	ldr	r3, [sp, #148]	; 0x94
   12f06:	cmp	r3, #0
   12f08:	beq.w	13088 <_dtoa_r+0x1e8>
   12f0c:	ldr	r0, [pc, #604]	; (1316c <_dtoa_r+0x2cc>)
   12f0e:	str	r0, [r3, #0]
   12f10:	subs	r0, #1
   12f12:	add	sp, #108	; 0x6c
   12f14:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12f18:	ldr	r2, [sp, #12]
   12f1a:	movw	r3, #9999	; 0x270f
   12f1e:	str	r3, [r2, #0]
   12f20:	cmp.w	sl, #0
   12f24:	beq.w	1305c <_dtoa_r+0x1bc>
   12f28:	ldr	r0, [pc, #580]	; (13170 <_dtoa_r+0x2d0>)
   12f2a:	ldr	r3, [sp, #148]	; 0x94
   12f2c:	cmp	r3, #0
   12f2e:	beq.n	12f12 <_dtoa_r+0x72>
   12f30:	ldrb	r3, [r0, #3]
   12f32:	cmp	r3, #0
   12f34:	beq.w	1308c <_dtoa_r+0x1ec>
   12f38:	add.w	r3, r0, #8
   12f3c:	ldr	r2, [sp, #148]	; 0x94
   12f3e:	str	r3, [r2, #0]
   12f40:	add	sp, #108	; 0x6c
   12f42:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12f46:	movs	r3, #1
   12f48:	bic.w	r4, fp, #2147483648	; 0x80000000
   12f4c:	str	r3, [r5, #0]
   12f4e:	mov	fp, r4
   12f50:	b.n	12ee0 <_dtoa_r+0x40>
   12f52:	add	r2, sp, #96	; 0x60
   12f54:	add	r1, sp, #100	; 0x64
   12f56:	vmov	d0, r6, r7
   12f5a:	mov	r0, r9
   12f5c:	bl	145c4 <__d2b>
   12f60:	lsrs	r5, r4, #20
   12f62:	str	r0, [sp, #40]	; 0x28
   12f64:	bne.w	1306e <_dtoa_r+0x1ce>
   12f68:	ldr	r5, [sp, #96]	; 0x60
   12f6a:	ldr	r6, [sp, #100]	; 0x64
   12f6c:	add	r6, r5
   12f6e:	addw	r3, r6, #1074	; 0x432
   12f72:	cmp	r3, #32
   12f74:	ble.w	13488 <_dtoa_r+0x5e8>
   12f78:	rsb	r3, r3, #64	; 0x40
   12f7c:	addw	r0, r6, #1042	; 0x412
   12f80:	lsls	r4, r3
   12f82:	lsr.w	r0, sl, r0
   12f86:	orrs	r0, r4
   12f88:	bl	fbb0 <__aeabi_ui2d>
   12f8c:	movs	r3, #1
   12f8e:	subs	r4, r6, #1
   12f90:	sub.w	r1, r1, #32505856	; 0x1f00000
   12f94:	str	r3, [sp, #60]	; 0x3c
   12f96:	movs	r2, #0
   12f98:	ldr	r3, [pc, #472]	; (13174 <_dtoa_r+0x2d4>)
   12f9a:	bl	f934 <__aeabi_dsub>
   12f9e:	add	r3, pc, #432	; (adr r3, 13150 <_dtoa_r+0x2b0>)
   12fa0:	ldrd	r2, r3, [r3]
   12fa4:	bl	fc9c <__aeabi_dmul>
   12fa8:	add	r3, pc, #428	; (adr r3, 13158 <_dtoa_r+0x2b8>)
   12faa:	ldrd	r2, r3, [r3]
   12fae:	bl	f938 <__adddf3>
   12fb2:	mov	r6, r0
   12fb4:	mov	r0, r4
   12fb6:	mov	r7, r1
   12fb8:	bl	fbd0 <__aeabi_i2d>
   12fbc:	add	r3, pc, #416	; (adr r3, 13160 <_dtoa_r+0x2c0>)
   12fbe:	ldrd	r2, r3, [r3]
   12fc2:	bl	fc9c <__aeabi_dmul>
   12fc6:	mov	r2, r0
   12fc8:	mov	r3, r1
   12fca:	mov	r0, r6
   12fcc:	mov	r1, r7
   12fce:	bl	f938 <__adddf3>
   12fd2:	mov	r6, r0
   12fd4:	mov	r7, r1
   12fd6:	bl	101fc <__aeabi_d2iz>
   12fda:	movs	r2, #0
   12fdc:	str	r0, [sp, #16]
   12fde:	movs	r3, #0
   12fe0:	mov	r0, r6
   12fe2:	mov	r1, r7
   12fe4:	bl	10180 <__aeabi_dcmplt>
   12fe8:	cmp	r0, #0
   12fea:	bne.w	1343e <_dtoa_r+0x59e>
   12fee:	ldr	r6, [sp, #16]
   12ff0:	cmp	r6, #22
   12ff2:	bhi.w	13438 <_dtoa_r+0x598>
   12ff6:	ldr	r3, [pc, #384]	; (13178 <_dtoa_r+0x2d8>)
   12ff8:	add.w	r3, r3, r6, lsl #3
   12ffc:	ldrd	r0, r1, [r3]
   13000:	mov	r2, sl
   13002:	mov	r3, fp
   13004:	bl	101bc <__aeabi_dcmpgt>
   13008:	cmp	r0, #0
   1300a:	beq.w	13492 <_dtoa_r+0x5f2>
   1300e:	subs	r3, r6, #1
   13010:	str	r3, [sp, #16]
   13012:	movs	r3, #0
   13014:	str	r3, [sp, #52]	; 0x34
   13016:	subs	r5, r5, r4
   13018:	subs.w	r8, r5, #1
   1301c:	bmi.w	13474 <_dtoa_r+0x5d4>
   13020:	movs	r3, #0
   13022:	str	r3, [sp, #28]
   13024:	ldr	r3, [sp, #16]
   13026:	cmp	r3, #0
   13028:	blt.w	13462 <_dtoa_r+0x5c2>
   1302c:	add	r8, r3
   1302e:	str	r3, [sp, #48]	; 0x30
   13030:	movs	r3, #0
   13032:	str	r3, [sp, #24]
   13034:	ldr	r3, [sp, #0]
   13036:	cmp	r3, #9
   13038:	bhi.n	13090 <_dtoa_r+0x1f0>
   1303a:	cmp	r3, #5
   1303c:	ble.w	13cc8 <_dtoa_r+0xe28>
   13040:	subs	r3, #4
   13042:	str	r3, [sp, #0]
   13044:	movs	r6, #0
   13046:	ldr	r3, [sp, #0]
   13048:	subs	r3, #2
   1304a:	cmp	r3, #3
   1304c:	bhi.w	13c96 <_dtoa_r+0xdf6>
   13050:	tbh	[pc, r3, lsl #1]
   13054:	.word	0x0224032b
   13058:	.word	0x04500336
   1305c:	ldr	r3, [pc, #272]	; (13170 <_dtoa_r+0x2d0>)
   1305e:	ldr	r2, [pc, #284]	; (1317c <_dtoa_r+0x2dc>)
   13060:	ubfx	r0, r4, #0, #20
   13064:	cmp	r0, #0
   13066:	ite	ne
   13068:	movne	r0, r3
   1306a:	moveq	r0, r2
   1306c:	b.n	12f2a <_dtoa_r+0x8a>
   1306e:	ubfx	r3, fp, #0, #20
   13072:	orr.w	r1, r3, #1069547520	; 0x3fc00000
   13076:	subw	r4, r5, #1023	; 0x3ff
   1307a:	mov	r0, sl
   1307c:	str.w	r8, [sp, #60]	; 0x3c
   13080:	orr.w	r1, r1, #3145728	; 0x300000
   13084:	ldr	r5, [sp, #96]	; 0x60
   13086:	b.n	12f96 <_dtoa_r+0xf6>
   13088:	ldr	r0, [pc, #244]	; (13180 <_dtoa_r+0x2e0>)
   1308a:	b.n	12f12 <_dtoa_r+0x72>
   1308c:	adds	r3, r0, #3
   1308e:	b.n	12f3c <_dtoa_r+0x9c>
   13090:	movs	r1, #0
   13092:	str.w	r1, [r9, #68]	; 0x44
   13096:	mov	r0, r9
   13098:	mov	r4, r1
   1309a:	str	r1, [sp, #0]
   1309c:	bl	1405c <_Balloc>
   130a0:	mov.w	r3, #4294967295
   130a4:	str	r3, [sp, #32]
   130a6:	str	r3, [sp, #56]	; 0x38
   130a8:	movs	r3, #1
   130aa:	str	r0, [sp, #36]	; 0x24
   130ac:	str.w	r0, [r9, #64]	; 0x40
   130b0:	str	r4, [sp, #20]
   130b2:	str	r3, [sp, #44]	; 0x2c
   130b4:	ldr	r3, [sp, #100]	; 0x64
   130b6:	cmp	r3, #0
   130b8:	blt.w	1325c <_dtoa_r+0x3bc>
   130bc:	ldr	r2, [sp, #16]
   130be:	cmp	r2, #14
   130c0:	bgt.w	1325c <_dtoa_r+0x3bc>
   130c4:	ldr	r3, [pc, #176]	; (13178 <_dtoa_r+0x2d8>)
   130c6:	add.w	r3, r3, r2, lsl #3
   130ca:	vldr	d7, [r3]
   130ce:	ldr	r3, [sp, #20]
   130d0:	cmp	r3, #0
   130d2:	vstr	d7, [sp]
   130d6:	blt.w	136d6 <_dtoa_r+0x836>
   130da:	mov	r6, sl
   130dc:	mov	r7, fp
   130de:	ldrd	sl, fp, [sp]
   130e2:	mov	r0, r6
   130e4:	mov	r2, sl
   130e6:	mov	r3, fp
   130e8:	mov	r1, r7
   130ea:	bl	fef0 <__aeabi_ddiv>
   130ee:	bl	101fc <__aeabi_d2iz>
   130f2:	mov	r4, r0
   130f4:	bl	fbd0 <__aeabi_i2d>
   130f8:	mov	r2, sl
   130fa:	mov	r3, fp
   130fc:	bl	fc9c <__aeabi_dmul>
   13100:	mov	r3, r1
   13102:	mov	r2, r0
   13104:	mov	r1, r7
   13106:	mov	r0, r6
   13108:	bl	f934 <__aeabi_dsub>
   1310c:	ldr	r5, [sp, #36]	; 0x24
   1310e:	add.w	r3, r4, #48	; 0x30
   13112:	strb	r3, [r5, #0]
   13114:	ldr	r3, [sp, #32]
   13116:	cmp	r3, #1
   13118:	mov	r6, r0
   1311a:	mov	r7, r1
   1311c:	add.w	r5, r5, #1
   13120:	beq.n	131e6 <_dtoa_r+0x346>
   13122:	movs	r2, #0
   13124:	ldr	r3, [pc, #92]	; (13184 <_dtoa_r+0x2e4>)
   13126:	bl	fc9c <__aeabi_dmul>
   1312a:	movs	r2, #0
   1312c:	movs	r3, #0
   1312e:	mov	r6, r0
   13130:	mov	r7, r1
   13132:	bl	1016c <__aeabi_dcmpeq>
   13136:	cmp	r0, #0
   13138:	bne.n	13236 <_dtoa_r+0x396>
   1313a:	str.w	r9, [sp, #20]
   1313e:	ldr.w	sl, [sp, #32]
   13142:	ldr.w	fp, [sp, #36]	; 0x24
   13146:	ldrd	r8, r9, [sp]
   1314a:	b.n	1319e <_dtoa_r+0x2fe>
   1314c:	nop.w
   13150:	.word	0x636f4361
   13154:	.word	0x3fd287a7
   13158:	.word	0x8b60c8b3
   1315c:	.word	0x3fc68a28
   13160:	.word	0x509f79fb
   13164:	.word	0x3fd34413
   13168:	.word	0x7ff00000
   1316c:	.word	0x20000501
   13170:	.word	0x20000aa0
   13174:	.word	0x3ff80000
   13178:	.word	0x20000aa8
   1317c:	.word	0x20000a94
   13180:	.word	0x20000500
   13184:	.word	0x40240000
   13188:	bl	fc9c <__aeabi_dmul>
   1318c:	movs	r2, #0
   1318e:	movs	r3, #0
   13190:	mov	r6, r0
   13192:	mov	r7, r1
   13194:	bl	1016c <__aeabi_dcmpeq>
   13198:	cmp	r0, #0
   1319a:	bne.w	138fa <_dtoa_r+0xa5a>
   1319e:	mov	r2, r8
   131a0:	mov	r3, r9
   131a2:	mov	r0, r6
   131a4:	mov	r1, r7
   131a6:	bl	fef0 <__aeabi_ddiv>
   131aa:	bl	101fc <__aeabi_d2iz>
   131ae:	mov	r4, r0
   131b0:	bl	fbd0 <__aeabi_i2d>
   131b4:	mov	r2, r8
   131b6:	mov	r3, r9
   131b8:	bl	fc9c <__aeabi_dmul>
   131bc:	mov	r2, r0
   131be:	mov	r3, r1
   131c0:	mov	r0, r6
   131c2:	mov	r1, r7
   131c4:	bl	f934 <__aeabi_dsub>
   131c8:	add.w	lr, r4, #48	; 0x30
   131cc:	strb.w	lr, [r5], #1
   131d0:	rsb	lr, fp, r5
   131d4:	cmp	lr, sl
   131d6:	mov	r6, r0
   131d8:	mov	r7, r1
   131da:	mov.w	r2, #0
   131de:	ldr	r3, [pc, #696]	; (13498 <_dtoa_r+0x5f8>)
   131e0:	bne.n	13188 <_dtoa_r+0x2e8>
   131e2:	ldr.w	r9, [sp, #20]
   131e6:	mov	r2, r6
   131e8:	mov	r3, r7
   131ea:	mov	r0, r6
   131ec:	mov	r1, r7
   131ee:	bl	f938 <__adddf3>
   131f2:	mov	r6, r0
   131f4:	mov	r7, r1
   131f6:	mov	r2, r0
   131f8:	mov	r3, r1
   131fa:	ldrd	r0, r1, [sp]
   131fe:	bl	10180 <__aeabi_dcmplt>
   13202:	cbnz	r0, 13216 <_dtoa_r+0x376>
   13204:	mov	r2, r6
   13206:	mov	r3, r7
   13208:	ldrd	r0, r1, [sp]
   1320c:	bl	1016c <__aeabi_dcmpeq>
   13210:	cbz	r0, 13236 <_dtoa_r+0x396>
   13212:	lsls	r3, r4, #31
   13214:	bpl.n	13236 <_dtoa_r+0x396>
   13216:	ldrb.w	r4, [r5, #-1]
   1321a:	ldr	r2, [sp, #36]	; 0x24
   1321c:	subs	r3, r5, #1
   1321e:	b.n	1322a <_dtoa_r+0x38a>
   13220:	cmp	r2, r3
   13222:	beq.w	13a1e <_dtoa_r+0xb7e>
   13226:	ldrb.w	r4, [r3, #-1]!
   1322a:	cmp	r4, #57	; 0x39
   1322c:	add.w	r5, r3, #1
   13230:	beq.n	13220 <_dtoa_r+0x380>
   13232:	adds	r4, #1
   13234:	strb	r4, [r3, #0]
   13236:	ldr	r1, [sp, #40]	; 0x28
   13238:	mov	r0, r9
   1323a:	bl	140a8 <_Bfree>
   1323e:	movs	r2, #0
   13240:	ldr	r3, [sp, #16]
   13242:	strb	r2, [r5, #0]
   13244:	ldr	r2, [sp, #12]
   13246:	adds	r3, #1
   13248:	str	r3, [r2, #0]
   1324a:	ldr	r3, [sp, #148]	; 0x94
   1324c:	cmp	r3, #0
   1324e:	beq.w	13988 <_dtoa_r+0xae8>
   13252:	ldr	r0, [sp, #36]	; 0x24
   13254:	str	r5, [r3, #0]
   13256:	add	sp, #108	; 0x6c
   13258:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1325c:	ldr	r2, [sp, #44]	; 0x2c
   1325e:	cmp	r2, #0
   13260:	beq.w	13480 <_dtoa_r+0x5e0>
   13264:	ldr	r2, [sp, #0]
   13266:	cmp	r2, #1
   13268:	ble.w	1371a <_dtoa_r+0x87a>
   1326c:	ldr	r3, [sp, #32]
   1326e:	ldr	r2, [sp, #24]
   13270:	subs	r7, r3, #1
   13272:	cmp	r2, r7
   13274:	blt.w	1398e <_dtoa_r+0xaee>
   13278:	subs	r7, r2, r7
   1327a:	ldr	r3, [sp, #32]
   1327c:	cmp	r3, #0
   1327e:	blt.w	13b82 <_dtoa_r+0xce2>
   13282:	ldr	r5, [sp, #28]
   13284:	ldr	r3, [sp, #32]
   13286:	ldr	r2, [sp, #28]
   13288:	movs	r1, #1
   1328a:	add	r2, r3
   1328c:	mov	r0, r9
   1328e:	str	r2, [sp, #28]
   13290:	add	r8, r3
   13292:	bl	141d8 <__i2b>
   13296:	mov	r6, r0
   13298:	cbz	r5, 132b4 <_dtoa_r+0x414>
   1329a:	cmp.w	r8, #0
   1329e:	ble.n	132b4 <_dtoa_r+0x414>
   132a0:	cmp	r5, r8
   132a2:	ldr	r2, [sp, #28]
   132a4:	mov	r3, r5
   132a6:	it	ge
   132a8:	movge	r3, r8
   132aa:	subs	r2, r2, r3
   132ac:	str	r2, [sp, #28]
   132ae:	subs	r5, r5, r3
   132b0:	rsb	r8, r3, r8
   132b4:	ldr	r3, [sp, #24]
   132b6:	cmp	r3, #0
   132b8:	ble.w	138a6 <_dtoa_r+0xa06>
   132bc:	ldr	r2, [sp, #44]	; 0x2c
   132be:	cmp	r2, #0
   132c0:	beq.w	136c8 <_dtoa_r+0x828>
   132c4:	cmp	r7, #0
   132c6:	beq.w	136c8 <_dtoa_r+0x828>
   132ca:	mov	r1, r6
   132cc:	mov	r2, r7
   132ce:	mov	r0, r9
   132d0:	bl	1431c <__pow5mult>
   132d4:	ldr	r2, [sp, #40]	; 0x28
   132d6:	mov	r1, r0
   132d8:	mov	r6, r0
   132da:	mov	r0, r9
   132dc:	bl	141ec <__multiply>
   132e0:	ldr	r1, [sp, #40]	; 0x28
   132e2:	mov	r4, r0
   132e4:	mov	r0, r9
   132e6:	bl	140a8 <_Bfree>
   132ea:	ldr	r3, [sp, #24]
   132ec:	subs	r3, r3, r7
   132ee:	str	r3, [sp, #24]
   132f0:	bne.w	136c6 <_dtoa_r+0x826>
   132f4:	movs	r1, #1
   132f6:	mov	r0, r9
   132f8:	bl	141d8 <__i2b>
   132fc:	ldr	r3, [sp, #48]	; 0x30
   132fe:	str	r0, [sp, #24]
   13300:	cmp	r3, #0
   13302:	beq.w	13730 <_dtoa_r+0x890>
   13306:	mov	r1, r0
   13308:	mov	r2, r3
   1330a:	mov	r0, r9
   1330c:	bl	1431c <__pow5mult>
   13310:	ldr	r3, [sp, #0]
   13312:	str	r0, [sp, #24]
   13314:	cmp	r3, #1
   13316:	ble.w	13900 <_dtoa_r+0xa60>
   1331a:	movs	r7, #0
   1331c:	ldr	r2, [sp, #24]
   1331e:	ldr	r3, [r2, #16]
   13320:	add.w	r3, r2, r3, lsl #2
   13324:	ldr	r0, [r3, #16]
   13326:	bl	1413c <__hi0bits>
   1332a:	rsb	r0, r0, #32
   1332e:	add	r0, r8
   13330:	ands.w	r0, r0, #31
   13334:	beq.w	1372c <_dtoa_r+0x88c>
   13338:	rsb	r3, r0, #32
   1333c:	cmp	r3, #4
   1333e:	ble.w	13cbc <_dtoa_r+0xe1c>
   13342:	rsb	r0, r0, #28
   13346:	ldr	r3, [sp, #28]
   13348:	add	r3, r0
   1334a:	str	r3, [sp, #28]
   1334c:	add	r5, r0
   1334e:	add	r8, r0
   13350:	ldr	r3, [sp, #28]
   13352:	cmp	r3, #0
   13354:	ble.n	13362 <_dtoa_r+0x4c2>
   13356:	mov	r1, r4
   13358:	mov	r2, r3
   1335a:	mov	r0, r9
   1335c:	bl	143bc <__lshift>
   13360:	mov	r4, r0
   13362:	cmp.w	r8, #0
   13366:	ble.n	13374 <_dtoa_r+0x4d4>
   13368:	mov	r2, r8
   1336a:	ldr	r1, [sp, #24]
   1336c:	mov	r0, r9
   1336e:	bl	143bc <__lshift>
   13372:	str	r0, [sp, #24]
   13374:	ldr	r3, [sp, #52]	; 0x34
   13376:	cmp	r3, #0
   13378:	bne.w	13870 <_dtoa_r+0x9d0>
   1337c:	ldr	r3, [sp, #32]
   1337e:	cmp	r3, #0
   13380:	ble.w	138aa <_dtoa_r+0xa0a>
   13384:	ldr	r3, [sp, #44]	; 0x2c
   13386:	cmp	r3, #0
   13388:	bne.w	13774 <_dtoa_r+0x8d4>
   1338c:	ldr.w	fp, [sp, #36]	; 0x24
   13390:	ldr	r7, [sp, #32]
   13392:	ldr.w	r8, [sp, #24]
   13396:	mov	r5, fp
   13398:	b.n	133a0 <_dtoa_r+0x500>
   1339a:	bl	140bc <__multadd>
   1339e:	mov	r4, r0
   133a0:	mov	r1, r8
   133a2:	mov	r0, r4
   133a4:	bl	12d74 <quorem>
   133a8:	add.w	sl, r0, #48	; 0x30
   133ac:	strb.w	sl, [r5], #1
   133b0:	rsb	r3, fp, r5
   133b4:	cmp	r3, r7
   133b6:	mov.w	r2, #10
   133ba:	mov.w	r3, #0
   133be:	mov	r1, r4
   133c0:	mov	r0, r9
   133c2:	blt.n	1339a <_dtoa_r+0x4fa>
   133c4:	ldr	r3, [sp, #36]	; 0x24
   133c6:	ldr	r2, [sp, #32]
   133c8:	cmp	r2, #1
   133ca:	ite	ge
   133cc:	addge	r3, r3, r2
   133ce:	addlt	r3, #1
   133d0:	mov	r5, r3
   133d2:	mov.w	fp, #0
   133d6:	mov	r1, r4
   133d8:	movs	r2, #1
   133da:	mov	r0, r9
   133dc:	bl	143bc <__lshift>
   133e0:	ldr	r1, [sp, #24]
   133e2:	str	r0, [sp, #40]	; 0x28
   133e4:	bl	1446c <__mcmp>
   133e8:	cmp	r0, #0
   133ea:	ble.w	139f8 <_dtoa_r+0xb58>
   133ee:	ldrb.w	r2, [r5, #-1]
   133f2:	ldr	r1, [sp, #36]	; 0x24
   133f4:	subs	r3, r5, #1
   133f6:	b.n	13402 <_dtoa_r+0x562>
   133f8:	cmp	r3, r1
   133fa:	beq.w	138e6 <_dtoa_r+0xa46>
   133fe:	ldrb.w	r2, [r3, #-1]!
   13402:	cmp	r2, #57	; 0x39
   13404:	add.w	r5, r3, #1
   13408:	beq.n	133f8 <_dtoa_r+0x558>
   1340a:	adds	r2, #1
   1340c:	strb	r2, [r3, #0]
   1340e:	ldr	r1, [sp, #24]
   13410:	mov	r0, r9
   13412:	bl	140a8 <_Bfree>
   13416:	cmp	r6, #0
   13418:	beq.w	13236 <_dtoa_r+0x396>
   1341c:	cmp.w	fp, #0
   13420:	beq.n	1342e <_dtoa_r+0x58e>
   13422:	cmp	fp, r6
   13424:	beq.n	1342e <_dtoa_r+0x58e>
   13426:	mov	r1, fp
   13428:	mov	r0, r9
   1342a:	bl	140a8 <_Bfree>
   1342e:	mov	r1, r6
   13430:	mov	r0, r9
   13432:	bl	140a8 <_Bfree>
   13436:	b.n	13236 <_dtoa_r+0x396>
   13438:	movs	r3, #1
   1343a:	str	r3, [sp, #52]	; 0x34
   1343c:	b.n	13016 <_dtoa_r+0x176>
   1343e:	ldr.w	r8, [sp, #16]
   13442:	mov	r0, r8
   13444:	bl	fbd0 <__aeabi_i2d>
   13448:	mov	r2, r0
   1344a:	mov	r3, r1
   1344c:	mov	r0, r6
   1344e:	mov	r1, r7
   13450:	bl	1016c <__aeabi_dcmpeq>
   13454:	cmp	r0, #0
   13456:	bne.w	12fee <_dtoa_r+0x14e>
   1345a:	add.w	r3, r8, #4294967295
   1345e:	str	r3, [sp, #16]
   13460:	b.n	12fee <_dtoa_r+0x14e>
   13462:	ldr	r2, [sp, #28]
   13464:	ldr	r3, [sp, #16]
   13466:	subs	r2, r2, r3
   13468:	negs	r3, r3
   1346a:	str	r3, [sp, #24]
   1346c:	movs	r3, #0
   1346e:	str	r2, [sp, #28]
   13470:	str	r3, [sp, #48]	; 0x30
   13472:	b.n	13034 <_dtoa_r+0x194>
   13474:	rsb	r3, r8, #0
   13478:	str	r3, [sp, #28]
   1347a:	mov.w	r8, #0
   1347e:	b.n	13024 <_dtoa_r+0x184>
   13480:	ldr	r7, [sp, #24]
   13482:	ldr	r5, [sp, #28]
   13484:	ldr	r6, [sp, #44]	; 0x2c
   13486:	b.n	13298 <_dtoa_r+0x3f8>
   13488:	rsb	r4, r3, #32
   1348c:	lsl.w	r0, sl, r4
   13490:	b.n	12f88 <_dtoa_r+0xe8>
   13492:	str	r0, [sp, #52]	; 0x34
   13494:	b.n	13016 <_dtoa_r+0x176>
   13496:	nop
   13498:	.word	0x40240000
   1349c:	movs	r3, #0
   1349e:	str	r3, [sp, #44]	; 0x2c
   134a0:	ldr	r3, [sp, #16]
   134a2:	ldr	r2, [sp, #20]
   134a4:	add	r3, r2
   134a6:	str	r3, [sp, #56]	; 0x38
   134a8:	adds	r3, #1
   134aa:	cmp	r3, #0
   134ac:	str	r3, [sp, #32]
   134ae:	ble.w	139ac <_dtoa_r+0xb0c>
   134b2:	ldr	r4, [sp, #32]
   134b4:	mov	r5, r4
   134b6:	movs	r1, #0
   134b8:	cmp	r5, #23
   134ba:	str.w	r1, [r9, #68]	; 0x44
   134be:	bls.n	134d8 <_dtoa_r+0x638>
   134c0:	movs	r2, #1
   134c2:	movs	r3, #4
   134c4:	lsls	r3, r3, #1
   134c6:	add.w	r0, r3, #20
   134ca:	cmp	r0, r5
   134cc:	mov	r1, r2
   134ce:	add.w	r2, r2, #1
   134d2:	bls.n	134c4 <_dtoa_r+0x624>
   134d4:	str.w	r1, [r9, #68]	; 0x44
   134d8:	mov	r0, r9
   134da:	bl	1405c <_Balloc>
   134de:	cmp	r4, #14
   134e0:	str	r0, [sp, #36]	; 0x24
   134e2:	str.w	r0, [r9, #64]	; 0x40
   134e6:	bhi.w	130b4 <_dtoa_r+0x214>
   134ea:	cmp	r6, #0
   134ec:	beq.w	130b4 <_dtoa_r+0x214>
   134f0:	ldr	r1, [sp, #16]
   134f2:	cmp	r1, #0
   134f4:	strd	sl, fp, [sp, #64]	; 0x40
   134f8:	ble.w	13a30 <_dtoa_r+0xb90>
   134fc:	ldr	r3, [pc, #576]	; (13740 <_dtoa_r+0x8a0>)
   134fe:	and.w	r2, r1, #15
   13502:	asrs	r6, r1, #4
   13504:	add.w	r3, r3, r2, lsl #3
   13508:	lsls	r0, r6, #27
   1350a:	ldrd	r4, r5, [r3]
   1350e:	bpl.w	1399e <_dtoa_r+0xafe>
   13512:	ldr	r3, [pc, #560]	; (13744 <_dtoa_r+0x8a4>)
   13514:	mov	r0, sl
   13516:	mov	r1, fp
   13518:	ldrd	r2, r3, [r3, #32]
   1351c:	bl	fef0 <__aeabi_ddiv>
   13520:	strd	r0, r1, [sp, #72]	; 0x48
   13524:	and.w	r6, r6, #15
   13528:	mov.w	sl, #3
   1352c:	cbz	r6, 13550 <_dtoa_r+0x6b0>
   1352e:	ldr	r7, [pc, #532]	; (13744 <_dtoa_r+0x8a4>)
   13530:	lsls	r1, r6, #31
   13532:	bpl.n	13548 <_dtoa_r+0x6a8>
   13534:	mov	r0, r4
   13536:	mov	r1, r5
   13538:	ldrd	r2, r3, [r7]
   1353c:	bl	fc9c <__aeabi_dmul>
   13540:	add.w	sl, sl, #1
   13544:	mov	r4, r0
   13546:	mov	r5, r1
   13548:	asrs	r6, r6, #1
   1354a:	add.w	r7, r7, #8
   1354e:	bne.n	13530 <_dtoa_r+0x690>
   13550:	mov	r2, r4
   13552:	mov	r3, r5
   13554:	ldrd	r0, r1, [sp, #72]	; 0x48
   13558:	bl	fef0 <__aeabi_ddiv>
   1355c:	mov	r6, r0
   1355e:	mov	r7, r1
   13560:	ldr	r3, [sp, #52]	; 0x34
   13562:	cbz	r3, 13576 <_dtoa_r+0x6d6>
   13564:	movs	r2, #0
   13566:	ldr	r3, [pc, #480]	; (13748 <_dtoa_r+0x8a8>)
   13568:	mov	r0, r6
   1356a:	mov	r1, r7
   1356c:	bl	10180 <__aeabi_dcmplt>
   13570:	cmp	r0, #0
   13572:	bne.w	13baa <_dtoa_r+0xd0a>
   13576:	mov	r0, sl
   13578:	bl	fbd0 <__aeabi_i2d>
   1357c:	mov	r2, r6
   1357e:	mov	r3, r7
   13580:	bl	fc9c <__aeabi_dmul>
   13584:	ldr	r3, [pc, #452]	; (1374c <_dtoa_r+0x8ac>)
   13586:	movs	r2, #0
   13588:	bl	f938 <__adddf3>
   1358c:	ldr	r3, [sp, #32]
   1358e:	mov	r4, r0
   13590:	sub.w	r5, r1, #54525952	; 0x3400000
   13594:	cmp	r3, #0
   13596:	beq.w	13950 <_dtoa_r+0xab0>
   1359a:	ldr	r3, [sp, #16]
   1359c:	str	r3, [sp, #88]	; 0x58
   1359e:	ldr	r3, [sp, #32]
   135a0:	str	r3, [sp, #72]	; 0x48
   135a2:	ldr	r3, [sp, #44]	; 0x2c
   135a4:	cmp	r3, #0
   135a6:	beq.w	13ad2 <_dtoa_r+0xc32>
   135aa:	ldr	r2, [sp, #72]	; 0x48
   135ac:	ldr	r3, [pc, #400]	; (13740 <_dtoa_r+0x8a0>)
   135ae:	ldr	r1, [pc, #416]	; (13750 <_dtoa_r+0x8b0>)
   135b0:	add.w	r3, r3, r2, lsl #3
   135b4:	ldrd	r2, r3, [r3, #-8]
   135b8:	movs	r0, #0
   135ba:	bl	fef0 <__aeabi_ddiv>
   135be:	mov	r2, r4
   135c0:	mov	r3, r5
   135c2:	bl	f934 <__aeabi_dsub>
   135c6:	mov	sl, r0
   135c8:	mov	fp, r1
   135ca:	mov	r0, r6
   135cc:	mov	r1, r7
   135ce:	bl	101fc <__aeabi_d2iz>
   135d2:	mov	r4, r0
   135d4:	bl	fbd0 <__aeabi_i2d>
   135d8:	mov	r2, r0
   135da:	mov	r3, r1
   135dc:	mov	r0, r6
   135de:	mov	r1, r7
   135e0:	bl	f934 <__aeabi_dsub>
   135e4:	adds	r4, #48	; 0x30
   135e6:	ldr	r5, [sp, #36]	; 0x24
   135e8:	uxtb	r4, r4
   135ea:	mov	r6, r0
   135ec:	mov	r7, r1
   135ee:	strb	r4, [r5, #0]
   135f0:	mov	r2, r0
   135f2:	mov	r3, r1
   135f4:	mov	r0, sl
   135f6:	mov	r1, fp
   135f8:	adds	r5, #1
   135fa:	bl	101bc <__aeabi_dcmpgt>
   135fe:	cmp	r0, #0
   13600:	bne.n	136a4 <_dtoa_r+0x804>
   13602:	mov	r2, r6
   13604:	mov	r3, r7
   13606:	movs	r0, #0
   13608:	ldr	r1, [pc, #316]	; (13748 <_dtoa_r+0x8a8>)
   1360a:	bl	f934 <__aeabi_dsub>
   1360e:	mov	r2, r0
   13610:	mov	r3, r1
   13612:	mov	r0, sl
   13614:	mov	r1, fp
   13616:	bl	101bc <__aeabi_dcmpgt>
   1361a:	cmp	r0, #0
   1361c:	bne.w	13c30 <_dtoa_r+0xd90>
   13620:	ldr	r2, [sp, #72]	; 0x48
   13622:	cmp	r2, #1
   13624:	ble.w	13a16 <_dtoa_r+0xb76>
   13628:	ldr	r3, [sp, #72]	; 0x48
   1362a:	ldr	r2, [sp, #36]	; 0x24
   1362c:	str.w	r8, [sp, #72]	; 0x48
   13630:	add	r3, r2
   13632:	mov	r8, r3
   13634:	b.n	13652 <_dtoa_r+0x7b2>
   13636:	movs	r0, #0
   13638:	ldr	r1, [pc, #268]	; (13748 <_dtoa_r+0x8a8>)
   1363a:	bl	f934 <__aeabi_dsub>
   1363e:	mov	r2, sl
   13640:	mov	r3, fp
   13642:	bl	10180 <__aeabi_dcmplt>
   13646:	cmp	r0, #0
   13648:	bne.w	13c30 <_dtoa_r+0xd90>
   1364c:	cmp	r5, r8
   1364e:	beq.w	13a12 <_dtoa_r+0xb72>
   13652:	mov	r0, sl
   13654:	mov	r1, fp
   13656:	movs	r2, #0
   13658:	ldr	r3, [pc, #248]	; (13754 <_dtoa_r+0x8b4>)
   1365a:	bl	fc9c <__aeabi_dmul>
   1365e:	movs	r2, #0
   13660:	ldr	r3, [pc, #240]	; (13754 <_dtoa_r+0x8b4>)
   13662:	mov	sl, r0
   13664:	mov	fp, r1
   13666:	mov	r0, r6
   13668:	mov	r1, r7
   1366a:	bl	fc9c <__aeabi_dmul>
   1366e:	mov	r7, r1
   13670:	mov	r6, r0
   13672:	bl	101fc <__aeabi_d2iz>
   13676:	mov	r4, r0
   13678:	bl	fbd0 <__aeabi_i2d>
   1367c:	mov	r2, r0
   1367e:	mov	r3, r1
   13680:	mov	r0, r6
   13682:	mov	r1, r7
   13684:	bl	f934 <__aeabi_dsub>
   13688:	adds	r4, #48	; 0x30
   1368a:	uxtb	r4, r4
   1368c:	mov	r2, sl
   1368e:	mov	r3, fp
   13690:	strb.w	r4, [r5], #1
   13694:	mov	r6, r0
   13696:	mov	r7, r1
   13698:	bl	10180 <__aeabi_dcmplt>
   1369c:	mov	r2, r6
   1369e:	mov	r3, r7
   136a0:	cmp	r0, #0
   136a2:	beq.n	13636 <_dtoa_r+0x796>
   136a4:	ldr	r3, [sp, #88]	; 0x58
   136a6:	str	r3, [sp, #16]
   136a8:	b.n	13236 <_dtoa_r+0x396>
   136aa:	movs	r3, #0
   136ac:	str	r3, [sp, #44]	; 0x2c
   136ae:	ldr	r3, [sp, #20]
   136b0:	cmp	r3, #0
   136b2:	ble.w	139b6 <_dtoa_r+0xb16>
   136b6:	mov	r5, r3
   136b8:	mov	r4, r3
   136ba:	str	r3, [sp, #56]	; 0x38
   136bc:	str	r3, [sp, #32]
   136be:	b.n	134b6 <_dtoa_r+0x616>
   136c0:	movs	r3, #1
   136c2:	str	r3, [sp, #44]	; 0x2c
   136c4:	b.n	136ae <_dtoa_r+0x80e>
   136c6:	str	r4, [sp, #40]	; 0x28
   136c8:	ldr	r2, [sp, #24]
   136ca:	ldr	r1, [sp, #40]	; 0x28
   136cc:	mov	r0, r9
   136ce:	bl	1431c <__pow5mult>
   136d2:	mov	r4, r0
   136d4:	b.n	132f4 <_dtoa_r+0x454>
   136d6:	ldr	r3, [sp, #32]
   136d8:	cmp	r3, #0
   136da:	bgt.w	130da <_dtoa_r+0x23a>
   136de:	bne.w	13980 <_dtoa_r+0xae0>
   136e2:	movs	r2, #0
   136e4:	ldr	r3, [pc, #112]	; (13758 <_dtoa_r+0x8b8>)
   136e6:	ldrd	r0, r1, [sp]
   136ea:	bl	fc9c <__aeabi_dmul>
   136ee:	mov	r3, fp
   136f0:	mov	r2, sl
   136f2:	bl	101a8 <__aeabi_dcmpge>
   136f6:	ldr	r3, [sp, #32]
   136f8:	str	r3, [sp, #24]
   136fa:	mov	r6, r3
   136fc:	cmp	r0, #0
   136fe:	beq.w	138d6 <_dtoa_r+0xa36>
   13702:	ldr	r3, [sp, #20]
   13704:	ldr	r5, [sp, #36]	; 0x24
   13706:	mvns	r3, r3
   13708:	str	r3, [sp, #16]
   1370a:	ldr	r1, [sp, #24]
   1370c:	mov	r0, r9
   1370e:	bl	140a8 <_Bfree>
   13712:	cmp	r6, #0
   13714:	beq.w	13236 <_dtoa_r+0x396>
   13718:	b.n	1342e <_dtoa_r+0x58e>
   1371a:	ldr	r2, [sp, #60]	; 0x3c
   1371c:	cmp	r2, #0
   1371e:	beq.w	13b92 <_dtoa_r+0xcf2>
   13722:	addw	r3, r3, #1075	; 0x433
   13726:	ldr	r7, [sp, #24]
   13728:	ldr	r5, [sp, #28]
   1372a:	b.n	13286 <_dtoa_r+0x3e6>
   1372c:	movs	r0, #28
   1372e:	b.n	13346 <_dtoa_r+0x4a6>
   13730:	ldr	r3, [sp, #0]
   13732:	cmp	r3, #1
   13734:	ble.w	13c38 <_dtoa_r+0xd98>
   13738:	ldr	r7, [sp, #48]	; 0x30
   1373a:	movs	r0, #1
   1373c:	b.n	1332e <_dtoa_r+0x48e>
   1373e:	nop
   13740:	.word	0x20000aa8
   13744:	.word	0x20000b70
   13748:	.word	0x3ff00000
   1374c:	.word	0x401c0000
   13750:	.word	0x3fe00000
   13754:	.word	0x40240000
   13758:	.word	0x40140000
   1375c:	mov	r1, r6
   1375e:	movs	r3, #0
   13760:	movs	r2, #10
   13762:	mov	r0, r9
   13764:	bl	140bc <__multadd>
   13768:	ldr	r3, [sp, #56]	; 0x38
   1376a:	cmp	r3, #0
   1376c:	mov	r6, r0
   1376e:	ble.w	13c8c <_dtoa_r+0xdec>
   13772:	str	r3, [sp, #32]
   13774:	cmp	r5, #0
   13776:	ble.n	13784 <_dtoa_r+0x8e4>
   13778:	mov	r1, r6
   1377a:	mov	r2, r5
   1377c:	mov	r0, r9
   1377e:	bl	143bc <__lshift>
   13782:	mov	r6, r0
   13784:	cmp	r7, #0
   13786:	bne.w	13a82 <_dtoa_r+0xbe2>
   1378a:	mov	r8, r6
   1378c:	ldr	r3, [sp, #32]
   1378e:	ldr	r2, [sp, #36]	; 0x24
   13790:	subs	r3, #1
   13792:	adds	r3, r2, r3
   13794:	str	r3, [sp, #32]
   13796:	and.w	r3, sl, #1
   1379a:	str	r3, [sp, #40]	; 0x28
   1379c:	mov	r7, r2
   1379e:	ldr.w	fp, [sp, #24]
   137a2:	mov	r0, r4
   137a4:	mov	r1, fp
   137a6:	bl	12d74 <quorem>
   137aa:	mov	r1, r6
   137ac:	mov	r5, r0
   137ae:	mov	r0, r4
   137b0:	bl	1446c <__mcmp>
   137b4:	mov	r2, r8
   137b6:	mov	r1, fp
   137b8:	mov	sl, r0
   137ba:	mov	r0, r9
   137bc:	bl	144b0 <__mdiff>
   137c0:	ldr	r2, [r0, #12]
   137c2:	mov	fp, r0
   137c4:	add.w	r3, r5, #48	; 0x30
   137c8:	cmp	r2, #0
   137ca:	bne.n	13860 <_dtoa_r+0x9c0>
   137cc:	mov	r1, r0
   137ce:	mov	r0, r4
   137d0:	str	r3, [sp, #28]
   137d2:	bl	1446c <__mcmp>
   137d6:	mov	r1, fp
   137d8:	str	r0, [sp, #20]
   137da:	mov	r0, r9
   137dc:	bl	140a8 <_Bfree>
   137e0:	ldr	r2, [sp, #20]
   137e2:	ldr	r3, [sp, #28]
   137e4:	cbnz	r2, 137f2 <_dtoa_r+0x952>
   137e6:	ldr	r1, [sp, #0]
   137e8:	cbnz	r1, 137f2 <_dtoa_r+0x952>
   137ea:	ldr	r1, [sp, #40]	; 0x28
   137ec:	cmp	r1, #0
   137ee:	beq.w	13c5c <_dtoa_r+0xdbc>
   137f2:	cmp.w	sl, #0
   137f6:	blt.w	139c0 <_dtoa_r+0xb20>
   137fa:	bne.n	13808 <_dtoa_r+0x968>
   137fc:	ldr	r1, [sp, #0]
   137fe:	cbnz	r1, 13808 <_dtoa_r+0x968>
   13800:	ldr	r1, [sp, #40]	; 0x28
   13802:	cmp	r1, #0
   13804:	beq.w	139c0 <_dtoa_r+0xb20>
   13808:	cmp	r2, #0
   1380a:	bgt.w	13aaa <_dtoa_r+0xc0a>
   1380e:	ldr	r2, [sp, #32]
   13810:	strb	r3, [r7, #0]
   13812:	add.w	sl, r7, #1
   13816:	cmp	r7, r2
   13818:	mov	r5, sl
   1381a:	beq.w	13ac2 <_dtoa_r+0xc22>
   1381e:	mov	r1, r4
   13820:	movs	r3, #0
   13822:	movs	r2, #10
   13824:	mov	r0, r9
   13826:	bl	140bc <__multadd>
   1382a:	cmp	r6, r8
   1382c:	mov	r4, r0
   1382e:	mov	r1, r6
   13830:	mov.w	r3, #0
   13834:	mov.w	r2, #10
   13838:	mov	r0, r9
   1383a:	beq.n	13854 <_dtoa_r+0x9b4>
   1383c:	bl	140bc <__multadd>
   13840:	mov	r1, r8
   13842:	mov	r6, r0
   13844:	movs	r3, #0
   13846:	movs	r2, #10
   13848:	mov	r0, r9
   1384a:	bl	140bc <__multadd>
   1384e:	mov	r7, sl
   13850:	mov	r8, r0
   13852:	b.n	1379e <_dtoa_r+0x8fe>
   13854:	bl	140bc <__multadd>
   13858:	mov	r7, sl
   1385a:	mov	r6, r0
   1385c:	mov	r8, r0
   1385e:	b.n	1379e <_dtoa_r+0x8fe>
   13860:	mov	r1, r0
   13862:	mov	r0, r9
   13864:	str	r3, [sp, #20]
   13866:	bl	140a8 <_Bfree>
   1386a:	movs	r2, #1
   1386c:	ldr	r3, [sp, #20]
   1386e:	b.n	137f2 <_dtoa_r+0x952>
   13870:	ldr	r1, [sp, #24]
   13872:	mov	r0, r4
   13874:	bl	1446c <__mcmp>
   13878:	cmp	r0, #0
   1387a:	bge.w	1337c <_dtoa_r+0x4dc>
   1387e:	mov	r1, r4
   13880:	ldr	r4, [sp, #16]
   13882:	movs	r3, #0
   13884:	subs	r4, #1
   13886:	movs	r2, #10
   13888:	mov	r0, r9
   1388a:	str	r4, [sp, #16]
   1388c:	bl	140bc <__multadd>
   13890:	ldr	r3, [sp, #44]	; 0x2c
   13892:	mov	r4, r0
   13894:	cmp	r3, #0
   13896:	bne.w	1375c <_dtoa_r+0x8bc>
   1389a:	ldr	r3, [sp, #56]	; 0x38
   1389c:	cmp	r3, #0
   1389e:	ble.w	13c7c <_dtoa_r+0xddc>
   138a2:	str	r3, [sp, #32]
   138a4:	b.n	1338c <_dtoa_r+0x4ec>
   138a6:	ldr	r4, [sp, #40]	; 0x28
   138a8:	b.n	132f4 <_dtoa_r+0x454>
   138aa:	ldr	r3, [sp, #0]
   138ac:	cmp	r3, #2
   138ae:	ble.w	13384 <_dtoa_r+0x4e4>
   138b2:	ldr	r3, [sp, #32]
   138b4:	cmp	r3, #0
   138b6:	bne.w	13bf4 <_dtoa_r+0xd54>
   138ba:	ldr	r1, [sp, #24]
   138bc:	movs	r2, #5
   138be:	mov	r0, r9
   138c0:	bl	140bc <__multadd>
   138c4:	mov	r1, r0
   138c6:	str	r0, [sp, #24]
   138c8:	mov	r0, r4
   138ca:	bl	1446c <__mcmp>
   138ce:	cmp	r0, #0
   138d0:	str	r4, [sp, #40]	; 0x28
   138d2:	ble.w	13702 <_dtoa_r+0x862>
   138d6:	ldr	r2, [sp, #16]
   138d8:	ldr	r1, [sp, #36]	; 0x24
   138da:	movs	r3, #49	; 0x31
   138dc:	adds	r2, #1
   138de:	str	r2, [sp, #16]
   138e0:	strb	r3, [r1, #0]
   138e2:	adds	r5, r1, #1
   138e4:	b.n	1370a <_dtoa_r+0x86a>
   138e6:	ldr	r2, [sp, #16]
   138e8:	adds	r2, #1
   138ea:	str	r2, [sp, #16]
   138ec:	ldr	r2, [sp, #36]	; 0x24
   138ee:	movs	r3, #49	; 0x31
   138f0:	strb	r3, [r2, #0]
   138f2:	b.n	1340e <_dtoa_r+0x56e>
   138f4:	movs	r3, #1
   138f6:	str	r3, [sp, #44]	; 0x2c
   138f8:	b.n	134a0 <_dtoa_r+0x600>
   138fa:	ldr.w	r9, [sp, #20]
   138fe:	b.n	13236 <_dtoa_r+0x396>
   13900:	cmp.w	sl, #0
   13904:	bne.w	1331a <_dtoa_r+0x47a>
   13908:	ubfx	r3, fp, #0, #20
   1390c:	cmp	r3, #0
   1390e:	bne.w	13b8e <_dtoa_r+0xcee>
   13912:	bic.w	r7, fp, #2147483648	; 0x80000000
   13916:	lsrs	r7, r7, #20
   13918:	lsls	r7, r7, #20
   1391a:	cbz	r7, 13928 <_dtoa_r+0xa88>
   1391c:	ldr	r3, [sp, #28]
   1391e:	adds	r3, #1
   13920:	str	r3, [sp, #28]
   13922:	add.w	r8, r8, #1
   13926:	movs	r7, #1
   13928:	ldr	r3, [sp, #48]	; 0x30
   1392a:	movs	r0, #1
   1392c:	cmp	r3, #0
   1392e:	beq.w	1332e <_dtoa_r+0x48e>
   13932:	b.n	1331c <_dtoa_r+0x47c>
   13934:	mov	r0, sl
   13936:	bl	fbd0 <__aeabi_i2d>
   1393a:	mov	r2, r6
   1393c:	mov	r3, r7
   1393e:	bl	fc9c <__aeabi_dmul>
   13942:	movs	r2, #0
   13944:	ldr	r3, [pc, #764]	; (13c44 <_dtoa_r+0xda4>)
   13946:	bl	f938 <__adddf3>
   1394a:	mov	r4, r0
   1394c:	sub.w	r5, r1, #54525952	; 0x3400000
   13950:	mov	r0, r6
   13952:	mov	r1, r7
   13954:	movs	r2, #0
   13956:	ldr	r3, [pc, #752]	; (13c48 <_dtoa_r+0xda8>)
   13958:	bl	f934 <__aeabi_dsub>
   1395c:	mov	r2, r4
   1395e:	mov	r3, r5
   13960:	mov	r6, r0
   13962:	mov	r7, r1
   13964:	bl	101bc <__aeabi_dcmpgt>
   13968:	cmp	r0, #0
   1396a:	bne.w	13aca <_dtoa_r+0xc2a>
   1396e:	mov	r2, r4
   13970:	add.w	r3, r5, #2147483648	; 0x80000000
   13974:	mov	r0, r6
   13976:	mov	r1, r7
   13978:	bl	10180 <__aeabi_dcmplt>
   1397c:	cmp	r0, #0
   1397e:	beq.n	13a16 <_dtoa_r+0xb76>
   13980:	movs	r3, #0
   13982:	str	r3, [sp, #24]
   13984:	mov	r6, r3
   13986:	b.n	13702 <_dtoa_r+0x862>
   13988:	ldr	r0, [sp, #36]	; 0x24
   1398a:	b.w	12f12 <_dtoa_r+0x72>
   1398e:	ldr	r3, [sp, #24]
   13990:	ldr	r2, [sp, #48]	; 0x30
   13992:	str	r7, [sp, #24]
   13994:	subs	r3, r7, r3
   13996:	add	r2, r3
   13998:	str	r2, [sp, #48]	; 0x30
   1399a:	movs	r7, #0
   1399c:	b.n	1327a <_dtoa_r+0x3da>
   1399e:	vldr	d7, [sp, #64]	; 0x40
   139a2:	mov.w	sl, #2
   139a6:	vstr	d7, [sp, #72]	; 0x48
   139aa:	b.n	1352c <_dtoa_r+0x68c>
   139ac:	mov	r4, r3
   139ae:	movs	r1, #0
   139b0:	str.w	r1, [r9, #68]	; 0x44
   139b4:	b.n	134d8 <_dtoa_r+0x638>
   139b6:	movs	r4, #1
   139b8:	str	r4, [sp, #56]	; 0x38
   139ba:	str	r4, [sp, #32]
   139bc:	str	r4, [sp, #20]
   139be:	b.n	139ae <_dtoa_r+0xb0e>
   139c0:	cmp	r2, #0
   139c2:	mov	sl, r3
   139c4:	ble.n	139ea <_dtoa_r+0xb4a>
   139c6:	mov	r1, r4
   139c8:	movs	r2, #1
   139ca:	mov	r0, r9
   139cc:	bl	143bc <__lshift>
   139d0:	ldr	r1, [sp, #24]
   139d2:	mov	r4, r0
   139d4:	bl	1446c <__mcmp>
   139d8:	cmp	r0, #0
   139da:	ble.w	13c6e <_dtoa_r+0xdce>
   139de:	cmp.w	sl, #57	; 0x39
   139e2:	beq.w	13bf8 <_dtoa_r+0xd58>
   139e6:	add.w	sl, r5, #49	; 0x31
   139ea:	mov	fp, r6
   139ec:	strb.w	sl, [r7]
   139f0:	adds	r5, r7, #1
   139f2:	mov	r6, r8
   139f4:	str	r4, [sp, #40]	; 0x28
   139f6:	b.n	1340e <_dtoa_r+0x56e>
   139f8:	bne.n	13a04 <_dtoa_r+0xb64>
   139fa:	tst.w	sl, #1
   139fe:	beq.n	13a04 <_dtoa_r+0xb64>
   13a00:	b.n	133ee <_dtoa_r+0x54e>
   13a02:	mov	r5, r2
   13a04:	ldrb.w	r3, [r5, #-1]
   13a08:	cmp	r3, #48	; 0x30
   13a0a:	add.w	r2, r5, #4294967295
   13a0e:	beq.n	13a02 <_dtoa_r+0xb62>
   13a10:	b.n	1340e <_dtoa_r+0x56e>
   13a12:	ldr.w	r8, [sp, #72]	; 0x48
   13a16:	ldrd	sl, fp, [sp, #64]	; 0x40
   13a1a:	b.w	130b4 <_dtoa_r+0x214>
   13a1e:	ldr	r1, [sp, #36]	; 0x24
   13a20:	movs	r2, #48	; 0x30
   13a22:	strb	r2, [r1, #0]
   13a24:	ldr	r2, [sp, #16]
   13a26:	ldrb.w	r4, [r5, #-1]
   13a2a:	adds	r2, #1
   13a2c:	str	r2, [sp, #16]
   13a2e:	b.n	13232 <_dtoa_r+0x392>
   13a30:	ldr	r3, [sp, #16]
   13a32:	negs	r4, r3
   13a34:	cmp	r4, #0
   13a36:	beq.w	13ba0 <_dtoa_r+0xd00>
   13a3a:	ldr	r3, [pc, #528]	; (13c4c <_dtoa_r+0xdac>)
   13a3c:	and.w	r2, r4, #15
   13a40:	add.w	r3, r3, r2, lsl #3
   13a44:	ldrd	r2, r3, [r3]
   13a48:	ldrd	r0, r1, [sp, #64]	; 0x40
   13a4c:	bl	fc9c <__aeabi_dmul>
   13a50:	asrs	r4, r4, #4
   13a52:	mov	r6, r0
   13a54:	mov	r7, r1
   13a56:	beq.w	13c86 <_dtoa_r+0xde6>
   13a5a:	ldr	r5, [pc, #500]	; (13c50 <_dtoa_r+0xdb0>)
   13a5c:	mov.w	sl, #2
   13a60:	lsls	r2, r4, #31
   13a62:	bpl.n	13a78 <_dtoa_r+0xbd8>
   13a64:	mov	r0, r6
   13a66:	mov	r1, r7
   13a68:	ldrd	r2, r3, [r5]
   13a6c:	bl	fc9c <__aeabi_dmul>
   13a70:	add.w	sl, sl, #1
   13a74:	mov	r6, r0
   13a76:	mov	r7, r1
   13a78:	asrs	r4, r4, #1
   13a7a:	add.w	r5, r5, #8
   13a7e:	bne.n	13a60 <_dtoa_r+0xbc0>
   13a80:	b.n	13560 <_dtoa_r+0x6c0>
   13a82:	ldr	r1, [r6, #4]
   13a84:	mov	r0, r9
   13a86:	bl	1405c <_Balloc>
   13a8a:	ldr	r3, [r6, #16]
   13a8c:	adds	r2, r3, #2
   13a8e:	mov	r5, r0
   13a90:	lsls	r2, r2, #2
   13a92:	add.w	r1, r6, #12
   13a96:	adds	r0, #12
   13a98:	bl	d064 <memcpy>
   13a9c:	mov	r1, r5
   13a9e:	movs	r2, #1
   13aa0:	mov	r0, r9
   13aa2:	bl	143bc <__lshift>
   13aa6:	mov	r8, r0
   13aa8:	b.n	1378c <_dtoa_r+0x8ec>
   13aaa:	cmp	r3, #57	; 0x39
   13aac:	beq.w	13bf8 <_dtoa_r+0xd58>
   13ab0:	add.w	sl, r3, #1
   13ab4:	mov	fp, r6
   13ab6:	strb.w	sl, [r7]
   13aba:	adds	r5, r7, #1
   13abc:	mov	r6, r8
   13abe:	str	r4, [sp, #40]	; 0x28
   13ac0:	b.n	1340e <_dtoa_r+0x56e>
   13ac2:	mov	fp, r6
   13ac4:	mov	sl, r3
   13ac6:	mov	r6, r8
   13ac8:	b.n	133d6 <_dtoa_r+0x536>
   13aca:	movs	r3, #0
   13acc:	str	r3, [sp, #24]
   13ace:	mov	r6, r3
   13ad0:	b.n	138d6 <_dtoa_r+0xa36>
   13ad2:	ldr	r3, [sp, #72]	; 0x48
   13ad4:	ldr	r1, [pc, #372]	; (13c4c <_dtoa_r+0xdac>)
   13ad6:	subs	r2, r3, #1
   13ad8:	add.w	r1, r1, r2, lsl #3
   13adc:	mov	r3, r5
   13ade:	str	r2, [sp, #92]	; 0x5c
   13ae0:	ldrd	r0, r1, [r1]
   13ae4:	mov	r2, r4
   13ae6:	bl	fc9c <__aeabi_dmul>
   13aea:	strd	r0, r1, [sp, #80]	; 0x50
   13aee:	mov	r1, r7
   13af0:	mov	r0, r6
   13af2:	bl	101fc <__aeabi_d2iz>
   13af6:	mov	r4, r0
   13af8:	bl	fbd0 <__aeabi_i2d>
   13afc:	mov	r3, r1
   13afe:	mov	r2, r0
   13b00:	mov	r1, r7
   13b02:	mov	r0, r6
   13b04:	bl	f934 <__aeabi_dsub>
   13b08:	ldr	r3, [sp, #72]	; 0x48
   13b0a:	mov	r7, r1
   13b0c:	ldr	r1, [sp, #36]	; 0x24
   13b0e:	adds	r4, #48	; 0x30
   13b10:	cmp	r3, #1
   13b12:	mov	r6, r0
   13b14:	strb	r4, [r1, #0]
   13b16:	add.w	r5, r1, #1
   13b1a:	beq.n	13b5e <_dtoa_r+0xcbe>
   13b1c:	ldr	r3, [sp, #72]	; 0x48
   13b1e:	ldr	r2, [sp, #36]	; 0x24
   13b20:	add	r3, r2
   13b22:	mov	sl, r3
   13b24:	mov	fp, r5
   13b26:	movs	r2, #0
   13b28:	ldr	r3, [pc, #296]	; (13c54 <_dtoa_r+0xdb4>)
   13b2a:	mov	r0, r6
   13b2c:	mov	r1, r7
   13b2e:	bl	fc9c <__aeabi_dmul>
   13b32:	mov	r7, r1
   13b34:	mov	r6, r0
   13b36:	bl	101fc <__aeabi_d2iz>
   13b3a:	mov	r4, r0
   13b3c:	bl	fbd0 <__aeabi_i2d>
   13b40:	adds	r4, #48	; 0x30
   13b42:	mov	r2, r0
   13b44:	mov	r3, r1
   13b46:	mov	r0, r6
   13b48:	mov	r1, r7
   13b4a:	bl	f934 <__aeabi_dsub>
   13b4e:	strb.w	r4, [fp], #1
   13b52:	cmp	sl, fp
   13b54:	mov	r6, r0
   13b56:	mov	r7, r1
   13b58:	bne.n	13b26 <_dtoa_r+0xc86>
   13b5a:	ldr	r3, [sp, #92]	; 0x5c
   13b5c:	add	r5, r3
   13b5e:	movs	r2, #0
   13b60:	ldr	r3, [pc, #244]	; (13c58 <_dtoa_r+0xdb8>)
   13b62:	ldrd	r0, r1, [sp, #80]	; 0x50
   13b66:	bl	f938 <__adddf3>
   13b6a:	mov	r2, r6
   13b6c:	mov	r3, r7
   13b6e:	bl	10180 <__aeabi_dcmplt>
   13b72:	cmp	r0, #0
   13b74:	beq.n	13c08 <_dtoa_r+0xd68>
   13b76:	ldr	r3, [sp, #88]	; 0x58
   13b78:	str	r3, [sp, #16]
   13b7a:	ldrb.w	r4, [r5, #-1]
   13b7e:	b.w	1321a <_dtoa_r+0x37a>
   13b82:	ldr	r3, [sp, #28]
   13b84:	ldr	r2, [sp, #32]
   13b86:	subs	r5, r3, r2
   13b88:	movs	r3, #0
   13b8a:	b.w	13286 <_dtoa_r+0x3e6>
   13b8e:	movs	r7, #0
   13b90:	b.n	13928 <_dtoa_r+0xa88>
   13b92:	ldr	r3, [sp, #96]	; 0x60
   13b94:	ldr	r7, [sp, #24]
   13b96:	ldr	r5, [sp, #28]
   13b98:	rsb	r3, r3, #54	; 0x36
   13b9c:	b.w	13286 <_dtoa_r+0x3e6>
   13ba0:	ldrd	r6, r7, [sp, #64]	; 0x40
   13ba4:	mov.w	sl, #2
   13ba8:	b.n	13560 <_dtoa_r+0x6c0>
   13baa:	ldr	r3, [sp, #32]
   13bac:	cmp	r3, #0
   13bae:	beq.w	13934 <_dtoa_r+0xa94>
   13bb2:	ldr	r3, [sp, #56]	; 0x38
   13bb4:	cmp	r3, #0
   13bb6:	ble.w	13a16 <_dtoa_r+0xb76>
   13bba:	movs	r2, #0
   13bbc:	ldr	r3, [pc, #148]	; (13c54 <_dtoa_r+0xdb4>)
   13bbe:	mov	r0, r6
   13bc0:	mov	r1, r7
   13bc2:	bl	fc9c <__aeabi_dmul>
   13bc6:	mov	r6, r0
   13bc8:	mov	r7, r1
   13bca:	add.w	r0, sl, #1
   13bce:	bl	fbd0 <__aeabi_i2d>
   13bd2:	mov	r2, r6
   13bd4:	mov	r3, r7
   13bd6:	bl	fc9c <__aeabi_dmul>
   13bda:	movs	r2, #0
   13bdc:	ldr	r3, [pc, #100]	; (13c44 <_dtoa_r+0xda4>)
   13bde:	bl	f938 <__adddf3>
   13be2:	ldr	r2, [sp, #16]
   13be4:	ldr	r3, [sp, #56]	; 0x38
   13be6:	str	r3, [sp, #72]	; 0x48
   13be8:	subs	r2, #1
   13bea:	mov	r4, r0
   13bec:	sub.w	r5, r1, #54525952	; 0x3400000
   13bf0:	str	r2, [sp, #88]	; 0x58
   13bf2:	b.n	135a2 <_dtoa_r+0x702>
   13bf4:	str	r4, [sp, #40]	; 0x28
   13bf6:	b.n	13702 <_dtoa_r+0x862>
   13bf8:	movs	r2, #57	; 0x39
   13bfa:	mov	fp, r6
   13bfc:	str	r4, [sp, #40]	; 0x28
   13bfe:	mov	r6, r8
   13c00:	strb	r2, [r7, #0]
   13c02:	adds	r5, r7, #1
   13c04:	b.w	133f2 <_dtoa_r+0x552>
   13c08:	ldrd	r2, r3, [sp, #80]	; 0x50
   13c0c:	movs	r0, #0
   13c0e:	ldr	r1, [pc, #72]	; (13c58 <_dtoa_r+0xdb8>)
   13c10:	bl	f934 <__aeabi_dsub>
   13c14:	mov	r2, r6
   13c16:	mov	r3, r7
   13c18:	bl	101bc <__aeabi_dcmpgt>
   13c1c:	cbnz	r0, 13c22 <_dtoa_r+0xd82>
   13c1e:	b.n	13a16 <_dtoa_r+0xb76>
   13c20:	mov	r5, r2
   13c22:	ldrb.w	r3, [r5, #-1]
   13c26:	cmp	r3, #48	; 0x30
   13c28:	add.w	r2, r5, #4294967295
   13c2c:	beq.n	13c20 <_dtoa_r+0xd80>
   13c2e:	b.n	136a4 <_dtoa_r+0x804>
   13c30:	ldr	r3, [sp, #88]	; 0x58
   13c32:	str	r3, [sp, #16]
   13c34:	b.w	1321a <_dtoa_r+0x37a>
   13c38:	cmp.w	sl, #0
   13c3c:	bne.w	13738 <_dtoa_r+0x898>
   13c40:	b.n	13908 <_dtoa_r+0xa68>
   13c42:	nop
   13c44:	.word	0x401c0000
   13c48:	.word	0x40140000
   13c4c:	.word	0x20000aa8
   13c50:	.word	0x20000b70
   13c54:	.word	0x40240000
   13c58:	.word	0x3fe00000
   13c5c:	cmp	r3, #57	; 0x39
   13c5e:	mov	fp, sl
   13c60:	mov	sl, r3
   13c62:	beq.n	13bf8 <_dtoa_r+0xd58>
   13c64:	cmp.w	fp, #0
   13c68:	bgt.w	139e6 <_dtoa_r+0xb46>
   13c6c:	b.n	139ea <_dtoa_r+0xb4a>
   13c6e:	bne.w	139ea <_dtoa_r+0xb4a>
   13c72:	tst.w	sl, #1
   13c76:	beq.w	139ea <_dtoa_r+0xb4a>
   13c7a:	b.n	139de <_dtoa_r+0xb3e>
   13c7c:	ldr	r3, [sp, #0]
   13c7e:	cmp	r3, #2
   13c80:	bgt.n	13cce <_dtoa_r+0xe2e>
   13c82:	ldr	r3, [sp, #56]	; 0x38
   13c84:	b.n	138a2 <_dtoa_r+0xa02>
   13c86:	mov.w	sl, #2
   13c8a:	b.n	13560 <_dtoa_r+0x6c0>
   13c8c:	ldr	r3, [sp, #0]
   13c8e:	cmp	r3, #2
   13c90:	bgt.n	13cce <_dtoa_r+0xe2e>
   13c92:	ldr	r3, [sp, #56]	; 0x38
   13c94:	b.n	13772 <_dtoa_r+0x8d2>
   13c96:	movs	r4, #0
   13c98:	str.w	r4, [r9, #68]	; 0x44
   13c9c:	mov	r1, r4
   13c9e:	mov	r0, r9
   13ca0:	bl	1405c <_Balloc>
   13ca4:	mov.w	r3, #4294967295
   13ca8:	str	r3, [sp, #32]
   13caa:	str	r3, [sp, #56]	; 0x38
   13cac:	movs	r3, #1
   13cae:	str	r0, [sp, #36]	; 0x24
   13cb0:	str	r4, [sp, #20]
   13cb2:	str.w	r0, [r9, #64]	; 0x40
   13cb6:	str	r3, [sp, #44]	; 0x2c
   13cb8:	b.w	130b4 <_dtoa_r+0x214>
   13cbc:	beq.w	13350 <_dtoa_r+0x4b0>
   13cc0:	rsb	r0, r0, #60	; 0x3c
   13cc4:	b.w	13346 <_dtoa_r+0x4a6>
   13cc8:	movs	r6, #1
   13cca:	b.w	13046 <_dtoa_r+0x1a6>
   13cce:	ldr	r3, [sp, #56]	; 0x38
   13cd0:	str	r3, [sp, #32]
   13cd2:	b.n	138b2 <_dtoa_r+0xa12>

00013cd4 <fcvtbuf>:
   13cd4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   13cd8:	vpush	{d8}
   13cdc:	vmov.f32	s16, s0
   13ce0:	vmov.f32	s17, s1
   13ce4:	ldr	r5, [pc, #224]	; (13dc8 <fcvtbuf+0xf4>)
   13ce6:	sub	sp, #20
   13ce8:	ldr	r7, [r5, #0]
   13cea:	mov	r4, r0
   13cec:	mov	r6, r1
   13cee:	mov	r8, r2
   13cf0:	mov	r5, r3
   13cf2:	cmp	r3, #0
   13cf4:	beq.n	13d92 <fcvtbuf+0xbe>
   13cf6:	movs	r2, #0
   13cf8:	ldr	r3, [pc, #208]	; (13dcc <fcvtbuf+0xf8>)
   13cfa:	vmov	r0, r1, d8
   13cfe:	bl	10180 <__aeabi_dcmplt>
   13d02:	cbnz	r0, 13d64 <fcvtbuf+0x90>
   13d04:	vmov.f32	s0, s16
   13d08:	vmov.f32	s1, s17
   13d0c:	add	r3, sp, #12
   13d0e:	str	r3, [sp, #4]
   13d10:	str.w	r8, [sp]
   13d14:	mov	r0, r7
   13d16:	mov	r3, r6
   13d18:	mov	r2, r4
   13d1a:	movs	r1, #3
   13d1c:	bl	12ea0 <_dtoa_r>
   13d20:	ldr	r3, [sp, #12]
   13d22:	ldr	r1, [r6, #0]
   13d24:	cmp	r0, r3
   13d26:	rsb	r1, r1, #0
   13d2a:	bcs.n	13da0 <fcvtbuf+0xcc>
   13d2c:	subs	r1, r1, r5
   13d2e:	mov	r3, r5
   13d30:	ldrb.w	r2, [r0], #1
   13d34:	strb.w	r2, [r3], #1
   13d38:	ldr	r2, [sp, #12]
   13d3a:	cmp	r2, r0
   13d3c:	add.w	r6, r3, r1
   13d40:	bhi.n	13d30 <fcvtbuf+0x5c>
   13d42:	cmp	r4, r6
   13d44:	ble.n	13da6 <fcvtbuf+0xd2>
   13d46:	subs	r2, r4, r6
   13d48:	add	r2, r3
   13d4a:	movs	r1, #48	; 0x30
   13d4c:	strb.w	r1, [r3], #1
   13d50:	cmp	r2, r3
   13d52:	bne.n	13d4c <fcvtbuf+0x78>
   13d54:	movs	r3, #0
   13d56:	strb	r3, [r2, #0]
   13d58:	mov	r0, r5
   13d5a:	add	sp, #20
   13d5c:	vpop	{d8}
   13d60:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   13d64:	movs	r2, #0
   13d66:	ldr	r3, [pc, #104]	; (13dd0 <fcvtbuf+0xfc>)
   13d68:	vmov	r0, r1, d8
   13d6c:	bl	101bc <__aeabi_dcmpgt>
   13d70:	cmp	r0, #0
   13d72:	beq.n	13d04 <fcvtbuf+0x30>
   13d74:	vmov.f32	s0, s16
   13d78:	vmov.f32	s1, s17
   13d7c:	add	r3, sp, #12
   13d7e:	str	r3, [sp, #4]
   13d80:	str.w	r8, [sp]
   13d84:	mov	r0, r7
   13d86:	mov	r3, r6
   13d88:	mov	r2, r4
   13d8a:	movs	r1, #2
   13d8c:	bl	12ea0 <_dtoa_r>
   13d90:	b.n	13d20 <fcvtbuf+0x4c>
   13d92:	ldr	r2, [r7, #80]	; 0x50
   13d94:	add.w	r3, r0, #35	; 0x23
   13d98:	cmp	r2, r3
   13d9a:	ble.n	13daa <fcvtbuf+0xd6>
   13d9c:	ldr	r5, [r7, #84]	; 0x54
   13d9e:	b.n	13cf6 <fcvtbuf+0x22>
   13da0:	mov	r6, r1
   13da2:	mov	r3, r5
   13da4:	b.n	13d42 <fcvtbuf+0x6e>
   13da6:	mov	r2, r3
   13da8:	b.n	13d54 <fcvtbuf+0x80>
   13daa:	add.w	r9, r0, #36	; 0x24
   13dae:	mov	r2, r9
   13db0:	ldr	r1, [r7, #84]	; 0x54
   13db2:	mov	r0, r7
   13db4:	bl	10e20 <_realloc_r>
   13db8:	mov	r5, r0
   13dba:	cmp	r0, #0
   13dbc:	beq.n	13d58 <fcvtbuf+0x84>
   13dbe:	str.w	r9, [r7, #80]	; 0x50
   13dc2:	str	r0, [r7, #84]	; 0x54
   13dc4:	b.n	13cf6 <fcvtbuf+0x22>
   13dc6:	nop
   13dc8:	.word	0x20001090
   13dcc:	.word	0x3ff00000
   13dd0:	.word	0xbff00000

00013dd4 <_malloc_trim_r>:
   13dd4:	push	{r3, r4, r5, r6, r7, lr}
   13dd6:	ldr	r7, [pc, #140]	; (13e64 <_malloc_trim_r+0x90>)
   13dd8:	mov	r4, r1
   13dda:	mov	r6, r0
   13ddc:	bl	10e18 <__malloc_lock>
   13de0:	ldr	r3, [r7, #8]
   13de2:	ldr	r5, [r3, #4]
   13de4:	bic.w	r5, r5, #3
   13de8:	subs	r1, r5, r4
   13dea:	addw	r1, r1, #4079	; 0xfef
   13dee:	bic.w	r1, r1, #4080	; 0xff0
   13df2:	bic.w	r1, r1, #15
   13df6:	sub.w	r4, r1, #4096	; 0x1000
   13dfa:	cmp.w	r4, #4096	; 0x1000
   13dfe:	blt.n	13e10 <_malloc_trim_r+0x3c>
   13e00:	movs	r1, #0
   13e02:	mov	r0, r6
   13e04:	bl	11200 <_sbrk_r>
   13e08:	ldr	r3, [r7, #8]
   13e0a:	add	r3, r5
   13e0c:	cmp	r0, r3
   13e0e:	beq.n	13e1a <_malloc_trim_r+0x46>
   13e10:	mov	r0, r6
   13e12:	bl	10e1c <__malloc_unlock>
   13e16:	movs	r0, #0
   13e18:	pop	{r3, r4, r5, r6, r7, pc}
   13e1a:	negs	r1, r4
   13e1c:	mov	r0, r6
   13e1e:	bl	11200 <_sbrk_r>
   13e22:	adds	r0, #1
   13e24:	beq.n	13e42 <_malloc_trim_r+0x6e>
   13e26:	ldr	r3, [pc, #64]	; (13e68 <_malloc_trim_r+0x94>)
   13e28:	ldr	r2, [r7, #8]
   13e2a:	ldr	r1, [r3, #0]
   13e2c:	subs	r5, r5, r4
   13e2e:	orr.w	r5, r5, #1
   13e32:	mov	r0, r6
   13e34:	subs	r1, r1, r4
   13e36:	str	r5, [r2, #4]
   13e38:	str	r1, [r3, #0]
   13e3a:	bl	10e1c <__malloc_unlock>
   13e3e:	movs	r0, #1
   13e40:	pop	{r3, r4, r5, r6, r7, pc}
   13e42:	movs	r1, #0
   13e44:	mov	r0, r6
   13e46:	bl	11200 <_sbrk_r>
   13e4a:	ldr	r2, [r7, #8]
   13e4c:	subs	r3, r0, r2
   13e4e:	cmp	r3, #15
   13e50:	ble.n	13e10 <_malloc_trim_r+0x3c>
   13e52:	ldr	r4, [pc, #24]	; (13e6c <_malloc_trim_r+0x98>)
   13e54:	ldr	r1, [pc, #16]	; (13e68 <_malloc_trim_r+0x94>)
   13e56:	ldr	r4, [r4, #0]
   13e58:	orr.w	r3, r3, #1
   13e5c:	subs	r0, r0, r4
   13e5e:	str	r3, [r2, #4]
   13e60:	str	r0, [r1, #0]
   13e62:	b.n	13e10 <_malloc_trim_r+0x3c>
   13e64:	.word	0x20001200
   13e68:	.word	0x200063c8
   13e6c:	.word	0x2000160c

00013e70 <_free_r>:
   13e70:	cmp	r1, #0
   13e72:	beq.n	13f00 <_free_r+0x90>
   13e74:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13e78:	mov	r5, r1
   13e7a:	mov	r8, r0
   13e7c:	bl	10e18 <__malloc_lock>
   13e80:	ldr.w	r7, [r5, #-4]
   13e84:	ldr	r1, [pc, #424]	; (14030 <_free_r+0x1c0>)
   13e86:	bic.w	r3, r7, #1
   13e8a:	sub.w	r4, r5, #8
   13e8e:	adds	r2, r4, r3
   13e90:	ldr	r6, [r1, #8]
   13e92:	ldr	r0, [r2, #4]
   13e94:	cmp	r2, r6
   13e96:	bic.w	r0, r0, #3
   13e9a:	beq.n	13f62 <_free_r+0xf2>
   13e9c:	lsls	r6, r7, #31
   13e9e:	str	r0, [r2, #4]
   13ea0:	bmi.n	13eba <_free_r+0x4a>
   13ea2:	ldr.w	r7, [r5, #-8]
   13ea6:	subs	r4, r4, r7
   13ea8:	add.w	lr, r1, #8
   13eac:	ldr	r5, [r4, #8]
   13eae:	cmp	r5, lr
   13eb0:	add	r3, r7
   13eb2:	beq.n	13f94 <_free_r+0x124>
   13eb4:	ldr	r7, [r4, #12]
   13eb6:	str	r7, [r5, #12]
   13eb8:	str	r5, [r7, #8]
   13eba:	adds	r5, r2, r0
   13ebc:	ldr	r5, [r5, #4]
   13ebe:	lsls	r5, r5, #31
   13ec0:	bpl.n	13f48 <_free_r+0xd8>
   13ec2:	orr.w	r2, r3, #1
   13ec6:	str	r2, [r4, #4]
   13ec8:	str	r3, [r4, r3]
   13eca:	cmp.w	r3, #512	; 0x200
   13ece:	bcs.n	13f02 <_free_r+0x92>
   13ed0:	lsrs	r3, r3, #3
   13ed2:	adds	r2, r3, #1
   13ed4:	ldr	r5, [r1, #4]
   13ed6:	ldr.w	r7, [r1, r2, lsl #3]
   13eda:	str	r7, [r4, #8]
   13edc:	movs	r0, #1
   13ede:	asrs	r3, r3, #2
   13ee0:	lsl.w	r3, r0, r3
   13ee4:	add.w	r0, r1, r2, lsl #3
   13ee8:	orrs	r5, r3
   13eea:	subs	r0, #8
   13eec:	str	r0, [r4, #12]
   13eee:	str	r5, [r1, #4]
   13ef0:	str.w	r4, [r1, r2, lsl #3]
   13ef4:	str	r4, [r7, #12]
   13ef6:	mov	r0, r8
   13ef8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   13efc:	b.w	10e1c <__malloc_unlock>
   13f00:	bx	lr
   13f02:	lsrs	r2, r3, #9
   13f04:	cmp	r2, #4
   13f06:	bhi.n	13fb0 <_free_r+0x140>
   13f08:	lsrs	r2, r3, #6
   13f0a:	add.w	r7, r2, #57	; 0x39
   13f0e:	lsls	r7, r7, #1
   13f10:	add.w	r5, r2, #56	; 0x38
   13f14:	add.w	r0, r1, r7, lsl #2
   13f18:	ldr.w	r2, [r1, r7, lsl #2]
   13f1c:	ldr	r1, [pc, #272]	; (14030 <_free_r+0x1c0>)
   13f1e:	subs	r0, #8
   13f20:	cmp	r0, r2
   13f22:	beq.n	13fc0 <_free_r+0x150>
   13f24:	ldr	r1, [r2, #4]
   13f26:	bic.w	r1, r1, #3
   13f2a:	cmp	r3, r1
   13f2c:	bcs.n	13f34 <_free_r+0xc4>
   13f2e:	ldr	r2, [r2, #8]
   13f30:	cmp	r0, r2
   13f32:	bne.n	13f24 <_free_r+0xb4>
   13f34:	ldr	r0, [r2, #12]
   13f36:	str	r0, [r4, #12]
   13f38:	str	r2, [r4, #8]
   13f3a:	str	r4, [r0, #8]
   13f3c:	str	r4, [r2, #12]
   13f3e:	mov	r0, r8
   13f40:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   13f44:	b.w	10e1c <__malloc_unlock>
   13f48:	ldr	r5, [r2, #8]
   13f4a:	ldr	r7, [pc, #232]	; (14034 <_free_r+0x1c4>)
   13f4c:	cmp	r5, r7
   13f4e:	add	r3, r0
   13f50:	beq.n	13fd2 <_free_r+0x162>
   13f52:	ldr	r0, [r2, #12]
   13f54:	str	r0, [r5, #12]
   13f56:	orr.w	r2, r3, #1
   13f5a:	str	r5, [r0, #8]
   13f5c:	str	r2, [r4, #4]
   13f5e:	str	r3, [r4, r3]
   13f60:	b.n	13eca <_free_r+0x5a>
   13f62:	lsls	r7, r7, #31
   13f64:	add	r3, r0
   13f66:	bmi.n	13f78 <_free_r+0x108>
   13f68:	ldr.w	r2, [r5, #-8]
   13f6c:	subs	r4, r4, r2
   13f6e:	add	r3, r2
   13f70:	ldr	r0, [r4, #8]
   13f72:	ldr	r2, [r4, #12]
   13f74:	str	r2, [r0, #12]
   13f76:	str	r0, [r2, #8]
   13f78:	ldr	r2, [pc, #188]	; (14038 <_free_r+0x1c8>)
   13f7a:	ldr	r2, [r2, #0]
   13f7c:	orr.w	r0, r3, #1
   13f80:	cmp	r3, r2
   13f82:	str	r0, [r4, #4]
   13f84:	str	r4, [r1, #8]
   13f86:	bcc.n	13ef6 <_free_r+0x86>
   13f88:	ldr	r3, [pc, #176]	; (1403c <_free_r+0x1cc>)
   13f8a:	mov	r0, r8
   13f8c:	ldr	r1, [r3, #0]
   13f8e:	bl	13dd4 <_malloc_trim_r>
   13f92:	b.n	13ef6 <_free_r+0x86>
   13f94:	adds	r1, r2, r0
   13f96:	ldr	r1, [r1, #4]
   13f98:	lsls	r1, r1, #31
   13f9a:	bmi.n	14026 <_free_r+0x1b6>
   13f9c:	ldr	r1, [r2, #8]
   13f9e:	ldr	r2, [r2, #12]
   13fa0:	str	r2, [r1, #12]
   13fa2:	add	r3, r0
   13fa4:	orr.w	r0, r3, #1
   13fa8:	str	r1, [r2, #8]
   13faa:	str	r0, [r4, #4]
   13fac:	str	r3, [r4, r3]
   13fae:	b.n	13ef6 <_free_r+0x86>
   13fb0:	cmp	r2, #20
   13fb2:	bhi.n	13fe4 <_free_r+0x174>
   13fb4:	add.w	r7, r2, #92	; 0x5c
   13fb8:	lsls	r7, r7, #1
   13fba:	add.w	r5, r2, #91	; 0x5b
   13fbe:	b.n	13f14 <_free_r+0xa4>
   13fc0:	asrs	r2, r5, #2
   13fc2:	ldr	r3, [r1, #4]
   13fc4:	movs	r5, #1
   13fc6:	lsl.w	r2, r5, r2
   13fca:	orrs	r3, r2
   13fcc:	str	r3, [r1, #4]
   13fce:	mov	r2, r0
   13fd0:	b.n	13f36 <_free_r+0xc6>
   13fd2:	orr.w	r2, r3, #1
   13fd6:	str	r4, [r1, #20]
   13fd8:	str	r4, [r1, #16]
   13fda:	str	r5, [r4, #12]
   13fdc:	str	r5, [r4, #8]
   13fde:	str	r2, [r4, #4]
   13fe0:	str	r3, [r4, r3]
   13fe2:	b.n	13ef6 <_free_r+0x86>
   13fe4:	cmp	r2, #84	; 0x54
   13fe6:	bhi.n	13ff6 <_free_r+0x186>
   13fe8:	lsrs	r2, r3, #12
   13fea:	add.w	r7, r2, #111	; 0x6f
   13fee:	lsls	r7, r7, #1
   13ff0:	add.w	r5, r2, #110	; 0x6e
   13ff4:	b.n	13f14 <_free_r+0xa4>
   13ff6:	cmp.w	r2, #340	; 0x154
   13ffa:	bhi.n	1400a <_free_r+0x19a>
   13ffc:	lsrs	r2, r3, #15
   13ffe:	add.w	r7, r2, #120	; 0x78
   14002:	lsls	r7, r7, #1
   14004:	add.w	r5, r2, #119	; 0x77
   14008:	b.n	13f14 <_free_r+0xa4>
   1400a:	movw	r0, #1364	; 0x554
   1400e:	cmp	r2, r0
   14010:	bhi.n	14020 <_free_r+0x1b0>
   14012:	lsrs	r2, r3, #18
   14014:	add.w	r7, r2, #125	; 0x7d
   14018:	lsls	r7, r7, #1
   1401a:	add.w	r5, r2, #124	; 0x7c
   1401e:	b.n	13f14 <_free_r+0xa4>
   14020:	movs	r7, #254	; 0xfe
   14022:	movs	r5, #126	; 0x7e
   14024:	b.n	13f14 <_free_r+0xa4>
   14026:	orr.w	r2, r3, #1
   1402a:	str	r2, [r4, #4]
   1402c:	str	r3, [r4, r3]
   1402e:	b.n	13ef6 <_free_r+0x86>
   14030:	.word	0x20001200
   14034:	.word	0x20001208
   14038:	.word	0x20001608
   1403c:	.word	0x200063c4

00014040 <_localeconv_r>:
   14040:	ldr	r2, [pc, #16]	; (14054 <_localeconv_r+0x14>)
   14042:	ldr	r3, [pc, #20]	; (14058 <_localeconv_r+0x18>)
   14044:	ldr	r2, [r2, #0]
   14046:	ldr	r0, [r2, #52]	; 0x34
   14048:	cmp	r0, #0
   1404a:	it	eq
   1404c:	moveq	r0, r3
   1404e:	adds	r0, #240	; 0xf0
   14050:	bx	lr
   14052:	nop
   14054:	.word	0x20001090
   14058:	.word	0x20001094

0001405c <_Balloc>:
   1405c:	ldr	r3, [r0, #76]	; 0x4c
   1405e:	push	{r4, r5, r6, lr}
   14060:	mov	r5, r0
   14062:	mov	r4, r1
   14064:	cbz	r3, 1407a <_Balloc+0x1e>
   14066:	ldr.w	r0, [r3, r4, lsl #2]
   1406a:	cbz	r0, 1408e <_Balloc+0x32>
   1406c:	ldr	r2, [r0, #0]
   1406e:	str.w	r2, [r3, r4, lsl #2]
   14072:	movs	r3, #0
   14074:	str	r3, [r0, #16]
   14076:	str	r3, [r0, #12]
   14078:	pop	{r4, r5, r6, pc}
   1407a:	movs	r2, #33	; 0x21
   1407c:	movs	r1, #4
   1407e:	bl	147e0 <_calloc_r>
   14082:	str	r0, [r5, #76]	; 0x4c
   14084:	mov	r3, r0
   14086:	cmp	r0, #0
   14088:	bne.n	14066 <_Balloc+0xa>
   1408a:	movs	r0, #0
   1408c:	pop	{r4, r5, r6, pc}
   1408e:	movs	r1, #1
   14090:	lsl.w	r6, r1, r4
   14094:	adds	r2, r6, #5
   14096:	mov	r0, r5
   14098:	lsls	r2, r2, #2
   1409a:	bl	147e0 <_calloc_r>
   1409e:	cmp	r0, #0
   140a0:	beq.n	1408a <_Balloc+0x2e>
   140a2:	str	r4, [r0, #4]
   140a4:	str	r6, [r0, #8]
   140a6:	b.n	14072 <_Balloc+0x16>

000140a8 <_Bfree>:
   140a8:	cbz	r1, 140b8 <_Bfree+0x10>
   140aa:	ldr	r3, [r0, #76]	; 0x4c
   140ac:	ldr	r2, [r1, #4]
   140ae:	ldr.w	r0, [r3, r2, lsl #2]
   140b2:	str	r0, [r1, #0]
   140b4:	str.w	r1, [r3, r2, lsl #2]
   140b8:	bx	lr
   140ba:	nop

000140bc <__multadd>:
   140bc:	push	{r4, r5, r6, r7, lr}
   140be:	ldr	r4, [r1, #16]
   140c0:	sub	sp, #12
   140c2:	mov	r5, r1
   140c4:	mov	r6, r0
   140c6:	add.w	lr, r1, #20
   140ca:	movs	r7, #0
   140cc:	ldr.w	r0, [lr]
   140d0:	uxth	r1, r0
   140d2:	mla	r1, r2, r1, r3
   140d6:	lsrs	r3, r1, #16
   140d8:	lsrs	r0, r0, #16
   140da:	mla	r3, r2, r0, r3
   140de:	uxth	r1, r1
   140e0:	adds	r7, #1
   140e2:	add.w	r1, r1, r3, lsl #16
   140e6:	cmp	r4, r7
   140e8:	str.w	r1, [lr], #4
   140ec:	mov.w	r3, r3, lsr #16
   140f0:	bgt.n	140cc <__multadd+0x10>
   140f2:	cbz	r3, 14104 <__multadd+0x48>
   140f4:	ldr	r2, [r5, #8]
   140f6:	cmp	r4, r2
   140f8:	bge.n	1410a <__multadd+0x4e>
   140fa:	add.w	r2, r5, r4, lsl #2
   140fe:	adds	r4, #1
   14100:	str	r3, [r2, #20]
   14102:	str	r4, [r5, #16]
   14104:	mov	r0, r5
   14106:	add	sp, #12
   14108:	pop	{r4, r5, r6, r7, pc}
   1410a:	ldr	r1, [r5, #4]
   1410c:	str	r3, [sp, #4]
   1410e:	adds	r1, #1
   14110:	mov	r0, r6
   14112:	bl	1405c <_Balloc>
   14116:	ldr	r2, [r5, #16]
   14118:	adds	r2, #2
   1411a:	add.w	r1, r5, #12
   1411e:	mov	r7, r0
   14120:	lsls	r2, r2, #2
   14122:	adds	r0, #12
   14124:	bl	d064 <memcpy>
   14128:	ldr	r2, [r6, #76]	; 0x4c
   1412a:	ldr	r1, [r5, #4]
   1412c:	ldr	r3, [sp, #4]
   1412e:	ldr.w	r0, [r2, r1, lsl #2]
   14132:	str	r0, [r5, #0]
   14134:	str.w	r5, [r2, r1, lsl #2]
   14138:	mov	r5, r7
   1413a:	b.n	140fa <__multadd+0x3e>

0001413c <__hi0bits>:
   1413c:	lsrs	r3, r0, #16
   1413e:	lsls	r3, r3, #16
   14140:	cbnz	r3, 14170 <__hi0bits+0x34>
   14142:	lsls	r0, r0, #16
   14144:	movs	r3, #16
   14146:	tst.w	r0, #4278190080	; 0xff000000
   1414a:	itt	eq
   1414c:	lsleq	r0, r0, #8
   1414e:	addeq	r3, #8
   14150:	tst.w	r0, #4026531840	; 0xf0000000
   14154:	itt	eq
   14156:	lsleq	r0, r0, #4
   14158:	addeq	r3, #4
   1415a:	tst.w	r0, #3221225472	; 0xc0000000
   1415e:	itt	eq
   14160:	lsleq	r0, r0, #2
   14162:	addeq	r3, #2
   14164:	cmp	r0, #0
   14166:	blt.n	14178 <__hi0bits+0x3c>
   14168:	lsls	r2, r0, #1
   1416a:	bmi.n	14174 <__hi0bits+0x38>
   1416c:	movs	r0, #32
   1416e:	bx	lr
   14170:	movs	r3, #0
   14172:	b.n	14146 <__hi0bits+0xa>
   14174:	adds	r0, r3, #1
   14176:	bx	lr
   14178:	mov	r0, r3
   1417a:	bx	lr

0001417c <__lo0bits>:
   1417c:	ldr	r3, [r0, #0]
   1417e:	ands.w	r2, r3, #7
   14182:	beq.n	14194 <__lo0bits+0x18>
   14184:	lsls	r1, r3, #31
   14186:	bmi.n	141ca <__lo0bits+0x4e>
   14188:	lsls	r2, r3, #30
   1418a:	bmi.n	141ce <__lo0bits+0x52>
   1418c:	lsrs	r3, r3, #2
   1418e:	str	r3, [r0, #0]
   14190:	movs	r0, #2
   14192:	bx	lr
   14194:	uxth	r1, r3
   14196:	cbnz	r1, 1419c <__lo0bits+0x20>
   14198:	lsrs	r3, r3, #16
   1419a:	movs	r2, #16
   1419c:	tst.w	r3, #255	; 0xff
   141a0:	itt	eq
   141a2:	lsreq	r3, r3, #8
   141a4:	addeq	r2, #8
   141a6:	lsls	r1, r3, #28
   141a8:	itt	eq
   141aa:	lsreq	r3, r3, #4
   141ac:	addeq	r2, #4
   141ae:	lsls	r1, r3, #30
   141b0:	itt	eq
   141b2:	lsreq	r3, r3, #2
   141b4:	addeq	r2, #2
   141b6:	lsls	r1, r3, #31
   141b8:	bmi.n	141c4 <__lo0bits+0x48>
   141ba:	lsrs	r3, r3, #1
   141bc:	bne.n	141c2 <__lo0bits+0x46>
   141be:	movs	r0, #32
   141c0:	bx	lr
   141c2:	adds	r2, #1
   141c4:	str	r3, [r0, #0]
   141c6:	mov	r0, r2
   141c8:	bx	lr
   141ca:	movs	r0, #0
   141cc:	bx	lr
   141ce:	lsrs	r3, r3, #1
   141d0:	str	r3, [r0, #0]
   141d2:	movs	r0, #1
   141d4:	bx	lr
   141d6:	nop

000141d8 <__i2b>:
   141d8:	push	{r4, lr}
   141da:	mov	r4, r1
   141dc:	movs	r1, #1
   141de:	bl	1405c <_Balloc>
   141e2:	movs	r2, #1
   141e4:	str	r4, [r0, #20]
   141e6:	str	r2, [r0, #16]
   141e8:	pop	{r4, pc}
   141ea:	nop

000141ec <__multiply>:
   141ec:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   141f0:	ldr	r5, [r1, #16]
   141f2:	ldr	r7, [r2, #16]
   141f4:	cmp	r5, r7
   141f6:	sub	sp, #12
   141f8:	mov	r4, r1
   141fa:	mov	r6, r2
   141fc:	bge.n	14208 <__multiply+0x1c>
   141fe:	mov	r2, r5
   14200:	mov	r4, r6
   14202:	mov	r5, r7
   14204:	mov	r6, r1
   14206:	mov	r7, r2
   14208:	ldr	r3, [r4, #8]
   1420a:	ldr	r1, [r4, #4]
   1420c:	add.w	r8, r5, r7
   14210:	cmp	r8, r3
   14212:	it	gt
   14214:	addgt	r1, #1
   14216:	bl	1405c <_Balloc>
   1421a:	add.w	ip, r0, #20
   1421e:	add.w	r9, ip, r8, lsl #2
   14222:	cmp	ip, r9
   14224:	str	r0, [sp, #0]
   14226:	bcs.n	14234 <__multiply+0x48>
   14228:	mov	r3, ip
   1422a:	movs	r1, #0
   1422c:	str.w	r1, [r3], #4
   14230:	cmp	r9, r3
   14232:	bhi.n	1422c <__multiply+0x40>
   14234:	add.w	r2, r6, #20
   14238:	add.w	sl, r2, r7, lsl #2
   1423c:	add.w	r3, r4, #20
   14240:	cmp	r2, sl
   14242:	add.w	lr, r3, r5, lsl #2
   14246:	bcs.n	142f2 <__multiply+0x106>
   14248:	str.w	r9, [sp, #4]
   1424c:	mov	r9, r3
   1424e:	ldr.w	r3, [r2], #4
   14252:	uxth.w	fp, r3
   14256:	cmp.w	fp, #0
   1425a:	beq.n	1429e <__multiply+0xb2>
   1425c:	movs	r0, #0
   1425e:	mov	r7, r9
   14260:	mov	r6, ip
   14262:	mov	r5, r0
   14264:	b.n	14268 <__multiply+0x7c>
   14266:	mov	r6, r3
   14268:	ldr.w	r4, [r7], #4
   1426c:	ldr	r0, [r6, #0]
   1426e:	uxth	r1, r4
   14270:	uxth	r3, r0
   14272:	mla	r1, fp, r1, r3
   14276:	lsrs	r4, r4, #16
   14278:	lsrs	r0, r0, #16
   1427a:	adds	r3, r1, r5
   1427c:	mla	r0, fp, r4, r0
   14280:	add.w	r0, r0, r3, lsr #16
   14284:	uxth	r1, r3
   14286:	mov	r3, r6
   14288:	orr.w	r1, r1, r0, lsl #16
   1428c:	cmp	lr, r7
   1428e:	mov.w	r5, r0, lsr #16
   14292:	str.w	r1, [r3], #4
   14296:	bhi.n	14266 <__multiply+0x7a>
   14298:	str	r5, [r6, #4]
   1429a:	ldr.w	r3, [r2, #-4]
   1429e:	movs.w	fp, r3, lsr #16
   142a2:	beq.n	142e6 <__multiply+0xfa>
   142a4:	ldr.w	r3, [ip]
   142a8:	mov	r7, ip
   142aa:	mov	r0, r3
   142ac:	mov	r5, r9
   142ae:	movs	r1, #0
   142b0:	b.n	142b4 <__multiply+0xc8>
   142b2:	mov	r7, r6
   142b4:	ldrh	r4, [r5, #0]
   142b6:	lsrs	r0, r0, #16
   142b8:	mla	r0, fp, r4, r0
   142bc:	add	r1, r0
   142be:	uxth	r4, r3
   142c0:	mov	r6, r7
   142c2:	orr.w	r3, r4, r1, lsl #16
   142c6:	str.w	r3, [r6], #4
   142ca:	ldr	r0, [r7, #4]
   142cc:	ldr.w	r4, [r5], #4
   142d0:	uxth	r3, r0
   142d2:	lsrs	r4, r4, #16
   142d4:	mla	r4, fp, r4, r3
   142d8:	add.w	r3, r4, r1, lsr #16
   142dc:	cmp	lr, r5
   142de:	mov.w	r1, r3, lsr #16
   142e2:	bhi.n	142b2 <__multiply+0xc6>
   142e4:	str	r3, [r7, #4]
   142e6:	cmp	sl, r2
   142e8:	add.w	ip, ip, #4
   142ec:	bhi.n	1424e <__multiply+0x62>
   142ee:	ldr.w	r9, [sp, #4]
   142f2:	cmp.w	r8, #0
   142f6:	ble.n	14310 <__multiply+0x124>
   142f8:	ldr.w	r3, [r9, #-4]
   142fc:	sub.w	r9, r9, #4
   14300:	cbz	r3, 1430a <__multiply+0x11e>
   14302:	b.n	14310 <__multiply+0x124>
   14304:	ldr.w	r3, [r9, #-4]!
   14308:	cbnz	r3, 14310 <__multiply+0x124>
   1430a:	subs.w	r8, r8, #1
   1430e:	bne.n	14304 <__multiply+0x118>
   14310:	ldr	r0, [sp, #0]
   14312:	str.w	r8, [r0, #16]
   14316:	add	sp, #12
   14318:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001431c <__pow5mult>:
   1431c:	ands.w	r3, r2, #3
   14320:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14324:	mov	r4, r2
   14326:	mov	r7, r0
   14328:	bne.n	14388 <__pow5mult+0x6c>
   1432a:	mov	r6, r1
   1432c:	asrs	r4, r4, #2
   1432e:	beq.n	1436a <__pow5mult+0x4e>
   14330:	ldr	r5, [r7, #72]	; 0x48
   14332:	cbz	r5, 1439a <__pow5mult+0x7e>
   14334:	lsls	r3, r4, #31
   14336:	mov.w	r8, #0
   1433a:	bmi.n	1434a <__pow5mult+0x2e>
   1433c:	asrs	r4, r4, #1
   1433e:	beq.n	1436a <__pow5mult+0x4e>
   14340:	ldr	r0, [r5, #0]
   14342:	cbz	r0, 14370 <__pow5mult+0x54>
   14344:	mov	r5, r0
   14346:	lsls	r3, r4, #31
   14348:	bpl.n	1433c <__pow5mult+0x20>
   1434a:	mov	r2, r5
   1434c:	mov	r1, r6
   1434e:	mov	r0, r7
   14350:	bl	141ec <__multiply>
   14354:	cbz	r6, 14384 <__pow5mult+0x68>
   14356:	ldr	r2, [r6, #4]
   14358:	ldr	r3, [r7, #76]	; 0x4c
   1435a:	asrs	r4, r4, #1
   1435c:	ldr.w	r1, [r3, r2, lsl #2]
   14360:	str	r1, [r6, #0]
   14362:	str.w	r6, [r3, r2, lsl #2]
   14366:	mov	r6, r0
   14368:	bne.n	14340 <__pow5mult+0x24>
   1436a:	mov	r0, r6
   1436c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   14370:	mov	r2, r5
   14372:	mov	r1, r5
   14374:	mov	r0, r7
   14376:	bl	141ec <__multiply>
   1437a:	str	r0, [r5, #0]
   1437c:	str.w	r8, [r0]
   14380:	mov	r5, r0
   14382:	b.n	14346 <__pow5mult+0x2a>
   14384:	mov	r6, r0
   14386:	b.n	1433c <__pow5mult+0x20>
   14388:	subs	r2, r3, #1
   1438a:	ldr	r5, [pc, #44]	; (143b8 <__pow5mult+0x9c>)
   1438c:	movs	r3, #0
   1438e:	ldr.w	r2, [r5, r2, lsl #2]
   14392:	bl	140bc <__multadd>
   14396:	mov	r6, r0
   14398:	b.n	1432c <__pow5mult+0x10>
   1439a:	movs	r1, #1
   1439c:	mov	r0, r7
   1439e:	bl	1405c <_Balloc>
   143a2:	movw	r1, #625	; 0x271
   143a6:	movs	r2, #1
   143a8:	movs	r3, #0
   143aa:	str	r1, [r0, #20]
   143ac:	str	r2, [r0, #16]
   143ae:	mov	r5, r0
   143b0:	str	r0, [r7, #72]	; 0x48
   143b2:	str	r3, [r0, #0]
   143b4:	b.n	14334 <__pow5mult+0x18>
   143b6:	nop
   143b8:	.word	0x20000b98

000143bc <__lshift>:
   143bc:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   143c0:	mov	r9, r2
   143c2:	ldr	r2, [r1, #16]
   143c4:	ldr	r3, [r1, #8]
   143c6:	mov.w	r4, r9, asr #5
   143ca:	add.w	r8, r4, r2
   143ce:	add.w	r5, r8, #1
   143d2:	cmp	r5, r3
   143d4:	mov	r6, r1
   143d6:	mov	sl, r0
   143d8:	ldr	r1, [r1, #4]
   143da:	ble.n	143e6 <__lshift+0x2a>
   143dc:	lsls	r3, r3, #1
   143de:	cmp	r5, r3
   143e0:	add.w	r1, r1, #1
   143e4:	bgt.n	143dc <__lshift+0x20>
   143e6:	mov	r0, sl
   143e8:	bl	1405c <_Balloc>
   143ec:	cmp	r4, #0
   143ee:	add.w	r2, r0, #20
   143f2:	ble.n	14466 <__lshift+0xaa>
   143f4:	add.w	r3, r2, r4, lsl #2
   143f8:	movs	r1, #0
   143fa:	str.w	r1, [r2], #4
   143fe:	cmp	r3, r2
   14400:	bne.n	143fa <__lshift+0x3e>
   14402:	ldr	r4, [r6, #16]
   14404:	add.w	r1, r6, #20
   14408:	ands.w	r9, r9, #31
   1440c:	add.w	lr, r1, r4, lsl #2
   14410:	beq.n	14456 <__lshift+0x9a>
   14412:	rsb	r2, r9, #32
   14416:	movs	r4, #0
   14418:	ldr	r7, [r1, #0]
   1441a:	lsl.w	ip, r7, r9
   1441e:	orr.w	r4, ip, r4
   14422:	mov	ip, r3
   14424:	str.w	r4, [r3], #4
   14428:	ldr.w	r4, [r1], #4
   1442c:	cmp	lr, r1
   1442e:	lsr.w	r4, r4, r2
   14432:	bhi.n	14418 <__lshift+0x5c>
   14434:	str.w	r4, [ip, #4]
   14438:	cbz	r4, 1443e <__lshift+0x82>
   1443a:	add.w	r5, r8, #2
   1443e:	ldr.w	r3, [sl, #76]	; 0x4c
   14442:	ldr	r2, [r6, #4]
   14444:	subs	r5, #1
   14446:	ldr.w	r1, [r3, r2, lsl #2]
   1444a:	str	r5, [r0, #16]
   1444c:	str	r1, [r6, #0]
   1444e:	str.w	r6, [r3, r2, lsl #2]
   14452:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   14456:	subs	r3, #4
   14458:	ldr.w	r2, [r1], #4
   1445c:	str.w	r2, [r3, #4]!
   14460:	cmp	lr, r1
   14462:	bhi.n	14458 <__lshift+0x9c>
   14464:	b.n	1443e <__lshift+0x82>
   14466:	mov	r3, r2
   14468:	b.n	14402 <__lshift+0x46>
   1446a:	nop

0001446c <__mcmp>:
   1446c:	ldr	r2, [r0, #16]
   1446e:	ldr	r3, [r1, #16]
   14470:	subs	r2, r2, r3
   14472:	bne.n	1449c <__mcmp+0x30>
   14474:	lsls	r3, r3, #2
   14476:	adds	r0, #20
   14478:	adds	r1, #20
   1447a:	add	r1, r3
   1447c:	push	{r4}
   1447e:	add	r3, r0
   14480:	b.n	14486 <__mcmp+0x1a>
   14482:	cmp	r0, r3
   14484:	bcs.n	144a0 <__mcmp+0x34>
   14486:	ldr.w	r4, [r3, #-4]!
   1448a:	ldr.w	r2, [r1, #-4]!
   1448e:	cmp	r4, r2
   14490:	beq.n	14482 <__mcmp+0x16>
   14492:	bcc.n	144a8 <__mcmp+0x3c>
   14494:	movs	r0, #1
   14496:	ldr.w	r4, [sp], #4
   1449a:	bx	lr
   1449c:	mov	r0, r2
   1449e:	bx	lr
   144a0:	movs	r0, #0
   144a2:	ldr.w	r4, [sp], #4
   144a6:	bx	lr
   144a8:	mov.w	r0, #4294967295
   144ac:	b.n	14496 <__mcmp+0x2a>
   144ae:	nop

000144b0 <__mdiff>:
   144b0:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   144b4:	ldr	r3, [r1, #16]
   144b6:	mov	r7, r1
   144b8:	ldr	r1, [r2, #16]
   144ba:	subs	r3, r3, r1
   144bc:	cmp	r3, #0
   144be:	mov	r8, r2
   144c0:	bne.n	144f2 <__mdiff+0x42>
   144c2:	lsls	r1, r1, #2
   144c4:	add.w	r2, r7, #20
   144c8:	add.w	r5, r8, #20
   144cc:	adds	r3, r2, r1
   144ce:	add	r1, r5
   144d0:	b.n	144d6 <__mdiff+0x26>
   144d2:	cmp	r2, r3
   144d4:	bcs.n	14594 <__mdiff+0xe4>
   144d6:	ldr.w	r6, [r3, #-4]!
   144da:	ldr.w	r4, [r1, #-4]!
   144de:	cmp	r6, r4
   144e0:	beq.n	144d2 <__mdiff+0x22>
   144e2:	bcs.n	145a6 <__mdiff+0xf6>
   144e4:	mov	r3, r7
   144e6:	mov	r4, r2
   144e8:	mov	r7, r8
   144ea:	mov.w	r9, #1
   144ee:	mov	r8, r3
   144f0:	b.n	14500 <__mdiff+0x50>
   144f2:	blt.n	145b0 <__mdiff+0x100>
   144f4:	add.w	r5, r7, #20
   144f8:	add.w	r4, r2, #20
   144fc:	mov.w	r9, #0
   14500:	ldr	r1, [r7, #4]
   14502:	bl	1405c <_Balloc>
   14506:	ldr.w	r3, [r8, #16]
   1450a:	ldr	r6, [r7, #16]
   1450c:	str.w	r9, [r0, #12]
   14510:	add.w	ip, r4, r3, lsl #2
   14514:	mov	lr, r4
   14516:	add.w	r7, r5, r6, lsl #2
   1451a:	add.w	r4, r0, #20
   1451e:	movs	r3, #0
   14520:	ldr.w	r1, [lr], #4
   14524:	ldr.w	r8, [r5], #4
   14528:	uxth	r2, r1
   1452a:	uxtah	r3, r3, r8
   1452e:	lsrs	r1, r1, #16
   14530:	subs	r2, r3, r2
   14532:	rsb	r3, r1, r8, lsr #16
   14536:	add.w	r3, r3, r2, asr #16
   1453a:	uxth	r2, r2
   1453c:	orr.w	r2, r2, r3, lsl #16
   14540:	cmp	ip, lr
   14542:	str.w	r2, [r4], #4
   14546:	mov.w	r3, r3, asr #16
   1454a:	bhi.n	14520 <__mdiff+0x70>
   1454c:	cmp	r7, r5
   1454e:	bls.n	14580 <__mdiff+0xd0>
   14550:	mov	ip, r4
   14552:	mov	r1, r5
   14554:	ldr.w	lr, [r1], #4
   14558:	uxtah	r2, r3, lr
   1455c:	asrs	r3, r2, #16
   1455e:	add.w	r3, r3, lr, lsr #16
   14562:	uxth	r2, r2
   14564:	orr.w	r2, r2, r3, lsl #16
   14568:	cmp	r7, r1
   1456a:	str.w	r2, [ip], #4
   1456e:	mov.w	r3, r3, asr #16
   14572:	bhi.n	14554 <__mdiff+0xa4>
   14574:	mvns	r5, r5
   14576:	add	r5, r7
   14578:	bic.w	r5, r5, #3
   1457c:	adds	r5, #4
   1457e:	add	r4, r5
   14580:	subs	r4, #4
   14582:	cbnz	r2, 1458e <__mdiff+0xde>
   14584:	ldr.w	r3, [r4, #-4]!
   14588:	subs	r6, #1
   1458a:	cmp	r3, #0
   1458c:	beq.n	14584 <__mdiff+0xd4>
   1458e:	str	r6, [r0, #16]
   14590:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   14594:	movs	r1, #0
   14596:	bl	1405c <_Balloc>
   1459a:	movs	r2, #1
   1459c:	movs	r3, #0
   1459e:	str	r2, [r0, #16]
   145a0:	str	r3, [r0, #20]
   145a2:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   145a6:	mov	r4, r5
   145a8:	mov.w	r9, #0
   145ac:	mov	r5, r2
   145ae:	b.n	14500 <__mdiff+0x50>
   145b0:	mov	r3, r7
   145b2:	add.w	r4, r7, #20
   145b6:	add.w	r5, r8, #20
   145ba:	mov	r7, r8
   145bc:	mov.w	r9, #1
   145c0:	mov	r8, r3
   145c2:	b.n	14500 <__mdiff+0x50>

000145c4 <__d2b>:
   145c4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   145c8:	vmov	r6, r7, d0
   145cc:	sub	sp, #12
   145ce:	mov	r8, r1
   145d0:	movs	r1, #1
   145d2:	mov	r4, r7
   145d4:	ubfx	r5, r7, #20, #11
   145d8:	mov	r7, r2
   145da:	bl	1405c <_Balloc>
   145de:	ubfx	r4, r4, #0, #20
   145e2:	mov	r9, r0
   145e4:	cbz	r5, 145ea <__d2b+0x26>
   145e6:	orr.w	r4, r4, #1048576	; 0x100000
   145ea:	str	r4, [sp, #4]
   145ec:	cbz	r6, 14636 <__d2b+0x72>
   145ee:	add	r0, sp, #8
   145f0:	str.w	r6, [r0, #-8]!
   145f4:	bl	1417c <__lo0bits>
   145f8:	cmp	r0, #0
   145fa:	bne.n	14666 <__d2b+0xa2>
   145fc:	ldmia.w	sp, {r2, r3}
   14600:	str.w	r2, [r9, #20]
   14604:	cmp	r3, #0
   14606:	ite	eq
   14608:	moveq	r1, #1
   1460a:	movne	r1, #2
   1460c:	str.w	r3, [r9, #24]
   14610:	str.w	r1, [r9, #16]
   14614:	cbnz	r5, 1464e <__d2b+0x8a>
   14616:	add.w	r3, r9, r1, lsl #2
   1461a:	subw	r0, r0, #1074	; 0x432
   1461e:	str.w	r0, [r8]
   14622:	ldr	r0, [r3, #16]
   14624:	bl	1413c <__hi0bits>
   14628:	rsb	r0, r0, r1, lsl #5
   1462c:	str	r0, [r7, #0]
   1462e:	mov	r0, r9
   14630:	add	sp, #12
   14632:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   14636:	add	r0, sp, #4
   14638:	bl	1417c <__lo0bits>
   1463c:	ldr	r3, [sp, #4]
   1463e:	str.w	r3, [r9, #20]
   14642:	movs	r1, #1
   14644:	adds	r0, #32
   14646:	str.w	r1, [r9, #16]
   1464a:	cmp	r5, #0
   1464c:	beq.n	14616 <__d2b+0x52>
   1464e:	subw	r5, r5, #1075	; 0x433
   14652:	add	r5, r0
   14654:	rsb	r0, r0, #53	; 0x35
   14658:	str.w	r5, [r8]
   1465c:	str	r0, [r7, #0]
   1465e:	mov	r0, r9
   14660:	add	sp, #12
   14662:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   14666:	ldmia.w	sp, {r2, r3}
   1466a:	rsb	r1, r0, #32
   1466e:	lsl.w	r1, r3, r1
   14672:	orrs	r2, r1
   14674:	lsrs	r3, r0
   14676:	str	r3, [sp, #4]
   14678:	str.w	r2, [r9, #20]
   1467c:	b.n	14604 <__d2b+0x40>
   1467e:	nop

00014680 <__ssprint_r>:
   14680:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14684:	ldr	r3, [r2, #8]
   14686:	sub	sp, #12
   14688:	mov	r8, r2
   1468a:	cmp	r3, #0
   1468c:	beq.n	14774 <__ssprint_r+0xf4>
   1468e:	mov	fp, r0
   14690:	mov.w	r9, #0
   14694:	ldr	r6, [r2, #0]
   14696:	ldr	r0, [r1, #0]
   14698:	ldr	r3, [r1, #8]
   1469a:	mov	r5, r1
   1469c:	mov	r4, r9
   1469e:	cmp	r4, #0
   146a0:	beq.n	1472e <__ssprint_r+0xae>
   146a2:	cmp	r4, r3
   146a4:	mov	r7, r3
   146a6:	mov	sl, r3
   146a8:	bcc.n	14738 <__ssprint_r+0xb8>
   146aa:	ldrh	r3, [r5, #12]
   146ac:	tst.w	r3, #1152	; 0x480
   146b0:	beq.n	1470e <__ssprint_r+0x8e>
   146b2:	ldr	r7, [r5, #20]
   146b4:	ldr	r1, [r5, #16]
   146b6:	add.w	r7, r7, r7, lsl #1
   146ba:	rsb	sl, r1, r0
   146be:	add.w	r7, r7, r7, lsr #31
   146c2:	adds	r0, r4, #1
   146c4:	asrs	r7, r7, #1
   146c6:	add	r0, sl
   146c8:	cmp	r0, r7
   146ca:	mov	r2, r7
   146cc:	itt	hi
   146ce:	movhi	r7, r0
   146d0:	movhi	r2, r7
   146d2:	lsls	r3, r3, #21
   146d4:	bpl.n	1473e <__ssprint_r+0xbe>
   146d6:	mov	r1, r2
   146d8:	mov	r0, fp
   146da:	bl	10610 <_malloc_r>
   146de:	cmp	r0, #0
   146e0:	beq.n	14752 <__ssprint_r+0xd2>
   146e2:	mov	r2, sl
   146e4:	ldr	r1, [r5, #16]
   146e6:	str	r0, [sp, #4]
   146e8:	bl	d064 <memcpy>
   146ec:	ldrh	r2, [r5, #12]
   146ee:	ldr	r3, [sp, #4]
   146f0:	bic.w	r2, r2, #1152	; 0x480
   146f4:	orr.w	r2, r2, #128	; 0x80
   146f8:	strh	r2, [r5, #12]
   146fa:	rsb	r2, sl, r7
   146fe:	add.w	r0, r3, sl
   14702:	str	r7, [r5, #20]
   14704:	str	r3, [r5, #16]
   14706:	str	r0, [r5, #0]
   14708:	str	r2, [r5, #8]
   1470a:	mov	r7, r4
   1470c:	mov	sl, r4
   1470e:	mov	r2, sl
   14710:	mov	r1, r9
   14712:	bl	10cb4 <memmove>
   14716:	ldr.w	r2, [r8, #8]
   1471a:	ldr	r3, [r5, #8]
   1471c:	ldr	r0, [r5, #0]
   1471e:	subs	r3, r3, r7
   14720:	add	r0, sl
   14722:	subs	r4, r2, r4
   14724:	str	r3, [r5, #8]
   14726:	str	r0, [r5, #0]
   14728:	str.w	r4, [r8, #8]
   1472c:	cbz	r4, 14774 <__ssprint_r+0xf4>
   1472e:	ldr.w	r9, [r6]
   14732:	ldr	r4, [r6, #4]
   14734:	adds	r6, #8
   14736:	b.n	1469e <__ssprint_r+0x1e>
   14738:	mov	r7, r4
   1473a:	mov	sl, r4
   1473c:	b.n	1470e <__ssprint_r+0x8e>
   1473e:	mov	r0, fp
   14740:	bl	10e20 <_realloc_r>
   14744:	mov	r3, r0
   14746:	cmp	r0, #0
   14748:	bne.n	146fa <__ssprint_r+0x7a>
   1474a:	ldr	r1, [r5, #16]
   1474c:	mov	r0, fp
   1474e:	bl	13e70 <_free_r>
   14752:	movs	r3, #12
   14754:	str.w	r3, [fp]
   14758:	ldrh	r3, [r5, #12]
   1475a:	movs	r2, #0
   1475c:	orr.w	r3, r3, #64	; 0x40
   14760:	mov.w	r0, #4294967295
   14764:	strh	r3, [r5, #12]
   14766:	str.w	r2, [r8, #8]
   1476a:	str.w	r2, [r8, #4]
   1476e:	add	sp, #12
   14770:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14774:	movs	r0, #0
   14776:	str.w	r0, [r8, #4]
   1477a:	add	sp, #12
   1477c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00014780 <_vasnprintf_r>:
   14780:	push	{r4, r5, r6, lr}
   14782:	mov	r5, r2
   14784:	sub	sp, #104	; 0x68
   14786:	ldr	r4, [r2, #0]
   14788:	cbz	r1, 1478e <_vasnprintf_r+0xe>
   1478a:	cmp	r4, #0
   1478c:	bne.n	147c4 <_vasnprintf_r+0x44>
   1478e:	movs	r4, #0
   14790:	mov.w	r2, #648	; 0x288
   14794:	strh.w	r2, [sp, #12]
   14798:	str	r4, [sp, #0]
   1479a:	str	r4, [sp, #16]
   1479c:	mov	r2, r3
   1479e:	movw	r6, #65535	; 0xffff
   147a2:	ldr	r3, [sp, #120]	; 0x78
   147a4:	str	r4, [sp, #8]
   147a6:	mov	r1, sp
   147a8:	str	r4, [sp, #20]
   147aa:	strh.w	r6, [sp, #14]
   147ae:	bl	11540 <_svfprintf_r>
   147b2:	cmp	r0, #0
   147b4:	blt.n	147da <_vasnprintf_r+0x5a>
   147b6:	ldr	r3, [sp, #0]
   147b8:	str	r0, [r5, #0]
   147ba:	movs	r2, #0
   147bc:	strb	r2, [r3, #0]
   147be:	ldr	r0, [sp, #16]
   147c0:	add	sp, #104	; 0x68
   147c2:	pop	{r4, r5, r6, pc}
   147c4:	mov.w	r2, #1544	; 0x608
   147c8:	str	r1, [sp, #0]
   147ca:	str	r1, [sp, #16]
   147cc:	strh.w	r2, [sp, #12]
   147d0:	bge.n	1479c <_vasnprintf_r+0x1c>
   147d2:	movs	r3, #139	; 0x8b
   147d4:	str	r3, [r0, #0]
   147d6:	movs	r0, #0
   147d8:	b.n	147c0 <_vasnprintf_r+0x40>
   147da:	movs	r0, #0
   147dc:	b.n	147c0 <_vasnprintf_r+0x40>
   147de:	nop

000147e0 <_calloc_r>:
   147e0:	push	{r4, lr}
   147e2:	mul.w	r1, r2, r1
   147e6:	bl	10610 <_malloc_r>
   147ea:	mov	r4, r0
   147ec:	cbz	r0, 14826 <_calloc_r+0x46>
   147ee:	ldr.w	r2, [r0, #-4]
   147f2:	bic.w	r2, r2, #3
   147f6:	subs	r2, #4
   147f8:	cmp	r2, #36	; 0x24
   147fa:	bhi.n	1482e <_calloc_r+0x4e>
   147fc:	cmp	r2, #19
   147fe:	bls.n	1482a <_calloc_r+0x4a>
   14800:	movs	r3, #0
   14802:	cmp	r2, #27
   14804:	str	r3, [r0, #0]
   14806:	str	r3, [r0, #4]
   14808:	bls.n	14838 <_calloc_r+0x58>
   1480a:	cmp	r2, #36	; 0x24
   1480c:	str	r3, [r0, #8]
   1480e:	str	r3, [r0, #12]
   14810:	iteee	ne
   14812:	addne.w	r2, r0, #16
   14816:	streq	r3, [r0, #16]
   14818:	streq	r3, [r0, #20]
   1481a:	addeq.w	r2, r0, #24
   1481e:	movs	r3, #0
   14820:	str	r3, [r2, #0]
   14822:	str	r3, [r2, #4]
   14824:	str	r3, [r2, #8]
   14826:	mov	r0, r4
   14828:	pop	{r4, pc}
   1482a:	mov	r2, r0
   1482c:	b.n	1481e <_calloc_r+0x3e>
   1482e:	movs	r1, #0
   14830:	bl	10d7c <memset>
   14834:	mov	r0, r4
   14836:	pop	{r4, pc}
   14838:	add.w	r2, r0, #8
   1483c:	b.n	1481e <_calloc_r+0x3e>
   1483e:	nop

00014840 <___init_veneer>:
   14840:	ldr.w	pc, [pc]	; 14844 <___init_veneer+0x4>
   14844:	.word	0x60001b4d
	...

Disassembly of section .fini:

00014850 <_fini>:
   14850:	push	{r3, r4, r5, r6, r7, lr}
   14852:	nop

Disassembly of section .text.csf:

60017a2c <hab_csf>:
	...
