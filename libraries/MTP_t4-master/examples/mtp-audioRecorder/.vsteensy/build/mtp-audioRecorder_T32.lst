
.vsteensy/build/mtp-audioRecorder_T32.elf:     file format elf32-littlearm

SYMBOL TABLE:
00000000 l    d  .text	00000000 .text
00014b8c l    d  .fini	00000000 .fini
00014b90 l    d  .ARM.exidx	00000000 .ARM.exidx
1fff8000 l    d  .usbdescriptortable	00000000 .usbdescriptortable
1fff8200 l    d  .dmabuffers	00000000 .dmabuffers
1fff83bc l    d  .usbbuffers	00000000 .usbbuffers
1fff8960 l    d  .data	00000000 .data
1fff9710 l    d  .bss	00000000 .bss
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 mk20dx128.c
0000d0ac l     F .text	0000000c startup_default_early_hook
0000d0b8 l     F .text	00000002 startup_default_late_hook
00000000 l    df *ABS*	00000000 crtstuff.c
00000410 l     F .text	00000000 __do_global_dtors_aux
1fff9710 l       .bss	00000000 completed.8603
00000434 l     F .text	00000000 frame_dummy
1fff9714 l       .bss	00000000 object.8608
00014b40 l     O .text	00000000 __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000 mtp-audioRecorder.ino
000005c8 l     F .text	00000002 __tcf_0
00000878 l     F .text	00000074 logg(unsigned long, char const*) [clone .part.55]
00001b60 l     F .text	00000120 _GLOBAL__sub_I_audioShield
1fffb940 l     O .bss	00000400 acq_rx_buffer
1fffbe44 l     O .bss	00000002 front_
1fffbe48 l     O .bss	00000800 tdm_rx_buffer
1fff8a48 l     O .data	00000014 mfile
20002b06 l     O .bss	00000002 rear_
20002b1c l     O .bss	00000004 check_filing(short)::to
20002b20 l     O .bss	00000004 logg(unsigned long, char const*)::to
00000000 l    df *ABS*	00000000 Storage.cpp
00002078 l     F .text	000000a0 File::invalidate() [clone .isra.1]
0000260c l     F .text	00000084 MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.6] [clone .constprop.14]
00003a94 l     F .text	00000036 MTPStorage_SD::ScanAll(unsigned long) [clone .part.7] [clone .constprop.12]
00003acc l     F .text	00000030 MTPStorage_SD::StartGetObjectHandles(unsigned long, unsigned long) [clone .part.8] [clone .constprop.13]
000042f8 l     F .text	000000b2 MTPStorage_SD::DeleteObject(unsigned long) [clone .part.9] [clone .constprop.11]
00004ea8 l     F .text	00000a4c mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]
00000000 l    df *ABS*	00000000 MTP.cpp
00005b48 l     F .text	00000064 MTPD::write(char const*, int) [clone .part.2]
00005c54 l     F .text	000000bc MTPD::GetDevicePropDesc(unsigned long) [clone .part.4]
00006e54 l     F .text	0000002c MTPD::setObjectPropValue(unsigned long, unsigned long) [clone .part.6]
000144c4 l     O .text	00000028 supported_op
000144ec l     O .text	00000010 propertyList
00014548 l     O .text	00000008 supported_events
00000000 l    df *ABS*	00000000 SPI.cpp
00007740 l     F .text	000001f8 SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]
00000000 l    df *ABS*	00000000 Time.cpp
00007e48 l     F .text	00000018 refreshCache(long) [clone .part.0]
20002b2c l     O .bss	00000004 cacheTime
20002b30 l     O .bss	00000007 tm
20002b38 l     O .bss	00000004 sysTime
20002b3c l     O .bss	00000001 Status
20002b44 l     O .bss	00000004 prevMillis
1fff8a98 l     O .data	00000004 syncInterval
00014654 l     O .text	0000000c monthDays
20002b48 l     O .bss	00000004 nextSyncTime
00000000 l    df *ABS*	00000000 output_pwm.cpp
00007fe0 l     F .text	00000018 _GLOBAL__sub_I__ZN14AudioOutputPWM21update_responsibilityE
00000000 l    df *ABS*	00000000 input_i2s.cpp
00007ff8 l     F .text	00000018 _GLOBAL__sub_I__ZN13AudioInputI2S10block_leftE
00000000 l    df *ABS*	00000000 output_pt8211.cpp
00008010 l     F .text	00000018 _GLOBAL__sub_I__ZN17AudioOutputPT821114block_left_1stE
00000000 l    df *ABS*	00000000 output_adat.cpp
00008028 l     F .text	00000018 _GLOBAL__sub_I__ZN15AudioOutputADAT13block_ch1_1stE
00000000 l    df *ABS*	00000000 input_adc.cpp
00008040 l     F .text	00000018 _GLOBAL__sub_I__ZN16AudioInputAnalog10block_leftE
00000000 l    df *ABS*	00000000 control_sgtl5000.cpp
00000000 l    df *ABS*	00000000 output_dac.cpp
000084a0 l     F .text	00000018 _GLOBAL__sub_I__ZN17AudioOutputAnalog14block_left_1stE
00000000 l    df *ABS*	00000000 input_adcs.cpp
000084b8 l     F .text	00000030 _GLOBAL__sub_I__ZN22AudioInputAnalogStereo10block_leftE
00000000 l    df *ABS*	00000000 input_i2s_quad.cpp
000084e8 l     F .text	00000018 _GLOBAL__sub_I__ZN17AudioInputI2SQuad9block_ch1E
00000000 l    df *ABS*	00000000 output_i2s_quad.cpp
00008500 l     F .text	00000018 _GLOBAL__sub_I__ZN18AudioOutputI2SQuad13block_ch1_1stE
00000000 l    df *ABS*	00000000 input_i2s_oct.cpp
00008518 l     F .text	00000018 _GLOBAL__sub_I__ZN16AudioInputI2SOct9block_ch1E
00000000 l    df *ABS*	00000000 output_tdm.cpp
00008530 l     F .text	00000018 _GLOBAL__sub_I__ZN14AudioOutputTDM11block_inputE
00000000 l    df *ABS*	00000000 input_tdm.cpp
00008548 l     F .text	00000018 _GLOBAL__sub_I__ZN13AudioInputTDM14block_incomingE
00000000 l    df *ABS*	00000000 input_i2s_hex.cpp
00008560 l     F .text	00000018 _GLOBAL__sub_I__ZN16AudioInputI2SHex9block_ch1E
00000000 l    df *ABS*	00000000 input_pdm.cpp
00008578 l     F .text	00000018 _GLOBAL__sub_I__ZN13AudioInputPDM10block_leftE
00000000 l    df *ABS*	00000000 output_i2s.cpp
00008590 l     F .text	00000018 _GLOBAL__sub_I__ZN14AudioOutputI2S14block_left_1stE
00000000 l    df *ABS*	00000000 output_spdif.cpp
000085a8 l     F .text	00000018 _GLOBAL__sub_I__ZN16AudioOutputSPDIF14block_left_1stE
00000000 l    df *ABS*	00000000 WireKinetis.cpp
00008916 l       .text	00000000 L_1480_delayMicroseconds
00008924 l       .text	00000000 L_1494_delayMicroseconds
0000896a l       .text	00000000 L_1545_delayMicroseconds
00008c9e l       .text	00000000 L_3073_delayMicroseconds
20002bd4 l     O .bss	00000001 TwoWire::isr()::receiving
00000000 l    df *ABS*	00000000 FsCache.cpp
00008cd4 l     F .text	00000060 FsCache::sync() [clone .part.0]
00000000 l    df *ABS*	00000000 ExFatFile.cpp
00000000 l    df *ABS*	00000000 ExFatPartition.cpp
00009754 l     F .text	00000034 ExFatPartition::fatGet(unsigned long, unsigned long*) [clone .part.3]
00009788 l     F .text	0000002a ExFatPartition::fatPut(unsigned long, unsigned long) [clone .part.4]
00000000 l    df *ABS*	00000000 upcase.cpp
00000000 l    df *ABS*	00000000 ExFatFileWrite.cpp
00000000 l    df *ABS*	00000000 FatFile.cpp
0000a60c l     F .text	00000032 FatFile::openRoot(FatVolume*) [clone .part.37]
0000a738 l     F .text	00000094 FatFile::sync() [clone .part.41]
00000000 l    df *ABS*	00000000 FatPartition.cpp
00000000 l    df *ABS*	00000000 FatFileLFN.cpp
0000b718 l     F .text	00000028 lfnGetChar(DirLfn_t*, unsigned char)
00000000 l    df *ABS*	00000000 FatFileSFN.cpp
00000000 l    df *ABS*	00000000 FsFile.cpp
00000000 l    df *ABS*	00000000 FsVolume.cpp
00000000 l    df *ABS*	00000000 FsNew.cpp
00000000 l    df *ABS*	00000000 SdSpiCard.cpp
0000c324 l     F .text	00000016 SdSpiCard::spiStart() [clone .part.7]
0000c33c l     F .text	00000020 SdSpiCard::spiStop() [clone .part.8]
00000000 l    df *ABS*	00000000 SdSpiTeensy3.cpp
00000000 l    df *ABS*	00000000 SdSpiChipSelect.cpp
00000000 l    df *ABS*	00000000 SD.cpp
0000cab8 l     F .text	00000048 _GLOBAL__sub_I_SD
00000000 l    df *ABS*	00000000 memcpy-armv7m.o
00000000 l    df *ABS*	00000000 usb_serial.c
20003091 l     O .bss	00000001 tx_noautoflush
20003094 l     O .bss	00000004 tx_packet
20003098 l     O .bss	00000001 transmit_previous_timeout
2000309c l     O .bss	00000004 rx_packet
00000000 l    df *ABS*	00000000 analog.c
200030a1 l     O .bss	00000001 calibrating
1fff8b74 l     O .data	00000001 analog_config_bits
200030a2 l     O .bss	00000001 analog_reference_internal
1fff8b75 l     O .data	00000001 analog_num_average
00000000 l    df *ABS*	00000000 usb_desc.c
1fff8b7c l     O .data	00000012 device_descriptor
1fff8ba8 l     O .data	00000069 config_descriptor
00000000 l    df *ABS*	00000000 nonstd.c
00000000 l    df *ABS*	00000000 pins_teensy.c
0000d52c l     F .text	00000002 dummy_isr
1fff8960 l     F .data	0000002c port_E_isr
1fff898c l     F .data	0000002c port_D_isr
1fff89b8 l     F .data	0000002c port_C_isr
1fff89e4 l     F .data	0000002c port_B_isr
1fff8a10 l     F .data	0000002c port_A_isr
0000d530 l     F .text	00000044 digitalWrite.part.1
0000d574 l     F .text	00000078 pinMode.part.2
00000000 l    df *ABS*	00000000 usb_mem.c
1fff8d48 l     O .data	00000004 usb_buffer_available
00000000 l    df *ABS*	00000000 usb_dev.c
200030a8 l     O .bss	00000004 ep0_tx_ptr
200030ac l     O .bss	00000018 rx_last
200030c4 l     O .bss	00000002 ep0_tx_len
200030c8 l     O .bss	00000040 ep0_rx0_buf
20003108 l     O .bss	00000018 rx_first
20003120 l     O .bss	00000001 ep0_tx_data_toggle
20003124 l     O .bss	00000040 ep0_rx1_buf
20003164 l     O .bss	00000018 tx_first
1fff8000 l     O .usbdescriptortable	000000e0 table
2000317c l     O .bss	00000018 tx_last
20003194 l     O .bss	00000008 setup
2000319c l     O .bss	00000001 ep0_tx_bdt_bank
200031a0 l     O .bss	00000008 reply_buffer
200031ac l     O .bss	00000006 tx_state
00000000 l    df *ABS*	00000000 yield.cpp
200031b2 l     O .bss	00000001 yield::running
00000000 l    df *ABS*	00000000 DMAChannel.cpp
00000000 l    df *ABS*	00000000 EventResponder.cpp
00000000 l    df *ABS*	00000000 usb_inst.cpp
00000000 l    df *ABS*	00000000 Print.cpp
00000000 l    df *ABS*	00000000 main.cpp
00000000 l    df *ABS*	00000000 AudioStream.cpp
00000000 l    df *ABS*	00000000 serialEvent.cpp
00000000 l    df *ABS*	00000000 new.cpp
00000000 l    df *ABS*	00000000 wf_fmod.c
00000000 l    df *ABS*	00000000 ef_fmod.c
0001489c l     O .text	00000008 Zero
00000000 l    df *ABS*	00000000 s_matherr.c
00000000 l    df *ABS*	00000000 atexit_arm.cc
00000000 l    df *ABS*	00000000 _arm_addsubdf3.o
00000000 l    df *ABS*	00000000 _arm_muldivdf3.o
00000000 l    df *ABS*	00000000 _arm_cmpdf2.o
00000000 l    df *ABS*	00000000 _arm_unorddf2.o
00000000 l    df *ABS*	00000000 _arm_fixdfsi.o
00000000 l    df *ABS*	00000000 _arm_truncdfsf2.o
00000000 l    df *ABS*	00000000 _arm_addsubsf3.o
00000000 l    df *ABS*	00000000 _arm_muldivsf3.o
00000000 l    df *ABS*	00000000 _arm_cmpsf2.o
00000000 l    df *ABS*	00000000 _arm_unordsf2.o
00000000 l    df *ABS*	00000000 _arm_fixsfsi.o
00000000 l    df *ABS*	00000000 _arm_fixunssfsi.o
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 cxa_atexit.c
00000000 l    df *ABS*	00000000 efgcvt.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 mbtowc_r.c
00000000 l    df *ABS*	00000000 lib_a-memchr.o
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 strcpy.c
00000000 l    df *ABS*	00000000 strlcat.c
00000000 l    df *ABS*	00000000 strlcpy.c
00000000 l    df *ABS*	00000000 lib_a-strlen.o
00000000 l    df *ABS*	00000000 strncmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
000148b8 l     O .text	00000010 zeroes.7256
00014908 l     O .text	00000010 blanks.7255
00000000 l    df *ABS*	00000000 vdprintf.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
0001267c l     F .text	00000014 register_fini
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 dtoa.c
0001269c l     F .text	00000128 quorem
00000000 l    df *ABS*	00000000 ecvtbuf.c
00000000 l    df *ABS*	00000000 fini.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 localeconv.c
00000000 l    df *ABS*	00000000 mprec.c
00014af8 l     O .text	0000000c p05.6085
00000000 l    df *ABS*	00000000 vfprintf.c
00000000 l    df *ABS*	00000000 vasnprintf.c
00000000 l    df *ABS*	00000000 impure.c
1fff8d68 l     O .data	00000428 impure_data
00000000 l    df *ABS*	00000000 locale.c
00000000 l    df *ABS*	00000000 ctype_.c
00000000 l    df *ABS*	00000000 c:/users/zimme/documents/arduino-1.8.15/hardware/tools/arm/bin/../lib/gcc/arm-none-eabi/5.4.1/armv7e-m/crti.o
00000000 l    df *ABS*	00000000 c:/users/zimme/documents/arduino-1.8.15/hardware/tools/arm/bin/../lib/gcc/arm-none-eabi/5.4.1/armv7e-m/crtn.o
00000000 l    df *ABS*	00000000 s_lib_ver.c
00000000 l    df *ABS*	00000000 FsDateTime.cpp
00000000 l    df *ABS*	00000000 ExFatVolume.cpp
00000000 l    df *ABS*	00000000 FatVolume.cpp
00000000 l    df *ABS*	00000000 avr_emulation.cpp
00000000 l    df *ABS*	00000000 HardwareSerial.cpp
00000000 l    df *ABS*	00000000 reent.c
00000000 l    df *ABS*	00000000 
1fff9710 l       .bss	00000000 __bss_start__
20003234 l       .bss	00000000 __bss_end__
00000000 l       *UND*	00000000 software_init_hook
00000000 l       *UND*	00000000 hardware_init_hook
00000000 l       *UND*	00000000 __stack
0000d0a4  w    F .text	00000006 adc0_isr
000024b0 g     F .text	0000015c MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)
000011d0 g     F .text	00000060 pushData(unsigned long*)
0000f3c8 g     F .text	0000002c .hidden __aeabi_dcmpun
0000cd20 g     F .text	0000001c usb_serial_available
0000f38c g     F .text	00000012 .hidden __aeabi_dcmple
00010bc0 g     F .text	000000ba strcpy
0000f2c8 g     F .text	0000007a .hidden __cmpdf2
0000e954 g     F .text	000000bc fmodf
0000e498  w    F .text	000000ec yield
20002b18 g     O .bss	00000004 acq_miss
0000b198 g     F .text	0000021c FatFile::write(void const*, unsigned int)
0000f2c8 g     F .text	0000007a .hidden __eqdf2
0000e7f8 g     F .text	000000ba Print::printNumber64(unsigned long long, unsigned char, unsigned char)
00009228 g     F .text	000003dc ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)
1fffbd40 g     O .bss	00000104 storage
1fff8b90 g     O .data	00000018 usb_string_manufacturer_name_default
20002b28 g     O .bss	00000004 tx_event_packet
0000b120 g     F .text	00000076 FatFile::truncate()
1fff8b08 g     O .data	0000006c Wire1
00001230 g     F .text	00000074 acq_isr()
0000813c g     F .text	0000006c AudioControlSGTL5000::micGain(unsigned int)
00002900 g     F .text	0000003c MTPStorage_SD::GetObjectInfo(unsigned long, char*, unsigned long*, unsigned long*, unsigned short*)
0000ee38 g     F .text	0000005a .hidden __floatdidf
1fff9730 g     O .bss	00000008 dma
0000d05c  w    F .text	00000048 hard_fault_isr
0000d0a4  w    F .text	00000006 dma_ch6_isr
00001710 g     F .text	000000b4 do_logger(unsigned short, short)
20002bd8 g     O .bss	00000004 FsDateTime::callback
0000e7ac g     F .text	00000020 Print::println()
00008700 g     F .text	0000012c TwoWire::isr()
0000d0a4  w    F .text	00000006 uart0_lon_isr
00009128 g     F .text	000000fe ExFatFile::seekSet(unsigned long long)
00013620 g     F .text	000000ec fcvtbuf
0000da68 g     F .text	00000084 usb_rx_memory
000004a8  w    F .text	0000000c File::flush()
00008060 g     F .text	00000084 AudioControlSGTL5000::read(unsigned int)
0000c230 g     F .text	000000c8 FsVolume::begin(SdSpiCard*)
000076a4 g     F .text	00000018 usb_init_events
0000d0a4  w    F .text	00000006 dma_ch8_isr
0001076c g     F .text	00000002 __malloc_unlock
1fff8c68 g     O .data	00000038 isr_table_portA
00000624  w    F .text	000000c0 SDFile::openNextFile(unsigned char)
20002be4 g     O .bss	00000004 FsVolume::m_cwv
0000a9fc g     F .text	000000be FatFile::open(FatFile*, char const*, int)
0000cf7c g     F .text	000000e0 analog_init
0000daec g     F .text	00000084 usb_tx
0000f868 g     F .text	00000136 .hidden __divsf3
0000d0a4  w    F .text	00000006 portcd_isr
0001252c g     F .text	0000004a _vdprintf_r
00007c00 g     F .text	00000090 SPIClass::setSCK(unsigned char)
00014204  w    O .text	00000060 vtable for SDFile
00010604 g     F .text	000000c6 memmove
00003afc g     F .text	00000046 MTPStorage_SD::StartGetObjectHandles(unsigned long, unsigned long)
000139bc g     F .text	0000004c _Balloc
0000d0a4  w    F .text	00000006 can1_rx_warn_isr
000076f4 g     F .text	0000002c MTPD::send_Event(unsigned short)
00001e38  w    F .text	00000004 MTPStorage_SD::get_FSCount()
00014b98 g       .ARM.exidx	00000000 __exidx_end
0000fab8 g     F .text	0000004c .hidden __fixsfsi
0000d0a4  w    F .text	00000006 dma_error_isr
0000b510 g     F .text	0000003c FatPartition::freeChain(unsigned long)
200031c8 g     O .bss	00000001 EventResponder::runningFromYield
0000ca00 g     F .text	0000001a SdSpiArduinoDriver::receive()
0000c504 g     F .text	00000086 SdSpiCard::cardCommand(unsigned char, unsigned long)
20002b04 g     O .bss	00000002 maxCount
00008cbc g     F .text	0000000c i2c0_isr
0000e780 g     F .text	0000002c Print::write(unsigned char const*, unsigned int)
0000f2b8 g     F .text	0000008a .hidden __gtdf2
0000b740 g     F .text	00000022 FatFile::lfnChecksum(unsigned char*)
0000fee8 g     F .text	0000000c __errno
00000c88  w    F .text	00000026 SDFile::isDirectory()
0000d0a4  w    F .text	00000006 portd_isr
0000d0a4  w    F .text	00000006 enet_error_isr
0000148c g     F .text	00000088 makeFilename(char*)
00000e98  w    F .text	00000028 File::~File()
200031b8 g     O .bss	00000004 EventResponder::firstInterrupt
00005ff0 g     F .text	0000006e MTPD::GetObjectHandles(unsigned long, unsigned long)
00008894 g     F .text	0000000c sda_rising_isr1()
0000b5fc g     F .text	0000011a FatPartition::init(SdSpiCard*, unsigned char)
0000c0b0 g     F .text	00000078 FsBaseFile::FsBaseFile(FsBaseFile const&)
0000d0a4  w    F .text	00000006 tpm1_isr
00009be0 g     F .text	00000018 ExFatPartition::rootLength()
0000e770  w    F .text	00000008 usb_serial_class::write(unsigned char const*, unsigned int)
00014758 g     O .text	00000110 digital_pin_to_info_PGM
20003230 g     O .bss	00000004 errno
0000ca1c g     F .text	00000020 SdSpiArduinoDriver::receive(unsigned char*, unsigned int)
0000bca8 g     F .text	00000390 FatFile::open(FatFile*, fname_t*, int)
000099d8 g     F .text	00000012 ExFatPartition::fatGet(unsigned long, unsigned long*)
00014b98 g       .ARM.exidx	00000000 _etext
00007938 g     F .text	00000134 _spi_dma_rxISR0()
1fff9710 g       .bss	00000000 _sbss
0000caa8 g     F .text	00000006 sdCsInit(unsigned char)
0000f354 g     F .text	00000010 .hidden __aeabi_cdcmple
00009b00 g     F .text	000000e0 ExFatPartition::init(SdSpiCard*, unsigned char)
00001e4c g     F .text	0000000c MTPStorage_SD::totalSize(unsigned long)
00004c68 g     F .text	000000fe MTPStorage_SD::copy(unsigned long, unsigned long, unsigned long)
0000f4f0 g     F .text	00000160 .hidden __aeabi_fadd
0000f4ec g     F .text	00000164 .hidden __subsf3
0000d0a4  w    F .text	00000006 porte_isr
00001ab8 g     F .text	000000a8 loop
0000d0a4  w    F .text	00000006 portb_isr
0000d0a4  w    F .text	00000006 spi1_isr
000064dc g     F .text	00000144 MTPD::GetStorageInfo(unsigned long)
0000d0a4  w    F .text	00000006 uart3_status_isr
00008e8c g     F .text	000000c4 ExFatFile::parsePathName(char const*, ExName_t*, char const**)
0000d0a4  w    F .text	00000006 mcm_isr
00008058  w    F .text	00000004 AudioControlSGTL5000::disable()
0000c35c g     F .text	00000088 SdSpiCard::readData(unsigned char*, unsigned int)
0000898c g     F .text	00000114 TwoWire::endTransmission(unsigned char)
200031bc g     O .bss	00000004 EventResponder::lastInterrupt
0000d0a4  w    F .text	00000006 uart1_status_isr
0000c128 g     F .text	00000028 FsBaseFile::close()
0000cb00 g     F .text	000001a6 memcpy
0000d0a4  w    F .text	00000006 randnum_isr
0000f344 g     F .text	00000020 .hidden __aeabi_cdrcmple
0000048c  w    F .text	0000000c File::available()
00003b44 g     F .text	000007b4 MTPStorage_SD::removeFile(unsigned long, char*)
0000327c g     F .text	00000816 MTPStorage_SD::ScanDir(unsigned long, unsigned long)
0000144c g     F .text	00000040 file_writeHeader()
00009a0c g     F .text	00000080 ExFatPartition::freeChain(unsigned long)
00002c04 g     F .text	0000046c MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)
0000ac70 g     F .text	0000002a FatFile::peek()
0000fa78 g     F .text	00000012 .hidden __aeabi_fcmpgt
00010e7c g     F .text	000016b0 _svfprintf_r
0000edc8 g     F .text	00000022 .hidden __floatsidf
000005f4  w    F .text	00000014 SDFile::whoami()
1fff972c  w    O .bss	00000001 SDFile::name()::zeroterm
1fff8cf0 g     O .data	00000030 isr_table_portC
200030a4 g     O .bss	00000004 systick_millis_count
0000f2c0 g     F .text	00000082 .hidden __ltdf2
0000a20c g     F .text	000000aa ExFatFile::rename(ExFatFile*, char const*)
0000d05c  w    F .text	00000048 bus_fault_isr
0000099c  w    F .text	00000044 SDFile::truncate(unsigned long long)
000088a0 g     F .text	000000ec TwoWire::wait_idle()
0000702c g     F .text	00000678 MTPD::loop()
0000d0a4  w    F .text	00000006 watchdog_isr
0000fb44 g     F .text	00000000 .hidden __aeabi_uldivmod
00008cc8 g     F .text	0000000c i2c1_isr
200031a8 g     O .bss	00000001 usb_configuration
0000d0a4  w    F .text	00000006 dma_ch11_isr
00000000  w      *UND*	00000000 __fini_array_end
00001418 g     F .text	00000034 makeHeader(char*)
200031c9 g     O .bss	00000001 SPCRemulation::pinout
00000dbc  w    F .text	00000058 StreamFile<FsBaseFile, unsigned long long>::available()
0000ac9c g     F .text	00000040 FatFile::readDirCache(bool)
0000d0a4  w    F .text	00000006 i2c2_isr
20002b74 g     O .bss	00000008 AudioOutputAnalog::dma
20002b08 g     O .bss	00000004 loop_count
1fff8b90  w    O .data	00000018 usb_string_manufacturer_name
20003224 g     O .bss	0000000c usb_rx_byte_count_data
0000d0a4  w    F .text	00000006 pit1_isr
1fff8c14 g     O .data	00000008 usb_string_mtp
0000ff44 g     F .text	00000010 malloc
0000d0a4  w    F .text	00000006 dma_ch4_isr
0001469c g     O .text	00000020 TwoWire::i2c1_hardware
0000e8c4 g     F .text	00000084 software_isr
000012fc g     F .text	00000078 do_menu(short)
00014180  w    O .text	00000024 vtable for FsFile
0000d0a4  w    F .text	00000006 dma_ch7_isr
000085cc  w    F .text	0000001e TwoWire::read()
00007728  w    F .text	00000018 EventResponder::triggerEvent(int, void*)
0000f658 g     F .text	0000001c .hidden __aeabi_i2f
00014a30 g     O .text	000000c8 __mprec_tens
0000e3e4 g     F .text	000000b4 usb_init
20002b24 g     O .bss	00000004 sessionID_
0000f9a8 g     F .text	00000066 .hidden __lesf2
0000d0a4  w    F .text	00000006 lptmr_isr
00000e14  w    F .text	00000084 SDFile::seek(unsigned long long, int)
200031ec g     O .bss	00000004 __malloc_top_pad
0000d778 g     F .text	00000024 rtc_set
0000c8bc g     F .text	0000006c SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)
0000a2b8 g     F .text	000000e2 ExFatFile::truncate()
1fff8a3c g     O .data	00000000 .hidden __dso_handle
0000eda8 g     F .text	0000001e .hidden __aeabi_ui2d
000139a0 g     F .text	0000001c _localeconv_r
1fff8a44 g     O .data	00000004 sd_str
0000c9c8 g     F .text	00000038 SdSpiArduinoDriver::deactivate()
00013b38 g     F .text	00000012 __i2b
1fff8960 g       .data	00000000 _sdata
0001467c g     O .text	00000020 TwoWire::i2c0_hardware
1fff8a40 g     O .data	00000004 t_on
00000500  w    F .text	0000000c File::operator bool()
0000fb74 g     F .text	000002e2 .hidden __udivmoddi4
00006320 g     F .text	000001bc MTPD::getObjectPropValue(unsigned long, unsigned long)
0000eb24 g     F .text	00000000 .hidden __aeabi_drsub
0000a640 g     F .text	00000034 FatFile::addCluster()
00010b50 g     F .text	00000024 _sbrk_r
00000480  w    F .text	0000000c File::write(void const*, unsigned int)
000001bc g     F .text	000001d8 ResetHandler
0000cca8 g     F .text	00000048 usb_serial_getchar
0000d0a4  w    F .text	00000006 can1_bus_off_isr
0000d0a4  w    F .text	00000006 ftm2_isr
00000950  w    F .text	0000004c SDFile::name()
20003218 g     O .bss	00000008 usb_cdc_line_coding
0000d79c g     F .text	0000000a digitalWrite
200031c0 g     O .bss	00000004 EventResponder::lastYield
0000d0a4  w    F .text	00000006 uart5_status_isr
0000d0a4  w    F .text	00000006 lpuart0_status_isr
00008e64 g     F .text	00000028 ExFatFile::openRoot(ExFatVolume*)
000146e8 g     O .text	00000006 usb_endpoint_config_table
0000d0a4  w    F .text	00000006 dma_ch9_isr
000007f8  w    F .text	00000038 StreamFile<FsBaseFile, unsigned long long>::read()
0000d0a4  w    F .text	00000006 pit2_isr
0000f378 g     F .text	00000012 .hidden __aeabi_dcmplt
00014580 g     O .text	0000005c SPISettings::ctar_clock_table
200031e8 g     O .bss	00000004 __malloc_max_sbrked_mem
00000bec  w    F .text	0000001a SDFile::position()
0000d7a8 g     F .text	0000000a pinMode
0000c4a4 g     F .text	00000042 SdSpiCard::writeStop()
00003070 g     F .text	00000160 MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)
0000d9b4 g     F .text	0000004c usb_free
0000d0a4  w    F .text	00000006 i2c3_isr
0000edec g     F .text	0000003a .hidden __extendsfdf2
0000f0e8 g     F .text	000001d0 .hidden __aeabi_ddiv
0000eb30 g     F .text	00000276 .hidden __adddf3
0000f9b0 g     F .text	0000005e .hidden __nesf2
000062b4 g     F .text	0000006c MTPD::getObjectPropsSupported(unsigned long)
00005bac g     F .text	000000a8 MTPD::writestring(char const*)
0000c470 g     F .text	00000032 SdSpiCard::writeData(unsigned char const*)
00000498  w    F .text	00000010 File::peek()
0000b54c g     F .text	000000b0 FatPartition::freeClusterCount()
00000cb0  w    F .text	000000d0 SDClass::open(char const*, unsigned char)
00014b90 g       .ARM.exidx	00000000 __exidx_start
0000ee94 g     F .text	00000254 .hidden __aeabi_dmul
0000077c  w    F .text	0000000c DMAChannel::~DMAChannel()
0000c828 g     F .text	0000002e SdSpiCard::writeStart(unsigned long)
0000d0a4  w    F .text	00000006 pit0_isr
1fff8d61 g     O .data	00000001 __fdlib_version
200031c4 g     O .bss	00000004 EventResponder::firstYield
000148a4 g     O .text	00000004 _global_impure_ptr
00001e64 g     F .text	00000080 MTPStorage_SD::write(char const*, unsigned long)
0000d0a4  w    F .text	00000006 can1_error_isr
00000844  w    F .text	00000034 StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)
00010770 g     F .text	000003de _realloc_r
00000c24  w    F .text	00000018 SDFile::read(void*, unsigned int)
0000fef4 g     F .text	00000050 __libc_init_array
20003234 g       .bss	00000000 __bss_end
0000d1bc g     F .text	0000036e dtostrf
00000a7c  w    F .text	00000044 SDFile::rewindDirectory()
000085c0  w    F .text	0000000c TwoWire::available()
0000d0a4  w    F .text	00000006 can0_wakeup_isr
00009704 g     F .text	0000000e ExFatFile::open(ExFatVolume*, char const*, int)
00009fe0 g     F .text	000000f6 ExFatFile::addDirCluster()
0000d0a4  w    F .text	00000006 flash_cmd_isr
00004e74 g     F .text	00000034 mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*)
0000c420 g     F .text	0000004e SdSpiCard::writeData(unsigned char, unsigned char const*)
00014b08 g     O .text	00000028 __mprec_bigtens
00008aa0 g     F .text	0000021c TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)
0000e758  w    F .text	00000004 usb_serial_class::clear()
0000eda8 g     F .text	0000001e .hidden __floatunsidf
0000d0a4  w    F .text	00000006 uart2_status_isr
0000d0bc g     F .text	0000002c _sbrk
00013dcc g     F .text	0000003e __mcmp
000043c0 g     F .text	000008a8 mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)
0000d5ec g     F .text	000000f8 attachInterrupt
00014264  w    O .text	00000028 vtable for SDClass
20002ba4 g     O .bss	00000008 AudioOutputTDM::dma
000005b4  w    F .text	00000012 SDFile::operator bool()
1fff8b78 g     O .data	00000004 __brkval
200030a0 g     O .bss	00000001 usb_cdc_line_rtsdtr
00001868 g     F .text	00000214 acq_init(long)
0000cf34 g     F .text	00000048 usb_serial_flush_callback
00014b30 g     F .text	00000000 _init
0000a718 g     F .text	0000001e FatFile::cacheDirEntry(unsigned char)
1fffbe46 g     O .bss	00000002 state
0000d0a4  w    F .text	00000006 svcall_isr
000008ec  w    F .text	00000062 SDClass::remove(char const*)
00000608  w    F .text	0000001c SDFile::close()
0000d0a4  w    F .text	00000006 dma_ch15_isr
00000fcc  w    F .text	0000005c SDFile::~SDFile()
0000f444 g     F .text	0000009e .hidden __aeabi_d2f
00007f60 g     F .text	00000020 day()
0000f4ec g     F .text	00000164 .hidden __aeabi_fsub
000146bc g     O .text	00000024 vtable for TwoWire
0000d0a4  w    F .text	00000006 uart1_error_isr
0001370c g     F .text	00000028 __libc_fini_array
0000d0a4  w    F .text	00000006 usbhs_phy_isr
0000c9a0 g     F .text	00000028 SdSpiArduinoDriver::begin(SdSpiConfig)
20002b7c g     O .bss	00000008 AudioInputAnalogStereo::dma0
20003234 g       .bss	00000000 _ebss
00005d10 g     F .text	00000278 MTPD::WriteDescriptor()
1fff8a5c g     O .data	00000004 propertyListNum
20002b64 g     O .bss	00000008 AudioOutputADAT::dma
00000830  w    F .text	00000014 StreamFile<FsBaseFile, unsigned long long>::flush()
0000fa8c g     F .text	0000002c .hidden __aeabi_fcmpun
00013a9c g     F .text	00000040 __hi0bits
0000fa64 g     F .text	00000012 .hidden __aeabi_fcmpge
0000f3f4 g     F .text	0000004e .hidden __fixdfsi
0000a0d8 g     F .text	0000005a ExFatFile::mkdir(ExFatFile*, ExName_t*)
0000d0a4 g     F .text	00000006 unused_isr
00005f88 g     F .text	00000068 MTPD::WriteStorageIDs()
0000d0a4  w    F .text	00000006 spi0_isr
0000f684 g     F .text	0000007c .hidden __floatdisf
0000d0a4  w    F .text	00000006 dma_ch3_isr
0000cab4  w    F .text	00000002 SDClass::~SDClass()
000058f4 g     F .text	00000214 MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)
0000077c  w    F .text	0000000c DMAChannel::~DMAChannel()
1fff993c g     O .bss	00002000 diskBuffer
1fffc648 g     O .bss	000004a8 sdx
00000e98  w    F .text	00000028 File::~File()
00001028 g     F .text	000001a8 storage_configure()
0000f9a0 g     F .text	0000006e .hidden __gtsf2
00007fa0 g     F .text	00000024 year()
0000e950 g     F .text	00000004 operator delete(void*, unsigned int)
0000d0a4  w    F .text	00000006 flash_error_isr
0000eb30 g     F .text	00000276 .hidden __aeabi_dadd
0000f2c0 g     F .text	00000082 .hidden __ledf2
0000fa50 g     F .text	00000012 .hidden __aeabi_fcmple
0000d0a4  w    F .text	00000006 uart5_error_isr
0000d0a4  w    F .text	00000006 rtc_seconds_isr
000145dc g     O .text	00000078 SPIClass::spi0_hardware
0000d0a4  w    F .text	00000006 pdb_isr
00013c7c g     F .text	000000a0 __pow5mult
0000aeb0 g     F .text	0000005c FatFile::rmdir()
0000ee28 g     F .text	0000006a .hidden __aeabi_ul2d
0000d05c  w    F .text	00000048 usage_fault_isr
0000d0a4  w    F .text	00000006 dac1_isr
00000000 g     O .text	000001bc _VectorsFlash
0000b48c g     F .text	00000082 FatPartition::allocateCluster(unsigned long, unsigned long*)
0000d0a4  w    F .text	00000006 dma_ch14_isr
00000a30  w    F .text	0000004c SDClass::exists(char const*)
0000d6e4 g     F .text	00000088 detachInterrupt
00000000  w      *UND*	00000000 __deregister_frame_info
20003220 g     O .bss	00000004 usb_cdc_line_rtsdtr_millis
0000e748 g     F .text	00000010 systick_isr
0000d0a4  w    F .text	00000006 rtc_alarm_isr
00000520  w    F .text	0000000c File::isDirectory()
0000c038 g     F .text	00000076 FatFile::getSFN(char*)
0000c858 g     F .text	00000064 SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)
200031cc g     O .bss	00000004 AudioStream::first_update
0000d0a4  w    F .text	00000006 dma_ch2_isr
1fff8d50 g     O .data	00000010 Serial
0000d0a4  w    F .text	00000006 ftm1_isr
000004c0  w    F .text	00000012 File::seek(unsigned long long, int)
00014660 g     O .text	0000001c vtable for AudioControlSGTL5000
0000e778  w    F .text	00000006 usb_serial_class::write(unsigned char)
0000c1d0 g     F .text	0000005e FsBaseFile::openNext(FsBaseFile*, int)
0000d0ac  w    F .text	0000000c startup_early_hook
0000c7e0 g     F .text	00000048 SdSpiCard::writeSingle(unsigned long, unsigned char const*)
0000d0a4  w    F .text	00000006 dma_ch13_isr
00009c88 g     F .text	0000008c ExFatFile::addCluster()
0000805c  w    F .text	00000004 AudioControlSGTL5000::inputLevel(float)
000141a4  w    O .text	00000060 vtable for File
0000d0a4  w    F .text	00000006 uart2_error_isr
00000b98  w    F .text	00000052 SDClass::usedSize()
0000ccf0 g     F .text	00000030 usb_serial_peekchar
0000f3b4 g     F .text	00000012 .hidden __aeabi_dcmpgt
00002118 g     F .text	00000002 mtp_yield()
00010500 g     F .text	00000000 memchr
0000b424 g     F .text	00000066 FatPartition::fatPut(unsigned long, unsigned long)
1fff8c50 g     O .data	00000016 usb_string_serial_number_default
0000d05c g     F .text	00000048 fault_isr
000137d0 g     F .text	000001d0 _free_r
00008d34 g     F .text	0000005c FsCache::get(unsigned long, unsigned char)
0000f3a0 g     F .text	00000012 .hidden __aeabi_dcmpge
0000d0a4  w    F .text	00000006 usb_charge_isr
00004d68 g     F .text	0000010a MTPStorage_SD::CopyFiles(unsigned long, unsigned long, unsigned long)
0000e768  w    F .text	00000004 usb_serial_class::flush()
0000d0a4  w    F .text	00000006 cmt_isr
0000eb2c g     F .text	0000027a .hidden __aeabi_dsub
0000d0a4  w    F .text	00000006 usbhs_isr
0000a7ec g     F .text	0000014c FatFile::mkdir(FatFile*, fname_t*)
1fff970c g     O .data	00000004 __malloc_sbrk_base
0000e760  w    F .text	00000004 usb_serial_class::read()
0000d0a4  w    F .text	00000006 ftm3_isr
00000564  w    F .text	0000000c File::rewindDirectory()
0000d0a4  w    F .text	00000006 tsi0_isr
0000bacc g     F .text	00000124 FatFile::remove()
0000ee28 g     F .text	0000006a .hidden __floatundidf
0000d0e8  w    F .text	00000002 __cxa_pure_virtual
00013d1c g     F .text	000000ae __lshift
0000a938 g     F .text	000000c2 FatFile::mkdir(FatFile*, char const*, bool)
0000d0a4  w    F .text	00000006 spi2_isr
00009bf8 g     F .text	00000058 exFatCmpName(DirName_t const*, char const*, unsigned int, unsigned int)
20002b84 g     O .bss	00000008 AudioInputAnalogStereo::dma1
0000f658 g     F .text	0000001c .hidden __floatsisf
00013fd8 g     F .text	00000100 __ssprint_r
000140d8 g     F .text	0000005e _vasnprintf_r
0000e948  w    F .text	00000002 serialEvent()
000083b0  w    F .text	0000005c AudioControlSGTL5000::inputSelect(int)
20003121 g     O .bss	00000001 usb_reboot_timer
20002b4c g     O .bss	00000008 AudioOutputPWM::dma
000125d8 g     F .text	000000a4 __register_exitproc
00009604 g     F .text	000000fe ExFatFile::open(ExFatFile*, char const*, int)
00010cd0 g     F .text	0000002a strlcpy
00007fc4 g     F .text	0000001c setSyncProvider(long (*)())
00010ddc g     F .text	000000a0 strncmp
00001514 g     F .text	00000104 checkPath(unsigned short, char*)
0000a134 g     F .text	000000d6 ExFatFile::mkdir(ExFatFile*, char const*, bool)
0000cd3c g     F .text	00000038 usb_serial_flush_input
00009a8c g     F .text	00000072 ExFatPartition::freeClusterCount()
00002af0 g     F .text	00000064 MTPStorage_SD::ConstructFilename(int, char*, int)
00013b4c g     F .text	00000130 __multiply
1fff8d40 g     O .data	00000008 isr_table_portE
1fffb93c g     O .bss	00000004 acq_count
0000ce7c g     F .text	00000018 usb_serial_putchar
00000021 g       *ABS*	00000000 _teensy_model_identifier
0000fab8 g     F .text	0000004c .hidden __aeabi_f2iz
200031f0 g     O .bss	00000028 __malloc_current_mallinfo
00008474  w    F .text	0000002c AudioControlSGTL5000::volume(float)
0000f9b0 g     F .text	0000005e .hidden __eqsf2
00013f20 g     F .text	000000b6 __d2b
200031d4 g     O .bss	0000000c HardwareSerial::s_serials_with_serial_events
0000d0a4  w    F .text	00000006 can0_bus_off_isr
00001e3c  w    F .text	00000008 MTPStorage_SD::get_FSName(unsigned long)
00008db4 g     F .text	000000ae ExFatFile::getName(char*, unsigned int)
000013d4 g     F .text	00000044 printTimestamp(unsigned long)
2000319d g     O .bss	00000001 usb_rx_memory_needed
0000db70 g     F .text	00000874 usb_isr
0000febc g     F .text	0000000c __cxa_atexit
00008f50 g     F .text	000001a6 ExFatFile::read(void*, unsigned int)
0000f868 g     F .text	00000136 .hidden __aeabi_fdiv
0000edc8 g     F .text	00000022 .hidden __aeabi_i2d
00000c3c  w    F .text	00000018 SDFile::peek()
00008d90 g     F .text	0000000e FsCache::sync()
1fff8a60 g     O .data	00000038 SPI
000105a0 g     F .text	00000062 memcmp
00014868  w    O .text	00000028 vtable for usb_serial_class
0000ca3c g     F .text	00000016 SdSpiArduinoDriver::send(unsigned char)
0000d0a4  w    F .text	00000006 uart3_error_isr
00006d24 g     F .text	0000007c MTPD::GetObject(unsigned long)
0000f674 g     F .text	0000008c .hidden __floatundisf
0000cab0 g     F .text	00000004 sdCsWrite(unsigned char, bool)
0000fe58  w    F .text	00000002 .hidden __aeabi_ldiv0
00009de8 g     F .text	0000005a ExFatFile::rmdir()
20002bb4 g     O .bss	00000008 AudioInputI2SHex::dma
0000d0a4  w    F .text	00000006 porta_isr
00006620 g     F .text	000006e6 MTPD::getObjectPropDesc(unsigned long, unsigned long)
0000f0e8 g     F .text	000001d0 .hidden __divdf3
1fff83bc g     O .usbbuffers	000005a0 usb_buffer_memory
0000d0a4  w    F .text	00000006 low_voltage_isr
00001e48 g     F .text	00000004 MTPStorage_SD::has_directories(unsigned long)
1fff9300 g     O .data	00000408 __malloc_av_
0000f650 g     F .text	00000024 .hidden __aeabi_ui2f
0000d0a4  w    F .text	00000006 can0_error_isr
0000d894 g     F .text	000000e0 _init_Teensyduino_internal_
00000d80  w    F .text	00000014 SDFile::flush()
0000ee94 g     F .text	00000254 .hidden __muldf3
0000882c g     F .text	0000005c TwoWire::sda_rising_isr()
0000cedc g     F .text	00000058 usb_serial_flush_output
0000d0a4  w    F .text	00000006 dma_ch12_isr
20002b54 g     O .bss	00000008 AudioInputI2S::dma
00010768 g     F .text	00000002 __malloc_lock
0000ea10 g     F .text	00000104 __ieee754_fmodf
00000000  w      *UND*	00000000 __fini_array_start
0000b880 g     F .text	0000024c FatFile::parsePathName(char const*, fname_t*, char const**)
0000d0a4  w    F .text	00000006 can1_wakeup_isr
000076bc g     F .text	00000038 usb_mtp_sendEvent
1fff8200 g     O .dmabuffers	000001bc _VectorsRam
0000ca54 g     F .text	00000052 SdSpiArduinoDriver::send(unsigned char const*, unsigned int)
0000fe5c g     F .text	0000005e _calloc_r
0000d0a4  w    F .text	00000006 pit3_isr
00007a6c g     F .text	0000007c SPIClass::begin()
00006da0 g     F .text	0000006e MTPD::read(char*, unsigned long)
20002b40 g     O .bss	00000004 getTimePtr
00001374 g     F .text	00000038 file_writeData(void*, unsigned long)
0000f9b0 g     F .text	0000005e .hidden __cmpsf2
1fff8d4c g     O .data	00000001 yield_active_check_flags
0000d0a4  w    F .text	00000006 enet_rx_isr
00009f84 g     F .text	0000005c ExFatFile::sync()
0000acdc g     F .text	000001d2 FatFile::rename(FatFile*, char const*)
0000d0a4  w    F .text	00000006 portc_isr
0000c7a8 g     F .text	00000038 SdSpiCard::readStop()
20002b8c g     O .bss	00000008 AudioInputI2SQuad::dma
000106cc g     F .text	0000009a memset
0000840c g     F .text	00000066 AudioControlSGTL5000::volumeInteger(unsigned int)
0000e8b4 g     F .text	00000010 main
20002bc4 g     O .bss	00000008 AudioOutputI2S::dma
200031e4 g     O .bss	00000004 __malloc_max_total_mem
000097b4 g     F .text	000000b4 ExFatPartition::bitmapFind(unsigned long, unsigned long)
0000f684 g     F .text	0000007c .hidden __aeabi_l2f
00007e60 g     F .text	000000a0 now()
0000a39c g     F .text	00000270 ExFatFile::write(void const*, unsigned int)
0000f9a8 g     F .text	00000066 .hidden __ltsf2
00014404 g     O .text	00000060 vtable for MTPStorage_SD
00006e80 g     F .text	00000132 MTPD::SendObjectInfo(unsigned long, unsigned long)
00010c7c g     F .text	00000052 strlcat
0000d05c  w    F .text	00000048 memmanage_fault_isr
00000788  w    F .text	00000058 SDFile::available()
000004f4  w    F .text	0000000c File::close()
000080e4 g     F .text	00000058 AudioControlSGTL5000::write(unsigned int, unsigned int)
0000eb14 g     F .text	00000004 matherr
0000d0ec g     F .text	00000084 usb_init_serialnumber
00001a7c g     F .text	0000003c acq_check(short)
0000f444 g     F .text	0000009e .hidden __truncdfsf2
00014b8c g       .text	00000000 __init_array_end
000127c8 g     F .text	00000e56 _dtoa_r
0000ff64 g     F .text	00000570 _malloc_r
200031e0 g     O .bss	00000001 HardwareSerial::s_count_serials_with_serial_events
0000d0a4  w    F .text	00000006 debugmonitor_isr
00012590 g     F .text	0000001a __ascii_wctomb
0000c0b0 g     F .text	00000078 FsBaseFile::FsBaseFile(FsBaseFile const&)
0000ee38 g     F .text	0000005a .hidden __aeabi_l2d
20002be0 g     O .bss	00000004 FatVolume::m_cwv
20002b9c g     O .bss	00000008 AudioInputI2SOct::dma
1fff8d20 g     O .data	00000020 isr_table_portD
0000e680 g     F .text	00000080 EventResponder::triggerEventNotImmediate()
00007c90 g     F .text	00000008 SPIClass::transfer(void const*, void*, unsigned int)
60f142d6 g       *ABS*	00000000 __rtc_localtime
000083a4 g     F .text	0000000c AudioControlSGTL5000::enable()
0000d7b4 g     F .text	00000044 micros
00000000  w      *UND*	00000000 __libc_fini
0000052c  w    F .text	00000038 File::openNextFile(unsigned char)
00008888 g     F .text	0000000c sda_rising_isr0()
0000f674 g     F .text	0000008c .hidden __aeabi_ul2f
0000d0a4  w    F .text	00000006 cmp1_isr
0000d0a4  w    F .text	00000006 ftm0_isr
00009e44 g     F .text	00000140 ExFatFile::syncDir()
0000fa18 g     F .text	00000010 .hidden __aeabi_cfcmple
00013734 g     F .text	0000009c _malloc_trim_r
1fff8c4c g     O .data	00000004 string0
0000cd74 g     F .text	00000108 usb_serial_write
0000f700 g     F .text	00000168 .hidden __mulsf3
00001e20  w    F .text	00000018 MTPStorage_SD::addFilesystem(FS&, char const*)
0000d0b8  w    F .text	00000002 startup_late_hook
0000e764  w    F .text	00000004 usb_serial_class::available()
1fff8d60 g     O .data	00000001 _serialEvent_default
00006e10 g     F .text	00000044 MTPD::readstring(char*)
0000b114 g     F .text	0000000c FatFile::sync()
000009e0  w    F .text	00000050 SDClass::mkdir(char const*)
1fff8c1c  w    O .data	0000002e usb_string_product_name
00005b08 g     F .text	00000028 MTPD::GetNumObjects(unsigned long, unsigned long)
0000d7f8 g     F .text	0000009c delay
0000f2c8 g     F .text	0000007a .hidden __nedf2
0000d0a4  w    F .text	00000006 tpm0_isr
200031b4 g     O .bss	00000002 dma_channel_allocated_mask
00001f60 g     F .text	00000118 MTPStorage_SD::CloseIndex()
00014b8c g     F .fini	00000000 _fini
00005b30 g     F .text	00000018 MTPD::get_buffer()
0000050c  w    F .text	00000014 File::name()
00008644 g     F .text	00000026 TwoWire::write(unsigned char)
20002b5c g     O .bss	00000008 AudioOutputPT8211::dma
00007f80 g     F .text	00000020 month()
00014550 g     O .text	0000002e SPISettings::ctar_div_table
0000c778 g     F .text	0000002e SdSpiCard::readStart(unsigned long)
00009714 g     F .text	00000040 ExFatFile::openNext(ExFatFile*, int)
00010b74 g     F .text	0000004c sprintf
0000e7dc g     F .text	0000001c Print::printf(char const*, ...)
0000d0a4  w    F .text	00000006 i2s0_rx_isr
0000d0a4  w    F .text	00000006 uart4_error_isr
0000a7cc g     F .text	0000001e FatFile::close()
000004d4  w    F .text	00000010 File::position()
00000ec0  w    F .text	00000064 SDFile::~SDFile()
00012690 g     F .text	0000000c atexit
0000f9a0 g     F .text	0000006e .hidden __gesf2
000007e0  w    F .text	00000018 StreamFile<FsBaseFile, unsigned long long>::peek()
0000059c  w    F .text	00000018 File::write(unsigned char)
000125ac g     F .text	0000002c _write_r
000017c4 g     F .text	000000a4 Adjust_MCLK(long, long*, long*)
20002be8 g     O .bss	000004a8 SD
0000f4e4 g     F .text	0000016c .hidden __aeabi_frsub
0000d0a4  w    F .text	00000006 can0_message_isr
00007ae8 g     F .text	00000090 SPIClass::setMOSI(unsigned char)
1fff9190 g     O .data	00000004 _impure_ptr
00014138  w    O .text	00000024 vtable for Stream
0000d0a4  w    F .text	00000006 can1_message_isr
0000fa28 g     F .text	00000012 .hidden __aeabi_fcmpeq
000090f8 g     F .text	0000002e ExFatFile::peek()
0001415c  w    O .text	00000024 vtable for StreamFile<FsBaseFile, unsigned long long>
20002bcc g     O .bss	00000008 AudioOutputSPDIF::dma
0000d0a4  w    F .text	00000006 nmi_isr
1fff8a9c g     O .data	0000006c Wire
0000bbf0 g     F .text	000000b6 FatFile::lfnUniqueSfn(fname_t*)
00000da8  w    F .text	00000014 SDFile::write(void const*, unsigned int)
0000f700 g     F .text	00000168 .hidden __aeabi_fmul
0000c2f8 g     F .text	00000028 FsVolume::open(char const*, int)
20002b0c g     O .bss	0000000c audioShield
0000aabc g     F .text	0000000e FatFile::open(FatVolume*, char const*, int)
00000d94  w    F .text	00000014 StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)
00014b3c g       .text	00000000 __preinit_array_end
000006e4 g     F .text	00000098 dateTime(unsigned short*, unsigned short*, unsigned char*)
20002bac g     O .bss	00000008 AudioInputTDM::dma
0000fa10 g     F .text	00000018 .hidden __aeabi_cfrcmple
0000d0a4  w    F .text	00000006 sdhc_isr
00007f20 g     F .text	00000020 minute()
0000994c g     F .text	00000034 ExFatPartition::dirCache(DirPos_t*, unsigned char)
000043ac g     F .text	00000012 MTPStorage_SD::DeleteObject(unsigned long)
000104d4 g     F .text	0000002a __ascii_mbtowc
1fff973c g     O .bss	00000200 header
000085ec  w    F .text	00000016 TwoWire::peek()
00008604  w    F .text	00000002 TwoWire::flush()
00001cd0 g     F .text	00000150 setup
000146f0 g     O .text	00000060 usb_descriptor_list
0000da00 g     F .text	0000003c usb_rx
00001ee4 g     F .text	0000007c MTPStorage_SD::ResetIndex()
0000d0a4  w    F .text	00000006 dma_ch10_isr
00000470  w    F .text	00000002 Print::flush()
0000d0a4  w    F .text	00000006 uart0_error_isr
000004e4  w    F .text	00000010 File::size()
00000b34  w    F .text	00000062 SDClass::rmdir(char const*)
00001618 g     F .text	000000f8 file_open(unsigned short)
0000d974 g     F .text	00000040 usb_malloc
0000aad8 g     F .text	00000198 FatFile::read(void*, unsigned int)
0000fa3c g     F .text	00000012 .hidden __aeabi_fcmplt
00001c80 g     F .text	00000050 chipWrite(unsigned int, unsigned int)
0000d0a4  w    F .text	00000006 i2s0_isr
0000aacc g     F .text	0000000c FatFile::openRoot(FatVolume*)
20002bdc g     O .bss	00000004 ExFatVolume::m_cwv
20008000 g       .bss	00000000 _estack
0000c320 g     F .text	00000004 operator new(unsigned int, unsigned long*)
0000e64c g     F .text	00000034 DMAChannel::release()
00000570  w    F .text	0000002c File::read()
0000ce94 g     F .text	00000048 usb_serial_write_buffer_free
0000c3e4 g     F .text	0000003c SdSpiCard::waitNotBusy(unsigned short)
0000d0a4  w    F .text	00000006 enet_timer_isr
0000f364 g     F .text	00000012 .hidden __aeabi_dcmpeq
20002bbc g     O .bss	00000008 AudioInputPDM::dma
00008608 g     F .text	0000003a TwoWire::write(unsigned char const*, unsigned int)
00000f24  w    F .text	00000030 File::~File()
0000e7cc  w    F .text	0000000e _write
1fff9738 g     O .bss	00000004 maxDel
1fff9710 g       .data	00000000 _edata
000099ec g     F .text	00000020 ExFatPartition::fatPut(unsigned long, unsigned long)
00006060 g     F .text	00000254 MTPD::GetObjectInfo(unsigned long)
0000d0a4  w    F .text	00000006 i2s0_tx_isr
0000d0a4  w    F .text	00000006 adc1_isr
0000fa8c g     F .text	0000002c .hidden __unordsf2
0000c4e8 g     F .text	0000001a SdSpiCard::syncDevice()
0000a674 g     F .text	000000a4 FatFile::addDirCluster()
00000474  w    F .text	0000000c File::read(void*, unsigned int)
0000e76c  w    F .text	00000004 usb_serial_class::availableForWrite()
0000d0a4  w    F .text	00000006 cmp0_isr
000004b4  w    F .text	0000000c File::truncate(unsigned long long)
0000d170 g     F .text	0000004c ultoa
0000fb04 g     F .text	0000003e .hidden __aeabi_f2uiz
0000cab4  w    F .text	00000002 SDClass::~SDClass()
0000c58c g     F .text	000001ec SdSpiCard::begin(SdSpiConfig)
00007f40 g     F .text	00000020 second()
0000866c g     F .text	00000094 TwoWire::begin()
0000c150 g     F .text	00000080 FsBaseFile::open(FsVolume*, char const*, int)
00002690 g     F .text	00000210 MTPStorage_SD::ReadIndexRecord(unsigned long)
0000e94c g     F .text	00000004 operator new(unsigned int)
0000e700 g     F .text	00000044 EventResponder::runFromInterrupt()
1fff9708 g     O .data	00000004 __malloc_trim_threshold
0000e75c  w    F .text	00000004 usb_serial_class::peek()
0000fec8 g     F .text	00000020 fcvtf
000028a0 g     F .text	0000005e MTPStorage_SD::GetNextObjectHandle(unsigned long)
000081a8 g     F .text	000001fc AudioControlSGTL5000::enable(unsigned int, unsigned long)
00000f54  w    F .text	00000078 MTPStorage_SD::~MTPStorage_SD()
0000f650 g     F .text	00000024 .hidden __floatunsisf
20002af0 g     O .bss	00000014 mtpd
00013e0c g     F .text	00000114 __mdiff
0000f3f4 g     F .text	0000004e .hidden __aeabi_d2iz
000031d0 g     F .text	000000aa MTPStorage_SD::Create(unsigned long, unsigned long, bool, char const*)
00009980 g     F .text	00000058 ExFatPartition::dirSeek(DirPos_t*, unsigned long)
20003090 g     O .bss	00000001 usb_cdc_transmit_flush_timer
0000fa18 g     F .text	00000010 .hidden __aeabi_cfcmpeq
200031d2 g     O .bss	00000002 AudioStream::cpu_cycles_total
0000d0a4  w    F .text	00000006 pit_isr
00007f00 g     F .text	00000020 hour()
00008da0 g     F .text	00000014 ExFatFile::close()
00014918 g     O .text	00000101 _ctype_
0000d0a4  w    F .text	00000006 dac0_isr
00014b3c g       .text	00000000 __init_array_start
0000fe58  w    F .text	00000002 .hidden __aeabi_idiv0
0000d0a4  w    F .text	00000006 can1_tx_warn_isr
0000211c g     F .text	00000394 MTPStorage_SD::OpenIndex()
0000f3c8 g     F .text	0000002c .hidden __unorddf2
0000fb04 g     F .text	0000003e .hidden __fixunssfsi
00000ac0  w    F .text	00000074 SDClass::rename(char const*, char const*)
0000d0a4  w    F .text	00000006 uart0_status_isr
0000d0a4  w    F .text	00000006 mcg_isr
00000400 g     O .text	00000010 flashconfigbytes
0000e584 g     F .text	000000c8 DMAChannel::begin(bool)
00010d00 g     F .text	000000dc strlen
0000b764 g     F .text	0000002e FatFile::openCluster(FatFile*)
0000f354 g     F .text	00000010 .hidden __aeabi_cdcmpeq
0000f2b8 g     F .text	0000008a .hidden __gedf2
0000af0c g     F .text	000000b0 FatFile::seekSet(unsigned long)
1fff8c1c g     O .data	0000002e usb_string_product_name_default
20002b94 g     O .bss	00000008 AudioOutputI2SQuad::dma
00012578 g     F .text	00000018 vdprintf
0000d0a4  w    F .text	00000006 dma_ch1_isr
00007720 g     F .text	00000008 MTPD::send_DeviceResetEvent()
0000da3c g     F .text	0000002c usb_tx_packet_count
0000b094 g     F .text	00000080 FatFile::openNext(FatFile*, int)
0000edec g     F .text	0000003a .hidden __aeabi_f2d
0000d0a4  w    F .text	00000006 dma_ch5_isr
00002954 g     F .text	0000019c MTPStorage_SD::close()
0000b794 g     F .text	000000ec FatFile::getName(char*, unsigned int)
0000d0a4  w    F .text	00000006 can0_rx_warn_isr
00000f54  w    F .text	00000078 MTPStorage_SD::~MTPStorage_SD()
00002b54 g     F .text	000000b0 MTPStorage_SD::rename(unsigned long, char const*)
0000d0a4  w    F .text	00000006 can0_tx_warn_isr
0000d0a4  w    F .text	00000006 uart4_status_isr
00000000  w      *UND*	00000000 _Jv_RegisterClasses
20002b6c g     O .bss	00000008 AudioInputAnalog::dma
200031d0 g     O .bss	00000002 AudioStream::cpu_cycles_total_max
0000c928 g     F .text	00000078 SdSpiArduinoDriver::activate()
00001e44 g     F .text	00000004 MTPStorage_SD::readonly(unsigned long)
0000eb2c g     F .text	0000027a .hidden __subdf3
000012a4 g     F .text	00000058 pullData(unsigned long*, unsigned long)
00014b3c g       .text	00000000 __preinit_array_start
00009868 g     F .text	000000a6 ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)
0000293c g     F .text	00000016 MTPStorage_SD::GetSize(unsigned long)
000005cc  w    F .text	00000028 File::whoami()
1fffcaf0 g     O .bss	00006000 data_buffer
00013adc g     F .text	0000005a __lo0bits
00009910 g     F .text	0000003a ExFatPartition::chainSize(unsigned long)
0000afbc g     F .text	000000d6 FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)
0000eb18 g     F .text	0000000a __aeabi_atexit
00006d08 g     F .text	0000001a MTPD::receive_buffer()
00000000  w      *UND*	00000000 __register_frame_info
0000d76c g     F .text	0000000c rtc_get
00009d14 g     F .text	000000d4 ExFatFile::remove()
0000d0a4  w    F .text	00000006 cmp2_isr
0000f4f0 g     F .text	00000160 .hidden __addsf3
0000e744 g     F .text	00000004 pendablesrvreq_isr
00000c54  w    F .text	00000034 SDClass::totalSize()
00006fb4 g     F .text	00000076 MTPD::SendObject()
00001e58 g     F .text	0000000c MTPStorage_SD::usedSize(unsigned long)
0000046c  w    F .text	00000004 Print::availableForWrite()
1fff9194 g     O .data	0000016c __global_locale
1fff8ca0 g     O .data	00000050 isr_table_portB
0000d0a4  w    F .text	00000006 wakeup_isr
00007b78 g     F .text	00000088 SPIClass::setMISO(unsigned char)
000013ac g     F .text	00000028 file_close()
0000d0a4  w    F .text	00000006 cmp3_isr
00007c98 g     F .text	000001b0 breakTime(long, tmElements_t&)
0000b3b4 g     F .text	0000006e FatPartition::fatGet(unsigned long, unsigned long*)
0000ff54 g     F .text	00000010 free
0000d0a4  w    F .text	00000006 tpm2_isr
00013a1c g     F .text	00000080 __multadd
00013a08 g     F .text	00000012 _Bfree
00000c08  w    F .text	0000001a SDFile::size()
0000d0a4  w    F .text	00000006 dma_ch0_isr
00000fcc  w    F .text	0000005c SDFile::~SDFile()
1fff8c50  w    O .data	00000016 usb_string_serial_number
0000d0a4  w    F .text	00000006 enet_tx_isr
00009c50 g     F .text	00000038 exFatHashName(char const*, unsigned int, unsigned short)



Disassembly of section .text:

00000000 <_VectorsFlash>:
  str = fsFmtField(str, 2*(time & 31) + (sec100 < 100 ? 0 : 1), 0);
  *--str = ':';
  return fsFmtTime(str, time);
}
//------------------------------------------------------------------------------
char* fsFmtTimeZone(char* str, int8_t tz) {
       0:	... ........]...
    } else {
      sign = '+';
      tz &= 0X7F;
    }
    if (tz) {
      str = fsFmtField(str, 15*(tz%4), 0);
      10:	]...]...]...]...
//------------------------------------------------------------------------------
static char* fsFmtField(char* str, uint16_t n, char sep) {
  if (sep) {
    *--str = sep;
  }
  str = fmtBase10(str, n);
      20:	]...]...].......
      sign = '+';
      tz &= 0X7F;
    }
    if (tz) {
      str = fsFmtField(str, 15*(tz%4), 0);
      str = fsFmtField(str, tz/4, ':');
      30:	....]...E...I...
  }
}  // namespace FsDateTime
//------------------------------------------------------------------------------
static char* fsFmtField(char* str, uint16_t n, char sep) {
  if (sep) {
    *--str = sep;
      40:	................
  }
  str = fmtBase10(str, n);
  if (n < 10) {
    *--str = '0';
      50:	................
      tz = -tz;
    } else {
      sign = '+';
      tz &= 0X7F;
    }
    if (tz) {
      60:	................
      str = fsFmtField(str, 15*(tz%4), 0);
      str = fsFmtField(str, tz/4, ':');
      *--str = sign;
    }
    *--str = 'C';
    *--str = 'T';
      70:	................
    } else {
      sign = '+';
      tz &= 0X7F;
    }
    if (tz) {
      str = fsFmtField(str, 15*(tz%4), 0);
      80:	................
      90:	................
      a0:	................
      b0:	................
      c0:	................
      d0:	................
      e0:	................
      f0:	................
     100:	................
     110:	................
     120:	................
     130:	................
     140:	................
     150:	................
     160:	....q...........
     170:	................
     180:	................
     190:	................
     1a0:	................
     1b0:	............

000001bc <ResetHandler>:
	volatile int n;
#endif
	//volatile int count;

#ifdef KINETISK
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ1;
     1bc:	ldr	r3, [pc, #344]	; (318 <ResetHandler+0x15c>)
     1be:	movw	r2, #50464	; 0xc520
#else
// hopefully all others fit into startup section (below 0x400)
__attribute__ ((section(".startup"),optimize("-Os")))
#endif
void ResetHandler(void)
{
     1c2:	push	{r4, lr}
	volatile int n;
#endif
	//volatile int count;

#ifdef KINETISK
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ1;
     1c4:	strh	r2, [r3, #0]
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ2;
     1c6:	movw	r2, #55592	; 0xd928
     1ca:	strh	r2, [r3, #0]
	__asm__ volatile ("nop");
     1cc:	nop
	__asm__ volatile ("nop");
     1ce:	nop
#endif
	// programs using the watchdog timer or needing to initialize hardware as
	// early as possible can implement startup_early_hook()
	startup_early_hook();
     1d0:	bl	d0ac <startup_early_hook>
	// enable clocks to always-used peripherals
#if defined(__MK20DX128__)
	SIM_SCGC5 = 0x00043F82;		// clocks active to all GPIO
	SIM_SCGC6 = SIM_SCGC6_RTC | SIM_SCGC6_FTM0 | SIM_SCGC6_FTM1 | SIM_SCGC6_ADC0 | SIM_SCGC6_FTFL;
#elif defined(__MK20DX256__)
	SIM_SCGC3 = SIM_SCGC3_ADC1 | SIM_SCGC3_FTM2;
     1d4:	ldr	r3, [pc, #324]	; (31c <ResetHandler+0x160>)
     1d6:	mov.w	r2, #150994944	; 0x9000000
     1da:	str	r2, [r3, #0]
	SIM_SCGC5 = 0x00043F82;		// clocks active to all GPIO
     1dc:	ldr	r2, [pc, #320]	; (320 <ResetHandler+0x164>)
     1de:	str	r2, [r3, #8]
	SIM_SCGC6 = SIM_SCGC6_RTC | SIM_SCGC6_FTM0 | SIM_SCGC6_FTM1 | SIM_SCGC6_ADC0 | SIM_SCGC6_FTFL;
     1e0:	ldr	r2, [pc, #320]	; (324 <ResetHandler+0x168>)
     1e2:	str	r2, [r3, #12]
#endif
#if defined(KINETISK) && !defined(__MK66FX1M0__)
	// If the RTC oscillator isn't enabled, get it started early.
	// But don't do this early on Teensy 3.6 - RTC_CR depends on 3.3V+VBAT
	// which may be ~0.4V "behind" 3.3V if the power ramps up slowly.
	if (!(RTC_CR & RTC_CR_OSCE)) {
     1e4:	ldr	r2, [pc, #320]	; (328 <ResetHandler+0x16c>)
     1e6:	ldr	r3, [r2, #0]
     1e8:	ands.w	r3, r3, #256	; 0x100
     1ec:	bne.n	1f8 <ResetHandler+0x3c>
		RTC_SR = 0;
     1ee:	ldr	r1, [pc, #316]	; (32c <ResetHandler+0x170>)
     1f0:	str	r3, [r1, #0]
		RTC_CR = RTC_CR_SC16P | RTC_CR_SC4P | RTC_CR_OSCE;
     1f2:	mov.w	r3, #5376	; 0x1500
     1f6:	str	r3, [r2, #0]
	}
#endif
	// release I/O pins hold, if we woke up from VLLS mode
	if (PMC_REGSC & PMC_REGSC_ACKISO) PMC_REGSC |= PMC_REGSC_ACKISO;
     1f8:	ldr	r3, [pc, #308]	; (330 <ResetHandler+0x174>)
     1fa:	ldrb	r2, [r3, #0]
     1fc:	lsls	r1, r2, #28
     1fe:	bpl.n	208 <ResetHandler+0x4c>
     200:	ldrb	r2, [r3, #0]
     202:	orr.w	r2, r2, #8
     206:	strb	r2, [r3, #0]
    // since this is a write once register, make it visible to all F_CPU's
    // so we can into other sleep modes in the future at any speed
#if defined(__MK66FX1M0__)
	SMC_PMPROT = SMC_PMPROT_AHSRUN | SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
#else
	SMC_PMPROT = SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
     208:	ldr	r3, [pc, #296]	; (334 <ResetHandler+0x178>)
#endif
    
	// TODO: do this while the PLL is waiting to lock....
	while (dest < &_edata) *dest++ = *src++;
     20a:	ldr	r1, [pc, #300]	; (338 <ResetHandler+0x17c>)
    // since this is a write once register, make it visible to all F_CPU's
    // so we can into other sleep modes in the future at any speed
#if defined(__MK66FX1M0__)
	SMC_PMPROT = SMC_PMPROT_AHSRUN | SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
#else
	SMC_PMPROT = SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
     20c:	movs	r2, #42	; 0x2a
     20e:	strb	r2, [r3, #0]
     210:	ldr	r2, [pc, #296]	; (33c <ResetHandler+0x180>)
     212:	ldr	r3, [pc, #300]	; (340 <ResetHandler+0x184>)
#endif
    
	// TODO: do this while the PLL is waiting to lock....
	while (dest < &_edata) *dest++ = *src++;
     214:	cmp	r3, r1
     216:	bcs.n	222 <ResetHandler+0x66>
     218:	ldr.w	r0, [r2, #4]!
     21c:	str.w	r0, [r3], #4
     220:	b.n	214 <ResetHandler+0x58>
     222:	ldr	r3, [pc, #288]	; (344 <ResetHandler+0x188>)
	dest = &_sbss;
	while (dest < &_ebss) *dest++ = 0;
     224:	ldr	r1, [pc, #288]	; (348 <ResetHandler+0x18c>)
     226:	movs	r2, #0
     228:	cmp	r3, r1
     22a:	bcs.n	232 <ResetHandler+0x76>
     22c:	str.w	r2, [r3], #4
     230:	b.n	228 <ResetHandler+0x6c>

	// default all interrupts to medium priority level
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = _VectorsFlash[i];
     232:	ldr	r1, [pc, #280]	; (34c <ResetHandler+0x190>)
     234:	ldr	r2, [pc, #280]	; (350 <ResetHandler+0x194>)
     236:	movs	r3, #0
     238:	ldr.w	r0, [r2, r3, lsl #2]
     23c:	str.w	r0, [r1, r3, lsl #2]
     240:	adds	r3, #1
     242:	cmp	r3, #111	; 0x6f
     244:	bne.n	238 <ResetHandler+0x7c>
     246:	ldr	r3, [pc, #268]	; (354 <ResetHandler+0x198>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
     248:	ldr	r2, [pc, #268]	; (358 <ResetHandler+0x19c>)
     24a:	movs	r1, #128	; 0x80
     24c:	strb.w	r1, [r3], #1
     250:	cmp	r3, r2
     252:	bne.n	24c <ResetHandler+0x90>
	SCB_VTOR = (uint32_t)_VectorsRam;	// use vector table in RAM
     254:	ldr	r3, [pc, #260]	; (35c <ResetHandler+0x1a0>)
     256:	ldr	r2, [pc, #244]	; (34c <ResetHandler+0x190>)
     258:	str	r2, [r3, #0]
	//  C6[PLLS] bit is written to 0
	//  C2[LP] bit is written to 1
#else
    #if defined(KINETISK)
    // enable capacitors for crystal
    OSC0_CR = OSC_SC8P | OSC_SC2P | OSC_ERCLKEN;
     25a:	ldr	r3, [pc, #260]	; (360 <ResetHandler+0x1a4>)
     25c:	movs	r2, #138	; 0x8a
     25e:	strb	r2, [r3, #0]
    #elif defined(KINETISL)
    // enable capacitors for crystal
    OSC0_CR = OSC_SC8P | OSC_SC2P | OSC_ERCLKEN;
    #endif
	// enable osc, 8-32 MHz range, low power mode
	MCG_C2 = MCG_C2_RANGE0(2) | MCG_C2_EREFS;
     260:	sub.w	r3, r3, #4096	; 0x1000
     264:	movs	r2, #36	; 0x24
     266:	strb	r2, [r3, #1]
	// switch to crystal as clock source, FLL input = 16 MHz / 512
	MCG_C1 =  MCG_C1_CLKS(2) | MCG_C1_FRDIV(4);
     268:	movs	r2, #160	; 0xa0
     26a:	strb	r2, [r3, #0]
	// wait for crystal oscillator to begin
	while ((MCG_S & MCG_S_OSCINIT0) == 0) ;
     26c:	ldrb	r2, [r3, #6]
     26e:	lsls	r2, r2, #30
     270:	bpl.n	26c <ResetHandler+0xb0>
	// wait for FLL to use oscillator
	while ((MCG_S & MCG_S_IREFST) != 0) ;
     272:	ldrb	r2, [r3, #6]
     274:	lsls	r4, r2, #27
     276:	bmi.n	272 <ResetHandler+0xb6>
	// wait for MCGOUT to use oscillator
	while ((MCG_S & MCG_S_CLKST_MASK) != MCG_S_CLKST(2)) ;
     278:	ldr	r2, [pc, #232]	; (364 <ResetHandler+0x1a8>)
     27a:	ldrb	r3, [r2, #6]
     27c:	and.w	r3, r3, #12
     280:	cmp	r3, #8
     282:	ldr	r3, [pc, #224]	; (364 <ResetHandler+0x1a8>)
     284:	bne.n	27a <ResetHandler+0xbe>
    #endif
   #else
    #if F_CPU == 72000000
	MCG_C5 = MCG_C5_PRDIV0(5);		 // config PLL input for 16 MHz Crystal / 6 = 2.667 Hz
    #else
	MCG_C5 = MCG_C5_PRDIV0(3);		 // config PLL input for 16 MHz Crystal / 4 = 4 MHz
     286:	movs	r2, #3
     288:	strb	r2, [r3, #4]
    #elif F_CPU == 120000000
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(6); // config PLL for 120 MHz output
    #elif F_CPU == 72000000
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(3); // config PLL for 72 MHz output
    #elif F_CPU == 96000000 || F_CPU == 48000000 || F_CPU == 24000000
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(0); // config PLL for 96 MHz output
     28a:	movs	r2, #64	; 0x40
     28c:	strb	r2, [r3, #5]
    #error "This clock speed isn't supported..."
    #endif
   #endif

	// wait for PLL to start using xtal as its input
	while (!(MCG_S & MCG_S_PLLST)) ;
     28e:	ldrb	r2, [r3, #6]
     290:	lsls	r0, r2, #26
     292:	bpl.n	28e <ResetHandler+0xd2>
	// wait for PLL to lock
	while (!(MCG_S & MCG_S_LOCK0)) ;
     294:	ldr	r2, [pc, #204]	; (364 <ResetHandler+0x1a8>)
     296:	ldrb	r1, [r2, #6]
     298:	ldr	r3, [pc, #200]	; (364 <ResetHandler+0x1a8>)
     29a:	lsls	r1, r1, #25
     29c:	bpl.n	296 <ResetHandler+0xda>
	#endif
	SIM_CLKDIV2 = SIM_CLKDIV2_USBDIV(4) | SIM_CLKDIV2_USBFRAC;
#elif F_CPU == 96000000
	// config divisors: 96 MHz core, 48 MHz bus, 24 MHz flash, USB = 96 / 2
	#if F_BUS == 48000000
	SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1(0) | SIM_CLKDIV1_OUTDIV2(1) | SIM_CLKDIV1_OUTDIV4(3);
     29e:	ldr	r2, [pc, #200]	; (368 <ResetHandler+0x1ac>)
     2a0:	ldr	r1, [pc, #200]	; (36c <ResetHandler+0x1b0>)
     2a2:	str	r1, [r2, #0]
	#elif F_BUS == 96000000
	SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1(0) | SIM_CLKDIV1_OUTDIV2(0) | SIM_CLKDIV1_OUTDIV4(3);
	#else
	#error "This F_CPU & F_BUS combination is not supported"
	#endif
	SIM_CLKDIV2 = SIM_CLKDIV2_USBDIV(1);
     2a4:	movs	r1, #2
     2a6:	str	r1, [r2, #4]
#error "Error, F_CPU must be 256, 240, 216, 192, 180, 168, 144, 120, 96, 72, 48, 24, 16, 8, 4, or 2 MHz"
#endif

#if F_CPU > 16000000
	// switch to PLL as clock source, FLL input = 16 MHz / 512
	MCG_C1 = MCG_C1_CLKS(0) | MCG_C1_FRDIV(4);
     2a8:	movs	r2, #32
     2aa:	strb	r2, [r3, #0]
	// wait for PLL clock to be used
	while ((MCG_S & MCG_S_CLKST_MASK) != MCG_S_CLKST(3)) ;
     2ac:	ldrb	r2, [r3, #6]
     2ae:	and.w	r2, r2, #12
     2b2:	cmp	r2, #12
     2b4:	bne.n	2ac <ResetHandler+0xf0>
	#if F_CPU == 256000000 || F_CPU == 216000000 || F_CPU == 180000000
	// USB uses IRC48
	SIM_SOPT2 = SIM_SOPT2_USBSRC | SIM_SOPT2_IRC48SEL | SIM_SOPT2_TRACECLKSEL | SIM_SOPT2_CLKOUTSEL(6);
	#else
	// USB uses PLL clock
	SIM_SOPT2 = SIM_SOPT2_USBSRC | SIM_SOPT2_PLLFLLSEL | SIM_SOPT2_TRACECLKSEL | SIM_SOPT2_CLKOUTSEL(6);
     2b6:	ldr	r3, [pc, #184]	; (370 <ResetHandler+0x1b4>)
     2b8:	ldr	r2, [pc, #184]	; (374 <ResetHandler+0x1b8>)
     2ba:	str	r2, [r3, #0]
		RTC_CR = RTC_CR_SC16P | RTC_CR_SC4P | RTC_CR_OSCE;
	}
#endif

	// initialize the SysTick counter
	SYST_RVR = (F_CPU / 1000) - 1;
     2bc:	ldr	r3, [pc, #184]	; (378 <ResetHandler+0x1bc>)
     2be:	ldr	r2, [pc, #188]	; (37c <ResetHandler+0x1c0>)
     2c0:	str	r2, [r3, #0]
	SYST_CVR = 0;
     2c2:	movs	r2, #0
     2c4:	str	r2, [r3, #4]
	SYST_CSR = SYST_CSR_CLKSOURCE | SYST_CSR_TICKINT | SYST_CSR_ENABLE;
     2c6:	movs	r2, #7
     2c8:	str.w	r2, [r3, #-4]
	SCB_SHPR3 = 0x20200000;  // Systick = priority 32
     2cc:	ldr	r2, [pc, #176]	; (380 <ResetHandler+0x1c4>)
     2ce:	str.w	r2, [r3, #3340]	; 0xd0c

	//init_pins();
	__enable_irq();
     2d2:	cpsie	i

	_init_Teensyduino_internal_();
     2d4:	bl	d894 <_init_Teensyduino_internal_>

#if defined(KINETISK)
	// RTC initialization
	if (RTC_SR & RTC_SR_TIF) {
     2d8:	ldr	r3, [pc, #80]	; (32c <ResetHandler+0x170>)
     2da:	ldr	r3, [r3, #0]
     2dc:	lsls	r2, r3, #31
     2de:	bpl.n	2ec <ResetHandler+0x130>
		// compiled-in time will be stale.  Write a special
		// flag into the VBAT register file indicating the
		// RTC is set with known-stale time and should be
		// updated when fresh time is known.
		#if ARDUINO >= 10600
		rtc_set((uint32_t)&__rtc_localtime);
     2e0:	ldr	r0, [pc, #160]	; (384 <ResetHandler+0x1c8>)
     2e2:	bl	d778 <rtc_set>
		#else
		rtc_set(TIME_T);
		#endif
		*(uint32_t *)0x4003E01C = 0x5A94C3A5;
     2e6:	ldr	r3, [pc, #160]	; (388 <ResetHandler+0x1cc>)
     2e8:	ldr	r2, [pc, #160]	; (38c <ResetHandler+0x1d0>)
     2ea:	str	r2, [r3, #0]
	}
	if ((RCM_SRS0 & RCM_SRS0_PIN) && (*(uint32_t *)0x4003E01C == 0x5A94C3A5)) {
     2ec:	ldr	r3, [pc, #160]	; (390 <ResetHandler+0x1d4>)
     2ee:	ldrb	r3, [r3, #0]
     2f0:	lsls	r3, r3, #25
     2f2:	bpl.n	308 <ResetHandler+0x14c>
     2f4:	ldr	r4, [pc, #144]	; (388 <ResetHandler+0x1cc>)
     2f6:	ldr	r3, [pc, #148]	; (38c <ResetHandler+0x1d0>)
     2f8:	ldr	r2, [r4, #0]
     2fa:	cmp	r2, r3
     2fc:	bne.n	308 <ResetHandler+0x14c>
		// Our compiled-in time will be very fresh, so set
		// the RTC with this, and clear the VBAT resister file
		// data so we don't mess with the time after it's been
		// set well.
		#if ARDUINO >= 10600
		rtc_set((uint32_t)&__rtc_localtime);
     2fe:	ldr	r0, [pc, #132]	; (384 <ResetHandler+0x1c8>)
     300:	bl	d778 <rtc_set>
		#else
		rtc_set(TIME_T);
		#endif
		*(uint32_t *)0x4003E01C = 0;
     304:	movs	r3, #0
     306:	str	r3, [r4, #0]
	}
#endif

	__libc_init_array();
     308:	bl	fef4 <__libc_init_array>

	startup_late_hook();
     30c:	bl	d0b8 <startup_late_hook>
	main();
     310:	bl	e8b4 <main>
     314:	b.n	314 <ResetHandler+0x158>
     316:	nop
     318:	.word	0x4005200e
     31c:	.word	0x40048030
     320:	.word	0x00043f82
     324:	.word	0x2b000001
     328:	.word	0x4003d010
     32c:	.word	0x4003d014
     330:	.word	0x4007d002
     334:	.word	0x4007e000
     338:	.word	0x1fff9710
     33c:	.word	0x00014b94
     340:	.word	0x1fff8960
     344:	.word	0x1fff9710
     348:	.word	0x20003234
     34c:	.word	0x1fff8200
     350:	.word	0x00000000
     354:	.word	0xe000e400
     358:	.word	0xe000e45f
     35c:	.word	0xe000ed08
     360:	.word	0x40065000
     364:	.word	0x40064000
     368:	.word	0x40048044
     36c:	.word	0x01030000
     370:	.word	0x40048004
     374:	.word	0x000510c0
     378:	.word	0xe000e014
     37c:	.word	0x000176ff
     380:	.word	0x20200000
     384:	.word	0x60f142d6
     388:	.word	0x4003e01c
     38c:	.word	0x5a94c3a5
     390:	.word	0x4007f000
     394:	.word	0xffffffff
     398:	.word	0xffffffff
     39c:	.word	0xffffffff
     3a0:	.word	0xffffffff
     3a4:	.word	0xffffffff
     3a8:	.word	0xffffffff
     3ac:	.word	0xffffffff
     3b0:	.word	0xffffffff
     3b4:	.word	0xffffffff
     3b8:	.word	0xffffffff
     3bc:	.word	0xffffffff
     3c0:	.word	0xffffffff
     3c4:	.word	0xffffffff
     3c8:	.word	0xffffffff
     3cc:	.word	0xffffffff
     3d0:	.word	0xffffffff
     3d4:	.word	0xffffffff
     3d8:	.word	0xffffffff
     3dc:	.word	0xffffffff
     3e0:	.word	0xffffffff
     3e4:	.word	0xffffffff
     3e8:	.word	0xffffffff
     3ec:	.word	0xffffffff
     3f0:	.word	0xffffffff
     3f4:	.word	0xffffffff
     3f8:	.word	0xffffffff
     3fc:	.word	0xffffffff

00000400 <flashconfigbytes>:
     400:	................

00000410 <__do_global_dtors_aux>:
     410:	push	{r4, lr}
     412:	ldr	r4, [pc, #20]	; (428 <__do_global_dtors_aux+0x18>)
     414:	ldrb	r3, [r4, #0]
     416:	cbnz	r3, 426 <__do_global_dtors_aux+0x16>
     418:	ldr	r3, [pc, #16]	; (42c <__do_global_dtors_aux+0x1c>)
     41a:	cbz	r3, 422 <__do_global_dtors_aux+0x12>
     41c:	ldr	r0, [pc, #16]	; (430 <__do_global_dtors_aux+0x20>)
     41e:	nop.w
     422:	movs	r3, #1
     424:	strb	r3, [r4, #0]
     426:	pop	{r4, pc}
     428:	.word	0x1fff9710
     42c:	.word	0x00000000
     430:	.word	0x00014b90

00000434 <frame_dummy>:
     434:	ldr	r3, [pc, #32]	; (458 <frame_dummy+0x24>)
     436:	push	{r4, lr}
     438:	cbz	r3, 442 <frame_dummy+0xe>
     43a:	ldr	r1, [pc, #32]	; (45c <frame_dummy+0x28>)
     43c:	ldr	r0, [pc, #32]	; (460 <frame_dummy+0x2c>)
     43e:	nop.w
     442:	ldr	r0, [pc, #32]	; (464 <frame_dummy+0x30>)
     444:	ldr	r3, [r0, #0]
     446:	cbnz	r3, 44a <frame_dummy+0x16>
     448:	pop	{r4, pc}
     44a:	ldr	r3, [pc, #28]	; (468 <frame_dummy+0x34>)
     44c:	cmp	r3, #0
     44e:	beq.n	448 <frame_dummy+0x14>
     450:	ldmia.w	sp!, {r4, lr}
     454:	bx	r3
     456:	nop
     458:	.word	0x00000000
     45c:	.word	0x1fff9714
     460:	.word	0x00014b90
     464:	.word	0x1fff9710
     468:	.word	0x00000000

0000046c <Print::availableForWrite()>:
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
	virtual size_t write(const uint8_t *buffer, size_t size);
	virtual int availableForWrite(void)		{ return 0; }
     46c:	movs	r0, #0
     46e:	bx	lr

00000470 <Print::flush()>:
	virtual void flush()				{ }
     470:	bx	lr
     472:	nop

00000474 <File::read(void*, unsigned int)>:
	unsigned int getRefcount() { // testing only
		return refcount;
	}
#endif
	virtual size_t read(void *buf, size_t nbyte) {
		return (f) ? f->read(buf, nbyte) : 0;
     474:	ldr	r0, [r0, #16]
     476:	cbz	r0, 47e <File::read(void*, unsigned int)+0xa>
     478:	ldr	r3, [r0, #0]
     47a:	ldr	r3, [r3, #40]	; 0x28
     47c:	bx	r3
	}
     47e:	bx	lr

00000480 <File::write(void const*, unsigned int)>:
	virtual size_t write(const void *buf, size_t size) {
		return (f) ? f->write(buf, size) : 0;
     480:	ldr	r0, [r0, #16]
     482:	cbz	r0, 48a <File::write(void const*, unsigned int)+0xa>
     484:	ldr	r3, [r0, #0]
     486:	ldr	r3, [r3, #44]	; 0x2c
     488:	bx	r3
	}
     48a:	bx	lr

0000048c <File::available()>:
	virtual int available() {
		return (f) ? f->available() : 0;
     48c:	ldr	r0, [r0, #16]
     48e:	cbz	r0, 496 <File::available()+0xa>
     490:	ldr	r3, [r0, #0]
     492:	ldr	r3, [r3, #16]
     494:	bx	r3
	}
     496:	bx	lr

00000498 <File::peek()>:
	virtual int peek() {
		return (f) ? f->peek() : -1;
     498:	ldr	r0, [r0, #16]
     49a:	cbz	r0, 4a2 <File::peek()+0xa>
     49c:	ldr	r3, [r0, #0]
     49e:	ldr	r3, [r3, #24]
     4a0:	bx	r3
	}
     4a2:	mov.w	r0, #4294967295
     4a6:	bx	lr

000004a8 <File::flush()>:
	virtual void flush() {
		if (f) f->flush();
     4a8:	ldr	r0, [r0, #16]
     4aa:	cbz	r0, 4b2 <File::flush()+0xa>
     4ac:	ldr	r3, [r0, #0]
     4ae:	ldr	r3, [r3, #12]
     4b0:	bx	r3
     4b2:	bx	lr

000004b4 <File::truncate(unsigned long long)>:
	}
	virtual bool truncate(uint64_t size=0) {
		return (f) ? f->truncate(size) : false;
     4b4:	ldr	r0, [r0, #16]
     4b6:	cbz	r0, 4be <File::truncate(unsigned long long)+0xa>
     4b8:	ldr	r1, [r0, #0]
     4ba:	ldr	r1, [r1, #48]	; 0x30
     4bc:	bx	r1
	}
     4be:	bx	lr

000004c0 <File::seek(unsigned long long, int)>:
	virtual bool seek(uint64_t pos, int mode) {
     4c0:	push	{r4}
		return (f) ? f->seek(pos, mode) : false;
     4c2:	ldr	r0, [r0, #16]
     4c4:	cbz	r0, 4ce <File::seek(unsigned long long, int)+0xe>
     4c6:	ldr	r4, [r0, #0]
     4c8:	ldr	r1, [r4, #52]	; 0x34
	}
     4ca:	pop	{r4}
	}
	virtual bool truncate(uint64_t size=0) {
		return (f) ? f->truncate(size) : false;
	}
	virtual bool seek(uint64_t pos, int mode) {
		return (f) ? f->seek(pos, mode) : false;
     4cc:	bx	r1
	}
     4ce:	pop	{r4}
     4d0:	bx	lr
     4d2:	nop

000004d4 <File::position()>:
	virtual uint64_t position() {
		return (f) ? f->position() : 0;
     4d4:	ldr	r0, [r0, #16]
     4d6:	cbz	r0, 4de <File::position()+0xa>
     4d8:	ldr	r3, [r0, #0]
     4da:	ldr	r3, [r3, #56]	; 0x38
     4dc:	bx	r3
	}
     4de:	movs	r0, #0
     4e0:	movs	r1, #0
     4e2:	bx	lr

000004e4 <File::size()>:
	virtual uint64_t size() {
		return (f) ? f->size() : 0;
     4e4:	ldr	r0, [r0, #16]
     4e6:	cbz	r0, 4ee <File::size()+0xa>
     4e8:	ldr	r3, [r0, #0]
     4ea:	ldr	r3, [r3, #60]	; 0x3c
     4ec:	bx	r3
	}
     4ee:	movs	r0, #0
     4f0:	movs	r1, #0
     4f2:	bx	lr

000004f4 <File::close()>:
	virtual void close() {
		if (f) f->close();
     4f4:	ldr	r0, [r0, #16]
     4f6:	cbz	r0, 4fe <File::close()+0xa>
     4f8:	ldr	r3, [r0, #0]
     4fa:	ldr	r3, [r3, #64]	; 0x40
     4fc:	bx	r3
     4fe:	bx	lr

00000500 <File::operator bool()>:
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
     500:	ldr	r0, [r0, #16]
     502:	cbz	r0, 50a <File::operator bool()+0xa>
     504:	ldr	r3, [r0, #0]
     506:	ldr	r3, [r3, #68]	; 0x44
     508:	bx	r3
	}
     50a:	bx	lr

0000050c <File::name()>:
	virtual const char* name() {
		return (f) ? f->name() : "";
     50c:	ldr	r0, [r0, #16]
     50e:	cbz	r0, 516 <File::name()+0xa>
     510:	ldr	r3, [r0, #0]
     512:	ldr	r3, [r3, #72]	; 0x48
     514:	bx	r3
	}
     516:	ldr	r0, [pc, #4]	; (51c <File::name()+0x10>)
     518:	bx	lr
     51a:	nop
     51c:	.word	0x00014360

00000520 <File::isDirectory()>:
	virtual bool isDirectory() {
		return (f) ? f->isDirectory() : false;
     520:	ldr	r0, [r0, #16]
     522:	cbz	r0, 52a <File::isDirectory()+0xa>
     524:	ldr	r3, [r0, #0]
     526:	ldr	r3, [r3, #76]	; 0x4c
     528:	bx	r3
	}
     52a:	bx	lr

0000052c <File::openNextFile(unsigned char)>:
	virtual File openNextFile(uint8_t mode=0) {
     52c:	push	{r3, r4, r5, lr}
		return (f) ? f->openNextFile(mode) : *this;
     52e:	ldr	r3, [r1, #16]
		return (f) ? f->name() : "";
	}
	virtual bool isDirectory() {
		return (f) ? f->isDirectory() : false;
	}
	virtual File openNextFile(uint8_t mode=0) {
     530:	mov	r4, r0
		return (f) ? f->openNextFile(mode) : *this;
     532:	cbz	r3, 540 <File::openNextFile(unsigned char)+0x14>
     534:	ldr	r5, [r3, #0]
     536:	mov	r1, r3
     538:	ldr	r3, [r5, #80]	; 0x50
     53a:	blx	r3
	}
     53c:	mov	r0, r4
     53e:	pop	{r3, r4, r5, pc}
#include "Print.h"

class Stream : public Print
{
  public:
	constexpr Stream() : _timeout(1000), read_error(0) {}
     540:	mov.w	r0, #1000	; 0x3e8
			//"File(File *file) constructor only accepts pointers "
			//"to derived classes, not File itself");
		f = file;
		if (f) f->refcount++;
	}
	File(const File &file) {
     544:	ldr	r2, [pc, #24]	; (560 <File::openNextFile(unsigned char)+0x34>)
class __FlashStringHelper;

class Print
{
  public:
	constexpr Print() : write_error(0) {}
     546:	strb	r3, [r4, #4]
     548:	strb	r3, [r4, #12]
     54a:	str	r0, [r4, #8]
     54c:	str	r2, [r4, #0]
		//Serial.println("File copy constructor");
		//static int copycount=0;
		//if (++copycount > 20) while (1) ;
		f = file.f;
     54e:	ldr	r3, [r1, #16]
     550:	str	r3, [r4, #16]
		if (f) f->refcount++;
     552:	cmp	r3, #0
     554:	beq.n	53c <File::openNextFile(unsigned char)+0x10>
     556:	ldr	r2, [r3, #16]
     558:	adds	r2, #1
     55a:	str	r2, [r3, #16]
	virtual bool isDirectory() {
		return (f) ? f->isDirectory() : false;
	}
	virtual File openNextFile(uint8_t mode=0) {
		return (f) ? f->openNextFile(mode) : *this;
	}
     55c:	mov	r0, r4
     55e:	pop	{r3, r4, r5, pc}
     560:	.word	0x000141ac

00000564 <File::rewindDirectory()>:
	virtual void rewindDirectory(void) {
		if (f) f->rewindDirectory();
     564:	ldr	r0, [r0, #16]
     566:	cbz	r0, 56e <File::rewindDirectory()+0xa>
     568:	ldr	r3, [r0, #0]
     56a:	ldr	r3, [r3, #84]	; 0x54
     56c:	bx	r3
     56e:	bx	lr

00000570 <File::read()>:
	}
	bool seek(uint64_t pos) {
		return seek(pos, SeekSet);
	}
	int read() {
		if (!f) return -1;
     570:	ldr	r0, [r0, #16]
     572:	cbz	r0, 596 <File::read()+0x26>
		if (f) f->rewindDirectory();
	}
	bool seek(uint64_t pos) {
		return seek(pos, SeekSet);
	}
	int read() {
     574:	push	{lr}
		if (!f) return -1;
		unsigned char b;
		if (f->read(&b, 1) < 1) return -1;
     576:	ldr	r3, [r0, #0]
		if (f) f->rewindDirectory();
	}
	bool seek(uint64_t pos) {
		return seek(pos, SeekSet);
	}
	int read() {
     578:	sub	sp, #12
		if (!f) return -1;
		unsigned char b;
		if (f->read(&b, 1) < 1) return -1;
     57a:	ldr	r3, [r3, #40]	; 0x28
     57c:	movs	r2, #1
     57e:	add.w	r1, sp, #7
     582:	blx	r3
     584:	cbz	r0, 590 <File::read()+0x20>
		return b;
     586:	ldrb.w	r0, [sp, #7]
	}
     58a:	add	sp, #12
     58c:	ldr.w	pc, [sp], #4
	}
	bool seek(uint64_t pos) {
		return seek(pos, SeekSet);
	}
	int read() {
		if (!f) return -1;
     590:	mov.w	r0, #4294967295
     594:	b.n	58a <File::read()+0x1a>
     596:	mov.w	r0, #4294967295
		unsigned char b;
		if (f->read(&b, 1) < 1) return -1;
		return b;
	}
     59a:	bx	lr

0000059c <File::write(unsigned char)>:
	size_t write(uint8_t b) {
     59c:	push	{r4, lr}
     59e:	sub	sp, #8
     5a0:	add	r3, sp, #8
		return write(&b, 1);
     5a2:	ldr	r2, [r0, #0]
		if (!f) return -1;
		unsigned char b;
		if (f->read(&b, 1) < 1) return -1;
		return b;
	}
	size_t write(uint8_t b) {
     5a4:	strb.w	r1, [r3, #-1]!
		return write(&b, 1);
     5a8:	ldr	r4, [r2, #44]	; 0x2c
     5aa:	mov	r1, r3
     5ac:	movs	r2, #1
     5ae:	blx	r4
	}
     5b0:	add	sp, #8
     5b2:	pop	{r4, pc}

000005b4 <SDFile::operator bool()>:
  bool isHidden() const {
    return m_fFile ? m_fFile->isHidden() :
           m_xFile ? m_xFile->isHidden() : false;
  }
  /** \return True if this is an open file/directory else false. */
  bool isOpen() const {return m_fFile || m_xFile;}
     5b4:	ldr	r3, [r0, #92]	; 0x5c
     5b6:	cbz	r3, 5bc <SDFile::operator bool()+0x8>
     5b8:	movs	r0, #1
		}
		sdfatfile.close();
	}
	virtual operator bool() {
		return sdfatfile.isOpen();
	}
     5ba:	bx	lr
     5bc:	ldr	r0, [r0, #96]	; 0x60
     5be:	adds	r0, #0
     5c0:	it	ne
     5c2:	movne	r0, #1
     5c4:	bx	lr
     5c6:	nop

000005c8 <__tcf_0>:
  return state;
}

/************ Basic File System Interface *************************/
#include "SD.h"
extern SDClass sdx[];
     5c8:	bx	lr
     5ca:	nop

000005cc <File::whoami()>:
	}
	virtual ~File() {
		invalidate();
	}
#ifdef FILE_WHOAMI
	virtual void whoami() { // testing only
     5cc:	push	{r4, lr}
     5ce:	mov	r4, r0
		Serial.printf("  File    this=%x, f=%x\n", (int)this, (int)f);
     5d0:	mov	r2, r0
     5d2:	ldr	r3, [r0, #16]
     5d4:	ldr	r1, [pc, #20]	; (5ec <File::whoami()+0x20>)
     5d6:	ldr	r0, [pc, #24]	; (5f0 <File::whoami()+0x24>)
     5d8:	bl	e7dc <Print::printf(char const*, ...)>
		if (f) f->whoami();
     5dc:	ldr	r0, [r4, #16]
     5de:	cbz	r0, 5ea <File::whoami()+0x1e>
     5e0:	ldr	r3, [r0, #0]
	}
     5e2:	ldmia.w	sp!, {r4, lr}
		invalidate();
	}
#ifdef FILE_WHOAMI
	virtual void whoami() { // testing only
		Serial.printf("  File    this=%x, f=%x\n", (int)this, (int)f);
		if (f) f->whoami();
     5e6:	ldr	r3, [r3, #36]	; 0x24
     5e8:	bx	r3
     5ea:	pop	{r4, pc}
     5ec:	.word	0x0001428c
     5f0:	.word	0x1fff8d50

000005f4 <SDFile::whoami()>:
		if (filename) free(filename);
	}
#ifdef FILE_WHOAMI
	virtual void whoami() {
		Serial.printf("   SDFile this=%x, refcount=%u\n",
			(int)this, getRefcount());
     5f4:	mov	r2, r0
     5f6:	ldr	r3, [r0, #16]
     5f8:	ldr	r1, [pc, #4]	; (600 <SDFile::whoami()+0xc>)
     5fa:	ldr	r0, [pc, #8]	; (604 <SDFile::whoami()+0x10>)
     5fc:	b.w	e7dc <Print::printf(char const*, ...)>
     600:	.word	0x000142a8
     604:	.word	0x1fff8d50

00000608 <SDFile::close()>:
		return sdfatfile.curPosition();
	}
	virtual uint64_t size() {
		return sdfatfile.size();
	}
	virtual void close() {
     608:	push	{r4, lr}
     60a:	mov	r4, r0
		if (filename) {
     60c:	ldr	r0, [r0, #100]	; 0x64
     60e:	cbz	r0, 618 <SDFile::close()+0x10>
			free(filename);
     610:	bl	ff54 <free>
			filename = nullptr;
     614:	movs	r3, #0
     616:	str	r3, [r4, #100]	; 0x64
		}
		sdfatfile.close();
     618:	add.w	r0, r4, #36	; 0x24
	}
     61c:	ldmia.w	sp!, {r4, lr}
	virtual void close() {
		if (filename) {
			free(filename);
			filename = nullptr;
		}
		sdfatfile.close();
     620:	b.w	c128 <FsBaseFile::close()>

00000624 <SDFile::openNextFile(unsigned char)>:
		return filename;
	}
	virtual boolean isDirectory(void) {
		return sdfatfile.isDirectory();
	}
	virtual File openNextFile(uint8_t mode=0) {
     624:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     628:	movs	r3, #0
     62a:	sub	sp, #80	; 0x50
   * \param[in] oflag open flags.
   * \return a FatStream object.
   */
  FsFile openNextFile(oflag_t oflag = O_RDONLY) {
    FsFile tmpFile;
    tmpFile.openNext(this, oflag);
     62c:	mov	r2, r3
     62e:	mov	r5, r0
     630:	adds	r1, #36	; 0x24
     632:	add	r0, sp, #16
     634:	mov.w	r4, #1000	; 0x3e8
};
/**
 * \class FsFile
 * \brief FsBaseFile file with Arduino Stream.
 */
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
     638:	ldr	r7, [pc, #148]	; (6d0 <SDFile::openNextFile(unsigned char)+0xac>)
     63a:	strb.w	r3, [sp, #4]
     63e:	strb.w	r3, [sp, #12]
 * \brief FsBaseFile class.
 */
class FsBaseFile {
 public:
  /** Create an instance. */
  FsBaseFile() {}
     642:	str	r3, [sp, #72]	; 0x48
     644:	str	r3, [sp, #76]	; 0x4c
     646:	str	r4, [sp, #8]
};
/**
 * \class FsFile
 * \brief FsBaseFile file with Arduino Stream.
 */
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
     648:	str	r7, [sp, #0]
   * \param[in] oflag open flags.
   * \return a FatStream object.
   */
  FsFile openNextFile(oflag_t oflag = O_RDONLY) {
    FsFile tmpFile;
    tmpFile.openNext(this, oflag);
     64a:	bl	c1d0 <FsBaseFile::openNext(FsBaseFile*, int)>
  bool isHidden() const {
    return m_fFile ? m_fFile->isHidden() :
           m_xFile ? m_xFile->isHidden() : false;
  }
  /** \return True if this is an open file/directory else false. */
  bool isOpen() const {return m_fFile || m_xFile;}
     64e:	ldr	r3, [sp, #72]	; 0x48
     650:	cmp	r3, #0
     652:	beq.n	6ba <SDFile::openNextFile(unsigned char)+0x96>
		SDFAT_FILE file = sdfatfile.openNextFile();
		if (file) return File(new SDFile(file));
     654:	movs	r0, #104	; 0x68
     656:	bl	e94c <operator new(unsigned int)>
     65a:	mov	r4, r0
//#define BYTE 0
//#endif

class __FlashStringHelper;

class Print
     65c:	ldrb.w	r6, [sp, #4]
#define Stream_h

#include <inttypes.h>
#include "Print.h"

class Stream : public Print
     660:	ldr	r2, [sp, #8]
     662:	ldrb.w	r3, [sp, #12]
	// Classes derived from File are never meant to be constructed
	// anywhere other than open() in the parent FS class and
	// openNextFile() while traversing a directory.
	// Only the abstract File class which references these derived
	// classes is meant to have a public constructor!
	SDFile(const SDFAT_FILE &file) : sdfatfile(file), filename(nullptr) { }
     666:	ldr	r0, [pc, #108]	; (6d4 <SDFile::openNextFile(unsigned char)+0xb0>)
     668:	ldr	r1, [pc, #108]	; (6d8 <SDFile::openNextFile(unsigned char)+0xb4>)
     66a:	strb	r6, [r4, #24]
{
  public:
	constexpr Stream() : _timeout(1000), read_error(0) {}
     66c:	mov.w	r8, #1000	; 0x3e8
{
  public:
	constexpr Print() : write_error(0) {}
     670:	movs	r6, #0
     672:	str	r0, [r4, #0]
#define Stream_h

#include <inttypes.h>
#include "Print.h"

class Stream : public Print
     674:	str	r1, [r4, #20]
     676:	str	r2, [r4, #28]
     678:	strb.w	r3, [r4, #32]
/**
 * \class StreamFile
 * \brief StreamFile class.
 */
template<class BaseFile, typename PosType>
class StreamFile : public stream_t, public BaseFile {
     67c:	add.w	r0, r4, #36	; 0x24
     680:	add	r1, sp, #16
     682:	strb	r6, [r4, #4]
{
  public:
	constexpr Stream() : _timeout(1000), read_error(0) {}
     684:	strb	r6, [r4, #12]

#define FILE_WHOAMI

class File : public Stream {
public:
	constexpr File() : f(nullptr) { }
     686:	str	r6, [r4, #16]
     688:	str.w	r8, [r4, #8]
     68c:	bl	c0b0 <FsBaseFile::FsBaseFile(FsBaseFile const&)>
		// or is_base_of
		//static_assert(std::is_same<decltype(*file),File>::value,
			//"File(File *file) constructor only accepts pointers "
			//"to derived classes, not File itself");
		f = file;
		if (f) f->refcount++;
     690:	ldr	r3, [r4, #16]
#define FILE_WHOAMI

class File : public Stream {
public:
	constexpr File() : f(nullptr) { }
	File(File *file) {
     692:	ldr	r2, [pc, #72]	; (6dc <SDFile::openNextFile(unsigned char)+0xb8>)
};
/**
 * \class FsFile
 * \brief FsBaseFile file with Arduino Stream.
 */
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
     694:	str	r7, [r4, #20]
		// or is_base_of
		//static_assert(std::is_same<decltype(*file),File>::value,
			//"File(File *file) constructor only accepts pointers "
			//"to derived classes, not File itself");
		f = file;
		if (f) f->refcount++;
     696:	adds	r3, #1
     698:	str	r6, [r4, #100]	; 0x64
     69a:	strb	r6, [r5, #4]
     69c:	str.w	r8, [r5, #8]
     6a0:	strb	r6, [r5, #12]
		// can we use is_same or is_polymorphic with static_assert?
		// or is_base_of
		//static_assert(std::is_same<decltype(*file),File>::value,
			//"File(File *file) constructor only accepts pointers "
			//"to derived classes, not File itself");
		f = file;
     6a2:	str	r4, [r5, #16]
		if (f) f->refcount++;
     6a4:	str	r3, [r4, #16]
#define FILE_WHOAMI

class File : public Stream {
public:
	constexpr File() : f(nullptr) { }
	File(File *file) {
     6a6:	str	r2, [r5, #0]
     6a8:	ldr	r3, [pc, #52]	; (6e0 <SDFile::openNextFile(unsigned char)+0xbc>)
     6aa:	str	r3, [sp, #0]
   */
  FsBaseFile(const char* path, oflag_t oflag) {
    open(path, oflag);
  }

  ~FsBaseFile() {close();}
     6ac:	add	r0, sp, #16
     6ae:	bl	c128 <FsBaseFile::close()>
	}
	virtual File openNextFile(uint8_t mode=0) {
		SDFAT_FILE file = sdfatfile.openNextFile();
		if (file) return File(new SDFile(file));
		return File();
	}
     6b2:	mov	r0, r5
     6b4:	add	sp, #80	; 0x50
     6b6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  bool isHidden() const {
    return m_fFile ? m_fFile->isHidden() :
           m_xFile ? m_xFile->isHidden() : false;
  }
  /** \return True if this is an open file/directory else false. */
  bool isOpen() const {return m_fFile || m_xFile;}
     6ba:	ldr	r3, [sp, #76]	; 0x4c
     6bc:	cmp	r3, #0
     6be:	bne.n	654 <SDFile::openNextFile(unsigned char)+0x30>

#define FILE_WHOAMI

class File : public Stream {
public:
	constexpr File() : f(nullptr) { }
     6c0:	ldr	r2, [pc, #24]	; (6dc <SDFile::openNextFile(unsigned char)+0xb8>)
     6c2:	strb	r3, [r5, #4]
     6c4:	str	r4, [r5, #8]
     6c6:	strb	r3, [r5, #12]
     6c8:	str	r3, [r5, #16]
     6ca:	str	r2, [r5, #0]
     6cc:	b.n	6a8 <SDFile::openNextFile(unsigned char)+0x84>
     6ce:	nop
     6d0:	.word	0x00014188
     6d4:	.word	0x0001420c
     6d8:	.word	0x00014140
     6dc:	.word	0x000141ac
     6e0:	.word	0x00014164

000006e4 <dateTime(unsigned short*, unsigned short*, unsigned char*)>:

/****************** File Utilities *****************************/
  #if USE_SD==1
    // Call back for file timestamps.  Only called for file create and sync()
    void dateTime(uint16_t* date, uint16_t* time, uint8_t* ms10) 
    { *date = FS_DATE(year(), month(), day());
     6e4:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     6e8:	mov	r7, r1
     6ea:	mov	r6, r2
     6ec:	mov	r8, r0
     6ee:	bl	7fa0 <year()>
     6f2:	mov	r4, r0
     6f4:	bl	7f80 <month()>
     6f8:	mov	r5, r0
     6fa:	bl	7f60 <day()>
 * \param[in] day [1,31]
 *
 * \return Packed date for directory entry.
 */
static inline uint16_t FS_DATE(uint16_t year, uint8_t month, uint8_t day) {
  year -= 1980;
     6fe:	subw	r3, r4, #1980	; 0x7bc
     702:	uxth	r3, r3
  return year > 127 || month > 12 || day > 31 ? 0 :
         year << 9 | month << 5 | day;
     704:	cmp	r3, #127	; 0x7f
     706:	bhi.n	70e <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x2a>
 *
 * \return Packed date for directory entry.
 */
static inline uint16_t FS_DATE(uint16_t year, uint8_t month, uint8_t day) {
  year -= 1980;
  return year > 127 || month > 12 || day > 31 ? 0 :
     708:	uxtb	r2, r5
     70a:	cmp	r2, #12
     70c:	bls.n	766 <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x82>
         year << 9 | month << 5 | day;
     70e:	movs	r3, #0
     710:	strh.w	r3, [r8]
      *time = FS_TIME(hour(), minute(), second());
     714:	bl	7f00 <hour()>
     718:	mov	r4, r0
     71a:	bl	7f20 <minute()>
     71e:	mov	r5, r0
     720:	bl	7f40 <second()>
 *
 * \return Packed time for directory entry.
 */
static inline uint16_t FS_TIME(uint8_t hour, uint8_t minute, uint8_t second) {
  return hour > 23 || minute > 59 || second > 59 ? 0 :
         hour << 11 | minute << 5 | second >> 1;
     724:	uxtb	r3, r4
     726:	cmp	r3, #23
     728:	bhi.n	730 <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x4c>
 * \param[in] second [0,59]
 *
 * \return Packed time for directory entry.
 */
static inline uint16_t FS_TIME(uint8_t hour, uint8_t minute, uint8_t second) {
  return hour > 23 || minute > 59 || second > 59 ? 0 :
     72a:	uxtb	r3, r5
     72c:	cmp	r3, #59	; 0x3b
     72e:	bls.n	748 <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x64>
         hour << 11 | minute << 5 | second >> 1;
     730:	movs	r3, #0
     732:	strh	r3, [r7, #0]
      *ms10 = second() & 1 ? 100 : 0;
     734:	bl	7f40 <second()>
     738:	tst.w	r0, #1
     73c:	ite	ne
     73e:	movne	r3, #100	; 0x64
     740:	moveq	r3, #0
     742:	strb	r3, [r6, #0]
     744:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 * \param[in] second [0,59]
 *
 * \return Packed time for directory entry.
 */
static inline uint16_t FS_TIME(uint8_t hour, uint8_t minute, uint8_t second) {
  return hour > 23 || minute > 59 || second > 59 ? 0 :
     748:	uxtb	r3, r0
     74a:	cmp	r3, #59	; 0x3b
     74c:	bhi.n	730 <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x4c>
         hour << 11 | minute << 5 | second >> 1;
     74e:	lsls	r4, r4, #11
     750:	lsls	r3, r5, #5
     752:	and.w	r4, r4, #522240	; 0x7f800
     756:	and.w	r3, r3, #8160	; 0x1fe0
     75a:	orrs	r3, r4
     75c:	ubfx	r0, r0, #1, #7
     760:	orrs	r3, r0
     762:	uxth	r3, r3
     764:	b.n	732 <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x4e>

/****************** File Utilities *****************************/
  #if USE_SD==1
    // Call back for file timestamps.  Only called for file create and sync()
    void dateTime(uint16_t* date, uint16_t* time, uint8_t* ms10) 
    { *date = FS_DATE(year(), month(), day());
     766:	uxtb	r0, r0
 *
 * \return Packed date for directory entry.
 */
static inline uint16_t FS_DATE(uint16_t year, uint8_t month, uint8_t day) {
  year -= 1980;
  return year > 127 || month > 12 || day > 31 ? 0 :
     768:	cmp	r0, #31
     76a:	bhi.n	70e <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x2a>
         year << 9 | month << 5 | day;
     76c:	lsls	r5, r5, #5
     76e:	and.w	r5, r5, #8160	; 0x1fe0
     772:	orrs	r0, r5
     774:	orr.w	r3, r0, r3, lsl #9
     778:	uxth	r3, r3
     77a:	b.n	710 <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x2c>

0000077c <DMAChannel::~DMAChannel()>:
	}
	DMAChannel & operator = (const DMASetting &rhs) {
		copy_tcd(TCD, rhs.TCD);
		return *this;
	}
	~DMAChannel() {
     77c:	push	{r4, lr}
     77e:	mov	r4, r0
		release();
     780:	bl	e64c <DMAChannel::release()>
	}
     784:	mov	r0, r4
     786:	pop	{r4, pc}

00000788 <SDFile::available()>:
		return sdfatfile.write(buf, size);
	}
	virtual int peek() {
		return sdfatfile.peek();
	}
	virtual int available() {
     788:	ldr	r2, [r0, #92]	; 0x5c
  /** \return number of bytes available from the current position to EOF
   *   or INT_MAX if more than INT_MAX bytes are available.
   */
  int available() const {
    return m_fFile ? m_fFile->available() :
           m_xFile ? m_xFile->available() : 0;
     78a:	cbz	r2, 7a6 <SDFile::available()+0x1e>
  }
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint32_t available32() const {
    return isFile() ? fileSize() - curPosition() : 0;
     78c:	ldrb	r3, [r2, #0]
     78e:	and.w	r3, r3, #8
     792:	and.w	r0, r3, #255	; 0xff
     796:	cbz	r3, 7da <SDFile::available()+0x52>
   * Zero is returned for directory files.
   *
   */
  int available() const {
    uint32_t n = available32();
    return n > INT_MAX ? INT_MAX : n;
     798:	ldr	r3, [r2, #28]
     79a:	ldr	r0, [r2, #20]
     79c:	subs	r0, r3, r0
     79e:	it	mi
     7a0:	mvnmi.w	r0, #2147483648	; 0x80000000
     7a4:	bx	lr
     7a6:	ldr	r1, [r0, #96]	; 0x60
     7a8:	cbz	r1, 7dc <SDFile::available()+0x54>
  }
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint64_t available64() {
    return isFile() ? fileSize() - curPosition() : 0;
     7aa:	ldrb.w	r3, [r1, #49]	; 0x31
     7ae:	and.w	r3, r3, #8
     7b2:	and.w	r0, r3, #255	; 0xff
     7b6:	cbz	r3, 7da <SDFile::available()+0x52>
     7b8:	ldrd	r2, r3, [r1, #16]
     7bc:	ldrd	r0, r1, [r1]
     7c0:	subs	r0, r2, r0
     7c2:	push	{r4, r5}
     7c4:	sbc.w	r1, r3, r1
     7c8:	movs	r5, #0
     7ca:	mvn.w	r4, #2147483648	; 0x80000000
     7ce:	cmp	r5, r1
     7d0:	it	eq
     7d2:	cmpeq	r4, r0
     7d4:	bcs.n	7d8 <SDFile::available()+0x50>
     7d6:	mov	r0, r4
		return sdfatfile.available();
	}
     7d8:	pop	{r4, r5}
     7da:	bx	lr
     7dc:	mov	r0, r1
     7de:	bx	lr

000007e0 <StreamFile<FsBaseFile, unsigned long long>::peek()>:
  const char* name() const {return "use getName()";}
  /** Return the next available byte without consuming it.
   *
   * \return The byte if no error and not at eof else -1;
   */
  int peek() {
     7e0:	ldr	r3, [r0, #72]	; 0x48
   *
   * \return The byte if no error and not at eof else -1;
   */
  int peek() {
    return m_fFile ? m_fFile->peek() :
           m_xFile ? m_xFile->peek() : -1;
     7e2:	cbz	r3, 7ea <StreamFile<FsBaseFile, unsigned long long>::peek()+0xa>
     7e4:	mov	r0, r3
     7e6:	b.w	ac70 <FatFile::peek()>
     7ea:	ldr	r0, [r0, #76]	; 0x4c
     7ec:	cbz	r0, 7f2 <StreamFile<FsBaseFile, unsigned long long>::peek()+0x12>
     7ee:	b.w	90f8 <ExFatFile::peek()>
    return BaseFile::peek();
  }
     7f2:	mov.w	r0, #4294967295
     7f6:	bx	lr

000007f8 <StreamFile<FsBaseFile, unsigned long long>::read()>:
  /** Read the next byte from a file.
   *
   * \return For success return the next byte in the file as an int.
   * If an error occurs or end of file is reached return -1.
   */
  int read() {
     7f8:	push	{lr}
     7fa:	ldr	r3, [r0, #72]	; 0x48
     7fc:	sub	sp, #12
   * read() called before a file has been opened, corrupt file system
   * or an I/O error occurred.
   */
  int read(void* buf, size_t count) {
    return m_fFile ? m_fFile->read(buf, count) :
           m_xFile ? m_xFile->read(buf, count) : -1;
     7fe:	cbz	r3, 81a <StreamFile<FsBaseFile, unsigned long long>::read()+0x22>
     800:	mov	r0, r3
     802:	movs	r2, #1
     804:	add.w	r1, sp, #7
     808:	bl	aad8 <FatFile::read(void*, unsigned int)>
   * \return For success return the next byte in the file as an int.
   * If an error occurs or end of file is reached return -1.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
     80c:	cmp	r0, #1
     80e:	bne.n	82a <StreamFile<FsBaseFile, unsigned long long>::read()+0x32>
     810:	ldrb.w	r0, [sp, #7]
    return BaseFile::read();
  }
     814:	add	sp, #12
     816:	ldr.w	pc, [sp], #4
   * read() called before a file has been opened, corrupt file system
   * or an I/O error occurred.
   */
  int read(void* buf, size_t count) {
    return m_fFile ? m_fFile->read(buf, count) :
           m_xFile ? m_xFile->read(buf, count) : -1;
     81a:	ldr	r0, [r0, #76]	; 0x4c
     81c:	cbz	r0, 82a <StreamFile<FsBaseFile, unsigned long long>::read()+0x32>
     81e:	movs	r2, #1
     820:	add.w	r1, sp, #7
     824:	bl	8f50 <ExFatFile::read(void*, unsigned int)>
     828:	b.n	80c <StreamFile<FsBaseFile, unsigned long long>::read()+0x14>
   * \return For success return the next byte in the file as an int.
   * If an error occurs or end of file is reached return -1.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
     82a:	mov.w	r0, #4294967295
     82e:	b.n	814 <StreamFile<FsBaseFile, unsigned long long>::read()+0x1c>

00000830 <StreamFile<FsBaseFile, unsigned long long>::flush()>:
   */
  int available() {
    return BaseFile::available();
  }
  /** Ensure that any bytes written to the file are saved to the SD card. */
  void flush() {
     830:	ldr	r3, [r0, #72]	; 0x48
   *
   * \return true for success or false for failure.
   */
  bool sync() {
    return m_fFile ? m_fFile->sync() :
           m_xFile ? m_xFile->sync() : false;
     832:	cbz	r3, 83a <StreamFile<FsBaseFile, unsigned long long>::flush()+0xa>
     834:	mov	r0, r3
     836:	b.w	b114 <FatFile::sync()>
     83a:	ldr	r0, [r0, #76]	; 0x4c
     83c:	cbz	r0, 842 <StreamFile<FsBaseFile, unsigned long long>::flush()+0x12>
     83e:	b.w	9f84 <ExFatFile::sync()>
     842:	bx	lr

00000844 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)>:
  /** Write a byte to a file. Required by the Arduino Print class.
   * \param[in] b the byte to be written.
   * Use getWriteError to check for errors.
   * \return 1 for success and 0 for failure.
   */
  size_t write(uint8_t b) {
     844:	push	{lr}
     846:	ldr	r3, [r0, #72]	; 0x48
     848:	sub	sp, #12
     84a:	strb.w	r1, [sp, #7]
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const void* buf, size_t count) {
    return m_fFile ? m_fFile->write(buf, count) :
           m_xFile ? m_xFile->write(buf, count) : 0;
     84e:	cbz	r3, 862 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)+0x1e>
     850:	mov	r0, r3
     852:	movs	r2, #1
     854:	add.w	r1, sp, #7
     858:	bl	b198 <FatFile::write(void const*, unsigned int)>
    return BaseFile::write(b);
  }
     85c:	add	sp, #12
     85e:	ldr.w	pc, [sp], #4
     862:	ldr	r0, [r0, #76]	; 0x4c
     864:	cmp	r0, #0
     866:	beq.n	85c <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)+0x18>
     868:	movs	r2, #1
     86a:	add.w	r1, sp, #7
     86e:	bl	a39c <ExFatFile::write(void const*, unsigned int)>
     872:	add	sp, #12
     874:	ldr.w	pc, [sp], #4

00000878 <logg(unsigned long, char const*) [clone .part.55]>:
}

/**************** Online logging *******************************/
extern uint32_t loop_count, acq_count, acq_miss, maxDel;
extern uint16_t maxCount;
void logg(uint32_t del, const char *txt)
     878:	stmdb	sp!, {r4, r5, r6, r7, r9, lr}
{ static uint32_t to;
  if(millis()-to > del)
  {
    Serial.printf("%s: %6d %4d; %4d %4d; %4d\n",
            txt,loop_count, acq_count, acq_miss,maxCount, maxDel); 
     87c:	ldr	r4, [pc, #72]	; (8c8 <logg(unsigned long, char const*) [clone .part.55]+0x50>)
extern uint16_t maxCount;
void logg(uint32_t del, const char *txt)
{ static uint32_t to;
  if(millis()-to > del)
  {
    Serial.printf("%s: %6d %4d; %4d %4d; %4d\n",
     87e:	ldr	r5, [pc, #76]	; (8cc <logg(unsigned long, char const*) [clone .part.55]+0x54>)
            txt,loop_count, acq_count, acq_miss,maxCount, maxDel); 
     880:	ldr	r1, [r4, #0]
     882:	ldr	r6, [pc, #76]	; (8d0 <logg(unsigned long, char const*) [clone .part.55]+0x58>)
     884:	ldr	r7, [pc, #76]	; (8d4 <logg(unsigned long, char const*) [clone .part.55]+0x5c>)
     886:	ldrh	r2, [r5, #0]
     888:	ldr.w	r9, [pc, #92]	; 8e8 <logg(unsigned long, char const*) [clone .part.55]+0x70>
}

/**************** Online logging *******************************/
extern uint32_t loop_count, acq_count, acq_miss, maxDel;
extern uint16_t maxCount;
void logg(uint32_t del, const char *txt)
     88c:	sub	sp, #24
{ static uint32_t to;
  if(millis()-to > del)
  {
    Serial.printf("%s: %6d %4d; %4d %4d; %4d\n",
            txt,loop_count, acq_count, acq_miss,maxCount, maxDel); 
     88e:	ldr.w	r3, [r9]
     892:	str	r1, [sp, #12]
     894:	ldr	r1, [r7, #0]
     896:	str	r2, [sp, #8]
     898:	mov	r2, r0
     89a:	ldr	r0, [r6, #0]
     89c:	str	r0, [sp, #4]
     89e:	str	r1, [sp, #0]
     8a0:	ldr	r0, [pc, #52]	; (8d8 <logg(unsigned long, char const*) [clone .part.55]+0x60>)
     8a2:	ldr	r1, [pc, #56]	; (8dc <logg(unsigned long, char const*) [clone .part.55]+0x64>)
     8a4:	bl	e7dc <Print::printf(char const*, ...)>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     8a8:	ldr	r3, [pc, #52]	; (8e0 <logg(unsigned long, char const*) [clone .part.55]+0x68>)
    loop_count=0;
    acq_count=0;
    acq_miss=0;
    maxCount=0;
    maxDel=0;
    to=millis();
     8aa:	ldr	r2, [pc, #56]	; (8e4 <logg(unsigned long, char const*) [clone .part.55]+0x6c>)
     8ac:	ldr	r3, [r3, #0]
     8ae:	str	r3, [sp, #20]
	return ret;
     8b0:	ldr	r1, [sp, #20]
     8b2:	str	r1, [r2, #0]
{ static uint32_t to;
  if(millis()-to > del)
  {
    Serial.printf("%s: %6d %4d; %4d %4d; %4d\n",
            txt,loop_count, acq_count, acq_miss,maxCount, maxDel); 
    loop_count=0;
     8b4:	movs	r3, #0
     8b6:	str.w	r3, [r9]
    acq_count=0;
     8ba:	str	r3, [r7, #0]
    acq_miss=0;
     8bc:	str	r3, [r6, #0]
    maxCount=0;
     8be:	strh	r3, [r5, #0]
    maxDel=0;
     8c0:	str	r3, [r4, #0]
    to=millis();
  }
}
     8c2:	add	sp, #24
     8c4:	ldmia.w	sp!, {r4, r5, r6, r7, r9, pc}
     8c8:	.word	0x1fff9738
     8cc:	.word	0x20002b04
     8d0:	.word	0x20002b18
     8d4:	.word	0x1fffb93c
     8d8:	.word	0x1fff8d50
     8dc:	.word	0x000142c8
     8e0:	.word	0x200030a4
     8e4:	.word	0x20002b20
     8e8:	.word	0x20002b08

000008ec <SDClass::remove(char const*)>:
		return sdfs.mkdir(filepath);
	}
	bool rename(const char *oldfilepath, const char *newfilepath) {
		return sdfs.rename(oldfilepath, newfilepath);
	}
	bool remove(const char *filepath) {
     8ec:	push	{r4, lr}
     8ee:	ldr.w	r4, [r0, #1156]	; 0x484
     8f2:	sub	sp, #56	; 0x38
  *
   * \return true for success or false for failure.
  */
  bool remove(const char *path) {
    return m_fVol ? m_fVol->remove(path) :
           m_xVol ? m_xVol->remove(path) : false;
     8f4:	cbz	r4, 920 <SDClass::remove(char const*)+0x34>
   *
   * \return true for success or false for failure.
   */
  bool remove(const char* path) {
    FatFile tmp;
    return tmp.open(this, path, O_WRONLY) && tmp.remove();
     8f6:	mov	r2, r1
     8f8:	mov	r0, sp
     8fa:	mov	r1, r4
     8fc:	movs	r3, #1
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() {}
     8fe:	movs	r4, #0
     900:	strb.w	r4, [sp]
     904:	strb.w	r4, [sp, #1]
     908:	strb.w	r4, [sp, #2]
     90c:	bl	aabc <FatFile::open(FatVolume*, char const*, int)>
     910:	cbnz	r0, 916 <SDClass::remove(char const*)+0x2a>
		return sdfs.remove(filepath);
	}
     912:	add	sp, #56	; 0x38
     914:	pop	{r4, pc}
     916:	mov	r0, sp
     918:	bl	bacc <FatFile::remove()>
     91c:	add	sp, #56	; 0x38
     91e:	pop	{r4, pc}
     920:	ldr.w	r0, [r0, #1160]	; 0x488
     924:	cmp	r0, #0
     926:	beq.n	912 <SDClass::remove(char const*)+0x26>
   *
   * \return true for success or false for failure.
   */
  bool remove(const ExChar_t* path) {
    ExFatFile tmp;
    return tmp.open(this, path, O_WRONLY) && tmp.remove();
     928:	mov	r2, r1
     92a:	movs	r3, #1
     92c:	mov	r1, r0
     92e:	mov	r0, sp
 * \brief Basic file class.
 */
class ExFatFile {
 public:
  /** Create an instance. */
  ExFatFile() {}
     930:	strb.w	r4, [sp, #49]	; 0x31
     934:	strb.w	r4, [sp, #50]	; 0x32
     938:	strb.w	r4, [sp, #51]	; 0x33
     93c:	bl	9704 <ExFatFile::open(ExFatVolume*, char const*, int)>
     940:	cmp	r0, #0
     942:	beq.n	912 <SDClass::remove(char const*)+0x26>
     944:	mov	r0, sp
     946:	bl	9d14 <ExFatFile::remove()>
     94a:	add	sp, #56	; 0x38
     94c:	pop	{r4, pc}
     94e:	nop

00000950 <SDFile::name()>:
		sdfatfile.close();
	}
	virtual operator bool() {
		return sdfatfile.isOpen();
	}
	virtual const char * name() {
     950:	push	{r3, r4, r5, lr}
		if (!filename) {
     952:	ldr	r4, [r0, #100]	; 0x64
     954:	cbz	r4, 95a <SDFile::name()+0xa>
				static char zeroterm = 0;
				filename = &zeroterm;
			}
		}
		return filename;
	}
     956:	mov	r0, r4
     958:	pop	{r3, r4, r5, pc}
     95a:	mov	r5, r0
	virtual operator bool() {
		return sdfatfile.isOpen();
	}
	virtual const char * name() {
		if (!filename) {
			filename = (char *)malloc(MAX_FILENAME_LEN);
     95c:	mov.w	r0, #256	; 0x100
     960:	bl	ff44 <malloc>
     964:	mov	r1, r0
     966:	str	r0, [r5, #100]	; 0x64
			if (filename) {
     968:	cbz	r0, 98c <SDFile::name()+0x3c>
   *             truncated if the file's name is too long.
   * \return The length of the returned string.
   */
  size_t getName(char* name, size_t len) {
    *name = 0;
    return m_fFile ? m_fFile->getName(name, len) :
     96a:	ldr	r0, [r5, #92]	; 0x5c
   *             must be at least 13 bytes long.  The file's name will be
   *             truncated if the file's name is too long.
   * \return The length of the returned string.
   */
  size_t getName(char* name, size_t len) {
    *name = 0;
     96c:	strb	r4, [r1, #0]
    return m_fFile ? m_fFile->getName(name, len) :
           m_xFile ? m_xFile->getName(name, len) : 0;
     96e:	cbz	r0, 97c <SDFile::name()+0x2c>
     970:	mov.w	r2, #256	; 0x100
     974:	bl	b794 <FatFile::getName(char*, unsigned int)>
     978:	ldr	r4, [r5, #100]	; 0x64
     97a:	b.n	956 <SDFile::name()+0x6>
     97c:	ldr	r0, [r5, #96]	; 0x60
     97e:	cbz	r0, 992 <SDFile::name()+0x42>
     980:	mov.w	r2, #256	; 0x100
     984:	bl	8db4 <ExFatFile::getName(char*, unsigned int)>
     988:	ldr	r4, [r5, #100]	; 0x64
     98a:	b.n	956 <SDFile::name()+0x6>
				sdfatfile.getName(filename, MAX_FILENAME_LEN);
			} else {
				static char zeroterm = 0;
				filename = &zeroterm;
     98c:	ldr	r4, [pc, #8]	; (998 <SDFile::name()+0x48>)
     98e:	str	r4, [r5, #100]	; 0x64
     990:	b.n	956 <SDFile::name()+0x6>
     992:	mov	r4, r1
     994:	b.n	956 <SDFile::name()+0x6>
     996:	nop
     998:	.word	0x1fff972c

0000099c <SDFile::truncate(unsigned long long)>:
		sdfatfile.flush();
	}
	virtual size_t read(void *buf, size_t nbyte) {
		return sdfatfile.read(buf, nbyte);
	}
	virtual bool truncate(uint64_t size=0) {
     99c:	push	{r4, r6, r7, lr}
     99e:	ldr	r4, [r0, #92]	; 0x5c
   *
   * \return true for success or false for failure.
   */
  bool truncate(uint64_t length) {
    return m_fFile ? length < (1ULL << 32) && m_fFile->truncate(length) :
           m_xFile ? m_xFile->truncate(length) : false;
     9a0:	cbz	r4, 9c6 <SDFile::truncate(unsigned long long)+0x2a>
   * \param[in] length The desired length for the file.
   *
   * \return true for success or false for failure.
   */
  bool truncate(uint64_t length) {
    return m_fFile ? length < (1ULL << 32) && m_fFile->truncate(length) :
     9a2:	cmp	r3, #1
     9a4:	it	eq
     9a6:	cmpeq	r2, #0
     9a8:	bcc.n	9ae <SDFile::truncate(unsigned long long)+0x12>
     9aa:	movs	r0, #0
		return sdfatfile.truncate(size);
	}
     9ac:	pop	{r4, r6, r7, pc}
   * \param[in] length The desired length for the file.
   *
   * \return true for success or false for failure.
   */
  bool truncate(uint32_t length) {
    return seekSet(length) && truncate();
     9ae:	mov	r1, r2
     9b0:	mov	r0, r4
     9b2:	bl	af0c <FatFile::seekSet(unsigned long)>
     9b6:	cmp	r0, #0
     9b8:	beq.n	9aa <SDFile::truncate(unsigned long long)+0xe>
     9ba:	mov	r0, r4
     9bc:	bl	b120 <FatFile::truncate()>
     9c0:	cmp	r0, #0
     9c2:	beq.n	9aa <SDFile::truncate(unsigned long long)+0xe>
     9c4:	pop	{r4, r6, r7, pc}
           m_xFile ? m_xFile->truncate(length) : false;
     9c6:	ldr	r4, [r0, #96]	; 0x60
     9c8:	cmp	r4, #0
     9ca:	beq.n	9aa <SDFile::truncate(unsigned long long)+0xe>
   * \param[in] length The desired length for the file.
   *
   * \return true for success or false for failure.
   */
  bool truncate(uint64_t length) {
    return seekSet(length) && truncate();
     9cc:	mov	r0, r4
     9ce:	bl	9128 <ExFatFile::seekSet(unsigned long long)>
     9d2:	cmp	r0, #0
     9d4:	beq.n	9aa <SDFile::truncate(unsigned long long)+0xe>
     9d6:	mov	r0, r4
     9d8:	ldmia.w	sp!, {r4, r6, r7, lr}
     9dc:	b.w	a2b8 <ExFatFile::truncate()>

000009e0 <SDClass::mkdir(char const*)>:
		return File();
	}
	bool exists(const char *filepath) {
		return sdfs.exists(filepath);
	}
	bool mkdir(const char *filepath) {
     9e0:	push	{r4, lr}
     9e2:	ldr.w	r4, [r0, #1156]	; 0x484
     9e6:	sub	sp, #56	; 0x38
   *
   * \return true for success or false for failure.
   */
  bool mkdir(const char *path, bool pFlag = true) {
    return m_fVol ? m_fVol->mkdir(path, pFlag) :
           m_xVol ? m_xVol->mkdir(path, pFlag) : false;
     9e8:	cbz	r4, a0a <SDClass::mkdir(char const*)+0x2a>
   *
   * \return true for success or false for failure.
   */
  bool mkdir(const char* path, bool pFlag = true) {
    FatFile sub;
    return sub.mkdir(vwd(), path, pFlag);
     9ea:	mov	r2, r1
     9ec:	movs	r3, #1
     9ee:	addw	r1, r4, #1092	; 0x444
     9f2:	mov	r0, sp
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() {}
     9f4:	movs	r4, #0
     9f6:	strb.w	r4, [sp]
     9fa:	strb.w	r4, [sp, #1]
     9fe:	strb.w	r4, [sp, #2]
     a02:	bl	a938 <FatFile::mkdir(FatFile*, char const*, bool)>
		return sdfs.mkdir(filepath);
	}
     a06:	add	sp, #56	; 0x38
     a08:	pop	{r4, pc}
     a0a:	ldr.w	r0, [r0, #1160]	; 0x488
     a0e:	cmp	r0, #0
     a10:	beq.n	a06 <SDClass::mkdir(char const*)+0x26>
   *
   * \return true for success or false for failure.
   */
  bool mkdir(const ExChar_t* path, bool pFlag = true) {
    ExFatFile sub;
    return sub.mkdir(vwd(), path, pFlag);
     a12:	mov	r2, r1
     a14:	movs	r3, #1
     a16:	add.w	r1, r0, #1096	; 0x448
     a1a:	mov	r0, sp
 * \brief Basic file class.
 */
class ExFatFile {
 public:
  /** Create an instance. */
  ExFatFile() {}
     a1c:	strb.w	r4, [sp, #49]	; 0x31
     a20:	strb.w	r4, [sp, #50]	; 0x32
     a24:	strb.w	r4, [sp, #51]	; 0x33
     a28:	bl	a134 <ExFatFile::mkdir(ExFatFile*, char const*, bool)>
     a2c:	add	sp, #56	; 0x38
     a2e:	pop	{r4, pc}

00000a30 <SDClass::exists(char const*)>:
		else if (mode == FILE_WRITE_BEGIN) flags = O_RDWR | O_CREAT;
		SDFAT_FILE file = sdfs.open(filepath, flags);
		if (file) return File(new SDFile(file));
		return File();
	}
	bool exists(const char *filepath) {
     a30:	push	{r4, r5, lr}
     a32:	ldr.w	r4, [r0, #1156]	; 0x484
     a36:	sub	sp, #60	; 0x3c
   *
   * \return true if the file exists else false.
   */
  bool exists(const char* path) {
    return m_fVol ? m_fVol->exists(path) :
           m_xVol ? m_xVol->exists(path) : false;
     a38:	cbz	r4, a58 <SDClass::exists(char const*)+0x28>
     a3a:	movs	r5, #0
   *
   * \return true if the file exists else false.
   */
  bool exists(const char* path) {
    FatFile tmp;
    return tmp.open(this, path, O_RDONLY);
     a3c:	mov	r2, r1
     a3e:	mov	r3, r5
     a40:	mov	r1, r4
     a42:	mov	r0, sp
     a44:	strb.w	r5, [sp]
     a48:	strb.w	r5, [sp, #1]
     a4c:	strb.w	r5, [sp, #2]
     a50:	bl	aabc <FatFile::open(FatVolume*, char const*, int)>
		return sdfs.exists(filepath);
	}
     a54:	add	sp, #60	; 0x3c
     a56:	pop	{r4, r5, pc}
     a58:	ldr.w	r0, [r0, #1160]	; 0x488
     a5c:	cmp	r0, #0
     a5e:	beq.n	a54 <SDClass::exists(char const*)+0x24>
   *
   * \return true if the file exists else false.
   */
  bool exists(const ExChar_t* path) {
    ExFatFile tmp;
    return tmp.open(this, path, O_RDONLY);
     a60:	mov	r2, r1
     a62:	mov	r3, r4
     a64:	mov	r1, r0
     a66:	mov	r0, sp
     a68:	strb.w	r4, [sp, #49]	; 0x31
     a6c:	strb.w	r4, [sp, #50]	; 0x32
     a70:	strb.w	r4, [sp, #51]	; 0x33
     a74:	bl	9704 <ExFatFile::open(ExFatVolume*, char const*, int)>
     a78:	add	sp, #60	; 0x3c
     a7a:	pop	{r4, r5, pc}

00000a7c <SDFile::rewindDirectory()>:
	virtual File openNextFile(uint8_t mode=0) {
		SDFAT_FILE file = sdfatfile.openNextFile();
		if (file) return File(new SDFile(file));
		return File();
	}
	virtual void rewindDirectory(void) {
     a7c:	ldr	r3, [r0, #92]	; 0x5c
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
  }
  /** \return True if this is a directory else false. */
  bool isDir() const {
    return m_fFile ? m_fFile->isDir() :
           m_xFile ? m_xFile->isDir() : false;
     a7e:	cbz	r3, aa8 <SDFile::rewindDirectory()+0x2c>
  int read() {
    return BaseFile::read();
  }
  /** Rewind a file if it is a directory */
  void rewindDirectory() {
    if (BaseFile::isDir()) {
     a80:	ldrb	r2, [r3, #0]
     a82:	tst.w	r2, #112	; 0x70
     a86:	bne.n	a8a <SDFile::rewindDirectory()+0xe>
     a88:	bx	lr
     a8a:	push	{r4, lr}
     a8c:	mov	r4, r0
   * \return true for success or false for failure.
   */
  bool rename(FatFile* dirFile, const char* newPath);
  /** Set the file's current position to zero. */
  void rewind() {
    seekSet(0);
     a8e:	movs	r1, #0
     a90:	mov	r0, r3
     a92:	bl	af0c <FatFile::seekSet(unsigned long)>
     a96:	ldr	r0, [r4, #96]	; 0x60
           m_xFile ? m_xFile->rename(dirFile->m_xFile, newPath) : false;
  }
  /** Set the file's current position to zero. */
  void rewind() {
    if (m_fFile) m_fFile->rewind();
    if (m_xFile) m_xFile->rewind();
     a98:	cbz	r0, aa6 <SDFile::rewindDirectory()+0x2a>
   * \return true for success or false for failure.
   */
  bool rename(ExFatFile* dirFile, const ExChar_t* newPath);
  /** Set the file's current position to zero. */
  void rewind() {
    seekSet(0);
     a9a:	movs	r2, #0
     a9c:	movs	r3, #0
		sdfatfile.rewindDirectory();
	}
     a9e:	ldmia.w	sp!, {r4, lr}
     aa2:	b.w	9128 <ExFatFile::seekSet(unsigned long long)>
     aa6:	pop	{r4, pc}
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
  }
  /** \return True if this is a directory else false. */
  bool isDir() const {
    return m_fFile ? m_fFile->isDir() :
           m_xFile ? m_xFile->isDir() : false;
     aa8:	ldr	r0, [r0, #96]	; 0x60
     aaa:	cmp	r0, #0
     aac:	beq.n	a88 <SDFile::rewindDirectory()+0xc>
     aae:	ldrb.w	r3, [r0, #49]	; 0x31
     ab2:	tst.w	r3, #80	; 0x50
     ab6:	beq.n	a88 <SDFile::rewindDirectory()+0xc>
     ab8:	movs	r2, #0
     aba:	movs	r3, #0
     abc:	b.w	9128 <ExFatFile::seekSet(unsigned long long)>

00000ac0 <SDClass::rename(char const*, char const*)>:
		return sdfs.exists(filepath);
	}
	bool mkdir(const char *filepath) {
		return sdfs.mkdir(filepath);
	}
	bool rename(const char *oldfilepath, const char *newfilepath) {
     ac0:	push	{r4, r5, r6, lr}
     ac2:	ldr.w	r4, [r0, #1156]	; 0x484
     ac6:	sub	sp, #56	; 0x38
     ac8:	mov	r6, r2
   *
   * \return true for success or false for failure.
   */
  bool rename(const char *oldPath, const char *newPath) {
    return m_fVol ? m_fVol->rename(oldPath, newPath) :
           m_xVol ? m_xVol->rename(oldPath, newPath) : false;
     aca:	cbz	r4, afe <SDClass::rename(char const*, char const*)+0x3e>
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() {}
     acc:	movs	r5, #0
#endif  // ENABLE_ARDUINO_STRING

 private:
  friend FatFile;
  static FatVolume* cwv() {return m_cwv;}
  FatFile* vwd() {return &m_vwd;}
     ace:	addw	r4, r4, #1092	; 0x444
   *
   * \return true for success or false for failure.
   */
  bool rename(const char *oldPath, const char *newPath) {
    FatFile file;
    return file.open(vwd(), oldPath, O_RDONLY) && file.rename(vwd(), newPath);
     ad2:	mov	r2, r1
     ad4:	mov	r3, r5
     ad6:	mov	r1, r4
     ad8:	mov	r0, sp
     ada:	strb.w	r5, [sp]
     ade:	strb.w	r5, [sp, #1]
     ae2:	strb.w	r5, [sp, #2]
     ae6:	bl	a9fc <FatFile::open(FatFile*, char const*, int)>
     aea:	cbnz	r0, af0 <SDClass::rename(char const*, char const*)+0x30>
		return sdfs.rename(oldfilepath, newfilepath);
	}
     aec:	add	sp, #56	; 0x38
     aee:	pop	{r4, r5, r6, pc}
     af0:	mov	r2, r6
     af2:	mov	r1, r4
     af4:	mov	r0, sp
     af6:	bl	acdc <FatFile::rename(FatFile*, char const*)>
     afa:	add	sp, #56	; 0x38
     afc:	pop	{r4, r5, r6, pc}
     afe:	ldr.w	r0, [r0, #1160]	; 0x488
     b02:	cmp	r0, #0
     b04:	beq.n	aec <SDClass::rename(char const*, char const*)+0x2c>
#endif  //  USE_EXFAT_UNICODE_NAMES

 private:
  friend ExFatFile;
  static ExFatVolume* cwv() {return m_cwv;}
  ExFatFile* vwd() {return &m_vwd;}
     b06:	add.w	r5, r0, #1096	; 0x448
   *
   * \return true for success or false for failure.
   */
  bool rename(const ExChar_t* oldPath, const ExChar_t* newPath) {
    ExFatFile file;
    return file.open(vwd(), oldPath, O_RDONLY) && file.rename(vwd(), newPath);
     b0a:	mov	r2, r1
     b0c:	mov	r3, r4
     b0e:	mov	r1, r5
     b10:	mov	r0, sp
 * \brief Basic file class.
 */
class ExFatFile {
 public:
  /** Create an instance. */
  ExFatFile() {}
     b12:	strb.w	r4, [sp, #49]	; 0x31
     b16:	strb.w	r4, [sp, #50]	; 0x32
     b1a:	strb.w	r4, [sp, #51]	; 0x33
     b1e:	bl	9604 <ExFatFile::open(ExFatFile*, char const*, int)>
     b22:	cmp	r0, #0
     b24:	beq.n	aec <SDClass::rename(char const*, char const*)+0x2c>
     b26:	mov	r2, r6
     b28:	mov	r1, r5
     b2a:	mov	r0, sp
     b2c:	bl	a20c <ExFatFile::rename(ExFatFile*, char const*)>
     b30:	add	sp, #56	; 0x38
     b32:	pop	{r4, r5, r6, pc}

00000b34 <SDClass::rmdir(char const*)>:
	bool remove(const char *filepath) {
		return sdfs.remove(filepath);
	}
	bool rmdir(const char *filepath) {
     b34:	push	{r4, r5, lr}
     b36:	ldr.w	r4, [r0, #1156]	; 0x484
     b3a:	sub	sp, #60	; 0x3c
   *
   * \return true for success or false for failure.
   */
  bool rmdir(const char *path) {
    return m_fVol ? m_fVol->rmdir(path) :
           m_xVol ? m_xVol->rmdir(path) : false;
     b3c:	cbz	r4, b68 <SDClass::rmdir(char const*)+0x34>
     b3e:	movs	r5, #0
   *
   * \return true for success or false for failure.
   */
  bool rmdir(const char* path) {
    FatFile sub;
    return sub.open(this, path, O_RDONLY) && sub.rmdir();
     b40:	mov	r2, r1
     b42:	mov	r3, r5
     b44:	mov	r1, r4
     b46:	mov	r0, sp
     b48:	strb.w	r5, [sp]
     b4c:	strb.w	r5, [sp, #1]
     b50:	strb.w	r5, [sp, #2]
     b54:	bl	aabc <FatFile::open(FatVolume*, char const*, int)>
     b58:	cbnz	r0, b5e <SDClass::rmdir(char const*)+0x2a>
		return sdfs.rmdir(filepath);
	}
     b5a:	add	sp, #60	; 0x3c
     b5c:	pop	{r4, r5, pc}
     b5e:	mov	r0, sp
     b60:	bl	aeb0 <FatFile::rmdir()>
     b64:	add	sp, #60	; 0x3c
     b66:	pop	{r4, r5, pc}
     b68:	ldr.w	r0, [r0, #1160]	; 0x488
     b6c:	cmp	r0, #0
     b6e:	beq.n	b5a <SDClass::rmdir(char const*)+0x26>
   *
   * \return true for success or false for failure.
   */
  bool rmdir(const ExChar_t* path) {
    ExFatFile sub;
    return sub.open(this, path, O_RDONLY) && sub.rmdir();
     b70:	mov	r2, r1
     b72:	mov	r3, r4
     b74:	mov	r1, r0
     b76:	mov	r0, sp
     b78:	strb.w	r4, [sp, #49]	; 0x31
     b7c:	strb.w	r4, [sp, #50]	; 0x32
     b80:	strb.w	r4, [sp, #51]	; 0x33
     b84:	bl	9704 <ExFatFile::open(ExFatVolume*, char const*, int)>
     b88:	cmp	r0, #0
     b8a:	beq.n	b5a <SDClass::rmdir(char const*)+0x26>
     b8c:	mov	r0, sp
     b8e:	bl	9de8 <ExFatFile::rmdir()>
     b92:	add	sp, #60	; 0x3c
     b94:	pop	{r4, r5, pc}
     b96:	nop

00000b98 <SDClass::usedSize()>:
	uint64_t usedSize() {
     b98:	push	{r3, r4, r5, lr}
     b9a:	mov	r5, r0
     b9c:	ldr.w	r0, [r0, #1156]	; 0x484
  /** Change global working volume to this volume. */
  void chvol() {m_cwv = this;}
  /** \return The total number of clusters in the volume. */
  uint32_t clusterCount() const {
    return m_fVol ? m_fVol->clusterCount() :
           m_xVol ? m_xVol->clusterCount() : 0;
     ba0:	cbz	r0, bd4 <SDClass::usedSize()+0x3c>
  uint8_t* cacheClear() {
    return m_cache.clear();
  }
  /** \return The total number of clusters in the volume. */
  uint32_t clusterCount() const {
    return m_lastCluster - 1;
     ba2:	ldr	r4, [r0, #28]
     ba4:	subs	r4, #1
    return m_fVol ? m_fVol->fatType() :
           m_xVol ? m_xVol->fatType() : 0;
  }
  /** \return the free cluster count. */
  uint32_t freeClusterCount() const {
    return m_fVol ? m_fVol->freeClusterCount() :
     ba6:	bl	b54c <FatPartition::freeClusterCount()>
     baa:	ldr.w	r3, [r5, #1156]	; 0x484
		return (uint64_t)(sdfs.clusterCount() - sdfs.freeClusterCount())
     bae:	subs	r4, r4, r0
  uint32_t blocksPerCluster() __attribute__ ((deprecated)) {return sectorsPerCluster();} //NOLINT
#endif  // DOXYGEN_SHOULD_SKIP_THIS
  /** \return the number of bytes in a cluster. */
  uint32_t bytesPerCluster() const {
    return m_fVol ? m_fVol->bytesPerCluster() :
           m_xVol ? m_xVol->bytesPerCluster() : 0;
     bb0:	cbz	r3, bc4 <SDClass::usedSize()+0x2c>
     bb2:	ldrb	r0, [r3, #6]
     bb4:	mov.w	r3, #512	; 0x200
     bb8:	lsl.w	r0, r3, r0
     bbc:	uxth	r0, r0
     bbe:	umull	r0, r1, r0, r4
     bc2:	pop	{r3, r4, r5, pc}
     bc4:	ldr.w	r3, [r5, #1160]	; 0x488
     bc8:	cbz	r3, be4 <SDClass::usedSize()+0x4c>
     bca:	ldr.w	r0, [r3, #1084]	; 0x43c
     bce:	umull	r0, r1, r0, r4
     bd2:	pop	{r3, r4, r5, pc}
  /** Change global working volume to this volume. */
  void chvol() {m_cwv = this;}
  /** \return The total number of clusters in the volume. */
  uint32_t clusterCount() const {
    return m_fVol ? m_fVol->clusterCount() :
           m_xVol ? m_xVol->clusterCount() : 0;
     bd4:	ldr.w	r0, [r5, #1160]	; 0x488
     bd8:	cbz	r0, be4 <SDClass::usedSize()+0x4c>
     bda:	ldr.w	r4, [r0, #1072]	; 0x430
           m_xVol ? m_xVol->fatType() : 0;
  }
  /** \return the free cluster count. */
  uint32_t freeClusterCount() const {
    return m_fVol ? m_fVol->freeClusterCount() :
           m_xVol ? m_xVol->freeClusterCount() : 0;
     bde:	bl	9a8c <ExFatPartition::freeClusterCount()>
     be2:	b.n	baa <SDClass::usedSize()+0x12>
  /** Change global working volume to this volume. */
  void chvol() {m_cwv = this;}
  /** \return The total number of clusters in the volume. */
  uint32_t clusterCount() const {
    return m_fVol ? m_fVol->clusterCount() :
           m_xVol ? m_xVol->clusterCount() : 0;
     be4:	movs	r0, #0
     be6:	movs	r1, #0
		  * (uint64_t)sdfs.bytesPerCluster();
	}
     be8:	pop	{r3, r4, r5, pc}
     bea:	nop

00000bec <SDFile::position()>:
		if (mode == SeekSet) return sdfatfile.seekSet(pos);
		if (mode == SeekCur) return sdfatfile.seekCur(pos);
		if (mode == SeekEnd) return sdfatfile.seekEnd(pos);
		return false;
	}
	virtual uint64_t position() {
     bec:	ldr	r3, [r0, #92]	; 0x5c
           m_xFile ? m_xFile->contiguousRange(bgnSector, endSector) : false;
  }
  /** \return The current position for a file or directory. */
  uint64_t curPosition() const {
    return m_fFile ? m_fFile->curPosition() :
           m_xFile ? m_xFile->curPosition() : 0;
     bee:	cbz	r3, bf6 <SDFile::position()+0xa>
     bf0:	ldr	r0, [r3, #20]
     bf2:	movs	r1, #0
     bf4:	bx	lr
     bf6:	ldr	r3, [r0, #96]	; 0x60
     bf8:	cbz	r3, c00 <SDFile::position()+0x14>
     bfa:	ldmia.w	r3, {r0, r1}
     bfe:	bx	lr
     c00:	mov	r0, r3
     c02:	mov	r1, r3
		return sdfatfile.curPosition();
	}
     c04:	bx	lr
     c06:	nop

00000c08 <SDFile::size()>:
	virtual uint64_t size() {
     c08:	ldr	r3, [r0, #92]	; 0x5c
           m_xFile ? m_xFile->fgets(str, num, delim) : -1;
  }
  /** \return The total number of bytes in a file. */
  uint64_t fileSize() const {
    return m_fFile ? m_fFile->fileSize() :
           m_xFile ? m_xFile->fileSize() : 0;
     c0a:	cbz	r3, c12 <SDFile::size()+0xa>
     c0c:	ldr	r0, [r3, #28]
     c0e:	movs	r1, #0
     c10:	bx	lr
     c12:	ldr	r3, [r0, #96]	; 0x60
     c14:	cbz	r3, c1c <SDFile::size()+0x14>
     c16:	ldr	r0, [r3, #16]
     c18:	ldr	r1, [r3, #20]
     c1a:	bx	lr
     c1c:	mov	r0, r3
     c1e:	mov	r1, r3
		return sdfatfile.size();
	}
     c20:	bx	lr
     c22:	nop

00000c24 <SDFile::read(void*, unsigned int)>:
		return sdfatfile.available();
	}
	virtual void flush() {
		sdfatfile.flush();
	}
	virtual size_t read(void *buf, size_t nbyte) {
     c24:	ldr	r3, [r0, #92]	; 0x5c
   * read() called before a file has been opened, corrupt file system
   * or an I/O error occurred.
   */
  int read(void* buf, size_t count) {
    return m_fFile ? m_fFile->read(buf, count) :
           m_xFile ? m_xFile->read(buf, count) : -1;
     c26:	cbz	r3, c2e <SDFile::read(void*, unsigned int)+0xa>
     c28:	mov	r0, r3
     c2a:	b.w	aad8 <FatFile::read(void*, unsigned int)>
     c2e:	ldr	r0, [r0, #96]	; 0x60
     c30:	cbz	r0, c36 <SDFile::read(void*, unsigned int)+0x12>
     c32:	b.w	8f50 <ExFatFile::read(void*, unsigned int)>
		return sdfatfile.read(buf, nbyte);
	}
     c36:	mov.w	r0, #4294967295
     c3a:	bx	lr

00000c3c <SDFile::peek()>:
	}
#endif
	virtual size_t write(const void *buf, size_t size) {
		return sdfatfile.write(buf, size);
	}
	virtual int peek() {
     c3c:	ldr	r3, [r0, #92]	; 0x5c
   *
   * \return The byte if no error and not at eof else -1;
   */
  int peek() {
    return m_fFile ? m_fFile->peek() :
           m_xFile ? m_xFile->peek() : -1;
     c3e:	cbz	r3, c46 <SDFile::peek()+0xa>
     c40:	mov	r0, r3
     c42:	b.w	ac70 <FatFile::peek()>
     c46:	ldr	r0, [r0, #96]	; 0x60
     c48:	cbz	r0, c4e <SDFile::peek()+0x12>
     c4a:	b.w	90f8 <ExFatFile::peek()>
		return sdfatfile.peek();
	}
     c4e:	mov.w	r0, #4294967295
     c52:	bx	lr

00000c54 <SDClass::totalSize()>:
	}
	uint64_t usedSize() {
		return (uint64_t)(sdfs.clusterCount() - sdfs.freeClusterCount())
		  * (uint64_t)sdfs.bytesPerCluster();
	}
	uint64_t totalSize() {
     c54:	ldr.w	r2, [r0, #1156]	; 0x484
     c58:	cbz	r2, c6e <SDClass::totalSize()+0x1a>
     c5a:	ldrb	r1, [r2, #6]
     c5c:	ldr	r0, [r2, #28]
     c5e:	mov.w	r3, #512	; 0x200
     c62:	lsls	r3, r1
     c64:	uxth	r3, r3
     c66:	subs	r0, #1
     c68:	umull	r0, r1, r3, r0
     c6c:	bx	lr
     c6e:	ldr.w	r2, [r0, #1160]	; 0x488
     c72:	cbz	r2, c82 <SDClass::totalSize()+0x2e>
     c74:	ldr.w	r3, [r2, #1072]	; 0x430
     c78:	ldr.w	r0, [r2, #1084]	; 0x43c
     c7c:	umull	r0, r1, r3, r0
     c80:	bx	lr
     c82:	movs	r0, #0
     c84:	movs	r1, #0
		return (uint64_t)sdfs.clusterCount() * (uint64_t)sdfs.bytesPerCluster();
	}
     c86:	bx	lr

00000c88 <SDFile::isDirectory()>:
				filename = &zeroterm;
			}
		}
		return filename;
	}
	virtual boolean isDirectory(void) {
     c88:	ldr	r3, [r0, #92]	; 0x5c
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
  }
  /** \return True if this is a directory else false. */
  bool isDir() const {
    return m_fFile ? m_fFile->isDir() :
           m_xFile ? m_xFile->isDir() : false;
     c8a:	cbz	r3, c9a <SDFile::isDirectory()+0x12>
#if USE_FAT_FILE_FLAG_CONTIGUOUS
    /** \return True if the file is contiguous. */
  bool isContiguous() const {return m_flags & FILE_FLAG_CONTIGUOUS;}
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
  /** \return True if this is a directory. */
  bool isDir() const {return m_attributes & FILE_ATTR_DIR;}
     c8c:	ldrb	r3, [r3, #0]
     c8e:	tst.w	r3, #112	; 0x70
     c92:	ite	ne
     c94:	movne	r0, #1
     c96:	moveq	r0, #0
     c98:	bx	lr
     c9a:	ldr	r0, [r0, #96]	; 0x60
     c9c:	cbz	r0, cac <SDFile::isDirectory()+0x24>
   */
  bool isBusy();
  /** \return True if the file is contiguous. */
  bool isContiguous() const {return m_flags & FILE_FLAG_CONTIGUOUS;}
  /** \return True if this is a directory. */
  bool isDir() const  {return m_attributes & FILE_ATTR_DIR;}
     c9e:	ldrb.w	r3, [r0, #49]	; 0x31
     ca2:	tst.w	r3, #80	; 0x50
     ca6:	ite	ne
     ca8:	movne	r0, #1
     caa:	moveq	r0, #0
		return sdfatfile.isDirectory();
	}
     cac:	bx	lr
     cae:	nop

00000cb0 <SDClass::open(char const*, unsigned char)>:
		}
#endif
		return sdfs.begin(SdSpiConfig(csPin, SHARED_SPI, SD_SCK_MHZ(16)));
		//return sdfs.begin(csPin, SD_SCK_MHZ(24));
	}
	File open(const char *filepath, uint8_t mode = FILE_READ) {
     cb0:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		oflag_t flags = O_READ;
		if (mode == FILE_WRITE) flags = O_RDWR | O_CREAT | O_AT_END;
     cb4:	cmp	r3, #1
		}
#endif
		return sdfs.begin(SdSpiConfig(csPin, SHARED_SPI, SD_SCK_MHZ(16)));
		//return sdfs.begin(csPin, SD_SCK_MHZ(24));
	}
	File open(const char *filepath, uint8_t mode = FILE_READ) {
     cb6:	sub	sp, #80	; 0x50
     cb8:	mov	r5, r0
		oflag_t flags = O_READ;
		if (mode == FILE_WRITE) flags = O_RDWR | O_CREAT | O_AT_END;
     cba:	beq.n	d40 <SDClass::open(char const*, unsigned char)+0x90>
		else if (mode == FILE_WRITE_BEGIN) flags = O_RDWR | O_CREAT;
     cbc:	cmp	r3, #2
		SDFAT_FILE file = sdfs.open(filepath, flags);
     cbe:	add.w	r1, r1, #4
		//return sdfs.begin(csPin, SD_SCK_MHZ(24));
	}
	File open(const char *filepath, uint8_t mode = FILE_READ) {
		oflag_t flags = O_READ;
		if (mode == FILE_WRITE) flags = O_RDWR | O_CREAT | O_AT_END;
		else if (mode == FILE_WRITE_BEGIN) flags = O_RDWR | O_CREAT;
     cc2:	movw	r3, #514	; 0x202
		SDFAT_FILE file = sdfs.open(filepath, flags);
     cc6:	mov	r0, sp
		//return sdfs.begin(csPin, SD_SCK_MHZ(24));
	}
	File open(const char *filepath, uint8_t mode = FILE_READ) {
		oflag_t flags = O_READ;
		if (mode == FILE_WRITE) flags = O_RDWR | O_CREAT | O_AT_END;
		else if (mode == FILE_WRITE_BEGIN) flags = O_RDWR | O_CREAT;
     cc8:	it	ne
     cca:	movne	r3, #0
		SDFAT_FILE file = sdfs.open(filepath, flags);
     ccc:	bl	c2f8 <FsVolume::open(char const*, int)>
  bool isHidden() const {
    return m_fFile ? m_fFile->isHidden() :
           m_xFile ? m_xFile->isHidden() : false;
  }
  /** \return True if this is an open file/directory else false. */
  bool isOpen() const {return m_fFile || m_xFile;}
     cd0:	ldr	r3, [sp, #72]	; 0x48
     cd2:	cmp	r3, #0
     cd4:	beq.n	d52 <SDClass::open(char const*, unsigned char)+0xa2>
		if (file) return File(new SDFile(file));
     cd6:	movs	r0, #104	; 0x68
     cd8:	bl	e94c <operator new(unsigned int)>
     cdc:	mov	r4, r0
//#define BYTE 0
//#endif

class __FlashStringHelper;

class Print
     cde:	ldrb.w	r6, [sp, #4]
	// Classes derived from File are never meant to be constructed
	// anywhere other than open() in the parent FS class and
	// openNextFile() while traversing a directory.
	// Only the abstract File class which references these derived
	// classes is meant to have a public constructor!
	SDFile(const SDFAT_FILE &file) : sdfatfile(file), filename(nullptr) { }
     ce2:	ldr	r0, [pc, #136]	; (d6c <SDClass::open(char const*, unsigned char)+0xbc>)
#define Stream_h

#include <inttypes.h>
#include "Print.h"

class Stream : public Print
     ce4:	ldr	r1, [pc, #136]	; (d70 <SDClass::open(char const*, unsigned char)+0xc0>)
     ce6:	ldr	r2, [sp, #8]
     ce8:	ldrb.w	r3, [sp, #12]
     cec:	str	r0, [r4, #0]
/**
 * \class StreamFile
 * \brief StreamFile class.
 */
template<class BaseFile, typename PosType>
class StreamFile : public stream_t, public BaseFile {
     cee:	add	r7, sp, #16
     cf0:	strb	r6, [r4, #24]
     cf2:	str	r1, [r4, #20]
{
  public:
	constexpr Print() : write_error(0) {}
     cf4:	movs	r6, #0
{
  public:
	constexpr Stream() : _timeout(1000), read_error(0) {}
     cf6:	mov.w	r8, #1000	; 0x3e8
     cfa:	mov	r1, r7
     cfc:	add.w	r0, r4, #36	; 0x24
#define Stream_h

#include <inttypes.h>
#include "Print.h"

class Stream : public Print
     d00:	str	r2, [r4, #28]
     d02:	strb.w	r3, [r4, #32]
     d06:	strb	r6, [r4, #4]
{
  public:
	constexpr Stream() : _timeout(1000), read_error(0) {}
     d08:	strb	r6, [r4, #12]
     d0a:	str	r6, [r4, #16]
     d0c:	str.w	r8, [r4, #8]
     d10:	bl	c0b0 <FsBaseFile::FsBaseFile(FsBaseFile const&)>
		// or is_base_of
		//static_assert(std::is_same<decltype(*file),File>::value,
			//"File(File *file) constructor only accepts pointers "
			//"to derived classes, not File itself");
		f = file;
		if (f) f->refcount++;
     d14:	ldr	r3, [r4, #16]
};
/**
 * \class FsFile
 * \brief FsBaseFile file with Arduino Stream.
 */
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
     d16:	ldr	r1, [pc, #92]	; (d74 <SDClass::open(char const*, unsigned char)+0xc4>)
#define FILE_WHOAMI

class File : public Stream {
public:
	constexpr File() : f(nullptr) { }
	File(File *file) {
     d18:	ldr	r2, [pc, #92]	; (d78 <SDClass::open(char const*, unsigned char)+0xc8>)
     d1a:	str	r6, [r4, #100]	; 0x64
		// or is_base_of
		//static_assert(std::is_same<decltype(*file),File>::value,
			//"File(File *file) constructor only accepts pointers "
			//"to derived classes, not File itself");
		f = file;
		if (f) f->refcount++;
     d1c:	adds	r3, #1
     d1e:	strb	r6, [r5, #4]
     d20:	str.w	r8, [r5, #8]
     d24:	strb	r6, [r5, #12]
		// can we use is_same or is_polymorphic with static_assert?
		// or is_base_of
		//static_assert(std::is_same<decltype(*file),File>::value,
			//"File(File *file) constructor only accepts pointers "
			//"to derived classes, not File itself");
		f = file;
     d26:	str	r4, [r5, #16]
     d28:	str	r1, [r4, #20]
		if (f) f->refcount++;
     d2a:	str	r3, [r4, #16]
#define FILE_WHOAMI

class File : public Stream {
public:
	constexpr File() : f(nullptr) { }
	File(File *file) {
     d2c:	str	r2, [r5, #0]
     d2e:	ldr	r3, [pc, #76]	; (d7c <SDClass::open(char const*, unsigned char)+0xcc>)
     d30:	str	r3, [sp, #0]
   */
  FsBaseFile(const char* path, oflag_t oflag) {
    open(path, oflag);
  }

  ~FsBaseFile() {close();}
     d32:	mov	r0, r7
     d34:	bl	c128 <FsBaseFile::close()>
		if (mode == FILE_WRITE) flags = O_RDWR | O_CREAT | O_AT_END;
		else if (mode == FILE_WRITE_BEGIN) flags = O_RDWR | O_CREAT;
		SDFAT_FILE file = sdfs.open(filepath, flags);
		if (file) return File(new SDFile(file));
		return File();
	}
     d38:	mov	r0, r5
     d3a:	add	sp, #80	; 0x50
     d3c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return sdfs.begin(SdSpiConfig(csPin, SHARED_SPI, SD_SCK_MHZ(16)));
		//return sdfs.begin(csPin, SD_SCK_MHZ(24));
	}
	File open(const char *filepath, uint8_t mode = FILE_READ) {
		oflag_t flags = O_READ;
		if (mode == FILE_WRITE) flags = O_RDWR | O_CREAT | O_AT_END;
     d40:	movw	r3, #16898	; 0x4202
		else if (mode == FILE_WRITE_BEGIN) flags = O_RDWR | O_CREAT;
		SDFAT_FILE file = sdfs.open(filepath, flags);
     d44:	adds	r1, #4
     d46:	mov	r0, sp
     d48:	bl	c2f8 <FsVolume::open(char const*, int)>
  bool isHidden() const {
    return m_fFile ? m_fFile->isHidden() :
           m_xFile ? m_xFile->isHidden() : false;
  }
  /** \return True if this is an open file/directory else false. */
  bool isOpen() const {return m_fFile || m_xFile;}
     d4c:	ldr	r3, [sp, #72]	; 0x48
     d4e:	cmp	r3, #0
     d50:	bne.n	cd6 <SDClass::open(char const*, unsigned char)+0x26>
     d52:	ldr	r3, [sp, #76]	; 0x4c
     d54:	cmp	r3, #0
     d56:	bne.n	cd6 <SDClass::open(char const*, unsigned char)+0x26>
     d58:	mov.w	r1, #1000	; 0x3e8

#define FILE_WHOAMI

class File : public Stream {
public:
	constexpr File() : f(nullptr) { }
     d5c:	ldr	r2, [pc, #24]	; (d78 <SDClass::open(char const*, unsigned char)+0xc8>)
     d5e:	strb	r3, [r5, #4]
     d60:	strb	r3, [r5, #12]
     d62:	str	r3, [r5, #16]
     d64:	str	r1, [r5, #8]
     d66:	str	r2, [r5, #0]
     d68:	add	r7, sp, #16
     d6a:	b.n	d2e <SDClass::open(char const*, unsigned char)+0x7e>
     d6c:	.word	0x0001420c
     d70:	.word	0x00014140
     d74:	.word	0x00014188
     d78:	.word	0x000141ac
     d7c:	.word	0x00014164

00000d80 <SDFile::flush()>:
		return sdfatfile.peek();
	}
	virtual int available() {
		return sdfatfile.available();
	}
	virtual void flush() {
     d80:	ldr	r3, [r0, #92]	; 0x5c
   *
   * \return true for success or false for failure.
   */
  bool sync() {
    return m_fFile ? m_fFile->sync() :
           m_xFile ? m_xFile->sync() : false;
     d82:	cbz	r3, d8a <SDFile::flush()+0xa>
     d84:	mov	r0, r3
     d86:	b.w	b114 <FatFile::sync()>
     d8a:	ldr	r0, [r0, #96]	; 0x60
     d8c:	cbz	r0, d92 <SDFile::flush()+0x12>
     d8e:	b.w	9f84 <ExFatFile::sync()>
     d92:	bx	lr

00000d94 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)>:
   * \param[in] size Number of bytes to write.
   *
   * \return For success write() returns the number of bytes written, always
   * \a size.
   */
  size_t write(const uint8_t* buffer, size_t size) {
     d94:	ldr	r3, [r0, #72]	; 0x48
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const void* buf, size_t count) {
    return m_fFile ? m_fFile->write(buf, count) :
           m_xFile ? m_xFile->write(buf, count) : 0;
     d96:	cbz	r3, d9e <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)+0xa>
     d98:	mov	r0, r3
     d9a:	b.w	b198 <FatFile::write(void const*, unsigned int)>
     d9e:	ldr	r0, [r0, #76]	; 0x4c
     da0:	cbz	r0, da6 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)+0x12>
     da2:	b.w	a39c <ExFatFile::write(void const*, unsigned int)>
    return BaseFile::write(buffer, size);
  }
     da6:	bx	lr

00000da8 <SDFile::write(void const*, unsigned int)>:
	virtual void whoami() {
		Serial.printf("   SDFile this=%x, refcount=%u\n",
			(int)this, getRefcount());
	}
#endif
	virtual size_t write(const void *buf, size_t size) {
     da8:	ldr	r3, [r0, #92]	; 0x5c
     daa:	cbz	r3, db2 <SDFile::write(void const*, unsigned int)+0xa>
     dac:	mov	r0, r3
     dae:	b.w	b198 <FatFile::write(void const*, unsigned int)>
     db2:	ldr	r0, [r0, #96]	; 0x60
     db4:	cbz	r0, dba <SDFile::write(void const*, unsigned int)+0x12>
     db6:	b.w	a39c <ExFatFile::write(void const*, unsigned int)>
		return sdfatfile.write(buf, size);
	}
     dba:	bx	lr

00000dbc <StreamFile<FsBaseFile, unsigned long long>::available()>:
  StreamFile() {}

  /** \return number of bytes available from the current position to EOF
   *   or INT_MAX if more than INT_MAX bytes are available.
   */
  int available() {
     dbc:	ldr	r2, [r0, #72]	; 0x48
  /** \return number of bytes available from the current position to EOF
   *   or INT_MAX if more than INT_MAX bytes are available.
   */
  int available() const {
    return m_fFile ? m_fFile->available() :
           m_xFile ? m_xFile->available() : 0;
     dbe:	cbz	r2, dda <StreamFile<FsBaseFile, unsigned long long>::available()+0x1e>
  }
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint32_t available32() const {
    return isFile() ? fileSize() - curPosition() : 0;
     dc0:	ldrb	r3, [r2, #0]
     dc2:	and.w	r3, r3, #8
     dc6:	and.w	r0, r3, #255	; 0xff
     dca:	cbz	r3, e0e <StreamFile<FsBaseFile, unsigned long long>::available()+0x52>
   * Zero is returned for directory files.
   *
   */
  int available() const {
    uint32_t n = available32();
    return n > INT_MAX ? INT_MAX : n;
     dcc:	ldr	r3, [r2, #28]
     dce:	ldr	r0, [r2, #20]
     dd0:	subs	r0, r3, r0
     dd2:	it	mi
     dd4:	mvnmi.w	r0, #2147483648	; 0x80000000
     dd8:	bx	lr
     dda:	ldr	r1, [r0, #76]	; 0x4c
     ddc:	cbz	r1, e10 <StreamFile<FsBaseFile, unsigned long long>::available()+0x54>
  }
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint64_t available64() {
    return isFile() ? fileSize() - curPosition() : 0;
     dde:	ldrb.w	r3, [r1, #49]	; 0x31
     de2:	and.w	r3, r3, #8
     de6:	and.w	r0, r3, #255	; 0xff
     dea:	cbz	r3, e0e <StreamFile<FsBaseFile, unsigned long long>::available()+0x52>
     dec:	ldrd	r2, r3, [r1, #16]
     df0:	ldrd	r0, r1, [r1]
     df4:	subs	r0, r2, r0
     df6:	push	{r4, r5}
     df8:	sbc.w	r1, r3, r1
     dfc:	movs	r5, #0
     dfe:	mvn.w	r4, #2147483648	; 0x80000000
     e02:	cmp	r5, r1
     e04:	it	eq
     e06:	cmpeq	r4, r0
     e08:	bcs.n	e0c <StreamFile<FsBaseFile, unsigned long long>::available()+0x50>
     e0a:	mov	r0, r4
    return BaseFile::available();
  }
     e0c:	pop	{r4, r5}
     e0e:	bx	lr
     e10:	mov	r0, r1
     e12:	bx	lr

00000e14 <SDFile::seek(unsigned long long, int)>:
		return sdfatfile.read(buf, nbyte);
	}
	virtual bool truncate(uint64_t size=0) {
		return sdfatfile.truncate(size);
	}
	virtual bool seek(uint64_t pos, int mode = SeekSet) {
     e14:	push	{r4, r6, r7}
     e16:	ldr	r4, [sp, #12]
     e18:	mov	r6, r2
     e1a:	mov	r7, r3
		if (mode == SeekSet) return sdfatfile.seekSet(pos);
     e1c:	cbz	r4, e2c <SDFile::seek(unsigned long long, int)+0x18>
		if (mode == SeekCur) return sdfatfile.seekCur(pos);
     e1e:	cmp	r4, #1
     e20:	beq.n	e60 <SDFile::seek(unsigned long long, int)+0x4c>
		if (mode == SeekEnd) return sdfatfile.seekEnd(pos);
     e22:	cmp	r4, #2
     e24:	beq.n	e42 <SDFile::seek(unsigned long long, int)+0x2e>
		return false;
	}
     e26:	movs	r0, #0
     e28:	pop	{r4, r6, r7}
     e2a:	bx	lr
     e2c:	ldr	r4, [r0, #92]	; 0x5c
   *
   * \return true for success or false for failure.
   */
  bool seekSet(uint64_t pos) {
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
           m_xFile ? m_xFile->seekSet(pos) : false;
     e2e:	cbz	r4, e68 <SDFile::seek(unsigned long long, int)+0x54>
   * \param[in] pos The new position in bytes from the beginning of the file.
   *
   * \return true for success or false for failure.
   */
  bool seekSet(uint64_t pos) {
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
     e30:	cmp	r3, #1
     e32:	it	eq
     e34:	cmpeq	r2, #0
     e36:	bcs.n	e26 <SDFile::seek(unsigned long long, int)+0x12>
     e38:	mov	r0, r4
     e3a:	mov	r1, r2
     e3c:	pop	{r4, r6, r7}
     e3e:	b.w	af0c <FatFile::seekSet(unsigned long)>
     e42:	ldr	r3, [r0, #92]	; 0x5c
           m_xFile ? m_xFile->fgets(str, num, delim) : -1;
  }
  /** \return The total number of bytes in a file. */
  uint64_t fileSize() const {
    return m_fFile ? m_fFile->fileSize() :
           m_xFile ? m_xFile->fileSize() : 0;
     e44:	cbz	r3, e74 <SDFile::seek(unsigned long long, int)+0x60>
   * Can't be used for directory files since file size is not defined.
   * \param[in] offset The new position in bytes from end-of-file.
   * \return true for success or false for failure.
   */
  bool seekEnd(int64_t offset = 0) {
    return seekSet(fileSize() + offset);
     e46:	ldr	r2, [r3, #28]
     e48:	adds	r6, r6, r2
     e4a:	adc.w	r7, r7, #0
   * \param[in] pos The new position in bytes from the beginning of the file.
   *
   * \return true for success or false for failure.
   */
  bool seekSet(uint64_t pos) {
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
     e4e:	cmp	r7, #1
     e50:	it	eq
     e52:	cmpeq	r6, #0
     e54:	bcs.n	e26 <SDFile::seek(unsigned long long, int)+0x12>
     e56:	mov	r1, r6
     e58:	mov	r0, r3
     e5a:	pop	{r4, r6, r7}
     e5c:	b.w	af0c <FatFile::seekSet(unsigned long)>
     e60:	ldr	r3, [r0, #92]	; 0x5c
           m_xFile ? m_xFile->contiguousRange(bgnSector, endSector) : false;
  }
  /** \return The current position for a file or directory. */
  uint64_t curPosition() const {
    return m_fFile ? m_fFile->curPosition() :
           m_xFile ? m_xFile->curPosition() : 0;
     e62:	cbz	r3, e88 <SDFile::seek(unsigned long long, int)+0x74>
  /** Set the files position to current position + \a pos. See seekSet().
   * \param[in] offset The new position in bytes from the current position.
   * \return true for success or false for failure.
   */
  bool seekCur(int64_t offset) {
    return seekSet(curPosition() + offset);
     e64:	ldr	r2, [r3, #20]
     e66:	b.n	e48 <SDFile::seek(unsigned long long, int)+0x34>
   *
   * \return true for success or false for failure.
   */
  bool seekSet(uint64_t pos) {
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
           m_xFile ? m_xFile->seekSet(pos) : false;
     e68:	ldr	r0, [r0, #96]	; 0x60
     e6a:	cmp	r0, #0
     e6c:	beq.n	e26 <SDFile::seek(unsigned long long, int)+0x12>
     e6e:	pop	{r4, r6, r7}
     e70:	b.w	9128 <ExFatFile::seekSet(unsigned long long)>
           m_xFile ? m_xFile->fgets(str, num, delim) : -1;
  }
  /** \return The total number of bytes in a file. */
  uint64_t fileSize() const {
    return m_fFile ? m_fFile->fileSize() :
           m_xFile ? m_xFile->fileSize() : 0;
     e74:	ldr	r0, [r0, #96]	; 0x60
     e76:	cmp	r0, #0
     e78:	beq.n	e26 <SDFile::seek(unsigned long long, int)+0x12>
   *
   * \return true for success or false for failure.
   */
  bool seekSet(uint64_t pos) {
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
           m_xFile ? m_xFile->seekSet(pos) : false;
     e7a:	ldrd	r2, r3, [r0, #16]
     e7e:	adds	r2, r2, r6
     e80:	adcs	r3, r7
     e82:	pop	{r4, r6, r7}
     e84:	b.w	9128 <ExFatFile::seekSet(unsigned long long)>
           m_xFile ? m_xFile->contiguousRange(bgnSector, endSector) : false;
  }
  /** \return The current position for a file or directory. */
  uint64_t curPosition() const {
    return m_fFile ? m_fFile->curPosition() :
           m_xFile ? m_xFile->curPosition() : 0;
     e88:	ldr	r0, [r0, #96]	; 0x60
     e8a:	cmp	r0, #0
     e8c:	beq.n	e26 <SDFile::seek(unsigned long long, int)+0x12>
   *
   * \return true for success or false for failure.
   */
  bool seekSet(uint64_t pos) {
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
           m_xFile ? m_xFile->seekSet(pos) : false;
     e8e:	ldrd	r2, r3, [r0]
     e92:	adds	r2, r2, r6
     e94:	adcs	r3, r7
     e96:	b.n	e6e <SDFile::seek(unsigned long long, int)+0x5a>

00000e98 <File::~File()>:
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
     e98:	ldr	r2, [r0, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
     e9a:	ldr	r3, [pc, #32]	; (ebc <File::~File()+0x24>)
     e9c:	push	{r4, lr}
     e9e:	mov	r4, r0
     ea0:	str	r3, [r0, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
     ea2:	cbz	r2, eb6 <File::~File()+0x1e>
     ea4:	ldr	r3, [r2, #16]
     ea6:	subs	r3, #1
     ea8:	str	r3, [r2, #16]
     eaa:	cbnz	r3, eb6 <File::~File()+0x1e>
     eac:	ldr	r0, [r0, #16]
     eae:	cbz	r0, eb6 <File::~File()+0x1e>
     eb0:	ldr	r3, [r0, #0]
     eb2:	ldr	r3, [r3, #32]
     eb4:	blx	r3
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
		invalidate();
	}
     eb6:	mov	r0, r4
     eb8:	pop	{r4, pc}
     eba:	nop
     ebc:	.word	0x000141ac

00000ec0 <SDFile::~SDFile()>:
	// Only the abstract File class which references these derived
	// classes is meant to have a public constructor!
	SDFile(const SDFAT_FILE &file) : sdfatfile(file), filename(nullptr) { }
	friend class SDClass;
public:
	virtual ~SDFile(void) {
     ec0:	push	{r3, r4, r5, lr}
  bool isHidden() const {
    return m_fFile ? m_fFile->isHidden() :
           m_xFile ? m_xFile->isHidden() : false;
  }
  /** \return True if this is an open file/directory else false. */
  bool isOpen() const {return m_fFile || m_xFile;}
     ec2:	ldr	r3, [r0, #92]	; 0x5c
     ec4:	ldr	r2, [pc, #80]	; (f18 <SDFile::~SDFile()+0x58>)
     ec6:	str	r2, [r0, #0]
     ec8:	mov	r4, r0
		if (sdfatfile) sdfatfile.close();
     eca:	add.w	r5, r0, #36	; 0x24
     ece:	cbz	r3, f0e <SDFile::~SDFile()+0x4e>
     ed0:	mov	r0, r5
     ed2:	bl	c128 <FsBaseFile::close()>
		if (filename) free(filename);
     ed6:	ldr	r0, [r4, #100]	; 0x64
     ed8:	cbz	r0, ede <SDFile::~SDFile()+0x1e>
     eda:	bl	ff54 <free>
/**
 * \class StreamFile
 * \brief StreamFile class.
 */
template<class BaseFile, typename PosType>
class StreamFile : public stream_t, public BaseFile {
     ede:	ldr	r3, [pc, #60]	; (f1c <SDFile::~SDFile()+0x5c>)
     ee0:	str	r3, [r4, #20]
   */
  FsBaseFile(const char* path, oflag_t oflag) {
    open(path, oflag);
  }

  ~FsBaseFile() {close();}
     ee2:	mov	r0, r5
     ee4:	bl	c128 <FsBaseFile::close()>
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
     ee8:	ldr	r2, [r4, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
     eea:	ldr	r3, [pc, #52]	; (f20 <SDFile::~SDFile()+0x60>)
     eec:	str	r3, [r4, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
     eee:	cbz	r2, f02 <SDFile::~SDFile()+0x42>
     ef0:	ldr	r3, [r2, #16]
     ef2:	subs	r3, #1
     ef4:	str	r3, [r2, #16]
     ef6:	cbnz	r3, f02 <SDFile::~SDFile()+0x42>
     ef8:	ldr	r0, [r4, #16]
     efa:	cbz	r0, f02 <SDFile::~SDFile()+0x42>
     efc:	ldr	r3, [r0, #0]
     efe:	ldr	r3, [r3, #32]
     f00:	blx	r3
	}
     f02:	mov	r0, r4
     f04:	movs	r1, #104	; 0x68
     f06:	bl	e950 <operator delete(void*, unsigned int)>
     f0a:	mov	r0, r4
     f0c:	pop	{r3, r4, r5, pc}
  bool isHidden() const {
    return m_fFile ? m_fFile->isHidden() :
           m_xFile ? m_xFile->isHidden() : false;
  }
  /** \return True if this is an open file/directory else false. */
  bool isOpen() const {return m_fFile || m_xFile;}
     f0e:	ldr	r3, [r0, #96]	; 0x60
     f10:	cmp	r3, #0
     f12:	bne.n	ed0 <SDFile::~SDFile()+0x10>
     f14:	b.n	ed6 <SDFile::~SDFile()+0x16>
     f16:	nop
     f18:	.word	0x0001420c
     f1c:	.word	0x00014164
     f20:	.word	0x000141ac

00000f24 <File::~File()>:
     f24:	ldr	r2, [r0, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
     f26:	ldr	r3, [pc, #40]	; (f50 <File::~File()+0x2c>)
     f28:	push	{r4, lr}
     f2a:	mov	r4, r0
     f2c:	str	r3, [r0, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
     f2e:	cbz	r2, f42 <File::~File()+0x1e>
     f30:	ldr	r3, [r2, #16]
     f32:	subs	r3, #1
     f34:	str	r3, [r2, #16]
     f36:	cbnz	r3, f42 <File::~File()+0x1e>
     f38:	ldr	r0, [r0, #16]
     f3a:	cbz	r0, f42 <File::~File()+0x1e>
     f3c:	ldr	r3, [r0, #0]
     f3e:	ldr	r3, [r3, #32]
     f40:	blx	r3
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
		invalidate();
	}
     f42:	mov	r0, r4
     f44:	movs	r1, #20
     f46:	bl	e950 <operator delete(void*, unsigned int)>
     f4a:	mov	r0, r4
     f4c:	pop	{r4, pc}
     f4e:	nop
     f50:	.word	0x000141ac

00000f54 <MTPStorage_SD::~MTPStorage_SD()>:
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
     f54:	ldr.w	r2, [r0, #224]	; 0xe0

  void mtp_yield(void);


// Storage implementation for SD. SD needs to be already initialized.
class MTPStorage_SD : public MTPStorageInterface, mSD_Base
     f58:	push	{r3, r4, r5, lr}
     f5a:	ldr	r3, [pc, #104]	; (fc4 <MTPStorage_SD::~MTPStorage_SD()+0x70>)
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
     f5c:	ldr	r5, [pc, #104]	; (fc8 <MTPStorage_SD::~MTPStorage_SD()+0x74>)
     f5e:	str	r3, [r0, #0]
     f60:	mov	r4, r0
     f62:	str.w	r5, [r0, #208]	; 0xd0
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
     f66:	cbz	r2, f70 <MTPStorage_SD::~MTPStorage_SD()+0x1c>
     f68:	ldr	r3, [r2, #16]
     f6a:	subs	r3, #1
     f6c:	str	r3, [r2, #16]
     f6e:	cbz	r3, fa4 <MTPStorage_SD::~MTPStorage_SD()+0x50>
     f70:	ldr.w	r2, [r4, #204]	; 0xcc
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
     f74:	str.w	r5, [r4, #188]	; 0xbc
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
     f78:	cbz	r2, f82 <MTPStorage_SD::~MTPStorage_SD()+0x2e>
     f7a:	ldr	r3, [r2, #16]
     f7c:	subs	r3, #1
     f7e:	str	r3, [r2, #16]
     f80:	cbz	r3, fb4 <MTPStorage_SD::~MTPStorage_SD()+0x60>
     f82:	ldr.w	r2, [r4, #184]	; 0xb8
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
     f86:	str.w	r5, [r4, #168]	; 0xa8
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
     f8a:	cbz	r2, fa0 <MTPStorage_SD::~MTPStorage_SD()+0x4c>
     f8c:	ldr	r3, [r2, #16]
     f8e:	subs	r3, #1
     f90:	str	r3, [r2, #16]
     f92:	cbnz	r3, fa0 <MTPStorage_SD::~MTPStorage_SD()+0x4c>
     f94:	ldr.w	r0, [r4, #184]	; 0xb8
     f98:	cbz	r0, fa0 <MTPStorage_SD::~MTPStorage_SD()+0x4c>
     f9a:	ldr	r3, [r0, #0]
     f9c:	ldr	r3, [r3, #32]
     f9e:	blx	r3
     fa0:	mov	r0, r4
     fa2:	pop	{r3, r4, r5, pc}
     fa4:	ldr.w	r0, [r0, #224]	; 0xe0
     fa8:	cmp	r0, #0
     faa:	beq.n	f70 <MTPStorage_SD::~MTPStorage_SD()+0x1c>
     fac:	ldr	r3, [r0, #0]
     fae:	ldr	r3, [r3, #32]
     fb0:	blx	r3
     fb2:	b.n	f70 <MTPStorage_SD::~MTPStorage_SD()+0x1c>
     fb4:	ldr.w	r0, [r4, #204]	; 0xcc
     fb8:	cmp	r0, #0
     fba:	beq.n	f82 <MTPStorage_SD::~MTPStorage_SD()+0x2e>
     fbc:	ldr	r3, [r0, #0]
     fbe:	ldr	r3, [r3, #32]
     fc0:	blx	r3
     fc2:	b.n	f82 <MTPStorage_SD::~MTPStorage_SD()+0x2e>
     fc4:	.word	0x0001440c
     fc8:	.word	0x000141ac

00000fcc <SDFile::~SDFile()>:
	// Only the abstract File class which references these derived
	// classes is meant to have a public constructor!
	SDFile(const SDFAT_FILE &file) : sdfatfile(file), filename(nullptr) { }
	friend class SDClass;
public:
	virtual ~SDFile(void) {
     fcc:	push	{r3, r4, r5, lr}
     fce:	ldr	r3, [r0, #92]	; 0x5c
     fd0:	ldr	r2, [pc, #72]	; (101c <SDFile::~SDFile()+0x50>)
     fd2:	str	r2, [r0, #0]
     fd4:	mov	r4, r0
		if (sdfatfile) sdfatfile.close();
     fd6:	add.w	r5, r0, #36	; 0x24
     fda:	cbz	r3, 1012 <SDFile::~SDFile()+0x46>
     fdc:	mov	r0, r5
     fde:	bl	c128 <FsBaseFile::close()>
		if (filename) free(filename);
     fe2:	ldr	r0, [r4, #100]	; 0x64
     fe4:	cbz	r0, fea <SDFile::~SDFile()+0x1e>
     fe6:	bl	ff54 <free>
     fea:	ldr	r3, [pc, #52]	; (1020 <SDFile::~SDFile()+0x54>)
     fec:	str	r3, [r4, #20]
   */
  FsBaseFile(const char* path, oflag_t oflag) {
    open(path, oflag);
  }

  ~FsBaseFile() {close();}
     fee:	mov	r0, r5
     ff0:	bl	c128 <FsBaseFile::close()>
     ff4:	ldr	r2, [r4, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
     ff6:	ldr	r3, [pc, #44]	; (1024 <SDFile::~SDFile()+0x58>)
     ff8:	str	r3, [r4, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
     ffa:	cbz	r2, 100e <SDFile::~SDFile()+0x42>
     ffc:	ldr	r3, [r2, #16]
     ffe:	subs	r3, #1
    1000:	str	r3, [r2, #16]
    1002:	cbnz	r3, 100e <SDFile::~SDFile()+0x42>
    1004:	ldr	r0, [r4, #16]
    1006:	cbz	r0, 100e <SDFile::~SDFile()+0x42>
    1008:	ldr	r3, [r0, #0]
    100a:	ldr	r3, [r3, #32]
    100c:	blx	r3
	}
    100e:	mov	r0, r4
    1010:	pop	{r3, r4, r5, pc}
  bool isHidden() const {
    return m_fFile ? m_fFile->isHidden() :
           m_xFile ? m_xFile->isHidden() : false;
  }
  /** \return True if this is an open file/directory else false. */
  bool isOpen() const {return m_fFile || m_xFile;}
    1012:	ldr	r3, [r0, #96]	; 0x60
    1014:	cmp	r3, #0
    1016:	bne.n	fdc <SDFile::~SDFile()+0x10>
    1018:	b.n	fe2 <SDFile::~SDFile()+0x16>
    101a:	nop
    101c:	.word	0x0001420c
    1020:	.word	0x00014164
    1024:	.word	0x000141ac

00001028 <storage_configure()>:
MTPStorage_SD storage;
MTPD       mtpd(&storage);


void storage_configure()
{
    1028:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  #if USE_SD==1
    #if defined SD_SCK
      SPI.setMOSI(SD_MOSI);
    102c:	movs	r1, #7
MTPStorage_SD storage;
MTPD       mtpd(&storage);


void storage_configure()
{
    102e:	sub	sp, #52	; 0x34
  #if USE_SD==1
    #if defined SD_SCK
      SPI.setMOSI(SD_MOSI);
    1030:	ldr	r0, [pc, #372]	; (11a8 <storage_configure()+0x180>)
    1032:	ldr	r6, [pc, #376]	; (11ac <storage_configure()+0x184>)
   *
   * \param[in] config SPI configuration.
   * \return generic card pointer.
   */
  SdCard* newCard(SdSpiConfig config) {
    m_spiCard.begin(config);
    1034:	ldr	r5, [pc, #376]	; (11b0 <storage_configure()+0x188>)
    1036:	bl	7ae8 <SPIClass::setMOSI(unsigned char)>
      SPI.setMISO(SD_MISO);
    103a:	movs	r1, #12
    103c:	ldr	r0, [pc, #360]	; (11a8 <storage_configure()+0x180>)
    103e:	bl	7b78 <SPIClass::setMISO(unsigned char)>
      SPI.setSCK(SD_SCK);
    1042:	movs	r1, #14
    1044:	ldr	r0, [pc, #352]	; (11a8 <storage_configure()+0x180>)
    1046:	bl	7c00 <SPIClass::setSCK(unsigned char)>
          }
        }
        else if(cs[ii]<BUILTIN_SDCARD)
      #endif
      {
        pinMode(cs[ii],OUTPUT); digitalWriteFast(cs[ii],HIGH);
    104a:	movs	r1, #1
    104c:	movs	r0, #10
    104e:	bl	d7a8 <pinMode>
			} else if (pin == 8) {
				CORE_PIN8_PORTSET = CORE_PIN8_BITMASK;
			} else if (pin == 9) {
				CORE_PIN9_PORTSET = CORE_PIN9_BITMASK;
			} else if (pin == 10) {
				CORE_PIN10_PORTSET = CORE_PIN10_BITMASK;
    1052:	ldr	r3, [pc, #352]	; (11b4 <storage_configure()+0x18c>)
    1054:	movs	r4, #0
    1056:	movs	r2, #16
    1058:	movs	r7, #10
    105a:	str	r2, [r3, #0]
    105c:	strb.w	r4, [sp, #13]
    1060:	str	r4, [sp, #20]
    1062:	add	r3, sp, #12
    1064:	strb.w	r7, [sp, #12]
    1068:	str	r6, [sp, #16]
    106a:	ldmia.w	r3, {r0, r1, r2}
    106e:	add	r3, sp, #24
    1070:	stmia.w	r3, {r0, r1, r2}
    1074:	strb.w	r4, [sp, #25]
    1078:	str	r4, [sp, #32]
    107a:	strb.w	r7, [sp, #24]
    107e:	str	r6, [sp, #28]
    1080:	ldmia.w	r3, {r0, r1, r2}
    1084:	add	r3, sp, #36	; 0x24
    1086:	stmia.w	r3, {r0, r1, r2}
    108a:	addw	r4, r5, #1172	; 0x494
    108e:	ldmia	r3, {r1, r2, r3}
    1090:	mov	r0, r4
    1092:	bl	c58c <SdSpiCard::begin(SdSpiConfig)>
   * \param[in] spiConfig SPI configuration.
   * \return true for success or false for failure.
   */
  bool cardBegin(SdSpiConfig spiConfig) {
    m_card = m_cardFactory.newCard(spiConfig);
    return m_card && !m_card->errorCode();
    1096:	ldrb.w	r3, [r5, #1187]	; 0x4a3
   *
   * \param[in] spiConfig SPI configuration.
   * \return true for success or false for failure.
   */
  bool cardBegin(SdSpiConfig spiConfig) {
    m_card = m_cardFactory.newCard(spiConfig);
    109a:	str.w	r4, [r5, #1168]	; 0x490
    return m_card && !m_card->errorCode();
    109e:	cbz	r3, 10be <storage_configure()+0x96>
        if(!sdx[ii].sdfs.begin(SdSpiConfig(cs[ii], SHARED_SPI, SPI_SPEED))) 
        { Serial.printf("SD Storage %d %d %s failed or missing",ii,cs[ii],sd_str[ii]);  Serial.println();
    10a0:	ldr	r3, [pc, #276]	; (11b8 <storage_configure()+0x190>)
    10a2:	ldr	r1, [pc, #280]	; (11bc <storage_configure()+0x194>)
    10a4:	ldr	r3, [r3, #0]
    10a6:	str	r3, [sp, #0]
    10a8:	movs	r2, #0
    10aa:	movs	r3, #10
    10ac:	ldr	r0, [pc, #272]	; (11c0 <storage_configure()+0x198>)
    10ae:	bl	e7dc <Print::printf(char const*, ...)>
	size_t println(int n)				{ return print(n) + println(); }
	size_t println(unsigned int n)			{ return print(n) + println(); }
	size_t println(long n)				{ return print(n) + println(); }
	size_t println(unsigned long n)			{ return print(n) + println(); }
	size_t println(int64_t n)			{ return print(n) + println(); }
	size_t println(uint64_t n)			{ return print(n) + println(); }
    10b2:	ldr	r0, [pc, #268]	; (11c0 <storage_configure()+0x198>)
      uint64_t totalSize = ramfs[ii].totalSize();
      uint64_t usedSize  = ramfs[ii].usedSize();
      Serial.printf("Storage %d %s ",ii,lfs_str[ii]); Serial.print(totalSize); Serial.print(" "); Serial.println(usedSize);
    }
    #endif
}
    10b4:	add	sp, #52	; 0x34
    10b6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    10ba:	b.w	e7ac <Print::println()>
   *
   * \param[in] spiConfig SPI configuration.
   * \return true for success or false for failure.
   */
  bool begin(SdSpiConfig spiConfig) {
    return cardBegin(spiConfig) && Vol::begin(m_card);
    10be:	mov	r1, r4
    10c0:	adds	r0, r5, #4
    10c2:	bl	c230 <FsVolume::begin(SdSpiCard*)>
    10c6:	cmp	r0, #0
    10c8:	beq.n	10a0 <storage_configure()+0x78>
    mSD_Base() {
      fsCount = 0;
    }

    void sd_addFilesystem(FS &fs, const char *name) {
      if (fsCount < MTPD_MAX_FILESYSTEMS) {
    10ca:	ldr	r1, [pc, #248]	; (11c4 <storage_configure()+0x19c>)
        if(!sdx[ii].sdfs.begin(SdSpiConfig(cs[ii], SHARED_SPI, SPI_SPEED))) 
        { Serial.printf("SD Storage %d %d %s failed or missing",ii,cs[ii],sd_str[ii]);  Serial.println();
        }
        else
        {
          storage.addFilesystem(sdx[ii], sd_str[ii]);
    10cc:	ldr.w	r8, [pc, #232]	; 11b8 <storage_configure()+0x190>
    10d0:	ldr	r3, [r1, #4]
    10d2:	ldr.w	r2, [r8]
    10d6:	cmp	r3, #19
    10d8:	bgt.n	10e6 <storage_configure()+0xbe>
        sd_name[fsCount] = name;
    10da:	add.w	r4, r1, r3, lsl #2
        sdx[fsCount++] = &fs;
    10de:	adds	r3, #1
      fsCount = 0;
    }

    void sd_addFilesystem(FS &fs, const char *name) {
      if (fsCount < MTPD_MAX_FILESYSTEMS) {
        sd_name[fsCount] = name;
    10e0:	str	r2, [r4, #8]
        sdx[fsCount++] = &fs;
    10e2:	str	r5, [r4, #88]	; 0x58
    10e4:	str	r3, [r1, #4]
    10e6:	ldr.w	r0, [r5, #1156]	; 0x484
    10ea:	ldr	r3, [pc, #196]	; (11b0 <storage_configure()+0x188>)
    10ec:	cmp	r0, #0
    10ee:	beq.n	117e <storage_configure()+0x156>
	uint64_t usedSize() {
		return (uint64_t)(sdfs.clusterCount() - sdfs.freeClusterCount())
		  * (uint64_t)sdfs.bytesPerCluster();
	}
	uint64_t totalSize() {
		return (uint64_t)sdfs.clusterCount() * (uint64_t)sdfs.bytesPerCluster();
    10f0:	ldrb	r6, [r0, #6]
    10f2:	ldr	r4, [r0, #28]
    10f4:	mov.w	r3, #512	; 0x200
    10f8:	lsl.w	r6, r3, r6
    10fc:	uxth	r6, r6
    10fe:	subs	r4, #1
    1100:	umull	r6, r7, r6, r4
    return m_fVol ? m_fVol->fatType() :
           m_xVol ? m_xVol->fatType() : 0;
  }
  /** \return the free cluster count. */
  uint32_t freeClusterCount() const {
    return m_fVol ? m_fVol->freeClusterCount() :
    1104:	bl	b54c <FatPartition::freeClusterCount()>
    1108:	ldr.w	r3, [r5, #1156]	; 0x484
    110c:	ldr	r2, [pc, #160]	; (11b0 <storage_configure()+0x188>)
	}
	bool rmdir(const char *filepath) {
		return sdfs.rmdir(filepath);
	}
	uint64_t usedSize() {
		return (uint64_t)(sdfs.clusterCount() - sdfs.freeClusterCount())
    110e:	subs	r4, r4, r0
  uint32_t blocksPerCluster() __attribute__ ((deprecated)) {return sectorsPerCluster();} //NOLINT
#endif  // DOXYGEN_SHOULD_SKIP_THIS
  /** \return the number of bytes in a cluster. */
  uint32_t bytesPerCluster() const {
    return m_fVol ? m_fVol->bytesPerCluster() :
           m_xVol ? m_xVol->bytesPerCluster() : 0;
    1110:	cbz	r3, 116a <storage_configure()+0x142>
    1112:	ldrb	r0, [r3, #6]
    1114:	ldr.w	r2, [r8]
    1118:	mov.w	r3, #512	; 0x200
    111c:	lsl.w	r0, r3, r0
    1120:	uxth	r0, r0
    1122:	umull	r4, r5, r0, r4
          uint64_t totalSize = sdx[ii].totalSize();
          uint64_t usedSize  = sdx[ii].usedSize();
          Serial.printf("SD Storage %d %d %s ",ii,cs[ii],sd_str[ii]); 
    1126:	str	r2, [sp, #0]
    1128:	movs	r2, #0
	size_t print(int n)				{ return print((long)n); }
	size_t print(unsigned int n)			{ return printNumber(n, 10, 0); }
	size_t print(long n);
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
	size_t print(int64_t n);
	size_t print(uint64_t n)			{ return printNumber64(n, 10, 0); }
    112a:	mov	r9, r2
    112c:	ldr	r1, [pc, #152]	; (11c8 <storage_configure()+0x1a0>)
    112e:	ldr	r0, [pc, #144]	; (11c0 <storage_configure()+0x198>)
    1130:	mov.w	r8, #10
    1134:	movs	r3, #10
    1136:	bl	e7dc <Print::printf(char const*, ...)>
    113a:	mov	r2, r6
    113c:	mov	r3, r7
    113e:	stmia.w	sp, {r8, r9}
    1142:	ldr	r0, [pc, #124]	; (11c0 <storage_configure()+0x198>)
    1144:	bl	e7f8 <Print::printNumber64(unsigned long long, unsigned char, unsigned char)>
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    1148:	movs	r1, #1
    114a:	ldr	r0, [pc, #128]	; (11cc <storage_configure()+0x1a4>)
    114c:	bl	cd74 <usb_serial_write>
    1150:	stmia.w	sp, {r8, r9}
    1154:	mov	r2, r4
    1156:	mov	r3, r5
    1158:	ldr	r0, [pc, #100]	; (11c0 <storage_configure()+0x198>)
    115a:	bl	e7f8 <Print::printNumber64(unsigned long long, unsigned char, unsigned char)>
	size_t println(int n)				{ return print(n) + println(); }
	size_t println(unsigned int n)			{ return print(n) + println(); }
	size_t println(long n)				{ return print(n) + println(); }
	size_t println(unsigned long n)			{ return print(n) + println(); }
	size_t println(int64_t n)			{ return print(n) + println(); }
	size_t println(uint64_t n)			{ return print(n) + println(); }
    115e:	ldr	r0, [pc, #96]	; (11c0 <storage_configure()+0x198>)
      uint64_t totalSize = ramfs[ii].totalSize();
      uint64_t usedSize  = ramfs[ii].usedSize();
      Serial.printf("Storage %d %s ",ii,lfs_str[ii]); Serial.print(totalSize); Serial.print(" "); Serial.println(usedSize);
    }
    #endif
}
    1160:	add	sp, #52	; 0x34
    1162:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    1166:	b.w	e7ac <Print::println()>
    116a:	ldr.w	r3, [r2, #1160]	; 0x488
    116e:	ldr.w	r2, [r8]
    1172:	cbz	r3, 11a0 <storage_configure()+0x178>
    1174:	ldr.w	r0, [r3, #1084]	; 0x43c
    1178:	umull	r4, r5, r4, r0
    117c:	b.n	1126 <storage_configure()+0xfe>
  /** Change global working volume to this volume. */
  void chvol() {m_cwv = this;}
  /** \return The total number of clusters in the volume. */
  uint32_t clusterCount() const {
    return m_fVol ? m_fVol->clusterCount() :
           m_xVol ? m_xVol->clusterCount() : 0;
    117e:	ldr.w	r0, [r3, #1160]	; 0x488
    1182:	cbz	r0, 1196 <storage_configure()+0x16e>
    1184:	ldr.w	r4, [r0, #1072]	; 0x430
    1188:	ldr.w	r6, [r0, #1084]	; 0x43c
		  * (uint64_t)sdfs.bytesPerCluster();
	}
	uint64_t totalSize() {
		return (uint64_t)sdfs.clusterCount() * (uint64_t)sdfs.bytesPerCluster();
    118c:	umull	r6, r7, r4, r6
           m_xVol ? m_xVol->fatType() : 0;
  }
  /** \return the free cluster count. */
  uint32_t freeClusterCount() const {
    return m_fVol ? m_fVol->freeClusterCount() :
           m_xVol ? m_xVol->freeClusterCount() : 0;
    1190:	bl	9a8c <ExFatPartition::freeClusterCount()>
    1194:	b.n	1108 <storage_configure()+0xe0>
  /** Change global working volume to this volume. */
  void chvol() {m_cwv = this;}
  /** \return The total number of clusters in the volume. */
  uint32_t clusterCount() const {
    return m_fVol ? m_fVol->clusterCount() :
           m_xVol ? m_xVol->clusterCount() : 0;
    1196:	movs	r4, #0
    1198:	movs	r5, #0
    119a:	mov	r6, r4
    119c:	mov	r7, r5
    119e:	b.n	1126 <storage_configure()+0xfe>
  uint32_t blocksPerCluster() __attribute__ ((deprecated)) {return sectorsPerCluster();} //NOLINT
#endif  // DOXYGEN_SHOULD_SKIP_THIS
  /** \return the number of bytes in a cluster. */
  uint32_t bytesPerCluster() const {
    return m_fVol ? m_fVol->bytesPerCluster() :
           m_xVol ? m_xVol->bytesPerCluster() : 0;
    11a0:	movs	r4, #0
    11a2:	movs	r5, #0
    11a4:	b.n	1126 <storage_configure()+0xfe>
    11a6:	nop
    11a8:	.word	0x1fff8a60
    11ac:	.word	0x01f78a40
    11b0:	.word	0x1fffc648
    11b4:	.word	0x400ff084
    11b8:	.word	0x1fff8a44
    11bc:	.word	0x000142e4
    11c0:	.word	0x1fff8d50
    11c4:	.word	0x1fffbd40
    11c8:	.word	0x0001430c
    11cc:	.word	0x00014538

000011d0 <pushData(unsigned long*)>:
uint16_t maxCount=0;

void resetData(void) {  front_ = 0;  rear_ = 0; }

uint16_t pushData(uint32_t * src)
{ uint16_t f =front_ + 1;
    11d0:	push	{r4, r5, r6, lr}
    11d2:	ldr	r6, [pc, #76]	; (1220 <pushData(unsigned long*)+0x50>)
  if(f >= MAXBUF) f=0;
  if(f == rear_) return 0;
    11d4:	ldr	r3, [pc, #76]	; (1224 <pushData(unsigned long*)+0x54>)
uint16_t maxCount=0;

void resetData(void) {  front_ = 0;  rear_ = 0; }

uint16_t pushData(uint32_t * src)
{ uint16_t f =front_ + 1;
    11d6:	ldrh	r4, [r6, #0]
  if(f >= MAXBUF) f=0;
  if(f == rear_) return 0;
    11d8:	ldrh	r5, [r3, #0]
uint16_t maxCount=0;

void resetData(void) {  front_ = 0;  rear_ = 0; }

uint16_t pushData(uint32_t * src)
{ uint16_t f =front_ + 1;
    11da:	adds	r4, #1
    11dc:	uxth	r4, r4
  if(f >= MAXBUF) f=0;
    11de:	cmp	r4, #24
    11e0:	it	cs
    11e2:	movcs	r4, #0
  if(f == rear_) return 0;
    11e4:	cmp	r4, r5
    11e6:	beq.n	121a <pushData(unsigned long*)+0x4a>
    11e8:	mov	r1, r0

  uint32_t *ptr= data_buffer+f*NBUF_ACQ;
  memcpy(ptr,src,NBUF_ACQ*4);
    11ea:	ldr	r0, [pc, #60]	; (1228 <pushData(unsigned long*)+0x58>)
    11ec:	mov.w	r2, #1024	; 0x400
    11f0:	add.w	r0, r0, r4, lsl #10
    11f4:	bl	cb00 <memcpy>
  front_ = f;
  //
  uint16_t count;
  count = (front_ >= rear_) ? (front_ - rear_) : front_+ (MAXBUF -rear_) ;
    11f8:	cmp	r4, r5
  if(count>maxCount) maxCount=count;
    11fa:	ldr	r3, [pc, #48]	; (122c <pushData(unsigned long*)+0x5c>)
  if(f >= MAXBUF) f=0;
  if(f == rear_) return 0;

  uint32_t *ptr= data_buffer+f*NBUF_ACQ;
  memcpy(ptr,src,NBUF_ACQ*4);
  front_ = f;
    11fc:	strh	r4, [r6, #0]
  //
  uint16_t count;
  count = (front_ >= rear_) ? (front_ - rear_) : front_+ (MAXBUF -rear_) ;
    11fe:	itet	cc
    1200:	rsbcc	r5, r5, #24
    1204:	subcs	r4, r4, r5
    1206:	addcc	r4, r4, r5
  if(count>maxCount) maxCount=count;
    1208:	ldrh	r2, [r3, #0]
  uint32_t *ptr= data_buffer+f*NBUF_ACQ;
  memcpy(ptr,src,NBUF_ACQ*4);
  front_ = f;
  //
  uint16_t count;
  count = (front_ >= rear_) ? (front_ - rear_) : front_+ (MAXBUF -rear_) ;
    120a:	uxth	r4, r4
  if(count>maxCount) maxCount=count;
    120c:	cmp	r2, r4
    120e:	bcs.n	1216 <pushData(unsigned long*)+0x46>
    1210:	strh	r4, [r3, #0]
  //
  return 1;
    1212:	movs	r0, #1
    1214:	pop	{r4, r5, r6, pc}
    1216:	movs	r0, #1
}
    1218:	pop	{r4, r5, r6, pc}
void resetData(void) {  front_ = 0;  rear_ = 0; }

uint16_t pushData(uint32_t * src)
{ uint16_t f =front_ + 1;
  if(f >= MAXBUF) f=0;
  if(f == rear_) return 0;
    121a:	movs	r0, #0
    121c:	pop	{r4, r5, r6, pc}
    121e:	nop
    1220:	.word	0x1fffbe44
    1224:	.word	0x20002b06
    1228:	.word	0x1fffcaf0
    122c:	.word	0x20002b04

00001230 <acq_isr()>:

  uint32_t acq_count=0;
  uint32_t acq_miss=0;

    void acq_isr(void)
    {
    1230:	push	{r3, r4, r5, r6, r7, lr}
        uint32_t daddr;
        uint32_t *src;
        acq_count++;

        daddr = (uint32_t)(dma.TCD->DADDR);
    1232:	ldr	r0, [pc, #88]	; (128c <acq_isr()+0x5c>)

    void acq_isr(void)
    {
        uint32_t daddr;
        uint32_t *src;
        acq_count++;
    1234:	ldr	r4, [pc, #88]	; (1290 <acq_isr()+0x60>)

        daddr = (uint32_t)(dma.TCD->DADDR);
    1236:	ldr	r2, [r0, #0]

    void acq_isr(void)
    {
        uint32_t daddr;
        uint32_t *src;
        acq_count++;
    1238:	ldr	r1, [r4, #0]

        daddr = (uint32_t)(dma.TCD->DADDR);
        dma.clearInterrupt();

        if (daddr < (uint32_t)tdm_rx_buffer + sizeof(tdm_rx_buffer) / 2) {
    123a:	ldr	r3, [pc, #88]	; (1294 <acq_isr()+0x64>)
    {
        uint32_t daddr;
        uint32_t *src;
        acq_count++;

        daddr = (uint32_t)(dma.TCD->DADDR);
    123c:	ldr	r7, [r2, #16]
	void detachInterrupt(void) {
		NVIC_DISABLE_IRQ(IRQ_DMA_CH0 + channel);
	}

	void clearInterrupt(void) {
		DMA_CINT = channel;
    123e:	ldr	r5, [pc, #88]	; (1298 <acq_isr()+0x68>)
    1240:	ldrb	r6, [r0, #4]
    1242:	ldr	r0, [pc, #88]	; (129c <acq_isr()+0x6c>)
            // need to remove data from the second half
            src = &tdm_rx_buffer[NBUF_I2S];
        } else {
            // DMA is receiving to the second half of the buffer
            // need to remove data from the first half
            src = &tdm_rx_buffer[0];
    1244:	sub.w	r2, r3, #1024	; 0x400

    void acq_isr(void)
    {
        uint32_t daddr;
        uint32_t *src;
        acq_count++;
    1248:	adds	r1, #1
    124a:	str	r1, [r4, #0]
            // need to remove data from the second half
            src = &tdm_rx_buffer[NBUF_I2S];
        } else {
            // DMA is receiving to the second half of the buffer
            // need to remove data from the first half
            src = &tdm_rx_buffer[0];
    124c:	cmp	r7, r3
    124e:	it	cc
    1250:	movcc	r2, r3
    1252:	strb	r6, [r5, #0]
    1254:	movs	r3, #0

        for(int jj=0;jj<NCH_ACQ;jj++)
        {
          for(int ii=0; ii<NDAT;ii++)
          {
            acq_rx_buffer[ichan[jj]+ii*NCH_ACQ]=src[ichan[jj]+ii*NCH_I2S];
    1256:	ldr.w	r1, [r2, r3, lsl #3]
    125a:	str.w	r1, [r0, r3, lsl #3]
            arm_dcache_delete((void*)src, sizeof(tdm_rx_buffer) / 2);
        #endif

        for(int jj=0;jj<NCH_ACQ;jj++)
        {
          for(int ii=0; ii<NDAT;ii++)
    125e:	adds	r3, #1
    1260:	cmp	r3, #128	; 0x80
    1262:	bne.n	1256 <acq_isr()+0x26>
    1264:	ldr	r1, [pc, #52]	; (129c <acq_isr()+0x6c>)
    1266:	mov	r3, r2
    1268:	add.w	r0, r1, #1024	; 0x400
          {
            acq_rx_buffer[ichan[jj]+ii*NCH_ACQ]=src[ichan[jj]+ii*NCH_I2S];
    126c:	ldr	r2, [r3, #4]
    126e:	str	r2, [r1, #4]
    1270:	adds	r1, #8
            arm_dcache_delete((void*)src, sizeof(tdm_rx_buffer) / 2);
        #endif

        for(int jj=0;jj<NCH_ACQ;jj++)
        {
          for(int ii=0; ii<NDAT;ii++)
    1272:	cmp	r0, r1
    1274:	add.w	r3, r3, #8
    1278:	bne.n	126c <acq_isr()+0x3c>
          {
            acq_rx_buffer[ichan[jj]+ii*NCH_ACQ]=src[ichan[jj]+ii*NCH_I2S];
          }
        }

        if(!pushData(acq_rx_buffer)) acq_miss++;
    127a:	ldr	r0, [pc, #32]	; (129c <acq_isr()+0x6c>)
    127c:	bl	11d0 <pushData(unsigned long*)>
    1280:	cbnz	r0, 128a <acq_isr()+0x5a>
    1282:	ldr	r2, [pc, #28]	; (12a0 <acq_isr()+0x70>)
    1284:	ldr	r3, [r2, #0]
    1286:	adds	r3, #1
    1288:	str	r3, [r2, #0]
    128a:	pop	{r3, r4, r5, r6, r7, pc}
    128c:	.word	0x1fff9730
    1290:	.word	0x1fffb93c
    1294:	.word	0x1fffc248
    1298:	.word	0x4000801f
    129c:	.word	0x1fffb940
    12a0:	.word	0x20002b18

000012a4 <pullData(unsigned long*, unsigned long)>:
  //
  return 1;
}

uint16_t pullData(uint32_t * dst, uint32_t ndbl)
{ uint16_t r = (rear_/ndbl) ;
    12a4:	push	{r3, r4, r5, lr}
    12a6:	ldr	r4, [pc, #72]	; (12f0 <pullData(unsigned long*, unsigned long)+0x4c>)
  if(r == (front_/ndbl)) return 0;
    12a8:	ldr	r3, [pc, #72]	; (12f4 <pullData(unsigned long*, unsigned long)+0x50>)
  //
  return 1;
}

uint16_t pullData(uint32_t * dst, uint32_t ndbl)
{ uint16_t r = (rear_/ndbl) ;
    12aa:	ldrh	r2, [r4, #0]
  if(r == (front_/ndbl)) return 0;
    12ac:	ldrh	r3, [r3, #0]
  //
  return 1;
}

uint16_t pullData(uint32_t * dst, uint32_t ndbl)
{ uint16_t r = (rear_/ndbl) ;
    12ae:	udiv	r2, r2, r1
  if(r == (front_/ndbl)) return 0;
    12b2:	udiv	r5, r3, r1
    12b6:	cmp	r2, r5
    12b8:	beq.n	12ec <pullData(unsigned long*, unsigned long)+0x48>
    12ba:	uxth	r3, r2
  if(++r >= (MAXBUF/ndbl)) r=0;
    12bc:	adds	r3, #1
    12be:	uxth	r3, r3
    12c0:	movs	r2, #24
    12c2:	udiv	r2, r2, r1
    12c6:	cmp	r3, r2
    12c8:	bcs.n	12e4 <pullData(unsigned long*, unsigned long)+0x40>
    12ca:	ldr	r5, [pc, #44]	; (12f8 <pullData(unsigned long*, unsigned long)+0x54>)
    12cc:	lsls	r2, r1, #10
    12ce:	smulbb	r1, r1, r3
    12d2:	mla	r3, r2, r3, r5
    12d6:	uxth	r5, r1
  uint32_t *ptr= data_buffer + r*ndbl*NBUF_ACQ;
  memcpy(dst,ptr,ndbl*NBUF_ACQ*4);
    12d8:	mov	r1, r3
    12da:	bl	cb00 <memcpy>
  rear_ = r*ndbl;
    12de:	strh	r5, [r4, #0]
  return 1;
    12e0:	movs	r0, #1
    12e2:	pop	{r3, r4, r5, pc}
    12e4:	ldr	r3, [pc, #16]	; (12f8 <pullData(unsigned long*, unsigned long)+0x54>)
    12e6:	lsls	r2, r1, #10
    12e8:	movs	r5, #0
    12ea:	b.n	12d8 <pullData(unsigned long*, unsigned long)+0x34>
  return 1;
}

uint16_t pullData(uint32_t * dst, uint32_t ndbl)
{ uint16_t r = (rear_/ndbl) ;
  if(r == (front_/ndbl)) return 0;
    12ec:	movs	r0, #0
  if(++r >= (MAXBUF/ndbl)) r=0;
  uint32_t *ptr= data_buffer + r*ndbl*NBUF_ACQ;
  memcpy(dst,ptr,ndbl*NBUF_ACQ*4);
  rear_ = r*ndbl;
  return 1;
}
    12ee:	pop	{r3, r4, r5, pc}
    12f0:	.word	0x20002b06
    12f4:	.word	0x1fffbe44
    12f8:	.word	0x1fffcaf0

000012fc <do_menu(short)>:
void do_menu1(void);
void do_menu2(void);
void do_menu3(void);

int16_t do_menu(int16_t state)
{ // check Serial input
    12fc:	push	{r4, lr}
    12fe:	mov	r4, r0
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    1300:	bl	cd20 <usb_serial_available>
  if(!Serial.available()) return state;
    1304:	cbnz	r0, 130a <do_menu(short)+0xe>
      break;
    default:
      break;
  }
  return state;
}
    1306:	mov	r0, r4
    1308:	pop	{r4, pc}
        virtual int read() { return usb_serial_getchar(); }
    130a:	bl	cca8 <usb_serial_getchar>

int16_t do_menu(int16_t state)
{ // check Serial input
  if(!Serial.available()) return state;
  char cc = Serial.read();
  switch(cc)
    130e:	uxtb	r0, r0
    1310:	cmp	r0, #114	; 0x72
    1312:	beq.n	1348 <do_menu(short)+0x4c>
    1314:	cmp	r0, #115	; 0x73
    1316:	beq.n	1332 <do_menu(short)+0x36>
    1318:	cmp	r0, #113	; 0x71
    131a:	bne.n	1306 <do_menu(short)+0xa>
      if(state>=0) return state;
      state=0;
      Serial.println("\nStart");
      break;
    case 'q': // stop acquisition
      if(state<0) return state;
    131c:	cmp	r4, #0
    131e:	blt.n	1306 <do_menu(short)+0xa>
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    1320:	movs	r1, #5
    1322:	ldr	r0, [pc, #60]	; (1360 <do_menu(short)+0x64>)
    1324:	bl	cd74 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    1328:	ldr	r0, [pc, #56]	; (1364 <do_menu(short)+0x68>)
    132a:	bl	e7ac <Print::println()>
      state=4;
    132e:	movs	r4, #4
    1330:	b.n	1306 <do_menu(short)+0xa>
  if(!Serial.available()) return state;
  char cc = Serial.read();
  switch(cc)
  {
    case 's': // start acquisition
      if(state>=0) return state;
    1332:	cmp	r4, #0
    1334:	bge.n	1306 <do_menu(short)+0xa>
    1336:	movs	r1, #6
    1338:	ldr	r0, [pc, #44]	; (1368 <do_menu(short)+0x6c>)
    133a:	bl	cd74 <usb_serial_write>
    133e:	ldr	r0, [pc, #36]	; (1364 <do_menu(short)+0x68>)
    1340:	bl	e7ac <Print::println()>
    1344:	movs	r4, #0
    1346:	b.n	1306 <do_menu(short)+0xa>
    1348:	movs	r1, #5
    134a:	ldr	r0, [pc, #32]	; (136c <do_menu(short)+0x70>)
    134c:	bl	cd74 <usb_serial_write>
    1350:	ldr	r0, [pc, #16]	; (1364 <do_menu(short)+0x68>)
    1352:	bl	e7ac <Print::println()>
      Serial.println("\nStop");
      break;
#if USE_EVENTS==1
    case 'r': 
      Serial.println("Reset");
      mtpd.send_DeviceResetEvent();
    1356:	ldr	r0, [pc, #24]	; (1370 <do_menu(short)+0x74>)
    1358:	bl	7720 <MTPD::send_DeviceResetEvent()>
      break;
    135c:	b.n	1306 <do_menu(short)+0xa>
    135e:	nop
    1360:	.word	0x0001432c
    1364:	.word	0x1fff8d50
    1368:	.word	0x00014324
    136c:	.word	0x00014334
    1370:	.word	0x20002af0

00001374 <file_writeData(void*, unsigned long)>:
  size_t nb = mfile.write(header,512);
  return (nb==512);
}

int16_t file_writeData(void *diskBuffer, uint32_t nd)
{ if(!mfile) return 0;
    1374:	push	{r4, r5, r6, lr}
	}
	virtual void close() {
		if (f) f->close();
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
    1376:	ldr	r6, [pc, #48]	; (13a8 <file_writeData(void*, unsigned long)+0x34>)
    1378:	ldr	r3, [r6, #16]
    137a:	cbz	r3, 13a4 <file_writeData(void*, unsigned long)+0x30>
    137c:	ldr	r2, [r3, #0]
    137e:	mov	r5, r0
    1380:	mov	r0, r3
    1382:	ldr	r3, [r2, #68]	; 0x44
    1384:	mov	r4, r1
    1386:	blx	r3
    1388:	cbz	r0, 13a4 <file_writeData(void*, unsigned long)+0x30>
#endif
	virtual size_t read(void *buf, size_t nbyte) {
		return (f) ? f->read(buf, nbyte) : 0;
	}
	virtual size_t write(const void *buf, size_t size) {
		return (f) ? f->write(buf, size) : 0;
    138a:	ldr	r0, [r6, #16]
    138c:	cbz	r0, 1398 <file_writeData(void*, unsigned long)+0x24>
    138e:	ldr	r3, [r0, #0]
    1390:	mov	r1, r5
    1392:	ldr	r3, [r3, #44]	; 0x2c
    1394:	mov	r2, r4
    1396:	blx	r3
  uint32_t nb = mfile.write(diskBuffer,nd);
  return (nb==nd);
    1398:	subs	r0, r4, r0
    139a:	clz	r0, r0
    139e:	lsrs	r0, r0, #5
    13a0:	sxth	r0, r0
}
    13a2:	pop	{r4, r5, r6, pc}
  size_t nb = mfile.write(header,512);
  return (nb==512);
}

int16_t file_writeData(void *diskBuffer, uint32_t nd)
{ if(!mfile) return 0;
    13a4:	movs	r0, #0
    13a6:	pop	{r4, r5, r6, pc}
    13a8:	.word	0x1fff8a48

000013ac <file_close()>:
  uint32_t nb = mfile.write(diskBuffer,nd);
  return (nb==nd);
}

int16_t file_close(void)
{ mfile.close();
    13ac:	push	{r4, lr}
	}
	virtual uint64_t size() {
		return (f) ? f->size() : 0;
	}
	virtual void close() {
		if (f) f->close();
    13ae:	ldr	r4, [pc, #32]	; (13d0 <file_close()+0x24>)
    13b0:	ldr	r0, [r4, #16]
    13b2:	cbz	r0, 13cc <file_close()+0x20>
    13b4:	ldr	r3, [r0, #0]
    13b6:	ldr	r3, [r3, #64]	; 0x40
    13b8:	blx	r3
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
    13ba:	ldr	r0, [r4, #16]
    13bc:	cbz	r0, 13cc <file_close()+0x20>
    13be:	ldr	r3, [r0, #0]
    13c0:	ldr	r3, [r3, #68]	; 0x44
    13c2:	blx	r3
    13c4:	eor.w	r0, r0, #1
    13c8:	uxtb	r0, r0
  return (!mfile);
}
    13ca:	pop	{r4, pc}
  uint32_t nb = mfile.write(diskBuffer,nd);
  return (nb==nd);
}

int16_t file_close(void)
{ mfile.close();
    13cc:	movs	r0, #1
    13ce:	pop	{r4, pc}
    13d0:	.word	0x1fff8a48

000013d4 <printTimestamp(unsigned long)>:
 */

/****************** Time Utilities *****************************/
#include "TimeLib.h"
void printTimestamp(uint32_t tt)
{
    13d4:	push	{r4, r5, lr}
    13d6:	sub	sp, #28
  tmElements_t tm;
  breakTime(tt, tm);
    13d8:	add	r1, sp, #16
    13da:	bl	7c98 <breakTime(long, tmElements_t&)>
  Serial.printf("Now: %04d-%02d-%02d_%02d:%02d:%02d\r\n", 
                      tmYearToCalendar(tm.Year), tm.Month, tm.Day, tm.Hour, tm.Minute, tm.Second);
    13de:	ldrb.w	r2, [sp, #22]
    13e2:	ldrb.w	r0, [sp, #18]
    13e6:	ldrb.w	r1, [sp, #20]
    13ea:	ldrb.w	r5, [sp, #16]
    13ee:	ldrb.w	r4, [sp, #17]
    13f2:	str	r0, [sp, #4]
    13f4:	str	r1, [sp, #0]
    13f6:	ldrb.w	r3, [sp, #21]
    13fa:	str	r5, [sp, #12]
    13fc:	addw	r2, r2, #1970	; 0x7b2
    1400:	str	r4, [sp, #8]
    1402:	ldr	r1, [pc, #12]	; (1410 <printTimestamp(unsigned long)+0x3c>)
    1404:	ldr	r0, [pc, #12]	; (1414 <printTimestamp(unsigned long)+0x40>)
    1406:	bl	e7dc <Print::printf(char const*, ...)>
}
    140a:	add	sp, #28
    140c:	pop	{r4, r5, pc}
    140e:	nop
    1410:	.word	0x0001433c
    1414:	.word	0x1fff8d50

00001418 <makeHeader(char*)>:
    }
  #endif


void makeHeader(char *header)
{
    1418:	push	{r4, lr}
  memset(header,0,512);
    141a:	movs	r1, #0
    141c:	mov.w	r2, #512	; 0x200
    }
  #endif


void makeHeader(char *header)
{
    1420:	mov	r4, r0
  memset(header,0,512);
    1422:	bl	106cc <memset>
  sprintf(header,"WMXZ");
    1426:	ldr	r3, [pc, #32]	; (1448 <makeHeader(char*)+0x30>)
  int32_t *ihdr=(int32_t *)&header[strlen(header)+1];
  uint32_t *uhdr=(uint32_t *)&header[strlen(header)+1];
  ihdr[0]=1; // version number
    1428:	movs	r2, #1


void makeHeader(char *header)
{
  memset(header,0,512);
  sprintf(header,"WMXZ");
    142a:	ldr	r0, [r3, #0]
    142c:	ldrb	r3, [r3, #4]
    142e:	strb	r3, [r4, #4]
  int32_t *ihdr=(int32_t *)&header[strlen(header)+1];
  uint32_t *uhdr=(uint32_t *)&header[strlen(header)+1];
  ihdr[0]=1; // version number
    1430:	str.w	r2, [r4, #5]


void makeHeader(char *header)
{
  memset(header,0,512);
  sprintf(header,"WMXZ");
    1434:	str	r0, [r4, #0]
  int32_t *ihdr=(int32_t *)&header[strlen(header)+1];
  uint32_t *uhdr=(uint32_t *)&header[strlen(header)+1];
  ihdr[0]=1; // version number
  uhdr[1]=rtc_get();
    1436:	bl	d76c <rtc_get>
    143a:	str.w	r0, [r4, #9]
  uhdr[2]=micros();
    143e:	bl	d7b4 <micros>
    1442:	str.w	r0, [r4, #13]
    1446:	pop	{r4, pc}
    1448:	.word	0x00014364

0000144c <file_writeHeader()>:
  mfile = sdx[store].open(filename,FILE_WRITE);
  return !(!mfile);
}

int16_t file_writeHeader(void)
{ if(!mfile) return 0;
    144c:	push	{r4, lr}
    144e:	ldr	r4, [pc, #52]	; (1484 <file_writeHeader()+0x38>)
    1450:	ldr	r0, [r4, #16]
    1452:	cbz	r0, 1480 <file_writeHeader()+0x34>
    1454:	ldr	r3, [r0, #0]
    1456:	ldr	r3, [r3, #68]	; 0x44
    1458:	blx	r3
    145a:	cbz	r0, 1480 <file_writeHeader()+0x34>
  makeHeader(header);
    145c:	ldr	r0, [pc, #40]	; (1488 <file_writeHeader()+0x3c>)
    145e:	bl	1418 <makeHeader(char*)>
#endif
	virtual size_t read(void *buf, size_t nbyte) {
		return (f) ? f->read(buf, nbyte) : 0;
	}
	virtual size_t write(const void *buf, size_t size) {
		return (f) ? f->write(buf, size) : 0;
    1462:	ldr	r0, [r4, #16]
    1464:	cbz	r0, 147e <file_writeHeader()+0x32>
    1466:	ldr	r3, [r0, #0]
    1468:	ldr	r1, [pc, #28]	; (1488 <file_writeHeader()+0x3c>)
    146a:	ldr	r3, [r3, #44]	; 0x2c
    146c:	mov.w	r2, #512	; 0x200
    1470:	blx	r3
    1472:	sub.w	r0, r0, #512	; 0x200
    1476:	clz	r0, r0
    147a:	lsrs	r0, r0, #5
    147c:	sxth	r0, r0
  size_t nb = mfile.write(header,512);
  return (nb==512);
}
    147e:	pop	{r4, pc}
  mfile = sdx[store].open(filename,FILE_WRITE);
  return !(!mfile);
}

int16_t file_writeHeader(void)
{ if(!mfile) return 0;
    1480:	movs	r0, #0
    1482:	pop	{r4, pc}
    1484:	.word	0x1fff8a48
    1488:	.word	0x1fff973c

0000148c <makeFilename(char*)>:
  uhdr[1]=rtc_get();
  uhdr[2]=micros();
}

int16_t makeFilename(char *filename)
{
    148c:	push	{r4, r5, r6, r7, lr}
    148e:	sub	sp, #12
    1490:	mov	r7, r0
  uint32_t tt = rtc_get();
    1492:	bl	d76c <rtc_get>
  int dd;
  ss= tt % 60; tt /= 60;
  mm= tt % 60; tt /= 60;
  hh= tt % 24; tt /= 24;
  dd= tt;
  sprintf(filename,"/%d/%02d_%02d_%02d.raw",dd,hh,mm,ss);
    1496:	ldr	r4, [pc, #100]	; (14fc <makeFilename(char*)+0x70>)
    1498:	ldr	r3, [pc, #100]	; (1500 <makeFilename(char*)+0x74>)
    149a:	ldr	r6, [pc, #104]	; (1504 <makeFilename(char*)+0x78>)
    149c:	ldr	r2, [pc, #104]	; (1508 <makeFilename(char*)+0x7c>)
    149e:	ldr	r1, [pc, #108]	; (150c <makeFilename(char*)+0x80>)
    14a0:	umull	lr, r5, r4, r0
    14a4:	lsrs	r5, r5, #5
    14a6:	umull	lr, r3, r3, r0
    14aa:	umull	lr, r4, r4, r5
    14ae:	lsrs	r3, r3, #11
    14b0:	lsrs	r4, r4, #5
    14b2:	umull	lr, r6, r6, r3
    14b6:	rsb	r4, r4, r4, lsl #4
    14ba:	sub.w	r4, r5, r4, lsl #2
    14be:	lsrs	r6, r6, #4
    14c0:	rsb	r5, r5, r5, lsl #4
    14c4:	sub.w	r5, r0, r5, lsl #2
    14c8:	add.w	r6, r6, r6, lsl #1
    14cc:	umull	r0, r2, r2, r0
    14d0:	lsrs	r2, r2, #16
    14d2:	sub.w	r3, r3, r6, lsl #3
    14d6:	stmia.w	sp, {r4, r5}
    14da:	mov	r0, r7
    14dc:	bl	10b74 <sprintf>
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
    14e0:	mov	r0, r7
    14e2:	bl	10d00 <strlen>
    14e6:	mov	r1, r0
    14e8:	mov	r0, r7
    14ea:	bl	cd74 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    14ee:	ldr	r0, [pc, #32]	; (1510 <makeFilename(char*)+0x84>)
    14f0:	bl	e7ac <Print::println()>
  Serial.println(filename);
  return 1;
}
    14f4:	movs	r0, #1
    14f6:	add	sp, #12
    14f8:	pop	{r4, r5, r6, r7, pc}
    14fa:	nop
    14fc:	.word	0x88888889
    1500:	.word	0x91a2b3c5
    1504:	.word	0xaaaaaaab
    1508:	.word	0xc22e4507
    150c:	.word	0x0001436c
    1510:	.word	0x1fff8d50

00001514 <checkPath(unsigned short, char*)>:

int16_t checkPath(uint16_t store, char *filename)
{
    1514:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1518:	mov	r8, r0
    151a:	sub	sp, #56	; 0x38
  int ln=strlen(filename);
    151c:	mov	r0, r1
  Serial.println(filename);
  return 1;
}

int16_t checkPath(uint16_t store, char *filename)
{
    151e:	mov	r5, r1
  int ln=strlen(filename);
    1520:	bl	10d00 <strlen>
  int i1=-1;
  for(int ii=0;ii<ln;ii++) if(filename[ii]=='/') i1=ii;
    1524:	cmp	r0, #0
    1526:	ble.n	15e2 <checkPath(unsigned short, char*)+0xce>
    1528:	subs	r1, r5, #1
    152a:	movs	r3, #0
    152c:	mov.w	r2, #4294967295
    1530:	ldrb.w	r4, [r1, #1]!
    1534:	cmp	r4, #47	; 0x2f
    1536:	it	eq
    1538:	moveq	r2, r3
    153a:	adds	r3, #1
    153c:	cmp	r0, r3
    153e:	bne.n	1530 <checkPath(unsigned short, char*)+0x1c>
  if(i1<0) return 1; // no path
    1540:	cmp	r2, #0
    1542:	blt.n	15e2 <checkPath(unsigned short, char*)+0xce>
  filename[i1]=0;
  if(!sdx[store].exists(filename))
    1544:	ldr	r3, [pc, #200]	; (1610 <checkPath(unsigned short, char*)+0xfc>)
    1546:	mov.w	r6, #1192	; 0x4a8
{
  int ln=strlen(filename);
  int i1=-1;
  for(int ii=0;ii<ln;ii++) if(filename[ii]=='/') i1=ii;
  if(i1<0) return 1; // no path
  filename[i1]=0;
    154a:	movs	r7, #0
  if(!sdx[store].exists(filename))
    154c:	mla	r6, r6, r8, r3
{
  int ln=strlen(filename);
  int i1=-1;
  for(int ii=0;ii<ln;ii++) if(filename[ii]=='/') i1=ii;
  if(i1<0) return 1; // no path
  filename[i1]=0;
    1550:	strb	r7, [r5, r2]
    1552:	ldr.w	lr, [r6, #1156]	; 0x484
    1556:	adds	r4, r5, r2
   *
   * \return true if the file exists else false.
   */
  bool exists(const char* path) {
    return m_fVol ? m_fVol->exists(path) :
           m_xVol ? m_xVol->exists(path) : false;
    1558:	cmp.w	lr, #0
    155c:	beq.n	1584 <checkPath(unsigned short, char*)+0x70>
   *
   * \return true if the file exists else false.
   */
  bool exists(const char* path) {
    FatFile tmp;
    return tmp.open(this, path, O_RDONLY);
    155e:	mov	r1, lr
    1560:	mov	r3, r7
    1562:	mov	r2, r5
    1564:	mov	r0, sp
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() {}
    1566:	strb.w	r7, [sp]
    156a:	strb.w	r7, [sp, #1]
    156e:	strb.w	r7, [sp, #2]
    1572:	bl	aabc <FatFile::open(FatVolume*, char const*, int)>
  if(!sdx[store].exists(filename))
    1576:	cbz	r0, 15a4 <checkPath(unsigned short, char*)+0x90>
  { Serial.println(filename); 
    if(!sdx[store].mkdir(filename)) return 0;
  }

  filename[i1]='/';
    1578:	movs	r3, #47	; 0x2f
    157a:	strb	r3, [r4, #0]
  return 1;
    157c:	movs	r0, #1
}
    157e:	add	sp, #56	; 0x38
    1580:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1584:	ldr.w	r1, [r6, #1160]	; 0x488
    1588:	cbz	r1, 15a4 <checkPath(unsigned short, char*)+0x90>
   *
   * \return true if the file exists else false.
   */
  bool exists(const ExChar_t* path) {
    ExFatFile tmp;
    return tmp.open(this, path, O_RDONLY);
    158a:	mov	r3, lr
    158c:	mov	r2, r5
    158e:	mov	r0, sp
 * \brief Basic file class.
 */
class ExFatFile {
 public:
  /** Create an instance. */
  ExFatFile() {}
    1590:	strb.w	lr, [sp, #49]	; 0x31
    1594:	strb.w	lr, [sp, #50]	; 0x32
    1598:	strb.w	lr, [sp, #51]	; 0x33
    159c:	bl	9704 <ExFatFile::open(ExFatVolume*, char const*, int)>
  int ln=strlen(filename);
  int i1=-1;
  for(int ii=0;ii<ln;ii++) if(filename[ii]=='/') i1=ii;
  if(i1<0) return 1; // no path
  filename[i1]=0;
  if(!sdx[store].exists(filename))
    15a0:	cmp	r0, #0
    15a2:	bne.n	1578 <checkPath(unsigned short, char*)+0x64>
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
    15a4:	mov	r0, r5
    15a6:	bl	10d00 <strlen>
    15aa:	mov	r1, r0
    15ac:	mov	r0, r5
    15ae:	bl	cd74 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    15b2:	ldr	r0, [pc, #96]	; (1614 <checkPath(unsigned short, char*)+0x100>)
    15b4:	bl	e7ac <Print::println()>
    15b8:	ldr.w	r7, [r6, #1156]	; 0x484
   *
   * \return true for success or false for failure.
   */
  bool mkdir(const char *path, bool pFlag = true) {
    return m_fVol ? m_fVol->mkdir(path, pFlag) :
           m_xVol ? m_xVol->mkdir(path, pFlag) : false;
    15bc:	cbz	r7, 15ea <checkPath(unsigned short, char*)+0xd6>
   *
   * \return true for success or false for failure.
   */
  bool mkdir(const char* path, bool pFlag = true) {
    FatFile sub;
    return sub.mkdir(vwd(), path, pFlag);
    15be:	mov	r2, r5
    15c0:	addw	r1, r7, #1092	; 0x444
    15c4:	movs	r5, #0
    15c6:	movs	r3, #1
    15c8:	mov	r0, sp
    15ca:	strb.w	r5, [sp]
    15ce:	strb.w	r5, [sp, #1]
    15d2:	strb.w	r5, [sp, #2]
    15d6:	bl	a938 <FatFile::mkdir(FatFile*, char const*, bool)>
  { Serial.println(filename); 
    if(!sdx[store].mkdir(filename)) return 0;
    15da:	cmp	r0, #0
    15dc:	bne.n	1578 <checkPath(unsigned short, char*)+0x64>
    15de:	movs	r0, #0
    15e0:	b.n	157e <checkPath(unsigned short, char*)+0x6a>
int16_t checkPath(uint16_t store, char *filename)
{
  int ln=strlen(filename);
  int i1=-1;
  for(int ii=0;ii<ln;ii++) if(filename[ii]=='/') i1=ii;
  if(i1<0) return 1; // no path
    15e2:	movs	r0, #1
    if(!sdx[store].mkdir(filename)) return 0;
  }

  filename[i1]='/';
  return 1;
}
    15e4:	add	sp, #56	; 0x38
    15e6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    15ea:	ldr.w	r1, [r6, #1160]	; 0x488
    15ee:	cmp	r1, #0
    15f0:	beq.n	15de <checkPath(unsigned short, char*)+0xca>
   *
   * \return true for success or false for failure.
   */
  bool mkdir(const ExChar_t* path, bool pFlag = true) {
    ExFatFile sub;
    return sub.mkdir(vwd(), path, pFlag);
    15f2:	mov	r2, r5
    15f4:	add.w	r1, r1, #1096	; 0x448
    15f8:	movs	r3, #1
    15fa:	mov	r0, sp
    15fc:	strb.w	r7, [sp, #49]	; 0x31
    1600:	strb.w	r7, [sp, #50]	; 0x32
    1604:	strb.w	r7, [sp, #51]	; 0x33
    1608:	bl	a134 <ExFatFile::mkdir(ExFatFile*, char const*, bool)>
    160c:	b.n	15da <checkPath(unsigned short, char*)+0xc6>
    160e:	nop
    1610:	.word	0x1fffc648
    1614:	.word	0x1fff8d50

00001618 <file_open(unsigned short)>:
void makeHeader(char *header);
int16_t makeFilename(char *filename);
int16_t checkPath(uint16_t store, char *filename);

int16_t file_open(uint16_t store)
{ char filename[80];
    1618:	push	{r4, r5, r6, r7, lr}
    161a:	sub	sp, #164	; 0xa4
    161c:	mov	r4, r0
  if(!makeFilename(filename)) return 0;
    161e:	mov	r0, sp
    1620:	bl	148c <makeFilename(char*)>
    1624:	cbnz	r0, 162c <file_open(unsigned short)+0x14>
    1626:	movs	r0, #0
  if(!checkPath(store, filename)) return 0;
  mfile = sdx[store].open(filename,FILE_WRITE);
  return !(!mfile);
}
    1628:	add	sp, #164	; 0xa4
    162a:	pop	{r4, r5, r6, r7, pc}
int16_t checkPath(uint16_t store, char *filename);

int16_t file_open(uint16_t store)
{ char filename[80];
  if(!makeFilename(filename)) return 0;
  if(!checkPath(store, filename)) return 0;
    162c:	mov	r1, sp
    162e:	mov	r0, r4
    1630:	bl	1514 <checkPath(unsigned short, char*)>
    1634:	cmp	r0, #0
    1636:	beq.n	1626 <file_open(unsigned short)+0xe>
	}
	File open(const char *filepath, uint8_t mode = FILE_READ) {
		oflag_t flags = O_READ;
		if (mode == FILE_WRITE) flags = O_RDWR | O_CREAT | O_AT_END;
		else if (mode == FILE_WRITE_BEGIN) flags = O_RDWR | O_CREAT;
		SDFAT_FILE file = sdfs.open(filepath, flags);
    1638:	ldr	r3, [pc, #188]	; (16f8 <file_open(unsigned short)+0xe0>)
    163a:	mov.w	r1, #1192	; 0x4a8
    163e:	mla	r1, r1, r4, r3
    1642:	mov	r2, sp
    1644:	movw	r3, #16898	; 0x4202
    1648:	adds	r1, #4
    164a:	add	r0, sp, #80	; 0x50
    164c:	bl	c2f8 <FsVolume::open(char const*, int)>
    1650:	ldr	r3, [sp, #152]	; 0x98
    1652:	cmp	r3, #0
    1654:	beq.n	16e6 <file_open(unsigned short)+0xce>
		if (file) return File(new SDFile(file));
    1656:	movs	r0, #104	; 0x68
    1658:	bl	e94c <operator new(unsigned int)>
    165c:	mov	r4, r0
	// Classes derived from File are never meant to be constructed
	// anywhere other than open() in the parent FS class and
	// openNextFile() while traversing a directory.
	// Only the abstract File class which references these derived
	// classes is meant to have a public constructor!
	SDFile(const SDFAT_FILE &file) : sdfatfile(file), filename(nullptr) { }
    165e:	ldr	r5, [pc, #156]	; (16fc <file_open(unsigned short)+0xe4>)
//#define BYTE 0
//#endif

class __FlashStringHelper;

class Print
    1660:	ldrb.w	r1, [sp, #84]	; 0x54
#define Stream_h

#include <inttypes.h>
#include "Print.h"

class Stream : public Print
    1664:	ldr	r2, [sp, #88]	; 0x58
    1666:	ldrb.w	r3, [sp, #92]	; 0x5c
    166a:	str	r5, [r4, #0]
{
  public:
	constexpr Stream() : _timeout(1000), read_error(0) {}
    166c:	mov.w	r0, #1000	; 0x3e8
{
  public:
	constexpr Print() : write_error(0) {}
    1670:	movs	r5, #0
    1672:	add	r6, sp, #96	; 0x60
#define Stream_h

#include <inttypes.h>
#include "Print.h"

class Stream : public Print
    1674:	ldr	r7, [pc, #136]	; (1700 <file_open(unsigned short)+0xe8>)
{
  public:
	constexpr Stream() : _timeout(1000), read_error(0) {}
    1676:	str	r0, [r4, #8]
//#define BYTE 0
//#endif

class __FlashStringHelper;

class Print
    1678:	strb	r1, [r4, #24]
#define Stream_h

#include <inttypes.h>
#include "Print.h"

class Stream : public Print
    167a:	str	r2, [r4, #28]
    167c:	strb.w	r3, [r4, #32]
    1680:	add.w	r0, r4, #36	; 0x24
    1684:	mov	r1, r6
    1686:	str	r7, [r4, #20]
{
  public:
	constexpr Print() : write_error(0) {}
    1688:	strb	r5, [r4, #4]
{
  public:
	constexpr Stream() : _timeout(1000), read_error(0) {}
    168a:	strb	r5, [r4, #12]

#define FILE_WHOAMI

class File : public Stream {
public:
	constexpr File() : f(nullptr) { }
    168c:	str	r5, [r4, #16]
    168e:	bl	c0b0 <FsBaseFile::FsBaseFile(FsBaseFile const&)>
		// or is_base_of
		//static_assert(std::is_same<decltype(*file),File>::value,
			//"File(File *file) constructor only accepts pointers "
			//"to derived classes, not File itself");
		f = file;
		if (f) f->refcount++;
    1692:	ldr	r3, [r4, #16]
};
/**
 * \class FsFile
 * \brief FsBaseFile file with Arduino Stream.
 */
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    1694:	ldr	r2, [pc, #108]	; (1704 <file_open(unsigned short)+0xec>)
    1696:	str	r5, [r4, #100]	; 0x64
    1698:	adds	r3, #1
    169a:	str	r2, [r4, #20]
    169c:	str	r3, [r4, #16]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    169e:	ldr	r5, [pc, #104]	; (1708 <file_open(unsigned short)+0xf0>)
    16a0:	ldr	r3, [pc, #104]	; (170c <file_open(unsigned short)+0xf4>)
    16a2:	str	r3, [sp, #80]	; 0x50
   */
  FsBaseFile(const char* path, oflag_t oflag) {
    open(path, oflag);
  }

  ~FsBaseFile() {close();}
    16a4:	mov	r0, r6
    16a6:	bl	c128 <FsBaseFile::close()>
    16aa:	ldr	r2, [r5, #16]
    16ac:	cbz	r2, 16c0 <file_open(unsigned short)+0xa8>
    16ae:	ldr	r3, [r2, #16]
    16b0:	subs	r3, #1
    16b2:	str	r3, [r2, #16]
    16b4:	cbnz	r3, 16c0 <file_open(unsigned short)+0xa8>
    16b6:	ldr	r0, [r5, #16]
    16b8:	cbz	r0, 16c0 <file_open(unsigned short)+0xa8>
    16ba:	ldr	r3, [r0, #0]
    16bc:	ldr	r3, [r3, #32]
    16be:	blx	r3
	File& operator = (const File &file) {
		//Serial.println("File assignment");
		//static int assigncount=0;
		//if (++assigncount > 20) while (1) ;
		invalidate();
		f = file.f;
    16c0:	str	r4, [r5, #16]
    16c2:	ldr	r5, [pc, #68]	; (1708 <file_open(unsigned short)+0xf0>)
		if (f) f->refcount++;
    16c4:	cbz	r4, 16f2 <file_open(unsigned short)+0xda>
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    16c6:	ldr	r3, [r4, #16]
    16c8:	cbnz	r3, 16d8 <file_open(unsigned short)+0xc0>
    16ca:	ldr	r3, [r4, #0]
    16cc:	mov	r0, r4
    16ce:	ldr	r3, [r3, #32]
    16d0:	blx	r3
    16d2:	ldr	r4, [r5, #16]
	}
	virtual void close() {
		if (f) f->close();
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
    16d4:	cmp	r4, #0
    16d6:	beq.n	1626 <file_open(unsigned short)+0xe>
    16d8:	ldr	r3, [r4, #0]
    16da:	mov	r0, r4
    16dc:	ldr	r3, [r3, #68]	; 0x44
    16de:	blx	r3
    16e0:	sxth	r0, r0
  mfile = sdx[store].open(filename,FILE_WRITE);
  return !(!mfile);
}
    16e2:	add	sp, #164	; 0xa4
    16e4:	pop	{r4, r5, r6, r7, pc}
  bool isHidden() const {
    return m_fFile ? m_fFile->isHidden() :
           m_xFile ? m_xFile->isHidden() : false;
  }
  /** \return True if this is an open file/directory else false. */
  bool isOpen() const {return m_fFile || m_xFile;}
    16e6:	ldr	r0, [sp, #156]	; 0x9c
    16e8:	cmp	r0, #0
    16ea:	bne.n	1656 <file_open(unsigned short)+0x3e>

#define FILE_WHOAMI

class File : public Stream {
public:
	constexpr File() : f(nullptr) { }
    16ec:	mov	r4, r0
    16ee:	add	r6, sp, #96	; 0x60
    16f0:	b.n	169e <file_open(unsigned short)+0x86>
		//Serial.println("File assignment");
		//static int assigncount=0;
		//if (++assigncount > 20) while (1) ;
		invalidate();
		f = file.f;
		if (f) f->refcount++;
    16f2:	mov	r0, r4
    16f4:	b.n	1628 <file_open(unsigned short)+0x10>
    16f6:	nop
    16f8:	.word	0x1fffc648
    16fc:	.word	0x0001420c
    1700:	.word	0x00014140
    1704:	.word	0x00014188
    1708:	.word	0x1fff8a48
    170c:	.word	0x00014164

00001710 <do_logger(unsigned short, short)>:
#define NBUF_DISK (NDBL*NBUF_ACQ)
uint32_t diskBuffer[NBUF_DISK];
uint32_t maxDel=0;

int16_t do_logger(uint16_t store, int16_t state)
{ uint32_t to=millis();
    1710:	push	{r4, r5, r6, r7, lr}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1712:	ldr	r5, [pc, #164]	; (17b8 <do_logger(unsigned short, short)+0xa8>)
    1714:	sub	sp, #12
    1716:	ldr	r3, [r5, #0]
    1718:	str	r3, [sp, #0]
    171a:	mov	r7, r0
    171c:	mov	r4, r1
  if(pullData(diskBuffer,NDBL))
    171e:	ldr	r0, [pc, #156]	; (17bc <do_logger(unsigned short, short)+0xac>)
	return ret;
    1720:	ldr	r6, [sp, #0]
    1722:	movs	r1, #8
    1724:	bl	12a4 <pullData(unsigned long*, unsigned long)>
    1728:	cbz	r0, 173e <do_logger(unsigned short, short)+0x2e>
  {
    if(state==0)
    172a:	cbz	r4, 1764 <do_logger(unsigned short, short)+0x54>
    { // acquisition is running, need to open file
      if(!file_open(store)) return -2;
      state=1;
    }
    if(state==1)
    172c:	cmp	r4, #1
    172e:	beq.n	176c <do_logger(unsigned short, short)+0x5c>
    { // file just opended, need to write header
      if(!file_writeHeader()) return -3;
      state=2;
      
    }
    if(state>=2)
    1730:	ble.n	1742 <do_logger(unsigned short, short)+0x32>
    { // write data to disk
      if(!file_writeData(diskBuffer,NBUF_DISK*4)) return -4;
    1732:	mov.w	r1, #8192	; 0x2000
    1736:	ldr	r0, [pc, #132]	; (17bc <do_logger(unsigned short, short)+0xac>)
    1738:	bl	1374 <file_writeData(void*, unsigned long)>
    173c:	cbz	r0, 1798 <do_logger(unsigned short, short)+0x88>
    }
  }

  if(state==3)
    173e:	cmp	r4, #3
    1740:	beq.n	1782 <do_logger(unsigned short, short)+0x72>
  { // close file, but continue acquisition
    if(!file_close()) return -5;
    state=0;
  }

  if(state==4)
    1742:	cmp	r4, #4
    1744:	beq.n	178c <do_logger(unsigned short, short)+0x7c>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1746:	ldr	r3, [r5, #0]
    1748:	str	r3, [sp, #4]
    if(!file_close()) return -6;
    state=-1;
  }

  uint32_t dt=millis()-to;
  if(dt>maxDel) maxDel=dt;
    174a:	ldr	r2, [pc, #116]	; (17c0 <do_logger(unsigned short, short)+0xb0>)
	return ret;
    174c:	ldr	r3, [sp, #4]
    174e:	ldr	r1, [r2, #0]
  { // close file and stop acquisition
    if(!file_close()) return -6;
    state=-1;
  }

  uint32_t dt=millis()-to;
    1750:	subs	r3, r3, r6
  if(dt>maxDel) maxDel=dt;
    1752:	cmp	r3, r1
    1754:	bls.n	175e <do_logger(unsigned short, short)+0x4e>
    1756:	str	r3, [r2, #0]

  return state;
    1758:	mov	r0, r4
}
    175a:	add	sp, #12
    175c:	pop	{r4, r5, r6, r7, pc}
  }

  uint32_t dt=millis()-to;
  if(dt>maxDel) maxDel=dt;

  return state;
    175e:	mov	r0, r4
}
    1760:	add	sp, #12
    1762:	pop	{r4, r5, r6, r7, pc}
{ uint32_t to=millis();
  if(pullData(diskBuffer,NDBL))
  {
    if(state==0)
    { // acquisition is running, need to open file
      if(!file_open(store)) return -2;
    1764:	mov	r0, r7
    1766:	bl	1618 <file_open(unsigned short)>
    176a:	cbz	r0, 179e <do_logger(unsigned short, short)+0x8e>
      state=1;
    }
    if(state==1)
    { // file just opended, need to write header
      if(!file_writeHeader()) return -3;
    176c:	bl	144c <file_writeHeader()>
    1770:	cbz	r0, 17a4 <do_logger(unsigned short, short)+0x94>
      state=2;
      
    }
    if(state>=2)
    { // write data to disk
      if(!file_writeData(diskBuffer,NBUF_DISK*4)) return -4;
    1772:	mov.w	r1, #8192	; 0x2000
    1776:	ldr	r0, [pc, #68]	; (17bc <do_logger(unsigned short, short)+0xac>)
    1778:	bl	1374 <file_writeData(void*, unsigned long)>
    177c:	cbz	r0, 1798 <do_logger(unsigned short, short)+0x88>
      state=1;
    }
    if(state==1)
    { // file just opended, need to write header
      if(!file_writeHeader()) return -3;
      state=2;
    177e:	movs	r4, #2
    1780:	b.n	1746 <do_logger(unsigned short, short)+0x36>
    }
  }

  if(state==3)
  { // close file, but continue acquisition
    if(!file_close()) return -5;
    1782:	bl	13ac <file_close()>
    1786:	cbz	r0, 17b0 <do_logger(unsigned short, short)+0xa0>
    state=0;
    1788:	movs	r4, #0
    178a:	b.n	1746 <do_logger(unsigned short, short)+0x36>
  }

  if(state==4)
  { // close file and stop acquisition
    if(!file_close()) return -6;
    178c:	bl	13ac <file_close()>
    1790:	cbz	r0, 17aa <do_logger(unsigned short, short)+0x9a>
    state=-1;
    1792:	mov.w	r4, #4294967295
    1796:	b.n	1746 <do_logger(unsigned short, short)+0x36>
      state=2;
      
    }
    if(state>=2)
    { // write data to disk
      if(!file_writeData(diskBuffer,NBUF_DISK*4)) return -4;
    1798:	mvn.w	r0, #3
    179c:	b.n	175a <do_logger(unsigned short, short)+0x4a>
{ uint32_t to=millis();
  if(pullData(diskBuffer,NDBL))
  {
    if(state==0)
    { // acquisition is running, need to open file
      if(!file_open(store)) return -2;
    179e:	mvn.w	r0, #1
    17a2:	b.n	175a <do_logger(unsigned short, short)+0x4a>
      state=1;
    }
    if(state==1)
    { // file just opended, need to write header
      if(!file_writeHeader()) return -3;
    17a4:	mvn.w	r0, #2
    17a8:	b.n	175a <do_logger(unsigned short, short)+0x4a>
    state=0;
  }

  if(state==4)
  { // close file and stop acquisition
    if(!file_close()) return -6;
    17aa:	mvn.w	r0, #5
    17ae:	b.n	175a <do_logger(unsigned short, short)+0x4a>
    }
  }

  if(state==3)
  { // close file, but continue acquisition
    if(!file_close()) return -5;
    17b0:	mvn.w	r0, #4
    17b4:	b.n	175a <do_logger(unsigned short, short)+0x4a>
    17b6:	nop
    17b8:	.word	0x200030a4
    17bc:	.word	0x1fff993c
    17c0:	.word	0x1fff9738

000017c4 <Adjust_MCLK(long, long*, long*)>:
  //Teensy 3.2, 3.6 or 3.5
      #define MCLK_SRC  3

    // estimate MCLK to generate precise sampling frequency (typically equal or greater desired frequency)
    void Adjust_MCLK(int32_t fsamp, int32_t *mult, int32_t *div)
    {
    17c4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    17c8:	sub.w	sp, sp, #1024	; 0x400
    17cc:	mov	r9, r1
    17ce:	mov	r8, r2
    17d0:	bl	f658 <__aeabi_i2f>
    17d4:	mov	r1, r0
    17d6:	ldr	r0, [pc, #140]	; (1864 <Adjust_MCLK(long, long*, long*)+0xa0>)
    17d8:	bl	f868 <__aeabi_fdiv>
    17dc:	mov	r6, sp
    17de:	mov	r7, r0
    17e0:	mov	r5, sp
      float A = (float)F_PLL / (BIT_DIV*ovr);
      float X[255];
      for(int ii=0; ii<255;ii++) X[ii]=A/((float) fsamp)*(ii+1);
    17e2:	movs	r4, #0
    17e4:	adds	r4, #1
    17e6:	mov	r0, r4
    17e8:	bl	f658 <__aeabi_i2f>
    17ec:	mov	r1, r7
    17ee:	bl	f700 <__aeabi_fmul>
    17f2:	cmp	r4, #255	; 0xff
    17f4:	str.w	r0, [r5, #4]!
    17f8:	bne.n	17e4 <Adjust_MCLK(long, long*, long*)+0x20>
    17fa:	movs	r4, #0
    17fc:	mov.w	r7, #1065353216	; 0x3f800000
    1800:	mov	sl, r4
    1802:	b.n	180a <Adjust_MCLK(long, long*, long*)+0x46>
      int32_t iimin=0;
      float xmin=1.0f;
      for(int ii=0; ii<255;ii++) if((X[ii]<4096.0f) && (fmodf(X[ii],1.0f)<xmin)) {iimin=ii; xmin=fmodf(X[ii],1.0f);}
    1804:	adds	r4, #1
    1806:	cmp	r4, #255	; 0xff
    1808:	beq.n	1844 <Adjust_MCLK(long, long*, long*)+0x80>
    180a:	ldr.w	r5, [r6, #4]!
    180e:	mov.w	r1, #1166016512	; 0x45800000
    1812:	mov	r0, r5
    1814:	bl	fa3c <__aeabi_fcmplt>
    1818:	cmp	r0, #0
    181a:	beq.n	1804 <Adjust_MCLK(long, long*, long*)+0x40>
    181c:	mov.w	r1, #1065353216	; 0x3f800000
    1820:	mov	r0, r5
    1822:	bl	e954 <fmodf>
    1826:	mov	r1, r7
    1828:	bl	fa3c <__aeabi_fcmplt>
    182c:	mov.w	r1, #1065353216	; 0x3f800000
    1830:	cmp	r0, #0
    1832:	beq.n	1804 <Adjust_MCLK(long, long*, long*)+0x40>
    1834:	mov	r0, r5
    1836:	bl	e954 <fmodf>
    183a:	mov	sl, r4
    183c:	adds	r4, #1
    183e:	cmp	r4, #255	; 0xff
    1840:	mov	r7, r0
    1842:	bne.n	180a <Adjust_MCLK(long, long*, long*)+0x46>
      *mult=iimin+1;
      *div=(int) X[iimin];
    1844:	add	r2, sp, #4
      float X[255];
      for(int ii=0; ii<255;ii++) X[ii]=A/((float) fsamp)*(ii+1);
      int32_t iimin=0;
      float xmin=1.0f;
      for(int ii=0; ii<255;ii++) if((X[ii]<4096.0f) && (fmodf(X[ii],1.0f)<xmin)) {iimin=ii; xmin=fmodf(X[ii],1.0f);}
      *mult=iimin+1;
    1846:	add.w	r3, sl, #1
      *div=(int) X[iimin];
    184a:	ldr.w	r0, [r2, sl, lsl #2]
      float X[255];
      for(int ii=0; ii<255;ii++) X[ii]=A/((float) fsamp)*(ii+1);
      int32_t iimin=0;
      float xmin=1.0f;
      for(int ii=0; ii<255;ii++) if((X[ii]<4096.0f) && (fmodf(X[ii],1.0f)<xmin)) {iimin=ii; xmin=fmodf(X[ii],1.0f);}
      *mult=iimin+1;
    184e:	str.w	r3, [r9]
      *div=(int) X[iimin];
    1852:	bl	fab8 <__aeabi_f2iz>
    1856:	str.w	r0, [r8]
    }
    185a:	add.w	sp, sp, #1024	; 0x400
    185e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    1862:	nop
    1864:	.word	0x48b71b00

00001868 <acq_init(long)>:
        SIM_SCGC7 |= SIM_SCGC7_DMA;
        SIM_SCGC6 |= SIM_SCGC6_DMAMUX;
    }

    void acq_init(int32_t fsamp)
    {
    1868:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    186c:	sub	sp, #32
      int32_t MCLK_MULT, MCLK_DIV;

#define EST_MCKL 0 // 0 precise frequency, 1 minimal jitter
#if EST_MCKL==0
      Adjust_MCLK(fsamp,&MCLK_MULT,&MCLK_DIV);
    186e:	add	r2, sp, #28
    1870:	add	r1, sp, #24
        SIM_SCGC7 |= SIM_SCGC7_DMA;
        SIM_SCGC6 |= SIM_SCGC6_DMAMUX;
    }

    void acq_init(int32_t fsamp)
    {
    1872:	mov	r6, r0
      int32_t MCLK_MULT, MCLK_DIV;

#define EST_MCKL 0 // 0 precise frequency, 1 minimal jitter
#if EST_MCKL==0
      Adjust_MCLK(fsamp,&MCLK_MULT,&MCLK_DIV);
    1874:	bl	17c4 <Adjust_MCLK(long, long*, long*)>
#elif EST_MCKL==1
      Approx_MCLK(fsamp,&MCLK_MULT,&MCLK_DIV);
#endif
      float fract = (float)MCLK_MULT/((float) MCLK_DIV);
    1878:	ldr	r4, [sp, #24]
    187a:	ldr	r5, [sp, #28]
      int32_t mclk0=((F_PLL)*fract);
    187c:	mov	r0, r4
    187e:	bl	f658 <__aeabi_i2f>
    1882:	mov	r7, r0
    1884:	mov	r0, r5
    1886:	bl	f658 <__aeabi_i2f>
    188a:	mov	r1, r0
    188c:	mov	r0, r7
    188e:	bl	f868 <__aeabi_fdiv>
    1892:	ldr	r1, [pc, #352]	; (19f4 <acq_init(long)+0x18c>)
P36 PTC9                    I2S0_RX_BCLK (4)
P37 PTC10                   I2S0_RX_FS (4)
P38 PTC11                   I2S0_RXD1 (4)
P39 PTA17  I2S0_MCLK (6)
*/
        CORE_PIN11_CONFIG = PORT_PCR_MUX(6);   // PTC6,  I2S0_MCLK
    1894:	ldr	r7, [pc, #352]	; (19f8 <acq_init(long)+0x190>)
      Adjust_MCLK(fsamp,&MCLK_MULT,&MCLK_DIV);
#elif EST_MCKL==1
      Approx_MCLK(fsamp,&MCLK_MULT,&MCLK_DIV);
#endif
      float fract = (float)MCLK_MULT/((float) MCLK_DIV);
      int32_t mclk0=((F_PLL)*fract);
    1896:	bl	f700 <__aeabi_fmul>
    189a:	bl	fab8 <__aeabi_f2iz>
      int32_t fsamp0=(mclk0/(BIT_DIV*ovr));

      Serial.printf("%d %d %d %d %d %d %d\n",F_CPU, MCLK_MULT, MCLK_DIV, BIT_DIV, mclk0,fsamp,fsamp0); Serial.flush();
    189e:	movs	r2, #2
    18a0:	lsrs	r3, r0, #8
    18a2:	ldr	r1, [pc, #344]	; (19fc <acq_init(long)+0x194>)
    18a4:	str	r6, [sp, #12]
    18a6:	str	r0, [sp, #8]
    18a8:	str	r3, [sp, #16]
    18aa:	str	r5, [sp, #0]
    18ac:	mov	r3, r4
    18ae:	str	r2, [sp, #4]
    18b0:	ldr	r0, [pc, #332]	; (1a00 <acq_init(long)+0x198>)
    18b2:	ldr	r2, [pc, #336]	; (1a04 <acq_init(long)+0x19c>)
P37 PTC10                   I2S0_RX_FS (4)
P38 PTC11                   I2S0_RXD1 (4)
P39 PTA17  I2S0_MCLK (6)
*/
        CORE_PIN11_CONFIG = PORT_PCR_MUX(6);   // PTC6,  I2S0_MCLK
        CORE_PIN9_CONFIG = PORT_PCR_MUX(6);    // PTC3,  I2S0_TX_BCLK
    18b4:	ldr	r6, [pc, #336]	; (1a08 <acq_init(long)+0x1a0>)
        CORE_PIN23_CONFIG = PORT_PCR_MUX(6);   // PTC2,  I2S0_TX_FS 
    18b6:	ldr	r5, [pc, #340]	; (1a0c <acq_init(long)+0x1a4>)
#endif
      float fract = (float)MCLK_MULT/((float) MCLK_DIV);
      int32_t mclk0=((F_PLL)*fract);
      int32_t fsamp0=(mclk0/(BIT_DIV*ovr));

      Serial.printf("%d %d %d %d %d %d %d\n",F_CPU, MCLK_MULT, MCLK_DIV, BIT_DIV, mclk0,fsamp,fsamp0); Serial.flush();
    18b8:	bl	e7dc <Print::printf(char const*, ...)>
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
    18bc:	bl	cedc <usb_serial_flush_output>
*/
        CORE_PIN11_CONFIG = PORT_PCR_MUX(6);   // PTC6,  I2S0_MCLK
        CORE_PIN9_CONFIG = PORT_PCR_MUX(6);    // PTC3,  I2S0_TX_BCLK
        CORE_PIN23_CONFIG = PORT_PCR_MUX(6);   // PTC2,  I2S0_TX_FS 

        I2S0_RCSR=0;
    18c0:	ldr	r2, [pc, #332]	; (1a10 <acq_init(long)+0x1a8>)

        // enable MCLK output // MCLK = INP *((MULT)/(DIV))
        I2S0_MDR = I2S_MDR_FRACT((MCLK_MULT-1)) | I2S_MDR_DIVIDE((MCLK_DIV-1));
    18c2:	ldr	r0, [pc, #336]	; (1a14 <acq_init(long)+0x1ac>)
        while(I2S0_MCR & I2S_MCR_DUF);
    18c4:	ldr	r1, [pc, #336]	; (1a18 <acq_init(long)+0x1b0>)
P36 PTC9                    I2S0_RX_BCLK (4)
P37 PTC10                   I2S0_RX_FS (4)
P38 PTC11                   I2S0_RXD1 (4)
P39 PTA17  I2S0_MCLK (6)
*/
        CORE_PIN11_CONFIG = PORT_PCR_MUX(6);   // PTC6,  I2S0_MCLK
    18c6:	mov.w	r3, #1536	; 0x600
        CORE_PIN9_CONFIG = PORT_PCR_MUX(6);    // PTC3,  I2S0_TX_BCLK
        CORE_PIN23_CONFIG = PORT_PCR_MUX(6);   // PTC2,  I2S0_TX_FS 

        I2S0_RCSR=0;
    18ca:	movs	r4, #0
P36 PTC9                    I2S0_RX_BCLK (4)
P37 PTC10                   I2S0_RX_FS (4)
P38 PTC11                   I2S0_RXD1 (4)
P39 PTA17  I2S0_MCLK (6)
*/
        CORE_PIN11_CONFIG = PORT_PCR_MUX(6);   // PTC6,  I2S0_MCLK
    18cc:	str	r3, [r7, #0]
        CORE_PIN9_CONFIG = PORT_PCR_MUX(6);    // PTC3,  I2S0_TX_BCLK
    18ce:	str	r3, [r6, #0]
        CORE_PIN23_CONFIG = PORT_PCR_MUX(6);   // PTC2,  I2S0_TX_FS 
    18d0:	str	r3, [r5, #0]

        I2S0_RCSR=0;
    18d2:	str	r4, [r2, #0]

        // enable MCLK output // MCLK = INP *((MULT)/(DIV))
        I2S0_MDR = I2S_MDR_FRACT((MCLK_MULT-1)) | I2S_MDR_DIVIDE((MCLK_DIV-1));
    18d4:	ldr	r2, [sp, #24]
    18d6:	ldr	r3, [sp, #28]
    18d8:	subs	r2, #1
    18da:	lsls	r2, r2, #12
    18dc:	subs	r3, #1
    18de:	and.w	r2, r2, #1044480	; 0xff000
    18e2:	ubfx	r3, r3, #0, #12
    18e6:	orrs	r3, r2
    18e8:	str	r3, [r0, #0]
        while(I2S0_MCR & I2S_MCR_DUF);
    18ea:	ldr	r3, [r1, #0]
    18ec:	ldr	r2, [pc, #296]	; (1a18 <acq_init(long)+0x1b0>)
    18ee:	cmp	r3, #0
    18f0:	blt.n	18ea <acq_init(long)+0x82>
        I2S0_MCR = I2S_MCR_MICS(MCLK_SRC) | I2S_MCR_MOE;
        
        // configure transmitter
        I2S0_TMR = 0;
    18f2:	ldr	r4, [pc, #296]	; (1a1c <acq_init(long)+0x1b4>)
        I2S0_TCR1 = I2S_TCR1_TFW(1);  // watermark at half fifo size
        I2S0_TCR2 = I2S_TCR2_SYNC(0) 
                    | I2S_TCR2_BCP 
                    | I2S_TCR2_MSEL(1)
                    | I2S_TCR2_BCD 
                    | I2S_TCR2_DIV((BIT_DIV-1));
    18f4:	ldr.w	ip, [pc, #364]	; 1a64 <acq_init(long)+0x1fc>
        while(I2S0_MCR & I2S_MCR_DUF);
        I2S0_MCR = I2S_MCR_MICS(MCLK_SRC) | I2S_MCR_MOE;
        
        // configure transmitter
        I2S0_TMR = 0;
        I2S0_TCR1 = I2S_TCR1_TFW(1);  // watermark at half fifo size
    18f8:	ldr.w	r8, [pc, #364]	; 1a68 <acq_init(long)+0x200>
        I2S0_TCR4 = I2S_TCR4_FRSZ((FRAME_I2S-1)) 
                    | I2S_TCR4_SYWD(31)
                    | I2S_TCR4_MF
                    | I2S_TCR4_FSE 
                    | I2S_TCR4_FSP 
                    | I2S_TCR4_FSD;
    18fc:	ldr	r3, [pc, #288]	; (1a20 <acq_init(long)+0x1b8>)
        I2S0_TCR5 = I2S_TCR5_WNW(31) | I2S_TCR5_W0W(31) | I2S_TCR5_FBT(31);
    18fe:	ldr	r7, [pc, #292]	; (1a24 <acq_init(long)+0x1bc>)

      	// configure receiver (sync'd to transmitter clocks)
        I2S0_RMR=0;
    1900:	ldr	r5, [pc, #292]	; (1a28 <acq_init(long)+0x1c0>)
        I2S0_RCR1 = I2S_RCR1_RFW(1); 
    1902:	ldr.w	lr, [pc, #360]	; 1a6c <acq_init(long)+0x204>

        I2S0_RCR2 = I2S_RCR2_SYNC(1) 
                    | I2S_RCR2_BCP 
                    | I2S_RCR2_BCD  // Bit clock in master mode
                    | I2S_RCR2_DIV((BIT_DIV-1)); // divides MCLK down to Bitclock (BIT_DIV)*2
    1906:	ldr	r1, [pc, #292]	; (1a2c <acq_init(long)+0x1c4>)
        I2S0_RCR4 = I2S_RCR4_FRSZ((FRAME_I2S-1)) 
                    | I2S_RCR4_SYWD(31)
                    | I2S_RCR4_FSE  // frame sync early
                    | I2S_RCR4_FSP 
                    | I2S_RCR4_FSD  // Frame sync in master mode
                    | I2S_RCR4_MF;
    1908:	ldr	r0, [pc, #292]	; (1a30 <acq_init(long)+0x1c8>)
        I2S0_RCSR=0;

        // enable MCLK output // MCLK = INP *((MULT)/(DIV))
        I2S0_MDR = I2S_MDR_FRACT((MCLK_MULT-1)) | I2S_MDR_DIVIDE((MCLK_DIV-1));
        while(I2S0_MCR & I2S_MCR_DUF);
        I2S0_MCR = I2S_MCR_MICS(MCLK_SRC) | I2S_MCR_MOE;
    190a:	mov.w	r6, #1124073472	; 0x43000000
    190e:	str	r6, [r2, #0]
        
        // configure transmitter
        I2S0_TMR = 0;
    1910:	movs	r6, #0
    1912:	str	r6, [r4, #0]
        I2S0_TCR1 = I2S_TCR1_TFW(1);  // watermark at half fifo size
        I2S0_TCR2 = I2S_TCR2_SYNC(0) 
                    | I2S_TCR2_BCP 
                    | I2S_TCR2_MSEL(1)
                    | I2S_TCR2_BCD 
                    | I2S_TCR2_DIV((BIT_DIV-1));
    1914:	ldr	r2, [pc, #284]	; (1a34 <acq_init(long)+0x1cc>)
        while(I2S0_MCR & I2S_MCR_DUF);
        I2S0_MCR = I2S_MCR_MICS(MCLK_SRC) | I2S_MCR_MOE;
        
        // configure transmitter
        I2S0_TMR = 0;
        I2S0_TCR1 = I2S_TCR1_TFW(1);  // watermark at half fifo size
    1916:	movs	r4, #1
    1918:	str.w	r4, [r8]
        I2S0_TCR2 = I2S_TCR2_SYNC(0) 
                    | I2S_TCR2_BCP 
                    | I2S_TCR2_MSEL(1)
                    | I2S_TCR2_BCD 
                    | I2S_TCR2_DIV((BIT_DIV-1));
    191c:	str.w	r2, [ip]
        I2S0_TCR4 = I2S_TCR4_FRSZ((FRAME_I2S-1)) 
                    | I2S_TCR4_SYWD(31)
                    | I2S_TCR4_MF
                    | I2S_TCR4_FSE 
                    | I2S_TCR4_FSP 
                    | I2S_TCR4_FSD;
    1920:	ldr	r2, [pc, #276]	; (1a38 <acq_init(long)+0x1d0>)
    1922:	str	r2, [r3, #0]
        I2S0_TCR5 = I2S_TCR5_WNW(31) | I2S_TCR5_W0W(31) | I2S_TCR5_FBT(31);
    1924:	ldr	r3, [pc, #276]	; (1a3c <acq_init(long)+0x1d4>)
    1926:	str	r3, [r7, #0]

      	// configure receiver (sync'd to transmitter clocks)
        I2S0_RMR=0;
    1928:	str	r6, [r5, #0]
                    | I2S_RCR4_MF;
        
        I2S0_RCR5 = I2S_RCR5_WNW(31) | I2S_RCR5_W0W(31) | I2S_RCR5_FBT(31);


  dma.begin(true); // Allocate the DMA channel first
    192a:	ldr	r5, [pc, #276]	; (1a40 <acq_init(long)+0x1d8>)
                    | I2S_TCR4_FSD;
        I2S0_TCR5 = I2S_TCR5_WNW(31) | I2S_TCR5_W0W(31) | I2S_TCR5_FBT(31);

      	// configure receiver (sync'd to transmitter clocks)
        I2S0_RMR=0;
        I2S0_RCR1 = I2S_RCR1_RFW(1); 
    192c:	str.w	r4, [lr]

        I2S0_RCR2 = I2S_RCR2_SYNC(1) 
                    | I2S_RCR2_BCP 
                    | I2S_RCR2_BCD  // Bit clock in master mode
                    | I2S_RCR2_DIV((BIT_DIV-1)); // divides MCLK down to Bitclock (BIT_DIV)*2
    1930:	ldr.w	lr, [pc, #316]	; 1a70 <acq_init(long)+0x208>
    1934:	str.w	lr, [r1]
        I2S0_RCR4 = I2S_RCR4_FRSZ((FRAME_I2S-1)) 
                    | I2S_RCR4_SYWD(31)
                    | I2S_RCR4_FSE  // frame sync early
                    | I2S_RCR4_FSP 
                    | I2S_RCR4_FSD  // Frame sync in master mode
                    | I2S_RCR4_MF;
    1938:	str	r2, [r0, #0]
        
        I2S0_RCR5 = I2S_RCR5_WNW(31) | I2S_RCR5_W0W(31) | I2S_RCR5_FBT(31);


  dma.begin(true); // Allocate the DMA channel first
    193a:	mov	r1, r4
    193c:	mov	r0, r5
                    | I2S_RCR4_FSE  // frame sync early
                    | I2S_RCR4_FSP 
                    | I2S_RCR4_FSD  // Frame sync in master mode
                    | I2S_RCR4_MF;
        
        I2S0_RCR5 = I2S_RCR5_WNW(31) | I2S_RCR5_W0W(31) | I2S_RCR5_FBT(31);
    193e:	str.w	r3, [r7, #128]	; 0x80


  dma.begin(true); // Allocate the DMA channel first
    1942:	bl	e584 <DMAChannel::begin(bool)>

#if N_ADC==1
          CORE_PIN13_CONFIG = PORT_PCR_MUX(4);  // PTC5,  I2S0_RXD0
    1946:	ldr	r3, [pc, #252]	; (1a44 <acq_init(long)+0x1dc>)

          I2S0_TCR3 = I2S_TCR3_TCE;
    1948:	ldr	r0, [pc, #252]	; (1a48 <acq_init(long)+0x1e0>)
          I2S0_RCR3 = I2S_RCR3_RCE;
    194a:	ldr	r1, [pc, #256]	; (1a4c <acq_init(long)+0x1e4>)

          dma.TCD->SADDR = &I2S0_RDR0;
    194c:	ldr	r2, [pc, #256]	; (1a50 <acq_init(long)+0x1e8>)
          dma.TCD->NBYTES_MLOFFYES = DMA_TCD_NBYTES_SMLOE |
              DMA_TCD_NBYTES_MLOFFYES_MLOFF(-8) |
              DMA_TCD_NBYTES_MLOFFYES_NBYTES(8);
          dma.TCD->SLAST = -8;
#endif
          dma.TCD->DADDR = tdm_rx_buffer;
    194e:	ldr.w	lr, [pc, #292]	; 1a74 <acq_init(long)+0x20c>


  dma.begin(true); // Allocate the DMA channel first

#if N_ADC==1
          CORE_PIN13_CONFIG = PORT_PCR_MUX(4);  // PTC5,  I2S0_RXD0
    1952:	mov.w	r7, #1024	; 0x400
    1956:	str	r7, [r3, #0]

          I2S0_TCR3 = I2S_TCR3_TCE;
    1958:	mov.w	r3, #65536	; 0x10000
    195c:	str	r3, [r0, #0]
          I2S0_RCR3 = I2S_RCR3_RCE;
    195e:	str	r3, [r1, #0]

          dma.TCD->SADDR = &I2S0_RDR0;
    1960:	ldr	r3, [r5, #0]
    1962:	str	r2, [r3, #0]
          dma.TCD->SOFF = 0;
    1964:	strh	r6, [r3, #4]
	// 32 bits.  If a channel is configured for 200 transfers

	// Use a hardware trigger to make the DMA channel run
	void triggerAtHardwareEvent(uint8_t source) {
		volatile uint8_t *mux;
		mux = (volatile uint8_t *)&(DMAMUX0_CHCFG0) + channel;
    1966:	ldrb	r2, [r5, #4]
          dma.TCD->NBYTES_MLOFFYES = DMA_TCD_NBYTES_SMLOE |
              DMA_TCD_NBYTES_MLOFFYES_MLOFF(-8) |
              DMA_TCD_NBYTES_MLOFFYES_NBYTES(8);
          dma.TCD->SLAST = -8;
#endif
          dma.TCD->DADDR = tdm_rx_buffer;
    1968:	str.w	lr, [r3, #16]
    196c:	add.w	r2, r2, #1073741824	; 0x40000000
    1970:	add.w	r2, r2, #135168	; 0x21000
          dma.TCD->DOFF = 4;
          dma.TCD->CITER_ELINKNO = dma.TCD->BITER_ELINKNO = NDAT*FRAME_I2S*2;
          dma.TCD->DLASTSGA = -sizeof(tdm_rx_buffer);
    1974:	sub.w	r7, r7, #3072	; 0xc00
          I2S0_TCR3 = I2S_TCR3_TCE;
          I2S0_RCR3 = I2S_RCR3_RCE;

          dma.TCD->SADDR = &I2S0_RDR0;
          dma.TCD->SOFF = 0;
          dma.TCD->ATTR = DMA_TCD_ATTR_SSIZE(2) | DMA_TCD_ATTR_DSIZE(2);
    1978:	movw	r1, #514	; 0x202
    197c:	strh	r1, [r3, #6]
          dma.TCD->SLAST = -8;
#endif
          dma.TCD->DADDR = tdm_rx_buffer;
          dma.TCD->DOFF = 4;
          dma.TCD->CITER_ELINKNO = dma.TCD->BITER_ELINKNO = NDAT*FRAME_I2S*2;
          dma.TCD->DLASTSGA = -sizeof(tdm_rx_buffer);
    197e:	str	r7, [r3, #24]
              DMA_TCD_NBYTES_MLOFFYES_NBYTES(8);
          dma.TCD->SLAST = -8;
#endif
          dma.TCD->DADDR = tdm_rx_buffer;
          dma.TCD->DOFF = 4;
          dma.TCD->CITER_ELINKNO = dma.TCD->BITER_ELINKNO = NDAT*FRAME_I2S*2;
    1980:	mov.w	r0, #512	; 0x200
          I2S0_RCR3 = I2S_RCR3_RCE;

          dma.TCD->SADDR = &I2S0_RDR0;
          dma.TCD->SOFF = 0;
          dma.TCD->ATTR = DMA_TCD_ATTR_SSIZE(2) | DMA_TCD_ATTR_DSIZE(2);
          dma.TCD->NBYTES_MLNO = 4;
    1984:	movs	r1, #4
#endif
          dma.TCD->DADDR = tdm_rx_buffer;
          dma.TCD->DOFF = 4;
          dma.TCD->CITER_ELINKNO = dma.TCD->BITER_ELINKNO = NDAT*FRAME_I2S*2;
          dma.TCD->DLASTSGA = -sizeof(tdm_rx_buffer);
          dma.TCD->CSR = DMA_TCD_CSR_INTHALF | DMA_TCD_CSR_INTMAJOR;
    1986:	mov.w	lr, #6
		*mux = 0;
		*mux = (source & 63) | DMAMUX_ENABLE;
    198a:	movs	r7, #142	; 0x8e
              DMA_TCD_NBYTES_MLOFFYES_NBYTES(8);
          dma.TCD->SLAST = -8;
#endif
          dma.TCD->DADDR = tdm_rx_buffer;
          dma.TCD->DOFF = 4;
          dma.TCD->CITER_ELINKNO = dma.TCD->BITER_ELINKNO = NDAT*FRAME_I2S*2;
    198c:	strh	r0, [r3, #30]

          dma.TCD->SADDR = &I2S0_RDR0;
          dma.TCD->SOFF = 0;
          dma.TCD->ATTR = DMA_TCD_ATTR_SSIZE(2) | DMA_TCD_ATTR_DSIZE(2);
          dma.TCD->NBYTES_MLNO = 4;
          dma.TCD->SLAST = 0;
    198e:	str	r6, [r3, #12]
              DMA_TCD_NBYTES_MLOFFYES_NBYTES(8);
          dma.TCD->SLAST = -8;
#endif
          dma.TCD->DADDR = tdm_rx_buffer;
          dma.TCD->DOFF = 4;
          dma.TCD->CITER_ELINKNO = dma.TCD->BITER_ELINKNO = NDAT*FRAME_I2S*2;
    1990:	strh	r0, [r3, #22]
          I2S0_RCR3 = I2S_RCR3_RCE;

          dma.TCD->SADDR = &I2S0_RDR0;
          dma.TCD->SOFF = 0;
          dma.TCD->ATTR = DMA_TCD_ATTR_SSIZE(2) | DMA_TCD_ATTR_DSIZE(2);
          dma.TCD->NBYTES_MLNO = 4;
    1992:	str	r1, [r3, #8]
#endif
          dma.TCD->DADDR = tdm_rx_buffer;
          dma.TCD->DOFF = 4;
          dma.TCD->CITER_ELINKNO = dma.TCD->BITER_ELINKNO = NDAT*FRAME_I2S*2;
          dma.TCD->DLASTSGA = -sizeof(tdm_rx_buffer);
          dma.TCD->CSR = DMA_TCD_CSR_INTHALF | DMA_TCD_CSR_INTMAJOR;
    1994:	strh.w	lr, [r3, #28]
              DMA_TCD_NBYTES_MLOFFYES_MLOFF(-8) |
              DMA_TCD_NBYTES_MLOFFYES_NBYTES(8);
          dma.TCD->SLAST = -8;
#endif
          dma.TCD->DADDR = tdm_rx_buffer;
          dma.TCD->DOFF = 4;
    1998:	strh	r1, [r3, #20]

	// Use a hardware trigger to make the DMA channel run
	void triggerAtHardwareEvent(uint8_t source) {
		volatile uint8_t *mux;
		mux = (volatile uint8_t *)&(DMAMUX0_CHCFG0) + channel;
		*mux = 0;
    199a:	strb	r6, [r2, #0]
		*mux = (source & 63) | DMAMUX_ENABLE;
    199c:	strb	r7, [r2, #0]
    199e:	ldrb	r2, [r5, #4]
	/***************************************/
	/**    Enable / Disable               **/
	/***************************************/

	void enable(void) {
		DMA_SERQ = channel;
    19a0:	ldr	r3, [pc, #176]	; (1a54 <acq_init(long)+0x1ec>)
          dma.TCD->DLASTSGA = -sizeof(tdm_rx_buffer);
          dma.TCD->CSR = DMA_TCD_CSR_INTHALF | DMA_TCD_CSR_INTMAJOR;
          dma.triggerAtHardwareEvent(DMAMUX_SOURCE_I2S0_RX);
          dma.enable();

          I2S0_RCSR = I2S_RCSR_FRDE | I2S_RCSR_FR;
    19a2:	ldr	r1, [pc, #108]	; (1a10 <acq_init(long)+0x1a8>)
    19a4:	strb	r2, [r3, #0]
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
	}

	void attachInterrupt(void (*isr)(void), uint8_t prio) {
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
    19a6:	asrs	r3, r2, #5
    19a8:	lsls	r3, r3, #2
    19aa:	add.w	r3, r3, #3758096384	; 0xe0000000
          I2S0_TCSR = I2S_RCSR_FRDE | I2S_RCSR_FR;
    19ae:	ldr	r0, [pc, #168]	; (1a58 <acq_init(long)+0x1f0>)
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
	}

	void attachInterrupt(void (*isr)(void), uint8_t prio) {
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
    19b0:	ldr	r7, [pc, #168]	; (1a5c <acq_init(long)+0x1f4>)
    19b2:	ldr.w	lr, [pc, #196]	; 1a78 <acq_init(long)+0x210>
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
    19b6:	and.w	r6, r2, #31
    19ba:	add.w	r3, r3, #57600	; 0xe100
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
	}

	void attachInterrupt(void (*isr)(void), uint8_t prio) {
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
    19be:	adds	r2, #16
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
    19c0:	lsls	r4, r6
          dma.TCD->DLASTSGA = -sizeof(tdm_rx_buffer);
          dma.TCD->CSR = DMA_TCD_CSR_INTHALF | DMA_TCD_CSR_INTMAJOR;
          dma.triggerAtHardwareEvent(DMAMUX_SOURCE_I2S0_RX);
          dma.enable();

          I2S0_RCSR = I2S_RCSR_FRDE | I2S_RCSR_FR;
    19c2:	ldr	r6, [pc, #156]	; (1a60 <acq_init(long)+0x1f8>)
    19c4:	str	r6, [r1, #0]
          I2S0_TCSR = I2S_RCSR_FRDE | I2S_RCSR_FR;
    19c6:	str	r6, [r0, #0]
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
	}

	void attachInterrupt(void (*isr)(void), uint8_t prio) {
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
    19c8:	str.w	lr, [r7, r2, lsl #2]
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
    19cc:	str	r4, [r3, #0]
		NVIC_SET_PRIORITY(IRQ_DMA_CH0 + channel, prio);
    19ce:	ldrb	r3, [r5, #4]
    19d0:	add.w	r3, r3, #3758096384	; 0xe0000000
    19d4:	add.w	r3, r3, #58368	; 0xe400
    19d8:	movs	r2, #96	; 0x60
    19da:	strb	r2, [r3, #0]
      *div= iimin+1;
    }

    void acq_start(void)
    {
          I2S0_TCSR |= (I2S_TCSR_TE | I2S_TCSR_BCE);
    19dc:	ldr	r3, [r0, #0]
    19de:	orr.w	r3, r3, #2415919104	; 0x90000000
    19e2:	str	r3, [r0, #0]
          I2S0_RCSR |= (I2S_RCSR_RE | I2S_RCSR_BCE);
    19e4:	ldr	r3, [r1, #0]
    19e6:	orr.w	r3, r3, #2415919104	; 0x90000000
    19ea:	str	r3, [r1, #0]

          I2S0_RCSR = I2S_RCSR_FRDE | I2S_RCSR_FR;
          I2S0_TCSR = I2S_RCSR_FRDE | I2S_RCSR_FR;
          dma.attachInterrupt(acq_isr,I2S_DMA_PRIO*16);	
          acq_start();
    }
    19ec:	add	sp, #32
    19ee:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    19f2:	nop
    19f4:	.word	0x4cb71b00
    19f8:	.word	0x4004b018
    19fc:	.word	0x00014384
    1a00:	.word	0x1fff8d50
    1a04:	.word	0x05b8d800
    1a08:	.word	0x4004b00c
    1a0c:	.word	0x4004b008
    1a10:	.word	0x4002f080
    1a14:	.word	0x4002f104
    1a18:	.word	0x4002f100
    1a1c:	.word	0x4002f060
    1a20:	.word	0x4002f010
    1a24:	.word	0x4002f014
    1a28:	.word	0x4002f0e0
    1a2c:	.word	0x4002f088
    1a30:	.word	0x4002f090
    1a34:	.word	0x07000001
    1a38:	.word	0x00011f1b
    1a3c:	.word	0x1f1f1f00
    1a40:	.word	0x1fff9730
    1a44:	.word	0x4004b014
    1a48:	.word	0x4002f00c
    1a4c:	.word	0x4002f08c
    1a50:	.word	0x4002f0a0
    1a54:	.word	0x4000801b
    1a58:	.word	0x4002f000
    1a5c:	.word	0x1fff8200
    1a60:	.word	0x02000001
    1a64:	.word	0x4002f008
    1a68:	.word	0x4002f004
    1a6c:	.word	0x4002f084
    1a70:	.word	0x43000001
    1a74:	.word	0x1fffbe48
    1a78:	.word	0x00001231

00001a7c <acq_check(short)>:
        if(!pushData(acq_rx_buffer)) acq_miss++;

    }

  int16_t acq_check(int16_t state)
  { if(!state)
    1a7c:	cbnz	r0, 1a94 <acq_check(short)+0x18>
      *div= iimin+1;
    }

    void acq_start(void)
    {
          I2S0_TCSR |= (I2S_TCSR_TE | I2S_TCSR_BCE);
    1a7e:	ldr	r1, [pc, #48]	; (1ab0 <acq_check(short)+0x34>)
          I2S0_RCSR |= (I2S_RCSR_RE | I2S_RCSR_BCE);
    1a80:	ldr	r2, [pc, #48]	; (1ab4 <acq_check(short)+0x38>)
      *div= iimin+1;
    }

    void acq_start(void)
    {
          I2S0_TCSR |= (I2S_TCSR_TE | I2S_TCSR_BCE);
    1a82:	ldr	r3, [r1, #0]
    1a84:	orr.w	r3, r3, #2415919104	; 0x90000000
    1a88:	str	r3, [r1, #0]
          I2S0_RCSR |= (I2S_RCSR_RE | I2S_RCSR_BCE);
    1a8a:	ldr	r3, [r2, #0]
    1a8c:	orr.w	r3, r3, #2415919104	; 0x90000000
    1a90:	str	r3, [r2, #0]
    1a92:	bx	lr
  int16_t acq_check(int16_t state)
  { if(!state)
    { // start acquisition
      acq_start();
    }
    if(state>3)
    1a94:	cmp	r0, #3
    1a96:	ble.n	1aac <acq_check(short)+0x30>
          I2S0_TCSR |= (I2S_TCSR_TE | I2S_TCSR_BCE);
          I2S0_RCSR |= (I2S_RCSR_RE | I2S_RCSR_BCE);
    }
    void acq_stop(void)
    { 
          I2S0_TCSR &= ~(I2S_TCSR_TE | I2S_TCSR_BCE);
    1a98:	ldr	r1, [pc, #20]	; (1ab0 <acq_check(short)+0x34>)
          I2S0_RCSR &= ~(I2S_RCSR_RE | I2S_RCSR_BCE);
    1a9a:	ldr	r2, [pc, #24]	; (1ab4 <acq_check(short)+0x38>)
          I2S0_TCSR |= (I2S_TCSR_TE | I2S_TCSR_BCE);
          I2S0_RCSR |= (I2S_RCSR_RE | I2S_RCSR_BCE);
    }
    void acq_stop(void)
    { 
          I2S0_TCSR &= ~(I2S_TCSR_TE | I2S_TCSR_BCE);
    1a9c:	ldr	r3, [r1, #0]
    1a9e:	bic.w	r3, r3, #2415919104	; 0x90000000
    1aa2:	str	r3, [r1, #0]
          I2S0_RCSR &= ~(I2S_RCSR_RE | I2S_RCSR_BCE);
    1aa4:	ldr	r3, [r2, #0]
    1aa6:	bic.w	r3, r3, #2415919104	; 0x90000000
    1aaa:	str	r3, [r2, #0]
    if(state>3)
    { // stop acquisition
      acq_stop();
    }
    return state;
  }
    1aac:	bx	lr
    1aae:	nop
    1ab0:	.word	0x4002f000
    1ab4:	.word	0x4002f080

00001ab8 <loop>:
  Serial.flush();
}

uint32_t loop_count=0;
void loop()
{ loop_count++;
    1ab8:	push	{r4, r5, r6, lr}
    1aba:	ldr	r2, [pc, #132]	; (1b40 <loop+0x88>)
  state = do_menu(state);
    1abc:	ldr	r4, [pc, #132]	; (1b44 <loop+0x8c>)
  Serial.flush();
}

uint32_t loop_count=0;
void loop()
{ loop_count++;
    1abe:	ldr	r3, [r2, #0]
  state = do_menu(state);
    1ac0:	ldrsh.w	r0, [r4]
  Serial.flush();
}

uint32_t loop_count=0;
void loop()
{ loop_count++;
    1ac4:	adds	r3, #1
    1ac6:	sub	sp, #16
    1ac8:	str	r3, [r2, #0]
  state = do_menu(state);
    1aca:	bl	12fc <do_menu(short)>
    1ace:	strh	r0, [r4, #0]
  state = acq_check(state);
    1ad0:	bl	1a7c <acq_check(short)>

uint32_t t_on = 60;
int16_t check_filing(int16_t state)
{
  static uint32_t to;
  if(state==2)
    1ad4:	cmp	r0, #2

uint32_t loop_count=0;
void loop()
{ loop_count++;
  state = do_menu(state);
  state = acq_check(state);
    1ad6:	mov	r1, r0
    1ad8:	strh	r0, [r4, #0]

uint32_t t_on = 60;
int16_t check_filing(int16_t state)
{
  static uint32_t to;
  if(state==2)
    1ada:	beq.n	1b1a <loop+0x62>
{ loop_count++;
  state = do_menu(state);
  state = acq_check(state);
  state = check_filing(state);
  //
  if(state<0)
    1adc:	cmp	r0, #0
    1ade:	blt.n	1b0e <loop+0x56>
    mtpd.loop();
  else
    state=do_logger(0,state);
    1ae0:	movs	r0, #0
    1ae2:	bl	1710 <do_logger(unsigned short, short)>
    1ae6:	strh	r0, [r4, #0]

  if(state>=0) logg(1000,"loop");
    1ae8:	cmp	r0, #0
    1aea:	blt.n	1b00 <loop+0x48>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1aec:	ldr	r3, [pc, #88]	; (1b48 <loop+0x90>)
/**************** Online logging *******************************/
extern uint32_t loop_count, acq_count, acq_miss, maxDel;
extern uint16_t maxCount;
void logg(uint32_t del, const char *txt)
{ static uint32_t to;
  if(millis()-to > del)
    1aee:	ldr	r2, [pc, #92]	; (1b4c <loop+0x94>)
    1af0:	ldr	r3, [r3, #0]
    1af2:	str	r3, [sp, #12]
	return ret;
    1af4:	ldr	r3, [sp, #12]
    1af6:	ldr	r2, [r2, #0]
    1af8:	subs	r3, r3, r2
    1afa:	cmp.w	r3, #1000	; 0x3e8
    1afe:	bhi.n	1b04 <loop+0x4c>
  else
    state=do_logger(0,state);

  if(state>=0) logg(1000,"loop");
  //asm("wfi"); // may wait forever on T4.x
}
    1b00:	add	sp, #16
    1b02:	pop	{r4, r5, r6, pc}
    1b04:	ldr	r0, [pc, #72]	; (1b50 <loop+0x98>)
    1b06:	bl	878 <logg(unsigned long, char const*) [clone .part.55]>
    1b0a:	add	sp, #16
    1b0c:	pop	{r4, r5, r6, pc}
  state = do_menu(state);
  state = acq_check(state);
  state = check_filing(state);
  //
  if(state<0)
    mtpd.loop();
    1b0e:	ldr	r0, [pc, #68]	; (1b54 <loop+0x9c>)
    1b10:	bl	702c <MTPD::loop()>
    1b14:	ldrsh.w	r0, [r4]
    1b18:	b.n	1ae8 <loop+0x30>
    1b1a:	str	r0, [sp, #4]
int16_t check_filing(int16_t state)
{
  static uint32_t to;
  if(state==2)
  {
    uint32_t tt = rtc_get();
    1b1c:	bl	d76c <rtc_get>
    uint32_t dt = tt % t_on;
    1b20:	ldr	r3, [pc, #52]	; (1b58 <loop+0xa0>)
    if(dt<to) state = 3;
    1b22:	ldr	r2, [pc, #56]	; (1b5c <loop+0xa4>)
{
  static uint32_t to;
  if(state==2)
  {
    uint32_t tt = rtc_get();
    uint32_t dt = tt % t_on;
    1b24:	ldr	r3, [r3, #0]
    if(dt<to) state = 3;
    1b26:	ldr	r5, [r2, #0]
    1b28:	ldr	r1, [sp, #4]
{
  static uint32_t to;
  if(state==2)
  {
    uint32_t tt = rtc_get();
    uint32_t dt = tt % t_on;
    1b2a:	udiv	r6, r0, r3
    1b2e:	mls	r0, r6, r3, r0
    if(dt<to) state = 3;
    1b32:	cmp	r0, r5
    1b34:	it	cc
    1b36:	movcc	r1, #3
uint32_t loop_count=0;
void loop()
{ loop_count++;
  state = do_menu(state);
  state = acq_check(state);
  state = check_filing(state);
    1b38:	strh	r1, [r4, #0]
  if(state==2)
  {
    uint32_t tt = rtc_get();
    uint32_t dt = tt % t_on;
    if(dt<to) state = 3;
    to = dt;
    1b3a:	str	r0, [r2, #0]
    1b3c:	b.n	1ae0 <loop+0x28>
    1b3e:	nop
    1b40:	.word	0x20002b08
    1b44:	.word	0x1fffbe46
    1b48:	.word	0x200030a4
    1b4c:	.word	0x20002b20
    1b50:	.word	0x0001439c
    1b54:	.word	0x20002af0
    1b58:	.word	0x1fff8a40
    1b5c:	.word	0x20002b1c

00001b60 <_GLOBAL__sub_I_audioShield>:

void SGTL5000_disable(void)
{
  chipWrite(CHIP_DIG_POWER, 0); 
  chipWrite(CHIP_ANA_POWER, 0); 
}
    1b60:	push	{r3, r4, r5, r6, r7, lr}
#define AUDIO_HEADPHONE_LINEIN 1

class AudioControlSGTL5000 : public AudioControl
{
public:
	AudioControlSGTL5000(void) : i2c_addr(0x0A) { }
    1b62:	ldr	r1, [pc, #220]	; (1c40 <_GLOBAL__sub_I_audioShield+0xe0>)


class SDClass : public FS
{
public:
	SDClass() { }
    1b64:	ldr	r3, [pc, #220]	; (1c44 <_GLOBAL__sub_I_audioShield+0xe4>)
  return state;
}

/************ Basic File System Interface *************************/
#include "SD.h"
extern SDClass sdx[];
    1b66:	ldr	r6, [pc, #224]	; (1c48 <_GLOBAL__sub_I_audioShield+0xe8>)
    1b68:	ldr	r2, [pc, #224]	; (1c4c <_GLOBAL__sub_I_audioShield+0xec>)
    1b6a:	ldr	r7, [pc, #228]	; (1c50 <_GLOBAL__sub_I_audioShield+0xf0>)
    1b6c:	str	r2, [r1, #0]
    1b6e:	movs	r5, #10
    1b70:	strb	r5, [r1, #8]
    1b72:	str	r7, [r3, #0]
 * \class FsVolume
 * \brief FsVolume class.
 */
class FsVolume {
 public:
  FsVolume() {}
    1b74:	movs	r5, #0
		}
		if (dataMode & 0x04) {
			c |= SPI_CTAR_CPHA;
			t = (t & 0xFFFF0FFF) | ((t & 0xF000) >> 4);
		}
		ctar = c | t;
    1b76:	ldr	r0, [pc, #220]	; (1c54 <_GLOBAL__sub_I_audioShield+0xf4>)

class mSD_Base
{
  public:
    mSD_Base() {
      fsCount = 0;
    1b78:	ldr	r4, [pc, #220]	; (1c58 <_GLOBAL__sub_I_audioShield+0xf8>)
    1b7a:	str.w	r0, [r3, #1176]	; 0x498
#else  // HAS_SDIO_CLASS
class SdSpiCard {
#endif  // HAS_SDIO_CLASS
 public:
  /** Construct an instance of SdSpiCard. */
  SdSpiCard() {}
    1b7e:	movs	r1, #1
    1b80:	movs	r7, #41	; 0x29
    1b82:	mov	r2, r6
    1b84:	strb.w	r1, [r3, #1185]	; 0x4a1
    1b88:	strb.w	r7, [r3, #1187]	; 0x4a3
    1b8c:	str.w	r5, [r3, #1156]	; 0x484
    1b90:	str.w	r5, [r3, #1160]	; 0x488
    1b94:	strb.w	r5, [r3, #1190]	; 0x4a6
    1b98:	mov	r0, r5
    1b9a:	ldr	r1, [pc, #192]	; (1c5c <_GLOBAL__sub_I_audioShield+0xfc>)
    1b9c:	bl	eb18 <__aeabi_atexit>

  void mtp_yield(void);


// Storage implementation for SD. SD needs to be already initialized.
class MTPStorage_SD : public MTPStorageInterface, mSD_Base
    1ba0:	mvn.w	r7, #1
    1ba4:	ldr	r0, [pc, #184]	; (1c60 <_GLOBAL__sub_I_audioShield+0x100>)

#define FILE_WHOAMI

class File : public Stream {
public:
	constexpr File() : f(nullptr) { }
    1ba6:	ldr	r3, [pc, #188]	; (1c64 <_GLOBAL__sub_I_audioShield+0x104>)
    1ba8:	str	r0, [r4, #0]
  const int nfs = sizeof(lfs_size)/sizeof(int);

  LittleFS_RAM ramfs[nfs]; // needs to be declared if LittleFS is used in storage.h
#endif

MTPStorage_SD storage;
    1baa:	mov	r2, r6
    1bac:	str.w	r7, [r4, #240]	; 0xf0
    1bb0:	ldr	r1, [pc, #180]	; (1c68 <_GLOBAL__sub_I_audioShield+0x108>)
    1bb2:	str.w	r3, [r4, #168]	; 0xa8
    1bb6:	mov.w	r7, #1000	; 0x3e8
    1bba:	mov	r0, r4
    1bbc:	str.w	r7, [r4, #176]	; 0xb0
    1bc0:	str.w	r7, [r4, #196]	; 0xc4
    1bc4:	str.w	r7, [r4, #216]	; 0xd8
    1bc8:	str.w	r3, [r4, #188]	; 0xbc
    1bcc:	str.w	r3, [r4, #208]	; 0xd0
	/*************************************************/
	/**    Channel Allocation                       **/
	/*************************************************/

	DMAChannel() {
		begin();
    1bd0:	ldr	r7, [pc, #152]	; (1c6c <_GLOBAL__sub_I_audioShield+0x10c>)

class mSD_Base
{
  public:
    mSD_Base() {
      fsCount = 0;
    1bd2:	str	r5, [r4, #4]
    1bd4:	strb.w	r5, [r4, #172]	; 0xac
    1bd8:	strb.w	r5, [r4, #180]	; 0xb4
    1bdc:	str.w	r5, [r4, #184]	; 0xb8
    1be0:	strb.w	r5, [r4, #192]	; 0xc0
    1be4:	strb.w	r5, [r4, #200]	; 0xc8
    1be8:	str.w	r5, [r4, #204]	; 0xcc
    1bec:	strb.w	r5, [r4, #212]	; 0xd4
    1bf0:	strb.w	r5, [r4, #220]	; 0xdc
    1bf4:	str.w	r5, [r4, #224]	; 0xe0

  void mtp_yield(void);


// Storage implementation for SD. SD needs to be already initialized.
class MTPStorage_SD : public MTPStorageInterface, mSD_Base
    1bf8:	str.w	r5, [r4, #228]	; 0xe4
    1bfc:	str.w	r5, [r4, #232]	; 0xe8
    1c00:	str.w	r5, [r4, #236]	; 0xec
    1c04:	str.w	r5, [r4, #244]	; 0xf4
    1c08:	strb.w	r5, [r4, #248]	; 0xf8
    1c0c:	strb.w	r5, [r4, #249]	; 0xf9
    1c10:	bl	eb18 <__aeabi_atexit>

// MTP Responder.
class MTPD {
public:

  explicit MTPD(MTPStorageInterface* storage): storage_(storage) {}
    1c14:	ldr	r3, [pc, #88]	; (1c70 <_GLOBAL__sub_I_audioShield+0x110>)
}

/************ Basic File System Interface *************************/
#include "SD.h"
extern SDClass sdx[];
static File mfile;
    1c16:	ldr	r1, [pc, #92]	; (1c74 <_GLOBAL__sub_I_audioShield+0x114>)
    1c18:	ldr	r0, [pc, #92]	; (1c78 <_GLOBAL__sub_I_audioShield+0x118>)
    1c1a:	str	r4, [r3, #0]
    1c1c:	mov	r2, r6
    1c1e:	str	r5, [r3, #4]
    1c20:	strb	r5, [r3, #8]
    1c22:	str	r5, [r3, #12]
    1c24:	bl	eb18 <__aeabi_atexit>
    1c28:	mov	r1, r5
    1c2a:	mov	r0, r7
    1c2c:	bl	e584 <DMAChannel::begin(bool)>
  static uint32_t tdm_rx_buffer[2*NBUF_I2S];
  static uint32_t acq_rx_buffer[NBUF_ACQ];
  #define I2S_DMA_PRIO 6

  #include "DMAChannel.h"
  DMAChannel dma;
    1c30:	mov	r2, r6
    1c32:	mov	r0, r7
    1c34:	ldr	r1, [pc, #68]	; (1c7c <_GLOBAL__sub_I_audioShield+0x11c>)

void SGTL5000_disable(void)
{
  chipWrite(CHIP_DIG_POWER, 0); 
  chipWrite(CHIP_ANA_POWER, 0); 
}
    1c36:	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  static uint32_t tdm_rx_buffer[2*NBUF_I2S];
  static uint32_t acq_rx_buffer[NBUF_ACQ];
  #define I2S_DMA_PRIO 6

  #include "DMAChannel.h"
  DMAChannel dma;
    1c3a:	b.w	eb18 <__aeabi_atexit>
    1c3e:	nop
    1c40:	.word	0x20002b0c
    1c44:	.word	0x1fffc648
    1c48:	.word	0x1fff8a3c
    1c4c:	.word	0x00014668
    1c50:	.word	0x0001426c
    1c54:	.word	0x38011001
    1c58:	.word	0x1fffbd40
    1c5c:	.word	0x000005c9
    1c60:	.word	0x0001440c
    1c64:	.word	0x000141ac
    1c68:	.word	0x00000f55
    1c6c:	.word	0x1fff9730
    1c70:	.word	0x20002af0
    1c74:	.word	0x00000e99
    1c78:	.word	0x1fff8a48
    1c7c:	.word	0x0000077d

00001c80 <chipWrite(unsigned int, unsigned int)>:
  val |= Wire.read();
  return val;
}

bool chipWrite(unsigned int reg, unsigned int val)
{
    1c80:	push	{r3, r4, r5, r6, r7, lr}
	void end();
	void setClock(uint32_t frequency);
	void setSDA(uint8_t pin);
	void setSCL(uint8_t pin);
	void beginTransmission(uint8_t address) {
		txBuffer[0] = (address << 1);
    1c82:	ldr	r4, [pc, #72]	; (1ccc <chipWrite(unsigned int, unsigned int)+0x4c>)
    1c84:	movs	r3, #20
    1c86:	mov	r6, r1
		transmitting = 1;
    1c88:	movs	r5, #1
    1c8a:	mov	r7, r0
	}
	size_t write(long n) {
		return write((uint8_t)n);
	}
	size_t write(unsigned int n) {
		return write((uint8_t)n);
    1c8c:	ubfx	r1, r0, #8, #8
    1c90:	mov	r0, r4
	void end();
	void setClock(uint32_t frequency);
	void setSDA(uint8_t pin);
	void setSCL(uint8_t pin);
	void beginTransmission(uint8_t address) {
		txBuffer[0] = (address << 1);
    1c92:	strb.w	r3, [r4, #59]	; 0x3b
		transmitting = 1;
    1c96:	strb.w	r5, [r4, #94]	; 0x5e
		txBufferLength = 1;
    1c9a:	strb.w	r5, [r4, #93]	; 0x5d
	}
	size_t write(long n) {
		return write((uint8_t)n);
	}
	size_t write(unsigned int n) {
		return write((uint8_t)n);
    1c9e:	bl	8644 <TwoWire::write(unsigned char)>
    1ca2:	uxtb	r1, r7
    1ca4:	mov	r0, r4
    1ca6:	bl	8644 <TwoWire::write(unsigned char)>
    1caa:	ubfx	r1, r6, #8, #8
    1cae:	mov	r0, r4
    1cb0:	bl	8644 <TwoWire::write(unsigned char)>
    1cb4:	uxtb	r1, r6
    1cb6:	mov	r0, r4
    1cb8:	bl	8644 <TwoWire::write(unsigned char)>
	void beginTransmission(int address) {
		beginTransmission((uint8_t)address);
	}
	uint8_t endTransmission(uint8_t sendStop);
	uint8_t endTransmission(void) {
		return endTransmission(1);
    1cbc:	mov	r1, r5
    1cbe:	mov	r0, r4
    1cc0:	bl	898c <TwoWire::endTransmission(unsigned char)>
  Wire.write(reg);
  Wire.write(val >> 8);
  Wire.write(val);
  if (Wire.endTransmission() == 0) return true;
  return false;
}
    1cc4:	clz	r0, r0
    1cc8:	lsrs	r0, r0, #5
    1cca:	pop	{r3, r4, r5, r6, r7, pc}
    1ccc:	.word	0x1fff8a9c

00001cd0 <setup>:
void printTimestamp(uint32_t tt);

#include "TimeLib.h" // for setSyncProvider

void setup()
{ while(!Serial && millis()<3000); 
    1cd0:	push	{r4, r5, r6, lr}
    1cd2:	ldr	r1, [pc, #260]	; (1dd8 <setup+0x108>)
    1cd4:	ldr	r2, [pc, #260]	; (1ddc <setup+0x10c>)
        uint8_t stopbits(void) { uint8_t b = usb_cdc_line_coding[1]; if (!b) b = 1; return b; }
        uint8_t paritytype(void) { return usb_cdc_line_coding[1] >> 8; } // 0=none, 1=odd, 2=even
        uint8_t numbits(void) { return usb_cdc_line_coding[1] >> 16; }
        uint8_t dtr(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) ? 1 : 0; }
        uint8_t rts(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_RTS) ? 1 : 0; }
        operator bool() { return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    1cd6:	ldr	r4, [pc, #264]	; (1de0 <setup+0x110>)
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
    1cd8:	ldr	r6, [pc, #264]	; (1de4 <setup+0x114>)
    1cda:	sub	sp, #8
    1cdc:	movw	r0, #2999	; 0xbb7
        uint8_t stopbits(void) { uint8_t b = usb_cdc_line_coding[1]; if (!b) b = 1; return b; }
        uint8_t paritytype(void) { return usb_cdc_line_coding[1] >> 8; } // 0=none, 1=odd, 2=even
        uint8_t numbits(void) { return usb_cdc_line_coding[1] >> 16; }
        uint8_t dtr(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) ? 1 : 0; }
        uint8_t rts(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_RTS) ? 1 : 0; }
        operator bool() { return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    1ce0:	ldrb	r3, [r1, #0]
    1ce2:	cmp	r3, #0
    1ce4:	beq.n	1dae <setup+0xde>
    1ce6:	ldrb	r3, [r4, #0]
    1ce8:	lsls	r3, r3, #31
    1cea:	bpl.n	1dae <setup+0xde>
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
    1cec:	ldr	r3, [r2, #0]
    1cee:	ldr	r5, [r6, #0]
        uint8_t stopbits(void) { uint8_t b = usb_cdc_line_coding[1]; if (!b) b = 1; return b; }
        uint8_t paritytype(void) { return usb_cdc_line_coding[1] >> 8; } // 0=none, 1=odd, 2=even
        uint8_t numbits(void) { return usb_cdc_line_coding[1] >> 16; }
        uint8_t dtr(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) ? 1 : 0; }
        uint8_t rts(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_RTS) ? 1 : 0; }
        operator bool() { return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    1cf0:	subs	r3, r3, r5
    1cf2:	cmp	r3, #14
    1cf4:	bls.n	1dae <setup+0xde>
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    1cf6:	movs	r1, #10
    1cf8:	ldr	r0, [pc, #236]	; (1de8 <setup+0x118>)
    }

    void acq_setup(void)
    {
        SIM_SCGC6 |= SIM_SCGC6_I2S;
        SIM_SCGC7 |= SIM_SCGC7_DMA;
    1cfa:	ldr	r6, [pc, #240]	; (1dec <setup+0x11c>)
          I2S0_TCSR |= (I2S_TCSR_TE | I2S_TCSR_BCE);
          I2S0_RCSR |= (I2S_RCSR_RE | I2S_RCSR_BCE);
    }
    void acq_stop(void)
    { 
          I2S0_TCSR &= ~(I2S_TCSR_TE | I2S_TCSR_BCE);
    1cfc:	ldr	r5, [pc, #240]	; (1df0 <setup+0x120>)

  acq_setup();
  acq_stop();
  acq_init(fsamp);

  audioShield.enable();
    1cfe:	ldr	r4, [pc, #244]	; (1df4 <setup+0x124>)
    1d00:	bl	cd74 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    1d04:	ldr	r0, [pc, #240]	; (1df8 <setup+0x128>)
    1d06:	bl	e7ac <Print::println()>
#include "TimeLib.h" // for setSyncProvider

void setup()
{ while(!Serial && millis()<3000); 
  Serial.println("MTP logger");
  setSyncProvider((long int (*)()) rtc_get);
    1d0a:	ldr	r0, [pc, #240]	; (1dfc <setup+0x12c>)
    1d0c:	bl	7fc4 <setSyncProvider(long (*)())>

  printTimestamp(rtc_get());
    1d10:	bl	d76c <rtc_get>
    1d14:	bl	13d4 <printTimestamp(unsigned long)>

  #if USE_EVENTS==1
    usb_init_events();
    1d18:	bl	76a4 <usb_init_events>
  #endif

  #if !__has_include("usb_mtp.h")
    usb_mtp_configure();
  #endif
  storage_configure();
    1d1c:	bl	1028 <storage_configure()>
          I2S0_RCSR &= ~(I2S_RCSR_RE | I2S_RCSR_BCE);
    }

    void acq_setup(void)
    {
        SIM_SCGC6 |= SIM_SCGC6_I2S;
    1d20:	ldr	r3, [pc, #220]	; (1e00 <setup+0x130>)
  #endif
  storage_configure();

  #if USE_SD==1
    // Set Time callback // needed for SDFat
    FsDateTime::callback = dateTime;
    1d22:	ldr	r2, [pc, #224]	; (1e04 <setup+0x134>)
    1d24:	ldr	r1, [pc, #224]	; (1e08 <setup+0x138>)
    1d26:	str	r1, [r2, #0]
          I2S0_RCSR &= ~(I2S_RCSR_RE | I2S_RCSR_BCE);
    }

    void acq_setup(void)
    {
        SIM_SCGC6 |= SIM_SCGC6_I2S;
    1d28:	ldr	r2, [r3, #0]
          I2S0_RCSR |= (I2S_RCSR_RE | I2S_RCSR_BCE);
    }
    void acq_stop(void)
    { 
          I2S0_TCSR &= ~(I2S_TCSR_TE | I2S_TCSR_BCE);
          I2S0_RCSR &= ~(I2S_RCSR_RE | I2S_RCSR_BCE);
    1d2a:	ldr	r1, [pc, #224]	; (1e0c <setup+0x13c>)
    FsDateTime::callback = dateTime;
  #endif

  acq_setup();
  acq_stop();
  acq_init(fsamp);
    1d2c:	ldr	r0, [pc, #224]	; (1e10 <setup+0x140>)
          I2S0_RCSR &= ~(I2S_RCSR_RE | I2S_RCSR_BCE);
    }

    void acq_setup(void)
    {
        SIM_SCGC6 |= SIM_SCGC6_I2S;
    1d2e:	orr.w	r2, r2, #32768	; 0x8000
    1d32:	str	r2, [r3, #0]
        SIM_SCGC7 |= SIM_SCGC7_DMA;
    1d34:	ldr	r2, [r6, #0]
    1d36:	orr.w	r2, r2, #2
    1d3a:	str	r2, [r6, #0]
        SIM_SCGC6 |= SIM_SCGC6_DMAMUX;
    1d3c:	ldr	r2, [r3, #0]
    1d3e:	orr.w	r2, r2, #2
    1d42:	str	r2, [r3, #0]
          I2S0_TCSR |= (I2S_TCSR_TE | I2S_TCSR_BCE);
          I2S0_RCSR |= (I2S_RCSR_RE | I2S_RCSR_BCE);
    }
    void acq_stop(void)
    { 
          I2S0_TCSR &= ~(I2S_TCSR_TE | I2S_TCSR_BCE);
    1d44:	ldr	r3, [r5, #0]
    1d46:	bic.w	r3, r3, #2415919104	; 0x90000000
    1d4a:	str	r3, [r5, #0]
          I2S0_RCSR &= ~(I2S_RCSR_RE | I2S_RCSR_BCE);
    1d4c:	ldr	r3, [r1, #0]
    1d4e:	bic.w	r3, r3, #2415919104	; 0x90000000
    1d52:	str	r3, [r1, #0]
    FsDateTime::callback = dateTime;
  #endif

  acq_setup();
  acq_stop();
  acq_init(fsamp);
    1d54:	bl	1868 <acq_init(long)>

  audioShield.enable();
    1d58:	mov	r0, r4
    1d5a:	bl	83a4 <AudioControlSGTL5000::enable()>
	bool inputSelect(int n) {
		if (n == AUDIO_INPUT_LINEIN) {
			return write(0x0020, 0x055) // +7.5dB gain (1.3Vp-p full scale)
			 && write(0x0024, ana_ctrl | (1<<2)); // enable linein
		} else if (n == AUDIO_INPUT_MIC) {
			return write(0x002A, 0x0173) // mic preamp gain = +40dB
    1d5e:	mov	r0, r4
    1d60:	movw	r2, #371	; 0x173
    1d64:	movs	r1, #42	; 0x2a
    1d66:	bl	80e4 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
			 && write(0x0020, 0x088)     // input gain +12dB (is this enough?)
			 && write(0x0024, ana_ctrl & ~(1<<2)); // enable mic
    1d6a:	cbnz	r0, 1dba <setup+0xea>
  audioShield.inputSelect(AUDIO_SELECT);  //AUDIO_INPUT_LINEIN or AUDIO_INPUT_MIC

  delay(10);
    1d6c:	movs	r0, #10
    1d6e:	bl	d7f8 <delay>
  if(sgtl_mode>3) sgtl_mode = 3; 
  if(sgtl_mode<0) sgtl_mode = 0;
  
//  write(CHIP_CLK_CTRL, 0x0004);  // 44.1 kHz, 256*Fs
//	write(CHIP_I2S_CTRL, 0x0130); // SCLK=32*Fs, 16bit, I2S format
  chipWrite(CHIP_CLK_CTRL, (sgtl_mode<<2));  // 256*Fs| sgtl_mode = 0:32 kHz; 1:44.1 kHz; 2:48 kHz; 3:96 kHz
    1d72:	movs	r1, #12
    1d74:	movs	r0, #4
    1d76:	bl	1c80 <chipWrite(unsigned int, unsigned int)>
  delay(10);
  SGTL5000_modification(IFR); // must be called after I2S initialization stabilized 
  //(0: 8kHz, 1: 16 kHz 2:32 kHz, 3:44.1 kHz, 4:48 kHz, 5:96 kHz, 6:192 kHz)
  
  #if AUDIO_SELECT == AUDIO_INPUT_MIC
    audioShield.micGain(MicGain);
    1d7a:	movs	r1, #0
    1d7c:	ldr	r0, [pc, #116]	; (1df4 <setup+0x124>)
    1d7e:	bl	813c <AudioControlSGTL5000::micGain(unsigned int)>
  #endif

  state=-1;
    1d82:	ldr	r3, [pc, #144]	; (1e14 <setup+0x144>)
    1d84:	ldr	r0, [pc, #144]	; (1e18 <setup+0x148>)
    1d86:	movw	r2, #65535	; 0xffff
    1d8a:	movs	r1, #10
    1d8c:	strh	r2, [r3, #0]
    1d8e:	bl	cd74 <usb_serial_write>
    1d92:	ldr	r0, [pc, #100]	; (1df8 <setup+0x128>)
    1d94:	bl	e7ac <Print::println()>
    1d98:	movs	r1, #67	; 0x43
    1d9a:	ldr	r0, [pc, #128]	; (1e1c <setup+0x14c>)
    1d9c:	bl	cd74 <usb_serial_write>
    1da0:	ldr	r0, [pc, #84]	; (1df8 <setup+0x128>)
    1da2:	bl	e7ac <Print::println()>
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
    1da6:	bl	cedc <usb_serial_flush_output>

  Serial.println("Setup done");
  Serial.println(" Enter 's' to start, 'q' to stop acquisition and 'r' to restart MTP");
  Serial.flush();
}
    1daa:	add	sp, #8
    1dac:	pop	{r4, r5, r6, pc}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1dae:	ldr	r3, [r2, #0]
    1db0:	str	r3, [sp, #4]
	return ret;
    1db2:	ldr	r3, [sp, #4]
void printTimestamp(uint32_t tt);

#include "TimeLib.h" // for setSyncProvider

void setup()
{ while(!Serial && millis()<3000); 
    1db4:	cmp	r3, r0
    1db6:	bls.n	1ce0 <setup+0x10>
    1db8:	b.n	1cf6 <setup+0x26>
		if (n == AUDIO_INPUT_LINEIN) {
			return write(0x0020, 0x055) // +7.5dB gain (1.3Vp-p full scale)
			 && write(0x0024, ana_ctrl | (1<<2)); // enable linein
		} else if (n == AUDIO_INPUT_MIC) {
			return write(0x002A, 0x0173) // mic preamp gain = +40dB
			 && write(0x0020, 0x088)     // input gain +12dB (is this enough?)
    1dba:	movs	r2, #136	; 0x88
    1dbc:	movs	r1, #32
    1dbe:	mov	r0, r4
    1dc0:	bl	80e4 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
    1dc4:	cmp	r0, #0
    1dc6:	beq.n	1d6c <setup+0x9c>
			 && write(0x0024, ana_ctrl & ~(1<<2)); // enable mic
    1dc8:	ldrh	r2, [r4, #6]
    1dca:	mov	r0, r4
    1dcc:	bic.w	r2, r2, #4
    1dd0:	movs	r1, #36	; 0x24
    1dd2:	bl	80e4 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
    1dd6:	b.n	1d6c <setup+0x9c>
    1dd8:	.word	0x200031a8
    1ddc:	.word	0x200030a4
    1de0:	.word	0x200030a0
    1de4:	.word	0x20003220
    1de8:	.word	0x000143a4
    1dec:	.word	0x40048040
    1df0:	.word	0x4002f000
    1df4:	.word	0x20002b0c
    1df8:	.word	0x1fff8d50
    1dfc:	.word	0x0000d76d
    1e00:	.word	0x4004803c
    1e04:	.word	0x20002bd8
    1e08:	.word	0x000006e5
    1e0c:	.word	0x4002f080
    1e10:	.word	0x00017700
    1e14:	.word	0x1fffbe46
    1e18:	.word	0x000143b0
    1e1c:	.word	0x000143bc

00001e20 <MTPStorage_SD::addFilesystem(FS&, char const*)>:
    mSD_Base() {
      fsCount = 0;
    }

    void sd_addFilesystem(FS &fs, const char *name) {
      if (fsCount < MTPD_MAX_FILESYSTEMS) {
    1e20:	ldr	r3, [r0, #4]
    1e22:	cmp	r3, #19
    1e24:	bgt.n	1e36 <MTPStorage_SD::addFilesystem(FS&, char const*)+0x16>

// Storage implementation for SD. SD needs to be already initialized.
class MTPStorage_SD : public MTPStorageInterface, mSD_Base
{ 
public:
  void addFilesystem(FS &fs, const char *name) { sd_addFilesystem(fs, name);}
    1e26:	push	{r4}
    1e28:	add.w	r4, r0, r3, lsl #2
    }

    void sd_addFilesystem(FS &fs, const char *name) {
      if (fsCount < MTPD_MAX_FILESYSTEMS) {
        sd_name[fsCount] = name;
        sdx[fsCount++] = &fs;
    1e2c:	adds	r3, #1
      fsCount = 0;
    }

    void sd_addFilesystem(FS &fs, const char *name) {
      if (fsCount < MTPD_MAX_FILESYSTEMS) {
        sd_name[fsCount] = name;
    1e2e:	str	r2, [r4, #8]
        sdx[fsCount++] = &fs;
    1e30:	str	r3, [r0, #4]
    1e32:	str	r1, [r4, #88]	; 0x58

// Storage implementation for SD. SD needs to be already initialized.
class MTPStorage_SD : public MTPStorageInterface, mSD_Base
{ 
public:
  void addFilesystem(FS &fs, const char *name) { sd_addFilesystem(fs, name);}
    1e34:	pop	{r4}
    1e36:	bx	lr

00001e38 <MTPStorage_SD::get_FSCount()>:
  Record ReadIndexRecord(uint32_t i) ;
  uint16_t ConstructFilename(int i, char* out, int len) ;
  void OpenFileByIndex(uint32_t i, uint32_t mode = FILE_READ) ;
  void printRecord(int h, Record *p);

  uint32_t get_FSCount(void) {return sd_getFSCount();}
    1e38:	ldr	r0, [r0, #4]
    1e3a:	bx	lr

00001e3c <MTPStorage_SD::get_FSName(unsigned long)>:
      for(int ii=0; ii<fsCount;ii++) if(!strcmp(name,sd_name[ii])) return ii;
      return 0xFFFFFFFFUL;
    }

    uint32_t sd_getFSCount(void) {return fsCount;}
    const char *sd_getFSName(uint32_t store) { return sd_name[store];}
    1e3c:	add.w	r1, r0, r1, lsl #2
  uint16_t ConstructFilename(int i, char* out, int len) ;
  void OpenFileByIndex(uint32_t i, uint32_t mode = FILE_READ) ;
  void printRecord(int h, Record *p);

  uint32_t get_FSCount(void) {return sd_getFSCount();}
  const char *get_FSName(uint32_t storage) { return sd_getFSName(storage);}
    1e40:	ldr	r0, [r1, #8]
    1e42:	bx	lr

00001e44 <MTPStorage_SD::readonly(unsigned long)>:

// These should probably be weak.
void mtp_yield() {}
void mtp_lock_storage(bool lock) {}

  bool MTPStorage_SD::readonly(uint32_t store) { return false; }
    1e44:	movs	r0, #0
    1e46:	bx	lr

00001e48 <MTPStorage_SD::has_directories(unsigned long)>:
  bool MTPStorage_SD::has_directories(uint32_t store) { return true; }
    1e48:	movs	r0, #1
    1e4a:	bx	lr

00001e4c <MTPStorage_SD::totalSize(unsigned long)>:
    bool sd_mkdir(uint32_t store, char *filename) {  return sdx[store]->mkdir(filename);  }
    bool sd_rename(uint32_t store, char *oldfilename, char *newfilename) { return sdx[store]->rename(oldfilename,newfilename);  }
    bool sd_remove(uint32_t store, const char *filename) {    Serial.println(filename); return sdx[store]->remove(filename);  }
    bool sd_rmdir(uint32_t store, char *filename) { return sdx[store]->rmdir(filename);  }

    uint64_t sd_totalSize(uint32_t store) { return sdx[store]->totalSize();  }
    1e4c:	add.w	r1, r0, r1, lsl #2
    1e50:	ldr	r0, [r1, #88]	; 0x58
    1e52:	ldr	r3, [r0, #0]
    1e54:	ldr	r3, [r3, #28]
    1e56:	bx	r3

00001e58 <MTPStorage_SD::usedSize(unsigned long)>:
    uint64_t sd_usedSize(uint32_t store)  { return sdx[store]->usedSize();  }
    1e58:	add.w	r1, r0, r1, lsl #2
    1e5c:	ldr	r0, [r1, #88]	; 0x58
    1e5e:	ldr	r3, [r0, #0]
    1e60:	ldr	r3, [r3, #24]
    1e62:	bx	r3

00001e64 <MTPStorage_SD::write(char const*, unsigned long)>:
#endif
	virtual size_t read(void *buf, size_t nbyte) {
		return (f) ? f->read(buf, nbyte) : 0;
	}
	virtual size_t write(const void *buf, size_t size) {
		return (f) ? f->write(buf, size) : 0;
    1e64:	ldr.w	r0, [r0, #204]	; 0xcc
    1e68:	cmp	r0, #0
    1e6a:	beq.n	1ed2 <MTPStorage_SD::write(char const*, unsigned long)+0x6e>
    #endif
    return ret;
  }

  size_t MTPStorage_SD::write(const char* data, uint32_t bytes)
  {
    1e6c:	push	{r4, r5, r6}
    1e6e:	ldr	r4, [r0, #0]
    1e70:	ldr	r3, [pc, #108]	; (1ee0 <MTPStorage_SD::write(char const*, unsigned long)+0x7c>)
    1e72:	ldr	r4, [r4, #44]	; 0x2c
    1e74:	cmp	r4, r3
    1e76:	bne.n	1ecc <MTPStorage_SD::write(char const*, unsigned long)+0x68>
    1e78:	ldr	r0, [r0, #16]
    1e7a:	cbz	r0, 1ec6 <MTPStorage_SD::write(char const*, unsigned long)+0x62>
    1e7c:	ldr	r4, [r0, #0]
    1e7e:	ldr	r4, [r4, #44]	; 0x2c
    1e80:	cmp	r4, r3
    1e82:	bne.n	1ecc <MTPStorage_SD::write(char const*, unsigned long)+0x68>
    1e84:	ldr	r0, [r0, #16]
    1e86:	cbz	r0, 1ec6 <MTPStorage_SD::write(char const*, unsigned long)+0x62>
    1e88:	ldr	r4, [r0, #0]
    1e8a:	ldr	r4, [r4, #44]	; 0x2c
    1e8c:	cmp	r4, r3
    1e8e:	bne.n	1ecc <MTPStorage_SD::write(char const*, unsigned long)+0x68>
    1e90:	ldr	r0, [r0, #16]
    1e92:	cbz	r0, 1ec6 <MTPStorage_SD::write(char const*, unsigned long)+0x62>
    1e94:	ldr	r4, [r0, #0]
    1e96:	ldr	r4, [r4, #44]	; 0x2c
    1e98:	cmp	r4, r3
    1e9a:	bne.n	1ecc <MTPStorage_SD::write(char const*, unsigned long)+0x68>
    1e9c:	ldr	r0, [r0, #16]
    1e9e:	cbz	r0, 1ec6 <MTPStorage_SD::write(char const*, unsigned long)+0x62>
    1ea0:	mov	r6, r2
    1ea2:	ldr	r2, [r0, #0]
    1ea4:	ldr	r4, [r2, #44]	; 0x2c
    1ea6:	cmp	r4, r3
    1ea8:	mov	r5, r1
    1eaa:	bne.n	1ed6 <MTPStorage_SD::write(char const*, unsigned long)+0x72>
    1eac:	ldr	r0, [r0, #16]
    1eae:	cbz	r0, 1ec6 <MTPStorage_SD::write(char const*, unsigned long)+0x62>
    1eb0:	ldr	r2, [r0, #0]
    1eb2:	ldr	r4, [r2, #44]	; 0x2c
    1eb4:	cmp	r4, r3
    1eb6:	bne.n	1ed6 <MTPStorage_SD::write(char const*, unsigned long)+0x72>
    1eb8:	ldr	r0, [r0, #16]
    1eba:	cbz	r0, 1ec6 <MTPStorage_SD::write(char const*, unsigned long)+0x62>
    1ebc:	ldr	r3, [r0, #0]
    1ebe:	mov	r2, r6
    1ec0:	ldr	r3, [r3, #44]	; 0x2c
      mtp_lock_storage(true);
      size_t ret = file_.write(data,bytes);
      mtp_lock_storage(false);
      return ret;
  }
    1ec2:	pop	{r4, r5, r6}
    1ec4:	bx	r3
    1ec6:	movs	r0, #0
    1ec8:	pop	{r4, r5, r6}
    1eca:	bx	lr
    1ecc:	mov	r3, r4
    1ece:	pop	{r4, r5, r6}
    1ed0:	bx	r3
    1ed2:	movs	r0, #0
    1ed4:	bx	lr
    1ed6:	mov	r2, r6
    1ed8:	mov	r1, r5
    1eda:	mov	r3, r4
    1edc:	pop	{r4, r5, r6}
    1ede:	bx	r3
    1ee0:	.word	0x00000481

00001ee4 <MTPStorage_SD::ResetIndex()>:
	}
	virtual void close() {
		if (f) f->close();
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
    1ee4:	ldr.w	r3, [r0, #184]	; 0xb8
    1ee8:	cmp	r3, #0
    1eea:	beq.n	1f54 <MTPStorage_SD::ResetIndex()+0x70>
    1eec:	ldr	r2, [r3, #0]
    1eee:	ldr	r1, [pc, #108]	; (1f5c <MTPStorage_SD::ResetIndex()+0x78>)
    1ef0:	ldr	r2, [r2, #68]	; 0x44
    1ef2:	cmp	r2, r1
    index_=sd_open(0,indexFile, FILE_WRITE_BEGIN);
    if(!index_) Serial.println("cannot open Index file"); 
    mtp_lock_storage(false);
  }

  void MTPStorage_SD::ResetIndex() {
    1ef4:	push	{r4, lr}
    1ef6:	mov	r4, r0
    1ef8:	bne.n	1f4e <MTPStorage_SD::ResetIndex()+0x6a>
    1efa:	ldr	r0, [r3, #16]
    1efc:	cbz	r0, 1f4c <MTPStorage_SD::ResetIndex()+0x68>
    1efe:	ldr	r3, [r0, #0]
    1f00:	ldr	r3, [r3, #68]	; 0x44
    1f02:	cmp	r3, r2
    1f04:	bne.n	1f56 <MTPStorage_SD::ResetIndex()+0x72>
    1f06:	ldr	r0, [r0, #16]
    1f08:	cbz	r0, 1f4c <MTPStorage_SD::ResetIndex()+0x68>
    1f0a:	ldr	r2, [r0, #0]
    1f0c:	ldr	r2, [r2, #68]	; 0x44
    1f0e:	cmp	r2, r3
    1f10:	bne.n	1f50 <MTPStorage_SD::ResetIndex()+0x6c>
    1f12:	ldr	r0, [r0, #16]
    1f14:	cbz	r0, 1f4c <MTPStorage_SD::ResetIndex()+0x68>
    1f16:	ldr	r3, [r0, #0]
    1f18:	ldr	r3, [r3, #68]	; 0x44
    1f1a:	cmp	r3, r2
    1f1c:	bne.n	1f56 <MTPStorage_SD::ResetIndex()+0x72>
    1f1e:	ldr	r0, [r0, #16]
    1f20:	cbz	r0, 1f4c <MTPStorage_SD::ResetIndex()+0x68>
    1f22:	ldr	r2, [r0, #0]
    1f24:	ldr	r2, [r2, #68]	; 0x44
    1f26:	cmp	r2, r3
    1f28:	bne.n	1f50 <MTPStorage_SD::ResetIndex()+0x6c>
    1f2a:	ldr	r0, [r0, #16]
    1f2c:	cbz	r0, 1f4c <MTPStorage_SD::ResetIndex()+0x68>
    1f2e:	ldr	r3, [r0, #0]
    1f30:	ldr	r3, [r3, #68]	; 0x44
    1f32:	blx	r3
    if(!sd_isOpen(index_)) return;
    1f34:	cbz	r0, 1f4c <MTPStorage_SD::ResetIndex()+0x68>
    CloseIndex();
    1f36:	ldr	r3, [r4, #0]
    1f38:	mov	r0, r4
    1f3a:	ldr	r3, [r3, #64]	; 0x40
    1f3c:	blx	r3
//    OpenIndex();

    all_scanned_ = false;
    1f3e:	movs	r2, #0
    open_file_ = 0xFFFFFFFEUL;
    1f40:	mvn.w	r3, #1
  void MTPStorage_SD::ResetIndex() {
    if(!sd_isOpen(index_)) return;
    CloseIndex();
//    OpenIndex();

    all_scanned_ = false;
    1f44:	strb.w	r2, [r4, #249]	; 0xf9
    open_file_ = 0xFFFFFFFEUL;
    1f48:	str.w	r3, [r4, #240]	; 0xf0
    1f4c:	pop	{r4, pc}
    1f4e:	mov	r0, r3
    1f50:	blx	r2
    1f52:	b.n	1f34 <MTPStorage_SD::ResetIndex()+0x50>
    1f54:	bx	lr
    1f56:	blx	r3
    1f58:	b.n	1f34 <MTPStorage_SD::ResetIndex()+0x50>
    1f5a:	nop
    1f5c:	.word	0x00000501

00001f60 <MTPStorage_SD::CloseIndex()>:

  uint64_t MTPStorage_SD::totalSize(uint32_t store) { return sd_totalSize(store); }
  uint64_t MTPStorage_SD::usedSize(uint32_t store) { return sd_usedSize(store); }

  void MTPStorage_SD::CloseIndex()
  {
    1f60:	push	{r4, lr}
    1f62:	mov	r4, r0
    1f64:	ldr.w	r0, [r0, #184]	; 0xb8
    1f68:	cmp	r0, #0
    1f6a:	beq.n	204c <MTPStorage_SD::CloseIndex()+0xec>
    1f6c:	ldr	r3, [r0, #0]
    1f6e:	ldr	r2, [pc, #256]	; (2070 <MTPStorage_SD::CloseIndex()+0x110>)
    1f70:	ldr	r3, [r3, #68]	; 0x44
    1f72:	cmp	r3, r2
    1f74:	bne.n	2058 <MTPStorage_SD::CloseIndex()+0xf8>
    1f76:	ldr	r0, [r0, #16]
    1f78:	cmp	r0, #0
    1f7a:	beq.n	204c <MTPStorage_SD::CloseIndex()+0xec>
    1f7c:	ldr	r2, [r0, #0]
    1f7e:	ldr	r2, [r2, #68]	; 0x44
    1f80:	cmp	r2, r3
    1f82:	bne.n	206a <MTPStorage_SD::CloseIndex()+0x10a>
    1f84:	ldr	r0, [r0, #16]
    1f86:	cmp	r0, #0
    1f88:	beq.n	204c <MTPStorage_SD::CloseIndex()+0xec>
    1f8a:	ldr	r3, [r0, #0]
    1f8c:	ldr	r3, [r3, #68]	; 0x44
    1f8e:	cmp	r3, r2
    1f90:	bne.n	2058 <MTPStorage_SD::CloseIndex()+0xf8>
    1f92:	ldr	r0, [r0, #16]
    1f94:	cmp	r0, #0
    1f96:	beq.n	204c <MTPStorage_SD::CloseIndex()+0xec>
    1f98:	ldr	r2, [r0, #0]
    1f9a:	ldr	r2, [r2, #68]	; 0x44
    1f9c:	cmp	r2, r3
    1f9e:	bne.n	206a <MTPStorage_SD::CloseIndex()+0x10a>
    1fa0:	ldr	r0, [r0, #16]
    1fa2:	cmp	r0, #0
    1fa4:	beq.n	204c <MTPStorage_SD::CloseIndex()+0xec>
    1fa6:	ldr	r3, [r0, #0]
    1fa8:	ldr	r3, [r3, #68]	; 0x44
    1faa:	cmp	r3, r2
    1fac:	bne.n	2058 <MTPStorage_SD::CloseIndex()+0xf8>
    1fae:	ldr	r0, [r0, #16]
    1fb0:	cmp	r0, #0
    1fb2:	beq.n	204c <MTPStorage_SD::CloseIndex()+0xec>
    1fb4:	ldr	r3, [r0, #0]
    1fb6:	ldr	r3, [r3, #68]	; 0x44
    1fb8:	blx	r3
    mtp_lock_storage(true);
    if(sd_isOpen(index_)) index_.close();
    1fba:	cmp	r0, #0
    1fbc:	beq.n	204c <MTPStorage_SD::CloseIndex()+0xec>
	}
	virtual uint64_t size() {
		return (f) ? f->size() : 0;
	}
	virtual void close() {
		if (f) f->close();
    1fbe:	ldr.w	r0, [r4, #184]	; 0xb8
    1fc2:	cmp	r0, #0
    1fc4:	beq.n	204c <MTPStorage_SD::CloseIndex()+0xec>
    1fc6:	ldr	r2, [r0, #0]
    1fc8:	ldr	r3, [pc, #168]	; (2074 <MTPStorage_SD::CloseIndex()+0x114>)
    1fca:	ldr	r2, [r2, #64]	; 0x40
    1fcc:	cmp	r2, r3
    1fce:	bne.n	205c <MTPStorage_SD::CloseIndex()+0xfc>
    1fd0:	ldr	r0, [r0, #16]
    1fd2:	cmp	r0, #0
    1fd4:	beq.n	204c <MTPStorage_SD::CloseIndex()+0xec>
    1fd6:	ldr	r2, [r0, #0]
    1fd8:	ldr	r2, [r2, #64]	; 0x40
    1fda:	cmp	r2, r3
    1fdc:	bne.n	205c <MTPStorage_SD::CloseIndex()+0xfc>
    1fde:	ldr	r0, [r0, #16]
    1fe0:	cmp	r0, #0
    1fe2:	beq.n	204c <MTPStorage_SD::CloseIndex()+0xec>
    1fe4:	ldr	r2, [r0, #0]
    1fe6:	ldr	r2, [r2, #64]	; 0x40
    1fe8:	cmp	r2, r3
    1fea:	bne.n	205c <MTPStorage_SD::CloseIndex()+0xfc>
    1fec:	ldr	r0, [r0, #16]
    1fee:	cmp	r0, #0
    1ff0:	beq.n	204c <MTPStorage_SD::CloseIndex()+0xec>
    1ff2:	ldr	r2, [r0, #0]
    1ff4:	ldr	r2, [r2, #64]	; 0x40
    1ff6:	cmp	r2, r3
    1ff8:	bne.n	205c <MTPStorage_SD::CloseIndex()+0xfc>
    1ffa:	ldr	r0, [r0, #16]
    1ffc:	cbz	r0, 204c <MTPStorage_SD::CloseIndex()+0xec>
    1ffe:	ldr	r2, [r0, #0]
    2000:	ldr	r2, [r2, #64]	; 0x40
    2002:	cmp	r2, r3
    2004:	bne.n	205c <MTPStorage_SD::CloseIndex()+0xfc>
    2006:	ldr	r0, [r0, #16]
    2008:	cbz	r0, 204c <MTPStorage_SD::CloseIndex()+0xec>
    200a:	ldr	r2, [r0, #0]
    200c:	ldr	r2, [r2, #64]	; 0x40
    200e:	cmp	r2, r3
    2010:	bne.n	205c <MTPStorage_SD::CloseIndex()+0xfc>
    2012:	ldr	r0, [r0, #16]
    2014:	cbz	r0, 204c <MTPStorage_SD::CloseIndex()+0xec>
    2016:	ldr	r2, [r0, #0]
    2018:	ldr	r2, [r2, #64]	; 0x40
    201a:	cmp	r2, r3
    201c:	bne.n	205c <MTPStorage_SD::CloseIndex()+0xfc>
    201e:	ldr	r0, [r0, #16]
    2020:	cbz	r0, 204c <MTPStorage_SD::CloseIndex()+0xec>
    2022:	ldr	r2, [r0, #0]
    2024:	ldr	r2, [r2, #64]	; 0x40
    2026:	cmp	r2, r3
    2028:	bne.n	205c <MTPStorage_SD::CloseIndex()+0xfc>
    202a:	ldr	r0, [r0, #16]
    202c:	cbz	r0, 204c <MTPStorage_SD::CloseIndex()+0xec>
    202e:	ldr	r2, [r0, #0]
    2030:	ldr	r2, [r2, #64]	; 0x40
    2032:	cmp	r2, r3
    2034:	bne.n	205c <MTPStorage_SD::CloseIndex()+0xfc>
    2036:	ldr	r0, [r0, #16]
    2038:	cbz	r0, 204c <MTPStorage_SD::CloseIndex()+0xec>
    203a:	ldr	r2, [r0, #0]
    203c:	ldr	r2, [r2, #64]	; 0x40
    203e:	cmp	r2, r3
    2040:	bne.n	205c <MTPStorage_SD::CloseIndex()+0xfc>
    2042:	ldr	r0, [r0, #16]
    2044:	cbz	r0, 204c <MTPStorage_SD::CloseIndex()+0xec>
    2046:	ldr	r3, [r0, #0]
    2048:	ldr	r3, [r3, #64]	; 0x40
    204a:	blx	r3
    mtp_lock_storage(false);
    index_generated = false;
    204c:	movs	r3, #0
    204e:	strb.w	r3, [r4, #248]	; 0xf8
    index_entries_ = 0;
    2052:	str.w	r3, [r4, #244]	; 0xf4
    2056:	pop	{r4, pc}
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
    2058:	blx	r3
    205a:	b.n	1fba <MTPStorage_SD::CloseIndex()+0x5a>
	}
	virtual uint64_t size() {
		return (f) ? f->size() : 0;
	}
	virtual void close() {
		if (f) f->close();
    205c:	blx	r2
  void MTPStorage_SD::CloseIndex()
  {
    mtp_lock_storage(true);
    if(sd_isOpen(index_)) index_.close();
    mtp_lock_storage(false);
    index_generated = false;
    205e:	movs	r3, #0
    2060:	strb.w	r3, [r4, #248]	; 0xf8
    index_entries_ = 0;
    2064:	str.w	r3, [r4, #244]	; 0xf4
    2068:	pop	{r4, pc}
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
    206a:	blx	r2
    206c:	b.n	1fba <MTPStorage_SD::CloseIndex()+0x5a>
    206e:	nop
    2070:	.word	0x00000501
    2074:	.word	0x000004f5

00002078 <File::invalidate() [clone .isra.1]>:
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    2078:	ldr	r2, [r0, #0]
    207a:	cmp	r2, #0
    207c:	beq.n	20f8 <File::invalidate() [clone .isra.1]+0x80>
    207e:	ldr	r3, [r2, #16]
    2080:	subs	r3, #1
    2082:	str	r3, [r2, #16]
    2084:	cmp	r3, #0
    2086:	bne.n	20f8 <File::invalidate() [clone .isra.1]+0x80>
	}
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
    2088:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		if (f && --(f->refcount) == 0) delete f;
    208c:	ldr	r4, [r0, #0]
    208e:	cmp	r4, #0
    2090:	beq.n	20fa <File::invalidate() [clone .isra.1]+0x82>
    2092:	ldr	r3, [r4, #0]
    2094:	ldr	r1, [pc, #120]	; (2110 <File::invalidate() [clone .isra.1]+0x98>)
    2096:	ldr	r3, [r3, #32]
    2098:	cmp	r3, r1
    209a:	bne.n	20fe <File::invalidate() [clone .isra.1]+0x86>
    209c:	ldr	r2, [r4, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    209e:	ldr	r6, [pc, #116]	; (2114 <File::invalidate() [clone .isra.1]+0x9c>)
    20a0:	str	r6, [r4, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    20a2:	cbz	r2, 20ec <File::invalidate() [clone .isra.1]+0x74>
    20a4:	ldr	r3, [r2, #16]
    20a6:	subs	r3, #1
    20a8:	str	r3, [r2, #16]
    20aa:	cbnz	r3, 20ec <File::invalidate() [clone .isra.1]+0x74>
    20ac:	ldr	r5, [r4, #16]
    20ae:	cbz	r5, 20ec <File::invalidate() [clone .isra.1]+0x74>
    20b0:	ldr	r3, [r5, #0]
    20b2:	ldr	r3, [r3, #32]
    20b4:	cmp	r3, r1
    20b6:	bne.n	2106 <File::invalidate() [clone .isra.1]+0x8e>
    20b8:	ldr	r2, [r5, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    20ba:	str	r6, [r5, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    20bc:	cbz	r2, 20e4 <File::invalidate() [clone .isra.1]+0x6c>
    20be:	ldr	r3, [r2, #16]
    20c0:	subs	r3, #1
    20c2:	str	r3, [r2, #16]
    20c4:	cbnz	r3, 20e4 <File::invalidate() [clone .isra.1]+0x6c>
    20c6:	ldr	r7, [r5, #16]
    20c8:	cbz	r7, 20e4 <File::invalidate() [clone .isra.1]+0x6c>
    20ca:	ldr	r3, [r7, #0]
    20cc:	ldr	r3, [r3, #32]
    20ce:	cmp	r3, r1
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    20d0:	mov	r0, r7
    20d2:	bne.n	210c <File::invalidate() [clone .isra.1]+0x94>
    20d4:	str.w	r6, [r0], #16
		invalidate();
    20d8:	bl	2078 <File::invalidate() [clone .isra.1]>
	}
    20dc:	mov	r0, r7
    20de:	movs	r1, #20
    20e0:	bl	e950 <operator delete(void*, unsigned int)>
    20e4:	mov	r0, r5
    20e6:	movs	r1, #20
    20e8:	bl	e950 <operator delete(void*, unsigned int)>
    20ec:	mov	r0, r4
    20ee:	movs	r1, #20
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
	}
    20f0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
		invalidate();
	}
    20f4:	b.w	e950 <operator delete(void*, unsigned int)>
    20f8:	bx	lr
    20fa:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    20fe:	mov	r0, r4
	}
    2100:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    2104:	bx	r3
    2106:	mov	r0, r5
    2108:	blx	r3
    210a:	b.n	20ec <File::invalidate() [clone .isra.1]+0x74>
    210c:	blx	r3
    210e:	b.n	20e4 <File::invalidate() [clone .isra.1]+0x6c>
    2110:	.word	0x00000f25
    2114:	.word	0x000141ac

00002118 <mtp_yield()>:
//   support serialflash
//   partial object fetch/receive
//   events (notify usb host when local storage changes) (But, this seems too difficult)

// These should probably be weak.
void mtp_yield() {}
    2118:	bx	lr
    211a:	nop

0000211c <MTPStorage_SD::OpenIndex()>:
    index_generated = false;
    index_entries_ = 0;
  }

  void MTPStorage_SD::OpenIndex() 
  { if(sd_isOpen(index_)) return; // only once
    211c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    2120:	mov	r4, r0
	}
	virtual void close() {
		if (f) f->close();
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
    2122:	ldr.w	r0, [r0, #184]	; 0xb8
    2126:	sub	sp, #28
    2128:	cbz	r0, 217c <MTPStorage_SD::OpenIndex()+0x60>
    212a:	ldr	r3, [r0, #0]
    212c:	ldr	r2, [pc, #536]	; (2348 <MTPStorage_SD::OpenIndex()+0x22c>)
    212e:	ldr	r3, [r3, #68]	; 0x44
    2130:	cmp	r3, r2
    2132:	bne.w	244c <MTPStorage_SD::OpenIndex()+0x330>
    2136:	ldr	r0, [r0, #16]
    2138:	cbz	r0, 217c <MTPStorage_SD::OpenIndex()+0x60>
    213a:	ldr	r2, [r0, #0]
    213c:	ldr	r2, [r2, #68]	; 0x44
    213e:	cmp	r2, r3
    2140:	bne.w	2460 <MTPStorage_SD::OpenIndex()+0x344>
    2144:	ldr	r0, [r0, #16]
    2146:	cbz	r0, 217c <MTPStorage_SD::OpenIndex()+0x60>
    2148:	ldr	r3, [r0, #0]
    214a:	ldr	r3, [r3, #68]	; 0x44
    214c:	cmp	r3, r2
    214e:	bne.w	244c <MTPStorage_SD::OpenIndex()+0x330>
    2152:	ldr	r0, [r0, #16]
    2154:	cbz	r0, 217c <MTPStorage_SD::OpenIndex()+0x60>
    2156:	ldr	r2, [r0, #0]
    2158:	ldr	r2, [r2, #68]	; 0x44
    215a:	cmp	r2, r3
    215c:	bne.w	2460 <MTPStorage_SD::OpenIndex()+0x344>
    2160:	ldr	r0, [r0, #16]
    2162:	cbz	r0, 217c <MTPStorage_SD::OpenIndex()+0x60>
    2164:	ldr	r3, [r0, #0]
    2166:	ldr	r3, [r3, #68]	; 0x44
    2168:	cmp	r3, r2
    216a:	bne.w	244c <MTPStorage_SD::OpenIndex()+0x330>
    216e:	ldr	r0, [r0, #16]
    2170:	cbz	r0, 217c <MTPStorage_SD::OpenIndex()+0x60>
    2172:	ldr	r3, [r0, #0]
    2174:	ldr	r3, [r3, #68]	; 0x44
    2176:	blx	r3
    2178:	cmp	r0, #0
    217a:	bne.n	2250 <MTPStorage_SD::OpenIndex()+0x134>
    }

    uint32_t sd_getFSCount(void) {return fsCount;}
    const char *sd_getFSName(uint32_t store) { return sd_name[store];}

    File sd_open(uint32_t store, const char *filename, uint32_t mode) { return sdx[store]->open(filename,mode);  }
    217c:	ldr	r1, [r4, #88]	; 0x58
    217e:	ldr	r2, [pc, #460]	; (234c <MTPStorage_SD::OpenIndex()+0x230>)
    2180:	ldr	r3, [r1, #0]
    2182:	add	r0, sp, #4
    2184:	ldr	r5, [r3, #0]
    2186:	movs	r3, #2
    2188:	blx	r5
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    218a:	ldr.w	r3, [r4, #184]	; 0xb8
    218e:	cbz	r3, 219c <MTPStorage_SD::OpenIndex()+0x80>
    2190:	ldr	r2, [r3, #16]
    2192:	subs	r2, #1
    2194:	str	r2, [r3, #16]
    2196:	cmp	r2, #0
    2198:	beq.w	2360 <MTPStorage_SD::OpenIndex()+0x244>
	File& operator = (const File &file) {
		//Serial.println("File assignment");
		//static int assigncount=0;
		//if (++assigncount > 20) while (1) ;
		invalidate();
		f = file.f;
    219c:	ldr	r3, [sp, #20]
    219e:	str.w	r3, [r4, #184]	; 0xb8
		if (f) f->refcount++;
    21a2:	cbz	r3, 21bc <MTPStorage_SD::OpenIndex()+0xa0>
    21a4:	ldr	r2, [r3, #16]
		return *this;
	}
	virtual ~File() {
    21a6:	ldr	r1, [pc, #424]	; (2350 <MTPStorage_SD::OpenIndex()+0x234>)
    21a8:	str	r1, [sp, #4]
		//Serial.println("File assignment");
		//static int assigncount=0;
		//if (++assigncount > 20) while (1) ;
		invalidate();
		f = file.f;
		if (f) f->refcount++;
    21aa:	adds	r2, #1
    21ac:	str	r2, [r3, #16]
    21ae:	ldr	r2, [sp, #20]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    21b0:	cbz	r2, 21bc <MTPStorage_SD::OpenIndex()+0xa0>
    21b2:	ldr	r3, [r2, #16]
    21b4:	subs	r3, #1
    21b6:	str	r3, [r2, #16]
    21b8:	cmp	r3, #0
    21ba:	beq.n	2256 <MTPStorage_SD::OpenIndex()+0x13a>
	}
	virtual void close() {
		if (f) f->close();
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
    21bc:	ldr.w	r0, [r4, #184]	; 0xb8
    21c0:	cmp	r0, #0
    21c2:	beq.n	2242 <MTPStorage_SD::OpenIndex()+0x126>
    21c4:	ldr	r2, [r0, #0]
    21c6:	ldr	r3, [pc, #384]	; (2348 <MTPStorage_SD::OpenIndex()+0x22c>)
    21c8:	ldr	r2, [r2, #68]	; 0x44
    21ca:	cmp	r2, r3
    21cc:	bne.w	2456 <MTPStorage_SD::OpenIndex()+0x33a>
    21d0:	ldr	r0, [r0, #16]
    21d2:	cmp	r0, #0
    21d4:	beq.n	2242 <MTPStorage_SD::OpenIndex()+0x126>
    21d6:	ldr	r2, [r0, #0]
    21d8:	ldr	r2, [r2, #68]	; 0x44
    21da:	cmp	r2, r3
    21dc:	bne.w	2456 <MTPStorage_SD::OpenIndex()+0x33a>
    21e0:	ldr	r0, [r0, #16]
    21e2:	cmp	r0, #0
    21e4:	beq.n	2242 <MTPStorage_SD::OpenIndex()+0x126>
    21e6:	ldr	r2, [r0, #0]
    21e8:	ldr	r2, [r2, #68]	; 0x44
    21ea:	cmp	r2, r3
    21ec:	bne.w	2456 <MTPStorage_SD::OpenIndex()+0x33a>
    21f0:	ldr	r0, [r0, #16]
    21f2:	cbz	r0, 2242 <MTPStorage_SD::OpenIndex()+0x126>
    21f4:	ldr	r2, [r0, #0]
    21f6:	ldr	r2, [r2, #68]	; 0x44
    21f8:	cmp	r2, r3
    21fa:	bne.w	2456 <MTPStorage_SD::OpenIndex()+0x33a>
    21fe:	ldr	r0, [r0, #16]
    2200:	cbz	r0, 2242 <MTPStorage_SD::OpenIndex()+0x126>
    2202:	ldr	r2, [r0, #0]
    2204:	ldr	r2, [r2, #68]	; 0x44
    2206:	cmp	r2, r3
    2208:	bne.w	2456 <MTPStorage_SD::OpenIndex()+0x33a>
    220c:	ldr	r0, [r0, #16]
    220e:	cbz	r0, 2242 <MTPStorage_SD::OpenIndex()+0x126>
    2210:	ldr	r2, [r0, #0]
    2212:	ldr	r2, [r2, #68]	; 0x44
    2214:	cmp	r2, r3
    2216:	bne.w	2456 <MTPStorage_SD::OpenIndex()+0x33a>
    221a:	ldr	r0, [r0, #16]
    221c:	cbz	r0, 2242 <MTPStorage_SD::OpenIndex()+0x126>
    221e:	ldr	r2, [r0, #0]
    2220:	ldr	r2, [r2, #68]	; 0x44
    2222:	cmp	r2, r3
    2224:	bne.w	2456 <MTPStorage_SD::OpenIndex()+0x33a>
    2228:	ldr	r0, [r0, #16]
    222a:	cbz	r0, 2242 <MTPStorage_SD::OpenIndex()+0x126>
    222c:	ldr	r2, [r0, #0]
    222e:	ldr	r2, [r2, #68]	; 0x44
    2230:	cmp	r2, r3
    2232:	bne.w	2456 <MTPStorage_SD::OpenIndex()+0x33a>
    2236:	ldr	r0, [r0, #16]
    2238:	cbz	r0, 2242 <MTPStorage_SD::OpenIndex()+0x126>
    223a:	ldr	r3, [r0, #0]
    223c:	ldr	r3, [r3, #68]	; 0x44
    223e:	blx	r3
    mtp_lock_storage(true);
    index_=sd_open(0,indexFile, FILE_WRITE_BEGIN);
    if(!index_) Serial.println("cannot open Index file"); 
    2240:	cbnz	r0, 2250 <MTPStorage_SD::OpenIndex()+0x134>
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    2242:	movs	r1, #22
    2244:	ldr	r0, [pc, #268]	; (2354 <MTPStorage_SD::OpenIndex()+0x238>)
    2246:	bl	cd74 <usb_serial_write>
    224a:	ldr	r0, [pc, #268]	; (2358 <MTPStorage_SD::OpenIndex()+0x23c>)
    224c:	bl	e7ac <Print::println()>
    mtp_lock_storage(false);
  }
    2250:	add	sp, #28
    2252:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    2256:	ldr	r5, [sp, #20]
    2258:	cmp	r5, #0
    225a:	beq.n	21bc <MTPStorage_SD::OpenIndex()+0xa0>
    225c:	ldr	r2, [r5, #0]
    225e:	ldr	r3, [pc, #252]	; (235c <MTPStorage_SD::OpenIndex()+0x240>)
    2260:	ldr	r2, [r2, #32]
    2262:	cmp	r2, r3
    2264:	bne.w	2470 <MTPStorage_SD::OpenIndex()+0x354>
    2268:	ldr	r0, [r5, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    226a:	str	r1, [r5, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    226c:	cmp	r0, #0
    226e:	beq.n	233e <MTPStorage_SD::OpenIndex()+0x222>
    2270:	ldr	r2, [r0, #16]
    2272:	subs	r2, #1
    2274:	str	r2, [r0, #16]
    2276:	cmp	r2, #0
    2278:	bne.n	233e <MTPStorage_SD::OpenIndex()+0x222>
    227a:	ldr	r6, [r5, #16]
    227c:	cmp	r6, #0
    227e:	beq.n	233e <MTPStorage_SD::OpenIndex()+0x222>
    2280:	ldr	r2, [r6, #0]
    2282:	ldr	r2, [r2, #32]
    2284:	cmp	r2, r3
    2286:	bne.w	2476 <MTPStorage_SD::OpenIndex()+0x35a>
    228a:	ldr	r0, [r6, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    228c:	str	r1, [r6, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    228e:	cmp	r0, #0
    2290:	beq.n	2336 <MTPStorage_SD::OpenIndex()+0x21a>
    2292:	ldr	r2, [r0, #16]
    2294:	subs	r2, #1
    2296:	str	r2, [r0, #16]
    2298:	cmp	r2, #0
    229a:	bne.n	2336 <MTPStorage_SD::OpenIndex()+0x21a>
    229c:	ldr	r7, [r6, #16]
    229e:	cmp	r7, #0
    22a0:	beq.n	2336 <MTPStorage_SD::OpenIndex()+0x21a>
    22a2:	ldr	r2, [r7, #0]
    22a4:	ldr	r2, [r2, #32]
    22a6:	cmp	r2, r3
    22a8:	bne.w	2488 <MTPStorage_SD::OpenIndex()+0x36c>
    22ac:	ldr	r0, [r7, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    22ae:	str	r1, [r7, #0]
    22b0:	ldr.w	lr, [pc, #156]	; 2350 <MTPStorage_SD::OpenIndex()+0x234>
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    22b4:	cmp	r0, #0
    22b6:	beq.n	232e <MTPStorage_SD::OpenIndex()+0x212>
    22b8:	ldr	r2, [r0, #16]
    22ba:	subs	r2, #1
    22bc:	str	r2, [r0, #16]
    22be:	cmp	r2, #0
    22c0:	bne.n	232e <MTPStorage_SD::OpenIndex()+0x212>
    22c2:	ldr.w	r8, [r7, #16]
    22c6:	cmp.w	r8, #0
    22ca:	beq.n	232e <MTPStorage_SD::OpenIndex()+0x212>
    22cc:	ldr.w	r2, [r8]
    22d0:	ldr	r2, [r2, #32]
    22d2:	cmp	r2, r3
    22d4:	bne.w	2494 <MTPStorage_SD::OpenIndex()+0x378>
    22d8:	ldr.w	r0, [r8, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    22dc:	str.w	lr, [r8]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    22e0:	cbz	r0, 2326 <MTPStorage_SD::OpenIndex()+0x20a>
    22e2:	ldr	r2, [r0, #16]
    22e4:	subs	r2, #1
    22e6:	str	r2, [r0, #16]
    22e8:	cbnz	r2, 2326 <MTPStorage_SD::OpenIndex()+0x20a>
    22ea:	ldr.w	r9, [r8, #16]
    22ee:	cmp.w	r9, #0
    22f2:	beq.n	2326 <MTPStorage_SD::OpenIndex()+0x20a>
    22f4:	ldr.w	r2, [r9]
    22f8:	ldr	r2, [r2, #32]
    22fa:	cmp	r2, r3
    22fc:	bne.w	24a0 <MTPStorage_SD::OpenIndex()+0x384>
    2300:	ldr.w	r2, [r9, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    2304:	str.w	r1, [r9]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    2308:	cbz	r2, 231e <MTPStorage_SD::OpenIndex()+0x202>
    230a:	ldr	r3, [r2, #16]
    230c:	subs	r3, #1
    230e:	str	r3, [r2, #16]
    2310:	cbnz	r3, 231e <MTPStorage_SD::OpenIndex()+0x202>
    2312:	ldr.w	r0, [r9, #16]
    2316:	cbz	r0, 231e <MTPStorage_SD::OpenIndex()+0x202>
    2318:	ldr	r3, [r0, #0]
    231a:	ldr	r3, [r3, #32]
    231c:	blx	r3
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
		invalidate();
	}
    231e:	mov	r0, r9
    2320:	movs	r1, #20
    2322:	bl	e950 <operator delete(void*, unsigned int)>
    2326:	mov	r0, r8
    2328:	movs	r1, #20
    232a:	bl	e950 <operator delete(void*, unsigned int)>
    232e:	mov	r0, r7
    2330:	movs	r1, #20
    2332:	bl	e950 <operator delete(void*, unsigned int)>
    2336:	mov	r0, r6
    2338:	movs	r1, #20
    233a:	bl	e950 <operator delete(void*, unsigned int)>
    233e:	mov	r0, r5
    2340:	movs	r1, #20
    2342:	bl	e950 <operator delete(void*, unsigned int)>
    2346:	b.n	21bc <MTPStorage_SD::OpenIndex()+0xa0>
    2348:	.word	0x00000501
    234c:	.word	0x00014464
    2350:	.word	0x000141ac
    2354:	.word	0x00014474
    2358:	.word	0x1fff8d50
    235c:	.word	0x00000f25
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    2360:	ldr.w	r5, [r4, #184]	; 0xb8
    2364:	cmp	r5, #0
    2366:	beq.w	219c <MTPStorage_SD::OpenIndex()+0x80>
    236a:	ldr	r2, [r5, #0]
    236c:	ldr	r3, [pc, #312]	; (24a8 <MTPStorage_SD::OpenIndex()+0x38c>)
    236e:	ldr	r2, [r2, #32]
    2370:	cmp	r2, r3
    2372:	bne.n	246a <MTPStorage_SD::OpenIndex()+0x34e>
    2374:	ldr	r0, [r5, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    2376:	ldr	r1, [pc, #308]	; (24ac <MTPStorage_SD::OpenIndex()+0x390>)
    2378:	str	r1, [r5, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    237a:	cmp	r0, #0
    237c:	beq.n	2442 <MTPStorage_SD::OpenIndex()+0x326>
    237e:	ldr	r2, [r0, #16]
    2380:	subs	r2, #1
    2382:	str	r2, [r0, #16]
    2384:	cmp	r2, #0
    2386:	bne.n	2442 <MTPStorage_SD::OpenIndex()+0x326>
    2388:	ldr	r6, [r5, #16]
    238a:	cmp	r6, #0
    238c:	beq.n	2442 <MTPStorage_SD::OpenIndex()+0x326>
    238e:	ldr	r2, [r6, #0]
    2390:	ldr	r2, [r2, #32]
    2392:	cmp	r2, r3
    2394:	bne.n	247c <MTPStorage_SD::OpenIndex()+0x360>
    2396:	ldr	r0, [r6, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    2398:	str	r1, [r6, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    239a:	cmp	r0, #0
    239c:	beq.n	243a <MTPStorage_SD::OpenIndex()+0x31e>
    239e:	ldr	r2, [r0, #16]
    23a0:	subs	r2, #1
    23a2:	str	r2, [r0, #16]
    23a4:	cmp	r2, #0
    23a6:	bne.n	243a <MTPStorage_SD::OpenIndex()+0x31e>
    23a8:	ldr	r7, [r6, #16]
    23aa:	cmp	r7, #0
    23ac:	beq.n	243a <MTPStorage_SD::OpenIndex()+0x31e>
    23ae:	ldr	r2, [r7, #0]
    23b0:	ldr	r2, [r2, #32]
    23b2:	cmp	r2, r3
    23b4:	bne.n	2482 <MTPStorage_SD::OpenIndex()+0x366>
    23b6:	ldr	r0, [r7, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    23b8:	str	r1, [r7, #0]
    23ba:	ldr.w	lr, [pc, #240]	; 24ac <MTPStorage_SD::OpenIndex()+0x390>
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    23be:	cmp	r0, #0
    23c0:	beq.n	2432 <MTPStorage_SD::OpenIndex()+0x316>
    23c2:	ldr	r2, [r0, #16]
    23c4:	subs	r2, #1
    23c6:	str	r2, [r0, #16]
    23c8:	cbnz	r2, 2432 <MTPStorage_SD::OpenIndex()+0x316>
    23ca:	ldr.w	r8, [r7, #16]
    23ce:	cmp.w	r8, #0
    23d2:	beq.n	2432 <MTPStorage_SD::OpenIndex()+0x316>
    23d4:	ldr.w	r2, [r8]
    23d8:	ldr	r2, [r2, #32]
    23da:	cmp	r2, r3
    23dc:	bne.n	248e <MTPStorage_SD::OpenIndex()+0x372>
    23de:	ldr.w	r0, [r8, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    23e2:	str.w	lr, [r8]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    23e6:	cbz	r0, 242a <MTPStorage_SD::OpenIndex()+0x30e>
    23e8:	ldr	r2, [r0, #16]
    23ea:	subs	r2, #1
    23ec:	str	r2, [r0, #16]
    23ee:	cbnz	r2, 242a <MTPStorage_SD::OpenIndex()+0x30e>
    23f0:	ldr.w	r9, [r8, #16]
    23f4:	cmp.w	r9, #0
    23f8:	beq.n	242a <MTPStorage_SD::OpenIndex()+0x30e>
    23fa:	ldr.w	r2, [r9]
    23fe:	ldr	r2, [r2, #32]
    2400:	cmp	r2, r3
    2402:	bne.n	249a <MTPStorage_SD::OpenIndex()+0x37e>
    2404:	ldr.w	r2, [r9, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    2408:	str.w	r1, [r9]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    240c:	cbz	r2, 2422 <MTPStorage_SD::OpenIndex()+0x306>
    240e:	ldr	r3, [r2, #16]
    2410:	subs	r3, #1
    2412:	str	r3, [r2, #16]
    2414:	cbnz	r3, 2422 <MTPStorage_SD::OpenIndex()+0x306>
    2416:	ldr.w	r0, [r9, #16]
    241a:	cbz	r0, 2422 <MTPStorage_SD::OpenIndex()+0x306>
    241c:	ldr	r3, [r0, #0]
    241e:	ldr	r3, [r3, #32]
    2420:	blx	r3
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
		invalidate();
	}
    2422:	mov	r0, r9
    2424:	movs	r1, #20
    2426:	bl	e950 <operator delete(void*, unsigned int)>
    242a:	mov	r0, r8
    242c:	movs	r1, #20
    242e:	bl	e950 <operator delete(void*, unsigned int)>
    2432:	mov	r0, r7
    2434:	movs	r1, #20
    2436:	bl	e950 <operator delete(void*, unsigned int)>
    243a:	mov	r0, r6
    243c:	movs	r1, #20
    243e:	bl	e950 <operator delete(void*, unsigned int)>
    2442:	mov	r0, r5
    2444:	movs	r1, #20
    2446:	bl	e950 <operator delete(void*, unsigned int)>
    244a:	b.n	219c <MTPStorage_SD::OpenIndex()+0x80>
	}
	virtual void close() {
		if (f) f->close();
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
    244c:	blx	r3
    index_generated = false;
    index_entries_ = 0;
  }

  void MTPStorage_SD::OpenIndex() 
  { if(sd_isOpen(index_)) return; // only once
    244e:	cmp	r0, #0
    2450:	bne.w	2250 <MTPStorage_SD::OpenIndex()+0x134>
    2454:	b.n	217c <MTPStorage_SD::OpenIndex()+0x60>
    2456:	blx	r2
    mtp_lock_storage(true);
    index_=sd_open(0,indexFile, FILE_WRITE_BEGIN);
    if(!index_) Serial.println("cannot open Index file"); 
    2458:	cmp	r0, #0
    245a:	bne.w	2250 <MTPStorage_SD::OpenIndex()+0x134>
    245e:	b.n	2242 <MTPStorage_SD::OpenIndex()+0x126>
    2460:	blx	r2
    index_generated = false;
    index_entries_ = 0;
  }

  void MTPStorage_SD::OpenIndex() 
  { if(sd_isOpen(index_)) return; // only once
    2462:	cmp	r0, #0
    2464:	bne.w	2250 <MTPStorage_SD::OpenIndex()+0x134>
    2468:	b.n	217c <MTPStorage_SD::OpenIndex()+0x60>
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    246a:	mov	r0, r5
    246c:	blx	r2
    246e:	b.n	219c <MTPStorage_SD::OpenIndex()+0x80>
    2470:	mov	r0, r5
    2472:	blx	r2
    2474:	b.n	21bc <MTPStorage_SD::OpenIndex()+0xa0>
    2476:	mov	r0, r6
    2478:	blx	r2
    247a:	b.n	233e <MTPStorage_SD::OpenIndex()+0x222>
    247c:	mov	r0, r6
    247e:	blx	r2
    2480:	b.n	2442 <MTPStorage_SD::OpenIndex()+0x326>
    2482:	mov	r0, r7
    2484:	blx	r2
    2486:	b.n	243a <MTPStorage_SD::OpenIndex()+0x31e>
    2488:	mov	r0, r7
    248a:	blx	r2
    248c:	b.n	2336 <MTPStorage_SD::OpenIndex()+0x21a>
    248e:	mov	r0, r8
    2490:	blx	r2
    2492:	b.n	2432 <MTPStorage_SD::OpenIndex()+0x316>
    2494:	mov	r0, r8
    2496:	blx	r2
    2498:	b.n	232e <MTPStorage_SD::OpenIndex()+0x212>
    249a:	mov	r0, r9
    249c:	blx	r2
    249e:	b.n	242a <MTPStorage_SD::OpenIndex()+0x30e>
    24a0:	mov	r0, r9
    24a2:	blx	r2
    24a4:	b.n	2326 <MTPStorage_SD::OpenIndex()+0x20a>
    24a6:	nop
    24a8:	.word	0x00000f25
    24ac:	.word	0x000141ac

000024b0 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>:
    all_scanned_ = false;
    open_file_ = 0xFFFFFFFEUL;
  }

  void MTPStorage_SD::WriteIndexRecord(uint32_t i, const Record& r) 
  { OpenIndex();
    24b0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    24b4:	mov	r6, r0
    24b6:	sub	sp, #12
    24b8:	mov	r4, r1
    24ba:	mov	r7, r2
    24bc:	bl	211c <MTPStorage_SD::OpenIndex()>
	}
	virtual bool truncate(uint64_t size=0) {
		return (f) ? f->truncate(size) : false;
	}
	virtual bool seek(uint64_t pos, int mode) {
		return (f) ? f->seek(pos, mode) : false;
    24c0:	ldr.w	r5, [r6, #184]	; 0xb8
    mtp_lock_storage(true);
    index_.seek((sizeof(r) * i));
    24c4:	add.w	r4, r4, r4, lsl #4
    24c8:	cmp	r5, #0
    24ca:	beq.n	25a2 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0xf2>
    24cc:	ldr	r0, [r5, #0]
    24ce:	ldr	r1, [pc, #308]	; (2604 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x154>)
    24d0:	lsls	r2, r4, #4
    24d2:	ldr	r4, [r0, #52]	; 0x34
    24d4:	cmp	r4, r1
    24d6:	mov.w	ip, #0
    24da:	bne.n	25ca <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x11a>
    24dc:	ldr	r1, [r5, #16]
    24de:	cmp	r1, #0
    24e0:	beq.n	259a <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0xea>
    24e2:	ldr	r3, [r1, #0]
    24e4:	ldr.w	r8, [r3, #52]	; 0x34
    24e8:	cmp	r8, r4
    24ea:	bne.n	25d6 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x126>
    24ec:	ldr.w	lr, [r1, #16]
    24f0:	cmp.w	lr, #0
    24f4:	beq.n	25a8 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0xf8>
    24f6:	ldr.w	r4, [lr]
    24fa:	ldr	r4, [r4, #52]	; 0x34
    24fc:	cmp	r4, r8
    24fe:	bne.n	25e2 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x132>
    2500:	ldr.w	lr, [lr, #16]
    2504:	cmp.w	lr, #0
    2508:	beq.n	25a8 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0xf8>
    250a:	ldr.w	r3, [lr]
    250e:	ldr.w	r8, [r3, #52]	; 0x34
    2512:	cmp	r8, r4
    2514:	bne.n	25ee <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x13e>
    2516:	ldr.w	r4, [lr, #16]
    251a:	cmp	r4, #0
    251c:	beq.n	25a8 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0xf8>
    251e:	ldr	r3, [r4, #0]
    2520:	ldr.w	r9, [r3, #52]	; 0x34
    2524:	cmp	r9, r8
    2526:	bne.n	25fa <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x14a>
    2528:	ldr	r4, [r4, #16]
    252a:	cmp	r4, #0
    252c:	beq.n	25a8 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0xf8>
    252e:	ldr	r1, [r4, #0]
    2530:	str.w	ip, [sp]
    2534:	mov	r3, ip
    2536:	mov	r0, r4
    2538:	ldr	r1, [r1, #52]	; 0x34
    253a:	blx	r1
#endif
	virtual size_t read(void *buf, size_t nbyte) {
		return (f) ? f->read(buf, nbyte) : 0;
	}
	virtual size_t write(const void *buf, size_t size) {
		return (f) ? f->write(buf, size) : 0;
    253c:	ldr.w	r5, [r6, #184]	; 0xb8
    2540:	cmp	r5, #0
    2542:	beq.n	25a2 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0xf2>
    2544:	ldr	r2, [r5, #0]
    2546:	ldr	r3, [pc, #192]	; (2608 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x158>)
    2548:	ldr	r4, [r2, #44]	; 0x2c
    254a:	cmp	r4, r3
    254c:	bne.n	25b4 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x104>
    254e:	ldr	r0, [r5, #16]
    2550:	cbz	r0, 25a2 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0xf2>
    2552:	ldr	r2, [r0, #0]
    2554:	ldr	r4, [r2, #44]	; 0x2c
    2556:	cmp	r4, r3
    2558:	bne.n	25c6 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x116>
    255a:	ldr	r0, [r0, #16]
    255c:	cbz	r0, 25a2 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0xf2>
    255e:	ldr	r2, [r0, #0]
    2560:	ldr	r4, [r2, #44]	; 0x2c
    2562:	cmp	r4, r3
    2564:	bne.n	25c6 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x116>
    2566:	ldr	r0, [r0, #16]
    2568:	cbz	r0, 25a2 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0xf2>
    256a:	ldr	r2, [r0, #0]
    256c:	ldr	r4, [r2, #44]	; 0x2c
    256e:	cmp	r4, r3
    2570:	bne.n	25c6 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x116>
    2572:	ldr	r0, [r0, #16]
    2574:	cbz	r0, 25a2 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0xf2>
    2576:	ldr	r2, [r0, #0]
    2578:	ldr	r4, [r2, #44]	; 0x2c
    257a:	cmp	r4, r3
    257c:	bne.n	25c6 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x116>
    257e:	ldr	r0, [r0, #16]
    2580:	cbz	r0, 25a2 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0xf2>
    2582:	ldr	r2, [r0, #0]
    2584:	ldr	r4, [r2, #44]	; 0x2c
    2586:	cmp	r4, r3
    2588:	bne.n	25c6 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x116>
    258a:	ldr	r0, [r0, #16]
    258c:	cbz	r0, 25a2 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0xf2>
    258e:	ldr	r3, [r0, #0]
    2590:	mov	r1, r7
    2592:	ldr	r3, [r3, #44]	; 0x2c
    2594:	mov.w	r2, #272	; 0x110
    2598:	b.n	25be <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x10e>
    259a:	ldr	r4, [r0, #44]	; 0x2c
    259c:	ldr	r3, [pc, #104]	; (2608 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x158>)
    259e:	cmp	r4, r3
    25a0:	bne.n	25b4 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x104>
    index_.write((char*)&r, sizeof(r));
    mtp_lock_storage(false);
  }
    25a2:	add	sp, #12
    25a4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    25a8:	ldr	r4, [r0, #44]	; 0x2c
    25aa:	ldr	r3, [pc, #92]	; (2608 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x158>)
    25ac:	cmp	r4, r3
    25ae:	bne.n	25b4 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x104>
    25b0:	mov	r0, r1
    25b2:	b.n	2552 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0xa2>
    25b4:	mov	r1, r7
    25b6:	mov	r0, r5
    25b8:	mov.w	r2, #272	; 0x110
    25bc:	mov	r3, r4
    25be:	add	sp, #12
    25c0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    25c4:	bx	r3
    25c6:	mov	r1, r7
    25c8:	b.n	25b8 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x108>
	}
	virtual bool truncate(uint64_t size=0) {
		return (f) ? f->truncate(size) : false;
	}
	virtual bool seek(uint64_t pos, int mode) {
		return (f) ? f->seek(pos, mode) : false;
    25ca:	str.w	ip, [sp]
    25ce:	mov	r3, ip
    25d0:	mov	r0, r5
    25d2:	blx	r4
    25d4:	b.n	253c <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x8c>
    25d6:	str.w	ip, [sp]
    25da:	mov	r3, ip
    25dc:	mov	r0, r1
    25de:	blx	r8
    25e0:	b.n	253c <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x8c>
    25e2:	str.w	ip, [sp]
    25e6:	mov	r3, ip
    25e8:	mov	r0, lr
    25ea:	blx	r4
    25ec:	b.n	253c <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x8c>
    25ee:	str.w	ip, [sp]
    25f2:	mov	r3, ip
    25f4:	mov	r0, lr
    25f6:	blx	r8
    25f8:	b.n	253c <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x8c>
    25fa:	movs	r3, #0
    25fc:	mov	r0, r4
    25fe:	str	r3, [sp, #0]
    2600:	blx	r9
    2602:	b.n	253c <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x8c>
    2604:	.word	0x000004c1
    2608:	.word	0x00000481

0000260c <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.6] [clone .constprop.14]>:
  }

  // MTP object handles should not change or be re-used during a session.
  // This would be easy if we could just have a list of all files in memory.
  // Since our RAM is limited, we'll keep the index in a file instead.
  void MTPStorage_SD::GenerateIndex(uint32_t store)
    260c:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  { if (index_generated) return; 
    index_generated = true;
    2610:	movs	r7, #1
  }

  // MTP object handles should not change or be re-used during a session.
  // This would be easy if we could just have a list of all files in memory.
  // Since our RAM is limited, we'll keep the index in a file instead.
  void MTPStorage_SD::GenerateIndex(uint32_t store)
    2612:	mov	r4, r0
    2614:	sub	sp, #272	; 0x110
    2616:	movs	r1, #13
  { if (index_generated) return; 
    index_generated = true;
    2618:	strb.w	r7, [r0, #248]	; 0xf8
    261c:	ldr	r0, [pc, #104]	; (2688 <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.6] [clone .constprop.14]+0x7c>)
    261e:	bl	cd74 <usb_serial_write>
    2622:	ldr	r0, [pc, #104]	; (268c <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.6] [clone .constprop.14]+0x80>)
    2624:	bl	e7ac <Print::println()>
    bool sd_mkdir(uint32_t store, char *filename) {  return sdx[store]->mkdir(filename);  }
    bool sd_rename(uint32_t store, char *oldfilename, char *newfilename) { return sdx[store]->rename(oldfilename,newfilename);  }
    bool sd_remove(uint32_t store, const char *filename) {    Serial.println(filename); return sdx[store]->remove(filename);  }
    2628:	ldr	r0, [r4, #88]	; 0x58
    262a:	ldr	r1, [pc, #92]	; (2688 <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.6] [clone .constprop.14]+0x7c>)
    262c:	ldr	r3, [r0, #0]
    262e:	ldr	r3, [r3, #16]
    2630:	blx	r3
    2632:	ldr	r3, [r4, #4]
    // first remove old index file
    mtp_lock_storage(true);
    sd_remove(0,indexFile);
    mtp_lock_storage(false);

    num_storage = sd_getFSCount();
    2634:	str.w	r3, [r4, #228]	; 0xe4

    index_entries_ = 0;
    2638:	movs	r1, #0
    Record r;
    for(int ii=0; ii<num_storage; ii++)
    263a:	cmp	r3, r1
    sd_remove(0,indexFile);
    mtp_lock_storage(false);

    num_storage = sd_getFSCount();

    index_entries_ = 0;
    263c:	str.w	r1, [r4, #244]	; 0xf4
    Record r;
    for(int ii=0; ii<num_storage; ii++)
    2640:	ble.n	2682 <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.6] [clone .constprop.14]+0x76>
    2642:	mov	r5, r1
    {
      r.store = ii; // 
      r.parent = 0xFFFFFFFFUL; // 
      r.sibling = 0;
    2644:	mov	r6, r1
    index_entries_ = 0;
    Record r;
    for(int ii=0; ii<num_storage; ii++)
    {
      r.store = ii; // 
      r.parent = 0xFFFFFFFFUL; // 
    2646:	mov.w	r8, #4294967295
    264a:	b.n	2650 <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.6] [clone .constprop.14]+0x44>
    264c:	ldr.w	r1, [r4, #244]	; 0xf4

    index_entries_ = 0;
    Record r;
    for(int ii=0; ii<num_storage; ii++)
    {
      r.store = ii; // 
    2650:	strh.w	r5, [sp, #14]
    index_.write((char*)&r, sizeof(r));
    mtp_lock_storage(false);
  }

  uint32_t MTPStorage_SD::AppendIndexRecord(const Record& r) 
  { uint32_t new_record = index_entries_++;
    2654:	adds	r3, r1, #1
    2656:	str.w	r3, [r4, #244]	; 0xf4
    WriteIndexRecord(new_record, r);
    265a:	mov	r2, sp
      r.parent = 0xFFFFFFFFUL; // 
      r.sibling = 0;
      r.child = 0;
      r.isdir = true;
      r.scanned = false;
      strcpy(r.name, "/");
    265c:	movs	r3, #47	; 0x2f
    mtp_lock_storage(false);
  }

  uint32_t MTPStorage_SD::AppendIndexRecord(const Record& r) 
  { uint32_t new_record = index_entries_++;
    WriteIndexRecord(new_record, r);
    265e:	mov	r0, r4
      r.parent = 0xFFFFFFFFUL; // 
      r.sibling = 0;
      r.child = 0;
      r.isdir = true;
      r.scanned = false;
      strcpy(r.name, "/");
    2660:	strh.w	r3, [sp, #16]
    index_entries_ = 0;
    Record r;
    for(int ii=0; ii<num_storage; ii++)
    {
      r.store = ii; // 
      r.parent = 0xFFFFFFFFUL; // 
    2664:	str.w	r8, [sp]
      r.sibling = 0;
    2668:	str	r6, [sp, #8]
      r.child = 0;
    266a:	str	r6, [sp, #4]
      r.isdir = true;
    266c:	strb.w	r7, [sp, #12]
      r.scanned = false;
    2670:	strb.w	r6, [sp, #13]
    mtp_lock_storage(false);
  }

  uint32_t MTPStorage_SD::AppendIndexRecord(const Record& r) 
  { uint32_t new_record = index_entries_++;
    WriteIndexRecord(new_record, r);
    2674:	bl	24b0 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>

    num_storage = sd_getFSCount();

    index_entries_ = 0;
    Record r;
    for(int ii=0; ii<num_storage; ii++)
    2678:	ldr.w	r3, [r4, #228]	; 0xe4
    267c:	adds	r5, #1
    267e:	cmp	r3, r5
    2680:	bgt.n	264c <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.6] [clone .constprop.14]+0x40>
      r.isdir = true;
      r.scanned = false;
      strcpy(r.name, "/");
      AppendIndexRecord(r);
    }
  }
    2682:	add	sp, #272	; 0x110
    2684:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2688:	.word	0x00014464
    268c:	.word	0x1fff8d50

00002690 <MTPStorage_SD::ReadIndexRecord(unsigned long)>:
    return new_record;
  }

  // TODO(hubbe): Cache a few records for speed.
  Record MTPStorage_SD::ReadIndexRecord(uint32_t i) 
  {
    2690:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2694:	mov	r5, r1
    2696:	mov	r4, r2
    2698:	sub	sp, #8
    Record ret;
    memset(&ret, 0, sizeof(ret));
    269a:	movs	r1, #0
    269c:	mov.w	r2, #272	; 0x110
    return new_record;
  }

  // TODO(hubbe): Cache a few records for speed.
  Record MTPStorage_SD::ReadIndexRecord(uint32_t i) 
  {
    26a0:	mov	r6, r0
    Record ret;
    memset(&ret, 0, sizeof(ret));
    26a2:	bl	106cc <memset>
    if (i > index_entries_) 
    26a6:	ldr.w	r3, [r5, #244]	; 0xf4
    26aa:	cmp	r3, r4
    26ac:	bcc.w	2826 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x196>
    { memset(&ret, 0, sizeof(ret));
      return ret;
    }
    OpenIndex();
    26b0:	mov	r0, r5
    26b2:	bl	211c <MTPStorage_SD::OpenIndex()>
    26b6:	ldr.w	r0, [r5, #184]	; 0xb8
    mtp_lock_storage(true);
    index_.seek(sizeof(ret) * i);
    26ba:	add.w	r4, r4, r4, lsl #4
    26be:	lsls	r2, r4, #4
    26c0:	mov.w	ip, #0
    26c4:	cmp	r0, #0
    26c6:	beq.w	281e <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x18e>
    26ca:	ldr	r7, [r0, #0]
    26cc:	ldr	r4, [pc, #456]	; (2898 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x208>)
    26ce:	ldr	r1, [r7, #52]	; 0x34
    26d0:	cmp	r1, r4
    26d2:	bne.w	2852 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x1c2>
    26d6:	ldr	r1, [r0, #16]
    26d8:	cmp	r1, #0
    26da:	beq.w	283a <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x1aa>
    26de:	ldr	r3, [r1, #0]
    26e0:	ldr.w	r8, [r3, #52]	; 0x34
    26e4:	cmp	r8, r4
    26e6:	bne.w	2880 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x1f0>
    26ea:	ldr.w	lr, [r1, #16]
    26ee:	cmp.w	lr, #0
    26f2:	beq.n	27a6 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x116>
    26f4:	ldr.w	r3, [lr]
    26f8:	ldr.w	r8, [r3, #52]	; 0x34
    26fc:	cmp	r8, r4
    26fe:	bne.w	2874 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x1e4>
    2702:	ldr.w	lr, [lr, #16]
    2706:	cmp.w	lr, #0
    270a:	beq.n	27a6 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x116>
    270c:	ldr.w	r3, [lr]
    2710:	ldr.w	r8, [r3, #52]	; 0x34
    2714:	cmp	r8, r4
    2716:	bne.w	2874 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x1e4>
    271a:	ldr.w	lr, [lr, #16]
    271e:	cmp.w	lr, #0
    2722:	beq.n	27a6 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x116>
    2724:	ldr.w	r3, [lr]
    2728:	ldr.w	r8, [r3, #52]	; 0x34
    272c:	cmp	r8, r4
    272e:	bne.w	288c <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x1fc>
    2732:	ldr.w	lr, [lr, #16]
    2736:	cmp.w	lr, #0
    273a:	beq.n	27a6 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x116>
    273c:	ldr.w	r3, [lr]
    2740:	ldr.w	r8, [r3, #52]	; 0x34
    2744:	cmp	r8, r4
    2746:	bne.w	288c <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x1fc>
    274a:	ldr.w	lr, [lr, #16]
    274e:	cmp.w	lr, #0
    2752:	beq.n	27a6 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x116>
    2754:	ldr.w	r3, [lr]
    2758:	ldr.w	r8, [r3, #52]	; 0x34
    275c:	cmp	r8, r4
    275e:	bne.w	288c <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x1fc>
    2762:	ldr.w	lr, [lr, #16]
    2766:	cmp.w	lr, #0
    276a:	beq.n	27a6 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x116>
    276c:	ldr.w	r3, [lr]
    2770:	ldr.w	r8, [r3, #52]	; 0x34
    2774:	cmp	r8, r4
    2776:	bne.w	288c <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x1fc>
    277a:	ldr.w	lr, [lr, #16]
    277e:	cmp.w	lr, #0
    2782:	beq.n	27a6 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x116>
    2784:	ldr.w	r3, [lr]
    2788:	ldr.w	r8, [r3, #52]	; 0x34
    278c:	cmp	r8, r4
    278e:	bne.n	288c <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x1fc>
    2790:	ldr.w	r4, [lr, #16]
    2794:	cbz	r4, 27a6 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x116>
    2796:	ldr	r1, [r4, #0]
    2798:	str.w	ip, [sp]
    279c:	mov	r3, ip
    279e:	mov	r0, r4
    27a0:	ldr	r1, [r1, #52]	; 0x34
    27a2:	blx	r1
    27a4:	b.n	285a <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x1ca>
	unsigned int getRefcount() { // testing only
		return refcount;
	}
#endif
	virtual size_t read(void *buf, size_t nbyte) {
		return (f) ? f->read(buf, nbyte) : 0;
    27a6:	ldr	r4, [r7, #40]	; 0x28
    27a8:	ldr	r3, [pc, #240]	; (289c <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x20c>)
    27aa:	cmp	r4, r3
    27ac:	bne.n	2842 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x1b2>
    27ae:	mov	r0, r1
    27b0:	ldr	r2, [r0, #0]
    27b2:	ldr	r4, [r2, #40]	; 0x28
    27b4:	cmp	r4, r3
    27b6:	bne.n	2842 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x1b2>
    27b8:	ldr	r0, [r0, #16]
    27ba:	cmp	r0, #0
    27bc:	beq.n	281e <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x18e>
    27be:	ldr	r2, [r0, #0]
    27c0:	ldr	r4, [r2, #40]	; 0x28
    27c2:	cmp	r4, r3
    27c4:	bne.n	2842 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x1b2>
    27c6:	ldr	r0, [r0, #16]
    27c8:	cbz	r0, 281e <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x18e>
    27ca:	ldr	r2, [r0, #0]
    27cc:	ldr	r4, [r2, #40]	; 0x28
    27ce:	cmp	r4, r3
    27d0:	bne.n	2842 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x1b2>
    27d2:	ldr	r0, [r0, #16]
    27d4:	cbz	r0, 281e <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x18e>
    27d6:	ldr	r2, [r0, #0]
    27d8:	ldr	r4, [r2, #40]	; 0x28
    27da:	cmp	r4, r3
    27dc:	bne.n	2842 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x1b2>
    27de:	ldr	r0, [r0, #16]
    27e0:	cbz	r0, 281e <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x18e>
    27e2:	ldr	r2, [r0, #0]
    27e4:	ldr	r4, [r2, #40]	; 0x28
    27e6:	cmp	r4, r3
    27e8:	bne.n	2842 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x1b2>
    27ea:	ldr	r0, [r0, #16]
    27ec:	cbz	r0, 281e <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x18e>
    27ee:	ldr	r2, [r0, #0]
    27f0:	ldr	r4, [r2, #40]	; 0x28
    27f2:	cmp	r4, r3
    27f4:	bne.n	2842 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x1b2>
    27f6:	ldr	r0, [r0, #16]
    27f8:	cbz	r0, 281e <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x18e>
    27fa:	ldr	r2, [r0, #0]
    27fc:	ldr	r4, [r2, #40]	; 0x28
    27fe:	cmp	r4, r3
    2800:	bne.n	2842 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x1b2>
    2802:	ldr	r0, [r0, #16]
    2804:	cbz	r0, 281e <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x18e>
    2806:	ldr	r2, [r0, #0]
    2808:	ldr	r4, [r2, #40]	; 0x28
    280a:	cmp	r4, r3
    280c:	bne.n	2842 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x1b2>
    280e:	ldr	r0, [r0, #16]
    2810:	cbz	r0, 281e <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x18e>
    2812:	ldr	r3, [r0, #0]
    2814:	mov.w	r2, #272	; 0x110
    2818:	ldr	r3, [r3, #40]	; 0x28
    281a:	mov	r1, r6
    281c:	blx	r3
    index_.read((char *)&ret, sizeof(ret));
    mtp_lock_storage(false);

    return ret;
  }
    281e:	mov	r0, r6
    2820:	add	sp, #8
    2822:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  Record MTPStorage_SD::ReadIndexRecord(uint32_t i) 
  {
    Record ret;
    memset(&ret, 0, sizeof(ret));
    if (i > index_entries_) 
    { memset(&ret, 0, sizeof(ret));
    2826:	mov.w	r2, #272	; 0x110
    282a:	movs	r1, #0
    282c:	mov	r0, r6
    282e:	bl	106cc <memset>
    index_.seek(sizeof(ret) * i);
    index_.read((char *)&ret, sizeof(ret));
    mtp_lock_storage(false);

    return ret;
  }
    2832:	mov	r0, r6
    2834:	add	sp, #8
    2836:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    283a:	ldr	r4, [r7, #40]	; 0x28
    283c:	ldr	r3, [pc, #92]	; (289c <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x20c>)
    283e:	cmp	r4, r3
    2840:	beq.n	281e <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x18e>
    2842:	mov.w	r2, #272	; 0x110
    2846:	mov	r1, r6
    2848:	blx	r4
    284a:	mov	r0, r6
    284c:	add	sp, #8
    284e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}
	virtual bool truncate(uint64_t size=0) {
		return (f) ? f->truncate(size) : false;
	}
	virtual bool seek(uint64_t pos, int mode) {
		return (f) ? f->seek(pos, mode) : false;
    2852:	str.w	ip, [sp]
    2856:	mov	r3, ip
    2858:	blx	r1
	unsigned int getRefcount() { // testing only
		return refcount;
	}
#endif
	virtual size_t read(void *buf, size_t nbyte) {
		return (f) ? f->read(buf, nbyte) : 0;
    285a:	ldr.w	r0, [r5, #184]	; 0xb8
    285e:	cmp	r0, #0
    2860:	beq.n	281e <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x18e>
    2862:	ldr	r2, [r0, #0]
    2864:	ldr	r3, [pc, #52]	; (289c <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x20c>)
    2866:	ldr	r4, [r2, #40]	; 0x28
    2868:	cmp	r4, r3
    286a:	bne.n	2842 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x1b2>
    286c:	ldr	r0, [r0, #16]
    286e:	cmp	r0, #0
    2870:	bne.n	27b0 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x120>
    2872:	b.n	281e <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x18e>
	}
	virtual bool truncate(uint64_t size=0) {
		return (f) ? f->truncate(size) : false;
	}
	virtual bool seek(uint64_t pos, int mode) {
		return (f) ? f->seek(pos, mode) : false;
    2874:	str.w	ip, [sp]
    2878:	mov	r3, ip
    287a:	mov	r0, lr
    287c:	blx	r8
    287e:	b.n	285a <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x1ca>
    2880:	str.w	ip, [sp]
    2884:	mov	r3, ip
    2886:	mov	r0, r1
    2888:	blx	r8
    288a:	b.n	285a <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x1ca>
    288c:	movs	r3, #0
    288e:	mov	r0, lr
    2890:	str	r3, [sp, #0]
    2892:	blx	r8
    2894:	b.n	285a <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x1ca>
    2896:	nop
    2898:	.word	0x000004c1
    289c:	.word	0x00000475

000028a0 <MTPStorage_SD::GetNextObjectHandle(unsigned long)>:
      next_ = 1;
    }
  }

  uint32_t MTPStorage_SD::GetNextObjectHandle(uint32_t  store)
  {
    28a0:	push	{r4, r5, lr}
    while (true) 
    { if (next_ == 0) return 0;
    28a2:	ldr.w	r5, [r0, #252]	; 0xfc
      next_ = 1;
    }
  }

  uint32_t MTPStorage_SD::GetNextObjectHandle(uint32_t  store)
  {
    28a6:	sub	sp, #276	; 0x114
    28a8:	mov	r4, r0
    while (true) 
    { if (next_ == 0) return 0;
    28aa:	cbnz	r5, 28c0 <MTPStorage_SD::GetNextObjectHandle(unsigned long)+0x20>
    28ac:	b.n	28f6 <MTPStorage_SD::GetNextObjectHandle(unsigned long)+0x56>

      int ret = next_;
      Record r = ReadIndexRecord(ret);
      if (follow_sibling_) 
      { next_ = r.sibling;
    28ae:	ldr	r3, [sp, #8]
    28b0:	str.w	r3, [r4, #252]	; 0xfc
      } 
      else 
      { next_++;
        if (next_ >= index_entries_) next_ = 0;
      }
      if (r.name[0]) return ret;
    28b4:	ldrb.w	r3, [sp, #16]
    28b8:	cbnz	r3, 28f0 <MTPStorage_SD::GetNextObjectHandle(unsigned long)+0x50>
  }

  uint32_t MTPStorage_SD::GetNextObjectHandle(uint32_t  store)
  {
    while (true) 
    { if (next_ == 0) return 0;
    28ba:	ldr.w	r5, [r4, #252]	; 0xfc
    28be:	cbz	r5, 28f6 <MTPStorage_SD::GetNextObjectHandle(unsigned long)+0x56>

      int ret = next_;
      Record r = ReadIndexRecord(ret);
    28c0:	mov	r2, r5
    28c2:	mov	r1, r4
    28c4:	mov	r0, sp
    28c6:	bl	2690 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
      if (follow_sibling_) 
    28ca:	ldrb.w	r2, [r4, #256]	; 0x100
    28ce:	cmp	r2, #0
    28d0:	bne.n	28ae <MTPStorage_SD::GetNextObjectHandle(unsigned long)+0xe>
      { next_ = r.sibling;
      } 
      else 
      { next_++;
    28d2:	ldr.w	r3, [r4, #252]	; 0xfc
        if (next_ >= index_entries_) next_ = 0;
    28d6:	ldr.w	r1, [r4, #244]	; 0xf4
      Record r = ReadIndexRecord(ret);
      if (follow_sibling_) 
      { next_ = r.sibling;
      } 
      else 
      { next_++;
    28da:	adds	r3, #1
    28dc:	str.w	r3, [r4, #252]	; 0xfc
        if (next_ >= index_entries_) next_ = 0;
    28e0:	cmp	r3, r1
      }
      if (r.name[0]) return ret;
    28e2:	ldrb.w	r3, [sp, #16]
      if (follow_sibling_) 
      { next_ = r.sibling;
      } 
      else 
      { next_++;
        if (next_ >= index_entries_) next_ = 0;
    28e6:	it	cs
    28e8:	strcs.w	r2, [r4, #252]	; 0xfc
      }
      if (r.name[0]) return ret;
    28ec:	cmp	r3, #0
    28ee:	beq.n	28ba <MTPStorage_SD::GetNextObjectHandle(unsigned long)+0x1a>
    }
  }
    28f0:	mov	r0, r5
    28f2:	add	sp, #276	; 0x114
    28f4:	pop	{r4, r5, pc}
  }

  uint32_t MTPStorage_SD::GetNextObjectHandle(uint32_t  store)
  {
    while (true) 
    { if (next_ == 0) return 0;
    28f6:	movs	r5, #0
      { next_++;
        if (next_ >= index_entries_) next_ = 0;
      }
      if (r.name[0]) return ret;
    }
  }
    28f8:	mov	r0, r5
    28fa:	add	sp, #276	; 0x114
    28fc:	pop	{r4, r5, pc}
    28fe:	nop

00002900 <MTPStorage_SD::GetObjectInfo(unsigned long, char*, unsigned long*, unsigned long*, unsigned short*)>:

  void MTPStorage_SD::GetObjectInfo(uint32_t handle, char* name, uint32_t* size, uint32_t* parent, uint16_t *store)
  {
    2900:	push	{r4, r5, r6, r7, lr}
    2902:	sub	sp, #276	; 0x114
    2904:	mov	r7, r2
    Record r = ReadIndexRecord(handle);
    2906:	mov	r2, r1
    2908:	mov	r1, r0
    290a:	mov	r0, sp
      if (r.name[0]) return ret;
    }
  }

  void MTPStorage_SD::GetObjectInfo(uint32_t handle, char* name, uint32_t* size, uint32_t* parent, uint16_t *store)
  {
    290c:	mov	r5, r3
    290e:	ldr	r6, [sp, #296]	; 0x128
    2910:	ldr	r4, [sp, #300]	; 0x12c
    Record r = ReadIndexRecord(handle);
    2912:	bl	2690 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    strcpy(name, r.name);
    2916:	mov	r0, r7
    2918:	add	r1, sp, #16
    291a:	bl	10bc0 <strcpy>
    *parent = r.parent;
    *size = r.isdir ? 0xFFFFFFFFUL : r.child;
    291e:	ldrb.w	r3, [sp, #12]

  void MTPStorage_SD::GetObjectInfo(uint32_t handle, char* name, uint32_t* size, uint32_t* parent, uint16_t *store)
  {
    Record r = ReadIndexRecord(handle);
    strcpy(name, r.name);
    *parent = r.parent;
    2922:	ldr	r2, [sp, #0]
    2924:	str	r2, [r6, #0]
    *size = r.isdir ? 0xFFFFFFFFUL : r.child;
    2926:	cbnz	r3, 2936 <MTPStorage_SD::GetObjectInfo(unsigned long, char*, unsigned long*, unsigned long*, unsigned short*)+0x36>
    2928:	ldr	r3, [sp, #4]
    *store = r.store;
    292a:	ldrh.w	r2, [sp, #14]
  void MTPStorage_SD::GetObjectInfo(uint32_t handle, char* name, uint32_t* size, uint32_t* parent, uint16_t *store)
  {
    Record r = ReadIndexRecord(handle);
    strcpy(name, r.name);
    *parent = r.parent;
    *size = r.isdir ? 0xFFFFFFFFUL : r.child;
    292e:	str	r3, [r5, #0]
    *store = r.store;
    2930:	strh	r2, [r4, #0]
  }
    2932:	add	sp, #276	; 0x114
    2934:	pop	{r4, r5, r6, r7, pc}
  void MTPStorage_SD::GetObjectInfo(uint32_t handle, char* name, uint32_t* size, uint32_t* parent, uint16_t *store)
  {
    Record r = ReadIndexRecord(handle);
    strcpy(name, r.name);
    *parent = r.parent;
    *size = r.isdir ? 0xFFFFFFFFUL : r.child;
    2936:	mov.w	r3, #4294967295
    293a:	b.n	292a <MTPStorage_SD::GetObjectInfo(unsigned long, char*, unsigned long*, unsigned long*, unsigned short*)+0x2a>

0000293c <MTPStorage_SD::GetSize(unsigned long)>:
    *store = r.store;
  }

  uint32_t MTPStorage_SD::GetSize(uint32_t handle) 
  {
    293c:	push	{lr}
    293e:	sub	sp, #276	; 0x114
    return ReadIndexRecord(handle).child;
    2940:	mov	r2, r1
    2942:	mov	r1, r0
    2944:	mov	r0, sp
    2946:	bl	2690 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
  }
    294a:	ldr	r0, [sp, #4]
    294c:	add	sp, #276	; 0x114
    294e:	ldr.w	pc, [sp], #4
    2952:	nop

00002954 <MTPStorage_SD::close()>:
      mtp_lock_storage(false);
      return ret;
  }

  void MTPStorage_SD::close() 
  {
    2954:	push	{r4, r5, r6, lr}
	}
	virtual uint64_t position() {
		return (f) ? f->position() : 0;
	}
	virtual uint64_t size() {
		return (f) ? f->size() : 0;
    2956:	ldr.w	r3, [r0, #204]	; 0xcc
    295a:	sub	sp, #272	; 0x110
    295c:	mov	r4, r0
    295e:	cmp	r3, #0
    2960:	beq.n	29fc <MTPStorage_SD::close()+0xa8>
    2962:	ldr	r5, [r3, #0]
    2964:	ldr	r1, [pc, #384]	; (2ae8 <MTPStorage_SD::close()+0x194>)
    2966:	ldr	r2, [r5, #60]	; 0x3c
    2968:	cmp	r2, r1
    296a:	bne.w	2adc <MTPStorage_SD::close()+0x188>
    296e:	ldr	r2, [r3, #16]
    2970:	cmp	r2, #0
    2972:	beq.w	2acc <MTPStorage_SD::close()+0x178>
    2976:	ldr	r0, [r2, #0]
    2978:	ldr	r6, [r0, #60]	; 0x3c
    297a:	cmp	r6, r1
    297c:	bne.n	2a24 <MTPStorage_SD::close()+0xd0>
    297e:	ldr	r0, [r2, #16]
    2980:	cmp	r0, #0
    2982:	beq.n	29ee <MTPStorage_SD::close()+0x9a>
    2984:	ldr	r6, [r0, #0]
    2986:	ldr	r6, [r6, #60]	; 0x3c
    2988:	cmp	r6, r1
    298a:	bne.n	2a26 <MTPStorage_SD::close()+0xd2>
    298c:	ldr	r0, [r0, #16]
    298e:	cmp	r0, #0
    2990:	beq.n	29ee <MTPStorage_SD::close()+0x9a>
    2992:	ldr	r6, [r0, #0]
    2994:	ldr	r6, [r6, #60]	; 0x3c
    2996:	cmp	r6, r1
    2998:	bne.n	2a26 <MTPStorage_SD::close()+0xd2>
    299a:	ldr	r0, [r0, #16]
    299c:	cbz	r0, 29ee <MTPStorage_SD::close()+0x9a>
    299e:	ldr	r6, [r0, #0]
    29a0:	ldr	r6, [r6, #60]	; 0x3c
    29a2:	cmp	r6, r1
    29a4:	bne.n	2a26 <MTPStorage_SD::close()+0xd2>
    29a6:	ldr	r0, [r0, #16]
    29a8:	cbz	r0, 29ee <MTPStorage_SD::close()+0x9a>
    29aa:	ldr	r6, [r0, #0]
    29ac:	ldr	r6, [r6, #60]	; 0x3c
    29ae:	cmp	r6, r1
    29b0:	bne.n	2a26 <MTPStorage_SD::close()+0xd2>
    29b2:	ldr	r0, [r0, #16]
    29b4:	cbz	r0, 29ee <MTPStorage_SD::close()+0x9a>
    29b6:	ldr	r6, [r0, #0]
    29b8:	ldr	r6, [r6, #60]	; 0x3c
    29ba:	cmp	r6, r1
    29bc:	bne.n	2a26 <MTPStorage_SD::close()+0xd2>
    29be:	ldr	r0, [r0, #16]
    29c0:	cbz	r0, 29ee <MTPStorage_SD::close()+0x9a>
    29c2:	ldr	r6, [r0, #0]
    29c4:	ldr	r6, [r6, #60]	; 0x3c
    29c6:	cmp	r6, r1
    29c8:	bne.n	2a26 <MTPStorage_SD::close()+0xd2>
    29ca:	ldr	r0, [r0, #16]
    29cc:	cbz	r0, 29ee <MTPStorage_SD::close()+0x9a>
    29ce:	ldr	r6, [r0, #0]
    29d0:	ldr	r6, [r6, #60]	; 0x3c
    29d2:	cmp	r6, r1
    29d4:	bne.n	2a26 <MTPStorage_SD::close()+0xd2>
    29d6:	ldr	r0, [r0, #16]
    29d8:	cbz	r0, 29ee <MTPStorage_SD::close()+0x9a>
    29da:	ldr	r6, [r0, #0]
    29dc:	ldr	r6, [r6, #60]	; 0x3c
    29de:	cmp	r6, r1
    29e0:	bne.n	2a26 <MTPStorage_SD::close()+0xd2>
    29e2:	ldr	r0, [r0, #16]
    29e4:	cbz	r0, 29ee <MTPStorage_SD::close()+0x9a>
    29e6:	ldr	r3, [r0, #0]
    29e8:	ldr	r3, [r3, #60]	; 0x3c
    29ea:	blx	r3
    29ec:	b.n	2a28 <MTPStorage_SD::close()+0xd4>
	}
	virtual void close() {
		if (f) f->close();
    29ee:	ldr	r6, [r5, #64]	; 0x40
    29f0:	ldr	r1, [pc, #248]	; (2aec <MTPStorage_SD::close()+0x198>)
    29f2:	cmp	r6, r1
    29f4:	bne.n	2ae2 <MTPStorage_SD::close()+0x18e>
    29f6:	mov	r0, r2
    29f8:	movs	r5, #0
    29fa:	b.n	2a42 <MTPStorage_SD::close()+0xee>
    mtp_lock_storage(true);
    uint32_t size = (uint32_t) file_.size();
    29fc:	mov	r5, r3
    file_.close();
    mtp_lock_storage(false);
    //
    // update record with file size
    Record r = ReadIndexRecord(open_file_);
    29fe:	mov	r0, sp
    2a00:	ldr.w	r2, [r4, #240]	; 0xf0
    2a04:	mov	r1, r4
    2a06:	bl	2690 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    r.child = size;
    WriteIndexRecord(open_file_, r);
    2a0a:	mov	r2, sp
    2a0c:	ldr.w	r1, [r4, #240]	; 0xf0
    file_.close();
    mtp_lock_storage(false);
    //
    // update record with file size
    Record r = ReadIndexRecord(open_file_);
    r.child = size;
    2a10:	str	r5, [sp, #4]
    WriteIndexRecord(open_file_, r);
    2a12:	mov	r0, r4
    2a14:	bl	24b0 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    open_file_ = 0xFFFFFFFEUL;
    2a18:	mvn.w	r3, #1
    2a1c:	str.w	r3, [r4, #240]	; 0xf0
  }
    2a20:	add	sp, #272	; 0x110
    2a22:	pop	{r4, r5, r6, pc}
	}
	virtual uint64_t position() {
		return (f) ? f->position() : 0;
	}
	virtual uint64_t size() {
		return (f) ? f->size() : 0;
    2a24:	mov	r0, r2
    2a26:	blx	r6
	}
	virtual void close() {
		if (f) f->close();
    2a28:	ldr.w	r3, [r4, #204]	; 0xcc
  }

  void MTPStorage_SD::close() 
  {
    mtp_lock_storage(true);
    uint32_t size = (uint32_t) file_.size();
    2a2c:	mov	r5, r0
    2a2e:	cmp	r3, #0
    2a30:	beq.n	29fe <MTPStorage_SD::close()+0xaa>
    2a32:	ldr	r2, [r3, #0]
    2a34:	ldr	r1, [pc, #180]	; (2aec <MTPStorage_SD::close()+0x198>)
    2a36:	ldr	r6, [r2, #64]	; 0x40
    2a38:	cmp	r6, r1
    2a3a:	bne.n	2ad6 <MTPStorage_SD::close()+0x182>
    2a3c:	ldr	r0, [r3, #16]
    2a3e:	cmp	r0, #0
    2a40:	beq.n	29fe <MTPStorage_SD::close()+0xaa>
    2a42:	ldr	r3, [r0, #0]
    2a44:	ldr	r3, [r3, #64]	; 0x40
    2a46:	cmp	r3, r1
    2a48:	bne.n	2ac8 <MTPStorage_SD::close()+0x174>
    2a4a:	ldr	r0, [r0, #16]
    2a4c:	cmp	r0, #0
    2a4e:	beq.n	29fe <MTPStorage_SD::close()+0xaa>
    2a50:	ldr	r3, [r0, #0]
    2a52:	ldr	r3, [r3, #64]	; 0x40
    2a54:	cmp	r3, r1
    2a56:	bne.n	2ac8 <MTPStorage_SD::close()+0x174>
    2a58:	ldr	r0, [r0, #16]
    2a5a:	cmp	r0, #0
    2a5c:	beq.n	29fe <MTPStorage_SD::close()+0xaa>
    2a5e:	ldr	r3, [r0, #0]
    2a60:	ldr	r3, [r3, #64]	; 0x40
    2a62:	cmp	r3, r1
    2a64:	bne.n	2ac8 <MTPStorage_SD::close()+0x174>
    2a66:	ldr	r0, [r0, #16]
    2a68:	cmp	r0, #0
    2a6a:	beq.n	29fe <MTPStorage_SD::close()+0xaa>
    2a6c:	ldr	r3, [r0, #0]
    2a6e:	ldr	r3, [r3, #64]	; 0x40
    2a70:	cmp	r3, r1
    2a72:	bne.n	2ac8 <MTPStorage_SD::close()+0x174>
    2a74:	ldr	r0, [r0, #16]
    2a76:	cmp	r0, #0
    2a78:	beq.n	29fe <MTPStorage_SD::close()+0xaa>
    2a7a:	ldr	r3, [r0, #0]
    2a7c:	ldr	r3, [r3, #64]	; 0x40
    2a7e:	cmp	r3, r1
    2a80:	bne.n	2ac8 <MTPStorage_SD::close()+0x174>
    2a82:	ldr	r0, [r0, #16]
    2a84:	cmp	r0, #0
    2a86:	beq.n	29fe <MTPStorage_SD::close()+0xaa>
    2a88:	ldr	r3, [r0, #0]
    2a8a:	ldr	r3, [r3, #64]	; 0x40
    2a8c:	cmp	r3, r1
    2a8e:	bne.n	2ac8 <MTPStorage_SD::close()+0x174>
    2a90:	ldr	r0, [r0, #16]
    2a92:	cmp	r0, #0
    2a94:	beq.n	29fe <MTPStorage_SD::close()+0xaa>
    2a96:	ldr	r3, [r0, #0]
    2a98:	ldr	r3, [r3, #64]	; 0x40
    2a9a:	cmp	r3, r1
    2a9c:	bne.n	2ac8 <MTPStorage_SD::close()+0x174>
    2a9e:	ldr	r0, [r0, #16]
    2aa0:	cmp	r0, #0
    2aa2:	beq.n	29fe <MTPStorage_SD::close()+0xaa>
    2aa4:	ldr	r3, [r0, #0]
    2aa6:	ldr	r3, [r3, #64]	; 0x40
    2aa8:	cmp	r3, r1
    2aaa:	bne.n	2ac8 <MTPStorage_SD::close()+0x174>
    2aac:	ldr	r0, [r0, #16]
    2aae:	cmp	r0, #0
    2ab0:	beq.n	29fe <MTPStorage_SD::close()+0xaa>
    2ab2:	ldr	r3, [r0, #0]
    2ab4:	ldr	r3, [r3, #64]	; 0x40
    2ab6:	cmp	r3, r1
    2ab8:	bne.n	2ac8 <MTPStorage_SD::close()+0x174>
    2aba:	ldr	r0, [r0, #16]
    2abc:	cmp	r0, #0
    2abe:	beq.n	29fe <MTPStorage_SD::close()+0xaa>
    2ac0:	ldr	r3, [r0, #0]
    2ac2:	ldr	r3, [r3, #64]	; 0x40
    2ac4:	blx	r3
    2ac6:	b.n	29fe <MTPStorage_SD::close()+0xaa>
    2ac8:	blx	r3
    2aca:	b.n	29fe <MTPStorage_SD::close()+0xaa>
    2acc:	ldr	r6, [r5, #64]	; 0x40
    2ace:	ldr	r1, [pc, #28]	; (2aec <MTPStorage_SD::close()+0x198>)
    2ad0:	cmp	r6, r1
    2ad2:	mov	r5, r2
    2ad4:	beq.n	29fe <MTPStorage_SD::close()+0xaa>
    2ad6:	mov	r0, r3
    2ad8:	blx	r6
    2ada:	b.n	29fe <MTPStorage_SD::close()+0xaa>
	}
	virtual uint64_t position() {
		return (f) ? f->position() : 0;
	}
	virtual uint64_t size() {
		return (f) ? f->size() : 0;
    2adc:	mov	r0, r3
    2ade:	blx	r2
    2ae0:	b.n	2a28 <MTPStorage_SD::close()+0xd4>
	}
	virtual void close() {
		if (f) f->close();
    2ae2:	movs	r5, #0
    2ae4:	b.n	2ad6 <MTPStorage_SD::close()+0x182>
    2ae6:	nop
    2ae8:	.word	0x000004e5
    2aec:	.word	0x000004f5

00002af0 <MTPStorage_SD::ConstructFilename(int, char*, int)>:

    return ret;
  }

  uint16_t MTPStorage_SD::ConstructFilename(int i, char* out, int len) // construct filename rexursively
  {
    2af0:	push	{r4, r5, r6, lr}
    2af2:	mov	r6, r0
    2af4:	sub	sp, #272	; 0x110
    2af6:	mov	r4, r2
    Record tmp = ReadIndexRecord(i);
    2af8:	mov	r0, sp
    2afa:	mov	r2, r1
    2afc:	mov	r1, r6

    return ret;
  }

  uint16_t MTPStorage_SD::ConstructFilename(int i, char* out, int len) // construct filename rexursively
  {
    2afe:	mov	r5, r3
    Record tmp = ReadIndexRecord(i);
    2b00:	bl	2690 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
      
    if (tmp.parent==0xFFFFFFFFUL) //flags the root object
    2b04:	ldr	r1, [sp, #0]
    2b06:	adds	r3, r1, #1
    2b08:	beq.n	2b40 <MTPStorage_SD::ConstructFilename(int, char*, int)+0x50>
    { strcpy(out, "/");
      return tmp.store;
    }
    else 
    { ConstructFilename(tmp.parent, out, len);
    2b0a:	mov	r3, r5
    2b0c:	mov	r2, r4
    2b0e:	mov	r0, r6
    2b10:	bl	2af0 <MTPStorage_SD::ConstructFilename(int, char*, int)>
      if (out[strlen(out)-1] != '/') strlcat(out, "/",len);
    2b14:	mov	r0, r4
    2b16:	bl	10d00 <strlen>
    2b1a:	add	r0, r4
    2b1c:	ldrb.w	r3, [r0, #-1]
    2b20:	cmp	r3, #47	; 0x2f
    2b22:	beq.n	2b2e <MTPStorage_SD::ConstructFilename(int, char*, int)+0x3e>
    2b24:	mov	r2, r5
    2b26:	ldr	r1, [pc, #40]	; (2b50 <MTPStorage_SD::ConstructFilename(int, char*, int)+0x60>)
    2b28:	mov	r0, r4
    2b2a:	bl	10c7c <strlcat>
      strlcat(out, tmp.name,len);
    2b2e:	mov	r2, r5
    2b30:	mov	r0, r4
    2b32:	add	r1, sp, #16
    2b34:	bl	10c7c <strlcat>
      return tmp.store;
    2b38:	ldrh.w	r0, [sp, #14]
    }
  }
    2b3c:	add	sp, #272	; 0x110
    2b3e:	pop	{r4, r5, r6, pc}
  uint16_t MTPStorage_SD::ConstructFilename(int i, char* out, int len) // construct filename rexursively
  {
    Record tmp = ReadIndexRecord(i);
      
    if (tmp.parent==0xFFFFFFFFUL) //flags the root object
    { strcpy(out, "/");
    2b40:	ldr	r3, [pc, #12]	; (2b50 <MTPStorage_SD::ConstructFilename(int, char*, int)+0x60>)
      return tmp.store;
    2b42:	ldrh.w	r0, [sp, #14]
  uint16_t MTPStorage_SD::ConstructFilename(int i, char* out, int len) // construct filename rexursively
  {
    Record tmp = ReadIndexRecord(i);
      
    if (tmp.parent==0xFFFFFFFFUL) //flags the root object
    { strcpy(out, "/");
    2b46:	ldrh	r3, [r3, #0]
    2b48:	strh	r3, [r4, #0]
    { ConstructFilename(tmp.parent, out, len);
      if (out[strlen(out)-1] != '/') strlcat(out, "/",len);
      strlcat(out, tmp.name,len);
      return tmp.store;
    }
  }
    2b4a:	add	sp, #272	; 0x110
    2b4c:	pop	{r4, r5, r6, pc}
    2b4e:	nop
    2b50:	.word	0x0001448c

00002b54 <MTPStorage_SD::rename(unsigned long, char const*)>:
    WriteIndexRecord(open_file_, r);
    open_file_ = 0xFFFFFFFEUL;
  }

  bool MTPStorage_SD::rename(uint32_t handle, const char* name) 
  { char oldName[MAX_FILENAME_LEN];
    2b54:	push	{r4, r5, r6, r7, lr}
    2b56:	subw	sp, sp, #1044	; 0x414
    char newName[MAX_FILENAME_LEN];
    char temp[MAX_FILENAME_LEN];

    uint16_t store = ConstructFilename(handle, oldName, MAX_FILENAME_LEN);
    2b5a:	mov.w	r3, #256	; 0x100
    WriteIndexRecord(open_file_, r);
    open_file_ = 0xFFFFFFFEUL;
  }

  bool MTPStorage_SD::rename(uint32_t handle, const char* name) 
  { char oldName[MAX_FILENAME_LEN];
    2b5e:	mov	r7, r2
    char newName[MAX_FILENAME_LEN];
    char temp[MAX_FILENAME_LEN];

    uint16_t store = ConstructFilename(handle, oldName, MAX_FILENAME_LEN);
    2b60:	mov	r2, sp
    WriteIndexRecord(open_file_, r);
    open_file_ = 0xFFFFFFFEUL;
  }

  bool MTPStorage_SD::rename(uint32_t handle, const char* name) 
  { char oldName[MAX_FILENAME_LEN];
    2b62:	mov	r5, r1
    2b64:	mov	r4, r0
    char newName[MAX_FILENAME_LEN];
    char temp[MAX_FILENAME_LEN];

    uint16_t store = ConstructFilename(handle, oldName, MAX_FILENAME_LEN);
    2b66:	bl	2af0 <MTPStorage_SD::ConstructFilename(int, char*, int)>
    2b6a:	mov	r6, r0
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
    2b6c:	mov	r0, sp
    2b6e:	bl	10d00 <strlen>
    2b72:	mov	r1, r0
    2b74:	mov	r0, sp
    2b76:	bl	cd74 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    2b7a:	ldr	r0, [pc, #132]	; (2c00 <MTPStorage_SD::rename(unsigned long, char const*)+0xac>)
    2b7c:	bl	e7ac <Print::println()>
    Serial.println(oldName);

    Record p1 = ReadIndexRecord(handle);
    2b80:	mov	r2, r5
    2b82:	mov	r1, r4
    2b84:	add	r0, sp, #768	; 0x300
    2b86:	bl	2690 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    strlcpy(temp,p1.name,MAX_FILENAME_LEN);
    2b8a:	add	r1, sp, #784	; 0x310
    2b8c:	mov.w	r2, #256	; 0x100
    2b90:	add	r0, sp, #512	; 0x200
    2b92:	bl	10cd0 <strlcpy>
    strlcpy(p1.name,name,MAX_FILENAME_LEN);
    2b96:	mov	r1, r7
    2b98:	mov.w	r2, #256	; 0x100
    2b9c:	add	r0, sp, #784	; 0x310
    2b9e:	bl	10cd0 <strlcpy>

    WriteIndexRecord(handle, p1);
    2ba2:	add	r2, sp, #768	; 0x300
    2ba4:	mov	r1, r5
    2ba6:	mov	r0, r4
    2ba8:	bl	24b0 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    ConstructFilename(handle, newName, MAX_FILENAME_LEN);
    2bac:	add	r2, sp, #256	; 0x100
    2bae:	mov.w	r3, #256	; 0x100
    2bb2:	mov	r1, r5
    2bb4:	mov	r0, r4
    2bb6:	bl	2af0 <MTPStorage_SD::ConstructFilename(int, char*, int)>
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
    2bba:	add	r0, sp, #256	; 0x100
    2bbc:	bl	10d00 <strlen>
    uint32_t sd_getFSCount(void) {return fsCount;}
    const char *sd_getFSName(uint32_t store) { return sd_name[store];}

    File sd_open(uint32_t store, const char *filename, uint32_t mode) { return sdx[store]->open(filename,mode);  }
    bool sd_mkdir(uint32_t store, char *filename) {  return sdx[store]->mkdir(filename);  }
    bool sd_rename(uint32_t store, char *oldfilename, char *newfilename) { return sdx[store]->rename(oldfilename,newfilename);  }
    2bc0:	add.w	r6, r4, r6, lsl #2
    2bc4:	mov	r1, r0
    2bc6:	add	r0, sp, #256	; 0x100
    2bc8:	bl	cd74 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    2bcc:	ldr	r0, [pc, #48]	; (2c00 <MTPStorage_SD::rename(unsigned long, char const*)+0xac>)
    2bce:	bl	e7ac <Print::println()>
    2bd2:	ldr	r0, [r6, #88]	; 0x58
    2bd4:	ldr	r3, [r0, #0]
    2bd6:	add	r2, sp, #256	; 0x100
    2bd8:	mov	r1, sp
    2bda:	ldr	r3, [r3, #12]
    2bdc:	blx	r3
    Serial.println(newName);

    if (sd_rename(store,oldName,newName)) return true;
    2bde:	mov	r6, r0
    2be0:	cbnz	r0, 2bf8 <MTPStorage_SD::rename(unsigned long, char const*)+0xa4>

    // rename failed; undo index update
    strlcpy(p1.name,temp,MAX_FILENAME_LEN);
    2be2:	add	r1, sp, #512	; 0x200
    2be4:	mov.w	r2, #256	; 0x100
    2be8:	add	r0, sp, #784	; 0x310
    2bea:	bl	10cd0 <strlcpy>
    WriteIndexRecord(handle, p1);
    2bee:	add	r2, sp, #768	; 0x300
    2bf0:	mov	r1, r5
    2bf2:	mov	r0, r4
    2bf4:	bl	24b0 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    return false;
  }
    2bf8:	mov	r0, r6
    2bfa:	addw	sp, sp, #1044	; 0x414
    2bfe:	pop	{r4, r5, r6, r7, pc}
    2c00:	.word	0x1fff8d50

00002c04 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)>:
      return tmp.store;
    }
  }

  void MTPStorage_SD::OpenFileByIndex(uint32_t i, uint32_t mode) 
  {
    2c04:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (open_file_ == i && mode_ == mode) return;
    2c08:	ldr.w	r3, [r0, #240]	; 0xf0
    2c0c:	cmp	r3, r1
      return tmp.store;
    }
  }

  void MTPStorage_SD::OpenFileByIndex(uint32_t i, uint32_t mode) 
  {
    2c0e:	sub	sp, #292	; 0x124
    if (open_file_ == i && mode_ == mode) return;
    2c10:	beq.w	3008 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x404>
    2c14:	mov	r6, r2
    char filename[MAX_FILENAME_LEN];
    uint16_t store = ConstructFilename(i, filename, MAX_FILENAME_LEN);
    2c16:	mov.w	r3, #256	; 0x100
    2c1a:	add	r2, sp, #32
    2c1c:	mov	r4, r0
    2c1e:	mov	r5, r1
    2c20:	bl	2af0 <MTPStorage_SD::ConstructFilename(int, char*, int)>
    2c24:	mov	r7, r0
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
    2c26:	ldr.w	r0, [r4, #204]	; 0xcc
    2c2a:	cmp	r0, #0
    2c2c:	beq.w	2d40 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x13c>
    2c30:	ldr	r2, [r0, #0]
    2c32:	ldr	r3, [pc, #348]	; (2d90 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x18c>)
    2c34:	ldr	r2, [r2, #68]	; 0x44
    2c36:	cmp	r2, r3
    2c38:	bne.w	3018 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x414>
    2c3c:	ldr	r0, [r0, #16]
    2c3e:	cmp	r0, #0
    2c40:	beq.n	2d40 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x13c>
    2c42:	ldr	r2, [r0, #0]
    2c44:	ldr	r2, [r2, #68]	; 0x44
    2c46:	cmp	r2, r3
    2c48:	bne.w	3018 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x414>
    2c4c:	ldr	r0, [r0, #16]
    2c4e:	cmp	r0, #0
    2c50:	beq.n	2d40 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x13c>
    2c52:	ldr	r2, [r0, #0]
    2c54:	ldr	r2, [r2, #68]	; 0x44
    2c56:	cmp	r2, r3
    2c58:	bne.w	3018 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x414>
    2c5c:	ldr	r0, [r0, #16]
    2c5e:	cmp	r0, #0
    2c60:	beq.n	2d40 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x13c>
    2c62:	ldr	r2, [r0, #0]
    2c64:	ldr	r2, [r2, #68]	; 0x44
    2c66:	cmp	r2, r3
    2c68:	bne.w	3018 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x414>
    2c6c:	ldr	r0, [r0, #16]
    2c6e:	cmp	r0, #0
    2c70:	beq.n	2d40 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x13c>
    2c72:	ldr	r2, [r0, #0]
    2c74:	ldr	r2, [r2, #68]	; 0x44
    2c76:	cmp	r2, r3
    2c78:	bne.w	3018 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x414>
    2c7c:	ldr	r0, [r0, #16]
    2c7e:	cmp	r0, #0
    2c80:	beq.n	2d40 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x13c>
    2c82:	ldr	r2, [r0, #0]
    2c84:	ldr	r2, [r2, #68]	; 0x44
    2c86:	cmp	r2, r3
    2c88:	bne.w	3018 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x414>
    2c8c:	ldr	r0, [r0, #16]
    2c8e:	cmp	r0, #0
    2c90:	beq.n	2d40 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x13c>
    2c92:	ldr	r2, [r0, #0]
    2c94:	ldr	r2, [r2, #68]	; 0x44
    2c96:	cmp	r2, r3
    2c98:	bne.w	3018 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x414>
    2c9c:	ldr	r0, [r0, #16]
    2c9e:	cmp	r0, #0
    2ca0:	beq.n	2d40 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x13c>
    2ca2:	ldr	r2, [r0, #0]
    2ca4:	ldr	r2, [r2, #68]	; 0x44
    2ca6:	cmp	r2, r3
    2ca8:	bne.w	3018 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x414>
    2cac:	ldr	r0, [r0, #16]
    2cae:	cmp	r0, #0
    2cb0:	beq.n	2d40 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x13c>
    2cb2:	ldr	r2, [r0, #0]
    2cb4:	ldr	r2, [r2, #68]	; 0x44
    2cb6:	cmp	r2, r3
    2cb8:	bne.w	3018 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x414>
    2cbc:	ldr	r0, [r0, #16]
    2cbe:	cmp	r0, #0
    2cc0:	beq.n	2d40 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x13c>
    2cc2:	ldr	r3, [r0, #0]
    2cc4:	ldr	r3, [r3, #68]	; 0x44
    2cc6:	blx	r3

    mtp_lock_storage(true);
    if(sd_isOpen(file_)) file_.close();
    2cc8:	cmp	r0, #0
    2cca:	beq.n	2d40 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x13c>
	}
	virtual uint64_t size() {
		return (f) ? f->size() : 0;
	}
	virtual void close() {
		if (f) f->close();
    2ccc:	ldr.w	r0, [r4, #204]	; 0xcc
    2cd0:	cmp	r0, #0
    2cd2:	beq.n	2d40 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x13c>
    2cd4:	ldr	r2, [r0, #0]
    2cd6:	ldr	r3, [pc, #188]	; (2d94 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x190>)
    2cd8:	ldr	r2, [r2, #64]	; 0x40
    2cda:	cmp	r2, r3
    2cdc:	bne.w	301c <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x418>
    2ce0:	ldr	r0, [r0, #16]
    2ce2:	cmp	r0, #0
    2ce4:	beq.n	2d40 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x13c>
    2ce6:	ldr	r2, [r0, #0]
    2ce8:	ldr	r2, [r2, #64]	; 0x40
    2cea:	cmp	r2, r3
    2cec:	bne.w	301c <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x418>
    2cf0:	ldr	r0, [r0, #16]
    2cf2:	cbz	r0, 2d40 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x13c>
    2cf4:	ldr	r2, [r0, #0]
    2cf6:	ldr	r2, [r2, #64]	; 0x40
    2cf8:	cmp	r2, r3
    2cfa:	bne.w	301c <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x418>
    2cfe:	ldr	r0, [r0, #16]
    2d00:	cbz	r0, 2d40 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x13c>
    2d02:	ldr	r2, [r0, #0]
    2d04:	ldr	r2, [r2, #64]	; 0x40
    2d06:	cmp	r2, r3
    2d08:	bne.w	301c <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x418>
    2d0c:	ldr	r0, [r0, #16]
    2d0e:	cbz	r0, 2d40 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x13c>
    2d10:	ldr	r2, [r0, #0]
    2d12:	ldr	r2, [r2, #64]	; 0x40
    2d14:	cmp	r2, r3
    2d16:	bne.w	301c <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x418>
    2d1a:	ldr	r0, [r0, #16]
    2d1c:	cbz	r0, 2d40 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x13c>
    2d1e:	ldr	r2, [r0, #0]
    2d20:	ldr	r2, [r2, #64]	; 0x40
    2d22:	cmp	r2, r3
    2d24:	bne.w	301c <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x418>
    2d28:	ldr	r0, [r0, #16]
    2d2a:	cbz	r0, 2d40 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x13c>
    2d2c:	ldr	r2, [r0, #0]
    2d2e:	ldr	r2, [r2, #64]	; 0x40
    2d30:	cmp	r2, r3
    2d32:	bne.w	301c <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x418>
    2d36:	ldr	r0, [r0, #16]
    2d38:	cbz	r0, 2d40 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x13c>
    2d3a:	ldr	r3, [r0, #0]
    2d3c:	ldr	r3, [r3, #64]	; 0x40
    2d3e:	blx	r3
    }

    uint32_t sd_getFSCount(void) {return fsCount;}
    const char *sd_getFSName(uint32_t store) { return sd_name[store];}

    File sd_open(uint32_t store, const char *filename, uint32_t mode) { return sdx[store]->open(filename,mode);  }
    2d40:	add.w	r7, r4, r7, lsl #2
    2d44:	add	r2, sp, #32
    2d46:	ldr	r1, [r7, #88]	; 0x58
    2d48:	ldr	r3, [r1, #0]
    2d4a:	add	r0, sp, #12
    2d4c:	ldr	r7, [r3, #0]
    2d4e:	uxtb	r3, r6
    2d50:	blx	r7
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    2d52:	ldr.w	r2, [r4, #204]	; 0xcc
    2d56:	cbz	r2, 2d60 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x15c>
    2d58:	ldr	r3, [r2, #16]
    2d5a:	subs	r3, #1
    2d5c:	str	r3, [r2, #16]
    2d5e:	cbz	r3, 2d9c <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x198>
	File& operator = (const File &file) {
		//Serial.println("File assignment");
		//static int assigncount=0;
		//if (++assigncount > 20) while (1) ;
		invalidate();
		f = file.f;
    2d60:	ldr	r2, [sp, #28]
    2d62:	str.w	r2, [r4, #204]	; 0xcc
		if (f) f->refcount++;
    2d66:	cbz	r2, 2d82 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x17e>
    2d68:	ldr	r1, [r2, #16]
		return *this;
	}
	virtual ~File() {
    2d6a:	ldr	r3, [pc, #44]	; (2d98 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x194>)
    2d6c:	str	r3, [sp, #12]
		//Serial.println("File assignment");
		//static int assigncount=0;
		//if (++assigncount > 20) while (1) ;
		invalidate();
		f = file.f;
		if (f) f->refcount++;
    2d6e:	adds	r1, #1
    2d70:	str	r1, [r2, #16]
    2d72:	ldr	r1, [sp, #28]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    2d74:	cbz	r1, 2d82 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x17e>
    2d76:	ldr	r2, [r1, #16]
    2d78:	subs	r2, #1
    2d7a:	str	r2, [r1, #16]
    2d7c:	cmp	r2, #0
    2d7e:	beq.w	2ed8 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x2d4>
    file_=sd_open(store,filename,mode);
    open_file_ = i;
    2d82:	str.w	r5, [r4, #240]	; 0xf0
    mode_ = mode;
    2d86:	str.w	r6, [r4, #236]	; 0xec
    mtp_lock_storage(false);
  }
    2d8a:	add	sp, #292	; 0x124
    2d8c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2d90:	.word	0x00000501
    2d94:	.word	0x000004f5
    2d98:	.word	0x000141ac
    2d9c:	ldr.w	r7, [r4, #204]	; 0xcc
    2da0:	cmp	r7, #0
    2da2:	beq.n	2d60 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x15c>
    2da4:	ldr	r3, [r7, #0]
    2da6:	ldr	r1, [pc, #680]	; (3050 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x44c>)
    2da8:	ldr	r3, [r3, #32]
    2daa:	cmp	r3, r1
    2dac:	bne.w	3020 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x41c>
    2db0:	ldr	r0, [r7, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    2db2:	ldr	r3, [pc, #672]	; (3054 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x450>)
    2db4:	str	r3, [r7, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    2db6:	cmp	r0, #0
    2db8:	beq.w	2ece <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x2ca>
    2dbc:	ldr	r2, [r0, #16]
    2dbe:	subs	r2, #1
    2dc0:	str	r2, [r0, #16]
    2dc2:	cmp	r2, #0
    2dc4:	bne.w	2ece <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x2ca>
    2dc8:	ldr.w	r8, [r7, #16]
    2dcc:	cmp.w	r8, #0
    2dd0:	beq.n	2ece <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x2ca>
    2dd2:	ldr.w	r2, [r8]
    2dd6:	ldr	r2, [r2, #32]
    2dd8:	cmp	r2, r1
    2dda:	bne.w	303e <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x43a>
    2dde:	ldr.w	r0, [r8, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    2de2:	str.w	r3, [r8]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    2de6:	cmp	r0, #0
    2de8:	beq.n	2ec6 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x2c2>
    2dea:	ldr	r2, [r0, #16]
    2dec:	subs	r2, #1
    2dee:	str	r2, [r0, #16]
    2df0:	cmp	r2, #0
    2df2:	bne.n	2ec6 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x2c2>
    2df4:	ldr.w	r9, [r8, #16]
    2df8:	cmp.w	r9, #0
    2dfc:	beq.n	2ec6 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x2c2>
    2dfe:	ldr.w	r2, [r9]
    2e02:	ldr	r2, [r2, #32]
    2e04:	cmp	r2, r1
    2e06:	bne.w	3032 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x42e>
    2e0a:	ldr.w	r0, [r9, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    2e0e:	str.w	r3, [r9]
    2e12:	ldr.w	lr, [pc, #576]	; 3054 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x450>
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    2e16:	cmp	r0, #0
    2e18:	beq.n	2ebe <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x2ba>
    2e1a:	ldr	r2, [r0, #16]
    2e1c:	subs	r2, #1
    2e1e:	str	r2, [r0, #16]
    2e20:	cmp	r2, #0
    2e22:	bne.n	2ebe <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x2ba>
    2e24:	ldr.w	sl, [r9, #16]
    2e28:	cmp.w	sl, #0
    2e2c:	beq.n	2ebe <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x2ba>
    2e2e:	ldr.w	r2, [sl]
    2e32:	ldr	r2, [r2, #32]
    2e34:	cmp	r2, r1
    2e36:	bne.w	304a <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x446>
    2e3a:	ldr.w	r0, [sl, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    2e3e:	str.w	lr, [sl]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    2e42:	cmp	r0, #0
    2e44:	beq.n	2eb6 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x2b2>
    2e46:	ldr	r2, [r0, #16]
    2e48:	subs	r2, #1
    2e4a:	str	r2, [r0, #16]
    2e4c:	cmp	r2, #0
    2e4e:	bne.n	2eb6 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x2b2>
    2e50:	ldr.w	fp, [sl, #16]
    2e54:	cmp.w	fp, #0
    2e58:	beq.n	2eb6 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x2b2>
    2e5a:	ldr.w	r2, [fp]
    2e5e:	ldr	r2, [r2, #32]
    2e60:	cmp	r2, r1
    2e62:	bne.w	305e <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x45a>
    2e66:	ldr.w	r2, [fp, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    2e6a:	str.w	r3, [fp]
    2e6e:	ldr	r0, [pc, #484]	; (3054 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x450>)
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    2e70:	cbz	r2, 2eae <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x2aa>
    2e72:	ldr	r3, [r2, #16]
    2e74:	subs	r3, #1
    2e76:	str	r3, [r2, #16]
    2e78:	cbnz	r3, 2eae <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x2aa>
    2e7a:	ldr.w	r2, [fp, #16]
    2e7e:	cbz	r2, 2eae <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x2aa>
    2e80:	ldr	r3, [r2, #0]
    2e82:	ldr	r3, [r3, #32]
    2e84:	cmp	r3, r1
    2e86:	bne.w	306a <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x466>
    2e8a:	ldr	r1, [r2, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    2e8c:	str	r0, [r2, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    2e8e:	cbz	r1, 2ea6 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x2a2>
    2e90:	ldr	r3, [r1, #16]
    2e92:	subs	r3, #1
    2e94:	str	r3, [r1, #16]
    2e96:	cbnz	r3, 2ea6 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x2a2>
    2e98:	ldr	r0, [r2, #16]
    2e9a:	cbz	r0, 2ea6 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x2a2>
    2e9c:	ldr	r3, [r0, #0]
    2e9e:	str	r2, [sp, #4]
    2ea0:	ldr	r3, [r3, #32]
    2ea2:	blx	r3
    2ea4:	ldr	r2, [sp, #4]
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
		invalidate();
	}
    2ea6:	mov	r0, r2
    2ea8:	movs	r1, #20
    2eaa:	bl	e950 <operator delete(void*, unsigned int)>
    2eae:	mov	r0, fp
    2eb0:	movs	r1, #20
    2eb2:	bl	e950 <operator delete(void*, unsigned int)>
    2eb6:	mov	r0, sl
    2eb8:	movs	r1, #20
    2eba:	bl	e950 <operator delete(void*, unsigned int)>
    2ebe:	mov	r0, r9
    2ec0:	movs	r1, #20
    2ec2:	bl	e950 <operator delete(void*, unsigned int)>
    2ec6:	mov	r0, r8
    2ec8:	movs	r1, #20
    2eca:	bl	e950 <operator delete(void*, unsigned int)>
    2ece:	mov	r0, r7
    2ed0:	movs	r1, #20
    2ed2:	bl	e950 <operator delete(void*, unsigned int)>
    2ed6:	b.n	2d60 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x15c>
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    2ed8:	ldr	r7, [sp, #28]
    2eda:	cmp	r7, #0
    2edc:	beq.w	2d82 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x17e>
    2ee0:	ldr	r2, [r7, #0]
    2ee2:	ldr	r1, [pc, #364]	; (3050 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x44c>)
    2ee4:	ldr	r2, [r2, #32]
    2ee6:	cmp	r2, r1
    2ee8:	bne.w	3026 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x422>
    2eec:	ldr	r0, [r7, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    2eee:	str	r3, [r7, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    2ef0:	cmp	r0, #0
    2ef2:	beq.w	2ffe <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x3fa>
    2ef6:	ldr	r2, [r0, #16]
    2ef8:	subs	r2, #1
    2efa:	str	r2, [r0, #16]
    2efc:	cmp	r2, #0
    2efe:	bne.n	2ffe <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x3fa>
    2f00:	ldr.w	r8, [r7, #16]
    2f04:	cmp.w	r8, #0
    2f08:	beq.n	2ffe <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x3fa>
    2f0a:	ldr.w	r2, [r8]
    2f0e:	ldr	r2, [r2, #32]
    2f10:	cmp	r2, r1
    2f12:	bne.w	3038 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x434>
    2f16:	ldr.w	r0, [r8, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    2f1a:	str.w	r3, [r8]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    2f1e:	cmp	r0, #0
    2f20:	beq.n	2ff6 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x3f2>
    2f22:	ldr	r2, [r0, #16]
    2f24:	subs	r2, #1
    2f26:	str	r2, [r0, #16]
    2f28:	cmp	r2, #0
    2f2a:	bne.n	2ff6 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x3f2>
    2f2c:	ldr.w	r9, [r8, #16]
    2f30:	cmp.w	r9, #0
    2f34:	beq.n	2ff6 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x3f2>
    2f36:	ldr.w	r2, [r9]
    2f3a:	ldr	r2, [r2, #32]
    2f3c:	cmp	r2, r1
    2f3e:	bne.n	302c <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x428>
    2f40:	ldr.w	r0, [r9, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    2f44:	str.w	r3, [r9]
    2f48:	ldr.w	lr, [pc, #264]	; 3054 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x450>
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    2f4c:	cmp	r0, #0
    2f4e:	beq.n	2fee <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x3ea>
    2f50:	ldr	r2, [r0, #16]
    2f52:	subs	r2, #1
    2f54:	str	r2, [r0, #16]
    2f56:	cmp	r2, #0
    2f58:	bne.n	2fee <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x3ea>
    2f5a:	ldr.w	sl, [r9, #16]
    2f5e:	cmp.w	sl, #0
    2f62:	beq.n	2fee <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x3ea>
    2f64:	ldr.w	r2, [sl]
    2f68:	ldr	r2, [r2, #32]
    2f6a:	cmp	r2, r1
    2f6c:	bne.n	3044 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x440>
    2f6e:	ldr.w	r0, [sl, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    2f72:	str.w	lr, [sl]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    2f76:	cmp	r0, #0
    2f78:	beq.n	2fe6 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x3e2>
    2f7a:	ldr	r2, [r0, #16]
    2f7c:	subs	r2, #1
    2f7e:	str	r2, [r0, #16]
    2f80:	cmp	r2, #0
    2f82:	bne.n	2fe6 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x3e2>
    2f84:	ldr.w	fp, [sl, #16]
    2f88:	cmp.w	fp, #0
    2f8c:	beq.n	2fe6 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x3e2>
    2f8e:	ldr.w	r2, [fp]
    2f92:	ldr	r2, [r2, #32]
    2f94:	cmp	r2, r1
    2f96:	bne.n	3058 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x454>
    2f98:	ldr.w	r2, [fp, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    2f9c:	str.w	r3, [fp]
    2fa0:	ldr	r0, [pc, #176]	; (3054 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x450>)
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    2fa2:	cbz	r2, 2fde <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x3da>
    2fa4:	ldr	r3, [r2, #16]
    2fa6:	subs	r3, #1
    2fa8:	str	r3, [r2, #16]
    2faa:	cbnz	r3, 2fde <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x3da>
    2fac:	ldr.w	r2, [fp, #16]
    2fb0:	cbz	r2, 2fde <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x3da>
    2fb2:	ldr	r3, [r2, #0]
    2fb4:	ldr	r3, [r3, #32]
    2fb6:	cmp	r3, r1
    2fb8:	bne.n	3064 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x460>
    2fba:	ldr	r1, [r2, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    2fbc:	str	r0, [r2, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    2fbe:	cbz	r1, 2fd6 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x3d2>
    2fc0:	ldr	r3, [r1, #16]
    2fc2:	subs	r3, #1
    2fc4:	str	r3, [r1, #16]
    2fc6:	cbnz	r3, 2fd6 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x3d2>
    2fc8:	ldr	r0, [r2, #16]
    2fca:	cbz	r0, 2fd6 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x3d2>
    2fcc:	ldr	r3, [r0, #0]
    2fce:	str	r2, [sp, #4]
    2fd0:	ldr	r3, [r3, #32]
    2fd2:	blx	r3
    2fd4:	ldr	r2, [sp, #4]
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
		invalidate();
	}
    2fd6:	mov	r0, r2
    2fd8:	movs	r1, #20
    2fda:	bl	e950 <operator delete(void*, unsigned int)>
    2fde:	mov	r0, fp
    2fe0:	movs	r1, #20
    2fe2:	bl	e950 <operator delete(void*, unsigned int)>
    2fe6:	mov	r0, sl
    2fe8:	movs	r1, #20
    2fea:	bl	e950 <operator delete(void*, unsigned int)>
    2fee:	mov	r0, r9
    2ff0:	movs	r1, #20
    2ff2:	bl	e950 <operator delete(void*, unsigned int)>
    2ff6:	mov	r0, r8
    2ff8:	movs	r1, #20
    2ffa:	bl	e950 <operator delete(void*, unsigned int)>
    2ffe:	mov	r0, r7
    3000:	movs	r1, #20
    3002:	bl	e950 <operator delete(void*, unsigned int)>
    3006:	b.n	2d82 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x17e>
    }
  }

  void MTPStorage_SD::OpenFileByIndex(uint32_t i, uint32_t mode) 
  {
    if (open_file_ == i && mode_ == mode) return;
    3008:	ldr.w	r3, [r0, #236]	; 0xec
    300c:	cmp	r3, r2
    300e:	bne.w	2c14 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x10>
    if(sd_isOpen(file_)) file_.close();
    file_=sd_open(store,filename,mode);
    open_file_ = i;
    mode_ = mode;
    mtp_lock_storage(false);
  }
    3012:	add	sp, #292	; 0x124
    3014:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	}
	virtual void close() {
		if (f) f->close();
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
    3018:	blx	r2
    301a:	b.n	2cc8 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0xc4>
	}
	virtual uint64_t size() {
		return (f) ? f->size() : 0;
	}
	virtual void close() {
		if (f) f->close();
    301c:	blx	r2
    301e:	b.n	2d40 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x13c>
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    3020:	mov	r0, r7
    3022:	blx	r3
    3024:	b.n	2d60 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x15c>
    3026:	mov	r0, r7
    3028:	blx	r2
    302a:	b.n	2d82 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x17e>
    302c:	mov	r0, r9
    302e:	blx	r2
    3030:	b.n	2ff6 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x3f2>
    3032:	mov	r0, r9
    3034:	blx	r2
    3036:	b.n	2ec6 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x2c2>
    3038:	mov	r0, r8
    303a:	blx	r2
    303c:	b.n	2ffe <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x3fa>
    303e:	mov	r0, r8
    3040:	blx	r2
    3042:	b.n	2ece <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x2ca>
    3044:	mov	r0, sl
    3046:	blx	r2
    3048:	b.n	2fee <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x3ea>
    304a:	mov	r0, sl
    304c:	blx	r2
    304e:	b.n	2ebe <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x2ba>
    3050:	.word	0x00000f25
    3054:	.word	0x000141ac
    3058:	mov	r0, fp
    305a:	blx	r2
    305c:	b.n	2fe6 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x3e2>
    305e:	mov	r0, fp
    3060:	blx	r2
    3062:	b.n	2eb6 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x2b2>
    3064:	mov	r0, r2
    3066:	blx	r3
    3068:	b.n	2fde <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x3da>
    306a:	mov	r0, r2
    306c:	blx	r3
    306e:	b.n	2eae <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x2aa>

00003070 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)>:
  {
    return ReadIndexRecord(handle).child;
  }

  void MTPStorage_SD::read(uint32_t handle, uint32_t pos, char* out, uint32_t bytes)
  {
    3070:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3074:	mov	r5, r0
    3076:	sub	sp, #8
    3078:	mov	r7, r2
    OpenFileByIndex(handle);
    307a:	movs	r2, #0
  {
    return ReadIndexRecord(handle).child;
  }

  void MTPStorage_SD::read(uint32_t handle, uint32_t pos, char* out, uint32_t bytes)
  {
    307c:	mov	r8, r3
    307e:	ldr.w	r9, [sp, #40]	; 0x28
    OpenFileByIndex(handle);
    3082:	bl	2c04 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)>
	}
	virtual bool truncate(uint64_t size=0) {
		return (f) ? f->truncate(size) : false;
	}
	virtual bool seek(uint64_t pos, int mode) {
		return (f) ? f->seek(pos, mode) : false;
    3086:	ldr.w	r4, [r5, #204]	; 0xcc
    308a:	cmp	r4, #0
    308c:	beq.n	3164 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0xf4>
    308e:	ldr	r0, [r4, #0]
    3090:	ldr	r2, [pc, #308]	; (31c8 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x158>)
    3092:	ldr	r6, [r0, #52]	; 0x34
    3094:	cmp	r6, r2
    3096:	mov.w	r3, #0
    309a:	bne.n	3194 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x124>
    309c:	ldr	r1, [r4, #16]
    309e:	cmp	r1, #0
    30a0:	beq.n	315c <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0xec>
    30a2:	ldr	r2, [r1, #0]
    30a4:	ldr.w	sl, [r2, #52]	; 0x34
    30a8:	cmp	sl, r6
    30aa:	bne.n	319e <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x12e>
    30ac:	ldr.w	lr, [r1, #16]
    30b0:	cmp.w	lr, #0
    30b4:	beq.n	316a <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0xfa>
    30b6:	ldr.w	r2, [lr]
    30ba:	ldr	r6, [r2, #52]	; 0x34
    30bc:	cmp	r6, sl
    30be:	bne.n	31a8 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x138>
    30c0:	ldr.w	lr, [lr, #16]
    30c4:	cmp.w	lr, #0
    30c8:	beq.n	316a <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0xfa>
    30ca:	ldr.w	r2, [lr]
    30ce:	ldr.w	sl, [r2, #52]	; 0x34
    30d2:	cmp	sl, r6
    30d4:	bne.n	31b2 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x142>
    30d6:	ldr.w	lr, [lr, #16]
    30da:	cmp.w	lr, #0
    30de:	beq.n	316a <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0xfa>
    30e0:	ldr.w	r3, [lr]
    30e4:	ldr	r6, [r3, #52]	; 0x34
    30e6:	cmp	r6, sl
    30e8:	bne.n	31bc <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x14c>
    30ea:	ldr.w	r6, [lr, #16]
    30ee:	cmp	r6, #0
    30f0:	beq.n	316a <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0xfa>
    30f2:	ldr	r1, [r6, #0]
    30f4:	movs	r3, #0
    30f6:	str	r3, [sp, #0]
    30f8:	mov	r2, r7
    30fa:	mov	r0, r6
    30fc:	ldr	r1, [r1, #52]	; 0x34
    30fe:	blx	r1
	unsigned int getRefcount() { // testing only
		return refcount;
	}
#endif
	virtual size_t read(void *buf, size_t nbyte) {
		return (f) ? f->read(buf, nbyte) : 0;
    3100:	ldr.w	r4, [r5, #204]	; 0xcc
    3104:	cmp	r4, #0
    3106:	beq.n	3164 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0xf4>
    3108:	ldr	r2, [r4, #0]
    310a:	ldr	r3, [pc, #192]	; (31cc <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x15c>)
    310c:	ldr	r5, [r2, #40]	; 0x28
    310e:	cmp	r5, r3
    3110:	bne.n	3176 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x106>
    3112:	ldr	r0, [r4, #16]
    3114:	cbz	r0, 3164 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0xf4>
    3116:	ldr	r2, [r0, #0]
    3118:	ldr	r4, [r2, #40]	; 0x28
    311a:	cmp	r4, r3
    311c:	bne.n	3186 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x116>
    311e:	ldr	r0, [r0, #16]
    3120:	cbz	r0, 3164 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0xf4>
    3122:	ldr	r2, [r0, #0]
    3124:	ldr	r4, [r2, #40]	; 0x28
    3126:	cmp	r4, r3
    3128:	bne.n	3186 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x116>
    312a:	ldr	r0, [r0, #16]
    312c:	cbz	r0, 3164 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0xf4>
    312e:	ldr	r2, [r0, #0]
    3130:	ldr	r4, [r2, #40]	; 0x28
    3132:	cmp	r4, r3
    3134:	bne.n	3186 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x116>
    3136:	ldr	r0, [r0, #16]
    3138:	cbz	r0, 3164 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0xf4>
    313a:	ldr	r2, [r0, #0]
    313c:	ldr	r4, [r2, #40]	; 0x28
    313e:	cmp	r4, r3
    3140:	bne.n	3186 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x116>
    3142:	ldr	r0, [r0, #16]
    3144:	cbz	r0, 3164 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0xf4>
    3146:	ldr	r2, [r0, #0]
    3148:	ldr	r4, [r2, #40]	; 0x28
    314a:	cmp	r4, r3
    314c:	bne.n	3186 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x116>
    314e:	ldr	r0, [r0, #16]
    3150:	cbz	r0, 3164 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0xf4>
    3152:	ldr	r3, [r0, #0]
    3154:	mov	r2, r9
    3156:	mov	r1, r8
    3158:	ldr	r3, [r3, #40]	; 0x28
    315a:	b.n	317e <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x10e>
    315c:	ldr	r5, [r0, #40]	; 0x28
    315e:	ldr	r3, [pc, #108]	; (31cc <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x15c>)
    3160:	cmp	r5, r3
    3162:	bne.n	3176 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x106>
    mtp_lock_storage(true);
    file_.seek(pos);
    file_.read(out,bytes);
    mtp_lock_storage(false);
  }
    3164:	add	sp, #8
    3166:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    316a:	ldr	r5, [r0, #40]	; 0x28
    316c:	ldr	r3, [pc, #92]	; (31cc <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x15c>)
    316e:	cmp	r5, r3
    3170:	bne.n	3176 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x106>
    3172:	mov	r0, r1
    3174:	b.n	3116 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0xa6>
    3176:	mov	r2, r9
    3178:	mov	r1, r8
    317a:	mov	r0, r4
    317c:	mov	r3, r5
    317e:	add	sp, #8
    3180:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3184:	bx	r3
    3186:	mov	r2, r9
    3188:	mov	r1, r8
    318a:	mov	r3, r4
    318c:	add	sp, #8
    318e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3192:	bx	r3
	}
	virtual bool truncate(uint64_t size=0) {
		return (f) ? f->truncate(size) : false;
	}
	virtual bool seek(uint64_t pos, int mode) {
		return (f) ? f->seek(pos, mode) : false;
    3194:	str	r3, [sp, #0]
    3196:	mov	r2, r7
    3198:	mov	r0, r4
    319a:	blx	r6
    319c:	b.n	3100 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x90>
    319e:	str	r3, [sp, #0]
    31a0:	mov	r2, r7
    31a2:	mov	r0, r1
    31a4:	blx	sl
    31a6:	b.n	3100 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x90>
    31a8:	str	r3, [sp, #0]
    31aa:	mov	r2, r7
    31ac:	mov	r0, lr
    31ae:	blx	r6
    31b0:	b.n	3100 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x90>
    31b2:	str	r3, [sp, #0]
    31b4:	mov	r2, r7
    31b6:	mov	r0, lr
    31b8:	blx	sl
    31ba:	b.n	3100 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x90>
    31bc:	movs	r3, #0
    31be:	mov	r2, r7
    31c0:	mov	r0, lr
    31c2:	str	r3, [sp, #0]
    31c4:	blx	r6
    31c6:	b.n	3100 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x90>
    31c8:	.word	0x000004c1
    31cc:	.word	0x00000475

000031d0 <MTPStorage_SD::Create(unsigned long, unsigned long, bool, char const*)>:
    }
    return 1;
  }

  uint32_t MTPStorage_SD::Create(uint32_t store, uint32_t parent,  bool folder, const char* filename)
  {
    31d0:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    uint32_t ret;
    if (parent == 0xFFFFFFFFUL) parent = store;
    31d4:	cmp.w	r2, #4294967295
    31d8:	ite	ne
    31da:	movne	r6, r2
    31dc:	moveq	r6, r1
    }
    return 1;
  }

  uint32_t MTPStorage_SD::Create(uint32_t store, uint32_t parent,  bool folder, const char* filename)
  {
    31de:	sub.w	sp, sp, #800	; 0x320
    31e2:	mov	r4, r0
    uint32_t ret;
    if (parent == 0xFFFFFFFFUL) parent = store;
    Record p = ReadIndexRecord(parent);
    31e4:	mov	r2, r6
    }
    return 1;
  }

  uint32_t MTPStorage_SD::Create(uint32_t store, uint32_t parent,  bool folder, const char* filename)
  {
    31e6:	mov	r7, r1
    uint32_t ret;
    if (parent == 0xFFFFFFFFUL) parent = store;
    Record p = ReadIndexRecord(parent);
    31e8:	mov	r1, r0
    31ea:	add	r0, sp, #256	; 0x100
    }
    return 1;
  }

  uint32_t MTPStorage_SD::Create(uint32_t store, uint32_t parent,  bool folder, const char* filename)
  {
    31ec:	mov	r8, r3
    uint32_t ret;
    if (parent == 0xFFFFFFFFUL) parent = store;
    Record p = ReadIndexRecord(parent);
    31ee:	bl	2690 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    Record r;
    strlcpy(r.name, filename,MAX_FILENAME_LEN);
    31f2:	ldr	r1, [sp, #824]	; 0x338
    31f4:	mov.w	r2, #256	; 0x100
    31f8:	add	r0, sp, #544	; 0x220
    31fa:	bl	10cd0 <strlcpy>
    index_.write((char*)&r, sizeof(r));
    mtp_lock_storage(false);
  }

  uint32_t MTPStorage_SD::AppendIndexRecord(const Record& r) 
  { uint32_t new_record = index_entries_++;
    31fe:	ldr.w	r5, [r4, #244]	; 0xf4
    uint32_t ret;
    if (parent == 0xFFFFFFFFUL) parent = store;
    Record p = ReadIndexRecord(parent);
    Record r;
    strlcpy(r.name, filename,MAX_FILENAME_LEN);
    r.store = p.store;
    3202:	ldrh.w	r3, [sp, #270]	; 0x10e
    r.parent = parent;
    r.child = 0;
    r.sibling = p.child;
    3206:	ldr	r2, [sp, #260]	; 0x104
    uint32_t ret;
    if (parent == 0xFFFFFFFFUL) parent = store;
    Record p = ReadIndexRecord(parent);
    Record r;
    strlcpy(r.name, filename,MAX_FILENAME_LEN);
    r.store = p.store;
    3208:	strh.w	r3, [sp, #542]	; 0x21e
    index_.write((char*)&r, sizeof(r));
    mtp_lock_storage(false);
  }

  uint32_t MTPStorage_SD::AppendIndexRecord(const Record& r) 
  { uint32_t new_record = index_entries_++;
    320c:	adds	r1, r5, #1
    Record p = ReadIndexRecord(parent);
    Record r;
    strlcpy(r.name, filename,MAX_FILENAME_LEN);
    r.store = p.store;
    r.parent = parent;
    r.child = 0;
    320e:	movs	r3, #0
    index_.write((char*)&r, sizeof(r));
    mtp_lock_storage(false);
  }

  uint32_t MTPStorage_SD::AppendIndexRecord(const Record& r) 
  { uint32_t new_record = index_entries_++;
    3210:	str.w	r1, [r4, #244]	; 0xf4
    Record p = ReadIndexRecord(parent);
    Record r;
    strlcpy(r.name, filename,MAX_FILENAME_LEN);
    r.store = p.store;
    r.parent = parent;
    r.child = 0;
    3214:	str	r3, [sp, #532]	; 0x214
    mtp_lock_storage(false);
  }

  uint32_t MTPStorage_SD::AppendIndexRecord(const Record& r) 
  { uint32_t new_record = index_entries_++;
    WriteIndexRecord(new_record, r);
    3216:	mov	r1, r5
    r.parent = parent;
    r.child = 0;
    r.sibling = p.child;
    r.isdir = folder;
    // New folder is empty, scanned = true.
    r.scanned = 1;
    3218:	movs	r3, #1
    Record r;
    strlcpy(r.name, filename,MAX_FILENAME_LEN);
    r.store = p.store;
    r.parent = parent;
    r.child = 0;
    r.sibling = p.child;
    321a:	str	r2, [sp, #536]	; 0x218
    mtp_lock_storage(false);
  }

  uint32_t MTPStorage_SD::AppendIndexRecord(const Record& r) 
  { uint32_t new_record = index_entries_++;
    WriteIndexRecord(new_record, r);
    321c:	mov	r0, r4
    321e:	add	r2, sp, #528	; 0x210
    if (parent == 0xFFFFFFFFUL) parent = store;
    Record p = ReadIndexRecord(parent);
    Record r;
    strlcpy(r.name, filename,MAX_FILENAME_LEN);
    r.store = p.store;
    r.parent = parent;
    3220:	str	r6, [sp, #528]	; 0x210
    r.child = 0;
    r.sibling = p.child;
    r.isdir = folder;
    3222:	strb.w	r8, [sp, #540]	; 0x21c
    // New folder is empty, scanned = true.
    r.scanned = 1;
    3226:	strb.w	r3, [sp, #541]	; 0x21d
    mtp_lock_storage(false);
  }

  uint32_t MTPStorage_SD::AppendIndexRecord(const Record& r) 
  { uint32_t new_record = index_entries_++;
    WriteIndexRecord(new_record, r);
    322a:	bl	24b0 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    r.sibling = p.child;
    r.isdir = folder;
    // New folder is empty, scanned = true.
    r.scanned = 1;
    ret = p.child = AppendIndexRecord(r);
    WriteIndexRecord(parent, p);
    322e:	mov	r1, r6
    3230:	add	r2, sp, #256	; 0x100
    3232:	mov	r0, r4
    r.child = 0;
    r.sibling = p.child;
    r.isdir = folder;
    // New folder is empty, scanned = true.
    r.scanned = 1;
    ret = p.child = AppendIndexRecord(r);
    3234:	str	r5, [sp, #260]	; 0x104
    WriteIndexRecord(parent, p);
    3236:	bl	24b0 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    if (folder) 
    323a:	cmp.w	r8, #0
    323e:	bne.n	3254 <MTPStorage_SD::Create(unsigned long, unsigned long, bool, char const*)+0x84>
      sd_mkdir(store,filename);
      mtp_lock_storage(false);
    } 
    else 
    {
      OpenFileByIndex(ret, FILE_WRITE_BEGIN);
    3240:	mov	r0, r4
    3242:	movs	r2, #2
    3244:	mov	r1, r5
    3246:	bl	2c04 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)>
      Serial.print(store); Serial.print(" "); 
      Serial.print(parent); Serial.print(" "); 
      Serial.println(filename);
    #endif
    return ret;
  }
    324a:	mov	r0, r5
    324c:	add.w	sp, sp, #800	; 0x320
    3250:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = p.child = AppendIndexRecord(r);
    WriteIndexRecord(parent, p);
    if (folder) 
    {
      char filename[MAX_FILENAME_LEN];
      ConstructFilename(ret, filename, MAX_FILENAME_LEN);
    3254:	mov	r0, r4
    bool sd_mkdir(uint32_t store, char *filename) {  return sdx[store]->mkdir(filename);  }
    3256:	add.w	r4, r4, r7, lsl #2
    325a:	mov	r2, sp
    325c:	mov	r1, r5
    325e:	mov.w	r3, #256	; 0x100
    3262:	bl	2af0 <MTPStorage_SD::ConstructFilename(int, char*, int)>
    3266:	ldr	r0, [r4, #88]	; 0x58
    3268:	ldr	r3, [r0, #0]
    326a:	mov	r1, sp
    326c:	ldr	r3, [r3, #8]
    326e:	blx	r3
      Serial.print(store); Serial.print(" "); 
      Serial.print(parent); Serial.print(" "); 
      Serial.println(filename);
    #endif
    return ret;
  }
    3270:	mov	r0, r5
    3272:	add.w	sp, sp, #800	; 0x320
    3276:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    327a:	nop

0000327c <MTPStorage_SD::ScanDir(unsigned long, unsigned long)>:
      AppendIndexRecord(r);
    }
  }

  void MTPStorage_SD::ScanDir(uint32_t store, uint32_t i) 
  { if (i == 0xFFFFFFFFUL) i = store;
    327c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3280:	cmp.w	r2, #4294967295
    3284:	ite	ne
    3286:	movne	r6, r2
    3288:	moveq	r6, r1
    328a:	sub.w	sp, sp, #564	; 0x234
    
    Record record = ReadIndexRecord(i);
    328e:	mov	r1, r0
      AppendIndexRecord(r);
    }
  }

  void MTPStorage_SD::ScanDir(uint32_t store, uint32_t i) 
  { if (i == 0xFFFFFFFFUL) i = store;
    3290:	mov	r4, r0
    
    Record record = ReadIndexRecord(i);
    3292:	mov	r2, r6
    3294:	add	r0, sp, #16
    3296:	bl	2690 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    if (record.isdir && !record.scanned) {
    329a:	ldrb.w	r3, [sp, #28]
    329e:	cbz	r3, 32a6 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x2a>
    32a0:	ldrb.w	r2, [sp, #29]
    32a4:	cbz	r2, 32ae <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x32>
      }
      record.scanned = true;
      record.child = sibling;
      WriteIndexRecord(i, record);
    }
  }
    32a6:	add.w	sp, sp, #564	; 0x234
    32aa:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  void MTPStorage_SD::ScanDir(uint32_t store, uint32_t i) 
  { if (i == 0xFFFFFFFFUL) i = store;
    
    Record record = ReadIndexRecord(i);
    if (record.isdir && !record.scanned) {
      OpenFileByIndex(i);
    32ae:	mov	r0, r4
    32b0:	mov	r1, r6
    32b2:	bl	2c04 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)>
	}
	virtual void close() {
		if (f) f->close();
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
    32b6:	ldr.w	r0, [r4, #204]	; 0xcc
    32ba:	cmp	r0, #0
    32bc:	beq.n	32a6 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x2a>
    32be:	ldr	r3, [r0, #0]
    32c0:	ldr.w	r8, [pc, #892]	; 3640 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3c4>
    32c4:	ldr	r3, [r3, #68]	; 0x44
    32c6:	cmp	r3, r8
    32c8:	bne.n	3384 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x108>
    32ca:	ldr	r0, [r0, #16]
    32cc:	cmp	r0, #0
    32ce:	beq.n	32a6 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x2a>
    32d0:	ldr	r3, [r0, #0]
    32d2:	ldr	r3, [r3, #68]	; 0x44
    32d4:	cmp	r3, r8
    32d6:	bne.n	3384 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x108>
    32d8:	ldr	r0, [r0, #16]
    32da:	cmp	r0, #0
    32dc:	beq.n	32a6 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x2a>
    32de:	ldr	r3, [r0, #0]
    32e0:	ldr	r3, [r3, #68]	; 0x44
    32e2:	cmp	r3, r8
    32e4:	bne.n	3384 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x108>
    32e6:	ldr	r0, [r0, #16]
    32e8:	cmp	r0, #0
    32ea:	beq.n	32a6 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x2a>
    32ec:	ldr	r3, [r0, #0]
    32ee:	ldr	r3, [r3, #68]	; 0x44
    32f0:	cmp	r3, r8
    32f2:	bne.n	3384 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x108>
    32f4:	ldr	r0, [r0, #16]
    32f6:	cmp	r0, #0
    32f8:	beq.n	32a6 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x2a>
    32fa:	ldr	r3, [r0, #0]
    32fc:	ldr	r3, [r3, #68]	; 0x44
    32fe:	cmp	r3, r8
    3300:	bne.n	3384 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x108>
    3302:	ldr	r0, [r0, #16]
    3304:	cmp	r0, #0
    3306:	beq.n	32a6 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x2a>
    3308:	ldr	r3, [r0, #0]
    330a:	ldr	r3, [r3, #68]	; 0x44
    330c:	blx	r3
      if (!sd_isOpen(file_)) return;
    330e:	cmp	r0, #0
    3310:	beq.n	32a6 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x2a>
			//"File(File *file) constructor only accepts pointers "
			//"to derived classes, not File itself");
		f = file;
		if (f) f->refcount++;
	}
	File(const File &file) {
    3312:	ldr.w	r9, [pc, #804]	; 3638 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3bc>
    3316:	ldr.w	fp, [pc, #812]	; 3644 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3c8>
    331a:	movs	r5, #0
	}
	virtual bool isDirectory() {
		return (f) ? f->isDirectory() : false;
	}
	virtual File openNextFile(uint8_t mode=0) {
		return (f) ? f->openNextFile(mode) : *this;
    331c:	ldr.w	r1, [r4, #204]	; 0xcc
    3320:	cmp	r1, #0
    3322:	beq.n	3388 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x10c>
    3324:	ldr	r3, [r1, #0]
    3326:	ldr	r3, [r3, #80]	; 0x50
    3328:	cmp	r3, fp
    332a:	bne.w	383e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5c2>
    332e:	ldr	r1, [r1, #16]
    3330:	cbz	r1, 3388 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x10c>
    3332:	ldr	r3, [r1, #0]
    3334:	ldr	r3, [r3, #80]	; 0x50
    3336:	cmp	r3, fp
    3338:	bne.w	383e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5c2>
    333c:	ldr	r1, [r1, #16]
    333e:	cbz	r1, 3388 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x10c>
    3340:	ldr	r3, [r1, #0]
    3342:	ldr	r3, [r3, #80]	; 0x50
    3344:	cmp	r3, fp
    3346:	bne.w	383e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5c2>
    334a:	ldr	r1, [r1, #16]
    334c:	cbz	r1, 3388 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x10c>
    334e:	ldr	r3, [r1, #0]
    3350:	ldr	r3, [r3, #80]	; 0x50
    3352:	cmp	r3, fp
    3354:	bne.w	383e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5c2>
    3358:	ldr	r1, [r1, #16]
    335a:	cbz	r1, 3388 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x10c>
    335c:	ldr	r3, [r1, #0]
    335e:	ldr	r3, [r3, #80]	; 0x50
    3360:	cmp	r3, fp
    3362:	bne.w	383e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5c2>
    3366:	ldr	r1, [r1, #16]
    3368:	cbz	r1, 3388 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x10c>
    336a:	ldr	r3, [r1, #0]
    336c:	ldr	r3, [r3, #80]	; 0x50
    336e:	cmp	r3, fp
    3370:	bne.w	383e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5c2>
    3374:	ldr	r1, [r1, #16]
    3376:	cbz	r1, 3388 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x10c>
    3378:	ldr	r3, [r1, #0]
    337a:	movs	r2, #0
    337c:	ldr	r3, [r3, #80]	; 0x50
    337e:	add	r0, sp, #288	; 0x120
    3380:	blx	r3
    3382:	b.n	339e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x122>
	}
	virtual void close() {
		if (f) f->close();
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
    3384:	blx	r3
    3386:	b.n	330e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x92>
class __FlashStringHelper;

class Print
{
  public:
	constexpr Print() : write_error(0) {}
    3388:	movs	r3, #0
    338a:	mov.w	r2, #1000	; 0x3e8
			//"File(File *file) constructor only accepts pointers "
			//"to derived classes, not File itself");
		f = file;
		if (f) f->refcount++;
	}
	File(const File &file) {
    338e:	str.w	r9, [sp, #288]	; 0x120
    3392:	strb.w	r3, [sp, #292]	; 0x124
    3396:	strb.w	r3, [sp, #300]	; 0x12c
		//Serial.println("File copy constructor");
		//static int copycount=0;
		//if (++copycount > 20) while (1) ;
		f = file.f;
    339a:	str	r3, [sp, #304]	; 0x130
    339c:	str	r2, [sp, #296]	; 0x128
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    339e:	ldr.w	r2, [r4, #224]	; 0xe0
    33a2:	cmp	r2, #0
    33a4:	beq.n	343a <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x1be>
    33a6:	ldr	r3, [r2, #16]
    33a8:	subs	r3, #1
    33aa:	str	r3, [r2, #16]
    33ac:	cmp	r3, #0
    33ae:	bne.n	343a <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x1be>
    33b0:	ldr.w	r7, [r4, #224]	; 0xe0
    33b4:	cmp	r7, #0
    33b6:	beq.n	343a <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x1be>
    33b8:	ldr	r3, [r7, #0]
    33ba:	ldr	r0, [pc, #632]	; (3634 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3b8>)
    33bc:	ldr	r3, [r3, #32]
    33be:	cmp	r3, r0
    33c0:	bne.w	3860 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5e4>
    33c4:	ldr	r2, [r7, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    33c6:	str.w	r9, [r7]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    33ca:	cbz	r2, 3432 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x1b6>
    33cc:	ldr	r3, [r2, #16]
    33ce:	subs	r3, #1
    33d0:	str	r3, [r2, #16]
    33d2:	cbnz	r3, 3432 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x1b6>
    33d4:	ldr.w	sl, [r7, #16]
    33d8:	cmp.w	sl, #0
    33dc:	beq.n	3432 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x1b6>
    33de:	ldr.w	r3, [sl]
    33e2:	ldr	r3, [r3, #32]
    33e4:	cmp	r3, r0
    33e6:	bne.w	3a2e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x7b2>
    33ea:	ldr.w	r2, [sl, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    33ee:	ldr	r3, [pc, #584]	; (3638 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3bc>)
    33f0:	str.w	r3, [sl]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    33f4:	cbz	r2, 342a <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x1ae>
    33f6:	ldr	r3, [r2, #16]
    33f8:	subs	r3, #1
    33fa:	str	r3, [r2, #16]
    33fc:	cbnz	r3, 342a <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x1ae>
    33fe:	ldr.w	r3, [sl, #16]
    3402:	cbz	r3, 342a <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x1ae>
    3404:	ldr	r2, [r3, #0]
    3406:	ldr	r2, [r2, #32]
    3408:	cmp	r2, r0
    340a:	bne.w	3a40 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x7c4>
    340e:	ldr	r1, [r3, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    3410:	str.w	r9, [r3]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    3414:	cbz	r1, 3422 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x1a6>
    3416:	ldr	r2, [r1, #16]
    3418:	subs	r2, #1
    341a:	str	r2, [r1, #16]
    341c:	cmp	r2, #0
    341e:	beq.w	3878 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5fc>
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
		invalidate();
	}
    3422:	mov	r0, r3
    3424:	movs	r1, #20
    3426:	bl	e950 <operator delete(void*, unsigned int)>
    342a:	mov	r0, sl
    342c:	movs	r1, #20
    342e:	bl	e950 <operator delete(void*, unsigned int)>
    3432:	mov	r0, r7
    3434:	movs	r1, #20
    3436:	bl	e950 <operator delete(void*, unsigned int)>
	File& operator = (const File &file) {
		//Serial.println("File assignment");
		//static int assigncount=0;
		//if (++assigncount > 20) while (1) ;
		invalidate();
		f = file.f;
    343a:	ldr	r3, [sp, #304]	; 0x130
    343c:	str.w	r3, [r4, #224]	; 0xe0
		if (f) f->refcount++;
    3440:	cmp	r3, #0
    3442:	beq.n	34e6 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x26a>
    3444:	ldr	r2, [r3, #16]
    3446:	adds	r2, #1
    3448:	str	r2, [r3, #16]
    344a:	ldr	r2, [sp, #304]	; 0x130
		return *this;
	}
	virtual ~File() {
    344c:	str.w	r9, [sp, #288]	; 0x120
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    3450:	cmp	r2, #0
    3452:	beq.n	34e6 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x26a>
    3454:	ldr	r3, [r2, #16]
    3456:	subs	r3, #1
    3458:	str	r3, [r2, #16]
    345a:	cmp	r3, #0
    345c:	bne.n	34e6 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x26a>
    345e:	ldr	r7, [sp, #304]	; 0x130
    3460:	cmp	r7, #0
    3462:	beq.n	34e6 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x26a>
    3464:	ldr	r3, [r7, #0]
    3466:	ldr	r0, [pc, #460]	; (3634 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3b8>)
    3468:	ldr	r3, [r3, #32]
    346a:	cmp	r3, r0
    346c:	bne.w	385a <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5de>
    3470:	ldr	r2, [r7, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    3472:	ldr	r3, [pc, #452]	; (3638 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3bc>)
    3474:	str	r3, [r7, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    3476:	cbz	r2, 34de <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x262>
    3478:	ldr	r3, [r2, #16]
    347a:	subs	r3, #1
    347c:	str	r3, [r2, #16]
    347e:	cbnz	r3, 34de <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x262>
    3480:	ldr.w	sl, [r7, #16]
    3484:	cmp.w	sl, #0
    3488:	beq.n	34de <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x262>
    348a:	ldr.w	r3, [sl]
    348e:	ldr	r3, [r3, #32]
    3490:	cmp	r3, r0
    3492:	bne.w	3a34 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x7b8>
    3496:	ldr.w	r2, [sl, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    349a:	ldr	r3, [pc, #412]	; (3638 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3bc>)
    349c:	str.w	r3, [sl]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    34a0:	cbz	r2, 34d6 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x25a>
    34a2:	ldr	r3, [r2, #16]
    34a4:	subs	r3, #1
    34a6:	str	r3, [r2, #16]
    34a8:	cbnz	r3, 34d6 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x25a>
    34aa:	ldr.w	r3, [sl, #16]
    34ae:	cbz	r3, 34d6 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x25a>
    34b0:	ldr	r2, [r3, #0]
    34b2:	ldr	r2, [r2, #32]
    34b4:	cmp	r2, r0
    34b6:	bne.w	3a3a <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x7be>
    34ba:	ldr	r1, [r3, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    34bc:	str.w	r9, [r3]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    34c0:	cbz	r1, 34ce <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x252>
    34c2:	ldr	r2, [r1, #16]
    34c4:	subs	r2, #1
    34c6:	str	r2, [r1, #16]
    34c8:	cmp	r2, #0
    34ca:	beq.w	3956 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x6da>
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
		invalidate();
	}
    34ce:	mov	r0, r3
    34d0:	movs	r1, #20
    34d2:	bl	e950 <operator delete(void*, unsigned int)>
    34d6:	mov	r0, sl
    34d8:	movs	r1, #20
    34da:	bl	e950 <operator delete(void*, unsigned int)>
    34de:	mov	r0, r7
    34e0:	movs	r1, #20
    34e2:	bl	e950 <operator delete(void*, unsigned int)>
	}
	virtual void close() {
		if (f) f->close();
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
    34e6:	ldr.w	r0, [r4, #224]	; 0xe0
    34ea:	cmp	r0, #0
    34ec:	beq.w	3616 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x39a>
    34f0:	ldr	r3, [r0, #0]
    34f2:	ldr	r3, [r3, #68]	; 0x44
    34f4:	cmp	r3, r8
    34f6:	bne.w	3630 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3b4>
    34fa:	ldr	r0, [r0, #16]
    34fc:	cmp	r0, #0
    34fe:	beq.w	3616 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x39a>
    3502:	ldr	r3, [r0, #0]
    3504:	ldr	r3, [r3, #68]	; 0x44
    3506:	cmp	r3, r8
    3508:	bne.w	3630 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3b4>
    350c:	ldr	r0, [r0, #16]
    350e:	cmp	r0, #0
    3510:	beq.w	3616 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x39a>
    3514:	ldr	r3, [r0, #0]
    3516:	ldr	r3, [r3, #68]	; 0x44
    3518:	cmp	r3, r8
    351a:	bne.w	3630 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3b4>
    351e:	ldr	r0, [r0, #16]
    3520:	cmp	r0, #0
    3522:	beq.n	3616 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x39a>
    3524:	ldr	r3, [r0, #0]
    3526:	ldr	r3, [r3, #68]	; 0x44
    3528:	cmp	r3, r8
    352a:	bne.w	3630 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3b4>
    352e:	ldr	r0, [r0, #16]
    3530:	cmp	r0, #0
    3532:	beq.n	3616 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x39a>
    3534:	ldr	r3, [r0, #0]
    3536:	ldr	r3, [r3, #68]	; 0x44
    3538:	cmp	r3, r8
    353a:	bne.n	3630 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3b4>
    353c:	ldr	r0, [r0, #16]
    353e:	cmp	r0, #0
    3540:	beq.n	3616 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x39a>
    3542:	ldr	r3, [r0, #0]
    3544:	ldr	r3, [r3, #68]	; 0x44
    3546:	cmp	r3, r8
    3548:	bne.n	3630 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3b4>
    354a:	ldr	r0, [r0, #16]
    354c:	cmp	r0, #0
    354e:	beq.n	3616 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x39a>
    3550:	ldr	r3, [r0, #0]
    3552:	ldr	r3, [r3, #68]	; 0x44
    3554:	cmp	r3, r8
    3556:	bne.n	3630 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3b4>
    3558:	ldr	r0, [r0, #16]
    355a:	cmp	r0, #0
    355c:	beq.n	3616 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x39a>
    355e:	ldr	r3, [r0, #0]
    3560:	ldr	r3, [r3, #68]	; 0x44
    3562:	cmp	r3, r8
    3564:	bne.n	3630 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3b4>
    3566:	ldr	r0, [r0, #16]
    3568:	cmp	r0, #0
    356a:	beq.n	3616 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x39a>
    356c:	ldr	r3, [r0, #0]
    356e:	ldr	r3, [r3, #68]	; 0x44
    3570:	blx	r3
      int sibling = 0;
      while (true) 
      { mtp_lock_storage(true);
        child_=file_.openNextFile();
        mtp_lock_storage(false);
        if(!sd_isOpen(child_)) break;
    3572:	cmp	r0, #0
    3574:	beq.n	3616 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x39a>
	}
	virtual const char* name() {
		return (f) ? f->name() : "";
	}
	virtual bool isDirectory() {
		return (f) ? f->isDirectory() : false;
    3576:	ldr.w	r3, [r4, #224]	; 0xe0

        Record r;
        r.store = record.store;
    357a:	ldrh.w	r2, [sp, #30]
        r.parent = i;
    357e:	str	r6, [sp, #288]	; 0x120
        r.sibling = sibling;
    3580:	str	r5, [sp, #296]	; 0x128
        child_=file_.openNextFile();
        mtp_lock_storage(false);
        if(!sd_isOpen(child_)) break;

        Record r;
        r.store = record.store;
    3582:	strh.w	r2, [sp, #302]	; 0x12e
    3586:	cmp	r3, #0
    3588:	beq.w	37b2 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x536>
    358c:	ldr	r1, [r3, #0]
    358e:	ldr	r2, [pc, #172]	; (363c <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3c0>)
    3590:	ldr	r1, [r1, #76]	; 0x4c
    3592:	cmp	r1, r2
    3594:	bne.n	3648 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3cc>
    3596:	ldr	r0, [r3, #16]
    3598:	cmp	r0, #0
    359a:	beq.w	37b2 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x536>
    359e:	ldr	r1, [r0, #0]
    35a0:	ldr	r1, [r1, #76]	; 0x4c
    35a2:	cmp	r1, r2
    35a4:	bne.n	364a <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3ce>
    35a6:	ldr	r0, [r0, #16]
    35a8:	cmp	r0, #0
    35aa:	beq.w	37b2 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x536>
    35ae:	ldr	r1, [r0, #0]
    35b0:	ldr	r1, [r1, #76]	; 0x4c
    35b2:	cmp	r1, r2
    35b4:	bne.n	364a <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3ce>
    35b6:	ldr	r0, [r0, #16]
    35b8:	cmp	r0, #0
    35ba:	beq.w	37b2 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x536>
    35be:	ldr	r1, [r0, #0]
    35c0:	ldr	r1, [r1, #76]	; 0x4c
    35c2:	cmp	r1, r2
    35c4:	bne.n	364a <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3ce>
    35c6:	ldr	r0, [r0, #16]
    35c8:	cmp	r0, #0
    35ca:	beq.w	37b2 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x536>
    35ce:	ldr	r1, [r0, #0]
    35d0:	ldr	r1, [r1, #76]	; 0x4c
    35d2:	cmp	r1, r2
    35d4:	bne.n	364a <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3ce>
    35d6:	ldr	r0, [r0, #16]
    35d8:	cmp	r0, #0
    35da:	beq.w	37b2 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x536>
    35de:	ldr	r1, [r0, #0]
    35e0:	ldr	r1, [r1, #76]	; 0x4c
    35e2:	cmp	r1, r2
    35e4:	bne.n	364a <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3ce>
    35e6:	ldr	r0, [r0, #16]
    35e8:	cmp	r0, #0
    35ea:	beq.w	37b2 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x536>
    35ee:	ldr	r1, [r0, #0]
    35f0:	ldr	r1, [r1, #76]	; 0x4c
    35f2:	cmp	r1, r2
    35f4:	bne.n	364a <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3ce>
    35f6:	ldr	r0, [r0, #16]
    35f8:	cmp	r0, #0
    35fa:	beq.w	37b2 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x536>
    35fe:	ldr	r1, [r0, #0]
    3600:	ldr	r1, [r1, #76]	; 0x4c
    3602:	cmp	r1, r2
    3604:	bne.n	364a <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3ce>
    3606:	ldr	r0, [r0, #16]
    3608:	cmp	r0, #0
    360a:	beq.w	37b2 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x536>
    360e:	ldr	r3, [r0, #0]
    3610:	ldr	r3, [r3, #76]	; 0x4c
    3612:	blx	r3
    3614:	b.n	364c <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3d0>
        r.scanned = false;
        sd_getName(child_,r.name, MAX_FILENAME_LEN);
        sibling = AppendIndexRecord(r);
        child_.close();
      }
      record.scanned = true;
    3616:	movs	r3, #1
      record.child = sibling;
      WriteIndexRecord(i, record);
    3618:	mov	r1, r6
    361a:	mov	r0, r4
    361c:	add	r2, sp, #16
        sd_getName(child_,r.name, MAX_FILENAME_LEN);
        sibling = AppendIndexRecord(r);
        child_.close();
      }
      record.scanned = true;
      record.child = sibling;
    361e:	str	r5, [sp, #20]
        r.scanned = false;
        sd_getName(child_,r.name, MAX_FILENAME_LEN);
        sibling = AppendIndexRecord(r);
        child_.close();
      }
      record.scanned = true;
    3620:	strb.w	r3, [sp, #29]
      record.child = sibling;
      WriteIndexRecord(i, record);
    3624:	bl	24b0 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    }
  }
    3628:	add.w	sp, sp, #564	; 0x234
    362c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	}
	virtual void close() {
		if (f) f->close();
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
    3630:	blx	r3
    3632:	b.n	3572 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x2f6>
    3634:	.word	0x00000f25
    3638:	.word	0x000141ac
    363c:	.word	0x00000521
    3640:	.word	0x00000501
    3644:	.word	0x0000052d
	}
	virtual const char* name() {
		return (f) ? f->name() : "";
	}
	virtual bool isDirectory() {
		return (f) ? f->isDirectory() : false;
    3648:	mov	r0, r3
    364a:	blx	r1

        Record r;
        r.store = record.store;
        r.parent = i;
        r.sibling = sibling;
        r.isdir = child_.isDirectory();
    364c:	strb.w	r0, [sp, #300]	; 0x12c
    3650:	ldr.w	r3, [r4, #224]	; 0xe0
        r.child = r.isdir ? 0 : (uint32_t) child_.size();
    3654:	cmp	r0, #0
    3656:	beq.w	37b8 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x53c>
    365a:	movs	r0, #0
        r.scanned = false;
    365c:	movs	r2, #0
        Record r;
        r.store = record.store;
        r.parent = i;
        r.sibling = sibling;
        r.isdir = child_.isDirectory();
        r.child = r.isdir ? 0 : (uint32_t) child_.size();
    365e:	str	r0, [sp, #292]	; 0x124
        r.scanned = false;
    3660:	strb.w	r2, [sp, #301]	; 0x12d
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
	}
	virtual const char* name() {
		return (f) ? f->name() : "";
    3664:	cmp	r3, #0
    3666:	beq.w	383a <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5be>
    366a:	ldr	r1, [r3, #0]
    366c:	ldr	r2, [pc, #504]	; (3868 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5ec>)
    366e:	ldr	r1, [r1, #72]	; 0x48
    3670:	cmp	r1, r2
    3672:	bne.w	3832 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5b6>
    3676:	ldr	r0, [r3, #16]
    3678:	cmp	r0, #0
    367a:	beq.w	383a <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5be>
    367e:	ldr	r3, [r0, #0]
    3680:	ldr	r3, [r3, #72]	; 0x48
    3682:	cmp	r3, r2
    3684:	bne.n	36f8 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x47c>
    3686:	ldr	r0, [r0, #16]
    3688:	cmp	r0, #0
    368a:	beq.w	383a <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5be>
    368e:	ldr	r3, [r0, #0]
    3690:	ldr	r3, [r3, #72]	; 0x48
    3692:	cmp	r3, r2
    3694:	bne.n	36f8 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x47c>
    3696:	ldr	r0, [r0, #16]
    3698:	cmp	r0, #0
    369a:	beq.w	383a <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5be>
    369e:	ldr	r3, [r0, #0]
    36a0:	ldr	r3, [r3, #72]	; 0x48
    36a2:	cmp	r3, r2
    36a4:	bne.n	36f8 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x47c>
    36a6:	ldr	r0, [r0, #16]
    36a8:	cmp	r0, #0
    36aa:	beq.w	383a <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5be>
    36ae:	ldr	r3, [r0, #0]
    36b0:	ldr	r3, [r3, #72]	; 0x48
    36b2:	cmp	r3, r2
    36b4:	bne.n	36f8 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x47c>
    36b6:	ldr	r0, [r0, #16]
    36b8:	cmp	r0, #0
    36ba:	beq.w	383a <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5be>
    36be:	ldr	r3, [r0, #0]
    36c0:	ldr	r3, [r3, #72]	; 0x48
    36c2:	cmp	r3, r2
    36c4:	bne.n	36f8 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x47c>
    36c6:	ldr	r0, [r0, #16]
    36c8:	cmp	r0, #0
    36ca:	beq.w	383a <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5be>
    36ce:	ldr	r3, [r0, #0]
    36d0:	ldr	r3, [r3, #72]	; 0x48
    36d2:	cmp	r3, r2
    36d4:	bne.n	36f8 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x47c>
    36d6:	ldr	r0, [r0, #16]
    36d8:	cmp	r0, #0
    36da:	beq.w	383a <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5be>
    36de:	ldr	r3, [r0, #0]
    36e0:	ldr	r3, [r3, #72]	; 0x48
    36e2:	cmp	r3, r2
    36e4:	bne.n	36f8 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x47c>
    36e6:	ldr	r0, [r0, #16]
    36e8:	cmp	r0, #0
    36ea:	beq.w	383a <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5be>
    36ee:	ldr	r3, [r0, #0]
    36f0:	ldr	r3, [r3, #72]	; 0x48
    36f2:	blx	r3
    36f4:	mov	r1, r0
    36f6:	b.n	36fc <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x480>
    36f8:	blx	r3
    36fa:	mov	r1, r0
        sd_getName(child_,r.name, MAX_FILENAME_LEN);
    36fc:	mov.w	r2, #256	; 0x100
    3700:	add	r0, sp, #304	; 0x130
    3702:	bl	10cd0 <strlcpy>
    index_.write((char*)&r, sizeof(r));
    mtp_lock_storage(false);
  }

  uint32_t MTPStorage_SD::AppendIndexRecord(const Record& r) 
  { uint32_t new_record = index_entries_++;
    3706:	ldr.w	r5, [r4, #244]	; 0xf4
    370a:	adds	r3, r5, #1
    WriteIndexRecord(new_record, r);
    370c:	mov	r0, r4
    index_.write((char*)&r, sizeof(r));
    mtp_lock_storage(false);
  }

  uint32_t MTPStorage_SD::AppendIndexRecord(const Record& r) 
  { uint32_t new_record = index_entries_++;
    370e:	str.w	r3, [r4, #244]	; 0xf4
    WriteIndexRecord(new_record, r);
    3712:	mov	r1, r5
    3714:	add	r2, sp, #288	; 0x120
    3716:	bl	24b0 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
	}
	virtual uint64_t size() {
		return (f) ? f->size() : 0;
	}
	virtual void close() {
		if (f) f->close();
    371a:	ldr.w	r0, [r4, #224]	; 0xe0
    371e:	cmp	r0, #0
    3720:	beq.w	331c <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0xa0>
    3724:	ldr	r2, [r0, #0]
    3726:	ldr	r3, [pc, #324]	; (386c <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5f0>)
    3728:	ldr	r2, [r2, #64]	; 0x40
    372a:	cmp	r2, r3
    372c:	bne.n	37ae <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x532>
    372e:	ldr	r0, [r0, #16]
    3730:	cmp	r0, #0
    3732:	beq.w	331c <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0xa0>
    3736:	ldr	r2, [r0, #0]
    3738:	ldr	r2, [r2, #64]	; 0x40
    373a:	cmp	r2, r3
    373c:	bne.n	37ae <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x532>
    373e:	ldr	r0, [r0, #16]
    3740:	cmp	r0, #0
    3742:	beq.w	331c <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0xa0>
    3746:	ldr	r2, [r0, #0]
    3748:	ldr	r2, [r2, #64]	; 0x40
    374a:	cmp	r2, r3
    374c:	bne.n	37ae <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x532>
    374e:	ldr	r0, [r0, #16]
    3750:	cmp	r0, #0
    3752:	beq.w	331c <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0xa0>
    3756:	ldr	r2, [r0, #0]
    3758:	ldr	r2, [r2, #64]	; 0x40
    375a:	cmp	r2, r3
    375c:	bne.n	37ae <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x532>
    375e:	ldr	r0, [r0, #16]
    3760:	cmp	r0, #0
    3762:	beq.w	331c <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0xa0>
    3766:	ldr	r2, [r0, #0]
    3768:	ldr	r2, [r2, #64]	; 0x40
    376a:	cmp	r2, r3
    376c:	bne.n	37ae <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x532>
    376e:	ldr	r0, [r0, #16]
    3770:	cmp	r0, #0
    3772:	beq.w	331c <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0xa0>
    3776:	ldr	r2, [r0, #0]
    3778:	ldr	r2, [r2, #64]	; 0x40
    377a:	cmp	r2, r3
    377c:	bne.n	37ae <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x532>
    377e:	ldr	r0, [r0, #16]
    3780:	cmp	r0, #0
    3782:	beq.w	331c <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0xa0>
    3786:	ldr	r2, [r0, #0]
    3788:	ldr	r2, [r2, #64]	; 0x40
    378a:	cmp	r2, r3
    378c:	bne.n	37ae <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x532>
    378e:	ldr	r0, [r0, #16]
    3790:	cmp	r0, #0
    3792:	beq.w	331c <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0xa0>
    3796:	ldr	r2, [r0, #0]
    3798:	ldr	r2, [r2, #64]	; 0x40
    379a:	cmp	r2, r3
    379c:	bne.n	37ae <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x532>
    379e:	ldr	r0, [r0, #16]
    37a0:	cmp	r0, #0
    37a2:	beq.w	331c <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0xa0>
    37a6:	ldr	r3, [r0, #0]
    37a8:	ldr	r3, [r3, #64]	; 0x40
    37aa:	blx	r3
    37ac:	b.n	331c <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0xa0>
    37ae:	blx	r2
    if (record.isdir && !record.scanned) {
      OpenFileByIndex(i);
      if (!sd_isOpen(file_)) return;
    
      int sibling = 0;
      while (true) 
    37b0:	b.n	331c <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0xa0>

        Record r;
        r.store = record.store;
        r.parent = i;
        r.sibling = sibling;
        r.isdir = child_.isDirectory();
    37b2:	movs	r2, #0
    37b4:	strb.w	r2, [sp, #300]	; 0x12c
	}
	virtual uint64_t position() {
		return (f) ? f->position() : 0;
	}
	virtual uint64_t size() {
		return (f) ? f->size() : 0;
    37b8:	cmp	r3, #0
    37ba:	beq.n	3850 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5d4>
    37bc:	ldr	r1, [r3, #0]
    37be:	ldr	r2, [pc, #176]	; (3870 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5f4>)
    37c0:	ldr	r1, [r1, #60]	; 0x3c
    37c2:	cmp	r1, r2
    37c4:	bne.n	3846 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5ca>
    37c6:	ldr	r0, [r3, #16]
    37c8:	cbz	r0, 381e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5a2>
    37ca:	ldr	r1, [r0, #0]
    37cc:	ldr	r1, [r1, #60]	; 0x3c
    37ce:	cmp	r1, r2
    37d0:	bne.n	3848 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5cc>
    37d2:	ldr	r0, [r0, #16]
    37d4:	cbz	r0, 381e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5a2>
    37d6:	ldr	r1, [r0, #0]
    37d8:	ldr	r1, [r1, #60]	; 0x3c
    37da:	cmp	r1, r2
    37dc:	bne.n	3848 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5cc>
    37de:	ldr	r0, [r0, #16]
    37e0:	cbz	r0, 381e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5a2>
    37e2:	ldr	r1, [r0, #0]
    37e4:	ldr	r1, [r1, #60]	; 0x3c
    37e6:	cmp	r1, r2
    37e8:	bne.n	3848 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5cc>
    37ea:	ldr	r0, [r0, #16]
    37ec:	cbz	r0, 381e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5a2>
    37ee:	ldr	r1, [r0, #0]
    37f0:	ldr	r1, [r1, #60]	; 0x3c
    37f2:	cmp	r1, r2
    37f4:	bne.n	3848 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5cc>
    37f6:	ldr	r0, [r0, #16]
    37f8:	cbz	r0, 381e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5a2>
    37fa:	ldr	r1, [r0, #0]
    37fc:	ldr	r1, [r1, #60]	; 0x3c
    37fe:	cmp	r1, r2
    3800:	bne.n	3848 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5cc>
    3802:	ldr	r0, [r0, #16]
    3804:	cbz	r0, 381e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5a2>
    3806:	ldr	r1, [r0, #0]
    3808:	ldr	r1, [r1, #60]	; 0x3c
    380a:	cmp	r1, r2
    380c:	bne.n	3848 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5cc>
    380e:	ldr	r0, [r0, #16]
    3810:	cbz	r0, 381e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5a2>
    3812:	ldr	r3, [r0, #0]
    3814:	ldr	r3, [r3, #60]	; 0x3c
    3816:	blx	r3
    3818:	ldr.w	r3, [r4, #224]	; 0xe0
    381c:	b.n	365c <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3e0>
        r.child = r.isdir ? 0 : (uint32_t) child_.size();
    381e:	movs	r2, #0
        r.scanned = false;
    3820:	strb.w	r2, [sp, #301]	; 0x12d
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
	}
	virtual const char* name() {
		return (f) ? f->name() : "";
    3824:	ldr	r1, [r3, #0]
        Record r;
        r.store = record.store;
        r.parent = i;
        r.sibling = sibling;
        r.isdir = child_.isDirectory();
        r.child = r.isdir ? 0 : (uint32_t) child_.size();
    3826:	str	r2, [sp, #292]	; 0x124
    3828:	ldr	r1, [r1, #72]	; 0x48
    382a:	ldr	r2, [pc, #60]	; (3868 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5ec>)
    382c:	cmp	r1, r2
    382e:	beq.w	3676 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3fa>
    3832:	mov	r0, r3
    3834:	blx	r1
    3836:	mov	r1, r0
    3838:	b.n	36fc <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x480>
    383a:	ldr	r1, [pc, #56]	; (3874 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5f8>)
    383c:	b.n	36fc <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x480>
	}
	virtual bool isDirectory() {
		return (f) ? f->isDirectory() : false;
	}
	virtual File openNextFile(uint8_t mode=0) {
		return (f) ? f->openNextFile(mode) : *this;
    383e:	movs	r2, #0
    3840:	add	r0, sp, #288	; 0x120
    3842:	blx	r3
    3844:	b.n	339e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x122>
	}
	virtual uint64_t position() {
		return (f) ? f->position() : 0;
	}
	virtual uint64_t size() {
		return (f) ? f->size() : 0;
    3846:	mov	r0, r3
    3848:	blx	r1
    384a:	ldr.w	r3, [r4, #224]	; 0xe0
    384e:	b.n	365c <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3e0>
    3850:	str	r3, [sp, #292]	; 0x124
        r.scanned = false;
    3852:	strb.w	r3, [sp, #301]	; 0x12d
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
	}
	virtual const char* name() {
		return (f) ? f->name() : "";
    3856:	ldr	r1, [pc, #28]	; (3874 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5f8>)
    3858:	b.n	36fc <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x480>
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    385a:	mov	r0, r7
    385c:	blx	r3
    385e:	b.n	34e6 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x26a>
    3860:	mov	r0, r7
    3862:	blx	r3
    3864:	b.n	343a <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x1be>
    3866:	nop
    3868:	.word	0x0000050d
    386c:	.word	0x000004f5
    3870:	.word	0x000004e5
    3874:	.word	0x00014360
    3878:	ldr	r2, [r3, #16]
    387a:	cmp	r2, #0
    387c:	beq.w	3422 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x1a6>
    3880:	ldr	r1, [r2, #0]
    3882:	ldr	r1, [r1, #32]
    3884:	cmp	r1, r0
    3886:	bne.w	3a50 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x7d4>
    388a:	ldr.w	lr, [r2, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    388e:	str.w	r9, [r2]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    3892:	cmp.w	lr, #0
    3896:	beq.n	3948 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x6cc>
    3898:	ldr.w	r1, [lr, #16]
    389c:	subs	r1, #1
    389e:	str.w	r1, [lr, #16]
    38a2:	cmp	r1, #0
    38a4:	bne.n	3948 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x6cc>
    38a6:	ldr	r1, [r2, #16]
    38a8:	str	r1, [sp, #0]
    38aa:	cmp	r1, #0
    38ac:	beq.n	3948 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x6cc>
    38ae:	ldr	r1, [sp, #0]
    38b0:	ldr	r1, [r1, #0]
    38b2:	ldr	r1, [r1, #32]
    38b4:	cmp	r1, r0
    38b6:	bne.w	3a68 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x7ec>
    38ba:	ldr	r1, [sp, #0]
    38bc:	ldr.w	lr, [r1, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    38c0:	str.w	r9, [r1]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    38c4:	cmp.w	lr, #0
    38c8:	beq.n	3938 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x6bc>
    38ca:	ldr.w	r1, [lr, #16]
    38ce:	subs	r1, #1
    38d0:	str.w	r1, [lr, #16]
    38d4:	cbnz	r1, 3938 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x6bc>
    38d6:	ldr	r1, [sp, #0]
    38d8:	ldr.w	ip, [r1, #16]
    38dc:	cmp.w	ip, #0
    38e0:	beq.n	3938 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x6bc>
    38e2:	ldr.w	r1, [ip]
    38e6:	ldr	r1, [r1, #32]
    38e8:	cmp	r1, r0
    38ea:	bne.w	3a84 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x808>
    38ee:	ldr.w	r0, [ip, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    38f2:	str.w	r9, [ip]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    38f6:	cbz	r0, 3928 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x6ac>
    38f8:	ldr	r1, [r0, #16]
    38fa:	add.w	lr, r1, #4294967295
    38fe:	str.w	lr, [r0, #16]
    3902:	cmp.w	lr, #0
    3906:	bne.n	3928 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x6ac>
    3908:	ldr.w	r0, [ip, #16]
    390c:	cbz	r0, 3928 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x6ac>
    390e:	ldr.w	lr, [r0]
    3912:	str.w	ip, [sp, #12]
    3916:	str	r2, [sp, #8]
    3918:	str	r3, [sp, #4]
    391a:	ldr.w	r3, [lr, #32]
    391e:	blx	r3
    3920:	ldr.w	ip, [sp, #12]
    3924:	ldr	r2, [sp, #8]
    3926:	ldr	r3, [sp, #4]
    3928:	str	r2, [sp, #8]
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
		invalidate();
	}
    392a:	mov	r0, ip
    392c:	movs	r1, #20
    392e:	str	r3, [sp, #4]
    3930:	bl	e950 <operator delete(void*, unsigned int)>
    3934:	ldr	r3, [sp, #4]
    3936:	ldr	r2, [sp, #8]
    3938:	ldr	r0, [sp, #0]
    393a:	str	r2, [sp, #8]
    393c:	movs	r1, #20
    393e:	str	r3, [sp, #4]
    3940:	bl	e950 <operator delete(void*, unsigned int)>
    3944:	ldr	r3, [sp, #4]
    3946:	ldr	r2, [sp, #8]
    3948:	str	r3, [sp, #0]
    394a:	mov	r0, r2
    394c:	movs	r1, #20
    394e:	bl	e950 <operator delete(void*, unsigned int)>
    3952:	ldr	r3, [sp, #0]
    3954:	b.n	3422 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x1a6>
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    3956:	ldr	r2, [r3, #16]
    3958:	cmp	r2, #0
    395a:	beq.w	34ce <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x252>
    395e:	ldr	r1, [r2, #0]
    3960:	ldr	r1, [r1, #32]
    3962:	cmp	r1, r0
    3964:	bne.n	3a46 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x7ca>
    3966:	ldr.w	lr, [r2, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    396a:	str.w	r9, [r2]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    396e:	cmp.w	lr, #0
    3972:	beq.n	3a20 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x7a4>
    3974:	ldr.w	r1, [lr, #16]
    3978:	subs	r1, #1
    397a:	str.w	r1, [lr, #16]
    397e:	cmp	r1, #0
    3980:	bne.n	3a20 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x7a4>
    3982:	ldr	r1, [r2, #16]
    3984:	str	r1, [sp, #0]
    3986:	cmp	r1, #0
    3988:	beq.n	3a20 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x7a4>
    398a:	ldr	r1, [sp, #0]
    398c:	ldr	r1, [r1, #0]
    398e:	ldr	r1, [r1, #32]
    3990:	cmp	r1, r0
    3992:	bne.n	3a5a <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x7de>
    3994:	ldr	r1, [sp, #0]
    3996:	ldr.w	lr, [r1, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    399a:	str.w	r9, [r1]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    399e:	cmp.w	lr, #0
    39a2:	beq.n	3a10 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x794>
    39a4:	ldr.w	r1, [lr, #16]
    39a8:	subs	r1, #1
    39aa:	str.w	r1, [lr, #16]
    39ae:	cbnz	r1, 3a10 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x794>
    39b0:	ldr	r1, [sp, #0]
    39b2:	ldr.w	ip, [r1, #16]
    39b6:	cmp.w	ip, #0
    39ba:	beq.n	3a10 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x794>
    39bc:	ldr.w	r1, [ip]
    39c0:	ldr	r1, [r1, #32]
    39c2:	cmp	r1, r0
    39c4:	bne.n	3a76 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x7fa>
    39c6:	ldr.w	r0, [ip, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    39ca:	str.w	r9, [ip]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    39ce:	cbz	r0, 3a00 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x784>
    39d0:	ldr	r1, [r0, #16]
    39d2:	add.w	lr, r1, #4294967295
    39d6:	str.w	lr, [r0, #16]
    39da:	cmp.w	lr, #0
    39de:	bne.n	3a00 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x784>
    39e0:	ldr.w	r0, [ip, #16]
    39e4:	cbz	r0, 3a00 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x784>
    39e6:	ldr.w	lr, [r0]
    39ea:	str.w	ip, [sp, #12]
    39ee:	str	r2, [sp, #8]
    39f0:	str	r3, [sp, #4]
    39f2:	ldr.w	r3, [lr, #32]
    39f6:	blx	r3
    39f8:	ldr.w	ip, [sp, #12]
    39fc:	ldr	r2, [sp, #8]
    39fe:	ldr	r3, [sp, #4]
    3a00:	str	r2, [sp, #8]
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
		invalidate();
	}
    3a02:	mov	r0, ip
    3a04:	movs	r1, #20
    3a06:	str	r3, [sp, #4]
    3a08:	bl	e950 <operator delete(void*, unsigned int)>
    3a0c:	ldr	r3, [sp, #4]
    3a0e:	ldr	r2, [sp, #8]
    3a10:	ldr	r0, [sp, #0]
    3a12:	str	r2, [sp, #8]
    3a14:	movs	r1, #20
    3a16:	str	r3, [sp, #4]
    3a18:	bl	e950 <operator delete(void*, unsigned int)>
    3a1c:	ldr	r3, [sp, #4]
    3a1e:	ldr	r2, [sp, #8]
    3a20:	str	r3, [sp, #0]
    3a22:	mov	r0, r2
    3a24:	movs	r1, #20
    3a26:	bl	e950 <operator delete(void*, unsigned int)>
    3a2a:	ldr	r3, [sp, #0]
    3a2c:	b.n	34ce <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x252>
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    3a2e:	mov	r0, sl
    3a30:	blx	r3
    3a32:	b.n	3432 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x1b6>
    3a34:	mov	r0, sl
    3a36:	blx	r3
    3a38:	b.n	34de <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x262>
    3a3a:	mov	r0, r3
    3a3c:	blx	r2
    3a3e:	b.n	34d6 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x25a>
    3a40:	mov	r0, r3
    3a42:	blx	r2
    3a44:	b.n	342a <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x1ae>
    3a46:	str	r3, [sp, #0]
    3a48:	mov	r0, r2
    3a4a:	blx	r1
    3a4c:	ldr	r3, [sp, #0]
    3a4e:	b.n	34ce <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x252>
    3a50:	str	r3, [sp, #0]
    3a52:	mov	r0, r2
    3a54:	blx	r1
    3a56:	ldr	r3, [sp, #0]
    3a58:	b.n	3422 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x1a6>
    3a5a:	str	r2, [sp, #8]
    3a5c:	str	r3, [sp, #4]
    3a5e:	ldr	r0, [sp, #0]
    3a60:	blx	r1
    3a62:	ldr	r2, [sp, #8]
    3a64:	ldr	r3, [sp, #4]
    3a66:	b.n	3a20 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x7a4>
    3a68:	str	r2, [sp, #8]
    3a6a:	str	r3, [sp, #4]
    3a6c:	ldr	r0, [sp, #0]
    3a6e:	blx	r1
    3a70:	ldr	r2, [sp, #8]
    3a72:	ldr	r3, [sp, #4]
    3a74:	b.n	3948 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x6cc>
    3a76:	str	r2, [sp, #8]
    3a78:	str	r3, [sp, #4]
    3a7a:	mov	r0, ip
    3a7c:	blx	r1
    3a7e:	ldr	r2, [sp, #8]
    3a80:	ldr	r3, [sp, #4]
    3a82:	b.n	3a10 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x794>
    3a84:	str	r2, [sp, #8]
    3a86:	str	r3, [sp, #4]
    3a88:	mov	r0, ip
    3a8a:	blx	r1
    3a8c:	ldr	r2, [sp, #8]
    3a8e:	ldr	r3, [sp, #4]
    3a90:	b.n	3938 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x6bc>
    3a92:	nop

00003a94 <MTPStorage_SD::ScanAll(unsigned long) [clone .part.7] [clone .constprop.12]>:

  // MTP object handles should not change or be re-used during a session.
  // This would be easy if we could just have a list of all files in memory.
  // Since our RAM is limited, we'll keep the index in a file instead.
  void MTPStorage_SD::GenerateIndex(uint32_t store)
  { if (index_generated) return; 
    3a94:	ldrb.w	r3, [r0, #248]	; 0xf8
    }
  }

  void MTPStorage_SD::ScanAll(uint32_t store) 
  { if (all_scanned_) return;
    all_scanned_ = true;
    3a98:	movs	r2, #1
      record.child = sibling;
      WriteIndexRecord(i, record);
    }
  }

  void MTPStorage_SD::ScanAll(uint32_t store) 
    3a9a:	push	{r4, r5, r6, lr}
    3a9c:	mov	r5, r0
  { if (all_scanned_) return;
    all_scanned_ = true;
    3a9e:	strb.w	r2, [r0, #249]	; 0xf9
      record.child = sibling;
      WriteIndexRecord(i, record);
    }
  }

  void MTPStorage_SD::ScanAll(uint32_t store) 
    3aa2:	mov	r6, r1

  // MTP object handles should not change or be re-used during a session.
  // This would be easy if we could just have a list of all files in memory.
  // Since our RAM is limited, we'll keep the index in a file instead.
  void MTPStorage_SD::GenerateIndex(uint32_t store)
  { if (index_generated) return; 
    3aa4:	cbz	r3, 3ac4 <MTPStorage_SD::ScanAll(unsigned long) [clone .part.7] [clone .constprop.12]+0x30>
  void MTPStorage_SD::ScanAll(uint32_t store) 
  { if (all_scanned_) return;
    all_scanned_ = true;

    GenerateIndex(store);
    for (uint32_t i = 0; i < index_entries_; i++)  ScanDir(store,i);
    3aa6:	ldr.w	r3, [r5, #244]	; 0xf4
    3aaa:	cbz	r3, 3ac2 <MTPStorage_SD::ScanAll(unsigned long) [clone .part.7] [clone .constprop.12]+0x2e>
    3aac:	movs	r4, #0
    3aae:	mov	r2, r4
    3ab0:	mov	r1, r6
    3ab2:	mov	r0, r5
    3ab4:	bl	327c <MTPStorage_SD::ScanDir(unsigned long, unsigned long)>
    3ab8:	ldr.w	r3, [r5, #244]	; 0xf4
    3abc:	adds	r4, #1
    3abe:	cmp	r3, r4
    3ac0:	bhi.n	3aae <MTPStorage_SD::ScanAll(unsigned long) [clone .part.7] [clone .constprop.12]+0x1a>
    3ac2:	pop	{r4, r5, r6, pc}
    3ac4:	bl	260c <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.6] [clone .constprop.14]>
    3ac8:	b.n	3aa6 <MTPStorage_SD::ScanAll(unsigned long) [clone .part.7] [clone .constprop.12]+0x12>
    3aca:	nop

00003acc <MTPStorage_SD::StartGetObjectHandles(unsigned long, unsigned long) [clone .part.8] [clone .constprop.13]>:
  }

  void MTPStorage_SD::StartGetObjectHandles(uint32_t store, uint32_t parent) 
    3acc:	push	{r4, r5, lr}
  { 
    GenerateIndex(store);
    if (parent) 
    { if (parent == 0xFFFFFFFFUL) parent = store; // As per initizalization
    3ace:	cmp.w	r2, #4294967295
    3ad2:	ite	ne
    3ad4:	movne	r5, r2
    3ad6:	moveq	r5, r1

    GenerateIndex(store);
    for (uint32_t i = 0; i < index_entries_; i++)  ScanDir(store,i);
  }

  void MTPStorage_SD::StartGetObjectHandles(uint32_t store, uint32_t parent) 
    3ad8:	mov	r4, r0
    3ada:	sub	sp, #276	; 0x114
  { 
    GenerateIndex(store);
    if (parent) 
    { if (parent == 0xFFFFFFFFUL) parent = store; // As per initizalization

      ScanDir(store, parent);
    3adc:	mov	r2, r5
    3ade:	bl	327c <MTPStorage_SD::ScanDir(unsigned long, unsigned long)>
      follow_sibling_ = true;
    3ae2:	movs	r3, #1
    3ae4:	strb.w	r3, [r4, #256]	; 0x100
      // Root folder?
      next_ = ReadIndexRecord(parent).child;
    3ae8:	mov	r2, r5
    3aea:	mov	r1, r4
    3aec:	mov	r0, sp
    3aee:	bl	2690 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    3af2:	ldr	r3, [sp, #4]
    3af4:	str.w	r3, [r4, #252]	; 0xfc
    { 
      ScanAll(store);
      follow_sibling_ = false;
      next_ = 1;
    }
  }
    3af8:	add	sp, #276	; 0x114
    3afa:	pop	{r4, r5, pc}

00003afc <MTPStorage_SD::StartGetObjectHandles(unsigned long, unsigned long)>:
    GenerateIndex(store);
    for (uint32_t i = 0; i < index_entries_; i++)  ScanDir(store,i);
  }

  void MTPStorage_SD::StartGetObjectHandles(uint32_t store, uint32_t parent) 
  { 
    3afc:	push	{r4, lr}

  // MTP object handles should not change or be re-used during a session.
  // This would be easy if we could just have a list of all files in memory.
  // Since our RAM is limited, we'll keep the index in a file instead.
  void MTPStorage_SD::GenerateIndex(uint32_t store)
  { if (index_generated) return; 
    3afe:	ldrb.w	r3, [r0, #248]	; 0xf8
    GenerateIndex(store);
    for (uint32_t i = 0; i < index_entries_; i++)  ScanDir(store,i);
  }

  void MTPStorage_SD::StartGetObjectHandles(uint32_t store, uint32_t parent) 
  { 
    3b02:	sub	sp, #8
    3b04:	mov	r4, r0

  // MTP object handles should not change or be re-used during a session.
  // This would be easy if we could just have a list of all files in memory.
  // Since our RAM is limited, we'll keep the index in a file instead.
  void MTPStorage_SD::GenerateIndex(uint32_t store)
  { if (index_generated) return; 
    3b06:	cbz	r3, 3b2c <MTPStorage_SD::StartGetObjectHandles(unsigned long, unsigned long)+0x30>
  }

  void MTPStorage_SD::StartGetObjectHandles(uint32_t store, uint32_t parent) 
  { 
    GenerateIndex(store);
    if (parent) 
    3b08:	cbz	r2, 3b16 <MTPStorage_SD::StartGetObjectHandles(unsigned long, unsigned long)+0x1a>
    3b0a:	mov	r0, r4
    { 
      ScanAll(store);
      follow_sibling_ = false;
      next_ = 1;
    }
  }
    3b0c:	add	sp, #8
    3b0e:	ldmia.w	sp!, {r4, lr}
    3b12:	b.w	3acc <MTPStorage_SD::StartGetObjectHandles(unsigned long, unsigned long) [clone .part.8] [clone .constprop.13]>
      WriteIndexRecord(i, record);
    }
  }

  void MTPStorage_SD::ScanAll(uint32_t store) 
  { if (all_scanned_) return;
    3b16:	ldrb.w	r3, [r4, #249]	; 0xf9
    3b1a:	cbz	r3, 3b3a <MTPStorage_SD::StartGetObjectHandles(unsigned long, unsigned long)+0x3e>
      next_ = ReadIndexRecord(parent).child;
    } 
    else 
    { 
      ScanAll(store);
      follow_sibling_ = false;
    3b1c:	movs	r2, #0
      next_ = 1;
    3b1e:	movs	r3, #1
      next_ = ReadIndexRecord(parent).child;
    } 
    else 
    { 
      ScanAll(store);
      follow_sibling_ = false;
    3b20:	strb.w	r2, [r4, #256]	; 0x100
      next_ = 1;
    3b24:	str.w	r3, [r4, #252]	; 0xfc
    }
  }
    3b28:	add	sp, #8
    3b2a:	pop	{r4, pc}
    3b2c:	stmia.w	sp, {r1, r2}
    3b30:	bl	260c <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.6] [clone .constprop.14]>
    3b34:	ldmia.w	sp, {r1, r2}
    3b38:	b.n	3b08 <MTPStorage_SD::StartGetObjectHandles(unsigned long, unsigned long)+0xc>
    3b3a:	mov	r0, r4
    3b3c:	bl	3a94 <MTPStorage_SD::ScanAll(unsigned long) [clone .part.7] [clone .constprop.12]>
    3b40:	b.n	3b1c <MTPStorage_SD::StartGetObjectHandles(unsigned long, unsigned long)+0x20>
    3b42:	nop

00003b44 <MTPStorage_SD::removeFile(unsigned long, char*)>:
    file_.read(out,bytes);
    mtp_lock_storage(false);
  }

void MTPStorage_SD::removeFile(uint32_t store, char *file)
{ 
    3b44:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3b48:	add.w	r9, r0, r1, lsl #2
    3b4c:	sub	sp, #340	; 0x154
    3b4e:	str	r1, [sp, #12]
    }

    uint32_t sd_getFSCount(void) {return fsCount;}
    const char *sd_getFSName(uint32_t store) { return sd_name[store];}

    File sd_open(uint32_t store, const char *filename, uint32_t mode) { return sdx[store]->open(filename,mode);  }
    3b50:	ldr.w	r1, [r9, #88]	; 0x58
    3b54:	str	r0, [sp, #8]
    3b56:	ldr	r3, [r1, #0]
    3b58:	str	r2, [sp, #4]
    3b5a:	ldr	r4, [r3, #0]
    3b5c:	add	r0, sp, #40	; 0x28
    3b5e:	movs	r3, #0
    3b60:	blx	r4
	}
	virtual const char* name() {
		return (f) ? f->name() : "";
	}
	virtual bool isDirectory() {
		return (f) ? f->isDirectory() : false;
    3b62:	ldr	r0, [sp, #56]	; 0x38
    3b64:	cmp	r0, #0
    3b66:	beq.w	3f10 <MTPStorage_SD::removeFile(unsigned long, char*)+0x3cc>
    3b6a:	ldr	r3, [r0, #0]
    3b6c:	ldr.w	sl, [pc, #868]	; 3ed4 <MTPStorage_SD::removeFile(unsigned long, char*)+0x390>
    3b70:	ldr	r3, [r3, #76]	; 0x4c
    3b72:	cmp	r3, sl
    3b74:	bne.w	4074 <MTPStorage_SD::removeFile(unsigned long, char*)+0x530>
    3b78:	ldr	r0, [r0, #16]
    3b7a:	cmp	r0, #0
    3b7c:	beq.w	3f10 <MTPStorage_SD::removeFile(unsigned long, char*)+0x3cc>
    3b80:	ldr	r3, [r0, #0]
    3b82:	ldr	r3, [r3, #76]	; 0x4c
    3b84:	cmp	r3, sl
    3b86:	bne.w	4074 <MTPStorage_SD::removeFile(unsigned long, char*)+0x530>
    3b8a:	ldr	r0, [r0, #16]
    3b8c:	cmp	r0, #0
    3b8e:	beq.w	3f10 <MTPStorage_SD::removeFile(unsigned long, char*)+0x3cc>
    3b92:	ldr	r3, [r0, #0]
    3b94:	ldr	r3, [r3, #76]	; 0x4c
    3b96:	cmp	r3, sl
    3b98:	bne.w	4074 <MTPStorage_SD::removeFile(unsigned long, char*)+0x530>
    3b9c:	ldr	r0, [r0, #16]
    3b9e:	cmp	r0, #0
    3ba0:	beq.w	3f10 <MTPStorage_SD::removeFile(unsigned long, char*)+0x3cc>
    3ba4:	ldr	r3, [r0, #0]
    3ba6:	ldr	r3, [r3, #76]	; 0x4c
    3ba8:	cmp	r3, sl
    3baa:	bne.w	4074 <MTPStorage_SD::removeFile(unsigned long, char*)+0x530>
    3bae:	ldr	r0, [r0, #16]
    3bb0:	cmp	r0, #0
    3bb2:	beq.w	3f10 <MTPStorage_SD::removeFile(unsigned long, char*)+0x3cc>
    3bb6:	ldr	r3, [r0, #0]
    3bb8:	ldr	r3, [r3, #76]	; 0x4c
    3bba:	cmp	r3, sl
    3bbc:	bne.w	4074 <MTPStorage_SD::removeFile(unsigned long, char*)+0x530>
    3bc0:	ldr	r0, [r0, #16]
    3bc2:	cmp	r0, #0
    3bc4:	beq.w	3f10 <MTPStorage_SD::removeFile(unsigned long, char*)+0x3cc>
    3bc8:	ldr	r3, [r0, #0]
    3bca:	ldr	r3, [r3, #76]	; 0x4c
    3bcc:	cmp	r3, sl
    3bce:	bne.w	4074 <MTPStorage_SD::removeFile(unsigned long, char*)+0x530>
    3bd2:	ldr	r0, [r0, #16]
    3bd4:	cmp	r0, #0
    3bd6:	beq.w	3f10 <MTPStorage_SD::removeFile(unsigned long, char*)+0x3cc>
    3bda:	ldr	r3, [r0, #0]
    3bdc:	ldr	r3, [r3, #76]	; 0x4c
    3bde:	cmp	r3, sl
    3be0:	bne.w	4074 <MTPStorage_SD::removeFile(unsigned long, char*)+0x530>
    3be4:	ldr	r0, [r0, #16]
    3be6:	cmp	r0, #0
    3be8:	beq.w	3f10 <MTPStorage_SD::removeFile(unsigned long, char*)+0x3cc>
    3bec:	ldr	r3, [r0, #0]
    3bee:	ldr	r3, [r3, #76]	; 0x4c
    3bf0:	cmp	r3, sl
    3bf2:	bne.w	4074 <MTPStorage_SD::removeFile(unsigned long, char*)+0x530>
    3bf6:	ldr	r0, [r0, #16]
    3bf8:	cmp	r0, #0
    3bfa:	beq.w	3f10 <MTPStorage_SD::removeFile(unsigned long, char*)+0x3cc>
    3bfe:	ldr	r3, [r0, #0]
    3c00:	ldr	r3, [r3, #76]	; 0x4c
    3c02:	blx	r3
  char tname[MAX_FILENAME_LEN];
  File f1=sd_open(store,file,0);
  if(f1.isDirectory())
    3c04:	cmp	r0, #0
    3c06:	beq.w	3f10 <MTPStorage_SD::removeFile(unsigned long, char*)+0x3cc>
    3c0a:	ldr.w	fp, [pc, #700]	; 3ec8 <MTPStorage_SD::removeFile(unsigned long, char*)+0x384>
    3c0e:	ldr.w	r8, [pc, #712]	; 3ed8 <MTPStorage_SD::removeFile(unsigned long, char*)+0x394>
    3c12:	movs	r4, #0
    3c14:	mov	r7, fp
	}
	virtual File openNextFile(uint8_t mode=0) {
		return (f) ? f->openNextFile(mode) : *this;
    3c16:	ldr	r1, [sp, #56]	; 0x38
    3c18:	cmp	r1, #0
    3c1a:	beq.w	3efa <MTPStorage_SD::removeFile(unsigned long, char*)+0x3b6>
    3c1e:	ldr	r3, [r1, #0]
    3c20:	ldr	r2, [pc, #668]	; (3ec0 <MTPStorage_SD::removeFile(unsigned long, char*)+0x37c>)
    3c22:	ldr	r3, [r3, #80]	; 0x50
    3c24:	cmp	r3, r2
    3c26:	bne.w	4078 <MTPStorage_SD::removeFile(unsigned long, char*)+0x534>
    3c2a:	ldr	r1, [r1, #16]
    3c2c:	cmp	r1, #0
    3c2e:	beq.w	3efa <MTPStorage_SD::removeFile(unsigned long, char*)+0x3b6>
    3c32:	ldr	r3, [r1, #0]
    3c34:	ldr	r3, [r3, #80]	; 0x50
    3c36:	cmp	r3, r2
    3c38:	bne.w	4078 <MTPStorage_SD::removeFile(unsigned long, char*)+0x534>
    3c3c:	ldr	r1, [r1, #16]
    3c3e:	cmp	r1, #0
    3c40:	beq.w	3efa <MTPStorage_SD::removeFile(unsigned long, char*)+0x3b6>
    3c44:	ldr	r3, [r1, #0]
    3c46:	ldr	r3, [r3, #80]	; 0x50
    3c48:	cmp	r3, r2
    3c4a:	bne.w	4078 <MTPStorage_SD::removeFile(unsigned long, char*)+0x534>
    3c4e:	ldr	r1, [r1, #16]
    3c50:	cmp	r1, #0
    3c52:	beq.w	3efa <MTPStorage_SD::removeFile(unsigned long, char*)+0x3b6>
    3c56:	ldr	r3, [r1, #0]
    3c58:	ldr	r3, [r3, #80]	; 0x50
    3c5a:	cmp	r3, r2
    3c5c:	bne.w	4078 <MTPStorage_SD::removeFile(unsigned long, char*)+0x534>
    3c60:	ldr	r1, [r1, #16]
    3c62:	cmp	r1, #0
    3c64:	beq.w	3efa <MTPStorage_SD::removeFile(unsigned long, char*)+0x3b6>
    3c68:	ldr	r3, [r1, #0]
    3c6a:	ldr	r3, [r3, #80]	; 0x50
    3c6c:	cmp	r3, r2
    3c6e:	bne.w	4078 <MTPStorage_SD::removeFile(unsigned long, char*)+0x534>
    3c72:	ldr	r1, [r1, #16]
    3c74:	cmp	r1, #0
    3c76:	beq.w	3efa <MTPStorage_SD::removeFile(unsigned long, char*)+0x3b6>
    3c7a:	ldr	r3, [r1, #0]
    3c7c:	ldr	r3, [r3, #80]	; 0x50
    3c7e:	cmp	r3, r2
    3c80:	bne.w	4078 <MTPStorage_SD::removeFile(unsigned long, char*)+0x534>
    3c84:	ldr	r1, [r1, #16]
    3c86:	cmp	r1, #0
    3c88:	beq.w	3efa <MTPStorage_SD::removeFile(unsigned long, char*)+0x3b6>
    3c8c:	ldr	r3, [r1, #0]
    3c8e:	movs	r2, #0
    3c90:	ldr	r3, [r3, #80]	; 0x50
    3c92:	add	r0, sp, #60	; 0x3c
    3c94:	blx	r3
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    3c96:	cbz	r4, 3cb4 <MTPStorage_SD::removeFile(unsigned long, char*)+0x170>
    3c98:	ldr	r3, [r4, #16]
    3c9a:	subs	r3, #1
    3c9c:	str	r3, [r4, #16]
    3c9e:	cbnz	r3, 3cb4 <MTPStorage_SD::removeFile(unsigned long, char*)+0x170>
    3ca0:	ldr	r3, [r4, #0]
    3ca2:	ldr	r2, [pc, #544]	; (3ec4 <MTPStorage_SD::removeFile(unsigned long, char*)+0x380>)
    3ca4:	ldr	r3, [r3, #32]
    3ca6:	cmp	r3, r2
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
		invalidate();
	}
    3ca8:	mov	r0, r4
    3caa:	bne.w	4268 <MTPStorage_SD::removeFile(unsigned long, char*)+0x724>
    3cae:	movs	r1, #20
    3cb0:	bl	e950 <operator delete(void*, unsigned int)>
	File& operator = (const File &file) {
		//Serial.println("File assignment");
		//static int assigncount=0;
		//if (++assigncount > 20) while (1) ;
		invalidate();
		f = file.f;
    3cb4:	ldr	r4, [sp, #76]	; 0x4c
		if (f) f->refcount++;
    3cb6:	cmp	r4, #0
    3cb8:	beq.w	4234 <MTPStorage_SD::removeFile(unsigned long, char*)+0x6f0>
    3cbc:	ldr	r3, [r4, #16]
	}
	virtual void close() {
		if (f) f->close();
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
    3cbe:	ldr	r2, [r4, #0]
		//Serial.println("File assignment");
		//static int assigncount=0;
		//if (++assigncount > 20) while (1) ;
		invalidate();
		f = file.f;
		if (f) f->refcount++;
    3cc0:	adds	r0, r3, #1
    3cc2:	str	r0, [r4, #16]
	}
	virtual void close() {
		if (f) f->close();
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
    3cc4:	ldr	r2, [r2, #68]	; 0x44
    3cc6:	cmp	r2, r8
    3cc8:	bne.w	4220 <MTPStorage_SD::removeFile(unsigned long, char*)+0x6dc>
    3ccc:	cmp	r0, #0
    3cce:	beq.w	4200 <MTPStorage_SD::removeFile(unsigned long, char*)+0x6bc>
    3cd2:	ldr.w	r3, [r3, #1]
    3cd6:	ldr	r3, [r3, #68]	; 0x44
    3cd8:	cmp	r3, r8
    3cda:	bne.w	4218 <MTPStorage_SD::removeFile(unsigned long, char*)+0x6d4>
    3cde:	ldr	r0, [r0, #16]
    3ce0:	cmp	r0, #0
    3ce2:	beq.w	4200 <MTPStorage_SD::removeFile(unsigned long, char*)+0x6bc>
    3ce6:	ldr	r3, [r0, #0]
    3ce8:	ldr	r3, [r3, #68]	; 0x44
    3cea:	cmp	r3, r8
    3cec:	bne.w	4218 <MTPStorage_SD::removeFile(unsigned long, char*)+0x6d4>
    3cf0:	ldr	r0, [r0, #16]
    3cf2:	cmp	r0, #0
    3cf4:	beq.w	4200 <MTPStorage_SD::removeFile(unsigned long, char*)+0x6bc>
    3cf8:	ldr	r3, [r0, #0]
    3cfa:	ldr	r3, [r3, #68]	; 0x44
    3cfc:	cmp	r3, r8
    3cfe:	bne.w	4218 <MTPStorage_SD::removeFile(unsigned long, char*)+0x6d4>
    3d02:	ldr	r0, [r0, #16]
    3d04:	cmp	r0, #0
    3d06:	beq.w	4200 <MTPStorage_SD::removeFile(unsigned long, char*)+0x6bc>
    3d0a:	ldr	r3, [r0, #0]
    3d0c:	ldr	r3, [r3, #68]	; 0x44
    3d0e:	cmp	r3, r8
    3d10:	bne.w	4218 <MTPStorage_SD::removeFile(unsigned long, char*)+0x6d4>
    3d14:	ldr	r0, [r0, #16]
    3d16:	cmp	r0, #0
    3d18:	beq.w	4200 <MTPStorage_SD::removeFile(unsigned long, char*)+0x6bc>
    3d1c:	ldr	r3, [r0, #0]
    3d1e:	ldr	r3, [r3, #68]	; 0x44
    3d20:	blx	r3
    3d22:	ldr	r2, [sp, #76]	; 0x4c
    3d24:	mov	r6, r0
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    3d26:	str	r7, [sp, #60]	; 0x3c
    3d28:	ldr	r1, [pc, #412]	; (3ec8 <MTPStorage_SD::removeFile(unsigned long, char*)+0x384>)
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    3d2a:	cmp	r2, #0
    3d2c:	beq.n	3dc4 <MTPStorage_SD::removeFile(unsigned long, char*)+0x280>
    3d2e:	ldr	r3, [r2, #16]
    3d30:	subs	r3, #1
    3d32:	str	r3, [r2, #16]
    3d34:	cmp	r3, #0
    3d36:	bne.n	3dc4 <MTPStorage_SD::removeFile(unsigned long, char*)+0x280>
    3d38:	ldr	r5, [sp, #76]	; 0x4c
    3d3a:	cmp	r5, #0
    3d3c:	beq.n	3dc4 <MTPStorage_SD::removeFile(unsigned long, char*)+0x280>
    3d3e:	ldr	r3, [r5, #0]
    3d40:	ldr	r2, [pc, #384]	; (3ec4 <MTPStorage_SD::removeFile(unsigned long, char*)+0x380>)
    3d42:	ldr	r3, [r3, #32]
    3d44:	cmp	r3, r2
    3d46:	bne.w	422a <MTPStorage_SD::removeFile(unsigned long, char*)+0x6e6>
    3d4a:	ldr	r2, [r5, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    3d4c:	str	r1, [r5, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    3d4e:	cmp	r2, #0
    3d50:	beq.n	3dbc <MTPStorage_SD::removeFile(unsigned long, char*)+0x278>
    3d52:	ldr	r3, [r2, #16]
    3d54:	subs	r3, #1
    3d56:	str	r3, [r2, #16]
    3d58:	cbnz	r3, 3dbc <MTPStorage_SD::removeFile(unsigned long, char*)+0x278>
    3d5a:	ldr.w	fp, [r5, #16]
    3d5e:	cmp.w	fp, #0
    3d62:	beq.n	3dbc <MTPStorage_SD::removeFile(unsigned long, char*)+0x278>
    3d64:	ldr.w	r3, [fp]
    3d68:	ldr	r2, [pc, #344]	; (3ec4 <MTPStorage_SD::removeFile(unsigned long, char*)+0x380>)
    3d6a:	ldr	r3, [r3, #32]
    3d6c:	cmp	r3, r2
    3d6e:	bne.w	426c <MTPStorage_SD::removeFile(unsigned long, char*)+0x728>
    3d72:	ldr.w	r2, [fp, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    3d76:	str.w	r1, [fp]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    3d7a:	cbz	r2, 3db4 <MTPStorage_SD::removeFile(unsigned long, char*)+0x270>
    3d7c:	ldr	r3, [r2, #16]
    3d7e:	subs	r3, #1
    3d80:	str	r3, [r2, #16]
    3d82:	cbnz	r3, 3db4 <MTPStorage_SD::removeFile(unsigned long, char*)+0x270>
    3d84:	ldr.w	r3, [fp, #16]
    3d88:	cbz	r3, 3db4 <MTPStorage_SD::removeFile(unsigned long, char*)+0x270>
    3d8a:	ldr	r2, [r3, #0]
    3d8c:	ldr	r1, [pc, #308]	; (3ec4 <MTPStorage_SD::removeFile(unsigned long, char*)+0x380>)
    3d8e:	ldr	r2, [r2, #32]
    3d90:	cmp	r2, r1
    3d92:	bne.w	4272 <MTPStorage_SD::removeFile(unsigned long, char*)+0x72e>
    3d96:	ldr	r1, [r3, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    3d98:	str	r7, [r3, #0]
    3d9a:	ldr.w	ip, [pc, #300]	; 3ec8 <MTPStorage_SD::removeFile(unsigned long, char*)+0x384>
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    3d9e:	cbz	r1, 3dac <MTPStorage_SD::removeFile(unsigned long, char*)+0x268>
    3da0:	ldr	r2, [r1, #16]
    3da2:	subs	r2, #1
    3da4:	str	r2, [r1, #16]
    3da6:	cmp	r2, #0
    3da8:	beq.w	408c <MTPStorage_SD::removeFile(unsigned long, char*)+0x548>
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
		invalidate();
	}
    3dac:	mov	r0, r3
    3dae:	movs	r1, #20
    3db0:	bl	e950 <operator delete(void*, unsigned int)>
    3db4:	mov	r0, fp
    3db6:	movs	r1, #20
    3db8:	bl	e950 <operator delete(void*, unsigned int)>
    3dbc:	mov	r0, r5
    3dbe:	movs	r1, #20
    3dc0:	bl	e950 <operator delete(void*, unsigned int)>
  {
    File f2;
    while(f2=f1.openNextFile())
    3dc4:	cmp	r6, #0
    3dc6:	beq.w	4234 <MTPStorage_SD::removeFile(unsigned long, char*)+0x6f0>
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
	}
	virtual const char* name() {
		return (f) ? f->name() : "";
    3dca:	cmp	r4, #0
    3dcc:	beq.w	41d0 <MTPStorage_SD::removeFile(unsigned long, char*)+0x68c>
    3dd0:	ldr	r2, [r4, #0]
    3dd2:	ldr	r3, [pc, #248]	; (3ecc <MTPStorage_SD::removeFile(unsigned long, char*)+0x388>)
    3dd4:	ldr	r2, [r2, #72]	; 0x48
    3dd6:	cmp	r2, r3
    3dd8:	bne.w	420c <MTPStorage_SD::removeFile(unsigned long, char*)+0x6c8>
    3ddc:	ldr	r0, [r4, #16]
    3dde:	cmp	r0, #0
    3de0:	beq.w	4214 <MTPStorage_SD::removeFile(unsigned long, char*)+0x6d0>
    3de4:	ldr	r2, [r0, #0]
    3de6:	ldr	r2, [r2, #72]	; 0x48
    3de8:	cmp	r2, r3
    3dea:	bne.w	420e <MTPStorage_SD::removeFile(unsigned long, char*)+0x6ca>
    3dee:	ldr	r0, [r0, #16]
    3df0:	cmp	r0, #0
    3df2:	beq.w	4214 <MTPStorage_SD::removeFile(unsigned long, char*)+0x6d0>
    3df6:	ldr	r2, [r0, #0]
    3df8:	ldr	r2, [r2, #72]	; 0x48
    3dfa:	cmp	r2, r3
    3dfc:	bne.w	420e <MTPStorage_SD::removeFile(unsigned long, char*)+0x6ca>
    3e00:	ldr	r0, [r0, #16]
    3e02:	cmp	r0, #0
    3e04:	beq.w	4214 <MTPStorage_SD::removeFile(unsigned long, char*)+0x6d0>
    3e08:	ldr	r2, [r0, #0]
    3e0a:	ldr	r2, [r2, #72]	; 0x48
    3e0c:	cmp	r2, r3
    3e0e:	bne.w	420e <MTPStorage_SD::removeFile(unsigned long, char*)+0x6ca>
    3e12:	ldr	r0, [r0, #16]
    3e14:	cmp	r0, #0
    3e16:	beq.w	4214 <MTPStorage_SD::removeFile(unsigned long, char*)+0x6d0>
    3e1a:	ldr	r2, [r0, #0]
    3e1c:	ldr	r2, [r2, #72]	; 0x48
    3e1e:	cmp	r2, r3
    3e20:	bne.w	420e <MTPStorage_SD::removeFile(unsigned long, char*)+0x6ca>
    3e24:	ldr	r0, [r0, #16]
    3e26:	cmp	r0, #0
    3e28:	beq.w	4214 <MTPStorage_SD::removeFile(unsigned long, char*)+0x6d0>
    3e2c:	ldr	r2, [r0, #0]
    3e2e:	ldr	r2, [r2, #72]	; 0x48
    3e30:	cmp	r2, r3
    3e32:	bne.w	420e <MTPStorage_SD::removeFile(unsigned long, char*)+0x6ca>
    3e36:	ldr	r0, [r0, #16]
    3e38:	cmp	r0, #0
    3e3a:	beq.w	4214 <MTPStorage_SD::removeFile(unsigned long, char*)+0x6d0>
    3e3e:	ldr	r3, [r0, #0]
    3e40:	ldr	r3, [r3, #72]	; 0x48
    3e42:	blx	r3
    3e44:	mov	r3, r0
    { sprintf(tname,"%s/%s",file,f2.name());
    3e46:	add	r5, sp, #80	; 0x50
    3e48:	ldr	r1, [pc, #132]	; (3ed0 <MTPStorage_SD::removeFile(unsigned long, char*)+0x38c>)
    3e4a:	ldr	r2, [sp, #4]
    3e4c:	mov	r0, r5
    3e4e:	bl	10b74 <sprintf>
	}
	virtual bool isDirectory() {
		return (f) ? f->isDirectory() : false;
    3e52:	ldr	r3, [r4, #0]
    3e54:	ldr	r3, [r3, #76]	; 0x4c
    3e56:	cmp	r3, sl
    3e58:	bne.w	4206 <MTPStorage_SD::removeFile(unsigned long, char*)+0x6c2>
    3e5c:	ldr	r0, [r4, #16]
    3e5e:	cmp	r0, #0
    3e60:	beq.w	41de <MTPStorage_SD::removeFile(unsigned long, char*)+0x69a>
    3e64:	ldr	r3, [r0, #0]
    3e66:	ldr	r3, [r3, #76]	; 0x4c
    3e68:	cmp	r3, sl
    3e6a:	bne.w	4208 <MTPStorage_SD::removeFile(unsigned long, char*)+0x6c4>
    3e6e:	ldr	r0, [r0, #16]
    3e70:	cmp	r0, #0
    3e72:	beq.w	41de <MTPStorage_SD::removeFile(unsigned long, char*)+0x69a>
    3e76:	ldr	r3, [r0, #0]
    3e78:	ldr	r3, [r3, #76]	; 0x4c
    3e7a:	cmp	r3, sl
    3e7c:	bne.w	4208 <MTPStorage_SD::removeFile(unsigned long, char*)+0x6c4>
    3e80:	ldr	r0, [r0, #16]
    3e82:	cmp	r0, #0
    3e84:	beq.w	41de <MTPStorage_SD::removeFile(unsigned long, char*)+0x69a>
    3e88:	ldr	r3, [r0, #0]
    3e8a:	ldr	r3, [r3, #76]	; 0x4c
    3e8c:	cmp	r3, sl
    3e8e:	bne.w	4208 <MTPStorage_SD::removeFile(unsigned long, char*)+0x6c4>
    3e92:	ldr	r0, [r0, #16]
    3e94:	cmp	r0, #0
    3e96:	beq.w	41de <MTPStorage_SD::removeFile(unsigned long, char*)+0x69a>
    3e9a:	ldr	r3, [r0, #0]
    3e9c:	ldr	r3, [r3, #76]	; 0x4c
    3e9e:	cmp	r3, sl
    3ea0:	bne.w	4208 <MTPStorage_SD::removeFile(unsigned long, char*)+0x6c4>
    3ea4:	ldr	r0, [r0, #16]
    3ea6:	cmp	r0, #0
    3ea8:	beq.w	41de <MTPStorage_SD::removeFile(unsigned long, char*)+0x69a>
    3eac:	ldr	r3, [r0, #0]
    3eae:	ldr	r3, [r3, #76]	; 0x4c
    3eb0:	cmp	r3, sl
    3eb2:	bne.w	4208 <MTPStorage_SD::removeFile(unsigned long, char*)+0x6c4>
    3eb6:	ldr	r0, [r0, #16]
    3eb8:	cmp	r0, #0
    3eba:	beq.w	41de <MTPStorage_SD::removeFile(unsigned long, char*)+0x69a>
    3ebe:	b.n	3edc <MTPStorage_SD::removeFile(unsigned long, char*)+0x398>
    3ec0:	.word	0x0000052d
    3ec4:	.word	0x00000f25
    3ec8:	.word	0x000141ac
    3ecc:	.word	0x0000050d
    3ed0:	.word	0x00014490
    3ed4:	.word	0x00000521
    3ed8:	.word	0x00000501
    3edc:	ldr	r3, [r0, #0]
    3ede:	ldr	r3, [r3, #76]	; 0x4c
    3ee0:	blx	r3
      if(f2.isDirectory()) removeFile(store,tname); else sd_remove(store,tname);
    3ee2:	cmp	r0, #0
    3ee4:	beq.w	41de <MTPStorage_SD::removeFile(unsigned long, char*)+0x69a>
    3ee8:	ldr	r1, [sp, #12]
    3eea:	ldr	r0, [sp, #8]
    3eec:	mov	r2, r5
    3eee:	bl	3b44 <MTPStorage_SD::removeFile(unsigned long, char*)>
	}
	virtual File openNextFile(uint8_t mode=0) {
		return (f) ? f->openNextFile(mode) : *this;
    3ef2:	ldr	r1, [sp, #56]	; 0x38
    3ef4:	cmp	r1, #0
    3ef6:	bne.w	3c1e <MTPStorage_SD::removeFile(unsigned long, char*)+0xda>
    3efa:	movs	r3, #0
    3efc:	mov.w	r2, #1000	; 0x3e8
			//"File(File *file) constructor only accepts pointers "
			//"to derived classes, not File itself");
		f = file;
		if (f) f->refcount++;
	}
	File(const File &file) {
    3f00:	str	r7, [sp, #60]	; 0x3c
    3f02:	strb.w	r3, [sp, #64]	; 0x40
    3f06:	strb.w	r3, [sp, #72]	; 0x48
		//Serial.println("File copy constructor");
		//static int copycount=0;
		//if (++copycount > 20) while (1) ;
		f = file.f;
    3f0a:	str	r3, [sp, #76]	; 0x4c
    3f0c:	str	r2, [sp, #68]	; 0x44
    3f0e:	b.n	3c96 <MTPStorage_SD::removeFile(unsigned long, char*)+0x152>
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
    3f10:	ldr	r4, [sp, #4]
    3f12:	ldr.w	fp, [pc, #368]	; 4084 <MTPStorage_SD::removeFile(unsigned long, char*)+0x540>
    3f16:	mov	r0, r4
    3f18:	bl	10d00 <strlen>
    3f1c:	mov	r1, r0
    3f1e:	mov	r0, r4
    3f20:	bl	cd74 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    3f24:	ldr	r0, [pc, #344]	; (4080 <MTPStorage_SD::removeFile(unsigned long, char*)+0x53c>)
    3f26:	bl	e7ac <Print::println()>
    bool sd_mkdir(uint32_t store, char *filename) {  return sdx[store]->mkdir(filename);  }
    bool sd_rename(uint32_t store, char *oldfilename, char *newfilename) { return sdx[store]->rename(oldfilename,newfilename);  }
    bool sd_remove(uint32_t store, const char *filename) {    Serial.println(filename); return sdx[store]->remove(filename);  }
    3f2a:	ldr.w	r0, [r9, #88]	; 0x58
    3f2e:	ldr	r3, [r0, #0]
    3f30:	mov	r1, r4
    3f32:	ldr	r3, [r3, #16]
    3f34:	blx	r3
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    3f36:	ldr	r2, [sp, #56]	; 0x38
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    3f38:	str.w	fp, [sp, #40]	; 0x28
    3f3c:	ldr	r1, [pc, #324]	; (4084 <MTPStorage_SD::removeFile(unsigned long, char*)+0x540>)
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    3f3e:	cmp	r2, #0
    3f40:	beq.w	406e <MTPStorage_SD::removeFile(unsigned long, char*)+0x52a>
    3f44:	ldr	r3, [r2, #16]
    3f46:	subs	r3, #1
    3f48:	str	r3, [r2, #16]
    3f4a:	cmp	r3, #0
    3f4c:	bne.w	406e <MTPStorage_SD::removeFile(unsigned long, char*)+0x52a>
    3f50:	ldr	r4, [sp, #56]	; 0x38
    3f52:	cmp	r4, #0
    3f54:	beq.w	406e <MTPStorage_SD::removeFile(unsigned long, char*)+0x52a>
    3f58:	ldr	r3, [r4, #0]
    3f5a:	ldr	r0, [pc, #300]	; (4088 <MTPStorage_SD::removeFile(unsigned long, char*)+0x544>)
    3f5c:	ldr	r3, [r3, #32]
    3f5e:	cmp	r3, r0
    3f60:	bne.w	4278 <MTPStorage_SD::removeFile(unsigned long, char*)+0x734>
    3f64:	ldr	r2, [r4, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    3f66:	str	r1, [r4, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    3f68:	cmp	r2, #0
    3f6a:	beq.n	4066 <MTPStorage_SD::removeFile(unsigned long, char*)+0x522>
    3f6c:	ldr	r3, [r2, #16]
    3f6e:	subs	r3, #1
    3f70:	str	r3, [r2, #16]
    3f72:	cmp	r3, #0
    3f74:	bne.n	4066 <MTPStorage_SD::removeFile(unsigned long, char*)+0x522>
    3f76:	ldr	r5, [r4, #16]
    3f78:	cmp	r5, #0
    3f7a:	beq.n	4066 <MTPStorage_SD::removeFile(unsigned long, char*)+0x522>
    3f7c:	ldr	r3, [r5, #0]
    3f7e:	ldr	r3, [r3, #32]
    3f80:	cmp	r3, r0
    3f82:	bne.w	428c <MTPStorage_SD::removeFile(unsigned long, char*)+0x748>
    3f86:	ldr	r2, [r5, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    3f88:	str	r1, [r5, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    3f8a:	cmp	r2, #0
    3f8c:	beq.n	405e <MTPStorage_SD::removeFile(unsigned long, char*)+0x51a>
    3f8e:	ldr	r3, [r2, #16]
    3f90:	subs	r3, #1
    3f92:	str	r3, [r2, #16]
    3f94:	cmp	r3, #0
    3f96:	bne.n	405e <MTPStorage_SD::removeFile(unsigned long, char*)+0x51a>
    3f98:	ldr	r6, [r5, #16]
    3f9a:	cmp	r6, #0
    3f9c:	beq.n	405e <MTPStorage_SD::removeFile(unsigned long, char*)+0x51a>
    3f9e:	ldr	r3, [r6, #0]
    3fa0:	ldr	r3, [r3, #32]
    3fa2:	cmp	r3, r0
    3fa4:	bne.w	42a0 <MTPStorage_SD::removeFile(unsigned long, char*)+0x75c>
    3fa8:	ldr	r2, [r6, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    3faa:	str.w	fp, [r6]
    3fae:	ldr	r1, [pc, #212]	; (4084 <MTPStorage_SD::removeFile(unsigned long, char*)+0x540>)
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    3fb0:	cmp	r2, #0
    3fb2:	beq.n	4056 <MTPStorage_SD::removeFile(unsigned long, char*)+0x512>
    3fb4:	ldr	r3, [r2, #16]
    3fb6:	subs	r3, #1
    3fb8:	str	r3, [r2, #16]
    3fba:	cmp	r3, #0
    3fbc:	bne.n	4056 <MTPStorage_SD::removeFile(unsigned long, char*)+0x512>
    3fbe:	ldr	r7, [r6, #16]
    3fc0:	cmp	r7, #0
    3fc2:	beq.n	4056 <MTPStorage_SD::removeFile(unsigned long, char*)+0x512>
    3fc4:	ldr	r3, [r7, #0]
    3fc6:	ldr	r3, [r3, #32]
    3fc8:	cmp	r3, r0
    3fca:	bne.w	42a6 <MTPStorage_SD::removeFile(unsigned long, char*)+0x762>
    3fce:	ldr	r2, [r7, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    3fd0:	str	r1, [r7, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    3fd2:	cmp	r2, #0
    3fd4:	beq.n	404e <MTPStorage_SD::removeFile(unsigned long, char*)+0x50a>
    3fd6:	ldr	r3, [r2, #16]
    3fd8:	subs	r3, #1
    3fda:	str	r3, [r2, #16]
    3fdc:	cmp	r3, #0
    3fde:	bne.n	404e <MTPStorage_SD::removeFile(unsigned long, char*)+0x50a>
    3fe0:	ldr.w	r8, [r7, #16]
    3fe4:	cmp.w	r8, #0
    3fe8:	beq.n	404e <MTPStorage_SD::removeFile(unsigned long, char*)+0x50a>
    3fea:	ldr.w	r3, [r8]
    3fee:	ldr	r3, [r3, #32]
    3ff0:	cmp	r3, r0
    3ff2:	bne.w	42c8 <MTPStorage_SD::removeFile(unsigned long, char*)+0x784>
    3ff6:	ldr.w	r2, [r8, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    3ffa:	str.w	fp, [r8]
    3ffe:	ldr	r1, [pc, #132]	; (4084 <MTPStorage_SD::removeFile(unsigned long, char*)+0x540>)
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    4000:	cbz	r2, 4046 <MTPStorage_SD::removeFile(unsigned long, char*)+0x502>
    4002:	ldr	r3, [r2, #16]
    4004:	subs	r3, #1
    4006:	str	r3, [r2, #16]
    4008:	cbnz	r3, 4046 <MTPStorage_SD::removeFile(unsigned long, char*)+0x502>
    400a:	ldr.w	r9, [r8, #16]
    400e:	cmp.w	r9, #0
    4012:	beq.n	4046 <MTPStorage_SD::removeFile(unsigned long, char*)+0x502>
    4014:	ldr.w	r3, [r9]
    4018:	ldr	r3, [r3, #32]
    401a:	cmp	r3, r0
    401c:	bne.w	42de <MTPStorage_SD::removeFile(unsigned long, char*)+0x79a>
    4020:	ldr.w	r2, [r9, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    4024:	str.w	r1, [r9]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    4028:	cbz	r2, 403e <MTPStorage_SD::removeFile(unsigned long, char*)+0x4fa>
    402a:	ldr	r3, [r2, #16]
    402c:	subs	r3, #1
    402e:	str	r3, [r2, #16]
    4030:	cbnz	r3, 403e <MTPStorage_SD::removeFile(unsigned long, char*)+0x4fa>
    4032:	ldr.w	r0, [r9, #16]
    4036:	cbz	r0, 403e <MTPStorage_SD::removeFile(unsigned long, char*)+0x4fa>
    4038:	ldr	r3, [r0, #0]
    403a:	ldr	r3, [r3, #32]
    403c:	blx	r3
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
		invalidate();
	}
    403e:	mov	r0, r9
    4040:	movs	r1, #20
    4042:	bl	e950 <operator delete(void*, unsigned int)>
    4046:	mov	r0, r8
    4048:	movs	r1, #20
    404a:	bl	e950 <operator delete(void*, unsigned int)>
    404e:	mov	r0, r7
    4050:	movs	r1, #20
    4052:	bl	e950 <operator delete(void*, unsigned int)>
    4056:	mov	r0, r6
    4058:	movs	r1, #20
    405a:	bl	e950 <operator delete(void*, unsigned int)>
    405e:	mov	r0, r5
    4060:	movs	r1, #20
    4062:	bl	e950 <operator delete(void*, unsigned int)>
    4066:	mov	r0, r4
    4068:	movs	r1, #20
    406a:	bl	e950 <operator delete(void*, unsigned int)>
  }
  else
  {
    sd_remove(store,file);
  }
}
    406e:	add	sp, #340	; 0x154
    4070:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	}
	virtual const char* name() {
		return (f) ? f->name() : "";
	}
	virtual bool isDirectory() {
		return (f) ? f->isDirectory() : false;
    4074:	blx	r3
    4076:	b.n	3c04 <MTPStorage_SD::removeFile(unsigned long, char*)+0xc0>
	}
	virtual File openNextFile(uint8_t mode=0) {
		return (f) ? f->openNextFile(mode) : *this;
    4078:	movs	r2, #0
    407a:	add	r0, sp, #60	; 0x3c
    407c:	blx	r3
    407e:	b.n	3c96 <MTPStorage_SD::removeFile(unsigned long, char*)+0x152>
    4080:	.word	0x1fff8d50
    4084:	.word	0x000141ac
    4088:	.word	0x00000f25
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    408c:	ldr	r2, [r3, #16]
    408e:	cmp	r2, #0
    4090:	beq.w	3dac <MTPStorage_SD::removeFile(unsigned long, char*)+0x268>
    4094:	ldr	r1, [r2, #0]
    4096:	ldr	r0, [pc, #588]	; (42e4 <MTPStorage_SD::removeFile(unsigned long, char*)+0x7a0>)
    4098:	ldr	r1, [r1, #32]
    409a:	cmp	r1, r0
    409c:	bne.w	4282 <MTPStorage_SD::removeFile(unsigned long, char*)+0x73e>
    40a0:	ldr.w	lr, [r2, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    40a4:	str.w	ip, [r2]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    40a8:	cmp.w	lr, #0
    40ac:	beq.w	41c2 <MTPStorage_SD::removeFile(unsigned long, char*)+0x67e>
    40b0:	ldr.w	r1, [lr, #16]
    40b4:	subs	r1, #1
    40b6:	str.w	r1, [lr, #16]
    40ba:	cmp	r1, #0
    40bc:	bne.w	41c2 <MTPStorage_SD::removeFile(unsigned long, char*)+0x67e>
    40c0:	ldr	r1, [r2, #16]
    40c2:	str	r1, [sp, #16]
    40c4:	cmp	r1, #0
    40c6:	beq.n	41c2 <MTPStorage_SD::removeFile(unsigned long, char*)+0x67e>
    40c8:	ldr	r1, [sp, #16]
    40ca:	ldr	r0, [pc, #536]	; (42e4 <MTPStorage_SD::removeFile(unsigned long, char*)+0x7a0>)
    40cc:	ldr	r1, [r1, #0]
    40ce:	ldr	r1, [r1, #32]
    40d0:	cmp	r1, r0
    40d2:	bne.w	4292 <MTPStorage_SD::removeFile(unsigned long, char*)+0x74e>
    40d6:	ldr	r1, [sp, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    40d8:	ldr.w	ip, [pc, #536]	; 42f4 <MTPStorage_SD::removeFile(unsigned long, char*)+0x7b0>
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    40dc:	ldr.w	lr, [r1, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    40e0:	str	r7, [r1, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    40e2:	cmp.w	lr, #0
    40e6:	beq.n	41b2 <MTPStorage_SD::removeFile(unsigned long, char*)+0x66e>
    40e8:	ldr.w	r1, [lr, #16]
    40ec:	subs	r1, #1
    40ee:	str.w	r1, [lr, #16]
    40f2:	cmp	r1, #0
    40f4:	bne.n	41b2 <MTPStorage_SD::removeFile(unsigned long, char*)+0x66e>
    40f6:	ldr	r1, [sp, #16]
    40f8:	ldr	r1, [r1, #16]
    40fa:	str	r1, [sp, #20]
    40fc:	cmp	r1, #0
    40fe:	beq.n	41b2 <MTPStorage_SD::removeFile(unsigned long, char*)+0x66e>
    4100:	ldr	r1, [sp, #20]
    4102:	ldr	r0, [pc, #480]	; (42e4 <MTPStorage_SD::removeFile(unsigned long, char*)+0x7a0>)
    4104:	ldr	r1, [r1, #0]
    4106:	ldr	r1, [r1, #32]
    4108:	cmp	r1, r0
    410a:	bne.w	42ac <MTPStorage_SD::removeFile(unsigned long, char*)+0x768>
    410e:	ldr	r0, [sp, #20]
    4110:	ldr.w	lr, [r0, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    4114:	str.w	ip, [r0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    4118:	cmp.w	lr, #0
    411c:	beq.n	41a2 <MTPStorage_SD::removeFile(unsigned long, char*)+0x65e>
    411e:	ldr.w	r1, [lr, #16]
    4122:	subs	r1, #1
    4124:	str.w	r1, [lr, #16]
    4128:	cmp	r1, #0
    412a:	bne.n	41a2 <MTPStorage_SD::removeFile(unsigned long, char*)+0x65e>
    412c:	ldr	r1, [sp, #20]
    412e:	ldr	r1, [r1, #16]
    4130:	str	r1, [sp, #24]
    4132:	cmp	r1, #0
    4134:	beq.n	41a2 <MTPStorage_SD::removeFile(unsigned long, char*)+0x65e>
    4136:	ldr	r1, [sp, #24]
    4138:	ldr	r0, [pc, #424]	; (42e4 <MTPStorage_SD::removeFile(unsigned long, char*)+0x7a0>)
    413a:	ldr	r1, [r1, #0]
    413c:	ldr	r1, [r1, #32]
    413e:	cmp	r1, r0
    4140:	bne.w	42ba <MTPStorage_SD::removeFile(unsigned long, char*)+0x776>
    4144:	ldr	r0, [sp, #24]
    4146:	ldr.w	lr, [r0, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    414a:	str.w	ip, [r0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    414e:	cmp.w	lr, #0
    4152:	beq.n	4192 <MTPStorage_SD::removeFile(unsigned long, char*)+0x64e>
    4154:	ldr.w	r1, [lr, #16]
    4158:	subs	r1, #1
    415a:	str.w	r1, [lr, #16]
    415e:	cbnz	r1, 4192 <MTPStorage_SD::removeFile(unsigned long, char*)+0x64e>
    4160:	ldr	r1, [sp, #24]
    4162:	ldr	r1, [r1, #16]
    4164:	cbz	r1, 4192 <MTPStorage_SD::removeFile(unsigned long, char*)+0x64e>
    4166:	ldr	r0, [r1, #0]
    4168:	ldr	r0, [r0, #32]
    416a:	mov	lr, r0
    416c:	ldr	r0, [pc, #372]	; (42e4 <MTPStorage_SD::removeFile(unsigned long, char*)+0x7a0>)
    416e:	cmp	lr, r0
    4170:	bne.w	42ce <MTPStorage_SD::removeFile(unsigned long, char*)+0x78a>
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    4174:	mov	r0, r1
    4176:	str	r2, [sp, #36]	; 0x24
    4178:	str.w	r7, [r0], #16
    417c:	str	r3, [sp, #32]
    417e:	str	r1, [sp, #28]
		invalidate();
    4180:	bl	2078 <File::invalidate() [clone .isra.1]>
	}
    4184:	ldr	r1, [sp, #28]
    4186:	mov	r0, r1
    4188:	movs	r1, #20
    418a:	bl	e950 <operator delete(void*, unsigned int)>
    418e:	ldr	r3, [sp, #32]
    4190:	ldr	r2, [sp, #36]	; 0x24
    4192:	ldr	r0, [sp, #24]
    4194:	str	r2, [sp, #32]
    4196:	movs	r1, #20
    4198:	str	r3, [sp, #28]
    419a:	bl	e950 <operator delete(void*, unsigned int)>
    419e:	ldr	r3, [sp, #28]
    41a0:	ldr	r2, [sp, #32]
    41a2:	ldr	r0, [sp, #20]
    41a4:	str	r2, [sp, #28]
    41a6:	movs	r1, #20
    41a8:	str	r3, [sp, #24]
    41aa:	bl	e950 <operator delete(void*, unsigned int)>
    41ae:	ldr	r3, [sp, #24]
    41b0:	ldr	r2, [sp, #28]
    41b2:	ldr	r0, [sp, #16]
    41b4:	str	r2, [sp, #24]
    41b6:	movs	r1, #20
    41b8:	str	r3, [sp, #20]
    41ba:	bl	e950 <operator delete(void*, unsigned int)>
    41be:	ldr	r3, [sp, #20]
    41c0:	ldr	r2, [sp, #24]
    41c2:	str	r3, [sp, #16]
    41c4:	mov	r0, r2
    41c6:	movs	r1, #20
    41c8:	bl	e950 <operator delete(void*, unsigned int)>
    41cc:	ldr	r3, [sp, #16]
    41ce:	b.n	3dac <MTPStorage_SD::removeFile(unsigned long, char*)+0x268>
  File f1=sd_open(store,file,0);
  if(f1.isDirectory())
  {
    File f2;
    while(f2=f1.openNextFile())
    { sprintf(tname,"%s/%s",file,f2.name());
    41d0:	add	r5, sp, #80	; 0x50
    41d2:	mov	r0, r5
    41d4:	ldr	r3, [pc, #272]	; (42e8 <MTPStorage_SD::removeFile(unsigned long, char*)+0x7a4>)
    41d6:	ldr	r1, [pc, #276]	; (42ec <MTPStorage_SD::removeFile(unsigned long, char*)+0x7a8>)
    41d8:	ldr	r2, [sp, #4]
    41da:	bl	10b74 <sprintf>
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
    41de:	mov	r0, r5
    41e0:	bl	10d00 <strlen>
    41e4:	mov	r1, r0
    41e6:	mov	r0, r5
    41e8:	bl	cd74 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    41ec:	ldr	r0, [pc, #256]	; (42f0 <MTPStorage_SD::removeFile(unsigned long, char*)+0x7ac>)
    41ee:	bl	e7ac <Print::println()>
    41f2:	ldr.w	r0, [r9, #88]	; 0x58
    41f6:	ldr	r3, [r0, #0]
    41f8:	mov	r1, r5
    41fa:	ldr	r3, [r3, #16]
    41fc:	blx	r3
    41fe:	b.n	3c16 <MTPStorage_SD::removeFile(unsigned long, char*)+0xd2>
    4200:	ldr	r2, [sp, #76]	; 0x4c
	}
	virtual void close() {
		if (f) f->close();
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
    4202:	movs	r6, #0
    4204:	b.n	3d26 <MTPStorage_SD::removeFile(unsigned long, char*)+0x1e2>
	}
	virtual const char* name() {
		return (f) ? f->name() : "";
	}
	virtual bool isDirectory() {
		return (f) ? f->isDirectory() : false;
    4206:	mov	r0, r4
    4208:	blx	r3
    420a:	b.n	3ee2 <MTPStorage_SD::removeFile(unsigned long, char*)+0x39e>
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
	}
	virtual const char* name() {
		return (f) ? f->name() : "";
    420c:	mov	r0, r4
    420e:	blx	r2
    4210:	mov	r3, r0
    4212:	b.n	3e46 <MTPStorage_SD::removeFile(unsigned long, char*)+0x302>
    4214:	ldr	r3, [pc, #208]	; (42e8 <MTPStorage_SD::removeFile(unsigned long, char*)+0x7a4>)
    4216:	b.n	3e46 <MTPStorage_SD::removeFile(unsigned long, char*)+0x302>
	}
	virtual void close() {
		if (f) f->close();
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
    4218:	blx	r3
    421a:	ldr	r2, [sp, #76]	; 0x4c
    421c:	mov	r6, r0
    421e:	b.n	3d26 <MTPStorage_SD::removeFile(unsigned long, char*)+0x1e2>
    4220:	mov	r0, r4
    4222:	blx	r2
    4224:	ldr	r2, [sp, #76]	; 0x4c
    4226:	mov	r6, r0
    4228:	b.n	3d26 <MTPStorage_SD::removeFile(unsigned long, char*)+0x1e2>
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    422a:	mov	r0, r5
    422c:	blx	r3
  char tname[MAX_FILENAME_LEN];
  File f1=sd_open(store,file,0);
  if(f1.isDirectory())
  {
    File f2;
    while(f2=f1.openNextFile())
    422e:	cmp	r6, #0
    4230:	bne.w	3dca <MTPStorage_SD::removeFile(unsigned long, char*)+0x286>
    bool sd_rmdir(uint32_t store, char *filename) { return sdx[store]->rmdir(filename);  }
    4234:	ldr.w	r0, [r9, #88]	; 0x58
    4238:	ldr	r1, [sp, #4]
    423a:	ldr	r3, [r0, #0]
    423c:	ldr	r3, [r3, #20]
    423e:	mov	fp, r7
    4240:	blx	r3
    4242:	cmp	r4, #0
    4244:	beq.w	3f36 <MTPStorage_SD::removeFile(unsigned long, char*)+0x3f2>
    4248:	ldr	r3, [r4, #16]
    424a:	subs	r3, #1
    424c:	str	r3, [r4, #16]
    424e:	cmp	r3, #0
    4250:	bne.w	3f36 <MTPStorage_SD::removeFile(unsigned long, char*)+0x3f2>
    4254:	ldr	r3, [r4, #0]
    4256:	ldr	r2, [pc, #140]	; (42e4 <MTPStorage_SD::removeFile(unsigned long, char*)+0x7a0>)
    4258:	ldr	r3, [r3, #32]
    425a:	cmp	r3, r2
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
		invalidate();
	}
    425c:	mov	r0, r4
    425e:	bne.n	427e <MTPStorage_SD::removeFile(unsigned long, char*)+0x73a>
    4260:	movs	r1, #20
    4262:	bl	e950 <operator delete(void*, unsigned int)>
    4266:	b.n	3f36 <MTPStorage_SD::removeFile(unsigned long, char*)+0x3f2>
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    4268:	blx	r3
    426a:	b.n	3cb4 <MTPStorage_SD::removeFile(unsigned long, char*)+0x170>
    426c:	mov	r0, fp
    426e:	blx	r3
    4270:	b.n	3dbc <MTPStorage_SD::removeFile(unsigned long, char*)+0x278>
    4272:	mov	r0, r3
    4274:	blx	r2
    4276:	b.n	3db4 <MTPStorage_SD::removeFile(unsigned long, char*)+0x270>
    4278:	mov	r0, r4
    427a:	blx	r3
  }
  else
  {
    sd_remove(store,file);
  }
}
    427c:	b.n	406e <MTPStorage_SD::removeFile(unsigned long, char*)+0x52a>
    427e:	blx	r3
    4280:	b.n	3f36 <MTPStorage_SD::removeFile(unsigned long, char*)+0x3f2>
    4282:	str	r3, [sp, #16]
    4284:	mov	r0, r2
    4286:	blx	r1
    4288:	ldr	r3, [sp, #16]
    428a:	b.n	3dac <MTPStorage_SD::removeFile(unsigned long, char*)+0x268>
    428c:	mov	r0, r5
    428e:	blx	r3
    4290:	b.n	4066 <MTPStorage_SD::removeFile(unsigned long, char*)+0x522>
    4292:	str	r2, [sp, #24]
    4294:	str	r3, [sp, #20]
    4296:	ldr	r0, [sp, #16]
    4298:	blx	r1
    429a:	ldr	r2, [sp, #24]
    429c:	ldr	r3, [sp, #20]
    429e:	b.n	41c2 <MTPStorage_SD::removeFile(unsigned long, char*)+0x67e>
    42a0:	mov	r0, r6
    42a2:	blx	r3
    42a4:	b.n	405e <MTPStorage_SD::removeFile(unsigned long, char*)+0x51a>
    42a6:	mov	r0, r7
    42a8:	blx	r3
    42aa:	b.n	4056 <MTPStorage_SD::removeFile(unsigned long, char*)+0x512>
    42ac:	str	r2, [sp, #28]
    42ae:	str	r3, [sp, #24]
    42b0:	ldr	r0, [sp, #20]
    42b2:	blx	r1
    42b4:	ldr	r2, [sp, #28]
    42b6:	ldr	r3, [sp, #24]
    42b8:	b.n	41b2 <MTPStorage_SD::removeFile(unsigned long, char*)+0x66e>
    42ba:	str	r2, [sp, #32]
    42bc:	str	r3, [sp, #28]
    42be:	ldr	r0, [sp, #24]
    42c0:	blx	r1
    42c2:	ldr	r2, [sp, #32]
    42c4:	ldr	r3, [sp, #28]
    42c6:	b.n	41a2 <MTPStorage_SD::removeFile(unsigned long, char*)+0x65e>
    42c8:	mov	r0, r8
    42ca:	blx	r3
    42cc:	b.n	404e <MTPStorage_SD::removeFile(unsigned long, char*)+0x50a>
    42ce:	str	r2, [sp, #32]
    42d0:	str	r3, [sp, #28]
    42d2:	mov	r0, r1
    42d4:	mov	r3, lr
    42d6:	blx	r3
    42d8:	ldr	r2, [sp, #32]
    42da:	ldr	r3, [sp, #28]
    42dc:	b.n	4192 <MTPStorage_SD::removeFile(unsigned long, char*)+0x64e>
    42de:	mov	r0, r9
    42e0:	blx	r3
    42e2:	b.n	4046 <MTPStorage_SD::removeFile(unsigned long, char*)+0x502>
    42e4:	.word	0x00000f25
    42e8:	.word	0x00014360
    42ec:	.word	0x00014490
    42f0:	.word	0x1fff8d50
    42f4:	.word	0x000141ac

000042f8 <MTPStorage_SD::DeleteObject(unsigned long) [clone .part.9] [clone .constprop.11]>:

  bool MTPStorage_SD::DeleteObject(uint32_t object)
    42f8:	push	{r4, r5, r6, r7, lr}
    42fa:	subw	sp, sp, #1348	; 0x544
    42fe:	mov	r5, r0
    4300:	mov	r6, r1
  {
    if(object==0xFFFFFFFFUL) return true; // don't do anything if trying to delete a root directory see below

    // first create full filename
    char filename[MAX_FILENAME_LEN];
    ConstructFilename(object, filename, MAX_FILENAME_LEN);
    4302:	mov.w	r3, #256	; 0x100
    4306:	add	r2, sp, #272	; 0x110
    4308:	bl	2af0 <MTPStorage_SD::ConstructFilename(int, char*, int)>

    Record r = ReadIndexRecord(object);
    430c:	mov	r2, r6
    430e:	mov	r1, r5
    4310:	add	r0, sp, #528	; 0x210
    4312:	bl	2690 <MTPStorage_SD::ReadIndexRecord(unsigned long)>

    // remove file from storage (assume it is always working)
    mtp_lock_storage(true);
    removeFile(r.store,filename);
    4316:	add	r2, sp, #272	; 0x110
    4318:	ldrh.w	r1, [sp, #542]	; 0x21e
    431c:	mov	r0, r5
    431e:	bl	3b44 <MTPStorage_SD::removeFile(unsigned long, char*)>
    mtp_lock_storage(false);

    // mark object as deleted
    r.name[0]=0;
    4322:	movs	r3, #0
    WriteIndexRecord(object, r);
    4324:	add	r2, sp, #528	; 0x210
    4326:	mov	r1, r6
    4328:	mov	r0, r5
    mtp_lock_storage(true);
    removeFile(r.store,filename);
    mtp_lock_storage(false);

    // mark object as deleted
    r.name[0]=0;
    432a:	strb.w	r3, [sp, #544]	; 0x220
    WriteIndexRecord(object, r);
    432e:	bl	24b0 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    
    // update index file
    Record t = ReadIndexRecord(r.parent);
    4332:	ldr	r2, [sp, #528]	; 0x210
    4334:	mov	r1, r5
    4336:	add	r0, sp, #800	; 0x320
    4338:	bl	2690 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    if(t.child==object)
    433c:	ldr	r7, [sp, #804]	; 0x324
    433e:	cmp	r6, r7
    4340:	beq.n	4392 <MTPStorage_SD::DeleteObject(unsigned long) [clone .part.9] [clone .constprop.11]+0x9a>
    }
    else
    { // link junger to older sibling
      // find junger sibling
      uint32_t is = t.child;
      Record x = ReadIndexRecord(is);
    4342:	add.w	r0, sp, #1072	; 0x430
    4346:	mov	r2, r7
    4348:	mov	r1, r5
    434a:	bl	2690 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
      while((x.sibling != object)) { is=x.sibling; x=ReadIndexRecord(is);}
    434e:	ldr.w	r4, [sp, #1080]	; 0x438
    4352:	cmp	r6, r4
    4354:	bne.n	435a <MTPStorage_SD::DeleteObject(unsigned long) [clone .part.9] [clone .constprop.11]+0x62>
    4356:	b.n	43a6 <MTPStorage_SD::DeleteObject(unsigned long) [clone .part.9] [clone .constprop.11]+0xae>
    4358:	mov	r4, r3
    435a:	mov	r2, r4
    435c:	mov	r1, r5
    435e:	mov	r0, sp
    4360:	bl	2690 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    4364:	mov.w	r2, #272	; 0x110
    4368:	mov	r1, sp
    436a:	add.w	r0, sp, #1072	; 0x430
    436e:	bl	cb00 <memcpy>
    4372:	ldr.w	r3, [sp, #1080]	; 0x438
    4376:	cmp	r6, r3
    4378:	bne.n	4358 <MTPStorage_SD::DeleteObject(unsigned long) [clone .part.9] [clone .constprop.11]+0x60>
      // is points now to junder sibling
      x.sibling = r.sibling;
      WriteIndexRecord(is, x);
    437a:	mov	r0, r5
      // find junger sibling
      uint32_t is = t.child;
      Record x = ReadIndexRecord(is);
      while((x.sibling != object)) { is=x.sibling; x=ReadIndexRecord(is);}
      // is points now to junder sibling
      x.sibling = r.sibling;
    437c:	ldr	r3, [sp, #536]	; 0x218
    437e:	str.w	r3, [sp, #1080]	; 0x438
      WriteIndexRecord(is, x);
    4382:	add.w	r2, sp, #1072	; 0x430
    4386:	mov	r1, r4
    4388:	bl	24b0 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    }
    return 1;
  }
    438c:	addw	sp, sp, #1348	; 0x544
    4390:	pop	{r4, r5, r6, r7, pc}
    // update index file
    Record t = ReadIndexRecord(r.parent);
    if(t.child==object)
    { // we are the jungest, simply relink parent to older sibling
      t.child = r.sibling;
      WriteIndexRecord(r.parent, t);
    4392:	mov	r0, r5
    
    // update index file
    Record t = ReadIndexRecord(r.parent);
    if(t.child==object)
    { // we are the jungest, simply relink parent to older sibling
      t.child = r.sibling;
    4394:	ldr	r3, [sp, #536]	; 0x218
      WriteIndexRecord(r.parent, t);
    4396:	ldr	r1, [sp, #528]	; 0x210
    
    // update index file
    Record t = ReadIndexRecord(r.parent);
    if(t.child==object)
    { // we are the jungest, simply relink parent to older sibling
      t.child = r.sibling;
    4398:	str	r3, [sp, #804]	; 0x324
      WriteIndexRecord(r.parent, t);
    439a:	add	r2, sp, #800	; 0x320
    439c:	bl	24b0 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
      // is points now to junder sibling
      x.sibling = r.sibling;
      WriteIndexRecord(is, x);
    }
    return 1;
  }
    43a0:	addw	sp, sp, #1348	; 0x544
    43a4:	pop	{r4, r5, r6, r7, pc}
    else
    { // link junger to older sibling
      // find junger sibling
      uint32_t is = t.child;
      Record x = ReadIndexRecord(is);
      while((x.sibling != object)) { is=x.sibling; x=ReadIndexRecord(is);}
    43a6:	mov	r4, r7
    43a8:	b.n	437a <MTPStorage_SD::DeleteObject(unsigned long) [clone .part.9] [clone .constprop.11]+0x82>
    43aa:	nop

000043ac <MTPStorage_SD::DeleteObject(unsigned long)>:
  }
}

  bool MTPStorage_SD::DeleteObject(uint32_t object)
  {
    if(object==0xFFFFFFFFUL) return true; // don't do anything if trying to delete a root directory see below
    43ac:	adds	r2, r1, #1
    43ae:	beq.n	43ba <MTPStorage_SD::DeleteObject(unsigned long)+0xe>
    sd_remove(store,file);
  }
}

  bool MTPStorage_SD::DeleteObject(uint32_t object)
  {
    43b0:	push	{r3, lr}
    43b2:	bl	42f8 <MTPStorage_SD::DeleteObject(unsigned long) [clone .part.9] [clone .constprop.11]>
      // is points now to junder sibling
      x.sibling = r.sibling;
      WriteIndexRecord(is, x);
    }
    return 1;
  }
    43b6:	movs	r0, #1
    43b8:	pop	{r3, pc}
    43ba:	movs	r0, #1
    43bc:	bx	lr
    43be:	nop

000043c0 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)>:
  WriteIndexRecord(newHandle,p2);
  return true;
}
/************************************** mSD_Base *******************************/
bool mSD_Base::sd_copy(uint32_t store0, char *oldfilename, uint32_t store1, char *newfilename)
{
    43c0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    }

    uint32_t sd_getFSCount(void) {return fsCount;}
    const char *sd_getFSName(uint32_t store) { return sd_name[store];}

    File sd_open(uint32_t store, const char *filename, uint32_t mode) { return sdx[store]->open(filename,mode);  }
    43c4:	add.w	r1, r0, r1, lsl #2
    43c8:	mov	r6, r0
    43ca:	ldr	r1, [r1, #84]	; 0x54
    43cc:	ldr	r0, [r1, #0]
    43ce:	subw	sp, sp, #2092	; 0x82c
    43d2:	ldr	r4, [r0, #0]
    43d4:	mov	r7, r3
    43d6:	mov	r0, sp
    43d8:	movs	r3, #0
    43da:	blx	r4
	}
	virtual void close() {
		if (f) f->close();
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
    43dc:	ldr	r3, [sp, #16]
    43de:	cmp	r3, #0
    43e0:	beq.w	480a <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x44a>
    43e4:	ldr	r2, [r3, #0]
    43e6:	ldr	r5, [pc, #624]	; (4658 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x298>)
    43e8:	ldr	r2, [r2, #68]	; 0x44
    43ea:	cmp	r2, r5
    43ec:	bne.w	4768 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x3a8>
    43f0:	ldr	r0, [r3, #16]
    43f2:	cmp	r0, #0
    43f4:	beq.w	4618 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x258>
    43f8:	ldr	r2, [r0, #0]
    43fa:	ldr	r2, [r2, #68]	; 0x44
    43fc:	cmp	r2, r5
    43fe:	bne.w	476a <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x3aa>
    4402:	ldr	r0, [r0, #16]
    4404:	cmp	r0, #0
    4406:	beq.w	4618 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x258>
    440a:	ldr	r2, [r0, #0]
    440c:	ldr	r2, [r2, #68]	; 0x44
    440e:	cmp	r2, r5
    4410:	bne.w	476a <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x3aa>
    4414:	ldr	r0, [r0, #16]
    4416:	cmp	r0, #0
    4418:	beq.w	4618 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x258>
    441c:	ldr	r2, [r0, #0]
    441e:	ldr	r2, [r2, #68]	; 0x44
    4420:	cmp	r2, r5
    4422:	bne.w	476a <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x3aa>
    4426:	ldr	r0, [r0, #16]
    4428:	cmp	r0, #0
    442a:	beq.w	4618 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x258>
    442e:	ldr	r2, [r0, #0]
    4430:	ldr	r2, [r2, #68]	; 0x44
    4432:	cmp	r2, r5
    4434:	bne.w	476a <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x3aa>
    4438:	ldr	r0, [r0, #16]
    443a:	cmp	r0, #0
    443c:	beq.w	4618 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x258>
    4440:	ldr	r2, [r0, #0]
    4442:	ldr	r2, [r2, #68]	; 0x44
    4444:	cmp	r2, r5
    4446:	bne.w	476a <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x3aa>
    444a:	ldr	r0, [r0, #16]
    444c:	cmp	r0, #0
    444e:	beq.w	4618 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x258>
    4452:	ldr	r2, [r0, #0]
    4454:	ldr	r2, [r2, #68]	; 0x44
    4456:	cmp	r2, r5
    4458:	bne.w	476a <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x3aa>
    445c:	ldr	r0, [r0, #16]
    445e:	cmp	r0, #0
    4460:	beq.w	4618 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x258>
    4464:	ldr	r3, [r0, #0]
    4466:	ldr	r3, [r3, #68]	; 0x44
    4468:	blx	r3
    446a:	mov	r4, r0
  #if DEBUG>1
    Serial.print("From "); Serial.print(store0); Serial.print(": ");Serial.println(oldfilename);
    Serial.print("To   "); Serial.print(store1); Serial.print(": ");Serial.println(newfilename);
  #endif

  File f1 = sd_open(store0,oldfilename,FILE_READ); if(!f1) {DBG_FAIL_MACRO; return false;}
    446c:	cmp	r4, #0
    446e:	beq.w	4c52 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x892>
    4472:	add.w	r6, r6, r7, lsl #2
    4476:	add	r0, sp, #20
    4478:	ldr	r1, [r6, #84]	; 0x54
    447a:	ldr.w	r2, [sp, #2128]	; 0x850
    447e:	ldr	r3, [r1, #0]
    4480:	ldr	r4, [r3, #0]
    4482:	movs	r3, #2
    4484:	blx	r4
    4486:	ldr	r0, [sp, #36]	; 0x24
    4488:	cmp	r0, #0
    448a:	beq.w	4770 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x3b0>
    448e:	ldr	r3, [r0, #0]
    4490:	ldr	r3, [r3, #68]	; 0x44
    4492:	cmp	r3, r5
    4494:	bne.w	493a <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x57a>
    4498:	ldr	r0, [r0, #16]
    449a:	cmp	r0, #0
    449c:	beq.w	4770 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x3b0>
    44a0:	ldr	r3, [r0, #0]
    44a2:	ldr	r3, [r3, #68]	; 0x44
    44a4:	cmp	r3, r5
    44a6:	bne.w	493a <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x57a>
    44aa:	ldr	r0, [r0, #16]
    44ac:	cmp	r0, #0
    44ae:	beq.w	4770 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x3b0>
    44b2:	ldr	r3, [r0, #0]
    44b4:	ldr	r3, [r3, #68]	; 0x44
    44b6:	cmp	r3, r5
    44b8:	bne.w	493a <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x57a>
    44bc:	ldr	r0, [r0, #16]
    44be:	cmp	r0, #0
    44c0:	beq.w	4770 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x3b0>
    44c4:	ldr	r3, [r0, #0]
    44c6:	ldr	r3, [r3, #68]	; 0x44
    44c8:	cmp	r3, r5
    44ca:	bne.w	493a <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x57a>
    44ce:	ldr	r0, [r0, #16]
    44d0:	cmp	r0, #0
    44d2:	beq.w	4770 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x3b0>
    44d6:	ldr	r3, [r0, #0]
    44d8:	ldr	r3, [r3, #68]	; 0x44
    44da:	cmp	r3, r5
    44dc:	bne.w	493a <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x57a>
    44e0:	ldr	r0, [r0, #16]
    44e2:	cmp	r0, #0
    44e4:	beq.w	4770 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x3b0>
    44e8:	ldr	r3, [r0, #0]
    44ea:	ldr	r3, [r3, #68]	; 0x44
    44ec:	cmp	r3, r5
    44ee:	bne.w	493a <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x57a>
    44f2:	ldr	r0, [r0, #16]
    44f4:	cmp	r0, #0
    44f6:	beq.w	4770 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x3b0>
    44fa:	ldr	r3, [r0, #0]
    44fc:	ldr	r3, [r3, #68]	; 0x44
    44fe:	cmp	r3, r5
    4500:	bne.w	493a <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x57a>
    4504:	ldr	r0, [r0, #16]
    4506:	cmp	r0, #0
    4508:	beq.w	4770 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x3b0>
    450c:	ldr	r3, [r0, #0]
    450e:	ldr	r3, [r3, #68]	; 0x44
    4510:	cmp	r3, r5
    4512:	bne.w	493a <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x57a>
    4516:	ldr	r0, [r0, #16]
    4518:	cmp	r0, #0
    451a:	beq.w	4770 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x3b0>
    451e:	ldr	r3, [r0, #0]
    4520:	ldr	r3, [r3, #68]	; 0x44
    4522:	cmp	r3, r5
    4524:	bne.w	493a <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x57a>
    4528:	ldr	r0, [r0, #16]
    452a:	cmp	r0, #0
    452c:	beq.w	4770 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x3b0>
    4530:	ldr	r3, [r0, #0]
    4532:	ldr	r3, [r3, #68]	; 0x44
    4534:	cmp	r3, r5
    4536:	bne.w	493a <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x57a>
    453a:	ldr	r0, [r0, #16]
    453c:	cmp	r0, #0
    453e:	beq.w	4770 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x3b0>
    4542:	ldr	r3, [r0, #0]
    4544:	ldr	r3, [r3, #68]	; 0x44
    4546:	blx	r3
  File f2 = sd_open(store1,newfilename,FILE_WRITE_BEGIN);
  if(!f2) { f1.close(); {DBG_FAIL_MACRO; return false;}}
    4548:	cmp	r0, #0
    454a:	beq.w	4770 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x3b0>
    454e:	ldr	r5, [pc, #268]	; (465c <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x29c>)
    4550:	mov.w	r4, #4294967295
	}
	virtual size_t write(const void *buf, size_t size) {
		return (f) ? f->write(buf, size) : 0;
	}
	virtual int available() {
		return (f) ? f->available() : 0;
    4554:	ldr	r3, [sp, #16]
    4556:	cmp	r3, #0
    4558:	beq.w	4b56 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x796>
    455c:	ldr	r1, [r3, #0]
    455e:	ldr	r2, [r1, #16]
    4560:	cmp	r2, r5
    4562:	bne.w	4b48 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x788>
    4566:	ldr	r2, [r3, #16]
    4568:	cmp	r2, #0
    456a:	beq.w	4b4e <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x78e>
    456e:	ldr	r0, [r2, #0]
    4570:	ldr	r6, [r0, #16]
    4572:	cmp	r6, r5
    4574:	bne.w	49f0 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x630>
    4578:	ldr	r0, [r2, #16]
    457a:	cmp	r0, #0
    457c:	beq.w	493e <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x57e>
    4580:	ldr	r6, [r0, #0]
    4582:	ldr	r6, [r6, #16]
    4584:	cmp	r6, r5
    4586:	bne.w	49f2 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x632>
    458a:	ldr	r0, [r0, #16]
    458c:	cmp	r0, #0
    458e:	beq.w	493e <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x57e>
    4592:	ldr	r6, [r0, #0]
    4594:	ldr	r6, [r6, #16]
    4596:	cmp	r6, r5
    4598:	bne.w	49f2 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x632>
    459c:	ldr	r0, [r0, #16]
    459e:	cmp	r0, #0
    45a0:	beq.w	493e <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x57e>
    45a4:	ldr	r6, [r0, #0]
    45a6:	ldr	r6, [r6, #16]
    45a8:	cmp	r6, r5
    45aa:	bne.w	49f2 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x632>
    45ae:	ldr	r0, [r0, #16]
    45b0:	cmp	r0, #0
    45b2:	beq.w	493e <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x57e>
    45b6:	ldr	r6, [r0, #0]
    45b8:	ldr	r6, [r6, #16]
    45ba:	cmp	r6, r5
    45bc:	bne.w	49f2 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x632>
    45c0:	ldr	r0, [r0, #16]
    45c2:	cmp	r0, #0
    45c4:	beq.w	493e <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x57e>
    45c8:	ldr	r6, [r0, #0]
    45ca:	ldr	r6, [r6, #16]
    45cc:	cmp	r6, r5
    45ce:	bne.w	49f2 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x632>
    45d2:	ldr	r0, [r0, #16]
    45d4:	cmp	r0, #0
    45d6:	beq.w	493e <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x57e>
    45da:	ldr	r6, [r0, #0]
    45dc:	ldr	r6, [r6, #16]
    45de:	cmp	r6, r5
    45e0:	bne.w	49f2 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x632>
    45e4:	ldr	r0, [r0, #16]
    45e6:	cmp	r0, #0
    45e8:	beq.w	493e <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x57e>
    45ec:	ldr	r6, [r0, #0]
    45ee:	ldr	r6, [r6, #16]
    45f0:	cmp	r6, r5
    45f2:	bne.w	49f2 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x632>
    45f6:	ldr	r0, [r0, #16]
    45f8:	cmp	r0, #0
    45fa:	beq.w	493e <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x57e>
    45fe:	ldr	r6, [r0, #0]
    4600:	ldr	r6, [r6, #16]
    4602:	cmp	r6, r5
    4604:	bne.w	49f2 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x632>
    4608:	ldr	r0, [r0, #16]
    460a:	cmp	r0, #0
    460c:	beq.w	493e <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x57e>
    4610:	ldr	r3, [r0, #0]
    4612:	ldr	r3, [r3, #16]
    4614:	blx	r3
    4616:	b.n	49f4 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x634>
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    4618:	ldr	r6, [pc, #68]	; (4660 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x2a0>)
    461a:	str	r6, [sp, #0]
    461c:	movs	r4, #0
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    461e:	ldr	r2, [r3, #16]
    4620:	subs	r2, #1
    4622:	str	r2, [r3, #16]
    4624:	cbnz	r2, 464c <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x28c>
    4626:	ldr	r5, [sp, #16]
    4628:	cbz	r5, 464c <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x28c>
    462a:	ldr	r3, [r5, #0]
    462c:	ldr	r2, [pc, #52]	; (4664 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x2a4>)
    462e:	ldr	r3, [r3, #32]
    4630:	cmp	r3, r2
    4632:	bne.w	4be6 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x826>
    4636:	ldr	r1, [r5, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    4638:	str	r6, [r5, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    463a:	cbz	r1, 4644 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x284>
    463c:	ldr	r3, [r1, #16]
    463e:	subs	r3, #1
    4640:	str	r3, [r1, #16]
    4642:	cbz	r3, 4668 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x2a8>
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
		invalidate();
	}
    4644:	mov	r0, r5
    4646:	movs	r1, #20
    4648:	bl	e950 <operator delete(void*, unsigned int)>
  // close all files
  f1.close();
  f2.close();
  if(nd<0) {DBG_FAIL_MACRO; return false;}
  return true;
}
    464c:	mov	r0, r4
    464e:	addw	sp, sp, #2092	; 0x82c
    4652:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4656:	nop
    4658:	.word	0x00000501
    465c:	.word	0x0000048d
    4660:	.word	0x000141ac
    4664:	.word	0x00000f25
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    4668:	ldr	r7, [r5, #16]
    466a:	cmp	r7, #0
    466c:	beq.n	4644 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x284>
    466e:	ldr	r3, [r7, #0]
    4670:	ldr	r3, [r3, #32]
    4672:	cmp	r3, r2
    4674:	bne.w	4c08 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x848>
    4678:	ldr	r1, [r7, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    467a:	str	r6, [r7, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    467c:	cmp	r1, #0
    467e:	beq.n	475e <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x39e>
    4680:	ldr	r3, [r1, #16]
    4682:	subs	r3, #1
    4684:	str	r3, [r1, #16]
    4686:	cmp	r3, #0
    4688:	bne.n	475e <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x39e>
    468a:	ldr.w	r8, [r7, #16]
    468e:	cmp.w	r8, #0
    4692:	beq.n	475e <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x39e>
    4694:	ldr.w	r3, [r8]
    4698:	ldr	r3, [r3, #32]
    469a:	cmp	r3, r2
    469c:	bne.w	4c2e <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x86e>
    46a0:	ldr.w	r1, [r8, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    46a4:	str.w	r6, [r8]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    46a8:	cmp	r1, #0
    46aa:	beq.n	4756 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x396>
    46ac:	ldr	r3, [r1, #16]
    46ae:	subs	r3, #1
    46b0:	str	r3, [r1, #16]
    46b2:	cmp	r3, #0
    46b4:	bne.n	4756 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x396>
    46b6:	ldr.w	r9, [r8, #16]
    46ba:	cmp.w	r9, #0
    46be:	beq.n	4756 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x396>
    46c0:	ldr.w	r3, [r9]
    46c4:	ldr	r3, [r3, #32]
    46c6:	cmp	r3, r2
    46c8:	bne.w	4c34 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x874>
    46cc:	ldr.w	r1, [r9, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    46d0:	str.w	r6, [r9]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    46d4:	cmp	r1, #0
    46d6:	beq.n	474e <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x38e>
    46d8:	ldr	r3, [r1, #16]
    46da:	subs	r3, #1
    46dc:	str	r3, [r1, #16]
    46de:	cmp	r3, #0
    46e0:	bne.n	474e <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x38e>
    46e2:	ldr.w	sl, [r9, #16]
    46e6:	cmp.w	sl, #0
    46ea:	beq.n	474e <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x38e>
    46ec:	ldr.w	r3, [sl]
    46f0:	ldr	r3, [r3, #32]
    46f2:	cmp	r3, r2
    46f4:	bne.w	4c46 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x886>
    46f8:	ldr.w	r1, [sl, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    46fc:	str.w	r6, [sl]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    4700:	cbz	r1, 4746 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x386>
    4702:	ldr	r3, [r1, #16]
    4704:	subs	r3, #1
    4706:	str	r3, [r1, #16]
    4708:	cbnz	r3, 4746 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x386>
    470a:	ldr.w	fp, [sl, #16]
    470e:	cmp.w	fp, #0
    4712:	beq.n	4746 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x386>
    4714:	ldr.w	r3, [fp]
    4718:	ldr	r3, [r3, #32]
    471a:	cmp	r3, r2
    471c:	bne.w	4c4c <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x88c>
    4720:	ldr.w	r2, [fp, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    4724:	str.w	r6, [fp]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    4728:	cbz	r2, 473e <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x37e>
    472a:	ldr	r3, [r2, #16]
    472c:	subs	r3, #1
    472e:	str	r3, [r2, #16]
    4730:	cbnz	r3, 473e <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x37e>
    4732:	ldr.w	r0, [fp, #16]
    4736:	cbz	r0, 473e <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x37e>
    4738:	ldr	r3, [r0, #0]
    473a:	ldr	r3, [r3, #32]
    473c:	blx	r3
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
		invalidate();
	}
    473e:	mov	r0, fp
    4740:	movs	r1, #20
    4742:	bl	e950 <operator delete(void*, unsigned int)>
    4746:	mov	r0, sl
    4748:	movs	r1, #20
    474a:	bl	e950 <operator delete(void*, unsigned int)>
    474e:	mov	r0, r9
    4750:	movs	r1, #20
    4752:	bl	e950 <operator delete(void*, unsigned int)>
    4756:	mov	r0, r8
    4758:	movs	r1, #20
    475a:	bl	e950 <operator delete(void*, unsigned int)>
    475e:	mov	r0, r7
    4760:	movs	r1, #20
    4762:	bl	e950 <operator delete(void*, unsigned int)>
    4766:	b.n	4644 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x284>
	}
	virtual void close() {
		if (f) f->close();
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
    4768:	mov	r0, r3
    476a:	blx	r2
    476c:	mov	r4, r0
    476e:	b.n	446c <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0xac>
	}
	virtual uint64_t size() {
		return (f) ? f->size() : 0;
	}
	virtual void close() {
		if (f) f->close();
    4770:	ldr	r0, [sp, #16]
    4772:	cmp	r0, #0
    4774:	beq.n	4816 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x456>
    4776:	ldr	r3, [r0, #0]
    4778:	ldr	r1, [pc, #616]	; (49e4 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x624>)
    477a:	ldr	r3, [r3, #64]	; 0x40
    477c:	cmp	r3, r1
    477e:	bne.w	4932 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x572>
    4782:	ldr	r0, [r0, #16]
    4784:	cmp	r0, #0
    4786:	beq.n	4816 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x456>
    4788:	ldr	r3, [r0, #0]
    478a:	ldr	r3, [r3, #64]	; 0x40
    478c:	cmp	r3, r1
    478e:	bne.w	4932 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x572>
    4792:	ldr	r0, [r0, #16]
    4794:	cmp	r0, #0
    4796:	beq.n	4816 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x456>
    4798:	ldr	r3, [r0, #0]
    479a:	ldr	r3, [r3, #64]	; 0x40
    479c:	cmp	r3, r1
    479e:	bne.w	4932 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x572>
    47a2:	ldr	r0, [r0, #16]
    47a4:	cmp	r0, #0
    47a6:	beq.n	4816 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x456>
    47a8:	ldr	r3, [r0, #0]
    47aa:	ldr	r3, [r3, #64]	; 0x40
    47ac:	cmp	r3, r1
    47ae:	bne.w	4932 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x572>
    47b2:	ldr	r0, [r0, #16]
    47b4:	cmp	r0, #0
    47b6:	beq.n	4816 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x456>
    47b8:	ldr	r3, [r0, #0]
    47ba:	ldr	r3, [r3, #64]	; 0x40
    47bc:	cmp	r3, r1
    47be:	bne.w	4932 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x572>
    47c2:	ldr	r0, [r0, #16]
    47c4:	cbz	r0, 4816 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x456>
    47c6:	ldr	r3, [r0, #0]
    47c8:	ldr	r3, [r3, #64]	; 0x40
    47ca:	cmp	r3, r1
    47cc:	bne.w	4932 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x572>
    47d0:	ldr	r0, [r0, #16]
    47d2:	cbz	r0, 4816 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x456>
    47d4:	ldr	r3, [r0, #0]
    47d6:	ldr	r3, [r3, #64]	; 0x40
    47d8:	cmp	r3, r1
    47da:	bne.w	4932 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x572>
    47de:	ldr	r0, [r0, #16]
    47e0:	cbz	r0, 4816 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x456>
    47e2:	ldr	r3, [r0, #0]
    47e4:	ldr	r3, [r3, #64]	; 0x40
    47e6:	cmp	r3, r1
    47e8:	bne.w	4932 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x572>
    47ec:	ldr	r0, [r0, #16]
    47ee:	cbz	r0, 4816 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x456>
    47f0:	ldr	r3, [r0, #0]
    47f2:	ldr	r3, [r3, #64]	; 0x40
    47f4:	cmp	r3, r1
    47f6:	bne.w	4932 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x572>
    47fa:	ldr	r0, [r0, #16]
    47fc:	cbz	r0, 4816 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x456>
    47fe:	ldr	r3, [r0, #0]
    4800:	ldr	r3, [r3, #64]	; 0x40
    4802:	blx	r3
    Serial.print("To   "); Serial.print(store1); Serial.print(": ");Serial.println(newfilename);
  #endif

  File f1 = sd_open(store0,oldfilename,FILE_READ); if(!f1) {DBG_FAIL_MACRO; return false;}
  File f2 = sd_open(store1,newfilename,FILE_WRITE_BEGIN);
  if(!f2) { f1.close(); {DBG_FAIL_MACRO; return false;}}
    4804:	movs	r4, #0
    4806:	ldr	r3, [sp, #36]	; 0x24
    4808:	b.n	481a <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x45a>
  #if DEBUG>1
    Serial.print("From "); Serial.print(store0); Serial.print(": ");Serial.println(oldfilename);
    Serial.print("To   "); Serial.print(store1); Serial.print(": ");Serial.println(newfilename);
  #endif

  File f1 = sd_open(store0,oldfilename,FILE_READ); if(!f1) {DBG_FAIL_MACRO; return false;}
    480a:	mov	r4, r3
  // close all files
  f1.close();
  f2.close();
  if(nd<0) {DBG_FAIL_MACRO; return false;}
  return true;
}
    480c:	mov	r0, r4
    480e:	addw	sp, sp, #2092	; 0x82c
    4812:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4816:	ldr	r3, [sp, #36]	; 0x24
    Serial.print("To   "); Serial.print(store1); Serial.print(": ");Serial.println(newfilename);
  #endif

  File f1 = sd_open(store0,oldfilename,FILE_READ); if(!f1) {DBG_FAIL_MACRO; return false;}
  File f2 = sd_open(store1,newfilename,FILE_WRITE_BEGIN);
  if(!f2) { f1.close(); {DBG_FAIL_MACRO; return false;}}
    4818:	movs	r4, #0
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    481a:	ldr	r6, [pc, #460]	; (49e8 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x628>)
    481c:	str	r6, [sp, #20]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    481e:	cmp	r3, #0
    4820:	beq.w	4926 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x566>
    4824:	ldr	r2, [r3, #16]
    4826:	subs	r2, #1
    4828:	str	r2, [r3, #16]
    482a:	cmp	r2, #0
    482c:	bne.n	4926 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x566>
    482e:	ldr	r5, [sp, #36]	; 0x24
    4830:	cmp	r5, #0
    4832:	beq.n	4926 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x566>
    4834:	ldr	r3, [r5, #0]
    4836:	ldr	r2, [pc, #436]	; (49ec <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x62c>)
    4838:	ldr	r3, [r3, #32]
    483a:	cmp	r3, r2
    483c:	bne.w	4c0e <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x84e>
    4840:	ldr	r1, [r5, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    4842:	str	r6, [r5, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    4844:	cmp	r1, #0
    4846:	beq.n	491e <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x55e>
    4848:	ldr	r3, [r1, #16]
    484a:	subs	r3, #1
    484c:	str	r3, [r1, #16]
    484e:	cmp	r3, #0
    4850:	bne.n	491e <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x55e>
    4852:	ldr	r7, [r5, #16]
    4854:	cmp	r7, #0
    4856:	beq.n	491e <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x55e>
    4858:	ldr	r3, [r7, #0]
    485a:	ldr	r3, [r3, #32]
    485c:	cmp	r3, r2
    485e:	bne.w	4c28 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x868>
    4862:	ldr	r1, [r7, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    4864:	str	r6, [r7, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    4866:	cmp	r1, #0
    4868:	beq.n	4916 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x556>
    486a:	ldr	r3, [r1, #16]
    486c:	subs	r3, #1
    486e:	str	r3, [r1, #16]
    4870:	cmp	r3, #0
    4872:	bne.n	4916 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x556>
    4874:	ldr.w	r8, [r7, #16]
    4878:	cmp.w	r8, #0
    487c:	beq.n	4916 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x556>
    487e:	ldr.w	r3, [r8]
    4882:	ldr	r3, [r3, #32]
    4884:	cmp	r3, r2
    4886:	bne.w	4c3a <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x87a>
    488a:	ldr.w	r1, [r8, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    488e:	str.w	r6, [r8]
    4892:	ldr	r0, [pc, #340]	; (49e8 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x628>)
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    4894:	cmp	r1, #0
    4896:	beq.n	490e <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x54e>
    4898:	ldr	r3, [r1, #16]
    489a:	subs	r3, #1
    489c:	str	r3, [r1, #16]
    489e:	cmp	r3, #0
    48a0:	bne.n	490e <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x54e>
    48a2:	ldr.w	r9, [r8, #16]
    48a6:	cmp.w	r9, #0
    48aa:	beq.n	490e <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x54e>
    48ac:	ldr.w	r3, [r9]
    48b0:	ldr	r3, [r3, #32]
    48b2:	cmp	r3, r2
    48b4:	bne.w	4c40 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x880>
    48b8:	ldr.w	r1, [r9, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    48bc:	str.w	r0, [r9]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    48c0:	cbz	r1, 4906 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x546>
    48c2:	ldr	r3, [r1, #16]
    48c4:	subs	r3, #1
    48c6:	str	r3, [r1, #16]
    48c8:	cbnz	r3, 4906 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x546>
    48ca:	ldr.w	sl, [r9, #16]
    48ce:	cmp.w	sl, #0
    48d2:	beq.n	4906 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x546>
    48d4:	ldr.w	r3, [sl]
    48d8:	ldr	r3, [r3, #32]
    48da:	cmp	r3, r2
    48dc:	bne.w	4c5c <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x89c>
    48e0:	ldr.w	r2, [sl, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    48e4:	str.w	r6, [sl]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    48e8:	cbz	r2, 48fe <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x53e>
    48ea:	ldr	r3, [r2, #16]
    48ec:	subs	r3, #1
    48ee:	str	r3, [r2, #16]
    48f0:	cbnz	r3, 48fe <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x53e>
    48f2:	ldr.w	r0, [sl, #16]
    48f6:	cbz	r0, 48fe <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x53e>
    48f8:	ldr	r3, [r0, #0]
    48fa:	ldr	r3, [r3, #32]
    48fc:	blx	r3
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
		invalidate();
	}
    48fe:	mov	r0, sl
    4900:	movs	r1, #20
    4902:	bl	e950 <operator delete(void*, unsigned int)>
    4906:	mov	r0, r9
    4908:	movs	r1, #20
    490a:	bl	e950 <operator delete(void*, unsigned int)>
    490e:	mov	r0, r8
    4910:	movs	r1, #20
    4912:	bl	e950 <operator delete(void*, unsigned int)>
    4916:	mov	r0, r7
    4918:	movs	r1, #20
    491a:	bl	e950 <operator delete(void*, unsigned int)>
    491e:	mov	r0, r5
    4920:	movs	r1, #20
    4922:	bl	e950 <operator delete(void*, unsigned int)>
    4926:	ldr	r3, [sp, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    4928:	str	r6, [sp, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    492a:	cmp	r3, #0
    492c:	bne.w	461e <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x25e>
    4930:	b.n	464c <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x28c>
	}
	virtual uint64_t size() {
		return (f) ? f->size() : 0;
	}
	virtual void close() {
		if (f) f->close();
    4932:	blx	r3
    4934:	movs	r4, #0
    4936:	ldr	r3, [sp, #36]	; 0x24
    4938:	b.n	481a <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x45a>
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
    493a:	blx	r3
    493c:	b.n	4548 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x188>
	}
	virtual uint64_t size() {
		return (f) ? f->size() : 0;
	}
	virtual void close() {
		if (f) f->close();
    493e:	ldr	r5, [r1, #64]	; 0x40
    4940:	ldr	r1, [pc, #160]	; (49e4 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x624>)
    4942:	cmp	r5, r1
    4944:	bne.w	4c14 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x854>
    4948:	mov	r0, r2
    494a:	ldr	r3, [r0, #0]
    494c:	ldr	r3, [r3, #64]	; 0x40
    494e:	cmp	r3, r1
    4950:	bne.w	4c04 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x844>
    4954:	ldr	r0, [r0, #16]
    4956:	cmp	r0, #0
    4958:	beq.w	4b56 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x796>
    495c:	ldr	r3, [r0, #0]
    495e:	ldr	r3, [r3, #64]	; 0x40
    4960:	cmp	r3, r1
    4962:	bne.w	4c04 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x844>
    4966:	ldr	r0, [r0, #16]
    4968:	cmp	r0, #0
    496a:	beq.w	4b56 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x796>
    496e:	ldr	r3, [r0, #0]
    4970:	ldr	r3, [r3, #64]	; 0x40
    4972:	cmp	r3, r1
    4974:	bne.w	4c04 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x844>
    4978:	ldr	r0, [r0, #16]
    497a:	cmp	r0, #0
    497c:	beq.w	4b56 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x796>
    4980:	ldr	r3, [r0, #0]
    4982:	ldr	r3, [r3, #64]	; 0x40
    4984:	cmp	r3, r1
    4986:	bne.w	4c04 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x844>
    498a:	ldr	r0, [r0, #16]
    498c:	cmp	r0, #0
    498e:	beq.w	4b56 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x796>
    4992:	ldr	r3, [r0, #0]
    4994:	ldr	r3, [r3, #64]	; 0x40
    4996:	cmp	r3, r1
    4998:	bne.w	4c04 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x844>
    499c:	ldr	r0, [r0, #16]
    499e:	cmp	r0, #0
    49a0:	beq.w	4b56 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x796>
    49a4:	ldr	r3, [r0, #0]
    49a6:	ldr	r3, [r3, #64]	; 0x40
    49a8:	cmp	r3, r1
    49aa:	bne.w	4c04 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x844>
    49ae:	ldr	r0, [r0, #16]
    49b0:	cmp	r0, #0
    49b2:	beq.w	4b56 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x796>
    49b6:	ldr	r3, [r0, #0]
    49b8:	ldr	r3, [r3, #64]	; 0x40
    49ba:	cmp	r3, r1
    49bc:	bne.w	4c04 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x844>
    49c0:	ldr	r0, [r0, #16]
    49c2:	cmp	r0, #0
    49c4:	beq.w	4b56 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x796>
    49c8:	ldr	r3, [r0, #0]
    49ca:	ldr	r3, [r3, #64]	; 0x40
    49cc:	cmp	r3, r1
    49ce:	bne.w	4c04 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x844>
    49d2:	ldr	r0, [r0, #16]
    49d4:	cmp	r0, #0
    49d6:	beq.w	4b56 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x796>
    49da:	ldr	r3, [r0, #0]
    49dc:	ldr	r3, [r3, #64]	; 0x40
    49de:	blx	r3
    49e0:	b.n	4b56 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x796>
    49e2:	nop
    49e4:	.word	0x000004f5
    49e8:	.word	0x000141ac
    49ec:	.word	0x00000f25
	}
	virtual size_t write(const void *buf, size_t size) {
		return (f) ? f->write(buf, size) : 0;
	}
	virtual int available() {
		return (f) ? f->available() : 0;
    49f0:	mov	r0, r2
    49f2:	blx	r6

  while(f1.available()>0)
    49f4:	cmp	r0, #0
	unsigned int getRefcount() { // testing only
		return refcount;
	}
#endif
	virtual size_t read(void *buf, size_t nbyte) {
		return (f) ? f->read(buf, nbyte) : 0;
    49f6:	ldr	r3, [sp, #16]
    49f8:	ble.n	4aa4 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6e4>
    49fa:	cmp	r3, #0
    49fc:	beq.n	4aac <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6ec>
    49fe:	ldr	r1, [r3, #0]
    4a00:	ldr	r2, [pc, #536]	; (4c1c <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x85c>)
    4a02:	ldr	r4, [r1, #40]	; 0x28
    4a04:	cmp	r4, r2
    4a06:	bne.n	4a86 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6c6>
    4a08:	ldr	r0, [r3, #16]
    4a0a:	cmp	r0, #0
    4a0c:	beq.n	4aac <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6ec>
    4a0e:	ldr	r1, [r0, #0]
    4a10:	ldr	r4, [r1, #40]	; 0x28
    4a12:	cmp	r4, r2
    4a14:	bne.n	4a88 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6c8>
    4a16:	ldr	r0, [r0, #16]
    4a18:	cmp	r0, #0
    4a1a:	beq.n	4aac <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6ec>
    4a1c:	ldr	r1, [r0, #0]
    4a1e:	ldr	r4, [r1, #40]	; 0x28
    4a20:	cmp	r4, r2
    4a22:	bne.n	4a88 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6c8>
    4a24:	ldr	r0, [r0, #16]
    4a26:	cmp	r0, #0
    4a28:	beq.n	4aac <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6ec>
    4a2a:	ldr	r1, [r0, #0]
    4a2c:	ldr	r4, [r1, #40]	; 0x28
    4a2e:	cmp	r4, r2
    4a30:	bne.n	4a88 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6c8>
    4a32:	ldr	r0, [r0, #16]
    4a34:	cmp	r0, #0
    4a36:	beq.n	4aac <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6ec>
    4a38:	ldr	r1, [r0, #0]
    4a3a:	ldr	r4, [r1, #40]	; 0x28
    4a3c:	cmp	r4, r2
    4a3e:	bne.n	4a88 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6c8>
    4a40:	ldr	r0, [r0, #16]
    4a42:	cmp	r0, #0
    4a44:	beq.n	4aac <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6ec>
    4a46:	ldr	r1, [r0, #0]
    4a48:	ldr	r4, [r1, #40]	; 0x28
    4a4a:	cmp	r4, r2
    4a4c:	bne.n	4a88 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6c8>
    4a4e:	ldr	r0, [r0, #16]
    4a50:	cbz	r0, 4aac <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6ec>
    4a52:	ldr	r1, [r0, #0]
    4a54:	ldr	r4, [r1, #40]	; 0x28
    4a56:	cmp	r4, r2
    4a58:	bne.n	4a88 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6c8>
    4a5a:	ldr	r0, [r0, #16]
    4a5c:	cbz	r0, 4aac <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6ec>
    4a5e:	ldr	r1, [r0, #0]
    4a60:	ldr	r4, [r1, #40]	; 0x28
    4a62:	cmp	r4, r2
    4a64:	bne.n	4a88 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6c8>
    4a66:	ldr	r0, [r0, #16]
    4a68:	cbz	r0, 4aac <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6ec>
    4a6a:	ldr	r1, [r0, #0]
    4a6c:	ldr	r4, [r1, #40]	; 0x28
    4a6e:	cmp	r4, r2
    4a70:	bne.n	4a88 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6c8>
    4a72:	ldr	r0, [r0, #16]
    4a74:	cbz	r0, 4aac <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6ec>
    4a76:	ldr	r3, [r0, #0]
    4a78:	mov.w	r2, #2048	; 0x800
    4a7c:	ldr	r3, [r3, #40]	; 0x28
    4a7e:	add	r1, sp, #40	; 0x28
    4a80:	blx	r3
    4a82:	mov	r2, r0
    4a84:	b.n	4a92 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6d2>
    4a86:	mov	r0, r3
    4a88:	mov.w	r2, #2048	; 0x800
    4a8c:	add	r1, sp, #40	; 0x28
    4a8e:	blx	r4
    4a90:	mov	r2, r0
  {
    nd=f1.read(buffer,nbuf);
    if(nd<0) break;     // read error
    4a92:	subs	r4, r2, #0
    4a94:	blt.n	4aa2 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6e2>
	}
	virtual size_t write(const void *buf, size_t size) {
		return (f) ? f->write(buf, size) : 0;
    4a96:	ldr	r0, [sp, #36]	; 0x24
    4a98:	cbnz	r0, 4ab8 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6f8>
    f2.write(buffer,nd);
    if(nd<nbuf) break;  // end of file
    4a9a:	cmp.w	r4, #2048	; 0x800
    4a9e:	bge.w	4554 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x194>
    4aa2:	ldr	r3, [sp, #16]
	}
	virtual uint64_t size() {
		return (f) ? f->size() : 0;
	}
	virtual void close() {
		if (f) f->close();
    4aa4:	cmp	r3, #0
    4aa6:	bne.w	4bf2 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x832>
    4aaa:	b.n	4b56 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x796>
#endif
	virtual size_t read(void *buf, size_t nbyte) {
		return (f) ? f->read(buf, nbyte) : 0;
	}
	virtual size_t write(const void *buf, size_t size) {
		return (f) ? f->write(buf, size) : 0;
    4aac:	ldr	r0, [sp, #36]	; 0x24
    4aae:	cmp	r0, #0
    4ab0:	beq.w	4bec <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x82c>
    4ab4:	movs	r2, #0
  File f2 = sd_open(store1,newfilename,FILE_WRITE_BEGIN);
  if(!f2) { f1.close(); {DBG_FAIL_MACRO; return false;}}

  while(f1.available()>0)
  {
    nd=f1.read(buffer,nbuf);
    4ab6:	mov	r4, r2
    4ab8:	ldr	r1, [r0, #0]
    4aba:	ldr	r3, [pc, #356]	; (4c20 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x860>)
    4abc:	ldr	r6, [r1, #44]	; 0x2c
    4abe:	cmp	r6, r3
    4ac0:	bne.n	4b42 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x782>
    4ac2:	ldr	r0, [r0, #16]
    4ac4:	cmp	r0, #0
    4ac6:	beq.n	4a9a <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6da>
    4ac8:	ldr	r1, [r0, #0]
    4aca:	ldr	r6, [r1, #44]	; 0x2c
    4acc:	cmp	r6, r3
    4ace:	bne.n	4b42 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x782>
    4ad0:	ldr	r0, [r0, #16]
    4ad2:	cmp	r0, #0
    4ad4:	beq.n	4a9a <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6da>
    4ad6:	ldr	r1, [r0, #0]
    4ad8:	ldr	r6, [r1, #44]	; 0x2c
    4ada:	cmp	r6, r3
    4adc:	bne.n	4b42 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x782>
    4ade:	ldr	r0, [r0, #16]
    4ae0:	cmp	r0, #0
    4ae2:	beq.n	4a9a <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6da>
    4ae4:	ldr	r1, [r0, #0]
    4ae6:	ldr	r6, [r1, #44]	; 0x2c
    4ae8:	cmp	r6, r3
    4aea:	bne.n	4b42 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x782>
    4aec:	ldr	r0, [r0, #16]
    4aee:	cmp	r0, #0
    4af0:	beq.n	4a9a <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6da>
    4af2:	ldr	r1, [r0, #0]
    4af4:	ldr	r6, [r1, #44]	; 0x2c
    4af6:	cmp	r6, r3
    4af8:	bne.n	4b42 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x782>
    4afa:	ldr	r0, [r0, #16]
    4afc:	cmp	r0, #0
    4afe:	beq.n	4a9a <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6da>
    4b00:	ldr	r1, [r0, #0]
    4b02:	ldr	r6, [r1, #44]	; 0x2c
    4b04:	cmp	r6, r3
    4b06:	bne.n	4b42 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x782>
    4b08:	ldr	r0, [r0, #16]
    4b0a:	cmp	r0, #0
    4b0c:	beq.n	4a9a <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6da>
    4b0e:	ldr	r1, [r0, #0]
    4b10:	ldr	r6, [r1, #44]	; 0x2c
    4b12:	cmp	r6, r3
    4b14:	bne.n	4b42 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x782>
    4b16:	ldr	r0, [r0, #16]
    4b18:	cmp	r0, #0
    4b1a:	beq.n	4a9a <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6da>
    4b1c:	ldr	r1, [r0, #0]
    4b1e:	ldr	r6, [r1, #44]	; 0x2c
    4b20:	cmp	r6, r3
    4b22:	bne.n	4b42 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x782>
    4b24:	ldr	r0, [r0, #16]
    4b26:	cmp	r0, #0
    4b28:	beq.n	4a9a <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6da>
    4b2a:	ldr	r1, [r0, #0]
    4b2c:	ldr	r6, [r1, #44]	; 0x2c
    4b2e:	cmp	r6, r3
    4b30:	bne.n	4b42 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x782>
    4b32:	ldr	r0, [r0, #16]
    4b34:	cmp	r0, #0
    4b36:	beq.n	4a9a <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6da>
    4b38:	ldr	r3, [r0, #0]
    4b3a:	add	r1, sp, #40	; 0x28
    4b3c:	ldr	r3, [r3, #44]	; 0x2c
    4b3e:	blx	r3
    4b40:	b.n	4a9a <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6da>
    4b42:	add	r1, sp, #40	; 0x28
    4b44:	blx	r6
    4b46:	b.n	4a9a <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6da>
	}
	virtual int available() {
		return (f) ? f->available() : 0;
    4b48:	mov	r0, r3
    4b4a:	blx	r2
    4b4c:	b.n	49f4 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x634>
	}
	virtual uint64_t size() {
		return (f) ? f->size() : 0;
	}
	virtual void close() {
		if (f) f->close();
    4b4e:	ldr	r5, [r1, #64]	; 0x40
    4b50:	ldr	r2, [pc, #208]	; (4c24 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x864>)
    4b52:	cmp	r5, r2
    4b54:	bne.n	4c14 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x854>
    4b56:	ldr	r3, [sp, #36]	; 0x24
    4b58:	cmp	r3, #0
    4b5a:	beq.n	4be0 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x820>
    4b5c:	ldr	r2, [r3, #0]
    4b5e:	ldr	r1, [pc, #196]	; (4c24 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x864>)
    4b60:	ldr	r2, [r2, #64]	; 0x40
    4b62:	cmp	r2, r1
    4b64:	bne.n	4bda <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x81a>
    4b66:	ldr	r0, [r3, #16]
    4b68:	cmp	r0, #0
    4b6a:	beq.n	4be0 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x820>
    4b6c:	ldr	r2, [r0, #0]
    4b6e:	ldr	r2, [r2, #64]	; 0x40
    4b70:	cmp	r2, r1
    4b72:	bne.n	4bdc <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x81c>
    4b74:	ldr	r0, [r0, #16]
    4b76:	cmp	r0, #0
    4b78:	beq.n	4be0 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x820>
    4b7a:	ldr	r2, [r0, #0]
    4b7c:	ldr	r2, [r2, #64]	; 0x40
    4b7e:	cmp	r2, r1
    4b80:	bne.n	4bdc <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x81c>
    4b82:	ldr	r0, [r0, #16]
    4b84:	cmp	r0, #0
    4b86:	beq.n	4be0 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x820>
    4b88:	ldr	r2, [r0, #0]
    4b8a:	ldr	r2, [r2, #64]	; 0x40
    4b8c:	cmp	r2, r1
    4b8e:	bne.n	4bdc <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x81c>
    4b90:	ldr	r0, [r0, #16]
    4b92:	cbz	r0, 4be0 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x820>
    4b94:	ldr	r2, [r0, #0]
    4b96:	ldr	r2, [r2, #64]	; 0x40
    4b98:	cmp	r2, r1
    4b9a:	bne.n	4bdc <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x81c>
    4b9c:	ldr	r0, [r0, #16]
    4b9e:	cbz	r0, 4be0 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x820>
    4ba0:	ldr	r2, [r0, #0]
    4ba2:	ldr	r2, [r2, #64]	; 0x40
    4ba4:	cmp	r2, r1
    4ba6:	bne.n	4bdc <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x81c>
    4ba8:	ldr	r0, [r0, #16]
    4baa:	cbz	r0, 4be0 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x820>
    4bac:	ldr	r2, [r0, #0]
    4bae:	ldr	r2, [r2, #64]	; 0x40
    4bb0:	cmp	r2, r1
    4bb2:	bne.n	4bdc <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x81c>
    4bb4:	ldr	r0, [r0, #16]
    4bb6:	cbz	r0, 4be0 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x820>
    4bb8:	ldr	r2, [r0, #0]
    4bba:	ldr	r2, [r2, #64]	; 0x40
    4bbc:	cmp	r2, r1
    4bbe:	bne.n	4bdc <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x81c>
    4bc0:	ldr	r0, [r0, #16]
    4bc2:	cbz	r0, 4be0 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x820>
    4bc4:	ldr	r2, [r0, #0]
    4bc6:	ldr	r2, [r2, #64]	; 0x40
    4bc8:	cmp	r2, r1
    4bca:	bne.n	4bdc <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x81c>
    4bcc:	ldr	r0, [r0, #16]
    4bce:	cbz	r0, 4be0 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x820>
    4bd0:	ldr	r3, [r0, #0]
    4bd2:	ldr	r3, [r3, #64]	; 0x40
    4bd4:	blx	r3
    4bd6:	ldr	r3, [sp, #36]	; 0x24
    4bd8:	b.n	4be0 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x820>
    4bda:	mov	r0, r3
    4bdc:	blx	r2
    4bde:	ldr	r3, [sp, #36]	; 0x24
    if(nd<nbuf) break;  // end of file
  }
  // close all files
  f1.close();
  f2.close();
  if(nd<0) {DBG_FAIL_MACRO; return false;}
    4be0:	mvns	r4, r4
    4be2:	lsrs	r4, r4, #31
    4be4:	b.n	481a <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x45a>
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    4be6:	mov	r0, r5
    4be8:	blx	r3
    4bea:	b.n	464c <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x28c>
  File f2 = sd_open(store1,newfilename,FILE_WRITE_BEGIN);
  if(!f2) { f1.close(); {DBG_FAIL_MACRO; return false;}}

  while(f1.available()>0)
  {
    nd=f1.read(buffer,nbuf);
    4bec:	mov	r4, r0
	}
	virtual uint64_t size() {
		return (f) ? f->size() : 0;
	}
	virtual void close() {
		if (f) f->close();
    4bee:	cmp	r3, #0
    4bf0:	beq.n	4c58 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x898>
    4bf2:	ldr	r2, [r3, #0]
    4bf4:	ldr	r1, [pc, #44]	; (4c24 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x864>)
    4bf6:	ldr	r5, [r2, #64]	; 0x40
    4bf8:	cmp	r5, r1
    4bfa:	bne.n	4c14 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x854>
    4bfc:	ldr	r0, [r3, #16]
    4bfe:	cmp	r0, #0
    4c00:	beq.n	4b56 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x796>
    4c02:	b.n	494a <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x58a>
    4c04:	blx	r3
    4c06:	b.n	4b56 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x796>
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    4c08:	mov	r0, r7
    4c0a:	blx	r3
    4c0c:	b.n	4644 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x284>
    4c0e:	mov	r0, r5
    4c10:	blx	r3
    4c12:	b.n	4926 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x566>
	}
	virtual uint64_t size() {
		return (f) ? f->size() : 0;
	}
	virtual void close() {
		if (f) f->close();
    4c14:	mov	r0, r3
    4c16:	blx	r5
    4c18:	b.n	4b56 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x796>
    4c1a:	nop
    4c1c:	.word	0x00000475
    4c20:	.word	0x00000481
    4c24:	.word	0x000004f5
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    4c28:	mov	r0, r7
    4c2a:	blx	r3
    4c2c:	b.n	491e <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x55e>
    4c2e:	mov	r0, r8
    4c30:	blx	r3
    4c32:	b.n	475e <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x39e>
    4c34:	mov	r0, r9
    4c36:	blx	r3
    4c38:	b.n	4756 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x396>
    4c3a:	mov	r0, r8
    4c3c:	blx	r3
    4c3e:	b.n	4916 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x556>
    4c40:	mov	r0, r9
    4c42:	blx	r3
    4c44:	b.n	490e <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x54e>
    4c46:	mov	r0, sl
    4c48:	blx	r3
    4c4a:	b.n	474e <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x38e>
    4c4c:	mov	r0, fp
    4c4e:	blx	r3
    4c50:	b.n	4746 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x386>
    4c52:	ldr	r3, [sp, #16]
    4c54:	ldr	r6, [pc, #12]	; (4c64 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x8a4>)
    4c56:	b.n	4928 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x568>
    4c58:	mov	r4, r3
    4c5a:	b.n	4be0 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x820>
    4c5c:	mov	r0, sl
    4c5e:	blx	r3
    4c60:	b.n	4906 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x546>
    4c62:	nop
    4c64:	.word	0x000141ac

00004c68 <MTPStorage_SD::copy(unsigned long, unsigned long, unsigned long)>:
    WriteIndexRecord(newParent,p2o);      
    return false;
  }

  uint32_t MTPStorage_SD::copy(uint32_t handle, uint32_t newStore, uint32_t newParent ) 
  { 
    4c68:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4c6c:	mov	r8, r1
    4c6e:	sub.w	sp, sp, #1336	; 0x538
    if(newParent==0xFFFFFFFFUL) newParent=newStore;
    4c72:	cmp.w	r3, #4294967295
    4c76:	ite	ne
    4c78:	movne	r7, r3
    4c7a:	moveq	r7, r2

    Record p1 = ReadIndexRecord(handle);
    4c7c:	mov	r1, r0
    WriteIndexRecord(newParent,p2o);      
    return false;
  }

  uint32_t MTPStorage_SD::copy(uint32_t handle, uint32_t newStore, uint32_t newParent ) 
  { 
    4c7e:	mov	r4, r0
    if(newParent==0xFFFFFFFFUL) newParent=newStore;

    Record p1 = ReadIndexRecord(handle);
    4c80:	mov	r2, r8
    4c82:	add	r0, sp, #520	; 0x208
    4c84:	bl	2690 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    Record p2 = ReadIndexRecord(newParent);
    4c88:	mov	r2, r7
    4c8a:	mov	r1, r4
    4c8c:	add	r0, sp, #792	; 0x318
    4c8e:	bl	2690 <MTPStorage_SD::ReadIndexRecord(unsigned long)>

    uint32_t newHandle;
    if(p1.isdir)
    4c92:	ldrb.w	r6, [sp, #532]	; 0x214
    4c96:	cmp	r6, #0
    4c98:	bne.n	4d20 <MTPStorage_SD::copy(unsigned long, unsigned long, unsigned long)+0xb8>
      CopyFiles(handle, p2.store, newHandle);
    }
    else
    {  
      Record r;
      strlcpy(r.name, p1.name,MAX_FILENAME_LEN);
    4c9a:	add	r1, sp, #536	; 0x218
    4c9c:	mov.w	r2, #256	; 0x100
    4ca0:	add.w	r0, sp, #1080	; 0x438
    4ca4:	bl	10cd0 <strlcpy>
    index_.write((char*)&r, sizeof(r));
    mtp_lock_storage(false);
  }

  uint32_t MTPStorage_SD::AppendIndexRecord(const Record& r) 
  { uint32_t new_record = index_entries_++;
    4ca8:	ldr.w	r5, [r4, #244]	; 0xf4
    }
    else
    {  
      Record r;
      strlcpy(r.name, p1.name,MAX_FILENAME_LEN);
      r.store = p2.store;
    4cac:	ldrh.w	r0, [sp, #806]	; 0x326
      r.parent = newParent;
      r.child = 0;
      r.sibling = p2.child;
    4cb0:	ldr	r3, [sp, #796]	; 0x31c
    }
    else
    {  
      Record r;
      strlcpy(r.name, p1.name,MAX_FILENAME_LEN);
      r.store = p2.store;
    4cb2:	strh.w	r0, [sp, #1078]	; 0x436
    index_.write((char*)&r, sizeof(r));
    mtp_lock_storage(false);
  }

  uint32_t MTPStorage_SD::AppendIndexRecord(const Record& r) 
  { uint32_t new_record = index_entries_++;
    4cb6:	adds	r2, r5, #1
    4cb8:	str.w	r2, [r4, #244]	; 0xf4
    WriteIndexRecord(new_record, r);
    4cbc:	mov	r1, r5
    4cbe:	add.w	r2, sp, #1064	; 0x428
    4cc2:	mov	r0, r4
      Record r;
      strlcpy(r.name, p1.name,MAX_FILENAME_LEN);
      r.store = p2.store;
      r.parent = newParent;
      r.child = 0;
      r.sibling = p2.child;
    4cc4:	str.w	r3, [sp, #1072]	; 0x430
    else
    {  
      Record r;
      strlcpy(r.name, p1.name,MAX_FILENAME_LEN);
      r.store = p2.store;
      r.parent = newParent;
    4cc8:	str.w	r7, [sp, #1064]	; 0x428
      r.child = 0;
    4ccc:	str.w	r6, [sp, #1068]	; 0x42c
      r.sibling = p2.child;
      r.isdir = 0;
    4cd0:	strb.w	r6, [sp, #1076]	; 0x434
      r.scanned = 0;
    4cd4:	strb.w	r6, [sp, #1077]	; 0x435
    mtp_lock_storage(false);
  }

  uint32_t MTPStorage_SD::AppendIndexRecord(const Record& r) 
  { uint32_t new_record = index_entries_++;
    WriteIndexRecord(new_record, r);
    4cd8:	bl	24b0 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
      r.child = 0;
      r.sibling = p2.child;
      r.isdir = 0;
      r.scanned = 0;
      newHandle = p2.child = AppendIndexRecord(r);
      WriteIndexRecord(newParent, p2);
    4cdc:	add	r2, sp, #792	; 0x318
    4cde:	mov	r1, r7
    4ce0:	mov	r0, r4
      r.parent = newParent;
      r.child = 0;
      r.sibling = p2.child;
      r.isdir = 0;
      r.scanned = 0;
      newHandle = p2.child = AppendIndexRecord(r);
    4ce2:	str	r5, [sp, #796]	; 0x31c
      WriteIndexRecord(newParent, p2);
    4ce4:	bl	24b0 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>

      char oldfilename[MAX_FILENAME_LEN];
      char newfilename[MAX_FILENAME_LEN];
      uint32_t store0 = ConstructFilename(handle,oldfilename,MAX_FILENAME_LEN);
    4ce8:	mov	r1, r8
    4cea:	add	r2, sp, #8
    4cec:	mov.w	r3, #256	; 0x100
    4cf0:	mov	r0, r4
    4cf2:	bl	2af0 <MTPStorage_SD::ConstructFilename(int, char*, int)>
      uint32_t store1 = ConstructFilename(newHandle,newfilename,MAX_FILENAME_LEN);
    4cf6:	add	r6, sp, #264	; 0x108
      newHandle = p2.child = AppendIndexRecord(r);
      WriteIndexRecord(newParent, p2);

      char oldfilename[MAX_FILENAME_LEN];
      char newfilename[MAX_FILENAME_LEN];
      uint32_t store0 = ConstructFilename(handle,oldfilename,MAX_FILENAME_LEN);
    4cf8:	mov	r7, r0
      uint32_t store1 = ConstructFilename(newHandle,newfilename,MAX_FILENAME_LEN);
    4cfa:	mov	r1, r5
    4cfc:	mov	r2, r6
    4cfe:	mov.w	r3, #256	; 0x100
    4d02:	mov	r0, r4
    4d04:	bl	2af0 <MTPStorage_SD::ConstructFilename(int, char*, int)>

      sd_copy(store0,oldfilename,store1,newfilename);
    4d08:	str	r6, [sp, #0]
    4d0a:	mov	r3, r0
    4d0c:	add	r2, sp, #8
    4d0e:	mov	r1, r7
    4d10:	adds	r0, r4, #4
    4d12:	bl	43c0 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)>
    }

    return newHandle;
  }
    4d16:	mov	r0, r5
    4d18:	add.w	sp, sp, #1336	; 0x538
    4d1c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    Record p2 = ReadIndexRecord(newParent);

    uint32_t newHandle;
    if(p1.isdir)
    {
      ScanDir(p1.store+1,handle);
    4d20:	ldrh.w	r1, [sp, #534]	; 0x216
    4d24:	mov	r2, r8
    4d26:	mov	r0, r4
    4d28:	adds	r1, #1
    4d2a:	bl	327c <MTPStorage_SD::ScanDir(unsigned long, unsigned long)>
      newHandle = Create(p2.store,newParent,p1.isdir,p1.name);
    4d2e:	ldrb.w	r3, [sp, #532]	; 0x214
    4d32:	ldr	r0, [r4, #0]
    4d34:	ldrh.w	r1, [sp, #806]	; 0x326
    4d38:	add	r2, sp, #536	; 0x218
    4d3a:	adds	r3, #0
    4d3c:	str	r2, [sp, #0]
    4d3e:	it	ne
    4d40:	movne	r3, #1
    4d42:	mov	r2, r7
    4d44:	ldr	r5, [r0, #44]	; 0x2c
    4d46:	mov	r0, r4
    4d48:	blx	r5
      CopyFiles(handle, p2.store, newHandle);
    4d4a:	ldr	r3, [r4, #0]
    4d4c:	ldrh.w	r2, [sp, #806]	; 0x326
    4d50:	ldr	r6, [r3, #84]	; 0x54

    uint32_t newHandle;
    if(p1.isdir)
    {
      ScanDir(p1.store+1,handle);
      newHandle = Create(p2.store,newParent,p1.isdir,p1.name);
    4d52:	mov	r5, r0
      CopyFiles(handle, p2.store, newHandle);
    4d54:	mov	r3, r0
    4d56:	mov	r1, r8
    4d58:	mov	r0, r4
    4d5a:	blx	r6

      sd_copy(store0,oldfilename,store1,newfilename);
    }

    return newHandle;
  }
    4d5c:	mov	r0, r5
    4d5e:	add.w	sp, sp, #1336	; 0x538
    4d62:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4d66:	nop

00004d68 <MTPStorage_SD::CopyFiles(unsigned long, unsigned long, unsigned long)>:

bool MTPStorage_SD::CopyFiles(uint32_t handle, uint32_t store, uint32_t newHandle)
{ // assume handle and newHandle point to existing directories
    4d68:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4d6c:	mov	r4, r0
    4d6e:	subw	sp, sp, #1612	; 0x64c
  if(newHandle==0xFFFFFFFFUL) newHandle=store;
    4d72:	cmp.w	r3, #4294967295
    4d76:	ite	ne
    4d78:	movne	r8, r3
    4d7a:	moveq	r8, r2
  #if DEBUG>1
    Serial.printf("%d -> %d\n",handle,newHandle);
  #endif

  Record p1=ReadIndexRecord(handle);
    4d7c:	add	r0, sp, #520	; 0x208
    4d7e:	mov	r2, r1
    4d80:	mov	r1, r4
    4d82:	bl	2690 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
  Record p2=ReadIndexRecord(newHandle);
    4d86:	mov	r2, r8
    4d88:	mov	r1, r4
    4d8a:	add	r0, sp, #792	; 0x318
  if(newHandle==0xFFFFFFFFUL) newHandle=store;
  #if DEBUG>1
    Serial.printf("%d -> %d\n",handle,newHandle);
  #endif

  Record p1=ReadIndexRecord(handle);
    4d8c:	ldrh.w	r9, [sp, #534]	; 0x216
  Record p2=ReadIndexRecord(newHandle);
    4d90:	bl	2690 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
  uint32_t ix= p1.child;
    4d94:	ldr	r6, [sp, #524]	; 0x20c
  uint32_t iy= 0;
  while(ix)
    4d96:	cmp	r6, #0
    4d98:	beq.n	4e6e <MTPStorage_SD::CopyFiles(unsigned long, unsigned long, unsigned long)+0x106>
    4d9a:	movs	r5, #0
    4d9c:	add	r7, sp, #264	; 0x108

      ScanDir(p1.store,ix); 
      CopyFiles(ix,p2.store,iy); 
    }
    else
    { sd_copy(p1.store,oldfilename,py.store,newfilename);
    4d9e:	add.w	sl, r4, #4
    4da2:	b.n	4dd8 <MTPStorage_SD::CopyFiles(unsigned long, unsigned long, unsigned long)+0x70>
    bool sd_mkdir(uint32_t store, char *filename) {  return sdx[store]->mkdir(filename);  }
    4da4:	ldrh.w	r3, [sp, #1350]	; 0x546
    4da8:	add.w	r3, r4, r3, lsl #2
    4dac:	ldr	r0, [r3, #88]	; 0x58
    4dae:	ldr	r3, [r0, #0]
    4db0:	ldr	r3, [r3, #8]
    4db2:	blx	r3

    if(py.isdir) 
    { 
      sd_mkdir(py.store,newfilename);

      ScanDir(p1.store,ix); 
    4db4:	mov	r2, r6
    4db6:	mov	r1, r9
    4db8:	mov	r0, r4
    4dba:	bl	327c <MTPStorage_SD::ScanDir(unsigned long, unsigned long)>
      CopyFiles(ix,p2.store,iy); 
    4dbe:	ldr	r3, [r4, #0]
    4dc0:	ldrh.w	r2, [sp, #806]	; 0x326
    4dc4:	ldr.w	fp, [r3, #84]	; 0x54
    4dc8:	mov	r1, r6
    4dca:	mov	r3, r5
    4dcc:	mov	r0, r4
    4dce:	blx	fp
    }
    else
    { sd_copy(p1.store,oldfilename,py.store,newfilename);
    }
    ix = px.sibling;
    4dd0:	ldr.w	r6, [sp, #1072]	; 0x430

  Record p1=ReadIndexRecord(handle);
  Record p2=ReadIndexRecord(newHandle);
  uint32_t ix= p1.child;
  uint32_t iy= 0;
  while(ix)
    4dd4:	cmp	r6, #0
    4dd6:	beq.n	4e58 <MTPStorage_SD::CopyFiles(unsigned long, unsigned long, unsigned long)+0xf0>
  { // get child
    Record px = ReadIndexRecord(ix) ;
    4dd8:	mov	r2, r6
    4dda:	mov	r1, r4
    4ddc:	add.w	r0, sp, #1064	; 0x428
    4de0:	bl	2690 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    Record py = px;
    4de4:	mov.w	r2, #272	; 0x110
    4de8:	add.w	r1, sp, #1064	; 0x428
    4dec:	add.w	r0, sp, #1336	; 0x538
    4df0:	bl	cb00 <memcpy>
    py.store = p2.store;
    py.parent = newHandle;
    py.sibling = iy;
    4df4:	str.w	r5, [sp, #1344]	; 0x540
    index_.write((char*)&r, sizeof(r));
    mtp_lock_storage(false);
  }

  uint32_t MTPStorage_SD::AppendIndexRecord(const Record& r) 
  { uint32_t new_record = index_entries_++;
    4df8:	ldr.w	r5, [r4, #244]	; 0xf4
  uint32_t iy= 0;
  while(ix)
  { // get child
    Record px = ReadIndexRecord(ix) ;
    Record py = px;
    py.store = p2.store;
    4dfc:	ldrh.w	r3, [sp, #806]	; 0x326
    4e00:	strh.w	r3, [sp, #1350]	; 0x546
    index_.write((char*)&r, sizeof(r));
    mtp_lock_storage(false);
  }

  uint32_t MTPStorage_SD::AppendIndexRecord(const Record& r) 
  { uint32_t new_record = index_entries_++;
    4e04:	adds	r2, r5, #1
    4e06:	str.w	r2, [r4, #244]	; 0xf4
    WriteIndexRecord(new_record, r);
    4e0a:	mov	r1, r5
    4e0c:	add.w	r2, sp, #1336	; 0x538
    4e10:	mov	r0, r4
  while(ix)
  { // get child
    Record px = ReadIndexRecord(ix) ;
    Record py = px;
    py.store = p2.store;
    py.parent = newHandle;
    4e12:	str.w	r8, [sp, #1336]	; 0x538
    mtp_lock_storage(false);
  }

  uint32_t MTPStorage_SD::AppendIndexRecord(const Record& r) 
  { uint32_t new_record = index_entries_++;
    WriteIndexRecord(new_record, r);
    4e16:	bl	24b0 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    py.sibling = iy;
    iy = AppendIndexRecord(py);

    char oldfilename[MAX_FILENAME_LEN];
    char newfilename[MAX_FILENAME_LEN];
    ConstructFilename(ix,oldfilename,MAX_FILENAME_LEN);
    4e1a:	mov.w	r3, #256	; 0x100
    4e1e:	add	r2, sp, #8
    4e20:	mov	r1, r6
    4e22:	mov	r0, r4
    4e24:	bl	2af0 <MTPStorage_SD::ConstructFilename(int, char*, int)>
    ConstructFilename(iy,newfilename,MAX_FILENAME_LEN);
    4e28:	mov	r1, r5
    4e2a:	mov.w	r3, #256	; 0x100
    4e2e:	mov	r2, r7
    4e30:	mov	r0, r4
    4e32:	bl	2af0 <MTPStorage_SD::ConstructFilename(int, char*, int)>

    if(py.isdir) 
    4e36:	ldrb.w	r3, [sp, #1348]	; 0x544
    4e3a:	mov	r1, r7

      ScanDir(p1.store,ix); 
      CopyFiles(ix,p2.store,iy); 
    }
    else
    { sd_copy(p1.store,oldfilename,py.store,newfilename);
    4e3c:	add	r2, sp, #8
    4e3e:	mov	r0, sl
    char oldfilename[MAX_FILENAME_LEN];
    char newfilename[MAX_FILENAME_LEN];
    ConstructFilename(ix,oldfilename,MAX_FILENAME_LEN);
    ConstructFilename(iy,newfilename,MAX_FILENAME_LEN);

    if(py.isdir) 
    4e40:	cmp	r3, #0
    4e42:	bne.n	4da4 <MTPStorage_SD::CopyFiles(unsigned long, unsigned long, unsigned long)+0x3c>

      ScanDir(p1.store,ix); 
      CopyFiles(ix,p2.store,iy); 
    }
    else
    { sd_copy(p1.store,oldfilename,py.store,newfilename);
    4e44:	ldrh.w	r3, [sp, #1350]	; 0x546
    4e48:	str	r7, [sp, #0]
    4e4a:	mov	r1, r9
    4e4c:	bl	43c0 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)>
    }
    ix = px.sibling;
    4e50:	ldr.w	r6, [sp, #1072]	; 0x430

  Record p1=ReadIndexRecord(handle);
  Record p2=ReadIndexRecord(newHandle);
  uint32_t ix= p1.child;
  uint32_t iy= 0;
  while(ix)
    4e54:	cmp	r6, #0
    4e56:	bne.n	4dd8 <MTPStorage_SD::CopyFiles(unsigned long, unsigned long, unsigned long)+0x70>
    { sd_copy(p1.store,oldfilename,py.store,newfilename);
    }
    ix = px.sibling;
  }
  p2.child=iy;
  WriteIndexRecord(newHandle,p2);
    4e58:	mov	r0, r4
    4e5a:	mov	r1, r8
    4e5c:	add	r2, sp, #792	; 0x318
    else
    { sd_copy(p1.store,oldfilename,py.store,newfilename);
    }
    ix = px.sibling;
  }
  p2.child=iy;
    4e5e:	str	r5, [sp, #796]	; 0x31c
  WriteIndexRecord(newHandle,p2);
    4e60:	bl	24b0 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
  return true;
}
    4e64:	movs	r0, #1
    4e66:	addw	sp, sp, #1612	; 0x64c
    4e6a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  #endif

  Record p1=ReadIndexRecord(handle);
  Record p2=ReadIndexRecord(newHandle);
  uint32_t ix= p1.child;
  uint32_t iy= 0;
    4e6e:	mov	r5, r6
    4e70:	b.n	4e58 <MTPStorage_SD::CopyFiles(unsigned long, unsigned long, unsigned long)+0xf0>
    4e72:	nop

00004e74 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*)>:
  if(nd<0) {DBG_FAIL_MACRO; return false;}
  return true;
}

bool mSD_Base::sd_moveDir(uint32_t store0, char *oldfilename, uint32_t store1, char *newfilename)
{ // old and new are directory paths
    4e74:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4e78:	mov	r5, r3
    4e7a:	add.w	r3, r0, r3, lsl #2
    4e7e:	mov	r4, r0
    4e80:	ldr	r0, [r3, #84]	; 0x54
    4e82:	ldr	r6, [sp, #24]
    4e84:	ldr	r3, [r0, #0]
    4e86:	mov	r7, r1
    4e88:	ldr	r3, [r3, #8]
    4e8a:	mov	r1, r6
    4e8c:	mov	r8, r2
    4e8e:	blx	r3

  char tmp0Name[MAX_FILENAME_LEN];
  char tmp1Name[MAX_FILENAME_LEN];

  if(!sd_mkdir(store1,newfilename))  {DBG_FAIL_MACRO; return false;}
    4e90:	cbnz	r0, 4e96 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*)+0x22>
        }
      }
    }
  }
  return sd_rmdir(store0,oldfilename);
}
    4e92:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4e96:	str	r6, [sp, #24]
    4e98:	mov	r3, r5
    4e9a:	mov	r2, r8
    4e9c:	mov	r1, r7
    4e9e:	mov	r0, r4
    4ea0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    4ea4:	b.w	4ea8 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]>

00004ea8 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]>:
  f2.close();
  if(nd<0) {DBG_FAIL_MACRO; return false;}
  return true;
}

bool mSD_Base::sd_moveDir(uint32_t store0, char *oldfilename, uint32_t store1, char *newfilename)
    4ea8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4eac:	add.w	sl, r0, r1, lsl #2
    4eb0:	mov	r8, r1
    }

    uint32_t sd_getFSCount(void) {return fsCount;}
    const char *sd_getFSName(uint32_t store) { return sd_name[store];}

    File sd_open(uint32_t store, const char *filename, uint32_t mode) { return sdx[store]->open(filename,mode);  }
    4eb2:	ldr.w	r1, [sl, #84]	; 0x54
    4eb6:	sub.w	sp, sp, #596	; 0x254
    4eba:	mov	r9, r0
    4ebc:	ldr	r0, [r1, #0]
    4ebe:	str	r3, [sp, #8]
    4ec0:	ldr	r4, [r0, #0]
    4ec2:	str	r2, [sp, #12]
    4ec4:	movs	r3, #0
    4ec6:	add	r0, sp, #40	; 0x28
    4ec8:	blx	r4
	}
	virtual void close() {
		if (f) f->close();
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
    4eca:	ldr	r3, [sp, #56]	; 0x38
    4ecc:	cmp	r3, #0
    4ece:	beq.w	5826 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x97e>
    4ed2:	ldr	r2, [r3, #0]
    4ed4:	ldr	r6, [pc, #460]	; (50a4 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x1fc>)
    4ed6:	ldr	r2, [r2, #68]	; 0x44
    4ed8:	cmp	r2, r6
    4eda:	bne.w	51b2 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x30a>
    4ede:	ldr	r0, [r3, #16]
    4ee0:	cmp	r0, #0
    4ee2:	beq.w	5060 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x1b8>
    4ee6:	ldr	r2, [r0, #0]
    4ee8:	ldr	r2, [r2, #68]	; 0x44
    4eea:	cmp	r2, r6
    4eec:	bne.w	51b4 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x30c>
    4ef0:	ldr	r0, [r0, #16]
    4ef2:	cmp	r0, #0
    4ef4:	beq.w	5060 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x1b8>
    4ef8:	ldr	r2, [r0, #0]
    4efa:	ldr	r2, [r2, #68]	; 0x44
    4efc:	cmp	r2, r6
    4efe:	bne.w	51b4 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x30c>
    4f02:	ldr	r0, [r0, #16]
    4f04:	cmp	r0, #0
    4f06:	beq.w	5060 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x1b8>
    4f0a:	ldr	r2, [r0, #0]
    4f0c:	ldr	r2, [r2, #68]	; 0x44
    4f0e:	cmp	r2, r6
    4f10:	bne.w	51b4 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x30c>
    4f14:	ldr	r0, [r0, #16]
    4f16:	cmp	r0, #0
    4f18:	beq.w	5060 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x1b8>
    4f1c:	ldr	r2, [r0, #0]
    4f1e:	ldr	r2, [r2, #68]	; 0x44
    4f20:	cmp	r2, r6
    4f22:	bne.w	51b4 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x30c>
    4f26:	ldr	r0, [r0, #16]
    4f28:	cmp	r0, #0
    4f2a:	beq.w	5060 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x1b8>
    4f2e:	ldr	r2, [r0, #0]
    4f30:	ldr	r2, [r2, #68]	; 0x44
    4f32:	cmp	r2, r6
    4f34:	bne.w	51b4 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x30c>
    4f38:	ldr	r0, [r0, #16]
    4f3a:	cmp	r0, #0
    4f3c:	beq.w	5060 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x1b8>
    4f40:	ldr	r2, [r0, #0]
    4f42:	ldr	r2, [r2, #68]	; 0x44
    4f44:	cmp	r2, r6
    4f46:	bne.w	51b4 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x30c>
    4f4a:	ldr	r0, [r0, #16]
    4f4c:	cmp	r0, #0
    4f4e:	beq.w	5060 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x1b8>
    4f52:	ldr	r3, [r0, #0]
    4f54:	ldr	r3, [r3, #68]	; 0x44
    4f56:	blx	r3
    4f58:	mov	r4, r0
  char tmp1Name[MAX_FILENAME_LEN];

  if(!sd_mkdir(store1,newfilename))  {DBG_FAIL_MACRO; return false;}

  File f1=sd_open(store0,oldfilename,FILE_READ);
  if(!f1) {DBG_FAIL_MACRO; return false;}
    4f5a:	cmp	r4, #0
    4f5c:	beq.w	58dc <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0xa34>
    4f60:	ldr.w	fp, [pc, #336]	; 50b4 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x20c>
    4f64:	add	r4, sp, #336	; 0x150
  { while(1)
    {
      strlcpy(tmp0Name,oldfilename,MAX_FILENAME_LEN);
    4f66:	mov.w	r2, #256	; 0x100
    4f6a:	ldr	r1, [sp, #12]
    4f6c:	add	r0, sp, #80	; 0x50
    4f6e:	bl	10cd0 <strlcpy>
      if(tmp0Name[strlen(tmp0Name)-1]!='/') strlcat(tmp0Name,"/",MAX_FILENAME_LEN);
    4f72:	add	r0, sp, #80	; 0x50
    4f74:	bl	10d00 <strlen>
    4f78:	add	r3, sp, #80	; 0x50
    4f7a:	add	r0, r3
    4f7c:	ldrb.w	r3, [r0, #-1]
    4f80:	cmp	r3, #47	; 0x2f
    4f82:	beq.n	4f90 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0xe8>
    4f84:	mov.w	r2, #256	; 0x100
    4f88:	ldr	r1, [pc, #284]	; (50a8 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x200>)
    4f8a:	add	r0, sp, #80	; 0x50
    4f8c:	bl	10c7c <strlcat>

      strlcpy(tmp1Name,newfilename,MAX_FILENAME_LEN);
    4f90:	mov.w	r2, #256	; 0x100
    4f94:	ldr	r1, [sp, #632]	; 0x278
    4f96:	mov	r0, r4
    4f98:	bl	10cd0 <strlcpy>
      if(tmp1Name[strlen(tmp1Name)-1]!='/') strlcat(tmp1Name,"/",MAX_FILENAME_LEN);
    4f9c:	mov	r0, r4
    4f9e:	bl	10d00 <strlen>
    4fa2:	add	r0, r4
    4fa4:	ldrb.w	r3, [r0, #-1]
    4fa8:	cmp	r3, #47	; 0x2f
    4faa:	beq.n	4fb8 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x110>
    4fac:	mov.w	r2, #256	; 0x100
    4fb0:	ldr	r1, [pc, #244]	; (50a8 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x200>)
    4fb2:	mov	r0, r4
    4fb4:	bl	10c7c <strlcat>
	}
	virtual bool isDirectory() {
		return (f) ? f->isDirectory() : false;
	}
	virtual File openNextFile(uint8_t mode=0) {
		return (f) ? f->openNextFile(mode) : *this;
    4fb8:	ldr	r1, [sp, #56]	; 0x38
    4fba:	cmp	r1, #0
    4fbc:	beq.w	5276 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3ce>
    4fc0:	ldr	r3, [r1, #0]
    4fc2:	ldr	r2, [pc, #232]	; (50ac <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x204>)
    4fc4:	ldr	r3, [r3, #80]	; 0x50
    4fc6:	cmp	r3, r2
    4fc8:	bne.w	529c <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3f4>
    4fcc:	ldr	r1, [r1, #16]
    4fce:	cmp	r1, #0
    4fd0:	beq.w	5276 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3ce>
    4fd4:	ldr	r3, [r1, #0]
    4fd6:	ldr	r3, [r3, #80]	; 0x50
    4fd8:	cmp	r3, r2
    4fda:	bne.w	529c <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3f4>
    4fde:	ldr	r1, [r1, #16]
    4fe0:	cmp	r1, #0
    4fe2:	beq.w	5276 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3ce>
    4fe6:	ldr	r3, [r1, #0]
    4fe8:	ldr	r3, [r3, #80]	; 0x50
    4fea:	cmp	r3, r2
    4fec:	bne.w	529c <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3f4>
    4ff0:	ldr	r1, [r1, #16]
    4ff2:	cmp	r1, #0
    4ff4:	beq.w	5276 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3ce>
    4ff8:	ldr	r3, [r1, #0]
    4ffa:	ldr	r3, [r3, #80]	; 0x50
    4ffc:	cmp	r3, r2
    4ffe:	bne.w	529c <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3f4>
    5002:	ldr	r1, [r1, #16]
    5004:	cmp	r1, #0
    5006:	beq.w	5276 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3ce>
    500a:	ldr	r3, [r1, #0]
    500c:	ldr	r3, [r3, #80]	; 0x50
    500e:	cmp	r3, r2
    5010:	bne.w	529c <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3f4>
    5014:	ldr	r1, [r1, #16]
    5016:	cmp	r1, #0
    5018:	beq.w	5276 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3ce>
    501c:	ldr	r3, [r1, #0]
    501e:	ldr	r3, [r3, #80]	; 0x50
    5020:	cmp	r3, r2
    5022:	bne.w	529c <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3f4>
    5026:	ldr	r1, [r1, #16]
    5028:	cmp	r1, #0
    502a:	beq.w	5276 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3ce>
    502e:	ldr	r3, [r1, #0]
    5030:	ldr	r3, [r3, #80]	; 0x50
    5032:	cmp	r3, r2
    5034:	bne.w	529c <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3f4>
    5038:	ldr	r1, [r1, #16]
    503a:	cmp	r1, #0
    503c:	beq.w	5276 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3ce>
    5040:	ldr	r3, [r1, #0]
    5042:	ldr	r3, [r3, #80]	; 0x50
    5044:	cmp	r3, r2
    5046:	bne.w	529c <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3f4>
    504a:	ldr	r1, [r1, #16]
    504c:	cmp	r1, #0
    504e:	beq.w	5276 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3ce>
    5052:	ldr	r3, [r1, #0]
    5054:	add	r5, sp, #60	; 0x3c
    5056:	ldr	r3, [r3, #80]	; 0x50
    5058:	mov	r0, r5
    505a:	movs	r2, #0
    505c:	blx	r3
    505e:	b.n	52a4 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3fc>
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    5060:	ldr.w	fp, [pc, #80]	; 50b4 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x20c>
    5064:	str.w	fp, [sp, #40]	; 0x28
    5068:	movs	r4, #0
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    506a:	ldr	r2, [r3, #16]
    506c:	subs	r2, #1
    506e:	str	r2, [r3, #16]
    5070:	cbnz	r2, 509a <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x1f2>
    5072:	ldr	r5, [sp, #56]	; 0x38
    5074:	cbz	r5, 509a <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x1f2>
    5076:	ldr	r2, [r5, #0]
    5078:	ldr	r3, [pc, #52]	; (50b0 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x208>)
    507a:	ldr	r2, [r2, #32]
    507c:	cmp	r2, r3
    507e:	bne.w	5840 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x998>
    5082:	ldr	r1, [r5, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    5084:	str.w	fp, [r5]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    5088:	cbz	r1, 5092 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x1ea>
    508a:	ldr	r2, [r1, #16]
    508c:	subs	r2, #1
    508e:	str	r2, [r1, #16]
    5090:	cbz	r2, 50b8 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x210>
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
		invalidate();
	}
    5092:	mov	r0, r5
    5094:	movs	r1, #20
    5096:	bl	e950 <operator delete(void*, unsigned int)>
        }
      }
    }
  }
  return sd_rmdir(store0,oldfilename);
}
    509a:	mov	r0, r4
    509c:	add.w	sp, sp, #596	; 0x254
    50a0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    50a4:	.word	0x00000501
    50a8:	.word	0x0001448c
    50ac:	.word	0x0000052d
    50b0:	.word	0x00000f25
    50b4:	.word	0x000141ac
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    50b8:	ldr	r6, [r5, #16]
    50ba:	cmp	r6, #0
    50bc:	beq.n	5092 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x1ea>
    50be:	ldr	r2, [r6, #0]
    50c0:	ldr	r2, [r2, #32]
    50c2:	cmp	r2, r3
    50c4:	bne.w	5856 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x9ae>
    50c8:	ldr	r1, [r6, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    50ca:	str.w	fp, [r6]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    50ce:	cmp	r1, #0
    50d0:	beq.n	51a8 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x300>
    50d2:	ldr	r2, [r1, #16]
    50d4:	subs	r2, #1
    50d6:	str	r2, [r1, #16]
    50d8:	cmp	r2, #0
    50da:	bne.n	51a8 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x300>
    50dc:	ldr	r7, [r6, #16]
    50de:	cmp	r7, #0
    50e0:	beq.n	51a8 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x300>
    50e2:	ldr	r2, [r7, #0]
    50e4:	ldr	r2, [r2, #32]
    50e6:	cmp	r2, r3
    50e8:	bne.w	5872 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x9ca>
    50ec:	ldr	r1, [r7, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    50ee:	str.w	fp, [r7]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    50f2:	cmp	r1, #0
    50f4:	beq.n	51a0 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x2f8>
    50f6:	ldr	r2, [r1, #16]
    50f8:	subs	r2, #1
    50fa:	str	r2, [r1, #16]
    50fc:	cmp	r2, #0
    50fe:	bne.n	51a0 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x2f8>
    5100:	ldr.w	r8, [r7, #16]
    5104:	cmp.w	r8, #0
    5108:	beq.n	51a0 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x2f8>
    510a:	ldr.w	r2, [r8]
    510e:	ldr	r2, [r2, #32]
    5110:	cmp	r2, r3
    5112:	bne.w	5888 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x9e0>
    5116:	ldr.w	r1, [r8, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    511a:	str.w	fp, [r8]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    511e:	cmp	r1, #0
    5120:	beq.n	5198 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x2f0>
    5122:	ldr	r2, [r1, #16]
    5124:	subs	r2, #1
    5126:	str	r2, [r1, #16]
    5128:	cmp	r2, #0
    512a:	bne.n	5198 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x2f0>
    512c:	ldr.w	r9, [r8, #16]
    5130:	cmp.w	r9, #0
    5134:	beq.n	5198 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x2f0>
    5136:	ldr.w	r2, [r9]
    513a:	ldr	r2, [r2, #32]
    513c:	cmp	r2, r3
    513e:	bne.w	58b0 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0xa08>
    5142:	ldr.w	r1, [r9, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    5146:	str.w	fp, [r9]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    514a:	cbz	r1, 5190 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x2e8>
    514c:	ldr	r2, [r1, #16]
    514e:	subs	r2, #1
    5150:	str	r2, [r1, #16]
    5152:	cbnz	r2, 5190 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x2e8>
    5154:	ldr.w	sl, [r9, #16]
    5158:	cmp.w	sl, #0
    515c:	beq.n	5190 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x2e8>
    515e:	ldr.w	r2, [sl]
    5162:	ldr	r2, [r2, #32]
    5164:	cmp	r2, r3
    5166:	bne.w	58b6 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0xa0e>
    516a:	ldr.w	r2, [sl, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    516e:	str.w	fp, [sl]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    5172:	cbz	r2, 5188 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x2e0>
    5174:	ldr	r3, [r2, #16]
    5176:	subs	r3, #1
    5178:	str	r3, [r2, #16]
    517a:	cbnz	r3, 5188 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x2e0>
    517c:	ldr.w	r0, [sl, #16]
    5180:	cbz	r0, 5188 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x2e0>
    5182:	ldr	r3, [r0, #0]
    5184:	ldr	r3, [r3, #32]
    5186:	blx	r3
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
		invalidate();
	}
    5188:	mov	r0, sl
    518a:	movs	r1, #20
    518c:	bl	e950 <operator delete(void*, unsigned int)>
    5190:	mov	r0, r9
    5192:	movs	r1, #20
    5194:	bl	e950 <operator delete(void*, unsigned int)>
    5198:	mov	r0, r8
    519a:	movs	r1, #20
    519c:	bl	e950 <operator delete(void*, unsigned int)>
    51a0:	mov	r0, r7
    51a2:	movs	r1, #20
    51a4:	bl	e950 <operator delete(void*, unsigned int)>
    51a8:	mov	r0, r6
    51aa:	movs	r1, #20
    51ac:	bl	e950 <operator delete(void*, unsigned int)>
    51b0:	b.n	5092 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x1ea>
	}
	virtual void close() {
		if (f) f->close();
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
    51b2:	mov	r0, r3
    51b4:	blx	r2
    51b6:	mov	r4, r0
    51b8:	b.n	4f5a <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0xb2>
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    51ba:	str.w	fp, [r5]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    51be:	ldr	r3, [r2, #16]
    51c0:	subs	r3, #1
    51c2:	str	r3, [r2, #16]
    51c4:	cmp	r3, #0
    51c6:	bne.n	5276 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3ce>
    51c8:	ldr	r4, [r5, #16]
    51ca:	cmp	r4, #0
    51cc:	beq.n	5276 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3ce>
    51ce:	ldr	r2, [r4, #0]
    51d0:	ldr	r3, [pc, #192]	; (5294 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3ec>)
    51d2:	ldr	r2, [r2, #32]
    51d4:	cmp	r2, r3
    51d6:	bne.w	5862 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x9ba>
    51da:	ldr	r1, [r4, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    51dc:	str.w	fp, [r4]
    51e0:	ldr	r0, [pc, #180]	; (5298 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3f0>)
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    51e2:	cmp	r1, #0
    51e4:	beq.n	526e <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3c6>
    51e6:	ldr	r2, [r1, #16]
    51e8:	subs	r2, #1
    51ea:	str	r2, [r1, #16]
    51ec:	cmp	r2, #0
    51ee:	bne.n	526e <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3c6>
    51f0:	ldr	r5, [r4, #16]
    51f2:	cmp	r5, #0
    51f4:	beq.n	526e <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3c6>
    51f6:	ldr	r2, [r5, #0]
    51f8:	ldr	r2, [r2, #32]
    51fa:	cmp	r2, r3
    51fc:	bne.w	5878 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x9d0>
    5200:	ldr	r1, [r5, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    5202:	str	r0, [r5, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    5204:	cmp	r1, #0
    5206:	beq.n	5266 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3be>
    5208:	ldr	r2, [r1, #16]
    520a:	subs	r2, #1
    520c:	str	r2, [r1, #16]
    520e:	cbnz	r2, 5266 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3be>
    5210:	ldr	r6, [r5, #16]
    5212:	cbz	r6, 5266 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3be>
    5214:	ldr	r2, [r6, #0]
    5216:	ldr	r2, [r2, #32]
    5218:	cmp	r2, r3
    521a:	bne.w	589e <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x9f6>
    521e:	ldr	r1, [r6, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    5220:	str.w	fp, [r6]
    5224:	ldr	r0, [pc, #112]	; (5298 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3f0>)
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    5226:	cbz	r1, 525e <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3b6>
    5228:	ldr	r2, [r1, #16]
    522a:	subs	r2, #1
    522c:	str	r2, [r1, #16]
    522e:	cbnz	r2, 525e <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3b6>
    5230:	ldr	r7, [r6, #16]
    5232:	cbz	r7, 525e <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3b6>
    5234:	ldr	r2, [r7, #0]
    5236:	ldr	r2, [r2, #32]
    5238:	cmp	r2, r3
    523a:	bne.w	58a4 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x9fc>
    523e:	ldr	r2, [r7, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    5240:	str	r0, [r7, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    5242:	cbz	r2, 5256 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3ae>
    5244:	ldr	r3, [r2, #16]
    5246:	subs	r3, #1
    5248:	str	r3, [r2, #16]
    524a:	cbnz	r3, 5256 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3ae>
    524c:	ldr	r0, [r7, #16]
    524e:	cbz	r0, 5256 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3ae>
    5250:	ldr	r3, [r0, #0]
    5252:	ldr	r3, [r3, #32]
    5254:	blx	r3
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
		invalidate();
	}
    5256:	mov	r0, r7
    5258:	movs	r1, #20
    525a:	bl	e950 <operator delete(void*, unsigned int)>
    525e:	mov	r0, r6
    5260:	movs	r1, #20
    5262:	bl	e950 <operator delete(void*, unsigned int)>
    5266:	mov	r0, r5
    5268:	movs	r1, #20
    526a:	bl	e950 <operator delete(void*, unsigned int)>
    526e:	mov	r0, r4
    5270:	movs	r1, #20
    5272:	bl	e950 <operator delete(void*, unsigned int)>
    bool sd_mkdir(uint32_t store, char *filename) {  return sdx[store]->mkdir(filename);  }
    bool sd_rename(uint32_t store, char *oldfilename, char *newfilename) { return sdx[store]->rename(oldfilename,newfilename);  }
    bool sd_remove(uint32_t store, const char *filename) {    Serial.println(filename); return sdx[store]->remove(filename);  }
    bool sd_rmdir(uint32_t store, char *filename) { return sdx[store]->rmdir(filename);  }
    5276:	ldr.w	r0, [sl, #84]	; 0x54
    527a:	ldr	r1, [sp, #12]
    527c:	ldr	r3, [r0, #0]
    527e:	ldr	r3, [r3, #20]
    5280:	blx	r3
    5282:	ldr	r3, [sp, #56]	; 0x38
    5284:	mov	r4, r0
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    5286:	str.w	fp, [sp, #40]	; 0x28
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    528a:	cmp	r3, #0
    528c:	bne.w	506a <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x1c2>
    5290:	b.n	509a <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x1f2>
    5292:	nop
    5294:	.word	0x00000f25
    5298:	.word	0x000141ac
	}
	virtual bool isDirectory() {
		return (f) ? f->isDirectory() : false;
	}
	virtual File openNextFile(uint8_t mode=0) {
		return (f) ? f->openNextFile(mode) : *this;
    529c:	add	r5, sp, #60	; 0x3c
    529e:	mov	r0, r5
    52a0:	movs	r2, #0
    52a2:	blx	r3
	}
	virtual void close() {
		if (f) f->close();
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
    52a4:	ldr	r2, [r5, #16]
    52a6:	cmp	r2, #0
    52a8:	beq.n	5276 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3ce>
    52aa:	ldr	r3, [r2, #0]
    52ac:	ldr	r3, [r3, #68]	; 0x44
    52ae:	cmp	r3, r6
    52b0:	bne.w	57f4 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x94c>
    52b4:	ldr	r0, [r2, #16]
    52b6:	cmp	r0, #0
    52b8:	beq.w	51ba <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x312>
    52bc:	ldr	r1, [r0, #0]
    52be:	ldr	r1, [r1, #68]	; 0x44
    52c0:	cmp	r1, r6
    52c2:	bne.w	580a <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x962>
    52c6:	ldr	r0, [r0, #16]
    52c8:	cmp	r0, #0
    52ca:	beq.w	51ba <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x312>
    52ce:	ldr	r3, [r0, #0]
    52d0:	ldr	r3, [r3, #68]	; 0x44
    52d2:	cmp	r3, r6
    52d4:	bne.w	57f6 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x94e>
    52d8:	ldr	r0, [r0, #16]
    52da:	cmp	r0, #0
    52dc:	beq.w	51ba <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x312>
    52e0:	ldr	r3, [r0, #0]
    52e2:	ldr	r3, [r3, #68]	; 0x44
    52e4:	cmp	r3, r6
    52e6:	bne.w	57f6 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x94e>
    52ea:	ldr	r0, [r0, #16]
    52ec:	cmp	r0, #0
    52ee:	beq.w	51ba <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x312>
    52f2:	ldr	r3, [r0, #0]
    52f4:	ldr	r3, [r3, #68]	; 0x44
    52f6:	cmp	r3, r6
    52f8:	bne.w	57f6 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x94e>
    52fc:	ldr	r0, [r0, #16]
    52fe:	cmp	r0, #0
    5300:	beq.w	51ba <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x312>
    5304:	ldr	r3, [r0, #0]
    5306:	ldr	r3, [r3, #68]	; 0x44
    5308:	cmp	r3, r6
    530a:	bne.w	57f6 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x94e>
    530e:	ldr	r0, [r0, #16]
    5310:	cmp	r0, #0
    5312:	beq.w	51ba <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x312>
    5316:	ldr	r3, [r0, #0]
    5318:	ldr	r3, [r3, #68]	; 0x44
    531a:	blx	r3

      strlcpy(tmp1Name,newfilename,MAX_FILENAME_LEN);
      if(tmp1Name[strlen(tmp1Name)-1]!='/') strlcat(tmp1Name,"/",MAX_FILENAME_LEN);

      File f2=f1.openNextFile();
      if(!f2) break;
    531c:	cmp	r0, #0
    531e:	beq.w	58ce <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0xa26>
	}
	virtual const char* name() {
		return (f) ? f->name() : "";
    5322:	ldr	r0, [r5, #16]
    5324:	cmp	r0, #0
    5326:	beq.w	57f0 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x948>
    532a:	ldr	r2, [r0, #0]
    532c:	ldr	r3, [pc, #696]	; (55e8 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x740>)
    532e:	ldr	r2, [r2, #72]	; 0x48
    5330:	cmp	r2, r3
    5332:	bne.w	57fa <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x952>
    5336:	ldr	r0, [r0, #16]
    5338:	cmp	r0, #0
    533a:	beq.w	57f0 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x948>
    533e:	ldr	r2, [r0, #0]
    5340:	ldr	r2, [r2, #72]	; 0x48
    5342:	cmp	r2, r3
    5344:	bne.w	57fa <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x952>
    5348:	ldr	r0, [r0, #16]
    534a:	cmp	r0, #0
    534c:	beq.w	57f0 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x948>
    5350:	ldr	r2, [r0, #0]
    5352:	ldr	r2, [r2, #72]	; 0x48
    5354:	cmp	r2, r3
    5356:	bne.w	57fa <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x952>
    535a:	ldr	r0, [r0, #16]
    535c:	cmp	r0, #0
    535e:	beq.w	57f0 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x948>
    5362:	ldr	r2, [r0, #0]
    5364:	ldr	r2, [r2, #72]	; 0x48
    5366:	cmp	r2, r3
    5368:	bne.w	57fa <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x952>
    536c:	ldr	r0, [r0, #16]
    536e:	cmp	r0, #0
    5370:	beq.w	57f0 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x948>
    5374:	ldr	r2, [r0, #0]
    5376:	ldr	r2, [r2, #72]	; 0x48
    5378:	cmp	r2, r3
    537a:	bne.w	57fa <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x952>
    537e:	ldr	r0, [r0, #16]
    5380:	cmp	r0, #0
    5382:	beq.w	57f0 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x948>
    5386:	ldr	r2, [r0, #0]
    5388:	ldr	r2, [r2, #72]	; 0x48
    538a:	cmp	r2, r3
    538c:	bne.w	57fa <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x952>
    5390:	ldr	r0, [r0, #16]
    5392:	cmp	r0, #0
    5394:	beq.w	57f0 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x948>
    5398:	ldr	r3, [r0, #0]
    539a:	ldr	r3, [r3, #72]	; 0x48
    539c:	blx	r3
    539e:	mov	r1, r0
      { // generate filenames
        strlcat(tmp0Name,f2.name(),MAX_FILENAME_LEN);
    53a0:	mov.w	r2, #256	; 0x100
    53a4:	add	r0, sp, #80	; 0x50
    53a6:	bl	10c7c <strlcat>
    53aa:	ldr	r0, [r5, #16]
    53ac:	cmp	r0, #0
    53ae:	beq.w	57ec <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x944>
    53b2:	ldr	r2, [r0, #0]
    53b4:	ldr	r3, [pc, #560]	; (55e8 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x740>)
    53b6:	ldr	r2, [r2, #72]	; 0x48
    53b8:	cmp	r2, r3
    53ba:	bne.w	5804 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x95c>
    53be:	ldr	r0, [r0, #16]
    53c0:	cmp	r0, #0
    53c2:	beq.w	57ec <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x944>
    53c6:	ldr	r2, [r0, #0]
    53c8:	ldr	r2, [r2, #72]	; 0x48
    53ca:	cmp	r2, r3
    53cc:	bne.w	5804 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x95c>
    53d0:	ldr	r0, [r0, #16]
    53d2:	cmp	r0, #0
    53d4:	beq.w	57ec <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x944>
    53d8:	ldr	r2, [r0, #0]
    53da:	ldr	r2, [r2, #72]	; 0x48
    53dc:	cmp	r2, r3
    53de:	bne.w	5804 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x95c>
    53e2:	ldr	r0, [r0, #16]
    53e4:	cmp	r0, #0
    53e6:	beq.w	57ec <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x944>
    53ea:	ldr	r2, [r0, #0]
    53ec:	ldr	r2, [r2, #72]	; 0x48
    53ee:	cmp	r2, r3
    53f0:	bne.w	5804 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x95c>
    53f4:	ldr	r0, [r0, #16]
    53f6:	cmp	r0, #0
    53f8:	beq.w	57ec <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x944>
    53fc:	ldr	r2, [r0, #0]
    53fe:	ldr	r2, [r2, #72]	; 0x48
    5400:	cmp	r2, r3
    5402:	bne.w	5804 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x95c>
    5406:	ldr	r0, [r0, #16]
    5408:	cmp	r0, #0
    540a:	beq.w	57ec <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x944>
    540e:	ldr	r2, [r0, #0]
    5410:	ldr	r2, [r2, #72]	; 0x48
    5412:	cmp	r2, r3
    5414:	bne.w	5804 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x95c>
    5418:	ldr	r0, [r0, #16]
    541a:	cmp	r0, #0
    541c:	beq.w	57ec <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x944>
    5420:	ldr	r3, [r0, #0]
    5422:	ldr	r3, [r3, #72]	; 0x48
    5424:	blx	r3
    5426:	mov	r1, r0
        strlcat(tmp1Name,f2.name(),MAX_FILENAME_LEN);
    5428:	mov.w	r2, #256	; 0x100
    542c:	mov	r0, r4
    542e:	bl	10c7c <strlcat>
	}
	virtual bool isDirectory() {
		return (f) ? f->isDirectory() : false;
    5432:	ldr	r0, [r5, #16]
    5434:	cmp	r0, #0
    5436:	beq.w	56b8 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x810>
    543a:	ldr	r2, [r0, #0]
    543c:	ldr	r3, [pc, #428]	; (55ec <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x744>)
    543e:	ldr	r2, [r2, #76]	; 0x4c
    5440:	cmp	r2, r3
    5442:	bne.w	5800 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x958>
    5446:	ldr	r0, [r0, #16]
    5448:	cmp	r0, #0
    544a:	beq.w	56b8 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x810>
    544e:	ldr	r2, [r0, #0]
    5450:	ldr	r2, [r2, #76]	; 0x4c
    5452:	cmp	r2, r3
    5454:	bne.w	5800 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x958>
    5458:	ldr	r0, [r0, #16]
    545a:	cmp	r0, #0
    545c:	beq.w	56b8 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x810>
    5460:	ldr	r2, [r0, #0]
    5462:	ldr	r2, [r2, #76]	; 0x4c
    5464:	cmp	r2, r3
    5466:	bne.w	5800 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x958>
    546a:	ldr	r0, [r0, #16]
    546c:	cmp	r0, #0
    546e:	beq.w	56b8 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x810>
    5472:	ldr	r2, [r0, #0]
    5474:	ldr	r2, [r2, #76]	; 0x4c
    5476:	cmp	r2, r3
    5478:	bne.w	5800 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x958>
    547c:	ldr	r0, [r0, #16]
    547e:	cmp	r0, #0
    5480:	beq.w	56b8 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x810>
    5484:	ldr	r2, [r0, #0]
    5486:	ldr	r2, [r2, #76]	; 0x4c
    5488:	cmp	r2, r3
    548a:	bne.w	5800 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x958>
    548e:	ldr	r0, [r0, #16]
    5490:	cmp	r0, #0
    5492:	beq.w	56b8 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x810>
    5496:	ldr	r2, [r0, #0]
    5498:	ldr	r2, [r2, #76]	; 0x4c
    549a:	cmp	r2, r3
    549c:	bne.w	5800 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x958>
    54a0:	ldr	r0, [r0, #16]
    54a2:	cmp	r0, #0
    54a4:	beq.w	56b8 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x810>
    54a8:	ldr	r3, [r0, #0]
    54aa:	ldr	r3, [r3, #76]	; 0x4c
    54ac:	blx	r3

        if(f2.isDirectory())
    54ae:	cmp	r0, #0
    54b0:	beq.w	56b8 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x810>
        { 
          if(!sd_moveDir(store0, tmp0Name, store1, tmp1Name)) {DBG_FAIL_MACRO; return false;}
    54b4:	str	r4, [sp, #0]
    54b6:	ldr	r3, [sp, #8]
    54b8:	add	r2, sp, #80	; 0x50
    54ba:	mov	r1, r8
    54bc:	mov	r0, r9
    54be:	bl	4e74 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*)>
    54c2:	cmp	r0, #0
    54c4:	beq.w	56ee <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x846>
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    54c8:	ldr	r2, [r5, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    54ca:	str.w	fp, [r5]
    54ce:	ldr	r1, [pc, #288]	; (55f0 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x748>)
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    54d0:	cmp	r2, #0
    54d2:	beq.w	4f66 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0xbe>
    54d6:	ldr	r3, [r2, #16]
    54d8:	subs	r3, #1
    54da:	str	r3, [r2, #16]
    54dc:	cmp	r3, #0
    54de:	bne.w	4f66 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0xbe>
    54e2:	ldr	r5, [r5, #16]
    54e4:	cmp	r5, #0
    54e6:	beq.w	4f66 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0xbe>
    54ea:	ldr	r2, [r5, #0]
    54ec:	ldr	r3, [pc, #260]	; (55f4 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x74c>)
    54ee:	ldr	r2, [r2, #32]
    54f0:	cmp	r2, r3
    54f2:	bne.w	580e <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x966>
    54f6:	ldr	r0, [r5, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    54f8:	str	r1, [r5, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    54fa:	cmp	r0, #0
    54fc:	beq.w	56ae <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x806>
    5500:	ldr	r2, [r0, #16]
    5502:	subs	r2, #1
    5504:	str	r2, [r0, #16]
    5506:	cmp	r2, #0
    5508:	bne.w	56ae <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x806>
    550c:	ldr	r7, [r5, #16]
    550e:	cmp	r7, #0
    5510:	beq.w	56ae <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x806>
    5514:	ldr	r2, [r7, #0]
    5516:	ldr	r2, [r2, #32]
    5518:	cmp	r2, r3
    551a:	bne.w	5816 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x96e>
    551e:	ldr	r0, [r7, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    5520:	str	r1, [r7, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    5522:	cmp	r0, #0
    5524:	beq.w	56a6 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x7fe>
    5528:	ldr	r2, [r0, #16]
    552a:	subs	r2, #1
    552c:	str	r2, [r0, #16]
    552e:	cmp	r2, #0
    5530:	bne.w	56a6 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x7fe>
    5534:	ldr	r2, [r7, #16]
    5536:	cmp	r2, #0
    5538:	beq.w	56a6 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x7fe>
    553c:	ldr	r1, [r2, #0]
    553e:	ldr	r1, [r1, #32]
    5540:	cmp	r1, r3
    5542:	bne.w	5832 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x98a>
    5546:	ldr.w	lr, [r2, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    554a:	str.w	fp, [r2]
    554e:	ldr	r0, [pc, #160]	; (55f0 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x748>)
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    5550:	cmp.w	lr, #0
    5554:	beq.w	569e <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x7f6>
    5558:	ldr.w	r1, [lr, #16]
    555c:	subs	r1, #1
    555e:	str.w	r1, [lr, #16]
    5562:	cmp	r1, #0
    5564:	bne.w	569e <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x7f6>
    5568:	ldr	r1, [r2, #16]
    556a:	str	r1, [sp, #16]
    556c:	cmp	r1, #0
    556e:	beq.w	569e <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x7f6>
    5572:	ldr	r1, [sp, #16]
    5574:	ldr	r1, [r1, #0]
    5576:	ldr	r1, [r1, #32]
    5578:	cmp	r1, r3
    557a:	bne.w	5846 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x99e>
    557e:	ldr	r1, [sp, #16]
    5580:	ldr.w	lr, [r1, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    5584:	str	r0, [r1, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    5586:	cmp.w	lr, #0
    558a:	beq.w	5692 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x7ea>
    558e:	ldr.w	r1, [lr, #16]
    5592:	subs	r1, #1
    5594:	str.w	r1, [lr, #16]
    5598:	cmp	r1, #0
    559a:	bne.n	5692 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x7ea>
    559c:	ldr	r1, [sp, #16]
    559e:	ldr	r1, [r1, #16]
    55a0:	str	r1, [sp, #20]
    55a2:	cmp	r1, #0
    55a4:	beq.n	5692 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x7ea>
    55a6:	ldr	r0, [sp, #20]
    55a8:	ldr	r1, [r0, #0]
    55aa:	ldr	r1, [r1, #32]
    55ac:	cmp	r1, r3
    55ae:	bne.w	5868 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x9c0>
    55b2:	ldr.w	lr, [r0, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    55b6:	str.w	fp, [r0]
    55ba:	ldr	r0, [pc, #52]	; (55f0 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x748>)
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    55bc:	cmp.w	lr, #0
    55c0:	beq.n	5686 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x7de>
    55c2:	ldr.w	r1, [lr, #16]
    55c6:	subs	r1, #1
    55c8:	str.w	r1, [lr, #16]
    55cc:	cmp	r1, #0
    55ce:	bne.n	5686 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x7de>
    55d0:	ldr	r1, [sp, #20]
    55d2:	ldr	r1, [r1, #16]
    55d4:	str	r1, [sp, #24]
    55d6:	cmp	r1, #0
    55d8:	beq.n	5686 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x7de>
    55da:	ldr	r1, [sp, #24]
    55dc:	ldr	r1, [r1, #0]
    55de:	ldr	r1, [r1, #32]
    55e0:	cmp	r1, r3
    55e2:	bne.w	587e <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x9d6>
    55e6:	b.n	55f8 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x750>
    55e8:	.word	0x0000050d
    55ec:	.word	0x00000521
    55f0:	.word	0x000141ac
    55f4:	.word	0x00000f25
    55f8:	ldr	r1, [sp, #24]
    55fa:	ldr.w	lr, [r1, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    55fe:	str	r0, [r1, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    5600:	cmp.w	lr, #0
    5604:	beq.n	567a <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x7d2>
    5606:	ldr.w	r1, [lr, #16]
    560a:	subs	r1, #1
    560c:	str.w	r1, [lr, #16]
    5610:	cmp	r1, #0
    5612:	bne.n	567a <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x7d2>
    5614:	ldr	r1, [sp, #24]
    5616:	ldr	r1, [r1, #16]
    5618:	str	r1, [sp, #28]
    561a:	cbz	r1, 567a <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x7d2>
    561c:	ldr	r1, [sp, #28]
    561e:	ldr	r1, [r1, #0]
    5620:	ldr	r1, [r1, #32]
    5622:	cmp	r1, r3
    5624:	bne.w	5894 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x9ec>
    5628:	ldr	r1, [sp, #28]
    562a:	ldr.w	lr, [r1, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    562e:	str	r0, [r1, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    5630:	cmp.w	lr, #0
    5634:	beq.n	566e <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x7c6>
    5636:	ldr.w	r1, [lr, #16]
    563a:	subs	r1, #1
    563c:	str.w	r1, [lr, #16]
    5640:	cbnz	r1, 566e <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x7c6>
    5642:	ldr	r1, [sp, #28]
    5644:	ldr	r1, [r1, #16]
    5646:	cbz	r1, 566e <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x7c6>
    5648:	ldr	r0, [r1, #0]
    564a:	ldr	r0, [r0, #32]
    564c:	cmp	r0, r3
    564e:	mov	lr, r0
    5650:	bne.w	58bc <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0xa14>
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    5654:	mov	r0, r1
    5656:	str	r2, [sp, #36]	; 0x24
    5658:	str.w	fp, [r0], #16
    565c:	str	r1, [sp, #32]
		invalidate();
    565e:	bl	2078 <File::invalidate() [clone .isra.1]>
	}
    5662:	ldr	r1, [sp, #32]
    5664:	mov	r0, r1
    5666:	movs	r1, #20
    5668:	bl	e950 <operator delete(void*, unsigned int)>
    566c:	ldr	r2, [sp, #36]	; 0x24
    566e:	ldr	r0, [sp, #28]
    5670:	str	r2, [sp, #32]
    5672:	movs	r1, #20
    5674:	bl	e950 <operator delete(void*, unsigned int)>
    5678:	ldr	r2, [sp, #32]
    567a:	ldr	r0, [sp, #24]
    567c:	str	r2, [sp, #28]
    567e:	movs	r1, #20
    5680:	bl	e950 <operator delete(void*, unsigned int)>
    5684:	ldr	r2, [sp, #28]
    5686:	ldr	r0, [sp, #20]
    5688:	str	r2, [sp, #24]
    568a:	movs	r1, #20
    568c:	bl	e950 <operator delete(void*, unsigned int)>
    5690:	ldr	r2, [sp, #24]
    5692:	ldr	r0, [sp, #16]
    5694:	str	r2, [sp, #20]
    5696:	movs	r1, #20
    5698:	bl	e950 <operator delete(void*, unsigned int)>
    569c:	ldr	r2, [sp, #20]
    569e:	mov	r0, r2
    56a0:	movs	r1, #20
    56a2:	bl	e950 <operator delete(void*, unsigned int)>
    56a6:	mov	r0, r7
    56a8:	movs	r1, #20
    56aa:	bl	e950 <operator delete(void*, unsigned int)>
    56ae:	mov	r0, r5
    56b0:	movs	r1, #20
    56b2:	bl	e950 <operator delete(void*, unsigned int)>
    56b6:	b.n	4f66 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0xbe>
        }
        else
        { 
          if(!sd_copy(store0, tmp0Name, store1, tmp1Name)) {DBG_FAIL_MACRO; return false;}
    56b8:	str	r4, [sp, #0]
    56ba:	ldr	r3, [sp, #8]
    56bc:	add	r2, sp, #80	; 0x50
    56be:	mov	r1, r8
    56c0:	mov	r0, r9
    56c2:	bl	43c0 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)>
    56c6:	cbz	r0, 56ee <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x846>
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
    56c8:	add	r0, sp, #80	; 0x50
    56ca:	bl	10d00 <strlen>
    56ce:	mov	r1, r0
    56d0:	add	r0, sp, #80	; 0x50
    56d2:	bl	cd74 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    56d6:	ldr	r0, [pc, #524]	; (58e4 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0xa3c>)
    56d8:	bl	e7ac <Print::println()>
    const char *sd_getFSName(uint32_t store) { return sd_name[store];}

    File sd_open(uint32_t store, const char *filename, uint32_t mode) { return sdx[store]->open(filename,mode);  }
    bool sd_mkdir(uint32_t store, char *filename) {  return sdx[store]->mkdir(filename);  }
    bool sd_rename(uint32_t store, char *oldfilename, char *newfilename) { return sdx[store]->rename(oldfilename,newfilename);  }
    bool sd_remove(uint32_t store, const char *filename) {    Serial.println(filename); return sdx[store]->remove(filename);  }
    56dc:	ldr.w	r0, [sl, #84]	; 0x54
    56e0:	ldr	r3, [r0, #0]
    56e2:	add	r1, sp, #80	; 0x50
    56e4:	ldr	r3, [r3, #16]
    56e6:	blx	r3
          if(!sd_remove(store0,tmp0Name)) {DBG_FAIL_MACRO; return false;}
    56e8:	cmp	r0, #0
    56ea:	bne.w	54c8 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x620>
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    56ee:	ldr	r2, [r5, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    56f0:	str.w	fp, [r5]
    56f4:	ldr	r1, [pc, #496]	; (58e8 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0xa40>)
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    56f6:	cmp	r2, #0
    56f8:	beq.n	57e6 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x93e>
    56fa:	ldr	r3, [r2, #16]
    56fc:	subs	r3, #1
    56fe:	str	r3, [r2, #16]
    5700:	cmp	r3, #0
    5702:	bne.n	57e6 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x93e>
    5704:	ldr	r4, [r5, #16]
    5706:	cmp	r4, #0
    5708:	beq.n	57e6 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x93e>
    570a:	ldr	r2, [r4, #0]
    570c:	ldr	r3, [pc, #476]	; (58ec <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0xa44>)
    570e:	ldr	r2, [r2, #32]
    5710:	cmp	r2, r3
    5712:	bne.w	585c <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x9b4>
    5716:	ldr	r0, [r4, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    5718:	str	r1, [r4, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    571a:	cmp	r0, #0
    571c:	beq.n	57de <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x936>
    571e:	ldr	r2, [r0, #16]
    5720:	subs	r2, #1
    5722:	str	r2, [r0, #16]
    5724:	cmp	r2, #0
    5726:	bne.n	57de <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x936>
    5728:	ldr	r5, [r4, #16]
    572a:	cmp	r5, #0
    572c:	beq.n	57de <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x936>
    572e:	ldr	r2, [r5, #0]
    5730:	ldr	r2, [r2, #32]
    5732:	cmp	r2, r3
    5734:	bne.w	5850 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x9a8>
    5738:	ldr	r0, [r5, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    573a:	str	r1, [r5, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    573c:	cmp	r0, #0
    573e:	beq.n	57d6 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x92e>
    5740:	ldr	r2, [r0, #16]
    5742:	subs	r2, #1
    5744:	str	r2, [r0, #16]
    5746:	cmp	r2, #0
    5748:	bne.n	57d6 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x92e>
    574a:	ldr	r6, [r5, #16]
    574c:	cmp	r6, #0
    574e:	beq.n	57d6 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x92e>
    5750:	ldr	r2, [r6, #0]
    5752:	ldr	r2, [r2, #32]
    5754:	cmp	r2, r3
    5756:	bne.w	588e <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x9e6>
    575a:	ldr	r1, [r6, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    575c:	str.w	fp, [r6]
    5760:	ldr	r0, [pc, #388]	; (58e8 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0xa40>)
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    5762:	cmp	r1, #0
    5764:	beq.n	57ce <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x926>
    5766:	ldr	r2, [r1, #16]
    5768:	subs	r2, #1
    576a:	str	r2, [r1, #16]
    576c:	cbnz	r2, 57ce <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x926>
    576e:	ldr	r7, [r6, #16]
    5770:	cbz	r7, 57ce <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x926>
    5772:	ldr	r2, [r7, #0]
    5774:	ldr	r2, [r2, #32]
    5776:	cmp	r2, r3
    5778:	bne.w	58aa <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0xa02>
    577c:	ldr	r1, [r7, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    577e:	str	r0, [r7, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    5780:	cbz	r1, 57c6 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x91e>
    5782:	ldr	r2, [r1, #16]
    5784:	subs	r2, #1
    5786:	str	r2, [r1, #16]
    5788:	cbnz	r2, 57c6 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x91e>
    578a:	ldr.w	r8, [r7, #16]
    578e:	cmp.w	r8, #0
    5792:	beq.n	57c6 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x91e>
    5794:	ldr.w	r2, [r8]
    5798:	ldr	r2, [r2, #32]
    579a:	cmp	r2, r3
    579c:	bne.w	58c8 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0xa20>
    57a0:	ldr.w	r2, [r8, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    57a4:	str.w	fp, [r8]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    57a8:	cbz	r2, 57be <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x916>
    57aa:	ldr	r3, [r2, #16]
    57ac:	subs	r3, #1
    57ae:	str	r3, [r2, #16]
    57b0:	cbnz	r3, 57be <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x916>
    57b2:	ldr.w	r0, [r8, #16]
    57b6:	cbz	r0, 57be <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x916>
    57b8:	ldr	r3, [r0, #0]
    57ba:	ldr	r3, [r3, #32]
    57bc:	blx	r3
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
		invalidate();
	}
    57be:	mov	r0, r8
    57c0:	movs	r1, #20
    57c2:	bl	e950 <operator delete(void*, unsigned int)>
    57c6:	mov	r0, r7
    57c8:	movs	r1, #20
    57ca:	bl	e950 <operator delete(void*, unsigned int)>
    57ce:	mov	r0, r6
    57d0:	movs	r1, #20
    57d2:	bl	e950 <operator delete(void*, unsigned int)>
    57d6:	mov	r0, r5
    57d8:	movs	r1, #20
    57da:	bl	e950 <operator delete(void*, unsigned int)>
    57de:	mov	r0, r4
    57e0:	movs	r1, #20
    57e2:	bl	e950 <operator delete(void*, unsigned int)>
    57e6:	ldr	r3, [sp, #56]	; 0x38
    57e8:	movs	r4, #0
    57ea:	b.n	5286 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3de>
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
	}
	virtual const char* name() {
		return (f) ? f->name() : "";
    57ec:	ldr	r1, [pc, #256]	; (58f0 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0xa48>)
    57ee:	b.n	5428 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x580>
    57f0:	ldr	r1, [pc, #252]	; (58f0 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0xa48>)
    57f2:	b.n	53a0 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x4f8>
	}
	virtual void close() {
		if (f) f->close();
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
    57f4:	mov	r0, r2
    57f6:	blx	r3
    57f8:	b.n	531c <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x474>
	}
	virtual const char* name() {
		return (f) ? f->name() : "";
    57fa:	blx	r2
    57fc:	mov	r1, r0
    57fe:	b.n	53a0 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x4f8>
	}
	virtual bool isDirectory() {
		return (f) ? f->isDirectory() : false;
    5800:	blx	r2
    5802:	b.n	54ae <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x606>
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
	}
	virtual const char* name() {
		return (f) ? f->name() : "";
    5804:	blx	r2
    5806:	mov	r1, r0
    5808:	b.n	5428 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x580>
	}
	virtual void close() {
		if (f) f->close();
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
    580a:	blx	r1
    580c:	b.n	531c <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x474>
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    580e:	mov	r0, r5
    5810:	blx	r2
    5812:	b.w	4f66 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0xbe>
    5816:	mov	r0, r7
    5818:	blx	r2
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
		invalidate();
	}
    581a:	mov	r0, r5
    581c:	movs	r1, #20
    581e:	bl	e950 <operator delete(void*, unsigned int)>
    5822:	b.w	4f66 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0xbe>
  char tmp1Name[MAX_FILENAME_LEN];

  if(!sd_mkdir(store1,newfilename))  {DBG_FAIL_MACRO; return false;}

  File f1=sd_open(store0,oldfilename,FILE_READ);
  if(!f1) {DBG_FAIL_MACRO; return false;}
    5826:	mov	r4, r3
        }
      }
    }
  }
  return sd_rmdir(store0,oldfilename);
}
    5828:	mov	r0, r4
    582a:	add.w	sp, sp, #596	; 0x254
    582e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    5832:	mov	r0, r2
    5834:	blx	r1
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
		invalidate();
	}
    5836:	mov	r0, r7
    5838:	movs	r1, #20
    583a:	bl	e950 <operator delete(void*, unsigned int)>
    583e:	b.n	56ae <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x806>
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    5840:	mov	r0, r5
    5842:	blx	r2
    5844:	b.n	509a <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x1f2>
    5846:	str	r2, [sp, #20]
    5848:	ldr	r0, [sp, #16]
    584a:	blx	r1
    584c:	ldr	r2, [sp, #20]
    584e:	b.n	569e <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x7f6>
    5850:	mov	r0, r5
    5852:	blx	r2
    5854:	b.n	57de <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x936>
    5856:	mov	r0, r6
    5858:	blx	r2
    585a:	b.n	5092 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x1ea>
    585c:	mov	r0, r4
    585e:	blx	r2
    5860:	b.n	57e6 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x93e>
    5862:	mov	r0, r4
    5864:	blx	r2
    5866:	b.n	5276 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3ce>
    5868:	str	r2, [sp, #24]
    586a:	ldr	r0, [sp, #20]
    586c:	blx	r1
    586e:	ldr	r2, [sp, #24]
    5870:	b.n	5692 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x7ea>
    5872:	mov	r0, r7
    5874:	blx	r2
    5876:	b.n	51a8 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x300>
    5878:	mov	r0, r5
    587a:	blx	r2
    587c:	b.n	526e <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3c6>
    587e:	str	r2, [sp, #28]
    5880:	ldr	r0, [sp, #24]
    5882:	blx	r1
    5884:	ldr	r2, [sp, #28]
    5886:	b.n	5686 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x7de>
    5888:	mov	r0, r8
    588a:	blx	r2
    588c:	b.n	51a0 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x2f8>
    588e:	mov	r0, r6
    5890:	blx	r2
    5892:	b.n	57d6 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x92e>
    5894:	str	r2, [sp, #32]
    5896:	ldr	r0, [sp, #28]
    5898:	blx	r1
    589a:	ldr	r2, [sp, #32]
    589c:	b.n	567a <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x7d2>
    589e:	mov	r0, r6
    58a0:	blx	r2
    58a2:	b.n	5266 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3be>
    58a4:	mov	r0, r7
    58a6:	blx	r2
    58a8:	b.n	525e <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3b6>
    58aa:	mov	r0, r7
    58ac:	blx	r2
    58ae:	b.n	57ce <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x926>
    58b0:	mov	r0, r9
    58b2:	blx	r2
    58b4:	b.n	5198 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x2f0>
    58b6:	mov	r0, sl
    58b8:	blx	r2
    58ba:	b.n	5190 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x2e8>
    58bc:	str	r2, [sp, #32]
    58be:	mov	r0, r1
    58c0:	mov	r3, lr
    58c2:	blx	r3
    58c4:	ldr	r2, [sp, #32]
    58c6:	b.n	566e <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x7c6>
    58c8:	mov	r0, r8
    58ca:	blx	r2
    58cc:	b.n	57c6 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x91e>
    58ce:	ldr	r2, [r5, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    58d0:	str.w	fp, [r5]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    58d4:	cmp	r2, #0
    58d6:	beq.w	5276 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3ce>
    58da:	b.n	51be <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x316>
    58dc:	ldr	r3, [sp, #56]	; 0x38
    58de:	ldr.w	fp, [pc, #8]	; 58e8 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0xa40>
    58e2:	b.n	5286 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3de>
    58e4:	.word	0x1fff8d50
    58e8:	.word	0x000141ac
    58ec:	.word	0x00000f25
    58f0:	.word	0x00014360

000058f4 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)>:
 * save p2
 * 
*/

  bool MTPStorage_SD::move(uint32_t handle, uint32_t newStore, uint32_t newParent ) 
  { 
    58f4:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    58f8:	mov	r6, r1
    58fa:	subw	sp, sp, #2696	; 0xa88
    #if DEBUG>1
      Serial.printf("%d -> %d %d\n",handle,newStorage,newParent);
    #endif
    if(newParent==0xFFFFFFFFUL) newParent=newStore; //storage runs from 1, while record.store runs from 0
    58fe:	cmp.w	r3, #4294967295
    5902:	ite	ne
    5904:	movne	r7, r3
    5906:	moveq	r7, r2
 * save p2
 * 
*/

  bool MTPStorage_SD::move(uint32_t handle, uint32_t newStore, uint32_t newParent ) 
  { 
    5908:	mov	r4, r0
    #if DEBUG>1
      Serial.printf("%d -> %d %d\n",handle,newStorage,newParent);
    #endif
    if(newParent==0xFFFFFFFFUL) newParent=newStore; //storage runs from 1, while record.store runs from 0

    Record p1 = ReadIndexRecord(handle);
    590a:	mov	r1, r0
    590c:	mov	r2, r6
    590e:	add	r0, sp, #792	; 0x318
    5910:	bl	2690 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    Record p2 = ReadIndexRecord(newParent);
    5914:	mov	r2, r7
    5916:	mov	r1, r4
    5918:	add.w	r0, sp, #1064	; 0x428
    591c:	bl	2690 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    Record p3 = ReadIndexRecord(p1.parent); 
    5920:	ldr	r2, [sp, #792]	; 0x318
    5922:	mov	r1, r4
    5924:	add.w	r0, sp, #1336	; 0x538
    5928:	bl	2690 <MTPStorage_SD::ReadIndexRecord(unsigned long)>

    if(p1.isdir) 
    592c:	ldrb.w	r3, [sp, #804]	; 0x324
    5930:	cbz	r3, 593c <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x48>
    { if(!p1.scanned) 
    5932:	ldrb.w	r3, [sp, #805]	; 0x325
    5936:	cmp	r3, #0
    5938:	beq.w	5ae8 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x1f4>
      { ScanDir(p1.store, handle) ; // in case scan directory
        WriteIndexRecord(handle, p1);
      }
    }

    Record p1o = p1;
    593c:	mov.w	r2, #272	; 0x110
    5940:	add	r1, sp, #792	; 0x318
    5942:	add.w	r0, sp, #1608	; 0x648
    5946:	bl	cb00 <memcpy>
    Record p2o = p2;
    594a:	mov.w	r2, #272	; 0x110
    594e:	add.w	r1, sp, #1064	; 0x428
    5952:	add.w	r0, sp, #1880	; 0x758
    5956:	bl	cb00 <memcpy>
    Record p3o = p3;

    char oldName[MAX_FILENAME_LEN];
    ConstructFilename(handle, oldName, MAX_FILENAME_LEN);
    595a:	add	r2, sp, #280	; 0x118
    595c:	mov.w	r3, #256	; 0x100
    5960:	mov	r1, r6
    5962:	mov	r0, r4
    5964:	bl	2af0 <MTPStorage_SD::ConstructFilename(int, char*, int)>
    uint32_t jx=-1;
    Record pxo;

      // remove index from old parent
      Record px;
      if(p3.child==handle)
    5968:	ldr.w	r8, [sp, #1340]	; 0x53c
    596c:	cmp	r6, r8
    596e:	beq.w	5aae <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x1ba>
        p3.child = p1.sibling;
        WriteIndexRecord(p1.parent, p3);    
      }
      else
      { jx = p3.child;
        px = ReadIndexRecord(jx); 
    5972:	add	r0, sp, #8
    5974:	mov	r2, r8
    5976:	mov	r1, r4
    5978:	bl	2690 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    597c:	add	r1, sp, #8
    597e:	mov.w	r2, #272	; 0x110
    5982:	addw	r0, sp, #2424	; 0x978
    5986:	bl	cb00 <memcpy>
        pxo = px;
    598a:	addw	r1, sp, #2424	; 0x978
    598e:	addw	r0, sp, #2152	; 0x868
    5992:	mov.w	r2, #272	; 0x110
    5996:	bl	cb00 <memcpy>
        while(handle != px.sibling)
    599a:	ldr.w	r5, [sp, #2432]	; 0x980
    599e:	cmp	r6, r5
    59a0:	bne.n	59a6 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0xb2>
    59a2:	b.n	5b00 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x20c>
    59a4:	mov	r5, r3
        {
          jx = px.sibling;
          px = ReadIndexRecord(jx); 
    59a6:	mov	r2, r5
    59a8:	mov	r1, r4
    59aa:	add	r0, sp, #8
    59ac:	bl	2690 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    59b0:	mov.w	r2, #272	; 0x110
    59b4:	add	r1, sp, #8
    59b6:	addw	r0, sp, #2424	; 0x978
    59ba:	bl	cb00 <memcpy>
          pxo = px;
    59be:	mov.w	r2, #272	; 0x110
    59c2:	addw	r1, sp, #2424	; 0x978
    59c6:	addw	r0, sp, #2152	; 0x868
    59ca:	bl	cb00 <memcpy>
      }
      else
      { jx = p3.child;
        px = ReadIndexRecord(jx); 
        pxo = px;
        while(handle != px.sibling)
    59ce:	ldr.w	r3, [sp, #2432]	; 0x980
    59d2:	cmp	r6, r3
    59d4:	bne.n	59a4 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0xb0>
        {
          jx = px.sibling;
          px = ReadIndexRecord(jx); 
          pxo = px;
        }
        px.sibling = p1.sibling;
    59d6:	ldr	r3, [sp, #800]	; 0x320
    59d8:	str.w	r3, [sp, #2432]	; 0x980
        WriteIndexRecord(jx, px);
    59dc:	addw	r2, sp, #2424	; 0x978
    59e0:	mov	r1, r5
    59e2:	mov	r0, r4
    59e4:	bl	24b0 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
      }
    
      // add to new parent
      p1.parent = newParent;
      p1.store = p2.store;
    59e8:	ldrh.w	r0, [sp, #1078]	; 0x436
      p1.sibling = p2.child;
    59ec:	ldr.w	r3, [sp, #1068]	; 0x42c
        WriteIndexRecord(jx, px);
      }
    
      // add to new parent
      p1.parent = newParent;
      p1.store = p2.store;
    59f0:	strh.w	r0, [sp, #806]	; 0x326
      p1.sibling = p2.child;
      p2.child = handle;
      WriteIndexRecord(handle, p1);
    59f4:	add	r2, sp, #792	; 0x318
    59f6:	mov	r1, r6
    59f8:	mov	r0, r4
      }
    
      // add to new parent
      p1.parent = newParent;
      p1.store = p2.store;
      p1.sibling = p2.child;
    59fa:	str	r3, [sp, #800]	; 0x320
        px.sibling = p1.sibling;
        WriteIndexRecord(jx, px);
      }
    
      // add to new parent
      p1.parent = newParent;
    59fc:	str	r7, [sp, #792]	; 0x318
      p1.store = p2.store;
      p1.sibling = p2.child;
      p2.child = handle;
    59fe:	str.w	r6, [sp, #1068]	; 0x42c
      WriteIndexRecord(handle, p1);
    5a02:	bl	24b0 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
      WriteIndexRecord(newParent,p2);
    5a06:	add.w	r2, sp, #1064	; 0x428
    5a0a:	mov	r1, r7
    5a0c:	mov	r0, r4
    5a0e:	bl	24b0 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>

      // now working on disk storage
      char newName[MAX_FILENAME_LEN];
      ConstructFilename(handle, newName, MAX_FILENAME_LEN);
    5a12:	mov.w	r3, #256	; 0x100
    5a16:	mov	r1, r6
    5a18:	add	r2, sp, #536	; 0x218
    5a1a:	mov	r0, r4
    5a1c:	bl	2af0 <MTPStorage_SD::ConstructFilename(int, char*, int)>
        Serial.print(p1.store); Serial.print(": ");Serial.println(newName);
        dumpIndexList();
      #endif


    if(p1o.store == p2o.store)
    5a20:	ldrh.w	r1, [sp, #1622]	; 0x656
    5a24:	ldrh.w	r3, [sp, #1894]	; 0x766
    5a28:	cmp	r1, r3
    5a2a:	beq.n	5ac6 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x1d2>
    { // do a simple rename (works for files and directories)
      if(sd_rename(p1o.store,oldName,newName)) return true; else {DBG_FAIL_MACRO; goto fail;}
    }
    else if(!p1o.isdir)
    5a2c:	ldrb.w	r2, [sp, #1620]	; 0x654
    5a30:	cbz	r2, 5a74 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x180>
    { if(sd_copy(p1o.store,oldName, p2o.store, newName)) 
      { sd_remove(p2o.store,oldName); return true; } else { DBG_FAIL_MACRO; goto fail;}
    }
    else
    { // move directory cross mtp-disks
      if(sd_moveDir(p1o.store,oldName,p2o.store,newName)) return true; else {DBG_FAIL_MACRO; goto fail;}
    5a32:	add	r2, sp, #536	; 0x218
    5a34:	str	r2, [sp, #0]
    5a36:	adds	r0, r4, #4
    5a38:	add	r2, sp, #280	; 0x118
    5a3a:	bl	4e74 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*)>
    5a3e:	cmp	r0, #0
    5a40:	bne.n	5ada <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x1e6>
    }

  fail:
    // undo changes in index list
    if(jx<0) WriteIndexRecord(p1.parent, p3o); else WriteIndexRecord(jx, pxo);
    5a42:	mov	r1, r5
    5a44:	addw	r2, sp, #2152	; 0x868
    5a48:	mov	r0, r4
    5a4a:	bl	24b0 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    WriteIndexRecord(handle, p1o);
    5a4e:	add.w	r2, sp, #1608	; 0x648
    5a52:	mov	r1, r6
    5a54:	mov	r0, r4
    5a56:	bl	24b0 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    WriteIndexRecord(newParent,p2o);      
    5a5a:	add.w	r2, sp, #1880	; 0x758
    5a5e:	mov	r1, r7
    5a60:	mov	r0, r4
    5a62:	bl	24b0 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    return false;
    5a66:	mov.w	r8, #0
  }
    5a6a:	mov	r0, r8
    5a6c:	addw	sp, sp, #2696	; 0xa88
    5a70:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(p1o.store == p2o.store)
    { // do a simple rename (works for files and directories)
      if(sd_rename(p1o.store,oldName,newName)) return true; else {DBG_FAIL_MACRO; goto fail;}
    }
    else if(!p1o.isdir)
    { if(sd_copy(p1o.store,oldName, p2o.store, newName)) 
    5a74:	add	r2, sp, #536	; 0x218
    5a76:	str	r2, [sp, #0]
    5a78:	adds	r0, r4, #4
    5a7a:	add	r2, sp, #280	; 0x118
    5a7c:	bl	43c0 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)>
    5a80:	mov	r8, r0
    5a82:	cmp	r0, #0
    5a84:	beq.n	5a42 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x14e>
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
    5a86:	add	r0, sp, #280	; 0x118
    5a88:	bl	10d00 <strlen>
      { sd_remove(p2o.store,oldName); return true; } else { DBG_FAIL_MACRO; goto fail;}
    5a8c:	ldrh.w	r5, [sp, #1894]	; 0x766
    5a90:	mov	r1, r0
    5a92:	add.w	r4, r4, r5, lsl #2
    5a96:	add	r0, sp, #280	; 0x118
    5a98:	bl	cd74 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    5a9c:	ldr	r0, [pc, #100]	; (5b04 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x210>)
    5a9e:	bl	e7ac <Print::println()>
    5aa2:	ldr	r0, [r4, #88]	; 0x58
    5aa4:	ldr	r3, [r0, #0]
    5aa6:	add	r1, sp, #280	; 0x118
    5aa8:	ldr	r3, [r3, #16]
    5aaa:	blx	r3
    5aac:	b.n	5a6a <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x176>

      // remove index from old parent
      Record px;
      if(p3.child==handle)
      {
        p3.child = p1.sibling;
    5aae:	ldr	r3, [sp, #800]	; 0x320
        WriteIndexRecord(p1.parent, p3);    
    5ab0:	ldr	r1, [sp, #792]	; 0x318

      // remove index from old parent
      Record px;
      if(p3.child==handle)
      {
        p3.child = p1.sibling;
    5ab2:	str.w	r3, [sp, #1340]	; 0x53c
        WriteIndexRecord(p1.parent, p3);    
    5ab6:	add.w	r2, sp, #1336	; 0x538
    5aba:	mov	r0, r4
    5abc:	bl	24b0 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    #if DEBUG>1
      Serial.print(p1.store); Serial.print(": "); Serial.println(oldName);
      dumpIndexList();
    #endif

    uint32_t jx=-1;
    5ac0:	mov.w	r5, #4294967295
    5ac4:	b.n	59e8 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0xf4>
    uint32_t sd_getFSCount(void) {return fsCount;}
    const char *sd_getFSName(uint32_t store) { return sd_name[store];}

    File sd_open(uint32_t store, const char *filename, uint32_t mode) { return sdx[store]->open(filename,mode);  }
    bool sd_mkdir(uint32_t store, char *filename) {  return sdx[store]->mkdir(filename);  }
    bool sd_rename(uint32_t store, char *oldfilename, char *newfilename) { return sdx[store]->rename(oldfilename,newfilename);  }
    5ac6:	add.w	r1, r4, r1, lsl #2
    5aca:	add	r2, sp, #536	; 0x218
    5acc:	ldr	r0, [r1, #88]	; 0x58
    5ace:	ldr	r3, [r0, #0]
    5ad0:	add	r1, sp, #280	; 0x118
    5ad2:	ldr	r3, [r3, #12]
    5ad4:	blx	r3
      #endif


    if(p1o.store == p2o.store)
    { // do a simple rename (works for files and directories)
      if(sd_rename(p1o.store,oldName,newName)) return true; else {DBG_FAIL_MACRO; goto fail;}
    5ad6:	cmp	r0, #0
    5ad8:	beq.n	5a42 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x14e>
    5ada:	mov.w	r8, #1
    // undo changes in index list
    if(jx<0) WriteIndexRecord(p1.parent, p3o); else WriteIndexRecord(jx, pxo);
    WriteIndexRecord(handle, p1o);
    WriteIndexRecord(newParent,p2o);      
    return false;
  }
    5ade:	mov	r0, r8
    5ae0:	addw	sp, sp, #2696	; 0xa88
    5ae4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    Record p2 = ReadIndexRecord(newParent);
    Record p3 = ReadIndexRecord(p1.parent); 

    if(p1.isdir) 
    { if(!p1.scanned) 
      { ScanDir(p1.store, handle) ; // in case scan directory
    5ae8:	mov	r2, r6
    5aea:	ldrh.w	r1, [sp, #806]	; 0x326
    5aee:	mov	r0, r4
    5af0:	bl	327c <MTPStorage_SD::ScanDir(unsigned long, unsigned long)>
        WriteIndexRecord(handle, p1);
    5af4:	add	r2, sp, #792	; 0x318
    5af6:	mov	r1, r6
    5af8:	mov	r0, r4
    5afa:	bl	24b0 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    5afe:	b.n	593c <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x48>
      }
      else
      { jx = p3.child;
        px = ReadIndexRecord(jx); 
        pxo = px;
        while(handle != px.sibling)
    5b00:	mov	r5, r8
    5b02:	b.n	59d6 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0xe2>
    5b04:	.word	0x1fff8d50

00005b08 <MTPD::GetNumObjects(unsigned long, unsigned long)>:

    //printf("%d %d ",storage,store); Serial.println(name); Serial.flush();
  }

  uint32_t MTPD::GetNumObjects(uint32_t storage, uint32_t parent) 
  { uint32_t store = Storage2Store(storage);
    5b08:	push	{r4, r5, r6, lr}
    5b0a:	mov	r6, r0
    storage_->StartGetObjectHandles(store, parent);
    5b0c:	ldr	r0, [r0, #0]
    5b0e:	ldr	r3, [r0, #0]

    //printf("%d %d ",storage,store); Serial.println(name); Serial.flush();
  }

  uint32_t MTPD::GetNumObjects(uint32_t storage, uint32_t parent) 
  { uint32_t store = Storage2Store(storage);
    5b10:	subs	r5, r1, #1
    storage_->StartGetObjectHandles(store, parent);
    5b12:	ldr	r3, [r3, #28]
    5b14:	mov	r1, r5
    5b16:	blx	r3
    int num = 0;
    5b18:	movs	r4, #0
    5b1a:	b.n	5b1e <MTPD::GetNumObjects(unsigned long, unsigned long)+0x16>
    while (storage_->GetNextObjectHandle(store)) num++;
    5b1c:	adds	r4, #1
    5b1e:	ldr	r0, [r6, #0]
    5b20:	ldr	r3, [r0, #0]
    5b22:	mov	r1, r5
    5b24:	ldr	r3, [r3, #32]
    5b26:	blx	r3
    5b28:	cmp	r0, #0
    5b2a:	bne.n	5b1c <MTPD::GetNumObjects(unsigned long, unsigned long)+0x14>
    return num;
  }
    5b2c:	mov	r0, r4
    5b2e:	pop	{r4, r5, r6, pc}

00005b30 <MTPD::get_buffer()>:


#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)

//  usb_packet_t *data_buffer_ = NULL;
  void MTPD::get_buffer() {
    5b30:	push	{r4, lr}
    5b32:	mov	r4, r0
    5b34:	ldr	r0, [r4, #4]
    while (!data_buffer_) {
    5b36:	cbnz	r0, 5b40 <MTPD::get_buffer()+0x10>
      data_buffer_ = usb_malloc();
    5b38:	bl	d974 <usb_malloc>
    5b3c:	str	r0, [r4, #4]
      if (!data_buffer_) mtp_yield();
    5b3e:	cbz	r0, 5b42 <MTPD::get_buffer()+0x12>
    5b40:	pop	{r4, pc}
    5b42:	bl	2118 <mtp_yield()>
    5b46:	b.n	5b34 <MTPD::get_buffer()+0x4>

00005b48 <MTPD::write(char const*, int) [clone .part.2]>:
  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
      write_length_ += len;
    } else {
      int pos = 0;
      while (pos < len) {
    5b48:	cmp	r2, #0
    5b4a:	ble.n	5baa <MTPD::write(char const*, int) [clone .part.2]+0x62>
      data_buffer_ = usb_rx(MTP_RX_ENDPOINT);
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    5b4c:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    if (write_get_length_) {
      write_length_ += len;
    } else {
      int pos = 0;
      while (pos < len) {
    5b50:	mov.w	r9, #0
    5b54:	mov	r6, r2
    5b56:	mov	r7, r1
    5b58:	mov	r5, r0
               to_copy);
        data_buffer_->len += to_copy;
        pos += to_copy;
        if (data_buffer_->len == sizeof(data_buffer_->buf)) {
          usb_tx(MTP_TX_ENDPOINT, data_buffer_);
          data_buffer_ = NULL;
    5b5a:	mov	r8, r9
    5b5c:	b.n	5b62 <MTPD::write(char const*, int) [clone .part.2]+0x1a>
  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
      write_length_ += len;
    } else {
      int pos = 0;
      while (pos < len) {
    5b5e:	cmp	r6, r9
    5b60:	ble.n	5ba6 <MTPD::write(char const*, int) [clone .part.2]+0x5e>
        get_buffer();
    5b62:	mov	r0, r5
    5b64:	bl	5b30 <MTPD::get_buffer()>
        int avail = sizeof(data_buffer_->buf) - data_buffer_->len;
    5b68:	ldr	r3, [r5, #4]
    5b6a:	ldrh.w	r0, [r3], #8
    5b6e:	rsb	r2, r9, r6
    5b72:	rsb	r4, r0, #64	; 0x40
    5b76:	cmp	r4, r2
    5b78:	it	ge
    5b7a:	movge	r4, r2
        int to_copy = min(len - pos, avail);
        memcpy(data_buffer_->buf + data_buffer_->len,
               data + pos,
               to_copy);
    5b7c:	add.w	r1, r7, r9
    5b80:	add	r0, r3
    5b82:	mov	r2, r4
    5b84:	bl	cb00 <memcpy>
        data_buffer_->len += to_copy;
    5b88:	ldr	r1, [r5, #4]
    5b8a:	ldrh	r3, [r1, #0]
    5b8c:	add	r3, r4
    5b8e:	uxth	r3, r3
        pos += to_copy;
        if (data_buffer_->len == sizeof(data_buffer_->buf)) {
    5b90:	cmp	r3, #64	; 0x40
        int to_copy = min(len - pos, avail);
        memcpy(data_buffer_->buf + data_buffer_->len,
               data + pos,
               to_copy);
        data_buffer_->len += to_copy;
        pos += to_copy;
    5b92:	add	r9, r4
        int avail = sizeof(data_buffer_->buf) - data_buffer_->len;
        int to_copy = min(len - pos, avail);
        memcpy(data_buffer_->buf + data_buffer_->len,
               data + pos,
               to_copy);
        data_buffer_->len += to_copy;
    5b94:	strh	r3, [r1, #0]
        pos += to_copy;
        if (data_buffer_->len == sizeof(data_buffer_->buf)) {
    5b96:	bne.n	5b5e <MTPD::write(char const*, int) [clone .part.2]+0x16>
          usb_tx(MTP_TX_ENDPOINT, data_buffer_);
    5b98:	movs	r0, #4
    5b9a:	bl	daec <usb_tx>
  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
      write_length_ += len;
    } else {
      int pos = 0;
      while (pos < len) {
    5b9e:	cmp	r6, r9
               to_copy);
        data_buffer_->len += to_copy;
        pos += to_copy;
        if (data_buffer_->len == sizeof(data_buffer_->buf)) {
          usb_tx(MTP_TX_ENDPOINT, data_buffer_);
          data_buffer_ = NULL;
    5ba0:	str.w	r8, [r5, #4]
  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
      write_length_ += len;
    } else {
      int pos = 0;
      while (pos < len) {
    5ba4:	bgt.n	5b62 <MTPD::write(char const*, int) [clone .part.2]+0x1a>
    5ba6:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    5baa:	bx	lr

00005bac <MTPD::writestring(char const*)>:
  void MTPD::write64(uint64_t x) { write((char*)&x, sizeof(x)); }

#define Store2Storage(x) (x+1)
#define Storage2Store(x) (x-1)

  void MTPD::writestring(const char* str) {
    5bac:	push	{r4, r5, lr}
    if (*str) 
    5bae:	ldrb	r3, [r1, #0]
  void MTPD::write64(uint64_t x) { write((char*)&x, sizeof(x)); }

#define Store2Storage(x) (x+1)
#define Storage2Store(x) (x-1)

  void MTPD::writestring(const char* str) {
    5bb0:	sub	sp, #12
    5bb2:	mov	r4, r0
    if (*str) 
    5bb4:	cbz	r3, 5c10 <MTPD::writestring(char const*)+0x64>
    { write8(strlen(str) + 1);
    5bb6:	mov	r0, r1
    5bb8:	mov	r5, r1
    5bba:	bl	10d00 <strlen>
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    5bbe:	ldrb	r1, [r4, #8]
    5bc0:	adds	r0, #1
    5bc2:	strb.w	r0, [sp, #3]
    5bc6:	cbz	r1, 5c22 <MTPD::writestring(char const*)+0x76>
      write_length_ += len;
    5bc8:	ldr	r3, [r4, #12]
    5bca:	adds	r3, #1
    5bcc:	str	r3, [r4, #12]
#define Storage2Store(x) (x-1)

  void MTPD::writestring(const char* str) {
    if (*str) 
    { write8(strlen(str) + 1);
      while (*str) {  write16(*str);  ++str;  } write16(0);
    5bce:	ldrb	r2, [r5, #0]
    5bd0:	cbnz	r2, 5be0 <MTPD::writestring(char const*)+0x34>
    5bd2:	b.n	5c08 <MTPD::writestring(char const*)+0x5c>
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
      write_length_ += len;
    5bd4:	ldr	r3, [r4, #12]
    5bd6:	adds	r3, #2
    5bd8:	str	r3, [r4, #12]
#define Storage2Store(x) (x-1)

  void MTPD::writestring(const char* str) {
    if (*str) 
    { write8(strlen(str) + 1);
      while (*str) {  write16(*str);  ++str;  } write16(0);
    5bda:	ldrb.w	r2, [r5, #1]!
    5bde:	cbz	r2, 5bfe <MTPD::writestring(char const*)+0x52>
    5be0:	strh.w	r2, [sp, #6]
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    5be4:	cmp	r1, #0
    5be6:	bne.n	5bd4 <MTPD::writestring(char const*)+0x28>
    5be8:	movs	r2, #2
    5bea:	add.w	r1, sp, #6
    5bee:	mov	r0, r4
    5bf0:	bl	5b48 <MTPD::write(char const*, int) [clone .part.2]>
#define Storage2Store(x) (x-1)

  void MTPD::writestring(const char* str) {
    if (*str) 
    { write8(strlen(str) + 1);
      while (*str) {  write16(*str);  ++str;  } write16(0);
    5bf4:	ldrb.w	r2, [r5, #1]!
    5bf8:	ldrb	r1, [r4, #8]
    5bfa:	cmp	r2, #0
    5bfc:	bne.n	5be0 <MTPD::writestring(char const*)+0x34>
    5bfe:	movs	r3, #0
    5c00:	strh.w	r3, [sp, #4]
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    5c04:	cbz	r1, 5c46 <MTPD::writestring(char const*)+0x9a>
    5c06:	ldr	r3, [r4, #12]
      write_length_ += len;
    5c08:	adds	r3, #2
    5c0a:	str	r3, [r4, #12]
    { write8(strlen(str) + 1);
      while (*str) {  write16(*str);  ++str;  } write16(0);
    } else 
    { write8(0);
    }
  }
    5c0c:	add	sp, #12
    5c0e:	pop	{r4, r5, pc}
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    5c10:	ldrb	r2, [r0, #8]
    5c12:	strb.w	r3, [sp, #2]
    5c16:	cbz	r2, 5c38 <MTPD::writestring(char const*)+0x8c>
      write_length_ += len;
    5c18:	ldr	r3, [r0, #12]
    5c1a:	adds	r3, #1
    5c1c:	str	r3, [r0, #12]
    { write8(strlen(str) + 1);
      while (*str) {  write16(*str);  ++str;  } write16(0);
    } else 
    { write8(0);
    }
  }
    5c1e:	add	sp, #12
    5c20:	pop	{r4, r5, pc}
    5c22:	movs	r2, #1
    5c24:	add.w	r1, sp, #3
    5c28:	mov	r0, r4
    5c2a:	bl	5b48 <MTPD::write(char const*, int) [clone .part.2]>
#define Storage2Store(x) (x-1)

  void MTPD::writestring(const char* str) {
    if (*str) 
    { write8(strlen(str) + 1);
      while (*str) {  write16(*str);  ++str;  } write16(0);
    5c2e:	ldrb	r2, [r5, #0]
    5c30:	ldrb	r1, [r4, #8]
    5c32:	cmp	r2, #0
    5c34:	bne.n	5be0 <MTPD::writestring(char const*)+0x34>
    5c36:	b.n	5bfe <MTPD::writestring(char const*)+0x52>
    5c38:	movs	r2, #1
    5c3a:	add.w	r1, sp, #2
    5c3e:	bl	5b48 <MTPD::write(char const*, int) [clone .part.2]>
    } else 
    { write8(0);
    }
  }
    5c42:	add	sp, #12
    5c44:	pop	{r4, r5, pc}
    5c46:	mov	r0, r4
    5c48:	movs	r2, #2
    5c4a:	add	r1, sp, #4
    5c4c:	bl	5b48 <MTPD::write(char const*, int) [clone .part.2]>
    5c50:	add	sp, #12
    5c52:	pop	{r4, r5, pc}

00005c54 <MTPD::GetDevicePropDesc(unsigned long) [clone .part.4]>:
        writestring(MTP_NAME);
        break;
    }
  }

  void MTPD::GetDevicePropDesc(uint32_t prop) {
    5c54:	push	{r4, r5, r6, lr}
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    5c56:	ldrb	r3, [r0, #8]
        writestring(MTP_NAME);
        break;
    }
  }

  void MTPD::GetDevicePropDesc(uint32_t prop) {
    5c58:	sub	sp, #8
    5c5a:	mov	r4, r0
    5c5c:	mov	r5, r1
    5c5e:	strh.w	r1, [sp, #4]
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    5c62:	cbz	r3, 5c9c <MTPD::GetDevicePropDesc(unsigned long) [clone .part.4]+0x48>
      write_length_ += len;
    5c64:	ldr	r3, [r0, #12]
    5c66:	movw	r2, #65535	; 0xffff
    5c6a:	adds	r3, #2
    5c6c:	str	r3, [r0, #12]
    5c6e:	strh.w	r2, [sp, #6]
    5c72:	adds	r3, #2
    5c74:	movs	r2, #0
    5c76:	str	r3, [r4, #12]
    5c78:	strb.w	r2, [sp, #2]
    5c7c:	adds	r3, #1
    5c7e:	str	r3, [r4, #12]
      }
    }
  }

  void MTPD::GetDevicePropValue(uint32_t prop) {
    switch (prop) {
    5c80:	movw	r3, #54274	; 0xd402
    5c84:	cmp	r5, r3
    5c86:	beq.n	5cd8 <MTPD::GetDevicePropDesc(unsigned long) [clone .part.4]+0x84>
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    5c88:	ldrb	r3, [r4, #8]
    5c8a:	movs	r2, #0
    5c8c:	strb.w	r2, [sp, #3]
    5c90:	cbz	r3, 5cf4 <MTPD::GetDevicePropDesc(unsigned long) [clone .part.4]+0xa0>
      write_length_ += len;
    5c92:	ldr	r3, [r4, #12]
    5c94:	adds	r3, #1
    5c96:	str	r3, [r4, #12]
        write8(0);       // read-only
        GetDevicePropValue(prop);
        GetDevicePropValue(prop);
        write8(0);       // no form
    }
  }
    5c98:	add	sp, #8
    5c9a:	pop	{r4, r5, r6, pc}
    5c9c:	movs	r2, #2
    5c9e:	add	r1, sp, #4
    5ca0:	bl	5b48 <MTPD::write(char const*, int) [clone .part.2]>
    5ca4:	ldrb	r6, [r4, #8]
    5ca6:	movw	r3, #65535	; 0xffff
    5caa:	strh.w	r3, [sp, #6]
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    5cae:	cbnz	r6, 5d04 <MTPD::GetDevicePropDesc(unsigned long) [clone .part.4]+0xb0>
    5cb0:	movs	r2, #2
    5cb2:	add.w	r1, sp, #6
    5cb6:	mov	r0, r4
    5cb8:	bl	5b48 <MTPD::write(char const*, int) [clone .part.2]>
    5cbc:	ldrb	r3, [r4, #8]
    5cbe:	strb.w	r6, [sp, #2]
    5cc2:	cbnz	r3, 5d08 <MTPD::GetDevicePropDesc(unsigned long) [clone .part.4]+0xb4>
    5cc4:	movs	r2, #1
    5cc6:	add.w	r1, sp, #2
    5cca:	mov	r0, r4
    5ccc:	bl	5b48 <MTPD::write(char const*, int) [clone .part.2]>
      }
    }
  }

  void MTPD::GetDevicePropValue(uint32_t prop) {
    switch (prop) {
    5cd0:	movw	r3, #54274	; 0xd402
    5cd4:	cmp	r5, r3
    5cd6:	bne.n	5c88 <MTPD::GetDevicePropDesc(unsigned long) [clone .part.4]+0x34>
      case 0xd402: // friendly name
        // This is the name we'll actually see in the windows explorer.
        // Should probably be configurable.
        writestring(MTP_NAME);
    5cd8:	ldr	r1, [pc, #48]	; (5d0c <MTPD::GetDevicePropDesc(unsigned long) [clone .part.4]+0xb8>)
    5cda:	mov	r0, r4
    5cdc:	bl	5bac <MTPD::writestring(char const*)>
    5ce0:	ldr	r1, [pc, #40]	; (5d0c <MTPD::GetDevicePropDesc(unsigned long) [clone .part.4]+0xb8>)
    5ce2:	mov	r0, r4
    5ce4:	bl	5bac <MTPD::writestring(char const*)>
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    5ce8:	ldrb	r3, [r4, #8]
    5cea:	movs	r2, #0
    5cec:	strb.w	r2, [sp, #3]
    5cf0:	cmp	r3, #0
    5cf2:	bne.n	5c92 <MTPD::GetDevicePropDesc(unsigned long) [clone .part.4]+0x3e>
    5cf4:	mov	r0, r4
    5cf6:	movs	r2, #1
    5cf8:	add.w	r1, sp, #3
    5cfc:	bl	5b48 <MTPD::write(char const*, int) [clone .part.2]>
        write8(0);       // read-only
        GetDevicePropValue(prop);
        GetDevicePropValue(prop);
        write8(0);       // no form
    }
  }
    5d00:	add	sp, #8
    5d02:	pop	{r4, r5, r6, pc}
    5d04:	ldr	r3, [r4, #12]
    5d06:	b.n	5c72 <MTPD::GetDevicePropDesc(unsigned long) [clone .part.4]+0x1e>
    5d08:	ldr	r3, [r4, #12]
    5d0a:	b.n	5c7c <MTPD::GetDevicePropDesc(unsigned long) [clone .part.4]+0x28>
    5d0c:	.word	0x000144fc

00005d10 <MTPD::WriteDescriptor()>:
    } else 
    { write8(0);
    }
  }

  void MTPD::WriteDescriptor() {
    5d10:	push	{r4, r5, r6, r7, lr}
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    5d12:	ldrb	r3, [r0, #8]
    } else 
    { write8(0);
    }
  }

  void MTPD::WriteDescriptor() {
    5d14:	sub	sp, #68	; 0x44
    5d16:	movs	r5, #100	; 0x64
    5d18:	mov	r4, r0
    5d1a:	strh.w	r5, [sp, #8]
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    5d1e:	cmp	r3, #0
    5d20:	beq.w	5e6e <MTPD::WriteDescriptor()+0x15e>
      write_length_ += len;
    5d24:	ldr	r3, [r0, #12]
    5d26:	movs	r2, #6
    5d28:	adds	r3, #2
    5d2a:	str	r3, [r0, #12]
    5d2c:	str	r2, [sp, #24]
    5d2e:	adds	r3, #4
    5d30:	movs	r2, #100	; 0x64
    5d32:	str	r3, [r4, #12]
    5d34:	strh.w	r2, [sp, #6]
    5d38:	adds	r3, #2
    5d3a:	str	r3, [r4, #12]
  void MTPD::WriteDescriptor() {
    write16(100);  // MTP version
    write32(6);    // MTP extension
//    write32(0xFFFFFFFFUL);    // MTP extension
    write16(100);  // MTP version
    writestring("microsoft.com: 1.0;");
    5d3c:	ldr	r1, [pc, #552]	; (5f68 <MTPD::WriteDescriptor()+0x258>)
    5d3e:	mov	r0, r4
    5d40:	bl	5bac <MTPD::writestring(char const*)>
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    5d44:	ldrb	r3, [r4, #8]
    5d46:	movs	r2, #0
    5d48:	strh.w	r2, [sp, #4]
    5d4c:	cmp	r3, #0
    5d4e:	beq.w	5f28 <MTPD::WriteDescriptor()+0x218>
      write_length_ += len;
    5d52:	ldr	r3, [r4, #12]
    5d54:	movs	r2, #20
    5d56:	adds	r3, #2
    5d58:	str	r3, [r4, #12]
    5d5a:	str	r2, [sp, #20]
    5d5c:	adds	r3, #4
    5d5e:	str	r3, [r4, #12]
    5d60:	movs	r6, #1
    5d62:	ldr	r5, [pc, #520]	; (5f6c <MTPD::WriteDescriptor()+0x25c>)
    5d64:	movw	r3, #4097	; 0x1001
    5d68:	add.w	r7, r5, #38	; 0x26
    5d6c:	b.n	5d7e <MTPD::WriteDescriptor()+0x6e>
    5d6e:	ldr	r3, [r4, #12]
    writestring("microsoft.com: 1.0;");
    write16(0);    // functional mode

    // Supported operations (array of uint16)
    write32(supported_op_num);
    for(int ii=0; ii<supported_op_num;ii++) write16(supported_op[ii]);
    5d70:	cmp	r5, r7
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
      write_length_ += len;
    5d72:	add.w	r3, r3, #2
    5d76:	str	r3, [r4, #12]
    writestring("microsoft.com: 1.0;");
    write16(0);    // functional mode

    // Supported operations (array of uint16)
    write32(supported_op_num);
    for(int ii=0; ii<supported_op_num;ii++) write16(supported_op[ii]);
    5d78:	beq.n	5d98 <MTPD::WriteDescriptor()+0x88>
    5d7a:	ldrh.w	r3, [r5, #2]!
    5d7e:	strh.w	r3, [sp, #10]
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    5d82:	cmp	r6, #0
    5d84:	bne.n	5d6e <MTPD::WriteDescriptor()+0x5e>
    5d86:	movs	r2, #2
    5d88:	add.w	r1, sp, #10
    5d8c:	mov	r0, r4
    5d8e:	bl	5b48 <MTPD::write(char const*, int) [clone .part.2]>
    writestring("microsoft.com: 1.0;");
    write16(0);    // functional mode

    // Supported operations (array of uint16)
    write32(supported_op_num);
    for(int ii=0; ii<supported_op_num;ii++) write16(supported_op[ii]);
    5d92:	cmp	r5, r7
    5d94:	ldrb	r6, [r4, #8]
    5d96:	bne.n	5d7a <MTPD::WriteDescriptor()+0x6a>
    5d98:	movs	r2, #4
    5d9a:	str	r2, [sp, #28]
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    5d9c:	cmp	r6, #0
    5d9e:	beq.w	5f1c <MTPD::WriteDescriptor()+0x20c>
      write_length_ += len;
    5da2:	ldr	r3, [r4, #12]
    5da4:	adds	r3, #4
    5da6:	str	r3, [r4, #12]
    5da8:	ldr	r5, [pc, #452]	; (5f70 <MTPD::WriteDescriptor()+0x260>)
    5daa:	movw	r3, #16388	; 0x4004
    5dae:	adds	r7, r5, #6
    5db0:	strh.w	r3, [sp, #12]
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    5db4:	cbz	r6, 5dce <MTPD::WriteDescriptor()+0xbe>
      write_length_ += len;
    5db6:	ldr	r3, [r4, #12]
    write32(supported_op_num);
    for(int ii=0; ii<supported_op_num;ii++) write16(supported_op[ii]);
    
    // Events (array of uint16)
    write32(supported_event_num);      
    for(int ii=0; ii<supported_event_num;ii++) write16(supported_events[ii]);
    5db8:	cmp	r7, r5
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
      write_length_ += len;
    5dba:	add.w	r3, r3, #2
    5dbe:	str	r3, [r4, #12]
    write32(supported_op_num);
    for(int ii=0; ii<supported_op_num;ii++) write16(supported_op[ii]);
    
    // Events (array of uint16)
    write32(supported_event_num);      
    for(int ii=0; ii<supported_event_num;ii++) write16(supported_events[ii]);
    5dc0:	beq.n	5dde <MTPD::WriteDescriptor()+0xce>
    5dc2:	ldrh.w	r3, [r5, #2]!
    5dc6:	strh.w	r3, [sp, #12]
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    5dca:	cmp	r6, #0
    5dcc:	bne.n	5db6 <MTPD::WriteDescriptor()+0xa6>
    5dce:	movs	r2, #2
    5dd0:	add	r1, sp, #12
    5dd2:	mov	r0, r4
    5dd4:	bl	5b48 <MTPD::write(char const*, int) [clone .part.2]>
    write32(supported_op_num);
    for(int ii=0; ii<supported_op_num;ii++) write16(supported_op[ii]);
    
    // Events (array of uint16)
    write32(supported_event_num);      
    for(int ii=0; ii<supported_event_num;ii++) write16(supported_events[ii]);
    5dd8:	cmp	r7, r5
    5dda:	ldrb	r6, [r4, #8]
    5ddc:	bne.n	5dc2 <MTPD::WriteDescriptor()+0xb2>
    5dde:	movs	r3, #1
    5de0:	str	r3, [sp, #40]	; 0x28
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    5de2:	cmp	r6, #0
    5de4:	beq.n	5ea2 <MTPD::WriteDescriptor()+0x192>
      write_length_ += len;
    5de6:	ldr	r3, [r4, #12]
    5de8:	movw	r2, #54274	; 0xd402
    5dec:	adds	r3, #4
    5dee:	str	r3, [r4, #12]
    5df0:	strh.w	r2, [sp, #18]
    5df4:	adds	r3, #2
    5df6:	movs	r2, #0
    5df8:	str	r3, [r4, #12]
    5dfa:	str	r2, [sp, #36]	; 0x24
    5dfc:	adds	r3, #4
    5dfe:	movs	r2, #2
    5e00:	str	r3, [r4, #12]
    5e02:	str	r2, [sp, #32]
    5e04:	adds	r3, #4
    5e06:	mov.w	r2, #12288	; 0x3000
    5e0a:	str	r3, [r4, #12]
    5e0c:	strh.w	r2, [sp, #16]
    5e10:	adds	r3, #2
    5e12:	movw	r2, #12289	; 0x3001
    5e16:	str	r3, [r4, #12]
    5e18:	strh.w	r2, [sp, #14]
    5e1c:	adds	r3, #2
    5e1e:	str	r3, [r4, #12]

    write32(2);       // Playback formats (array of uint16)
    write16(0x3000);  // Undefined format
    write16(0x3001);  // Folders (associations)

    writestring(MTP_MANUF);     // Manufacturer
    5e20:	ldr	r1, [pc, #336]	; (5f74 <MTPD::WriteDescriptor()+0x264>)
    5e22:	mov	r0, r4
    5e24:	bl	5bac <MTPD::writestring(char const*)>
    writestring(MTP_MODEL);     // Model
    5e28:	ldr	r1, [pc, #332]	; (5f78 <MTPD::WriteDescriptor()+0x268>)
    5e2a:	mov	r0, r4
    5e2c:	bl	5bac <MTPD::writestring(char const*)>
    //writestring(MTP_VERS);      // version
    //writestring(MTP_SERNR);     // serial
    
    char buf[20];    
    dtostrf( (float)(TEENSYDUINO / 100.0f), 3, 2, buf);
    5e30:	add	r3, sp, #44	; 0x2c
    5e32:	movs	r2, #2
    5e34:	movs	r1, #3
    5e36:	ldr	r0, [pc, #324]	; (5f7c <MTPD::WriteDescriptor()+0x26c>)
    5e38:	bl	d1bc <dtostrf>
    strlcat(buf, " / MTP " MTP_VERS, sizeof(buf) );
    5e3c:	movs	r2, #20
    5e3e:	ldr	r1, [pc, #320]	; (5f80 <MTPD::WriteDescriptor()+0x270>)
    5e40:	add	r0, sp, #44	; 0x2c
    5e42:	bl	10c7c <strlcat>
    writestring( buf );    
    5e46:	mov	r0, r4
    5e48:	add	r1, sp, #44	; 0x2c
    5e4a:	bl	5bac <MTPD::writestring(char const*)>
    5e4e:	ldr	r2, [pc, #308]	; (5f84 <MTPD::WriteDescriptor()+0x274>)
    5e50:	add	r3, sp, #44	; 0x2c
    5e52:	add.w	r0, sp, #54	; 0x36
    #pragma GCC diagnostic push
    #pragma GCC diagnostic ignored "-Warray-bounds"
    for (size_t i=0; i<10; i++) buf[i] = usb_string_serial_number.wString[i];
    5e56:	ldrh.w	r1, [r2, #2]!
    5e5a:	strb.w	r1, [r3], #1
    5e5e:	cmp	r3, r0
    5e60:	bne.n	5e56 <MTPD::WriteDescriptor()+0x146>
    #pragma GCC diagnostic pop
    writestring(buf);    
    5e62:	add	r1, sp, #44	; 0x2c
    5e64:	mov	r0, r4
    5e66:	bl	5bac <MTPD::writestring(char const*)>
  }
    5e6a:	add	sp, #68	; 0x44
    5e6c:	pop	{r4, r5, r6, r7, pc}
    5e6e:	movs	r2, #2
    5e70:	add	r1, sp, #8
    5e72:	bl	5b48 <MTPD::write(char const*, int) [clone .part.2]>
    5e76:	ldrb	r3, [r4, #8]
    5e78:	movs	r2, #6
    5e7a:	str	r2, [sp, #24]
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    5e7c:	cmp	r3, #0
    5e7e:	bne.n	5f48 <MTPD::WriteDescriptor()+0x238>
    5e80:	movs	r2, #4
    5e82:	add	r1, sp, #24
    5e84:	mov	r0, r4
    5e86:	bl	5b48 <MTPD::write(char const*, int) [clone .part.2]>
    5e8a:	ldrb	r3, [r4, #8]
    5e8c:	strh.w	r5, [sp, #6]
    5e90:	cmp	r3, #0
    5e92:	bne.n	5f4c <MTPD::WriteDescriptor()+0x23c>
    5e94:	movs	r2, #2
    5e96:	add.w	r1, sp, #6
    5e9a:	mov	r0, r4
    5e9c:	bl	5b48 <MTPD::write(char const*, int) [clone .part.2]>
    5ea0:	b.n	5d3c <MTPD::WriteDescriptor()+0x2c>
    5ea2:	movs	r2, #4
    5ea4:	add	r1, sp, #40	; 0x28
    5ea6:	mov	r0, r4
    5ea8:	bl	5b48 <MTPD::write(char const*, int) [clone .part.2]>
    5eac:	ldrb	r3, [r4, #8]
    5eae:	movw	r2, #54274	; 0xd402
    5eb2:	strh.w	r2, [sp, #18]
    5eb6:	cmp	r3, #0
    5eb8:	bne.n	5f50 <MTPD::WriteDescriptor()+0x240>
    5eba:	movs	r2, #2
    5ebc:	add.w	r1, sp, #18
    5ec0:	mov	r0, r4
    5ec2:	bl	5b48 <MTPD::write(char const*, int) [clone .part.2]>
    5ec6:	ldrb	r3, [r4, #8]
    5ec8:	str	r6, [sp, #36]	; 0x24
    5eca:	cmp	r3, #0
    5ecc:	bne.n	5f54 <MTPD::WriteDescriptor()+0x244>
    5ece:	movs	r2, #4
    5ed0:	add	r1, sp, #36	; 0x24
    5ed2:	mov	r0, r4
    5ed4:	bl	5b48 <MTPD::write(char const*, int) [clone .part.2]>
    5ed8:	ldrb	r3, [r4, #8]
    5eda:	movs	r5, #2
    5edc:	str	r5, [sp, #32]
    5ede:	cmp	r3, #0
    5ee0:	bne.n	5f58 <MTPD::WriteDescriptor()+0x248>
    5ee2:	movs	r2, #4
    5ee4:	add	r1, sp, #32
    5ee6:	mov	r0, r4
    5ee8:	bl	5b48 <MTPD::write(char const*, int) [clone .part.2]>
    5eec:	ldrb	r3, [r4, #8]
    5eee:	mov.w	r2, #12288	; 0x3000
    5ef2:	strh.w	r2, [sp, #16]
    5ef6:	cbnz	r3, 5f5c <MTPD::WriteDescriptor()+0x24c>
    5ef8:	mov	r2, r5
    5efa:	add	r1, sp, #16
    5efc:	mov	r0, r4
    5efe:	bl	5b48 <MTPD::write(char const*, int) [clone .part.2]>
    5f02:	ldrb	r3, [r4, #8]
    5f04:	movw	r2, #12289	; 0x3001
    5f08:	strh.w	r2, [sp, #14]
    5f0c:	cbnz	r3, 5f60 <MTPD::WriteDescriptor()+0x250>
    5f0e:	mov	r2, r5
    5f10:	add.w	r1, sp, #14
    5f14:	mov	r0, r4
    5f16:	bl	5b48 <MTPD::write(char const*, int) [clone .part.2]>
    5f1a:	b.n	5e20 <MTPD::WriteDescriptor()+0x110>
    5f1c:	add	r1, sp, #28
    5f1e:	mov	r0, r4
    5f20:	bl	5b48 <MTPD::write(char const*, int) [clone .part.2]>
    5f24:	ldrb	r6, [r4, #8]
    5f26:	b.n	5da8 <MTPD::WriteDescriptor()+0x98>
    5f28:	movs	r2, #2
    5f2a:	add	r1, sp, #4
    5f2c:	mov	r0, r4
    5f2e:	bl	5b48 <MTPD::write(char const*, int) [clone .part.2]>
    5f32:	ldrb	r3, [r4, #8]
    5f34:	movs	r2, #20
    5f36:	str	r2, [sp, #20]
    5f38:	cbnz	r3, 5f64 <MTPD::WriteDescriptor()+0x254>
    5f3a:	movs	r2, #4
    5f3c:	add	r1, sp, #20
    5f3e:	mov	r0, r4
    5f40:	bl	5b48 <MTPD::write(char const*, int) [clone .part.2]>
    5f44:	ldrb	r6, [r4, #8]
    5f46:	b.n	5d62 <MTPD::WriteDescriptor()+0x52>
    5f48:	ldr	r3, [r4, #12]
    5f4a:	b.n	5d2e <MTPD::WriteDescriptor()+0x1e>
    5f4c:	ldr	r3, [r4, #12]
    5f4e:	b.n	5d38 <MTPD::WriteDescriptor()+0x28>
    5f50:	ldr	r3, [r4, #12]
    5f52:	b.n	5df4 <MTPD::WriteDescriptor()+0xe4>
    5f54:	ldr	r3, [r4, #12]
    5f56:	b.n	5dfc <MTPD::WriteDescriptor()+0xec>
    5f58:	ldr	r3, [r4, #12]
    5f5a:	b.n	5e04 <MTPD::WriteDescriptor()+0xf4>
    5f5c:	ldr	r3, [r4, #12]
    5f5e:	b.n	5e10 <MTPD::WriteDescriptor()+0x100>
    5f60:	ldr	r3, [r4, #12]
    5f62:	b.n	5e1c <MTPD::WriteDescriptor()+0x10c>
    5f64:	ldr	r3, [r4, #12]
    5f66:	b.n	5d5c <MTPD::WriteDescriptor()+0x4c>
    5f68:	.word	0x00014504
    5f6c:	.word	0x000144c4
    5f70:	.word	0x00014548
    5f74:	.word	0x00014518
    5f78:	.word	0x000144fc
    5f7c:	.word	0x3fc51eb8
    5f80:	.word	0x00014520
    5f84:	.word	0x1fff8c50

00005f88 <MTPD::WriteStorageIDs()>:
    for (size_t i=0; i<10; i++) buf[i] = usb_string_serial_number.wString[i];
    #pragma GCC diagnostic pop
    writestring(buf);    
  }

  void MTPD::WriteStorageIDs() {
    5f88:	push	{r4, r5, r6, lr}
    5f8a:	mov	r5, r0
    uint32_t num=storage_->get_FSCount();
    5f8c:	ldr	r0, [r0, #0]
    5f8e:	ldr	r2, [pc, #92]	; (5fec <MTPD::WriteStorageIDs()+0x64>)
    5f90:	ldr	r3, [r0, #0]
    5f92:	ldr	r3, [r3, #4]
    5f94:	cmp	r3, r2
    for (size_t i=0; i<10; i++) buf[i] = usb_string_serial_number.wString[i];
    #pragma GCC diagnostic pop
    writestring(buf);    
  }

  void MTPD::WriteStorageIDs() {
    5f96:	sub	sp, #8
    5f98:	bne.n	5fe4 <MTPD::WriteStorageIDs()+0x5c>
    {
      for(int ii=0; ii<fsCount;ii++) if(!strcmp(name,sd_name[ii])) return ii;
      return 0xFFFFFFFFUL;
    }

    uint32_t sd_getFSCount(void) {return fsCount;}
    5f9a:	ldr	r6, [r0, #4]
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    5f9c:	ldrb	r3, [r5, #8]
    5f9e:	str	r6, [sp, #0]
    5fa0:	cbz	r3, 5fd8 <MTPD::WriteStorageIDs()+0x50>
      write_length_ += len;
    5fa2:	ldr	r3, [r5, #12]
    5fa4:	adds	r3, #4
    5fa6:	str	r3, [r5, #12]
  }

  void MTPD::WriteStorageIDs() {
    uint32_t num=storage_->get_FSCount();
    write32(num); // number of storages (disks)
    for(uint32_t ii=0;ii<num;ii++)  write32(Store2Storage(ii)); // storage id
    5fa8:	cbz	r6, 5fd4 <MTPD::WriteStorageIDs()+0x4c>
    5faa:	movs	r4, #0
    5fac:	b.n	5fba <MTPD::WriteStorageIDs()+0x32>
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
      write_length_ += len;
    5fae:	ldr	r3, [r5, #12]
  }

  void MTPD::WriteStorageIDs() {
    uint32_t num=storage_->get_FSCount();
    write32(num); // number of storages (disks)
    for(uint32_t ii=0;ii<num;ii++)  write32(Store2Storage(ii)); // storage id
    5fb0:	cmp	r6, r4
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
      write_length_ += len;
    5fb2:	add.w	r3, r3, #4
    5fb6:	str	r3, [r5, #12]
  }

  void MTPD::WriteStorageIDs() {
    uint32_t num=storage_->get_FSCount();
    write32(num); // number of storages (disks)
    for(uint32_t ii=0;ii<num;ii++)  write32(Store2Storage(ii)); // storage id
    5fb8:	beq.n	5fd4 <MTPD::WriteStorageIDs()+0x4c>
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    5fba:	ldrb	r3, [r5, #8]
  }

  void MTPD::WriteStorageIDs() {
    uint32_t num=storage_->get_FSCount();
    write32(num); // number of storages (disks)
    for(uint32_t ii=0;ii<num;ii++)  write32(Store2Storage(ii)); // storage id
    5fbc:	adds	r4, #1
    5fbe:	str	r4, [sp, #4]
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    5fc0:	cmp	r3, #0
    5fc2:	bne.n	5fae <MTPD::WriteStorageIDs()+0x26>
    5fc4:	movs	r2, #4
    5fc6:	add.w	r1, sp, r2
    5fca:	mov	r0, r5
    5fcc:	bl	5b48 <MTPD::write(char const*, int) [clone .part.2]>
  }

  void MTPD::WriteStorageIDs() {
    uint32_t num=storage_->get_FSCount();
    write32(num); // number of storages (disks)
    for(uint32_t ii=0;ii<num;ii++)  write32(Store2Storage(ii)); // storage id
    5fd0:	cmp	r6, r4
    5fd2:	bne.n	5fba <MTPD::WriteStorageIDs()+0x32>
  }
    5fd4:	add	sp, #8
    5fd6:	pop	{r4, r5, r6, pc}
    5fd8:	movs	r2, #4
    5fda:	mov	r1, sp
    5fdc:	mov	r0, r5
    5fde:	bl	5b48 <MTPD::write(char const*, int) [clone .part.2]>
    5fe2:	b.n	5fa8 <MTPD::WriteStorageIDs()+0x20>
    #pragma GCC diagnostic pop
    writestring(buf);    
  }

  void MTPD::WriteStorageIDs() {
    uint32_t num=storage_->get_FSCount();
    5fe4:	blx	r3
    5fe6:	mov	r6, r0
    5fe8:	b.n	5f9c <MTPD::WriteStorageIDs()+0x14>
    5fea:	nop
    5fec:	.word	0x00001e39

00005ff0 <MTPD::GetObjectHandles(unsigned long, unsigned long)>:
    while (storage_->GetNextObjectHandle(store)) num++;
    return num;
  }

  void MTPD::GetObjectHandles(uint32_t storage, uint32_t parent) 
  { uint32_t store = Storage2Store(storage);
    5ff0:	push	{r4, r5, r6, lr}
    if (write_get_length_) {
    5ff2:	ldrb	r3, [r0, #8]
    while (storage_->GetNextObjectHandle(store)) num++;
    return num;
  }

  void MTPD::GetObjectHandles(uint32_t storage, uint32_t parent) 
  { uint32_t store = Storage2Store(storage);
    5ff4:	sub	sp, #8
    5ff6:	mov	r4, r0
    if (write_get_length_) {
    5ff8:	cbnz	r3, 6044 <MTPD::GetObjectHandles(unsigned long, unsigned long)+0x54>
    5ffa:	mov	r5, r1
    5ffc:	mov	r6, r2
      write_length_ = GetNumObjects(storage, parent);
      write_length_++;
      write_length_ *= 4;
    }
    else{
      write32(GetNumObjects(storage, parent));
    5ffe:	bl	5b08 <MTPD::GetNumObjects(unsigned long, unsigned long)>
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    6002:	ldrb	r3, [r4, #8]
    6004:	str	r0, [sp, #0]
    6006:	cbz	r3, 6052 <MTPD::GetObjectHandles(unsigned long, unsigned long)+0x62>
      write_length_ += len;
    6008:	ldr	r3, [r4, #12]
    600a:	adds	r3, #4
    600c:	str	r3, [r4, #12]
      write_length_ *= 4;
    }
    else{
      write32(GetNumObjects(storage, parent));
      int handle;
      storage_->StartGetObjectHandles(store, parent);
    600e:	ldr	r0, [r4, #0]
    6010:	ldr	r3, [r0, #0]
    while (storage_->GetNextObjectHandle(store)) num++;
    return num;
  }

  void MTPD::GetObjectHandles(uint32_t storage, uint32_t parent) 
  { uint32_t store = Storage2Store(storage);
    6012:	subs	r5, #1
      write_length_ *= 4;
    }
    else{
      write32(GetNumObjects(storage, parent));
      int handle;
      storage_->StartGetObjectHandles(store, parent);
    6014:	mov	r2, r6
    6016:	ldr	r3, [r3, #28]
    6018:	mov	r1, r5
    601a:	blx	r3
      while ((handle = storage_->GetNextObjectHandle(store))) write32(handle);
    601c:	ldr	r0, [r4, #0]
    601e:	ldr	r3, [r0, #0]
    6020:	mov	r1, r5
    6022:	ldr	r3, [r3, #32]
    6024:	blx	r3
    6026:	cbz	r0, 604e <MTPD::GetObjectHandles(unsigned long, unsigned long)+0x5e>
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    6028:	ldrb	r3, [r4, #8]
    602a:	str	r0, [sp, #4]
    602c:	cbz	r3, 6036 <MTPD::GetObjectHandles(unsigned long, unsigned long)+0x46>
      write_length_ += len;
    602e:	ldr	r3, [r4, #12]
    6030:	adds	r3, #4
    6032:	str	r3, [r4, #12]
    6034:	b.n	601c <MTPD::GetObjectHandles(unsigned long, unsigned long)+0x2c>
    6036:	movs	r2, #4
    6038:	add.w	r1, sp, r2
    603c:	mov	r0, r4
    603e:	bl	5b48 <MTPD::write(char const*, int) [clone .part.2]>
    6042:	b.n	601c <MTPD::GetObjectHandles(unsigned long, unsigned long)+0x2c>
  }

  void MTPD::GetObjectHandles(uint32_t storage, uint32_t parent) 
  { uint32_t store = Storage2Store(storage);
    if (write_get_length_) {
      write_length_ = GetNumObjects(storage, parent);
    6044:	bl	5b08 <MTPD::GetNumObjects(unsigned long, unsigned long)>
      write_length_++;
      write_length_ *= 4;
    6048:	adds	r0, #1
    604a:	lsls	r0, r0, #2
    604c:	str	r0, [r4, #12]
      write32(GetNumObjects(storage, parent));
      int handle;
      storage_->StartGetObjectHandles(store, parent);
      while ((handle = storage_->GetNextObjectHandle(store))) write32(handle);
    }
  }
    604e:	add	sp, #8
    6050:	pop	{r4, r5, r6, pc}
    6052:	movs	r2, #4
    6054:	mov	r1, sp
    6056:	mov	r0, r4
    6058:	bl	5b48 <MTPD::write(char const*, int) [clone .part.2]>
    605c:	b.n	600e <MTPD::GetObjectHandles(unsigned long, unsigned long)+0x1e>
    605e:	nop

00006060 <MTPD::GetObjectInfo(unsigned long)>:
  
  void MTPD::GetObjectInfo(uint32_t handle) 
  {
    6060:	push	{r4, r5, r6, r7, lr}
    6062:	mov	r4, r0
    6064:	sub	sp, #332	; 0x14c
    char filename[MAX_FILENAME_LEN];
    uint32_t size, parent;
    uint16_t store;
    storage_->GetObjectInfo(handle, filename, &size, &parent, &store);
    6066:	ldr	r0, [r0, #0]
    6068:	add.w	r6, sp, #10
    606c:	add	r5, sp, #24
    606e:	ldr	r3, [r0, #0]
    6070:	stmia.w	sp, {r5, r6}
    6074:	add	r2, sp, #72	; 0x48
    6076:	ldr	r7, [r3, #36]	; 0x24
    6078:	add	r3, sp, #20
    607a:	blx	r7
    607c:	ldrh	r3, [r6, #0]
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    607e:	ldrb	r2, [r4, #8]
    6080:	adds	r3, #1
    6082:	str	r3, [sp, #28]
    6084:	cmp	r2, #0
    6086:	beq.n	613c <MTPD::GetObjectInfo(unsigned long)+0xdc>
      write_length_ += len;
    6088:	ldr	r3, [r4, #12]
    uint16_t store;
    storage_->GetObjectInfo(handle, filename, &size, &parent, &store);

    uint32_t storage = Store2Storage(store);
    write32(storage); // storage
    write16(size == 0xFFFFFFFFUL ? 0x3001 : 0x0000); // format
    608a:	ldr	r2, [sp, #20]
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
      write_length_ += len;
    608c:	adds	r3, #4
    uint16_t store;
    storage_->GetObjectInfo(handle, filename, &size, &parent, &store);

    uint32_t storage = Store2Storage(store);
    write32(storage); // storage
    write16(size == 0xFFFFFFFFUL ? 0x3001 : 0x0000); // format
    608e:	adds	r2, #1
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
      write_length_ += len;
    6090:	str	r3, [r4, #12]
    uint16_t store;
    storage_->GetObjectInfo(handle, filename, &size, &parent, &store);

    uint32_t storage = Store2Storage(store);
    write32(storage); // storage
    write16(size == 0xFFFFFFFFUL ? 0x3001 : 0x0000); // format
    6092:	beq.w	626c <MTPD::GetObjectInfo(unsigned long)+0x20c>
    6096:	movs	r2, #0
    6098:	strh.w	r2, [sp, #16]
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
      write_length_ += len;
    609c:	adds	r3, #2
    609e:	movs	r2, #0
    60a0:	str	r3, [r4, #12]
    60a2:	strh.w	r2, [sp, #14]
    60a6:	adds	r3, #2
    60a8:	ldr	r2, [sp, #20]
    60aa:	str	r3, [r4, #12]
    60ac:	str	r2, [sp, #60]	; 0x3c
    60ae:	adds	r3, #4
    60b0:	movs	r2, #0
    60b2:	str	r3, [r4, #12]
    60b4:	strh.w	r2, [sp, #12]
    60b8:	adds	r3, #2
    60ba:	movs	r2, #0
    60bc:	str	r3, [r4, #12]
    60be:	str	r2, [sp, #56]	; 0x38
    60c0:	adds	r3, #4
    60c2:	movs	r2, #0
    60c4:	str	r3, [r4, #12]
    60c6:	str	r2, [sp, #52]	; 0x34
    60c8:	adds	r3, #4
    60ca:	movs	r2, #0
    60cc:	str	r3, [r4, #12]
    60ce:	str	r2, [sp, #48]	; 0x30
    60d0:	adds	r3, #4
    60d2:	movs	r2, #0
    60d4:	str	r3, [r4, #12]
    60d6:	str	r2, [sp, #44]	; 0x2c
    60d8:	adds	r3, #4
    60da:	movs	r2, #0
    60dc:	str	r3, [r4, #12]
    60de:	str	r2, [sp, #40]	; 0x28
    60e0:	adds	r3, #4
    60e2:	movs	r2, #0
    60e4:	str	r3, [r4, #12]
    60e6:	str	r2, [sp, #36]	; 0x24
    60e8:	adds	r3, #4
    60ea:	ldr	r2, [r5, #0]
    60ec:	str	r3, [r4, #12]
    60ee:	str	r2, [sp, #32]
    60f0:	ldr	r2, [sp, #20]
    60f2:	sub.w	r2, r2, #4294967295
    60f6:	clz	r2, r2
    60fa:	lsrs	r2, r2, #5
    60fc:	adds	r3, #4
    60fe:	str	r3, [r4, #12]
    6100:	strh.w	r2, [sp, #18]
    6104:	adds	r3, #2
    6106:	movs	r2, #0
    6108:	str	r3, [r4, #12]
    610a:	str	r2, [sp, #68]	; 0x44
    610c:	adds	r3, #4
    610e:	movs	r2, #0
    6110:	str	r3, [r4, #12]
    6112:	str	r2, [sp, #64]	; 0x40
    6114:	adds	r3, #4
    6116:	str	r3, [r4, #12]
    write32(0); // bit depth
    write32(parent); // parent
    write16(size == 0xFFFFFFFFUL ? 1 : 0); // association type
    write32(0); // association description
    write32(0);  // sequence number
    writestring(filename);
    6118:	add	r1, sp, #72	; 0x48
    611a:	mov	r0, r4
    611c:	bl	5bac <MTPD::writestring(char const*)>
    writestring("");  // date created
    6120:	mov	r0, r4
    6122:	ldr	r1, [pc, #396]	; (62b0 <MTPD::GetObjectInfo(unsigned long)+0x250>)
    6124:	bl	5bac <MTPD::writestring(char const*)>
    writestring("");  // date modified
    6128:	mov	r0, r4
    612a:	ldr	r1, [pc, #388]	; (62b0 <MTPD::GetObjectInfo(unsigned long)+0x250>)
    612c:	bl	5bac <MTPD::writestring(char const*)>
    writestring("");  // keywords
    6130:	mov	r0, r4
    6132:	ldr	r1, [pc, #380]	; (62b0 <MTPD::GetObjectInfo(unsigned long)+0x250>)
    6134:	bl	5bac <MTPD::writestring(char const*)>
  }
    6138:	add	sp, #332	; 0x14c
    613a:	pop	{r4, r5, r6, r7, pc}
    613c:	add	r1, sp, #28
    613e:	movs	r2, #4
    6140:	mov	r0, r4
    6142:	bl	5b48 <MTPD::write(char const*, int) [clone .part.2]>
    uint16_t store;
    storage_->GetObjectInfo(handle, filename, &size, &parent, &store);

    uint32_t storage = Store2Storage(store);
    write32(storage); // storage
    write16(size == 0xFFFFFFFFUL ? 0x3001 : 0x0000); // format
    6146:	ldr	r3, [sp, #20]
    6148:	ldrb	r6, [r4, #8]
    614a:	adds	r3, #1
    614c:	movw	r3, #12289	; 0x3001
    6150:	it	ne
    6152:	movne	r3, #0
    6154:	strh.w	r3, [sp, #16]
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    6158:	cmp	r6, #0
    615a:	bne.w	627e <MTPD::GetObjectInfo(unsigned long)+0x21e>
    615e:	add	r1, sp, #16
    6160:	movs	r2, #2
    6162:	mov	r0, r4
    6164:	bl	5b48 <MTPD::write(char const*, int) [clone .part.2]>
    6168:	ldrb	r3, [r4, #8]
    616a:	strh.w	r6, [sp, #14]
    616e:	cmp	r3, #0
    6170:	bne.w	6282 <MTPD::GetObjectInfo(unsigned long)+0x222>
    6174:	movs	r2, #2
    6176:	add.w	r1, sp, #14
    617a:	mov	r0, r4
    617c:	bl	5b48 <MTPD::write(char const*, int) [clone .part.2]>
    6180:	ldrb	r3, [r4, #8]
    6182:	ldr	r2, [sp, #20]
    6184:	str	r2, [sp, #60]	; 0x3c
    6186:	cmp	r3, #0
    6188:	bne.n	6286 <MTPD::GetObjectInfo(unsigned long)+0x226>
    618a:	add	r1, sp, #60	; 0x3c
    618c:	movs	r2, #4
    618e:	mov	r0, r4
    6190:	bl	5b48 <MTPD::write(char const*, int) [clone .part.2]>
    6194:	ldrb	r3, [r4, #8]
    6196:	strh.w	r6, [sp, #12]
    619a:	cmp	r3, #0
    619c:	bne.n	628a <MTPD::GetObjectInfo(unsigned long)+0x22a>
    619e:	add	r1, sp, #12
    61a0:	movs	r2, #2
    61a2:	mov	r0, r4
    61a4:	bl	5b48 <MTPD::write(char const*, int) [clone .part.2]>
    61a8:	ldrb	r3, [r4, #8]
    61aa:	str	r6, [sp, #56]	; 0x38
    61ac:	cmp	r3, #0
    61ae:	bne.n	628e <MTPD::GetObjectInfo(unsigned long)+0x22e>
    61b0:	add	r1, sp, #56	; 0x38
    61b2:	movs	r2, #4
    61b4:	mov	r0, r4
    61b6:	bl	5b48 <MTPD::write(char const*, int) [clone .part.2]>
    61ba:	ldrb	r3, [r4, #8]
    61bc:	str	r6, [sp, #52]	; 0x34
    61be:	cmp	r3, #0
    61c0:	bne.n	6292 <MTPD::GetObjectInfo(unsigned long)+0x232>
    61c2:	add	r1, sp, #52	; 0x34
    61c4:	movs	r2, #4
    61c6:	mov	r0, r4
    61c8:	bl	5b48 <MTPD::write(char const*, int) [clone .part.2]>
    61cc:	ldrb	r3, [r4, #8]
    61ce:	str	r6, [sp, #48]	; 0x30
    61d0:	cmp	r3, #0
    61d2:	bne.n	6296 <MTPD::GetObjectInfo(unsigned long)+0x236>
    61d4:	add	r1, sp, #48	; 0x30
    61d6:	movs	r2, #4
    61d8:	mov	r0, r4
    61da:	bl	5b48 <MTPD::write(char const*, int) [clone .part.2]>
    61de:	ldrb	r3, [r4, #8]
    61e0:	str	r6, [sp, #44]	; 0x2c
    61e2:	cmp	r3, #0
    61e4:	bne.n	629a <MTPD::GetObjectInfo(unsigned long)+0x23a>
    61e6:	add	r1, sp, #44	; 0x2c
    61e8:	movs	r2, #4
    61ea:	mov	r0, r4
    61ec:	bl	5b48 <MTPD::write(char const*, int) [clone .part.2]>
    61f0:	ldrb	r3, [r4, #8]
    61f2:	str	r6, [sp, #40]	; 0x28
    61f4:	cmp	r3, #0
    61f6:	bne.n	629e <MTPD::GetObjectInfo(unsigned long)+0x23e>
    61f8:	add	r1, sp, #40	; 0x28
    61fa:	movs	r2, #4
    61fc:	mov	r0, r4
    61fe:	bl	5b48 <MTPD::write(char const*, int) [clone .part.2]>
    6202:	ldrb	r3, [r4, #8]
    6204:	str	r6, [sp, #36]	; 0x24
    6206:	cmp	r3, #0
    6208:	bne.n	62a2 <MTPD::GetObjectInfo(unsigned long)+0x242>
    620a:	movs	r2, #4
    620c:	add	r1, sp, #36	; 0x24
    620e:	mov	r0, r4
    6210:	bl	5b48 <MTPD::write(char const*, int) [clone .part.2]>
    6214:	ldrb	r3, [r4, #8]
    6216:	ldr	r2, [r5, #0]
    6218:	str	r2, [sp, #32]
    621a:	cmp	r3, #0
    621c:	bne.n	62a6 <MTPD::GetObjectInfo(unsigned long)+0x246>
    621e:	add	r1, sp, #32
    6220:	movs	r2, #4
    6222:	mov	r0, r4
    6224:	bl	5b48 <MTPD::write(char const*, int) [clone .part.2]>
    6228:	ldr	r3, [sp, #20]
    622a:	ldrb	r6, [r4, #8]
    622c:	sub.w	r3, r3, #4294967295
    6230:	clz	r3, r3
    6234:	lsrs	r3, r3, #5
    6236:	strh.w	r3, [sp, #18]
    623a:	cmp	r6, #0
    623c:	bne.n	62aa <MTPD::GetObjectInfo(unsigned long)+0x24a>
    623e:	add.w	r1, sp, #18
    6242:	movs	r2, #2
    6244:	mov	r0, r4
    6246:	bl	5b48 <MTPD::write(char const*, int) [clone .part.2]>
    624a:	ldrb	r5, [r4, #8]
    624c:	str	r6, [sp, #68]	; 0x44
    624e:	cbnz	r5, 627a <MTPD::GetObjectInfo(unsigned long)+0x21a>
    6250:	add	r1, sp, #68	; 0x44
    6252:	movs	r2, #4
    6254:	mov	r0, r4
    6256:	bl	5b48 <MTPD::write(char const*, int) [clone .part.2]>
    625a:	ldrb	r3, [r4, #8]
    625c:	str	r5, [sp, #64]	; 0x40
    625e:	cbnz	r3, 6276 <MTPD::GetObjectInfo(unsigned long)+0x216>
    6260:	add	r1, sp, #64	; 0x40
    6262:	movs	r2, #4
    6264:	mov	r0, r4
    6266:	bl	5b48 <MTPD::write(char const*, int) [clone .part.2]>
    626a:	b.n	6118 <MTPD::GetObjectInfo(unsigned long)+0xb8>
    626c:	movw	r2, #12289	; 0x3001
    6270:	strh.w	r2, [sp, #16]
    6274:	b.n	609c <MTPD::GetObjectInfo(unsigned long)+0x3c>
    6276:	ldr	r3, [r4, #12]
    6278:	b.n	6114 <MTPD::GetObjectInfo(unsigned long)+0xb4>
    627a:	ldr	r3, [r4, #12]
    627c:	b.n	610c <MTPD::GetObjectInfo(unsigned long)+0xac>
    627e:	ldr	r3, [r4, #12]
    6280:	b.n	609c <MTPD::GetObjectInfo(unsigned long)+0x3c>
    6282:	ldr	r3, [r4, #12]
    6284:	b.n	60a6 <MTPD::GetObjectInfo(unsigned long)+0x46>
    6286:	ldr	r3, [r4, #12]
    6288:	b.n	60ae <MTPD::GetObjectInfo(unsigned long)+0x4e>
    628a:	ldr	r3, [r4, #12]
    628c:	b.n	60b8 <MTPD::GetObjectInfo(unsigned long)+0x58>
    628e:	ldr	r3, [r4, #12]
    6290:	b.n	60c0 <MTPD::GetObjectInfo(unsigned long)+0x60>
    6292:	ldr	r3, [r4, #12]
    6294:	b.n	60c8 <MTPD::GetObjectInfo(unsigned long)+0x68>
    6296:	ldr	r3, [r4, #12]
    6298:	b.n	60d0 <MTPD::GetObjectInfo(unsigned long)+0x70>
    629a:	ldr	r3, [r4, #12]
    629c:	b.n	60d8 <MTPD::GetObjectInfo(unsigned long)+0x78>
    629e:	ldr	r3, [r4, #12]
    62a0:	b.n	60e0 <MTPD::GetObjectInfo(unsigned long)+0x80>
    62a2:	ldr	r3, [r4, #12]
    62a4:	b.n	60e8 <MTPD::GetObjectInfo(unsigned long)+0x88>
    62a6:	ldr	r3, [r4, #12]
    62a8:	b.n	60f0 <MTPD::GetObjectInfo(unsigned long)+0x90>
    62aa:	ldr	r3, [r4, #12]
    62ac:	b.n	6104 <MTPD::GetObjectInfo(unsigned long)+0xa4>
    62ae:	nop
    62b0:	.word	0x00014360

000062b4 <MTPD::getObjectPropsSupported(unsigned long)>:
        write8(0);       // no form
    }
  }

    void MTPD::getObjectPropsSupported(uint32_t p1)
    {
    62b4:	push	{r4, r5, r6, r7, lr}
      write32(propertyListNum);
    62b6:	ldr	r7, [pc, #96]	; (6318 <MTPD::getObjectPropsSupported(unsigned long)+0x64>)
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    62b8:	ldrb	r2, [r0, #8]
    }
  }

    void MTPD::getObjectPropsSupported(uint32_t p1)
    {
      write32(propertyListNum);
    62ba:	ldr	r3, [r7, #0]
        write8(0);       // no form
    }
  }

    void MTPD::getObjectPropsSupported(uint32_t p1)
    {
    62bc:	sub	sp, #12
    62be:	mov	r4, r0
    62c0:	str	r3, [sp, #4]
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    62c2:	cbz	r2, 630a <MTPD::getObjectPropsSupported(unsigned long)+0x56>
      write_length_ += len;
    62c4:	ldr	r2, [r0, #12]
    62c6:	adds	r2, #4
    62c8:	str	r2, [r0, #12]
  }

    void MTPD::getObjectPropsSupported(uint32_t p1)
    {
      write32(propertyListNum);
      for(uint32_t ii=0; ii<propertyListNum;ii++) write16(propertyList[ii]);
    62ca:	cbz	r3, 6306 <MTPD::getObjectPropsSupported(unsigned long)+0x52>
    62cc:	ldr	r6, [pc, #76]	; (631c <MTPD::getObjectPropsSupported(unsigned long)+0x68>)
    62ce:	movw	r3, #56321	; 0xdc01
    62d2:	movs	r5, #0
    62d4:	b.n	62e8 <MTPD::getObjectPropsSupported(unsigned long)+0x34>
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
      write_length_ += len;
    62d6:	ldr	r3, [r4, #12]
    62d8:	adds	r3, #2
    62da:	str	r3, [r4, #12]
  }

    void MTPD::getObjectPropsSupported(uint32_t p1)
    {
      write32(propertyListNum);
      for(uint32_t ii=0; ii<propertyListNum;ii++) write16(propertyList[ii]);
    62dc:	ldr	r3, [r7, #0]
    62de:	adds	r5, #1
    62e0:	cmp	r3, r5
    62e2:	bls.n	6306 <MTPD::getObjectPropsSupported(unsigned long)+0x52>
    62e4:	ldrh.w	r3, [r6, #2]!
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    62e8:	ldrb	r2, [r4, #8]
    62ea:	strh.w	r3, [sp, #2]
    62ee:	cmp	r2, #0
    62f0:	bne.n	62d6 <MTPD::getObjectPropsSupported(unsigned long)+0x22>
    62f2:	movs	r2, #2
    62f4:	add.w	r1, sp, r2
    62f8:	mov	r0, r4
    62fa:	bl	5b48 <MTPD::write(char const*, int) [clone .part.2]>
  }

    void MTPD::getObjectPropsSupported(uint32_t p1)
    {
      write32(propertyListNum);
      for(uint32_t ii=0; ii<propertyListNum;ii++) write16(propertyList[ii]);
    62fe:	ldr	r3, [r7, #0]
    6300:	adds	r5, #1
    6302:	cmp	r3, r5
    6304:	bhi.n	62e4 <MTPD::getObjectPropsSupported(unsigned long)+0x30>
    }
    6306:	add	sp, #12
    6308:	pop	{r4, r5, r6, r7, pc}
    630a:	movs	r2, #4
    630c:	add.w	r1, sp, r2
    6310:	bl	5b48 <MTPD::write(char const*, int) [clone .part.2]>
    6314:	ldr	r3, [r7, #0]
    6316:	b.n	62ca <MTPD::getObjectPropsSupported(unsigned long)+0x16>
    6318:	.word	0x1fff8a5c
    631c:	.word	0x000144ec

00006320 <MTPD::getObjectPropValue(unsigned long, unsigned long)>:
          break;
      }
    }

    void MTPD::getObjectPropValue(uint32_t p1, uint32_t p2)
    { char name[MAX_FILENAME_LEN];
    6320:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    6324:	mov	r5, r0
      uint32_t dir;
      uint32_t size;
      uint32_t parent;
      uint16_t store;
      storage_->GetObjectInfo(p1,name,&size,&parent, &store);
    6326:	ldr	r0, [r0, #0]
          break;
      }
    }

    void MTPD::getObjectPropValue(uint32_t p1, uint32_t p2)
    { char name[MAX_FILENAME_LEN];
    6328:	sub	sp, #316	; 0x13c
      uint32_t dir;
      uint32_t size;
      uint32_t parent;
      uint16_t store;
      storage_->GetObjectInfo(p1,name,&size,&parent, &store);
    632a:	ldr	r3, [r0, #0]
    632c:	add.w	r6, sp, #10
    6330:	add	r7, sp, #20
    6332:	str	r6, [sp, #4]
    6334:	str	r7, [sp, #0]
          break;
      }
    }

    void MTPD::getObjectPropValue(uint32_t p1, uint32_t p2)
    { char name[MAX_FILENAME_LEN];
    6336:	mov	r4, r2
      uint32_t dir;
      uint32_t size;
      uint32_t parent;
      uint16_t store;
      storage_->GetObjectInfo(p1,name,&size,&parent, &store);
    6338:	ldr.w	r8, [r3, #36]	; 0x24
    633c:	add	r2, sp, #56	; 0x38
    633e:	add	r3, sp, #16
          break;
      }
    }

    void MTPD::getObjectPropValue(uint32_t p1, uint32_t p2)
    { char name[MAX_FILENAME_LEN];
    6340:	mov	r9, r1
      uint32_t dir;
      uint32_t size;
      uint32_t parent;
      uint16_t store;
      storage_->GetObjectInfo(p1,name,&size,&parent, &store);
    6342:	blx	r8
      dir = size == 0xFFFFFFFFUL;
      uint32_t storage = Store2Storage(store);
      switch(p2)
    6344:	sub.w	r2, r4, #56320	; 0xdc00
      uint32_t size;
      uint32_t parent;
      uint16_t store;
      storage_->GetObjectInfo(p1,name,&size,&parent, &store);
      dir = size == 0xFFFFFFFFUL;
      uint32_t storage = Store2Storage(store);
    6348:	ldrh	r3, [r6, #0]
      uint32_t dir;
      uint32_t size;
      uint32_t parent;
      uint16_t store;
      storage_->GetObjectInfo(p1,name,&size,&parent, &store);
      dir = size == 0xFFFFFFFFUL;
    634a:	ldr	r1, [sp, #16]
      uint32_t storage = Store2Storage(store);
      switch(p2)
    634c:	subs	r2, #1
      uint32_t size;
      uint32_t parent;
      uint16_t store;
      storage_->GetObjectInfo(p1,name,&size,&parent, &store);
      dir = size == 0xFFFFFFFFUL;
      uint32_t storage = Store2Storage(store);
    634e:	adds	r4, r3, #1
      switch(p2)
    6350:	cmp	r2, #67	; 0x43
    6352:	bhi.n	63b8 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x98>
    6354:	tbb	[pc, r2]
    6358:	.word	0x776a4b41
    635c:	.word	0x333a3030
    6360:	.word	0x305c3033
    6364:	.word	0x30303030
    6368:	.word	0x30303030
    636c:	.word	0x30303030
    6370:	.word	0x30303030
    6374:	.word	0x30303030
    6378:	.word	0x30303030
    637c:	.word	0x30303030
    6380:	.word	0x30303030
    6384:	.word	0x30303030
    6388:	.word	0x30303030
    638c:	.word	0x30303030
    6390:	.word	0x30303030
    6394:	.word	0x30303030
    6398:	.word	0x3a303022
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    639c:	ldrb	r3, [r5, #8]
    639e:	str.w	r9, [sp, #52]	; 0x34
    63a2:	cmp	r3, #0
    63a4:	beq.n	6456 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x136>
      write_length_ += len;
    63a6:	ldr	r3, [r5, #12]
    63a8:	adds	r3, #4
    63aa:	str	r3, [r5, #12]
    63ac:	adds	r3, #4
    63ae:	str	r3, [r5, #12]
    63b0:	adds	r3, #4
    63b2:	str	r3, [r5, #12]
    63b4:	adds	r3, #4
    63b6:	str	r3, [r5, #12]
          writestring(name);
          break;
        default:
          break;
      }
    }
    63b8:	add	sp, #316	; 0x13c
    63ba:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          break;
        case MTP_PROPERTY_DATE_CREATED:       //0xDC08:
          writestring("");
          break;
        case MTP_PROPERTY_DATE_MODIFIED:      //0xDC09:
          writestring("");
    63be:	mov	r0, r5
    63c0:	ldr	r1, [pc, #276]	; (64d8 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x1b8>)
    63c2:	bl	5bac <MTPD::writestring(char const*)>
          writestring(name);
          break;
        default:
          break;
      }
    }
    63c6:	add	sp, #316	; 0x13c
    63c8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          write32(parent);
          write32(storage);
          write32(0);
          break;
        case MTP_PROPERTY_NAME:               //0xDC44:
          writestring(name);
    63cc:	add	r1, sp, #56	; 0x38
    63ce:	mov	r0, r5
    63d0:	bl	5bac <MTPD::writestring(char const*)>
          break;
        default:
          break;
      }
    }
    63d4:	add	sp, #316	; 0x13c
    63d6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    63da:	ldrb	r3, [r5, #8]
    63dc:	str	r4, [sp, #24]
    63de:	cmp	r3, #0
    63e0:	beq.n	64a2 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x182>
      write_length_ += len;
    63e2:	ldr	r3, [r5, #12]
    63e4:	adds	r3, #4
    63e6:	str	r3, [r5, #12]
          writestring(name);
          break;
        default:
          break;
      }
    }
    63e8:	add	sp, #316	; 0x13c
    63ea:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      {
        case MTP_PROPERTY_STORAGE_ID:         //0xDC01:
          write32(storage);
          break;
        case MTP_PROPERTY_OBJECT_FORMAT:      //0xDC02:
          write16(dir?0x3001:0x3000);
    63ee:	adds	r1, #1
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    63f0:	ldrb	r2, [r5, #8]
      {
        case MTP_PROPERTY_STORAGE_ID:         //0xDC01:
          write32(storage);
          break;
        case MTP_PROPERTY_OBJECT_FORMAT:      //0xDC02:
          write16(dir?0x3001:0x3000);
    63f2:	movw	r3, #12289	; 0x3001
    63f6:	it	ne
    63f8:	movne.w	r3, #12288	; 0x3000
    63fc:	strh.w	r3, [sp, #12]
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    6400:	cmp	r2, #0
    6402:	beq.n	6496 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x176>
      write_length_ += len;
    6404:	ldr	r3, [r5, #12]
    6406:	adds	r3, #2
    6408:	str	r3, [r5, #12]
          writestring(name);
          break;
        default:
          break;
      }
    }
    640a:	add	sp, #316	; 0x13c
    640c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          break;
        case MTP_PROPERTY_DATE_MODIFIED:      //0xDC09:
          writestring("");
          break;
        case MTP_PROPERTY_PARENT_OBJECT:      //0xDC0B:
          write32((store==parent)? 0: parent);
    6410:	ldr	r2, [r7, #0]
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    6412:	ldrb	r1, [r5, #8]
          break;
        case MTP_PROPERTY_DATE_MODIFIED:      //0xDC09:
          writestring("");
          break;
        case MTP_PROPERTY_PARENT_OBJECT:      //0xDC0B:
          write32((store==parent)? 0: parent);
    6414:	cmp	r3, r2
    6416:	it	eq
    6418:	moveq	r2, #0
    641a:	str	r2, [sp, #36]	; 0x24
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    641c:	cmp	r1, #0
    641e:	bne.n	63e2 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xc2>
    6420:	add	r1, sp, #36	; 0x24
    6422:	mov	r0, r5
    6424:	movs	r2, #4
    6426:	bl	5b48 <MTPD::write(char const*, int) [clone .part.2]>
    642a:	b.n	63b8 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x98>
    642c:	ldrb	r3, [r5, #8]
    642e:	movs	r2, #0
    6430:	strh.w	r2, [sp, #14]
    6434:	cmp	r3, #0
    6436:	bne.n	6404 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xe4>
    6438:	add.w	r1, sp, #14
    643c:	mov	r0, r5
    643e:	movs	r2, #2
    6440:	bl	5b48 <MTPD::write(char const*, int) [clone .part.2]>
    6444:	b.n	63b8 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x98>
    6446:	ldrb	r4, [r5, #8]
    6448:	str	r1, [sp, #32]
    644a:	cmp	r4, #0
    644c:	beq.n	64ae <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x18e>
      write_length_ += len;
    644e:	ldr	r3, [r5, #12]
    6450:	adds	r3, #4
    6452:	str	r3, [r5, #12]
    6454:	b.n	63b4 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x94>
    6456:	movs	r2, #4
    6458:	add	r1, sp, #52	; 0x34
    645a:	mov	r0, r5
    645c:	bl	5b48 <MTPD::write(char const*, int) [clone .part.2]>
    6460:	ldrb	r3, [r5, #8]
    6462:	ldr	r2, [r7, #0]
    6464:	str	r2, [sp, #48]	; 0x30
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    6466:	cmp	r3, #0
    6468:	bne.n	64d2 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x1b2>
    646a:	add	r1, sp, #48	; 0x30
    646c:	movs	r2, #4
    646e:	mov	r0, r5
    6470:	bl	5b48 <MTPD::write(char const*, int) [clone .part.2]>
    6474:	ldrb	r6, [r5, #8]
    6476:	str	r4, [sp, #44]	; 0x2c
    6478:	cbnz	r6, 64ce <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x1ae>
    647a:	add	r1, sp, #44	; 0x2c
    647c:	movs	r2, #4
    647e:	mov	r0, r5
    6480:	bl	5b48 <MTPD::write(char const*, int) [clone .part.2]>
    6484:	ldrb	r3, [r5, #8]
    6486:	str	r6, [sp, #40]	; 0x28
    6488:	cbnz	r3, 64ca <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x1aa>
    648a:	add	r1, sp, #40	; 0x28
    648c:	mov	r0, r5
    648e:	movs	r2, #4
    6490:	bl	5b48 <MTPD::write(char const*, int) [clone .part.2]>
    6494:	b.n	63b8 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x98>
    6496:	add	r1, sp, #12
    6498:	mov	r0, r5
    649a:	movs	r2, #2
    649c:	bl	5b48 <MTPD::write(char const*, int) [clone .part.2]>
    64a0:	b.n	63b8 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x98>
    64a2:	add	r1, sp, #24
    64a4:	mov	r0, r5
    64a6:	movs	r2, #4
    64a8:	bl	5b48 <MTPD::write(char const*, int) [clone .part.2]>
    64ac:	b.n	63b8 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x98>
    64ae:	add	r1, sp, #32
    64b0:	movs	r2, #4
    64b2:	mov	r0, r5
    64b4:	bl	5b48 <MTPD::write(char const*, int) [clone .part.2]>
    64b8:	ldrb	r3, [r5, #8]
    64ba:	str	r4, [sp, #28]
    64bc:	cbnz	r3, 64ca <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x1aa>
    64be:	add	r1, sp, #28
    64c0:	mov	r0, r5
    64c2:	movs	r2, #4
    64c4:	bl	5b48 <MTPD::write(char const*, int) [clone .part.2]>
    64c8:	b.n	63b8 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x98>
    64ca:	ldr	r3, [r5, #12]
    64cc:	b.n	63b4 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x94>
    64ce:	ldr	r3, [r5, #12]
    64d0:	b.n	63b0 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x90>
    64d2:	ldr	r3, [r5, #12]
    64d4:	b.n	63ac <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x8c>
    64d6:	nop
    64d8:	.word	0x00014360

000064dc <MTPD::GetStorageInfo(unsigned long)>:
    uint32_t num=storage_->get_FSCount();
    write32(num); // number of storages (disks)
    for(uint32_t ii=0;ii<num;ii++)  write32(Store2Storage(ii)); // storage id
  }

  void MTPD::GetStorageInfo(uint32_t storage) {
    64dc:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    64e0:	mov	r4, r0
    uint32_t store = Storage2Store(storage);
    write16(storage_->readonly(store) ? 0x0001 : 0x0004);   // storage type (removable RAM)
    64e2:	ldr	r0, [r0, #0]
    64e4:	ldr	r3, [r0, #0]
    write32(num); // number of storages (disks)
    for(uint32_t ii=0;ii<num;ii++)  write32(Store2Storage(ii)); // storage id
  }

  void MTPD::GetStorageInfo(uint32_t storage) {
    uint32_t store = Storage2Store(storage);
    64e6:	subs	r5, r1, #1
    uint32_t num=storage_->get_FSCount();
    write32(num); // number of storages (disks)
    for(uint32_t ii=0;ii<num;ii++)  write32(Store2Storage(ii)); // storage id
  }

  void MTPD::GetStorageInfo(uint32_t storage) {
    64e8:	sub	sp, #36	; 0x24
    uint32_t store = Storage2Store(storage);
    write16(storage_->readonly(store) ? 0x0001 : 0x0004);   // storage type (removable RAM)
    64ea:	ldr	r3, [r3, #20]
    64ec:	mov	r1, r5
    64ee:	blx	r3
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    64f0:	ldrb	r3, [r4, #8]
    for(uint32_t ii=0;ii<num;ii++)  write32(Store2Storage(ii)); // storage id
  }

  void MTPD::GetStorageInfo(uint32_t storage) {
    uint32_t store = Storage2Store(storage);
    write16(storage_->readonly(store) ? 0x0001 : 0x0004);   // storage type (removable RAM)
    64f2:	cmp	r0, #0
    64f4:	ite	eq
    64f6:	moveq	r2, #4
    64f8:	movne	r2, #1
    64fa:	strh.w	r2, [sp, #6]
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    64fe:	cmp	r3, #0
    6500:	beq.n	659c <MTPD::GetStorageInfo(unsigned long)+0xc0>
      write_length_ += len;
    6502:	ldr	r3, [r4, #12]
    6504:	adds	r3, #2
    6506:	str	r3, [r4, #12]
  }

  void MTPD::GetStorageInfo(uint32_t storage) {
    uint32_t store = Storage2Store(storage);
    write16(storage_->readonly(store) ? 0x0001 : 0x0004);   // storage type (removable RAM)
    write16(storage_->has_directories(store) ? 0x0002: 0x0001);   // filesystem type (generic hierarchical)
    6508:	ldr	r0, [r4, #0]
    650a:	ldr	r3, [r0, #0]
    650c:	mov	r1, r5
    650e:	ldr	r3, [r3, #24]
    6510:	blx	r3
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    6512:	ldrb	r6, [r4, #8]
  }

  void MTPD::GetStorageInfo(uint32_t storage) {
    uint32_t store = Storage2Store(storage);
    write16(storage_->readonly(store) ? 0x0001 : 0x0004);   // storage type (removable RAM)
    write16(storage_->has_directories(store) ? 0x0002: 0x0001);   // filesystem type (generic hierarchical)
    6514:	cmp	r0, #0
    6516:	ite	eq
    6518:	moveq	r3, #1
    651a:	movne	r3, #2
    651c:	strh.w	r3, [sp, #10]
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    6520:	cmp	r6, #0
    6522:	beq.n	65e4 <MTPD::GetStorageInfo(unsigned long)+0x108>
      write_length_ += len;
    6524:	ldr	r3, [r4, #12]
    6526:	movs	r2, #0
    6528:	adds	r3, #2
    652a:	str	r3, [r4, #12]
    652c:	strh.w	r2, [sp, #8]
    6530:	adds	r3, #2
    6532:	str	r3, [r4, #12]
    uint32_t store = Storage2Store(storage);
    write16(storage_->readonly(store) ? 0x0001 : 0x0004);   // storage type (removable RAM)
    write16(storage_->has_directories(store) ? 0x0002: 0x0001);   // filesystem type (generic hierarchical)
    write16(0x0000);   // access capability (read-write)

    uint64_t ntotal = storage_->totalSize(store) ; 
    6534:	ldr	r0, [r4, #0]
    6536:	ldr	r3, [r0, #0]
    6538:	mov	r1, r5
    653a:	ldr	r3, [r3, #12]
    653c:	blx	r3
    653e:	mov	r6, r0
    uint64_t nused = storage_->usedSize(store) ; 
    6540:	ldr	r0, [r4, #0]
    6542:	ldr	r3, [r0, #0]
    uint32_t store = Storage2Store(storage);
    write16(storage_->readonly(store) ? 0x0001 : 0x0004);   // storage type (removable RAM)
    write16(storage_->has_directories(store) ? 0x0002: 0x0001);   // filesystem type (generic hierarchical)
    write16(0x0000);   // access capability (read-write)

    uint64_t ntotal = storage_->totalSize(store) ; 
    6544:	mov	r7, r1
    uint64_t nused = storage_->usedSize(store) ; 
    6546:	ldr	r3, [r3, #16]
    6548:	mov	r1, r5
    654a:	blx	r3
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    654c:	ldrb	r3, [r4, #8]
    write16(storage_->readonly(store) ? 0x0001 : 0x0004);   // storage type (removable RAM)
    write16(storage_->has_directories(store) ? 0x0002: 0x0001);   // filesystem type (generic hierarchical)
    write16(0x0000);   // access capability (read-write)

    uint64_t ntotal = storage_->totalSize(store) ; 
    uint64_t nused = storage_->usedSize(store) ; 
    654e:	mov	r8, r0
    6550:	mov	r9, r1
    6552:	strd	r6, r7, [sp, #24]
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    6556:	cbz	r3, 65aa <MTPD::GetStorageInfo(unsigned long)+0xce>
    6558:	subs	r6, r6, r0
      write_length_ += len;
    655a:	ldr	r3, [r4, #12]
    655c:	sbc.w	r7, r7, r1
    6560:	strd	r6, r7, [sp, #16]
    6564:	adds	r3, #8
    6566:	str	r3, [r4, #12]
    6568:	adds	r3, #8
    656a:	mov.w	r2, #4294967295
    656e:	str	r3, [r4, #12]
    6570:	str	r2, [sp, #12]
    6572:	adds	r3, #4
    6574:	str	r3, [r4, #12]

    write64(ntotal);  // max capacity
    write64((ntotal-nused));  // free space (100M)
    //
    write32(0xFFFFFFFFUL);  // free space (objects)
    const char *name = storage_->get_FSName(store);
    6576:	ldr	r0, [r4, #0]
    6578:	ldr	r2, [pc, #156]	; (6618 <MTPD::GetStorageInfo(unsigned long)+0x13c>)
    657a:	ldr	r3, [r0, #0]
    657c:	ldr	r3, [r3, #8]
    657e:	cmp	r3, r2
    6580:	bne.n	6604 <MTPD::GetStorageInfo(unsigned long)+0x128>
    const char *sd_getFSName(uint32_t store) { return sd_name[store];}
    6582:	add.w	r0, r0, r5, lsl #2
    6586:	ldr	r1, [r0, #8]
    writestring(name);  // storage descriptor
    6588:	mov	r0, r4
    658a:	bl	5bac <MTPD::writestring(char const*)>
    writestring("");  // volume identifier
    658e:	mov	r0, r4
    6590:	ldr	r1, [pc, #136]	; (661c <MTPD::GetStorageInfo(unsigned long)+0x140>)
    6592:	bl	5bac <MTPD::writestring(char const*)>

    //printf("%d %d ",storage,store); Serial.println(name); Serial.flush();
  }
    6596:	add	sp, #36	; 0x24
    6598:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    659c:	movs	r2, #2
    659e:	add.w	r1, sp, #6
    65a2:	mov	r0, r4
    65a4:	bl	5b48 <MTPD::write(char const*, int) [clone .part.2]>
    65a8:	b.n	6508 <MTPD::GetStorageInfo(unsigned long)+0x2c>
    65aa:	movs	r2, #8
    65ac:	add	r1, sp, #24
    65ae:	mov	r0, r4
    65b0:	bl	5b48 <MTPD::write(char const*, int) [clone .part.2]>
    65b4:	subs.w	r6, r6, r8
    65b8:	ldrb	r3, [r4, #8]
    65ba:	sbc.w	r7, r7, r9
    65be:	strd	r6, r7, [sp, #16]
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    65c2:	cbnz	r3, 6610 <MTPD::GetStorageInfo(unsigned long)+0x134>
    65c4:	movs	r2, #8
    65c6:	add	r1, sp, #16
    65c8:	mov	r0, r4
    65ca:	bl	5b48 <MTPD::write(char const*, int) [clone .part.2]>
    65ce:	ldrb	r3, [r4, #8]
    65d0:	mov.w	r2, #4294967295
    65d4:	str	r2, [sp, #12]
    65d6:	cbnz	r3, 660c <MTPD::GetStorageInfo(unsigned long)+0x130>
    65d8:	movs	r2, #4
    65da:	add	r1, sp, #12
    65dc:	mov	r0, r4
    65de:	bl	5b48 <MTPD::write(char const*, int) [clone .part.2]>
    65e2:	b.n	6576 <MTPD::GetStorageInfo(unsigned long)+0x9a>
    65e4:	movs	r2, #2
    65e6:	add.w	r1, sp, #10
    65ea:	mov	r0, r4
    65ec:	bl	5b48 <MTPD::write(char const*, int) [clone .part.2]>
    65f0:	ldrb	r3, [r4, #8]
    65f2:	strh.w	r6, [sp, #8]
    65f6:	cbnz	r3, 6614 <MTPD::GetStorageInfo(unsigned long)+0x138>
    65f8:	movs	r2, #2
    65fa:	add	r1, sp, #8
    65fc:	mov	r0, r4
    65fe:	bl	5b48 <MTPD::write(char const*, int) [clone .part.2]>
    6602:	b.n	6534 <MTPD::GetStorageInfo(unsigned long)+0x58>

    write64(ntotal);  // max capacity
    write64((ntotal-nused));  // free space (100M)
    //
    write32(0xFFFFFFFFUL);  // free space (objects)
    const char *name = storage_->get_FSName(store);
    6604:	mov	r1, r5
    6606:	blx	r3
    6608:	mov	r1, r0
    660a:	b.n	6588 <MTPD::GetStorageInfo(unsigned long)+0xac>
    660c:	ldr	r3, [r4, #12]
    660e:	b.n	6572 <MTPD::GetStorageInfo(unsigned long)+0x96>
    6610:	ldr	r3, [r4, #12]
    6612:	b.n	6568 <MTPD::GetStorageInfo(unsigned long)+0x8c>
    6614:	ldr	r3, [r4, #12]
    6616:	b.n	6530 <MTPD::GetStorageInfo(unsigned long)+0x54>
    6618:	.word	0x00001e3d
    661c:	.word	0x00014360

00006620 <MTPD::getObjectPropDesc(unsigned long, unsigned long)>:
      write32(propertyListNum);
      for(uint32_t ii=0; ii<propertyListNum;ii++) write16(propertyList[ii]);
    }

    void MTPD::getObjectPropDesc(uint32_t p1, uint32_t p2)
    {
    6620:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
      switch(p1)
    6624:	sub.w	r1, r1, #56320	; 0xdc00
    6628:	subs	r1, #1
      write32(propertyListNum);
      for(uint32_t ii=0; ii<propertyListNum;ii++) write16(propertyList[ii]);
    }

    void MTPD::getObjectPropDesc(uint32_t p1, uint32_t p2)
    {
    662a:	sub	sp, #148	; 0x94
    662c:	mov	r4, r0
      switch(p1)
    662e:	cmp	r1, #67	; 0x43
    6630:	bhi.n	66e8 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xc8>
    6632:	tbh	[pc, r1, lsl #1]
    6636:	.short	0x005c
    6638:	.word	0x0080006e
    663c:	.word	0x005900c6
    6640:	.word	0x00d80059
    6644:	.word	0x01690121
    6648:	.word	0x01b10059
    664c:	.word	0x00590059
    6650:	.word	0x00590059
    6654:	.word	0x00590059
    6658:	.word	0x00590059
    665c:	.word	0x00590059
    6660:	.word	0x00590059
    6664:	.word	0x00590059
    6668:	.word	0x00590059
    666c:	.word	0x00590059
    6670:	.word	0x00590059
    6674:	.word	0x00590059
    6678:	.word	0x00590059
    667c:	.word	0x00590059
    6680:	.word	0x00590059
    6684:	.word	0x00590059
    6688:	.word	0x00590059
    668c:	.word	0x00590059
    6690:	.word	0x00590059
    6694:	.word	0x00590059
    6698:	.word	0x00590059
    669c:	.word	0x00590059
    66a0:	.word	0x00590059
    66a4:	.word	0x00590059
    66a8:	.word	0x00590059
    66ac:	.word	0x00590059
    66b0:	.word	0x00590059
    66b4:	.word	0x01f70059
    66b8:	.word	0x00590059
    66bc:	.short	0x0044
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    66be:	ldrb	r3, [r0, #8]
    66c0:	movw	r2, #56388	; 0xdc44
    66c4:	strh.w	r2, [sp, #70]	; 0x46
    66c8:	cmp	r3, #0
    66ca:	beq.w	6b48 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x528>
      write_length_ += len;
    66ce:	ldr	r3, [r4, #12]
    66d0:	adds	r3, #2
    66d2:	str	r3, [r4, #12]
    66d4:	adds	r3, #2
    66d6:	str	r3, [r4, #12]
    66d8:	adds	r3, #1
    66da:	str	r3, [r4, #12]
    66dc:	adds	r3, #1
    66de:	str	r3, [r4, #12]
    66e0:	adds	r3, #4
    66e2:	str	r3, [r4, #12]
    66e4:	adds	r3, #1
    66e6:	str	r3, [r4, #12]
          write8(0);
          break;
        default:
          break;
      }
    }
    66e8:	add	sp, #148	; 0x94
    66ea:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    66ee:	ldrb	r3, [r0, #8]
    66f0:	movw	r2, #56321	; 0xdc01
    66f4:	strh.w	r2, [sp, #30]
    66f8:	cmp	r3, #0
    66fa:	beq.w	6c5c <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x63c>
      write_length_ += len;
    66fe:	ldr	r3, [r4, #12]
    6700:	adds	r3, #2
    6702:	str	r3, [r4, #12]
    6704:	adds	r3, #2
    6706:	str	r3, [r4, #12]
    6708:	adds	r3, #1
    670a:	str	r3, [r4, #12]
    670c:	adds	r3, #4
    670e:	str	r3, [r4, #12]
    6710:	b.n	66e0 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xc0>
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    6712:	ldrb	r3, [r0, #8]
    6714:	movw	r2, #56322	; 0xdc02
    6718:	strh.w	r2, [sp, #36]	; 0x24
    671c:	cmp	r3, #0
    671e:	beq.w	6aca <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x4aa>
      write_length_ += len;
    6722:	ldr	r3, [r4, #12]
    6724:	adds	r3, #2
    6726:	str	r3, [r4, #12]
    6728:	adds	r3, #2
    672a:	str	r3, [r4, #12]
    672c:	adds	r3, #1
    672e:	str	r3, [r4, #12]
    6730:	adds	r3, #2
    6732:	str	r3, [r4, #12]
    6734:	b.n	66e0 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xc0>
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    6736:	ldrb	r3, [r0, #8]
    6738:	movw	r2, #56323	; 0xdc03
    673c:	strh.w	r2, [sp, #42]	; 0x2a
    6740:	cmp	r3, #0
    6742:	bne.n	6722 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x102>
    6744:	movs	r2, #2
    6746:	add.w	r1, sp, #42	; 0x2a
    674a:	bl	5b48 <MTPD::write(char const*, int) [clone .part.2]>
    674e:	ldrb	r7, [r4, #8]
    6750:	movs	r6, #4
    6752:	strh.w	r6, [sp, #40]	; 0x28
    6756:	cmp	r7, #0
    6758:	bne.w	6cf2 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6d2>
    675c:	movs	r2, #2
    675e:	add	r1, sp, #40	; 0x28
    6760:	mov	r0, r4
    6762:	bl	5b48 <MTPD::write(char const*, int) [clone .part.2]>
    6766:	ldrb	r5, [r4, #8]
    6768:	strb.w	r7, [sp, #9]
    676c:	cmp	r5, #0
    676e:	bne.w	6cee <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6ce>
    6772:	movs	r2, #1
    6774:	add.w	r1, sp, #9
    6778:	mov	r0, r4
    677a:	bl	5b48 <MTPD::write(char const*, int) [clone .part.2]>
    677e:	ldrb	r7, [r4, #8]
    6780:	strh.w	r5, [sp, #38]	; 0x26
    6784:	cmp	r7, #0
    6786:	bne.w	6cea <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6ca>
    678a:	movs	r2, #2
    678c:	add.w	r1, sp, #38	; 0x26
    6790:	mov	r0, r4
    6792:	bl	5b48 <MTPD::write(char const*, int) [clone .part.2]>
    6796:	ldrb	r5, [r4, #8]
    6798:	str	r7, [sp, #84]	; 0x54
    679a:	cmp	r5, #0
    679c:	bne.w	6cc6 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a6>
    67a0:	mov	r2, r6
    67a2:	add	r1, sp, #84	; 0x54
    67a4:	mov	r0, r4
    67a6:	bl	5b48 <MTPD::write(char const*, int) [clone .part.2]>
    67aa:	ldrb	r3, [r4, #8]
    67ac:	strb.w	r5, [sp, #8]
    67b0:	cmp	r3, #0
    67b2:	bne.w	6cc2 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a2>
    67b6:	mov	r0, r4
    67b8:	movs	r2, #1
    67ba:	add	r1, sp, #8
    67bc:	bl	5b48 <MTPD::write(char const*, int) [clone .part.2]>
    67c0:	b.n	66e8 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xc8>
    67c2:	ldrb	r3, [r0, #8]
    67c4:	movw	r2, #56324	; 0xdc04
    67c8:	strh.w	r2, [sp, #46]	; 0x2e
    67cc:	cmp	r3, #0
    67ce:	beq.w	6a48 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x428>
      write_length_ += len;
    67d2:	ldr	r3, [r0, #12]
    67d4:	adds	r3, #2
    67d6:	str	r3, [r0, #12]
    67d8:	adds	r3, #2
    67da:	str	r3, [r4, #12]
    67dc:	adds	r3, #1
    67de:	str	r3, [r4, #12]
    67e0:	adds	r3, #8
    67e2:	str	r3, [r4, #12]
    67e4:	b.n	66e0 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xc0>
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    67e6:	ldrb	r3, [r0, #8]
    67e8:	movw	r2, #56327	; 0xdc07
    67ec:	strh.w	r2, [sp, #50]	; 0x32
    67f0:	cmp	r3, #0
    67f2:	bne.w	66ce <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xae>
    67f6:	movs	r2, #2
    67f8:	add.w	r1, sp, #50	; 0x32
    67fc:	bl	5b48 <MTPD::write(char const*, int) [clone .part.2]>
    6800:	ldrb	r3, [r4, #8]
    6802:	movw	r2, #65535	; 0xffff
    6806:	strh.w	r2, [sp, #48]	; 0x30
    680a:	cmp	r3, #0
    680c:	bne.w	6cda <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6ba>
    6810:	movs	r2, #2
    6812:	add	r1, sp, #48	; 0x30
    6814:	mov	r0, r4
    6816:	bl	5b48 <MTPD::write(char const*, int) [clone .part.2]>
    681a:	ldrb	r6, [r4, #8]
    681c:	movs	r5, #1
    681e:	strb.w	r5, [sp, #14]
    6822:	cmp	r6, #0
    6824:	bne.w	6cd6 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6b6>
    6828:	mov	r2, r5
    682a:	add.w	r1, sp, #14
    682e:	mov	r0, r4
    6830:	bl	5b48 <MTPD::write(char const*, int) [clone .part.2]>
    6834:	ldrb	r7, [r4, #8]
    6836:	strb.w	r6, [sp, #13]
    683a:	cmp	r7, #0
    683c:	bne.w	6ce6 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6c6>
    6840:	mov	r2, r5
    6842:	add.w	r1, sp, #13
    6846:	mov	r0, r4
    6848:	bl	5b48 <MTPD::write(char const*, int) [clone .part.2]>
    684c:	ldrb	r6, [r4, #8]
    684e:	str	r7, [sp, #92]	; 0x5c
    6850:	cmp	r6, #0
    6852:	bne.w	6cc6 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a6>
    6856:	movs	r2, #4
    6858:	add	r1, sp, #92	; 0x5c
    685a:	mov	r0, r4
    685c:	bl	5b48 <MTPD::write(char const*, int) [clone .part.2]>
    6860:	ldrb	r3, [r4, #8]
    6862:	strb.w	r6, [sp, #12]
    6866:	cmp	r3, #0
    6868:	bne.w	6cc2 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a2>
    686c:	mov	r2, r5
    686e:	mov	r0, r4
    6870:	add	r1, sp, #12
    6872:	bl	5b48 <MTPD::write(char const*, int) [clone .part.2]>
    6876:	b.n	66e8 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xc8>
    6878:	ldrb	r3, [r0, #8]
    687a:	movw	r2, #56328	; 0xdc08
    687e:	strh.w	r2, [sp, #54]	; 0x36
    6882:	cmp	r3, #0
    6884:	bne.w	66ce <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xae>
    6888:	movs	r2, #2
    688a:	add.w	r1, sp, #54	; 0x36
    688e:	bl	5b48 <MTPD::write(char const*, int) [clone .part.2]>
    6892:	ldrb	r6, [r4, #8]
    6894:	movw	r3, #65535	; 0xffff
    6898:	strh.w	r3, [sp, #52]	; 0x34
    689c:	cmp	r6, #0
    689e:	bne.w	6cda <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6ba>
    68a2:	movs	r2, #2
    68a4:	add	r1, sp, #52	; 0x34
    68a6:	mov	r0, r4
    68a8:	bl	5b48 <MTPD::write(char const*, int) [clone .part.2]>
    68ac:	ldrb	r5, [r4, #8]
    68ae:	strb.w	r6, [sp, #17]
    68b2:	cmp	r5, #0
    68b4:	bne.w	6cd6 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6b6>
    68b8:	movs	r2, #1
    68ba:	add.w	r1, sp, #17
    68be:	mov	r0, r4
    68c0:	bl	5b48 <MTPD::write(char const*, int) [clone .part.2]>
    68c4:	ldrb	r6, [r4, #8]
    68c6:	strb.w	r5, [sp, #16]
    68ca:	cmp	r6, #0
    68cc:	bne.w	6ce6 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6c6>
    68d0:	movs	r2, #1
    68d2:	add	r1, sp, #16
    68d4:	mov	r0, r4
    68d6:	bl	5b48 <MTPD::write(char const*, int) [clone .part.2]>
    68da:	ldrb	r5, [r4, #8]
    68dc:	str	r6, [sp, #96]	; 0x60
    68de:	cmp	r5, #0
    68e0:	bne.w	6cc6 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a6>
    68e4:	movs	r2, #4
    68e6:	add	r1, sp, #96	; 0x60
    68e8:	mov	r0, r4
    68ea:	bl	5b48 <MTPD::write(char const*, int) [clone .part.2]>
    68ee:	ldrb	r3, [r4, #8]
    68f0:	strb.w	r5, [sp, #15]
    68f4:	cmp	r3, #0
    68f6:	bne.w	6cc2 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a2>
    68fa:	mov	r0, r4
    68fc:	movs	r2, #1
    68fe:	add.w	r1, sp, #15
    6902:	bl	5b48 <MTPD::write(char const*, int) [clone .part.2]>
    6906:	b.n	66e8 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xc8>
    6908:	ldrb	r3, [r0, #8]
    690a:	movw	r2, #56329	; 0xdc09
    690e:	strh.w	r2, [sp, #58]	; 0x3a
    6912:	cmp	r3, #0
    6914:	bne.w	66ce <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xae>
    6918:	movs	r2, #2
    691a:	add.w	r1, sp, #58	; 0x3a
    691e:	bl	5b48 <MTPD::write(char const*, int) [clone .part.2]>
    6922:	ldrb	r6, [r4, #8]
    6924:	movw	r3, #65535	; 0xffff
    6928:	strh.w	r3, [sp, #56]	; 0x38
    692c:	cmp	r6, #0
    692e:	bne.w	6cda <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6ba>
    6932:	movs	r2, #2
    6934:	add	r1, sp, #56	; 0x38
    6936:	mov	r0, r4
    6938:	bl	5b48 <MTPD::write(char const*, int) [clone .part.2]>
    693c:	ldrb	r5, [r4, #8]
    693e:	strb.w	r6, [sp, #20]
    6942:	cmp	r5, #0
    6944:	bne.w	6cd6 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6b6>
    6948:	movs	r2, #1
    694a:	add	r1, sp, #20
    694c:	mov	r0, r4
    694e:	bl	5b48 <MTPD::write(char const*, int) [clone .part.2]>
    6952:	ldrb	r6, [r4, #8]
    6954:	strb.w	r5, [sp, #19]
    6958:	cmp	r6, #0
    695a:	bne.w	6ce6 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6c6>
    695e:	movs	r2, #1
    6960:	add.w	r1, sp, #19
    6964:	mov	r0, r4
    6966:	bl	5b48 <MTPD::write(char const*, int) [clone .part.2]>
    696a:	ldrb	r5, [r4, #8]
    696c:	str	r6, [sp, #100]	; 0x64
    696e:	cmp	r5, #0
    6970:	bne.w	6cc6 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a6>
    6974:	movs	r2, #4
    6976:	add	r1, sp, #100	; 0x64
    6978:	mov	r0, r4
    697a:	bl	5b48 <MTPD::write(char const*, int) [clone .part.2]>
    697e:	ldrb	r3, [r4, #8]
    6980:	strb.w	r5, [sp, #18]
    6984:	cmp	r3, #0
    6986:	bne.w	6cc2 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a2>
    698a:	mov	r0, r4
    698c:	movs	r2, #1
    698e:	add.w	r1, sp, #18
    6992:	bl	5b48 <MTPD::write(char const*, int) [clone .part.2]>
    6996:	b.n	66e8 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xc8>
    6998:	ldrb	r3, [r0, #8]
    699a:	movw	r2, #56331	; 0xdc0b
    699e:	strh.w	r2, [sp, #62]	; 0x3e
    69a2:	cmp	r3, #0
    69a4:	bne.w	66fe <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xde>
    69a8:	movs	r2, #2
    69aa:	add.w	r1, sp, #62	; 0x3e
    69ae:	bl	5b48 <MTPD::write(char const*, int) [clone .part.2]>
    69b2:	ldrb	r6, [r4, #8]
    69b4:	movs	r3, #6
    69b6:	strh.w	r3, [sp, #60]	; 0x3c
    69ba:	cmp	r6, #0
    69bc:	bne.w	6cd2 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6b2>
    69c0:	movs	r2, #2
    69c2:	add	r1, sp, #60	; 0x3c
    69c4:	mov	r0, r4
    69c6:	bl	5b48 <MTPD::write(char const*, int) [clone .part.2]>
    69ca:	ldrb	r5, [r4, #8]
    69cc:	strb.w	r6, [sp, #22]
    69d0:	cmp	r5, #0
    69d2:	bne.w	6cce <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6ae>
    69d6:	movs	r2, #1
    69d8:	add.w	r1, sp, #22
    69dc:	mov	r0, r4
    69de:	bl	5b48 <MTPD::write(char const*, int) [clone .part.2]>
    69e2:	ldrb	r6, [r4, #8]
    69e4:	str	r5, [sp, #108]	; 0x6c
    69e6:	cmp	r6, #0
    69e8:	bne.w	6cca <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6aa>
    69ec:	movs	r2, #4
    69ee:	add	r1, sp, #108	; 0x6c
    69f0:	mov	r0, r4
    69f2:	bl	5b48 <MTPD::write(char const*, int) [clone .part.2]>
    69f6:	ldrb	r5, [r4, #8]
    69f8:	str	r6, [sp, #104]	; 0x68
    69fa:	cmp	r5, #0
    69fc:	bne.w	6cc6 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a6>
    6a00:	movs	r2, #4
    6a02:	add	r1, sp, #104	; 0x68
    6a04:	mov	r0, r4
    6a06:	bl	5b48 <MTPD::write(char const*, int) [clone .part.2]>
    6a0a:	ldrb	r3, [r4, #8]
    6a0c:	strb.w	r5, [sp, #21]
    6a10:	cmp	r3, #0
    6a12:	bne.w	6cc2 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a2>
    6a16:	mov	r0, r4
    6a18:	movs	r2, #1
    6a1a:	add.w	r1, sp, #21
    6a1e:	bl	5b48 <MTPD::write(char const*, int) [clone .part.2]>
    6a22:	b.n	66e8 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xc8>
    6a24:	ldrb	r3, [r0, #8]
    6a26:	movw	r2, #56385	; 0xdc41
    6a2a:	strh.w	r2, [sp, #66]	; 0x42
    6a2e:	cmp	r3, #0
    6a30:	beq.w	6bca <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x5aa>
      write_length_ += len;
    6a34:	ldr	r3, [r0, #12]
    6a36:	adds	r3, #2
    6a38:	str	r3, [r0, #12]
    6a3a:	adds	r3, #2
    6a3c:	str	r3, [r4, #12]
    6a3e:	adds	r3, #1
    6a40:	str	r3, [r4, #12]
    6a42:	adds	r3, #8
    6a44:	str	r3, [r4, #12]
    6a46:	b.n	67e0 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1c0>
    6a48:	movs	r2, #2
    6a4a:	add.w	r1, sp, #46	; 0x2e
    6a4e:	bl	5b48 <MTPD::write(char const*, int) [clone .part.2]>
    6a52:	ldrb	r6, [r4, #8]
    6a54:	movs	r5, #8
    6a56:	strh.w	r5, [sp, #44]	; 0x2c
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    6a5a:	cmp	r6, #0
    6a5c:	bne.w	6ce2 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6c2>
    6a60:	movs	r2, #2
    6a62:	add	r1, sp, #44	; 0x2c
    6a64:	mov	r0, r4
    6a66:	bl	5b48 <MTPD::write(char const*, int) [clone .part.2]>
    6a6a:	ldrb	r3, [r4, #8]
    6a6c:	strb.w	r6, [sp, #11]
    6a70:	cmp	r3, #0
    6a72:	bne.w	6cde <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6be>
    6a76:	movs	r2, #1
    6a78:	add.w	r1, sp, #11
    6a7c:	mov	r0, r4
    6a7e:	bl	5b48 <MTPD::write(char const*, int) [clone .part.2]>
    6a82:	ldrb	r6, [r4, #8]
    6a84:	movs	r2, #0
    6a86:	movs	r3, #0
    6a88:	strd	r2, r3, [sp, #120]	; 0x78
    6a8c:	cmp	r6, #0
    6a8e:	bne.w	6cf6 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6d6>
    6a92:	mov	r2, r5
    6a94:	add	r1, sp, #120	; 0x78
    6a96:	mov	r0, r4
    6a98:	bl	5b48 <MTPD::write(char const*, int) [clone .part.2]>
    6a9c:	ldrb	r5, [r4, #8]
    6a9e:	str	r6, [sp, #88]	; 0x58
    6aa0:	cmp	r5, #0
    6aa2:	bne.w	6cc6 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a6>
    6aa6:	movs	r2, #4
    6aa8:	add	r1, sp, #88	; 0x58
    6aaa:	mov	r0, r4
    6aac:	bl	5b48 <MTPD::write(char const*, int) [clone .part.2]>
    6ab0:	ldrb	r3, [r4, #8]
    6ab2:	strb.w	r5, [sp, #10]
    6ab6:	cmp	r3, #0
    6ab8:	bne.w	6cc2 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a2>
    6abc:	mov	r0, r4
    6abe:	movs	r2, #1
    6ac0:	add.w	r1, sp, #10
    6ac4:	bl	5b48 <MTPD::write(char const*, int) [clone .part.2]>
    6ac8:	b.n	66e8 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xc8>
    6aca:	movs	r2, #2
    6acc:	add	r1, sp, #36	; 0x24
    6ace:	bl	5b48 <MTPD::write(char const*, int) [clone .part.2]>
    6ad2:	ldrb	r7, [r4, #8]
    6ad4:	movs	r6, #4
    6ad6:	strh.w	r6, [sp, #34]	; 0x22
    6ada:	cmp	r7, #0
    6adc:	bne.w	6cf2 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6d2>
    6ae0:	movs	r2, #2
    6ae2:	add.w	r1, sp, #34	; 0x22
    6ae6:	mov	r0, r4
    6ae8:	bl	5b48 <MTPD::write(char const*, int) [clone .part.2]>
    6aec:	ldrb	r5, [r4, #8]
    6aee:	strb.w	r7, [sp, #7]
    6af2:	cmp	r5, #0
    6af4:	bne.w	6cee <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6ce>
    6af8:	movs	r2, #1
    6afa:	add.w	r1, sp, #7
    6afe:	mov	r0, r4
    6b00:	bl	5b48 <MTPD::write(char const*, int) [clone .part.2]>
    6b04:	ldrb	r7, [r4, #8]
    6b06:	strh.w	r5, [sp, #32]
    6b0a:	cmp	r7, #0
    6b0c:	bne.w	6cea <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6ca>
    6b10:	movs	r2, #2
    6b12:	add	r1, sp, #32
    6b14:	mov	r0, r4
    6b16:	bl	5b48 <MTPD::write(char const*, int) [clone .part.2]>
    6b1a:	ldrb	r5, [r4, #8]
    6b1c:	str	r7, [sp, #80]	; 0x50
    6b1e:	cmp	r5, #0
    6b20:	bne.w	6cc6 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a6>
    6b24:	mov	r2, r6
    6b26:	add	r1, sp, #80	; 0x50
    6b28:	mov	r0, r4
    6b2a:	bl	5b48 <MTPD::write(char const*, int) [clone .part.2]>
    6b2e:	ldrb	r3, [r4, #8]
    6b30:	strb.w	r5, [sp, #6]
    6b34:	cmp	r3, #0
    6b36:	bne.w	6cc2 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a2>
    6b3a:	mov	r0, r4
    6b3c:	movs	r2, #1
    6b3e:	add.w	r1, sp, #6
    6b42:	bl	5b48 <MTPD::write(char const*, int) [clone .part.2]>
    6b46:	b.n	66e8 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xc8>
    6b48:	movs	r2, #2
    6b4a:	add.w	r1, sp, #70	; 0x46
    6b4e:	bl	5b48 <MTPD::write(char const*, int) [clone .part.2]>
    6b52:	ldrb	r6, [r4, #8]
    6b54:	movw	r3, #65535	; 0xffff
    6b58:	strh.w	r3, [sp, #68]	; 0x44
    6b5c:	cmp	r6, #0
    6b5e:	bne.w	6cda <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6ba>
    6b62:	movs	r2, #2
    6b64:	add	r1, sp, #68	; 0x44
    6b66:	mov	r0, r4
    6b68:	bl	5b48 <MTPD::write(char const*, int) [clone .part.2]>
    6b6c:	ldrb	r5, [r4, #8]
    6b6e:	strb.w	r6, [sp, #27]
    6b72:	cmp	r5, #0
    6b74:	bne.w	6cd6 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6b6>
    6b78:	movs	r2, #1
    6b7a:	add.w	r1, sp, #27
    6b7e:	mov	r0, r4
    6b80:	bl	5b48 <MTPD::write(char const*, int) [clone .part.2]>
    6b84:	ldrb	r6, [r4, #8]
    6b86:	strb.w	r5, [sp, #26]
    6b8a:	cmp	r6, #0
    6b8c:	bne.w	6ce6 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6c6>
    6b90:	movs	r2, #1
    6b92:	add.w	r1, sp, #26
    6b96:	mov	r0, r4
    6b98:	bl	5b48 <MTPD::write(char const*, int) [clone .part.2]>
    6b9c:	ldrb	r5, [r4, #8]
    6b9e:	str	r6, [sp, #116]	; 0x74
    6ba0:	cmp	r5, #0
    6ba2:	bne.w	6cc6 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a6>
    6ba6:	movs	r2, #4
    6ba8:	add	r1, sp, #116	; 0x74
    6baa:	mov	r0, r4
    6bac:	bl	5b48 <MTPD::write(char const*, int) [clone .part.2]>
    6bb0:	ldrb	r3, [r4, #8]
    6bb2:	strb.w	r5, [sp, #25]
    6bb6:	cmp	r3, #0
    6bb8:	bne.w	6cc2 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a2>
    6bbc:	mov	r0, r4
    6bbe:	movs	r2, #1
    6bc0:	add.w	r1, sp, #25
    6bc4:	bl	5b48 <MTPD::write(char const*, int) [clone .part.2]>
    6bc8:	b.n	66e8 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xc8>
    6bca:	movs	r2, #2
    6bcc:	add.w	r1, sp, #66	; 0x42
    6bd0:	bl	5b48 <MTPD::write(char const*, int) [clone .part.2]>
    6bd4:	ldrb	r5, [r4, #8]
    6bd6:	movs	r3, #10
    6bd8:	strh.w	r3, [sp, #64]	; 0x40
    6bdc:	cmp	r5, #0
    6bde:	bne.w	6d02 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6e2>
    6be2:	movs	r2, #2
    6be4:	add	r1, sp, #64	; 0x40
    6be6:	mov	r0, r4
    6be8:	bl	5b48 <MTPD::write(char const*, int) [clone .part.2]>
    6bec:	ldrb	r3, [r4, #8]
    6bee:	strb.w	r5, [sp, #24]
    6bf2:	cmp	r3, #0
    6bf4:	bne.w	6cfe <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6de>
    6bf8:	movs	r2, #1
    6bfa:	add	r1, sp, #24
    6bfc:	mov	r0, r4
    6bfe:	bl	5b48 <MTPD::write(char const*, int) [clone .part.2]>
    6c02:	ldrb	r3, [r4, #8]
    6c04:	mov.w	r8, #0
    6c08:	mov.w	r9, #0
    6c0c:	strd	r8, r9, [sp, #136]	; 0x88
    6c10:	cmp	r3, #0
    6c12:	bne.n	6cfa <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6da>
    6c14:	movs	r2, #8
    6c16:	add	r1, sp, #136	; 0x88
    6c18:	mov	r0, r4
    6c1a:	bl	5b48 <MTPD::write(char const*, int) [clone .part.2]>
    6c1e:	ldrb	r6, [r4, #8]
    6c20:	strd	r8, r9, [sp, #128]	; 0x80
    6c24:	cmp	r6, #0
    6c26:	bne.n	6cf6 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6d6>
    6c28:	movs	r2, #8
    6c2a:	add	r1, sp, #128	; 0x80
    6c2c:	mov	r0, r4
    6c2e:	bl	5b48 <MTPD::write(char const*, int) [clone .part.2]>
    6c32:	ldrb	r5, [r4, #8]
    6c34:	str	r6, [sp, #112]	; 0x70
    6c36:	cmp	r5, #0
    6c38:	bne.n	6cc6 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a6>
    6c3a:	movs	r2, #4
    6c3c:	add	r1, sp, #112	; 0x70
    6c3e:	mov	r0, r4
    6c40:	bl	5b48 <MTPD::write(char const*, int) [clone .part.2]>
    6c44:	ldrb	r3, [r4, #8]
    6c46:	strb.w	r5, [sp, #23]
    6c4a:	cmp	r3, #0
    6c4c:	bne.n	6cc2 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a2>
    6c4e:	mov	r0, r4
    6c50:	movs	r2, #1
    6c52:	add.w	r1, sp, #23
    6c56:	bl	5b48 <MTPD::write(char const*, int) [clone .part.2]>
    6c5a:	b.n	66e8 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xc8>
    6c5c:	movs	r2, #2
    6c5e:	add.w	r1, sp, #30
    6c62:	bl	5b48 <MTPD::write(char const*, int) [clone .part.2]>
    6c66:	ldrb	r6, [r4, #8]
    6c68:	movs	r3, #6
    6c6a:	strh.w	r3, [sp, #28]
    6c6e:	cbnz	r6, 6cd2 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6b2>
    6c70:	movs	r2, #2
    6c72:	add	r1, sp, #28
    6c74:	mov	r0, r4
    6c76:	bl	5b48 <MTPD::write(char const*, int) [clone .part.2]>
    6c7a:	ldrb	r5, [r4, #8]
    6c7c:	strb.w	r6, [sp, #5]
    6c80:	cbnz	r5, 6cce <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6ae>
    6c82:	movs	r2, #1
    6c84:	add.w	r1, sp, #5
    6c88:	mov	r0, r4
    6c8a:	bl	5b48 <MTPD::write(char const*, int) [clone .part.2]>
    6c8e:	ldrb	r6, [r4, #8]
    6c90:	str	r5, [sp, #76]	; 0x4c
    6c92:	cbnz	r6, 6cca <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6aa>
    6c94:	movs	r2, #4
    6c96:	add	r1, sp, #76	; 0x4c
    6c98:	mov	r0, r4
    6c9a:	bl	5b48 <MTPD::write(char const*, int) [clone .part.2]>
    6c9e:	ldrb	r5, [r4, #8]
    6ca0:	str	r6, [sp, #72]	; 0x48
    6ca2:	cbnz	r5, 6cc6 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a6>
    6ca4:	movs	r2, #4
    6ca6:	add	r1, sp, #72	; 0x48
    6ca8:	mov	r0, r4
    6caa:	bl	5b48 <MTPD::write(char const*, int) [clone .part.2]>
    6cae:	ldrb	r3, [r4, #8]
    6cb0:	strb.w	r5, [sp, #4]
    6cb4:	cbnz	r3, 6cc2 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a2>
    6cb6:	mov	r0, r4
    6cb8:	movs	r2, #1
    6cba:	add	r1, sp, #4
    6cbc:	bl	5b48 <MTPD::write(char const*, int) [clone .part.2]>
    6cc0:	b.n	66e8 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xc8>
    6cc2:	ldr	r3, [r4, #12]
    6cc4:	b.n	66e4 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xc4>
    6cc6:	ldr	r3, [r4, #12]
    6cc8:	b.n	66e0 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xc0>
    6cca:	ldr	r3, [r4, #12]
    6ccc:	b.n	670c <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xec>
    6cce:	ldr	r3, [r4, #12]
    6cd0:	b.n	6708 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xe8>
    6cd2:	ldr	r3, [r4, #12]
    6cd4:	b.n	6704 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xe4>
    6cd6:	ldr	r3, [r4, #12]
    6cd8:	b.n	66d8 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xb8>
    6cda:	ldr	r3, [r4, #12]
    6cdc:	b.n	66d4 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xb4>
    6cde:	ldr	r3, [r4, #12]
    6ce0:	b.n	67dc <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1bc>
    6ce2:	ldr	r3, [r4, #12]
    6ce4:	b.n	67d8 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1b8>
    6ce6:	ldr	r3, [r4, #12]
    6ce8:	b.n	66dc <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xbc>
    6cea:	ldr	r3, [r4, #12]
    6cec:	b.n	6730 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x110>
    6cee:	ldr	r3, [r4, #12]
    6cf0:	b.n	672c <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x10c>
    6cf2:	ldr	r3, [r4, #12]
    6cf4:	b.n	6728 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x108>
    6cf6:	ldr	r3, [r4, #12]
    6cf8:	b.n	67e0 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1c0>
    6cfa:	ldr	r3, [r4, #12]
    6cfc:	b.n	6a42 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x422>
    6cfe:	ldr	r3, [r4, #12]
    6d00:	b.n	6a3e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x41e>
    6d02:	ldr	r3, [r4, #12]
    6d04:	b.n	6a3a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x41a>
    6d06:	nop

00006d08 <MTPD::receive_buffer()>:
      data_buffer_ = usb_malloc();
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::receive_buffer() {
    6d08:	push	{r4, lr}
    6d0a:	mov	r4, r0
    6d0c:	ldr	r3, [r4, #4]
    while (!data_buffer_) {
      data_buffer_ = usb_rx(MTP_RX_ENDPOINT);
    6d0e:	movs	r0, #5
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::receive_buffer() {
    while (!data_buffer_) {
    6d10:	cbnz	r3, 6d1a <MTPD::receive_buffer()+0x12>
      data_buffer_ = usb_rx(MTP_RX_ENDPOINT);
    6d12:	bl	da00 <usb_rx>
    6d16:	str	r0, [r4, #4]
      if (!data_buffer_) mtp_yield();
    6d18:	cbz	r0, 6d1c <MTPD::receive_buffer()+0x14>
    6d1a:	pop	{r4, pc}
    6d1c:	bl	2118 <mtp_yield()>
    6d20:	b.n	6d0c <MTPD::receive_buffer()+0x4>
    6d22:	nop

00006d24 <MTPD::GetObject(unsigned long)>:
        }
      }
    }
  }
  void MTPD::GetObject(uint32_t object_id) 
  {
    6d24:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6d28:	mov	r6, r0
    uint32_t size = storage_->GetSize(object_id);
    6d2a:	ldr	r0, [r0, #0]
    6d2c:	ldr	r3, [r0, #0]
        }
      }
    }
  }
  void MTPD::GetObject(uint32_t object_id) 
  {
    6d2e:	sub	sp, #8
    uint32_t size = storage_->GetSize(object_id);
    6d30:	ldr	r3, [r3, #40]	; 0x28
        }
      }
    }
  }
  void MTPD::GetObject(uint32_t object_id) 
  {
    6d32:	mov	r8, r1
    uint32_t size = storage_->GetSize(object_id);
    6d34:	blx	r3
    if (write_get_length_) {
    6d36:	ldrb	r5, [r6, #8]
      }
    }
  }
  void MTPD::GetObject(uint32_t object_id) 
  {
    uint32_t size = storage_->GetSize(object_id);
    6d38:	mov	r7, r0
    if (write_get_length_) {
    6d3a:	cbnz	r5, 6d94 <MTPD::GetObject(unsigned long)+0x70>
      write_length_ += size;
    } else {
      uint32_t pos = 0;
      while (pos < size) {
    6d3c:	cbz	r0, 6d8e <MTPD::GetObject(unsigned long)+0x6a>
                    (char*)(data_buffer_->buf + data_buffer_->len), to_copy);
        pos += to_copy;
        data_buffer_->len += to_copy;
        if (data_buffer_->len == sizeof(data_buffer_->buf)) {
          usb_tx(MTP_TX_ENDPOINT, data_buffer_);
          data_buffer_ = NULL;
    6d3e:	mov	r9, r5
    6d40:	b.n	6d46 <MTPD::GetObject(unsigned long)+0x22>
    uint32_t size = storage_->GetSize(object_id);
    if (write_get_length_) {
      write_length_ += size;
    } else {
      uint32_t pos = 0;
      while (pos < size) {
    6d42:	cmp	r7, r5
    6d44:	bls.n	6d8e <MTPD::GetObject(unsigned long)+0x6a>
        get_buffer();
    6d46:	mov	r0, r6
    6d48:	bl	5b30 <MTPD::get_buffer()>
        uint32_t avail = sizeof(data_buffer_->buf) - data_buffer_->len;
        uint32_t to_copy = min(size - pos, avail);
        // Read directly from storage into usb buffer.
        storage_->read(object_id, pos,
    6d4c:	ldmia.w	r6, {r0, r3}
      write_length_ += size;
    } else {
      uint32_t pos = 0;
      while (pos < size) {
        get_buffer();
        uint32_t avail = sizeof(data_buffer_->buf) - data_buffer_->len;
    6d50:	ldrh.w	r2, [r3], #8
        uint32_t to_copy = min(size - pos, avail);
        // Read directly from storage into usb buffer.
        storage_->read(object_id, pos,
                    (char*)(data_buffer_->buf + data_buffer_->len), to_copy);
    6d54:	ldr	r1, [r0, #0]
    6d56:	subs	r4, r7, r5
    6d58:	rsb	lr, r2, #64	; 0x40
    6d5c:	cmp	r4, lr
    6d5e:	it	cs
    6d60:	movcs	r4, lr
    6d62:	str	r4, [sp, #0]
    6d64:	add	r3, r2
    6d66:	ldr.w	sl, [r1, #48]	; 0x30
    6d6a:	mov	r2, r5
    6d6c:	mov	r1, r8
    6d6e:	blx	sl
        pos += to_copy;
        data_buffer_->len += to_copy;
    6d70:	ldr	r1, [r6, #4]
    6d72:	ldrh	r3, [r1, #0]
    6d74:	add	r3, r4
    6d76:	uxth	r3, r3
        if (data_buffer_->len == sizeof(data_buffer_->buf)) {
    6d78:	cmp	r3, #64	; 0x40
        uint32_t avail = sizeof(data_buffer_->buf) - data_buffer_->len;
        uint32_t to_copy = min(size - pos, avail);
        // Read directly from storage into usb buffer.
        storage_->read(object_id, pos,
                    (char*)(data_buffer_->buf + data_buffer_->len), to_copy);
        pos += to_copy;
    6d7a:	add	r5, r4
        data_buffer_->len += to_copy;
    6d7c:	strh	r3, [r1, #0]
        if (data_buffer_->len == sizeof(data_buffer_->buf)) {
    6d7e:	bne.n	6d42 <MTPD::GetObject(unsigned long)+0x1e>
          usb_tx(MTP_TX_ENDPOINT, data_buffer_);
    6d80:	movs	r0, #4
    6d82:	bl	daec <usb_tx>
    uint32_t size = storage_->GetSize(object_id);
    if (write_get_length_) {
      write_length_ += size;
    } else {
      uint32_t pos = 0;
      while (pos < size) {
    6d86:	cmp	r7, r5
                    (char*)(data_buffer_->buf + data_buffer_->len), to_copy);
        pos += to_copy;
        data_buffer_->len += to_copy;
        if (data_buffer_->len == sizeof(data_buffer_->buf)) {
          usb_tx(MTP_TX_ENDPOINT, data_buffer_);
          data_buffer_ = NULL;
    6d88:	str.w	r9, [r6, #4]
    uint32_t size = storage_->GetSize(object_id);
    if (write_get_length_) {
      write_length_ += size;
    } else {
      uint32_t pos = 0;
      while (pos < size) {
    6d8c:	bhi.n	6d46 <MTPD::GetObject(unsigned long)+0x22>
          usb_tx(MTP_TX_ENDPOINT, data_buffer_);
          data_buffer_ = NULL;
        }
      }
    }
  }
    6d8e:	add	sp, #8
    6d90:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  }
  void MTPD::GetObject(uint32_t object_id) 
  {
    uint32_t size = storage_->GetSize(object_id);
    if (write_get_length_) {
      write_length_ += size;
    6d94:	ldr	r3, [r6, #12]
    6d96:	add	r7, r3
    6d98:	str	r7, [r6, #12]
          usb_tx(MTP_TX_ENDPOINT, data_buffer_);
          data_buffer_ = NULL;
        }
      }
    }
  }
    6d9a:	add	sp, #8
    6d9c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00006da0 <MTPD::read(char*, unsigned long)>:
      printf("\n"); \
    }

  void MTPD::read(char* data, uint32_t size) 
  {
    while (size) {
    6da0:	cbz	r2, 6e0c <MTPD::read(char*, unsigned long)+0x6c>
      if(CONTAINER->len>20) printf(" %x", CONTAINER->params[2]); \
      printf("\n"); \
    }

  void MTPD::read(char* data, uint32_t size) 
  {
    6da2:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6da6:	mov	r6, r0
    6da8:	mov	r5, r1
    while (size) {
    6daa:	mov	r8, r2
      }
      size -= to_copy;
      data_buffer_->index += to_copy;
      if (data_buffer_->index == data_buffer_->len) {
        usb_free(data_buffer_);
        data_buffer_ = NULL;
    6dac:	movs	r7, #0
    }

  void MTPD::read(char* data, uint32_t size) 
  {
    while (size) {
      receive_buffer();
    6dae:	mov	r0, r6
    6db0:	bl	6d08 <MTPD::receive_buffer()>
      uint32_t to_copy = data_buffer_->len - data_buffer_->index;
    6db4:	ldr	r3, [r6, #4]
    6db6:	ldrh.w	lr, [r3, #2]
    6dba:	ldrh.w	ip, [r3]
    6dbe:	rsb	r4, lr, ip
    6dc2:	cmp	r4, r8
    6dc4:	it	cs
    6dc6:	movcs	r4, r8
      to_copy = min(to_copy, size);
      if (data) {
        memcpy(data, data_buffer_->buf + data_buffer_->index, to_copy);
    6dc8:	add.w	r1, r3, #8
    6dcc:	add	r1, lr
    6dce:	mov	r0, r5
    6dd0:	mov	r2, r4
        data += to_copy;
      }
      size -= to_copy;
    6dd2:	rsb	r8, r4, r8
  {
    while (size) {
      receive_buffer();
      uint32_t to_copy = data_buffer_->len - data_buffer_->index;
      to_copy = min(to_copy, size);
      if (data) {
    6dd6:	cbz	r5, 6de8 <MTPD::read(char*, unsigned long)+0x48>
        memcpy(data, data_buffer_->buf + data_buffer_->index, to_copy);
    6dd8:	bl	cb00 <memcpy>
    6ddc:	ldr	r3, [r6, #4]
    6dde:	ldrh.w	lr, [r3, #2]
    6de2:	ldrh.w	ip, [r3]
        data += to_copy;
    6de6:	add	r5, r4
      }
      size -= to_copy;
      data_buffer_->index += to_copy;
    6de8:	add	r4, lr
    6dea:	uxth	r4, r4
      if (data_buffer_->index == data_buffer_->len) {
    6dec:	cmp	ip, r4
      if (data) {
        memcpy(data, data_buffer_->buf + data_buffer_->index, to_copy);
        data += to_copy;
      }
      size -= to_copy;
      data_buffer_->index += to_copy;
    6dee:	strh	r4, [r3, #2]
      if (data_buffer_->index == data_buffer_->len) {
    6df0:	beq.n	6dfc <MTPD::read(char*, unsigned long)+0x5c>
      printf("\n"); \
    }

  void MTPD::read(char* data, uint32_t size) 
  {
    while (size) {
    6df2:	cmp.w	r8, #0
    6df6:	bne.n	6dae <MTPD::read(char*, unsigned long)+0xe>
    6df8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        data += to_copy;
      }
      size -= to_copy;
      data_buffer_->index += to_copy;
      if (data_buffer_->index == data_buffer_->len) {
        usb_free(data_buffer_);
    6dfc:	mov	r0, r3
    6dfe:	bl	d9b4 <usb_free>
        data_buffer_ = NULL;
    6e02:	str	r7, [r6, #4]
      printf("\n"); \
    }

  void MTPD::read(char* data, uint32_t size) 
  {
    while (size) {
    6e04:	cmp.w	r8, #0
    6e08:	bne.n	6dae <MTPD::read(char*, unsigned long)+0xe>
    6e0a:	b.n	6df8 <MTPD::read(char*, unsigned long)+0x58>
    6e0c:	bx	lr
    6e0e:	nop

00006e10 <MTPD::readstring(char*)>:

  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
  uint32_t MTPD::read32() { uint32_t ret; read((char*)&ret, sizeof(ret)); return ret; }

  void MTPD::readstring(char* buffer) {
    6e10:	push	{r4, r5, r6, lr}
    6e12:	sub	sp, #8
      return header.len - 12;
    else
      return 0;
  }

  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
    6e14:	movs	r2, #1
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
  uint32_t MTPD::read32() { uint32_t ret; read((char*)&ret, sizeof(ret)); return ret; }

  void MTPD::readstring(char* buffer) {
    6e16:	mov	r4, r1
      return header.len - 12;
    else
      return 0;
  }

  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
    6e18:	add.w	r1, sp, #6
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
  uint32_t MTPD::read32() { uint32_t ret; read((char*)&ret, sizeof(ret)); return ret; }

  void MTPD::readstring(char* buffer) {
    6e1c:	mov	r6, r0
      return header.len - 12;
    else
      return 0;
  }

  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
    6e1e:	bl	6da0 <MTPD::read(char*, unsigned long)>
    6e22:	ldrb.w	r2, [sp, #6]
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
  uint32_t MTPD::read32() { uint32_t ret; read((char*)&ret, sizeof(ret)); return ret; }

  void MTPD::readstring(char* buffer) {
    int len = read8();
    if (!buffer) {
    6e26:	cbz	r4, 6e48 <MTPD::readstring(char*)+0x38>
    6e28:	adds	r5, r4, r2
      read(NULL, len * 2);
    } else {
      for (int i = 0; i < len; i++) {
    6e2a:	cbz	r2, 6e44 <MTPD::readstring(char*)+0x34>
    else
      return 0;
  }

  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    6e2c:	movs	r2, #2
    6e2e:	add.w	r1, sp, #6
    6e32:	mov	r0, r6
    6e34:	bl	6da0 <MTPD::read(char*, unsigned long)>
    6e38:	ldrh.w	r3, [sp, #6]
    if (!buffer) {
      read(NULL, len * 2);
    } else {
      for (int i = 0; i < len; i++) {
        int16_t c2;
        *(buffer++) = c2 = read16();
    6e3c:	strb.w	r3, [r4], #1
  void MTPD::readstring(char* buffer) {
    int len = read8();
    if (!buffer) {
      read(NULL, len * 2);
    } else {
      for (int i = 0; i < len; i++) {
    6e40:	cmp	r5, r4
    6e42:	bne.n	6e2c <MTPD::readstring(char*)+0x1c>
        int16_t c2;
        *(buffer++) = c2 = read16();
      }
    }
  }
    6e44:	add	sp, #8
    6e46:	pop	{r4, r5, r6, pc}
  uint32_t MTPD::read32() { uint32_t ret; read((char*)&ret, sizeof(ret)); return ret; }

  void MTPD::readstring(char* buffer) {
    int len = read8();
    if (!buffer) {
      read(NULL, len * 2);
    6e48:	lsls	r2, r2, #1
    6e4a:	mov	r1, r4
    6e4c:	mov	r0, r6
    6e4e:	bl	6da0 <MTPD::read(char*, unsigned long)>
    6e52:	b.n	6e44 <MTPD::readstring(char*)+0x34>

00006e54 <MTPD::setObjectPropValue(unsigned long, unsigned long) [clone .part.6]>:
    }
    storage_->close();
    return true;
  }
  
    uint32_t MTPD::setObjectPropValue(uint32_t p1, uint32_t p2)
    6e54:	push	{r4, r5, lr}
    6e56:	sub	sp, #260	; 0x104
    6e58:	mov	r4, r0
    6e5a:	mov	r5, r1
  }

  uint32_t MTPD::ReadMTPHeader() 
  {
    MTPHeader header;
    read((char *)&header, sizeof(MTPHeader));
    6e5c:	movs	r2, #12
    6e5e:	mov	r1, sp
    6e60:	bl	6da0 <MTPD::read(char*, unsigned long)>
      receive_buffer();
      if(p2==0xDC07)
      {
        char filename[MAX_FILENAME_LEN];
        ReadMTPHeader();
        readstring(filename);
    6e64:	mov	r1, sp
    6e66:	mov	r0, r4
    6e68:	bl	6e10 <MTPD::readstring(char*)>

        storage_->rename(p1,filename);
    6e6c:	ldr	r0, [r4, #0]
    6e6e:	ldr	r3, [r0, #0]
    6e70:	mov	r2, sp
    6e72:	mov	r1, r5
    6e74:	ldr	r3, [r3, #72]	; 0x48
    6e76:	blx	r3

        return 0x2001;
      }
      else
        return 0x2005;
    }
    6e78:	movw	r0, #8193	; 0x2001
    6e7c:	add	sp, #260	; 0x104
    6e7e:	pop	{r4, r5, pc}

00006e80 <MTPD::SendObjectInfo(unsigned long, unsigned long)>:
        data_buffer_ = NULL;
      }
    }
  }

  uint32_t MTPD::SendObjectInfo(uint32_t storage, uint32_t parent) {
    6e80:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6e84:	sub	sp, #276	; 0x114
  }

  uint32_t MTPD::ReadMTPHeader() 
  {
    MTPHeader header;
    read((char *)&header, sizeof(MTPHeader));
    6e86:	add	r7, sp, #16
        data_buffer_ = NULL;
      }
    }
  }

  uint32_t MTPD::SendObjectInfo(uint32_t storage, uint32_t parent) {
    6e88:	mov	r9, r1
    6e8a:	mov	fp, r2
  }

  uint32_t MTPD::ReadMTPHeader() 
  {
    MTPHeader header;
    read((char *)&header, sizeof(MTPHeader));
    6e8c:	mov	r1, r7
    6e8e:	movs	r2, #12
        data_buffer_ = NULL;
      }
    }
  }

  uint32_t MTPD::SendObjectInfo(uint32_t storage, uint32_t parent) {
    6e90:	mov	r5, r0
  }

  uint32_t MTPD::ReadMTPHeader() 
  {
    MTPHeader header;
    read((char *)&header, sizeof(MTPHeader));
    6e92:	bl	6da0 <MTPD::read(char*, unsigned long)>
    // check that the type is data
    if(header.type==2)
    6e96:	ldrh	r3, [r7, #4]
    6e98:	cmp	r3, #2
    6e9a:	it	eq
    6e9c:	ldreq	r4, [r7, #0]
      return 0;
  }

  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
  uint32_t MTPD::read32() { uint32_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    6e9e:	mov.w	r2, #4
    6ea2:	mov	r1, r7
    6ea4:	mov	r0, r5
    6ea6:	ite	eq
    6ea8:	subeq	r4, #65	; 0x41
  uint32_t MTPD::ReadMTPHeader() 
  {
    MTPHeader header;
    read((char *)&header, sizeof(MTPHeader));
    // check that the type is data
    if(header.type==2)
    6eaa:	mvnne.w	r4, #52	; 0x34
      return 0;
  }

  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
  uint32_t MTPD::read32() { uint32_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    6eae:	bl	6da0 <MTPD::read(char*, unsigned long)>
    else
      return 0;
  }

  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    6eb2:	movs	r2, #2
    6eb4:	mov	r1, r7
    6eb6:	mov	r0, r5
    6eb8:	bl	6da0 <MTPD::read(char*, unsigned long)>
    6ebc:	ldrh.w	sl, [r7]
    char filename[MAX_FILENAME_LEN];

    uint32_t store = Storage2Store(storage);

    read32(); len-=4; // storage
    bool dir = read16() == 0x3001; len-=2; // format
    6ec0:	movw	r3, #12289	; 0x3001
    else
      return 0;
  }

  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    6ec4:	movs	r2, #2
    6ec6:	mov	r1, r7
    6ec8:	mov	r0, r5
    char filename[MAX_FILENAME_LEN];

    uint32_t store = Storage2Store(storage);

    read32(); len-=4; // storage
    bool dir = read16() == 0x3001; len-=2; // format
    6eca:	rsb	sl, r3, sl
    else
      return 0;
  }

  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    6ece:	bl	6da0 <MTPD::read(char*, unsigned long)>
  uint32_t MTPD::read32() { uint32_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    6ed2:	movs	r2, #4
    6ed4:	mov	r1, r7
    6ed6:	mov	r0, r5
    6ed8:	bl	6da0 <MTPD::read(char*, unsigned long)>
    else
      return 0;
  }

  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    6edc:	movs	r2, #2
    6ede:	mov	r1, r7
    6ee0:	mov	r0, r5
    6ee2:	bl	6da0 <MTPD::read(char*, unsigned long)>
  uint32_t MTPD::read32() { uint32_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    6ee6:	movs	r2, #4
    6ee8:	mov	r1, r7
    6eea:	mov	r0, r5
    6eec:	bl	6da0 <MTPD::read(char*, unsigned long)>
    6ef0:	movs	r2, #4
    6ef2:	mov	r1, r7
    6ef4:	mov	r0, r5
    6ef6:	bl	6da0 <MTPD::read(char*, unsigned long)>
    6efa:	movs	r2, #4
    6efc:	mov	r1, r7
    6efe:	mov	r0, r5
    6f00:	bl	6da0 <MTPD::read(char*, unsigned long)>
    6f04:	movs	r2, #4
    6f06:	mov	r1, r7
    6f08:	mov	r0, r5
    6f0a:	bl	6da0 <MTPD::read(char*, unsigned long)>
    6f0e:	movs	r2, #4
    6f10:	mov	r1, r7
    6f12:	mov	r0, r5
    6f14:	bl	6da0 <MTPD::read(char*, unsigned long)>
    6f18:	movs	r2, #4
    6f1a:	mov	r1, r7
    6f1c:	mov	r0, r5
    6f1e:	bl	6da0 <MTPD::read(char*, unsigned long)>
    6f22:	movs	r2, #4
    6f24:	mov	r1, r7
    6f26:	mov	r0, r5
    6f28:	bl	6da0 <MTPD::read(char*, unsigned long)>
    else
      return 0;
  }

  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    6f2c:	movs	r2, #2
    6f2e:	mov	r1, r7
    6f30:	mov	r0, r5
    6f32:	bl	6da0 <MTPD::read(char*, unsigned long)>
  uint32_t MTPD::read32() { uint32_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    6f36:	movs	r2, #4
    6f38:	mov	r1, r7
    6f3a:	mov	r0, r5
    6f3c:	bl	6da0 <MTPD::read(char*, unsigned long)>
    6f40:	movs	r2, #4
    6f42:	mov	r1, r7
    6f44:	mov	r0, r5
    6f46:	bl	6da0 <MTPD::read(char*, unsigned long)>
    read32(); len-=4; // parent
    read16(); len-=2; // association type
    read32(); len-=4; // association description
    read32(); len-=4; // sequence number

    readstring(filename); len -= (2*(strlen(filename)+1)+1); 
    6f4a:	mov	r1, r7
    6f4c:	mov	r0, r5
    6f4e:	bl	6e10 <MTPD::readstring(char*)>
    6f52:	mov	r0, r7
    6f54:	bl	10d00 <strlen>
    6f58:	adds	r0, #1
    6f5a:	sub.w	r4, r4, r0, lsl #1
    char filename[MAX_FILENAME_LEN];

    uint32_t store = Storage2Store(storage);

    read32(); len-=4; // storage
    bool dir = read16() == 0x3001; len-=2; // format
    6f5e:	clz	sl, sl
    read32(); len-=4; // association description
    read32(); len-=4; // sequence number

    readstring(filename); len -= (2*(strlen(filename)+1)+1); 
    // ignore rest of ObjectInfo
    while(len>=4) { read32(); len-=4;}
    6f62:	cmp	r4, #3
    char filename[MAX_FILENAME_LEN];

    uint32_t store = Storage2Store(storage);

    read32(); len-=4; // storage
    bool dir = read16() == 0x3001; len-=2; // format
    6f64:	mov.w	sl, sl, lsr #5

  uint32_t MTPD::SendObjectInfo(uint32_t storage, uint32_t parent) {
    uint32_t len = ReadMTPHeader();
    char filename[MAX_FILENAME_LEN];

    uint32_t store = Storage2Store(storage);
    6f68:	add.w	r9, r9, #4294967295
    read32(); len-=4; // association description
    read32(); len-=4; // sequence number

    readstring(filename); len -= (2*(strlen(filename)+1)+1); 
    // ignore rest of ObjectInfo
    while(len>=4) { read32(); len-=4;}
    6f6c:	bls.n	6f88 <MTPD::SendObjectInfo(unsigned long, unsigned long)+0x108>
    6f6e:	mov	r6, r4
    6f70:	add.w	r8, sp, #12
    6f74:	subs	r6, #4
      return 0;
  }

  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
  uint32_t MTPD::read32() { uint32_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    6f76:	movs	r2, #4
    6f78:	mov	r1, r8
    6f7a:	mov	r0, r5
    6f7c:	bl	6da0 <MTPD::read(char*, unsigned long)>
    read32(); len-=4; // association description
    read32(); len-=4; // sequence number

    readstring(filename); len -= (2*(strlen(filename)+1)+1); 
    // ignore rest of ObjectInfo
    while(len>=4) { read32(); len-=4;}
    6f80:	cmp	r6, #3
    6f82:	bhi.n	6f74 <MTPD::SendObjectInfo(unsigned long, unsigned long)+0xf4>
    6f84:	and.w	r4, r4, #3
    6f88:	add.w	r8, sp, #12
    while(len) {read8(); len--;}
    6f8c:	cbz	r4, 6f9c <MTPD::SendObjectInfo(unsigned long, unsigned long)+0x11c>
      return header.len - 12;
    else
      return 0;
  }

  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
    6f8e:	movs	r2, #1
    6f90:	mov	r1, r8
    6f92:	mov	r0, r5
    6f94:	bl	6da0 <MTPD::read(char*, unsigned long)>
    read32(); len-=4; // sequence number

    readstring(filename); len -= (2*(strlen(filename)+1)+1); 
    // ignore rest of ObjectInfo
    while(len>=4) { read32(); len-=4;}
    while(len) {read8(); len--;}
    6f98:	subs	r4, #1
    6f9a:	bne.n	6f8e <MTPD::SendObjectInfo(unsigned long, unsigned long)+0x10e>
    
    return storage_->Create(store, parent, dir, filename);
    6f9c:	ldr	r0, [r5, #0]
    6f9e:	ldr	r4, [r0, #0]
    6fa0:	str	r7, [sp, #0]
    6fa2:	mov	r3, sl
    6fa4:	mov	r2, fp
    6fa6:	mov	r1, r9
    6fa8:	ldr	r4, [r4, #44]	; 0x2c
    6faa:	blx	r4
  }
    6fac:	add	sp, #276	; 0x114
    6fae:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6fb2:	nop

00006fb4 <MTPD::SendObject()>:

  bool MTPD::SendObject() {
    6fb4:	push	{r4, r5, r6, r7, lr}
    6fb6:	sub	sp, #20
  }

  uint32_t MTPD::ReadMTPHeader() 
  {
    MTPHeader header;
    read((char *)&header, sizeof(MTPHeader));
    6fb8:	movs	r2, #12
    6fba:	add	r1, sp, #4
    while(len) {read8(); len--;}
    
    return storage_->Create(store, parent, dir, filename);
  }

  bool MTPD::SendObject() {
    6fbc:	mov	r6, r0
  }

  uint32_t MTPD::ReadMTPHeader() 
  {
    MTPHeader header;
    read((char *)&header, sizeof(MTPHeader));
    6fbe:	bl	6da0 <MTPD::read(char*, unsigned long)>
    // check that the type is data
    if(header.type==2)
    6fc2:	ldrh.w	r3, [sp, #8]
    6fc6:	cmp	r3, #2
    6fc8:	beq.n	6fd8 <MTPD::SendObject()+0x24>
      {
        usb_free(data_buffer_);
        data_buffer_ = NULL;
      }
    }
    storage_->close();
    6fca:	ldr	r0, [r6, #0]
    6fcc:	ldr	r3, [r0, #0]
    6fce:	ldr	r3, [r3, #56]	; 0x38
    6fd0:	blx	r3
    return true;
    6fd2:	movs	r0, #1
  }
    6fd4:	add	sp, #20
    6fd6:	pop	{r4, r5, r6, r7, pc}
  {
    MTPHeader header;
    read((char *)&header, sizeof(MTPHeader));
    // check that the type is data
    if(header.type==2)
      return header.len - 12;
    6fd8:	ldr	r7, [sp, #4]
    return storage_->Create(store, parent, dir, filename);
  }

  bool MTPD::SendObject() {
    uint32_t len = ReadMTPHeader();
    while (len) 
    6fda:	subs	r7, #12
    6fdc:	beq.n	6fca <MTPD::SendObject()+0x16>
      data_buffer_->index += to_copy;
      len -= to_copy;
      if (data_buffer_->index == data_buffer_->len) 
      {
        usb_free(data_buffer_);
        data_buffer_ = NULL;
    6fde:	movs	r5, #0

  bool MTPD::SendObject() {
    uint32_t len = ReadMTPHeader();
    while (len) 
    { 
      receive_buffer();
    6fe0:	mov	r0, r6
    6fe2:	bl	6d08 <MTPD::receive_buffer()>
      uint32_t to_copy = data_buffer_->len - data_buffer_->index;
      to_copy = min(to_copy, len);
      if(!storage_->write((char*)(data_buffer_->buf + data_buffer_->index), to_copy)) return false;
    6fe6:	ldmia.w	r6, {r0, r1}
  bool MTPD::SendObject() {
    uint32_t len = ReadMTPHeader();
    while (len) 
    { 
      receive_buffer();
      uint32_t to_copy = data_buffer_->len - data_buffer_->index;
    6fea:	ldrh	r2, [r1, #2]
    6fec:	ldrh.w	r4, [r1], #8
      to_copy = min(to_copy, len);
      if(!storage_->write((char*)(data_buffer_->buf + data_buffer_->index), to_copy)) return false;
    6ff0:	ldr	r3, [r0, #0]
  bool MTPD::SendObject() {
    uint32_t len = ReadMTPHeader();
    while (len) 
    { 
      receive_buffer();
      uint32_t to_copy = data_buffer_->len - data_buffer_->index;
    6ff2:	subs	r4, r4, r2
    6ff4:	cmp	r4, r7
    6ff6:	it	cs
    6ff8:	movcs	r4, r7
      to_copy = min(to_copy, len);
      if(!storage_->write((char*)(data_buffer_->buf + data_buffer_->index), to_copy)) return false;
    6ffa:	add	r1, r2
    6ffc:	ldr	r3, [r3, #52]	; 0x34
    6ffe:	mov	r2, r4
    7000:	blx	r3
      data_buffer_->index += to_copy;
      len -= to_copy;
    7002:	subs	r7, r7, r4
    while (len) 
    { 
      receive_buffer();
      uint32_t to_copy = data_buffer_->len - data_buffer_->index;
      to_copy = min(to_copy, len);
      if(!storage_->write((char*)(data_buffer_->buf + data_buffer_->index), to_copy)) return false;
    7004:	cmp	r0, #0
    7006:	beq.n	6fd4 <MTPD::SendObject()+0x20>
      data_buffer_->index += to_copy;
    7008:	ldr	r0, [r6, #4]
    700a:	ldrh	r3, [r0, #2]
      len -= to_copy;
      if (data_buffer_->index == data_buffer_->len) 
    700c:	ldrh	r2, [r0, #0]
    { 
      receive_buffer();
      uint32_t to_copy = data_buffer_->len - data_buffer_->index;
      to_copy = min(to_copy, len);
      if(!storage_->write((char*)(data_buffer_->buf + data_buffer_->index), to_copy)) return false;
      data_buffer_->index += to_copy;
    700e:	add	r4, r3
    7010:	uxth	r4, r4
      len -= to_copy;
      if (data_buffer_->index == data_buffer_->len) 
    7012:	cmp	r2, r4
    { 
      receive_buffer();
      uint32_t to_copy = data_buffer_->len - data_buffer_->index;
      to_copy = min(to_copy, len);
      if(!storage_->write((char*)(data_buffer_->buf + data_buffer_->index), to_copy)) return false;
      data_buffer_->index += to_copy;
    7014:	strh	r4, [r0, #2]
      len -= to_copy;
      if (data_buffer_->index == data_buffer_->len) 
    7016:	beq.n	701e <MTPD::SendObject()+0x6a>
    return storage_->Create(store, parent, dir, filename);
  }

  bool MTPD::SendObject() {
    uint32_t len = ReadMTPHeader();
    while (len) 
    7018:	cmp	r7, #0
    701a:	bne.n	6fe0 <MTPD::SendObject()+0x2c>
    701c:	b.n	6fca <MTPD::SendObject()+0x16>
      if(!storage_->write((char*)(data_buffer_->buf + data_buffer_->index), to_copy)) return false;
      data_buffer_->index += to_copy;
      len -= to_copy;
      if (data_buffer_->index == data_buffer_->len) 
      {
        usb_free(data_buffer_);
    701e:	bl	d9b4 <usb_free>
        data_buffer_ = NULL;
    7022:	str	r5, [r6, #4]
    return storage_->Create(store, parent, dir, filename);
  }

  bool MTPD::SendObject() {
    uint32_t len = ReadMTPHeader();
    while (len) 
    7024:	cmp	r7, #0
    7026:	bne.n	6fe0 <MTPD::SendObject()+0x2c>
    7028:	b.n	6fca <MTPD::SendObject()+0x16>
    702a:	nop

0000702c <MTPD::loop()>:
      else
        return 0x2005;
    }

  void MTPD::loop(void) 
  {
    702c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7030:	mov	r5, r0
    7032:	sub	sp, #36	; 0x24
    usb_packet_t *receive_buffer;
    if ((receive_buffer = usb_rx(MTP_RX_ENDPOINT))) {
    7034:	movs	r0, #5
    7036:	bl	da00 <usb_rx>
    703a:	cmp	r0, #0
    703c:	beq.n	70a2 <MTPD::loop()+0x76>
      printContainer();
    703e:	ldr	r1, [r0, #16]
    7040:	ldr	r3, [r0, #8]
    7042:	ldrh	r2, [r0, #14]
    7044:	str	r1, [sp, #4]
    7046:	ldrh	r1, [r0, #12]
    7048:	str	r1, [sp, #0]
    704a:	mov	r4, r0
    704c:	ldr	r1, [pc, #764]	; (734c <MTPD::loop()+0x320>)
    704e:	ldr	r0, [pc, #768]	; (7350 <MTPD::loop()+0x324>)
    7050:	bl	e7dc <Print::printf(char const*, ...)>
    7054:	ldr	r3, [r4, #8]
    7056:	cmp	r3, #12
    7058:	bhi.n	70ea <MTPD::loop()+0xbe>
    705a:	ldr	r1, [pc, #760]	; (7354 <MTPD::loop()+0x328>)
    705c:	ldr	r0, [pc, #752]	; (7350 <MTPD::loop()+0x324>)
    705e:	bl	e7dc <Print::printf(char const*, ...)>
        int len= CONTAINER->len;
        int typ= CONTAINER->type;
        TID=id;

      uint32_t return_code = 0;
      if (receive_buffer->len >= 12) {
    7062:	ldrh	r2, [r4, #0]
      
        int op = CONTAINER->op;
        int p1 = CONTAINER->params[0];
        int p2 = CONTAINER->params[1];
        int p3 = CONTAINER->params[2];
        int id = CONTAINER->transaction_id;
    7064:	ldr	r6, [r4, #16]
  {
    usb_packet_t *receive_buffer;
    if ((receive_buffer = usb_rx(MTP_RX_ENDPOINT))) {
      printContainer();
      
        int op = CONTAINER->op;
    7066:	ldrh	r0, [r4, #14]
        int p1 = CONTAINER->params[0];
        int p2 = CONTAINER->params[1];
        int p3 = CONTAINER->params[2];
        int id = CONTAINER->transaction_id;
        int len= CONTAINER->len;
    7068:	ldr	r7, [r4, #8]
        int typ= CONTAINER->type;
    706a:	ldrh	r1, [r4, #12]
      printContainer();
      
        int op = CONTAINER->op;
        int p1 = CONTAINER->params[0];
        int p2 = CONTAINER->params[1];
        int p3 = CONTAINER->params[2];
    706c:	add.w	r3, r4, #20
        int len= CONTAINER->len;
        int typ= CONTAINER->type;
        TID=id;

      uint32_t return_code = 0;
      if (receive_buffer->len >= 12) {
    7070:	cmp	r2, #11
      printContainer();
      
        int op = CONTAINER->op;
        int p1 = CONTAINER->params[0];
        int p2 = CONTAINER->params[1];
        int p3 = CONTAINER->params[2];
    7072:	ldmia.w	r3, {r3, r9, fp}
        int id = CONTAINER->transaction_id;
        int len= CONTAINER->len;
        int typ= CONTAINER->type;
        TID=id;
    7076:	str	r6, [r5, #16]

      uint32_t return_code = 0;
      if (receive_buffer->len >= 12) {
    7078:	bls.n	70e2 <MTPD::loop()+0xb6>
        return_code = 0x2001;  // Ok
        receive_buffer->len = 12;
    707a:	mov.w	sl, #12
        
        if (typ == 1) { // command
    707e:	cmp	r1, #1
        TID=id;

      uint32_t return_code = 0;
      if (receive_buffer->len >= 12) {
        return_code = 0x2001;  // Ok
        receive_buffer->len = 12;
    7080:	strh.w	sl, [r4]
    usb_packet_t *receive_buffer;
    if ((receive_buffer = usb_rx(MTP_RX_ENDPOINT))) {
      printContainer();
      
        int op = CONTAINER->op;
        int p1 = CONTAINER->params[0];
    7084:	mov	r8, r3
      uint32_t return_code = 0;
      if (receive_buffer->len >= 12) {
        return_code = 0x2001;  // Ok
        receive_buffer->len = 12;
        
        if (typ == 1) { // command
    7086:	beq.n	7142 <MTPD::loop()+0x116>
    7088:	mov.w	r0, #8192	; 0x2000
        } else {
          return_code = 0x2000;  // undefined
        }
      }
      if (return_code) {
        CONTAINER->type=3;
    708c:	movs	r3, #3
        CONTAINER->len=len;
        CONTAINER->op=return_code;
    708e:	strh	r0, [r4, #14]
          return_code = 0x2000;  // undefined
        }
      }
      if (return_code) {
        CONTAINER->type=3;
        CONTAINER->len=len;
    7090:	str	r7, [r4, #8]
        CONTAINER->op=return_code;
        CONTAINER->transaction_id=id;
    7092:	str	r6, [r4, #16]
        CONTAINER->params[0]=p1;
    7094:	str.w	r8, [r4, #20]
        } else {
          return_code = 0x2000;  // undefined
        }
      }
      if (return_code) {
        CONTAINER->type=3;
    7098:	strh	r3, [r4, #12]
        CONTAINER->params[0]=p1;
        #if DEBUG>1
          printContainer();
        #endif

        usb_tx(MTP_TX_ENDPOINT, receive_buffer);
    709a:	mov	r1, r4
    709c:	movs	r0, #4
    709e:	bl	daec <usb_tx>
      } else {
          usb_free(receive_buffer);
      }
    }
    // Maybe put event handling inside mtp_yield()?
    if ((receive_buffer = usb_rx(MTP_EVENT_ENDPOINT))) {
    70a2:	movs	r0, #6
    70a4:	bl	da00 <usb_rx>
    70a8:	mov	r4, r0
    70aa:	cbz	r0, 70dc <MTPD::loop()+0xb0>
      printf("Event: "); printContainer();
    70ac:	ldr	r1, [pc, #680]	; (7358 <MTPD::loop()+0x32c>)
    70ae:	ldr	r0, [pc, #672]	; (7350 <MTPD::loop()+0x324>)
    70b0:	bl	e7dc <Print::printf(char const*, ...)>
    70b4:	ldr	r1, [r4, #16]
    70b6:	ldr	r3, [r4, #8]
    70b8:	ldrh	r2, [r4, #14]
    70ba:	str	r1, [sp, #4]
    70bc:	ldrh	r1, [r4, #12]
    70be:	str	r1, [sp, #0]
    70c0:	ldr	r0, [pc, #652]	; (7350 <MTPD::loop()+0x324>)
    70c2:	ldr	r1, [pc, #648]	; (734c <MTPD::loop()+0x320>)
    70c4:	bl	e7dc <Print::printf(char const*, ...)>
    70c8:	ldr	r3, [r4, #8]
    70ca:	cmp	r3, #12
    70cc:	bhi.n	7116 <MTPD::loop()+0xea>
    70ce:	ldr	r1, [pc, #644]	; (7354 <MTPD::loop()+0x328>)
    70d0:	ldr	r0, [pc, #636]	; (7350 <MTPD::loop()+0x324>)
    70d2:	bl	e7dc <Print::printf(char const*, ...)>
      usb_free(receive_buffer);
    70d6:	mov	r0, r4
    70d8:	bl	d9b4 <usb_free>
    }
  }
    70dc:	add	sp, #36	; 0x24
    70de:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        #endif

        usb_tx(MTP_TX_ENDPOINT, receive_buffer);
        receive_buffer = 0;
      } else {
          usb_free(receive_buffer);
    70e2:	mov	r0, r4
    70e4:	bl	d9b4 <usb_free>
    70e8:	b.n	70a2 <MTPD::loop()+0x76>

  void MTPD::loop(void) 
  {
    usb_packet_t *receive_buffer;
    if ((receive_buffer = usb_rx(MTP_RX_ENDPOINT))) {
      printContainer();
    70ea:	ldr	r2, [r4, #20]
    70ec:	ldr	r1, [pc, #620]	; (735c <MTPD::loop()+0x330>)
    70ee:	ldr	r0, [pc, #608]	; (7350 <MTPD::loop()+0x324>)
    70f0:	bl	e7dc <Print::printf(char const*, ...)>
    70f4:	ldr	r3, [r4, #8]
    70f6:	cmp	r3, #16
    70f8:	bls.n	705a <MTPD::loop()+0x2e>
    70fa:	ldr	r2, [r4, #24]
    70fc:	ldr	r1, [pc, #604]	; (735c <MTPD::loop()+0x330>)
    70fe:	ldr	r0, [pc, #592]	; (7350 <MTPD::loop()+0x324>)
    7100:	bl	e7dc <Print::printf(char const*, ...)>
    7104:	ldr	r3, [r4, #8]
    7106:	cmp	r3, #20
    7108:	bls.n	705a <MTPD::loop()+0x2e>
    710a:	ldr	r2, [r4, #28]
    710c:	ldr	r1, [pc, #588]	; (735c <MTPD::loop()+0x330>)
    710e:	ldr	r0, [pc, #576]	; (7350 <MTPD::loop()+0x324>)
    7110:	bl	e7dc <Print::printf(char const*, ...)>
    7114:	b.n	705a <MTPD::loop()+0x2e>
          usb_free(receive_buffer);
      }
    }
    // Maybe put event handling inside mtp_yield()?
    if ((receive_buffer = usb_rx(MTP_EVENT_ENDPOINT))) {
      printf("Event: "); printContainer();
    7116:	ldr	r2, [r4, #20]
    7118:	ldr	r1, [pc, #576]	; (735c <MTPD::loop()+0x330>)
    711a:	ldr	r0, [pc, #564]	; (7350 <MTPD::loop()+0x324>)
    711c:	bl	e7dc <Print::printf(char const*, ...)>
    7120:	ldr	r3, [r4, #8]
    7122:	cmp	r3, #16
    7124:	bls.n	70ce <MTPD::loop()+0xa2>
    7126:	ldr	r2, [r4, #24]
    7128:	ldr	r1, [pc, #560]	; (735c <MTPD::loop()+0x330>)
    712a:	ldr	r0, [pc, #548]	; (7350 <MTPD::loop()+0x324>)
    712c:	bl	e7dc <Print::printf(char const*, ...)>
    7130:	ldr	r3, [r4, #8]
    7132:	cmp	r3, #20
    7134:	bls.n	70ce <MTPD::loop()+0xa2>
    7136:	ldr	r2, [r4, #28]
    7138:	ldr	r1, [pc, #544]	; (735c <MTPD::loop()+0x330>)
    713a:	ldr	r0, [pc, #532]	; (7350 <MTPD::loop()+0x324>)
    713c:	bl	e7dc <Print::printf(char const*, ...)>
    7140:	b.n	70ce <MTPD::loop()+0xa2>
      if (receive_buffer->len >= 12) {
        return_code = 0x2001;  // Ok
        receive_buffer->len = 12;
        
        if (typ == 1) { // command
          switch (op) {
    7142:	movw	r2, #4108	; 0x100c
    7146:	cmp	r0, r2
    7148:	beq.w	7486 <MTPD::loop()+0x45a>
    714c:	bhi.n	718a <MTPD::loop()+0x15e>
    714e:	movw	r2, #4101	; 0x1005
    7152:	cmp	r0, r2
    7154:	beq.w	758c <MTPD::loop()+0x560>
    7158:	bls.n	7214 <MTPD::loop()+0x1e8>
    715a:	movw	r2, #4104	; 0x1008
    715e:	cmp	r0, r2
    7160:	beq.w	754c <MTPD::loop()+0x520>
    7164:	bhi.w	72e0 <MTPD::loop()+0x2b4>
    7168:	movw	r2, #4102	; 0x1006
    716c:	cmp	r0, r2
    716e:	beq.w	73cc <MTPD::loop()+0x3a0>
    7172:	movw	r2, #4103	; 0x1007
    7176:	cmp	r0, r2
    7178:	bne.w	72da <MTPD::loop()+0x2ae>
              } else {
                p1 = GetNumObjects(p1, p3);
              }
              break;
            case 0x1007:  // GetObjectHandles
              if (p2) {
    717c:	cmp.w	r9, #0
    7180:	beq.w	75f0 <MTPD::loop()+0x5c4>
              break;
            case 0x1009:  // GetObject
              TRANSMIT(GetObject(p1));
              break;
            case 0x100B:  // DeleteObject
              if (p2) {
    7184:	movw	r0, #8212	; 0x2014
    7188:	b.n	708c <MTPD::loop()+0x60>
      if (receive_buffer->len >= 12) {
        return_code = 0x2001;  // Ok
        receive_buffer->len = 12;
        
        if (typ == 1) { // command
          switch (op) {
    718a:	movw	r2, #4121	; 0x1019
    718e:	cmp	r0, r2
    7190:	beq.w	7524 <MTPD::loop()+0x4f8>
    7194:	bls.n	7270 <MTPD::loop()+0x244>
    7196:	movw	r2, #38914	; 0x9802
    719a:	cmp	r0, r2
    719c:	beq.w	74a0 <MTPD::loop()+0x474>
    71a0:	bhi.w	7316 <MTPD::loop()+0x2ea>
    71a4:	movw	r2, #4122	; 0x101a
    71a8:	cmp	r0, r2
    71aa:	beq.w	75cc <MTPD::loop()+0x5a0>
    71ae:	movw	r2, #38913	; 0x9801
    71b2:	cmp	r0, r2
    71b4:	bne.w	72da <MTPD::loop()+0x2ae>
              if(! return_code) { len  = receive_buffer->len = 12; return_code = 0x2005; }
              else {p1 = return_code; return_code=0x2001;}
              break;

          case 0x9801:  // getObjectPropsSupported
              TRANSMIT(getObjectPropsSupported(p1));
    71b8:	movs	r2, #1
    71ba:	mov.w	r9, #0
    71be:	mov	r1, r3
    71c0:	strb	r2, [r5, #8]
    71c2:	mov	r0, r5
    71c4:	str.w	r9, [r5, #12]
    71c8:	str	r3, [sp, #12]
    71ca:	bl	62b4 <MTPD::getObjectPropsSupported(unsigned long)>
    71ce:	ldr	r2, [r5, #12]
    71d0:	strb.w	r9, [r5, #8]
    71d4:	adds	r2, #12
    71d6:	movs	r1, #2
    71d8:	strh.w	r1, [sp, #24]
    71dc:	str	r2, [sp, #20]
    71de:	ldrh	r2, [r4, #14]
    71e0:	strh.w	r2, [sp, #26]
    71e4:	ldr	r2, [r4, #16]
    71e6:	str	r2, [sp, #28]
    71e8:	add	r1, sp, #20
    71ea:	mov	r0, r5
    71ec:	movs	r2, #12
    71ee:	bl	5b48 <MTPD::write(char const*, int) [clone .part.2]>
    71f2:	ldr	r3, [sp, #12]
    71f4:	mov	r0, r5
    71f6:	mov	r1, r3
    71f8:	bl	62b4 <MTPD::getObjectPropsSupported(unsigned long)>
    71fc:	mov	r0, r5
    71fe:	bl	5b30 <MTPD::get_buffer()>
    7202:	ldr	r1, [r5, #4]
    7204:	movs	r0, #4
    7206:	bl	daec <usb_tx>
    720a:	str.w	r9, [r5, #4]
              break;
    720e:	movw	r0, #8193	; 0x2001
    7212:	b.n	708c <MTPD::loop()+0x60>
      if (receive_buffer->len >= 12) {
        return_code = 0x2001;  // Ok
        receive_buffer->len = 12;
        
        if (typ == 1) { // command
          switch (op) {
    7214:	movw	r3, #4098	; 0x1002
    7218:	cmp	r0, r3
    721a:	beq.w	73b8 <MTPD::loop()+0x38c>
    721e:	bls.w	7374 <MTPD::loop()+0x348>
    7222:	movw	r3, #4099	; 0x1003
    7226:	cmp	r0, r3
    7228:	beq.n	720e <MTPD::loop()+0x1e2>
    722a:	movw	r3, #4100	; 0x1004
    722e:	cmp	r0, r3
    7230:	bne.n	72da <MTPD::loop()+0x2ae>
              openSession(p1);
              break;
            case 0x1003:  // CloseSession
              break;
            case 0x1004:  // GetStorageIDs
              TRANSMIT(WriteStorageIDs());
    7232:	mov.w	r9, #0
    7236:	movs	r3, #1
    7238:	strb	r3, [r5, #8]
    723a:	mov	r0, r5
    723c:	str.w	r9, [r5, #12]
    7240:	bl	5f88 <MTPD::WriteStorageIDs()>
    7244:	ldr	r3, [r5, #12]
    7246:	strb.w	r9, [r5, #8]
    724a:	adds	r3, #12
    724c:	movs	r2, #2
    724e:	strh.w	r2, [sp, #24]
    7252:	str	r3, [sp, #20]
    7254:	ldrh	r3, [r4, #14]
    7256:	strh.w	r3, [sp, #26]
    725a:	ldr	r3, [r4, #16]
    725c:	str	r3, [sp, #28]
    725e:	mov	r0, r5
    7260:	movs	r2, #12
    7262:	add	r1, sp, #20
    7264:	bl	5b48 <MTPD::write(char const*, int) [clone .part.2]>
    7268:	mov	r0, r5
    726a:	bl	5f88 <MTPD::WriteStorageIDs()>
    726e:	b.n	71fc <MTPD::loop()+0x1d0>
      if (receive_buffer->len >= 12) {
        return_code = 0x2001;  // Ok
        receive_buffer->len = 12;
        
        if (typ == 1) { // command
          switch (op) {
    7270:	movw	r2, #4112	; 0x1010
    7274:	cmp	r0, r2
    7276:	beq.n	72da <MTPD::loop()+0x2ae>
    7278:	bls.n	7360 <MTPD::loop()+0x334>
    727a:	movw	r2, #4116	; 0x1014
    727e:	cmp	r0, r2
    7280:	beq.w	73e6 <MTPD::loop()+0x3ba>
    7284:	movw	r2, #4117	; 0x1015
    7288:	cmp	r0, r2
    728a:	bne.n	72da <MTPD::loop()+0x2ae>
      }
    }
  }

  void MTPD::GetDevicePropValue(uint32_t prop) {
    switch (prop) {
    728c:	movw	r2, #54274	; 0xd402
              break;
            case 0x1014:  // GetDevicePropDesc
              TRANSMIT(GetDevicePropDesc(p1));
              break;
            case 0x1015:  // GetDevicePropvalue
              TRANSMIT(GetDevicePropValue(p1));
    7290:	mov.w	r9, #0
    7294:	movs	r1, #1
      }
    }
  }

  void MTPD::GetDevicePropValue(uint32_t prop) {
    switch (prop) {
    7296:	cmp	r3, r2
              break;
            case 0x1014:  // GetDevicePropDesc
              TRANSMIT(GetDevicePropDesc(p1));
              break;
            case 0x1015:  // GetDevicePropvalue
              TRANSMIT(GetDevicePropValue(p1));
    7298:	str.w	r9, [r5, #12]
    729c:	strb	r1, [r5, #8]
      }
    }
  }

  void MTPD::GetDevicePropValue(uint32_t prop) {
    switch (prop) {
    729e:	beq.w	7636 <MTPD::loop()+0x60a>
              break;
            case 0x1014:  // GetDevicePropDesc
              TRANSMIT(GetDevicePropDesc(p1));
              break;
            case 0x1015:  // GetDevicePropvalue
              TRANSMIT(GetDevicePropValue(p1));
    72a2:	movs	r3, #2
    72a4:	movs	r2, #12
    72a6:	strb.w	r9, [r5, #8]
    72aa:	str	r2, [sp, #20]
    72ac:	strh.w	r3, [sp, #24]
    72b0:	ldrh	r3, [r4, #14]
    72b2:	strh.w	r3, [sp, #26]
    72b6:	ldr	r3, [r4, #16]
    72b8:	str	r3, [sp, #28]
    72ba:	add	r1, sp, #20
    72bc:	mov	r0, r5
    72be:	bl	5b48 <MTPD::write(char const*, int) [clone .part.2]>
    72c2:	mov	r0, r5
    72c4:	bl	5b30 <MTPD::get_buffer()>
    72c8:	movs	r0, #4
    72ca:	ldr	r1, [r5, #4]
    72cc:	bl	daec <usb_tx>
    72d0:	movs	r3, #0
    72d2:	str	r3, [r5, #4]
              break;
    72d4:	movw	r0, #8193	; 0x2001
    72d8:	b.n	708c <MTPD::loop()+0x60>
              return_code = setObjectPropValue(p1,p2);
              break;
              
            default:
              return_code = 0x2005;  // operation not supported
              break;
    72da:	movw	r0, #8197	; 0x2005
    72de:	b.n	708c <MTPD::loop()+0x60>
      if (receive_buffer->len >= 12) {
        return_code = 0x2001;  // Ok
        receive_buffer->len = 12;
        
        if (typ == 1) { // command
          switch (op) {
    72e0:	movw	r2, #4105	; 0x1009
    72e4:	cmp	r0, r2
    72e6:	beq.w	74e4 <MTPD::loop()+0x4b8>
    72ea:	movw	r2, #4107	; 0x100b
    72ee:	cmp	r0, r2
    72f0:	bne.n	72da <MTPD::loop()+0x2ae>
              break;
            case 0x1009:  // GetObject
              TRANSMIT(GetObject(p1));
              break;
            case 0x100B:  // DeleteObject
              if (p2) {
    72f2:	cmp.w	r9, #0
    72f6:	bne.w	7184 <MTPD::loop()+0x158>
                return_code = 0x2014; // spec by format unsupported
              } else {
                if (!storage_->DeleteObject(p1)) {
    72fa:	ldr	r0, [r5, #0]
    72fc:	ldr	r2, [r0, #0]
    72fe:	mov	r1, r3
    7300:	ldr	r3, [r2, #60]	; 0x3c
    7302:	blx	r3
    7304:	movw	r3, #8210	; 0x2012
    7308:	movw	r2, #8193	; 0x2001
    730c:	cmp	r0, #0
    730e:	ite	eq
    7310:	moveq	r0, r3
    7312:	movne	r0, r2
    7314:	b.n	708c <MTPD::loop()+0x60>
      if (receive_buffer->len >= 12) {
        return_code = 0x2001;  // Ok
        receive_buffer->len = 12;
        
        if (typ == 1) { // command
          switch (op) {
    7316:	movw	r2, #38915	; 0x9803
    731a:	cmp	r0, r2
    731c:	beq.w	7430 <MTPD::loop()+0x404>
    7320:	movw	r2, #38916	; 0x9804
    7324:	cmp	r0, r2
    7326:	bne.n	72da <MTPD::loop()+0x2ae>
    return true;
  }
  
    uint32_t MTPD::setObjectPropValue(uint32_t p1, uint32_t p2)
    {
      receive_buffer();
    7328:	mov	r0, r5
    732a:	str	r3, [sp, #12]
    732c:	bl	6d08 <MTPD::receive_buffer()>
      if(p2==0xDC07)
    7330:	movw	r2, #56327	; 0xdc07
    7334:	cmp	r9, r2
    7336:	ldr	r3, [sp, #12]
    7338:	bne.n	72da <MTPD::loop()+0x2ae>
    733a:	mov	r1, r3
    733c:	mov	r0, r5
    733e:	bl	6e54 <MTPD::setObjectPropValue(unsigned long, unsigned long) [clone .part.6]>
          }
        } else {
          return_code = 0x2000;  // undefined
        }
      }
      if (return_code) {
    7342:	cmp	r0, #0
    7344:	beq.w	70e2 <MTPD::loop()+0xb6>
    7348:	uxth	r0, r0
    734a:	b.n	708c <MTPD::loop()+0x60>
    734c:	.word	0x0001452c
    7350:	.word	0x1fff8d50
    7354:	.word	0x00014398
    7358:	.word	0x00014540
    735c:	.word	0x0001453c
      if (receive_buffer->len >= 12) {
        return_code = 0x2001;  // Ok
        receive_buffer->len = 12;
        
        if (typ == 1) { // command
          switch (op) {
    7360:	movw	r3, #4109	; 0x100d
    7364:	cmp	r0, r3
    7366:	bne.n	72da <MTPD::loop()+0x2ae>
              CONTAINER->params[1]=p2;
              CONTAINER->params[2]=p3;
              len = receive_buffer->len = 12 + 3 * 4;
              break;
            case 0x100D:  // SendObject
              SendObject();
    7368:	mov	r0, r5
    736a:	bl	6fb4 <MTPD::SendObject()>
              break;
    736e:	movw	r0, #8193	; 0x2001
    7372:	b.n	708c <MTPD::loop()+0x60>
      if (receive_buffer->len >= 12) {
        return_code = 0x2001;  // Ok
        receive_buffer->len = 12;
        
        if (typ == 1) { // command
          switch (op) {
    7374:	movw	r3, #4097	; 0x1001
    7378:	cmp	r0, r3
    737a:	bne.n	72da <MTPD::loop()+0x2ae>
            case 0x1001: // GetDescription
              TRANSMIT(WriteDescriptor());
    737c:	mov.w	r9, #0
    7380:	strb	r1, [r5, #8]
    7382:	mov	r0, r5
    7384:	str.w	r9, [r5, #12]
    7388:	bl	5d10 <MTPD::WriteDescriptor()>
    738c:	ldr	r3, [r5, #12]
    738e:	strb.w	r9, [r5, #8]
    7392:	adds	r3, #12
    7394:	movs	r2, #2
    7396:	strh.w	r2, [sp, #24]
    739a:	str	r3, [sp, #20]
    739c:	ldrh	r3, [r4, #14]
    739e:	strh.w	r3, [sp, #26]
    73a2:	ldr	r3, [r4, #16]
    73a4:	str	r3, [sp, #28]
    73a6:	mov	r0, r5
    73a8:	mov	r2, sl
    73aa:	add	r1, sp, #20
    73ac:	bl	5b48 <MTPD::write(char const*, int) [clone .part.2]>
    73b0:	mov	r0, r5
    73b2:	bl	5d10 <MTPD::WriteDescriptor()>
    73b6:	b.n	71fc <MTPD::loop()+0x1d0>
    }
    
    void MTPD::openSession(uint32_t id)
    {
      sessionID_ = id;
      storage_->ResetIndex();
    73b8:	ldr	r0, [r5, #0]
      return storage_->copy(handle,store1,newHandle);
    }
    
    void MTPD::openSession(uint32_t id)
    {
      sessionID_ = id;
    73ba:	ldr	r2, [pc, #736]	; (769c <MTPD::loop()+0x670>)
      storage_->ResetIndex();
    73bc:	ldr	r3, [r0, #0]
      return storage_->copy(handle,store1,newHandle);
    }
    
    void MTPD::openSession(uint32_t id)
    {
      sessionID_ = id;
    73be:	str.w	r8, [r2]
      storage_->ResetIndex();
    73c2:	ldr	r3, [r3, #68]	; 0x44
    73c4:	blx	r3
    73c6:	movw	r0, #8193	; 0x2001
    73ca:	b.n	708c <MTPD::loop()+0x60>
              break;
            case 0x1005:  // GetStorageInfo
              TRANSMIT(GetStorageInfo(p1));
              break;
            case 0x1006:  // GetNumObjects
              if (p2) {
    73cc:	cmp.w	r9, #0
    73d0:	bne.w	7184 <MTPD::loop()+0x158>
                return_code = 0x2014; // spec by format unsupported
              } else {
                p1 = GetNumObjects(p1, p3);
    73d4:	mov	r2, fp
    73d6:	mov	r1, r3
    73d8:	mov	r0, r5
    73da:	bl	5b08 <MTPD::GetNumObjects(unsigned long, unsigned long)>
    73de:	mov	r8, r0
    73e0:	movw	r0, #8193	; 0x2001
    73e4:	b.n	708c <MTPD::loop()+0x60>
        break;
    }
  }

  void MTPD::GetDevicePropDesc(uint32_t prop) {
    switch (prop) {
    73e6:	movw	r2, #54274	; 0xd402
              break;
            case 0x100D:  // SendObject
              SendObject();
              break;
            case 0x1014:  // GetDevicePropDesc
              TRANSMIT(GetDevicePropDesc(p1));
    73ea:	movs	r0, #0
        break;
    }
  }

  void MTPD::GetDevicePropDesc(uint32_t prop) {
    switch (prop) {
    73ec:	cmp	r3, r2
              break;
            case 0x100D:  // SendObject
              SendObject();
              break;
            case 0x1014:  // GetDevicePropDesc
              TRANSMIT(GetDevicePropDesc(p1));
    73ee:	strb	r1, [r5, #8]
    73f0:	str	r0, [r5, #12]
        break;
    }
  }

  void MTPD::GetDevicePropDesc(uint32_t prop) {
    switch (prop) {
    73f2:	beq.w	766c <MTPD::loop()+0x640>
              break;
            case 0x100D:  // SendObject
              SendObject();
              break;
            case 0x1014:  // GetDevicePropDesc
              TRANSMIT(GetDevicePropDesc(p1));
    73f6:	movs	r2, #12
    73f8:	movs	r0, #0
    73fa:	movs	r1, #2
    73fc:	strb	r0, [r5, #8]
    73fe:	str	r2, [sp, #20]
    7400:	strh.w	r1, [sp, #24]
    7404:	ldrh	r1, [r4, #14]
    7406:	strh.w	r1, [sp, #26]
    740a:	ldr	r1, [r4, #16]
    740c:	str	r1, [sp, #28]
    740e:	mov	r0, r5
    7410:	add	r1, sp, #20
    7412:	str	r3, [sp, #12]
    7414:	bl	5b48 <MTPD::write(char const*, int) [clone .part.2]>
        break;
    }
  }

  void MTPD::GetDevicePropDesc(uint32_t prop) {
    switch (prop) {
    7418:	ldr	r3, [sp, #12]
    741a:	movw	r2, #54274	; 0xd402
    741e:	cmp	r3, r2
    7420:	bne.w	72c2 <MTPD::loop()+0x296>
    7424:	movw	r1, #54274	; 0xd402
    7428:	mov	r0, r5
    742a:	bl	5c54 <MTPD::GetDevicePropDesc(unsigned long) [clone .part.4]>
    742e:	b.n	72c2 <MTPD::loop()+0x296>
          case 0x9802:  // getObjectPropDesc
            TRANSMIT(getObjectPropDesc(p1,p2));
              break;

          case 0x9803:  // getObjectPropertyValue
            TRANSMIT(getObjectPropValue(p1,p2));
    7430:	mov.w	fp, #0
    7434:	strb	r1, [r5, #8]
    7436:	mov	r2, r9
    7438:	mov	r1, r3
    743a:	mov	r0, r5
    743c:	str.w	fp, [r5, #12]
    7440:	bl	6320 <MTPD::getObjectPropValue(unsigned long, unsigned long)>
    7444:	ldr	r3, [r5, #12]
    7446:	strb.w	fp, [r5, #8]
    744a:	adds	r3, #12
    744c:	movs	r2, #2
    744e:	strh.w	r2, [sp, #24]
    7452:	str	r3, [sp, #20]
    7454:	ldrh	r3, [r4, #14]
    7456:	strh.w	r3, [sp, #26]
    745a:	mov	r2, sl
    745c:	ldr	r3, [r4, #16]
    745e:	str	r3, [sp, #28]
    7460:	add	r1, sp, #20
    7462:	mov	r0, r5
    7464:	bl	5b48 <MTPD::write(char const*, int) [clone .part.2]>
    7468:	mov	r2, r9
    746a:	mov	r1, r8
    746c:	mov	r0, r5
    746e:	bl	6320 <MTPD::getObjectPropValue(unsigned long, unsigned long)>
    7472:	mov	r0, r5
    7474:	bl	5b30 <MTPD::get_buffer()>
    7478:	ldr	r1, [r5, #4]
    747a:	movs	r0, #4
    747c:	bl	daec <usb_tx>
    7480:	str.w	fp, [r5, #4]
    7484:	b.n	720e <MTPD::loop()+0x1e2>
                  return_code = 0x2012; // partial deletion
                }
              }
              break;
            case 0x100C:  // SendObjectInfo
              p3 =  SendObjectInfo(p1, // storage
    7486:	mov	r0, r5
    7488:	mov	r2, r9
    748a:	mov	r1, r3
    748c:	bl	6e80 <MTPD::SendObjectInfo(unsigned long, unsigned long)>
                                   p2); // parent
              CONTAINER->params[1]=p2;
              CONTAINER->params[2]=p3;
              len = receive_buffer->len = 12 + 3 * 4;
    7490:	movs	r7, #24
              break;
            case 0x100C:  // SendObjectInfo
              p3 =  SendObjectInfo(p1, // storage
                                   p2); // parent
              CONTAINER->params[1]=p2;
              CONTAINER->params[2]=p3;
    7492:	str	r0, [r4, #28]
              }
              break;
            case 0x100C:  // SendObjectInfo
              p3 =  SendObjectInfo(p1, // storage
                                   p2); // parent
              CONTAINER->params[1]=p2;
    7494:	str.w	r9, [r4, #24]
              CONTAINER->params[2]=p3;
              len = receive_buffer->len = 12 + 3 * 4;
    7498:	strh	r7, [r4, #0]
              break;
    749a:	movw	r0, #8193	; 0x2001
    749e:	b.n	708c <MTPD::loop()+0x60>
          case 0x9801:  // getObjectPropsSupported
              TRANSMIT(getObjectPropsSupported(p1));
              break;

          case 0x9802:  // getObjectPropDesc
            TRANSMIT(getObjectPropDesc(p1,p2));
    74a0:	mov.w	fp, #0
    74a4:	strb	r1, [r5, #8]
    74a6:	mov	r2, r9
    74a8:	mov	r1, r3
    74aa:	mov	r0, r5
    74ac:	str.w	fp, [r5, #12]
    74b0:	bl	6620 <MTPD::getObjectPropDesc(unsigned long, unsigned long)>
    74b4:	ldr	r3, [r5, #12]
    74b6:	strb.w	fp, [r5, #8]
    74ba:	adds	r3, #12
    74bc:	movs	r2, #2
    74be:	strh.w	r2, [sp, #24]
    74c2:	str	r3, [sp, #20]
    74c4:	ldrh	r3, [r4, #14]
    74c6:	strh.w	r3, [sp, #26]
    74ca:	mov	r2, sl
    74cc:	ldr	r3, [r4, #16]
    74ce:	str	r3, [sp, #28]
    74d0:	add	r1, sp, #20
    74d2:	mov	r0, r5
    74d4:	bl	5b48 <MTPD::write(char const*, int) [clone .part.2]>
    74d8:	mov	r2, r9
    74da:	mov	r1, r8
    74dc:	mov	r0, r5
    74de:	bl	6620 <MTPD::getObjectPropDesc(unsigned long, unsigned long)>
    74e2:	b.n	7472 <MTPD::loop()+0x446>
              break;
            case 0x1008:  // GetObjectInfo
              TRANSMIT(GetObjectInfo(p1));
              break;
            case 0x1009:  // GetObject
              TRANSMIT(GetObject(p1));
    74e4:	mov.w	r9, #0
    74e8:	strb	r1, [r5, #8]
    74ea:	mov	r0, r5
    74ec:	mov	r1, r3
    74ee:	str.w	r9, [r5, #12]
    74f2:	bl	6d24 <MTPD::GetObject(unsigned long)>
    74f6:	ldr	r3, [r5, #12]
    74f8:	strb.w	r9, [r5, #8]
    74fc:	adds	r3, #12
    74fe:	movs	r2, #2
    7500:	strh.w	r2, [sp, #24]
    7504:	str	r3, [sp, #20]
    7506:	ldrh	r3, [r4, #14]
    7508:	strh.w	r3, [sp, #26]
    750c:	ldr	r3, [r4, #16]
    750e:	str	r3, [sp, #28]
    7510:	add	r1, sp, #20
    7512:	mov	r0, r5
    7514:	mov	r2, sl
    7516:	bl	5b48 <MTPD::write(char const*, int) [clone .part.2]>
    751a:	mov	r1, r8
    751c:	mov	r0, r5
    751e:	bl	6d24 <MTPD::GetObject(unsigned long)>
    7522:	b.n	71fc <MTPD::loop()+0x1d0>
        return 0x2001;
    }

    uint32_t MTPD::moveObject(uint32_t handle, uint32_t newStorage, uint32_t newHandle)
    { uint32_t store1=Storage2Store(newStorage);
      if(storage_->move(handle,store1,newHandle)) return 0x2001; else return  0x2005;
    7524:	ldr	r0, [r5, #0]
    7526:	ldr	r1, [r0, #0]
    7528:	mov	r3, fp
    752a:	add.w	r2, r9, #4294967295
    752e:	ldr	r5, [r1, #76]	; 0x4c
    7530:	mov	r1, r8
    7532:	blx	r5
    7534:	movw	r3, #8197	; 0x2005
    7538:	movw	r2, #8193	; 0x2001
              return_code = 0x2005;
              break;

          case 0x1019:  // MoveObject
              return_code = moveObject(p1,p2,p3);
              len  = receive_buffer->len = 12;
    753c:	strh.w	sl, [r4]
              break;
    7540:	mov	r7, sl
        return 0x2001;
    }

    uint32_t MTPD::moveObject(uint32_t handle, uint32_t newStorage, uint32_t newHandle)
    { uint32_t store1=Storage2Store(newStorage);
      if(storage_->move(handle,store1,newHandle)) return 0x2001; else return  0x2005;
    7542:	cmp	r0, #0
    7544:	ite	eq
    7546:	moveq	r0, r3
    7548:	movne	r0, r2
              break;

          case 0x1019:  // MoveObject
              return_code = moveObject(p1,p2,p3);
              len  = receive_buffer->len = 12;
              break;
    754a:	b.n	708c <MTPD::loop()+0x60>
              } else {
                TRANSMIT(GetObjectHandles(p1, p3));
              }
              break;
            case 0x1008:  // GetObjectInfo
              TRANSMIT(GetObjectInfo(p1));
    754c:	mov.w	r9, #0
    7550:	strb	r1, [r5, #8]
    7552:	mov	r0, r5
    7554:	mov	r1, r3
    7556:	str.w	r9, [r5, #12]
    755a:	bl	6060 <MTPD::GetObjectInfo(unsigned long)>
    755e:	ldr	r3, [r5, #12]
    7560:	strb.w	r9, [r5, #8]
    7564:	adds	r3, #12
    7566:	movs	r2, #2
    7568:	strh.w	r2, [sp, #24]
    756c:	str	r3, [sp, #20]
    756e:	ldrh	r3, [r4, #14]
    7570:	strh.w	r3, [sp, #26]
    7574:	ldr	r3, [r4, #16]
    7576:	str	r3, [sp, #28]
    7578:	add	r1, sp, #20
    757a:	mov	r0, r5
    757c:	mov	r2, sl
    757e:	bl	5b48 <MTPD::write(char const*, int) [clone .part.2]>
    7582:	mov	r1, r8
    7584:	mov	r0, r5
    7586:	bl	6060 <MTPD::GetObjectInfo(unsigned long)>
    758a:	b.n	71fc <MTPD::loop()+0x1d0>
              break;
            case 0x1004:  // GetStorageIDs
              TRANSMIT(WriteStorageIDs());
              break;
            case 0x1005:  // GetStorageInfo
              TRANSMIT(GetStorageInfo(p1));
    758c:	mov.w	r9, #0
    7590:	strb	r1, [r5, #8]
    7592:	mov	r0, r5
    7594:	mov	r1, r3
    7596:	str.w	r9, [r5, #12]
    759a:	bl	64dc <MTPD::GetStorageInfo(unsigned long)>
    759e:	ldr	r3, [r5, #12]
    75a0:	strb.w	r9, [r5, #8]
    75a4:	adds	r3, #12
    75a6:	movs	r2, #2
    75a8:	strh.w	r2, [sp, #24]
    75ac:	str	r3, [sp, #20]
    75ae:	ldrh	r3, [r4, #14]
    75b0:	strh.w	r3, [sp, #26]
    75b4:	ldr	r3, [r4, #16]
    75b6:	str	r3, [sp, #28]
    75b8:	add	r1, sp, #20
    75ba:	mov	r0, r5
    75bc:	mov	r2, sl
    75be:	bl	5b48 <MTPD::write(char const*, int) [clone .part.2]>
    75c2:	mov	r1, r8
    75c4:	mov	r0, r5
    75c6:	bl	64dc <MTPD::GetStorageInfo(unsigned long)>
    75ca:	b.n	71fc <MTPD::loop()+0x1d0>
      if(storage_->move(handle,store1,newHandle)) return 0x2001; else return  0x2005;
    }
    
    uint32_t MTPD::copyObject(uint32_t handle, uint32_t newStorage, uint32_t newHandle)
    { uint32_t store1=Storage2Store(newStorage);
      return storage_->copy(handle,store1,newHandle);
    75cc:	ldr	r0, [r5, #0]
    75ce:	ldr	r1, [r0, #0]
    75d0:	mov	r3, fp
    75d2:	ldr	r5, [r1, #80]	; 0x50
    75d4:	add.w	r2, r9, #4294967295
    75d8:	mov	r1, r8
    75da:	blx	r5
              len  = receive_buffer->len = 12;
              break;

          case 0x101A:  // CopyObject
              return_code = copyObject(p1,p2,p3);
              if(! return_code) { len  = receive_buffer->len = 12; return_code = 0x2005; }
    75dc:	cbnz	r0, 75e8 <MTPD::loop()+0x5bc>
    75de:	movs	r7, #12
    75e0:	strh	r7, [r4, #0]
    75e2:	movw	r0, #8197	; 0x2005
    75e6:	b.n	708c <MTPD::loop()+0x60>
              else {p1 = return_code; return_code=0x2001;}
    75e8:	mov	r8, r0
    75ea:	movw	r0, #8193	; 0x2001
    75ee:	b.n	708c <MTPD::loop()+0x60>
              break;
            case 0x1007:  // GetObjectHandles
              if (p2) {
                return_code = 0x2014; // spec by format unsupported
              } else {
                TRANSMIT(GetObjectHandles(p1, p3));
    75f0:	movs	r2, #1
    75f2:	mov	r1, r3
    75f4:	strb	r2, [r5, #8]
    75f6:	mov	r0, r5
    75f8:	mov	r2, fp
    75fa:	str.w	r9, [r5, #12]
    75fe:	str	r3, [sp, #12]
    7600:	bl	5ff0 <MTPD::GetObjectHandles(unsigned long, unsigned long)>
    7604:	ldr	r2, [r5, #12]
    7606:	strb.w	r9, [r5, #8]
    760a:	adds	r2, #12
    760c:	movs	r1, #2
    760e:	strh.w	r1, [sp, #24]
    7612:	str	r2, [sp, #20]
    7614:	ldrh	r2, [r4, #14]
    7616:	strh.w	r2, [sp, #26]
    761a:	ldr	r2, [r4, #16]
    761c:	str	r2, [sp, #28]
    761e:	add	r1, sp, #20
    7620:	mov	r0, r5
    7622:	movs	r2, #12
    7624:	bl	5b48 <MTPD::write(char const*, int) [clone .part.2]>
    7628:	ldr	r3, [sp, #12]
    762a:	mov	r2, fp
    762c:	mov	r1, r3
    762e:	mov	r0, r5
    7630:	bl	5ff0 <MTPD::GetObjectHandles(unsigned long, unsigned long)>
    7634:	b.n	71fc <MTPD::loop()+0x1d0>
  void MTPD::GetDevicePropValue(uint32_t prop) {
    switch (prop) {
      case 0xd402: // friendly name
        // This is the name we'll actually see in the windows explorer.
        // Should probably be configurable.
        writestring(MTP_NAME);
    7636:	mov	r0, r5
    7638:	ldr	r1, [pc, #100]	; (76a0 <MTPD::loop()+0x674>)
    763a:	bl	5bac <MTPD::writestring(char const*)>
              break;
            case 0x1014:  // GetDevicePropDesc
              TRANSMIT(GetDevicePropDesc(p1));
              break;
            case 0x1015:  // GetDevicePropvalue
              TRANSMIT(GetDevicePropValue(p1));
    763e:	ldr	r3, [r5, #12]
    7640:	strb.w	r9, [r5, #8]
    7644:	adds	r3, #12
    7646:	movs	r2, #2
    7648:	strh.w	r2, [sp, #24]
    764c:	str	r3, [sp, #20]
    764e:	ldrh	r3, [r4, #14]
    7650:	strh.w	r3, [sp, #26]
    7654:	ldr	r3, [r4, #16]
    7656:	str	r3, [sp, #28]
    7658:	add	r1, sp, #20
    765a:	mov	r0, r5
    765c:	movs	r2, #12
    765e:	bl	5b48 <MTPD::write(char const*, int) [clone .part.2]>
  void MTPD::GetDevicePropValue(uint32_t prop) {
    switch (prop) {
      case 0xd402: // friendly name
        // This is the name we'll actually see in the windows explorer.
        // Should probably be configurable.
        writestring(MTP_NAME);
    7662:	ldr	r1, [pc, #60]	; (76a0 <MTPD::loop()+0x674>)
    7664:	mov	r0, r5
    7666:	bl	5bac <MTPD::writestring(char const*)>
    766a:	b.n	72c2 <MTPD::loop()+0x296>
    766c:	mov	r1, r2
    766e:	mov	r0, r5
    7670:	bl	5c54 <MTPD::GetDevicePropDesc(unsigned long) [clone .part.4]>
              break;
            case 0x100D:  // SendObject
              SendObject();
              break;
            case 0x1014:  // GetDevicePropDesc
              TRANSMIT(GetDevicePropDesc(p1));
    7674:	ldr	r3, [r5, #12]
    7676:	movs	r1, #0
    7678:	adds	r3, #12
    767a:	movs	r2, #2
    767c:	strb	r1, [r5, #8]
    767e:	strh.w	r2, [sp, #24]
    7682:	str	r3, [sp, #20]
    7684:	ldrh	r3, [r4, #14]
    7686:	strh.w	r3, [sp, #26]
    768a:	ldr	r3, [r4, #16]
    768c:	str	r3, [sp, #28]
    768e:	movs	r2, #12
    7690:	add	r1, sp, #20
    7692:	mov	r0, r5
    7694:	bl	5b48 <MTPD::write(char const*, int) [clone .part.2]>
    7698:	b.n	7424 <MTPD::loop()+0x3f8>
    769a:	nop
    769c:	.word	0x20002b24
    76a0:	.word	0x000144fc

000076a4 <usb_init_events>:
  extern "C"
  {
    usb_packet_t *tx_event_packet=NULL;

    int usb_init_events(void)
    {
    76a4:	push	{r3, lr}
      tx_event_packet = usb_malloc();
    76a6:	bl	d974 <usb_malloc>
    76aa:	ldr	r2, [pc, #12]	; (76b8 <usb_init_events+0x14>)
    76ac:	mov	r3, r0
      if(tx_event_packet) return 1; else return 0; 
    }
    76ae:	adds	r0, #0
    76b0:	it	ne
    76b2:	movne	r0, #1
  {
    usb_packet_t *tx_event_packet=NULL;

    int usb_init_events(void)
    {
      tx_event_packet = usb_malloc();
    76b4:	str	r3, [r2, #0]
      if(tx_event_packet) return 1; else return 0; 
    }
    76b6:	pop	{r3, pc}
    76b8:	.word	0x20002b28

000076bc <usb_mtp_sendEvent>:


    int usb_mtp_sendEvent(const void *buffer, uint32_t len, uint32_t timeout)
    {
    76bc:	push	{r3, r4, r5, lr}
      if (!usb_configuration) return -1;
    76be:	ldr	r3, [pc, #44]	; (76ec <usb_mtp_sendEvent+0x30>)
    76c0:	ldrb	r3, [r3, #0]
    76c2:	cbz	r3, 76e4 <usb_mtp_sendEvent+0x28>
      memcpy(tx_event_packet->buf, buffer, len);
    76c4:	ldr	r3, [pc, #40]	; (76f0 <usb_mtp_sendEvent+0x34>)
    76c6:	ldr	r5, [r3, #0]
    76c8:	mov	r4, r1
    76ca:	mov	r2, r4
    76cc:	mov	r1, r0
    76ce:	add.w	r0, r5, #8
    76d2:	bl	cb00 <memcpy>
      tx_event_packet->len = len;
    76d6:	strh	r4, [r5, #0]
      usb_tx(MTP_EVENT_ENDPOINT, tx_event_packet);
    76d8:	mov	r1, r5
    76da:	movs	r0, #6
    76dc:	bl	daec <usb_tx>
      return len;
    76e0:	mov	r0, r4
    76e2:	pop	{r3, r4, r5, pc}
    }


    int usb_mtp_sendEvent(const void *buffer, uint32_t len, uint32_t timeout)
    {
      if (!usb_configuration) return -1;
    76e4:	mov.w	r0, #4294967295
      memcpy(tx_event_packet->buf, buffer, len);
      tx_event_packet->len = len;
      usb_tx(MTP_EVENT_ENDPOINT, tx_event_packet);
      return len;
    }
    76e8:	pop	{r3, r4, r5, pc}
    76ea:	nop
    76ec:	.word	0x200031a8
    76f0:	.word	0x20002b28

000076f4 <MTPD::send_Event(unsigned short)>:

  #endif
  const uint32_t EVENT_TIMEOUT=60;

  int MTPD::send_Event(uint16_t eventCode)
  {
    76f4:	push	{r4, r5, lr}
    76f6:	sub	sp, #36	; 0x24
    MTPContainer event;
    event.len = 12;
    event.op =eventCode ;
    event.type = MTP_CONTAINER_TYPE_EVENT; 
    event.transaction_id=TID;
    76f8:	ldr	r3, [r0, #16]

  int MTPD::send_Event(uint16_t eventCode)
  {
    MTPContainer event;
    event.len = 12;
    event.op =eventCode ;
    76fa:	strh.w	r1, [sp, #6]
  const uint32_t EVENT_TIMEOUT=60;

  int MTPD::send_Event(uint16_t eventCode)
  {
    MTPContainer event;
    event.len = 12;
    76fe:	movs	r4, #12
    event.op =eventCode ;
    event.type = MTP_CONTAINER_TYPE_EVENT; 
    event.transaction_id=TID;
    7700:	str	r3, [sp, #8]
    event.params[0]=0;
    event.params[1]=0;
    event.params[2]=0;
    return usb_mtp_sendEvent((const void *) &event, event.len, EVENT_TIMEOUT);
    7702:	mov	r1, r4
    MTPContainer event;
    event.len = 12;
    event.op =eventCode ;
    event.type = MTP_CONTAINER_TYPE_EVENT; 
    event.transaction_id=TID;
    event.params[0]=0;
    7704:	movs	r3, #0
  int MTPD::send_Event(uint16_t eventCode)
  {
    MTPContainer event;
    event.len = 12;
    event.op =eventCode ;
    event.type = MTP_CONTAINER_TYPE_EVENT; 
    7706:	movs	r5, #4
    event.transaction_id=TID;
    event.params[0]=0;
    event.params[1]=0;
    event.params[2]=0;
    return usb_mtp_sendEvent((const void *) &event, event.len, EVENT_TIMEOUT);
    7708:	movs	r2, #60	; 0x3c
    770a:	mov	r0, sp
  const uint32_t EVENT_TIMEOUT=60;

  int MTPD::send_Event(uint16_t eventCode)
  {
    MTPContainer event;
    event.len = 12;
    770c:	str	r4, [sp, #0]
    event.op =eventCode ;
    event.type = MTP_CONTAINER_TYPE_EVENT; 
    770e:	strh.w	r5, [sp, #4]
    event.transaction_id=TID;
    event.params[0]=0;
    7712:	str	r3, [sp, #12]
    event.params[1]=0;
    7714:	str	r3, [sp, #16]
    event.params[2]=0;
    7716:	str	r3, [sp, #20]
    return usb_mtp_sendEvent((const void *) &event, event.len, EVENT_TIMEOUT);
    7718:	bl	76bc <usb_mtp_sendEvent>
  }
    771c:	add	sp, #36	; 0x24
    771e:	pop	{r4, r5, pc}

00007720 <MTPD::send_DeviceResetEvent()>:
    event.params[2]=p3;
    return usb_mtp_sendEvent((const void *) &event, event.len, EVENT_TIMEOUT);
  }

  int MTPD::send_DeviceResetEvent(void) 
  { return send_Event(MTP_EVENT_DEVICE_RESET); } 
    7720:	movw	r1, #16395	; 0x400b
    7724:	b.w	76f4 <MTPD::send_Event(unsigned short)>

00007728 <EventResponder::triggerEvent(int, void*)>:
	}

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
    7728:	push	{r4}
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    772a:	ldrb	r4, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    772c:	str	r1, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    772e:	cmp	r4, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    7730:	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    7732:	beq.n	773a <EventResponder::triggerEvent(int, void*)+0x12>
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
		}
	}
    7734:	pop	{r4}
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    7736:	b.w	e680 <EventResponder::triggerEventNotImmediate()>
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    773a:	ldr	r3, [r0, #8]
		} else {
			triggerEventNotImmediate();
		}
	}
    773c:	pop	{r4}
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    773e:	bx	r3

00007740 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]>:
			}
		}
	}
}

void SPIClass::transfer(const void * buf, void * retbuf, size_t count)
    7740:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7744:	ldr	r4, [r0, #0]
{

	if (count == 0) return;
	if (!(port().CTAR0 & SPI_CTAR_LSBFE)) {
    7746:	ldr	r5, [r4, #12]
    7748:	tst.w	r5, #16777216	; 0x1000000
		const uint8_t *p_write = (const uint8_t *)buf;
		uint8_t *p_read = (uint8_t *)retbuf;
		size_t count_read = count;

		// Lets clear the reader queue
		port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);
    774c:	ldr	r5, [pc, #484]	; (7934 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x1f4>)
    774e:	str	r5, [r4, #0]

void SPIClass::transfer(const void * buf, void * retbuf, size_t count)
{

	if (count == 0) return;
	if (!(port().CTAR0 & SPI_CTAR_LSBFE)) {
    7750:	bne.n	77f8 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0xb8>
		port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);

		uint32_t sr;

		// Now lets loop while we still have data to output
		if (count & 1) {
    7752:	lsls	r7, r3, #31
    7754:	bpl.w	78be <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x17e>
		    if (p_write) {
    7758:	cmp	r1, #0
    775a:	beq.w	7924 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x1e4>
				if (count > 1)
					port().PUSHR = *p_write++ | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
    775e:	ldrb	r5, [r1, #0]
		uint32_t sr;

		// Now lets loop while we still have data to output
		if (count & 1) {
		    if (p_write) {
				if (count > 1)
    7760:	cmp	r3, #1
					port().PUSHR = *p_write++ | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
    7762:	it	ne
    7764:	orrne.w	r5, r5, #2147483648	; 0x80000000
				else
					port().PUSHR = *p_write++ | SPI_PUSHR_CTAS(0);
    7768:	str	r5, [r4, #52]	; 0x34
    776a:	adds	r1, #1
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CTAS(0);
			}
			count--;
		}

	    uint16_t w =  (uint16_t)(_transferWriteFill << 8) | _transferWriteFill;
    776c:	ldrb.w	r8, [r0, #36]	; 0x24
				if (count > 1)
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
				else
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CTAS(0);
			}
			count--;
    7770:	add.w	ip, r3, #4294967295
		}

	    uint16_t w =  (uint16_t)(_transferWriteFill << 8) | _transferWriteFill;
    7774:	orr.w	r8, r8, r8, lsl #8

		while (count > 0) {
    7778:	cmp.w	ip, #0
    777c:	beq.w	78d0 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x190>
			// Push out the next byte; 
		    if (p_write) {
    7780:	cbz	r1, 778c <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x4c>
		    	w = (*p_write++) << 8;
				w |= *p_write++;
    7782:	ldrb	r5, [r1, #1]
	    uint16_t w =  (uint16_t)(_transferWriteFill << 8) | _transferWriteFill;

		while (count > 0) {
			// Push out the next byte; 
		    if (p_write) {
		    	w = (*p_write++) << 8;
    7784:	ldrb.w	r8, [r1], #2
				w |= *p_write++;
    7788:	orr.w	r8, r5, r8, lsl #8
		    }
		    uint16_t queue_full_status_mask = (hardware().queue_size-1) << 12;
    778c:	ldr	r5, [r0, #4]
    778e:	ldrb	r6, [r5, #8]
			if (count == 2)
    7790:	cmp.w	ip, #2
			// Push out the next byte; 
		    if (p_write) {
		    	w = (*p_write++) << 8;
				w |= *p_write++;
		    }
		    uint16_t queue_full_status_mask = (hardware().queue_size-1) << 12;
    7794:	add.w	r6, r6, #4294967295
    7798:	mov.w	r6, r6, lsl #12
			if (count == 2)
				port().PUSHR = w | SPI_PUSHR_CTAS(1);
    779c:	ite	eq
    779e:	orreq.w	r5, r8, #268435456	; 0x10000000
			else	
				port().PUSHR = w | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(1);
    77a2:	orrne.w	r5, r8, #2415919104	; 0x90000000
			// Push out the next byte; 
		    if (p_write) {
		    	w = (*p_write++) << 8;
				w |= *p_write++;
		    }
		    uint16_t queue_full_status_mask = (hardware().queue_size-1) << 12;
    77a6:	uxth	r6, r6
			if (count == 2)
				port().PUSHR = w | SPI_PUSHR_CTAS(1);
			else	
				port().PUSHR = w | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(1);
    77a8:	str	r5, [r4, #52]	; 0x34
			count -= 2; // how many bytes to output.
    77aa:	sub.w	ip, ip, #2
    77ae:	b.n	77c2 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x82>
			do {
				sr = port().SR;
				if (sr & 0xF0)  {
					uint16_t w = port().POPR;  // Read any pending RX bytes in
					if (count_read & 1) {
						if (p_read) {
    77b0:	cbz	r2, 77b6 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x76>
							*p_read++ = w;  // Read any pending RX bytes in
    77b2:	strb	r4, [r2, #0]
    77b4:	adds	r2, #1
						} 
						count_read--;
    77b6:	subs	r3, #1
							*p_read++ = (w & 0xff);
						}
						count_read -= 2;
					}
				}
			} while ((sr & (15 << 12)) > queue_full_status_mask);
    77b8:	and.w	r5, r5, #61440	; 0xf000
    77bc:	cmp	r5, r6
    77be:	bls.n	77ee <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0xae>
    77c0:	ldr	r4, [r0, #0]
			else	
				port().PUSHR = w | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(1);
			count -= 2; // how many bytes to output.
			// Make sure queue is not full before pushing next byte out
			do {
				sr = port().SR;
    77c2:	ldr	r5, [r4, #44]	; 0x2c
				if (sr & 0xF0)  {
    77c4:	tst.w	r5, #240	; 0xf0
    77c8:	beq.n	77b8 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x78>
					uint16_t w = port().POPR;  // Read any pending RX bytes in
    77ca:	ldr	r4, [r4, #56]	; 0x38
					if (count_read & 1) {
    77cc:	tst.w	r3, #1
							*p_read++ = w;  // Read any pending RX bytes in
						} 
						count_read--;
					} else {
						if (p_read) {
							*p_read++ = w >> 8;
    77d0:	mov	r7, r2
    77d2:	mov.w	lr, r4, asr #8
			// Make sure queue is not full before pushing next byte out
			do {
				sr = port().SR;
				if (sr & 0xF0)  {
					uint16_t w = port().POPR;  // Read any pending RX bytes in
					if (count_read & 1) {
    77d6:	bne.n	77b0 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x70>
						if (p_read) {
							*p_read++ = w;  // Read any pending RX bytes in
						} 
						count_read--;
					} else {
						if (p_read) {
    77d8:	cbz	r2, 77e2 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0xa2>
							*p_read++ = w >> 8;
    77da:	strb.w	lr, [r7], #2
							*p_read++ = (w & 0xff);
    77de:	strb	r4, [r2, #1]
    77e0:	mov	r2, r7
						}
						count_read -= 2;
					}
				}
			} while ((sr & (15 << 12)) > queue_full_status_mask);
    77e2:	and.w	r5, r5, #61440	; 0xf000
    77e6:	cmp	r5, r6
					} else {
						if (p_read) {
							*p_read++ = w >> 8;
							*p_read++ = (w & 0xff);
						}
						count_read -= 2;
    77e8:	sub.w	r3, r3, #2
					}
				}
			} while ((sr & (15 << 12)) > queue_full_status_mask);
    77ec:	bhi.n	77c0 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x80>
			count--;
		}

	    uint16_t w =  (uint16_t)(_transferWriteFill << 8) | _transferWriteFill;

		while (count > 0) {
    77ee:	cmp.w	ip, #0
    77f2:	beq.n	78d0 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x190>
    77f4:	ldr	r4, [r0, #0]
    77f6:	b.n	7780 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x40>
		port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);

		uint32_t sr;

		// Now lets loop while we still have data to output
		if (count & 1) {
    77f8:	lsls	r5, r3, #31
    77fa:	bpl.n	7896 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x156>
		    if (p_write) {
    77fc:	cmp	r1, #0
    77fe:	beq.w	7914 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x1d4>
				if (count > 1)
					port().PUSHR = *p_write++ | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
    7802:	ldrb	r5, [r1, #0]
		uint32_t sr;

		// Now lets loop while we still have data to output
		if (count & 1) {
		    if (p_write) {
				if (count > 1)
    7804:	cmp	r3, #1
					port().PUSHR = *p_write++ | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
    7806:	it	ne
    7808:	orrne.w	r5, r5, #2147483648	; 0x80000000
				else
					port().PUSHR = *p_write++ | SPI_PUSHR_CTAS(0);
    780c:	str	r5, [r4, #52]	; 0x34
    780e:	adds	r1, #1
				if (count > 1)
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
				else
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CTAS(0);
			}
			count--;
    7810:	add.w	lr, r3, #4294967295
		}

	    uint16_t w = _transferWriteFill;
    7814:	ldrb.w	ip, [r0, #36]	; 0x24

		while (count > 0) {
    7818:	cmp.w	lr, #0
    781c:	beq.n	78a2 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x162>
			// Push out the next byte; 
		    if (p_write) {
    781e:	cbz	r1, 782c <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0xec>
				w = *p_write++;
		    	w |= ((*p_write++) << 8);
    7820:	ldrb.w	ip, [r1, #1]
    7824:	ldrb	r5, [r1, #0]
    7826:	adds	r1, #2
    7828:	orr.w	ip, r5, ip, lsl #8
		    }
		    uint16_t queue_full_status_mask = (hardware().queue_size-1) << 12;
    782c:	ldr	r5, [r0, #4]
    782e:	ldrb	r6, [r5, #8]
			if (count == 2)
    7830:	cmp.w	lr, #2
			// Push out the next byte; 
		    if (p_write) {
				w = *p_write++;
		    	w |= ((*p_write++) << 8);
		    }
		    uint16_t queue_full_status_mask = (hardware().queue_size-1) << 12;
    7834:	add.w	r6, r6, #4294967295
    7838:	mov.w	r6, r6, lsl #12
			if (count == 2)
				port().PUSHR = w | SPI_PUSHR_CTAS(1);
    783c:	ite	eq
    783e:	orreq.w	r5, ip, #268435456	; 0x10000000
			else	
				port().PUSHR = w | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(1);
    7842:	orrne.w	r5, ip, #2415919104	; 0x90000000
			// Push out the next byte; 
		    if (p_write) {
				w = *p_write++;
		    	w |= ((*p_write++) << 8);
		    }
		    uint16_t queue_full_status_mask = (hardware().queue_size-1) << 12;
    7846:	uxth	r6, r6
			if (count == 2)
				port().PUSHR = w | SPI_PUSHR_CTAS(1);
			else	
				port().PUSHR = w | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(1);
    7848:	str	r5, [r4, #52]	; 0x34
			count -= 2; // how many bytes to output.
    784a:	sub.w	lr, lr, #2
    784e:	b.n	7862 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x122>
			do {
				sr = port().SR;
				if (sr & 0xF0)  {
					uint16_t w = port().POPR;  // Read any pending RX bytes in
					if (count_read & 1) {
						if (p_read) {
    7850:	cbz	r2, 7856 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x116>
							*p_read++ = w;  // Read any pending RX bytes in
    7852:	strb	r4, [r2, #0]
    7854:	adds	r2, #1
						} 
						count_read--;
    7856:	subs	r3, #1
							*p_read++ = w >> 8;
						}
						count_read -= 2;
					}
				}
			} while ((sr & (15 << 12)) > queue_full_status_mask);
    7858:	and.w	r5, r5, #61440	; 0xf000
    785c:	cmp	r5, r6
    785e:	bls.n	788c <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x14c>
    7860:	ldr	r4, [r0, #0]
			else	
				port().PUSHR = w | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(1);
			count -= 2; // how many bytes to output.
			// Make sure queue is not full before pushing next byte out
			do {
				sr = port().SR;
    7862:	ldr	r5, [r4, #44]	; 0x2c
				if (sr & 0xF0)  {
    7864:	tst.w	r5, #240	; 0xf0
    7868:	beq.n	7858 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x118>
					uint16_t w = port().POPR;  // Read any pending RX bytes in
					if (count_read & 1) {
    786a:	tst.w	r3, #1
							*p_read++ = w;  // Read any pending RX bytes in
						} 
						count_read--;
					} else {
						if (p_read) {
							*p_read++ = (w & 0xff);
    786e:	mov	r7, r2
			count -= 2; // how many bytes to output.
			// Make sure queue is not full before pushing next byte out
			do {
				sr = port().SR;
				if (sr & 0xF0)  {
					uint16_t w = port().POPR;  // Read any pending RX bytes in
    7870:	ldr	r4, [r4, #56]	; 0x38
					if (count_read & 1) {
    7872:	bne.n	7850 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x110>
						if (p_read) {
							*p_read++ = w;  // Read any pending RX bytes in
						} 
						count_read--;
					} else {
						if (p_read) {
    7874:	cbz	r2, 7880 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x140>
							*p_read++ = (w & 0xff);
    7876:	strb.w	r4, [r7], #2
							*p_read++ = w >> 8;
    787a:	asrs	r4, r4, #8
    787c:	strb	r4, [r2, #1]
    787e:	mov	r2, r7
						}
						count_read -= 2;
					}
				}
			} while ((sr & (15 << 12)) > queue_full_status_mask);
    7880:	and.w	r5, r5, #61440	; 0xf000
    7884:	cmp	r5, r6
					} else {
						if (p_read) {
							*p_read++ = (w & 0xff);
							*p_read++ = w >> 8;
						}
						count_read -= 2;
    7886:	sub.w	r3, r3, #2
					}
				}
			} while ((sr & (15 << 12)) > queue_full_status_mask);
    788a:	bhi.n	7860 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x120>
			count--;
		}

	    uint16_t w = _transferWriteFill;

		while (count > 0) {
    788c:	cmp.w	lr, #0
    7890:	beq.n	78a2 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x162>
    7892:	ldr	r4, [r0, #0]
    7894:	b.n	781e <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0xde>
		port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);

		uint32_t sr;

		// Now lets loop while we still have data to output
		if (count & 1) {
    7896:	mov	lr, r3
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CTAS(0);
			}
			count--;
		}

	    uint16_t w = _transferWriteFill;
    7898:	ldrb.w	ip, [r0, #36]	; 0x24

		while (count > 0) {
    789c:	cmp.w	lr, #0
    78a0:	bne.n	781e <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0xde>
			} while ((sr & (15 << 12)) > queue_full_status_mask);

		}

		// now lets wait for all of the read bytes to be returned...
		while (count_read) {
    78a2:	cbz	r3, 78ec <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x1ac>
	// setCS() is a special function, not intended for use from normal Arduino
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
	KINETISK_SPI_t & port() { return *(KINETISK_SPI_t *)port_addr; }
    78a4:	ldr	r4, [r0, #0]
			sr = port().SR;
    78a6:	ldr	r1, [r4, #44]	; 0x2c
			if (sr & 0xF0)  {
    78a8:	tst.w	r1, #240	; 0xf0
    78ac:	beq.n	78a6 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x166>
				uint16_t w = port().POPR;  // Read any pending RX bytes in
    78ae:	ldr	r1, [r4, #56]	; 0x38
				if (count_read & 1) {
    78b0:	lsls	r4, r3, #31
    78b2:	bpl.n	78f0 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x1b0>
					if (p_read)
    78b4:	cbz	r2, 78ba <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x17a>
						*p_read++ = w;  // Read any pending RX bytes in
    78b6:	strb	r1, [r2, #0]
    78b8:	adds	r2, #1
					count_read--;
    78ba:	subs	r3, #1
    78bc:	b.n	78a2 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x162>
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CTAS(0);
			}
			count--;
		}

	    uint16_t w =  (uint16_t)(_transferWriteFill << 8) | _transferWriteFill;
    78be:	ldrb.w	r8, [r0, #36]	; 0x24
		port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);

		uint32_t sr;

		// Now lets loop while we still have data to output
		if (count & 1) {
    78c2:	mov	ip, r3
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CTAS(0);
			}
			count--;
		}

	    uint16_t w =  (uint16_t)(_transferWriteFill << 8) | _transferWriteFill;
    78c4:	orr.w	r8, r8, r8, lsl #8

		while (count > 0) {
    78c8:	cmp.w	ip, #0
    78cc:	bne.w	7780 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x40>
			} while ((sr & (15 << 12)) > queue_full_status_mask);

		}

		// now lets wait for all of the read bytes to be returned...
		while (count_read) {
    78d0:	cbz	r3, 78ec <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x1ac>
    78d2:	ldr	r4, [r0, #0]
			sr = port().SR;
    78d4:	ldr	r1, [r4, #44]	; 0x2c
			if (sr & 0xF0)  {
    78d6:	tst.w	r1, #240	; 0xf0
    78da:	beq.n	78d4 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x194>
				uint16_t w = port().POPR;  // Read any pending RX bytes in
				if (count_read & 1) {
    78dc:	lsls	r6, r3, #31

		// now lets wait for all of the read bytes to be returned...
		while (count_read) {
			sr = port().SR;
			if (sr & 0xF0)  {
				uint16_t w = port().POPR;  // Read any pending RX bytes in
    78de:	ldr	r1, [r4, #56]	; 0x38
				if (count_read & 1) {
    78e0:	bpl.n	7902 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x1c2>
					if (p_read)
    78e2:	cbz	r2, 78e8 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x1a8>
						*p_read++ = w;  // Read any pending RX bytes in
    78e4:	strb	r1, [r2, #0]
    78e6:	adds	r2, #1
					count_read--;
    78e8:	subs	r3, #1
    78ea:	b.n	78d0 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x190>
    78ec:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				if (count_read & 1) {
					if (p_read)
						*p_read++ = w;  // Read any pending RX bytes in
					count_read--;
				} else {
					if (p_read) {
    78f0:	cbz	r2, 78fe <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x1be>
						*p_read++ = (w & 0xff);
    78f2:	mov	r4, r2
						*p_read++ = w >> 8;
    78f4:	asrs	r5, r1, #8
					if (p_read)
						*p_read++ = w;  // Read any pending RX bytes in
					count_read--;
				} else {
					if (p_read) {
						*p_read++ = (w & 0xff);
    78f6:	strb.w	r1, [r4], #2
						*p_read++ = w >> 8;
    78fa:	strb	r5, [r2, #1]
    78fc:	mov	r2, r4
					}
					count_read -= 2;
    78fe:	subs	r3, #2
    7900:	b.n	78a2 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x162>
				if (count_read & 1) {
					if (p_read)
						*p_read++ = w;  // Read any pending RX bytes in
					count_read--;
				} else {
					if (p_read) {
    7902:	cbz	r2, 7910 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x1d0>
						*p_read++ = w >> 8;
    7904:	mov	r4, r2
    7906:	asrs	r5, r1, #8
    7908:	strb.w	r5, [r4], #2
						*p_read++ = (w & 0xff);
    790c:	strb	r1, [r2, #1]
    790e:	mov	r2, r4
					}
					count_read -= 2;
    7910:	subs	r3, #2
    7912:	b.n	78d0 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x190>
					port().PUSHR = *p_write++ | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
				else
					port().PUSHR = *p_write++ | SPI_PUSHR_CTAS(0);
			} else {
				if (count > 1)
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
    7914:	ldrb.w	r5, [r0, #36]	; 0x24
				if (count > 1)
					port().PUSHR = *p_write++ | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
				else
					port().PUSHR = *p_write++ | SPI_PUSHR_CTAS(0);
			} else {
				if (count > 1)
    7918:	cmp	r3, #1
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
    791a:	it	ne
    791c:	orrne.w	r5, r5, #2147483648	; 0x80000000
				else
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CTAS(0);
    7920:	str	r5, [r4, #52]	; 0x34
    7922:	b.n	7810 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0xd0>
					port().PUSHR = *p_write++ | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
				else
					port().PUSHR = *p_write++ | SPI_PUSHR_CTAS(0);
			} else {
				if (count > 1)
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
    7924:	ldrb.w	r5, [r0, #36]	; 0x24
				if (count > 1)
					port().PUSHR = *p_write++ | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
				else
					port().PUSHR = *p_write++ | SPI_PUSHR_CTAS(0);
			} else {
				if (count > 1)
    7928:	cmp	r3, #1
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
    792a:	it	ne
    792c:	orrne.w	r5, r5, #2147483648	; 0x80000000
				else
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CTAS(0);
    7930:	str	r5, [r4, #52]	; 0x34
    7932:	b.n	776c <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x2c>
    7934:	.word	0x801f0400

00007938 <_spi_dma_rxISR0()>:
#endif


#if defined(__MK20DX128__) || defined(__MK20DX256__)
#ifdef SPI_HAS_TRANSFER_ASYNC
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    7938:	push	{r4, r5, r6, r7}

//-------------------------------------------------------------------------
// DMA RX ISR
//-------------------------------------------------------------------------
void SPIClass::dma_rxisr(void) {
	_dmaRX->clearInterrupt();
    793a:	ldr	r3, [pc, #280]	; (7a54 <_spi_dma_rxISR0()+0x11c>)
	void detachInterrupt(void) {
		NVIC_DISABLE_IRQ(IRQ_DMA_CH0 + channel);
	}

	void clearInterrupt(void) {
		DMA_CINT = channel;
    793c:	ldr	r2, [pc, #280]	; (7a58 <_spi_dma_rxISR0()+0x120>)
    793e:	ldr	r0, [r3, #48]	; 0x30
    7940:	ldr	r4, [r3, #44]	; 0x2c
    7942:	ldrb	r1, [r0, #4]
    7944:	strb	r1, [r2, #0]
	bool complete(void) {
		if (TCD->CSR & DMA_TCD_CSR_DONE) return true;
		return false;
	}
	void clearComplete(void) {
		DMA_CDNE = channel;
    7946:	ldr	r1, [pc, #276]	; (7a5c <_spi_dma_rxISR0()+0x124>)
    7948:	ldrb	r2, [r4, #4]
    794a:	strb	r2, [r1, #0]
	_dmaTX->clearComplete();
	_dmaRX->clearComplete();

	uint8_t should_reenable_tx = true;	// should we re-enable TX maybe not if count will be 0...
	if (_dma_count_remaining) {
    794c:	ldr	r2, [r3, #40]	; 0x28
    794e:	ldrb	r0, [r0, #4]
    7950:	strb	r0, [r1, #0]
    7952:	cmp	r2, #0
    7954:	beq.n	79e4 <_spi_dma_rxISR0()+0xac>
		// What do I need to do to start it back up again...
		// We will use the BITR/CITR from RX as TX may have prefed some stuff
		if (_dma_count_remaining > hardware().max_dma_count) {
    7956:	ldr	r1, [r3, #4]
    7958:	ldr	r1, [r1, #12]
    795a:	cmp	r2, r1
    795c:	bhi.n	79dc <_spi_dma_rxISR0()+0xa4>
    795e:	ldr	r1, [r4, #0]

#ifndef TRANSFER_COUNT_FIXED
inline void DMAChanneltransferCount(DMAChannel * dmac, unsigned int len) {
	// note does no validation of length...
	DMABaseClass::TCD_t *tcd = dmac->TCD;
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    7960:	ldrh	r4, [r1, #30]
    7962:	lsls	r4, r4, #16
		// What do I need to do to start it back up again...
		// We will use the BITR/CITR from RX as TX may have prefed some stuff
		if (_dma_count_remaining > hardware().max_dma_count) {
			_dma_count_remaining -= hardware().max_dma_count;
		} else {
			DMAChanneltransferCount(_dmaTX, _dma_count_remaining-1);
    7964:	add.w	r0, r2, #4294967295

#ifndef TRANSFER_COUNT_FIXED
inline void DMAChanneltransferCount(DMAChannel * dmac, unsigned int len) {
	// note does no validation of length...
	DMABaseClass::TCD_t *tcd = dmac->TCD;
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    7968:	bmi.n	7a36 <_spi_dma_rxISR0()+0xfe>
		tcd->BITER = len & 0x7fff;
    796a:	ubfx	r0, r0, #0, #15
    796e:	strh	r0, [r1, #30]
	} else {
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
	}
	tcd->CITER = tcd->BITER; 
    7970:	ldrh	r0, [r1, #30]
    7972:	uxth	r0, r0
    7974:	strh	r0, [r1, #22]
    7976:	ldr	r1, [r3, #48]	; 0x30
    7978:	ldr	r1, [r1, #0]

#ifndef TRANSFER_COUNT_FIXED
inline void DMAChanneltransferCount(DMAChannel * dmac, unsigned int len) {
	// note does no validation of length...
	DMABaseClass::TCD_t *tcd = dmac->TCD;
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    797a:	ldrh	r0, [r1, #30]
    797c:	lsls	r0, r0, #16
    797e:	bmi.n	7a26 <_spi_dma_rxISR0()+0xee>
		tcd->BITER = len & 0x7fff;
    7980:	ubfx	r0, r2, #0, #15
    7984:	strh	r0, [r1, #30]
	} else {
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
	}
	tcd->CITER = tcd->BITER; 
    7986:	ldrh	r0, [r1, #30]
		} else {
			DMAChanneltransferCount(_dmaTX, _dma_count_remaining-1);
			DMAChanneltransferCount(_dmaRX, _dma_count_remaining);
			if (_dma_count_remaining == 1) should_reenable_tx = false;

			_dma_count_remaining = 0;
    7988:	movs	r4, #0
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
		tcd->BITER = len & 0x7fff;
	} else {
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
	}
	tcd->CITER = tcd->BITER; 
    798a:	uxth	r0, r0
void SPIClass::dma_rxisr(void) {
	_dmaRX->clearInterrupt();
	_dmaTX->clearComplete();
	_dmaRX->clearComplete();

	uint8_t should_reenable_tx = true;	// should we re-enable TX maybe not if count will be 0...
    798c:	adds.w	r2, r2, #4294967295
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
		tcd->BITER = len & 0x7fff;
	} else {
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
	}
	tcd->CITER = tcd->BITER; 
    7990:	strh	r0, [r1, #22]
void SPIClass::dma_rxisr(void) {
	_dmaRX->clearInterrupt();
	_dmaTX->clearComplete();
	_dmaRX->clearComplete();

	uint8_t should_reenable_tx = true;	// should we re-enable TX maybe not if count will be 0...
    7992:	it	ne
    7994:	movne	r2, #1
		} else {
			DMAChanneltransferCount(_dmaTX, _dma_count_remaining-1);
			DMAChanneltransferCount(_dmaRX, _dma_count_remaining);
			if (_dma_count_remaining == 1) should_reenable_tx = false;

			_dma_count_remaining = 0;
    7996:	str	r4, [r3, #40]	; 0x28
		}
		// In some cases we need to again start the TX manually to get it to work...
		if (_dmaTX->TCD->SADDR == &_transferWriteFill) {
    7998:	ldr	r1, [r3, #44]	; 0x2c
    799a:	ldr	r0, [pc, #184]	; (7a54 <_spi_dma_rxISR0()+0x11c>)
    799c:	ldr	r1, [r1, #0]
    799e:	ldr	r5, [r1, #0]
    79a0:	add.w	r4, r0, #36	; 0x24
    79a4:	cmp	r5, r4
    79a6:	beq.n	7a16 <_spi_dma_rxISR0()+0xde>
    79a8:	ldr	r0, [r0, #0]
				port().PUSHR = (_transferWriteFill | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
			} else  {
				port().PUSHR = (_transferWriteFill | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
			}
		} else {
			if (port().CTAR0  & SPI_CTAR_FMSZ(8)) {
    79aa:	ldr	r4, [r0, #12]
    79ac:	tst.w	r4, #1073741824	; 0x40000000
				// 16 bit mode
				uint16_t w = *((uint16_t*)_dmaTX->TCD->SADDR);
    79b0:	ldr	r4, [r1, #0]
				_dmaTX->TCD->SADDR = (volatile uint8_t*)(_dmaTX->TCD->SADDR) + 2;
    79b2:	ldr	r5, [r1, #0]
				port().PUSHR = (_transferWriteFill | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
			}
		} else {
			if (port().CTAR0  & SPI_CTAR_FMSZ(8)) {
				// 16 bit mode
				uint16_t w = *((uint16_t*)_dmaTX->TCD->SADDR);
    79b4:	itete	ne
    79b6:	ldrhne	r4, [r4, #0]
				_dmaTX->TCD->SADDR = (volatile uint8_t*)(_dmaTX->TCD->SADDR) + 2;
				port().PUSHR = (w | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
			} else  {
				uint8_t w = *((uint8_t*)_dmaTX->TCD->SADDR);
    79b8:	ldrbeq	r4, [r4, #0]
			}
		} else {
			if (port().CTAR0  & SPI_CTAR_FMSZ(8)) {
				// 16 bit mode
				uint16_t w = *((uint16_t*)_dmaTX->TCD->SADDR);
				_dmaTX->TCD->SADDR = (volatile uint8_t*)(_dmaTX->TCD->SADDR) + 2;
    79ba:	addne	r5, #2
				port().PUSHR = (w | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
			} else  {
				uint8_t w = *((uint8_t*)_dmaTX->TCD->SADDR);
				_dmaTX->TCD->SADDR = (volatile uint8_t*)(_dmaTX->TCD->SADDR) + 1;
    79bc:	addeq	r5, #1
				port().PUSHR = (w | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
    79be:	orr.w	r4, r4, #2147483648	; 0x80000000
				uint16_t w = *((uint16_t*)_dmaTX->TCD->SADDR);
				_dmaTX->TCD->SADDR = (volatile uint8_t*)(_dmaTX->TCD->SADDR) + 2;
				port().PUSHR = (w | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
			} else  {
				uint8_t w = *((uint8_t*)_dmaTX->TCD->SADDR);
				_dmaTX->TCD->SADDR = (volatile uint8_t*)(_dmaTX->TCD->SADDR) + 1;
    79c2:	str	r5, [r1, #0]
				port().PUSHR = (w | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
    79c4:	str	r4, [r0, #52]	; 0x34
    79c6:	ldr	r1, [r3, #48]	; 0x30
	/***************************************/
	/**    Enable / Disable               **/
	/***************************************/

	void enable(void) {
		DMA_SERQ = channel;
    79c8:	ldr	r3, [pc, #148]	; (7a60 <_spi_dma_rxISR0()+0x128>)
    79ca:	ldrb	r1, [r1, #4]
    79cc:	strb	r1, [r3, #0]
			}
		}
		_dmaRX->enable();
    79ce:	ldr	r1, [pc, #132]	; (7a54 <_spi_dma_rxISR0()+0x11c>)
		if (should_reenable_tx)
    79d0:	cbz	r2, 79d8 <_spi_dma_rxISR0()+0xa0>
    79d2:	ldr	r2, [r1, #44]	; 0x2c
    79d4:	ldrb	r2, [r2, #4]
    79d6:	strb	r2, [r3, #0]
#endif


#if defined(__MK20DX128__) || defined(__MK20DX256__)
#ifdef SPI_HAS_TRANSFER_ASYNC
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    79d8:	pop	{r4, r5, r6, r7}
    79da:	bx	lr
	uint8_t should_reenable_tx = true;	// should we re-enable TX maybe not if count will be 0...
	if (_dma_count_remaining) {
		// What do I need to do to start it back up again...
		// We will use the BITR/CITR from RX as TX may have prefed some stuff
		if (_dma_count_remaining > hardware().max_dma_count) {
			_dma_count_remaining -= hardware().max_dma_count;
    79dc:	subs	r2, r2, r1
    79de:	str	r2, [r3, #40]	; 0x28
void SPIClass::dma_rxisr(void) {
	_dmaRX->clearInterrupt();
	_dmaTX->clearComplete();
	_dmaRX->clearComplete();

	uint8_t should_reenable_tx = true;	// should we re-enable TX maybe not if count will be 0...
    79e0:	movs	r2, #1
    79e2:	b.n	7998 <_spi_dma_rxISR0()+0x60>
		//port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);  // clear out the queue
		port().SR = 0xFF0F0000;
		port().CTAR0  &= ~(SPI_CTAR_FMSZ(8)); 	// Hack restore back to 8 bits

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
		_dma_event_responder->triggerEvent();
    79e4:	ldr	r0, [r3, #52]	; 0x34
    79e6:	ldr	r1, [r3, #0]
    79e8:	ldr	r5, [r0, #0]
			_dmaTX->enable();
	} else {

		port().RSER = 0;
		//port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);  // clear out the queue
		port().SR = 0xFF0F0000;
    79ea:	ldr	r4, [pc, #120]	; (7a64 <_spi_dma_rxISR0()+0x12c>)
		_dmaRX->enable();
		if (should_reenable_tx)
			_dmaTX->enable();
	} else {

		port().RSER = 0;
    79ec:	str	r2, [r1, #48]	; 0x30
		//port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);  // clear out the queue
		port().SR = 0xFF0F0000;
    79ee:	str	r4, [r1, #44]	; 0x2c
		port().CTAR0  &= ~(SPI_CTAR_FMSZ(8)); 	// Hack restore back to 8 bits
    79f0:	ldr	r4, [r1, #12]

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
		_dma_event_responder->triggerEvent();
    79f2:	ldr	r5, [r5, #0]
    79f4:	ldr	r6, [pc, #112]	; (7a68 <_spi_dma_rxISR0()+0x130>)
	} else {

		port().RSER = 0;
		//port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);  // clear out the queue
		port().SR = 0xFF0F0000;
		port().CTAR0  &= ~(SPI_CTAR_FMSZ(8)); 	// Hack restore back to 8 bits
    79f6:	bic.w	r4, r4, #1073741824	; 0x40000000

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
    79fa:	movs	r7, #3
    79fc:	cmp	r5, r6
	} else {

		port().RSER = 0;
		//port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);  // clear out the queue
		port().SR = 0xFF0F0000;
		port().CTAR0  &= ~(SPI_CTAR_FMSZ(8)); 	// Hack restore back to 8 bits
    79fe:	str	r4, [r1, #12]

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
    7a00:	strb.w	r7, [r3, #37]	; 0x25
    7a04:	bne.n	7a46 <_spi_dma_rxISR0()+0x10e>
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    7a06:	ldrb	r3, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    7a08:	str	r2, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    7a0a:	cmp	r3, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    7a0c:	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    7a0e:	beq.n	7a4e <_spi_dma_rxISR0()+0x116>
#endif


#if defined(__MK20DX128__) || defined(__MK20DX256__)
#ifdef SPI_HAS_TRANSFER_ASYNC
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    7a10:	pop	{r4, r5, r6, r7}
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    7a12:	b.w	e680 <EventResponder::triggerEventNotImmediate()>
    7a16:	ldr	r1, [r0, #0]
			_dma_count_remaining = 0;
		}
		// In some cases we need to again start the TX manually to get it to work...
		if (_dmaTX->TCD->SADDR == &_transferWriteFill) {
			if (port().CTAR0  & SPI_CTAR_FMSZ(8)) {
				port().PUSHR = (_transferWriteFill | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
    7a18:	ldrb.w	r0, [r0, #36]	; 0x24

			_dma_count_remaining = 0;
		}
		// In some cases we need to again start the TX manually to get it to work...
		if (_dmaTX->TCD->SADDR == &_transferWriteFill) {
			if (port().CTAR0  & SPI_CTAR_FMSZ(8)) {
    7a1c:	ldr	r4, [r1, #12]
				port().PUSHR = (_transferWriteFill | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
    7a1e:	orr.w	r0, r0, #2147483648	; 0x80000000
    7a22:	str	r0, [r1, #52]	; 0x34
    7a24:	b.n	79c6 <_spi_dma_rxISR0()+0x8e>
	// note does no validation of length...
	DMABaseClass::TCD_t *tcd = dmac->TCD;
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
		tcd->BITER = len & 0x7fff;
	} else {
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
    7a26:	ldrh	r4, [r1, #30]
    7a28:	ubfx	r0, r2, #0, #9
    7a2c:	and.w	r4, r4, #65024	; 0xfe00
    7a30:	orrs	r0, r4
    7a32:	strh	r0, [r1, #30]
    7a34:	b.n	7986 <_spi_dma_rxISR0()+0x4e>
    7a36:	ldrh	r4, [r1, #30]
    7a38:	ubfx	r0, r0, #0, #9
    7a3c:	and.w	r4, r4, #65024	; 0xfe00
    7a40:	orrs	r0, r4
    7a42:	strh	r0, [r1, #30]
    7a44:	b.n	7970 <_spi_dma_rxISR0()+0x38>
		//port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);  // clear out the queue
		port().SR = 0xFF0F0000;
		port().CTAR0  &= ~(SPI_CTAR_FMSZ(8)); 	// Hack restore back to 8 bits

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
		_dma_event_responder->triggerEvent();
    7a46:	mov	r3, r5
    7a48:	mov	r1, r2
#endif


#if defined(__MK20DX128__) || defined(__MK20DX256__)
#ifdef SPI_HAS_TRANSFER_ASYNC
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    7a4a:	pop	{r4, r5, r6, r7}
		//port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);  // clear out the queue
		port().SR = 0xFF0F0000;
		port().CTAR0  &= ~(SPI_CTAR_FMSZ(8)); 	// Hack restore back to 8 bits

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
		_dma_event_responder->triggerEvent();
    7a4c:	bx	r3
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    7a4e:	ldr	r3, [r0, #8]
#endif


#if defined(__MK20DX128__) || defined(__MK20DX256__)
#ifdef SPI_HAS_TRANSFER_ASYNC
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    7a50:	pop	{r4, r5, r6, r7}
    7a52:	bx	r3
    7a54:	.word	0x1fff8a60
    7a58:	.word	0x4000801f
    7a5c:	.word	0x4000801c
    7a60:	.word	0x4000801b
    7a64:	.word	0xff0f0000
    7a68:	.word	0x00007729

00007a6c <SPIClass::begin()>:
    7a6c:	ldmia.w	r0, {r2, r3}
SPIClass SPI2((uintptr_t)&KINETISK_SPI2, (uintptr_t)&SPIClass::spi2_hardware);
#endif


void SPIClass::begin()
{
    7a70:	push	{r4, r5, r6, r7}
	volatile uint32_t *reg;

	hardware().clock_gate_register |= hardware().clock_gate_mask;
    7a72:	ldr	r4, [r3, #0]
    7a74:	ldr	r1, [r3, #4]
    7a76:	ldr	r5, [r4, #0]
	port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x1F);
    7a78:	ldr	r7, [pc, #88]	; (7ad4 <SPIClass::begin()+0x68>)
	port().CTAR0 = SPI_CTAR_FMSZ(7) | SPI_CTAR_PBR(0) | SPI_CTAR_BR(1) | SPI_CTAR_CSSCK(1);
    7a7a:	ldr	r6, [pc, #92]	; (7ad8 <SPIClass::begin()+0x6c>)

void SPIClass::begin()
{
	volatile uint32_t *reg;

	hardware().clock_gate_register |= hardware().clock_gate_mask;
    7a7c:	orrs	r1, r5
    7a7e:	str	r1, [r4, #0]
	port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x1F);
	port().CTAR0 = SPI_CTAR_FMSZ(7) | SPI_CTAR_PBR(0) | SPI_CTAR_BR(1) | SPI_CTAR_CSSCK(1);
	port().CTAR1 = SPI_CTAR_FMSZ(15) | SPI_CTAR_PBR(0) | SPI_CTAR_BR(1) | SPI_CTAR_CSSCK(1);
    7a80:	ldr	r5, [pc, #88]	; (7adc <SPIClass::begin()+0x70>)
	port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x1F);
    7a82:	ldr	r1, [pc, #92]	; (7ae0 <SPIClass::begin()+0x74>)
void SPIClass::begin()
{
	volatile uint32_t *reg;

	hardware().clock_gate_register |= hardware().clock_gate_mask;
	port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x1F);
    7a84:	str	r7, [r2, #0]
	port().CTAR0 = SPI_CTAR_FMSZ(7) | SPI_CTAR_PBR(0) | SPI_CTAR_BR(1) | SPI_CTAR_CSSCK(1);
    7a86:	str	r6, [r2, #12]
	port().CTAR1 = SPI_CTAR_FMSZ(15) | SPI_CTAR_PBR(0) | SPI_CTAR_BR(1) | SPI_CTAR_CSSCK(1);
    7a88:	str	r5, [r2, #16]
	port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x1F);
    7a8a:	str	r1, [r2, #0]
	reg = portConfigRegister(hardware().mosi_pin[mosi_pin_index]);
    7a8c:	ldrb	r1, [r0, #9]
    7a8e:	ldr	r2, [pc, #84]	; (7ae4 <SPIClass::begin()+0x78>)
    7a90:	adds	r4, r3, r1
	*reg = hardware().mosi_mux[mosi_pin_index];
    7a92:	adds	r1, #10
	hardware().clock_gate_register |= hardware().clock_gate_mask;
	port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x1F);
	port().CTAR0 = SPI_CTAR_FMSZ(7) | SPI_CTAR_PBR(0) | SPI_CTAR_BR(1) | SPI_CTAR_CSSCK(1);
	port().CTAR1 = SPI_CTAR_FMSZ(15) | SPI_CTAR_PBR(0) | SPI_CTAR_BR(1) | SPI_CTAR_CSSCK(1);
	port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x1F);
	reg = portConfigRegister(hardware().mosi_pin[mosi_pin_index]);
    7a94:	ldrb.w	r4, [r4, #36]	; 0x24
	*reg = hardware().mosi_mux[mosi_pin_index];
    7a98:	ldr.w	r5, [r3, r1, lsl #2]
	hardware().clock_gate_register |= hardware().clock_gate_mask;
	port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x1F);
	port().CTAR0 = SPI_CTAR_FMSZ(7) | SPI_CTAR_PBR(0) | SPI_CTAR_BR(1) | SPI_CTAR_CSSCK(1);
	port().CTAR1 = SPI_CTAR_FMSZ(15) | SPI_CTAR_PBR(0) | SPI_CTAR_BR(1) | SPI_CTAR_CSSCK(1);
	port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x1F);
	reg = portConfigRegister(hardware().mosi_pin[mosi_pin_index]);
    7a9c:	add.w	r1, r2, r4, lsl #3
    7aa0:	ldr	r1, [r1, #4]
	*reg = hardware().mosi_mux[mosi_pin_index];
    7aa2:	str	r5, [r1, #0]
	reg = portConfigRegister(hardware().miso_pin[miso_pin_index]);
    7aa4:	ldrb	r1, [r0, #8]
    7aa6:	adds	r4, r3, r1
	*reg= hardware().miso_mux[miso_pin_index];
    7aa8:	add.w	r1, r3, r1, lsl #2
	port().CTAR0 = SPI_CTAR_FMSZ(7) | SPI_CTAR_PBR(0) | SPI_CTAR_BR(1) | SPI_CTAR_CSSCK(1);
	port().CTAR1 = SPI_CTAR_FMSZ(15) | SPI_CTAR_PBR(0) | SPI_CTAR_BR(1) | SPI_CTAR_CSSCK(1);
	port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x1F);
	reg = portConfigRegister(hardware().mosi_pin[mosi_pin_index]);
	*reg = hardware().mosi_mux[mosi_pin_index];
	reg = portConfigRegister(hardware().miso_pin[miso_pin_index]);
    7aac:	ldrb	r4, [r4, #24]
	*reg= hardware().miso_mux[miso_pin_index];
    7aae:	ldr	r5, [r1, #28]
	port().CTAR0 = SPI_CTAR_FMSZ(7) | SPI_CTAR_PBR(0) | SPI_CTAR_BR(1) | SPI_CTAR_CSSCK(1);
	port().CTAR1 = SPI_CTAR_FMSZ(15) | SPI_CTAR_PBR(0) | SPI_CTAR_BR(1) | SPI_CTAR_CSSCK(1);
	port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x1F);
	reg = portConfigRegister(hardware().mosi_pin[mosi_pin_index]);
	*reg = hardware().mosi_mux[mosi_pin_index];
	reg = portConfigRegister(hardware().miso_pin[miso_pin_index]);
    7ab0:	add.w	r1, r2, r4, lsl #3
    7ab4:	ldr	r1, [r1, #4]
	*reg= hardware().miso_mux[miso_pin_index];
    7ab6:	str	r5, [r1, #0]
	reg = portConfigRegister(hardware().sck_pin[sck_pin_index]);
    7ab8:	ldrb	r1, [r0, #10]
    7aba:	adds	r0, r3, r1
	*reg = hardware().sck_mux[sck_pin_index];
    7abc:	add.w	r3, r3, r1, lsl #2
	port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x1F);
	reg = portConfigRegister(hardware().mosi_pin[mosi_pin_index]);
	*reg = hardware().mosi_mux[mosi_pin_index];
	reg = portConfigRegister(hardware().miso_pin[miso_pin_index]);
	*reg= hardware().miso_mux[miso_pin_index];
	reg = portConfigRegister(hardware().sck_pin[sck_pin_index]);
    7ac0:	ldrb.w	r0, [r0, #48]	; 0x30
	*reg = hardware().sck_mux[sck_pin_index];
    7ac4:	ldr	r1, [r3, #52]	; 0x34
	port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x1F);
	reg = portConfigRegister(hardware().mosi_pin[mosi_pin_index]);
	*reg = hardware().mosi_mux[mosi_pin_index];
	reg = portConfigRegister(hardware().miso_pin[miso_pin_index]);
	*reg= hardware().miso_mux[miso_pin_index];
	reg = portConfigRegister(hardware().sck_pin[sck_pin_index]);
    7ac6:	add.w	r2, r2, r0, lsl #3
	*reg = hardware().sck_mux[sck_pin_index];
}
    7aca:	pop	{r4, r5, r6, r7}
	port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x1F);
	reg = portConfigRegister(hardware().mosi_pin[mosi_pin_index]);
	*reg = hardware().mosi_mux[mosi_pin_index];
	reg = portConfigRegister(hardware().miso_pin[miso_pin_index]);
	*reg= hardware().miso_mux[miso_pin_index];
	reg = portConfigRegister(hardware().sck_pin[sck_pin_index]);
    7acc:	ldr	r3, [r2, #4]
	*reg = hardware().sck_mux[sck_pin_index];
    7ace:	str	r1, [r3, #0]
}
    7ad0:	bx	lr
    7ad2:	nop
    7ad4:	.word	0x001f4001
    7ad8:	.word	0x38001001
    7adc:	.word	0x78001001
    7ae0:	.word	0x801f0000
    7ae4:	.word	0x00014758

00007ae8 <SPIClass::setMOSI(unsigned char)>:
	return 0;
}

void SPIClass::setMOSI(uint8_t pin)
{
	if (hardware_addr == (uintptr_t)&spi0_hardware) {
    7ae8:	ldr	r2, [pc, #128]	; (7b6c <SPIClass::setMOSI(unsigned char)+0x84>)
    7aea:	ldr	r3, [r0, #4]
    7aec:	cmp	r2, r3
	}
	return 0;
}

void SPIClass::setMOSI(uint8_t pin)
{
    7aee:	push	{r4, r5, r6, r7}
	if (hardware_addr == (uintptr_t)&spi0_hardware) {
    7af0:	beq.n	7b12 <SPIClass::setMOSI(unsigned char)+0x2a>
		SPCR.setMOSI_soft(pin);
	}
	if (pin != hardware().mosi_pin[mosi_pin_index]) {
    7af2:	ldrb	r2, [r0, #9]
    7af4:	add	r2, r3
    7af6:	ldrb.w	r2, [r2, #36]	; 0x24
    7afa:	cmp	r1, r2
    7afc:	beq.n	7b0e <SPIClass::setMOSI(unsigned char)+0x26>
		for (unsigned int i = 0; i < sizeof(hardware().mosi_pin); i++) {
			if  (pin == hardware().mosi_pin[i]) {
    7afe:	ldrb.w	r4, [r3, #36]	; 0x24
    7b02:	cmp	r4, r1
    7b04:	beq.n	7b32 <SPIClass::setMOSI(unsigned char)+0x4a>
    7b06:	ldrb.w	r4, [r3, #37]	; 0x25
    7b0a:	cmp	r4, r1
    7b0c:	beq.n	7b64 <SPIClass::setMOSI(unsigned char)+0x7c>
				mosi_pin_index = i;
				return;
			}
		}
	}
}
    7b0e:	pop	{r4, r5, r6, r7}
    7b10:	bx	lr
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
		if (pin == 11) pinout &= ~3;
		if (pin == 7)  pinout = (pinout & ~0x3) | 1;
		if (pin == 28) pinout = (pinout & ~0x3) | 2;
#else
		if (pin == 11) pinout &= ~1;
    7b12:	cmp	r1, #11
    7b14:	beq.n	7b26 <SPIClass::setMOSI(unsigned char)+0x3e>
		if (pin == 7)  pinout |= 1;
    7b16:	cmp	r1, #7
    7b18:	bne.n	7af2 <SPIClass::setMOSI(unsigned char)+0xa>
    7b1a:	ldr	r4, [pc, #84]	; (7b70 <SPIClass::setMOSI(unsigned char)+0x88>)
    7b1c:	ldrb	r2, [r4, #0]
    7b1e:	orr.w	r2, r2, #1
    7b22:	strb	r2, [r4, #0]
    7b24:	b.n	7af2 <SPIClass::setMOSI(unsigned char)+0xa>
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
		if (pin == 11) pinout &= ~3;
		if (pin == 7)  pinout = (pinout & ~0x3) | 1;
		if (pin == 28) pinout = (pinout & ~0x3) | 2;
#else
		if (pin == 11) pinout &= ~1;
    7b26:	ldr	r4, [pc, #72]	; (7b70 <SPIClass::setMOSI(unsigned char)+0x88>)
    7b28:	ldrb	r2, [r4, #0]
    7b2a:	bic.w	r2, r2, #1
    7b2e:	strb	r2, [r4, #0]
    7b30:	b.n	7af2 <SPIClass::setMOSI(unsigned char)+0xa>
	if (hardware_addr == (uintptr_t)&spi0_hardware) {
		SPCR.setMOSI_soft(pin);
	}
	if (pin != hardware().mosi_pin[mosi_pin_index]) {
		for (unsigned int i = 0; i < sizeof(hardware().mosi_pin); i++) {
			if  (pin == hardware().mosi_pin[i]) {
    7b32:	movs	r4, #0
    7b34:	mov	r1, r4
				if (hardware().clock_gate_register & hardware().clock_gate_mask) {
    7b36:	ldr	r6, [r3, #0]
    7b38:	ldr	r5, [r3, #4]
    7b3a:	ldr	r6, [r6, #0]
    7b3c:	tst	r6, r5
    7b3e:	beq.n	7b60 <SPIClass::setMOSI(unsigned char)+0x78>
					volatile uint32_t *reg;
					reg = portConfigRegister(hardware().mosi_pin[mosi_pin_index]);
    7b40:	ldr	r5, [pc, #48]	; (7b74 <SPIClass::setMOSI(unsigned char)+0x8c>)
    7b42:	add.w	r2, r5, r2, lsl #3
					*reg = 0;
    7b46:	movs	r7, #0
	if (pin != hardware().mosi_pin[mosi_pin_index]) {
		for (unsigned int i = 0; i < sizeof(hardware().mosi_pin); i++) {
			if  (pin == hardware().mosi_pin[i]) {
				if (hardware().clock_gate_register & hardware().clock_gate_mask) {
					volatile uint32_t *reg;
					reg = portConfigRegister(hardware().mosi_pin[mosi_pin_index]);
    7b48:	ldr	r6, [r2, #4]
					*reg = 0;
					reg = portConfigRegister(hardware().mosi_pin[i]);
    7b4a:	adds	r2, r3, r1
		for (unsigned int i = 0; i < sizeof(hardware().mosi_pin); i++) {
			if  (pin == hardware().mosi_pin[i]) {
				if (hardware().clock_gate_register & hardware().clock_gate_mask) {
					volatile uint32_t *reg;
					reg = portConfigRegister(hardware().mosi_pin[mosi_pin_index]);
					*reg = 0;
    7b4c:	str	r7, [r6, #0]
					reg = portConfigRegister(hardware().mosi_pin[i]);
    7b4e:	ldrb.w	r2, [r2, #36]	; 0x24
    7b52:	add.w	r5, r5, r2, lsl #3
					*reg = hardware().mosi_mux[i];
    7b56:	adds	r1, #10
			if  (pin == hardware().mosi_pin[i]) {
				if (hardware().clock_gate_register & hardware().clock_gate_mask) {
					volatile uint32_t *reg;
					reg = portConfigRegister(hardware().mosi_pin[mosi_pin_index]);
					*reg = 0;
					reg = portConfigRegister(hardware().mosi_pin[i]);
    7b58:	ldr	r2, [r5, #4]
					*reg = hardware().mosi_mux[i];
    7b5a:	ldr.w	r3, [r3, r1, lsl #2]
    7b5e:	str	r3, [r2, #0]
				}	
				mosi_pin_index = i;
    7b60:	strb	r4, [r0, #9]
				return;
    7b62:	b.n	7b0e <SPIClass::setMOSI(unsigned char)+0x26>
	if (hardware_addr == (uintptr_t)&spi0_hardware) {
		SPCR.setMOSI_soft(pin);
	}
	if (pin != hardware().mosi_pin[mosi_pin_index]) {
		for (unsigned int i = 0; i < sizeof(hardware().mosi_pin); i++) {
			if  (pin == hardware().mosi_pin[i]) {
    7b64:	movs	r4, #1
{
	if (hardware_addr == (uintptr_t)&spi0_hardware) {
		SPCR.setMOSI_soft(pin);
	}
	if (pin != hardware().mosi_pin[mosi_pin_index]) {
		for (unsigned int i = 0; i < sizeof(hardware().mosi_pin); i++) {
    7b66:	mov	r1, r4
    7b68:	b.n	7b36 <SPIClass::setMOSI(unsigned char)+0x4e>
    7b6a:	nop
    7b6c:	.word	0x000145dc
    7b70:	.word	0x200031c9
    7b74:	.word	0x00014758

00007b78 <SPIClass::setMISO(unsigned char)>:
	}
}

void SPIClass::setMISO(uint8_t pin)
{
	if (hardware_addr == (uintptr_t)&spi0_hardware) {
    7b78:	ldr	r2, [pc, #120]	; (7bf4 <SPIClass::setMISO(unsigned char)+0x7c>)
    7b7a:	ldr	r3, [r0, #4]
    7b7c:	cmp	r2, r3
		}
	}
}

void SPIClass::setMISO(uint8_t pin)
{
    7b7e:	push	{r4, r5, r6, r7}
	if (hardware_addr == (uintptr_t)&spi0_hardware) {
    7b80:	beq.n	7b9c <SPIClass::setMISO(unsigned char)+0x24>
		SPCR.setMISO_soft(pin);
	}
	if (pin != hardware().miso_pin[miso_pin_index]) {
    7b82:	ldrb	r2, [r0, #8]
    7b84:	add	r2, r3
    7b86:	ldrb	r2, [r2, #24]
    7b88:	cmp	r1, r2
    7b8a:	beq.n	7b98 <SPIClass::setMISO(unsigned char)+0x20>
		for (unsigned int i = 0; i < sizeof(hardware().miso_pin); i++) {
			if  (pin == hardware().miso_pin[i]) {
    7b8c:	ldrb	r4, [r3, #24]
    7b8e:	cmp	r4, r1
    7b90:	beq.n	7bbc <SPIClass::setMISO(unsigned char)+0x44>
    7b92:	ldrb	r4, [r3, #25]
    7b94:	cmp	r4, r1
    7b96:	beq.n	7bee <SPIClass::setMISO(unsigned char)+0x76>
				miso_pin_index = i;
				return;
			}
		}
	}
}
    7b98:	pop	{r4, r5, r6, r7}
    7b9a:	bx	lr
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
		if (pin == 12) pinout &= ~0xc;
		if (pin == 8)  pinout = (pinout & ~0xc) | 4;
		if (pin == 39) pinout = (pinout & ~0xc) | 8;
#else
		if (pin == 12) pinout &= ~2;
    7b9c:	cmp	r1, #12
    7b9e:	beq.n	7bb0 <SPIClass::setMISO(unsigned char)+0x38>
		if (pin == 8)  pinout |= 2;
    7ba0:	cmp	r1, #8
    7ba2:	bne.n	7b82 <SPIClass::setMISO(unsigned char)+0xa>
    7ba4:	ldr	r4, [pc, #80]	; (7bf8 <SPIClass::setMISO(unsigned char)+0x80>)
    7ba6:	ldrb	r2, [r4, #0]
    7ba8:	orr.w	r2, r2, #2
    7bac:	strb	r2, [r4, #0]
    7bae:	b.n	7b82 <SPIClass::setMISO(unsigned char)+0xa>
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
		if (pin == 12) pinout &= ~0xc;
		if (pin == 8)  pinout = (pinout & ~0xc) | 4;
		if (pin == 39) pinout = (pinout & ~0xc) | 8;
#else
		if (pin == 12) pinout &= ~2;
    7bb0:	ldr	r4, [pc, #68]	; (7bf8 <SPIClass::setMISO(unsigned char)+0x80>)
    7bb2:	ldrb	r2, [r4, #0]
    7bb4:	bic.w	r2, r2, #2
    7bb8:	strb	r2, [r4, #0]
    7bba:	b.n	7b82 <SPIClass::setMISO(unsigned char)+0xa>
	if (hardware_addr == (uintptr_t)&spi0_hardware) {
		SPCR.setMISO_soft(pin);
	}
	if (pin != hardware().miso_pin[miso_pin_index]) {
		for (unsigned int i = 0; i < sizeof(hardware().miso_pin); i++) {
			if  (pin == hardware().miso_pin[i]) {
    7bbc:	movs	r4, #0
    7bbe:	mov	r1, r4
				if (hardware().clock_gate_register & hardware().clock_gate_mask) {
    7bc0:	ldr	r6, [r3, #0]
    7bc2:	ldr	r5, [r3, #4]
    7bc4:	ldr	r6, [r6, #0]
    7bc6:	tst	r6, r5
    7bc8:	beq.n	7bea <SPIClass::setMISO(unsigned char)+0x72>
					volatile uint32_t *reg;
					reg = portConfigRegister(hardware().miso_pin[miso_pin_index]);
    7bca:	ldr	r5, [pc, #48]	; (7bfc <SPIClass::setMISO(unsigned char)+0x84>)
    7bcc:	add.w	r2, r5, r2, lsl #3
					*reg = 0;
    7bd0:	movs	r7, #0
	if (pin != hardware().miso_pin[miso_pin_index]) {
		for (unsigned int i = 0; i < sizeof(hardware().miso_pin); i++) {
			if  (pin == hardware().miso_pin[i]) {
				if (hardware().clock_gate_register & hardware().clock_gate_mask) {
					volatile uint32_t *reg;
					reg = portConfigRegister(hardware().miso_pin[miso_pin_index]);
    7bd2:	ldr	r6, [r2, #4]
					*reg = 0;
					reg = portConfigRegister(hardware().miso_pin[i]);
    7bd4:	adds	r2, r3, r1
		for (unsigned int i = 0; i < sizeof(hardware().miso_pin); i++) {
			if  (pin == hardware().miso_pin[i]) {
				if (hardware().clock_gate_register & hardware().clock_gate_mask) {
					volatile uint32_t *reg;
					reg = portConfigRegister(hardware().miso_pin[miso_pin_index]);
					*reg = 0;
    7bd6:	str	r7, [r6, #0]
					reg = portConfigRegister(hardware().miso_pin[i]);
    7bd8:	ldrb	r2, [r2, #24]
					*reg = hardware().miso_mux[i];
    7bda:	adds	r1, #6
			if  (pin == hardware().miso_pin[i]) {
				if (hardware().clock_gate_register & hardware().clock_gate_mask) {
					volatile uint32_t *reg;
					reg = portConfigRegister(hardware().miso_pin[miso_pin_index]);
					*reg = 0;
					reg = portConfigRegister(hardware().miso_pin[i]);
    7bdc:	add.w	r5, r5, r2, lsl #3
					*reg = hardware().miso_mux[i];
    7be0:	add.w	r3, r3, r1, lsl #2
			if  (pin == hardware().miso_pin[i]) {
				if (hardware().clock_gate_register & hardware().clock_gate_mask) {
					volatile uint32_t *reg;
					reg = portConfigRegister(hardware().miso_pin[miso_pin_index]);
					*reg = 0;
					reg = portConfigRegister(hardware().miso_pin[i]);
    7be4:	ldr	r2, [r5, #4]
					*reg = hardware().miso_mux[i];
    7be6:	ldr	r3, [r3, #4]
    7be8:	str	r3, [r2, #0]
				}	
				miso_pin_index = i;
    7bea:	strb	r4, [r0, #8]
				return;
    7bec:	b.n	7b98 <SPIClass::setMISO(unsigned char)+0x20>
	if (hardware_addr == (uintptr_t)&spi0_hardware) {
		SPCR.setMISO_soft(pin);
	}
	if (pin != hardware().miso_pin[miso_pin_index]) {
		for (unsigned int i = 0; i < sizeof(hardware().miso_pin); i++) {
			if  (pin == hardware().miso_pin[i]) {
    7bee:	movs	r4, #1
{
	if (hardware_addr == (uintptr_t)&spi0_hardware) {
		SPCR.setMISO_soft(pin);
	}
	if (pin != hardware().miso_pin[miso_pin_index]) {
		for (unsigned int i = 0; i < sizeof(hardware().miso_pin); i++) {
    7bf0:	mov	r1, r4
    7bf2:	b.n	7bc0 <SPIClass::setMISO(unsigned char)+0x48>
    7bf4:	.word	0x000145dc
    7bf8:	.word	0x200031c9
    7bfc:	.word	0x00014758

00007c00 <SPIClass::setSCK(unsigned char)>:
	}
}

void SPIClass::setSCK(uint8_t pin)
{
	if (hardware_addr == (uintptr_t)&spi0_hardware) {
    7c00:	ldr	r2, [pc, #128]	; (7c84 <SPIClass::setSCK(unsigned char)+0x84>)
    7c02:	ldr	r3, [r0, #4]
    7c04:	cmp	r2, r3
		}
	}
}

void SPIClass::setSCK(uint8_t pin)
{
    7c06:	push	{r4, r5, r6, r7}
	if (hardware_addr == (uintptr_t)&spi0_hardware) {
    7c08:	beq.n	7c2a <SPIClass::setSCK(unsigned char)+0x2a>
		SPCR.setSCK_soft(pin);
	}
	if (pin != hardware().sck_pin[sck_pin_index]) {
    7c0a:	ldrb	r2, [r0, #10]
    7c0c:	add	r2, r3
    7c0e:	ldrb.w	r2, [r2, #48]	; 0x30
    7c12:	cmp	r1, r2
    7c14:	beq.n	7c26 <SPIClass::setSCK(unsigned char)+0x26>
		for (unsigned int i = 0; i < sizeof(hardware().sck_pin); i++) {
			if  (pin == hardware().sck_pin[i]) {
    7c16:	ldrb.w	r4, [r3, #48]	; 0x30
    7c1a:	cmp	r4, r1
    7c1c:	beq.n	7c4a <SPIClass::setSCK(unsigned char)+0x4a>
    7c1e:	ldrb.w	r4, [r3, #49]	; 0x31
    7c22:	cmp	r4, r1
    7c24:	beq.n	7c7e <SPIClass::setSCK(unsigned char)+0x7e>
				sck_pin_index = i;
				return;
			}
		}
	}
}
    7c26:	pop	{r4, r5, r6, r7}
    7c28:	bx	lr
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
		if (pin == 13) pinout &= ~0x30;
		if (pin == 14) pinout = (pinout & ~0x30) | 0x10;
		if (pin == 27) pinout = (pinout & ~0x30) | 0x20;
#else
		if (pin == 13) pinout &= ~4;
    7c2a:	cmp	r1, #13
    7c2c:	beq.n	7c3e <SPIClass::setSCK(unsigned char)+0x3e>
		if (pin == 14) pinout |= 4;
    7c2e:	cmp	r1, #14
    7c30:	bne.n	7c0a <SPIClass::setSCK(unsigned char)+0xa>
    7c32:	ldr	r4, [pc, #84]	; (7c88 <SPIClass::setSCK(unsigned char)+0x88>)
    7c34:	ldrb	r2, [r4, #0]
    7c36:	orr.w	r2, r2, #4
    7c3a:	strb	r2, [r4, #0]
    7c3c:	b.n	7c0a <SPIClass::setSCK(unsigned char)+0xa>
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
		if (pin == 13) pinout &= ~0x30;
		if (pin == 14) pinout = (pinout & ~0x30) | 0x10;
		if (pin == 27) pinout = (pinout & ~0x30) | 0x20;
#else
		if (pin == 13) pinout &= ~4;
    7c3e:	ldr	r4, [pc, #72]	; (7c88 <SPIClass::setSCK(unsigned char)+0x88>)
    7c40:	ldrb	r2, [r4, #0]
    7c42:	bic.w	r2, r2, #4
    7c46:	strb	r2, [r4, #0]
    7c48:	b.n	7c0a <SPIClass::setSCK(unsigned char)+0xa>
	if (hardware_addr == (uintptr_t)&spi0_hardware) {
		SPCR.setSCK_soft(pin);
	}
	if (pin != hardware().sck_pin[sck_pin_index]) {
		for (unsigned int i = 0; i < sizeof(hardware().sck_pin); i++) {
			if  (pin == hardware().sck_pin[i]) {
    7c4a:	movs	r4, #0
    7c4c:	mov	r1, r4
				if (hardware().clock_gate_register & hardware().clock_gate_mask) {
    7c4e:	ldr	r6, [r3, #0]
    7c50:	ldr	r5, [r3, #4]
    7c52:	ldr	r6, [r6, #0]
    7c54:	tst	r6, r5
    7c56:	beq.n	7c7a <SPIClass::setSCK(unsigned char)+0x7a>
					volatile uint32_t *reg;
					reg = portConfigRegister(hardware().sck_pin[sck_pin_index]);
    7c58:	ldr	r5, [pc, #48]	; (7c8c <SPIClass::setSCK(unsigned char)+0x8c>)
    7c5a:	add.w	r2, r5, r2, lsl #3
					*reg = 0;
    7c5e:	movs	r7, #0
	if (pin != hardware().sck_pin[sck_pin_index]) {
		for (unsigned int i = 0; i < sizeof(hardware().sck_pin); i++) {
			if  (pin == hardware().sck_pin[i]) {
				if (hardware().clock_gate_register & hardware().clock_gate_mask) {
					volatile uint32_t *reg;
					reg = portConfigRegister(hardware().sck_pin[sck_pin_index]);
    7c60:	ldr	r6, [r2, #4]
					*reg = 0;
					reg = portConfigRegister(hardware().sck_pin[i]);
    7c62:	adds	r2, r3, r1
		for (unsigned int i = 0; i < sizeof(hardware().sck_pin); i++) {
			if  (pin == hardware().sck_pin[i]) {
				if (hardware().clock_gate_register & hardware().clock_gate_mask) {
					volatile uint32_t *reg;
					reg = portConfigRegister(hardware().sck_pin[sck_pin_index]);
					*reg = 0;
    7c64:	str	r7, [r6, #0]
					reg = portConfigRegister(hardware().sck_pin[i]);
    7c66:	ldrb.w	r2, [r2, #48]	; 0x30
					*reg = hardware().sck_mux[i];
    7c6a:	adds	r1, #12
			if  (pin == hardware().sck_pin[i]) {
				if (hardware().clock_gate_register & hardware().clock_gate_mask) {
					volatile uint32_t *reg;
					reg = portConfigRegister(hardware().sck_pin[sck_pin_index]);
					*reg = 0;
					reg = portConfigRegister(hardware().sck_pin[i]);
    7c6c:	add.w	r5, r5, r2, lsl #3
					*reg = hardware().sck_mux[i];
    7c70:	add.w	r3, r3, r1, lsl #2
			if  (pin == hardware().sck_pin[i]) {
				if (hardware().clock_gate_register & hardware().clock_gate_mask) {
					volatile uint32_t *reg;
					reg = portConfigRegister(hardware().sck_pin[sck_pin_index]);
					*reg = 0;
					reg = portConfigRegister(hardware().sck_pin[i]);
    7c74:	ldr	r2, [r5, #4]
					*reg = hardware().sck_mux[i];
    7c76:	ldr	r3, [r3, #4]
    7c78:	str	r3, [r2, #0]
				}	
				sck_pin_index = i;
    7c7a:	strb	r4, [r0, #10]
				return;
    7c7c:	b.n	7c26 <SPIClass::setSCK(unsigned char)+0x26>
	if (hardware_addr == (uintptr_t)&spi0_hardware) {
		SPCR.setSCK_soft(pin);
	}
	if (pin != hardware().sck_pin[sck_pin_index]) {
		for (unsigned int i = 0; i < sizeof(hardware().sck_pin); i++) {
			if  (pin == hardware().sck_pin[i]) {
    7c7e:	movs	r4, #1
{
	if (hardware_addr == (uintptr_t)&spi0_hardware) {
		SPCR.setSCK_soft(pin);
	}
	if (pin != hardware().sck_pin[sck_pin_index]) {
		for (unsigned int i = 0; i < sizeof(hardware().sck_pin); i++) {
    7c80:	mov	r1, r4
    7c82:	b.n	7c4e <SPIClass::setSCK(unsigned char)+0x4e>
    7c84:	.word	0x000145dc
    7c88:	.word	0x200031c9
    7c8c:	.word	0x00014758

00007c90 <SPIClass::transfer(void const*, void*, unsigned int)>:
}

void SPIClass::transfer(const void * buf, void * retbuf, size_t count)
{

	if (count == 0) return;
    7c90:	cbz	r3, 7c96 <SPIClass::transfer(void const*, void*, unsigned int)+0x6>
    7c92:	b.w	7740 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]>
    7c96:	bx	lr

00007c98 <breakTime(long, tmElements_t&)>:
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
  time /= 24; // now it is days
    7c98:	ldr	r2, [pc, #400]	; (7e2c <breakTime(long, tmElements_t&)+0x194>)
  uint8_t month, monthLength;
  uint32_t time;
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
    7c9a:	ldr	r3, [pc, #404]	; (7e30 <breakTime(long, tmElements_t&)+0x198>)
// leap year calculator expects year argument as years offset from 1970
#define LEAP_YEAR(Y)     ( ((1970+(Y))>0) && !((1970+(Y))%4) && ( ((1970+(Y))%100) || !((1970+(Y))%400) ) )

static  const uint8_t monthDays[]={31,28,31,30,31,30,31,31,30,31,30,31}; // API starts months from 1, this array starts from 0
 
void breakTime(time_t timeInput, tmElements_t &tm){
    7c9c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  time = (uint32_t)timeInput;
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
    7ca0:	ldr	r6, [pc, #400]	; (7e34 <breakTime(long, tmElements_t&)+0x19c>)
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    7ca2:	ldr.w	sl, [pc, #416]	; 7e44 <breakTime(long, tmElements_t&)+0x1ac>
  time = (uint32_t)timeInput;
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
    7ca6:	ldr	r4, [pc, #400]	; (7e38 <breakTime(long, tmElements_t&)+0x1a0>)
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
  
  year = 0;  
  days = 0;
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    7ca8:	ldr.w	r9, [pc, #400]	; 7e3c <breakTime(long, tmElements_t&)+0x1a4>
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
  time /= 24; // now it is days
    7cac:	umull	r5, r2, r2, r0
    7cb0:	mov.w	ip, r2, lsr #16
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    7cb4:	add.w	r7, ip, #4
  uint8_t month, monthLength;
  uint32_t time;
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
    7cb8:	umull	r2, r5, r3, r0
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
    7cbc:	umull	r6, r2, r6, r0
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    7cc0:	umull	sl, fp, r7, sl
  uint8_t month, monthLength;
  uint32_t time;
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
    7cc4:	lsrs	r5, r5, #5
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
    7cc6:	lsrs	r2, r2, #11
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
    7cc8:	umull	r6, r3, r3, r5
  time /= 60; // now it is hours
  tm.Hour = time % 24;
    7ccc:	umull	r6, r4, r4, r2
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    7cd0:	rsb	r6, fp, r7
    7cd4:	add.w	r6, fp, r6, lsr #1
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
    7cd8:	lsrs	r3, r3, #5
  time /= 60; // now it is hours
  tm.Hour = time % 24;
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    7cda:	lsrs	r6, r6, #2
  time = (uint32_t)timeInput;
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
    7cdc:	lsrs	r4, r4, #4
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    7cde:	rsb	r6, r6, r6, lsl #3
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
    7ce2:	rsb	r3, r3, r3, lsl #4
  time /= 60; // now it is hours
  tm.Hour = time % 24;
    7ce6:	add.w	r4, r4, r4, lsl #1
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
    7cea:	sub.w	r3, r5, r3, lsl #2
  time /= 60; // now it is hours
  tm.Hour = time % 24;
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    7cee:	subs	r6, r7, r6
  uint8_t month, monthLength;
  uint32_t time;
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
    7cf0:	rsb	r5, r5, r5, lsl #4
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
    7cf4:	sub.w	r2, r2, r4, lsl #3
  uint8_t month, monthLength;
  uint32_t time;
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
    7cf8:	sub.w	r0, r0, r5, lsl #2
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    7cfc:	adds	r6, #1
    7cfe:	movs	r4, #0
  time = (uint32_t)timeInput;
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
    7d00:	strb	r2, [r1, #2]
  uint8_t month, monthLength;
  uint32_t time;
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
    7d02:	strb	r0, [r1, #0]
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
    7d04:	strb	r3, [r1, #1]
  time /= 60; // now it is hours
  tm.Hour = time % 24;
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    7d06:	strb	r6, [r1, #3]
  
  year = 0;  
  days = 0;
    7d08:	mov	r2, r4
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    7d0a:	movw	fp, #365	; 0x16d
    7d0e:	mov.w	r8, #100	; 0x64
    7d12:	mov.w	sl, #400	; 0x190
    7d16:	b.n	7d36 <breakTime(long, tmElements_t&)+0x9e>
    7d18:	rsb	r5, r6, r5, asr #7
    7d1c:	mls	r5, sl, r5, r3
    7d20:	cbnz	r0, 7d80 <breakTime(long, tmElements_t&)+0xe8>
    7d22:	cmp	r5, #0
    7d24:	ite	ne
    7d26:	movne	r0, fp
    7d28:	moveq.w	r0, #366	; 0x16e
    7d2c:	add	r2, r0
    7d2e:	cmp	ip, r2
    7d30:	add.w	r4, r4, #1
    7d34:	bcc.n	7d5e <breakTime(long, tmElements_t&)+0xc6>
    7d36:	uxtb	r7, r4
    7d38:	addw	r3, r7, #1970	; 0x7b2
    7d3c:	smull	r0, r5, r9, r3
    7d40:	asrs	r6, r3, #31
    7d42:	rsb	r0, r6, r5, asr #5
    7d46:	ands.w	lr, r3, #3
    7d4a:	mls	r0, r8, r0, r3
    7d4e:	beq.n	7d18 <breakTime(long, tmElements_t&)+0x80>
    7d50:	movw	r0, #365	; 0x16d
    7d54:	add	r2, r0
    7d56:	cmp	ip, r2
    7d58:	add.w	r4, r4, #1
    7d5c:	bcs.n	7d36 <breakTime(long, tmElements_t&)+0x9e>
    year++;
  }
  tm.Year = year; // year is offset from 1970 
    7d5e:	strb	r7, [r1, #6]
  
  days -= LEAP_YEAR(year) ? 366 : 365;
    7d60:	cmp.w	lr, #0
    7d64:	bne.n	7d86 <breakTime(long, tmElements_t&)+0xee>
    7d66:	ldr	r0, [pc, #212]	; (7e3c <breakTime(long, tmElements_t&)+0x1a4>)
    7d68:	asrs	r6, r3, #31
    7d6a:	smull	r4, r0, r0, r3
    7d6e:	rsb	r4, r6, r0, asr #5
    7d72:	movs	r5, #100	; 0x64
    7d74:	mls	r4, r5, r4, r3
    7d78:	cbz	r4, 7dea <breakTime(long, tmElements_t&)+0x152>
    7d7a:	mov.w	r4, #366	; 0x16e
    7d7e:	b.n	7d8c <breakTime(long, tmElements_t&)+0xf4>
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
  
  year = 0;  
  days = 0;
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    7d80:	mov.w	r0, #366	; 0x16e
    7d84:	b.n	7d2c <breakTime(long, tmElements_t&)+0x94>
    year++;
  }
  tm.Year = year; // year is offset from 1970 
  
  days -= LEAP_YEAR(year) ? 366 : 365;
    7d86:	movw	r4, #365	; 0x16d
    7d8a:	asrs	r6, r3, #31
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    if (month==1) { // february
      if (LEAP_YEAR(year)) {
    7d8c:	ldr	r0, [pc, #172]	; (7e3c <breakTime(long, tmElements_t&)+0x1a4>)
        monthLength=29;
      } else {
        monthLength=28;
      }
    } else {
      monthLength = monthDays[month];
    7d8e:	ldr	r5, [pc, #176]	; (7e40 <breakTime(long, tmElements_t&)+0x1a8>)
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    if (month==1) { // february
      if (LEAP_YEAR(year)) {
    7d90:	smull	r7, r0, r0, r3
    7d94:	rsb	r8, r6, r0, asr #5
    year++;
  }
  tm.Year = year; // year is offset from 1970 
  
  days -= LEAP_YEAR(year) ? 366 : 365;
  time  -= days; // now it is days in this year, starting at 0
    7d98:	subs	r2, r2, r4
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    if (month==1) { // february
      if (LEAP_YEAR(year)) {
    7d9a:	rsb	r6, r6, r0, asr #7
    7d9e:	movs	r4, #100	; 0x64
    7da0:	mov.w	r0, #400	; 0x190
    7da4:	mls	r6, r0, r6, r3
    7da8:	mls	r8, r4, r8, r3
    year++;
  }
  tm.Year = year; // year is offset from 1970 
  
  days -= LEAP_YEAR(year) ? 366 : 365;
  time  -= days; // now it is days in this year, starting at 0
    7dac:	rsb	r2, r2, ip
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    if (month==1) { // february
      if (LEAP_YEAR(year)) {
    7db0:	movs	r0, #1
    7db2:	movs	r3, #0
    7db4:	b.n	7dbc <breakTime(long, tmElements_t&)+0x124>
    7db6:	adds	r0, #1
    7db8:	uxtb	r0, r0
    7dba:	adds	r3, #1
  
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    if (month==1) { // february
    7dbc:	cmp	r3, #1
    7dbe:	uxtb	r7, r3
    7dc0:	beq.n	7e04 <breakTime(long, tmElements_t&)+0x16c>
      }
    } else {
      monthLength = monthDays[month];
    }
    
    if (time >= monthLength) {
    7dc2:	ldrb	r4, [r3, r5]
    7dc4:	cmp	r4, r2
    7dc6:	bhi.n	7ddc <breakTime(long, tmElements_t&)+0x144>
  time  -= days; // now it is days in this year, starting at 0
  
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    7dc8:	cmp	r0, #12
    } else {
      monthLength = monthDays[month];
    }
    
    if (time >= monthLength) {
      time -= monthLength;
    7dca:	sub.w	r2, r2, r4
  time  -= days; // now it is days in this year, starting at 0
  
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    7dce:	bne.n	7db6 <breakTime(long, tmElements_t&)+0x11e>
    7dd0:	movs	r7, #13
    } else {
        break;
    }
  }
  tm.Month = month + 1;  // jan is month 1  
  tm.Day = time + 1;     // day of month
    7dd2:	adds	r2, #1
    7dd4:	strb	r2, [r1, #4]
      time -= monthLength;
    } else {
        break;
    }
  }
  tm.Month = month + 1;  // jan is month 1  
    7dd6:	strb	r7, [r1, #5]
  tm.Day = time + 1;     // day of month
}
    7dd8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7ddc:	adds	r7, #1
    7dde:	uxtb	r7, r7
    } else {
        break;
    }
  }
  tm.Month = month + 1;  // jan is month 1  
  tm.Day = time + 1;     // day of month
    7de0:	adds	r2, #1
    7de2:	strb	r2, [r1, #4]
      time -= monthLength;
    } else {
        break;
    }
  }
  tm.Month = month + 1;  // jan is month 1  
    7de4:	strb	r7, [r1, #5]
  tm.Day = time + 1;     // day of month
}
    7de6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    year++;
  }
  tm.Year = year; // year is offset from 1970 
  
  days -= LEAP_YEAR(year) ? 366 : 365;
    7dea:	mov.w	r4, #400	; 0x190
    7dee:	rsb	r0, r6, r0, asr #7
    7df2:	mls	r0, r4, r0, r3
    7df6:	cmp	r0, #0
    7df8:	movw	r4, #365	; 0x16d
    7dfc:	it	eq
    7dfe:	moveq.w	r4, #366	; 0x16e
    7e02:	b.n	7d8c <breakTime(long, tmElements_t&)+0xf4>
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    if (month==1) { // february
      if (LEAP_YEAR(year)) {
    7e04:	cmp.w	lr, #0
    7e08:	bne.n	7e20 <breakTime(long, tmElements_t&)+0x188>
    7e0a:	cmp.w	r8, #0
    7e0e:	bne.n	7e28 <breakTime(long, tmElements_t&)+0x190>
    7e10:	cmp	r6, #0
    7e12:	ite	ne
    7e14:	movne	r4, #28
    7e16:	moveq	r4, #29
      }
    } else {
      monthLength = monthDays[month];
    }
    
    if (time >= monthLength) {
    7e18:	cmp	r2, r4
    7e1a:	bcc.n	7e24 <breakTime(long, tmElements_t&)+0x18c>
      time -= monthLength;
    7e1c:	subs	r2, r2, r4
    7e1e:	b.n	7db6 <breakTime(long, tmElements_t&)+0x11e>
    7e20:	movs	r4, #28
    7e22:	b.n	7e18 <breakTime(long, tmElements_t&)+0x180>
      }
    } else {
      monthLength = monthDays[month];
    }
    
    if (time >= monthLength) {
    7e24:	movs	r7, #2
    7e26:	b.n	7dd2 <breakTime(long, tmElements_t&)+0x13a>
    7e28:	movs	r4, #29
    7e2a:	b.n	7e18 <breakTime(long, tmElements_t&)+0x180>
    7e2c:	.word	0xc22e4507
    7e30:	.word	0x88888889
    7e34:	.word	0x91a2b3c5
    7e38:	.word	0xaaaaaaab
    7e3c:	.word	0x51eb851f
    7e40:	.word	0x00014654
    7e44:	.word	0x24924925

00007e48 <refreshCache(long) [clone .part.0]>:

static tmElements_t tm;          // a cache of time elements
static time_t cacheTime;   // the time the cache was updated
static uint32_t syncInterval = 300;  // time sync will be attempted after this many seconds

void refreshCache(time_t t) {
    7e48:	push	{r4, lr}
  if (t != cacheTime) {
    breakTime(t, tm); 
    7e4a:	ldr	r1, [pc, #12]	; (7e58 <refreshCache(long) [clone .part.0]+0x10>)

static tmElements_t tm;          // a cache of time elements
static time_t cacheTime;   // the time the cache was updated
static uint32_t syncInterval = 300;  // time sync will be attempted after this many seconds

void refreshCache(time_t t) {
    7e4c:	mov	r4, r0
  if (t != cacheTime) {
    breakTime(t, tm); 
    7e4e:	bl	7c98 <breakTime(long, tmElements_t&)>
    cacheTime = t; 
    7e52:	ldr	r3, [pc, #8]	; (7e5c <refreshCache(long) [clone .part.0]+0x14>)
    7e54:	str	r4, [r3, #0]
    7e56:	pop	{r4, pc}
    7e58:	.word	0x20002b30
    7e5c:	.word	0x20002b2c

00007e60 <now()>:
#ifdef TIME_DRIFT_INFO   // define this to get drift data
time_t sysUnsyncedTime = 0; // the time sysTime unadjusted by sync  
#endif


time_t now() {
    7e60:	push	{r4, r5, r6, r7, lr}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    7e62:	ldr	r4, [pc, #128]	; (7ee4 <now()+0x84>)
	// calculate number of seconds passed since last call to now()
  while (millis() - prevMillis >= 1000) {
    7e64:	ldr	r6, [pc, #128]	; (7ee8 <now()+0x88>)
    7e66:	ldr	r3, [r4, #0]
    7e68:	ldr	r2, [r6, #0]
    7e6a:	ldr	r5, [pc, #128]	; (7eec <now()+0x8c>)
#ifdef TIME_DRIFT_INFO   // define this to get drift data
time_t sysUnsyncedTime = 0; // the time sysTime unadjusted by sync  
#endif


time_t now() {
    7e6c:	sub	sp, #12
    7e6e:	ldr	r0, [r5, #0]
    7e70:	str	r3, [sp, #0]
	return ret;
    7e72:	ldr	r3, [sp, #0]
	// calculate number of seconds passed since last call to now()
  while (millis() - prevMillis >= 1000) {
    7e74:	subs	r3, r3, r2
    7e76:	cmp.w	r3, #1000	; 0x3e8
    7e7a:	bcc.n	7e9c <now()+0x3c>
    7e7c:	adds	r0, #1
    7e7e:	b.n	7e82 <now()+0x22>
    7e80:	mov	r0, r1
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    7e82:	ldr	r3, [r4, #0]
    7e84:	str	r3, [sp, #0]
	return ret;
    7e86:	ldr	r3, [sp, #0]
		// millis() and prevMillis are both unsigned ints thus the subtraction will always be the absolute value of the difference
    sysTime++;
    prevMillis += 1000;	
    7e88:	add.w	r2, r2, #1000	; 0x3e8
#endif


time_t now() {
	// calculate number of seconds passed since last call to now()
  while (millis() - prevMillis >= 1000) {
    7e8c:	subs	r3, r3, r2
    7e8e:	cmp.w	r3, #1000	; 0x3e8
    7e92:	add.w	r1, r0, #1
    7e96:	bcs.n	7e80 <now()+0x20>
    7e98:	str	r0, [r5, #0]
    7e9a:	str	r2, [r6, #0]
    prevMillis += 1000;	
#ifdef TIME_DRIFT_INFO
    sysUnsyncedTime++; // this can be compared to the synced time to measure long term drift     
#endif
  }
  if (nextSyncTime <= sysTime) {
    7e9c:	ldr	r7, [pc, #80]	; (7ef0 <now()+0x90>)
    7e9e:	ldr	r3, [r7, #0]
    7ea0:	cmp	r0, r3
    7ea2:	bcc.n	7ec4 <now()+0x64>
    if (getTimePtr != 0) {
    7ea4:	ldr	r3, [pc, #76]	; (7ef4 <now()+0x94>)
    7ea6:	ldr	r3, [r3, #0]
    7ea8:	cbz	r3, 7ec4 <now()+0x64>
      time_t t = getTimePtr();
    7eaa:	blx	r3
 if(sysUnsyncedTime == 0) 
   sysUnsyncedTime = t;   // store the time of the first call to set a valid Time   
#endif

  sysTime = (uint32_t)t;  
  nextSyncTime = (uint32_t)t + syncInterval;
    7eac:	ldr	r3, [pc, #72]	; (7ef8 <now()+0x98>)
#endif
  }
  if (nextSyncTime <= sysTime) {
    if (getTimePtr != 0) {
      time_t t = getTimePtr();
      if (t != 0) {
    7eae:	cbnz	r0, 7ec8 <now()+0x68>
        setTime(t);
      } else {
        nextSyncTime = sysTime + syncInterval;
        Status = (Status == timeNotSet) ?  timeNotSet : timeNeedsSync;
    7eb0:	ldr	r1, [pc, #72]	; (7efc <now()+0x9c>)
    if (getTimePtr != 0) {
      time_t t = getTimePtr();
      if (t != 0) {
        setTime(t);
      } else {
        nextSyncTime = sysTime + syncInterval;
    7eb2:	ldr	r2, [r3, #0]
        Status = (Status == timeNotSet) ?  timeNotSet : timeNeedsSync;
    7eb4:	ldrb	r3, [r1, #0]
    if (getTimePtr != 0) {
      time_t t = getTimePtr();
      if (t != 0) {
        setTime(t);
      } else {
        nextSyncTime = sysTime + syncInterval;
    7eb6:	ldr	r0, [r5, #0]
        Status = (Status == timeNotSet) ?  timeNotSet : timeNeedsSync;
    7eb8:	adds	r3, #0
    if (getTimePtr != 0) {
      time_t t = getTimePtr();
      if (t != 0) {
        setTime(t);
      } else {
        nextSyncTime = sysTime + syncInterval;
    7eba:	add	r2, r0
        Status = (Status == timeNotSet) ?  timeNotSet : timeNeedsSync;
    7ebc:	it	ne
    7ebe:	movne	r3, #1
    if (getTimePtr != 0) {
      time_t t = getTimePtr();
      if (t != 0) {
        setTime(t);
      } else {
        nextSyncTime = sysTime + syncInterval;
    7ec0:	str	r2, [r7, #0]
        Status = (Status == timeNotSet) ?  timeNotSet : timeNeedsSync;
    7ec2:	strb	r3, [r1, #0]
      }
    }
  }  
  return (time_t)sysTime;
}
    7ec4:	add	sp, #12
    7ec6:	pop	{r4, r5, r6, r7, pc}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    7ec8:	ldr	r2, [r4, #0]
    7eca:	str	r2, [sp, #4]
 if(sysUnsyncedTime == 0) 
   sysUnsyncedTime = t;   // store the time of the first call to set a valid Time   
#endif

  sysTime = (uint32_t)t;  
  nextSyncTime = (uint32_t)t + syncInterval;
    7ecc:	ldr	r3, [r3, #0]
  Status = timeSet;
    7ece:	ldr	r2, [pc, #44]	; (7efc <now()+0x9c>)
	return ret;
    7ed0:	ldr	r4, [sp, #4]
#ifdef TIME_DRIFT_INFO
 if(sysUnsyncedTime == 0) 
   sysUnsyncedTime = t;   // store the time of the first call to set a valid Time   
#endif

  sysTime = (uint32_t)t;  
    7ed2:	str	r0, [r5, #0]
  nextSyncTime = (uint32_t)t + syncInterval;
    7ed4:	add	r3, r0
  Status = timeSet;
    7ed6:	movs	r1, #2
  prevMillis = millis();  // restart counting from now (thanks to Korman for this fix)
    7ed8:	str	r4, [r6, #0]
 if(sysUnsyncedTime == 0) 
   sysUnsyncedTime = t;   // store the time of the first call to set a valid Time   
#endif

  sysTime = (uint32_t)t;  
  nextSyncTime = (uint32_t)t + syncInterval;
    7eda:	str	r3, [r7, #0]
  Status = timeSet;
    7edc:	strb	r1, [r2, #0]
        Status = (Status == timeNotSet) ?  timeNotSet : timeNeedsSync;
      }
    }
  }  
  return (time_t)sysTime;
}
    7ede:	add	sp, #12
    7ee0:	pop	{r4, r5, r6, r7, pc}
    7ee2:	nop
    7ee4:	.word	0x200030a4
    7ee8:	.word	0x20002b44
    7eec:	.word	0x20002b38
    7ef0:	.word	0x20002b48
    7ef4:	.word	0x20002b40
    7ef8:	.word	0x1fff8a98
    7efc:	.word	0x20002b3c

00007f00 <hour()>:
    breakTime(t, tm); 
    cacheTime = t; 
  }
}

int hour() { // the hour now 
    7f00:	push	{r3, lr}
  return hour(now()); 
    7f02:	bl	7e60 <now()>
static tmElements_t tm;          // a cache of time elements
static time_t cacheTime;   // the time the cache was updated
static uint32_t syncInterval = 300;  // time sync will be attempted after this many seconds

void refreshCache(time_t t) {
  if (t != cacheTime) {
    7f06:	ldr	r3, [pc, #16]	; (7f18 <hour()+0x18>)
    7f08:	ldr	r3, [r3, #0]
    7f0a:	cmp	r0, r3
    7f0c:	beq.n	7f12 <hour()+0x12>
    7f0e:	bl	7e48 <refreshCache(long) [clone .part.0]>
  return hour(now()); 
}

int hour(time_t t) { // the hour for the given time
  refreshCache(t);
  return tm.Hour;  
    7f12:	ldr	r3, [pc, #8]	; (7f1c <hour()+0x1c>)
  }
}

int hour() { // the hour now 
  return hour(now()); 
}
    7f14:	ldrb	r0, [r3, #2]
    7f16:	pop	{r3, pc}
    7f18:	.word	0x20002b2c
    7f1c:	.word	0x20002b30

00007f20 <minute()>:

uint8_t isPM(time_t t) { // returns true if PM
  return (hour(t) >= 12); 
}

int minute() {
    7f20:	push	{r3, lr}
  return minute(now()); 
    7f22:	bl	7e60 <now()>
static tmElements_t tm;          // a cache of time elements
static time_t cacheTime;   // the time the cache was updated
static uint32_t syncInterval = 300;  // time sync will be attempted after this many seconds

void refreshCache(time_t t) {
  if (t != cacheTime) {
    7f26:	ldr	r3, [pc, #16]	; (7f38 <minute()+0x18>)
    7f28:	ldr	r3, [r3, #0]
    7f2a:	cmp	r0, r3
    7f2c:	beq.n	7f32 <minute()+0x12>
    7f2e:	bl	7e48 <refreshCache(long) [clone .part.0]>
  return minute(now()); 
}

int minute(time_t t) { // the minute for the given time
  refreshCache(t);
  return tm.Minute;  
    7f32:	ldr	r3, [pc, #8]	; (7f3c <minute()+0x1c>)
  return (hour(t) >= 12); 
}

int minute() {
  return minute(now()); 
}
    7f34:	ldrb	r0, [r3, #1]
    7f36:	pop	{r3, pc}
    7f38:	.word	0x20002b2c
    7f3c:	.word	0x20002b30

00007f40 <second()>:
int minute(time_t t) { // the minute for the given time
  refreshCache(t);
  return tm.Minute;  
}

int second() {
    7f40:	push	{r3, lr}
  return second(now()); 
    7f42:	bl	7e60 <now()>
static tmElements_t tm;          // a cache of time elements
static time_t cacheTime;   // the time the cache was updated
static uint32_t syncInterval = 300;  // time sync will be attempted after this many seconds

void refreshCache(time_t t) {
  if (t != cacheTime) {
    7f46:	ldr	r3, [pc, #16]	; (7f58 <second()+0x18>)
    7f48:	ldr	r3, [r3, #0]
    7f4a:	cmp	r0, r3
    7f4c:	beq.n	7f52 <second()+0x12>
    7f4e:	bl	7e48 <refreshCache(long) [clone .part.0]>
  return second(now()); 
}

int second(time_t t) {  // the second for the given time
  refreshCache(t);
  return tm.Second;
    7f52:	ldr	r3, [pc, #8]	; (7f5c <second()+0x1c>)
  return tm.Minute;  
}

int second() {
  return second(now()); 
}
    7f54:	ldrb	r0, [r3, #0]
    7f56:	pop	{r3, pc}
    7f58:	.word	0x20002b2c
    7f5c:	.word	0x20002b30

00007f60 <day()>:
int second(time_t t) {  // the second for the given time
  refreshCache(t);
  return tm.Second;
}

int day(){
    7f60:	push	{r3, lr}
  return(day(now())); 
    7f62:	bl	7e60 <now()>
static tmElements_t tm;          // a cache of time elements
static time_t cacheTime;   // the time the cache was updated
static uint32_t syncInterval = 300;  // time sync will be attempted after this many seconds

void refreshCache(time_t t) {
  if (t != cacheTime) {
    7f66:	ldr	r3, [pc, #16]	; (7f78 <day()+0x18>)
    7f68:	ldr	r3, [r3, #0]
    7f6a:	cmp	r0, r3
    7f6c:	beq.n	7f72 <day()+0x12>
    7f6e:	bl	7e48 <refreshCache(long) [clone .part.0]>
  return(day(now())); 
}

int day(time_t t) { // the day for the given time (0-6)
  refreshCache(t);
  return tm.Day;
    7f72:	ldr	r3, [pc, #8]	; (7f7c <day()+0x1c>)
  return tm.Second;
}

int day(){
  return(day(now())); 
}
    7f74:	ldrb	r0, [r3, #4]
    7f76:	pop	{r3, pc}
    7f78:	.word	0x20002b2c
    7f7c:	.word	0x20002b30

00007f80 <month()>:
int weekday(time_t t) {
  refreshCache(t);
  return tm.Wday;
}
   
int month(){
    7f80:	push	{r3, lr}
  return month(now()); 
    7f82:	bl	7e60 <now()>
static tmElements_t tm;          // a cache of time elements
static time_t cacheTime;   // the time the cache was updated
static uint32_t syncInterval = 300;  // time sync will be attempted after this many seconds

void refreshCache(time_t t) {
  if (t != cacheTime) {
    7f86:	ldr	r3, [pc, #16]	; (7f98 <month()+0x18>)
    7f88:	ldr	r3, [r3, #0]
    7f8a:	cmp	r0, r3
    7f8c:	beq.n	7f92 <month()+0x12>
    7f8e:	bl	7e48 <refreshCache(long) [clone .part.0]>
  return month(now()); 
}

int month(time_t t) {  // the month for the given time
  refreshCache(t);
  return tm.Month;
    7f92:	ldr	r3, [pc, #8]	; (7f9c <month()+0x1c>)
  return tm.Wday;
}
   
int month(){
  return month(now()); 
}
    7f94:	ldrb	r0, [r3, #5]
    7f96:	pop	{r3, pc}
    7f98:	.word	0x20002b2c
    7f9c:	.word	0x20002b30

00007fa0 <year()>:
int month(time_t t) {  // the month for the given time
  refreshCache(t);
  return tm.Month;
}

int year() {  // as in Processing, the full four digit year: (2009, 2010 etc) 
    7fa0:	push	{r3, lr}
  return year(now()); 
    7fa2:	bl	7e60 <now()>
static tmElements_t tm;          // a cache of time elements
static time_t cacheTime;   // the time the cache was updated
static uint32_t syncInterval = 300;  // time sync will be attempted after this many seconds

void refreshCache(time_t t) {
  if (t != cacheTime) {
    7fa6:	ldr	r3, [pc, #20]	; (7fbc <year()+0x1c>)
    7fa8:	ldr	r3, [r3, #0]
    7faa:	cmp	r0, r3
    7fac:	beq.n	7fb2 <year()+0x12>
    7fae:	bl	7e48 <refreshCache(long) [clone .part.0]>
  return year(now()); 
}

int year(time_t t) { // the year for the given time
  refreshCache(t);
  return tmYearToCalendar(tm.Year);
    7fb2:	ldr	r3, [pc, #12]	; (7fc0 <year()+0x20>)
  refreshCache(t);
  return tm.Month;
}

int year() {  // as in Processing, the full four digit year: (2009, 2010 etc) 
  return year(now()); 
    7fb4:	ldrb	r0, [r3, #6]
}
    7fb6:	addw	r0, r0, #1970	; 0x7b2
    7fba:	pop	{r3, pc}
    7fbc:	.word	0x20002b2c
    7fc0:	.word	0x20002b30

00007fc4 <setSyncProvider(long (*)())>:
  return Status;
}

void setSyncProvider( getExternalTime getTimeFunction){
  getTimePtr = getTimeFunction;  
  nextSyncTime = sysTime;
    7fc4:	ldr	r1, [pc, #12]	; (7fd4 <setSyncProvider(long (*)())+0x10>)
    7fc6:	ldr	r2, [pc, #16]	; (7fd8 <setSyncProvider(long (*)())+0x14>)
  now(); // required to actually update the status
  return Status;
}

void setSyncProvider( getExternalTime getTimeFunction){
  getTimePtr = getTimeFunction;  
    7fc8:	ldr	r3, [pc, #16]	; (7fdc <setSyncProvider(long (*)())+0x18>)
  nextSyncTime = sysTime;
    7fca:	ldr	r1, [r1, #0]
    7fcc:	str	r1, [r2, #0]
  now(); // required to actually update the status
  return Status;
}

void setSyncProvider( getExternalTime getTimeFunction){
  getTimePtr = getTimeFunction;  
    7fce:	str	r0, [r3, #0]
  nextSyncTime = sysTime;
  now(); // this will sync the clock
    7fd0:	b.w	7e60 <now()>
    7fd4:	.word	0x20002b38
    7fd8:	.word	0x20002b48
    7fdc:	.word	0x20002b40

00007fe0 <_GLOBAL__sub_I__ZN14AudioOutputPWM21update_responsibilityE>:
audio_block_t * AudioOutputPWM::block_2nd = NULL;
uint32_t  AudioOutputPWM::block_offset = 0;
uint8_t AudioOutputPWM::interrupt_count = 0;

DMAMEM uint32_t pwm_dma_buffer[AUDIO_BLOCK_SAMPLES*2];
DMAChannel AudioOutputPWM::dma(false);
    7fe0:	ldr	r2, [pc, #8]	; (7fec <_GLOBAL__sub_I__ZN14AudioOutputPWM21update_responsibilityE+0xc>)
    7fe2:	ldr	r1, [pc, #12]	; (7ff0 <_GLOBAL__sub_I__ZN14AudioOutputPWM21update_responsibilityE+0x10>)
    7fe4:	ldr	r0, [pc, #12]	; (7ff4 <_GLOBAL__sub_I__ZN14AudioOutputPWM21update_responsibilityE+0x14>)
    7fe6:	b.w	eb18 <__aeabi_atexit>
    7fea:	nop
    7fec:	.word	0x1fff8a3c
    7ff0:	.word	0x0000077d
    7ff4:	.word	0x20002b4c

00007ff8 <_GLOBAL__sub_I__ZN13AudioInputI2S10block_leftE>:
DMAMEM __attribute__((aligned(32))) static uint32_t i2s_rx_buffer[AUDIO_BLOCK_SAMPLES];
audio_block_t * AudioInputI2S::block_left = NULL;
audio_block_t * AudioInputI2S::block_right = NULL;
uint16_t AudioInputI2S::block_offset = 0;
bool AudioInputI2S::update_responsibility = false;
DMAChannel AudioInputI2S::dma(false);
    7ff8:	ldr	r2, [pc, #8]	; (8004 <_GLOBAL__sub_I__ZN13AudioInputI2S10block_leftE+0xc>)
    7ffa:	ldr	r1, [pc, #12]	; (8008 <_GLOBAL__sub_I__ZN13AudioInputI2S10block_leftE+0x10>)
    7ffc:	ldr	r0, [pc, #12]	; (800c <_GLOBAL__sub_I__ZN13AudioInputI2S10block_leftE+0x14>)
    7ffe:	b.w	eb18 <__aeabi_atexit>
    8002:	nop
    8004:	.word	0x1fff8a3c
    8008:	.word	0x0000077d
    800c:	.word	0x20002b54

00008010 <_GLOBAL__sub_I__ZN17AudioOutputPT821114block_left_1stE>:
#if defined(AUDIO_PT8211_OVERSAMPLING)
DMAMEM __attribute__((aligned(32))) static uint32_t i2s_tx_buffer[AUDIO_BLOCK_SAMPLES*4];
#else
DMAMEM __attribute__((aligned(32))) static uint32_t i2s_tx_buffer[AUDIO_BLOCK_SAMPLES];
#endif
DMAChannel AudioOutputPT8211::dma(false);
    8010:	ldr	r2, [pc, #8]	; (801c <_GLOBAL__sub_I__ZN17AudioOutputPT821114block_left_1stE+0xc>)
    8012:	ldr	r1, [pc, #12]	; (8020 <_GLOBAL__sub_I__ZN17AudioOutputPT821114block_left_1stE+0x10>)
    8014:	ldr	r0, [pc, #12]	; (8024 <_GLOBAL__sub_I__ZN17AudioOutputPT821114block_left_1stE+0x14>)
    8016:	b.w	eb18 <__aeabi_atexit>
    801a:	nop
    801c:	.word	0x1fff8a3c
    8020:	.word	0x0000077d
    8024:	.word	0x20002b5c

00008028 <_GLOBAL__sub_I__ZN15AudioOutputADAT13block_ch1_1stE>:
bool AudioOutputADAT::update_responsibility = false;
//uint32_t  AudioOutputADAT::vucp = VUCP_VALID;

DMAMEM __attribute__((aligned(32))) static uint32_t ADAT_tx_buffer[AUDIO_BLOCK_SAMPLES * 8]; //4 KB, AUDIO_BLOCK_SAMPLES is usually 128

DMAChannel AudioOutputADAT::dma(false);
    8028:	ldr	r2, [pc, #8]	; (8034 <_GLOBAL__sub_I__ZN15AudioOutputADAT13block_ch1_1stE+0xc>)
    802a:	ldr	r1, [pc, #12]	; (8038 <_GLOBAL__sub_I__ZN15AudioOutputADAT13block_ch1_1stE+0x10>)
    802c:	ldr	r0, [pc, #12]	; (803c <_GLOBAL__sub_I__ZN15AudioOutputADAT13block_ch1_1stE+0x14>)
    802e:	b.w	eb18 <__aeabi_atexit>
    8032:	nop
    8034:	.word	0x1fff8a3c
    8038:	.word	0x0000077d
    803c:	.word	0x20002b64

00008040 <_GLOBAL__sub_I__ZN16AudioInputAnalog10block_leftE>:
uint16_t AudioInputAnalog::block_offset = 0;
int32_t AudioInputAnalog::hpf_y1 = 0;
int32_t AudioInputAnalog::hpf_x1 = 0;

bool AudioInputAnalog::update_responsibility = false;
DMAChannel AudioInputAnalog::dma(false);
    8040:	ldr	r2, [pc, #8]	; (804c <_GLOBAL__sub_I__ZN16AudioInputAnalog10block_leftE+0xc>)
    8042:	ldr	r1, [pc, #12]	; (8050 <_GLOBAL__sub_I__ZN16AudioInputAnalog10block_leftE+0x10>)
    8044:	ldr	r0, [pc, #12]	; (8054 <_GLOBAL__sub_I__ZN16AudioInputAnalog10block_leftE+0x14>)
    8046:	b.w	eb18 <__aeabi_atexit>
    804a:	nop
    804c:	.word	0x1fff8a3c
    8050:	.word	0x0000077d
    8054:	.word	0x20002b6c

00008058 <AudioControlSGTL5000::disable()>:
public:
	AudioControlSGTL5000(void) : i2c_addr(0x0A) { }
	void setAddress(uint8_t level);
	bool enable(void);//For Teensy LC the SGTL acts as master, for all other Teensys as slave.
	bool enable(const unsigned extMCLK, const uint32_t pllFreq = (4096.0l * AUDIO_SAMPLE_RATE_EXACT) ); //With extMCLK > 0, the SGTL acts as Master
	bool disable(void) { return false; }
    8058:	movs	r0, #0
    805a:	bx	lr

0000805c <AudioControlSGTL5000::inputLevel(float)>:
	bool volume(float n) { return volumeInteger(n * 129 + 0.499f); }
	bool inputLevel(float n) {return false;}
    805c:	movs	r0, #0
    805e:	bx	lr

00008060 <AudioControlSGTL5000::read(unsigned int)>:
	return true;
}


unsigned int AudioControlSGTL5000::read(unsigned int reg)
{
    8060:	push	{r3, r4, r5, r6, r7, lr}
	void end();
	void setClock(uint32_t frequency);
	void setSDA(uint8_t pin);
	void setSCL(uint8_t pin);
	void beginTransmission(uint8_t address) {
		txBuffer[0] = (address << 1);
    8062:	ldr	r4, [pc, #124]	; (80e0 <AudioControlSGTL5000::read(unsigned int)+0x80>)
    8064:	ldrb	r2, [r0, #8]
    8066:	mov	r6, r1
    8068:	lsls	r2, r2, #1
	}
	size_t write(long n) {
		return write((uint8_t)n);
	}
	size_t write(unsigned int n) {
		return write((uint8_t)n);
    806a:	ubfx	r1, r1, #8, #8
	void setClock(uint32_t frequency);
	void setSDA(uint8_t pin);
	void setSCL(uint8_t pin);
	void beginTransmission(uint8_t address) {
		txBuffer[0] = (address << 1);
		transmitting = 1;
    806e:	movs	r5, #1
    8070:	mov	r7, r0
	}
	size_t write(long n) {
		return write((uint8_t)n);
	}
	size_t write(unsigned int n) {
		return write((uint8_t)n);
    8072:	mov	r0, r4
	void end();
	void setClock(uint32_t frequency);
	void setSDA(uint8_t pin);
	void setSCL(uint8_t pin);
	void beginTransmission(uint8_t address) {
		txBuffer[0] = (address << 1);
    8074:	strb.w	r2, [r4, #59]	; 0x3b
		transmitting = 1;
    8078:	strb.w	r5, [r4, #94]	; 0x5e
		txBufferLength = 1;
    807c:	strb.w	r5, [r4, #93]	; 0x5d
	}
	size_t write(long n) {
		return write((uint8_t)n);
	}
	size_t write(unsigned int n) {
		return write((uint8_t)n);
    8080:	bl	8644 <TwoWire::write(unsigned char)>
    8084:	uxtb	r1, r6
    8086:	mov	r0, r4
    8088:	bl	8644 <TwoWire::write(unsigned char)>
	unsigned int val;
	Wire.beginTransmission(i2c_addr);
	Wire.write(reg >> 8);
	Wire.write(reg);
	if (Wire.endTransmission(false) != 0) return 0;
    808c:	mov	r0, r4
    808e:	movs	r1, #0
    8090:	bl	898c <TwoWire::endTransmission(unsigned char)>
    8094:	cbz	r0, 809a <AudioControlSGTL5000::read(unsigned int)+0x3a>
    8096:	movs	r0, #0
    8098:	pop	{r3, r4, r5, r6, r7, pc}
	uint8_t requestFrom(int address, int quantity, int sendStop) {
		return requestFrom((uint8_t)address, (uint8_t)quantity,
			(uint8_t)(sendStop ? 1 : 0));
	}
	uint8_t requestFrom(int address, int quantity) {
		return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)1);
    809a:	mov	r3, r5
    809c:	ldrb	r1, [r7, #8]
    809e:	movs	r2, #2
    80a0:	mov	r0, r4
    80a2:	bl	8aa0 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)>
	if (Wire.requestFrom((int)i2c_addr, 2) < 2) return 0;
    80a6:	cmp	r0, #1
    80a8:	bls.n	8096 <AudioControlSGTL5000::read(unsigned int)+0x36>
	virtual size_t write(const uint8_t *data, size_t quantity);
	virtual int available(void) {
		return rxBufferLength - rxBufferIndex;
	}
	virtual int read(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
    80aa:	ldrb.w	r1, [r4, #56]	; 0x38
    80ae:	ldrb.w	r5, [r4, #57]	; 0x39
    80b2:	cmp	r1, r5
    80b4:	bcs.n	80d8 <AudioControlSGTL5000::read(unsigned int)+0x78>
		return rxBuffer[rxBufferIndex++];
    80b6:	adds	r3, r4, r1
    80b8:	adds	r2, r1, #1
    80ba:	uxtb	r2, r2
	val = Wire.read() << 8;
    80bc:	ldrb	r0, [r3, #24]
    80be:	strb.w	r2, [r4, #56]	; 0x38
	virtual size_t write(const uint8_t *data, size_t quantity);
	virtual int available(void) {
		return rxBufferLength - rxBufferIndex;
	}
	virtual int read(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
    80c2:	cmp	r5, r2
    80c4:	mov.w	r3, r0, lsl #8
    80c8:	bls.n	80d8 <AudioControlSGTL5000::read(unsigned int)+0x78>
		return rxBuffer[rxBufferIndex++];
    80ca:	add	r2, r4
    80cc:	adds	r1, #2
    80ce:	ldrb	r0, [r2, #24]
    80d0:	strb.w	r1, [r4, #56]	; 0x38
    80d4:	orrs	r0, r3
    80d6:	pop	{r3, r4, r5, r6, r7, pc}
	virtual size_t write(const uint8_t *data, size_t quantity);
	virtual int available(void) {
		return rxBufferLength - rxBufferIndex;
	}
	virtual int read(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
    80d8:	mov.w	r0, #4294967295
	val |= Wire.read();
	return val;
}
    80dc:	pop	{r3, r4, r5, r6, r7, pc}
    80de:	nop
    80e0:	.word	0x1fff8a9c

000080e4 <AudioControlSGTL5000::write(unsigned int, unsigned int)>:

bool AudioControlSGTL5000::write(unsigned int reg, unsigned int val)
{
    80e4:	push	{r3, r4, r5, r6, r7, lr}
	void end();
	void setClock(uint32_t frequency);
	void setSDA(uint8_t pin);
	void setSCL(uint8_t pin);
	void beginTransmission(uint8_t address) {
		txBuffer[0] = (address << 1);
    80e6:	ldr	r4, [pc, #80]	; (8138 <AudioControlSGTL5000::write(unsigned int, unsigned int)+0x54>)
    80e8:	ldrb	r3, [r0, #8]
	if (reg == CHIP_ANA_CTRL) ana_ctrl = val;
    80ea:	cmp	r1, #36	; 0x24
    80ec:	it	eq
    80ee:	strheq	r2, [r0, #6]
    80f0:	lsls	r3, r3, #1
		transmitting = 1;
    80f2:	movs	r5, #1
	val |= Wire.read();
	return val;
}

bool AudioControlSGTL5000::write(unsigned int reg, unsigned int val)
{
    80f4:	mov	r6, r1
	}
	size_t write(long n) {
		return write((uint8_t)n);
	}
	size_t write(unsigned int n) {
		return write((uint8_t)n);
    80f6:	mov	r0, r4
    80f8:	ubfx	r1, r1, #8, #8
    80fc:	mov	r7, r2
	void end();
	void setClock(uint32_t frequency);
	void setSDA(uint8_t pin);
	void setSCL(uint8_t pin);
	void beginTransmission(uint8_t address) {
		txBuffer[0] = (address << 1);
    80fe:	strb.w	r3, [r4, #59]	; 0x3b
		transmitting = 1;
    8102:	strb.w	r5, [r4, #94]	; 0x5e
		txBufferLength = 1;
    8106:	strb.w	r5, [r4, #93]	; 0x5d
	}
	size_t write(long n) {
		return write((uint8_t)n);
	}
	size_t write(unsigned int n) {
		return write((uint8_t)n);
    810a:	bl	8644 <TwoWire::write(unsigned char)>
    810e:	uxtb	r1, r6
    8110:	mov	r0, r4
    8112:	bl	8644 <TwoWire::write(unsigned char)>
    8116:	ubfx	r1, r7, #8, #8
    811a:	mov	r0, r4
    811c:	bl	8644 <TwoWire::write(unsigned char)>
    8120:	uxtb	r1, r7
    8122:	mov	r0, r4
    8124:	bl	8644 <TwoWire::write(unsigned char)>
	void beginTransmission(int address) {
		beginTransmission((uint8_t)address);
	}
	uint8_t endTransmission(uint8_t sendStop);
	uint8_t endTransmission(void) {
		return endTransmission(1);
    8128:	mov	r1, r5
    812a:	mov	r0, r4
    812c:	bl	898c <TwoWire::endTransmission(unsigned char)>
	Wire.write(reg);
	Wire.write(val >> 8);
	Wire.write(val);
	if (Wire.endTransmission() == 0) return true;
	return false;
}
    8130:	clz	r0, r0
    8134:	lsrs	r0, r0, #5
    8136:	pop	{r3, r4, r5, r6, r7, pc}
    8138:	.word	0x1fff8a9c

0000813c <AudioControlSGTL5000::micGain(unsigned int)>:

bool AudioControlSGTL5000::micGain(unsigned int dB)
{
	unsigned int preamp_gain, input_gain;

	if (dB >= 40) {
    813c:	cmp	r1, #39	; 0x27
	unsigned short m=((0x7F-calcVol(right,0x7F))<<8)|(0x7F-calcVol(left,0x7F));
	return write(CHIP_ANA_HP_CTRL, m);
}

bool AudioControlSGTL5000::micGain(unsigned int dB)
{
    813e:	push	{r3, r4, r5, lr}
    8140:	mov	r4, r1
    8142:	mov	r5, r0
	unsigned int preamp_gain, input_gain;

	if (dB >= 40) {
    8144:	bls.n	815a <AudioControlSGTL5000::micGain(unsigned int)+0x1e>
		preamp_gain = 3;
		dB -= 40;
    8146:	sub.w	r4, r1, #40	; 0x28
    814a:	movw	r2, #371	; 0x173
		preamp_gain = 0;
	}
	input_gain = (dB * 2) / 3;
	if (input_gain > 15) input_gain = 15;

	return write(CHIP_MIC_CTRL, 0x0170 | preamp_gain)
    814e:	movs	r1, #42	; 0x2a
    8150:	mov	r0, r5
    8152:	bl	80e4 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	    && write(CHIP_ANA_ADC_CTRL, (input_gain << 4) | input_gain);
    8156:	cbnz	r0, 8172 <AudioControlSGTL5000::micGain(unsigned int)+0x36>
}
    8158:	pop	{r3, r4, r5, pc}
	unsigned int preamp_gain, input_gain;

	if (dB >= 40) {
		preamp_gain = 3;
		dB -= 40;
	} else if (dB >= 30) {
    815a:	cmp	r1, #29
    815c:	bls.n	8192 <AudioControlSGTL5000::micGain(unsigned int)+0x56>
		preamp_gain = 2;
		dB -= 30;
    815e:	sub.w	r4, r1, #30
    8162:	mov.w	r2, #370	; 0x172
		preamp_gain = 0;
	}
	input_gain = (dB * 2) / 3;
	if (input_gain > 15) input_gain = 15;

	return write(CHIP_MIC_CTRL, 0x0170 | preamp_gain)
    8166:	movs	r1, #42	; 0x2a
    8168:	mov	r0, r5
    816a:	bl	80e4 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	    && write(CHIP_ANA_ADC_CTRL, (input_gain << 4) | input_gain);
    816e:	cmp	r0, #0
    8170:	beq.n	8158 <AudioControlSGTL5000::micGain(unsigned int)+0x1c>
		preamp_gain = 1;
		dB -= 20;
	} else {
		preamp_gain = 0;
	}
	input_gain = (dB * 2) / 3;
    8172:	ldr	r2, [pc, #48]	; (81a4 <AudioControlSGTL5000::micGain(unsigned int)+0x68>)
    8174:	lsls	r4, r4, #1
    8176:	umull	r3, r2, r2, r4
    817a:	lsrs	r2, r2, #1
    817c:	cmp	r2, #15
    817e:	it	cs
    8180:	movcs	r2, #15
	if (input_gain > 15) input_gain = 15;

	return write(CHIP_MIC_CTRL, 0x0170 | preamp_gain)
	    && write(CHIP_ANA_ADC_CTRL, (input_gain << 4) | input_gain);
    8182:	mov	r0, r5
    8184:	orr.w	r2, r2, r2, lsl #4
    8188:	movs	r1, #32
}
    818a:	ldmia.w	sp!, {r3, r4, r5, lr}
	}
	input_gain = (dB * 2) / 3;
	if (input_gain > 15) input_gain = 15;

	return write(CHIP_MIC_CTRL, 0x0170 | preamp_gain)
	    && write(CHIP_ANA_ADC_CTRL, (input_gain << 4) | input_gain);
    818e:	b.w	80e4 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
		preamp_gain = 3;
		dB -= 40;
	} else if (dB >= 30) {
		preamp_gain = 2;
		dB -= 30;
	} else if (dB >= 20) {
    8192:	cmp	r1, #19
		preamp_gain = 1;
		dB -= 20;
    8194:	itte	hi
    8196:	subhi.w	r4, r1, #20
    819a:	movwhi	r2, #369	; 0x171
    819e:	movls.w	r2, #368	; 0x170
    81a2:	b.n	814e <AudioControlSGTL5000::micGain(unsigned int)+0x12>
    81a4:	.word	0xaaaaaaab

000081a8 <AudioControlSGTL5000::enable(unsigned int, unsigned long)>:
	return enable(0);
#endif	
}

bool AudioControlSGTL5000::enable(const unsigned extMCLK, const uint32_t pllFreq)
{
    81a8:	push	{r3, r4, r5, r6, r7, lr}
    81aa:	mov	r4, r0

	Wire.begin();
    81ac:	ldr	r0, [pc, #492]	; (839c <AudioControlSGTL5000::enable(unsigned int, unsigned long)+0x1f4>)
	return enable(0);
#endif	
}

bool AudioControlSGTL5000::enable(const unsigned extMCLK, const uint32_t pllFreq)
{
    81ae:	mov	r5, r1
    81b0:	mov	r6, r2

	Wire.begin();
    81b2:	bl	866c <TwoWire::begin()>
	delay(5);
    81b6:	movs	r0, #5
    81b8:	bl	d7f8 <delay>
	
	//Check if we are in Master Mode and if the Teensy had a reset:
	unsigned int n = read(CHIP_I2S_CTRL);
    81bc:	mov	r0, r4
    81be:	movs	r1, #6
    81c0:	bl	8060 <AudioControlSGTL5000::read(unsigned int)>
	if ( (extMCLK > 0) && (n == (0x0030 | (1<<7))) ) {
    81c4:	cmp	r5, #0
    81c6:	beq.w	82f6 <AudioControlSGTL5000::enable(unsigned int, unsigned long)+0x14e>
    81ca:	cmp	r0, #176	; 0xb0
    81cc:	beq.w	8392 <AudioControlSGTL5000::enable(unsigned int, unsigned long)+0x1ea>
	//Serial.print("chip ID = ");
	//delay(5);
	//unsigned int n = read(CHIP_ID);
	//Serial.println(n, HEX);

        muted = true;
    81d0:	movs	r7, #1
    81d2:	strb	r7, [r4, #4]

	int r = write(CHIP_ANA_POWER, 0x4060);  // VDDD is externally driven with 1.8V
    81d4:	movw	r2, #16480	; 0x4060
    81d8:	movs	r1, #48	; 0x30
    81da:	mov	r0, r4
    81dc:	bl	80e4 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	if (!r) return false;
    81e0:	cbnz	r0, 81e6 <AudioControlSGTL5000::enable(unsigned int, unsigned long)+0x3e>
    81e2:	movs	r0, #0
    81e4:	pop	{r3, r4, r5, r6, r7, pc}
	write(CHIP_LINREG_CTRL, 0x006C);  // VDDA & VDDIO both over 3.1V
    81e6:	movs	r2, #108	; 0x6c
    81e8:	movs	r1, #38	; 0x26
    81ea:	mov	r0, r4
    81ec:	bl	80e4 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	write(CHIP_REF_CTRL, 0x01F2); // VAG=1.575, normal ramp, +12.5% bias current
    81f0:	mov.w	r2, #498	; 0x1f2
    81f4:	movs	r1, #40	; 0x28
    81f6:	mov	r0, r4
    81f8:	bl	80e4 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	write(CHIP_LINE_OUT_CTRL, 0x0F22); // LO_VAGCNTRL=1.65V, OUT_CURRENT=0.54mA
    81fc:	movw	r2, #3874	; 0xf22
    8200:	movs	r1, #44	; 0x2c
    8202:	mov	r0, r4
    8204:	bl	80e4 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	write(CHIP_SHORT_CTRL, 0x4446);  // allow up to 125mA
    8208:	movw	r2, #17478	; 0x4446
    820c:	movs	r1, #60	; 0x3c
    820e:	mov	r0, r4
    8210:	bl	80e4 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	write(CHIP_ANA_CTRL, 0x0137);  // enable zero cross detectors
    8214:	movw	r2, #311	; 0x137
    8218:	movs	r1, #36	; 0x24
    821a:	mov	r0, r4
    821c:	bl	80e4 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
		
	if (extMCLK > 0) {
		//SGTL is I2S Master
		//Datasheet Pg. 14: Using the PLL - Asynchronous SYS_MCLK input
		if (extMCLK > 17000000) {
    8220:	ldr	r3, [pc, #380]	; (83a0 <AudioControlSGTL5000::enable(unsigned int, unsigned long)+0x1f8>)
    8222:	cmp	r5, r3
    8224:	bhi.w	8386 <AudioControlSGTL5000::enable(unsigned int, unsigned long)+0x1de>
			write(CHIP_CLK_TOP_CTRL, 1);
		} else {
			write(CHIP_CLK_TOP_CTRL, 0);
    8228:	movs	r2, #0
    822a:	movs	r1, #52	; 0x34
    822c:	mov	r0, r4
    822e:	bl	80e4 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
		}

		uint32_t int_divisor = (pllFreq / extMCLK) & 0x1f;
    8232:	udiv	r3, r6, r5
		uint32_t frac_divisor = (uint32_t)((((float)pllFreq / extMCLK) - int_divisor) * 2048.0f) & 0x7ff;
		
		write(CHIP_PLL_CTRL, (int_divisor << 11) | frac_divisor);		
    8236:	mov	r0, r6
			write(CHIP_CLK_TOP_CTRL, 1);
		} else {
			write(CHIP_CLK_TOP_CTRL, 0);
		}

		uint32_t int_divisor = (pllFreq / extMCLK) & 0x1f;
    8238:	and.w	r6, r3, #31
		uint32_t frac_divisor = (uint32_t)((((float)pllFreq / extMCLK) - int_divisor) * 2048.0f) & 0x7ff;
		
		write(CHIP_PLL_CTRL, (int_divisor << 11) | frac_divisor);		
    823c:	bl	f650 <__aeabi_ui2f>
    8240:	mov	r7, r0
    8242:	mov	r0, r5
    8244:	bl	f650 <__aeabi_ui2f>
    8248:	mov	r1, r0
    824a:	mov	r0, r7
    824c:	bl	f868 <__aeabi_fdiv>
    8250:	mov	r5, r0
    8252:	mov	r0, r6
    8254:	bl	f650 <__aeabi_ui2f>
    8258:	mov	r1, r0
    825a:	mov	r0, r5
    825c:	bl	f4ec <__aeabi_fsub>
    8260:	mov.w	r1, #1157627904	; 0x45000000
    8264:	bl	f700 <__aeabi_fmul>
    8268:	bl	fb04 <__aeabi_f2uiz>
    826c:	ubfx	r2, r0, #0, #11
    8270:	orr.w	r2, r2, r6, lsl #11
    8274:	movs	r1, #50	; 0x32
    8276:	mov	r0, r4
    8278:	bl	80e4 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
		write(CHIP_ANA_POWER, 0x40FF | (1<<10) | (1<<8) ); // power up: lineout, hp, adc, dac, PLL_POWERUP, VCOAMP_POWERUP
    827c:	movw	r2, #17919	; 0x45ff
    8280:	movs	r1, #48	; 0x30
    8282:	mov	r0, r4
    8284:	bl	80e4 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	} else {
		//SGTL is I2S Slave
		write(CHIP_ANA_POWER, 0x40FF); // power up: lineout, hp, adc, dac
	}

	write(CHIP_DIG_POWER, 0x0073); // power up all digital stuff
    8288:	movs	r2, #115	; 0x73
    828a:	movs	r1, #2
    828c:	mov	r0, r4
    828e:	bl	80e4 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	delay(400);
    8292:	mov.w	r0, #400	; 0x190
    8296:	bl	d7f8 <delay>
	write(CHIP_LINE_OUT_VOL, 0x1D1D); // default approx 1.3 volts peak-to-peak
    829a:	movw	r2, #7453	; 0x1d1d
    829e:	movs	r1, #46	; 0x2e
    82a0:	mov	r0, r4
    82a2:	bl	80e4 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	
	if (extMCLK > 0) { 
		//SGTL is I2S Master
		write(CHIP_CLK_CTRL, 0x0004 | 0x03);  // 44.1 kHz, 256*Fs, use PLL
    82a6:	movs	r2, #7
    82a8:	movs	r1, #4
    82aa:	mov	r0, r4
    82ac:	bl	80e4 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
		write(CHIP_I2S_CTRL, 0x0030 | (1<<7)); // SCLK=64*Fs, 16bit, I2S format
    82b0:	movs	r2, #176	; 0xb0
    82b2:	movs	r1, #6
    82b4:	mov	r0, r4
    82b6:	bl	80e4 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
		write(CHIP_CLK_CTRL, 0x0004);  // 44.1 kHz, 256*Fs
		write(CHIP_I2S_CTRL, 0x0030); // SCLK=64*Fs, 16bit, I2S format
	}

	// default signal routing is ok?
	write(CHIP_SSS_CTRL, 0x0010); // ADC->I2S, I2S->DAC
    82ba:	movs	r2, #16
    82bc:	movs	r1, #10
    82be:	mov	r0, r4
    82c0:	bl	80e4 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	write(CHIP_ADCDAC_CTRL, 0x0000); // disable dac mute
    82c4:	movs	r2, #0
    82c6:	movs	r1, #14
    82c8:	mov	r0, r4
    82ca:	bl	80e4 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	write(CHIP_DAC_VOL, 0x3C3C); // digital gain, 0dB
    82ce:	movw	r2, #15420	; 0x3c3c
    82d2:	movs	r1, #16
    82d4:	mov	r0, r4
    82d6:	bl	80e4 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	write(CHIP_ANA_HP_CTRL, 0x7F7F); // set volume (lowest level)
    82da:	movw	r2, #32639	; 0x7f7f
    82de:	movs	r1, #34	; 0x22
    82e0:	mov	r0, r4
    82e2:	bl	80e4 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	write(CHIP_ANA_CTRL, 0x0036);  // enable zero cross detectors
    82e6:	movs	r2, #54	; 0x36
    82e8:	movs	r1, #36	; 0x24
    82ea:	mov	r0, r4
    82ec:	bl	80e4 <AudioControlSGTL5000::write(unsigned int, unsigned int)>

	semi_automated = true;
    82f0:	movs	r0, #1
    82f2:	strb	r0, [r4, #9]
    82f4:	pop	{r3, r4, r5, r6, r7, pc}
	//Serial.print("chip ID = ");
	//delay(5);
	//unsigned int n = read(CHIP_ID);
	//Serial.println(n, HEX);

        muted = true;
    82f6:	movs	r3, #1
    82f8:	strb	r3, [r4, #4]

	int r = write(CHIP_ANA_POWER, 0x4060);  // VDDD is externally driven with 1.8V
    82fa:	movw	r2, #16480	; 0x4060
    82fe:	movs	r1, #48	; 0x30
    8300:	mov	r0, r4
    8302:	bl	80e4 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	if (!r) return false;
    8306:	cmp	r0, #0
    8308:	beq.w	81e2 <AudioControlSGTL5000::enable(unsigned int, unsigned long)+0x3a>
	write(CHIP_LINREG_CTRL, 0x006C);  // VDDA & VDDIO both over 3.1V
    830c:	movs	r2, #108	; 0x6c
    830e:	movs	r1, #38	; 0x26
    8310:	mov	r0, r4
    8312:	bl	80e4 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	write(CHIP_REF_CTRL, 0x01F2); // VAG=1.575, normal ramp, +12.5% bias current
    8316:	mov.w	r2, #498	; 0x1f2
    831a:	movs	r1, #40	; 0x28
    831c:	mov	r0, r4
    831e:	bl	80e4 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	write(CHIP_LINE_OUT_CTRL, 0x0F22); // LO_VAGCNTRL=1.65V, OUT_CURRENT=0.54mA
    8322:	movw	r2, #3874	; 0xf22
    8326:	movs	r1, #44	; 0x2c
    8328:	mov	r0, r4
    832a:	bl	80e4 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	write(CHIP_SHORT_CTRL, 0x4446);  // allow up to 125mA
    832e:	movw	r2, #17478	; 0x4446
    8332:	movs	r1, #60	; 0x3c
    8334:	mov	r0, r4
    8336:	bl	80e4 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	write(CHIP_ANA_CTRL, 0x0137);  // enable zero cross detectors
    833a:	movw	r2, #311	; 0x137
    833e:	movs	r1, #36	; 0x24
    8340:	mov	r0, r4
    8342:	bl	80e4 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
		
		write(CHIP_PLL_CTRL, (int_divisor << 11) | frac_divisor);		
		write(CHIP_ANA_POWER, 0x40FF | (1<<10) | (1<<8) ); // power up: lineout, hp, adc, dac, PLL_POWERUP, VCOAMP_POWERUP
	} else {
		//SGTL is I2S Slave
		write(CHIP_ANA_POWER, 0x40FF); // power up: lineout, hp, adc, dac
    8346:	movw	r2, #16639	; 0x40ff
    834a:	movs	r1, #48	; 0x30
    834c:	mov	r0, r4
    834e:	bl	80e4 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	}

	write(CHIP_DIG_POWER, 0x0073); // power up all digital stuff
    8352:	movs	r2, #115	; 0x73
    8354:	movs	r1, #2
    8356:	mov	r0, r4
    8358:	bl	80e4 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	delay(400);
    835c:	mov.w	r0, #400	; 0x190
    8360:	bl	d7f8 <delay>
	write(CHIP_LINE_OUT_VOL, 0x1D1D); // default approx 1.3 volts peak-to-peak
    8364:	movw	r2, #7453	; 0x1d1d
    8368:	movs	r1, #46	; 0x2e
    836a:	mov	r0, r4
    836c:	bl	80e4 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
		//SGTL is I2S Master
		write(CHIP_CLK_CTRL, 0x0004 | 0x03);  // 44.1 kHz, 256*Fs, use PLL
		write(CHIP_I2S_CTRL, 0x0030 | (1<<7)); // SCLK=64*Fs, 16bit, I2S format
	} else {
		//SGTL is I2S Slave
		write(CHIP_CLK_CTRL, 0x0004);  // 44.1 kHz, 256*Fs
    8370:	movs	r2, #4
    8372:	mov	r1, r2
    8374:	mov	r0, r4
    8376:	bl	80e4 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
		write(CHIP_I2S_CTRL, 0x0030); // SCLK=64*Fs, 16bit, I2S format
    837a:	movs	r2, #48	; 0x30
    837c:	movs	r1, #6
    837e:	mov	r0, r4
    8380:	bl	80e4 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
    8384:	b.n	82ba <AudioControlSGTL5000::enable(unsigned int, unsigned long)+0x112>
		
	if (extMCLK > 0) {
		//SGTL is I2S Master
		//Datasheet Pg. 14: Using the PLL - Asynchronous SYS_MCLK input
		if (extMCLK > 17000000) {
			write(CHIP_CLK_TOP_CTRL, 1);
    8386:	mov	r2, r7
    8388:	movs	r1, #52	; 0x34
    838a:	mov	r0, r4
    838c:	bl	80e4 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
    8390:	b.n	8232 <AudioControlSGTL5000::enable(unsigned int, unsigned long)+0x8a>
	
	//Check if we are in Master Mode and if the Teensy had a reset:
	unsigned int n = read(CHIP_I2S_CTRL);
	if ( (extMCLK > 0) && (n == (0x0030 | (1<<7))) ) {
		//Yes. Do not initialize.
		muted = false;
    8392:	movs	r3, #0
		semi_automated = true;
    8394:	movs	r0, #1
	
	//Check if we are in Master Mode and if the Teensy had a reset:
	unsigned int n = read(CHIP_I2S_CTRL);
	if ( (extMCLK > 0) && (n == (0x0030 | (1<<7))) ) {
		//Yes. Do not initialize.
		muted = false;
    8396:	strb	r3, [r4, #4]
		semi_automated = true;
    8398:	strb	r0, [r4, #9]
		return true;
    839a:	pop	{r3, r4, r5, r6, r7, pc}
    839c:	.word	0x1fff8a9c
    83a0:	.word	0x01036640

000083a4 <AudioControlSGTL5000::enable()>:

bool AudioControlSGTL5000::enable(void) {
#if defined(KINETISL)
	return enable(16000000); // SGTL as Master with 16MHz MCLK from Teensy LC
#else	
	return enable(0);
    83a4:	ldr	r2, [pc, #4]	; (83ac <AudioControlSGTL5000::enable()+0x8>)
    83a6:	movs	r1, #0
    83a8:	b.w	81a8 <AudioControlSGTL5000::enable(unsigned int, unsigned long)>
    83ac:	.word	0x0ac55a5a

000083b0 <AudioControlSGTL5000::inputSelect(int)>:
	bool muteHeadphone(void) { return write(0x0024, ana_ctrl | (1<<4)); }
	bool unmuteHeadphone(void) { return write(0x0024, ana_ctrl & ~(1<<4)); }
	bool muteLineout(void) { return write(0x0024, ana_ctrl | (1<<8)); }
	bool unmuteLineout(void) { return write(0x0024, ana_ctrl & ~(1<<8)); }
	bool inputSelect(int n) {
    83b0:	push	{r4, lr}
    83b2:	mov	r4, r0
		if (n == AUDIO_INPUT_LINEIN) {
    83b4:	cbz	r1, 83be <AudioControlSGTL5000::inputSelect(int)+0xe>
			return write(0x0020, 0x055) // +7.5dB gain (1.3Vp-p full scale)
			 && write(0x0024, ana_ctrl | (1<<2)); // enable linein
		} else if (n == AUDIO_INPUT_MIC) {
    83b6:	cmp	r1, #1
    83b8:	beq.n	83de <AudioControlSGTL5000::inputSelect(int)+0x2e>
			 && write(0x0020, 0x088)     // input gain +12dB (is this enough?)
			 && write(0x0024, ana_ctrl & ~(1<<2)); // enable mic
		} else {
			return false;
		}
	}
    83ba:	movs	r0, #0
    83bc:	pop	{r4, pc}
	bool unmuteHeadphone(void) { return write(0x0024, ana_ctrl & ~(1<<4)); }
	bool muteLineout(void) { return write(0x0024, ana_ctrl | (1<<8)); }
	bool unmuteLineout(void) { return write(0x0024, ana_ctrl & ~(1<<8)); }
	bool inputSelect(int n) {
		if (n == AUDIO_INPUT_LINEIN) {
			return write(0x0020, 0x055) // +7.5dB gain (1.3Vp-p full scale)
    83be:	movs	r2, #85	; 0x55
    83c0:	movs	r1, #32
    83c2:	bl	80e4 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
			 && write(0x0024, ana_ctrl | (1<<2)); // enable linein
    83c6:	cmp	r0, #0
    83c8:	beq.n	83ba <AudioControlSGTL5000::inputSelect(int)+0xa>
    83ca:	ldrh	r2, [r4, #6]
    83cc:	orr.w	r2, r2, #4
    83d0:	mov	r0, r4
    83d2:	uxth	r2, r2
    83d4:	movs	r1, #36	; 0x24
			 && write(0x0020, 0x088)     // input gain +12dB (is this enough?)
			 && write(0x0024, ana_ctrl & ~(1<<2)); // enable mic
		} else {
			return false;
		}
	}
    83d6:	ldmia.w	sp!, {r4, lr}
	bool muteLineout(void) { return write(0x0024, ana_ctrl | (1<<8)); }
	bool unmuteLineout(void) { return write(0x0024, ana_ctrl & ~(1<<8)); }
	bool inputSelect(int n) {
		if (n == AUDIO_INPUT_LINEIN) {
			return write(0x0020, 0x055) // +7.5dB gain (1.3Vp-p full scale)
			 && write(0x0024, ana_ctrl | (1<<2)); // enable linein
    83da:	b.w	80e4 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
		} else if (n == AUDIO_INPUT_MIC) {
			return write(0x002A, 0x0173) // mic preamp gain = +40dB
    83de:	movw	r2, #371	; 0x173
    83e2:	movs	r1, #42	; 0x2a
    83e4:	bl	80e4 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
			 && write(0x0020, 0x088)     // input gain +12dB (is this enough?)
			 && write(0x0024, ana_ctrl & ~(1<<2)); // enable mic
    83e8:	cmp	r0, #0
    83ea:	beq.n	83ba <AudioControlSGTL5000::inputSelect(int)+0xa>
		if (n == AUDIO_INPUT_LINEIN) {
			return write(0x0020, 0x055) // +7.5dB gain (1.3Vp-p full scale)
			 && write(0x0024, ana_ctrl | (1<<2)); // enable linein
		} else if (n == AUDIO_INPUT_MIC) {
			return write(0x002A, 0x0173) // mic preamp gain = +40dB
			 && write(0x0020, 0x088)     // input gain +12dB (is this enough?)
    83ec:	movs	r2, #136	; 0x88
    83ee:	movs	r1, #32
    83f0:	mov	r0, r4
    83f2:	bl	80e4 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
    83f6:	cmp	r0, #0
    83f8:	beq.n	83ba <AudioControlSGTL5000::inputSelect(int)+0xa>
			 && write(0x0024, ana_ctrl & ~(1<<2)); // enable mic
    83fa:	ldrh	r2, [r4, #6]
    83fc:	mov	r0, r4
    83fe:	bic.w	r2, r2, #4
    8402:	movs	r1, #36	; 0x24
		} else {
			return false;
		}
	}
    8404:	ldmia.w	sp!, {r4, lr}
			return write(0x0020, 0x055) // +7.5dB gain (1.3Vp-p full scale)
			 && write(0x0024, ana_ctrl | (1<<2)); // enable linein
		} else if (n == AUDIO_INPUT_MIC) {
			return write(0x002A, 0x0173) // mic preamp gain = +40dB
			 && write(0x0020, 0x088)     // input gain +12dB (is this enough?)
			 && write(0x0024, ana_ctrl & ~(1<<2)); // enable mic
    8408:	b.w	80e4 <AudioControlSGTL5000::write(unsigned int, unsigned int)>

0000840c <AudioControlSGTL5000::volumeInteger(unsigned int)>:
	if(!write(reg,val1)) return 0;
	return val1;
}

bool AudioControlSGTL5000::volumeInteger(unsigned int n)
{
    840c:	push	{r3, r4, r5, lr}
    840e:	mov	r5, r0
	if (n == 0) {
    8410:	cbz	r1, 8450 <AudioControlSGTL5000::volumeInteger(unsigned int)+0x44>
		muted = true;
		write(CHIP_ANA_HP_CTRL, 0x7F7F);
		return muteHeadphone();
	} else if (n > 0x80) {
    8412:	cmp	r1, #128	; 0x80
		n = 0;
	} else {
		n = 0x80 - n;
	}
	if (muted) {
    8414:	ldrb	r3, [r0, #4]
		write(CHIP_ANA_HP_CTRL, 0x7F7F);
		return muteHeadphone();
	} else if (n > 0x80) {
		n = 0;
	} else {
		n = 0x80 - n;
    8416:	itte	ls
    8418:	rsbls	r4, r1, #128	; 0x80
    841c:	orrls.w	r4, r4, r4, lsl #8
    8420:	movhi	r4, #0
	}
	if (muted) {
    8422:	cbnz	r3, 8432 <AudioControlSGTL5000::volumeInteger(unsigned int)+0x26>
		muted = false;
		unmuteHeadphone();
	}
	n = n | (n << 8);
	return write(CHIP_ANA_HP_CTRL, n);  // set volume
    8424:	mov	r2, r4
    8426:	mov	r0, r5
    8428:	movs	r1, #34	; 0x22
}
    842a:	ldmia.w	sp!, {r3, r4, r5, lr}
	if (muted) {
		muted = false;
		unmuteHeadphone();
	}
	n = n | (n << 8);
	return write(CHIP_ANA_HP_CTRL, n);  // set volume
    842e:	b.w	80e4 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	bool enable(const unsigned extMCLK, const uint32_t pllFreq = (4096.0l * AUDIO_SAMPLE_RATE_EXACT) ); //With extMCLK > 0, the SGTL acts as Master
	bool disable(void) { return false; }
	bool volume(float n) { return volumeInteger(n * 129 + 0.499f); }
	bool inputLevel(float n) {return false;}
	bool muteHeadphone(void) { return write(0x0024, ana_ctrl | (1<<4)); }
	bool unmuteHeadphone(void) { return write(0x0024, ana_ctrl & ~(1<<4)); }
    8432:	ldrh	r2, [r0, #6]
		n = 0;
	} else {
		n = 0x80 - n;
	}
	if (muted) {
		muted = false;
    8434:	movs	r3, #0
    8436:	bic.w	r2, r2, #16
    843a:	strb	r3, [r0, #4]
    843c:	movs	r1, #36	; 0x24
    843e:	bl	80e4 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
		unmuteHeadphone();
	}
	n = n | (n << 8);
	return write(CHIP_ANA_HP_CTRL, n);  // set volume
    8442:	mov	r2, r4
    8444:	mov	r0, r5
    8446:	movs	r1, #34	; 0x22
}
    8448:	ldmia.w	sp!, {r3, r4, r5, lr}
	if (muted) {
		muted = false;
		unmuteHeadphone();
	}
	n = n | (n << 8);
	return write(CHIP_ANA_HP_CTRL, n);  // set volume
    844c:	b.w	80e4 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
}

bool AudioControlSGTL5000::volumeInteger(unsigned int n)
{
	if (n == 0) {
		muted = true;
    8450:	movs	r3, #1
    8452:	strb	r3, [r0, #4]
		write(CHIP_ANA_HP_CTRL, 0x7F7F);
    8454:	movw	r2, #32639	; 0x7f7f
    8458:	movs	r1, #34	; 0x22
    845a:	bl	80e4 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	bool enable(void);//For Teensy LC the SGTL acts as master, for all other Teensys as slave.
	bool enable(const unsigned extMCLK, const uint32_t pllFreq = (4096.0l * AUDIO_SAMPLE_RATE_EXACT) ); //With extMCLK > 0, the SGTL acts as Master
	bool disable(void) { return false; }
	bool volume(float n) { return volumeInteger(n * 129 + 0.499f); }
	bool inputLevel(float n) {return false;}
	bool muteHeadphone(void) { return write(0x0024, ana_ctrl | (1<<4)); }
    845e:	ldrh	r2, [r5, #6]
    8460:	orr.w	r2, r2, #16
    8464:	mov	r0, r5
    8466:	uxth	r2, r2
    8468:	movs	r1, #36	; 0x24
		muted = false;
		unmuteHeadphone();
	}
	n = n | (n << 8);
	return write(CHIP_ANA_HP_CTRL, n);  // set volume
}
    846a:	ldmia.w	sp!, {r3, r4, r5, lr}
    846e:	b.w	80e4 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
    8472:	nop

00008474 <AudioControlSGTL5000::volume(float)>:
	AudioControlSGTL5000(void) : i2c_addr(0x0A) { }
	void setAddress(uint8_t level);
	bool enable(void);//For Teensy LC the SGTL acts as master, for all other Teensys as slave.
	bool enable(const unsigned extMCLK, const uint32_t pllFreq = (4096.0l * AUDIO_SAMPLE_RATE_EXACT) ); //With extMCLK > 0, the SGTL acts as Master
	bool disable(void) { return false; }
	bool volume(float n) { return volumeInteger(n * 129 + 0.499f); }
    8474:	mov	r3, r1
    8476:	push	{r4, lr}
    8478:	ldr	r1, [pc, #28]	; (8498 <AudioControlSGTL5000::volume(float)+0x24>)
    847a:	mov	r4, r0
    847c:	mov	r0, r3
    847e:	bl	f700 <__aeabi_fmul>
    8482:	ldr	r1, [pc, #24]	; (849c <AudioControlSGTL5000::volume(float)+0x28>)
    8484:	bl	f4f0 <__addsf3>
    8488:	bl	fb04 <__aeabi_f2uiz>
    848c:	mov	r1, r0
    848e:	mov	r0, r4
    8490:	ldmia.w	sp!, {r4, lr}
    8494:	b.w	840c <AudioControlSGTL5000::volumeInteger(unsigned int)>
    8498:	.word	0x43010000
    849c:	.word	0x3eff7cee

000084a0 <_GLOBAL__sub_I__ZN17AudioOutputAnalog14block_left_1stE>:

DMAMEM __attribute__((aligned(32))) static uint16_t dac_buffer[AUDIO_BLOCK_SAMPLES*2];
audio_block_t * AudioOutputAnalog::block_left_1st = NULL;
audio_block_t * AudioOutputAnalog::block_left_2nd = NULL;
bool AudioOutputAnalog::update_responsibility = false;
DMAChannel AudioOutputAnalog::dma(false);
    84a0:	ldr	r2, [pc, #8]	; (84ac <_GLOBAL__sub_I__ZN17AudioOutputAnalog14block_left_1stE+0xc>)
    84a2:	ldr	r1, [pc, #12]	; (84b0 <_GLOBAL__sub_I__ZN17AudioOutputAnalog14block_left_1stE+0x10>)
    84a4:	ldr	r0, [pc, #12]	; (84b4 <_GLOBAL__sub_I__ZN17AudioOutputAnalog14block_left_1stE+0x14>)
    84a6:	b.w	eb18 <__aeabi_atexit>
    84aa:	nop
    84ac:	.word	0x1fff8a3c
    84b0:	.word	0x0000077d
    84b4:	.word	0x20002b74

000084b8 <_GLOBAL__sub_I__ZN22AudioInputAnalogStereo10block_leftE>:
        while (1) {
                if ((ADC1_SC1A & ADC_SC1_COCO)) {
                        return ADC1_RA;
                }
        }
}
    84b8:	push	{r3, r4, r5, lr}
uint16_t AudioInputAnalogStereo::offset_left = 0;
uint16_t AudioInputAnalogStereo::offset_right = 0;
int32_t AudioInputAnalogStereo::hpf_y1[2] = { 0, 0 };
int32_t AudioInputAnalogStereo::hpf_x1[2] = { 0, 0 };
bool AudioInputAnalogStereo::update_responsibility = false;
DMAChannel AudioInputAnalogStereo::dma0(false);
    84ba:	ldr	r5, [pc, #28]	; (84d8 <_GLOBAL__sub_I__ZN22AudioInputAnalogStereo10block_leftE+0x20>)
    84bc:	ldr	r4, [pc, #28]	; (84dc <_GLOBAL__sub_I__ZN22AudioInputAnalogStereo10block_leftE+0x24>)
    84be:	ldr	r0, [pc, #32]	; (84e0 <_GLOBAL__sub_I__ZN22AudioInputAnalogStereo10block_leftE+0x28>)
    84c0:	mov	r2, r5
    84c2:	mov	r1, r4
    84c4:	bl	eb18 <__aeabi_atexit>
DMAChannel AudioInputAnalogStereo::dma1(false);
    84c8:	mov	r2, r5
    84ca:	mov	r1, r4
    84cc:	ldr	r0, [pc, #20]	; (84e4 <_GLOBAL__sub_I__ZN22AudioInputAnalogStereo10block_leftE+0x2c>)
        while (1) {
                if ((ADC1_SC1A & ADC_SC1_COCO)) {
                        return ADC1_RA;
                }
        }
}
    84ce:	ldmia.w	sp!, {r3, r4, r5, lr}
uint16_t AudioInputAnalogStereo::offset_right = 0;
int32_t AudioInputAnalogStereo::hpf_y1[2] = { 0, 0 };
int32_t AudioInputAnalogStereo::hpf_x1[2] = { 0, 0 };
bool AudioInputAnalogStereo::update_responsibility = false;
DMAChannel AudioInputAnalogStereo::dma0(false);
DMAChannel AudioInputAnalogStereo::dma1(false);
    84d2:	b.w	eb18 <__aeabi_atexit>
    84d6:	nop
    84d8:	.word	0x1fff8a3c
    84dc:	.word	0x0000077d
    84e0:	.word	0x20002b7c
    84e4:	.word	0x20002b84

000084e8 <_GLOBAL__sub_I__ZN17AudioInputI2SQuad9block_ch1E>:
audio_block_t * AudioInputI2SQuad::block_ch2 = NULL;
audio_block_t * AudioInputI2SQuad::block_ch3 = NULL;
audio_block_t * AudioInputI2SQuad::block_ch4 = NULL;
uint16_t AudioInputI2SQuad::block_offset = 0;
bool AudioInputI2SQuad::update_responsibility = false;
DMAChannel AudioInputI2SQuad::dma(false);
    84e8:	ldr	r2, [pc, #8]	; (84f4 <_GLOBAL__sub_I__ZN17AudioInputI2SQuad9block_ch1E+0xc>)
    84ea:	ldr	r1, [pc, #12]	; (84f8 <_GLOBAL__sub_I__ZN17AudioInputI2SQuad9block_ch1E+0x10>)
    84ec:	ldr	r0, [pc, #12]	; (84fc <_GLOBAL__sub_I__ZN17AudioInputI2SQuad9block_ch1E+0x14>)
    84ee:	b.w	eb18 <__aeabi_atexit>
    84f2:	nop
    84f4:	.word	0x1fff8a3c
    84f8:	.word	0x0000077d
    84fc:	.word	0x20002b8c

00008500 <_GLOBAL__sub_I__ZN18AudioOutputI2SQuad13block_ch1_1stE>:
uint16_t  AudioOutputI2SQuad::ch2_offset = 0;
uint16_t  AudioOutputI2SQuad::ch3_offset = 0;
uint16_t  AudioOutputI2SQuad::ch4_offset = 0;
bool AudioOutputI2SQuad::update_responsibility = false;
DMAMEM __attribute__((aligned(32))) static uint32_t i2s_tx_buffer[AUDIO_BLOCK_SAMPLES*2];
DMAChannel AudioOutputI2SQuad::dma(false);
    8500:	ldr	r2, [pc, #8]	; (850c <_GLOBAL__sub_I__ZN18AudioOutputI2SQuad13block_ch1_1stE+0xc>)
    8502:	ldr	r1, [pc, #12]	; (8510 <_GLOBAL__sub_I__ZN18AudioOutputI2SQuad13block_ch1_1stE+0x10>)
    8504:	ldr	r0, [pc, #12]	; (8514 <_GLOBAL__sub_I__ZN18AudioOutputI2SQuad13block_ch1_1stE+0x14>)
    8506:	b.w	eb18 <__aeabi_atexit>
    850a:	nop
    850c:	.word	0x1fff8a3c
    8510:	.word	0x0000077d
    8514:	.word	0x20002b94

00008518 <_GLOBAL__sub_I__ZN16AudioInputI2SOct9block_ch1E>:
audio_block_t * AudioInputI2SOct::block_ch6 = NULL;
audio_block_t * AudioInputI2SOct::block_ch7 = NULL;
audio_block_t * AudioInputI2SOct::block_ch8 = NULL;
uint16_t AudioInputI2SOct::block_offset = 0;
bool AudioInputI2SOct::update_responsibility = false;
DMAChannel AudioInputI2SOct::dma(false);
    8518:	ldr	r2, [pc, #8]	; (8524 <_GLOBAL__sub_I__ZN16AudioInputI2SOct9block_ch1E+0xc>)
    851a:	ldr	r1, [pc, #12]	; (8528 <_GLOBAL__sub_I__ZN16AudioInputI2SOct9block_ch1E+0x10>)
    851c:	ldr	r0, [pc, #12]	; (852c <_GLOBAL__sub_I__ZN16AudioInputI2SOct9block_ch1E+0x14>)
    851e:	b.w	eb18 <__aeabi_atexit>
    8522:	nop
    8524:	.word	0x1fff8a3c
    8528:	.word	0x0000077d
    852c:	.word	0x20002b9c

00008530 <_GLOBAL__sub_I__ZN14AudioOutputTDM11block_inputE>:
audio_block_t * AudioOutputTDM::block_input[16] = {
	nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr,
	nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr
};
bool AudioOutputTDM::update_responsibility = false;
DMAChannel AudioOutputTDM::dma(false);
    8530:	ldr	r2, [pc, #8]	; (853c <_GLOBAL__sub_I__ZN14AudioOutputTDM11block_inputE+0xc>)
    8532:	ldr	r1, [pc, #12]	; (8540 <_GLOBAL__sub_I__ZN14AudioOutputTDM11block_inputE+0x10>)
    8534:	ldr	r0, [pc, #12]	; (8544 <_GLOBAL__sub_I__ZN14AudioOutputTDM11block_inputE+0x14>)
    8536:	b.w	eb18 <__aeabi_atexit>
    853a:	nop
    853c:	.word	0x1fff8a3c
    8540:	.word	0x0000077d
    8544:	.word	0x20002ba4

00008548 <_GLOBAL__sub_I__ZN13AudioInputTDM14block_incomingE>:
audio_block_t * AudioInputTDM::block_incoming[16] = {
	nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr,
	nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr
};
bool AudioInputTDM::update_responsibility = false;
DMAChannel AudioInputTDM::dma(false);
    8548:	ldr	r2, [pc, #8]	; (8554 <_GLOBAL__sub_I__ZN13AudioInputTDM14block_incomingE+0xc>)
    854a:	ldr	r1, [pc, #12]	; (8558 <_GLOBAL__sub_I__ZN13AudioInputTDM14block_incomingE+0x10>)
    854c:	ldr	r0, [pc, #12]	; (855c <_GLOBAL__sub_I__ZN13AudioInputTDM14block_incomingE+0x14>)
    854e:	b.w	eb18 <__aeabi_atexit>
    8552:	nop
    8554:	.word	0x1fff8a3c
    8558:	.word	0x0000077d
    855c:	.word	0x20002bac

00008560 <_GLOBAL__sub_I__ZN16AudioInputI2SHex9block_ch1E>:
audio_block_t * AudioInputI2SHex::block_ch4 = NULL;
audio_block_t * AudioInputI2SHex::block_ch5 = NULL;
audio_block_t * AudioInputI2SHex::block_ch6 = NULL;
uint16_t AudioInputI2SHex::block_offset = 0;
bool AudioInputI2SHex::update_responsibility = false;
DMAChannel AudioInputI2SHex::dma(false);
    8560:	ldr	r2, [pc, #8]	; (856c <_GLOBAL__sub_I__ZN16AudioInputI2SHex9block_ch1E+0xc>)
    8562:	ldr	r1, [pc, #12]	; (8570 <_GLOBAL__sub_I__ZN16AudioInputI2SHex9block_ch1E+0x10>)
    8564:	ldr	r0, [pc, #12]	; (8574 <_GLOBAL__sub_I__ZN16AudioInputI2SHex9block_ch1E+0x14>)
    8566:	b.w	eb18 <__aeabi_atexit>
    856a:	nop
    856c:	.word	0x1fff8a3c
    8570:	.word	0x0000077d
    8574:	.word	0x20002bb4

00008578 <_GLOBAL__sub_I__ZN13AudioInputPDM10block_leftE>:

DMAMEM __attribute__((aligned(32))) static uint32_t pdm_buffer[AUDIO_BLOCK_SAMPLES*4];
static uint32_t leftover[14];
audio_block_t * AudioInputPDM::block_left = NULL;
bool AudioInputPDM::update_responsibility = false;
DMAChannel AudioInputPDM::dma(false);
    8578:	ldr	r2, [pc, #8]	; (8584 <_GLOBAL__sub_I__ZN13AudioInputPDM10block_leftE+0xc>)
    857a:	ldr	r1, [pc, #12]	; (8588 <_GLOBAL__sub_I__ZN13AudioInputPDM10block_leftE+0x10>)
    857c:	ldr	r0, [pc, #12]	; (858c <_GLOBAL__sub_I__ZN13AudioInputPDM10block_leftE+0x14>)
    857e:	b.w	eb18 <__aeabi_atexit>
    8582:	nop
    8584:	.word	0x1fff8a3c
    8588:	.word	0x0000077d
    858c:	.word	0x20002bbc

00008590 <_GLOBAL__sub_I__ZN14AudioOutputI2S14block_left_1stE>:
audio_block_t * AudioOutputI2S::block_left_2nd = NULL;
audio_block_t * AudioOutputI2S::block_right_2nd = NULL;
uint16_t  AudioOutputI2S::block_left_offset = 0;
uint16_t  AudioOutputI2S::block_right_offset = 0;
bool AudioOutputI2S::update_responsibility = false;
DMAChannel AudioOutputI2S::dma(false);
    8590:	ldr	r2, [pc, #8]	; (859c <_GLOBAL__sub_I__ZN14AudioOutputI2S14block_left_1stE+0xc>)
    8592:	ldr	r1, [pc, #12]	; (85a0 <_GLOBAL__sub_I__ZN14AudioOutputI2S14block_left_1stE+0x10>)
    8594:	ldr	r0, [pc, #12]	; (85a4 <_GLOBAL__sub_I__ZN14AudioOutputI2S14block_left_1stE+0x14>)
    8596:	b.w	eb18 <__aeabi_atexit>
    859a:	nop
    859c:	.word	0x1fff8a3c
    85a0:	.word	0x0000077d
    85a4:	.word	0x20002bc4

000085a8 <_GLOBAL__sub_I__ZN16AudioOutputSPDIF14block_left_1stE>:
audio_block_t * AudioOutputSPDIF::block_left_2nd = NULL;
audio_block_t * AudioOutputSPDIF::block_right_2nd = NULL;
uint16_t  AudioOutputSPDIF::block_left_offset = 0;
uint16_t  AudioOutputSPDIF::block_right_offset = 0;
bool AudioOutputSPDIF::update_responsibility = false;
DMAChannel AudioOutputSPDIF::dma(false);
    85a8:	ldr	r2, [pc, #8]	; (85b4 <_GLOBAL__sub_I__ZN16AudioOutputSPDIF14block_left_1stE+0xc>)
    85aa:	ldr	r1, [pc, #12]	; (85b8 <_GLOBAL__sub_I__ZN16AudioOutputSPDIF14block_left_1stE+0x10>)
    85ac:	ldr	r0, [pc, #12]	; (85bc <_GLOBAL__sub_I__ZN16AudioOutputSPDIF14block_left_1stE+0x14>)
    85ae:	b.w	eb18 <__aeabi_atexit>
    85b2:	nop
    85b4:	.word	0x1fff8a3c
    85b8:	.word	0x0000077d
    85bc:	.word	0x20002bcc

000085c0 <TwoWire::available()>:
	}
	uint8_t requestFrom(uint8_t addr, uint8_t qty, uint32_t iaddr, uint8_t n, uint8_t stop);
	virtual size_t write(uint8_t data);
	virtual size_t write(const uint8_t *data, size_t quantity);
	virtual int available(void) {
		return rxBufferLength - rxBufferIndex;
    85c0:	ldrb.w	r2, [r0, #57]	; 0x39
    85c4:	ldrb.w	r0, [r0, #56]	; 0x38
	}
    85c8:	subs	r0, r2, r0
    85ca:	bx	lr

000085cc <TwoWire::read()>:
	virtual int read(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
    85cc:	ldrb.w	r3, [r0, #56]	; 0x38
    85d0:	ldrb.w	r2, [r0, #57]	; 0x39
    85d4:	cmp	r2, r3
    85d6:	bls.n	85e4 <TwoWire::read()+0x18>
		return rxBuffer[rxBufferIndex++];
    85d8:	adds	r2, r3, #1
    85da:	add	r3, r0
    85dc:	strb.w	r2, [r0, #56]	; 0x38
    85e0:	ldrb	r0, [r3, #24]
    85e2:	bx	lr
	virtual size_t write(const uint8_t *data, size_t quantity);
	virtual int available(void) {
		return rxBufferLength - rxBufferIndex;
	}
	virtual int read(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
    85e4:	mov.w	r0, #4294967295
		return rxBuffer[rxBufferIndex++];
	}
    85e8:	bx	lr
    85ea:	nop

000085ec <TwoWire::peek()>:
	virtual int peek(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
    85ec:	ldrb.w	r3, [r0, #56]	; 0x38
    85f0:	ldrb.w	r2, [r0, #57]	; 0x39
    85f4:	cmp	r2, r3
		return rxBuffer[rxBufferIndex];
    85f6:	itte	hi
    85f8:	addhi	r3, r3, r0
    85fa:	ldrbhi	r0, [r3, #24]
	virtual int read(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
		return rxBuffer[rxBufferIndex++];
	}
	virtual int peek(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
    85fc:	movls.w	r0, #4294967295
		return rxBuffer[rxBufferIndex];
	}
    8600:	bx	lr
    8602:	nop

00008604 <TwoWire::flush()>:
	virtual void flush(void) {
    8604:	bx	lr
    8606:	nop

00008608 <TwoWire::write(unsigned char const*, unsigned int)>:
	}
	return 0;
}

size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
    8608:	push	{r3, r4, r5, lr}
    860a:	mov	r5, r0
	if (transmitting || slave_mode) {
    860c:	ldrh.w	r0, [r0, #94]	; 0x5e
    8610:	cbz	r0, 8638 <TwoWire::write(unsigned char const*, unsigned int)+0x30>
		size_t avail = BUFFER_LENGTH+1 - txBufferLength;
    8612:	ldrb.w	r3, [r5, #93]	; 0x5d
    8616:	mov	r4, r2
    8618:	rsb	r2, r3, #33	; 0x21
		if (quantity > avail) {
    861c:	cmp	r4, r2
    861e:	bhi.n	863a <TwoWire::write(unsigned char const*, unsigned int)+0x32>
			quantity = avail;
			setWriteError();
		}
		memcpy(txBuffer + txBufferLength, data, quantity);
    8620:	add.w	r0, r5, #59	; 0x3b
    8624:	add	r0, r3
    8626:	mov	r2, r4
    8628:	bl	cb00 <memcpy>
		txBufferLength += quantity;
    862c:	ldrb.w	r3, [r5, #93]	; 0x5d
    8630:	add	r3, r4
    8632:	strb.w	r3, [r5, #93]	; 0x5d
    8636:	mov	r0, r4
		return quantity;
	}
	return 0;
}
    8638:	pop	{r3, r4, r5, pc}
	// format warnings are too pedantic - disable until newer toolchain offers better...
	// https://forum.pjrc.com/threads/62473?p=256873&viewfull=1#post256873
	int printf(const char *format, ...) /*__attribute__ ((format (printf, 2, 3)))*/;
	int printf(const __FlashStringHelper *format, ...);
  protected:
	void setWriteError(int err = 1) { write_error = err; }
    863a:	movs	r0, #1
    863c:	mov	r4, r2
    863e:	strb	r0, [r5, #4]
    8640:	b.n	8620 <TwoWire::write(unsigned char const*, unsigned int)+0x18>
    8642:	nop

00008644 <TwoWire::write(unsigned char)>:
//  I2C0_C2      // I2C Control Register 2
//  I2C0_FLT     // I2C Programmable Input Glitch Filter register

size_t TwoWire::write(uint8_t data)
{
	if (transmitting || slave_mode) {
    8644:	ldrh.w	r3, [r0, #94]	; 0x5e
    8648:	cbz	r3, 8666 <TwoWire::write(unsigned char)+0x22>
		if (txBufferLength >= BUFFER_LENGTH+1) {
    864a:	ldrb.w	r3, [r0, #93]	; 0x5d
    864e:	cmp	r3, #32
    8650:	bhi.n	8662 <TwoWire::write(unsigned char)+0x1e>
			setWriteError();
			return 0;
		}
		txBuffer[txBufferLength++] = data;
    8652:	adds	r2, r0, r3
    8654:	adds	r3, #1
    8656:	strb.w	r3, [r0, #93]	; 0x5d
		return 1;
    865a:	movs	r0, #1
	if (transmitting || slave_mode) {
		if (txBufferLength >= BUFFER_LENGTH+1) {
			setWriteError();
			return 0;
		}
		txBuffer[txBufferLength++] = data;
    865c:	strb.w	r1, [r2, #59]	; 0x3b
    8660:	bx	lr
    8662:	movs	r3, #1
    8664:	strb	r3, [r0, #4]
size_t TwoWire::write(uint8_t data)
{
	if (transmitting || slave_mode) {
		if (txBufferLength >= BUFFER_LENGTH+1) {
			setWriteError();
			return 0;
    8666:	movs	r0, #0
    8668:	bx	lr
    866a:	nop

0000866c <TwoWire::begin()>:
void TwoWire::begin(void)
{
	//serial_begin(BAUD2DIV(115200));
	//serial_print("\nWire Begin\n");

	rxBufferIndex = 0;
    866c:	movs	r3, #0
	txBufferLength = 0;
	transmitting = 0;
	user_onRequest = NULL;
	user_onReceive = NULL;
	slave_mode = 0;
	hardware.clock_gate_register |= hardware.clock_gate_mask;
    866e:	ldr	r2, [r0, #20]
void TwoWire::begin(void)
{
	//serial_begin(BAUD2DIV(115200));
	//serial_print("\nWire Begin\n");

	rxBufferIndex = 0;
    8670:	strb.w	r3, [r0, #56]	; 0x38
	rxBufferLength = 0;
    8674:	strb.w	r3, [r0, #57]	; 0x39
	txBufferIndex = 0;
    8678:	strb.w	r3, [r0, #92]	; 0x5c
	txBufferLength = 0;
    867c:	strb.w	r3, [r0, #93]	; 0x5d
	transmitting = 0;
    8680:	strb.w	r3, [r0, #94]	; 0x5e
	user_onRequest = NULL;
	user_onReceive = NULL;
	slave_mode = 0;
    8684:	strb.w	r3, [r0, #95]	; 0x5f
	hardware.clock_gate_register |= hardware.clock_gate_mask;
    8688:	ldmia	r2, {r1, r2}

void sda_rising_isr0(void);
void sda_rising_isr1(void);

void TwoWire::begin(void)
{
    868a:	push	{r4, r5}
	txBufferLength = 0;
	transmitting = 0;
	user_onRequest = NULL;
	user_onReceive = NULL;
	slave_mode = 0;
	hardware.clock_gate_register |= hardware.clock_gate_mask;
    868c:	ldr	r5, [r1, #0]
	size_t write(int n) {
		return write((uint8_t)n);
	}
	using Print::write;
private:
	KINETIS_I2C_t& port() { return (*(KINETIS_I2C_t *) port_addr); }
    868e:	ldr	r4, [r0, #16]
	rxBufferIndex = 0;
	rxBufferLength = 0;
	txBufferIndex = 0;
	txBufferLength = 0;
	transmitting = 0;
	user_onRequest = NULL;
    8690:	str	r3, [r0, #100]	; 0x64
	user_onReceive = NULL;
	slave_mode = 0;
	hardware.clock_gate_register |= hardware.clock_gate_mask;
    8692:	orrs	r2, r5
	rxBufferLength = 0;
	txBufferIndex = 0;
	txBufferLength = 0;
	transmitting = 0;
	user_onRequest = NULL;
	user_onReceive = NULL;
    8694:	str	r3, [r0, #104]	; 0x68
	slave_mode = 0;
	hardware.clock_gate_register |= hardware.clock_gate_mask;
    8696:	str	r2, [r1, #0]
	port().C1 = 0;
    8698:	strb	r3, [r4, #2]
	// would enable pullup resistors.  However, there seems
	// to be a bug in chip while I2C is enabled, where setting
	// those causes the port to be driven strongly high.
	uint32_t mux;
	volatile uint32_t *reg;
	reg = portConfigRegister(hardware.sda_pin[sda_pin_index]);
    869a:	ldr	r2, [r0, #20]
    869c:	ldrb.w	r3, [r0, #97]	; 0x61
    86a0:	ldr	r1, [pc, #88]	; (86fc <TwoWire::begin()+0x90>)
	//pinMode(4, OUTPUT);
}

void TwoWire::setClock(uint32_t frequency)
{
	if (!(hardware.clock_gate_register & hardware.clock_gate_mask)) return;
    86a2:	ldr	r4, [r2, #0]
	// would enable pullup resistors.  However, there seems
	// to be a bug in chip while I2C is enabled, where setting
	// those causes the port to be driven strongly high.
	uint32_t mux;
	volatile uint32_t *reg;
	reg = portConfigRegister(hardware.sda_pin[sda_pin_index]);
    86a4:	add	r3, r2
    86a6:	ldrb	r5, [r3, #8]
	mux = PORT_PCR_MUX(hardware.sda_mux[sda_pin_index]);
	*reg = mux|PORT_PCR_ODE|PORT_PCR_SRE|PORT_PCR_DSE;
    86a8:	ldrb	r3, [r3, #13]
	// would enable pullup resistors.  However, there seems
	// to be a bug in chip while I2C is enabled, where setting
	// those causes the port to be driven strongly high.
	uint32_t mux;
	volatile uint32_t *reg;
	reg = portConfigRegister(hardware.sda_pin[sda_pin_index]);
    86aa:	add.w	r5, r1, r5, lsl #3
	mux = PORT_PCR_MUX(hardware.sda_mux[sda_pin_index]);
	*reg = mux|PORT_PCR_ODE|PORT_PCR_SRE|PORT_PCR_DSE;
    86ae:	lsls	r3, r3, #8
	// would enable pullup resistors.  However, there seems
	// to be a bug in chip while I2C is enabled, where setting
	// those causes the port to be driven strongly high.
	uint32_t mux;
	volatile uint32_t *reg;
	reg = portConfigRegister(hardware.sda_pin[sda_pin_index]);
    86b0:	ldr	r5, [r5, #4]
	mux = PORT_PCR_MUX(hardware.sda_mux[sda_pin_index]);
	*reg = mux|PORT_PCR_ODE|PORT_PCR_SRE|PORT_PCR_DSE;
    86b2:	and.w	r3, r3, #1792	; 0x700
    86b6:	orr.w	r3, r3, #100	; 0x64
    86ba:	str	r3, [r5, #0]
	reg = portConfigRegister(hardware.scl_pin[scl_pin_index]);
    86bc:	ldrb.w	r3, [r0, #98]	; 0x62
    86c0:	add	r3, r2
    86c2:	ldrb	r5, [r3, #18]
	mux = PORT_PCR_MUX(hardware.scl_mux[scl_pin_index]);
	*reg = mux|PORT_PCR_ODE|PORT_PCR_SRE|PORT_PCR_DSE;
    86c4:	ldrb	r3, [r3, #23]
	uint32_t mux;
	volatile uint32_t *reg;
	reg = portConfigRegister(hardware.sda_pin[sda_pin_index]);
	mux = PORT_PCR_MUX(hardware.sda_mux[sda_pin_index]);
	*reg = mux|PORT_PCR_ODE|PORT_PCR_SRE|PORT_PCR_DSE;
	reg = portConfigRegister(hardware.scl_pin[scl_pin_index]);
    86c6:	add.w	r1, r1, r5, lsl #3
	mux = PORT_PCR_MUX(hardware.scl_mux[scl_pin_index]);
	*reg = mux|PORT_PCR_ODE|PORT_PCR_SRE|PORT_PCR_DSE;
    86ca:	lsls	r3, r3, #8
	uint32_t mux;
	volatile uint32_t *reg;
	reg = portConfigRegister(hardware.sda_pin[sda_pin_index]);
	mux = PORT_PCR_MUX(hardware.sda_mux[sda_pin_index]);
	*reg = mux|PORT_PCR_ODE|PORT_PCR_SRE|PORT_PCR_DSE;
	reg = portConfigRegister(hardware.scl_pin[scl_pin_index]);
    86cc:	ldr	r1, [r1, #4]
	mux = PORT_PCR_MUX(hardware.scl_mux[scl_pin_index]);
	*reg = mux|PORT_PCR_ODE|PORT_PCR_SRE|PORT_PCR_DSE;
    86ce:	and.w	r3, r3, #1792	; 0x700
    86d2:	orr.w	r3, r3, #100	; 0x64
    86d6:	str	r3, [r1, #0]
	//pinMode(4, OUTPUT);
}

void TwoWire::setClock(uint32_t frequency)
{
	if (!(hardware.clock_gate_register & hardware.clock_gate_mask)) return;
    86d8:	ldr	r1, [r4, #0]
    86da:	ldr	r3, [r2, #4]
    86dc:	tst	r1, r3
    86de:	beq.n	86ec <TwoWire::begin()+0x80>
    86e0:	ldr	r3, [r0, #16]
		port().F = I2C_F_DIV56; // 0.96 MHz
	}
	port().FLT = 4;
#elif F_BUS == 48000000
	if (frequency < 400000) {
		port().F = 0x27;	// 100 kHz
    86e2:	movs	r2, #39	; 0x27
    86e4:	strb	r2, [r3, #1]
    86e6:	ldr	r3, [r0, #16]
	} else if (frequency < 1000000) {
		port().F = 0x1A; // 400 kHz
	} else {
		port().F = 0x0D; // 1 MHz
	}
	port().FLT = 4;
    86e8:	movs	r2, #4
    86ea:	strb	r2, [r3, #6]
    86ec:	ldr	r3, [r0, #16]
	*reg = mux|PORT_PCR_ODE|PORT_PCR_SRE|PORT_PCR_DSE;
	reg = portConfigRegister(hardware.scl_pin[scl_pin_index]);
	mux = PORT_PCR_MUX(hardware.scl_mux[scl_pin_index]);
	*reg = mux|PORT_PCR_ODE|PORT_PCR_SRE|PORT_PCR_DSE;
	setClock(100000);
	port().C2 = I2C_C2_HDRS;
    86ee:	movs	r2, #32
    86f0:	strb	r2, [r3, #5]
    86f2:	ldr	r3, [r0, #16]
	port().C1 = I2C_C1_IICEN;
    86f4:	movs	r2, #128	; 0x80
    86f6:	strb	r2, [r3, #2]
	//pinMode(3, OUTPUT);
	//pinMode(4, OUTPUT);
}
    86f8:	pop	{r4, r5}
    86fa:	bx	lr
    86fc:	.word	0x00014758

00008700 <TwoWire::isr()>:
	hardware.clock_gate_register &= ~hardware.clock_gate_mask;
}


void TwoWire::isr(void)
{
    8700:	push	{r4, lr}
    8702:	ldr	r2, [r0, #16]
	uint8_t status, c1, data;
	static uint8_t receiving=0;

	status = port().S;
    8704:	ldrb	r3, [r2, #3]
    8706:	uxtb	r3, r3
	//serial_print(".");
	if (status & I2C_S_ARBL) {
    8708:	lsls	r1, r3, #27
	hardware.clock_gate_register &= ~hardware.clock_gate_mask;
}


void TwoWire::isr(void)
{
    870a:	mov	r4, r0
	uint8_t status, c1, data;
	static uint8_t receiving=0;

	status = port().S;
	//serial_print(".");
	if (status & I2C_S_ARBL) {
    870c:	bpl.n	878a <TwoWire::isr()+0x8a>
		// Arbitration Lost
		port().S = I2C_S_ARBL;
    870e:	movs	r1, #16
		if (receiving && rxBufferLength > 0) {
			// TODO: does this detect the STOP condition in slave receive mode?


		}
		if (!(status & I2C_S_IAAS)) return;
    8710:	lsls	r0, r3, #25

	status = port().S;
	//serial_print(".");
	if (status & I2C_S_ARBL) {
		// Arbitration Lost
		port().S = I2C_S_ARBL;
    8712:	strb	r1, [r2, #3]
		if (receiving && rxBufferLength > 0) {
			// TODO: does this detect the STOP condition in slave receive mode?


		}
		if (!(status & I2C_S_IAAS)) return;
    8714:	bpl.n	8788 <TwoWire::isr()+0x88>
	}
	if (status & I2C_S_IAAS) {
		//serial_print("\n");
		// Addressed As A Slave
		if (status & I2C_S_SRW) {
    8716:	and.w	r3, r3, #4
    871a:	and.w	r2, r3, #255	; 0xff
    871e:	cmp	r3, #0
    8720:	beq.n	87c6 <TwoWire::isr()+0xc6>
			//serial_print("T");
			// Begin Slave Transmit
			receiving = 0;
    8722:	ldr	r1, [pc, #244]	; (8818 <TwoWire::isr()+0x118>)
			txBufferLength = 0;
			if (user_onRequest != NULL) {
    8724:	ldr	r2, [r4, #100]	; 0x64
		//serial_print("\n");
		// Addressed As A Slave
		if (status & I2C_S_SRW) {
			//serial_print("T");
			// Begin Slave Transmit
			receiving = 0;
    8726:	movs	r3, #0
    8728:	strb	r3, [r1, #0]
			txBufferLength = 0;
    872a:	strb.w	r3, [r4, #93]	; 0x5d
			if (user_onRequest != NULL) {
    872e:	cmp	r2, #0
    8730:	beq.n	87ea <TwoWire::isr()+0xea>
				user_onRequest();
    8732:	blx	r2
			}
			if (txBufferLength == 0) {
    8734:	ldrb.w	r3, [r4, #93]	; 0x5d
    8738:	cmp	r3, #0
    873a:	beq.n	87ea <TwoWire::isr()+0xea>
    873c:	ldr	r3, [r4, #16]
				// when we should send nothing?  Arduino's AVR
				// implementation does this, but is it ok?
				txBufferLength = 1;
				txBuffer[0] = 0;
			}
			port().C1 = I2C_C1_IICEN | I2C_C1_IICIE | I2C_C1_TX;
    873e:	movs	r2, #208	; 0xd0
    8740:	strb	r2, [r3, #2]
    8742:	ldr	r3, [r4, #16]
			port().D = txBuffer[0];
    8744:	ldrb.w	r2, [r4, #59]	; 0x3b
    8748:	strb	r2, [r3, #4]
    874a:	ldr	r3, [r4, #16]
			txBufferIndex = 1;
    874c:	movs	r2, #1
    874e:	strb.w	r2, [r4, #92]	; 0x5c
			receiving = 1;
			rxBufferLength = 0;
			port().C1 = I2C_C1_IICEN | I2C_C1_IICIE;
			data = port().D;
		}
		port().S = I2C_S_IICIF;
    8752:	movs	r2, #2
    8754:	strb	r2, [r3, #3]
		return;
    8756:	pop	{r4, pc}
		#if defined(WIRE_IMPLEMENT_WIRE) && !defined(WIRE_IMPLEMENT_WIRE1)
		attachInterrupt(hardware.sda_pin[sda_pin_index], sda_rising_isr0, RISING);
		#elif !defined(WIRE_IMPLEMENT_WIRE) && defined(WIRE_IMPLEMENT_WIRE1)
		attachInterrupt(hardware.sda_pin[sda_pin_index], sda_rising_isr1, RISING);
		#elif defined(WIRE_IMPLEMENT_WIRE) && defined(WIRE_IMPLEMENT_WIRE1)
		if (this == &Wire) {
    8758:	ldr	r3, [pc, #192]	; (881c <TwoWire::isr()+0x11c>)
			port().C1 = I2C_C1_IICEN | I2C_C1_IICIE;
			data = port().D;
		}
	} else {
		// Continue Slave Receive
		irqcount = 0;
    875a:	strb.w	r0, [r4, #96]	; 0x60
		#if defined(WIRE_IMPLEMENT_WIRE) && !defined(WIRE_IMPLEMENT_WIRE1)
		attachInterrupt(hardware.sda_pin[sda_pin_index], sda_rising_isr0, RISING);
		#elif !defined(WIRE_IMPLEMENT_WIRE) && defined(WIRE_IMPLEMENT_WIRE1)
		attachInterrupt(hardware.sda_pin[sda_pin_index], sda_rising_isr1, RISING);
		#elif defined(WIRE_IMPLEMENT_WIRE) && defined(WIRE_IMPLEMENT_WIRE1)
		if (this == &Wire) {
    875e:	cmp	r4, r3
    8760:	beq.n	87f8 <TwoWire::isr()+0xf8>
			attachInterrupt(hardware.sda_pin[sda_pin_index], sda_rising_isr0, RISING);
		} else if (this == &Wire1) {
    8762:	ldr	r3, [pc, #188]	; (8820 <TwoWire::isr()+0x120>)
    8764:	cmp	r4, r3
    8766:	beq.n	880e <TwoWire::isr()+0x10e>
		#endif
		#endif // WIRE_HAS_STOP_INTERRUPT
		//digitalWriteFast(4, HIGH);
		data = port().D;
		//serial_phex(data);
		if (rxBufferLength < BUFFER_LENGTH && receiving) {
    8768:	ldrb.w	r1, [r4, #57]	; 0x39
			attachInterrupt(hardware.sda_pin[sda_pin_index], sda_rising_isr1, RISING);
		}
		#endif
		#endif // WIRE_HAS_STOP_INTERRUPT
		//digitalWriteFast(4, HIGH);
		data = port().D;
    876c:	ldrb	r3, [r2, #4]
		//serial_phex(data);
		if (rxBufferLength < BUFFER_LENGTH && receiving) {
    876e:	cmp	r1, #31
			attachInterrupt(hardware.sda_pin[sda_pin_index], sda_rising_isr1, RISING);
		}
		#endif
		#endif // WIRE_HAS_STOP_INTERRUPT
		//digitalWriteFast(4, HIGH);
		data = port().D;
    8770:	uxtb	r3, r3
		//serial_phex(data);
		if (rxBufferLength < BUFFER_LENGTH && receiving) {
    8772:	bhi.n	8784 <TwoWire::isr()+0x84>
    8774:	ldr	r0, [pc, #160]	; (8818 <TwoWire::isr()+0x118>)
    8776:	ldrb	r0, [r0, #0]
    8778:	cbz	r0, 8784 <TwoWire::isr()+0x84>
			rxBuffer[rxBufferLength++] = data;
    877a:	adds	r0, r4, r1
    877c:	adds	r1, #1
    877e:	strb.w	r1, [r4, #57]	; 0x39
    8782:	strb	r3, [r0, #24]
		}
		//digitalWriteFast(4, LOW);
	}
	port().S = I2C_S_IICIF;
    8784:	movs	r3, #2
    8786:	strb	r3, [r2, #3]
    8788:	pop	{r4, pc}


		}
		if (!(status & I2C_S_IAAS)) return;
	}
	if (status & I2C_S_IAAS) {
    878a:	lsls	r1, r3, #25
    878c:	bmi.n	8716 <TwoWire::isr()+0x16>
			rxBufferIndex = 0;
			user_onReceive(rxBufferLength);
		}
	}
	#endif
	c1 = port().C1;
    878e:	ldrb	r1, [r2, #2]
	if (c1 & I2C_C1_TX) {
    8790:	and.w	r1, r1, #16
    8794:	and.w	r0, r1, #255	; 0xff
    8798:	cmp	r1, #0
    879a:	beq.n	8758 <TwoWire::isr()+0x58>
		// Continue Slave Transmit
		//serial_print("t");
		if ((status & I2C_S_RXAK) == 0) {
    879c:	ands.w	r3, r3, #1
    87a0:	bne.n	87e0 <TwoWire::isr()+0xe0>
			//serial_print(".");
			// Master ACK'd previous byte
			if (txBufferIndex < txBufferLength) {
    87a2:	ldrb.w	r1, [r4, #92]	; 0x5c
    87a6:	ldrb.w	r0, [r4, #93]	; 0x5d
    87aa:	cmp	r0, r1
				port().D = txBuffer[txBufferIndex++];
    87ac:	itttt	hi
    87ae:	addhi	r3, r1, #1
    87b0:	addhi	r1, r1, r4
    87b2:	strbhi.w	r3, [r4, #92]	; 0x5c
    87b6:	ldrbhi.w	r3, [r1, #59]	; 0x3b
			} else {
				port().D = 0;
    87ba:	strb	r3, [r2, #4]
    87bc:	ldr	r3, [r4, #16]
			}
			port().C1 = I2C_C1_IICEN | I2C_C1_IICIE | I2C_C1_TX;
    87be:	movs	r2, #208	; 0xd0
    87c0:	strb	r2, [r3, #2]
    87c2:	ldr	r2, [r4, #16]
    87c4:	b.n	8784 <TwoWire::isr()+0x84>
    87c6:	ldr	r3, [r4, #16]
			txBufferIndex = 1;
		} else {
			// Begin Slave Receive
			//serial_print("R");
			receiving = 1;
			rxBufferLength = 0;
    87c8:	strb.w	r2, [r4, #57]	; 0x39
			port().C1 = I2C_C1_IICEN | I2C_C1_IICIE;
    87cc:	movs	r2, #192	; 0xc0
    87ce:	strb	r2, [r3, #2]
    87d0:	ldr	r3, [r4, #16]
			port().D = txBuffer[0];
			txBufferIndex = 1;
		} else {
			// Begin Slave Receive
			//serial_print("R");
			receiving = 1;
    87d2:	ldr	r2, [pc, #68]	; (8818 <TwoWire::isr()+0x118>)
			rxBufferLength = 0;
			port().C1 = I2C_C1_IICEN | I2C_C1_IICIE;
			data = port().D;
    87d4:	ldrb	r1, [r3, #4]
			port().D = txBuffer[0];
			txBufferIndex = 1;
		} else {
			// Begin Slave Receive
			//serial_print("R");
			receiving = 1;
    87d6:	movs	r1, #1
    87d8:	strb	r1, [r2, #0]
			rxBufferLength = 0;
			port().C1 = I2C_C1_IICEN | I2C_C1_IICIE;
			data = port().D;
		}
		port().S = I2C_S_IICIF;
    87da:	movs	r2, #2
    87dc:	strb	r2, [r3, #3]
		return;
    87de:	pop	{r4, pc}
			}
			port().C1 = I2C_C1_IICEN | I2C_C1_IICIE | I2C_C1_TX;
		} else {
			//serial_print("*");
			// Master did not ACK previous byte
			port().C1 = I2C_C1_IICEN | I2C_C1_IICIE;
    87e0:	movs	r3, #192	; 0xc0
    87e2:	strb	r3, [r2, #2]
    87e4:	ldr	r2, [r4, #16]
			data = port().D;
    87e6:	ldrb	r3, [r2, #4]
    87e8:	b.n	8784 <TwoWire::isr()+0x84>
			}
			if (txBufferLength == 0) {
				// is this correct, transmitting a single zero
				// when we should send nothing?  Arduino's AVR
				// implementation does this, but is it ok?
				txBufferLength = 1;
    87ea:	movs	r2, #1
				txBuffer[0] = 0;
    87ec:	movs	r3, #0
			}
			if (txBufferLength == 0) {
				// is this correct, transmitting a single zero
				// when we should send nothing?  Arduino's AVR
				// implementation does this, but is it ok?
				txBufferLength = 1;
    87ee:	strb.w	r2, [r4, #93]	; 0x5d
				txBuffer[0] = 0;
    87f2:	strb.w	r3, [r4, #59]	; 0x3b
    87f6:	b.n	873c <TwoWire::isr()+0x3c>
		attachInterrupt(hardware.sda_pin[sda_pin_index], sda_rising_isr0, RISING);
		#elif !defined(WIRE_IMPLEMENT_WIRE) && defined(WIRE_IMPLEMENT_WIRE1)
		attachInterrupt(hardware.sda_pin[sda_pin_index], sda_rising_isr1, RISING);
		#elif defined(WIRE_IMPLEMENT_WIRE) && defined(WIRE_IMPLEMENT_WIRE1)
		if (this == &Wire) {
			attachInterrupt(hardware.sda_pin[sda_pin_index], sda_rising_isr0, RISING);
    87f8:	ldr	r2, [r4, #20]
    87fa:	ldrb.w	r3, [r4, #97]	; 0x61
    87fe:	ldr	r1, [pc, #36]	; (8824 <TwoWire::isr()+0x124>)
		} else if (this == &Wire1) {
			attachInterrupt(hardware.sda_pin[sda_pin_index], sda_rising_isr1, RISING);
    8800:	add	r3, r2
    8802:	movs	r2, #3
    8804:	ldrb	r0, [r3, #8]
    8806:	bl	d5ec <attachInterrupt>
    880a:	ldr	r2, [r4, #16]
    880c:	b.n	8768 <TwoWire::isr()+0x68>
    880e:	ldr	r2, [r4, #20]
    8810:	ldrb.w	r3, [r4, #97]	; 0x61
    8814:	ldr	r1, [pc, #16]	; (8828 <TwoWire::isr()+0x128>)
    8816:	b.n	8800 <TwoWire::isr()+0x100>
    8818:	.word	0x20002bd4
    881c:	.word	0x1fff8a9c
    8820:	.word	0x1fff8b08
    8824:	.word	0x00008889
    8828:	.word	0x00008895

0000882c <TwoWire::sda_rising_isr()>:
    882c:	ldr	r3, [r0, #16]
#endif

void TwoWire::sda_rising_isr(void)
{
	//digitalWrite(3, HIGH);
	if (!(port().S & I2C_S_BUSY)) {
    882e:	ldrb	r3, [r3, #3]
    8830:	and.w	r3, r3, #32
    8834:	cbz	r3, 8854 <TwoWire::sda_rising_isr()+0x28>
			rxBufferIndex = 0;
			user_onReceive(rxBufferLength);
		}
		//delayMicroseconds(100);
	} else {
		if (++irqcount >= 2 || !slave_mode) {
    8836:	ldrb.w	r3, [r0, #96]	; 0x60
    883a:	adds	r3, #1
    883c:	uxtb	r3, r3
    883e:	cmp	r3, #1
    8840:	strb.w	r3, [r0, #96]	; 0x60
    8844:	bls.n	887c <TwoWire::sda_rising_isr()+0x50>
			detachInterrupt(hardware.sda_pin[sda_pin_index]);
    8846:	ldr	r2, [r0, #20]
    8848:	ldrb.w	r3, [r0, #97]	; 0x61
    884c:	add	r3, r2
    884e:	ldrb	r0, [r3, #8]
    8850:	b.w	d6e4 <detachInterrupt>
	Wire1.sda_rising_isr();
}
#endif

void TwoWire::sda_rising_isr(void)
{
    8854:	push	{r4, r5, r6, lr}
	//digitalWrite(3, HIGH);
	if (!(port().S & I2C_S_BUSY)) {
		detachInterrupt(hardware.sda_pin[sda_pin_index]);
    8856:	ldr	r2, [r0, #20]
    8858:	and.w	r5, r3, #255	; 0xff
    885c:	ldrb.w	r3, [r0, #97]	; 0x61
    8860:	add	r3, r2
    8862:	mov	r4, r0
    8864:	ldrb	r0, [r3, #8]
    8866:	bl	d6e4 <detachInterrupt>
		if (user_onReceive != NULL) {
    886a:	ldr	r3, [r4, #104]	; 0x68
    886c:	cbz	r3, 8886 <TwoWire::sda_rising_isr()+0x5a>
			rxBufferIndex = 0;
    886e:	strb.w	r5, [r4, #56]	; 0x38
			user_onReceive(rxBufferLength);
    8872:	ldrb.w	r0, [r4, #57]	; 0x39
		if (++irqcount >= 2 || !slave_mode) {
			detachInterrupt(hardware.sda_pin[sda_pin_index]);
		}
	}
	//digitalWrite(3, LOW);
}
    8876:	ldmia.w	sp!, {r4, r5, r6, lr}
	//digitalWrite(3, HIGH);
	if (!(port().S & I2C_S_BUSY)) {
		detachInterrupt(hardware.sda_pin[sda_pin_index]);
		if (user_onReceive != NULL) {
			rxBufferIndex = 0;
			user_onReceive(rxBufferLength);
    887a:	bx	r3
		}
		//delayMicroseconds(100);
	} else {
		if (++irqcount >= 2 || !slave_mode) {
    887c:	ldrb.w	r3, [r0, #95]	; 0x5f
    8880:	cmp	r3, #0
    8882:	beq.n	8846 <TwoWire::sda_rising_isr()+0x1a>
    8884:	bx	lr
    8886:	pop	{r4, r5, r6, pc}

00008888 <sda_rising_isr0()>:
#if !defined(WIRE_HAS_STOP_INTERRUPT)

#if defined(WIRE_IMPLEMENT_WIRE)
void sda_rising_isr0(void)
{
	Wire.sda_rising_isr();
    8888:	ldr	r0, [pc, #4]	; (8890 <sda_rising_isr0()+0x8>)
    888a:	b.w	882c <TwoWire::sda_rising_isr()>
    888e:	nop
    8890:	.word	0x1fff8a9c

00008894 <sda_rising_isr1()>:
}
#endif
#if defined(WIRE_IMPLEMENT_WIRE1)
void sda_rising_isr1(void)
{
	Wire1.sda_rising_isr();
    8894:	ldr	r0, [pc, #4]	; (889c <sda_rising_isr1()+0x8>)
    8896:	b.w	882c <TwoWire::sda_rising_isr()>
    889a:	nop
    889c:	.word	0x1fff8b08

000088a0 <TwoWire::wait_idle()>:
	}
	return 0;
}

bool TwoWire::wait_idle(void)
{
    88a0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    88a4:	ldr	r7, [pc, #220]	; (8984 <L_1545_delayMicroseconds+0x1a>)
				digitalWrite(scl_pin, HIGH);
				delayMicroseconds(5);
			}
			uint32_t mux;
			volatile uint32_t *reg;
			reg = portConfigRegister(hardware.sda_pin[sda_pin_index]);
    88a6:	ldr.w	r9, [pc, #224]	; 8988 <L_1545_delayMicroseconds+0x1e>
    88aa:	ldr	r3, [r7, #0]
    88ac:	ldr	r2, [r0, #16]
	}
	return 0;
}

bool TwoWire::wait_idle(void)
{
    88ae:	sub	sp, #8
    88b0:	mov	r6, r0
    88b2:	str	r3, [sp, #0]
	return ret;
    88b4:	ldr.w	r8, [sp]
	bool reset=false;
    88b8:	movs	r1, #0
#else
		"subs   %0, #1"				"\n\t"
		"bne    L_%=_delayMicroseconds"		"\n"
		: "+r" (n) :
#endif
	);
    88ba:	movs	r5, #160	; 0xa0
	uint8_t i2c_status(void) {
		return port().S;
    88bc:	ldrb	r3, [r2, #3]
	uint32_t wait_begin = millis();

	//Serial.print("busy:");
	while (i2c_status() & I2C_S_BUSY) {
    88be:	lsls	r3, r3, #26
    88c0:	bpl.n	897a <L_1545_delayMicroseconds+0x10>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    88c2:	ldr	r3, [r7, #0]
    88c4:	str	r3, [sp, #4]
	return ret;
    88c6:	ldr	r3, [sp, #4]
		//Serial.write('.') ;
		uint32_t waited = millis() - wait_begin;
    88c8:	rsb	r3, r8, r3
#if 1
		if (waited > 15 && !reset) {
    88cc:	cmp	r3, #15
    88ce:	bls.n	88bc <TwoWire::wait_idle()+0x1c>
    88d0:	cbz	r1, 88e6 <TwoWire::wait_idle()+0x46>
			*reg = mux|PORT_PCR_ODE|PORT_PCR_SRE|PORT_PCR_DSE;
			delayMicroseconds(10);
			continue;
		}
#endif
		if (waited > 16) {
    88d2:	cmp	r3, #16
    88d4:	beq.n	88bc <TwoWire::wait_idle()+0x1c>
			// bus stuck busy too long
			port().C1 = 0;
    88d6:	movs	r0, #0
    88d8:	strb	r0, [r2, #2]
	size_t write(int n) {
		return write((uint8_t)n);
	}
	using Print::write;
private:
	KINETIS_I2C_t& port() { return (*(KINETIS_I2C_t *) port_addr); }
    88da:	ldr	r3, [r6, #16]
			port().C1 = I2C_C1_IICEN;
    88dc:	movs	r2, #128	; 0x80
    88de:	strb	r2, [r3, #2]
			//return 4; // timeout waiting for bus
			return false;
		}
	}
	return true;
}
    88e0:	add	sp, #8
    88e2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		uint32_t waited = millis() - wait_begin;
#if 1
		if (waited > 15 && !reset) {
			reset = true;
			//Serial.println("attempt forced reset");
			uint8_t sda_pin = hardware.sda_pin[sda_pin_index];
    88e6:	ldr	r2, [r6, #20]
    88e8:	ldrb.w	r3, [r6, #97]	; 0x61
    88ec:	add	r3, r2
			pinMode(sda_pin, INPUT_DISABLE);
    88ee:	movs	r1, #5
    88f0:	ldrb	r0, [r3, #8]
    88f2:	bl	d7a8 <pinMode>
			uint8_t scl_pin = hardware.scl_pin[sda_pin_index];
    88f6:	ldr	r2, [r6, #20]
    88f8:	ldrb.w	r3, [r6, #97]	; 0x61
    88fc:	add	r3, r2
			pinMode(scl_pin, OUTPUT);
    88fe:	movs	r1, #1
		if (waited > 15 && !reset) {
			reset = true;
			//Serial.println("attempt forced reset");
			uint8_t sda_pin = hardware.sda_pin[sda_pin_index];
			pinMode(sda_pin, INPUT_DISABLE);
			uint8_t scl_pin = hardware.scl_pin[sda_pin_index];
    8900:	ldrb.w	sl, [r3, #18]
			pinMode(scl_pin, OUTPUT);
    8904:	mov	r0, sl
    8906:	bl	d7a8 <pinMode>
    890a:	movs	r4, #9
			for (int i=0; i < 9; i++) {
				digitalWrite(scl_pin, LOW);
    890c:	movs	r1, #0
    890e:	mov	r0, sl
    8910:	bl	d79c <digitalWrite>
#else
		"subs   %0, #1"				"\n\t"
		"bne    L_%=_delayMicroseconds"		"\n"
		: "+r" (n) :
#endif
	);
    8914:	mov	r3, r5

00008916 <L_1480_delayMicroseconds>:
    8916:	subs	r3, #1
    8918:	bne.n	8916 <L_1480_delayMicroseconds>
				delayMicroseconds(5);
				digitalWrite(scl_pin, HIGH);
    891a:	movs	r1, #1
    891c:	mov	r0, sl
    891e:	bl	d79c <digitalWrite>
    8922:	mov	r3, r5

00008924 <L_1494_delayMicroseconds>:
    8924:	subs	r3, #1
    8926:	bne.n	8924 <L_1494_delayMicroseconds>
			//Serial.println("attempt forced reset");
			uint8_t sda_pin = hardware.sda_pin[sda_pin_index];
			pinMode(sda_pin, INPUT_DISABLE);
			uint8_t scl_pin = hardware.scl_pin[sda_pin_index];
			pinMode(scl_pin, OUTPUT);
			for (int i=0; i < 9; i++) {
    8928:	subs	r4, #1
    892a:	bne.n	890c <TwoWire::wait_idle()+0x6c>
				digitalWrite(scl_pin, HIGH);
				delayMicroseconds(5);
			}
			uint32_t mux;
			volatile uint32_t *reg;
			reg = portConfigRegister(hardware.sda_pin[sda_pin_index]);
    892c:	ldr	r0, [r6, #20]
    892e:	ldrb.w	r1, [r6, #97]	; 0x61
    8932:	add	r1, r0
    8934:	mov.w	r2, #320	; 0x140
    8938:	ldrb	r4, [r1, #8]
			mux = PORT_PCR_MUX(hardware.sda_mux[sda_pin_index]);
			*reg = mux|PORT_PCR_ODE|PORT_PCR_SRE|PORT_PCR_DSE;
    893a:	ldrb	r3, [r1, #13]
				digitalWrite(scl_pin, HIGH);
				delayMicroseconds(5);
			}
			uint32_t mux;
			volatile uint32_t *reg;
			reg = portConfigRegister(hardware.sda_pin[sda_pin_index]);
    893c:	add.w	r1, r9, r4, lsl #3
			mux = PORT_PCR_MUX(hardware.sda_mux[sda_pin_index]);
			*reg = mux|PORT_PCR_ODE|PORT_PCR_SRE|PORT_PCR_DSE;
    8940:	lsls	r3, r3, #8
				digitalWrite(scl_pin, HIGH);
				delayMicroseconds(5);
			}
			uint32_t mux;
			volatile uint32_t *reg;
			reg = portConfigRegister(hardware.sda_pin[sda_pin_index]);
    8942:	ldr	r1, [r1, #4]
			mux = PORT_PCR_MUX(hardware.sda_mux[sda_pin_index]);
			*reg = mux|PORT_PCR_ODE|PORT_PCR_SRE|PORT_PCR_DSE;
    8944:	and.w	r3, r3, #1792	; 0x700
    8948:	orr.w	r3, r3, #100	; 0x64
    894c:	str	r3, [r1, #0]
			reg = portConfigRegister(hardware.scl_pin[scl_pin_index]);
    894e:	ldrb.w	r3, [r6, #98]	; 0x62
    8952:	add	r3, r0
    8954:	ldrb	r1, [r3, #18]
			mux = PORT_PCR_MUX(hardware.scl_mux[scl_pin_index]);
			*reg = mux|PORT_PCR_ODE|PORT_PCR_SRE|PORT_PCR_DSE;
    8956:	ldrb	r3, [r3, #23]
			uint32_t mux;
			volatile uint32_t *reg;
			reg = portConfigRegister(hardware.sda_pin[sda_pin_index]);
			mux = PORT_PCR_MUX(hardware.sda_mux[sda_pin_index]);
			*reg = mux|PORT_PCR_ODE|PORT_PCR_SRE|PORT_PCR_DSE;
			reg = portConfigRegister(hardware.scl_pin[scl_pin_index]);
    8958:	add.w	r1, r9, r1, lsl #3
			mux = PORT_PCR_MUX(hardware.scl_mux[scl_pin_index]);
			*reg = mux|PORT_PCR_ODE|PORT_PCR_SRE|PORT_PCR_DSE;
    895c:	lsls	r3, r3, #8
			uint32_t mux;
			volatile uint32_t *reg;
			reg = portConfigRegister(hardware.sda_pin[sda_pin_index]);
			mux = PORT_PCR_MUX(hardware.sda_mux[sda_pin_index]);
			*reg = mux|PORT_PCR_ODE|PORT_PCR_SRE|PORT_PCR_DSE;
			reg = portConfigRegister(hardware.scl_pin[scl_pin_index]);
    895e:	ldr	r1, [r1, #4]
			mux = PORT_PCR_MUX(hardware.scl_mux[scl_pin_index]);
			*reg = mux|PORT_PCR_ODE|PORT_PCR_SRE|PORT_PCR_DSE;
    8960:	and.w	r3, r3, #1792	; 0x700
    8964:	orr.w	r3, r3, #100	; 0x64
    8968:	str	r3, [r1, #0]

0000896a <L_1545_delayMicroseconds>:
    896a:	subs	r2, #1
    896c:	bne.n	896a <L_1545_delayMicroseconds>
    896e:	ldr	r2, [r6, #16]
	uint8_t i2c_status(void) {
		return port().S;
    8970:	ldrb	r3, [r2, #3]
{
	bool reset=false;
	uint32_t wait_begin = millis();

	//Serial.print("busy:");
	while (i2c_status() & I2C_S_BUSY) {
    8972:	lsls	r3, r3, #26
		//Serial.write('.') ;
		uint32_t waited = millis() - wait_begin;
#if 1
		if (waited > 15 && !reset) {
			reset = true;
    8974:	mov.w	r1, #1
{
	bool reset=false;
	uint32_t wait_begin = millis();

	//Serial.print("busy:");
	while (i2c_status() & I2C_S_BUSY) {
    8978:	bmi.n	88c2 <TwoWire::wait_idle()+0x22>
			//Serial.println("abort");
			//return 4; // timeout waiting for bus
			return false;
		}
	}
	return true;
    897a:	movs	r0, #1
}
    897c:	add	sp, #8
    897e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    8982:	nop
    8984:	.word	0x200030a4
    8988:	.word	0x00014758

0000898c <TwoWire::endTransmission(unsigned char)>:

uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
    898c:	push	{r4, r5, r6, r7, lr}
	size_t write(int n) {
		return write((uint8_t)n);
	}
	using Print::write;
private:
	KINETIS_I2C_t& port() { return (*(KINETIS_I2C_t *) port_addr); }
    898e:	ldr	r3, [r0, #16]
	uint8_t i, status, ret=0;
	uint32_t wait_begin;

	// clear the status flags
	port().S = I2C_S_IICIF | I2C_S_ARBL;
    8990:	movs	r2, #18
    8992:	strb	r2, [r3, #3]
    8994:	ldr	r2, [r0, #16]
	// now take control of the bus...
	if (port().C1 & I2C_C1_MST) {
    8996:	ldrb	r3, [r2, #2]
    8998:	and.w	r3, r3, #32
	}
	return true;
}

uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
    899c:	sub	sp, #20
    899e:	mov	r4, r0
    89a0:	mov	r5, r1
	uint32_t wait_begin;

	// clear the status flags
	port().S = I2C_S_IICIF | I2C_S_ARBL;
	// now take control of the bus...
	if (port().C1 & I2C_C1_MST) {
    89a2:	cmp	r3, #0
    89a4:	beq.n	8a64 <TwoWire::endTransmission(unsigned char)+0xd8>
		// we are already the bus master, so send a repeated start
		//Serial.print("rstart:");
		port().C1 = I2C_C1_IICEN | I2C_C1_MST | I2C_C1_RSTA | I2C_C1_TX;
    89a6:	movs	r3, #180	; 0xb4
    89a8:	strb	r3, [r2, #2]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    89aa:	ldr	r1, [pc, #240]	; (8a9c <TwoWire::endTransmission(unsigned char)+0x110>)
    89ac:	ldr	r2, [r4, #16]
    89ae:	ldr	r3, [r1, #0]
    89b0:	str	r3, [sp, #0]
	return ret;
    89b2:	ldr	r6, [sp, #0]
    89b4:	b.n	89c2 <TwoWire::endTransmission(unsigned char)+0x36>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    89b6:	ldr	r3, [r1, #0]
    89b8:	str	r3, [sp, #4]
	return ret;
    89ba:	ldr	r3, [sp, #4]
	wait_begin = millis();
	while (1) {
		status = i2c_status();
		if ((status & I2C_S_BUSY)) break;
		//Serial.write('*') ;
		if (millis() - wait_begin > 4) {
    89bc:	subs	r3, r3, r6
    89be:	cmp	r3, #4
    89c0:	bhi.n	8a48 <TwoWire::endTransmission(unsigned char)+0xbc>
	uint8_t i2c_status(void) {
		return port().S;
    89c2:	ldrb	r3, [r2, #3]
	}
	// wait until start condition establishes control of the bus
	wait_begin = millis();
	while (1) {
		status = i2c_status();
		if ((status & I2C_S_BUSY)) break;
    89c4:	and.w	r3, r3, #32
    89c8:	and.w	r0, r3, #255	; 0xff
    89cc:	cmp	r3, #0
    89ce:	beq.n	89b6 <TwoWire::endTransmission(unsigned char)+0x2a>
			//Serial.printf("endTransmission err2\n");
			return 4; // error generating start condition
		}
	}
	// transmit the address and data
	for (i=0; i < txBufferLength; i++) {
    89d0:	ldrb.w	r3, [r4, #93]	; 0x5d
    89d4:	cmp	r3, #0
    89d6:	beq.n	8a3c <TwoWire::endTransmission(unsigned char)+0xb0>
    89d8:	mov.w	lr, #0
				//Serial.println("abort3");
				//Serial.printf("endTransmission err3\n");
				return 4; // clock stretch too long
			}
		}
		port().S = I2C_S_IICIF;
    89dc:	mov.w	ip, #2
			return 4; // error generating start condition
		}
	}
	// transmit the address and data
	for (i=0; i < txBufferLength; i++) {
		port().D = txBuffer[i];
    89e0:	add.w	r3, r4, lr
    89e4:	ldrb.w	r3, [r3, #59]	; 0x3b
    89e8:	strb	r3, [r2, #4]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    89ea:	ldr	r3, [r1, #0]
    89ec:	str	r3, [sp, #12]
	return ret;
    89ee:	ldr	r7, [sp, #12]
    89f0:	ldr	r0, [r4, #16]
    89f2:	b.n	8a04 <TwoWire::endTransmission(unsigned char)+0x78>
		//Serial.write('^');
		wait_begin = millis();
		while (1) {
			status = i2c_status();
			if ((status & I2C_S_IICIF)) break;
			if (!(status & I2C_S_BUSY)) break;
    89f4:	lsls	r3, r3, #26
    89f6:	bpl.n	8a14 <TwoWire::endTransmission(unsigned char)+0x88>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    89f8:	ldr	r3, [r1, #0]
    89fa:	str	r3, [sp, #8]
	return ret;
    89fc:	ldr	r3, [sp, #8]
			if (millis() - wait_begin > 5) {
    89fe:	subs	r3, r3, r7
    8a00:	cmp	r3, #5
    8a02:	bhi.n	8a56 <TwoWire::endTransmission(unsigned char)+0xca>
    8a04:	ldrb	r3, [r0, #3]
    8a06:	uxtb	r3, r3
		port().D = txBuffer[i];
		//Serial.write('^');
		wait_begin = millis();
		while (1) {
			status = i2c_status();
			if ((status & I2C_S_IICIF)) break;
    8a08:	and.w	r2, r3, #2
    8a0c:	and.w	r6, r2, #255	; 0xff
    8a10:	cmp	r2, #0
    8a12:	beq.n	89f4 <TwoWire::endTransmission(unsigned char)+0x68>
				//Serial.println("abort3");
				//Serial.printf("endTransmission err3\n");
				return 4; // clock stretch too long
			}
		}
		port().S = I2C_S_IICIF;
    8a14:	strb.w	ip, [r0, #3]
    8a18:	ldr	r6, [r4, #16]
    8a1a:	ldrb	r3, [r6, #3]
    8a1c:	uxtb	r3, r3
		//Serial.write('$');
		status = i2c_status();
		if ((status & I2C_S_ARBL)) {
    8a1e:	lsls	r7, r3, #27
	size_t write(int n) {
		return write((uint8_t)n);
	}
	using Print::write;
private:
	KINETIS_I2C_t& port() { return (*(KINETIS_I2C_t *) port_addr); }
    8a20:	mov	r2, r6
    8a22:	bmi.n	8a80 <TwoWire::endTransmission(unsigned char)+0xf4>
			port().C1 = I2C_C1_IICEN;
			//Serial.printf("endTransmission err4\n");
			ret = 4; // 4:other error
			break;
		}
		if (!(status & I2C_S_BUSY)) {
    8a24:	lsls	r7, r3, #26
    8a26:	bpl.n	8a80 <TwoWire::endTransmission(unsigned char)+0xf4>
			port().C1 = I2C_C1_IICEN;
			//Serial.printf("endTransmission err5\n");
			ret = 4; // 4:other error
			break;
		}
		if (status & I2C_S_RXAK) {
    8a28:	lsls	r3, r3, #31
    8a2a:	bmi.n	8a90 <TwoWire::endTransmission(unsigned char)+0x104>
			//Serial.printf("endTransmission err2\n");
			return 4; // error generating start condition
		}
	}
	// transmit the address and data
	for (i=0; i < txBufferLength; i++) {
    8a2c:	add.w	lr, lr, #1
    8a30:	ldrb.w	r3, [r4, #93]	; 0x5d
    8a34:	uxtb.w	lr, lr
    8a38:	cmp	r3, lr
    8a3a:	bhi.n	89e0 <TwoWire::endTransmission(unsigned char)+0x54>
	return true;
}

uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	uint8_t i, status, ret=0;
    8a3c:	movs	r0, #0
			}
			sendStop = 1;
			break;
		}
	}
	if (sendStop) {
    8a3e:	cbnz	r5, 8a88 <TwoWire::endTransmission(unsigned char)+0xfc>
		// send the stop condition
		port().C1 = I2C_C1_IICEN;
		// TODO: do we wait for this somehow?
	}
	transmitting = 0;
    8a40:	movs	r3, #0
    8a42:	strb.w	r3, [r4, #94]	; 0x5e
    8a46:	b.n	8a52 <TwoWire::endTransmission(unsigned char)+0xc6>
	while (1) {
		status = i2c_status();
		if ((status & I2C_S_BUSY)) break;
		//Serial.write('*') ;
		if (millis() - wait_begin > 4) {
			port().C1 = 0;
    8a48:	strb	r0, [r2, #2]
    8a4a:	ldr	r3, [r4, #16]
			port().C1 = I2C_C1_IICEN;
    8a4c:	movs	r2, #128	; 0x80
    8a4e:	strb	r2, [r3, #2]
			//Serial.println("abort2");
			//Serial.printf("endTransmission err2\n");
			return 4; // error generating start condition
    8a50:	movs	r0, #4
	}
	transmitting = 0;
	//Serial.print(" ret=");
	//Serial.println(ret);
	return ret;
}
    8a52:	add	sp, #20
    8a54:	pop	{r4, r5, r6, r7, pc}
		while (1) {
			status = i2c_status();
			if ((status & I2C_S_IICIF)) break;
			if (!(status & I2C_S_BUSY)) break;
			if (millis() - wait_begin > 5) {
				port().C1 = 0;
    8a56:	strb	r6, [r0, #2]
    8a58:	ldr	r3, [r4, #16]
				port().C1 = I2C_C1_IICEN;
    8a5a:	movs	r2, #128	; 0x80
				//Serial.println("abort3");
				//Serial.printf("endTransmission err3\n");
				return 4; // clock stretch too long
    8a5c:	movs	r0, #4
			status = i2c_status();
			if ((status & I2C_S_IICIF)) break;
			if (!(status & I2C_S_BUSY)) break;
			if (millis() - wait_begin > 5) {
				port().C1 = 0;
				port().C1 = I2C_C1_IICEN;
    8a5e:	strb	r2, [r3, #2]
	}
	transmitting = 0;
	//Serial.print(" ret=");
	//Serial.println(ret);
	return ret;
}
    8a60:	add	sp, #20
    8a62:	pop	{r4, r5, r6, r7, pc}
    8a64:	and.w	r6, r3, #255	; 0xff
		// we are already the bus master, so send a repeated start
		//Serial.print("rstart:");
		port().C1 = I2C_C1_IICEN | I2C_C1_MST | I2C_C1_RSTA | I2C_C1_TX;
	} else {
		// we are not currently the bus master, so wait for bus ready
		if (!wait_idle()) {
    8a68:	bl	88a0 <TwoWire::wait_idle()>
    8a6c:	cbnz	r0, 8a74 <TwoWire::endTransmission(unsigned char)+0xe8>
			//Serial.printf("endTransmission err1\n");
			return 4; // timeout waiting for bus
    8a6e:	movs	r0, #4
	}
	transmitting = 0;
	//Serial.print(" ret=");
	//Serial.println(ret);
	return ret;
}
    8a70:	add	sp, #20
    8a72:	pop	{r4, r5, r6, r7, pc}
    8a74:	ldr	r3, [r4, #16]
		if (!wait_idle()) {
			//Serial.printf("endTransmission err1\n");
			return 4; // timeout waiting for bus
		}
		// become the bus master in transmit mode (send start)
		slave_mode = 0;
    8a76:	strb.w	r6, [r4, #95]	; 0x5f
		port().C1 = I2C_C1_IICEN | I2C_C1_MST | I2C_C1_TX;
    8a7a:	movs	r2, #176	; 0xb0
    8a7c:	strb	r2, [r3, #2]
    8a7e:	b.n	89aa <TwoWire::endTransmission(unsigned char)+0x1e>
			ret = 4; // 4:other error
			break;
		}
		if (!(status & I2C_S_BUSY)) {
			// suddenly lost control of the bus!
			port().C1 = I2C_C1_IICEN;
    8a80:	movs	r3, #128	; 0x80
    8a82:	strb	r3, [r6, #2]
			//Serial.printf("endTransmission err5\n");
			ret = 4; // 4:other error
    8a84:	movs	r0, #4
    8a86:	b.n	8a3e <TwoWire::endTransmission(unsigned char)+0xb2>
    8a88:	ldr	r6, [r4, #16]
			break;
		}
	}
	if (sendStop) {
		// send the stop condition
		port().C1 = I2C_C1_IICEN;
    8a8a:	movs	r3, #128	; 0x80
    8a8c:	strb	r3, [r6, #2]
    8a8e:	b.n	8a40 <TwoWire::endTransmission(unsigned char)+0xb4>
			if (i == 0) {
				//Serial.printf("endTransmission err6\n");
				ret = 2; // 2:received NACK on transmit of address
			} else {
				//Serial.printf("endTransmission err7\n");
				ret = 3; // 3:received NACK on transmit of data 
    8a90:	cmp.w	lr, #0
    8a94:	ite	eq
    8a96:	moveq	r0, #2
    8a98:	movne	r0, #3
    8a9a:	b.n	8a8a <TwoWire::endTransmission(unsigned char)+0xfe>
    8a9c:	.word	0x200030a4

00008aa0 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)>:
	return ret;
}


uint8_t TwoWire::requestFrom(uint8_t address, uint8_t length, uint8_t sendStop)
{
    8aa0:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8aa4:	ldr	r6, [r0, #16]
	uint8_t tmp __attribute__((unused));
	uint8_t status, count=0;
	uint32_t wait_begin;

	rxBufferIndex = 0;
    8aa6:	movs	r5, #0
	rxBufferLength = 0;
	//serial_print("requestFrom\n");
	// clear the status flags
	port().S = I2C_S_IICIF | I2C_S_ARBL;
    8aa8:	movs	r7, #18
{
	uint8_t tmp __attribute__((unused));
	uint8_t status, count=0;
	uint32_t wait_begin;

	rxBufferIndex = 0;
    8aaa:	strb.w	r5, [r0, #56]	; 0x38
	rxBufferLength = 0;
    8aae:	strb.w	r5, [r0, #57]	; 0x39
	//serial_print("requestFrom\n");
	// clear the status flags
	port().S = I2C_S_IICIF | I2C_S_ARBL;
    8ab2:	strb	r7, [r6, #3]
    8ab4:	ldr.w	ip, [r0, #16]
	// now take control of the bus...
	if (port().C1 & I2C_C1_MST) {
    8ab8:	ldrb.w	lr, [ip, #2]
    8abc:	and.w	lr, lr, #32
	return ret;
}


uint8_t TwoWire::requestFrom(uint8_t address, uint8_t length, uint8_t sendStop)
{
    8ac0:	sub	sp, #32
    8ac2:	mov	r4, r0
    8ac4:	mov	r8, r1
    8ac6:	mov	r5, r2
    8ac8:	mov	r6, r3
	rxBufferLength = 0;
	//serial_print("requestFrom\n");
	// clear the status flags
	port().S = I2C_S_IICIF | I2C_S_ARBL;
	// now take control of the bus...
	if (port().C1 & I2C_C1_MST) {
    8aca:	cmp.w	lr, #0
    8ace:	beq.n	8b64 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xc4>
		// we are already the bus master, so send a repeated start
		port().C1 = I2C_C1_IICEN | I2C_C1_MST | I2C_C1_RSTA | I2C_C1_TX;
    8ad0:	movs	r3, #180	; 0xb4
    8ad2:	strb.w	r3, [ip, #2]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    8ad6:	ldr	r3, [pc, #480]	; (8cb8 <L_3073_delayMicroseconds+0x1a>)
    8ad8:	ldr	r1, [r4, #16]
    8ada:	ldr	r2, [r3, #0]
    8adc:	str	r2, [sp, #0]
	return ret;
    8ade:	ldr.w	lr, [sp]
    8ae2:	b.n	8af2 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x52>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    8ae4:	ldr	r2, [r3, #0]
    8ae6:	str	r2, [sp, #4]
	return ret;
    8ae8:	ldr	r0, [sp, #4]
	// wait until start condition establishes control of the bus
	wait_begin = millis();
	while (1) {
		status = i2c_status();
		if ((status & I2C_S_BUSY)) break;
		if (millis() - wait_begin > 4) {
    8aea:	rsb	r0, lr, r0
    8aee:	cmp	r0, #4
    8af0:	bhi.n	8b54 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xb4>
	uint8_t i2c_status(void) {
		return port().S;
    8af2:	ldrb	r0, [r1, #3]
    8af4:	and.w	r0, r0, #32

	// wait until start condition establishes control of the bus
	wait_begin = millis();
	while (1) {
		status = i2c_status();
		if ((status & I2C_S_BUSY)) break;
    8af8:	and.w	r7, r0, #255	; 0xff
    8afc:	cmp	r0, #0
    8afe:	beq.n	8ae4 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x44>
			//Serial.printf("requestFrom err2\n");
			return 0; // error generating start condition
		}
	}
	// send the address
	port().D = (address << 1) | 1;
    8b00:	mov.w	r2, r8, lsl #1
    8b04:	orr.w	r2, r2, #1
    8b08:	uxtb	r2, r2
    8b0a:	strb	r2, [r1, #4]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    8b0c:	ldr	r2, [r3, #0]
    8b0e:	str	r2, [sp, #8]
	return ret;
    8b10:	ldr.w	lr, [sp, #8]
    8b14:	ldr	r0, [r4, #16]
    8b16:	b.n	8b26 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x86>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    8b18:	ldr	r2, [r3, #0]
    8b1a:	str	r2, [sp, #12]
	return ret;
    8b1c:	ldr	r1, [sp, #12]
	wait_begin = millis();
	while (!(port().S & I2C_S_IICIF)) {
		if (millis() - wait_begin > 5) {
    8b1e:	rsb	r1, lr, r1
    8b22:	cmp	r1, #5
    8b24:	bhi.n	8b7c <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xdc>
		}
	}
	// send the address
	port().D = (address << 1) | 1;
	wait_begin = millis();
	while (!(port().S & I2C_S_IICIF)) {
    8b26:	ldrb	r1, [r0, #3]
    8b28:	and.w	r1, r1, #2
    8b2c:	and.w	r7, r1, #255	; 0xff
    8b30:	cmp	r1, #0
    8b32:	beq.n	8b18 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x78>
			port().C1 = I2C_C1_IICEN;
			//Serial.printf("requestFrom err3\n");
			return 0; // clock stretch too long (during address)
		}
	}
	port().S = I2C_S_IICIF;
    8b34:	mov.w	ip, #2
    8b38:	strb.w	ip, [r0, #3]
	size_t write(int n) {
		return write((uint8_t)n);
	}
	using Print::write;
private:
	KINETIS_I2C_t& port() { return (*(KINETIS_I2C_t *) port_addr); }
    8b3c:	ldr	r2, [r4, #16]
	uint8_t i2c_status(void) {
		return port().S;
    8b3e:	ldrb	r1, [r2, #3]
	status = i2c_status();
	if ((status & I2C_S_RXAK) || (status & I2C_S_ARBL)) {
    8b40:	ands.w	r7, r1, #17
    8b44:	bne.n	8b8c <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xec>
		// or we lost bus arbitration to another master
		port().C1 = I2C_C1_IICEN;
		//Serial.printf("requestFrom err4\n");
		return 0;
	}
	if (length == 0) {
    8b46:	cbnz	r5, 8b94 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xf4>
		// TODO: does anybody really do zero length reads?
		// if so, does this code really work?
		port().C1 = I2C_C1_IICEN | (sendStop ? 0 : I2C_C1_MST);
    8b48:	cmp	r6, #0
    8b4a:	ite	eq
    8b4c:	moveq	r3, #160	; 0xa0
    8b4e:	movne	r3, #128	; 0x80
    8b50:	strb	r3, [r2, #2]
		//Serial.printf("requestFrom err5\n");
		return 0;
    8b52:	b.n	8b5c <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xbc>
	wait_begin = millis();
	while (1) {
		status = i2c_status();
		if ((status & I2C_S_BUSY)) break;
		if (millis() - wait_begin > 4) {
			port().C1 = 0;
    8b54:	strb	r7, [r1, #2]
	size_t write(int n) {
		return write((uint8_t)n);
	}
	using Print::write;
private:
	KINETIS_I2C_t& port() { return (*(KINETIS_I2C_t *) port_addr); }
    8b56:	ldr	r3, [r4, #16]
			port().C1 = I2C_C1_IICEN;
    8b58:	movs	r2, #128	; 0x80
    8b5a:	strb	r2, [r3, #2]
	__asm__("nop");
#endif
	if (sendStop) port().C1 = I2C_C1_IICEN;
	rxBufferLength = count;
	return count;
}
    8b5c:	mov	r0, r7
    8b5e:	add	sp, #32
    8b60:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8b64:	and.w	r7, lr, #255	; 0xff
	if (port().C1 & I2C_C1_MST) {
		// we are already the bus master, so send a repeated start
		port().C1 = I2C_C1_IICEN | I2C_C1_MST | I2C_C1_RSTA | I2C_C1_TX;
	} else {
		// we are not currently the bus master, so wait for bus ready
		if (!wait_idle()) {
    8b68:	bl	88a0 <TwoWire::wait_idle()>
    8b6c:	cmp	r0, #0
    8b6e:	beq.n	8b5c <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xbc>
    8b70:	ldr	r3, [r4, #16]
			//Serial.printf("requestFrom err1\n");
			return 0; // timeout waiting for bus
		}
		// become the bus master in transmit mode (send start)
		slave_mode = 0;
    8b72:	strb.w	r7, [r4, #95]	; 0x5f
		port().C1 = I2C_C1_IICEN | I2C_C1_MST | I2C_C1_TX;
    8b76:	movs	r2, #176	; 0xb0
    8b78:	strb	r2, [r3, #2]
    8b7a:	b.n	8ad6 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x36>
	// send the address
	port().D = (address << 1) | 1;
	wait_begin = millis();
	while (!(port().S & I2C_S_IICIF)) {
		if (millis() - wait_begin > 5) {
			port().C1 = 0;
    8b7c:	strb	r7, [r0, #2]
    8b7e:	ldr	r3, [r4, #16]
			port().C1 = I2C_C1_IICEN;
    8b80:	movs	r2, #128	; 0x80
	__asm__("nop");
#endif
	if (sendStop) port().C1 = I2C_C1_IICEN;
	rxBufferLength = count;
	return count;
}
    8b82:	mov	r0, r7
	port().D = (address << 1) | 1;
	wait_begin = millis();
	while (!(port().S & I2C_S_IICIF)) {
		if (millis() - wait_begin > 5) {
			port().C1 = 0;
			port().C1 = I2C_C1_IICEN;
    8b84:	strb	r2, [r3, #2]
	__asm__("nop");
#endif
	if (sendStop) port().C1 = I2C_C1_IICEN;
	rxBufferLength = count;
	return count;
}
    8b86:	add	sp, #32
    8b88:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	port().S = I2C_S_IICIF;
	status = i2c_status();
	if ((status & I2C_S_RXAK) || (status & I2C_S_ARBL)) {
		// the slave device did not acknowledge
		// or we lost bus arbitration to another master
		port().C1 = I2C_C1_IICEN;
    8b8c:	movs	r3, #128	; 0x80
    8b8e:	strb	r3, [r2, #2]
		//Serial.printf("requestFrom err4\n");
		return 0;
    8b90:	movs	r7, #0
    8b92:	b.n	8b5c <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xbc>
		// TODO: does anybody really do zero length reads?
		// if so, does this code really work?
		port().C1 = I2C_C1_IICEN | (sendStop ? 0 : I2C_C1_MST);
		//Serial.printf("requestFrom err5\n");
		return 0;
	} else if (length == 1) {
    8b94:	cmp	r5, #1
    8b96:	beq.n	8c84 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x1e4>
		port().C1 = I2C_C1_IICEN | I2C_C1_MST | I2C_C1_TXAK;
	} else {
		port().C1 = I2C_C1_IICEN | I2C_C1_MST;
    8b98:	movs	r1, #160	; 0xa0
    8b9a:	strb	r1, [r2, #2]
    8b9c:	ldr	r1, [r4, #16]
	}
	tmp = port().D; // initiate the first receive
    8b9e:	ldrb	r2, [r1, #4]
    8ba0:	mov	lr, r7
				rxBufferLength = count;
				//Serial.printf("requestFrom err6\n");
				return count; // clock stretch too long (during data)
			}
		}
		port().S = I2C_S_IICIF;
    8ba2:	mov	r7, ip
			// TODO: what is the proper thing to do here??
			//Serial.printf("requestFrom err7b\n");
			return count;
		}
		length--;
		if (length == 1) port().C1 = I2C_C1_IICEN | I2C_C1_MST | I2C_C1_TXAK;
    8ba4:	mov.w	ip, #168	; 0xa8
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    8ba8:	ldr	r2, [r3, #0]
    8baa:	str	r2, [sp, #16]
	return ret;
    8bac:	ldr	r0, [sp, #16]
    8bae:	b.n	8bbc <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x11c>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    8bb0:	ldr	r2, [r3, #0]
    8bb2:	str	r2, [sp, #20]
	return ret;
    8bb4:	ldr	r2, [sp, #20]
	tmp = port().D; // initiate the first receive
	//delayMicroseconds(250);
	while (length > 1) {
		wait_begin = millis();
		while (!(port().S & I2C_S_IICIF)) {
			if (millis() - wait_begin > 5) {
    8bb6:	subs	r2, r2, r0
    8bb8:	cmp	r2, #5
    8bba:	bhi.n	8c52 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x1b2>
	}
	tmp = port().D; // initiate the first receive
	//delayMicroseconds(250);
	while (length > 1) {
		wait_begin = millis();
		while (!(port().S & I2C_S_IICIF)) {
    8bbc:	ldrb	r2, [r1, #3]
    8bbe:	and.w	r2, r2, #2
    8bc2:	and.w	r8, r2, #255	; 0xff
    8bc6:	cmp	r2, #0
    8bc8:	beq.n	8bb0 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x110>
				rxBufferLength = count;
				//Serial.printf("requestFrom err6\n");
				return count; // clock stretch too long (during data)
			}
		}
		port().S = I2C_S_IICIF;
    8bca:	strb	r7, [r1, #3]
    8bcc:	ldr	r1, [r4, #16]
		status = port().S;
    8bce:	ldrb	r2, [r1, #3]
    8bd0:	uxtb	r2, r2
		if ((status & I2C_S_ARBL)) {
    8bd2:	tst.w	r2, #16
    8bd6:	mov	r0, r1
    8bd8:	bne.n	8c90 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x1f0>
			// or suddenly lost control of the bus!
			// TODO: what is the proper thing to do here??
			//Serial.printf("requestFrom err7a\n");
			return count;
		}
		if (!(status & I2C_S_BUSY)) {
    8bda:	lsls	r2, r2, #26
    8bdc:	bpl.n	8c90 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x1f0>
			// or suddenly lost control of the bus!
			// TODO: what is the proper thing to do here??
			//Serial.printf("requestFrom err7b\n");
			return count;
		}
		length--;
    8bde:	subs	r5, #1
    8be0:	uxtb	r5, r5
		if (length == 1) port().C1 = I2C_C1_IICEN | I2C_C1_MST | I2C_C1_TXAK;
    8be2:	cmp	r5, #1
    8be4:	beq.n	8c7a <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x1da>
		if (count < BUFFER_LENGTH) {
    8be6:	cmp.w	lr, #31
    8bea:	bls.n	8c64 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x1c4>
			rxBuffer[count++] = port().D;
		} else {
			tmp = port().D;
    8bec:	ldrb	r2, [r1, #4]
	} else {
		port().C1 = I2C_C1_IICEN | I2C_C1_MST;
	}
	tmp = port().D; // initiate the first receive
	//delayMicroseconds(250);
	while (length > 1) {
    8bee:	cmp	r5, #1
    8bf0:	bne.n	8ba8 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x108>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    8bf2:	ldr	r2, [r3, #0]
    8bf4:	str	r2, [sp, #24]
	return ret;
    8bf6:	ldr	r5, [sp, #24]
    8bf8:	b.n	8c06 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x166>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    8bfa:	ldr	r2, [r3, #0]
    8bfc:	str	r2, [sp, #28]
	return ret;
    8bfe:	ldr	r2, [sp, #28]
			tmp = port().D;
		}
	}
	wait_begin = millis();
	while (!(port().S & I2C_S_IICIF)) {
		if (millis() - wait_begin > 5) {
    8c00:	subs	r2, r2, r5
    8c02:	cmp	r2, #5
    8c04:	bhi.n	8c94 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x1f4>
		} else {
			tmp = port().D;
		}
	}
	wait_begin = millis();
	while (!(port().S & I2C_S_IICIF)) {
    8c06:	ldrb	r2, [r0, #3]
    8c08:	and.w	r2, r2, #2
    8c0c:	and.w	r1, r2, #255	; 0xff
    8c10:	cmp	r2, #0
    8c12:	beq.n	8bfa <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x15a>
			rxBufferLength = count;
			//Serial.printf("requestFrom err8\n");
			return count; // clock stretch too long (during data)
		}
	}
	port().S = I2C_S_IICIF;
    8c14:	movs	r3, #2
    8c16:	strb	r3, [r0, #3]
    8c18:	ldr	r2, [r4, #16]
	status = port().S;
    8c1a:	ldrb	r3, [r2, #3]
    8c1c:	uxtb	r3, r3
	if ((status & I2C_S_ARBL)) {
    8c1e:	lsls	r1, r3, #27
    8c20:	bmi.n	8c98 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x1f8>
		delayMicroseconds(5);
		port().C1 &= ~I2C_C1_TXAK;
		//Serial.printf("requestFrom err9a\n");
		return count;
	}
	if (!(status & I2C_S_BUSY)) {
    8c22:	lsls	r3, r3, #26
    8c24:	bpl.n	8c90 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x1f0>
		// or suddenly lost control of the bus!
		// TODO: what is the proper thing to do here??
		//Serial.printf("requestFrom err9b\n");
		return count;
	}
	port().C1 = I2C_C1_IICEN | I2C_C1_MST | I2C_C1_TX;
    8c26:	movs	r3, #176	; 0xb0
	if (count < BUFFER_LENGTH) {
    8c28:	cmp.w	lr, #31
		// or suddenly lost control of the bus!
		// TODO: what is the proper thing to do here??
		//Serial.printf("requestFrom err9b\n");
		return count;
	}
	port().C1 = I2C_C1_IICEN | I2C_C1_MST | I2C_C1_TX;
    8c2c:	strb	r3, [r2, #2]
	if (count < BUFFER_LENGTH) {
    8c2e:	bhi.n	8cb0 <L_3073_delayMicroseconds+0x12>
    8c30:	ldr	r2, [r4, #16]
		rxBuffer[count++] = port().D;
    8c32:	add.w	r3, r4, lr
    8c36:	ldrb	r2, [r2, #4]
    8c38:	strb	r2, [r3, #24]
    8c3a:	add.w	lr, lr, #1
    8c3e:	uxtb.w	lr, lr
#if F_CPU > 120000000
	__asm__("nop");
	__asm__("nop");
	__asm__("nop");
#endif
	if (sendStop) port().C1 = I2C_C1_IICEN;
    8c42:	cbz	r6, 8c4a <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x1aa>
    8c44:	ldr	r3, [r4, #16]
    8c46:	movs	r2, #128	; 0x80
    8c48:	strb	r2, [r3, #2]
	rxBufferLength = count;
    8c4a:	strb.w	lr, [r4, #57]	; 0x39
	return count;
    8c4e:	mov	r7, lr
    8c50:	b.n	8b5c <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xbc>
	//delayMicroseconds(250);
	while (length > 1) {
		wait_begin = millis();
		while (!(port().S & I2C_S_IICIF)) {
			if (millis() - wait_begin > 5) {
				port().C1 = 0;
    8c52:	strb.w	r8, [r1, #2]
    8c56:	ldr	r3, [r4, #16]
	}
	wait_begin = millis();
	while (!(port().S & I2C_S_IICIF)) {
		if (millis() - wait_begin > 5) {
			port().C1 = 0;
			port().C1 = I2C_C1_IICEN;
    8c58:	movs	r2, #128	; 0x80
    8c5a:	strb	r2, [r3, #2]
			rxBufferLength = count;
			//Serial.printf("requestFrom err8\n");
			return count; // clock stretch too long (during data)
    8c5c:	mov	r7, lr
	wait_begin = millis();
	while (!(port().S & I2C_S_IICIF)) {
		if (millis() - wait_begin > 5) {
			port().C1 = 0;
			port().C1 = I2C_C1_IICEN;
			rxBufferLength = count;
    8c5e:	strb.w	lr, [r4, #57]	; 0x39
			//Serial.printf("requestFrom err8\n");
			return count; // clock stretch too long (during data)
    8c62:	b.n	8b5c <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xbc>
			return count;
		}
		length--;
		if (length == 1) port().C1 = I2C_C1_IICEN | I2C_C1_MST | I2C_C1_TXAK;
		if (count < BUFFER_LENGTH) {
			rxBuffer[count++] = port().D;
    8c64:	add.w	r2, r4, lr
    8c68:	ldrb.w	r8, [r1, #4]
    8c6c:	strb.w	r8, [r2, #24]
    8c70:	add.w	lr, lr, #1
    8c74:	uxtb.w	lr, lr
    8c78:	b.n	8bee <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x14e>
			// TODO: what is the proper thing to do here??
			//Serial.printf("requestFrom err7b\n");
			return count;
		}
		length--;
		if (length == 1) port().C1 = I2C_C1_IICEN | I2C_C1_MST | I2C_C1_TXAK;
    8c7a:	strb.w	ip, [r1, #2]
    8c7e:	ldr	r1, [r4, #16]
    8c80:	mov	r0, r1
    8c82:	b.n	8be6 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x146>
		// if so, does this code really work?
		port().C1 = I2C_C1_IICEN | (sendStop ? 0 : I2C_C1_MST);
		//Serial.printf("requestFrom err5\n");
		return 0;
	} else if (length == 1) {
		port().C1 = I2C_C1_IICEN | I2C_C1_MST | I2C_C1_TXAK;
    8c84:	movs	r1, #168	; 0xa8
    8c86:	strb	r1, [r2, #2]
    8c88:	ldr	r0, [r4, #16]


uint8_t TwoWire::requestFrom(uint8_t address, uint8_t length, uint8_t sendStop)
{
	uint8_t tmp __attribute__((unused));
	uint8_t status, count=0;
    8c8a:	mov	lr, r7
	} else if (length == 1) {
		port().C1 = I2C_C1_IICEN | I2C_C1_MST | I2C_C1_TXAK;
	} else {
		port().C1 = I2C_C1_IICEN | I2C_C1_MST;
	}
	tmp = port().D; // initiate the first receive
    8c8c:	ldrb	r2, [r0, #4]
    8c8e:	b.n	8bf2 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x152>
    8c90:	mov	r7, lr
    8c92:	b.n	8b5c <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xbc>
		}
	}
	wait_begin = millis();
	while (!(port().S & I2C_S_IICIF)) {
		if (millis() - wait_begin > 5) {
			port().C1 = 0;
    8c94:	strb	r1, [r0, #2]
    8c96:	b.n	8c56 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x1b6>
	if ((status & I2C_S_ARBL)) {
		// we lost bus arbitration to another master
		// or suddenly lost control of the bus!
		// TODO: what is the proper thing to do here??
		//digitalWriteFast(13, HIGH);
		port().S = I2C_S_ARBL;
    8c98:	movs	r1, #16
#else
		"subs   %0, #1"				"\n\t"
		"bne    L_%=_delayMicroseconds"		"\n"
		: "+r" (n) :
#endif
	);
    8c9a:	movs	r3, #160	; 0xa0
    8c9c:	strb	r1, [r2, #3]

00008c9e <L_3073_delayMicroseconds>:
    8c9e:	subs	r3, #1
    8ca0:	bne.n	8c9e <L_3073_delayMicroseconds>
    8ca2:	ldr	r2, [r4, #16]
		delayMicroseconds(5);
		port().C1 &= ~I2C_C1_TXAK;
    8ca4:	ldrb	r3, [r2, #2]
    8ca6:	and.w	r3, r3, #247	; 0xf7
		//Serial.printf("requestFrom err9a\n");
		return count;
    8caa:	mov	r7, lr
		// or suddenly lost control of the bus!
		// TODO: what is the proper thing to do here??
		//digitalWriteFast(13, HIGH);
		port().S = I2C_S_ARBL;
		delayMicroseconds(5);
		port().C1 &= ~I2C_C1_TXAK;
    8cac:	strb	r3, [r2, #2]
		//Serial.printf("requestFrom err9a\n");
		return count;
    8cae:	b.n	8b5c <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xbc>
    8cb0:	ldr	r3, [r4, #16]
	}
	port().C1 = I2C_C1_IICEN | I2C_C1_MST | I2C_C1_TX;
	if (count < BUFFER_LENGTH) {
		rxBuffer[count++] = port().D;
	} else {
		tmp = port().D;
    8cb2:	ldrb	r3, [r3, #4]
    8cb4:	b.n	8c42 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x1a2>
    8cb6:	nop
    8cb8:	.word	0x200030a4

00008cbc <i2c0_isr>:
#define MAKE_CONST(x) (__builtin_constant_p(x) ? (x) : (x))

#ifdef WIRE_IMPLEMENT_WIRE
constexpr uintptr_t i2c0_addr = uintptr_t(MAKE_CONST(&KINETIS_I2C0));
TwoWire Wire(i2c0_addr, TwoWire::i2c0_hardware);
void i2c0_isr(void) { Wire.isr(); }
    8cbc:	ldr	r0, [pc, #4]	; (8cc4 <i2c0_isr+0x8>)
    8cbe:	b.w	8700 <TwoWire::isr()>
    8cc2:	nop
    8cc4:	.word	0x1fff8a9c

00008cc8 <i2c1_isr>:
#endif
#ifdef WIRE_IMPLEMENT_WIRE1
constexpr uintptr_t i2c1_addr = uintptr_t(MAKE_CONST(&KINETIS_I2C1));
TwoWire Wire1(i2c1_addr, TwoWire::i2c1_hardware);
void i2c1_isr(void) { Wire1.isr(); }
    8cc8:	ldr	r0, [pc, #4]	; (8cd0 <i2c1_isr+0x8>)
    8cca:	b.w	8700 <TwoWire::isr()>
    8cce:	nop
    8cd0:	.word	0x1fff8b08

00008cd4 <FsCache::sync() [clone .part.0]>:

 fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FsCache::sync() {
    8cd4:	push	{r4, r5, r6, lr}
    8cd6:	mov	r4, r0
  if (m_status & CACHE_STATUS_DIRTY) {
    if (!m_blockDev->writeSector(m_sector, m_buffer)) {
    8cd8:	add.w	r6, r0, #16
    8cdc:	ldr	r0, [r0, #4]
    8cde:	ldr	r1, [r4, #12]
   * \param[in] sector Logical sector to be written.
   * \param[in] src Pointer to the location of the data to be written.
   * \return true for success or false for failure.
   */
  bool writeSector(uint32_t sector, const uint8_t* src) {
    if (m_sharedSpi) {
    8ce0:	ldrb	r3, [r0, #13]
    8ce2:	cbnz	r3, 8d06 <FsCache::sync() [clone .part.0]+0x32>
      return writeSingle(sector, src);
    } else {
      return writeSectors(sector, src, 1);
    8ce4:	movs	r3, #1
    8ce6:	mov	r2, r6
    8ce8:	bl	c8bc <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)>
    8cec:	mov	r5, r0
    8cee:	cbz	r5, 8d00 <FsCache::sync() [clone .part.0]+0x2c>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
    8cf0:	ldrb	r3, [r4, #0]
    8cf2:	lsls	r2, r3, #30
    8cf4:	bmi.n	8d10 <FsCache::sync() [clone .part.0]+0x3c>
      if (!m_blockDev->writeSector(sector, m_buffer)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
    8cf6:	bic.w	r3, r3, #1
    8cfa:	strb	r3, [r4, #0]
  }
  return true;

 fail:
  return false;
}
    8cfc:	mov	r0, r5
    8cfe:	pop	{r4, r5, r6, pc}
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;

 fail:
  return false;
    8d00:	movs	r5, #0
}
    8d02:	mov	r0, r5
    8d04:	pop	{r4, r5, r6, pc}
   * \param[in] src Pointer to the location of the data to be written.
   * \return true for success or false for failure.
   */
  bool writeSector(uint32_t sector, const uint8_t* src) {
    if (m_sharedSpi) {
      return writeSingle(sector, src);
    8d06:	mov	r2, r6
    8d08:	bl	c7e0 <SdSpiCard::writeSingle(unsigned long, unsigned char const*)>
    8d0c:	mov	r5, r0
    8d0e:	b.n	8cee <FsCache::sync() [clone .part.0]+0x1a>
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
      uint32_t sector = m_sector + m_mirrorOffset;
      if (!m_blockDev->writeSector(sector, m_buffer)) {
    8d10:	ldr	r0, [r4, #4]
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
      uint32_t sector = m_sector + m_mirrorOffset;
    8d12:	ldr	r1, [r4, #12]
    8d14:	ldr	r3, [r4, #8]
   * \param[in] sector Logical sector to be written.
   * \param[in] src Pointer to the location of the data to be written.
   * \return true for success or false for failure.
   */
  bool writeSector(uint32_t sector, const uint8_t* src) {
    if (m_sharedSpi) {
    8d16:	ldrb	r2, [r0, #13]
    8d18:	add	r1, r3
    8d1a:	cbnz	r2, 8d2c <FsCache::sync() [clone .part.0]+0x58>
      return writeSingle(sector, src);
    } else {
      return writeSectors(sector, src, 1);
    8d1c:	mov	r2, r6
    8d1e:	movs	r3, #1
    8d20:	bl	c8bc <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)>
      if (!m_blockDev->writeSector(sector, m_buffer)) {
    8d24:	cmp	r0, #0
    8d26:	beq.n	8d00 <FsCache::sync() [clone .part.0]+0x2c>
    8d28:	ldrb	r3, [r4, #0]
    8d2a:	b.n	8cf6 <FsCache::sync() [clone .part.0]+0x22>
   * \param[in] src Pointer to the location of the data to be written.
   * \return true for success or false for failure.
   */
  bool writeSector(uint32_t sector, const uint8_t* src) {
    if (m_sharedSpi) {
      return writeSingle(sector, src);
    8d2c:	mov	r2, r6
    8d2e:	bl	c7e0 <SdSpiCard::writeSingle(unsigned long, unsigned char const*)>
    8d32:	b.n	8d24 <FsCache::sync() [clone .part.0]+0x50>

00008d34 <FsCache::get(unsigned long, unsigned char)>:
 * DEALINGS IN THE SOFTWARE.
 */
#include "DebugMacros.h"
#include "FsCache.h"
//------------------------------------------------------------------------------
uint8_t* FsCache::get(uint32_t sector, uint8_t option) {
    8d34:	push	{r3, r4, r5, r6, r7, lr}
  if (!m_blockDev) {
    8d36:	ldr	r5, [r0, #4]
    8d38:	cbz	r5, 8d7a <FsCache::get(unsigned long, unsigned char)+0x46>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_sector != sector) {
    8d3a:	ldr	r3, [r0, #12]
    8d3c:	cmp	r3, r1
    8d3e:	mov	r4, r0
    8d40:	mov	r7, r2
    8d42:	mov	r6, r1
    8d44:	beq.n	8d64 <FsCache::get(unsigned long, unsigned char)+0x30>
 fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FsCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    8d46:	ldrb	r3, [r0, #0]
    8d48:	lsls	r2, r3, #31
    8d4a:	bmi.n	8d72 <FsCache::get(unsigned long, unsigned char)+0x3e>
  if (m_sector != sector) {
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
    8d4c:	lsls	r3, r7, #29
      if (!m_blockDev->readSector(sector, m_buffer)) {
    8d4e:	add.w	r5, r4, #16
  if (m_sector != sector) {
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
    8d52:	bpl.n	8d7e <FsCache::get(unsigned long, unsigned char)+0x4a>
      }
    }
    m_status = 0;
    m_sector = sector;
  }
  m_status |= option & CACHE_STATUS_MASK;
    8d54:	and.w	r2, r7, #3
    8d58:	movs	r3, #0
    8d5a:	orrs	r3, r2
    8d5c:	strb	r3, [r4, #0]
    8d5e:	mov	r0, r5
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status = 0;
    m_sector = sector;
    8d60:	str	r6, [r4, #12]
  m_status |= option & CACHE_STATUS_MASK;
  return m_buffer;

 fail:
  return nullptr;
}
    8d62:	pop	{r3, r4, r5, r6, r7, pc}
    8d64:	ldrsb.w	r3, [r0], #16
      }
    }
    m_status = 0;
    m_sector = sector;
  }
  m_status |= option & CACHE_STATUS_MASK;
    8d68:	and.w	r2, r7, #3
    8d6c:	orrs	r3, r2
    8d6e:	strb	r3, [r4, #0]
  return m_buffer;

 fail:
  return nullptr;
}
    8d70:	pop	{r3, r4, r5, r6, r7, pc}
    8d72:	bl	8cd4 <FsCache::sync() [clone .part.0]>
  if (!m_blockDev) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_sector != sector) {
    if (!sync()) {
    8d76:	cmp	r0, #0
    8d78:	bne.n	8d4c <FsCache::get(unsigned long, unsigned char)+0x18>
  }
  m_status |= option & CACHE_STATUS_MASK;
  return m_buffer;

 fail:
  return nullptr;
    8d7a:	movs	r0, #0
    8d7c:	pop	{r3, r4, r5, r6, r7, pc}
   * \param[out] dst Pointer to the location that will receive the data.
   * \return true for success or false for failure.
   */
  bool readSector(uint32_t sector, uint8_t* dst) {
#if ENABLE_DEDICATED_SPI
    return readSectors(sector, dst, 1);
    8d7e:	mov	r2, r5
    8d80:	movs	r3, #1
    8d82:	mov	r1, r6
    8d84:	ldr	r0, [r4, #4]
    8d86:	bl	c858 <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)>
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
      if (!m_blockDev->readSector(sector, m_buffer)) {
    8d8a:	cmp	r0, #0
    8d8c:	bne.n	8d54 <FsCache::get(unsigned long, unsigned char)+0x20>
    8d8e:	b.n	8d7a <FsCache::get(unsigned long, unsigned char)+0x46>

00008d90 <FsCache::sync()>:
 fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FsCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    8d90:	ldrb	r3, [r0, #0]
    8d92:	lsls	r3, r3, #31
    8d94:	bmi.n	8d9a <FsCache::sync()+0xa>
  }
  return true;

 fail:
  return false;
}
    8d96:	movs	r0, #1
    8d98:	bx	lr
    8d9a:	b.w	8cd4 <FsCache::sync() [clone .part.0]>
    8d9e:	nop

00008da0 <ExFatFile::close()>:
#include "../common/DebugMacros.h"
#include "ExFatFile.h"
#include "ExFatVolume.h"
#include "upcase.h"
//------------------------------------------------------------------------------
bool ExFatFile::close() {
    8da0:	push	{r4, lr}
    8da2:	mov	r4, r0
  bool rtn = sync();
    8da4:	bl	9f84 <ExFatFile::sync()>
  m_attributes = FILE_ATTR_CLOSED;
    8da8:	movs	r3, #0
    8daa:	strb.w	r3, [r4, #49]	; 0x31
  m_flags = 0;
    8dae:	strb.w	r3, [r4, #51]	; 0x33
  return rtn;
}
    8db2:	pop	{r4, pc}

00008db4 <ExFatFile::getName(char*, unsigned int)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
size_t ExFatFile::getName(ExChar_t* name, size_t length) {
    8db4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  DirName_t* dn;
  DirPos_t pos = m_dirPos;
    8db8:	add.w	r3, r0, #36	; 0x24

 fail:
  return false;
}
//------------------------------------------------------------------------------
size_t ExFatFile::getName(ExChar_t* name, size_t length) {
    8dbc:	mov	r9, r0
    8dbe:	mov	r7, r1
    8dc0:	mov	r5, r2
  DirName_t* dn;
  DirPos_t pos = m_dirPos;
    8dc2:	ldmia.w	r3, {r0, r1, r2}

 fail:
  return false;
}
//------------------------------------------------------------------------------
size_t ExFatFile::getName(ExChar_t* name, size_t length) {
    8dc6:	sub	sp, #20
  DirName_t* dn;
  DirPos_t pos = m_dirPos;
  size_t n = 0;
  if (!isOpen()) {
    8dc8:	ldrb.w	r3, [r9, #49]	; 0x31
  return false;
}
//------------------------------------------------------------------------------
size_t ExFatFile::getName(ExChar_t* name, size_t length) {
  DirName_t* dn;
  DirPos_t pos = m_dirPos;
    8dcc:	add	r6, sp, #4
    8dce:	stmia.w	r6, {r0, r1, r2}
  size_t n = 0;
  if (!isOpen()) {
    8dd2:	cmp	r3, #0
    8dd4:	beq.n	8e54 <ExFatFile::getName(char*, unsigned int)+0xa0>
      DBG_FAIL_MACRO;
      goto fail;
  }
  for (uint8_t is = 1; is < m_setCount; is++) {
    8dd6:	ldrb.w	r3, [r9, #48]	; 0x30
    8dda:	cmp	r3, #1
    8ddc:	bls.n	8e5e <ExFatFile::getName(char*, unsigned int)+0xaa>
    8dde:	mov.w	r8, #1
    8de2:	movs	r4, #0
    if (m_vol->dirSeek(&pos, is == 1 ? 64: 32) != 1) {
    8de4:	cmp.w	r8, #1
    8de8:	ite	ne
    8dea:	movne	r2, #32
    8dec:	moveq	r2, #64	; 0x40
    8dee:	mov	r1, r6
    8df0:	ldr.w	r0, [r9, #32]
    8df4:	bl	9980 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)>
    8df8:	cmp	r0, #1
    8dfa:	bne.n	8e54 <ExFatFile::getName(char*, unsigned int)+0xa0>
      DBG_FAIL_MACRO;
      goto fail;
    }
    dn = reinterpret_cast<DirName_t*>
         (m_vol->dirCache(&pos, FsCache::CACHE_FOR_READ));
    8dfc:	movs	r2, #0
    8dfe:	mov	r1, r6
    8e00:	ldr.w	r0, [r9, #32]
    8e04:	bl	994c <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
    if (!dn || dn->type != EXFAT_TYPE_NAME) {
    8e08:	cbz	r0, 8e54 <ExFatFile::getName(char*, unsigned int)+0xa0>
    8e0a:	ldrb	r3, [r0, #0]
    8e0c:	cmp	r3, #193	; 0xc1
    8e0e:	bne.n	8e54 <ExFatFile::getName(char*, unsigned int)+0xa0>
    8e10:	adds	r1, r7, r4
    8e12:	add.w	lr, r4, #15
    8e16:	b.n	8e1a <ExFatFile::getName(char*, unsigned int)+0x66>
    8e18:	mov	r4, r2
void lbaToMbrChs(uint8_t* chs, uint32_t capacityMB, uint32_t lba);
//-----------------------------------------------------------------------------
#if !defined(USE_SIMPLE_LITTLE_ENDIAN) || USE_SIMPLE_LITTLE_ENDIAN
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
    8e1a:	ldrh.w	r3, [r0, #2]!
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (uint8_t in = 0; in < 15; in++) {
      uint16_t c = getLe16(dn->unicode + 2*in);
      if (c == 0 || (n + 1) >= length) {
    8e1e:	adds	r2, r4, #1
    8e20:	cbz	r3, 8e48 <ExFatFile::getName(char*, unsigned int)+0x94>
    8e22:	cmp	r2, r5
    8e24:	bcs.n	8e48 <ExFatFile::getName(char*, unsigned int)+0x94>
        goto done;
      }
      name[n++] = sizeof(ExChar_t) > 1 || c < 0X7F ? c : '?';
    8e26:	cmp	r3, #126	; 0x7e
    8e28:	ite	ls
    8e2a:	uxtbls	r3, r3
    8e2c:	movhi	r3, #63	; 0x3f
         (m_vol->dirCache(&pos, FsCache::CACHE_FOR_READ));
    if (!dn || dn->type != EXFAT_TYPE_NAME) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (uint8_t in = 0; in < 15; in++) {
    8e2e:	cmp	r2, lr
      uint16_t c = getLe16(dn->unicode + 2*in);
      if (c == 0 || (n + 1) >= length) {
        goto done;
      }
      name[n++] = sizeof(ExChar_t) > 1 || c < 0X7F ? c : '?';
    8e30:	strb.w	r3, [r1], #1
         (m_vol->dirCache(&pos, FsCache::CACHE_FOR_READ));
    if (!dn || dn->type != EXFAT_TYPE_NAME) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (uint8_t in = 0; in < 15; in++) {
    8e34:	bne.n	8e18 <ExFatFile::getName(char*, unsigned int)+0x64>
  size_t n = 0;
  if (!isOpen()) {
      DBG_FAIL_MACRO;
      goto fail;
  }
  for (uint8_t is = 1; is < m_setCount; is++) {
    8e36:	add.w	r8, r8, #1
    8e3a:	ldrb.w	r3, [r9, #48]	; 0x30
    8e3e:	uxtb.w	r8, r8
    8e42:	cmp	r3, r8
    8e44:	mov	r4, r2
    8e46:	bhi.n	8de4 <ExFatFile::getName(char*, unsigned int)+0x30>
      }
      name[n++] = sizeof(ExChar_t) > 1 || c < 0X7F ? c : '?';
    }
  }
 done:
  name[n] = 0;
    8e48:	movs	r3, #0
  return n;
    8e4a:	mov	r0, r4
      }
      name[n++] = sizeof(ExChar_t) > 1 || c < 0X7F ? c : '?';
    }
  }
 done:
  name[n] = 0;
    8e4c:	strb	r3, [r7, r4]
  return n;

 fail:
  *name = 0;
  return 0;
}
    8e4e:	add	sp, #20
    8e50:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 done:
  name[n] = 0;
  return n;

 fail:
  *name = 0;
    8e54:	movs	r0, #0
    8e56:	strb	r0, [r7, #0]
  return 0;
}
    8e58:	add	sp, #20
    8e5a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  size_t n = 0;
  if (!isOpen()) {
      DBG_FAIL_MACRO;
      goto fail;
  }
  for (uint8_t is = 1; is < m_setCount; is++) {
    8e5e:	movs	r4, #0
    8e60:	b.n	8e48 <ExFatFile::getName(char*, unsigned int)+0x94>
    8e62:	nop

00008e64 <ExFatFile::openRoot(ExFatVolume*)>:
  m_flags = 0;
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::openRoot(ExFatVolume* vol) {
  if (isOpen()) {
    8e64:	ldrb.w	r2, [r0, #49]	; 0x31
    8e68:	cbz	r2, 8e6e <ExFatFile::openRoot(ExFatVolume*)+0xa>
  m_vol = vol;
  m_flags = FILE_FLAG_READ;
  return true;

 fail:
  return false;
    8e6a:	movs	r0, #0
    8e6c:	bx	lr
  m_attributes = FILE_ATTR_CLOSED;
  m_flags = 0;
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::openRoot(ExFatVolume* vol) {
    8e6e:	push	{r3, r4, r5, lr}
    8e70:	mov	r4, r0
    8e72:	mov	r5, r1
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
    8e74:	mov	r1, r2
    8e76:	movs	r2, #56	; 0x38
    8e78:	bl	106cc <memset>
  m_attributes = FILE_ATTR_ROOT;
    8e7c:	movs	r3, #64	; 0x40
  m_vol = vol;
  m_flags = FILE_FLAG_READ;
    8e7e:	movs	r0, #1
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
  m_attributes = FILE_ATTR_ROOT;
    8e80:	strb.w	r3, [r4, #49]	; 0x31
  m_vol = vol;
  m_flags = FILE_FLAG_READ;
    8e84:	strb.w	r0, [r4, #51]	; 0x33
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
  m_attributes = FILE_ATTR_ROOT;
  m_vol = vol;
    8e88:	str	r5, [r4, #32]
    8e8a:	pop	{r3, r4, r5, pc}

00008e8c <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>:
 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::parsePathName(const ExChar_t* path,
                            ExName_t* fname, const ExChar_t** ptr) {
    8e8c:	push	{r4, r5, r6, r7, lr}
  ExChar_t c;
  int end;
  int len = 0;

  // Skip leading spaces.
  while (*path == ' ') {
    8e8e:	ldrb	r0, [r1, #0]
    8e90:	cmp	r0, #32
    8e92:	bne.n	8e9c <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x10>
    8e94:	ldrb.w	r0, [r1, #1]!
    8e98:	cmp	r0, #32
    8e9a:	beq.n	8e94 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x8>
    path++;
  }
  fname->lfn = path;
    8e9c:	str	r1, [r2, #4]

  for (len = 0; ; len++) {
    c = path[len];
    8e9e:	ldrb	r0, [r1, #0]
    if (c == 0 || isDirSeparator(c)) {
    8ea0:	cmp	r0, #0
    8ea2:	beq.n	8f48 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xbc>
    8ea4:	cmp	r0, #47	; 0x2f
    8ea6:	beq.n	8f00 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x74>
 * \param[in] c character to be tested.
 *
 * \return true for legal character else false.
 */
inline bool lfnLegalChar(ExChar_t c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
    8ea8:	cmp	r0, #92	; 0x5c
    8eaa:	beq.n	8eee <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x62>
    8eac:	sub.w	r4, r0, #34	; 0x22
    8eb0:	uxtb	r4, r4
    8eb2:	cmp	r4, #29
    8eb4:	bls.n	8ef2 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x66>
    8eb6:	ldr.w	lr, [pc, #148]	; 8f4c <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xc0>
    8eba:	adds	r6, r1, #1
  while (*path == ' ') {
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    8ebc:	movs	r4, #0
      c == ':' || c == '<' || c == '>' || c == '?' || c == '|') {
    8ebe:	cmp	r0, #124	; 0x7c
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
    8ec0:	sub.w	r5, r0, #32
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    c = path[len];
    8ec4:	mov	r7, r6
    8ec6:	beq.n	8eee <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x62>
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
    8ec8:	cmp	r5, #94	; 0x5e
    8eca:	bhi.n	8eee <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x62>
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    c = path[len];
    8ecc:	ldrb.w	r0, [r6], #1
 * \param[in] c character to be tested.
 *
 * \return true for legal character else false.
 */
inline bool lfnLegalChar(ExChar_t c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
    8ed0:	sub.w	r5, r0, #34	; 0x22
    8ed4:	uxtb	r5, r5
  while (*path == ' ') {
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    8ed6:	adds	r4, #1
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
    8ed8:	cbz	r0, 8f3a <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xae>
    8eda:	cmp	r0, #47	; 0x2f
    8edc:	beq.n	8f02 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x76>
    8ede:	cmp	r0, #92	; 0x5c
    8ee0:	lsr.w	r7, lr, r5
    8ee4:	beq.n	8eee <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x62>
    8ee6:	cmp	r5, #29
    8ee8:	bhi.n	8ebe <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x32>
    8eea:	lsls	r5, r7, #31
    8eec:	bpl.n	8ebe <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x32>
      break;
    }
    if (!lfnLegalChar(c)) {
      return false;
    8eee:	movs	r0, #0
    8ef0:	pop	{r4, r5, r6, r7, pc}
    8ef2:	ldr	r5, [pc, #88]	; (8f4c <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xc0>)
    8ef4:	lsr.w	r4, r5, r4
    8ef8:	lsls	r6, r4, #31
    8efa:	bpl.n	8eb6 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x2a>
    8efc:	movs	r0, #0
    8efe:	pop	{r4, r5, r6, r7, pc}
  while (*path == ' ') {
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    8f00:	movs	r4, #0
    8f02:	adds	r7, r1, r4
    8f04:	mov	r6, r7
    8f06:	mov	r5, r4
    8f08:	movs	r0, #47	; 0x2f
    8f0a:	b.n	8f12 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x86>
    8f0c:	ldrb.w	r0, [r6, #1]!
    if (!lfnLegalChar(c)) {
      return false;
    }
  }
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
    8f10:	adds	r5, #1
    8f12:	cmp	r0, #32
    8f14:	beq.n	8f0c <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x80>
    8f16:	cmp	r0, #47	; 0x2f
    8f18:	beq.n	8f0c <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x80>
  *ptr = &path[end];
    8f1a:	add	r1, r5
    8f1c:	str	r1, [r3, #0]

  // Back over spaces and dots.
  while (len) {
    8f1e:	cbz	r4, 8f32 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xa6>
    8f20:	mov	r1, r7
    c = path[len - 1];
    8f22:	ldrb.w	r3, [r1, #-1]!
    if (c != '.' && c != ' ') {
    8f26:	cmp	r3, #46	; 0x2e
    8f28:	beq.n	8f2e <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xa2>
    8f2a:	cmp	r3, #32
    8f2c:	bne.n	8f40 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xb4>
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
  *ptr = &path[end];

  // Back over spaces and dots.
  while (len) {
    8f2e:	subs	r4, #1
    8f30:	bne.n	8f22 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x96>
    8f32:	mov	r0, r4
  }
  // Max length of LFN is 255.
  if (len > EXFAT_MAX_NAME_LENGTH) {
    return false;
  }
  fname->len = len;
    8f34:	str	r0, [r2, #0]
  return true;
    8f36:	movs	r0, #1
    8f38:	pop	{r4, r5, r6, r7, pc}
      return false;
    }
  }
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
  *ptr = &path[end];
    8f3a:	str	r7, [r3, #0]
    8f3c:	adds	r7, r1, r4
    8f3e:	b.n	8f20 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x94>
      break;
    }
    len--;
  }
  // Max length of LFN is 255.
  if (len > EXFAT_MAX_NAME_LENGTH) {
    8f40:	cmp	r4, #255	; 0xff
    8f42:	ble.n	8f32 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xa6>
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
      return false;
    8f44:	movs	r0, #0
    8f46:	pop	{r4, r5, r6, r7, pc}
    }
  }
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
  *ptr = &path[end];
    8f48:	str	r1, [r3, #0]
    8f4a:	b.n	8f34 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xa8>
    8f4c:	.word	0x35000101

00008f50 <ExFatFile::read(void*, unsigned int)>:
  m_curPosition = curPosition;
  m_curCluster = curCluster;
  return c;
}
//------------------------------------------------------------------------------
int ExFatFile::read(void* buf, size_t count) {
    8f50:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8f54:	ldrb.w	r3, [r0, #51]	; 0x33
  uint8_t* cache;
  uint16_t sectorOffset;
  uint32_t sector;
  uint32_t clusterOffset;

  if (!isReadable()) {
    8f58:	lsls	r6, r3, #31
  m_curPosition = curPosition;
  m_curCluster = curCluster;
  return c;
}
//------------------------------------------------------------------------------
int ExFatFile::read(void* buf, size_t count) {
    8f5a:	sub	sp, #12
    8f5c:	mov	r4, r0
  uint8_t* cache;
  uint16_t sectorOffset;
  uint32_t sector;
  uint32_t clusterOffset;

  if (!isReadable()) {
    8f5e:	bpl.n	9016 <ExFatFile::read(void*, unsigned int)+0xc6>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isContiguous() || isFile()) {
    8f60:	lsls	r5, r3, #25
    8f62:	mov	r6, r1
    8f64:	mov	fp, r2
    8f66:	bpl.w	90d8 <ExFatFile::read(void*, unsigned int)+0x188>
    if ((m_curPosition + count) > m_validLength) {
    8f6a:	ldrd	r0, r1, [r4]
    8f6e:	ldrd	r2, r3, [r4, #16]
    8f72:	adds.w	r8, r0, fp
    8f76:	adc.w	r9, r1, #0
    8f7a:	cmp	r3, r9
    8f7c:	it	eq
    8f7e:	cmpeq	r2, r8
    8f80:	bcc.w	90e4 <ExFatFile::read(void*, unsigned int)+0x194>
      count = toRead = m_validLength - m_curPosition;
    }
  }
  while (toRead) {
    8f84:	cmp.w	fp, #0
    8f88:	beq.n	9068 <ExFatFile::read(void*, unsigned int)+0x118>
    8f8a:	mov	r9, r4
    8f8c:	ldrd	r0, r1, [r9], #24
    8f90:	mov	r5, fp
    clusterOffset = m_curPosition & m_vol->clusterMask();
    8f92:	ldr	r7, [r4, #32]
    8f94:	ldr.w	r3, [r7, #1080]	; 0x438
    8f98:	ands	r3, r0
    sectorOffset = clusterOffset & m_vol->sectorMask();
    8f9a:	ubfx	sl, r3, #0, #9
    if (clusterOffset == 0) {
    8f9e:	cmp	r3, #0
    8fa0:	bne.n	9074 <ExFatFile::read(void*, unsigned int)+0x124>
      if (m_curPosition == 0) {
    8fa2:	orrs.w	r2, r0, r1
    8fa6:	bne.n	9092 <ExFatFile::read(void*, unsigned int)+0x142>
        m_curCluster = isRoot()
                       ? m_vol->rootDirectoryCluster() : m_firstCluster;
    8fa8:	ldrb.w	r2, [r4, #49]	; 0x31
    8fac:	lsls	r1, r2, #25
    8fae:	ite	mi
    8fb0:	ldrmi.w	r2, [r7, #1076]	; 0x434
    8fb4:	ldrpl	r2, [r4, #28]
      } else if (isContiguous()) {
        m_curCluster++;
    8fb6:	str	r2, [r4, #24]
          goto fail;
        }
      }
    }
    sector = m_vol->clusterStartSector(m_curCluster) +
             (clusterOffset >> m_vol->bytesPerSectorShift());
    8fb8:	ldr.w	r0, [r7, #1068]	; 0x42c
  bool dataCacheSync() {return m_dataCache.sync();}
  //----------------------------------------------------------------------------
  uint32_t clusterMask() const {return m_clusterMask;}
  uint32_t clusterStartSector(uint32_t cluster) {
    return m_clusterHeapStartSector +
           ((cluster - 2) << m_sectorsPerClusterShift);
    8fbc:	ldrb.w	lr, [r7, #1093]	; 0x445
    8fc0:	lsrs	r3, r3, #9
    8fc2:	subs	r2, #2
    8fc4:	adds	r1, r3, r0
    8fc6:	lsl.w	r2, r2, lr
    8fca:	add	r1, r2
    if (sectorOffset != 0 || toRead < m_vol->bytesPerSector()
                          || sector == m_vol->dataCacheSector()) {
    8fcc:	cmp.w	sl, #0
    8fd0:	bne.n	902c <ExFatFile::read(void*, unsigned int)+0xdc>
        }
      }
    }
    sector = m_vol->clusterStartSector(m_curCluster) +
             (clusterOffset >> m_vol->bytesPerSectorShift());
    if (sectorOffset != 0 || toRead < m_vol->bytesPerSector()
    8fd2:	cmp.w	r5, #512	; 0x200
    8fd6:	bcc.n	902c <ExFatFile::read(void*, unsigned int)+0xdc>
    8fd8:	ldr.w	r2, [r7, #540]	; 0x21c
                          || sector == m_vol->dataCacheSector()) {
    8fdc:	cmp	r1, r2
    8fde:	beq.n	902c <ExFatFile::read(void*, unsigned int)+0xdc>
        goto fail;
      }
      uint8_t* src = cache + sectorOffset;
      memcpy(dst, src, n);
#if USE_MULTI_SECTOR_IO
    } else if (toRead >= 2*m_vol->bytesPerSector()) {
    8fe0:	cmp.w	r5, #1024	; 0x400
    8fe4:	bcc.n	90a0 <ExFatFile::read(void*, unsigned int)+0x150>
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
      // Limit reads to current cluster.
      uint32_t maxNs = m_vol->sectorsPerCluster()
                       - (clusterOffset >> m_vol->bytesPerSectorShift());
    8fe6:	mov.w	r8, #1
    8fea:	lsl.w	r8, r8, lr
    8fee:	rsb	r3, r3, r8
      }
      uint8_t* src = cache + sectorOffset;
      memcpy(dst, src, n);
#if USE_MULTI_SECTOR_IO
    } else if (toRead >= 2*m_vol->bytesPerSector()) {
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
    8ff2:	mov.w	r8, r5, lsr #9
    8ff6:	cmp	r8, r3
    8ff8:	it	cs
    8ffa:	movcs	r8, r3
   * \param[in] sector Start sector of the range.
   * \param[in] count Number of sectors in the range.
   * \return true if a sector in the range is cached.
   */
  bool isCached(uint32_t sector, size_t count) {
    return sector <= m_sector && m_sector < (sector + count);
    8ffc:	cmp	r1, r2
    8ffe:	bhi.n	9078 <ExFatFile::read(void*, unsigned int)+0x128>
    9000:	add.w	r3, r8, r1
    9004:	cmp	r2, r3
    9006:	bcs.n	9078 <ExFatFile::read(void*, unsigned int)+0x128>
   * \param[in] count Number of sectors to be read.
   * \param[out] dst Pointer to the location that will receive the data.
   * \return true for success or false for failure.
   */
  bool cacheSafeRead(uint32_t sector, uint8_t* dst, size_t count) {
    if (isCached(sector, count) && !sync()) {
    9008:	add.w	r0, r7, #528	; 0x210
    900c:	str	r1, [sp, #4]
    900e:	bl	8d90 <FsCache::sync()>
    9012:	ldr	r1, [sp, #4]
    9014:	cbnz	r0, 9078 <ExFatFile::read(void*, unsigned int)+0x128>
    toRead -= n;
  }
  return count - toRead;

 fail:
  m_error |= READ_ERROR;
    9016:	ldrb.w	r3, [r4, #50]	; 0x32
  return -1;
    901a:	mov.w	r0, #4294967295
    toRead -= n;
  }
  return count - toRead;

 fail:
  m_error |= READ_ERROR;
    901e:	orr.w	r3, r3, #2
    9022:	strb.w	r3, [r4, #50]	; 0x32
  return -1;
}
    9026:	add	sp, #12
    9028:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
#endif  // USE_EXFAT_BITMAP_CACHE
  }
  void dataCacheDirty() {m_dataCache.dirty();}
  void dataCacheInvalidate() {m_dataCache.invalidate();}
  uint8_t* dataCacheGet(uint32_t sector, uint8_t option) {
    return m_dataCache.get(sector, option);
    902c:	add.w	r0, r7, #528	; 0x210
    9030:	movs	r2, #0
    9032:	bl	8d34 <FsCache::get(unsigned long, unsigned char)>
      if (n > toRead) {
        n = toRead;
      }
      // read sector to cache and copy data to caller
      cache = m_vol->dataCacheGet(sector, FsCache::CACHE_FOR_READ);
      if (!cache) {
    9036:	cmp	r0, #0
    9038:	beq.n	9016 <ExFatFile::read(void*, unsigned int)+0xc6>
    }
    sector = m_vol->clusterStartSector(m_curCluster) +
             (clusterOffset >> m_vol->bytesPerSectorShift());
    if (sectorOffset != 0 || toRead < m_vol->bytesPerSector()
                          || sector == m_vol->dataCacheSector()) {
      n = m_vol->bytesPerSector() - sectorOffset;
    903a:	rsb	r8, sl, #512	; 0x200
    903e:	cmp	r8, r5
    9040:	it	cs
    9042:	movcs	r8, r5
      if (!cache) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* src = cache + sectorOffset;
      memcpy(dst, src, n);
    9044:	add.w	r1, r0, sl
    9048:	mov	r2, r8
    904a:	mov	r0, r6
    904c:	bl	cb00 <memcpy>
    9050:	mov	r2, r8
    9052:	movs	r3, #0
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    m_curPosition += n;
    9054:	ldrd	r0, r1, [r4]
    9058:	adds	r0, r0, r2
    905a:	adcs	r1, r3
  if (isContiguous() || isFile()) {
    if ((m_curPosition + count) > m_validLength) {
      count = toRead = m_validLength - m_curPosition;
    }
  }
  while (toRead) {
    905c:	subs.w	r5, r5, r8
      if (!m_vol->cacheSafeRead(sector, dst)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    9060:	add	r6, r8
    m_curPosition += n;
    9062:	strd	r0, r1, [r4]
  if (isContiguous() || isFile()) {
    if ((m_curPosition + count) > m_validLength) {
      count = toRead = m_validLength - m_curPosition;
    }
  }
  while (toRead) {
    9066:	bne.n	8f92 <ExFatFile::read(void*, unsigned int)+0x42>
        goto fail;
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // read single sector
      n = m_vol->bytesPerSector();
    9068:	movs	r5, #0
    }
    dst += n;
    m_curPosition += n;
    toRead -= n;
  }
  return count - toRead;
    906a:	rsb	r0, r5, fp

 fail:
  m_error |= READ_ERROR;
  return -1;
}
    906e:	add	sp, #12
    9070:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9074:	ldr	r2, [r4, #24]
    9076:	b.n	8fb8 <ExFatFile::read(void*, unsigned int)+0x68>
      return false;
    }
    return m_blockDev->readSectors(sector, dst, count);
    9078:	ldr.w	r0, [r7, #532]	; 0x214
    907c:	mov	r3, r8
    907e:	mov	r2, r6
    9080:	bl	c858 <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)>
                       - (clusterOffset >> m_vol->bytesPerSectorShift());
      if (ns > maxNs) {
        ns = maxNs;
      }
      n = ns << m_vol->bytesPerSectorShift();
     if (!m_vol->cacheSafeRead(sector, dst, ns)) {
    9084:	cmp	r0, #0
    9086:	beq.n	9016 <ExFatFile::read(void*, unsigned int)+0xc6>
      uint32_t maxNs = m_vol->sectorsPerCluster()
                       - (clusterOffset >> m_vol->bytesPerSectorShift());
      if (ns > maxNs) {
        ns = maxNs;
      }
      n = ns << m_vol->bytesPerSectorShift();
    9088:	mov.w	r8, r8, lsl #9
    908c:	mov	r2, r8
    908e:	movs	r3, #0
    9090:	b.n	9054 <ExFatFile::read(void*, unsigned int)+0x104>
    sectorOffset = clusterOffset & m_vol->sectorMask();
    if (clusterOffset == 0) {
      if (m_curPosition == 0) {
        m_curCluster = isRoot()
                       ? m_vol->rootDirectoryCluster() : m_firstCluster;
      } else if (isContiguous()) {
    9092:	ldrb.w	r2, [r4, #51]	; 0x33
    9096:	lsls	r2, r2, #25
    9098:	bpl.n	90bc <ExFatFile::read(void*, unsigned int)+0x16c>
        m_curCluster++;
    909a:	ldr	r2, [r4, #24]
    909c:	adds	r2, #1
    909e:	b.n	8fb6 <ExFatFile::read(void*, unsigned int)+0x66>
    90a0:	ldr.w	r0, [r7, #532]	; 0x214
    90a4:	movs	r3, #1
    90a6:	mov	r2, r6
    90a8:	bl	c858 <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)>
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // read single sector
      n = m_vol->bytesPerSector();
      if (!m_vol->cacheSafeRead(sector, dst)) {
    90ac:	cmp	r0, #0
    90ae:	beq.n	9016 <ExFatFile::read(void*, unsigned int)+0xc6>
    90b0:	mov.w	r2, #512	; 0x200
    90b4:	movs	r3, #0
        goto fail;
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // read single sector
      n = m_vol->bytesPerSector();
    90b6:	mov.w	r8, #512	; 0x200
    90ba:	b.n	9054 <ExFatFile::read(void*, unsigned int)+0x104>
        m_curCluster = isRoot()
                       ? m_vol->rootDirectoryCluster() : m_firstCluster;
      } else if (isContiguous()) {
        m_curCluster++;
      } else {
        fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    90bc:	mov	r0, r7
    90be:	mov	r2, r9
    90c0:	ldr	r1, [r4, #24]
    90c2:	str	r3, [sp, #4]
    90c4:	bl	99d8 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
    90c8:	sxtb	r0, r0
        if (fg < 0) {
    90ca:	cmp	r0, #0
    90cc:	blt.n	9016 <ExFatFile::read(void*, unsigned int)+0xc6>
          DBG_FAIL_MACRO;
          goto fail;
        }
        if (fg == 0) {
    90ce:	beq.n	90ea <ExFatFile::read(void*, unsigned int)+0x19a>
    90d0:	ldr	r7, [r4, #32]
    90d2:	ldr	r2, [r4, #24]
    90d4:	ldr	r3, [sp, #4]
    90d6:	b.n	8fb8 <ExFatFile::read(void*, unsigned int)+0x68>

  if (!isReadable()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isContiguous() || isFile()) {
    90d8:	ldrb.w	r3, [r0, #49]	; 0x31
    90dc:	lsls	r0, r3, #28
    90de:	bmi.w	8f6a <ExFatFile::read(void*, unsigned int)+0x1a>
    90e2:	b.n	8f84 <ExFatFile::read(void*, unsigned int)+0x34>
    if ((m_curPosition + count) > m_validLength) {
      count = toRead = m_validLength - m_curPosition;
    90e4:	rsb	fp, r0, r2
    90e8:	b.n	8f84 <ExFatFile::read(void*, unsigned int)+0x34>
          DBG_FAIL_MACRO;
          goto fail;
        }
        if (fg == 0) {
          // EOF if directory.
          if (isDir()) {
    90ea:	ldrb.w	r3, [r4, #49]	; 0x31
    90ee:	tst.w	r3, #80	; 0x50
    90f2:	bne.n	906a <ExFatFile::read(void*, unsigned int)+0x11a>
    90f4:	b.n	9016 <ExFatFile::read(void*, unsigned int)+0xc6>
    90f6:	nop

000090f8 <ExFatFile::peek()>:
  }
  fname->len = len;
  return true;
}
//------------------------------------------------------------------------------
int ExFatFile::peek() {
    90f8:	push	{r4, r5, r6, r7, lr}
    90fa:	sub	sp, #12
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
    90fc:	movs	r2, #1
    90fe:	add.w	r1, sp, #7
    9102:	mov	r4, r0
  uint64_t curPosition = m_curPosition;
    9104:	ldrd	r6, r7, [r0]
  uint32_t curCluster = m_curCluster;
    9108:	ldr	r5, [r0, #24]
    910a:	bl	8f50 <ExFatFile::read(void*, unsigned int)>
    910e:	cmp	r0, #1
    9110:	it	eq
    9112:	ldrbeq.w	r0, [sp, #7]
  int c = read();
  m_curPosition = curPosition;
  m_curCluster = curCluster;
    9116:	str	r5, [r4, #24]
    9118:	it	ne
    911a:	movne.w	r0, #4294967295
//------------------------------------------------------------------------------
int ExFatFile::peek() {
  uint64_t curPosition = m_curPosition;
  uint32_t curCluster = m_curCluster;
  int c = read();
  m_curPosition = curPosition;
    911e:	strd	r6, r7, [r4]
  m_curCluster = curCluster;
  return c;
}
    9122:	add	sp, #12
    9124:	pop	{r4, r5, r6, r7, pc}
    9126:	nop

00009128 <ExFatFile::seekSet(unsigned long long)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::seekSet(uint64_t pos) {
    9128:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    912c:	ldrb.w	lr, [r0, #49]	; 0x31
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
    9130:	ldr	r5, [r0, #24]

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::seekSet(uint64_t pos) {
    9132:	sub	sp, #12
    9134:	mov	r4, r0
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
  // error if file not open
  if (!isOpen()) {
    9136:	cmp.w	lr, #0
    913a:	beq.n	9174 <ExFatFile::seekSet(unsigned long long)+0x4c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    913c:	ldrd	r0, r1, [r0]
    9140:	cmp	r1, r3
    9142:	it	eq
    9144:	cmpeq	r0, r2
    9146:	mov	r6, r2
    9148:	mov	r7, r3
    914a:	beq.n	91c4 <ExFatFile::seekSet(unsigned long long)+0x9c>
    return true;
  }
  if (pos == 0) {
    914c:	orrs.w	r3, r6, r7
    9150:	bne.n	9162 <ExFatFile::seekSet(unsigned long long)+0x3a>
    // set position to start of file
    m_curCluster = 0;
    9152:	movs	r3, #0
    9154:	str	r3, [r4, #24]
    }
  }

 done:
  m_curPosition = pos;
  return true;
    9156:	movs	r0, #1
      goto fail;
    }
  }

 done:
  m_curPosition = pos;
    9158:	strd	r6, r7, [r4]
  return true;

 fail:
  m_curCluster = tmp;
  return false;
}
    915c:	add	sp, #12
    915e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (pos == 0) {
    // set position to start of file
    m_curCluster = 0;
    goto done;
  }
  if (isFile()) {
    9162:	tst.w	lr, #8
    9166:	beq.n	917e <ExFatFile::seekSet(unsigned long long)+0x56>
    if (pos > m_validLength) {
    9168:	ldrd	r2, r3, [r4, #16]
    916c:	cmp	r3, r7
    916e:	it	eq
    9170:	cmpeq	r2, r6
    9172:	bcs.n	917e <ExFatFile::seekSet(unsigned long long)+0x56>
 done:
  m_curPosition = pos;
  return true;

 fail:
  m_curCluster = tmp;
    9174:	str	r5, [r4, #24]
  return false;
    9176:	movs	r0, #0
}
    9178:	add	sp, #12
    917a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // calculate cluster index for new position
  nNew = (pos - 1) >> m_vol->bytesPerClusterShift();
    917e:	ldr	r3, [r4, #32]
    9180:	str	r3, [sp, #4]
    9182:	ldrb.w	ip, [r3, #1093]	; 0x445
  if (isContiguous()) {
    9186:	ldrb.w	sl, [r4, #51]	; 0x33
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // calculate cluster index for new position
  nNew = (pos - 1) >> m_vol->bytesPerClusterShift();
    918a:	add.w	ip, ip, #9
    918e:	uxtb.w	ip, ip
    9192:	adds.w	r2, r6, #4294967295
    9196:	adc.w	r3, r7, #4294967295
    919a:	rsb	r8, ip, #32
    919e:	lsl.w	fp, r3, r8
    91a2:	lsr.w	r2, r2, ip
    91a6:	orr.w	r2, r2, fp
    91aa:	sub.w	fp, ip, #32
    91ae:	lsr.w	r3, r3, fp
  if (isContiguous()) {
    91b2:	tst.w	sl, #64	; 0x40
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // calculate cluster index for new position
  nNew = (pos - 1) >> m_vol->bytesPerClusterShift();
    91b6:	orr.w	r2, r2, r3
  if (isContiguous()) {
    91ba:	beq.n	91c8 <ExFatFile::seekSet(unsigned long long)+0xa0>
    m_curCluster = m_firstCluster + nNew;
    91bc:	ldr	r3, [r4, #28]
    91be:	add	r2, r3
    91c0:	str	r2, [r4, #24]
    goto done;
    91c2:	b.n	9156 <ExFatFile::seekSet(unsigned long long)+0x2e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    return true;
    91c4:	movs	r0, #1
    91c6:	b.n	9178 <ExFatFile::seekSet(unsigned long long)+0x50>
  if (isContiguous()) {
    m_curCluster = m_firstCluster + nNew;
    goto done;
  }
  // calculate cluster index for current position
  nCur = (m_curPosition - 1) >> m_vol->bytesPerClusterShift();
    91c8:	adds.w	r9, r0, #4294967295
    91cc:	adc.w	sl, r1, #4294967295
    91d0:	lsr.w	ip, r9, ip
    91d4:	lsl.w	r8, sl, r8
    91d8:	orr.w	ip, ip, r8
    91dc:	lsr.w	fp, sl, fp
    91e0:	orr.w	ip, ip, fp
  if (nNew < nCur || m_curPosition == 0) {
    91e4:	cmp	r2, ip
  if (isContiguous()) {
    m_curCluster = m_firstCluster + nNew;
    goto done;
  }
  // calculate cluster index for current position
  nCur = (m_curPosition - 1) >> m_vol->bytesPerClusterShift();
    91e6:	mov	r3, sl
  if (nNew < nCur || m_curPosition == 0) {
    91e8:	bcs.n	921a <ExFatFile::seekSet(unsigned long long)+0xf2>
    // must follow chain from first cluster
    m_curCluster = isRoot() ? m_vol->rootDirectoryCluster() : m_firstCluster;
    91ea:	tst.w	lr, #64	; 0x40
    91ee:	itet	ne
    91f0:	ldrne	r3, [sp, #4]
    91f2:	ldreq	r3, [r4, #28]
    91f4:	ldrne.w	r3, [r3, #1076]	; 0x434
    91f8:	str	r3, [r4, #24]
    91fa:	mov	r8, r2
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
    91fc:	add.w	r9, r4, #24
    9200:	mov	r2, r9
    m_curCluster = isRoot() ? m_vol->rootDirectoryCluster() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    9202:	cmp.w	r8, #0
    9206:	beq.n	9156 <ExFatFile::seekSet(unsigned long long)+0x2e>
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
    9208:	ldr	r1, [r4, #24]
    920a:	ldr	r0, [r4, #32]
    920c:	bl	99d8 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
    9210:	add.w	r8, r8, #4294967295
    9214:	cmp	r0, #0
    9216:	bne.n	9200 <ExFatFile::seekSet(unsigned long long)+0xd8>
    9218:	b.n	9174 <ExFatFile::seekSet(unsigned long long)+0x4c>
    m_curCluster = m_firstCluster + nNew;
    goto done;
  }
  // calculate cluster index for current position
  nCur = (m_curPosition - 1) >> m_vol->bytesPerClusterShift();
  if (nNew < nCur || m_curPosition == 0) {
    921a:	orrs.w	r3, r0, r1
    921e:	beq.n	91ea <ExFatFile::seekSet(unsigned long long)+0xc2>
    // must follow chain from first cluster
    m_curCluster = isRoot() ? m_vol->rootDirectoryCluster() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
    9220:	rsb	r2, ip, r2
    9224:	b.n	91fa <ExFatFile::seekSet(unsigned long long)+0xd2>
    9226:	nop

00009228 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)>:
 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::openRootFile(ExFatFile* dir, const ExChar_t* name,
                          uint8_t nameLength, oflag_t oflag) {
    9228:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    922c:	mov	r6, r1
    922e:	sub	sp, #76	; 0x4c
  uint8_t freeCount = 0;
  uint8_t freeNeed;
  bool inSet = false;

  // error if already open
  if (isOpen() || !dir->isDir()) {
    9230:	ldrb.w	r1, [r0, #49]	; 0x31
 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::openRootFile(ExFatFile* dir, const ExChar_t* name,
                          uint8_t nameLength, oflag_t oflag) {
    9234:	str	r2, [sp, #0]
    9236:	mov	r5, r0
  uint8_t freeCount = 0;
  uint8_t freeNeed;
  bool inSet = false;

  // error if already open
  if (isOpen() || !dir->isDir()) {
    9238:	cbnz	r1, 9246 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
    923a:	mov	sl, r3
    923c:	ldrb.w	r3, [r6, #49]	; 0x31
    9240:	tst.w	r3, #80	; 0x50
    9244:	bne.n	9256 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x2e>
  return sync();
#endif  // READ_ONLY
 fail:

  // close file
  m_attributes = FILE_ATTR_CLOSED;
    9246:	movs	r0, #0
    9248:	strb.w	r0, [r5, #49]	; 0x31
  m_flags = 0;
    924c:	strb.w	r0, [r5, #51]	; 0x33
  return false;
}
    9250:	add	sp, #76	; 0x4c
    9252:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  // error if already open
  if (isOpen() || !dir->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  switch (oflag & O_ACCMODE) {
    9256:	ldr	r3, [sp, #112]	; 0x70
    9258:	and.w	r3, r3, #3
    925c:	cmp	r3, #1
    925e:	beq.n	926e <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x46>
    9260:	cmp	r3, #2
    9262:	beq.w	9478 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x250>
    9266:	cmp	r3, #0
    9268:	bne.n	9246 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
    926a:	movs	r3, #1
    926c:	b.n	9270 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x48>
    926e:	movs	r3, #2
      break;
    default:
      DBG_FAIL_MACRO;
      goto fail;
  }
  modeFlags |= oflag & O_APPEND ? FILE_FLAG_APPEND : 0;
    9270:	ldr	r2, [sp, #112]	; 0x70
    9272:	and.w	r2, r2, #8
    9276:	orrs	r3, r2
    9278:	str	r3, [sp, #4]
  if (name) {
    927a:	ldr	r3, [sp, #0]
    927c:	cmp	r3, #0
    927e:	beq.w	947c <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x254>
    nameHash = exFatHashName(name, nameLength, 0);
    9282:	mov	r0, r3
    9284:	movs	r2, #0
    9286:	mov	r1, sl
    9288:	bl	9c50 <exFatHashName(char const*, unsigned int, unsigned short)>
bool ExFatFile::seekSet(uint64_t pos) {
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
  // error if file not open
  if (!isOpen()) {
    928c:	ldrb.w	r3, [r6, #49]	; 0x31
      DBG_FAIL_MACRO;
      goto fail;
  }
  modeFlags |= oflag & O_APPEND ? FILE_FLAG_APPEND : 0;
  if (name) {
    nameHash = exFatHashName(name, nameLength, 0);
    9290:	str	r0, [sp, #8]
bool ExFatFile::seekSet(uint64_t pos) {
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
  // error if file not open
  if (!isOpen()) {
    9292:	cbz	r3, 92a8 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x80>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    9294:	ldrd	r2, r3, [r6]
    9298:	orrs	r3, r2
    929a:	beq.n	92a8 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x80>
      goto fail;
    }
  }

 done:
  m_curPosition = pos;
    929c:	movs	r2, #0
    929e:	movs	r3, #0
    92a0:	strd	r2, r3, [r6]
  if (pos == m_curPosition) {
    return true;
  }
  if (pos == 0) {
    // set position to start of file
    m_curCluster = 0;
    92a4:	movs	r1, #0
    92a6:	str	r1, [r6, #24]
  modeFlags |= oflag & O_APPEND ? FILE_FLAG_APPEND : 0;
  if (name) {
    nameHash = exFatHashName(name, nameLength, 0);
    dir->rewind();
  }
  freeNeed = 2 + (nameLength + 14)/15;
    92a8:	ldr	r2, [pc, #736]	; (958c <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x364>)
    92aa:	add.w	r3, sl, #14
    92ae:	smull	r1, r2, r2, r3
    92b2:	add	r2, r3
    92b4:	asrs	r3, r3, #31
    92b6:	rsb	r3, r3, r2, asr #3
    92ba:	uxtb	r3, r3
  DirStream_t* dirStream;
  DirName_t*   dirName;
  uint8_t buf[32];
  uint8_t freeCount = 0;
  uint8_t freeNeed;
  bool inSet = false;
    92bc:	mov.w	r9, #0
  modeFlags |= oflag & O_APPEND ? FILE_FLAG_APPEND : 0;
  if (name) {
    nameHash = exFatHashName(name, nameLength, 0);
    dir->rewind();
  }
  freeNeed = 2 + (nameLength + 14)/15;
    92c0:	str	r3, [sp, #12]
    92c2:	adds	r3, #2
    92c4:	uxtb.w	fp, r3

  DirFile_t*   dirFile;
  DirStream_t* dirStream;
  DirName_t*   dirName;
  uint8_t buf[32];
  uint8_t freeCount = 0;
    92c8:	mov	r4, r9
}
//------------------------------------------------------------------------------
bool ExFatFile::openRootFile(ExFatFile* dir, const ExChar_t* name,
                          uint8_t nameLength, oflag_t oflag) {
  int n;
  uint8_t nameOffset = 0;
    92ca:	mov	r7, r9
    dir->rewind();
  }
  freeNeed = 2 + (nameLength + 14)/15;

  while (1) {
    n = dir->read(buf, 32);
    92cc:	movs	r2, #32
    92ce:	add	r1, sp, #40	; 0x28
    92d0:	mov	r0, r6
    92d2:	bl	8f50 <ExFatFile::read(void*, unsigned int)>
    if (n == 0) {
    92d6:	cmp	r0, #0
    92d8:	beq.n	9356 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x12e>
      goto create;
    }
    if (n != 32) {
    92da:	cmp	r0, #32
    92dc:	bne.n	9246 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(buf[0] & 0x80)) {
    92de:	ldrb.w	r3, [sp, #40]	; 0x28
    92e2:	lsls	r2, r3, #24
    92e4:	bmi.n	93b4 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x18c>
      if (freeCount == 0) {
    92e6:	cmp	r4, #0
    92e8:	bne.n	93ae <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x186>
        freePos.position = dir->curPosition() - 32;
    92ea:	ldr	r2, [r6, #0]
        freePos.cluster = dir->curCluster();
    92ec:	ldr	r1, [r6, #24]
    92ee:	str	r1, [sp, #28]
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(buf[0] & 0x80)) {
      if (freeCount == 0) {
        freePos.position = dir->curPosition() - 32;
    92f0:	subs	r2, #32
    92f2:	str	r2, [sp, #32]
        freePos.cluster = dir->curCluster();
      }
      if (freeCount < freeNeed) {
        freeCount++;
    92f4:	adds	r4, #1
    92f6:	uxtb	r4, r4
      }
      if (!buf[0]) {
    92f8:	cbz	r3, 9356 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x12e>
      if (buf[0] != EXFAT_TYPE_FILE) {
        continue;
      }
      inSet = true;
    }
    switch (buf[0]) {
    92fa:	cmp	r3, #192	; 0xc0
    92fc:	beq.w	9426 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1fe>
    9300:	cmp	r3, #193	; 0xc1
    9302:	beq.n	93ca <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1a2>
    9304:	cmp	r3, #133	; 0x85
    9306:	bne.n	92cc <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xa4>
      case EXFAT_TYPE_FILE:
        memset(this, 0, sizeof(ExFatFile));
    9308:	movs	r2, #56	; 0x38
    930a:	movs	r1, #0
    930c:	mov	r0, r5
    930e:	bl	106cc <memset>
        dirFile = reinterpret_cast<DirFile_t*>(buf);
        m_setCount = dirFile->setCount;
        m_attributes = getLe16(dirFile->attributes) & FILE_ATTR_COPY;
    9312:	ldrb.w	r3, [sp, #44]	; 0x2c
    }
    switch (buf[0]) {
      case EXFAT_TYPE_FILE:
        memset(this, 0, sizeof(ExFatFile));
        dirFile = reinterpret_cast<DirFile_t*>(buf);
        m_setCount = dirFile->setCount;
    9316:	ldrb.w	r2, [sp, #41]	; 0x29
    931a:	strb.w	r2, [r5, #48]	; 0x30
        m_attributes = getLe16(dirFile->attributes) & FILE_ATTR_COPY;
        if (!(m_attributes & EXFAT_ATTRIB_DIRECTORY)) {
    931e:	lsls	r0, r3, #27
    switch (buf[0]) {
      case EXFAT_TYPE_FILE:
        memset(this, 0, sizeof(ExFatFile));
        dirFile = reinterpret_cast<DirFile_t*>(buf);
        m_setCount = dirFile->setCount;
        m_attributes = getLe16(dirFile->attributes) & FILE_ATTR_COPY;
    9320:	and.w	r2, r3, #55	; 0x37
        if (!(m_attributes & EXFAT_ATTRIB_DIRECTORY)) {
          m_attributes |= FILE_ATTR_FILE;
    9324:	it	pl
    9326:	orrpl.w	r2, r2, #8
    932a:	strb.w	r2, [r5, #49]	; 0x31
        }
        m_vol = dir->volume();

        m_dirPos.cluster = dir->curCluster();
        m_dirPos.position = dir->curPosition() - 32;
    932e:	ldr	r3, [r6, #0]
    9330:	ldr	r1, [r6, #32]
    9332:	ldr	r2, [r6, #24]
        if (!(m_attributes & EXFAT_ATTRIB_DIRECTORY)) {
          m_attributes |= FILE_ATTR_FILE;
        }
        m_vol = dir->volume();

        m_dirPos.cluster = dir->curCluster();
    9334:	str	r2, [r5, #36]	; 0x24
        m_dirPos.position = dir->curPosition() - 32;
    9336:	subs	r3, #32
        m_setCount = dirFile->setCount;
        m_attributes = getLe16(dirFile->attributes) & FILE_ATTR_COPY;
        if (!(m_attributes & EXFAT_ATTRIB_DIRECTORY)) {
          m_attributes |= FILE_ATTR_FILE;
        }
        m_vol = dir->volume();
    9338:	str	r1, [r5, #32]

        m_dirPos.cluster = dir->curCluster();
        m_dirPos.position = dir->curPosition() - 32;
    933a:	str	r3, [r5, #40]	; 0x28
        m_dirPos.isContiguous = dir->isContiguous();
    933c:	ldrb.w	r3, [r6, #51]	; 0x33
    9340:	ubfx	r3, r3, #6, #1
    9344:	strb.w	r3, [r5, #44]	; 0x2c
    dir->rewind();
  }
  freeNeed = 2 + (nameLength + 14)/15;

  while (1) {
    n = dir->read(buf, 32);
    9348:	movs	r2, #32
    934a:	add	r1, sp, #40	; 0x28
    934c:	mov	r0, r6
    934e:	bl	8f50 <ExFatFile::read(void*, unsigned int)>
    if (n == 0) {
    9352:	cmp	r0, #0
    9354:	bne.n	92da <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xb2>
#if READ_ONLY
  DBG_FAIL_MACRO;
  goto fail;
#else  // READ_ONLY
  // don't create unless O_CREAT and write
  if (!(oflag & O_CREAT) || !(modeFlags & FILE_FLAG_WRITE) || !name) {
    9356:	ldr	r3, [sp, #112]	; 0x70
    9358:	lsls	r1, r3, #22
    935a:	bpl.w	9246 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
    935e:	ldr	r3, [sp, #4]
    9360:	lsls	r2, r3, #30
    9362:	bpl.w	9246 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
    9366:	ldr	r3, [sp, #0]
    9368:	cmp	r3, #0
    936a:	beq.w	9246 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (freeCount < freeNeed) {
    936e:	cmp	r4, fp
    9370:	bcc.n	938c <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x164>
    9372:	b.n	9482 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x25a>
        goto fail;
      }
      dir->m_curCluster = curCluster;
      continue;
    }
    if (n != 32) {
    9374:	cmp	r0, #32
    9376:	bne.w	9246 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (freeCount == 0) {
    937a:	cbnz	r4, 9386 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x15e>
      freePos.position = dir->curPosition() - 32;
    937c:	ldr	r2, [r6, #0]
      freePos.cluster = dir->curCluster();
    937e:	ldr	r1, [r6, #24]
    9380:	str	r1, [sp, #28]
    if (n != 32) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (freeCount == 0) {
      freePos.position = dir->curPosition() - 32;
    9382:	subs	r2, #32
    9384:	str	r2, [sp, #32]
      freePos.cluster = dir->curCluster();
    }
    freeCount++;
    9386:	uxtb	r4, r3
  // don't create unless O_CREAT and write
  if (!(oflag & O_CREAT) || !(modeFlags & FILE_FLAG_WRITE) || !name) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (freeCount < freeNeed) {
    9388:	cmp	fp, r4
    938a:	bls.n	9482 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x25a>
    n = dir->read(buf, 32);
    938c:	movs	r2, #32
    938e:	add	r1, sp, #40	; 0x28
    9390:	mov	r0, r6
    9392:	bl	8f50 <ExFatFile::read(void*, unsigned int)>
    }
    if (freeCount == 0) {
      freePos.position = dir->curPosition() - 32;
      freePos.cluster = dir->curCluster();
    }
    freeCount++;
    9396:	adds	r3, r4, #1
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (freeCount < freeNeed) {
    n = dir->read(buf, 32);
    if (n == 0) {
    9398:	cmp	r0, #0
    939a:	bne.n	9374 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x14c>
      curCluster = dir->m_curCluster;
      if (!dir->addDirCluster()) {
    939c:	mov	r0, r6
    goto fail;
  }
  while (freeCount < freeNeed) {
    n = dir->read(buf, 32);
    if (n == 0) {
      curCluster = dir->m_curCluster;
    939e:	ldr	r7, [r6, #24]
      if (!dir->addDirCluster()) {
    93a0:	bl	9fe0 <ExFatFile::addDirCluster()>
    93a4:	cmp	r0, #0
    93a6:	beq.w	9246 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
        DBG_FAIL_MACRO;
        goto fail;
      }
      dir->m_curCluster = curCluster;
    93aa:	str	r7, [r6, #24]
      continue;
    93ac:	b.n	9388 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x160>
    if (!(buf[0] & 0x80)) {
      if (freeCount == 0) {
        freePos.position = dir->curPosition() - 32;
        freePos.cluster = dir->curCluster();
      }
      if (freeCount < freeNeed) {
    93ae:	cmp	r4, fp
    93b0:	bcs.n	92f8 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xd0>
    93b2:	b.n	92f4 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xcc>
        freeCount++;
      }
      if (!buf[0]) {
        goto create;
      }
    } else if (!inSet) {
    93b4:	cmp.w	r9, #0
    93b8:	bne.n	92fa <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xd2>
      if (freeCount < freeNeed) {
        freeCount = 0;
    93ba:	cmp	r4, fp
    93bc:	it	cc
    93be:	movcc	r4, #0
      }
      if (buf[0] != EXFAT_TYPE_FILE) {
    93c0:	cmp	r3, #133	; 0x85
    93c2:	bne.n	92cc <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xa4>
        continue;
      }
      inSet = true;
    93c4:	mov.w	r9, #1
    93c8:	b.n	9308 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xe0>
        }
        break;

      case EXFAT_TYPE_NAME:
        dirName = reinterpret_cast<DirName_t*>(buf);
        nCmp = nameLength - nameOffset;
    93ca:	rsb	r8, r7, sl
    93ce:	uxtb.w	r8, r8
    93d2:	cmp.w	r8, #15
    93d6:	it	cs
    93d8:	movcs.w	r8, #15
        if (nCmp > 15) {
          nCmp = 15;
        }
        if (!exFatCmpName(dirName, name, nameOffset, nCmp)) {
    93dc:	mov	r3, r8
    93de:	mov	r2, r7
    93e0:	ldr	r1, [sp, #0]
    93e2:	add	r0, sp, #40	; 0x28
    93e4:	bl	9bf8 <exFatCmpName(DirName_t const*, char const*, unsigned int, unsigned int)>
    93e8:	cmp	r0, #0
    93ea:	beq.n	9466 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x23e>
          inSet = false;
          break;
        }
        nameOffset += nCmp;
    93ec:	add	r7, r8
    93ee:	uxtb	r7, r7

        if (nameOffset == nameLength) {
    93f0:	cmp	sl, r7
    93f2:	bne.w	92cc <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xa4>
    }
  }

 found:
  // Don't open if create only.
  if (oflag & O_EXCL) {
    93f6:	ldr	r3, [sp, #112]	; 0x70
    93f8:	lsls	r3, r3, #20
    93fa:	bmi.w	9246 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Write, truncate, or at end is an error for a directory or read-only file.
  if ((oflag & (O_TRUNC | O_AT_END)) || (m_flags & FILE_FLAG_WRITE)) {
    93fe:	ldr	r3, [sp, #112]	; 0x70
    9400:	tst.w	r3, #17408	; 0x4400
    9404:	bne.w	9548 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x320>
    9408:	ldrb.w	r3, [r5, #51]	; 0x33
    940c:	lsls	r7, r3, #30
    940e:	bmi.w	9548 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x320>
      goto fail;
    }
  }

#if !READ_ONLY
  if (oflag & O_TRUNC) {
    9412:	ldr	r3, [sp, #112]	; 0x70
    9414:	lsls	r3, r3, #21
    9416:	bmi.w	9246 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
    }
    if (!truncate(0)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if ((oflag & O_AT_END) && !seekSet(fileSize())) {
    941a:	ldr	r3, [sp, #112]	; 0x70
    941c:	lsls	r0, r3, #17
    941e:	bmi.w	9590 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x368>
    DBG_FAIL_MACRO;
    goto fail;
  }
#endif  // READ_ONLY
  return true;
    9422:	movs	r0, #1
    9424:	b.n	9250 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x28>
        break;

      case EXFAT_TYPE_STREAM:
        dirStream = reinterpret_cast<DirStream_t*>(buf);
        m_flags = modeFlags;
        if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
    9426:	ldrb.w	r3, [sp, #41]	; 0x29
        m_dirPos.isContiguous = dir->isContiguous();
        break;

      case EXFAT_TYPE_STREAM:
        dirStream = reinterpret_cast<DirStream_t*>(buf);
        m_flags = modeFlags;
    942a:	ldr	r2, [sp, #4]
    942c:	strb.w	r2, [r5, #51]	; 0x33
        if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
    9430:	lsls	r1, r3, #30
    9432:	bpl.n	943c <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x214>
          m_flags |= FILE_FLAG_CONTIGUOUS;
    9434:	orr.w	r3, r2, #64	; 0x40
    9438:	strb.w	r3, [r5, #51]	; 0x33
        }
        nameOffset = 0;
        m_validLength = getLe64(dirStream->validLength);
    943c:	ldrd	r2, r3, [sp, #48]	; 0x30
        m_firstCluster = getLe32(dirStream->firstCluster);
        m_dataLength = getLe64(dirStream->dataLength);
    9440:	ldrd	r0, r1, [sp, #64]	; 0x40
        m_flags = modeFlags;
        if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
          m_flags |= FILE_FLAG_CONTIGUOUS;
        }
        nameOffset = 0;
        m_validLength = getLe64(dirStream->validLength);
    9444:	strd	r2, r3, [r5, #16]
        m_firstCluster = getLe32(dirStream->firstCluster);
    9448:	ldr	r3, [sp, #60]	; 0x3c
    944a:	str	r3, [r5, #28]
        m_dataLength = getLe64(dirStream->dataLength);
        if (!name) {
    944c:	ldr	r3, [sp, #0]
          m_flags |= FILE_FLAG_CONTIGUOUS;
        }
        nameOffset = 0;
        m_validLength = getLe64(dirStream->validLength);
        m_firstCluster = getLe32(dirStream->firstCluster);
        m_dataLength = getLe64(dirStream->dataLength);
    944e:	strd	r0, r1, [r5, #8]
        if (!name) {
    9452:	cmp	r3, #0
    9454:	beq.n	93f6 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1ce>
          goto found;
        }
        if (nameLength != dirStream->nameLength ||
    9456:	ldrb.w	r3, [sp, #43]	; 0x2b
    945a:	cmp	r3, sl
    945c:	beq.n	946a <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x242>
            nameHash != getLe16(dirStream->nameHash)) {
          inSet = false;
    945e:	mov.w	r9, #0
        dirStream = reinterpret_cast<DirStream_t*>(buf);
        m_flags = modeFlags;
        if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
          m_flags |= FILE_FLAG_CONTIGUOUS;
        }
        nameOffset = 0;
    9462:	mov	r7, r9
    9464:	b.n	92cc <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xa4>
        nCmp = nameLength - nameOffset;
        if (nCmp > 15) {
          nCmp = 15;
        }
        if (!exFatCmpName(dirName, name, nameOffset, nCmp)) {
          inSet = false;
    9466:	mov	r9, r0
    9468:	b.n	92cc <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xa4>
        m_firstCluster = getLe32(dirStream->firstCluster);
        m_dataLength = getLe64(dirStream->dataLength);
        if (!name) {
          goto found;
        }
        if (nameLength != dirStream->nameLength ||
    946a:	ldrh.w	r3, [sp, #44]	; 0x2c
    946e:	ldr	r2, [sp, #8]
    9470:	cmp	r3, r2
    9472:	bne.n	945e <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x236>
        dirStream = reinterpret_cast<DirStream_t*>(buf);
        m_flags = modeFlags;
        if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
          m_flags |= FILE_FLAG_CONTIGUOUS;
        }
        nameOffset = 0;
    9474:	movs	r7, #0
    9476:	b.n	92cc <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xa4>
  // error if already open
  if (isOpen() || !dir->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  switch (oflag & O_ACCMODE) {
    9478:	movs	r3, #3
    947a:	b.n	9270 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x48>
                          uint8_t nameLength, oflag_t oflag) {
  int n;
  uint8_t nameOffset = 0;
  uint8_t nCmp;
  uint8_t modeFlags;
  uint16_t nameHash = 0;
    947c:	ldr	r3, [sp, #0]
    947e:	str	r3, [sp, #8]
    9480:	b.n	92a8 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x80>
      freePos.cluster = dir->curCluster();
    }
    freeCount++;
  }

  freePos.isContiguous = dir->isContiguous();
    9482:	ldrb.w	r3, [r6, #51]	; 0x33
  memset(this, 0, sizeof(ExFatFile));
    9486:	movs	r2, #56	; 0x38
      freePos.cluster = dir->curCluster();
    }
    freeCount++;
  }

  freePos.isContiguous = dir->isContiguous();
    9488:	ubfx	r3, r3, #6, #1
  memset(this, 0, sizeof(ExFatFile));
    948c:	movs	r1, #0
    948e:	mov	r0, r5
  m_vol = dir->volume();
  m_attributes = FILE_ATTR_FILE;
  m_dirPos = freePos;
    9490:	add.w	r8, sp, #28
      freePos.cluster = dir->curCluster();
    }
    freeCount++;
  }

  freePos.isContiguous = dir->isContiguous();
    9494:	strb.w	r3, [sp, #36]	; 0x24
  memset(this, 0, sizeof(ExFatFile));
    9498:	bl	106cc <memset>
    }
    memset(cache, 0 , 32);
    if (i == 0) {
      dirFile = reinterpret_cast<DirFile_t*>(cache);
      dirFile->type = EXFAT_TYPE_FILE;
      m_setCount = freeNeed - 1;
    949c:	ldr	r4, [sp, #12]
    949e:	ldr	r3, [r6, #32]
    94a0:	str.w	sl, [sp, #12]

  freePos.isContiguous = dir->isContiguous();
  memset(this, 0, sizeof(ExFatFile));
  m_vol = dir->volume();
  m_attributes = FILE_ATTR_FILE;
  m_dirPos = freePos;
    94a4:	ldmia.w	r8, {r0, r1, r2}
    }
    memset(cache, 0 , 32);
    if (i == 0) {
      dirFile = reinterpret_cast<DirFile_t*>(cache);
      dirFile->type = EXFAT_TYPE_FILE;
      m_setCount = freeNeed - 1;
    94a8:	add.w	r9, r4, #1
  }

  freePos.isContiguous = dir->isContiguous();
  memset(this, 0, sizeof(ExFatFile));
  m_vol = dir->volume();
  m_attributes = FILE_ATTR_FILE;
    94ac:	movs	r4, #8
    94ae:	strb.w	r4, [r5, #49]	; 0x31
    94b2:	add.w	r7, sl, #30
  m_dirPos = freePos;
    94b6:	add.w	r4, r5, #36	; 0x24
    94ba:	ldr.w	sl, [sp]
    freeCount++;
  }

  freePos.isContiguous = dir->isContiguous();
  memset(this, 0, sizeof(ExFatFile));
  m_vol = dir->volume();
    94be:	str	r3, [r5, #32]
    }
    memset(cache, 0 , 32);
    if (i == 0) {
      dirFile = reinterpret_cast<DirFile_t*>(cache);
      dirFile->type = EXFAT_TYPE_FILE;
      m_setCount = freeNeed - 1;
    94c0:	uxtb.w	r9, r9

  freePos.isContiguous = dir->isContiguous();
  memset(this, 0, sizeof(ExFatFile));
  m_vol = dir->volume();
  m_attributes = FILE_ATTR_FILE;
  m_dirPos = freePos;
    94c4:	stmia.w	r4, {r0, r1, r2}
    94c8:	uxtb	r7, r7
  for (uint8_t i = 0; i < freeNeed; i++) {
    94ca:	movs	r6, #0
    94cc:	mov	r0, r3
      if (1 != m_vol->dirSeek(&freePos, 32)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    cache = m_vol->dirCache(&freePos, FsCache::CACHE_FOR_WRITE);
    94ce:	movs	r2, #1
    94d0:	mov	r1, r8
    94d2:	bl	994c <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
    if (!cache || (cache[0] & 0x80)) {
    94d6:	mov	r4, r0
    94d8:	cmp	r0, #0
    94da:	beq.w	9246 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
    94de:	ldrsb.w	r3, [r0]
    94e2:	cmp	r3, #0
    94e4:	blt.w	9246 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
      DBG_FAIL_MACRO;
      goto fail;
    }
    memset(cache, 0 , 32);
    94e8:	movs	r2, #32
    94ea:	movs	r1, #0
    94ec:	bl	106cc <memset>
    if (i == 0) {
    94f0:	cmp	r6, #0
    94f2:	beq.n	95c2 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x39a>
         setLe16(dirFile->createTime, FS_DEFAULT_TIME);
         setLe16(dirFile->modifyTime, FS_DEFAULT_TIME);
         setLe16(dirFile->accessTime, FS_DEFAULT_TIME);
       }
      }
    } else if (i == 1) {
    94f4:	cmp	r6, #1
    94f6:	beq.n	95a2 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x37a>
    94f8:	rsb	r3, r6, r6, lsl #4
    94fc:	cmp	r7, #15
    94fe:	sub.w	r3, r3, #30

      dirStream->nameLength = nameLength;
      setLe16(dirStream->nameHash, nameHash);
    } else {
      dirName = reinterpret_cast<DirName_t*>(cache);
      dirName->type = EXFAT_TYPE_NAME;
    9502:	mov.w	r2, #193	; 0xc1
    9506:	mov	r1, r7
    9508:	it	cs
    950a:	movcs	r1, #15
    950c:	uxtb	r3, r3
    950e:	strb	r2, [r4, #0]
      nameOffset = 15*(i - 2);
      nCmp = nameLength - nameOffset;
      if (nCmp > 15) {
        nCmp = 15;
      }
      for (size_t k = 0; k < nCmp; k++) {
    9510:	cbz	r1, 9528 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x300>
    9512:	adds	r4, #2
    9514:	sxth	r1, r1
    9516:	add.w	r1, r4, r1, lsl #1
    951a:	add	r3, sl
        setLe16(dirName->unicode + 2*k, name[k + nameOffset]);
    951c:	ldrb.w	r2, [r3], #1
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    9520:	strh.w	r2, [r4], #2
      nameOffset = 15*(i - 2);
      nCmp = nameLength - nameOffset;
      if (nCmp > 15) {
        nCmp = 15;
      }
      for (size_t k = 0; k < nCmp; k++) {
    9524:	cmp	r1, r4
    9526:	bne.n	951c <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x2f4>
  freePos.isContiguous = dir->isContiguous();
  memset(this, 0, sizeof(ExFatFile));
  m_vol = dir->volume();
  m_attributes = FILE_ATTR_FILE;
  m_dirPos = freePos;
  for (uint8_t i = 0; i < freeNeed; i++) {
    9528:	adds	r6, #1
    952a:	uxtb	r6, r6
    952c:	cmp	fp, r6
    952e:	bls.n	9584 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x35c>
    if (i) {
      if (1 != m_vol->dirSeek(&freePos, 32)) {
    9530:	movs	r2, #32
    9532:	mov	r1, r8
    9534:	ldr	r0, [r5, #32]
    9536:	bl	9980 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)>
    953a:	cmp	r0, #1
    953c:	bne.w	9246 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
    9540:	subs	r7, #15
    9542:	uxtb	r7, r7
    9544:	ldr	r0, [r5, #32]
    9546:	b.n	94ce <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x2a6>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Write, truncate, or at end is an error for a directory or read-only file.
  if ((oflag & (O_TRUNC | O_AT_END)) || (m_flags & FILE_FLAG_WRITE)) {
    if (isSubDir() || isReadOnly() || READ_ONLY) {
    9548:	ldrb.w	r3, [r5, #49]	; 0x31
    954c:	tst.w	r3, #17
    9550:	bne.w	9246 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
      goto fail;
    }
  }

#if !READ_ONLY
  if (oflag & O_TRUNC) {
    9554:	ldr	r3, [sp, #112]	; 0x70
    9556:	lsls	r6, r3, #21
    9558:	bpl.w	941a <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1f2>
    if (!(m_flags & FILE_FLAG_WRITE)) {
    955c:	ldrb.w	r3, [r5, #51]	; 0x33
    9560:	lsls	r4, r3, #30
    9562:	bpl.w	9246 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
   * \param[in] length The desired length for the file.
   *
   * \return true for success or false for failure.
   */
  bool truncate(uint64_t length) {
    return seekSet(length) && truncate();
    9566:	movs	r2, #0
    9568:	movs	r3, #0
    956a:	mov	r0, r5
    956c:	bl	9128 <ExFatFile::seekSet(unsigned long long)>
    9570:	cmp	r0, #0
    9572:	beq.w	9246 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
    9576:	mov	r0, r5
    9578:	bl	a2b8 <ExFatFile::truncate()>
    957c:	cmp	r0, #0
    957e:	beq.w	9246 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
    9582:	b.n	9422 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1fa>
      for (size_t k = 0; k < nCmp; k++) {
        setLe16(dirName->unicode + 2*k, name[k + nameOffset]);
      }
    }
  }
  return sync();
    9584:	mov	r0, r5
    9586:	bl	9f84 <ExFatFile::sync()>
    958a:	b.n	9250 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x28>
    958c:	.word	0x88888889
    }
    if (!truncate(0)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if ((oflag & O_AT_END) && !seekSet(fileSize())) {
    9590:	ldrd	r2, r3, [r5, #16]
    9594:	mov	r0, r5
    9596:	bl	9128 <ExFatFile::seekSet(unsigned long long)>
    959a:	cmp	r0, #0
    959c:	bne.w	9422 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1fa>
    95a0:	b.n	9246 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
         setLe16(dirFile->accessTime, FS_DEFAULT_TIME);
       }
      }
    } else if (i == 1) {
      dirStream = reinterpret_cast<DirStream_t*>(cache);
      dirStream->type = EXFAT_TYPE_STREAM;
    95a2:	movs	r3, #192	; 0xc0
    95a4:	strb	r3, [r4, #0]
      dirStream->flags = EXFAT_FLAG_ALWAYS1 | EXFAT_FLAG_CONTIGUOUS;
      m_flags = modeFlags | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
    95a6:	ldr	r3, [sp, #4]
       }
      }
    } else if (i == 1) {
      dirStream = reinterpret_cast<DirStream_t*>(cache);
      dirStream->type = EXFAT_TYPE_STREAM;
      dirStream->flags = EXFAT_FLAG_ALWAYS1 | EXFAT_FLAG_CONTIGUOUS;
    95a8:	movs	r2, #3
      m_flags = modeFlags | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
    95aa:	orn	r3, r3, #63	; 0x3f
       }
      }
    } else if (i == 1) {
      dirStream = reinterpret_cast<DirStream_t*>(cache);
      dirStream->type = EXFAT_TYPE_STREAM;
      dirStream->flags = EXFAT_FLAG_ALWAYS1 | EXFAT_FLAG_CONTIGUOUS;
    95ae:	strb	r2, [r4, #1]
      m_flags = modeFlags | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
    95b0:	strb.w	r3, [r5, #51]	; 0x33

      dirStream->nameLength = nameLength;
    95b4:	ldrb.w	r3, [sp, #12]
    95b8:	strb	r3, [r4, #3]
    95ba:	ldrh.w	r3, [sp, #8]
    95be:	strh	r3, [r4, #4]
    95c0:	b.n	9528 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x300>
      goto fail;
    }
    memset(cache, 0 , 32);
    if (i == 0) {
      dirFile = reinterpret_cast<DirFile_t*>(cache);
      dirFile->type = EXFAT_TYPE_FILE;
    95c2:	movs	r3, #133	; 0x85
    95c4:	strb	r3, [r4, #0]
      m_setCount = freeNeed - 1;
      dirFile->setCount = m_setCount;

      if (FsDateTime::callback) {
    95c6:	ldr	r3, [pc, #56]	; (9600 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x3d8>)
    }
    memset(cache, 0 , 32);
    if (i == 0) {
      dirFile = reinterpret_cast<DirFile_t*>(cache);
      dirFile->type = EXFAT_TYPE_FILE;
      m_setCount = freeNeed - 1;
    95c8:	strb.w	r9, [r5, #48]	; 0x30
      dirFile->setCount = m_setCount;
    95cc:	strb.w	r9, [r4, #1]

      if (FsDateTime::callback) {
    95d0:	ldr	r3, [r3, #0]
    95d2:	cbz	r3, 95f4 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x3cc>
        uint16_t date, time;
        uint8_t ms10;
        FsDateTime::callback(&date, &time, &ms10);
    95d4:	add.w	r2, sp, #23
    95d8:	add.w	r1, sp, #26
    95dc:	add	r0, sp, #24
    95de:	blx	r3
    95e0:	ldrh.w	r1, [sp, #24]
    95e4:	ldrh.w	r2, [sp, #26]
        setLe16(dirFile->createDate, date);
        setLe16(dirFile->createTime, time);
        dirFile->createTimeMs = ms10;
    95e8:	ldrb.w	r3, [sp, #23]
    95ec:	strh	r1, [r4, #10]
    95ee:	strh	r2, [r4, #8]
    95f0:	strb	r3, [r4, #20]
    95f2:	b.n	9528 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x300>
    95f4:	movw	r3, #21025	; 0x5221
    95f8:	strh	r3, [r4, #10]
    95fa:	strh	r3, [r4, #14]
    95fc:	strh	r3, [r4, #18]
    95fe:	b.n	9528 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x300>
    9600:	.word	0x20002bd8

00009604 <ExFatFile::open(ExFatFile*, char const*, int)>:
//------------------------------------------------------------------------------
bool ExFatFile::open(ExFatVolume* vol, const ExChar_t* path, int oflag) {
  return vol && open(vol->vwd(), path, oflag);
}
//------------------------------------------------------------------------------
bool ExFatFile::open(ExFatFile* dirFile, const ExChar_t* path, oflag_t oflag) {
    9604:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    9608:	mov	r6, r0
    960a:	sub	sp, #84	; 0x54
  ExFatFile tmpDir;
  ExName_t fname;
  // error if already open
  if (isOpen() || !dirFile->isDir()) {
    960c:	ldrb.w	r4, [r6, #49]	; 0x31
//------------------------------------------------------------------------------
bool ExFatFile::open(ExFatVolume* vol, const ExChar_t* path, int oflag) {
  return vol && open(vol->vwd(), path, oflag);
}
//------------------------------------------------------------------------------
bool ExFatFile::open(ExFatFile* dirFile, const ExChar_t* path, oflag_t oflag) {
    9610:	str	r2, [sp, #12]
 * \brief Basic file class.
 */
class ExFatFile {
 public:
  /** Create an instance. */
  ExFatFile() {}
    9612:	movs	r0, #0
    9614:	strb.w	r0, [sp, #73]	; 0x49
    9618:	strb.w	r0, [sp, #74]	; 0x4a
    961c:	strb.w	r0, [sp, #75]	; 0x4b
  ExFatFile tmpDir;
  ExName_t fname;
  // error if already open
  if (isOpen() || !dirFile->isDir()) {
    9620:	cbnz	r4, 9630 <ExFatFile::open(ExFatFile*, char const*, int)+0x2c>
    9622:	mov	r9, r3
    9624:	ldrb.w	r3, [r1, #49]	; 0x31
    9628:	tst.w	r3, #80	; 0x50
    962c:	mov	r5, r1
    962e:	bne.n	9638 <ExFatFile::open(ExFatFile*, char const*, int)+0x34>
    close();
  }
  return open(dirFile, &fname, oflag);

 fail:
  return false;
    9630:	movs	r0, #0
}
    9632:	add	sp, #84	; 0x54
    9634:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  // error if already open
  if (isOpen() || !dirFile->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    9638:	ldrb	r3, [r2, #0]
    963a:	cmp	r3, #47	; 0x2f
    963c:	mov	r4, r2
    963e:	beq.n	96a6 <ExFatFile::open(ExFatFile*, char const*, int)+0xa2>
  uint8_t setCount() const {return m_setCount;}
  bool mkdir(ExFatFile* parent, ExName_t* fname);
  bool openRootFile(ExFatFile* dir,
                    const ExChar_t* name, uint8_t nameLength, oflag_t oflag);
  bool open(ExFatFile* dirFile, ExName_t* fname, oflag_t oflag) {
    return openRootFile(dirFile, fname->lfn, fname->len, oflag);
    9640:	mov.w	r8, #0
      goto fail;
    }
    dirFile = &tmpDir;
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
    9644:	mov	r1, r4
    9646:	add	r3, sp, #12
    9648:	add	r2, sp, #16
    964a:	mov	r0, r6
    964c:	bl	8e8c <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>
    9650:	cmp	r0, #0
    9652:	beq.n	9630 <ExFatFile::open(ExFatFile*, char const*, int)+0x2c>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (*path == 0) {
    9654:	ldr	r3, [sp, #12]
    9656:	ldrb	r3, [r3, #0]
    9658:	cmp	r3, #0
    965a:	beq.n	96d0 <ExFatFile::open(ExFatFile*, char const*, int)+0xcc>
    965c:	ldrb.w	r3, [sp, #16]
    9660:	ldr	r2, [sp, #20]
    9662:	str.w	r8, [sp]
    9666:	mov	r1, r5
    9668:	mov	r0, r6
    966a:	bl	9228 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)>
      break;
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
    966e:	cmp	r0, #0
    9670:	beq.n	9630 <ExFatFile::open(ExFatFile*, char const*, int)+0x2c>
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
    9672:	mov	r4, r6
    9674:	add	r7, sp, #24
    9676:	add.w	lr, r6, #48	; 0x30
    967a:	ldr	r0, [r4, #0]
    967c:	ldr	r1, [r4, #4]
    967e:	ldr	r2, [r4, #8]
    9680:	ldr	r3, [r4, #12]
    9682:	mov	r5, r7
    9684:	stmia	r5!, {r0, r1, r2, r3}
    9686:	adds	r4, #16
    9688:	cmp	r4, lr
    968a:	mov	r7, r5
    968c:	bne.n	967a <ExFatFile::open(ExFatFile*, char const*, int)+0x76>
    968e:	ldr	r0, [r4, #0]
    9690:	str	r0, [r5, #0]
#include "ExFatFile.h"
#include "ExFatVolume.h"
#include "upcase.h"
//------------------------------------------------------------------------------
bool ExFatFile::close() {
  bool rtn = sync();
    9692:	mov	r0, r6
    9694:	bl	9f84 <ExFatFile::sync()>
    if (!open(dirFile, &fname, O_RDONLY)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
    dirFile = &tmpDir;
    9698:	add	r5, sp, #24
#include "ExFatVolume.h"
#include "upcase.h"
//------------------------------------------------------------------------------
bool ExFatFile::close() {
  bool rtn = sync();
  m_attributes = FILE_ATTR_CLOSED;
    969a:	strb.w	r8, [r6, #49]	; 0x31
  m_flags = 0;
    969e:	strb.w	r8, [r6, #51]	; 0x33
    96a2:	ldr	r4, [sp, #12]
    96a4:	b.n	9644 <ExFatFile::open(ExFatFile*, char const*, int)+0x40>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
      path++;
    96a6:	adds	r4, #1
    96a8:	str	r4, [sp, #12]
  if (isOpen() || !dirFile->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
    96aa:	ldrb	r1, [r4, #0]
    96ac:	cmp	r1, #47	; 0x2f
    96ae:	beq.n	96a6 <ExFatFile::open(ExFatFile*, char const*, int)+0xa2>
      path++;
    }
    if (*path == 0) {
    96b0:	cbz	r1, 96e8 <ExFatFile::open(ExFatFile*, char const*, int)+0xe4>
bool ExFatFile::openRoot(ExFatVolume* vol) {
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
    96b2:	movs	r2, #56	; 0x38
    96b4:	add	r0, sp, #24
    96b6:	movs	r1, #0
      path++;
    }
    if (*path == 0) {
      return openRoot(dirFile->m_vol);
    }
    if (!tmpDir.openRoot(dirFile->m_vol)) {
    96b8:	ldr	r7, [r5, #32]
bool ExFatFile::openRoot(ExFatVolume* vol) {
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
    96ba:	bl	106cc <memset>
  m_attributes = FILE_ATTR_ROOT;
    96be:	movs	r2, #64	; 0x40
  m_vol = vol;
  m_flags = FILE_FLAG_READ;
    96c0:	movs	r3, #1
    }
    if (!tmpDir.openRoot(dirFile->m_vol)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile = &tmpDir;
    96c2:	add	r5, sp, #24
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
  m_attributes = FILE_ATTR_ROOT;
  m_vol = vol;
    96c4:	str	r7, [sp, #56]	; 0x38
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
  m_attributes = FILE_ATTR_ROOT;
    96c6:	strb.w	r2, [sp, #73]	; 0x49
  m_vol = vol;
  m_flags = FILE_FLAG_READ;
    96ca:	strb.w	r3, [sp, #75]	; 0x4b
    96ce:	b.n	9640 <ExFatFile::open(ExFatFile*, char const*, int)+0x3c>
    96d0:	ldrb.w	r3, [sp, #16]
    96d4:	ldr	r2, [sp, #20]
    96d6:	str.w	r9, [sp]
    96da:	mov	r1, r5
    96dc:	mov	r0, r6
    96de:	bl	9228 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)>
  }
  return open(dirFile, &fname, oflag);

 fail:
  return false;
}
    96e2:	add	sp, #84	; 0x54
    96e4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
bool ExFatFile::openRoot(ExFatVolume* vol) {
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
    96e8:	movs	r2, #56	; 0x38
    96ea:	mov	r0, r6
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
      path++;
    }
    if (*path == 0) {
      return openRoot(dirFile->m_vol);
    96ec:	ldr	r4, [r5, #32]
bool ExFatFile::openRoot(ExFatVolume* vol) {
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
    96ee:	bl	106cc <memset>
  m_attributes = FILE_ATTR_ROOT;
    96f2:	movs	r3, #64	; 0x40
  m_vol = vol;
  m_flags = FILE_FLAG_READ;
    96f4:	movs	r0, #1
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
  m_attributes = FILE_ATTR_ROOT;
  m_vol = vol;
    96f6:	str	r4, [r6, #32]
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
  m_attributes = FILE_ATTR_ROOT;
    96f8:	strb.w	r3, [r6, #49]	; 0x31
  m_vol = vol;
  m_flags = FILE_FLAG_READ;
    96fc:	strb.w	r0, [r6, #51]	; 0x33
    9700:	b.n	9632 <ExFatFile::open(ExFatFile*, char const*, int)+0x2e>
    9702:	nop

00009704 <ExFatFile::open(ExFatVolume*, char const*, int)>:
bool ExFatFile::open(const ExChar_t* path, int oflag) {
  return open(ExFatVolume::cwv(), path, oflag);
}
//------------------------------------------------------------------------------
bool ExFatFile::open(ExFatVolume* vol, const ExChar_t* path, int oflag) {
  return vol && open(vol->vwd(), path, oflag);
    9704:	cbz	r1, 970e <ExFatFile::open(ExFatVolume*, char const*, int)+0xa>
    9706:	add.w	r1, r1, #1096	; 0x448
    970a:	b.w	9604 <ExFatFile::open(ExFatFile*, char const*, int)>
}
    970e:	mov	r0, r1
    9710:	bx	lr
    9712:	nop

00009714 <ExFatFile::openNext(ExFatFile*, int)>:
  }
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::openNext(ExFatFile* dir, oflag_t oflag) {
  if (isOpen() || !dir->isDir() || (dir->curPosition() & 0X1F)) {
    9714:	ldrb.w	r3, [r0, #49]	; 0x31
    9718:	cbnz	r3, 9730 <ExFatFile::openNext(ExFatFile*, int)+0x1c>
    DBG_FAIL_MACRO;
  }
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::openNext(ExFatFile* dir, oflag_t oflag) {
    971a:	push	{r4, r5, lr}
  if (isOpen() || !dir->isDir() || (dir->curPosition() & 0X1F)) {
    971c:	ldrb.w	r4, [r1, #49]	; 0x31
    9720:	ands.w	r4, r4, #80	; 0x50
    DBG_FAIL_MACRO;
  }
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::openNext(ExFatFile* dir, oflag_t oflag) {
    9724:	sub	sp, #12
    9726:	mov	r5, r1
  if (isOpen() || !dir->isDir() || (dir->curPosition() & 0X1F)) {
    9728:	bne.n	9734 <ExFatFile::openNext(ExFatFile*, int)+0x20>
    goto fail;
  }
  return openRootFile(dir, nullptr, 0, oflag);

 fail:
  return false;
    972a:	mov	r0, r4
}
    972c:	add	sp, #12
    972e:	pop	{r4, r5, pc}
    goto fail;
  }
  return openRootFile(dir, nullptr, 0, oflag);

 fail:
  return false;
    9730:	movs	r0, #0
}
    9732:	bx	lr
  }
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::openNext(ExFatFile* dir, oflag_t oflag) {
  if (isOpen() || !dir->isDir() || (dir->curPosition() & 0X1F)) {
    9734:	ldrd	r4, r5, [r5]
    9738:	movs	r5, #0
    973a:	and.w	r4, r4, #31
    973e:	orrs	r4, r5
    9740:	beq.n	9748 <ExFatFile::openNext(ExFatFile*, int)+0x34>
    goto fail;
  }
  return openRootFile(dir, nullptr, 0, oflag);

 fail:
  return false;
    9742:	mov	r0, r3
}
    9744:	add	sp, #12
    9746:	pop	{r4, r5, pc}
bool ExFatFile::openNext(ExFatFile* dir, oflag_t oflag) {
  if (isOpen() || !dir->isDir() || (dir->curPosition() & 0X1F)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  return openRootFile(dir, nullptr, 0, oflag);
    9748:	str	r2, [sp, #0]
    974a:	mov	r2, r3
    974c:	bl	9228 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)>

 fail:
  return false;
}
    9750:	add	sp, #12
    9752:	pop	{r4, r5, pc}

00009754 <ExFatPartition::fatGet(unsigned long, unsigned long*) [clone .part.3]>:
    }
  }
  return 1;
}
//------------------------------------------------------------------------------
uint8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
    9754:	push	{r3, r4, r5, lr}
    9756:	mov	r4, r1
    9758:	ldr.w	r1, [r0, #1060]	; 0x424
    975c:	mov	r5, r2
    975e:	add.w	r1, r1, r4, lsr #7
    9762:	add.w	r0, r0, #528	; 0x210
    9766:	movs	r2, #0
    9768:	bl	8d34 <FsCache::get(unsigned long, unsigned char)>
    return -1;
  }
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));

  cache = dataCacheGet(sector, FsCache::CACHE_FOR_READ);
  if (!cache) {
    976c:	cbz	r0, 9780 <ExFatPartition::fatGet(unsigned long, unsigned long*) [clone .part.3]+0x2c>
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
}
inline uint32_t getLe32(const uint8_t* src) {
  return *reinterpret_cast<const uint32_t*>(src);
    976e:	lsls	r4, r4, #2
    9770:	ubfx	r4, r4, #0, #9
    9774:	ldr	r3, [r0, r4]
    return -1;
  }
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));

  if (next == EXFAT_EOC) {
    9776:	adds	r2, r3, #1
    9778:	beq.n	9784 <ExFatPartition::fatGet(unsigned long, unsigned long*) [clone .part.3]+0x30>
    return 0;
  }
  *value = next;
    977a:	str	r3, [r5, #0]
  return 1;
    977c:	movs	r0, #1
    977e:	pop	{r3, r4, r5, pc}
  }
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));

  cache = dataCacheGet(sector, FsCache::CACHE_FOR_READ);
  if (!cache) {
    return -1;
    9780:	movs	r0, #255	; 0xff
    9782:	pop	{r3, r4, r5, pc}
  }
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));

  if (next == EXFAT_EOC) {
    return 0;
    9784:	movs	r0, #0
  }
  *value = next;
  return 1;
}
    9786:	pop	{r3, r4, r5, pc}

00009788 <ExFatPartition::fatPut(unsigned long, unsigned long) [clone .part.4]>:
//------------------------------------------------------------------------------
bool ExFatPartition::fatPut(uint32_t cluster, uint32_t value) {
    9788:	push	{r3, r4, r5, lr}
    978a:	mov	r4, r1
    978c:	ldr.w	r1, [r0, #1060]	; 0x424
    9790:	mov	r5, r2
    9792:	add.w	r1, r1, r4, lsr #7
    9796:	add.w	r0, r0, #528	; 0x210
    979a:	movs	r2, #1
    979c:	bl	8d34 <FsCache::get(unsigned long, unsigned char)>
    DBG_FAIL_MACRO;
    goto fail;
  }
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
  cache = dataCacheGet(sector, FsCache::CACHE_FOR_WRITE);
  if (!cache) {
    97a0:	mov	r3, r0
    97a2:	cbz	r0, 97b0 <ExFatPartition::fatPut(unsigned long, unsigned long) [clone .part.4]+0x28>
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
}

inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
    97a4:	lsls	r4, r4, #2
    97a6:	ubfx	r4, r4, #0, #9
    DBG_FAIL_MACRO;
    goto fail;
  }
  setLe32(cache + ((cluster << 2) & m_sectorMask), value);
  return true;
    97aa:	movs	r0, #1
    97ac:	str	r5, [r3, r4]
    97ae:	pop	{r3, r4, r5, pc}

 fail:
  return false;
}
    97b0:	pop	{r3, r4, r5, pc}
    97b2:	nop

000097b4 <ExFatPartition::bitmapFind(unsigned long, unsigned long)>:
#include "../common/DebugMacros.h"
#include "ExFatVolume.h"
#include "../common/FsStructs.h"
//------------------------------------------------------------------------------
// return 0 if error, 1 if no space, else start cluster.
uint32_t ExFatPartition::bitmapFind(uint32_t cluster, uint32_t count) {
    97b4:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    97b8:	mov	r8, r0
    97ba:	mov	r9, r2
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
    97bc:	mov	fp, r1
    97be:	cmp	r1, #0
    97c0:	beq.n	984c <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x98>
    97c2:	subs	r7, r1, #2
  if (start >= m_clusterCount) {
    97c4:	ldr.w	r3, [r8, #1072]	; 0x430
    97c8:	cmp	r7, r3
    97ca:	bcs.n	9844 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x90>
    97cc:	and.w	r5, r7, #7
    97d0:	movs	r3, #1
    97d2:	lsl.w	r5, r3, r5
    97d6:	uxtb	r5, r5
    97d8:	ubfx	sl, r7, #3, #9
    start = 0;
  }
  uint32_t endAlloc = start;
  uint32_t bgnAlloc = start;
    97dc:	mov	r6, r7
uint32_t ExFatPartition::bitmapFind(uint32_t cluster, uint32_t count) {
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
  if (start >= m_clusterCount) {
    start = 0;
  }
  uint32_t endAlloc = start;
    97de:	mov	r4, r7
  bool bitmapModify(uint32_t cluster, uint32_t count, bool value);
  //----------------------------------------------------------------------------
  // Cache functions.
  uint8_t* bitmapCacheGet(uint32_t sector, uint8_t option) {
#if USE_EXFAT_BITMAP_CACHE
    return m_bitmapCache.get(sector, option);
    97e0:	ldr.w	r1, [r8, #1068]	; 0x42c
    97e4:	movs	r2, #0
    97e6:	add.w	r1, r1, r4, lsr #12
    97ea:	mov	r0, r8
    97ec:	bl	8d34 <FsCache::get(unsigned long, unsigned char)>
  uint8_t mask = 1 << (start & 7);
  while (true) {
    uint32_t sector = m_clusterHeapStartSector +
                     (endAlloc >> (m_bytesPerSectorShift + 3));
    cache = bitmapCacheGet(sector, FsCache::CACHE_FOR_READ);
    if (!cache) {
    97f0:	cbz	r0, 9824 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x70>
    97f2:	ldrb.w	r1, [r0, sl]
    97f6:	b.n	980e <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x5a>
    }
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
        endAlloc++;
        if (!(mask & cache[i])) {
          if ((endAlloc - bgnAlloc) == count) {
    97f8:	cmp	r2, r9
    97fa:	beq.n	9852 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x9e>
            return bgnAlloc + 2;
          }
        } else {
          bgnAlloc = endAlloc;
        }
        if (endAlloc == start) {
    97fc:	cmp	r7, r4
    97fe:	beq.n	9822 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x6e>
          return 1;
        }
        if (endAlloc >= m_clusterCount) {
    9800:	ldr.w	r2, [r8, #1072]	; 0x430
    9804:	cmp	r4, r2
    9806:	bcs.n	9838 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x84>
    cache = bitmapCacheGet(sector, FsCache::CACHE_FOR_READ);
    if (!cache) {
      return 0;
    }
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
    9808:	ands.w	r5, r3, #255	; 0xff
    980c:	beq.n	9828 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x74>
        endAlloc++;
    980e:	adds	r4, #1
        if (!(mask & cache[i])) {
    9810:	tst	r5, r1
    cache = bitmapCacheGet(sector, FsCache::CACHE_FOR_READ);
    if (!cache) {
      return 0;
    }
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
    9812:	mov.w	r3, r5, lsl #1
        endAlloc++;
        if (!(mask & cache[i])) {
          if ((endAlloc - bgnAlloc) == count) {
    9816:	sub.w	r2, r4, r6
      return 0;
    }
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
        endAlloc++;
        if (!(mask & cache[i])) {
    981a:	beq.n	97f8 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x44>
            return bgnAlloc + 2;
          }
        } else {
          bgnAlloc = endAlloc;
        }
        if (endAlloc == start) {
    981c:	cmp	r7, r4
    if (!cache) {
      return 0;
    }
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
        endAlloc++;
    981e:	mov	r6, r4
            return bgnAlloc + 2;
          }
        } else {
          bgnAlloc = endAlloc;
        }
        if (endAlloc == start) {
    9820:	bne.n	9800 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x4c>
          return 1;
    9822:	movs	r0, #1
      mask = 1;
    }
    i = 0;
  }
  return 0;
}
    9824:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9828:	add.w	sl, sl, #1
                     (endAlloc >> (m_bytesPerSectorShift + 3));
    cache = bitmapCacheGet(sector, FsCache::CACHE_FOR_READ);
    if (!cache) {
      return 0;
    }
    for (; i < sectorSize; i++) {
    982c:	cmp.w	sl, #512	; 0x200
          endAlloc = bgnAlloc = 0;
          i = sectorSize;
          break;
        }
      }
      mask = 1;
    9830:	mov.w	r5, #1
                     (endAlloc >> (m_bytesPerSectorShift + 3));
    cache = bitmapCacheGet(sector, FsCache::CACHE_FOR_READ);
    if (!cache) {
      return 0;
    }
    for (; i < sectorSize; i++) {
    9834:	bne.n	97f2 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x3e>
    9836:	b.n	983c <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x88>
        }
        if (endAlloc == start) {
          return 1;
        }
        if (endAlloc >= m_clusterCount) {
          endAlloc = bgnAlloc = 0;
    9838:	movs	r6, #0
    983a:	mov	r4, r6
          break;
        }
      }
      mask = 1;
    }
    i = 0;
    983c:	mov.w	sl, #0
    9840:	movs	r5, #1
    9842:	b.n	97e0 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x2c>
    9844:	movs	r7, #0
//------------------------------------------------------------------------------
// return 0 if error, 1 if no space, else start cluster.
uint32_t ExFatPartition::bitmapFind(uint32_t cluster, uint32_t count) {
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
  if (start >= m_clusterCount) {
    start = 0;
    9846:	mov	sl, r7
    9848:	movs	r5, #1
    984a:	b.n	97dc <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x28>
#include "ExFatVolume.h"
#include "../common/FsStructs.h"
//------------------------------------------------------------------------------
// return 0 if error, 1 if no space, else start cluster.
uint32_t ExFatPartition::bitmapFind(uint32_t cluster, uint32_t count) {
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
    984c:	ldr.w	r7, [r0, #1056]	; 0x420
    9850:	b.n	97c4 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x10>
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
        endAlloc++;
        if (!(mask & cache[i])) {
          if ((endAlloc - bgnAlloc) == count) {
            if (cluster == 0 && count == 1) {
    9852:	cmp.w	fp, #0
    9856:	bne.n	9862 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0xae>
    9858:	cmp.w	r9, #1
              // Start at found sector.  bitmapModify may increase this.
              m_bitmapStart = bgnAlloc;
    985c:	it	eq
    985e:	streq.w	r6, [r8, #1056]	; 0x420
            }
            return bgnAlloc + 2;
    9862:	adds	r0, r6, #2
    9864:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

00009868 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>:
  }
  return 0;
}
//------------------------------------------------------------------------------
bool ExFatPartition::bitmapModify(uint32_t cluster,
                                  uint32_t count, bool value) {
    9868:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint32_t sector;
  uint32_t start = cluster - 2;
    986c:	subs	r1, #2
  }
  return 0;
}
//------------------------------------------------------------------------------
bool ExFatPartition::bitmapModify(uint32_t cluster,
                                  uint32_t count, bool value) {
    986e:	mov	r8, r0
  uint32_t start = cluster - 2;
  size_t i;
  uint8_t* cache;
  uint8_t mask;
  cluster -= 2;
  if ((start + count) > m_clusterCount) {
    9870:	ldr.w	r0, [r0, #1072]	; 0x430
  }
  return 0;
}
//------------------------------------------------------------------------------
bool ExFatPartition::bitmapModify(uint32_t cluster,
                                  uint32_t count, bool value) {
    9874:	mov	r5, r2
  uint32_t start = cluster - 2;
  size_t i;
  uint8_t* cache;
  uint8_t mask;
  cluster -= 2;
  if ((start + count) > m_clusterCount) {
    9876:	adds	r2, r1, r2
    9878:	cmp	r2, r0
    987a:	bhi.n	98ee <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x86>
    987c:	mov	sl, r3
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (value) {
    if (start  <= m_bitmapStart && m_bitmapStart < (start + count)) {
    987e:	ldr.w	r3, [r8, #1056]	; 0x420
  cluster -= 2;
  if ((start + count) > m_clusterCount) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (value) {
    9882:	cmp.w	sl, #0
    9886:	bne.n	98f4 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x8c>
    if (start  <= m_bitmapStart && m_bitmapStart < (start + count)) {
      m_bitmapStart = (start + count) < m_clusterCount ? start + count : 0;
    }
  } else {
    if (start < m_bitmapStart) {
    9888:	cmp	r1, r3
      m_bitmapStart = start;
    988a:	it	cc
    988c:	strcc.w	r1, [r8, #1056]	; 0x420
    }
  }
  mask = 1 << (start & 7);
    9890:	and.w	r4, r1, #7
    9894:	movs	r2, #1
  sector = m_clusterHeapStartSector +
                   (start >> (m_bytesPerSectorShift + 3));
    9896:	ldr.w	r3, [r8, #1068]	; 0x42c
  } else {
    if (start < m_bitmapStart) {
      m_bitmapStart = start;
    }
  }
  mask = 1 << (start & 7);
    989a:	lsl.w	r4, r2, r4
    989e:	uxtb	r4, r4
  sector = m_clusterHeapStartSector +
                   (start >> (m_bytesPerSectorShift + 3));
    98a0:	add.w	r9, r3, r1, lsr #12
  i = (start >> 3) & m_sectorMask;
    98a4:	ubfx	r6, r1, #3, #9
    98a8:	movs	r2, #1
    98aa:	mov	r1, r9
    98ac:	mov	r0, r8
  while (true) {
    cache = bitmapCacheGet(sector++, FsCache::CACHE_FOR_WRITE);
    98ae:	add	r9, r2
    98b0:	bl	8d34 <FsCache::get(unsigned long, unsigned char)>
    if (!cache) {
    98b4:	cbz	r0, 98ee <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x86>
    98b6:	adds	r7, r0, r6
    98b8:	add.w	r0, r0, #512	; 0x200
    98bc:	ldrb.w	r2, [r7], #1
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (; i < m_bytesPerSector; i++) {
      for (; mask; mask <<= 1) {
        if (value == static_cast<bool>(cache[i] & mask)) {
    98c0:	tst	r2, r4
    98c2:	ite	ne
    98c4:	movne	r6, #1
    98c6:	moveq	r6, #0
    98c8:	cmp	r6, sl
          DBG_FAIL_MACRO;
          goto fail;
        }
        cache[i] ^= mask;
    98ca:	eor.w	r2, r2, r4
    if (!cache) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (; i < m_bytesPerSector; i++) {
      for (; mask; mask <<= 1) {
    98ce:	mov.w	r4, r4, lsl #1
        if (value == static_cast<bool>(cache[i] & mask)) {
    98d2:	beq.n	98ee <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x86>
          DBG_FAIL_MACRO;
          goto fail;
        }
        cache[i] ^= mask;
        if (--count == 0) {
    98d4:	subs	r5, #1
      for (; mask; mask <<= 1) {
        if (value == static_cast<bool>(cache[i] & mask)) {
          DBG_FAIL_MACRO;
          goto fail;
        }
        cache[i] ^= mask;
    98d6:	strb.w	r2, [r7, #-1]
        if (--count == 0) {
    98da:	beq.n	9908 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0xa0>
    if (!cache) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (; i < m_bytesPerSector; i++) {
      for (; mask; mask <<= 1) {
    98dc:	ands.w	r4, r4, #255	; 0xff
    98e0:	bne.n	98c0 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x58>
    cache = bitmapCacheGet(sector++, FsCache::CACHE_FOR_WRITE);
    if (!cache) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (; i < m_bytesPerSector; i++) {
    98e2:	cmp	r0, r7
          return true;
        }
      }
      mask = 1;
    }
    i = 0;
    98e4:	mov	r6, r4
    98e6:	mov.w	r4, #1
    cache = bitmapCacheGet(sector++, FsCache::CACHE_FOR_WRITE);
    if (!cache) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (; i < m_bytesPerSector; i++) {
    98ea:	bne.n	98bc <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x54>
    98ec:	b.n	98a8 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x40>
    }
    i = 0;
  }

 fail:
  return false;
    98ee:	movs	r0, #0
    98f0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if ((start + count) > m_clusterCount) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (value) {
    if (start  <= m_bitmapStart && m_bitmapStart < (start + count)) {
    98f4:	cmp	r1, r3
    98f6:	bhi.n	9890 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x28>
    98f8:	cmp	r2, r3
    98fa:	bls.n	9890 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x28>
      m_bitmapStart = (start + count) < m_clusterCount ? start + count : 0;
    98fc:	cmp	r2, r0
    98fe:	it	cs
    9900:	movcs	r2, #0
    9902:	str.w	r2, [r8, #1056]	; 0x420
    9906:	b.n	9890 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x28>
          DBG_FAIL_MACRO;
          goto fail;
        }
        cache[i] ^= mask;
        if (--count == 0) {
          return true;
    9908:	movs	r0, #1
    i = 0;
  }

 fail:
  return false;
}
    990a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    990e:	nop

00009910 <ExFatPartition::chainSize(unsigned long)>:
//------------------------------------------------------------------------------
uint32_t ExFatPartition::chainSize(uint32_t cluster) {
    9910:	push	{r4, r5, r6, lr}
    9912:	sub	sp, #8
    9914:	add	r6, sp, #8
    9916:	mov	r5, r0
    9918:	str.w	r1, [r6, #-4]!
  uint32_t n = 0;
    991c:	movs	r4, #0
uint8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
  uint8_t* cache;
  uint32_t next;
  uint32_t sector;

  if (cluster > (m_clusterCount + 1)) {
    991e:	ldr.w	r3, [r5, #1072]	; 0x430
//------------------------------------------------------------------------------
uint32_t ExFatPartition::chainSize(uint32_t cluster) {
  uint32_t n = 0;
  int8_t status;
  do {
    status = fatGet(cluster, & cluster);
    9922:	ldr	r1, [sp, #4]
uint8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
  uint8_t* cache;
  uint32_t next;
  uint32_t sector;

  if (cluster > (m_clusterCount + 1)) {
    9924:	adds	r3, #1
    9926:	cmp	r1, r3
    9928:	bls.n	9930 <ExFatPartition::chainSize(unsigned long)+0x20>
uint32_t ExFatPartition::chainSize(uint32_t cluster) {
  uint32_t n = 0;
  int8_t status;
  do {
    status = fatGet(cluster, & cluster);
    if (status < 0) return 0;
    992a:	movs	r0, #0
    n++;
  } while (status);
  return n;
}
    992c:	add	sp, #8
    992e:	pop	{r4, r5, r6, pc}
    9930:	mov	r2, r6
    9932:	mov	r0, r5
    9934:	bl	9754 <ExFatPartition::fatGet(unsigned long, unsigned long*) [clone .part.3]>
//------------------------------------------------------------------------------
uint32_t ExFatPartition::chainSize(uint32_t cluster) {
  uint32_t n = 0;
  int8_t status;
  do {
    status = fatGet(cluster, & cluster);
    9938:	sxtb	r0, r0
    if (status < 0) return 0;
    993a:	cmp	r0, #0
    993c:	blt.n	992a <ExFatPartition::chainSize(unsigned long)+0x1a>
    n++;
    993e:	add.w	r4, r4, #1
}
//------------------------------------------------------------------------------
uint32_t ExFatPartition::chainSize(uint32_t cluster) {
  uint32_t n = 0;
  int8_t status;
  do {
    9942:	bne.n	991e <ExFatPartition::chainSize(unsigned long)+0xe>
    status = fatGet(cluster, & cluster);
    if (status < 0) return 0;
    n++;
    9944:	mov	r0, r4
  } while (status);
  return n;
}
    9946:	add	sp, #8
    9948:	pop	{r4, r5, r6, pc}
    994a:	nop

0000994c <ExFatPartition::dirCache(DirPos_t*, unsigned char)>:
//------------------------------------------------------------------------------
uint8_t* ExFatPartition::dirCache(DirPos_t* pos, uint8_t options) {
    994c:	push	{r3, r4, r5, r6, r7, lr}
    994e:	mov	r6, r1
#endif  // USE_EXFAT_BITMAP_CACHE
  }
  void dataCacheDirty() {m_dataCache.dirty();}
  void dataCacheInvalidate() {m_dataCache.invalidate();}
  uint8_t* dataCacheGet(uint32_t sector, uint8_t option) {
    return m_dataCache.get(sector, option);
    9950:	ldmia.w	r6, {r3, r5}
    9954:	ldr.w	r1, [r0, #1080]	; 0x438
    9958:	ldr.w	r4, [r0, #1068]	; 0x42c
    995c:	ldrb.w	r7, [r0, #1093]	; 0x445
    9960:	ands	r1, r5
    9962:	subs	r3, #2
    9964:	add.w	r1, r4, r1, lsr #9
    9968:	lsls	r3, r7
    996a:	add	r1, r3
    996c:	add.w	r0, r0, #528	; 0x210
    9970:	bl	8d34 <FsCache::get(unsigned long, unsigned char)>
  uint32_t sector = clusterStartSector(pos->cluster);
  sector += (m_clusterMask & pos->position) >> m_bytesPerSectorShift;
  uint8_t* cache = dataCacheGet(sector, options);
  return cache ? cache + (pos->position & m_sectorMask) : nullptr;
    9974:	cbz	r0, 997e <ExFatPartition::dirCache(DirPos_t*, unsigned char)+0x32>
    9976:	ldr	r3, [r6, #4]
    9978:	ubfx	r3, r3, #0, #9
    997c:	add	r0, r3
}
    997e:	pop	{r3, r4, r5, r6, r7, pc}

00009980 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)>:
//------------------------------------------------------------------------------
// return -1 error, 0 EOC, 1 OK
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
    9980:	push	{r4, r5, r6, lr}
  int8_t status;
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
    9982:	ldr	r4, [r1, #4]
  uint8_t* cache = dataCacheGet(sector, options);
  return cache ? cache + (pos->position & m_sectorMask) : nullptr;
}
//------------------------------------------------------------------------------
// return -1 error, 0 EOC, 1 OK
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
    9984:	mov	r5, r1
  int8_t status;
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
  pos->position += offset;
    9986:	adds	r3, r4, r2
}
//------------------------------------------------------------------------------
// return -1 error, 0 EOC, 1 OK
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
  int8_t status;
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
    9988:	ldr.w	r1, [r0, #1080]	; 0x438
  pos->position += offset;
    998c:	str	r3, [r5, #4]
  tmp >>= bytesPerClusterShift();
    998e:	ldrb.w	r3, [r0, #1093]	; 0x445
}
//------------------------------------------------------------------------------
// return -1 error, 0 EOC, 1 OK
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
  int8_t status;
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
    9992:	ands	r4, r1
  pos->position += offset;
  tmp >>= bytesPerClusterShift();
    9994:	adds	r3, #9
}
//------------------------------------------------------------------------------
// return -1 error, 0 EOC, 1 OK
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
  int8_t status;
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
    9996:	add	r2, r4
  pos->position += offset;
  tmp >>= bytesPerClusterShift();
    9998:	uxtb	r3, r3
    999a:	lsr.w	r4, r2, r3
  uint8_t* cache = dataCacheGet(sector, options);
  return cache ? cache + (pos->position & m_sectorMask) : nullptr;
}
//------------------------------------------------------------------------------
// return -1 error, 0 EOC, 1 OK
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
    999e:	mov	r6, r0
  int8_t status;
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
  pos->position += offset;
  tmp >>= bytesPerClusterShift();
  while (tmp--) {
    99a0:	cbz	r4, 99b2 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x32>
    if (pos->isContiguous) {
    99a2:	ldrb	r3, [r5, #8]
    99a4:	cbz	r3, 99b6 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x36>
      pos->cluster++;
    99a6:	ldr	r3, [r5, #0]
    99a8:	adds	r3, #1
    99aa:	str	r3, [r5, #0]
    99ac:	subs	r4, #1
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
  int8_t status;
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
  pos->position += offset;
  tmp >>= bytesPerClusterShift();
  while (tmp--) {
    99ae:	cmp	r4, #0
    99b0:	bne.n	99a2 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x22>
      if (status != 1) {
        return status;
      }
    }
  }
  return 1;
    99b2:	movs	r0, #1
    99b4:	pop	{r4, r5, r6, pc}
uint8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
  uint8_t* cache;
  uint32_t next;
  uint32_t sector;

  if (cluster > (m_clusterCount + 1)) {
    99b6:	ldr.w	r3, [r6, #1072]	; 0x430
  tmp >>= bytesPerClusterShift();
  while (tmp--) {
    if (pos->isContiguous) {
      pos->cluster++;
    } else {
      status = fatGet(pos->cluster, &pos->cluster);
    99ba:	ldr	r1, [r5, #0]
uint8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
  uint8_t* cache;
  uint32_t next;
  uint32_t sector;

  if (cluster > (m_clusterCount + 1)) {
    99bc:	adds	r3, #1
    99be:	cmp	r1, r3
    99c0:	bls.n	99c8 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x48>
  tmp >>= bytesPerClusterShift();
  while (tmp--) {
    if (pos->isContiguous) {
      pos->cluster++;
    } else {
      status = fatGet(pos->cluster, &pos->cluster);
    99c2:	mov.w	r0, #4294967295
        return status;
      }
    }
  }
  return 1;
}
    99c6:	pop	{r4, r5, r6, pc}
    99c8:	mov	r2, r5
    99ca:	mov	r0, r6
    99cc:	bl	9754 <ExFatPartition::fatGet(unsigned long, unsigned long*) [clone .part.3]>
  tmp >>= bytesPerClusterShift();
  while (tmp--) {
    if (pos->isContiguous) {
      pos->cluster++;
    } else {
      status = fatGet(pos->cluster, &pos->cluster);
    99d0:	sxtb	r0, r0
      if (status != 1) {
    99d2:	cmp	r0, #1
    99d4:	beq.n	99ac <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x2c>
    99d6:	pop	{r4, r5, r6, pc}

000099d8 <ExFatPartition::fatGet(unsigned long, unsigned long*)>:
uint8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
  uint8_t* cache;
  uint32_t next;
  uint32_t sector;

  if (cluster > (m_clusterCount + 1)) {
    99d8:	ldr.w	r3, [r0, #1072]	; 0x430
    99dc:	adds	r3, #1
    99de:	cmp	r3, r1
    99e0:	bcs.n	99e6 <ExFatPartition::fatGet(unsigned long, unsigned long*)+0xe>
  if (next == EXFAT_EOC) {
    return 0;
  }
  *value = next;
  return 1;
}
    99e2:	movs	r0, #255	; 0xff
    99e4:	bx	lr
    99e6:	b.w	9754 <ExFatPartition::fatGet(unsigned long, unsigned long*) [clone .part.3]>
    99ea:	nop

000099ec <ExFatPartition::fatPut(unsigned long, unsigned long)>:
//------------------------------------------------------------------------------
bool ExFatPartition::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t sector;
  uint8_t* cache;
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
    99ec:	cmp	r1, #1
    99ee:	bls.n	9a08 <ExFatPartition::fatPut(unsigned long, unsigned long)+0x1c>
    99f0:	ldr.w	r3, [r0, #1072]	; 0x430
    99f4:	adds	r3, #1
    99f6:	cmp	r1, r3
  }
  *value = next;
  return 1;
}
//------------------------------------------------------------------------------
bool ExFatPartition::fatPut(uint32_t cluster, uint32_t value) {
    99f8:	push	{r4}
  uint32_t sector;
  uint8_t* cache;
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
    99fa:	bls.n	9a02 <ExFatPartition::fatPut(unsigned long, unsigned long)+0x16>
  setLe32(cache + ((cluster << 2) & m_sectorMask), value);
  return true;

 fail:
  return false;
}
    99fc:	movs	r0, #0
    99fe:	pop	{r4}
    9a00:	bx	lr
    9a02:	pop	{r4}
    9a04:	b.w	9788 <ExFatPartition::fatPut(unsigned long, unsigned long) [clone .part.4]>
    9a08:	movs	r0, #0
    9a0a:	bx	lr

00009a0c <ExFatPartition::freeChain(unsigned long)>:
//------------------------------------------------------------------------------
bool ExFatPartition::freeChain(uint32_t cluster) {
    9a0c:	push	{r4, r5, r6, r7, lr}
    9a0e:	mov	r4, r1
    9a10:	sub	sp, #12
    9a12:	mov	r5, r0
  uint32_t next;
  uint32_t start = cluster;
    9a14:	mov	r6, r1
uint8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
  uint8_t* cache;
  uint32_t next;
  uint32_t sector;

  if (cluster > (m_clusterCount + 1)) {
    9a16:	ldr.w	r3, [r5, #1072]	; 0x430
    9a1a:	adds	r3, #1
    9a1c:	cmp	r4, r3
    9a1e:	bls.n	9a26 <ExFatPartition::freeChain(unsigned long)+0x1a>
  } while (status);

  return true;

 fail:
  return false;
    9a20:	movs	r0, #0
}
    9a22:	add	sp, #12
    9a24:	pop	{r4, r5, r6, r7, pc}
    9a26:	add	r2, sp, #4
    9a28:	mov	r1, r4
    9a2a:	mov	r0, r5
    9a2c:	bl	9754 <ExFatPartition::fatGet(unsigned long, unsigned long*) [clone .part.3]>
bool ExFatPartition::freeChain(uint32_t cluster) {
  uint32_t next;
  uint32_t start = cluster;
  int8_t status;
  do {
    status = fatGet(cluster, &next);
    9a30:	sxtb	r7, r0
    if (status < 0) {
    9a32:	cmp	r7, #0
    9a34:	blt.n	9a20 <ExFatPartition::freeChain(unsigned long)+0x14>
}
//------------------------------------------------------------------------------
bool ExFatPartition::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t sector;
  uint8_t* cache;
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
    9a36:	cmp	r4, #1
    9a38:	bls.n	9a20 <ExFatPartition::freeChain(unsigned long)+0x14>
    9a3a:	ldr.w	r3, [r5, #1072]	; 0x430
    9a3e:	adds	r3, #1
    9a40:	cmp	r4, r3
    9a42:	bhi.n	9a20 <ExFatPartition::freeChain(unsigned long)+0x14>
    9a44:	movs	r2, #0
    9a46:	mov	r1, r4
    9a48:	mov	r0, r5
    9a4a:	bl	9788 <ExFatPartition::fatPut(unsigned long, unsigned long) [clone .part.4]>
    status = fatGet(cluster, &next);
    if (status < 0) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!fatPut(cluster, 0)) {
    9a4e:	cmp	r0, #0
    9a50:	beq.n	9a20 <ExFatPartition::freeChain(unsigned long)+0x14>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if ((cluster + 1) != next || status == 0) {
    9a52:	ldr	r3, [sp, #4]
    9a54:	adds	r4, #1
    9a56:	cmp	r4, r3
    9a58:	bne.n	9a72 <ExFatPartition::freeChain(unsigned long)+0x66>
    9a5a:	cmp	r7, #0
    9a5c:	bne.n	9a16 <ExFatPartition::freeChain(unsigned long)+0xa>
      if (!bitmapModify(start, cluster - start + 1, 0)) {
    9a5e:	mov	r3, r7
    9a60:	subs	r2, r4, r6
    9a62:	mov	r1, r6
    9a64:	mov	r0, r5
    9a66:	bl	9868 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    9a6a:	cmp	r0, #0
    9a6c:	beq.n	9a20 <ExFatPartition::freeChain(unsigned long)+0x14>

  return true;

 fail:
  return false;
}
    9a6e:	add	sp, #12
    9a70:	pop	{r4, r5, r6, r7, pc}
    if (!fatPut(cluster, 0)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if ((cluster + 1) != next || status == 0) {
      if (!bitmapModify(start, cluster - start + 1, 0)) {
    9a72:	subs	r2, r4, r6
    9a74:	mov	r1, r6
    9a76:	movs	r3, #0
    9a78:	mov	r0, r5
    9a7a:	bl	9868 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    9a7e:	cmp	r0, #0
    9a80:	beq.n	9a20 <ExFatPartition::freeChain(unsigned long)+0x14>
        DBG_FAIL_MACRO;
        goto fail;
      }
      start = next;
    9a82:	ldr	r4, [sp, #4]
//------------------------------------------------------------------------------
bool ExFatPartition::freeChain(uint32_t cluster) {
  uint32_t next;
  uint32_t start = cluster;
  int8_t status;
  do {
    9a84:	cmp	r7, #0
    9a86:	beq.n	9a22 <ExFatPartition::freeChain(unsigned long)+0x16>
    if ((cluster + 1) != next || status == 0) {
      if (!bitmapModify(start, cluster - start + 1, 0)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      start = next;
    9a88:	mov	r6, r4
    9a8a:	b.n	9a16 <ExFatPartition::freeChain(unsigned long)+0xa>

00009a8c <ExFatPartition::freeClusterCount()>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
uint32_t ExFatPartition::freeClusterCount() {
    9a8c:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint32_t nc = 0;
  uint32_t sector = m_clusterHeapStartSector;
  uint32_t usedCount = 0;
    9a90:	movs	r4, #0
  return false;
}
//------------------------------------------------------------------------------
uint32_t ExFatPartition::freeClusterCount() {
  uint32_t nc = 0;
  uint32_t sector = m_clusterHeapStartSector;
    9a92:	ldr.w	r6, [r0, #1068]	; 0x42c

 fail:
  return false;
}
//------------------------------------------------------------------------------
uint32_t ExFatPartition::freeClusterCount() {
    9a96:	mov	r8, r0
    9a98:	add.w	r7, r0, #528	; 0x210
  uint32_t nc = 0;
    9a9c:	mov	r5, r4
    9a9e:	mov	r1, r6
    9aa0:	movs	r2, #0
    9aa2:	mov	r0, r7
  uint32_t sector = m_clusterHeapStartSector;
  uint32_t usedCount = 0;
  uint8_t* cache;

  while (true) {
    cache = dataCacheGet(sector++, FsCache::CACHE_FOR_READ);
    9aa4:	adds	r6, #1
    9aa6:	bl	8d34 <FsCache::get(unsigned long, unsigned char)>
    if (!cache) {
    9aaa:	cbz	r0, 9afa <ExFatPartition::freeClusterCount()+0x6e>
    9aac:	add.w	lr, r0, #4294967295
    9ab0:	ldr.w	ip, [r8, #1072]	; 0x430
      return 0;
    }
    for (size_t i = 0; i < m_bytesPerSector; i++) {
      if (cache[i] == 0XFF) {
    9ab4:	ldrb.w	r0, [lr, #1]!
    9ab8:	cmp	r0, #255	; 0xff
    9aba:	add.w	r9, r5, #4096	; 0x1000
    9abe:	beq.n	9ae8 <ExFatPartition::freeClusterCount()+0x5c>
        usedCount+= 8;
      } else if (cache[i]) {
    9ac0:	cbz	r0, 9ad6 <ExFatPartition::freeClusterCount()+0x4a>
    9ac2:	movs	r2, #8
    9ac4:	movs	r3, #1
        for (uint8_t mask = 1; mask ; mask <<=1) {
          if ((mask & cache[i])) {
    9ac6:	tst	r0, r3
    }
    for (size_t i = 0; i < m_bytesPerSector; i++) {
      if (cache[i] == 0XFF) {
        usedCount+= 8;
      } else if (cache[i]) {
        for (uint8_t mask = 1; mask ; mask <<=1) {
    9ac8:	mov.w	r1, r3, lsl #1
          if ((mask & cache[i])) {
            usedCount++;
    9acc:	it	ne
    9ace:	addne	r4, #1
    }
    for (size_t i = 0; i < m_bytesPerSector; i++) {
      if (cache[i] == 0XFF) {
        usedCount+= 8;
      } else if (cache[i]) {
        for (uint8_t mask = 1; mask ; mask <<=1) {
    9ad0:	subs	r2, #1
    9ad2:	uxtb	r3, r1
    9ad4:	bne.n	9ac6 <ExFatPartition::freeClusterCount()+0x3a>
          if ((mask & cache[i])) {
            usedCount++;
          }
        }
      }
      nc += 8;
    9ad6:	adds	r5, #8
      if (nc >= m_clusterCount) {
    9ad8:	cmp	ip, r5
    9ada:	bls.n	9af2 <ExFatPartition::freeClusterCount()+0x66>
  while (true) {
    cache = dataCacheGet(sector++, FsCache::CACHE_FOR_READ);
    if (!cache) {
      return 0;
    }
    for (size_t i = 0; i < m_bytesPerSector; i++) {
    9adc:	cmp	r5, r9
    9ade:	beq.n	9a9e <ExFatPartition::freeClusterCount()+0x12>
      if (cache[i] == 0XFF) {
    9ae0:	ldrb.w	r0, [lr, #1]!
    9ae4:	cmp	r0, #255	; 0xff
    9ae6:	bne.n	9ac0 <ExFatPartition::freeClusterCount()+0x34>
          if ((mask & cache[i])) {
            usedCount++;
          }
        }
      }
      nc += 8;
    9ae8:	adds	r5, #8
      if (nc >= m_clusterCount) {
    9aea:	cmp	ip, r5
    if (!cache) {
      return 0;
    }
    for (size_t i = 0; i < m_bytesPerSector; i++) {
      if (cache[i] == 0XFF) {
        usedCount+= 8;
    9aec:	add.w	r4, r4, #8
            usedCount++;
          }
        }
      }
      nc += 8;
      if (nc >= m_clusterCount) {
    9af0:	bhi.n	9adc <ExFatPartition::freeClusterCount()+0x50>
        return m_clusterCount - usedCount;
    9af2:	rsb	r0, r4, ip
    9af6:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      }
    }
  }
}
    9afa:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    9afe:	nop

00009b00 <ExFatPartition::init(SdSpiCard*, unsigned char)>:
//------------------------------------------------------------------------------
bool ExFatPartition::init(BlockDevice* dev, uint8_t part) {
    9b00:	push	{r3, r4, r5, r6, r7, lr}
    9b02:	mov	r4, r0
  pbs_t* pbs;
  BpbExFat_t* bpb;
  MbrSector_t* mbr;
  MbrPart_t* mp;

  m_fatType = 0;
    9b04:	movs	r3, #0
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    m_sector = 0XFFFFFFFF;
    9b06:	mov.w	r6, #4294967295
    9b0a:	add.w	r7, r0, #528	; 0x210
  m_blockDev = dev;
    9b0e:	str.w	r1, [r0, #1088]	; 0x440
  }
  /** Initialize the cache.
   * \param[in] blockDev Block device for this cache.
   */
  void init(BlockDevice* blockDev) {
    m_blockDev = blockDev;
    9b12:	str	r1, [r0, #4]
    9b14:	str.w	r1, [r0, #532]	; 0x214
      }
    }
  }
}
//------------------------------------------------------------------------------
bool ExFatPartition::init(BlockDevice* dev, uint8_t part) {
    9b18:	mov	r5, r2
    9b1a:	mov	r0, r7
  pbs_t* pbs;
  BpbExFat_t* bpb;
  MbrSector_t* mbr;
  MbrPart_t* mp;

  m_fatType = 0;
    9b1c:	strb.w	r3, [r4, #1092]	; 0x444
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    9b20:	strb	r3, [r4, #0]
    9b22:	strb.w	r3, [r4, #528]	; 0x210
    m_sector = 0XFFFFFFFF;
    9b26:	str	r6, [r4, #12]
    9b28:	str.w	r6, [r4, #540]	; 0x21c
    9b2c:	mov	r2, r3
    9b2e:	mov	r1, r3
    9b30:	bl	8d34 <FsCache::get(unsigned long, unsigned char)>
  m_blockDev = dev;
  cacheInit(m_blockDev);
  cache = dataCacheGet(0, FsCache::CACHE_FOR_READ);
  if (part > 4 || !cache) {
    9b34:	cmp	r5, #4
    9b36:	bhi.n	9b52 <ExFatPartition::init(SdSpiCard*, unsigned char)+0x52>
    9b38:	mov	r6, r0
    9b3a:	cbz	r0, 9b52 <ExFatPartition::init(SdSpiCard*, unsigned char)+0x52>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (part >= 1) {
    9b3c:	cbnz	r5, 9b56 <ExFatPartition::init(SdSpiCard*, unsigned char)+0x56>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  pbs = reinterpret_cast<pbs_t*>(cache);
  if (strncmp(pbs->oemName, "EXFAT", 5)) {
    9b3e:	movs	r2, #5
    9b40:	ldr	r1, [pc, #152]	; (9bdc <ExFatPartition::init(SdSpiCard*, unsigned char)+0xdc>)
    9b42:	adds	r0, r6, #3
    9b44:	bl	10ddc <strncmp>
    9b48:	cbnz	r0, 9b52 <ExFatPartition::init(SdSpiCard*, unsigned char)+0x52>
    DBG_FAIL_MACRO;
    goto fail;
  }
  bpb = reinterpret_cast<BpbExFat_t*>(pbs->bpb);
  if (bpb->bytesPerSectorShift != m_bytesPerSectorShift) {
    9b4a:	ldrb.w	r3, [r6, #108]	; 0x6c
    9b4e:	cmp	r3, #9
    9b50:	beq.n	9b86 <ExFatPartition::init(SdSpiCard*, unsigned char)+0x86>
  bitmapFind(0, 1);
  m_fatType = FAT_TYPE_EXFAT;
  return true;

 fail:
  return false;
    9b52:	movs	r0, #0
    9b54:	pop	{r3, r4, r5, r6, r7, pc}
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (part >= 1) {
    mbr = reinterpret_cast<MbrSector_t*>(cache);
    mp = &mbr->part[part - 1];
    9b56:	subs	r3, r5, #1
    if ((mp->boot != 0 && mp->boot != 0X80) || mp->type == 0) {
    9b58:	add.w	r3, r0, r3, lsl #4
    9b5c:	ldrb.w	r2, [r3, #446]	; 0x1be
    9b60:	ands.w	r2, r2, #127	; 0x7f
    9b64:	bne.n	9b52 <ExFatPartition::init(SdSpiCard*, unsigned char)+0x52>
    9b66:	ldrb.w	r3, [r3, #450]	; 0x1c2
    9b6a:	cmp	r3, #0
    9b6c:	beq.n	9b52 <ExFatPartition::init(SdSpiCard*, unsigned char)+0x52>
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
}
inline uint32_t getLe32(const uint8_t* src) {
  return *reinterpret_cast<const uint32_t*>(src);
    9b6e:	add.w	r5, r0, r5, lsl #4
    9b72:	mov	r0, r7
    9b74:	ldr.w	r5, [r5, #438]	; 0x1b6
    9b78:	mov	r1, r5
    9b7a:	bl	8d34 <FsCache::get(unsigned long, unsigned char)>
      DBG_FAIL_MACRO;
      goto fail;
    }
    volStart = getLe32(mp->relativeSectors);
    cache = dataCacheGet(volStart, FsCache::CACHE_FOR_READ);
    if (!cache) {
    9b7e:	mov	r6, r0
    9b80:	cmp	r0, #0
    9b82:	bne.n	9b3e <ExFatPartition::init(SdSpiCard*, unsigned char)+0x3e>
    9b84:	b.n	9b52 <ExFatPartition::init(SdSpiCard*, unsigned char)+0x52>
  bpb = reinterpret_cast<BpbExFat_t*>(pbs->bpb);
  if (bpb->bytesPerSectorShift != m_bytesPerSectorShift) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_fatStartSector = volStart + getLe32(bpb->fatOffset);
    9b86:	ldr	r3, [r6, #80]	; 0x50
    9b88:	add	r3, r5
    9b8a:	str.w	r3, [r4, #1060]	; 0x424
    9b8e:	ldr	r3, [r6, #84]	; 0x54
  m_fatLength = getLe32(bpb->fatLength);
    9b90:	str.w	r3, [r4, #1064]	; 0x428
  m_clusterHeapStartSector = volStart + getLe32(bpb->clusterHeapOffset);
    9b94:	ldr	r3, [r6, #88]	; 0x58
    9b96:	add	r5, r3
    9b98:	str.w	r5, [r4, #1068]	; 0x42c
    9b9c:	ldr	r3, [r6, #92]	; 0x5c
  m_clusterCount = getLe32(bpb->clusterCount);
    9b9e:	str.w	r3, [r4, #1072]	; 0x430
    9ba2:	ldr	r3, [r6, #96]	; 0x60
  m_rootDirectoryCluster = getLe32(bpb->rootDirectoryCluster);
    9ba4:	str.w	r3, [r4, #1076]	; 0x434
  m_sectorsPerClusterShift = bpb->sectorsPerClusterShift;
    9ba8:	ldrb.w	r3, [r6, #109]	; 0x6d
    9bac:	strb.w	r3, [r4, #1093]	; 0x445
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
    9bb0:	movs	r5, #1
    9bb2:	adds	r3, #9
    9bb4:	lsl.w	r3, r5, r3
  m_clusterMask = m_bytesPerCluster - 1;
    9bb8:	subs	r2, r3, #1
  // Set m_bitmapStart to first free cluster.
  m_bitmapStart = 0;
    9bba:	str.w	r0, [r4, #1056]	; 0x420
  bitmapFind(0, 1);
    9bbe:	mov	r1, r0
  m_fatLength = getLe32(bpb->fatLength);
  m_clusterHeapStartSector = volStart + getLe32(bpb->clusterHeapOffset);
  m_clusterCount = getLe32(bpb->clusterCount);
  m_rootDirectoryCluster = getLe32(bpb->rootDirectoryCluster);
  m_sectorsPerClusterShift = bpb->sectorsPerClusterShift;
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
    9bc0:	str.w	r3, [r4, #1084]	; 0x43c
  m_clusterMask = m_bytesPerCluster - 1;
    9bc4:	str.w	r2, [r4, #1080]	; 0x438
  // Set m_bitmapStart to first free cluster.
  m_bitmapStart = 0;
  bitmapFind(0, 1);
    9bc8:	mov	r0, r4
    9bca:	mov	r2, r5
    9bcc:	bl	97b4 <ExFatPartition::bitmapFind(unsigned long, unsigned long)>
  m_fatType = FAT_TYPE_EXFAT;
    9bd0:	movs	r3, #64	; 0x40
    9bd2:	strb.w	r3, [r4, #1092]	; 0x444
  return true;
    9bd6:	mov	r0, r5

 fail:
  return false;
}
    9bd8:	pop	{r3, r4, r5, r6, r7, pc}
    9bda:	nop
    9bdc:	.word	0x000146e0

00009be0 <ExFatPartition::rootLength()>:
//------------------------------------------------------------------------------
uint32_t ExFatPartition::rootLength() {
    9be0:	push	{r4, lr}
    9be2:	mov	r4, r0
  uint32_t nc = chainSize(m_rootDirectoryCluster);
    9be4:	ldr.w	r1, [r0, #1076]	; 0x434
    9be8:	bl	9910 <ExFatPartition::chainSize(unsigned long)>
  return nc << bytesPerClusterShift();
    9bec:	ldrb.w	r3, [r4, #1093]	; 0x445
    9bf0:	adds	r3, #9
    9bf2:	uxtb	r3, r3
}
    9bf4:	lsls	r0, r3
    9bf6:	pop	{r4, pc}

00009bf8 <exFatCmpName(DirName_t const*, char const*, unsigned int, unsigned int)>:
}
//------------------------------------------------------------------------------
bool exFatCmpName(const DirName_t* unicode,
                  const char* name, size_t offset, size_t n) {
  uint16_t u;
  for (size_t i = 0; i < n; i++) {
    9bf8:	cbz	r3, 9c4c <exFatCmpName(DirName_t const*, char const*, unsigned int, unsigned int)+0x54>
  }
  return true;
}
//------------------------------------------------------------------------------
bool exFatCmpName(const DirName_t* unicode,
                  const char* name, size_t offset, size_t n) {
    9bfa:	push	{r4, r5, r6}
void lbaToMbrChs(uint8_t* chs, uint32_t capacityMB, uint32_t lba);
//-----------------------------------------------------------------------------
#if !defined(USE_SIMPLE_LITTLE_ENDIAN) || USE_SIMPLE_LITTLE_ENDIAN
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
    9bfc:	ldrh	r4, [r0, #2]
  uint16_t u;
  for (size_t i = 0; i < n; i++) {
    u = getLe16(unicode->unicode + 2*i);
    if (u >= 0x7F  || toUpper(name[i + offset]) != toUpper(u)) {
    9bfe:	cmp	r4, #126	; 0x7e
    9c00:	bhi.n	9c40 <exFatCmpName(DirName_t const*, char const*, unsigned int, unsigned int)+0x48>
    9c02:	add	r3, r2
    9c04:	adds	r5, r1, r3
    9c06:	add	r2, r1
    9c08:	adds	r0, #2
    9c0a:	ldrb.w	r3, [r2], #1
    9c0e:	uxtb	r4, r4
  }
  return left;
}
//------------------------------------------------------------------------------
static char toUpper(char c) {
  return c - ('a' <= c && c <= 'z' ? 'a' - 'A' : 0);
    9c10:	sub.w	r1, r3, #97	; 0x61
    9c14:	cmp	r1, #25
    9c16:	sub.w	r1, r4, #97	; 0x61
    9c1a:	ite	ls
    9c1c:	movls	r6, #32
    9c1e:	movhi	r6, #0
    9c20:	cmp	r1, #25
    9c22:	ite	ls
    9c24:	movls	r1, #32
    9c26:	movhi	r1, #0
    9c28:	subs	r3, r3, r6
bool exFatCmpName(const DirName_t* unicode,
                  const char* name, size_t offset, size_t n) {
  uint16_t u;
  for (size_t i = 0; i < n; i++) {
    u = getLe16(unicode->unicode + 2*i);
    if (u >= 0x7F  || toUpper(name[i + offset]) != toUpper(u)) {
    9c2a:	subs	r4, r4, r1
  }
  return left;
}
//------------------------------------------------------------------------------
static char toUpper(char c) {
  return c - ('a' <= c && c <= 'z' ? 'a' - 'A' : 0);
    9c2c:	uxtb	r3, r3
bool exFatCmpName(const DirName_t* unicode,
                  const char* name, size_t offset, size_t n) {
  uint16_t u;
  for (size_t i = 0; i < n; i++) {
    u = getLe16(unicode->unicode + 2*i);
    if (u >= 0x7F  || toUpper(name[i + offset]) != toUpper(u)) {
    9c2e:	uxtb	r4, r4
    9c30:	cmp	r4, r3
    9c32:	bne.n	9c40 <exFatCmpName(DirName_t const*, char const*, unsigned int, unsigned int)+0x48>
}
//------------------------------------------------------------------------------
bool exFatCmpName(const DirName_t* unicode,
                  const char* name, size_t offset, size_t n) {
  uint16_t u;
  for (size_t i = 0; i < n; i++) {
    9c34:	cmp	r2, r5
    9c36:	beq.n	9c46 <exFatCmpName(DirName_t const*, char const*, unsigned int, unsigned int)+0x4e>
    9c38:	ldrh.w	r4, [r0, #2]!
    u = getLe16(unicode->unicode + 2*i);
    if (u >= 0x7F  || toUpper(name[i + offset]) != toUpper(u)) {
    9c3c:	cmp	r4, #126	; 0x7e
    9c3e:	bls.n	9c0a <exFatCmpName(DirName_t const*, char const*, unsigned int, unsigned int)+0x12>
      return false;
    9c40:	movs	r0, #0
    }
  }
  return true;
}
    9c42:	pop	{r4, r5, r6}
    9c44:	bx	lr
    u = getLe16(unicode->unicode + 2*i);
    if (u >= 0x7F  || toUpper(name[i + offset]) != toUpper(u)) {
      return false;
    }
  }
  return true;
    9c46:	movs	r0, #1
}
    9c48:	pop	{r4, r5, r6}
    9c4a:	bx	lr
    u = getLe16(unicode->unicode + 2*i);
    if (u >= 0x7F  || toUpper(name[i + offset]) != toUpper(u)) {
      return false;
    }
  }
  return true;
    9c4c:	movs	r0, #1
}
    9c4e:	bx	lr

00009c50 <exFatHashName(char const*, unsigned int, unsigned short)>:
  }
  return hash;
}
//------------------------------------------------------------------------------
uint16_t exFatHashName(const char* name, size_t n, uint16_t hash) {
  for (size_t i = 0; i < n; i++) {
    9c50:	cbz	r1, 9c84 <exFatHashName(char const*, unsigned int, unsigned short)+0x34>
    hash = ((hash << 15) | (hash >> 1)) + (c >> 8);
  }
  return hash;
}
//------------------------------------------------------------------------------
uint16_t exFatHashName(const char* name, size_t n, uint16_t hash) {
    9c52:	push	{r4}
    9c54:	add	r1, r0
    9c56:	lsls	r3, r2, #15
    9c58:	orr.w	r3, r3, r2, lsr #1
  for (size_t i = 0; i < n; i++) {
    uint8_t c = name[i];
    9c5c:	ldrb.w	r2, [r0], #1
    if ('a' <= c && c <= 'z') {
    9c60:	sub.w	r4, r2, #97	; 0x61
    9c64:	cmp	r4, #25
      c -= 'a' - 'A';
    9c66:	itt	ls
    9c68:	subls	r2, #32
    9c6a:	uxtbls	r2, r2
    }
    hash = ((hash << 15) | (hash >> 1)) + c;
    9c6c:	uxtah	r2, r2, r3
    9c70:	uxth	r2, r2
    9c72:	lsls	r3, r2, #15
    9c74:	orr.w	r2, r3, r2, lsr #1
  }
  return hash;
}
//------------------------------------------------------------------------------
uint16_t exFatHashName(const char* name, size_t n, uint16_t hash) {
  for (size_t i = 0; i < n; i++) {
    9c78:	cmp	r1, r0
    9c7a:	uxth	r2, r2
    9c7c:	bne.n	9c56 <exFatHashName(char const*, unsigned int, unsigned short)+0x6>
    }
    hash = ((hash << 15) | (hash >> 1)) + c;
    hash = ((hash << 15) | (hash >> 1));
  }
  return hash;
}
    9c7e:	mov	r0, r2
    9c80:	pop	{r4}
    9c82:	bx	lr
    9c84:	mov	r0, r2
    9c86:	bx	lr

00009c88 <ExFatFile::addCluster()>:
  }
  return checksum;
}
//------------------------------------------------------------------------------
bool ExFatFile::addCluster() {
  uint32_t find = m_vol->bitmapFind(m_curCluster ?  m_curCluster + 1 : 0, 1);
    9c88:	ldr	r1, [r0, #24]
    checksum = ((checksum << 15) | (checksum >> 1)) + data[i];
  }
  return checksum;
}
//------------------------------------------------------------------------------
bool ExFatFile::addCluster() {
    9c8a:	push	{r3, r4, r5, r6, r7, lr}
    9c8c:	mov	r4, r0
  uint32_t find = m_vol->bitmapFind(m_curCluster ?  m_curCluster + 1 : 0, 1);
    9c8e:	ldr	r0, [r0, #32]
    9c90:	cbz	r1, 9c94 <ExFatFile::addCluster()+0xc>
    9c92:	adds	r1, #1
    9c94:	movs	r2, #1
    9c96:	bl	97b4 <ExFatPartition::bitmapFind(unsigned long, unsigned long)>
  if (find < 2) {
    9c9a:	cmp	r0, #1
  }
  return checksum;
}
//------------------------------------------------------------------------------
bool ExFatFile::addCluster() {
  uint32_t find = m_vol->bitmapFind(m_curCluster ?  m_curCluster + 1 : 0, 1);
    9c9c:	mov	r6, r0
  if (find < 2) {
    9c9e:	bls.n	9d00 <ExFatFile::addCluster()+0x78>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!m_vol->bitmapModify(find, 1, 1)) {
    9ca0:	movs	r3, #1
    9ca2:	mov	r1, r0
    9ca4:	mov	r2, r3
    9ca6:	ldr	r0, [r4, #32]
    9ca8:	bl	9868 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    9cac:	mov	r7, r0
    9cae:	cbz	r0, 9d00 <ExFatFile::addCluster()+0x78>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_curCluster == 0) {
    9cb0:	ldr	r0, [r4, #24]
    m_flags |= FILE_FLAG_CONTIGUOUS;
    9cb2:	ldrb.w	r3, [r4, #51]	; 0x33
  }
  if (!m_vol->bitmapModify(find, 1, 1)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_curCluster == 0) {
    9cb6:	cbz	r0, 9d06 <ExFatFile::addCluster()+0x7e>
    m_flags |= FILE_FLAG_CONTIGUOUS;
    goto done;
  }
  if (isContiguous()) {
    9cb8:	lsls	r2, r3, #25
    9cba:	bpl.n	9ce4 <ExFatFile::addCluster()+0x5c>
    if (find == (m_curCluster + 1)) {
    9cbc:	adds	r2, r0, #1
    9cbe:	cmp	r6, r2
    9cc0:	beq.n	9d0e <ExFatFile::addCluster()+0x86>
      goto done;
    }
    // No longer contiguous so make FAT chain.
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
    9cc2:	bic.w	r2, r3, #64	; 0x40
    9cc6:	strb.w	r2, [r4, #51]	; 0x33

    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    9cca:	ldr	r3, [r4, #28]
    9ccc:	b.n	9cda <ExFatFile::addCluster()+0x52>
      if (!m_vol->fatPut(c, c + 1)) {
    9cce:	ldr	r0, [r4, #32]
    9cd0:	bl	99ec <ExFatPartition::fatPut(unsigned long, unsigned long)>
    9cd4:	cbz	r0, 9d00 <ExFatFile::addCluster()+0x78>
    9cd6:	ldr	r0, [r4, #24]
      goto done;
    }
    // No longer contiguous so make FAT chain.
    m_flags &= ~FILE_FLAG_CONTIGUOUS;

    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    9cd8:	mov	r3, r5
      if (!m_vol->fatPut(c, c + 1)) {
    9cda:	adds	r5, r3, #1
      goto done;
    }
    // No longer contiguous so make FAT chain.
    m_flags &= ~FILE_FLAG_CONTIGUOUS;

    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    9cdc:	cmp	r3, r0
      if (!m_vol->fatPut(c, c + 1)) {
    9cde:	mov	r1, r3
    9ce0:	mov	r2, r5
      goto done;
    }
    // No longer contiguous so make FAT chain.
    m_flags &= ~FILE_FLAG_CONTIGUOUS;

    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    9ce2:	bcc.n	9cce <ExFatFile::addCluster()+0x46>
        goto fail;
      }
    }
  }
  // New cluster is EOC.
  if (!m_vol->fatPut(find, EXFAT_EOC)) {
    9ce4:	mov.w	r2, #4294967295
    9ce8:	mov	r1, r6
    9cea:	ldr	r0, [r4, #32]
    9cec:	bl	99ec <ExFatPartition::fatPut(unsigned long, unsigned long)>
    9cf0:	cbz	r0, 9d00 <ExFatFile::addCluster()+0x78>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Connect new cluster to existing chain.
  if (m_curCluster) {
    9cf2:	ldr	r1, [r4, #24]
    9cf4:	cbz	r1, 9d0e <ExFatFile::addCluster()+0x86>
    if (!m_vol->fatPut(m_curCluster, find)) {
    9cf6:	mov	r2, r6
    9cf8:	ldr	r0, [r4, #32]
    9cfa:	bl	99ec <ExFatPartition::fatPut(unsigned long, unsigned long)>
    9cfe:	cbnz	r0, 9d0e <ExFatFile::addCluster()+0x86>
 done:
  m_curCluster = find;
  return true;

 fail:
  return false;
    9d00:	movs	r7, #0
}
    9d02:	mov	r0, r7
    9d04:	pop	{r3, r4, r5, r6, r7, pc}
  if (!m_vol->bitmapModify(find, 1, 1)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_curCluster == 0) {
    m_flags |= FILE_FLAG_CONTIGUOUS;
    9d06:	orr.w	r3, r3, #64	; 0x40
    9d0a:	strb.w	r3, [r4, #51]	; 0x33
      goto fail;
    }
  }

 done:
  m_curCluster = find;
    9d0e:	str	r6, [r4, #24]
  return true;

 fail:
  return false;
}
    9d10:	mov	r0, r7
    9d12:	pop	{r3, r4, r5, r6, r7, pc}

00009d14 <ExFatFile::remove()>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::remove() {
    9d14:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  DirPos_t pos = m_dirPos;
    9d18:	add.w	r3, r0, #36	; 0x24

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::remove() {
    9d1c:	mov	r5, r0
  DirPos_t pos = m_dirPos;
    9d1e:	ldmia.w	r3, {r0, r1, r2}

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::remove() {
    9d22:	sub	sp, #20
    9d24:	ldrb.w	r3, [r5, #51]	; 0x33
  DirPos_t pos = m_dirPos;
    9d28:	add	r6, sp, #4
    9d2a:	stmia.w	r6, {r0, r1, r2}
  uint8_t* cache;
  if (!isWritable()) {
    9d2e:	lsls	r2, r3, #30
    9d30:	bpl.n	9d6a <ExFatFile::remove()+0x56>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Free any clusters.
  if (m_firstCluster) {
    9d32:	ldr	r1, [r5, #28]
    9d34:	cbnz	r1, 9d72 <ExFatFile::remove()+0x5e>

  // Write entry to device.
  return m_vol->cacheSync();

 fail:
  return false;
    9d36:	movs	r4, #0
  for (uint8_t i = 0; i <= m_setCount; i++) {
    if (i && m_vol->dirSeek(&pos, 32) != 1) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    cache = m_vol->dirCache(&pos, FsCache::CACHE_FOR_WRITE);
    9d38:	movs	r2, #1
    9d3a:	mov	r1, r6
    9d3c:	ldr	r0, [r5, #32]
    9d3e:	bl	994c <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
        goto fail;
      }
    }
  }

  for (uint8_t i = 0; i <= m_setCount; i++) {
    9d42:	adds	r4, #1
    9d44:	uxtb	r4, r4
    if (i && m_vol->dirSeek(&pos, 32) != 1) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    cache = m_vol->dirCache(&pos, FsCache::CACHE_FOR_WRITE);
    if (!cache) {
    9d46:	cbz	r0, 9d6a <ExFatFile::remove()+0x56>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // Mark entry not used.
    cache[0] &= 0x7F;
    9d48:	ldrb	r3, [r0, #0]
    9d4a:	and.w	r3, r3, #127	; 0x7f
    9d4e:	strb	r3, [r0, #0]
        goto fail;
      }
    }
  }

  for (uint8_t i = 0; i <= m_setCount; i++) {
    9d50:	ldrb.w	r3, [r5, #48]	; 0x30
    9d54:	cmp	r3, r4
    9d56:	bcc.n	9dbc <ExFatFile::remove()+0xa8>
    if (i && m_vol->dirSeek(&pos, 32) != 1) {
    9d58:	cmp	r4, #0
    9d5a:	beq.n	9d38 <ExFatFile::remove()+0x24>
    9d5c:	movs	r2, #32
    9d5e:	mov	r1, r6
    9d60:	ldr	r0, [r5, #32]
    9d62:	bl	9980 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)>
    9d66:	cmp	r0, #1
    9d68:	beq.n	9d38 <ExFatFile::remove()+0x24>

  // Write entry to device.
  return m_vol->cacheSync();

 fail:
  return false;
    9d6a:	movs	r0, #0
}
    9d6c:	add	sp, #20
    9d6e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Free any clusters.
  if (m_firstCluster) {
    if (isContiguous()) {
    9d72:	lsls	r3, r3, #25
      uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    9d74:	ldr	r0, [r5, #32]
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Free any clusters.
  if (m_firstCluster) {
    if (isContiguous()) {
    9d76:	bpl.n	9db2 <ExFatFile::remove()+0x9e>
      uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
      if (!m_vol->bitmapModify(m_firstCluster, nc, 0)) {
    9d78:	ldrd	r2, r3, [r5, #8]
    9d7c:	ldrb.w	r4, [r0, #1093]	; 0x445
    9d80:	adds	r4, #9
    9d82:	uxtb	r4, r4
    9d84:	adds.w	r8, r2, #4294967295
    9d88:	adc.w	r9, r3, #4294967295
    9d8c:	rsb	r7, r4, #32
    9d90:	lsl.w	r7, r9, r7
    9d94:	lsr.w	r2, r8, r4
    9d98:	sub.w	r3, r4, #32
    9d9c:	lsr.w	r3, r9, r3
    9da0:	orrs	r2, r7
    9da2:	orrs	r2, r3
    9da4:	adds	r2, #1
    9da6:	movs	r3, #0
    9da8:	bl	9868 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    9dac:	cmp	r0, #0
    9dae:	bne.n	9d36 <ExFatFile::remove()+0x22>
    9db0:	b.n	9d6a <ExFatFile::remove()+0x56>
        DBG_FAIL_MACRO;
        goto fail;
      }
    } else {
      if (!m_vol->freeChain(m_firstCluster)) {
    9db2:	bl	9a0c <ExFatPartition::freeChain(unsigned long)>
    9db6:	cmp	r0, #0
    9db8:	bne.n	9d36 <ExFatFile::remove()+0x22>
    9dba:	b.n	9d6a <ExFatFile::remove()+0x56>
  // Set this file closed.
  m_attributes = FILE_ATTR_CLOSED;
  m_flags = 0;

  // Write entry to device.
  return m_vol->cacheSync();
    9dbc:	ldr	r4, [r5, #32]
    }
    // Mark entry not used.
    cache[0] &= 0x7F;
  }
  // Set this file closed.
  m_attributes = FILE_ATTR_CLOSED;
    9dbe:	movs	r3, #0
#endif  // USE_EXFAT_BITMAP_CACHE
    m_dataCache.init(dev);
  }
  bool cacheSync() {
#if USE_EXFAT_BITMAP_CACHE
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    9dc0:	mov	r0, r4
    9dc2:	strb.w	r3, [r5, #49]	; 0x31
  m_flags = 0;
    9dc6:	strb.w	r3, [r5, #51]	; 0x33
    9dca:	bl	8d90 <FsCache::sync()>
    9dce:	cmp	r0, #0
    9dd0:	beq.n	9d6a <ExFatFile::remove()+0x56>
    9dd2:	add.w	r0, r4, #528	; 0x210
    9dd6:	bl	8d90 <FsCache::sync()>
    9dda:	cmp	r0, #0
    9ddc:	beq.n	9d6a <ExFatFile::remove()+0x56>
  bool fatPut(uint32_t cluster, uint32_t value);
  uint32_t chainSize(uint32_t cluster);
  bool freeChain(uint32_t cluster);
  uint16_t sectorMask() const {return m_sectorMask;}
  bool syncDevice() {
    return m_blockDev->syncDevice();
    9dde:	ldr.w	r0, [r4, #1088]	; 0x440
    9de2:	bl	c4e8 <SdSpiCard::syncDevice()>
    9de6:	b.n	9d6c <ExFatFile::remove()+0x58>

00009de8 <ExFatFile::rmdir()>:
//------------------------------------------------------------------------------
bool ExFatFile::rmdir() {
  int n;
  uint8_t dir[32];
  // must be open subdirectory
  if (!isSubDir()) {
    9de8:	ldrb.w	r3, [r0, #49]	; 0x31
    9dec:	lsls	r1, r3, #27
    9dee:	bmi.n	9df4 <ExFatFile::rmdir()+0xc>
  m_attributes = FILE_ATTR_FILE;
  m_flags |= FILE_FLAG_WRITE;
  return remove();

 fail:
  return false;
    9df0:	movs	r0, #0
}
    9df2:	bx	lr

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::rmdir() {
    9df4:	push	{r4, lr}
   * \return true for success or false for failure.
   */
  bool rename(ExFatFile* dirFile, const ExChar_t* newPath);
  /** Set the file's current position to zero. */
  void rewind() {
    seekSet(0);
    9df6:	movs	r2, #0
    9df8:	sub	sp, #32
    9dfa:	movs	r3, #0
    9dfc:	mov	r4, r0
    9dfe:	bl	9128 <ExFatFile::seekSet(unsigned long long)>
    9e02:	b.n	9e12 <ExFatFile::rmdir()+0x2a>
  while (1) {
    n = read(dir, 32);
    if (n == 0) {
      break;
    }
    if (n != 32 || dir[0] & 0X80) {
    9e04:	cmp	r0, #32
    9e06:	bne.n	9e3c <ExFatFile::rmdir()+0x54>
    9e08:	ldrb.w	r3, [sp]
    9e0c:	lsls	r2, r3, #24
    9e0e:	bmi.n	9e3c <ExFatFile::rmdir()+0x54>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (dir[0] == 0) {
    9e10:	cbz	r3, 9e20 <ExFatFile::rmdir()+0x38>
  }
  rewind();

  // make sure directory is empty
  while (1) {
    n = read(dir, 32);
    9e12:	movs	r2, #32
    9e14:	mov	r1, sp
    9e16:	mov	r0, r4
    9e18:	bl	8f50 <ExFatFile::read(void*, unsigned int)>
    if (n == 0) {
    9e1c:	cmp	r0, #0
    9e1e:	bne.n	9e04 <ExFatFile::rmdir()+0x1c>
      break;
    }
  }
  // convert empty directory to normal file for remove
  m_attributes = FILE_ATTR_FILE;
  m_flags |= FILE_FLAG_WRITE;
    9e20:	ldrb.w	r3, [r4, #51]	; 0x33
    if (dir[0] == 0) {
      break;
    }
  }
  // convert empty directory to normal file for remove
  m_attributes = FILE_ATTR_FILE;
    9e24:	movs	r2, #8
  m_flags |= FILE_FLAG_WRITE;
    9e26:	orr.w	r3, r3, #2
    9e2a:	strb.w	r3, [r4, #51]	; 0x33
    if (dir[0] == 0) {
      break;
    }
  }
  // convert empty directory to normal file for remove
  m_attributes = FILE_ATTR_FILE;
    9e2e:	strb.w	r2, [r4, #49]	; 0x31
  m_flags |= FILE_FLAG_WRITE;
  return remove();
    9e32:	mov	r0, r4
    9e34:	bl	9d14 <ExFatFile::remove()>

 fail:
  return false;
}
    9e38:	add	sp, #32
    9e3a:	pop	{r4, pc}
  m_attributes = FILE_ATTR_FILE;
  m_flags |= FILE_FLAG_WRITE;
  return remove();

 fail:
  return false;
    9e3c:	movs	r0, #0
}
    9e3e:	add	sp, #32
    9e40:	pop	{r4, pc}
    9e42:	nop

00009e44 <ExFatFile::syncDir()>:
 fail:
  m_error |= WRITE_ERROR;
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::syncDir() {
    9e44:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  DirStream_t* ds;
  uint8_t* cache;
  uint16_t checksum = 0;
  uint8_t setCount = 0;

  DirPos_t pos = m_dirPos;
    9e48:	add.w	fp, r0, #36	; 0x24
 fail:
  m_error |= WRITE_ERROR;
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::syncDir() {
    9e4c:	mov	r6, r0
  DirStream_t* ds;
  uint8_t* cache;
  uint16_t checksum = 0;
  uint8_t setCount = 0;

  DirPos_t pos = m_dirPos;
    9e4e:	ldmia.w	fp, {r0, r1, r2}
 fail:
  m_error |= WRITE_ERROR;
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::syncDir() {
    9e52:	sub	sp, #28
  DirStream_t* ds;
  uint8_t* cache;
  uint16_t checksum = 0;
  uint8_t setCount = 0;

  DirPos_t pos = m_dirPos;
    9e54:	add.w	r8, sp, #12
    9e58:	stmia.w	r8, {r0, r1, r2}
    9e5c:	movs	r7, #0
bool ExFatFile::syncDir() {
  DirFile_t* df;
  DirStream_t* ds;
  uint8_t* cache;
  uint16_t checksum = 0;
  uint8_t setCount = 0;
    9e5e:	mov	sl, r7
//------------------------------------------------------------------------------
bool ExFatFile::syncDir() {
  DirFile_t* df;
  DirStream_t* ds;
  uint8_t* cache;
  uint16_t checksum = 0;
    9e60:	mov	r4, r7
  uint8_t setCount = 0;

  DirPos_t pos = m_dirPos;

  for (uint8_t i = 0;; i++) {
    cache = m_vol->dirCache(&pos, FsCache::CACHE_FOR_READ);
    9e62:	movs	r2, #0
    9e64:	mov	r1, r8
    9e66:	ldr	r0, [r6, #32]
    9e68:	bl	994c <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
    9e6c:	uxtb.w	r9, r7
    if (!cache) {
    9e70:	mov	r5, r0
    9e72:	cbz	r0, 9e82 <ExFatFile::syncDir()+0x3e>
      DBG_FAIL_MACRO;
      goto fail;
    }
    switch (cache[0]) {
    9e74:	ldrb	r3, [r0, #0]
    9e76:	cmp	r3, #192	; 0xc0
    9e78:	beq.n	9f1e <ExFatFile::syncDir()+0xda>
    9e7a:	cmp	r3, #193	; 0xc1
    9e7c:	beq.n	9f1a <ExFatFile::syncDir()+0xd6>
    9e7e:	cmp	r3, #133	; 0x85
    9e80:	beq.n	9e96 <ExFatFile::syncDir()+0x52>
    goto fail;
  }
  return true;

 fail:
  m_error |= WRITE_ERROR;
    9e82:	ldrb.w	r3, [r6, #50]	; 0x32
    9e86:	orr.w	r3, r3, #1
    9e8a:	strb.w	r3, [r6, #50]	; 0x32
  return false;
    9e8e:	movs	r0, #0
}
    9e90:	add	sp, #28
    9e92:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    switch (cache[0]) {
      case EXFAT_TYPE_FILE:
        df = reinterpret_cast<DirFile_t*>(cache);
        setCount = df->setCount;
        setLe16(df->attributes, m_attributes & FILE_ATTR_COPY);
        if (FsDateTime::callback) {
    9e96:	ldr	r3, [pc, #232]	; (9f80 <ExFatFile::syncDir()+0x13c>)
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    9e98:	ldrb.w	r2, [r6, #49]	; 0x31
    9e9c:	ldr	r3, [r3, #0]
      goto fail;
    }
    switch (cache[0]) {
      case EXFAT_TYPE_FILE:
        df = reinterpret_cast<DirFile_t*>(cache);
        setCount = df->setCount;
    9e9e:	ldrb.w	sl, [r0, #1]
    9ea2:	and.w	r2, r2, #55	; 0x37
    9ea6:	strh	r2, [r0, #4]
        setLe16(df->attributes, m_attributes & FILE_ATTR_COPY);
        if (FsDateTime::callback) {
    9ea8:	cbz	r3, 9ecc <ExFatFile::syncDir()+0x88>
          uint16_t date, time;
          uint8_t ms10;
          FsDateTime::callback(&date, &time, &ms10);
    9eaa:	add.w	r2, sp, #7
    9eae:	add.w	r1, sp, #10
    9eb2:	add	r0, sp, #8
    9eb4:	blx	r3
          df->modifyTimeMs = ms10;
          setLe16(df->modifyTime, time);
    9eb6:	ldrh.w	r2, [sp, #10]
          setLe16(df->modifyDate, date);
    9eba:	ldrh.w	r3, [sp, #8]
        setLe16(df->attributes, m_attributes & FILE_ATTR_COPY);
        if (FsDateTime::callback) {
          uint16_t date, time;
          uint8_t ms10;
          FsDateTime::callback(&date, &time, &ms10);
          df->modifyTimeMs = ms10;
    9ebe:	ldrb.w	r1, [sp, #7]
    9ec2:	strb	r1, [r5, #21]
    9ec4:	strh	r2, [r5, #12]
    9ec6:	strh	r2, [r5, #16]
    9ec8:	strh	r3, [r5, #14]
    9eca:	strh	r3, [r5, #18]
          ds->flags &= ~EXFAT_FLAG_CONTIGUOUS;
        }
        setLe64(ds->validLength, m_validLength);
        setLe32(ds->firstCluster, m_firstCluster);
        setLe64(ds->dataLength, m_dataLength);
        m_vol->dataCacheDirty();
    9ecc:	ldr	r2, [r6, #32]
    invalidate();
    return m_buffer;
  }
  /** Set current sector dirty. */
  void dirty() {
    m_status |= CACHE_STATUS_DIRTY;
    9ece:	ldrb.w	r3, [r2, #528]	; 0x210
    9ed2:	orr.w	r3, r3, #1
    9ed6:	strb.w	r3, [r2, #528]	; 0x210
    9eda:	ldrb	r0, [r5, #0]
//==============================================================================
#else  // READ_ONLY
//------------------------------------------------------------------------------
static uint16_t exFatDirChecksum(const uint8_t* data, uint16_t checksum) {
  bool skip = data[0] == EXFAT_TYPE_FILE;
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    9edc:	movs	r1, #0
    checksum = ((checksum << 15) | (checksum >> 1)) + data[i];
    9ede:	ldrb	r2, [r5, r1]
    9ee0:	lsls	r3, r4, #15
    9ee2:	orr.w	r4, r3, r4, lsr #1
    9ee6:	uxtah	r4, r2, r4
//==============================================================================
#else  // READ_ONLY
//------------------------------------------------------------------------------
static uint16_t exFatDirChecksum(const uint8_t* data, uint16_t checksum) {
  bool skip = data[0] == EXFAT_TYPE_FILE;
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    9eea:	cmp	r1, #1
    checksum = ((checksum << 15) | (checksum >> 1)) + data[i];
    9eec:	uxth	r4, r4
//==============================================================================
#else  // READ_ONLY
//------------------------------------------------------------------------------
static uint16_t exFatDirChecksum(const uint8_t* data, uint16_t checksum) {
  bool skip = data[0] == EXFAT_TYPE_FILE;
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    9eee:	add.w	r1, r1, #1
    9ef2:	beq.n	9f10 <ExFatFile::syncDir()+0xcc>
    9ef4:	cmp	r1, #31
    9ef6:	bls.n	9ede <ExFatFile::syncDir()+0x9a>
        DBG_FAIL_MACRO;
        goto fail;
        break;
    }
    checksum = exFatDirChecksum(cache, checksum);
    if (i == setCount) break;
    9ef8:	cmp	sl, r9
    9efa:	beq.n	9f4a <ExFatFile::syncDir()+0x106>
    if (m_vol->dirSeek(&pos, 32) != 1) {
    9efc:	movs	r2, #32
    9efe:	mov	r1, r8
    9f00:	ldr	r0, [r6, #32]
    9f02:	bl	9980 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)>
    9f06:	cmp	r0, #1
    9f08:	add.w	r7, r7, #1
    9f0c:	beq.n	9e62 <ExFatFile::syncDir()+0x1e>
    9f0e:	b.n	9e82 <ExFatFile::syncDir()+0x3e>
//==============================================================================
#else  // READ_ONLY
//------------------------------------------------------------------------------
static uint16_t exFatDirChecksum(const uint8_t* data, uint16_t checksum) {
  bool skip = data[0] == EXFAT_TYPE_FILE;
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    9f10:	cmp	r0, #133	; 0x85
    9f12:	ite	eq
    9f14:	moveq	r1, #4
    9f16:	movne	r1, #2
    9f18:	b.n	9ede <ExFatFile::syncDir()+0x9a>
    cache = m_vol->dirCache(&pos, FsCache::CACHE_FOR_READ);
    if (!cache) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    switch (cache[0]) {
    9f1a:	mov	r0, r3
    9f1c:	b.n	9edc <ExFatFile::syncDir()+0x98>
        m_vol->dataCacheDirty();
        break;

      case EXFAT_TYPE_STREAM:
        ds = reinterpret_cast<DirStream_t*>(cache);
        if (isContiguous()) {
    9f1e:	ldrb.w	r3, [r6, #51]	; 0x33
    9f22:	tst.w	r3, #64	; 0x40
          ds->flags |= EXFAT_FLAG_CONTIGUOUS;
    9f26:	ldrb	r3, [r0, #1]
    9f28:	ite	ne
    9f2a:	orrne.w	r3, r3, #2
        } else {
          ds->flags &= ~EXFAT_FLAG_CONTIGUOUS;
    9f2e:	biceq.w	r3, r3, #2
    9f32:	strb	r3, [r0, #1]
        }
        setLe64(ds->validLength, m_validLength);
    9f34:	ldrd	r2, r3, [r6, #16]

inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
}
inline void setLe64(uint8_t* dst, uint64_t src) {
  *reinterpret_cast<uint64_t*>(dst) = src;
    9f38:	strd	r2, r3, [r0, #8]
        setLe32(ds->firstCluster, m_firstCluster);
        setLe64(ds->dataLength, m_dataLength);
    9f3c:	ldrd	r2, r3, [r6, #8]
          ds->flags |= EXFAT_FLAG_CONTIGUOUS;
        } else {
          ds->flags &= ~EXFAT_FLAG_CONTIGUOUS;
        }
        setLe64(ds->validLength, m_validLength);
        setLe32(ds->firstCluster, m_firstCluster);
    9f40:	ldr	r1, [r6, #28]
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
}

inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
    9f42:	str	r1, [r0, #20]
}
inline void setLe64(uint8_t* dst, uint64_t src) {
  *reinterpret_cast<uint64_t*>(dst) = src;
    9f44:	strd	r2, r3, [r0, #24]
    9f48:	b.n	9ecc <ExFatFile::syncDir()+0x88>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  df = reinterpret_cast<DirFile_t*>
       (m_vol->dirCache(&m_dirPos, FsCache::CACHE_FOR_WRITE));
    9f4a:	mov	r1, fp
    9f4c:	movs	r2, #1
    9f4e:	ldr	r0, [r6, #32]
    9f50:	bl	994c <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
  if (!df) {
    9f54:	cmp	r0, #0
    9f56:	beq.n	9e82 <ExFatFile::syncDir()+0x3e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  setLe16(df->setChecksum, checksum);
  if (!m_vol->cacheSync()) {
    9f58:	ldr	r5, [r6, #32]
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    9f5a:	strh	r4, [r0, #2]
#endif  // USE_EXFAT_BITMAP_CACHE
    m_dataCache.init(dev);
  }
  bool cacheSync() {
#if USE_EXFAT_BITMAP_CACHE
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    9f5c:	mov	r0, r5
    9f5e:	bl	8d90 <FsCache::sync()>
    9f62:	cmp	r0, #0
    9f64:	beq.n	9e82 <ExFatFile::syncDir()+0x3e>
    9f66:	add.w	r0, r5, #528	; 0x210
    9f6a:	bl	8d90 <FsCache::sync()>
    9f6e:	cmp	r0, #0
    9f70:	beq.n	9e82 <ExFatFile::syncDir()+0x3e>
  bool fatPut(uint32_t cluster, uint32_t value);
  uint32_t chainSize(uint32_t cluster);
  bool freeChain(uint32_t cluster);
  uint16_t sectorMask() const {return m_sectorMask;}
  bool syncDevice() {
    return m_blockDev->syncDevice();
    9f72:	ldr.w	r0, [r5, #1088]	; 0x440
    9f76:	bl	c4e8 <SdSpiCard::syncDevice()>
#endif  // USE_EXFAT_BITMAP_CACHE
    m_dataCache.init(dev);
  }
  bool cacheSync() {
#if USE_EXFAT_BITMAP_CACHE
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    9f7a:	cmp	r0, #0
    9f7c:	beq.n	9e82 <ExFatFile::syncDir()+0x3e>
    9f7e:	b.n	9e90 <ExFatFile::syncDir()+0x4c>
    9f80:	.word	0x20002bd8

00009f84 <ExFatFile::sync()>:
 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::sync() {
  if (!isOpen()) {
    9f84:	ldrb.w	r2, [r0, #49]	; 0x31
    9f88:	cbz	r2, 9fb0 <ExFatFile::sync()+0x2c>

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::sync() {
    9f8a:	push	{r3, r4, r5, lr}
  if (!isOpen()) {
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    9f8c:	ldrb.w	r2, [r0, #51]	; 0x33
    9f90:	lsls	r1, r2, #24
    9f92:	bmi.n	9fb4 <ExFatFile::sync()+0x30>
    // clear directory dirty
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    return syncDir();
  }
  if (!m_vol->cacheSync()) {
    9f94:	ldr	r5, [r0, #32]
    9f96:	mov	r4, r0
    9f98:	mov	r0, r5
    9f9a:	bl	8d90 <FsCache::sync()>
    9f9e:	cbnz	r0, 9fc4 <ExFatFile::sync()+0x40>
    goto fail;
  }
  return true;

 fail:
  m_error |= WRITE_ERROR;
    9fa0:	ldrb.w	r3, [r4, #50]	; 0x32
    9fa4:	orr.w	r3, r3, #1
    9fa8:	strb.w	r3, [r4, #50]	; 0x32
  return false;
    9fac:	movs	r0, #0
}
    9fae:	pop	{r3, r4, r5, pc}
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::sync() {
  if (!isOpen()) {
    return true;
    9fb0:	movs	r0, #1
  return true;

 fail:
  m_error |= WRITE_ERROR;
  return false;
}
    9fb2:	bx	lr
  if (!isOpen()) {
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    // clear directory dirty
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    9fb4:	and.w	r2, r2, #127	; 0x7f
    9fb8:	strb.w	r2, [r0, #51]	; 0x33
  return true;

 fail:
  m_error |= WRITE_ERROR;
  return false;
}
    9fbc:	ldmia.w	sp!, {r3, r4, r5, lr}
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    // clear directory dirty
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    return syncDir();
    9fc0:	b.w	9e44 <ExFatFile::syncDir()>
    9fc4:	add.w	r0, r5, #528	; 0x210
    9fc8:	bl	8d90 <FsCache::sync()>
    9fcc:	cmp	r0, #0
    9fce:	beq.n	9fa0 <ExFatFile::sync()+0x1c>
  bool fatPut(uint32_t cluster, uint32_t value);
  uint32_t chainSize(uint32_t cluster);
  bool freeChain(uint32_t cluster);
  uint16_t sectorMask() const {return m_sectorMask;}
  bool syncDevice() {
    return m_blockDev->syncDevice();
    9fd0:	ldr.w	r0, [r5, #1088]	; 0x440
    9fd4:	bl	c4e8 <SdSpiCard::syncDevice()>
#endif  // USE_EXFAT_BITMAP_CACHE
    m_dataCache.init(dev);
  }
  bool cacheSync() {
#if USE_EXFAT_BITMAP_CACHE
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    9fd8:	cmp	r0, #0
    9fda:	beq.n	9fa0 <ExFatFile::sync()+0x1c>
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::sync() {
  if (!isOpen()) {
    return true;
    9fdc:	movs	r0, #1
    9fde:	pop	{r3, r4, r5, pc}

00009fe0 <ExFatFile::addDirCluster()>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::addDirCluster() {
    9fe0:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t sector;
  uint32_t dl = isRoot() ? m_vol->rootLength() : m_dataLength;
    9fe4:	ldrb.w	r3, [r0, #49]	; 0x31
    9fe8:	lsls	r1, r3, #25

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::addDirCluster() {
    9fea:	mov	r4, r0
  uint32_t sector;
  uint32_t dl = isRoot() ? m_vol->rootLength() : m_dataLength;
    9fec:	bmi.n	a082 <ExFatFile::addDirCluster()+0xa2>
    9fee:	ldr	r0, [r0, #8]
    9ff0:	ldr	r3, [r4, #32]
  uint8_t* cache;
  dl += m_vol->bytesPerCluster();
  if (dl >= 0X4000000) {
    9ff2:	ldr.w	r3, [r3, #1084]	; 0x43c
    9ff6:	add	r0, r3
    9ff8:	cmp.w	r0, #67108864	; 0x4000000
    9ffc:	bcc.n	a004 <ExFatFile::addDirCluster()+0x24>
  }
  return sync();

 fail:
  return false;
}
    9ffe:	movs	r0, #0
    a000:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  dl += m_vol->bytesPerCluster();
  if (dl >= 0X4000000) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!addCluster()) {
    a004:	mov	r0, r4
    a006:	bl	9c88 <ExFatFile::addCluster()>
    a00a:	cmp	r0, #0
    a00c:	beq.n	9ffe <ExFatFile::addDirCluster()+0x1e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  cache =  m_vol->cacheClear();
    a00e:	ldr	r6, [r4, #32]
    }
    return m_blockDev->writeSectors(sector, src, count);
  }
  /** \return Clear the cache and returns a pointer to the cache. */
  uint8_t* clear() {
    if (isDirty() && !sync()) {
    a010:	ldrb.w	r3, [r6, #528]	; 0x210
    a014:	lsls	r2, r3, #31
    a016:	bmi.n	a0c8 <ExFatFile::addDirCluster()+0xe8>
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    m_sector = 0XFFFFFFFF;
    a018:	mov.w	r3, #4294967295
    m_blockDev = blockDev;
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    a01c:	movs	r5, #0
  uint8_t* clear() {
    if (isDirty() && !sync()) {
      return nullptr;
    }
    invalidate();
    return m_buffer;
    a01e:	add.w	r8, r6, #544	; 0x220
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    m_sector = 0XFFFFFFFF;
    a022:	str.w	r3, [r6, #540]	; 0x21c
    m_blockDev = blockDev;
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    a026:	strb.w	r5, [r6, #528]	; 0x210
  if (!cache) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(cache, 0, m_vol->bytesPerSector());
    a02a:	mov	r1, r5
    a02c:	mov.w	r2, #512	; 0x200
    a030:	mov	r0, r8
    a032:	bl	106cc <memset>
  sector = m_vol->clusterStartSector(m_curCluster);
    a036:	ldr	r2, [r4, #32]
  bool dataCacheSync() {return m_dataCache.sync();}
  //----------------------------------------------------------------------------
  uint32_t clusterMask() const {return m_clusterMask;}
  uint32_t clusterStartSector(uint32_t cluster) {
    return m_clusterHeapStartSector +
           ((cluster - 2) << m_sectorsPerClusterShift);
    a038:	ldr	r3, [r4, #24]
    a03a:	ldrb.w	r0, [r2, #1093]	; 0x445
    a03e:	ldr.w	r1, [r2, #1068]	; 0x42c
    a042:	subs	r3, #2
    a044:	lsls	r3, r0
  for (uint32_t i = 0; i < m_vol->sectorsPerCluster(); i++) {
    a046:	movs	r6, #1
    a048:	adds	r7, r3, r1
    a04a:	lsls.w	r3, r6, r0
    a04e:	bne.n	a06e <ExFatFile::addDirCluster()+0x8e>
    a050:	b.n	a08a <ExFatFile::addDirCluster()+0xaa>
   */
  bool writeSector(uint32_t sector, const uint8_t* src) {
    if (m_sharedSpi) {
      return writeSingle(sector, src);
    } else {
      return writeSectors(sector, src, 1);
    a052:	movs	r3, #1
    a054:	mov	r2, r8
    a056:	bl	c8bc <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)>
    a05a:	adds	r5, #1
    if (!m_vol->writeSector(sector + i, cache)) {
    a05c:	cmp	r0, #0
    a05e:	beq.n	9ffe <ExFatFile::addDirCluster()+0x1e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(cache, 0, m_vol->bytesPerSector());
  sector = m_vol->clusterStartSector(m_curCluster);
  for (uint32_t i = 0; i < m_vol->sectorsPerCluster(); i++) {
    a060:	ldr	r2, [r4, #32]
    a062:	ldrb.w	r3, [r2, #1093]	; 0x445
    a066:	lsl.w	r3, r6, r3
    a06a:	cmp	r3, r5
    a06c:	bls.n	a08a <ExFatFile::addDirCluster()+0xaa>
    a06e:	ldr.w	r0, [r2, #1088]	; 0x440
   * \param[in] sector Logical sector to be written.
   * \param[in] src Pointer to the location of the data to be written.
   * \return true for success or false for failure.
   */
  bool writeSector(uint32_t sector, const uint8_t* src) {
    if (m_sharedSpi) {
    a072:	ldrb	r3, [r0, #13]
    if (!m_vol->writeSector(sector + i, cache)) {
    a074:	adds	r1, r7, r5
    a076:	cmp	r3, #0
    a078:	beq.n	a052 <ExFatFile::addDirCluster()+0x72>
      return writeSingle(sector, src);
    a07a:	mov	r2, r8
    a07c:	bl	c7e0 <SdSpiCard::writeSingle(unsigned long, unsigned char const*)>
    a080:	b.n	a05a <ExFatFile::addDirCluster()+0x7a>
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::addDirCluster() {
  uint32_t sector;
  uint32_t dl = isRoot() ? m_vol->rootLength() : m_dataLength;
    a082:	ldr	r0, [r0, #32]
    a084:	bl	9be0 <ExFatPartition::rootLength()>
    a088:	b.n	9ff0 <ExFatFile::addDirCluster()+0x10>
    if (!m_vol->writeSector(sector + i, cache)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  if (!isRoot()) {
    a08a:	ldrb.w	r3, [r4, #49]	; 0x31
    a08e:	lsls	r3, r3, #25
    a090:	bmi.n	a0be <ExFatFile::addDirCluster()+0xde>
    m_flags |= FILE_FLAG_DIR_DIRTY;
    a092:	ldrb.w	r3, [r4, #51]	; 0x33
    a096:	orn	r3, r3, #127	; 0x7f
    a09a:	strb.w	r3, [r4, #51]	; 0x33
    m_dataLength  += m_vol->bytesPerCluster();
    a09e:	ldr.w	r6, [r2, #1084]	; 0x43c
    a0a2:	ldrd	r2, r3, [r4, #8]
    m_validLength += m_vol->bytesPerCluster();
    a0a6:	ldrd	r0, r1, [r4, #16]
      goto fail;
    }
  }
  if (!isRoot()) {
    m_flags |= FILE_FLAG_DIR_DIRTY;
    m_dataLength  += m_vol->bytesPerCluster();
    a0aa:	adds	r2, r2, r6
    a0ac:	mov.w	r7, #0
    a0b0:	adcs	r3, r7
    m_validLength += m_vol->bytesPerCluster();
    a0b2:	adds	r0, r0, r6
    a0b4:	adcs	r1, r7
      goto fail;
    }
  }
  if (!isRoot()) {
    m_flags |= FILE_FLAG_DIR_DIRTY;
    m_dataLength  += m_vol->bytesPerCluster();
    a0b6:	strd	r2, r3, [r4, #8]
    m_validLength += m_vol->bytesPerCluster();
    a0ba:	strd	r0, r1, [r4, #16]
  }
  return sync();
    a0be:	mov	r0, r4

 fail:
  return false;
}
    a0c0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  if (!isRoot()) {
    m_flags |= FILE_FLAG_DIR_DIRTY;
    m_dataLength  += m_vol->bytesPerCluster();
    m_validLength += m_vol->bytesPerCluster();
  }
  return sync();
    a0c4:	b.w	9f84 <ExFatFile::sync()>
    }
    return m_blockDev->writeSectors(sector, src, count);
  }
  /** \return Clear the cache and returns a pointer to the cache. */
  uint8_t* clear() {
    if (isDirty() && !sync()) {
    a0c8:	add.w	r0, r6, #528	; 0x210
    a0cc:	bl	8d90 <FsCache::sync()>
    a0d0:	cmp	r0, #0
    a0d2:	bne.n	a018 <ExFatFile::addDirCluster()+0x38>
    a0d4:	b.n	9ffe <ExFatFile::addDirCluster()+0x1e>
    a0d6:	nop

0000a0d8 <ExFatFile::mkdir(ExFatFile*, ExName_t*)>:
 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::mkdir(ExFatFile* parent, ExName_t* fname) {
  if (!parent->isDir()) {
    a0d8:	ldrb.w	r3, [r1, #49]	; 0x31
    a0dc:	tst.w	r3, #80	; 0x50
    a0e0:	bne.n	a0e6 <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0xe>
  m_flags = FILE_FLAG_READ | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
  return sync();

 fail:
  return false;
}
    a0e2:	movs	r0, #0
    a0e4:	bx	lr

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::mkdir(ExFatFile* parent, ExName_t* fname) {
    a0e6:	push	{r4, r5, lr}
    a0e8:	sub	sp, #12
  uint8_t setCount() const {return m_setCount;}
  bool mkdir(ExFatFile* parent, ExName_t* fname);
  bool openRootFile(ExFatFile* dir,
                    const ExChar_t* name, uint8_t nameLength, oflag_t oflag);
  bool open(ExFatFile* dirFile, ExName_t* fname, oflag_t oflag) {
    return openRootFile(dirFile, fname->lfn, fname->len, oflag);
    a0ea:	movw	r5, #2562	; 0xa02
    a0ee:	ldrb	r3, [r2, #0]
    a0f0:	ldr	r2, [r2, #4]
    a0f2:	str	r5, [sp, #0]
    a0f4:	mov	r4, r0
    a0f6:	bl	9228 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)>
  if (!parent->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // create a normal file
  if (!open(parent, fname, O_CREAT | O_EXCL | O_RDWR)) {
    a0fa:	cbnz	r0, a102 <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0x2a>
  m_flags = FILE_FLAG_READ | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
  return sync();

 fail:
  return false;
}
    a0fc:	movs	r0, #0
    a0fe:	add	sp, #12
    a100:	pop	{r4, r5, pc}
    DBG_FAIL_MACRO;
    goto fail;
  }
  // convert file to directory

  m_attributes = FILE_ATTR_SUBDIR;
    a102:	movs	r3, #16
    a104:	strb.w	r3, [r4, #49]	; 0x31

  // allocate and zero first cluster
  if (!addDirCluster()) {
    a108:	mov	r0, r4
    a10a:	bl	9fe0 <ExFatFile::addDirCluster()>
    a10e:	cmp	r0, #0
    a110:	beq.n	a0fc <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0x24>
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_firstCluster = m_curCluster;
    a112:	ldr	r3, [r4, #24]
    a114:	str	r3, [r4, #28]
   * \return true for success or false for failure.
   */
  bool rename(ExFatFile* dirFile, const ExChar_t* newPath);
  /** Set the file's current position to zero. */
  void rewind() {
    seekSet(0);
    a116:	movs	r2, #0
    a118:	movs	r3, #0
    a11a:	mov	r0, r4
    a11c:	bl	9128 <ExFatFile::seekSet(unsigned long long)>

  // Set to start of dir
  rewind();
  m_flags = FILE_FLAG_READ | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
    a120:	movs	r3, #193	; 0xc1
  return sync();
    a122:	mov	r0, r4
  }
  m_firstCluster = m_curCluster;

  // Set to start of dir
  rewind();
  m_flags = FILE_FLAG_READ | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
    a124:	strb.w	r3, [r4, #51]	; 0x33
  return sync();

 fail:
  return false;
}
    a128:	add	sp, #12
    a12a:	ldmia.w	sp!, {r4, r5, lr}
  m_firstCluster = m_curCluster;

  // Set to start of dir
  rewind();
  m_flags = FILE_FLAG_READ | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
  return sync();
    a12e:	b.w	9f84 <ExFatFile::sync()>
    a132:	nop

0000a134 <ExFatFile::mkdir(ExFatFile*, char const*, bool)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::mkdir(ExFatFile* parent, const ExChar_t* path, bool pFlag) {
    a134:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    a138:	mov	r6, r0
    a13a:	sub	sp, #84	; 0x54
  ExName_t fname;
  ExFatFile tmpDir;

  if (isOpen() || !parent->isDir()) {
    a13c:	ldrb.w	r5, [r6, #49]	; 0x31

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::mkdir(ExFatFile* parent, const ExChar_t* path, bool pFlag) {
    a140:	str	r2, [sp, #12]
 * \brief Basic file class.
 */
class ExFatFile {
 public:
  /** Create an instance. */
  ExFatFile() {}
    a142:	movs	r0, #0
    a144:	strb.w	r0, [sp, #73]	; 0x49
    a148:	strb.w	r0, [sp, #74]	; 0x4a
    a14c:	strb.w	r0, [sp, #75]	; 0x4b
  ExName_t fname;
  ExFatFile tmpDir;

  if (isOpen() || !parent->isDir()) {
    a150:	cbnz	r5, a160 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x2c>
    a152:	mov	r9, r3
    a154:	ldrb.w	r3, [r1, #49]	; 0x31
    a158:	tst.w	r3, #80	; 0x50
    a15c:	mov	r4, r1
    a15e:	bne.n	a168 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x34>
    close();
  }
  return mkdir(parent, &fname);

 fail:
  return false;
    a160:	movs	r0, #0
}
    a162:	add	sp, #84	; 0x54
    a164:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

  if (isOpen() || !parent->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    a168:	ldrb	r3, [r2, #0]
    a16a:	cmp	r3, #47	; 0x2f
    a16c:	mov	r1, r2
    a16e:	beq.n	a1de <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xaa>
  uint8_t setCount() const {return m_setCount;}
  bool mkdir(ExFatFile* parent, ExName_t* fname);
  bool openRootFile(ExFatFile* dir,
                    const ExChar_t* name, uint8_t nameLength, oflag_t oflag);
  bool open(ExFatFile* dirFile, ExName_t* fname, oflag_t oflag) {
    return openRootFile(dirFile, fname->lfn, fname->len, oflag);
    a170:	mov.w	r8, #0
      goto fail;
    }
    parent = &tmpDir;
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
    a174:	add	r3, sp, #12
    a176:	add	r2, sp, #16
    a178:	mov	r0, r6
    a17a:	bl	8e8c <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>
    a17e:	cmp	r0, #0
    a180:	beq.n	a160 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x2c>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!*path) {
    a182:	ldr	r3, [sp, #12]
    a184:	ldrb	r3, [r3, #0]
    a186:	cmp	r3, #0
    a188:	beq.n	a1fa <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xc6>
    a18a:	ldrb.w	r3, [sp, #16]
    a18e:	ldr	r2, [sp, #20]
    a190:	str.w	r8, [sp]
    a194:	mov	r1, r4
    a196:	mov	r0, r6
    a198:	bl	9228 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)>
      break;
    }
    if (!open(parent, &fname, O_RDONLY)) {
    a19c:	cbnz	r0, a1b2 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x7e>
      if (!pFlag || !mkdir(parent, &fname)) {
    a19e:	cmp.w	r9, #0
    a1a2:	beq.n	a160 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x2c>
    a1a4:	mov	r1, r4
    a1a6:	add	r2, sp, #16
    a1a8:	mov	r0, r6
    a1aa:	bl	a0d8 <ExFatFile::mkdir(ExFatFile*, ExName_t*)>
    a1ae:	cmp	r0, #0
    a1b0:	beq.n	a160 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x2c>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    tmpDir = *this;
    a1b2:	mov	r4, r6
    a1b4:	add	r7, sp, #24
    a1b6:	add.w	lr, r6, #48	; 0x30
    a1ba:	ldr	r0, [r4, #0]
    a1bc:	ldr	r1, [r4, #4]
    a1be:	ldr	r2, [r4, #8]
    a1c0:	ldr	r3, [r4, #12]
    a1c2:	mov	r5, r7
    a1c4:	stmia	r5!, {r0, r1, r2, r3}
    a1c6:	adds	r4, #16
    a1c8:	cmp	r4, lr
    a1ca:	mov	r7, r5
    a1cc:	bne.n	a1ba <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x86>
    a1ce:	ldr	r0, [r4, #0]
    a1d0:	str	r0, [r5, #0]
    parent = &tmpDir;
    close();
    a1d2:	mov	r0, r6
    a1d4:	bl	8da0 <ExFatFile::close()>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    tmpDir = *this;
    parent = &tmpDir;
    a1d8:	add	r4, sp, #24
    a1da:	ldr	r1, [sp, #12]
      DBG_FAIL_MACRO;
      goto fail;
    }
    parent = &tmpDir;
  }
  while (1) {
    a1dc:	b.n	a174 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x40>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
      path++;
    a1de:	adds	r1, #1
    a1e0:	str	r1, [sp, #12]
  if (isOpen() || !parent->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
    a1e2:	ldrb	r3, [r1, #0]
    a1e4:	cmp	r3, #47	; 0x2f
    a1e6:	beq.n	a1de <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xaa>
      path++;
    }
    if (!tmpDir.openRoot(parent->m_vol)) {
    a1e8:	ldr	r1, [r4, #32]
    a1ea:	add	r0, sp, #24
    a1ec:	bl	8e64 <ExFatFile::openRoot(ExFatVolume*)>
    a1f0:	cmp	r0, #0
    a1f2:	beq.n	a160 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x2c>
    a1f4:	ldr	r1, [sp, #12]
      DBG_FAIL_MACRO;
      goto fail;
    }
    parent = &tmpDir;
    a1f6:	add	r4, sp, #24
    a1f8:	b.n	a170 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x3c>
    }
    tmpDir = *this;
    parent = &tmpDir;
    close();
  }
  return mkdir(parent, &fname);
    a1fa:	add	r2, sp, #16
    a1fc:	mov	r1, r4
    a1fe:	mov	r0, r6
    a200:	bl	a0d8 <ExFatFile::mkdir(ExFatFile*, ExName_t*)>

 fail:
  return false;
}
    a204:	add	sp, #84	; 0x54
    a206:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    a20a:	nop

0000a20c <ExFatFile::rename(ExFatFile*, char const*)>:
//------------------------------------------------------------------------------
bool ExFatFile::rename(const ExChar_t* newPath) {
  return rename(m_vol->vwd(), newPath);
}
//------------------------------------------------------------------------------
bool ExFatFile::rename(ExFatFile* dirFile, const ExChar_t* newPath) {
    a20c:	push	{r4, r5, r6, r7, lr}
  ExFatFile file;
  ExFatFile oldFile;

  // Must be an open file or subdirectory.
  if (!(isFile() || isSubDir())) {
    a20e:	ldrb.w	r4, [r0, #49]	; 0x31
//------------------------------------------------------------------------------
bool ExFatFile::rename(const ExChar_t* newPath) {
  return rename(m_vol->vwd(), newPath);
}
//------------------------------------------------------------------------------
bool ExFatFile::rename(ExFatFile* dirFile, const ExChar_t* newPath) {
    a212:	sub	sp, #116	; 0x74
 * \brief Basic file class.
 */
class ExFatFile {
 public:
  /** Create an instance. */
  ExFatFile() {}
    a214:	movs	r3, #0
  ExFatFile file;
  ExFatFile oldFile;

  // Must be an open file or subdirectory.
  if (!(isFile() || isSubDir())) {
    a216:	tst.w	r4, #24
    a21a:	strb.w	r3, [sp, #49]	; 0x31
    a21e:	strb.w	r3, [sp, #50]	; 0x32
    a222:	strb.w	r3, [sp, #51]	; 0x33
    a226:	strb.w	r3, [sp, #105]	; 0x69
    a22a:	strb.w	r3, [sp, #106]	; 0x6a
    a22e:	strb.w	r3, [sp, #107]	; 0x6b
    a232:	beq.n	a23c <ExFatFile::rename(ExFatFile*, char const*)+0x30>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Can't move file to new volume.
  if (m_vol != dirFile->m_vol) {
    a234:	ldr	r3, [r1, #32]
    a236:	ldr	r4, [r0, #32]
    a238:	cmp	r4, r3
    a23a:	beq.n	a242 <ExFatFile::rename(ExFatFile*, char const*)+0x36>
  oldFile.m_flags = FILE_FLAG_WRITE;
  oldFile.m_attributes = FILE_ATTR_FILE;
  return oldFile.remove();

 fail:
  return false;
    a23c:	movs	r0, #0
}
    a23e:	add	sp, #116	; 0x74
    a240:	pop	{r4, r5, r6, r7, pc}
    a242:	mov	r4, r0
  // Can't move file to new volume.
  if (m_vol != dirFile->m_vol) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!file.open(dirFile, newPath, O_CREAT | O_EXCL | O_WRONLY)) {
    a244:	movw	r3, #2561	; 0xa01
    a248:	mov	r0, sp
    a24a:	bl	9604 <ExFatFile::open(ExFatFile*, char const*, int)>
    a24e:	cmp	r0, #0
    a250:	beq.n	a23c <ExFatFile::rename(ExFatFile*, char const*)+0x30>
    DBG_FAIL_MACRO;
    goto fail;
  }
  oldFile = *this;
    a252:	add	r7, sp, #56	; 0x38
    a254:	mov	r5, r4
    a256:	add.w	lr, r4, #48	; 0x30
    a25a:	ldr	r0, [r5, #0]
    a25c:	ldr	r1, [r5, #4]
    a25e:	ldr	r2, [r5, #8]
    a260:	ldr	r3, [r5, #12]
    a262:	mov	r6, r7
    a264:	stmia	r6!, {r0, r1, r2, r3}
    a266:	adds	r5, #16
    a268:	cmp	r5, lr
    a26a:	mov	r7, r6
    a26c:	bne.n	a25a <ExFatFile::rename(ExFatFile*, char const*)+0x4e>
    a26e:	ldr	r0, [r5, #0]
    a270:	str	r0, [r6, #0]
  m_dirPos = file.m_dirPos;
    a272:	add	r3, sp, #36	; 0x24
    a274:	ldmia.w	r3, {r0, r1, r2}
    a278:	add.w	r3, r4, #36	; 0x24
    a27c:	stmia.w	r3, {r0, r1, r2}
  m_setCount = file.m_setCount;
  m_flags |= FILE_FLAG_DIR_DIRTY;
    a280:	ldrb.w	r3, [r4, #51]	; 0x33
    DBG_FAIL_MACRO;
    goto fail;
  }
  oldFile = *this;
  m_dirPos = file.m_dirPos;
  m_setCount = file.m_setCount;
    a284:	ldrb.w	r2, [sp, #48]	; 0x30
    a288:	strb.w	r2, [r4, #48]	; 0x30
  m_flags |= FILE_FLAG_DIR_DIRTY;
    a28c:	orn	r3, r3, #127	; 0x7f
    a290:	strb.w	r3, [r4, #51]	; 0x33
  if (!sync()) {
    a294:	mov	r0, r4
    a296:	bl	9f84 <ExFatFile::sync()>
    a29a:	cmp	r0, #0
    a29c:	beq.n	a23c <ExFatFile::rename(ExFatFile*, char const*)+0x30>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Remove old directory entry;
  oldFile.m_firstCluster = 0;
    a29e:	movs	r1, #0
  oldFile.m_flags = FILE_FLAG_WRITE;
    a2a0:	movs	r2, #2
  oldFile.m_attributes = FILE_ATTR_FILE;
    a2a2:	movs	r3, #8
  return oldFile.remove();
    a2a4:	add	r0, sp, #56	; 0x38
  if (!sync()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Remove old directory entry;
  oldFile.m_firstCluster = 0;
    a2a6:	str	r1, [sp, #84]	; 0x54
  oldFile.m_flags = FILE_FLAG_WRITE;
    a2a8:	strb.w	r2, [sp, #107]	; 0x6b
  oldFile.m_attributes = FILE_ATTR_FILE;
    a2ac:	strb.w	r3, [sp, #105]	; 0x69
  return oldFile.remove();
    a2b0:	bl	9d14 <ExFatFile::remove()>
    a2b4:	b.n	a23e <ExFatFile::rename(ExFatFile*, char const*)+0x32>
    a2b6:	nop

0000a2b8 <ExFatFile::truncate()>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::truncate() {
    a2b8:	ldrb.w	r3, [r0, #51]	; 0x33
  uint32_t toFree;
  // error if not a normal file or read-only
  if (!isWritable()) {
    a2bc:	lsls	r2, r3, #30
    a2be:	bpl.n	a2f2 <ExFatFile::truncate()+0x3a>

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::truncate() {
    a2c0:	push	{r4, r5, r6, r7, lr}
  // error if not a normal file or read-only
  if (!isWritable()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_firstCluster == 0) {
    a2c2:	ldr	r5, [r0, #28]

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::truncate() {
    a2c4:	sub	sp, #12
  // error if not a normal file or read-only
  if (!isWritable()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_firstCluster == 0) {
    a2c6:	cbz	r5, a2ec <ExFatFile::truncate()+0x34>
      return true;
  }
  if (isContiguous()) {
    a2c8:	and.w	r3, r3, #64	; 0x40
    a2cc:	mov	r4, r0
    a2ce:	and.w	r0, r3, #255	; 0xff
    a2d2:	cbnz	r3, a2f6 <ExFatFile::truncate()+0x3e>
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else {
    // need to free chain
    if (m_curCluster) {
    a2d4:	ldr	r1, [r4, #24]
    a2d6:	cmp	r1, #0
    a2d8:	bne.n	a35e <ExFatFile::truncate()+0xa6>
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
    } else {
      toFree = m_firstCluster;
    a2da:	str	r5, [sp, #4]
      m_firstCluster = 0;
    a2dc:	str	r1, [r4, #28]
    }
    if (toFree) {
      if (!m_vol->freeChain(toFree)) {
    a2de:	mov	r1, r5
    a2e0:	ldr	r0, [r4, #32]
    a2e2:	bl	9a0c <ExFatPartition::freeChain(unsigned long)>
    a2e6:	cbnz	r0, a336 <ExFatFile::truncate()+0x7e>
  m_validLength = m_curPosition;
  m_flags |= FILE_FLAG_DIR_DIRTY;
  return sync();

 fail:
  return false;
    a2e8:	movs	r0, #0
    a2ea:	b.n	a2ee <ExFatFile::truncate()+0x36>
  if (!isWritable()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_firstCluster == 0) {
      return true;
    a2ec:	movs	r0, #1
  m_flags |= FILE_FLAG_DIR_DIRTY;
  return sync();

 fail:
  return false;
}
    a2ee:	add	sp, #12
    a2f0:	pop	{r4, r5, r6, r7, pc}
  m_validLength = m_curPosition;
  m_flags |= FILE_FLAG_DIR_DIRTY;
  return sync();

 fail:
  return false;
    a2f2:	movs	r0, #0
}
    a2f4:	bx	lr
    a2f6:	ldr	r0, [r4, #32]
  if (m_firstCluster == 0) {
      return true;
  }
  if (isContiguous()) {
    uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    if (m_curCluster) {
    a2f8:	ldr	r1, [r4, #24]
  }
  if (m_firstCluster == 0) {
      return true;
  }
  if (isContiguous()) {
    uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    a2fa:	ldrb.w	r3, [r0, #1093]	; 0x445
    a2fe:	ldrd	r6, r7, [r4, #8]
    a302:	adds	r3, #9
    a304:	uxtb	r3, r3
    a306:	adds.w	r6, r6, #4294967295
    a30a:	rsb	lr, r3, #32
    a30e:	adc.w	r7, r7, #4294967295
    a312:	lsr.w	r2, r6, r3
    a316:	lsl.w	lr, r7, lr
    a31a:	subs	r3, #32
    a31c:	orr.w	r2, r2, lr
    a320:	lsr.w	r3, r7, r3
    a324:	orrs	r2, r3
    a326:	adds	r2, #1
    if (m_curCluster) {
    a328:	cbz	r1, a358 <ExFatFile::truncate()+0xa0>
      toFree = m_curCluster + 1;
      nc -= 1 + m_curCluster - m_firstCluster;
    a32a:	subs	r5, #1
    a32c:	subs	r5, r5, r1
      return true;
  }
  if (isContiguous()) {
    uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    if (m_curCluster) {
      toFree = m_curCluster + 1;
    a32e:	adds	r1, #1
      nc -= 1 + m_curCluster - m_firstCluster;
    a330:	add	r2, r5
      return true;
  }
  if (isContiguous()) {
    uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    if (m_curCluster) {
      toFree = m_curCluster + 1;
    a332:	str	r1, [sp, #4]
      nc -= 1 + m_curCluster - m_firstCluster;
    } else {
      toFree = m_firstCluster;
      m_firstCluster = 0;
    }
    if (nc && !m_vol->bitmapModify(toFree, nc, 0)) {
    a334:	cbnz	r2, a37a <ExFatFile::truncate()+0xc2>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
  }
  m_dataLength = m_curPosition;
    a336:	ldrd	r0, r1, [r4]
  m_validLength = m_curPosition;
  m_flags |= FILE_FLAG_DIR_DIRTY;
    a33a:	ldrb.w	r3, [r4, #51]	; 0x33
    a33e:	orn	r3, r3, #127	; 0x7f
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
  }
  m_dataLength = m_curPosition;
    a342:	strd	r0, r1, [r4, #8]
  m_validLength = m_curPosition;
    a346:	strd	r0, r1, [r4, #16]
  m_flags |= FILE_FLAG_DIR_DIRTY;
    a34a:	strb.w	r3, [r4, #51]	; 0x33
  return sync();
    a34e:	mov	r0, r4
    a350:	bl	9f84 <ExFatFile::sync()>

 fail:
  return false;
}
    a354:	add	sp, #12
    a356:	pop	{r4, r5, r6, r7, pc}
    uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    if (m_curCluster) {
      toFree = m_curCluster + 1;
      nc -= 1 + m_curCluster - m_firstCluster;
    } else {
      toFree = m_firstCluster;
    a358:	str	r5, [sp, #4]
      m_firstCluster = 0;
    a35a:	str	r1, [r4, #28]
    a35c:	b.n	a334 <ExFatFile::truncate()+0x7c>
      goto fail;
    }
  } else {
    // need to free chain
    if (m_curCluster) {
      toFree = 0;
    a35e:	add	r2, sp, #8
    a360:	str.w	r0, [r2, #-4]!
      int8_t fg = m_vol->fatGet(m_curCluster, &toFree);
    a364:	ldr	r0, [r4, #32]
    a366:	bl	99d8 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
    a36a:	sxtb	r0, r0
      if (fg < 0) {
    a36c:	cmp	r0, #0
    a36e:	blt.n	a2e8 <ExFatFile::truncate()+0x30>
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (fg) {
    a370:	bne.n	a388 <ExFatFile::truncate()+0xd0>
      }
    } else {
      toFree = m_firstCluster;
      m_firstCluster = 0;
    }
    if (toFree) {
    a372:	ldr	r5, [sp, #4]
    a374:	cmp	r5, #0
    a376:	beq.n	a336 <ExFatFile::truncate()+0x7e>
    a378:	b.n	a2de <ExFatFile::truncate()+0x26>
      nc -= 1 + m_curCluster - m_firstCluster;
    } else {
      toFree = m_firstCluster;
      m_firstCluster = 0;
    }
    if (nc && !m_vol->bitmapModify(toFree, nc, 0)) {
    a37a:	movs	r3, #0
    a37c:	ldr	r1, [sp, #4]
    a37e:	bl	9868 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    a382:	cmp	r0, #0
    a384:	bne.n	a336 <ExFatFile::truncate()+0x7e>
    a386:	b.n	a2e8 <ExFatFile::truncate()+0x30>
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (fg) {
        // current cluster is end of chain
        if (!m_vol->fatPut(m_curCluster, EXFAT_EOC)) {
    a388:	mov.w	r2, #4294967295
    a38c:	ldr	r1, [r4, #24]
    a38e:	ldr	r0, [r4, #32]
    a390:	bl	99ec <ExFatPartition::fatPut(unsigned long, unsigned long)>
    a394:	cmp	r0, #0
    a396:	bne.n	a372 <ExFatFile::truncate()+0xba>
    a398:	b.n	a2e8 <ExFatFile::truncate()+0x30>
    a39a:	nop

0000a39c <ExFatFile::write(void const*, unsigned int)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
size_t ExFatFile::write(const void* buf, size_t nbyte) {
    a39c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a3a0:	ldrb.w	r3, [r0, #51]	; 0x33
    a3a4:	sub	sp, #12

  // number of bytes left to write  -  must be before goto statements
  size_t toWrite = nbyte;
  size_t n;
  // error if not an open file or is read-only
  if (!isWritable()) {
    a3a6:	lsls	r5, r3, #30

 fail:
  return false;
}
//------------------------------------------------------------------------------
size_t ExFatFile::write(const void* buf, size_t nbyte) {
    a3a8:	mov	r4, r0
    a3aa:	str	r2, [sp, #0]

  // number of bytes left to write  -  must be before goto statements
  size_t toWrite = nbyte;
  size_t n;
  // error if not an open file or is read-only
  if (!isWritable()) {
    a3ac:	bmi.n	a3c4 <ExFatFile::write(void const*, unsigned int)+0x28>
  }
  return nbyte;

 fail:
  // return for write error
  m_error |= WRITE_ERROR;
    a3ae:	ldrb.w	r3, [r4, #50]	; 0x32
    a3b2:	orr.w	r3, r3, #1
    a3b6:	strb.w	r3, [r4, #50]	; 0x32
  return -1;
    a3ba:	mov.w	r0, #4294967295
}
    a3be:	add	sp, #12
    a3c0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (!isWritable()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & FILE_FLAG_APPEND)) {
    a3c4:	lsls	r2, r3, #28
    a3c6:	mov	r9, r1
    a3c8:	bmi.w	a5d8 <ExFatFile::write(void const*, unsigned int)+0x23c>
    if (!seekSet(m_validLength)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  while (toWrite) {
    a3cc:	ldr	r3, [sp, #0]
    a3ce:	cmp	r3, #0
    a3d0:	beq.w	a600 <ExFatFile::write(void const*, unsigned int)+0x264>
    a3d4:	mov	r1, r4
    a3d6:	ldrd	r2, r3, [r1], #24
    a3da:	ldr.w	r8, [sp]
    a3de:	str	r1, [sp, #4]
      if (sectorOffset == 0 && m_curPosition >= m_validLength) {
        // start of new sector don't need to read into cache
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
      } else {
        // rewrite part of sector
        cacheOption = FsCache::CACHE_FOR_WRITE;
    a3e0:	mov.w	fp, #1
    a3e4:	mov	sl, r9
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  while (toWrite) {
    clusterOffset = m_curPosition & m_vol->clusterMask();
    a3e6:	ldr	r0, [r4, #32]
    sectorOffset = clusterOffset & m_vol->sectorMask();
    if (clusterOffset == 0) {
      // start of new cluster
      if (m_curCluster != 0) {
    a3e8:	ldr	r1, [r4, #24]
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  while (toWrite) {
    clusterOffset = m_curPosition & m_vol->clusterMask();
    a3ea:	ldr.w	r5, [r0, #1080]	; 0x438
    a3ee:	ands	r5, r2
    sectorOffset = clusterOffset & m_vol->sectorMask();
    a3f0:	ubfx	r9, r5, #0, #9
    if (clusterOffset == 0) {
    a3f4:	cbnz	r5, a448 <ExFatFile::write(void const*, unsigned int)+0xac>
      // start of new cluster
      if (m_curCluster != 0) {
    a3f6:	cmp	r1, #0
    a3f8:	beq.w	a556 <ExFatFile::write(void const*, unsigned int)+0x1ba>
        int fg;

        if (isContiguous()) {
    a3fc:	ldrb.w	r3, [r4, #51]	; 0x33
    a400:	lsls	r3, r3, #25
    a402:	bpl.w	a596 <ExFatFile::write(void const*, unsigned int)+0x1fa>
          uint32_t lc = m_firstCluster;
          lc += (m_dataLength - 1) >> m_vol->bytesPerClusterShift();
          if (m_curCluster < lc) {
    a406:	ldrd	r6, r7, [r4, #8]
    a40a:	ldrb.w	r2, [r0, #1093]	; 0x445
      // start of new cluster
      if (m_curCluster != 0) {
        int fg;

        if (isContiguous()) {
          uint32_t lc = m_firstCluster;
    a40e:	ldr	r3, [r4, #28]
          lc += (m_dataLength - 1) >> m_vol->bytesPerClusterShift();
          if (m_curCluster < lc) {
    a410:	adds	r2, #9
    a412:	uxtb	r2, r2
    a414:	adds.w	r6, r6, #4294967295
    a418:	adc.w	r7, r7, #4294967295
    a41c:	rsb	lr, r2, #32
    a420:	lsrs	r6, r2
    a422:	lsl.w	lr, r7, lr
    a426:	subs	r2, #32
    a428:	orr.w	r6, r6, lr
    a42c:	lsr.w	r2, r7, r2
    a430:	orrs	r6, r2
    a432:	add	r3, r6
    a434:	cmp	r1, r3
    a436:	bcc.w	a590 <ExFatFile::write(void const*, unsigned int)+0x1f4>
            goto fail;
          }
        }
        if (fg == 0) {
          // add cluster if at end of chain
          if (!addCluster()) {
    a43a:	mov	r0, r4
    a43c:	bl	9c88 <ExFatFile::addCluster()>
    a440:	cmp	r0, #0
    a442:	beq.n	a3ae <ExFatFile::write(void const*, unsigned int)+0x12>
    a444:	ldr	r0, [r4, #32]
    a446:	ldr	r1, [r4, #24]
    a448:	ldrb.w	r7, [r0, #1093]	; 0x445
        }
      }
    }
    // sector for data write
    sector = m_vol->clusterStartSector(m_curCluster) +
             (clusterOffset >> m_vol->bytesPerSectorShift());
    a44c:	ldr.w	r6, [r0, #1068]	; 0x42c
    a450:	lsrs	r5, r5, #9
    a452:	subs	r1, #2
    a454:	lsls	r1, r7
    a456:	add	r6, r5
    a458:	add	r1, r6

    if (sectorOffset != 0 || toWrite < m_vol->bytesPerSector()) {
    a45a:	cmp.w	r9, #0
    a45e:	bne.n	a548 <ExFatFile::write(void const*, unsigned int)+0x1ac>
    a460:	cmp.w	r8, #512	; 0x200
    a464:	bcs.n	a504 <ExFatFile::write(void const*, unsigned int)+0x168>
      // lesser of space and amount to write
      if (n > toWrite) {
        n = toWrite;
      }

      if (sectorOffset == 0 && m_curPosition >= m_validLength) {
    a466:	ldrd	r2, r3, [r4, #16]
    a46a:	ldrd	r6, r7, [r4]
    a46e:	cmp.w	r8, #512	; 0x200
    a472:	mov	r5, r8
    a474:	it	cs
    a476:	movcs.w	r5, #512	; 0x200
        // start of new sector don't need to read into cache
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
    a47a:	cmp	r7, r3
    a47c:	it	eq
    a47e:	cmpeq	r6, r2
    a480:	ite	cc
    a482:	movcc	r2, #1
    a484:	movcs	r2, #5
#endif  // USE_EXFAT_BITMAP_CACHE
  }
  void dataCacheDirty() {m_dataCache.dirty();}
  void dataCacheInvalidate() {m_dataCache.invalidate();}
  uint8_t* dataCacheGet(uint32_t sector, uint8_t option) {
    return m_dataCache.get(sector, option);
    a486:	add.w	r0, r0, #528	; 0x210
    a48a:	bl	8d34 <FsCache::get(unsigned long, unsigned char)>
      } else {
        // rewrite part of sector
        cacheOption = FsCache::CACHE_FOR_WRITE;
      }
      cache = m_vol->dataCacheGet(sector, cacheOption);
      if (!cache) {
    a48e:	cmp	r0, #0
    a490:	beq.n	a3ae <ExFatFile::write(void const*, unsigned int)+0x12>
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = cache + sectorOffset;
      memcpy(dst, src, n);
    a492:	add	r0, r9
    a494:	mov	r2, r5
    a496:	mov	r1, sl
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    a498:	add	r9, r5
      if (!cache) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = cache + sectorOffset;
      memcpy(dst, src, n);
    a49a:	bl	cb00 <memcpy>
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    a49e:	cmp.w	r9, #512	; 0x200
    a4a2:	beq.w	a5c6 <ExFatFile::write(void const*, unsigned int)+0x22a>
    a4a6:	mov	r0, r5
    a4a8:	movs	r1, #0
      if (!m_vol->cacheSafeWrite(sector, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    a4aa:	ldrd	r2, r3, [r4]
    src += n;
    toWrite -= n;
    if (m_curPosition > m_validLength) {
    a4ae:	ldrd	r6, r7, [r4, #16]
      if (!m_vol->cacheSafeWrite(sector, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    a4b2:	adds	r2, r2, r0
    a4b4:	adcs	r3, r1
    src += n;
    toWrite -= n;
    if (m_curPosition > m_validLength) {
    a4b6:	cmp	r7, r3
    a4b8:	it	eq
    a4ba:	cmpeq	r6, r2
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    src += n;
    a4bc:	add	sl, r5
    toWrite -= n;
    a4be:	rsb	r8, r5, r8
      if (!m_vol->cacheSafeWrite(sector, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    a4c2:	strd	r2, r3, [r4]
    src += n;
    toWrite -= n;
    if (m_curPosition > m_validLength) {
    a4c6:	bcs.n	a4d8 <ExFatFile::write(void const*, unsigned int)+0x13c>
      m_flags |= FILE_FLAG_DIR_DIRTY;
    a4c8:	ldrb.w	r1, [r4, #51]	; 0x33
      m_validLength = m_curPosition;
    a4cc:	strd	r2, r3, [r4, #16]
    }
    m_curPosition += n;
    src += n;
    toWrite -= n;
    if (m_curPosition > m_validLength) {
      m_flags |= FILE_FLAG_DIR_DIRTY;
    a4d0:	orn	r1, r1, #127	; 0x7f
    a4d4:	strb.w	r1, [r4, #51]	; 0x33
    if (!seekSet(m_validLength)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  while (toWrite) {
    a4d8:	cmp.w	r8, #0
    a4dc:	bne.n	a3e6 <ExFatFile::write(void const*, unsigned int)+0x4a>
    if (m_curPosition > m_validLength) {
      m_flags |= FILE_FLAG_DIR_DIRTY;
      m_validLength = m_curPosition;
    }
  }
  if (m_curPosition > m_dataLength) {
    a4de:	ldrd	r0, r1, [r4, #8]
    a4e2:	cmp	r1, r3
    a4e4:	it	eq
    a4e6:	cmpeq	r0, r2
    a4e8:	bcc.n	a5e8 <ExFatFile::write(void const*, unsigned int)+0x24c>
    m_dataLength = m_curPosition;
    // update fileSize and insure sync will update dir entry
    m_flags |= FILE_FLAG_DIR_DIRTY;
  } else if (FsDateTime::callback) {
    a4ea:	ldr	r3, [pc, #284]	; (a608 <ExFatFile::write(void const*, unsigned int)+0x26c>)
    a4ec:	ldr	r3, [r3, #0]
    a4ee:	cmp	r3, #0
    a4f0:	beq.w	a5fc <ExFatFile::write(void const*, unsigned int)+0x260>
    // insure sync will update modified date and time
    m_flags |= FILE_FLAG_DIR_DIRTY;
    a4f4:	ldrb.w	r3, [r4, #51]	; 0x33
    a4f8:	ldr	r0, [sp, #0]
    a4fa:	orn	r3, r3, #127	; 0x7f
    a4fe:	strb.w	r3, [r4, #51]	; 0x33
    a502:	b.n	a3be <ExFatFile::write(void const*, unsigned int)+0x22>
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
#if USE_MULTI_SECTOR_IO
    } else if (toWrite >= 2*m_vol->bytesPerSector()) {
    a504:	cmp.w	r8, #1024	; 0x400
    a508:	bcc.n	a55e <ExFatFile::write(void const*, unsigned int)+0x1c2>
      // use multiple sector write command
      uint32_t ns = toWrite >> m_vol->bytesPerSectorShift();
      // Limit writes to current cluster.
      uint32_t maxNs = m_vol->sectorsPerCluster()
                       - (clusterOffset >> m_vol->bytesPerSectorShift());
    a50a:	lsl.w	r3, fp, r7
    a50e:	subs	r5, r3, r5
    a510:	ldr.w	r2, [r0, #540]	; 0x21c
        }
      }
#if USE_MULTI_SECTOR_IO
    } else if (toWrite >= 2*m_vol->bytesPerSector()) {
      // use multiple sector write command
      uint32_t ns = toWrite >> m_vol->bytesPerSectorShift();
    a514:	mov.w	r3, r8, lsr #9
    a518:	cmp	r3, r5
    a51a:	it	cs
    a51c:	movcs	r3, r5
   * \param[in] sector Start sector of the range.
   * \param[in] count Number of sectors in the range.
   * \return true if a sector in the range is cached.
   */
  bool isCached(uint32_t sector, size_t count) {
    return sector <= m_sector && m_sector < (sector + count);
    a51e:	cmp	r1, r2
      uint32_t maxNs = m_vol->sectorsPerCluster()
                       - (clusterOffset >> m_vol->bytesPerSectorShift());
      if (ns > maxNs) {
        ns = maxNs;
      }
      n = ns << m_vol->bytesPerSectorShift();
    a520:	mov.w	r5, r3, lsl #9
    a524:	bhi.n	a538 <ExFatFile::write(void const*, unsigned int)+0x19c>
    a526:	adds	r6, r1, r3
    a528:	cmp	r2, r6
    a52a:	bcs.n	a538 <ExFatFile::write(void const*, unsigned int)+0x19c>
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    m_sector = 0XFFFFFFFF;
    a52c:	mov.w	r2, #4294967295
    m_blockDev = blockDev;
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    a530:	strb.w	r9, [r0, #528]	; 0x210
    m_sector = 0XFFFFFFFF;
    a534:	str.w	r2, [r0, #540]	; 0x21c
   */
  bool cacheSafeWrite(uint32_t sector, const uint8_t* src, size_t count) {
     if (isCached(sector, count)) {
      invalidate();
    }
    return m_blockDev->writeSectors(sector, src, count);
    a538:	ldr.w	r0, [r0, #532]	; 0x214
    a53c:	mov	r2, sl
    a53e:	bl	c8bc <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)>
      if (!m_vol->cacheSafeWrite(sector, src, ns)) {
    a542:	cmp	r0, #0
    a544:	bne.n	a4a6 <ExFatFile::write(void const*, unsigned int)+0x10a>
    a546:	b.n	a3ae <ExFatFile::write(void const*, unsigned int)+0x12>
             (clusterOffset >> m_vol->bytesPerSectorShift());

    if (sectorOffset != 0 || toWrite < m_vol->bytesPerSector()) {
      // partial sector - must use cache
      // max space in sector
      n = m_vol->bytesPerSector() - sectorOffset;
    a548:	rsb	r5, r9, #512	; 0x200
    a54c:	cmp	r5, r8
    a54e:	it	cs
    a550:	movcs	r5, r8
      if (sectorOffset == 0 && m_curPosition >= m_validLength) {
        // start of new sector don't need to read into cache
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
      } else {
        // rewrite part of sector
        cacheOption = FsCache::CACHE_FOR_WRITE;
    a552:	movs	r2, #1
    a554:	b.n	a486 <ExFatFile::write(void const*, unsigned int)+0xea>
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
      } else {
        if (m_firstCluster == 0) {
    a556:	ldr	r1, [r4, #28]
    a558:	cbz	r1, a5a4 <ExFatFile::write(void const*, unsigned int)+0x208>
            DBG_FAIL_MACRO;
            goto fail;
          }
          m_firstCluster = m_curCluster;
        } else {
          m_curCluster = m_firstCluster;
    a55a:	str	r1, [r4, #24]
    a55c:	b.n	a448 <ExFatFile::write(void const*, unsigned int)+0xac>
   * \param[in] sector Logical sector to be written.
   * \param[in] src Pointer to the location of the data to be written.
   * \return true for success or false for failure.
   */
  bool cacheSafeWrite(uint32_t sector, const uint8_t* src) {
    if (isCached(sector)) {
    a55e:	ldr.w	r3, [r0, #540]	; 0x21c
    a562:	cmp	r1, r3
    a564:	beq.n	a5b8 <ExFatFile::write(void const*, unsigned int)+0x21c>
      invalidate();
    }
    return m_blockDev->writeSector(sector, src);
    a566:	ldr.w	r0, [r0, #532]	; 0x214
   * \param[in] sector Logical sector to be written.
   * \param[in] src Pointer to the location of the data to be written.
   * \return true for success or false for failure.
   */
  bool writeSector(uint32_t sector, const uint8_t* src) {
    if (m_sharedSpi) {
    a56a:	ldrb	r3, [r0, #13]
    a56c:	cbnz	r3, a588 <ExFatFile::write(void const*, unsigned int)+0x1ec>
      return writeSingle(sector, src);
    } else {
      return writeSectors(sector, src, 1);
    a56e:	movs	r3, #1
    a570:	mov	r2, sl
    a572:	bl	c8bc <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)>
        goto fail;
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      n = m_vol->bytesPerSector();
      if (!m_vol->cacheSafeWrite(sector, src)) {
    a576:	cmp	r0, #0
    a578:	beq.w	a3ae <ExFatFile::write(void const*, unsigned int)+0x12>
    a57c:	mov.w	r0, #512	; 0x200
    a580:	movs	r1, #0
         DBG_FAIL_MACRO;
        goto fail;
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      n = m_vol->bytesPerSector();
    a582:	mov.w	r5, #512	; 0x200
    a586:	b.n	a4aa <ExFatFile::write(void const*, unsigned int)+0x10e>
   * \param[in] src Pointer to the location of the data to be written.
   * \return true for success or false for failure.
   */
  bool writeSector(uint32_t sector, const uint8_t* src) {
    if (m_sharedSpi) {
      return writeSingle(sector, src);
    a588:	mov	r2, sl
    a58a:	bl	c7e0 <SdSpiCard::writeSingle(unsigned long, unsigned char const*)>
    a58e:	b.n	a576 <ExFatFile::write(void const*, unsigned int)+0x1da>

        if (isContiguous()) {
          uint32_t lc = m_firstCluster;
          lc += (m_dataLength - 1) >> m_vol->bytesPerClusterShift();
          if (m_curCluster < lc) {
            m_curCluster++;
    a590:	adds	r1, #1
    a592:	str	r1, [r4, #24]
    a594:	b.n	a448 <ExFatFile::write(void const*, unsigned int)+0xac>
            fg = 1;
          } else {
            fg = 0;
          }
        } else {
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    a596:	ldr	r2, [sp, #4]
    a598:	bl	99d8 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
          if (fg < 0) {
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
        if (fg == 0) {
    a59c:	cmp	r0, #0
    a59e:	bne.w	a444 <ExFatFile::write(void const*, unsigned int)+0xa8>
    a5a2:	b.n	a43a <ExFatFile::write(void const*, unsigned int)+0x9e>
          }
        }
      } else {
        if (m_firstCluster == 0) {
          // allocate first cluster of file
          if (!addCluster()) {
    a5a4:	mov	r0, r4
    a5a6:	bl	9c88 <ExFatFile::addCluster()>
    a5aa:	cmp	r0, #0
    a5ac:	beq.w	a3ae <ExFatFile::write(void const*, unsigned int)+0x12>
            DBG_FAIL_MACRO;
            goto fail;
          }
          m_firstCluster = m_curCluster;
    a5b0:	ldr	r1, [r4, #24]
    a5b2:	str	r1, [r4, #28]
    a5b4:	ldr	r0, [r4, #32]
    a5b6:	b.n	a448 <ExFatFile::write(void const*, unsigned int)+0xac>
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    m_sector = 0XFFFFFFFF;
    a5b8:	mov.w	r3, #4294967295
    m_blockDev = blockDev;
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    a5bc:	strb.w	r9, [r0, #528]	; 0x210
    m_sector = 0XFFFFFFFF;
    a5c0:	str.w	r3, [r0, #540]	; 0x21c
    a5c4:	b.n	a566 <ExFatFile::write(void const*, unsigned int)+0x1ca>
  }
  uint32_t dataCacheSector() {return m_dataCache.sector();}
  bool dataCacheSync() {return m_dataCache.sync();}
    a5c6:	ldr	r0, [r4, #32]
    a5c8:	add.w	r0, r0, #528	; 0x210
    a5cc:	bl	8d90 <FsCache::sync()>
      }
      uint8_t* dst = cache + sectorOffset;
      memcpy(dst, src, n);
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
        // Force write if sector is full - improves large writes.
        if (!m_vol->dataCacheSync()) {
    a5d0:	cmp	r0, #0
    a5d2:	bne.w	a4a6 <ExFatFile::write(void const*, unsigned int)+0x10a>
    a5d6:	b.n	a3ae <ExFatFile::write(void const*, unsigned int)+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & FILE_FLAG_APPEND)) {
    if (!seekSet(m_validLength)) {
    a5d8:	ldrd	r2, r3, [r0, #16]
    a5dc:	bl	9128 <ExFatFile::seekSet(unsigned long long)>
    a5e0:	cmp	r0, #0
    a5e2:	beq.w	a3ae <ExFatFile::write(void const*, unsigned int)+0x12>
    a5e6:	b.n	a3cc <ExFatFile::write(void const*, unsigned int)+0x30>
    }
  }
  if (m_curPosition > m_dataLength) {
    m_dataLength = m_curPosition;
    // update fileSize and insure sync will update dir entry
    m_flags |= FILE_FLAG_DIR_DIRTY;
    a5e8:	ldrb.w	r1, [r4, #51]	; 0x33
    a5ec:	ldr	r0, [sp, #0]
    a5ee:	orn	r1, r1, #127	; 0x7f
      m_flags |= FILE_FLAG_DIR_DIRTY;
      m_validLength = m_curPosition;
    }
  }
  if (m_curPosition > m_dataLength) {
    m_dataLength = m_curPosition;
    a5f2:	strd	r2, r3, [r4, #8]
    // update fileSize and insure sync will update dir entry
    m_flags |= FILE_FLAG_DIR_DIRTY;
    a5f6:	strb.w	r1, [r4, #51]	; 0x33
    a5fa:	b.n	a3be <ExFatFile::write(void const*, unsigned int)+0x22>
    a5fc:	ldr	r0, [sp, #0]
    a5fe:	b.n	a3be <ExFatFile::write(void const*, unsigned int)+0x22>
    a600:	ldrd	r2, r3, [r4]
    a604:	b.n	a4de <ExFatFile::write(void const*, unsigned int)+0x142>
    a606:	nop
    a608:	.word	0x20002bd8

0000a60c <FatFile::openRoot(FatVolume*) [clone .part.37]>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
    a60c:	push	{r3, r4, r5, lr}
    a60e:	mov	r4, r0
    a610:	mov	r5, r1
  // error if file is already open
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(FatFile));
    a612:	movs	r2, #36	; 0x24
    a614:	movs	r1, #0
    a616:	bl	106cc <memset>

  m_vol = vol;
    a61a:	str	r5, [r4, #8]
  switch (vol->fatType()) {
    a61c:	ldrb	r3, [r5, #7]
    a61e:	cmp	r3, #16
    a620:	beq.n	a634 <FatFile::openRoot(FatVolume*) [clone .part.37]+0x28>
    a622:	cmp	r3, #32
    a624:	bne.n	a630 <FatFile::openRoot(FatVolume*) [clone .part.37]+0x24>
  case 16:
    m_attributes = FILE_ATTR_ROOT_FIXED;
    break;

  case 32:
    m_attributes = FILE_ATTR_ROOT32;
    a626:	movs	r3, #64	; 0x40
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = FILE_FLAG_READ;
    a628:	movs	r0, #1
  case 16:
    m_attributes = FILE_ATTR_ROOT_FIXED;
    break;

  case 32:
    m_attributes = FILE_ATTR_ROOT32;
    a62a:	strb	r3, [r4, #0]
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = FILE_FLAG_READ;
    a62c:	strb	r0, [r4, #2]
    a62e:	pop	{r3, r4, r5, pc}
  return true;

 fail:
  return false;
    a630:	movs	r0, #0
}
    a632:	pop	{r3, r4, r5, pc}
  switch (vol->fatType()) {
#if FAT12_SUPPORT
  case 12:
#endif  // FAT12_SUPPORT
  case 16:
    m_attributes = FILE_ATTR_ROOT_FIXED;
    a634:	movs	r3, #32
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = FILE_FLAG_READ;
    a636:	movs	r0, #1
  switch (vol->fatType()) {
#if FAT12_SUPPORT
  case 12:
#endif  // FAT12_SUPPORT
  case 16:
    m_attributes = FILE_ATTR_ROOT_FIXED;
    a638:	strb	r3, [r4, #0]
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = FILE_FLAG_READ;
    a63a:	strb	r0, [r4, #2]
    a63c:	pop	{r3, r4, r5, pc}
    a63e:	nop

0000a640 <FatFile::addCluster()>:
#include "FatVolume.h"
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
#if USE_FAT_FILE_FLAG_CONTIGUOUS
  uint32_t cc = m_curCluster;
    a640:	mov	r2, r0
#include "../common/DebugMacros.h"
#include "FatFile.h"
#include "FatVolume.h"
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
    a642:	push	{r3, r4, r5, lr}
#if USE_FAT_FILE_FLAG_CONTIGUOUS
  uint32_t cc = m_curCluster;
    a644:	ldr.w	r5, [r2, #16]!
#include "../common/DebugMacros.h"
#include "FatFile.h"
#include "FatVolume.h"
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
    a648:	mov	r4, r0
#if USE_FAT_FILE_FLAG_CONTIGUOUS
  uint32_t cc = m_curCluster;
  if (!m_vol->allocateCluster(m_curCluster, &m_curCluster)) {
    a64a:	mov	r1, r5
    a64c:	ldr	r0, [r0, #8]
    a64e:	bl	b48c <FatPartition::allocateCluster(unsigned long, unsigned long*)>
    a652:	cbz	r0, a66a <FatFile::addCluster()+0x2a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (cc == 0) {
    a654:	cbz	r5, a66c <FatFile::addCluster()+0x2c>
    m_flags |= FILE_FLAG_CONTIGUOUS;
  } else if (m_curCluster != (cc + 1)) {
    a656:	ldr	r3, [r4, #16]
    a658:	adds	r5, #1
    a65a:	cmp	r3, r5
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
    a65c:	ldrb	r3, [r4, #2]
    a65e:	it	ne
    a660:	andne.w	r3, r3, #191	; 0xbf
  }
  m_flags |= FILE_FLAG_DIR_DIRTY;
    a664:	orn	r3, r3, #127	; 0x7f
    a668:	strb	r3, [r4, #2]
  return false;
#else  // USE_FAT_FILE_FLAG_CONTIGUOUS
  m_flags |= FILE_FLAG_DIR_DIRTY;
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
}
    a66a:	pop	{r3, r4, r5, pc}
  if (!m_vol->allocateCluster(m_curCluster, &m_curCluster)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (cc == 0) {
    m_flags |= FILE_FLAG_CONTIGUOUS;
    a66c:	ldrb	r3, [r4, #2]
    a66e:	orr.w	r3, r3, #64	; 0x40
    a672:	b.n	a664 <FatFile::addCluster()+0x24>

0000a674 <FatFile::addDirCluster()>:
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
}
//------------------------------------------------------------------------------
// Add a cluster to a directory file and zero the cluster.
// Return with first sector of cluster in the cache.
bool FatFile::addDirCluster() {
    a674:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t sector;
  cache_t* pc;

  if (isRootFixed()) {
    a678:	ldrb	r3, [r0, #0]
    a67a:	and.w	r3, r3, #32
    a67e:	cbnz	r3, a68c <FatFile::addDirCluster()+0x18>
    a680:	and.w	r4, r3, #255	; 0xff
    DBG_FAIL_MACRO;
    goto fail;
  }
  // max folder size
  if (m_curPosition >= 512UL*4095) {
    a684:	ldr	r1, [r0, #20]
    a686:	ldr	r3, [pc, #140]	; (a714 <FatFile::addDirCluster()+0xa0>)
    a688:	cmp	r1, r3
    a68a:	bls.n	a694 <FatFile::addDirCluster()+0x20>
  // Set position to EOF to avoid inconsistent curCluster/curPosition.
  m_curPosition += m_vol->bytesPerCluster();
  return true;

 fail:
  return false;
    a68c:	movs	r6, #0
}
    a68e:	mov	r0, r6
    a690:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a694:	mov	r5, r0
  // max folder size
  if (m_curPosition >= 512UL*4095) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!addCluster()) {
    a696:	bl	a640 <FatFile::addCluster()>
    a69a:	mov	r6, r0
    a69c:	cmp	r0, #0
    a69e:	beq.n	a68c <FatFile::addDirCluster()+0x18>
    DBG_FAIL_MACRO;
    goto fail;
  }
  sector = m_vol->clusterStartSector(m_curCluster);
    a6a0:	ldr	r0, [r5, #8]
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t sectorOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterSectorMask;
  }
  uint32_t clusterStartSector(uint32_t cluster) const {
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    a6a2:	ldr	r3, [r5, #16]
    a6a4:	ldrb	r7, [r0, #6]
    a6a6:	ldr	r2, [r0, #20]
    a6a8:	subs	r3, #2
    a6aa:	lsls	r3, r7
    a6ac:	adds	r7, r3, r2
  bool cacheSync() {
    return m_cache.sync() && syncDevice();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t sector, uint8_t options) {
    return reinterpret_cast<cache_t*>(m_cache.get(sector, options));
    a6ae:	adds	r0, #36	; 0x24
    a6b0:	mov	r1, r7
    a6b2:	movs	r2, #5
    a6b4:	bl	8d34 <FsCache::get(unsigned long, unsigned char)>
  pc = m_vol->cacheFetchData(sector, FsCache::CACHE_RESERVE_FOR_WRITE);
  if (!pc) {
    a6b8:	mov	r8, r0
    a6ba:	cmp	r0, #0
    a6bc:	beq.n	a68c <FatFile::addDirCluster()+0x18>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(pc, 0, m_vol->bytesPerSector());
    a6be:	mov.w	r2, #512	; 0x200
    a6c2:	mov	r1, r4
    a6c4:	bl	106cc <memset>
  // zero rest of clusters
  for (uint8_t i = 1; i < m_vol->sectorsPerCluster(); i++) {
    a6c8:	ldr	r3, [r5, #8]
    a6ca:	ldrb	r2, [r3, #4]
    a6cc:	cmp	r2, #1
    a6ce:	bls.n	a6fe <FatFile::addDirCluster()+0x8a>
    a6d0:	movs	r4, #1
    a6d2:	b.n	a6ec <FatFile::addDirCluster()+0x78>
    } else {
      return writeSectors(sector, src, 1);
    a6d4:	movs	r3, #1
    a6d6:	mov	r2, r8
    a6d8:	bl	c8bc <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)>
    a6dc:	adds	r4, #1
    a6de:	uxtb	r4, r4
    if (!m_vol->writeSector(sector + i, pc->data)) {
    a6e0:	cmp	r0, #0
    a6e2:	beq.n	a68c <FatFile::addDirCluster()+0x18>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(pc, 0, m_vol->bytesPerSector());
  // zero rest of clusters
  for (uint8_t i = 1; i < m_vol->sectorsPerCluster(); i++) {
    a6e4:	ldr	r3, [r5, #8]
    a6e6:	ldrb	r2, [r3, #4]
    a6e8:	cmp	r2, r4
    a6ea:	bls.n	a6fe <FatFile::addDirCluster()+0x8a>
    a6ec:	ldr	r0, [r3, #0]
   * \param[in] sector Logical sector to be written.
   * \param[in] src Pointer to the location of the data to be written.
   * \return true for success or false for failure.
   */
  bool writeSector(uint32_t sector, const uint8_t* src) {
    if (m_sharedSpi) {
    a6ee:	ldrb	r3, [r0, #13]
    if (!m_vol->writeSector(sector + i, pc->data)) {
    a6f0:	adds	r1, r4, r7
    a6f2:	cmp	r3, #0
    a6f4:	beq.n	a6d4 <FatFile::addDirCluster()+0x60>
      return writeSingle(sector, src);
    a6f6:	mov	r2, r8
    a6f8:	bl	c7e0 <SdSpiCard::writeSingle(unsigned long, unsigned char const*)>
    a6fc:	b.n	a6dc <FatFile::addDirCluster()+0x68>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Set position to EOF to avoid inconsistent curCluster/curPosition.
  m_curPosition += m_vol->bytesPerCluster();
    a6fe:	ldrb	r3, [r3, #6]
    a700:	ldr	r1, [r5, #20]
    a702:	mov.w	r2, #512	; 0x200
    a706:	lsl.w	r3, r2, r3
    a70a:	uxtah	r3, r1, r3
    a70e:	str	r3, [r5, #20]
    a710:	b.n	a68e <FatFile::addDirCluster()+0x1a>
    a712:	nop
    a714:	.word	0x001ffdff

0000a718 <FatFile::cacheDirEntry(unsigned char)>:
  return false;
}
//------------------------------------------------------------------------------
// cache a file's directory entry
// return pointer to cached entry or null for failure
DirFat_t* FatFile::cacheDirEntry(uint8_t action) {
    a718:	push	{r4, lr}
    a71a:	mov	r4, r0
    a71c:	ldr	r0, [r0, #8]
    a71e:	mov	r2, r1
    a720:	adds	r0, #36	; 0x24
    a722:	ldr	r1, [r4, #24]
    a724:	bl	8d34 <FsCache::get(unsigned long, unsigned char)>
  cache_t* pc;
  pc = m_vol->cacheFetchData(m_dirSector, action);
  if (!pc) {
    a728:	cbz	r0, a734 <FatFile::cacheDirEntry(unsigned char)+0x1c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  return pc->dir + (m_dirIndex & 0XF);
    a72a:	ldrh	r3, [r4, #4]
    a72c:	and.w	r3, r3, #15
    a730:	add.w	r0, r0, r3, lsl #5

 fail:
  return nullptr;
}
    a734:	pop	{r4, pc}
    a736:	nop

0000a738 <FatFile::sync() [clone .part.41]>:
 fail:
  m_curCluster = tmp;
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
    a738:	push	{r4, r5, r6, lr}
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    a73a:	ldrsb.w	r3, [r0, #2]
    a73e:	cmp	r3, #0
 fail:
  m_curCluster = tmp;
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
    a740:	sub	sp, #8
    a742:	mov	r4, r0
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    a744:	blt.n	a778 <FatFile::sync() [clone .part.41]+0x40>
      setLe16(dir->modifyTime, time);
    }
    // clear directory dirty
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
  }
  if (m_vol->cacheSync()) {
    a746:	ldr	r5, [r4, #8]
  cache_t* cacheFetchFat(uint32_t sector, uint8_t options) {
    options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    return reinterpret_cast<cache_t*>(m_fatCache.get(sector, options));
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    a748:	add.w	r0, r5, #36	; 0x24
    a74c:	bl	8d90 <FsCache::sync()>
    a750:	cbnz	r0, a760 <FatFile::sync() [clone .part.41]+0x28>
    return true;
  }
  DBG_FAIL_MACRO;

 fail:
  m_error |= WRITE_ERROR;
    a752:	ldrb	r3, [r4, #1]
    a754:	orr.w	r3, r3, #1
    a758:	strb	r3, [r4, #1]
  return false;
    a75a:	movs	r0, #0
}
    a75c:	add	sp, #8
    a75e:	pop	{r4, r5, r6, pc}
    a760:	add.w	r0, r5, #564	; 0x234
    a764:	bl	8d90 <FsCache::sync()>
    a768:	cmp	r0, #0
    a76a:	beq.n	a752 <FatFile::sync() [clone .part.41]+0x1a>
  }
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
  }
  bool syncDevice() {
    return m_blockDev->syncDevice();
    a76c:	ldr	r0, [r5, #0]
    a76e:	bl	c4e8 <SdSpiCard::syncDevice()>
  cache_t* cacheFetchFat(uint32_t sector, uint8_t options) {
    options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    return reinterpret_cast<cache_t*>(m_fatCache.get(sector, options));
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    a772:	cmp	r0, #0
    a774:	beq.n	a752 <FatFile::sync() [clone .part.41]+0x1a>
    a776:	b.n	a75c <FatFile::sync() [clone .part.41]+0x24>
  uint8_t ms10;
  if (!isOpen()) {
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    DirFat_t* dir = cacheDirEntry(FsCache::CACHE_FOR_WRITE);
    a778:	movs	r1, #1
    a77a:	bl	a718 <FatFile::cacheDirEntry(unsigned char)>
    // check for deleted by another open file object
    if (!dir || dir->name[0] == FAT_NAME_DELETED) {
    a77e:	mov	r5, r0
    a780:	cmp	r0, #0
    a782:	beq.n	a752 <FatFile::sync() [clone .part.41]+0x1a>
    a784:	ldrb	r3, [r0, #0]
    a786:	cmp	r3, #229	; 0xe5
    a788:	beq.n	a752 <FatFile::sync() [clone .part.41]+0x1a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // do not set filesize for dir files
    if (isFile()) {
    a78a:	ldrb	r3, [r4, #0]
    // update first cluster fields
    setLe16(dir->firstClusterLow, m_firstCluster & 0XFFFF);
    setLe16(dir->firstClusterHigh, m_firstCluster >> 16);

    // set modify time if user supplied a callback date/time function
    if (FsDateTime::callback) {
    a78c:	ldr	r2, [pc, #56]	; (a7c8 <FatFile::sync() [clone .part.41]+0x90>)
    if (!dir || dir->name[0] == FAT_NAME_DELETED) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // do not set filesize for dir files
    if (isFile()) {
    a78e:	lsls	r3, r3, #28
      setLe32(dir->fileSize, m_fileSize);
    a790:	itt	mi
    a792:	ldrmi	r3, [r4, #28]
}

inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
    a794:	strmi	r3, [r0, #28]
    }

    // update first cluster fields
    setLe16(dir->firstClusterLow, m_firstCluster & 0XFFFF);
    a796:	ldr	r3, [r4, #32]
    setLe16(dir->firstClusterHigh, m_firstCluster >> 16);

    // set modify time if user supplied a callback date/time function
    if (FsDateTime::callback) {
    a798:	ldr	r6, [r2, #0]
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    a79a:	strh	r3, [r0, #26]
    a79c:	lsrs	r3, r3, #16
    a79e:	strh	r3, [r0, #20]
    a7a0:	cbz	r6, a7bc <FatFile::sync() [clone .part.41]+0x84>
      FsDateTime::callback(&date, &time, &ms10);
    a7a2:	add.w	r2, sp, #3
    a7a6:	add.w	r1, sp, #6
    a7aa:	add	r0, sp, #4
    a7ac:	blx	r6
      setLe16(dir->modifyDate, date);
    a7ae:	ldrh.w	r3, [sp, #4]
    a7b2:	ldrh.w	r2, [sp, #6]
    a7b6:	strh	r3, [r5, #24]
    a7b8:	strh	r3, [r5, #18]
    a7ba:	strh	r2, [r5, #22]
      setLe16(dir->accessDate, date);
      setLe16(dir->modifyTime, time);
    }
    // clear directory dirty
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    a7bc:	ldrb	r3, [r4, #2]
    a7be:	and.w	r3, r3, #127	; 0x7f
    a7c2:	strb	r3, [r4, #2]
    a7c4:	b.n	a746 <FatFile::sync() [clone .part.41]+0xe>
    a7c6:	nop
    a7c8:	.word	0x20002bd8

0000a7cc <FatFile::close()>:

 fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
    a7cc:	push	{r4, lr}
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    a7ce:	ldrb	r3, [r0, #0]

 fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
    a7d0:	mov	r4, r0
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    a7d2:	cbnz	r3, a7de <FatFile::close()+0x12>
  return nullptr;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
  bool rtn = sync();
  m_attributes = FILE_ATTR_CLOSED;
    a7d4:	movs	r3, #0
    a7d6:	strb	r3, [r4, #0]
  m_flags = 0;
    a7d8:	strb	r3, [r4, #2]
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    return true;
    a7da:	movs	r0, #1
bool FatFile::close() {
  bool rtn = sync();
  m_attributes = FILE_ATTR_CLOSED;
  m_flags = 0;
  return rtn;
}
    a7dc:	pop	{r4, pc}
    a7de:	bl	a738 <FatFile::sync() [clone .part.41]>
  return nullptr;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
  bool rtn = sync();
  m_attributes = FILE_ATTR_CLOSED;
    a7e2:	movs	r3, #0
    a7e4:	strb	r3, [r4, #0]
  m_flags = 0;
    a7e6:	strb	r3, [r4, #2]
  return rtn;
}
    a7e8:	pop	{r4, pc}
    a7ea:	nop

0000a7ec <FatFile::mkdir(FatFile*, fname_t*)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::mkdir(FatFile* parent, fname_t* fname) {
    a7ec:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  uint32_t sector;
  DirFat_t dot;
  DirFat_t* dir;
  cache_t* pc;

  if (!parent->isDir()) {
    a7f0:	ldrb	r4, [r1, #0]
    a7f2:	tst.w	r4, #112	; 0x70

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::mkdir(FatFile* parent, fname_t* fname) {
    a7f6:	sub	sp, #36	; 0x24
  uint32_t sector;
  DirFat_t dot;
  DirFat_t* dir;
  cache_t* pc;

  if (!parent->isDir()) {
    a7f8:	bne.n	a802 <FatFile::mkdir(FatFile*, fname_t*)+0x16>
  // write first sector
  return m_vol->cacheSync();

 fail:
  return false;
}
    a7fa:	movs	r0, #0
    a7fc:	add	sp, #36	; 0x24
    a7fe:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if (!parent->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // create a normal file
  if (!open(parent, fname, O_CREAT | O_EXCL | O_RDWR)) {
    a802:	movw	r3, #2562	; 0xa02
    a806:	mov	r5, r0
    a808:	mov	r4, r1
    a80a:	bl	bca8 <FatFile::open(FatFile*, fname_t*, int)>
    a80e:	cmp	r0, #0
    a810:	beq.n	a7fa <FatFile::mkdir(FatFile*, fname_t*)+0xe>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // convert file to directory
  m_flags = FILE_FLAG_READ;
    a812:	movs	r2, #1
  m_attributes = FILE_ATTR_SUBDIR;
    a814:	movs	r3, #16
  if (!open(parent, fname, O_CREAT | O_EXCL | O_RDWR)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // convert file to directory
  m_flags = FILE_FLAG_READ;
    a816:	strb	r2, [r5, #2]
  m_attributes = FILE_ATTR_SUBDIR;
    a818:	strb	r3, [r5, #0]

  // allocate and zero first cluster
  if (!addDirCluster()) {
    a81a:	mov	r0, r5
    a81c:	bl	a674 <FatFile::addDirCluster()>
    a820:	cmp	r0, #0
    a822:	beq.n	a7fa <FatFile::mkdir(FatFile*, fname_t*)+0xe>
bool FatFile::seekSet(uint32_t pos) {
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
  // error if file not open
  if (!isOpen()) {
    a824:	ldrb	r3, [r5, #0]
  // allocate and zero first cluster
  if (!addDirCluster()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_firstCluster = m_curCluster;
    a826:	ldr	r2, [r5, #16]
    a828:	str	r2, [r5, #32]
bool FatFile::seekSet(uint32_t pos) {
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
  // error if file not open
  if (!isOpen()) {
    a82a:	cmp	r3, #0
    a82c:	bne.n	a918 <FatFile::mkdir(FatFile*, fname_t*)+0x12c>
  if (!sync()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // cache entry - should already be in cache due to sync() call
  dir = cacheDirEntry(FsCache::CACHE_FOR_WRITE);
    a82e:	movs	r1, #1
    a830:	mov	r0, r5
    a832:	bl	a718 <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    a836:	mov	r6, r0
    a838:	cmp	r0, #0
    a83a:	beq.n	a7fa <FatFile::mkdir(FatFile*, fname_t*)+0xe>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // change directory entry  attribute
  dir->attributes = FAT_ATTRIB_DIRECTORY;
    a83c:	movs	r3, #16
    a83e:	strb	r3, [r0, #11]

  // make entry for '.'
  memcpy(&dot, dir, sizeof(dot));
    a840:	ldr	r2, [r0, #8]
    a842:	ldr	r1, [r6, #4]
    a844:	ldr	r3, [r6, #12]
    a846:	ldr	r0, [r0, #0]
    a848:	ldrh.w	r8, [r6, #20]
    a84c:	ldrh.w	r9, [r6, #26]
    a850:	mov	r7, sp
    a852:	stmia	r7!, {r0, r1, r2, r3}
    a854:	ldr	r1, [r6, #20]
    a856:	ldr	r2, [r6, #24]
    a858:	ldr	r3, [r6, #28]
    a85a:	ldr	r0, [r6, #16]
  dot.name[0] = '.';
    a85c:	add	r6, sp, #32
  }
  // change directory entry  attribute
  dir->attributes = FAT_ATTRIB_DIRECTORY;

  // make entry for '.'
  memcpy(&dot, dir, sizeof(dot));
    a85e:	stmia	r7!, {r0, r1, r2, r3}
  dot.name[0] = '.';
    a860:	movs	r3, #46	; 0x2e
    a862:	strb.w	r3, [r6, #-32]!
    a866:	add.w	r1, sp, #10
    a86a:	mov	r3, r6
  for (uint8_t i = 1; i < 11; i++) {
    dot.name[i] = ' ';
    a86c:	movs	r2, #32
    a86e:	strb.w	r2, [r3, #1]!
  dir->attributes = FAT_ATTRIB_DIRECTORY;

  // make entry for '.'
  memcpy(&dot, dir, sizeof(dot));
  dot.name[0] = '.';
  for (uint8_t i = 1; i < 11; i++) {
    a872:	cmp	r3, r1
    a874:	bne.n	a86e <FatFile::mkdir(FatFile*, fname_t*)+0x82>
    dot.name[i] = ' ';
  }

  // cache sector for '.'  and '..'
  sector = m_vol->clusterStartSector(m_firstCluster);
    a876:	ldr	r0, [r5, #8]
  bool cacheSync() {
    return m_cache.sync() && syncDevice();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t sector, uint8_t options) {
    return reinterpret_cast<cache_t*>(m_cache.get(sector, options));
    a878:	ldr	r3, [r5, #32]
    a87a:	ldrb	r2, [r0, #6]
    a87c:	ldr	r1, [r0, #20]
    a87e:	subs	r3, #2
    a880:	lsls	r3, r2
    a882:	add	r1, r3
    a884:	adds	r0, #36	; 0x24
    a886:	movs	r2, #1
    a888:	bl	8d34 <FsCache::get(unsigned long, unsigned char)>
  pc = m_vol->cacheFetchData(sector, FsCache::CACHE_FOR_WRITE);
  if (!pc) {
    a88c:	mov	lr, r0
    a88e:	cmp	r0, #0
    a890:	beq.n	a7fa <FatFile::mkdir(FatFile*, fname_t*)+0xe>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // copy '.' to sector
  memcpy(&pc->dir[0], &dot, sizeof(dot));
    a892:	mov	r7, r6
    a894:	strh.w	r8, [sp, #20]
    a898:	strh.w	r9, [sp, #26]
    a89c:	ldmia	r7!, {r0, r1, r2, r3}
    a89e:	str.w	r0, [lr]
    a8a2:	str.w	r1, [lr, #4]
    a8a6:	str.w	r2, [lr, #8]
    a8aa:	str.w	r3, [lr, #12]
    a8ae:	ldmia	r7!, {r0, r1, r2, r3}
    a8b0:	str.w	r0, [lr, #16]
    a8b4:	str.w	r1, [lr, #20]
    a8b8:	str.w	r2, [lr, #24]
    a8bc:	str.w	r3, [lr, #28]
  // make entry for '..'
  dot.name[1] = '.';
  setLe16(dot.firstClusterLow, parent->m_firstCluster & 0XFFFF);
    a8c0:	ldr	r3, [r4, #32]
  setLe16(dot.firstClusterHigh, parent->m_firstCluster >> 16);
  // copy '..' to sector
  memcpy(&pc->dir[1], &dot, sizeof(dot));
    a8c2:	strh.w	r3, [sp, #26]
    goto fail;
  }
  // copy '.' to sector
  memcpy(&pc->dir[0], &dot, sizeof(dot));
  // make entry for '..'
  dot.name[1] = '.';
    a8c6:	movs	r2, #46	; 0x2e
  setLe16(dot.firstClusterLow, parent->m_firstCluster & 0XFFFF);
  setLe16(dot.firstClusterHigh, parent->m_firstCluster >> 16);
  // copy '..' to sector
  memcpy(&pc->dir[1], &dot, sizeof(dot));
    a8c8:	lsrs	r3, r3, #16
    a8ca:	mov	r4, r6
    a8cc:	strh.w	r3, [sp, #20]
    goto fail;
  }
  // copy '.' to sector
  memcpy(&pc->dir[0], &dot, sizeof(dot));
  // make entry for '..'
  dot.name[1] = '.';
    a8d0:	strb.w	r2, [sp, #1]
  setLe16(dot.firstClusterLow, parent->m_firstCluster & 0XFFFF);
  setLe16(dot.firstClusterHigh, parent->m_firstCluster >> 16);
  // copy '..' to sector
  memcpy(&pc->dir[1], &dot, sizeof(dot));
    a8d4:	ldmia	r4!, {r0, r1, r2, r3}
    a8d6:	add.w	r6, lr, #32
    a8da:	str.w	r0, [lr, #32]
    a8de:	str	r1, [r6, #4]
    a8e0:	str	r2, [r6, #8]
    a8e2:	str	r3, [r6, #12]
    a8e4:	ldmia	r4!, {r0, r1, r2, r3}
    a8e6:	str	r0, [r6, #16]
    a8e8:	str	r1, [r6, #20]
    a8ea:	str	r2, [r6, #24]
    a8ec:	str	r3, [r6, #28]
  // write first sector
  return m_vol->cacheSync();
    a8ee:	ldr	r4, [r5, #8]
  cache_t* cacheFetchFat(uint32_t sector, uint8_t options) {
    options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    return reinterpret_cast<cache_t*>(m_fatCache.get(sector, options));
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    a8f0:	add.w	r0, r4, #36	; 0x24
    a8f4:	bl	8d90 <FsCache::sync()>
    a8f8:	cmp	r0, #0
    a8fa:	beq.w	a7fa <FatFile::mkdir(FatFile*, fname_t*)+0xe>
    a8fe:	add.w	r0, r4, #564	; 0x234
    a902:	bl	8d90 <FsCache::sync()>
    a906:	cmp	r0, #0
    a908:	beq.w	a7fa <FatFile::mkdir(FatFile*, fname_t*)+0xe>
  }
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
  }
  bool syncDevice() {
    return m_blockDev->syncDevice();
    a90c:	ldr	r0, [r4, #0]

 fail:
  return false;
}
    a90e:	add	sp, #36	; 0x24
    a910:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    a914:	b.w	c4e8 <SdSpiCard::syncDevice()>
  if (!isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    a918:	ldr	r3, [r5, #20]
    a91a:	cbz	r3, a92a <FatFile::mkdir(FatFile*, fname_t*)+0x13e>
    }
  }

 done:
  m_curPosition = pos;
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    a91c:	ldrb	r3, [r5, #2]
  if (pos == m_curPosition) {
    return true;
  }
  if (pos == 0) {
    // set position to start of file
    m_curCluster = 0;
    a91e:	movs	r2, #0
    }
  }

 done:
  m_curPosition = pos;
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    a920:	bic.w	r3, r3, #32
    a924:	strb	r3, [r5, #2]
  if (pos == m_curPosition) {
    return true;
  }
  if (pos == 0) {
    // set position to start of file
    m_curCluster = 0;
    a926:	str	r2, [r5, #16]
      goto fail;
    }
  }

 done:
  m_curPosition = pos;
    a928:	str	r2, [r5, #20]
    a92a:	mov	r0, r5
    a92c:	bl	a738 <FatFile::sync() [clone .part.41]>
  }
  m_firstCluster = m_curCluster;
  // Set to start of dir
  rewind();
  // force entry to device
  if (!sync()) {
    a930:	cmp	r0, #0
    a932:	beq.w	a7fa <FatFile::mkdir(FatFile*, fname_t*)+0xe>
    a936:	b.n	a82e <FatFile::mkdir(FatFile*, fname_t*)+0x42>

0000a938 <FatFile::mkdir(FatFile*, char const*, bool)>:
//------------------------------------------------------------------------------
bool FatFile::isBusy() {
  return m_vol->isBusy();
}
//------------------------------------------------------------------------------
bool FatFile::mkdir(FatFile* parent, const char* path, bool pFlag) {
    a938:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a93c:	mov	r6, r0
    a93e:	sub	sp, #72	; 0x48
  fname_t fname;
  FatFile tmpDir;

  if (isOpen() || !parent->isDir()) {
    a940:	ldrb	r5, [r6, #0]
//------------------------------------------------------------------------------
bool FatFile::isBusy() {
  return m_vol->isBusy();
}
//------------------------------------------------------------------------------
bool FatFile::mkdir(FatFile* parent, const char* path, bool pFlag) {
    a942:	str	r2, [sp, #4]
    a944:	movs	r0, #0
    a946:	strb.w	r0, [sp, #36]	; 0x24
    a94a:	strb.w	r0, [sp, #37]	; 0x25
    a94e:	strb.w	r0, [sp, #38]	; 0x26
  fname_t fname;
  FatFile tmpDir;

  if (isOpen() || !parent->isDir()) {
    a952:	cbnz	r5, a960 <FatFile::mkdir(FatFile*, char const*, bool)+0x28>
    a954:	mov	r8, r3
    a956:	ldrb	r3, [r1, #0]
    a958:	tst.w	r3, #112	; 0x70
    a95c:	mov	r4, r1
    a95e:	bne.n	a968 <FatFile::mkdir(FatFile*, char const*, bool)+0x30>
    close();
  }
  return mkdir(parent, &fname);

 fail:
  return false;
    a960:	movs	r0, #0
}
    a962:	add	sp, #72	; 0x48
    a964:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

  if (isOpen() || !parent->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    a968:	ldrb	r3, [r2, #0]
    a96a:	cmp	r3, #47	; 0x2f
    a96c:	mov	r0, r2
    a96e:	beq.n	a9c6 <FatFile::mkdir(FatFile*, char const*, bool)+0x8e>
      goto fail;
    }
    if (!*path) {
      break;
    }
    if (!open(parent, &fname, O_RDONLY)) {
    a970:	movs	r7, #0
      goto fail;
    }
    parent = &tmpDir;
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
    a972:	add	r2, sp, #4
    a974:	add	r1, sp, #12
    a976:	bl	b880 <FatFile::parsePathName(char const*, fname_t*, char const**)>
      goto fail;
    }
    if (!*path) {
      break;
    }
    if (!open(parent, &fname, O_RDONLY)) {
    a97a:	add	r2, sp, #12
    a97c:	mov	r1, r4
    a97e:	movs	r3, #0
      goto fail;
    }
    parent = &tmpDir;
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
    a980:	cmp	r0, #0
    a982:	beq.n	a960 <FatFile::mkdir(FatFile*, char const*, bool)+0x28>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!*path) {
    a984:	ldr	r5, [sp, #4]
    a986:	ldrb	r5, [r5, #0]
      break;
    }
    if (!open(parent, &fname, O_RDONLY)) {
    a988:	mov	r0, r6
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!*path) {
    a98a:	cmp	r5, #0
    a98c:	beq.n	a9ea <FatFile::mkdir(FatFile*, char const*, bool)+0xb2>
      break;
    }
    if (!open(parent, &fname, O_RDONLY)) {
    a98e:	bl	bca8 <FatFile::open(FatFile*, fname_t*, int)>
    a992:	cbnz	r0, a9a8 <FatFile::mkdir(FatFile*, char const*, bool)+0x70>
      if (!pFlag || !mkdir(parent, &fname)) {
    a994:	cmp.w	r8, #0
    a998:	beq.n	a960 <FatFile::mkdir(FatFile*, char const*, bool)+0x28>
    a99a:	mov	r1, r4
    a99c:	add	r2, sp, #12
    a99e:	mov	r0, r6
    a9a0:	bl	a7ec <FatFile::mkdir(FatFile*, fname_t*)>
    a9a4:	cmp	r0, #0
    a9a6:	beq.n	a960 <FatFile::mkdir(FatFile*, char const*, bool)+0x28>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    tmpDir = *this;
    a9a8:	mov	r5, r6
    a9aa:	ldmia	r5!, {r0, r1, r2, r3}
    a9ac:	add	r4, sp, #36	; 0x24
    a9ae:	stmia	r4!, {r0, r1, r2, r3}
    a9b0:	ldmia	r5!, {r0, r1, r2, r3}
    a9b2:	stmia	r4!, {r0, r1, r2, r3}
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    a9b4:	ldrb	r3, [r6, #0]
      if (!pFlag || !mkdir(parent, &fname)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    tmpDir = *this;
    a9b6:	ldr	r2, [r5, #0]
    a9b8:	str	r2, [r4, #0]
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    a9ba:	cbnz	r3, a9e2 <FatFile::mkdir(FatFile*, char const*, bool)+0xaa>
  return nullptr;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
  bool rtn = sync();
  m_attributes = FILE_ATTR_CLOSED;
    a9bc:	strb	r7, [r6, #0]
  m_flags = 0;
    a9be:	strb	r7, [r6, #2]
    a9c0:	ldr	r0, [sp, #4]
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    tmpDir = *this;
    parent = &tmpDir;
    a9c2:	add	r4, sp, #36	; 0x24
    a9c4:	b.n	a972 <FatFile::mkdir(FatFile*, char const*, bool)+0x3a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
      path++;
    a9c6:	adds	r0, #1
    a9c8:	str	r0, [sp, #4]
  if (isOpen() || !parent->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
    a9ca:	ldrb	r3, [r0, #0]
    a9cc:	cmp	r3, #47	; 0x2f
    a9ce:	beq.n	a9c6 <FatFile::mkdir(FatFile*, char const*, bool)+0x8e>
    a9d0:	ldr	r1, [r4, #8]
    a9d2:	add	r0, sp, #36	; 0x24
    a9d4:	bl	a60c <FatFile::openRoot(FatVolume*) [clone .part.37]>
      path++;
    }
    if (!tmpDir.openRoot(parent->m_vol)) {
    a9d8:	cmp	r0, #0
    a9da:	beq.n	a960 <FatFile::mkdir(FatFile*, char const*, bool)+0x28>
    a9dc:	ldr	r0, [sp, #4]
      DBG_FAIL_MACRO;
      goto fail;
    }
    parent = &tmpDir;
    a9de:	add	r4, sp, #36	; 0x24
    a9e0:	b.n	a970 <FatFile::mkdir(FatFile*, char const*, bool)+0x38>
    a9e2:	mov	r0, r6
    a9e4:	bl	a738 <FatFile::sync() [clone .part.41]>
    a9e8:	b.n	a9bc <FatFile::mkdir(FatFile*, char const*, bool)+0x84>
    }
    tmpDir = *this;
    parent = &tmpDir;
    close();
  }
  return mkdir(parent, &fname);
    a9ea:	add	r2, sp, #12
    a9ec:	mov	r1, r4
    a9ee:	mov	r0, r6
    a9f0:	bl	a7ec <FatFile::mkdir(FatFile*, fname_t*)>

 fail:
  return false;
}
    a9f4:	add	sp, #72	; 0x48
    a9f6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a9fa:	nop

0000a9fc <FatFile::open(FatFile*, char const*, int)>:
//------------------------------------------------------------------------------
bool FatFile::open(FatVolume* vol, const char* path, oflag_t oflag) {
  return vol && open(vol->vwd(), path, oflag);
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
    a9fc:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    aa00:	mov	r6, r0
    aa02:	sub	sp, #72	; 0x48
  FatFile tmpDir;
  fname_t fname;

  // error if already open
  if (isOpen() || !dirFile->isDir()) {
    aa04:	ldrb	r5, [r6, #0]
//------------------------------------------------------------------------------
bool FatFile::open(FatVolume* vol, const char* path, oflag_t oflag) {
  return vol && open(vol->vwd(), path, oflag);
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
    aa06:	str	r2, [sp, #4]
    aa08:	movs	r0, #0
    aa0a:	strb.w	r0, [sp, #36]	; 0x24
    aa0e:	strb.w	r0, [sp, #37]	; 0x25
    aa12:	strb.w	r0, [sp, #38]	; 0x26
  FatFile tmpDir;
  fname_t fname;

  // error if already open
  if (isOpen() || !dirFile->isDir()) {
    aa16:	cbnz	r5, aa24 <FatFile::open(FatFile*, char const*, int)+0x28>
    aa18:	mov	r8, r3
    aa1a:	ldrb	r3, [r1, #0]
    aa1c:	tst.w	r3, #112	; 0x70
    aa20:	mov	r4, r1
    aa22:	bne.n	aa2c <FatFile::open(FatFile*, char const*, int)+0x30>
    close();
  }
  return open(dirFile, &fname, oflag);

 fail:
  return false;
    aa24:	movs	r0, #0
}
    aa26:	add	sp, #72	; 0x48
    aa28:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  // error if already open
  if (isOpen() || !dirFile->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    aa2c:	ldrb	r3, [r2, #0]
    aa2e:	cmp	r3, #47	; 0x2f
    aa30:	mov	r0, r2
    aa32:	beq.n	aa80 <FatFile::open(FatFile*, char const*, int)+0x84>
      goto fail;
    }
    if (*path == 0) {
      break;
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
    aa34:	movs	r7, #0
    aa36:	b.n	aa40 <FatFile::open(FatFile*, char const*, int)+0x44>
    aa38:	ldr	r0, [sp, #4]
  return nullptr;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
  bool rtn = sync();
  m_attributes = FILE_ATTR_CLOSED;
    aa3a:	strb	r7, [r6, #0]
  m_flags = 0;
    aa3c:	strb	r7, [r6, #2]
    if (!open(dirFile, &fname, O_RDONLY)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
    dirFile = &tmpDir;
    aa3e:	add	r4, sp, #36	; 0x24
      goto fail;
    }
    dirFile = &tmpDir;
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
    aa40:	add	r2, sp, #4
    aa42:	add	r1, sp, #12
    aa44:	bl	b880 <FatFile::parsePathName(char const*, fname_t*, char const**)>
      goto fail;
    }
    if (*path == 0) {
      break;
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
    aa48:	add	r2, sp, #12
    aa4a:	mov	r1, r4
    aa4c:	movs	r3, #0
      goto fail;
    }
    dirFile = &tmpDir;
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
    aa4e:	cmp	r0, #0
    aa50:	beq.n	aa24 <FatFile::open(FatFile*, char const*, int)+0x28>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (*path == 0) {
    aa52:	ldr	r5, [sp, #4]
    aa54:	ldrb	r5, [r5, #0]
      break;
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
    aa56:	mov	r0, r6
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (*path == 0) {
    aa58:	cbz	r5, aa9e <FatFile::open(FatFile*, char const*, int)+0xa2>
      break;
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
    aa5a:	bl	bca8 <FatFile::open(FatFile*, fname_t*, int)>
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
    aa5e:	mov	r5, r6
    aa60:	add	r4, sp, #36	; 0x24
      goto fail;
    }
    if (*path == 0) {
      break;
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
    aa62:	cmp	r0, #0
    aa64:	beq.n	aa24 <FatFile::open(FatFile*, char const*, int)+0x28>
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
    aa66:	ldmia	r5!, {r0, r1, r2, r3}
    aa68:	stmia	r4!, {r0, r1, r2, r3}
    aa6a:	ldmia	r5!, {r0, r1, r2, r3}
    aa6c:	stmia	r4!, {r0, r1, r2, r3}
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    aa6e:	ldrb	r3, [r6, #0]
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
    aa70:	ldr	r2, [r5, #0]
    aa72:	str	r2, [r4, #0]
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    aa74:	cmp	r3, #0
    aa76:	beq.n	aa38 <FatFile::open(FatFile*, char const*, int)+0x3c>
    aa78:	mov	r0, r6
    aa7a:	bl	a738 <FatFile::sync() [clone .part.41]>
    aa7e:	b.n	aa38 <FatFile::open(FatFile*, char const*, int)+0x3c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
      path++;
    aa80:	adds	r0, #1
    aa82:	str	r0, [sp, #4]
  if (isOpen() || !dirFile->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
    aa84:	ldrb	r3, [r0, #0]
    aa86:	cmp	r3, #47	; 0x2f
    aa88:	beq.n	aa80 <FatFile::open(FatFile*, char const*, int)+0x84>
      path++;
    }
    if (*path == 0) {
    aa8a:	cbz	r3, aab0 <FatFile::open(FatFile*, char const*, int)+0xb4>
    aa8c:	ldr	r1, [r4, #8]
    aa8e:	add	r0, sp, #36	; 0x24
    aa90:	bl	a60c <FatFile::openRoot(FatVolume*) [clone .part.37]>
      return openRoot(dirFile->m_vol);
    }
    if (!tmpDir.openRoot(dirFile->m_vol)) {
    aa94:	cmp	r0, #0
    aa96:	beq.n	aa24 <FatFile::open(FatFile*, char const*, int)+0x28>
    aa98:	ldr	r0, [sp, #4]
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile = &tmpDir;
    aa9a:	add	r4, sp, #36	; 0x24
    aa9c:	b.n	aa34 <FatFile::open(FatFile*, char const*, int)+0x38>
    }
    tmpDir = *this;
    dirFile = &tmpDir;
    close();
  }
  return open(dirFile, &fname, oflag);
    aa9e:	mov	r3, r8
    aaa0:	add	r2, sp, #12
    aaa2:	mov	r1, r4
    aaa4:	mov	r0, r6
    aaa6:	bl	bca8 <FatFile::open(FatFile*, fname_t*, int)>

 fail:
  return false;
}
    aaaa:	add	sp, #72	; 0x48
    aaac:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    aab0:	ldr	r1, [r4, #8]
    aab2:	mov	r0, r6
    aab4:	bl	a60c <FatFile::openRoot(FatVolume*) [clone .part.37]>
    aab8:	b.n	aa26 <FatFile::open(FatFile*, char const*, int)+0x2a>
    aaba:	nop

0000aabc <FatFile::open(FatVolume*, char const*, int)>:
bool FatFile::open(const char* path, oflag_t oflag) {
  return open(FatVolume::cwv(), path, oflag);
}
//------------------------------------------------------------------------------
bool FatFile::open(FatVolume* vol, const char* path, oflag_t oflag) {
  return vol && open(vol->vwd(), path, oflag);
    aabc:	cbz	r1, aac6 <FatFile::open(FatVolume*, char const*, int)+0xa>
    aabe:	addw	r1, r1, #1092	; 0x444
    aac2:	b.w	a9fc <FatFile::open(FatFile*, char const*, int)>
}
    aac6:	mov	r0, r1
    aac8:	bx	lr
    aaca:	nop

0000aacc <FatFile::openRoot(FatVolume*)>:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
  // error if file is already open
  if (isOpen()) {
    aacc:	ldrb	r3, [r0, #0]
    aace:	cbz	r3, aad4 <FatFile::openRoot(FatVolume*)+0x8>
  m_flags = FILE_FLAG_READ;
  return true;

 fail:
  return false;
}
    aad0:	movs	r0, #0
    aad2:	bx	lr
    aad4:	b.w	a60c <FatFile::openRoot(FatVolume*) [clone .part.37]>

0000aad8 <FatFile::read(void*, unsigned int)>:
  m_curPosition = curPosition;
  m_curCluster = curCluster;
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
    aad8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  size_t toRead;
  uint32_t sector;  // raw device sector number
  cache_t* pc;

  // error if not open for read
  if (!isReadable()) {
    aadc:	ldrb	r3, [r0, #2]
    aade:	lsls	r7, r3, #31
  m_curPosition = curPosition;
  m_curCluster = curCluster;
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
    aae0:	sub	sp, #20
    aae2:	mov	r5, r0
  size_t toRead;
  uint32_t sector;  // raw device sector number
  cache_t* pc;

  // error if not open for read
  if (!isReadable()) {
    aae4:	bpl.w	ac06 <FatFile::read(void*, unsigned int)+0x12e>
    aae8:	mov	r8, r1
    aaea:	ldrb	r1, [r0, #0]
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (isFile()) {
    aaec:	lsls	r6, r1, #28
    aaee:	mov	sl, r2
    aaf0:	bmi.w	ac18 <FatFile::read(void*, unsigned int)+0x140>
    uint32_t tmp32 = m_fileSize - m_curPosition;
    if (nbyte >= tmp32) {
      nbyte = tmp32;
    }
  } else if (isRootFixed()) {
    aaf4:	lsls	r4, r1, #26
    aaf6:	bpl.n	ab0a <FatFile::read(void*, unsigned int)+0x32>
    uint16_t tmp16 = 32*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
    aaf8:	ldr	r2, [r0, #8]
    if (nbyte > tmp16) {
    aafa:	ldr	r3, [r0, #20]
    aafc:	ldrh	r2, [r2, #8]
    aafe:	rsb	r3, r3, r2, lsl #5
    ab02:	uxth	r3, r3
    ab04:	cmp	sl, r3
    ab06:	it	cs
    ab08:	movcs	sl, r3
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
    ab0a:	cmp.w	sl, #0
    ab0e:	beq.w	ac64 <FatFile::read(void*, unsigned int)+0x18c>
    ab12:	ldr	r2, [r5, #20]
    size_t n;
    offset = m_curPosition & m_vol->sectorMask();  // offset in sector
    ab14:	ldr	r6, [r5, #8]
        } else if (isFile() && isContiguous()) {
          m_curCluster++;
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    ab16:	add.w	r3, r5, #16
  }
  toRead = nbyte;
  while (toRead) {
    size_t n;
    offset = m_curPosition & m_vol->sectorMask();  // offset in sector
    if (isRootFixed()) {
    ab1a:	lsls	r0, r1, #26
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
    ab1c:	mov	r7, sl
    ab1e:	mov.w	r9, #0
        } else if (isFile() && isContiguous()) {
          m_curCluster++;
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    ab22:	str	r3, [sp, #12]
    }
  }
  toRead = nbyte;
  while (toRead) {
    size_t n;
    offset = m_curPosition & m_vol->sectorMask();  // offset in sector
    ab24:	ubfx	fp, r2, #0, #9
    if (isRootFixed()) {
    ab28:	bpl.n	aba4 <FatFile::read(void*, unsigned int)+0xcc>
      sector = m_vol->rootDirStart()
               + (m_curPosition >> m_vol->bytesPerSectorShift());
    ab2a:	ldr	r1, [r6, #32]
    ab2c:	add.w	r1, r1, r2, lsr #9
        }
      }
      sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
    }
    if (offset != 0 || toRead < m_vol->bytesPerSector()
        || sector == m_vol->cacheSectorNumber()) {
    ab30:	cmp.w	fp, #0
    ab34:	bne.n	abda <FatFile::read(void*, unsigned int)+0x102>
          }
        }
      }
      sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
    }
    if (offset != 0 || toRead < m_vol->bytesPerSector()
    ab36:	cmp.w	r7, #512	; 0x200
    ab3a:	bcc.n	abda <FatFile::read(void*, unsigned int)+0x102>
    ab3c:	ldr	r2, [r6, #48]	; 0x30
        || sector == m_vol->cacheSectorNumber()) {
    ab3e:	cmp	r1, r2
    ab40:	beq.n	abda <FatFile::read(void*, unsigned int)+0x102>
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_SECTOR_IO
    } else if (toRead >= 2*m_vol->bytesPerSector()) {
    ab42:	cmp.w	r7, #1024	; 0x400
    ab46:	bcc.n	ac2a <FatFile::read(void*, unsigned int)+0x152>
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
      if (!isRootFixed()) {
    ab48:	ldrb	r0, [r5, #0]
    ab4a:	lsls	r0, r0, #26
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_SECTOR_IO
    } else if (toRead >= 2*m_vol->bytesPerSector()) {
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
    ab4c:	mov.w	r3, r7, lsr #9
      if (!isRootFixed()) {
    ab50:	bmi.n	ab5e <FatFile::read(void*, unsigned int)+0x86>
        uint32_t mb = m_vol->sectorsPerCluster() - sectorOfCluster;
    ab52:	ldrb	r0, [r6, #4]
    ab54:	rsb	r0, r9, r0
    ab58:	cmp	r3, r0
    ab5a:	it	cs
    ab5c:	movcs	r3, r0
   * \param[in] sector Start sector of the range.
   * \param[in] count Number of sectors in the range.
   * \return true if a sector in the range is cached.
   */
  bool isCached(uint32_t sector, size_t count) {
    return sector <= m_sector && m_sector < (sector + count);
    ab5e:	cmp	r1, r2
        if (mb < ns) {
          ns = mb;
        }
      }
      n = ns << m_vol->bytesPerSectorShift();
    ab60:	mov.w	r4, r3, lsl #9
    ab64:	bhi.n	ab80 <FatFile::read(void*, unsigned int)+0xa8>
    ab66:	adds	r0, r1, r3
    ab68:	cmp	r2, r0
    ab6a:	bcs.n	ab80 <FatFile::read(void*, unsigned int)+0xa8>
   * \param[in] count Number of sectors to be read.
   * \param[out] dst Pointer to the location that will receive the data.
   * \return true for success or false for failure.
   */
  bool cacheSafeRead(uint32_t sector, uint8_t* dst, size_t count) {
    if (isCached(sector, count) && !sync()) {
    ab6c:	add.w	r0, r6, #36	; 0x24
    ab70:	str	r3, [sp, #8]
    ab72:	str	r1, [sp, #4]
    ab74:	bl	8d90 <FsCache::sync()>
    ab78:	ldr	r1, [sp, #4]
    ab7a:	ldr	r3, [sp, #8]
    ab7c:	cmp	r0, #0
    ab7e:	beq.n	ac06 <FatFile::read(void*, unsigned int)+0x12e>
      return false;
    }
    return m_blockDev->readSectors(sector, dst, count);
    ab80:	ldr	r0, [r6, #40]	; 0x28
    ab82:	mov	r2, r8
    ab84:	bl	c858 <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)>
      if (!m_vol->cacheSafeRead(sector, dst, ns)) {
    ab88:	cmp	r0, #0
    ab8a:	beq.n	ac06 <FatFile::read(void*, unsigned int)+0x12e>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    m_curPosition += n;
    ab8c:	ldr	r2, [r5, #20]
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
    ab8e:	subs	r7, r7, r4
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    m_curPosition += n;
    ab90:	add	r2, r4
      if (!m_vol->cacheSafeRead(sector, dst)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    ab92:	add	r8, r4
    m_curPosition += n;
    ab94:	str	r2, [r5, #20]
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
    ab96:	beq.n	ac64 <FatFile::read(void*, unsigned int)+0x18c>
    ab98:	ldrb	r1, [r5, #0]
    size_t n;
    offset = m_curPosition & m_vol->sectorMask();  // offset in sector
    ab9a:	ldr	r6, [r5, #8]
    if (isRootFixed()) {
    ab9c:	lsls	r0, r1, #26
    }
  }
  toRead = nbyte;
  while (toRead) {
    size_t n;
    offset = m_curPosition & m_vol->sectorMask();  // offset in sector
    ab9e:	ubfx	fp, r2, #0, #9
    if (isRootFixed()) {
    aba2:	bmi.n	ab2a <FatFile::read(void*, unsigned int)+0x52>
  }
  //----------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t sectorOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterSectorMask;
    aba4:	ldrb.w	r9, [r6, #5]
    aba8:	and.w	r9, r9, r2, lsr #9
      sector = m_vol->rootDirStart()
               + (m_curPosition >> m_vol->bytesPerSectorShift());
    } else {
      sectorOfCluster = m_vol->sectorOfCluster(m_curPosition);
      if (offset == 0 && sectorOfCluster == 0) {
    abac:	cmp.w	fp, #0
    abb0:	bne.n	ac26 <FatFile::read(void*, unsigned int)+0x14e>
    abb2:	cmp.w	r9, #0
    abb6:	bne.n	ac26 <FatFile::read(void*, unsigned int)+0x14e>
        // start of new cluster
        if (m_curPosition == 0) {
    abb8:	cmp	r2, #0
    abba:	bne.n	ac3e <FatFile::read(void*, unsigned int)+0x166>
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
    abbc:	lsls	r2, r1, #25
    abbe:	ite	mi
    abc0:	ldrmi	r4, [r6, #32]
    abc2:	ldrpl	r4, [r5, #32]
#if USE_FAT_FILE_FLAG_CONTIGUOUS
        } else if (isFile() && isContiguous()) {
          m_curCluster++;
    abc4:	str	r4, [r5, #16]
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
      }
      sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
    abc6:	ldrb	r1, [r6, #6]
    abc8:	ldr	r0, [r6, #20]
    abca:	subs	r4, #2
    abcc:	lsls	r4, r1
    abce:	add.w	r1, r9, r0
    abd2:	add	r1, r4
    }
    if (offset != 0 || toRead < m_vol->bytesPerSector()
        || sector == m_vol->cacheSectorNumber()) {
    abd4:	cmp.w	fp, #0
    abd8:	beq.n	ab36 <FatFile::read(void*, unsigned int)+0x5e>
  bool cacheSync() {
    return m_cache.sync() && syncDevice();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t sector, uint8_t options) {
    return reinterpret_cast<cache_t*>(m_cache.get(sector, options));
    abda:	add.w	r0, r6, #36	; 0x24
    abde:	movs	r2, #0
    abe0:	bl	8d34 <FsCache::get(unsigned long, unsigned char)>
      if (n > toRead) {
        n = toRead;
      }
      // read sector to cache and copy data to caller
      pc = m_vol->cacheFetchData(sector, FsCache::CACHE_FOR_READ);
      if (!pc) {
    abe4:	cbz	r0, ac06 <FatFile::read(void*, unsigned int)+0x12e>
      sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
    }
    if (offset != 0 || toRead < m_vol->bytesPerSector()
        || sector == m_vol->cacheSectorNumber()) {
      // amount to be read from current sector
      n = m_vol->bytesPerSector() - offset;
    abe6:	rsb	r4, fp, #512	; 0x200
    abea:	cmp	r4, r7
    abec:	it	cs
    abee:	movcs	r4, r7
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
    abf0:	add.w	r1, r0, fp
    abf4:	mov	r2, r4
    abf6:	mov	r0, r8
    abf8:	bl	cb00 <memcpy>
    abfc:	b.n	ab8c <FatFile::read(void*, unsigned int)+0xb4>
          if (fg < 0) {
            DBG_FAIL_MACRO;
            goto fail;
          }
          if (fg == 0) {
            if (isDir()) {
    abfe:	ldrb	r3, [r5, #0]
    ac00:	tst.w	r3, #112	; 0x70
    ac04:	bne.n	ac66 <FatFile::read(void*, unsigned int)+0x18e>
    toRead -= n;
  }
  return nbyte - toRead;

 fail:
  m_error |= READ_ERROR;
    ac06:	ldrb	r3, [r5, #1]
  return -1;
    ac08:	mov.w	r0, #4294967295
    toRead -= n;
  }
  return nbyte - toRead;

 fail:
  m_error |= READ_ERROR;
    ac0c:	orr.w	r3, r3, #2
    ac10:	strb	r3, [r5, #1]
  return -1;
}
    ac12:	add	sp, #20
    ac14:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (isFile()) {
    uint32_t tmp32 = m_fileSize - m_curPosition;
    ac18:	ldr	r3, [r0, #28]
    ac1a:	ldr	r2, [r0, #20]
    ac1c:	subs	r3, r3, r2
    ac1e:	cmp	sl, r3
    ac20:	it	cs
    ac22:	movcs	sl, r3
    ac24:	b.n	ab0a <FatFile::read(void*, unsigned int)+0x32>
    ac26:	ldr	r4, [r5, #16]
    ac28:	b.n	abc6 <FatFile::read(void*, unsigned int)+0xee>
   * \param[out] dst Pointer to the location that will receive the data.
   * \return true for success or false for failure.
   */
  bool readSector(uint32_t sector, uint8_t* dst) {
#if ENABLE_DEDICATED_SPI
    return readSectors(sector, dst, 1);
    ac2a:	ldr	r0, [r6, #40]	; 0x28
    ac2c:	movs	r3, #1
    ac2e:	mov	r2, r8
    ac30:	bl	c858 <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)>
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // read single sector
      n = m_vol->bytesPerSector();
      if (!m_vol->cacheSafeRead(sector, dst)) {
    ac34:	cmp	r0, #0
    ac36:	beq.n	ac06 <FatFile::read(void*, unsigned int)+0x12e>
        goto fail;
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // read single sector
      n = m_vol->bytesPerSector();
    ac38:	mov.w	r4, #512	; 0x200
    ac3c:	b.n	ab8c <FatFile::read(void*, unsigned int)+0xb4>
        // start of new cluster
        if (m_curPosition == 0) {
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
#if USE_FAT_FILE_FLAG_CONTIGUOUS
        } else if (isFile() && isContiguous()) {
    ac3e:	lsls	r3, r1, #28
    ac40:	bpl.n	ac4e <FatFile::read(void*, unsigned int)+0x176>
    ac42:	ldrb	r2, [r5, #2]
    ac44:	lsls	r4, r2, #25
    ac46:	bpl.n	ac4e <FatFile::read(void*, unsigned int)+0x176>
          m_curCluster++;
    ac48:	ldr	r4, [r5, #16]
    ac4a:	adds	r4, #1
    ac4c:	b.n	abc4 <FatFile::read(void*, unsigned int)+0xec>
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    ac4e:	mov	r0, r6
    ac50:	ldr	r2, [sp, #12]
    ac52:	ldr	r1, [r5, #16]
    ac54:	bl	b3b4 <FatPartition::fatGet(unsigned long, unsigned long*)>
          if (fg < 0) {
    ac58:	cmp	r0, #0
    ac5a:	blt.n	ac06 <FatFile::read(void*, unsigned int)+0x12e>
            DBG_FAIL_MACRO;
            goto fail;
          }
          if (fg == 0) {
    ac5c:	beq.n	abfe <FatFile::read(void*, unsigned int)+0x126>
    ac5e:	ldr	r6, [r5, #8]
    ac60:	ldr	r4, [r5, #16]
    ac62:	b.n	abc6 <FatFile::read(void*, unsigned int)+0xee>
        goto fail;
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // read single sector
      n = m_vol->bytesPerSector();
    ac64:	movs	r7, #0
    }
    dst += n;
    m_curPosition += n;
    toRead -= n;
  }
  return nbyte - toRead;
    ac66:	rsb	r0, r7, sl

 fail:
  m_error |= READ_ERROR;
  return -1;
}
    ac6a:	add	sp, #20
    ac6c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000ac70 <FatFile::peek()>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::peek() {
    ac70:	push	{r4, r5, r6, lr}
    ac72:	sub	sp, #8
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
    ac74:	movs	r2, #1
    ac76:	add.w	r1, sp, #7
    ac7a:	mov	r4, r0
  uint32_t curPosition = m_curPosition;
    ac7c:	ldr	r6, [r0, #20]
  uint32_t curCluster = m_curCluster;
    ac7e:	ldr	r5, [r0, #16]
    ac80:	bl	aad8 <FatFile::read(void*, unsigned int)>
    ac84:	cmp	r0, #1
    ac86:	it	eq
    ac88:	ldrbeq.w	r0, [sp, #7]
  int c = read();
  m_curPosition = curPosition;
    ac8c:	str	r6, [r4, #20]
    ac8e:	it	ne
    ac90:	movne.w	r0, #4294967295
  m_curCluster = curCluster;
    ac94:	str	r5, [r4, #16]
  return c;
}
    ac96:	add	sp, #8
    ac98:	pop	{r4, r5, r6, pc}
    ac9a:	nop

0000ac9c <FatFile::readDirCache(bool)>:
  }
}
//------------------------------------------------------------------------------
// Read next directory entry into the cache
// Assumes file is correctly positioned
DirFat_t* FatFile::readDirCache(bool skipReadOk) {
    ac9c:	push	{r4, r5, lr}
  uint8_t i = (m_curPosition >> 5) & 0XF;
    ac9e:	ldr	r3, [r0, #20]
    aca0:	ubfx	r5, r3, #5, #4
  }
}
//------------------------------------------------------------------------------
// Read next directory entry into the cache
// Assumes file is correctly positioned
DirFat_t* FatFile::readDirCache(bool skipReadOk) {
    aca4:	sub	sp, #12
    aca6:	mov	r4, r0
  uint8_t i = (m_curPosition >> 5) & 0XF;

  if (i == 0 || !skipReadOk) {
    aca8:	cbz	r5, acac <FatFile::readDirCache(bool)+0x10>
    acaa:	cbnz	r1, acd0 <FatFile::readDirCache(bool)+0x34>
    int8_t n = read(&n, 1);
    acac:	movs	r2, #1
    acae:	add.w	r1, sp, #7
    acb2:	mov	r0, r4
    acb4:	bl	aad8 <FatFile::read(void*, unsigned int)>
    acb8:	sxtb	r0, r0
    if  (n != 1) {
    acba:	cmp	r0, #1
    acbc:	bne.n	acd6 <FatFile::readDirCache(bool)+0x3a>
      if (n != 0) {
        DBG_FAIL_MACRO;
      }
      goto fail;
    }
    m_curPosition += 31;
    acbe:	ldr	r3, [r4, #20]
    acc0:	adds	r3, #31
    acc2:	str	r3, [r4, #20]
  static const uint8_t CACHE_RESERVE_FOR_WRITE =
    CACHE_STATUS_DIRTY | CACHE_OPTION_NO_READ;
  //----------------------------------------------------------------------------
  /** \return Cache buffer address. */
  uint8_t* cacheBuffer() {
    return m_buffer;
    acc4:	ldr	r0, [r4, #8]
    acc6:	adds	r0, #52	; 0x34
  } else {
    m_curPosition += 32;
  }
  // return pointer to entry
  return reinterpret_cast<DirFat_t*>(m_vol->cacheAddress()) + i;
    acc8:	add.w	r0, r0, r5, lsl #5

 fail:
  return nullptr;
}
    accc:	add	sp, #12
    acce:	pop	{r4, r5, pc}
      }
      goto fail;
    }
    m_curPosition += 31;
  } else {
    m_curPosition += 32;
    acd0:	adds	r3, #32
    acd2:	str	r3, [r0, #20]
    acd4:	b.n	acc4 <FatFile::readDirCache(bool)+0x28>
  }
  // return pointer to entry
  return reinterpret_cast<DirFat_t*>(m_vol->cacheAddress()) + i;

 fail:
  return nullptr;
    acd6:	movs	r0, #0
}
    acd8:	add	sp, #12
    acda:	pop	{r4, r5, pc}

0000acdc <FatFile::rename(FatFile*, char const*)>:
//------------------------------------------------------------------------------
bool FatFile::rename(const char* newPath) {
  return rename(m_vol->vwd(), newPath);
}
//------------------------------------------------------------------------------
bool FatFile::rename(FatFile* dirFile, const char* newPath) {
    acdc:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  FatFile oldFile;
  cache_t* pc;
  DirFat_t* dir;

  // Must be an open file or subdirectory.
  if (!(isFile() || isSubDir())) {
    ace0:	ldrb	r5, [r0, #0]
//------------------------------------------------------------------------------
bool FatFile::rename(const char* newPath) {
  return rename(m_vol->vwd(), newPath);
}
//------------------------------------------------------------------------------
bool FatFile::rename(FatFile* dirFile, const char* newPath) {
    ace2:	sub	sp, #104	; 0x68
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() {}
    ace4:	movs	r4, #0
  FatFile oldFile;
  cache_t* pc;
  DirFat_t* dir;

  // Must be an open file or subdirectory.
  if (!(isFile() || isSubDir())) {
    ace6:	tst.w	r5, #24
    acea:	strb.w	r4, [sp, #32]
    acee:	strb.w	r4, [sp, #33]	; 0x21
    acf2:	strb.w	r4, [sp, #34]	; 0x22
    acf6:	strb.w	r4, [sp, #68]	; 0x44
    acfa:	strb.w	r4, [sp, #69]	; 0x45
    acfe:	strb.w	r4, [sp, #70]	; 0x46
    ad02:	beq.n	ad0e <FatFile::rename(FatFile*, char const*)+0x32>
  if (!USE_LONG_FILE_NAMES && isLFN()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Can't move file to new volume.
  if (m_vol != dirFile->m_vol) {
    ad04:	ldr	r6, [r0, #8]
    ad06:	ldr	r5, [r1, #8]
    ad08:	cmp	r6, r5
    ad0a:	mov	r3, r0
    ad0c:	beq.n	ad16 <FatFile::rename(FatFile*, char const*)+0x3a>
    goto fail;
  }
  return m_vol->cacheSync();

 fail:
  return false;
    ad0e:	movs	r0, #0
}
    ad10:	add	sp, #104	; 0x68
    ad12:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ad16:	mov	r5, r3
    ad18:	mov	r8, r2
    ad1a:	mov	r6, r1
    ad1c:	bl	a738 <FatFile::sync() [clone .part.41]>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // sync() and cache directory entry
  sync();
  oldFile = *this;
    ad20:	mov	lr, r5
    ad22:	ldmia.w	lr!, {r0, r1, r2, r3}
    ad26:	add	r7, sp, #68	; 0x44
    ad28:	stmia	r7!, {r0, r1, r2, r3}
    ad2a:	ldmia.w	lr!, {r0, r1, r2, r3}
    ad2e:	stmia	r7!, {r0, r1, r2, r3}
    ad30:	ldr.w	r3, [lr]
    ad34:	str	r3, [r7, #0]
  dir = cacheDirEntry(FsCache::CACHE_FOR_READ);
    ad36:	mov	r1, r4
    ad38:	mov	r0, r5
    ad3a:	bl	a718 <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    ad3e:	mov	lr, r0
    ad40:	cmp	r0, #0
    ad42:	beq.n	ad0e <FatFile::rename(FatFile*, char const*)+0x32>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // save directory entry
  memcpy(&entry, dir, sizeof(entry));
    ad44:	ldr.w	r1, [lr, #4]
    ad48:	ldr.w	r2, [lr, #8]
    ad4c:	ldr.w	r3, [lr, #12]
    ad50:	ldr	r0, [r0, #0]
  // make directory entry for new path
  if (isFile()) {
    ad52:	ldrb.w	ip, [r5]
  if (!dir) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // save directory entry
  memcpy(&entry, dir, sizeof(entry));
    ad56:	mov	r7, sp
    ad58:	stmia	r7!, {r0, r1, r2, r3}
    ad5a:	ldr.w	r1, [lr, #20]
    ad5e:	ldr.w	r2, [lr, #24]
    ad62:	ldr.w	r3, [lr, #28]
    ad66:	ldr.w	r0, [lr, #16]
  // make directory entry for new path
  if (isFile()) {
    ad6a:	and.w	lr, ip, #8
  if (!dir) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // save directory entry
  memcpy(&entry, dir, sizeof(entry));
    ad6e:	stmia	r7!, {r0, r1, r2, r3}
  // make directory entry for new path
  if (isFile()) {
    ad70:	and.w	r3, lr, #255	; 0xff
    if (!file.open(dirFile, newPath, O_CREAT | O_EXCL | O_WRONLY)) {
    ad74:	mov	r2, r8
    ad76:	mov	r1, r6
    goto fail;
  }
  // save directory entry
  memcpy(&entry, dir, sizeof(entry));
  // make directory entry for new path
  if (isFile()) {
    ad78:	cmp.w	lr, #0
    ad7c:	beq.w	ae9e <FatFile::rename(FatFile*, char const*)+0x1c2>
    if (!file.open(dirFile, newPath, O_CREAT | O_EXCL | O_WRONLY)) {
    ad80:	movw	r3, #2561	; 0xa01
    ad84:	add	r0, sp, #32
    ad86:	bl	a9fc <FatFile::open(FatFile*, char const*, int)>
    ad8a:	cmp	r0, #0
    ad8c:	beq.n	ad0e <FatFile::rename(FatFile*, char const*)+0x32>
    // save cluster containing new dot dot
    dirCluster = file.m_firstCluster;
  }
  // change to new directory entry

  m_dirSector = file.m_dirSector;
    ad8e:	ldr	r0, [sp, #56]	; 0x38
  m_dirIndex = file.m_dirIndex;
    ad90:	ldrh.w	r1, [sp, #36]	; 0x24
  m_lfnOrd = file.m_lfnOrd;
    ad94:	ldrb.w	r2, [sp, #35]	; 0x23
  m_dirCluster = file.m_dirCluster;
    ad98:	ldr	r3, [sp, #44]	; 0x2c
    // save cluster containing new dot dot
    dirCluster = file.m_firstCluster;
  }
  // change to new directory entry

  m_dirSector = file.m_dirSector;
    ad9a:	str	r0, [r5, #24]
  m_dirIndex = file.m_dirIndex;
  m_lfnOrd = file.m_lfnOrd;
  m_dirCluster = file.m_dirCluster;
  // mark closed to avoid possible destructor close call
  file.m_attributes = FILE_ATTR_CLOSED;
    ad9c:	movs	r6, #0
    dirCluster = file.m_firstCluster;
  }
  // change to new directory entry

  m_dirSector = file.m_dirSector;
  m_dirIndex = file.m_dirIndex;
    ad9e:	strh	r1, [r5, #4]
  m_lfnOrd = file.m_lfnOrd;
    ada0:	strb	r2, [r5, #3]
  m_dirCluster = file.m_dirCluster;
    ada2:	str	r3, [r5, #12]
  // mark closed to avoid possible destructor close call
  file.m_attributes = FILE_ATTR_CLOSED;
  file.m_flags = 0;

  // cache new directory entry
  dir = cacheDirEntry(FsCache::CACHE_FOR_WRITE);
    ada4:	movs	r1, #1
    ada6:	mov	r0, r5
  m_dirSector = file.m_dirSector;
  m_dirIndex = file.m_dirIndex;
  m_lfnOrd = file.m_lfnOrd;
  m_dirCluster = file.m_dirCluster;
  // mark closed to avoid possible destructor close call
  file.m_attributes = FILE_ATTR_CLOSED;
    ada8:	strb.w	r6, [sp, #32]
  file.m_flags = 0;
    adac:	strb.w	r6, [sp, #34]	; 0x22

  // cache new directory entry
  dir = cacheDirEntry(FsCache::CACHE_FOR_WRITE);
    adb0:	bl	a718 <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    adb4:	cmp	r0, #0
    adb6:	beq.n	ad0e <FatFile::rename(FatFile*, char const*)+0x32>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // copy all but name and name flags to new directory entry
  memcpy(&dir->createTimeMs, &entry.createTimeMs,
         sizeof(entry) - sizeof(dir->name) - 2);
    adb8:	add	r3, sp, #104	; 0x68
  dir->attributes = entry.attributes;
    adba:	ldrb.w	r2, [sp, #11]
    DBG_FAIL_MACRO;
    goto fail;
  }
  // copy all but name and name flags to new directory entry
  memcpy(&dir->createTimeMs, &entry.createTimeMs,
         sizeof(entry) - sizeof(dir->name) - 2);
    adbe:	ldr.w	r7, [r3, #-91]!
    adc2:	str.w	r7, [r0, #13]
    adc6:	ldr	r7, [r3, #4]
    adc8:	str.w	r7, [r0, #17]
    adcc:	ldr	r7, [r3, #8]
    adce:	str.w	r7, [r0, #21]
    add2:	ldr	r7, [r3, #12]
    add4:	str.w	r7, [r0, #25]
    add8:	ldrh	r7, [r3, #16]
    adda:	ldrb	r3, [r3, #18]
    addc:	strh.w	r7, [r0, #29]
    ade0:	strb	r3, [r0, #31]
  dir->attributes = entry.attributes;
    ade2:	strb	r2, [r0, #11]

  // update dot dot if directory
  if (dirCluster) {
    ade4:	cmp	r4, #0
    ade6:	beq.n	ae5c <FatFile::rename(FatFile*, char const*)+0x180>
    // get new dot dot
    uint32_t sector = m_vol->clusterStartSector(dirCluster);
    ade8:	ldr	r0, [r5, #8]
    adea:	ldrb	r2, [r0, #6]
    adec:	ldr	r1, [r0, #20]
    adee:	subs	r3, r4, #2
    adf0:	lsls	r3, r2
    adf2:	add	r1, r3
    adf4:	mov	r2, r6
    adf6:	adds	r0, #36	; 0x24
    adf8:	bl	8d34 <FsCache::get(unsigned long, unsigned char)>
    pc = m_vol->cacheFetchData(sector, FsCache::CACHE_FOR_READ);
    if (!pc) {
    adfc:	cmp	r0, #0
    adfe:	beq.n	ad0e <FatFile::rename(FatFile*, char const*)+0x32>
      DBG_FAIL_MACRO;
      goto fail;
    }
    memcpy(&entry, &pc->dir[1], sizeof(entry));
    ae00:	mov	r6, r0
    ae02:	mov	r7, sp
    ae04:	ldr.w	r0, [r6, #32]!
    ae08:	ldr	r1, [r6, #4]
    ae0a:	ldr	r2, [r6, #8]
    ae0c:	ldr	r3, [r6, #12]
    ae0e:	stmia	r7!, {r0, r1, r2, r3}
    ae10:	ldr	r0, [r6, #16]
    ae12:	ldr	r1, [r6, #20]
    ae14:	ldr	r2, [r6, #24]
    ae16:	ldr	r3, [r6, #28]
    ae18:	stmia	r7!, {r0, r1, r2, r3}

    // free unused cluster
    if (!m_vol->freeChain(dirCluster)) {
    ae1a:	mov	r1, r4
    ae1c:	ldr	r0, [r5, #8]
    ae1e:	bl	b510 <FatPartition::freeChain(unsigned long)>
    ae22:	cmp	r0, #0
    ae24:	beq.w	ad0e <FatFile::rename(FatFile*, char const*)+0x32>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // store new dot dot
    sector = m_vol->clusterStartSector(m_firstCluster);
    ae28:	ldr	r0, [r5, #8]
    ae2a:	ldr	r3, [r5, #32]
    ae2c:	ldrb	r2, [r0, #6]
    ae2e:	ldr	r1, [r0, #20]
    ae30:	subs	r3, #2
    ae32:	lsls	r3, r2
    ae34:	add	r1, r3
    ae36:	adds	r0, #36	; 0x24
    ae38:	movs	r2, #1
    ae3a:	bl	8d34 <FsCache::get(unsigned long, unsigned char)>
    pc = m_vol->cacheFetchData(sector, FsCache::CACHE_FOR_WRITE);
    if (!pc) {
    ae3e:	mov	r7, r0
    ae40:	cmp	r0, #0
    ae42:	beq.w	ad0e <FatFile::rename(FatFile*, char const*)+0x32>
      DBG_FAIL_MACRO;
      goto fail;
    }
    memcpy(&pc->dir[1], &entry, sizeof(entry));
    ae46:	mov	r4, sp
    ae48:	ldmia	r4!, {r0, r1, r2, r3}
    ae4a:	str	r0, [r7, #32]
    ae4c:	str	r1, [r7, #36]	; 0x24
    ae4e:	str	r2, [r7, #40]	; 0x28
    ae50:	str	r3, [r7, #44]	; 0x2c
    ae52:	ldmia	r4!, {r0, r1, r2, r3}
    ae54:	str	r0, [r7, #48]	; 0x30
    ae56:	str	r1, [r7, #52]	; 0x34
    ae58:	str	r2, [r7, #56]	; 0x38
    ae5a:	str	r3, [r7, #60]	; 0x3c
  }
  // Remove old directory entry;
  oldFile.m_firstCluster = 0;
    ae5c:	movs	r1, #0
  oldFile.m_flags = FILE_FLAG_WRITE;
    ae5e:	movs	r2, #2
  oldFile.m_attributes = FILE_ATTR_FILE;
    ae60:	movs	r3, #8
  if (!oldFile.remove()) {
    ae62:	add	r0, sp, #68	; 0x44
      goto fail;
    }
    memcpy(&pc->dir[1], &entry, sizeof(entry));
  }
  // Remove old directory entry;
  oldFile.m_firstCluster = 0;
    ae64:	str	r1, [sp, #100]	; 0x64
  oldFile.m_flags = FILE_FLAG_WRITE;
    ae66:	strb.w	r2, [sp, #70]	; 0x46
  oldFile.m_attributes = FILE_ATTR_FILE;
    ae6a:	strb.w	r3, [sp, #68]	; 0x44
  if (!oldFile.remove()) {
    ae6e:	bl	bacc <FatFile::remove()>
    ae72:	cmp	r0, #0
    ae74:	beq.w	ad0e <FatFile::rename(FatFile*, char const*)+0x32>
    DBG_FAIL_MACRO;
    goto fail;
  }
  return m_vol->cacheSync();
    ae78:	ldr	r4, [r5, #8]
  cache_t* cacheFetchFat(uint32_t sector, uint8_t options) {
    options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    return reinterpret_cast<cache_t*>(m_fatCache.get(sector, options));
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    ae7a:	add.w	r0, r4, #36	; 0x24
    ae7e:	bl	8d90 <FsCache::sync()>
    ae82:	cmp	r0, #0
    ae84:	beq.w	ad0e <FatFile::rename(FatFile*, char const*)+0x32>
    ae88:	add.w	r0, r4, #564	; 0x234
    ae8c:	bl	8d90 <FsCache::sync()>
    ae90:	cmp	r0, #0
    ae92:	beq.w	ad0e <FatFile::rename(FatFile*, char const*)+0x32>
  }
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
  }
  bool syncDevice() {
    return m_blockDev->syncDevice();
    ae96:	ldr	r0, [r4, #0]
    ae98:	bl	c4e8 <SdSpiCard::syncDevice()>
    ae9c:	b.n	ad10 <FatFile::rename(FatFile*, char const*)+0x34>
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else {
    // don't create missing path prefix components
    if (!file.mkdir(dirFile, newPath, false)) {
    ae9e:	add	r0, sp, #32
    aea0:	bl	a938 <FatFile::mkdir(FatFile*, char const*, bool)>
    aea4:	cmp	r0, #0
    aea6:	beq.w	ad0e <FatFile::rename(FatFile*, char const*)+0x32>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // save cluster containing new dot dot
    dirCluster = file.m_firstCluster;
    aeaa:	ldr	r4, [sp, #64]	; 0x40
    aeac:	b.n	ad8e <FatFile::rename(FatFile*, char const*)+0xb2>
    aeae:	nop

0000aeb0 <FatFile::rmdir()>:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::rmdir() {
  // must be open subdirectory
  if (!isSubDir() || (!USE_LONG_FILE_NAMES && isLFN())) {
    aeb0:	ldrb	r3, [r0, #0]
    aeb2:	lsls	r2, r3, #27
    aeb4:	bpl.n	aeec <FatFile::rmdir()+0x3c>
  if (!isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    aeb6:	ldr	r3, [r0, #20]

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::rmdir() {
    aeb8:	push	{r4, lr}
    aeba:	mov	r4, r0
  if (!isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    aebc:	cbz	r3, aecc <FatFile::rmdir()+0x1c>
    }
  }

 done:
  m_curPosition = pos;
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    aebe:	ldrb	r3, [r0, #2]
  if (pos == m_curPosition) {
    return true;
  }
  if (pos == 0) {
    // set position to start of file
    m_curCluster = 0;
    aec0:	movs	r2, #0
    }
  }

 done:
  m_curPosition = pos;
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    aec2:	bic.w	r3, r3, #32
    aec6:	strb	r3, [r0, #2]
  if (pos == m_curPosition) {
    return true;
  }
  if (pos == 0) {
    // set position to start of file
    m_curCluster = 0;
    aec8:	str	r2, [r0, #16]
      goto fail;
    }
  }

 done:
  m_curPosition = pos;
    aeca:	str	r2, [r0, #20]
  }
  rewind();

  // make sure directory is empty
  while (1) {
    DirFat_t* dir = readDirCache(true);
    aecc:	movs	r1, #1
    aece:	mov	r0, r4
    aed0:	bl	ac9c <FatFile::readDirCache(bool)>
    if (!dir) {
    aed4:	cbz	r0, aef0 <FatFile::rmdir()+0x40>
      }
      DBG_FAIL_MACRO;
      goto fail;
    }
    // done if past last used entry
    if (dir->name[0] == FAT_NAME_FREE) {
    aed6:	ldrb	r3, [r0, #0]
    aed8:	cbz	r3, aef6 <FatFile::rmdir()+0x46>
      break;
    }
    // skip empty slot, '.' or '..'
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == '.') {
    aeda:	cmp	r3, #229	; 0xe5
    aedc:	beq.n	aecc <FatFile::rmdir()+0x1c>
    aede:	cmp	r3, #46	; 0x2e
    aee0:	beq.n	aecc <FatFile::rmdir()+0x1c>
      continue;
    }
    // error not empty
    if (isFileOrSubdir(dir)) {
    aee2:	ldrb	r3, [r0, #11]
    aee4:	lsls	r3, r3, #28
    aee6:	bmi.n	aecc <FatFile::rmdir()+0x1c>
  m_flags |= FILE_FLAG_WRITE;
  return remove();

 fail:
  return false;
}
    aee8:	movs	r0, #0
    aeea:	pop	{r4, pc}
    aeec:	movs	r0, #0
    aeee:	bx	lr
  // make sure directory is empty
  while (1) {
    DirFat_t* dir = readDirCache(true);
    if (!dir) {
      // EOF if no error.
      if (!getError()) {
    aef0:	ldrb	r3, [r4, #1]
    aef2:	cmp	r3, #0
    aef4:	bne.n	aee8 <FatFile::rmdir()+0x38>
      goto fail;
    }
  }
  // convert empty directory to normal file for remove
  m_attributes = FILE_ATTR_FILE;
  m_flags |= FILE_FLAG_WRITE;
    aef6:	ldrb	r3, [r4, #2]
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // convert empty directory to normal file for remove
  m_attributes = FILE_ATTR_FILE;
    aef8:	movs	r2, #8
  m_flags |= FILE_FLAG_WRITE;
    aefa:	orr.w	r3, r3, #2
    aefe:	strb	r3, [r4, #2]
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // convert empty directory to normal file for remove
  m_attributes = FILE_ATTR_FILE;
    af00:	strb	r2, [r4, #0]
  m_flags |= FILE_FLAG_WRITE;
  return remove();
    af02:	mov	r0, r4

 fail:
  return false;
}
    af04:	ldmia.w	sp!, {r4, lr}
    }
  }
  // convert empty directory to normal file for remove
  m_attributes = FILE_ATTR_FILE;
  m_flags |= FILE_FLAG_WRITE;
  return remove();
    af08:	b.w	bacc <FatFile::remove()>

0000af0c <FatFile::seekSet(unsigned long)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::seekSet(uint32_t pos) {
    af0c:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    af10:	ldrb	r3, [r0, #0]
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
    af12:	ldr	r7, [r0, #16]

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::seekSet(uint32_t pos) {
    af14:	mov	r4, r0
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
  // error if file not open
  if (!isOpen()) {
    af16:	cbz	r3, af46 <FatFile::seekSet(unsigned long)+0x3a>
    af18:	mov	r5, r1
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    af1a:	ldr	r1, [r0, #20]
    af1c:	cmp	r1, r5
    af1e:	beq.n	af78 <FatFile::seekSet(unsigned long)+0x6c>
    return true;
  }
  if (pos == 0) {
    af20:	cbnz	r5, af34 <FatFile::seekSet(unsigned long)+0x28>
    af22:	ldrb	r3, [r0, #2]
    // set position to start of file
    m_curCluster = 0;
    af24:	str	r5, [r0, #16]
    }
  }

 done:
  m_curPosition = pos;
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    af26:	bic.w	r3, r3, #32
    af2a:	strb	r3, [r4, #2]
      goto fail;
    }
  }

 done:
  m_curPosition = pos;
    af2c:	str	r5, [r4, #20]
  m_flags &= ~FILE_FLAG_PREALLOCATE;
  return true;
    af2e:	movs	r0, #1
    af30:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (pos == 0) {
    // set position to start of file
    m_curCluster = 0;
    goto done;
  }
  if (isFile()) {
    af34:	lsls	r0, r3, #28
    af36:	bmi.n	af4e <FatFile::seekSet(unsigned long)+0x42>
    if (pos > m_fileSize) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if (isRootFixed()) {
    af38:	lsls	r2, r3, #26
    af3a:	bpl.n	af54 <FatFile::seekSet(unsigned long)+0x48>
    af3c:	ldr	r3, [r4, #8]
    if (pos <= 32*m_vol->rootDirEntryCount()) {
    af3e:	ldrh	r3, [r3, #8]
    af40:	cmp.w	r5, r3, lsl #5
    af44:	bls.n	afb0 <FatFile::seekSet(unsigned long)+0xa4>
  m_curPosition = pos;
  m_flags &= ~FILE_FLAG_PREALLOCATE;
  return true;

 fail:
  m_curCluster = tmp;
    af46:	str	r7, [r4, #16]
  return false;
    af48:	movs	r0, #0
    af4a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    // set position to start of file
    m_curCluster = 0;
    goto done;
  }
  if (isFile()) {
    if (pos > m_fileSize) {
    af4e:	ldr	r2, [r4, #28]
    af50:	cmp	r5, r2
    af52:	bhi.n	af46 <FatFile::seekSet(unsigned long)+0x3a>
    }
    DBG_FAIL_MACRO;
    goto fail;
  }
  // calculate cluster index for new position
  nNew = (pos - 1) >> (m_vol->bytesPerClusterShift());
    af54:	ldr.w	lr, [r4, #8]
    af58:	ldrb	r2, [r4, #2]
    af5a:	ldrb.w	r0, [lr, #6]
    af5e:	adds	r0, #9
    af60:	uxtb	r0, r0
    af62:	subs	r6, r5, #1
#if USE_FAT_FILE_FLAG_CONTIGUOUS
  if (isContiguous()) {
    af64:	tst.w	r2, #64	; 0x40
    }
    DBG_FAIL_MACRO;
    goto fail;
  }
  // calculate cluster index for new position
  nNew = (pos - 1) >> (m_vol->bytesPerClusterShift());
    af68:	lsr.w	r6, r6, r0
#if USE_FAT_FILE_FLAG_CONTIGUOUS
  if (isContiguous()) {
    af6c:	beq.n	af7e <FatFile::seekSet(unsigned long)+0x72>
    m_curCluster = m_firstCluster + nNew;
    af6e:	ldr	r3, [r4, #32]
    af70:	add	r6, r3
    af72:	str	r6, [r4, #16]
    goto done;
    af74:	mov	r3, r2
    af76:	b.n	af26 <FatFile::seekSet(unsigned long)+0x1a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    return true;
    af78:	movs	r0, #1
  return true;

 fail:
  m_curCluster = tmp;
  return false;
}
    af7a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    m_curCluster = m_firstCluster + nNew;
    goto done;
  }
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
  // calculate cluster index for current position
  nCur = (m_curPosition - 1) >> (m_vol->bytesPerClusterShift());
    af7e:	subs	r2, r1, #1
    af80:	lsr.w	r0, r2, r0

  if (nNew < nCur || m_curPosition == 0) {
    af84:	cmp	r6, r0
    af86:	bcs.n	afb4 <FatFile::seekSet(unsigned long)+0xa8>
    // must follow chain from first cluster
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
    af88:	lsls	r3, r3, #25
    af8a:	ite	mi
    af8c:	ldrmi.w	r3, [lr, #32]
    af90:	ldrpl	r3, [r4, #32]
    af92:	str	r3, [r4, #16]
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
    af94:	add.w	r8, r4, #16
    af98:	b.n	afaa <FatFile::seekSet(unsigned long)+0x9e>
    af9a:	ldr	r1, [r4, #16]
    af9c:	ldr	r0, [r4, #8]
    af9e:	bl	b3b4 <FatPartition::fatGet(unsigned long, unsigned long*)>
    afa2:	cmp	r0, #0
    afa4:	add.w	r6, r6, #4294967295
    afa8:	ble.n	af46 <FatFile::seekSet(unsigned long)+0x3a>
    afaa:	mov	r2, r8
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    afac:	cmp	r6, #0
    afae:	bne.n	af9a <FatFile::seekSet(unsigned long)+0x8e>
    afb0:	ldrb	r3, [r4, #2]
    afb2:	b.n	af26 <FatFile::seekSet(unsigned long)+0x1a>
  }
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
  // calculate cluster index for current position
  nCur = (m_curPosition - 1) >> (m_vol->bytesPerClusterShift());

  if (nNew < nCur || m_curPosition == 0) {
    afb4:	cmp	r1, #0
    afb6:	beq.n	af88 <FatFile::seekSet(unsigned long)+0x7c>
    // must follow chain from first cluster
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
    afb8:	subs	r6, r6, r0
    afba:	b.n	af94 <FatFile::seekSet(unsigned long)+0x88>

0000afbc <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)>:
  return false;
}
//------------------------------------------------------------------------------
// open a cached directory entry.
bool FatFile::openCachedEntry(FatFile* dirFile, uint16_t dirIndex,
                              oflag_t oflag, uint8_t lfnOrd) {
    afbc:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    afc0:	mov	r5, r1
    afc2:	mov	r8, r2
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
    afc4:	movs	r1, #0
    afc6:	movs	r2, #36	; 0x24
  return false;
}
//------------------------------------------------------------------------------
// open a cached directory entry.
bool FatFile::openCachedEntry(FatFile* dirFile, uint16_t dirIndex,
                              oflag_t oflag, uint8_t lfnOrd) {
    afc8:	mov	r4, r0
    afca:	mov	r7, r3
    afcc:	ldrb.w	r6, [sp, #24]
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
    afd0:	bl	106cc <memset>
  // location of entry in cache
  m_vol = dirFile->m_vol;
    afd4:	ldr	r0, [r5, #8]
  m_dirIndex = dirIndex;
  m_dirCluster = dirFile->m_firstCluster;
    afd6:	ldr	r3, [r5, #32]
    afd8:	str	r3, [r4, #12]
    afda:	add.w	r2, r0, #52	; 0x34
  DirFat_t* dir = reinterpret_cast<DirFat_t*>(m_vol->cacheAddress());
  dir += 0XF & dirIndex;
    afde:	and.w	r3, r8, #15
    afe2:	add.w	r2, r2, r3, lsl #5
bool FatFile::openCachedEntry(FatFile* dirFile, uint16_t dirIndex,
                              oflag_t oflag, uint8_t lfnOrd) {
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
  // location of entry in cache
  m_vol = dirFile->m_vol;
    afe6:	str	r0, [r4, #8]
  m_dirIndex = dirIndex;
    afe8:	strh.w	r8, [r4, #4]
    afec:	ldrb	r1, [r2, #11]
  m_dirCluster = dirFile->m_firstCluster;
  DirFat_t* dir = reinterpret_cast<DirFat_t*>(m_vol->cacheAddress());
  dir += 0XF & dirIndex;

  // Must be file or subdirectory.
  if (!isFileOrSubdir(dir)) {
    afee:	lsls	r5, r1, #28
    aff0:	bmi.n	b018 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x5c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_attributes = dir->attributes & FILE_ATTR_COPY;
    aff2:	and.w	r1, r1, #23
    aff6:	strb	r1, [r4, #0]
  if (isFileDir(dir)) {
    aff8:	ldrb	r3, [r2, #11]
    m_attributes |= FILE_ATTR_FILE;
  }
  m_lfnOrd = lfnOrd;
    affa:	strb	r6, [r4, #3]
  if (!isFileOrSubdir(dir)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_attributes = dir->attributes & FILE_ATTR_COPY;
  if (isFileDir(dir)) {
    affc:	tst.w	r3, #24
    m_attributes |= FILE_ATTR_FILE;
    b000:	it	eq
    b002:	orreq.w	r1, r1, #8
  }
  m_lfnOrd = lfnOrd;

  switch (oflag & O_ACCMODE) {
    b006:	and.w	r3, r7, #3
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_attributes = dir->attributes & FILE_ATTR_COPY;
  if (isFileDir(dir)) {
    m_attributes |= FILE_ATTR_FILE;
    b00a:	it	eq
    b00c:	strbeq	r1, [r4, #0]
  }
  m_lfnOrd = lfnOrd;

  switch (oflag & O_ACCMODE) {
    b00e:	cmp	r3, #1
    b010:	beq.n	b022 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x66>
    b012:	cmp	r3, #2
    b014:	beq.n	b06a <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xae>
    b016:	cbz	r3, b060 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xa4>
    goto fail;
  }
  return true;

 fail:
  m_attributes = FILE_ATTR_CLOSED;
    b018:	movs	r0, #0
    b01a:	strb	r0, [r4, #0]
  m_flags = 0;
    b01c:	strb	r0, [r4, #2]
  return false;
    b01e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    case O_RDWR:
      m_flags = FILE_FLAG_READ | FILE_FLAG_WRITE;
      break;

    case O_WRONLY:
      m_flags = FILE_FLAG_WRITE;
    b022:	movs	r3, #2
    b024:	strb	r3, [r4, #2]
      DBG_FAIL_MACRO;
      goto fail;
  }

  if (m_flags & FILE_FLAG_WRITE) {
    if (isSubDir() || isReadOnly()) {
    b026:	ldrb	r1, [r4, #0]
    b028:	tst.w	r1, #17
    b02c:	bne.n	b018 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x5c>
    b02e:	sxtb	r1, r3
    b030:	and.w	r5, r7, #1024	; 0x400
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  m_flags |= (oflag & O_APPEND ? FILE_FLAG_APPEND : 0);
    b034:	and.w	r3, r7, #8
    b038:	orrs	r3, r1
    b03a:	uxtb	r3, r3
    b03c:	strb	r3, [r4, #2]

  m_dirSector = m_vol->cacheSectorNumber();

  // copy first cluster number for directory fields
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16)
                 | getLe16(dir->firstClusterLow);
    b03e:	ldrh.w	lr, [r2, #20]
    b042:	ldrh	r1, [r2, #26]
    b044:	ldr	r6, [r0, #48]	; 0x30
      goto fail;
    }
  }
  m_flags |= (oflag & O_APPEND ? FILE_FLAG_APPEND : 0);

  m_dirSector = m_vol->cacheSectorNumber();
    b046:	str	r6, [r4, #24]

  // copy first cluster number for directory fields
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16)
                 | getLe16(dir->firstClusterLow);
    b048:	orr.w	r1, r1, lr, lsl #16

  if (oflag & O_TRUNC) {
    b04c:	cbz	r5, b070 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xb4>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
    b04e:	cbnz	r1, b086 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xca>
      DBG_FAIL_MACRO;
      goto fail;
    }

    // need to update directory entry
    m_flags |= FILE_FLAG_DIR_DIRTY;
    b050:	orn	r3, r3, #127	; 0x7f
    b054:	strb	r3, [r4, #2]
  } else {
    m_firstCluster = firstCluster;
    m_fileSize = getLe32(dir->fileSize);
  }
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
    b056:	lsls	r3, r7, #17
    b058:	bmi.n	b078 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xbc>
    DBG_FAIL_MACRO;
    goto fail;
  }
  return true;
    b05a:	movs	r0, #1
    b05c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  }
  m_lfnOrd = lfnOrd;

  switch (oflag & O_ACCMODE) {
    case O_RDONLY:
      if (oflag & O_TRUNC) {
    b060:	ands.w	r5, r7, #1024	; 0x400
    b064:	bne.n	b018 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x5c>
    b066:	movs	r1, #1
    b068:	b.n	b034 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x78>
      }
      m_flags = FILE_FLAG_READ;
      break;

    case O_RDWR:
      m_flags = FILE_FLAG_READ | FILE_FLAG_WRITE;
    b06a:	movs	r3, #3
    b06c:	strb	r3, [r4, #2]
      break;
    b06e:	b.n	b026 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x6a>
    }

    // need to update directory entry
    m_flags |= FILE_FLAG_DIR_DIRTY;
  } else {
    m_firstCluster = firstCluster;
    b070:	str	r1, [r4, #32]
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
}
inline uint32_t getLe32(const uint8_t* src) {
  return *reinterpret_cast<const uint32_t*>(src);
    b072:	ldr	r3, [r2, #28]
    m_fileSize = getLe32(dir->fileSize);
    b074:	str	r3, [r4, #28]
    b076:	b.n	b056 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x9a>
  }
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
    b078:	ldr	r1, [r4, #28]
    b07a:	mov	r0, r4
    b07c:	bl	af0c <FatFile::seekSet(unsigned long)>
    b080:	cmp	r0, #0
    b082:	bne.n	b05a <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x9e>
    b084:	b.n	b018 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x5c>
  // copy first cluster number for directory fields
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16)
                 | getLe16(dir->firstClusterLow);

  if (oflag & O_TRUNC) {
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
    b086:	bl	b510 <FatPartition::freeChain(unsigned long)>
    b08a:	cmp	r0, #0
    b08c:	beq.n	b018 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x5c>
    b08e:	ldrb	r3, [r4, #2]
    b090:	b.n	b050 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x94>
    b092:	nop

0000b094 <FatFile::openNext(FatFile*, int)>:
  DirLfn_t* ldir;
  uint8_t lfnOrd = 0;
  uint16_t index;

  // Check for not open and valid directory..
  if (isOpen() || !dirFile->isDir() || (dirFile->curPosition() & 0X1F)) {
    b094:	ldrb	r3, [r0, #0]
    b096:	cbnz	r3, b0a0 <FatFile::openNext(FatFile*, int)+0xc>
    b098:	ldrb	r3, [r1, #0]
    b09a:	tst.w	r3, #112	; 0x70
    b09e:	bne.n	b0a4 <FatFile::openNext(FatFile*, int)+0x10>
      lfnOrd = 0;
    }
  }

 fail:
  return false;
    b0a0:	movs	r0, #0
}
    b0a2:	bx	lr
  m_attributes = FILE_ATTR_CLOSED;
  m_flags = 0;
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openNext(FatFile* dirFile, oflag_t oflag) {
    b0a4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b0a8:	ldr	r6, [r1, #20]
  DirLfn_t* ldir;
  uint8_t lfnOrd = 0;
  uint16_t index;

  // Check for not open and valid directory..
  if (isOpen() || !dirFile->isDir() || (dirFile->curPosition() & 0X1F)) {
    b0aa:	ands.w	r7, r6, #31
  m_attributes = FILE_ATTR_CLOSED;
  m_flags = 0;
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openNext(FatFile* dirFile, oflag_t oflag) {
    b0ae:	sub	sp, #8
  DirLfn_t* ldir;
  uint8_t lfnOrd = 0;
  uint16_t index;

  // Check for not open and valid directory..
  if (isOpen() || !dirFile->isDir() || (dirFile->curPosition() & 0X1F)) {
    b0b0:	bne.n	b0f6 <FatFile::openNext(FatFile*, int)+0x62>
    b0b2:	mov	r9, r2
    b0b4:	mov	r5, r1
    b0b6:	mov	r8, r0
    b0b8:	mov	sl, r7
    b0ba:	b.n	b0c0 <FatFile::openNext(FatFile*, int)+0x2c>
      if (ldir->order & FAT_ORDER_LAST_LONG_ENTRY) {
        lfnOrd = ldir->order & 0X1F;
        checksum = ldir->checksum;
      }
    } else {
      lfnOrd = 0;
    b0bc:	movs	r7, #0
    b0be:	ldr	r6, [r5, #20]
    goto fail;
  }
  while (1) {
    // read entry into cache
    index = dirFile->curPosition()/32;
    DirFat_t* dir = dirFile->readDirCache();
    b0c0:	movs	r1, #0
    b0c2:	mov	r0, r5
    b0c4:	bl	ac9c <FatFile::readDirCache(bool)>
    if (!dir) {
    b0c8:	cbz	r0, b0f6 <FatFile::openNext(FatFile*, int)+0x62>
        DBG_FAIL_MACRO;
      }
      goto fail;
    }
    // done if last entry
    if (dir->name[0] == FAT_NAME_FREE) {
    b0ca:	ldrb	r3, [r0, #0]
    b0cc:	cbz	r3, b0f6 <FatFile::openNext(FatFile*, int)+0x62>
      goto fail;
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == '.' || dir->name[0] == FAT_NAME_DELETED) {
    b0ce:	cmp	r3, #46	; 0x2e
    b0d0:	beq.n	b0bc <FatFile::openNext(FatFile*, int)+0x28>
    b0d2:	cmp	r3, #229	; 0xe5
    b0d4:	beq.n	b0bc <FatFile::openNext(FatFile*, int)+0x28>
    b0d6:	ldrb	r2, [r0, #11]
      lfnOrd = 0;
    } else if (isFileOrSubdir(dir)) {
    b0d8:	lsls	r1, r2, #28
    b0da:	bpl.n	b0fe <FatFile::openNext(FatFile*, int)+0x6a>
      if (!openCachedEntry(dirFile, index, oflag, lfnOrd)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      return true;
    } else if (isLongName(dir)) {
    b0dc:	cmp	r2, #15
    b0de:	bne.n	b0bc <FatFile::openNext(FatFile*, int)+0x28>
      ldir = reinterpret_cast<DirLfn_t*>(dir);
      if (ldir->order & FAT_ORDER_LAST_LONG_ENTRY) {
    b0e0:	lsls	r2, r3, #25
    b0e2:	bpl.n	b0be <FatFile::openNext(FatFile*, int)+0x2a>
        lfnOrd = ldir->order & 0X1F;
    b0e4:	and.w	r7, r3, #31
        checksum = ldir->checksum;
    b0e8:	ldrb.w	sl, [r0, #13]
    b0ec:	b.n	b0be <FatFile::openNext(FatFile*, int)+0x2a>
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == '.' || dir->name[0] == FAT_NAME_DELETED) {
      lfnOrd = 0;
    } else if (isFileOrSubdir(dir)) {
      if (lfnOrd && checksum != lfnChecksum(dir->name)) {
    b0ee:	bl	b740 <FatFile::lfnChecksum(unsigned char*)>
    b0f2:	cmp	r0, sl
    b0f4:	beq.n	b102 <FatFile::openNext(FatFile*, int)+0x6e>
      lfnOrd = 0;
    }
  }

 fail:
  return false;
    b0f6:	movs	r0, #0
}
    b0f8:	add	sp, #8
    b0fa:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == '.' || dir->name[0] == FAT_NAME_DELETED) {
      lfnOrd = 0;
    } else if (isFileOrSubdir(dir)) {
      if (lfnOrd && checksum != lfnChecksum(dir->name)) {
    b0fe:	cmp	r7, #0
    b100:	bne.n	b0ee <FatFile::openNext(FatFile*, int)+0x5a>
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!openCachedEntry(dirFile, index, oflag, lfnOrd)) {
    b102:	str	r7, [sp, #0]
    b104:	mov	r3, r9
    b106:	ubfx	r2, r6, #5, #16
    b10a:	mov	r1, r5
    b10c:	mov	r0, r8
    b10e:	bl	afbc <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)>
    b112:	b.n	b0f8 <FatFile::openNext(FatFile*, int)+0x64>

0000b114 <FatFile::sync()>:
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    b114:	ldrb	r3, [r0, #0]
    b116:	cbz	r3, b11c <FatFile::sync()+0x8>
    b118:	b.w	a738 <FatFile::sync() [clone .part.41]>
  DBG_FAIL_MACRO;

 fail:
  m_error |= WRITE_ERROR;
  return false;
}
    b11c:	movs	r0, #1
    b11e:	bx	lr

0000b120 <FatFile::truncate()>:
}
//------------------------------------------------------------------------------
bool FatFile::truncate() {
  uint32_t toFree;
  // error if not a normal file or read-only
  if (!isWritable()) {
    b120:	ldrb	r3, [r0, #2]
    b122:	lsls	r3, r3, #30
    b124:	bpl.n	b15c <FatFile::truncate()+0x3c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_firstCluster == 0) {
    b126:	ldr	r3, [r0, #32]
    b128:	cbz	r3, b158 <FatFile::truncate()+0x38>

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::truncate() {
    b12a:	push	{r4, lr}
    goto fail;
  }
  if (m_firstCluster == 0) {
      return true;
  }
  if (m_curCluster) {
    b12c:	ldr	r1, [r0, #16]

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::truncate() {
    b12e:	sub	sp, #8
    b130:	mov	r4, r0
    goto fail;
  }
  if (m_firstCluster == 0) {
      return true;
  }
  if (m_curCluster) {
    b132:	cbnz	r1, b172 <FatFile::truncate()+0x52>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
  } else {
    toFree = m_firstCluster;
    b134:	str	r3, [sp, #4]
    m_firstCluster = 0;
    b136:	str	r1, [r0, #32]
  }
  if (toFree) {
    if (!m_vol->freeChain(toFree)) {
    b138:	mov	r1, r3
    b13a:	ldr	r0, [r4, #8]
    b13c:	bl	b510 <FatPartition::freeChain(unsigned long)>
    b140:	cbz	r0, b16e <FatFile::truncate()+0x4e>
    }
  }
  m_fileSize = m_curPosition;

  // need to update directory entry
  m_flags |= FILE_FLAG_DIR_DIRTY;
    b142:	ldrb	r3, [r4, #2]
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    b144:	ldrb	r2, [r4, #0]
    if (!m_vol->freeChain(toFree)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  m_fileSize = m_curPosition;
    b146:	ldr	r1, [r4, #20]
    b148:	str	r1, [r4, #28]

  // need to update directory entry
  m_flags |= FILE_FLAG_DIR_DIRTY;
    b14a:	orn	r3, r3, #127	; 0x7f
    b14e:	strb	r3, [r4, #2]
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    b150:	cbnz	r2, b18e <FatFile::truncate()+0x6e>
  if (!isWritable()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_firstCluster == 0) {
      return true;
    b152:	movs	r0, #1
  }
  return true;

 fail:
  return false;
}
    b154:	add	sp, #8
    b156:	pop	{r4, pc}
  if (!isWritable()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_firstCluster == 0) {
      return true;
    b158:	movs	r0, #1
  }
  return true;

 fail:
  return false;
}
    b15a:	bx	lr
    goto fail;
  }
  return true;

 fail:
  return false;
    b15c:	movs	r0, #0
}
    b15e:	bx	lr
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
  }
  int8_t fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  bool fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
    b160:	mvn.w	r2, #4026531840	; 0xf0000000
    b164:	ldr	r1, [r4, #16]
    b166:	ldr	r0, [r4, #8]
    b168:	bl	b424 <FatPartition::fatPut(unsigned long, unsigned long)>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (fg) {
      // current cluster is end of chain
      if (!m_vol->fatPutEOC(m_curCluster)) {
    b16c:	cbnz	r0, b186 <FatFile::truncate()+0x66>
    goto fail;
  }
  return true;

 fail:
  return false;
    b16e:	movs	r0, #0
    b170:	b.n	b154 <FatFile::truncate()+0x34>
  }
  if (m_firstCluster == 0) {
      return true;
  }
  if (m_curCluster) {
    toFree = 0;
    b172:	add	r2, sp, #8
    b174:	movs	r3, #0
    b176:	str.w	r3, [r2, #-4]!
    int8_t fg = m_vol->fatGet(m_curCluster, &toFree);
    b17a:	ldr	r0, [r0, #8]
    b17c:	bl	b3b4 <FatPartition::fatGet(unsigned long, unsigned long*)>
    if (fg < 0) {
    b180:	cmp	r0, #0
    b182:	blt.n	b16e <FatFile::truncate()+0x4e>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (fg) {
    b184:	bne.n	b160 <FatFile::truncate()+0x40>
    }
  } else {
    toFree = m_firstCluster;
    m_firstCluster = 0;
  }
  if (toFree) {
    b186:	ldr	r3, [sp, #4]
    b188:	cmp	r3, #0
    b18a:	beq.n	b142 <FatFile::truncate()+0x22>
    b18c:	b.n	b138 <FatFile::truncate()+0x18>
    b18e:	mov	r0, r4
    b190:	bl	a738 <FatFile::sync() [clone .part.41]>
    b194:	b.n	b154 <FatFile::truncate()+0x34>
    b196:	nop

0000b198 <FatFile::write(void const*, unsigned int)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
size_t FatFile::write(const void* buf, size_t nbyte) {
    b198:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b19c:	ldrb	r3, [r0, #2]
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isWritable()) {
    b19e:	lsls	r5, r3, #30

 fail:
  return false;
}
//------------------------------------------------------------------------------
size_t FatFile::write(const void* buf, size_t nbyte) {
    b1a0:	mov	r4, r0
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isWritable()) {
    b1a2:	bmi.n	b1b4 <FatFile::write(void const*, unsigned int)+0x1c>
  }
  return nbyte;

 fail:
  // return for write error
  m_error |= WRITE_ERROR;
    b1a4:	ldrb	r3, [r4, #1]
    b1a6:	orr.w	r3, r3, #1
    b1aa:	strb	r3, [r4, #1]
  return -1;
    b1ac:	mov.w	r0, #4294967295
    b1b0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b1b4:	mov	r9, r2
  if (!isWritable()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & FILE_FLAG_APPEND)) {
    b1b6:	lsls	r2, r3, #28
    b1b8:	mov	r8, r1
    b1ba:	bmi.w	b35c <FatFile::write(void const*, unsigned int)+0x1c4>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
    b1be:	ldr	r2, [r4, #20]
    b1c0:	mvns	r3, r2
    b1c2:	cmp	r9, r3
    b1c4:	bhi.n	b1a4 <FatFile::write(void const*, unsigned int)+0xc>
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
    b1c6:	cmp.w	r9, #0
    b1ca:	beq.w	b37e <FatFile::write(void const*, unsigned int)+0x1e6>
    b1ce:	mov	r5, r9
    b1d0:	b.n	b24c <FatFile::write(void const*, unsigned int)+0xb4>
    uint8_t sectorOfCluster = m_vol->sectorOfCluster(m_curPosition);
    uint16_t sectorOffset = m_curPosition & m_vol->sectorMask();
    if (sectorOfCluster == 0 && sectorOffset == 0) {
    b1d2:	cmp	r7, #0
    b1d4:	bne.n	b288 <FatFile::write(void const*, unsigned int)+0xf0>
      // start of new cluster
      if (m_curCluster != 0) {
    b1d6:	ldr	r1, [r4, #16]
    b1d8:	cmp	r1, #0
    b1da:	beq.w	b300 <FatFile::write(void const*, unsigned int)+0x168>
#if USE_FAT_FILE_FLAG_CONTIGUOUS
        int8_t fg;
        if (isContiguous() && m_fileSize > m_curPosition) {
    b1de:	ldrb	r3, [r4, #2]
    b1e0:	lsls	r3, r3, #25
    b1e2:	bpl.w	b31c <FatFile::write(void const*, unsigned int)+0x184>
    b1e6:	ldr	r3, [r4, #28]
    b1e8:	cmp	r3, r2
    b1ea:	bls.w	b31c <FatFile::write(void const*, unsigned int)+0x184>
          m_curCluster++;
    b1ee:	adds	r3, r1, #1
    b1f0:	str	r3, [r4, #16]
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t sectorOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterSectorMask;
  }
  uint32_t clusterStartSector(uint32_t cluster) const {
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    b1f2:	ldrb	r3, [r0, #6]
    b1f4:	ldr	r2, [r0, #20]
    b1f6:	subs	r1, #1
    b1f8:	lsl.w	r3, r1, r3
    }
    // sector for data write
    uint32_t sector = m_vol->clusterStartSector(m_curCluster)
                      + sectorOfCluster;

    if (sectorOffset != 0 || nToWrite < m_vol->bytesPerSector()) {
    b1fc:	cmp.w	r5, #512	; 0x200
    b200:	add.w	r1, r3, r2
    b204:	bcs.n	b2a4 <FatFile::write(void const*, unsigned int)+0x10c>
    b206:	cmp.w	r5, #512	; 0x200
    b20a:	mov	sl, r5
    b20c:	it	cs
    b20e:	movcs.w	sl, #512	; 0x200
      if (n > nToWrite) {
        n = nToWrite;
      }

      if (sectorOffset == 0 &&
         (m_curPosition >= m_fileSize || m_flags & FILE_FLAG_PREALLOCATE)) {
    b212:	ldrb	r3, [r4, #2]
        // start of new sector don't need to read into cache
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
    b214:	tst.w	r3, #32
    b218:	ite	eq
    b21a:	moveq	r2, #1
    b21c:	movne	r2, #5
  bool cacheSync() {
    return m_cache.sync() && syncDevice();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t sector, uint8_t options) {
    return reinterpret_cast<cache_t*>(m_cache.get(sector, options));
    b21e:	adds	r0, #36	; 0x24
    b220:	bl	8d34 <FsCache::get(unsigned long, unsigned char)>
      } else {
        // rewrite part of sector
        cacheOption = FsCache::CACHE_FOR_WRITE;
      }
      pc = m_vol->cacheFetchData(sector, cacheOption);
      if (!pc) {
    b224:	cmp	r0, #0
    b226:	beq.n	b1a4 <FatFile::write(void const*, unsigned int)+0xc>
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + sectorOffset;
      memcpy(dst, src, n);
    b228:	add	r0, r7
    b22a:	mov	r2, sl
    b22c:	mov	r1, r8
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    b22e:	add	r7, sl
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + sectorOffset;
      memcpy(dst, src, n);
    b230:	bl	cb00 <memcpy>
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    b234:	cmp.w	r7, #512	; 0x200
    b238:	beq.w	b34c <FatFile::write(void const*, unsigned int)+0x1b4>
      if (!m_vol->cacheSafeWrite(sector, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    b23c:	ldr	r2, [r4, #20]
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
    b23e:	subs.w	r5, r5, sl
      if (!m_vol->cacheSafeWrite(sector, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    b242:	add	r2, sl
    src += n;
    b244:	add	r8, sl
      if (!m_vol->cacheSafeWrite(sector, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    b246:	str	r2, [r4, #20]
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
    b248:	beq.w	b37e <FatFile::write(void const*, unsigned int)+0x1e6>
    uint8_t sectorOfCluster = m_vol->sectorOfCluster(m_curPosition);
    b24c:	ldr	r0, [r4, #8]
  }
  //----------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t sectorOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterSectorMask;
    b24e:	ldrb	r6, [r0, #5]
    uint16_t sectorOffset = m_curPosition & m_vol->sectorMask();
    if (sectorOfCluster == 0 && sectorOffset == 0) {
    b250:	ands.w	r6, r6, r2, lsr #9
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
    uint8_t sectorOfCluster = m_vol->sectorOfCluster(m_curPosition);
    uint16_t sectorOffset = m_curPosition & m_vol->sectorMask();
    b254:	ubfx	r7, r2, #0, #9
    if (sectorOfCluster == 0 && sectorOffset == 0) {
    b258:	beq.n	b1d2 <FatFile::write(void const*, unsigned int)+0x3a>
        }
      }
    }
    // sector for data write
    uint32_t sector = m_vol->clusterStartSector(m_curCluster)
                      + sectorOfCluster;
    b25a:	ldr	r3, [r4, #16]
    b25c:	ldrb	r1, [r0, #6]
    b25e:	ldr	r2, [r0, #20]
    b260:	subs	r3, #2
    b262:	lsls	r3, r1
    b264:	add	r3, r2
    b266:	adds	r1, r3, r6

    if (sectorOffset != 0 || nToWrite < m_vol->bytesPerSector()) {
    b268:	cbnz	r7, b296 <FatFile::write(void const*, unsigned int)+0xfe>
    b26a:	cmp.w	r5, #512	; 0x200
    b26e:	bcs.n	b2a4 <FatFile::write(void const*, unsigned int)+0x10c>
      // lesser of space and amount to write
      if (n > nToWrite) {
        n = nToWrite;
      }

      if (sectorOffset == 0 &&
    b270:	ldr	r2, [r4, #20]
    b272:	ldr	r3, [r4, #28]
    b274:	cmp.w	r5, #512	; 0x200
    b278:	mov	sl, r5
    b27a:	it	cs
    b27c:	movcs.w	sl, #512	; 0x200
    b280:	cmp	r2, r3
    b282:	bcc.n	b212 <FatFile::write(void const*, unsigned int)+0x7a>
         (m_curPosition >= m_fileSize || m_flags & FILE_FLAG_PREALLOCATE)) {
        // start of new sector don't need to read into cache
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
    b284:	movs	r2, #5
    b286:	b.n	b21e <FatFile::write(void const*, unsigned int)+0x86>
  }
  uint32_t clusterStartSector(uint32_t cluster) const {
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    b288:	ldr	r6, [r4, #16]
    b28a:	ldrb	r3, [r0, #6]
    b28c:	ldr	r2, [r0, #20]
    b28e:	subs	r6, #2
    b290:	lsl.w	r3, r6, r3
    b294:	adds	r1, r3, r2
                      + sectorOfCluster;

    if (sectorOffset != 0 || nToWrite < m_vol->bytesPerSector()) {
      // partial sector - must use cache
      // max space in sector
      n = m_vol->bytesPerSector() - sectorOffset;
    b296:	rsb	sl, r7, #512	; 0x200
    b29a:	cmp	sl, r5
    b29c:	it	cs
    b29e:	movcs	sl, r5
         (m_curPosition >= m_fileSize || m_flags & FILE_FLAG_PREALLOCATE)) {
        // start of new sector don't need to read into cache
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
      } else {
        // rewrite part of sector
        cacheOption = FsCache::CACHE_FOR_WRITE;
    b2a0:	movs	r2, #1
    b2a2:	b.n	b21e <FatFile::write(void const*, unsigned int)+0x86>
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
#if USE_MULTI_SECTOR_IO
    } else if (nToWrite >= 2*m_vol->bytesPerSector()) {
    b2a4:	cmp.w	r5, #1024	; 0x400
    b2a8:	bcc.n	b2e0 <FatFile::write(void const*, unsigned int)+0x148>
      // use multiple sector write command
      uint32_t maxSectors = m_vol->sectorsPerCluster() - sectorOfCluster;
    b2aa:	ldrb	r3, [r0, #4]
    b2ac:	ldr	r7, [r0, #48]	; 0x30
    b2ae:	subs	r3, r3, r6
      uint32_t nSector = nToWrite >> m_vol->bytesPerSectorShift();
    b2b0:	lsrs	r2, r5, #9
    b2b2:	cmp	r3, r2
    b2b4:	it	cs
    b2b6:	movcs	r3, r2
   * \param[in] sector Start sector of the range.
   * \param[in] count Number of sectors in the range.
   * \return true if a sector in the range is cached.
   */
  bool isCached(uint32_t sector, size_t count) {
    return sector <= m_sector && m_sector < (sector + count);
    b2b8:	cmp	r7, r1
      if (nSector > maxSectors) {
        nSector = maxSectors;
      }
      n = nSector << m_vol->bytesPerSectorShift();
    b2ba:	mov.w	sl, r3, lsl #9
    b2be:	bcc.n	b2d2 <FatFile::write(void const*, unsigned int)+0x13a>
    b2c0:	adds	r2, r3, r1
    b2c2:	cmp	r7, r2
    b2c4:	bcs.n	b2d2 <FatFile::write(void const*, unsigned int)+0x13a>
    m_blockDev = blockDev;
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    b2c6:	movs	r6, #0
    m_sector = 0XFFFFFFFF;
    b2c8:	mov.w	r2, #4294967295
    m_blockDev = blockDev;
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    b2cc:	strb.w	r6, [r0, #36]	; 0x24
    m_sector = 0XFFFFFFFF;
    b2d0:	str	r2, [r0, #48]	; 0x30
   */
  bool cacheSafeWrite(uint32_t sector, const uint8_t* src, size_t count) {
     if (isCached(sector, count)) {
      invalidate();
    }
    return m_blockDev->writeSectors(sector, src, count);
    b2d2:	ldr	r0, [r0, #40]	; 0x28
    b2d4:	mov	r2, r8
    b2d6:	bl	c8bc <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)>
      if (!m_vol->cacheSafeWrite(sector, src, nSector)) {
    b2da:	cmp	r0, #0
    b2dc:	bne.n	b23c <FatFile::write(void const*, unsigned int)+0xa4>
    b2de:	b.n	b1a4 <FatFile::write(void const*, unsigned int)+0xc>
   * \param[in] sector Logical sector to be written.
   * \param[in] src Pointer to the location of the data to be written.
   * \return true for success or false for failure.
   */
  bool cacheSafeWrite(uint32_t sector, const uint8_t* src) {
    if (isCached(sector)) {
    b2e0:	ldr	r3, [r0, #48]	; 0x30
    b2e2:	cmp	r3, r1
    b2e4:	beq.n	b33e <FatFile::write(void const*, unsigned int)+0x1a6>
      invalidate();
    }
    return m_blockDev->writeSector(sector, src);
    b2e6:	ldr	r0, [r0, #40]	; 0x28
   * \param[in] sector Logical sector to be written.
   * \param[in] src Pointer to the location of the data to be written.
   * \return true for success or false for failure.
   */
  bool writeSector(uint32_t sector, const uint8_t* src) {
    if (m_sharedSpi) {
    b2e8:	ldrb	r3, [r0, #13]
    b2ea:	cbnz	r3, b314 <FatFile::write(void const*, unsigned int)+0x17c>
      return writeSingle(sector, src);
    } else {
      return writeSectors(sector, src, 1);
    b2ec:	movs	r3, #1
    b2ee:	mov	r2, r8
    b2f0:	bl	c8bc <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)>
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // use single sector write command
      n = m_vol->bytesPerSector();
      if (!m_vol->cacheSafeWrite(sector, src)) {
    b2f4:	cmp	r0, #0
    b2f6:	beq.w	b1a4 <FatFile::write(void const*, unsigned int)+0xc>
        goto fail;
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // use single sector write command
      n = m_vol->bytesPerSector();
    b2fa:	mov.w	sl, #512	; 0x200
    b2fe:	b.n	b23c <FatFile::write(void const*, unsigned int)+0xa4>
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
      } else {
        if (m_firstCluster == 0) {
    b300:	ldr	r1, [r4, #32]
    b302:	cbz	r1, b36a <FatFile::write(void const*, unsigned int)+0x1d2>
            DBG_FAIL_MACRO;
            goto fail;
          }
          m_firstCluster = m_curCluster;
        } else {
          m_curCluster = m_firstCluster;
    b304:	str	r1, [r4, #16]
    b306:	ldrb	r3, [r0, #6]
    b308:	ldr	r2, [r0, #20]
    b30a:	subs	r1, #2
    b30c:	lsl.w	r3, r1, r3
    b310:	adds	r1, r3, r2
    b312:	b.n	b26a <FatFile::write(void const*, unsigned int)+0xd2>
   * \param[in] src Pointer to the location of the data to be written.
   * \return true for success or false for failure.
   */
  bool writeSector(uint32_t sector, const uint8_t* src) {
    if (m_sharedSpi) {
      return writeSingle(sector, src);
    b314:	mov	r2, r8
    b316:	bl	c7e0 <SdSpiCard::writeSingle(unsigned long, unsigned char const*)>
    b31a:	b.n	b2f4 <FatFile::write(void const*, unsigned int)+0x15c>
        int8_t fg;
        if (isContiguous() && m_fileSize > m_curPosition) {
          m_curCluster++;
          fg = 1;
        } else {
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    b31c:	add.w	r2, r4, #16
    b320:	bl	b3b4 <FatPartition::fatGet(unsigned long, unsigned long*)>
          if (fg < 0) {
    b324:	cmp	r0, #0
    b326:	blt.w	b1a4 <FatFile::write(void const*, unsigned int)+0xc>
        if (fg < 0) {
          DBG_FAIL_MACRO;
          goto fail;
        }
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
        if (fg == 0) {
    b32a:	bne.n	b338 <FatFile::write(void const*, unsigned int)+0x1a0>
          // add cluster if at end of chain
          if (!addCluster()) {
    b32c:	mov	r0, r4
    b32e:	bl	a640 <FatFile::addCluster()>
    b332:	cmp	r0, #0
    b334:	beq.w	b1a4 <FatFile::write(void const*, unsigned int)+0xc>
    b338:	ldr	r1, [r4, #16]
    b33a:	ldr	r0, [r4, #8]
    b33c:	b.n	b306 <FatFile::write(void const*, unsigned int)+0x16e>
    m_blockDev = blockDev;
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    b33e:	movs	r2, #0
    m_sector = 0XFFFFFFFF;
    b340:	mov.w	r3, #4294967295
    m_blockDev = blockDev;
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    b344:	strb.w	r2, [r0, #36]	; 0x24
    m_sector = 0XFFFFFFFF;
    b348:	str	r3, [r0, #48]	; 0x30
    b34a:	b.n	b2e6 <FatFile::write(void const*, unsigned int)+0x14e>
  }
  void cacheInvalidate() {
    m_cache.invalidate();
  }
  bool cacheSyncData() {
    return m_cache.sync();
    b34c:	ldr	r0, [r4, #8]
    b34e:	adds	r0, #36	; 0x24
    b350:	bl	8d90 <FsCache::sync()>
      }
      uint8_t* dst = pc->data + sectorOffset;
      memcpy(dst, src, n);
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
        // Force write if sector is full - improves large writes.
        if (!m_vol->cacheSyncData()) {
    b354:	cmp	r0, #0
    b356:	bne.w	b23c <FatFile::write(void const*, unsigned int)+0xa4>
    b35a:	b.n	b1a4 <FatFile::write(void const*, unsigned int)+0xc>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & FILE_FLAG_APPEND)) {
    if (!seekSet(m_fileSize)) {
    b35c:	ldr	r1, [r0, #28]
    b35e:	bl	af0c <FatFile::seekSet(unsigned long)>
    b362:	cmp	r0, #0
    b364:	beq.w	b1a4 <FatFile::write(void const*, unsigned int)+0xc>
    b368:	b.n	b1be <FatFile::write(void const*, unsigned int)+0x26>
          }
        }
      } else {
        if (m_firstCluster == 0) {
          // allocate first cluster of file
          if (!addCluster()) {
    b36a:	mov	r0, r4
    b36c:	bl	a640 <FatFile::addCluster()>
    b370:	cmp	r0, #0
    b372:	beq.w	b1a4 <FatFile::write(void const*, unsigned int)+0xc>
            DBG_FAIL_MACRO;
            goto fail;
          }
          m_firstCluster = m_curCluster;
    b376:	ldr	r1, [r4, #16]
    b378:	str	r1, [r4, #32]
    b37a:	ldr	r0, [r4, #8]
    b37c:	b.n	b306 <FatFile::write(void const*, unsigned int)+0x16e>
    }
    m_curPosition += n;
    src += n;
    nToWrite -= n;
  }
  if (m_curPosition > m_fileSize) {
    b37e:	ldr	r3, [r4, #28]
    b380:	cmp	r3, r2
    b382:	bcc.n	b398 <FatFile::write(void const*, unsigned int)+0x200>
    // update fileSize and insure sync will update dir entry
    m_fileSize = m_curPosition;
    m_flags |= FILE_FLAG_DIR_DIRTY;
  } else if (FsDateTime::callback) {
    b384:	ldr	r3, [pc, #40]	; (b3b0 <FatFile::write(void const*, unsigned int)+0x218>)
    b386:	ldr	r3, [r3, #0]
    b388:	cbz	r3, b3a8 <FatFile::write(void const*, unsigned int)+0x210>
    // insure sync will update modified date and time
    m_flags |= FILE_FLAG_DIR_DIRTY;
    b38a:	ldrb	r3, [r4, #2]
    b38c:	orn	r3, r3, #127	; 0x7f
    b390:	strb	r3, [r4, #2]
    b392:	mov	r0, r9
    b394:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    nToWrite -= n;
  }
  if (m_curPosition > m_fileSize) {
    // update fileSize and insure sync will update dir entry
    m_fileSize = m_curPosition;
    m_flags |= FILE_FLAG_DIR_DIRTY;
    b398:	ldrb	r3, [r4, #2]
    src += n;
    nToWrite -= n;
  }
  if (m_curPosition > m_fileSize) {
    // update fileSize and insure sync will update dir entry
    m_fileSize = m_curPosition;
    b39a:	str	r2, [r4, #28]
    m_flags |= FILE_FLAG_DIR_DIRTY;
    b39c:	orn	r3, r3, #127	; 0x7f
    b3a0:	strb	r3, [r4, #2]
    b3a2:	mov	r0, r9
    b3a4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b3a8:	mov	r0, r9
    b3aa:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b3ae:	nop
    b3b0:	.word	0x20002bd8

0000b3b4 <FatPartition::fatGet(unsigned long, unsigned long*)>:
  uint32_t sector;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
    b3b4:	cmp	r1, #1
    b3b6:	bls.n	b41c <FatPartition::fatGet(unsigned long, unsigned long*)+0x68>
    b3b8:	ldr	r3, [r0, #28]
    b3ba:	cmp	r1, r3
    b3bc:	bhi.n	b41c <FatPartition::fatGet(unsigned long, unsigned long*)+0x68>
 fail:
  return false;
}
//------------------------------------------------------------------------------
// Fetch a FAT entry - return -1 error, 0 EOC, else 1.
int8_t FatPartition::fatGet(uint32_t cluster, uint32_t* value) {
    b3be:	push	{r4, r5, r6, lr}
    b3c0:	ldrb	r3, [r0, #7]
  if (cluster < 2 || cluster > m_lastCluster) {
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (fatType() == 32) {
    b3c2:	cmp	r3, #32
    b3c4:	mov	r6, r2
    b3c6:	mov	r5, r0
    b3c8:	mov	r4, r1
    b3ca:	beq.n	b3fe <FatPartition::fatGet(unsigned long, unsigned long*)+0x4a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    next = getLe32(reinterpret_cast<uint8_t*>
                  (&pc->fat32[cluster & (m_sectorMask >> 2)]));
  } else if (fatType() == 16) {
    b3cc:	cmp	r3, #16
    b3ce:	bne.n	b3f8 <FatPartition::fatGet(unsigned long, unsigned long*)+0x44>
  FsCache m_cache;
#if USE_SEPARATE_FAT_CACHE
  FsCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t sector, uint8_t options) {
    options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    return reinterpret_cast<cache_t*>(m_fatCache.get(sector, options));
    b3d0:	ldr	r3, [r0, #24]
    b3d2:	ubfx	r1, r1, #8, #8
    b3d6:	add	r1, r3
    b3d8:	movs	r2, #2
    b3da:	add.w	r0, r0, #564	; 0x234
    b3de:	bl	8d34 <FsCache::get(unsigned long, unsigned char)>
    cluster &= 0XFFFF;
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 1) );
    pc = cacheFetchFat(sector, FsCache::CACHE_FOR_READ);
    if (!pc) {
    b3e2:	cbz	r0, b3f8 <FatPartition::fatGet(unsigned long, unsigned long*)+0x44>
void lbaToMbrChs(uint8_t* chs, uint32_t capacityMB, uint32_t lba);
//-----------------------------------------------------------------------------
#if !defined(USE_SIMPLE_LITTLE_ENDIAN) || USE_SIMPLE_LITTLE_ENDIAN
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
    b3e4:	uxtb	r1, r4
      DBG_FAIL_MACRO;
      goto fail;
    }
    next = getLe16(reinterpret_cast<uint8_t*>
                  (&pc->fat16[cluster & (m_sectorMask >> 1)]));
    b3e6:	ldrh.w	r3, [r0, r1, lsl #1]
    next = cluster & 1 ? tmp >> 4 : tmp & 0XFFF;
  } else {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isEOC(next)) {
    b3ea:	ldr	r2, [r5, #28]
    b3ec:	cmp	r3, r2
    return 0;
  }
  *value = next;
  return 1;
    b3ee:	itte	ls
    b3f0:	movls	r0, #1
    goto fail;
  }
  if (isEOC(next)) {
    return 0;
  }
  *value = next;
    b3f2:	strls	r3, [r6, #0]
  } else {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isEOC(next)) {
    return 0;
    b3f4:	movhi	r0, #0
  *value = next;
  return 1;

 fail:
  return -1;
}
    b3f6:	pop	{r4, r5, r6, pc}
  }
  *value = next;
  return 1;

 fail:
  return -1;
    b3f8:	mov.w	r0, #4294967295
    b3fc:	pop	{r4, r5, r6, pc}
    b3fe:	ldr	r1, [r0, #24]
    b400:	movs	r2, #2
    b402:	add.w	r1, r1, r4, lsr #7
    b406:	add.w	r0, r0, #564	; 0x234
    b40a:	bl	8d34 <FsCache::get(unsigned long, unsigned char)>
  }

  if (fatType() == 32) {
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    pc = cacheFetchFat(sector, FsCache::CACHE_FOR_READ);
    if (!pc) {
    b40e:	cmp	r0, #0
    b410:	beq.n	b3f8 <FatPartition::fatGet(unsigned long, unsigned long*)+0x44>
}
inline uint32_t getLe32(const uint8_t* src) {
  return *reinterpret_cast<const uint32_t*>(src);
    b412:	and.w	r1, r4, #127	; 0x7f
    b416:	ldr.w	r3, [r0, r1, lsl #2]
    b41a:	b.n	b3ea <FatPartition::fatGet(unsigned long, unsigned long*)+0x36>
  }
  *value = next;
  return 1;

 fail:
  return -1;
    b41c:	mov.w	r0, #4294967295
}
    b420:	bx	lr
    b422:	nop

0000b424 <FatPartition::fatPut(unsigned long, unsigned long)>:
bool FatPartition::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t sector;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
    b424:	cmp	r1, #1
    b426:	bls.n	b464 <FatPartition::fatPut(unsigned long, unsigned long)+0x40>
 fail:
  return -1;
}
//------------------------------------------------------------------------------
// Store a FAT entry
bool FatPartition::fatPut(uint32_t cluster, uint32_t value) {
    b428:	push	{r3, r4, r5, lr}
  uint32_t sector;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
    b42a:	ldr	r3, [r0, #28]
    b42c:	cmp	r1, r3
    b42e:	bhi.n	b43e <FatPartition::fatPut(unsigned long, unsigned long)+0x1a>
    b430:	ldrb	r3, [r0, #7]
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (fatType() == 32) {
    b432:	cmp	r3, #32
    b434:	mov	r5, r2
    b436:	mov	r4, r1
    b438:	beq.n	b468 <FatPartition::fatPut(unsigned long, unsigned long)+0x44>
    setLe32(reinterpret_cast<uint8_t*>
           (&pc->fat32[cluster & (m_sectorMask >> 2)]), value);
    return true;
  }

  if (fatType() == 16) {
    b43a:	cmp	r3, #16
    b43c:	beq.n	b442 <FatPartition::fatPut(unsigned long, unsigned long)+0x1e>
    DBG_FAIL_MACRO;
    goto fail;
  }

 fail:
  return false;
    b43e:	movs	r0, #0
    b440:	pop	{r3, r4, r5, pc}
    b442:	ldr	r3, [r0, #24]
    b444:	ubfx	r1, r1, #8, #8
    b448:	add	r1, r3
    b44a:	add.w	r0, r0, #564	; 0x234
    b44e:	movs	r2, #3
    b450:	bl	8d34 <FsCache::get(unsigned long, unsigned char)>

  if (fatType() == 16) {
    cluster &= 0XFFFF;
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 1) );
    pc = cacheFetchFat(sector, FsCache::CACHE_FOR_WRITE);
    if (!pc) {
    b454:	mov	r3, r0
    b456:	cmp	r0, #0
    b458:	beq.n	b43e <FatPartition::fatPut(unsigned long, unsigned long)+0x1a>
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    b45a:	uxtb	r1, r4
      DBG_FAIL_MACRO;
      goto fail;
    }
    setLe16(reinterpret_cast<uint8_t*>
           (&pc->fat16[cluster & (m_sectorMask >> 1)]), value);
    return true;
    b45c:	movs	r0, #1
    b45e:	strh.w	r5, [r3, r1, lsl #1]
    goto fail;
  }

 fail:
  return false;
}
    b462:	pop	{r3, r4, r5, pc}
    DBG_FAIL_MACRO;
    goto fail;
  }

 fail:
  return false;
    b464:	movs	r0, #0
}
    b466:	bx	lr
    b468:	ldr	r1, [r0, #24]
    b46a:	movs	r2, #3
    b46c:	add.w	r0, r0, #564	; 0x234
    b470:	add.w	r1, r1, r4, lsr #7
    b474:	bl	8d34 <FsCache::get(unsigned long, unsigned char)>
  }

  if (fatType() == 32) {
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    pc = cacheFetchFat(sector, FsCache::CACHE_FOR_WRITE);
    if (!pc) {
    b478:	mov	r3, r0
    b47a:	cmp	r0, #0
    b47c:	beq.n	b43e <FatPartition::fatPut(unsigned long, unsigned long)+0x1a>
}

inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
    b47e:	and.w	r1, r4, #127	; 0x7f
      DBG_FAIL_MACRO;
      goto fail;
    }
    setLe32(reinterpret_cast<uint8_t*>
           (&pc->fat32[cluster & (m_sectorMask >> 2)]), value);
    return true;
    b482:	movs	r0, #1
    b484:	str.w	r5, [r3, r1, lsl #2]
    b488:	pop	{r3, r4, r5, pc}
    b48a:	nop

0000b48c <FatPartition::allocateCluster(unsigned long, unsigned long*)>:
#define DBG_FILE "FatPartition.cpp"
#include "../common/DebugMacros.h"
#include "../common/FsStructs.h"
#include "FatPartition.h"
//------------------------------------------------------------------------------
bool FatPartition::allocateCluster(uint32_t current, uint32_t* next) {
    b48c:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t find;
  bool setStart;
  if (m_allocSearchStart < current) {
    b490:	ldr	r4, [r0, #12]
    b492:	cmp	r4, r1
#define DBG_FILE "FatPartition.cpp"
#include "../common/DebugMacros.h"
#include "../common/FsStructs.h"
#include "FatPartition.h"
//------------------------------------------------------------------------------
bool FatPartition::allocateCluster(uint32_t current, uint32_t* next) {
    b494:	sub	sp, #8
    b496:	mov	r5, r0
    b498:	mov	r7, r1
    b49a:	mov	r8, r2
  uint32_t find;
  bool setStart;
  if (m_allocSearchStart < current) {
    b49c:	itte	cc
    b49e:	movcc	r4, r1
    // Try to keep file contiguous. Start just after current cluster.
    find = current;
    setStart = false;
    b4a0:	movcc	r6, #0
  } else {
    find = m_allocSearchStart;
    setStart = true;
    b4a2:	movcs	r6, #1
    b4a4:	ldr	r3, [r5, #28]
  }
  while (1) {
    find++;
    b4a6:	adds	r4, #1
    if (find > m_lastCluster) {
    b4a8:	cmp	r4, r3
      // Can't find space, already searched clusters after current.
      DBG_FAIL_MACRO;
      goto fail;
    }
    uint32_t f;
    int8_t fg = fatGet(find, &f);
    b4aa:	add	r2, sp, #4
    b4ac:	mov	r0, r5
    b4ae:	mov	r1, r4
    find = m_allocSearchStart;
    setStart = true;
  }
  while (1) {
    find++;
    if (find > m_lastCluster) {
    b4b0:	bls.n	b4c6 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x3a>
      if (setStart) {
    b4b2:	cbnz	r6, b504 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x78>
        // Can't find space, checked all clusters.
        DBG_FAIL_MACRO;
        goto fail;
      }
      find = m_allocSearchStart;
    b4b4:	ldr	r4, [r5, #12]
  } else {
    find = m_allocSearchStart;
    setStart = true;
  }
  while (1) {
    find++;
    b4b6:	adds	r4, #1
    if (find > m_lastCluster) {
    b4b8:	cmp	r4, r3
        // Can't find space, checked all clusters.
        DBG_FAIL_MACRO;
        goto fail;
      }
      find = m_allocSearchStart;
      setStart = true;
    b4ba:	mov.w	r6, #1
      // Can't find space, already searched clusters after current.
      DBG_FAIL_MACRO;
      goto fail;
    }
    uint32_t f;
    int8_t fg = fatGet(find, &f);
    b4be:	add	r2, sp, #4
    b4c0:	mov	r0, r5
    b4c2:	mov	r1, r4
    find = m_allocSearchStart;
    setStart = true;
  }
  while (1) {
    find++;
    if (find > m_lastCluster) {
    b4c4:	bhi.n	b4b2 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x26>
      }
      find = m_allocSearchStart;
      setStart = true;
      continue;
    }
    if (find == current) {
    b4c6:	cmp	r7, r4
    b4c8:	beq.n	b504 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x78>
      // Can't find space, already searched clusters after current.
      DBG_FAIL_MACRO;
      goto fail;
    }
    uint32_t f;
    int8_t fg = fatGet(find, &f);
    b4ca:	bl	b3b4 <FatPartition::fatGet(unsigned long, unsigned long*)>
    if (fg < 0) {
    b4ce:	cmp	r0, #0
    b4d0:	blt.n	b504 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x78>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (fg && f == 0) {
    b4d2:	beq.n	b4a4 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x18>
    b4d4:	ldr	r3, [sp, #4]
    b4d6:	cmp	r3, #0
    b4d8:	bne.n	b4a4 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x18>
      break;
    }
  }
  if (setStart) {
    b4da:	cbz	r6, b4de <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x52>
    m_allocSearchStart = find;
    b4dc:	str	r4, [r5, #12]
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
  }
  int8_t fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  bool fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
    b4de:	mvn.w	r2, #4026531840	; 0xf0000000
    b4e2:	mov	r1, r4
    b4e4:	mov	r0, r5
    b4e6:	bl	b424 <FatPartition::fatPut(unsigned long, unsigned long)>
  }
  // Mark end of chain.
  if (!fatPutEOC(find)) {
    b4ea:	mov	r6, r0
    b4ec:	cbz	r0, b504 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x78>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (current) {
    b4ee:	cbnz	r7, b4f6 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x6a>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  updateFreeClusterCount(-1);
  *next = find;
    b4f0:	str.w	r4, [r8]
  return true;
    b4f4:	b.n	b506 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x7a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (current) {
    // Link clusters.
    if (!fatPut(current, find)) {
    b4f6:	mov	r1, r7
    b4f8:	mov	r0, r5
    b4fa:	mov	r2, r4
    b4fc:	bl	b424 <FatPartition::fatPut(unsigned long, unsigned long)>
    b500:	cmp	r0, #0
    b502:	bne.n	b4f0 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x64>
  updateFreeClusterCount(-1);
  *next = find;
  return true;

 fail:
  return false;
    b504:	movs	r6, #0
}
    b506:	mov	r0, r6
    b508:	add	sp, #8
    b50a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b50e:	nop

0000b510 <FatPartition::freeChain(unsigned long)>:
 fail:
  return false;
}
//------------------------------------------------------------------------------
// free a cluster chain
bool FatPartition::freeChain(uint32_t cluster) {
    b510:	push	{r4, r5, r6, lr}
    b512:	mov	r5, r0
    b514:	sub	sp, #8
    b516:	mov	r4, r1
    b518:	b.n	b530 <FatPartition::freeChain(unsigned long)+0x20>
    if (fg < 0) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // free cluster
    if (!fatPut(cluster, 0)) {
    b51a:	bl	b424 <FatPartition::fatPut(unsigned long, unsigned long)>
    b51e:	cbz	r0, b546 <FatPartition::freeChain(unsigned long)+0x36>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // Add one to count of free clusters.
    updateFreeClusterCount(1);
    if (cluster < m_allocSearchStart) {
    b520:	ldr	r3, [r5, #12]
    b522:	cmp	r4, r3
      m_allocSearchStart = cluster - 1;
    b524:	itt	cc
    b526:	addcc.w	r4, r4, #4294967295
    b52a:	strcc	r4, [r5, #12]
    }
    cluster = next;
    b52c:	ldr	r4, [sp, #4]
//------------------------------------------------------------------------------
// free a cluster chain
bool FatPartition::freeChain(uint32_t cluster) {
  uint32_t next;
  int8_t fg;
  do {
    b52e:	cbz	r6, b548 <FatPartition::freeChain(unsigned long)+0x38>
    fg = fatGet(cluster, &next);
    b530:	add	r2, sp, #4
    b532:	mov	r1, r4
    b534:	mov	r0, r5
    b536:	bl	b3b4 <FatPartition::fatGet(unsigned long, unsigned long*)>
    if (fg < 0) {
    b53a:	subs	r6, r0, #0
      DBG_FAIL_MACRO;
      goto fail;
    }
    // free cluster
    if (!fatPut(cluster, 0)) {
    b53c:	mov	r1, r4
    b53e:	mov.w	r2, #0
    b542:	mov	r0, r5
bool FatPartition::freeChain(uint32_t cluster) {
  uint32_t next;
  int8_t fg;
  do {
    fg = fatGet(cluster, &next);
    if (fg < 0) {
    b544:	bge.n	b51a <FatPartition::freeChain(unsigned long)+0xa>
  } while (fg);

  return true;

 fail:
  return false;
    b546:	movs	r0, #0
}
    b548:	add	sp, #8
    b54a:	pop	{r4, r5, r6, pc}

0000b54c <FatPartition::freeClusterCount()>:
//------------------------------------------------------------------------------
int32_t FatPartition::freeClusterCount() {
    b54c:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b550:	ldrb	r3, [r0, #7]
    return m_freeClusterCount;
  }
#endif  // MAINTAIN_FREE_CLUSTER_COUNT
  uint32_t free = 0;
  uint32_t sector;
  uint32_t todo = m_lastCluster + 1;
    b552:	ldr	r2, [r0, #28]
      }
      if (fg && c == 0) {
        free++;
      }
    }
  } else if (fatType() == 16 || fatType() == 32) {
    b554:	cmp	r3, #16
    return m_freeClusterCount;
  }
#endif  // MAINTAIN_FREE_CLUSTER_COUNT
  uint32_t free = 0;
  uint32_t sector;
  uint32_t todo = m_lastCluster + 1;
    b556:	add.w	r8, r2, #1
      }
      if (fg && c == 0) {
        free++;
      }
    }
  } else if (fatType() == 16 || fatType() == 32) {
    b55a:	beq.n	b568 <FatPartition::freeClusterCount()+0x1c>
    b55c:	cmp	r3, #32
    b55e:	beq.n	b568 <FatPartition::freeClusterCount()+0x1c>
  }
  setFreeClusterCount(free);
  return free;

 fail:
  return -1;
    b560:	mov.w	r0, #4294967295
    b564:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (fg && c == 0) {
        free++;
      }
    }
  } else if (fatType() == 16 || fatType() == 32) {
    sector = m_fatStartSector;
    b568:	ldr	r5, [r0, #24]
    while (todo) {
    b56a:	cmp.w	r8, #0
    b56e:	beq.n	b5ee <FatPartition::freeClusterCount()+0xa2>
    b570:	mov	r6, r0
    b572:	add.w	r7, r0, #564	; 0x234
    b576:	movs	r4, #0
  FsCache m_cache;
#if USE_SEPARATE_FAT_CACHE
  FsCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t sector, uint8_t options) {
    options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    return reinterpret_cast<cache_t*>(m_fatCache.get(sector, options));
    b578:	mov	r1, r5
    b57a:	movs	r2, #2
    b57c:	mov	r0, r7
      cache_t* pc = cacheFetchFat(sector++, FsCache::CACHE_FOR_READ);
    b57e:	adds	r5, #1
    b580:	bl	8d34 <FsCache::get(unsigned long, unsigned char)>
      if (!pc) {
    b584:	cmp	r0, #0
    b586:	beq.n	b560 <FatPartition::freeClusterCount()+0x14>
        DBG_FAIL_MACRO;
        goto fail;
      }
      n =  fatType() == 16 ? m_bytesPerSector/2 : m_bytesPerSector/4;
    b588:	ldrb	r3, [r6, #7]
    b58a:	cmp	r3, #16
    b58c:	beq.n	b5bc <FatPartition::freeClusterCount()+0x70>
      if (todo < n) {
    b58e:	cmp.w	r8, #127	; 0x7f
    b592:	bhi.n	b5e6 <FatPartition::freeClusterCount()+0x9a>
        n = todo;
    b594:	uxth.w	r1, r8
    b598:	mov	lr, r8
    b59a:	subs	r1, #1
    b59c:	uxth	r1, r1
    b59e:	add.w	r1, r0, r1, lsl #2
    b5a2:	subs	r3, r0, #4
            free++;
          }
        }
      } else {
        for (uint16_t i = 0; i < n; i++) {
          if (pc->fat32[i] == 0) {
    b5a4:	ldr.w	r2, [r3, #4]!
    b5a8:	cbnz	r2, b5ac <FatPartition::freeClusterCount()+0x60>
            free++;
    b5aa:	adds	r4, #1
          if (pc->fat16[i] == 0) {
            free++;
          }
        }
      } else {
        for (uint16_t i = 0; i < n; i++) {
    b5ac:	cmp	r3, r1
    b5ae:	bne.n	b5a4 <FatPartition::freeClusterCount()+0x58>
        free++;
      }
    }
  } else if (fatType() == 16 || fatType() == 32) {
    sector = m_fatStartSector;
    while (todo) {
    b5b0:	subs.w	r8, r8, lr
    b5b4:	bne.n	b578 <FatPartition::freeClusterCount()+0x2c>
    b5b6:	mov	r0, r4
    b5b8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      n =  fatType() == 16 ? m_bytesPerSector/2 : m_bytesPerSector/4;
      if (todo < n) {
    b5bc:	cmp.w	r8, #255	; 0xff
    b5c0:	bls.n	b5f4 <FatPartition::freeClusterCount()+0xa8>
    b5c2:	mov.w	lr, #256	; 0x100
      cache_t* pc = cacheFetchFat(sector++, FsCache::CACHE_FOR_READ);
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      n =  fatType() == 16 ? m_bytesPerSector/2 : m_bytesPerSector/4;
    b5c6:	mov	r3, lr
    b5c8:	subs	r1, r3, #1
    b5ca:	uxth	r1, r1
    b5cc:	add.w	r1, r0, r1, lsl #1
    b5d0:	subs	r3, r0, #2
      if (todo < n) {
        n = todo;
      }
      if (fatType() == 16) {
        for (uint16_t i = 0; i < n; i++) {
          if (pc->fat16[i] == 0) {
    b5d2:	ldrh.w	r2, [r3, #2]!
    b5d6:	cbnz	r2, b5da <FatPartition::freeClusterCount()+0x8e>
            free++;
    b5d8:	adds	r4, #1
      n =  fatType() == 16 ? m_bytesPerSector/2 : m_bytesPerSector/4;
      if (todo < n) {
        n = todo;
      }
      if (fatType() == 16) {
        for (uint16_t i = 0; i < n; i++) {
    b5da:	cmp	r1, r3
    b5dc:	bne.n	b5d2 <FatPartition::freeClusterCount()+0x86>
        free++;
      }
    }
  } else if (fatType() == 16 || fatType() == 32) {
    sector = m_fatStartSector;
    while (todo) {
    b5de:	subs.w	r8, r8, lr
    b5e2:	bne.n	b578 <FatPartition::freeClusterCount()+0x2c>
    b5e4:	b.n	b5b6 <FatPartition::freeClusterCount()+0x6a>
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      n =  fatType() == 16 ? m_bytesPerSector/2 : m_bytesPerSector/4;
      if (todo < n) {
    b5e6:	mov.w	lr, #128	; 0x80
      cache_t* pc = cacheFetchFat(sector++, FsCache::CACHE_FOR_READ);
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      n =  fatType() == 16 ? m_bytesPerSector/2 : m_bytesPerSector/4;
    b5ea:	mov	r1, lr
    b5ec:	b.n	b59a <FatPartition::freeClusterCount()+0x4e>
        free++;
      }
    }
  } else if (fatType() == 16 || fatType() == 32) {
    sector = m_fatStartSector;
    while (todo) {
    b5ee:	mov	r0, r8
    // invalid FAT type
    DBG_FAIL_MACRO;
    goto fail;
  }
  setFreeClusterCount(free);
  return free;
    b5f0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        DBG_FAIL_MACRO;
        goto fail;
      }
      n =  fatType() == 16 ? m_bytesPerSector/2 : m_bytesPerSector/4;
      if (todo < n) {
        n = todo;
    b5f4:	uxth.w	r3, r8
    b5f8:	mov	lr, r8
    b5fa:	b.n	b5c8 <FatPartition::freeClusterCount()+0x7c>

0000b5fc <FatPartition::init(SdSpiCard*, unsigned char)>:

 fail:
  return -1;
}
//------------------------------------------------------------------------------
bool FatPartition::init(BlockDevice* dev, uint8_t part) {
    b5fc:	push	{r3, r4, r5, r6, r7, lr}
    b5fe:	mov	r4, r0
  m_blockDev = dev;
  pbs_t* pbs;
  BpbFat32_t* bpb;
  MbrSector_t* mbr;
  uint8_t tmp;
  m_fatType = 0;
    b600:	movs	r3, #0
  m_allocSearchStart = 1;
    b602:	movs	r5, #1
    b604:	mov.w	r0, #4294967295
    b608:	str	r5, [r4, #12]
//------------------------------------------------------------------------------
bool FatPartition::init(BlockDevice* dev, uint8_t part) {
  uint32_t clusterCount;
  uint32_t totalSectors;
  uint32_t volumeStartSector = 0;
  m_blockDev = dev;
    b60a:	str	r1, [r4, #0]
  }
  /** Initialize the cache.
   * \param[in] blockDev Block device for this cache.
   */
  void init(BlockDevice* blockDev) {
    m_blockDev = blockDev;
    b60c:	str	r1, [r4, #40]	; 0x28
    b60e:	str.w	r1, [r4, #568]	; 0x238
  pbs_t* pbs;
  BpbFat32_t* bpb;
  MbrSector_t* mbr;
  uint8_t tmp;
  m_fatType = 0;
    b612:	strb	r3, [r4, #7]
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    b614:	strb.w	r3, [r4, #36]	; 0x24
    b618:	strb.w	r3, [r4, #564]	; 0x234
    m_sector = 0XFFFFFFFF;
    b61c:	str	r0, [r4, #48]	; 0x30
    b61e:	str.w	r0, [r4, #576]	; 0x240
#if USE_SEPARATE_FAT_CACHE
  m_fatCache.init(dev);
#endif  // USE_SEPARATE_FAT_CACHE
  // if part == 0 assume super floppy with FAT boot sector in sector zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
    b622:	mov	r5, r2
    b624:	cbz	r2, b65e <FatPartition::init(SdSpiCard*, unsigned char)+0x62>
    if (part > 4) {
    b626:	cmp	r2, #4
    b628:	bls.n	b62e <FatPartition::init(SdSpiCard*, unsigned char)+0x32>
  m_fatCache.setMirrorOffset(m_sectorsPerFat);
#endif  // USE_SEPARATE_FAT_CACHE
  return true;

 fail:
  return false;
    b62a:	movs	r0, #0
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
    m_fatType = 12;
    if (!FAT12_SUPPORT) {
      DBG_FAIL_MACRO;
      goto fail;
    b62c:	pop	{r3, r4, r5, r6, r7, pc}
  bool cacheSync() {
    return m_cache.sync() && syncDevice();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t sector, uint8_t options) {
    return reinterpret_cast<cache_t*>(m_cache.get(sector, options));
    b62e:	add.w	r6, r4, #36	; 0x24
    b632:	mov	r2, r3
    b634:	mov	r1, r3
    b636:	mov	r0, r6
    b638:	bl	8d34 <FsCache::get(unsigned long, unsigned char)>
      DBG_FAIL_MACRO;
      goto fail;
    }
    mbr = reinterpret_cast<MbrSector_t*>
          (cacheFetchData(0, FsCache::CACHE_FOR_READ));
    MbrPart_t* mp = mbr->part + part - 1;
    b63c:	add.w	r5, r5, #268435456	; 0x10000000
    b640:	subs	r5, #1
    b642:	lsls	r5, r5, #4
    b644:	add.w	r3, r0, #446	; 0x1be
    b648:	adds	r2, r3, r5

    if (!mbr || mp->type == 0 || (mp->boot != 0 && mp->boot != 0X80)) {
    b64a:	cmp	r0, #0
    b64c:	beq.n	b62a <FatPartition::init(SdSpiCard*, unsigned char)+0x2e>
    b64e:	ldrb	r1, [r2, #4]
    b650:	cmp	r1, #0
    b652:	beq.n	b62a <FatPartition::init(SdSpiCard*, unsigned char)+0x2e>
    b654:	ldrb	r3, [r3, r5]
    b656:	lsls	r3, r3, #25
    b658:	bne.n	b62a <FatPartition::init(SdSpiCard*, unsigned char)+0x2e>
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
}
inline uint32_t getLe32(const uint8_t* src) {
  return *reinterpret_cast<const uint32_t*>(src);
    b65a:	ldr	r5, [r2, #8]
    b65c:	b.n	b662 <FatPartition::init(SdSpiCard*, unsigned char)+0x66>
    b65e:	add.w	r6, r4, #36	; 0x24
    b662:	mov	r0, r6
    b664:	movs	r2, #0
    b666:	mov	r1, r5
    b668:	bl	8d34 <FsCache::get(unsigned long, unsigned char)>
    volumeStartSector = getLe32(mp->relativeSectors);
  }
  pbs = reinterpret_cast<pbs_t*>
        (cacheFetchData(volumeStartSector, FsCache::CACHE_FOR_READ));
  bpb = reinterpret_cast<BpbFat32_t*>(pbs->bpb);
  if (!pbs || bpb->fatCount != 2 || getLe16(bpb->bytesPerSector) != 512) {
    b66c:	cmp	r0, #0
    b66e:	beq.n	b62a <FatPartition::init(SdSpiCard*, unsigned char)+0x2e>
    b670:	ldrb	r3, [r0, #16]
    b672:	cmp	r3, #2
    b674:	bne.n	b62a <FatPartition::init(SdSpiCard*, unsigned char)+0x2e>
    b676:	ldrh.w	r3, [r0, #11]
    b67a:	cmp.w	r3, #512	; 0x200
    b67e:	bne.n	b62a <FatPartition::init(SdSpiCard*, unsigned char)+0x2e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_sectorsPerCluster = bpb->sectorsPerCluster;
    b680:	ldrb	r6, [r0, #13]
    b682:	strb	r6, [r4, #4]
  m_clusterSectorMask = m_sectorsPerCluster - 1;
    b684:	subs	r3, r6, #1
  // determine shift that is same as multiply by m_sectorsPerCluster
  m_sectorsPerClusterShift = 0;
    b686:	movs	r2, #0
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    b688:	cmp	r6, #1
  if (!pbs || bpb->fatCount != 2 || getLe16(bpb->bytesPerSector) != 512) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_sectorsPerCluster = bpb->sectorsPerCluster;
  m_clusterSectorMask = m_sectorsPerCluster - 1;
    b68a:	strb	r3, [r4, #5]
  // determine shift that is same as multiply by m_sectorsPerCluster
  m_sectorsPerClusterShift = 0;
    b68c:	strb	r2, [r4, #6]
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    b68e:	beq.n	b6b0 <FatPartition::init(SdSpiCard*, unsigned char)+0xb4>
    b690:	movs	r2, #1
    b692:	mov	r1, r2
    b694:	b.n	b698 <FatPartition::init(SdSpiCard*, unsigned char)+0x9c>
    b696:	mov	r2, r3
    b698:	lsls	r1, r1, #1
    b69a:	uxtb	r1, r1
    b69c:	adds	r3, r2, #1
    b69e:	cmp	r6, r1
    b6a0:	uxtb	r3, r3
    b6a2:	beq.n	b6ae <FatPartition::init(SdSpiCard*, unsigned char)+0xb2>
    if (tmp == 0) {
    b6a4:	cmp	r3, #9
    b6a6:	bne.n	b696 <FatPartition::init(SdSpiCard*, unsigned char)+0x9a>
    b6a8:	strb	r2, [r4, #6]
  m_fatCache.setMirrorOffset(m_sectorsPerFat);
#endif  // USE_SEPARATE_FAT_CACHE
  return true;

 fail:
  return false;
    b6aa:	movs	r0, #0
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
    m_fatType = 12;
    if (!FAT12_SUPPORT) {
      DBG_FAIL_MACRO;
      goto fail;
    b6ac:	pop	{r3, r4, r5, r6, r7, pc}
    b6ae:	strb	r2, [r4, #6]
      DBG_FAIL_MACRO;
      goto fail;
    }
    m_sectorsPerClusterShift++;
  }
  m_sectorsPerFat = getLe16(bpb->sectorsPerFat16);
    b6b0:	ldrh	r6, [r0, #22]
    b6b2:	str	r6, [r4, #16]
  if (m_sectorsPerFat == 0) {
    b6b4:	cbnz	r6, b6ba <FatPartition::init(SdSpiCard*, unsigned char)+0xbe>
    b6b6:	ldr	r6, [r0, #36]	; 0x24
    m_sectorsPerFat = getLe32(bpb->sectorsPerFat32);
    b6b8:	str	r6, [r4, #16]
  }
  m_fatStartSector = volumeStartSector + getLe16(bpb->reservedSectorCount);
    b6ba:	ldrh	r1, [r0, #14]
void lbaToMbrChs(uint8_t* chs, uint32_t capacityMB, uint32_t lba);
//-----------------------------------------------------------------------------
#if !defined(USE_SIMPLE_LITTLE_ENDIAN) || USE_SIMPLE_LITTLE_ENDIAN
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
    b6bc:	ldrh.w	r3, [r0, #17]

  // count for FAT16 zero for FAT32
  m_rootDirEntryCount = getLe16(bpb->rootDirEntryCount);
    b6c0:	strh	r3, [r4, #8]
  }
  m_sectorsPerFat = getLe16(bpb->sectorsPerFat16);
  if (m_sectorsPerFat == 0) {
    m_sectorsPerFat = getLe32(bpb->sectorsPerFat32);
  }
  m_fatStartSector = volumeStartSector + getLe16(bpb->reservedSectorCount);
    b6c2:	add	r1, r5
  m_rootDirEntryCount = getLe16(bpb->rootDirEntryCount);

  // directory start for FAT16 dataStart for FAT32
  m_rootDirStart = m_fatStartSector + 2 * m_sectorsPerFat;
  // data start for FAT16 and FAT32
  m_dataStartSector = m_rootDirStart +
    b6c4:	lsls	r3, r3, #5

  // count for FAT16 zero for FAT32
  m_rootDirEntryCount = getLe16(bpb->rootDirEntryCount);

  // directory start for FAT16 dataStart for FAT32
  m_rootDirStart = m_fatStartSector + 2 * m_sectorsPerFat;
    b6c6:	add.w	r7, r1, r6, lsl #1
  // data start for FAT16 and FAT32
  m_dataStartSector = m_rootDirStart +
    b6ca:	addw	r3, r3, #511	; 0x1ff
  }
  m_sectorsPerFat = getLe16(bpb->sectorsPerFat16);
  if (m_sectorsPerFat == 0) {
    m_sectorsPerFat = getLe32(bpb->sectorsPerFat32);
  }
  m_fatStartSector = volumeStartSector + getLe16(bpb->reservedSectorCount);
    b6ce:	str	r1, [r4, #24]
  // data start for FAT16 and FAT32
  m_dataStartSector = m_rootDirStart +
    ((32 * m_rootDirEntryCount + m_bytesPerSector - 1)/m_bytesPerSector);

  // total sectors for FAT16 or FAT32
  totalSectors = getLe16(bpb->totalSectors16);
    b6d0:	ldrh.w	r1, [r0, #19]

  // count for FAT16 zero for FAT32
  m_rootDirEntryCount = getLe16(bpb->rootDirEntryCount);

  // directory start for FAT16 dataStart for FAT32
  m_rootDirStart = m_fatStartSector + 2 * m_sectorsPerFat;
    b6d4:	str	r7, [r4, #32]
  // data start for FAT16 and FAT32
  m_dataStartSector = m_rootDirStart +
    b6d6:	add.w	r3, r7, r3, asr #9
    ((32 * m_rootDirEntryCount + m_bytesPerSector - 1)/m_bytesPerSector);
    b6da:	str	r3, [r4, #20]

  // total sectors for FAT16 or FAT32
  totalSectors = getLe16(bpb->totalSectors16);
  if (totalSectors == 0) {
    b6dc:	cbnz	r1, b6e0 <FatPartition::init(SdSpiCard*, unsigned char)+0xe4>
}
inline uint32_t getLe32(const uint8_t* src) {
  return *reinterpret_cast<const uint32_t*>(src);
    b6de:	ldr	r1, [r0, #32]
    totalSectors = getLe32(bpb->totalSectors32);
  }
  // total data sectors
  clusterCount = totalSectors - (m_dataStartSector - volumeStartSector);
    b6e0:	subs	r5, r5, r3
    b6e2:	add	r5, r1

  // divide by cluster size to get cluster count
  clusterCount >>= m_sectorsPerClusterShift;
    b6e4:	lsr.w	r2, r5, r2
  m_lastCluster = clusterCount + 1;

  // Indicate unknown number of free clusters.
  setFreeClusterCount(-1);
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
    b6e8:	movw	r3, #4084	; 0xff4
  // total data sectors
  clusterCount = totalSectors - (m_dataStartSector - volumeStartSector);

  // divide by cluster size to get cluster count
  clusterCount >>= m_sectorsPerClusterShift;
  m_lastCluster = clusterCount + 1;
    b6ec:	adds	r1, r2, #1

  // Indicate unknown number of free clusters.
  setFreeClusterCount(-1);
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
    b6ee:	cmp	r2, r3
  // total data sectors
  clusterCount = totalSectors - (m_dataStartSector - volumeStartSector);

  // divide by cluster size to get cluster count
  clusterCount >>= m_sectorsPerClusterShift;
  m_lastCluster = clusterCount + 1;
    b6f0:	str	r1, [r4, #28]

  // Indicate unknown number of free clusters.
  setFreeClusterCount(-1);
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
    b6f2:	bls.n	b710 <FatPartition::init(SdSpiCard*, unsigned char)+0x114>
    m_fatType = 12;
    if (!FAT12_SUPPORT) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if (clusterCount < 65525) {
    b6f4:	movw	r3, #65524	; 0xfff4
    b6f8:	cmp	r2, r3
    b6fa:	ittet	hi
    b6fc:	ldrhi	r3, [r0, #44]	; 0x2c
    m_fatType = 16;
  } else {
    m_rootDirStart = getLe32(bpb->fat32RootCluster);
    b6fe:	strhi	r3, [r4, #32]
    if (!FAT12_SUPPORT) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if (clusterCount < 65525) {
    m_fatType = 16;
    b700:	movls	r3, #16
  } else {
    m_rootDirStart = getLe32(bpb->fat32RootCluster);
    m_fatType = 32;
    b702:	movhi	r3, #32
    b704:	strb	r3, [r4, #7]
  }
  /** Set the offset to the second FAT for mirroring.
   * \param[in] offset Sector offset to second FAT.
   */
  void setMirrorOffset(uint32_t offset) {
    m_mirrorOffset = offset;
    b706:	str	r6, [r4, #44]	; 0x2c
    b708:	str.w	r6, [r4, #572]	; 0x23c
  }
  m_cache.setMirrorOffset(m_sectorsPerFat);
#if USE_SEPARATE_FAT_CACHE
  m_fatCache.setMirrorOffset(m_sectorsPerFat);
#endif  // USE_SEPARATE_FAT_CACHE
  return true;
    b70c:	movs	r0, #1
    b70e:	pop	{r3, r4, r5, r6, r7, pc}

  // Indicate unknown number of free clusters.
  setFreeClusterCount(-1);
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
    m_fatType = 12;
    b710:	movs	r3, #12
    b712:	strb	r3, [r4, #7]
    b714:	b.n	b62a <FatPartition::init(SdSpiCard*, unsigned char)+0x2e>
    b716:	nop

0000b718 <lfnGetChar(DirLfn_t*, unsigned char)>:
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \return The 16-bit character.
 */
static uint16_t lfnGetChar(DirLfn_t* ldir, uint8_t i) {
  if (i < 5) {
    b718:	cmp	r1, #4
    b71a:	bls.n	b736 <lfnGetChar(DirLfn_t*, unsigned char)+0x1e>
    return getLe16(ldir->unicode1 + 2*i);
  } else if (i < 11) {
    b71c:	cmp	r1, #10
    b71e:	bls.n	b72e <lfnGetChar(DirLfn_t*, unsigned char)+0x16>
    return getLe16(ldir->unicode2 + 2*i - 10);
  } else if (i < 13) {
    b720:	cmp	r1, #12
void lbaToMbrChs(uint8_t* chs, uint32_t capacityMB, uint32_t lba);
//-----------------------------------------------------------------------------
#if !defined(USE_SIMPLE_LITTLE_ENDIAN) || USE_SIMPLE_LITTLE_ENDIAN
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
    b722:	itte	ls
    b724:	addls.w	r1, r0, r1, lsl #1
    b728:	ldrhls	r0, [r1, #6]
    return getLe16(ldir->unicode3 + 2*i - 22);
  }
  return 0;
    b72a:	movhi	r0, #0
}
    b72c:	bx	lr
    b72e:	add.w	r1, r0, r1, lsl #1
    b732:	ldrh	r0, [r1, #4]
 */
static uint16_t lfnGetChar(DirLfn_t* ldir, uint8_t i) {
  if (i < 5) {
    return getLe16(ldir->unicode1 + 2*i);
  } else if (i < 11) {
    return getLe16(ldir->unicode2 + 2*i - 10);
    b734:	bx	lr
    b736:	add.w	r1, r0, r1, lsl #1
    b73a:	ldrh.w	r0, [r1, #1]
 * \param[in] i Index of character.
 * \return The 16-bit character.
 */
static uint16_t lfnGetChar(DirLfn_t* ldir, uint8_t i) {
  if (i < 5) {
    return getLe16(ldir->unicode1 + 2*i);
    b73e:	bx	lr

0000b740 <FatFile::lfnChecksum(unsigned char*)>:
#include "../common/DebugMacros.h"
#include "FatFile.h"
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
    b740:	push	{r4}
    b742:	subs	r2, r0, #1
    b744:	add.w	r4, r0, #10
  uint8_t sum = 0;
    b748:	movs	r0, #0
  for (uint8_t i = 0; i < 11; i++) {
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
    b74a:	ldrb.w	r1, [r2, #1]!
    b74e:	lsrs	r3, r0, #1
    b750:	orr.w	r0, r3, r0, lsl #7
    b754:	uxtab	r0, r1, r0
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
    b758:	cmp	r4, r2
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
    b75a:	uxtb	r0, r0
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
    b75c:	bne.n	b74a <FatFile::lfnChecksum(unsigned char*)+0xa>
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
  }
  return sum;
}
    b75e:	pop	{r4}
    b760:	bx	lr
    b762:	nop

0000b764 <FatFile::openCluster(FatFile*)>:
 fail:
  name[0] = '\0';
  return 0;
}
//------------------------------------------------------------------------------
bool FatFile::openCluster(FatFile* file) {
    b764:	push	{r3, r4, r5, lr}
  if (file->m_dirCluster == 0) {
    b766:	ldr	r3, [r1, #12]
    b768:	cbz	r3, b788 <FatFile::openCluster(FatFile*)+0x24>
    b76a:	mov	r5, r0
    b76c:	mov	r4, r1
    return openRoot(file->m_vol);
  }
  memset(this, 0, sizeof(FatFile));
    b76e:	movs	r2, #36	; 0x24
    b770:	movs	r1, #0
    b772:	bl	106cc <memset>
  m_attributes = FILE_ATTR_SUBDIR;
    b776:	movs	r3, #16
  m_flags = FILE_FLAG_READ;
    b778:	movs	r0, #1
bool FatFile::openCluster(FatFile* file) {
  if (file->m_dirCluster == 0) {
    return openRoot(file->m_vol);
  }
  memset(this, 0, sizeof(FatFile));
  m_attributes = FILE_ATTR_SUBDIR;
    b77a:	strb	r3, [r5, #0]
  m_flags = FILE_FLAG_READ;
    b77c:	strb	r0, [r5, #2]
  m_vol = file->m_vol;
    b77e:	ldr	r2, [r4, #8]
  m_firstCluster = file->m_dirCluster;
    b780:	ldr	r3, [r4, #12]
    b782:	str	r3, [r5, #32]
    return openRoot(file->m_vol);
  }
  memset(this, 0, sizeof(FatFile));
  m_attributes = FILE_ATTR_SUBDIR;
  m_flags = FILE_FLAG_READ;
  m_vol = file->m_vol;
    b784:	str	r2, [r5, #8]
  m_firstCluster = file->m_dirCluster;
  return true;
}
    b786:	pop	{r3, r4, r5, pc}
  return 0;
}
//------------------------------------------------------------------------------
bool FatFile::openCluster(FatFile* file) {
  if (file->m_dirCluster == 0) {
    return openRoot(file->m_vol);
    b788:	ldr	r1, [r1, #8]
  m_attributes = FILE_ATTR_SUBDIR;
  m_flags = FILE_FLAG_READ;
  m_vol = file->m_vol;
  m_firstCluster = file->m_dirCluster;
  return true;
}
    b78a:	ldmia.w	sp!, {r3, r4, r5, lr}
  return 0;
}
//------------------------------------------------------------------------------
bool FatFile::openCluster(FatFile* file) {
  if (file->m_dirCluster == 0) {
    return openRoot(file->m_vol);
    b78e:	b.w	aacc <FatFile::openRoot(FatVolume*)>
    b792:	nop

0000b794 <FatFile::getName(char*, unsigned int)>:
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
    lfnPutChar(ldir, i, c);
  }
}
//==============================================================================
size_t FatFile::getName(char* name, size_t size) {
    b794:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b798:	sub	sp, #52	; 0x34
  size_t n = 0;
  FatFile dirFile;
  DirLfn_t* ldir;
  if (!isOpen() || size < 13) {
    b79a:	ldrb	r3, [r0, #0]
    b79c:	movs	r4, #0
    b79e:	strb.w	r4, [sp, #12]
    b7a2:	strb.w	r4, [sp, #13]
    b7a6:	strb.w	r4, [sp, #14]
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
    lfnPutChar(ldir, i, c);
  }
}
//==============================================================================
size_t FatFile::getName(char* name, size_t size) {
    b7aa:	mov	r8, r1
  size_t n = 0;
  FatFile dirFile;
  DirLfn_t* ldir;
  if (!isOpen() || size < 13) {
    b7ac:	cbz	r3, b7b4 <FatFile::getName(char*, unsigned int)+0x20>
    b7ae:	cmp	r2, #12
    b7b0:	mov	r9, r2
    b7b2:	bhi.n	b7c0 <FatFile::getName(char*, unsigned int)+0x2c>
  }
  // Fall into fail.
  DBG_FAIL_MACRO;

 fail:
  name[0] = '\0';
    b7b4:	movs	r0, #0
    b7b6:	strb.w	r0, [r8]
  return 0;
}
    b7ba:	add	sp, #52	; 0x34
    b7bc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  DirLfn_t* ldir;
  if (!isOpen() || size < 13) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!isLFN()) {
    b7c0:	ldrb	r3, [r0, #3]
    b7c2:	mov	r7, r0
    b7c4:	cmp	r3, #0
    b7c6:	beq.n	b86e <FatFile::getName(char*, unsigned int)+0xda>
    return getSFN(name);
  }
  if (!dirFile.openCluster(this)) {
    b7c8:	add	r0, sp, #12
    b7ca:	mov	r1, r7
    b7cc:	bl	b764 <FatFile::openCluster(FatFile*)>
    b7d0:	cmp	r0, #0
    b7d2:	beq.n	b7b4 <FatFile::getName(char*, unsigned int)+0x20>
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    b7d4:	ldrb	r3, [r7, #3]
    b7d6:	cmp	r3, #0
    b7d8:	beq.n	b7b4 <FatFile::getName(char*, unsigned int)+0x20>
    if (!dirFile.seekSet(32UL*(m_dirIndex - order))) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    ldir = reinterpret_cast<DirLfn_t*>(dirFile.readDirCache());
    b7da:	str	r4, [sp, #4]
  }
  if (!dirFile.openCluster(this)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    b7dc:	movs	r6, #1
  uint8_t i;
  size_t k = 13*((ldir->order & 0X1F) - 1);
  // https://github.com/greiman/SdFat-beta/issues/67#issuecomment-774508283
  for (i = 0; i < 13; i++) {
    uint16_t c = lfnGetChar(ldir, i);
    if (c == 0 || k >= (n - 1)) {
    b7de:	add.w	r5, r9, #4294967295
  if (!dirFile.openCluster(this)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    if (!dirFile.seekSet(32UL*(m_dirIndex - order))) {
    b7e2:	ldrh	r1, [r7, #4]
    b7e4:	subs	r1, r1, r6
    b7e6:	lsls	r1, r1, #5
    b7e8:	add	r0, sp, #12
    b7ea:	bl	af0c <FatFile::seekSet(unsigned long)>
    b7ee:	cmp	r0, #0
    b7f0:	beq.n	b7b4 <FatFile::getName(char*, unsigned int)+0x20>
      DBG_FAIL_MACRO;
      goto fail;
    }
    ldir = reinterpret_cast<DirLfn_t*>(dirFile.readDirCache());
    b7f2:	movs	r1, #0
    b7f4:	add	r0, sp, #12
    b7f6:	bl	ac9c <FatFile::readDirCache(bool)>
    if (!ldir) {
    b7fa:	mov	fp, r0
    b7fc:	cmp	r0, #0
    b7fe:	beq.n	b7b4 <FatFile::getName(char*, unsigned int)+0x20>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME) {
    b800:	ldrb	r3, [r0, #11]
    b802:	cmp	r3, #15
    b804:	bne.n	b7b4 <FatFile::getName(char*, unsigned int)+0x20>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (order != (ldir->order & 0X1F)) {
    b806:	ldrb	r3, [r0, #0]
    b808:	and.w	r3, r3, #31
    b80c:	cmp	r6, r3
    b80e:	bne.n	b7b4 <FatFile::getName(char*, unsigned int)+0x20>
  return 0;
}
//------------------------------------------------------------------------------
static size_t lfnGetName(DirLfn_t* ldir, char* name, size_t n) {
  uint8_t i;
  size_t k = 13*((ldir->order & 0X1F) - 1);
    b810:	subs	r3, r6, #1
    b812:	add.w	r4, r3, r3, lsl #1
    b816:	add.w	r4, r3, r4, lsl #2
    b81a:	mov	r3, r4
    b81c:	add.w	sl, r8, r4
    b820:	add.w	r2, r4, #13
  // https://github.com/greiman/SdFat-beta/issues/67#issuecomment-774508283
  for (i = 0; i < 13; i++) {
    uint16_t c = lfnGetChar(ldir, i);
    b824:	subs	r1, r3, r4
    b826:	uxtb	r1, r1
    b828:	mov	r0, fp
    b82a:	bl	b718 <lfnGetChar(DirLfn_t*, unsigned char)>
    if (c == 0 || k >= (n - 1)) {
    b82e:	cbz	r0, b878 <FatFile::getName(char*, unsigned int)+0xe4>
    b830:	cmp	r5, r3
    b832:	bls.n	b878 <FatFile::getName(char*, unsigned int)+0xe4>
     //       k = n - 1;   <<-------removed
      break;
    }
    name[k++] = c >= 0X7F ? '?' : c;
    b834:	cmp	r0, #126	; 0x7e
    b836:	add.w	r3, r3, #1
    b83a:	ite	ls
    b83c:	uxtbls	r0, r0
    b83e:	movhi	r0, #63	; 0x3f
//------------------------------------------------------------------------------
static size_t lfnGetName(DirLfn_t* ldir, char* name, size_t n) {
  uint8_t i;
  size_t k = 13*((ldir->order & 0X1F) - 1);
  // https://github.com/greiman/SdFat-beta/issues/67#issuecomment-774508283
  for (i = 0; i < 13; i++) {
    b840:	cmp	r2, r3
    uint16_t c = lfnGetChar(ldir, i);
    if (c == 0 || k >= (n - 1)) {
     //       k = n - 1;   <<-------removed
      break;
    }
    name[k++] = c >= 0X7F ? '?' : c;
    b842:	strb.w	r0, [sl], #1
//------------------------------------------------------------------------------
static size_t lfnGetName(DirLfn_t* ldir, char* name, size_t n) {
  uint8_t i;
  size_t k = 13*((ldir->order & 0X1F) - 1);
  // https://github.com/greiman/SdFat-beta/issues/67#issuecomment-774508283
  for (i = 0; i < 13; i++) {
    b846:	bne.n	b824 <FatFile::getName(char*, unsigned int)+0x90>
    }
    name[k++] = c >= 0X7F ? '?' : c;
  }
  // Terminate with zero byte.
  if (k >= n) {  // <<----------added
    k = n - 1;   // <<--------- added
    b848:	cmp	r9, r2
    b84a:	it	ls
    b84c:	movls	r2, r5
  }             // <<---------added
  name[k] = '\0';
    b84e:	ldrb.w	r3, [sp, #4]
    b852:	strb.w	r3, [r8, r2]
    if (order != (ldir->order & 0X1F)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    n = lfnGetName(ldir, name, size);
    if (n == 0) {
    b856:	cmp	r2, #0
    b858:	beq.n	b7b4 <FatFile::getName(char*, unsigned int)+0x20>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (ldir->order & FAT_ORDER_LAST_LONG_ENTRY) {
    b85a:	ldrb.w	r3, [fp]
    b85e:	lsls	r3, r3, #25
    b860:	bmi.n	b87c <FatFile::getName(char*, unsigned int)+0xe8>
  }
  if (!dirFile.openCluster(this)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    b862:	adds	r6, #1
    b864:	ldrb	r3, [r7, #3]
    b866:	uxtb	r6, r6
    b868:	cmp	r3, r6
    b86a:	bcs.n	b7e2 <FatFile::getName(char*, unsigned int)+0x4e>
    b86c:	b.n	b7b4 <FatFile::getName(char*, unsigned int)+0x20>
  if (!isOpen() || size < 13) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!isLFN()) {
    return getSFN(name);
    b86e:	bl	c038 <FatFile::getSFN(char*)>
  DBG_FAIL_MACRO;

 fail:
  name[0] = '\0';
  return 0;
}
    b872:	add	sp, #52	; 0x34
    b874:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  uint8_t i;
  size_t k = 13*((ldir->order & 0X1F) - 1);
  // https://github.com/greiman/SdFat-beta/issues/67#issuecomment-774508283
  for (i = 0; i < 13; i++) {
    uint16_t c = lfnGetChar(ldir, i);
    if (c == 0 || k >= (n - 1)) {
    b878:	mov	r2, r3
    b87a:	b.n	b848 <FatFile::getName(char*, unsigned int)+0xb4>
    b87c:	mov	r0, r2
    b87e:	b.n	b7ba <FatFile::getName(char*, unsigned int)+0x26>

0000b880 <FatFile::parsePathName(char const*, fname_t*, char const**)>:
  m_firstCluster = file->m_dirCluster;
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::parsePathName(const char* path,
                            fname_t* fname, const char** ptr) {
    b880:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int len = 0;
  int si;
  int dot;

  // Skip leading spaces.
  while (*path == ' ') {
    b884:	ldrb	r3, [r0, #0]
    b886:	cmp	r3, #32
    b888:	bne.n	b892 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x12>
    b88a:	ldrb.w	r3, [r0, #1]!
    b88e:	cmp	r3, #32
    b890:	beq.n	b88a <FatFile::parsePathName(char const*, fname_t*, char const**)+0xa>
    path++;
  }
  fname->lfn = path;
    b892:	str	r0, [r1, #8]

  for (len = 0; ; len++) {
    c = path[len];
    b894:	ldrb	r3, [r0, #0]
    if (c == 0 || isDirSeparator(c)) {
    b896:	cmp	r3, #0
    b898:	beq.w	baaa <FatFile::parsePathName(char const*, fname_t*, char const**)+0x22a>
    b89c:	cmp	r3, #47	; 0x2f
    b89e:	beq.n	b900 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x80>
  name[k] = '\0';
  return k;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(uint8_t c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
    b8a0:	cmp	r3, #92	; 0x5c
    b8a2:	beq.n	b8ea <FatFile::parsePathName(char const*, fname_t*, char const**)+0x6a>
    b8a4:	sub.w	r4, r3, #34	; 0x22
    b8a8:	uxtb	r4, r4
    b8aa:	cmp	r4, #29
    b8ac:	bls.n	b8f0 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x70>
    b8ae:	ldr.w	lr, [pc, #536]	; bac8 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x248>
    b8b2:	adds	r6, r0, #1
  while (*path == ' ') {
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    b8b4:	movs	r4, #0
  return k;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(uint8_t c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
      c == ':' || c == '<' || c == '>' || c == '?' || c == '|') {
    b8b6:	cmp	r3, #124	; 0x7c
  for (len = 0; ; len++) {
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
    b8b8:	sub.w	r5, r3, #32
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    c = path[len];
    b8bc:	mov	r7, r6
  return k;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(uint8_t c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
      c == ':' || c == '<' || c == '>' || c == '?' || c == '|') {
    b8be:	beq.n	b8ea <FatFile::parsePathName(char const*, fname_t*, char const**)+0x6a>
  for (len = 0; ; len++) {
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
    b8c0:	cmp	r5, #94	; 0x5e
    b8c2:	bhi.n	b8ea <FatFile::parsePathName(char const*, fname_t*, char const**)+0x6a>
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    c = path[len];
    b8c4:	ldrb.w	r3, [r6], #1
  name[k] = '\0';
  return k;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(uint8_t c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
    b8c8:	sub.w	r5, r3, #34	; 0x22
    b8cc:	uxtb	r5, r5
  while (*path == ' ') {
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    b8ce:	adds	r4, #1
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
    b8d0:	cmp	r3, #0
    b8d2:	beq.w	ba7c <FatFile::parsePathName(char const*, fname_t*, char const**)+0x1fc>
    b8d6:	cmp	r3, #47	; 0x2f
    b8d8:	beq.n	b902 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x82>
  name[k] = '\0';
  return k;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(uint8_t c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
    b8da:	cmp	r3, #92	; 0x5c
    b8dc:	lsr.w	r7, lr, r5
    b8e0:	beq.n	b8ea <FatFile::parsePathName(char const*, fname_t*, char const**)+0x6a>
    b8e2:	cmp	r5, #29
    b8e4:	bhi.n	b8b6 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x36>
    b8e6:	lsls	r7, r7, #31
    b8e8:	bpl.n	b8b6 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x36>
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;

 fail:
  return false;
    b8ea:	movs	r0, #0
    b8ec:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  name[k] = '\0';
  return k;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(uint8_t c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
    b8f0:	ldr	r5, [pc, #468]	; (bac8 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x248>)
    b8f2:	lsr.w	r4, r5, r4
    b8f6:	lsls	r4, r4, #31
    b8f8:	bpl.n	b8ae <FatFile::parsePathName(char const*, fname_t*, char const**)+0x2e>
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;

 fail:
  return false;
    b8fa:	movs	r0, #0
    b8fc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  while (*path == ' ') {
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    b900:	movs	r4, #0
    b902:	adds	r7, r0, r4
    b904:	mov	r6, r7
    b906:	mov	r5, r4
    b908:	movs	r3, #47	; 0x2f
    b90a:	b.n	b912 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x92>
    b90c:	ldrb.w	r3, [r6, #1]!
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
    b910:	adds	r5, #1
    b912:	cmp	r3, #32
    b914:	beq.n	b90c <FatFile::parsePathName(char const*, fname_t*, char const**)+0x8c>
    b916:	cmp	r3, #47	; 0x2f
    b918:	beq.n	b90c <FatFile::parsePathName(char const*, fname_t*, char const**)+0x8c>
  *ptr = &path[end];
    b91a:	add	r5, r0
    b91c:	str	r5, [r2, #0]

  // Back over spaces and dots.
  while (len) {
    b91e:	cbz	r4, b934 <FatFile::parsePathName(char const*, fname_t*, char const**)+0xb4>
    b920:	mov	r2, r7
    c = path[len - 1];
    b922:	ldrb.w	r3, [r2, #-1]!
    if (c != '.' && c != ' ') {
    b926:	cmp	r3, #46	; 0x2e
    b928:	beq.n	b930 <FatFile::parsePathName(char const*, fname_t*, char const**)+0xb0>
    b92a:	cmp	r3, #32
    b92c:	bne.w	ba82 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x202>
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
  *ptr = &path[end];

  // Back over spaces and dots.
  while (len) {
    b930:	subs	r4, #1
    b932:	bne.n	b922 <FatFile::parsePathName(char const*, fname_t*, char const**)+0xa2>
    b934:	mov.w	r5, #4294967295
    b938:	mov	r3, r4
  // Max length of LFN is 255.
  if (len > 255) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  fname->len = len;
    b93a:	str	r3, [r1, #4]
    b93c:	add.w	r6, r1, #23
    b940:	add.w	r3, r1, #12
  // Blank file short name.
  for (uint8_t k = 0; k < 11; k++) {
    fname->sfn[k] = ' ';
    b944:	movs	r2, #32
    b946:	strb.w	r2, [r3, #1]!
    DBG_FAIL_MACRO;
    goto fail;
  }
  fname->len = len;
  // Blank file short name.
  for (uint8_t k = 0; k < 11; k++) {
    b94a:	cmp	r3, r6
    b94c:	bne.n	b946 <FatFile::parsePathName(char const*, fname_t*, char const**)+0xc6>
    b94e:	subs	r6, r0, #1
    b950:	movs	r2, #0
    b952:	b.n	b956 <FatFile::parsePathName(char const*, fname_t*, char const**)+0xd6>
    fname->sfn[k] = ' ';
  }
  // skip leading spaces and dots.
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
    b954:	adds	r2, #1
    b956:	ldrb.w	r3, [r6, #1]!
    b95a:	cmp	r3, #46	; 0x2e
    b95c:	beq.n	b954 <FatFile::parsePathName(char const*, fname_t*, char const**)+0xd4>
    b95e:	cmp	r3, #32
    b960:	beq.n	b954 <FatFile::parsePathName(char const*, fname_t*, char const**)+0xd4>
  // Not 8.3 if leading dot or space.
  is83 = !si;
    b962:	clz	ip, r2

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
    b966:	adds	r6, r5, #1
    fname->sfn[k] = ' ';
  }
  // skip leading spaces and dots.
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
  // Not 8.3 if leading dot or space.
  is83 = !si;
    b968:	mov.w	ip, ip, lsr #5

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
    b96c:	beq.n	b988 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x108>
    b96e:	ldrb	r7, [r0, r5]
    b970:	cmp	r7, #46	; 0x2e
    b972:	add.w	r6, r0, r5
    b976:	bne.n	b982 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x102>
    b978:	b.n	b988 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x108>
    b97a:	ldrb.w	r7, [r6, #-1]!
    b97e:	cmp	r7, #46	; 0x2e
    b980:	beq.n	b988 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x108>
    b982:	adds.w	r5, r5, #4294967295
    b986:	bcs.n	b97a <FatFile::parsePathName(char const*, fname_t*, char const**)+0xfa>
  for (; si < len; si++) {
    b988:	cmp	r2, r4
    b98a:	mov.w	r9, #0
    b98e:	bge.w	bab4 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x234>
    b992:	mov	r6, r9
    b994:	mov	sl, r9
    b996:	movs	r7, #7
    b998:	mov.w	r8, #8
    b99c:	b.n	b9ea <FatFile::parsePathName(char const*, fname_t*, char const**)+0x16a>
    c = path[si];
    if (c == ' ' || (c == '.' && dot != si)) {
    b99e:	cmp	r3, #46	; 0x2e
    b9a0:	beq.n	ba32 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x1b2>
  /** Check for a legal 8.3 character.
   * \param[in] c Character to be checked.
   * \return true for a legal 8.3 character.
   */
  static bool legal83Char(uint8_t c) {
    if (c == '"' || c == '|') {
    b9a2:	cmp	r3, #34	; 0x22
    b9a4:	beq.n	b9be <FatFile::parsePathName(char const*, fname_t*, char const**)+0x13e>
    b9a6:	cmp	r3, #124	; 0x7c
    b9a8:	beq.n	b9be <FatFile::parsePathName(char const*, fname_t*, char const**)+0x13e>
      return false;
    }
    // *+,./
    if (0X2A <= c && c <= 0X2F && c != 0X2D) {
    b9aa:	sub.w	lr, r3, #42	; 0x2a
    b9ae:	cmp.w	lr, #5
    b9b2:	bls.n	ba46 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x1c6>
      return false;
    }
    // :;<=>?
    if (0X3A <= c && c <= 0X3F) {
    b9b4:	sub.w	lr, r3, #58	; 0x3a
    b9b8:	cmp.w	lr, #5
    b9bc:	bhi.n	ba70 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x1f0>
      is83 = false;
      continue;
    }
    if (!legal83Char(c) && si != dot) {
    b9be:	cmp	r5, r2
    b9c0:	beq.n	ba36 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x1b6>
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
    b9c2:	cmp	r7, r6
    b9c4:	bcc.n	ba1a <FatFile::parsePathName(char const*, fname_t*, char const**)+0x19a>
    if (c == ' ' || (c == '.' && dot != si)) {
      is83 = false;
      continue;
    }
    if (!legal83Char(c) && si != dot) {
      is83 = false;
    b9c6:	mov.w	ip, #0
      c = '_';
    b9ca:	movs	r3, #95	; 0x5f
        c += 'A' - 'a';
        lc |= bit;
      } else if ('A' <= c && c <= 'Z') {
        uc |= bit;
      }
      fname->sfn[i++] = c;
    b9cc:	add.w	lr, r6, #1
    b9d0:	add.w	fp, r1, r6
    b9d4:	uxtb.w	r6, lr
      if (i < 7) {
    b9d8:	cmp	r6, #6
        c += 'A' - 'a';
        lc |= bit;
      } else if ('A' <= c && c <= 'Z') {
        uc |= bit;
      }
      fname->sfn[i++] = c;
    b9da:	strb.w	r3, [fp, #13]
      if (i < 7) {
    b9de:	bhi.n	b9e2 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x162>
        fname->seqPos = i;
    b9e0:	strb	r6, [r1, #12]
  // Not 8.3 if leading dot or space.
  is83 = !si;

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
  for (; si < len; si++) {
    b9e2:	adds	r2, #1
    b9e4:	cmp	r2, r4
    b9e6:	bge.n	b9f8 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x178>
    b9e8:	ldrb	r3, [r0, r2]
    c = path[si];
    if (c == ' ' || (c == '.' && dot != si)) {
    b9ea:	cmp	r3, #32
    b9ec:	bne.n	b99e <FatFile::parsePathName(char const*, fname_t*, char const**)+0x11e>
  // Not 8.3 if leading dot or space.
  is83 = !si;

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
  for (; si < len; si++) {
    b9ee:	adds	r2, #1
    b9f0:	cmp	r2, r4
    c = path[si];
    if (c == ' ' || (c == '.' && dot != si)) {
      is83 = false;
    b9f2:	mov.w	ip, #0
  // Not 8.3 if leading dot or space.
  is83 = !si;

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
  for (; si < len; si++) {
    b9f6:	blt.n	b9e8 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x168>
      if (i < 7) {
        fname->seqPos = i;
      }
    }
  }
  if (fname->sfn[0] == ' ') {
    b9f8:	ldrb	r3, [r1, #13]
    b9fa:	cmp	r3, #32
    b9fc:	beq.w	b8ea <FatFile::parsePathName(char const*, fname_t*, char const**)+0x6a>
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (is83) {
    ba00:	cmp.w	ip, #0
    ba04:	beq.n	ba96 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x216>
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
    ba06:	tst.w	sl, r9
    ba0a:	it	ne
    ba0c:	movne.w	r9, #2
    ba10:	strb.w	r9, [r1]
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
    ba14:	movs	r0, #1
    ba16:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (!legal83Char(c) && si != dot) {
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
      if (in == 10) {
    ba1a:	cmp	r7, #10
    ba1c:	beq.n	ba8e <FatFile::parsePathName(char const*, fname_t*, char const**)+0x20e>
      }
      if (si != dot) {
        is83 = false;
      }
      // Break if no dot and base-name is longer than eight characters.
      if (si > dot) {
    ba1e:	cmp	r5, r2
    ba20:	blt.n	ba8e <FatFile::parsePathName(char const*, fname_t*, char const**)+0x20e>
    ba22:	mov	r2, r5
        break;
      }
      si = dot;
      in = 10;  // Max index for full 8.3 name.
    ba24:	movs	r7, #10
      i = 8;    // Place for extension.
    ba26:	movs	r6, #8
      bit = FAT_CASE_LC_EXT;  // bit for extension.
    ba28:	mov.w	r8, #16
        // Done - extension longer than three characters.
        is83 = false;
        break;
      }
      if (si != dot) {
        is83 = false;
    ba2c:	mov.w	ip, #0
    ba30:	b.n	b9e2 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x162>

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
  for (; si < len; si++) {
    c = path[si];
    if (c == ' ' || (c == '.' && dot != si)) {
    ba32:	cmp	r5, r2
    ba34:	bne.n	b9ee <FatFile::parsePathName(char const*, fname_t*, char const**)+0x16e>
    if (!legal83Char(c) && si != dot) {
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
      if (in == 10) {
    ba36:	cmp	r7, #10
    ba38:	beq.n	ba8e <FatFile::parsePathName(char const*, fname_t*, char const**)+0x20e>
    ba3a:	mov	r2, r5
      // Break if no dot and base-name is longer than eight characters.
      if (si > dot) {
        break;
      }
      si = dot;
      in = 10;  // Max index for full 8.3 name.
    ba3c:	movs	r7, #10
      i = 8;    // Place for extension.
    ba3e:	movs	r6, #8
      bit = FAT_CASE_LC_EXT;  // bit for extension.
    ba40:	mov.w	r8, #16
    ba44:	b.n	b9e2 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x162>
  static bool legal83Char(uint8_t c) {
    if (c == '"' || c == '|') {
      return false;
    }
    // *+,./
    if (0X2A <= c && c <= 0X2F && c != 0X2D) {
    ba46:	cmp	r3, #45	; 0x2d
    ba48:	bne.n	b9be <FatFile::parsePathName(char const*, fname_t*, char const**)+0x13e>
    c = path[si];
    if (c == ' ' || (c == '.' && dot != si)) {
      is83 = false;
      continue;
    }
    if (!legal83Char(c) && si != dot) {
    ba4a:	sub.w	lr, r3, #33	; 0x21
    ba4e:	cmp.w	lr, #93	; 0x5d
    ba52:	bhi.n	b9be <FatFile::parsePathName(char const*, fname_t*, char const**)+0x13e>
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
    ba54:	cmp	r5, r2
    ba56:	beq.n	ba36 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x1b6>
    ba58:	cmp	r7, r6
    ba5a:	bcc.n	ba1a <FatFile::parsePathName(char const*, fname_t*, char const**)+0x19a>
      si = dot;
      in = 10;  // Max index for full 8.3 name.
      i = 8;    // Place for extension.
      bit = FAT_CASE_LC_EXT;  // bit for extension.
    } else {
      if ('a' <= c && c <= 'z') {
    ba5c:	sub.w	lr, r3, #97	; 0x61
    ba60:	cmp.w	lr, #25
    ba64:	bhi.n	bab8 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x238>
        c += 'A' - 'a';
    ba66:	subs	r3, #32
    ba68:	uxtb	r3, r3
        lc |= bit;
    ba6a:	orr.w	r9, r8, r9
    ba6e:	b.n	b9cc <FatFile::parsePathName(char const*, fname_t*, char const**)+0x14c>
    // :;<=>?
    if (0X3A <= c && c <= 0X3F) {
      return false;
    }
    // [\]
    if (0X5B <= c && c <= 0X5D) {
    ba70:	sub.w	lr, r3, #91	; 0x5b
    ba74:	cmp.w	lr, #2
    ba78:	bls.n	b9be <FatFile::parsePathName(char const*, fname_t*, char const**)+0x13e>
    ba7a:	b.n	ba4a <FatFile::parsePathName(char const*, fname_t*, char const**)+0x1ca>
      goto fail;
    }
  }
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
  *ptr = &path[end];
    ba7c:	str	r7, [r2, #0]
    ba7e:	adds	r7, r0, r4
    ba80:	b.n	b920 <FatFile::parsePathName(char const*, fname_t*, char const**)+0xa0>
      break;
    }
    len--;
  }
  // Max length of LFN is 255.
  if (len > 255) {
    ba82:	cmp	r4, #255	; 0xff
    ba84:	bgt.w	b8ea <FatFile::parsePathName(char const*, fname_t*, char const**)+0x6a>
    ba88:	subs	r5, r4, #1
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
  *ptr = &path[end];

  // Back over spaces and dots.
  while (len) {
    c = path[len - 1];
    ba8a:	mov	r3, r4
    ba8c:	b.n	b93a <FatFile::parsePathName(char const*, fname_t*, char const**)+0xba>
      if (i < 7) {
        fname->seqPos = i;
      }
    }
  }
  if (fname->sfn[0] == ' ') {
    ba8e:	ldrb	r3, [r1, #13]
    ba90:	cmp	r3, #32
    ba92:	beq.w	b8ea <FatFile::parsePathName(char const*, fname_t*, char const**)+0x6a>

  if (is83) {
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
    ba96:	ldrb	r3, [r1, #12]
    ba98:	add	r3, r1
  }

  if (is83) {
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    ba9a:	movs	r0, #1
    fname->sfn[fname->seqPos] = '~';
    ba9c:	movs	r4, #126	; 0x7e
    fname->sfn[fname->seqPos + 1] = '1';
    ba9e:	movs	r2, #49	; 0x31
  }

  if (is83) {
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    baa0:	strb	r0, [r1, #0]
    fname->sfn[fname->seqPos] = '~';
    baa2:	strb	r4, [r3, #13]
    fname->sfn[fname->seqPos + 1] = '1';
    baa4:	strb	r2, [r3, #14]
    baa6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      goto fail;
    }
  }
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
  *ptr = &path[end];
    baaa:	str	r0, [r2, #0]
    baac:	mov	r4, r3
    baae:	mov.w	r5, #4294967295
    bab2:	b.n	b93a <FatFile::parsePathName(char const*, fname_t*, char const**)+0xba>
  // Not 8.3 if leading dot or space.
  is83 = !si;

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
  for (; si < len; si++) {
    bab4:	mov	sl, r9
    bab6:	b.n	b9f8 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x178>
      bit = FAT_CASE_LC_EXT;  // bit for extension.
    } else {
      if ('a' <= c && c <= 'z') {
        c += 'A' - 'a';
        lc |= bit;
      } else if ('A' <= c && c <= 'Z') {
    bab8:	sub.w	lr, r3, #65	; 0x41
    babc:	cmp.w	lr, #25
        uc |= bit;
    bac0:	it	ls
    bac2:	orrls.w	sl, r8, sl
    bac6:	b.n	b9cc <FatFile::parsePathName(char const*, fname_t*, char const**)+0x14c>
    bac8:	.word	0x35000101

0000bacc <FatFile::remove()>:

 fail:
  return 0;
}
//------------------------------------------------------------------------------
bool FatFile::remove() {
    bacc:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  FatFile dirFile;
  DirFat_t* dir;
  DirLfn_t* ldir;

  // Cant' remove not open for write.
  if (!isWritable()) {
    bad0:	ldrb	r2, [r0, #2]

 fail:
  return 0;
}
//------------------------------------------------------------------------------
bool FatFile::remove() {
    bad2:	sub	sp, #40	; 0x28
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() {}
    bad4:	movs	r3, #0
  FatFile dirFile;
  DirFat_t* dir;
  DirLfn_t* ldir;

  // Cant' remove not open for write.
  if (!isWritable()) {
    bad6:	lsls	r2, r2, #30
    bad8:	strb.w	r3, [sp, #4]
    badc:	strb.w	r3, [sp, #5]
    bae0:	strb.w	r3, [sp, #6]
    bae4:	bpl.n	bb2c <FatFile::remove()+0x60>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Free any clusters.
  if (m_firstCluster && !m_vol->freeChain(m_firstCluster)) {
    bae6:	ldr	r1, [r0, #32]
    bae8:	mov	r5, r0
    baea:	cbnz	r1, bb36 <FatFile::remove()+0x6a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Cache directory entry.
  dir = cacheDirEntry(FsCache::CACHE_FOR_WRITE);
    baec:	movs	r1, #1
    baee:	mov	r0, r5
    baf0:	bl	a718 <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    baf4:	cbz	r0, bb2c <FatFile::remove()+0x60>
    baf6:	subs	r1, r0, #1
    baf8:	add.w	r7, r0, #10
#include "FatFile.h"
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
    bafc:	movs	r4, #0
  for (uint8_t i = 0; i < 11; i++) {
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
    bafe:	lsrs	r2, r4, #1
    bb00:	ldrb.w	r6, [r1, #1]!
    bb04:	orr.w	r3, r2, r4, lsl #7
    bb08:	uxtab	r3, r6, r3
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
    bb0c:	cmp	r7, r1
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
    bb0e:	uxtb	r4, r3
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
    bb10:	bne.n	bafe <FatFile::remove()+0x32>
    goto fail;
  }
  checksum = lfnChecksum(dir->name);

  // Mark entry deleted.
  dir->name[0] = FAT_NAME_DELETED;
    bb12:	mov.w	r8, #229	; 0xe5
    bb16:	strb.w	r8, [r0]
  // Set this file closed.
  m_attributes = FILE_ATTR_CLOSED;
  m_flags = 0;

  // Write entry to device.
  if (!m_vol->cacheSync()) {
    bb1a:	ldr	r6, [r5, #8]

  // Mark entry deleted.
  dir->name[0] = FAT_NAME_DELETED;

  // Set this file closed.
  m_attributes = FILE_ATTR_CLOSED;
    bb1c:	movs	r3, #0
  cache_t* cacheFetchFat(uint32_t sector, uint8_t options) {
    options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    return reinterpret_cast<cache_t*>(m_fatCache.get(sector, options));
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    bb1e:	add.w	r0, r6, #36	; 0x24
    bb22:	strb	r3, [r5, #0]
  m_flags = 0;
    bb24:	strb	r3, [r5, #2]
    bb26:	bl	8d90 <FsCache::sync()>
    bb2a:	cbnz	r0, bb42 <FatFile::remove()+0x76>
  }
  // Fall into fail.
  DBG_FAIL_MACRO;

 fail:
  return false;
    bb2c:	movs	r6, #0
}
    bb2e:	mov	r0, r6
    bb30:	add	sp, #40	; 0x28
    bb32:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (!isWritable()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Free any clusters.
  if (m_firstCluster && !m_vol->freeChain(m_firstCluster)) {
    bb36:	ldr	r0, [r0, #8]
    bb38:	bl	b510 <FatPartition::freeChain(unsigned long)>
    bb3c:	cmp	r0, #0
    bb3e:	bne.n	baec <FatFile::remove()+0x20>
    bb40:	b.n	bb2c <FatFile::remove()+0x60>
    bb42:	add.w	r0, r6, #564	; 0x234
    bb46:	bl	8d90 <FsCache::sync()>
    bb4a:	cmp	r0, #0
    bb4c:	beq.n	bb2c <FatFile::remove()+0x60>
  }
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
  }
  bool syncDevice() {
    return m_blockDev->syncDevice();
    bb4e:	ldr	r0, [r6, #0]
    bb50:	bl	c4e8 <SdSpiCard::syncDevice()>
  cache_t* cacheFetchFat(uint32_t sector, uint8_t options) {
    options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    return reinterpret_cast<cache_t*>(m_fatCache.get(sector, options));
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    bb54:	mov	r6, r0
    bb56:	cmp	r0, #0
    bb58:	beq.n	bb2c <FatFile::remove()+0x60>
  // Write entry to device.
  if (!m_vol->cacheSync()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!isLFN()) {
    bb5a:	ldrb	r3, [r5, #3]
    bb5c:	cmp	r3, #0
    bb5e:	beq.n	bb2e <FatFile::remove()+0x62>
    // Done, no LFN entries.
    return true;
  }
  if (!dirFile.openCluster(this)) {
    bb60:	add	r0, sp, #4
    bb62:	mov	r1, r5
    bb64:	bl	b764 <FatFile::openCluster(FatFile*)>
    bb68:	cmp	r0, #0
    bb6a:	beq.n	bb2c <FatFile::remove()+0x60>
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    bb6c:	ldrb	r3, [r5, #3]
    bb6e:	cmp	r3, #0
    bb70:	beq.n	bb2c <FatFile::remove()+0x60>
    bb72:	movs	r7, #1
    bb74:	b.n	bbb6 <FatFile::remove()+0xea>
    if (!dirFile.seekSet(32UL*(m_dirIndex - order))) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    ldir = reinterpret_cast<DirLfn_t*>(dirFile.readDirCache());
    bb76:	add	r0, sp, #4
    bb78:	bl	ac9c <FatFile::readDirCache(bool)>
  }
  if (!dirFile.openCluster(this)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    bb7c:	adds	r3, r7, #1
    if (!dirFile.seekSet(32UL*(m_dirIndex - order))) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    ldir = reinterpret_cast<DirLfn_t*>(dirFile.readDirCache());
    if (!ldir) {
    bb7e:	cmp	r0, #0
    bb80:	beq.n	bb2c <FatFile::remove()+0x60>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME ||
    bb82:	ldrb	r2, [r0, #11]
    bb84:	cmp	r2, #15
    bb86:	bne.n	bb2c <FatFile::remove()+0x60>
        order != (ldir->order & 0X1F) ||
    bb88:	ldrb	r2, [r0, #0]
    ldir = reinterpret_cast<DirLfn_t*>(dirFile.readDirCache());
    if (!ldir) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME ||
    bb8a:	and.w	r1, r2, #31
    bb8e:	cmp	r7, r1
  }
  if (!dirFile.openCluster(this)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    bb90:	uxtb	r7, r3
    ldir = reinterpret_cast<DirLfn_t*>(dirFile.readDirCache());
    if (!ldir) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME ||
    bb92:	bne.n	bb2c <FatFile::remove()+0x60>
        order != (ldir->order & 0X1F) ||
    bb94:	ldrb	r3, [r0, #13]
    bb96:	cmp	r3, r4
    bb98:	bne.n	bb2c <FatFile::remove()+0x60>
        checksum != ldir->checksum) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    last = ldir->order & FAT_ORDER_LAST_LONG_ENTRY;
    ldir->order = FAT_NAME_DELETED;
    bb9a:	strb.w	r8, [r0]
    m_vol->cacheDirty();
    bb9e:	ldr	r1, [r5, #8]
    invalidate();
    return m_buffer;
  }
  /** Set current sector dirty. */
  void dirty() {
    m_status |= CACHE_STATUS_DIRTY;
    bba0:	ldrb.w	r3, [r1, #36]	; 0x24
    bba4:	orr.w	r3, r3, #1
    bba8:	strb.w	r3, [r1, #36]	; 0x24
    if (last) {
    bbac:	lsls	r3, r2, #25
    bbae:	bmi.n	bbca <FatFile::remove()+0xfe>
  }
  if (!dirFile.openCluster(this)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    bbb0:	ldrb	r3, [r5, #3]
    bbb2:	cmp	r3, r7
    bbb4:	bcc.n	bb2c <FatFile::remove()+0x60>
    if (!dirFile.seekSet(32UL*(m_dirIndex - order))) {
    bbb6:	ldrh	r1, [r5, #4]
    bbb8:	subs	r1, r1, r7
    bbba:	lsls	r1, r1, #5
    bbbc:	add	r0, sp, #4
    bbbe:	bl	af0c <FatFile::seekSet(unsigned long)>
      DBG_FAIL_MACRO;
      goto fail;
    }
    ldir = reinterpret_cast<DirLfn_t*>(dirFile.readDirCache());
    bbc2:	movs	r1, #0
  if (!dirFile.openCluster(this)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    if (!dirFile.seekSet(32UL*(m_dirIndex - order))) {
    bbc4:	cmp	r0, #0
    bbc6:	bne.n	bb76 <FatFile::remove()+0xaa>
    bbc8:	b.n	bb2c <FatFile::remove()+0x60>
    }
    last = ldir->order & FAT_ORDER_LAST_LONG_ENTRY;
    ldir->order = FAT_NAME_DELETED;
    m_vol->cacheDirty();
    if (last) {
      if (!m_vol->cacheSync()) {
    bbca:	ldr	r4, [r5, #8]
    bbcc:	add.w	r0, r4, #36	; 0x24
    bbd0:	bl	8d90 <FsCache::sync()>
    bbd4:	cmp	r0, #0
    bbd6:	beq.n	bb2c <FatFile::remove()+0x60>
    bbd8:	add.w	r0, r4, #564	; 0x234
    bbdc:	bl	8d90 <FsCache::sync()>
    bbe0:	cmp	r0, #0
    bbe2:	beq.n	bb2c <FatFile::remove()+0x60>
  }
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
  }
  bool syncDevice() {
    return m_blockDev->syncDevice();
    bbe4:	ldr	r0, [r4, #0]
    bbe6:	bl	c4e8 <SdSpiCard::syncDevice()>
  cache_t* cacheFetchFat(uint32_t sector, uint8_t options) {
    options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    return reinterpret_cast<cache_t*>(m_fatCache.get(sector, options));
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    bbea:	cmp	r0, #0
    bbec:	beq.n	bb2c <FatFile::remove()+0x60>
    bbee:	b.n	bb2e <FatFile::remove()+0x62>

0000bbf0 <FatFile::lfnUniqueSfn(fname_t*)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::lfnUniqueSfn(fname_t* fname) {
    bbf0:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;;
    bbf4:	ldrb	r7, [r1, #12]

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::lfnUniqueSfn(fname_t* fname) {
    bbf6:	mov	r6, r1
    bbf8:	mov	r4, r0
        goto fail;
      }
      if (dir->name[0] == FAT_NAME_FREE) {
        goto done;
      }
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    bbfa:	add.w	r5, r1, #13
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::lfnUniqueSfn(fname_t* fname) {
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;;
    bbfe:	mov.w	r8, #2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
      }
    }
    fname->sfn[pos] = '~';
    bc02:	mov.w	r9, #126	; 0x7e
  for (uint8_t seq = 2; seq < 100; seq++) {
    if (seq < FIRST_HASH_SEQ) {
      fname->sfn[pos + 1] = '0' + seq;
    } else {
      DBG_PRINT_IF(seq > FIRST_HASH_SEQ);
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
    bc06:	ldr	r0, [r6, #4]
    bc08:	ldr	r1, [r6, #8]
    bc0a:	add.w	r3, r8, r0
    bc0e:	uxth	r3, r3
}
//------------------------------------------------------------------------------
// Daniel Bernstein University of Illinois at Chicago.
// Original had + instead of ^
static uint16_t Bernstein(uint16_t hash, const char *str, size_t len) {
  for (size_t i = 0; i < len; i++) {
    bc10:	cbz	r0, bc24 <FatFile::lfnUniqueSfn(fname_t*)+0x34>
    bc12:	add	r0, r1
    // hash = hash * 33 ^ str[i];
    hash = ((hash << 5) + hash) ^ str[i];
    bc14:	ldrb.w	r2, [r1], #1
    bc18:	add.w	r3, r3, r3, lsl #5
    bc1c:	eors	r3, r2
}
//------------------------------------------------------------------------------
// Daniel Bernstein University of Illinois at Chicago.
// Original had + instead of ^
static uint16_t Bernstein(uint16_t hash, const char *str, size_t len) {
  for (size_t i = 0; i < len; i++) {
    bc1e:	cmp	r0, r1
    // hash = hash * 33 ^ str[i];
    hash = ((hash << 5) + hash) ^ str[i];
    bc20:	uxth	r3, r3
}
//------------------------------------------------------------------------------
// Daniel Bernstein University of Illinois at Chicago.
// Original had + instead of ^
static uint16_t Bernstein(uint16_t hash, const char *str, size_t len) {
  for (size_t i = 0; i < len; i++) {
    bc22:	bne.n	bc14 <FatFile::lfnUniqueSfn(fname_t*)+0x24>
    bc24:	cmp	r7, #3
    bc26:	it	cs
    bc28:	movcs	r7, #3
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
    bc2a:	adds	r2, r7, #4
    bc2c:	uxtb	r2, r2
        uint8_t h = hex & 0XF;
    bc2e:	and.w	r1, r3, #15
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
    bc32:	adds	r0, r6, r2
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
    bc34:	subs	r2, #1
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
    bc36:	cmp	r1, #9
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
    bc38:	uxtb	r2, r2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
    bc3a:	ite	ls
    bc3c:	addls	r1, #48	; 0x30
    bc3e:	addhi	r1, #55	; 0x37
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
    bc40:	cmp	r7, r2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
    bc42:	mov.w	r3, r3, lsr #4
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
    bc46:	strb	r1, [r0, #13]
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
    bc48:	bcc.n	bc2e <FatFile::lfnUniqueSfn(fname_t*)+0x3e>
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
      }
    }
    fname->sfn[pos] = '~';
    bc4a:	adds	r3, r6, r7
   * \return true for success or false for failure.
   */
  bool rename(FatFile* dirFile, const char* newPath);
  /** Set the file's current position to zero. */
  void rewind() {
    seekSet(0);
    bc4c:	movs	r1, #0
    bc4e:	strb.w	r9, [r3, #13]
    bc52:	mov	r0, r4
    bc54:	bl	af0c <FatFile::seekSet(unsigned long)>
    rewind();
    while (1) {
      dir = readDirCache(true);
    bc58:	movs	r1, #1
    bc5a:	mov	r0, r4
    bc5c:	bl	ac9c <FatFile::readDirCache(bool)>
        goto fail;
      }
      if (dir->name[0] == FAT_NAME_FREE) {
        goto done;
      }
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    bc60:	movs	r2, #11
    }
    fname->sfn[pos] = '~';
    rewind();
    while (1) {
      dir = readDirCache(true);
      if (!dir) {
    bc62:	mov	r3, r0
        goto fail;
      }
      if (dir->name[0] == FAT_NAME_FREE) {
        goto done;
      }
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    bc64:	mov	r1, r0
    }
    fname->sfn[pos] = '~';
    rewind();
    while (1) {
      dir = readDirCache(true);
      if (!dir) {
    bc66:	cbz	r0, bc94 <FatFile::lfnUniqueSfn(fname_t*)+0xa4>
          goto done;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (dir->name[0] == FAT_NAME_FREE) {
    bc68:	ldrb.w	lr, [r3]
        goto done;
      }
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    bc6c:	mov	r0, r5
          goto done;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (dir->name[0] == FAT_NAME_FREE) {
    bc6e:	cmp.w	lr, #0
    bc72:	beq.n	bca0 <FatFile::lfnUniqueSfn(fname_t*)+0xb0>
        goto done;
      }
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    bc74:	ldrb	r3, [r3, #11]
    bc76:	lsls	r3, r3, #28
    bc78:	bmi.n	bc58 <FatFile::lfnUniqueSfn(fname_t*)+0x68>
    bc7a:	bl	105a0 <memcmp>
    bc7e:	cmp	r0, #0
    bc80:	bne.n	bc58 <FatFile::lfnUniqueSfn(fname_t*)+0x68>
    bc82:	add.w	r8, r8, #1
    bc86:	uxth.w	r8, r8
  uint16_t hex;

  DBG_HALT_IF(!(fname->flags & FNAME_FLAG_LOST_CHARS));
  DBG_HALT_IF(fname->sfn[pos] != '~' && fname->sfn[pos + 1] != '1');

  for (uint8_t seq = 2; seq < 100; seq++) {
    bc8a:	cmp.w	r8, #100	; 0x64
    bc8e:	bne.n	bc06 <FatFile::lfnUniqueSfn(fname_t*)+0x16>
 fail:
  return false;

 done:
  return true;
}
    bc90:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    fname->sfn[pos] = '~';
    rewind();
    while (1) {
      dir = readDirCache(true);
      if (!dir) {
        if (!getError()) {
    bc94:	ldrb	r0, [r4, #1]
    bc96:	clz	r0, r0
    bc9a:	lsrs	r0, r0, #5
    bc9c:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

 fail:
  return false;

 done:
  return true;
    bca0:	movs	r0, #1
    bca2:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    bca6:	nop

0000bca8 <FatFile::open(FatFile*, fname_t*, int)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
    bca8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint16_t time;
  DirFat_t* dir;
  DirLfn_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
    bcac:	ldrb	r4, [r1, #0]
    bcae:	tst.w	r4, #112	; 0x70

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
    bcb2:	sub	sp, #52	; 0x34
  uint16_t time;
  DirFat_t* dir;
  DirLfn_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
    bcb4:	beq.n	bcba <FatFile::open(FatFile*, fname_t*, int)+0x12>
    bcb6:	ldrb	r4, [r0, #0]
    bcb8:	cbz	r4, bcc2 <FatFile::open(FatFile*, fname_t*, int)+0x1a>
    goto fail;
  }
  return true;

 fail:
  return false;
    bcba:	movs	r0, #0
}
    bcbc:	add	sp, #52	; 0x34
    bcbe:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (!dirFile->isDir() || isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
    bcc2:	ldrb	r4, [r2, #0]
  uint16_t curIndex;
  uint16_t date;
  uint16_t time;
  DirFat_t* dir;
  DirLfn_t* ldir;
  size_t len = fname->len;
    bcc4:	ldr.w	sl, [r2, #4]
  if (!dirFile->isDir() || isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
    bcc8:	lsls	r4, r4, #30
    bcca:	bne.n	bd52 <FatFile::open(FatFile*, fname_t*, int)+0xaa>
    bccc:	mov.w	r8, #1
    bcd0:	mov	r6, r1
    bcd2:	mov	fp, r2
    bcd4:	str	r0, [sp, #36]	; 0x24
    bcd6:	movs	r1, #0
    bcd8:	mov	r0, r6
  uint8_t freeNeed;
  uint8_t freeFound = 0;
  uint8_t order = 0;
  uint8_t checksum = 0;
  uint8_t ms10;
  uint16_t freeIndex = 0;
    bcda:	mov	r7, r1
    bcdc:	str	r3, [sp, #28]
    bcde:	bl	af0c <FatFile::seekSet(unsigned long)>
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
    bce2:	add.w	r3, fp, #13
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
  uint8_t order = 0;
  uint8_t checksum = 0;
    bce6:	str	r7, [sp, #24]
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
  uint8_t order = 0;
    bce8:	str	r7, [sp, #12]
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
    bcea:	mov	r4, r7
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
    bcec:	mov	r9, r7
 fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
    bcee:	str	r7, [sp, #20]
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
    bcf0:	str	r3, [sp, #16]
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
    dir = dirFile->readDirCache(true);
    bcf2:	movs	r1, #1
    bcf4:	mov	r0, r6
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
    bcf6:	ldr	r5, [r6, #20]
    dir = dirFile->readDirCache(true);
    bcf8:	bl	ac9c <FatFile::readDirCache(bool)>
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
    bcfc:	ubfx	r5, r5, #5, #16
    dir = dirFile->readDirCache(true);
    if (!dir) {
    bd00:	mov	r3, r0
    bd02:	cmp	r0, #0
    bd04:	beq.w	be20 <FatFile::open(FatFile*, fname_t*, int)+0x178>
        goto fail;
      }
      // At EOF
      goto create;
    }
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == FAT_NAME_FREE) {
    bd08:	ldrb	r2, [r0, #0]
    bd0a:	cmp	r2, #229	; 0xe5
    bd0c:	beq.n	bd84 <FatFile::open(FatFile*, fname_t*, int)+0xdc>
    bd0e:	cmp	r2, #0
    bd10:	beq.n	bd84 <FatFile::open(FatFile*, fname_t*, int)+0xdc>
      if (dir->name[0] == FAT_NAME_FREE) {
        goto create;
      }
    } else {
      if (freeFound < freeNeed) {
        freeFound = 0;
    bd12:	cmp	r4, r8
    bd14:	it	cc
    bd16:	movcc	r4, #0
      }
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == '.') {
    bd18:	cmp	r2, #46	; 0x2e
    bd1a:	beq.n	bd7e <FatFile::open(FatFile*, fname_t*, int)+0xd6>
    bd1c:	ldrb	r1, [r3, #11]
      lfnOrd = 0;
    } else if (isLongName(dir)) {
    bd1e:	cmp	r1, #15
    bd20:	beq.n	bda0 <FatFile::open(FatFile*, fname_t*, int)+0xf8>
          // Not found.
          lfnOrd = 0;
          break;
        }
      }
    } else if (isFileOrSubdir(dir)) {
    bd22:	and.w	r1, r1, #8
    bd26:	and.w	r2, r1, #255	; 0xff
    bd2a:	cbnz	r1, bd7e <FatFile::open(FatFile*, fname_t*, int)+0xd6>
      if (lfnOrd) {
    bd2c:	cmp.w	r9, #0
    bd30:	bne.w	bff4 <FatFile::open(FatFile*, fname_t*, int)+0x34c>
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
    bd34:	mov	r0, r3
    bd36:	movs	r2, #11
    bd38:	ldr	r1, [sp, #16]
    bd3a:	bl	105a0 <memcmp>
    bd3e:	cmp	r0, #0
    bd40:	bne.n	bcf2 <FatFile::open(FatFile*, fname_t*, int)+0x4a>
        if (!(fname->flags & FNAME_FLAG_LOST_CHARS)) {
    bd42:	ldrb.w	r3, [fp]
    bd46:	lsls	r0, r3, #31
    bd48:	bpl.w	c01c <FatFile::open(FatFile*, fname_t*, int)+0x374>
          goto found;
        }
        fnameFound = true;
    bd4c:	movs	r3, #1
    bd4e:	str	r3, [sp, #20]
    bd50:	b.n	bcf2 <FatFile::open(FatFile*, fname_t*, int)+0x4a>
  if (!dirFile->isDir() || isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
    bd52:	ldr	r5, [pc, #732]	; (c030 <FatFile::open(FatFile*, fname_t*, int)+0x388>)
    bd54:	add.w	r4, sl, #12
    bd58:	umull	r4, r8, r5, r4
    bd5c:	mov.w	r8, r8, lsr #2
    bd60:	add.w	r8, r8, #1
    bd64:	uxtb.w	r8, r8
    bd68:	b.n	bcd0 <FatFile::open(FatFile*, fname_t*, int)+0x28>
        if ((ldir->order & FAT_ORDER_LAST_LONG_ENTRY) == 0) {
          continue;
        }
        lfnOrd = order = ldir->order & 0X1F;
        checksum = ldir->checksum;
      } else if (ldir->order != --order || checksum != ldir->checksum) {
    bd6a:	ldr	r1, [sp, #12]
    bd6c:	subs	r1, #1
    bd6e:	uxtb	r1, r1
    bd70:	cmp	r2, r1
    bd72:	str	r1, [sp, #12]
    bd74:	bne.n	bd7e <FatFile::open(FatFile*, fname_t*, int)+0xd6>
    bd76:	ldrb	r2, [r3, #13]
    bd78:	ldr	r1, [sp, #24]
    bd7a:	cmp	r1, r2
    bd7c:	beq.n	bdb6 <FatFile::open(FatFile*, fname_t*, int)+0x10e>
          goto found;
        }
        fnameFound = true;
      }
    } else {
      lfnOrd = 0;
    bd7e:	mov.w	r9, #0
    bd82:	b.n	bcf2 <FatFile::open(FatFile*, fname_t*, int)+0x4a>
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
    bd84:	cmp	r4, #0
    bd86:	it	eq
    bd88:	moveq	r7, r5
    }
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == FAT_NAME_FREE) {
      if (freeFound == 0) {
        freeIndex = curIndex;
      }
      if (freeFound < freeNeed) {
    bd8a:	cmp	r4, r8
        freeFound++;
    bd8c:	itt	cc
    bd8e:	addcc	r4, #1
    bd90:	uxtbcc	r4, r4
      }
      if (dir->name[0] == FAT_NAME_FREE) {
    bd92:	cmp	r2, #0
    bd94:	beq.n	be28 <FatFile::open(FatFile*, fname_t*, int)+0x180>
      if (freeFound < freeNeed) {
        freeFound = 0;
      }
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == '.') {
    bd96:	cmp	r2, #229	; 0xe5
    bd98:	bne.n	bd18 <FatFile::open(FatFile*, fname_t*, int)+0x70>
          goto found;
        }
        fnameFound = true;
      }
    } else {
      lfnOrd = 0;
    bd9a:	mov.w	r9, #0
    bd9e:	b.n	bcf2 <FatFile::open(FatFile*, fname_t*, int)+0x4a>
    // skip empty slot or '.' or '..'
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == '.') {
      lfnOrd = 0;
    } else if (isLongName(dir)) {
      ldir = reinterpret_cast<DirLfn_t*>(dir);
      if (!lfnOrd) {
    bda0:	cmp.w	r9, #0
    bda4:	bne.n	bd6a <FatFile::open(FatFile*, fname_t*, int)+0xc2>
        if ((ldir->order & FAT_ORDER_LAST_LONG_ENTRY) == 0) {
    bda6:	lsls	r5, r2, #25
    bda8:	bpl.n	bcf2 <FatFile::open(FatFile*, fname_t*, int)+0x4a>
          continue;
        }
        lfnOrd = order = ldir->order & 0X1F;
    bdaa:	and.w	r9, r2, #31
        checksum = ldir->checksum;
    bdae:	ldrb	r2, [r3, #13]
      ldir = reinterpret_cast<DirLfn_t*>(dir);
      if (!lfnOrd) {
        if ((ldir->order & FAT_ORDER_LAST_LONG_ENTRY) == 0) {
          continue;
        }
        lfnOrd = order = ldir->order & 0X1F;
    bdb0:	str.w	r9, [sp, #12]
        checksum = ldir->checksum;
    bdb4:	str	r2, [sp, #24]
      } else if (ldir->order != --order || checksum != ldir->checksum) {
        lfnOrd = 0;
        continue;
      }
      size_t k = 13*(order - 1);
    bdb6:	ldr	r2, [sp, #12]
    bdb8:	subs	r2, #1
    bdba:	add.w	r5, r2, r2, lsl #1
    bdbe:	add.w	r5, r2, r5, lsl #2
      if (k >= len) {
    bdc2:	cmp	sl, r5
        checksum = ldir->checksum;
      } else if (ldir->order != --order || checksum != ldir->checksum) {
        lfnOrd = 0;
        continue;
      }
      size_t k = 13*(order - 1);
    bdc4:	mov	r2, r5
      if (k >= len) {
    bdc6:	bls.n	bd7e <FatFile::open(FatFile*, fname_t*, int)+0xd6>
    bdc8:	add.w	r1, r5, #13
    bdcc:	str.w	r9, [sp, #32]
    bdd0:	mov	r9, r1
    bdd2:	b.n	bdfc <FatFile::open(FatFile*, fname_t*, int)+0x154>
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
    bdd4:	ldr.w	r0, [fp, #8]
    bdd8:	ldrb	r2, [r0, r2]
}
#if USE_LONG_FILE_NAMES
//------------------------------------------------------------------------------
// Saves about 90 bytes of flash on 328 over tolower().
inline char lfnToLower(char c) {
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
    bdda:	cmp.w	ip, #25
    bdde:	it	ls
    bde0:	addls	r1, #32
    bde2:	sub.w	r0, r2, #65	; 0x41
    bde6:	it	ls
    bde8:	uxtbls	r1, r1
    bdea:	cmp	r0, #25
    bdec:	itt	ls
    bdee:	addls	r2, #32
    bdf0:	uxtbls	r2, r2
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
    bdf2:	cmp	r1, r2
    bdf4:	bne.n	bd7e <FatFile::open(FatFile*, fname_t*, int)+0xd6>
      if (k >= len) {
        // Not found.
        lfnOrd = 0;
        continue;
      }
      for (uint8_t i = 0; i < 13; i++) {
    bdf6:	cmp	lr, r9
    bdf8:	beq.n	be80 <FatFile::open(FatFile*, fname_t*, int)+0x1d8>
    bdfa:	mov	r2, lr
        uint16_t u = lfnGetChar(ldir, i);
    bdfc:	subs	r1, r2, r5
    bdfe:	uxtb	r1, r1
    be00:	mov	r0, r3
    be02:	bl	b718 <lfnGetChar(DirLfn_t*, unsigned char)>
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
    be06:	uxtb	r1, r0
        lfnOrd = 0;
        continue;
      }
      for (uint8_t i = 0; i < 13; i++) {
        uint16_t u = lfnGetChar(ldir, i);
        if (k == len) {
    be08:	cmp	sl, r2
}
#if USE_LONG_FILE_NAMES
//------------------------------------------------------------------------------
// Saves about 90 bytes of flash on 328 over tolower().
inline char lfnToLower(char c) {
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
    be0a:	sub.w	ip, r1, #65	; 0x41
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
    be0e:	add.w	lr, r2, #1
        lfnOrd = 0;
        continue;
      }
      for (uint8_t i = 0; i < 13; i++) {
        uint16_t u = lfnGetChar(ldir, i);
        if (k == len) {
    be12:	beq.w	bfe6 <FatFile::open(FatFile*, fname_t*, int)+0x33e>
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
    be16:	cmp	r0, #255	; 0xff
    be18:	bls.n	bdd4 <FatFile::open(FatFile*, fname_t*, int)+0x12c>
          goto found;
        }
        fnameFound = true;
      }
    } else {
      lfnOrd = 0;
    be1a:	mov.w	r9, #0
    be1e:	b.n	bcf2 <FatFile::open(FatFile*, fname_t*, int)+0x4a>
  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
    dir = dirFile->readDirCache(true);
    if (!dir) {
      if (dirFile->getError()) {
    be20:	ldrb	r3, [r6, #1]
    be22:	cmp	r3, #0
    be24:	bne.w	bcba <FatFile::open(FatFile*, fname_t*, int)+0x12>
  }
  goto open;

 create:
  // don't create unless O_CREAT and write mode
  if (!(oflag & O_CREAT) || !isWriteMode(oflag)) {
    be28:	ldr	r2, [sp, #28]
    be2a:	mov	r3, r2
    be2c:	lsls	r2, r3, #22
    be2e:	bpl.w	bcba <FatFile::open(FatFile*, fname_t*, int)+0x12>
    be32:	and.w	r3, r3, #3
    be36:	subs	r3, #1
    be38:	cmp	r3, #1
    be3a:	bhi.w	bcba <FatFile::open(FatFile*, fname_t*, int)+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // If at EOF start in next cluster.
  if (freeFound == 0) {
    be3e:	cmp	r4, #0
    be40:	it	eq
    be42:	moveq	r7, r5
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
    be44:	cmp	r4, r8
    be46:	bcc.n	be50 <FatFile::open(FatFile*, fname_t*, int)+0x1a8>
    be48:	b.n	be86 <FatFile::open(FatFile*, fname_t*, int)+0x1de>
        goto fail;
      }
      // EOF if no error.
      break;
    }
    freeFound++;
    be4a:	uxtb	r4, r3
  // If at EOF start in next cluster.
  if (freeFound == 0) {
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
    be4c:	cmp	r8, r4
    be4e:	bls.n	be86 <FatFile::open(FatFile*, fname_t*, int)+0x1de>
    dir = dirFile->readDirCache();
    be50:	movs	r1, #0
    be52:	mov	r0, r6
    be54:	bl	ac9c <FatFile::readDirCache(bool)>
        goto fail;
      }
      // EOF if no error.
      break;
    }
    freeFound++;
    be58:	adds	r3, r4, #1
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
    dir = dirFile->readDirCache();
    if (!dir) {
    be5a:	cmp	r0, #0
    be5c:	bne.n	be4a <FatFile::open(FatFile*, fname_t*, int)+0x1a2>
      if (dirFile->getError()) {
    be5e:	ldrb	r3, [r6, #1]
    be60:	cbz	r3, be6c <FatFile::open(FatFile*, fname_t*, int)+0x1c4>
    be62:	b.n	bcba <FatFile::open(FatFile*, fname_t*, int)+0x12>
    be64:	ldr	r3, [r6, #8]
    if (!dirFile->addDirCluster()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // Done if more than one sector per cluster.  Max freeNeed is 21.
    if (dirFile->m_vol->sectorsPerCluster() > 1) {
    be66:	ldrb	r3, [r3, #4]
    be68:	cmp	r3, #1
    be6a:	bhi.n	be86 <FatFile::open(FatFile*, fname_t*, int)+0x1de>
      // EOF if no error.
      break;
    }
    freeFound++;
  }
  while (freeFound < freeNeed) {
    be6c:	cmp	r8, r4
    be6e:	bls.n	be86 <FatFile::open(FatFile*, fname_t*, int)+0x1de>
    // Will fail if FAT16 root.
    if (!dirFile->addDirCluster()) {
    be70:	mov	r0, r6
    be72:	bl	a674 <FatFile::addDirCluster()>
    }
    // Done if more than one sector per cluster.  Max freeNeed is 21.
    if (dirFile->m_vol->sectorsPerCluster() > 1) {
      break;
    }
    freeFound += 16;
    be76:	adds	r4, #16
    be78:	uxtb	r4, r4
    }
    freeFound++;
  }
  while (freeFound < freeNeed) {
    // Will fail if FAT16 root.
    if (!dirFile->addDirCluster()) {
    be7a:	cmp	r0, #0
    be7c:	bne.n	be64 <FatFile::open(FatFile*, fname_t*, int)+0x1bc>
    be7e:	b.n	bcba <FatFile::open(FatFile*, fname_t*, int)+0x12>
    be80:	ldr.w	r9, [sp, #32]
    be84:	b.n	bcf2 <FatFile::open(FatFile*, fname_t*, int)+0x4a>
    if (dirFile->m_vol->sectorsPerCluster() > 1) {
      break;
    }
    freeFound += 16;
  }
  if (fnameFound) {
    be86:	ldr	r3, [sp, #20]
    be88:	cbz	r3, be98 <FatFile::open(FatFile*, fname_t*, int)+0x1f0>
    if (!dirFile->lfnUniqueSfn(fname)) {
    be8a:	mov	r1, fp
    be8c:	mov	r0, r6
    be8e:	bl	bbf0 <FatFile::lfnUniqueSfn(fname_t*)>
    be92:	cmp	r0, #0
    be94:	beq.w	bcba <FatFile::open(FatFile*, fname_t*, int)+0x12>
      goto fail;
    }
  }
  if (!dirFile->seekSet(32UL*freeIndex)) {
    be98:	lsls	r1, r7, #5
    be9a:	mov	r0, r6
    be9c:	bl	af0c <FatFile::seekSet(unsigned long)>
    bea0:	cmp	r0, #0
    bea2:	beq.w	bcba <FatFile::open(FatFile*, fname_t*, int)+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
    bea6:	add.w	r8, r8, #4294967295
  for (order = lfnOrd ; order ; order--) {
    beaa:	ands.w	r9, r8, #255	; 0xff
    beae:	beq.n	bf64 <FatFile::open(FatFile*, fname_t*, int)+0x2bc>
    if (!ldir) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    beb0:	orr.w	r4, r9, #64	; 0x40
    beb4:	uxtb	r4, r4
  if (!dirFile->seekSet(32UL*freeIndex)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
  for (order = lfnOrd ; order ; order--) {
    beb6:	mov	r5, r9
    ldir = reinterpret_cast<DirLfn_t*>(dirFile->readDirCache());
    beb8:	movs	r7, #0
    beba:	movs	r1, #0
    bebc:	mov	r0, r6
    bebe:	bl	ac9c <FatFile::readDirCache(bool)>
    if (!ldir) {
    bec2:	cmp	r0, #0
    bec4:	beq.w	bcba <FatFile::open(FatFile*, fname_t*, int)+0x12>
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
    bec8:	ldr	r2, [r6, #8]
    beca:	ldrb.w	r3, [r2, #36]	; 0x24
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    bece:	cmp	r9, r5
    bed0:	orr.w	r3, r3, #1
    ldir->attributes = FAT_ATTRIB_LONG_NAME;
    bed4:	mov.w	ip, #15
    if (!ldir) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    bed8:	ite	ne
    beda:	movne	r1, r5
    bedc:	moveq	r1, r4
    bede:	strb.w	r3, [r2, #36]	; 0x24
    bee2:	add.w	lr, fp, #12
    ldir->attributes = FAT_ATTRIB_LONG_NAME;
    bee6:	strb.w	ip, [r0, #11]
    ldir->mustBeZero1 = 0;
    beea:	strb	r7, [r0, #12]
    if (!ldir) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    beec:	strb	r1, [r0, #0]
    beee:	add.w	ip, fp, #23
#include "FatFile.h"
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
    bef2:	movs	r3, #0
  for (uint8_t i = 0; i < 11; i++) {
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
    bef4:	ldrb.w	r8, [lr, #1]!
    bef8:	lsrs	r2, r3, #1
    befa:	orr.w	r3, r2, r3, lsl #7
    befe:	uxtab	r3, r8, r3
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
    bf02:	cmp	lr, ip
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
    bf04:	uxtb	r3, r3
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
    bf06:	bne.n	bef4 <FatFile::open(FatFile*, fname_t*, int)+0x24c>
    setLe16(ldir->unicode3 + 2*i - 22, c);
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(DirLfn_t* ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->order & 0X1F) - 1);
    bf08:	and.w	r1, r1, #31
    bf0c:	subs	r1, #1
    }
    dirFile->m_vol->cacheDirty();
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    ldir->attributes = FAT_ATTRIB_LONG_NAME;
    ldir->mustBeZero1 = 0;
    ldir->checksum = lfnChecksum(fname->sfn);
    bf0e:	strb	r3, [r0, #13]
    setLe16(ldir->unicode3 + 2*i - 22, c);
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(DirLfn_t* ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->order & 0X1F) - 1);
    bf10:	add.w	r2, r1, r1, lsl #1
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    ldir->attributes = FAT_ATTRIB_LONG_NAME;
    ldir->mustBeZero1 = 0;
    ldir->checksum = lfnChecksum(fname->sfn);
    setLe16(ldir->mustBeZero2, 0);
    lfnPutName(ldir, fname->lfn, len);
    bf14:	ldr.w	lr, [fp, #8]
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    bf18:	strh	r7, [r0, #26]
    setLe16(ldir->unicode3 + 2*i - 22, c);
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(DirLfn_t* ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->order & 0X1F) - 1);
    bf1a:	add.w	r2, r1, r2, lsl #2
    bf1e:	adds	r0, #4
  for (uint8_t i = 0; i < 13; i++, k++) {
    bf20:	movs	r3, #0
    bf22:	b.n	bf44 <FatFile::open(FatFile*, fname_t*, int)+0x29c>
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \param[in] c  The 16-bit character.
 */
static void lfnPutChar(DirLfn_t* ldir, uint8_t i, uint16_t c) {
  if (i < 5) {
    bf24:	cmp	r3, #4
}
//------------------------------------------------------------------------------
static void lfnPutName(DirLfn_t* ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->order & 0X1F) - 1);
  for (uint8_t i = 0; i < 13; i++, k++) {
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
    bf26:	ldrb.w	r1, [lr, r2]
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \param[in] c  The 16-bit character.
 */
static void lfnPutChar(DirLfn_t* ldir, uint8_t i, uint16_t c) {
  if (i < 5) {
    bf2a:	bls.n	bf56 <FatFile::open(FatFile*, fname_t*, int)+0x2ae>
    setLe16(ldir->unicode1 + 2*i, c);
  } else if (i < 11) {
    bf2c:	cmp	r3, #10
    bf2e:	ite	ls
    bf30:	strhls	r1, [r0, #0]
    bf32:	strhhi	r1, [r0, #2]
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(DirLfn_t* ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->order & 0X1F) - 1);
  for (uint8_t i = 0; i < 13; i++, k++) {
    bf34:	adds	r3, #1
    bf36:	uxtb	r3, r3
    bf38:	cmp	r3, #13
    bf3a:	add.w	r2, r2, #1
    bf3e:	add.w	r0, r0, #2
    bf42:	beq.n	bf5c <FatFile::open(FatFile*, fname_t*, int)+0x2b4>
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
    bf44:	cmp	sl, r2
    bf46:	bhi.n	bf24 <FatFile::open(FatFile*, fname_t*, int)+0x27c>
    bf48:	ite	ne
    bf4a:	movne.w	r1, #4294967295
    bf4e:	moveq	r1, #0
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \param[in] c  The 16-bit character.
 */
static void lfnPutChar(DirLfn_t* ldir, uint8_t i, uint16_t c) {
  if (i < 5) {
    bf50:	cmp	r3, #4
}
//------------------------------------------------------------------------------
static void lfnPutName(DirLfn_t* ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->order & 0X1F) - 1);
  for (uint8_t i = 0; i < 13; i++, k++) {
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
    bf52:	uxth	r1, r1
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \param[in] c  The 16-bit character.
 */
static void lfnPutChar(DirLfn_t* ldir, uint8_t i, uint16_t c) {
  if (i < 5) {
    bf54:	bhi.n	bf2c <FatFile::open(FatFile*, fname_t*, int)+0x284>
    bf56:	strh.w	r1, [r0, #-3]
    bf5a:	b.n	bf34 <FatFile::open(FatFile*, fname_t*, int)+0x28c>
  if (!dirFile->seekSet(32UL*freeIndex)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
  for (order = lfnOrd ; order ; order--) {
    bf5c:	subs	r5, #1
    bf5e:	ands.w	r5, r5, #255	; 0xff
    bf62:	bne.n	beba <FatFile::open(FatFile*, fname_t*, int)+0x212>
    ldir->checksum = lfnChecksum(fname->sfn);
    setLe16(ldir->mustBeZero2, 0);
    lfnPutName(ldir, fname->lfn, len);
  }
  curIndex = dirFile->m_curPosition/32;
  dir = dirFile->readDirCache();
    bf64:	movs	r1, #0
    bf66:	mov	r0, r6
    ldir->mustBeZero1 = 0;
    ldir->checksum = lfnChecksum(fname->sfn);
    setLe16(ldir->mustBeZero2, 0);
    lfnPutName(ldir, fname->lfn, len);
  }
  curIndex = dirFile->m_curPosition/32;
    bf68:	ldr	r5, [r6, #20]
  dir = dirFile->readDirCache();
    bf6a:	bl	ac9c <FatFile::readDirCache(bool)>
    ldir->mustBeZero1 = 0;
    ldir->checksum = lfnChecksum(fname->sfn);
    setLe16(ldir->mustBeZero2, 0);
    lfnPutName(ldir, fname->lfn, len);
  }
  curIndex = dirFile->m_curPosition/32;
    bf6e:	ubfx	r5, r5, #5, #16
  dir = dirFile->readDirCache();
  if (!dir) {
    bf72:	mov	r4, r0
    bf74:	cmp	r0, #0
    bf76:	beq.w	bcba <FatFile::open(FatFile*, fname_t*, int)+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // initialize as empty file
  memset(dir, 0, sizeof(DirFat_t));
    bf7a:	movs	r2, #32
    bf7c:	movs	r1, #0
    bf7e:	bl	106cc <memset>
  memcpy(dir->name, fname->sfn, 11);
    bf82:	mov	r3, fp

  // Set base-name and extension lower case bits.
  dir->caseFlags =  (FAT_CASE_LC_BASE | FAT_CASE_LC_EXT) & fname->flags;

  // Set timestamps.
  if (FsDateTime::callback) {
    bf84:	ldr	r2, [pc, #172]	; (c034 <FatFile::open(FatFile*, fname_t*, int)+0x38c>)
    DBG_FAIL_MACRO;
    goto fail;
  }
  // initialize as empty file
  memset(dir, 0, sizeof(DirFat_t));
  memcpy(dir->name, fname->sfn, 11);
    bf86:	ldr.w	r1, [r3, #13]!
    bf8a:	ldr	r0, [r3, #4]
    bf8c:	str	r0, [r4, #4]
    bf8e:	str	r1, [r4, #0]
    bf90:	ldrh	r1, [r3, #8]
    bf92:	ldrb	r3, [r3, #10]
    bf94:	strb	r3, [r4, #10]
    bf96:	strh	r1, [r4, #8]

  // Set base-name and extension lower case bits.
  dir->caseFlags =  (FAT_CASE_LC_BASE | FAT_CASE_LC_EXT) & fname->flags;
    bf98:	ldrb.w	r3, [fp]

  // Set timestamps.
  if (FsDateTime::callback) {
    bf9c:	ldr	r7, [r2, #0]
  // initialize as empty file
  memset(dir, 0, sizeof(DirFat_t));
  memcpy(dir->name, fname->sfn, 11);

  // Set base-name and extension lower case bits.
  dir->caseFlags =  (FAT_CASE_LC_BASE | FAT_CASE_LC_EXT) & fname->flags;
    bf9e:	and.w	r3, r3, #24
    bfa2:	strb	r3, [r4, #12]

  // Set timestamps.
  if (FsDateTime::callback) {
    bfa4:	cmp	r7, #0
    bfa6:	beq.n	c024 <FatFile::open(FatFile*, fname_t*, int)+0x37c>
    // call user date/time function
    FsDateTime::callback(&date, &time, &ms10);
    bfa8:	add.w	r2, sp, #43	; 0x2b
    bfac:	add.w	r1, sp, #46	; 0x2e
    bfb0:	add	r0, sp, #44	; 0x2c
    bfb2:	blx	r7
    bfb4:	ldrh.w	r1, [sp, #44]	; 0x2c
    bfb8:	ldrh.w	r2, [sp, #46]	; 0x2e
    setLe16(dir->createDate, date);
    setLe16(dir->createTime, time);
    dir->createTimeMs = ms10;
    bfbc:	ldrb.w	r3, [sp, #43]	; 0x2b
    bfc0:	strh	r1, [r4, #16]
    bfc2:	strh	r2, [r4, #14]
    bfc4:	strb	r3, [r4, #13]
      setLe16(dir->createTime, FS_DEFAULT_TIME);
      setLe16(dir->modifyTime, FS_DEFAULT_TIME);
    }
  }
  // Force write of entry to device.
  dirFile->m_vol->cacheDirty();
    bfc6:	ldr	r2, [r6, #8]
    bfc8:	ldrb.w	r3, [r2, #36]	; 0x24
    bfcc:	orr.w	r3, r3, #1
    bfd0:	strb.w	r3, [r2, #36]	; 0x24

 open:
  // open entry in cache.
  if (!openCachedEntry(dirFile, curIndex, oflag, lfnOrd)) {
    bfd4:	str.w	r9, [sp]
    bfd8:	ldr	r3, [sp, #28]
    bfda:	ldr	r0, [sp, #36]	; 0x24
    bfdc:	mov	r2, r5
    bfde:	mov	r1, r6
    bfe0:	bl	afbc <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)>
    bfe4:	b.n	bcbc <FatFile::open(FatFile*, fname_t*, int)+0x14>
      for (uint8_t i = 0; i < 13; i++) {
        uint16_t u = lfnGetChar(ldir, i);
        if (k == len) {
          if (u != 0) {
            // Not found.
            lfnOrd = 0;
    bfe6:	cmp	r0, #0
    bfe8:	ldr.w	r9, [sp, #32]
    bfec:	it	ne
    bfee:	movne.w	r9, #0
    bff2:	b.n	bcf2 <FatFile::open(FatFile*, fname_t*, int)+0x4a>
          break;
        }
      }
    } else if (isFileOrSubdir(dir)) {
      if (lfnOrd) {
        if (1 == order && lfnChecksum(dir->name) == checksum) {
    bff4:	ldr	r1, [sp, #12]
    bff6:	cmp	r1, #1
    bff8:	bne.w	bcba <FatFile::open(FatFile*, fname_t*, int)+0x12>
    bffc:	subs	r4, r3, #1
    bffe:	adds	r3, #10
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
    c000:	ldrb.w	r0, [r4, #1]!
    c004:	lsrs	r1, r2, #1
    c006:	orr.w	r2, r1, r2, lsl #7
    c00a:	uxtab	r2, r0, r2
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
    c00e:	cmp	r4, r3
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
    c010:	uxtb	r2, r2
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
    c012:	bne.n	c000 <FatFile::open(FatFile*, fname_t*, int)+0x358>
          break;
        }
      }
    } else if (isFileOrSubdir(dir)) {
      if (lfnOrd) {
        if (1 == order && lfnChecksum(dir->name) == checksum) {
    c014:	ldr	r3, [sp, #24]
    c016:	cmp	r3, r2
    c018:	bne.w	bcba <FatFile::open(FatFile*, fname_t*, int)+0x12>
    }
  }

 found:
  // Don't open if create only.
  if (oflag & O_EXCL) {
    c01c:	ldr	r3, [sp, #28]
    c01e:	lsls	r1, r3, #20
    c020:	bpl.n	bfd4 <FatFile::open(FatFile*, fname_t*, int)+0x32c>
    c022:	b.n	bcba <FatFile::open(FatFile*, fname_t*, int)+0x12>
    c024:	movw	r3, #21025	; 0x5221
    c028:	strh	r3, [r4, #16]
    c02a:	strh	r3, [r4, #24]
    c02c:	strh	r3, [r4, #18]
    c02e:	b.n	bfc6 <FatFile::open(FatFile*, fname_t*, int)+0x31e>
    c030:	.word	0x4ec4ec4f
    c034:	.word	0x20002bd8

0000c038 <FatFile::getSFN(char*)>:
#include "../common/DebugMacros.h"
#include "../common/FsStructs.h"
#include "FatFile.h"
#include "FatVolume.h"
//------------------------------------------------------------------------------
size_t FatFile::getSFN(char* name) {
    c038:	push	{r3, r4, r5, r6, r7, lr}
    c03a:	ldrb	r3, [r0, #0]
    c03c:	mov	r5, r1
  uint8_t j = 0;
  uint8_t lcBit = FAT_CASE_LC_BASE;
  DirFat_t* dir;

  if (!isOpen()) {
    c03e:	cbz	r3, c052 <FatFile::getSFN(char*)+0x1a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isRoot()) {
    c040:	ands.w	r4, r3, #96	; 0x60
    c044:	beq.n	c058 <FatFile::getSFN(char*)+0x20>
    name[0] = '/';
    c046:	movs	r2, #47	; 0x2f
    name[1] = '\0';
    c048:	movs	r3, #0
  if (!isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isRoot()) {
    name[0] = '/';
    c04a:	strb	r2, [r1, #0]
    name[1] = '\0';
    c04c:	strb	r3, [r1, #1]
    return 1;
    c04e:	movs	r0, #1
    c050:	pop	{r3, r4, r5, r6, r7, pc}
  }
  name[j] = '\0';
  return j;

 fail:
  name[0] = '\0';
    c052:	movs	r0, #0
    c054:	strb	r0, [r5, #0]
  return 0;
}
    c056:	pop	{r3, r4, r5, r6, r7, pc}
    name[0] = '/';
    name[1] = '\0';
    return 1;
  }
  // cache entry
  dir = reinterpret_cast<DirFat_t*>(cacheDirEntry(FsCache::CACHE_FOR_READ));
    c058:	mov	r1, r4
    c05a:	bl	a718 <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    c05e:	cmp	r0, #0
    c060:	beq.n	c052 <FatFile::getSFN(char*)+0x1a>
    c062:	mov	r1, r4
    c064:	mov	r3, r4
    c066:	movs	r7, #8
    c068:	subs	r4, r0, #1
      continue;
    }
    if (i == 8) {
      // Position bit for extension.
      lcBit = FAT_CASE_LC_EXT;
      name[j++] = '.';
    c06a:	mov.w	lr, #46	; 0x2e
    DBG_FAIL_MACRO;
    goto fail;
  }
  // format name
  for (uint8_t i = 0; i < 11; i++) {
    if (dir->name[i] == ' ') {
    c06e:	ldrb.w	r2, [r4, #1]!
    c072:	cmp	r2, #32
    c074:	beq.n	c092 <FatFile::getSFN(char*)+0x5a>
      continue;
    }
    if (i == 8) {
    c076:	cmp	r1, #8
    c078:	beq.n	c0a0 <FatFile::getSFN(char*)+0x68>
      // Position bit for extension.
      lcBit = FAT_CASE_LC_EXT;
      name[j++] = '.';
    }
    char c = dir->name[i];
    if ('A' <= c && c <= 'Z' && (lcBit & dir->caseFlags)) {
    c07a:	sub.w	r6, r2, #65	; 0x41
    c07e:	cmp	r6, #25
    c080:	bhi.n	c08c <FatFile::getSFN(char*)+0x54>
    c082:	ldrb	r6, [r0, #12]
    c084:	tst	r7, r6
      c += 'a' - 'A';
    c086:	itt	ne
    c088:	addne	r2, #32
    c08a:	uxtbne	r2, r2
    }
    name[j++] = c;
    c08c:	strb	r2, [r5, r3]
    c08e:	adds	r3, #1
    c090:	uxtb	r3, r3
    c092:	adds	r1, #1
  if (!dir) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // format name
  for (uint8_t i = 0; i < 11; i++) {
    c094:	cmp	r1, #11
    c096:	bne.n	c06e <FatFile::getSFN(char*)+0x36>
    if ('A' <= c && c <= 'Z' && (lcBit & dir->caseFlags)) {
      c += 'a' - 'A';
    }
    name[j++] = c;
  }
  name[j] = '\0';
    c098:	movs	r2, #0
    c09a:	strb	r2, [r5, r3]
  return j;
    c09c:	mov	r0, r3
    c09e:	pop	{r3, r4, r5, r6, r7, pc}
      continue;
    }
    if (i == 8) {
      // Position bit for extension.
      lcBit = FAT_CASE_LC_EXT;
      name[j++] = '.';
    c0a0:	strb.w	lr, [r5, r3]
    c0a4:	adds	r3, #1
    c0a6:	uxtb	r3, r3
    c0a8:	ldrb	r2, [r4, #0]
    if (dir->name[i] == ' ') {
      continue;
    }
    if (i == 8) {
      // Position bit for extension.
      lcBit = FAT_CASE_LC_EXT;
    c0aa:	movs	r7, #16
    c0ac:	b.n	c07a <FatFile::getSFN(char*)+0x42>
    c0ae:	nop

0000c0b0 <FsBaseFile::FsBaseFile(FsBaseFile const&)>:
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */
#include "FsLib.h"
//------------------------------------------------------------------------------
FsBaseFile::FsBaseFile(const FsBaseFile& from) {
    c0b0:	push	{r3, r4, r5, r6, r7, lr}
    c0b2:	movs	r5, #0
    c0b4:	str	r5, [r0, #56]	; 0x38
  m_fFile = nullptr;
  m_xFile = nullptr;
  if (from.m_fFile) {
    c0b6:	ldr	r4, [r1, #56]	; 0x38
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */
#include "FsLib.h"
//------------------------------------------------------------------------------
FsBaseFile::FsBaseFile(const FsBaseFile& from) {
    c0b8:	str	r5, [r0, #60]	; 0x3c
    c0ba:	mov	r6, r0
    c0bc:	mov	r7, r1
  m_fFile = nullptr;
  m_xFile = nullptr;
  if (from.m_fFile) {
    c0be:	cbz	r4, c0e4 <FsBaseFile::FsBaseFile(FsBaseFile const&)+0x34>
    m_fFile = new (m_fileMem) FatFile;
    c0c0:	mov	r1, r0
    c0c2:	movs	r0, #36	; 0x24
    c0c4:	bl	c320 <operator new(unsigned int, unsigned long*)>
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() {}
    c0c8:	strb	r5, [r0, #0]
    c0ca:	strb	r5, [r0, #1]
    c0cc:	strb	r5, [r0, #2]
    c0ce:	str	r0, [r6, #56]	; 0x38
    *m_fFile = *from.m_fFile;
    c0d0:	ldr	r5, [r7, #56]	; 0x38
    c0d2:	mov	r4, r0
    c0d4:	ldmia	r5!, {r0, r1, r2, r3}
    c0d6:	stmia	r4!, {r0, r1, r2, r3}
    c0d8:	ldmia	r5!, {r0, r1, r2, r3}
    c0da:	stmia	r4!, {r0, r1, r2, r3}
    c0dc:	ldr	r3, [r5, #0]
    c0de:	str	r3, [r4, #0]
  } else if (from.m_xFile) {
    m_xFile = new (m_fileMem) ExFatFile;
    *m_xFile = *from.m_xFile;
  }
}
    c0e0:	mov	r0, r6
    c0e2:	pop	{r3, r4, r5, r6, r7, pc}
  m_fFile = nullptr;
  m_xFile = nullptr;
  if (from.m_fFile) {
    m_fFile = new (m_fileMem) FatFile;
    *m_fFile = *from.m_fFile;
  } else if (from.m_xFile) {
    c0e4:	ldr	r3, [r1, #60]	; 0x3c
    c0e6:	cmp	r3, #0
    c0e8:	beq.n	c0e0 <FsBaseFile::FsBaseFile(FsBaseFile const&)+0x30>
    m_xFile = new (m_fileMem) ExFatFile;
    c0ea:	mov	r1, r0
    c0ec:	movs	r0, #56	; 0x38
    c0ee:	bl	c320 <operator new(unsigned int, unsigned long*)>
    c0f2:	strb.w	r4, [r0, #49]	; 0x31
    c0f6:	strb.w	r4, [r0, #50]	; 0x32
    c0fa:	strb.w	r4, [r0, #51]	; 0x33
    c0fe:	str	r0, [r6, #60]	; 0x3c
    *m_xFile = *from.m_xFile;
    c100:	ldr	r3, [r7, #60]	; 0x3c
    c102:	mov	r2, r0
    c104:	add.w	r1, r3, #48	; 0x30
    c108:	ldr	r5, [r3, #0]
    c10a:	ldr	r4, [r3, #4]
    c10c:	ldr	r0, [r3, #8]
    c10e:	ldr	r7, [r3, #12]
    c110:	str	r7, [r2, #12]
    c112:	adds	r3, #16
    c114:	cmp	r3, r1
    c116:	str	r5, [r2, #0]
    c118:	str	r4, [r2, #4]
    c11a:	str	r0, [r2, #8]
    c11c:	add.w	r2, r2, #16
    c120:	bne.n	c108 <FsBaseFile::FsBaseFile(FsBaseFile const&)+0x58>
    c122:	ldr	r3, [r3, #0]
    c124:	str	r3, [r2, #0]
    c126:	b.n	c0e0 <FsBaseFile::FsBaseFile(FsBaseFile const&)+0x30>

0000c128 <FsBaseFile::close()>:
    *m_xFile = *from.m_xFile;
  }
  return *this;
}
//------------------------------------------------------------------------------
bool FsBaseFile::close() {
    c128:	push	{r4, lr}
    c12a:	mov	r4, r0
  if (m_fFile && m_fFile->close()) {
    c12c:	ldr	r0, [r0, #56]	; 0x38
    c12e:	cbz	r0, c13c <FsBaseFile::close()+0x14>
    c130:	bl	a7cc <FatFile::close()>
    c134:	cbz	r0, c13c <FsBaseFile::close()+0x14>
    m_fFile = nullptr;
    c136:	movs	r3, #0
    c138:	str	r3, [r4, #56]	; 0x38
    return true;
    c13a:	pop	{r4, pc}
  }
  if (m_xFile && m_xFile->close()) {
    c13c:	ldr	r0, [r4, #60]	; 0x3c
    c13e:	cbz	r0, c14c <FsBaseFile::close()+0x24>
    c140:	bl	8da0 <ExFatFile::close()>
    c144:	cbz	r0, c14c <FsBaseFile::close()+0x24>
    m_xFile = nullptr;
    c146:	movs	r3, #0
    c148:	str	r3, [r4, #60]	; 0x3c
    c14a:	pop	{r4, pc}
    return true;
  }
  return false;
    c14c:	movs	r0, #0
}
    c14e:	pop	{r4, pc}

0000c150 <FsBaseFile::open(FsVolume*, char const*, int)>:
  }
  return false;
}
//------------------------------------------------------------------------------
bool FsBaseFile::open(FsVolume* vol, const char* path, oflag_t oflag) {
  if (!vol) {
    c150:	cbz	r1, c1c6 <FsBaseFile::open(FsVolume*, char const*, int)+0x76>
    m_xFile = nullptr;
  }
  return false;
}
//------------------------------------------------------------------------------
bool FsBaseFile::open(FsVolume* vol, const char* path, oflag_t oflag) {
    c152:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c156:	mov	r4, r1
    c158:	mov	r5, r0
    c15a:	mov	r8, r3
    c15c:	mov	r7, r2
  if (!vol) {
    return false;
  }
  close();
    c15e:	bl	c128 <FsBaseFile::close()>
  if (vol->m_fVol) {
    c162:	ldr.w	r6, [r4, #1152]	; 0x480
    c166:	cbz	r6, c194 <FsBaseFile::open(FsVolume*, char const*, int)+0x44>
    m_fFile = new (m_fileMem) FatFile;
    c168:	mov	r1, r5
    c16a:	movs	r0, #36	; 0x24
    c16c:	bl	c320 <operator new(unsigned int, unsigned long*)>
    c170:	movs	r1, #0
    c172:	strb	r1, [r0, #0]
    c174:	strb	r1, [r0, #1]
    c176:	strb	r1, [r0, #2]
    if (m_fFile && m_fFile->open(vol->m_fVol, path, oflag)) {
    c178:	ldr.w	r1, [r4, #1152]	; 0x480
  if (!vol) {
    return false;
  }
  close();
  if (vol->m_fVol) {
    m_fFile = new (m_fileMem) FatFile;
    c17c:	str	r0, [r5, #56]	; 0x38
    if (m_fFile && m_fFile->open(vol->m_fVol, path, oflag)) {
    c17e:	mov	r3, r8
    c180:	mov	r2, r7
    c182:	bl	aabc <FatFile::open(FatVolume*, char const*, int)>
    c186:	cbz	r0, c18e <FsBaseFile::open(FsVolume*, char const*, int)+0x3e>
      return true;
    c188:	movs	r0, #1
    c18a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    }
    m_fFile = nullptr;
    c18e:	str	r0, [r5, #56]	; 0x38
    c190:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  } else if (vol->m_xVol) {
    c194:	ldr.w	r3, [r4, #1156]	; 0x484
    c198:	cbz	r3, c1ca <FsBaseFile::open(FsVolume*, char const*, int)+0x7a>
    m_xFile = new (m_fileMem) ExFatFile;
    c19a:	mov	r1, r5
    c19c:	movs	r0, #56	; 0x38
    c19e:	bl	c320 <operator new(unsigned int, unsigned long*)>
    c1a2:	strb.w	r6, [r0, #49]	; 0x31
    c1a6:	strb.w	r6, [r0, #50]	; 0x32
    c1aa:	strb.w	r6, [r0, #51]	; 0x33
    if (m_xFile && m_xFile->open(vol->m_xVol, path, oflag)) {
    c1ae:	ldr.w	r1, [r4, #1156]	; 0x484
    if (m_fFile && m_fFile->open(vol->m_fVol, path, oflag)) {
      return true;
    }
    m_fFile = nullptr;
  } else if (vol->m_xVol) {
    m_xFile = new (m_fileMem) ExFatFile;
    c1b2:	str	r0, [r5, #60]	; 0x3c
    if (m_xFile && m_xFile->open(vol->m_xVol, path, oflag)) {
    c1b4:	mov	r3, r8
    c1b6:	mov	r2, r7
    c1b8:	bl	9704 <ExFatFile::open(ExFatVolume*, char const*, int)>
    c1bc:	cmp	r0, #0
    c1be:	bne.n	c188 <FsBaseFile::open(FsVolume*, char const*, int)+0x38>
      return true;
    }
    m_xFile = nullptr;
    c1c0:	str	r0, [r5, #60]	; 0x3c
  }
  return false;
}
    c1c2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return false;
}
//------------------------------------------------------------------------------
bool FsBaseFile::open(FsVolume* vol, const char* path, oflag_t oflag) {
  if (!vol) {
    return false;
    c1c6:	movs	r0, #0
      return true;
    }
    m_xFile = nullptr;
  }
  return false;
}
    c1c8:	bx	lr
  return false;
}
//------------------------------------------------------------------------------
bool FsBaseFile::open(FsVolume* vol, const char* path, oflag_t oflag) {
  if (!vol) {
    return false;
    c1ca:	movs	r0, #0
    c1cc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000c1d0 <FsBaseFile::openNext(FsBaseFile*, int)>:
    m_xFile = nullptr;
  }
  return false;
}
//------------------------------------------------------------------------------
bool FsBaseFile::openNext(FsBaseFile* dir, oflag_t oflag) {
    c1d0:	push	{r3, r4, r5, r6, r7, lr}
    c1d2:	mov	r5, r1
    c1d4:	mov	r7, r2
    c1d6:	mov	r4, r0
  close();
    c1d8:	bl	c128 <FsBaseFile::close()>
  if (dir->m_fFile) {
    c1dc:	ldr	r6, [r5, #56]	; 0x38
    c1de:	cbz	r6, c204 <FsBaseFile::openNext(FsBaseFile*, int)+0x34>
    m_fFile = new (m_fileMem) FatFile;
    c1e0:	mov	r1, r4
    c1e2:	movs	r0, #36	; 0x24
    c1e4:	bl	c320 <operator new(unsigned int, unsigned long*)>
    c1e8:	movs	r2, #0
    c1ea:	strb	r2, [r0, #0]
    c1ec:	strb	r2, [r0, #1]
    c1ee:	strb	r2, [r0, #2]
    c1f0:	str	r0, [r4, #56]	; 0x38
    if (m_fFile->openNext(dir->m_fFile, oflag)) {
    c1f2:	mov	r2, r7
    c1f4:	ldr	r1, [r5, #56]	; 0x38
    c1f6:	bl	b094 <FatFile::openNext(FatFile*, int)>
    c1fa:	cbz	r0, c200 <FsBaseFile::openNext(FsBaseFile*, int)+0x30>
      return true;
    c1fc:	movs	r0, #1
    c1fe:	pop	{r3, r4, r5, r6, r7, pc}
    }
    m_fFile = nullptr;
    c200:	str	r0, [r4, #56]	; 0x38
    c202:	pop	{r3, r4, r5, r6, r7, pc}
  } else if (dir->m_xFile) {
    c204:	ldr	r0, [r5, #60]	; 0x3c
    c206:	cbz	r0, c22c <FsBaseFile::openNext(FsBaseFile*, int)+0x5c>
    m_xFile = new (m_fileMem) ExFatFile;
    c208:	mov	r1, r4
    c20a:	movs	r0, #56	; 0x38
    c20c:	bl	c320 <operator new(unsigned int, unsigned long*)>
    c210:	strb.w	r6, [r0, #49]	; 0x31
    c214:	strb.w	r6, [r0, #50]	; 0x32
    c218:	strb.w	r6, [r0, #51]	; 0x33
    c21c:	str	r0, [r4, #60]	; 0x3c
    if (m_xFile->openNext(dir->m_xFile, oflag)) {
    c21e:	mov	r2, r7
    c220:	ldr	r1, [r5, #60]	; 0x3c
    c222:	bl	9714 <ExFatFile::openNext(ExFatFile*, int)>
    c226:	cmp	r0, #0
    c228:	bne.n	c1fc <FsBaseFile::openNext(FsBaseFile*, int)+0x2c>
      return true;
    }
    m_xFile = nullptr;
    c22a:	str	r0, [r4, #60]	; 0x3c
  }
  return false;
}
    c22c:	pop	{r3, r4, r5, r6, r7, pc}
    c22e:	nop

0000c230 <FsVolume::begin(SdSpiCard*)>:
 * DEALINGS IN THE SOFTWARE.
 */
#include "FsLib.h"
FsVolume* FsVolume::m_cwv = nullptr;
//------------------------------------------------------------------------------
bool FsVolume::begin(BlockDevice* blockDev) {
    c230:	push	{r4, r5, r6, lr}
  m_blockDev = blockDev;
  m_fVol = nullptr;
    c232:	movs	r6, #0
 * DEALINGS IN THE SOFTWARE.
 */
#include "FsLib.h"
FsVolume* FsVolume::m_cwv = nullptr;
//------------------------------------------------------------------------------
bool FsVolume::begin(BlockDevice* blockDev) {
    c234:	mov	r4, r0
  m_blockDev = blockDev;
    c236:	str.w	r1, [r0, #1160]	; 0x488
  m_fVol = nullptr;
    c23a:	str.w	r6, [r0, #1152]	; 0x480
  m_xVol = new (m_volMem) ExFatVolume;
    c23e:	mov	r1, r0
    c240:	mov.w	r0, #1152	; 0x480
    c244:	bl	c320 <operator new(unsigned int, unsigned long*)>
 * \class ExFatPartition
 * \brief Access exFat partitions on raw file devices.
 */
class ExFatPartition {
 public:
  ExFatPartition() {}
    c248:	strb.w	r6, [r0, #1092]	; 0x444
    c24c:	strb.w	r6, [r0, #1145]	; 0x479
    c250:	strb.w	r6, [r0, #1146]	; 0x47a
    c254:	strb.w	r6, [r0, #1147]	; 0x47b
   * \param[in] setCwv Set current working volume if true.
   * \param[in] part partition to initialize.
   * \return true for success or false for failure.
   */
  bool begin(BlockDevice* dev, bool setCwv = true, uint8_t part = 1) {
    if (!init(dev, part)) {
    c258:	movs	r2, #1
    c25a:	ldr.w	r1, [r4, #1160]	; 0x488
    c25e:	str.w	r0, [r4, #1156]	; 0x484
    c262:	mov	r5, r0
    c264:	bl	9b00 <ExFatPartition::init(SdSpiCard*, unsigned char)>
    c268:	cbnz	r0, c2a6 <FsVolume::begin(SdSpiCard*)+0x76>
  if (m_xVol && m_xVol->begin(m_blockDev, false)) {
    goto done;
  }
  m_xVol = nullptr;
    c26a:	movs	r6, #0
  m_fVol = new (m_volMem) FatVolume;
    c26c:	mov	r1, r4
  m_fVol = nullptr;
  m_xVol = new (m_volMem) ExFatVolume;
  if (m_xVol && m_xVol->begin(m_blockDev, false)) {
    goto done;
  }
  m_xVol = nullptr;
    c26e:	str.w	r6, [r4, #1156]	; 0x484
  m_fVol = new (m_volMem) FatVolume;
    c272:	mov.w	r0, #1128	; 0x468
    c276:	bl	c320 <operator new(unsigned int, unsigned long*)>
 */
class FatPartition {
 public:
  /** Create an instance of FatPartition
   */
  FatPartition() {}
    c27a:	strb	r6, [r0, #7]
    c27c:	strb.w	r6, [r0, #1092]	; 0x444
    c280:	strb.w	r6, [r0, #1093]	; 0x445
    c284:	strb.w	r6, [r0, #1094]	; 0x446
   * \param[in] setCwv Set current working volume if true.
   * \param[in] part partition to initialize.
   * \return true for success or false for failure.
   */
  bool begin(BlockDevice* dev, bool setCwv = true, uint8_t part = 1) {
    if (!init(dev, part)) {
    c288:	movs	r2, #1
    c28a:	ldr.w	r1, [r4, #1160]	; 0x488
    c28e:	str.w	r0, [r4, #1152]	; 0x480
    c292:	mov	r5, r0
    c294:	bl	b5fc <FatPartition::init(SdSpiCard*, unsigned char)>
    c298:	cbnz	r0, c2ca <FsVolume::begin(SdSpiCard*)+0x9a>
  if (m_fVol && m_fVol->begin(m_blockDev, false)) {
    goto done;
  }
  m_cwv = nullptr;
    c29a:	ldr	r3, [pc, #80]	; (c2ec <FsVolume::begin(SdSpiCard*)+0xbc>)
    c29c:	movs	r0, #0
    c29e:	str	r0, [r3, #0]
  m_fVol = nullptr;
    c2a0:	str.w	r0, [r4, #1152]	; 0x480
  return false;

 done:
  m_cwv = this;
  return true;
}
    c2a4:	pop	{r4, r5, r6, pc}
  /**
   * Set volume working directory to root.
   * \return true for success or false for failure.
   */
  bool chdir() {
    m_vwd.close();
    c2a6:	add.w	r6, r5, #1096	; 0x448
    c2aa:	mov	r0, r6
    c2ac:	bl	8da0 <ExFatFile::close()>
    return m_vwd.openRoot(this);
    c2b0:	mov	r1, r5
    c2b2:	mov	r0, r6
    c2b4:	bl	8e64 <ExFatFile::openRoot(ExFatVolume*)>
   */
  bool begin(BlockDevice* dev, bool setCwv = true, uint8_t part = 1) {
    if (!init(dev, part)) {
      return false;
    }
    if (!chdir()) {
    c2b8:	cmp	r0, #0
    c2ba:	beq.n	c26a <FsVolume::begin(SdSpiCard*)+0x3a>
      return false;
    }
    if (setCwv || !m_cwv) {
    c2bc:	ldr	r3, [pc, #48]	; (c2f0 <FsVolume::begin(SdSpiCard*)+0xc0>)
    c2be:	ldr	r2, [r3, #0]
    c2c0:	cbz	r2, c2e8 <FsVolume::begin(SdSpiCard*)+0xb8>
  m_cwv = nullptr;
  m_fVol = nullptr;
  return false;

 done:
  m_cwv = this;
    c2c2:	ldr	r3, [pc, #40]	; (c2ec <FsVolume::begin(SdSpiCard*)+0xbc>)
  return true;
    c2c4:	movs	r0, #1
  m_cwv = nullptr;
  m_fVol = nullptr;
  return false;

 done:
  m_cwv = this;
    c2c6:	str	r4, [r3, #0]
  return true;
    c2c8:	pop	{r4, r5, r6, pc}
  /**
   * Set volume working directory to root.
   * \return true for success or false for failure.
   */
  bool chdir() {
    m_vwd.close();
    c2ca:	addw	r6, r5, #1092	; 0x444
    c2ce:	mov	r0, r6
    c2d0:	bl	a7cc <FatFile::close()>
    return m_vwd.openRoot(this);
    c2d4:	mov	r1, r5
    c2d6:	mov	r0, r6
    c2d8:	bl	aacc <FatFile::openRoot(FatVolume*)>
   */
  bool begin(BlockDevice* dev, bool setCwv = true, uint8_t part = 1) {
    if (!init(dev, part)) {
      return false;
    }
    if (!chdir()) {
    c2dc:	cmp	r0, #0
    c2de:	beq.n	c29a <FsVolume::begin(SdSpiCard*)+0x6a>
      return false;
    }
    if (setCwv || !m_cwv) {
    c2e0:	ldr	r3, [pc, #16]	; (c2f4 <FsVolume::begin(SdSpiCard*)+0xc4>)
    c2e2:	ldr	r2, [r3, #0]
    c2e4:	cmp	r2, #0
    c2e6:	bne.n	c2c2 <FsVolume::begin(SdSpiCard*)+0x92>
      m_cwv = this;
    c2e8:	str	r5, [r3, #0]
    c2ea:	b.n	c2c2 <FsVolume::begin(SdSpiCard*)+0x92>
    c2ec:	.word	0x20002be4
    c2f0:	.word	0x20002bdc
    c2f4:	.word	0x20002be0

0000c2f8 <FsVolume::open(char const*, int)>:
bool FsVolume::ls(print_t* pr, const char* path, uint8_t flags) {
  FsBaseFile dir;
  return dir.open(this, path, O_RDONLY) && dir.ls(pr, flags);
}
//------------------------------------------------------------------------------
FsFile FsVolume::open(const char *path, oflag_t oflag) {
    c2f8:	push	{r3, r4, r5, r6, r7, lr}
class __FlashStringHelper;

class Print
{
  public:
	constexpr Print() : write_error(0) {}
    c2fa:	movs	r5, #0
    c2fc:	mov.w	r7, #1000	; 0x3e8
};
/**
 * \class FsFile
 * \brief FsBaseFile file with Arduino Stream.
 */
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    c300:	ldr	r6, [pc, #24]	; (c31c <FsVolume::open(char const*, int)+0x24>)
    c302:	str	r7, [r0, #8]
    c304:	mov	r4, r0
    c306:	strb	r5, [r0, #4]
    c308:	strb	r5, [r0, #12]
 * \brief FsBaseFile class.
 */
class FsBaseFile {
 public:
  /** Create an instance. */
  FsBaseFile() {}
    c30a:	str	r5, [r0, #72]	; 0x48
    c30c:	str	r5, [r0, #76]	; 0x4c
};
/**
 * \class FsFile
 * \brief FsBaseFile file with Arduino Stream.
 */
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    c30e:	str.w	r6, [r0], #16
  FsFile tmpFile;
  tmpFile.open(this, path, oflag);
    c312:	bl	c150 <FsBaseFile::open(FsVolume*, char const*, int)>
  return tmpFile;
}
    c316:	mov	r0, r4
    c318:	pop	{r3, r4, r5, r6, r7, pc}
    c31a:	nop
    c31c:	.word	0x00014188

0000c320 <operator new(unsigned int, unsigned long*)>:
 */
#include "FsNew.h"
void* operator new(size_t size, newalign_t* ptr) {
  (void)size;
  return ptr;
}
    c320:	mov	r0, r1
    c322:	bx	lr

0000c324 <SdSpiCard::spiStart() [clone .part.7]>:
uint32_t SdSpiCard::sectorCount() {
  csd_t csd;
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStart() {
    c324:	push	{r4, lr}
    c326:	mov	r4, r0
  bool waitNotBusy(SdMillis_t timeoutMS);
  bool writeData(uint8_t token, const uint8_t* src);

#if SPI_DRIVER_SELECT < 2
  void spiActivate() {
    m_spiDriver.activate();
    c328:	bl	c928 <SdSpiArduinoDriver::activate()>
  uint8_t cardCommand(uint8_t cmd, uint32_t arg);
  bool isTimedOut(SdMillis_t startMS, SdMillis_t timeoutMS);
  bool readData(uint8_t* dst, size_t count);
  bool readRegister(uint8_t cmd, void* buf);
  void spiSelect() {
    sdCsWrite(m_csPin, false);
    c32c:	ldrb	r0, [r4, #14]
    c32e:	movs	r1, #0
    c330:	bl	cab0 <sdCsWrite(unsigned char, bool)>
  if (!m_spiActive) {
    spiActivate();
    spiSelect();
    m_spiActive = true;
    c334:	movs	r3, #1
    c336:	strb	r3, [r4, #16]
    c338:	pop	{r4, pc}
    c33a:	nop

0000c33c <SdSpiCard::spiStop() [clone .part.8]>:
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
    c33c:	push	{r4, lr}
  }
  void type(uint8_t value) {
    m_type = value;
  }
  void spiUnselect() {
    sdCsWrite(m_csPin, true);
    c33e:	movs	r1, #1
    c340:	mov	r4, r0
    c342:	ldrb	r0, [r0, #14]
    c344:	bl	cab0 <sdCsWrite(unsigned char, bool)>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver.receive(buf, n);
  }
  void spiSend(uint8_t data) {
    m_spiDriver.send(data);
    c348:	mov	r0, r4
    c34a:	movs	r1, #255	; 0xff
    c34c:	bl	ca3c <SdSpiArduinoDriver::send(unsigned char)>
  }
  void spiBegin(SdSpiConfig spiConfig) {
    m_spiDriver.begin(spiConfig);
  }
  void spiDeactivate() {
    m_spiDriver.deactivate();
    c350:	mov	r0, r4
    c352:	bl	c9c8 <SdSpiArduinoDriver::deactivate()>
  if (m_spiActive) {
    spiUnselect();
    spiSend(0XFF);
    spiDeactivate();
    m_spiActive = false;
    c356:	movs	r3, #0
    c358:	strb	r3, [r4, #16]
    c35a:	pop	{r4, pc}

0000c35c <SdSpiCard::readData(unsigned char*, unsigned int)>:
//------------------------------------------------------------------------------
bool SdSpiCard::readData(uint8_t* dst) {
  return readData(dst, 512);
}
//------------------------------------------------------------------------------
bool SdSpiCard::readData(uint8_t* dst, size_t count) {
    c35c:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    c360:	ldr	r5, [pc, #124]	; (c3e0 <SdSpiCard::readData(unsigned char*, unsigned int)+0x84>)
    c362:	sub	sp, #8
    c364:	ldr	r3, [r5, #0]
    c366:	str	r3, [sp, #0]
	return ret;
    c368:	ldr	r4, [sp, #0]
    c36a:	mov	r8, r0
    c36c:	mov	r6, r1
    c36e:	mov	r7, r2

  DBG_BEGIN_TIME(DBG_WAIT_READ);
  // wait for start sector token
  SdMillis_t t0 = SysCall::curTimeMS();
  while ((m_status = spiReceive()) == 0XFF) {
    if (isTimedOut(t0, SD_READ_TIMEOUT)) {
    c370:	uxth	r4, r4
    c372:	b.n	c384 <SdSpiCard::readData(unsigned char*, unsigned int)+0x28>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    c374:	ldr	r3, [r5, #0]
    c376:	str	r3, [sp, #4]
	return ret;
    c378:	ldr	r3, [sp, #4]
    c37a:	uxth	r3, r3
    c37c:	subs	r3, r3, r4
    c37e:	cmp.w	r3, #300	; 0x12c
    c382:	bgt.n	c3b0 <SdSpiCard::readData(unsigned char*, unsigned int)+0x54>
  }
  uint8_t spiReceive() {
    return m_spiDriver.receive();
    c384:	mov	r0, r8
    c386:	bl	ca00 <SdSpiArduinoDriver::receive()>
#endif  // USE_SD_CRC

  DBG_BEGIN_TIME(DBG_WAIT_READ);
  // wait for start sector token
  SdMillis_t t0 = SysCall::curTimeMS();
  while ((m_status = spiReceive()) == 0XFF) {
    c38a:	cmp	r0, #255	; 0xff
    c38c:	strb.w	r0, [r8, #17]
    c390:	beq.n	c374 <SdSpiCard::readData(unsigned char*, unsigned int)+0x18>
      error(SD_CARD_ERROR_READ_TIMEOUT);
      goto fail;
    }
  }
  DBG_END_TIME(DBG_WAIT_READ);
  if (m_status != DATA_START_SECTOR) {
    c392:	cmp	r0, #254	; 0xfe
    c394:	beq.n	c3b8 <SdSpiCard::readData(unsigned char*, unsigned int)+0x5c>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    c396:	movs	r3, #24
    c398:	strb.w	r3, [r8, #15]
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    c39c:	ldrb.w	r0, [r8, #16]
    c3a0:	cbz	r0, c3aa <SdSpiCard::readData(unsigned char*, unsigned int)+0x4e>
    c3a2:	mov	r0, r8
    c3a4:	bl	c33c <SdSpiCard::spiStop() [clone .part.8]>
#endif  // USE_SD_CRC
  return true;

 fail:
  spiStop();
  return false;
    c3a8:	movs	r0, #0
}
    c3aa:	add	sp, #8
    c3ac:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c3b0:	movs	r3, #29
    c3b2:	strb.w	r3, [r8, #15]
    c3b6:	b.n	c39c <SdSpiCard::readData(unsigned char*, unsigned int)+0x40>
  }
  uint8_t spiReceive() {
    return m_spiDriver.receive();
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver.receive(buf, n);
    c3b8:	mov	r2, r7
    c3ba:	mov	r1, r6
    c3bc:	mov	r0, r8
    c3be:	bl	ca1c <SdSpiArduinoDriver::receive(unsigned char*, unsigned int)>
  if (m_status != DATA_START_SECTOR) {
    error(SD_CARD_ERROR_READ_TOKEN);
    goto fail;
  }
  // transfer data
  if ((m_status = spiReceive(dst, count))) {
    c3c2:	strb.w	r0, [r8, #17]
    c3c6:	cbz	r0, c3d0 <SdSpiCard::readData(unsigned char*, unsigned int)+0x74>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    c3c8:	movs	r3, #37	; 0x25
    c3ca:	strb.w	r3, [r8, #15]
    c3ce:	b.n	c39c <SdSpiCard::readData(unsigned char*, unsigned int)+0x40>
  }
  void spiDeactivate() {
    m_spiDriver.deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver.receive();
    c3d0:	mov	r0, r8
    c3d2:	bl	ca00 <SdSpiArduinoDriver::receive()>
    c3d6:	mov	r0, r8
    c3d8:	bl	ca00 <SdSpiArduinoDriver::receive()>
#else  // USE_SD_CRC
  // discard crc
  spiReceive();
  spiReceive();
#endif  // USE_SD_CRC
  return true;
    c3dc:	movs	r0, #1
    c3de:	b.n	c3aa <SdSpiCard::readData(unsigned char*, unsigned int)+0x4e>
    c3e0:	.word	0x200030a4

0000c3e4 <SdSpiCard::waitNotBusy(unsigned short)>:
#endif  // ENABLE_DEDICATED_SPI
  return true;
}
//------------------------------------------------------------------------------
// wait for card to go not busy
bool SdSpiCard::waitNotBusy(SdMillis_t timeoutMS) {
    c3e4:	push	{r4, r5, r6, r7, lr}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    c3e6:	ldr	r5, [pc, #52]	; (c41c <SdSpiCard::waitNotBusy(unsigned short)+0x38>)
    c3e8:	sub	sp, #12
    c3ea:	ldr	r3, [r5, #0]
    c3ec:	str	r3, [sp, #0]
	return ret;
    c3ee:	ldr	r4, [sp, #0]
    c3f0:	mov	r6, r0
    c3f2:	mov	r7, r1
  }
  return false;
#else  // WDT_YIELD_TIME_MILLIS
  // Check not busy first since yield is not called in isTimedOut.
  while (spiReceive() != 0XFF) {
    if (isTimedOut(t0, timeoutMS)) {
    c3f4:	uxth	r4, r4
    c3f6:	b.n	c406 <SdSpiCard::waitNotBusy(unsigned short)+0x22>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    c3f8:	ldr	r3, [r5, #0]
    c3fa:	str	r3, [sp, #4]
	return ret;
    c3fc:	ldr	r3, [sp, #4]
    c3fe:	uxth	r3, r3
    c400:	subs	r3, r3, r4
    c402:	cmp	r3, r7
    c404:	bgt.n	c416 <SdSpiCard::waitNotBusy(unsigned short)+0x32>
    c406:	mov	r0, r6
    c408:	bl	ca00 <SdSpiArduinoDriver::receive()>
    }
  }
  return false;
#else  // WDT_YIELD_TIME_MILLIS
  // Check not busy first since yield is not called in isTimedOut.
  while (spiReceive() != 0XFF) {
    c40c:	cmp	r0, #255	; 0xff
    c40e:	bne.n	c3f8 <SdSpiCard::waitNotBusy(unsigned short)+0x14>
    if (isTimedOut(t0, timeoutMS)) {
      return false;
    }
  }
  return true;
    c410:	movs	r0, #1
#endif  // WDT_YIELD_TIME_MILLIS
}
    c412:	add	sp, #12
    c414:	pop	{r4, r5, r6, r7, pc}
  return false;
#else  // WDT_YIELD_TIME_MILLIS
  // Check not busy first since yield is not called in isTimedOut.
  while (spiReceive() != 0XFF) {
    if (isTimedOut(t0, timeoutMS)) {
      return false;
    c416:	movs	r0, #0
    }
  }
  return true;
#endif  // WDT_YIELD_TIME_MILLIS
}
    c418:	add	sp, #12
    c41a:	pop	{r4, r5, r6, r7, pc}
    c41c:	.word	0x200030a4

0000c420 <SdSpiCard::writeData(unsigned char, unsigned char const*)>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send one sector of data for write sector or write multiple sectors
bool SdSpiCard::writeData(uint8_t token, const uint8_t* src) {
    c420:	push	{r3, r4, r5, lr}
    c422:	mov	r4, r0
    c424:	mov	r5, r2
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver.receive(buf, n);
  }
  void spiSend(uint8_t data) {
    m_spiDriver.send(data);
    c426:	bl	ca3c <SdSpiArduinoDriver::send(unsigned char)>
  }
  void spiSend(const uint8_t* buf, size_t n) {
    m_spiDriver.send(buf, n);
    c42a:	mov.w	r2, #512	; 0x200
    c42e:	mov	r1, r5
    c430:	mov	r0, r4
    c432:	bl	ca54 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver.receive(buf, n);
  }
  void spiSend(uint8_t data) {
    m_spiDriver.send(data);
    c436:	mov	r0, r4
    c438:	movs	r1, #255	; 0xff
    c43a:	bl	ca3c <SdSpiArduinoDriver::send(unsigned char)>
    c43e:	mov	r0, r4
    c440:	movs	r1, #255	; 0xff
    c442:	bl	ca3c <SdSpiArduinoDriver::send(unsigned char)>
  }
  void spiDeactivate() {
    m_spiDriver.deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver.receive();
    c446:	mov	r0, r4
    c448:	bl	ca00 <SdSpiArduinoDriver::receive()>
  spiSend(src, 512);
  spiSend(crc >> 8);
  spiSend(crc & 0XFF);

  m_status = spiReceive();
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    c44c:	and.w	r3, r0, #31
    c450:	cmp	r3, #5
  spiSend(token);
  spiSend(src, 512);
  spiSend(crc >> 8);
  spiSend(crc & 0XFF);

  m_status = spiReceive();
    c452:	strb	r0, [r4, #17]
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    c454:	beq.n	c46a <SdSpiCard::writeData(unsigned char, unsigned char const*)+0x4a>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    c456:	ldrb	r0, [r4, #16]
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    c458:	movs	r3, #32
    c45a:	strb	r3, [r4, #15]
    c45c:	cbnz	r0, c460 <SdSpiCard::writeData(unsigned char, unsigned char const*)+0x40>
  return true;

 fail:
  spiStop();
  return false;
}
    c45e:	pop	{r3, r4, r5, pc}
    c460:	mov	r0, r4
    c462:	bl	c33c <SdSpiCard::spiStop() [clone .part.8]>
  }
  return true;

 fail:
  spiStop();
  return false;
    c466:	movs	r0, #0
    c468:	pop	{r3, r4, r5, pc}
  m_status = spiReceive();
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    error(SD_CARD_ERROR_WRITE_DATA);
    goto fail;
  }
  return true;
    c46a:	movs	r0, #1

 fail:
  spiStop();
  return false;
}
    c46c:	pop	{r3, r4, r5, pc}
    c46e:	nop

0000c470 <SdSpiCard::writeData(unsigned char const*)>:
  }
  return true;
#endif  // WDT_YIELD_TIME_MILLIS
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeData(const uint8_t* src) {
    c470:	push	{r3, r4, r5, lr}
    c472:	mov	r5, r1
  // wait for previous write to finish
  DBG_BEGIN_TIME(DBG_WRITE_BUSY);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
    c474:	mov.w	r1, #600	; 0x258
  }
  return true;
#endif  // WDT_YIELD_TIME_MILLIS
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeData(const uint8_t* src) {
    c478:	mov	r4, r0
  // wait for previous write to finish
  DBG_BEGIN_TIME(DBG_WRITE_BUSY);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
    c47a:	bl	c3e4 <SdSpiCard::waitNotBusy(unsigned short)>
    c47e:	cbnz	r0, c492 <SdSpiCard::writeData(unsigned char const*)+0x22>
    c480:	movs	r3, #36	; 0x24
    c482:	strb	r3, [r4, #15]
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    c484:	ldrb	r0, [r4, #16]
    c486:	cbz	r0, c490 <SdSpiCard::writeData(unsigned char const*)+0x20>
    c488:	mov	r0, r4
    c48a:	bl	c33c <SdSpiCard::spiStop() [clone .part.8]>
  }
  return true;

 fail:
  spiStop();
  return false;
    c48e:	movs	r0, #0
}
    c490:	pop	{r3, r4, r5, pc}
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
    error(SD_CARD_ERROR_WRITE_TIMEOUT);
    goto fail;
  }
  DBG_END_TIME(DBG_WRITE_BUSY);
  if (!writeData(WRITE_MULTIPLE_TOKEN, src)) {
    c492:	mov	r2, r5
    c494:	movs	r1, #252	; 0xfc
    c496:	mov	r0, r4
    c498:	bl	c420 <SdSpiCard::writeData(unsigned char, unsigned char const*)>
    c49c:	cmp	r0, #0
    c49e:	beq.n	c484 <SdSpiCard::writeData(unsigned char const*)+0x14>
  return true;

 fail:
  spiStop();
  return false;
}
    c4a0:	pop	{r3, r4, r5, pc}
    c4a2:	nop

0000c4a4 <SdSpiCard::writeStop()>:
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
    c4a4:	push	{r4, r5, r6, lr}
  DBG_BEGIN_TIME(DBG_WRITE_STOP);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
    c4a6:	mov.w	r1, #600	; 0x258
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
    c4aa:	mov	r5, r0
  DBG_BEGIN_TIME(DBG_WRITE_STOP);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
    c4ac:	bl	c3e4 <SdSpiCard::waitNotBusy(unsigned short)>
    c4b0:	mov	r6, r0
    c4b2:	cbnz	r0, c4cc <SdSpiCard::writeStop()+0x28>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    c4b4:	ldrb	r4, [r5, #16]
    c4b6:	movs	r3, #30
    c4b8:	strb	r3, [r5, #15]
    c4ba:	cbnz	r4, c4c0 <SdSpiCard::writeStop()+0x1c>

 fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  spiStop();
  return false;
}
    c4bc:	mov	r0, r4
    c4be:	pop	{r4, r5, r6, pc}
    c4c0:	mov	r0, r5
  return true;

 fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  spiStop();
  return false;
    c4c2:	mov	r4, r6
    c4c4:	bl	c33c <SdSpiCard::spiStop() [clone .part.8]>
}
    c4c8:	mov	r0, r4
    c4ca:	pop	{r4, r5, r6, pc}
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver.receive(buf, n);
  }
  void spiSend(uint8_t data) {
    m_spiDriver.send(data);
    c4cc:	movs	r1, #253	; 0xfd
    c4ce:	mov	r0, r5
    c4d0:	bl	ca3c <SdSpiArduinoDriver::send(unsigned char)>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    c4d4:	ldrb	r4, [r5, #16]
    c4d6:	cbnz	r4, c4de <SdSpiCard::writeStop()+0x3a>
    c4d8:	mov	r4, r6

 fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  spiStop();
  return false;
}
    c4da:	mov	r0, r4
    c4dc:	pop	{r4, r5, r6, pc}
    c4de:	mov	r0, r5
    c4e0:	bl	c33c <SdSpiCard::spiStop() [clone .part.8]>
    c4e4:	b.n	c4bc <SdSpiCard::writeStop()+0x18>
    c4e6:	nop

0000c4e8 <SdSpiCard::syncDevice()>:
}
//------------------------------------------------------------------------------
bool SdSpiCard::syncDevice() {
#if ENABLE_DEDICATED_SPI
  // Insure no recursive loop with cardCommand().
  uint8_t state = m_curState;
    c4e8:	ldrb	r2, [r0, #12]
  m_curState = IDLE_STATE;
    c4ea:	movs	r1, #0
  if (state == WRITE_STATE) {
    c4ec:	cmp	r2, #2
//------------------------------------------------------------------------------
bool SdSpiCard::syncDevice() {
#if ENABLE_DEDICATED_SPI
  // Insure no recursive loop with cardCommand().
  uint8_t state = m_curState;
  m_curState = IDLE_STATE;
    c4ee:	strb	r1, [r0, #12]
  if (state == WRITE_STATE) {
    c4f0:	beq.n	c4fe <SdSpiCard::syncDevice()+0x16>
    return writeStop();
  }
  if (state == READ_STATE) {
    c4f2:	cmp	r2, #1
    c4f4:	beq.n	c4fa <SdSpiCard::syncDevice()+0x12>
    return readStop();
  }
#endif  // ENABLE_DEDICATED_SPI
  return true;
}
    c4f6:	movs	r0, #1
    c4f8:	bx	lr
  m_curState = IDLE_STATE;
  if (state == WRITE_STATE) {
    return writeStop();
  }
  if (state == READ_STATE) {
    return readStop();
    c4fa:	b.w	c7a8 <SdSpiCard::readStop()>
#if ENABLE_DEDICATED_SPI
  // Insure no recursive loop with cardCommand().
  uint8_t state = m_curState;
  m_curState = IDLE_STATE;
  if (state == WRITE_STATE) {
    return writeStop();
    c4fe:	b.w	c4a4 <SdSpiCard::writeStop()>
    c502:	nop

0000c504 <SdSpiCard::cardCommand(unsigned char, unsigned long)>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
    c504:	push	{r4, r5, r6, r7, lr}
    c506:	sub	sp, #12
#if ENABLE_DEDICATED_SPI
  if (m_curState != IDLE_STATE && !syncDevice()) {
    c508:	ldrb	r3, [r0, #12]
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
    c50a:	str	r2, [sp, #4]
    c50c:	mov	r4, r0
    c50e:	mov	r6, r1
#if ENABLE_DEDICATED_SPI
  if (m_curState != IDLE_STATE && !syncDevice()) {
    c510:	cbnz	r3, c568 <SdSpiCard::cardCommand(unsigned char, unsigned long)+0x64>
    return 0XFF;
  }
#endif  // ENABLE_DEDICATED_SPI
  // select card
  if (!m_spiActive) {
    c512:	ldrb	r3, [r4, #16]
    c514:	cmp	r3, #0
    c516:	beq.n	c582 <SdSpiCard::cardCommand(unsigned char, unsigned long)+0x7e>
    spiStart();
  }
  // wait if busy unless CMD0
  if (cmd != CMD0) {
    c518:	cbnz	r6, c576 <SdSpiCard::cardCommand(unsigned char, unsigned long)+0x72>
    c51a:	orr.w	r1, r6, #64	; 0x40
    c51e:	mov	r0, r4
    c520:	bl	ca3c <SdSpiArduinoDriver::send(unsigned char)>
    c524:	add	r7, sp, #4
    c526:	add	r5, sp, #8
    c528:	ldrb.w	r1, [r5, #-1]!
    c52c:	mov	r0, r4
    c52e:	bl	ca3c <SdSpiArduinoDriver::send(unsigned char)>
  // send command
  spiSend(cmd | 0x40);

  // send argument
  uint8_t* pa = reinterpret_cast<uint8_t*>(&arg);
  for (int8_t i = 3; i >= 0; i--) {
    c532:	cmp	r7, r5
    c534:	bne.n	c528 <SdSpiCard::cardCommand(unsigned char, unsigned long)+0x24>
    spiSend(pa[i]);
  }

  // send CRC - correct for CMD0 with arg zero or CMD8 with arg 0X1AA
  spiSend(cmd == CMD0 ? 0X95 : 0X87);
    c536:	cmp	r6, #0
    c538:	ite	eq
    c53a:	moveq	r1, #149	; 0x95
    c53c:	movne	r1, #135	; 0x87
    c53e:	mov	r0, r4
    c540:	bl	ca3c <SdSpiArduinoDriver::send(unsigned char)>
  }
  void spiDeactivate() {
    m_spiDriver.deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver.receive();
    c544:	mov	r0, r4
    c546:	bl	ca00 <SdSpiArduinoDriver::receive()>
    c54a:	movs	r5, #11
    c54c:	mov	r0, r4
    c54e:	bl	ca00 <SdSpiArduinoDriver::receive()>

  // discard first fill byte to avoid MISO pull-up problem.
  spiReceive();

  // there are 1-8 fill bytes before response.  fill bytes should be 0XFF.
  for (uint8_t i = 0; ((m_status = spiReceive()) & 0X80) && i < 10; i++) {
    c552:	lsls	r3, r0, #24
    c554:	strb	r0, [r4, #17]
    c556:	bmi.n	c55c <SdSpiCard::cardCommand(unsigned char, unsigned long)+0x58>
  }
  return m_status;
}
    c558:	add	sp, #12
    c55a:	pop	{r4, r5, r6, r7, pc}
    c55c:	subs	r3, r5, #1

  // discard first fill byte to avoid MISO pull-up problem.
  spiReceive();

  // there are 1-8 fill bytes before response.  fill bytes should be 0XFF.
  for (uint8_t i = 0; ((m_status = spiReceive()) & 0X80) && i < 10; i++) {
    c55e:	ands.w	r5, r3, #255	; 0xff
    c562:	bne.n	c54c <SdSpiCard::cardCommand(unsigned char, unsigned long)+0x48>
  }
  return m_status;
}
    c564:	add	sp, #12
    c566:	pop	{r4, r5, r6, r7, pc}
}
//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
#if ENABLE_DEDICATED_SPI
  if (m_curState != IDLE_STATE && !syncDevice()) {
    c568:	bl	c4e8 <SdSpiCard::syncDevice()>
    c56c:	cmp	r0, #0
    c56e:	bne.n	c512 <SdSpiCard::cardCommand(unsigned char, unsigned long)+0xe>
    return 0XFF;
    c570:	movs	r0, #255	; 0xff

  // there are 1-8 fill bytes before response.  fill bytes should be 0XFF.
  for (uint8_t i = 0; ((m_status = spiReceive()) & 0X80) && i < 10; i++) {
  }
  return m_status;
}
    c572:	add	sp, #12
    c574:	pop	{r4, r5, r6, r7, pc}
    spiStart();
  }
  // wait if busy unless CMD0
  if (cmd != CMD0) {
    DBG_BEGIN_TIME(DBG_CMD_BUSY);
    waitNotBusy(SD_CMD_TIMEOUT);
    c576:	mov.w	r1, #300	; 0x12c
    c57a:	mov	r0, r4
    c57c:	bl	c3e4 <SdSpiCard::waitNotBusy(unsigned short)>
    c580:	b.n	c51a <SdSpiCard::cardCommand(unsigned char, unsigned long)+0x16>
    c582:	mov	r0, r4
    c584:	bl	c324 <SdSpiCard::spiStart() [clone .part.7]>
    c588:	b.n	c518 <SdSpiCard::cardCommand(unsigned char, unsigned long)+0x14>
    c58a:	nop

0000c58c <SdSpiCard::begin(SdSpiConfig)>:
#endif  // CRC_CCITT
#endif  // USE_SD_CRC
//==============================================================================
// SdSpiCard member functions
//------------------------------------------------------------------------------
bool SdSpiCard::begin(SdSpiConfig spiConfig) {
    c58c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c590:	sub	sp, #40	; 0x28
    c592:	add	r4, sp, #4
    c594:	stmia.w	r4, {r1, r2, r3}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    c598:	ldr	r6, [pc, #456]	; (c764 <SdSpiCard::begin(SdSpiConfig)+0x1d8>)
    c59a:	ldrb.w	r3, [sp, #4]
    c59e:	ldr	r2, [r6, #0]
  SdMillis_t t0 = SysCall::curTimeMS();
  m_spiActive = false;
  m_errorCode = SD_CARD_ERROR_NONE;
  m_type = 0;
  m_csPin = spiConfig.csPin;
    c5a0:	strb	r3, [r0, #14]
#endif  // CRC_CCITT
#endif  // USE_SD_CRC
//==============================================================================
// SdSpiCard member functions
//------------------------------------------------------------------------------
bool SdSpiCard::begin(SdSpiConfig spiConfig) {
    c5a2:	mov	r5, r0
  SdMillis_t t0 = SysCall::curTimeMS();
  m_spiActive = false;
    c5a4:	mov.w	sl, #0
    c5a8:	str	r2, [sp, #20]
  if (!m_spiDriverPtr) {
    error(SD_CARD_ERROR_INVALID_CARD_CONFIG);
    goto fail;
  }
#endif  // SPI_DRIVER_SELECT
  sdCsInit(m_csPin);
    c5aa:	mov	r0, r3
//==============================================================================
// SdSpiCard member functions
//------------------------------------------------------------------------------
bool SdSpiCard::begin(SdSpiConfig spiConfig) {
  SdMillis_t t0 = SysCall::curTimeMS();
  m_spiActive = false;
    c5ac:	strb.w	sl, [r5, #16]
  m_errorCode = SD_CARD_ERROR_NONE;
    c5b0:	strb.w	sl, [r5, #15]
  m_type = 0;
    c5b4:	strb.w	sl, [r5, #18]
    c5b8:	ldrb.w	r9, [sp, #5]
	return ret;
    c5bc:	ldr	r7, [sp, #20]
    c5be:	ldr.w	r8, [sp, #8]
  if (!m_spiDriverPtr) {
    error(SD_CARD_ERROR_INVALID_CARD_CONFIG);
    goto fail;
  }
#endif  // SPI_DRIVER_SELECT
  sdCsInit(m_csPin);
    c5c2:	bl	caa8 <sdCsInit(unsigned char)>
  }
  void type(uint8_t value) {
    m_type = value;
  }
  void spiUnselect() {
    sdCsWrite(m_csPin, true);
    c5c6:	ldrb	r0, [r5, #14]
    c5c8:	movs	r1, #1
    c5ca:	bl	cab0 <sdCsWrite(unsigned char, bool)>
    c5ce:	ldmia.w	r4, {r0, r1, r2}
    c5d2:	add	r3, sp, #28
    c5d4:	stmia.w	r3, {r0, r1, r2}
  /** Save high speed SPISettings after SD initialization.
   *
   * \param[in] maxSck Maximum SCK frequency.
   */
  void setSckSpeed(uint32_t maxSck) {
    m_spiSettings = SPISettings(maxSck, MSBFIRST, SPI_MODE0);
    c5d8:	ldr	r2, [pc, #396]	; (c768 <SdSpiCard::begin(SdSpiConfig)+0x1dc>)
    c5da:	str	r2, [r5, #4]
#if SPI_DRIVER_SELECT < 2
  void spiActivate() {
    m_spiDriver.activate();
  }
  void spiBegin(SdSpiConfig spiConfig) {
    m_spiDriver.begin(spiConfig);
    c5dc:	mov	r0, r5
    c5de:	ldmia	r3, {r1, r2, r3}
    c5e0:	bl	c9a0 <SdSpiArduinoDriver::begin(SdSpiConfig)>
  spiSetSckSpeed(1000UL*SD_MAX_INIT_RATE_KHZ);
  spiBegin(spiConfig);
  uint32_t arg;
#if ENABLE_DEDICATED_SPI
  m_curState = IDLE_STATE;
  m_sharedSpi = spiOptionShared(spiConfig.options);
    c5e4:	and.w	r3, r9, #1
  csd_t csd;
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStart() {
  if (!m_spiActive) {
    c5e8:	ldrb	r2, [r5, #16]
  spiUnselect();
  spiSetSckSpeed(1000UL*SD_MAX_INIT_RATE_KHZ);
  spiBegin(spiConfig);
  uint32_t arg;
#if ENABLE_DEDICATED_SPI
  m_curState = IDLE_STATE;
    c5ea:	strb.w	sl, [r5, #12]
  m_sharedSpi = spiOptionShared(spiConfig.options);
    c5ee:	eor.w	r3, r3, #1
    c5f2:	strb	r3, [r5, #13]
  csd_t csd;
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStart() {
  if (!m_spiActive) {
    c5f4:	cmp	r2, #0
    c5f6:	beq.n	c6ee <SdSpiCard::begin(SdSpiConfig)+0x162>
  }
  void type(uint8_t value) {
    m_type = value;
  }
  void spiUnselect() {
    sdCsWrite(m_csPin, true);
    c5f8:	movs	r1, #1
    c5fa:	ldrb	r0, [r5, #14]
    c5fc:	bl	cab0 <sdCsWrite(unsigned char, bool)>
    c600:	movs	r4, #10
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver.receive(buf, n);
  }
  void spiSend(uint8_t data) {
    m_spiDriver.send(data);
    c602:	movs	r1, #255	; 0xff
    c604:	mov	r0, r5
    c606:	bl	ca3c <SdSpiArduinoDriver::send(unsigned char)>
    c60a:	subs	r3, r4, #1
#endif  // ENABLE_DEDICATED_SPI
  spiStart();

  // must supply min of 74 clock cycles with CS high.
  spiUnselect();
  for (uint8_t i = 0; i < 10; i++) {
    c60c:	ands.w	r4, r3, #255	; 0xff
    c610:	bne.n	c602 <SdSpiCard::begin(SdSpiConfig)+0x76>
  uint8_t cardCommand(uint8_t cmd, uint32_t arg);
  bool isTimedOut(SdMillis_t startMS, SdMillis_t timeoutMS);
  bool readData(uint8_t* dst, size_t count);
  bool readRegister(uint8_t cmd, void* buf);
  void spiSelect() {
    sdCsWrite(m_csPin, false);
    c612:	mov	r1, r4
    c614:	ldrb	r0, [r5, #14]
    c616:	bl	cab0 <sdCsWrite(unsigned char, bool)>
    c61a:	mov.w	r9, #10
  spiSelect();
  DBG_BEGIN_TIME(DBG_CMD0_TIME);
  // command to go idle in SPI mode
  for (uint8_t i = 1;; i++) {
    DBG_EVENT_COUNT(DBG_CMD0_COUNT);
    if (cardCommand(CMD0, 0) == R1_IDLE_STATE) {
    c61e:	movs	r2, #0
    c620:	mov	r1, r2
    c622:	mov	r0, r5
    c624:	bl	c504 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    c628:	cmp	r0, #1
    c62a:	mov	r4, r0
    c62c:	beq.n	c66c <SdSpiCard::begin(SdSpiConfig)+0xe0>
    c62e:	add.w	r3, r9, #4294967295
      break;
    }
    if (i == SD_CMD0_RETRY) {
    c632:	ands.w	r9, r3, #255	; 0xff
    c636:	beq.n	c650 <SdSpiCard::begin(SdSpiConfig)+0xc4>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver.receive(buf, n);
  }
  void spiSend(uint8_t data) {
    m_spiDriver.send(data);
    c638:	movs	r1, #253	; 0xfd
    c63a:	mov	r0, r5
    c63c:	bl	ca3c <SdSpiArduinoDriver::send(unsigned char)>
    c640:	mov.w	r4, #520	; 0x208
  }
  void spiDeactivate() {
    m_spiDriver.deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver.receive();
    c644:	mov	r0, r5
    c646:	bl	ca00 <SdSpiArduinoDriver::receive()>
      goto fail;
    }
    // stop multi-block write
    spiSend(STOP_TRAN_TOKEN);
    // finish block transfer
    for (int i = 0; i < 520; i++) {
    c64a:	subs	r4, #1
    c64c:	bne.n	c644 <SdSpiCard::begin(SdSpiConfig)+0xb8>
    c64e:	b.n	c61e <SdSpiCard::begin(SdSpiConfig)+0x92>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    c650:	movs	r3, #1
    c652:	strb	r3, [r5, #15]
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    c654:	ldrb	r0, [r5, #16]
    c656:	cbnz	r0, c65e <SdSpiCard::begin(SdSpiConfig)+0xd2>
  return true;

 fail:
  spiStop();
  return false;
}
    c658:	add	sp, #40	; 0x28
    c65a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c65e:	mov	r0, r5
    c660:	bl	c33c <SdSpiCard::spiStop() [clone .part.8]>
  spiSetSckSpeed(spiConfig.maxSck);
  return true;

 fail:
  spiStop();
  return false;
    c664:	movs	r0, #0
}
    c666:	add	sp, #40	; 0x28
    c668:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    goto fail;
  }
#endif  // USE_SD_CRC

  // check SD version
  if (!(cardCommand(CMD8, 0x1AA) & R1_ILLEGAL_COMMAND)) {
    c66c:	mov.w	r2, #426	; 0x1aa
    c670:	movs	r1, #8
    c672:	mov	r0, r5
    c674:	bl	c504 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    c678:	lsls	r3, r0, #29
    c67a:	bpl.n	c6f6 <SdSpiCard::begin(SdSpiConfig)+0x16a>
  bool readRegister(uint8_t cmd, void* buf);
  void spiSelect() {
    sdCsWrite(m_csPin, false);
  }
  void type(uint8_t value) {
    m_type = value;
    c67c:	strb	r4, [r5, #18]
    }
  } else {
    type(SD_CARD_TYPE_SD1);
  }
  // initialize card and send host supports SDHC if SD2
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
    c67e:	movs	r4, #0
    c680:	b.n	c692 <SdSpiCard::begin(SdSpiConfig)+0x106>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    c682:	ldr	r3, [r6, #0]
    c684:	str	r3, [sp, #24]
	return ret;
    c686:	ldr	r3, [sp, #24]
  DBG_BEGIN_TIME(DBG_ACMD41_TIME);
  while (cardAcmd(ACMD41, arg) != R1_READY_STATE) {
    DBG_EVENT_COUNT(DBG_ACMD41_COUNT);
    // check for timeout
    if (isTimedOut(t0, SD_INIT_TIMEOUT)) {
    c688:	uxth	r3, r3
    c68a:	subs	r3, r3, r2
    c68c:	cmp.w	r3, #2000	; 0x7d0
    c690:	bgt.n	c716 <SdSpiCard::begin(SdSpiConfig)+0x18a>
  void spiStop();

 private:
  // private functions
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
    cardCommand(CMD55, 0);
    c692:	movs	r2, #0
    c694:	movs	r1, #55	; 0x37
    c696:	mov	r0, r5
    c698:	bl	c504 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    return cardCommand(cmd, arg);
    c69c:	mov	r2, r4
    c69e:	movs	r1, #41	; 0x29
    c6a0:	mov	r0, r5
    c6a2:	bl	c504 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    c6a6:	uxth	r2, r7
    type(SD_CARD_TYPE_SD1);
  }
  // initialize card and send host supports SDHC if SD2
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
  DBG_BEGIN_TIME(DBG_ACMD41_TIME);
  while (cardAcmd(ACMD41, arg) != R1_READY_STATE) {
    c6a8:	cmp	r0, #0
    c6aa:	bne.n	c682 <SdSpiCard::begin(SdSpiConfig)+0xf6>
    }
  }
  DBG_END_TIME(DBG_ACMD41_TIME);

  // if SD2 read OCR register to check for SDHC card
  if (type() == SD_CARD_TYPE_SD2) {
    c6ac:	ldrb	r3, [r5, #18]
    c6ae:	cmp	r3, #2
    c6b0:	beq.n	c71c <SdSpiCard::begin(SdSpiConfig)+0x190>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    c6b2:	ldrb	r3, [r5, #16]
    c6b4:	cbz	r3, c6bc <SdSpiCard::begin(SdSpiConfig)+0x130>
    c6b6:	mov	r0, r5
    c6b8:	bl	c33c <SdSpiCard::spiStop() [clone .part.8]>
    c6bc:	ldr	r1, [pc, #172]	; (c76c <SdSpiCard::begin(SdSpiConfig)+0x1e0>)
				t = SPI_CTAR_PBR(1) | SPI_CTAR_BR(8) | SPI_CTAR_CSSCK(7);
			}
		} else {
			for (uint32_t i=0; i<23; i++) {
				t = ctar_clock_table[i];
				if (clock >= F_BUS / ctar_div_table[i]) break;
    c6be:	ldr	r4, [pc, #176]	; (c770 <SdSpiCard::begin(SdSpiConfig)+0x1e4>)
    }
  } else {
    type(SD_CARD_TYPE_SD1);
  }
  // initialize card and send host supports SDHC if SD2
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
    c6c0:	movs	r3, #0
    c6c2:	b.n	c6ca <SdSpiCard::begin(SdSpiConfig)+0x13e>
				t = SPI_CTAR_PBR(2) | SPI_CTAR_BR(7) | SPI_CTAR_CSSCK(6);
			} else {	 /* F_BUS / 768 */
				t = SPI_CTAR_PBR(1) | SPI_CTAR_BR(8) | SPI_CTAR_CSSCK(7);
			}
		} else {
			for (uint32_t i=0; i<23; i++) {
    c6c4:	cmp	r0, #23
    c6c6:	beq.n	c6da <SdSpiCard::begin(SdSpiConfig)+0x14e>
    c6c8:	mov	r3, r0
				t = ctar_clock_table[i];
				if (clock >= F_BUS / ctar_div_table[i]) break;
    c6ca:	ldrh.w	r2, [r1, #2]!
    c6ce:	sdiv	r2, r4, r2
    c6d2:	cmp	r8, r2
				t = SPI_CTAR_PBR(2) | SPI_CTAR_BR(7) | SPI_CTAR_CSSCK(6);
			} else {	 /* F_BUS / 768 */
				t = SPI_CTAR_PBR(1) | SPI_CTAR_BR(8) | SPI_CTAR_CSSCK(7);
			}
		} else {
			for (uint32_t i=0; i<23; i++) {
    c6d4:	add.w	r0, r3, #1
				t = ctar_clock_table[i];
				if (clock >= F_BUS / ctar_div_table[i]) break;
    c6d8:	bcc.n	c6c4 <SdSpiCard::begin(SdSpiConfig)+0x138>
			} else {	 /* F_BUS / 768 */
				t = SPI_CTAR_PBR(1) | SPI_CTAR_BR(8) | SPI_CTAR_CSSCK(7);
			}
		} else {
			for (uint32_t i=0; i<23; i++) {
				t = ctar_clock_table[i];
    c6da:	ldr	r2, [pc, #152]	; (c774 <SdSpiCard::begin(SdSpiConfig)+0x1e8>)
    c6dc:	ldr.w	r3, [r2, r3, lsl #2]
      spiReceive();
    }
  }
  spiStop();
  spiSetSckSpeed(spiConfig.maxSck);
  return true;
    c6e0:	movs	r0, #1
    c6e2:	orr.w	r3, r3, #939524096	; 0x38000000
    c6e6:	str	r3, [r5, #4]

 fail:
  spiStop();
  return false;
}
    c6e8:	add	sp, #40	; 0x28
    c6ea:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c6ee:	mov	r0, r5
    c6f0:	bl	c324 <SdSpiCard::spiStart() [clone .part.7]>
    c6f4:	b.n	c5f8 <SdSpiCard::begin(SdSpiConfig)+0x6c>
  bool readRegister(uint8_t cmd, void* buf);
  void spiSelect() {
    sdCsWrite(m_csPin, false);
  }
  void type(uint8_t value) {
    m_type = value;
    c6f6:	movs	r3, #2
    c6f8:	strb	r3, [r5, #18]
    c6fa:	movs	r4, #4
  }
  void spiDeactivate() {
    m_spiDriver.deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver.receive();
    c6fc:	mov	r0, r5
    c6fe:	bl	ca00 <SdSpiArduinoDriver::receive()>
    c702:	subs	r4, #1
#endif  // USE_SD_CRC

  // check SD version
  if (!(cardCommand(CMD8, 0x1AA) & R1_ILLEGAL_COMMAND)) {
    type(SD_CARD_TYPE_SD2);
    for (uint8_t i = 0; i < 4; i++) {
    c704:	ands.w	r4, r4, #255	; 0xff
      m_status = spiReceive();
    c708:	strb	r0, [r5, #17]
#endif  // USE_SD_CRC

  // check SD version
  if (!(cardCommand(CMD8, 0x1AA) & R1_ILLEGAL_COMMAND)) {
    type(SD_CARD_TYPE_SD2);
    for (uint8_t i = 0; i < 4; i++) {
    c70a:	bne.n	c6fc <SdSpiCard::begin(SdSpiConfig)+0x170>
      m_status = spiReceive();
    }
    if (m_status != 0XAA) {
    c70c:	cmp	r0, #170	; 0xaa
    c70e:	beq.n	c72e <SdSpiCard::begin(SdSpiConfig)+0x1a2>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    c710:	movs	r3, #6
    c712:	strb	r3, [r5, #15]
    c714:	b.n	c654 <SdSpiCard::begin(SdSpiConfig)+0xc8>
    c716:	movs	r3, #23
    c718:	strb	r3, [r5, #15]
    c71a:	b.n	c654 <SdSpiCard::begin(SdSpiConfig)+0xc8>
  }
  DBG_END_TIME(DBG_ACMD41_TIME);

  // if SD2 read OCR register to check for SDHC card
  if (type() == SD_CARD_TYPE_SD2) {
    if (cardCommand(CMD58, 0)) {
    c71c:	mov	r2, r0
    c71e:	movs	r1, #58	; 0x3a
    c720:	mov	r0, r5
    c722:	bl	c504 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    c726:	cbz	r0, c73c <SdSpiCard::begin(SdSpiConfig)+0x1b0>
    c728:	movs	r3, #18
    c72a:	strb	r3, [r5, #15]
    c72c:	b.n	c654 <SdSpiCard::begin(SdSpiConfig)+0xc8>
    }
  } else {
    type(SD_CARD_TYPE_SD1);
  }
  // initialize card and send host supports SDHC if SD2
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
    c72e:	ldrb	r3, [r5, #18]
    c730:	cmp	r3, #2
    c732:	ite	eq
    c734:	moveq.w	r4, #1073741824	; 0x40000000
    c738:	movne	r4, #0
    c73a:	b.n	c692 <SdSpiCard::begin(SdSpiConfig)+0x106>
  }
  void spiDeactivate() {
    m_spiDriver.deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver.receive();
    c73c:	mov	r0, r5
    c73e:	bl	ca00 <SdSpiArduinoDriver::receive()>
  if (type() == SD_CARD_TYPE_SD2) {
    if (cardCommand(CMD58, 0)) {
      error(SD_CARD_ERROR_CMD58);
      goto fail;
    }
    if ((spiReceive() & 0XC0) == 0XC0) {
    c742:	and.w	r0, r0, #192	; 0xc0
    c746:	cmp	r0, #192	; 0xc0
  bool readRegister(uint8_t cmd, void* buf);
  void spiSelect() {
    sdCsWrite(m_csPin, false);
  }
  void type(uint8_t value) {
    m_type = value;
    c748:	itt	eq
    c74a:	moveq	r3, #3
    c74c:	strbeq	r3, [r5, #18]
  }
  void spiDeactivate() {
    m_spiDriver.deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver.receive();
    c74e:	mov	r0, r5
    c750:	bl	ca00 <SdSpiArduinoDriver::receive()>
    c754:	mov	r0, r5
    c756:	bl	ca00 <SdSpiArduinoDriver::receive()>
    c75a:	mov	r0, r5
    c75c:	bl	ca00 <SdSpiArduinoDriver::receive()>
    c760:	b.n	c6b2 <SdSpiCard::begin(SdSpiConfig)+0x126>
    c762:	nop
    c764:	.word	0x200030a4
    c768:	.word	0x38005006
    c76c:	.word	0x0001454e
    c770:	.word	0x02dc6c00
    c774:	.word	0x00014580

0000c778 <SdSpiCard::readStart(unsigned long)>:
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t sector) {
    c778:	push	{r4, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
    c77a:	ldrb	r3, [r0, #18]
    c77c:	cmp	r3, #3
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t sector) {
    c77e:	mov	r2, r1
  if (type() != SD_CARD_TYPE_SDHC) {
    sector <<= 9;
    c780:	it	ne
    c782:	lslne	r2, r1, #9
  }
  if (cardCommand(CMD18, sector)) {
    c784:	movs	r1, #18
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t sector) {
    c786:	mov	r4, r0
  if (type() != SD_CARD_TYPE_SDHC) {
    sector <<= 9;
  }
  if (cardCommand(CMD18, sector)) {
    c788:	bl	c504 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    c78c:	cbz	r0, c7a2 <SdSpiCard::readStart(unsigned long)+0x2a>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    c78e:	ldrb	r0, [r4, #16]
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    c790:	movs	r3, #12
    c792:	strb	r3, [r4, #15]
    c794:	cbnz	r0, c798 <SdSpiCard::readStart(unsigned long)+0x20>
  return true;

 fail:
  spiStop();
  return false;
}
    c796:	pop	{r4, pc}
    c798:	mov	r0, r4
    c79a:	bl	c33c <SdSpiCard::spiStop() [clone .part.8]>
    c79e:	movs	r0, #0
    c7a0:	pop	{r4, pc}
  if (cardCommand(CMD18, sector)) {
    error(SD_CARD_ERROR_CMD18);
    goto fail;
  }
//  spiStop();
  return true;
    c7a2:	movs	r0, #1

 fail:
  spiStop();
  return false;
}
    c7a4:	pop	{r4, pc}
    c7a6:	nop

0000c7a8 <SdSpiCard::readStop()>:
#endif  // ENABLE_DEDICATED_SPI
 fail:
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStop() {
    c7a8:	push	{r3, r4, r5, lr}
  if (cardCommand(CMD12, 0)) {
    c7aa:	movs	r2, #0
    c7ac:	movs	r1, #12
#endif  // ENABLE_DEDICATED_SPI
 fail:
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStop() {
    c7ae:	mov	r5, r0
  if (cardCommand(CMD12, 0)) {
    c7b0:	bl	c504 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    c7b4:	ldrb	r4, [r5, #16]
 fail:
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStop() {
  if (cardCommand(CMD12, 0)) {
    c7b6:	cbz	r0, c7c2 <SdSpiCard::readStop()+0x1a>
    c7b8:	movs	r3, #9
    c7ba:	strb	r3, [r5, #15]
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    c7bc:	cbnz	r4, c7d4 <SdSpiCard::readStop()+0x2c>
  return true;

 fail:
  spiStop();
  return false;
}
    c7be:	mov	r0, r4
    c7c0:	pop	{r3, r4, r5, pc}
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    c7c2:	cbnz	r4, c7ca <SdSpiCard::readStop()+0x22>
  if (cardCommand(CMD12, 0)) {
    error(SD_CARD_ERROR_CMD12);
    goto fail;
  }
  spiStop();
  return true;
    c7c4:	movs	r4, #1

 fail:
  spiStop();
  return false;
}
    c7c6:	mov	r0, r4
    c7c8:	pop	{r3, r4, r5, pc}
    c7ca:	mov	r0, r5
    c7cc:	bl	c33c <SdSpiCard::spiStop() [clone .part.8]>
    c7d0:	mov	r0, r4
    c7d2:	pop	{r3, r4, r5, pc}
    c7d4:	mov	r0, r5
    c7d6:	movs	r4, #0
    c7d8:	bl	c33c <SdSpiCard::spiStop() [clone .part.8]>
    c7dc:	mov	r0, r4
    c7de:	pop	{r3, r4, r5, pc}

0000c7e0 <SdSpiCard::writeSingle(unsigned long, unsigned char const*)>:
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeSingle(uint32_t sector, const uint8_t* src) {
    c7e0:	push	{r3, r4, r5, lr}
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    c7e2:	ldrb	r3, [r0, #18]
    c7e4:	cmp	r3, #3
    sector <<= 9;
    c7e6:	it	ne
    c7e8:	lslne	r1, r1, #9
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeSingle(uint32_t sector, const uint8_t* src) {
    c7ea:	mov	r5, r2
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    sector <<= 9;
  }
  if (cardCommand(CMD24, sector)) {
    c7ec:	mov	r2, r1
    c7ee:	movs	r1, #24
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeSingle(uint32_t sector, const uint8_t* src) {
    c7f0:	mov	r4, r0
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    sector <<= 9;
  }
  if (cardCommand(CMD24, sector)) {
    c7f2:	bl	c504 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    c7f6:	cbz	r0, c80a <SdSpiCard::writeSingle(unsigned long, unsigned char const*)+0x2a>
    c7f8:	movs	r3, #13
    c7fa:	strb	r3, [r4, #15]
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    c7fc:	ldrb	r0, [r4, #16]
    c7fe:	cbz	r0, c808 <SdSpiCard::writeSingle(unsigned long, unsigned char const*)+0x28>
    c800:	mov	r0, r4
    c802:	bl	c33c <SdSpiCard::spiStop() [clone .part.8]>
  spiStop();
  return true;

 fail:
  spiStop();
  return false;
    c806:	movs	r0, #0
}
    c808:	pop	{r3, r4, r5, pc}
  }
  if (cardCommand(CMD24, sector)) {
    error(SD_CARD_ERROR_CMD24);
    goto fail;
  }
  if (!writeData(DATA_START_SECTOR, src)) {
    c80a:	mov	r2, r5
    c80c:	movs	r1, #254	; 0xfe
    c80e:	mov	r0, r4
    c810:	bl	c420 <SdSpiCard::writeData(unsigned char, unsigned char const*)>
    c814:	cmp	r0, #0
    c816:	beq.n	c7fc <SdSpiCard::writeSingle(unsigned long, unsigned char const*)+0x1c>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    c818:	ldrb	r5, [r4, #16]
    c81a:	cmp	r5, #0
    c81c:	beq.n	c808 <SdSpiCard::writeSingle(unsigned long, unsigned char const*)+0x28>
    c81e:	mov	r0, r4
    c820:	bl	c33c <SdSpiCard::spiStop() [clone .part.8]>
    goto fail;
  }
#endif  // CHECK_FLASH_PROGRAMMING

  spiStop();
  return true;
    c824:	mov	r0, r5
    c826:	pop	{r3, r4, r5, pc}

0000c828 <SdSpiCard::writeStart(unsigned long)>:
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t sector) {
    c828:	push	{r4, lr}
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    c82a:	ldrb	r3, [r0, #18]
    c82c:	cmp	r3, #3
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t sector) {
    c82e:	mov	r2, r1
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    sector <<= 9;
    c830:	it	ne
    c832:	lslne	r2, r1, #9
  }
  if (cardCommand(CMD25, sector)) {
    c834:	movs	r1, #25
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t sector) {
    c836:	mov	r4, r0
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    sector <<= 9;
  }
  if (cardCommand(CMD25, sector)) {
    c838:	bl	c504 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    c83c:	cbz	r0, c852 <SdSpiCard::writeStart(unsigned long)+0x2a>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    c83e:	ldrb	r0, [r4, #16]
    c840:	movs	r3, #14
    c842:	strb	r3, [r4, #15]
    c844:	cbnz	r0, c848 <SdSpiCard::writeStart(unsigned long)+0x20>
  return true;

 fail:
  spiStop();
  return false;
}
    c846:	pop	{r4, pc}
    c848:	mov	r0, r4
    c84a:	bl	c33c <SdSpiCard::spiStop() [clone .part.8]>
    c84e:	movs	r0, #0
    c850:	pop	{r4, pc}
  }
  if (cardCommand(CMD25, sector)) {
    error(SD_CARD_ERROR_CMD25);
    goto fail;
  }
  return true;
    c852:	movs	r0, #1

 fail:
  spiStop();
  return false;
}
    c854:	pop	{r4, pc}
    c856:	nop

0000c858 <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)>:
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readSectors(uint32_t sector, uint8_t* dst, size_t ns) {
    c858:	push	{r3, r4, r5, r6, r7, lr}
    c85a:	mov	r5, r1
#if ENABLE_DEDICATED_SPI
  if (m_curState != READ_STATE || sector != m_curSector) {
    c85c:	ldrb	r1, [r0, #12]
    c85e:	cmp	r1, #1
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readSectors(uint32_t sector, uint8_t* dst, size_t ns) {
    c860:	mov	r6, r0
    c862:	mov	r4, r2
    c864:	mov	r7, r3
#if ENABLE_DEDICATED_SPI
  if (m_curState != READ_STATE || sector != m_curSector) {
    c866:	beq.n	c89c <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x44>
    if (!readStart(sector)) {
    c868:	mov	r1, r5
    c86a:	mov	r0, r6
    c86c:	bl	c778 <SdSpiCard::readStart(unsigned long)>
    c870:	cbz	r0, c898 <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x40>
      goto fail;
    }
    m_curSector = sector;
    m_curState = READ_STATE;
    c872:	movs	r3, #1
#if ENABLE_DEDICATED_SPI
  if (m_curState != READ_STATE || sector != m_curSector) {
    if (!readStart(sector)) {
      goto fail;
    }
    m_curSector = sector;
    c874:	str	r5, [r6, #8]
    m_curState = READ_STATE;
    c876:	strb	r3, [r6, #12]
  }
  for (size_t i = 0; i < ns; i++, dst += 512) {
    c878:	movs	r5, #0
    c87a:	cbnz	r7, c882 <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x2a>
    c87c:	b.n	c8a4 <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x4c>
    c87e:	cmp	r7, r5
    c880:	beq.n	c8a4 <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x4c>
    if (!readData(dst, 512)) {
    c882:	mov	r1, r4
    c884:	mov.w	r2, #512	; 0x200
    c888:	mov	r0, r6
    c88a:	bl	c35c <SdSpiCard::readData(unsigned char*, unsigned int)>
      goto fail;
    }
    m_curSector = sector;
    m_curState = READ_STATE;
  }
  for (size_t i = 0; i < ns; i++, dst += 512) {
    c88e:	adds	r5, #1
    c890:	add.w	r4, r4, #512	; 0x200
    if (!readData(dst, 512)) {
    c894:	cmp	r0, #0
    c896:	bne.n	c87e <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x26>
    }
  }
  return readStop();
#endif  // ENABLE_DEDICATED_SPI
 fail:
  return false;
    c898:	movs	r0, #0
    c89a:	pop	{r3, r4, r5, r6, r7, pc}
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readSectors(uint32_t sector, uint8_t* dst, size_t ns) {
#if ENABLE_DEDICATED_SPI
  if (m_curState != READ_STATE || sector != m_curSector) {
    c89c:	ldr	r3, [r0, #8]
    c89e:	cmp	r3, r5
    c8a0:	bne.n	c868 <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x10>
    c8a2:	b.n	c878 <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x20>
  for (size_t i = 0; i < ns; i++, dst += 512) {
    if (!readData(dst, 512)) {
      goto fail;
    }
  }
  m_curSector += ns;
    c8a4:	ldr	r3, [r6, #8]
  return m_sharedSpi ? syncDevice() : true;
    c8a6:	ldrb	r2, [r6, #13]
  for (size_t i = 0; i < ns; i++, dst += 512) {
    if (!readData(dst, 512)) {
      goto fail;
    }
  }
  m_curSector += ns;
    c8a8:	add	r7, r3
    c8aa:	str	r7, [r6, #8]
  return m_sharedSpi ? syncDevice() : true;
    c8ac:	cbnz	r2, c8b2 <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x5a>
    c8ae:	movs	r0, #1
    c8b0:	pop	{r3, r4, r5, r6, r7, pc}
    c8b2:	mov	r0, r6
  }
  return readStop();
#endif  // ENABLE_DEDICATED_SPI
 fail:
  return false;
}
    c8b4:	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    if (!readData(dst, 512)) {
      goto fail;
    }
  }
  m_curSector += ns;
  return m_sharedSpi ? syncDevice() : true;
    c8b8:	b.w	c4e8 <SdSpiCard::syncDevice()>

0000c8bc <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)>:
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeSectors(uint32_t sector, const uint8_t* src, size_t ns) {
    c8bc:	push	{r3, r4, r5, r6, r7, lr}
    c8be:	mov	r5, r1
#if ENABLE_DEDICATED_SPI
  if (m_curState != WRITE_STATE || m_curSector != sector) {
    c8c0:	ldrb	r1, [r0, #12]
    c8c2:	cmp	r1, #2
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeSectors(uint32_t sector, const uint8_t* src, size_t ns) {
    c8c4:	mov	r6, r0
    c8c6:	mov	r4, r2
    c8c8:	mov	r7, r3
#if ENABLE_DEDICATED_SPI
  if (m_curState != WRITE_STATE || m_curSector != sector) {
    c8ca:	beq.n	c908 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x4c>
    if (!writeStart(sector)) {
    c8cc:	mov	r1, r5
    c8ce:	mov	r0, r6
    c8d0:	bl	c828 <SdSpiCard::writeStart(unsigned long)>
    c8d4:	cbz	r0, c8f8 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x3c>
      goto fail;
    }
    m_curSector = sector;
    m_curState = WRITE_STATE;
    c8d6:	movs	r3, #2
#if ENABLE_DEDICATED_SPI
  if (m_curState != WRITE_STATE || m_curSector != sector) {
    if (!writeStart(sector)) {
      goto fail;
    }
    m_curSector = sector;
    c8d8:	str	r5, [r6, #8]
    m_curState = WRITE_STATE;
    c8da:	strb	r3, [r6, #12]
  }
  for (size_t i = 0; i < ns; i++, src += 512) {
    c8dc:	movs	r5, #0
    c8de:	cbnz	r7, c8e6 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x2a>
    c8e0:	b.n	c910 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x54>
    c8e2:	cmp	r7, r5
    c8e4:	beq.n	c910 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x54>
    if (!writeData(src)) {
    c8e6:	mov	r1, r4
    c8e8:	mov	r0, r6
    c8ea:	bl	c470 <SdSpiCard::writeData(unsigned char const*)>
      goto fail;
    }
    m_curSector = sector;
    m_curState = WRITE_STATE;
  }
  for (size_t i = 0; i < ns; i++, src += 512) {
    c8ee:	adds	r5, #1
    c8f0:	add.w	r4, r4, #512	; 0x200
    if (!writeData(src)) {
    c8f4:	cmp	r0, #0
    c8f6:	bne.n	c8e2 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x26>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    c8f8:	ldrb	r0, [r6, #16]
    c8fa:	cbnz	r0, c8fe <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x42>
#endif  // ENABLE_DEDICATED_SPI

 fail:
  spiStop();
  return false;
}
    c8fc:	pop	{r3, r4, r5, r6, r7, pc}
    c8fe:	mov	r0, r6
    c900:	bl	c33c <SdSpiCard::spiStop() [clone .part.8]>
  return writeStop();
#endif  // ENABLE_DEDICATED_SPI

 fail:
  spiStop();
  return false;
    c904:	movs	r0, #0
}
    c906:	pop	{r3, r4, r5, r6, r7, pc}
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeSectors(uint32_t sector, const uint8_t* src, size_t ns) {
#if ENABLE_DEDICATED_SPI
  if (m_curState != WRITE_STATE || m_curSector != sector) {
    c908:	ldr	r3, [r0, #8]
    c90a:	cmp	r3, r5
    c90c:	bne.n	c8cc <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x10>
    c90e:	b.n	c8dc <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x20>
  for (size_t i = 0; i < ns; i++, src += 512) {
    if (!writeData(src)) {
      goto fail;
    }
  }
  m_curSector += ns;
    c910:	ldr	r3, [r6, #8]
  return m_sharedSpi ? syncDevice() : true;
    c912:	ldrb	r2, [r6, #13]
  for (size_t i = 0; i < ns; i++, src += 512) {
    if (!writeData(src)) {
      goto fail;
    }
  }
  m_curSector += ns;
    c914:	add	r7, r3
    c916:	str	r7, [r6, #8]
  return m_sharedSpi ? syncDevice() : true;
    c918:	cbnz	r2, c91e <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x62>
    c91a:	movs	r0, #1
    c91c:	pop	{r3, r4, r5, r6, r7, pc}
    c91e:	mov	r0, r6
#endif  // ENABLE_DEDICATED_SPI

 fail:
  spiStop();
  return false;
}
    c920:	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    if (!writeData(src)) {
      goto fail;
    }
  }
  m_curSector += ns;
  return m_sharedSpi ? syncDevice() : true;
    c924:	b.w	c4e8 <SdSpiCard::syncDevice()>

0000c928 <SdSpiArduinoDriver::activate()>:
 */
#include "SdSpiDriver.h"
#if defined(SD_USE_CUSTOM_SPI) &&  defined(__arm__) && defined(CORE_TEENSY)
#define USE_BLOCK_TRANSFER 1
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::activate() {
    c928:	push	{r4}
  m_spi->beginTransaction(m_spiSettings);
    c92a:	ldr	r3, [r0, #0]
    c92c:	ldr	r2, [r0, #4]

	// Before using SPI.transfer() or asserting chip select pins,
	// this function is used to gain exclusive access to the SPI bus
	// and configure the correct settings.
	void beginTransaction(SPISettings settings) {
		if (interruptMasksUsed) {
    c92e:	ldrb	r1, [r3, #11]
    c930:	cbz	r1, c960 <SdSpiArduinoDriver::activate()+0x38>
			__disable_irq();
    c932:	cpsid	i
			if (interruptMasksUsed & 0x01) {
    c934:	ldrb	r1, [r3, #11]
    c936:	lsls	r4, r1, #31
    c938:	bpl.n	c948 <SdSpiArduinoDriver::activate()+0x20>
				interruptSave[0] = NVIC_ICER0 & interruptMask[0];
    c93a:	ldr	r0, [pc, #80]	; (c98c <SdSpiArduinoDriver::activate()+0x64>)
    c93c:	ldr	r1, [r3, #12]
    c93e:	ldr	r4, [r0, #0]
    c940:	ands	r1, r4
    c942:	str	r1, [r3, #24]
				NVIC_ICER0 = interruptSave[0];
    c944:	str	r1, [r0, #0]
    c946:	ldrb	r1, [r3, #11]
			}
			#if NVIC_NUM_INTERRUPTS > 32
			if (interruptMasksUsed & 0x02) {
    c948:	lsls	r0, r1, #30
    c94a:	bpl.n	c95a <SdSpiArduinoDriver::activate()+0x32>
				interruptSave[1] = NVIC_ICER1 & interruptMask[1];
    c94c:	ldr	r0, [pc, #64]	; (c990 <SdSpiArduinoDriver::activate()+0x68>)
    c94e:	ldr	r1, [r3, #16]
    c950:	ldr	r4, [r0, #0]
    c952:	ands	r1, r4
    c954:	str	r1, [r3, #28]
				NVIC_ICER1 = interruptSave[1];
    c956:	str	r1, [r0, #0]
    c958:	ldrb	r1, [r3, #11]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 64 && defined(NVIC_ISER2)
			if (interruptMasksUsed & 0x04) {
    c95a:	lsls	r1, r1, #29
    c95c:	bmi.n	c97c <SdSpiArduinoDriver::activate()+0x54>
			if (interruptMasksUsed & 0x08) {
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
				NVIC_ICER3 = interruptSave[3];
			}
			#endif
			__enable_irq();
    c95e:	cpsie	i
	// setCS() is a special function, not intended for use from normal Arduino
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
	KINETISK_SPI_t & port() { return *(KINETISK_SPI_t *)port_addr; }
    c960:	ldr	r3, [r3, #0]
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 1;
		#endif
		if (port().CTAR0 != settings.ctar) {
    c962:	ldr	r1, [r3, #12]
    c964:	cmp	r1, r2
    c966:	beq.n	c978 <SdSpiArduinoDriver::activate()+0x50>
			port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x3F);
    c968:	ldr	r0, [pc, #40]	; (c994 <SdSpiArduinoDriver::activate()+0x6c>)
    c96a:	str	r0, [r3, #0]
			port().CTAR0 = settings.ctar;
			port().CTAR1 = settings.ctar| SPI_CTAR_FMSZ(8);
			port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x3F);
    c96c:	ldr	r1, [pc, #40]	; (c998 <SdSpiArduinoDriver::activate()+0x70>)
		}
		inTransactionFlag = 1;
		#endif
		if (port().CTAR0 != settings.ctar) {
			port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x3F);
			port().CTAR0 = settings.ctar;
    c96e:	str	r2, [r3, #12]
			port().CTAR1 = settings.ctar| SPI_CTAR_FMSZ(8);
    c970:	orr.w	r0, r2, #1073741824	; 0x40000000
    c974:	str	r0, [r3, #16]
			port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x3F);
    c976:	str	r1, [r3, #0]
}
    c978:	pop	{r4}
    c97a:	bx	lr
				NVIC_ICER1 = interruptSave[1];
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 64 && defined(NVIC_ISER2)
			if (interruptMasksUsed & 0x04) {
				interruptSave[2] = NVIC_ICER2 & interruptMask[2];
    c97c:	ldr	r0, [pc, #28]	; (c99c <SdSpiArduinoDriver::activate()+0x74>)
    c97e:	ldr	r1, [r3, #20]
    c980:	ldr	r4, [r0, #0]
    c982:	ands	r1, r4
    c984:	str	r1, [r3, #32]
				NVIC_ICER2 = interruptSave[2];
    c986:	str	r1, [r0, #0]
    c988:	b.n	c95e <SdSpiArduinoDriver::activate()+0x36>
    c98a:	nop
    c98c:	.word	0xe000e180
    c990:	.word	0xe000e184
    c994:	.word	0x003f4001
    c998:	.word	0x803f0000
    c99c:	.word	0xe000e188

0000c9a0 <SdSpiArduinoDriver::begin(SdSpiConfig)>:
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::begin(SdSpiConfig spiConfig) {
    c9a0:	push	{lr}
    c9a2:	sub	sp, #20
    c9a4:	add.w	lr, sp, #16
    c9a8:	stmdb	lr, {r1, r2, r3}
    c9ac:	ldr	r3, [sp, #12]
  if (spiConfig.spiPort) {
    c9ae:	cbz	r3, c9be <SdSpiArduinoDriver::begin(SdSpiConfig)+0x1e>
    m_spi->setMISO(SDCARD_MISO_PIN);
    m_spi->setMOSI(SDCARD_MOSI_PIN);
    m_spi->setSCK(SDCARD_SCK_PIN);
#endif  // defined(SDCARD_SPI) && defined(SDCARD_SS_PIN)
  } else {
    m_spi = &SPI;
    c9b0:	str	r3, [r0, #0]
    c9b2:	mov	r0, r3
  }
  m_spi->begin();
}
    c9b4:	add	sp, #20
    c9b6:	ldr.w	lr, [sp], #4
    m_spi->setSCK(SDCARD_SCK_PIN);
#endif  // defined(SDCARD_SPI) && defined(SDCARD_SS_PIN)
  } else {
    m_spi = &SPI;
  }
  m_spi->begin();
    c9ba:	b.w	7a6c <SPIClass::begin()>
    m_spi->setMISO(SDCARD_MISO_PIN);
    m_spi->setMOSI(SDCARD_MOSI_PIN);
    m_spi->setSCK(SDCARD_SCK_PIN);
#endif  // defined(SDCARD_SPI) && defined(SDCARD_SS_PIN)
  } else {
    m_spi = &SPI;
    c9be:	ldr	r3, [pc, #4]	; (c9c4 <SdSpiArduinoDriver::begin(SdSpiConfig)+0x24>)
    c9c0:	b.n	c9b0 <SdSpiArduinoDriver::begin(SdSpiConfig)+0x10>
    c9c2:	nop
    c9c4:	.word	0x1fff8a60

0000c9c8 <SdSpiArduinoDriver::deactivate()>:
  }
  m_spi->begin();
}
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::deactivate() {
  m_spi->endTransaction();
    c9c8:	ldr	r2, [r0, #0]
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 0;
		#endif
		if (interruptMasksUsed) {
    c9ca:	ldrb	r3, [r2, #11]
    c9cc:	cbz	r3, c9f0 <SdSpiArduinoDriver::deactivate()+0x28>
			if (interruptMasksUsed & 0x01) {
    c9ce:	lsls	r0, r3, #31
    c9d0:	bpl.n	c9da <SdSpiArduinoDriver::deactivate()+0x12>
				NVIC_ISER0 = interruptSave[0];
    c9d2:	ldr	r3, [pc, #32]	; (c9f4 <SdSpiArduinoDriver::deactivate()+0x2c>)
    c9d4:	ldr	r1, [r2, #24]
    c9d6:	str	r1, [r3, #0]
    c9d8:	ldrb	r3, [r2, #11]
			}
			#if NVIC_NUM_INTERRUPTS > 32
			if (interruptMasksUsed & 0x02) {
    c9da:	lsls	r1, r3, #30
    c9dc:	bpl.n	c9e6 <SdSpiArduinoDriver::deactivate()+0x1e>
				NVIC_ISER1 = interruptSave[1];
    c9de:	ldr	r3, [pc, #24]	; (c9f8 <SdSpiArduinoDriver::deactivate()+0x30>)
    c9e0:	ldr	r1, [r2, #28]
    c9e2:	str	r1, [r3, #0]
    c9e4:	ldrb	r3, [r2, #11]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 64 && defined(NVIC_ISER2)
			if (interruptMasksUsed & 0x04) {
    c9e6:	lsls	r3, r3, #29
    c9e8:	bpl.n	c9f0 <SdSpiArduinoDriver::deactivate()+0x28>
				NVIC_ISER2 = interruptSave[2];
    c9ea:	ldr	r3, [pc, #16]	; (c9fc <SdSpiArduinoDriver::deactivate()+0x34>)
    c9ec:	ldr	r2, [r2, #32]
    c9ee:	str	r2, [r3, #0]
    c9f0:	bx	lr
    c9f2:	nop
    c9f4:	.word	0xe000e100
    c9f8:	.word	0xe000e104
    c9fc:	.word	0xe000e108

0000ca00 <SdSpiArduinoDriver::receive()>:
}
//------------------------------------------------------------------------------
uint8_t SdSpiArduinoDriver::receive() {
    ca00:	ldr	r3, [r0, #0]
	// setCS() is a special function, not intended for use from normal Arduino
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
	KINETISK_SPI_t & port() { return *(KINETISK_SPI_t *)port_addr; }
    ca02:	ldr	r2, [r3, #0]
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
    ca04:	mov.w	r1, #2147483648	; 0x80000000
		port().PUSHR = data;
    ca08:	movs	r3, #255	; 0xff
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
    ca0a:	str	r1, [r2, #44]	; 0x2c
		port().PUSHR = data;
    ca0c:	str	r3, [r2, #52]	; 0x34
		while (!(port().SR & SPI_SR_TCF)) ; // wait
    ca0e:	ldr	r3, [r2, #44]	; 0x2c
    ca10:	cmp	r3, #0
    ca12:	bge.n	ca0e <SdSpiArduinoDriver::receive()+0xe>
		return port().POPR;
    ca14:	ldr	r0, [r2, #56]	; 0x38
  return m_spi->transfer(0XFF);
}
    ca16:	uxtb	r0, r0
    ca18:	bx	lr
    ca1a:	nop

0000ca1c <SdSpiArduinoDriver::receive(unsigned char*, unsigned int)>:
//------------------------------------------------------------------------------
uint8_t SdSpiArduinoDriver::receive(uint8_t* buf, size_t count) {
    ca1c:	push	{r4, r5, r6, lr}
    ca1e:	mov	r5, r0
    ca20:	mov	r4, r1
    ca22:	mov	r6, r2
#if USE_BLOCK_TRANSFER
  memset(buf, 0XFF, count);
    ca24:	mov	r0, r1
    ca26:	movs	r1, #255	; 0xff
    ca28:	bl	106cc <memset>
		port().PUSHR = data | SPI_PUSHR_CTAS(1);
		while (!(port().SR & SPI_SR_TCF)) ; // wait
		return port().POPR;
	}

	void inline transfer(void *buf, size_t count) {transfer(buf, buf, count);}
    ca2c:	ldr	r0, [r5, #0]
    ca2e:	mov	r3, r6
    ca30:	mov	r2, r4
    ca32:	mov	r1, r4
    ca34:	bl	7c90 <SPIClass::transfer(void const*, void*, unsigned int)>
  for (size_t i = 0; i < count; i++) {
    buf[i] = m_spi->transfer(0XFF);
  }
#endif  // USE_BLOCK_TRANSFER
  return 0;
}
    ca38:	movs	r0, #0
    ca3a:	pop	{r4, r5, r6, pc}

0000ca3c <SdSpiArduinoDriver::send(unsigned char)>:
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::send(uint8_t data) {
    ca3c:	ldr	r3, [r0, #0]
	// setCS() is a special function, not intended for use from normal Arduino
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
	KINETISK_SPI_t & port() { return *(KINETISK_SPI_t *)port_addr; }
    ca3e:	ldr	r2, [r3, #0]
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
    ca40:	mov.w	r3, #2147483648	; 0x80000000
    ca44:	str	r3, [r2, #44]	; 0x2c
		port().PUSHR = data;
    ca46:	str	r1, [r2, #52]	; 0x34
		while (!(port().SR & SPI_SR_TCF)) ; // wait
    ca48:	ldr	r3, [r2, #44]	; 0x2c
    ca4a:	cmp	r3, #0
    ca4c:	bge.n	ca48 <SdSpiArduinoDriver::send(unsigned char)+0xc>
		return port().POPR;
    ca4e:	ldr	r3, [r2, #56]	; 0x38
    ca50:	bx	lr
    ca52:	nop

0000ca54 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)>:
  m_spi->transfer(data);
}
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::send(const uint8_t* buf , size_t count) {
    ca54:	push	{r4, r5, lr}
#if USE_BLOCK_TRANSFER
  uint32_t tmp[128];
  if (0 < count && count <= 512) {
    ca56:	subs	r5, r2, #1
    ca58:	cmp.w	r5, #512	; 0x200
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::send(uint8_t data) {
  m_spi->transfer(data);
}
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::send(const uint8_t* buf , size_t count) {
    ca5c:	sub.w	sp, sp, #516	; 0x204
    ca60:	mov	r3, r2
#if USE_BLOCK_TRANSFER
  uint32_t tmp[128];
  if (0 < count && count <= 512) {
    ca62:	bcc.n	ca8a <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x36>
    memcpy(tmp, buf, count);
    m_spi->transfer(tmp, count);
    return;
  }
#endif  // USE_BLOCK_TRANSFER
  for (size_t i = 0; i < count; i++) {
    ca64:	cbz	r2, ca84 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x30>
    ca66:	ldr	r2, [r0, #0]
    ca68:	ldr	r2, [r2, #0]
    ca6a:	adds	r0, r1, r3
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
    ca6c:	mov.w	r4, #2147483648	; 0x80000000
    m_spi->transfer(buf[i]);
    ca70:	ldrb.w	r3, [r1], #1
    ca74:	str	r4, [r2, #44]	; 0x2c
		port().PUSHR = data;
    ca76:	str	r3, [r2, #52]	; 0x34
		while (!(port().SR & SPI_SR_TCF)) ; // wait
    ca78:	ldr	r3, [r2, #44]	; 0x2c
    ca7a:	cmp	r3, #0
    ca7c:	bge.n	ca78 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x24>
    memcpy(tmp, buf, count);
    m_spi->transfer(tmp, count);
    return;
  }
#endif  // USE_BLOCK_TRANSFER
  for (size_t i = 0; i < count; i++) {
    ca7e:	cmp	r1, r0
		return port().POPR;
    ca80:	ldr	r3, [r2, #56]	; 0x38
    ca82:	bne.n	ca70 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x1c>
    m_spi->transfer(buf[i]);
  }
}
    ca84:	add.w	sp, sp, #516	; 0x204
    ca88:	pop	{r4, r5, pc}
    ca8a:	mov	r5, r0
    ca8c:	mov	r4, r2
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::send(const uint8_t* buf , size_t count) {
#if USE_BLOCK_TRANSFER
  uint32_t tmp[128];
  if (0 < count && count <= 512) {
    memcpy(tmp, buf, count);
    ca8e:	mov	r0, sp
    ca90:	bl	cb00 <memcpy>
		port().PUSHR = data | SPI_PUSHR_CTAS(1);
		while (!(port().SR & SPI_SR_TCF)) ; // wait
		return port().POPR;
	}

	void inline transfer(void *buf, size_t count) {transfer(buf, buf, count);}
    ca94:	mov	r3, r4
    ca96:	mov	r2, sp
    ca98:	mov	r1, sp
    ca9a:	ldr	r0, [r5, #0]
    ca9c:	bl	7c90 <SPIClass::transfer(void const*, void*, unsigned int)>
  }
#endif  // USE_BLOCK_TRANSFER
  for (size_t i = 0; i < count; i++) {
    m_spi->transfer(buf[i]);
  }
}
    caa0:	add.w	sp, sp, #516	; 0x204
    caa4:	pop	{r4, r5, pc}
    caa6:	nop

0000caa8 <sdCsInit(unsigned char)>:
#include "SdSpiDriver.h"
#if ENABLE_ARDUINO_FEATURES
#if SD_CHIP_SELECT_MODE == 0
//------------------------------------------------------------------------------
void sdCsInit(SdCsPin_t pin) {
  pinMode(pin, OUTPUT);
    caa8:	movs	r1, #1
    caaa:	b.w	d7a8 <pinMode>
    caae:	nop

0000cab0 <sdCsWrite(unsigned char, bool)>:
}
//------------------------------------------------------------------------------
void sdCsWrite(SdCsPin_t pin, bool level) {
  digitalWrite(pin, level);
    cab0:	b.w	d79c <digitalWrite>

0000cab4 <SDClass::~SDClass()>:
	char *filename;
};



class SDClass : public FS
    cab4:	bx	lr
    cab6:	nop

0000cab8 <_GLOBAL__sub_I_SD>:
 */

#include <Arduino.h>
#include <SD.h>

SDClass SD;
    cab8:	push	{r4, r5, r6, r7}
{
public:
	SDClass() { }
    caba:	ldr	r3, [pc, #48]	; (caec <_GLOBAL__sub_I_SD+0x34>)
    cabc:	ldr	r0, [pc, #48]	; (caf0 <_GLOBAL__sub_I_SD+0x38>)
		}
		if (dataMode & 0x04) {
			c |= SPI_CTAR_CPHA;
			t = (t & 0xFFFF0FFF) | ((t & 0xF000) >> 4);
		}
		ctar = c | t;
    cabe:	ldr	r7, [pc, #52]	; (caf4 <_GLOBAL__sub_I_SD+0x3c>)
    cac0:	str	r0, [r3, #0]
    cac2:	movs	r4, #0
#else  // HAS_SDIO_CLASS
class SdSpiCard {
#endif  // HAS_SDIO_CLASS
 public:
  /** Construct an instance of SdSpiCard. */
  SdSpiCard() {}
    cac4:	movs	r5, #41	; 0x29
    cac6:	movs	r6, #1
    cac8:	strb.w	r5, [r3, #1187]	; 0x4a3
    cacc:	strb.w	r4, [r3, #1190]	; 0x4a6
    cad0:	str.w	r7, [r3, #1176]	; 0x498
    cad4:	strb.w	r6, [r3, #1185]	; 0x4a1
    cad8:	str.w	r4, [r3, #1156]	; 0x484
    cadc:	str.w	r4, [r3, #1160]	; 0x488
    cae0:	ldr	r2, [pc, #20]	; (caf8 <_GLOBAL__sub_I_SD+0x40>)
    cae2:	ldr	r1, [pc, #24]	; (cafc <_GLOBAL__sub_I_SD+0x44>)
    cae4:	mov	r0, r3
    cae6:	pop	{r4, r5, r6, r7}
    cae8:	b.w	eb18 <__aeabi_atexit>
    caec:	.word	0x20002be8
    caf0:	.word	0x0001426c
    caf4:	.word	0x38011001
    caf8:	.word	0x1fff8a3c
    cafc:	.word	0x0000cab5

0000cb00 <memcpy>:
#ifdef __ARM_FEATURE_UNALIGNED
	/* In case of UNALIGNED access supported, ip is not used in
	   function body.  */
	mov	ip, r0
#else
	push	{r0}
    cb00:	push	{r0}
#endif
	orr	r3, r1, r0
    cb02:	orr.w	r3, r1, r0
	ands	r3, r3, #3
    cb06:	ands.w	r3, r3, #3
	bne	.Lmisaligned_copy
    cb0a:	bne.n	cbec <memcpy+0xec>

.Lbig_block:
	subs	r2, __OPT_BIG_BLOCK_SIZE
    cb0c:	subs	r2, #64	; 0x40
	blo	.Lmid_block
    cb0e:	bcc.n	cb94 <memcpy+0x94>
.Lbig_block_loop:
	BEGIN_UNROLL_BIG_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    cb10:	ldr.w	r3, [r1], #4
    cb14:	str.w	r3, [r0], #4
    cb18:	ldr.w	r3, [r1], #4
    cb1c:	str.w	r3, [r0], #4
    cb20:	ldr.w	r3, [r1], #4
    cb24:	str.w	r3, [r0], #4
    cb28:	ldr.w	r3, [r1], #4
    cb2c:	str.w	r3, [r0], #4
    cb30:	ldr.w	r3, [r1], #4
    cb34:	str.w	r3, [r0], #4
    cb38:	ldr.w	r3, [r1], #4
    cb3c:	str.w	r3, [r0], #4
    cb40:	ldr.w	r3, [r1], #4
    cb44:	str.w	r3, [r0], #4
    cb48:	ldr.w	r3, [r1], #4
    cb4c:	str.w	r3, [r0], #4
    cb50:	ldr.w	r3, [r1], #4
    cb54:	str.w	r3, [r0], #4
    cb58:	ldr.w	r3, [r1], #4
    cb5c:	str.w	r3, [r0], #4
    cb60:	ldr.w	r3, [r1], #4
    cb64:	str.w	r3, [r0], #4
    cb68:	ldr.w	r3, [r1], #4
    cb6c:	str.w	r3, [r0], #4
    cb70:	ldr.w	r3, [r1], #4
    cb74:	str.w	r3, [r0], #4
    cb78:	ldr.w	r3, [r1], #4
    cb7c:	str.w	r3, [r0], #4
    cb80:	ldr.w	r3, [r1], #4
    cb84:	str.w	r3, [r0], #4
    cb88:	ldr.w	r3, [r1], #4
    cb8c:	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds	r0, __OPT_BIG_BLOCK_SIZE
	adds	r1, __OPT_BIG_BLOCK_SIZE
#endif
	subs	r2, __OPT_BIG_BLOCK_SIZE
    cb90:	subs	r2, #64	; 0x40
	bhs .Lbig_block_loop
    cb92:	bcs.n	cb10 <memcpy+0x10>

.Lmid_block:
	adds	r2, __OPT_BIG_BLOCK_SIZE - __OPT_MID_BLOCK_SIZE
    cb94:	adds	r2, #48	; 0x30
	blo	.Lcopy_word_by_word
    cb96:	bcc.n	cbbc <memcpy+0xbc>
.Lmid_block_loop:
	BEGIN_UNROLL_MID_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    cb98:	ldr.w	r3, [r1], #4
    cb9c:	str.w	r3, [r0], #4
    cba0:	ldr.w	r3, [r1], #4
    cba4:	str.w	r3, [r0], #4
    cba8:	ldr.w	r3, [r1], #4
    cbac:	str.w	r3, [r0], #4
    cbb0:	ldr.w	r3, [r1], #4
    cbb4:	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds    r0, __OPT_MID_BLOCK_SIZE
	adds    r1, __OPT_MID_BLOCK_SIZE
#endif
	subs	r2, __OPT_MID_BLOCK_SIZE
    cbb8:	subs	r2, #16
	bhs	.Lmid_block_loop
    cbba:	bcs.n	cb98 <memcpy+0x98>

.Lcopy_word_by_word:
	adds	r2, __OPT_MID_BLOCK_SIZE - 4
    cbbc:	adds	r2, #12
	blo	.Lcopy_less_than_4
    cbbe:	bcc.n	cbcc <memcpy+0xcc>

	/* Kernel loop for small block copy */
	.align 2
.Lcopy_word_by_word_loop:
	ldr	r3, [r1], #4
    cbc0:	ldr.w	r3, [r1], #4
	str	r3, [r0], #4
    cbc4:	str.w	r3, [r0], #4
	subs	r2, #4
    cbc8:	subs	r2, #4
	bhs	.Lcopy_word_by_word_loop
    cbca:	bcs.n	cbc0 <memcpy+0xc0>

.Lcopy_less_than_4:
	adds	r2, #4
    cbcc:	adds	r2, #4
	beq	.Ldone
    cbce:	beq.n	cbe6 <memcpy+0xe6>

	lsls	r2, r2, #31
    cbd0:	lsls	r2, r2, #31
	itt ne
    cbd2:	itt	ne
	ldrbne  r3, [r1], #1
    cbd4:	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    cbd8:	strbne.w	r3, [r0], #1

	bcc	.Ldone
    cbdc:	bcc.n	cbe6 <memcpy+0xe6>
#ifdef __ARM_FEATURE_UNALIGNED
	ldrh	r3, [r1]
	strh	r3, [r0]
#else
	ldrb	r3, [r1]
    cbde:	ldrb	r3, [r1, #0]
	strb	r3, [r0]
    cbe0:	strb	r3, [r0, #0]
	ldrb	r3, [r1, #1]
    cbe2:	ldrb	r3, [r1, #1]
	strb	r3, [r0, #1]
    cbe4:	strb	r3, [r0, #1]

.Ldone:
#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
#else
	pop	{r0}
    cbe6:	pop	{r0}
#endif
	bx	lr
    cbe8:	bx	lr
    cbea:	nop
	beq	.Ldst_aligned
#else
	/* if len < 12, misalignment adjustment has more overhead than
	just byte-to-byte copy.  Also, len must >=8 to guarantee code
	afterward work correctly.  */
	cmp	r2, #12
    cbec:	cmp	r2, #12
	blo	.Lbyte_copy
    cbee:	bcc.n	cc86 <memcpy+0x186>
	handling of aligned src and misaligned dst need more overhead than
	otherwise.  By doing this the worst case is when initial src is aligned,
	additional up to 4 byte additional copy will executed, which is
	acceptable.  */

	ands	r3, r0, #3
    cbf0:	ands.w	r3, r0, #3
	beq	.Ldst_aligned
    cbf4:	beq.n	cc1a <memcpy+0x11a>

	rsb	r3, #4
    cbf6:	rsb	r3, r3, #4
	subs	r2, r3
    cbfa:	subs	r2, r2, r3

	lsls    r3, r3, #31
    cbfc:	lsls	r3, r3, #31
	itt ne
    cbfe:	itt	ne
	ldrbne  r3, [r1], #1
    cc00:	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    cc04:	strbne.w	r3, [r0], #1

	bcc .Ldst_aligned
    cc08:	bcc.n	cc1a <memcpy+0x11a>
#ifdef __ARM_FEATURE_UNALIGNED
	ldrh    r3, [r1], #2
	strh    r3, [r0], #2
	b	.Ldst_aligned
#else
	ldrb    r3, [r1], #1
    cc0a:	ldrb.w	r3, [r1], #1
	strb    r3, [r0], #1
    cc0e:	strb.w	r3, [r0], #1
	ldrb    r3, [r1], #1
    cc12:	ldrb.w	r3, [r1], #1
	strb    r3, [r0], #1
    cc16:	strb.w	r3, [r0], #1
	/* Now that dst is aligned */
.Ldst_aligned:
	/* if r1 is aligned now, it means r0/r1 has the same misalignment,
	and they are both aligned now.  Go aligned copy.  */
	ands	r3, r1, #3
    cc1a:	ands.w	r3, r1, #3
	beq	.Lbig_block
    cc1e:	beq.w	cb0c <memcpy+0xc>

	/* dst is aligned, but src isn't.  Misaligned copy.  */

	push	{r4, r5}
    cc22:	push	{r4, r5}
	subs	r2, #4
    cc24:	subs	r2, #4

	/* Backward r1 by misaligned bytes, to make r1 aligned.
	Since we need to restore r1 to unaligned address after the loop,
	we need keep the offset bytes to ip and sub it from r1 afterward.  */
	subs	r1, r3
    cc26:	subs	r1, r1, r3
	rsb	ip, r3, #4
    cc28:	rsb	ip, r3, #4

	/* Pre-load on word */
	ldr	r4, [r1], #4
    cc2c:	ldr.w	r4, [r1], #4

	cmp	r3, #2
    cc30:	cmp	r3, #2
	beq	.Lmisaligned_copy_2_2
    cc32:	beq.n	cc68 <memcpy+0x168>
	cmp	r3, #3
    cc34:	cmp	r3, #3
	beq	.Lmisaligned_copy_3_1
    cc36:	beq.n	cc50 <memcpy+0x150>
	subs	r2, #4
	bhs	1b
	.endm

.Lmisaligned_copy_1_3:
	mis_src_copy shift=8
    cc38:	lsrs	r4, r4, #8
    cc3a:	ldr.w	r3, [r1], #4
    cc3e:	lsls	r5, r3, #24
    cc40:	orr.w	r4, r4, r5
    cc44:	str.w	r4, [r0], #4
    cc48:	mov	r4, r3
    cc4a:	subs	r2, #4
    cc4c:	bcs.n	cc38 <memcpy+0x138>
	b	.Lsrc_misaligned_tail
    cc4e:	b.n	cc7e <memcpy+0x17e>

.Lmisaligned_copy_3_1:
	mis_src_copy shift=24
    cc50:	lsrs	r4, r4, #24
    cc52:	ldr.w	r3, [r1], #4
    cc56:	lsls	r5, r3, #8
    cc58:	orr.w	r4, r4, r5
    cc5c:	str.w	r4, [r0], #4
    cc60:	mov	r4, r3
    cc62:	subs	r2, #4
    cc64:	bcs.n	cc50 <memcpy+0x150>
	b	.Lsrc_misaligned_tail
    cc66:	b.n	cc7e <memcpy+0x17e>

.Lmisaligned_copy_2_2:
	/* For 2_2 misalignment, ldr is still faster than 2 x ldrh.  */
	mis_src_copy shift=16
    cc68:	lsrs	r4, r4, #16
    cc6a:	ldr.w	r3, [r1], #4
    cc6e:	lsls	r5, r3, #16
    cc70:	orr.w	r4, r4, r5
    cc74:	str.w	r4, [r0], #4
    cc78:	mov	r4, r3
    cc7a:	subs	r2, #4
    cc7c:	bcs.n	cc68 <memcpy+0x168>

.Lsrc_misaligned_tail:
	adds	r2, #4
    cc7e:	adds	r2, #4
	subs	r1, ip
    cc80:	subs.w	r1, r1, ip
	pop	{r4, r5}
    cc84:	pop	{r4, r5}

#endif /* __ARM_FEATURE_UNALIGNED */

.Lbyte_copy:
	subs	r2, #4
    cc86:	subs	r2, #4
	blo	.Lcopy_less_than_4
    cc88:	bcc.n	cbcc <memcpy+0xcc>

.Lbyte_copy_loop:
	subs    r2, #1
    cc8a:	subs	r2, #1
	ldrb    r3, [r1], #1
    cc8c:	ldrb.w	r3, [r1], #1
	strb    r3, [r0], #1
    cc90:	strb.w	r3, [r0], #1
	bhs	.Lbyte_copy_loop
    cc94:	bcs.n	cc8a <memcpy+0x18a>

	ldrb	r3, [r1]
    cc96:	ldrb	r3, [r1, #0]
	strb	r3, [r0]
    cc98:	strb	r3, [r0, #0]
	ldrb	r3, [r1, #1]
    cc9a:	ldrb	r3, [r1, #1]
	strb	r3, [r0, #1]
    cc9c:	strb	r3, [r0, #1]
	ldrb	r3, [r1, #2]
    cc9e:	ldrb	r3, [r1, #2]
	strb	r3, [r0, #2]
    cca0:	strb	r3, [r0, #2]

#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
#else
	pop	{r0}
    cca2:	pop	{r0}
#endif
	bx	lr
    cca4:	bx	lr
    cca6:	nop

0000cca8 <usb_serial_getchar>:

#define TRANSMIT_FLUSH_TIMEOUT	5   /* in milliseconds */

// get the next character, or -1 if nothing received
int usb_serial_getchar(void)
{
    cca8:	push	{r3, r4, r5, lr}
	unsigned int i;
	int c;

	if (!rx_packet) {
    ccaa:	ldr	r5, [pc, #60]	; (cce8 <usb_serial_getchar+0x40>)
    ccac:	ldr	r0, [r5, #0]
    ccae:	cbz	r0, ccd0 <usb_serial_getchar+0x28>
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
    ccb0:	ldrh	r3, [r0, #2]
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
    ccb2:	ldrh	r2, [r0, #0]
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
    ccb4:	adds	r1, r0, r3
    ccb6:	adds	r3, #1
	if (i >= rx_packet->len) {
    ccb8:	cmp	r3, r2
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
    ccba:	ldrb	r4, [r1, #8]
	if (i >= rx_packet->len) {
    ccbc:	bcs.n	ccc4 <usb_serial_getchar+0x1c>
		usb_free(rx_packet);
		rx_packet = NULL;
	} else {
		rx_packet->index = i;
    ccbe:	strh	r3, [r0, #2]
	}
	return c;
    ccc0:	mov	r0, r4
}
    ccc2:	pop	{r3, r4, r5, pc}
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
		usb_free(rx_packet);
    ccc4:	bl	d9b4 <usb_free>
		rx_packet = NULL;
    ccc8:	movs	r3, #0
	} else {
		rx_packet->index = i;
	}
	return c;
    ccca:	mov	r0, r4
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
		usb_free(rx_packet);
		rx_packet = NULL;
    cccc:	str	r3, [r5, #0]
    ccce:	pop	{r3, r4, r5, pc}
{
	unsigned int i;
	int c;

	if (!rx_packet) {
		if (!usb_configuration) return -1;
    ccd0:	ldr	r3, [pc, #24]	; (ccec <usb_serial_getchar+0x44>)
    ccd2:	ldrb	r3, [r3, #0]
    ccd4:	cbz	r3, cce2 <usb_serial_getchar+0x3a>
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
    ccd6:	movs	r0, #2
    ccd8:	bl	da00 <usb_rx>
    ccdc:	str	r0, [r5, #0]
		if (!rx_packet) return -1;
    ccde:	cmp	r0, #0
    cce0:	bne.n	ccb0 <usb_serial_getchar+0x8>
{
	unsigned int i;
	int c;

	if (!rx_packet) {
		if (!usb_configuration) return -1;
    cce2:	mov.w	r0, #4294967295
    cce6:	pop	{r3, r4, r5, pc}
    cce8:	.word	0x2000309c
    ccec:	.word	0x200031a8

0000ccf0 <usb_serial_peekchar>:
	return c;
}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
    ccf0:	push	{r4, lr}
	if (!rx_packet) {
    ccf2:	ldr	r4, [pc, #36]	; (cd18 <usb_serial_peekchar+0x28>)
    ccf4:	ldr	r0, [r4, #0]
    ccf6:	cbz	r0, cd00 <usb_serial_peekchar+0x10>
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	if (!rx_packet) return -1;
	return rx_packet->buf[rx_packet->index];
    ccf8:	ldrh	r3, [r0, #2]
    ccfa:	add	r0, r3
    ccfc:	ldrb	r0, [r0, #8]
}
    ccfe:	pop	{r4, pc}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	if (!rx_packet) {
		if (!usb_configuration) return -1;
    cd00:	ldr	r3, [pc, #24]	; (cd1c <usb_serial_peekchar+0x2c>)
    cd02:	ldrb	r3, [r3, #0]
    cd04:	cbz	r3, cd12 <usb_serial_peekchar+0x22>
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
    cd06:	movs	r0, #2
    cd08:	bl	da00 <usb_rx>
    cd0c:	str	r0, [r4, #0]
		if (!rx_packet) return -1;
    cd0e:	cmp	r0, #0
    cd10:	bne.n	ccf8 <usb_serial_peekchar+0x8>

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	if (!rx_packet) {
		if (!usb_configuration) return -1;
    cd12:	mov.w	r0, #4294967295
    cd16:	pop	{r4, pc}
    cd18:	.word	0x2000309c
    cd1c:	.word	0x200031a8

0000cd20 <usb_serial_available>:
// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	int count;
	count = usb_rx_byte_count(CDC_RX_ENDPOINT);
	if (rx_packet) count += rx_packet->len - rx_packet->index;
    cd20:	ldr	r3, [pc, #16]	; (cd34 <usb_serial_available+0x14>)
static inline uint32_t usb_rx_byte_count(uint32_t endpoint) __attribute__((always_inline));
static inline uint32_t usb_rx_byte_count(uint32_t endpoint)
{
        endpoint--;
        if (endpoint >= NUM_ENDPOINTS) return 0;
        return usb_rx_byte_count_data[endpoint];
    cd22:	ldr	r2, [pc, #20]	; (cd38 <usb_serial_available+0x18>)
    cd24:	ldr	r3, [r3, #0]

// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	int count;
	count = usb_rx_byte_count(CDC_RX_ENDPOINT);
    cd26:	ldrh	r0, [r2, #2]
	if (rx_packet) count += rx_packet->len - rx_packet->index;
    cd28:	cbz	r3, cd32 <usb_serial_available+0x12>
    cd2a:	ldrh	r2, [r3, #0]
    cd2c:	ldrh	r3, [r3, #2]
    cd2e:	subs	r3, r2, r3
    cd30:	add	r0, r3
	return count;
}
    cd32:	bx	lr
    cd34:	.word	0x2000309c
    cd38:	.word	0x20003224

0000cd3c <usb_serial_flush_input>:
// discard any buffered input
void usb_serial_flush_input(void)
{
	usb_packet_t *rx;

	if (!usb_configuration) return;
    cd3c:	ldr	r3, [pc, #44]	; (cd6c <usb_serial_flush_input+0x30>)
    cd3e:	ldrb	r3, [r3, #0]
    cd40:	cbz	r3, cd6a <usb_serial_flush_input+0x2e>
	return count;
}

// discard any buffered input
void usb_serial_flush_input(void)
{
    cd42:	push	{r4, lr}
	usb_packet_t *rx;

	if (!usb_configuration) return;
	if (rx_packet) {
    cd44:	ldr	r4, [pc, #40]	; (cd70 <usb_serial_flush_input+0x34>)
    cd46:	ldr	r0, [r4, #0]
    cd48:	cbz	r0, cd5e <usb_serial_flush_input+0x22>
		usb_free(rx_packet);
    cd4a:	bl	d9b4 <usb_free>
		rx_packet = NULL;
    cd4e:	movs	r3, #0
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
    cd50:	movs	r0, #2
	usb_packet_t *rx;

	if (!usb_configuration) return;
	if (rx_packet) {
		usb_free(rx_packet);
		rx_packet = NULL;
    cd52:	str	r3, [r4, #0]
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
    cd54:	bl	da00 <usb_rx>
		if (!rx) break;
    cd58:	cbz	r0, cd68 <usb_serial_flush_input+0x2c>
		usb_free(rx);
    cd5a:	bl	d9b4 <usb_free>
	if (rx_packet) {
		usb_free(rx_packet);
		rx_packet = NULL;
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
    cd5e:	movs	r0, #2
    cd60:	bl	da00 <usb_rx>
		if (!rx) break;
    cd64:	cmp	r0, #0
    cd66:	bne.n	cd5a <usb_serial_flush_input+0x1e>
    cd68:	pop	{r4, pc}
    cd6a:	bx	lr
    cd6c:	.word	0x200031a8
    cd70:	.word	0x2000309c

0000cd74 <usb_serial_write>:
	return usb_serial_write(&c, 1);
}


int usb_serial_write(const void *buffer, uint32_t size)
{
    cd74:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t len;
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
    cd78:	ldr.w	r9, [pc, #248]	; ce74 <usb_serial_write+0x100>
	return usb_serial_write(&c, 1);
}


int usb_serial_write(const void *buffer, uint32_t size)
{
    cd7c:	sub	sp, #12
	uint32_t len;
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
    cd7e:	movs	r2, #1
    cd80:	strb.w	r2, [r9]
	while (size > 0) {
    cd84:	str	r1, [sp, #4]
    cd86:	cbz	r1, cde4 <usb_serial_write+0x70>
    cd88:	ldr.w	r8, [pc, #236]	; ce78 <usb_serial_write+0x104>
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
    cd8c:	ldr	r7, [pc, #216]	; (ce68 <usb_serial_write+0xf4>)
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
	while (size > 0) {
    cd8e:	ldr	r6, [sp, #4]
    cd90:	mov	fp, r0
		if (!tx_packet) {
    cd92:	ldr.w	r0, [r8]
    cd96:	cbz	r0, ce06 <usb_serial_write+0x92>
    cd98:	ldr	r5, [pc, #208]	; (ce6c <usb_serial_write+0xf8>)
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
    cd9a:	ldrh	r4, [r0, #2]
    cd9c:	rsb	r1, r4, #64	; 0x40
    cda0:	cmp	r1, r6
    cda2:	it	cs
    cda4:	movcs	r1, r6
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
    cda6:	add.w	lr, r4, r1
					return -1;
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
    cdaa:	movs	r2, #0
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
    cdac:	uxth.w	lr, lr
					return -1;
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
    cdb0:	strb	r2, [r5, #0]
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
		size -= len;
    cdb2:	subs	r6, r6, r1
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
    cdb4:	strh.w	lr, [r0, #2]
			}
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
    cdb8:	add.w	r2, r0, #8
		tx_packet->index += len;
		size -= len;
		while (len-- > 0) *dest++ = *src++;
    cdbc:	cbz	r1, cdd4 <usb_serial_write+0x60>
    cdbe:	subs	r4, #1
    cdc0:	add	r2, r4
    cdc2:	add	r1, fp
    cdc4:	ldrb.w	r4, [fp], #1
    cdc8:	strb.w	r4, [r2, #1]!
    cdcc:	cmp	fp, r1
    cdce:	bne.n	cdc4 <usb_serial_write+0x50>
    cdd0:	ldrh.w	lr, [r0, #2]
		if (tx_packet->index >= CDC_TX_SIZE) {
    cdd4:	cmp.w	lr, #63	; 0x3f
    cdd8:	bhi.n	cdf2 <usb_serial_write+0x7e>
			tx_packet->len = CDC_TX_SIZE;
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
    cdda:	ldr	r2, [pc, #148]	; (ce70 <usb_serial_write+0xfc>)
    cddc:	movs	r1, #5
    cdde:	strb	r1, [r2, #0]
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
	while (size > 0) {
    cde0:	cmp	r6, #0
    cde2:	bne.n	cd92 <usb_serial_write+0x1e>
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
	return ret;
    cde4:	ldr	r0, [sp, #4]
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
    cde6:	movs	r3, #0
    cde8:	strb.w	r3, [r9]
	return ret;
}
    cdec:	add	sp, #12
    cdee:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
		size -= len;
		while (len-- > 0) *dest++ = *src++;
		if (tx_packet->index >= CDC_TX_SIZE) {
			tx_packet->len = CDC_TX_SIZE;
    cdf2:	movs	r2, #64	; 0x40
    cdf4:	strh	r2, [r0, #0]
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
    cdf6:	mov	r1, r0
    cdf8:	movs	r0, #3
    cdfa:	bl	daec <usb_tx>
			tx_packet = NULL;
    cdfe:	movs	r2, #0
    ce00:	str.w	r2, [r8]
    ce04:	b.n	cdda <usb_serial_write+0x66>
	tx_noautoflush = 1;
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
    ce06:	ldrb	r2, [r7, #0]
    ce08:	cbz	r2, ce56 <usb_serial_write+0xe2>
    ce0a:	ldr	r5, [pc, #96]	; (ce6c <usb_serial_write+0xf8>)
    ce0c:	movw	r4, #41721	; 0xa2f9
					tx_noautoflush = 0;
					return -1;
				}
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
					tx_noautoflush = 1;
    ce10:	mov.w	sl, #1
    ce14:	b.n	ce26 <usb_serial_write+0xb2>
					tx_packet = usb_malloc();
					if (tx_packet) break;
					tx_noautoflush = 0;
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    ce16:	subs	r4, #1
    ce18:	beq.n	ce48 <usb_serial_write+0xd4>
    ce1a:	ldrb	r2, [r5, #0]
    ce1c:	cbnz	r2, ce48 <usb_serial_write+0xd4>
					transmit_previous_timeout = 1;
					return -1;
				}
				yield();
    ce1e:	bl	e498 <yield>
	tx_noautoflush = 1;
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
    ce22:	ldrb	r2, [r7, #0]
    ce24:	cbz	r2, ce56 <usb_serial_write+0xe2>
					tx_noautoflush = 0;
					return -1;
				}
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
    ce26:	movs	r0, #3
    ce28:	bl	da3c <usb_tx_packet_count>
    ce2c:	cmp	r0, #7
    ce2e:	bhi.n	ce16 <usb_serial_write+0xa2>
					tx_noautoflush = 1;
    ce30:	strb.w	sl, [r9]
					tx_packet = usb_malloc();
    ce34:	bl	d974 <usb_malloc>
    ce38:	str.w	r0, [r8]
					if (tx_packet) break;
    ce3c:	cmp	r0, #0
    ce3e:	bne.n	cd9a <usb_serial_write+0x26>
					tx_noautoflush = 0;
    ce40:	ldr	r3, [pc, #48]	; (ce74 <usb_serial_write+0x100>)
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    ce42:	subs	r4, #1
				}
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
					tx_noautoflush = 1;
					tx_packet = usb_malloc();
					if (tx_packet) break;
					tx_noautoflush = 0;
    ce44:	strb	r0, [r3, #0]
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    ce46:	bne.n	ce1a <usb_serial_write+0xa6>
					transmit_previous_timeout = 1;
    ce48:	movs	r3, #1
					return -1;
    ce4a:	mov.w	r0, #4294967295
					tx_packet = usb_malloc();
					if (tx_packet) break;
					tx_noautoflush = 0;
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
					transmit_previous_timeout = 1;
    ce4e:	strb	r3, [r5, #0]
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
	return ret;
}
    ce50:	add	sp, #12
    ce52:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
					tx_noautoflush = 0;
    ce56:	movs	r3, #0
					return -1;
    ce58:	mov.w	r0, #4294967295
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
					tx_noautoflush = 0;
    ce5c:	strb.w	r3, [r9]
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
	return ret;
}
    ce60:	add	sp, #12
    ce62:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ce66:	nop
    ce68:	.word	0x200031a8
    ce6c:	.word	0x20003098
    ce70:	.word	0x20003090
    ce74:	.word	0x20003091
    ce78:	.word	0x20003094

0000ce7c <usb_serial_putchar>:
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    ce7c:	push	{lr}
    ce7e:	sub	sp, #12
    ce80:	add	r3, sp, #8
	return usb_serial_write(&c, 1);
    ce82:	movs	r1, #1
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    ce84:	strb.w	r0, [r3, #-1]!
	return usb_serial_write(&c, 1);
    ce88:	mov	r0, r3
    ce8a:	bl	cd74 <usb_serial_write>
}
    ce8e:	add	sp, #12
    ce90:	ldr.w	pc, [sp], #4

0000ce94 <usb_serial_write_buffer_free>:
	tx_noautoflush = 0;
	return ret;
}

int usb_serial_write_buffer_free(void)
{
    ce94:	push	{r3, r4, r5, lr}
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
    ce96:	ldr	r5, [pc, #56]	; (ced0 <usb_serial_write_buffer_free+0x3c>)

int usb_serial_write_buffer_free(void)
{
	uint32_t len;

	tx_noautoflush = 1;
    ce98:	ldr	r4, [pc, #56]	; (ced4 <usb_serial_write_buffer_free+0x40>)
	if (!tx_packet) {
    ce9a:	ldr	r0, [r5, #0]

int usb_serial_write_buffer_free(void)
{
	uint32_t len;

	tx_noautoflush = 1;
    ce9c:	movs	r3, #1
    ce9e:	strb	r3, [r4, #0]
	if (!tx_packet) {
    cea0:	cbz	r0, ceae <usb_serial_write_buffer_free+0x1a>
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
			return 0;
		}
	}
	len = CDC_TX_SIZE - tx_packet->index;
    cea2:	ldrh	r0, [r0, #2]
	// space we just promised the user could write without blocking?
	// But does this come with other performance downsides?  Could it lead to
	// buffer data never actually transmitting in some usage cases?  More
	// investigation is needed.
	// https://github.com/PaulStoffregen/cores/issues/10#issuecomment-61514955
	tx_noautoflush = 0;
    cea4:	movs	r3, #0
    cea6:	strb	r3, [r4, #0]
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
			return 0;
		}
	}
	len = CDC_TX_SIZE - tx_packet->index;
    cea8:	rsb	r0, r0, #64	; 0x40
	// buffer data never actually transmitting in some usage cases?  More
	// investigation is needed.
	// https://github.com/PaulStoffregen/cores/issues/10#issuecomment-61514955
	tx_noautoflush = 0;
	return len;
}
    ceac:	pop	{r3, r4, r5, pc}
{
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
    ceae:	ldr	r3, [pc, #40]	; (ced8 <usb_serial_write_buffer_free+0x44>)
    ceb0:	ldrb	r3, [r3, #0]
    ceb2:	cbnz	r3, ceba <usb_serial_write_buffer_free+0x26>
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
    ceb4:	movs	r0, #0
    ceb6:	strb	r0, [r4, #0]
			return 0;
    ceb8:	pop	{r3, r4, r5, pc}
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
    ceba:	movs	r0, #3
    cebc:	bl	da3c <usb_tx_packet_count>
{
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
    cec0:	cmp	r0, #7
    cec2:	bhi.n	ceb4 <usb_serial_write_buffer_free+0x20>
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
		  (tx_packet = usb_malloc()) == NULL) {
    cec4:	bl	d974 <usb_malloc>
    cec8:	str	r0, [r5, #0]
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
    ceca:	cmp	r0, #0
    cecc:	bne.n	cea2 <usb_serial_write_buffer_free+0xe>
    cece:	b.n	ceb4 <usb_serial_write_buffer_free+0x20>
    ced0:	.word	0x20003094
    ced4:	.word	0x20003091
    ced8:	.word	0x200031a8

0000cedc <usb_serial_flush_output>:
	tx_noautoflush = 0;
	return len;
}

void usb_serial_flush_output(void)
{
    cedc:	push	{r3, r4, r5, r6, r7, lr}
	if (!usb_configuration) return;
    cede:	ldr	r3, [pc, #68]	; (cf24 <usb_serial_flush_output+0x48>)
    cee0:	ldrb	r3, [r3, #0]
    cee2:	cbz	r3, cf08 <usb_serial_flush_output+0x2c>
	tx_noautoflush = 1;
	if (tx_packet) {
    cee4:	ldr	r6, [pc, #64]	; (cf28 <usb_serial_flush_output+0x4c>)
}

void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
    cee6:	ldr	r5, [pc, #68]	; (cf2c <usb_serial_flush_output+0x50>)
	if (tx_packet) {
    cee8:	ldr	r4, [r6, #0]
}

void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
    ceea:	movs	r7, #1
    ceec:	strb	r7, [r5, #0]
	if (tx_packet) {
    ceee:	cbz	r4, cf0a <usb_serial_flush_output+0x2e>
		usb_cdc_transmit_flush_timer = 0;
    cef0:	ldr	r2, [pc, #60]	; (cf30 <usb_serial_flush_output+0x54>)
		tx_packet->len = tx_packet->index;
    cef2:	ldrh	r3, [r4, #2]
void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
	if (tx_packet) {
		usb_cdc_transmit_flush_timer = 0;
    cef4:	movs	r7, #0
    cef6:	strb	r7, [r2, #0]
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    cef8:	mov	r1, r4
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
	if (tx_packet) {
		usb_cdc_transmit_flush_timer = 0;
		tx_packet->len = tx_packet->index;
    cefa:	strh	r3, [r4, #0]
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    cefc:	movs	r0, #3
    cefe:	bl	daec <usb_tx>
		tx_packet = NULL;
    cf02:	str	r7, [r6, #0]
			usb_tx(CDC_TX_ENDPOINT, tx);
		} else {
			usb_cdc_transmit_flush_timer = 1;
		}
	}
	tx_noautoflush = 0;
    cf04:	movs	r3, #0
    cf06:	strb	r3, [r5, #0]
    cf08:	pop	{r3, r4, r5, r6, r7, pc}
		usb_cdc_transmit_flush_timer = 0;
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
    cf0a:	bl	d974 <usb_malloc>
		if (tx) {
			usb_cdc_transmit_flush_timer = 0;
    cf0e:	ldr	r3, [pc, #32]	; (cf30 <usb_serial_flush_output+0x54>)
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
    cf10:	cbz	r0, cf1e <usb_serial_flush_output+0x42>
			usb_cdc_transmit_flush_timer = 0;
			usb_tx(CDC_TX_ENDPOINT, tx);
    cf12:	mov	r1, r0
    cf14:	movs	r0, #3
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_cdc_transmit_flush_timer = 0;
    cf16:	strb	r4, [r3, #0]
			usb_tx(CDC_TX_ENDPOINT, tx);
    cf18:	bl	daec <usb_tx>
    cf1c:	b.n	cf04 <usb_serial_flush_output+0x28>
		} else {
			usb_cdc_transmit_flush_timer = 1;
    cf1e:	strb	r7, [r3, #0]
    cf20:	b.n	cf04 <usb_serial_flush_output+0x28>
    cf22:	nop
    cf24:	.word	0x200031a8
    cf28:	.word	0x20003094
    cf2c:	.word	0x20003091
    cf30:	.word	0x20003090

0000cf34 <usb_serial_flush_callback>:
	}
	tx_noautoflush = 0;
}

void usb_serial_flush_callback(void)
{
    cf34:	push	{r3, r4, r5, lr}
	if (tx_noautoflush) return;
    cf36:	ldr	r3, [pc, #56]	; (cf70 <usb_serial_flush_callback+0x3c>)
    cf38:	ldrb	r3, [r3, #0]
    cf3a:	cbnz	r3, cf5a <usb_serial_flush_callback+0x26>
	if (tx_packet) {
    cf3c:	ldr	r4, [pc, #52]	; (cf74 <usb_serial_flush_callback+0x40>)
    cf3e:	ldr	r1, [r4, #0]
    cf40:	cbz	r1, cf5c <usb_serial_flush_callback+0x28>
    cf42:	and.w	r5, r3, #255	; 0xff
		tx_packet->len = tx_packet->index;
    cf46:	ldrh	r3, [r1, #2]
    cf48:	strh	r3, [r1, #0]
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    cf4a:	movs	r0, #3
    cf4c:	bl	daec <usb_tx>
		tx_packet = NULL;
    cf50:	str	r5, [r4, #0]
    cf52:	pop	{r3, r4, r5, pc}
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_tx(CDC_TX_ENDPOINT, tx);
		} else {
			usb_cdc_transmit_flush_timer = 1;
    cf54:	ldr	r3, [pc, #32]	; (cf78 <usb_serial_flush_callback+0x44>)
    cf56:	movs	r2, #1
    cf58:	strb	r2, [r3, #0]
    cf5a:	pop	{r3, r4, r5, pc}
	if (tx_packet) {
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
    cf5c:	bl	d974 <usb_malloc>
		if (tx) {
    cf60:	cmp	r0, #0
    cf62:	beq.n	cf54 <usb_serial_flush_callback+0x20>
			usb_tx(CDC_TX_ENDPOINT, tx);
    cf64:	mov	r1, r0
		} else {
			usb_cdc_transmit_flush_timer = 1;
		}
	}
}
    cf66:	ldmia.w	sp!, {r3, r4, r5, lr}
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_tx(CDC_TX_ENDPOINT, tx);
    cf6a:	movs	r0, #3
    cf6c:	b.w	daec <usb_tx>
    cf70:	.word	0x20003091
    cf74:	.word	0x20003094
    cf78:	.word	0x20003090

0000cf7c <analog_init>:
#else
#error "F_BUS must be 128, 120, 108, 96, 90, 80, 72, 64, 60, 56, 54, 48, 40, 36, 24, 4 or 2 MHz"
#endif

void analog_init(void)
{
    cf7c:	push	{r4, r5}
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    cf7e:	ldr	r0, [pc, #164]	; (d024 <analog_init+0xa8>)
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    cf80:	ldr	r2, [pc, #164]	; (d028 <analog_init+0xac>)
	#endif

	if (analog_config_bits == 8) {
    cf82:	ldr	r3, [pc, #168]	; (d02c <analog_init+0xb0>)
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    cf84:	ldr	r5, [pc, #168]	; (d030 <analog_init+0xb4>)
void analog_init(void)
{
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    cf86:	movs	r4, #96	; 0x60
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    cf88:	movs	r1, #225	; 0xe1
void analog_init(void)
{
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    cf8a:	strb	r4, [r0, #0]
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    cf8c:	strb	r1, [r2, #0]
	#endif

	if (analog_config_bits == 8) {
    cf8e:	ldrb	r3, [r3, #0]
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    cf90:	ldr	r4, [pc, #160]	; (d034 <analog_init+0xb8>)
	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
	VREF_SC = 0xE1;		// enable 1.2 volt ref
	#endif

	if (analog_config_bits == 8) {
    cf92:	cmp	r3, #8
    cf94:	beq.n	cff8 <analog_init+0x7c>
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
    cf96:	cmp	r3, #10
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    cf98:	ldr	r0, [pc, #156]	; (d038 <analog_init+0xbc>)
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    cf9a:	ldr	r1, [pc, #160]	; (d03c <analog_init+0xc0>)
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
    cf9c:	beq.n	d00e <analog_init+0x92>
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 12) {
    cf9e:	cmp	r3, #12
		ADC0_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
    cfa0:	ite	eq
    cfa2:	moveq	r2, #53	; 0x35
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
		#endif
	} else {
		ADC0_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    cfa4:	movne	r2, #61	; 0x3d
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    cfa6:	movs	r3, #18
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
		#endif
	} else {
		ADC0_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    cfa8:	str	r2, [r5, #0]
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    cfaa:	str	r3, [r4, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    cfac:	str	r2, [r0, #0]
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    cfae:	str	r3, [r1, #0]
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    cfb0:	ldr	r3, [pc, #140]	; (d040 <analog_init+0xc4>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    cfb2:	ldr	r1, [pc, #144]	; (d044 <analog_init+0xc8>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    cfb4:	ldrb	r3, [r3, #0]
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    cfb6:	ldr	r2, [pc, #144]	; (d048 <analog_init+0xcc>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    cfb8:	cbz	r3, cfea <analog_init+0x6e>
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    cfba:	movs	r3, #1
    cfbc:	str	r3, [r1, #0]
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    cfbe:	str	r3, [r2, #0]
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
    cfc0:	ldr	r3, [pc, #136]	; (d04c <analog_init+0xd0>)
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
    cfc2:	ldr	r1, [pc, #140]	; (d050 <analog_init+0xd4>)
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
    cfc4:	ldrb	r3, [r3, #0]
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
    cfc6:	ldr	r2, [pc, #140]	; (d054 <analog_init+0xd8>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
	if (num <= 1) {
    cfc8:	cmp	r3, #1
    cfca:	bls.n	d01a <analog_init+0x9e>
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
		#endif
	} else if (num <= 4) {
    cfcc:	cmp	r3, #4
    cfce:	bls.n	cff0 <analog_init+0x74>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#endif
	} else if (num <= 8) {
    cfd0:	cmp	r3, #8
    cfd2:	bls.n	d012 <analog_init+0x96>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
		#endif
	} else if (num <= 16) {
    cfd4:	cmp	r3, #16
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(2);
    cfd6:	ite	ls
    cfd8:	movls	r3, #134	; 0x86
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(2);
		#endif
	} else {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(3);
    cfda:	movhi	r3, #135	; 0x87
    cfdc:	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(3);
    cfde:	str	r3, [r2, #0]
		#endif
	}
	calibrating = 1;
    cfe0:	ldr	r3, [pc, #116]	; (d058 <analog_init+0xdc>)
    cfe2:	movs	r2, #1
    cfe4:	strb	r2, [r3, #0]
}
    cfe6:	pop	{r4, r5}
    cfe8:	bx	lr
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
    cfea:	str	r3, [r1, #0]
		ADC1_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
    cfec:	str	r3, [r2, #0]
    cfee:	b.n	cfc0 <analog_init+0x44>
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
		#endif
	} else if (num <= 4) {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
    cff0:	movs	r3, #132	; 0x84
    cff2:	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
    cff4:	str	r3, [r2, #0]
    cff6:	b.n	cfe0 <analog_init+0x64>

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    cff8:	add.w	r0, r0, #290816	; 0x47000
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    cffc:	ldr	r1, [pc, #60]	; (d03c <analog_init+0xc0>)

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    cffe:	adds	r0, #8
	VREF_TRM = 0x60;
	VREF_SC = 0xE1;		// enable 1.2 volt ref
	#endif

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    d000:	movs	r2, #1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    d002:	movs	r3, #19
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    d004:	str	r2, [r5, #0]
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    d006:	str	r3, [r4, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    d008:	str	r2, [r0, #0]
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    d00a:	str	r3, [r1, #0]
    d00c:	b.n	cfb0 <analog_init+0x34>
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    d00e:	movs	r2, #57	; 0x39
    d010:	b.n	d002 <analog_init+0x86>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#endif
	} else if (num <= 8) {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
    d012:	movs	r3, #133	; 0x85
    d014:	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
    d016:	str	r3, [r2, #0]
    d018:	b.n	cfe0 <analog_init+0x64>
	}
	#endif

	num = analog_num_average;
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
    d01a:	movs	r3, #128	; 0x80
    d01c:	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
    d01e:	str	r3, [r2, #0]
    d020:	b.n	cfe0 <analog_init+0x64>
    d022:	nop
    d024:	.word	0x40074000
    d028:	.word	0x40074001
    d02c:	.word	0x1fff8b74
    d030:	.word	0x4003b008
    d034:	.word	0x4003b00c
    d038:	.word	0x400bb008
    d03c:	.word	0x400bb00c
    d040:	.word	0x200030a2
    d044:	.word	0x4003b020
    d048:	.word	0x400bb020
    d04c:	.word	0x1fff8b75
    d050:	.word	0x4003b024
    d054:	.word	0x400bb024
    d058:	.word	0x200030a1

0000d05c <fault_isr>:
void _init_Teensyduino_internal_(void) __attribute__((noinline));
void __libc_init_array(void);


void fault_isr(void)
{
    d05c:	push	{r3, lr}
        asm("ldr %0, [sp, #0]" : "=r" (addr) ::);
#endif
	while (1) {
		// keep polling some communication while in fault
		// mode, so we don't completely die.
		if (SIM_SCGC4 & SIM_SCGC4_USBOTG) usb_isr();
    d05e:	ldr	r4, [pc, #64]	; (d0a0 <fault_isr+0x44>)
    d060:	b.n	d074 <fault_isr+0x18>
		if (SIM_SCGC4 & SIM_SCGC4_UART0) uart0_status_isr();
    d062:	ldr	r3, [r4, #0]
    d064:	lsls	r1, r3, #21
    d066:	bmi.n	d084 <fault_isr+0x28>
		if (SIM_SCGC4 & SIM_SCGC4_UART1) uart1_status_isr();
    d068:	ldr	r3, [r4, #0]
    d06a:	lsls	r2, r3, #20
    d06c:	bmi.n	d08e <fault_isr+0x32>
		if (SIM_SCGC4 & SIM_SCGC4_UART2) uart2_status_isr();
    d06e:	ldr	r3, [r4, #0]
    d070:	lsls	r3, r3, #19
    d072:	bmi.n	d098 <fault_isr+0x3c>
        asm("ldr %0, [sp, #0]" : "=r" (addr) ::);
#endif
	while (1) {
		// keep polling some communication while in fault
		// mode, so we don't completely die.
		if (SIM_SCGC4 & SIM_SCGC4_USBOTG) usb_isr();
    d074:	ldr	r3, [r4, #0]
    d076:	lsls	r0, r3, #13
    d078:	bpl.n	d062 <fault_isr+0x6>
    d07a:	bl	db70 <usb_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART0) uart0_status_isr();
    d07e:	ldr	r3, [r4, #0]
    d080:	lsls	r1, r3, #21
    d082:	bpl.n	d068 <fault_isr+0xc>
    d084:	bl	d0a4 <unused_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART1) uart1_status_isr();
    d088:	ldr	r3, [r4, #0]
    d08a:	lsls	r2, r3, #20
    d08c:	bpl.n	d06e <fault_isr+0x12>
    d08e:	bl	d0a4 <unused_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART2) uart2_status_isr();
    d092:	ldr	r3, [r4, #0]
    d094:	lsls	r3, r3, #19
    d096:	bpl.n	d074 <fault_isr+0x18>
    d098:	bl	d0a4 <unused_isr>
    d09c:	b.n	d074 <fault_isr+0x18>
    d09e:	nop
    d0a0:	.word	0x40048034

0000d0a4 <unused_isr>:
	}
}

void unused_isr(void)
{
    d0a4:	push	{r3, lr}
	fault_isr();
    d0a6:	bl	d05c <fault_isr>
    d0aa:	nop

0000d0ac <startup_early_hook>:
extern void rtc_set(unsigned long t);


static void startup_default_early_hook(void) {
#if defined(KINETISK)
	WDOG_STCTRLH = WDOG_STCTRLH_ALLOWUPDATE;
    d0ac:	ldr	r3, [pc, #4]	; (d0b4 <startup_early_hook+0x8>)
    d0ae:	movs	r2, #16
    d0b0:	strh	r2, [r3, #0]
    d0b2:	bx	lr
    d0b4:	.word	0x40052000

0000d0b8 <startup_late_hook>:
#elif defined(KINETISL)
	SIM_COPC = 0;  // disable the watchdog
#endif
}
static void startup_default_late_hook(void) {}
    d0b8:	bx	lr
    d0ba:	nop

0000d0bc <_sbrk>:

void * _sbrk(int incr)
{
	char *prev, *stack;

	prev = __brkval;
    d0bc:	ldr	r1, [pc, #36]	; (d0e4 <_sbrk+0x28>)

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wunused-parameter"

void * _sbrk(int incr)
{
    d0be:	push	{r3, lr}
	char *prev, *stack;

	prev = __brkval;
    d0c0:	ldr	r3, [r1, #0]
	if (incr != 0) {
    d0c2:	cbz	r0, d0d2 <_sbrk+0x16>
		__asm__ volatile("mov %0, sp" : "=r" (stack) ::);
    d0c4:	mov	r2, sp
		if (prev + incr >= stack - STACK_MARGIN) {
    d0c6:	add	r0, r3
    d0c8:	sub.w	r2, r2, #4096	; 0x1000
    d0cc:	cmp	r0, r2
    d0ce:	bcs.n	d0d6 <_sbrk+0x1a>
			errno = ENOMEM;
			return (void *)-1;
		}
		__brkval = prev + incr;
    d0d0:	str	r0, [r1, #0]
	}
	return prev;
    d0d2:	mov	r0, r3
}
    d0d4:	pop	{r3, pc}

	prev = __brkval;
	if (incr != 0) {
		__asm__ volatile("mov %0, sp" : "=r" (stack) ::);
		if (prev + incr >= stack - STACK_MARGIN) {
			errno = ENOMEM;
    d0d6:	bl	fee8 <__errno>
    d0da:	movs	r3, #12
    d0dc:	str	r3, [r0, #0]
			return (void *)-1;
    d0de:	mov.w	r0, #4294967295
    d0e2:	pop	{r3, pc}
    d0e4:	.word	0x1fff8b78

0000d0e8 <__cxa_pure_virtual>:
	while (1);
}

__attribute__((weak)) 
void __cxa_pure_virtual()
{
    d0e8:	b.n	d0e8 <__cxa_pure_virtual>
    d0ea:	nop

0000d0ec <usb_init_serialnumber>:
	{'M','T','P'}
};
#endif

void usb_init_serialnumber(void)
{
    d0ec:	push	{r4, r5, r6, lr}
    d0ee:	sub	sp, #16
	char buf[11];
	uint32_t i, num;

	__disable_irq();
    d0f0:	cpsid	i
#if defined(HAS_KINETIS_FLASH_FTFA) || defined(HAS_KINETIS_FLASH_FTFL)
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    d0f2:	ldr	r3, [pc, #100]	; (d158 <usb_init_serialnumber+0x6c>)
	FTFL_FCCOB0 = 0x41;
    d0f4:	ldr	r5, [pc, #100]	; (d15c <usb_init_serialnumber+0x70>)
	FTFL_FCCOB1 = 15;
    d0f6:	ldr	r0, [pc, #104]	; (d160 <usb_init_serialnumber+0x74>)
	char buf[11];
	uint32_t i, num;

	__disable_irq();
#if defined(HAS_KINETIS_FLASH_FTFA) || defined(HAS_KINETIS_FLASH_FTFL)
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    d0f8:	movs	r2, #112	; 0x70
	FTFL_FCCOB0 = 0x41;
    d0fa:	movs	r6, #65	; 0x41
	FTFL_FCCOB1 = 15;
    d0fc:	movs	r4, #15
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
    d0fe:	movs	r1, #128	; 0x80
	char buf[11];
	uint32_t i, num;

	__disable_irq();
#if defined(HAS_KINETIS_FLASH_FTFA) || defined(HAS_KINETIS_FLASH_FTFL)
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    d100:	strb	r2, [r3, #0]
	FTFL_FCCOB0 = 0x41;
    d102:	strb	r6, [r5, #0]
	FTFL_FCCOB1 = 15;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
    d104:	mov	r2, r3

	__disable_irq();
#if defined(HAS_KINETIS_FLASH_FTFA) || defined(HAS_KINETIS_FLASH_FTFL)
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
	FTFL_FCCOB0 = 0x41;
	FTFL_FCCOB1 = 15;
    d106:	strb	r4, [r0, #0]
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
    d108:	strb	r1, [r3, #0]
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
    d10a:	ldrb	r3, [r2, #0]
    d10c:	lsls	r3, r3, #24
    d10e:	bpl.n	d10a <usb_init_serialnumber+0x1e>
	num = *(uint32_t *)&FTFL_FCCOB7;
    d110:	ldr	r3, [pc, #80]	; (d164 <usb_init_serialnumber+0x78>)
    d112:	ldr	r0, [r3, #0]
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOBB;
	kinetis_hsrun_enable();
#endif
	__enable_irq();
    d114:	cpsie	i
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    d116:	ldr	r3, [pc, #80]	; (d168 <usb_init_serialnumber+0x7c>)
    d118:	ldr	r4, [pc, #80]	; (d16c <usb_init_serialnumber+0x80>)
    d11a:	cmp	r0, r3
    d11c:	it	ls
    d11e:	addls.w	r0, r0, r0, lsl #2
	ultoa(num, buf, 10);
    d122:	add	r1, sp, #4
	num = *(uint32_t *)&FTFL_FCCOBB;
	kinetis_hsrun_enable();
#endif
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    d124:	it	ls
    d126:	lslls	r0, r0, #1
	ultoa(num, buf, 10);
    d128:	movs	r2, #10
    d12a:	bl	d170 <ultoa>
    d12e:	add	r1, sp, #4
    d130:	mov	r0, r4
	for (i=0; i<10; i++) {
    d132:	movs	r3, #0
		char c = buf[i];
    d134:	ldrb.w	r2, [r1], #1
    d138:	adds	r3, #1
		if (!c) break;
    d13a:	cbz	r2, d14c <usb_init_serialnumber+0x60>
#endif
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    d13c:	cmp	r3, #10
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
    d13e:	strh.w	r2, [r0, #2]!
#endif
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    d142:	bne.n	d134 <usb_init_serialnumber+0x48>
    d144:	movs	r3, #22
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    d146:	strb	r3, [r4, #0]
}
    d148:	add	sp, #16
    d14a:	pop	{r4, r5, r6, pc}
    d14c:	lsls	r3, r3, #1
    d14e:	uxtb	r3, r3
	for (i=0; i<10; i++) {
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    d150:	strb	r3, [r4, #0]
}
    d152:	add	sp, #16
    d154:	pop	{r4, r5, r6, pc}
    d156:	nop
    d158:	.word	0x40020000
    d15c:	.word	0x40020007
    d160:	.word	0x40020006
    d164:	.word	0x40020008
    d168:	.word	0x0098967f
    d16c:	.word	0x1fff8c50

0000d170 <ultoa>:
#include <stdlib.h>
#include <math.h>


char * ultoa(unsigned long val, char *buf, int radix)
{
    d170:	push	{r4, r5, r6, r7}
    d172:	subs	r5, r1, #1
    d174:	mov	r6, r5
	unsigned digit;
	int i=0, j;
    d176:	movs	r4, #0
    d178:	b.n	d17c <ultoa+0xc>
	while (1) {
		digit = val % radix;
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
		val /= radix;
		if (val == 0) break;
		i++;
    d17a:	adds	r4, #1
	unsigned digit;
	int i=0, j;
	char t;

	while (1) {
		digit = val % radix;
    d17c:	udiv	r3, r0, r2
    d180:	mls	r0, r2, r3, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    d184:	cmp	r0, #9
    d186:	add.w	r7, r0, #48	; 0x30
    d18a:	itet	hi
    d18c:	addhi	r0, #55	; 0x37
    d18e:	uxtbls	r0, r7
    d190:	uxtbhi	r0, r0
    d192:	strb.w	r0, [r6, #1]!
		val /= radix;
		if (val == 0) break;
    d196:	mov	r0, r3
    d198:	cmp	r3, #0
    d19a:	bne.n	d17a <ultoa+0xa>
		i++;
	}
	buf[i + 1] = 0;
    d19c:	adds	r2, r1, r4
    d19e:	strb	r3, [r2, #1]
	for (j=0; j < i; j++, i--) {
    d1a0:	cbz	r4, d1b6 <ultoa+0x46>
		t = buf[j];
		buf[j] = buf[i];
    d1a2:	ldrb	r0, [r2, #0]
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
		t = buf[j];
    d1a4:	ldrb.w	r6, [r5, #1]!
		buf[j] = buf[i];
    d1a8:	strb	r0, [r5, #0]
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    d1aa:	adds	r3, #1
    d1ac:	subs	r0, r4, r3
    d1ae:	cmp	r3, r0
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
    d1b0:	strb.w	r6, [r2], #-1
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    d1b4:	blt.n	d1a2 <ultoa+0x32>
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
	}
	return buf;
}
    d1b6:	mov	r0, r1
    d1b8:	pop	{r4, r5, r6, r7}
    d1ba:	bx	lr

0000d1bc <dtostrf>:
char * fcvtf(float, int, int *, int *);
int isnanf (float x);
int isinff (float x);

char * dtostrf(float val, int width, unsigned int precision, char *buf)
{
    d1bc:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d1c0:	mov	r5, r1
    d1c2:	sub	sp, #20
	int decpt, sign, reqd, pad;
	const char *s, *e;
	char *p;

	int awidth = abs(width);
    d1c4:	eor.w	r9, r5, r5, asr #31
	if (isnanf(val)) {
    d1c8:	mov	r1, r0
char * fcvtf(float, int, int *, int *);
int isnanf (float x);
int isinff (float x);

char * dtostrf(float val, int width, unsigned int precision, char *buf)
{
    d1ca:	mov	sl, r0
    d1cc:	mov	r7, r2
    d1ce:	mov	r4, r3
	int decpt, sign, reqd, pad;
	const char *s, *e;
	char *p;

	int awidth = abs(width);
    d1d0:	sub.w	r9, r9, r5, asr #31
	if (isnanf(val)) {
    d1d4:	bl	fa8c <__aeabi_fcmpun>
    d1d8:	cmp	r0, #0
    d1da:	bne.w	d43c <dtostrf+0x280>
			awidth--;
		}
		*buf = 0;
		return buf;
	}
	if (isinff(val)) {
    d1de:	bic.w	r8, sl, #2147483648	; 0x80000000
    d1e2:	mov	r0, r8
    d1e4:	ldr	r1, [pc, #796]	; (d504 <dtostrf+0x348>)
    d1e6:	bl	fa8c <__aeabi_fcmpun>
    d1ea:	cmp	r0, #0
    d1ec:	bne.n	d27e <dtostrf+0xc2>
    d1ee:	mov	r0, r8
    d1f0:	ldr	r1, [pc, #784]	; (d504 <dtostrf+0x348>)
    d1f2:	bl	fa50 <__aeabi_fcmple>
    d1f6:	mov	r6, r0
    d1f8:	cmp	r0, #0
    d1fa:	bne.n	d27e <dtostrf+0xc2>
		int ndigs = (val<0) ? 4 : 3;
    d1fc:	movs	r1, #0
    d1fe:	mov	r0, sl
    d200:	bl	fa3c <__aeabi_fcmplt>
    d204:	cmp	r0, #0
    d206:	ite	ne
    d208:	movne	r0, #4
    d20a:	moveq	r0, #3
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
    d20c:	cmp	r0, r9
    d20e:	blt.n	d24c <dtostrf+0x90>
		if (width<0) {
    d210:	cmp	r5, #0
    d212:	blt.w	d4fe <dtostrf+0x342>
			while (awidth) {
				*buf++ = ' ';
				awidth--;
			}
		}
		if (val<0) *buf++ = '-';
    d216:	mov	r0, sl
    d218:	movs	r1, #0
    d21a:	bl	fa3c <__aeabi_fcmplt>
    d21e:	mov	r5, r4
    d220:	cbnz	r0, d276 <dtostrf+0xba>
		if (DTOA_UPPER) {
			*buf++ = 'I';  *buf++ = 'N';  *buf++ = 'F';
    d222:	movs	r1, #73	; 0x49
    d224:	movs	r2, #78	; 0x4e
    d226:	movs	r3, #70	; 0x46
    d228:	strb	r1, [r4, #0]
    d22a:	strb	r2, [r4, #1]
    d22c:	strb	r3, [r4, #2]
    d22e:	adds	r4, #3
		} else {
			*buf++ = 'i';  *buf++ = 'n';  *buf++ = 'f';
		}
		while (awidth) {
    d230:	cmp	r6, #0
    d232:	beq.w	d522 <dtostrf+0x366>
    d236:	adds	r0, r4, r6
			*buf++ = ' ';
    d238:	movs	r3, #32
    d23a:	strb.w	r3, [r4], #1
		if (DTOA_UPPER) {
			*buf++ = 'I';  *buf++ = 'N';  *buf++ = 'F';
		} else {
			*buf++ = 'i';  *buf++ = 'n';  *buf++ = 'f';
		}
		while (awidth) {
    d23e:	cmp	r0, r4
    d240:	bne.n	d23a <dtostrf+0x7e>
			*buf++ = ' ';
			awidth--;
		}
		*buf = 0;
    d242:	movs	r3, #0
    d244:	strb	r3, [r0, #0]

	//char format[20];
	//sprintf(format, "%%%d.%df", width, precision);
	//sprintf(buf, format, val);
	return buf;
}
    d246:	add	sp, #20
    d248:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return buf;
	}
	if (isinff(val)) {
		int ndigs = (val<0) ? 4 : 3;
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
		if (width<0) {
    d24c:	cmp	r5, #0
		*buf = 0;
		return buf;
	}
	if (isinff(val)) {
		int ndigs = (val<0) ? 4 : 3;
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
    d24e:	rsb	r6, r0, r9
		if (width<0) {
    d252:	bge.n	d216 <dtostrf+0x5a>
			while (awidth) {
    d254:	cmp	r6, #0
    d256:	beq.w	d4fe <dtostrf+0x342>
    d25a:	adds	r5, r4, r6
				*buf++ = ' ';
    d25c:	movs	r3, #32
    d25e:	strb.w	r3, [r4], #1
	}
	if (isinff(val)) {
		int ndigs = (val<0) ? 4 : 3;
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
		if (width<0) {
			while (awidth) {
    d262:	cmp	r4, r5
    d264:	bne.n	d25e <dtostrf+0xa2>
				*buf++ = ' ';
				awidth--;
			}
		}
		if (val<0) *buf++ = '-';
    d266:	mov	r0, sl
    d268:	movs	r1, #0
    d26a:	bl	fa3c <__aeabi_fcmplt>
    d26e:	cmp	r0, #0
    d270:	beq.w	d4b8 <dtostrf+0x2fc>
    d274:	movs	r6, #0
    d276:	movs	r3, #45	; 0x2d
    d278:	strb	r3, [r5, #0]
    d27a:	adds	r4, r5, #1
    d27c:	b.n	d222 <dtostrf+0x66>
		}
		*buf = 0;
		return buf;
	}

	s = fcvtf(val, precision, &decpt, &sign);
    d27e:	add	r3, sp, #8
    d280:	add	r2, sp, #4
    d282:	mov	r1, r7
    d284:	mov	r0, sl
    d286:	bl	fec8 <fcvtf>
    d28a:	mov	fp, r7
    d28c:	mov	r8, r0

	// if only 1 digit in output
	if (precision == 0 && decpt == 0) {
    d28e:	ldr.w	r9, [sp, #4]
    d292:	cmp	r7, #0
    d294:	beq.n	d346 <dtostrf+0x18a>
    d296:	rsb	r3, r9, #0
		s = (*s < '5') ? "0" : "1";
		decpt++;
	}

	// if all zeros, limit to precision
	if (-decpt  > (int)precision) {
    d29a:	cmp	r3, r7
    d29c:	bgt.w	d3c8 <dtostrf+0x20c>
    d2a0:	mov	r0, r8
    d2a2:	bl	10d00 <strlen>
    d2a6:	mov	r6, r0
	}

	reqd = strlen(s);

	// add 1 for decimal point
	if (reqd > decpt) reqd++;
    d2a8:	cmp	r9, r6
    d2aa:	it	lt
    d2ac:	addlt	r6, #1

	// add 1 for zero in front of decimal point
	if (decpt == 0) reqd++;
    d2ae:	cmp.w	r9, #0
    d2b2:	bne.w	d3e6 <dtostrf+0x22a>
    d2b6:	adds	r6, #1
			if (newDecimalPoint - decpt == precision + 1) decpt++;
		}
	}

	// add 1 for sign if negative
	if (sign) reqd++;
    d2b8:	ldr.w	lr, [sp, #8]
    d2bc:	cmp.w	lr, #0
    d2c0:	beq.n	d36a <dtostrf+0x1ae>
    d2c2:	adds	r6, #1

	p = buf;
	e = p + reqd;
	pad = width - reqd;
    d2c4:	subs	r0, r5, r6
	if (pad > 0) {
    d2c6:	cmp	r0, #0

	// add 1 for sign if negative
	if (sign) reqd++;

	p = buf;
	e = p + reqd;
    d2c8:	add.w	r1, r4, r6
	pad = width - reqd;
	if (pad > 0) {
    d2cc:	bgt.n	d376 <dtostrf+0x1ba>
	}

	// add 1 for sign if negative
	if (sign) reqd++;

	p = buf;
    d2ce:	mov	r3, r4
	pad = width - reqd;
	if (pad > 0) {
		e += pad;
		while (pad-- > 0) *p++ = ' ';
	}
	if (sign) *p++ = '-';
    d2d0:	movs	r2, #45	; 0x2d
    d2d2:	strb	r2, [r3, #0]
    d2d4:	adds	r3, #1
	if (decpt == 0 && precision > 0) {
    d2d6:	cmp.w	r9, #0
    d2da:	bne.n	d3a4 <dtostrf+0x1e8>
    d2dc:	cbz	r7, d2ec <dtostrf+0x130>
		*p++ = '0';
    d2de:	mov	r2, r3
    d2e0:	movs	r0, #48	; 0x30
    d2e2:	strb.w	r0, [r2], #2
		*p++ = '.';
    d2e6:	movs	r0, #46	; 0x2e
    d2e8:	strb	r0, [r3, #1]
    d2ea:	mov	r3, r2
			decpt++;
			*p++ = '0';
		}
	}
	// print digits
	while (p < e) {
    d2ec:	cmp	r3, r1
    d2ee:	bcs.n	d332 <dtostrf+0x176>
		*p++ = *s++;
    d2f0:	adds	r7, r3, #1
    d2f2:	ldrb.w	r2, [r8]
    d2f6:	strb	r2, [r3, #0]
		if (p == e) break;
    d2f8:	cmp	r7, r1
			*p++ = '0';
		}
	}
	// print digits
	while (p < e) {
		*p++ = *s++;
    d2fa:	add.w	r8, r8, #1
		if (p == e) break;
    d2fe:	beq.n	d334 <dtostrf+0x178>
    d300:	ldr	r2, [sp, #4]
		if (--decpt == 0) *p++ = '.';
    d302:	mov.w	lr, #46	; 0x2e
    d306:	b.n	d320 <dtostrf+0x164>
    d308:	strb.w	lr, [r3, #1]
    d30c:	adds	r3, #2
			decpt++;
			*p++ = '0';
		}
	}
	// print digits
	while (p < e) {
    d30e:	cmp	r3, r1
		*p++ = *s++;
    d310:	add.w	r7, r3, #1
			decpt++;
			*p++ = '0';
		}
	}
	// print digits
	while (p < e) {
    d314:	bcs.n	d332 <dtostrf+0x176>
		*p++ = *s++;
    d316:	ldrb.w	r0, [r8], #1
    d31a:	strb	r0, [r3, #0]
		if (p == e) break;
    d31c:	cmp	r7, r1
    d31e:	beq.n	d334 <dtostrf+0x178>
		if (--decpt == 0) *p++ = '.';
    d320:	subs	r2, #1
    d322:	str	r2, [sp, #4]
    d324:	cmp	r2, #0
    d326:	beq.n	d308 <dtostrf+0x14c>
    d328:	mov	r3, r7
			decpt++;
			*p++ = '0';
		}
	}
	// print digits
	while (p < e) {
    d32a:	cmp	r3, r1
		*p++ = *s++;
    d32c:	add.w	r7, r3, #1
			decpt++;
			*p++ = '0';
		}
	}
	// print digits
	while (p < e) {
    d330:	bcc.n	d316 <dtostrf+0x15a>
    d332:	mov	r1, r3
		*p++ = *s++;
		if (p == e) break;
		if (--decpt == 0) *p++ = '.';
	}
	if (width < 0) {
    d334:	cmp	r5, #0
    d336:	blt.w	d48c <dtostrf+0x2d0>
		pad = (reqd + width) * -1;
		while (pad-- > 0) *p++ = ' ';
	}
	*p = 0;
    d33a:	movs	r3, #0

	//char format[20];
	//sprintf(format, "%%%d.%df", width, precision);
	//sprintf(buf, format, val);
	return buf;
    d33c:	mov	r0, r4
	}
	if (width < 0) {
		pad = (reqd + width) * -1;
		while (pad-- > 0) *p++ = ' ';
	}
	*p = 0;
    d33e:	strb	r3, [r1, #0]

	//char format[20];
	//sprintf(format, "%%%d.%df", width, precision);
	//sprintf(buf, format, val);
	return buf;
}
    d340:	add	sp, #20
    d342:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	}

	s = fcvtf(val, precision, &decpt, &sign);

	// if only 1 digit in output
	if (precision == 0 && decpt == 0) {
    d346:	cmp.w	r9, #0
    d34a:	bne.n	d296 <dtostrf+0xda>
		// round and move decimal point
		s = (*s < '5') ? "0" : "1";
    d34c:	ldrb.w	r8, [r0]
    d350:	ldr	r1, [pc, #436]	; (d508 <dtostrf+0x34c>)
    d352:	ldr	r2, [pc, #440]	; (d50c <dtostrf+0x350>)
		decpt++;
    d354:	movs	r3, #1
    d356:	str	r3, [sp, #4]
    d358:	mov	r9, r3
	s = fcvtf(val, precision, &decpt, &sign);

	// if only 1 digit in output
	if (precision == 0 && decpt == 0) {
		// round and move decimal point
		s = (*s < '5') ? "0" : "1";
    d35a:	cmp.w	r8, #52	; 0x34
    d35e:	ite	hi
    d360:	movhi	r8, r1
    d362:	movls	r8, r2
		decpt++;
    d364:	mov.w	r3, #4294967295
    d368:	b.n	d29a <dtostrf+0xde>
	// add 1 for sign if negative
	if (sign) reqd++;

	p = buf;
	e = p + reqd;
	pad = width - reqd;
    d36a:	subs	r0, r5, r6
	if (pad > 0) {
    d36c:	cmp	r0, #0

	// add 1 for sign if negative
	if (sign) reqd++;

	p = buf;
	e = p + reqd;
    d36e:	add.w	r1, r4, r6
	pad = width - reqd;
	if (pad > 0) {
    d372:	ble.w	d526 <dtostrf+0x36a>
		e += pad;
    d376:	add	r1, r0
		decpt++;
	}

	// if all zeros, limit to precision
	if (-decpt  > (int)precision) {
		s = "0";
    d378:	mov	r2, r4
	p = buf;
	e = p + reqd;
	pad = width - reqd;
	if (pad > 0) {
		e += pad;
		while (pad-- > 0) *p++ = ' ';
    d37a:	subs	r0, #1
    d37c:	mov.w	ip, #32
    d380:	strb.w	ip, [r2], #1
    d384:	rsb	r3, r2, #1
    d388:	add	r3, r0
    d38a:	add	r3, r4
    d38c:	cmp	r3, #0
    d38e:	bgt.n	d380 <dtostrf+0x1c4>
    d390:	bic.w	r3, r0, r0, asr #31
    d394:	adds	r3, #1
    d396:	add	r3, r4
	}
	if (sign) *p++ = '-';
    d398:	cmp.w	lr, #0
    d39c:	bne.n	d2d0 <dtostrf+0x114>
	if (decpt == 0 && precision > 0) {
    d39e:	cmp.w	r9, #0
    d3a2:	beq.n	d2dc <dtostrf+0x120>
		*p++ = '0';
		*p++ = '.';
	}
	else if (decpt < 0 && precision > 0) {
    d3a4:	bge.n	d2ec <dtostrf+0x130>
    d3a6:	cmp	r7, #0
    d3a8:	beq.n	d2ec <dtostrf+0x130>
		*p++ = '0';
    d3aa:	mov	r2, r3
    d3ac:	movs	r0, #48	; 0x30
    d3ae:	strb.w	r0, [r2], #2
		*p++ = '.';
    d3b2:	movs	r7, #46	; 0x2e
    d3b4:	strb	r7, [r3, #1]
    d3b6:	rsb	r3, r9, r2
		// print leading zeros
		while ( decpt < 0 ) {
			decpt++;
			*p++ = '0';
    d3ba:	strb.w	r0, [r2], #1
	}
	else if (decpt < 0 && precision > 0) {
		*p++ = '0';
		*p++ = '.';
		// print leading zeros
		while ( decpt < 0 ) {
    d3be:	cmp	r3, r2
    d3c0:	bne.n	d3ba <dtostrf+0x1fe>
    d3c2:	movs	r2, #0
    d3c4:	str	r2, [sp, #4]
    d3c6:	b.n	d2ec <dtostrf+0x130>
	}

	// if all zeros, limit to precision
	if (-decpt  > (int)precision) {
		s = "0";
		decpt = -precision;
    d3c8:	rsb	r9, r7, #0
    d3cc:	movs	r6, #1
	}

	reqd = strlen(s);

	// add 1 for decimal point
	if (reqd > decpt) reqd++;
    d3ce:	cmp	r9, r6
	}

	// if all zeros, limit to precision
	if (-decpt  > (int)precision) {
		s = "0";
		decpt = -precision;
    d3d0:	mov	r0, r6
	}

	reqd = strlen(s);

	// add 1 for decimal point
	if (reqd > decpt) reqd++;
    d3d2:	it	lt
    d3d4:	addlt	r6, #1

	// add 1 for zero in front of decimal point
	if (decpt == 0) reqd++;
    d3d6:	cmp.w	r9, #0
		decpt++;
	}

	// if all zeros, limit to precision
	if (-decpt  > (int)precision) {
		s = "0";
    d3da:	ldr.w	r8, [pc, #304]	; d50c <dtostrf+0x350>
		decpt = -precision;
    d3de:	str.w	r9, [sp, #4]

	// add 1 for decimal point
	if (reqd > decpt) reqd++;

	// add 1 for zero in front of decimal point
	if (decpt == 0) reqd++;
    d3e2:	beq.w	d2b6 <dtostrf+0xfa>

	// if leading zeros after decimal point
	if (decpt < 0 && precision > 0) {
    d3e6:	bge.w	d2b8 <dtostrf+0xfc>
    d3ea:	cmp	r7, #0
    d3ec:	beq.w	d2b8 <dtostrf+0xfc>
		// ensure enough trailing zeros, add 2 for '0.'
		reqd = precision + 2;

		if (strlen(s) > precision + decpt) {
    d3f0:	add.w	r3, r9, r7
    d3f4:	cmp	r0, r3
	if (decpt == 0) reqd++;

	// if leading zeros after decimal point
	if (decpt < 0 && precision > 0) {
		// ensure enough trailing zeros, add 2 for '0.'
		reqd = precision + 2;
    d3f6:	add.w	r6, r7, #2

		if (strlen(s) > precision + decpt) {
    d3fa:	bls.w	d2b8 <dtostrf+0xfc>

			int newPrecision = precision;
			int newDecimalPoint;

			// shift decimal point
			while (newPrecision > 0) {
    d3fe:	cmp	r7, #0
    d400:	ble.n	d412 <dtostrf+0x256>
				val *= 10.0;
    d402:	mov	r0, sl
    d404:	ldr	r1, [pc, #264]	; (d510 <dtostrf+0x354>)
    d406:	bl	f700 <__aeabi_fmul>

			int newPrecision = precision;
			int newDecimalPoint;

			// shift decimal point
			while (newPrecision > 0) {
    d40a:	subs.w	fp, fp, #1
				val *= 10.0;
    d40e:	mov	sl, r0

			int newPrecision = precision;
			int newDecimalPoint;

			// shift decimal point
			while (newPrecision > 0) {
    d410:	bne.n	d402 <dtostrf+0x246>
				val *= 10.0;
				newPrecision--;
			}

			// round after accounting for leading 0's
			s = fcvtf(val, newPrecision, &newDecimalPoint, &sign);
    d412:	add	r3, sp, #8
    d414:	add	r2, sp, #12
    d416:	mov	r1, fp
    d418:	mov	r0, sl
    d41a:	bl	fec8 <fcvtf>

			// if rounded up to new digit (e.g. 0.09 to 0.1), move decimal point
			if (newDecimalPoint - decpt == precision + 1) decpt++;
    d41e:	ldr.w	r9, [sp, #4]
    d422:	ldr	r2, [sp, #12]
    d424:	adds	r3, r7, #1
    d426:	rsb	r2, r9, r2
    d42a:	cmp	r2, r3
    d42c:	it	eq
    d42e:	addeq.w	r9, r9, #1
				val *= 10.0;
				newPrecision--;
			}

			// round after accounting for leading 0's
			s = fcvtf(val, newPrecision, &newDecimalPoint, &sign);
    d432:	mov	r8, r0

			// if rounded up to new digit (e.g. 0.09 to 0.1), move decimal point
			if (newDecimalPoint - decpt == precision + 1) decpt++;
    d434:	it	eq
    d436:	streq.w	r9, [sp, #4]
    d43a:	b.n	d2b8 <dtostrf+0xfc>
	const char *s, *e;
	char *p;

	int awidth = abs(width);
	if (isnanf(val)) {
		int ndigs = (val<0) ? 4 : 3;
    d43c:	movs	r1, #0
    d43e:	mov	r0, sl
    d440:	bl	fa3c <__aeabi_fcmplt>
    d444:	cmp	r0, #0
    d446:	ite	ne
    d448:	movne	r0, #4
    d44a:	moveq	r0, #3
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
    d44c:	cmp	r0, r9
    d44e:	bge.n	d4c8 <dtostrf+0x30c>
		if (width<0) {
    d450:	cmp	r5, #0
	char *p;

	int awidth = abs(width);
	if (isnanf(val)) {
		int ndigs = (val<0) ? 4 : 3;
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
    d452:	rsb	r6, r0, r9
		if (width<0) {
    d456:	blt.n	d4d0 <dtostrf+0x314>
			while (awidth) {
				*buf++ = ' ';
				awidth--;
			}
		}
		if (copysignf(1.0f, val)<0) *buf++ = '-';
    d458:	mov.w	r3, #1065353216	; 0x3f800000
    d45c:	mov	r0, sl
    d45e:	movs	r1, #0
    d460:	bfi	r0, r3, #0, #31
    d464:	bl	fa3c <__aeabi_fcmplt>
    d468:	mov	r5, r4
    d46a:	cmp	r0, #0
    d46c:	bne.n	d4f2 <dtostrf+0x336>
		if (DTOA_UPPER) {
			*buf++ = 'N';  *buf++ = 'A';  *buf++ = 'N';
    d46e:	movs	r3, #78	; 0x4e
    d470:	movs	r2, #65	; 0x41
    d472:	strb	r3, [r4, #0]
    d474:	strb	r3, [r4, #2]
    d476:	strb	r2, [r4, #1]
    d478:	adds	r4, #3
		} else {
			*buf++ = 'n';  *buf++ = 'a';  *buf++ = 'n';
		}
		while (awidth) {
    d47a:	cmp	r6, #0
    d47c:	beq.n	d522 <dtostrf+0x366>
    d47e:	adds	r0, r4, r6
			*buf++ = ' ';
    d480:	movs	r3, #32
    d482:	strb.w	r3, [r4], #1
		if (DTOA_UPPER) {
			*buf++ = 'N';  *buf++ = 'A';  *buf++ = 'N';
		} else {
			*buf++ = 'n';  *buf++ = 'a';  *buf++ = 'n';
		}
		while (awidth) {
    d486:	cmp	r4, r0
    d488:	bne.n	d482 <dtostrf+0x2c6>
    d48a:	b.n	d242 <dtostrf+0x86>
		*p++ = *s++;
		if (p == e) break;
		if (--decpt == 0) *p++ = '.';
	}
	if (width < 0) {
		pad = (reqd + width) * -1;
    d48c:	adds	r0, r5, r6
		while (pad-- > 0) *p++ = ' ';
    d48e:	negs	r3, r0
    d490:	cmp	r3, #0
    d492:	mvn.w	r0, r0
    d496:	ble.w	d33a <dtostrf+0x17e>
    d49a:	mov	r2, r1
    d49c:	movs	r5, #32
    d49e:	strb.w	r5, [r2], #1
    d4a2:	rsb	r3, r2, #1
    d4a6:	add	r3, r0
    d4a8:	add	r3, r1
    d4aa:	cmp	r3, #0
    d4ac:	bgt.n	d49e <dtostrf+0x2e2>
    d4ae:	bic.w	r3, r0, r0, asr #31
    d4b2:	adds	r3, #1
    d4b4:	add	r1, r3
    d4b6:	b.n	d33a <dtostrf+0x17e>
				awidth--;
			}
		}
		if (val<0) *buf++ = '-';
		if (DTOA_UPPER) {
			*buf++ = 'I';  *buf++ = 'N';  *buf++ = 'F';
    d4b8:	movs	r1, #73	; 0x49
    d4ba:	movs	r2, #78	; 0x4e
    d4bc:	movs	r3, #70	; 0x46
    d4be:	strb	r1, [r5, #0]
    d4c0:	strb	r2, [r5, #1]
    d4c2:	strb	r3, [r5, #2]
    d4c4:	adds	r0, r5, #3
    d4c6:	b.n	d242 <dtostrf+0x86>

	int awidth = abs(width);
	if (isnanf(val)) {
		int ndigs = (val<0) ? 4 : 3;
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
		if (width<0) {
    d4c8:	cmp	r5, #0
    d4ca:	blt.n	d4fa <dtostrf+0x33e>
	char *p;

	int awidth = abs(width);
	if (isnanf(val)) {
		int ndigs = (val<0) ? 4 : 3;
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
    d4cc:	movs	r6, #0
    d4ce:	b.n	d458 <dtostrf+0x29c>
		if (width<0) {
			while (awidth) {
    d4d0:	cbz	r6, d4fa <dtostrf+0x33e>
    d4d2:	adds	r5, r4, r6
				*buf++ = ' ';
    d4d4:	movs	r3, #32
    d4d6:	strb.w	r3, [r4], #1
	int awidth = abs(width);
	if (isnanf(val)) {
		int ndigs = (val<0) ? 4 : 3;
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
		if (width<0) {
			while (awidth) {
    d4da:	cmp	r4, r5
    d4dc:	bne.n	d4d6 <dtostrf+0x31a>
				*buf++ = ' ';
				awidth--;
			}
		}
		if (copysignf(1.0f, val)<0) *buf++ = '-';
    d4de:	mov.w	r3, #1065353216	; 0x3f800000
    d4e2:	mov	r0, sl
    d4e4:	movs	r1, #0
    d4e6:	bfi	r0, r3, #0, #31
    d4ea:	bl	fa3c <__aeabi_fcmplt>
    d4ee:	cbz	r0, d514 <dtostrf+0x358>
    d4f0:	movs	r6, #0
    d4f2:	movs	r3, #45	; 0x2d
    d4f4:	strb	r3, [r5, #0]
    d4f6:	adds	r4, r5, #1
    d4f8:	b.n	d46e <dtostrf+0x2b2>

	int awidth = abs(width);
	if (isnanf(val)) {
		int ndigs = (val<0) ? 4 : 3;
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
		if (width<0) {
    d4fa:	mov	r5, r4
    d4fc:	b.n	d4de <dtostrf+0x322>
		return buf;
	}
	if (isinff(val)) {
		int ndigs = (val<0) ? 4 : 3;
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
		if (width<0) {
    d4fe:	mov	r5, r4
    d500:	b.n	d266 <dtostrf+0xaa>
    d502:	nop
    d504:	.word	0x7f7fffff
    d508:	.word	0x00014754
    d50c:	.word	0x00014750
    d510:	.word	0x41200000
				awidth--;
			}
		}
		if (copysignf(1.0f, val)<0) *buf++ = '-';
		if (DTOA_UPPER) {
			*buf++ = 'N';  *buf++ = 'A';  *buf++ = 'N';
    d514:	movs	r3, #78	; 0x4e
    d516:	movs	r2, #65	; 0x41
    d518:	strb	r3, [r5, #0]
    d51a:	strb	r3, [r5, #2]
    d51c:	strb	r2, [r5, #1]
    d51e:	adds	r0, r5, #3
    d520:	b.n	d242 <dtostrf+0x86>
				awidth--;
			}
		}
		if (val<0) *buf++ = '-';
		if (DTOA_UPPER) {
			*buf++ = 'I';  *buf++ = 'N';  *buf++ = 'F';
    d522:	mov	r0, r4
    d524:	b.n	d242 <dtostrf+0x86>
	}

	// add 1 for sign if negative
	if (sign) reqd++;

	p = buf;
    d526:	mov	r3, r4
    d528:	b.n	d2d6 <dtostrf+0x11a>
    d52a:	nop

0000d52c <dummy_isr>:
	{((volatile uint8_t *)&CORE_PIN26_PORTREG + (CORE_PIN26_BIT >> 3)), &CORE_PIN26_CONFIG, (1<<(CORE_PIN26_BIT & 7))}
};

#endif

static void dummy_isr() {};
    d52c:	bx	lr
    d52e:	nop

0000d530 <digitalWrite.part.1>:



// TODO: startup code needs to initialize all pins to GPIO mode, input by default

void digitalWrite(uint8_t pin, uint8_t val)
    d530:	push	{r4}
{
	if (pin >= CORE_NUM_DIGITAL) return;
#ifdef KINETISK
	if (*portModeRegister(pin)) {
    d532:	ldr	r3, [pc, #60]	; (d570 <digitalWrite.part.1+0x40>)
    d534:	ldr.w	r2, [r3, r0, lsl #3]
    d538:	ldrb.w	r4, [r2, #640]	; 0x280
    d53c:	cbz	r4, d54a <digitalWrite.part.1+0x1a>
		if (val) {
			*portSetRegister(pin) = 1;
    d53e:	movs	r3, #1
void digitalWrite(uint8_t pin, uint8_t val)
{
	if (pin >= CORE_NUM_DIGITAL) return;
#ifdef KINETISK
	if (*portModeRegister(pin)) {
		if (val) {
    d540:	cbz	r1, d55e <digitalWrite.part.1+0x2e>
			*portSetRegister(pin) = 1;
    d542:	strb.w	r3, [r2, #128]	; 0x80
			*config &= ~(PORT_PCR_PE);
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    d546:	pop	{r4}
    d548:	bx	lr
		} else {
			*portClearRegister(pin) = digitalPinToBitMask(pin);
		}
#endif
	} else {
		volatile uint32_t *config = portConfigRegister(pin);
    d54a:	add.w	r3, r3, r0, lsl #3
    d54e:	ldr	r3, [r3, #4]
		if (val) {
			// TODO use bitband for atomic read-mod-write
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
    d550:	ldr	r2, [r3, #0]
			*portClearRegister(pin) = digitalPinToBitMask(pin);
		}
#endif
	} else {
		volatile uint32_t *config = portConfigRegister(pin);
		if (val) {
    d552:	cbnz	r1, d566 <digitalWrite.part.1+0x36>
			// TODO use bitband for atomic read-mod-write
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
			//*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
		} else {
			// TODO use bitband for atomic read-mod-write
			*config &= ~(PORT_PCR_PE);
    d554:	bic.w	r2, r2, #2
    d558:	str	r2, [r3, #0]
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    d55a:	pop	{r4}
    d55c:	bx	lr
#ifdef KINETISK
	if (*portModeRegister(pin)) {
		if (val) {
			*portSetRegister(pin) = 1;
		} else {
			*portClearRegister(pin) = 1;
    d55e:	strb.w	r3, [r2, #256]	; 0x100
			*config &= ~(PORT_PCR_PE);
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    d562:	pop	{r4}
    d564:	bx	lr
#endif
	} else {
		volatile uint32_t *config = portConfigRegister(pin);
		if (val) {
			// TODO use bitband for atomic read-mod-write
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
    d566:	orr.w	r2, r2, #3
    d56a:	str	r2, [r3, #0]
			*config &= ~(PORT_PCR_PE);
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    d56c:	pop	{r4}
    d56e:	bx	lr
    d570:	.word	0x00014758

0000d574 <pinMode.part.2>:
void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);
    d574:	ldr	r2, [pc, #112]	; (d5e8 <pinMode.part.2+0x74>)
    d576:	add.w	r3, r2, r0, lsl #3

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    d57a:	cmp	r1, #1
void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);
    d57c:	ldr	r3, [r3, #4]

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    d57e:	beq.n	d5a4 <pinMode.part.2+0x30>
    d580:	cmp	r1, #4
    d582:	beq.n	d5bc <pinMode.part.2+0x48>
		} else {
		    *config &= ~PORT_PCR_ODE;
                }
	} else {
#ifdef KINETISK
		*portModeRegister(pin) = 0;
    d584:	ldr.w	r0, [r2, r0, lsl #3]
    d588:	movs	r2, #0
    d58a:	strb.w	r2, [r0, #640]	; 0x280
#else
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
    d58e:	cbz	r1, d59c <pinMode.part.2+0x28>
			*config = PORT_PCR_MUX(1);
		} else if (mode == INPUT_PULLUP) {
    d590:	cmp	r1, #2
    d592:	beq.n	d5d6 <pinMode.part.2+0x62>
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
		} else if (mode == INPUT_PULLDOWN) {
    d594:	cmp	r1, #3
    d596:	beq.n	d5de <pinMode.part.2+0x6a>
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
		if (mode == OUTPUT_OPENDRAIN) {
		    *config |= PORT_PCR_ODE;
		} else {
		    *config &= ~PORT_PCR_ODE;
    d598:	str	r2, [r3, #0]
    d59a:	bx	lr
		*portModeRegister(pin) = 0;
#else
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
			*config = PORT_PCR_MUX(1);
    d59c:	mov.w	r2, #256	; 0x100
    d5a0:	str	r2, [r3, #0]
    d5a2:	bx	lr
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    d5a4:	ldr.w	r0, [r2, r0, lsl #3]
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    d5a8:	mov.w	r2, #324	; 0x144
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    d5ac:	strb.w	r1, [r0, #640]	; 0x280
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    d5b0:	str	r2, [r3, #0]
		if (mode == OUTPUT_OPENDRAIN) {
		    *config |= PORT_PCR_ODE;
		} else {
		    *config &= ~PORT_PCR_ODE;
    d5b2:	ldr	r2, [r3, #0]
    d5b4:	bic.w	r2, r2, #32
    d5b8:	str	r2, [r3, #0]
    d5ba:	bx	lr
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    d5bc:	ldr.w	r1, [r2, r0, lsl #3]
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    d5c0:	mov.w	r2, #324	; 0x144
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    d5c4:	movs	r0, #1
    d5c6:	strb.w	r0, [r1, #640]	; 0x280
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    d5ca:	str	r2, [r3, #0]
		if (mode == OUTPUT_OPENDRAIN) {
		    *config |= PORT_PCR_ODE;
    d5cc:	ldr	r2, [r3, #0]
    d5ce:	orr.w	r2, r2, #32
    d5d2:	str	r2, [r3, #0]
    d5d4:	bx	lr
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
			*config = PORT_PCR_MUX(1);
		} else if (mode == INPUT_PULLUP) {
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
    d5d6:	movw	r2, #259	; 0x103
    d5da:	str	r2, [r3, #0]
    d5dc:	bx	lr
		} else if (mode == INPUT_PULLDOWN) {
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE;
    d5de:	mov.w	r2, #258	; 0x102
    d5e2:	str	r2, [r3, #0]
    d5e4:	bx	lr
    d5e6:	nop
    d5e8:	.word	0x00014758

0000d5ec <attachInterrupt>:
void attachInterrupt(uint8_t pin, void (*function)(void), int mode)
{
	volatile uint32_t *config;
	uint32_t cfg, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
    d5ec:	cmp	r0, #33	; 0x21
    d5ee:	bhi.n	d682 <attachInterrupt+0x96>
{
	_VectorsRam[irq + 16] = function;
}

void attachInterrupt(uint8_t pin, void (*function)(void), int mode)
{
    d5f0:	push	{r3, r4, r5, r6, r7, lr}
	volatile uint32_t *config;
	uint32_t cfg, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
	switch (mode) {
    d5f2:	cmp	r2, #4
    d5f4:	bhi.n	d680 <attachInterrupt+0x94>
    d5f6:	tbb	[pc, r2]
    d5fa:	.short	0x4b48
    d5fc:	.short	0x034e
    d5fe:	.byte	0x45
    d5ff:	.byte	0x00
    d600:	mov.w	r6, #589824	; 0x90000
	  case LOW:	mask = 0x08; break;
	  case HIGH:	mask = 0x0C; break;
	  default: return;
	}
	mask = (mask << 16) | 0x01000000;
	config = portConfigRegister(pin);
    d604:	ldr	r3, [pc, #172]	; (d6b4 <attachInterrupt+0xc8>)
    d606:	add.w	r3, r3, r0, lsl #3
    d60a:	mov	r5, r1
    d60c:	ldr	r4, [r3, #4]
	if ((*config & 0x00000700) == 0) {
    d60e:	ldr	r1, [r4, #0]
    d610:	ands.w	r1, r1, #1792	; 0x700
    d614:	beq.n	d6a8 <attachInterrupt+0xbc>
static void portcd_interrupt(void);
#endif

void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void))
{
	_VectorsRam[irq + 16] = function;
    d616:	ldr	r3, [pc, #160]	; (d6b8 <attachInterrupt+0xcc>)
    d618:	ldr	r2, [pc, #160]	; (d6bc <attachInterrupt+0xd0>)
    d61a:	ldr	r1, [pc, #164]	; (d6c0 <attachInterrupt+0xd4>)
    d61c:	str.w	r2, [r3, #412]	; 0x19c

// The Pin Config Register is used to look up the correct interrupt table
// for the corresponding port.
static inline voidFuncPtr* getIsrTable(volatile uint32_t *config) {
	voidFuncPtr* isr_table = NULL;
	if(&PORTA_PCR0 <= config && config <= &PORTA_PCR31) isr_table = isr_table_portA;
    d620:	add.w	r2, r4, #3221225472	; 0xc0000000
static void portcd_interrupt(void);
#endif

void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void))
{
	_VectorsRam[irq + 16] = function;
    d624:	ldr	r0, [pc, #156]	; (d6c4 <attachInterrupt+0xd8>)
    d626:	str.w	r1, [r3, #420]	; 0x1a4

// The Pin Config Register is used to look up the correct interrupt table
// for the corresponding port.
static inline voidFuncPtr* getIsrTable(volatile uint32_t *config) {
	voidFuncPtr* isr_table = NULL;
	if(&PORTA_PCR0 <= config && config <= &PORTA_PCR31) isr_table = isr_table_portA;
    d62a:	sub.w	r1, r2, #299008	; 0x49000
static void portcd_interrupt(void);
#endif

void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void))
{
	_VectorsRam[irq + 16] = function;
    d62e:	ldr	r7, [pc, #152]	; (d6c8 <attachInterrupt+0xdc>)
    d630:	str.w	r0, [r3, #416]	; 0x1a0

// The Pin Config Register is used to look up the correct interrupt table
// for the corresponding port.
static inline voidFuncPtr* getIsrTable(volatile uint32_t *config) {
	voidFuncPtr* isr_table = NULL;
	if(&PORTA_PCR0 <= config && config <= &PORTA_PCR31) isr_table = isr_table_portA;
    d634:	cmp	r1, #124	; 0x7c
static void portcd_interrupt(void);
#endif

void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void))
{
	_VectorsRam[irq + 16] = function;
    d636:	ldr	r0, [pc, #148]	; (d6cc <attachInterrupt+0xe0>)
    d638:	str.w	r7, [r3, #424]	; 0x1a8
    d63c:	str.w	r0, [r3, #428]	; 0x1ac

// The Pin Config Register is used to look up the correct interrupt table
// for the corresponding port.
static inline voidFuncPtr* getIsrTable(volatile uint32_t *config) {
	voidFuncPtr* isr_table = NULL;
	if(&PORTA_PCR0 <= config && config <= &PORTA_PCR31) isr_table = isr_table_portA;
    d640:	bls.n	d69c <attachInterrupt+0xb0>
	else if(&PORTB_PCR0 <= config && config <= &PORTB_PCR31) isr_table = isr_table_portB;
    d642:	sub.w	r3, r2, #303104	; 0x4a000
    d646:	cmp	r3, #124	; 0x7c
    d648:	bls.n	d6a0 <attachInterrupt+0xb4>
	else if(&PORTC_PCR0 <= config && config <= &PORTC_PCR31) isr_table = isr_table_portC;
    d64a:	sub.w	r3, r2, #307200	; 0x4b000
    d64e:	cmp	r3, #124	; 0x7c
    d650:	bls.n	d6a4 <attachInterrupt+0xb8>
	else if(&PORTD_PCR0 <= config && config <= &PORTD_PCR31) isr_table = isr_table_portD;
    d652:	sub.w	r3, r2, #311296	; 0x4c000
    d656:	cmp	r3, #124	; 0x7c
    d658:	bls.n	d6ae <attachInterrupt+0xc2>
	else if(&PORTE_PCR0 <= config && config <= &PORTE_PCR31) isr_table = isr_table_portE;
    d65a:	sub.w	r2, r2, #315392	; 0x4d000
    d65e:	cmp	r2, #124	; 0x7c
    d660:	bhi.n	d6b2 <attachInterrupt+0xc6>
    d662:	ldr	r0, [pc, #108]	; (d6d0 <attachInterrupt+0xe4>)
	attachInterruptVector(IRQ_PORTD, port_D_isr);
	attachInterruptVector(IRQ_PORTE, port_E_isr);
	voidFuncPtr* isr_table = getIsrTable(config);
	if(!isr_table) return;
	uint32_t pin_index = getPinIndex(config);
	__disable_irq();
    d664:	cpsid	i
	cfg = *config;
    d666:	ldr	r3, [r4, #0]
	cfg &= ~0x000F0000;		// disable any previous interrupt
    d668:	bic.w	r3, r3, #983040	; 0xf0000
    d66c:	orr.w	r2, r3, #16777216	; 0x1000000
	*config = cfg;
	isr_table[pin_index] = function;	// set the function pointer
    d670:	ubfx	r1, r4, #2, #5
	cfg |= mask;
    d674:	orrs	r6, r2
	if(!isr_table) return;
	uint32_t pin_index = getPinIndex(config);
	__disable_irq();
	cfg = *config;
	cfg &= ~0x000F0000;		// disable any previous interrupt
	*config = cfg;
    d676:	str	r3, [r4, #0]
	isr_table[pin_index] = function;	// set the function pointer
    d678:	str.w	r5, [r0, r1, lsl #2]
	cfg |= mask;
	*config = cfg;			// enable the new interrupt
    d67c:	str	r6, [r4, #0]
	__enable_irq();
    d67e:	cpsie	i
    d680:	pop	{r3, r4, r5, r6, r7, pc}
    d682:	bx	lr
{
	volatile uint32_t *config;
	uint32_t cfg, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
	switch (mode) {
    d684:	mov.w	r6, #720896	; 0xb0000
    d688:	b.n	d604 <attachInterrupt+0x18>
	  case CHANGE:	mask = 0x0B; break;
	  case RISING:	mask = 0x09; break;
	  case FALLING:	mask = 0x0A; break;
	  case LOW:	mask = 0x08; break;
    d68a:	mov.w	r6, #524288	; 0x80000
    d68e:	b.n	d604 <attachInterrupt+0x18>
	  case HIGH:	mask = 0x0C; break;
    d690:	mov.w	r6, #786432	; 0xc0000
    d694:	b.n	d604 <attachInterrupt+0x18>
{
	volatile uint32_t *config;
	uint32_t cfg, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
	switch (mode) {
    d696:	mov.w	r6, #655360	; 0xa0000
    d69a:	b.n	d604 <attachInterrupt+0x18>

// The Pin Config Register is used to look up the correct interrupt table
// for the corresponding port.
static inline voidFuncPtr* getIsrTable(volatile uint32_t *config) {
	voidFuncPtr* isr_table = NULL;
	if(&PORTA_PCR0 <= config && config <= &PORTA_PCR31) isr_table = isr_table_portA;
    d69c:	ldr	r0, [pc, #52]	; (d6d4 <attachInterrupt+0xe8>)
    d69e:	b.n	d664 <attachInterrupt+0x78>
	else if(&PORTB_PCR0 <= config && config <= &PORTB_PCR31) isr_table = isr_table_portB;
    d6a0:	ldr	r0, [pc, #52]	; (d6d8 <attachInterrupt+0xec>)
    d6a2:	b.n	d664 <attachInterrupt+0x78>
	else if(&PORTC_PCR0 <= config && config <= &PORTC_PCR31) isr_table = isr_table_portC;
    d6a4:	ldr	r0, [pc, #52]	; (d6dc <attachInterrupt+0xf0>)
    d6a6:	b.n	d664 <attachInterrupt+0x78>
    d6a8:	bl	d574 <pinMode.part.2>
    d6ac:	b.n	d616 <attachInterrupt+0x2a>
	else if(&PORTD_PCR0 <= config && config <= &PORTD_PCR31) isr_table = isr_table_portD;
    d6ae:	ldr	r0, [pc, #48]	; (d6e0 <attachInterrupt+0xf4>)
    d6b0:	b.n	d664 <attachInterrupt+0x78>
    d6b2:	pop	{r3, r4, r5, r6, r7, pc}
    d6b4:	.word	0x00014758
    d6b8:	.word	0x1fff8200
    d6bc:	.word	0x1fff8a11
    d6c0:	.word	0x1fff89b9
    d6c4:	.word	0x1fff89e5
    d6c8:	.word	0x1fff898d
    d6cc:	.word	0x1fff8961
    d6d0:	.word	0x1fff8d40
    d6d4:	.word	0x1fff8c68
    d6d8:	.word	0x1fff8ca0
    d6dc:	.word	0x1fff8cf0
    d6e0:	.word	0x1fff8d20

0000d6e4 <detachInterrupt>:

void detachInterrupt(uint8_t pin)
{
	volatile uint32_t *config;

	config = portConfigRegister(pin);
    d6e4:	ldr	r3, [pc, #104]	; (d750 <detachInterrupt+0x6c>)
    d6e6:	add.w	r0, r3, r0, lsl #3
	__enable_irq();
#endif
}

void detachInterrupt(uint8_t pin)
{
    d6ea:	push	{r4}
	volatile uint32_t *config;

	config = portConfigRegister(pin);
    d6ec:	ldr	r2, [r0, #4]

// The Pin Config Register is used to look up the correct interrupt table
// for the corresponding port.
static inline voidFuncPtr* getIsrTable(volatile uint32_t *config) {
	voidFuncPtr* isr_table = NULL;
	if(&PORTA_PCR0 <= config && config <= &PORTA_PCR31) isr_table = isr_table_portA;
    d6ee:	add.w	r3, r2, #3221225472	; 0xc0000000
    d6f2:	sub.w	r1, r3, #299008	; 0x49000
    d6f6:	cmp	r1, #124	; 0x7c
    d6f8:	bls.n	d742 <detachInterrupt+0x5e>
	else if(&PORTB_PCR0 <= config && config <= &PORTB_PCR31) isr_table = isr_table_portB;
    d6fa:	sub.w	r1, r3, #303104	; 0x4a000
    d6fe:	cmp	r1, #124	; 0x7c
    d700:	bls.n	d71e <detachInterrupt+0x3a>
	else if(&PORTC_PCR0 <= config && config <= &PORTC_PCR31) isr_table = isr_table_portC;
    d702:	sub.w	r1, r3, #307200	; 0x4b000
    d706:	cmp	r1, #124	; 0x7c
    d708:	bls.n	d74a <detachInterrupt+0x66>
	else if(&PORTD_PCR0 <= config && config <= &PORTD_PCR31) isr_table = isr_table_portD;
    d70a:	sub.w	r1, r3, #311296	; 0x4c000
    d70e:	cmp	r1, #124	; 0x7c
    d710:	bls.n	d746 <detachInterrupt+0x62>
	else if(&PORTE_PCR0 <= config && config <= &PORTE_PCR31) isr_table = isr_table_portE;
    d712:	sub.w	r3, r3, #315392	; 0x4d000
    d716:	cmp	r3, #124	; 0x7c
    d718:	bhi.n	d73e <detachInterrupt+0x5a>
    d71a:	ldr	r4, [pc, #56]	; (d754 <detachInterrupt+0x70>)
    d71c:	b.n	d720 <detachInterrupt+0x3c>
// The Pin Config Register is used to look up the correct interrupt table
// for the corresponding port.
static inline voidFuncPtr* getIsrTable(volatile uint32_t *config) {
	voidFuncPtr* isr_table = NULL;
	if(&PORTA_PCR0 <= config && config <= &PORTA_PCR31) isr_table = isr_table_portA;
	else if(&PORTB_PCR0 <= config && config <= &PORTB_PCR31) isr_table = isr_table_portB;
    d71e:	ldr	r4, [pc, #56]	; (d758 <detachInterrupt+0x74>)
	config = portConfigRegister(pin);
#if defined(KINETISK)
	voidFuncPtr* isr_table = getIsrTable(config);
	if(!isr_table) return;
	uint32_t pin_index = getPinIndex(config);
	__disable_irq();
    d720:	cpsid	i
	*config = ((*config & ~0x000F0000) | 0x01000000);
    d722:	ldr	r3, [r2, #0]
	isr_table[pin_index] = dummy_isr;
    d724:	ldr	r0, [pc, #52]	; (d75c <detachInterrupt+0x78>)
#if defined(KINETISK)
	voidFuncPtr* isr_table = getIsrTable(config);
	if(!isr_table) return;
	uint32_t pin_index = getPinIndex(config);
	__disable_irq();
	*config = ((*config & ~0x000F0000) | 0x01000000);
    d726:	bic.w	r3, r3, #17694720	; 0x10e0000
	isr_table[pin_index] = dummy_isr;
    d72a:	ubfx	r1, r2, #2, #5
#if defined(KINETISK)
	voidFuncPtr* isr_table = getIsrTable(config);
	if(!isr_table) return;
	uint32_t pin_index = getPinIndex(config);
	__disable_irq();
	*config = ((*config & ~0x000F0000) | 0x01000000);
    d72e:	bic.w	r3, r3, #65536	; 0x10000
    d732:	orr.w	r3, r3, #16777216	; 0x1000000
    d736:	str	r3, [r2, #0]
	isr_table[pin_index] = dummy_isr;
    d738:	str.w	r0, [r4, r1, lsl #2]
	__enable_irq();
    d73c:	cpsie	i
	__disable_irq();
	*config = ((*config & ~0x000F0000) | 0x01000000);
	intFunc[pin] = dummy_isr;
	__enable_irq();
#endif
}
    d73e:	pop	{r4}
    d740:	bx	lr

// The Pin Config Register is used to look up the correct interrupt table
// for the corresponding port.
static inline voidFuncPtr* getIsrTable(volatile uint32_t *config) {
	voidFuncPtr* isr_table = NULL;
	if(&PORTA_PCR0 <= config && config <= &PORTA_PCR31) isr_table = isr_table_portA;
    d742:	ldr	r4, [pc, #28]	; (d760 <detachInterrupt+0x7c>)
    d744:	b.n	d720 <detachInterrupt+0x3c>
	else if(&PORTB_PCR0 <= config && config <= &PORTB_PCR31) isr_table = isr_table_portB;
	else if(&PORTC_PCR0 <= config && config <= &PORTC_PCR31) isr_table = isr_table_portC;
	else if(&PORTD_PCR0 <= config && config <= &PORTD_PCR31) isr_table = isr_table_portD;
    d746:	ldr	r4, [pc, #28]	; (d764 <detachInterrupt+0x80>)
    d748:	b.n	d720 <detachInterrupt+0x3c>
// for the corresponding port.
static inline voidFuncPtr* getIsrTable(volatile uint32_t *config) {
	voidFuncPtr* isr_table = NULL;
	if(&PORTA_PCR0 <= config && config <= &PORTA_PCR31) isr_table = isr_table_portA;
	else if(&PORTB_PCR0 <= config && config <= &PORTB_PCR31) isr_table = isr_table_portB;
	else if(&PORTC_PCR0 <= config && config <= &PORTC_PCR31) isr_table = isr_table_portC;
    d74a:	ldr	r4, [pc, #28]	; (d768 <detachInterrupt+0x84>)
    d74c:	b.n	d720 <detachInterrupt+0x3c>
    d74e:	nop
    d750:	.word	0x00014758
    d754:	.word	0x1fff8d40
    d758:	.word	0x1fff8ca0
    d75c:	.word	0x0000d52d
    d760:	.word	0x1fff8c68
    d764:	.word	0x1fff8d20
    d768:	.word	0x1fff8cf0

0000d76c <rtc_get>:

#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)

unsigned long rtc_get(void)
{
	return RTC_TSR;
    d76c:	ldr	r3, [pc, #4]	; (d774 <rtc_get+0x8>)
    d76e:	ldr	r0, [r3, #0]
}
    d770:	bx	lr
    d772:	nop
    d774:	.word	0x4003d000

0000d778 <rtc_set>:

void rtc_set(unsigned long t)
{
    d778:	push	{r4, r5}
	RTC_SR = 0;
    d77a:	ldr	r3, [pc, #20]	; (d790 <rtc_set+0x18>)
	RTC_TPR = 0;
    d77c:	ldr	r5, [pc, #20]	; (d794 <rtc_set+0x1c>)
	RTC_TSR = t;
    d77e:	ldr	r4, [pc, #24]	; (d798 <rtc_set+0x20>)
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
	RTC_SR = 0;
    d780:	movs	r2, #0
	RTC_TPR = 0;
	RTC_TSR = t;
	RTC_SR = RTC_SR_TCE;
    d782:	movs	r1, #16
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
	RTC_SR = 0;
    d784:	str	r2, [r3, #0]
	RTC_TPR = 0;
    d786:	str	r2, [r5, #0]
	RTC_TSR = t;
    d788:	str	r0, [r4, #0]
	RTC_SR = RTC_SR_TCE;
    d78a:	str	r1, [r3, #0]
}
    d78c:	pop	{r4, r5}
    d78e:	bx	lr
    d790:	.word	0x4003d014
    d794:	.word	0x4003d004
    d798:	.word	0x4003d000

0000d79c <digitalWrite>:

// TODO: startup code needs to initialize all pins to GPIO mode, input by default

void digitalWrite(uint8_t pin, uint8_t val)
{
	if (pin >= CORE_NUM_DIGITAL) return;
    d79c:	cmp	r0, #33	; 0x21
    d79e:	bhi.n	d7a4 <digitalWrite+0x8>
    d7a0:	b.w	d530 <digitalWrite.part.1>
    d7a4:	bx	lr
    d7a6:	nop

0000d7a8 <pinMode>:

void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
    d7a8:	cmp	r0, #33	; 0x21
    d7aa:	bhi.n	d7b0 <pinMode+0x8>
    d7ac:	b.w	d574 <pinMode.part.2>
    d7b0:	bx	lr
    d7b2:	nop

0000d7b4 <micros>:

uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
    d7b4:	cpsid	i
	current = SYST_CVR;
	count = systick_millis_count;
    d7b6:	ldr	r1, [pc, #48]	; (d7e8 <micros+0x34>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    d7b8:	ldr	r3, [pc, #48]	; (d7ec <micros+0x38>)
	count = systick_millis_count;
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    d7ba:	ldr	r2, [pc, #52]	; (d7f0 <micros+0x3c>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    d7bc:	ldr	r3, [r3, #0]
	count = systick_millis_count;
    d7be:	ldr	r0, [r1, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    d7c0:	ldr	r2, [r2, #0]
	__enable_irq();
    d7c2:	cpsie	i
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    d7c4:	lsls	r2, r2, #5
    d7c6:	bpl.n	d7ce <micros+0x1a>
    d7c8:	cmp	r3, #50	; 0x32
    d7ca:	it	hi
    d7cc:	addhi	r0, #1
#if defined(KINETISL) && F_CPU == 48000000
	return count * 1000 + ((current * (uint32_t)87381) >> 22);
#elif defined(KINETISL) && F_CPU == 24000000
	return count * 1000 + ((current * (uint32_t)174763) >> 22);
#endif
	return count * 1000 + current / (F_CPU / 1000000);
    d7ce:	ldr	r1, [pc, #36]	; (d7f4 <micros+0x40>)
    d7d0:	rsb	r3, r3, #95744	; 0x17600
    d7d4:	mov.w	r2, #1000	; 0x3e8
    d7d8:	adds	r3, #255	; 0xff
    d7da:	umull	r1, r3, r1, r3
    d7de:	mul.w	r0, r2, r0
}
    d7e2:	add.w	r0, r0, r3, lsr #6
    d7e6:	bx	lr
    d7e8:	.word	0x200030a4
    d7ec:	.word	0xe000e018
    d7f0:	.word	0xe000ed04
    d7f4:	.word	0xaaaaaaab

0000d7f8 <delay>:

void delay(uint32_t ms)
{
    d7f8:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    d7fc:	mov	r5, r0

uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
    d7fe:	cpsid	i
	current = SYST_CVR;
	count = systick_millis_count;
    d800:	ldr	r7, [pc, #128]	; (d884 <delay+0x8c>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    d802:	ldr	r3, [pc, #132]	; (d888 <delay+0x90>)
	count = systick_millis_count;
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    d804:	ldr	r2, [pc, #132]	; (d88c <delay+0x94>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    d806:	ldr	r3, [r3, #0]
	count = systick_millis_count;
    d808:	ldr	r4, [r7, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    d80a:	ldr	r2, [r2, #0]
	__enable_irq();
    d80c:	cpsie	i
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    d80e:	lsls	r2, r2, #5
    d810:	bpl.n	d818 <delay+0x20>
    d812:	cmp	r3, #50	; 0x32
    d814:	it	hi
    d816:	addhi	r4, #1

void delay(uint32_t ms)
{
	uint32_t start = micros();

	if (ms > 0) {
    d818:	cbz	r5, d880 <delay+0x88>
#if defined(KINETISL) && F_CPU == 48000000
	return count * 1000 + ((current * (uint32_t)87381) >> 22);
#elif defined(KINETISL) && F_CPU == 24000000
	return count * 1000 + ((current * (uint32_t)174763) >> 22);
#endif
	return count * 1000 + current / (F_CPU / 1000000);
    d81a:	rsb	r3, r3, #95744	; 0x17600
    d81e:	ldr	r6, [pc, #112]	; (d890 <delay+0x98>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    d820:	ldr.w	r9, [pc, #100]	; d888 <delay+0x90>
	count = systick_millis_count;
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    d824:	ldr.w	r8, [pc, #100]	; d88c <delay+0x94>
#if defined(KINETISL) && F_CPU == 48000000
	return count * 1000 + ((current * (uint32_t)87381) >> 22);
#elif defined(KINETISL) && F_CPU == 24000000
	return count * 1000 + ((current * (uint32_t)174763) >> 22);
#endif
	return count * 1000 + current / (F_CPU / 1000000);
    d828:	adds	r3, #255	; 0xff
    d82a:	mov.w	r2, #1000	; 0x3e8
    d82e:	umull	r1, r3, r6, r3
    d832:	mul.w	r4, r2, r4
    d836:	add.w	r4, r4, r3, lsr #6

uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
    d83a:	cpsid	i
	current = SYST_CVR;
    d83c:	ldr.w	r1, [r9]
	count = systick_millis_count;
    d840:	ldr	r2, [r7, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    d842:	ldr.w	lr, [r8]
	__enable_irq();
    d846:	cpsie	i
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    d848:	rsb	r3, r1, #95744	; 0x17600
    d84c:	adds	r3, #255	; 0xff
    d84e:	umull	r0, r3, r6, r3
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
	__enable_irq();
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    d852:	tst.w	lr, #67108864	; 0x4000000
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    d856:	rsb	r3, r4, r3, lsr #6
    d85a:	mov.w	r0, #1000	; 0x3e8
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
	__enable_irq();
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    d85e:	beq.n	d866 <delay+0x6e>
    d860:	cmp	r1, #50	; 0x32
    d862:	it	hi
    d864:	addhi	r2, #1
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    d866:	mla	r3, r0, r2, r3
    d86a:	cmp.w	r3, #1000	; 0x3e8
    d86e:	bcc.n	d87a <delay+0x82>
				ms--;
				if (ms == 0) return;
    d870:	subs	r5, #1
    d872:	beq.n	d880 <delay+0x88>
				start += 1000;
    d874:	add.w	r4, r4, #1000	; 0x3e8
    d878:	b.n	d83a <delay+0x42>
			}
			yield();
    d87a:	bl	e498 <yield>
		}
    d87e:	b.n	d83a <delay+0x42>
    d880:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    d884:	.word	0x200030a4
    d888:	.word	0xe000e018
    d88c:	.word	0xe000ed04
    d890:	.word	0xaaaaaaab

0000d894 <_init_Teensyduino_internal_>:
#endif

//void init_pins(void)
__attribute__((noinline))
void _init_Teensyduino_internal_(void)
{
    d894:	push	{r3, r4, r5, r6, r7, lr}
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
    d896:	ldr	r3, [pc, #180]	; (d94c <_init_Teensyduino_internal_+0xb8>)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
    d898:	ldr	r1, [pc, #180]	; (d950 <_init_Teensyduino_internal_+0xbc>)
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    d89a:	ldr.w	lr, [pc, #208]	; d96c <_init_Teensyduino_internal_+0xd8>
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
    d89e:	ldr.w	ip, [pc, #208]	; d970 <_init_Teensyduino_internal_+0xdc>
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
	FTM0_C1SC = 0x28;
    d8a2:	ldr	r6, [pc, #176]	; (d954 <_init_Teensyduino_internal_+0xc0>)
	FTM0_C2SC = 0x28;
	FTM0_C3SC = 0x28;
    d8a4:	ldr	r5, [pc, #176]	; (d958 <_init_Teensyduino_internal_+0xc4>)
	FTM0_C4SC = 0x28;
    d8a6:	ldr	r4, [pc, #180]	; (d95c <_init_Teensyduino_internal_+0xc8>)
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
	FTM0_C1SC = 0x28;
	FTM0_C2SC = 0x28;
    d8a8:	ldr	r2, [pc, #180]	; (d960 <_init_Teensyduino_internal_+0xcc>)
	FTM0_C3SC = 0x28;
	FTM0_C4SC = 0x28;
	FTM0_C5SC = 0x28;
    d8aa:	ldr	r7, [pc, #184]	; (d964 <_init_Teensyduino_internal_+0xd0>)
//void init_pins(void)
__attribute__((noinline))
void _init_Teensyduino_internal_(void)
{
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
    d8ac:	mov.w	r0, #8388608	; 0x800000
    d8b0:	str	r0, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTB);
    d8b2:	mov.w	r0, #16777216	; 0x1000000
    d8b6:	str	r0, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTC);
    d8b8:	mov.w	r0, #33554432	; 0x2000000
    d8bc:	str	r0, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTD);
    d8be:	mov.w	r0, #67108864	; 0x4000000
    d8c2:	str	r0, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTE);
    d8c4:	mov.w	r0, #134217728	; 0x8000000
    d8c8:	str	r0, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTA);
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
    d8ca:	movs	r0, #0
    d8cc:	str	r0, [r1, #0]
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    d8ce:	movs	r3, #40	; 0x28
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
    d8d0:	movw	r1, #49151	; 0xbfff
    d8d4:	str.w	r1, [ip]
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    d8d8:	str.w	r3, [lr]
	FTM0_C1SC = 0x28;
    d8dc:	str	r3, [r6, #0]
	FTM0_C2SC = 0x28;
    d8de:	str	r3, [r2, #0]
	FTM0_C3SC = 0x28;
    d8e0:	str	r3, [r5, #0]
	FTM0_C4SC = 0x28;
    d8e2:	str	r3, [r4, #0]
	FTM0_C5SC = 0x28;
    d8e4:	str	r3, [r7, #0]
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
    d8e6:	str	r3, [r6, #40]	; 0x28
	FTM0_C7SC = 0x28;
    d8e8:	str	r3, [r2, #40]	; 0x28
	FTM3_C4SC = 0x28;
	FTM3_C5SC = 0x28;
	FTM3_C6SC = 0x28;
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    d8ea:	movs	r2, #9
    d8ec:	str.w	r2, [r5, #-36]
	FTM1_CNT = 0;
    d8f0:	str.w	r0, [r4, #4056]	; 0xfd8
	FTM1_MOD = DEFAULT_FTM_MOD;
	FTM1_C0SC = 0x28;
	FTM1_C1SC = 0x28;
    d8f4:	add.w	r5, r5, #4080	; 0xff0
	FTM3_C6SC = 0x28;
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
	FTM1_CNT = 0;
	FTM1_MOD = DEFAULT_FTM_MOD;
    d8f8:	str.w	r1, [r7, #4052]	; 0xfd4
	FTM1_C0SC = 0x28;
	FTM1_C1SC = 0x28;
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
    d8fc:	add.w	r7, r7, #522240	; 0x7f800
    d900:	add.w	r7, r7, #2000	; 0x7d0
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
	FTM1_CNT = 0;
	FTM1_MOD = DEFAULT_FTM_MOD;
	FTM1_C0SC = 0x28;
    d904:	str.w	r3, [r6, #4088]	; 0xff8
	FTM1_C1SC = 0x28;
    d908:	str	r3, [r5, #0]
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
	FTM2_MOD = DEFAULT_FTM_MOD;
    d90a:	add.w	r6, r6, #522240	; 0x7f800
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
	FTM1_CNT = 0;
	FTM1_MOD = DEFAULT_FTM_MOD;
	FTM1_C0SC = 0x28;
	FTM1_C1SC = 0x28;
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    d90e:	str.w	r2, [r4, #4052]	; 0xfd4
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
	FTM2_MOD = DEFAULT_FTM_MOD;
	FTM2_C0SC = 0x28;
    d912:	add.w	r5, r5, #518144	; 0x7e800
	FTM2_C1SC = 0x28;
    d916:	add.w	r4, r4, #522240	; 0x7f800
	FTM1_MOD = DEFAULT_FTM_MOD;
	FTM1_C0SC = 0x28;
	FTM1_C1SC = 0x28;
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
    d91a:	str	r0, [r7, #0]
	FTM2_MOD = DEFAULT_FTM_MOD;
    d91c:	addw	r6, r6, #2036	; 0x7f4
	FTM2_C0SC = 0x28;
	FTM2_C1SC = 0x28;
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    d920:	ldr	r0, [pc, #68]	; (d968 <_init_Teensyduino_internal_+0xd4>)
	FTM1_C0SC = 0x28;
	FTM1_C1SC = 0x28;
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
	FTM2_MOD = DEFAULT_FTM_MOD;
    d922:	str	r1, [r6, #0]
	FTM2_C0SC = 0x28;
    d924:	add.w	r5, r5, #2040	; 0x7f8
	FTM2_C1SC = 0x28;
    d928:	add.w	r4, r4, #2024	; 0x7e8
	FTM1_C1SC = 0x28;
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
	FTM2_MOD = DEFAULT_FTM_MOD;
	FTM2_C0SC = 0x28;
    d92c:	str	r3, [r5, #0]
	FTM2_C1SC = 0x28;
    d92e:	str	r3, [r4, #0]
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    d930:	str	r2, [r0, #0]
	TPM1_MOD = 32767;
	TPM1_C0SC = 0x28;
	TPM1_C1SC = 0x28;
	TPM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0);
#endif
	analog_init();
    d932:	bl	cf7c <analog_init>

	// for background about this startup delay, please see these conversations
	// https://forum.pjrc.com/threads/36606-startup-time-(400ms)?p=113980&viewfull=1#post113980
	// https://forum.pjrc.com/threads/31290-Teensey-3-2-Teensey-Loader-1-24-Issues?p=87273&viewfull=1#post87273

	delay(TEENSY_INIT_USB_DELAY_BEFORE);
    d936:	movs	r0, #25
    d938:	bl	d7f8 <delay>
	usb_init();
    d93c:	bl	e3e4 <usb_init>
	delay(TEENSY_INIT_USB_DELAY_AFTER);
    d940:	movw	r0, #275	; 0x113
}
    d944:	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	// https://forum.pjrc.com/threads/36606-startup-time-(400ms)?p=113980&viewfull=1#post113980
	// https://forum.pjrc.com/threads/31290-Teensey-3-2-Teensey-Loader-1-24-Issues?p=87273&viewfull=1#post87273

	delay(TEENSY_INIT_USB_DELAY_BEFORE);
	usb_init();
	delay(TEENSY_INIT_USB_DELAY_AFTER);
    d948:	b.w	d7f8 <delay>
    d94c:	.word	0xe000e108
    d950:	.word	0x40038004
    d954:	.word	0x40038014
    d958:	.word	0x40038024
    d95c:	.word	0x4003802c
    d960:	.word	0x4003801c
    d964:	.word	0x40038034
    d968:	.word	0x400b8000
    d96c:	.word	0x4003800c
    d970:	.word	0x40038008

0000d974 <usb_malloc>:
usb_packet_t * usb_malloc(void)
{
	unsigned int n, avail;
	uint8_t *p;

	__disable_irq();
    d974:	cpsid	i
	avail = usb_buffer_available;
    d976:	ldr	r0, [pc, #52]	; (d9ac <usb_malloc+0x38>)
    d978:	ldr	r2, [r0, #0]
	n = __builtin_clz(avail); // clz = count leading zeros
    d97a:	clz	r3, r2
	if (n >= NUM_USB_BUFFERS) {
    d97e:	cmp	r3, #19
    d980:	bgt.n	d9a4 <usb_malloc+0x30>
	}
	//serial_print("malloc:");
	//serial_phex(n);
	//serial_print("\n");

	usb_buffer_available = avail & ~(0x80000000 >> n);
    d982:	mov.w	r1, #2147483648	; 0x80000000
    d986:	lsrs	r1, r3
    d988:	bic.w	r2, r2, r1
    d98c:	str	r2, [r0, #0]
	__enable_irq();
    d98e:	cpsie	i
	p = usb_buffer_memory + (n * sizeof(usb_packet_t));
    d990:	ldr	r0, [pc, #28]	; (d9b0 <usb_malloc+0x3c>)
    d992:	add.w	r3, r3, r3, lsl #3
    d996:	lsls	r3, r3, #3
    d998:	adds	r2, r0, r3
	//serial_print("malloc:");
	//serial_phex32((int)p);
	//serial_print("\n");
	*(uint32_t *)p = 0;
    d99a:	movs	r1, #0
    d99c:	str	r1, [r0, r3]
	*(uint32_t *)(p + 4) = 0;
	return (usb_packet_t *)p;
    d99e:	mov	r0, r2
	p = usb_buffer_memory + (n * sizeof(usb_packet_t));
	//serial_print("malloc:");
	//serial_phex32((int)p);
	//serial_print("\n");
	*(uint32_t *)p = 0;
	*(uint32_t *)(p + 4) = 0;
    d9a0:	str	r1, [r2, #4]
	return (usb_packet_t *)p;
}
    d9a2:	bx	lr

	__disable_irq();
	avail = usb_buffer_available;
	n = __builtin_clz(avail); // clz = count leading zeros
	if (n >= NUM_USB_BUFFERS) {
		__enable_irq();
    d9a4:	cpsie	i
		return NULL;
    d9a6:	movs	r0, #0
    d9a8:	bx	lr
    d9aa:	nop
    d9ac:	.word	0x1fff8d48
    d9b0:	.word	0x1fff83bc

0000d9b4 <usb_free>:
void usb_free(usb_packet_t *p)
{
	unsigned int n, mask;

	//serial_print("free:");
	n = ((uint8_t *)p - usb_buffer_memory) / sizeof(usb_packet_t);
    d9b4:	ldr	r3, [pc, #52]	; (d9ec <usb_free+0x38>)
    d9b6:	ldr	r2, [pc, #56]	; (d9f0 <usb_free+0x3c>)
    d9b8:	subs	r3, r0, r3
    d9ba:	umull	r2, r3, r2, r3
    d9be:	lsrs	r3, r3, #4
	if (n >= NUM_USB_BUFFERS) return;
    d9c0:	cmp	r3, #19
    d9c2:	bhi.n	d9de <usb_free+0x2a>
	//serial_phex(n);
	//serial_print("\n");

	// if any endpoints are starving for memory to receive
	// packets, give this memory to them immediately!
	if (usb_rx_memory_needed && usb_configuration) {
    d9c4:	ldr	r2, [pc, #44]	; (d9f4 <usb_free+0x40>)
    d9c6:	ldrb	r2, [r2, #0]
    d9c8:	cbnz	r2, d9e0 <usb_free+0x2c>
		usb_rx_memory(p);
		return;
	}

	mask = (0x80000000 >> n);
	__disable_irq();
    d9ca:	cpsid	i
	usb_buffer_available |= mask;
    d9cc:	ldr	r0, [pc, #40]	; (d9f8 <usb_free+0x44>)
    d9ce:	mov.w	r1, #2147483648	; 0x80000000
    d9d2:	ldr	r2, [r0, #0]
    d9d4:	lsr.w	r3, r1, r3
    d9d8:	orrs	r2, r3
    d9da:	str	r2, [r0, #0]
	__enable_irq();
    d9dc:	cpsie	i
    d9de:	bx	lr
	//serial_phex(n);
	//serial_print("\n");

	// if any endpoints are starving for memory to receive
	// packets, give this memory to them immediately!
	if (usb_rx_memory_needed && usb_configuration) {
    d9e0:	ldr	r2, [pc, #24]	; (d9fc <usb_free+0x48>)
    d9e2:	ldrb	r2, [r2, #0]
    d9e4:	cmp	r2, #0
    d9e6:	beq.n	d9ca <usb_free+0x16>
		//serial_print("give to rx:");
		//serial_phex32((int)p);
		//serial_print("\n");
		usb_rx_memory(p);
    d9e8:	b.w	da68 <usb_rx_memory>
    d9ec:	.word	0x1fff83bc
    d9f0:	.word	0x38e38e39
    d9f4:	.word	0x2000319d
    d9f8:	.word	0x1fff8d48
    d9fc:	.word	0x200031a8

0000da00 <usb_rx>:


usb_packet_t *usb_rx(uint32_t endpoint)
{
	usb_packet_t *ret;
	endpoint--;
    da00:	subs	r3, r0, #1
	if (endpoint >= NUM_ENDPOINTS) return NULL;
    da02:	cmp	r3, #5
    da04:	bhi.n	da30 <usb_rx+0x30>
	__disable_irq();
    da06:	cpsid	i
	ret = rx_first[endpoint];
    da08:	ldr	r1, [pc, #40]	; (da34 <usb_rx+0x34>)
    da0a:	ldr.w	r0, [r1, r3, lsl #2]
	if (ret) {
    da0e:	cbz	r0, da2c <usb_rx+0x2c>




usb_packet_t *usb_rx(uint32_t endpoint)
{
    da10:	push	{r4, r5, r6}
	if (endpoint >= NUM_ENDPOINTS) return NULL;
	__disable_irq();
	ret = rx_first[endpoint];
	if (ret) {
		rx_first[endpoint] = ret->next;
		usb_rx_byte_count_data[endpoint] -= ret->len;
    da12:	ldr	r4, [pc, #36]	; (da38 <usb_rx+0x38>)
    da14:	ldrh	r5, [r0, #0]
    da16:	ldrh.w	r2, [r4, r3, lsl #1]
	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return NULL;
	__disable_irq();
	ret = rx_first[endpoint];
	if (ret) {
		rx_first[endpoint] = ret->next;
    da1a:	ldr	r6, [r0, #4]
    da1c:	str.w	r6, [r1, r3, lsl #2]
		usb_rx_byte_count_data[endpoint] -= ret->len;
    da20:	subs	r2, r2, r5
    da22:	strh.w	r2, [r4, r3, lsl #1]
	}
	__enable_irq();
    da26:	cpsie	i
	//serial_phex(endpoint);
	//serial_print(", packet=");
	//serial_phex32(ret);
	//serial_print("\n");
	return ret;
}
    da28:	pop	{r4, r5, r6}
    da2a:	bx	lr
	ret = rx_first[endpoint];
	if (ret) {
		rx_first[endpoint] = ret->next;
		usb_rx_byte_count_data[endpoint] -= ret->len;
	}
	__enable_irq();
    da2c:	cpsie	i
	//serial_phex(endpoint);
	//serial_print(", packet=");
	//serial_phex32(ret);
	//serial_print("\n");
	return ret;
}
    da2e:	bx	lr

usb_packet_t *usb_rx(uint32_t endpoint)
{
	usb_packet_t *ret;
	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return NULL;
    da30:	movs	r0, #0
    da32:	bx	lr
    da34:	.word	0x20003108
    da38:	.word	0x20003224

0000da3c <usb_tx_packet_count>:
uint32_t usb_tx_packet_count(uint32_t endpoint)
{
	const usb_packet_t *p;
	uint32_t count=0;

	endpoint--;
    da3c:	subs	r0, #1
	if (endpoint >= NUM_ENDPOINTS) return 0;
    da3e:	cmp	r0, #5
    da40:	bhi.n	da5a <usb_tx_packet_count+0x1e>
	__disable_irq();
    da42:	cpsid	i
	for (p = tx_first[endpoint]; p; p = p->next) count++;
    da44:	ldr	r3, [pc, #28]	; (da64 <usb_tx_packet_count+0x28>)
    da46:	ldr.w	r3, [r3, r0, lsl #2]
    da4a:	cbz	r3, da5e <usb_tx_packet_count+0x22>
    da4c:	movs	r0, #0
    da4e:	ldr	r3, [r3, #4]
    da50:	adds	r0, #1
    da52:	cmp	r3, #0
    da54:	bne.n	da4e <usb_tx_packet_count+0x12>
	__enable_irq();
    da56:	cpsie	i
	return count;
    da58:	bx	lr
{
	const usb_packet_t *p;
	uint32_t count=0;

	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return 0;
    da5a:	movs	r0, #0
	__disable_irq();
	for (p = tx_first[endpoint]; p; p = p->next) count++;
	__enable_irq();
	return count;
}
    da5c:	bx	lr
// https://forum.pjrc.com/threads/58663?p=223513&viewfull=1#post223513
//
uint32_t usb_tx_packet_count(uint32_t endpoint)
{
	const usb_packet_t *p;
	uint32_t count=0;
    da5e:	mov	r0, r3
    da60:	b.n	da56 <usb_tx_packet_count+0x1a>
    da62:	nop
    da64:	.word	0x20003164

0000da68 <usb_rx_memory>:
// user is creating data very quickly, their consumption could starve reception
// without this prioritization.  The packet buffer (input) is assigned to the
// first endpoint needing memory.
//
void usb_rx_memory(usb_packet_t *packet)
{
    da68:	push	{r4, r5, r6, r7}
	unsigned int i;
	const uint8_t *cfg;

	cfg = usb_endpoint_config_table;
	//serial_print("rx_mem:");
	__disable_irq();
    da6a:	cpsid	i
void usb_rx_memory(usb_packet_t *packet)
{
	unsigned int i;
	const uint8_t *cfg;

	cfg = usb_endpoint_config_table;
    da6c:	ldr	r1, [pc, #104]	; (dad8 <usb_rx_memory+0x70>)
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
    da6e:	ldr	r6, [pc, #108]	; (dadc <usb_rx_memory+0x74>)
	const uint8_t *cfg;

	cfg = usb_endpoint_config_table;
	//serial_print("rx_mem:");
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
    da70:	movs	r3, #1
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    da72:	ldrb.w	r4, [r1], #1
			if (table[index(i, RX, EVEN)].desc == 0) {
    da76:	ldr	r7, [pc, #100]	; (dadc <usb_rx_memory+0x74>)
    da78:	lsls	r2, r3, #2
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    da7a:	lsls	r4, r4, #28
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    da7c:	orr.w	r5, r2, #1
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    da80:	bpl.n	da8e <usb_rx_memory+0x26>
			if (table[index(i, RX, EVEN)].desc == 0) {
    da82:	ldr.w	r4, [r6, r2, lsl #3]
    da86:	cbz	r4, daa2 <usb_rx_memory+0x3a>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    da88:	ldr.w	r2, [r6, r5, lsl #3]
    da8c:	cbz	r2, dabe <usb_rx_memory+0x56>
	const uint8_t *cfg;

	cfg = usb_endpoint_config_table;
	//serial_print("rx_mem:");
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
    da8e:	adds	r3, #1
    da90:	cmp	r3, #7
    da92:	bne.n	da72 <usb_rx_memory+0xa>
				//serial_print(",odd\n");
				return;
			}
		}
	}
	__enable_irq();
    da94:	cpsie	i
	// we should never reach this point.  If we get here, it means
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
    da96:	ldr	r3, [pc, #72]	; (dae0 <usb_rx_memory+0x78>)
    da98:	movs	r2, #0
    da9a:	strb	r2, [r3, #0]
	usb_free(packet);
	return;
}
    da9c:	pop	{r4, r5, r6, r7}
	__enable_irq();
	// we should never reach this point.  If we get here, it means
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
	usb_free(packet);
    da9e:	b.w	d9b4 <usb_free>
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
    daa2:	ldr	r4, [pc, #60]	; (dae0 <usb_rx_memory+0x78>)
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    daa4:	ldr	r5, [pc, #60]	; (dae4 <usb_rx_memory+0x7c>)
				usb_rx_memory_needed--;
    daa6:	ldrb	r1, [r4, #0]
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
    daa8:	add.w	r3, r7, r3, lsl #5
    daac:	adds	r0, #8
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
    daae:	subs	r1, #1
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
    dab0:	str	r0, [r3, #4]
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
    dab2:	strb	r1, [r4, #0]
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    dab4:	str.w	r5, [r7, r2, lsl #3]
				usb_rx_memory_needed--;
				__enable_irq();
    dab8:	cpsie	i
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
	usb_free(packet);
	return;
}
    daba:	pop	{r4, r5, r6, r7}
    dabc:	bx	lr
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
    dabe:	ldr	r2, [pc, #32]	; (dae0 <usb_rx_memory+0x78>)
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    dac0:	ldr	r1, [pc, #36]	; (dae8 <usb_rx_memory+0x80>)
				usb_rx_memory_needed--;
    dac2:	ldrb	r3, [r2, #0]
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
    dac4:	add.w	r4, r7, r5, lsl #3
    dac8:	adds	r0, #8
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
    daca:	subs	r3, #1
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
    dacc:	str	r0, [r4, #4]
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
    dace:	strb	r3, [r2, #0]
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    dad0:	str.w	r1, [r7, r5, lsl #3]
				usb_rx_memory_needed--;
				__enable_irq();
    dad4:	cpsie	i
				//serial_phex(i);
				//serial_print(",odd\n");
				return;
    dad6:	b.n	daba <usb_rx_memory+0x52>
    dad8:	.word	0x000146e8
    dadc:	.word	0x1fff8000
    dae0:	.word	0x2000319d
    dae4:	.word	0x00400088
    dae8:	.word	0x004000c8

0000daec <usb_tx>:
void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
	uint8_t next;

	endpoint--;
    daec:	subs	r3, r0, #1
	if (endpoint >= NUM_ENDPOINTS) return;
    daee:	cmp	r3, #5
    daf0:	bhi.n	db2e <usb_tx+0x42>
//#define index(endpoint, tx, odd) (((endpoint) << 2) | ((tx) << 1) | (odd))
//#define stat2bufferdescriptor(stat) (table + ((stat) >> 2))

void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
    daf2:	ldr	r2, [pc, #108]	; (db60 <usb_tx+0x74>)
    daf4:	lsls	r0, r0, #5
    daf6:	orr.w	r0, r0, #16

//#define index(endpoint, tx, odd) (((endpoint) << 2) | ((tx) << 1) | (odd))
//#define stat2bufferdescriptor(stat) (table + ((stat) >> 2))

void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
    dafa:	push	{r4, r5}
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
    dafc:	add	r0, r2
	uint8_t next;

	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return;
	__disable_irq();
    dafe:	cpsid	i
	//serial_print("txstate=");
	//serial_phex(tx_state[endpoint]);
	//serial_print("\n");
	switch (tx_state[endpoint]) {
    db00:	ldr	r4, [pc, #96]	; (db64 <usb_tx+0x78>)
    db02:	ldrb	r2, [r4, r3]
    db04:	cmp	r2, #3
    db06:	bhi.n	db40 <usb_tx+0x54>
    db08:	tbb	[pc, r2]
    db0c:	.word	0x17151202
	  case TX_STATE_BOTH_FREE_EVEN_FIRST:
		next = TX_STATE_ODD_FREE;
    db10:	movs	r2, #3
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    db12:	ldrh	r5, [r1, #0]
		}
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
    db14:	strb	r2, [r4, r3]
	b->addr = packet->buf;
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    db16:	tst.w	r0, #8
    db1a:	ite	ne
    db1c:	movne	r3, #200	; 0xc8
    db1e:	moveq	r3, #136	; 0x88
    db20:	orr.w	r3, r3, r5, lsl #16
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
    db24:	adds	r1, #8
    db26:	str	r1, [r0, #4]
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    db28:	str	r3, [r0, #0]
	__enable_irq();
    db2a:	cpsie	i
}
    db2c:	pop	{r4, r5}
    db2e:	bx	lr
	switch (tx_state[endpoint]) {
	  case TX_STATE_BOTH_FREE_EVEN_FIRST:
		next = TX_STATE_ODD_FREE;
		break;
	  case TX_STATE_BOTH_FREE_ODD_FIRST:
		b++;
    db30:	adds	r0, #8
		next = TX_STATE_EVEN_FREE;
    db32:	movs	r2, #2
		break;
    db34:	b.n	db12 <usb_tx+0x26>
	  case TX_STATE_EVEN_FREE:
		next = TX_STATE_NONE_FREE_ODD_FIRST;
    db36:	movs	r2, #5
    db38:	b.n	db12 <usb_tx+0x26>
		break;
	  case TX_STATE_ODD_FREE:
		b++;
    db3a:	adds	r0, #8
		next = TX_STATE_NONE_FREE_EVEN_FIRST;
    db3c:	movs	r2, #4
		break;
    db3e:	b.n	db12 <usb_tx+0x26>
	  default:
		if (tx_first[endpoint] == NULL) {
    db40:	ldr	r2, [pc, #36]	; (db68 <usb_tx+0x7c>)
    db42:	ldr.w	r0, [r2, r3, lsl #2]
    db46:	cbz	r0, db58 <usb_tx+0x6c>
			tx_first[endpoint] = packet;
		} else {
			tx_last[endpoint]->next = packet;
    db48:	ldr	r2, [pc, #32]	; (db6c <usb_tx+0x80>)
    db4a:	ldr.w	r0, [r2, r3, lsl #2]
    db4e:	str	r1, [r0, #4]
		}
		tx_last[endpoint] = packet;
    db50:	str.w	r1, [r2, r3, lsl #2]
		__enable_irq();
    db54:	cpsie	i
		return;
    db56:	b.n	db2c <usb_tx+0x40>
		b++;
		next = TX_STATE_NONE_FREE_EVEN_FIRST;
		break;
	  default:
		if (tx_first[endpoint] == NULL) {
			tx_first[endpoint] = packet;
    db58:	str.w	r1, [r2, r3, lsl #2]
    db5c:	ldr	r2, [pc, #12]	; (db6c <usb_tx+0x80>)
    db5e:	b.n	db50 <usb_tx+0x64>
    db60:	.word	0x1fff8000
    db64:	.word	0x200031ac
    db68:	.word	0x20003164
    db6c:	.word	0x2000317c

0000db70 <usb_isr>:
}



void usb_isr(void)
{
    db70:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	//serial_print("isr");
	//status = USB0_ISTAT;
	//serial_phex(status);
	//serial_print("\n");
	restart:
	status = USB0_ISTAT;
    db74:	ldr.w	fp, [pc, #788]	; de8c <usb_isr+0x31c>
		USB0_ISTAT = USB_ISTAT_SOFTOK;
	}

	if ((status & USB_ISTAT_TOKDNE /* 08 */ )) {
		uint8_t endpoint;
		stat = USB0_STAT;
    db78:	ldr.w	sl, [pc, #788]	; de90 <usb_isr+0x320>
}



void usb_isr(void)
{
    db7c:	sub	sp, #28
    db7e:	b.n	dc0a <usb_isr+0x9a>
		//serial_print(stat & 0x04 ? ",odd\n" : ",even\n");
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
    db80:	ldr	r7, [pc, #700]	; (de40 <usb_isr+0x2d0>)
    db82:	mov.w	r8, r3, lsr #2
    db86:	add.w	r9, r7, r8, lsl #3
			serial_print(((uint32_t)b & 8) ? ", odd" : ", even");
			serial_print(", count:");
			serial_phex(b->desc >> 16);
			serial_print("\n");
#endif
			endpoint--;	// endpoint is index to zero-based arrays
    db8a:	subs	r6, #1
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
			usb_packet_t *packet = (usb_packet_t *)((uint8_t *)(b->addr) - 8);
    db8c:	ldr.w	r2, [r9, #4]
				b->addr = &usb_audio_sync_feedback;
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
    db90:	and.w	r3, r3, #8
			serial_print(((uint32_t)b & 8) ? ", odd" : ", even");
			serial_print(", count:");
			serial_phex(b->desc >> 16);
			serial_print("\n");
#endif
			endpoint--;	// endpoint is index to zero-based arrays
    db94:	uxtb	r6, r6
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
			usb_packet_t *packet = (usb_packet_t *)((uint8_t *)(b->addr) - 8);
    db96:	sub.w	r0, r2, #8
				b->addr = &usb_audio_sync_feedback;
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
    db9a:	and.w	r4, r3, #255	; 0xff
    db9e:	cmp	r3, #0
    dba0:	bne.w	de94 <usb_isr+0x324>
						  TX_STATE_ODD_FREE : TX_STATE_EVEN_FREE;
						break;
					}
				}
			} else { // receive
				packet->len = b->desc >> 16;
    dba4:	ldr.w	r3, [r7, r8, lsl #3]
    dba8:	lsrs	r3, r3, #16
    dbaa:	uxth	r1, r3
    dbac:	strh.w	r1, [r2, #-8]
				if (packet->len > 0) {
    dbb0:	cmp	r3, #0
    dbb2:	beq.w	de2c <usb_isr+0x2bc>
					packet->index = 0;
					packet->next = NULL;
					if (rx_first[endpoint] == NULL) {
    dbb6:	ldr	r3, [pc, #652]	; (de44 <usb_isr+0x2d4>)
					}
				}
			} else { // receive
				packet->len = b->desc >> 16;
				if (packet->len > 0) {
					packet->index = 0;
    dbb8:	strh.w	r4, [r2, #-6]
					packet->next = NULL;
    dbbc:	str.w	r4, [r2, #-4]
					if (rx_first[endpoint] == NULL) {
    dbc0:	ldr.w	r2, [r3, r6, lsl #2]
    dbc4:	cmp	r2, #0
    dbc6:	beq.w	df30 <usb_isr+0x3c0>
						//serial_print("rx Nth, epidx=");
						//serial_phex(endpoint);
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_last[endpoint]->next = packet;
    dbca:	ldr	r5, [pc, #636]	; (de48 <usb_isr+0x2d8>)
    dbcc:	ldr.w	r3, [r5, r6, lsl #2]
    dbd0:	str	r0, [r3, #4]
					}
					rx_last[endpoint] = packet;
					usb_rx_byte_count_data[endpoint] += packet->len;
    dbd2:	ldr	r4, [pc, #632]	; (de4c <usb_isr+0x2dc>)
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_last[endpoint]->next = packet;
					}
					rx_last[endpoint] = packet;
    dbd4:	str.w	r0, [r5, r6, lsl #2]
					usb_rx_byte_count_data[endpoint] += packet->len;
    dbd8:	ldrh.w	r3, [r4, r6, lsl #1]
    dbdc:	add	r1, r3
    dbde:	strh.w	r1, [r4, r6, lsl #1]
					// TODO: implement a per-endpoint maximum # of allocated
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
    dbe2:	bl	d974 <usb_malloc>
					if (packet) {
    dbe6:	cmp	r0, #0
    dbe8:	beq.w	df22 <usb_isr+0x3b2>
						b->addr = packet->buf;
						b->desc = BDT_DESC(64,
    dbec:	ldr	r2, [pc, #608]	; (de50 <usb_isr+0x2e0>)
    dbee:	ldr	r3, [pc, #612]	; (de54 <usb_isr+0x2e4>)
    dbf0:	tst.w	r9, #8
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
					if (packet) {
						b->addr = packet->buf;
    dbf4:	add.w	r0, r0, #8
						b->desc = BDT_DESC(64,
    dbf8:	it	ne
    dbfa:	movne	r3, r2
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
					if (packet) {
						b->addr = packet->buf;
    dbfc:	str.w	r0, [r9, #4]
						b->desc = BDT_DESC(64,
    dc00:	str.w	r3, [r7, r8, lsl #3]
					b->desc = BDT_DESC(64, ((uint32_t)b & 8) ? DATA1 : DATA0);
				}
			}

		}
		USB0_ISTAT = USB_ISTAT_TOKDNE;
    dc04:	movs	r3, #8
    dc06:	strb.w	r3, [fp]
	//serial_print("isr");
	//status = USB0_ISTAT;
	//serial_phex(status);
	//serial_print("\n");
	restart:
	status = USB0_ISTAT;
    dc0a:	ldrb.w	r4, [fp]
    dc0e:	uxtb	r4, r4

	if ((status & USB_ISTAT_SOFTOK /* 04 */ )) {
    dc10:	lsls	r0, r4, #29
    dc12:	bpl.n	dc4c <usb_isr+0xdc>
		if (usb_configuration) {
    dc14:	ldr	r3, [pc, #576]	; (de58 <usb_isr+0x2e8>)
    dc16:	ldrb	r3, [r3, #0]
    dc18:	cbz	r3, dc46 <usb_isr+0xd6>
			t = usb_reboot_timer;
    dc1a:	ldr	r1, [pc, #576]	; (de5c <usb_isr+0x2ec>)
    dc1c:	ldrb	r2, [r1, #0]
			if (t) {
    dc1e:	and.w	r3, r2, #255	; 0xff
    dc22:	cbz	r2, dc30 <usb_isr+0xc0>
				usb_reboot_timer = --t;
    dc24:	subs	r3, #1
    dc26:	uxtb	r3, r3
    dc28:	strb	r3, [r1, #0]
				if (!t) _reboot_Teensyduino_();
    dc2a:	cmp	r3, #0
    dc2c:	beq.w	e3ac <usb_isr+0x83c>
			}
#ifdef CDC_DATA_INTERFACE
			t = usb_cdc_transmit_flush_timer;
    dc30:	ldr	r1, [pc, #556]	; (de60 <usb_isr+0x2f0>)
    dc32:	ldrb	r2, [r1, #0]
			if (t) {
    dc34:	and.w	r3, r2, #255	; 0xff
    dc38:	cbz	r2, dc46 <usb_isr+0xd6>
				usb_cdc_transmit_flush_timer = --t;
    dc3a:	subs	r3, #1
    dc3c:	uxtb	r3, r3
    dc3e:	strb	r3, [r1, #0]
				if (t == 0) usb_serial_flush_callback();
    dc40:	cmp	r3, #0
    dc42:	beq.w	df1c <usb_isr+0x3ac>
#endif
#ifdef MULTITOUCH_INTERFACE
			usb_touchscreen_update_callback();
#endif
		}
		USB0_ISTAT = USB_ISTAT_SOFTOK;
    dc46:	movs	r3, #4
    dc48:	strb.w	r3, [fp]
	}

	if ((status & USB_ISTAT_TOKDNE /* 08 */ )) {
    dc4c:	and.w	r3, r4, #8
    dc50:	and.w	r2, r3, #255	; 0xff
    dc54:	cmp	r3, #0
    dc56:	beq.w	deee <usb_isr+0x37e>
		uint8_t endpoint;
		stat = USB0_STAT;
    dc5a:	ldrb.w	r3, [sl]
    dc5e:	uxtb	r3, r3
		//serial_print("token: ep=");
		//serial_phex(stat >> 4);
		//serial_print(stat & 0x08 ? ",tx" : ",rx");
		//serial_print(stat & 0x04 ? ",odd\n" : ",even\n");
		endpoint = stat >> 4;
		if (endpoint == 0) {
    dc60:	lsrs	r6, r3, #4
    dc62:	bne.n	db80 <usb_isr+0x10>
	bdt_t *b;
	uint32_t pid, size;
	uint8_t *buf;
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
    dc64:	lsrs	r0, r3, #2
    dc66:	ldr	r7, [pc, #472]	; (de40 <usb_isr+0x2d0>)
	pid = BDT_PID(b->desc);
    dc68:	ldr.w	r2, [r7, r0, lsl #3]
	bdt_t *b;
	uint32_t pid, size;
	uint8_t *buf;
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
    dc6c:	add.w	r1, r7, r0, lsl #3
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
    dc70:	ubfx	r2, r2, #2, #4
    dc74:	subs	r2, #1
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
	pid = BDT_PID(b->desc);
	//count = b->desc >> 16;
	buf = b->addr;
    dc76:	ldr	r1, [r1, #4]
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
    dc78:	cmp	r2, #12
    dc7a:	bhi.w	de0e <usb_isr+0x29e>
    dc7e:	tbh	[pc, r2, lsl #1]
    dc82:	.short	0x00ca
    dc84:	.word	0x00c600ca
    dc88:	.word	0x00c600c6
    dc8c:	.word	0x00c600c6
    dc90:	.word	0x008b00c6
    dc94:	.word	0x00c600c6
    dc98:	.word	0x000d00c6
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
    dc9c:	ldr	r2, [r1, #0]
    dc9e:	ldr	r5, [pc, #452]	; (de64 <usb_isr+0x2f4>)
		setup.word2 = *(uint32_t *)(buf + 4);
    dca0:	ldr	r1, [r1, #4]
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    dca2:	ldr	r3, [pc, #452]	; (de68 <usb_isr+0x2f8>)
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    dca4:	ldr	r6, [pc, #452]	; (de6c <usb_isr+0x2fc>)
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);

		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    dca6:	ldr	r4, [pc, #424]	; (de50 <usb_isr+0x2e0>)
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);
    dca8:	str	r1, [r5, #4]
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    dcaa:	uxth	r1, r2
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);

		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    dcac:	str.w	r4, [r7, r0, lsl #3]
	switch (pid) {
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
    dcb0:	str	r2, [r5, #0]
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    dcb2:	movs	r0, #1
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    dcb4:	movs	r2, #0
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    dcb6:	cmp.w	r1, #2176	; 0x880
			//serial_print("leftover tx even\n");
		//}
		//if (table[index(0, TX, ODD)].desc & 0x80) {
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
    dcba:	str	r2, [r7, #16]
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    dcbc:	str	r3, [sp, #4]
    dcbe:	str	r2, [r3, #0]
		//}
		//if (table[index(0, TX, ODD)].desc & 0x80) {
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
    dcc0:	str	r2, [r7, #24]
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    dcc2:	strb	r0, [r6, #0]
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    dcc4:	beq.w	e324 <usb_isr+0x7b4>
    dcc8:	bls.w	df38 <usb_isr+0x3c8>
    dccc:	movw	r4, #8993	; 0x2321
    dcd0:	cmp	r1, r4
    dcd2:	beq.w	e32e <usb_isr+0x7be>
    dcd6:	bhi.w	e064 <usb_isr+0x4f4>
    dcda:	movw	r4, #8225	; 0x2021
    dcde:	cmp	r1, r4
    dce0:	beq.w	e07a <usb_isr+0x50a>
    dce4:	movw	r4, #8737	; 0x2221
    dce8:	cmp	r1, r4
    dcea:	beq.w	e1cc <usb_isr+0x65c>
    dcee:	cmp.w	r1, #2304	; 0x900
    dcf2:	bne.w	e074 <usb_isr+0x504>
	  case 0x0500: // SET_ADDRESS
		break;
	  case 0x0900: // SET_CONFIGURATION
		//serial_print("configure\n");
		usb_configuration = setup.wValue;
    dcf6:	ldr	r2, [pc, #352]	; (de58 <usb_isr+0x2e8>)
    dcf8:	ldrb	r1, [r5, #2]
    dcfa:	strb	r1, [r2, #0]
		reg = &USB0_ENDPT1;
		cfg = usb_endpoint_config_table;
		// clear all BDT entries, free any allocated memory...
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
			if (table[i].desc & BDT_OWN) {
    dcfc:	ldr	r5, [pc, #320]	; (de40 <usb_isr+0x2d0>)
		//serial_print("configure\n");
		usb_configuration = setup.wValue;
		reg = &USB0_ENDPT1;
		cfg = usb_endpoint_config_table;
		// clear all BDT entries, free any allocated memory...
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
    dcfe:	movs	r4, #4
    dd00:	b.n	dd08 <usb_isr+0x198>
    dd02:	adds	r4, #1
    dd04:	cmp	r4, #28
    dd06:	beq.n	dd22 <usb_isr+0x1b2>
			if (table[i].desc & BDT_OWN) {
    dd08:	ldr.w	r3, [r7, r4, lsl #3]
    dd0c:	lsls	r1, r3, #24
    dd0e:	bpl.n	dd02 <usb_isr+0x192>
				usb_free((usb_packet_t *)((uint8_t *)(table[i].addr) - 8));
    dd10:	add.w	r3, r5, r4, lsl #3
		//serial_print("configure\n");
		usb_configuration = setup.wValue;
		reg = &USB0_ENDPT1;
		cfg = usb_endpoint_config_table;
		// clear all BDT entries, free any allocated memory...
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
    dd14:	adds	r4, #1
			if (table[i].desc & BDT_OWN) {
				usb_free((usb_packet_t *)((uint8_t *)(table[i].addr) - 8));
    dd16:	ldr	r0, [r3, #4]
    dd18:	subs	r0, #8
    dd1a:	bl	d9b4 <usb_free>
		//serial_print("configure\n");
		usb_configuration = setup.wValue;
		reg = &USB0_ENDPT1;
		cfg = usb_endpoint_config_table;
		// clear all BDT entries, free any allocated memory...
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
    dd1e:	cmp	r4, #28
    dd20:	bne.n	dd08 <usb_isr+0x198>
    dd22:	ldr	r3, [pc, #288]	; (de44 <usb_isr+0x2d4>)
    dd24:	ldr	r2, [pc, #328]	; (de70 <usb_isr+0x300>)
    dd26:	ldr	r1, [pc, #332]	; (de74 <usb_isr+0x304>)
    dd28:	ldr	r5, [pc, #284]	; (de48 <usb_isr+0x2d8>)
    dd2a:	ldr	r4, [pc, #288]	; (de4c <usb_isr+0x2dc>)
    dd2c:	ldr	r0, [pc, #328]	; (de78 <usb_isr+0x308>)
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
				break;
			  case TX_STATE_ODD_FREE:
			  case TX_STATE_NONE_FREE_ODD_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    dd2e:	str	r5, [sp, #12]
    dd30:	str	r4, [sp, #16]
		//serial_print("configure\n");
		usb_configuration = setup.wValue;
		reg = &USB0_ENDPT1;
		cfg = usb_endpoint_config_table;
		// clear all BDT entries, free any allocated memory...
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
    dd32:	mov.w	r9, #0
    dd36:	str	r0, [sp, #8]
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
				break;
			  case TX_STATE_ODD_FREE:
			  case TX_STATE_NONE_FREE_ODD_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    dd38:	mov	r8, r1
    dd3a:	str	r6, [sp, #20]
    dd3c:	mov	r5, r2
    dd3e:	mov	r4, r3
			}
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
			usb_packet_t *p, *n;
			p = rx_first[i];
    dd40:	ldr	r0, [r4, #0]
			while (p) {
    dd42:	cbz	r0, dd50 <usb_isr+0x1e0>
				n = p->next;
    dd44:	ldr	r6, [r0, #4]
				usb_free(p);
    dd46:	bl	d9b4 <usb_free>
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
			usb_packet_t *p, *n;
			p = rx_first[i];
			while (p) {
    dd4a:	mov	r0, r6
    dd4c:	cmp	r6, #0
    dd4e:	bne.n	dd44 <usb_isr+0x1d4>
				n = p->next;
				usb_free(p);
				p = n;
			}
			rx_first[i] = NULL;
    dd50:	movs	r3, #0
    dd52:	str	r3, [r4, #0]
			rx_last[i] = NULL;
    dd54:	ldr	r3, [sp, #12]
			p = tx_first[i];
    dd56:	ldr	r0, [r5, #0]
				n = p->next;
				usb_free(p);
				p = n;
			}
			rx_first[i] = NULL;
			rx_last[i] = NULL;
    dd58:	mov	r2, r3
    dd5a:	movs	r3, #0
    dd5c:	str.w	r3, [r2, r9, lsl #2]
			p = tx_first[i];
			while (p) {
    dd60:	cbz	r0, dd6e <usb_isr+0x1fe>
				n = p->next;
    dd62:	ldr	r6, [r0, #4]
				usb_free(p);
    dd64:	bl	d9b4 <usb_free>
				p = n;
			}
			rx_first[i] = NULL;
			rx_last[i] = NULL;
			p = tx_first[i];
			while (p) {
    dd68:	mov	r0, r6
    dd6a:	cmp	r6, #0
    dd6c:	bne.n	dd62 <usb_isr+0x1f2>
				p = n;
			}
			tx_first[i] = NULL;
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
    dd6e:	ldr	r3, [sp, #8]
			while (p) {
				n = p->next;
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
    dd70:	movs	r2, #0
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
    dd72:	ldrb	r3, [r3, #0]
			while (p) {
				n = p->next;
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
    dd74:	str	r2, [r5, #0]
			tx_last[i] = NULL;
    dd76:	str.w	r2, [r8], #4
			usb_rx_byte_count_data[i] = 0;
    dd7a:	ldr	r2, [sp, #16]
    dd7c:	mov.w	r1, #0
			switch (tx_state[i]) {
    dd80:	subs	r3, #2
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
    dd82:	strh.w	r1, [r2, r9, lsl #1]
			switch (tx_state[i]) {
    dd86:	cmp	r3, #3
    dd88:	bhi.w	e280 <usb_isr+0x710>
    dd8c:	tbh	[pc, r3, lsl #1]
    dd90:	.word	0x027402c0
    dd94:	.word	0x027402c0
		//serial_print("PID=IN:");
		//serial_phex(stat);
		//serial_print("\n");

		// send remaining data, if any...
		data = ep0_tx_ptr;
    dd98:	ldr	r3, [pc, #204]	; (de68 <usb_isr+0x2f8>)
    dd9a:	str	r3, [sp, #4]
    dd9c:	ldr	r2, [r3, #0]
		if (data) {
    dd9e:	cbz	r2, ddfa <usb_isr+0x28a>
			size = ep0_tx_len;
    dda0:	ldr	r3, [pc, #216]	; (de7c <usb_isr+0x30c>)
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    dda2:	ldr	r1, [pc, #220]	; (de80 <usb_isr+0x310>)
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    dda4:	ldr	r6, [pc, #196]	; (de6c <usb_isr+0x2fc>)
		//serial_print("\n");

		// send remaining data, if any...
		data = ep0_tx_ptr;
		if (data) {
			size = ep0_tx_len;
    dda6:	ldrh	r0, [r3, #0]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    dda8:	ldrb	r4, [r1, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    ddaa:	ldrb.w	lr, [r6]
    ddae:	cmp	r0, #64	; 0x40
    ddb0:	mov	r5, r0
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    ddb2:	eor.w	ip, r4, #1
    ddb6:	it	cs
    ddb8:	movcs	r5, #64	; 0x40
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    ddba:	orr.w	r4, r4, #2
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    ddbe:	cmp.w	lr, #0
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    ddc2:	strb.w	ip, [r1]
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
    ddc6:	sub.w	r0, r0, r5
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    ddca:	add.w	ip, r7, r4, lsl #3
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    ddce:	ite	eq
    ddd0:	moveq	r1, #136	; 0x88
    ddd2:	movne	r1, #200	; 0xc8
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
    ddd4:	uxth	r0, r0
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
    ddd6:	eor.w	lr, lr, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    ddda:	orr.w	r1, r1, r5, lsl #16
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    ddde:	str.w	r2, [ip, #4]
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
    dde2:	strh	r0, [r3, #0]
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
    dde4:	strb.w	lr, [r6]
		data = ep0_tx_ptr;
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
    dde8:	add	r2, r5
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    ddea:	str.w	r1, [r7, r4, lsl #3]
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
    ddee:	cbnz	r0, ddf6 <usb_isr+0x286>
    ddf0:	cmp	r5, #64	; 0x40
    ddf2:	it	ne
    ddf4:	movne	r2, #0
    ddf6:	ldr	r3, [sp, #4]
    ddf8:	str	r2, [r3, #0]
		}

		if (setup.bRequest == 5 && setup.bmRequestType == 0) {
    ddfa:	ldr	r3, [pc, #104]	; (de64 <usb_isr+0x2f4>)
    ddfc:	ldrh	r2, [r3, #0]
    ddfe:	cmp.w	r2, #1280	; 0x500
    de02:	bne.n	de0e <usb_isr+0x29e>
			setup.bRequest = 0;
    de04:	movs	r1, #0
			//serial_print("set address: ");
			//serial_phex16(setup.wValue);
			//serial_print("\n");
			USB0_ADDR = setup.wValue;
    de06:	ldrb	r2, [r3, #2]
			ep0_tx_len -= size;
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
		}

		if (setup.bRequest == 5 && setup.bmRequestType == 0) {
			setup.bRequest = 0;
    de08:	strb	r1, [r3, #1]
			//serial_print("set address: ");
			//serial_phex16(setup.wValue);
			//serial_print("\n");
			USB0_ADDR = setup.wValue;
    de0a:	ldr	r3, [pc, #120]	; (de84 <usb_isr+0x314>)
    de0c:	strb	r2, [r3, #0]
	//default:
		//serial_print("PID=unknown:");
		//serial_phex(pid);
		//serial_print("\n");
	}
	USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    de0e:	ldr	r2, [pc, #120]	; (de88 <usb_isr+0x318>)
    de10:	movs	r3, #1
    de12:	strb	r3, [r2, #0]
    de14:	b.n	dc04 <usb_isr+0x94>
		USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
		break;
	case 0x01:  // OUT transaction received from host
	case 0x02:
		//serial_print("PID=OUT\n");
		if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
    de16:	ldr	r2, [pc, #76]	; (de64 <usb_isr+0x2f4>)
    de18:	ldrh	r5, [r2, #0]
    de1a:	movw	r4, #8225	; 0x2021
    de1e:	cmp	r5, r4
    de20:	beq.w	e018 <usb_isr+0x4a8>
		if (usb_audio_set_feature(&setup, buf)) {
			endpoint0_transmit(NULL, 0);
		}
#endif
		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    de24:	ldr	r2, [pc, #40]	; (de50 <usb_isr+0x2e0>)
    de26:	str.w	r2, [r7, r0, lsl #3]
    de2a:	b.n	de0e <usb_isr+0x29e>
						//serial_phex(endpoint + 1);
						b->desc = 0;
						usb_rx_memory_needed++;
					}
				} else {
					b->desc = BDT_DESC(64, ((uint32_t)b & 8) ? DATA1 : DATA0);
    de2c:	ldr	r2, [pc, #32]	; (de50 <usb_isr+0x2e0>)
    de2e:	ldr	r3, [pc, #36]	; (de54 <usb_isr+0x2e4>)
    de30:	tst.w	r9, #8
    de34:	it	ne
    de36:	movne	r3, r2
    de38:	str.w	r3, [r7, r8, lsl #3]
    de3c:	b.n	dc04 <usb_isr+0x94>
    de3e:	nop
    de40:	.word	0x1fff8000
    de44:	.word	0x20003108
    de48:	.word	0x200030ac
    de4c:	.word	0x20003224
    de50:	.word	0x004000c8
    de54:	.word	0x00400088
    de58:	.word	0x200031a8
    de5c:	.word	0x20003121
    de60:	.word	0x20003090
    de64:	.word	0x20003194
    de68:	.word	0x200030a8
    de6c:	.word	0x20003120
    de70:	.word	0x20003164
    de74:	.word	0x2000317c
    de78:	.word	0x200031ac
    de7c:	.word	0x200030c4
    de80:	.word	0x2000319c
    de84:	.word	0x40072098
    de88:	.word	0x40072094
    de8c:	.word	0x40072080
    de90:	.word	0x40072090
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
				usb_free(packet);
    de94:	bl	d9b4 <usb_free>
				packet = tx_first[endpoint];
    de98:	ldr	r2, [pc, #724]	; (e170 <usb_isr+0x600>)
				if (packet) {
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
    de9a:	ldr	r1, [pc, #728]	; (e174 <usb_isr+0x604>)
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
				usb_free(packet);
				packet = tx_first[endpoint];
    de9c:	ldr.w	r3, [r2, r6, lsl #2]
				if (packet) {
    dea0:	cmp	r3, #0
    dea2:	beq.w	dffa <usb_isr+0x48a>
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
    dea6:	ldr	r0, [r3, #4]
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
    dea8:	ldrb	r4, [r1, r6]
			if (stat & 0x08) { // transmit
				usb_free(packet);
				packet = tx_first[endpoint];
				if (packet) {
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
    deaa:	str.w	r0, [r2, r6, lsl #2]
					b->addr = packet->buf;
    deae:	add.w	r2, r3, #8
    deb2:	str.w	r2, [r9, #4]
					switch (tx_state[endpoint]) {
    deb6:	cmp	r4, #3
    deb8:	bhi.n	dec6 <usb_isr+0x356>
    deba:	tbb	[pc, r4]
    debe:	.short	0x0f12
    dec0:	.short	0x0215
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_ODD_FIRST;
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_EVEN_FIRST;
    dec2:	movs	r2, #4
    dec4:	strb	r2, [r1, r6]
						break;
					  default:
						break;
					}
					b->desc = BDT_DESC(packet->len,
    dec6:	ldrh	r2, [r3, #0]
    dec8:	tst.w	r9, #8
    decc:	ite	eq
    dece:	moveq	r3, #136	; 0x88
    ded0:	movne	r3, #200	; 0xc8
    ded2:	orr.w	r3, r3, r2, lsl #16
    ded6:	str.w	r3, [r7, r8, lsl #3]
    deda:	b.n	dc04 <usb_isr+0x94>
					switch (tx_state[endpoint]) {
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
						tx_state[endpoint] = TX_STATE_ODD_FREE;
						break;
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						tx_state[endpoint] = TX_STATE_EVEN_FREE;
    dedc:	movs	r2, #2
    dede:	strb	r2, [r1, r6]
						break;
    dee0:	b.n	dec6 <usb_isr+0x356>
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
						tx_state[endpoint] = TX_STATE_ODD_FREE;
    dee2:	movs	r2, #3
    dee4:	strb	r2, [r1, r6]
						break;
    dee6:	b.n	dec6 <usb_isr+0x356>
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						tx_state[endpoint] = TX_STATE_EVEN_FREE;
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_ODD_FIRST;
    dee8:	movs	r2, #5
    deea:	strb	r2, [r1, r6]
						break;
    deec:	b.n	dec6 <usb_isr+0x356>
		goto restart;
	}



	if (status & USB_ISTAT_USBRST /* 01 */ ) {
    deee:	lsls	r0, r4, #31
    def0:	bmi.w	e082 <usb_isr+0x512>
		USB0_CTL = USB_CTL_USBENSOFEN;
		return;
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
    def4:	lsls	r1, r4, #24
    def6:	bmi.w	e11e <usb_isr+0x5ae>
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
    defa:	lsls	r2, r4, #30
    defc:	bpl.n	df0c <usb_isr+0x39c>
		uint8_t err = USB0_ERRSTAT;
    defe:	ldr	r2, [pc, #632]	; (e178 <usb_isr+0x608>)
		USB0_ERRSTAT = err;
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    df00:	ldr	r1, [pc, #632]	; (e17c <usb_isr+0x60c>)
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
		uint8_t err = USB0_ERRSTAT;
    df02:	ldrb	r3, [r2, #0]
		USB0_ERRSTAT = err;
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    df04:	movs	r0, #2
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
		uint8_t err = USB0_ERRSTAT;
    df06:	uxtb	r3, r3
		USB0_ERRSTAT = err;
    df08:	strb	r3, [r2, #0]
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    df0a:	strb	r0, [r1, #0]
	}

	if ((status & USB_ISTAT_SLEEP /* 10 */ )) {
    df0c:	lsls	r3, r4, #27
    df0e:	bpl.n	df16 <usb_isr+0x3a6>
		//serial_print("sleep\n");
		USB0_ISTAT = USB_ISTAT_SLEEP;
    df10:	ldr	r3, [pc, #616]	; (e17c <usb_isr+0x60c>)
    df12:	movs	r2, #16
    df14:	strb	r2, [r3, #0]
	}

}
    df16:	add	sp, #28
    df18:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			}
#ifdef CDC_DATA_INTERFACE
			t = usb_cdc_transmit_flush_timer;
			if (t) {
				usb_cdc_transmit_flush_timer = --t;
				if (t == 0) usb_serial_flush_callback();
    df1c:	bl	cf34 <usb_serial_flush_callback>
    df20:	b.n	dc46 <usb_isr+0xd6>
							((uint32_t)b & 8) ? DATA1 : DATA0);
					} else {
						//serial_print("starving ");
						//serial_phex(endpoint + 1);
						b->desc = 0;
						usb_rx_memory_needed++;
    df22:	ldr	r2, [pc, #604]	; (e180 <usb_isr+0x610>)
						b->desc = BDT_DESC(64,
							((uint32_t)b & 8) ? DATA1 : DATA0);
					} else {
						//serial_print("starving ");
						//serial_phex(endpoint + 1);
						b->desc = 0;
    df24:	str.w	r0, [r7, r8, lsl #3]
						usb_rx_memory_needed++;
    df28:	ldrb	r3, [r2, #0]
    df2a:	adds	r3, #1
    df2c:	strb	r3, [r2, #0]
    df2e:	b.n	dc04 <usb_isr+0x94>
						//serial_print("rx 1st, epidx=");
						//serial_phex(endpoint);
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_first[endpoint] = packet;
    df30:	str.w	r0, [r3, r6, lsl #2]
    df34:	ldr	r5, [pc, #588]	; (e184 <usb_isr+0x614>)
    df36:	b.n	dbd2 <usb_isr+0x62>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    df38:	movw	r4, #770	; 0x302
    df3c:	cmp	r1, r4
    df3e:	beq.w	e336 <usb_isr+0x7c6>
    df42:	bhi.w	e0dc <usb_isr+0x56c>
    df46:	cmp	r1, #130	; 0x82
    df48:	beq.w	e254 <usb_isr+0x6e4>
    df4c:	cmp.w	r1, #258	; 0x102
    df50:	beq.w	e14c <usb_isr+0x5dc>
    df54:	cmp	r1, #128	; 0x80
    df56:	bne.w	e074 <usb_isr+0x504>
		reply_buffer[0] = usb_configuration;
		datalen = 1;
		data = reply_buffer;
		break;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    df5a:	ldr	r4, [pc, #556]	; (e188 <usb_isr+0x618>)
		reply_buffer[1] = 0;
		datalen = 2;
    df5c:	movs	r0, #2
		reply_buffer[0] = usb_configuration;
		datalen = 1;
		data = reply_buffer;
		break;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    df5e:	strb	r2, [r4, #0]
		reply_buffer[1] = 0;
    df60:	strb	r2, [r4, #1]
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
    df62:	ldrh	r2, [r5, #6]
    df64:	cmp	r2, r0
    df66:	bcs.w	e38c <usb_isr+0x81c>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    df6a:	ldr	r1, [pc, #544]	; (e18c <usb_isr+0x61c>)
    df6c:	ldrb	r5, [r1, #0]
    df6e:	orr.w	ip, r5, #2
    df72:	add.w	r0, r7, ip, lsl #3
    df76:	cmp	r2, #64	; 0x40
    df78:	mov	lr, r2
    df7a:	mov.w	r3, #1
    df7e:	it	cs
    df80:	movcs.w	lr, #64	; 0x40
    df84:	str	r4, [r0, #4]
    df86:	add.w	r9, r4, lr
    df8a:	rsb	r0, lr, r2
    df8e:	mov.w	r8, lr, lsl #16
    df92:	str	r3, [sp, #8]
    df94:	movs	r2, #0
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    df96:	movs	r4, #200	; 0xc8
    df98:	orr.w	r3, r4, r8
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    df9c:	eor.w	r4, r5, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    dfa0:	str.w	r3, [r7, ip, lsl #3]
	ep0_tx_data_toggle ^= 1;
    dfa4:	strb	r2, [r6, #0]
	ep0_tx_bdt_bank ^= 1;
    dfa6:	strb	r4, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    dfa8:	ldr.w	ip, [pc, #508]	; e1a8 <usb_isr+0x638>
	ep0_tx_data_toggle ^= 1;
    dfac:	ldr	r3, [pc, #480]	; (e190 <usb_isr+0x620>)
	ep0_tx_bdt_bank ^= 1;
    dfae:	ldr.w	r8, [pc, #476]	; e18c <usb_isr+0x61c>
	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;
    dfb2:	cmp	r0, #0
    dfb4:	bne.w	e20e <usb_isr+0x69e>
    dfb8:	cmp.w	lr, #64	; 0x40
    dfbc:	bne.n	e07a <usb_isr+0x50a>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    dfbe:	orr.w	r4, r4, #2
    dfc2:	add.w	r3, r7, r4, lsl #3
    dfc6:	ldr.w	lr, [pc, #480]	; e1a8 <usb_isr+0x638>
    dfca:	str.w	r9, [r3, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    dfce:	cmp	r2, #0
    dfd0:	bne.w	e23a <usb_isr+0x6ca>
    dfd4:	lsls	r2, r0, #16
    dfd6:	orr.w	r2, r2, #136	; 0x88
	ep0_tx_data_toggle ^= 1;
    dfda:	ldrb.w	r3, [sp, #8]
    dfde:	strb	r3, [r6, #0]
	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;
    dfe0:	cmp	r0, #64	; 0x40
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    dfe2:	strb	r5, [r1, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    dfe4:	add.w	r3, r9, r0
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    dfe8:	str.w	r2, [lr, r4, lsl #3]
	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;
    dfec:	bne.n	e07a <usb_isr+0x50a>
    dfee:	movs	r0, #0

	ep0_tx_ptr = data;
	ep0_tx_len = datalen;
    dff0:	ldr	r2, [pc, #416]	; (e194 <usb_isr+0x624>)
	endpoint0_transmit(data, size);
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;

	ep0_tx_ptr = data;
    dff2:	ldr	r1, [sp, #4]
	ep0_tx_len = datalen;
    dff4:	strh	r0, [r2, #0]
	endpoint0_transmit(data, size);
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;

	ep0_tx_ptr = data;
    dff6:	str	r3, [r1, #0]
    dff8:	b.n	e07a <usb_isr+0x50a>
					}
					b->desc = BDT_DESC(packet->len,
						((uint32_t)b & 8) ? DATA1 : DATA0);
				} else {
					//serial_print("tx no packet\n");
					switch (tx_state[endpoint]) {
    dffa:	ldrb	r3, [r1, r6]
    dffc:	cmp	r3, #3
    dffe:	bhi.w	e246 <usb_isr+0x6d6>
    e002:	add	r2, pc, #4	; (adr r2, e008 <usb_isr+0x498>)
    e004:	ldr.w	pc, [r2, r3, lsl #2]
    e008:	.word	0x0000dc05
    e00c:	.word	0x0000dc05
    e010:	.word	0x0000e0d7
    e014:	.word	0x0000e0d1
	case 0x02:
		//serial_print("PID=OUT\n");
		if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
			int i;
			uint32_t *line_coding = NULL;
			switch (setup.wIndex) {
    e018:	ldrh	r2, [r2, #4]
    e01a:	cbnz	r2, e034 <usb_isr+0x4c4>
    e01c:	ldr	r2, [pc, #376]	; (e198 <usb_isr+0x628>)
    e01e:	adds	r5, r1, #7
			if (line_coding) {
				uint8_t *dst = (uint8_t *)line_coding;
				//serial_print("set line coding ");
				for (i=0; i<7; i++) {
					//serial_phex(*buf);
					*dst++ = *buf++;
    e020:	ldrb.w	r3, [r1], #1
    e024:	strb.w	r3, [r2, #1]!
#endif
			}
			if (line_coding) {
				uint8_t *dst = (uint8_t *)line_coding;
				//serial_print("set line coding ");
				for (i=0; i<7; i++) {
    e028:	cmp	r5, r1
    e02a:	bne.n	e020 <usb_isr+0x4b0>
					//serial_phex(*buf);
					*dst++ = *buf++;
				}
				//serial_phex32(line_coding[0]);
				//serial_print("\n");
				if (line_coding[0] == 134) usb_reboot_timer = 15;
    e02c:	ldr	r2, [pc, #364]	; (e19c <usb_isr+0x62c>)
    e02e:	ldr	r2, [r2, #0]
    e030:	cmp	r2, #134	; 0x86
    e032:	beq.n	e132 <usb_isr+0x5c2>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    e034:	ldr	r1, [pc, #340]	; (e18c <usb_isr+0x61c>)
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    e036:	ldr	r6, [pc, #344]	; (e190 <usb_isr+0x620>)
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    e038:	ldrb	r4, [r1, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    e03a:	ldrb	r2, [r6, #0]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    e03c:	orr.w	r5, r4, #2
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    e040:	eor.w	r4, r4, #1
    e044:	strb	r4, [r1, #0]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    e046:	add.w	r1, r7, r5, lsl #3
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    e04a:	cmp	r2, #0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    e04c:	mov.w	r4, #0
    e050:	str	r4, [r1, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
    e052:	eor.w	r2, r2, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    e056:	ite	eq
    e058:	moveq	r1, #136	; 0x88
    e05a:	movne	r1, #200	; 0xc8
    e05c:	str.w	r1, [r7, r5, lsl #3]
	ep0_tx_data_toggle ^= 1;
    e060:	strb	r2, [r6, #0]
    e062:	b.n	de24 <usb_isr+0x2b4>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    e064:	movw	r4, #26273	; 0x66a1
    e068:	cmp	r1, r4
    e06a:	beq.n	e074 <usb_isr+0x504>
    e06c:	movw	r4, #26529	; 0x67a1
    e070:	cmp	r1, r4
    e072:	beq.n	e13a <usb_isr+0x5ca>
volatile uint8_t usb_reboot_timer = 0;


static void endpoint0_stall(void)
{
	USB0_ENDPT0 = USB_ENDPT_EPSTALL | USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    e074:	ldr	r3, [pc, #296]	; (e1a0 <usb_isr+0x630>)
    e076:	movs	r2, #15
    e078:	strb	r2, [r3, #0]
		serial_print("\n");
#endif
		// actually "do" the setup request
		usb_setup();
		// unfreeze the USB, now that we're ready
		USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    e07a:	ldr	r2, [pc, #296]	; (e1a4 <usb_isr+0x634>)
    e07c:	movs	r3, #1
    e07e:	strb	r3, [r2, #0]
    e080:	b.n	de0e <usb_isr+0x29e>

	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
    e082:	ldr	r1, [pc, #288]	; (e1a4 <usb_isr+0x634>)
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
    e084:	ldr	r3, [pc, #288]	; (e1a8 <usb_isr+0x638>)
    e086:	ldr	r0, [pc, #292]	; (e1ac <usb_isr+0x63c>)
	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;
    e088:	ldr	r6, [pc, #256]	; (e18c <usb_isr+0x61c>)
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    e08a:	ldr.w	ip, [pc, #276]	; e1a0 <usb_isr+0x630>

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
    e08e:	ldr	r5, [pc, #232]	; (e178 <usb_isr+0x608>)
		USB0_ISTAT = 0xFF;
    e090:	ldr.w	lr, [pc, #232]	; e17c <usb_isr+0x60c>

		// set the address to zero during enumeration
		USB0_ADDR = 0;
    e094:	ldr	r7, [pc, #280]	; (e1b0 <usb_isr+0x640>)

	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
    e096:	movs	r4, #2
    e098:	strb	r4, [r1, #0]
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
    e09a:	ldr	r4, [pc, #280]	; (e1b4 <usb_isr+0x644>)
		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
    e09c:	str	r0, [r3, #0]
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
    e09e:	str	r4, [r3, #4]
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
    e0a0:	str	r0, [r3, #8]
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
    e0a2:	ldr	r0, [pc, #276]	; (e1b8 <usb_isr+0x648>)
    e0a4:	str	r0, [r3, #12]
		table[index(0, TX, EVEN)].desc = 0;
    e0a6:	str	r2, [r3, #16]
		table[index(0, TX, ODD)].desc = 0;
    e0a8:	str	r2, [r3, #24]

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    e0aa:	movs	r3, #13
	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;
    e0ac:	strb	r2, [r6, #0]
		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
		USB0_INTEN = USB_INTEN_TOKDNEEN |
    e0ae:	ldr	r4, [pc, #268]	; (e1bc <usb_isr+0x64c>)
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    e0b0:	strb.w	r3, [ip]

		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
    e0b4:	ldr	r6, [pc, #264]	; (e1c0 <usb_isr+0x650>)

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
    e0b6:	movs	r3, #255	; 0xff
    e0b8:	strb	r3, [r5, #0]
			USB_INTEN_ERROREN |
			USB_INTEN_USBRSTEN |
			USB_INTEN_SLEEPEN;

		// is this necessary?
		USB0_CTL = USB_CTL_USBENSOFEN;
    e0ba:	movs	r0, #1
		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
		USB0_INTEN = USB_INTEN_TOKDNEEN |
    e0bc:	movs	r5, #159	; 0x9f
		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
		USB0_ISTAT = 0xFF;
    e0be:	strb.w	r3, [lr]

		// set the address to zero during enumeration
		USB0_ADDR = 0;
    e0c2:	strb	r2, [r7, #0]

		// enable other interrupts
		USB0_ERREN = 0xFF;
    e0c4:	strb	r3, [r6, #0]
		USB0_INTEN = USB_INTEN_TOKDNEEN |
    e0c6:	strb	r5, [r4, #0]
			USB_INTEN_ERROREN |
			USB_INTEN_USBRSTEN |
			USB_INTEN_SLEEPEN;

		// is this necessary?
		USB0_CTL = USB_CTL_USBENSOFEN;
    e0c8:	strb	r0, [r1, #0]
	if ((status & USB_ISTAT_SLEEP /* 10 */ )) {
		//serial_print("sleep\n");
		USB0_ISTAT = USB_ISTAT_SLEEP;
	}

}
    e0ca:	add	sp, #28
    e0cc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_EVEN_FIRST;
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_ODD_FIRST;
    e0d0:	movs	r3, #1
    e0d2:	strb	r3, [r1, r6]
						break;
    e0d4:	b.n	dc04 <usb_isr+0x94>
					switch (tx_state[endpoint]) {
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_EVEN_FIRST;
    e0d6:	movs	r3, #0
    e0d8:	strb	r3, [r1, r6]
						break;
    e0da:	b.n	dc04 <usb_isr+0x94>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    e0dc:	cmp.w	r1, #1280	; 0x500
    e0e0:	beq.w	e32e <usb_isr+0x7be>
    e0e4:	bcc.n	e074 <usb_isr+0x504>
    e0e6:	sub.w	r1, r1, #1664	; 0x680
    e0ea:	cmp	r1, #1
    e0ec:	bhi.n	e074 <usb_isr+0x504>
	  case 0x0681:
		//serial_print("desc:");
		//serial_phex16(setup.wValue);
		//serial_print("\n");
		for (list = usb_descriptor_list; 1; list++) {
			if (list->addr == NULL) break;
    e0ee:	ldr	r2, [pc, #212]	; (e1c4 <usb_isr+0x654>)
    e0f0:	ldr	r4, [r2, #4]
    e0f2:	cmp	r4, #0
    e0f4:	beq.n	e074 <usb_isr+0x504>
    e0f6:	ldrh	r0, [r5, #2]
			//if (setup.wValue == list->wValue &&
			//(setup.wIndex == list->wIndex) || ((setup.wValue >> 8) == 3)) {
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    e0f8:	ldrh.w	lr, [r5, #4]
    e0fc:	b.n	e106 <usb_isr+0x596>
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
		//serial_print("desc:");
		//serial_phex16(setup.wValue);
		//serial_print("\n");
		for (list = usb_descriptor_list; 1; list++) {
    e0fe:	adds	r2, #12
			if (list->addr == NULL) break;
    e100:	ldr	r4, [r2, #4]
    e102:	cmp	r4, #0
    e104:	beq.n	e074 <usb_isr+0x504>
			//if (setup.wValue == list->wValue &&
			//(setup.wIndex == list->wIndex) || ((setup.wValue >> 8) == 3)) {
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    e106:	ldrh	r3, [r2, #0]
    e108:	cmp	r3, r0
    e10a:	bne.n	e0fe <usb_isr+0x58e>
    e10c:	ldrh	r3, [r2, #2]
    e10e:	cmp	r3, lr
    e110:	bne.n	e0fe <usb_isr+0x58e>
				data = list->addr;
				if ((setup.wValue >> 8) == 3) {
    e112:	lsrs	r0, r0, #8
    e114:	cmp	r0, #3
					// for string descriptors, use the descriptor's
					// length field, allowing runtime configured
					// length.
					datalen = *(list->addr);
    e116:	ite	eq
    e118:	ldrbeq	r0, [r4, #0]
				} else {
					datalen = list->length;
    e11a:	ldrhne	r0, [r2, #8]
    e11c:	b.n	df62 <usb_isr+0x3f2>
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    e11e:	ldr	r1, [pc, #128]	; (e1a0 <usb_isr+0x630>)
		USB0_ISTAT = USB_ISTAT_STALL;
    e120:	ldr	r3, [pc, #88]	; (e17c <usb_isr+0x60c>)
    e122:	movs	r2, #128	; 0x80
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    e124:	movs	r0, #13
    e126:	strb	r0, [r1, #0]
		USB0_ISTAT = USB_ISTAT_STALL;
    e128:	strb	r2, [r3, #0]
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
    e12a:	lsls	r2, r4, #30
    e12c:	bpl.w	df0c <usb_isr+0x39c>
    e130:	b.n	defe <usb_isr+0x38e>
					//serial_phex(*buf);
					*dst++ = *buf++;
				}
				//serial_phex32(line_coding[0]);
				//serial_print("\n");
				if (line_coding[0] == 134) usb_reboot_timer = 15;
    e132:	ldr	r2, [pc, #148]	; (e1c8 <usb_isr+0x658>)
    e134:	movs	r1, #15
    e136:	strb	r1, [r2, #0]
    e138:	b.n	e034 <usb_isr+0x4c4>
		// TODO: required by PTP spec
		endpoint0_stall();
		return;
	case 0x67A1: // Get Device Statis (PTP spec, 5.2.4, page 10)
		// For now, always respond with status ok.
		reply_buffer[0] = 0x4;
    e13a:	ldr	r4, [pc, #76]	; (e188 <usb_isr+0x618>)
		reply_buffer[1] = 0;
		reply_buffer[2] = 0x01;
		reply_buffer[3] = 0x20;
    e13c:	movs	r1, #32
		endpoint0_stall();
		return;
	case 0x67A1: // Get Device Statis (PTP spec, 5.2.4, page 10)
		// For now, always respond with status ok.
		reply_buffer[0] = 0x4;
		reply_buffer[1] = 0;
    e13e:	strb	r2, [r4, #1]
		// TODO: required by PTP spec
		endpoint0_stall();
		return;
	case 0x67A1: // Get Device Statis (PTP spec, 5.2.4, page 10)
		// For now, always respond with status ok.
		reply_buffer[0] = 0x4;
    e140:	movs	r2, #4
		reply_buffer[1] = 0;
		reply_buffer[2] = 0x01;
    e142:	strb	r0, [r4, #2]
		reply_buffer[3] = 0x20;
    e144:	strb	r1, [r4, #3]
		// TODO: required by PTP spec
		endpoint0_stall();
		return;
	case 0x67A1: // Get Device Statis (PTP spec, 5.2.4, page 10)
		// For now, always respond with status ok.
		reply_buffer[0] = 0x4;
    e146:	strb	r2, [r4, #0]
		reply_buffer[1] = 0;
		reply_buffer[2] = 0x01;
		reply_buffer[3] = 0x20;
		data = reply_buffer;
		datalen = 4;
    e148:	mov	r0, r2
    e14a:	b.n	df62 <usb_isr+0x3f2>
    e14c:	ldrh	r1, [r5, #4]
    e14e:	and.w	r1, r1, #127	; 0x7f
		data = reply_buffer;
		datalen = 2;
		break;
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    e152:	cmp	r1, #6
    e154:	bhi.n	e074 <usb_isr+0x504>
    e156:	ldrh	r2, [r5, #2]
    e158:	cmp	r2, #0
    e15a:	bne.n	e074 <usb_isr+0x504>
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) &= ~0x02;
    e15c:	ldr	r4, [pc, #64]	; (e1a0 <usb_isr+0x630>)
    e15e:	str	r0, [sp, #8]
    e160:	lsls	r1, r1, #2
    e162:	add	r4, r1
    e164:	ldrb	r1, [r4, #0]
    e166:	bic.w	r1, r1, #2
    e16a:	strb	r1, [r4, #0]
    e16c:	b.n	e1e6 <usb_isr+0x676>
    e16e:	nop
    e170:	.word	0x20003164
    e174:	.word	0x200031ac
    e178:	.word	0x40072088
    e17c:	.word	0x40072080
    e180:	.word	0x2000319d
    e184:	.word	0x200030ac
    e188:	.word	0x200031a0
    e18c:	.word	0x2000319c
    e190:	.word	0x20003120
    e194:	.word	0x200030c4
    e198:	.word	0x20003217
    e19c:	.word	0x20003218
    e1a0:	.word	0x400720c0
    e1a4:	.word	0x40072094
    e1a8:	.word	0x1fff8000
    e1ac:	.word	0x00400088
    e1b0:	.word	0x40072098
    e1b4:	.word	0x200030c8
    e1b8:	.word	0x20003124
    e1bc:	.word	0x40072084
    e1c0:	.word	0x4007208c
    e1c4:	.word	0x000146f0
    e1c8:	.word	0x20003121
		}
		//serial_print("desc: not found\n");
		endpoint0_stall();
		return;
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		switch (setup.wIndex) {
    e1cc:	ldrh	r1, [r5, #4]
    e1ce:	cmp	r1, #0
    e1d0:	bne.w	e35c <usb_isr+0x7ec>
#ifdef CDC_STATUS_INTERFACE
		  case CDC_STATUS_INTERFACE:
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    e1d4:	ldr	r3, [pc, #472]	; (e3b0 <usb_isr+0x840>)
    e1d6:	ldr	r2, [pc, #476]	; (e3b4 <usb_isr+0x844>)
			usb_cdc_line_rtsdtr = setup.wValue;
    e1d8:	ldr	r4, [pc, #476]	; (e3b8 <usb_isr+0x848>)
		return;
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		switch (setup.wIndex) {
#ifdef CDC_STATUS_INTERFACE
		  case CDC_STATUS_INTERFACE:
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    e1da:	ldr	r3, [r3, #0]
			usb_cdc_line_rtsdtr = setup.wValue;
    e1dc:	ldrb	r5, [r5, #2]
		return;
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		switch (setup.wIndex) {
#ifdef CDC_STATUS_INTERFACE
		  case CDC_STATUS_INTERFACE:
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    e1de:	str	r3, [r2, #0]
			usb_cdc_line_rtsdtr = setup.wValue;
    e1e0:	str	r0, [sp, #8]
    e1e2:	mov	r2, r1
    e1e4:	strb	r5, [r4, #0]
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
    e1e6:	movs	r0, #0
    e1e8:	mov	r9, r0
    e1ea:	mov	r8, r0
    e1ec:	mov	lr, r0
    e1ee:	mov	r4, r0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    e1f0:	ldr	r1, [pc, #456]	; (e3bc <usb_isr+0x84c>)
    e1f2:	ldrb	r5, [r1, #0]
    e1f4:	orr.w	ip, r5, #2
    e1f8:	add.w	r3, r7, ip, lsl #3
    e1fc:	str	r3, [sp, #12]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    e1fe:	ldr	r3, [sp, #8]
    e200:	cmp	r3, #0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    e202:	ldr	r3, [sp, #12]
    e204:	str	r4, [r3, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    e206:	ite	eq
    e208:	moveq	r4, #136	; 0x88
    e20a:	movne	r4, #200	; 0xc8
    e20c:	b.n	df98 <usb_isr+0x428>
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
    e20e:	cmp	r0, #64	; 0x40
    e210:	bls.w	dfbe <usb_isr+0x44e>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    e214:	orr.w	r4, r4, #2
    e218:	add.w	r1, ip, r4, lsl #3
    e21c:	str.w	r9, [r1, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    e220:	cbz	r2, e242 <usb_isr+0x6d2>
    e222:	ldr	r2, [pc, #412]	; (e3c0 <usb_isr+0x850>)
	ep0_tx_data_toggle ^= 1;
    e224:	ldrb.w	r1, [sp, #8]
    e228:	strb	r1, [r3, #0]
	ep0_tx_bdt_bank ^= 1;
    e22a:	strb.w	r5, [r8]
    e22e:	subs	r0, #64	; 0x40
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    e230:	add.w	r3, r9, #64	; 0x40
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    e234:	str.w	r2, [ip, r4, lsl #3]
    e238:	b.n	dff0 <usb_isr+0x480>
    e23a:	lsls	r2, r0, #16
    e23c:	orr.w	r2, r2, #200	; 0xc8
    e240:	b.n	dfda <usb_isr+0x46a>
    e242:	ldr	r2, [pc, #384]	; (e3c4 <usb_isr+0x854>)
    e244:	b.n	e224 <usb_isr+0x6b4>
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_ODD_FIRST;
						break;
					  default:
						tx_state[endpoint] = ((uint32_t)b & 8) ?
    e246:	tst.w	r9, #8
    e24a:	ite	eq
    e24c:	moveq	r3, #2
    e24e:	movne	r3, #3
    e250:	strb	r3, [r1, r6]
						  TX_STATE_ODD_FREE : TX_STATE_EVEN_FREE;
						break;
    e252:	b.n	dc04 <usb_isr+0x94>
    e254:	ldrh	r1, [r5, #4]
volatile uint8_t usb_reboot_timer = 0;


static void endpoint0_stall(void)
{
	USB0_ENDPT0 = USB_ENDPT_EPSTALL | USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    e256:	ldr	r3, [pc, #368]	; (e3c8 <usb_isr+0x858>)
    e258:	and.w	r1, r1, #127	; 0x7f
		datalen = 2;
		data = reply_buffer;
		break;
	  case 0x0082: // GET_STATUS (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS) {
    e25c:	cmp	r1, #6
    e25e:	bhi.w	e076 <usb_isr+0x506>
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
    e262:	ldr	r4, [pc, #360]	; (e3cc <usb_isr+0x85c>)
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    e264:	lsls	r1, r1, #2
    e266:	add	r3, r1
		if (i > NUM_ENDPOINTS) {
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
    e268:	strb	r2, [r4, #0]
		reply_buffer[1] = 0;
    e26a:	strb	r2, [r4, #1]
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    e26c:	ldrb	r2, [r3, #0]
    e26e:	lsls	r3, r2, #30
    e270:	bpl.n	e360 <usb_isr+0x7f0>
    e272:	strb	r0, [r4, #0]
		data = reply_buffer;
		datalen = 2;
    e274:	movs	r0, #2
    e276:	b.n	df62 <usb_isr+0x3f2>
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
				break;
			  case TX_STATE_ODD_FREE:
			  case TX_STATE_NONE_FREE_ODD_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    e278:	ldr	r3, [sp, #8]
    e27a:	mov.w	r2, #1
    e27e:	strb	r2, [r3, #0]
    e280:	ldr	r3, [sp, #8]
			if (table[i].desc & BDT_OWN) {
				usb_free((usb_packet_t *)((uint8_t *)(table[i].addr) - 8));
			}
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
    e282:	add.w	r9, r9, #1
    e286:	adds	r3, #1
    e288:	cmp.w	r9, #6
    e28c:	add.w	r4, r4, #4
    e290:	add.w	r5, r5, #4
    e294:	str	r3, [sp, #8]
    e296:	bne.w	dd40 <usb_isr+0x1d0>
				break;
			  default:
				break;
			}
		}
		usb_rx_memory_needed = 0;
    e29a:	ldr	r3, [pc, #308]	; (e3d0 <usb_isr+0x860>)
    e29c:	ldr	r6, [sp, #20]
	  case 0x0500: // SET_ADDRESS
		break;
	  case 0x0900: // SET_CONFIGURATION
		//serial_print("configure\n");
		usb_configuration = setup.wValue;
		reg = &USB0_ENDPT1;
    e29e:	ldr	r5, [pc, #308]	; (e3d4 <usb_isr+0x864>)
		cfg = usb_endpoint_config_table;
    e2a0:	ldr.w	r8, [pc, #316]	; e3e0 <usb_isr+0x870>
				break;
			  default:
				break;
			}
		}
		usb_rx_memory_needed = 0;
    e2a4:	movs	r0, #0
    e2a6:	strb	r0, [r3, #0]
		for (i=1; i <= NUM_ENDPOINTS; i++) {
    e2a8:	mov.w	r9, #1
    e2ac:	b.n	e2ce <usb_isr+0x75e>
    e2ae:	mov.w	r4, r9, lsl #2
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    e2b2:	orr.w	r2, r4, #2
			table[index(i, TX, ODD)].desc = 0;
    e2b6:	orr.w	r4, r4, #3
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    e2ba:	movs	r3, #0
    e2bc:	str.w	r3, [r7, r2, lsl #3]
			table[index(i, TX, ODD)].desc = 0;
    e2c0:	str.w	r3, [r7, r4, lsl #3]
			  default:
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
    e2c4:	ldr	r3, [pc, #272]	; (e3d8 <usb_isr+0x868>)
    e2c6:	cmp	r5, r3
    e2c8:	add.w	r9, r9, #1
    e2cc:	beq.n	e31a <usb_isr+0x7aa>
			epconf = *cfg++;
    e2ce:	ldrb.w	r3, [r8], #1
			*reg = epconf;
    e2d2:	strb.w	r3, [r5], #4
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    e2d6:	lsls	r2, r3, #28
    e2d8:	bpl.n	e2ae <usb_isr+0x73e>
				usb_packet_t *p;
				p = usb_malloc();
    e2da:	bl	d974 <usb_malloc>
				if (p) {
    e2de:	cmp	r0, #0
    e2e0:	beq.n	e378 <usb_isr+0x808>
					table[index(i, RX, EVEN)].addr = p->buf;
    e2e2:	add.w	r3, r7, r9, lsl #5
    e2e6:	mov.w	r4, r9, lsl #2
    e2ea:	adds	r0, #8
    e2ec:	str	r0, [r3, #4]
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    e2ee:	ldr	r3, [pc, #212]	; (e3c4 <usb_isr+0x854>)
    e2f0:	str.w	r3, [r7, r4, lsl #3]
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    e2f4:	bl	d974 <usb_malloc>
				if (p) {
    e2f8:	cmp	r0, #0
    e2fa:	beq.n	e364 <usb_isr+0x7f4>
					table[index(i, RX, ODD)].addr = p->buf;
    e2fc:	orr.w	r3, r4, #1
    e300:	add.w	r2, r7, r3, lsl #3
    e304:	adds	r0, #8
    e306:	str	r0, [r2, #4]
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    e308:	ldr	r2, [pc, #180]	; (e3c0 <usb_isr+0x850>)
    e30a:	str.w	r2, [r7, r3, lsl #3]
    e30e:	b.n	e2b2 <usb_isr+0x742>
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
			  case TX_STATE_EVEN_FREE:
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
    e310:	ldr	r3, [sp, #8]
    e312:	mov.w	r2, #0
    e316:	strb	r2, [r3, #0]
    e318:	b.n	e280 <usb_isr+0x710>
    e31a:	ldrb	r3, [r6, #0]
    e31c:	str	r3, [sp, #8]
    e31e:	eor.w	r2, r3, #1
    e322:	b.n	e1e6 <usb_isr+0x676>
			}
#endif
		}
		break;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    e324:	ldr	r2, [pc, #180]	; (e3dc <usb_isr+0x86c>)
    e326:	ldr	r4, [pc, #164]	; (e3cc <usb_isr+0x85c>)
    e328:	ldrb	r2, [r2, #0]
    e32a:	strb	r2, [r4, #0]
    e32c:	b.n	df62 <usb_isr+0x3f2>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    e32e:	movs	r3, #1
    e330:	movs	r2, #0
    e332:	str	r3, [sp, #8]
    e334:	b.n	e1e6 <usb_isr+0x676>
    e336:	ldrh	r1, [r5, #4]
    e338:	and.w	r1, r1, #127	; 0x7f
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) &= ~0x02;
		// TODO: do we need to clear the data toggle here?
		break;
	  case 0x0302: // SET_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    e33c:	cmp	r1, #6
    e33e:	bhi.w	e074 <usb_isr+0x504>
    e342:	ldrh	r2, [r5, #2]
    e344:	cmp	r2, #0
    e346:	bne.w	e074 <usb_isr+0x504>
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) |= 0x02;
    e34a:	ldr	r4, [pc, #124]	; (e3c8 <usb_isr+0x858>)
    e34c:	str	r0, [sp, #8]
    e34e:	lsls	r1, r1, #2
    e350:	add	r4, r1
    e352:	ldrb	r1, [r4, #0]
    e354:	orr.w	r1, r1, #2
    e358:	strb	r1, [r4, #0]
    e35a:	b.n	e1e6 <usb_isr+0x676>
		}
		//serial_print("desc: not found\n");
		endpoint0_stall();
		return;
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		switch (setup.wIndex) {
    e35c:	str	r0, [sp, #8]
    e35e:	b.n	e1e6 <usb_isr+0x676>
		}
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
		data = reply_buffer;
		datalen = 2;
    e360:	movs	r0, #2
    e362:	b.n	df62 <usb_isr+0x3f2>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    e364:	ldr	r3, [pc, #104]	; (e3d0 <usb_isr+0x860>)
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    e366:	orr.w	r2, r4, #1
					usb_rx_memory_needed++;
    e36a:	ldrb	r3, [r3, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    e36c:	str.w	r0, [r7, r2, lsl #3]
					usb_rx_memory_needed++;
    e370:	ldr	r2, [pc, #92]	; (e3d0 <usb_isr+0x860>)
    e372:	adds	r3, #1
    e374:	strb	r3, [r2, #0]
    e376:	b.n	e2b2 <usb_isr+0x742>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    e378:	ldr	r3, [pc, #84]	; (e3d0 <usb_isr+0x860>)
    e37a:	ldr	r2, [pc, #84]	; (e3d0 <usb_isr+0x860>)
    e37c:	ldrb	r3, [r3, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    e37e:	mov.w	r4, r9, lsl #2
					usb_rx_memory_needed++;
    e382:	adds	r3, #1
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    e384:	str.w	r0, [r7, r4, lsl #3]
					usb_rx_memory_needed++;
    e388:	strb	r3, [r2, #0]
    e38a:	b.n	e2f4 <usb_isr+0x784>
    e38c:	cmp	r0, #64	; 0x40
    e38e:	mov	lr, r0
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
    e390:	mov.w	r3, #1
    e394:	it	cs
    e396:	movcs.w	lr, #64	; 0x40
    e39a:	rsb	r0, lr, r0
    e39e:	mov.w	r8, lr, lsl #16
    e3a2:	add.w	r9, r4, lr
    e3a6:	movs	r2, #0
    e3a8:	str	r3, [sp, #8]
    e3aa:	b.n	e1f0 <usb_isr+0x680>


void _reboot_Teensyduino_(void)
{
	// TODO: initialize R0 with a code....
	__asm__ volatile("bkpt");
    e3ac:	bkpt	0x0000
    e3ae:	nop
    e3b0:	.word	0x200030a4
    e3b4:	.word	0x20003220
    e3b8:	.word	0x200030a0
    e3bc:	.word	0x2000319c
    e3c0:	.word	0x004000c8
    e3c4:	.word	0x00400088
    e3c8:	.word	0x400720c0
    e3cc:	.word	0x200031a0
    e3d0:	.word	0x2000319d
    e3d4:	.word	0x400720c4
    e3d8:	.word	0x400720dc
    e3dc:	.word	0x200031a8
    e3e0:	.word	0x000146e8

0000e3e4 <usb_init>:
}



void usb_init(void)
{
    e3e4:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int i;

	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();
    e3e8:	bl	d0ec <usb_init_serialnumber>

	for (i=0; i < (NUM_ENDPOINTS+1)*4; i++) {
    e3ec:	movs	r3, #0
    e3ee:	ldr	r1, [pc, #124]	; (e46c <usb_init+0x88>)
		table[i].desc = 0;
    e3f0:	mov	r2, r3
		table[i].addr = 0;
    e3f2:	add.w	r0, r1, r3, lsl #3
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i < (NUM_ENDPOINTS+1)*4; i++) {
		table[i].desc = 0;
    e3f6:	str.w	r2, [r1, r3, lsl #3]
	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i < (NUM_ENDPOINTS+1)*4; i++) {
    e3fa:	adds	r3, #1
    e3fc:	cmp	r3, #28
		table[i].desc = 0;
		table[i].addr = 0;
    e3fe:	str	r2, [r0, #4]
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i < (NUM_ENDPOINTS+1)*4; i++) {
		table[i].desc = 0;
    e400:	mov.w	r4, #0
    e404:	ldr	r0, [pc, #100]	; (e46c <usb_init+0x88>)
	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i < (NUM_ENDPOINTS+1)*4; i++) {
    e406:	bne.n	e3f2 <usb_init+0xe>
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    e408:	ldr	r2, [pc, #100]	; (e470 <usb_init+0x8c>)
	// reset USB module
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
    e40a:	ldr	r7, [pc, #104]	; (e474 <usb_init+0x90>)
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    e40c:	ldr	r3, [r2, #0]
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    e40e:	ldr	r1, [pc, #104]	; (e478 <usb_init+0x94>)
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    e410:	ldr	r5, [pc, #104]	; (e47c <usb_init+0x98>)

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
	USB0_ERRSTAT = 0xFF;
	USB0_OTGISTAT = 0xFF;
    e412:	ldr	r6, [pc, #108]	; (e480 <usb_init+0x9c>)
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
    e414:	ldr.w	ip, [pc, #116]	; e48c <usb_init+0xa8>
	USB0_ERRSTAT = 0xFF;
    e418:	ldr.w	lr, [pc, #116]	; e490 <usb_init+0xac>
	USB0_OTGISTAT = 0xFF;

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
    e41c:	ldr.w	r8, [pc, #116]	; e494 <usb_init+0xb0>
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    e420:	orr.w	r3, r3, #262144	; 0x40000
    e424:	str	r3, [r2, #0]
	// reset USB module
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
    e426:	ubfx	r3, r0, #8, #8
    e42a:	strb	r3, [r7, #0]
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    e42c:	ubfx	r3, r0, #16, #8
    e430:	strb	r3, [r1, #0]
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    e432:	lsrs	r0, r0, #24

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
    e434:	movs	r3, #255	; 0xff
	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
	NVIC_ENABLE_IRQ(IRQ_USBOTG);

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    e436:	add.w	r2, r2, #172032	; 0x2a000
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    e43a:	strb	r0, [r5, #0]
	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
	NVIC_ENABLE_IRQ(IRQ_USBOTG);

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    e43c:	adds	r2, #212	; 0xd4
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
    e43e:	strb.w	r3, [ip]

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    e442:	ldr	r5, [pc, #64]	; (e484 <usb_init+0xa0>)
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
	USB0_ERRSTAT = 0xFF;
    e444:	strb.w	r3, [lr]
	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    e448:	ldr	r0, [pc, #60]	; (e488 <usb_init+0xa4>)
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
	USB0_ERRSTAT = 0xFF;
	USB0_OTGISTAT = 0xFF;
    e44a:	strb	r3, [r6, #0]

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
    e44c:	movs	r3, #1
    e44e:	strb.w	r3, [r8]

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    e452:	movs	r6, #112	; 0x70

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
	USB0_USBCTRL = 0;
    e454:	strb.w	r4, [r1, #80]	; 0x50
	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    e458:	mov.w	r4, #512	; 0x200

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    e45c:	movs	r1, #16
	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
	USB0_USBCTRL = 0;

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;
    e45e:	strb.w	r3, [r7, #-24]

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    e462:	strb	r6, [r5, #0]
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    e464:	str	r4, [r0, #0]

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    e466:	strb	r1, [r2, #0]
    e468:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e46c:	.word	0x1fff8000
    e470:	.word	0x40048034
    e474:	.word	0x4007209c
    e478:	.word	0x400720b0
    e47c:	.word	0x400720b4
    e480:	.word	0x40072010
    e484:	.word	0xe000e449
    e488:	.word	0xe000e108
    e48c:	.word	0x40072080
    e490:	.word	0x40072088
    e494:	.word	0x40072094

0000e498 <yield>:

extern const uint8_t _serialEvent_default;	

void yield(void) __attribute__ ((weak));
void yield(void)
{
    e498:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	static uint8_t running=0;
	if (!yield_active_check_flags) return;	// nothing to do
    e49c:	ldr	r6, [pc, #196]	; (e564 <yield+0xcc>)
    e49e:	ldrb	r3, [r6, #0]
    e4a0:	cbz	r3, e4c8 <yield+0x30>
	if (running) return; // TODO: does this need to be atomic?
    e4a2:	ldr	r7, [pc, #196]	; (e568 <yield+0xd0>)
    e4a4:	ldrb	r2, [r7, #0]
    e4a6:	cbnz	r2, e4c8 <yield+0x30>
	running = 1;
    e4a8:	movs	r2, #1


	// USB Serail - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
    e4aa:	lsls	r1, r3, #31
void yield(void)
{
	static uint8_t running=0;
	if (!yield_active_check_flags) return;	// nothing to do
	if (running) return; // TODO: does this need to be atomic?
	running = 1;
    e4ac:	strb	r2, [r7, #0]


	// USB Serail - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
    e4ae:	bmi.n	e51e <yield+0x86>
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIALUSB2) {
		if (SerialUSB2.available()) serialEventUSB2();
		if (_serialEventUSB2_default) yield_active_check_flags &= ~YIELD_CHECK_USB_SERIALUSB2;
	}
#endif
	if (yield_active_check_flags & YIELD_CHECK_HARDWARE_SERIAL) {
    e4b0:	lsls	r2, r3, #30
    e4b2:	bmi.n	e4e8 <yield+0x50>
		HardwareSerial::processSerialEventsList();
	}
	running = 0;
    e4b4:	movs	r2, #0
	if (yield_active_check_flags & YIELD_CHECK_EVENT_RESPONDER) EventResponder::runFromYield();
    e4b6:	lsls	r3, r3, #29
	}
#endif
	if (yield_active_check_flags & YIELD_CHECK_HARDWARE_SERIAL) {
		HardwareSerial::processSerialEventsList();
	}
	running = 0;
    e4b8:	strb	r2, [r7, #0]
	if (yield_active_check_flags & YIELD_CHECK_EVENT_RESPONDER) EventResponder::runFromYield();
    e4ba:	bpl.n	e4c8 <yield+0x30>
	// used with a scheduler or RTOS.
	bool waitForEvent(EventResponderRef event, int timeout);
	EventResponder * waitForEvent(EventResponder *list, int listsize, int timeout);

	static void runFromYield() {
		if (!firstYield) return;  
    e4bc:	ldr	r3, [pc, #172]	; (e56c <yield+0xd4>)
    e4be:	ldr	r2, [r3, #0]
    e4c0:	cbz	r2, e4c8 <yield+0x30>
		// First, check if yield was called from an interrupt
		// never call normal handler functions from any interrupt context
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    e4c2:	mrs	r2, IPSR
		if (ipsr != 0) return;
    e4c6:	cbz	r2, e4cc <yield+0x34>
    e4c8:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    e4cc:	mrs	r1, PRIMASK
		__disable_irq();
    e4d0:	cpsid	i
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
		if (ipsr != 0) return;
		// Next, check if any events have been triggered
		bool irq = disableInterrupts();
		EventResponder *first = firstYield;
    e4d2:	ldr	r0, [r3, #0]
		if (first == nullptr) {
    e4d4:	cbz	r0, e4de <yield+0x46>
			return;
		}
		// Finally, make sure we're not being recursively called,
		// which can happen if the user's function does anything
		// that calls yield.
		if (runningFromYield) {
    e4d6:	ldr	r4, [pc, #152]	; (e570 <yield+0xd8>)
    e4d8:	ldrb	r2, [r4, #0]
    e4da:	cmp	r2, #0
    e4dc:	beq.n	e53c <yield+0xa4>
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    e4de:	cmp	r1, #0
    e4e0:	bne.n	e4c8 <yield+0x30>
    e4e2:	cpsie	i
    e4e4:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					  return len; }
	virtual size_t write9bit(uint32_t c)	{ serial_putchar(c); return 1; }
	operator bool()			{ return true; }

	static inline void processSerialEventsList() {
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    e4e8:	ldr.w	r8, [pc, #144]	; e57c <yield+0xe4>
    e4ec:	ldrb.w	r2, [r8]
    e4f0:	cmp	r2, #0
    e4f2:	beq.n	e4b4 <yield+0x1c>
    e4f4:	ldr.w	r9, [pc, #136]	; e580 <yield+0xe8>
    e4f8:	movs	r4, #0
    e4fa:	b.n	e508 <yield+0x70>
    e4fc:	adds	r4, #1
    e4fe:	ldrb.w	r3, [r8]
    e502:	uxtb	r4, r4
    e504:	cmp	r3, r4
    e506:	bls.n	e52e <yield+0x96>
			s_serials_with_serial_events[i]->doYieldCode();
    e508:	ldr.w	r5, [r9, r4, lsl #2]
	static HardwareSerial 	*s_serials_with_serial_events[CNT_HARDWARE_SERIAL];
	static uint8_t 			s_count_serials_with_serial_events;
	void 		(* const _serialEvent)(); 
	void addToSerialEventsList(); 
	inline void doYieldCode()  {
		if (available()) (*_serialEvent)();
    e50c:	ldr	r3, [r5, #0]
    e50e:	mov	r0, r5
    e510:	ldr	r3, [r3, #16]
    e512:	blx	r3
    e514:	cmp	r0, #0
    e516:	beq.n	e4fc <yield+0x64>
    e518:	ldr	r3, [r5, #16]
    e51a:	blx	r3
    e51c:	b.n	e4fc <yield+0x64>
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    e51e:	bl	cd20 <usb_serial_available>
	running = 1;


	// USB Serail - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
		if (Serial.available()) serialEvent();
    e522:	cbnz	r0, e558 <yield+0xc0>
		if (_serialEvent_default) yield_active_check_flags &= ~YIELD_CHECK_USB_SERIAL;
    e524:	ldr	r3, [pc, #76]	; (e574 <yield+0xdc>)
    e526:	ldrb	r3, [r3, #0]
    e528:	cbnz	r3, e532 <yield+0x9a>
    e52a:	ldrb	r3, [r6, #0]
    e52c:	b.n	e4b0 <yield+0x18>
    e52e:	ldrb	r3, [r6, #0]
    e530:	b.n	e4b4 <yield+0x1c>
    e532:	ldrb	r3, [r6, #0]
    e534:	and.w	r3, r3, #254	; 0xfe
    e538:	strb	r3, [r6, #0]
    e53a:	b.n	e4b0 <yield+0x18>
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
		firstYield = first->_next;
    e53c:	ldr	r5, [r0, #20]
    e53e:	str	r5, [r3, #0]
		if (runningFromYield) {
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
    e540:	movs	r3, #1
    e542:	strb	r3, [r4, #0]
		firstYield = first->_next;
		if (firstYield) {
    e544:	cbz	r5, e55e <yield+0xc6>
			firstYield->_prev = nullptr;
    e546:	str	r2, [r5, #24]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    e548:	cbnz	r1, e54c <yield+0xb4>
    e54a:	cpsie	i
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
		}
		enableInterrupts(irq);
		first->_triggered = false;
    e54c:	movs	r5, #0
    e54e:	strb	r5, [r0, #29]
		(*(first->_function))(*first);
    e550:	ldr	r3, [r0, #8]
    e552:	blx	r3
		runningFromYield = false;
    e554:	strb	r5, [r4, #0]
    e556:	b.n	e4c8 <yield+0x30>
	running = 1;


	// USB Serail - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
		if (Serial.available()) serialEvent();
    e558:	bl	e948 <serialEvent()>
    e55c:	b.n	e524 <yield+0x8c>
		runningFromYield = true;
		firstYield = first->_next;
		if (firstYield) {
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
    e55e:	ldr	r3, [pc, #24]	; (e578 <yield+0xe0>)
    e560:	str	r5, [r3, #0]
    e562:	b.n	e548 <yield+0xb0>
    e564:	.word	0x1fff8d4c
    e568:	.word	0x200031b2
    e56c:	.word	0x200031c4
    e570:	.word	0x200031c8
    e574:	.word	0x1fff8d60
    e578:	.word	0x200031c0
    e57c:	.word	0x200031e0
    e580:	.word	0x200031d4

0000e584 <DMAChannel::begin(bool)>:
/**                     Teensy 3.0 & 3.1                       **/
/****************************************************************/
#if defined(KINETISK)

void DMAChannel::begin(bool force_initialization)
{
    e584:	push	{r4, r5, r6, r7, lr}
	uint32_t ch = 0;

	__disable_irq();
    e586:	cpsid	i
	if (!force_initialization && TCD && channel < DMA_MAX_CHANNELS
    e588:	cbnz	r1, e5b2 <DMAChannel::begin(bool)+0x2e>
    e58a:	ldr	r2, [r0, #0]
    e58c:	cbz	r2, e5b2 <DMAChannel::begin(bool)+0x2e>
    e58e:	ldrb	r3, [r0, #4]
    e590:	cmp	r3, #15
    e592:	bhi.n	e5b2 <DMAChannel::begin(bool)+0x2e>
	  && (dma_channel_allocated_mask & (1 << channel))
    e594:	ldr	r4, [pc, #156]	; (e634 <DMAChannel::begin(bool)+0xb0>)
    e596:	ldrh	r1, [r4, #0]
    e598:	asr.w	r5, r1, r3
    e59c:	lsls	r5, r5, #31
    e59e:	bpl.n	e5b6 <DMAChannel::begin(bool)+0x32>
	  && (uint32_t)TCD == (uint32_t)(0x40009000 + channel * 32)) {
    e5a0:	add.w	r3, r3, #33554432	; 0x2000000
    e5a4:	add.w	r3, r3, #1152	; 0x480
    e5a8:	cmp.w	r2, r3, lsl #5
    e5ac:	bne.n	e5b6 <DMAChannel::begin(bool)+0x32>
		// DMA channel already allocated
		__enable_irq();
    e5ae:	cpsie	i
		return;
    e5b0:	pop	{r4, r5, r6, r7, pc}
    e5b2:	ldr	r4, [pc, #128]	; (e634 <DMAChannel::begin(bool)+0xb0>)
    e5b4:	ldrh	r1, [r4, #0]
/**                     Teensy 3.0 & 3.1                       **/
/****************************************************************/
#if defined(KINETISK)

void DMAChannel::begin(bool force_initialization)
{
    e5b6:	movs	r3, #0
		// DMA channel already allocated
		__enable_irq();
		return;
	}
	while (1) {
		if (!(dma_channel_allocated_mask & (1 << ch))) {
    e5b8:	asr.w	r2, r1, r3
    e5bc:	ands.w	r2, r2, #1
    e5c0:	beq.n	e5d2 <DMAChannel::begin(bool)+0x4e>
			dma_channel_allocated_mask |= (1 << ch);
			__enable_irq();
			break;
		}
		if (++ch >= DMA_MAX_CHANNELS) {
    e5c2:	adds	r3, #1
    e5c4:	cmp	r3, #16
    e5c6:	bne.n	e5b8 <DMAChannel::begin(bool)+0x34>
			__enable_irq();
    e5c8:	cpsie	i
			TCD = (TCD_t *)0;
    e5ca:	movs	r2, #0
			channel = DMA_MAX_CHANNELS;
    e5cc:	strb	r3, [r0, #4]
			__enable_irq();
			break;
		}
		if (++ch >= DMA_MAX_CHANNELS) {
			__enable_irq();
			TCD = (TCD_t *)0;
    e5ce:	str	r2, [r0, #0]
    e5d0:	pop	{r4, r5, r6, r7, pc}
		__enable_irq();
		return;
	}
	while (1) {
		if (!(dma_channel_allocated_mask & (1 << ch))) {
			dma_channel_allocated_mask |= (1 << ch);
    e5d2:	movs	r5, #1
    e5d4:	lsls	r5, r3
    e5d6:	orrs	r1, r5
    e5d8:	strh	r1, [r4, #0]
			__enable_irq();
    e5da:	cpsie	i
			return; // no more channels available
			// attempts to use this object will hardfault
		}
	}
	channel = ch;
	SIM_SCGC7 |= SIM_SCGC7_DMA;
    e5dc:	ldr	r6, [pc, #88]	; (e638 <DMAChannel::begin(bool)+0xb4>)
	SIM_SCGC6 |= SIM_SCGC6_DMAMUX;
    e5de:	ldr	r5, [pc, #92]	; (e63c <DMAChannel::begin(bool)+0xb8>)
#if DMA_NUM_CHANNELS <= 16
	DMA_CR = DMA_CR_EMLM | DMA_CR_EDBG; // minor loop mapping is available
    e5e0:	ldr	r7, [pc, #92]	; (e640 <DMAChannel::begin(bool)+0xbc>)
#else
	DMA_CR = DMA_CR_GRP1PRI| DMA_CR_EMLM | DMA_CR_EDBG;
#endif
	DMA_CERQ = ch;
    e5e2:	ldr.w	lr, [pc, #100]	; e648 <DMAChannel::begin(bool)+0xc4>
			channel = DMA_MAX_CHANNELS;
			return; // no more channels available
			// attempts to use this object will hardfault
		}
	}
	channel = ch;
    e5e6:	uxtb	r1, r3
    e5e8:	strb	r1, [r0, #4]
	SIM_SCGC7 |= SIM_SCGC7_DMA;
    e5ea:	ldr	r4, [r6, #0]
    e5ec:	orr.w	r4, r4, #2
    e5f0:	str	r4, [r6, #0]
	SIM_SCGC6 |= SIM_SCGC6_DMAMUX;
    e5f2:	ldr	r4, [r5, #0]
    e5f4:	orr.w	r4, r4, #2
    e5f8:	str	r4, [r5, #0]
	DMA_CR = DMA_CR_EMLM | DMA_CR_EDBG; // minor loop mapping is available
#else
	DMA_CR = DMA_CR_GRP1PRI| DMA_CR_EMLM | DMA_CR_EDBG;
#endif
	DMA_CERQ = ch;
	DMA_CERR = ch;
    e5fa:	sub.w	r6, r6, #262144	; 0x40000
	}
	channel = ch;
	SIM_SCGC7 |= SIM_SCGC7_DMA;
	SIM_SCGC6 |= SIM_SCGC6_DMAMUX;
#if DMA_NUM_CHANNELS <= 16
	DMA_CR = DMA_CR_EMLM | DMA_CR_EDBG; // minor loop mapping is available
    e5fe:	movs	r4, #130	; 0x82
#else
	DMA_CR = DMA_CR_GRP1PRI| DMA_CR_EMLM | DMA_CR_EDBG;
#endif
	DMA_CERQ = ch;
	DMA_CERR = ch;
	DMA_CEEI = ch;
    e600:	sub.w	r5, r5, #262144	; 0x40000
	DMA_CINT = ch;
	TCD = (TCD_t *)(0x40009000 + ch * 32);
    e604:	add.w	r3, r3, #33554432	; 0x2000000
	}
	channel = ch;
	SIM_SCGC7 |= SIM_SCGC7_DMA;
	SIM_SCGC6 |= SIM_SCGC6_DMAMUX;
#if DMA_NUM_CHANNELS <= 16
	DMA_CR = DMA_CR_EMLM | DMA_CR_EDBG; // minor loop mapping is available
    e608:	str	r4, [r7, #0]
#endif
	DMA_CERQ = ch;
	DMA_CERR = ch;
	DMA_CEEI = ch;
	DMA_CINT = ch;
	TCD = (TCD_t *)(0x40009000 + ch * 32);
    e60a:	add.w	r3, r3, #1152	; 0x480
	DMA_CR = DMA_CR_EMLM | DMA_CR_EDBG; // minor loop mapping is available
#else
	DMA_CR = DMA_CR_GRP1PRI| DMA_CR_EMLM | DMA_CR_EDBG;
#endif
	DMA_CERQ = ch;
	DMA_CERR = ch;
    e60e:	subs	r6, #34	; 0x22
	DMA_CEEI = ch;
    e610:	subs	r5, #36	; 0x24
	DMA_CINT = ch;
    e612:	ldr	r4, [pc, #48]	; (e644 <DMAChannel::begin(bool)+0xc0>)
#if DMA_NUM_CHANNELS <= 16
	DMA_CR = DMA_CR_EMLM | DMA_CR_EDBG; // minor loop mapping is available
#else
	DMA_CR = DMA_CR_GRP1PRI| DMA_CR_EMLM | DMA_CR_EDBG;
#endif
	DMA_CERQ = ch;
    e614:	strb.w	r1, [lr]
	DMA_CERR = ch;
	DMA_CEEI = ch;
	DMA_CINT = ch;
	TCD = (TCD_t *)(0x40009000 + ch * 32);
    e618:	lsls	r3, r3, #5
	DMA_CR = DMA_CR_EMLM | DMA_CR_EDBG; // minor loop mapping is available
#else
	DMA_CR = DMA_CR_GRP1PRI| DMA_CR_EMLM | DMA_CR_EDBG;
#endif
	DMA_CERQ = ch;
	DMA_CERR = ch;
    e61a:	strb	r1, [r6, #0]
	DMA_CEEI = ch;
    e61c:	strb	r1, [r5, #0]
	DMA_CINT = ch;
    e61e:	strb	r1, [r4, #0]
	TCD = (TCD_t *)(0x40009000 + ch * 32);
    e620:	str	r3, [r0, #0]
	uint32_t *p = (uint32_t *)TCD;
	*p++ = 0;
    e622:	str	r2, [r3, #0]
	*p++ = 0;
    e624:	str	r2, [r3, #4]
	*p++ = 0;
    e626:	str	r2, [r3, #8]
	*p++ = 0;
    e628:	str	r2, [r3, #12]
	*p++ = 0;
    e62a:	str	r2, [r3, #16]
	*p++ = 0;
    e62c:	str	r2, [r3, #20]
	*p++ = 0;
    e62e:	str	r2, [r3, #24]
	*p++ = 0;
    e630:	str	r2, [r3, #28]
    e632:	pop	{r4, r5, r6, r7, pc}
    e634:	.word	0x200031b4
    e638:	.word	0x40048040
    e63c:	.word	0x4004803c
    e640:	.word	0x40008000
    e644:	.word	0x4000801f
    e648:	.word	0x4000801a

0000e64c <DMAChannel::release()>:
}

void DMAChannel::release(void)
{
	if (channel >= DMA_MAX_CHANNELS) return;
    e64c:	ldrb	r3, [r0, #4]
    e64e:	cmp	r3, #15
    e650:	bhi.n	e676 <DMAChannel::release()+0x2a>
	DMA_CERQ = channel;
    e652:	ldr	r2, [pc, #36]	; (e678 <DMAChannel::release()+0x2c>)
	*p++ = 0;
	*p++ = 0;
}

void DMAChannel::release(void)
{
    e654:	push	{r4}
	if (channel >= DMA_MAX_CHANNELS) return;
	DMA_CERQ = channel;
    e656:	strb	r3, [r2, #0]
	__disable_irq();
    e658:	cpsid	i
	dma_channel_allocated_mask &= ~(1 << channel);
    e65a:	ldr	r1, [pc, #32]	; (e67c <DMAChannel::release()+0x30>)
    e65c:	ldrb	r4, [r0, #4]
    e65e:	ldrh	r2, [r1, #0]
    e660:	movs	r3, #1
    e662:	lsls	r3, r4
    e664:	bic.w	r3, r2, r3
    e668:	strh	r3, [r1, #0]
	__enable_irq();
    e66a:	cpsie	i
	channel = DMA_MAX_CHANNELS;
    e66c:	movs	r2, #16
	TCD = (TCD_t *)0;
    e66e:	movs	r3, #0
}
    e670:	pop	{r4}
	if (channel >= DMA_MAX_CHANNELS) return;
	DMA_CERQ = channel;
	__disable_irq();
	dma_channel_allocated_mask &= ~(1 << channel);
	__enable_irq();
	channel = DMA_MAX_CHANNELS;
    e672:	strb	r2, [r0, #4]
	TCD = (TCD_t *)0;
    e674:	str	r3, [r0, #0]
}
    e676:	bx	lr
    e678:	.word	0x4000801a
    e67c:	.word	0x200031b4

0000e680 <EventResponder::triggerEventNotImmediate()>:
uint8_t _serialEvent_default __attribute__((weak)) PROGMEM = 0 ;	
uint8_t _serialEventUSB1_default __attribute__((weak)) PROGMEM = 0 ;	
uint8_t _serialEventUSB2_default __attribute__((weak)) PROGMEM = 0 ;	

void EventResponder::triggerEventNotImmediate()
{
    e680:	push	{r4}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    e682:	mrs	r2, PRIMASK
		__disable_irq();
    e686:	cpsid	i
	bool irq = disableInterrupts();
	if (_triggered == false) {
    e688:	ldrb	r3, [r0, #29]
    e68a:	cbnz	r3, e69a <EventResponder::triggerEventNotImmediate()+0x1a>
		// not already triggered
		if (_type == EventTypeYield) {
    e68c:	ldrb	r1, [r0, #28]
    e68e:	cmp	r1, #1
    e690:	beq.n	e6a2 <EventResponder::triggerEventNotImmediate()+0x22>
				_next = nullptr;
				_prev = lastYield;
				_prev->_next = this;
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
    e692:	cmp	r1, #3
    e694:	beq.n	e6b6 <EventResponder::triggerEventNotImmediate()+0x36>
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
		} else {
			// detached, easy :-)
		}
		_triggered = true;
    e696:	movs	r3, #1
    e698:	strb	r3, [r0, #29]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    e69a:	cbnz	r2, e69e <EventResponder::triggerEventNotImmediate()+0x1e>
    e69c:	cpsie	i
	}
	enableInterrupts(irq);
}
    e69e:	pop	{r4}
    e6a0:	bx	lr
	bool irq = disableInterrupts();
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
    e6a2:	ldr	r4, [pc, #72]	; (e6ec <EventResponder::triggerEventNotImmediate()+0x6c>)
    e6a4:	ldr	r1, [r4, #0]
    e6a6:	cbz	r1, e6d2 <EventResponder::triggerEventNotImmediate()+0x52>
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
    e6a8:	ldr	r1, [pc, #68]	; (e6f0 <EventResponder::triggerEventNotImmediate()+0x70>)
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
    e6aa:	str	r3, [r0, #20]
				_prev = lastYield;
    e6ac:	ldr	r3, [r1, #0]
    e6ae:	str	r3, [r0, #24]
				_prev->_next = this;
				lastYield = this;
    e6b0:	str	r0, [r1, #0]
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
				_prev->_next = this;
    e6b2:	str	r0, [r3, #20]
    e6b4:	b.n	e696 <EventResponder::triggerEventNotImmediate()+0x16>
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
    e6b6:	ldr	r4, [pc, #60]	; (e6f4 <EventResponder::triggerEventNotImmediate()+0x74>)
    e6b8:	ldr	r1, [r4, #0]
    e6ba:	cbz	r1, e6de <EventResponder::triggerEventNotImmediate()+0x5e>
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
    e6bc:	ldr	r1, [pc, #56]	; (e6f8 <EventResponder::triggerEventNotImmediate()+0x78>)
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
    e6be:	str	r3, [r0, #20]
				_prev = lastInterrupt;
    e6c0:	ldr	r3, [r1, #0]
    e6c2:	str	r3, [r0, #24]
				_prev->_next = this;
				lastInterrupt = this;
    e6c4:	str	r0, [r1, #0]
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
				_prev->_next = this;
    e6c6:	str	r0, [r3, #20]
				lastInterrupt = this;
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
    e6c8:	ldr	r3, [pc, #48]	; (e6fc <EventResponder::triggerEventNotImmediate()+0x7c>)
    e6ca:	mov.w	r1, #268435456	; 0x10000000
    e6ce:	str	r1, [r3, #0]
    e6d0:	b.n	e696 <EventResponder::triggerEventNotImmediate()+0x16>
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
    e6d2:	ldr	r3, [pc, #28]	; (e6f0 <EventResponder::triggerEventNotImmediate()+0x70>)
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
    e6d4:	str	r1, [r0, #20]
				_prev = nullptr;
    e6d6:	str	r1, [r0, #24]
				firstYield = this;
    e6d8:	str	r0, [r4, #0]
				lastYield = this;
    e6da:	str	r0, [r3, #0]
    e6dc:	b.n	e696 <EventResponder::triggerEventNotImmediate()+0x16>
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
    e6de:	ldr	r3, [pc, #24]	; (e6f8 <EventResponder::triggerEventNotImmediate()+0x78>)
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
    e6e0:	str	r1, [r0, #20]
				_prev = nullptr;
    e6e2:	str	r1, [r0, #24]
				firstInterrupt = this;
    e6e4:	str	r0, [r4, #0]
				lastInterrupt = this;
    e6e6:	str	r0, [r3, #0]
    e6e8:	b.n	e6c8 <EventResponder::triggerEventNotImmediate()+0x48>
    e6ea:	nop
    e6ec:	.word	0x200031c4
    e6f0:	.word	0x200031c0
    e6f4:	.word	0x200031b8
    e6f8:	.word	0x200031bc
    e6fc:	.word	0xe000ed04

0000e700 <EventResponder::runFromInterrupt()>:
{
	EventResponder::runFromInterrupt();
}

void EventResponder::runFromInterrupt()
{
    e700:	push	{r4, r5, r6, lr}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    e702:	mrs	r2, PRIMASK
		__disable_irq();
    e706:	cpsid	i
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    e708:	ldr	r4, [pc, #48]	; (e73c <EventResponder::runFromInterrupt()+0x3c>)
    e70a:	ldr	r0, [r4, #0]
		if (first) {
    e70c:	cbz	r0, e730 <EventResponder::runFromInterrupt()+0x30>
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    e70e:	ldr	r6, [pc, #48]	; (e740 <EventResponder::runFromInterrupt()+0x40>)
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
    e710:	movs	r5, #0
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
    e712:	ldr	r3, [r0, #20]
    e714:	str	r3, [r4, #0]
			if (firstInterrupt) {
    e716:	cbz	r3, e736 <EventResponder::runFromInterrupt()+0x36>
				firstInterrupt->_prev = nullptr;
    e718:	str	r5, [r3, #24]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    e71a:	cbnz	r2, e71e <EventResponder::runFromInterrupt()+0x1e>
    e71c:	cpsie	i
			} else {
				lastInterrupt = nullptr;
			}
			enableInterrupts(irq);
			first->_triggered = false;
    e71e:	strb	r5, [r0, #29]
			(*(first->_function))(*first);
    e720:	ldr	r3, [r0, #8]
    e722:	blx	r3
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    e724:	mrs	r2, PRIMASK
		__disable_irq();
    e728:	cpsid	i

void EventResponder::runFromInterrupt()
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    e72a:	ldr	r0, [r4, #0]
		if (first) {
    e72c:	cmp	r0, #0
    e72e:	bne.n	e712 <EventResponder::runFromInterrupt()+0x12>
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    e730:	cbnz	r2, e734 <EventResponder::runFromInterrupt()+0x34>
    e732:	cpsie	i
    e734:	pop	{r4, r5, r6, pc}
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    e736:	str	r3, [r6, #0]
    e738:	b.n	e71a <EventResponder::runFromInterrupt()+0x1a>
    e73a:	nop
    e73c:	.word	0x200031b8
    e740:	.word	0x200031bc

0000e744 <pendablesrvreq_isr>:
	enableInterrupts(irq);
}

void pendablesrvreq_isr(void)
{
	EventResponder::runFromInterrupt();
    e744:	b.w	e700 <EventResponder::runFromInterrupt()>

0000e748 <systick_isr>:

extern "C" volatile uint32_t systick_millis_count;

void systick_isr(void)
{
	systick_millis_count++;
    e748:	ldr	r2, [pc, #8]	; (e754 <systick_isr+0xc>)
    e74a:	ldr	r3, [r2, #0]
    e74c:	adds	r3, #1
    e74e:	str	r3, [r2, #0]
    e750:	bx	lr
    e752:	nop
    e754:	.word	0x200030a4

0000e758 <usb_serial_class::clear()>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
    e758:	b.w	cd3c <usb_serial_flush_input>

0000e75c <usb_serial_class::peek()>:
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
    e75c:	b.w	ccf0 <usb_serial_peekchar>

0000e760 <usb_serial_class::read()>:
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
    e760:	b.w	cca8 <usb_serial_getchar>

0000e764 <usb_serial_class::available()>:
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    e764:	b.w	cd20 <usb_serial_available>

0000e768 <usb_serial_class::flush()>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
    e768:	b.w	cedc <usb_serial_flush_output>

0000e76c <usb_serial_class::availableForWrite()>:
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
	size_t write(unsigned long n) { return write((uint8_t)n); }
	size_t write(long n) { return write((uint8_t)n); }
	size_t write(unsigned int n) { return write((uint8_t)n); }
	size_t write(int n) { return write((uint8_t)n); }
	virtual int availableForWrite() { return usb_serial_write_buffer_free(); }
    e76c:	b.w	ce94 <usb_serial_write_buffer_free>

0000e770 <usb_serial_class::write(unsigned char const*, unsigned int)>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    e770:	mov	r0, r1
    e772:	mov	r1, r2
    e774:	b.w	cd74 <usb_serial_write>

0000e778 <usb_serial_class::write(unsigned char)>:
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    e778:	mov	r0, r1
    e77a:	b.w	ce7c <usb_serial_putchar>
    e77e:	nop

0000e780 <Print::write(unsigned char const*, unsigned int)>:

#include <Arduino.h>


size_t Print::write(const uint8_t *buffer, size_t size)
{
    e780:	push	{r3, r4, r5, r6, r7, lr}
	if (buffer == nullptr) return 0;
    e782:	mov	r6, r1
    e784:	cbz	r1, e7a4 <Print::write(unsigned char const*, unsigned int)+0x24>
	size_t count = 0;
	while (size--) count += write(*buffer++);
    e786:	cbz	r2, e7a8 <Print::write(unsigned char const*, unsigned int)+0x28>
    e788:	mov	r7, r0
    e78a:	mov	r4, r2
    e78c:	movs	r5, #0
    e78e:	ldr	r3, [r7, #0]
    e790:	ldrb.w	r1, [r6], #1
    e794:	ldr	r3, [r3, #0]
    e796:	mov	r0, r7
    e798:	blx	r3
    e79a:	subs	r4, #1
    e79c:	add	r5, r0
    e79e:	bne.n	e78e <Print::write(unsigned char const*, unsigned int)+0xe>
    e7a0:	mov	r0, r5
    e7a2:	pop	{r3, r4, r5, r6, r7, pc}
#include <Arduino.h>


size_t Print::write(const uint8_t *buffer, size_t size)
{
	if (buffer == nullptr) return 0;
    e7a4:	mov	r0, r1
    e7a6:	pop	{r3, r4, r5, r6, r7, pc}
    e7a8:	mov	r0, r2
	size_t count = 0;
	while (size--) count += write(*buffer++);
	return count;
}
    e7aa:	pop	{r3, r4, r5, r6, r7, pc}

0000e7ac <Print::println()>:
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
    e7ac:	push	{lr}
	uint8_t buf[2]={'\r', '\n'};
    e7ae:	ldr	r2, [pc, #24]	; (e7c8 <Print::println()+0x1c>)
	return write(buf, 2);
    e7b0:	ldr	r3, [r0, #0]
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    e7b2:	ldrh	r2, [r2, #0]
	return write(buf, 2);
    e7b4:	ldr	r3, [r3, #4]
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
    e7b6:	sub	sp, #12
	uint8_t buf[2]={'\r', '\n'};
	return write(buf, 2);
    e7b8:	add	r1, sp, #4
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    e7ba:	strh.w	r2, [sp, #4]
	return write(buf, 2);
    e7be:	movs	r2, #2
    e7c0:	blx	r3
}
    e7c2:	add	sp, #12
    e7c4:	ldr.w	pc, [sp], #4
    e7c8:	.word	0x00014890

0000e7cc <_write>:

extern "C" {
__attribute__((weak))
int _write(int file, char *ptr, int len)
{
    e7cc:	push	{r4, lr}
	((class Print *)file)->write((uint8_t *)ptr, len);
    e7ce:	ldr	r3, [r0, #0]
}

extern "C" {
__attribute__((weak))
int _write(int file, char *ptr, int len)
{
    e7d0:	mov	r4, r2
	((class Print *)file)->write((uint8_t *)ptr, len);
    e7d2:	ldr	r3, [r3, #4]
    e7d4:	blx	r3
	return len;
}
    e7d6:	mov	r0, r4
    e7d8:	pop	{r4, pc}
    e7da:	nop

0000e7dc <Print::printf(char const*, ...)>:
}

int Print::printf(const char *format, ...)
{
    e7dc:	push	{r1, r2, r3}
    e7de:	push	{lr}
    e7e0:	sub	sp, #8
    e7e2:	add	r2, sp, #12
    e7e4:	ldr.w	r1, [r2], #4
	va_list ap;
	va_start(ap, format);
    e7e8:	str	r2, [sp, #4]
#ifdef __STRICT_ANSI__
	return 0;  // TODO: make this work with -std=c++0x
#else
	return vdprintf((int)this, format, ap);
    e7ea:	bl	12578 <vdprintf>
#endif
}
    e7ee:	add	sp, #8
    e7f0:	ldr.w	lr, [sp], #4
    e7f4:	add	sp, #12
    e7f6:	bx	lr

0000e7f8 <Print::printNumber64(unsigned long long, unsigned char, unsigned char)>:
	if (n < 0) return printNumber64(-n, 10, 1);
	return printNumber64(n, 10, 0);
}

size_t Print::printNumber64(uint64_t n, uint8_t base, uint8_t sign)
{
    e7f8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    e7fc:	sub	sp, #72	; 0x48
    e7fe:	ldrb.w	r6, [sp, #104]	; 0x68
    e802:	ldrb.w	sl, [sp, #108]	; 0x6c
	uint8_t buf[66];
	uint8_t digit, i;

	if (base < 2) return 0;
    e806:	cmp	r6, #1
    e808:	bls.n	e8aa <Print::printNumber64(unsigned long long, unsigned char, unsigned char)+0xb2>
    e80a:	mov	r4, r2
    e80c:	mov	r5, r3
	if (n == 0) {
    e80e:	orrs.w	r3, r4, r5
    e812:	mov	r9, r0
    e814:	beq.n	e89e <Print::printNumber64(unsigned long long, unsigned char, unsigned char)+0xa6>
    e816:	uxtb	r6, r6
    e818:	movs	r7, #0
    e81a:	mov.w	r8, #65	; 0x41
    e81e:	b.n	e824 <Print::printNumber64(unsigned long long, unsigned char, unsigned char)+0x2c>
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
			n /= base;
			if (n == 0) break;
			i--;
    e820:	uxtb.w	r8, r3
		buf[sizeof(buf) - 1] = '0';
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
    e824:	mov	r0, r4
    e826:	mov	r1, r5
    e828:	mov	r2, r6
    e82a:	mov	r3, r7
    e82c:	bl	fb44 <__aeabi_uldivmod>
    e830:	mov	r1, r3
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    e832:	cmp	r1, #0
    e834:	it	eq
    e836:	cmpeq	r2, #10
		buf[sizeof(buf) - 1] = '0';
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
    e838:	uxtb	r3, r2
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
			n /= base;
    e83a:	mov	r0, r4
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    e83c:	add	r4, sp, #72	; 0x48
    e83e:	add.w	lr, r3, #48	; 0x30
    e842:	add	r4, r8
    e844:	itte	cs
    e846:	addcs	r3, #55	; 0x37
    e848:	uxtbcs.w	lr, r3
    e84c:	uxtbcc.w	lr, lr
			n /= base;
    e850:	mov	r3, r7
    e852:	mov	r1, r5
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    e854:	strb.w	lr, [r4, #-68]
			n /= base;
    e858:	mov	r2, r6
    e85a:	bl	fb44 <__aeabi_uldivmod>
    e85e:	mov	r4, r0
    e860:	mov	r5, r1
			if (n == 0) break;
    e862:	orrs.w	r3, r4, r5
			i--;
    e866:	add.w	r3, r8, #4294967295
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
			n /= base;
			if (n == 0) break;
    e86a:	bne.n	e820 <Print::printNumber64(unsigned long long, unsigned char, unsigned char)+0x28>
			i--;
		}
	}
	if (sign) {
    e86c:	cmp.w	sl, #0
    e870:	beq.n	e884 <Print::printNumber64(unsigned long long, unsigned char, unsigned char)+0x8c>
		i--;
    e872:	add.w	r8, r8, #4294967295
    e876:	uxtb.w	r8, r8
		buf[i] = '-';
    e87a:	add	r3, sp, #72	; 0x48
    e87c:	add	r3, r8
    e87e:	movs	r2, #45	; 0x2d
    e880:	strb.w	r2, [r3, #-68]
	}
	return write(buf + i, sizeof(buf) - i);
    e884:	ldr.w	r3, [r9]
    e888:	add	r2, sp, #4
    e88a:	add.w	r1, r2, r8
    e88e:	ldr	r3, [r3, #4]
    e890:	mov	r0, r9
    e892:	rsb	r2, r8, #66	; 0x42
    e896:	blx	r3
}
    e898:	add	sp, #72	; 0x48
    e89a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	uint8_t buf[66];
	uint8_t digit, i;

	if (base < 2) return 0;
	if (n == 0) {
		buf[sizeof(buf) - 1] = '0';
    e89e:	movs	r3, #48	; 0x30
    e8a0:	strb.w	r3, [sp, #69]	; 0x45
		i = sizeof(buf) - 1;
    e8a4:	mov.w	r8, #65	; 0x41
    e8a8:	b.n	e86c <Print::printNumber64(unsigned long long, unsigned char, unsigned char)+0x74>
size_t Print::printNumber64(uint64_t n, uint8_t base, uint8_t sign)
{
	uint8_t buf[66];
	uint8_t digit, i;

	if (base < 2) return 0;
    e8aa:	movs	r0, #0
	if (sign) {
		i--;
		buf[i] = '-';
	}
	return write(buf + i, sizeof(buf) - i);
}
    e8ac:	add	sp, #72	; 0x48
    e8ae:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    e8b2:	nop

0000e8b4 <main>:
 */

#include <Arduino.h>

extern "C" int main(void)
{
    e8b4:	push	{r3, lr}
	}


#else
	// Arduino's main() function just calls setup() and loop()....
	setup();
    e8b6:	bl	1cd0 <setup>
	while (1) {
		loop();
    e8ba:	bl	1ab8 <loop>
		yield();
    e8be:	bl	e498 <yield>
    e8c2:	b.n	e8ba <main+0x6>

0000e8c4 <software_isr>:
void software_isr(void) // AudioStream::update_all()
{
	AudioStream *p;

#if defined(KINETISK)
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
    e8c4:	ldr	r1, [pc, #104]	; (e930 <software_isr+0x6c>)
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;
    e8c6:	ldr	r2, [pc, #108]	; (e934 <software_isr+0x70>)
	uint32_t totalcycles = ARM_DWT_CYCCNT;
#elif defined(KINETISL)
	uint32_t totalcycles = micros();
#endif
	//digitalWriteFast(2, HIGH);
	for (p = AudioStream::first_update; p; p = p->next_update) {
    e8c8:	ldr	r0, [pc, #108]	; (e938 <software_isr+0x74>)
}

AudioStream * AudioStream::first_update = NULL;

void software_isr(void) // AudioStream::update_all()
{
    e8ca:	push	{r3, r4, r5, r6, r7, lr}
	AudioStream *p;

#if defined(KINETISK)
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
    e8cc:	ldr	r3, [r1, #0]
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;
	uint32_t totalcycles = ARM_DWT_CYCCNT;
    e8ce:	ldr	r5, [pc, #108]	; (e93c <software_isr+0x78>)
#elif defined(KINETISL)
	uint32_t totalcycles = micros();
#endif
	//digitalWriteFast(2, HIGH);
	for (p = AudioStream::first_update; p; p = p->next_update) {
    e8d0:	ldr	r4, [r0, #0]
void software_isr(void) // AudioStream::update_all()
{
	AudioStream *p;

#if defined(KINETISK)
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
    e8d2:	orr.w	r3, r3, #16777216	; 0x1000000
    e8d6:	str	r3, [r1, #0]
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;
    e8d8:	ldr	r3, [r2, #0]
    e8da:	orr.w	r3, r3, #1
    e8de:	str	r3, [r2, #0]
	uint32_t totalcycles = ARM_DWT_CYCCNT;
    e8e0:	ldr	r6, [r5, #0]
#elif defined(KINETISL)
	uint32_t totalcycles = micros();
#endif
	//digitalWriteFast(2, HIGH);
	for (p = AudioStream::first_update; p; p = p->next_update) {
    e8e2:	cbnz	r4, e8ea <software_isr+0x26>
    e8e4:	b.n	e912 <software_isr+0x4e>
    e8e6:	ldr	r4, [r4, #20]
    e8e8:	cbz	r4, e912 <software_isr+0x4e>
		if (p->active) {
    e8ea:	ldrb	r3, [r4, #8]
    e8ec:	cmp	r3, #0
    e8ee:	beq.n	e8e6 <software_isr+0x22>
			uint32_t cycles = ARM_DWT_CYCCNT;
			p->update();
    e8f0:	ldr	r3, [r4, #0]
	uint32_t totalcycles = micros();
#endif
	//digitalWriteFast(2, HIGH);
	for (p = AudioStream::first_update; p; p = p->next_update) {
		if (p->active) {
			uint32_t cycles = ARM_DWT_CYCCNT;
    e8f2:	ldr	r7, [r5, #0]
			p->update();
    e8f4:	ldr	r3, [r3, #0]
    e8f6:	mov	r0, r4
    e8f8:	blx	r3
			// TODO: traverse inputQueueArray and release
			// any input blocks that weren't consumed?
			cycles = (ARM_DWT_CYCCNT - cycles) >> 4;
    e8fa:	ldr	r3, [r5, #0]
			p->cpu_cycles = cycles;
			if (cycles > p->cpu_cycles_max) p->cpu_cycles_max = cycles;
    e8fc:	ldrh	r1, [r4, #6]
		if (p->active) {
			uint32_t cycles = ARM_DWT_CYCCNT;
			p->update();
			// TODO: traverse inputQueueArray and release
			// any input blocks that weren't consumed?
			cycles = (ARM_DWT_CYCCNT - cycles) >> 4;
    e8fe:	subs	r3, r3, r7
    e900:	lsrs	r3, r3, #4
			p->cpu_cycles = cycles;
    e902:	uxth	r2, r3
			if (cycles > p->cpu_cycles_max) p->cpu_cycles_max = cycles;
    e904:	cmp	r3, r1
			uint32_t cycles = ARM_DWT_CYCCNT;
			p->update();
			// TODO: traverse inputQueueArray and release
			// any input blocks that weren't consumed?
			cycles = (ARM_DWT_CYCCNT - cycles) >> 4;
			p->cpu_cycles = cycles;
    e906:	strh	r2, [r4, #4]
			if (cycles > p->cpu_cycles_max) p->cpu_cycles_max = cycles;
    e908:	it	hi
    e90a:	strhhi	r2, [r4, #6]
	uint32_t totalcycles = ARM_DWT_CYCCNT;
#elif defined(KINETISL)
	uint32_t totalcycles = micros();
#endif
	//digitalWriteFast(2, HIGH);
	for (p = AudioStream::first_update; p; p = p->next_update) {
    e90c:	ldr	r4, [r4, #20]
    e90e:	cmp	r4, #0
    e910:	bne.n	e8ea <software_isr+0x26>
			if (cycles > p->cpu_cycles_max) p->cpu_cycles_max = cycles;
		}
	}
	//digitalWriteFast(2, LOW);
#if defined(KINETISK)
	totalcycles = (ARM_DWT_CYCCNT - totalcycles) >> 4;
    e912:	ldr	r3, [pc, #40]	; (e93c <software_isr+0x78>)
#elif defined(KINETISL)
	totalcycles = micros() - totalcycles;
#endif
	AudioStream::cpu_cycles_total = totalcycles;
	if (totalcycles > AudioStream::cpu_cycles_total_max)
    e914:	ldr	r2, [pc, #40]	; (e940 <software_isr+0x7c>)
			if (cycles > p->cpu_cycles_max) p->cpu_cycles_max = cycles;
		}
	}
	//digitalWriteFast(2, LOW);
#if defined(KINETISK)
	totalcycles = (ARM_DWT_CYCCNT - totalcycles) >> 4;
    e916:	ldr	r3, [r3, #0]
#elif defined(KINETISL)
	totalcycles = micros() - totalcycles;
#endif
	AudioStream::cpu_cycles_total = totalcycles;
	if (totalcycles > AudioStream::cpu_cycles_total_max)
    e918:	ldrh	r0, [r2, #0]
#if defined(KINETISK)
	totalcycles = (ARM_DWT_CYCCNT - totalcycles) >> 4;
#elif defined(KINETISL)
	totalcycles = micros() - totalcycles;
#endif
	AudioStream::cpu_cycles_total = totalcycles;
    e91a:	ldr	r4, [pc, #40]	; (e944 <software_isr+0x80>)
			if (cycles > p->cpu_cycles_max) p->cpu_cycles_max = cycles;
		}
	}
	//digitalWriteFast(2, LOW);
#if defined(KINETISK)
	totalcycles = (ARM_DWT_CYCCNT - totalcycles) >> 4;
    e91c:	subs	r3, r3, r6
    e91e:	lsrs	r3, r3, #4
#elif defined(KINETISL)
	totalcycles = micros() - totalcycles;
#endif
	AudioStream::cpu_cycles_total = totalcycles;
    e920:	uxth	r1, r3
	if (totalcycles > AudioStream::cpu_cycles_total_max)
    e922:	cmp	r3, r0
#if defined(KINETISK)
	totalcycles = (ARM_DWT_CYCCNT - totalcycles) >> 4;
#elif defined(KINETISL)
	totalcycles = micros() - totalcycles;
#endif
	AudioStream::cpu_cycles_total = totalcycles;
    e924:	strh	r1, [r4, #0]
	if (totalcycles > AudioStream::cpu_cycles_total_max)
    e926:	bls.n	e92c <software_isr+0x68>
		AudioStream::cpu_cycles_total_max = totalcycles;
    e928:	strh	r1, [r2, #0]
    e92a:	pop	{r3, r4, r5, r6, r7, pc}
    e92c:	pop	{r3, r4, r5, r6, r7, pc}
    e92e:	nop
    e930:	.word	0xe000edfc
    e934:	.word	0xe0001000
    e938:	.word	0x200031cc
    e93c:	.word	0xe0001004
    e940:	.word	0x200031d0
    e944:	.word	0x200031d2

0000e948 <serialEvent()>:

#include <Arduino.h>
void serialEvent() __attribute__((weak));
void serialEvent() {
    e948:	bx	lr
    e94a:	nop

0000e94c <operator new(unsigned int)>:
    e94c:	b.w	ff44 <malloc>

0000e950 <operator delete(void*, unsigned int)>:
    e950:	b.w	ff54 <free>

0000e954 <fmodf>:
    e954:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    e958:	sub	sp, #44	; 0x2c
    e95a:	mov	r6, r0
    e95c:	mov	r4, r1
    e95e:	bl	ea10 <__ieee754_fmodf>
    e962:	ldr	r3, [pc, #164]	; (ea08 <fmodf+0xb4>)
    e964:	ldrsb.w	r7, [r3]
    e968:	adds	r3, r7, #1
    e96a:	mov	r5, r0
    e96c:	beq.n	e9d2 <fmodf+0x7e>
    e96e:	mov	r1, r4
    e970:	mov	r0, r4
    e972:	bl	fa8c <__aeabi_fcmpun>
    e976:	cbnz	r0, e9d2 <fmodf+0x7e>
    e978:	mov	r1, r6
    e97a:	mov	r0, r6
    e97c:	bl	fa8c <__aeabi_fcmpun>
    e980:	mov	r8, r0
    e982:	cbnz	r0, e9d2 <fmodf+0x7e>
    e984:	movs	r1, #0
    e986:	mov	r0, r4
    e988:	bl	fa28 <__aeabi_fcmpeq>
    e98c:	cbz	r0, e9d2 <fmodf+0x7e>
    e98e:	ldr	r3, [pc, #124]	; (ea0c <fmodf+0xb8>)
    e990:	str.w	r8, [sp, #32]
    e994:	movs	r2, #1
    e996:	mov	r0, r6
    e998:	stmia.w	sp, {r2, r3}
    e99c:	bl	edec <__aeabi_f2d>
    e9a0:	mov	r8, r0
    e9a2:	mov	r9, r1
    e9a4:	mov	r0, r4
    e9a6:	strd	r8, r9, [sp, #8]
    e9aa:	bl	edec <__aeabi_f2d>
    e9ae:	strd	r0, r1, [sp, #16]
    e9b2:	cbnz	r7, e9da <fmodf+0x86>
    e9b4:	strd	r8, r9, [sp, #24]
    e9b8:	mov	r0, sp
    e9ba:	bl	eb14 <matherr>
    e9be:	cbz	r0, e9ee <fmodf+0x9a>
    e9c0:	ldr	r3, [sp, #32]
    e9c2:	cbnz	r3, e9fc <fmodf+0xa8>
    e9c4:	ldrd	r0, r1, [sp, #24]
    e9c8:	bl	f444 <__aeabi_d2f>
    e9cc:	add	sp, #44	; 0x2c
    e9ce:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    e9d2:	mov	r0, r5
    e9d4:	add	sp, #44	; 0x2c
    e9d6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    e9da:	movs	r2, #0
    e9dc:	movs	r3, #0
    e9de:	mov	r0, r2
    e9e0:	mov	r1, r3
    e9e2:	bl	f0e8 <__aeabi_ddiv>
    e9e6:	cmp	r7, #2
    e9e8:	strd	r0, r1, [sp, #24]
    e9ec:	bne.n	e9b8 <fmodf+0x64>
    e9ee:	bl	fee8 <__errno>
    e9f2:	movs	r3, #33	; 0x21
    e9f4:	str	r3, [r0, #0]
    e9f6:	ldr	r3, [sp, #32]
    e9f8:	cmp	r3, #0
    e9fa:	beq.n	e9c4 <fmodf+0x70>
    e9fc:	bl	fee8 <__errno>
    ea00:	ldr	r3, [sp, #32]
    ea02:	str	r3, [r0, #0]
    ea04:	b.n	e9c4 <fmodf+0x70>
    ea06:	nop
    ea08:	.word	0x1fff8d61
    ea0c:	.word	0x00014894

0000ea10 <__ieee754_fmodf>:
    ea10:	push	{r4, r5, r6, lr}
    ea12:	bics.w	r6, r1, #2147483648	; 0x80000000
    ea16:	beq.n	ea8a <__ieee754_fmodf+0x7a>
    ea18:	mov	r2, r0
    ea1a:	and.w	r4, r0, #2147483648	; 0x80000000
    ea1e:	eors	r2, r4
    ea20:	cmp.w	r2, #2139095040	; 0x7f800000
    ea24:	bge.n	ea8a <__ieee754_fmodf+0x7a>
    ea26:	cmp.w	r6, #2139095040	; 0x7f800000
    ea2a:	bgt.n	ea8a <__ieee754_fmodf+0x7a>
    ea2c:	cmp	r2, r6
    ea2e:	blt.n	ea96 <__ieee754_fmodf+0x86>
    ea30:	beq.n	eaa0 <__ieee754_fmodf+0x90>
    ea32:	cmp.w	r2, #8388608	; 0x800000
    ea36:	mov	r3, r1
    ea38:	bge.n	eaaa <__ieee754_fmodf+0x9a>
    ea3a:	lsls	r0, r2, #8
    ea3c:	cmp	r0, #0
    ea3e:	mvn.w	r1, #125	; 0x7d
    ea42:	ble.n	ea4e <__ieee754_fmodf+0x3e>
    ea44:	lsls	r0, r0, #1
    ea46:	cmp	r0, #0
    ea48:	add.w	r1, r1, #4294967295
    ea4c:	bgt.n	ea44 <__ieee754_fmodf+0x34>
    ea4e:	cmp.w	r6, #8388608	; 0x800000
    ea52:	blt.n	eac6 <__ieee754_fmodf+0xb6>
    ea54:	asrs	r5, r6, #23
    ea56:	subs	r5, #127	; 0x7f
    ea58:	cmn.w	r1, #126	; 0x7e
    ea5c:	blt.n	eabc <__ieee754_fmodf+0xac>
    ea5e:	ubfx	r2, r2, #0, #23
    ea62:	orr.w	r2, r2, #8388608	; 0x800000
    ea66:	cmn.w	r5, #126	; 0x7e
    ea6a:	blt.n	eab0 <__ieee754_fmodf+0xa0>
    ea6c:	ubfx	r3, r3, #0, #23
    ea70:	orr.w	r3, r3, #8388608	; 0x800000
    ea74:	subs	r1, r1, r5
    ea76:	b.n	ea7e <__ieee754_fmodf+0x6e>
    ea78:	beq.n	eaa0 <__ieee754_fmodf+0x90>
    ea7a:	lsls	r2, r0, #1
    ea7c:	subs	r1, #1
    ea7e:	subs	r0, r2, r3
    ea80:	cbz	r1, ea98 <__ieee754_fmodf+0x88>
    ea82:	cmp	r0, #0
    ea84:	bge.n	ea78 <__ieee754_fmodf+0x68>
    ea86:	lsls	r2, r2, #1
    ea88:	b.n	ea7c <__ieee754_fmodf+0x6c>
    ea8a:	bl	f700 <__aeabi_fmul>
    ea8e:	mov	r1, r0
    ea90:	bl	f868 <__aeabi_fdiv>
    ea94:	pop	{r4, r5, r6, pc}
    ea96:	pop	{r4, r5, r6, pc}
    ea98:	subs	r3, r2, r3
    ea9a:	it	mi
    ea9c:	movmi	r3, r2
    ea9e:	cbnz	r3, ead6 <__ieee754_fmodf+0xc6>
    eaa0:	lsrs	r0, r4, #31
    eaa2:	ldr	r2, [pc, #104]	; (eb0c <__ieee754_fmodf+0xfc>)
    eaa4:	ldr.w	r0, [r2, r0, lsl #2]
    eaa8:	pop	{r4, r5, r6, pc}
    eaaa:	asrs	r1, r2, #23
    eaac:	subs	r1, #127	; 0x7f
    eaae:	b.n	ea4e <__ieee754_fmodf+0x3e>
    eab0:	mvn.w	r3, #125	; 0x7d
    eab4:	subs	r3, r3, r5
    eab6:	lsl.w	r3, r6, r3
    eaba:	b.n	ea74 <__ieee754_fmodf+0x64>
    eabc:	mvn.w	r0, #125	; 0x7d
    eac0:	subs	r0, r0, r1
    eac2:	lsls	r2, r0
    eac4:	b.n	ea66 <__ieee754_fmodf+0x56>
    eac6:	lsls	r0, r6, #8
    eac8:	mvn.w	r5, #125	; 0x7d
    eacc:	lsls	r0, r0, #1
    eace:	add.w	r5, r5, #4294967295
    ead2:	bpl.n	eacc <__ieee754_fmodf+0xbc>
    ead4:	b.n	ea58 <__ieee754_fmodf+0x48>
    ead6:	ldr	r2, [pc, #56]	; (eb10 <__ieee754_fmodf+0x100>)
    ead8:	cmp	r3, r2
    eada:	bgt.n	eae6 <__ieee754_fmodf+0xd6>
    eadc:	lsls	r3, r3, #1
    eade:	cmp	r3, r2
    eae0:	add.w	r5, r5, #4294967295
    eae4:	ble.n	eadc <__ieee754_fmodf+0xcc>
    eae6:	cmn.w	r5, #126	; 0x7e
    eaea:	bge.n	eafa <__ieee754_fmodf+0xea>
    eaec:	mvn.w	r0, #125	; 0x7d
    eaf0:	subs	r0, r0, r5
    eaf2:	asrs	r3, r0
    eaf4:	orr.w	r0, r3, r4
    eaf8:	pop	{r4, r5, r6, pc}
    eafa:	sub.w	r3, r3, #8388608	; 0x800000
    eafe:	orrs	r3, r4
    eb00:	add.w	r0, r5, #127	; 0x7f
    eb04:	orr.w	r0, r3, r0, lsl #23
    eb08:	pop	{r4, r5, r6, pc}
    eb0a:	nop
    eb0c:	.word	0x0001489c
    eb10:	.word	0x007fffff

0000eb14 <matherr>:
    eb14:	movs	r0, #0
    eb16:	bx	lr

0000eb18 <__aeabi_atexit>:
    eb18:	mov	r3, r1
    eb1a:	mov	r1, r0
    eb1c:	mov	r0, r3
    eb1e:	b.w	febc <__cxa_atexit>
    eb22:	nop

0000eb24 <__aeabi_drsub>:
    eb24:	eor.w	r1, r1, #2147483648	; 0x80000000
    eb28:	b.n	eb30 <__adddf3>
    eb2a:	nop

0000eb2c <__aeabi_dsub>:
    eb2c:	eor.w	r3, r3, #2147483648	; 0x80000000

0000eb30 <__adddf3>:
    eb30:	push	{r4, r5, lr}
    eb32:	mov.w	r4, r1, lsl #1
    eb36:	mov.w	r5, r3, lsl #1
    eb3a:	teq	r4, r5
    eb3e:	it	eq
    eb40:	teqeq	r0, r2
    eb44:	itttt	ne
    eb46:	orrsne.w	ip, r4, r0
    eb4a:	orrsne.w	ip, r5, r2
    eb4e:	mvnsne.w	ip, r4, asr #21
    eb52:	mvnsne.w	ip, r5, asr #21
    eb56:	beq.w	ed1e <__adddf3+0x1ee>
    eb5a:	mov.w	r4, r4, lsr #21
    eb5e:	rsbs	r5, r4, r5, lsr #21
    eb62:	it	lt
    eb64:	neglt	r5, r5
    eb66:	ble.n	eb82 <__adddf3+0x52>
    eb68:	add	r4, r5
    eb6a:	eor.w	r2, r0, r2
    eb6e:	eor.w	r3, r1, r3
    eb72:	eor.w	r0, r2, r0
    eb76:	eor.w	r1, r3, r1
    eb7a:	eor.w	r2, r0, r2
    eb7e:	eor.w	r3, r1, r3
    eb82:	cmp	r5, #54	; 0x36
    eb84:	it	hi
    eb86:	pophi	{r4, r5, pc}
    eb88:	tst.w	r1, #2147483648	; 0x80000000
    eb8c:	mov.w	r1, r1, lsl #12
    eb90:	mov.w	ip, #1048576	; 0x100000
    eb94:	orr.w	r1, ip, r1, lsr #12
    eb98:	beq.n	eba0 <__adddf3+0x70>
    eb9a:	negs	r0, r0
    eb9c:	sbc.w	r1, r1, r1, lsl #1
    eba0:	tst.w	r3, #2147483648	; 0x80000000
    eba4:	mov.w	r3, r3, lsl #12
    eba8:	orr.w	r3, ip, r3, lsr #12
    ebac:	beq.n	ebb4 <__adddf3+0x84>
    ebae:	negs	r2, r2
    ebb0:	sbc.w	r3, r3, r3, lsl #1
    ebb4:	teq	r4, r5
    ebb8:	beq.w	ed0a <__adddf3+0x1da>
    ebbc:	sub.w	r4, r4, #1
    ebc0:	rsbs	lr, r5, #32
    ebc4:	blt.n	ebe2 <__adddf3+0xb2>
    ebc6:	lsl.w	ip, r2, lr
    ebca:	lsr.w	r2, r2, r5
    ebce:	adds	r0, r0, r2
    ebd0:	adc.w	r1, r1, #0
    ebd4:	lsl.w	r2, r3, lr
    ebd8:	adds	r0, r0, r2
    ebda:	asr.w	r3, r3, r5
    ebde:	adcs	r1, r3
    ebe0:	b.n	ec00 <__adddf3+0xd0>
    ebe2:	sub.w	r5, r5, #32
    ebe6:	add.w	lr, lr, #32
    ebea:	cmp	r2, #1
    ebec:	lsl.w	ip, r3, lr
    ebf0:	it	cs
    ebf2:	orrcs.w	ip, ip, #2
    ebf6:	asr.w	r3, r3, r5
    ebfa:	adds	r0, r0, r3
    ebfc:	adcs.w	r1, r1, r3, asr #31
    ec00:	and.w	r5, r1, #2147483648	; 0x80000000
    ec04:	bpl.n	ec16 <__adddf3+0xe6>
    ec06:	mov.w	lr, #0
    ec0a:	rsbs	ip, ip, #0
    ec0e:	sbcs.w	r0, lr, r0
    ec12:	sbc.w	r1, lr, r1
    ec16:	cmp.w	r1, #1048576	; 0x100000
    ec1a:	bcc.n	ec54 <__adddf3+0x124>
    ec1c:	cmp.w	r1, #2097152	; 0x200000
    ec20:	bcc.n	ec3c <__adddf3+0x10c>
    ec22:	lsrs	r1, r1, #1
    ec24:	movs.w	r0, r0, rrx
    ec28:	mov.w	ip, ip, rrx
    ec2c:	add.w	r4, r4, #1
    ec30:	mov.w	r2, r4, lsl #21
    ec34:	cmn.w	r2, #4194304	; 0x400000
    ec38:	bcs.w	ed70 <__adddf3+0x240>
    ec3c:	cmp.w	ip, #2147483648	; 0x80000000
    ec40:	it	eq
    ec42:	movseq.w	ip, r0, lsr #1
    ec46:	adcs.w	r0, r0, #0
    ec4a:	adc.w	r1, r1, r4, lsl #20
    ec4e:	orr.w	r1, r1, r5
    ec52:	pop	{r4, r5, pc}
    ec54:	movs.w	ip, ip, lsl #1
    ec58:	adcs	r0, r0
    ec5a:	adc.w	r1, r1, r1
    ec5e:	tst.w	r1, #1048576	; 0x100000
    ec62:	sub.w	r4, r4, #1
    ec66:	bne.n	ec3c <__adddf3+0x10c>
    ec68:	teq	r1, #0
    ec6c:	itt	eq
    ec6e:	moveq	r1, r0
    ec70:	moveq	r0, #0
    ec72:	clz	r3, r1
    ec76:	it	eq
    ec78:	addeq	r3, #32
    ec7a:	sub.w	r3, r3, #11
    ec7e:	subs.w	r2, r3, #32
    ec82:	bge.n	ec9e <__adddf3+0x16e>
    ec84:	adds	r2, #12
    ec86:	ble.n	ec9a <__adddf3+0x16a>
    ec88:	add.w	ip, r2, #20
    ec8c:	rsb	r2, r2, #12
    ec90:	lsl.w	r0, r1, ip
    ec94:	lsr.w	r1, r1, r2
    ec98:	b.n	ecb4 <__adddf3+0x184>
    ec9a:	add.w	r2, r2, #20
    ec9e:	it	le
    eca0:	rsble	ip, r2, #32
    eca4:	lsl.w	r1, r1, r2
    eca8:	lsr.w	ip, r0, ip
    ecac:	itt	le
    ecae:	orrle.w	r1, r1, ip
    ecb2:	lslle	r0, r2
    ecb4:	subs	r4, r4, r3
    ecb6:	ittt	ge
    ecb8:	addge.w	r1, r1, r4, lsl #20
    ecbc:	orrge	r1, r5
    ecbe:	popge	{r4, r5, pc}
    ecc0:	mvn.w	r4, r4
    ecc4:	subs	r4, #31
    ecc6:	bge.n	ed02 <__adddf3+0x1d2>
    ecc8:	adds	r4, #12
    ecca:	bgt.n	ecea <__adddf3+0x1ba>
    eccc:	add.w	r4, r4, #20
    ecd0:	rsb	r2, r4, #32
    ecd4:	lsr.w	r0, r0, r4
    ecd8:	lsl.w	r3, r1, r2
    ecdc:	orr.w	r0, r0, r3
    ece0:	lsr.w	r3, r1, r4
    ece4:	orr.w	r1, r5, r3
    ece8:	pop	{r4, r5, pc}
    ecea:	rsb	r4, r4, #12
    ecee:	rsb	r2, r4, #32
    ecf2:	lsr.w	r0, r0, r2
    ecf6:	lsl.w	r3, r1, r4
    ecfa:	orr.w	r0, r0, r3
    ecfe:	mov	r1, r5
    ed00:	pop	{r4, r5, pc}
    ed02:	lsr.w	r0, r1, r4
    ed06:	mov	r1, r5
    ed08:	pop	{r4, r5, pc}
    ed0a:	teq	r4, #0
    ed0e:	eor.w	r3, r3, #1048576	; 0x100000
    ed12:	itte	eq
    ed14:	eoreq.w	r1, r1, #1048576	; 0x100000
    ed18:	addeq	r4, #1
    ed1a:	subne	r5, #1
    ed1c:	b.n	ebbc <__adddf3+0x8c>
    ed1e:	mvns.w	ip, r4, asr #21
    ed22:	it	ne
    ed24:	mvnsne.w	ip, r5, asr #21
    ed28:	beq.n	ed7e <__adddf3+0x24e>
    ed2a:	teq	r4, r5
    ed2e:	it	eq
    ed30:	teqeq	r0, r2
    ed34:	beq.n	ed42 <__adddf3+0x212>
    ed36:	orrs.w	ip, r4, r0
    ed3a:	itt	eq
    ed3c:	moveq	r1, r3
    ed3e:	moveq	r0, r2
    ed40:	pop	{r4, r5, pc}
    ed42:	teq	r1, r3
    ed46:	ittt	ne
    ed48:	movne	r1, #0
    ed4a:	movne	r0, #0
    ed4c:	popne	{r4, r5, pc}
    ed4e:	movs.w	ip, r4, lsr #21
    ed52:	bne.n	ed60 <__adddf3+0x230>
    ed54:	lsls	r0, r0, #1
    ed56:	adcs	r1, r1
    ed58:	it	cs
    ed5a:	orrcs.w	r1, r1, #2147483648	; 0x80000000
    ed5e:	pop	{r4, r5, pc}
    ed60:	adds.w	r4, r4, #4194304	; 0x400000
    ed64:	itt	cc
    ed66:	addcc.w	r1, r1, #1048576	; 0x100000
    ed6a:	popcc	{r4, r5, pc}
    ed6c:	and.w	r5, r1, #2147483648	; 0x80000000
    ed70:	orr.w	r1, r5, #2130706432	; 0x7f000000
    ed74:	orr.w	r1, r1, #15728640	; 0xf00000
    ed78:	mov.w	r0, #0
    ed7c:	pop	{r4, r5, pc}
    ed7e:	mvns.w	ip, r4, asr #21
    ed82:	itte	ne
    ed84:	movne	r1, r3
    ed86:	movne	r0, r2
    ed88:	mvnseq.w	ip, r5, asr #21
    ed8c:	itt	ne
    ed8e:	movne	r3, r1
    ed90:	movne	r2, r0
    ed92:	orrs.w	r4, r0, r1, lsl #12
    ed96:	itte	eq
    ed98:	orrseq.w	r5, r2, r3, lsl #12
    ed9c:	teqeq	r1, r3
    eda0:	orrne.w	r1, r1, #524288	; 0x80000
    eda4:	pop	{r4, r5, pc}
    eda6:	nop

0000eda8 <__aeabi_ui2d>:
    eda8:	teq	r0, #0
    edac:	itt	eq
    edae:	moveq	r1, #0
    edb0:	bxeq	lr
    edb2:	push	{r4, r5, lr}
    edb4:	mov.w	r4, #1024	; 0x400
    edb8:	add.w	r4, r4, #50	; 0x32
    edbc:	mov.w	r5, #0
    edc0:	mov.w	r1, #0
    edc4:	b.n	ec68 <__adddf3+0x138>
    edc6:	nop

0000edc8 <__aeabi_i2d>:
    edc8:	teq	r0, #0
    edcc:	itt	eq
    edce:	moveq	r1, #0
    edd0:	bxeq	lr
    edd2:	push	{r4, r5, lr}
    edd4:	mov.w	r4, #1024	; 0x400
    edd8:	add.w	r4, r4, #50	; 0x32
    eddc:	ands.w	r5, r0, #2147483648	; 0x80000000
    ede0:	it	mi
    ede2:	negmi	r0, r0
    ede4:	mov.w	r1, #0
    ede8:	b.n	ec68 <__adddf3+0x138>
    edea:	nop

0000edec <__aeabi_f2d>:
    edec:	lsls	r2, r0, #1
    edee:	mov.w	r1, r2, asr #3
    edf2:	mov.w	r1, r1, rrx
    edf6:	mov.w	r0, r2, lsl #28
    edfa:	itttt	ne
    edfc:	andsne.w	r3, r2, #4278190080	; 0xff000000
    ee00:	teqne	r3, #4278190080	; 0xff000000
    ee04:	eorne.w	r1, r1, #939524096	; 0x38000000
    ee08:	bxne	lr
    ee0a:	teq	r2, #0
    ee0e:	ite	ne
    ee10:	teqne	r3, #4278190080	; 0xff000000
    ee14:	bxeq	lr
    ee16:	push	{r4, r5, lr}
    ee18:	mov.w	r4, #896	; 0x380
    ee1c:	and.w	r5, r1, #2147483648	; 0x80000000
    ee20:	bic.w	r1, r1, #2147483648	; 0x80000000
    ee24:	b.n	ec68 <__adddf3+0x138>
    ee26:	nop

0000ee28 <__aeabi_ul2d>:
    ee28:	orrs.w	r2, r0, r1
    ee2c:	it	eq
    ee2e:	bxeq	lr
    ee30:	push	{r4, r5, lr}
    ee32:	mov.w	r5, #0
    ee36:	b.n	ee4e <__aeabi_l2d+0x16>

0000ee38 <__aeabi_l2d>:
    ee38:	orrs.w	r2, r0, r1
    ee3c:	it	eq
    ee3e:	bxeq	lr
    ee40:	push	{r4, r5, lr}
    ee42:	ands.w	r5, r1, #2147483648	; 0x80000000
    ee46:	bpl.n	ee4e <__aeabi_l2d+0x16>
    ee48:	negs	r0, r0
    ee4a:	sbc.w	r1, r1, r1, lsl #1
    ee4e:	mov.w	r4, #1024	; 0x400
    ee52:	add.w	r4, r4, #50	; 0x32
    ee56:	movs.w	ip, r1, lsr #22
    ee5a:	beq.w	ec16 <__adddf3+0xe6>
    ee5e:	mov.w	r2, #3
    ee62:	movs.w	ip, ip, lsr #3
    ee66:	it	ne
    ee68:	addne	r2, #3
    ee6a:	movs.w	ip, ip, lsr #3
    ee6e:	it	ne
    ee70:	addne	r2, #3
    ee72:	add.w	r2, r2, ip, lsr #3
    ee76:	rsb	r3, r2, #32
    ee7a:	lsl.w	ip, r0, r3
    ee7e:	lsr.w	r0, r0, r2
    ee82:	lsl.w	lr, r1, r3
    ee86:	orr.w	r0, r0, lr
    ee8a:	lsr.w	r1, r1, r2
    ee8e:	add	r4, r2
    ee90:	b.n	ec16 <__adddf3+0xe6>
    ee92:	nop

0000ee94 <__aeabi_dmul>:
    ee94:	push	{r4, r5, r6, lr}
    ee96:	mov.w	ip, #255	; 0xff
    ee9a:	orr.w	ip, ip, #1792	; 0x700
    ee9e:	ands.w	r4, ip, r1, lsr #20
    eea2:	ittte	ne
    eea4:	andsne.w	r5, ip, r3, lsr #20
    eea8:	teqne	r4, ip
    eeac:	teqne	r5, ip
    eeb0:	bleq	f070 <__aeabi_dmul+0x1dc>
    eeb4:	add	r4, r5
    eeb6:	eor.w	r6, r1, r3
    eeba:	bic.w	r1, r1, ip, lsl #21
    eebe:	bic.w	r3, r3, ip, lsl #21
    eec2:	orrs.w	r5, r0, r1, lsl #12
    eec6:	it	ne
    eec8:	orrsne.w	r5, r2, r3, lsl #12
    eecc:	orr.w	r1, r1, #1048576	; 0x100000
    eed0:	orr.w	r3, r3, #1048576	; 0x100000
    eed4:	beq.n	ef48 <__aeabi_dmul+0xb4>
    eed6:	umull	ip, lr, r0, r2
    eeda:	mov.w	r5, #0
    eede:	umlal	lr, r5, r1, r2
    eee2:	and.w	r2, r6, #2147483648	; 0x80000000
    eee6:	umlal	lr, r5, r0, r3
    eeea:	mov.w	r6, #0
    eeee:	umlal	r5, r6, r1, r3
    eef2:	teq	ip, #0
    eef6:	it	ne
    eef8:	orrne.w	lr, lr, #1
    eefc:	sub.w	r4, r4, #255	; 0xff
    ef00:	cmp.w	r6, #512	; 0x200
    ef04:	sbc.w	r4, r4, #768	; 0x300
    ef08:	bcs.n	ef14 <__aeabi_dmul+0x80>
    ef0a:	movs.w	lr, lr, lsl #1
    ef0e:	adcs	r5, r5
    ef10:	adc.w	r6, r6, r6
    ef14:	orr.w	r1, r2, r6, lsl #11
    ef18:	orr.w	r1, r1, r5, lsr #21
    ef1c:	mov.w	r0, r5, lsl #11
    ef20:	orr.w	r0, r0, lr, lsr #21
    ef24:	mov.w	lr, lr, lsl #11
    ef28:	subs.w	ip, r4, #253	; 0xfd
    ef2c:	it	hi
    ef2e:	cmphi.w	ip, #1792	; 0x700
    ef32:	bhi.n	ef72 <__aeabi_dmul+0xde>
    ef34:	cmp.w	lr, #2147483648	; 0x80000000
    ef38:	it	eq
    ef3a:	movseq.w	lr, r0, lsr #1
    ef3e:	adcs.w	r0, r0, #0
    ef42:	adc.w	r1, r1, r4, lsl #20
    ef46:	pop	{r4, r5, r6, pc}
    ef48:	and.w	r6, r6, #2147483648	; 0x80000000
    ef4c:	orr.w	r1, r6, r1
    ef50:	orr.w	r0, r0, r2
    ef54:	eor.w	r1, r1, r3
    ef58:	subs.w	r4, r4, ip, lsr #1
    ef5c:	ittt	gt
    ef5e:	rsbsgt	r5, r4, ip
    ef62:	orrgt.w	r1, r1, r4, lsl #20
    ef66:	popgt	{r4, r5, r6, pc}
    ef68:	orr.w	r1, r1, #1048576	; 0x100000
    ef6c:	mov.w	lr, #0
    ef70:	subs	r4, #1
    ef72:	bgt.w	f0cc <__aeabi_dmul+0x238>
    ef76:	cmn.w	r4, #54	; 0x36
    ef7a:	ittt	le
    ef7c:	movle	r0, #0
    ef7e:	andle.w	r1, r1, #2147483648	; 0x80000000
    ef82:	pople	{r4, r5, r6, pc}
    ef84:	rsb	r4, r4, #0
    ef88:	subs	r4, #32
    ef8a:	bge.n	eff8 <__aeabi_dmul+0x164>
    ef8c:	adds	r4, #12
    ef8e:	bgt.n	efc8 <__aeabi_dmul+0x134>
    ef90:	add.w	r4, r4, #20
    ef94:	rsb	r5, r4, #32
    ef98:	lsl.w	r3, r0, r5
    ef9c:	lsr.w	r0, r0, r4
    efa0:	lsl.w	r2, r1, r5
    efa4:	orr.w	r0, r0, r2
    efa8:	and.w	r2, r1, #2147483648	; 0x80000000
    efac:	bic.w	r1, r1, #2147483648	; 0x80000000
    efb0:	adds.w	r0, r0, r3, lsr #31
    efb4:	lsr.w	r6, r1, r4
    efb8:	adc.w	r1, r2, r6
    efbc:	orrs.w	lr, lr, r3, lsl #1
    efc0:	it	eq
    efc2:	biceq.w	r0, r0, r3, lsr #31
    efc6:	pop	{r4, r5, r6, pc}
    efc8:	rsb	r4, r4, #12
    efcc:	rsb	r5, r4, #32
    efd0:	lsl.w	r3, r0, r4
    efd4:	lsr.w	r0, r0, r5
    efd8:	lsl.w	r2, r1, r4
    efdc:	orr.w	r0, r0, r2
    efe0:	and.w	r1, r1, #2147483648	; 0x80000000
    efe4:	adds.w	r0, r0, r3, lsr #31
    efe8:	adc.w	r1, r1, #0
    efec:	orrs.w	lr, lr, r3, lsl #1
    eff0:	it	eq
    eff2:	biceq.w	r0, r0, r3, lsr #31
    eff6:	pop	{r4, r5, r6, pc}
    eff8:	rsb	r5, r4, #32
    effc:	lsl.w	r2, r0, r5
    f000:	orr.w	lr, lr, r2
    f004:	lsr.w	r3, r0, r4
    f008:	lsl.w	r2, r1, r5
    f00c:	orr.w	r3, r3, r2
    f010:	lsr.w	r0, r1, r4
    f014:	and.w	r1, r1, #2147483648	; 0x80000000
    f018:	lsr.w	r2, r1, r4
    f01c:	bic.w	r0, r0, r2
    f020:	add.w	r0, r0, r3, lsr #31
    f024:	orrs.w	lr, lr, r3, lsl #1
    f028:	it	eq
    f02a:	biceq.w	r0, r0, r3, lsr #31
    f02e:	pop	{r4, r5, r6, pc}
    f030:	teq	r4, #0
    f034:	bne.n	f056 <__aeabi_dmul+0x1c2>
    f036:	and.w	r6, r1, #2147483648	; 0x80000000
    f03a:	lsls	r0, r0, #1
    f03c:	adc.w	r1, r1, r1
    f040:	tst.w	r1, #1048576	; 0x100000
    f044:	it	eq
    f046:	subeq	r4, #1
    f048:	beq.n	f03a <__aeabi_dmul+0x1a6>
    f04a:	orr.w	r1, r1, r6
    f04e:	teq	r5, #0
    f052:	it	ne
    f054:	bxne	lr
    f056:	and.w	r6, r3, #2147483648	; 0x80000000
    f05a:	lsls	r2, r2, #1
    f05c:	adc.w	r3, r3, r3
    f060:	tst.w	r3, #1048576	; 0x100000
    f064:	it	eq
    f066:	subeq	r5, #1
    f068:	beq.n	f05a <__aeabi_dmul+0x1c6>
    f06a:	orr.w	r3, r3, r6
    f06e:	bx	lr
    f070:	teq	r4, ip
    f074:	and.w	r5, ip, r3, lsr #20
    f078:	it	ne
    f07a:	teqne	r5, ip
    f07e:	beq.n	f09a <__aeabi_dmul+0x206>
    f080:	orrs.w	r6, r0, r1, lsl #1
    f084:	it	ne
    f086:	orrsne.w	r6, r2, r3, lsl #1
    f08a:	bne.n	f030 <__aeabi_dmul+0x19c>
    f08c:	eor.w	r1, r1, r3
    f090:	and.w	r1, r1, #2147483648	; 0x80000000
    f094:	mov.w	r0, #0
    f098:	pop	{r4, r5, r6, pc}
    f09a:	orrs.w	r6, r0, r1, lsl #1
    f09e:	itte	eq
    f0a0:	moveq	r0, r2
    f0a2:	moveq	r1, r3
    f0a4:	orrsne.w	r6, r2, r3, lsl #1
    f0a8:	beq.n	f0de <__aeabi_dmul+0x24a>
    f0aa:	teq	r4, ip
    f0ae:	bne.n	f0b6 <__aeabi_dmul+0x222>
    f0b0:	orrs.w	r6, r0, r1, lsl #12
    f0b4:	bne.n	f0de <__aeabi_dmul+0x24a>
    f0b6:	teq	r5, ip
    f0ba:	bne.n	f0c8 <__aeabi_dmul+0x234>
    f0bc:	orrs.w	r6, r2, r3, lsl #12
    f0c0:	itt	ne
    f0c2:	movne	r0, r2
    f0c4:	movne	r1, r3
    f0c6:	bne.n	f0de <__aeabi_dmul+0x24a>
    f0c8:	eor.w	r1, r1, r3
    f0cc:	and.w	r1, r1, #2147483648	; 0x80000000
    f0d0:	orr.w	r1, r1, #2130706432	; 0x7f000000
    f0d4:	orr.w	r1, r1, #15728640	; 0xf00000
    f0d8:	mov.w	r0, #0
    f0dc:	pop	{r4, r5, r6, pc}
    f0de:	orr.w	r1, r1, #2130706432	; 0x7f000000
    f0e2:	orr.w	r1, r1, #16252928	; 0xf80000
    f0e6:	pop	{r4, r5, r6, pc}

0000f0e8 <__aeabi_ddiv>:
    f0e8:	push	{r4, r5, r6, lr}
    f0ea:	mov.w	ip, #255	; 0xff
    f0ee:	orr.w	ip, ip, #1792	; 0x700
    f0f2:	ands.w	r4, ip, r1, lsr #20
    f0f6:	ittte	ne
    f0f8:	andsne.w	r5, ip, r3, lsr #20
    f0fc:	teqne	r4, ip
    f100:	teqne	r5, ip
    f104:	bleq	f256 <__aeabi_ddiv+0x16e>
    f108:	sub.w	r4, r4, r5
    f10c:	eor.w	lr, r1, r3
    f110:	orrs.w	r5, r2, r3, lsl #12
    f114:	mov.w	r1, r1, lsl #12
    f118:	beq.w	f22c <__aeabi_ddiv+0x144>
    f11c:	mov.w	r3, r3, lsl #12
    f120:	mov.w	r5, #268435456	; 0x10000000
    f124:	orr.w	r3, r5, r3, lsr #4
    f128:	orr.w	r3, r3, r2, lsr #24
    f12c:	mov.w	r2, r2, lsl #8
    f130:	orr.w	r5, r5, r1, lsr #4
    f134:	orr.w	r5, r5, r0, lsr #24
    f138:	mov.w	r6, r0, lsl #8
    f13c:	and.w	r1, lr, #2147483648	; 0x80000000
    f140:	cmp	r5, r3
    f142:	it	eq
    f144:	cmpeq	r6, r2
    f146:	adc.w	r4, r4, #253	; 0xfd
    f14a:	add.w	r4, r4, #768	; 0x300
    f14e:	bcs.n	f156 <__aeabi_ddiv+0x6e>
    f150:	lsrs	r3, r3, #1
    f152:	mov.w	r2, r2, rrx
    f156:	subs	r6, r6, r2
    f158:	sbc.w	r5, r5, r3
    f15c:	lsrs	r3, r3, #1
    f15e:	mov.w	r2, r2, rrx
    f162:	mov.w	r0, #1048576	; 0x100000
    f166:	mov.w	ip, #524288	; 0x80000
    f16a:	subs.w	lr, r6, r2
    f16e:	sbcs.w	lr, r5, r3
    f172:	ittt	cs
    f174:	subcs	r6, r6, r2
    f176:	movcs	r5, lr
    f178:	orrcs.w	r0, r0, ip
    f17c:	lsrs	r3, r3, #1
    f17e:	mov.w	r2, r2, rrx
    f182:	subs.w	lr, r6, r2
    f186:	sbcs.w	lr, r5, r3
    f18a:	ittt	cs
    f18c:	subcs	r6, r6, r2
    f18e:	movcs	r5, lr
    f190:	orrcs.w	r0, r0, ip, lsr #1
    f194:	lsrs	r3, r3, #1
    f196:	mov.w	r2, r2, rrx
    f19a:	subs.w	lr, r6, r2
    f19e:	sbcs.w	lr, r5, r3
    f1a2:	ittt	cs
    f1a4:	subcs	r6, r6, r2
    f1a6:	movcs	r5, lr
    f1a8:	orrcs.w	r0, r0, ip, lsr #2
    f1ac:	lsrs	r3, r3, #1
    f1ae:	mov.w	r2, r2, rrx
    f1b2:	subs.w	lr, r6, r2
    f1b6:	sbcs.w	lr, r5, r3
    f1ba:	ittt	cs
    f1bc:	subcs	r6, r6, r2
    f1be:	movcs	r5, lr
    f1c0:	orrcs.w	r0, r0, ip, lsr #3
    f1c4:	orrs.w	lr, r5, r6
    f1c8:	beq.n	f1fc <__aeabi_ddiv+0x114>
    f1ca:	mov.w	r5, r5, lsl #4
    f1ce:	orr.w	r5, r5, r6, lsr #28
    f1d2:	mov.w	r6, r6, lsl #4
    f1d6:	mov.w	r3, r3, lsl #3
    f1da:	orr.w	r3, r3, r2, lsr #29
    f1de:	mov.w	r2, r2, lsl #3
    f1e2:	movs.w	ip, ip, lsr #4
    f1e6:	bne.n	f16a <__aeabi_ddiv+0x82>
    f1e8:	tst.w	r1, #1048576	; 0x100000
    f1ec:	bne.n	f206 <__aeabi_ddiv+0x11e>
    f1ee:	orr.w	r1, r1, r0
    f1f2:	mov.w	r0, #0
    f1f6:	mov.w	ip, #2147483648	; 0x80000000
    f1fa:	b.n	f16a <__aeabi_ddiv+0x82>
    f1fc:	tst.w	r1, #1048576	; 0x100000
    f200:	itt	eq
    f202:	orreq	r1, r0
    f204:	moveq	r0, #0
    f206:	subs.w	ip, r4, #253	; 0xfd
    f20a:	it	hi
    f20c:	cmphi.w	ip, #1792	; 0x700
    f210:	bhi.w	ef72 <__aeabi_dmul+0xde>
    f214:	subs.w	ip, r5, r3
    f218:	itt	eq
    f21a:	subseq.w	ip, r6, r2
    f21e:	movseq.w	ip, r0, lsr #1
    f222:	adcs.w	r0, r0, #0
    f226:	adc.w	r1, r1, r4, lsl #20
    f22a:	pop	{r4, r5, r6, pc}
    f22c:	and.w	lr, lr, #2147483648	; 0x80000000
    f230:	orr.w	r1, lr, r1, lsr #12
    f234:	adds.w	r4, r4, ip, lsr #1
    f238:	ittt	gt
    f23a:	rsbsgt	r5, r4, ip
    f23e:	orrgt.w	r1, r1, r4, lsl #20
    f242:	popgt	{r4, r5, r6, pc}
    f244:	orr.w	r1, r1, #1048576	; 0x100000
    f248:	mov.w	lr, #0
    f24c:	subs	r4, #1
    f24e:	b.n	ef72 <__aeabi_dmul+0xde>
    f250:	orr.w	lr, r5, r6
    f254:	b.n	ef72 <__aeabi_dmul+0xde>
    f256:	and.w	r5, ip, r3, lsr #20
    f25a:	teq	r4, ip
    f25e:	it	eq
    f260:	teqeq	r5, ip
    f264:	beq.w	f0de <__aeabi_dmul+0x24a>
    f268:	teq	r4, ip
    f26c:	bne.n	f284 <__aeabi_ddiv+0x19c>
    f26e:	orrs.w	r4, r0, r1, lsl #12
    f272:	bne.w	f0de <__aeabi_dmul+0x24a>
    f276:	teq	r5, ip
    f27a:	bne.w	f0c8 <__aeabi_dmul+0x234>
    f27e:	mov	r0, r2
    f280:	mov	r1, r3
    f282:	b.n	f0de <__aeabi_dmul+0x24a>
    f284:	teq	r5, ip
    f288:	bne.n	f298 <__aeabi_ddiv+0x1b0>
    f28a:	orrs.w	r5, r2, r3, lsl #12
    f28e:	beq.w	f08c <__aeabi_dmul+0x1f8>
    f292:	mov	r0, r2
    f294:	mov	r1, r3
    f296:	b.n	f0de <__aeabi_dmul+0x24a>
    f298:	orrs.w	r6, r0, r1, lsl #1
    f29c:	it	ne
    f29e:	orrsne.w	r6, r2, r3, lsl #1
    f2a2:	bne.w	f030 <__aeabi_dmul+0x19c>
    f2a6:	orrs.w	r4, r0, r1, lsl #1
    f2aa:	bne.w	f0c8 <__aeabi_dmul+0x234>
    f2ae:	orrs.w	r5, r2, r3, lsl #1
    f2b2:	bne.w	f08c <__aeabi_dmul+0x1f8>
    f2b6:	b.n	f0de <__aeabi_dmul+0x24a>

0000f2b8 <__gedf2>:
    f2b8:	mov.w	ip, #4294967295
    f2bc:	b.n	f2cc <__cmpdf2+0x4>
    f2be:	nop

0000f2c0 <__ledf2>:
    f2c0:	mov.w	ip, #1
    f2c4:	b.n	f2cc <__cmpdf2+0x4>
    f2c6:	nop

0000f2c8 <__cmpdf2>:
    f2c8:	mov.w	ip, #1
    f2cc:	str.w	ip, [sp, #-4]!
    f2d0:	mov.w	ip, r1, lsl #1
    f2d4:	mvns.w	ip, ip, asr #21
    f2d8:	mov.w	ip, r3, lsl #1
    f2dc:	it	ne
    f2de:	mvnsne.w	ip, ip, asr #21
    f2e2:	beq.n	f31c <__cmpdf2+0x54>
    f2e4:	add	sp, #4
    f2e6:	orrs.w	ip, r0, r1, lsl #1
    f2ea:	ite	eq
    f2ec:	orrseq.w	ip, r2, r3, lsl #1
    f2f0:	teqne	r1, r3
    f2f4:	ittt	eq
    f2f6:	teqeq	r0, r2
    f2fa:	moveq	r0, #0
    f2fc:	bxeq	lr
    f2fe:	cmn.w	r0, #0
    f302:	teq	r1, r3
    f306:	it	pl
    f308:	cmppl	r1, r3
    f30a:	it	eq
    f30c:	cmpeq	r0, r2
    f30e:	ite	cs
    f310:	asrcs	r0, r3, #31
    f312:	mvncc.w	r0, r3, asr #31
    f316:	orr.w	r0, r0, #1
    f31a:	bx	lr
    f31c:	mov.w	ip, r1, lsl #1
    f320:	mvns.w	ip, ip, asr #21
    f324:	bne.n	f32c <__cmpdf2+0x64>
    f326:	orrs.w	ip, r0, r1, lsl #12
    f32a:	bne.n	f33c <__cmpdf2+0x74>
    f32c:	mov.w	ip, r3, lsl #1
    f330:	mvns.w	ip, ip, asr #21
    f334:	bne.n	f2e4 <__cmpdf2+0x1c>
    f336:	orrs.w	ip, r2, r3, lsl #12
    f33a:	beq.n	f2e4 <__cmpdf2+0x1c>
    f33c:	ldr.w	r0, [sp], #4
    f340:	bx	lr
    f342:	nop

0000f344 <__aeabi_cdrcmple>:
    f344:	mov	ip, r0
    f346:	mov	r0, r2
    f348:	mov	r2, ip
    f34a:	mov	ip, r1
    f34c:	mov	r1, r3
    f34e:	mov	r3, ip
    f350:	b.n	f354 <__aeabi_cdcmpeq>
    f352:	nop

0000f354 <__aeabi_cdcmpeq>:
    f354:	push	{r0, lr}
    f356:	bl	f2c8 <__cmpdf2>
    f35a:	cmp	r0, #0
    f35c:	it	mi
    f35e:	cmnmi.w	r0, #0
    f362:	pop	{r0, pc}

0000f364 <__aeabi_dcmpeq>:
    f364:	str.w	lr, [sp, #-8]!
    f368:	bl	f354 <__aeabi_cdcmpeq>
    f36c:	ite	eq
    f36e:	moveq	r0, #1
    f370:	movne	r0, #0
    f372:	ldr.w	pc, [sp], #8
    f376:	nop

0000f378 <__aeabi_dcmplt>:
    f378:	str.w	lr, [sp, #-8]!
    f37c:	bl	f354 <__aeabi_cdcmpeq>
    f380:	ite	cc
    f382:	movcc	r0, #1
    f384:	movcs	r0, #0
    f386:	ldr.w	pc, [sp], #8
    f38a:	nop

0000f38c <__aeabi_dcmple>:
    f38c:	str.w	lr, [sp, #-8]!
    f390:	bl	f354 <__aeabi_cdcmpeq>
    f394:	ite	ls
    f396:	movls	r0, #1
    f398:	movhi	r0, #0
    f39a:	ldr.w	pc, [sp], #8
    f39e:	nop

0000f3a0 <__aeabi_dcmpge>:
    f3a0:	str.w	lr, [sp, #-8]!
    f3a4:	bl	f344 <__aeabi_cdrcmple>
    f3a8:	ite	ls
    f3aa:	movls	r0, #1
    f3ac:	movhi	r0, #0
    f3ae:	ldr.w	pc, [sp], #8
    f3b2:	nop

0000f3b4 <__aeabi_dcmpgt>:
    f3b4:	str.w	lr, [sp, #-8]!
    f3b8:	bl	f344 <__aeabi_cdrcmple>
    f3bc:	ite	cc
    f3be:	movcc	r0, #1
    f3c0:	movcs	r0, #0
    f3c2:	ldr.w	pc, [sp], #8
    f3c6:	nop

0000f3c8 <__aeabi_dcmpun>:
    f3c8:	mov.w	ip, r1, lsl #1
    f3cc:	mvns.w	ip, ip, asr #21
    f3d0:	bne.n	f3d8 <__aeabi_dcmpun+0x10>
    f3d2:	orrs.w	ip, r0, r1, lsl #12
    f3d6:	bne.n	f3ee <__aeabi_dcmpun+0x26>
    f3d8:	mov.w	ip, r3, lsl #1
    f3dc:	mvns.w	ip, ip, asr #21
    f3e0:	bne.n	f3e8 <__aeabi_dcmpun+0x20>
    f3e2:	orrs.w	ip, r2, r3, lsl #12
    f3e6:	bne.n	f3ee <__aeabi_dcmpun+0x26>
    f3e8:	mov.w	r0, #0
    f3ec:	bx	lr
    f3ee:	mov.w	r0, #1
    f3f2:	bx	lr

0000f3f4 <__aeabi_d2iz>:
    f3f4:	mov.w	r2, r1, lsl #1
    f3f8:	adds.w	r2, r2, #2097152	; 0x200000
    f3fc:	bcs.n	f42a <__aeabi_d2iz+0x36>
    f3fe:	bpl.n	f424 <__aeabi_d2iz+0x30>
    f400:	mvn.w	r3, #992	; 0x3e0
    f404:	subs.w	r2, r3, r2, asr #21
    f408:	bls.n	f430 <__aeabi_d2iz+0x3c>
    f40a:	mov.w	r3, r1, lsl #11
    f40e:	orr.w	r3, r3, #2147483648	; 0x80000000
    f412:	orr.w	r3, r3, r0, lsr #21
    f416:	tst.w	r1, #2147483648	; 0x80000000
    f41a:	lsr.w	r0, r3, r2
    f41e:	it	ne
    f420:	negne	r0, r0
    f422:	bx	lr
    f424:	mov.w	r0, #0
    f428:	bx	lr
    f42a:	orrs.w	r0, r0, r1, lsl #12
    f42e:	bne.n	f43c <__aeabi_d2iz+0x48>
    f430:	ands.w	r0, r1, #2147483648	; 0x80000000
    f434:	it	eq
    f436:	mvneq.w	r0, #2147483648	; 0x80000000
    f43a:	bx	lr
    f43c:	mov.w	r0, #0
    f440:	bx	lr
    f442:	nop

0000f444 <__aeabi_d2f>:
    f444:	mov.w	r2, r1, lsl #1
    f448:	subs.w	r3, r2, #1879048192	; 0x70000000
    f44c:	itt	cs
    f44e:	subscs.w	ip, r3, #2097152	; 0x200000
    f452:	rsbscs	ip, ip, #532676608	; 0x1fc00000
    f456:	bls.n	f474 <__aeabi_d2f+0x30>
    f458:	and.w	ip, r1, #2147483648	; 0x80000000
    f45c:	mov.w	r2, r0, lsl #3
    f460:	orr.w	r0, ip, r0, lsr #29
    f464:	cmp.w	r2, #2147483648	; 0x80000000
    f468:	adc.w	r0, r0, r3, lsl #2
    f46c:	it	eq
    f46e:	biceq.w	r0, r0, #1
    f472:	bx	lr
    f474:	tst.w	r1, #1073741824	; 0x40000000
    f478:	bne.n	f4be <__aeabi_d2f+0x7a>
    f47a:	adds.w	r2, r3, #48234496	; 0x2e00000
    f47e:	itt	lt
    f480:	andlt.w	r0, r1, #2147483648	; 0x80000000
    f484:	bxlt	lr
    f486:	orr.w	r1, r1, #1048576	; 0x100000
    f48a:	mov.w	r2, r2, lsr #21
    f48e:	rsb	r2, r2, #24
    f492:	rsb	ip, r2, #32
    f496:	lsls.w	r3, r0, ip
    f49a:	lsr.w	r0, r0, r2
    f49e:	it	ne
    f4a0:	orrne.w	r0, r0, #1
    f4a4:	mov.w	r3, r1, lsl #11
    f4a8:	mov.w	r3, r3, lsr #11
    f4ac:	lsl.w	ip, r3, ip
    f4b0:	orr.w	r0, r0, ip
    f4b4:	lsr.w	r3, r3, r2
    f4b8:	mov.w	r3, r3, lsl #1
    f4bc:	b.n	f458 <__aeabi_d2f+0x14>
    f4be:	mvns.w	r3, r2, asr #21
    f4c2:	bne.n	f4d4 <__aeabi_d2f+0x90>
    f4c4:	orrs.w	r3, r0, r1, lsl #12
    f4c8:	ittt	ne
    f4ca:	movne.w	r0, #2130706432	; 0x7f000000
    f4ce:	orrne.w	r0, r0, #12582912	; 0xc00000
    f4d2:	bxne	lr
    f4d4:	and.w	r0, r1, #2147483648	; 0x80000000
    f4d8:	orr.w	r0, r0, #2130706432	; 0x7f000000
    f4dc:	orr.w	r0, r0, #8388608	; 0x800000
    f4e0:	bx	lr
    f4e2:	nop

0000f4e4 <__aeabi_frsub>:
    f4e4:	eor.w	r0, r0, #2147483648	; 0x80000000
    f4e8:	b.n	f4f0 <__addsf3>
    f4ea:	nop

0000f4ec <__aeabi_fsub>:
    f4ec:	eor.w	r1, r1, #2147483648	; 0x80000000

0000f4f0 <__addsf3>:
    f4f0:	lsls	r2, r0, #1
    f4f2:	itttt	ne
    f4f4:	movsne.w	r3, r1, lsl #1
    f4f8:	teqne	r2, r3
    f4fc:	mvnsne.w	ip, r2, asr #24
    f500:	mvnsne.w	ip, r3, asr #24
    f504:	beq.n	f5dc <__addsf3+0xec>
    f506:	mov.w	r2, r2, lsr #24
    f50a:	rsbs	r3, r2, r3, lsr #24
    f50e:	itttt	gt
    f510:	addgt	r2, r2, r3
    f512:	eorgt	r1, r0
    f514:	eorgt	r0, r1
    f516:	eorgt	r1, r0
    f518:	it	lt
    f51a:	neglt	r3, r3
    f51c:	cmp	r3, #25
    f51e:	it	hi
    f520:	bxhi	lr
    f522:	tst.w	r0, #2147483648	; 0x80000000
    f526:	orr.w	r0, r0, #8388608	; 0x800000
    f52a:	bic.w	r0, r0, #4278190080	; 0xff000000
    f52e:	it	ne
    f530:	negne	r0, r0
    f532:	tst.w	r1, #2147483648	; 0x80000000
    f536:	orr.w	r1, r1, #8388608	; 0x800000
    f53a:	bic.w	r1, r1, #4278190080	; 0xff000000
    f53e:	it	ne
    f540:	negne	r1, r1
    f542:	teq	r2, r3
    f546:	beq.n	f5c8 <__addsf3+0xd8>
    f548:	sub.w	r2, r2, #1
    f54c:	asr.w	ip, r1, r3
    f550:	adds.w	r0, r0, ip
    f554:	rsb	r3, r3, #32
    f558:	lsl.w	r1, r1, r3
    f55c:	and.w	r3, r0, #2147483648	; 0x80000000
    f560:	bpl.n	f568 <__addsf3+0x78>
    f562:	negs	r1, r1
    f564:	sbc.w	r0, r0, r0, lsl #1
    f568:	cmp.w	r0, #8388608	; 0x800000
    f56c:	bcc.n	f596 <__addsf3+0xa6>
    f56e:	cmp.w	r0, #16777216	; 0x1000000
    f572:	bcc.n	f582 <__addsf3+0x92>
    f574:	lsrs	r0, r0, #1
    f576:	mov.w	r1, r1, rrx
    f57a:	add.w	r2, r2, #1
    f57e:	cmp	r2, #254	; 0xfe
    f580:	bcs.n	f626 <__addsf3+0x136>
    f582:	cmp.w	r1, #2147483648	; 0x80000000
    f586:	adc.w	r0, r0, r2, lsl #23
    f58a:	it	eq
    f58c:	biceq.w	r0, r0, #1
    f590:	orr.w	r0, r0, r3
    f594:	bx	lr
    f596:	lsls	r1, r1, #1
    f598:	adc.w	r0, r0, r0
    f59c:	tst.w	r0, #8388608	; 0x800000
    f5a0:	sub.w	r2, r2, #1
    f5a4:	bne.n	f582 <__addsf3+0x92>
    f5a6:	clz	ip, r0
    f5aa:	sub.w	ip, ip, #8
    f5ae:	subs.w	r2, r2, ip
    f5b2:	lsl.w	r0, r0, ip
    f5b6:	itet	ge
    f5b8:	addge.w	r0, r0, r2, lsl #23
    f5bc:	neglt	r2, r2
    f5be:	orrge	r0, r3
    f5c0:	itt	lt
    f5c2:	lsrlt	r0, r2
    f5c4:	orrlt	r0, r3
    f5c6:	bx	lr
    f5c8:	teq	r2, #0
    f5cc:	eor.w	r1, r1, #8388608	; 0x800000
    f5d0:	itte	eq
    f5d2:	eoreq.w	r0, r0, #8388608	; 0x800000
    f5d6:	addeq	r2, #1
    f5d8:	subne	r3, #1
    f5da:	b.n	f548 <__addsf3+0x58>
    f5dc:	mov.w	r3, r1, lsl #1
    f5e0:	mvns.w	ip, r2, asr #24
    f5e4:	it	ne
    f5e6:	mvnsne.w	ip, r3, asr #24
    f5ea:	beq.n	f630 <__addsf3+0x140>
    f5ec:	teq	r2, r3
    f5f0:	beq.n	f5fc <__addsf3+0x10c>
    f5f2:	teq	r2, #0
    f5f6:	it	eq
    f5f8:	moveq	r0, r1
    f5fa:	bx	lr
    f5fc:	teq	r0, r1
    f600:	itt	ne
    f602:	movne	r0, #0
    f604:	bxne	lr
    f606:	tst.w	r2, #4278190080	; 0xff000000
    f60a:	bne.n	f616 <__addsf3+0x126>
    f60c:	lsls	r0, r0, #1
    f60e:	it	cs
    f610:	orrcs.w	r0, r0, #2147483648	; 0x80000000
    f614:	bx	lr
    f616:	adds.w	r2, r2, #33554432	; 0x2000000
    f61a:	itt	cc
    f61c:	addcc.w	r0, r0, #8388608	; 0x800000
    f620:	bxcc	lr
    f622:	and.w	r3, r0, #2147483648	; 0x80000000
    f626:	orr.w	r0, r3, #2130706432	; 0x7f000000
    f62a:	orr.w	r0, r0, #8388608	; 0x800000
    f62e:	bx	lr
    f630:	mvns.w	r2, r2, asr #24
    f634:	itet	ne
    f636:	movne	r0, r1
    f638:	mvnseq.w	r3, r3, asr #24
    f63c:	movne	r1, r0
    f63e:	lsls	r2, r0, #9
    f640:	itte	eq
    f642:	movseq.w	r3, r1, lsl #9
    f646:	teqeq	r0, r1
    f64a:	orrne.w	r0, r0, #4194304	; 0x400000
    f64e:	bx	lr

0000f650 <__aeabi_ui2f>:
    f650:	mov.w	r3, #0
    f654:	b.n	f660 <__aeabi_i2f+0x8>
    f656:	nop

0000f658 <__aeabi_i2f>:
    f658:	ands.w	r3, r0, #2147483648	; 0x80000000
    f65c:	it	mi
    f65e:	negmi	r0, r0
    f660:	movs.w	ip, r0
    f664:	it	eq
    f666:	bxeq	lr
    f668:	orr.w	r3, r3, #1258291200	; 0x4b000000
    f66c:	mov	r1, r0
    f66e:	mov.w	r0, #0
    f672:	b.n	f6ae <__aeabi_l2f+0x2a>

0000f674 <__aeabi_ul2f>:
    f674:	orrs.w	r2, r0, r1
    f678:	it	eq
    f67a:	bxeq	lr
    f67c:	mov.w	r3, #0
    f680:	b.n	f698 <__aeabi_l2f+0x14>
    f682:	nop

0000f684 <__aeabi_l2f>:
    f684:	orrs.w	r2, r0, r1
    f688:	it	eq
    f68a:	bxeq	lr
    f68c:	ands.w	r3, r1, #2147483648	; 0x80000000
    f690:	bpl.n	f698 <__aeabi_l2f+0x14>
    f692:	negs	r0, r0
    f694:	sbc.w	r1, r1, r1, lsl #1
    f698:	movs.w	ip, r1
    f69c:	ittt	eq
    f69e:	moveq	ip, r0
    f6a0:	moveq	r1, r0
    f6a2:	moveq	r0, #0
    f6a4:	orr.w	r3, r3, #1526726656	; 0x5b000000
    f6a8:	it	eq
    f6aa:	subeq.w	r3, r3, #268435456	; 0x10000000
    f6ae:	sub.w	r3, r3, #8388608	; 0x800000
    f6b2:	clz	r2, ip
    f6b6:	subs	r2, #8
    f6b8:	sub.w	r3, r3, r2, lsl #23
    f6bc:	blt.n	f6e0 <__aeabi_l2f+0x5c>
    f6be:	lsl.w	ip, r1, r2
    f6c2:	add	r3, ip
    f6c4:	lsl.w	ip, r0, r2
    f6c8:	rsb	r2, r2, #32
    f6cc:	cmp.w	ip, #2147483648	; 0x80000000
    f6d0:	lsr.w	r2, r0, r2
    f6d4:	adc.w	r0, r3, r2
    f6d8:	it	eq
    f6da:	biceq.w	r0, r0, #1
    f6de:	bx	lr
    f6e0:	add.w	r2, r2, #32
    f6e4:	lsl.w	ip, r1, r2
    f6e8:	rsb	r2, r2, #32
    f6ec:	orrs.w	r0, r0, ip, lsl #1
    f6f0:	lsr.w	r2, r1, r2
    f6f4:	adc.w	r0, r3, r2
    f6f8:	it	eq
    f6fa:	biceq.w	r0, r0, ip, lsr #31
    f6fe:	bx	lr

0000f700 <__aeabi_fmul>:
    f700:	mov.w	ip, #255	; 0xff
    f704:	ands.w	r2, ip, r0, lsr #23
    f708:	ittt	ne
    f70a:	andsne.w	r3, ip, r1, lsr #23
    f70e:	teqne	r2, ip
    f712:	teqne	r3, ip
    f716:	beq.n	f7f8 <__aeabi_fmul+0xf8>
    f718:	add	r2, r3
    f71a:	eor.w	ip, r0, r1
    f71e:	lsls	r0, r0, #9
    f720:	it	ne
    f722:	movsne.w	r1, r1, lsl #9
    f726:	beq.n	f766 <__aeabi_fmul+0x66>
    f728:	mov.w	r3, #134217728	; 0x8000000
    f72c:	orr.w	r0, r3, r0, lsr #5
    f730:	orr.w	r1, r3, r1, lsr #5
    f734:	umull	r3, r1, r0, r1
    f738:	and.w	r0, ip, #2147483648	; 0x80000000
    f73c:	cmp.w	r1, #8388608	; 0x800000
    f740:	ittt	cc
    f742:	lslcc	r1, r1, #1
    f744:	orrcc.w	r1, r1, r3, lsr #31
    f748:	lslcc	r3, r3, #1
    f74a:	orr.w	r0, r0, r1
    f74e:	sbc.w	r2, r2, #127	; 0x7f
    f752:	cmp	r2, #253	; 0xfd
    f754:	bhi.n	f792 <__aeabi_fmul+0x92>
    f756:	cmp.w	r3, #2147483648	; 0x80000000
    f75a:	adc.w	r0, r0, r2, lsl #23
    f75e:	it	eq
    f760:	biceq.w	r0, r0, #1
    f764:	bx	lr
    f766:	teq	r0, #0
    f76a:	and.w	ip, ip, #2147483648	; 0x80000000
    f76e:	it	eq
    f770:	lsleq	r1, r1, #9
    f772:	orr.w	r0, ip, r0, lsr #9
    f776:	orr.w	r0, r0, r1, lsr #9
    f77a:	subs	r2, #127	; 0x7f
    f77c:	ittt	gt
    f77e:	rsbsgt	r3, r2, #255	; 0xff
    f782:	orrgt.w	r0, r0, r2, lsl #23
    f786:	bxgt	lr
    f788:	orr.w	r0, r0, #8388608	; 0x800000
    f78c:	mov.w	r3, #0
    f790:	subs	r2, #1
    f792:	bgt.n	f850 <__aeabi_fmul+0x150>
    f794:	cmn.w	r2, #25
    f798:	itt	le
    f79a:	andle.w	r0, r0, #2147483648	; 0x80000000
    f79e:	bxle	lr
    f7a0:	rsb	r2, r2, #0
    f7a4:	lsls	r1, r0, #1
    f7a6:	lsr.w	r1, r1, r2
    f7aa:	rsb	r2, r2, #32
    f7ae:	lsl.w	ip, r0, r2
    f7b2:	movs.w	r0, r1, rrx
    f7b6:	adc.w	r0, r0, #0
    f7ba:	orrs.w	r3, r3, ip, lsl #1
    f7be:	it	eq
    f7c0:	biceq.w	r0, r0, ip, lsr #31
    f7c4:	bx	lr
    f7c6:	teq	r2, #0
    f7ca:	and.w	ip, r0, #2147483648	; 0x80000000
    f7ce:	ittt	eq
    f7d0:	lsleq	r0, r0, #1
    f7d2:	tsteq.w	r0, #8388608	; 0x800000
    f7d6:	subeq	r2, #1
    f7d8:	beq.n	f7ce <__aeabi_fmul+0xce>
    f7da:	orr.w	r0, r0, ip
    f7de:	teq	r3, #0
    f7e2:	and.w	ip, r1, #2147483648	; 0x80000000
    f7e6:	ittt	eq
    f7e8:	lsleq	r1, r1, #1
    f7ea:	tsteq.w	r1, #8388608	; 0x800000
    f7ee:	subeq	r3, #1
    f7f0:	beq.n	f7e6 <__aeabi_fmul+0xe6>
    f7f2:	orr.w	r1, r1, ip
    f7f6:	b.n	f718 <__aeabi_fmul+0x18>
    f7f8:	and.w	r3, ip, r1, lsr #23
    f7fc:	teq	r2, ip
    f800:	it	ne
    f802:	teqne	r3, ip
    f806:	beq.n	f81e <__aeabi_fmul+0x11e>
    f808:	bics.w	ip, r0, #2147483648	; 0x80000000
    f80c:	it	ne
    f80e:	bicsne.w	ip, r1, #2147483648	; 0x80000000
    f812:	bne.n	f7c6 <__aeabi_fmul+0xc6>
    f814:	eor.w	r0, r0, r1
    f818:	and.w	r0, r0, #2147483648	; 0x80000000
    f81c:	bx	lr
    f81e:	teq	r0, #0
    f822:	itett	ne
    f824:	teqne	r0, #2147483648	; 0x80000000
    f828:	moveq	r0, r1
    f82a:	teqne	r1, #0
    f82e:	teqne	r1, #2147483648	; 0x80000000
    f832:	beq.n	f85e <__aeabi_fmul+0x15e>
    f834:	teq	r2, ip
    f838:	bne.n	f83e <__aeabi_fmul+0x13e>
    f83a:	lsls	r2, r0, #9
    f83c:	bne.n	f85e <__aeabi_fmul+0x15e>
    f83e:	teq	r3, ip
    f842:	bne.n	f84c <__aeabi_fmul+0x14c>
    f844:	lsls	r3, r1, #9
    f846:	it	ne
    f848:	movne	r0, r1
    f84a:	bne.n	f85e <__aeabi_fmul+0x15e>
    f84c:	eor.w	r0, r0, r1
    f850:	and.w	r0, r0, #2147483648	; 0x80000000
    f854:	orr.w	r0, r0, #2130706432	; 0x7f000000
    f858:	orr.w	r0, r0, #8388608	; 0x800000
    f85c:	bx	lr
    f85e:	orr.w	r0, r0, #2130706432	; 0x7f000000
    f862:	orr.w	r0, r0, #12582912	; 0xc00000
    f866:	bx	lr

0000f868 <__aeabi_fdiv>:
    f868:	mov.w	ip, #255	; 0xff
    f86c:	ands.w	r2, ip, r0, lsr #23
    f870:	ittt	ne
    f872:	andsne.w	r3, ip, r1, lsr #23
    f876:	teqne	r2, ip
    f87a:	teqne	r3, ip
    f87e:	beq.n	f954 <__aeabi_fdiv+0xec>
    f880:	sub.w	r2, r2, r3
    f884:	eor.w	ip, r0, r1
    f888:	lsls	r1, r1, #9
    f88a:	mov.w	r0, r0, lsl #9
    f88e:	beq.n	f900 <__aeabi_fdiv+0x98>
    f890:	mov.w	r3, #268435456	; 0x10000000
    f894:	orr.w	r1, r3, r1, lsr #4
    f898:	orr.w	r3, r3, r0, lsr #4
    f89c:	and.w	r0, ip, #2147483648	; 0x80000000
    f8a0:	cmp	r3, r1
    f8a2:	it	cc
    f8a4:	lslcc	r3, r3, #1
    f8a6:	adc.w	r2, r2, #125	; 0x7d
    f8aa:	mov.w	ip, #8388608	; 0x800000
    f8ae:	cmp	r3, r1
    f8b0:	itt	cs
    f8b2:	subcs	r3, r3, r1
    f8b4:	orrcs.w	r0, r0, ip
    f8b8:	cmp.w	r3, r1, lsr #1
    f8bc:	itt	cs
    f8be:	subcs.w	r3, r3, r1, lsr #1
    f8c2:	orrcs.w	r0, r0, ip, lsr #1
    f8c6:	cmp.w	r3, r1, lsr #2
    f8ca:	itt	cs
    f8cc:	subcs.w	r3, r3, r1, lsr #2
    f8d0:	orrcs.w	r0, r0, ip, lsr #2
    f8d4:	cmp.w	r3, r1, lsr #3
    f8d8:	itt	cs
    f8da:	subcs.w	r3, r3, r1, lsr #3
    f8de:	orrcs.w	r0, r0, ip, lsr #3
    f8e2:	lsls	r3, r3, #4
    f8e4:	it	ne
    f8e6:	movsne.w	ip, ip, lsr #4
    f8ea:	bne.n	f8ae <__aeabi_fdiv+0x46>
    f8ec:	cmp	r2, #253	; 0xfd
    f8ee:	bhi.w	f792 <__aeabi_fmul+0x92>
    f8f2:	cmp	r3, r1
    f8f4:	adc.w	r0, r0, r2, lsl #23
    f8f8:	it	eq
    f8fa:	biceq.w	r0, r0, #1
    f8fe:	bx	lr
    f900:	and.w	ip, ip, #2147483648	; 0x80000000
    f904:	orr.w	r0, ip, r0, lsr #9
    f908:	adds	r2, #127	; 0x7f
    f90a:	ittt	gt
    f90c:	rsbsgt	r3, r2, #255	; 0xff
    f910:	orrgt.w	r0, r0, r2, lsl #23
    f914:	bxgt	lr
    f916:	orr.w	r0, r0, #8388608	; 0x800000
    f91a:	mov.w	r3, #0
    f91e:	subs	r2, #1
    f920:	b.n	f792 <__aeabi_fmul+0x92>
    f922:	teq	r2, #0
    f926:	and.w	ip, r0, #2147483648	; 0x80000000
    f92a:	ittt	eq
    f92c:	lsleq	r0, r0, #1
    f92e:	tsteq.w	r0, #8388608	; 0x800000
    f932:	subeq	r2, #1
    f934:	beq.n	f92a <__aeabi_fdiv+0xc2>
    f936:	orr.w	r0, r0, ip
    f93a:	teq	r3, #0
    f93e:	and.w	ip, r1, #2147483648	; 0x80000000
    f942:	ittt	eq
    f944:	lsleq	r1, r1, #1
    f946:	tsteq.w	r1, #8388608	; 0x800000
    f94a:	subeq	r3, #1
    f94c:	beq.n	f942 <__aeabi_fdiv+0xda>
    f94e:	orr.w	r1, r1, ip
    f952:	b.n	f880 <__aeabi_fdiv+0x18>
    f954:	and.w	r3, ip, r1, lsr #23
    f958:	teq	r2, ip
    f95c:	bne.n	f970 <__aeabi_fdiv+0x108>
    f95e:	lsls	r2, r0, #9
    f960:	bne.w	f85e <__aeabi_fmul+0x15e>
    f964:	teq	r3, ip
    f968:	bne.w	f84c <__aeabi_fmul+0x14c>
    f96c:	mov	r0, r1
    f96e:	b.n	f85e <__aeabi_fmul+0x15e>
    f970:	teq	r3, ip
    f974:	bne.n	f980 <__aeabi_fdiv+0x118>
    f976:	lsls	r3, r1, #9
    f978:	beq.w	f814 <__aeabi_fmul+0x114>
    f97c:	mov	r0, r1
    f97e:	b.n	f85e <__aeabi_fmul+0x15e>
    f980:	bics.w	ip, r0, #2147483648	; 0x80000000
    f984:	it	ne
    f986:	bicsne.w	ip, r1, #2147483648	; 0x80000000
    f98a:	bne.n	f922 <__aeabi_fdiv+0xba>
    f98c:	bics.w	r2, r0, #2147483648	; 0x80000000
    f990:	bne.w	f84c <__aeabi_fmul+0x14c>
    f994:	bics.w	r3, r1, #2147483648	; 0x80000000
    f998:	bne.w	f814 <__aeabi_fmul+0x114>
    f99c:	b.n	f85e <__aeabi_fmul+0x15e>
    f99e:	nop

0000f9a0 <__gesf2>:
    f9a0:	mov.w	ip, #4294967295
    f9a4:	b.n	f9b4 <__cmpsf2+0x4>
    f9a6:	nop

0000f9a8 <__lesf2>:
    f9a8:	mov.w	ip, #1
    f9ac:	b.n	f9b4 <__cmpsf2+0x4>
    f9ae:	nop

0000f9b0 <__cmpsf2>:
    f9b0:	mov.w	ip, #1
    f9b4:	str.w	ip, [sp, #-4]!
    f9b8:	mov.w	r2, r0, lsl #1
    f9bc:	mov.w	r3, r1, lsl #1
    f9c0:	mvns.w	ip, r2, asr #24
    f9c4:	it	ne
    f9c6:	mvnsne.w	ip, r3, asr #24
    f9ca:	beq.n	f9f0 <__cmpsf2+0x40>
    f9cc:	add	sp, #4
    f9ce:	orrs.w	ip, r2, r3, lsr #1
    f9d2:	it	ne
    f9d4:	teqne	r0, r1
    f9d8:	it	pl
    f9da:	subspl.w	r0, r2, r3
    f9de:	it	hi
    f9e0:	asrhi	r0, r1, #31
    f9e2:	it	cc
    f9e4:	mvncc.w	r0, r1, asr #31
    f9e8:	it	ne
    f9ea:	orrne.w	r0, r0, #1
    f9ee:	bx	lr
    f9f0:	mvns.w	ip, r2, asr #24
    f9f4:	bne.n	f9fc <__cmpsf2+0x4c>
    f9f6:	movs.w	ip, r0, lsl #9
    f9fa:	bne.n	fa08 <__cmpsf2+0x58>
    f9fc:	mvns.w	ip, r3, asr #24
    fa00:	bne.n	f9cc <__cmpsf2+0x1c>
    fa02:	movs.w	ip, r1, lsl #9
    fa06:	beq.n	f9cc <__cmpsf2+0x1c>
    fa08:	ldr.w	r0, [sp], #4
    fa0c:	bx	lr
    fa0e:	nop

0000fa10 <__aeabi_cfrcmple>:
    fa10:	mov	ip, r0
    fa12:	mov	r0, r1
    fa14:	mov	r1, ip
    fa16:	b.n	fa18 <__aeabi_cfcmpeq>

0000fa18 <__aeabi_cfcmpeq>:
    fa18:	push	{r0, r1, r2, r3, lr}
    fa1a:	bl	f9b0 <__cmpsf2>
    fa1e:	cmp	r0, #0
    fa20:	it	mi
    fa22:	cmnmi.w	r0, #0
    fa26:	pop	{r0, r1, r2, r3, pc}

0000fa28 <__aeabi_fcmpeq>:
    fa28:	str.w	lr, [sp, #-8]!
    fa2c:	bl	fa18 <__aeabi_cfcmpeq>
    fa30:	ite	eq
    fa32:	moveq	r0, #1
    fa34:	movne	r0, #0
    fa36:	ldr.w	pc, [sp], #8
    fa3a:	nop

0000fa3c <__aeabi_fcmplt>:
    fa3c:	str.w	lr, [sp, #-8]!
    fa40:	bl	fa18 <__aeabi_cfcmpeq>
    fa44:	ite	cc
    fa46:	movcc	r0, #1
    fa48:	movcs	r0, #0
    fa4a:	ldr.w	pc, [sp], #8
    fa4e:	nop

0000fa50 <__aeabi_fcmple>:
    fa50:	str.w	lr, [sp, #-8]!
    fa54:	bl	fa18 <__aeabi_cfcmpeq>
    fa58:	ite	ls
    fa5a:	movls	r0, #1
    fa5c:	movhi	r0, #0
    fa5e:	ldr.w	pc, [sp], #8
    fa62:	nop

0000fa64 <__aeabi_fcmpge>:
    fa64:	str.w	lr, [sp, #-8]!
    fa68:	bl	fa10 <__aeabi_cfrcmple>
    fa6c:	ite	ls
    fa6e:	movls	r0, #1
    fa70:	movhi	r0, #0
    fa72:	ldr.w	pc, [sp], #8
    fa76:	nop

0000fa78 <__aeabi_fcmpgt>:
    fa78:	str.w	lr, [sp, #-8]!
    fa7c:	bl	fa10 <__aeabi_cfrcmple>
    fa80:	ite	cc
    fa82:	movcc	r0, #1
    fa84:	movcs	r0, #0
    fa86:	ldr.w	pc, [sp], #8
    fa8a:	nop

0000fa8c <__aeabi_fcmpun>:
    fa8c:	mov.w	r2, r0, lsl #1
    fa90:	mov.w	r3, r1, lsl #1
    fa94:	mvns.w	ip, r2, asr #24
    fa98:	bne.n	faa0 <__aeabi_fcmpun+0x14>
    fa9a:	movs.w	ip, r0, lsl #9
    fa9e:	bne.n	fab2 <__aeabi_fcmpun+0x26>
    faa0:	mvns.w	ip, r3, asr #24
    faa4:	bne.n	faac <__aeabi_fcmpun+0x20>
    faa6:	movs.w	ip, r1, lsl #9
    faaa:	bne.n	fab2 <__aeabi_fcmpun+0x26>
    faac:	mov.w	r0, #0
    fab0:	bx	lr
    fab2:	mov.w	r0, #1
    fab6:	bx	lr

0000fab8 <__aeabi_f2iz>:
    fab8:	mov.w	r2, r0, lsl #1
    fabc:	cmp.w	r2, #2130706432	; 0x7f000000
    fac0:	bcc.n	fae2 <__aeabi_f2iz+0x2a>
    fac2:	mov.w	r3, #158	; 0x9e
    fac6:	subs.w	r2, r3, r2, lsr #24
    faca:	bls.n	fae8 <__aeabi_f2iz+0x30>
    facc:	mov.w	r3, r0, lsl #8
    fad0:	orr.w	r3, r3, #2147483648	; 0x80000000
    fad4:	tst.w	r0, #2147483648	; 0x80000000
    fad8:	lsr.w	r0, r3, r2
    fadc:	it	ne
    fade:	negne	r0, r0
    fae0:	bx	lr
    fae2:	mov.w	r0, #0
    fae6:	bx	lr
    fae8:	cmn.w	r2, #97	; 0x61
    faec:	bne.n	faf2 <__aeabi_f2iz+0x3a>
    faee:	lsls	r2, r0, #9
    faf0:	bne.n	fafe <__aeabi_f2iz+0x46>
    faf2:	ands.w	r0, r0, #2147483648	; 0x80000000
    faf6:	it	eq
    faf8:	mvneq.w	r0, #2147483648	; 0x80000000
    fafc:	bx	lr
    fafe:	mov.w	r0, #0
    fb02:	bx	lr

0000fb04 <__aeabi_f2uiz>:
    fb04:	lsls	r2, r0, #1
    fb06:	bcs.n	fb26 <__aeabi_f2uiz+0x22>
    fb08:	cmp.w	r2, #2130706432	; 0x7f000000
    fb0c:	bcc.n	fb26 <__aeabi_f2uiz+0x22>
    fb0e:	mov.w	r3, #158	; 0x9e
    fb12:	subs.w	r2, r3, r2, lsr #24
    fb16:	bmi.n	fb2c <__aeabi_f2uiz+0x28>
    fb18:	mov.w	r3, r0, lsl #8
    fb1c:	orr.w	r3, r3, #2147483648	; 0x80000000
    fb20:	lsr.w	r0, r3, r2
    fb24:	bx	lr
    fb26:	mov.w	r0, #0
    fb2a:	bx	lr
    fb2c:	cmn.w	r2, #97	; 0x61
    fb30:	bne.n	fb36 <__aeabi_f2uiz+0x32>
    fb32:	lsls	r2, r0, #9
    fb34:	bne.n	fb3c <__aeabi_f2uiz+0x38>
    fb36:	mov.w	r0, #4294967295
    fb3a:	bx	lr
    fb3c:	mov.w	r0, #0
    fb40:	bx	lr
    fb42:	nop

0000fb44 <__aeabi_uldivmod>:
    fb44:	cbnz	r3, fb5c <__aeabi_uldivmod+0x18>
    fb46:	cbnz	r2, fb5c <__aeabi_uldivmod+0x18>
    fb48:	cmp	r1, #0
    fb4a:	it	eq
    fb4c:	cmpeq	r0, #0
    fb4e:	itt	ne
    fb50:	movne.w	r1, #4294967295
    fb54:	movne.w	r0, #4294967295
    fb58:	b.w	fe58 <__aeabi_idiv0>
    fb5c:	sub.w	ip, sp, #8
    fb60:	strd	ip, lr, [sp, #-16]!
    fb64:	bl	fb74 <__udivmoddi4>
    fb68:	ldr.w	lr, [sp, #4]
    fb6c:	ldrd	r2, r3, [sp, #8]
    fb70:	add	sp, #16
    fb72:	bx	lr

0000fb74 <__udivmoddi4>:
    fb74:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    fb78:	mov	ip, r1
    fb7a:	mov	r6, r1
    fb7c:	mov	r4, r0
    fb7e:	ldr	r5, [sp, #32]
    fb80:	cmp	r3, #0
    fb82:	bne.n	fc26 <__udivmoddi4+0xb2>
    fb84:	cmp	r2, r1
    fb86:	mov	r7, r2
    fb88:	bls.n	fc64 <__udivmoddi4+0xf0>
    fb8a:	clz	lr, r2
    fb8e:	cmp.w	lr, #0
    fb92:	beq.n	fbac <__udivmoddi4+0x38>
    fb94:	rsb	r4, lr, #32
    fb98:	lsr.w	r4, r0, r4
    fb9c:	lsl.w	r6, r1, lr
    fba0:	orr.w	ip, r4, r6
    fba4:	lsl.w	r7, r2, lr
    fba8:	lsl.w	r4, r0, lr
    fbac:	mov.w	r9, r7, lsr #16
    fbb0:	lsrs	r2, r4, #16
    fbb2:	udiv	r0, ip, r9
    fbb6:	uxth.w	r8, r7
    fbba:	mls	r6, r9, r0, ip
    fbbe:	orr.w	r6, r2, r6, lsl #16
    fbc2:	mul.w	r3, r0, r8
    fbc6:	cmp	r3, r6
    fbc8:	bls.n	fbde <__udivmoddi4+0x6a>
    fbca:	adds	r6, r6, r7
    fbcc:	add.w	r2, r0, #4294967295
    fbd0:	bcs.w	fe18 <__udivmoddi4+0x2a4>
    fbd4:	cmp	r3, r6
    fbd6:	bls.w	fe18 <__udivmoddi4+0x2a4>
    fbda:	subs	r0, #2
    fbdc:	add	r6, r7
    fbde:	subs	r6, r6, r3
    fbe0:	uxth	r2, r4
    fbe2:	udiv	r3, r6, r9
    fbe6:	mls	r6, r9, r3, r6
    fbea:	orr.w	r4, r2, r6, lsl #16
    fbee:	mul.w	r8, r3, r8
    fbf2:	cmp	r8, r4
    fbf4:	bls.n	fc0a <__udivmoddi4+0x96>
    fbf6:	adds	r4, r4, r7
    fbf8:	add.w	r2, r3, #4294967295
    fbfc:	bcs.w	fe14 <__udivmoddi4+0x2a0>
    fc00:	cmp	r8, r4
    fc02:	bls.w	fe14 <__udivmoddi4+0x2a0>
    fc06:	subs	r3, #2
    fc08:	add	r4, r7
    fc0a:	rsb	r4, r8, r4
    fc0e:	orr.w	r0, r3, r0, lsl #16
    fc12:	movs	r1, #0
    fc14:	cmp	r5, #0
    fc16:	beq.n	fcde <__udivmoddi4+0x16a>
    fc18:	lsr.w	r4, r4, lr
    fc1c:	movs	r3, #0
    fc1e:	str	r4, [r5, #0]
    fc20:	str	r3, [r5, #4]
    fc22:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    fc26:	cmp	r3, r1
    fc28:	bls.n	fc3a <__udivmoddi4+0xc6>
    fc2a:	cmp	r5, #0
    fc2c:	beq.n	fcda <__udivmoddi4+0x166>
    fc2e:	movs	r1, #0
    fc30:	stmia.w	r5, {r0, r6}
    fc34:	mov	r0, r1
    fc36:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    fc3a:	clz	r1, r3
    fc3e:	cmp	r1, #0
    fc40:	bne.w	fd64 <__udivmoddi4+0x1f0>
    fc44:	cmp	r3, r6
    fc46:	bcc.n	fc4e <__udivmoddi4+0xda>
    fc48:	cmp	r2, r0
    fc4a:	bhi.w	fe3e <__udivmoddi4+0x2ca>
    fc4e:	subs	r4, r0, r2
    fc50:	sbc.w	r6, r6, r3
    fc54:	movs	r0, #1
    fc56:	mov	ip, r6
    fc58:	cmp	r5, #0
    fc5a:	beq.n	fcde <__udivmoddi4+0x16a>
    fc5c:	stmia.w	r5, {r4, ip}
    fc60:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    fc64:	cbnz	r2, fc6c <__udivmoddi4+0xf8>
    fc66:	movs	r7, #1
    fc68:	udiv	r7, r7, r2
    fc6c:	clz	lr, r7
    fc70:	cmp.w	lr, #0
    fc74:	bne.n	fce2 <__udivmoddi4+0x16e>
    fc76:	subs	r3, r6, r7
    fc78:	mov.w	r8, r7, lsr #16
    fc7c:	uxth.w	ip, r7
    fc80:	movs	r1, #1
    fc82:	udiv	r0, r3, r8
    fc86:	lsrs	r2, r4, #16
    fc88:	mls	r6, r8, r0, r3
    fc8c:	orr.w	r6, r2, r6, lsl #16
    fc90:	mul.w	r3, ip, r0
    fc94:	cmp	r3, r6
    fc96:	bls.n	fca8 <__udivmoddi4+0x134>
    fc98:	adds	r6, r6, r7
    fc9a:	add.w	r2, r0, #4294967295
    fc9e:	bcs.n	fca6 <__udivmoddi4+0x132>
    fca0:	cmp	r3, r6
    fca2:	bhi.w	fe42 <__udivmoddi4+0x2ce>
    fca6:	mov	r0, r2
    fca8:	subs	r6, r6, r3
    fcaa:	uxth	r2, r4
    fcac:	udiv	r3, r6, r8
    fcb0:	mls	r6, r8, r3, r6
    fcb4:	orr.w	r4, r2, r6, lsl #16
    fcb8:	mul.w	ip, ip, r3
    fcbc:	cmp	ip, r4
    fcbe:	bls.n	fcd0 <__udivmoddi4+0x15c>
    fcc0:	adds	r4, r4, r7
    fcc2:	add.w	r2, r3, #4294967295
    fcc6:	bcs.n	fcce <__udivmoddi4+0x15a>
    fcc8:	cmp	ip, r4
    fcca:	bhi.w	fe38 <__udivmoddi4+0x2c4>
    fcce:	mov	r3, r2
    fcd0:	rsb	r4, ip, r4
    fcd4:	orr.w	r0, r3, r0, lsl #16
    fcd8:	b.n	fc14 <__udivmoddi4+0xa0>
    fcda:	mov	r1, r5
    fcdc:	mov	r0, r5
    fcde:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    fce2:	rsb	r1, lr, #32
    fce6:	lsl.w	r3, r6, lr
    fcea:	lsl.w	r7, r7, lr
    fcee:	lsr.w	r9, r0, r1
    fcf2:	mov.w	r8, r7, lsr #16
    fcf6:	lsrs	r6, r1
    fcf8:	orr.w	r9, r9, r3
    fcfc:	udiv	sl, r6, r8
    fd00:	mov.w	r4, r9, lsr #16
    fd04:	mls	r6, r8, sl, r6
    fd08:	uxth.w	ip, r7
    fd0c:	orr.w	r3, r4, r6, lsl #16
    fd10:	mul.w	r2, sl, ip
    fd14:	cmp	r2, r3
    fd16:	lsl.w	r4, r0, lr
    fd1a:	bls.n	fd32 <__udivmoddi4+0x1be>
    fd1c:	adds	r3, r3, r7
    fd1e:	add.w	r1, sl, #4294967295
    fd22:	bcs.w	fe34 <__udivmoddi4+0x2c0>
    fd26:	cmp	r2, r3
    fd28:	bls.w	fe34 <__udivmoddi4+0x2c0>
    fd2c:	sub.w	sl, sl, #2
    fd30:	add	r3, r7
    fd32:	subs	r3, r3, r2
    fd34:	uxth.w	r9, r9
    fd38:	udiv	r1, r3, r8
    fd3c:	mls	r3, r8, r1, r3
    fd40:	orr.w	r3, r9, r3, lsl #16
    fd44:	mul.w	r6, r1, ip
    fd48:	cmp	r6, r3
    fd4a:	bls.n	fd5c <__udivmoddi4+0x1e8>
    fd4c:	adds	r3, r3, r7
    fd4e:	add.w	r2, r1, #4294967295
    fd52:	bcs.n	fe2c <__udivmoddi4+0x2b8>
    fd54:	cmp	r6, r3
    fd56:	bls.n	fe2c <__udivmoddi4+0x2b8>
    fd58:	subs	r1, #2
    fd5a:	add	r3, r7
    fd5c:	subs	r3, r3, r6
    fd5e:	orr.w	r1, r1, sl, lsl #16
    fd62:	b.n	fc82 <__udivmoddi4+0x10e>
    fd64:	rsb	lr, r1, #32
    fd68:	lsr.w	r4, r2, lr
    fd6c:	lsls	r3, r1
    fd6e:	orrs	r3, r4
    fd70:	lsr.w	r7, r0, lr
    fd74:	lsl.w	r4, r6, r1
    fd78:	mov.w	ip, r3, lsr #16
    fd7c:	lsr.w	r6, r6, lr
    fd80:	orrs	r4, r7
    fd82:	udiv	r9, r6, ip
    fd86:	lsrs	r7, r4, #16
    fd88:	mls	r6, ip, r9, r6
    fd8c:	uxth.w	r8, r3
    fd90:	orr.w	r6, r7, r6, lsl #16
    fd94:	mul.w	r7, r9, r8
    fd98:	cmp	r7, r6
    fd9a:	lsl.w	r2, r2, r1
    fd9e:	lsl.w	sl, r0, r1
    fda2:	bls.n	fdb6 <__udivmoddi4+0x242>
    fda4:	adds	r6, r6, r3
    fda6:	add.w	r0, r9, #4294967295
    fdaa:	bcs.n	fe30 <__udivmoddi4+0x2bc>
    fdac:	cmp	r7, r6
    fdae:	bls.n	fe30 <__udivmoddi4+0x2bc>
    fdb0:	sub.w	r9, r9, #2
    fdb4:	add	r6, r3
    fdb6:	subs	r6, r6, r7
    fdb8:	uxth	r0, r4
    fdba:	udiv	r4, r6, ip
    fdbe:	mls	r6, ip, r4, r6
    fdc2:	orr.w	r7, r0, r6, lsl #16
    fdc6:	mul.w	r8, r4, r8
    fdca:	cmp	r8, r7
    fdcc:	bls.n	fdde <__udivmoddi4+0x26a>
    fdce:	adds	r7, r7, r3
    fdd0:	add.w	r0, r4, #4294967295
    fdd4:	bcs.n	fe28 <__udivmoddi4+0x2b4>
    fdd6:	cmp	r8, r7
    fdd8:	bls.n	fe28 <__udivmoddi4+0x2b4>
    fdda:	subs	r4, #2
    fddc:	add	r7, r3
    fdde:	orr.w	r0, r4, r9, lsl #16
    fde2:	rsb	r7, r8, r7
    fde6:	umull	r8, r9, r0, r2
    fdea:	cmp	r7, r9
    fdec:	mov	r4, r8
    fdee:	mov	r6, r9
    fdf0:	bcc.n	fe1c <__udivmoddi4+0x2a8>
    fdf2:	beq.n	fe48 <__udivmoddi4+0x2d4>
    fdf4:	cbz	r5, fe50 <__udivmoddi4+0x2dc>
    fdf6:	subs.w	r3, sl, r4
    fdfa:	sbc.w	r7, r7, r6
    fdfe:	lsl.w	lr, r7, lr
    fe02:	lsrs	r3, r1
    fe04:	lsrs	r7, r1
    fe06:	orr.w	r3, lr, r3
    fe0a:	stmia.w	r5, {r3, r7}
    fe0e:	movs	r1, #0
    fe10:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    fe14:	mov	r3, r2
    fe16:	b.n	fc0a <__udivmoddi4+0x96>
    fe18:	mov	r0, r2
    fe1a:	b.n	fbde <__udivmoddi4+0x6a>
    fe1c:	subs.w	r4, r8, r2
    fe20:	sbc.w	r6, r9, r3
    fe24:	subs	r0, #1
    fe26:	b.n	fdf4 <__udivmoddi4+0x280>
    fe28:	mov	r4, r0
    fe2a:	b.n	fdde <__udivmoddi4+0x26a>
    fe2c:	mov	r1, r2
    fe2e:	b.n	fd5c <__udivmoddi4+0x1e8>
    fe30:	mov	r9, r0
    fe32:	b.n	fdb6 <__udivmoddi4+0x242>
    fe34:	mov	sl, r1
    fe36:	b.n	fd32 <__udivmoddi4+0x1be>
    fe38:	subs	r3, #2
    fe3a:	add	r4, r7
    fe3c:	b.n	fcd0 <__udivmoddi4+0x15c>
    fe3e:	mov	r0, r1
    fe40:	b.n	fc58 <__udivmoddi4+0xe4>
    fe42:	subs	r0, #2
    fe44:	add	r6, r7
    fe46:	b.n	fca8 <__udivmoddi4+0x134>
    fe48:	cmp	sl, r8
    fe4a:	bcc.n	fe1c <__udivmoddi4+0x2a8>
    fe4c:	mov	r6, r7
    fe4e:	b.n	fdf4 <__udivmoddi4+0x280>
    fe50:	mov	r1, r5
    fe52:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    fe56:	nop

0000fe58 <__aeabi_idiv0>:
    fe58:	bx	lr
    fe5a:	nop

0000fe5c <_calloc_r>:
    fe5c:	push	{r4, lr}
    fe5e:	mul.w	r1, r2, r1
    fe62:	bl	ff64 <_malloc_r>
    fe66:	mov	r4, r0
    fe68:	cbz	r0, fea2 <_calloc_r+0x46>
    fe6a:	ldr.w	r2, [r0, #-4]
    fe6e:	bic.w	r2, r2, #3
    fe72:	subs	r2, #4
    fe74:	cmp	r2, #36	; 0x24
    fe76:	bhi.n	feaa <_calloc_r+0x4e>
    fe78:	cmp	r2, #19
    fe7a:	bls.n	fea6 <_calloc_r+0x4a>
    fe7c:	movs	r3, #0
    fe7e:	cmp	r2, #27
    fe80:	str	r3, [r0, #0]
    fe82:	str	r3, [r0, #4]
    fe84:	bls.n	feb4 <_calloc_r+0x58>
    fe86:	cmp	r2, #36	; 0x24
    fe88:	str	r3, [r0, #8]
    fe8a:	str	r3, [r0, #12]
    fe8c:	iteee	ne
    fe8e:	addne.w	r2, r0, #16
    fe92:	streq	r3, [r0, #16]
    fe94:	streq	r3, [r0, #20]
    fe96:	addeq.w	r2, r0, #24
    fe9a:	movs	r3, #0
    fe9c:	str	r3, [r2, #0]
    fe9e:	str	r3, [r2, #4]
    fea0:	str	r3, [r2, #8]
    fea2:	mov	r0, r4
    fea4:	pop	{r4, pc}
    fea6:	mov	r2, r0
    fea8:	b.n	fe9a <_calloc_r+0x3e>
    feaa:	movs	r1, #0
    feac:	bl	106cc <memset>
    feb0:	mov	r0, r4
    feb2:	pop	{r4, pc}
    feb4:	add.w	r2, r0, #8
    feb8:	b.n	fe9a <_calloc_r+0x3e>
    feba:	nop

0000febc <__cxa_atexit>:
    febc:	mov	r3, r2
    febe:	mov	r2, r1
    fec0:	mov	r1, r0
    fec2:	movs	r0, #2
    fec4:	b.w	125d8 <__register_exitproc>

0000fec8 <fcvtf>:
    fec8:	push	{r4, r5, r6, r7, lr}
    feca:	sub	sp, #12
    fecc:	mov	r6, r2
    fece:	mov	r7, r3
    fed0:	mov	r5, r1
    fed2:	movs	r4, #0
    fed4:	bl	edec <__aeabi_f2d>
    fed8:	str	r7, [sp, #0]
    feda:	mov	r3, r6
    fedc:	mov	r2, r5
    fede:	str	r4, [sp, #4]
    fee0:	bl	13620 <fcvtbuf>
    fee4:	add	sp, #12
    fee6:	pop	{r4, r5, r6, r7, pc}

0000fee8 <__errno>:
    fee8:	ldr	r3, [pc, #4]	; (fef0 <__errno+0x8>)
    feea:	ldr	r0, [r3, #0]
    feec:	bx	lr
    feee:	nop
    fef0:	.word	0x1fff9190

0000fef4 <__libc_init_array>:
    fef4:	push	{r4, r5, r6, lr}
    fef6:	ldr	r6, [pc, #60]	; (ff34 <__libc_init_array+0x40>)
    fef8:	ldr	r5, [pc, #60]	; (ff38 <__libc_init_array+0x44>)
    fefa:	subs	r6, r6, r5
    fefc:	asrs	r6, r6, #2
    fefe:	it	ne
    ff00:	movne	r4, #0
    ff02:	beq.n	ff10 <__libc_init_array+0x1c>
    ff04:	adds	r4, #1
    ff06:	ldr.w	r3, [r5], #4
    ff0a:	blx	r3
    ff0c:	cmp	r6, r4
    ff0e:	bne.n	ff04 <__libc_init_array+0x10>
    ff10:	ldr	r6, [pc, #40]	; (ff3c <__libc_init_array+0x48>)
    ff12:	ldr	r5, [pc, #44]	; (ff40 <__libc_init_array+0x4c>)
    ff14:	subs	r6, r6, r5
    ff16:	bl	14b30 <_init>
    ff1a:	asrs	r6, r6, #2
    ff1c:	it	ne
    ff1e:	movne	r4, #0
    ff20:	beq.n	ff30 <__libc_init_array+0x3c>
    ff22:	adds	r4, #1
    ff24:	ldr.w	r3, [r5], #4
    ff28:	blx	r3
    ff2a:	cmp	r6, r4
    ff2c:	bne.n	ff22 <__libc_init_array+0x2e>
    ff2e:	pop	{r4, r5, r6, pc}
    ff30:	pop	{r4, r5, r6, pc}
    ff32:	nop
    ff34:	.word	0x00014b3c
    ff38:	.word	0x00014b3c
    ff3c:	.word	0x00014b8c
    ff40:	.word	0x00014b3c

0000ff44 <malloc>:
    ff44:	ldr	r3, [pc, #8]	; (ff50 <malloc+0xc>)
    ff46:	mov	r1, r0
    ff48:	ldr	r0, [r3, #0]
    ff4a:	b.w	ff64 <_malloc_r>
    ff4e:	nop
    ff50:	.word	0x1fff9190

0000ff54 <free>:
    ff54:	ldr	r3, [pc, #8]	; (ff60 <free+0xc>)
    ff56:	mov	r1, r0
    ff58:	ldr	r0, [r3, #0]
    ff5a:	b.w	137d0 <_free_r>
    ff5e:	nop
    ff60:	.word	0x1fff9190

0000ff64 <_malloc_r>:
    ff64:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ff68:	add.w	r5, r1, #11
    ff6c:	cmp	r5, #22
    ff6e:	sub	sp, #12
    ff70:	mov	r6, r0
    ff72:	bls.w	100b4 <_malloc_r+0x150>
    ff76:	bics.w	r5, r5, #7
    ff7a:	bmi.w	100fc <_malloc_r+0x198>
    ff7e:	cmp	r1, r5
    ff80:	bhi.w	100fc <_malloc_r+0x198>
    ff84:	bl	10768 <__malloc_lock>
    ff88:	cmp.w	r5, #504	; 0x1f8
    ff8c:	bcc.w	104c8 <_malloc_r+0x564>
    ff90:	lsrs	r3, r5, #9
    ff92:	beq.w	1010a <_malloc_r+0x1a6>
    ff96:	cmp	r3, #4
    ff98:	bhi.w	102a2 <_malloc_r+0x33e>
    ff9c:	lsrs	r0, r5, #6
    ff9e:	add.w	lr, r0, #57	; 0x39
    ffa2:	mov.w	r3, lr, lsl #1
    ffa6:	adds	r0, #56	; 0x38
    ffa8:	ldr	r7, [pc, #784]	; (102bc <_malloc_r+0x358>)
    ffaa:	add.w	r3, r7, r3, lsl #2
    ffae:	sub.w	r1, r3, #8
    ffb2:	ldr	r4, [r3, #4]
    ffb4:	cmp	r1, r4
    ffb6:	bne.n	ffc8 <_malloc_r+0x64>
    ffb8:	b.n	10114 <_malloc_r+0x1b0>
    ffba:	cmp	r2, #0
    ffbc:	bge.w	10118 <_malloc_r+0x1b4>
    ffc0:	ldr	r4, [r4, #12]
    ffc2:	cmp	r1, r4
    ffc4:	beq.w	10114 <_malloc_r+0x1b0>
    ffc8:	ldr	r3, [r4, #4]
    ffca:	bic.w	r3, r3, #3
    ffce:	subs	r2, r3, r5
    ffd0:	cmp	r2, #15
    ffd2:	ble.n	ffba <_malloc_r+0x56>
    ffd4:	ldr	r1, [pc, #740]	; (102bc <_malloc_r+0x358>)
    ffd6:	ldr	r4, [r7, #16]
    ffd8:	add.w	lr, r1, #8
    ffdc:	cmp	r4, lr
    ffde:	beq.w	10348 <_malloc_r+0x3e4>
    ffe2:	ldr	r3, [r4, #4]
    ffe4:	bic.w	r3, r3, #3
    ffe8:	subs	r2, r3, r5
    ffea:	cmp	r2, #15
    ffec:	bgt.w	10322 <_malloc_r+0x3be>
    fff0:	cmp	r2, #0
    fff2:	str.w	lr, [r1, #20]
    fff6:	str.w	lr, [r1, #16]
    fffa:	bge.w	1013a <_malloc_r+0x1d6>
    fffe:	cmp.w	r3, #512	; 0x200
   10002:	bcs.w	102d4 <_malloc_r+0x370>
   10006:	lsrs	r3, r3, #3
   10008:	add.w	ip, r3, #1
   1000c:	movs	r2, #1
   1000e:	asrs	r3, r3, #2
   10010:	lsl.w	r3, r2, r3
   10014:	ldr	r2, [r1, #4]
   10016:	ldr.w	r8, [r1, ip, lsl #3]
   1001a:	str.w	r8, [r4, #8]
   1001e:	add.w	r9, r1, ip, lsl #3
   10022:	orrs	r2, r3
   10024:	sub.w	r3, r9, #8
   10028:	str	r3, [r4, #12]
   1002a:	str	r2, [r1, #4]
   1002c:	str.w	r4, [r1, ip, lsl #3]
   10030:	str.w	r4, [r8, #12]
   10034:	asrs	r3, r0, #2
   10036:	movs	r4, #1
   10038:	lsls	r4, r3
   1003a:	cmp	r4, r2
   1003c:	bhi.w	10154 <_malloc_r+0x1f0>
   10040:	tst	r4, r2
   10042:	bne.n	10052 <_malloc_r+0xee>
   10044:	bic.w	r0, r0, #3
   10048:	lsls	r4, r4, #1
   1004a:	tst	r4, r2
   1004c:	add.w	r0, r0, #4
   10050:	beq.n	10048 <_malloc_r+0xe4>
   10052:	add.w	r9, r7, r0, lsl #3
   10056:	mov	ip, r9
   10058:	mov	r8, r0
   1005a:	ldr.w	r1, [ip, #12]
   1005e:	cmp	ip, r1
   10060:	bne.n	10072 <_malloc_r+0x10e>
   10062:	b.n	1034c <_malloc_r+0x3e8>
   10064:	cmp	r2, #0
   10066:	bge.w	1036c <_malloc_r+0x408>
   1006a:	ldr	r1, [r1, #12]
   1006c:	cmp	ip, r1
   1006e:	beq.w	1034c <_malloc_r+0x3e8>
   10072:	ldr	r3, [r1, #4]
   10074:	bic.w	r3, r3, #3
   10078:	subs	r2, r3, r5
   1007a:	cmp	r2, #15
   1007c:	ble.n	10064 <_malloc_r+0x100>
   1007e:	mov	r4, r1
   10080:	ldr.w	ip, [r1, #12]
   10084:	ldr.w	r8, [r4, #8]!
   10088:	adds	r3, r1, r5
   1008a:	orr.w	r5, r5, #1
   1008e:	str	r5, [r1, #4]
   10090:	orr.w	r1, r2, #1
   10094:	str.w	ip, [r8, #12]
   10098:	mov	r0, r6
   1009a:	str.w	r8, [ip, #8]
   1009e:	str	r3, [r7, #20]
   100a0:	str	r3, [r7, #16]
   100a2:	str.w	lr, [r3, #12]
   100a6:	str.w	lr, [r3, #8]
   100aa:	str	r1, [r3, #4]
   100ac:	str	r2, [r3, r2]
   100ae:	bl	1076c <__malloc_unlock>
   100b2:	b.n	100f4 <_malloc_r+0x190>
   100b4:	cmp	r1, #16
   100b6:	bhi.n	100fc <_malloc_r+0x198>
   100b8:	bl	10768 <__malloc_lock>
   100bc:	movs	r5, #16
   100be:	movs	r3, #6
   100c0:	movs	r0, #2
   100c2:	ldr	r7, [pc, #504]	; (102bc <_malloc_r+0x358>)
   100c4:	add.w	r3, r7, r3, lsl #2
   100c8:	sub.w	r2, r3, #8
   100cc:	ldr	r4, [r3, #4]
   100ce:	cmp	r4, r2
   100d0:	beq.w	1035e <_malloc_r+0x3fa>
   100d4:	ldr	r3, [r4, #4]
   100d6:	ldr	r1, [r4, #12]
   100d8:	ldr	r5, [r4, #8]
   100da:	bic.w	r3, r3, #3
   100de:	add	r3, r4
   100e0:	mov	r0, r6
   100e2:	ldr	r2, [r3, #4]
   100e4:	str	r1, [r5, #12]
   100e6:	orr.w	r2, r2, #1
   100ea:	str	r5, [r1, #8]
   100ec:	str	r2, [r3, #4]
   100ee:	bl	1076c <__malloc_unlock>
   100f2:	adds	r4, #8
   100f4:	mov	r0, r4
   100f6:	add	sp, #12
   100f8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   100fc:	movs	r4, #0
   100fe:	movs	r3, #12
   10100:	mov	r0, r4
   10102:	str	r3, [r6, #0]
   10104:	add	sp, #12
   10106:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1010a:	movs	r3, #128	; 0x80
   1010c:	mov.w	lr, #64	; 0x40
   10110:	movs	r0, #63	; 0x3f
   10112:	b.n	ffa8 <_malloc_r+0x44>
   10114:	mov	r0, lr
   10116:	b.n	ffd4 <_malloc_r+0x70>
   10118:	add	r3, r4
   1011a:	ldr	r1, [r4, #12]
   1011c:	ldr	r2, [r3, #4]
   1011e:	ldr	r5, [r4, #8]
   10120:	orr.w	r2, r2, #1
   10124:	str	r1, [r5, #12]
   10126:	mov	r0, r6
   10128:	str	r5, [r1, #8]
   1012a:	str	r2, [r3, #4]
   1012c:	bl	1076c <__malloc_unlock>
   10130:	adds	r4, #8
   10132:	mov	r0, r4
   10134:	add	sp, #12
   10136:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1013a:	add	r3, r4
   1013c:	mov	r0, r6
   1013e:	ldr	r2, [r3, #4]
   10140:	orr.w	r2, r2, #1
   10144:	str	r2, [r3, #4]
   10146:	bl	1076c <__malloc_unlock>
   1014a:	adds	r4, #8
   1014c:	mov	r0, r4
   1014e:	add	sp, #12
   10150:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10154:	ldr	r4, [r7, #8]
   10156:	ldr	r3, [r4, #4]
   10158:	bic.w	r8, r3, #3
   1015c:	cmp	r8, r5
   1015e:	bcc.n	1016a <_malloc_r+0x206>
   10160:	rsb	r3, r5, r8
   10164:	cmp	r3, #15
   10166:	bgt.w	10282 <_malloc_r+0x31e>
   1016a:	ldr	r3, [pc, #340]	; (102c0 <_malloc_r+0x35c>)
   1016c:	ldr.w	r9, [pc, #352]	; 102d0 <_malloc_r+0x36c>
   10170:	ldr	r2, [r3, #0]
   10172:	ldr.w	r3, [r9]
   10176:	adds	r3, #1
   10178:	add	r2, r5
   1017a:	add.w	sl, r4, r8
   1017e:	beq.w	10442 <_malloc_r+0x4de>
   10182:	add.w	r2, r2, #4096	; 0x1000
   10186:	adds	r2, #15
   10188:	bic.w	r2, r2, #4080	; 0xff0
   1018c:	bic.w	r2, r2, #15
   10190:	mov	r1, r2
   10192:	mov	r0, r6
   10194:	str	r2, [sp, #4]
   10196:	bl	10b50 <_sbrk_r>
   1019a:	cmp.w	r0, #4294967295
   1019e:	mov	fp, r0
   101a0:	ldr	r2, [sp, #4]
   101a2:	beq.w	10456 <_malloc_r+0x4f2>
   101a6:	cmp	sl, r0
   101a8:	bhi.w	103a4 <_malloc_r+0x440>
   101ac:	ldr	r3, [pc, #276]	; (102c4 <_malloc_r+0x360>)
   101ae:	ldr	r1, [r3, #0]
   101b0:	cmp	sl, fp
   101b2:	add	r1, r2
   101b4:	str	r1, [r3, #0]
   101b6:	beq.w	10460 <_malloc_r+0x4fc>
   101ba:	ldr.w	r0, [r9]
   101be:	ldr.w	lr, [pc, #272]	; 102d0 <_malloc_r+0x36c>
   101c2:	adds	r0, #1
   101c4:	ittet	ne
   101c6:	rsbne	sl, sl, fp
   101ca:	addne	r1, sl
   101cc:	streq.w	fp, [lr]
   101d0:	strne	r1, [r3, #0]
   101d2:	ands.w	r1, fp, #7
   101d6:	beq.w	10408 <_malloc_r+0x4a4>
   101da:	rsb	r0, r1, #8
   101de:	rsb	r1, r1, #4096	; 0x1000
   101e2:	add	fp, r0
   101e4:	adds	r1, #8
   101e6:	add	r2, fp
   101e8:	ubfx	r2, r2, #0, #12
   101ec:	rsb	r9, r2, r1
   101f0:	mov	r1, r9
   101f2:	mov	r0, r6
   101f4:	str	r3, [sp, #4]
   101f6:	bl	10b50 <_sbrk_r>
   101fa:	adds	r3, r0, #1
   101fc:	ldr	r3, [sp, #4]
   101fe:	beq.w	10480 <_malloc_r+0x51c>
   10202:	rsb	r2, fp, r0
   10206:	add	r2, r9
   10208:	orr.w	r2, r2, #1
   1020c:	ldr	r1, [r3, #0]
   1020e:	str.w	fp, [r7, #8]
   10212:	add	r1, r9
   10214:	cmp	r4, r7
   10216:	str.w	r2, [fp, #4]
   1021a:	str	r1, [r3, #0]
   1021c:	ldr.w	r9, [pc, #164]	; 102c4 <_malloc_r+0x360>
   10220:	beq.n	10250 <_malloc_r+0x2ec>
   10222:	cmp.w	r8, #15
   10226:	bls.w	10424 <_malloc_r+0x4c0>
   1022a:	ldr	r2, [r4, #4]
   1022c:	sub.w	r3, r8, #12
   10230:	bic.w	r3, r3, #7
   10234:	adds	r0, r4, r3
   10236:	and.w	r2, r2, #1
   1023a:	mov.w	lr, #5
   1023e:	orrs	r2, r3
   10240:	cmp	r3, #15
   10242:	str	r2, [r4, #4]
   10244:	str.w	lr, [r0, #4]
   10248:	str.w	lr, [r0, #8]
   1024c:	bhi.w	10488 <_malloc_r+0x524>
   10250:	ldr	r3, [pc, #116]	; (102c8 <_malloc_r+0x364>)
   10252:	ldr	r4, [r7, #8]
   10254:	ldr	r2, [r3, #0]
   10256:	cmp	r1, r2
   10258:	it	hi
   1025a:	strhi	r1, [r3, #0]
   1025c:	ldr	r3, [pc, #108]	; (102cc <_malloc_r+0x368>)
   1025e:	ldr	r2, [r3, #0]
   10260:	cmp	r1, r2
   10262:	ldr	r2, [r4, #4]
   10264:	it	hi
   10266:	strhi	r1, [r3, #0]
   10268:	bic.w	r2, r2, #3
   1026c:	cmp	r5, r2
   1026e:	sub.w	r3, r2, r5
   10272:	bhi.n	10278 <_malloc_r+0x314>
   10274:	cmp	r3, #15
   10276:	bgt.n	10282 <_malloc_r+0x31e>
   10278:	mov	r0, r6
   1027a:	bl	1076c <__malloc_unlock>
   1027e:	movs	r4, #0
   10280:	b.n	100f4 <_malloc_r+0x190>
   10282:	adds	r2, r4, r5
   10284:	orr.w	r3, r3, #1
   10288:	orr.w	r5, r5, #1
   1028c:	str	r5, [r4, #4]
   1028e:	mov	r0, r6
   10290:	str	r2, [r7, #8]
   10292:	str	r3, [r2, #4]
   10294:	bl	1076c <__malloc_unlock>
   10298:	adds	r4, #8
   1029a:	mov	r0, r4
   1029c:	add	sp, #12
   1029e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   102a2:	cmp	r3, #20
   102a4:	bls.n	1038a <_malloc_r+0x426>
   102a6:	cmp	r3, #84	; 0x54
   102a8:	bhi.w	103f4 <_malloc_r+0x490>
   102ac:	lsrs	r0, r5, #12
   102ae:	add.w	lr, r0, #111	; 0x6f
   102b2:	mov.w	r3, lr, lsl #1
   102b6:	adds	r0, #110	; 0x6e
   102b8:	b.n	ffa8 <_malloc_r+0x44>
   102ba:	nop
   102bc:	.word	0x1fff9300
   102c0:	.word	0x200031ec
   102c4:	.word	0x200031f0
   102c8:	.word	0x200031e8
   102cc:	.word	0x200031e4
   102d0:	.word	0x1fff970c
   102d4:	lsrs	r2, r3, #9
   102d6:	cmp	r2, #4
   102d8:	bls.n	10398 <_malloc_r+0x434>
   102da:	cmp	r2, #20
   102dc:	bhi.w	10446 <_malloc_r+0x4e2>
   102e0:	add.w	r1, r2, #92	; 0x5c
   102e4:	lsls	r1, r1, #1
   102e6:	adds	r2, #91	; 0x5b
   102e8:	add.w	ip, r7, r1, lsl #2
   102ec:	ldr.w	r1, [r7, r1, lsl #2]
   102f0:	ldr.w	r8, [pc, #476]	; 104d0 <_malloc_r+0x56c>
   102f4:	sub.w	ip, ip, #8
   102f8:	cmp	ip, r1
   102fa:	beq.w	1040e <_malloc_r+0x4aa>
   102fe:	ldr	r2, [r1, #4]
   10300:	bic.w	r2, r2, #3
   10304:	cmp	r3, r2
   10306:	bcs.n	1030e <_malloc_r+0x3aa>
   10308:	ldr	r1, [r1, #8]
   1030a:	cmp	ip, r1
   1030c:	bne.n	102fe <_malloc_r+0x39a>
   1030e:	ldr.w	ip, [r1, #12]
   10312:	ldr	r2, [r7, #4]
   10314:	str.w	ip, [r4, #12]
   10318:	str	r1, [r4, #8]
   1031a:	str.w	r4, [ip, #8]
   1031e:	str	r4, [r1, #12]
   10320:	b.n	10034 <_malloc_r+0xd0>
   10322:	adds	r3, r4, r5
   10324:	orr.w	r7, r2, #1
   10328:	orr.w	r5, r5, #1
   1032c:	str	r5, [r4, #4]
   1032e:	mov	r0, r6
   10330:	str	r3, [r1, #20]
   10332:	str	r3, [r1, #16]
   10334:	str.w	lr, [r3, #12]
   10338:	str.w	lr, [r3, #8]
   1033c:	str	r7, [r3, #4]
   1033e:	str	r2, [r3, r2]
   10340:	adds	r4, #8
   10342:	bl	1076c <__malloc_unlock>
   10346:	b.n	100f4 <_malloc_r+0x190>
   10348:	ldr	r2, [r1, #4]
   1034a:	b.n	10034 <_malloc_r+0xd0>
   1034c:	add.w	r8, r8, #1
   10350:	tst.w	r8, #3
   10354:	add.w	ip, ip, #8
   10358:	bne.w	1005a <_malloc_r+0xf6>
   1035c:	b.n	103c0 <_malloc_r+0x45c>
   1035e:	ldr	r4, [r3, #12]
   10360:	cmp	r3, r4
   10362:	it	eq
   10364:	addeq	r0, #2
   10366:	beq.w	ffd4 <_malloc_r+0x70>
   1036a:	b.n	100d4 <_malloc_r+0x170>
   1036c:	add	r3, r1
   1036e:	mov	r4, r1
   10370:	ldr	r2, [r3, #4]
   10372:	ldr	r1, [r1, #12]
   10374:	ldr.w	r5, [r4, #8]!
   10378:	orr.w	r2, r2, #1
   1037c:	str	r2, [r3, #4]
   1037e:	mov	r0, r6
   10380:	str	r1, [r5, #12]
   10382:	str	r5, [r1, #8]
   10384:	bl	1076c <__malloc_unlock>
   10388:	b.n	100f4 <_malloc_r+0x190>
   1038a:	add.w	lr, r3, #92	; 0x5c
   1038e:	add.w	r0, r3, #91	; 0x5b
   10392:	mov.w	r3, lr, lsl #1
   10396:	b.n	ffa8 <_malloc_r+0x44>
   10398:	lsrs	r2, r3, #6
   1039a:	add.w	r1, r2, #57	; 0x39
   1039e:	lsls	r1, r1, #1
   103a0:	adds	r2, #56	; 0x38
   103a2:	b.n	102e8 <_malloc_r+0x384>
   103a4:	cmp	r4, r7
   103a6:	ldr	r3, [pc, #296]	; (104d0 <_malloc_r+0x56c>)
   103a8:	beq.w	101ac <_malloc_r+0x248>
   103ac:	ldr	r4, [r3, #8]
   103ae:	ldr	r2, [r4, #4]
   103b0:	bic.w	r2, r2, #3
   103b4:	b.n	1026c <_malloc_r+0x308>
   103b6:	ldr.w	r3, [r9], #-8
   103ba:	cmp	r9, r3
   103bc:	bne.w	104c4 <_malloc_r+0x560>
   103c0:	tst.w	r0, #3
   103c4:	add.w	r0, r0, #4294967295
   103c8:	bne.n	103b6 <_malloc_r+0x452>
   103ca:	ldr	r3, [r7, #4]
   103cc:	bic.w	r3, r3, r4
   103d0:	str	r3, [r7, #4]
   103d2:	lsls	r4, r4, #1
   103d4:	cmp	r4, r3
   103d6:	bhi.w	10154 <_malloc_r+0x1f0>
   103da:	cmp	r4, #0
   103dc:	beq.w	10154 <_malloc_r+0x1f0>
   103e0:	tst	r4, r3
   103e2:	mov	r0, r8
   103e4:	bne.w	10052 <_malloc_r+0xee>
   103e8:	lsls	r4, r4, #1
   103ea:	tst	r4, r3
   103ec:	add.w	r0, r0, #4
   103f0:	beq.n	103e8 <_malloc_r+0x484>
   103f2:	b.n	10052 <_malloc_r+0xee>
   103f4:	cmp.w	r3, #340	; 0x154
   103f8:	bhi.n	1042c <_malloc_r+0x4c8>
   103fa:	lsrs	r0, r5, #15
   103fc:	add.w	lr, r0, #120	; 0x78
   10400:	mov.w	r3, lr, lsl #1
   10404:	adds	r0, #119	; 0x77
   10406:	b.n	ffa8 <_malloc_r+0x44>
   10408:	mov.w	r1, #4096	; 0x1000
   1040c:	b.n	101e6 <_malloc_r+0x282>
   1040e:	movs	r1, #1
   10410:	ldr.w	r3, [r8, #4]
   10414:	asrs	r2, r2, #2
   10416:	lsl.w	r2, r1, r2
   1041a:	orrs	r2, r3
   1041c:	str.w	r2, [r8, #4]
   10420:	mov	r1, ip
   10422:	b.n	10314 <_malloc_r+0x3b0>
   10424:	movs	r3, #1
   10426:	str.w	r3, [fp, #4]
   1042a:	b.n	10278 <_malloc_r+0x314>
   1042c:	movw	r2, #1364	; 0x554
   10430:	cmp	r3, r2
   10432:	bhi.n	10476 <_malloc_r+0x512>
   10434:	lsrs	r0, r5, #18
   10436:	add.w	lr, r0, #125	; 0x7d
   1043a:	mov.w	r3, lr, lsl #1
   1043e:	adds	r0, #124	; 0x7c
   10440:	b.n	ffa8 <_malloc_r+0x44>
   10442:	adds	r2, #16
   10444:	b.n	10190 <_malloc_r+0x22c>
   10446:	cmp	r2, #84	; 0x54
   10448:	bhi.n	10498 <_malloc_r+0x534>
   1044a:	lsrs	r2, r3, #12
   1044c:	add.w	r1, r2, #111	; 0x6f
   10450:	lsls	r1, r1, #1
   10452:	adds	r2, #110	; 0x6e
   10454:	b.n	102e8 <_malloc_r+0x384>
   10456:	ldr	r4, [r7, #8]
   10458:	ldr	r2, [r4, #4]
   1045a:	bic.w	r2, r2, #3
   1045e:	b.n	1026c <_malloc_r+0x308>
   10460:	ubfx	r0, sl, #0, #12
   10464:	cmp	r0, #0
   10466:	bne.w	101ba <_malloc_r+0x256>
   1046a:	add	r2, r8
   1046c:	ldr	r3, [r7, #8]
   1046e:	orr.w	r2, r2, #1
   10472:	str	r2, [r3, #4]
   10474:	b.n	10250 <_malloc_r+0x2ec>
   10476:	movs	r3, #254	; 0xfe
   10478:	mov.w	lr, #127	; 0x7f
   1047c:	movs	r0, #126	; 0x7e
   1047e:	b.n	ffa8 <_malloc_r+0x44>
   10480:	movs	r2, #1
   10482:	mov.w	r9, #0
   10486:	b.n	1020c <_malloc_r+0x2a8>
   10488:	add.w	r1, r4, #8
   1048c:	mov	r0, r6
   1048e:	bl	137d0 <_free_r>
   10492:	ldr.w	r1, [r9]
   10496:	b.n	10250 <_malloc_r+0x2ec>
   10498:	cmp.w	r2, #340	; 0x154
   1049c:	bhi.n	104aa <_malloc_r+0x546>
   1049e:	lsrs	r2, r3, #15
   104a0:	add.w	r1, r2, #120	; 0x78
   104a4:	lsls	r1, r1, #1
   104a6:	adds	r2, #119	; 0x77
   104a8:	b.n	102e8 <_malloc_r+0x384>
   104aa:	movw	r1, #1364	; 0x554
   104ae:	cmp	r2, r1
   104b0:	bhi.n	104be <_malloc_r+0x55a>
   104b2:	lsrs	r2, r3, #18
   104b4:	add.w	r1, r2, #125	; 0x7d
   104b8:	lsls	r1, r1, #1
   104ba:	adds	r2, #124	; 0x7c
   104bc:	b.n	102e8 <_malloc_r+0x384>
   104be:	movs	r1, #254	; 0xfe
   104c0:	movs	r2, #126	; 0x7e
   104c2:	b.n	102e8 <_malloc_r+0x384>
   104c4:	ldr	r3, [r7, #4]
   104c6:	b.n	103d2 <_malloc_r+0x46e>
   104c8:	lsrs	r0, r5, #3
   104ca:	adds	r3, r0, #1
   104cc:	lsls	r3, r3, #1
   104ce:	b.n	100c2 <_malloc_r+0x15e>
   104d0:	.word	0x1fff9300

000104d4 <__ascii_mbtowc>:
   104d4:	sub	sp, #8
   104d6:	cbz	r1, 104ec <__ascii_mbtowc+0x18>
   104d8:	cbz	r2, 104f2 <__ascii_mbtowc+0x1e>
   104da:	cbz	r3, 104f8 <__ascii_mbtowc+0x24>
   104dc:	ldrb	r3, [r2, #0]
   104de:	str	r3, [r1, #0]
   104e0:	ldrb	r2, [r2, #0]
   104e2:	adds	r0, r2, #0
   104e4:	it	ne
   104e6:	movne	r0, #1
   104e8:	add	sp, #8
   104ea:	bx	lr
   104ec:	add	r1, sp, #4
   104ee:	cmp	r2, #0
   104f0:	bne.n	104da <__ascii_mbtowc+0x6>
   104f2:	mov	r0, r2
   104f4:	add	sp, #8
   104f6:	bx	lr
   104f8:	mvn.w	r0, #1
   104fc:	b.n	104e8 <__ascii_mbtowc+0x14>
   104fe:	nop

00010500 <memchr>:
   10500:	and.w	r1, r1, #255	; 0xff
   10504:	cmp	r2, #16
   10506:	blt.n	10560 <memchr+0x60>
   10508:	tst.w	r0, #7
   1050c:	beq.n	10520 <memchr+0x20>
   1050e:	ldrb.w	r3, [r0], #1
   10512:	subs	r2, #1
   10514:	cmp	r3, r1
   10516:	beq.n	10574 <memchr+0x74>
   10518:	tst.w	r0, #7
   1051c:	cbz	r2, 10570 <memchr+0x70>
   1051e:	bne.n	1050e <memchr+0xe>
   10520:	push	{r4, r5, r6, r7}
   10522:	orr.w	r1, r1, r1, lsl #8
   10526:	orr.w	r1, r1, r1, lsl #16
   1052a:	bic.w	r4, r2, #7
   1052e:	mvns.w	r7, #0
   10532:	movs	r3, #0
   10534:	ldrd	r5, r6, [r0], #8
   10538:	subs	r4, #8
   1053a:	eor.w	r5, r5, r1
   1053e:	eor.w	r6, r6, r1
   10542:	uadd8	r5, r5, r7
   10546:	sel	r5, r3, r7
   1054a:	uadd8	r6, r6, r7
   1054e:	sel	r6, r5, r7
   10552:	cbnz	r6, 10578 <memchr+0x78>
   10554:	bne.n	10534 <memchr+0x34>
   10556:	pop	{r4, r5, r6, r7}
   10558:	and.w	r1, r1, #255	; 0xff
   1055c:	and.w	r2, r2, #7
   10560:	cbz	r2, 10570 <memchr+0x70>
   10562:	ldrb.w	r3, [r0], #1
   10566:	subs	r2, #1
   10568:	eor.w	r3, r3, r1
   1056c:	cbz	r3, 10574 <memchr+0x74>
   1056e:	bne.n	10562 <memchr+0x62>
   10570:	movs	r0, #0
   10572:	bx	lr
   10574:	subs	r0, #1
   10576:	bx	lr
   10578:	cmp	r5, #0
   1057a:	itte	eq
   1057c:	moveq	r5, r6
   1057e:	subeq	r0, #3
   10580:	subne	r0, #7
   10582:	tst.w	r5, #1
   10586:	bne.n	10598 <memchr+0x98>
   10588:	adds	r0, #1
   1058a:	tst.w	r5, #256	; 0x100
   1058e:	ittt	eq
   10590:	addeq	r0, #1
   10592:	tsteq.w	r5, #98304	; 0x18000
   10596:	addeq	r0, #1
   10598:	pop	{r4, r5, r6, r7}
   1059a:	subs	r0, #1
   1059c:	bx	lr
   1059e:	nop

000105a0 <memcmp>:
   105a0:	cmp	r2, #3
   105a2:	push	{r4, r5, r6}
   105a4:	bls.n	105f4 <memcmp+0x54>
   105a6:	orr.w	r3, r0, r1
   105aa:	lsls	r3, r3, #30
   105ac:	beq.n	105d2 <memcmp+0x32>
   105ae:	ldrb	r4, [r0, #0]
   105b0:	ldrb	r5, [r1, #0]
   105b2:	cmp	r4, r5
   105b4:	bne.n	105fc <memcmp+0x5c>
   105b6:	add	r2, r0
   105b8:	adds	r3, r0, #1
   105ba:	b.n	105c8 <memcmp+0x28>
   105bc:	ldrb.w	r4, [r3], #1
   105c0:	ldrb.w	r5, [r1, #1]!
   105c4:	cmp	r4, r5
   105c6:	bne.n	105fc <memcmp+0x5c>
   105c8:	cmp	r3, r2
   105ca:	bne.n	105bc <memcmp+0x1c>
   105cc:	movs	r0, #0
   105ce:	pop	{r4, r5, r6}
   105d0:	bx	lr
   105d2:	mov	r4, r1
   105d4:	mov	r3, r0
   105d6:	ldr	r6, [r3, #0]
   105d8:	ldr	r5, [r4, #0]
   105da:	cmp	r6, r5
   105dc:	mov	r0, r3
   105de:	mov	r1, r4
   105e0:	add.w	r3, r3, #4
   105e4:	add.w	r4, r4, #4
   105e8:	bne.n	105ae <memcmp+0xe>
   105ea:	subs	r2, #4
   105ec:	cmp	r2, #3
   105ee:	mov	r0, r3
   105f0:	mov	r1, r4
   105f2:	bhi.n	105d6 <memcmp+0x36>
   105f4:	cmp	r2, #0
   105f6:	bne.n	105ae <memcmp+0xe>
   105f8:	mov	r0, r2
   105fa:	b.n	105ce <memcmp+0x2e>
   105fc:	subs	r0, r4, r5
   105fe:	pop	{r4, r5, r6}
   10600:	bx	lr
   10602:	nop

00010604 <memmove>:
   10604:	cmp	r0, r1
   10606:	push	{r4, r5, r6, r7, lr}
   10608:	bls.n	10626 <memmove+0x22>
   1060a:	adds	r3, r1, r2
   1060c:	cmp	r0, r3
   1060e:	bcs.n	10626 <memmove+0x22>
   10610:	adds	r1, r0, r2
   10612:	cmp	r2, #0
   10614:	beq.n	106ba <memmove+0xb6>
   10616:	subs	r2, r3, r2
   10618:	ldrb.w	r4, [r3, #-1]!
   1061c:	strb.w	r4, [r1, #-1]!
   10620:	cmp	r3, r2
   10622:	bne.n	10618 <memmove+0x14>
   10624:	pop	{r4, r5, r6, r7, pc}
   10626:	cmp	r2, #15
   10628:	bls.n	106bc <memmove+0xb8>
   1062a:	orr.w	r3, r1, r0
   1062e:	lsls	r3, r3, #30
   10630:	bne.n	106c0 <memmove+0xbc>
   10632:	add.w	r4, r0, #16
   10636:	add.w	r3, r1, #16
   1063a:	mov	r5, r2
   1063c:	ldr.w	r6, [r3, #-16]
   10640:	str.w	r6, [r4, #-16]
   10644:	ldr.w	r6, [r3, #-12]
   10648:	str.w	r6, [r4, #-12]
   1064c:	ldr.w	r6, [r3, #-8]
   10650:	str.w	r6, [r4, #-8]
   10654:	subs	r5, #16
   10656:	ldr.w	r6, [r3, #-4]
   1065a:	str.w	r6, [r4, #-4]
   1065e:	cmp	r5, #15
   10660:	add.w	r3, r3, #16
   10664:	add.w	r4, r4, #16
   10668:	bhi.n	1063c <memmove+0x38>
   1066a:	sub.w	r3, r2, #16
   1066e:	bic.w	r3, r3, #15
   10672:	and.w	lr, r2, #15
   10676:	adds	r3, #16
   10678:	cmp.w	lr, #3
   1067c:	add	r1, r3
   1067e:	add	r3, r0
   10680:	bls.n	106c6 <memmove+0xc2>
   10682:	subs	r6, r3, #4
   10684:	mov	r5, r1
   10686:	mov	r4, lr
   10688:	subs	r4, #4
   1068a:	ldr.w	r7, [r5], #4
   1068e:	str.w	r7, [r6, #4]!
   10692:	cmp	r4, #3
   10694:	bhi.n	10688 <memmove+0x84>
   10696:	sub.w	r4, lr, #4
   1069a:	bic.w	r4, r4, #3
   1069e:	adds	r4, #4
   106a0:	add	r3, r4
   106a2:	add	r1, r4
   106a4:	and.w	r2, r2, #3
   106a8:	cbz	r2, 106c4 <memmove+0xc0>
   106aa:	subs	r3, #1
   106ac:	add	r2, r1
   106ae:	ldrb.w	r4, [r1], #1
   106b2:	strb.w	r4, [r3, #1]!
   106b6:	cmp	r2, r1
   106b8:	bne.n	106ae <memmove+0xaa>
   106ba:	pop	{r4, r5, r6, r7, pc}
   106bc:	mov	r3, r0
   106be:	b.n	106a8 <memmove+0xa4>
   106c0:	mov	r3, r0
   106c2:	b.n	106aa <memmove+0xa6>
   106c4:	pop	{r4, r5, r6, r7, pc}
   106c6:	mov	r2, lr
   106c8:	b.n	106a8 <memmove+0xa4>
   106ca:	nop

000106cc <memset>:
   106cc:	push	{r4, r5, r6}
   106ce:	lsls	r4, r0, #30
   106d0:	beq.n	10760 <memset+0x94>
   106d2:	subs	r4, r2, #1
   106d4:	cmp	r2, #0
   106d6:	beq.n	1075c <memset+0x90>
   106d8:	uxtb	r5, r1
   106da:	mov	r3, r0
   106dc:	b.n	106e4 <memset+0x18>
   106de:	subs	r2, r4, #1
   106e0:	cbz	r4, 1075c <memset+0x90>
   106e2:	mov	r4, r2
   106e4:	strb.w	r5, [r3], #1
   106e8:	lsls	r2, r3, #30
   106ea:	bne.n	106de <memset+0x12>
   106ec:	cmp	r4, #3
   106ee:	bls.n	1074e <memset+0x82>
   106f0:	uxtb	r5, r1
   106f2:	orr.w	r5, r5, r5, lsl #8
   106f6:	cmp	r4, #15
   106f8:	orr.w	r5, r5, r5, lsl #16
   106fc:	bls.n	10732 <memset+0x66>
   106fe:	add.w	r2, r3, #16
   10702:	mov	r6, r4
   10704:	subs	r6, #16
   10706:	cmp	r6, #15
   10708:	str.w	r5, [r2, #-16]
   1070c:	str.w	r5, [r2, #-12]
   10710:	str.w	r5, [r2, #-8]
   10714:	str.w	r5, [r2, #-4]
   10718:	add.w	r2, r2, #16
   1071c:	bhi.n	10704 <memset+0x38>
   1071e:	sub.w	r2, r4, #16
   10722:	bic.w	r2, r2, #15
   10726:	and.w	r4, r4, #15
   1072a:	adds	r2, #16
   1072c:	cmp	r4, #3
   1072e:	add	r3, r2
   10730:	bls.n	1074e <memset+0x82>
   10732:	mov	r6, r3
   10734:	mov	r2, r4
   10736:	subs	r2, #4
   10738:	cmp	r2, #3
   1073a:	str.w	r5, [r6], #4
   1073e:	bhi.n	10736 <memset+0x6a>
   10740:	subs	r2, r4, #4
   10742:	bic.w	r2, r2, #3
   10746:	adds	r2, #4
   10748:	add	r3, r2
   1074a:	and.w	r4, r4, #3
   1074e:	cbz	r4, 1075c <memset+0x90>
   10750:	uxtb	r1, r1
   10752:	add	r4, r3
   10754:	strb.w	r1, [r3], #1
   10758:	cmp	r3, r4
   1075a:	bne.n	10754 <memset+0x88>
   1075c:	pop	{r4, r5, r6}
   1075e:	bx	lr
   10760:	mov	r4, r2
   10762:	mov	r3, r0
   10764:	b.n	106ec <memset+0x20>
   10766:	nop

00010768 <__malloc_lock>:
   10768:	bx	lr
   1076a:	nop

0001076c <__malloc_unlock>:
   1076c:	bx	lr
   1076e:	nop

00010770 <_realloc_r>:
   10770:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10774:	mov	r7, r2
   10776:	sub	sp, #12
   10778:	cmp	r1, #0
   1077a:	beq.w	10900 <_realloc_r+0x190>
   1077e:	mov	r6, r1
   10780:	mov	r9, r0
   10782:	add.w	r5, r7, #11
   10786:	bl	10768 <__malloc_lock>
   1078a:	ldr.w	lr, [r6, #-4]
   1078e:	cmp	r5, #22
   10790:	bic.w	r4, lr, #3
   10794:	sub.w	r8, r6, #8
   10798:	bhi.n	1081c <_realloc_r+0xac>
   1079a:	movs	r2, #16
   1079c:	mov	r5, r2
   1079e:	cmp	r7, r5
   107a0:	bhi.n	10826 <_realloc_r+0xb6>
   107a2:	cmp	r4, r2
   107a4:	bge.n	10892 <_realloc_r+0x122>
   107a6:	ldr	r3, [pc, #804]	; (10acc <_realloc_r+0x35c>)
   107a8:	ldr	r1, [r3, #8]
   107aa:	add.w	r0, r8, r4
   107ae:	cmp	r0, r1
   107b0:	ldr	r1, [r0, #4]
   107b2:	beq.w	10968 <_realloc_r+0x1f8>
   107b6:	bic.w	r3, r1, #1
   107ba:	add	r3, r0
   107bc:	ldr	r3, [r3, #4]
   107be:	lsls	r3, r3, #31
   107c0:	bpl.n	108be <_realloc_r+0x14e>
   107c2:	tst.w	lr, #1
   107c6:	beq.n	10834 <_realloc_r+0xc4>
   107c8:	mov	r1, r7
   107ca:	mov	r0, r9
   107cc:	bl	ff64 <_malloc_r>
   107d0:	mov	r7, r0
   107d2:	cbz	r0, 1080e <_realloc_r+0x9e>
   107d4:	ldr.w	r3, [r6, #-4]
   107d8:	bic.w	r3, r3, #1
   107dc:	add	r3, r8
   107de:	sub.w	r2, r0, #8
   107e2:	cmp	r2, r3
   107e4:	beq.w	10a70 <_realloc_r+0x300>
   107e8:	subs	r2, r4, #4
   107ea:	cmp	r2, #36	; 0x24
   107ec:	bhi.w	10a52 <_realloc_r+0x2e2>
   107f0:	cmp	r2, #19
   107f2:	bhi.w	109fe <_realloc_r+0x28e>
   107f6:	mov	r3, r0
   107f8:	mov	r2, r6
   107fa:	ldr	r1, [r2, #0]
   107fc:	str	r1, [r3, #0]
   107fe:	ldr	r1, [r2, #4]
   10800:	str	r1, [r3, #4]
   10802:	ldr	r2, [r2, #8]
   10804:	str	r2, [r3, #8]
   10806:	mov	r1, r6
   10808:	mov	r0, r9
   1080a:	bl	137d0 <_free_r>
   1080e:	mov	r0, r9
   10810:	bl	1076c <__malloc_unlock>
   10814:	mov	r0, r7
   10816:	add	sp, #12
   10818:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1081c:	bic.w	r5, r5, #7
   10820:	cmp	r5, #0
   10822:	mov	r2, r5
   10824:	bge.n	1079e <_realloc_r+0x2e>
   10826:	movs	r3, #12
   10828:	movs	r0, #0
   1082a:	str.w	r3, [r9]
   1082e:	add	sp, #12
   10830:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10834:	ldr.w	r3, [r6, #-8]
   10838:	rsb	sl, r3, r8
   1083c:	ldr.w	r3, [sl, #4]
   10840:	bic.w	ip, r3, #3
   10844:	add.w	r3, r4, ip
   10848:	cmp	r3, r2
   1084a:	blt.n	107c8 <_realloc_r+0x58>
   1084c:	mov	r7, sl
   1084e:	ldr.w	r1, [sl, #12]
   10852:	ldr.w	r0, [r7, #8]!
   10856:	subs	r2, r4, #4
   10858:	cmp	r2, #36	; 0x24
   1085a:	str	r1, [r0, #12]
   1085c:	str	r0, [r1, #8]
   1085e:	bhi.w	10a90 <_realloc_r+0x320>
   10862:	cmp	r2, #19
   10864:	bls.w	10a8c <_realloc_r+0x31c>
   10868:	ldr	r1, [r6, #0]
   1086a:	str.w	r1, [sl, #8]
   1086e:	ldr	r1, [r6, #4]
   10870:	str.w	r1, [sl, #12]
   10874:	cmp	r2, #27
   10876:	bhi.w	10ad0 <_realloc_r+0x360>
   1087a:	adds	r6, #8
   1087c:	add.w	r2, sl, #16
   10880:	ldr	r1, [r6, #0]
   10882:	str	r1, [r2, #0]
   10884:	ldr	r1, [r6, #4]
   10886:	str	r1, [r2, #4]
   10888:	ldr	r1, [r6, #8]
   1088a:	str	r1, [r2, #8]
   1088c:	mov	r6, r7
   1088e:	mov	r4, r3
   10890:	mov	r8, sl
   10892:	subs	r3, r4, r5
   10894:	cmp	r3, #15
   10896:	bhi.n	108d4 <_realloc_r+0x164>
   10898:	ldr.w	r3, [r8, #4]
   1089c:	and.w	r3, r3, #1
   108a0:	orrs	r3, r4
   108a2:	add	r4, r8
   108a4:	str.w	r3, [r8, #4]
   108a8:	ldr	r3, [r4, #4]
   108aa:	orr.w	r3, r3, #1
   108ae:	str	r3, [r4, #4]
   108b0:	mov	r0, r9
   108b2:	bl	1076c <__malloc_unlock>
   108b6:	mov	r0, r6
   108b8:	add	sp, #12
   108ba:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   108be:	bic.w	r1, r1, #3
   108c2:	add	r1, r4
   108c4:	cmp	r1, r2
   108c6:	blt.n	1090c <_realloc_r+0x19c>
   108c8:	ldr	r3, [r0, #12]
   108ca:	ldr	r2, [r0, #8]
   108cc:	mov	r4, r1
   108ce:	str	r3, [r2, #12]
   108d0:	str	r2, [r3, #8]
   108d2:	b.n	10892 <_realloc_r+0x122>
   108d4:	ldr.w	r2, [r8, #4]
   108d8:	add.w	r1, r8, r5
   108dc:	and.w	r2, r2, #1
   108e0:	orrs	r5, r2
   108e2:	orr.w	r2, r3, #1
   108e6:	add	r3, r1
   108e8:	str.w	r5, [r8, #4]
   108ec:	str	r2, [r1, #4]
   108ee:	ldr	r2, [r3, #4]
   108f0:	orr.w	r2, r2, #1
   108f4:	adds	r1, #8
   108f6:	str	r2, [r3, #4]
   108f8:	mov	r0, r9
   108fa:	bl	137d0 <_free_r>
   108fe:	b.n	108b0 <_realloc_r+0x140>
   10900:	mov	r1, r2
   10902:	add	sp, #12
   10904:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10908:	b.w	ff64 <_malloc_r>
   1090c:	tst.w	lr, #1
   10910:	bne.w	107c8 <_realloc_r+0x58>
   10914:	ldr.w	r3, [r6, #-8]
   10918:	rsb	sl, r3, r8
   1091c:	ldr.w	r3, [sl, #4]
   10920:	bic.w	ip, r3, #3
   10924:	add.w	lr, r1, ip
   10928:	cmp	lr, r2
   1092a:	blt.n	10844 <_realloc_r+0xd4>
   1092c:	ldr	r3, [r0, #12]
   1092e:	ldr	r2, [r0, #8]
   10930:	mov	r7, sl
   10932:	str	r3, [r2, #12]
   10934:	str	r2, [r3, #8]
   10936:	ldr.w	r1, [r7, #8]!
   1093a:	ldr.w	r3, [sl, #12]
   1093e:	str	r3, [r1, #12]
   10940:	subs	r2, r4, #4
   10942:	cmp	r2, #36	; 0x24
   10944:	str	r1, [r3, #8]
   10946:	bhi.w	10a7c <_realloc_r+0x30c>
   1094a:	cmp	r2, #19
   1094c:	bls.n	10a14 <_realloc_r+0x2a4>
   1094e:	ldr	r3, [r6, #0]
   10950:	str.w	r3, [sl, #8]
   10954:	ldr	r3, [r6, #4]
   10956:	str.w	r3, [sl, #12]
   1095a:	cmp	r2, #27
   1095c:	bhi.w	10aa0 <_realloc_r+0x330>
   10960:	adds	r6, #8
   10962:	add.w	r3, sl, #16
   10966:	b.n	10a16 <_realloc_r+0x2a6>
   10968:	bic.w	fp, r1, #3
   1096c:	add	fp, r4
   1096e:	add.w	r0, r5, #16
   10972:	cmp	fp, r0
   10974:	bge.n	10a2a <_realloc_r+0x2ba>
   10976:	tst.w	lr, #1
   1097a:	bne.w	107c8 <_realloc_r+0x58>
   1097e:	ldr.w	r1, [r6, #-8]
   10982:	rsb	sl, r1, r8
   10986:	ldr.w	r1, [sl, #4]
   1098a:	bic.w	ip, r1, #3
   1098e:	add	fp, ip
   10990:	cmp	r0, fp
   10992:	bgt.w	10844 <_realloc_r+0xd4>
   10996:	mov	r7, sl
   10998:	ldr.w	r1, [sl, #12]
   1099c:	ldr.w	r0, [r7, #8]!
   109a0:	subs	r2, r4, #4
   109a2:	cmp	r2, #36	; 0x24
   109a4:	str	r1, [r0, #12]
   109a6:	str	r0, [r1, #8]
   109a8:	bhi.w	10b14 <_realloc_r+0x3a4>
   109ac:	cmp	r2, #19
   109ae:	bls.w	10afc <_realloc_r+0x38c>
   109b2:	ldr	r1, [r6, #0]
   109b4:	str.w	r1, [sl, #8]
   109b8:	ldr	r1, [r6, #4]
   109ba:	str.w	r1, [sl, #12]
   109be:	cmp	r2, #27
   109c0:	bhi.w	10b22 <_realloc_r+0x3b2>
   109c4:	adds	r6, #8
   109c6:	add.w	r2, sl, #16
   109ca:	ldr	r1, [r6, #0]
   109cc:	str	r1, [r2, #0]
   109ce:	ldr	r1, [r6, #4]
   109d0:	str	r1, [r2, #4]
   109d2:	ldr	r1, [r6, #8]
   109d4:	str	r1, [r2, #8]
   109d6:	add.w	r1, sl, r5
   109da:	rsb	r2, r5, fp
   109de:	orr.w	r2, r2, #1
   109e2:	str	r1, [r3, #8]
   109e4:	str	r2, [r1, #4]
   109e6:	ldr.w	r3, [sl, #4]
   109ea:	and.w	r3, r3, #1
   109ee:	orrs	r5, r3
   109f0:	mov	r0, r9
   109f2:	str.w	r5, [sl, #4]
   109f6:	bl	1076c <__malloc_unlock>
   109fa:	mov	r0, r7
   109fc:	b.n	108b8 <_realloc_r+0x148>
   109fe:	ldr	r3, [r6, #0]
   10a00:	str	r3, [r0, #0]
   10a02:	ldr	r3, [r6, #4]
   10a04:	str	r3, [r0, #4]
   10a06:	cmp	r2, #27
   10a08:	bhi.n	10a5a <_realloc_r+0x2ea>
   10a0a:	add.w	r3, r0, #8
   10a0e:	add.w	r2, r6, #8
   10a12:	b.n	107fa <_realloc_r+0x8a>
   10a14:	mov	r3, r7
   10a16:	ldr	r2, [r6, #0]
   10a18:	str	r2, [r3, #0]
   10a1a:	ldr	r2, [r6, #4]
   10a1c:	str	r2, [r3, #4]
   10a1e:	ldr	r2, [r6, #8]
   10a20:	str	r2, [r3, #8]
   10a22:	mov	r6, r7
   10a24:	mov	r4, lr
   10a26:	mov	r8, sl
   10a28:	b.n	10892 <_realloc_r+0x122>
   10a2a:	add.w	r1, r8, r5
   10a2e:	rsb	fp, r5, fp
   10a32:	orr.w	r2, fp, #1
   10a36:	str	r1, [r3, #8]
   10a38:	str	r2, [r1, #4]
   10a3a:	ldr.w	r3, [r6, #-4]
   10a3e:	and.w	r3, r3, #1
   10a42:	orrs	r5, r3
   10a44:	mov	r0, r9
   10a46:	str.w	r5, [r6, #-4]
   10a4a:	bl	1076c <__malloc_unlock>
   10a4e:	mov	r0, r6
   10a50:	b.n	108b8 <_realloc_r+0x148>
   10a52:	mov	r1, r6
   10a54:	bl	10604 <memmove>
   10a58:	b.n	10806 <_realloc_r+0x96>
   10a5a:	ldr	r3, [r6, #8]
   10a5c:	str	r3, [r0, #8]
   10a5e:	ldr	r3, [r6, #12]
   10a60:	str	r3, [r0, #12]
   10a62:	cmp	r2, #36	; 0x24
   10a64:	beq.n	10ab8 <_realloc_r+0x348>
   10a66:	add.w	r3, r0, #16
   10a6a:	add.w	r2, r6, #16
   10a6e:	b.n	107fa <_realloc_r+0x8a>
   10a70:	ldr.w	r3, [r0, #-4]
   10a74:	bic.w	r3, r3, #3
   10a78:	add	r4, r3
   10a7a:	b.n	10892 <_realloc_r+0x122>
   10a7c:	mov	r1, r6
   10a7e:	mov	r0, r7
   10a80:	mov	r4, lr
   10a82:	mov	r8, sl
   10a84:	bl	10604 <memmove>
   10a88:	mov	r6, r7
   10a8a:	b.n	10892 <_realloc_r+0x122>
   10a8c:	mov	r2, r7
   10a8e:	b.n	10880 <_realloc_r+0x110>
   10a90:	mov	r1, r6
   10a92:	mov	r0, r7
   10a94:	mov	r4, r3
   10a96:	mov	r8, sl
   10a98:	bl	10604 <memmove>
   10a9c:	mov	r6, r7
   10a9e:	b.n	10892 <_realloc_r+0x122>
   10aa0:	ldr	r3, [r6, #8]
   10aa2:	str.w	r3, [sl, #16]
   10aa6:	ldr	r3, [r6, #12]
   10aa8:	str.w	r3, [sl, #20]
   10aac:	cmp	r2, #36	; 0x24
   10aae:	beq.n	10ae8 <_realloc_r+0x378>
   10ab0:	adds	r6, #16
   10ab2:	add.w	r3, sl, #24
   10ab6:	b.n	10a16 <_realloc_r+0x2a6>
   10ab8:	ldr	r3, [r6, #16]
   10aba:	str	r3, [r0, #16]
   10abc:	ldr	r3, [r6, #20]
   10abe:	str	r3, [r0, #20]
   10ac0:	add.w	r2, r6, #24
   10ac4:	add.w	r3, r0, #24
   10ac8:	b.n	107fa <_realloc_r+0x8a>
   10aca:	nop
   10acc:	.word	0x1fff9300
   10ad0:	ldr	r1, [r6, #8]
   10ad2:	str.w	r1, [sl, #16]
   10ad6:	ldr	r1, [r6, #12]
   10ad8:	str.w	r1, [sl, #20]
   10adc:	cmp	r2, #36	; 0x24
   10ade:	beq.n	10b00 <_realloc_r+0x390>
   10ae0:	adds	r6, #16
   10ae2:	add.w	r2, sl, #24
   10ae6:	b.n	10880 <_realloc_r+0x110>
   10ae8:	ldr	r3, [r6, #16]
   10aea:	str.w	r3, [sl, #24]
   10aee:	ldr	r3, [r6, #20]
   10af0:	str.w	r3, [sl, #28]
   10af4:	adds	r6, #24
   10af6:	add.w	r3, sl, #32
   10afa:	b.n	10a16 <_realloc_r+0x2a6>
   10afc:	mov	r2, r7
   10afe:	b.n	109ca <_realloc_r+0x25a>
   10b00:	ldr	r2, [r6, #16]
   10b02:	str.w	r2, [sl, #24]
   10b06:	ldr	r2, [r6, #20]
   10b08:	str.w	r2, [sl, #28]
   10b0c:	adds	r6, #24
   10b0e:	add.w	r2, sl, #32
   10b12:	b.n	10880 <_realloc_r+0x110>
   10b14:	mov	r1, r6
   10b16:	mov	r0, r7
   10b18:	str	r3, [sp, #4]
   10b1a:	bl	10604 <memmove>
   10b1e:	ldr	r3, [sp, #4]
   10b20:	b.n	109d6 <_realloc_r+0x266>
   10b22:	ldr	r1, [r6, #8]
   10b24:	str.w	r1, [sl, #16]
   10b28:	ldr	r1, [r6, #12]
   10b2a:	str.w	r1, [sl, #20]
   10b2e:	cmp	r2, #36	; 0x24
   10b30:	beq.n	10b3a <_realloc_r+0x3ca>
   10b32:	adds	r6, #16
   10b34:	add.w	r2, sl, #24
   10b38:	b.n	109ca <_realloc_r+0x25a>
   10b3a:	ldr	r2, [r6, #16]
   10b3c:	str.w	r2, [sl, #24]
   10b40:	ldr	r2, [r6, #20]
   10b42:	str.w	r2, [sl, #28]
   10b46:	adds	r6, #24
   10b48:	add.w	r2, sl, #32
   10b4c:	b.n	109ca <_realloc_r+0x25a>
   10b4e:	nop

00010b50 <_sbrk_r>:
   10b50:	push	{r3, r4, r5, lr}
   10b52:	ldr	r4, [pc, #28]	; (10b70 <_sbrk_r+0x20>)
   10b54:	movs	r3, #0
   10b56:	mov	r5, r0
   10b58:	mov	r0, r1
   10b5a:	str	r3, [r4, #0]
   10b5c:	bl	d0bc <_sbrk>
   10b60:	adds	r3, r0, #1
   10b62:	beq.n	10b66 <_sbrk_r+0x16>
   10b64:	pop	{r3, r4, r5, pc}
   10b66:	ldr	r3, [r4, #0]
   10b68:	cmp	r3, #0
   10b6a:	beq.n	10b64 <_sbrk_r+0x14>
   10b6c:	str	r3, [r5, #0]
   10b6e:	pop	{r3, r4, r5, pc}
   10b70:	.word	0x20003230

00010b74 <sprintf>:
   10b74:	push	{r1, r2, r3}
   10b76:	push	{r4, r5, r6, r7, lr}
   10b78:	sub	sp, #112	; 0x70
   10b7a:	add	r3, sp, #132	; 0x84
   10b7c:	ldr	r1, [pc, #60]	; (10bbc <sprintf+0x48>)
   10b7e:	ldr.w	r2, [r3], #4
   10b82:	str	r3, [sp, #4]
   10b84:	mov	r5, r0
   10b86:	mvn.w	r4, #2147483648	; 0x80000000
   10b8a:	ldr	r0, [r1, #0]
   10b8c:	str	r5, [sp, #8]
   10b8e:	mov.w	r7, #520	; 0x208
   10b92:	movw	r6, #65535	; 0xffff
   10b96:	add	r1, sp, #8
   10b98:	str	r5, [sp, #24]
   10b9a:	strh.w	r7, [sp, #20]
   10b9e:	str	r4, [sp, #16]
   10ba0:	str	r4, [sp, #28]
   10ba2:	strh.w	r6, [sp, #22]
   10ba6:	bl	10e7c <_svfprintf_r>
   10baa:	ldr	r3, [sp, #8]
   10bac:	movs	r2, #0
   10bae:	strb	r2, [r3, #0]
   10bb0:	add	sp, #112	; 0x70
   10bb2:	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   10bb6:	add	sp, #12
   10bb8:	bx	lr
   10bba:	nop
   10bbc:	.word	0x1fff9190

00010bc0 <strcpy>:
   10bc0:	eor.w	r2, r0, r1
   10bc4:	mov	ip, r0
   10bc6:	tst.w	r2, #3
   10bca:	bne.n	10c6c <strcpy+0xac>
   10bcc:	tst.w	r1, #3
   10bd0:	bne.n	10c38 <strcpy+0x78>
   10bd2:	str.w	r4, [sp, #-4]!
   10bd6:	tst.w	r1, #4
   10bda:	ldr.w	r3, [r1], #4
   10bde:	beq.n	10bf8 <strcpy+0x38>
   10be0:	sub.w	r2, r3, #16843009	; 0x1010101
   10be4:	bics	r2, r3
   10be6:	tst.w	r2, #2155905152	; 0x80808080
   10bea:	itt	eq
   10bec:	streq.w	r3, [ip], #4
   10bf0:	ldreq.w	r3, [r1], #4
   10bf4:	bne.n	10c24 <strcpy+0x64>
   10bf6:	nop
   10bf8:	ldr.w	r4, [r1], #4
   10bfc:	sub.w	r2, r3, #16843009	; 0x1010101
   10c00:	bics	r2, r3
   10c02:	tst.w	r2, #2155905152	; 0x80808080
   10c06:	sub.w	r2, r4, #16843009	; 0x1010101
   10c0a:	bne.n	10c24 <strcpy+0x64>
   10c0c:	str.w	r3, [ip], #4
   10c10:	bics	r2, r4
   10c12:	tst.w	r2, #2155905152	; 0x80808080
   10c16:	itt	eq
   10c18:	ldreq.w	r3, [r1], #4
   10c1c:	streq.w	r4, [ip], #4
   10c20:	beq.n	10bf8 <strcpy+0x38>
   10c22:	mov	r3, r4
   10c24:	strb.w	r3, [ip], #1
   10c28:	tst.w	r3, #255	; 0xff
   10c2c:	mov.w	r3, r3, ror #8
   10c30:	bne.n	10c24 <strcpy+0x64>
   10c32:	ldr.w	r4, [sp], #4
   10c36:	bx	lr
   10c38:	tst.w	r1, #1
   10c3c:	beq.n	10c4c <strcpy+0x8c>
   10c3e:	ldrb.w	r2, [r1], #1
   10c42:	strb.w	r2, [ip], #1
   10c46:	cmp	r2, #0
   10c48:	it	eq
   10c4a:	bxeq	lr
   10c4c:	tst.w	r1, #2
   10c50:	beq.n	10bd2 <strcpy+0x12>
   10c52:	ldrh.w	r2, [r1], #2
   10c56:	tst.w	r2, #255	; 0xff
   10c5a:	itet	ne
   10c5c:	strhne.w	r2, [ip], #2
   10c60:	strbeq.w	r2, [ip]
   10c64:	tstne.w	r2, #65280	; 0xff00
   10c68:	bne.n	10bd2 <strcpy+0x12>
   10c6a:	bx	lr
   10c6c:	ldrb.w	r2, [r1], #1
   10c70:	strb.w	r2, [ip], #1
   10c74:	cmp	r2, #0
   10c76:	bne.n	10c6c <strcpy+0xac>
   10c78:	bx	lr
   10c7a:	nop

00010c7c <strlcat>:
   10c7c:	push	{r4, r5, r6, lr}
   10c7e:	cbz	r2, 10cbe <strlcat+0x42>
   10c80:	ldrb	r6, [r0, #0]
   10c82:	cbz	r6, 10cca <strlcat+0x4e>
   10c84:	adds	r3, r0, #1
   10c86:	adds	r6, r0, r2
   10c88:	b.n	10c90 <strlcat+0x14>
   10c8a:	ldrb	r5, [r3, #0]
   10c8c:	adds	r3, #1
   10c8e:	cbz	r5, 10c96 <strlcat+0x1a>
   10c90:	cmp	r6, r3
   10c92:	mov	r4, r3
   10c94:	bne.n	10c8a <strlcat+0xe>
   10c96:	subs	r6, r4, r0
   10c98:	subs	r2, r2, r6
   10c9a:	beq.n	10cc0 <strlcat+0x44>
   10c9c:	ldrb	r3, [r1, #0]
   10c9e:	mov	r5, r1
   10ca0:	cbz	r3, 10cb6 <strlcat+0x3a>
   10ca2:	cmp	r2, #1
   10ca4:	beq.n	10cac <strlcat+0x30>
   10ca6:	strb	r3, [r4, #0]
   10ca8:	subs	r2, #1
   10caa:	adds	r4, #1
   10cac:	ldrb.w	r3, [r5, #1]!
   10cb0:	cmp	r3, #0
   10cb2:	bne.n	10ca2 <strlcat+0x26>
   10cb4:	subs	r3, r5, r1
   10cb6:	movs	r2, #0
   10cb8:	strb	r2, [r4, #0]
   10cba:	adds	r0, r6, r3
   10cbc:	pop	{r4, r5, r6, pc}
   10cbe:	mov	r6, r2
   10cc0:	mov	r0, r1
   10cc2:	bl	10d00 <strlen>
   10cc6:	add	r0, r6
   10cc8:	pop	{r4, r5, r6, pc}
   10cca:	mov	r4, r0
   10ccc:	b.n	10c9c <strlcat+0x20>
   10cce:	nop

00010cd0 <strlcpy>:
   10cd0:	push	{r4}
   10cd2:	mov	r3, r1
   10cd4:	cbz	r2, 10cea <strlcpy+0x1a>
   10cd6:	b.n	10ce2 <strlcpy+0x12>
   10cd8:	ldrb.w	r4, [r3], #1
   10cdc:	strb.w	r4, [r0], #1
   10ce0:	cbz	r4, 10cf2 <strlcpy+0x22>
   10ce2:	subs	r2, #1
   10ce4:	bne.n	10cd8 <strlcpy+0x8>
   10ce6:	movs	r2, #0
   10ce8:	strb	r2, [r0, #0]
   10cea:	ldrb.w	r2, [r3], #1
   10cee:	cmp	r2, #0
   10cf0:	bne.n	10cea <strlcpy+0x1a>
   10cf2:	subs	r0, r3, r1
   10cf4:	subs	r0, #1
   10cf6:	pop	{r4}
   10cf8:	bx	lr
   10cfa:	nop
   10cfc:			; <UNDEFINED> instruction: 0xffffffff

00010d00 <strlen>:
   10d00:	pld	[r0]
   10d04:	strd	r4, r5, [sp, #-8]!
   10d08:	bic.w	r1, r0, #7
   10d0c:	mvn.w	ip, #0
   10d10:	ands.w	r4, r0, #7
   10d14:	pld	[r1, #32]
   10d18:	bne.w	10dae <strlen+0xae>
   10d1c:	mov.w	r4, #0
   10d20:	mvn.w	r0, #7
   10d24:	ldrd	r2, r3, [r1]
   10d28:	pld	[r1, #64]	; 0x40
   10d2c:	add.w	r0, r0, #8
   10d30:	uadd8	r2, r2, ip
   10d34:	sel	r2, r4, ip
   10d38:	uadd8	r3, r3, ip
   10d3c:	sel	r3, r2, ip
   10d40:	cbnz	r3, 10d96 <strlen+0x96>
   10d42:	ldrd	r2, r3, [r1, #8]
   10d46:	uadd8	r2, r2, ip
   10d4a:	add.w	r0, r0, #8
   10d4e:	sel	r2, r4, ip
   10d52:	uadd8	r3, r3, ip
   10d56:	sel	r3, r2, ip
   10d5a:	cbnz	r3, 10d96 <strlen+0x96>
   10d5c:	ldrd	r2, r3, [r1, #16]
   10d60:	uadd8	r2, r2, ip
   10d64:	add.w	r0, r0, #8
   10d68:	sel	r2, r4, ip
   10d6c:	uadd8	r3, r3, ip
   10d70:	sel	r3, r2, ip
   10d74:	cbnz	r3, 10d96 <strlen+0x96>
   10d76:	ldrd	r2, r3, [r1, #24]
   10d7a:	add.w	r1, r1, #32
   10d7e:	uadd8	r2, r2, ip
   10d82:	add.w	r0, r0, #8
   10d86:	sel	r2, r4, ip
   10d8a:	uadd8	r3, r3, ip
   10d8e:	sel	r3, r2, ip
   10d92:	cmp	r3, #0
   10d94:	beq.n	10d24 <strlen+0x24>
   10d96:	cmp	r2, #0
   10d98:	itt	eq
   10d9a:	addeq	r0, #4
   10d9c:	moveq	r2, r3
   10d9e:	rev	r2, r2
   10da0:	clz	r2, r2
   10da4:	ldrd	r4, r5, [sp], #8
   10da8:	add.w	r0, r0, r2, lsr #3
   10dac:	bx	lr
   10dae:	ldrd	r2, r3, [r1]
   10db2:	and.w	r5, r4, #3
   10db6:	rsb	r0, r4, #0
   10dba:	mov.w	r5, r5, lsl #3
   10dbe:	tst.w	r4, #4
   10dc2:	pld	[r1, #64]	; 0x40
   10dc6:	lsl.w	r5, ip, r5
   10dca:	orn	r2, r2, r5
   10dce:	itt	ne
   10dd0:	ornne	r3, r3, r5
   10dd4:	movne	r2, ip
   10dd6:	mov.w	r4, #0
   10dda:	b.n	10d30 <strlen+0x30>

00010ddc <strncmp>:
   10ddc:	cmp	r2, #0
   10dde:	beq.n	10e64 <strncmp+0x88>
   10de0:	orr.w	r3, r0, r1
   10de4:	ands.w	r3, r3, #3
   10de8:	push	{r4, r5, r6, r7}
   10dea:	bne.n	10e38 <strncmp+0x5c>
   10dec:	cmp	r2, #3
   10dee:	bls.n	10e38 <strncmp+0x5c>
   10df0:	ldr	r4, [r0, #0]
   10df2:	ldr	r5, [r1, #0]
   10df4:	cmp	r4, r5
   10df6:	bne.n	10e38 <strncmp+0x5c>
   10df8:	subs	r2, #4
   10dfa:	beq.n	10e68 <strncmp+0x8c>
   10dfc:	sub.w	r5, r4, #16843009	; 0x1010101
   10e00:	bic.w	r4, r5, r4
   10e04:	tst.w	r4, #2155905152	; 0x80808080
   10e08:	bne.n	10e6e <strncmp+0x92>
   10e0a:	adds	r7, r0, #4
   10e0c:	adds	r5, r1, #4
   10e0e:	b.n	10e2c <strncmp+0x50>
   10e10:	ldr.w	r3, [r7], #4
   10e14:	ldr	r6, [r1, #0]
   10e16:	sub.w	r4, r3, #16843009	; 0x1010101
   10e1a:	cmp	r3, r6
   10e1c:	bic.w	r4, r4, r3
   10e20:	bne.n	10e38 <strncmp+0x5c>
   10e22:	subs	r2, #4
   10e24:	beq.n	10e68 <strncmp+0x8c>
   10e26:	tst.w	r4, #2155905152	; 0x80808080
   10e2a:	bne.n	10e74 <strncmp+0x98>
   10e2c:	cmp	r2, #3
   10e2e:	mov	r1, r5
   10e30:	mov	r0, r7
   10e32:	add.w	r5, r5, #4
   10e36:	bhi.n	10e10 <strncmp+0x34>
   10e38:	ldrb	r3, [r0, #0]
   10e3a:	ldrb	r4, [r1, #0]
   10e3c:	cmp	r4, r3
   10e3e:	add.w	r2, r2, #4294967295
   10e42:	bne.n	10e5e <strncmp+0x82>
   10e44:	cbz	r2, 10e68 <strncmp+0x8c>
   10e46:	cbnz	r4, 10e4e <strncmp+0x72>
   10e48:	b.n	10e78 <strncmp+0x9c>
   10e4a:	cbz	r2, 10e68 <strncmp+0x8c>
   10e4c:	cbz	r3, 10e6e <strncmp+0x92>
   10e4e:	ldrb.w	r3, [r0, #1]!
   10e52:	ldrb.w	r4, [r1, #1]!
   10e56:	cmp	r3, r4
   10e58:	add.w	r2, r2, #4294967295
   10e5c:	beq.n	10e4a <strncmp+0x6e>
   10e5e:	subs	r0, r3, r4
   10e60:	pop	{r4, r5, r6, r7}
   10e62:	bx	lr
   10e64:	mov	r0, r2
   10e66:	bx	lr
   10e68:	mov	r0, r2
   10e6a:	pop	{r4, r5, r6, r7}
   10e6c:	bx	lr
   10e6e:	mov	r0, r3
   10e70:	pop	{r4, r5, r6, r7}
   10e72:	bx	lr
   10e74:	movs	r0, #0
   10e76:	b.n	10e60 <strncmp+0x84>
   10e78:	mov	r0, r4
   10e7a:	b.n	10e60 <strncmp+0x84>

00010e7c <_svfprintf_r>:
   10e7c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10e80:	sub	sp, #260	; 0x104
   10e82:	mov	r4, r1
   10e84:	str	r1, [sp, #36]	; 0x24
   10e86:	mov	r5, r2
   10e88:	str	r3, [sp, #56]	; 0x38
   10e8a:	str	r0, [sp, #40]	; 0x28
   10e8c:	bl	139a0 <_localeconv_r>
   10e90:	ldr	r3, [r0, #0]
   10e92:	str	r3, [sp, #92]	; 0x5c
   10e94:	mov	r0, r3
   10e96:	bl	10d00 <strlen>
   10e9a:	ldrh	r3, [r4, #12]
   10e9c:	str	r0, [sp, #88]	; 0x58
   10e9e:	lsls	r6, r3, #24
   10ea0:	bpl.n	10eaa <_svfprintf_r+0x2e>
   10ea2:	ldr	r3, [r4, #16]
   10ea4:	cmp	r3, #0
   10ea6:	beq.w	120de <_svfprintf_r+0x1262>
   10eaa:	movs	r3, #0
   10eac:	mov	r2, r3
   10eae:	str	r3, [sp, #72]	; 0x48
   10eb0:	str	r3, [sp, #148]	; 0x94
   10eb2:	str	r3, [sp, #144]	; 0x90
   10eb4:	str	r3, [sp, #100]	; 0x64
   10eb6:	str	r3, [sp, #44]	; 0x2c
   10eb8:	ldr.w	sl, [pc, #1124]	; 11320 <_svfprintf_r+0x4a4>
   10ebc:	str	r2, [sp, #80]	; 0x50
   10ebe:	add	r3, sp, #192	; 0xc0
   10ec0:	str	r3, [sp, #140]	; 0x8c
   10ec2:	mov	r9, r3
   10ec4:	str	r2, [sp, #84]	; 0x54
   10ec6:	mov	r8, r5
   10ec8:	ldrb.w	r3, [r8]
   10ecc:	mov	r4, r8
   10ece:	cbz	r3, 10f0c <_svfprintf_r+0x90>
   10ed0:	cmp	r3, #37	; 0x25
   10ed2:	bne.n	10eda <_svfprintf_r+0x5e>
   10ed4:	b.n	10f0c <_svfprintf_r+0x90>
   10ed6:	cmp	r3, #37	; 0x25
   10ed8:	beq.n	10ee2 <_svfprintf_r+0x66>
   10eda:	ldrb.w	r3, [r4, #1]!
   10ede:	cmp	r3, #0
   10ee0:	bne.n	10ed6 <_svfprintf_r+0x5a>
   10ee2:	rsb	r5, r8, r4
   10ee6:	cbz	r5, 10f0c <_svfprintf_r+0x90>
   10ee8:	ldr	r3, [sp, #144]	; 0x90
   10eea:	ldr	r2, [sp, #148]	; 0x94
   10eec:	str.w	r8, [r9]
   10ef0:	adds	r3, #1
   10ef2:	add	r2, r5
   10ef4:	cmp	r3, #7
   10ef6:	str.w	r5, [r9, #4]
   10efa:	str	r2, [sp, #148]	; 0x94
   10efc:	str	r3, [sp, #144]	; 0x90
   10efe:	bgt.w	1104e <_svfprintf_r+0x1d2>
   10f02:	add.w	r9, r9, #8
   10f06:	ldr	r3, [sp, #44]	; 0x2c
   10f08:	add	r3, r5
   10f0a:	str	r3, [sp, #44]	; 0x2c
   10f0c:	ldrb	r3, [r4, #0]
   10f0e:	cmp	r3, #0
   10f10:	beq.w	11060 <_svfprintf_r+0x1e4>
   10f14:	movs	r3, #0
   10f16:	mov	r2, r3
   10f18:	strb.w	r3, [sp, #111]	; 0x6f
   10f1c:	mov	r1, r3
   10f1e:	str	r3, [sp, #48]	; 0x30
   10f20:	str	r3, [sp, #28]
   10f22:	mov.w	fp, #4294967295
   10f26:	ldrb	r3, [r4, #1]
   10f28:	add.w	r8, r4, #1
   10f2c:	mov	r5, fp
   10f2e:	add.w	r8, r8, #1
   10f32:	sub.w	r0, r3, #32
   10f36:	cmp	r0, #88	; 0x58
   10f38:	bhi.w	11786 <_svfprintf_r+0x90a>
   10f3c:	tbh	[pc, r0, lsl #1]
   10f40:	.word	0x04230388
   10f44:	.word	0x03900423
   10f48:	.word	0x04230423
   10f4c:	.word	0x04230423
   10f50:	.word	0x04230423
   10f54:	.word	0x03a50397
   10f58:	.word	0x005d0423
   10f5c:	.word	0x042300e2
   10f60:	.word	0x010500fe
   10f64:	.word	0x01050105
   10f68:	.word	0x01050105
   10f6c:	.word	0x01050105
   10f70:	.word	0x01050105
   10f74:	.word	0x04230423
   10f78:	.word	0x04230423
   10f7c:	.word	0x04230423
   10f80:	.word	0x04230423
   10f84:	.word	0x04230423
   10f88:	.word	0x02810115
   10f8c:	.word	0x02810423
   10f90:	.word	0x04230423
   10f94:	.word	0x04230423
   10f98:	.word	0x042302c6
   10f9c:	.word	0x02cd0423
   10fa0:	.word	0x04230423
   10fa4:	.word	0x04230423
   10fa8:	.word	0x02f70423
   10fac:	.word	0x04230423
   10fb0:	.word	0x04230325
   10fb4:	.word	0x04230423
   10fb8:	.word	0x04230423
   10fbc:	.word	0x04230423
   10fc0:	.word	0x04230423
   10fc4:	.word	0x03660423
   10fc8:	.word	0x02810379
   10fcc:	.word	0x02810281
   10fd0:	.word	0x03790381
   10fd4:	.word	0x04230423
   10fd8:	.word	0x042303d1
   10fdc:	.word	0x00a303db
   10fe0:	.word	0x03ee0064
   10fe4:	.word	0x03f50423
   10fe8:	.word	0x03aa0423
   10fec:	.word	0x04230423
   10ff0:	.short	0x03bc
   10ff2:	ldr	r0, [sp, #48]	; 0x30
   10ff4:	str	r3, [sp, #56]	; 0x38
   10ff6:	negs	r0, r0
   10ff8:	str	r0, [sp, #48]	; 0x30
   10ffa:	ldr	r3, [sp, #28]
   10ffc:	orr.w	r3, r3, #4
   11000:	str	r3, [sp, #28]
   11002:	ldrb.w	r3, [r8]
   11006:	b.n	10f2e <_svfprintf_r+0xb2>
   11008:	ldr	r0, [sp, #56]	; 0x38
   1100a:	mov	fp, r5
   1100c:	movs	r1, #0
   1100e:	ldr	r4, [r0, #0]
   11010:	strb.w	r1, [sp, #111]	; 0x6f
   11014:	adds	r7, r0, #4
   11016:	ldr	r0, [sp, #28]
   11018:	movs	r3, #48	; 0x30
   1101a:	movs	r2, #120	; 0x78
   1101c:	cmp	fp, r1
   1101e:	strb.w	r3, [sp, #112]	; 0x70
   11022:	mov.w	r5, #0
   11026:	strb.w	r2, [sp, #113]	; 0x71
   1102a:	orr.w	r3, r0, #2
   1102e:	blt.w	117c0 <_svfprintf_r+0x944>
   11032:	bic.w	r3, r0, #128	; 0x80
   11036:	orr.w	r3, r3, #2
   1103a:	str	r3, [sp, #28]
   1103c:	orrs.w	r3, r4, r5
   11040:	str	r7, [sp, #56]	; 0x38
   11042:	beq.w	1176c <_svfprintf_r+0x8f0>
   11046:	mov	r7, r1
   11048:	str	r2, [sp, #68]	; 0x44
   1104a:	ldr	r0, [pc, #716]	; (11318 <_svfprintf_r+0x49c>)
   1104c:	b.n	115ec <_svfprintf_r+0x770>
   1104e:	add	r2, sp, #140	; 0x8c
   11050:	ldr	r1, [sp, #36]	; 0x24
   11052:	ldr	r0, [sp, #40]	; 0x28
   11054:	bl	13fd8 <__ssprint_r>
   11058:	cbnz	r0, 1106e <_svfprintf_r+0x1f2>
   1105a:	add.w	r9, sp, #192	; 0xc0
   1105e:	b.n	10f06 <_svfprintf_r+0x8a>
   11060:	ldr	r3, [sp, #148]	; 0x94
   11062:	cbz	r3, 1106e <_svfprintf_r+0x1f2>
   11064:	ldr	r0, [sp, #40]	; 0x28
   11066:	ldr	r1, [sp, #36]	; 0x24
   11068:	add	r2, sp, #140	; 0x8c
   1106a:	bl	13fd8 <__ssprint_r>
   1106e:	ldr	r3, [sp, #36]	; 0x24
   11070:	ldrh	r3, [r3, #12]
   11072:	tst.w	r3, #64	; 0x40
   11076:	ldr	r3, [sp, #44]	; 0x2c
   11078:	it	ne
   1107a:	movne.w	r3, #4294967295
   1107e:	mov	r0, r3
   11080:	add	sp, #260	; 0x104
   11082:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11086:	str	r3, [sp, #68]	; 0x44
   11088:	mov	fp, r5
   1108a:	cmp	r2, #0
   1108c:	bne.w	124f6 <_svfprintf_r+0x167a>
   11090:	ldr	r2, [sp, #28]
   11092:	ands.w	r3, r2, #32
   11096:	beq.w	114f6 <_svfprintf_r+0x67a>
   1109a:	ldr	r7, [sp, #56]	; 0x38
   1109c:	adds	r7, #7
   1109e:	bic.w	r3, r7, #7
   110a2:	movs	r7, #0
   110a4:	add.w	r1, r3, #8
   110a8:	cmp	fp, r7
   110aa:	str	r1, [sp, #56]	; 0x38
   110ac:	ldrd	r4, r5, [r3]
   110b0:	strb.w	r7, [sp, #111]	; 0x6f
   110b4:	blt.w	11faa <_svfprintf_r+0x112e>
   110b8:	bic.w	r3, r2, #128	; 0x80
   110bc:	str	r3, [sp, #28]
   110be:	orrs.w	r3, r4, r5
   110c2:	beq.w	117b0 <_svfprintf_r+0x934>
   110c6:	add	r6, sp, #192	; 0xc0
   110c8:	lsrs	r2, r4, #3
   110ca:	orr.w	r2, r2, r5, lsl #29
   110ce:	lsrs	r1, r5, #3
   110d0:	and.w	r3, r4, #7
   110d4:	mov	r5, r1
   110d6:	mov	r4, r2
   110d8:	adds	r3, #48	; 0x30
   110da:	orrs.w	r2, r4, r5
   110de:	strb.w	r3, [r6, #-1]!
   110e2:	bne.n	110c8 <_svfprintf_r+0x24c>
   110e4:	ldr	r2, [sp, #28]
   110e6:	lsls	r1, r2, #31
   110e8:	bpl.w	111f4 <_svfprintf_r+0x378>
   110ec:	cmp	r3, #48	; 0x30
   110ee:	beq.w	111f4 <_svfprintf_r+0x378>
   110f2:	movs	r2, #48	; 0x30
   110f4:	subs	r3, r6, #1
   110f6:	strb.w	r2, [r6, #-1]
   110fa:	add	r2, sp, #192	; 0xc0
   110fc:	subs	r2, r2, r3
   110fe:	str	r2, [sp, #52]	; 0x34
   11100:	mov	r6, r3
   11102:	b.n	111fa <_svfprintf_r+0x37e>
   11104:	ldrb.w	r3, [r8]
   11108:	cmp	r3, #42	; 0x2a
   1110a:	add.w	r4, r8, #1
   1110e:	beq.w	12484 <_svfprintf_r+0x1608>
   11112:	sub.w	r0, r3, #48	; 0x30
   11116:	cmp	r0, #9
   11118:	it	ls
   1111a:	movls	r5, #0
   1111c:	bhi.w	123f8 <_svfprintf_r+0x157c>
   11120:	ldrb.w	r3, [r4], #1
   11124:	add.w	r5, r5, r5, lsl #2
   11128:	add.w	r5, r0, r5, lsl #1
   1112c:	sub.w	r0, r3, #48	; 0x30
   11130:	cmp	r0, #9
   11132:	bls.n	11120 <_svfprintf_r+0x2a4>
   11134:	orr.w	r5, r5, r5, asr #31
   11138:	mov	r8, r4
   1113a:	b.n	10f32 <_svfprintf_r+0xb6>
   1113c:	ldr	r3, [sp, #28]
   1113e:	orr.w	r3, r3, #128	; 0x80
   11142:	str	r3, [sp, #28]
   11144:	ldrb.w	r3, [r8]
   11148:	b.n	10f2e <_svfprintf_r+0xb2>
   1114a:	sub.w	r0, r3, #48	; 0x30
   1114e:	movs	r3, #0
   11150:	mov	r4, r3
   11152:	ldrb.w	r3, [r8], #1
   11156:	add.w	r4, r4, r4, lsl #2
   1115a:	add.w	r4, r0, r4, lsl #1
   1115e:	sub.w	r0, r3, #48	; 0x30
   11162:	cmp	r0, #9
   11164:	bls.n	11152 <_svfprintf_r+0x2d6>
   11166:	str	r4, [sp, #48]	; 0x30
   11168:	b.n	10f32 <_svfprintf_r+0xb6>
   1116a:	str	r3, [sp, #68]	; 0x44
   1116c:	mov	fp, r5
   1116e:	cmp	r2, #0
   11170:	bne.w	124ca <_svfprintf_r+0x164e>
   11174:	ldr	r3, [sp, #28]
   11176:	orr.w	r3, r3, #16
   1117a:	str	r3, [sp, #28]
   1117c:	ldr	r3, [sp, #28]
   1117e:	lsls	r0, r3, #26
   11180:	bpl.w	11be4 <_svfprintf_r+0xd68>
   11184:	ldr	r7, [sp, #56]	; 0x38
   11186:	adds	r7, #7
   11188:	bic.w	r7, r7, #7
   1118c:	ldrd	r2, r3, [r7]
   11190:	add.w	r1, r7, #8
   11194:	str	r1, [sp, #56]	; 0x38
   11196:	mov	r4, r2
   11198:	mov	r5, r3
   1119a:	cmp	r2, #0
   1119c:	sbcs.w	r3, r3, #0
   111a0:	blt.w	11c5a <_svfprintf_r+0xdde>
   111a4:	cmp.w	fp, #0
   111a8:	ldrb.w	r7, [sp, #111]	; 0x6f
   111ac:	blt.w	11c20 <_svfprintf_r+0xda4>
   111b0:	ldr	r3, [sp, #28]
   111b2:	bic.w	r3, r3, #128	; 0x80
   111b6:	str	r3, [sp, #28]
   111b8:	orrs.w	r3, r4, r5
   111bc:	beq.w	11576 <_svfprintf_r+0x6fa>
   111c0:	cmp	r5, #0
   111c2:	it	eq
   111c4:	cmpeq	r4, #10
   111c6:	bcc.w	11580 <_svfprintf_r+0x704>
   111ca:	add	r6, sp, #192	; 0xc0
   111cc:	mov	r0, r4
   111ce:	mov	r1, r5
   111d0:	movs	r2, #10
   111d2:	movs	r3, #0
   111d4:	bl	fb44 <__aeabi_uldivmod>
   111d8:	adds	r2, #48	; 0x30
   111da:	strb.w	r2, [r6, #-1]!
   111de:	mov	r0, r4
   111e0:	mov	r1, r5
   111e2:	movs	r3, #0
   111e4:	movs	r2, #10
   111e6:	bl	fb44 <__aeabi_uldivmod>
   111ea:	mov	r4, r0
   111ec:	mov	r5, r1
   111ee:	orrs.w	r3, r4, r5
   111f2:	bne.n	111cc <_svfprintf_r+0x350>
   111f4:	add	r3, sp, #192	; 0xc0
   111f6:	subs	r3, r3, r6
   111f8:	str	r3, [sp, #52]	; 0x34
   111fa:	ldr	r3, [sp, #52]	; 0x34
   111fc:	cmp	r3, fp
   111fe:	it	lt
   11200:	movlt	r3, fp
   11202:	str	r3, [sp, #32]
   11204:	movs	r3, #0
   11206:	str	r3, [sp, #76]	; 0x4c
   11208:	cbz	r7, 11210 <_svfprintf_r+0x394>
   1120a:	ldr	r3, [sp, #32]
   1120c:	adds	r3, #1
   1120e:	str	r3, [sp, #32]
   11210:	ldr	r3, [sp, #28]
   11212:	ands.w	r3, r3, #2
   11216:	str	r3, [sp, #60]	; 0x3c
   11218:	beq.n	11220 <_svfprintf_r+0x3a4>
   1121a:	ldr	r3, [sp, #32]
   1121c:	adds	r3, #2
   1121e:	str	r3, [sp, #32]
   11220:	ldr	r3, [sp, #28]
   11222:	ands.w	r3, r3, #132	; 0x84
   11226:	str	r3, [sp, #64]	; 0x40
   11228:	bne.w	117da <_svfprintf_r+0x95e>
   1122c:	ldr	r3, [sp, #48]	; 0x30
   1122e:	ldr	r2, [sp, #32]
   11230:	subs	r5, r3, r2
   11232:	cmp	r5, #0
   11234:	ble.w	117da <_svfprintf_r+0x95e>
   11238:	cmp	r5, #16
   1123a:	ldr	r1, [sp, #148]	; 0x94
   1123c:	ldr	r2, [sp, #144]	; 0x90
   1123e:	ldr	r7, [pc, #220]	; (1131c <_svfprintf_r+0x4a0>)
   11240:	ble.n	11292 <_svfprintf_r+0x416>
   11242:	str	r6, [sp, #96]	; 0x60
   11244:	mov	r0, r9
   11246:	movs	r4, #16
   11248:	mov	r9, r7
   1124a:	ldr	r6, [sp, #36]	; 0x24
   1124c:	mov	r7, r5
   1124e:	ldr	r5, [sp, #40]	; 0x28
   11250:	b.n	1125c <_svfprintf_r+0x3e0>
   11252:	subs	r7, #16
   11254:	cmp	r7, #16
   11256:	add.w	r0, r0, #8
   1125a:	ble.n	1128a <_svfprintf_r+0x40e>
   1125c:	adds	r2, #1
   1125e:	ldr	r3, [pc, #188]	; (1131c <_svfprintf_r+0x4a0>)
   11260:	str	r2, [sp, #144]	; 0x90
   11262:	adds	r1, #16
   11264:	cmp	r2, #7
   11266:	str	r1, [sp, #148]	; 0x94
   11268:	stmia.w	r0, {r3, r4}
   1126c:	ble.n	11252 <_svfprintf_r+0x3d6>
   1126e:	add	r2, sp, #140	; 0x8c
   11270:	mov	r1, r6
   11272:	mov	r0, r5
   11274:	bl	13fd8 <__ssprint_r>
   11278:	cmp	r0, #0
   1127a:	bne.w	1106e <_svfprintf_r+0x1f2>
   1127e:	subs	r7, #16
   11280:	cmp	r7, #16
   11282:	ldr	r1, [sp, #148]	; 0x94
   11284:	ldr	r2, [sp, #144]	; 0x90
   11286:	add	r0, sp, #192	; 0xc0
   11288:	bgt.n	1125c <_svfprintf_r+0x3e0>
   1128a:	ldr	r6, [sp, #96]	; 0x60
   1128c:	mov	r5, r7
   1128e:	mov	r7, r9
   11290:	mov	r9, r0
   11292:	adds	r2, #1
   11294:	adds	r4, r5, r1
   11296:	cmp	r2, #7
   11298:	str	r4, [sp, #148]	; 0x94
   1129a:	str	r2, [sp, #144]	; 0x90
   1129c:	str.w	r7, [r9]
   112a0:	str.w	r5, [r9, #4]
   112a4:	bgt.w	11af8 <_svfprintf_r+0xc7c>
   112a8:	ldrb.w	r7, [sp, #111]	; 0x6f
   112ac:	add.w	r9, r9, #8
   112b0:	cbz	r7, 112d0 <_svfprintf_r+0x454>
   112b2:	ldr	r3, [sp, #144]	; 0x90
   112b4:	adds	r3, #1
   112b6:	adds	r4, #1
   112b8:	add.w	r1, sp, #111	; 0x6f
   112bc:	movs	r2, #1
   112be:	cmp	r3, #7
   112c0:	str	r4, [sp, #148]	; 0x94
   112c2:	str	r3, [sp, #144]	; 0x90
   112c4:	stmia.w	r9, {r1, r2}
   112c8:	bgt.w	11a0c <_svfprintf_r+0xb90>
   112cc:	add.w	r9, r9, #8
   112d0:	ldr	r3, [sp, #60]	; 0x3c
   112d2:	cbz	r3, 112f0 <_svfprintf_r+0x474>
   112d4:	ldr	r3, [sp, #144]	; 0x90
   112d6:	adds	r3, #1
   112d8:	adds	r4, #2
   112da:	add	r1, sp, #112	; 0x70
   112dc:	movs	r2, #2
   112de:	cmp	r3, #7
   112e0:	str	r4, [sp, #148]	; 0x94
   112e2:	str	r3, [sp, #144]	; 0x90
   112e4:	stmia.w	r9, {r1, r2}
   112e8:	bgt.w	11a24 <_svfprintf_r+0xba8>
   112ec:	add.w	r9, r9, #8
   112f0:	ldr	r3, [sp, #64]	; 0x40
   112f2:	cmp	r3, #128	; 0x80
   112f4:	beq.w	118a2 <_svfprintf_r+0xa26>
   112f8:	ldr	r3, [sp, #52]	; 0x34
   112fa:	rsb	r7, r3, fp
   112fe:	cmp	r7, #0
   11300:	ble.n	11376 <_svfprintf_r+0x4fa>
   11302:	ldr	r2, [pc, #28]	; (11320 <_svfprintf_r+0x4a4>)
   11304:	ldr	r3, [sp, #144]	; 0x90
   11306:	str	r2, [sp, #60]	; 0x3c
   11308:	cmp	r7, #16
   1130a:	ble.n	1135e <_svfprintf_r+0x4e2>
   1130c:	mov	r2, r4
   1130e:	mov.w	fp, #16
   11312:	ldr	r5, [sp, #40]	; 0x28
   11314:	ldr	r4, [sp, #36]	; 0x24
   11316:	b.n	1132e <_svfprintf_r+0x4b2>
   11318:	.word	0x000148ec
   1131c:	.word	0x00014908
   11320:	.word	0x000148b8
   11324:	subs	r7, #16
   11326:	cmp	r7, #16
   11328:	add.w	r9, r9, #8
   1132c:	ble.n	1135c <_svfprintf_r+0x4e0>
   1132e:	adds	r3, #1
   11330:	adds	r2, #16
   11332:	cmp	r3, #7
   11334:	str	r2, [sp, #148]	; 0x94
   11336:	str	r3, [sp, #144]	; 0x90
   11338:	stmia.w	r9, {sl, fp}
   1133c:	ble.n	11324 <_svfprintf_r+0x4a8>
   1133e:	add	r2, sp, #140	; 0x8c
   11340:	mov	r1, r4
   11342:	mov	r0, r5
   11344:	bl	13fd8 <__ssprint_r>
   11348:	cmp	r0, #0
   1134a:	bne.w	1106e <_svfprintf_r+0x1f2>
   1134e:	subs	r7, #16
   11350:	cmp	r7, #16
   11352:	ldr	r2, [sp, #148]	; 0x94
   11354:	ldr	r3, [sp, #144]	; 0x90
   11356:	add.w	r9, sp, #192	; 0xc0
   1135a:	bgt.n	1132e <_svfprintf_r+0x4b2>
   1135c:	mov	r4, r2
   1135e:	adds	r3, #1
   11360:	ldr	r2, [sp, #60]	; 0x3c
   11362:	str	r3, [sp, #144]	; 0x90
   11364:	add	r4, r7
   11366:	cmp	r3, #7
   11368:	str	r4, [sp, #148]	; 0x94
   1136a:	stmia.w	r9, {r2, r7}
   1136e:	bgt.w	119f4 <_svfprintf_r+0xb78>
   11372:	add.w	r9, r9, #8
   11376:	ldr	r3, [sp, #28]
   11378:	lsls	r2, r3, #23
   1137a:	bmi.w	117de <_svfprintf_r+0x962>
   1137e:	ldr	r3, [sp, #144]	; 0x90
   11380:	ldr	r1, [sp, #52]	; 0x34
   11382:	str.w	r6, [r9]
   11386:	adds	r3, #1
   11388:	add	r4, r1
   1138a:	cmp	r3, #7
   1138c:	str	r4, [sp, #148]	; 0x94
   1138e:	str.w	r1, [r9, #4]
   11392:	str	r3, [sp, #144]	; 0x90
   11394:	bgt.w	119c8 <_svfprintf_r+0xb4c>
   11398:	add.w	r9, r9, #8
   1139c:	ldr	r3, [sp, #28]
   1139e:	lsls	r1, r3, #29
   113a0:	bpl.n	11422 <_svfprintf_r+0x5a6>
   113a2:	ldr	r3, [sp, #48]	; 0x30
   113a4:	ldr	r2, [sp, #32]
   113a6:	subs	r5, r3, r2
   113a8:	cmp	r5, #0
   113aa:	ble.n	11422 <_svfprintf_r+0x5a6>
   113ac:	cmp	r5, #16
   113ae:	ldr	r3, [sp, #144]	; 0x90
   113b0:	ldr	r7, [pc, #752]	; (116a4 <_svfprintf_r+0x828>)
   113b2:	ble.n	113fc <_svfprintf_r+0x580>
   113b4:	mov	r2, r4
   113b6:	movs	r6, #16
   113b8:	ldr.w	fp, [sp, #40]	; 0x28
   113bc:	ldr	r4, [sp, #36]	; 0x24
   113be:	b.n	113ca <_svfprintf_r+0x54e>
   113c0:	subs	r5, #16
   113c2:	cmp	r5, #16
   113c4:	add.w	r9, r9, #8
   113c8:	ble.n	113fa <_svfprintf_r+0x57e>
   113ca:	adds	r3, #1
   113cc:	ldr	r1, [pc, #724]	; (116a4 <_svfprintf_r+0x828>)
   113ce:	str	r3, [sp, #144]	; 0x90
   113d0:	adds	r2, #16
   113d2:	cmp	r3, #7
   113d4:	str	r2, [sp, #148]	; 0x94
   113d6:	stmia.w	r9, {r1, r6}
   113da:	ble.n	113c0 <_svfprintf_r+0x544>
   113dc:	add	r2, sp, #140	; 0x8c
   113de:	mov	r1, r4
   113e0:	mov	r0, fp
   113e2:	bl	13fd8 <__ssprint_r>
   113e6:	cmp	r0, #0
   113e8:	bne.w	1106e <_svfprintf_r+0x1f2>
   113ec:	subs	r5, #16
   113ee:	cmp	r5, #16
   113f0:	ldr	r2, [sp, #148]	; 0x94
   113f2:	ldr	r3, [sp, #144]	; 0x90
   113f4:	add.w	r9, sp, #192	; 0xc0
   113f8:	bgt.n	113ca <_svfprintf_r+0x54e>
   113fa:	mov	r4, r2
   113fc:	adds	r3, #1
   113fe:	add	r4, r5
   11400:	cmp	r3, #7
   11402:	str	r4, [sp, #148]	; 0x94
   11404:	str	r3, [sp, #144]	; 0x90
   11406:	str.w	r7, [r9]
   1140a:	str.w	r5, [r9, #4]
   1140e:	ble.n	11422 <_svfprintf_r+0x5a6>
   11410:	add	r2, sp, #140	; 0x8c
   11412:	ldr	r1, [sp, #36]	; 0x24
   11414:	ldr	r0, [sp, #40]	; 0x28
   11416:	bl	13fd8 <__ssprint_r>
   1141a:	cmp	r0, #0
   1141c:	bne.w	1106e <_svfprintf_r+0x1f2>
   11420:	ldr	r4, [sp, #148]	; 0x94
   11422:	ldr	r3, [sp, #44]	; 0x2c
   11424:	ldr	r2, [sp, #48]	; 0x30
   11426:	ldr	r1, [sp, #32]
   11428:	cmp	r2, r1
   1142a:	ite	ge
   1142c:	addge	r3, r3, r2
   1142e:	addlt	r3, r3, r1
   11430:	str	r3, [sp, #44]	; 0x2c
   11432:	cmp	r4, #0
   11434:	bne.w	119e0 <_svfprintf_r+0xb64>
   11438:	movs	r3, #0
   1143a:	str	r3, [sp, #144]	; 0x90
   1143c:	add.w	r9, sp, #192	; 0xc0
   11440:	b.n	10ec8 <_svfprintf_r+0x4c>
   11442:	str	r3, [sp, #68]	; 0x44
   11444:	mov	fp, r5
   11446:	cmp	r2, #0
   11448:	bne.w	124ee <_svfprintf_r+0x1672>
   1144c:	ldr	r7, [sp, #56]	; 0x38
   1144e:	adds	r7, #7
   11450:	bic.w	r3, r7, #7
   11454:	add.w	r2, r3, #8
   11458:	str	r2, [sp, #56]	; 0x38
   1145a:	ldr	r2, [r3, #0]
   1145c:	str	r2, [sp, #80]	; 0x50
   1145e:	ldr	r3, [r3, #4]
   11460:	str	r3, [sp, #84]	; 0x54
   11462:	ldr	r3, [sp, #84]	; 0x54
   11464:	ldr	r5, [sp, #80]	; 0x50
   11466:	bic.w	r4, r3, #2147483648	; 0x80000000
   1146a:	mov	r0, r5
   1146c:	mov	r1, r4
   1146e:	mov.w	r2, #4294967295
   11472:	ldr	r3, [pc, #564]	; (116a8 <_svfprintf_r+0x82c>)
   11474:	bl	f3c8 <__aeabi_dcmpun>
   11478:	cmp	r0, #0
   1147a:	bne.w	11e02 <_svfprintf_r+0xf86>
   1147e:	mov	r0, r5
   11480:	mov	r1, r4
   11482:	mov.w	r2, #4294967295
   11486:	ldr	r3, [pc, #544]	; (116a8 <_svfprintf_r+0x82c>)
   11488:	bl	f38c <__aeabi_dcmple>
   1148c:	cmp	r0, #0
   1148e:	bne.w	11e02 <_svfprintf_r+0xf86>
   11492:	ldr	r0, [sp, #80]	; 0x50
   11494:	ldr	r1, [sp, #84]	; 0x54
   11496:	movs	r2, #0
   11498:	movs	r3, #0
   1149a:	bl	f378 <__aeabi_dcmplt>
   1149e:	cmp	r0, #0
   114a0:	bne.w	12342 <_svfprintf_r+0x14c6>
   114a4:	ldrb.w	r7, [sp, #111]	; 0x6f
   114a8:	ldr	r6, [pc, #512]	; (116ac <_svfprintf_r+0x830>)
   114aa:	ldr	r3, [pc, #516]	; (116b0 <_svfprintf_r+0x834>)
   114ac:	ldr	r1, [sp, #28]
   114ae:	bic.w	r1, r1, #128	; 0x80
   114b2:	str	r1, [sp, #28]
   114b4:	ldr	r1, [sp, #68]	; 0x44
   114b6:	movs	r2, #3
   114b8:	mov.w	fp, #0
   114bc:	str	r2, [sp, #32]
   114be:	cmp	r1, #71	; 0x47
   114c0:	it	le
   114c2:	movle	r6, r3
   114c4:	str	r2, [sp, #52]	; 0x34
   114c6:	str.w	fp, [sp, #76]	; 0x4c
   114ca:	b.n	11208 <_svfprintf_r+0x38c>
   114cc:	ldr	r3, [sp, #28]
   114ce:	orr.w	r3, r3, #8
   114d2:	str	r3, [sp, #28]
   114d4:	ldrb.w	r3, [r8]
   114d8:	b.n	10f2e <_svfprintf_r+0xb2>
   114da:	str	r3, [sp, #68]	; 0x44
   114dc:	mov	fp, r5
   114de:	cmp	r2, #0
   114e0:	bne.w	12506 <_svfprintf_r+0x168a>
   114e4:	ldr	r3, [sp, #28]
   114e6:	orr.w	r3, r3, #16
   114ea:	str	r3, [sp, #28]
   114ec:	ldr	r2, [sp, #28]
   114ee:	ands.w	r3, r2, #32
   114f2:	bne.w	1109a <_svfprintf_r+0x21e>
   114f6:	ldr	r1, [sp, #28]
   114f8:	ands.w	r2, r1, #16
   114fc:	beq.w	11f58 <_svfprintf_r+0x10dc>
   11500:	ldr	r0, [sp, #56]	; 0x38
   11502:	strb.w	r3, [sp, #111]	; 0x6f
   11506:	cmp.w	fp, #0
   1150a:	ldr	r4, [r0, #0]
   1150c:	add.w	r7, r0, #4
   11510:	mov.w	r5, #0
   11514:	blt.w	11fa8 <_svfprintf_r+0x112c>
   11518:	mov	r2, r1
   1151a:	bic.w	r2, r2, #128	; 0x80
   1151e:	str	r2, [sp, #28]
   11520:	orrs.w	r2, r4, r5
   11524:	str	r7, [sp, #56]	; 0x38
   11526:	beq.w	117b0 <_svfprintf_r+0x934>
   1152a:	mov	r7, r3
   1152c:	b.n	110c6 <_svfprintf_r+0x24a>
   1152e:	str	r3, [sp, #68]	; 0x44
   11530:	mov	fp, r5
   11532:	cmp	r2, #0
   11534:	bne.w	124fe <_svfprintf_r+0x1682>
   11538:	ldr	r3, [sp, #28]
   1153a:	orr.w	r3, r3, #16
   1153e:	str	r3, [sp, #28]
   11540:	ldr	r2, [sp, #28]
   11542:	ands.w	r3, r2, #32
   11546:	beq.w	11bae <_svfprintf_r+0xd32>
   1154a:	ldr	r7, [sp, #56]	; 0x38
   1154c:	adds	r7, #7
   1154e:	bic.w	r3, r7, #7
   11552:	movs	r7, #0
   11554:	add.w	r1, r3, #8
   11558:	cmp	fp, r7
   1155a:	str	r1, [sp, #56]	; 0x38
   1155c:	ldrd	r4, r5, [r3]
   11560:	strb.w	r7, [sp, #111]	; 0x6f
   11564:	blt.w	11c20 <_svfprintf_r+0xda4>
   11568:	bic.w	r3, r2, #128	; 0x80
   1156c:	str	r3, [sp, #28]
   1156e:	orrs.w	r3, r4, r5
   11572:	bne.w	111c0 <_svfprintf_r+0x344>
   11576:	cmp.w	fp, #0
   1157a:	beq.w	1177a <_svfprintf_r+0x8fe>
   1157e:	movs	r4, #0
   11580:	add	r6, sp, #256	; 0x100
   11582:	adds	r4, #48	; 0x30
   11584:	strb.w	r4, [r6, #-65]!
   11588:	b.n	111f4 <_svfprintf_r+0x378>
   1158a:	str	r3, [sp, #68]	; 0x44
   1158c:	mov	fp, r5
   1158e:	cmp	r2, #0
   11590:	bne.w	124c2 <_svfprintf_r+0x1646>
   11594:	ldr	r3, [sp, #28]
   11596:	ldr	r0, [pc, #284]	; (116b4 <_svfprintf_r+0x838>)
   11598:	lsls	r5, r3, #26
   1159a:	bpl.w	116cc <_svfprintf_r+0x850>
   1159e:	ldr	r7, [sp, #56]	; 0x38
   115a0:	adds	r7, #7
   115a2:	bic.w	r3, r7, #7
   115a6:	ldrd	r4, r5, [r3]
   115aa:	add.w	r2, r3, #8
   115ae:	str	r2, [sp, #56]	; 0x38
   115b0:	ldr	r2, [sp, #28]
   115b2:	ands.w	r7, r2, #1
   115b6:	beq.w	11a3c <_svfprintf_r+0xbc0>
   115ba:	orrs.w	r3, r4, r5
   115be:	beq.w	11fcc <_svfprintf_r+0x1150>
   115c2:	ldrb.w	r2, [sp, #68]	; 0x44
   115c6:	strb.w	r2, [sp, #113]	; 0x71
   115ca:	movs	r7, #0
   115cc:	ldr	r2, [sp, #28]
   115ce:	strb.w	r7, [sp, #111]	; 0x6f
   115d2:	movs	r3, #48	; 0x30
   115d4:	cmp	fp, r7
   115d6:	strb.w	r3, [sp, #112]	; 0x70
   115da:	orr.w	r3, r2, #2
   115de:	blt.w	1234c <_svfprintf_r+0x14d0>
   115e2:	bic.w	r3, r2, #128	; 0x80
   115e6:	orr.w	r3, r3, #2
   115ea:	str	r3, [sp, #28]
   115ec:	add	r6, sp, #192	; 0xc0
   115ee:	lsrs	r3, r4, #4
   115f0:	and.w	r1, r4, #15
   115f4:	orr.w	r3, r3, r5, lsl #28
   115f8:	lsrs	r2, r5, #4
   115fa:	mov	r4, r3
   115fc:	mov	r5, r2
   115fe:	ldrb	r3, [r0, r1]
   11600:	strb.w	r3, [r6, #-1]!
   11604:	orrs.w	r3, r4, r5
   11608:	bne.n	115ee <_svfprintf_r+0x772>
   1160a:	b.n	111f4 <_svfprintf_r+0x378>
   1160c:	ldr	r1, [sp, #56]	; 0x38
   1160e:	str	r3, [sp, #68]	; 0x44
   11610:	ldr	r2, [r1, #0]
   11612:	strb.w	r2, [sp, #152]	; 0x98
   11616:	movs	r3, #0
   11618:	mov	r2, r1
   1161a:	mov	r7, r3
   1161c:	strb.w	r3, [sp, #111]	; 0x6f
   11620:	adds	r2, #4
   11622:	movs	r3, #1
   11624:	str	r3, [sp, #32]
   11626:	mov	fp, r7
   11628:	str	r7, [sp, #76]	; 0x4c
   1162a:	str	r2, [sp, #56]	; 0x38
   1162c:	str	r3, [sp, #52]	; 0x34
   1162e:	add	r6, sp, #152	; 0x98
   11630:	b.n	11210 <_svfprintf_r+0x394>
   11632:	str	r3, [sp, #68]	; 0x44
   11634:	mov	fp, r5
   11636:	cmp	r2, #0
   11638:	beq.w	1117c <_svfprintf_r+0x300>
   1163c:	strb.w	r1, [sp, #111]	; 0x6f
   11640:	b.n	1117c <_svfprintf_r+0x300>
   11642:	ldr	r3, [sp, #28]
   11644:	orr.w	r3, r3, #64	; 0x40
   11648:	str	r3, [sp, #28]
   1164a:	ldrb.w	r3, [r8]
   1164e:	b.n	10f2e <_svfprintf_r+0xb2>
   11650:	ldrb.w	r3, [r8]
   11654:	cmp	r1, #0
   11656:	bne.w	10f2e <_svfprintf_r+0xb2>
   1165a:	movs	r2, #1
   1165c:	movs	r1, #32
   1165e:	b.n	10f2e <_svfprintf_r+0xb2>
   11660:	ldr	r3, [sp, #28]
   11662:	orr.w	r3, r3, #1
   11666:	str	r3, [sp, #28]
   11668:	ldrb.w	r3, [r8]
   1166c:	b.n	10f2e <_svfprintf_r+0xb2>
   1166e:	ldr	r4, [sp, #56]	; 0x38
   11670:	ldr	r3, [r4, #0]
   11672:	str	r3, [sp, #48]	; 0x30
   11674:	mov	r0, r3
   11676:	cmp	r0, #0
   11678:	mov	r3, r4
   1167a:	add.w	r3, r3, #4
   1167e:	blt.w	10ff2 <_svfprintf_r+0x176>
   11682:	str	r3, [sp, #56]	; 0x38
   11684:	ldrb.w	r3, [r8]
   11688:	b.n	10f2e <_svfprintf_r+0xb2>
   1168a:	ldrb.w	r3, [r8]
   1168e:	movs	r2, #1
   11690:	movs	r1, #43	; 0x2b
   11692:	b.n	10f2e <_svfprintf_r+0xb2>
   11694:	str	r3, [sp, #68]	; 0x44
   11696:	mov	fp, r5
   11698:	cmp	r2, #0
   1169a:	beq.w	11540 <_svfprintf_r+0x6c4>
   1169e:	strb.w	r1, [sp, #111]	; 0x6f
   116a2:	b.n	11540 <_svfprintf_r+0x6c4>
   116a4:	.word	0x00014908
   116a8:	.word	0x7fefffff
   116ac:	.word	0x000148cc
   116b0:	.word	0x000148c8
   116b4:	.word	0x000148d8
   116b8:	str	r3, [sp, #68]	; 0x44
   116ba:	mov	fp, r5
   116bc:	cmp	r2, #0
   116be:	bne.w	12516 <_svfprintf_r+0x169a>
   116c2:	ldr	r3, [sp, #28]
   116c4:	ldr	r0, [pc, #612]	; (1192c <_svfprintf_r+0xab0>)
   116c6:	lsls	r5, r3, #26
   116c8:	bmi.w	1159e <_svfprintf_r+0x722>
   116cc:	ldr	r3, [sp, #28]
   116ce:	lsls	r4, r3, #27
   116d0:	bpl.w	11f3e <_svfprintf_r+0x10c2>
   116d4:	ldr	r2, [sp, #56]	; 0x38
   116d6:	mov	r3, r2
   116d8:	adds	r3, #4
   116da:	ldr	r4, [r2, #0]
   116dc:	str	r3, [sp, #56]	; 0x38
   116de:	movs	r5, #0
   116e0:	b.n	115b0 <_svfprintf_r+0x734>
   116e2:	ldrb.w	r3, [r8]
   116e6:	cmp	r3, #108	; 0x6c
   116e8:	beq.w	120b0 <_svfprintf_r+0x1234>
   116ec:	ldr	r0, [sp, #28]
   116ee:	orr.w	r0, r0, #16
   116f2:	str	r0, [sp, #28]
   116f4:	b.n	10f2e <_svfprintf_r+0xb2>
   116f6:	cmp	r2, #0
   116f8:	bne.w	1250e <_svfprintf_r+0x1692>
   116fc:	ldr	r3, [sp, #28]
   116fe:	lsls	r3, r3, #26
   11700:	bpl.w	11f10 <_svfprintf_r+0x1094>
   11704:	ldr	r2, [sp, #56]	; 0x38
   11706:	ldr	r1, [sp, #44]	; 0x2c
   11708:	ldr	r3, [r2, #0]
   1170a:	asrs	r5, r1, #31
   1170c:	mov	r0, r1
   1170e:	adds	r2, #4
   11710:	mov	r1, r5
   11712:	str	r2, [sp, #56]	; 0x38
   11714:	strd	r0, r1, [r3]
   11718:	b.w	10ec8 <_svfprintf_r+0x4c>
   1171c:	ldr	r3, [sp, #28]
   1171e:	orr.w	r3, r3, #32
   11722:	str	r3, [sp, #28]
   11724:	ldrb.w	r3, [r8]
   11728:	b.n	10f2e <_svfprintf_r+0xb2>
   1172a:	ldr	r2, [sp, #56]	; 0x38
   1172c:	str	r3, [sp, #68]	; 0x44
   1172e:	ldr	r6, [r2, #0]
   11730:	movs	r4, #0
   11732:	strb.w	r4, [sp, #111]	; 0x6f
   11736:	adds	r7, r2, #4
   11738:	cmp	r6, #0
   1173a:	beq.w	122d8 <_svfprintf_r+0x145c>
   1173e:	cmp	r5, #0
   11740:	blt.w	12174 <_svfprintf_r+0x12f8>
   11744:	mov	r2, r5
   11746:	mov	r1, r4
   11748:	mov	r0, r6
   1174a:	bl	10500 <memchr>
   1174e:	cmp	r0, #0
   11750:	beq.w	123a8 <_svfprintf_r+0x152c>
   11754:	subs	r3, r0, r6
   11756:	str	r3, [sp, #52]	; 0x34
   11758:	mov	fp, r4
   1175a:	bic.w	r3, r3, r3, asr #31
   1175e:	str	r7, [sp, #56]	; 0x38
   11760:	str	r3, [sp, #32]
   11762:	str.w	fp, [sp, #76]	; 0x4c
   11766:	ldrb.w	r7, [sp, #111]	; 0x6f
   1176a:	b.n	11208 <_svfprintf_r+0x38c>
   1176c:	ldr	r0, [pc, #444]	; (1192c <_svfprintf_r+0xab0>)
   1176e:	str	r2, [sp, #68]	; 0x44
   11770:	cmp.w	fp, #0
   11774:	bne.w	11a5e <_svfprintf_r+0xbe2>
   11778:	mov	r7, fp
   1177a:	mov.w	fp, #0
   1177e:	str.w	fp, [sp, #52]	; 0x34
   11782:	add	r6, sp, #192	; 0xc0
   11784:	b.n	111fa <_svfprintf_r+0x37e>
   11786:	str	r3, [sp, #68]	; 0x44
   11788:	cmp	r2, #0
   1178a:	bne.w	124e6 <_svfprintf_r+0x166a>
   1178e:	ldr	r2, [sp, #68]	; 0x44
   11790:	cmp	r2, #0
   11792:	beq.w	11060 <_svfprintf_r+0x1e4>
   11796:	movs	r3, #0
   11798:	movs	r1, #1
   1179a:	mov	r7, r3
   1179c:	str	r1, [sp, #32]
   1179e:	strb.w	r2, [sp, #152]	; 0x98
   117a2:	strb.w	r3, [sp, #111]	; 0x6f
   117a6:	mov	fp, r3
   117a8:	str	r3, [sp, #76]	; 0x4c
   117aa:	str	r1, [sp, #52]	; 0x34
   117ac:	add	r6, sp, #152	; 0x98
   117ae:	b.n	11210 <_svfprintf_r+0x394>
   117b0:	cmp.w	fp, #0
   117b4:	beq.w	123be <_svfprintf_r+0x1542>
   117b8:	movs	r7, #0
   117ba:	movs	r4, #0
   117bc:	movs	r5, #0
   117be:	b.n	110c6 <_svfprintf_r+0x24a>
   117c0:	ldr	r0, [pc, #360]	; (1192c <_svfprintf_r+0xab0>)
   117c2:	str	r3, [sp, #28]
   117c4:	str	r2, [sp, #68]	; 0x44
   117c6:	orrs.w	r3, r4, r5
   117ca:	str	r7, [sp, #56]	; 0x38
   117cc:	mov.w	r7, #0
   117d0:	bne.w	115ec <_svfprintf_r+0x770>
   117d4:	movs	r4, #0
   117d6:	movs	r5, #0
   117d8:	b.n	115ec <_svfprintf_r+0x770>
   117da:	ldr	r4, [sp, #148]	; 0x94
   117dc:	b.n	112b0 <_svfprintf_r+0x434>
   117de:	ldr	r3, [sp, #68]	; 0x44
   117e0:	cmp	r3, #101	; 0x65
   117e2:	ble.w	11938 <_svfprintf_r+0xabc>
   117e6:	ldr	r0, [sp, #80]	; 0x50
   117e8:	ldr	r1, [sp, #84]	; 0x54
   117ea:	movs	r2, #0
   117ec:	movs	r3, #0
   117ee:	bl	f364 <__aeabi_dcmpeq>
   117f2:	cmp	r0, #0
   117f4:	beq.w	11a62 <_svfprintf_r+0xbe6>
   117f8:	ldr	r3, [sp, #144]	; 0x90
   117fa:	ldr	r2, [pc, #308]	; (11930 <_svfprintf_r+0xab4>)
   117fc:	str.w	r2, [r9]
   11800:	adds	r3, #1
   11802:	adds	r4, #1
   11804:	movs	r2, #1
   11806:	cmp	r3, #7
   11808:	str	r4, [sp, #148]	; 0x94
   1180a:	str	r3, [sp, #144]	; 0x90
   1180c:	str.w	r2, [r9, #4]
   11810:	bgt.w	11fe4 <_svfprintf_r+0x1168>
   11814:	add.w	r9, r9, #8
   11818:	ldr	r3, [sp, #116]	; 0x74
   1181a:	ldr	r2, [sp, #72]	; 0x48
   1181c:	cmp	r3, r2
   1181e:	blt.n	11828 <_svfprintf_r+0x9ac>
   11820:	ldr	r3, [sp, #28]
   11822:	lsls	r3, r3, #31
   11824:	bpl.w	1139c <_svfprintf_r+0x520>
   11828:	ldr	r3, [sp, #144]	; 0x90
   1182a:	ldr	r1, [sp, #88]	; 0x58
   1182c:	ldr	r2, [sp, #92]	; 0x5c
   1182e:	str.w	r2, [r9]
   11832:	adds	r3, #1
   11834:	add	r4, r1
   11836:	cmp	r3, #7
   11838:	str	r4, [sp, #148]	; 0x94
   1183a:	str.w	r1, [r9, #4]
   1183e:	str	r3, [sp, #144]	; 0x90
   11840:	bgt.w	120c4 <_svfprintf_r+0x1248>
   11844:	add.w	r9, r9, #8
   11848:	ldr	r3, [sp, #72]	; 0x48
   1184a:	subs	r5, r3, #1
   1184c:	cmp	r5, #0
   1184e:	ble.w	1139c <_svfprintf_r+0x520>
   11852:	ldr	r2, [pc, #224]	; (11934 <_svfprintf_r+0xab8>)
   11854:	ldr	r3, [sp, #144]	; 0x90
   11856:	str	r2, [sp, #60]	; 0x3c
   11858:	cmp	r5, #16
   1185a:	ble.w	11c2a <_svfprintf_r+0xdae>
   1185e:	movs	r6, #16
   11860:	ldr	r7, [sp, #40]	; 0x28
   11862:	ldr.w	fp, [sp, #36]	; 0x24
   11866:	b.n	11874 <_svfprintf_r+0x9f8>
   11868:	add.w	r9, r9, #8
   1186c:	subs	r5, #16
   1186e:	cmp	r5, #16
   11870:	ble.w	11c2a <_svfprintf_r+0xdae>
   11874:	adds	r3, #1
   11876:	adds	r4, #16
   11878:	cmp	r3, #7
   1187a:	str	r4, [sp, #148]	; 0x94
   1187c:	str	r3, [sp, #144]	; 0x90
   1187e:	str.w	sl, [r9]
   11882:	str.w	r6, [r9, #4]
   11886:	ble.n	11868 <_svfprintf_r+0x9ec>
   11888:	add	r2, sp, #140	; 0x8c
   1188a:	mov	r1, fp
   1188c:	mov	r0, r7
   1188e:	bl	13fd8 <__ssprint_r>
   11892:	cmp	r0, #0
   11894:	bne.w	1106e <_svfprintf_r+0x1f2>
   11898:	ldr	r4, [sp, #148]	; 0x94
   1189a:	ldr	r3, [sp, #144]	; 0x90
   1189c:	add.w	r9, sp, #192	; 0xc0
   118a0:	b.n	1186c <_svfprintf_r+0x9f0>
   118a2:	ldr	r3, [sp, #48]	; 0x30
   118a4:	ldr	r2, [sp, #32]
   118a6:	subs	r7, r3, r2
   118a8:	cmp	r7, #0
   118aa:	ble.w	112f8 <_svfprintf_r+0x47c>
   118ae:	ldr	r2, [pc, #132]	; (11934 <_svfprintf_r+0xab8>)
   118b0:	ldr	r3, [sp, #144]	; 0x90
   118b2:	str	r2, [sp, #60]	; 0x3c
   118b4:	cmp	r7, #16
   118b6:	ble.n	11910 <_svfprintf_r+0xa94>
   118b8:	mov	r2, r9
   118ba:	mov	r1, r4
   118bc:	mov	r9, r7
   118be:	movs	r5, #16
   118c0:	mov	r7, r6
   118c2:	ldr	r4, [sp, #40]	; 0x28
   118c4:	ldr	r6, [sp, #36]	; 0x24
   118c6:	b.n	118d6 <_svfprintf_r+0xa5a>
   118c8:	sub.w	r9, r9, #16
   118cc:	cmp.w	r9, #16
   118d0:	add.w	r2, r2, #8
   118d4:	ble.n	11908 <_svfprintf_r+0xa8c>
   118d6:	adds	r3, #1
   118d8:	adds	r1, #16
   118da:	cmp	r3, #7
   118dc:	str	r1, [sp, #148]	; 0x94
   118de:	str	r3, [sp, #144]	; 0x90
   118e0:	str.w	sl, [r2]
   118e4:	str	r5, [r2, #4]
   118e6:	ble.n	118c8 <_svfprintf_r+0xa4c>
   118e8:	add	r2, sp, #140	; 0x8c
   118ea:	mov	r1, r6
   118ec:	mov	r0, r4
   118ee:	bl	13fd8 <__ssprint_r>
   118f2:	cmp	r0, #0
   118f4:	bne.w	1106e <_svfprintf_r+0x1f2>
   118f8:	sub.w	r9, r9, #16
   118fc:	cmp.w	r9, #16
   11900:	ldr	r1, [sp, #148]	; 0x94
   11902:	ldr	r3, [sp, #144]	; 0x90
   11904:	add	r2, sp, #192	; 0xc0
   11906:	bgt.n	118d6 <_svfprintf_r+0xa5a>
   11908:	mov	r6, r7
   1190a:	mov	r4, r1
   1190c:	mov	r7, r9
   1190e:	mov	r9, r2
   11910:	adds	r3, #1
   11912:	ldr	r2, [sp, #60]	; 0x3c
   11914:	str	r3, [sp, #144]	; 0x90
   11916:	add	r4, r7
   11918:	cmp	r3, #7
   1191a:	str	r4, [sp, #148]	; 0x94
   1191c:	stmia.w	r9, {r2, r7}
   11920:	bgt.w	11dae <_svfprintf_r+0xf32>
   11924:	add.w	r9, r9, #8
   11928:	b.n	112f8 <_svfprintf_r+0x47c>
   1192a:	nop
   1192c:	.word	0x000148ec
   11930:	.word	0x00014750
   11934:	.word	0x000148b8
   11938:	ldr	r3, [sp, #72]	; 0x48
   1193a:	ldr	r5, [sp, #144]	; 0x90
   1193c:	cmp	r3, #1
   1193e:	ble.w	11d52 <_svfprintf_r+0xed6>
   11942:	adds	r5, #1
   11944:	adds	r4, #1
   11946:	movs	r3, #1
   11948:	cmp	r5, #7
   1194a:	str	r4, [sp, #148]	; 0x94
   1194c:	str	r5, [sp, #144]	; 0x90
   1194e:	str.w	r6, [r9]
   11952:	str.w	r3, [r9, #4]
   11956:	bgt.w	11d74 <_svfprintf_r+0xef8>
   1195a:	add.w	r9, r9, #8
   1195e:	ldr	r2, [sp, #88]	; 0x58
   11960:	ldr	r3, [sp, #92]	; 0x5c
   11962:	str.w	r3, [r9]
   11966:	adds	r5, #1
   11968:	add	r4, r2
   1196a:	cmp	r5, #7
   1196c:	str	r4, [sp, #148]	; 0x94
   1196e:	str	r5, [sp, #144]	; 0x90
   11970:	str.w	r2, [r9, #4]
   11974:	bgt.w	11d94 <_svfprintf_r+0xf18>
   11978:	add.w	r9, r9, #8
   1197c:	movs	r3, #0
   1197e:	ldr	r0, [sp, #80]	; 0x50
   11980:	ldr	r1, [sp, #84]	; 0x54
   11982:	movs	r2, #0
   11984:	bl	f364 <__aeabi_dcmpeq>
   11988:	ldr	r3, [sp, #72]	; 0x48
   1198a:	cmp	r0, #0
   1198c:	bne.w	11b16 <_svfprintf_r+0xc9a>
   11990:	subs	r3, #1
   11992:	adds	r5, #1
   11994:	adds	r6, #1
   11996:	add	r4, r3
   11998:	cmp	r5, #7
   1199a:	str	r5, [sp, #144]	; 0x90
   1199c:	str	r4, [sp, #148]	; 0x94
   1199e:	str.w	r6, [r9]
   119a2:	str.w	r3, [r9, #4]
   119a6:	bgt.w	11b94 <_svfprintf_r+0xd18>
   119aa:	add.w	r9, r9, #8
   119ae:	ldr	r2, [sp, #100]	; 0x64
   119b0:	str.w	r2, [r9, #4]
   119b4:	adds	r5, #1
   119b6:	add	r4, r2
   119b8:	add	r3, sp, #124	; 0x7c
   119ba:	cmp	r5, #7
   119bc:	str	r4, [sp, #148]	; 0x94
   119be:	str	r5, [sp, #144]	; 0x90
   119c0:	str.w	r3, [r9]
   119c4:	ble.w	11398 <_svfprintf_r+0x51c>
   119c8:	add	r2, sp, #140	; 0x8c
   119ca:	ldr	r1, [sp, #36]	; 0x24
   119cc:	ldr	r0, [sp, #40]	; 0x28
   119ce:	bl	13fd8 <__ssprint_r>
   119d2:	cmp	r0, #0
   119d4:	bne.w	1106e <_svfprintf_r+0x1f2>
   119d8:	ldr	r4, [sp, #148]	; 0x94
   119da:	add.w	r9, sp, #192	; 0xc0
   119de:	b.n	1139c <_svfprintf_r+0x520>
   119e0:	add	r2, sp, #140	; 0x8c
   119e2:	ldr	r1, [sp, #36]	; 0x24
   119e4:	ldr	r0, [sp, #40]	; 0x28
   119e6:	bl	13fd8 <__ssprint_r>
   119ea:	cmp	r0, #0
   119ec:	beq.w	11438 <_svfprintf_r+0x5bc>
   119f0:	b.w	1106e <_svfprintf_r+0x1f2>
   119f4:	add	r2, sp, #140	; 0x8c
   119f6:	ldr	r1, [sp, #36]	; 0x24
   119f8:	ldr	r0, [sp, #40]	; 0x28
   119fa:	bl	13fd8 <__ssprint_r>
   119fe:	cmp	r0, #0
   11a00:	bne.w	1106e <_svfprintf_r+0x1f2>
   11a04:	ldr	r4, [sp, #148]	; 0x94
   11a06:	add.w	r9, sp, #192	; 0xc0
   11a0a:	b.n	11376 <_svfprintf_r+0x4fa>
   11a0c:	add	r2, sp, #140	; 0x8c
   11a0e:	ldr	r1, [sp, #36]	; 0x24
   11a10:	ldr	r0, [sp, #40]	; 0x28
   11a12:	bl	13fd8 <__ssprint_r>
   11a16:	cmp	r0, #0
   11a18:	bne.w	1106e <_svfprintf_r+0x1f2>
   11a1c:	ldr	r4, [sp, #148]	; 0x94
   11a1e:	add.w	r9, sp, #192	; 0xc0
   11a22:	b.n	112d0 <_svfprintf_r+0x454>
   11a24:	add	r2, sp, #140	; 0x8c
   11a26:	ldr	r1, [sp, #36]	; 0x24
   11a28:	ldr	r0, [sp, #40]	; 0x28
   11a2a:	bl	13fd8 <__ssprint_r>
   11a2e:	cmp	r0, #0
   11a30:	bne.w	1106e <_svfprintf_r+0x1f2>
   11a34:	ldr	r4, [sp, #148]	; 0x94
   11a36:	add.w	r9, sp, #192	; 0xc0
   11a3a:	b.n	112f0 <_svfprintf_r+0x474>
   11a3c:	cmp.w	fp, #0
   11a40:	strb.w	r7, [sp, #111]	; 0x6f
   11a44:	blt.w	11ffc <_svfprintf_r+0x1180>
   11a48:	bic.w	r3, r2, #128	; 0x80
   11a4c:	str	r3, [sp, #28]
   11a4e:	orrs.w	r3, r4, r5
   11a52:	bne.w	115ec <_svfprintf_r+0x770>
   11a56:	cmp.w	fp, #0
   11a5a:	beq.w	11778 <_svfprintf_r+0x8fc>
   11a5e:	movs	r7, #0
   11a60:	b.n	117d4 <_svfprintf_r+0x958>
   11a62:	ldr	r5, [sp, #116]	; 0x74
   11a64:	cmp	r5, #0
   11a66:	ble.w	12002 <_svfprintf_r+0x1186>
   11a6a:	ldr	r3, [sp, #76]	; 0x4c
   11a6c:	ldr	r2, [sp, #72]	; 0x48
   11a6e:	cmp	r3, r2
   11a70:	it	ge
   11a72:	movge	r3, r2
   11a74:	cmp	r3, #0
   11a76:	mov	r5, r3
   11a78:	ble.n	11a96 <_svfprintf_r+0xc1a>
   11a7a:	ldr	r3, [sp, #144]	; 0x90
   11a7c:	str.w	r6, [r9]
   11a80:	adds	r3, #1
   11a82:	add	r4, r5
   11a84:	cmp	r3, #7
   11a86:	str	r4, [sp, #148]	; 0x94
   11a88:	str.w	r5, [r9, #4]
   11a8c:	str	r3, [sp, #144]	; 0x90
   11a8e:	bgt.w	121d8 <_svfprintf_r+0x135c>
   11a92:	add.w	r9, r9, #8
   11a96:	ldr	r3, [sp, #76]	; 0x4c
   11a98:	cmp	r5, #0
   11a9a:	it	ge
   11a9c:	subge	r3, r3, r5
   11a9e:	cmp	r3, #0
   11aa0:	mov	r5, r3
   11aa2:	ble.w	11c92 <_svfprintf_r+0xe16>
   11aa6:	ldr	r2, [pc, #744]	; (11d90 <_svfprintf_r+0xf14>)
   11aa8:	ldr	r3, [sp, #144]	; 0x90
   11aaa:	str	r2, [sp, #60]	; 0x3c
   11aac:	cmp	r5, #16
   11aae:	ble.w	11fb2 <_svfprintf_r+0x1136>
   11ab2:	mov	r2, r4
   11ab4:	movs	r7, #16
   11ab6:	ldr.w	fp, [sp, #40]	; 0x28
   11aba:	ldr	r4, [sp, #36]	; 0x24
   11abc:	b.n	11aca <_svfprintf_r+0xc4e>
   11abe:	add.w	r9, r9, #8
   11ac2:	subs	r5, #16
   11ac4:	cmp	r5, #16
   11ac6:	ble.w	11fb0 <_svfprintf_r+0x1134>
   11aca:	adds	r3, #1
   11acc:	adds	r2, #16
   11ace:	cmp	r3, #7
   11ad0:	str	r2, [sp, #148]	; 0x94
   11ad2:	str	r3, [sp, #144]	; 0x90
   11ad4:	str.w	sl, [r9]
   11ad8:	str.w	r7, [r9, #4]
   11adc:	ble.n	11abe <_svfprintf_r+0xc42>
   11ade:	add	r2, sp, #140	; 0x8c
   11ae0:	mov	r1, r4
   11ae2:	mov	r0, fp
   11ae4:	bl	13fd8 <__ssprint_r>
   11ae8:	cmp	r0, #0
   11aea:	bne.w	1106e <_svfprintf_r+0x1f2>
   11aee:	ldr	r2, [sp, #148]	; 0x94
   11af0:	ldr	r3, [sp, #144]	; 0x90
   11af2:	add.w	r9, sp, #192	; 0xc0
   11af6:	b.n	11ac2 <_svfprintf_r+0xc46>
   11af8:	add	r2, sp, #140	; 0x8c
   11afa:	ldr	r1, [sp, #36]	; 0x24
   11afc:	ldr	r0, [sp, #40]	; 0x28
   11afe:	bl	13fd8 <__ssprint_r>
   11b02:	cmp	r0, #0
   11b04:	bne.w	1106e <_svfprintf_r+0x1f2>
   11b08:	ldrb.w	r7, [sp, #111]	; 0x6f
   11b0c:	ldr	r4, [sp, #148]	; 0x94
   11b0e:	add.w	r9, sp, #192	; 0xc0
   11b12:	b.w	112b0 <_svfprintf_r+0x434>
   11b16:	subs	r6, r3, #1
   11b18:	cmp	r6, #0
   11b1a:	ble.w	119ae <_svfprintf_r+0xb32>
   11b1e:	ldr	r3, [pc, #624]	; (11d90 <_svfprintf_r+0xf14>)
   11b20:	str	r3, [sp, #60]	; 0x3c
   11b22:	cmp	r6, #16
   11b24:	ble.n	11b80 <_svfprintf_r+0xd04>
   11b26:	str.w	r8, [sp, #52]	; 0x34
   11b2a:	movs	r7, #16
   11b2c:	mov	r8, r6
   11b2e:	ldr.w	fp, [sp, #40]	; 0x28
   11b32:	ldr	r6, [sp, #36]	; 0x24
   11b34:	b.n	11b44 <_svfprintf_r+0xcc8>
   11b36:	sub.w	r8, r8, #16
   11b3a:	cmp.w	r8, #16
   11b3e:	add.w	r9, r9, #8
   11b42:	ble.n	11b7a <_svfprintf_r+0xcfe>
   11b44:	adds	r5, #1
   11b46:	adds	r4, #16
   11b48:	cmp	r5, #7
   11b4a:	str	r4, [sp, #148]	; 0x94
   11b4c:	str	r5, [sp, #144]	; 0x90
   11b4e:	str.w	sl, [r9]
   11b52:	str.w	r7, [r9, #4]
   11b56:	ble.n	11b36 <_svfprintf_r+0xcba>
   11b58:	add	r2, sp, #140	; 0x8c
   11b5a:	mov	r1, r6
   11b5c:	mov	r0, fp
   11b5e:	bl	13fd8 <__ssprint_r>
   11b62:	cmp	r0, #0
   11b64:	bne.w	1106e <_svfprintf_r+0x1f2>
   11b68:	sub.w	r8, r8, #16
   11b6c:	cmp.w	r8, #16
   11b70:	ldr	r4, [sp, #148]	; 0x94
   11b72:	ldr	r5, [sp, #144]	; 0x90
   11b74:	add.w	r9, sp, #192	; 0xc0
   11b78:	bgt.n	11b44 <_svfprintf_r+0xcc8>
   11b7a:	mov	r6, r8
   11b7c:	ldr.w	r8, [sp, #52]	; 0x34
   11b80:	ldr	r3, [sp, #60]	; 0x3c
   11b82:	adds	r5, #1
   11b84:	add	r4, r6
   11b86:	cmp	r5, #7
   11b88:	str	r4, [sp, #148]	; 0x94
   11b8a:	str	r5, [sp, #144]	; 0x90
   11b8c:	stmia.w	r9, {r3, r6}
   11b90:	ble.w	119aa <_svfprintf_r+0xb2e>
   11b94:	add	r2, sp, #140	; 0x8c
   11b96:	ldr	r1, [sp, #36]	; 0x24
   11b98:	ldr	r0, [sp, #40]	; 0x28
   11b9a:	bl	13fd8 <__ssprint_r>
   11b9e:	cmp	r0, #0
   11ba0:	bne.w	1106e <_svfprintf_r+0x1f2>
   11ba4:	ldr	r4, [sp, #148]	; 0x94
   11ba6:	ldr	r5, [sp, #144]	; 0x90
   11ba8:	add.w	r9, sp, #192	; 0xc0
   11bac:	b.n	119ae <_svfprintf_r+0xb32>
   11bae:	ldr	r1, [sp, #28]
   11bb0:	ands.w	r2, r1, #16
   11bb4:	beq.w	11dc8 <_svfprintf_r+0xf4c>
   11bb8:	ldr	r0, [sp, #56]	; 0x38
   11bba:	strb.w	r3, [sp, #111]	; 0x6f
   11bbe:	cmp.w	fp, #0
   11bc2:	ldr	r4, [r0, #0]
   11bc4:	add.w	r7, r0, #4
   11bc8:	mov.w	r5, #0
   11bcc:	blt.n	11c1c <_svfprintf_r+0xda0>
   11bce:	mov	r2, r1
   11bd0:	bic.w	r2, r2, #128	; 0x80
   11bd4:	str	r2, [sp, #28]
   11bd6:	orrs.w	r2, r4, r5
   11bda:	str	r7, [sp, #56]	; 0x38
   11bdc:	mov	r7, r3
   11bde:	bne.w	111c0 <_svfprintf_r+0x344>
   11be2:	b.n	11576 <_svfprintf_r+0x6fa>
   11be4:	ldr	r3, [sp, #28]
   11be6:	lsls	r1, r3, #27
   11be8:	bmi.n	11c40 <_svfprintf_r+0xdc4>
   11bea:	ldr	r3, [sp, #28]
   11bec:	lsls	r2, r3, #25
   11bee:	bpl.n	11c40 <_svfprintf_r+0xdc4>
   11bf0:	ldr	r1, [sp, #56]	; 0x38
   11bf2:	ldrsh.w	r4, [r1]
   11bf6:	adds	r1, #4
   11bf8:	asrs	r5, r4, #31
   11bfa:	mov	r2, r4
   11bfc:	mov	r3, r5
   11bfe:	str	r1, [sp, #56]	; 0x38
   11c00:	b.w	1119a <_svfprintf_r+0x31e>
   11c04:	ldr	r1, [sp, #56]	; 0x38
   11c06:	strb.w	r3, [sp, #111]	; 0x6f
   11c0a:	cmp.w	fp, #0
   11c0e:	ldr	r4, [r1, #0]
   11c10:	add.w	r7, r1, #4
   11c14:	mov.w	r5, #0
   11c18:	bge.w	120a6 <_svfprintf_r+0x122a>
   11c1c:	str	r7, [sp, #56]	; 0x38
   11c1e:	mov	r7, r3
   11c20:	orrs.w	r3, r4, r5
   11c24:	bne.w	111c0 <_svfprintf_r+0x344>
   11c28:	b.n	11580 <_svfprintf_r+0x704>
   11c2a:	adds	r3, #1
   11c2c:	ldr	r2, [sp, #60]	; 0x3c
   11c2e:	str	r3, [sp, #144]	; 0x90
   11c30:	add	r4, r5
   11c32:	cmp	r3, #7
   11c34:	str	r4, [sp, #148]	; 0x94
   11c36:	stmia.w	r9, {r2, r5}
   11c3a:	ble.w	11398 <_svfprintf_r+0x51c>
   11c3e:	b.n	119c8 <_svfprintf_r+0xb4c>
   11c40:	ldr	r2, [sp, #56]	; 0x38
   11c42:	ldr	r4, [r2, #0]
   11c44:	mov	r3, r2
   11c46:	adds	r3, #4
   11c48:	asrs	r5, r4, #31
   11c4a:	mov	r2, r4
   11c4c:	str	r3, [sp, #56]	; 0x38
   11c4e:	cmp	r2, #0
   11c50:	mov	r3, r5
   11c52:	sbcs.w	r3, r3, #0
   11c56:	bge.w	111a4 <_svfprintf_r+0x328>
   11c5a:	negs	r4, r4
   11c5c:	mov.w	r7, #45	; 0x2d
   11c60:	sbc.w	r5, r5, r5, lsl #1
   11c64:	cmp.w	fp, #0
   11c68:	strb.w	r7, [sp, #111]	; 0x6f
   11c6c:	blt.w	111c0 <_svfprintf_r+0x344>
   11c70:	ldr	r3, [sp, #28]
   11c72:	bic.w	r3, r3, #128	; 0x80
   11c76:	str	r3, [sp, #28]
   11c78:	b.w	111c0 <_svfprintf_r+0x344>
   11c7c:	add	r2, sp, #140	; 0x8c
   11c7e:	ldr	r1, [sp, #36]	; 0x24
   11c80:	ldr	r0, [sp, #40]	; 0x28
   11c82:	bl	13fd8 <__ssprint_r>
   11c86:	cmp	r0, #0
   11c88:	bne.w	1106e <_svfprintf_r+0x1f2>
   11c8c:	ldr	r4, [sp, #148]	; 0x94
   11c8e:	add.w	r9, sp, #192	; 0xc0
   11c92:	ldr	r2, [sp, #76]	; 0x4c
   11c94:	ldr	r3, [sp, #116]	; 0x74
   11c96:	add	r2, r6
   11c98:	mov	r7, r2
   11c9a:	ldr	r2, [sp, #72]	; 0x48
   11c9c:	cmp	r3, r2
   11c9e:	blt.n	11d30 <_svfprintf_r+0xeb4>
   11ca0:	ldr	r2, [sp, #28]
   11ca2:	lsls	r5, r2, #31
   11ca4:	bmi.n	11d30 <_svfprintf_r+0xeb4>
   11ca6:	ldr	r1, [sp, #72]	; 0x48
   11ca8:	add	r6, r1
   11caa:	subs	r5, r6, r7
   11cac:	subs	r3, r1, r3
   11cae:	cmp	r5, r3
   11cb0:	it	ge
   11cb2:	movge	r5, r3
   11cb4:	cmp	r5, #0
   11cb6:	mov	r6, r5
   11cb8:	ble.n	11cd6 <_svfprintf_r+0xe5a>
   11cba:	ldr	r2, [sp, #144]	; 0x90
   11cbc:	str.w	r7, [r9]
   11cc0:	adds	r2, #1
   11cc2:	add	r4, r5
   11cc4:	cmp	r2, #7
   11cc6:	str	r4, [sp, #148]	; 0x94
   11cc8:	str.w	r5, [r9, #4]
   11ccc:	str	r2, [sp, #144]	; 0x90
   11cce:	bgt.w	122f6 <_svfprintf_r+0x147a>
   11cd2:	add.w	r9, r9, #8
   11cd6:	cmp	r6, #0
   11cd8:	ite	ge
   11cda:	subge	r5, r3, r6
   11cdc:	movlt	r5, r3
   11cde:	cmp	r5, #0
   11ce0:	ble.w	1139c <_svfprintf_r+0x520>
   11ce4:	ldr	r2, [pc, #168]	; (11d90 <_svfprintf_r+0xf14>)
   11ce6:	ldr	r3, [sp, #144]	; 0x90
   11ce8:	str	r2, [sp, #60]	; 0x3c
   11cea:	cmp	r5, #16
   11cec:	ble.n	11c2a <_svfprintf_r+0xdae>
   11cee:	movs	r6, #16
   11cf0:	ldr	r7, [sp, #40]	; 0x28
   11cf2:	ldr.w	fp, [sp, #36]	; 0x24
   11cf6:	b.n	11d02 <_svfprintf_r+0xe86>
   11cf8:	add.w	r9, r9, #8
   11cfc:	subs	r5, #16
   11cfe:	cmp	r5, #16
   11d00:	ble.n	11c2a <_svfprintf_r+0xdae>
   11d02:	adds	r3, #1
   11d04:	adds	r4, #16
   11d06:	cmp	r3, #7
   11d08:	str	r4, [sp, #148]	; 0x94
   11d0a:	str	r3, [sp, #144]	; 0x90
   11d0c:	str.w	sl, [r9]
   11d10:	str.w	r6, [r9, #4]
   11d14:	ble.n	11cf8 <_svfprintf_r+0xe7c>
   11d16:	add	r2, sp, #140	; 0x8c
   11d18:	mov	r1, fp
   11d1a:	mov	r0, r7
   11d1c:	bl	13fd8 <__ssprint_r>
   11d20:	cmp	r0, #0
   11d22:	bne.w	1106e <_svfprintf_r+0x1f2>
   11d26:	ldr	r4, [sp, #148]	; 0x94
   11d28:	ldr	r3, [sp, #144]	; 0x90
   11d2a:	add.w	r9, sp, #192	; 0xc0
   11d2e:	b.n	11cfc <_svfprintf_r+0xe80>
   11d30:	ldr	r2, [sp, #144]	; 0x90
   11d32:	ldr	r0, [sp, #88]	; 0x58
   11d34:	ldr	r1, [sp, #92]	; 0x5c
   11d36:	str.w	r1, [r9]
   11d3a:	adds	r2, #1
   11d3c:	add	r4, r0
   11d3e:	cmp	r2, #7
   11d40:	str	r4, [sp, #148]	; 0x94
   11d42:	str.w	r0, [r9, #4]
   11d46:	str	r2, [sp, #144]	; 0x90
   11d48:	bgt.w	12296 <_svfprintf_r+0x141a>
   11d4c:	add.w	r9, r9, #8
   11d50:	b.n	11ca6 <_svfprintf_r+0xe2a>
   11d52:	ldr	r3, [sp, #28]
   11d54:	lsls	r0, r3, #31
   11d56:	bmi.w	11942 <_svfprintf_r+0xac6>
   11d5a:	adds	r5, #1
   11d5c:	adds	r4, #1
   11d5e:	movs	r3, #1
   11d60:	cmp	r5, #7
   11d62:	str	r4, [sp, #148]	; 0x94
   11d64:	str	r5, [sp, #144]	; 0x90
   11d66:	str.w	r6, [r9]
   11d6a:	str.w	r3, [r9, #4]
   11d6e:	ble.w	119aa <_svfprintf_r+0xb2e>
   11d72:	b.n	11b94 <_svfprintf_r+0xd18>
   11d74:	add	r2, sp, #140	; 0x8c
   11d76:	ldr	r1, [sp, #36]	; 0x24
   11d78:	ldr	r0, [sp, #40]	; 0x28
   11d7a:	bl	13fd8 <__ssprint_r>
   11d7e:	cmp	r0, #0
   11d80:	bne.w	1106e <_svfprintf_r+0x1f2>
   11d84:	ldr	r4, [sp, #148]	; 0x94
   11d86:	ldr	r5, [sp, #144]	; 0x90
   11d88:	add.w	r9, sp, #192	; 0xc0
   11d8c:	b.n	1195e <_svfprintf_r+0xae2>
   11d8e:	nop
   11d90:	.word	0x000148b8
   11d94:	add	r2, sp, #140	; 0x8c
   11d96:	ldr	r1, [sp, #36]	; 0x24
   11d98:	ldr	r0, [sp, #40]	; 0x28
   11d9a:	bl	13fd8 <__ssprint_r>
   11d9e:	cmp	r0, #0
   11da0:	bne.w	1106e <_svfprintf_r+0x1f2>
   11da4:	ldr	r4, [sp, #148]	; 0x94
   11da6:	ldr	r5, [sp, #144]	; 0x90
   11da8:	add.w	r9, sp, #192	; 0xc0
   11dac:	b.n	1197c <_svfprintf_r+0xb00>
   11dae:	add	r2, sp, #140	; 0x8c
   11db0:	ldr	r1, [sp, #36]	; 0x24
   11db2:	ldr	r0, [sp, #40]	; 0x28
   11db4:	bl	13fd8 <__ssprint_r>
   11db8:	cmp	r0, #0
   11dba:	bne.w	1106e <_svfprintf_r+0x1f2>
   11dbe:	ldr	r4, [sp, #148]	; 0x94
   11dc0:	add.w	r9, sp, #192	; 0xc0
   11dc4:	b.w	112f8 <_svfprintf_r+0x47c>
   11dc8:	ldr	r1, [sp, #28]
   11dca:	ands.w	r3, r1, #64	; 0x40
   11dce:	beq.w	11c04 <_svfprintf_r+0xd88>
   11dd2:	ldr	r0, [sp, #56]	; 0x38
   11dd4:	strb.w	r2, [sp, #111]	; 0x6f
   11dd8:	mov	r3, r0
   11dda:	cmp.w	fp, #0
   11dde:	add.w	r3, r3, #4
   11de2:	ldrh	r4, [r0, #0]
   11de4:	mov.w	r5, #0
   11de8:	blt.w	1215e <_svfprintf_r+0x12e2>
   11dec:	bic.w	r1, r1, #128	; 0x80
   11df0:	str	r1, [sp, #28]
   11df2:	orrs.w	r1, r4, r5
   11df6:	str	r3, [sp, #56]	; 0x38
   11df8:	mov	r7, r2
   11dfa:	bne.w	111c0 <_svfprintf_r+0x344>
   11dfe:	b.w	11576 <_svfprintf_r+0x6fa>
   11e02:	ldr	r4, [sp, #80]	; 0x50
   11e04:	mov	r2, r4
   11e06:	mov	r0, r4
   11e08:	ldr	r4, [sp, #84]	; 0x54
   11e0a:	mov	r3, r4
   11e0c:	mov	r1, r4
   11e0e:	bl	f3c8 <__aeabi_dcmpun>
   11e12:	cmp	r0, #0
   11e14:	bne.w	12442 <_svfprintf_r+0x15c6>
   11e18:	ldr	r3, [sp, #68]	; 0x44
   11e1a:	cmp.w	fp, #4294967295
   11e1e:	bic.w	r3, r3, #32
   11e22:	str	r3, [sp, #52]	; 0x34
   11e24:	beq.w	12314 <_svfprintf_r+0x1498>
   11e28:	cmp	r3, #71	; 0x47
   11e2a:	beq.w	12152 <_svfprintf_r+0x12d6>
   11e2e:	ldr	r3, [sp, #28]
   11e30:	orr.w	r3, r3, #256	; 0x100
   11e34:	str	r3, [sp, #64]	; 0x40
   11e36:	ldr	r3, [sp, #84]	; 0x54
   11e38:	subs	r7, r3, #0
   11e3a:	ldr	r3, [sp, #80]	; 0x50
   11e3c:	str	r3, [sp, #32]
   11e3e:	ittet	lt
   11e40:	movlt	r3, r7
   11e42:	addlt.w	r7, r3, #2147483648	; 0x80000000
   11e46:	movge	r3, #0
   11e48:	movlt	r3, #45	; 0x2d
   11e4a:	str	r3, [sp, #60]	; 0x3c
   11e4c:	ldr	r3, [sp, #68]	; 0x44
   11e4e:	cmp	r3, #102	; 0x66
   11e50:	beq.w	1231a <_svfprintf_r+0x149e>
   11e54:	cmp	r3, #70	; 0x46
   11e56:	beq.w	12116 <_svfprintf_r+0x129a>
   11e5a:	ldr	r3, [sp, #52]	; 0x34
   11e5c:	ldr	r2, [sp, #32]
   11e5e:	cmp	r3, #69	; 0x45
   11e60:	add	r0, sp, #132	; 0x84
   11e62:	add	r1, sp, #120	; 0x78
   11e64:	ite	eq
   11e66:	addeq.w	r5, fp, #1
   11e6a:	movne	r5, fp
   11e6c:	str	r0, [sp, #16]
   11e6e:	str	r1, [sp, #12]
   11e70:	add	r0, sp, #116	; 0x74
   11e72:	movs	r1, #2
   11e74:	mov	r3, r7
   11e76:	str	r0, [sp, #8]
   11e78:	str	r5, [sp, #4]
   11e7a:	str	r1, [sp, #0]
   11e7c:	ldr	r0, [sp, #40]	; 0x28
   11e7e:	bl	127c8 <_dtoa_r>
   11e82:	ldr	r3, [sp, #68]	; 0x44
   11e84:	cmp	r3, #103	; 0x67
   11e86:	mov	r6, r0
   11e88:	bne.w	12386 <_svfprintf_r+0x150a>
   11e8c:	ldr	r3, [sp, #28]
   11e8e:	lsls	r2, r3, #31
   11e90:	bpl.w	12412 <_svfprintf_r+0x1596>
   11e94:	adds	r4, r6, r5
   11e96:	ldr	r0, [sp, #32]
   11e98:	mov	r1, r7
   11e9a:	movs	r2, #0
   11e9c:	movs	r3, #0
   11e9e:	bl	f364 <__aeabi_dcmpeq>
   11ea2:	cmp	r0, #0
   11ea4:	bne.w	121f0 <_svfprintf_r+0x1374>
   11ea8:	ldr	r3, [sp, #132]	; 0x84
   11eaa:	cmp	r4, r3
   11eac:	bls.n	11ebc <_svfprintf_r+0x1040>
   11eae:	movs	r1, #48	; 0x30
   11eb0:	adds	r2, r3, #1
   11eb2:	str	r2, [sp, #132]	; 0x84
   11eb4:	strb	r1, [r3, #0]
   11eb6:	ldr	r3, [sp, #132]	; 0x84
   11eb8:	cmp	r4, r3
   11eba:	bhi.n	11eb0 <_svfprintf_r+0x1034>
   11ebc:	subs	r3, r3, r6
   11ebe:	str	r3, [sp, #72]	; 0x48
   11ec0:	ldr	r3, [sp, #52]	; 0x34
   11ec2:	cmp	r3, #71	; 0x47
   11ec4:	beq.w	121ca <_svfprintf_r+0x134e>
   11ec8:	ldr	r3, [sp, #68]	; 0x44
   11eca:	cmp	r3, #101	; 0x65
   11ecc:	ble.w	123a4 <_svfprintf_r+0x1528>
   11ed0:	ldr	r3, [sp, #68]	; 0x44
   11ed2:	cmp	r3, #102	; 0x66
   11ed4:	ldr	r3, [sp, #116]	; 0x74
   11ed6:	str	r3, [sp, #76]	; 0x4c
   11ed8:	beq.w	1236a <_svfprintf_r+0x14ee>
   11edc:	ldr	r2, [sp, #76]	; 0x4c
   11ede:	ldr	r1, [sp, #72]	; 0x48
   11ee0:	cmp	r2, r1
   11ee2:	blt.w	12352 <_svfprintf_r+0x14d6>
   11ee6:	ldr	r3, [sp, #28]
   11ee8:	lsls	r1, r3, #31
   11eea:	bmi.w	12400 <_svfprintf_r+0x1584>
   11eee:	bic.w	r3, r2, r2, asr #31
   11ef2:	str	r2, [sp, #52]	; 0x34
   11ef4:	movs	r2, #103	; 0x67
   11ef6:	str	r2, [sp, #68]	; 0x44
   11ef8:	ldr	r2, [sp, #60]	; 0x3c
   11efa:	cmp	r2, #0
   11efc:	bne.w	121b6 <_svfprintf_r+0x133a>
   11f00:	str	r3, [sp, #32]
   11f02:	ldr	r3, [sp, #64]	; 0x40
   11f04:	str	r3, [sp, #28]
   11f06:	mov	fp, r2
   11f08:	ldrb.w	r7, [sp, #111]	; 0x6f
   11f0c:	b.w	11208 <_svfprintf_r+0x38c>
   11f10:	ldr	r3, [sp, #28]
   11f12:	lsls	r7, r3, #27
   11f14:	bmi.n	11f2e <_svfprintf_r+0x10b2>
   11f16:	ldr	r3, [sp, #28]
   11f18:	lsls	r6, r3, #25
   11f1a:	bpl.n	11f2e <_svfprintf_r+0x10b2>
   11f1c:	ldr	r2, [sp, #56]	; 0x38
   11f1e:	ldr	r3, [r2, #0]
   11f20:	adds	r2, #4
   11f22:	str	r2, [sp, #56]	; 0x38
   11f24:	ldrh.w	r2, [sp, #44]	; 0x2c
   11f28:	strh	r2, [r3, #0]
   11f2a:	b.w	10ec8 <_svfprintf_r+0x4c>
   11f2e:	ldr	r2, [sp, #56]	; 0x38
   11f30:	ldr	r3, [r2, #0]
   11f32:	adds	r2, #4
   11f34:	str	r2, [sp, #56]	; 0x38
   11f36:	ldr	r2, [sp, #44]	; 0x2c
   11f38:	str	r2, [r3, #0]
   11f3a:	b.w	10ec8 <_svfprintf_r+0x4c>
   11f3e:	ldr	r3, [sp, #28]
   11f40:	ldr	r2, [sp, #56]	; 0x38
   11f42:	tst.w	r3, #64	; 0x40
   11f46:	mov	r3, r2
   11f48:	beq.w	12168 <_svfprintf_r+0x12ec>
   11f4c:	adds	r3, #4
   11f4e:	ldrh	r4, [r2, #0]
   11f50:	str	r3, [sp, #56]	; 0x38
   11f52:	movs	r5, #0
   11f54:	b.w	115b0 <_svfprintf_r+0x734>
   11f58:	ldr	r1, [sp, #28]
   11f5a:	ands.w	r3, r1, #64	; 0x40
   11f5e:	beq.n	11f90 <_svfprintf_r+0x1114>
   11f60:	ldr	r0, [sp, #56]	; 0x38
   11f62:	strb.w	r2, [sp, #111]	; 0x6f
   11f66:	mov	r3, r0
   11f68:	cmp.w	fp, #0
   11f6c:	add.w	r3, r3, #4
   11f70:	ldrh	r4, [r0, #0]
   11f72:	mov.w	r5, #0
   11f76:	blt.w	12164 <_svfprintf_r+0x12e8>
   11f7a:	bic.w	r1, r1, #128	; 0x80
   11f7e:	str	r1, [sp, #28]
   11f80:	orrs.w	r1, r4, r5
   11f84:	str	r3, [sp, #56]	; 0x38
   11f86:	beq.w	117b0 <_svfprintf_r+0x934>
   11f8a:	mov	r7, r2
   11f8c:	b.w	110c6 <_svfprintf_r+0x24a>
   11f90:	ldr	r1, [sp, #56]	; 0x38
   11f92:	strb.w	r3, [sp, #111]	; 0x6f
   11f96:	cmp.w	fp, #0
   11f9a:	ldr	r4, [r1, #0]
   11f9c:	add.w	r7, r1, #4
   11fa0:	mov.w	r5, #0
   11fa4:	bge.w	120aa <_svfprintf_r+0x122e>
   11fa8:	str	r7, [sp, #56]	; 0x38
   11faa:	movs	r7, #0
   11fac:	b.w	110c6 <_svfprintf_r+0x24a>
   11fb0:	mov	r4, r2
   11fb2:	adds	r3, #1
   11fb4:	ldr	r2, [sp, #60]	; 0x3c
   11fb6:	str	r3, [sp, #144]	; 0x90
   11fb8:	add	r4, r5
   11fba:	cmp	r3, #7
   11fbc:	str	r4, [sp, #148]	; 0x94
   11fbe:	stmia.w	r9, {r2, r5}
   11fc2:	bgt.w	11c7c <_svfprintf_r+0xe00>
   11fc6:	add.w	r9, r9, #8
   11fca:	b.n	11c92 <_svfprintf_r+0xe16>
   11fcc:	movs	r7, #0
   11fce:	cmp	fp, r7
   11fd0:	strb.w	r7, [sp, #111]	; 0x6f
   11fd4:	blt.w	117d4 <_svfprintf_r+0x958>
   11fd8:	ldr	r3, [sp, #28]
   11fda:	bic.w	r3, r3, #128	; 0x80
   11fde:	str	r3, [sp, #28]
   11fe0:	b.w	11770 <_svfprintf_r+0x8f4>
   11fe4:	add	r2, sp, #140	; 0x8c
   11fe6:	ldr	r1, [sp, #36]	; 0x24
   11fe8:	ldr	r0, [sp, #40]	; 0x28
   11fea:	bl	13fd8 <__ssprint_r>
   11fee:	cmp	r0, #0
   11ff0:	bne.w	1106e <_svfprintf_r+0x1f2>
   11ff4:	ldr	r4, [sp, #148]	; 0x94
   11ff6:	add.w	r9, sp, #192	; 0xc0
   11ffa:	b.n	11818 <_svfprintf_r+0x99c>
   11ffc:	ldr	r7, [sp, #56]	; 0x38
   11ffe:	b.w	117c6 <_svfprintf_r+0x94a>
   12002:	ldr	r3, [sp, #144]	; 0x90
   12004:	ldr	r2, [pc, #708]	; (122cc <_svfprintf_r+0x1450>)
   12006:	str.w	r2, [r9]
   1200a:	adds	r3, #1
   1200c:	adds	r4, #1
   1200e:	movs	r2, #1
   12010:	cmp	r3, #7
   12012:	str	r4, [sp, #148]	; 0x94
   12014:	str	r3, [sp, #144]	; 0x90
   12016:	str.w	r2, [r9, #4]
   1201a:	bgt.n	120fc <_svfprintf_r+0x1280>
   1201c:	add.w	r9, r9, #8
   12020:	cbnz	r5, 1202e <_svfprintf_r+0x11b2>
   12022:	ldr	r3, [sp, #72]	; 0x48
   12024:	cbnz	r3, 1202e <_svfprintf_r+0x11b2>
   12026:	ldr	r3, [sp, #28]
   12028:	lsls	r7, r3, #31
   1202a:	bpl.w	1139c <_svfprintf_r+0x520>
   1202e:	ldr	r3, [sp, #144]	; 0x90
   12030:	ldr	r1, [sp, #88]	; 0x58
   12032:	ldr	r2, [sp, #92]	; 0x5c
   12034:	str.w	r2, [r9]
   12038:	adds	r3, #1
   1203a:	add	r4, r1
   1203c:	cmp	r3, #7
   1203e:	str	r4, [sp, #148]	; 0x94
   12040:	str.w	r1, [r9, #4]
   12044:	str	r3, [sp, #144]	; 0x90
   12046:	bgt.w	123dc <_svfprintf_r+0x1560>
   1204a:	add.w	r9, r9, #8
   1204e:	negs	r5, r5
   12050:	cmp	r5, #0
   12052:	ble.w	1219c <_svfprintf_r+0x1320>
   12056:	ldr	r2, [pc, #632]	; (122d0 <_svfprintf_r+0x1454>)
   12058:	str	r2, [sp, #60]	; 0x3c
   1205a:	cmp	r5, #16
   1205c:	ble.w	122b2 <_svfprintf_r+0x1436>
   12060:	mov	r2, r4
   12062:	movs	r7, #16
   12064:	ldr.w	fp, [sp, #40]	; 0x28
   12068:	ldr	r4, [sp, #36]	; 0x24
   1206a:	b.n	12078 <_svfprintf_r+0x11fc>
   1206c:	add.w	r9, r9, #8
   12070:	subs	r5, #16
   12072:	cmp	r5, #16
   12074:	ble.w	122b0 <_svfprintf_r+0x1434>
   12078:	adds	r3, #1
   1207a:	adds	r2, #16
   1207c:	cmp	r3, #7
   1207e:	str	r2, [sp, #148]	; 0x94
   12080:	str	r3, [sp, #144]	; 0x90
   12082:	str.w	sl, [r9]
   12086:	str.w	r7, [r9, #4]
   1208a:	ble.n	1206c <_svfprintf_r+0x11f0>
   1208c:	add	r2, sp, #140	; 0x8c
   1208e:	mov	r1, r4
   12090:	mov	r0, fp
   12092:	bl	13fd8 <__ssprint_r>
   12096:	cmp	r0, #0
   12098:	bne.w	1106e <_svfprintf_r+0x1f2>
   1209c:	ldr	r2, [sp, #148]	; 0x94
   1209e:	ldr	r3, [sp, #144]	; 0x90
   120a0:	add.w	r9, sp, #192	; 0xc0
   120a4:	b.n	12070 <_svfprintf_r+0x11f4>
   120a6:	ldr	r2, [sp, #28]
   120a8:	b.n	11bd0 <_svfprintf_r+0xd54>
   120aa:	ldr	r2, [sp, #28]
   120ac:	b.w	1151a <_svfprintf_r+0x69e>
   120b0:	ldr	r3, [sp, #28]
   120b2:	orr.w	r3, r3, #32
   120b6:	str	r3, [sp, #28]
   120b8:	add.w	r8, r8, #1
   120bc:	ldrb.w	r3, [r8]
   120c0:	b.w	10f2e <_svfprintf_r+0xb2>
   120c4:	add	r2, sp, #140	; 0x8c
   120c6:	ldr	r1, [sp, #36]	; 0x24
   120c8:	ldr	r0, [sp, #40]	; 0x28
   120ca:	bl	13fd8 <__ssprint_r>
   120ce:	cmp	r0, #0
   120d0:	bne.w	1106e <_svfprintf_r+0x1f2>
   120d4:	ldr	r4, [sp, #148]	; 0x94
   120d6:	add.w	r9, sp, #192	; 0xc0
   120da:	b.w	11848 <_svfprintf_r+0x9cc>
   120de:	movs	r1, #64	; 0x40
   120e0:	ldr	r0, [sp, #40]	; 0x28
   120e2:	bl	ff64 <_malloc_r>
   120e6:	ldr	r2, [sp, #36]	; 0x24
   120e8:	str	r0, [r2, #0]
   120ea:	str	r0, [r2, #16]
   120ec:	cmp	r0, #0
   120ee:	beq.w	124d8 <_svfprintf_r+0x165c>
   120f2:	ldr	r2, [sp, #36]	; 0x24
   120f4:	movs	r3, #64	; 0x40
   120f6:	str	r3, [r2, #20]
   120f8:	b.w	10eaa <_svfprintf_r+0x2e>
   120fc:	add	r2, sp, #140	; 0x8c
   120fe:	ldr	r1, [sp, #36]	; 0x24
   12100:	ldr	r0, [sp, #40]	; 0x28
   12102:	bl	13fd8 <__ssprint_r>
   12106:	cmp	r0, #0
   12108:	bne.w	1106e <_svfprintf_r+0x1f2>
   1210c:	ldr	r5, [sp, #116]	; 0x74
   1210e:	ldr	r4, [sp, #148]	; 0x94
   12110:	add.w	r9, sp, #192	; 0xc0
   12114:	b.n	12020 <_svfprintf_r+0x11a4>
   12116:	add	r0, sp, #132	; 0x84
   12118:	add	r1, sp, #120	; 0x78
   1211a:	str	r0, [sp, #16]
   1211c:	str	r1, [sp, #12]
   1211e:	add	r0, sp, #116	; 0x74
   12120:	movs	r1, #3
   12122:	str	r0, [sp, #8]
   12124:	ldr	r2, [sp, #32]
   12126:	str.w	fp, [sp, #4]
   1212a:	mov	r3, r7
   1212c:	str	r1, [sp, #0]
   1212e:	ldr	r0, [sp, #40]	; 0x28
   12130:	bl	127c8 <_dtoa_r>
   12134:	mov	r5, fp
   12136:	mov	r6, r0
   12138:	ldr	r3, [sp, #68]	; 0x44
   1213a:	cmp	r3, #70	; 0x46
   1213c:	add.w	r4, r6, r5
   12140:	bne.w	11e96 <_svfprintf_r+0x101a>
   12144:	ldrb	r3, [r6, #0]
   12146:	cmp	r3, #48	; 0x30
   12148:	beq.w	12426 <_svfprintf_r+0x15aa>
   1214c:	ldr	r5, [sp, #116]	; 0x74
   1214e:	add	r4, r5
   12150:	b.n	11e96 <_svfprintf_r+0x101a>
   12152:	cmp.w	fp, #0
   12156:	it	eq
   12158:	moveq.w	fp, #1
   1215c:	b.n	11e2e <_svfprintf_r+0xfb2>
   1215e:	str	r3, [sp, #56]	; 0x38
   12160:	mov	r7, r2
   12162:	b.n	11c20 <_svfprintf_r+0xda4>
   12164:	str	r3, [sp, #56]	; 0x38
   12166:	b.n	11faa <_svfprintf_r+0x112e>
   12168:	adds	r3, #4
   1216a:	ldr	r4, [r2, #0]
   1216c:	str	r3, [sp, #56]	; 0x38
   1216e:	movs	r5, #0
   12170:	b.w	115b0 <_svfprintf_r+0x734>
   12174:	mov	r0, r6
   12176:	bl	10d00 <strlen>
   1217a:	mov	fp, r4
   1217c:	mov	r3, r0
   1217e:	str	r0, [sp, #52]	; 0x34
   12180:	b.w	1175a <_svfprintf_r+0x8de>
   12184:	add	r2, sp, #140	; 0x8c
   12186:	ldr	r1, [sp, #36]	; 0x24
   12188:	ldr	r0, [sp, #40]	; 0x28
   1218a:	bl	13fd8 <__ssprint_r>
   1218e:	cmp	r0, #0
   12190:	bne.w	1106e <_svfprintf_r+0x1f2>
   12194:	ldr	r4, [sp, #148]	; 0x94
   12196:	ldr	r3, [sp, #144]	; 0x90
   12198:	add.w	r9, sp, #192	; 0xc0
   1219c:	ldr	r1, [sp, #72]	; 0x48
   1219e:	str.w	r6, [r9]
   121a2:	adds	r3, #1
   121a4:	add	r4, r1
   121a6:	cmp	r3, #7
   121a8:	str	r4, [sp, #148]	; 0x94
   121aa:	str	r3, [sp, #144]	; 0x90
   121ac:	str.w	r1, [r9, #4]
   121b0:	ble.w	11398 <_svfprintf_r+0x51c>
   121b4:	b.n	119c8 <_svfprintf_r+0xb4c>
   121b6:	movs	r7, #45	; 0x2d
   121b8:	str	r3, [sp, #32]
   121ba:	ldr	r3, [sp, #64]	; 0x40
   121bc:	str	r3, [sp, #28]
   121be:	strb.w	r7, [sp, #111]	; 0x6f
   121c2:	mov.w	fp, #0
   121c6:	b.w	1120a <_svfprintf_r+0x38e>
   121ca:	ldr	r3, [sp, #116]	; 0x74
   121cc:	adds	r5, r3, #3
   121ce:	blt.n	121f4 <_svfprintf_r+0x1378>
   121d0:	cmp	fp, r3
   121d2:	blt.n	121f4 <_svfprintf_r+0x1378>
   121d4:	str	r3, [sp, #76]	; 0x4c
   121d6:	b.n	11edc <_svfprintf_r+0x1060>
   121d8:	add	r2, sp, #140	; 0x8c
   121da:	ldr	r1, [sp, #36]	; 0x24
   121dc:	ldr	r0, [sp, #40]	; 0x28
   121de:	bl	13fd8 <__ssprint_r>
   121e2:	cmp	r0, #0
   121e4:	bne.w	1106e <_svfprintf_r+0x1f2>
   121e8:	ldr	r4, [sp, #148]	; 0x94
   121ea:	add.w	r9, sp, #192	; 0xc0
   121ee:	b.n	11a96 <_svfprintf_r+0xc1a>
   121f0:	mov	r3, r4
   121f2:	b.n	11ebc <_svfprintf_r+0x1040>
   121f4:	ldr	r2, [sp, #68]	; 0x44
   121f6:	subs	r2, #2
   121f8:	str	r2, [sp, #68]	; 0x44
   121fa:	subs	r3, #1
   121fc:	cmp	r3, #0
   121fe:	ldrb.w	r2, [sp, #68]	; 0x44
   12202:	str	r3, [sp, #116]	; 0x74
   12204:	it	lt
   12206:	neglt	r3, r3
   12208:	strb.w	r2, [sp, #124]	; 0x7c
   1220c:	ite	lt
   1220e:	movlt	r2, #45	; 0x2d
   12210:	movge	r2, #43	; 0x2b
   12212:	cmp	r3, #9
   12214:	strb.w	r2, [sp, #125]	; 0x7d
   12218:	ble.w	12416 <_svfprintf_r+0x159a>
   1221c:	add.w	r0, sp, #139	; 0x8b
   12220:	mov	r4, r0
   12222:	ldr	r2, [pc, #176]	; (122d4 <_svfprintf_r+0x1458>)
   12224:	smull	r2, r1, r2, r3
   12228:	asrs	r2, r3, #31
   1222a:	rsb	r2, r2, r1, asr #2
   1222e:	add.w	r1, r2, r2, lsl #2
   12232:	sub.w	r3, r3, r1, lsl #1
   12236:	add.w	r1, r3, #48	; 0x30
   1223a:	cmp	r2, #9
   1223c:	mov	r3, r2
   1223e:	strb.w	r1, [r4, #-1]!
   12242:	bgt.n	12222 <_svfprintf_r+0x13a6>
   12244:	mov	r1, r4
   12246:	adds	r3, #48	; 0x30
   12248:	uxtb	r2, r3
   1224a:	strb.w	r2, [r1, #-1]!
   1224e:	cmp	r0, r1
   12250:	bls.w	124d2 <_svfprintf_r+0x1656>
   12254:	add.w	r1, sp, #126	; 0x7e
   12258:	mov	r3, r4
   1225a:	b.n	12260 <_svfprintf_r+0x13e4>
   1225c:	ldrb.w	r2, [r3], #1
   12260:	strb.w	r2, [r1], #1
   12264:	cmp	r0, r3
   12266:	bne.n	1225c <_svfprintf_r+0x13e0>
   12268:	adds	r3, r0, #1
   1226a:	subs	r3, r3, r4
   1226c:	add.w	r2, sp, #126	; 0x7e
   12270:	add	r3, r2
   12272:	add	r2, sp, #124	; 0x7c
   12274:	subs	r3, r3, r2
   12276:	ldr	r2, [sp, #72]	; 0x48
   12278:	str	r3, [sp, #100]	; 0x64
   1227a:	cmp	r2, #1
   1227c:	add	r3, r2
   1227e:	str	r3, [sp, #52]	; 0x34
   12280:	ble.w	12470 <_svfprintf_r+0x15f4>
   12284:	ldr	r3, [sp, #52]	; 0x34
   12286:	ldr	r2, [sp, #88]	; 0x58
   12288:	add	r3, r2
   1228a:	movs	r2, #0
   1228c:	str	r3, [sp, #52]	; 0x34
   1228e:	str	r2, [sp, #76]	; 0x4c
   12290:	bic.w	r3, r3, r3, asr #31
   12294:	b.n	11ef8 <_svfprintf_r+0x107c>
   12296:	add	r2, sp, #140	; 0x8c
   12298:	ldr	r1, [sp, #36]	; 0x24
   1229a:	ldr	r0, [sp, #40]	; 0x28
   1229c:	bl	13fd8 <__ssprint_r>
   122a0:	cmp	r0, #0
   122a2:	bne.w	1106e <_svfprintf_r+0x1f2>
   122a6:	ldr	r3, [sp, #116]	; 0x74
   122a8:	ldr	r4, [sp, #148]	; 0x94
   122aa:	add.w	r9, sp, #192	; 0xc0
   122ae:	b.n	11ca6 <_svfprintf_r+0xe2a>
   122b0:	mov	r4, r2
   122b2:	adds	r3, #1
   122b4:	ldr	r2, [sp, #60]	; 0x3c
   122b6:	str	r3, [sp, #144]	; 0x90
   122b8:	add	r4, r5
   122ba:	cmp	r3, #7
   122bc:	str	r4, [sp, #148]	; 0x94
   122be:	stmia.w	r9, {r2, r5}
   122c2:	bgt.w	12184 <_svfprintf_r+0x1308>
   122c6:	add.w	r9, r9, #8
   122ca:	b.n	1219c <_svfprintf_r+0x1320>
   122cc:	.word	0x00014750
   122d0:	.word	0x000148b8
   122d4:	.word	0x66666667
   122d8:	cmp	r5, #6
   122da:	mov	r3, r5
   122dc:	it	cs
   122de:	movcs	r3, #6
   122e0:	str	r3, [sp, #52]	; 0x34
   122e2:	bic.w	r3, r3, r3, asr #31
   122e6:	mov	fp, r6
   122e8:	str	r7, [sp, #56]	; 0x38
   122ea:	str	r6, [sp, #76]	; 0x4c
   122ec:	mov	r7, r6
   122ee:	str	r3, [sp, #32]
   122f0:	ldr	r6, [pc, #556]	; (12520 <_svfprintf_r+0x16a4>)
   122f2:	b.w	11208 <_svfprintf_r+0x38c>
   122f6:	add	r2, sp, #140	; 0x8c
   122f8:	ldr	r1, [sp, #36]	; 0x24
   122fa:	ldr	r0, [sp, #40]	; 0x28
   122fc:	bl	13fd8 <__ssprint_r>
   12300:	cmp	r0, #0
   12302:	bne.w	1106e <_svfprintf_r+0x1f2>
   12306:	ldr	r3, [sp, #116]	; 0x74
   12308:	ldr	r2, [sp, #72]	; 0x48
   1230a:	ldr	r4, [sp, #148]	; 0x94
   1230c:	subs	r3, r2, r3
   1230e:	add.w	r9, sp, #192	; 0xc0
   12312:	b.n	11cd6 <_svfprintf_r+0xe5a>
   12314:	mov.w	fp, #6
   12318:	b.n	11e2e <_svfprintf_r+0xfb2>
   1231a:	add	r0, sp, #132	; 0x84
   1231c:	add	r1, sp, #120	; 0x78
   1231e:	str	r0, [sp, #16]
   12320:	str	r1, [sp, #12]
   12322:	add	r0, sp, #116	; 0x74
   12324:	movs	r1, #3
   12326:	str	r0, [sp, #8]
   12328:	ldr	r2, [sp, #32]
   1232a:	str.w	fp, [sp, #4]
   1232e:	mov	r3, r7
   12330:	str	r1, [sp, #0]
   12332:	ldr	r0, [sp, #40]	; 0x28
   12334:	bl	127c8 <_dtoa_r>
   12338:	mov	r5, fp
   1233a:	mov	r6, r0
   1233c:	add.w	r4, r0, fp
   12340:	b.n	12144 <_svfprintf_r+0x12c8>
   12342:	movs	r7, #45	; 0x2d
   12344:	strb.w	r7, [sp, #111]	; 0x6f
   12348:	b.w	114a8 <_svfprintf_r+0x62c>
   1234c:	str	r3, [sp, #28]
   1234e:	b.w	115ec <_svfprintf_r+0x770>
   12352:	ldr	r2, [sp, #88]	; 0x58
   12354:	ldr	r3, [sp, #72]	; 0x48
   12356:	add	r3, r2
   12358:	ldr	r2, [sp, #76]	; 0x4c
   1235a:	str	r3, [sp, #52]	; 0x34
   1235c:	cmp	r2, #0
   1235e:	ble.n	12460 <_svfprintf_r+0x15e4>
   12360:	movs	r2, #103	; 0x67
   12362:	bic.w	r3, r3, r3, asr #31
   12366:	str	r2, [sp, #68]	; 0x44
   12368:	b.n	11ef8 <_svfprintf_r+0x107c>
   1236a:	cmp	r3, #0
   1236c:	ble.w	124a0 <_svfprintf_r+0x1624>
   12370:	cmp.w	fp, #0
   12374:	bne.n	1244e <_svfprintf_r+0x15d2>
   12376:	ldr	r2, [sp, #28]
   12378:	lsls	r4, r2, #31
   1237a:	bmi.n	1244e <_svfprintf_r+0x15d2>
   1237c:	mov	r2, r3
   1237e:	str	r2, [sp, #52]	; 0x34
   12380:	bic.w	r3, r3, r3, asr #31
   12384:	b.n	11ef8 <_svfprintf_r+0x107c>
   12386:	ldr	r3, [sp, #68]	; 0x44
   12388:	cmp	r3, #71	; 0x47
   1238a:	bne.w	11e94 <_svfprintf_r+0x1018>
   1238e:	ldr	r3, [sp, #28]
   12390:	lsls	r3, r3, #31
   12392:	bmi.w	12138 <_svfprintf_r+0x12bc>
   12396:	ldr	r3, [sp, #132]	; 0x84
   12398:	subs	r3, r3, r6
   1239a:	str	r3, [sp, #72]	; 0x48
   1239c:	ldr	r3, [sp, #52]	; 0x34
   1239e:	cmp	r3, #71	; 0x47
   123a0:	beq.w	121ca <_svfprintf_r+0x134e>
   123a4:	ldr	r3, [sp, #116]	; 0x74
   123a6:	b.n	121fa <_svfprintf_r+0x137e>
   123a8:	bic.w	r3, r5, r5, asr #31
   123ac:	str	r7, [sp, #56]	; 0x38
   123ae:	str	r3, [sp, #32]
   123b0:	str	r5, [sp, #52]	; 0x34
   123b2:	mov	fp, r0
   123b4:	str	r0, [sp, #76]	; 0x4c
   123b6:	ldrb.w	r7, [sp, #111]	; 0x6f
   123ba:	b.w	11208 <_svfprintf_r+0x38c>
   123be:	ldr	r3, [sp, #28]
   123c0:	lsls	r3, r3, #31
   123c2:	mov	r7, fp
   123c4:	bpl.n	123d2 <_svfprintf_r+0x1556>
   123c6:	add	r6, sp, #256	; 0x100
   123c8:	movs	r3, #48	; 0x30
   123ca:	strb.w	r3, [r6, #-65]!
   123ce:	b.w	111f4 <_svfprintf_r+0x378>
   123d2:	str.w	fp, [sp, #52]	; 0x34
   123d6:	add	r6, sp, #192	; 0xc0
   123d8:	b.w	111fa <_svfprintf_r+0x37e>
   123dc:	add	r2, sp, #140	; 0x8c
   123de:	ldr	r1, [sp, #36]	; 0x24
   123e0:	ldr	r0, [sp, #40]	; 0x28
   123e2:	bl	13fd8 <__ssprint_r>
   123e6:	cmp	r0, #0
   123e8:	bne.w	1106e <_svfprintf_r+0x1f2>
   123ec:	ldr	r5, [sp, #116]	; 0x74
   123ee:	ldr	r4, [sp, #148]	; 0x94
   123f0:	ldr	r3, [sp, #144]	; 0x90
   123f2:	add.w	r9, sp, #192	; 0xc0
   123f6:	b.n	1204e <_svfprintf_r+0x11d2>
   123f8:	mov	r8, r4
   123fa:	movs	r5, #0
   123fc:	b.w	10f32 <_svfprintf_r+0xb6>
   12400:	ldr	r2, [sp, #88]	; 0x58
   12402:	ldr	r3, [sp, #76]	; 0x4c
   12404:	add	r3, r2
   12406:	movs	r2, #103	; 0x67
   12408:	str	r3, [sp, #52]	; 0x34
   1240a:	str	r2, [sp, #68]	; 0x44
   1240c:	bic.w	r3, r3, r3, asr #31
   12410:	b.n	11ef8 <_svfprintf_r+0x107c>
   12412:	ldr	r3, [sp, #132]	; 0x84
   12414:	b.n	11ebc <_svfprintf_r+0x1040>
   12416:	adds	r3, #48	; 0x30
   12418:	movs	r2, #48	; 0x30
   1241a:	strb.w	r3, [sp, #127]	; 0x7f
   1241e:	strb.w	r2, [sp, #126]	; 0x7e
   12422:	add	r3, sp, #128	; 0x80
   12424:	b.n	12272 <_svfprintf_r+0x13f6>
   12426:	ldr	r0, [sp, #32]
   12428:	mov	r1, r7
   1242a:	movs	r2, #0
   1242c:	movs	r3, #0
   1242e:	bl	f364 <__aeabi_dcmpeq>
   12432:	cmp	r0, #0
   12434:	bne.w	1214c <_svfprintf_r+0x12d0>
   12438:	rsb	r5, r5, #1
   1243c:	str	r5, [sp, #116]	; 0x74
   1243e:	add	r4, r5
   12440:	b.n	11e96 <_svfprintf_r+0x101a>
   12442:	ldr	r6, [pc, #224]	; (12524 <_svfprintf_r+0x16a8>)
   12444:	ldr	r3, [pc, #224]	; (12528 <_svfprintf_r+0x16ac>)
   12446:	ldrb.w	r7, [sp, #111]	; 0x6f
   1244a:	b.w	114ac <_svfprintf_r+0x630>
   1244e:	ldr	r3, [sp, #76]	; 0x4c
   12450:	ldr	r2, [sp, #88]	; 0x58
   12452:	adds	r5, r3, r2
   12454:	add.w	r3, r5, fp
   12458:	str	r3, [sp, #52]	; 0x34
   1245a:	bic.w	r3, r3, r3, asr #31
   1245e:	b.n	11ef8 <_svfprintf_r+0x107c>
   12460:	ldr	r3, [sp, #76]	; 0x4c
   12462:	ldr	r2, [sp, #52]	; 0x34
   12464:	rsb	r3, r3, #1
   12468:	add	r2, r3
   1246a:	mov	r3, r2
   1246c:	str	r2, [sp, #52]	; 0x34
   1246e:	b.n	12360 <_svfprintf_r+0x14e4>
   12470:	ldr	r3, [sp, #28]
   12472:	ands.w	r3, r3, #1
   12476:	bne.w	12284 <_svfprintf_r+0x1408>
   1247a:	str	r3, [sp, #76]	; 0x4c
   1247c:	ldr	r3, [sp, #52]	; 0x34
   1247e:	bic.w	r3, r3, r3, asr #31
   12482:	b.n	11ef8 <_svfprintf_r+0x107c>
   12484:	ldr	r0, [sp, #56]	; 0x38
   12486:	ldrb.w	r3, [r8, #1]
   1248a:	ldr	r5, [r0, #0]
   1248c:	adds	r0, #4
   1248e:	cmp	r5, #0
   12490:	str	r0, [sp, #56]	; 0x38
   12492:	mov	r8, r4
   12494:	bge.w	10f2e <_svfprintf_r+0xb2>
   12498:	mov.w	r5, #4294967295
   1249c:	b.w	10f2e <_svfprintf_r+0xb2>
   124a0:	cmp.w	fp, #0
   124a4:	bne.n	124ac <_svfprintf_r+0x1630>
   124a6:	ldr	r3, [sp, #28]
   124a8:	lsls	r0, r3, #31
   124aa:	bpl.n	124bc <_svfprintf_r+0x1640>
   124ac:	ldr	r3, [sp, #88]	; 0x58
   124ae:	adds	r5, r3, #1
   124b0:	add.w	r3, r5, fp
   124b4:	str	r3, [sp, #52]	; 0x34
   124b6:	bic.w	r3, r3, r3, asr #31
   124ba:	b.n	11ef8 <_svfprintf_r+0x107c>
   124bc:	movs	r3, #1
   124be:	str	r3, [sp, #52]	; 0x34
   124c0:	b.n	11ef8 <_svfprintf_r+0x107c>
   124c2:	strb.w	r1, [sp, #111]	; 0x6f
   124c6:	b.w	11594 <_svfprintf_r+0x718>
   124ca:	strb.w	r1, [sp, #111]	; 0x6f
   124ce:	b.w	11174 <_svfprintf_r+0x2f8>
   124d2:	add.w	r3, sp, #126	; 0x7e
   124d6:	b.n	12272 <_svfprintf_r+0x13f6>
   124d8:	ldr	r2, [sp, #40]	; 0x28
   124da:	movs	r3, #12
   124dc:	str	r3, [r2, #0]
   124de:	mov.w	r0, #4294967295
   124e2:	b.w	11080 <_svfprintf_r+0x204>
   124e6:	strb.w	r1, [sp, #111]	; 0x6f
   124ea:	b.w	1178e <_svfprintf_r+0x912>
   124ee:	strb.w	r1, [sp, #111]	; 0x6f
   124f2:	b.w	1144c <_svfprintf_r+0x5d0>
   124f6:	strb.w	r1, [sp, #111]	; 0x6f
   124fa:	b.w	11090 <_svfprintf_r+0x214>
   124fe:	strb.w	r1, [sp, #111]	; 0x6f
   12502:	b.w	11538 <_svfprintf_r+0x6bc>
   12506:	strb.w	r1, [sp, #111]	; 0x6f
   1250a:	b.w	114e4 <_svfprintf_r+0x668>
   1250e:	strb.w	r1, [sp, #111]	; 0x6f
   12512:	b.w	116fc <_svfprintf_r+0x880>
   12516:	strb.w	r1, [sp, #111]	; 0x6f
   1251a:	b.w	116c2 <_svfprintf_r+0x846>
   1251e:	nop
   12520:	.word	0x00014900
   12524:	.word	0x000148d4
   12528:	.word	0x000148d0

0001252c <_vdprintf_r>:
   1252c:	push	{r4, r5, r6, r7, lr}
   1252e:	sub.w	sp, sp, #532	; 0x214
   12532:	add	r5, sp, #16
   12534:	str	r3, [sp, #0]
   12536:	mov	r7, r1
   12538:	mov	r3, r2
   1253a:	mov.w	r4, #512	; 0x200
   1253e:	add	r2, sp, #12
   12540:	mov	r1, r5
   12542:	str	r4, [sp, #12]
   12544:	mov	r6, r0
   12546:	bl	140d8 <_vasnprintf_r>
   1254a:	cbz	r0, 12570 <_vdprintf_r+0x44>
   1254c:	mov	r4, r0
   1254e:	mov	r2, r0
   12550:	mov	r1, r7
   12552:	ldr	r3, [sp, #12]
   12554:	mov	r0, r6
   12556:	bl	125ac <_write_r>
   1255a:	cmp	r4, r5
   1255c:	str	r0, [sp, #12]
   1255e:	beq.n	1256a <_vdprintf_r+0x3e>
   12560:	mov	r0, r6
   12562:	mov	r1, r4
   12564:	bl	137d0 <_free_r>
   12568:	ldr	r0, [sp, #12]
   1256a:	add.w	sp, sp, #532	; 0x214
   1256e:	pop	{r4, r5, r6, r7, pc}
   12570:	mov.w	r0, #4294967295
   12574:	b.n	1256a <_vdprintf_r+0x3e>
   12576:	nop

00012578 <vdprintf>:
   12578:	push	{r4}
   1257a:	ldr	r4, [pc, #16]	; (1258c <vdprintf+0x14>)
   1257c:	mov	r3, r2
   1257e:	mov	r2, r1
   12580:	mov	r1, r0
   12582:	ldr	r0, [r4, #0]
   12584:	pop	{r4}
   12586:	b.w	1252c <_vdprintf_r>
   1258a:	nop
   1258c:	.word	0x1fff9190

00012590 <__ascii_wctomb>:
   12590:	cbz	r1, 1259c <__ascii_wctomb+0xc>
   12592:	cmp	r2, #255	; 0xff
   12594:	bhi.n	125a0 <__ascii_wctomb+0x10>
   12596:	strb	r2, [r1, #0]
   12598:	movs	r0, #1
   1259a:	bx	lr
   1259c:	mov	r0, r1
   1259e:	bx	lr
   125a0:	movs	r3, #138	; 0x8a
   125a2:	str	r3, [r0, #0]
   125a4:	mov.w	r0, #4294967295
   125a8:	bx	lr
   125aa:	nop

000125ac <_write_r>:
   125ac:	push	{r4, r5, r6, lr}
   125ae:	mov	r5, r1
   125b0:	ldr	r4, [pc, #32]	; (125d4 <_write_r+0x28>)
   125b2:	mov	r1, r2
   125b4:	mov	r6, r0
   125b6:	mov	r2, r3
   125b8:	mov	r0, r5
   125ba:	movs	r3, #0
   125bc:	str	r3, [r4, #0]
   125be:	bl	e7cc <_write>
   125c2:	adds	r3, r0, #1
   125c4:	beq.n	125c8 <_write_r+0x1c>
   125c6:	pop	{r4, r5, r6, pc}
   125c8:	ldr	r3, [r4, #0]
   125ca:	cmp	r3, #0
   125cc:	beq.n	125c6 <_write_r+0x1a>
   125ce:	str	r3, [r6, #0]
   125d0:	pop	{r4, r5, r6, pc}
   125d2:	nop
   125d4:	.word	0x20003230

000125d8 <__register_exitproc>:
   125d8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   125dc:	ldr	r4, [pc, #148]	; (12674 <__register_exitproc+0x9c>)
   125de:	ldr	r5, [r4, #0]
   125e0:	ldr.w	r4, [r5, #328]	; 0x148
   125e4:	mov	r6, r0
   125e6:	mov	r8, r1
   125e8:	mov	sl, r2
   125ea:	mov	r9, r3
   125ec:	cbz	r4, 12660 <__register_exitproc+0x88>
   125ee:	ldr	r0, [r4, #4]
   125f0:	cmp	r0, #31
   125f2:	bgt.n	12624 <__register_exitproc+0x4c>
   125f4:	adds	r3, r0, #1
   125f6:	cbz	r6, 12616 <__register_exitproc+0x3e>
   125f8:	add.w	r5, r4, r0, lsl #2
   125fc:	movs	r2, #1
   125fe:	str.w	sl, [r5, #136]	; 0x88
   12602:	ldr.w	r1, [r4, #392]	; 0x188
   12606:	lsls	r2, r0
   12608:	orrs	r1, r2
   1260a:	cmp	r6, #2
   1260c:	str.w	r1, [r4, #392]	; 0x188
   12610:	str.w	r9, [r5, #264]	; 0x108
   12614:	beq.n	12654 <__register_exitproc+0x7c>
   12616:	adds	r0, #2
   12618:	str	r3, [r4, #4]
   1261a:	str.w	r8, [r4, r0, lsl #2]
   1261e:	movs	r0, #0
   12620:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   12624:	ldr	r3, [pc, #80]	; (12678 <__register_exitproc+0xa0>)
   12626:	cbz	r3, 1266a <__register_exitproc+0x92>
   12628:	mov.w	r0, #400	; 0x190
   1262c:	bl	ff44 <malloc>
   12630:	mov	r4, r0
   12632:	cbz	r0, 1266a <__register_exitproc+0x92>
   12634:	ldr.w	r3, [r5, #328]	; 0x148
   12638:	movs	r7, #0
   1263a:	stmia.w	r0, {r3, r7}
   1263e:	str.w	r4, [r5, #328]	; 0x148
   12642:	mov	r0, r7
   12644:	movs	r3, #1
   12646:	str.w	r7, [r4, #392]	; 0x188
   1264a:	str.w	r7, [r4, #396]	; 0x18c
   1264e:	cmp	r6, #0
   12650:	beq.n	12616 <__register_exitproc+0x3e>
   12652:	b.n	125f8 <__register_exitproc+0x20>
   12654:	ldr.w	r1, [r4, #396]	; 0x18c
   12658:	orrs	r2, r1
   1265a:	str.w	r2, [r4, #396]	; 0x18c
   1265e:	b.n	12616 <__register_exitproc+0x3e>
   12660:	add.w	r4, r5, #332	; 0x14c
   12664:	str.w	r4, [r5, #328]	; 0x148
   12668:	b.n	125ee <__register_exitproc+0x16>
   1266a:	mov.w	r0, #4294967295
   1266e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   12672:	nop
   12674:	.word	0x000148a4
   12678:	.word	0x0000ff45

0001267c <register_fini>:
   1267c:	ldr	r3, [pc, #8]	; (12688 <register_fini+0xc>)
   1267e:	cbz	r3, 12686 <register_fini+0xa>
   12680:	ldr	r0, [pc, #8]	; (1268c <register_fini+0x10>)
   12682:	b.w	12690 <atexit>
   12686:	bx	lr
   12688:	.word	0x00000000
   1268c:	.word	0x0001370d

00012690 <atexit>:
   12690:	movs	r3, #0
   12692:	mov	r1, r0
   12694:	mov	r2, r3
   12696:	mov	r0, r3
   12698:	b.w	125d8 <__register_exitproc>

0001269c <quorem>:
   1269c:	ldr	r2, [r0, #16]
   1269e:	ldr	r3, [r1, #16]
   126a0:	cmp	r3, r2
   126a2:	bgt.w	127c0 <quorem+0x124>
   126a6:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   126aa:	add.w	r8, r3, #4294967295
   126ae:	add.w	r7, r1, #20
   126b2:	add.w	fp, r0, #20
   126b6:	ldr.w	r2, [r7, r8, lsl #2]
   126ba:	ldr.w	r3, [fp, r8, lsl #2]
   126be:	mov.w	r4, r8, lsl #2
   126c2:	sub	sp, #12
   126c4:	adds	r2, #1
   126c6:	udiv	r9, r3, r2
   126ca:	add.w	r3, fp, r4
   126ce:	str	r4, [sp, #0]
   126d0:	add.w	sl, r7, r4
   126d4:	str	r3, [sp, #4]
   126d6:	cmp.w	r9, #0
   126da:	beq.n	12750 <quorem+0xb4>
   126dc:	movs	r5, #0
   126de:	mov	ip, r7
   126e0:	mov	lr, fp
   126e2:	mov	r3, r5
   126e4:	ldr.w	r6, [ip], #4
   126e8:	ldr.w	r2, [lr]
   126ec:	uxth	r4, r6
   126ee:	mla	r5, r9, r4, r5
   126f2:	lsrs	r6, r6, #16
   126f4:	lsrs	r4, r5, #16
   126f6:	mla	r4, r9, r6, r4
   126fa:	uxth	r5, r5
   126fc:	subs	r3, r3, r5
   126fe:	uxth	r6, r4
   12700:	uxtah	r3, r3, r2
   12704:	rsb	r6, r6, r2, lsr #16
   12708:	add.w	r6, r6, r3, asr #16
   1270c:	uxth	r3, r3
   1270e:	orr.w	r3, r3, r6, lsl #16
   12712:	cmp	sl, ip
   12714:	str.w	r3, [lr], #4
   12718:	mov.w	r5, r4, lsr #16
   1271c:	mov.w	r3, r6, asr #16
   12720:	bcs.n	126e4 <quorem+0x48>
   12722:	ldr	r3, [sp, #0]
   12724:	ldr.w	r3, [fp, r3]
   12728:	cbnz	r3, 12750 <quorem+0xb4>
   1272a:	ldr	r4, [sp, #4]
   1272c:	subs	r3, r4, #4
   1272e:	cmp	fp, r3
   12730:	bcs.n	1274c <quorem+0xb0>
   12732:	ldr.w	r3, [r4, #-4]
   12736:	cbnz	r3, 1274c <quorem+0xb0>
   12738:	sub.w	r3, r4, #8
   1273c:	b.n	12744 <quorem+0xa8>
   1273e:	ldr	r2, [r3, #0]
   12740:	subs	r3, #4
   12742:	cbnz	r2, 1274c <quorem+0xb0>
   12744:	cmp	fp, r3
   12746:	add.w	r8, r8, #4294967295
   1274a:	bcc.n	1273e <quorem+0xa2>
   1274c:	str.w	r8, [r0, #16]
   12750:	mov	r4, r0
   12752:	bl	13dcc <__mcmp>
   12756:	cmp	r0, #0
   12758:	blt.n	127b8 <quorem+0x11c>
   1275a:	add.w	r9, r9, #1
   1275e:	mov	r5, fp
   12760:	movs	r3, #0
   12762:	ldr.w	r1, [r7], #4
   12766:	ldr	r0, [r5, #0]
   12768:	uxth	r2, r1
   1276a:	subs	r2, r3, r2
   1276c:	lsrs	r1, r1, #16
   1276e:	uxtah	r2, r2, r0
   12772:	rsb	r3, r1, r0, lsr #16
   12776:	add.w	r3, r3, r2, asr #16
   1277a:	uxth	r1, r2
   1277c:	orr.w	r1, r1, r3, lsl #16
   12780:	cmp	sl, r7
   12782:	str.w	r1, [r5], #4
   12786:	mov.w	r3, r3, asr #16
   1278a:	bcs.n	12762 <quorem+0xc6>
   1278c:	ldr.w	r2, [fp, r8, lsl #2]
   12790:	add.w	r3, fp, r8, lsl #2
   12794:	cbnz	r2, 127b8 <quorem+0x11c>
   12796:	subs	r2, r3, #4
   12798:	cmp	fp, r2
   1279a:	bcs.n	127b4 <quorem+0x118>
   1279c:	ldr.w	r2, [r3, #-4]
   127a0:	cbnz	r2, 127b4 <quorem+0x118>
   127a2:	subs	r3, #8
   127a4:	b.n	127ac <quorem+0x110>
   127a6:	ldr	r2, [r3, #0]
   127a8:	subs	r3, #4
   127aa:	cbnz	r2, 127b4 <quorem+0x118>
   127ac:	cmp	fp, r3
   127ae:	add.w	r8, r8, #4294967295
   127b2:	bcc.n	127a6 <quorem+0x10a>
   127b4:	str.w	r8, [r4, #16]
   127b8:	mov	r0, r9
   127ba:	add	sp, #12
   127bc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   127c0:	movs	r0, #0
   127c2:	bx	lr
   127c4:			; <UNDEFINED> instruction: 0xffffffff

000127c8 <_dtoa_r>:
   127c8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   127cc:	ldr	r1, [r0, #64]	; 0x40
   127ce:	sub	sp, #92	; 0x5c
   127d0:	mov	r9, r0
   127d2:	ldr	r4, [sp, #140]	; 0x8c
   127d4:	mov	sl, r2
   127d6:	mov	fp, r3
   127d8:	cbz	r1, 127ee <_dtoa_r+0x26>
   127da:	ldr	r2, [r0, #68]	; 0x44
   127dc:	str	r2, [r1, #4]
   127de:	movs	r3, #1
   127e0:	lsls	r3, r2
   127e2:	str	r3, [r1, #8]
   127e4:	bl	13a08 <_Bfree>
   127e8:	movs	r3, #0
   127ea:	str.w	r3, [r9, #64]	; 0x40
   127ee:	cmp.w	fp, #0
   127f2:	mov	r8, fp
   127f4:	blt.n	1285e <_dtoa_r+0x96>
   127f6:	movs	r3, #0
   127f8:	str	r3, [r4, #0]
   127fa:	ldr	r3, [pc, #660]	; (12a90 <_dtoa_r+0x2c8>)
   127fc:	mov	r2, r3
   127fe:	and.w	r3, r8, r3
   12802:	cmp	r3, r2
   12804:	beq.n	12830 <_dtoa_r+0x68>
   12806:	mov	r0, sl
   12808:	mov	r1, fp
   1280a:	movs	r2, #0
   1280c:	movs	r3, #0
   1280e:	bl	f364 <__aeabi_dcmpeq>
   12812:	mov	r5, r0
   12814:	cbz	r0, 1286a <_dtoa_r+0xa2>
   12816:	ldr	r2, [sp, #136]	; 0x88
   12818:	movs	r3, #1
   1281a:	str	r3, [r2, #0]
   1281c:	ldr	r3, [sp, #144]	; 0x90
   1281e:	cmp	r3, #0
   12820:	beq.w	129ae <_dtoa_r+0x1e6>
   12824:	ldr	r0, [pc, #620]	; (12a94 <_dtoa_r+0x2cc>)
   12826:	str	r0, [r3, #0]
   12828:	subs	r0, #1
   1282a:	add	sp, #92	; 0x5c
   1282c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12830:	ldr	r2, [sp, #136]	; 0x88
   12832:	movw	r3, #9999	; 0x270f
   12836:	str	r3, [r2, #0]
   12838:	cmp.w	sl, #0
   1283c:	beq.w	12984 <_dtoa_r+0x1bc>
   12840:	ldr	r0, [pc, #596]	; (12a98 <_dtoa_r+0x2d0>)
   12842:	ldr	r3, [sp, #144]	; 0x90
   12844:	cmp	r3, #0
   12846:	beq.n	1282a <_dtoa_r+0x62>
   12848:	ldrb	r3, [r0, #3]
   1284a:	cmp	r3, #0
   1284c:	beq.w	129b2 <_dtoa_r+0x1ea>
   12850:	add.w	r3, r0, #8
   12854:	ldr	r2, [sp, #144]	; 0x90
   12856:	str	r3, [r2, #0]
   12858:	add	sp, #92	; 0x5c
   1285a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1285e:	movs	r3, #1
   12860:	bic.w	r8, fp, #2147483648	; 0x80000000
   12864:	str	r3, [r4, #0]
   12866:	mov	fp, r8
   12868:	b.n	127fa <_dtoa_r+0x32>
   1286a:	add	r2, sp, #80	; 0x50
   1286c:	add	r3, sp, #84	; 0x54
   1286e:	str	r2, [sp, #4]
   12870:	str	r3, [sp, #0]
   12872:	mov	r2, sl
   12874:	mov	r3, fp
   12876:	mov	r0, r9
   12878:	bl	13f20 <__d2b>
   1287c:	movs.w	r4, r8, lsr #20
   12880:	str	r0, [sp, #32]
   12882:	bne.w	12996 <_dtoa_r+0x1ce>
   12886:	ldr	r5, [sp, #80]	; 0x50
   12888:	ldr	r4, [sp, #84]	; 0x54
   1288a:	add	r4, r5
   1288c:	addw	r3, r4, #1074	; 0x432
   12890:	cmp	r3, #32
   12892:	ble.w	12db8 <_dtoa_r+0x5f0>
   12896:	rsb	r3, r3, #64	; 0x40
   1289a:	addw	r0, r4, #1042	; 0x412
   1289e:	lsl.w	r8, r8, r3
   128a2:	lsr.w	r0, sl, r0
   128a6:	orr.w	r0, r0, r8
   128aa:	bl	eda8 <__aeabi_ui2d>
   128ae:	movs	r3, #1
   128b0:	subs	r4, #1
   128b2:	sub.w	r1, r1, #32505856	; 0x1f00000
   128b6:	str	r3, [sp, #64]	; 0x40
   128b8:	movs	r2, #0
   128ba:	ldr	r3, [pc, #480]	; (12a9c <_dtoa_r+0x2d4>)
   128bc:	bl	eb2c <__aeabi_dsub>
   128c0:	add	r3, pc, #436	; (adr r3, 12a78 <_dtoa_r+0x2b0>)
   128c2:	ldrd	r2, r3, [r3]
   128c6:	bl	ee94 <__aeabi_dmul>
   128ca:	add	r3, pc, #436	; (adr r3, 12a80 <_dtoa_r+0x2b8>)
   128cc:	ldrd	r2, r3, [r3]
   128d0:	bl	eb30 <__adddf3>
   128d4:	mov	r6, r0
   128d6:	mov	r0, r4
   128d8:	mov	r7, r1
   128da:	bl	edc8 <__aeabi_i2d>
   128de:	add	r3, pc, #424	; (adr r3, 12a88 <_dtoa_r+0x2c0>)
   128e0:	ldrd	r2, r3, [r3]
   128e4:	bl	ee94 <__aeabi_dmul>
   128e8:	mov	r2, r0
   128ea:	mov	r3, r1
   128ec:	mov	r0, r6
   128ee:	mov	r1, r7
   128f0:	bl	eb30 <__adddf3>
   128f4:	mov	r6, r0
   128f6:	mov	r7, r1
   128f8:	bl	f3f4 <__aeabi_d2iz>
   128fc:	movs	r2, #0
   128fe:	str	r0, [sp, #16]
   12900:	movs	r3, #0
   12902:	mov	r0, r6
   12904:	mov	r1, r7
   12906:	bl	f378 <__aeabi_dcmplt>
   1290a:	cmp	r0, #0
   1290c:	bne.w	12d70 <_dtoa_r+0x5a8>
   12910:	ldr	r6, [sp, #16]
   12912:	cmp	r6, #22
   12914:	bhi.w	12d6a <_dtoa_r+0x5a2>
   12918:	ldr	r3, [pc, #388]	; (12aa0 <_dtoa_r+0x2d8>)
   1291a:	add.w	r3, r3, r6, lsl #3
   1291e:	ldrd	r0, r1, [r3]
   12922:	mov	r2, sl
   12924:	mov	r3, fp
   12926:	bl	f3b4 <__aeabi_dcmpgt>
   1292a:	cmp	r0, #0
   1292c:	beq.w	12dc2 <_dtoa_r+0x5fa>
   12930:	subs	r3, r6, #1
   12932:	str	r3, [sp, #16]
   12934:	movs	r3, #0
   12936:	str	r3, [sp, #48]	; 0x30
   12938:	subs	r4, r5, r4
   1293a:	subs	r3, r4, #1
   1293c:	str	r3, [sp, #8]
   1293e:	bmi.w	12da6 <_dtoa_r+0x5de>
   12942:	movs	r3, #0
   12944:	str	r3, [sp, #20]
   12946:	ldr	r3, [sp, #16]
   12948:	cmp	r3, #0
   1294a:	blt.w	12d94 <_dtoa_r+0x5cc>
   1294e:	ldr	r2, [sp, #8]
   12950:	str	r3, [sp, #44]	; 0x2c
   12952:	mov	r1, r2
   12954:	add	r1, r3
   12956:	movs	r3, #0
   12958:	str	r1, [sp, #8]
   1295a:	str	r3, [sp, #40]	; 0x28
   1295c:	ldr	r3, [sp, #128]	; 0x80
   1295e:	cmp	r3, #9
   12960:	bhi.n	129b6 <_dtoa_r+0x1ee>
   12962:	cmp	r3, #5
   12964:	ble.w	13618 <_dtoa_r+0xe50>
   12968:	subs	r3, #4
   1296a:	str	r3, [sp, #128]	; 0x80
   1296c:	movs	r5, #0
   1296e:	ldr	r3, [sp, #128]	; 0x80
   12970:	subs	r3, #2
   12972:	cmp	r3, #3
   12974:	bhi.w	135e2 <_dtoa_r+0xe1a>
   12978:	tbh	[pc, r3, lsl #1]
   1297c:	.word	0x0228032c
   12980:	.word	0x04590337
   12984:	ldr	r3, [pc, #272]	; (12a98 <_dtoa_r+0x2d0>)
   12986:	ldr	r2, [pc, #284]	; (12aa4 <_dtoa_r+0x2dc>)
   12988:	ubfx	r0, r8, #0, #20
   1298c:	cmp	r0, #0
   1298e:	ite	ne
   12990:	movne	r0, r3
   12992:	moveq	r0, r2
   12994:	b.n	12842 <_dtoa_r+0x7a>
   12996:	ubfx	r3, fp, #0, #20
   1299a:	orr.w	r1, r3, #1069547520	; 0x3fc00000
   1299e:	str	r5, [sp, #64]	; 0x40
   129a0:	mov	r0, sl
   129a2:	subw	r4, r4, #1023	; 0x3ff
   129a6:	orr.w	r1, r1, #3145728	; 0x300000
   129aa:	ldr	r5, [sp, #80]	; 0x50
   129ac:	b.n	128b8 <_dtoa_r+0xf0>
   129ae:	ldr	r0, [pc, #248]	; (12aa8 <_dtoa_r+0x2e0>)
   129b0:	b.n	1282a <_dtoa_r+0x62>
   129b2:	adds	r3, r0, #3
   129b4:	b.n	12854 <_dtoa_r+0x8c>
   129b6:	movs	r1, #0
   129b8:	str.w	r1, [r9, #68]	; 0x44
   129bc:	mov	r0, r9
   129be:	str	r1, [sp, #128]	; 0x80
   129c0:	bl	139bc <_Balloc>
   129c4:	mov.w	r3, #4294967295
   129c8:	str	r3, [sp, #24]
   129ca:	ldr	r2, [sp, #128]	; 0x80
   129cc:	str	r3, [sp, #52]	; 0x34
   129ce:	movs	r3, #1
   129d0:	str	r0, [sp, #28]
   129d2:	str	r2, [sp, #132]	; 0x84
   129d4:	str.w	r0, [r9, #64]	; 0x40
   129d8:	str	r3, [sp, #36]	; 0x24
   129da:	ldr	r3, [sp, #84]	; 0x54
   129dc:	cmp	r3, #0
   129de:	blt.w	12b84 <_dtoa_r+0x3bc>
   129e2:	ldr	r2, [sp, #16]
   129e4:	cmp	r2, #14
   129e6:	bgt.w	12b84 <_dtoa_r+0x3bc>
   129ea:	ldr	r3, [pc, #180]	; (12aa0 <_dtoa_r+0x2d8>)
   129ec:	add.w	r3, r3, r2, lsl #3
   129f0:	ldrd	r3, r4, [r3]
   129f4:	strd	r3, r4, [sp, #8]
   129f8:	ldr	r3, [sp, #132]	; 0x84
   129fa:	cmp	r3, #0
   129fc:	blt.w	13000 <_dtoa_r+0x838>
   12a00:	mov	r6, sl
   12a02:	mov	r7, fp
   12a04:	mov	r0, sl
   12a06:	mov	r1, fp
   12a08:	ldrd	sl, fp, [sp, #8]
   12a0c:	mov	r2, sl
   12a0e:	mov	r3, fp
   12a10:	bl	f0e8 <__aeabi_ddiv>
   12a14:	bl	f3f4 <__aeabi_d2iz>
   12a18:	mov	r4, r0
   12a1a:	bl	edc8 <__aeabi_i2d>
   12a1e:	mov	r2, sl
   12a20:	mov	r3, fp
   12a22:	bl	ee94 <__aeabi_dmul>
   12a26:	mov	r3, r1
   12a28:	mov	r2, r0
   12a2a:	mov	r1, r7
   12a2c:	mov	r0, r6
   12a2e:	bl	eb2c <__aeabi_dsub>
   12a32:	ldr	r5, [sp, #28]
   12a34:	add.w	r3, r4, #48	; 0x30
   12a38:	strb	r3, [r5, #0]
   12a3a:	ldr	r3, [sp, #24]
   12a3c:	cmp	r3, #1
   12a3e:	mov	r6, r0
   12a40:	mov	r7, r1
   12a42:	add.w	r5, r5, #1
   12a46:	beq.n	12b0e <_dtoa_r+0x346>
   12a48:	movs	r2, #0
   12a4a:	ldr	r3, [pc, #96]	; (12aac <_dtoa_r+0x2e4>)
   12a4c:	bl	ee94 <__aeabi_dmul>
   12a50:	movs	r2, #0
   12a52:	movs	r3, #0
   12a54:	mov	r6, r0
   12a56:	mov	r7, r1
   12a58:	bl	f364 <__aeabi_dcmpeq>
   12a5c:	cmp	r0, #0
   12a5e:	bne.n	12b5e <_dtoa_r+0x396>
   12a60:	str.w	r9, [sp, #20]
   12a64:	ldr.w	sl, [sp, #24]
   12a68:	ldr.w	fp, [sp, #28]
   12a6c:	ldrd	r8, r9, [sp, #8]
   12a70:	b.n	12ac6 <_dtoa_r+0x2fe>
   12a72:	nop
   12a74:	nop.w
   12a78:	.word	0x636f4361
   12a7c:	.word	0x3fd287a7
   12a80:	.word	0x8b60c8b3
   12a84:	.word	0x3fc68a28
   12a88:	.word	0x509f79fb
   12a8c:	.word	0x3fd34413
   12a90:	.word	0x7ff00000
   12a94:	.word	0x00014751
   12a98:	.word	0x00014a28
   12a9c:	.word	0x3ff80000
   12aa0:	.word	0x00014a30
   12aa4:	.word	0x00014a1c
   12aa8:	.word	0x00014750
   12aac:	.word	0x40240000
   12ab0:	bl	ee94 <__aeabi_dmul>
   12ab4:	movs	r2, #0
   12ab6:	movs	r3, #0
   12ab8:	mov	r6, r0
   12aba:	mov	r7, r1
   12abc:	bl	f364 <__aeabi_dcmpeq>
   12ac0:	cmp	r0, #0
   12ac2:	bne.w	13234 <_dtoa_r+0xa6c>
   12ac6:	mov	r2, r8
   12ac8:	mov	r3, r9
   12aca:	mov	r0, r6
   12acc:	mov	r1, r7
   12ace:	bl	f0e8 <__aeabi_ddiv>
   12ad2:	bl	f3f4 <__aeabi_d2iz>
   12ad6:	mov	r4, r0
   12ad8:	bl	edc8 <__aeabi_i2d>
   12adc:	mov	r2, r8
   12ade:	mov	r3, r9
   12ae0:	bl	ee94 <__aeabi_dmul>
   12ae4:	mov	r2, r0
   12ae6:	mov	r3, r1
   12ae8:	mov	r0, r6
   12aea:	mov	r1, r7
   12aec:	bl	eb2c <__aeabi_dsub>
   12af0:	add.w	lr, r4, #48	; 0x30
   12af4:	strb.w	lr, [r5], #1
   12af8:	rsb	lr, fp, r5
   12afc:	cmp	lr, sl
   12afe:	mov	r6, r0
   12b00:	mov	r7, r1
   12b02:	mov.w	r2, #0
   12b06:	ldr	r3, [pc, #704]	; (12dc8 <_dtoa_r+0x600>)
   12b08:	bne.n	12ab0 <_dtoa_r+0x2e8>
   12b0a:	ldr.w	r9, [sp, #20]
   12b0e:	mov	r2, r6
   12b10:	mov	r3, r7
   12b12:	mov	r0, r6
   12b14:	mov	r1, r7
   12b16:	bl	eb30 <__adddf3>
   12b1a:	mov	r6, r0
   12b1c:	mov	r7, r1
   12b1e:	mov	r2, r0
   12b20:	mov	r3, r1
   12b22:	ldrd	r0, r1, [sp, #8]
   12b26:	bl	f378 <__aeabi_dcmplt>
   12b2a:	cbnz	r0, 12b3e <_dtoa_r+0x376>
   12b2c:	mov	r2, r6
   12b2e:	mov	r3, r7
   12b30:	ldrd	r0, r1, [sp, #8]
   12b34:	bl	f364 <__aeabi_dcmpeq>
   12b38:	cbz	r0, 12b5e <_dtoa_r+0x396>
   12b3a:	lsls	r3, r4, #31
   12b3c:	bpl.n	12b5e <_dtoa_r+0x396>
   12b3e:	ldrb.w	r4, [r5, #-1]
   12b42:	ldr	r2, [sp, #28]
   12b44:	subs	r3, r5, #1
   12b46:	b.n	12b52 <_dtoa_r+0x38a>
   12b48:	cmp	r2, r3
   12b4a:	beq.w	133a6 <_dtoa_r+0xbde>
   12b4e:	ldrb.w	r4, [r3, #-1]!
   12b52:	cmp	r4, #57	; 0x39
   12b54:	add.w	r5, r3, #1
   12b58:	beq.n	12b48 <_dtoa_r+0x380>
   12b5a:	adds	r4, #1
   12b5c:	strb	r4, [r3, #0]
   12b5e:	ldr	r1, [sp, #32]
   12b60:	mov	r0, r9
   12b62:	bl	13a08 <_Bfree>
   12b66:	movs	r2, #0
   12b68:	ldr	r3, [sp, #16]
   12b6a:	strb	r2, [r5, #0]
   12b6c:	ldr	r2, [sp, #136]	; 0x88
   12b6e:	adds	r3, #1
   12b70:	str	r3, [r2, #0]
   12b72:	ldr	r3, [sp, #144]	; 0x90
   12b74:	cmp	r3, #0
   12b76:	beq.w	132c8 <_dtoa_r+0xb00>
   12b7a:	ldr	r0, [sp, #28]
   12b7c:	str	r5, [r3, #0]
   12b7e:	add	sp, #92	; 0x5c
   12b80:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12b84:	ldr	r2, [sp, #36]	; 0x24
   12b86:	cmp	r2, #0
   12b88:	beq.w	12db0 <_dtoa_r+0x5e8>
   12b8c:	ldr	r2, [sp, #128]	; 0x80
   12b8e:	cmp	r2, #1
   12b90:	ble.w	13044 <_dtoa_r+0x87c>
   12b94:	ldr	r3, [sp, #24]
   12b96:	ldr	r2, [sp, #40]	; 0x28
   12b98:	subs	r7, r3, #1
   12b9a:	cmp	r2, r7
   12b9c:	blt.w	132ce <_dtoa_r+0xb06>
   12ba0:	subs	r7, r2, r7
   12ba2:	ldr	r3, [sp, #24]
   12ba4:	cmp	r3, #0
   12ba6:	blt.w	134be <_dtoa_r+0xcf6>
   12baa:	ldr	r5, [sp, #20]
   12bac:	ldr	r3, [sp, #24]
   12bae:	ldr	r2, [sp, #20]
   12bb0:	add	r2, r3
   12bb2:	str	r2, [sp, #20]
   12bb4:	ldr	r2, [sp, #8]
   12bb6:	movs	r1, #1
   12bb8:	add	r2, r3
   12bba:	mov	r0, r9
   12bbc:	str	r2, [sp, #8]
   12bbe:	bl	13b38 <__i2b>
   12bc2:	mov	r6, r0
   12bc4:	cbz	r5, 12be0 <_dtoa_r+0x418>
   12bc6:	ldr	r1, [sp, #8]
   12bc8:	cmp	r1, #0
   12bca:	mov	r3, r1
   12bcc:	ble.n	12be0 <_dtoa_r+0x418>
   12bce:	cmp	r1, r5
   12bd0:	ldr	r2, [sp, #20]
   12bd2:	it	ge
   12bd4:	movge	r3, r5
   12bd6:	subs	r2, r2, r3
   12bd8:	subs	r5, r5, r3
   12bda:	subs	r3, r1, r3
   12bdc:	str	r2, [sp, #20]
   12bde:	str	r3, [sp, #8]
   12be0:	ldr	r3, [sp, #40]	; 0x28
   12be2:	cmp	r3, #0
   12be4:	ble.w	131e0 <_dtoa_r+0xa18>
   12be8:	ldr	r2, [sp, #36]	; 0x24
   12bea:	cmp	r2, #0
   12bec:	beq.w	12ff2 <_dtoa_r+0x82a>
   12bf0:	cmp	r7, #0
   12bf2:	beq.w	12ff2 <_dtoa_r+0x82a>
   12bf6:	mov	r1, r6
   12bf8:	mov	r2, r7
   12bfa:	mov	r0, r9
   12bfc:	bl	13c7c <__pow5mult>
   12c00:	ldr.w	r8, [sp, #32]
   12c04:	mov	r1, r0
   12c06:	mov	r2, r8
   12c08:	mov	r6, r0
   12c0a:	mov	r0, r9
   12c0c:	bl	13b4c <__multiply>
   12c10:	mov	r1, r8
   12c12:	mov	r4, r0
   12c14:	mov	r0, r9
   12c16:	bl	13a08 <_Bfree>
   12c1a:	ldr	r3, [sp, #40]	; 0x28
   12c1c:	subs	r3, r3, r7
   12c1e:	str	r3, [sp, #40]	; 0x28
   12c20:	bne.w	12ff0 <_dtoa_r+0x828>
   12c24:	movs	r1, #1
   12c26:	mov	r0, r9
   12c28:	bl	13b38 <__i2b>
   12c2c:	ldr	r3, [sp, #44]	; 0x2c
   12c2e:	mov	r8, r0
   12c30:	cmp	r3, #0
   12c32:	beq.w	13068 <_dtoa_r+0x8a0>
   12c36:	mov	r1, r0
   12c38:	mov	r2, r3
   12c3a:	mov	r0, r9
   12c3c:	bl	13c7c <__pow5mult>
   12c40:	ldr	r3, [sp, #128]	; 0x80
   12c42:	cmp	r3, #1
   12c44:	mov	r8, r0
   12c46:	ble.w	1323a <_dtoa_r+0xa72>
   12c4a:	movs	r7, #0
   12c4c:	ldr.w	r3, [r8, #16]
   12c50:	add.w	r3, r8, r3, lsl #2
   12c54:	ldr	r0, [r3, #16]
   12c56:	bl	13a9c <__hi0bits>
   12c5a:	rsb	r0, r0, #32
   12c5e:	ldr	r2, [sp, #8]
   12c60:	add	r0, r2
   12c62:	ands.w	r0, r0, #31
   12c66:	beq.w	13056 <_dtoa_r+0x88e>
   12c6a:	rsb	r3, r0, #32
   12c6e:	cmp	r3, #4
   12c70:	ble.w	13608 <_dtoa_r+0xe40>
   12c74:	ldr	r3, [sp, #20]
   12c76:	rsb	r0, r0, #28
   12c7a:	add	r3, r0
   12c7c:	str	r3, [sp, #20]
   12c7e:	mov	r3, r2
   12c80:	add	r3, r0
   12c82:	add	r5, r0
   12c84:	str	r3, [sp, #8]
   12c86:	ldr	r3, [sp, #20]
   12c88:	cmp	r3, #0
   12c8a:	ble.n	12c98 <_dtoa_r+0x4d0>
   12c8c:	mov	r1, r4
   12c8e:	mov	r2, r3
   12c90:	mov	r0, r9
   12c92:	bl	13d1c <__lshift>
   12c96:	mov	r4, r0
   12c98:	ldr	r3, [sp, #8]
   12c9a:	cmp	r3, #0
   12c9c:	ble.n	12caa <_dtoa_r+0x4e2>
   12c9e:	mov	r1, r8
   12ca0:	mov	r2, r3
   12ca2:	mov	r0, r9
   12ca4:	bl	13d1c <__lshift>
   12ca8:	mov	r8, r0
   12caa:	ldr	r3, [sp, #48]	; 0x30
   12cac:	cmp	r3, #0
   12cae:	bne.w	131aa <_dtoa_r+0x9e2>
   12cb2:	ldr	r3, [sp, #24]
   12cb4:	cmp	r3, #0
   12cb6:	ble.w	131e4 <_dtoa_r+0xa1c>
   12cba:	ldr	r3, [sp, #36]	; 0x24
   12cbc:	cmp	r3, #0
   12cbe:	bne.w	130ac <_dtoa_r+0x8e4>
   12cc2:	ldr.w	fp, [sp, #28]
   12cc6:	ldr	r7, [sp, #24]
   12cc8:	mov	r5, fp
   12cca:	b.n	12cd2 <_dtoa_r+0x50a>
   12ccc:	bl	13a1c <__multadd>
   12cd0:	mov	r4, r0
   12cd2:	mov	r1, r8
   12cd4:	mov	r0, r4
   12cd6:	bl	1269c <quorem>
   12cda:	add.w	sl, r0, #48	; 0x30
   12cde:	strb.w	sl, [r5], #1
   12ce2:	rsb	r3, fp, r5
   12ce6:	cmp	r3, r7
   12ce8:	mov.w	r2, #10
   12cec:	mov.w	r3, #0
   12cf0:	mov	r1, r4
   12cf2:	mov	r0, r9
   12cf4:	blt.n	12ccc <_dtoa_r+0x504>
   12cf6:	ldr	r3, [sp, #28]
   12cf8:	ldr	r2, [sp, #24]
   12cfa:	cmp	r2, #1
   12cfc:	ite	ge
   12cfe:	addge	r3, r3, r2
   12d00:	addlt	r3, #1
   12d02:	mov	r5, r3
   12d04:	mov.w	fp, #0
   12d08:	mov	r1, r4
   12d0a:	movs	r2, #1
   12d0c:	mov	r0, r9
   12d0e:	bl	13d1c <__lshift>
   12d12:	mov	r1, r8
   12d14:	str	r0, [sp, #32]
   12d16:	bl	13dcc <__mcmp>
   12d1a:	cmp	r0, #0
   12d1c:	ble.w	1333a <_dtoa_r+0xb72>
   12d20:	ldrb.w	r2, [r5, #-1]
   12d24:	ldr	r1, [sp, #28]
   12d26:	subs	r3, r5, #1
   12d28:	b.n	12d34 <_dtoa_r+0x56c>
   12d2a:	cmp	r3, r1
   12d2c:	beq.w	13220 <_dtoa_r+0xa58>
   12d30:	ldrb.w	r2, [r3, #-1]!
   12d34:	cmp	r2, #57	; 0x39
   12d36:	add.w	r5, r3, #1
   12d3a:	beq.n	12d2a <_dtoa_r+0x562>
   12d3c:	adds	r2, #1
   12d3e:	strb	r2, [r3, #0]
   12d40:	mov	r1, r8
   12d42:	mov	r0, r9
   12d44:	bl	13a08 <_Bfree>
   12d48:	cmp	r6, #0
   12d4a:	beq.w	12b5e <_dtoa_r+0x396>
   12d4e:	cmp.w	fp, #0
   12d52:	beq.n	12d60 <_dtoa_r+0x598>
   12d54:	cmp	fp, r6
   12d56:	beq.n	12d60 <_dtoa_r+0x598>
   12d58:	mov	r1, fp
   12d5a:	mov	r0, r9
   12d5c:	bl	13a08 <_Bfree>
   12d60:	mov	r1, r6
   12d62:	mov	r0, r9
   12d64:	bl	13a08 <_Bfree>
   12d68:	b.n	12b5e <_dtoa_r+0x396>
   12d6a:	movs	r3, #1
   12d6c:	str	r3, [sp, #48]	; 0x30
   12d6e:	b.n	12938 <_dtoa_r+0x170>
   12d70:	ldr.w	r8, [sp, #16]
   12d74:	mov	r0, r8
   12d76:	bl	edc8 <__aeabi_i2d>
   12d7a:	mov	r2, r0
   12d7c:	mov	r3, r1
   12d7e:	mov	r0, r6
   12d80:	mov	r1, r7
   12d82:	bl	f364 <__aeabi_dcmpeq>
   12d86:	cmp	r0, #0
   12d88:	bne.w	12910 <_dtoa_r+0x148>
   12d8c:	add.w	r3, r8, #4294967295
   12d90:	str	r3, [sp, #16]
   12d92:	b.n	12910 <_dtoa_r+0x148>
   12d94:	ldr	r2, [sp, #20]
   12d96:	ldr	r3, [sp, #16]
   12d98:	subs	r2, r2, r3
   12d9a:	negs	r3, r3
   12d9c:	str	r3, [sp, #40]	; 0x28
   12d9e:	movs	r3, #0
   12da0:	str	r2, [sp, #20]
   12da2:	str	r3, [sp, #44]	; 0x2c
   12da4:	b.n	1295c <_dtoa_r+0x194>
   12da6:	negs	r3, r3
   12da8:	str	r3, [sp, #20]
   12daa:	movs	r3, #0
   12dac:	str	r3, [sp, #8]
   12dae:	b.n	12946 <_dtoa_r+0x17e>
   12db0:	ldr	r7, [sp, #40]	; 0x28
   12db2:	ldr	r5, [sp, #20]
   12db4:	ldr	r6, [sp, #36]	; 0x24
   12db6:	b.n	12bc4 <_dtoa_r+0x3fc>
   12db8:	rsb	r8, r3, #32
   12dbc:	lsl.w	r0, sl, r8
   12dc0:	b.n	128aa <_dtoa_r+0xe2>
   12dc2:	str	r0, [sp, #48]	; 0x30
   12dc4:	b.n	12938 <_dtoa_r+0x170>
   12dc6:	nop
   12dc8:	.word	0x40240000
   12dcc:	movs	r3, #0
   12dce:	str	r3, [sp, #36]	; 0x24
   12dd0:	ldr	r3, [sp, #16]
   12dd2:	ldr	r2, [sp, #132]	; 0x84
   12dd4:	add	r3, r2
   12dd6:	str	r3, [sp, #52]	; 0x34
   12dd8:	adds	r3, #1
   12dda:	cmp	r3, #0
   12ddc:	str	r3, [sp, #24]
   12dde:	ble.w	132e8 <_dtoa_r+0xb20>
   12de2:	ldr	r4, [sp, #24]
   12de4:	mov	r6, r4
   12de6:	movs	r1, #0
   12de8:	cmp	r6, #23
   12dea:	str.w	r1, [r9, #68]	; 0x44
   12dee:	bls.n	12e08 <_dtoa_r+0x640>
   12df0:	movs	r2, #1
   12df2:	movs	r3, #4
   12df4:	lsls	r3, r3, #1
   12df6:	add.w	r0, r3, #20
   12dfa:	cmp	r0, r6
   12dfc:	mov	r1, r2
   12dfe:	add.w	r2, r2, #1
   12e02:	bls.n	12df4 <_dtoa_r+0x62c>
   12e04:	str.w	r1, [r9, #68]	; 0x44
   12e08:	mov	r0, r9
   12e0a:	bl	139bc <_Balloc>
   12e0e:	cmp	r4, #14
   12e10:	str	r0, [sp, #28]
   12e12:	str.w	r0, [r9, #64]	; 0x40
   12e16:	bhi.w	129da <_dtoa_r+0x212>
   12e1a:	cmp	r5, #0
   12e1c:	beq.w	129da <_dtoa_r+0x212>
   12e20:	ldr	r1, [sp, #16]
   12e22:	mov	r7, sl
   12e24:	mov	r8, fp
   12e26:	cmp	r1, #0
   12e28:	strd	r7, r8, [sp, #56]	; 0x38
   12e2c:	ble.w	13354 <_dtoa_r+0xb8c>
   12e30:	ldr	r3, [pc, #580]	; (13078 <_dtoa_r+0x8b0>)
   12e32:	and.w	r2, r1, #15
   12e36:	asrs	r6, r1, #4
   12e38:	add.w	r3, r3, r2, lsl #3
   12e3c:	lsls	r0, r6, #27
   12e3e:	ldrd	r4, r5, [r3]
   12e42:	bpl.w	132de <_dtoa_r+0xb16>
   12e46:	ldr	r3, [pc, #564]	; (1307c <_dtoa_r+0x8b4>)
   12e48:	mov	r0, sl
   12e4a:	mov	r1, fp
   12e4c:	ldrd	r2, r3, [r3, #32]
   12e50:	bl	f0e8 <__aeabi_ddiv>
   12e54:	and.w	r6, r6, #15
   12e58:	mov	sl, r0
   12e5a:	mov	fp, r1
   12e5c:	mov.w	r8, #3
   12e60:	cbz	r6, 12e84 <_dtoa_r+0x6bc>
   12e62:	ldr	r7, [pc, #536]	; (1307c <_dtoa_r+0x8b4>)
   12e64:	lsls	r1, r6, #31
   12e66:	bpl.n	12e7c <_dtoa_r+0x6b4>
   12e68:	mov	r0, r4
   12e6a:	mov	r1, r5
   12e6c:	ldrd	r2, r3, [r7]
   12e70:	bl	ee94 <__aeabi_dmul>
   12e74:	add.w	r8, r8, #1
   12e78:	mov	r4, r0
   12e7a:	mov	r5, r1
   12e7c:	asrs	r6, r6, #1
   12e7e:	add.w	r7, r7, #8
   12e82:	bne.n	12e64 <_dtoa_r+0x69c>
   12e84:	mov	r2, r4
   12e86:	mov	r3, r5
   12e88:	mov	r0, sl
   12e8a:	mov	r1, fp
   12e8c:	bl	f0e8 <__aeabi_ddiv>
   12e90:	mov	r6, r0
   12e92:	mov	r7, r1
   12e94:	ldr	r3, [sp, #48]	; 0x30
   12e96:	cbz	r3, 12eaa <_dtoa_r+0x6e2>
   12e98:	movs	r2, #0
   12e9a:	ldr	r3, [pc, #484]	; (13080 <_dtoa_r+0x8b8>)
   12e9c:	mov	r0, r6
   12e9e:	mov	r1, r7
   12ea0:	bl	f378 <__aeabi_dcmplt>
   12ea4:	cmp	r0, #0
   12ea6:	bne.w	134ea <_dtoa_r+0xd22>
   12eaa:	mov	r0, r8
   12eac:	bl	edc8 <__aeabi_i2d>
   12eb0:	mov	r2, r6
   12eb2:	mov	r3, r7
   12eb4:	bl	ee94 <__aeabi_dmul>
   12eb8:	ldr	r3, [pc, #456]	; (13084 <_dtoa_r+0x8bc>)
   12eba:	movs	r2, #0
   12ebc:	bl	eb30 <__adddf3>
   12ec0:	ldr	r3, [sp, #24]
   12ec2:	mov	r4, r0
   12ec4:	sub.w	r5, r1, #54525952	; 0x3400000
   12ec8:	cmp	r3, #0
   12eca:	beq.w	1328c <_dtoa_r+0xac4>
   12ece:	ldr	r3, [sp, #16]
   12ed0:	ldr.w	r8, [sp, #24]
   12ed4:	str	r3, [sp, #68]	; 0x44
   12ed6:	ldr	r3, [sp, #36]	; 0x24
   12ed8:	cmp	r3, #0
   12eda:	beq.w	1340c <_dtoa_r+0xc44>
   12ede:	ldr	r3, [pc, #408]	; (13078 <_dtoa_r+0x8b0>)
   12ee0:	ldr	r1, [pc, #420]	; (13088 <_dtoa_r+0x8c0>)
   12ee2:	add.w	r3, r3, r8, lsl #3
   12ee6:	ldrd	r2, r3, [r3, #-8]
   12eea:	movs	r0, #0
   12eec:	bl	f0e8 <__aeabi_ddiv>
   12ef0:	mov	r2, r4
   12ef2:	mov	r3, r5
   12ef4:	bl	eb2c <__aeabi_dsub>
   12ef8:	mov	sl, r0
   12efa:	mov	fp, r1
   12efc:	mov	r0, r6
   12efe:	mov	r1, r7
   12f00:	bl	f3f4 <__aeabi_d2iz>
   12f04:	mov	r4, r0
   12f06:	bl	edc8 <__aeabi_i2d>
   12f0a:	mov	r2, r0
   12f0c:	mov	r3, r1
   12f0e:	mov	r0, r6
   12f10:	mov	r1, r7
   12f12:	bl	eb2c <__aeabi_dsub>
   12f16:	adds	r4, #48	; 0x30
   12f18:	ldr	r5, [sp, #28]
   12f1a:	uxtb	r4, r4
   12f1c:	mov	r6, r0
   12f1e:	mov	r7, r1
   12f20:	strb	r4, [r5, #0]
   12f22:	mov	r2, r0
   12f24:	mov	r3, r1
   12f26:	mov	r0, sl
   12f28:	mov	r1, fp
   12f2a:	adds	r5, #1
   12f2c:	bl	f3b4 <__aeabi_dcmpgt>
   12f30:	cmp	r0, #0
   12f32:	bne.n	12fce <_dtoa_r+0x806>
   12f34:	mov	r2, r6
   12f36:	mov	r3, r7
   12f38:	movs	r0, #0
   12f3a:	ldr	r1, [pc, #324]	; (13080 <_dtoa_r+0x8b8>)
   12f3c:	bl	eb2c <__aeabi_dsub>
   12f40:	mov	r2, r0
   12f42:	mov	r3, r1
   12f44:	mov	r0, sl
   12f46:	mov	r1, fp
   12f48:	bl	f3b4 <__aeabi_dcmpgt>
   12f4c:	cmp	r0, #0
   12f4e:	bne.w	1356c <_dtoa_r+0xda4>
   12f52:	cmp.w	r8, #1
   12f56:	ble.w	132c0 <_dtoa_r+0xaf8>
   12f5a:	ldr	r3, [sp, #28]
   12f5c:	add	r8, r3
   12f5e:	b.n	12f7c <_dtoa_r+0x7b4>
   12f60:	movs	r0, #0
   12f62:	ldr	r1, [pc, #284]	; (13080 <_dtoa_r+0x8b8>)
   12f64:	bl	eb2c <__aeabi_dsub>
   12f68:	mov	r2, sl
   12f6a:	mov	r3, fp
   12f6c:	bl	f378 <__aeabi_dcmplt>
   12f70:	cmp	r0, #0
   12f72:	bne.w	1356c <_dtoa_r+0xda4>
   12f76:	cmp	r5, r8
   12f78:	beq.w	132c0 <_dtoa_r+0xaf8>
   12f7c:	mov	r0, sl
   12f7e:	mov	r1, fp
   12f80:	movs	r2, #0
   12f82:	ldr	r3, [pc, #264]	; (1308c <_dtoa_r+0x8c4>)
   12f84:	bl	ee94 <__aeabi_dmul>
   12f88:	movs	r2, #0
   12f8a:	ldr	r3, [pc, #256]	; (1308c <_dtoa_r+0x8c4>)
   12f8c:	mov	sl, r0
   12f8e:	mov	fp, r1
   12f90:	mov	r0, r6
   12f92:	mov	r1, r7
   12f94:	bl	ee94 <__aeabi_dmul>
   12f98:	mov	r7, r1
   12f9a:	mov	r6, r0
   12f9c:	bl	f3f4 <__aeabi_d2iz>
   12fa0:	mov	r4, r0
   12fa2:	bl	edc8 <__aeabi_i2d>
   12fa6:	mov	r2, r0
   12fa8:	mov	r3, r1
   12faa:	mov	r0, r6
   12fac:	mov	r1, r7
   12fae:	bl	eb2c <__aeabi_dsub>
   12fb2:	adds	r4, #48	; 0x30
   12fb4:	uxtb	r4, r4
   12fb6:	mov	r2, sl
   12fb8:	mov	r3, fp
   12fba:	strb.w	r4, [r5], #1
   12fbe:	mov	r6, r0
   12fc0:	mov	r7, r1
   12fc2:	bl	f378 <__aeabi_dcmplt>
   12fc6:	mov	r2, r6
   12fc8:	mov	r3, r7
   12fca:	cmp	r0, #0
   12fcc:	beq.n	12f60 <_dtoa_r+0x798>
   12fce:	ldr	r3, [sp, #68]	; 0x44
   12fd0:	str	r3, [sp, #16]
   12fd2:	b.n	12b5e <_dtoa_r+0x396>
   12fd4:	movs	r3, #0
   12fd6:	str	r3, [sp, #36]	; 0x24
   12fd8:	ldr	r3, [sp, #132]	; 0x84
   12fda:	cmp	r3, #0
   12fdc:	ble.w	132f2 <_dtoa_r+0xb2a>
   12fe0:	mov	r6, r3
   12fe2:	mov	r4, r3
   12fe4:	str	r3, [sp, #52]	; 0x34
   12fe6:	str	r3, [sp, #24]
   12fe8:	b.n	12de6 <_dtoa_r+0x61e>
   12fea:	movs	r3, #1
   12fec:	str	r3, [sp, #36]	; 0x24
   12fee:	b.n	12fd8 <_dtoa_r+0x810>
   12ff0:	str	r4, [sp, #32]
   12ff2:	ldr	r2, [sp, #40]	; 0x28
   12ff4:	ldr	r1, [sp, #32]
   12ff6:	mov	r0, r9
   12ff8:	bl	13c7c <__pow5mult>
   12ffc:	mov	r4, r0
   12ffe:	b.n	12c24 <_dtoa_r+0x45c>
   13000:	ldr	r3, [sp, #24]
   13002:	cmp	r3, #0
   13004:	bgt.w	12a00 <_dtoa_r+0x238>
   13008:	bne.w	135c0 <_dtoa_r+0xdf8>
   1300c:	movs	r2, #0
   1300e:	ldr	r3, [pc, #128]	; (13090 <_dtoa_r+0x8c8>)
   13010:	ldrd	r0, r1, [sp, #8]
   13014:	bl	ee94 <__aeabi_dmul>
   13018:	mov	r2, sl
   1301a:	mov	r3, fp
   1301c:	bl	f3a0 <__aeabi_dcmpge>
   13020:	ldr.w	r8, [sp, #24]
   13024:	mov	r6, r8
   13026:	cmp	r0, #0
   13028:	beq.w	13210 <_dtoa_r+0xa48>
   1302c:	ldr	r3, [sp, #132]	; 0x84
   1302e:	ldr	r5, [sp, #28]
   13030:	mvns	r3, r3
   13032:	str	r3, [sp, #16]
   13034:	mov	r1, r8
   13036:	mov	r0, r9
   13038:	bl	13a08 <_Bfree>
   1303c:	cmp	r6, #0
   1303e:	beq.w	12b5e <_dtoa_r+0x396>
   13042:	b.n	12d60 <_dtoa_r+0x598>
   13044:	ldr	r2, [sp, #64]	; 0x40
   13046:	cmp	r2, #0
   13048:	beq.w	134ce <_dtoa_r+0xd06>
   1304c:	addw	r3, r3, #1075	; 0x433
   13050:	ldr	r7, [sp, #40]	; 0x28
   13052:	ldr	r5, [sp, #20]
   13054:	b.n	12bae <_dtoa_r+0x3e6>
   13056:	movs	r0, #28
   13058:	ldr	r3, [sp, #20]
   1305a:	add	r3, r0
   1305c:	str	r3, [sp, #20]
   1305e:	ldr	r3, [sp, #8]
   13060:	add	r3, r0
   13062:	add	r5, r0
   13064:	str	r3, [sp, #8]
   13066:	b.n	12c86 <_dtoa_r+0x4be>
   13068:	ldr	r3, [sp, #128]	; 0x80
   1306a:	cmp	r3, #1
   1306c:	ble.w	13574 <_dtoa_r+0xdac>
   13070:	ldr	r7, [sp, #44]	; 0x2c
   13072:	movs	r0, #1
   13074:	b.n	12c5e <_dtoa_r+0x496>
   13076:	nop
   13078:	.word	0x00014a30
   1307c:	.word	0x00014b08
   13080:	.word	0x3ff00000
   13084:	.word	0x401c0000
   13088:	.word	0x3fe00000
   1308c:	.word	0x40240000
   13090:	.word	0x40140000
   13094:	mov	r1, r6
   13096:	movs	r3, #0
   13098:	movs	r2, #10
   1309a:	mov	r0, r9
   1309c:	bl	13a1c <__multadd>
   130a0:	ldr	r3, [sp, #52]	; 0x34
   130a2:	cmp	r3, #0
   130a4:	mov	r6, r0
   130a6:	ble.w	135d8 <_dtoa_r+0xe10>
   130aa:	str	r3, [sp, #24]
   130ac:	cmp	r5, #0
   130ae:	ble.n	130bc <_dtoa_r+0x8f4>
   130b0:	mov	r1, r6
   130b2:	mov	r2, r5
   130b4:	mov	r0, r9
   130b6:	bl	13d1c <__lshift>
   130ba:	mov	r6, r0
   130bc:	cmp	r7, #0
   130be:	bne.w	133ba <_dtoa_r+0xbf2>
   130c2:	str	r6, [sp, #20]
   130c4:	ldr	r3, [sp, #24]
   130c6:	ldr	r2, [sp, #28]
   130c8:	ldr.w	fp, [sp, #20]
   130cc:	subs	r3, #1
   130ce:	adds	r3, r2, r3
   130d0:	str	r3, [sp, #32]
   130d2:	and.w	r3, sl, #1
   130d6:	str	r3, [sp, #36]	; 0x24
   130d8:	mov	r7, r2
   130da:	mov	sl, r8
   130dc:	mov	r1, sl
   130de:	mov	r0, r4
   130e0:	bl	1269c <quorem>
   130e4:	mov	r1, r6
   130e6:	mov	r5, r0
   130e8:	mov	r0, r4
   130ea:	bl	13dcc <__mcmp>
   130ee:	mov	r2, fp
   130f0:	str	r0, [sp, #8]
   130f2:	mov	r1, sl
   130f4:	mov	r0, r9
   130f6:	bl	13e0c <__mdiff>
   130fa:	ldr	r2, [r0, #12]
   130fc:	mov	r8, r0
   130fe:	add.w	r3, r5, #48	; 0x30
   13102:	cmp	r2, #0
   13104:	bne.n	1319a <_dtoa_r+0x9d2>
   13106:	mov	r1, r0
   13108:	mov	r0, r4
   1310a:	str	r3, [sp, #24]
   1310c:	bl	13dcc <__mcmp>
   13110:	mov	r1, r8
   13112:	str	r0, [sp, #20]
   13114:	mov	r0, r9
   13116:	bl	13a08 <_Bfree>
   1311a:	ldr	r2, [sp, #20]
   1311c:	ldr	r3, [sp, #24]
   1311e:	cbnz	r2, 1312c <_dtoa_r+0x964>
   13120:	ldr	r1, [sp, #128]	; 0x80
   13122:	cbnz	r1, 1312c <_dtoa_r+0x964>
   13124:	ldr	r1, [sp, #36]	; 0x24
   13126:	cmp	r1, #0
   13128:	beq.w	13598 <_dtoa_r+0xdd0>
   1312c:	ldr	r1, [sp, #8]
   1312e:	cmp	r1, #0
   13130:	blt.w	132fc <_dtoa_r+0xb34>
   13134:	bne.n	13142 <_dtoa_r+0x97a>
   13136:	ldr	r1, [sp, #128]	; 0x80
   13138:	cbnz	r1, 13142 <_dtoa_r+0x97a>
   1313a:	ldr	r1, [sp, #36]	; 0x24
   1313c:	cmp	r1, #0
   1313e:	beq.w	132fc <_dtoa_r+0xb34>
   13142:	cmp	r2, #0
   13144:	bgt.w	133e2 <_dtoa_r+0xc1a>
   13148:	ldr	r2, [sp, #32]
   1314a:	strb	r3, [r7, #0]
   1314c:	add.w	r8, r7, #1
   13150:	cmp	r7, r2
   13152:	mov	r5, r8
   13154:	beq.w	13400 <_dtoa_r+0xc38>
   13158:	mov	r1, r4
   1315a:	movs	r3, #0
   1315c:	movs	r2, #10
   1315e:	mov	r0, r9
   13160:	bl	13a1c <__multadd>
   13164:	cmp	r6, fp
   13166:	mov	r4, r0
   13168:	mov	r1, r6
   1316a:	mov.w	r3, #0
   1316e:	mov.w	r2, #10
   13172:	mov	r0, r9
   13174:	beq.n	1318e <_dtoa_r+0x9c6>
   13176:	bl	13a1c <__multadd>
   1317a:	mov	r1, fp
   1317c:	mov	r6, r0
   1317e:	movs	r3, #0
   13180:	movs	r2, #10
   13182:	mov	r0, r9
   13184:	bl	13a1c <__multadd>
   13188:	mov	r7, r8
   1318a:	mov	fp, r0
   1318c:	b.n	130dc <_dtoa_r+0x914>
   1318e:	bl	13a1c <__multadd>
   13192:	mov	r7, r8
   13194:	mov	r6, r0
   13196:	mov	fp, r0
   13198:	b.n	130dc <_dtoa_r+0x914>
   1319a:	mov	r1, r0
   1319c:	mov	r0, r9
   1319e:	str	r3, [sp, #20]
   131a0:	bl	13a08 <_Bfree>
   131a4:	movs	r2, #1
   131a6:	ldr	r3, [sp, #20]
   131a8:	b.n	1312c <_dtoa_r+0x964>
   131aa:	mov	r1, r8
   131ac:	mov	r0, r4
   131ae:	bl	13dcc <__mcmp>
   131b2:	cmp	r0, #0
   131b4:	bge.w	12cb2 <_dtoa_r+0x4ea>
   131b8:	mov	r1, r4
   131ba:	ldr	r4, [sp, #16]
   131bc:	movs	r3, #0
   131be:	subs	r4, #1
   131c0:	movs	r2, #10
   131c2:	mov	r0, r9
   131c4:	str	r4, [sp, #16]
   131c6:	bl	13a1c <__multadd>
   131ca:	ldr	r3, [sp, #36]	; 0x24
   131cc:	mov	r4, r0
   131ce:	cmp	r3, #0
   131d0:	bne.w	13094 <_dtoa_r+0x8cc>
   131d4:	ldr	r3, [sp, #52]	; 0x34
   131d6:	cmp	r3, #0
   131d8:	ble.w	135c8 <_dtoa_r+0xe00>
   131dc:	str	r3, [sp, #24]
   131de:	b.n	12cc2 <_dtoa_r+0x4fa>
   131e0:	ldr	r4, [sp, #32]
   131e2:	b.n	12c24 <_dtoa_r+0x45c>
   131e4:	ldr	r3, [sp, #128]	; 0x80
   131e6:	cmp	r3, #2
   131e8:	ble.w	12cba <_dtoa_r+0x4f2>
   131ec:	ldr	r3, [sp, #24]
   131ee:	cmp	r3, #0
   131f0:	bne.w	134e6 <_dtoa_r+0xd1e>
   131f4:	mov	r1, r8
   131f6:	movs	r2, #5
   131f8:	mov	r0, r9
   131fa:	bl	13a1c <__multadd>
   131fe:	mov	r1, r0
   13200:	mov	r8, r0
   13202:	mov	r0, r4
   13204:	bl	13dcc <__mcmp>
   13208:	cmp	r0, #0
   1320a:	str	r4, [sp, #32]
   1320c:	ble.w	1302c <_dtoa_r+0x864>
   13210:	ldr	r2, [sp, #16]
   13212:	ldr	r1, [sp, #28]
   13214:	movs	r3, #49	; 0x31
   13216:	adds	r2, #1
   13218:	str	r2, [sp, #16]
   1321a:	strb	r3, [r1, #0]
   1321c:	adds	r5, r1, #1
   1321e:	b.n	13034 <_dtoa_r+0x86c>
   13220:	ldr	r2, [sp, #16]
   13222:	adds	r2, #1
   13224:	str	r2, [sp, #16]
   13226:	ldr	r2, [sp, #28]
   13228:	movs	r3, #49	; 0x31
   1322a:	strb	r3, [r2, #0]
   1322c:	b.n	12d40 <_dtoa_r+0x578>
   1322e:	movs	r3, #1
   13230:	str	r3, [sp, #36]	; 0x24
   13232:	b.n	12dd0 <_dtoa_r+0x608>
   13234:	ldr.w	r9, [sp, #20]
   13238:	b.n	12b5e <_dtoa_r+0x396>
   1323a:	cmp.w	sl, #0
   1323e:	bne.w	12c4a <_dtoa_r+0x482>
   13242:	ubfx	r3, fp, #0, #20
   13246:	cmp	r3, #0
   13248:	bne.w	134ca <_dtoa_r+0xd02>
   1324c:	bic.w	r7, fp, #2147483648	; 0x80000000
   13250:	lsrs	r7, r7, #20
   13252:	lsls	r7, r7, #20
   13254:	cbz	r7, 13264 <_dtoa_r+0xa9c>
   13256:	ldr	r3, [sp, #20]
   13258:	adds	r3, #1
   1325a:	str	r3, [sp, #20]
   1325c:	ldr	r3, [sp, #8]
   1325e:	adds	r3, #1
   13260:	str	r3, [sp, #8]
   13262:	movs	r7, #1
   13264:	ldr	r3, [sp, #44]	; 0x2c
   13266:	movs	r0, #1
   13268:	cmp	r3, #0
   1326a:	beq.w	12c5e <_dtoa_r+0x496>
   1326e:	b.n	12c4c <_dtoa_r+0x484>
   13270:	mov	r0, r8
   13272:	bl	edc8 <__aeabi_i2d>
   13276:	mov	r2, r6
   13278:	mov	r3, r7
   1327a:	bl	ee94 <__aeabi_dmul>
   1327e:	movs	r2, #0
   13280:	ldr	r3, [pc, #764]	; (13580 <_dtoa_r+0xdb8>)
   13282:	bl	eb30 <__adddf3>
   13286:	mov	r4, r0
   13288:	sub.w	r5, r1, #54525952	; 0x3400000
   1328c:	mov	r0, r6
   1328e:	mov	r1, r7
   13290:	movs	r2, #0
   13292:	ldr	r3, [pc, #752]	; (13584 <_dtoa_r+0xdbc>)
   13294:	bl	eb2c <__aeabi_dsub>
   13298:	mov	r2, r4
   1329a:	mov	r3, r5
   1329c:	mov	r6, r0
   1329e:	mov	r7, r1
   132a0:	bl	f3b4 <__aeabi_dcmpgt>
   132a4:	mov	r8, r0
   132a6:	cmp	r0, #0
   132a8:	bne.w	134b6 <_dtoa_r+0xcee>
   132ac:	mov	r2, r4
   132ae:	add.w	r3, r5, #2147483648	; 0x80000000
   132b2:	mov	r0, r6
   132b4:	mov	r1, r7
   132b6:	bl	f378 <__aeabi_dcmplt>
   132ba:	cbz	r0, 132c0 <_dtoa_r+0xaf8>
   132bc:	mov	r6, r8
   132be:	b.n	1302c <_dtoa_r+0x864>
   132c0:	ldrd	sl, fp, [sp, #56]	; 0x38
   132c4:	b.w	129da <_dtoa_r+0x212>
   132c8:	ldr	r0, [sp, #28]
   132ca:	b.w	1282a <_dtoa_r+0x62>
   132ce:	ldr	r3, [sp, #40]	; 0x28
   132d0:	ldr	r2, [sp, #44]	; 0x2c
   132d2:	str	r7, [sp, #40]	; 0x28
   132d4:	subs	r3, r7, r3
   132d6:	add	r2, r3
   132d8:	str	r2, [sp, #44]	; 0x2c
   132da:	movs	r7, #0
   132dc:	b.n	12ba2 <_dtoa_r+0x3da>
   132de:	ldrd	sl, fp, [sp, #56]	; 0x38
   132e2:	mov.w	r8, #2
   132e6:	b.n	12e60 <_dtoa_r+0x698>
   132e8:	mov	r4, r3
   132ea:	movs	r1, #0
   132ec:	str.w	r1, [r9, #68]	; 0x44
   132f0:	b.n	12e08 <_dtoa_r+0x640>
   132f2:	movs	r4, #1
   132f4:	str	r4, [sp, #132]	; 0x84
   132f6:	str	r4, [sp, #52]	; 0x34
   132f8:	str	r4, [sp, #24]
   132fa:	b.n	132ea <_dtoa_r+0xb22>
   132fc:	cmp	r2, #0
   132fe:	mov	r8, sl
   13300:	str.w	fp, [sp, #20]
   13304:	mov	sl, r3
   13306:	ble.n	1332c <_dtoa_r+0xb64>
   13308:	mov	r1, r4
   1330a:	movs	r2, #1
   1330c:	mov	r0, r9
   1330e:	bl	13d1c <__lshift>
   13312:	mov	r1, r8
   13314:	mov	r4, r0
   13316:	bl	13dcc <__mcmp>
   1331a:	cmp	r0, #0
   1331c:	ble.w	135b2 <_dtoa_r+0xdea>
   13320:	cmp.w	sl, #57	; 0x39
   13324:	beq.w	13534 <_dtoa_r+0xd6c>
   13328:	add.w	sl, r5, #49	; 0x31
   1332c:	mov	fp, r6
   1332e:	strb.w	sl, [r7]
   13332:	adds	r5, r7, #1
   13334:	ldr	r6, [sp, #20]
   13336:	str	r4, [sp, #32]
   13338:	b.n	12d40 <_dtoa_r+0x578>
   1333a:	bne.n	13346 <_dtoa_r+0xb7e>
   1333c:	tst.w	sl, #1
   13340:	beq.n	13346 <_dtoa_r+0xb7e>
   13342:	b.n	12d20 <_dtoa_r+0x558>
   13344:	mov	r5, r2
   13346:	ldrb.w	r3, [r5, #-1]
   1334a:	cmp	r3, #48	; 0x30
   1334c:	add.w	r2, r5, #4294967295
   13350:	beq.n	13344 <_dtoa_r+0xb7c>
   13352:	b.n	12d40 <_dtoa_r+0x578>
   13354:	ldr	r3, [sp, #16]
   13356:	negs	r4, r3
   13358:	cmp	r4, #0
   1335a:	beq.w	134dc <_dtoa_r+0xd14>
   1335e:	ldr	r3, [pc, #552]	; (13588 <_dtoa_r+0xdc0>)
   13360:	and.w	r2, r4, #15
   13364:	add.w	r3, r3, r2, lsl #3
   13368:	ldrd	r2, r3, [r3]
   1336c:	ldrd	r0, r1, [sp, #56]	; 0x38
   13370:	bl	ee94 <__aeabi_dmul>
   13374:	asrs	r4, r4, #4
   13376:	mov	r6, r0
   13378:	mov	r7, r1
   1337a:	beq.w	135d2 <_dtoa_r+0xe0a>
   1337e:	ldr	r5, [pc, #524]	; (1358c <_dtoa_r+0xdc4>)
   13380:	mov.w	r8, #2
   13384:	lsls	r2, r4, #31
   13386:	bpl.n	1339c <_dtoa_r+0xbd4>
   13388:	mov	r0, r6
   1338a:	mov	r1, r7
   1338c:	ldrd	r2, r3, [r5]
   13390:	bl	ee94 <__aeabi_dmul>
   13394:	add.w	r8, r8, #1
   13398:	mov	r6, r0
   1339a:	mov	r7, r1
   1339c:	asrs	r4, r4, #1
   1339e:	add.w	r5, r5, #8
   133a2:	bne.n	13384 <_dtoa_r+0xbbc>
   133a4:	b.n	12e94 <_dtoa_r+0x6cc>
   133a6:	ldr	r1, [sp, #28]
   133a8:	movs	r2, #48	; 0x30
   133aa:	strb	r2, [r1, #0]
   133ac:	ldr	r2, [sp, #16]
   133ae:	ldrb.w	r4, [r5, #-1]
   133b2:	adds	r2, #1
   133b4:	str	r2, [sp, #16]
   133b6:	b.w	12b5a <_dtoa_r+0x392>
   133ba:	ldr	r1, [r6, #4]
   133bc:	mov	r0, r9
   133be:	bl	139bc <_Balloc>
   133c2:	ldr	r3, [r6, #16]
   133c4:	adds	r2, r3, #2
   133c6:	mov	r5, r0
   133c8:	lsls	r2, r2, #2
   133ca:	add.w	r1, r6, #12
   133ce:	adds	r0, #12
   133d0:	bl	cb00 <memcpy>
   133d4:	mov	r1, r5
   133d6:	movs	r2, #1
   133d8:	mov	r0, r9
   133da:	bl	13d1c <__lshift>
   133de:	str	r0, [sp, #20]
   133e0:	b.n	130c4 <_dtoa_r+0x8fc>
   133e2:	cmp	r3, #57	; 0x39
   133e4:	str.w	fp, [sp, #20]
   133e8:	mov	r8, sl
   133ea:	beq.w	13534 <_dtoa_r+0xd6c>
   133ee:	add.w	sl, r3, #1
   133f2:	mov	fp, r6
   133f4:	strb.w	sl, [r7]
   133f8:	adds	r5, r7, #1
   133fa:	ldr	r6, [sp, #20]
   133fc:	str	r4, [sp, #32]
   133fe:	b.n	12d40 <_dtoa_r+0x578>
   13400:	mov	r2, fp
   13402:	mov	r8, sl
   13404:	mov	fp, r6
   13406:	mov	sl, r3
   13408:	mov	r6, r2
   1340a:	b.n	12d08 <_dtoa_r+0x540>
   1340c:	ldr	r1, [pc, #376]	; (13588 <_dtoa_r+0xdc0>)
   1340e:	add.w	sl, r8, #4294967295
   13412:	add.w	r1, r1, sl, lsl #3
   13416:	mov	r2, r4
   13418:	mov	r3, r5
   1341a:	ldrd	r0, r1, [r1]
   1341e:	bl	ee94 <__aeabi_dmul>
   13422:	strd	r0, r1, [sp, #72]	; 0x48
   13426:	mov	r1, r7
   13428:	mov	r0, r6
   1342a:	bl	f3f4 <__aeabi_d2iz>
   1342e:	mov	r4, r0
   13430:	bl	edc8 <__aeabi_i2d>
   13434:	mov	r2, r0
   13436:	mov	r3, r1
   13438:	mov	r0, r6
   1343a:	mov	r1, r7
   1343c:	bl	eb2c <__aeabi_dsub>
   13440:	ldr	r2, [sp, #28]
   13442:	adds	r4, #48	; 0x30
   13444:	cmp.w	r8, #1
   13448:	mov	r6, r0
   1344a:	mov	r7, r1
   1344c:	strb	r4, [r2, #0]
   1344e:	add.w	r5, r2, #1
   13452:	beq.n	13492 <_dtoa_r+0xcca>
   13454:	ldr	r3, [sp, #28]
   13456:	add.w	fp, r3, r8
   1345a:	mov	r8, r5
   1345c:	movs	r2, #0
   1345e:	ldr	r3, [pc, #304]	; (13590 <_dtoa_r+0xdc8>)
   13460:	mov	r0, r6
   13462:	mov	r1, r7
   13464:	bl	ee94 <__aeabi_dmul>
   13468:	mov	r7, r1
   1346a:	mov	r6, r0
   1346c:	bl	f3f4 <__aeabi_d2iz>
   13470:	mov	r4, r0
   13472:	bl	edc8 <__aeabi_i2d>
   13476:	adds	r4, #48	; 0x30
   13478:	mov	r2, r0
   1347a:	mov	r3, r1
   1347c:	mov	r0, r6
   1347e:	mov	r1, r7
   13480:	bl	eb2c <__aeabi_dsub>
   13484:	strb.w	r4, [r8], #1
   13488:	cmp	fp, r8
   1348a:	mov	r6, r0
   1348c:	mov	r7, r1
   1348e:	bne.n	1345c <_dtoa_r+0xc94>
   13490:	add	r5, sl
   13492:	movs	r2, #0
   13494:	ldr	r3, [pc, #252]	; (13594 <_dtoa_r+0xdcc>)
   13496:	ldrd	r0, r1, [sp, #72]	; 0x48
   1349a:	bl	eb30 <__adddf3>
   1349e:	mov	r2, r6
   134a0:	mov	r3, r7
   134a2:	bl	f378 <__aeabi_dcmplt>
   134a6:	cmp	r0, #0
   134a8:	beq.n	13544 <_dtoa_r+0xd7c>
   134aa:	ldr	r3, [sp, #68]	; 0x44
   134ac:	str	r3, [sp, #16]
   134ae:	ldrb.w	r4, [r5, #-1]
   134b2:	b.w	12b42 <_dtoa_r+0x37a>
   134b6:	mov.w	r8, #0
   134ba:	mov	r6, r8
   134bc:	b.n	13210 <_dtoa_r+0xa48>
   134be:	ldr	r3, [sp, #20]
   134c0:	ldr	r2, [sp, #24]
   134c2:	subs	r5, r3, r2
   134c4:	movs	r3, #0
   134c6:	b.w	12bae <_dtoa_r+0x3e6>
   134ca:	movs	r7, #0
   134cc:	b.n	13264 <_dtoa_r+0xa9c>
   134ce:	ldr	r3, [sp, #80]	; 0x50
   134d0:	ldr	r7, [sp, #40]	; 0x28
   134d2:	ldr	r5, [sp, #20]
   134d4:	rsb	r3, r3, #54	; 0x36
   134d8:	b.w	12bae <_dtoa_r+0x3e6>
   134dc:	ldrd	r6, r7, [sp, #56]	; 0x38
   134e0:	mov.w	r8, #2
   134e4:	b.n	12e94 <_dtoa_r+0x6cc>
   134e6:	str	r4, [sp, #32]
   134e8:	b.n	1302c <_dtoa_r+0x864>
   134ea:	ldr	r3, [sp, #24]
   134ec:	cmp	r3, #0
   134ee:	beq.w	13270 <_dtoa_r+0xaa8>
   134f2:	ldr	r3, [sp, #52]	; 0x34
   134f4:	cmp	r3, #0
   134f6:	ble.w	132c0 <_dtoa_r+0xaf8>
   134fa:	movs	r2, #0
   134fc:	ldr	r3, [pc, #144]	; (13590 <_dtoa_r+0xdc8>)
   134fe:	mov	r0, r6
   13500:	mov	r1, r7
   13502:	bl	ee94 <__aeabi_dmul>
   13506:	mov	r6, r0
   13508:	mov	r7, r1
   1350a:	add.w	r0, r8, #1
   1350e:	bl	edc8 <__aeabi_i2d>
   13512:	mov	r2, r6
   13514:	mov	r3, r7
   13516:	bl	ee94 <__aeabi_dmul>
   1351a:	movs	r2, #0
   1351c:	ldr	r3, [pc, #96]	; (13580 <_dtoa_r+0xdb8>)
   1351e:	bl	eb30 <__adddf3>
   13522:	ldr	r2, [sp, #16]
   13524:	ldr.w	r8, [sp, #52]	; 0x34
   13528:	subs	r2, #1
   1352a:	mov	r4, r0
   1352c:	sub.w	r5, r1, #54525952	; 0x3400000
   13530:	str	r2, [sp, #68]	; 0x44
   13532:	b.n	12ed6 <_dtoa_r+0x70e>
   13534:	movs	r2, #57	; 0x39
   13536:	mov	fp, r6
   13538:	str	r4, [sp, #32]
   1353a:	ldr	r6, [sp, #20]
   1353c:	strb	r2, [r7, #0]
   1353e:	adds	r5, r7, #1
   13540:	b.w	12d24 <_dtoa_r+0x55c>
   13544:	ldrd	r2, r3, [sp, #72]	; 0x48
   13548:	movs	r0, #0
   1354a:	ldr	r1, [pc, #72]	; (13594 <_dtoa_r+0xdcc>)
   1354c:	bl	eb2c <__aeabi_dsub>
   13550:	mov	r2, r6
   13552:	mov	r3, r7
   13554:	bl	f3b4 <__aeabi_dcmpgt>
   13558:	cbnz	r0, 1355e <_dtoa_r+0xd96>
   1355a:	b.n	132c0 <_dtoa_r+0xaf8>
   1355c:	mov	r5, r2
   1355e:	ldrb.w	r3, [r5, #-1]
   13562:	cmp	r3, #48	; 0x30
   13564:	add.w	r2, r5, #4294967295
   13568:	beq.n	1355c <_dtoa_r+0xd94>
   1356a:	b.n	12fce <_dtoa_r+0x806>
   1356c:	ldr	r3, [sp, #68]	; 0x44
   1356e:	str	r3, [sp, #16]
   13570:	b.w	12b42 <_dtoa_r+0x37a>
   13574:	cmp.w	sl, #0
   13578:	bne.w	13070 <_dtoa_r+0x8a8>
   1357c:	b.n	13242 <_dtoa_r+0xa7a>
   1357e:	nop
   13580:	.word	0x401c0000
   13584:	.word	0x40140000
   13588:	.word	0x00014a30
   1358c:	.word	0x00014b08
   13590:	.word	0x40240000
   13594:	.word	0x3fe00000
   13598:	cmp	r3, #57	; 0x39
   1359a:	str.w	fp, [sp, #20]
   1359e:	mov	r8, sl
   135a0:	ldr.w	fp, [sp, #8]
   135a4:	mov	sl, r3
   135a6:	beq.n	13534 <_dtoa_r+0xd6c>
   135a8:	cmp.w	fp, #0
   135ac:	bgt.w	13328 <_dtoa_r+0xb60>
   135b0:	b.n	1332c <_dtoa_r+0xb64>
   135b2:	bne.w	1332c <_dtoa_r+0xb64>
   135b6:	tst.w	sl, #1
   135ba:	beq.w	1332c <_dtoa_r+0xb64>
   135be:	b.n	13320 <_dtoa_r+0xb58>
   135c0:	mov.w	r8, #0
   135c4:	mov	r6, r8
   135c6:	b.n	1302c <_dtoa_r+0x864>
   135c8:	ldr	r3, [sp, #128]	; 0x80
   135ca:	cmp	r3, #2
   135cc:	bgt.n	13612 <_dtoa_r+0xe4a>
   135ce:	ldr	r3, [sp, #52]	; 0x34
   135d0:	b.n	131dc <_dtoa_r+0xa14>
   135d2:	mov.w	r8, #2
   135d6:	b.n	12e94 <_dtoa_r+0x6cc>
   135d8:	ldr	r3, [sp, #128]	; 0x80
   135da:	cmp	r3, #2
   135dc:	bgt.n	13612 <_dtoa_r+0xe4a>
   135de:	ldr	r3, [sp, #52]	; 0x34
   135e0:	b.n	130aa <_dtoa_r+0x8e2>
   135e2:	movs	r4, #0
   135e4:	str.w	r4, [r9, #68]	; 0x44
   135e8:	mov	r1, r4
   135ea:	mov	r0, r9
   135ec:	bl	139bc <_Balloc>
   135f0:	mov.w	r3, #4294967295
   135f4:	str	r3, [sp, #24]
   135f6:	str	r3, [sp, #52]	; 0x34
   135f8:	movs	r3, #1
   135fa:	str	r0, [sp, #28]
   135fc:	str	r4, [sp, #132]	; 0x84
   135fe:	str.w	r0, [r9, #64]	; 0x40
   13602:	str	r3, [sp, #36]	; 0x24
   13604:	b.w	129da <_dtoa_r+0x212>
   13608:	beq.w	12c86 <_dtoa_r+0x4be>
   1360c:	rsb	r0, r0, #60	; 0x3c
   13610:	b.n	13058 <_dtoa_r+0x890>
   13612:	ldr	r3, [sp, #52]	; 0x34
   13614:	str	r3, [sp, #24]
   13616:	b.n	131ec <_dtoa_r+0xa24>
   13618:	movs	r5, #1
   1361a:	b.w	1296e <_dtoa_r+0x1a6>
   1361e:	nop

00013620 <fcvtbuf>:
   13620:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   13624:	sub	sp, #32
   13626:	ldr	r4, [pc, #216]	; (13700 <fcvtbuf+0xe0>)
   13628:	ldr	r5, [sp, #68]	; 0x44
   1362a:	ldr.w	r9, [r4]
   1362e:	mov	r6, r0
   13630:	mov	r7, r1
   13632:	mov	r4, r2
   13634:	mov	r8, r3
   13636:	cmp	r5, #0
   13638:	beq.n	136c2 <fcvtbuf+0xa2>
   1363a:	movs	r2, #0
   1363c:	ldr	r3, [pc, #196]	; (13704 <fcvtbuf+0xe4>)
   1363e:	mov	r0, r6
   13640:	mov	r1, r7
   13642:	bl	f378 <__aeabi_dcmplt>
   13646:	cbnz	r0, 136aa <fcvtbuf+0x8a>
   13648:	add.w	lr, sp, #28
   1364c:	movs	r1, #3
   1364e:	ldr	r3, [sp, #64]	; 0x40
   13650:	str	r3, [sp, #12]
   13652:	str	r1, [sp, #0]
   13654:	mov	r3, r7
   13656:	str.w	r8, [sp, #8]
   1365a:	str	r4, [sp, #4]
   1365c:	mov	r2, r6
   1365e:	mov	r0, r9
   13660:	str.w	lr, [sp, #16]
   13664:	bl	127c8 <_dtoa_r>
   13668:	ldr	r3, [sp, #28]
   1366a:	ldr.w	r1, [r8]
   1366e:	cmp	r0, r3
   13670:	rsb	r1, r1, #0
   13674:	bcs.n	136d4 <fcvtbuf+0xb4>
   13676:	subs	r1, r1, r5
   13678:	mov	r3, r5
   1367a:	ldrb.w	r2, [r0], #1
   1367e:	strb.w	r2, [r3], #1
   13682:	ldr	r2, [sp, #28]
   13684:	cmp	r2, r0
   13686:	add.w	r6, r3, r1
   1368a:	bhi.n	1367a <fcvtbuf+0x5a>
   1368c:	cmp	r4, r6
   1368e:	ble.n	136da <fcvtbuf+0xba>
   13690:	subs	r2, r4, r6
   13692:	add	r2, r3
   13694:	movs	r1, #48	; 0x30
   13696:	strb.w	r1, [r3], #1
   1369a:	cmp	r2, r3
   1369c:	bne.n	13696 <fcvtbuf+0x76>
   1369e:	movs	r3, #0
   136a0:	strb	r3, [r2, #0]
   136a2:	mov	r0, r5
   136a4:	add	sp, #32
   136a6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   136aa:	movs	r2, #0
   136ac:	ldr	r3, [pc, #88]	; (13708 <fcvtbuf+0xe8>)
   136ae:	mov	r0, r6
   136b0:	mov	r1, r7
   136b2:	bl	f3b4 <__aeabi_dcmpgt>
   136b6:	cmp	r0, #0
   136b8:	beq.n	13648 <fcvtbuf+0x28>
   136ba:	add.w	lr, sp, #28
   136be:	movs	r1, #2
   136c0:	b.n	1364e <fcvtbuf+0x2e>
   136c2:	ldr.w	r2, [r9, #80]	; 0x50
   136c6:	add.w	r3, r4, #35	; 0x23
   136ca:	cmp	r2, r3
   136cc:	ble.n	136de <fcvtbuf+0xbe>
   136ce:	ldr.w	r5, [r9, #84]	; 0x54
   136d2:	b.n	1363a <fcvtbuf+0x1a>
   136d4:	mov	r6, r1
   136d6:	mov	r3, r5
   136d8:	b.n	1368c <fcvtbuf+0x6c>
   136da:	mov	r2, r3
   136dc:	b.n	1369e <fcvtbuf+0x7e>
   136de:	add.w	sl, r4, #36	; 0x24
   136e2:	mov	r2, sl
   136e4:	ldr.w	r1, [r9, #84]	; 0x54
   136e8:	mov	r0, r9
   136ea:	bl	10770 <_realloc_r>
   136ee:	mov	r5, r0
   136f0:	cmp	r0, #0
   136f2:	beq.n	136a2 <fcvtbuf+0x82>
   136f4:	str.w	sl, [r9, #80]	; 0x50
   136f8:	str.w	r0, [r9, #84]	; 0x54
   136fc:	b.n	1363a <fcvtbuf+0x1a>
   136fe:	nop
   13700:	.word	0x1fff9190
   13704:	.word	0x3ff00000
   13708:	.word	0xbff00000

0001370c <__libc_fini_array>:
   1370c:	push	{r3, r4, r5, lr}
   1370e:	ldr	r5, [pc, #28]	; (1372c <__libc_fini_array+0x20>)
   13710:	ldr	r4, [pc, #28]	; (13730 <__libc_fini_array+0x24>)
   13712:	subs	r4, r5, r4
   13714:	asrs	r4, r4, #2
   13716:	beq.n	13724 <__libc_fini_array+0x18>
   13718:	subs	r4, #1
   1371a:	ldr.w	r3, [r5, #-4]!
   1371e:	blx	r3
   13720:	cmp	r4, #0
   13722:	bne.n	13718 <__libc_fini_array+0xc>
   13724:	ldmia.w	sp!, {r3, r4, r5, lr}
   13728:	b.w	14b8c <__init_array_end>
	...

00013734 <_malloc_trim_r>:
   13734:	push	{r3, r4, r5, r6, r7, lr}
   13736:	ldr	r7, [pc, #140]	; (137c4 <_malloc_trim_r+0x90>)
   13738:	mov	r4, r1
   1373a:	mov	r6, r0
   1373c:	bl	10768 <__malloc_lock>
   13740:	ldr	r3, [r7, #8]
   13742:	ldr	r5, [r3, #4]
   13744:	bic.w	r5, r5, #3
   13748:	subs	r1, r5, r4
   1374a:	addw	r1, r1, #4079	; 0xfef
   1374e:	bic.w	r1, r1, #4080	; 0xff0
   13752:	bic.w	r1, r1, #15
   13756:	sub.w	r4, r1, #4096	; 0x1000
   1375a:	cmp.w	r4, #4096	; 0x1000
   1375e:	blt.n	13770 <_malloc_trim_r+0x3c>
   13760:	movs	r1, #0
   13762:	mov	r0, r6
   13764:	bl	10b50 <_sbrk_r>
   13768:	ldr	r3, [r7, #8]
   1376a:	add	r3, r5
   1376c:	cmp	r0, r3
   1376e:	beq.n	1377a <_malloc_trim_r+0x46>
   13770:	mov	r0, r6
   13772:	bl	1076c <__malloc_unlock>
   13776:	movs	r0, #0
   13778:	pop	{r3, r4, r5, r6, r7, pc}
   1377a:	negs	r1, r4
   1377c:	mov	r0, r6
   1377e:	bl	10b50 <_sbrk_r>
   13782:	adds	r0, #1
   13784:	beq.n	137a2 <_malloc_trim_r+0x6e>
   13786:	ldr	r3, [pc, #64]	; (137c8 <_malloc_trim_r+0x94>)
   13788:	ldr	r2, [r7, #8]
   1378a:	ldr	r1, [r3, #0]
   1378c:	subs	r5, r5, r4
   1378e:	orr.w	r5, r5, #1
   13792:	mov	r0, r6
   13794:	subs	r1, r1, r4
   13796:	str	r5, [r2, #4]
   13798:	str	r1, [r3, #0]
   1379a:	bl	1076c <__malloc_unlock>
   1379e:	movs	r0, #1
   137a0:	pop	{r3, r4, r5, r6, r7, pc}
   137a2:	movs	r1, #0
   137a4:	mov	r0, r6
   137a6:	bl	10b50 <_sbrk_r>
   137aa:	ldr	r2, [r7, #8]
   137ac:	subs	r3, r0, r2
   137ae:	cmp	r3, #15
   137b0:	ble.n	13770 <_malloc_trim_r+0x3c>
   137b2:	ldr	r4, [pc, #24]	; (137cc <_malloc_trim_r+0x98>)
   137b4:	ldr	r1, [pc, #16]	; (137c8 <_malloc_trim_r+0x94>)
   137b6:	ldr	r4, [r4, #0]
   137b8:	orr.w	r3, r3, #1
   137bc:	subs	r0, r0, r4
   137be:	str	r3, [r2, #4]
   137c0:	str	r0, [r1, #0]
   137c2:	b.n	13770 <_malloc_trim_r+0x3c>
   137c4:	.word	0x1fff9300
   137c8:	.word	0x200031f0
   137cc:	.word	0x1fff970c

000137d0 <_free_r>:
   137d0:	cmp	r1, #0
   137d2:	beq.n	13860 <_free_r+0x90>
   137d4:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   137d8:	mov	r5, r1
   137da:	mov	r8, r0
   137dc:	bl	10768 <__malloc_lock>
   137e0:	ldr.w	r7, [r5, #-4]
   137e4:	ldr	r1, [pc, #424]	; (13990 <_free_r+0x1c0>)
   137e6:	bic.w	r3, r7, #1
   137ea:	sub.w	r4, r5, #8
   137ee:	adds	r2, r4, r3
   137f0:	ldr	r6, [r1, #8]
   137f2:	ldr	r0, [r2, #4]
   137f4:	cmp	r2, r6
   137f6:	bic.w	r0, r0, #3
   137fa:	beq.n	138c2 <_free_r+0xf2>
   137fc:	lsls	r6, r7, #31
   137fe:	str	r0, [r2, #4]
   13800:	bmi.n	1381a <_free_r+0x4a>
   13802:	ldr.w	r7, [r5, #-8]
   13806:	subs	r4, r4, r7
   13808:	add.w	lr, r1, #8
   1380c:	ldr	r5, [r4, #8]
   1380e:	cmp	r5, lr
   13810:	add	r3, r7
   13812:	beq.n	138f4 <_free_r+0x124>
   13814:	ldr	r7, [r4, #12]
   13816:	str	r7, [r5, #12]
   13818:	str	r5, [r7, #8]
   1381a:	adds	r5, r2, r0
   1381c:	ldr	r5, [r5, #4]
   1381e:	lsls	r5, r5, #31
   13820:	bpl.n	138a8 <_free_r+0xd8>
   13822:	orr.w	r2, r3, #1
   13826:	str	r2, [r4, #4]
   13828:	str	r3, [r4, r3]
   1382a:	cmp.w	r3, #512	; 0x200
   1382e:	bcs.n	13862 <_free_r+0x92>
   13830:	lsrs	r3, r3, #3
   13832:	adds	r2, r3, #1
   13834:	ldr	r5, [r1, #4]
   13836:	ldr.w	r7, [r1, r2, lsl #3]
   1383a:	str	r7, [r4, #8]
   1383c:	movs	r0, #1
   1383e:	asrs	r3, r3, #2
   13840:	lsl.w	r3, r0, r3
   13844:	add.w	r0, r1, r2, lsl #3
   13848:	orrs	r5, r3
   1384a:	subs	r0, #8
   1384c:	str	r0, [r4, #12]
   1384e:	str	r5, [r1, #4]
   13850:	str.w	r4, [r1, r2, lsl #3]
   13854:	str	r4, [r7, #12]
   13856:	mov	r0, r8
   13858:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1385c:	b.w	1076c <__malloc_unlock>
   13860:	bx	lr
   13862:	lsrs	r2, r3, #9
   13864:	cmp	r2, #4
   13866:	bhi.n	13910 <_free_r+0x140>
   13868:	lsrs	r2, r3, #6
   1386a:	add.w	r7, r2, #57	; 0x39
   1386e:	lsls	r7, r7, #1
   13870:	add.w	r5, r2, #56	; 0x38
   13874:	add.w	r0, r1, r7, lsl #2
   13878:	ldr.w	r2, [r1, r7, lsl #2]
   1387c:	ldr	r1, [pc, #272]	; (13990 <_free_r+0x1c0>)
   1387e:	subs	r0, #8
   13880:	cmp	r0, r2
   13882:	beq.n	13920 <_free_r+0x150>
   13884:	ldr	r1, [r2, #4]
   13886:	bic.w	r1, r1, #3
   1388a:	cmp	r3, r1
   1388c:	bcs.n	13894 <_free_r+0xc4>
   1388e:	ldr	r2, [r2, #8]
   13890:	cmp	r0, r2
   13892:	bne.n	13884 <_free_r+0xb4>
   13894:	ldr	r0, [r2, #12]
   13896:	str	r0, [r4, #12]
   13898:	str	r2, [r4, #8]
   1389a:	str	r4, [r0, #8]
   1389c:	str	r4, [r2, #12]
   1389e:	mov	r0, r8
   138a0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   138a4:	b.w	1076c <__malloc_unlock>
   138a8:	ldr	r5, [r2, #8]
   138aa:	ldr	r7, [pc, #232]	; (13994 <_free_r+0x1c4>)
   138ac:	cmp	r5, r7
   138ae:	add	r3, r0
   138b0:	beq.n	13932 <_free_r+0x162>
   138b2:	ldr	r0, [r2, #12]
   138b4:	str	r0, [r5, #12]
   138b6:	orr.w	r2, r3, #1
   138ba:	str	r5, [r0, #8]
   138bc:	str	r2, [r4, #4]
   138be:	str	r3, [r4, r3]
   138c0:	b.n	1382a <_free_r+0x5a>
   138c2:	lsls	r7, r7, #31
   138c4:	add	r3, r0
   138c6:	bmi.n	138d8 <_free_r+0x108>
   138c8:	ldr.w	r2, [r5, #-8]
   138cc:	subs	r4, r4, r2
   138ce:	add	r3, r2
   138d0:	ldr	r0, [r4, #8]
   138d2:	ldr	r2, [r4, #12]
   138d4:	str	r2, [r0, #12]
   138d6:	str	r0, [r2, #8]
   138d8:	ldr	r2, [pc, #188]	; (13998 <_free_r+0x1c8>)
   138da:	ldr	r2, [r2, #0]
   138dc:	orr.w	r0, r3, #1
   138e0:	cmp	r3, r2
   138e2:	str	r0, [r4, #4]
   138e4:	str	r4, [r1, #8]
   138e6:	bcc.n	13856 <_free_r+0x86>
   138e8:	ldr	r3, [pc, #176]	; (1399c <_free_r+0x1cc>)
   138ea:	mov	r0, r8
   138ec:	ldr	r1, [r3, #0]
   138ee:	bl	13734 <_malloc_trim_r>
   138f2:	b.n	13856 <_free_r+0x86>
   138f4:	adds	r1, r2, r0
   138f6:	ldr	r1, [r1, #4]
   138f8:	lsls	r1, r1, #31
   138fa:	bmi.n	13986 <_free_r+0x1b6>
   138fc:	ldr	r1, [r2, #8]
   138fe:	ldr	r2, [r2, #12]
   13900:	str	r2, [r1, #12]
   13902:	add	r3, r0
   13904:	orr.w	r0, r3, #1
   13908:	str	r1, [r2, #8]
   1390a:	str	r0, [r4, #4]
   1390c:	str	r3, [r4, r3]
   1390e:	b.n	13856 <_free_r+0x86>
   13910:	cmp	r2, #20
   13912:	bhi.n	13944 <_free_r+0x174>
   13914:	add.w	r7, r2, #92	; 0x5c
   13918:	lsls	r7, r7, #1
   1391a:	add.w	r5, r2, #91	; 0x5b
   1391e:	b.n	13874 <_free_r+0xa4>
   13920:	asrs	r2, r5, #2
   13922:	ldr	r3, [r1, #4]
   13924:	movs	r5, #1
   13926:	lsl.w	r2, r5, r2
   1392a:	orrs	r3, r2
   1392c:	str	r3, [r1, #4]
   1392e:	mov	r2, r0
   13930:	b.n	13896 <_free_r+0xc6>
   13932:	orr.w	r2, r3, #1
   13936:	str	r4, [r1, #20]
   13938:	str	r4, [r1, #16]
   1393a:	str	r5, [r4, #12]
   1393c:	str	r5, [r4, #8]
   1393e:	str	r2, [r4, #4]
   13940:	str	r3, [r4, r3]
   13942:	b.n	13856 <_free_r+0x86>
   13944:	cmp	r2, #84	; 0x54
   13946:	bhi.n	13956 <_free_r+0x186>
   13948:	lsrs	r2, r3, #12
   1394a:	add.w	r7, r2, #111	; 0x6f
   1394e:	lsls	r7, r7, #1
   13950:	add.w	r5, r2, #110	; 0x6e
   13954:	b.n	13874 <_free_r+0xa4>
   13956:	cmp.w	r2, #340	; 0x154
   1395a:	bhi.n	1396a <_free_r+0x19a>
   1395c:	lsrs	r2, r3, #15
   1395e:	add.w	r7, r2, #120	; 0x78
   13962:	lsls	r7, r7, #1
   13964:	add.w	r5, r2, #119	; 0x77
   13968:	b.n	13874 <_free_r+0xa4>
   1396a:	movw	r0, #1364	; 0x554
   1396e:	cmp	r2, r0
   13970:	bhi.n	13980 <_free_r+0x1b0>
   13972:	lsrs	r2, r3, #18
   13974:	add.w	r7, r2, #125	; 0x7d
   13978:	lsls	r7, r7, #1
   1397a:	add.w	r5, r2, #124	; 0x7c
   1397e:	b.n	13874 <_free_r+0xa4>
   13980:	movs	r7, #254	; 0xfe
   13982:	movs	r5, #126	; 0x7e
   13984:	b.n	13874 <_free_r+0xa4>
   13986:	orr.w	r2, r3, #1
   1398a:	str	r2, [r4, #4]
   1398c:	str	r3, [r4, r3]
   1398e:	b.n	13856 <_free_r+0x86>
   13990:	.word	0x1fff9300
   13994:	.word	0x1fff9308
   13998:	.word	0x1fff9708
   1399c:	.word	0x200031ec

000139a0 <_localeconv_r>:
   139a0:	ldr	r2, [pc, #16]	; (139b4 <_localeconv_r+0x14>)
   139a2:	ldr	r3, [pc, #20]	; (139b8 <_localeconv_r+0x18>)
   139a4:	ldr	r2, [r2, #0]
   139a6:	ldr	r0, [r2, #52]	; 0x34
   139a8:	cmp	r0, #0
   139aa:	it	eq
   139ac:	moveq	r0, r3
   139ae:	adds	r0, #240	; 0xf0
   139b0:	bx	lr
   139b2:	nop
   139b4:	.word	0x1fff9190
   139b8:	.word	0x1fff9194

000139bc <_Balloc>:
   139bc:	ldr	r3, [r0, #76]	; 0x4c
   139be:	push	{r4, r5, r6, lr}
   139c0:	mov	r5, r0
   139c2:	mov	r4, r1
   139c4:	cbz	r3, 139da <_Balloc+0x1e>
   139c6:	ldr.w	r0, [r3, r4, lsl #2]
   139ca:	cbz	r0, 139ee <_Balloc+0x32>
   139cc:	ldr	r2, [r0, #0]
   139ce:	str.w	r2, [r3, r4, lsl #2]
   139d2:	movs	r3, #0
   139d4:	str	r3, [r0, #16]
   139d6:	str	r3, [r0, #12]
   139d8:	pop	{r4, r5, r6, pc}
   139da:	movs	r2, #33	; 0x21
   139dc:	movs	r1, #4
   139de:	bl	fe5c <_calloc_r>
   139e2:	str	r0, [r5, #76]	; 0x4c
   139e4:	mov	r3, r0
   139e6:	cmp	r0, #0
   139e8:	bne.n	139c6 <_Balloc+0xa>
   139ea:	movs	r0, #0
   139ec:	pop	{r4, r5, r6, pc}
   139ee:	movs	r1, #1
   139f0:	lsl.w	r6, r1, r4
   139f4:	adds	r2, r6, #5
   139f6:	mov	r0, r5
   139f8:	lsls	r2, r2, #2
   139fa:	bl	fe5c <_calloc_r>
   139fe:	cmp	r0, #0
   13a00:	beq.n	139ea <_Balloc+0x2e>
   13a02:	str	r4, [r0, #4]
   13a04:	str	r6, [r0, #8]
   13a06:	b.n	139d2 <_Balloc+0x16>

00013a08 <_Bfree>:
   13a08:	cbz	r1, 13a18 <_Bfree+0x10>
   13a0a:	ldr	r3, [r0, #76]	; 0x4c
   13a0c:	ldr	r2, [r1, #4]
   13a0e:	ldr.w	r0, [r3, r2, lsl #2]
   13a12:	str	r0, [r1, #0]
   13a14:	str.w	r1, [r3, r2, lsl #2]
   13a18:	bx	lr
   13a1a:	nop

00013a1c <__multadd>:
   13a1c:	push	{r4, r5, r6, r7, lr}
   13a1e:	ldr	r4, [r1, #16]
   13a20:	sub	sp, #12
   13a22:	mov	r5, r1
   13a24:	mov	r6, r0
   13a26:	add.w	lr, r1, #20
   13a2a:	movs	r7, #0
   13a2c:	ldr.w	r0, [lr]
   13a30:	uxth	r1, r0
   13a32:	mla	r1, r2, r1, r3
   13a36:	lsrs	r3, r1, #16
   13a38:	lsrs	r0, r0, #16
   13a3a:	mla	r3, r2, r0, r3
   13a3e:	uxth	r1, r1
   13a40:	adds	r7, #1
   13a42:	add.w	r1, r1, r3, lsl #16
   13a46:	cmp	r4, r7
   13a48:	str.w	r1, [lr], #4
   13a4c:	mov.w	r3, r3, lsr #16
   13a50:	bgt.n	13a2c <__multadd+0x10>
   13a52:	cbz	r3, 13a64 <__multadd+0x48>
   13a54:	ldr	r2, [r5, #8]
   13a56:	cmp	r4, r2
   13a58:	bge.n	13a6a <__multadd+0x4e>
   13a5a:	add.w	r2, r5, r4, lsl #2
   13a5e:	adds	r4, #1
   13a60:	str	r3, [r2, #20]
   13a62:	str	r4, [r5, #16]
   13a64:	mov	r0, r5
   13a66:	add	sp, #12
   13a68:	pop	{r4, r5, r6, r7, pc}
   13a6a:	ldr	r1, [r5, #4]
   13a6c:	str	r3, [sp, #4]
   13a6e:	adds	r1, #1
   13a70:	mov	r0, r6
   13a72:	bl	139bc <_Balloc>
   13a76:	ldr	r2, [r5, #16]
   13a78:	adds	r2, #2
   13a7a:	add.w	r1, r5, #12
   13a7e:	mov	r7, r0
   13a80:	lsls	r2, r2, #2
   13a82:	adds	r0, #12
   13a84:	bl	cb00 <memcpy>
   13a88:	ldr	r2, [r6, #76]	; 0x4c
   13a8a:	ldr	r1, [r5, #4]
   13a8c:	ldr	r3, [sp, #4]
   13a8e:	ldr.w	r0, [r2, r1, lsl #2]
   13a92:	str	r0, [r5, #0]
   13a94:	str.w	r5, [r2, r1, lsl #2]
   13a98:	mov	r5, r7
   13a9a:	b.n	13a5a <__multadd+0x3e>

00013a9c <__hi0bits>:
   13a9c:	lsrs	r3, r0, #16
   13a9e:	lsls	r3, r3, #16
   13aa0:	cbnz	r3, 13ad0 <__hi0bits+0x34>
   13aa2:	lsls	r0, r0, #16
   13aa4:	movs	r3, #16
   13aa6:	tst.w	r0, #4278190080	; 0xff000000
   13aaa:	itt	eq
   13aac:	lsleq	r0, r0, #8
   13aae:	addeq	r3, #8
   13ab0:	tst.w	r0, #4026531840	; 0xf0000000
   13ab4:	itt	eq
   13ab6:	lsleq	r0, r0, #4
   13ab8:	addeq	r3, #4
   13aba:	tst.w	r0, #3221225472	; 0xc0000000
   13abe:	itt	eq
   13ac0:	lsleq	r0, r0, #2
   13ac2:	addeq	r3, #2
   13ac4:	cmp	r0, #0
   13ac6:	blt.n	13ad8 <__hi0bits+0x3c>
   13ac8:	lsls	r2, r0, #1
   13aca:	bmi.n	13ad4 <__hi0bits+0x38>
   13acc:	movs	r0, #32
   13ace:	bx	lr
   13ad0:	movs	r3, #0
   13ad2:	b.n	13aa6 <__hi0bits+0xa>
   13ad4:	adds	r0, r3, #1
   13ad6:	bx	lr
   13ad8:	mov	r0, r3
   13ada:	bx	lr

00013adc <__lo0bits>:
   13adc:	ldr	r3, [r0, #0]
   13ade:	ands.w	r2, r3, #7
   13ae2:	beq.n	13af4 <__lo0bits+0x18>
   13ae4:	lsls	r1, r3, #31
   13ae6:	bmi.n	13b2a <__lo0bits+0x4e>
   13ae8:	lsls	r2, r3, #30
   13aea:	bmi.n	13b2e <__lo0bits+0x52>
   13aec:	lsrs	r3, r3, #2
   13aee:	str	r3, [r0, #0]
   13af0:	movs	r0, #2
   13af2:	bx	lr
   13af4:	uxth	r1, r3
   13af6:	cbnz	r1, 13afc <__lo0bits+0x20>
   13af8:	lsrs	r3, r3, #16
   13afa:	movs	r2, #16
   13afc:	tst.w	r3, #255	; 0xff
   13b00:	itt	eq
   13b02:	lsreq	r3, r3, #8
   13b04:	addeq	r2, #8
   13b06:	lsls	r1, r3, #28
   13b08:	itt	eq
   13b0a:	lsreq	r3, r3, #4
   13b0c:	addeq	r2, #4
   13b0e:	lsls	r1, r3, #30
   13b10:	itt	eq
   13b12:	lsreq	r3, r3, #2
   13b14:	addeq	r2, #2
   13b16:	lsls	r1, r3, #31
   13b18:	bmi.n	13b24 <__lo0bits+0x48>
   13b1a:	lsrs	r3, r3, #1
   13b1c:	bne.n	13b22 <__lo0bits+0x46>
   13b1e:	movs	r0, #32
   13b20:	bx	lr
   13b22:	adds	r2, #1
   13b24:	str	r3, [r0, #0]
   13b26:	mov	r0, r2
   13b28:	bx	lr
   13b2a:	movs	r0, #0
   13b2c:	bx	lr
   13b2e:	lsrs	r3, r3, #1
   13b30:	str	r3, [r0, #0]
   13b32:	movs	r0, #1
   13b34:	bx	lr
   13b36:	nop

00013b38 <__i2b>:
   13b38:	push	{r4, lr}
   13b3a:	mov	r4, r1
   13b3c:	movs	r1, #1
   13b3e:	bl	139bc <_Balloc>
   13b42:	movs	r2, #1
   13b44:	str	r4, [r0, #20]
   13b46:	str	r2, [r0, #16]
   13b48:	pop	{r4, pc}
   13b4a:	nop

00013b4c <__multiply>:
   13b4c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13b50:	ldr	r5, [r1, #16]
   13b52:	ldr	r7, [r2, #16]
   13b54:	cmp	r5, r7
   13b56:	sub	sp, #12
   13b58:	mov	r4, r1
   13b5a:	mov	r6, r2
   13b5c:	bge.n	13b68 <__multiply+0x1c>
   13b5e:	mov	r2, r5
   13b60:	mov	r4, r6
   13b62:	mov	r5, r7
   13b64:	mov	r6, r1
   13b66:	mov	r7, r2
   13b68:	ldr	r3, [r4, #8]
   13b6a:	ldr	r1, [r4, #4]
   13b6c:	add.w	r8, r5, r7
   13b70:	cmp	r8, r3
   13b72:	it	gt
   13b74:	addgt	r1, #1
   13b76:	bl	139bc <_Balloc>
   13b7a:	add.w	ip, r0, #20
   13b7e:	add.w	r9, ip, r8, lsl #2
   13b82:	cmp	ip, r9
   13b84:	str	r0, [sp, #0]
   13b86:	bcs.n	13b94 <__multiply+0x48>
   13b88:	mov	r3, ip
   13b8a:	movs	r1, #0
   13b8c:	str.w	r1, [r3], #4
   13b90:	cmp	r9, r3
   13b92:	bhi.n	13b8c <__multiply+0x40>
   13b94:	add.w	r2, r6, #20
   13b98:	add.w	sl, r2, r7, lsl #2
   13b9c:	add.w	r3, r4, #20
   13ba0:	cmp	r2, sl
   13ba2:	add.w	lr, r3, r5, lsl #2
   13ba6:	bcs.n	13c52 <__multiply+0x106>
   13ba8:	str.w	r9, [sp, #4]
   13bac:	mov	r9, r3
   13bae:	ldr.w	r3, [r2], #4
   13bb2:	uxth.w	fp, r3
   13bb6:	cmp.w	fp, #0
   13bba:	beq.n	13bfe <__multiply+0xb2>
   13bbc:	movs	r0, #0
   13bbe:	mov	r7, r9
   13bc0:	mov	r6, ip
   13bc2:	mov	r5, r0
   13bc4:	b.n	13bc8 <__multiply+0x7c>
   13bc6:	mov	r6, r3
   13bc8:	ldr.w	r4, [r7], #4
   13bcc:	ldr	r0, [r6, #0]
   13bce:	uxth	r1, r4
   13bd0:	uxth	r3, r0
   13bd2:	mla	r1, fp, r1, r3
   13bd6:	lsrs	r4, r4, #16
   13bd8:	lsrs	r0, r0, #16
   13bda:	adds	r3, r1, r5
   13bdc:	mla	r0, fp, r4, r0
   13be0:	add.w	r0, r0, r3, lsr #16
   13be4:	uxth	r1, r3
   13be6:	mov	r3, r6
   13be8:	orr.w	r1, r1, r0, lsl #16
   13bec:	cmp	lr, r7
   13bee:	mov.w	r5, r0, lsr #16
   13bf2:	str.w	r1, [r3], #4
   13bf6:	bhi.n	13bc6 <__multiply+0x7a>
   13bf8:	str	r5, [r6, #4]
   13bfa:	ldr.w	r3, [r2, #-4]
   13bfe:	movs.w	fp, r3, lsr #16
   13c02:	beq.n	13c46 <__multiply+0xfa>
   13c04:	ldr.w	r3, [ip]
   13c08:	mov	r7, ip
   13c0a:	mov	r0, r3
   13c0c:	mov	r5, r9
   13c0e:	movs	r1, #0
   13c10:	b.n	13c14 <__multiply+0xc8>
   13c12:	mov	r7, r6
   13c14:	ldrh	r4, [r5, #0]
   13c16:	lsrs	r0, r0, #16
   13c18:	mla	r0, fp, r4, r0
   13c1c:	add	r1, r0
   13c1e:	uxth	r4, r3
   13c20:	mov	r6, r7
   13c22:	orr.w	r3, r4, r1, lsl #16
   13c26:	str.w	r3, [r6], #4
   13c2a:	ldr	r0, [r7, #4]
   13c2c:	ldr.w	r4, [r5], #4
   13c30:	uxth	r3, r0
   13c32:	lsrs	r4, r4, #16
   13c34:	mla	r4, fp, r4, r3
   13c38:	add.w	r3, r4, r1, lsr #16
   13c3c:	cmp	lr, r5
   13c3e:	mov.w	r1, r3, lsr #16
   13c42:	bhi.n	13c12 <__multiply+0xc6>
   13c44:	str	r3, [r7, #4]
   13c46:	cmp	sl, r2
   13c48:	add.w	ip, ip, #4
   13c4c:	bhi.n	13bae <__multiply+0x62>
   13c4e:	ldr.w	r9, [sp, #4]
   13c52:	cmp.w	r8, #0
   13c56:	ble.n	13c70 <__multiply+0x124>
   13c58:	ldr.w	r3, [r9, #-4]
   13c5c:	sub.w	r9, r9, #4
   13c60:	cbz	r3, 13c6a <__multiply+0x11e>
   13c62:	b.n	13c70 <__multiply+0x124>
   13c64:	ldr.w	r3, [r9, #-4]!
   13c68:	cbnz	r3, 13c70 <__multiply+0x124>
   13c6a:	subs.w	r8, r8, #1
   13c6e:	bne.n	13c64 <__multiply+0x118>
   13c70:	ldr	r0, [sp, #0]
   13c72:	str.w	r8, [r0, #16]
   13c76:	add	sp, #12
   13c78:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00013c7c <__pow5mult>:
   13c7c:	ands.w	r3, r2, #3
   13c80:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13c84:	mov	r4, r2
   13c86:	mov	r7, r0
   13c88:	bne.n	13ce8 <__pow5mult+0x6c>
   13c8a:	mov	r6, r1
   13c8c:	asrs	r4, r4, #2
   13c8e:	beq.n	13cca <__pow5mult+0x4e>
   13c90:	ldr	r5, [r7, #72]	; 0x48
   13c92:	cbz	r5, 13cfa <__pow5mult+0x7e>
   13c94:	lsls	r3, r4, #31
   13c96:	mov.w	r8, #0
   13c9a:	bmi.n	13caa <__pow5mult+0x2e>
   13c9c:	asrs	r4, r4, #1
   13c9e:	beq.n	13cca <__pow5mult+0x4e>
   13ca0:	ldr	r0, [r5, #0]
   13ca2:	cbz	r0, 13cd0 <__pow5mult+0x54>
   13ca4:	mov	r5, r0
   13ca6:	lsls	r3, r4, #31
   13ca8:	bpl.n	13c9c <__pow5mult+0x20>
   13caa:	mov	r2, r5
   13cac:	mov	r1, r6
   13cae:	mov	r0, r7
   13cb0:	bl	13b4c <__multiply>
   13cb4:	cbz	r6, 13ce4 <__pow5mult+0x68>
   13cb6:	ldr	r2, [r6, #4]
   13cb8:	ldr	r3, [r7, #76]	; 0x4c
   13cba:	asrs	r4, r4, #1
   13cbc:	ldr.w	r1, [r3, r2, lsl #2]
   13cc0:	str	r1, [r6, #0]
   13cc2:	str.w	r6, [r3, r2, lsl #2]
   13cc6:	mov	r6, r0
   13cc8:	bne.n	13ca0 <__pow5mult+0x24>
   13cca:	mov	r0, r6
   13ccc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13cd0:	mov	r2, r5
   13cd2:	mov	r1, r5
   13cd4:	mov	r0, r7
   13cd6:	bl	13b4c <__multiply>
   13cda:	str	r0, [r5, #0]
   13cdc:	str.w	r8, [r0]
   13ce0:	mov	r5, r0
   13ce2:	b.n	13ca6 <__pow5mult+0x2a>
   13ce4:	mov	r6, r0
   13ce6:	b.n	13c9c <__pow5mult+0x20>
   13ce8:	subs	r2, r3, #1
   13cea:	ldr	r5, [pc, #44]	; (13d18 <__pow5mult+0x9c>)
   13cec:	movs	r3, #0
   13cee:	ldr.w	r2, [r5, r2, lsl #2]
   13cf2:	bl	13a1c <__multadd>
   13cf6:	mov	r6, r0
   13cf8:	b.n	13c8c <__pow5mult+0x10>
   13cfa:	movs	r1, #1
   13cfc:	mov	r0, r7
   13cfe:	bl	139bc <_Balloc>
   13d02:	movw	r1, #625	; 0x271
   13d06:	movs	r2, #1
   13d08:	movs	r3, #0
   13d0a:	str	r1, [r0, #20]
   13d0c:	str	r2, [r0, #16]
   13d0e:	mov	r5, r0
   13d10:	str	r0, [r7, #72]	; 0x48
   13d12:	str	r3, [r0, #0]
   13d14:	b.n	13c94 <__pow5mult+0x18>
   13d16:	nop
   13d18:	.word	0x00014af8

00013d1c <__lshift>:
   13d1c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   13d20:	mov	r9, r2
   13d22:	ldr	r2, [r1, #16]
   13d24:	ldr	r3, [r1, #8]
   13d26:	mov.w	r4, r9, asr #5
   13d2a:	add.w	r8, r4, r2
   13d2e:	add.w	r5, r8, #1
   13d32:	cmp	r5, r3
   13d34:	mov	r6, r1
   13d36:	mov	sl, r0
   13d38:	ldr	r1, [r1, #4]
   13d3a:	ble.n	13d46 <__lshift+0x2a>
   13d3c:	lsls	r3, r3, #1
   13d3e:	cmp	r5, r3
   13d40:	add.w	r1, r1, #1
   13d44:	bgt.n	13d3c <__lshift+0x20>
   13d46:	mov	r0, sl
   13d48:	bl	139bc <_Balloc>
   13d4c:	cmp	r4, #0
   13d4e:	add.w	r2, r0, #20
   13d52:	ble.n	13dc6 <__lshift+0xaa>
   13d54:	add.w	r3, r2, r4, lsl #2
   13d58:	movs	r1, #0
   13d5a:	str.w	r1, [r2], #4
   13d5e:	cmp	r3, r2
   13d60:	bne.n	13d5a <__lshift+0x3e>
   13d62:	ldr	r4, [r6, #16]
   13d64:	add.w	r1, r6, #20
   13d68:	ands.w	r9, r9, #31
   13d6c:	add.w	lr, r1, r4, lsl #2
   13d70:	beq.n	13db6 <__lshift+0x9a>
   13d72:	rsb	r2, r9, #32
   13d76:	movs	r4, #0
   13d78:	ldr	r7, [r1, #0]
   13d7a:	lsl.w	ip, r7, r9
   13d7e:	orr.w	r4, ip, r4
   13d82:	mov	ip, r3
   13d84:	str.w	r4, [r3], #4
   13d88:	ldr.w	r4, [r1], #4
   13d8c:	cmp	lr, r1
   13d8e:	lsr.w	r4, r4, r2
   13d92:	bhi.n	13d78 <__lshift+0x5c>
   13d94:	str.w	r4, [ip, #4]
   13d98:	cbz	r4, 13d9e <__lshift+0x82>
   13d9a:	add.w	r5, r8, #2
   13d9e:	ldr.w	r3, [sl, #76]	; 0x4c
   13da2:	ldr	r2, [r6, #4]
   13da4:	subs	r5, #1
   13da6:	ldr.w	r1, [r3, r2, lsl #2]
   13daa:	str	r5, [r0, #16]
   13dac:	str	r1, [r6, #0]
   13dae:	str.w	r6, [r3, r2, lsl #2]
   13db2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   13db6:	subs	r3, #4
   13db8:	ldr.w	r2, [r1], #4
   13dbc:	str.w	r2, [r3, #4]!
   13dc0:	cmp	lr, r1
   13dc2:	bhi.n	13db8 <__lshift+0x9c>
   13dc4:	b.n	13d9e <__lshift+0x82>
   13dc6:	mov	r3, r2
   13dc8:	b.n	13d62 <__lshift+0x46>
   13dca:	nop

00013dcc <__mcmp>:
   13dcc:	ldr	r2, [r0, #16]
   13dce:	ldr	r3, [r1, #16]
   13dd0:	subs	r2, r2, r3
   13dd2:	bne.n	13dfa <__mcmp+0x2e>
   13dd4:	lsls	r3, r3, #2
   13dd6:	adds	r0, #20
   13dd8:	adds	r1, #20
   13dda:	add	r1, r3
   13ddc:	push	{r4}
   13dde:	add	r3, r0
   13de0:	b.n	13de6 <__mcmp+0x1a>
   13de2:	cmp	r0, r3
   13de4:	bcs.n	13dfe <__mcmp+0x32>
   13de6:	ldr.w	r4, [r3, #-4]!
   13dea:	ldr.w	r2, [r1, #-4]!
   13dee:	cmp	r4, r2
   13df0:	beq.n	13de2 <__mcmp+0x16>
   13df2:	bcc.n	13e04 <__mcmp+0x38>
   13df4:	movs	r0, #1
   13df6:	pop	{r4}
   13df8:	bx	lr
   13dfa:	mov	r0, r2
   13dfc:	bx	lr
   13dfe:	movs	r0, #0
   13e00:	pop	{r4}
   13e02:	bx	lr
   13e04:	mov.w	r0, #4294967295
   13e08:	b.n	13df6 <__mcmp+0x2a>
   13e0a:	nop

00013e0c <__mdiff>:
   13e0c:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   13e10:	ldr	r3, [r1, #16]
   13e12:	mov	r7, r1
   13e14:	ldr	r1, [r2, #16]
   13e16:	subs	r3, r3, r1
   13e18:	cmp	r3, #0
   13e1a:	mov	r8, r2
   13e1c:	bne.n	13e4e <__mdiff+0x42>
   13e1e:	lsls	r1, r1, #2
   13e20:	add.w	r2, r7, #20
   13e24:	add.w	r5, r8, #20
   13e28:	adds	r3, r2, r1
   13e2a:	add	r1, r5
   13e2c:	b.n	13e32 <__mdiff+0x26>
   13e2e:	cmp	r2, r3
   13e30:	bcs.n	13ef0 <__mdiff+0xe4>
   13e32:	ldr.w	r6, [r3, #-4]!
   13e36:	ldr.w	r4, [r1, #-4]!
   13e3a:	cmp	r6, r4
   13e3c:	beq.n	13e2e <__mdiff+0x22>
   13e3e:	bcs.n	13f02 <__mdiff+0xf6>
   13e40:	mov	r3, r7
   13e42:	mov	r4, r2
   13e44:	mov	r7, r8
   13e46:	mov.w	r9, #1
   13e4a:	mov	r8, r3
   13e4c:	b.n	13e5c <__mdiff+0x50>
   13e4e:	blt.n	13f0c <__mdiff+0x100>
   13e50:	add.w	r5, r7, #20
   13e54:	add.w	r4, r2, #20
   13e58:	mov.w	r9, #0
   13e5c:	ldr	r1, [r7, #4]
   13e5e:	bl	139bc <_Balloc>
   13e62:	ldr.w	r3, [r8, #16]
   13e66:	ldr	r6, [r7, #16]
   13e68:	str.w	r9, [r0, #12]
   13e6c:	add.w	ip, r4, r3, lsl #2
   13e70:	mov	lr, r4
   13e72:	add.w	r7, r5, r6, lsl #2
   13e76:	add.w	r4, r0, #20
   13e7a:	movs	r3, #0
   13e7c:	ldr.w	r1, [lr], #4
   13e80:	ldr.w	r8, [r5], #4
   13e84:	uxth	r2, r1
   13e86:	uxtah	r3, r3, r8
   13e8a:	lsrs	r1, r1, #16
   13e8c:	subs	r2, r3, r2
   13e8e:	rsb	r3, r1, r8, lsr #16
   13e92:	add.w	r3, r3, r2, asr #16
   13e96:	uxth	r2, r2
   13e98:	orr.w	r2, r2, r3, lsl #16
   13e9c:	cmp	ip, lr
   13e9e:	str.w	r2, [r4], #4
   13ea2:	mov.w	r3, r3, asr #16
   13ea6:	bhi.n	13e7c <__mdiff+0x70>
   13ea8:	cmp	r7, r5
   13eaa:	bls.n	13edc <__mdiff+0xd0>
   13eac:	mov	ip, r4
   13eae:	mov	r1, r5
   13eb0:	ldr.w	lr, [r1], #4
   13eb4:	uxtah	r2, r3, lr
   13eb8:	asrs	r3, r2, #16
   13eba:	add.w	r3, r3, lr, lsr #16
   13ebe:	uxth	r2, r2
   13ec0:	orr.w	r2, r2, r3, lsl #16
   13ec4:	cmp	r7, r1
   13ec6:	str.w	r2, [ip], #4
   13eca:	mov.w	r3, r3, asr #16
   13ece:	bhi.n	13eb0 <__mdiff+0xa4>
   13ed0:	mvns	r5, r5
   13ed2:	add	r5, r7
   13ed4:	bic.w	r5, r5, #3
   13ed8:	adds	r5, #4
   13eda:	add	r4, r5
   13edc:	subs	r4, #4
   13ede:	cbnz	r2, 13eea <__mdiff+0xde>
   13ee0:	ldr.w	r3, [r4, #-4]!
   13ee4:	subs	r6, #1
   13ee6:	cmp	r3, #0
   13ee8:	beq.n	13ee0 <__mdiff+0xd4>
   13eea:	str	r6, [r0, #16]
   13eec:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   13ef0:	movs	r1, #0
   13ef2:	bl	139bc <_Balloc>
   13ef6:	movs	r2, #1
   13ef8:	movs	r3, #0
   13efa:	str	r2, [r0, #16]
   13efc:	str	r3, [r0, #20]
   13efe:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   13f02:	mov	r4, r5
   13f04:	mov.w	r9, #0
   13f08:	mov	r5, r2
   13f0a:	b.n	13e5c <__mdiff+0x50>
   13f0c:	mov	r3, r7
   13f0e:	add.w	r4, r7, #20
   13f12:	add.w	r5, r8, #20
   13f16:	mov	r7, r8
   13f18:	mov.w	r9, #1
   13f1c:	mov	r8, r3
   13f1e:	b.n	13e5c <__mdiff+0x50>

00013f20 <__d2b>:
   13f20:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13f24:	sub	sp, #8
   13f26:	movs	r1, #1
   13f28:	mov	r4, r3
   13f2a:	ubfx	r7, r3, #20, #11
   13f2e:	mov	r5, r2
   13f30:	ldr	r6, [sp, #32]
   13f32:	bl	139bc <_Balloc>
   13f36:	ubfx	r4, r4, #0, #20
   13f3a:	mov	r8, r0
   13f3c:	cbz	r7, 13f42 <__d2b+0x22>
   13f3e:	orr.w	r4, r4, #1048576	; 0x100000
   13f42:	str	r4, [sp, #4]
   13f44:	cbz	r5, 13f8e <__d2b+0x6e>
   13f46:	add	r0, sp, #8
   13f48:	str.w	r5, [r0, #-8]!
   13f4c:	bl	13adc <__lo0bits>
   13f50:	cmp	r0, #0
   13f52:	bne.n	13fbe <__d2b+0x9e>
   13f54:	ldmia.w	sp, {r2, r3}
   13f58:	str.w	r2, [r8, #20]
   13f5c:	cmp	r3, #0
   13f5e:	ite	eq
   13f60:	moveq	r1, #1
   13f62:	movne	r1, #2
   13f64:	str.w	r3, [r8, #24]
   13f68:	str.w	r1, [r8, #16]
   13f6c:	cbnz	r7, 13fa6 <__d2b+0x86>
   13f6e:	add.w	r3, r8, r1, lsl #2
   13f72:	subw	r0, r0, #1074	; 0x432
   13f76:	str	r0, [r6, #0]
   13f78:	ldr	r0, [r3, #16]
   13f7a:	bl	13a9c <__hi0bits>
   13f7e:	ldr	r3, [sp, #36]	; 0x24
   13f80:	rsb	r0, r0, r1, lsl #5
   13f84:	str	r0, [r3, #0]
   13f86:	mov	r0, r8
   13f88:	add	sp, #8
   13f8a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13f8e:	add	r0, sp, #4
   13f90:	bl	13adc <__lo0bits>
   13f94:	ldr	r3, [sp, #4]
   13f96:	str.w	r3, [r8, #20]
   13f9a:	movs	r1, #1
   13f9c:	adds	r0, #32
   13f9e:	str.w	r1, [r8, #16]
   13fa2:	cmp	r7, #0
   13fa4:	beq.n	13f6e <__d2b+0x4e>
   13fa6:	ldr	r3, [sp, #36]	; 0x24
   13fa8:	subw	r7, r7, #1075	; 0x433
   13fac:	add	r7, r0
   13fae:	rsb	r0, r0, #53	; 0x35
   13fb2:	str	r7, [r6, #0]
   13fb4:	str	r0, [r3, #0]
   13fb6:	mov	r0, r8
   13fb8:	add	sp, #8
   13fba:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13fbe:	ldmia.w	sp, {r2, r3}
   13fc2:	rsb	r1, r0, #32
   13fc6:	lsl.w	r1, r3, r1
   13fca:	orrs	r2, r1
   13fcc:	lsrs	r3, r0
   13fce:	str	r3, [sp, #4]
   13fd0:	str.w	r2, [r8, #20]
   13fd4:	b.n	13f5c <__d2b+0x3c>
   13fd6:	nop

00013fd8 <__ssprint_r>:
   13fd8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13fdc:	ldr	r3, [r2, #8]
   13fde:	sub	sp, #12
   13fe0:	mov	r8, r2
   13fe2:	cmp	r3, #0
   13fe4:	beq.n	140cc <__ssprint_r+0xf4>
   13fe6:	mov	fp, r0
   13fe8:	mov.w	r9, #0
   13fec:	ldr	r6, [r2, #0]
   13fee:	ldr	r0, [r1, #0]
   13ff0:	ldr	r3, [r1, #8]
   13ff2:	mov	r5, r1
   13ff4:	mov	r4, r9
   13ff6:	cmp	r4, #0
   13ff8:	beq.n	14086 <__ssprint_r+0xae>
   13ffa:	cmp	r4, r3
   13ffc:	mov	r7, r3
   13ffe:	mov	sl, r3
   14000:	bcc.n	14090 <__ssprint_r+0xb8>
   14002:	ldrh	r3, [r5, #12]
   14004:	tst.w	r3, #1152	; 0x480
   14008:	beq.n	14066 <__ssprint_r+0x8e>
   1400a:	ldr	r7, [r5, #20]
   1400c:	ldr	r1, [r5, #16]
   1400e:	add.w	r7, r7, r7, lsl #1
   14012:	rsb	sl, r1, r0
   14016:	add.w	r7, r7, r7, lsr #31
   1401a:	adds	r0, r4, #1
   1401c:	asrs	r7, r7, #1
   1401e:	add	r0, sl
   14020:	cmp	r0, r7
   14022:	mov	r2, r7
   14024:	itt	hi
   14026:	movhi	r7, r0
   14028:	movhi	r2, r7
   1402a:	lsls	r3, r3, #21
   1402c:	bpl.n	14096 <__ssprint_r+0xbe>
   1402e:	mov	r1, r2
   14030:	mov	r0, fp
   14032:	bl	ff64 <_malloc_r>
   14036:	cmp	r0, #0
   14038:	beq.n	140aa <__ssprint_r+0xd2>
   1403a:	mov	r2, sl
   1403c:	ldr	r1, [r5, #16]
   1403e:	str	r0, [sp, #4]
   14040:	bl	cb00 <memcpy>
   14044:	ldrh	r2, [r5, #12]
   14046:	ldr	r3, [sp, #4]
   14048:	bic.w	r2, r2, #1152	; 0x480
   1404c:	orr.w	r2, r2, #128	; 0x80
   14050:	strh	r2, [r5, #12]
   14052:	rsb	r2, sl, r7
   14056:	add.w	r0, r3, sl
   1405a:	str	r7, [r5, #20]
   1405c:	str	r3, [r5, #16]
   1405e:	str	r0, [r5, #0]
   14060:	str	r2, [r5, #8]
   14062:	mov	r7, r4
   14064:	mov	sl, r4
   14066:	mov	r2, sl
   14068:	mov	r1, r9
   1406a:	bl	10604 <memmove>
   1406e:	ldr.w	r2, [r8, #8]
   14072:	ldr	r3, [r5, #8]
   14074:	ldr	r0, [r5, #0]
   14076:	subs	r3, r3, r7
   14078:	add	r0, sl
   1407a:	subs	r4, r2, r4
   1407c:	str	r3, [r5, #8]
   1407e:	str	r0, [r5, #0]
   14080:	str.w	r4, [r8, #8]
   14084:	cbz	r4, 140cc <__ssprint_r+0xf4>
   14086:	ldr.w	r9, [r6]
   1408a:	ldr	r4, [r6, #4]
   1408c:	adds	r6, #8
   1408e:	b.n	13ff6 <__ssprint_r+0x1e>
   14090:	mov	r7, r4
   14092:	mov	sl, r4
   14094:	b.n	14066 <__ssprint_r+0x8e>
   14096:	mov	r0, fp
   14098:	bl	10770 <_realloc_r>
   1409c:	mov	r3, r0
   1409e:	cmp	r0, #0
   140a0:	bne.n	14052 <__ssprint_r+0x7a>
   140a2:	ldr	r1, [r5, #16]
   140a4:	mov	r0, fp
   140a6:	bl	137d0 <_free_r>
   140aa:	movs	r3, #12
   140ac:	str.w	r3, [fp]
   140b0:	ldrh	r3, [r5, #12]
   140b2:	movs	r2, #0
   140b4:	orr.w	r3, r3, #64	; 0x40
   140b8:	mov.w	r0, #4294967295
   140bc:	strh	r3, [r5, #12]
   140be:	str.w	r2, [r8, #8]
   140c2:	str.w	r2, [r8, #4]
   140c6:	add	sp, #12
   140c8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   140cc:	movs	r0, #0
   140ce:	str.w	r0, [r8, #4]
   140d2:	add	sp, #12
   140d4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000140d8 <_vasnprintf_r>:
   140d8:	push	{r4, r5, r6, lr}
   140da:	mov	r5, r2
   140dc:	sub	sp, #104	; 0x68
   140de:	ldr	r4, [r2, #0]
   140e0:	cbz	r1, 140e6 <_vasnprintf_r+0xe>
   140e2:	cmp	r4, #0
   140e4:	bne.n	1411c <_vasnprintf_r+0x44>
   140e6:	movs	r4, #0
   140e8:	mov.w	r2, #648	; 0x288
   140ec:	strh.w	r2, [sp, #12]
   140f0:	str	r4, [sp, #0]
   140f2:	str	r4, [sp, #16]
   140f4:	mov	r2, r3
   140f6:	movw	r6, #65535	; 0xffff
   140fa:	ldr	r3, [sp, #120]	; 0x78
   140fc:	str	r4, [sp, #8]
   140fe:	mov	r1, sp
   14100:	str	r4, [sp, #20]
   14102:	strh.w	r6, [sp, #14]
   14106:	bl	10e7c <_svfprintf_r>
   1410a:	cmp	r0, #0
   1410c:	blt.n	14132 <_vasnprintf_r+0x5a>
   1410e:	ldr	r3, [sp, #0]
   14110:	str	r0, [r5, #0]
   14112:	movs	r2, #0
   14114:	strb	r2, [r3, #0]
   14116:	ldr	r0, [sp, #16]
   14118:	add	sp, #104	; 0x68
   1411a:	pop	{r4, r5, r6, pc}
   1411c:	mov.w	r2, #1544	; 0x608
   14120:	str	r1, [sp, #0]
   14122:	str	r1, [sp, #16]
   14124:	strh.w	r2, [sp, #12]
   14128:	bge.n	140f4 <_vasnprintf_r+0x1c>
   1412a:	movs	r3, #139	; 0x8b
   1412c:	str	r3, [r0, #0]
   1412e:	movs	r0, #0
   14130:	b.n	14118 <_vasnprintf_r+0x40>
   14132:	movs	r0, #0
   14134:	b.n	14118 <_vasnprintf_r+0x40>
   14136:	nop

00014138 <vtable for Stream>:
	...
   14140:	........m...q...
   14150:	............

0001415c <vtable for StreamFile<FsBaseFile, unsigned long long>>:
	...
   14164:	E.......m...1...
   14174:	............

00014180 <vtable for FsFile>:
	...
   14188:	E.......m...1...
   14198:	............

000141a4 <vtable for File>:
	...
   141ac:	........m.......
   141bc:	....q...........
   141cc:	%.......u.......
   141dc:	................
   141ec:	............!...
   141fc:	-...e...

00014204 <vtable for SDFile>:
	...
   1420c:	........m.......
   1421c:	....q...=.......
   1422c:	........%.......
   1423c:	................
   1424c:	........Q.......
   1425c:	%...}...

00014264 <vtable for SDClass>:
	...
   1426c:	....1...........
   1427c:	....5.......U...
   1428c:	  File    this=%
   1429c:	x, f=%x.....   S
   142ac:	DFile this=%x, r
   142bc:	efcount=%u..%s: 
   142cc:	%6d %4d; %4d %4d
   142dc:	; %4d...SD Stora
   142ec:	ge %d %d %s fail
   142fc:	ed or missing...
   1430c:	SD Storage %d %d
   1431c:	 %s .....Start..
   1432c:	.Stop...Reset...
   1433c:	Now: %04d-%02d-%
   1434c:	02d_%02d:%02d:%0
   1435c:	2d......WMXZ....
   1436c:	/%d/%02d_%02d_%0
   1437c:	2d.raw..%d %d %d
   1438c:	 %d %d %d %d....
   1439c:	loop....MTP logg
   143ac:	er..Setup done..
   143bc:	 Enter 's' to st
   143cc:	art, 'q' to stop
   143dc:	 acquisition and
   143ec:	 'r' to restart 
   143fc:	MTP.sd1.

00014404 <vtable for MTPStorage_SD>:
	...
   1440c:	!...9...=...M...
   1441c:	Y...E...I....:..
   1442c:	.(...)..=)...1..
   1443c:	q0..e...U)...C..
   1444c:	a.......U+...X..
   1445c:	iL..iM../mtpinde
   1446c:	x.dat...cannot o
   1447c:	pen Index file..
   1448c:	/...%s/%s...%d: 
   1449c:	%d %d %d %d %d %
   144ac:	s...%d: %d %d %d
   144bc:	 %d %d..

000144c4 <supported_op>:
   144c4:	................
   144d4:	................
   144e4:	........

000144ec <propertyList>:
   144ec:	............A.D.
   144fc:	Teensy..microsof
   1450c:	t.com: 1.0;.PJRC
   1451c:	.... / MTP 1.0..
   1452c:	%x %d %d %d: ...
   1453c:	 %x.Event: .

00014548 <supported_events>:
   14548:	.@.@.@.@

00014550 <SPISettings::ctar_div_table>:
   14550:	................
   14560:	...... .(.8.@.`.
   14570:	................

00014580 <SPISettings::ctar_clock_table>:
   14580:	................
   14590:	................
   145a0:	. ....... ...0..
   145b0:	. ... ...@...@..
   145c0:	.P...P...`...`..
   145d0:	.p...`...p..

000145dc <SPIClass::spi0_hardware>:
   145dc:	<..@............
   145ec:	....9y..........
   145fc:	........@.......
   1460c:	....@...........
   1461c:	................
   1462c:	................
   1463c:	................
   1464c:	........

00014654 <monthDays>:
   14654:	............

00014660 <vtable for AudioControlSGTL5000>:
	...
   14668:	....Y...u...]...
   14678:	....

0001467c <TwoWire::i2c0_hardware>:
   1467c:	4..@@...........
   1468c:	................

0001469c <TwoWire::i2c1_hardware>:
   1469c:	4..@............
   146ac:	................

000146bc <vtable for TwoWire>:
	...
   146c4:	E.......m.......
   146d4:	............EXFA
   146e4:	T...

000146e8 <usb_endpoint_config_table>:
   146e8:	........

000146f0 <usb_descriptor_list>:
   146f0:	....|...........
   14700:	....i...........
   14710:	........L.......
   14720:	................
   14730:	............P...
	...
   14750:	0...1...

00014758 <digital_pin_to_info_PGM>:
   14758:	@..C@..@D..CD..@
   14768:	...C...@0..C0..@
   14778:	4..C4..@...C...@
   14788:	...C...@...C...@
   14798:	...C...@...C...@
   147a8:	...C...@...C...@
   147b8:	...C...@...C...@
   147c8:	...C...@...C...@
   147d8:	...C...@...C...@
   147e8:	...C...@...C...@
   147f8:	...C...@...C...@
   14808:	...C...@...C...@
   14818:	...C...@L..CL..@
   14828:	. .C...@$..C$..@
   14838:	 ..C ..@(..C(..@
   14848:	,..C,..@. .C...@
   14858:	H..CH..@...C...@

00014868 <vtable for usb_serial_class>:
	...
   14870:	y...q...m...i...
   14880:	e...a...]...Y...
   14890:	....fmodf...

0001489c <Zero>:
   1489c:	........

000148a4 <_global_impure_ptr>:
   148a4:	h...C...POSIX...
   148b4:	....

000148b8 <zeroes.7256>:
   148b8:	0000000000000000
   148c8:	INF.inf.NAN.nan.
   148d8:	0123456789ABCDEF
   148e8:	....0123456789ab
   148f8:	cdef....(null)..

00014908 <blanks.7255>:
   14908:	                

00014918 <_ctype_>:
   14918:	.         ((((( 
   14928:	                
   14938:	 ...............
   14948:	................
   14958:	..AAAAAA........
   14968:	................
   14978:	..BBBBBB........
   14988:	................
   14998:	 ...............
	...
   14a18:	....Infinity....
   14a28:	NaN.....

00014a30 <__mprec_tens>:
   14a30:	.......?......$@
   14a40:	......Y@.....@.@
   14a50:	.......@.....j.@
   14a60:	.......A......cA
   14a70:	.......A....e..A
   14a80:	... _..B....vH7B
   14a90:	......mB..@..0.B
   14aa0:	.......B..4&.k.C
   14ab0:	...7y.AC....W4vC
   14ac0:	..Ngm..C.=.`.X.C
   14ad0:	@..x...DP.....KD
   14ae0:	..M....D.J...-.D
   14af0:	...yCx.D

00014af8 <p05.6085>:
   14af8:	........}.......

00014b08 <__mprec_bigtens>:
   14b08:	...7y.AC.n.....F
   14b18:	..?..O8M2.0.Hw.Z
   14b28:	<.s..O.u

00014b30 <_init>:
   14b30:	push	{r3, r4, r5, r6, r7, lr}
   14b32:	nop
   14b34:	pop	{r3, r4, r5, r6, r7}
   14b36:	pop	{r3}
   14b38:	mov	lr, r3
   14b3a:	bx	lr

00014b3c <__init_array_start>:
   14b3c:	.word	0x0001267d

00014b40 <__frame_dummy_init_array_entry>:
   14b40:	5...a...........
   14b50:	....)...A.......
   14b60:	................
   14b70:	1...I...a...y...
   14b80:	............

Disassembly of section .fini:

00014b8c <_fini>:
   14b8c:	push	{r3, r4, r5, r6, r7, lr}
   14b8e:	nop

Disassembly of section .data:

1fff8960 <port_E_isr>:
#if defined(KINETISK)
PORT_ISR_FUNCTION_CLZ(A)
PORT_ISR_FUNCTION_CLZ(B)
PORT_ISR_FUNCTION_CLZ(C)
PORT_ISR_FUNCTION_CLZ(D)
PORT_ISR_FUNCTION_CLZ(E)
1fff8960:	push	{r3, r4, r5, lr}
1fff8962:	ldr	r3, [pc, #32]	; (1fff8984 <port_E_isr+0x24>)
1fff8964:	ldr	r4, [r3, #0]
1fff8966:	str	r4, [r3, #0]
1fff8968:	cbz	r4, 1fff8980 <port_E_isr+0x20>
1fff896a:	ldr	r5, [pc, #28]	; (1fff8988 <port_E_isr+0x28>)
1fff896c:	rbit	r3, r4
1fff8970:	clz	r3, r3
1fff8974:	ldr.w	r3, [r5, r3, lsl #2]
1fff8978:	blx	r3
1fff897a:	subs	r3, r4, #1
1fff897c:	ands	r4, r3
1fff897e:	bne.n	1fff896c <port_E_isr+0xc>
1fff8980:	pop	{r3, r4, r5, pc}
1fff8982:	nop
1fff8984:	.word	0x4004d0a0
1fff8988:	.word	0x1fff8d40

1fff898c <port_D_isr>:

#if defined(KINETISK)
PORT_ISR_FUNCTION_CLZ(A)
PORT_ISR_FUNCTION_CLZ(B)
PORT_ISR_FUNCTION_CLZ(C)
PORT_ISR_FUNCTION_CLZ(D)
1fff898c:	push	{r3, r4, r5, lr}
1fff898e:	ldr	r3, [pc, #32]	; (1fff89b0 <port_D_isr+0x24>)
1fff8990:	ldr	r4, [r3, #0]
1fff8992:	str	r4, [r3, #0]
1fff8994:	cbz	r4, 1fff89ac <port_D_isr+0x20>
1fff8996:	ldr	r5, [pc, #28]	; (1fff89b4 <port_D_isr+0x28>)
1fff8998:	rbit	r3, r4
1fff899c:	clz	r3, r3
1fff89a0:	ldr.w	r3, [r5, r3, lsl #2]
1fff89a4:	blx	r3
1fff89a6:	subs	r3, r4, #1
1fff89a8:	ands	r4, r3
1fff89aa:	bne.n	1fff8998 <port_D_isr+0xc>
1fff89ac:	pop	{r3, r4, r5, pc}
1fff89ae:	nop
1fff89b0:	.word	0x4004c0a0
1fff89b4:	.word	0x1fff8d20

1fff89b8 <port_C_isr>:
// END PORT_ISR_FUNCTION_CLZ

#if defined(KINETISK)
PORT_ISR_FUNCTION_CLZ(A)
PORT_ISR_FUNCTION_CLZ(B)
PORT_ISR_FUNCTION_CLZ(C)
1fff89b8:	push	{r3, r4, r5, lr}
1fff89ba:	ldr	r3, [pc, #32]	; (1fff89dc <port_C_isr+0x24>)
1fff89bc:	ldr	r4, [r3, #0]
1fff89be:	str	r4, [r3, #0]
1fff89c0:	cbz	r4, 1fff89d8 <port_C_isr+0x20>
1fff89c2:	ldr	r5, [pc, #28]	; (1fff89e0 <port_C_isr+0x28>)
1fff89c4:	rbit	r3, r4
1fff89c8:	clz	r3, r3
1fff89cc:	ldr.w	r3, [r5, r3, lsl #2]
1fff89d0:	blx	r3
1fff89d2:	subs	r3, r4, #1
1fff89d4:	ands	r4, r3
1fff89d6:	bne.n	1fff89c4 <port_C_isr+0xc>
1fff89d8:	pop	{r3, r4, r5, pc}
1fff89da:	nop
1fff89dc:	.word	0x4004b0a0
1fff89e0:	.word	0x1fff8cf0

1fff89e4 <port_B_isr>:
	}
// END PORT_ISR_FUNCTION_CLZ

#if defined(KINETISK)
PORT_ISR_FUNCTION_CLZ(A)
PORT_ISR_FUNCTION_CLZ(B)
1fff89e4:	push	{r3, r4, r5, lr}
1fff89e6:	ldr	r3, [pc, #32]	; (1fff8a08 <port_B_isr+0x24>)
1fff89e8:	ldr	r4, [r3, #0]
1fff89ea:	str	r4, [r3, #0]
1fff89ec:	cbz	r4, 1fff8a04 <port_B_isr+0x20>
1fff89ee:	ldr	r5, [pc, #28]	; (1fff8a0c <port_B_isr+0x28>)
1fff89f0:	rbit	r3, r4
1fff89f4:	clz	r3, r3
1fff89f8:	ldr.w	r3, [r5, r3, lsl #2]
1fff89fc:	blx	r3
1fff89fe:	subs	r3, r4, #1
1fff8a00:	ands	r4, r3
1fff8a02:	bne.n	1fff89f0 <port_B_isr+0xc>
1fff8a04:	pop	{r3, r4, r5, pc}
1fff8a06:	nop
1fff8a08:	.word	0x4004a0a0
1fff8a0c:	.word	0x1fff8ca0

1fff8a10 <port_A_isr>:
		}                                                     \
	}
// END PORT_ISR_FUNCTION_CLZ

#if defined(KINETISK)
PORT_ISR_FUNCTION_CLZ(A)
1fff8a10:	push	{r3, r4, r5, lr}
1fff8a12:	ldr	r3, [pc, #32]	; (1fff8a34 <port_A_isr+0x24>)
1fff8a14:	ldr	r4, [r3, #0]
1fff8a16:	str	r4, [r3, #0]
1fff8a18:	cbz	r4, 1fff8a30 <port_A_isr+0x20>
1fff8a1a:	ldr	r5, [pc, #28]	; (1fff8a38 <port_A_isr+0x28>)
1fff8a1c:	rbit	r3, r4
1fff8a20:	clz	r3, r3
1fff8a24:	ldr.w	r3, [r5, r3, lsl #2]
1fff8a28:	blx	r3
1fff8a2a:	subs	r3, r4, #1
1fff8a2c:	ands	r4, r3
1fff8a2e:	bne.n	1fff8a1c <port_A_isr+0xc>
1fff8a30:	pop	{r3, r4, r5, pc}
1fff8a32:	nop
1fff8a34:	.word	0x400490a0
1fff8a38:	.word	0x1fff8c68

1fff8a3c <__dso_handle>:
1fff8a3c:	....

1fff8a40 <t_on>:
1fff8a40:	<...

1fff8a44 <sd_str>:
1fff8a44:	.D..

1fff8a48 <mfile>:
1fff8a48:	.A..............
1fff8a58:	....

1fff8a5c <propertyListNum>:
1fff8a5c:	....

1fff8a60 <SPI>:
1fff8a60:	...@.E..........
	...

1fff8a98 <syncInterval>:
1fff8a98:	,...

1fff8a9c <Wire>:
1fff8a9c:	.F..............
1fff8aac:	.`.@|F..........
	...

1fff8b08 <Wire1>:
1fff8b08:	.F..............
1fff8b18:	.p.@.F..........
	...

1fff8b74 <analog_config_bits>:
1fff8b74:	.

1fff8b75 <analog_num_average>:
1fff8b75:	...

1fff8b78 <__brkval>:
1fff8b78:	42. 

1fff8b7c <device_descriptor>:
1fff8b7c:	.......@..v.u...
1fff8b8c:	....

1fff8b90 <usb_string_manufacturer_name_default>:
1fff8b90:	..T.e.e.n.s.y.d.
1fff8ba0:	u.i.n.o.

1fff8ba8 <config_descriptor>:
1fff8ba8:	..i.....2.......
1fff8bb8:	...........$....
1fff8bc8:	$....$...$......
1fff8bd8:	...@............
1fff8be8:	.@......@.......
1fff8bf8:	........@......@
1fff8c08:	...... .....

1fff8c14 <usb_string_mtp>:
1fff8c14:	..M.T.P.

1fff8c1c <usb_string_product_name_default>:
1fff8c1c:	..T.e.e.n.s.y. .
1fff8c2c:	M.T.P. .D.i.s.k.
1fff8c3c:	/.S.e.r.i.a.l...

1fff8c4c <string0>:
1fff8c4c:	....

1fff8c50 <usb_string_serial_number_default>:
1fff8c50:	................
	...

1fff8c68 <isr_table_portA>:
1fff8c68:	-...-...-...-...
1fff8c78:	-...-...-...-...
1fff8c88:	-...-...-...-...
1fff8c98:	-...-...

1fff8ca0 <isr_table_portB>:
1fff8ca0:	-...-...-...-...
1fff8cb0:	-...-...-...-...
1fff8cc0:	-...-...-...-...
1fff8cd0:	-...-...-...-...
1fff8ce0:	-...-...-...-...

1fff8cf0 <isr_table_portC>:
1fff8cf0:	-...-...-...-...
1fff8d00:	-...-...-...-...
1fff8d10:	-...-...-...-...

1fff8d20 <isr_table_portD>:
1fff8d20:	-...-...-...-...
1fff8d30:	-...-...-...-...

1fff8d40 <isr_table_portE>:
1fff8d40:	-...-...

1fff8d48 <usb_buffer_available>:
1fff8d48:	....

1fff8d4c <yield_active_check_flags>:
1fff8d4c:	....

1fff8d50 <Serial>:
1fff8d50:	pH..............

1fff8d60 <_serialEvent_default>:
1fff8d60:	.

1fff8d61 <__fdlib_version>:
1fff8d61:	.......

1fff8d68 <impure_data>:
1fff8d68:	....T.......$...
	...
1fff8e10:	.........3..4.m.
1fff8e20:	................
	...

1fff9190 <_impure_ptr>:
1fff9190:	h...

1fff9194 <__global_locale>:
1fff9194:	C...............
	...
1fff91b4:	C...............
	...
1fff91d4:	C...............
	...
1fff91f4:	C...............
	...
1fff9214:	C...............
	...
1fff9234:	C...............
	...
1fff9254:	C...............
	...
1fff9274:	.%...........I..
1fff9284:	.H..`C..`C..`C..
1fff9294:	`C..`C..`C..`C..
1fff92a4:	`C..`C..........
1fff92b4:	..........ASCII.
	...
1fff92dc:	..ASCII.........
	...

1fff9300 <__malloc_av_>:
	...
1fff9308:	................
1fff9318:	................
1fff9328:	 ... ...(...(...
1fff9338:	0...0...8...8...
1fff9348:	@...@...H...H...
1fff9358:	P...P...X...X...
1fff9368:	`...`...h...h...
1fff9378:	p...p...x...x...
1fff9388:	................
1fff9398:	................
1fff93a8:	................
1fff93b8:	................
1fff93c8:	................
1fff93d8:	................
1fff93e8:	................
1fff93f8:	................
1fff9408:	................
1fff9418:	................
1fff9428:	 ... ...(...(...
1fff9438:	0...0...8...8...
1fff9448:	@...@...H...H...
1fff9458:	P...P...X...X...
1fff9468:	`...`...h...h...
1fff9478:	p...p...x...x...
1fff9488:	................
1fff9498:	................
1fff94a8:	................
1fff94b8:	................
1fff94c8:	................
1fff94d8:	................
1fff94e8:	................
1fff94f8:	................
1fff9508:	................
1fff9518:	................
1fff9528:	 ... ...(...(...
1fff9538:	0...0...8...8...
1fff9548:	@...@...H...H...
1fff9558:	P...P...X...X...
1fff9568:	`...`...h...h...
1fff9578:	p...p...x...x...
1fff9588:	................
1fff9598:	................
1fff95a8:	................
1fff95b8:	................
1fff95c8:	................
1fff95d8:	................
1fff95e8:	................
1fff95f8:	................
1fff9608:	................
1fff9618:	................
1fff9628:	 ... ...(...(...
1fff9638:	0...0...8...8...
1fff9648:	@...@...H...H...
1fff9658:	P...P...X...X...
1fff9668:	`...`...h...h...
1fff9678:	p...p...x...x...
1fff9688:	................
1fff9698:	................
1fff96a8:	................
1fff96b8:	................
1fff96c8:	................
1fff96d8:	................
1fff96e8:	................
1fff96f8:	................

1fff9708 <__malloc_trim_threshold>:
1fff9708:	....

1fff970c <__malloc_sbrk_base>:
1fff970c:	....
