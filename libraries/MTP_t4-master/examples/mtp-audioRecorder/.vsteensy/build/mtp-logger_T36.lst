
.vsteensy/build/mtp-logger_T36.elf:     file format elf32-littlearm

SYMBOL TABLE:
00000000 l    d  .text	00000000 .text
00010cb8 l    d  .fini	00000000 .fini
00010cbc l    d  .ARM.exidx	00000000 .ARM.exidx
1fff0000 l    d  .usbdescriptortable	00000000 .usbdescriptortable
1fff0200 l    d  .dmabuffers	00000000 .dmabuffers
1fff03d0 l    d  .usbbuffers	00000000 .usbbuffers
1fff0970 l    d  .data	00000000 .data
1fff1450 l    d  .bss	00000000 .bss
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 mk20dx128.c
00009f00 l     F .text	0000000c startup_default_early_hook
00009f0c l     F .text	00000002 startup_default_late_hook
00000000 l    df *ABS*	00000000 crtstuff.c
00000410 l     F .text	00000000 __do_global_dtors_aux
1fff1450 l       .bss	00000000 completed.8605
00000434 l     F .text	00000000 frame_dummy
1fff1454 l       .bss	00000000 object.8610
00010cac l     O .text	00000000 __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000 mtp-logger.ino
000007c0 l     F .text	00000080 logg(unsigned long, char const*) [clone .part.37]
000013f0 l     F .text	000000a8 _GLOBAL__sub_I_storage
1fff1478 l     O .bss	00001000 tdm_rx_buffer
1fff2478 l     O .bss	00000004 logg(unsigned long, char const*)::to
1fff2484 l     O .bss	00000004 check_filing(short)::to
1fff2488 l     O .bss	00000002 rear_
1fff248a l     O .bss	00000002 front_
1fff0978 l     O .data	00000014 mfile
1fff84fc l     O .bss	00000200 acq_rx_buffer
00000000 l    df *ABS*	00000000 Storage.cpp
0000181c l     F .text	00000094 MTPStorage_SD::GenerateIndex() [clone .part.47] [clone .constprop.53]
000020e8 l     F .text	0000002e MTPStorage_SD::ScanAll() [clone .part.48] [clone .constprop.52]
00000000 l    df *ABS*	00000000 MTP.cpp
000021d8 l     F .text	00000064 MTPD::write(char const*, int) [clone .part.2]
000022e4 l     F .text	000000bc MTPD::GetDevicePropDesc(unsigned long) [clone .part.4]
00003438 l     F .text	0000002c MTPD::setObjectPropValue(unsigned long, unsigned long) [clone .part.7]
00010538 l     O .text	00000024 supported_op
0001055c l     O .text	00000014 propertyList
00000000 l    df *ABS*	00000000 SPI.cpp
00003bb0 l     F .text	000001f8 SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]
00000000 l    df *ABS*	00000000 Time.cpp
00003f60 l     F .text	00000018 refreshCache(long) [clone .part.0]
1fff8704 l     O .bss	00000004 cacheTime
1fff8708 l     O .bss	00000007 tm
1fff8710 l     O .bss	00000004 sysTime
1fff8714 l     O .bss	00000001 Status
1fff871c l     O .bss	00000004 prevMillis
1fff0990 l     O .data	00000004 syncInterval
000105bc l     O .text	0000000c monthDays
1fff8720 l     O .bss	00000004 nextSyncTime
00000000 l    df *ABS*	00000000 ExFatFile.cpp
000040dc l     F .text	0000003c dbgPrint(unsigned short)
00000000 l    df *ABS*	00000000 ExFatPartition.cpp
00004ba4 l     F .text	0000003c dbgPrint(unsigned short)
00004be0 l     F .text	0000002c FsCache::sync() [clone .part.2]
00000000 l    df *ABS*	00000000 upcase.cpp
00000000 l    df *ABS*	00000000 ExFatFileWrite.cpp
00005238 l     F .text	0000003c dbgPrint(unsigned short)
00000000 l    df *ABS*	00000000 FatFile.cpp
00005e28 l     F .text	0000003c dbgPrint(unsigned short)
00005fa8 l     F .text	000000a4 FatFile::sync() [clone .part.38]
00000000 l    df *ABS*	00000000 FatPartition.cpp
00006e48 l     F .text	0000003c dbgPrint(unsigned short)
00006e84 l     F .text	00000058 FatCache::sync() [clone .part.8]
00000000 l    df *ABS*	00000000 FatFileLFN.cpp
000073d4 l     F .text	00000028 lfnGetChar(DirLfn_t*, unsigned char)
000073fc l     F .text	0000003c dbgPrint(unsigned short)
00000000 l    df *ABS*	00000000 FatFileSFN.cpp
00007f28 l     F .text	0000003c dbgPrint(unsigned short)
00000000 l    df *ABS*	00000000 FsFile.cpp
00000000 l    df *ABS*	00000000 FsVolume.cpp
00000000 l    df *ABS*	00000000 FsNew.cpp
00000000 l    df *ABS*	00000000 SdSpiCard.cpp
00008318 l     F .text	00000018 SdSpiCard::spiStart() [clone .part.7] [clone .constprop.24]
00008330 l     F .text	00000022 SdSpiCard::spiStop() [clone .part.8] [clone .constprop.27]
00000000 l    df *ABS*	00000000 SdioTeensy.cpp
00008914 l     F .text	00000030 sdIrs()
00008944 l     F .text	00000018 isBusyCommandComplete()
0000895c l     F .text	00000010 isBusyCommandInhibit()
0000896c l     F .text	0000000c isBusyDMA()
00008978 l     F .text	00000014 isBusyFifoRead()
0000898c l     F .text	00000014 isBusyFifoWrite()
000089a0 l     F .text	00000018 isBusyTransferComplete()
000089b8 l     F .text	000000cc setSdclk(unsigned long)
00008ae8 l     F .text	00000028 waitTimeout(bool (*)())
00008b10 l     F .text	0000004c yieldTimeout(bool (*)())
00008b8c l     F .text	0000005c cardCommand(unsigned long, unsigned long)
00008c08 l     F .text	00000064 readReg16(unsigned long, void*)
00008c6c l     F .text	0000002c isBusyCMD13()
00008cb4 l     F .text	00000020 waitDmaStatus() [clone .part.6]
00008cd4 l     F .text	000000b4 rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)
00008ec8 l     F .text	00000078 transferStop()
00009278 l     F .text	000000ac cardCMD6(unsigned long, unsigned char*)
1fff872c l     O .bss	00000001 m_version2
1fff8730 l     O .bss	00000010 m_cid
1fff8740 l     O .bss	00000004 m_busyFcn
1fff8744 l     O .bss	00000001 m_highCapacity
1fff8748 l     O .bss	00000004 m_ocr
1fff874c l     O .bss	00000004 m_rca
1fff8750 l     O .bss	00000004 m_irqstat
1fff0994 l     O .data	00000001 m_errorCode
1fff8754 l     O .bss	00000001 m_initDone
1fff8758 l     O .bss	00000010 m_csd
1fff8768 l     O .bss	00000001 m_dmaBusy
1fff876c l     O .bss	00000004 m_sdClkKhz
1fff8770 l     O .bss	00000004 m_errorLine
00000000 l    df *ABS*	00000000 SdSpiTeensy3.cpp
00000000 l    df *ABS*	00000000 SdSpiChipSelect.cpp
00000000 l    df *ABS*	00000000 SD.cpp
00009a50 l     F .text	00000054 _GLOBAL__sub_I_SD
00000000 l    df *ABS*	00000000 usb1_mtp.c
00000000 l    df *ABS*	00000000 memcpy-armv7m.o
00000000 l    df *ABS*	00000000 usb_serial.c
1fff8c21 l     O .bss	00000001 tx_noautoflush
1fff8c24 l     O .bss	00000004 tx_packet
1fff8c28 l     O .bss	00000001 transmit_previous_timeout
1fff8c2c l     O .bss	00000004 rx_packet
00000000 l    df *ABS*	00000000 pins_teensy.c
00009f40 l     F .text	0000004c digitalWrite.part.1
00000000 l    df *ABS*	00000000 usb_mem.c
1fff099c l     O .data	00000004 usb_buffer_available
00000000 l    df *ABS*	00000000 usb_dev.c
1fff8c38 l     O .bss	00000004 ep0_tx_ptr
1fff8c3c l     O .bss	00000018 rx_last
1fff8c54 l     O .bss	00000002 ep0_tx_len
1fff8c58 l     O .bss	00000040 ep0_rx0_buf
1fff8c98 l     O .bss	00000018 rx_first
1fff8cb0 l     O .bss	00000001 ep0_tx_data_toggle
1fff8cb4 l     O .bss	00000040 ep0_rx1_buf
1fff8cf4 l     O .bss	00000018 tx_first
1fff0000 l     O .usbdescriptortable	000000e0 table
1fff8d0c l     O .bss	00000018 tx_last
1fff8d24 l     O .bss	00000008 setup
1fff8d2c l     O .bss	00000001 ep0_tx_bdt_bank
1fff8d30 l     O .bss	00000008 reply_buffer
1fff8d3c l     O .bss	00000006 tx_state
00000000 l    df *ABS*	00000000 yield.cpp
1fff8d42 l     O .bss	00000001 yield::running
00000000 l    df *ABS*	00000000 DMAChannel.cpp
00000000 l    df *ABS*	00000000 EventResponder.cpp
00000000 l    df *ABS*	00000000 usb_inst.cpp
00000000 l    df *ABS*	00000000 Print.cpp
00000000 l    df *ABS*	00000000 main.cpp
00000000 l    df *ABS*	00000000 serialEvent.cpp
00000000 l    df *ABS*	00000000 new.cpp
00000000 l    df *ABS*	00000000 analog.c
1fff8d75 l     O .bss	00000001 calibrating
1fff09b5 l     O .data	00000001 analog_config_bits
1fff8d76 l     O .bss	00000001 analog_reference_internal
1fff09b6 l     O .data	00000001 analog_num_average
00000000 l    df *ABS*	00000000 usb_desc.c
1fff09b8 l     O .data	00000012 device_descriptor
1fff09e4 l     O .data	00000069 config_descriptor
00000000 l    df *ABS*	00000000 nonstd.c
00000000 l    df *ABS*	00000000 atexit_arm.cc
00000000 l    df *ABS*	00000000 _arm_addsubdf3.o
00000000 l    df *ABS*	00000000 _arm_muldivdf3.o
00000000 l    df *ABS*	00000000 _arm_cmpdf2.o
00000000 l    df *ABS*	00000000 _arm_unorddf2.o
00000000 l    df *ABS*	00000000 _arm_fixdfsi.o
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 cxa_atexit.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 mbtowc_r.c
00000000 l    df *ABS*	00000000 lib_a-memchr.o
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 strcat.c
00000000 l    df *ABS*	00000000 strcpy.c
00000000 l    df *ABS*	00000000 lib_a-strlen.o
00000000 l    df *ABS*	00000000 strncmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
00010a24 l     O .text	00000010 zeroes.7258
00010a78 l     O .text	00000010 blanks.7257
00000000 l    df *ABS*	00000000 vdprintf.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
0000e8f4 l     F .text	00000014 register_fini
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 dtoa.c
0000e914 l     F .text	00000128 quorem
00000000 l    df *ABS*	00000000 fini.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 localeconv.c
00000000 l    df *ABS*	00000000 mprec.c
00010c90 l     O .text	0000000c p05.6087
00000000 l    df *ABS*	00000000 vfprintf.c
00000000 l    df *ABS*	00000000 vasnprintf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 impure.c
1fff0aa8 l     O .data	00000428 impure_data
00000000 l    df *ABS*	00000000 locale.c
00000000 l    df *ABS*	00000000 ctype_.c
00000000 l    df *ABS*	00000000 c:/users/zimme/documents/arduino-1.8.12/hardware/tools/arm/bin/../lib/gcc/arm-none-eabi/5.4.1/armv7e-m/fpu/crti.o
00000000 l    df *ABS*	00000000 c:/users/zimme/documents/arduino-1.8.12/hardware/tools/arm/bin/../lib/gcc/arm-none-eabi/5.4.1/armv7e-m/fpu/crtn.o
00000000 l    df *ABS*	00000000 FsDateTime.cpp
00000000 l    df *ABS*	00000000 HardwareSerial.cpp
00000000 l    df *ABS*	00000000 reent.c
00000000 l    df *ABS*	00000000 
1fff1450 l       .bss	00000000 __bss_start__
1fff8dc8 l       .bss	00000000 __bss_end__
00000000 l       *UND*	00000000 software_init_hook
00000000 l       *UND*	00000000 hardware_init_hook
00000000 l       *UND*	00000000 __stack
00009ef8  w    F .text	00000006 adc0_isr
000017e8 g     F .text	00000032 MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)
00000bf0 g     F .text	00000060 pushData(unsigned long*)
0000bda0 g     F .text	0000002c .hidden __aeabi_dcmpun
00009c54 g     F .text	0000001c usb_serial_available
0000bd64 g     F .text	00000012 .hidden __aeabi_dcmple
0000ce60 g     F .text	000000ba strcpy
0000bca0 g     F .text	0000007a .hidden __cmpdf2
00009084 g     F .text	00000088 SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)
0000afb4  w    F .text	000000ec yield
1fff82f4 g     O .bss	00000004 acq_miss
00006bfc g     F .text	0000024c FatFile::write(void const*, unsigned int)
0000bca0 g     F .text	0000007a .hidden __eqdf2
0000828c  w    F .text	00000002 SdSpiCard::~SdSpiCard()
00004610 g     F .text	00000430 ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)
1fff808c g     O .bss	00000058 storage
1fff09cc g     O .data	00000018 usb_string_manufacturer_name_default
00000c50 g     F .text	00000064 acq_isr()
0000b810 g     F .text	0000005a .hidden __floatdidf
1fff86fc g     O .bss	00000008 dma
00009eb0  w    F .text	00000048 hard_fault_isr
00009ef8  w    F .text	00000006 dma_ch6_isr
1fff8724 g     O .bss	00000004 FsDateTime::callback
0000b250 g     F .text	00000020 Print::println()
00009ef8  w    F .text	00000006 uart0_lon_isr
000044f4 g     F .text	0000011c ExFatFile::seekSet(unsigned long long)
0000a318 g     F .text	00000108 usb_rx_memory
00008260  w    F .text	00000004 SdSpiCard::errorCode() const
000004a8  w    F .text	0000000c File::flush()
00009ef8  w    F .text	00000006 dma_ch8_isr
0000c9cc g     F .text	00000002 __malloc_unlock
00000604  w    F .text	000000c0 SDFile::openNextFile(unsigned char)
1fff8728 g     O .bss	00000004 FsVolume::m_cwv
000060b8 g     F .text	00000104 FatFile::open(FatFile*, char const*, int)
0000b348 g     F .text	000000e0 analog_init
0000a420 g     F .text	00000084 usb_tx
00009ef8  w    F .text	00000006 portcd_isr
0000e7a4 g     F .text	0000004a _vdprintf_r
000103d0  w    O .text	0000005c vtable for SDFile
0000c864 g     F .text	000000c6 memmove
0000fb24 g     F .text	0000004c _Balloc
00009ef8  w    F .text	00000006 can1_rx_warn_isr
00010cc4 g       .ARM.exidx	00000000 __exidx_end
00009ef8  w    F .text	00000006 dma_error_isr
00007154 g     F .text	00000060 FatPartition::freeChain(unsigned long)
1fff8d58 g     O .bss	00000001 EventResponder::runningFromYield
000099a0 g     F .text	0000001a SdSpiArduinoDriver::receive()
00008450 g     F .text	0000007c SdSpiCard::cardCommand(unsigned char, unsigned long)
1fff84f8 g     O .bss	00000002 maxCount
00009ef8  w    F .text	00000006 i2c0_isr
00001c94 g     F .text	000000d4 MTPStorage_SD::move(unsigned long, unsigned long)
0000b224 g     F .text	0000002c Print::write(unsigned char const*, unsigned int)
0000bc90 g     F .text	0000008a .hidden __gtdf2
00007438 g     F .text	00000024 FatFile::lfnChecksum(unsigned char*)
0000c140 g     F .text	0000000c __errno
00000920  w    F .text	00000026 SDFile::isDirectory()
00001f94 g     F .text	00000154 MTPStorage_SD::ScanDir(unsigned long)
00009ef8  w    F .text	00000006 portd_isr
00009ef8  w    F .text	00000006 enet_error_isr
00000e08 g     F .text	00000088 makeFilename(char*)
00000a70  w    F .text	00000028 File::~File()
1fff8d48 g     O .bss	00000004 EventResponder::firstInterrupt
000025f4 g     F .text	0000008e MTPD::GetObjectHandles(unsigned long, unsigned long)
00008290  w    F .text	0000000e SdSpiCard::~SdSpiCard()
00007fe8 g     F .text	00000078 FsBaseFile::FsBaseFile(FsBaseFile const&)
00009ef8  w    F .text	00000006 tpm1_isr
00005168 g     F .text	0000003c ExFatPartition::rootLength()
00008264  w    F .text	00000004 SdSpiCard::errorData() const
0000b214  w    F .text	00000008 usb_serial_class::write(unsigned char const*, unsigned int)
0001077c g     O .text	00000200 digital_pin_to_info_PGM
1fff8dc4 g     O .bss	00000004 errno
000084cc g     F .text	00000054 SdSpiCard::readOCR(unsigned long*)
000099bc g     F .text	00000020 SdSpiArduinoDriver::receive(unsigned char*, unsigned int)
00007b14 g     F .text	00000412 FatFile::open(FatFile*, fname_t*, int)
00004f74 g     F .text	0000004a ExFatPartition::fatGet(unsigned long, unsigned long*)
00010cc4 g       .ARM.exidx	00000000 _etext
1fff1450 g       .bss	00000000 _sbss
0000bd2c g     F .text	00000010 .hidden __aeabi_cdcmple
00008a90 g     F .text	0000000c SdioCard::errorData() const
00009194 g     F .text	000000b4 SdioCard::writeSector(unsigned long, unsigned char const*)
00009ef8  w    F .text	00000006 porte_isr
00001120 g     F .text	0000009c loop
00009ef8  w    F .text	00000006 portb_isr
00009ef8  w    F .text	00000006 spi1_isr
00002ad8 g     F .text	0000012c MTPD::GetStorageInfo(unsigned long)
00009ef8  w    F .text	00000006 uart3_status_isr
0000421c g     F .text	000000c4 ExFatFile::parsePathName(char const*, ExName_t*, char const**)
00000e90 g     F .text	000000f8 checkPath(char*)
00009ef8  w    F .text	00000006 mcm_isr
000096b8 g     F .text	000000cc SdioCard::readData(unsigned char*)
00002118 g     F .text	00000062 MTPStorage_SD::StartGetObjectHandles(unsigned long)
00008394 g     F .text	00000080 SdSpiCard::readData(unsigned char*, unsigned int)
1fff8d4c g     O .bss	00000004 EventResponder::lastInterrupt
00009ef8  w    F .text	00000006 uart1_status_isr
000009dc  w    F .text	00000092 SDFile::seek(unsigned long, int)
00008060 g     F .text	00000028 FsBaseFile::close()
00009aa8 g     F .text	00000134 memcpy
00009ef8  w    F .text	00000006 randnum_isr
0000bd1c g     F .text	00000020 .hidden __aeabi_cdrcmple
0000048c  w    F .text	0000000c File::available()
000015a0 g     F .text	0000001c MTPStorage_SD::freeClusters()
0000217c g     F .text	00000044 Storage_init()
00000d60 g     F .text	00000048 file_writeHeader()
00005058 g     F .text	0000009c ExFatPartition::freeChain(unsigned long)
00001d68 g     F .text	00000110 MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)
000063ac g     F .text	0000002a FatFile::peek()
0000d0c0 g     F .text	000016e4 _svfprintf_r
0000b7a0 g     F .text	00000022 .hidden __floatsidf
000005d4  w    F .text	00000014 SDFile::whoami()
1fff146c  w    O .bss	00000001 SDFile::name()::zeroterm
1fff8c34 g     O .bss	00000004 systick_millis_count
0000bc98 g     F .text	00000082 .hidden __ltdf2
0000155c g     F .text	00000020 MTPStorage_SD::clusterCount()
00005950 g     F .text	000000d8 ExFatFile::rename(ExFatFile*, char const*)
00009eb0  w    F .text	00000048 bus_fault_isr
00003600 g     F .text	000005b0 MTPD::loop()
00009ef8  w    F .text	00000006 watchdog_isr
0000be1c g     F .text	00000000 .hidden __aeabi_uldivmod
00009ef8  w    F .text	00000006 i2c1_isr
1fff8d38 g     O .bss	00000001 usb_configuration
00009ef8  w    F .text	00000006 dma_ch11_isr
00008258  w    F .text	00000006 SdCardInterface::status()
00009248 g     F .text	00000030 SdioCard::syncDevice()
00008f44 g     F .text	000000cc SdioCard::writeData(unsigned char const*)
00000000  w      *UND*	00000000 __fini_array_end
00000984  w    F .text	00000058 StreamFile<FsBaseFile, unsigned long long>::available()
000063d8 g     F .text	0000004e FatFile::readDirCache(bool)
000004b4  w    F .text	0000000c File::seek(unsigned long, int)
00009ef8  w    F .text	00000006 i2c2_isr
1fff1474 g     O .bss	00000004 loop_count
1fff09cc  w    O .data	00000018 usb_string_manufacturer_name
1fff8db8 g     O .bss	0000000c usb_rx_byte_count_data
00009ef8  w    F .text	00000006 pit1_isr
1fff0a50 g     O .data	00000008 usb_string_mtp
0000c19c g     F .text	00000010 malloc
00009ef8  w    F .text	00000006 dma_ch4_isr
00009ef8  w    F .text	00000006 software_isr
00000d0c g     F .text	00000054 do_menu(short)
00010350  w    O .text	00000024 vtable for FsFile
00009ef8  w    F .text	00000006 dma_ch7_isr
00010ba0 g     O .text	000000c8 __mprec_tens
0000aeec g     F .text	000000c8 usb_init
00008278  w    F .text	00000004 SdSpiCard::type() const
00009ef8  w    F .text	00000006 lptmr_isr
1fff8d80 g     O .bss	00000004 __malloc_top_pad
00009fa8 g     F .text	00000024 rtc_set
000082a0 g     F .text	00000076 SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)
00005a28 g     F .text	00000120 ExFatFile::truncate()
1fff0970 g     O .data	00000000 .hidden __dso_handle
0000b780 g     F .text	0000001e .hidden __aeabi_ui2d
0000fb08 g     F .text	0000001c _localeconv_r
00009f8c g     F .text	00000010 attachInterruptVector
00009958 g     F .text	00000048 SdSpiArduinoDriver::deactivate()
0000fca0 g     F .text	00000012 __i2b
1fff0970 g       .data	00000000 _sdata
00009aa4 g     F .text	00000002 usb_mtp_configure
1fff0974 g     O .data	00000004 t_on
000004e4  w    F .text	0000000c File::operator bool()
00006f58 g     F .text	0000000e FatCache::sync()
0000be4c g     F .text	000002e2 .hidden __udivmoddi4
0000293c g     F .text	0000019c MTPD::getObjectPropValue(unsigned long, unsigned long)
0000b4fc g     F .text	00000000 .hidden __aeabi_drsub
00005e64 g     F .text	00000042 FatFile::addCluster()
0000cdb0 g     F .text	00000024 _sbrk_r
00008520 g     F .text	0000004a SdSpiCard::readRegister(unsigned char, void*)
00008b6c g     F .text	00000020 SdioCard::type() const
00000480  w    F .text	0000000c File::write(void const*, unsigned int)
000001d0 g     F .text	000001f0 ResetHandler
00009bdc g     F .text	00000048 usb_serial_getchar
00009ef8  w    F .text	00000006 can1_bus_off_isr
00009ef8  w    F .text	00000006 ftm2_isr
00000840  w    F .text	0000004c SDFile::name()
1fff8dac g     O .bss	00000008 usb_cdc_line_coding
00009fcc g     F .text	0000000a digitalWrite
1fff8d50 g     O .bss	00000004 EventResponder::lastYield
00009ef8  w    F .text	00000006 uart5_status_isr
00009ef8  w    F .text	00000006 lpuart0_status_isr
000041ec g     F .text	0000002e ExFatFile::openRoot(ExFatVolume*)
000109a8 g     O .text	00000006 usb_endpoint_config_table
00009ef8  w    F .text	00000006 dma_ch9_isr
00000740  w    F .text	00000038 StreamFile<FsBaseFile, unsigned long long>::read()
00009ef8  w    F .text	00000006 pit2_isr
0000bd50 g     F .text	00000012 .hidden __aeabi_dcmplt
1fff8d7c g     O .bss	00000004 __malloc_max_sbrked_mem
000008d0  w    F .text	00000010 SDFile::position()
0000881c g     F .text	00000042 SdSpiCard::writeStop()
00001e78 g     F .text	00000036 MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)
0000a264 g     F .text	0000004c usb_free
00009ef8  w    F .text	00000006 i2c3_isr
0000b7c4 g     F .text	0000003a .hidden __extendsfdf2
0000bac0 g     F .text	000001d0 .hidden __aeabi_ddiv
0000b508 g     F .text	00000276 .hidden __adddf3
000028d0 g     F .text	0000006c MTPD::getObjectPropsSupported(unsigned long)
0000223c g     F .text	000000a8 MTPD::writestring(char const*)
000088e0 g     F .text	00000032 SdSpiCard::writeData(unsigned char const*)
00000498  w    F .text	00000010 File::peek()
000071b4 g     F .text	000000d6 FatPartition::freeClusterCount()
00010cbc g       .ARM.exidx	00000000 __exidx_start
0000b86c g     F .text	00000254 .hidden __aeabi_dmul
000006c4  w    F .text	0000000c DMAChannel::~DMAChannel()
00008714 g     F .text	00000050 SdSpiCard::writeStart(unsigned long)
00009ef8  w    F .text	00000006 pit0_isr
1fff8d54 g     O .bss	00000004 EventResponder::firstYield
00010a10 g     O .text	00000004 _global_impure_ptr
000014b8 g     F .text	0000000c MTPStorage_SD::write(char const*, unsigned long)
00009ef8  w    F .text	00000006 can1_error_isr
0000078c  w    F .text	00000034 StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)
0000c9d0 g     F .text	000003de _realloc_r
000008f0  w    F .text	00000018 SDFile::read(void*, unsigned int)
0000c14c g     F .text	00000050 __libc_init_array
1fff8dc8 g       .bss	00000000 __bss_end
0000088c  w    F .text	00000044 SDFile::rewindDirectory()
00009ef8  w    F .text	00000006 can0_wakeup_isr
00004b58 g     F .text	0000000e ExFatFile::open(ExFatVolume*, char const*, int)
00008a9c g     F .text	0000001c SdioCard::readCID(CID*)
000056c0 g     F .text	00000114 ExFatFile::addDirCluster()
00000f88 g     F .text	000000e8 file_open()
00009ef8  w    F .text	00000006 flash_cmd_isr
0000888c g     F .text	00000052 SdSpiCard::writeData(unsigned char, unsigned char const*)
00001950 g     F .text	0000003a MTPStorage_SD::GetObjectInfo(unsigned long, char*, unsigned long*, unsigned long*)
00010c68 g     O .text	00000028 __mprec_bigtens
0000b1fc  w    F .text	00000004 usb_serial_class::clear()
0000b780 g     F .text	0000001e .hidden __floatunsidf
00009ef8  w    F .text	00000006 uart2_status_isr
00009f10 g     F .text	0000002c _sbrk
0000ff34 g     F .text	00000042 __mcmp
00000598  w    F .text	00000012 SDFile::operator bool()
1fff0998 g     O .data	00000004 __brkval
1fff8c30 g     O .bss	00000001 usb_cdc_line_rtsdtr
000011bc g     F .text	0000019c acq_init(long)
00009e68 g     F .text	00000048 usb_serial_flush_callback
00010c9c g     F .text	00000000 _init
00005f7c g     F .text	0000002a FatFile::cacheDirEntry(unsigned char)
1fff247c g     O .bss	00000002 state
00009ef8  w    F .text	00000006 svcall_isr
000005e8  w    F .text	0000001c SDFile::close()
00009ef8  w    F .text	00000006 dma_ch15_isr
00000b94  w    F .text	0000005c SDFile::~SDFile()
00004078 g     F .text	00000020 day()
00009ef8  w    F .text	00000006 uart1_error_isr
0000f874 g     F .text	00000028 __libc_fini_array
00009ef8  w    F .text	00000006 usbhs_phy_isr
1fff8dc8 g       .bss	00000000 _ebss
0000910c g     F .text	00000088 SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)
000023a0 g     F .text	00000214 MTPD::WriteDescriptor()
1fff098c g     O .data	00000004 propertyListNum
00000778  w    F .text	00000014 StreamFile<FsBaseFile, unsigned long long>::flush()
00006edc g     F .text	0000007a FatCache::read(unsigned long, unsigned char)
0000fc04 g     F .text	00000040 __hi0bits
0000bdcc g     F .text	0000004e .hidden __fixdfsi
000057d4 g     F .text	00000072 ExFatFile::mkdir(ExFatFile*, ExName_t*)
00009ef8 g     F .text	00000006 unused_isr
000025b4 g     F .text	0000003e MTPD::WriteStorageIDs()
00009ef8  w    F .text	00000006 spi0_isr
00009ef8  w    F .text	00000006 dma_ch3_isr
00009a4c  w    F .text	00000002 SDClass::~SDClass()
000006c4  w    F .text	0000000c DMAChannel::~DMAChannel()
1fff82f8 g     O .bss	00000200 diskBuffer
00000a70  w    F .text	00000028 File::~File()
000040b8 g     F .text	00000024 year()
0000b344 g     F .text	00000004 operator delete(void*, unsigned int)
00009ef8  w    F .text	00000006 flash_error_isr
0000b508 g     F .text	00000276 .hidden __aeabi_dadd
0000bc98 g     F .text	00000082 .hidden __ledf2
0000ce20 g     F .text	0000003e strcat
00009ef8  w    F .text	00000006 uart5_error_isr
00009ef8  w    F .text	00000006 rtc_seconds_isr
00009ef8  w    F .text	00000006 pdb_isr
0000fde4 g     F .text	000000a0 __pow5mult
000064e4 g     F .text	00000068 FatFile::rmdir()
0000b800 g     F .text	0000006a .hidden __aeabi_ul2d
00009eb0  w    F .text	00000048 usage_fault_isr
00009ef8  w    F .text	00000006 dac1_isr
00000000 g     O .text	000001d0 _VectorsFlash
00007094 g     F .text	000000c0 FatPartition::allocateCluster(unsigned long, unsigned long*)
00009ef8  w    F .text	00000006 dma_ch14_isr
00000000  w      *UND*	00000000 __deregister_frame_info
1fff8db4 g     O .bss	00000004 usb_cdc_line_rtsdtr_millis
0000b1ec g     F .text	00000010 systick_isr
00009ef8  w    F .text	00000006 rtc_alarm_isr
00000504  w    F .text	0000000c File::isDirectory()
00007f64 g     F .text	00000084 FatFile::getSFN(char*)
00008664 g     F .text	00000076 SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)
00009ef8  w    F .text	00000006 dma_ch2_isr
1fff09a4 g     O .data	00000010 Serial
00009ef8  w    F .text	00000006 ftm1_isr
0000b21c  w    F .text	00000006 usb_serial_class::write(unsigned char)
00008108 g     F .text	0000005e FsBaseFile::openNext(FsBaseFile*, int)
00009f00  w    F .text	0000000c startup_early_hook
00009ef8  w    F .text	00000006 dma_ch13_isr
00005274 g     F .text	000000c6 ExFatFile::addCluster()
00010374  w    O .text	0000005c vtable for File
00009ef8  w    F .text	00000006 uart2_error_isr
00009c24 g     F .text	00000030 usb_serial_peekchar
0000bd8c g     F .text	00000012 .hidden __aeabi_dcmpgt
00001714 g     F .text	00000002 mtp_yield()
0000c760 g     F .text	00000000 memchr
00007008 g     F .text	0000008a FatPartition::fatPut(unsigned long, unsigned long)
1fff0a8c g     O .data	00000016 usb_string_serial_number_default
00009eb0 g     F .text	00000048 fault_isr
0000f938 g     F .text	000001d0 _free_r
00008f40 g     F .text	00000004 SdioCard::readStop()
00004c18 g     F .text	0000008c FsCache::get(unsigned long, unsigned char)
0000bd78 g     F .text	00000012 .hidden __aeabi_dcmpge
00009ef8  w    F .text	00000006 usb_charge_isr
0000b20c  w    F .text	00000004 usb_serial_class::flush()
00009ef8  w    F .text	00000006 cmt_isr
0000b504 g     F .text	0000027a .hidden __aeabi_dsub
0000728c g     F .text	00000146 FatPartition::init(BlockDeviceInterface*, unsigned char)
00009ef8  w    F .text	00000006 usbhs_isr
00006734 g     F .text	00000188 FatFile::mkdir(FatFile*, fname_t*)
1fff144c g     O .data	00000004 __malloc_sbrk_base
0000b204  w    F .text	00000004 usb_serial_class::read()
00009ef8  w    F .text	00000006 ftm3_isr
00000548  w    F .text	0000000c File::rewindDirectory()
00009ef8  w    F .text	00000006 tsi0_isr
0000782c g     F .text	000001b2 FatFile::remove()
0000b800 g     F .text	0000006a .hidden __floatundidf
00009f3c  w    F .text	00000002 __cxa_pure_virtual
0000fe84 g     F .text	000000ae __lshift
000068bc g     F .text	000000fc FatFile::mkdir(FatFile*, char const*, bool)
00009ef8  w    F .text	00000006 spi2_isr
000051e0 g     F .text	00000058 exFatCmpName(DirName_t const*, char const*, unsigned int, unsigned int)
00001900 g     F .text	00000050 MTPStorage_SD::GetNextObjectHandle()
00010148 g     F .text	00000100 __ssprint_r
00010248 g     F .text	0000005e _vasnprintf_r
0000b33c  w    F .text	00000002 serialEvent()
1fff8cb1 g     O .bss	00000001 usb_reboot_timer
0000e850 g     F .text	000000a4 __register_exitproc
00004a40 g     F .text	00000116 ExFatFile::open(ExFatFile*, char const*, int)
0000d01c g     F .text	000000a0 strncmp
00005848 g     F .text	00000108 ExFatFile::mkdir(ExFatFile*, char const*, bool)
00009c70 g     F .text	00000038 usb_serial_flush_input
000050f4 g     F .text	00000072 ExFatPartition::freeClusterCount()
000019e4 g     F .text	0000006c MTPStorage_SD::ConstructFilename(int, char*, int)
0000fcb4 g     F .text	00000130 __multiply
1fff2480 g     O .bss	00000004 acq_count
00009db0 g     F .text	00000018 usb_serial_putchar
00000022 g       *ABS*	00000000 _teensy_model_identifier
1fff8d84 g     O .bss	00000028 __malloc_current_mallinfo
0001008c g     F .text	000000ba __d2b
1fff8d5c g     O .bss	00000018 HardwareSerial::s_serials_with_serial_events
00009ef8  w    F .text	00000006 can0_bus_off_isr
00008b5c  w    F .text	0000000e SdioCard::~SdioCard()
0000412c g     F .text	000000be ExFatFile::getName(char*, unsigned int)
00001498 g     F .text	00000004 MTPStorage_SD::readonly()
1fff8d2d g     O .bss	00000001 usb_rx_memory_needed
00009010 g     F .text	00000074 SdioCard::writeStart(unsigned long)
0000a4a4 g     F .text	00000a48 usb_isr
0000c134 g     F .text	0000000c __cxa_atexit
000042e0 g     F .text	000001e4 ExFatFile::read(void*, unsigned int)
0000b7a0 g     F .text	00000022 .hidden __aeabi_i2d
00000908  w    F .text	00000018 SDFile::peek()
00004ca4 g     F .text	0000000e FsCache::sync()
0000c800 g     F .text	00000062 memcmp
0001097c  w    O .text	00000028 vtable for usb_serial_class
000099dc g     F .text	00000016 SdSpiArduinoDriver::send(unsigned char)
00009ef8  w    F .text	00000006 uart3_error_isr
00003308 g     F .text	0000007c MTPD::GetObject(unsigned long)
00009a48 g     F .text	00000004 sdCsWrite(unsigned char, bool)
0000c130  w    F .text	00000002 .hidden __aeabi_ldiv0
00005464 g     F .text	00000072 ExFatFile::rmdir()
00009ef8  w    F .text	00000006 porta_isr
00002c04 g     F .text	000006e6 MTPD::getObjectPropDesc(unsigned long, unsigned long)
0000bac0 g     F .text	000001d0 .hidden __divdf3
1fff03d0 g     O .usbbuffers	000005a0 usb_buffer_memory
0000857c g     F .text	00000098 SdSpiCard::sectorCount()
00009ef8  w    F .text	00000006 low_voltage_isr
00001070 g     F .text	000000b0 do_logger(short)
1fff1040 g     O .data	00000408 __malloc_av_
00009ef8  w    F .text	00000006 can0_error_isr
0000a0b8 g     F .text	0000016c _init_Teensyduino_internal_
00000948  w    F .text	00000014 SDFile::flush()
0000b86c g     F .text	00000254 .hidden __muldf3
00009e10 g     F .text	00000058 usb_serial_flush_output
00009ef8  w    F .text	00000006 dma_ch12_isr
0000c9c8 g     F .text	00000002 __malloc_lock
00000000  w      *UND*	00000000 __fini_array_start
000075c0 g     F .text	0000026c FatFile::parsePathName(char const*, fname_t*, char const**)
00009ef8  w    F .text	00000006 can1_wakeup_isr
1fff0200 g     O .dmabuffers	000001d0 _VectorsRam
000099f4 g     F .text	00000052 SdSpiArduinoDriver::send(unsigned char const*, unsigned int)
000102a8 g     F .text	0000005e _calloc_r
00009ef8  w    F .text	00000006 pit3_isr
00003384 g     F .text	0000006e MTPD::read(char*, unsigned long)
1fff8718 g     O .bss	00000004 getTimePtr
00000da8 g     F .text	00000038 file_writeData(void*, unsigned long)
1fff09a0 g     O .data	00000001 yield_active_check_flags
00009ef8  w    F .text	00000006 enet_rx_isr
00005658 g     F .text	00000066 ExFatFile::sync()
000069b8 g     F .text	00000238 FatFile::rename(FatFile*, char const*)
00008c98 g     F .text	0000001c SdioCard::isBusy()
00009ef8  w    F .text	00000006 portc_isr
000086dc g     F .text	00000038 SdSpiCard::readStop()
0000c92c g     F .text	0000009a memset
0000b32c g     F .text	00000010 main
1fff8d78 g     O .bss	00000004 __malloc_max_total_mem
00004cb4 g     F .text	000000b4 ExFatPartition::bitmapFind(unsigned long, unsigned long)
00003f78 g     F .text	000000a0 now()
00005b48 g     F .text	000002e0 ExFatFile::write(void const*, unsigned int)
000104d4 g     O .text	00000050 vtable for MTPStorage_SD
00003464 g     F .text	00000126 MTPD::SendObjectInfo(unsigned long, unsigned long)
00009eb0  w    F .text	00000048 memmanage_fault_isr
000006d0  w    F .text	00000058 SDFile::available()
000004d8  w    F .text	0000000c File::close()
0000b428 g     F .text	0000007c usb_init_serialnumber
00010cb8 g       .text	00000000 __init_array_end
0000ea40 g     F .text	00000e34 _dtoa_r
0000c1bc g     F .text	00000570 _malloc_r
1fff8d74 g     O .bss	00000001 HardwareSerial::s_count_serials_with_serial_events
00009ef8  w    F .text	00000006 debugmonitor_isr
0000e808 g     F .text	0000001a __ascii_wctomb
00007fe8 g     F .text	00000078 FsBaseFile::FsBaseFile(FsBaseFile const&)
0000b810 g     F .text	0000005a .hidden __aeabi_l2d
00003da8 g     F .text	00000008 SPIClass::transfer(void const*, void*, unsigned int)
00000031 g       *ABS*	00000000 __rtc_localtime
00009fd8 g     F .text	00000044 micros
00000000  w      *UND*	00000000 __libc_fini
00000510  w    F .text	00000038 File::openNextFile(unsigned char)
00009ef8  w    F .text	00000006 cmp1_isr
00009ef8  w    F .text	00000006 ftm0_isr
000054d8 g     F .text	00000180 ExFatFile::syncDir()
0000f89c g     F .text	0000009c _malloc_trim_r
1fff0a88 g     O .data	00000004 string0
00009ca8 g     F .text	00000108 usb_serial_write
00009f0c  w    F .text	00000002 startup_late_hook
0000b208  w    F .text	00000004 usb_serial_class::available()
1fff09b4 g     O .data	00000001 _serialEvent_default
000033f4 g     F .text	00000044 MTPD::readstring(char*)
00006bf0 g     F .text	0000000c FatFile::sync()
1fff0a58  w    O .data	0000002e usb_string_product_name
0000a01c g     F .text	0000009c delay
0000bca0 g     F .text	0000007a .hidden __nedf2
00009ef8  w    F .text	00000006 tpm0_isr
1fff8d44 g     O .bss	00000002 dma_channel_allocated_mask
000014a0 g     F .text	00000018 MTPStorage_SD::CloseIndex()
00010cb8 g     F .fini	00000000 _fini
000021c0 g     F .text	00000018 MTPD::get_buffer()
000004f0  w    F .text	00000014 File::name()
00004098 g     F .text	00000020 month()
00008614 g     F .text	00000050 SdSpiCard::readStart(unsigned long)
00004b68 g     F .text	0000003a ExFatFile::openNext(ExFatFile*, int)
0000cdd4 g     F .text	0000004c sprintf
0000b280 g     F .text	0000001c Print::printf(char const*, ...)
00009ef8  w    F .text	00000006 i2s0_rx_isr
00009ef8  w    F .text	00000006 uart4_error_isr
0000b31c g     F .text	00000010 Print::print(long)
0000604c g     F .text	0000001e FatFile::close()
000004c0  w    F .text	0000000c File::position()
00000a98  w    F .text	00000064 SDFile::~SDFile()
00006f68 g     F .text	0000000c FatPartition::clusterStartSector(unsigned long) const
0000e908 g     F .text	0000000c atexit
00008ae4  w    F .text	00000002 SdioCard::~SdioCard()
00000728  w    F .text	00000018 StreamFile<FsBaseFile, unsigned long long>::peek()
00000580  w    F .text	00000018 File::write(unsigned char)
0000e824 g     F .text	0000002c _write_r
1fff8774 g     O .bss	000004ac SD
00008df4 g     F .text	000000d4 SdioCard::erase(unsigned long, unsigned long)
00009ef8  w    F .text	00000006 can0_message_isr
1fff0ed0 g     O .data	00000004 _impure_ptr
00010308  w    O .text	00000024 vtable for Stream
00009ef8  w    F .text	00000006 can1_message_isr
000044c4 g     F .text	0000002e ExFatFile::peek()
0001032c  w    O .text	00000024 vtable for StreamFile<FsBaseFile, unsigned long long>
00009ef8  w    F .text	00000006 nmi_isr
000079e0 g     F .text	00000134 FatFile::lfnUniqueSfn(fname_t*)
00000970  w    F .text	00000014 SDFile::write(void const*, unsigned int)
0000822c g     F .text	00000028 FsVolume::open(char const*, int)
00008a84 g     F .text	0000000c SdioCard::errorCode() const
000061bc g     F .text	0000000e FatFile::open(FatVolume*, char const*, int)
0000095c  w    F .text	00000014 StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)
00010ca8 g       .text	00000000 __preinit_array_end
000014c4 g     F .text	00000098 dateTime(unsigned short*, unsigned short*, unsigned char*)
0000828c  w    F .text	00000002 SdSpiCard::~SdSpiCard()
00009ef8  w    F .text	00000006 sdhc_isr
00004038 g     F .text	00000020 minute()
00004d68 g     F .text	00000110 ExFatPartition::init(BlockDeviceInterface*, unsigned char)
00004f40 g     F .text	00000034 ExFatPartition::dirCache(DirPos_t*, unsigned char)
00008764 g     F .text	000000b8 SdSpiCard::erase(unsigned long, unsigned long)
00001a50 g     F .text	00000188 MTPStorage_SD::DeleteObject(unsigned long)
0000c72c g     F .text	0000002a __ascii_mbtowc
00008354 g     F .text	0000003e SdSpiCard::isBusy()
000106cc g     O .text	00000058 vtable for SdSpiCard
1fff80e4 g     O .bss	00000200 header
00008574  w    F .text	00000008 SdSpiCard::readCID(CID*)
00001358 g     F .text	00000098 setup
000109b0 g     O .text	00000060 usb_descriptor_list
0000a2b0 g     F .text	0000003c usb_rx
00008be8 g     F .text	00000020 SdioCard::status()
000015bc g     F .text	00000158 MTPStorage_SD::ResetIndex()
00009ef8  w    F .text	00000006 dma_ch10_isr
00000470  w    F .text	00000002 Print::flush()
00009ef8  w    F .text	00000006 uart0_error_isr
000004cc  w    F .text	0000000c File::size()
0000a224 g     F .text	00000040 usb_malloc
000061cc g     F .text	000001de FatFile::read(void*, unsigned int)
00009ef8  w    F .text	00000006 i2s0_isr
0000606c g     F .text	0000004a FatFile::openRoot(FatVolume*)
20030000 g       .bss	00000000 _estack
00008254 g     F .text	00000004 operator new(unsigned int, unsigned long*)
0000856c  w    F .text	00000008 SdSpiCard::readCSD(csd_t*)
0000b16c g     F .text	00000038 DMAChannel::release()
00000554  w    F .text	0000002c File::read()
00009dc8 g     F .text	00000048 usb_serial_write_buffer_free
00008414 g     F .text	0000003c SdSpiCard::waitNotBusy(unsigned short)
00009ef8  w    F .text	00000006 enet_timer_isr
0000bd3c g     F .text	00000012 .hidden __aeabi_dcmpeq
00000afc  w    F .text	00000030 File::~File()
0000b270  w    F .text	0000000e _write
1fff1470 g     O .bss	00000004 maxDel
1fff1450 g       .data	00000000 _edata
00005008 g     F .text	0000004e ExFatPartition::fatPut(unsigned long, unsigned long)
00002684 g     F .text	0000024c MTPD::GetObjectInfo(unsigned long)
00008ae4  w    F .text	00000002 SdioCard::~SdioCard()
00009ef8  w    F .text	00000006 i2s0_tx_isr
00009ef8  w    F .text	00000006 adc1_isr
00008860 g     F .text	0000002c SdSpiCard::syncDevice()
00005ea8 g     F .text	000000d4 FatFile::addDirCluster()
00000474  w    F .text	0000000c File::read(void*, unsigned int)
0000b210  w    F .text	00000004 usb_serial_class::availableForWrite()
00009ef8  w    F .text	00000006 cmp0_isr
0000b4a4 g     F .text	0000004c ultoa
00009a4c  w    F .text	00000002 SDClass::~SDClass()
00004058 g     F .text	00000020 second()
00008088 g     F .text	00000080 FsBaseFile::open(FsVolume*, char const*, int)
000018b0 g     F .text	0000004e MTPStorage_SD::ReadIndexRecord(unsigned long)
0000b340 g     F .text	00000004 operator new(unsigned int)
0000b1a4 g     F .text	00000044 EventResponder::runFromInterrupt()
1fff1448 g     O .data	00000004 __malloc_trim_threshold
0000b200  w    F .text	00000004 usb_serial_class::peek()
00000b2c  w    F .text	00000068 MTPStorage_SD::~MTPStorage_SD()
1fff82e4 g     O .bss	00000010 mtpd
0000ff78 g     F .text	00000114 __mdiff
00008ad4 g     F .text	00000010 SdioCard::readOCR(unsigned long*)
0000bdcc g     F .text	0000004e .hidden __aeabi_d2iz
00004fc0 g     F .text	00000048 ExFatPartition::dirSeek(DirPos_t*, unsigned long)
1fff8c20 g     O .bss	00000001 usb_cdc_transmit_flush_timer
00009ef8  w    F .text	00000006 pit_isr
00004018 g     F .text	00000020 hour()
00008f40 g     F .text	00000004 SdioCard::writeStop()
0000827c  w    F .text	00000010 SdSpiCard::writeSector(unsigned long, unsigned char const*)
00004118 g     F .text	00000014 ExFatFile::close()
00010a88 g     O .text	00000101 _ctype_
00009ef8  w    F .text	00000006 dac0_isr
00008268  w    F .text	00000010 SdSpiCard::readSector(unsigned long, unsigned char*)
00010ca8 g       .text	00000000 __init_array_start
0000c130  w    F .text	00000002 .hidden __aeabi_idiv0
00009ef8  w    F .text	00000006 can1_tx_warn_isr
00001718 g     F .text	000000d0 MTPStorage_SD::OpenIndex()
0000bda0 g     F .text	0000002c .hidden __unorddf2
00009ef8  w    F .text	00000006 uart0_status_isr
00009ef8  w    F .text	00000006 mcg_isr
00000400 g     O .text	00000010 flashconfigbytes
0000b0a0 g     F .text	000000cc DMAChannel::begin(bool)
0000cf40 g     F .text	000000dc strlen
0000745c g     F .text	0000002e FatFile::openCluster(FatFile*)
0000bd2c g     F .text	00000010 .hidden __aeabi_cdcmpeq
0000bc90 g     F .text	0000008a .hidden __gedf2
00006428 g     F .text	000000ba FatFile::seekSet(unsigned long)
00001eb0 g     F .text	000000e4 MTPStorage_SD::Create(unsigned long, bool, char const*)
1fff0a58 g     O .data	0000002e usb_string_product_name_default
0000e7f0 g     F .text	00000018 vdprintf
00009ef8  w    F .text	00000006 dma_ch1_isr
00008d88 g     F .text	0000006c SdioCard::sectorCount()
00008168 g     F .text	000000c4 FsVolume::begin(BlockDeviceInterface*)
0000a2ec g     F .text	0000002c usb_tx_packet_count
0000667c g     F .text	000000b8 FatFile::openNext(FatFile*, int)
00010724 g     O .text	00000058 vtable for SdioCard
0000b7c4 g     F .text	0000003a .hidden __aeabi_f2d
00009ef8  w    F .text	00000006 dma_ch5_isr
000019a4 g     F .text	00000040 MTPStorage_SD::close()
0000748c g     F .text	00000134 FatFile::getName(char*, unsigned int)
00009ef8  w    F .text	00000006 can0_rx_warn_isr
00000b2c  w    F .text	00000068 MTPStorage_SD::~MTPStorage_SD()
00001bd8 g     F .text	000000bc MTPStorage_SD::rename(unsigned long, char const*)
00009ef8  w    F .text	00000006 can0_tx_warn_isr
00009ef8  w    F .text	00000006 uart4_status_isr
00009784 g     F .text	00000074 SdioCard::readStart(unsigned long)
00000000  w      *UND*	00000000 _Jv_RegisterClasses
000098c8 g     F .text	00000090 SdSpiArduinoDriver::activate()
0000b504 g     F .text	0000027a .hidden __subdf3
00000cb4 g     F .text	00000058 pullData(unsigned long*, unsigned long)
00010ca8 g       .text	00000000 __preinit_array_start
00004e78 g     F .text	000000c8 ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)
0000198c g     F .text	00000016 MTPStorage_SD::GetSize(unsigned long)
000005ac  w    F .text	00000028 File::whoami()
1fff248c g     O .bss	00005c00 data_buffer
0000fc44 g     F .text	0000005a __lo0bits
0000149c g     F .text	00000004 MTPStorage_SD::has_directories()
0000654c g     F .text	00000130 FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)
0000b4f0 g     F .text	0000000a __aeabi_atexit
000032ec g     F .text	0000001a MTPD::receive_buffer()
00000000  w      *UND*	00000000 __register_frame_info
00009f9c g     F .text	0000000c rtc_get
0000157c g     F .text	00000024 MTPStorage_SD::clusterSize()
0000533c g     F .text	00000126 ExFatFile::remove()
00009ef8  w    F .text	00000006 cmp2_isr
0000b1e8 g     F .text	00000004 pendablesrvreq_isr
0000358c g     F .text	00000072 MTPD::SendObject()
0000046c  w    F .text	00000004 Print::availableForWrite()
1fff0ed4 g     O .data	0000016c __global_locale
00009ef8  w    F .text	00000006 wakeup_isr
00000de0 g     F .text	00000028 file_close()
00009324 g     F .text	00000394 SdioCard::begin(SdioConfig)
00004c0c g     F .text	0000000c FsCache::invalidate()
00009ef8  w    F .text	00000006 cmp3_isr
00003db0 g     F .text	000001b0 breakTime(long, tmElements_t&)
0000b29c g     F .text	0000007e Print::printNumber(unsigned long, unsigned char, unsigned char)
00006f74 g     F .text	00000092 FatPartition::fatGet(unsigned long, unsigned long*)
0000c1ac g     F .text	00000010 free
00009ef8  w    F .text	00000006 tpm2_isr
0000fb84 g     F .text	00000080 __multadd
0000fb70 g     F .text	00000012 _Bfree
000008e0  w    F .text	00000010 SDFile::size()
00009ef8  w    F .text	00000006 dma_ch0_isr
00000b94  w    F .text	0000005c SDFile::~SDFile()
1fff0a8c  w    O .data	00000016 usb_string_serial_number
00009ef8  w    F .text	00000006 enet_tx_isr
000051a4 g     F .text	0000003a exFatHashName(char const*, unsigned int, unsigned short)
000097f8 g     F .text	000000d0 SdioCard::readSector(unsigned long, unsigned char*)
00008ab8 g     F .text	0000001c SdioCard::readCSD(csd_t*)



Disassembly of section .text:

00000000 <_VectorsFlash>:
  str = fsFmtField(str, 2*(time & 31) + sec100/100, '.');
  *--str = ':';
  return fsFmtTime(str, time);
}
//------------------------------------------------------------------------------
char* fsFmtTimeZone(char* str, int8_t tz) {
       0:	... ............
    } else {
      sign = '+';
      tz &= 0X7F;
    }
    if (tz) {
      str = fsFmtField(str, 15*(tz%4), 0);
      10:	................
//------------------------------------------------------------------------------
static char* fsFmtField(char* str, uint16_t n, char sep) {
  if (sep) {
    *--str = sep;
  }
  str = fmtBase10(str, n);
      20:	................
      sign = '+';
      tz &= 0X7F;
    }
    if (tz) {
      str = fsFmtField(str, 15*(tz%4), 0);
      str = fsFmtField(str, tz/4, ':');
      30:	................
  }
}  // namespace FsDateTime
//------------------------------------------------------------------------------
static char* fsFmtField(char* str, uint16_t n, char sep) {
  if (sep) {
    *--str = sep;
      40:	................
  }
  str = fmtBase10(str, n);
  if (n < 10) {
    *--str = '0';
      50:	................
      tz = -tz;
    } else {
      sign = '+';
      tz &= 0X7F;
    }
    if (tz) {
      60:	................
      str = fsFmtField(str, 15*(tz%4), 0);
      str = fsFmtField(str, tz/4, ':');
      *--str = sign;
    }
    *--str = 'C';
    *--str = 'T';
      70:	................
    } else {
      sign = '+';
      tz &= 0X7F;
    }
    if (tz) {
      str = fsFmtField(str, 15*(tz%4), 0);
      80:	................
      90:	................
      a0:	................
      b0:	................
      c0:	................
      d0:	................
      e0:	................
      f0:	................
     100:	................
     110:	................
     120:	................
     130:	................
     140:	................
     150:	................
     160:	................
     170:	................
     180:	................
     190:	................
     1a0:	................
     1b0:	................
     1c0:	................

000001d0 <ResetHandler>:
	volatile int n;
#endif
	//volatile int count;

#ifdef KINETISK
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ1;
     1d0:	ldr	r3, [pc, #356]	; (338 <ResetHandler+0x168>)
     1d2:	movw	r2, #50464	; 0xc520
#else
// hopefully all others fit into startup section (below 0x400)
__attribute__ ((section(".startup"),optimize("-Os")))
#endif
void ResetHandler(void)
{
     1d6:	push	{r4, lr}
	volatile int n;
#endif
	//volatile int count;

#ifdef KINETISK
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ1;
     1d8:	strh	r2, [r3, #0]
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ2;
     1da:	movw	r2, #55592	; 0xd928
     1de:	strh	r2, [r3, #0]
	__asm__ volatile ("nop");
     1e0:	nop
	__asm__ volatile ("nop");
     1e2:	nop
#endif
	// programs using the watchdog timer or needing to initialize hardware as
	// early as possible can implement startup_early_hook()
	startup_early_hook();
     1e4:	bl	9f00 <startup_early_hook>
#elif defined(__MK20DX256__)
	SIM_SCGC3 = SIM_SCGC3_ADC1 | SIM_SCGC3_FTM2;
	SIM_SCGC5 = 0x00043F82;		// clocks active to all GPIO
	SIM_SCGC6 = SIM_SCGC6_RTC | SIM_SCGC6_FTM0 | SIM_SCGC6_FTM1 | SIM_SCGC6_ADC0 | SIM_SCGC6_FTFL;
#elif defined(__MK64FX512__) || defined(__MK66FX1M0__)
	SIM_SCGC3 = SIM_SCGC3_ADC1 | SIM_SCGC3_FTM2 | SIM_SCGC3_FTM3;
     1e8:	ldr	r3, [pc, #336]	; (33c <ResetHandler+0x16c>)
     1ea:	mov.w	r2, #184549376	; 0xb000000
     1ee:	str	r2, [r3, #0]
	SIM_SCGC5 = 0x00043F82;		// clocks active to all GPIO
     1f0:	ldr	r2, [pc, #332]	; (340 <ResetHandler+0x170>)
     1f2:	str	r2, [r3, #8]
	SIM_SCGC6 = SIM_SCGC6_RTC | SIM_SCGC6_FTM0 | SIM_SCGC6_FTM1 | SIM_SCGC6_ADC0 | SIM_SCGC6_FTFL;
     1f4:	ldr	r2, [pc, #332]	; (344 <ResetHandler+0x174>)
     1f6:	str	r2, [r3, #12]
	SIM_SCGC4 = SIM_SCGC4_USBOTG | 0xF0000030;
	SIM_SCGC5 = 0x00003F82;		// clocks active to all GPIO
	SIM_SCGC6 = SIM_SCGC6_ADC0 | SIM_SCGC6_TPM0 | SIM_SCGC6_TPM1 | SIM_SCGC6_TPM2 | SIM_SCGC6_FTFL;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	SCB_CPACR = 0x00F00000;
     1f8:	ldr	r3, [pc, #332]	; (348 <ResetHandler+0x178>)
     1fa:	mov.w	r2, #15728640	; 0xf00000
     1fe:	str	r2, [r3, #0]
#endif
#if defined(__MK66FX1M0__)
	LMEM_PCCCR = 0x85000003;
     200:	ldr	r3, [pc, #328]	; (34c <ResetHandler+0x17c>)
     202:	ldr	r2, [pc, #332]	; (350 <ResetHandler+0x180>)
     204:	str	r2, [r3, #0]
		RTC_SR = 0;
		RTC_CR = RTC_CR_SC16P | RTC_CR_SC4P | RTC_CR_OSCE;
	}
#endif
	// release I/O pins hold, if we woke up from VLLS mode
	if (PMC_REGSC & PMC_REGSC_ACKISO) PMC_REGSC |= PMC_REGSC_ACKISO;
     206:	ldr	r3, [pc, #332]	; (354 <ResetHandler+0x184>)
     208:	ldrb	r2, [r3, #0]
     20a:	lsls	r1, r2, #28
     20c:	bpl.n	216 <ResetHandler+0x46>
     20e:	ldrb	r2, [r3, #0]
     210:	orr.w	r2, r2, #8
     214:	strb	r2, [r3, #0]

    // since this is a write once register, make it visible to all F_CPU's
    // so we can into other sleep modes in the future at any speed
#if defined(__MK66FX1M0__)
	SMC_PMPROT = SMC_PMPROT_AHSRUN | SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
     216:	ldr	r3, [pc, #320]	; (358 <ResetHandler+0x188>)
#else
	SMC_PMPROT = SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
#endif
    
	// TODO: do this while the PLL is waiting to lock....
	while (dest < &_edata) *dest++ = *src++;
     218:	ldr	r1, [pc, #320]	; (35c <ResetHandler+0x18c>)
	if (PMC_REGSC & PMC_REGSC_ACKISO) PMC_REGSC |= PMC_REGSC_ACKISO;

    // since this is a write once register, make it visible to all F_CPU's
    // so we can into other sleep modes in the future at any speed
#if defined(__MK66FX1M0__)
	SMC_PMPROT = SMC_PMPROT_AHSRUN | SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
     21a:	movs	r2, #170	; 0xaa
     21c:	strb	r2, [r3, #0]
     21e:	ldr	r2, [pc, #320]	; (360 <ResetHandler+0x190>)
     220:	ldr	r3, [pc, #320]	; (364 <ResetHandler+0x194>)
#else
	SMC_PMPROT = SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
#endif
    
	// TODO: do this while the PLL is waiting to lock....
	while (dest < &_edata) *dest++ = *src++;
     222:	cmp	r3, r1
     224:	bcs.n	230 <ResetHandler+0x60>
     226:	ldr.w	r0, [r2, #4]!
     22a:	str.w	r0, [r3], #4
     22e:	b.n	222 <ResetHandler+0x52>
     230:	ldr	r3, [pc, #308]	; (368 <ResetHandler+0x198>)
	dest = &_sbss;
	while (dest < &_ebss) *dest++ = 0;
     232:	ldr	r1, [pc, #312]	; (36c <ResetHandler+0x19c>)
     234:	movs	r2, #0
     236:	cmp	r3, r1
     238:	bcs.n	240 <ResetHandler+0x70>
     23a:	str.w	r2, [r3], #4
     23e:	b.n	236 <ResetHandler+0x66>

	// default all interrupts to medium priority level
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = _VectorsFlash[i];
     240:	ldr	r1, [pc, #300]	; (370 <ResetHandler+0x1a0>)
     242:	ldr	r2, [pc, #304]	; (374 <ResetHandler+0x1a4>)
     244:	movs	r3, #0
     246:	ldr.w	r0, [r2, r3, lsl #2]
     24a:	str.w	r0, [r1, r3, lsl #2]
     24e:	adds	r3, #1
     250:	cmp	r3, #116	; 0x74
     252:	bne.n	246 <ResetHandler+0x76>
     254:	ldr	r3, [pc, #288]	; (378 <ResetHandler+0x1a8>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
     256:	ldr	r2, [pc, #292]	; (37c <ResetHandler+0x1ac>)
     258:	movs	r1, #128	; 0x80
     25a:	strb.w	r1, [r3], #1
     25e:	cmp	r3, r2
     260:	bne.n	25a <ResetHandler+0x8a>
	SCB_VTOR = (uint32_t)_VectorsRam;	// use vector table in RAM
     262:	ldr	r3, [pc, #284]	; (380 <ResetHandler+0x1b0>)
     264:	ldr	r2, [pc, #264]	; (370 <ResetHandler+0x1a0>)
     266:	str	r2, [r3, #0]
	//  C6[PLLS] bit is written to 0
	//  C2[LP] bit is written to 1
#else
    #if defined(KINETISK)
    // enable capacitors for crystal
    OSC0_CR = OSC_SC8P | OSC_SC2P | OSC_ERCLKEN;
     268:	ldr	r3, [pc, #280]	; (384 <ResetHandler+0x1b4>)
     26a:	movs	r2, #138	; 0x8a
     26c:	strb	r2, [r3, #0]
    #elif defined(KINETISL)
    // enable capacitors for crystal
    OSC0_CR = OSC_SC8P | OSC_SC2P | OSC_ERCLKEN;
    #endif
	// enable osc, 8-32 MHz range, low power mode
	MCG_C2 = MCG_C2_RANGE0(2) | MCG_C2_EREFS;
     26e:	sub.w	r3, r3, #4096	; 0x1000
     272:	movs	r2, #36	; 0x24
     274:	strb	r2, [r3, #1]
	// switch to crystal as clock source, FLL input = 16 MHz / 512
	MCG_C1 =  MCG_C1_CLKS(2) | MCG_C1_FRDIV(4);
     276:	movs	r2, #160	; 0xa0
     278:	strb	r2, [r3, #0]
	// wait for crystal oscillator to begin
	while ((MCG_S & MCG_S_OSCINIT0) == 0) ;
     27a:	ldrb	r2, [r3, #6]
     27c:	lsls	r2, r2, #30
     27e:	bpl.n	27a <ResetHandler+0xaa>
	// wait for FLL to use oscillator
	while ((MCG_S & MCG_S_IREFST) != 0) ;
     280:	ldrb	r2, [r3, #6]
     282:	lsls	r4, r2, #27
     284:	bmi.n	280 <ResetHandler+0xb0>
	// wait for MCGOUT to use oscillator
	while ((MCG_S & MCG_S_CLKST_MASK) != MCG_S_CLKST(2)) ;
     286:	ldr	r2, [pc, #256]	; (388 <ResetHandler+0x1b8>)
     288:	ldrb	r3, [r2, #6]
     28a:	and.w	r3, r3, #12
     28e:	cmp	r3, #8
     290:	ldr	r3, [pc, #244]	; (388 <ResetHandler+0x1b8>)
     292:	bne.n	288 <ResetHandler+0xb8>
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(2);
    #elif F_CPU == 120000000
	MCG_C5 = MCG_C5_PRDIV0(1);
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(14);
    #elif F_CPU == 96000000 || F_CPU == 48000000 || F_CPU == 24000000
	MCG_C5 = MCG_C5_PRDIV0(1);
     294:	movs	r2, #1
     296:	strb	r2, [r3, #4]
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(8);
     298:	movs	r2, #72	; 0x48
     29a:	strb	r2, [r3, #5]
    #error "This clock speed isn't supported..."
    #endif
   #endif

	// wait for PLL to start using xtal as its input
	while (!(MCG_S & MCG_S_PLLST)) ;
     29c:	ldrb	r2, [r3, #6]
     29e:	lsls	r0, r2, #26
     2a0:	bpl.n	29c <ResetHandler+0xcc>
	// wait for PLL to lock
	while (!(MCG_S & MCG_S_LOCK0)) ;
     2a2:	ldr	r2, [pc, #228]	; (388 <ResetHandler+0x1b8>)
     2a4:	ldrb	r1, [r2, #6]
     2a6:	ldr	r3, [pc, #224]	; (388 <ResetHandler+0x1b8>)
     2a8:	lsls	r1, r1, #25
     2aa:	bpl.n	2a4 <ResetHandler+0xd4>
	#endif
	SIM_CLKDIV2 = SIM_CLKDIV2_USBDIV(4) | SIM_CLKDIV2_USBFRAC;
#elif F_CPU == 96000000
	// config divisors: 96 MHz core, 48 MHz bus, 24 MHz flash, USB = 96 / 2
	#if F_BUS == 48000000
	SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1(0) | SIM_CLKDIV1_OUTDIV2(1) | SIM_CLKDIV1_OUTDIV4(3);
     2ac:	ldr	r2, [pc, #220]	; (38c <ResetHandler+0x1bc>)
     2ae:	ldr	r1, [pc, #224]	; (390 <ResetHandler+0x1c0>)
     2b0:	str	r1, [r2, #0]
	#elif F_BUS == 96000000
	SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1(0) | SIM_CLKDIV1_OUTDIV2(0) | SIM_CLKDIV1_OUTDIV4(3);
	#else
	#error "This F_CPU & F_BUS combination is not supported"
	#endif
	SIM_CLKDIV2 = SIM_CLKDIV2_USBDIV(1);
     2b2:	movs	r1, #2
     2b4:	str	r1, [r2, #4]
#error "Error, F_CPU must be 256, 240, 216, 192, 180, 168, 144, 120, 96, 72, 48, 24, 16, 8, 4, or 2 MHz"
#endif

#if F_CPU > 16000000
	// switch to PLL as clock source, FLL input = 16 MHz / 512
	MCG_C1 = MCG_C1_CLKS(0) | MCG_C1_FRDIV(4);
     2b6:	movs	r2, #32
     2b8:	strb	r2, [r3, #0]
	// wait for PLL clock to be used
	while ((MCG_S & MCG_S_CLKST_MASK) != MCG_S_CLKST(3)) ;
     2ba:	ldrb	r2, [r3, #6]
     2bc:	and.w	r2, r2, #12
     2c0:	cmp	r2, #12
     2c2:	bne.n	2ba <ResetHandler+0xea>
	#if F_CPU == 256000000 || F_CPU == 216000000 || F_CPU == 180000000
	// USB uses IRC48
	SIM_SOPT2 = SIM_SOPT2_USBSRC | SIM_SOPT2_IRC48SEL | SIM_SOPT2_TRACECLKSEL | SIM_SOPT2_CLKOUTSEL(6);
	#else
	// USB uses PLL clock
	SIM_SOPT2 = SIM_SOPT2_USBSRC | SIM_SOPT2_PLLFLLSEL | SIM_SOPT2_TRACECLKSEL | SIM_SOPT2_CLKOUTSEL(6);
     2c4:	ldr	r3, [pc, #204]	; (394 <ResetHandler+0x1c4>)
     2c6:	ldr	r2, [pc, #208]	; (398 <ResetHandler+0x1c8>)
     2c8:	str	r2, [r3, #0]
#endif

#if defined(__MK66FX1M0__)
	// If the RTC oscillator isn't enabled, get it started.  For Teensy 3.6
	// we don't do this early.  See comment above about slow rising power.
	if (!(RTC_CR & RTC_CR_OSCE)) {
     2ca:	ldr	r2, [pc, #208]	; (39c <ResetHandler+0x1cc>)
     2cc:	ldr	r4, [pc, #208]	; (3a0 <ResetHandler+0x1d0>)
     2ce:	ldr	r3, [r2, #0]
     2d0:	ands.w	r3, r3, #256	; 0x100
     2d4:	bne.n	2de <ResetHandler+0x10e>
		RTC_SR = 0;
     2d6:	str	r3, [r4, #0]
		RTC_CR = RTC_CR_SC16P | RTC_CR_SC4P | RTC_CR_OSCE;
     2d8:	mov.w	r3, #5376	; 0x1500
     2dc:	str	r3, [r2, #0]
	}
#endif

	// initialize the SysTick counter
	SYST_RVR = (F_CPU / 1000) - 1;
     2de:	ldr	r3, [pc, #196]	; (3a4 <ResetHandler+0x1d4>)
     2e0:	ldr	r2, [pc, #196]	; (3a8 <ResetHandler+0x1d8>)
     2e2:	str	r2, [r3, #0]
	SYST_CVR = 0;
     2e4:	movs	r2, #0
     2e6:	str	r2, [r3, #4]
	SYST_CSR = SYST_CSR_CLKSOURCE | SYST_CSR_TICKINT | SYST_CSR_ENABLE;
     2e8:	movs	r2, #7
     2ea:	str.w	r2, [r3, #-4]
	SCB_SHPR3 = 0x20200000;  // Systick = priority 32
     2ee:	ldr	r2, [pc, #188]	; (3ac <ResetHandler+0x1dc>)
     2f0:	str.w	r2, [r3, #3340]	; 0xd0c

	//init_pins();
	__enable_irq();
     2f4:	cpsie	i

	_init_Teensyduino_internal_();
     2f6:	bl	a0b8 <_init_Teensyduino_internal_>

#if defined(KINETISK)
	// RTC initialization
	if (RTC_SR & RTC_SR_TIF) {
     2fa:	ldr	r3, [r4, #0]
     2fc:	lsls	r2, r3, #31
     2fe:	bpl.n	30c <ResetHandler+0x13c>
		// compiled-in time will be stale.  Write a special
		// flag into the VBAT register file indicating the
		// RTC is set with known-stale time and should be
		// updated when fresh time is known.
		#if ARDUINO >= 10600
		rtc_set((uint32_t)&__rtc_localtime);
     300:	ldr	r0, [pc, #172]	; (3b0 <ResetHandler+0x1e0>)
     302:	bl	9fa8 <rtc_set>
		#else
		rtc_set(TIME_T);
		#endif
		*(uint32_t *)0x4003E01C = 0x5A94C3A5;
     306:	ldr	r3, [pc, #172]	; (3b4 <ResetHandler+0x1e4>)
     308:	ldr	r2, [pc, #172]	; (3b8 <ResetHandler+0x1e8>)
     30a:	str	r2, [r3, #0]
	}
	if ((RCM_SRS0 & RCM_SRS0_PIN) && (*(uint32_t *)0x4003E01C == 0x5A94C3A5)) {
     30c:	ldr	r3, [pc, #172]	; (3bc <ResetHandler+0x1ec>)
     30e:	ldrb	r3, [r3, #0]
     310:	lsls	r3, r3, #25
     312:	bpl.n	328 <ResetHandler+0x158>
     314:	ldr	r4, [pc, #156]	; (3b4 <ResetHandler+0x1e4>)
     316:	ldr	r3, [pc, #160]	; (3b8 <ResetHandler+0x1e8>)
     318:	ldr	r2, [r4, #0]
     31a:	cmp	r2, r3
     31c:	bne.n	328 <ResetHandler+0x158>
		// Our compiled-in time will be very fresh, so set
		// the RTC with this, and clear the VBAT resister file
		// data so we don't mess with the time after it's been
		// set well.
		#if ARDUINO >= 10600
		rtc_set((uint32_t)&__rtc_localtime);
     31e:	ldr	r0, [pc, #144]	; (3b0 <ResetHandler+0x1e0>)
     320:	bl	9fa8 <rtc_set>
		#else
		rtc_set(TIME_T);
		#endif
		*(uint32_t *)0x4003E01C = 0;
     324:	movs	r3, #0
     326:	str	r3, [r4, #0]
	}
#endif

	__libc_init_array();
     328:	bl	c14c <__libc_init_array>

	startup_late_hook();
     32c:	bl	9f0c <startup_late_hook>
	main();
     330:	bl	b32c <main>
     334:	b.n	334 <ResetHandler+0x164>
     336:	nop
     338:	.word	0x4005200e
     33c:	.word	0x40048030
     340:	.word	0x00043f82
     344:	.word	0x2b000001
     348:	.word	0xe000ed88
     34c:	.word	0xe0082000
     350:	.word	0x85000003
     354:	.word	0x4007d002
     358:	.word	0x4007e000
     35c:	.word	0x1fff1450
     360:	.word	0x00010cc0
     364:	.word	0x1fff0970
     368:	.word	0x1fff1450
     36c:	.word	0x1fff8dc8
     370:	.word	0x1fff0200
     374:	.word	0x00000000
     378:	.word	0xe000e400
     37c:	.word	0xe000e464
     380:	.word	0xe000ed08
     384:	.word	0x40065000
     388:	.word	0x40064000
     38c:	.word	0x40048044
     390:	.word	0x01030000
     394:	.word	0x40048004
     398:	.word	0x000510c0
     39c:	.word	0x4003d010
     3a0:	.word	0x4003d014
     3a4:	.word	0xe000e014
     3a8:	.word	0x000176ff
     3ac:	.word	0x20200000
     3b0:	.word	0x00000031
     3b4:	.word	0x4003e01c
     3b8:	.word	0x5a94c3a5
     3bc:	.word	0x4007f000
     3c0:	.word	0xffffffff
     3c4:	.word	0xffffffff
     3c8:	.word	0xffffffff
     3cc:	.word	0xffffffff
     3d0:	.word	0xffffffff
     3d4:	.word	0xffffffff
     3d8:	.word	0xffffffff
     3dc:	.word	0xffffffff
     3e0:	.word	0xffffffff
     3e4:	.word	0xffffffff
     3e8:	.word	0xffffffff
     3ec:	.word	0xffffffff
     3f0:	.word	0xffffffff
     3f4:	.word	0xffffffff
     3f8:	.word	0xffffffff
     3fc:	.word	0xffffffff

00000400 <flashconfigbytes>:
     400:	................

00000410 <__do_global_dtors_aux>:
     410:	push	{r4, lr}
     412:	ldr	r4, [pc, #20]	; (428 <__do_global_dtors_aux+0x18>)
     414:	ldrb	r3, [r4, #0]
     416:	cbnz	r3, 426 <__do_global_dtors_aux+0x16>
     418:	ldr	r3, [pc, #16]	; (42c <__do_global_dtors_aux+0x1c>)
     41a:	cbz	r3, 422 <__do_global_dtors_aux+0x12>
     41c:	ldr	r0, [pc, #16]	; (430 <__do_global_dtors_aux+0x20>)
     41e:	nop.w
     422:	movs	r3, #1
     424:	strb	r3, [r4, #0]
     426:	pop	{r4, pc}
     428:	.word	0x1fff1450
     42c:	.word	0x00000000
     430:	.word	0x00010cbc

00000434 <frame_dummy>:
     434:	ldr	r3, [pc, #32]	; (458 <frame_dummy+0x24>)
     436:	push	{r4, lr}
     438:	cbz	r3, 442 <frame_dummy+0xe>
     43a:	ldr	r1, [pc, #32]	; (45c <frame_dummy+0x28>)
     43c:	ldr	r0, [pc, #32]	; (460 <frame_dummy+0x2c>)
     43e:	nop.w
     442:	ldr	r0, [pc, #32]	; (464 <frame_dummy+0x30>)
     444:	ldr	r3, [r0, #0]
     446:	cbnz	r3, 44a <frame_dummy+0x16>
     448:	pop	{r4, pc}
     44a:	ldr	r3, [pc, #28]	; (468 <frame_dummy+0x34>)
     44c:	cmp	r3, #0
     44e:	beq.n	448 <frame_dummy+0x14>
     450:	ldmia.w	sp!, {r4, lr}
     454:	bx	r3
     456:	nop
     458:	.word	0x00000000
     45c:	.word	0x1fff1454
     460:	.word	0x00010cbc
     464:	.word	0x1fff1450
     468:	.word	0x00000000

0000046c <Print::availableForWrite()>:
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
	virtual size_t write(const uint8_t *buffer, size_t size);
	virtual int availableForWrite(void)		{ return 0; }
     46c:	movs	r0, #0
     46e:	bx	lr

00000470 <Print::flush()>:
	virtual void flush()				{ }
     470:	bx	lr
     472:	nop

00000474 <File::read(void*, unsigned int)>:
	unsigned int getRefcount() { // testing only
		return refcount;
	}
#endif
	virtual size_t read(void *buf, size_t nbyte) {
		return (f) ? f->read(buf, nbyte) : 0;
     474:	ldr	r0, [r0, #16]
     476:	cbz	r0, 47e <File::read(void*, unsigned int)+0xa>
     478:	ldr	r3, [r0, #0]
     47a:	ldr	r3, [r3, #40]	; 0x28
     47c:	bx	r3
	}
     47e:	bx	lr

00000480 <File::write(void const*, unsigned int)>:
	virtual size_t write(const void *buf, size_t size) {
		return (f) ? f->write(buf, size) : 0;
     480:	ldr	r0, [r0, #16]
     482:	cbz	r0, 48a <File::write(void const*, unsigned int)+0xa>
     484:	ldr	r3, [r0, #0]
     486:	ldr	r3, [r3, #44]	; 0x2c
     488:	bx	r3
	}
     48a:	bx	lr

0000048c <File::available()>:
	virtual int available() {
		return (f) ? f->available() : 0;
     48c:	ldr	r0, [r0, #16]
     48e:	cbz	r0, 496 <File::available()+0xa>
     490:	ldr	r3, [r0, #0]
     492:	ldr	r3, [r3, #16]
     494:	bx	r3
	}
     496:	bx	lr

00000498 <File::peek()>:
	virtual int peek() {
		return (f) ? f->peek() : -1;
     498:	ldr	r0, [r0, #16]
     49a:	cbz	r0, 4a2 <File::peek()+0xa>
     49c:	ldr	r3, [r0, #0]
     49e:	ldr	r3, [r3, #24]
     4a0:	bx	r3
	}
     4a2:	mov.w	r0, #4294967295
     4a6:	bx	lr

000004a8 <File::flush()>:
	virtual void flush() {
		if (f) f->flush();
     4a8:	ldr	r0, [r0, #16]
     4aa:	cbz	r0, 4b2 <File::flush()+0xa>
     4ac:	ldr	r3, [r0, #0]
     4ae:	ldr	r3, [r3, #12]
     4b0:	bx	r3
     4b2:	bx	lr

000004b4 <File::seek(unsigned long, int)>:
	}
	virtual bool seek(uint32_t pos, int mode) {
		return (f) ? f->seek(pos, mode) : false;
     4b4:	ldr	r0, [r0, #16]
     4b6:	cbz	r0, 4be <File::seek(unsigned long, int)+0xa>
     4b8:	ldr	r3, [r0, #0]
     4ba:	ldr	r3, [r3, #48]	; 0x30
     4bc:	bx	r3
	}
     4be:	bx	lr

000004c0 <File::position()>:
	virtual uint32_t position() {
		return (f) ? f->position() : 0;
     4c0:	ldr	r0, [r0, #16]
     4c2:	cbz	r0, 4ca <File::position()+0xa>
     4c4:	ldr	r3, [r0, #0]
     4c6:	ldr	r3, [r3, #52]	; 0x34
     4c8:	bx	r3
	}
     4ca:	bx	lr

000004cc <File::size()>:
	virtual uint32_t size() {
		return (f) ? f->size() : 0;
     4cc:	ldr	r0, [r0, #16]
     4ce:	cbz	r0, 4d6 <File::size()+0xa>
     4d0:	ldr	r3, [r0, #0]
     4d2:	ldr	r3, [r3, #56]	; 0x38
     4d4:	bx	r3
	}
     4d6:	bx	lr

000004d8 <File::close()>:
	virtual void close() {
		if (f) f->close();
     4d8:	ldr	r0, [r0, #16]
     4da:	cbz	r0, 4e2 <File::close()+0xa>
     4dc:	ldr	r3, [r0, #0]
     4de:	ldr	r3, [r3, #60]	; 0x3c
     4e0:	bx	r3
     4e2:	bx	lr

000004e4 <File::operator bool()>:
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
     4e4:	ldr	r0, [r0, #16]
     4e6:	cbz	r0, 4ee <File::operator bool()+0xa>
     4e8:	ldr	r3, [r0, #0]
     4ea:	ldr	r3, [r3, #64]	; 0x40
     4ec:	bx	r3
	}
     4ee:	bx	lr

000004f0 <File::name()>:
	virtual const char* name() {
		return (f) ? f->name() : "";
     4f0:	ldr	r0, [r0, #16]
     4f2:	cbz	r0, 4fa <File::name()+0xa>
     4f4:	ldr	r3, [r0, #0]
     4f6:	ldr	r3, [r3, #68]	; 0x44
     4f8:	bx	r3
	}
     4fa:	ldr	r0, [pc, #4]	; (500 <File::name()+0x10>)
     4fc:	bx	lr
     4fe:	nop
     500:	.word	0x00010444

00000504 <File::isDirectory()>:
	virtual bool isDirectory() {
		return (f) ? f->isDirectory() : false;
     504:	ldr	r0, [r0, #16]
     506:	cbz	r0, 50e <File::isDirectory()+0xa>
     508:	ldr	r3, [r0, #0]
     50a:	ldr	r3, [r3, #72]	; 0x48
     50c:	bx	r3
	}
     50e:	bx	lr

00000510 <File::openNextFile(unsigned char)>:
	virtual File openNextFile(uint8_t mode=0) {
     510:	push	{r3, r4, r5, lr}
		return (f) ? f->openNextFile(mode) : *this;
     512:	ldr	r3, [r1, #16]
		return (f) ? f->name() : "";
	}
	virtual bool isDirectory() {
		return (f) ? f->isDirectory() : false;
	}
	virtual File openNextFile(uint8_t mode=0) {
     514:	mov	r4, r0
		return (f) ? f->openNextFile(mode) : *this;
     516:	cbz	r3, 524 <File::openNextFile(unsigned char)+0x14>
     518:	ldr	r5, [r3, #0]
     51a:	mov	r1, r3
     51c:	ldr	r3, [r5, #76]	; 0x4c
     51e:	blx	r3
	}
     520:	mov	r0, r4
     522:	pop	{r3, r4, r5, pc}
#include "Print.h"

class Stream : public Print
{
  public:
	constexpr Stream() : _timeout(1000), read_error(0) {}
     524:	mov.w	r0, #1000	; 0x3e8
			//"File(File *file) constructor only accepts pointers "
			//"to derived classes, not File itself");
		f = file;
		if (f) f->refcount++;
	}
	File(const File &file) {
     528:	ldr	r2, [pc, #24]	; (544 <File::openNextFile(unsigned char)+0x34>)
class __FlashStringHelper;

class Print
{
  public:
	constexpr Print() : write_error(0) {}
     52a:	strb	r3, [r4, #4]
     52c:	strb	r3, [r4, #12]
     52e:	str	r0, [r4, #8]
     530:	str	r2, [r4, #0]
		//Serial.println("File copy constructor");
		//static int copycount=0;
		//if (++copycount > 20) while (1) ;
		f = file.f;
     532:	ldr	r3, [r1, #16]
     534:	str	r3, [r4, #16]
		if (f) f->refcount++;
     536:	cmp	r3, #0
     538:	beq.n	520 <File::openNextFile(unsigned char)+0x10>
     53a:	ldr	r2, [r3, #16]
     53c:	adds	r2, #1
     53e:	str	r2, [r3, #16]
	virtual bool isDirectory() {
		return (f) ? f->isDirectory() : false;
	}
	virtual File openNextFile(uint8_t mode=0) {
		return (f) ? f->openNextFile(mode) : *this;
	}
     540:	mov	r0, r4
     542:	pop	{r3, r4, r5, pc}
     544:	.word	0x0001037c

00000548 <File::rewindDirectory()>:
	virtual void rewindDirectory(void) {
		if (f) f->rewindDirectory();
     548:	ldr	r0, [r0, #16]
     54a:	cbz	r0, 552 <File::rewindDirectory()+0xa>
     54c:	ldr	r3, [r0, #0]
     54e:	ldr	r3, [r3, #80]	; 0x50
     550:	bx	r3
     552:	bx	lr

00000554 <File::read()>:
	}
	bool seek(uint32_t pos) {
		return seek(pos, SeekSet);
	}
	int read() {
		if (!f) return -1;
     554:	ldr	r0, [r0, #16]
     556:	cbz	r0, 57a <File::read()+0x26>
		if (f) f->rewindDirectory();
	}
	bool seek(uint32_t pos) {
		return seek(pos, SeekSet);
	}
	int read() {
     558:	push	{lr}
		if (!f) return -1;
		unsigned char b;
		if (f->read(&b, 1) < 1) return -1;
     55a:	ldr	r3, [r0, #0]
		if (f) f->rewindDirectory();
	}
	bool seek(uint32_t pos) {
		return seek(pos, SeekSet);
	}
	int read() {
     55c:	sub	sp, #12
		if (!f) return -1;
		unsigned char b;
		if (f->read(&b, 1) < 1) return -1;
     55e:	ldr	r3, [r3, #40]	; 0x28
     560:	movs	r2, #1
     562:	add.w	r1, sp, #7
     566:	blx	r3
     568:	cbz	r0, 574 <File::read()+0x20>
		return b;
     56a:	ldrb.w	r0, [sp, #7]
	}
     56e:	add	sp, #12
     570:	ldr.w	pc, [sp], #4
	}
	bool seek(uint32_t pos) {
		return seek(pos, SeekSet);
	}
	int read() {
		if (!f) return -1;
     574:	mov.w	r0, #4294967295
     578:	b.n	56e <File::read()+0x1a>
     57a:	mov.w	r0, #4294967295
		unsigned char b;
		if (f->read(&b, 1) < 1) return -1;
		return b;
	}
     57e:	bx	lr

00000580 <File::write(unsigned char)>:
	size_t write(uint8_t b) {
     580:	push	{r4, lr}
     582:	sub	sp, #8
     584:	add	r3, sp, #8
		return write(&b, 1);
     586:	ldr	r2, [r0, #0]
		if (!f) return -1;
		unsigned char b;
		if (f->read(&b, 1) < 1) return -1;
		return b;
	}
	size_t write(uint8_t b) {
     588:	strb.w	r1, [r3, #-1]!
		return write(&b, 1);
     58c:	ldr	r4, [r2, #44]	; 0x2c
     58e:	mov	r1, r3
     590:	movs	r2, #1
     592:	blx	r4
	}
     594:	add	sp, #8
     596:	pop	{r4, pc}

00000598 <SDFile::operator bool()>:
  bool isHidden() {
    return m_fFile ? m_fFile->isHidden() :
           m_xFile ? m_xFile->isHidden() : false;
  }
  /** \return True if this is an open file/directory else false. */
  bool isOpen() {return m_fFile || m_xFile;}
     598:	ldr	r3, [r0, #92]	; 0x5c
     59a:	cbz	r3, 5a0 <SDFile::operator bool()+0x8>
     59c:	movs	r0, #1
		}
		sdfatfile.close();
	}
	virtual operator bool() {
		return sdfatfile.isOpen();
	}
     59e:	bx	lr
     5a0:	ldr	r0, [r0, #96]	; 0x60
     5a2:	adds	r0, #0
     5a4:	it	ne
     5a6:	movne	r0, #1
     5a8:	bx	lr
     5aa:	nop

000005ac <File::whoami()>:
	}
	virtual ~File() {
		invalidate();
	}
#ifdef FILE_WHOAMI
	virtual void whoami() { // testing only
     5ac:	push	{r4, lr}
     5ae:	mov	r4, r0
		Serial.printf("  File    this=%x, f=%x\n", (int)this, (int)f);
     5b0:	mov	r2, r0
     5b2:	ldr	r3, [r0, #16]
     5b4:	ldr	r1, [pc, #20]	; (5cc <File::whoami()+0x20>)
     5b6:	ldr	r0, [pc, #24]	; (5d0 <File::whoami()+0x24>)
     5b8:	bl	b280 <Print::printf(char const*, ...)>
		if (f) f->whoami();
     5bc:	ldr	r0, [r4, #16]
     5be:	cbz	r0, 5ca <File::whoami()+0x1e>
     5c0:	ldr	r3, [r0, #0]
	}
     5c2:	ldmia.w	sp!, {r4, lr}
		invalidate();
	}
#ifdef FILE_WHOAMI
	virtual void whoami() { // testing only
		Serial.printf("  File    this=%x, f=%x\n", (int)this, (int)f);
		if (f) f->whoami();
     5c6:	ldr	r3, [r3, #36]	; 0x24
     5c8:	bx	r3
     5ca:	pop	{r4, pc}
     5cc:	.word	0x0001042c
     5d0:	.word	0x1fff09a4

000005d4 <SDFile::whoami()>:
		if (filename) free(filename);
	}
#ifdef FILE_WHOAMI
	virtual void whoami() {
		Serial.printf("   SDFile this=%x, refcount=%u\n",
			(int)this, getRefcount());
     5d4:	mov	r2, r0
     5d6:	ldr	r3, [r0, #16]
     5d8:	ldr	r1, [pc, #4]	; (5e0 <SDFile::whoami()+0xc>)
     5da:	ldr	r0, [pc, #8]	; (5e4 <SDFile::whoami()+0x10>)
     5dc:	b.w	b280 <Print::printf(char const*, ...)>
     5e0:	.word	0x00010448
     5e4:	.word	0x1fff09a4

000005e8 <SDFile::close()>:
		return sdfatfile.curPosition();
	}
	virtual uint32_t size() {
		return sdfatfile.size();
	}
	virtual void close() {
     5e8:	push	{r4, lr}
     5ea:	mov	r4, r0
		if (filename) {
     5ec:	ldr	r0, [r0, #100]	; 0x64
     5ee:	cbz	r0, 5f8 <SDFile::close()+0x10>
			free(filename);
     5f0:	bl	c1ac <free>
			filename = nullptr;
     5f4:	movs	r3, #0
     5f6:	str	r3, [r4, #100]	; 0x64
		}
		sdfatfile.close();
     5f8:	add.w	r0, r4, #36	; 0x24
	}
     5fc:	ldmia.w	sp!, {r4, lr}
	virtual void close() {
		if (filename) {
			free(filename);
			filename = nullptr;
		}
		sdfatfile.close();
     600:	b.w	8060 <FsBaseFile::close()>

00000604 <SDFile::openNextFile(unsigned char)>:
		return filename;
	}
	virtual boolean isDirectory(void) {
		return sdfatfile.isDirectory();
	}
	virtual File openNextFile(uint8_t mode=0) {
     604:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     608:	movs	r3, #0
     60a:	sub	sp, #80	; 0x50
   * \param[in] oflag open flags.
   * \return a FatStream object.
   */
  FsFile openNextFile(oflag_t oflag = O_RDONLY) {
    FsFile tmpFile;
    tmpFile.openNext(this, oflag);
     60c:	mov	r2, r3
     60e:	mov	r5, r0
     610:	adds	r1, #36	; 0x24
     612:	add	r0, sp, #16
     614:	mov.w	r4, #1000	; 0x3e8
};
/**
 * \class FsFile
 * \brief FsBaseFile file with Arduino Stream.
 */
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
     618:	ldr	r7, [pc, #148]	; (6b0 <SDFile::openNextFile(unsigned char)+0xac>)
     61a:	strb.w	r3, [sp, #4]
     61e:	strb.w	r3, [sp, #12]
 * \class FsBaseFile
 * \brief FsBaseFile class.
 */
class FsBaseFile {
 public:
  FsBaseFile() : m_fFile(nullptr), m_xFile(nullptr) {}
     622:	str	r3, [sp, #72]	; 0x48
     624:	str	r3, [sp, #76]	; 0x4c
     626:	str	r4, [sp, #8]
};
/**
 * \class FsFile
 * \brief FsBaseFile file with Arduino Stream.
 */
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
     628:	str	r7, [sp, #0]
   * \param[in] oflag open flags.
   * \return a FatStream object.
   */
  FsFile openNextFile(oflag_t oflag = O_RDONLY) {
    FsFile tmpFile;
    tmpFile.openNext(this, oflag);
     62a:	bl	8108 <FsBaseFile::openNext(FsBaseFile*, int)>
  bool isHidden() {
    return m_fFile ? m_fFile->isHidden() :
           m_xFile ? m_xFile->isHidden() : false;
  }
  /** \return True if this is an open file/directory else false. */
  bool isOpen() {return m_fFile || m_xFile;}
     62e:	ldr	r3, [sp, #72]	; 0x48
     630:	cmp	r3, #0
     632:	beq.n	69a <SDFile::openNextFile(unsigned char)+0x96>
		SDFAT_FILE file = sdfatfile.openNextFile();
		if (file) return File(new SDFile(file));
     634:	movs	r0, #104	; 0x68
     636:	bl	b340 <operator new(unsigned int)>
     63a:	mov	r4, r0
//#define BYTE 0
//#endif

class __FlashStringHelper;

class Print
     63c:	ldrb.w	r6, [sp, #4]
#define Stream_h

#include <inttypes.h>
#include "Print.h"

class Stream : public Print
     640:	ldr	r2, [sp, #8]
     642:	ldrb.w	r3, [sp, #12]
#endif

class SDFile : public File
{
public:
	SDFile(const SDFAT_FILE &file) : sdfatfile(file), filename(nullptr) { }
     646:	ldr	r0, [pc, #108]	; (6b4 <SDFile::openNextFile(unsigned char)+0xb0>)
     648:	ldr	r1, [pc, #108]	; (6b8 <SDFile::openNextFile(unsigned char)+0xb4>)
     64a:	strb	r6, [r4, #24]
{
  public:
	constexpr Stream() : _timeout(1000), read_error(0) {}
     64c:	mov.w	r8, #1000	; 0x3e8
{
  public:
	constexpr Print() : write_error(0) {}
     650:	movs	r6, #0
     652:	str	r0, [r4, #0]
#define Stream_h

#include <inttypes.h>
#include "Print.h"

class Stream : public Print
     654:	str	r1, [r4, #20]
     656:	str	r2, [r4, #28]
     658:	strb.w	r3, [r4, #32]
/**
 * \class StreamFile
 * \brief StreamFile class.
 */
template<class BaseFile, typename PosType>
class StreamFile : public stream_t, public BaseFile {
     65c:	add.w	r0, r4, #36	; 0x24
     660:	add	r1, sp, #16
     662:	strb	r6, [r4, #4]
{
  public:
	constexpr Stream() : _timeout(1000), read_error(0) {}
     664:	strb	r6, [r4, #12]

#define FILE_WHOAMI

class File : public Stream {
public:
	constexpr File() : f(nullptr) { }
     666:	str	r6, [r4, #16]
     668:	str.w	r8, [r4, #8]
     66c:	bl	7fe8 <FsBaseFile::FsBaseFile(FsBaseFile const&)>
		// or is_base_of
		//static_assert(std::is_same<decltype(*file),File>::value,
			//"File(File *file) constructor only accepts pointers "
			//"to derived classes, not File itself");
		f = file;
		if (f) f->refcount++;
     670:	ldr	r3, [r4, #16]
#define FILE_WHOAMI

class File : public Stream {
public:
	constexpr File() : f(nullptr) { }
	File(File *file) {
     672:	ldr	r2, [pc, #72]	; (6bc <SDFile::openNextFile(unsigned char)+0xb8>)
};
/**
 * \class FsFile
 * \brief FsBaseFile file with Arduino Stream.
 */
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
     674:	str	r7, [r4, #20]
		// or is_base_of
		//static_assert(std::is_same<decltype(*file),File>::value,
			//"File(File *file) constructor only accepts pointers "
			//"to derived classes, not File itself");
		f = file;
		if (f) f->refcount++;
     676:	adds	r3, #1
     678:	str	r6, [r4, #100]	; 0x64
     67a:	strb	r6, [r5, #4]
     67c:	str.w	r8, [r5, #8]
     680:	strb	r6, [r5, #12]
		// can we use is_same or is_polymorphic with static_assert?
		// or is_base_of
		//static_assert(std::is_same<decltype(*file),File>::value,
			//"File(File *file) constructor only accepts pointers "
			//"to derived classes, not File itself");
		f = file;
     682:	str	r4, [r5, #16]
		if (f) f->refcount++;
     684:	str	r3, [r4, #16]
#define FILE_WHOAMI

class File : public Stream {
public:
	constexpr File() : f(nullptr) { }
	File(File *file) {
     686:	str	r2, [r5, #0]
     688:	ldr	r3, [pc, #52]	; (6c0 <SDFile::openNextFile(unsigned char)+0xbc>)
     68a:	str	r3, [sp, #0]
 */
class FsBaseFile {
 public:
  FsBaseFile() : m_fFile(nullptr), m_xFile(nullptr) {}

  ~FsBaseFile() {close();}
     68c:	add	r0, sp, #16
     68e:	bl	8060 <FsBaseFile::close()>
	}
	virtual File openNextFile(uint8_t mode=0) {
		SDFAT_FILE file = sdfatfile.openNextFile();
		if (file) return File(new SDFile(file));
		return File();
	}
     692:	mov	r0, r5
     694:	add	sp, #80	; 0x50
     696:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  bool isHidden() {
    return m_fFile ? m_fFile->isHidden() :
           m_xFile ? m_xFile->isHidden() : false;
  }
  /** \return True if this is an open file/directory else false. */
  bool isOpen() {return m_fFile || m_xFile;}
     69a:	ldr	r3, [sp, #76]	; 0x4c
     69c:	cmp	r3, #0
     69e:	bne.n	634 <SDFile::openNextFile(unsigned char)+0x30>

#define FILE_WHOAMI

class File : public Stream {
public:
	constexpr File() : f(nullptr) { }
     6a0:	ldr	r2, [pc, #24]	; (6bc <SDFile::openNextFile(unsigned char)+0xb8>)
     6a2:	strb	r3, [r5, #4]
     6a4:	str	r4, [r5, #8]
     6a6:	strb	r3, [r5, #12]
     6a8:	str	r3, [r5, #16]
     6aa:	str	r2, [r5, #0]
     6ac:	b.n	688 <SDFile::openNextFile(unsigned char)+0x84>
     6ae:	nop
     6b0:	.word	0x00010358
     6b4:	.word	0x000103d8
     6b8:	.word	0x00010310
     6bc:	.word	0x0001037c
     6c0:	.word	0x00010334

000006c4 <DMAChannel::~DMAChannel()>:
	}
	DMAChannel & operator = (const DMASetting &rhs) {
		copy_tcd(TCD, rhs.TCD);
		return *this;
	}
	~DMAChannel() {
     6c4:	push	{r4, lr}
     6c6:	mov	r4, r0
		release();
     6c8:	bl	b16c <DMAChannel::release()>
	}
     6cc:	mov	r0, r4
     6ce:	pop	{r4, pc}

000006d0 <SDFile::available()>:
		return sdfatfile.write(buf, size);
	}
	virtual int peek() {
		return sdfatfile.peek();
	}
	virtual int available() {
     6d0:	ldr	r2, [r0, #92]	; 0x5c
  /** \return number of bytes available from the current position to EOF
   *   or INT_MAX if more than INT_MAX bytes are available.
   */
  int available() {
    return m_fFile ? m_fFile->available() :
           m_xFile ? m_xFile->available() : 0;
     6d2:	cbz	r2, 6ee <SDFile::available()+0x1e>
  void fsetpos(const fspos_t* pos);
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint32_t available32() {
    return isFile() ? fileSize() - curPosition() : 0;
     6d4:	ldrb	r3, [r2, #0]
     6d6:	and.w	r3, r3, #8
     6da:	and.w	r0, r3, #255	; 0xff
     6de:	cbz	r3, 722 <SDFile::available()+0x52>
   * Zero is returned for directory files.
   *
   */
  int available() {
    uint32_t n = available32();
    return n > INT_MAX ? INT_MAX : n;
     6e0:	ldr	r3, [r2, #28]
     6e2:	ldr	r0, [r2, #20]
     6e4:	subs	r0, r3, r0
     6e6:	it	mi
     6e8:	mvnmi.w	r0, #2147483648	; 0x80000000
     6ec:	bx	lr
     6ee:	ldr	r1, [r0, #96]	; 0x60
     6f0:	cbz	r1, 724 <SDFile::available()+0x54>
  }
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint64_t available64() {
    return isFile() ? fileSize() - curPosition() : 0;
     6f2:	ldrb.w	r3, [r1, #49]	; 0x31
     6f6:	and.w	r3, r3, #8
     6fa:	and.w	r0, r3, #255	; 0xff
     6fe:	cbz	r3, 722 <SDFile::available()+0x52>
     700:	ldrd	r2, r3, [r1, #16]
     704:	ldrd	r0, r1, [r1]
     708:	subs	r0, r2, r0
     70a:	push	{r4, r5}
     70c:	sbc.w	r1, r3, r1
     710:	movs	r5, #0
     712:	mvn.w	r4, #2147483648	; 0x80000000
     716:	cmp	r5, r1
     718:	it	eq
     71a:	cmpeq	r4, r0
     71c:	bcs.n	720 <SDFile::available()+0x50>
     71e:	mov	r0, r4
		return sdfatfile.available();
	}
     720:	pop	{r4, r5}
     722:	bx	lr
     724:	mov	r0, r1
     726:	bx	lr

00000728 <StreamFile<FsBaseFile, unsigned long long>::peek()>:
  }
  /** Return the next available byte without consuming it.
   *
   * \return The byte if no error and not at eof else -1;
   */
  int peek() {
     728:	ldr	r3, [r0, #72]	; 0x48
   *
   * \return The byte if no error and not at eof else -1;
   */
  int peek() {
    return m_fFile ? m_fFile->peek() :
           m_xFile ? m_xFile->peek() : -1;
     72a:	cbz	r3, 732 <StreamFile<FsBaseFile, unsigned long long>::peek()+0xa>
     72c:	mov	r0, r3
     72e:	b.w	63ac <FatFile::peek()>
     732:	ldr	r0, [r0, #76]	; 0x4c
     734:	cbz	r0, 73a <StreamFile<FsBaseFile, unsigned long long>::peek()+0x12>
     736:	b.w	44c4 <ExFatFile::peek()>
    return BaseFile::peek();
  }
     73a:	mov.w	r0, #4294967295
     73e:	bx	lr

00000740 <StreamFile<FsBaseFile, unsigned long long>::read()>:
  /** Read the next byte from a file.
   *
   * \return For success return the next byte in the file as an int.
   * If an error occurs or end of file is reached return -1.
   */
  int read() {
     740:	push	{lr}
     742:	ldr	r3, [r0, #72]	; 0x48
     744:	sub	sp, #12
   * read() called before a file has been opened, corrupt file system
   * or an I/O error occurred.
   */
  int read(void* buf, size_t count) {
    return m_fFile ? m_fFile->read(buf, count) :
           m_xFile ? m_xFile->read(buf, count) : -1;
     746:	cbz	r3, 762 <StreamFile<FsBaseFile, unsigned long long>::read()+0x22>
     748:	mov	r0, r3
     74a:	movs	r2, #1
     74c:	add.w	r1, sp, #7
     750:	bl	61cc <FatFile::read(void*, unsigned int)>
   * \return For success return the next byte in the file as an int.
   * If an error occurs or end of file is reached return -1.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
     754:	cmp	r0, #1
     756:	bne.n	772 <StreamFile<FsBaseFile, unsigned long long>::read()+0x32>
     758:	ldrb.w	r0, [sp, #7]
    return BaseFile::read();
  }
     75c:	add	sp, #12
     75e:	ldr.w	pc, [sp], #4
   * read() called before a file has been opened, corrupt file system
   * or an I/O error occurred.
   */
  int read(void* buf, size_t count) {
    return m_fFile ? m_fFile->read(buf, count) :
           m_xFile ? m_xFile->read(buf, count) : -1;
     762:	ldr	r0, [r0, #76]	; 0x4c
     764:	cbz	r0, 772 <StreamFile<FsBaseFile, unsigned long long>::read()+0x32>
     766:	movs	r2, #1
     768:	add.w	r1, sp, #7
     76c:	bl	42e0 <ExFatFile::read(void*, unsigned int)>
     770:	b.n	754 <StreamFile<FsBaseFile, unsigned long long>::read()+0x14>
   * \return For success return the next byte in the file as an int.
   * If an error occurs or end of file is reached return -1.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
     772:	mov.w	r0, #4294967295
     776:	b.n	75c <StreamFile<FsBaseFile, unsigned long long>::read()+0x1c>

00000778 <StreamFile<FsBaseFile, unsigned long long>::flush()>:
   */
  int available() {
    return BaseFile::available();
  }
  /** Ensure that any bytes written to the file are saved to the SD card. */
  void flush() {
     778:	ldr	r3, [r0, #72]	; 0x48
   *
   * \return true for success or false for failure.
   */
  bool sync() {
    return m_fFile ? m_fFile->sync() :
           m_xFile ? m_xFile->sync() : false;
     77a:	cbz	r3, 782 <StreamFile<FsBaseFile, unsigned long long>::flush()+0xa>
     77c:	mov	r0, r3
     77e:	b.w	6bf0 <FatFile::sync()>
     782:	ldr	r0, [r0, #76]	; 0x4c
     784:	cbz	r0, 78a <StreamFile<FsBaseFile, unsigned long long>::flush()+0x12>
     786:	b.w	5658 <ExFatFile::sync()>
     78a:	bx	lr

0000078c <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)>:
  /** Write a byte to a file. Required by the Arduino Print class.
   * \param[in] b the byte to be written.
   * Use getWriteError to check for errors.
   * \return 1 for success and 0 for failure.
   */
  size_t write(uint8_t b) {
     78c:	push	{lr}
     78e:	ldr	r3, [r0, #72]	; 0x48
     790:	sub	sp, #12
     792:	strb.w	r1, [sp, #7]
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const void* buf, size_t count) {
    return m_fFile ? m_fFile->write(buf, count) :
           m_xFile ? m_xFile->write(buf, count) : 0;
     796:	cbz	r3, 7aa <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)+0x1e>
     798:	mov	r0, r3
     79a:	movs	r2, #1
     79c:	add.w	r1, sp, #7
     7a0:	bl	6bfc <FatFile::write(void const*, unsigned int)>
    return BaseFile::write(b);
  }
     7a4:	add	sp, #12
     7a6:	ldr.w	pc, [sp], #4
     7aa:	ldr	r0, [r0, #76]	; 0x4c
     7ac:	cmp	r0, #0
     7ae:	beq.n	7a4 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)+0x18>
     7b0:	movs	r2, #1
     7b2:	add.w	r1, sp, #7
     7b6:	bl	5b48 <ExFatFile::write(void const*, unsigned int)>
     7ba:	add	sp, #12
     7bc:	ldr.w	pc, [sp], #4

000007c0 <logg(unsigned long, char const*) [clone .part.37]>:
}

/**************** Online logging *******************************/
extern uint32_t loop_count, acq_count, acq_miss, maxDel;
extern uint16_t maxCount;
void logg(uint32_t del, const char *txt)
     7c0:	stmdb	sp!, {r4, r5, r6, r7, r9, lr}
{ static uint32_t to;
  if(millis()-to > del)
  {
    Serial.printf("%s: %6d %4d %4d %4d %4d %d\n",
     7c4:	ldr	r2, [pc, #80]	; (818 <logg(unsigned long, char const*) [clone .part.37]+0x58>)
            txt,loop_count, acq_count, acq_miss,maxCount, maxDel,state); 
     7c6:	ldr	r4, [pc, #84]	; (81c <logg(unsigned long, char const*) [clone .part.37]+0x5c>)
     7c8:	ldrsh.w	r1, [r2]
extern uint16_t maxCount;
void logg(uint32_t del, const char *txt)
{ static uint32_t to;
  if(millis()-to > del)
  {
    Serial.printf("%s: %6d %4d %4d %4d %4d %d\n",
     7cc:	ldr	r5, [pc, #80]	; (820 <logg(unsigned long, char const*) [clone .part.37]+0x60>)
            txt,loop_count, acq_count, acq_miss,maxCount, maxDel,state); 
     7ce:	ldr	r6, [pc, #84]	; (824 <logg(unsigned long, char const*) [clone .part.37]+0x64>)
     7d0:	ldr	r7, [pc, #84]	; (828 <logg(unsigned long, char const*) [clone .part.37]+0x68>)
     7d2:	ldrh	r2, [r5, #0]
     7d4:	ldr.w	r9, [pc, #100]	; 83c <logg(unsigned long, char const*) [clone .part.37]+0x7c>
}

/**************** Online logging *******************************/
extern uint32_t loop_count, acq_count, acq_miss, maxDel;
extern uint16_t maxCount;
void logg(uint32_t del, const char *txt)
     7d8:	sub	sp, #32
{ static uint32_t to;
  if(millis()-to > del)
  {
    Serial.printf("%s: %6d %4d %4d %4d %4d %d\n",
            txt,loop_count, acq_count, acq_miss,maxCount, maxDel,state); 
     7da:	ldr.w	r3, [r9]
     7de:	str	r1, [sp, #16]
     7e0:	ldr	r1, [r4, #0]
     7e2:	str	r1, [sp, #12]
     7e4:	ldr	r1, [r7, #0]
     7e6:	str	r2, [sp, #8]
     7e8:	mov	r2, r0
     7ea:	ldr	r0, [r6, #0]
     7ec:	str	r0, [sp, #4]
     7ee:	str	r1, [sp, #0]
     7f0:	ldr	r0, [pc, #56]	; (82c <logg(unsigned long, char const*) [clone .part.37]+0x6c>)
     7f2:	ldr	r1, [pc, #60]	; (830 <logg(unsigned long, char const*) [clone .part.37]+0x70>)
     7f4:	bl	b280 <Print::printf(char const*, ...)>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     7f8:	ldr	r3, [pc, #56]	; (834 <logg(unsigned long, char const*) [clone .part.37]+0x74>)
    maxCount=0;
    maxDel=0;
//    #if USE_SDIO==1
//        digitalWriteFast(13,!digitalReadFast(13));
//    #endif
    to=millis();
     7fa:	ldr	r2, [pc, #60]	; (838 <logg(unsigned long, char const*) [clone .part.37]+0x78>)
     7fc:	ldr	r3, [r3, #0]
     7fe:	str	r3, [sp, #28]
	return ret;
     800:	ldr	r1, [sp, #28]
     802:	str	r1, [r2, #0]
{ static uint32_t to;
  if(millis()-to > del)
  {
    Serial.printf("%s: %6d %4d %4d %4d %4d %d\n",
            txt,loop_count, acq_count, acq_miss,maxCount, maxDel,state); 
    loop_count=0;
     804:	movs	r3, #0
     806:	str.w	r3, [r9]
    acq_count=0;
     80a:	str	r3, [r7, #0]
    acq_miss=0;
     80c:	str	r3, [r6, #0]
    maxCount=0;
     80e:	strh	r3, [r5, #0]
    maxDel=0;
     810:	str	r3, [r4, #0]
//    #if USE_SDIO==1
//        digitalWriteFast(13,!digitalReadFast(13));
//    #endif
    to=millis();
  }
}
     812:	add	sp, #32
     814:	ldmia.w	sp!, {r4, r5, r6, r7, r9, pc}
     818:	.word	0x1fff247c
     81c:	.word	0x1fff1470
     820:	.word	0x1fff84f8
     824:	.word	0x1fff82f4
     828:	.word	0x1fff2480
     82c:	.word	0x1fff09a4
     830:	.word	0x00010468
     834:	.word	0x1fff8c34
     838:	.word	0x1fff2478
     83c:	.word	0x1fff1474

00000840 <SDFile::name()>:
		sdfatfile.close();
	}
	virtual operator bool() {
		return sdfatfile.isOpen();
	}
	virtual const char * name() {
     840:	push	{r3, r4, r5, lr}
		if (!filename) {
     842:	ldr	r4, [r0, #100]	; 0x64
     844:	cbz	r4, 84a <SDFile::name()+0xa>
				static char zeroterm = 0;
				filename = &zeroterm;
			}
		}
		return filename;
	}
     846:	mov	r0, r4
     848:	pop	{r3, r4, r5, pc}
     84a:	mov	r5, r0
	virtual operator bool() {
		return sdfatfile.isOpen();
	}
	virtual const char * name() {
		if (!filename) {
			filename = (char *)malloc(MAX_FILENAME_LEN);
     84c:	mov.w	r0, #256	; 0x100
     850:	bl	c19c <malloc>
     854:	mov	r1, r0
     856:	str	r0, [r5, #100]	; 0x64
			if (filename) {
     858:	cbz	r0, 87c <SDFile::name()+0x3c>
   *             truncated if the file's name is too long.
   * \return The length of the returned string.
   */
  size_t getName(char* name, size_t len) {
    *name = 0;
    return m_fFile ? m_fFile->getName(name, len) :
     85a:	ldr	r0, [r5, #92]	; 0x5c
   *             must be at least 13 bytes long.  The file's name will be
   *             truncated if the file's name is too long.
   * \return The length of the returned string.
   */
  size_t getName(char* name, size_t len) {
    *name = 0;
     85c:	strb	r4, [r1, #0]
    return m_fFile ? m_fFile->getName(name, len) :
           m_xFile ? m_xFile->getName(name, len) : 0;
     85e:	cbz	r0, 86c <SDFile::name()+0x2c>
   *             truncated if the file's name is too long.
   * \return The length of the returned string.
   */
  size_t getName(char* name, size_t len) {
    *name = 0;
    return m_fFile ? m_fFile->getName(name, len) :
     860:	mov.w	r2, #256	; 0x100
     864:	bl	748c <FatFile::getName(char*, unsigned int)>
     868:	ldr	r4, [r5, #100]	; 0x64
     86a:	b.n	846 <SDFile::name()+0x6>
           m_xFile ? m_xFile->getName(name, len) : 0;
     86c:	ldr	r0, [r5, #96]	; 0x60
     86e:	cbz	r0, 882 <SDFile::name()+0x42>
     870:	mov.w	r2, #256	; 0x100
     874:	bl	412c <ExFatFile::getName(char*, unsigned int)>
     878:	ldr	r4, [r5, #100]	; 0x64
     87a:	b.n	846 <SDFile::name()+0x6>
				sdfatfile.getName(filename, MAX_FILENAME_LEN);
			} else {
				static char zeroterm = 0;
				filename = &zeroterm;
     87c:	ldr	r4, [pc, #8]	; (888 <SDFile::name()+0x48>)
     87e:	str	r4, [r5, #100]	; 0x64
     880:	b.n	846 <SDFile::name()+0x6>
     882:	mov	r4, r1
     884:	b.n	846 <SDFile::name()+0x6>
     886:	nop
     888:	.word	0x1fff146c

0000088c <SDFile::rewindDirectory()>:
	virtual File openNextFile(uint8_t mode=0) {
		SDFAT_FILE file = sdfatfile.openNextFile();
		if (file) return File(new SDFile(file));
		return File();
	}
	virtual void rewindDirectory(void) {
     88c:	ldr	r3, [r0, #92]	; 0x5c
           m_xFile ? m_xFile->getWriteError() : true;
  }
  /** \return True if this is a directory else false. */
  bool isDir() {
    return m_fFile ? m_fFile->isDir() :
           m_xFile ? m_xFile->isDir() : false;
     88e:	cbz	r3, 8b8 <SDFile::rewindDirectory()+0x2c>
  int read() {
    return BaseFile::read();
  }
  /** Rewind a file if it is a directory */
  void rewindDirectory() {
    if (BaseFile::isDir()) {
     890:	ldrb	r2, [r3, #0]
     892:	tst.w	r2, #112	; 0x70
     896:	bne.n	89a <SDFile::rewindDirectory()+0xe>
     898:	bx	lr
     89a:	push	{r4, lr}
     89c:	mov	r4, r0
   * \return true for success or false for failure.
   */
  bool remove(const char* path);
  /** Set the file's current position to zero. */
  void rewind() {
    seekSet(0);
     89e:	movs	r1, #0
     8a0:	mov	r0, r3
     8a2:	bl	6428 <FatFile::seekSet(unsigned long)>
     8a6:	ldr	r0, [r4, #96]	; 0x60
           m_xFile ? m_xFile->rename(dirFile->m_xFile, newPath) : false;
  }
  /** Set the file's current position to zero. */
  void rewind() {
    if (m_fFile) m_fFile->rewind();
    if (m_xFile) m_xFile->rewind();
     8a8:	cbz	r0, 8b6 <SDFile::rewindDirectory()+0x2a>
   * \return true for success or false for failure.
   */
  bool rename(ExFatFile* dirFile, const ExChar_t* newPath);
  /** Set the file's current position to zero. */
  void rewind() {
    seekSet(0);
     8aa:	movs	r2, #0
     8ac:	movs	r3, #0
		sdfatfile.rewindDirectory();
	}
     8ae:	ldmia.w	sp!, {r4, lr}
     8b2:	b.w	44f4 <ExFatFile::seekSet(unsigned long long)>
     8b6:	pop	{r4, pc}
           m_xFile ? m_xFile->getWriteError() : true;
  }
  /** \return True if this is a directory else false. */
  bool isDir() {
    return m_fFile ? m_fFile->isDir() :
           m_xFile ? m_xFile->isDir() : false;
     8b8:	ldr	r0, [r0, #96]	; 0x60
     8ba:	cmp	r0, #0
     8bc:	beq.n	898 <SDFile::rewindDirectory()+0xc>
     8be:	ldrb.w	r3, [r0, #49]	; 0x31
     8c2:	tst.w	r3, #80	; 0x50
     8c6:	beq.n	898 <SDFile::rewindDirectory()+0xc>
     8c8:	movs	r2, #0
     8ca:	movs	r3, #0
     8cc:	b.w	44f4 <ExFatFile::seekSet(unsigned long long)>

000008d0 <SDFile::position()>:
		if (mode == SeekSet) return sdfatfile.seekSet(pos);
		if (mode == SeekCur) return sdfatfile.seekCur(pos);
		if (mode == SeekEnd) return sdfatfile.seekEnd(pos);
		return false;
	}
	virtual uint32_t position() {
     8d0:	ldr	r3, [r0, #92]	; 0x5c
   */
  bool close();
  /** \return The current position for a file or directory. */
  uint64_t curPosition() {
    return m_fFile ? m_fFile->curPosition() :
           m_xFile ? m_xFile->curPosition() : 0;
     8d2:	cbz	r3, 8d8 <SDFile::position()+0x8>
     8d4:	ldr	r0, [r3, #20]
     8d6:	bx	lr
     8d8:	ldr	r0, [r0, #96]	; 0x60
     8da:	cbz	r0, 8de <SDFile::position()+0xe>
     8dc:	ldr	r0, [r0, #0]
		return sdfatfile.curPosition();
	}
     8de:	bx	lr

000008e0 <SDFile::size()>:
	virtual uint32_t size() {
     8e0:	ldr	r3, [r0, #92]	; 0x5c
           m_xFile ? m_xFile->fgets(str, num, delim) : -1;
  }
  /** \return The total number of bytes in a file. */
  uint64_t fileSize() {
    return m_fFile ? m_fFile->fileSize() :
           m_xFile ? m_xFile->fileSize() : 0;
     8e2:	cbz	r3, 8e8 <SDFile::size()+0x8>
     8e4:	ldr	r0, [r3, #28]
     8e6:	bx	lr
     8e8:	ldr	r0, [r0, #96]	; 0x60
     8ea:	cbz	r0, 8ee <SDFile::size()+0xe>
     8ec:	ldr	r0, [r0, #16]
		return sdfatfile.size();
	}
     8ee:	bx	lr

000008f0 <SDFile::read(void*, unsigned int)>:
		return sdfatfile.available();
	}
	virtual void flush() {
		sdfatfile.flush();
	}
	virtual size_t read(void *buf, size_t nbyte) {
     8f0:	ldr	r3, [r0, #92]	; 0x5c
   * read() called before a file has been opened, corrupt file system
   * or an I/O error occurred.
   */
  int read(void* buf, size_t count) {
    return m_fFile ? m_fFile->read(buf, count) :
           m_xFile ? m_xFile->read(buf, count) : -1;
     8f2:	cbz	r3, 8fa <SDFile::read(void*, unsigned int)+0xa>
     8f4:	mov	r0, r3
     8f6:	b.w	61cc <FatFile::read(void*, unsigned int)>
     8fa:	ldr	r0, [r0, #96]	; 0x60
     8fc:	cbz	r0, 902 <SDFile::read(void*, unsigned int)+0x12>
     8fe:	b.w	42e0 <ExFatFile::read(void*, unsigned int)>
		return sdfatfile.read(buf, nbyte);
	}
     902:	mov.w	r0, #4294967295
     906:	bx	lr

00000908 <SDFile::peek()>:
	}
#endif
	virtual size_t write(const void *buf, size_t size) {
		return sdfatfile.write(buf, size);
	}
	virtual int peek() {
     908:	ldr	r3, [r0, #92]	; 0x5c
   *
   * \return The byte if no error and not at eof else -1;
   */
  int peek() {
    return m_fFile ? m_fFile->peek() :
           m_xFile ? m_xFile->peek() : -1;
     90a:	cbz	r3, 912 <SDFile::peek()+0xa>
     90c:	mov	r0, r3
     90e:	b.w	63ac <FatFile::peek()>
     912:	ldr	r0, [r0, #96]	; 0x60
     914:	cbz	r0, 91a <SDFile::peek()+0x12>
     916:	b.w	44c4 <ExFatFile::peek()>
		return sdfatfile.peek();
	}
     91a:	mov.w	r0, #4294967295
     91e:	bx	lr

00000920 <SDFile::isDirectory()>:
				filename = &zeroterm;
			}
		}
		return filename;
	}
	virtual boolean isDirectory(void) {
     920:	ldr	r3, [r0, #92]	; 0x5c
           m_xFile ? m_xFile->getWriteError() : true;
  }
  /** \return True if this is a directory else false. */
  bool isDir() {
    return m_fFile ? m_fFile->isDir() :
           m_xFile ? m_xFile->isDir() : false;
     922:	cbz	r3, 932 <SDFile::isDirectory()+0x12>
    /** \return True if the file is contiguous. */
  bool isContiguous() const {return m_flags & FILE_FLAG_CONTIGUOUS;}
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
  /** \return True if this is a directory. */
  bool isDir() const {
    return m_attributes & FILE_ATTR_DIR;
     924:	ldrb	r3, [r3, #0]
     926:	tst.w	r3, #112	; 0x70
     92a:	ite	ne
     92c:	movne	r0, #1
     92e:	moveq	r0, #0
     930:	bx	lr
     932:	ldr	r0, [r0, #96]	; 0x60
     934:	cbz	r0, 944 <SDFile::isDirectory()+0x24>
    return isOpen() ? m_error & WRITE_ERROR : true;
  }
  /** \return True if the file is contiguous. */
  bool isContiguous() const {return m_flags & FILE_FLAG_CONTIGUOUS;}
  /** \return True if this is a directory. */
  bool isDir() const  {return m_attributes & FILE_ATTR_DIR;}
     936:	ldrb.w	r3, [r0, #49]	; 0x31
     93a:	tst.w	r3, #80	; 0x50
     93e:	ite	ne
     940:	movne	r0, #1
     942:	moveq	r0, #0
		return sdfatfile.isDirectory();
	}
     944:	bx	lr
     946:	nop

00000948 <SDFile::flush()>:
		return sdfatfile.peek();
	}
	virtual int available() {
		return sdfatfile.available();
	}
	virtual void flush() {
     948:	ldr	r3, [r0, #92]	; 0x5c
   *
   * \return true for success or false for failure.
   */
  bool sync() {
    return m_fFile ? m_fFile->sync() :
           m_xFile ? m_xFile->sync() : false;
     94a:	cbz	r3, 952 <SDFile::flush()+0xa>
     94c:	mov	r0, r3
     94e:	b.w	6bf0 <FatFile::sync()>
     952:	ldr	r0, [r0, #96]	; 0x60
     954:	cbz	r0, 95a <SDFile::flush()+0x12>
     956:	b.w	5658 <ExFatFile::sync()>
     95a:	bx	lr

0000095c <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)>:
   * \param[in] size Number of bytes to write.
   *
   * \return For success write() returns the number of bytes written, always
   * \a size.
   */
  size_t write(const uint8_t* buffer, size_t size) {
     95c:	ldr	r3, [r0, #72]	; 0x48
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const void* buf, size_t count) {
    return m_fFile ? m_fFile->write(buf, count) :
           m_xFile ? m_xFile->write(buf, count) : 0;
     95e:	cbz	r3, 966 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)+0xa>
     960:	mov	r0, r3
     962:	b.w	6bfc <FatFile::write(void const*, unsigned int)>
     966:	ldr	r0, [r0, #76]	; 0x4c
     968:	cbz	r0, 96e <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)+0x12>
     96a:	b.w	5b48 <ExFatFile::write(void const*, unsigned int)>
    return BaseFile::write(buffer, size);
  }
     96e:	bx	lr

00000970 <SDFile::write(void const*, unsigned int)>:
	virtual void whoami() {
		Serial.printf("   SDFile this=%x, refcount=%u\n",
			(int)this, getRefcount());
	}
#endif
	virtual size_t write(const void *buf, size_t size) {
     970:	ldr	r3, [r0, #92]	; 0x5c
     972:	cbz	r3, 97a <SDFile::write(void const*, unsigned int)+0xa>
     974:	mov	r0, r3
     976:	b.w	6bfc <FatFile::write(void const*, unsigned int)>
     97a:	ldr	r0, [r0, #96]	; 0x60
     97c:	cbz	r0, 982 <SDFile::write(void const*, unsigned int)+0x12>
     97e:	b.w	5b48 <ExFatFile::write(void const*, unsigned int)>
		return sdfatfile.write(buf, size);
	}
     982:	bx	lr

00000984 <StreamFile<FsBaseFile, unsigned long long>::available()>:
  StreamFile() {}

  /** \return number of bytes available from the current position to EOF
   *   or INT_MAX if more than INT_MAX bytes are available.
   */
  int available() {
     984:	ldr	r2, [r0, #72]	; 0x48
  /** \return number of bytes available from the current position to EOF
   *   or INT_MAX if more than INT_MAX bytes are available.
   */
  int available() {
    return m_fFile ? m_fFile->available() :
           m_xFile ? m_xFile->available() : 0;
     986:	cbz	r2, 9a2 <StreamFile<FsBaseFile, unsigned long long>::available()+0x1e>
  void fsetpos(const fspos_t* pos);
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint32_t available32() {
    return isFile() ? fileSize() - curPosition() : 0;
     988:	ldrb	r3, [r2, #0]
     98a:	and.w	r3, r3, #8
     98e:	and.w	r0, r3, #255	; 0xff
     992:	cbz	r3, 9d6 <StreamFile<FsBaseFile, unsigned long long>::available()+0x52>
   * Zero is returned for directory files.
   *
   */
  int available() {
    uint32_t n = available32();
    return n > INT_MAX ? INT_MAX : n;
     994:	ldr	r3, [r2, #28]
     996:	ldr	r0, [r2, #20]
     998:	subs	r0, r3, r0
     99a:	it	mi
     99c:	mvnmi.w	r0, #2147483648	; 0x80000000
     9a0:	bx	lr
     9a2:	ldr	r1, [r0, #76]	; 0x4c
     9a4:	cbz	r1, 9d8 <StreamFile<FsBaseFile, unsigned long long>::available()+0x54>
  }
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint64_t available64() {
    return isFile() ? fileSize() - curPosition() : 0;
     9a6:	ldrb.w	r3, [r1, #49]	; 0x31
     9aa:	and.w	r3, r3, #8
     9ae:	and.w	r0, r3, #255	; 0xff
     9b2:	cbz	r3, 9d6 <StreamFile<FsBaseFile, unsigned long long>::available()+0x52>
     9b4:	ldrd	r2, r3, [r1, #16]
     9b8:	ldrd	r0, r1, [r1]
     9bc:	subs	r0, r2, r0
     9be:	push	{r4, r5}
     9c0:	sbc.w	r1, r3, r1
     9c4:	movs	r5, #0
     9c6:	mvn.w	r4, #2147483648	; 0x80000000
     9ca:	cmp	r5, r1
     9cc:	it	eq
     9ce:	cmpeq	r4, r0
     9d0:	bcs.n	9d4 <StreamFile<FsBaseFile, unsigned long long>::available()+0x50>
     9d2:	mov	r0, r4
    return BaseFile::available();
  }
     9d4:	pop	{r4, r5}
     9d6:	bx	lr
     9d8:	mov	r0, r1
     9da:	bx	lr

000009dc <SDFile::seek(unsigned long, int)>:
		sdfatfile.flush();
	}
	virtual size_t read(void *buf, size_t nbyte) {
		return sdfatfile.read(buf, nbyte);
	}
	virtual bool seek(uint32_t pos, int mode = SeekSet) {
     9dc:	push	{r4, r5}
     9de:	mov	r4, r1
		if (mode == SeekSet) return sdfatfile.seekSet(pos);
     9e0:	cbz	r2, 9f0 <SDFile::seek(unsigned long, int)+0x14>
		if (mode == SeekCur) return sdfatfile.seekCur(pos);
     9e2:	cmp	r2, #1
     9e4:	beq.n	a1c <SDFile::seek(unsigned long, int)+0x40>
		if (mode == SeekEnd) return sdfatfile.seekEnd(pos);
     9e6:	cmp	r2, #2
     9e8:	beq.n	9fc <SDFile::seek(unsigned long, int)+0x20>
		return false;
	}
     9ea:	movs	r0, #0
     9ec:	pop	{r4, r5}
     9ee:	bx	lr
     9f0:	ldr	r3, [r0, #92]	; 0x5c
   *
   * \return true for success or false for failure.
   */
  bool seekSet(uint64_t pos) {
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
           m_xFile ? m_xFile->seekSet(pos) : false;
     9f2:	cbz	r3, a34 <SDFile::seek(unsigned long, int)+0x58>
   * \param[in] pos The new position in bytes from the beginning of the file.
   *
   * \return true for success or false for failure.
   */
  bool seekSet(uint64_t pos) {
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
     9f4:	mov	r0, r3
     9f6:	pop	{r4, r5}
     9f8:	b.w	6428 <FatFile::seekSet(unsigned long)>
     9fc:	ldr	r5, [r0, #92]	; 0x5c
           m_xFile ? m_xFile->fgets(str, num, delim) : -1;
  }
  /** \return The total number of bytes in a file. */
  uint64_t fileSize() {
    return m_fFile ? m_fFile->fileSize() :
           m_xFile ? m_xFile->fileSize() : 0;
     9fe:	cbz	r5, a42 <SDFile::seek(unsigned long, int)+0x66>
     a00:	ldr	r1, [r5, #28]
   * \param[in] pos The new position in bytes from the beginning of the file.
   *
   * \return true for success or false for failure.
   */
  bool seekSet(uint64_t pos) {
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
     a02:	movs	r3, #0
     a04:	adds	r2, r4, r1
     a06:	adc.w	r3, r3, #0
     a0a:	cmp	r3, #1
     a0c:	it	eq
     a0e:	cmpeq	r2, #0
     a10:	bcs.n	9ea <SDFile::seek(unsigned long, int)+0xe>
     a12:	add	r1, r4
     a14:	mov	r0, r5
     a16:	pop	{r4, r5}
     a18:	b.w	6428 <FatFile::seekSet(unsigned long)>
     a1c:	ldr	r5, [r0, #92]	; 0x5c
   */
  bool close();
  /** \return The current position for a file or directory. */
  uint64_t curPosition() {
    return m_fFile ? m_fFile->curPosition() :
           m_xFile ? m_xFile->curPosition() : 0;
     a1e:	cbz	r5, a58 <SDFile::seek(unsigned long, int)+0x7c>
     a20:	ldr	r1, [r5, #20]
   * \param[in] pos The new position in bytes from the beginning of the file.
   *
   * \return true for success or false for failure.
   */
  bool seekSet(uint64_t pos) {
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
     a22:	movs	r3, #0
     a24:	adds	r2, r1, r4
     a26:	adc.w	r3, r3, #0
     a2a:	cmp	r3, #1
     a2c:	it	eq
     a2e:	cmpeq	r2, #0
     a30:	bcs.n	9ea <SDFile::seek(unsigned long, int)+0xe>
     a32:	b.n	a12 <SDFile::seek(unsigned long, int)+0x36>
           m_xFile ? m_xFile->seekSet(pos) : false;
     a34:	ldr	r0, [r0, #96]	; 0x60
     a36:	cmp	r0, #0
     a38:	beq.n	9ea <SDFile::seek(unsigned long, int)+0xe>
     a3a:	mov	r2, r1
     a3c:	pop	{r4, r5}
     a3e:	b.w	44f4 <ExFatFile::seekSet(unsigned long long)>
           m_xFile ? m_xFile->fgets(str, num, delim) : -1;
  }
  /** \return The total number of bytes in a file. */
  uint64_t fileSize() {
    return m_fFile ? m_fFile->fileSize() :
           m_xFile ? m_xFile->fileSize() : 0;
     a42:	ldr	r0, [r0, #96]	; 0x60
     a44:	cmp	r0, #0
     a46:	beq.n	9ea <SDFile::seek(unsigned long, int)+0xe>
   *
   * \return true for success or false for failure.
   */
  bool seekSet(uint64_t pos) {
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
           m_xFile ? m_xFile->seekSet(pos) : false;
     a48:	ldrd	r2, r3, [r0, #16]
     a4c:	adds	r2, r2, r1
     a4e:	adc.w	r3, r3, #0
     a52:	pop	{r4, r5}
     a54:	b.w	44f4 <ExFatFile::seekSet(unsigned long long)>
   */
  bool close();
  /** \return The current position for a file or directory. */
  uint64_t curPosition() {
    return m_fFile ? m_fFile->curPosition() :
           m_xFile ? m_xFile->curPosition() : 0;
     a58:	ldr	r0, [r0, #96]	; 0x60
     a5a:	cmp	r0, #0
     a5c:	beq.n	9ea <SDFile::seek(unsigned long, int)+0xe>
   *
   * \return true for success or false for failure.
   */
  bool seekSet(uint64_t pos) {
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
           m_xFile ? m_xFile->seekSet(pos) : false;
     a5e:	ldrd	r2, r3, [r0]
     a62:	adds	r2, r2, r1
     a64:	adc.w	r3, r3, #0
     a68:	pop	{r4, r5}
     a6a:	b.w	44f4 <ExFatFile::seekSet(unsigned long long)>
     a6e:	nop

00000a70 <File::~File()>:
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
     a70:	ldr	r2, [r0, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
     a72:	ldr	r3, [pc, #32]	; (a94 <File::~File()+0x24>)
     a74:	push	{r4, lr}
     a76:	mov	r4, r0
     a78:	str	r3, [r0, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
     a7a:	cbz	r2, a8e <File::~File()+0x1e>
     a7c:	ldr	r3, [r2, #16]
     a7e:	subs	r3, #1
     a80:	str	r3, [r2, #16]
     a82:	cbnz	r3, a8e <File::~File()+0x1e>
     a84:	ldr	r0, [r0, #16]
     a86:	cbz	r0, a8e <File::~File()+0x1e>
     a88:	ldr	r3, [r0, #0]
     a8a:	ldr	r3, [r3, #32]
     a8c:	blx	r3
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
		invalidate();
	}
     a8e:	mov	r0, r4
     a90:	pop	{r4, pc}
     a92:	nop
     a94:	.word	0x0001037c

00000a98 <SDFile::~SDFile()>:

class SDFile : public File
{
public:
	SDFile(const SDFAT_FILE &file) : sdfatfile(file), filename(nullptr) { }
	virtual ~SDFile(void) {
     a98:	push	{r3, r4, r5, lr}
  bool isHidden() {
    return m_fFile ? m_fFile->isHidden() :
           m_xFile ? m_xFile->isHidden() : false;
  }
  /** \return True if this is an open file/directory else false. */
  bool isOpen() {return m_fFile || m_xFile;}
     a9a:	ldr	r3, [r0, #92]	; 0x5c
     a9c:	ldr	r2, [pc, #80]	; (af0 <SDFile::~SDFile()+0x58>)
     a9e:	str	r2, [r0, #0]
     aa0:	mov	r4, r0
		if (sdfatfile) sdfatfile.close();
     aa2:	add.w	r5, r0, #36	; 0x24
     aa6:	cbz	r3, ae6 <SDFile::~SDFile()+0x4e>
     aa8:	mov	r0, r5
     aaa:	bl	8060 <FsBaseFile::close()>
		if (filename) free(filename);
     aae:	ldr	r0, [r4, #100]	; 0x64
     ab0:	cbz	r0, ab6 <SDFile::~SDFile()+0x1e>
     ab2:	bl	c1ac <free>
/**
 * \class StreamFile
 * \brief StreamFile class.
 */
template<class BaseFile, typename PosType>
class StreamFile : public stream_t, public BaseFile {
     ab6:	ldr	r3, [pc, #60]	; (af4 <SDFile::~SDFile()+0x5c>)
     ab8:	str	r3, [r4, #20]
 */
class FsBaseFile {
 public:
  FsBaseFile() : m_fFile(nullptr), m_xFile(nullptr) {}

  ~FsBaseFile() {close();}
     aba:	mov	r0, r5
     abc:	bl	8060 <FsBaseFile::close()>
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
     ac0:	ldr	r2, [r4, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
     ac2:	ldr	r3, [pc, #52]	; (af8 <SDFile::~SDFile()+0x60>)
     ac4:	str	r3, [r4, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
     ac6:	cbz	r2, ada <SDFile::~SDFile()+0x42>
     ac8:	ldr	r3, [r2, #16]
     aca:	subs	r3, #1
     acc:	str	r3, [r2, #16]
     ace:	cbnz	r3, ada <SDFile::~SDFile()+0x42>
     ad0:	ldr	r0, [r4, #16]
     ad2:	cbz	r0, ada <SDFile::~SDFile()+0x42>
     ad4:	ldr	r3, [r0, #0]
     ad6:	ldr	r3, [r3, #32]
     ad8:	blx	r3
	}
     ada:	mov	r0, r4
     adc:	movs	r1, #104	; 0x68
     ade:	bl	b344 <operator delete(void*, unsigned int)>
     ae2:	mov	r0, r4
     ae4:	pop	{r3, r4, r5, pc}
  bool isHidden() {
    return m_fFile ? m_fFile->isHidden() :
           m_xFile ? m_xFile->isHidden() : false;
  }
  /** \return True if this is an open file/directory else false. */
  bool isOpen() {return m_fFile || m_xFile;}
     ae6:	ldr	r3, [r0, #96]	; 0x60
     ae8:	cmp	r3, #0
     aea:	bne.n	aa8 <SDFile::~SDFile()+0x10>
     aec:	b.n	aae <SDFile::~SDFile()+0x16>
     aee:	nop
     af0:	.word	0x000103d8
     af4:	.word	0x00010334
     af8:	.word	0x0001037c

00000afc <File::~File()>:
     afc:	ldr	r2, [r0, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
     afe:	ldr	r3, [pc, #40]	; (b28 <File::~File()+0x2c>)
     b00:	push	{r4, lr}
     b02:	mov	r4, r0
     b04:	str	r3, [r0, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
     b06:	cbz	r2, b1a <File::~File()+0x1e>
     b08:	ldr	r3, [r2, #16]
     b0a:	subs	r3, #1
     b0c:	str	r3, [r2, #16]
     b0e:	cbnz	r3, b1a <File::~File()+0x1e>
     b10:	ldr	r0, [r0, #16]
     b12:	cbz	r0, b1a <File::~File()+0x1e>
     b14:	ldr	r3, [r0, #0]
     b16:	ldr	r3, [r3, #32]
     b18:	blx	r3
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
		invalidate();
	}
     b1a:	mov	r0, r4
     b1c:	movs	r1, #20
     b1e:	bl	b344 <operator delete(void*, unsigned int)>
     b22:	mov	r0, r4
     b24:	pop	{r4, pc}
     b26:	nop
     b28:	.word	0x0001037c

00000b2c <MTPStorage_SD::~MTPStorage_SD()>:
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
     b2c:	ldr	r2, [r0, #60]	; 0x3c

  void mtp_yield(void);


// Storage implementation for SD. SD needs to be already initialized.
class MTPStorage_SD : public MTPStorageInterface 
     b2e:	push	{r3, r4, r5, lr}
     b30:	ldr	r3, [pc, #88]	; (b8c <MTPStorage_SD::~MTPStorage_SD()+0x60>)
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
     b32:	ldr	r5, [pc, #92]	; (b90 <MTPStorage_SD::~MTPStorage_SD()+0x64>)
     b34:	str	r3, [r0, #0]
     b36:	mov	r4, r0
     b38:	str	r5, [r0, #44]	; 0x2c
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
     b3a:	cbz	r2, b44 <MTPStorage_SD::~MTPStorage_SD()+0x18>
     b3c:	ldr	r3, [r2, #16]
     b3e:	subs	r3, #1
     b40:	str	r3, [r2, #16]
     b42:	cbz	r3, b6e <MTPStorage_SD::~MTPStorage_SD()+0x42>
     b44:	ldr	r2, [r4, #40]	; 0x28
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
     b46:	str	r5, [r4, #24]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
     b48:	cbz	r2, b52 <MTPStorage_SD::~MTPStorage_SD()+0x26>
     b4a:	ldr	r3, [r2, #16]
     b4c:	subs	r3, #1
     b4e:	str	r3, [r2, #16]
     b50:	cbz	r3, b7c <MTPStorage_SD::~MTPStorage_SD()+0x50>
     b52:	ldr	r2, [r4, #20]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
     b54:	str	r5, [r4, #4]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
     b56:	cbz	r2, b6a <MTPStorage_SD::~MTPStorage_SD()+0x3e>
     b58:	ldr	r3, [r2, #16]
     b5a:	subs	r3, #1
     b5c:	str	r3, [r2, #16]
     b5e:	cbnz	r3, b6a <MTPStorage_SD::~MTPStorage_SD()+0x3e>
     b60:	ldr	r0, [r4, #20]
     b62:	cbz	r0, b6a <MTPStorage_SD::~MTPStorage_SD()+0x3e>
     b64:	ldr	r3, [r0, #0]
     b66:	ldr	r3, [r3, #32]
     b68:	blx	r3
     b6a:	mov	r0, r4
     b6c:	pop	{r3, r4, r5, pc}
     b6e:	ldr	r0, [r0, #60]	; 0x3c
     b70:	cmp	r0, #0
     b72:	beq.n	b44 <MTPStorage_SD::~MTPStorage_SD()+0x18>
     b74:	ldr	r3, [r0, #0]
     b76:	ldr	r3, [r3, #32]
     b78:	blx	r3
     b7a:	b.n	b44 <MTPStorage_SD::~MTPStorage_SD()+0x18>
     b7c:	ldr	r0, [r4, #40]	; 0x28
     b7e:	cmp	r0, #0
     b80:	beq.n	b52 <MTPStorage_SD::~MTPStorage_SD()+0x26>
     b82:	ldr	r3, [r0, #0]
     b84:	ldr	r3, [r3, #32]
     b86:	blx	r3
     b88:	b.n	b52 <MTPStorage_SD::~MTPStorage_SD()+0x26>
     b8a:	nop
     b8c:	.word	0x000104dc
     b90:	.word	0x0001037c

00000b94 <SDFile::~SDFile()>:

class SDFile : public File
{
public:
	SDFile(const SDFAT_FILE &file) : sdfatfile(file), filename(nullptr) { }
	virtual ~SDFile(void) {
     b94:	push	{r3, r4, r5, lr}
     b96:	ldr	r3, [r0, #92]	; 0x5c
     b98:	ldr	r2, [pc, #72]	; (be4 <SDFile::~SDFile()+0x50>)
     b9a:	str	r2, [r0, #0]
     b9c:	mov	r4, r0
		if (sdfatfile) sdfatfile.close();
     b9e:	add.w	r5, r0, #36	; 0x24
     ba2:	cbz	r3, bda <SDFile::~SDFile()+0x46>
     ba4:	mov	r0, r5
     ba6:	bl	8060 <FsBaseFile::close()>
		if (filename) free(filename);
     baa:	ldr	r0, [r4, #100]	; 0x64
     bac:	cbz	r0, bb2 <SDFile::~SDFile()+0x1e>
     bae:	bl	c1ac <free>
     bb2:	ldr	r3, [pc, #52]	; (be8 <SDFile::~SDFile()+0x54>)
     bb4:	str	r3, [r4, #20]
 */
class FsBaseFile {
 public:
  FsBaseFile() : m_fFile(nullptr), m_xFile(nullptr) {}

  ~FsBaseFile() {close();}
     bb6:	mov	r0, r5
     bb8:	bl	8060 <FsBaseFile::close()>
     bbc:	ldr	r2, [r4, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
     bbe:	ldr	r3, [pc, #44]	; (bec <SDFile::~SDFile()+0x58>)
     bc0:	str	r3, [r4, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
     bc2:	cbz	r2, bd6 <SDFile::~SDFile()+0x42>
     bc4:	ldr	r3, [r2, #16]
     bc6:	subs	r3, #1
     bc8:	str	r3, [r2, #16]
     bca:	cbnz	r3, bd6 <SDFile::~SDFile()+0x42>
     bcc:	ldr	r0, [r4, #16]
     bce:	cbz	r0, bd6 <SDFile::~SDFile()+0x42>
     bd0:	ldr	r3, [r0, #0]
     bd2:	ldr	r3, [r3, #32]
     bd4:	blx	r3
	}
     bd6:	mov	r0, r4
     bd8:	pop	{r3, r4, r5, pc}
  bool isHidden() {
    return m_fFile ? m_fFile->isHidden() :
           m_xFile ? m_xFile->isHidden() : false;
  }
  /** \return True if this is an open file/directory else false. */
  bool isOpen() {return m_fFile || m_xFile;}
     bda:	ldr	r3, [r0, #96]	; 0x60
     bdc:	cmp	r3, #0
     bde:	bne.n	ba4 <SDFile::~SDFile()+0x10>
     be0:	b.n	baa <SDFile::~SDFile()+0x16>
     be2:	nop
     be4:	.word	0x000103d8
     be8:	.word	0x00010334
     bec:	.word	0x0001037c

00000bf0 <pushData(unsigned long*)>:
uint16_t maxCount=0;

void resetData(void) {  front_ = 0;  rear_ = 0; }

uint16_t pushData(uint32_t * src)
{ uint16_t f =front_ + 1;
     bf0:	push	{r4, r5, r6, lr}
     bf2:	ldr	r6, [pc, #76]	; (c40 <pushData(unsigned long*)+0x50>)
  if(f >= MAXBUF) f=0;
  if(f == rear_) return 0;
     bf4:	ldr	r3, [pc, #76]	; (c44 <pushData(unsigned long*)+0x54>)
uint16_t maxCount=0;

void resetData(void) {  front_ = 0;  rear_ = 0; }

uint16_t pushData(uint32_t * src)
{ uint16_t f =front_ + 1;
     bf6:	ldrh	r4, [r6, #0]
  if(f >= MAXBUF) f=0;
  if(f == rear_) return 0;
     bf8:	ldrh	r5, [r3, #0]
uint16_t maxCount=0;

void resetData(void) {  front_ = 0;  rear_ = 0; }

uint16_t pushData(uint32_t * src)
{ uint16_t f =front_ + 1;
     bfa:	adds	r4, #1
     bfc:	uxth	r4, r4
  if(f >= MAXBUF) f=0;
     bfe:	cmp	r4, #46	; 0x2e
     c00:	it	cs
     c02:	movcs	r4, #0
  if(f == rear_) return 0;
     c04:	cmp	r4, r5
     c06:	beq.n	c3a <pushData(unsigned long*)+0x4a>
     c08:	mov	r1, r0

  uint32_t *ptr= data_buffer+f*NBUF_ACQ;
  memcpy(ptr,src,NBUF_ACQ*4);
     c0a:	ldr	r0, [pc, #60]	; (c48 <pushData(unsigned long*)+0x58>)
     c0c:	mov.w	r2, #512	; 0x200
     c10:	add.w	r0, r0, r4, lsl #9
     c14:	bl	9aa8 <memcpy>
  front_ = f;
  //
  uint16_t count;
  count = (front_ >= rear_) ? (front_ - rear_) : front_+ (MAXBUF -rear_) ;
     c18:	cmp	r4, r5
  if(count>maxCount) maxCount=count;
     c1a:	ldr	r3, [pc, #48]	; (c4c <pushData(unsigned long*)+0x5c>)
  if(f >= MAXBUF) f=0;
  if(f == rear_) return 0;

  uint32_t *ptr= data_buffer+f*NBUF_ACQ;
  memcpy(ptr,src,NBUF_ACQ*4);
  front_ = f;
     c1c:	strh	r4, [r6, #0]
  //
  uint16_t count;
  count = (front_ >= rear_) ? (front_ - rear_) : front_+ (MAXBUF -rear_) ;
     c1e:	itet	cc
     c20:	rsbcc	r5, r5, #46	; 0x2e
     c24:	subcs	r4, r4, r5
     c26:	addcc	r4, r4, r5
  if(count>maxCount) maxCount=count;
     c28:	ldrh	r2, [r3, #0]
  uint32_t *ptr= data_buffer+f*NBUF_ACQ;
  memcpy(ptr,src,NBUF_ACQ*4);
  front_ = f;
  //
  uint16_t count;
  count = (front_ >= rear_) ? (front_ - rear_) : front_+ (MAXBUF -rear_) ;
     c2a:	uxth	r4, r4
  if(count>maxCount) maxCount=count;
     c2c:	cmp	r2, r4
     c2e:	bcs.n	c36 <pushData(unsigned long*)+0x46>
     c30:	strh	r4, [r3, #0]
  //
  return 1;
     c32:	movs	r0, #1
     c34:	pop	{r4, r5, r6, pc}
     c36:	movs	r0, #1
}
     c38:	pop	{r4, r5, r6, pc}
void resetData(void) {  front_ = 0;  rear_ = 0; }

uint16_t pushData(uint32_t * src)
{ uint16_t f =front_ + 1;
  if(f >= MAXBUF) f=0;
  if(f == rear_) return 0;
     c3a:	movs	r0, #0
     c3c:	pop	{r4, r5, r6, pc}
     c3e:	nop
     c40:	.word	0x1fff248a
     c44:	.word	0x1fff2488
     c48:	.word	0x1fff248c
     c4c:	.word	0x1fff84f8

00000c50 <acq_isr()>:

  uint32_t acq_count=0;
  uint32_t acq_miss=0;

    void acq_isr(void)
    {
     c50:	push	{r3, r4, r5, r6, r7, lr}
        uint32_t daddr;
        uint32_t *src;
        acq_count++;

        daddr = (uint32_t)(dma.TCD->DADDR);
     c52:	ldr	r2, [pc, #68]	; (c98 <acq_isr()+0x48>)

    void acq_isr(void)
    {
        uint32_t daddr;
        uint32_t *src;
        acq_count++;
     c54:	ldr	r4, [pc, #68]	; (c9c <acq_isr()+0x4c>)

        daddr = (uint32_t)(dma.TCD->DADDR);
     c56:	ldr	r0, [r2, #0]

    void acq_isr(void)
    {
        uint32_t daddr;
        uint32_t *src;
        acq_count++;
     c58:	ldr	r1, [r4, #0]

        daddr = (uint32_t)(dma.TCD->DADDR);
        dma.clearInterrupt();

        if (daddr < (uint32_t)tdm_rx_buffer + sizeof(tdm_rx_buffer) / 2) {
     c5a:	ldr	r3, [pc, #68]	; (ca0 <acq_isr()+0x50>)
    {
        uint32_t daddr;
        uint32_t *src;
        acq_count++;

        daddr = (uint32_t)(dma.TCD->DADDR);
     c5c:	ldr	r7, [r0, #16]
	void detachInterrupt(void) {
		NVIC_DISABLE_IRQ(IRQ_DMA_CH0 + channel);
	}

	void clearInterrupt(void) {
		DMA_CINT = channel;
     c5e:	ldr	r5, [pc, #68]	; (ca4 <acq_isr()+0x54>)
     c60:	ldrb	r6, [r2, #4]
     c62:	ldr	r2, [pc, #68]	; (ca8 <acq_isr()+0x58>)
            // need to remove data from the second half
            src = &tdm_rx_buffer[NBUF_I2S];
        } else {
            // DMA is receiving to the second half of the buffer
            // need to remove data from the first half
            src = &tdm_rx_buffer[0];
     c64:	sub.w	r0, r3, #2048	; 0x800

    void acq_isr(void)
    {
        uint32_t daddr;
        uint32_t *src;
        acq_count++;
     c68:	adds	r1, #1
     c6a:	str	r1, [r4, #0]
            // need to remove data from the second half
            src = &tdm_rx_buffer[NBUF_I2S];
        } else {
            // DMA is receiving to the second half of the buffer
            // need to remove data from the first half
            src = &tdm_rx_buffer[0];
     c6c:	cmp	r7, r3
     c6e:	it	cc
     c70:	movcc	r0, r3
     c72:	strb	r6, [r5, #0]
     c74:	movs	r3, #0

        for(int jj=0;jj<NCH_ACQ;jj++)
        {
          for(int ii=0; ii<NBUF_ACQ;ii++)
          {
            acq_rx_buffer[jj+ii*NCH_ACQ]=src[jj+ii*NCH_I2S];
     c76:	ldr.w	r1, [r0, r3, lsl #2]
     c7a:	str.w	r1, [r2, #4]!
     c7e:	adds	r3, #4
            arm_dcache_delete((void*)src, sizeof(tdm_rx_buffer) / 2);
        #endif

        for(int jj=0;jj<NCH_ACQ;jj++)
        {
          for(int ii=0; ii<NBUF_ACQ;ii++)
     c80:	cmp.w	r3, #512	; 0x200
     c84:	bne.n	c76 <acq_isr()+0x26>
          {
            acq_rx_buffer[jj+ii*NCH_ACQ]=src[jj+ii*NCH_I2S];
          }
        }

        if(!pushData(acq_rx_buffer)) acq_miss++;
     c86:	ldr	r0, [pc, #36]	; (cac <acq_isr()+0x5c>)
     c88:	bl	bf0 <pushData(unsigned long*)>
     c8c:	cbnz	r0, c96 <acq_isr()+0x46>
     c8e:	ldr	r2, [pc, #32]	; (cb0 <acq_isr()+0x60>)
     c90:	ldr	r3, [r2, #0]
     c92:	adds	r3, #1
     c94:	str	r3, [r2, #0]
     c96:	pop	{r3, r4, r5, r6, r7, pc}
     c98:	.word	0x1fff86fc
     c9c:	.word	0x1fff2480
     ca0:	.word	0x1fff1c78
     ca4:	.word	0x4000801f
     ca8:	.word	0x1fff84f8
     cac:	.word	0x1fff84fc
     cb0:	.word	0x1fff82f4

00000cb4 <pullData(unsigned long*, unsigned long)>:
  //
  return 1;
}

uint16_t pullData(uint32_t * dst, uint32_t ndbl)
{ uint16_t r = (rear_/ndbl) ;
     cb4:	push	{r3, r4, r5, lr}
     cb6:	ldr	r4, [pc, #72]	; (d00 <pullData(unsigned long*, unsigned long)+0x4c>)
  if(r == (front_/ndbl)) return 0;
     cb8:	ldr	r3, [pc, #72]	; (d04 <pullData(unsigned long*, unsigned long)+0x50>)
  //
  return 1;
}

uint16_t pullData(uint32_t * dst, uint32_t ndbl)
{ uint16_t r = (rear_/ndbl) ;
     cba:	ldrh	r2, [r4, #0]
  if(r == (front_/ndbl)) return 0;
     cbc:	ldrh	r3, [r3, #0]
  //
  return 1;
}

uint16_t pullData(uint32_t * dst, uint32_t ndbl)
{ uint16_t r = (rear_/ndbl) ;
     cbe:	udiv	r2, r2, r1
  if(r == (front_/ndbl)) return 0;
     cc2:	udiv	r5, r3, r1
     cc6:	cmp	r2, r5
     cc8:	beq.n	cfc <pullData(unsigned long*, unsigned long)+0x48>
     cca:	uxth	r3, r2
  if(++r >= (MAXBUF/ndbl)) r=0;
     ccc:	adds	r3, #1
     cce:	uxth	r3, r3
     cd0:	movs	r2, #46	; 0x2e
     cd2:	udiv	r2, r2, r1
     cd6:	cmp	r3, r2
     cd8:	bcs.n	cf4 <pullData(unsigned long*, unsigned long)+0x40>
     cda:	ldr	r5, [pc, #44]	; (d08 <pullData(unsigned long*, unsigned long)+0x54>)
     cdc:	lsls	r2, r1, #9
     cde:	smulbb	r1, r1, r3
     ce2:	mla	r3, r2, r3, r5
     ce6:	uxth	r5, r1
  uint32_t *ptr= data_buffer + r*ndbl*NBUF_ACQ;
  memcpy(dst,ptr,ndbl*NBUF_ACQ*4);
     ce8:	mov	r1, r3
     cea:	bl	9aa8 <memcpy>
  rear_ = r*ndbl;
     cee:	strh	r5, [r4, #0]
  return 1;
     cf0:	movs	r0, #1
     cf2:	pop	{r3, r4, r5, pc}
     cf4:	ldr	r3, [pc, #16]	; (d08 <pullData(unsigned long*, unsigned long)+0x54>)
     cf6:	lsls	r2, r1, #9
     cf8:	movs	r5, #0
     cfa:	b.n	ce8 <pullData(unsigned long*, unsigned long)+0x34>
  return 1;
}

uint16_t pullData(uint32_t * dst, uint32_t ndbl)
{ uint16_t r = (rear_/ndbl) ;
  if(r == (front_/ndbl)) return 0;
     cfc:	movs	r0, #0
  if(++r >= (MAXBUF/ndbl)) r=0;
  uint32_t *ptr= data_buffer + r*ndbl*NBUF_ACQ;
  memcpy(dst,ptr,ndbl*NBUF_ACQ*4);
  rear_ = r*ndbl;
  return 1;
}
     cfe:	pop	{r3, r4, r5, pc}
     d00:	.word	0x1fff2488
     d04:	.word	0x1fff248a
     d08:	.word	0x1fff248c

00000d0c <do_menu(short)>:
void do_menu1(void);
void do_menu2(void);
void do_menu3(void);

int16_t do_menu(int16_t state)
{ // check Serial input
     d0c:	push	{r4, lr}
     d0e:	mov	r4, r0
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
     d10:	bl	9c54 <usb_serial_available>
  if(!Serial.available()) return state;
     d14:	cbnz	r0, d1a <do_menu(short)+0xe>
      break;
    default:
      break;
  }
  return state;
}
     d16:	mov	r0, r4
     d18:	pop	{r4, pc}
        virtual int read() { return usb_serial_getchar(); }
     d1a:	bl	9bdc <usb_serial_getchar>

int16_t do_menu(int16_t state)
{ // check Serial input
  if(!Serial.available()) return state;
  char cc = Serial.read();
  switch(cc)
     d1e:	uxtb	r0, r0
     d20:	cmp	r0, #113	; 0x71
     d22:	beq.n	d3e <do_menu(short)+0x32>
     d24:	cmp	r0, #115	; 0x73
     d26:	bne.n	d16 <do_menu(short)+0xa>
  {
    case 's': // start acquisition
      if(state>=0) return state;
     d28:	cmp	r4, #0
     d2a:	bge.n	d16 <do_menu(short)+0xa>
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     d2c:	movs	r1, #6
     d2e:	ldr	r0, [pc, #36]	; (d54 <do_menu(short)+0x48>)
     d30:	bl	9ca8 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
     d34:	ldr	r0, [pc, #32]	; (d58 <do_menu(short)+0x4c>)
     d36:	bl	b250 <Print::println()>
     d3a:	movs	r4, #0
     d3c:	b.n	d16 <do_menu(short)+0xa>
      state=0;
      Serial.println("\nStart");
      break;
    case 'q': // stop acquisition
      if(state<0) return state;
     d3e:	cmp	r4, #0
     d40:	blt.n	d16 <do_menu(short)+0xa>
     d42:	movs	r1, #5
     d44:	ldr	r0, [pc, #20]	; (d5c <do_menu(short)+0x50>)
     d46:	bl	9ca8 <usb_serial_write>
     d4a:	ldr	r0, [pc, #12]	; (d58 <do_menu(short)+0x4c>)
     d4c:	bl	b250 <Print::println()>
      state=4;
     d50:	movs	r4, #4
     d52:	b.n	d16 <do_menu(short)+0xa>
     d54:	.word	0x00010484
     d58:	.word	0x1fff09a4
     d5c:	.word	0x0001048c

00000d60 <file_writeHeader()>:
  mfile = SD.open(filename,FILE_WRITE);
  return !(!mfile);
}

int16_t file_writeHeader(void)
{ if(!mfile) return 0;
     d60:	push	{r4, lr}
	}
	virtual void close() {
		if (f) f->close();
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
     d62:	ldr	r4, [pc, #60]	; (da0 <file_writeHeader()+0x40>)
     d64:	ldr	r0, [r4, #16]
     d66:	cbz	r0, d9a <file_writeHeader()+0x3a>
     d68:	ldr	r3, [r0, #0]
     d6a:	ldr	r3, [r3, #64]	; 0x40
     d6c:	blx	r3
     d6e:	cbz	r0, d9a <file_writeHeader()+0x3a>
}

/****************** File Utilities *****************************/
void makeHeader(char *header)
{
  memset(header,0,512);
     d70:	mov.w	r2, #512	; 0x200
     d74:	movs	r1, #0
     d76:	ldr	r0, [pc, #44]	; (da4 <file_writeHeader()+0x44>)
     d78:	bl	c92c <memset>
#endif
	virtual size_t read(void *buf, size_t nbyte) {
		return (f) ? f->read(buf, nbyte) : 0;
	}
	virtual size_t write(const void *buf, size_t size) {
		return (f) ? f->write(buf, size) : 0;
     d7c:	ldr	r0, [r4, #16]
     d7e:	cbz	r0, d98 <file_writeHeader()+0x38>
     d80:	ldr	r3, [r0, #0]
     d82:	ldr	r1, [pc, #32]	; (da4 <file_writeHeader()+0x44>)
     d84:	ldr	r3, [r3, #44]	; 0x2c
     d86:	mov.w	r2, #512	; 0x200
     d8a:	blx	r3
     d8c:	sub.w	r0, r0, #512	; 0x200
     d90:	clz	r0, r0
     d94:	lsrs	r0, r0, #5
     d96:	sxth	r0, r0
int16_t file_writeHeader(void)
{ if(!mfile) return 0;
  makeHeader(header);
  size_t nb = mfile.write(header,512);
  return (nb==512);
}
     d98:	pop	{r4, pc}
  mfile = SD.open(filename,FILE_WRITE);
  return !(!mfile);
}

int16_t file_writeHeader(void)
{ if(!mfile) return 0;
     d9a:	movs	r0, #0
     d9c:	pop	{r4, pc}
     d9e:	nop
     da0:	.word	0x1fff0978
     da4:	.word	0x1fff80e4

00000da8 <file_writeData(void*, unsigned long)>:
  size_t nb = mfile.write(header,512);
  return (nb==512);
}

int16_t file_writeData(void *diskBuffer, uint32_t nd)
{ if(!mfile) return 0;
     da8:	push	{r4, r5, r6, lr}
	}
	virtual void close() {
		if (f) f->close();
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
     daa:	ldr	r6, [pc, #48]	; (ddc <file_writeData(void*, unsigned long)+0x34>)
     dac:	ldr	r3, [r6, #16]
     dae:	cbz	r3, dd8 <file_writeData(void*, unsigned long)+0x30>
     db0:	ldr	r2, [r3, #0]
     db2:	mov	r5, r0
     db4:	mov	r0, r3
     db6:	ldr	r3, [r2, #64]	; 0x40
     db8:	mov	r4, r1
     dba:	blx	r3
     dbc:	cbz	r0, dd8 <file_writeData(void*, unsigned long)+0x30>
#endif
	virtual size_t read(void *buf, size_t nbyte) {
		return (f) ? f->read(buf, nbyte) : 0;
	}
	virtual size_t write(const void *buf, size_t size) {
		return (f) ? f->write(buf, size) : 0;
     dbe:	ldr	r0, [r6, #16]
     dc0:	cbz	r0, dcc <file_writeData(void*, unsigned long)+0x24>
     dc2:	ldr	r3, [r0, #0]
     dc4:	mov	r1, r5
     dc6:	ldr	r3, [r3, #44]	; 0x2c
     dc8:	mov	r2, r4
     dca:	blx	r3
  uint32_t nb = mfile.write(diskBuffer,nd);
  return (nb==nd);
     dcc:	subs	r0, r4, r0
     dce:	clz	r0, r0
     dd2:	lsrs	r0, r0, #5
     dd4:	sxth	r0, r0
}
     dd6:	pop	{r4, r5, r6, pc}
  size_t nb = mfile.write(header,512);
  return (nb==512);
}

int16_t file_writeData(void *diskBuffer, uint32_t nd)
{ if(!mfile) return 0;
     dd8:	movs	r0, #0
     dda:	pop	{r4, r5, r6, pc}
     ddc:	.word	0x1fff0978

00000de0 <file_close()>:
  uint32_t nb = mfile.write(diskBuffer,nd);
  return (nb==nd);
}

int16_t file_close(void)
{ mfile.close();
     de0:	push	{r4, lr}
	}
	virtual uint32_t size() {
		return (f) ? f->size() : 0;
	}
	virtual void close() {
		if (f) f->close();
     de2:	ldr	r4, [pc, #32]	; (e04 <file_close()+0x24>)
     de4:	ldr	r0, [r4, #16]
     de6:	cbz	r0, e00 <file_close()+0x20>
     de8:	ldr	r3, [r0, #0]
     dea:	ldr	r3, [r3, #60]	; 0x3c
     dec:	blx	r3
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
     dee:	ldr	r0, [r4, #16]
     df0:	cbz	r0, e00 <file_close()+0x20>
     df2:	ldr	r3, [r0, #0]
     df4:	ldr	r3, [r3, #64]	; 0x40
     df6:	blx	r3
     df8:	eor.w	r0, r0, #1
     dfc:	uxtb	r0, r0
  return (!mfile);
}
     dfe:	pop	{r4, pc}
  uint32_t nb = mfile.write(diskBuffer,nd);
  return (nb==nd);
}

int16_t file_close(void)
{ mfile.close();
     e00:	movs	r0, #1
     e02:	pop	{r4, pc}
     e04:	.word	0x1fff0978

00000e08 <makeFilename(char*)>:
{
  memset(header,0,512);
}

int16_t makeFilename(char *filename)
{
     e08:	push	{r4, r5, r6, r7, lr}
     e0a:	sub	sp, #12
     e0c:	mov	r7, r0
  uint32_t tt = rtc_get();
     e0e:	bl	9f9c <rtc_get>
  int dd;
  ss= tt % 60; tt /= 60;
  mm= tt % 60; tt /= 60;
  hh= tt % 24; tt /= 24;
  dd= tt;
  sprintf(filename,"/%d/%02d_%02d_%02d.raw",dd,hh,mm,ss);
     e12:	ldr	r4, [pc, #100]	; (e78 <makeFilename(char*)+0x70>)
     e14:	ldr	r3, [pc, #100]	; (e7c <makeFilename(char*)+0x74>)
     e16:	ldr	r6, [pc, #104]	; (e80 <makeFilename(char*)+0x78>)
     e18:	ldr	r2, [pc, #104]	; (e84 <makeFilename(char*)+0x7c>)
     e1a:	ldr	r1, [pc, #108]	; (e88 <makeFilename(char*)+0x80>)
     e1c:	umull	lr, r5, r4, r0
     e20:	lsrs	r5, r5, #5
     e22:	umull	lr, r3, r3, r0
     e26:	umull	lr, r4, r4, r5
     e2a:	lsrs	r3, r3, #11
     e2c:	lsrs	r4, r4, #5
     e2e:	umull	lr, r6, r6, r3
     e32:	rsb	r4, r4, r4, lsl #4
     e36:	sub.w	r4, r5, r4, lsl #2
     e3a:	lsrs	r6, r6, #4
     e3c:	rsb	r5, r5, r5, lsl #4
     e40:	sub.w	r5, r0, r5, lsl #2
     e44:	add.w	r6, r6, r6, lsl #1
     e48:	umull	r0, r2, r2, r0
     e4c:	lsrs	r2, r2, #16
     e4e:	sub.w	r3, r3, r6, lsl #3
     e52:	stmia.w	sp, {r4, r5}
     e56:	mov	r0, r7
     e58:	bl	cdd4 <sprintf>
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
     e5c:	mov	r0, r7
     e5e:	bl	cf40 <strlen>
     e62:	mov	r1, r0
     e64:	mov	r0, r7
     e66:	bl	9ca8 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
     e6a:	ldr	r0, [pc, #32]	; (e8c <makeFilename(char*)+0x84>)
     e6c:	bl	b250 <Print::println()>
  Serial.println(filename);
  return 1;
}
     e70:	movs	r0, #1
     e72:	add	sp, #12
     e74:	pop	{r4, r5, r6, r7, pc}
     e76:	nop
     e78:	.word	0x88888889
     e7c:	.word	0x91a2b3c5
     e80:	.word	0xaaaaaaab
     e84:	.word	0xc22e4507
     e88:	.word	0x00010494
     e8c:	.word	0x1fff09a4

00000e90 <checkPath(char*)>:

int16_t checkPath(char *filename)
{
     e90:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     e94:	sub	sp, #56	; 0x38
     e96:	mov	r5, r0
  int ln=strlen(filename);
     e98:	bl	cf40 <strlen>
  int i1=-1;
  for(int ii=0;ii<ln;ii++) if(filename[ii]=='/') i1=ii;
     e9c:	cmp	r0, #0
     e9e:	ble.n	f52 <checkPath(char*)+0xc2>
     ea0:	subs	r1, r5, #1
     ea2:	movs	r3, #0
     ea4:	mov.w	r2, #4294967295
     ea8:	ldrb.w	r4, [r1, #1]!
     eac:	cmp	r4, #47	; 0x2f
     eae:	it	eq
     eb0:	moveq	r2, r3
     eb2:	adds	r3, #1
     eb4:	cmp	r0, r3
     eb6:	bne.n	ea8 <checkPath(char*)+0x18>
  if(i1<0) return 1; // no path
     eb8:	cmp	r2, #0
     eba:	blt.n	f52 <checkPath(char*)+0xc2>
  filename[i1]=0;
     ebc:	movs	r6, #0
     ebe:	strb	r6, [r5, r2]
     ec0:	ldr.w	r8, [pc, #192]	; f84 <checkPath(char*)+0xf4>
     ec4:	ldr.w	r7, [r8, #1144]	; 0x478
     ec8:	adds	r4, r5, r2
   *
   * \return true if the file exists else false.
   */
  bool exists(const char* path) {
    return m_fVol ? m_fVol->exists(path) :
           m_xVol ? m_xVol->exists(path) : false;
     eca:	cbz	r7, ef2 <checkPath(char*)+0x62>
   *
   * \return true if the file exists else false.
   */
  bool exists(const char* path) {
    FatFile tmp;
    return tmp.open(this, path, O_RDONLY);
     ecc:	mov	r1, r7
     ece:	mov	r3, r6
     ed0:	mov	r2, r5
     ed2:	mov	r0, sp
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attributes(FILE_ATTR_CLOSED), m_error(0), m_flags(0) {}
     ed4:	strb.w	r6, [sp]
     ed8:	strb.w	r6, [sp, #1]
     edc:	strb.w	r6, [sp, #2]
     ee0:	bl	61bc <FatFile::open(FatVolume*, char const*, int)>
  if(!SD.exists(filename))
     ee4:	cbz	r0, f12 <checkPath(char*)+0x82>
  { Serial.println(filename); 
    if(!SD.mkdir(filename)) return 0;
  }

  filename[i1]='/';
     ee6:	movs	r3, #47	; 0x2f
     ee8:	strb	r3, [r4, #0]
  return 1;
     eea:	movs	r0, #1
}
     eec:	add	sp, #56	; 0x38
     eee:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     ef2:	ldr.w	r1, [r8, #1148]	; 0x47c
     ef6:	cbz	r1, f12 <checkPath(char*)+0x82>
   *
   * \return true if the file exists else false.
   */
  bool exists(const ExChar_t* path) {
    ExFatFile tmp;
    return tmp.open(this, path, O_RDONLY);
     ef8:	mov	r3, r7
     efa:	mov	r2, r5
     efc:	mov	r0, sp
 * \brief Basic file class.
 */
class ExFatFile {
 public:
  /** Create an instance. */
  ExFatFile() : m_attributes(FILE_ATTR_CLOSED), m_error(0), m_flags(0) {}
     efe:	strb.w	r7, [sp, #49]	; 0x31
     f02:	strb.w	r7, [sp, #50]	; 0x32
     f06:	strb.w	r7, [sp, #51]	; 0x33
     f0a:	bl	4b58 <ExFatFile::open(ExFatVolume*, char const*, int)>
  int ln=strlen(filename);
  int i1=-1;
  for(int ii=0;ii<ln;ii++) if(filename[ii]=='/') i1=ii;
  if(i1<0) return 1; // no path
  filename[i1]=0;
  if(!SD.exists(filename))
     f0e:	cmp	r0, #0
     f10:	bne.n	ee6 <checkPath(char*)+0x56>
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
     f12:	mov	r0, r5
     f14:	bl	cf40 <strlen>
     f18:	mov	r1, r0
     f1a:	mov	r0, r5
     f1c:	bl	9ca8 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
     f20:	ldr	r0, [pc, #92]	; (f80 <checkPath(char*)+0xf0>)
     f22:	bl	b250 <Print::println()>
     f26:	ldr.w	r6, [r8, #1144]	; 0x478
     f2a:	ldr	r3, [pc, #88]	; (f84 <checkPath(char*)+0xf4>)
   *
   * \return true for success or false for failure.
   */
  bool mkdir(const char *path, bool pFlag = true) {
    return m_fVol ? m_fVol->mkdir(path, pFlag) :
           m_xVol ? m_xVol->mkdir(path, pFlag) : false;
     f2c:	cbz	r6, f5a <checkPath(char*)+0xca>
   *
   * \return true for success or false for failure.
   */
  bool mkdir(const char* path, bool pFlag = true) {
    FatFile sub;
    return sub.mkdir(vwd(), path, pFlag);
     f2e:	mov	r2, r5
     f30:	add.w	r1, r6, #1088	; 0x440
     f34:	movs	r5, #0
     f36:	movs	r3, #1
     f38:	mov	r0, sp
     f3a:	strb.w	r5, [sp]
     f3e:	strb.w	r5, [sp, #1]
     f42:	strb.w	r5, [sp, #2]
     f46:	bl	68bc <FatFile::mkdir(FatFile*, char const*, bool)>
  { Serial.println(filename); 
    if(!SD.mkdir(filename)) return 0;
     f4a:	cmp	r0, #0
     f4c:	bne.n	ee6 <checkPath(char*)+0x56>
     f4e:	movs	r0, #0
     f50:	b.n	eec <checkPath(char*)+0x5c>
int16_t checkPath(char *filename)
{
  int ln=strlen(filename);
  int i1=-1;
  for(int ii=0;ii<ln;ii++) if(filename[ii]=='/') i1=ii;
  if(i1<0) return 1; // no path
     f52:	movs	r0, #1
    if(!SD.mkdir(filename)) return 0;
  }

  filename[i1]='/';
  return 1;
}
     f54:	add	sp, #56	; 0x38
     f56:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     f5a:	ldr.w	r1, [r3, #1148]	; 0x47c
     f5e:	cmp	r1, #0
     f60:	beq.n	f4e <checkPath(char*)+0xbe>
   *
   * \return true for success or false for failure.
   */
  bool mkdir(const ExChar_t* path, bool pFlag = true) {
    ExFatFile sub;
    return sub.mkdir(vwd(), path, pFlag);
     f62:	mov	r2, r5
     f64:	add.w	r1, r1, #1088	; 0x440
     f68:	movs	r3, #1
     f6a:	mov	r0, sp
     f6c:	strb.w	r6, [sp, #49]	; 0x31
     f70:	strb.w	r6, [sp, #50]	; 0x32
     f74:	strb.w	r6, [sp, #51]	; 0x33
     f78:	bl	5848 <ExFatFile::mkdir(ExFatFile*, char const*, bool)>
     f7c:	b.n	f4a <checkPath(char*)+0xba>
     f7e:	nop
     f80:	.word	0x1fff09a4
     f84:	.word	0x1fff8774

00000f88 <file_open()>:
void makeHeader(char *header);
int16_t makeFilename(char *filename);
int16_t checkPath(char *filename);

int16_t file_open(void)
{ char filename[80];
     f88:	push	{r4, r5, r6, r7, lr}
     f8a:	sub	sp, #164	; 0xa4
  if(!makeFilename(filename)) return 0;
     f8c:	mov	r0, sp
     f8e:	bl	e08 <makeFilename(char*)>
     f92:	cbnz	r0, f9a <file_open()+0x12>
     f94:	movs	r0, #0
  if(!checkPath(filename)) return 0;
  mfile = SD.open(filename,FILE_WRITE);
  return !(!mfile);
}
     f96:	add	sp, #164	; 0xa4
     f98:	pop	{r4, r5, r6, r7, pc}
int16_t checkPath(char *filename);

int16_t file_open(void)
{ char filename[80];
  if(!makeFilename(filename)) return 0;
  if(!checkPath(filename)) return 0;
     f9a:	mov	r0, sp
     f9c:	bl	e90 <checkPath(char*)>
     fa0:	cmp	r0, #0
     fa2:	beq.n	f94 <file_open()+0xc>
		//return sdfs.begin(csPin, SD_SCK_MHZ(24));
	}
	File open(const char *filepath, uint8_t mode = FILE_READ) {
		oflag_t flags = O_READ;
		if (mode == FILE_WRITE) flags = O_RDWR | O_CREAT | O_AT_END;
		SDFAT_FILE file = sdfs.open(filepath, flags);
     fa4:	movw	r3, #16898	; 0x4202
     fa8:	mov	r2, sp
     faa:	ldr	r1, [pc, #172]	; (1058 <file_open()+0xd0>)
     fac:	add	r0, sp, #80	; 0x50
     fae:	bl	822c <FsVolume::open(char const*, int)>
     fb2:	ldr	r3, [sp, #152]	; 0x98
     fb4:	cmp	r3, #0
     fb6:	beq.n	1048 <file_open()+0xc0>
		if (file) return File(new SDFile(file));
     fb8:	movs	r0, #104	; 0x68
     fba:	bl	b340 <operator new(unsigned int)>
     fbe:	mov	r4, r0
#endif

class SDFile : public File
{
public:
	SDFile(const SDFAT_FILE &file) : sdfatfile(file), filename(nullptr) { }
     fc0:	ldr	r5, [pc, #152]	; (105c <file_open()+0xd4>)
//#define BYTE 0
//#endif

class __FlashStringHelper;

class Print
     fc2:	ldrb.w	r1, [sp, #84]	; 0x54
#define Stream_h

#include <inttypes.h>
#include "Print.h"

class Stream : public Print
     fc6:	ldr	r2, [sp, #88]	; 0x58
     fc8:	ldrb.w	r3, [sp, #92]	; 0x5c
     fcc:	str	r5, [r4, #0]
{
  public:
	constexpr Stream() : _timeout(1000), read_error(0) {}
     fce:	mov.w	r0, #1000	; 0x3e8
{
  public:
	constexpr Print() : write_error(0) {}
     fd2:	movs	r5, #0
     fd4:	add	r6, sp, #96	; 0x60
#define Stream_h

#include <inttypes.h>
#include "Print.h"

class Stream : public Print
     fd6:	ldr	r7, [pc, #136]	; (1060 <file_open()+0xd8>)
{
  public:
	constexpr Stream() : _timeout(1000), read_error(0) {}
     fd8:	str	r0, [r4, #8]
//#define BYTE 0
//#endif

class __FlashStringHelper;

class Print
     fda:	strb	r1, [r4, #24]
#define Stream_h

#include <inttypes.h>
#include "Print.h"

class Stream : public Print
     fdc:	str	r2, [r4, #28]
     fde:	strb.w	r3, [r4, #32]
     fe2:	add.w	r0, r4, #36	; 0x24
     fe6:	mov	r1, r6
     fe8:	str	r7, [r4, #20]
{
  public:
	constexpr Print() : write_error(0) {}
     fea:	strb	r5, [r4, #4]
{
  public:
	constexpr Stream() : _timeout(1000), read_error(0) {}
     fec:	strb	r5, [r4, #12]

#define FILE_WHOAMI

class File : public Stream {
public:
	constexpr File() : f(nullptr) { }
     fee:	str	r5, [r4, #16]
     ff0:	bl	7fe8 <FsBaseFile::FsBaseFile(FsBaseFile const&)>
		// or is_base_of
		//static_assert(std::is_same<decltype(*file),File>::value,
			//"File(File *file) constructor only accepts pointers "
			//"to derived classes, not File itself");
		f = file;
		if (f) f->refcount++;
     ff4:	ldr	r3, [r4, #16]
};
/**
 * \class FsFile
 * \brief FsBaseFile file with Arduino Stream.
 */
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
     ff6:	ldr	r2, [pc, #108]	; (1064 <file_open()+0xdc>)
     ff8:	str	r5, [r4, #100]	; 0x64
     ffa:	adds	r3, #1
     ffc:	str	r2, [r4, #20]
     ffe:	str	r3, [r4, #16]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    1000:	ldr	r5, [pc, #100]	; (1068 <file_open()+0xe0>)
    1002:	ldr	r3, [pc, #104]	; (106c <file_open()+0xe4>)
    1004:	str	r3, [sp, #80]	; 0x50
 */
class FsBaseFile {
 public:
  FsBaseFile() : m_fFile(nullptr), m_xFile(nullptr) {}

  ~FsBaseFile() {close();}
    1006:	mov	r0, r6
    1008:	bl	8060 <FsBaseFile::close()>
    100c:	ldr	r2, [r5, #16]
    100e:	cbz	r2, 1022 <file_open()+0x9a>
    1010:	ldr	r3, [r2, #16]
    1012:	subs	r3, #1
    1014:	str	r3, [r2, #16]
    1016:	cbnz	r3, 1022 <file_open()+0x9a>
    1018:	ldr	r0, [r5, #16]
    101a:	cbz	r0, 1022 <file_open()+0x9a>
    101c:	ldr	r3, [r0, #0]
    101e:	ldr	r3, [r3, #32]
    1020:	blx	r3
	File& operator = (const File &file) {
		//Serial.println("File assignment");
		//static int assigncount=0;
		//if (++assigncount > 20) while (1) ;
		invalidate();
		f = file.f;
    1022:	str	r4, [r5, #16]
    1024:	ldr	r5, [pc, #64]	; (1068 <file_open()+0xe0>)
		if (f) f->refcount++;
    1026:	cbz	r4, 1054 <file_open()+0xcc>
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    1028:	ldr	r3, [r4, #16]
    102a:	cbnz	r3, 103a <file_open()+0xb2>
    102c:	ldr	r3, [r4, #0]
    102e:	mov	r0, r4
    1030:	ldr	r3, [r3, #32]
    1032:	blx	r3
    1034:	ldr	r4, [r5, #16]
	}
	virtual void close() {
		if (f) f->close();
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
    1036:	cmp	r4, #0
    1038:	beq.n	f94 <file_open()+0xc>
    103a:	ldr	r3, [r4, #0]
    103c:	mov	r0, r4
    103e:	ldr	r3, [r3, #64]	; 0x40
    1040:	blx	r3
    1042:	sxth	r0, r0
  mfile = SD.open(filename,FILE_WRITE);
  return !(!mfile);
}
    1044:	add	sp, #164	; 0xa4
    1046:	pop	{r4, r5, r6, r7, pc}
  bool isHidden() {
    return m_fFile ? m_fFile->isHidden() :
           m_xFile ? m_xFile->isHidden() : false;
  }
  /** \return True if this is an open file/directory else false. */
  bool isOpen() {return m_fFile || m_xFile;}
    1048:	ldr	r0, [sp, #156]	; 0x9c
    104a:	cmp	r0, #0
    104c:	bne.n	fb8 <file_open()+0x30>

#define FILE_WHOAMI

class File : public Stream {
public:
	constexpr File() : f(nullptr) { }
    104e:	mov	r4, r0
    1050:	add	r6, sp, #96	; 0x60
    1052:	b.n	1000 <file_open()+0x78>
		//Serial.println("File assignment");
		//static int assigncount=0;
		//if (++assigncount > 20) while (1) ;
		invalidate();
		f = file.f;
		if (f) f->refcount++;
    1054:	mov	r0, r4
    1056:	b.n	f96 <file_open()+0xe>
    1058:	.word	0x1fff8774
    105c:	.word	0x000103d8
    1060:	.word	0x00010310
    1064:	.word	0x00010358
    1068:	.word	0x1fff0978
    106c:	.word	0x00010334

00001070 <do_logger(short)>:
#define NBUF_DISK (NDBL*NBUF_ACQ)
uint32_t diskBuffer[NBUF_DISK];
uint32_t maxDel=0;

int16_t do_logger(int16_t state)
{ uint32_t to=millis();
    1070:	push	{r4, r5, r6, lr}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1072:	ldr	r5, [pc, #160]	; (1114 <do_logger(short)+0xa4>)
    1074:	sub	sp, #8
    1076:	ldr	r3, [r5, #0]
    1078:	str	r3, [sp, #0]
    107a:	mov	r4, r0
  if(pullData(diskBuffer,NDBL))
    107c:	movs	r1, #1
    107e:	ldr	r0, [pc, #152]	; (1118 <do_logger(short)+0xa8>)
	return ret;
    1080:	ldr	r6, [sp, #0]
    1082:	bl	cb4 <pullData(unsigned long*, unsigned long)>
    1086:	cbz	r0, 109c <do_logger(short)+0x2c>
  {
    if(state==0)
    1088:	cbz	r4, 10c2 <do_logger(short)+0x52>
    { // acquisition is running, need to open file
      if(!file_open()) return -2;
      state=1;
    }
    if(state==1)
    108a:	cmp	r4, #1
    108c:	beq.n	10c8 <do_logger(short)+0x58>
    { // file just opended, need to write header
      if(!file_writeHeader()) return -3;
      state=2;
      
    }
    if(state>=2)
    108e:	ble.n	10a0 <do_logger(short)+0x30>
    { // write data to disk
      if(!file_writeData(diskBuffer,NBUF_DISK*4)) return -4;
    1090:	mov.w	r1, #512	; 0x200
    1094:	ldr	r0, [pc, #128]	; (1118 <do_logger(short)+0xa8>)
    1096:	bl	da8 <file_writeData(void*, unsigned long)>
    109a:	cbz	r0, 10f4 <do_logger(short)+0x84>
    }
  }

  if(state==3)
    109c:	cmp	r4, #3
    109e:	beq.n	10de <do_logger(short)+0x6e>
  { // close file, but continue acquisition
    if(!file_close()) return -5;
    state=0;
  }

  if(state==4)
    10a0:	cmp	r4, #4
    10a2:	beq.n	10e8 <do_logger(short)+0x78>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    10a4:	ldr	r3, [r5, #0]
    10a6:	str	r3, [sp, #4]
    if(!file_close()) return -6;
    state=-1;
  }

  uint32_t dt=millis()-to;
  if(dt>maxDel) maxDel=dt;
    10a8:	ldr	r2, [pc, #112]	; (111c <do_logger(short)+0xac>)
	return ret;
    10aa:	ldr	r3, [sp, #4]
    10ac:	ldr	r1, [r2, #0]
  { // close file and stop acquisition
    if(!file_close()) return -6;
    state=-1;
  }

  uint32_t dt=millis()-to;
    10ae:	subs	r3, r3, r6
  if(dt>maxDel) maxDel=dt;
    10b0:	cmp	r3, r1
    10b2:	bls.n	10bc <do_logger(short)+0x4c>
    10b4:	str	r3, [r2, #0]

  return state;
    10b6:	mov	r0, r4
}
    10b8:	add	sp, #8
    10ba:	pop	{r4, r5, r6, pc}
  }

  uint32_t dt=millis()-to;
  if(dt>maxDel) maxDel=dt;

  return state;
    10bc:	mov	r0, r4
}
    10be:	add	sp, #8
    10c0:	pop	{r4, r5, r6, pc}
{ uint32_t to=millis();
  if(pullData(diskBuffer,NDBL))
  {
    if(state==0)
    { // acquisition is running, need to open file
      if(!file_open()) return -2;
    10c2:	bl	f88 <file_open()>
    10c6:	cbz	r0, 10fa <do_logger(short)+0x8a>
      state=1;
    }
    if(state==1)
    { // file just opended, need to write header
      if(!file_writeHeader()) return -3;
    10c8:	bl	d60 <file_writeHeader()>
    10cc:	cbz	r0, 1100 <do_logger(short)+0x90>
      state=2;
      
    }
    if(state>=2)
    { // write data to disk
      if(!file_writeData(diskBuffer,NBUF_DISK*4)) return -4;
    10ce:	mov.w	r1, #512	; 0x200
    10d2:	ldr	r0, [pc, #68]	; (1118 <do_logger(short)+0xa8>)
    10d4:	bl	da8 <file_writeData(void*, unsigned long)>
    10d8:	cbz	r0, 10f4 <do_logger(short)+0x84>
      state=1;
    }
    if(state==1)
    { // file just opended, need to write header
      if(!file_writeHeader()) return -3;
      state=2;
    10da:	movs	r4, #2
    10dc:	b.n	10a4 <do_logger(short)+0x34>
    }
  }

  if(state==3)
  { // close file, but continue acquisition
    if(!file_close()) return -5;
    10de:	bl	de0 <file_close()>
    10e2:	cbz	r0, 110c <do_logger(short)+0x9c>
    state=0;
    10e4:	movs	r4, #0
    10e6:	b.n	10a4 <do_logger(short)+0x34>
  }

  if(state==4)
  { // close file and stop acquisition
    if(!file_close()) return -6;
    10e8:	bl	de0 <file_close()>
    10ec:	cbz	r0, 1106 <do_logger(short)+0x96>
    state=-1;
    10ee:	mov.w	r4, #4294967295
    10f2:	b.n	10a4 <do_logger(short)+0x34>
      state=2;
      
    }
    if(state>=2)
    { // write data to disk
      if(!file_writeData(diskBuffer,NBUF_DISK*4)) return -4;
    10f4:	mvn.w	r0, #3
    10f8:	b.n	10b8 <do_logger(short)+0x48>
{ uint32_t to=millis();
  if(pullData(diskBuffer,NDBL))
  {
    if(state==0)
    { // acquisition is running, need to open file
      if(!file_open()) return -2;
    10fa:	mvn.w	r0, #1
    10fe:	b.n	10b8 <do_logger(short)+0x48>
      state=1;
    }
    if(state==1)
    { // file just opended, need to write header
      if(!file_writeHeader()) return -3;
    1100:	mvn.w	r0, #2
    1104:	b.n	10b8 <do_logger(short)+0x48>
    state=0;
  }

  if(state==4)
  { // close file and stop acquisition
    if(!file_close()) return -6;
    1106:	mvn.w	r0, #5
    110a:	b.n	10b8 <do_logger(short)+0x48>
    }
  }

  if(state==3)
  { // close file, but continue acquisition
    if(!file_close()) return -5;
    110c:	mvn.w	r0, #4
    1110:	b.n	10b8 <do_logger(short)+0x48>
    1112:	nop
    1114:	.word	0x1fff8c34
    1118:	.word	0x1fff82f8
    111c:	.word	0x1fff1470

00001120 <loop>:
  state=-1;
}

uint32_t loop_count=0;
void loop()
{ loop_count++;
    1120:	push	{r4, r5, r6, lr}
    1122:	ldr	r2, [pc, #120]	; (119c <loop+0x7c>)
  state = do_menu(state);
    1124:	ldr	r5, [pc, #120]	; (11a0 <loop+0x80>)
  state=-1;
}

uint32_t loop_count=0;
void loop()
{ loop_count++;
    1126:	ldr	r3, [r2, #0]
  state = do_menu(state);
    1128:	ldrsh.w	r0, [r5]
  state=-1;
}

uint32_t loop_count=0;
void loop()
{ loop_count++;
    112c:	adds	r3, #1
    112e:	sub	sp, #8
    1130:	str	r3, [r2, #0]
  state = do_menu(state);
    1132:	bl	d0c <do_menu(short)>

uint32_t t_on = 60;
int16_t check_filing(int16_t state)
{
  static uint32_t to;
  if(state==2)
    1136:	cmp	r0, #2
}

uint32_t loop_count=0;
void loop()
{ loop_count++;
  state = do_menu(state);
    1138:	mov	r4, r0
    113a:	strh	r0, [r5, #0]

uint32_t t_on = 60;
int16_t check_filing(int16_t state)
{
  static uint32_t to;
  if(state==2)
    113c:	beq.n	117c <loop+0x5c>
{ loop_count++;
  state = do_menu(state);
  state = acq_check(state);
  state = check_filing(state);
  //
  if(state<0)
    113e:	cmp	r0, #0
    1140:	blt.n	1170 <loop+0x50>
    mtpd.loop();
  else
    state=do_logger(state);
    1142:	mov	r0, r4
    1144:	bl	1070 <do_logger(short)>
    1148:	strh	r0, [r5, #0]

  if(state>=0) logg(1000,"loop");
    114a:	cmp	r0, #0
    114c:	blt.n	1162 <loop+0x42>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    114e:	ldr	r3, [pc, #84]	; (11a4 <loop+0x84>)
/**************** Online logging *******************************/
extern uint32_t loop_count, acq_count, acq_miss, maxDel;
extern uint16_t maxCount;
void logg(uint32_t del, const char *txt)
{ static uint32_t to;
  if(millis()-to > del)
    1150:	ldr	r2, [pc, #84]	; (11a8 <loop+0x88>)
    1152:	ldr	r3, [r3, #0]
    1154:	str	r3, [sp, #4]
	return ret;
    1156:	ldr	r3, [sp, #4]
    1158:	ldr	r2, [r2, #0]
    115a:	subs	r3, r3, r2
    115c:	cmp.w	r3, #1000	; 0x3e8
    1160:	bhi.n	1166 <loop+0x46>
  else
    state=do_logger(state);

  if(state>=0) logg(1000,"loop");
  //asm("wfi"); // may wait forever on T4.x
}
    1162:	add	sp, #8
    1164:	pop	{r4, r5, r6, pc}
    1166:	ldr	r0, [pc, #68]	; (11ac <loop+0x8c>)
    1168:	bl	7c0 <logg(unsigned long, char const*) [clone .part.37]>
    116c:	add	sp, #8
    116e:	pop	{r4, r5, r6, pc}
  state = do_menu(state);
  state = acq_check(state);
  state = check_filing(state);
  //
  if(state<0)
    mtpd.loop();
    1170:	ldr	r0, [pc, #60]	; (11b0 <loop+0x90>)
    1172:	bl	3600 <MTPD::loop()>
    1176:	ldrsh.w	r0, [r5]
    117a:	b.n	114a <loop+0x2a>
int16_t check_filing(int16_t state)
{
  static uint32_t to;
  if(state==2)
  {
    uint32_t tt = rtc_get();
    117c:	bl	9f9c <rtc_get>
    uint32_t dt = tt % t_on;
    1180:	ldr	r3, [pc, #48]	; (11b4 <loop+0x94>)
    if(dt<to) state = 3;
    1182:	ldr	r2, [pc, #52]	; (11b8 <loop+0x98>)
{
  static uint32_t to;
  if(state==2)
  {
    uint32_t tt = rtc_get();
    uint32_t dt = tt % t_on;
    1184:	ldr	r3, [r3, #0]
    if(dt<to) state = 3;
    1186:	ldr	r1, [r2, #0]
{
  static uint32_t to;
  if(state==2)
  {
    uint32_t tt = rtc_get();
    uint32_t dt = tt % t_on;
    1188:	udiv	r6, r0, r3
    118c:	mls	r0, r6, r3, r0
    if(dt<to) state = 3;
    1190:	cmp	r0, r1
    1192:	it	cc
    1194:	movcc	r4, #3
uint32_t loop_count=0;
void loop()
{ loop_count++;
  state = do_menu(state);
  state = acq_check(state);
  state = check_filing(state);
    1196:	strh	r4, [r5, #0]
  if(state==2)
  {
    uint32_t tt = rtc_get();
    uint32_t dt = tt % t_on;
    if(dt<to) state = 3;
    to = dt;
    1198:	str	r0, [r2, #0]
    119a:	b.n	1142 <loop+0x22>
    119c:	.word	0x1fff1474
    11a0:	.word	0x1fff247c
    11a4:	.word	0x1fff8c34
    11a8:	.word	0x1fff2478
    11ac:	.word	0x000104ac
    11b0:	.word	0x1fff82e4
    11b4:	.word	0x1fff0974
    11b8:	.word	0x1fff2484

000011bc <acq_init(long)>:

    const int32_t fsamp0=(((F_PLL*MCLK_MULT)/MCLK_DIV)/(2*BIT_DIV)/(NCH_I2S*32/N_ADC));


    void acq_init(int32_t fsamp)
    {
    11bc:	push	{r3, r4, r5, r6, r7, lr}
        Serial.printf("%d %d\n",fsamp,fsamp0);
    11be:	mov	r2, r0
    11c0:	ldr	r3, [pc, #280]	; (12dc <acq_init(long)+0x120>)
    11c2:	ldr	r1, [pc, #284]	; (12e0 <acq_init(long)+0x124>)
    11c4:	ldr	r0, [pc, #284]	; (12e4 <acq_init(long)+0x128>)
//            CORE_PIN39_CONFIG = PORT_PCR_MUX(6);  //pin39, PTA17, I2S0_MCLK
//            CORE_PIN11_CONFIG = PORT_PCR_MUX(4);  //pin11, PTC6,  I2S0_RX_BCLK
//            CORE_PIN12_CONFIG = PORT_PCR_MUX(4);  //pin12, PTC7,  I2S0_RX_FS
//            CORE_PIN13_CONFIG = PORT_PCR_MUX(4);  //pin13, PTC5,  I2S0_RXD0
        #elif I2S_CONFIG==1
            CORE_PIN35_CONFIG = PORT_PCR_MUX(4);   // PTC8,  I2S0_MCLK
    11c6:	ldr	r7, [pc, #288]	; (12e8 <acq_init(long)+0x12c>)
            CORE_PIN36_CONFIG = PORT_PCR_MUX(4);   // PTC9,  I2S0_RX_BCLK
    11c8:	ldr	r6, [pc, #288]	; (12ec <acq_init(long)+0x130>)
            CORE_PIN37_CONFIG = PORT_PCR_MUX(4);   // PTC10, I2S0_RX_FS 
    11ca:	ldr	r5, [pc, #292]	; (12f0 <acq_init(long)+0x134>)
//            CORE_PIN36_CONFIG = PORT_PCR_MUX(4);  //pin36, PTC9,   I2S0_RX_BCLK
//            CORE_PIN37_CONFIG = PORT_PCR_MUX(4);  //pin37, PTC10,  I2S0_RX_FS
//            CORE_PIN27_CONFIG = PORT_PCR_MUX(6);  //pin27, PTA15,  I2S0_RXD0
        #endif

        I2S0_RCSR=0;
    11cc:	ldr	r4, [pc, #292]	; (12f4 <acq_init(long)+0x138>)
    const int32_t fsamp0=(((F_PLL*MCLK_MULT)/MCLK_DIV)/(2*BIT_DIV)/(NCH_I2S*32/N_ADC));


    void acq_init(int32_t fsamp)
    {
        Serial.printf("%d %d\n",fsamp,fsamp0);
    11ce:	bl	b280 <Print::printf(char const*, ...)>
        SIM_SCGC6 |= SIM_SCGC6_I2S;
    11d2:	ldr	r3, [pc, #292]	; (12f8 <acq_init(long)+0x13c>)
        SIM_SCGC7 |= SIM_SCGC7_DMA;
    11d4:	ldr	r1, [pc, #292]	; (12fc <acq_init(long)+0x140>)


    void acq_init(int32_t fsamp)
    {
        Serial.printf("%d %d\n",fsamp,fsamp0);
        SIM_SCGC6 |= SIM_SCGC6_I2S;
    11d6:	ldr	r2, [r3, #0]
        #endif

        I2S0_RCSR=0;

        // enable MCLK output // MCLK = INP *((MULT)/(DIV))
        I2S0_MDR = I2S_MDR_FRACT((MCLK_MULT-1)) | I2S_MDR_DIVIDE((MCLK_DIV-1));
    11d8:	ldr	r0, [pc, #292]	; (1300 <acq_init(long)+0x144>)


    void acq_init(int32_t fsamp)
    {
        Serial.printf("%d %d\n",fsamp,fsamp0);
        SIM_SCGC6 |= SIM_SCGC6_I2S;
    11da:	orr.w	r2, r2, #32768	; 0x8000
    11de:	str	r2, [r3, #0]
        SIM_SCGC7 |= SIM_SCGC7_DMA;
    11e0:	ldr	r2, [r1, #0]
    11e2:	orr.w	r2, r2, #2
    11e6:	str	r2, [r1, #0]
        SIM_SCGC6 |= SIM_SCGC6_DMAMUX;
    11e8:	ldr	r2, [r3, #0]
    11ea:	orr.w	r2, r2, #2
    11ee:	str	r2, [r3, #0]

        I2S0_RCSR=0;

        // enable MCLK output // MCLK = INP *((MULT)/(DIV))
        I2S0_MDR = I2S_MDR_FRACT((MCLK_MULT-1)) | I2S_MDR_DIVIDE((MCLK_DIV-1));
        while(I2S0_MCR & I2S_MCR_DUF);
    11f0:	sub.w	r1, r1, #101888	; 0x18e00
//            CORE_PIN39_CONFIG = PORT_PCR_MUX(6);  //pin39, PTA17, I2S0_MCLK
//            CORE_PIN11_CONFIG = PORT_PCR_MUX(4);  //pin11, PTC6,  I2S0_RX_BCLK
//            CORE_PIN12_CONFIG = PORT_PCR_MUX(4);  //pin12, PTC7,  I2S0_RX_FS
//            CORE_PIN13_CONFIG = PORT_PCR_MUX(4);  //pin13, PTC5,  I2S0_RXD0
        #elif I2S_CONFIG==1
            CORE_PIN35_CONFIG = PORT_PCR_MUX(4);   // PTC8,  I2S0_MCLK
    11f4:	mov.w	r3, #1024	; 0x400
//            CORE_PIN36_CONFIG = PORT_PCR_MUX(4);  //pin36, PTC9,   I2S0_RX_BCLK
//            CORE_PIN37_CONFIG = PORT_PCR_MUX(4);  //pin37, PTC10,  I2S0_RX_FS
//            CORE_PIN27_CONFIG = PORT_PCR_MUX(6);  //pin27, PTA15,  I2S0_RXD0
        #endif

        I2S0_RCSR=0;
    11f8:	mov.w	lr, #0

        // enable MCLK output // MCLK = INP *((MULT)/(DIV))
        I2S0_MDR = I2S_MDR_FRACT((MCLK_MULT-1)) | I2S_MDR_DIVIDE((MCLK_DIV-1));
    11fc:	movs	r2, #1
//            CORE_PIN39_CONFIG = PORT_PCR_MUX(6);  //pin39, PTA17, I2S0_MCLK
//            CORE_PIN11_CONFIG = PORT_PCR_MUX(4);  //pin11, PTC6,  I2S0_RX_BCLK
//            CORE_PIN12_CONFIG = PORT_PCR_MUX(4);  //pin12, PTC7,  I2S0_RX_FS
//            CORE_PIN13_CONFIG = PORT_PCR_MUX(4);  //pin13, PTC5,  I2S0_RXD0
        #elif I2S_CONFIG==1
            CORE_PIN35_CONFIG = PORT_PCR_MUX(4);   // PTC8,  I2S0_MCLK
    11fe:	str	r3, [r7, #0]

        I2S0_RCSR=0;

        // enable MCLK output // MCLK = INP *((MULT)/(DIV))
        I2S0_MDR = I2S_MDR_FRACT((MCLK_MULT-1)) | I2S_MDR_DIVIDE((MCLK_DIV-1));
        while(I2S0_MCR & I2S_MCR_DUF);
    1200:	sub.w	r1, r1, #320	; 0x140
//            CORE_PIN11_CONFIG = PORT_PCR_MUX(4);  //pin11, PTC6,  I2S0_RX_BCLK
//            CORE_PIN12_CONFIG = PORT_PCR_MUX(4);  //pin12, PTC7,  I2S0_RX_FS
//            CORE_PIN13_CONFIG = PORT_PCR_MUX(4);  //pin13, PTC5,  I2S0_RXD0
        #elif I2S_CONFIG==1
            CORE_PIN35_CONFIG = PORT_PCR_MUX(4);   // PTC8,  I2S0_MCLK
            CORE_PIN36_CONFIG = PORT_PCR_MUX(4);   // PTC9,  I2S0_RX_BCLK
    1204:	str	r3, [r6, #0]
            CORE_PIN37_CONFIG = PORT_PCR_MUX(4);   // PTC10, I2S0_RX_FS 
    1206:	str	r3, [r5, #0]
//            CORE_PIN36_CONFIG = PORT_PCR_MUX(4);  //pin36, PTC9,   I2S0_RX_BCLK
//            CORE_PIN37_CONFIG = PORT_PCR_MUX(4);  //pin37, PTC10,  I2S0_RX_FS
//            CORE_PIN27_CONFIG = PORT_PCR_MUX(6);  //pin27, PTA15,  I2S0_RXD0
        #endif

        I2S0_RCSR=0;
    1208:	str.w	lr, [r4]

        // enable MCLK output // MCLK = INP *((MULT)/(DIV))
        I2S0_MDR = I2S_MDR_FRACT((MCLK_MULT-1)) | I2S_MDR_DIVIDE((MCLK_DIV-1));
    120c:	str	r2, [r0, #0]
        while(I2S0_MCR & I2S_MCR_DUF);
    120e:	ldr	r3, [r1, #0]
    1210:	ldr	r2, [pc, #240]	; (1304 <acq_init(long)+0x148>)
    1212:	cmp	r3, #0
    1214:	blt.n	120e <acq_init(long)+0x52>
        I2S0_MCR = I2S_MCR_MICS(MCLK_SRC) | I2S_MCR_MOE;
        
        I2S0_RMR=0; // enable receiver mask
    1216:	ldr.w	lr, [pc, #316]	; 1354 <acq_init(long)+0x198>
        I2S0_RCR1 = I2S_RCR1_RFW(3); 
    121a:	ldr	r6, [pc, #236]	; (1308 <acq_init(long)+0x14c>)
                    | I2S_RCR4_MF;
        
        I2S0_RCR5 = I2S_RCR5_WNW(31) | I2S_RCR5_W0W(31) | I2S_RCR5_FBT(31);


  dma.begin(true); // Allocate the DMA channel first
    121c:	ldr	r4, [pc, #236]	; (130c <acq_init(long)+0x150>)
        I2S0_RCR4 = I2S_RCR4_FRSZ((FRAME_I2S-1)) 
                    | I2S_RCR4_FSE  // frame sync early
                    | I2S_RCR4_FSD  // Frame sync in master mode
                    | I2S_RCR4_MF;
        
        I2S0_RCR5 = I2S_RCR5_WNW(31) | I2S_RCR5_W0W(31) | I2S_RCR5_FBT(31);
    121e:	ldr	r3, [pc, #240]	; (1310 <acq_init(long)+0x154>)
        I2S0_RCR1 = I2S_RCR1_RFW(3); 

        I2S0_RCR2 = I2S_RCR2_SYNC(0) 
                    | I2S_RCR2_BCP 
                    | I2S_RCR2_BCD  // Bit clock in master mode
                    | I2S_RCR2_DIV((BIT_DIV-1)); // divides MCLK down to Bitclock (BIT_DIV)*2
    1220:	ldr	r0, [pc, #240]	; (1314 <acq_init(long)+0x158>)
                    
        I2S0_RCR4 = I2S_RCR4_FRSZ((FRAME_I2S-1)) 
                    | I2S_RCR4_FSE  // frame sync early
                    | I2S_RCR4_FSD  // Frame sync in master mode
                    | I2S_RCR4_MF;
    1222:	ldr	r1, [pc, #244]	; (1318 <acq_init(long)+0x15c>)
        I2S0_RCR1 = I2S_RCR1_RFW(3); 

        I2S0_RCR2 = I2S_RCR2_SYNC(0) 
                    | I2S_RCR2_BCP 
                    | I2S_RCR2_BCD  // Bit clock in master mode
                    | I2S_RCR2_DIV((BIT_DIV-1)); // divides MCLK down to Bitclock (BIT_DIV)*2
    1224:	ldr	r7, [pc, #244]	; (131c <acq_init(long)+0x160>)
        I2S0_RCSR=0;

        // enable MCLK output // MCLK = INP *((MULT)/(DIV))
        I2S0_MDR = I2S_MDR_FRACT((MCLK_MULT-1)) | I2S_MDR_DIVIDE((MCLK_DIV-1));
        while(I2S0_MCR & I2S_MCR_DUF);
        I2S0_MCR = I2S_MCR_MICS(MCLK_SRC) | I2S_MCR_MOE;
    1226:	mov.w	r5, #1124073472	; 0x43000000
    122a:	str	r5, [r2, #0]
        
        I2S0_RMR=0; // enable receiver mask
    122c:	movs	r5, #0
        I2S0_RCR1 = I2S_RCR1_RFW(3); 
    122e:	movs	r2, #3
        // enable MCLK output // MCLK = INP *((MULT)/(DIV))
        I2S0_MDR = I2S_MDR_FRACT((MCLK_MULT-1)) | I2S_MDR_DIVIDE((MCLK_DIV-1));
        while(I2S0_MCR & I2S_MCR_DUF);
        I2S0_MCR = I2S_MCR_MICS(MCLK_SRC) | I2S_MCR_MOE;
        
        I2S0_RMR=0; // enable receiver mask
    1230:	str.w	r5, [lr]
        I2S0_RCR1 = I2S_RCR1_RFW(3); 
    1234:	str	r2, [r6, #0]
        I2S0_RCR4 = I2S_RCR4_FRSZ((FRAME_I2S-1)) 
                    | I2S_RCR4_FSE  // frame sync early
                    | I2S_RCR4_FSD  // Frame sync in master mode
                    | I2S_RCR4_MF;
        
        I2S0_RCR5 = I2S_RCR5_WNW(31) | I2S_RCR5_W0W(31) | I2S_RCR5_FBT(31);
    1236:	ldr	r2, [pc, #232]	; (1320 <acq_init(long)+0x164>)
                    | I2S_RCR2_DIV((BIT_DIV-1)); // divides MCLK down to Bitclock (BIT_DIV)*2
                    
        I2S0_RCR4 = I2S_RCR4_FRSZ((FRAME_I2S-1)) 
                    | I2S_RCR4_FSE  // frame sync early
                    | I2S_RCR4_FSD  // Frame sync in master mode
                    | I2S_RCR4_MF;
    1238:	ldr	r6, [pc, #232]	; (1324 <acq_init(long)+0x168>)
        I2S0_RCR1 = I2S_RCR1_RFW(3); 

        I2S0_RCR2 = I2S_RCR2_SYNC(0) 
                    | I2S_RCR2_BCP 
                    | I2S_RCR2_BCD  // Bit clock in master mode
                    | I2S_RCR2_DIV((BIT_DIV-1)); // divides MCLK down to Bitclock (BIT_DIV)*2
    123a:	str	r7, [r0, #0]
                    
        I2S0_RCR4 = I2S_RCR4_FRSZ((FRAME_I2S-1)) 
                    | I2S_RCR4_FSE  // frame sync early
                    | I2S_RCR4_FSD  // Frame sync in master mode
                    | I2S_RCR4_MF;
    123c:	str	r6, [r1, #0]
        
        I2S0_RCR5 = I2S_RCR5_WNW(31) | I2S_RCR5_W0W(31) | I2S_RCR5_FBT(31);


  dma.begin(true); // Allocate the DMA channel first
    123e:	mov	r0, r4
        I2S0_RCR4 = I2S_RCR4_FRSZ((FRAME_I2S-1)) 
                    | I2S_RCR4_FSE  // frame sync early
                    | I2S_RCR4_FSD  // Frame sync in master mode
                    | I2S_RCR4_MF;
        
        I2S0_RCR5 = I2S_RCR5_WNW(31) | I2S_RCR5_W0W(31) | I2S_RCR5_FBT(31);
    1240:	str	r2, [r3, #0]


  dma.begin(true); // Allocate the DMA channel first
    1242:	movs	r1, #1
    1244:	bl	b0a0 <DMAChannel::begin(bool)>
          dma.TCD->ATTR = DMA_TCD_ATTR_SSIZE(2) | DMA_TCD_ATTR_DSIZE(2);
          dma.TCD->NBYTES_MLNO = 4;
          dma.TCD->SLAST = 0;
#elif N_ADC==2
          CORE_PIN13_CONFIG = PORT_PCR_MUX(4);  // PTC5,  I2S0_RXD0
          CORE_PIN38_CONFIG = PORT_PCR_MUX(4);  // PTC11, I2S0_RXD1
    1248:	ldr	r7, [pc, #220]	; (1328 <acq_init(long)+0x16c>)
          dma.TCD->SOFF = 0;
          dma.TCD->ATTR = DMA_TCD_ATTR_SSIZE(2) | DMA_TCD_ATTR_DSIZE(2);
          dma.TCD->NBYTES_MLNO = 4;
          dma.TCD->SLAST = 0;
#elif N_ADC==2
          CORE_PIN13_CONFIG = PORT_PCR_MUX(4);  // PTC5,  I2S0_RXD0
    124a:	ldr	r0, [pc, #224]	; (132c <acq_init(long)+0x170>)
          CORE_PIN38_CONFIG = PORT_PCR_MUX(4);  // PTC11, I2S0_RXD1

          I2S0_RCR3 = I2S_RCR3_RCE_2CH;
    124c:	ldr	r1, [pc, #224]	; (1330 <acq_init(long)+0x174>)

          dma.TCD->SADDR = &I2S0_RDR0;
    124e:	ldr	r2, [pc, #228]	; (1334 <acq_init(long)+0x178>)
          dma.TCD->NBYTES_MLOFFYES = DMA_TCD_NBYTES_SMLOE |
              DMA_TCD_NBYTES_MLOFFYES_MLOFF(-8) |
              DMA_TCD_NBYTES_MLOFFYES_NBYTES(8);
          dma.TCD->SLAST = -8;
#endif
          dma.TCD->DADDR = tdm_rx_buffer;
    1250:	ldr	r6, [pc, #228]	; (1338 <acq_init(long)+0x17c>)
          dma.TCD->SOFF = 0;
          dma.TCD->ATTR = DMA_TCD_ATTR_SSIZE(2) | DMA_TCD_ATTR_DSIZE(2);
          dma.TCD->NBYTES_MLNO = 4;
          dma.TCD->SLAST = 0;
#elif N_ADC==2
          CORE_PIN13_CONFIG = PORT_PCR_MUX(4);  // PTC5,  I2S0_RXD0
    1252:	mov.w	r3, #1024	; 0x400
    1256:	str	r3, [r0, #0]
          CORE_PIN38_CONFIG = PORT_PCR_MUX(4);  // PTC11, I2S0_RXD1
    1258:	str	r3, [r7, #0]

          I2S0_RCR3 = I2S_RCR3_RCE_2CH;
    125a:	mov.w	r0, #196608	; 0x30000

          dma.TCD->SADDR = &I2S0_RDR0;
    125e:	ldr	r3, [r4, #0]
          dma.TCD->SLAST = 0;
#elif N_ADC==2
          CORE_PIN13_CONFIG = PORT_PCR_MUX(4);  // PTC5,  I2S0_RXD0
          CORE_PIN38_CONFIG = PORT_PCR_MUX(4);  // PTC11, I2S0_RXD1

          I2S0_RCR3 = I2S_RCR3_RCE_2CH;
    1260:	str	r0, [r1, #0]

          dma.TCD->SADDR = &I2S0_RDR0;
          dma.TCD->SOFF = 4;
    1262:	movs	r0, #4
          CORE_PIN13_CONFIG = PORT_PCR_MUX(4);  // PTC5,  I2S0_RXD0
          CORE_PIN38_CONFIG = PORT_PCR_MUX(4);  // PTC11, I2S0_RXD1

          I2S0_RCR3 = I2S_RCR3_RCE_2CH;

          dma.TCD->SADDR = &I2S0_RDR0;
    1264:	str	r2, [r3, #0]
          dma.TCD->SOFF = 4;
    1266:	strh	r0, [r3, #4]
	// 32 bits.  If a channel is configured for 200 transfers

	// Use a hardware trigger to make the DMA channel run
	void triggerAtHardwareEvent(uint8_t source) {
		volatile uint8_t *mux;
		mux = (volatile uint8_t *)&(DMAMUX0_CHCFG0) + channel;
    1268:	ldrb	r2, [r4, #4]
          dma.TCD->NBYTES_MLOFFYES = DMA_TCD_NBYTES_SMLOE |
              DMA_TCD_NBYTES_MLOFFYES_MLOFF(-8) |
              DMA_TCD_NBYTES_MLOFFYES_NBYTES(8);
          dma.TCD->SLAST = -8;
#endif
          dma.TCD->DADDR = tdm_rx_buffer;
    126a:	str	r6, [r3, #16]
    126c:	add.w	r2, r2, #1073741824	; 0x40000000

          I2S0_RCR3 = I2S_RCR3_RCE_2CH;

          dma.TCD->SADDR = &I2S0_RDR0;
          dma.TCD->SOFF = 4;
          dma.TCD->ATTR = DMA_TCD_ATTR_SSIZE(2) | DMA_TCD_ATTR_DSIZE(2);
    1270:	movw	r6, #514	; 0x202
    1274:	strh	r6, [r3, #6]
    1276:	add.w	r2, r2, #135168	; 0x21000
          dma.TCD->NBYTES_MLOFFYES = DMA_TCD_NBYTES_SMLOE |
              DMA_TCD_NBYTES_MLOFFYES_MLOFF(-8) |
              DMA_TCD_NBYTES_MLOFFYES_NBYTES(8);
    127a:	ldr	r1, [pc, #192]	; (133c <acq_init(long)+0x180>)
          dma.TCD->SLAST = -8;
#endif
          dma.TCD->DADDR = tdm_rx_buffer;
          dma.TCD->DOFF = 4;
          dma.TCD->CITER_ELINKNO = NBUF_I2S;
          dma.TCD->DLASTSGA = -sizeof(tdm_rx_buffer);
    127c:	ldr	r6, [pc, #192]	; (1340 <acq_init(long)+0x184>)
          dma.TCD->SADDR = &I2S0_RDR0;
          dma.TCD->SOFF = 4;
          dma.TCD->ATTR = DMA_TCD_ATTR_SSIZE(2) | DMA_TCD_ATTR_DSIZE(2);
          dma.TCD->NBYTES_MLOFFYES = DMA_TCD_NBYTES_SMLOE |
              DMA_TCD_NBYTES_MLOFFYES_MLOFF(-8) |
              DMA_TCD_NBYTES_MLOFFYES_NBYTES(8);
    127e:	str	r1, [r3, #8]
          dma.TCD->SLAST = -8;
    1280:	mvn.w	r7, #7
    1284:	str	r7, [r3, #12]
#endif
          dma.TCD->DADDR = tdm_rx_buffer;
          dma.TCD->DOFF = 4;
          dma.TCD->CITER_ELINKNO = NBUF_I2S;
          dma.TCD->DLASTSGA = -sizeof(tdm_rx_buffer);
    1286:	str	r6, [r3, #24]
              DMA_TCD_NBYTES_MLOFFYES_NBYTES(8);
          dma.TCD->SLAST = -8;
#endif
          dma.TCD->DADDR = tdm_rx_buffer;
          dma.TCD->DOFF = 4;
          dma.TCD->CITER_ELINKNO = NBUF_I2S;
    1288:	mov.w	r1, #512	; 0x200
          dma.TCD->DLASTSGA = -sizeof(tdm_rx_buffer);
          dma.TCD->BITER_ELINKNO = NBUF_I2S;
          dma.TCD->CSR = DMA_TCD_CSR_INTHALF | DMA_TCD_CSR_INTMAJOR;
    128c:	movs	r7, #6
		*mux = 0;
		*mux = (source & 63) | DMAMUX_ENABLE;
    128e:	movs	r6, #140	; 0x8c
              DMA_TCD_NBYTES_MLOFFYES_NBYTES(8);
          dma.TCD->SLAST = -8;
#endif
          dma.TCD->DADDR = tdm_rx_buffer;
          dma.TCD->DOFF = 4;
          dma.TCD->CITER_ELINKNO = NBUF_I2S;
    1290:	strh	r1, [r3, #22]
              DMA_TCD_NBYTES_MLOFFYES_MLOFF(-8) |
              DMA_TCD_NBYTES_MLOFFYES_NBYTES(8);
          dma.TCD->SLAST = -8;
#endif
          dma.TCD->DADDR = tdm_rx_buffer;
          dma.TCD->DOFF = 4;
    1292:	strh	r0, [r3, #20]
          dma.TCD->CITER_ELINKNO = NBUF_I2S;
          dma.TCD->DLASTSGA = -sizeof(tdm_rx_buffer);
          dma.TCD->BITER_ELINKNO = NBUF_I2S;
    1294:	strh	r1, [r3, #30]
          dma.TCD->CSR = DMA_TCD_CSR_INTHALF | DMA_TCD_CSR_INTMAJOR;
    1296:	strh	r7, [r3, #28]

	// Use a hardware trigger to make the DMA channel run
	void triggerAtHardwareEvent(uint8_t source) {
		volatile uint8_t *mux;
		mux = (volatile uint8_t *)&(DMAMUX0_CHCFG0) + channel;
		*mux = 0;
    1298:	strb	r5, [r2, #0]
		*mux = (source & 63) | DMAMUX_ENABLE;
    129a:	strb	r6, [r2, #0]
    129c:	ldrb	r2, [r4, #4]
	/***************************************/
	/**    Enable / Disable               **/
	/***************************************/

	void enable(void) {
		DMA_SERQ = channel;
    129e:	ldr	r3, [pc, #164]	; (1344 <acq_init(long)+0x188>)
          dma.triggerAtHardwareEvent(DMAMUX_SOURCE_I2S0_RX);
          dma.enable();

          I2S0_RCSR = I2S_RCSR_RE | I2S_RCSR_BCE | I2S_RCSR_FRDE | I2S_RCSR_FR;
    12a0:	ldr	r6, [pc, #80]	; (12f4 <acq_init(long)+0x138>)
    12a2:	strb	r2, [r3, #0]
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
	}

	void attachInterrupt(void (*isr)(void), uint8_t prio) {
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
    12a4:	asrs	r3, r2, #5
    12a6:	lsls	r3, r3, #2
    12a8:	add.w	r3, r3, #3758096384	; 0xe0000000
    12ac:	add.w	r3, r3, #57600	; 0xe100
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
	}

	void attachInterrupt(void (*isr)(void), uint8_t prio) {
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
    12b0:	add.w	r5, r2, #16
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
    12b4:	movs	r1, #1
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
	}

	void attachInterrupt(void (*isr)(void), uint8_t prio) {
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
    12b6:	ldr	r0, [pc, #144]	; (1348 <acq_init(long)+0x18c>)
    12b8:	ldr	r7, [pc, #144]	; (134c <acq_init(long)+0x190>)
    12ba:	str	r7, [r6, #0]
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
    12bc:	and.w	r2, r2, #31
    12c0:	lsl.w	r2, r1, r2
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
	}

	void attachInterrupt(void (*isr)(void), uint8_t prio) {
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
    12c4:	ldr	r1, [pc, #136]	; (1350 <acq_init(long)+0x194>)
    12c6:	str.w	r1, [r0, r5, lsl #2]
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
    12ca:	str	r2, [r3, #0]
		NVIC_SET_PRIORITY(IRQ_DMA_CH0 + channel, prio);
    12cc:	ldrb	r3, [r4, #4]
    12ce:	add.w	r3, r3, #3758096384	; 0xe0000000
    12d2:	add.w	r3, r3, #58368	; 0xe400
    12d6:	movs	r2, #96	; 0x60
    12d8:	strb	r2, [r3, #0]
    12da:	pop	{r3, r4, r5, r6, r7, pc}
    12dc:	.word	0x00016e36
    12e0:	.word	0x000104b4
    12e4:	.word	0x1fff09a4
    12e8:	.word	0x4004b020
    12ec:	.word	0x4004b024
    12f0:	.word	0x4004b028
    12f4:	.word	0x4002f080
    12f8:	.word	0x4004803c
    12fc:	.word	0x40048040
    1300:	.word	0x4002f104
    1304:	.word	0x4002f100
    1308:	.word	0x4002f084
    130c:	.word	0x1fff86fc
    1310:	.word	0x4002f094
    1314:	.word	0x4002f088
    1318:	.word	0x4002f090
    131c:	.word	0x03000003
    1320:	.word	0x1f1f1f00
    1324:	.word	0x00010019
    1328:	.word	0x4004b02c
    132c:	.word	0x4004b014
    1330:	.word	0x4002f08c
    1334:	.word	0x4002f0a0
    1338:	.word	0x1fff1478
    133c:	.word	0xbfffe008
    1340:	.word	0xfffff000
    1344:	.word	0x4000801b
    1348:	.word	0x1fff0200
    134c:	.word	0x92000001
    1350:	.word	0x00000c51
    1354:	.word	0x4002f0e0

00001358 <setup>:

void acq_init(int32_t fsamp);
int16_t acq_check(int16_t state);

void setup()
{ while(!Serial && millis()<3000); 
    1358:	push	{r4, r5, r6, lr}
    135a:	ldr	r2, [pc, #112]	; (13cc <setup+0x74>)
    135c:	ldr	r5, [pc, #112]	; (13d0 <setup+0x78>)
        uint8_t stopbits(void) { uint8_t b = usb_cdc_line_coding[1]; if (!b) b = 1; return b; }
        uint8_t paritytype(void) { return usb_cdc_line_coding[1] >> 8; } // 0=none, 1=odd, 2=even
        uint8_t numbits(void) { return usb_cdc_line_coding[1] >> 16; }
        uint8_t dtr(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) ? 1 : 0; }
        uint8_t rts(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_RTS) ? 1 : 0; }
        operator bool() { return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    135e:	ldr	r4, [pc, #116]	; (13d4 <setup+0x7c>)
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
    1360:	ldr	r0, [pc, #116]	; (13d8 <setup+0x80>)
    1362:	sub	sp, #8
    1364:	movw	r1, #2999	; 0xbb7
        uint8_t stopbits(void) { uint8_t b = usb_cdc_line_coding[1]; if (!b) b = 1; return b; }
        uint8_t paritytype(void) { return usb_cdc_line_coding[1] >> 8; } // 0=none, 1=odd, 2=even
        uint8_t numbits(void) { return usb_cdc_line_coding[1] >> 16; }
        uint8_t dtr(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) ? 1 : 0; }
        uint8_t rts(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_RTS) ? 1 : 0; }
        operator bool() { return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    1368:	ldrb	r3, [r5, #0]
    136a:	cbz	r3, 1396 <setup+0x3e>
    136c:	ldrb	r3, [r4, #0]
    136e:	lsls	r3, r3, #31
    1370:	bpl.n	1396 <setup+0x3e>
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
    1372:	ldr	r3, [r2, #0]
    1374:	ldr	r6, [r0, #0]
        uint8_t stopbits(void) { uint8_t b = usb_cdc_line_coding[1]; if (!b) b = 1; return b; }
        uint8_t paritytype(void) { return usb_cdc_line_coding[1] >> 8; } // 0=none, 1=odd, 2=even
        uint8_t numbits(void) { return usb_cdc_line_coding[1] >> 16; }
        uint8_t dtr(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) ? 1 : 0; }
        uint8_t rts(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_RTS) ? 1 : 0; }
        operator bool() { return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    1376:	subs	r3, r3, r6
    1378:	cmp	r3, #14
    137a:	bls.n	1396 <setup+0x3e>

  usb_mtp_configure();
    137c:	bl	9aa4 <usb_mtp_configure>
  if(!Storage_init()) { Serial.println("No storage"); while(1);};
    1380:	bl	217c <Storage_init()>
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    1384:	movs	r1, #10
    1386:	cbnz	r0, 13ae <setup+0x56>
    1388:	ldr	r0, [pc, #80]	; (13dc <setup+0x84>)
    138a:	bl	9ca8 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    138e:	ldr	r0, [pc, #80]	; (13e0 <setup+0x88>)
    1390:	bl	b250 <Print::println()>
    1394:	b.n	1394 <setup+0x3c>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1396:	ldr	r3, [r2, #0]
    1398:	str	r3, [sp, #4]
	return ret;
    139a:	ldr	r3, [sp, #4]

void acq_init(int32_t fsamp);
int16_t acq_check(int16_t state);

void setup()
{ while(!Serial && millis()<3000); 
    139c:	cmp	r3, r1
    139e:	bls.n	1368 <setup+0x10>

  usb_mtp_configure();
    13a0:	bl	9aa4 <usb_mtp_configure>
  if(!Storage_init()) { Serial.println("No storage"); while(1);};
    13a4:	bl	217c <Storage_init()>
    13a8:	movs	r1, #10
    13aa:	cmp	r0, #0
    13ac:	beq.n	1388 <setup+0x30>
    13ae:	ldr	r0, [pc, #52]	; (13e4 <setup+0x8c>)
    13b0:	bl	9ca8 <usb_serial_write>
    13b4:	ldr	r0, [pc, #40]	; (13e0 <setup+0x88>)
    13b6:	bl	b250 <Print::println()>
  Serial.println("MTP logger");

//  #if USE_SDIO==1
//    pinMode(13,OUTPUT);
//  #endif
  acq_init(93750); // is fixed for this example, to be modified below
    13ba:	ldr	r0, [pc, #44]	; (13e8 <setup+0x90>)
    13bc:	bl	11bc <acq_init(long)>
  state=-1;
    13c0:	ldr	r3, [pc, #40]	; (13ec <setup+0x94>)
    13c2:	movw	r2, #65535	; 0xffff
    13c6:	strh	r2, [r3, #0]
}
    13c8:	add	sp, #8
    13ca:	pop	{r4, r5, r6, pc}
    13cc:	.word	0x1fff8c34
    13d0:	.word	0x1fff8d38
    13d4:	.word	0x1fff8c30
    13d8:	.word	0x1fff8db4
    13dc:	.word	0x000104bc
    13e0:	.word	0x1fff09a4
    13e4:	.word	0x000104c8
    13e8:	.word	0x00016e36
    13ec:	.word	0x1fff247c

000013f0 <_GLOBAL__sub_I_storage>:
    if(state>3)
    { // stop acquisition
      acq_stop();
    }
    return state;
  }
    13f0:	push	{r3, r4, r5, r6, r7, lr}
    13f2:	ldr	r4, [pc, #124]	; (1470 <_GLOBAL__sub_I_storage+0x80>)
//PIN  38 RXD1

#include "MTP.h"
#include "usb1_mtp.h"

MTPStorage_SD storage;
    13f4:	ldr	r6, [pc, #124]	; (1474 <_GLOBAL__sub_I_storage+0x84>)
    13f6:	ldr	r2, [pc, #128]	; (1478 <_GLOBAL__sub_I_storage+0x88>)
    13f8:	str	r2, [r4, #0]
    13fa:	mvn.w	r2, #1
class __FlashStringHelper;

class Print
{
  public:
	constexpr Print() : write_error(0) {}
    13fe:	movs	r5, #0

#define FILE_WHOAMI

class File : public Stream {
public:
	constexpr File() : f(nullptr) { }
    1400:	ldr	r3, [pc, #120]	; (147c <_GLOBAL__sub_I_storage+0x8c>)
    1402:	str	r2, [r4, #68]	; 0x44
    1404:	mov.w	r7, #1000	; 0x3e8
    1408:	mov	r2, r6
    140a:	ldr	r1, [pc, #116]	; (1480 <_GLOBAL__sub_I_storage+0x90>)
    140c:	str	r7, [r4, #12]
    140e:	mov	r0, r4
    1410:	str	r7, [r4, #32]
    1412:	str	r7, [r4, #52]	; 0x34
    1414:	str	r3, [r4, #4]
    1416:	str	r3, [r4, #24]
    1418:	str	r3, [r4, #44]	; 0x2c
	/*************************************************/
	/**    Channel Allocation                       **/
	/*************************************************/

	DMAChannel() {
		begin();
    141a:	ldr	r7, [pc, #104]	; (1484 <_GLOBAL__sub_I_storage+0x94>)
    141c:	strb	r5, [r4, #8]
    141e:	strb	r5, [r4, #16]
    1420:	str	r5, [r4, #20]
    1422:	strb	r5, [r4, #28]
    1424:	strb.w	r5, [r4, #36]	; 0x24
    1428:	str	r5, [r4, #40]	; 0x28
    142a:	strb.w	r5, [r4, #48]	; 0x30
    142e:	strb.w	r5, [r4, #56]	; 0x38
    1432:	str	r5, [r4, #60]	; 0x3c
    1434:	str	r5, [r4, #64]	; 0x40
    1436:	str	r5, [r4, #72]	; 0x48
    1438:	strb.w	r5, [r4, #76]	; 0x4c
    143c:	strb.w	r5, [r4, #77]	; 0x4d
    1440:	bl	b4f0 <__aeabi_atexit>
#include "Storage.h"

// MTP Responder.
class MTPD {
public:
  explicit MTPD(MTPStorageInterface* storage) : storage_(storage) {}
    1444:	ldr	r3, [pc, #64]	; (1488 <_GLOBAL__sub_I_storage+0x98>)
/************ Basic File System Interface *************************/
#include "SD.h"
//extern SdFs SD;
//static FsFile mfile;
extern SDClass SD;
static File mfile;
    1446:	ldr	r1, [pc, #68]	; (148c <_GLOBAL__sub_I_storage+0x9c>)
    1448:	ldr	r0, [pc, #68]	; (1490 <_GLOBAL__sub_I_storage+0xa0>)
    144a:	str	r4, [r3, #0]
    144c:	mov	r2, r6
    144e:	str	r5, [r3, #4]
    1450:	strb	r5, [r3, #8]
    1452:	str	r5, [r3, #12]
    1454:	bl	b4f0 <__aeabi_atexit>
    1458:	mov	r1, r5
    145a:	mov	r0, r7
    145c:	bl	b0a0 <DMAChannel::begin(bool)>
  static uint32_t tdm_rx_buffer[2*NBUF_I2S];
  static uint32_t acq_rx_buffer[NBUF_ACQ];
  #define I2S_DMA_PRIO 6

  #include "DMAChannel.h"
  DMAChannel dma;
    1460:	mov	r2, r6
    1462:	mov	r0, r7
    1464:	ldr	r1, [pc, #44]	; (1494 <_GLOBAL__sub_I_storage+0xa4>)
    if(state>3)
    { // stop acquisition
      acq_stop();
    }
    return state;
  }
    1466:	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  static uint32_t tdm_rx_buffer[2*NBUF_I2S];
  static uint32_t acq_rx_buffer[NBUF_ACQ];
  #define I2S_DMA_PRIO 6

  #include "DMAChannel.h"
  DMAChannel dma;
    146a:	b.w	b4f0 <__aeabi_atexit>
    146e:	nop
    1470:	.word	0x1fff808c
    1474:	.word	0x1fff0970
    1478:	.word	0x000104dc
    147c:	.word	0x0001037c
    1480:	.word	0x00000b2d
    1484:	.word	0x1fff86fc
    1488:	.word	0x1fff82e4
    148c:	.word	0x00000a71
    1490:	.word	0x1fff0978
    1494:	.word	0x000006c5

00001498 <MTPStorage_SD::readonly()>:

// These should probably be weak.
void mtp_yield() {}
void mtp_lock_storage(bool lock) {}

  bool MTPStorage_SD::readonly() { return false; }
    1498:	movs	r0, #0
    149a:	bx	lr

0000149c <MTPStorage_SD::has_directories()>:
  bool MTPStorage_SD::has_directories() { return true; }
    149c:	movs	r0, #1
    149e:	bx	lr

000014a0 <MTPStorage_SD::CloseIndex()>:
    index_generated=false;
    open_file_ = 0xFFFFFFFEUL;
  }

  void MTPStorage_SD::CloseIndex()
  {
    14a0:	push	{r4, lr}
    14a2:	mov	r4, r0
	}
	virtual uint32_t size() {
		return (f) ? f->size() : 0;
	}
	virtual void close() {
		if (f) f->close();
    14a4:	ldr	r0, [r0, #20]
    14a6:	cbz	r0, 14ae <MTPStorage_SD::CloseIndex()+0xe>
    14a8:	ldr	r3, [r0, #0]
    14aa:	ldr	r3, [r3, #60]	; 0x3c
    14ac:	blx	r3
    mtp_lock_storage(true);
    index_.close();
    mtp_lock_storage(false);
    index_generated = false;
    14ae:	movs	r3, #0
    14b0:	strb.w	r3, [r4, #76]	; 0x4c
    index_entries_ = 0;
    14b4:	str	r3, [r4, #72]	; 0x48
    14b6:	pop	{r4, pc}

000014b8 <MTPStorage_SD::write(char const*, unsigned long)>:
#endif
	virtual size_t read(void *buf, size_t nbyte) {
		return (f) ? f->read(buf, nbyte) : 0;
	}
	virtual size_t write(const void *buf, size_t size) {
		return (f) ? f->write(buf, size) : 0;
    14b8:	ldr	r0, [r0, #40]	; 0x28
    14ba:	cbz	r0, 14c2 <MTPStorage_SD::write(char const*, unsigned long)+0xa>
    14bc:	ldr	r3, [r0, #0]
    14be:	ldr	r3, [r3, #44]	; 0x2c
    14c0:	bx	r3
    14c2:	bx	lr

000014c4 <dateTime(unsigned short*, unsigned short*, unsigned char*)>:
  #define indexFile "/mtpindex.dat"

   #include "TimeLib.h"
  // Call back for file timestamps.  Only called for file create and sync().
  void dateTime(uint16_t* date, uint16_t* time, uint8_t* ms10) 
  { 
    14c4:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    14c8:	mov	r7, r1
    14ca:	mov	r6, r2
    14cc:	mov	r8, r0
    // Return date using FS_DATE macro to format fields.
    *date = FS_DATE(year(), month(), day());
    14ce:	bl	40b8 <year()>
    14d2:	mov	r4, r0
    14d4:	bl	4098 <month()>
    14d8:	mov	r5, r0
    14da:	bl	4078 <day()>
 * \param[in] day [1,31]
 *
 * \return Packed date for directory entry.
 */
static inline uint16_t FS_DATE(uint16_t year, uint8_t month, uint8_t day) {
  year -= 1980;
    14de:	subw	r3, r4, #1980	; 0x7bc
    14e2:	uxth	r3, r3
  return year > 127 || month > 12 || day > 31 ? 0 :
         year << 9 | month << 5 | day;
    14e4:	cmp	r3, #127	; 0x7f
    14e6:	bhi.n	14ee <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x2a>
 *
 * \return Packed date for directory entry.
 */
static inline uint16_t FS_DATE(uint16_t year, uint8_t month, uint8_t day) {
  year -= 1980;
  return year > 127 || month > 12 || day > 31 ? 0 :
    14e8:	uxtb	r2, r5
    14ea:	cmp	r2, #12
    14ec:	bls.n	1546 <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x82>
         year << 9 | month << 5 | day;
    14ee:	movs	r3, #0
    14f0:	strh.w	r3, [r8]

    // Return time using FS_TIME macro to format fields.
    *time = FS_TIME(hour(), minute(), second());
    14f4:	bl	4018 <hour()>
    14f8:	mov	r4, r0
    14fa:	bl	4038 <minute()>
    14fe:	mov	r5, r0
    1500:	bl	4058 <second()>
 *
 * \return Packed time for directory entry.
 */
static inline uint16_t FS_TIME(uint8_t hour, uint8_t minute, uint8_t second) {
  return hour > 23 || minute > 59 || second > 59 ? 0 :
         hour << 11 | minute << 5 | second >> 1;
    1504:	uxtb	r3, r4
    1506:	cmp	r3, #23
    1508:	bhi.n	1510 <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x4c>
 * \param[in] second [0,59]
 *
 * \return Packed time for directory entry.
 */
static inline uint16_t FS_TIME(uint8_t hour, uint8_t minute, uint8_t second) {
  return hour > 23 || minute > 59 || second > 59 ? 0 :
    150a:	uxtb	r3, r5
    150c:	cmp	r3, #59	; 0x3b
    150e:	bls.n	1528 <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x64>
         hour << 11 | minute << 5 | second >> 1;
    1510:	movs	r3, #0
    1512:	strh	r3, [r7, #0]
    
    // Return low time bits in units of 10 ms.
    *ms10 = second() & 1 ? 100 : 0;
    1514:	bl	4058 <second()>
    1518:	tst.w	r0, #1
    151c:	ite	ne
    151e:	movne	r3, #100	; 0x64
    1520:	moveq	r3, #0
    1522:	strb	r3, [r6, #0]
    1524:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 * \param[in] second [0,59]
 *
 * \return Packed time for directory entry.
 */
static inline uint16_t FS_TIME(uint8_t hour, uint8_t minute, uint8_t second) {
  return hour > 23 || minute > 59 || second > 59 ? 0 :
    1528:	uxtb	r3, r0
    152a:	cmp	r3, #59	; 0x3b
    152c:	bhi.n	1510 <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x4c>
         hour << 11 | minute << 5 | second >> 1;
    152e:	lsls	r4, r4, #11
    1530:	lsls	r3, r5, #5
    1532:	and.w	r4, r4, #522240	; 0x7f800
    1536:	and.w	r3, r3, #8160	; 0x1fe0
    153a:	orrs	r3, r4
    153c:	ubfx	r0, r0, #1, #7
    1540:	orrs	r3, r0
    1542:	uxth	r3, r3
    1544:	b.n	1512 <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x4e>
   #include "TimeLib.h"
  // Call back for file timestamps.  Only called for file create and sync().
  void dateTime(uint16_t* date, uint16_t* time, uint8_t* ms10) 
  { 
    // Return date using FS_DATE macro to format fields.
    *date = FS_DATE(year(), month(), day());
    1546:	uxtb	r0, r0
 *
 * \return Packed date for directory entry.
 */
static inline uint16_t FS_DATE(uint16_t year, uint8_t month, uint8_t day) {
  year -= 1980;
  return year > 127 || month > 12 || day > 31 ? 0 :
    1548:	cmp	r0, #31
    154a:	bhi.n	14ee <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x2a>
         year << 9 | month << 5 | day;
    154c:	lsls	r5, r5, #5
    154e:	and.w	r5, r5, #8160	; 0x1fe0
    1552:	orrs	r0, r5
    1554:	orr.w	r3, r0, r3, lsl #9
    1558:	uxth	r3, r3
    155a:	b.n	14f0 <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x2c>

0000155c <MTPStorage_SD::clusterCount()>:
#if USE_SDFS==1
  uint32_t MTPStorage_SD::clusterCount() { return sd.clusterCount(); }
  uint32_t MTPStorage_SD::freeClusters() { return sd.freeClusterCount(); }
  uint32_t MTPStorage_SD::clusterSize() { return sd.sectorsPerCluster(); }
#else
  uint32_t MTPStorage_SD::clusterCount() { return SD.sdfs.clusterCount(); }
    155c:	ldr	r2, [pc, #24]	; (1578 <MTPStorage_SD::clusterCount()+0x1c>)
    155e:	ldr.w	r3, [r2, #1144]	; 0x478
  /** Change global working volume to this volume. */
  void chvol() {m_cwv = this;}
  /** \return The total number of clusters in the volume. */
  uint32_t clusterCount() {
    return m_fVol ? m_fVol->clusterCount() :
           m_xVol ? m_xVol->clusterCount() : 0;
    1562:	cbz	r3, 156a <MTPStorage_SD::clusterCount()+0xe>
    m_cache.invalidate();
    return m_cache.buffer();
  }
  /** \return The total number of clusters in the volume. */
  uint32_t clusterCount() const {
    return m_lastCluster - 1;
    1564:	ldr	r0, [r3, #28]
    1566:	subs	r0, #1
    1568:	bx	lr
    156a:	ldr.w	r0, [r2, #1148]	; 0x47c
    156e:	cbz	r0, 1574 <MTPStorage_SD::clusterCount()+0x18>
    1570:	ldr.w	r0, [r0, #1064]	; 0x428
    1574:	bx	lr
    1576:	nop
    1578:	.word	0x1fff8774

0000157c <MTPStorage_SD::clusterSize()>:
  uint32_t MTPStorage_SD::freeClusters() { return SD.sdfs.freeClusterCount(); }
  uint32_t MTPStorage_SD::clusterSize() { return SD.sdfs.sectorsPerCluster(); }
    157c:	ldr	r2, [pc, #28]	; (159c <MTPStorage_SD::clusterSize()+0x20>)
    157e:	ldr.w	r3, [r2, #1144]	; 0x478
           m_xVol ? m_xVol->freeClusterCount() : 0;
  }
  /** \return The volume's cluster size in sectors. */
  uint32_t sectorsPerCluster() const {
    return m_fVol ? m_fVol->sectorsPerCluster() :
           m_xVol ? m_xVol->sectorsPerCluster() : 0;
    1582:	cbz	r3, 1588 <MTPStorage_SD::clusterSize()+0xc>
    1584:	ldrb	r0, [r3, #4]
    1586:	bx	lr
    1588:	ldr.w	r0, [r2, #1148]	; 0x47c
    158c:	cbz	r0, 1598 <MTPStorage_SD::clusterSize()+0x1c>
  /** \return the root directory start cluster number. */
  uint32_t rootDirectoryCluster() {return m_rootDirectoryCluster;}
  /** \return the root directory length. */
  uint32_t rootLength();
  /** \return the number of sectors in a cluster. */
  uint32_t sectorsPerCluster() {return 1UL << m_sectorsPerClusterShift;}
    158e:	ldrb.w	r0, [r0, #1085]	; 0x43d
    1592:	movs	r3, #1
    1594:	lsl.w	r0, r3, r0
    1598:	bx	lr
    159a:	nop
    159c:	.word	0x1fff8774

000015a0 <MTPStorage_SD::freeClusters()>:
  uint32_t MTPStorage_SD::clusterCount() { return sd.clusterCount(); }
  uint32_t MTPStorage_SD::freeClusters() { return sd.freeClusterCount(); }
  uint32_t MTPStorage_SD::clusterSize() { return sd.sectorsPerCluster(); }
#else
  uint32_t MTPStorage_SD::clusterCount() { return SD.sdfs.clusterCount(); }
  uint32_t MTPStorage_SD::freeClusters() { return SD.sdfs.freeClusterCount(); }
    15a0:	ldr	r3, [pc, #20]	; (15b8 <MTPStorage_SD::freeClusters()+0x18>)
    15a2:	ldr.w	r0, [r3, #1144]	; 0x478
           m_xVol ? m_xVol->fatStartSector() : 0;
  }
  /** \return the free cluster count. */
  uint32_t freeClusterCount() {
    return m_fVol ? m_fVol->freeClusterCount() :
           m_xVol ? m_xVol->freeClusterCount() : 0;
    15a6:	cbz	r0, 15ac <MTPStorage_SD::freeClusters()+0xc>
    return m_fVol ? m_fVol->fatStartSector() :
           m_xVol ? m_xVol->fatStartSector() : 0;
  }
  /** \return the free cluster count. */
  uint32_t freeClusterCount() {
    return m_fVol ? m_fVol->freeClusterCount() :
    15a8:	b.w	71b4 <FatPartition::freeClusterCount()>
           m_xVol ? m_xVol->freeClusterCount() : 0;
    15ac:	ldr.w	r0, [r3, #1148]	; 0x47c
    15b0:	cbz	r0, 15b6 <MTPStorage_SD::freeClusters()+0x16>
    15b2:	b.w	50f4 <ExFatPartition::freeClusterCount()>
    15b6:	bx	lr
    15b8:	.word	0x1fff8774

000015bc <MTPStorage_SD::ResetIndex()>:
	}
	virtual void close() {
		if (f) f->close();
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
    15bc:	ldr	r3, [r0, #20]
    15be:	cmp	r3, #0
    15c0:	beq.n	16ba <MTPStorage_SD::ResetIndex()+0xfe>
  uint32_t MTPStorage_SD::clusterSize() { return SD.sdfs.sectorsPerCluster(); }
#endif

  void MTPStorage_SD::ResetIndex() {
    15c2:	push	{r4, r5, r6, r7, lr}
    15c4:	ldr	r2, [r3, #0]
    15c6:	sub	sp, #84	; 0x54
    15c8:	mov	r5, r0
    15ca:	mov	r0, r3
    15cc:	ldr	r3, [r2, #64]	; 0x40
    15ce:	blx	r3
    if(!sd_isOpen(index_)) return;
    15d0:	cbnz	r0, 15d6 <MTPStorage_SD::ResetIndex()+0x1a>
    mtp_lock_storage(false);

    all_scanned_ = false;
    index_generated=false;
    open_file_ = 0xFFFFFFFEUL;
  }
    15d2:	add	sp, #84	; 0x54
    15d4:	pop	{r4, r5, r6, r7, pc}
    15d6:	ldr	r0, [r5, #20]
    15d8:	cbz	r0, 15ec <MTPStorage_SD::ResetIndex()+0x30>
    15da:	ldr	r3, [r0, #0]
    15dc:	ldr	r3, [r3, #64]	; 0x40
    15de:	blx	r3

  void MTPStorage_SD::ResetIndex() {
    if(!sd_isOpen(index_)) return;
    
    mtp_lock_storage(true);
    if(sd_isOpen(index_)) index_.close();
    15e0:	cbz	r0, 15ec <MTPStorage_SD::ResetIndex()+0x30>
	}
	virtual uint32_t size() {
		return (f) ? f->size() : 0;
	}
	virtual void close() {
		if (f) f->close();
    15e2:	ldr	r0, [r5, #20]
    15e4:	cbz	r0, 15ec <MTPStorage_SD::ResetIndex()+0x30>
    15e6:	ldr	r3, [r0, #0]
    15e8:	ldr	r3, [r3, #60]	; 0x3c
    15ea:	blx	r3
    15ec:	ldr	r3, [pc, #268]	; (16fc <MTPStorage_SD::ResetIndex()+0x140>)
    15ee:	ldr.w	r4, [r3, #1144]	; 0x478
  *
   * \return true for success or false for failure.
  */
  bool remove(const char *path) {
    return m_fVol ? m_fVol->remove(path) :
           m_xVol ? m_xVol->remove(path) : false;
    15f2:	cmp	r4, #0
    15f4:	beq.n	16c4 <MTPStorage_SD::ResetIndex()+0x108>
   *
   * \return true for success or false for failure.
   */
  bool remove(const char* path) {
    FatFile tmp;
    return tmp.open(this, path, O_WRONLY) && tmp.remove();
    15f6:	mov	r1, r4
    15f8:	mov	r0, sp
    15fa:	movs	r4, #0
    15fc:	movs	r3, #1
    15fe:	ldr	r2, [pc, #256]	; (1700 <MTPStorage_SD::ResetIndex()+0x144>)
    1600:	strb.w	r4, [sp]
    1604:	mov	r6, sp
    1606:	strb.w	r4, [sp, #1]
    160a:	strb.w	r4, [sp, #2]
    160e:	bl	61bc <FatFile::open(FatVolume*, char const*, int)>
    1612:	cmp	r0, #0
    1614:	bne.n	16bc <MTPStorage_SD::ResetIndex()+0x100>
		//return sdfs.begin(csPin, SD_SCK_MHZ(24));
	}
	File open(const char *filepath, uint8_t mode = FILE_READ) {
		oflag_t flags = O_READ;
		if (mode == FILE_WRITE) flags = O_RDWR | O_CREAT | O_AT_END;
		SDFAT_FILE file = sdfs.open(filepath, flags);
    1616:	movw	r3, #16898	; 0x4202
    161a:	mov	r0, r6
    161c:	ldr	r2, [pc, #224]	; (1700 <MTPStorage_SD::ResetIndex()+0x144>)
    161e:	ldr	r1, [pc, #220]	; (16fc <MTPStorage_SD::ResetIndex()+0x140>)
    1620:	bl	822c <FsVolume::open(char const*, int)>
    1624:	ldr	r3, [sp, #72]	; 0x48
    1626:	cmp	r3, #0
    1628:	beq.n	16f0 <MTPStorage_SD::ResetIndex()+0x134>
		if (file) return File(new SDFile(file));
    162a:	movs	r0, #104	; 0x68
    162c:	bl	b340 <operator new(unsigned int)>
    1630:	mov	r4, r0
//#define BYTE 0
//#endif

class __FlashStringHelper;

class Print
    1632:	ldrb.w	r6, [sp, #4]
#define Stream_h

#include <inttypes.h>
#include "Print.h"

class Stream : public Print
    1636:	ldr	r2, [sp, #8]
#endif

class SDFile : public File
{
public:
	SDFile(const SDFAT_FILE &file) : sdfatfile(file), filename(nullptr) { }
    1638:	ldr	r0, [pc, #200]	; (1704 <MTPStorage_SD::ResetIndex()+0x148>)
    163a:	ldr	r1, [pc, #204]	; (1708 <MTPStorage_SD::ResetIndex()+0x14c>)
    163c:	strb	r6, [r4, #24]
{
  public:
	constexpr Stream() : _timeout(1000), read_error(0) {}
    163e:	mov.w	r3, #1000	; 0x3e8
{
  public:
	constexpr Print() : write_error(0) {}
    1642:	movs	r6, #0
    1644:	str	r3, [r4, #8]
    1646:	add	r7, sp, #16
#define Stream_h

#include <inttypes.h>
#include "Print.h"

class Stream : public Print
    1648:	ldrb.w	r3, [sp, #12]
    164c:	str	r0, [r4, #0]
    164e:	str	r1, [r4, #20]
    1650:	str	r2, [r4, #28]
    1652:	strb.w	r3, [r4, #32]
    1656:	add.w	r0, r4, #36	; 0x24
    165a:	mov	r1, r7
    165c:	strb	r6, [r4, #4]
{
  public:
	constexpr Stream() : _timeout(1000), read_error(0) {}
    165e:	strb	r6, [r4, #12]

#define FILE_WHOAMI

class File : public Stream {
public:
	constexpr File() : f(nullptr) { }
    1660:	str	r6, [r4, #16]
    1662:	bl	7fe8 <FsBaseFile::FsBaseFile(FsBaseFile const&)>
		// or is_base_of
		//static_assert(std::is_same<decltype(*file),File>::value,
			//"File(File *file) constructor only accepts pointers "
			//"to derived classes, not File itself");
		f = file;
		if (f) f->refcount++;
    1666:	ldr	r3, [r4, #16]
};
/**
 * \class FsFile
 * \brief FsBaseFile file with Arduino Stream.
 */
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    1668:	ldr	r2, [pc, #160]	; (170c <MTPStorage_SD::ResetIndex()+0x150>)
    166a:	str	r6, [r4, #100]	; 0x64
    166c:	adds	r3, #1
    166e:	str	r2, [r4, #20]
    1670:	str	r3, [r4, #16]
    1672:	ldr	r3, [pc, #156]	; (1710 <MTPStorage_SD::ResetIndex()+0x154>)
    1674:	str	r3, [sp, #0]
 */
class FsBaseFile {
 public:
  FsBaseFile() : m_fFile(nullptr), m_xFile(nullptr) {}

  ~FsBaseFile() {close();}
    1676:	mov	r0, r7
    1678:	bl	8060 <FsBaseFile::close()>
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    167c:	ldr	r2, [r5, #20]
    167e:	cbz	r2, 1688 <MTPStorage_SD::ResetIndex()+0xcc>
    1680:	ldr	r3, [r2, #16]
    1682:	subs	r3, #1
    1684:	str	r3, [r2, #16]
    1686:	cbz	r3, 16ac <MTPStorage_SD::ResetIndex()+0xf0>
	File& operator = (const File &file) {
		//Serial.println("File assignment");
		//static int assigncount=0;
		//if (++assigncount > 20) while (1) ;
		invalidate();
		f = file.f;
    1688:	str	r4, [r5, #20]
		if (f) f->refcount++;
    168a:	cbz	r4, 1698 <MTPStorage_SD::ResetIndex()+0xdc>
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    168c:	ldr	r3, [r4, #16]
    168e:	cbnz	r3, 1698 <MTPStorage_SD::ResetIndex()+0xdc>
    1690:	ldr	r3, [r4, #0]
    1692:	mov	r0, r4
    1694:	ldr	r3, [r3, #32]
    1696:	blx	r3
    sd_remove(indexFile);
    index_ = sd_open(indexFile, FILE_WRITE);
    mtp_lock_storage(false);

    all_scanned_ = false;
    1698:	movs	r3, #0
    index_generated=false;
    open_file_ = 0xFFFFFFFEUL;
    169a:	mvn.w	r2, #1
    if(sd_isOpen(index_)) index_.close();
    sd_remove(indexFile);
    index_ = sd_open(indexFile, FILE_WRITE);
    mtp_lock_storage(false);

    all_scanned_ = false;
    169e:	strb.w	r3, [r5, #77]	; 0x4d
    index_generated=false;
    16a2:	strb.w	r3, [r5, #76]	; 0x4c
    open_file_ = 0xFFFFFFFEUL;
    16a6:	str	r2, [r5, #68]	; 0x44
  }
    16a8:	add	sp, #84	; 0x54
    16aa:	pop	{r4, r5, r6, r7, pc}
    16ac:	ldr	r0, [r5, #20]
    16ae:	cmp	r0, #0
    16b0:	beq.n	1688 <MTPStorage_SD::ResetIndex()+0xcc>
    16b2:	ldr	r3, [r0, #0]
    16b4:	ldr	r3, [r3, #32]
    16b6:	blx	r3
    16b8:	b.n	1688 <MTPStorage_SD::ResetIndex()+0xcc>
    16ba:	bx	lr
    16bc:	mov	r0, sp
    16be:	bl	782c <FatFile::remove()>
    16c2:	b.n	1616 <MTPStorage_SD::ResetIndex()+0x5a>
    16c4:	ldr.w	r1, [r3, #1148]	; 0x47c
   *
   * \return true for success or false for failure.
   */
  bool remove(const ExChar_t* path) {
    ExFatFile tmp;
    return tmp.open(this, path, O_WRONLY) && tmp.remove();
    16c8:	mov	r6, sp
    16ca:	cmp	r1, #0
    16cc:	beq.n	1616 <MTPStorage_SD::ResetIndex()+0x5a>
    16ce:	mov	r0, sp
    16d0:	movs	r3, #1
    16d2:	ldr	r2, [pc, #44]	; (1700 <MTPStorage_SD::ResetIndex()+0x144>)
    16d4:	strb.w	r4, [sp, #49]	; 0x31
    16d8:	strb.w	r4, [sp, #50]	; 0x32
    16dc:	strb.w	r4, [sp, #51]	; 0x33
    16e0:	bl	4b58 <ExFatFile::open(ExFatVolume*, char const*, int)>
    16e4:	cmp	r0, #0
    16e6:	beq.n	1616 <MTPStorage_SD::ResetIndex()+0x5a>
    16e8:	mov	r0, sp
    16ea:	bl	533c <ExFatFile::remove()>
    16ee:	b.n	1616 <MTPStorage_SD::ResetIndex()+0x5a>
  bool isHidden() {
    return m_fFile ? m_fFile->isHidden() :
           m_xFile ? m_xFile->isHidden() : false;
  }
  /** \return True if this is an open file/directory else false. */
  bool isOpen() {return m_fFile || m_xFile;}
    16f0:	ldr	r4, [sp, #76]	; 0x4c
    16f2:	cmp	r4, #0
    16f4:	bne.n	162a <MTPStorage_SD::ResetIndex()+0x6e>
    16f6:	add	r7, sp, #16
    16f8:	b.n	1672 <MTPStorage_SD::ResetIndex()+0xb6>
    16fa:	nop
    16fc:	.word	0x1fff8774
    1700:	.word	0x00010524
    1704:	.word	0x000103d8
    1708:	.word	0x00010310
    170c:	.word	0x00010358
    1710:	.word	0x00010334

00001714 <mtp_yield()>:
//   support serialflash
//   partial object fetch/receive
//   events (notify usb host when local storage changes) (But, this seems too difficult)

// These should probably be weak.
void mtp_yield() {}
    1714:	bx	lr
    1716:	nop

00001718 <MTPStorage_SD::OpenIndex()>:
    index_generated = false;
    index_entries_ = 0;
  }

  void MTPStorage_SD::OpenIndex() 
  { if(sd_isOpen(index_)) return; // only once
    1718:	push	{r4, r5, r6, r7, lr}
    171a:	mov	r5, r0
	}
	virtual void close() {
		if (f) f->close();
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
    171c:	ldr	r0, [r0, #20]
    171e:	sub	sp, #84	; 0x54
    1720:	cbz	r0, 172e <MTPStorage_SD::OpenIndex()+0x16>
    1722:	ldr	r3, [r0, #0]
    1724:	ldr	r3, [r3, #64]	; 0x40
    1726:	blx	r3
    1728:	cbz	r0, 172e <MTPStorage_SD::OpenIndex()+0x16>
    mtp_lock_storage(true);
    index_=sd_open(indexFile, FILE_WRITE);
    mtp_lock_storage(false);
  }
    172a:	add	sp, #84	; 0x54
    172c:	pop	{r4, r5, r6, r7, pc}
		//return sdfs.begin(csPin, SD_SCK_MHZ(24));
	}
	File open(const char *filepath, uint8_t mode = FILE_READ) {
		oflag_t flags = O_READ;
		if (mode == FILE_WRITE) flags = O_RDWR | O_CREAT | O_AT_END;
		SDFAT_FILE file = sdfs.open(filepath, flags);
    172e:	movw	r3, #16898	; 0x4202
    1732:	ldr	r2, [pc, #156]	; (17d0 <MTPStorage_SD::OpenIndex()+0xb8>)
    1734:	ldr	r1, [pc, #156]	; (17d4 <MTPStorage_SD::OpenIndex()+0xbc>)
    1736:	mov	r0, sp
    1738:	bl	822c <FsVolume::open(char const*, int)>
    173c:	ldr	r3, [sp, #72]	; 0x48
    173e:	cmp	r3, #0
    1740:	beq.n	17c6 <MTPStorage_SD::OpenIndex()+0xae>
		if (file) return File(new SDFile(file));
    1742:	movs	r0, #104	; 0x68
    1744:	bl	b340 <operator new(unsigned int)>
    1748:	mov	r4, r0
//#define BYTE 0
//#endif

class __FlashStringHelper;

class Print
    174a:	ldrb.w	r6, [sp, #4]
#define Stream_h

#include <inttypes.h>
#include "Print.h"

class Stream : public Print
    174e:	ldr	r2, [sp, #8]
#endif

class SDFile : public File
{
public:
	SDFile(const SDFAT_FILE &file) : sdfatfile(file), filename(nullptr) { }
    1750:	ldr	r0, [pc, #132]	; (17d8 <MTPStorage_SD::OpenIndex()+0xc0>)
    1752:	ldr	r1, [pc, #136]	; (17dc <MTPStorage_SD::OpenIndex()+0xc4>)
    1754:	strb	r6, [r4, #24]
{
  public:
	constexpr Stream() : _timeout(1000), read_error(0) {}
    1756:	mov.w	r3, #1000	; 0x3e8
{
  public:
	constexpr Print() : write_error(0) {}
    175a:	movs	r6, #0
    175c:	str	r3, [r4, #8]
    175e:	add	r7, sp, #16
#define Stream_h

#include <inttypes.h>
#include "Print.h"

class Stream : public Print
    1760:	ldrb.w	r3, [sp, #12]
    1764:	str	r0, [r4, #0]
    1766:	str	r1, [r4, #20]
    1768:	str	r2, [r4, #28]
    176a:	strb.w	r3, [r4, #32]
    176e:	add.w	r0, r4, #36	; 0x24
    1772:	mov	r1, r7
    1774:	strb	r6, [r4, #4]
{
  public:
	constexpr Stream() : _timeout(1000), read_error(0) {}
    1776:	strb	r6, [r4, #12]

#define FILE_WHOAMI

class File : public Stream {
public:
	constexpr File() : f(nullptr) { }
    1778:	str	r6, [r4, #16]
    177a:	bl	7fe8 <FsBaseFile::FsBaseFile(FsBaseFile const&)>
		// or is_base_of
		//static_assert(std::is_same<decltype(*file),File>::value,
			//"File(File *file) constructor only accepts pointers "
			//"to derived classes, not File itself");
		f = file;
		if (f) f->refcount++;
    177e:	ldr	r3, [r4, #16]
};
/**
 * \class FsFile
 * \brief FsBaseFile file with Arduino Stream.
 */
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    1780:	ldr	r2, [pc, #92]	; (17e0 <MTPStorage_SD::OpenIndex()+0xc8>)
    1782:	str	r6, [r4, #100]	; 0x64
    1784:	adds	r3, #1
    1786:	str	r2, [r4, #20]
    1788:	str	r3, [r4, #16]
    178a:	ldr	r3, [pc, #88]	; (17e4 <MTPStorage_SD::OpenIndex()+0xcc>)
    178c:	str	r3, [sp, #0]
 */
class FsBaseFile {
 public:
  FsBaseFile() : m_fFile(nullptr), m_xFile(nullptr) {}

  ~FsBaseFile() {close();}
    178e:	mov	r0, r7
    1790:	bl	8060 <FsBaseFile::close()>
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    1794:	ldr	r2, [r5, #20]
    1796:	cbz	r2, 17a0 <MTPStorage_SD::OpenIndex()+0x88>
    1798:	ldr	r3, [r2, #16]
    179a:	subs	r3, #1
    179c:	str	r3, [r2, #16]
    179e:	cbz	r3, 17b8 <MTPStorage_SD::OpenIndex()+0xa0>
	File& operator = (const File &file) {
		//Serial.println("File assignment");
		//static int assigncount=0;
		//if (++assigncount > 20) while (1) ;
		invalidate();
		f = file.f;
    17a0:	str	r4, [r5, #20]
		if (f) f->refcount++;
    17a2:	cmp	r4, #0
    17a4:	beq.n	172a <MTPStorage_SD::OpenIndex()+0x12>
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    17a6:	ldr	r3, [r4, #16]
    17a8:	cmp	r3, #0
    17aa:	bne.n	172a <MTPStorage_SD::OpenIndex()+0x12>
    17ac:	ldr	r3, [r4, #0]
    17ae:	mov	r0, r4
    17b0:	ldr	r3, [r3, #32]
    17b2:	blx	r3
    17b4:	add	sp, #84	; 0x54
    17b6:	pop	{r4, r5, r6, r7, pc}
    17b8:	ldr	r0, [r5, #20]
    17ba:	cmp	r0, #0
    17bc:	beq.n	17a0 <MTPStorage_SD::OpenIndex()+0x88>
    17be:	ldr	r3, [r0, #0]
    17c0:	ldr	r3, [r3, #32]
    17c2:	blx	r3
    17c4:	b.n	17a0 <MTPStorage_SD::OpenIndex()+0x88>
  bool isHidden() {
    return m_fFile ? m_fFile->isHidden() :
           m_xFile ? m_xFile->isHidden() : false;
  }
  /** \return True if this is an open file/directory else false. */
  bool isOpen() {return m_fFile || m_xFile;}
    17c6:	ldr	r4, [sp, #76]	; 0x4c
    17c8:	cmp	r4, #0
    17ca:	bne.n	1742 <MTPStorage_SD::OpenIndex()+0x2a>
    17cc:	add	r7, sp, #16
    17ce:	b.n	178a <MTPStorage_SD::OpenIndex()+0x72>
    17d0:	.word	0x00010524
    17d4:	.word	0x1fff8774
    17d8:	.word	0x000103d8
    17dc:	.word	0x00010310
    17e0:	.word	0x00010358
    17e4:	.word	0x00010334

000017e8 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>:

  void MTPStorage_SD::WriteIndexRecord(uint32_t i, const Record& r) 
  {
    17e8:	push	{r4, r5, r6, lr}
    17ea:	mov	r5, r0
    17ec:	mov	r4, r1
    17ee:	mov	r6, r2
    OpenIndex();
    17f0:	bl	1718 <MTPStorage_SD::OpenIndex()>
	}
	virtual void flush() {
		if (f) f->flush();
	}
	virtual bool seek(uint32_t pos, int mode) {
		return (f) ? f->seek(pos, mode) : false;
    17f4:	ldr	r0, [r5, #20]
    mtp_lock_storage(true);
    index_.seek(sizeof(r) * i);
    17f6:	add.w	r4, r4, r4, lsl #2
    17fa:	cbz	r0, 1818 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x30>
    17fc:	ldr	r3, [r0, #0]
    17fe:	lsls	r1, r4, #4
    1800:	ldr	r3, [r3, #48]	; 0x30
    1802:	movs	r2, #0
    1804:	blx	r3
#endif
	virtual size_t read(void *buf, size_t nbyte) {
		return (f) ? f->read(buf, nbyte) : 0;
	}
	virtual size_t write(const void *buf, size_t size) {
		return (f) ? f->write(buf, size) : 0;
    1806:	ldr	r0, [r5, #20]
    1808:	cbz	r0, 1818 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x30>
    180a:	ldr	r3, [r0, #0]
    180c:	mov	r1, r6
    180e:	ldr	r3, [r3, #44]	; 0x2c
    1810:	movs	r2, #80	; 0x50
    index_.write((char*)&r, sizeof(r));
    mtp_lock_storage(false);
  }
    1812:	ldmia.w	sp!, {r4, r5, r6, lr}
    1816:	bx	r3
    1818:	pop	{r4, r5, r6, pc}
    181a:	nop

0000181c <MTPStorage_SD::GenerateIndex() [clone .part.47] [clone .constprop.53]>:
  }

  // MTP object handles should not change or be re-used during a session.
  // This would be easy if we could just have a list of all files in memory.
  // Since our RAM is limited, we'll keep the index in a file instead.
  void MTPStorage_SD::GenerateIndex()
    181c:	push	{r4, r5, r6, lr}
    181e:	ldr	r2, [pc, #136]	; (18a8 <MTPStorage_SD::GenerateIndex() [clone .part.47] [clone .constprop.53]+0x8c>)
    1820:	ldr.w	r5, [r2, #1144]	; 0x478
  { if (index_generated) return; 
    index_generated = true;
    1824:	movs	r3, #1
  }

  // MTP object handles should not change or be re-used during a session.
  // This would be easy if we could just have a list of all files in memory.
  // Since our RAM is limited, we'll keep the index in a file instead.
  void MTPStorage_SD::GenerateIndex()
    1826:	sub	sp, #80	; 0x50
    1828:	mov	r4, r0
  { if (index_generated) return; 
    index_generated = true;
    182a:	strb.w	r3, [r0, #76]	; 0x4c
    182e:	cbz	r5, 187c <MTPStorage_SD::GenerateIndex() [clone .part.47] [clone .constprop.53]+0x60>
    1830:	mov	r1, r5
    1832:	mov	r0, sp
    1834:	movs	r5, #0
    1836:	ldr	r2, [pc, #116]	; (18ac <MTPStorage_SD::GenerateIndex() [clone .part.47] [clone .constprop.53]+0x90>)
    1838:	strb.w	r5, [sp]
    183c:	mov	r6, sp
    183e:	strb.w	r5, [sp, #1]
    1842:	strb.w	r5, [sp, #2]
    1846:	bl	61bc <FatFile::open(FatVolume*, char const*, int)>
    184a:	cbnz	r0, 1874 <MTPStorage_SD::GenerateIndex() [clone .part.47] [clone .constprop.53]+0x58>
    sd_remove(indexFile);
    mtp_lock_storage(false);

    index_entries_ = 0;
    Record r;
    r.parent = 0;
    184c:	movs	r3, #0
    r.sibling = 0;
    r.child = 0;
    r.isdir = true;
    184e:	movs	r5, #1
    index_.write((char*)&r, sizeof(r));
    mtp_lock_storage(false);
  }

  uint32_t MTPStorage_SD::AppendIndexRecord(const Record& r) 
  { uint32_t new_record = index_entries_++;
    1850:	str	r5, [r4, #72]	; 0x48
    WriteIndexRecord(new_record, r);
    1852:	mov	r0, r4
    1854:	mov	r2, r6
    1856:	mov	r1, r3
    r.parent = 0;
    r.sibling = 0;
    r.child = 0;
    r.isdir = true;
    r.scanned = false;
    strcpy(r.name, "/");
    1858:	movs	r4, #47	; 0x2f
    sd_remove(indexFile);
    mtp_lock_storage(false);

    index_entries_ = 0;
    Record r;
    r.parent = 0;
    185a:	str	r3, [sp, #0]
    r.sibling = 0;
    185c:	str	r3, [sp, #8]
    r.child = 0;
    185e:	str	r3, [sp, #4]
    r.isdir = true;
    r.scanned = false;
    1860:	strb.w	r3, [sp, #13]
    index_entries_ = 0;
    Record r;
    r.parent = 0;
    r.sibling = 0;
    r.child = 0;
    r.isdir = true;
    1864:	strb.w	r5, [sp, #12]
    r.scanned = false;
    strcpy(r.name, "/");
    1868:	strh.w	r4, [sp, #14]
    mtp_lock_storage(false);
  }

  uint32_t MTPStorage_SD::AppendIndexRecord(const Record& r) 
  { uint32_t new_record = index_entries_++;
    WriteIndexRecord(new_record, r);
    186c:	bl	17e8 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    r.child = 0;
    r.isdir = true;
    r.scanned = false;
    strcpy(r.name, "/");
    AppendIndexRecord(r);
  }
    1870:	add	sp, #80	; 0x50
    1872:	pop	{r4, r5, r6, pc}
    1874:	mov	r0, sp
    1876:	bl	782c <FatFile::remove()>
    187a:	b.n	184c <MTPStorage_SD::GenerateIndex() [clone .part.47] [clone .constprop.53]+0x30>
    187c:	ldr.w	r1, [r2, #1148]	; 0x47c
    1880:	mov	r6, sp
    1882:	cmp	r1, #0
    1884:	beq.n	184c <MTPStorage_SD::GenerateIndex() [clone .part.47] [clone .constprop.53]+0x30>
    1886:	mov	r0, sp
    1888:	ldr	r2, [pc, #32]	; (18ac <MTPStorage_SD::GenerateIndex() [clone .part.47] [clone .constprop.53]+0x90>)
    188a:	strb.w	r5, [sp, #49]	; 0x31
    188e:	strb.w	r5, [sp, #50]	; 0x32
    1892:	strb.w	r5, [sp, #51]	; 0x33
    1896:	bl	4b58 <ExFatFile::open(ExFatVolume*, char const*, int)>
    189a:	cmp	r0, #0
    189c:	beq.n	184c <MTPStorage_SD::GenerateIndex() [clone .part.47] [clone .constprop.53]+0x30>
    189e:	mov	r0, sp
    18a0:	bl	533c <ExFatFile::remove()>
    18a4:	b.n	184c <MTPStorage_SD::GenerateIndex() [clone .part.47] [clone .constprop.53]+0x30>
    18a6:	nop
    18a8:	.word	0x1fff8774
    18ac:	.word	0x00010524

000018b0 <MTPStorage_SD::ReadIndexRecord(unsigned long)>:
    return new_record;
  }

  // TODO(hubbe): Cache a few records for speed.
  Record MTPStorage_SD::ReadIndexRecord(uint32_t i) 
  {
    18b0:	push	{r4, r5, r6, lr}
    18b2:	mov	r5, r1
    18b4:	mov	r4, r2
    Record ret;
    memset(&ret, 0, sizeof(ret));
    18b6:	movs	r1, #0
    18b8:	movs	r2, #80	; 0x50
    return new_record;
  }

  // TODO(hubbe): Cache a few records for speed.
  Record MTPStorage_SD::ReadIndexRecord(uint32_t i) 
  {
    18ba:	mov	r6, r0
    Record ret;
    memset(&ret, 0, sizeof(ret));
    18bc:	bl	c92c <memset>
    if (i > index_entries_) 
    18c0:	ldr	r3, [r5, #72]	; 0x48
    18c2:	cmp	r3, r4
    18c4:	bcc.n	18f0 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x40>
    { memset(&ret, 0, sizeof(ret));
      return ret;
    }
    OpenIndex();
    18c6:	mov	r0, r5
    18c8:	bl	1718 <MTPStorage_SD::OpenIndex()>
	}
	virtual void flush() {
		if (f) f->flush();
	}
	virtual bool seek(uint32_t pos, int mode) {
		return (f) ? f->seek(pos, mode) : false;
    18cc:	ldr	r0, [r5, #20]
    mtp_lock_storage(true);
    index_.seek(sizeof(ret) * i);
    18ce:	add.w	r4, r4, r4, lsl #2
    18d2:	lsls	r1, r4, #4
    18d4:	cbz	r0, 18ec <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x3c>
    18d6:	ldr	r3, [r0, #0]
    18d8:	movs	r2, #0
    18da:	ldr	r3, [r3, #48]	; 0x30
    18dc:	blx	r3
	unsigned int getRefcount() { // testing only
		return refcount;
	}
#endif
	virtual size_t read(void *buf, size_t nbyte) {
		return (f) ? f->read(buf, nbyte) : 0;
    18de:	ldr	r0, [r5, #20]
    18e0:	cbz	r0, 18ec <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x3c>
    18e2:	ldr	r3, [r0, #0]
    18e4:	movs	r2, #80	; 0x50
    18e6:	ldr	r3, [r3, #40]	; 0x28
    18e8:	mov	r1, r6
    18ea:	blx	r3
    index_.read((char *)&ret, sizeof(ret));
    mtp_lock_storage(false);
    return ret;
  }
    18ec:	mov	r0, r6
    18ee:	pop	{r4, r5, r6, pc}
  Record MTPStorage_SD::ReadIndexRecord(uint32_t i) 
  {
    Record ret;
    memset(&ret, 0, sizeof(ret));
    if (i > index_entries_) 
    { memset(&ret, 0, sizeof(ret));
    18f0:	movs	r2, #80	; 0x50
    18f2:	movs	r1, #0
    18f4:	mov	r0, r6
    18f6:	bl	c92c <memset>
    mtp_lock_storage(true);
    index_.seek(sizeof(ret) * i);
    index_.read((char *)&ret, sizeof(ret));
    mtp_lock_storage(false);
    return ret;
  }
    18fa:	mov	r0, r6
    18fc:	pop	{r4, r5, r6, pc}
    18fe:	nop

00001900 <MTPStorage_SD::GetNextObjectHandle()>:
      next_ = 1;
    }
  }

  uint32_t MTPStorage_SD::GetNextObjectHandle()
  {
    1900:	push	{r4, r5, lr}
    while (true) 
    { if (next_ == 0) return 0;
    1902:	ldr	r5, [r0, #80]	; 0x50
      next_ = 1;
    }
  }

  uint32_t MTPStorage_SD::GetNextObjectHandle()
  {
    1904:	sub	sp, #84	; 0x54
    1906:	mov	r4, r0
    while (true) 
    { if (next_ == 0) return 0;
    1908:	cbnz	r5, 191a <MTPStorage_SD::GetNextObjectHandle()+0x1a>
    190a:	b.n	1948 <MTPStorage_SD::GetNextObjectHandle()+0x48>

      int ret = next_;
      Record r = ReadIndexRecord(ret);
      if (follow_sibling_) 
      { next_ = r.sibling;
    190c:	ldr	r3, [sp, #8]
    190e:	str	r3, [r4, #80]	; 0x50
      } 
      else 
      { next_++;
        if (next_ >= index_entries_) next_ = 0;
      }
      if (r.name[0]) return ret;
    1910:	ldrb.w	r3, [sp, #14]
    1914:	cbnz	r3, 1942 <MTPStorage_SD::GetNextObjectHandle()+0x42>
  }

  uint32_t MTPStorage_SD::GetNextObjectHandle()
  {
    while (true) 
    { if (next_ == 0) return 0;
    1916:	ldr	r5, [r4, #80]	; 0x50
    1918:	cbz	r5, 1948 <MTPStorage_SD::GetNextObjectHandle()+0x48>

      int ret = next_;
      Record r = ReadIndexRecord(ret);
    191a:	mov	r2, r5
    191c:	mov	r1, r4
    191e:	mov	r0, sp
    1920:	bl	18b0 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
      if (follow_sibling_) 
    1924:	ldrb.w	r2, [r4, #84]	; 0x54
    1928:	cmp	r2, #0
    192a:	bne.n	190c <MTPStorage_SD::GetNextObjectHandle()+0xc>
      { next_ = r.sibling;
      } 
      else 
      { next_++;
    192c:	ldr	r3, [r4, #80]	; 0x50
        if (next_ >= index_entries_) next_ = 0;
    192e:	ldr	r1, [r4, #72]	; 0x48
      Record r = ReadIndexRecord(ret);
      if (follow_sibling_) 
      { next_ = r.sibling;
      } 
      else 
      { next_++;
    1930:	adds	r3, #1
    1932:	str	r3, [r4, #80]	; 0x50
        if (next_ >= index_entries_) next_ = 0;
    1934:	cmp	r3, r1
      }
      if (r.name[0]) return ret;
    1936:	ldrb.w	r3, [sp, #14]
      if (follow_sibling_) 
      { next_ = r.sibling;
      } 
      else 
      { next_++;
        if (next_ >= index_entries_) next_ = 0;
    193a:	it	cs
    193c:	strcs	r2, [r4, #80]	; 0x50
      }
      if (r.name[0]) return ret;
    193e:	cmp	r3, #0
    1940:	beq.n	1916 <MTPStorage_SD::GetNextObjectHandle()+0x16>
    }
  }
    1942:	mov	r0, r5
    1944:	add	sp, #84	; 0x54
    1946:	pop	{r4, r5, pc}
  }

  uint32_t MTPStorage_SD::GetNextObjectHandle()
  {
    while (true) 
    { if (next_ == 0) return 0;
    1948:	movs	r5, #0
      { next_++;
        if (next_ >= index_entries_) next_ = 0;
      }
      if (r.name[0]) return ret;
    }
  }
    194a:	mov	r0, r5
    194c:	add	sp, #84	; 0x54
    194e:	pop	{r4, r5, pc}

00001950 <MTPStorage_SD::GetObjectInfo(unsigned long, char*, unsigned long*, unsigned long*)>:

  void MTPStorage_SD::GetObjectInfo(uint32_t handle, char* name, uint32_t* size, uint32_t* parent)
  {
    1950:	push	{r4, r5, r6, lr}
    1952:	sub	sp, #80	; 0x50
    1954:	mov	r6, r2
    Record r = ReadIndexRecord(handle);
    1956:	mov	r2, r1
    1958:	mov	r1, r0
    195a:	mov	r0, sp
      if (r.name[0]) return ret;
    }
  }

  void MTPStorage_SD::GetObjectInfo(uint32_t handle, char* name, uint32_t* size, uint32_t* parent)
  {
    195c:	mov	r4, r3
    195e:	ldr	r5, [sp, #96]	; 0x60
    Record r = ReadIndexRecord(handle);
    1960:	bl	18b0 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    strcpy(name, r.name);
    1964:	mov	r0, r6
    1966:	add.w	r1, sp, #14
    196a:	bl	ce60 <strcpy>
    *parent = r.parent;
    *size = r.isdir ? 0xFFFFFFFFUL : r.child;
    196e:	ldrb.w	r3, [sp, #12]

  void MTPStorage_SD::GetObjectInfo(uint32_t handle, char* name, uint32_t* size, uint32_t* parent)
  {
    Record r = ReadIndexRecord(handle);
    strcpy(name, r.name);
    *parent = r.parent;
    1972:	ldr	r2, [sp, #0]
    1974:	str	r2, [r5, #0]
    *size = r.isdir ? 0xFFFFFFFFUL : r.child;
    1976:	cbnz	r3, 1980 <MTPStorage_SD::GetObjectInfo(unsigned long, char*, unsigned long*, unsigned long*)+0x30>
    1978:	ldr	r3, [sp, #4]
    197a:	str	r3, [r4, #0]
  }
    197c:	add	sp, #80	; 0x50
    197e:	pop	{r4, r5, r6, pc}
  void MTPStorage_SD::GetObjectInfo(uint32_t handle, char* name, uint32_t* size, uint32_t* parent)
  {
    Record r = ReadIndexRecord(handle);
    strcpy(name, r.name);
    *parent = r.parent;
    *size = r.isdir ? 0xFFFFFFFFUL : r.child;
    1980:	mov.w	r3, #4294967295
    1984:	str	r3, [r4, #0]
  }
    1986:	add	sp, #80	; 0x50
    1988:	pop	{r4, r5, r6, pc}
    198a:	nop

0000198c <MTPStorage_SD::GetSize(unsigned long)>:

  uint32_t MTPStorage_SD::GetSize(uint32_t handle) 
  {
    198c:	push	{lr}
    198e:	sub	sp, #84	; 0x54
    return ReadIndexRecord(handle).child;
    1990:	mov	r2, r1
    1992:	mov	r1, r0
    1994:	mov	r0, sp
    1996:	bl	18b0 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
  }
    199a:	ldr	r0, [sp, #4]
    199c:	add	sp, #84	; 0x54
    199e:	ldr.w	pc, [sp], #4
    19a2:	nop

000019a4 <MTPStorage_SD::close()>:
      file_.write(data,bytes);
      mtp_lock_storage(false);
  }

  void MTPStorage_SD::close() 
  {
    19a4:	push	{r4, r5, lr}
    19a6:	mov	r4, r0
	}
	virtual uint32_t position() {
		return (f) ? f->position() : 0;
	}
	virtual uint32_t size() {
		return (f) ? f->size() : 0;
    19a8:	ldr	r0, [r0, #40]	; 0x28
    19aa:	sub	sp, #84	; 0x54
    19ac:	cbz	r0, 19e0 <MTPStorage_SD::close()+0x3c>
    19ae:	ldr	r3, [r0, #0]
    19b0:	ldr	r3, [r3, #56]	; 0x38
    19b2:	blx	r3
    19b4:	mov	r5, r0
	}
	virtual void close() {
		if (f) f->close();
    19b6:	ldr	r0, [r4, #40]	; 0x28
    19b8:	cbz	r0, 19c0 <MTPStorage_SD::close()+0x1c>
    19ba:	ldr	r3, [r0, #0]
    19bc:	ldr	r3, [r3, #60]	; 0x3c
    19be:	blx	r3
    mtp_lock_storage(true);
    uint64_t size = file_.size();
    file_.close();
    mtp_lock_storage(false);
    Record r = ReadIndexRecord(open_file_);
    19c0:	mov	r0, sp
    19c2:	ldr	r2, [r4, #68]	; 0x44
    19c4:	mov	r1, r4
    19c6:	bl	18b0 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    r.child = size;
    WriteIndexRecord(open_file_, r);
    19ca:	mov	r2, sp
    19cc:	ldr	r1, [r4, #68]	; 0x44
    mtp_lock_storage(true);
    uint64_t size = file_.size();
    file_.close();
    mtp_lock_storage(false);
    Record r = ReadIndexRecord(open_file_);
    r.child = size;
    19ce:	str	r5, [sp, #4]
    WriteIndexRecord(open_file_, r);
    19d0:	mov	r0, r4
    19d2:	bl	17e8 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    open_file_ = 0xFFFFFFFEUL;
    19d6:	mvn.w	r3, #1
    19da:	str	r3, [r4, #68]	; 0x44
  }
    19dc:	add	sp, #84	; 0x54
    19de:	pop	{r4, r5, pc}
	}
	virtual uint32_t position() {
		return (f) ? f->position() : 0;
	}
	virtual uint32_t size() {
		return (f) ? f->size() : 0;
    19e0:	mov	r5, r0
    19e2:	b.n	19c0 <MTPStorage_SD::close()+0x1c>

000019e4 <MTPStorage_SD::ConstructFilename(int, char*, int)>:
    return ret;
  }

  void MTPStorage_SD::ConstructFilename(int i, char* out, int len) // construct filename rexursively
  {
    if (i == 0) 
    19e4:	cbz	r1, 1a34 <MTPStorage_SD::ConstructFilename(int, char*, int)+0x50>
    mtp_lock_storage(false);
    return ret;
  }

  void MTPStorage_SD::ConstructFilename(int i, char* out, int len) // construct filename rexursively
  {
    19e6:	push	{r4, r5, r6, lr}
    19e8:	sub	sp, #80	; 0x50
    19ea:	mov	r5, r2
    19ec:	mov	r4, r0
    if (i == 0) 
    { strcpy(out, "/");
    }
    else 
    { Record tmp = ReadIndexRecord(i);
    19ee:	mov	r2, r1
    19f0:	mov	r6, r3
    19f2:	mov	r1, r0
    19f4:	mov	r0, sp
    19f6:	bl	18b0 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
      ConstructFilename(tmp.parent, out, len);
    19fa:	mov	r3, r6
    19fc:	mov	r0, r4
    19fe:	mov	r2, r5
    1a00:	ldr	r1, [sp, #0]
    1a02:	bl	19e4 <MTPStorage_SD::ConstructFilename(int, char*, int)>
      if (out[strlen(out)-1] != '/') strcat(out, "/");
    1a06:	mov	r0, r5
    1a08:	bl	cf40 <strlen>
    1a0c:	adds	r3, r5, r0
    1a0e:	mov	r4, r0
    1a10:	ldrb.w	r3, [r3, #-1]
    1a14:	cmp	r3, #47	; 0x2f
    1a16:	beq.n	1a20 <MTPStorage_SD::ConstructFilename(int, char*, int)+0x3c>
    1a18:	ldr	r3, [pc, #48]	; (1a4c <MTPStorage_SD::ConstructFilename(int, char*, int)+0x68>)
    1a1a:	ldrh	r3, [r3, #0]
    1a1c:	strh	r3, [r5, r0]
    1a1e:	adds	r4, #1
      if(((strlen(out)+strlen(tmp.name)+1) < (unsigned) len)) strcat(out, tmp.name);
    1a20:	add.w	r0, sp, #14
    1a24:	bl	cf40 <strlen>
    1a28:	add	r0, r4
    1a2a:	adds	r0, #1
    1a2c:	cmp	r0, r6
    1a2e:	bcc.n	1a3c <MTPStorage_SD::ConstructFilename(int, char*, int)+0x58>
    }
  }
    1a30:	add	sp, #80	; 0x50
    1a32:	pop	{r4, r5, r6, pc}
  }

  void MTPStorage_SD::ConstructFilename(int i, char* out, int len) // construct filename rexursively
  {
    if (i == 0) 
    { strcpy(out, "/");
    1a34:	ldr	r3, [pc, #20]	; (1a4c <MTPStorage_SD::ConstructFilename(int, char*, int)+0x68>)
    1a36:	ldrh	r3, [r3, #0]
    1a38:	strh	r3, [r2, #0]
    1a3a:	bx	lr
    }
    else 
    { Record tmp = ReadIndexRecord(i);
      ConstructFilename(tmp.parent, out, len);
      if (out[strlen(out)-1] != '/') strcat(out, "/");
      if(((strlen(out)+strlen(tmp.name)+1) < (unsigned) len)) strcat(out, tmp.name);
    1a3c:	add.w	r1, sp, #14
    1a40:	mov	r0, r5
    1a42:	bl	ce20 <strcat>
    }
  }
    1a46:	add	sp, #80	; 0x50
    1a48:	pop	{r4, r5, r6, pc}
    1a4a:	nop
    1a4c:	.word	0x00010534

00001a50 <MTPStorage_SD::DeleteObject(unsigned long)>:
    file_.read(out,bytes);
    mtp_lock_storage(false);
  }

  bool MTPStorage_SD::DeleteObject(uint32_t object)
  {
    1a50:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1a54:	adds	r2, r1, #1
    1a56:	sub	sp, #496	; 0x1f0
    1a58:	mov	r6, r1
    1a5a:	mov	r4, r0
    1a5c:	ite	ne
    1a5e:	movne	r5, r1
    1a60:	moveq	r5, #0
    1a62:	b.n	1a74 <MTPStorage_SD::DeleteObject(unsigned long)+0x24>
    char filename[256];
    Record r;
    while (true) {
      r = ReadIndexRecord(object == 0xFFFFFFFFUL ? 0 : object);
      if (!r.isdir) break;
      if (!r.child) break;
    1a64:	ldr	r3, [sp, #84]	; 0x54
      if (!DeleteObject(r.child))  return false;
    1a66:	mov	r1, r3
    char filename[256];
    Record r;
    while (true) {
      r = ReadIndexRecord(object == 0xFFFFFFFFUL ? 0 : object);
      if (!r.isdir) break;
      if (!r.child) break;
    1a68:	cbz	r3, 1a94 <MTPStorage_SD::DeleteObject(unsigned long)+0x44>
      if (!DeleteObject(r.child))  return false;
    1a6a:	ldr	r3, [r4, #0]
    1a6c:	ldr	r3, [r3, #52]	; 0x34
    1a6e:	blx	r3
    1a70:	cmp	r0, #0
    1a72:	beq.n	1b44 <MTPStorage_SD::DeleteObject(unsigned long)+0xf4>
  bool MTPStorage_SD::DeleteObject(uint32_t object)
  {
    char filename[256];
    Record r;
    while (true) {
      r = ReadIndexRecord(object == 0xFFFFFFFFUL ? 0 : object);
    1a74:	mov	r2, r5
    1a76:	mov	r1, r4
    1a78:	mov	r0, sp
    1a7a:	bl	18b0 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    1a7e:	movs	r2, #80	; 0x50
    1a80:	mov	r1, sp
    1a82:	add.w	r0, sp, r2
    1a86:	bl	9aa8 <memcpy>
      if (!r.isdir) break;
    1a8a:	ldrb.w	r3, [sp, #92]	; 0x5c
      if (!r.child) break;
      if (!DeleteObject(r.child))  return false;
    1a8e:	mov	r0, r4
  {
    char filename[256];
    Record r;
    while (true) {
      r = ReadIndexRecord(object == 0xFFFFFFFFUL ? 0 : object);
      if (!r.isdir) break;
    1a90:	cmp	r3, #0
    1a92:	bne.n	1a64 <MTPStorage_SD::DeleteObject(unsigned long)+0x14>
      if (!DeleteObject(r.child))  return false;
    }

    // We can't actually delete the root folder,
    // but if we deleted everything else, return true.
    if (object == 0xFFFFFFFFUL) return true;
    1a94:	adds	r3, r6, #1
    1a96:	beq.n	1b5a <MTPStorage_SD::DeleteObject(unsigned long)+0x10a>

    ConstructFilename(object, filename, 256);
    1a98:	mov.w	r3, #256	; 0x100
    1a9c:	add	r2, sp, #240	; 0xf0
    1a9e:	mov	r1, r6
    1aa0:	mov	r0, r4
    1aa2:	bl	19e4 <MTPStorage_SD::ConstructFilename(int, char*, int)>
    bool success;
    mtp_lock_storage(true);
    if (r.isdir) success = sd_rmdir(filename); else  success = sd_remove(filename);
    1aa6:	ldrb.w	r7, [sp, #92]	; 0x5c
    1aaa:	ldr	r3, [pc, #296]	; (1bd4 <MTPStorage_SD::DeleteObject(unsigned long)+0x184>)
    1aac:	cmp	r7, #0
    1aae:	beq.n	1b62 <MTPStorage_SD::DeleteObject(unsigned long)+0x112>
    1ab0:	ldr.w	r7, [r3, #1144]	; 0x478
   *
   * \return true for success or false for failure.
   */
  bool rmdir(const char *path) {
    return m_fVol ? m_fVol->rmdir(path) :
           m_xVol ? m_xVol->rmdir(path) : false;
    1ab4:	cbz	r7, 1b22 <MTPStorage_SD::DeleteObject(unsigned long)+0xd2>
    1ab6:	add	r5, sp, #160	; 0xa0
    1ab8:	mov.w	lr, #0
   *
   * \return true for success or false for failure.
   */
  bool rmdir(const char* path) {
    FatFile sub;
    return sub.open(this, path, O_RDONLY) && sub.rmdir();
    1abc:	add	r2, sp, #240	; 0xf0
    1abe:	mov	r1, r7
    1ac0:	mov	r0, r5
    1ac2:	mov	r3, lr
    1ac4:	strb.w	lr, [r5]
    1ac8:	strb.w	lr, [r5, #1]
    1acc:	strb.w	lr, [r5, #2]
    1ad0:	bl	61bc <FatFile::open(FatVolume*, char const*, int)>
    1ad4:	cbz	r0, 1b44 <MTPStorage_SD::DeleteObject(unsigned long)+0xf4>
    1ad6:	mov	r0, r5
    1ad8:	bl	64e4 <FatFile::rmdir()>
    mtp_lock_storage(false);
    if (!success) return false;
    1adc:	cbz	r0, 1b44 <MTPStorage_SD::DeleteObject(unsigned long)+0xf4>
    
    r.name[0] = 0;
    int p = r.parent;
    1ade:	ldr.w	r8, [sp, #80]	; 0x50
    mtp_lock_storage(true);
    if (r.isdir) success = sd_rmdir(filename); else  success = sd_remove(filename);
    mtp_lock_storage(false);
    if (!success) return false;
    
    r.name[0] = 0;
    1ae2:	movs	r3, #0
    int p = r.parent;
    WriteIndexRecord(object, r);
    1ae4:	add	r2, sp, #80	; 0x50
    1ae6:	mov	r1, r6
    1ae8:	mov	r0, r4
    mtp_lock_storage(true);
    if (r.isdir) success = sd_rmdir(filename); else  success = sd_remove(filename);
    mtp_lock_storage(false);
    if (!success) return false;
    
    r.name[0] = 0;
    1aea:	strb.w	r3, [sp, #94]	; 0x5e
    int p = r.parent;
    WriteIndexRecord(object, r);
    1aee:	bl	17e8 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    Record tmp = ReadIndexRecord(p);
    1af2:	mov	r2, r8
    1af4:	mov	r1, r4
    1af6:	mov	r0, r5
    1af8:	bl	18b0 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    if (tmp.child == object) 
    1afc:	ldr	r7, [r5, #4]
    1afe:	cmp	r6, r7
    1b00:	beq.n	1b4c <MTPStorage_SD::DeleteObject(unsigned long)+0xfc>
    { tmp.child = r.sibling;
      WriteIndexRecord(p, tmp);
    } 
    else 
    { int c = tmp.child;
      while (c) 
    1b02:	cbz	r7, 1b5a <MTPStorage_SD::DeleteObject(unsigned long)+0x10a>
      { tmp = ReadIndexRecord(c);
    1b04:	mov	r2, r7
    1b06:	mov	r1, r4
    1b08:	mov	r0, sp
    1b0a:	bl	18b0 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    1b0e:	movs	r2, #80	; 0x50
    1b10:	mov	r1, sp
    1b12:	mov	r0, r5
    1b14:	bl	9aa8 <memcpy>
        if (tmp.sibling == object) 
    1b18:	ldr	r3, [r5, #8]
    1b1a:	cmp	r6, r3
    1b1c:	beq.n	1bb8 <MTPStorage_SD::DeleteObject(unsigned long)+0x168>
    { tmp.child = r.sibling;
      WriteIndexRecord(p, tmp);
    } 
    else 
    { int c = tmp.child;
      while (c) 
    1b1e:	mov	r7, r3
    1b20:	b.n	1b02 <MTPStorage_SD::DeleteObject(unsigned long)+0xb2>
    1b22:	ldr.w	r1, [r3, #1148]	; 0x47c
    1b26:	cbz	r1, 1b44 <MTPStorage_SD::DeleteObject(unsigned long)+0xf4>
    1b28:	add	r5, sp, #160	; 0xa0
   *
   * \return true for success or false for failure.
   */
  bool rmdir(const ExChar_t* path) {
    ExFatFile sub;
    return sub.open(this, path, O_RDONLY) && sub.rmdir();
    1b2a:	add	r2, sp, #240	; 0xf0
    1b2c:	mov	r3, r7
    1b2e:	mov	r0, r5
    1b30:	strb.w	r7, [r5, #49]	; 0x31
    1b34:	strb.w	r7, [r5, #50]	; 0x32
    1b38:	strb.w	r7, [r5, #51]	; 0x33
    1b3c:	bl	4b58 <ExFatFile::open(ExFatVolume*, char const*, int)>
    1b40:	cmp	r0, #0
    1b42:	bne.n	1bca <MTPStorage_SD::DeleteObject(unsigned long)+0x17a>
    Record r;
    while (true) {
      r = ReadIndexRecord(object == 0xFFFFFFFFUL ? 0 : object);
      if (!r.isdir) break;
      if (!r.child) break;
      if (!DeleteObject(r.child))  return false;
    1b44:	movs	r0, #0
        { c = tmp.sibling;
        }
      }
    }
    return true;
  }
    1b46:	add	sp, #496	; 0x1f0
    1b48:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    r.name[0] = 0;
    int p = r.parent;
    WriteIndexRecord(object, r);
    Record tmp = ReadIndexRecord(p);
    if (tmp.child == object) 
    { tmp.child = r.sibling;
    1b4c:	ldr	r3, [sp, #88]	; 0x58
    1b4e:	str	r3, [r5, #4]
      WriteIndexRecord(p, tmp);
    1b50:	mov	r2, r5
    1b52:	mov	r1, r8
    1b54:	mov	r0, r4
    1b56:	bl	17e8 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
        else 
        { c = tmp.sibling;
        }
      }
    }
    return true;
    1b5a:	movs	r0, #1
  }
    1b5c:	add	sp, #496	; 0x1f0
    1b5e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1b62:	ldr.w	lr, [r3, #1144]	; 0x478
  *
   * \return true for success or false for failure.
  */
  bool remove(const char *path) {
    return m_fVol ? m_fVol->remove(path) :
           m_xVol ? m_xVol->remove(path) : false;
    1b66:	cmp.w	lr, #0
    1b6a:	beq.n	1b8c <MTPStorage_SD::DeleteObject(unsigned long)+0x13c>
    1b6c:	add	r5, sp, #160	; 0xa0
   *
   * \return true for success or false for failure.
   */
  bool remove(const char* path) {
    FatFile tmp;
    return tmp.open(this, path, O_WRONLY) && tmp.remove();
    1b6e:	add	r2, sp, #240	; 0xf0
    1b70:	mov	r1, lr
    1b72:	mov	r0, r5
    1b74:	movs	r3, #1
    1b76:	strb	r7, [r5, #0]
    1b78:	strb	r7, [r5, #1]
    1b7a:	strb	r7, [r5, #2]
    1b7c:	bl	61bc <FatFile::open(FatVolume*, char const*, int)>
    1b80:	cmp	r0, #0
    1b82:	beq.n	1b44 <MTPStorage_SD::DeleteObject(unsigned long)+0xf4>
    1b84:	mov	r0, r5
    1b86:	bl	782c <FatFile::remove()>
    1b8a:	b.n	1adc <MTPStorage_SD::DeleteObject(unsigned long)+0x8c>
    1b8c:	ldr.w	r1, [r3, #1148]	; 0x47c
    1b90:	cmp	r1, #0
    1b92:	beq.n	1b44 <MTPStorage_SD::DeleteObject(unsigned long)+0xf4>
    1b94:	add	r5, sp, #160	; 0xa0
   *
   * \return true for success or false for failure.
   */
  bool remove(const ExChar_t* path) {
    ExFatFile tmp;
    return tmp.open(this, path, O_WRONLY) && tmp.remove();
    1b96:	add	r2, sp, #240	; 0xf0
    1b98:	mov	r0, r5
    1b9a:	movs	r3, #1
    1b9c:	strb.w	lr, [r5, #49]	; 0x31
    1ba0:	strb.w	lr, [r5, #50]	; 0x32
    1ba4:	strb.w	lr, [r5, #51]	; 0x33
    1ba8:	bl	4b58 <ExFatFile::open(ExFatVolume*, char const*, int)>
    1bac:	cmp	r0, #0
    1bae:	beq.n	1b44 <MTPStorage_SD::DeleteObject(unsigned long)+0xf4>
    1bb0:	mov	r0, r5
    1bb2:	bl	533c <ExFatFile::remove()>
    1bb6:	b.n	1adc <MTPStorage_SD::DeleteObject(unsigned long)+0x8c>
    else 
    { int c = tmp.child;
      while (c) 
      { tmp = ReadIndexRecord(c);
        if (tmp.sibling == object) 
        { tmp.sibling = r.sibling;
    1bb8:	ldr	r3, [sp, #88]	; 0x58
    1bba:	str	r3, [r5, #8]
          WriteIndexRecord(c, tmp);
    1bbc:	mov	r0, r4
    1bbe:	mov	r2, r5
    1bc0:	mov	r1, r7
    1bc2:	bl	17e8 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
        else 
        { c = tmp.sibling;
        }
      }
    }
    return true;
    1bc6:	movs	r0, #1
      while (c) 
      { tmp = ReadIndexRecord(c);
        if (tmp.sibling == object) 
        { tmp.sibling = r.sibling;
          WriteIndexRecord(c, tmp);
          break;
    1bc8:	b.n	1b46 <MTPStorage_SD::DeleteObject(unsigned long)+0xf6>
   *
   * \return true for success or false for failure.
   */
  bool rmdir(const ExChar_t* path) {
    ExFatFile sub;
    return sub.open(this, path, O_RDONLY) && sub.rmdir();
    1bca:	mov	r0, r5
    1bcc:	bl	5464 <ExFatFile::rmdir()>
    1bd0:	b.n	1adc <MTPStorage_SD::DeleteObject(unsigned long)+0x8c>
    1bd2:	nop
    1bd4:	.word	0x1fff8774

00001bd8 <MTPStorage_SD::rename(unsigned long, char const*)>:
    WriteIndexRecord(open_file_, r);
    open_file_ = 0xFFFFFFFEUL;
  }

  void MTPStorage_SD::rename(uint32_t handle, const char* name) 
  { char oldName[256];
    1bd8:	push	{r4, r5, r6, lr}
    1bda:	sub.w	sp, sp, #648	; 0x288
    1bde:	mov	r4, r0
    1be0:	mov	r5, r1
    char newName[256];

    ConstructFilename(handle, oldName, 256);
    1be2:	mov.w	r3, #256	; 0x100
    WriteIndexRecord(open_file_, r);
    open_file_ = 0xFFFFFFFEUL;
  }

  void MTPStorage_SD::rename(uint32_t handle, const char* name) 
  { char oldName[256];
    1be6:	mov	r6, r2
    char newName[256];

    ConstructFilename(handle, oldName, 256);
    1be8:	add	r2, sp, #136	; 0x88
    1bea:	bl	19e4 <MTPStorage_SD::ConstructFilename(int, char*, int)>
    Record p1 = ReadIndexRecord(handle);
    1bee:	mov	r2, r5
    1bf0:	mov	r1, r4
    1bf2:	add	r0, sp, #56	; 0x38
    1bf4:	bl	18b0 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    strcpy(p1.name,name);
    1bf8:	mov	r1, r6
    1bfa:	add.w	r0, sp, #70	; 0x46
    1bfe:	bl	ce60 <strcpy>
    WriteIndexRecord(handle, p1);
    1c02:	mov	r0, r4
    1c04:	add	r2, sp, #56	; 0x38
    1c06:	mov	r1, r5
    1c08:	bl	17e8 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    ConstructFilename(handle, newName, 256);
    1c0c:	mov	r0, r4
    1c0e:	mov.w	r3, #256	; 0x100
    1c12:	mov	r1, r5
    1c14:	add	r2, sp, #392	; 0x188
    1c16:	bl	19e4 <MTPStorage_SD::ConstructFilename(int, char*, int)>
    1c1a:	ldr	r3, [pc, #116]	; (1c90 <MTPStorage_SD::rename(unsigned long, char const*)+0xb8>)
    1c1c:	ldr.w	r4, [r3, #1144]	; 0x478
   *
   * \return true for success or false for failure.
   */
  bool rename(const char *oldPath, const char *newPath) {
    return m_fVol ? m_fVol->rename(oldPath, newPath) :
           m_xVol ? m_xVol->rename(oldPath, newPath) : false;
    1c20:	cbz	r4, 1c58 <MTPStorage_SD::rename(unsigned long, char const*)+0x80>
    1c22:	movs	r5, #0
    return truncate(path.c_str(), length);
  }
#endif  // ENABLE_ARDUINO_STRING

 private:
  FatFile* vwd() {return &m_vwd;}
    1c24:	add.w	r4, r4, #1088	; 0x440
   *
   * \return true for success or false for failure.
   */
  bool rename(const char *oldPath, const char *newPath) {
    FatFile file;
    return file.open(vwd(), oldPath, O_RDONLY) && file.rename(vwd(), newPath);
    1c28:	add	r2, sp, #136	; 0x88
    1c2a:	mov	r1, r4
    1c2c:	mov	r0, sp
    1c2e:	mov	r3, r5
    1c30:	strb.w	r5, [sp]
    1c34:	strb.w	r5, [sp, #1]
    1c38:	strb.w	r5, [sp, #2]
    1c3c:	bl	60b8 <FatFile::open(FatFile*, char const*, int)>
    1c40:	cbnz	r0, 1c48 <MTPStorage_SD::rename(unsigned long, char const*)+0x70>

    sd_rename(oldName,newName);
  }
    1c42:	add.w	sp, sp, #648	; 0x288
    1c46:	pop	{r4, r5, r6, pc}
    1c48:	add	r2, sp, #392	; 0x188
    1c4a:	mov	r1, r4
    1c4c:	mov	r0, sp
    1c4e:	bl	69b8 <FatFile::rename(FatFile*, char const*)>
    1c52:	add.w	sp, sp, #648	; 0x288
    1c56:	pop	{r4, r5, r6, pc}
    1c58:	ldr.w	r1, [r3, #1148]	; 0x47c
    1c5c:	cmp	r1, #0
    1c5e:	beq.n	1c42 <MTPStorage_SD::rename(unsigned long, char const*)+0x6a>
  bool rmdir(const char* path);
#endif  //  USE_EXFAT_UNICODE_NAMES

 private:
  friend ExFatFile;
  ExFatFile* vwd() {return &m_vwd;}
    1c60:	add.w	r5, r1, #1088	; 0x440
   *
   * \return true for success or false for failure.
   */
  bool rename(const ExChar_t* oldPath, const ExChar_t* newPath) {
    ExFatFile file;
    return file.open(vwd(), oldPath, O_RDONLY) && file.rename(vwd(), newPath);
    1c64:	add	r2, sp, #136	; 0x88
    1c66:	mov	r1, r5
    1c68:	mov	r3, r4
    1c6a:	mov	r0, sp
    1c6c:	strb.w	r4, [sp, #49]	; 0x31
    1c70:	strb.w	r4, [sp, #50]	; 0x32
    1c74:	strb.w	r4, [sp, #51]	; 0x33
    1c78:	bl	4a40 <ExFatFile::open(ExFatFile*, char const*, int)>
    1c7c:	cmp	r0, #0
    1c7e:	beq.n	1c42 <MTPStorage_SD::rename(unsigned long, char const*)+0x6a>
    1c80:	add	r2, sp, #392	; 0x188
    1c82:	mov	r1, r5
    1c84:	mov	r0, sp
    1c86:	bl	5950 <ExFatFile::rename(ExFatFile*, char const*)>
    1c8a:	add.w	sp, sp, #648	; 0x288
    1c8e:	pop	{r4, r5, r6, pc}
    1c90:	.word	0x1fff8774

00001c94 <MTPStorage_SD::move(unsigned long, unsigned long)>:

  void MTPStorage_SD::move(uint32_t handle, uint32_t newParent ) 
  { char oldName[256];
    1c94:	push	{r4, r5, r6, lr}
    1c96:	sub.w	sp, sp, #728	; 0x2d8
    1c9a:	mov	r4, r2
    1c9c:	mov	r5, r0
    1c9e:	mov	r6, r1
    char newName[256];

    ConstructFilename(handle, oldName, 256);
    1ca0:	mov.w	r3, #256	; 0x100
    1ca4:	add	r2, sp, #216	; 0xd8
    1ca6:	bl	19e4 <MTPStorage_SD::ConstructFilename(int, char*, int)>
    Record p1 = ReadIndexRecord(handle);
    1caa:	mov	r2, r6
    1cac:	mov	r1, r5
    1cae:	add	r0, sp, #56	; 0x38
    1cb0:	bl	18b0 <MTPStorage_SD::ReadIndexRecord(unsigned long)>

    if (newParent == 0xFFFFFFFFUL) newParent = 0;
    1cb4:	adds	r3, r4, #1
    1cb6:	it	eq
    1cb8:	moveq	r4, #0
    Record p2 = ReadIndexRecord(newParent); // is pointing to last object in directory
    1cba:	mov	r2, r4
    1cbc:	mov	r1, r5
    1cbe:	add	r0, sp, #136	; 0x88
    1cc0:	bl	18b0 <MTPStorage_SD::ReadIndexRecord(unsigned long)>

    p1.sibling = p2.child;
    1cc4:	ldr	r3, [sp, #140]	; 0x8c
    1cc6:	str	r3, [sp, #64]	; 0x40
    p1.parent = newParent;

    p2.child = handle; 
    WriteIndexRecord(handle, p1);
    1cc8:	add	r2, sp, #56	; 0x38
    1cca:	mov	r1, r6
    1ccc:	mov	r0, r5

    if (newParent == 0xFFFFFFFFUL) newParent = 0;
    Record p2 = ReadIndexRecord(newParent); // is pointing to last object in directory

    p1.sibling = p2.child;
    p1.parent = newParent;
    1cce:	str	r4, [sp, #56]	; 0x38

    p2.child = handle; 
    1cd0:	str	r6, [sp, #140]	; 0x8c
    WriteIndexRecord(handle, p1);
    1cd2:	bl	17e8 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    WriteIndexRecord(newParent, p2);
    1cd6:	mov	r1, r4
    1cd8:	add	r2, sp, #136	; 0x88
    1cda:	mov	r0, r5
    1cdc:	bl	17e8 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>

    ConstructFilename(handle, newName, 256);
    1ce0:	mov.w	r3, #256	; 0x100
    1ce4:	mov	r1, r6
    1ce6:	mov	r0, r5
    1ce8:	add	r2, sp, #472	; 0x1d8
    1cea:	bl	19e4 <MTPStorage_SD::ConstructFilename(int, char*, int)>
    1cee:	ldr	r3, [pc, #116]	; (1d64 <MTPStorage_SD::move(unsigned long, unsigned long)+0xd0>)
    1cf0:	ldr.w	r4, [r3, #1144]	; 0x478
    1cf4:	cbz	r4, 1d2c <MTPStorage_SD::move(unsigned long, unsigned long)+0x98>
    1cf6:	movs	r5, #0
    return truncate(path.c_str(), length);
  }
#endif  // ENABLE_ARDUINO_STRING

 private:
  FatFile* vwd() {return &m_vwd;}
    1cf8:	add.w	r4, r4, #1088	; 0x440
   *
   * \return true for success or false for failure.
   */
  bool rename(const char *oldPath, const char *newPath) {
    FatFile file;
    return file.open(vwd(), oldPath, O_RDONLY) && file.rename(vwd(), newPath);
    1cfc:	add	r2, sp, #216	; 0xd8
    1cfe:	mov	r1, r4
    1d00:	mov	r0, sp
    1d02:	mov	r3, r5
    1d04:	strb.w	r5, [sp]
    1d08:	strb.w	r5, [sp, #1]
    1d0c:	strb.w	r5, [sp, #2]
    1d10:	bl	60b8 <FatFile::open(FatFile*, char const*, int)>
    1d14:	cbnz	r0, 1d1c <MTPStorage_SD::move(unsigned long, unsigned long)+0x88>
    sd_rename(oldName,newName);
  }
    1d16:	add.w	sp, sp, #728	; 0x2d8
    1d1a:	pop	{r4, r5, r6, pc}
    1d1c:	add	r2, sp, #472	; 0x1d8
    1d1e:	mov	r1, r4
    1d20:	mov	r0, sp
    1d22:	bl	69b8 <FatFile::rename(FatFile*, char const*)>
    1d26:	add.w	sp, sp, #728	; 0x2d8
    1d2a:	pop	{r4, r5, r6, pc}
    1d2c:	ldr.w	r1, [r3, #1148]	; 0x47c
    1d30:	cmp	r1, #0
    1d32:	beq.n	1d16 <MTPStorage_SD::move(unsigned long, unsigned long)+0x82>
  bool rmdir(const char* path);
#endif  //  USE_EXFAT_UNICODE_NAMES

 private:
  friend ExFatFile;
  ExFatFile* vwd() {return &m_vwd;}
    1d34:	add.w	r5, r1, #1088	; 0x440
   *
   * \return true for success or false for failure.
   */
  bool rename(const ExChar_t* oldPath, const ExChar_t* newPath) {
    ExFatFile file;
    return file.open(vwd(), oldPath, O_RDONLY) && file.rename(vwd(), newPath);
    1d38:	add	r2, sp, #216	; 0xd8
    1d3a:	mov	r1, r5
    1d3c:	mov	r3, r4
    1d3e:	mov	r0, sp
    1d40:	strb.w	r4, [sp, #49]	; 0x31
    1d44:	strb.w	r4, [sp, #50]	; 0x32
    1d48:	strb.w	r4, [sp, #51]	; 0x33
    1d4c:	bl	4a40 <ExFatFile::open(ExFatFile*, char const*, int)>
    1d50:	cmp	r0, #0
    1d52:	beq.n	1d16 <MTPStorage_SD::move(unsigned long, unsigned long)+0x82>
    1d54:	add	r2, sp, #472	; 0x1d8
    1d56:	mov	r1, r5
    1d58:	mov	r0, sp
    1d5a:	bl	5950 <ExFatFile::rename(ExFatFile*, char const*)>
    1d5e:	add.w	sp, sp, #728	; 0x2d8
    1d62:	pop	{r4, r5, r6, pc}
    1d64:	.word	0x1fff8774

00001d68 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)>:
      if(((strlen(out)+strlen(tmp.name)+1) < (unsigned) len)) strcat(out, tmp.name);
    }
  }

  void MTPStorage_SD::OpenFileByIndex(uint32_t i, uint32_t mode) 
  {
    1d68:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    if (open_file_ == i && mode_ == mode) return;
    1d6c:	ldr	r3, [r0, #68]	; 0x44
    1d6e:	cmp	r3, r1
      if(((strlen(out)+strlen(tmp.name)+1) < (unsigned) len)) strcat(out, tmp.name);
    }
  }

  void MTPStorage_SD::OpenFileByIndex(uint32_t i, uint32_t mode) 
  {
    1d70:	sub	sp, #340	; 0x154
    if (open_file_ == i && mode_ == mode) return;
    1d72:	beq.n	1e4a <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0xe2>
    1d74:	mov	r5, r0
    1d76:	mov	r7, r2
    char filename[256];
    ConstructFilename(i, filename, 256);
    1d78:	mov.w	r3, #256	; 0x100
    1d7c:	add	r2, sp, #80	; 0x50
    1d7e:	mov	r6, r1
    1d80:	bl	19e4 <MTPStorage_SD::ConstructFilename(int, char*, int)>
	}
	virtual void close() {
		if (f) f->close();
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
    1d84:	ldr	r0, [r5, #40]	; 0x28
    1d86:	cbz	r0, 1d9a <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x32>
    1d88:	ldr	r3, [r0, #0]
    1d8a:	ldr	r3, [r3, #64]	; 0x40
    1d8c:	blx	r3
    mtp_lock_storage(true);
    if(sd_isOpen(file_)) file_.close();
    1d8e:	cbz	r0, 1d9a <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x32>
	}
	virtual uint32_t size() {
		return (f) ? f->size() : 0;
	}
	virtual void close() {
		if (f) f->close();
    1d90:	ldr	r0, [r5, #40]	; 0x28
    1d92:	cbz	r0, 1d9a <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x32>
    1d94:	ldr	r3, [r0, #0]
    1d96:	ldr	r3, [r3, #60]	; 0x3c
    1d98:	blx	r3
		return sdfs.begin(SdSpiConfig(csPin, SHARED_SPI, SD_SCK_MHZ(24)));
		//return sdfs.begin(csPin, SD_SCK_MHZ(24));
	}
	File open(const char *filepath, uint8_t mode = FILE_READ) {
		oflag_t flags = O_READ;
		if (mode == FILE_WRITE) flags = O_RDWR | O_CREAT | O_AT_END;
    1d9a:	uxtb	r3, r7
#endif
		return sdfs.begin(SdSpiConfig(csPin, SHARED_SPI, SD_SCK_MHZ(24)));
		//return sdfs.begin(csPin, SD_SCK_MHZ(24));
	}
	File open(const char *filepath, uint8_t mode = FILE_READ) {
		oflag_t flags = O_READ;
    1d9c:	cmp	r3, #1
		if (mode == FILE_WRITE) flags = O_RDWR | O_CREAT | O_AT_END;
		SDFAT_FILE file = sdfs.open(filepath, flags);
    1d9e:	add	r2, sp, #80	; 0x50
#endif
		return sdfs.begin(SdSpiConfig(csPin, SHARED_SPI, SD_SCK_MHZ(24)));
		//return sdfs.begin(csPin, SD_SCK_MHZ(24));
	}
	File open(const char *filepath, uint8_t mode = FILE_READ) {
		oflag_t flags = O_READ;
    1da0:	movw	r3, #16898	; 0x4202
		if (mode == FILE_WRITE) flags = O_RDWR | O_CREAT | O_AT_END;
		SDFAT_FILE file = sdfs.open(filepath, flags);
    1da4:	mov	r0, sp
    1da6:	it	ne
    1da8:	movne	r3, #0
    1daa:	ldr	r1, [pc, #184]	; (1e64 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0xfc>)
    1dac:	bl	822c <FsVolume::open(char const*, int)>
    1db0:	ldr	r3, [sp, #72]	; 0x48
    1db2:	cmp	r3, #0
    1db4:	beq.n	1e56 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0xee>
		if (file) return File(new SDFile(file));
    1db6:	movs	r0, #104	; 0x68
    1db8:	bl	b340 <operator new(unsigned int)>
    1dbc:	mov	r4, r0
    1dbe:	mov.w	r3, #1000	; 0x3e8
#endif

class SDFile : public File
{
public:
	SDFile(const SDFAT_FILE &file) : sdfatfile(file), filename(nullptr) { }
    1dc2:	ldr	r2, [pc, #164]	; (1e68 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x100>)
//#define BYTE 0
//#endif

class __FlashStringHelper;

class Print
    1dc4:	ldrb.w	r0, [sp, #4]
#define Stream_h

#include <inttypes.h>
#include "Print.h"

class Stream : public Print
    1dc8:	ldr	r1, [pc, #160]	; (1e6c <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x104>)
{
  public:
	constexpr Stream() : _timeout(1000), read_error(0) {}
    1dca:	str	r3, [r4, #8]
{
  public:
	constexpr Print() : write_error(0) {}
    1dcc:	mov.w	r8, #0
#define Stream_h

#include <inttypes.h>
#include "Print.h"

class Stream : public Print
    1dd0:	ldr	r3, [sp, #8]
    1dd2:	str	r2, [r4, #0]
    1dd4:	add.w	r9, sp, #16
    1dd8:	ldrb.w	r2, [sp, #12]
//#define BYTE 0
//#endif

class __FlashStringHelper;

class Print
    1ddc:	strb	r0, [r4, #24]
    1dde:	str	r1, [r4, #20]
    1de0:	str	r3, [r4, #28]
    1de2:	strb.w	r2, [r4, #32]
    1de6:	add.w	r0, r4, #36	; 0x24
    1dea:	mov	r1, r9
{
  public:
	constexpr Print() : write_error(0) {}
    1dec:	strb.w	r8, [r4, #4]
{
  public:
	constexpr Stream() : _timeout(1000), read_error(0) {}
    1df0:	strb.w	r8, [r4, #12]

#define FILE_WHOAMI

class File : public Stream {
public:
	constexpr File() : f(nullptr) { }
    1df4:	str.w	r8, [r4, #16]
    1df8:	bl	7fe8 <FsBaseFile::FsBaseFile(FsBaseFile const&)>
		// or is_base_of
		//static_assert(std::is_same<decltype(*file),File>::value,
			//"File(File *file) constructor only accepts pointers "
			//"to derived classes, not File itself");
		f = file;
		if (f) f->refcount++;
    1dfc:	ldr	r3, [r4, #16]
};
/**
 * \class FsFile
 * \brief FsBaseFile file with Arduino Stream.
 */
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    1dfe:	ldr	r2, [pc, #112]	; (1e70 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x108>)
    1e00:	str.w	r8, [r4, #100]	; 0x64
    1e04:	adds	r3, #1
    1e06:	str	r2, [r4, #20]
    1e08:	str	r3, [r4, #16]
    1e0a:	ldr	r3, [pc, #104]	; (1e74 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x10c>)
    1e0c:	str	r3, [sp, #0]
 */
class FsBaseFile {
 public:
  FsBaseFile() : m_fFile(nullptr), m_xFile(nullptr) {}

  ~FsBaseFile() {close();}
    1e0e:	mov	r0, r9
    1e10:	bl	8060 <FsBaseFile::close()>
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    1e14:	ldr	r2, [r5, #40]	; 0x28
    1e16:	cbz	r2, 1e20 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0xb8>
    1e18:	ldr	r3, [r2, #16]
    1e1a:	subs	r3, #1
    1e1c:	str	r3, [r2, #16]
    1e1e:	cbz	r3, 1e32 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0xca>
	File& operator = (const File &file) {
		//Serial.println("File assignment");
		//static int assigncount=0;
		//if (++assigncount > 20) while (1) ;
		invalidate();
		f = file.f;
    1e20:	str	r4, [r5, #40]	; 0x28
		if (f) f->refcount++;
    1e22:	cbz	r4, 1e28 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0xc0>
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    1e24:	ldr	r3, [r4, #16]
    1e26:	cbz	r3, 1e40 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0xd8>
    file_=sd_open(filename,mode);
    open_file_ = i;
    1e28:	str	r6, [r5, #68]	; 0x44
    mode_ = mode;
    1e2a:	str	r7, [r5, #64]	; 0x40
    mtp_lock_storage(false);
  }
    1e2c:	add	sp, #340	; 0x154
    1e2e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    1e32:	ldr	r0, [r5, #40]	; 0x28
    1e34:	cmp	r0, #0
    1e36:	beq.n	1e20 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0xb8>
    1e38:	ldr	r3, [r0, #0]
    1e3a:	ldr	r3, [r3, #32]
    1e3c:	blx	r3
    1e3e:	b.n	1e20 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0xb8>
    1e40:	ldr	r3, [r4, #0]
    1e42:	mov	r0, r4
    1e44:	ldr	r3, [r3, #32]
    1e46:	blx	r3
    1e48:	b.n	1e28 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0xc0>
    }
  }

  void MTPStorage_SD::OpenFileByIndex(uint32_t i, uint32_t mode) 
  {
    if (open_file_ == i && mode_ == mode) return;
    1e4a:	ldr	r3, [r0, #64]	; 0x40
    1e4c:	cmp	r3, r2
    1e4e:	bne.n	1d74 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0xc>
    if(sd_isOpen(file_)) file_.close();
    file_=sd_open(filename,mode);
    open_file_ = i;
    mode_ = mode;
    mtp_lock_storage(false);
  }
    1e50:	add	sp, #340	; 0x154
    1e52:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  bool isHidden() {
    return m_fFile ? m_fFile->isHidden() :
           m_xFile ? m_xFile->isHidden() : false;
  }
  /** \return True if this is an open file/directory else false. */
  bool isOpen() {return m_fFile || m_xFile;}
    1e56:	ldr	r4, [sp, #76]	; 0x4c
    1e58:	cmp	r4, #0
    1e5a:	bne.n	1db6 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x4e>
    1e5c:	add.w	r9, sp, #16
    1e60:	b.n	1e0a <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0xa2>
    1e62:	nop
    1e64:	.word	0x1fff8774
    1e68:	.word	0x000103d8
    1e6c:	.word	0x00010310
    1e70:	.word	0x00010358
    1e74:	.word	0x00010334

00001e78 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)>:
  {
    return ReadIndexRecord(handle).child;
  }

  void MTPStorage_SD::read(uint32_t handle, uint32_t pos, char* out, uint32_t bytes)
  {
    1e78:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1e7c:	mov	r4, r0
    1e7e:	mov	r7, r2
    OpenFileByIndex(handle);
    1e80:	movs	r2, #0
  {
    return ReadIndexRecord(handle).child;
  }

  void MTPStorage_SD::read(uint32_t handle, uint32_t pos, char* out, uint32_t bytes)
  {
    1e82:	mov	r5, r3
    1e84:	ldr	r6, [sp, #24]
    OpenFileByIndex(handle);
    1e86:	bl	1d68 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)>
	}
	virtual void flush() {
		if (f) f->flush();
	}
	virtual bool seek(uint32_t pos, int mode) {
		return (f) ? f->seek(pos, mode) : false;
    1e8a:	ldr	r0, [r4, #40]	; 0x28
    1e8c:	cbz	r0, 1eaa <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x32>
    1e8e:	ldr	r3, [r0, #0]
    1e90:	mov	r1, r7
    1e92:	ldr	r3, [r3, #48]	; 0x30
    1e94:	movs	r2, #0
    1e96:	blx	r3
	unsigned int getRefcount() { // testing only
		return refcount;
	}
#endif
	virtual size_t read(void *buf, size_t nbyte) {
		return (f) ? f->read(buf, nbyte) : 0;
    1e98:	ldr	r0, [r4, #40]	; 0x28
    1e9a:	cbz	r0, 1eaa <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x32>
    1e9c:	ldr	r3, [r0, #0]
    1e9e:	mov	r2, r6
    1ea0:	mov	r1, r5
    1ea2:	ldr	r3, [r3, #40]	; 0x28
    mtp_lock_storage(true);
    file_.seek(pos);
    file_.read(out,bytes);
    mtp_lock_storage(false);
  }
    1ea4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    1ea8:	bx	r3
    1eaa:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1eae:	nop

00001eb0 <MTPStorage_SD::Create(unsigned long, bool, char const*)>:
    }
    return true;
  }

  uint32_t MTPStorage_SD::Create(uint32_t parent,  bool folder, const char* filename)
  {
    1eb0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    uint32_t ret;
    if (parent == 0xFFFFFFFFUL) parent = 0;
    1eb4:	cmp.w	r1, #4294967295
    1eb8:	ite	ne
    1eba:	movne	r6, r1
    1ebc:	moveq	r6, #0
    }
    return true;
  }

  uint32_t MTPStorage_SD::Create(uint32_t parent,  bool folder, const char* filename)
  {
    1ebe:	sub	sp, #476	; 0x1dc
    1ec0:	mov	r5, r3
    uint32_t ret;
    if (parent == 0xFFFFFFFFUL) parent = 0;
    Record p = ReadIndexRecord(parent);
    1ec2:	mov	r1, r0
    }
    return true;
  }

  uint32_t MTPStorage_SD::Create(uint32_t parent,  bool folder, const char* filename)
  {
    1ec4:	mov	r4, r0
    1ec6:	mov	r7, r2
    uint32_t ret;
    if (parent == 0xFFFFFFFFUL) parent = 0;
    Record p = ReadIndexRecord(parent);
    1ec8:	add	r0, sp, #56	; 0x38
    1eca:	mov	r2, r6
    1ecc:	bl	18b0 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    Record r;
    if (strlen(filename) > 62) return 0;
    1ed0:	mov	r0, r5
    1ed2:	bl	cf40 <strlen>
    1ed6:	cmp	r0, #62	; 0x3e
    1ed8:	bls.n	1ee4 <MTPStorage_SD::Create(unsigned long, bool, char const*)+0x34>
    1eda:	movs	r5, #0
    else 
    {
      OpenFileByIndex(ret, FILE_WRITE);
    }
    return ret;
  }
    1edc:	mov	r0, r5
    1ede:	add	sp, #476	; 0x1dc
    1ee0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    uint32_t ret;
    if (parent == 0xFFFFFFFFUL) parent = 0;
    Record p = ReadIndexRecord(parent);
    Record r;
    if (strlen(filename) > 62) return 0;
    strcpy(r.name, filename);
    1ee4:	adds	r2, r0, #1
    1ee6:	mov	r1, r5
    1ee8:	add.w	r0, sp, #150	; 0x96
    1eec:	bl	9aa8 <memcpy>
    index_.write((char*)&r, sizeof(r));
    mtp_lock_storage(false);
  }

  uint32_t MTPStorage_SD::AppendIndexRecord(const Record& r) 
  { uint32_t new_record = index_entries_++;
    1ef0:	ldr	r5, [r4, #72]	; 0x48
    Record r;
    if (strlen(filename) > 62) return 0;
    strcpy(r.name, filename);
    r.parent = parent;
    r.child = 0;
    r.sibling = p.child;
    1ef2:	ldr	r3, [sp, #60]	; 0x3c
    if (parent == 0xFFFFFFFFUL) parent = 0;
    Record p = ReadIndexRecord(parent);
    Record r;
    if (strlen(filename) > 62) return 0;
    strcpy(r.name, filename);
    r.parent = parent;
    1ef4:	str	r6, [sp, #136]	; 0x88
    index_.write((char*)&r, sizeof(r));
    mtp_lock_storage(false);
  }

  uint32_t MTPStorage_SD::AppendIndexRecord(const Record& r) 
  { uint32_t new_record = index_entries_++;
    1ef6:	adds	r2, r5, #1
    1ef8:	str	r2, [r4, #72]	; 0x48
    WriteIndexRecord(new_record, r);
    1efa:	mov	r1, r5
    1efc:	add	r2, sp, #136	; 0x88
    1efe:	mov	r0, r4
    Record p = ReadIndexRecord(parent);
    Record r;
    if (strlen(filename) > 62) return 0;
    strcpy(r.name, filename);
    r.parent = parent;
    r.child = 0;
    1f00:	mov.w	r9, #0
    r.sibling = p.child;
    r.isdir = folder;
    // New folder is empty, scanned = true.
    r.scanned = 1;
    1f04:	mov.w	r8, #1
    if (strlen(filename) > 62) return 0;
    strcpy(r.name, filename);
    r.parent = parent;
    r.child = 0;
    r.sibling = p.child;
    r.isdir = folder;
    1f08:	strb.w	r7, [sp, #148]	; 0x94
    Record r;
    if (strlen(filename) > 62) return 0;
    strcpy(r.name, filename);
    r.parent = parent;
    r.child = 0;
    r.sibling = p.child;
    1f0c:	str	r3, [sp, #144]	; 0x90
    Record p = ReadIndexRecord(parent);
    Record r;
    if (strlen(filename) > 62) return 0;
    strcpy(r.name, filename);
    r.parent = parent;
    r.child = 0;
    1f0e:	str.w	r9, [sp, #140]	; 0x8c
    r.sibling = p.child;
    r.isdir = folder;
    // New folder is empty, scanned = true.
    r.scanned = 1;
    1f12:	strb.w	r8, [sp, #149]	; 0x95
    mtp_lock_storage(false);
  }

  uint32_t MTPStorage_SD::AppendIndexRecord(const Record& r) 
  { uint32_t new_record = index_entries_++;
    WriteIndexRecord(new_record, r);
    1f16:	bl	17e8 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    r.sibling = p.child;
    r.isdir = folder;
    // New folder is empty, scanned = true.
    r.scanned = 1;
    ret = p.child = AppendIndexRecord(r);
    WriteIndexRecord(parent, p);
    1f1a:	add	r2, sp, #56	; 0x38
    1f1c:	mov	r1, r6
    1f1e:	mov	r0, r4
    r.child = 0;
    r.sibling = p.child;
    r.isdir = folder;
    // New folder is empty, scanned = true.
    r.scanned = 1;
    ret = p.child = AppendIndexRecord(r);
    1f20:	str	r5, [sp, #60]	; 0x3c
    WriteIndexRecord(parent, p);
    1f22:	bl	17e8 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    if (folder) 
    1f26:	cbnz	r7, 1f3a <MTPStorage_SD::Create(unsigned long, bool, char const*)+0x8a>
      sd_mkdir(filename);
      mtp_lock_storage(false);
    } 
    else 
    {
      OpenFileByIndex(ret, FILE_WRITE);
    1f28:	mov	r0, r4
    1f2a:	mov	r2, r8
    1f2c:	mov	r1, r5
    1f2e:	bl	1d68 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)>
    }
    return ret;
  }
    1f32:	mov	r0, r5
    1f34:	add	sp, #476	; 0x1dc
    1f36:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    ret = p.child = AppendIndexRecord(r);
    WriteIndexRecord(parent, p);
    if (folder) 
    {
      char filename[256];
      ConstructFilename(ret, filename, 256);
    1f3a:	mov	r0, r4
    1f3c:	mov.w	r3, #256	; 0x100
    1f40:	add	r2, sp, #216	; 0xd8
    1f42:	mov	r1, r5
    1f44:	bl	19e4 <MTPStorage_SD::ConstructFilename(int, char*, int)>
    1f48:	ldr	r3, [pc, #68]	; (1f90 <MTPStorage_SD::Create(unsigned long, bool, char const*)+0xe0>)
    1f4a:	ldr.w	r4, [r3, #1144]	; 0x478
   *
   * \return true for success or false for failure.
   */
  bool mkdir(const char *path, bool pFlag = true) {
    return m_fVol ? m_fVol->mkdir(path, pFlag) :
           m_xVol ? m_xVol->mkdir(path, pFlag) : false;
    1f4e:	cbz	r4, 1f6c <MTPStorage_SD::Create(unsigned long, bool, char const*)+0xbc>
   *
   * \return true for success or false for failure.
   */
  bool mkdir(const char* path, bool pFlag = true) {
    FatFile sub;
    return sub.mkdir(vwd(), path, pFlag);
    1f50:	mov	r3, r8
    1f52:	add	r2, sp, #216	; 0xd8
    1f54:	add.w	r1, r4, #1088	; 0x440
    1f58:	mov	r0, sp
    1f5a:	strb.w	r9, [sp]
    1f5e:	strb.w	r9, [sp, #1]
    1f62:	strb.w	r9, [sp, #2]
    1f66:	bl	68bc <FatFile::mkdir(FatFile*, char const*, bool)>
    1f6a:	b.n	1edc <MTPStorage_SD::Create(unsigned long, bool, char const*)+0x2c>
    1f6c:	ldr.w	r1, [r3, #1148]	; 0x47c
    1f70:	cmp	r1, #0
    1f72:	beq.n	1edc <MTPStorage_SD::Create(unsigned long, bool, char const*)+0x2c>
   *
   * \return true for success or false for failure.
   */
  bool mkdir(const ExChar_t* path, bool pFlag = true) {
    ExFatFile sub;
    return sub.mkdir(vwd(), path, pFlag);
    1f74:	mov	r3, r8
    1f76:	add	r2, sp, #216	; 0xd8
    1f78:	add.w	r1, r1, #1088	; 0x440
    1f7c:	mov	r0, sp
    1f7e:	strb.w	r4, [sp, #49]	; 0x31
    1f82:	strb.w	r4, [sp, #50]	; 0x32
    1f86:	strb.w	r4, [sp, #51]	; 0x33
    1f8a:	bl	5848 <ExFatFile::mkdir(ExFatFile*, char const*, bool)>
    1f8e:	b.n	1edc <MTPStorage_SD::Create(unsigned long, bool, char const*)+0x2c>
    1f90:	.word	0x1fff8774

00001f94 <MTPStorage_SD::ScanDir(unsigned long)>:
    strcpy(r.name, "/");
    AppendIndexRecord(r);
  }

  void MTPStorage_SD::ScanDir(uint32_t i) 
  { Record record = ReadIndexRecord(i);
    1f94:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1f98:	sub	sp, #160	; 0xa0
    1f9a:	mov	r2, r1
    1f9c:	mov	r4, r0
    1f9e:	mov	r6, r1
    1fa0:	mov	r1, r0
    1fa2:	mov	r0, sp
    1fa4:	bl	18b0 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    if (record.isdir && !record.scanned) {
    1fa8:	ldrb.w	r3, [sp, #12]
    1fac:	cbz	r3, 1fb4 <MTPStorage_SD::ScanDir(unsigned long)+0x20>
    1fae:	ldrb.w	r5, [sp, #13]
    1fb2:	cbz	r5, 1fba <MTPStorage_SD::ScanDir(unsigned long)+0x26>
      }
      record.scanned = true;
      record.child = sibling;
      WriteIndexRecord(i, record);
    }
  }
    1fb4:	add	sp, #160	; 0xa0
    1fb6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  }

  void MTPStorage_SD::ScanDir(uint32_t i) 
  { Record record = ReadIndexRecord(i);
    if (record.isdir && !record.scanned) {
      OpenFileByIndex(i);
    1fba:	mov	r0, r4
    1fbc:	mov	r2, r5
    1fbe:	mov	r1, r6
    1fc0:	bl	1d68 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)>
	}
	virtual void close() {
		if (f) f->close();
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
    1fc4:	ldr	r0, [r4, #40]	; 0x28
    1fc6:	cmp	r0, #0
    1fc8:	beq.n	1fb4 <MTPStorage_SD::ScanDir(unsigned long)+0x20>
    1fca:	ldr	r3, [r0, #0]
    1fcc:	ldr	r3, [r3, #64]	; 0x40
    1fce:	blx	r3
      if (!sd_isOpen(file_)) return;
    1fd0:	cmp	r0, #0
    1fd2:	beq.n	1fb4 <MTPStorage_SD::ScanDir(unsigned long)+0x20>
			//"File(File *file) constructor only accepts pointers "
			//"to derived classes, not File itself");
		f = file;
		if (f) f->refcount++;
	}
	File(const File &file) {
    1fd4:	ldr	r7, [pc, #264]	; (20e0 <MTPStorage_SD::ScanDir(unsigned long)+0x14c>)
    1fd6:	mov.w	r8, #1000	; 0x3e8
	}
	virtual bool isDirectory() {
		return (f) ? f->isDirectory() : false;
	}
	virtual File openNextFile(uint8_t mode=0) {
		return (f) ? f->openNextFile(mode) : *this;
    1fda:	ldr	r1, [r4, #40]	; 0x28
    1fdc:	cmp	r1, #0
    1fde:	beq.n	208e <MTPStorage_SD::ScanDir(unsigned long)+0xfa>
    1fe0:	ldr	r3, [r1, #0]
    1fe2:	movs	r2, #0
    1fe4:	ldr	r3, [r3, #76]	; 0x4c
    1fe6:	add	r0, sp, #80	; 0x50
    1fe8:	blx	r3
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    1fea:	ldr	r2, [r4, #60]	; 0x3c
    1fec:	cbz	r2, 2000 <MTPStorage_SD::ScanDir(unsigned long)+0x6c>
    1fee:	ldr	r3, [r2, #16]
    1ff0:	subs	r3, #1
    1ff2:	str	r3, [r2, #16]
    1ff4:	cbnz	r3, 2000 <MTPStorage_SD::ScanDir(unsigned long)+0x6c>
    1ff6:	ldr	r0, [r4, #60]	; 0x3c
    1ff8:	cbz	r0, 2000 <MTPStorage_SD::ScanDir(unsigned long)+0x6c>
    1ffa:	ldr	r3, [r0, #0]
    1ffc:	ldr	r3, [r3, #32]
    1ffe:	blx	r3
	File& operator = (const File &file) {
		//Serial.println("File assignment");
		//static int assigncount=0;
		//if (++assigncount > 20) while (1) ;
		invalidate();
		f = file.f;
    2000:	ldr	r3, [sp, #96]	; 0x60
    2002:	str	r3, [r4, #60]	; 0x3c
		if (f) f->refcount++;
    2004:	cbz	r3, 2024 <MTPStorage_SD::ScanDir(unsigned long)+0x90>
    2006:	ldr	r2, [r3, #16]
    2008:	adds	r2, #1
    200a:	str	r2, [r3, #16]
    200c:	ldr	r2, [sp, #96]	; 0x60
		return *this;
	}
	virtual ~File() {
    200e:	str	r7, [sp, #80]	; 0x50
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    2010:	cbz	r2, 2024 <MTPStorage_SD::ScanDir(unsigned long)+0x90>
    2012:	ldr	r3, [r2, #16]
    2014:	subs	r3, #1
    2016:	str	r3, [r2, #16]
    2018:	cbnz	r3, 2024 <MTPStorage_SD::ScanDir(unsigned long)+0x90>
    201a:	ldr	r0, [sp, #96]	; 0x60
    201c:	cbz	r0, 2024 <MTPStorage_SD::ScanDir(unsigned long)+0x90>
    201e:	ldr	r3, [r0, #0]
    2020:	ldr	r3, [r3, #32]
    2022:	blx	r3
	}
	virtual void close() {
		if (f) f->close();
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
    2024:	ldr	r0, [r4, #60]	; 0x3c
    2026:	cmp	r0, #0
    2028:	beq.n	20b0 <MTPStorage_SD::ScanDir(unsigned long)+0x11c>
    202a:	ldr	r3, [r0, #0]
    202c:	ldr	r3, [r3, #64]	; 0x40
    202e:	blx	r3
      int sibling = 0;
      while (true) 
      { mtp_lock_storage(true);
        child_=file_.openNextFile();
        mtp_lock_storage(false);
        if(!sd_isOpen(child_)) break;
    2030:	cmp	r0, #0
    2032:	beq.n	20b0 <MTPStorage_SD::ScanDir(unsigned long)+0x11c>
	}
	virtual const char* name() {
		return (f) ? f->name() : "";
	}
	virtual bool isDirectory() {
		return (f) ? f->isDirectory() : false;
    2034:	ldr	r0, [r4, #60]	; 0x3c

        Record r;
        r.parent = i;
    2036:	str	r6, [sp, #80]	; 0x50
        r.sibling = sibling;
    2038:	str	r5, [sp, #88]	; 0x58
    203a:	cmp	r0, #0
    203c:	beq.n	20a0 <MTPStorage_SD::ScanDir(unsigned long)+0x10c>
    203e:	ldr	r3, [r0, #0]
    2040:	ldr	r3, [r3, #72]	; 0x48
    2042:	blx	r3
        r.isdir = child_.isDirectory();
    2044:	strb.w	r0, [sp, #92]	; 0x5c
        r.child = r.isdir ? 0 : child_.size();
    2048:	cmp	r0, #0
    204a:	beq.n	20c8 <MTPStorage_SD::ScanDir(unsigned long)+0x134>
    204c:	ldr	r0, [r4, #60]	; 0x3c
    204e:	movs	r3, #0
    2050:	str	r3, [sp, #84]	; 0x54
        r.scanned = false;
    2052:	movs	r3, #0
    2054:	strb.w	r3, [sp, #93]	; 0x5d
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
	}
	virtual const char* name() {
		return (f) ? f->name() : "";
    2058:	cmp	r0, #0
    205a:	beq.n	20da <MTPStorage_SD::ScanDir(unsigned long)+0x146>
    205c:	ldr	r3, [r0, #0]
    205e:	ldr	r3, [r3, #68]	; 0x44
    2060:	blx	r3
    2062:	mov	r1, r0
        sd_getName(child_,r.name,64);
    2064:	add.w	r0, sp, #94	; 0x5e
    2068:	bl	ce60 <strcpy>
    index_.write((char*)&r, sizeof(r));
    mtp_lock_storage(false);
  }

  uint32_t MTPStorage_SD::AppendIndexRecord(const Record& r) 
  { uint32_t new_record = index_entries_++;
    206c:	ldr	r5, [r4, #72]	; 0x48
    206e:	adds	r3, r5, #1
    WriteIndexRecord(new_record, r);
    2070:	mov	r0, r4
    index_.write((char*)&r, sizeof(r));
    mtp_lock_storage(false);
  }

  uint32_t MTPStorage_SD::AppendIndexRecord(const Record& r) 
  { uint32_t new_record = index_entries_++;
    2072:	str	r3, [r4, #72]	; 0x48
    WriteIndexRecord(new_record, r);
    2074:	mov	r1, r5
    2076:	add	r2, sp, #80	; 0x50
    2078:	bl	17e8 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
	}
	virtual uint32_t size() {
		return (f) ? f->size() : 0;
	}
	virtual void close() {
		if (f) f->close();
    207c:	ldr	r0, [r4, #60]	; 0x3c
    207e:	cmp	r0, #0
    2080:	beq.n	1fda <MTPStorage_SD::ScanDir(unsigned long)+0x46>
    2082:	ldr	r3, [r0, #0]
    2084:	ldr	r3, [r3, #60]	; 0x3c
    2086:	blx	r3
	}
	virtual bool isDirectory() {
		return (f) ? f->isDirectory() : false;
	}
	virtual File openNextFile(uint8_t mode=0) {
		return (f) ? f->openNextFile(mode) : *this;
    2088:	ldr	r1, [r4, #40]	; 0x28
    208a:	cmp	r1, #0
    208c:	bne.n	1fe0 <MTPStorage_SD::ScanDir(unsigned long)+0x4c>
    208e:	strb.w	r1, [sp, #84]	; 0x54
    2092:	str.w	r8, [sp, #88]	; 0x58
    2096:	strb.w	r1, [sp, #92]	; 0x5c
			//"File(File *file) constructor only accepts pointers "
			//"to derived classes, not File itself");
		f = file;
		if (f) f->refcount++;
	}
	File(const File &file) {
    209a:	str	r7, [sp, #80]	; 0x50
		//Serial.println("File copy constructor");
		//static int copycount=0;
		//if (++copycount > 20) while (1) ;
		f = file.f;
    209c:	str	r1, [sp, #96]	; 0x60
    209e:	b.n	1fea <MTPStorage_SD::ScanDir(unsigned long)+0x56>
        if(!sd_isOpen(child_)) break;

        Record r;
        r.parent = i;
        r.sibling = sibling;
        r.isdir = child_.isDirectory();
    20a0:	strb.w	r0, [sp, #92]	; 0x5c
        r.child = r.isdir ? 0 : child_.size();
    20a4:	movs	r3, #0
    20a6:	str	r3, [sp, #84]	; 0x54
        r.scanned = false;
    20a8:	strb.w	r3, [sp, #93]	; 0x5d
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
	}
	virtual const char* name() {
		return (f) ? f->name() : "";
    20ac:	ldr	r1, [pc, #52]	; (20e4 <MTPStorage_SD::ScanDir(unsigned long)+0x150>)
    20ae:	b.n	2064 <MTPStorage_SD::ScanDir(unsigned long)+0xd0>
        sd_getName(child_,r.name,64);
        sibling = AppendIndexRecord(r);
        child_.close();
      }
      record.scanned = true;
    20b0:	movs	r3, #1
      record.child = sibling;
      WriteIndexRecord(i, record);
    20b2:	mov	r2, sp
    20b4:	mov	r1, r6
    20b6:	mov	r0, r4
        sd_getName(child_,r.name,64);
        sibling = AppendIndexRecord(r);
        child_.close();
      }
      record.scanned = true;
      record.child = sibling;
    20b8:	str	r5, [sp, #4]
        r.scanned = false;
        sd_getName(child_,r.name,64);
        sibling = AppendIndexRecord(r);
        child_.close();
      }
      record.scanned = true;
    20ba:	strb.w	r3, [sp, #13]
      record.child = sibling;
      WriteIndexRecord(i, record);
    20be:	bl	17e8 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    }
  }
    20c2:	add	sp, #160	; 0xa0
    20c4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}
	virtual uint32_t position() {
		return (f) ? f->position() : 0;
	}
	virtual uint32_t size() {
		return (f) ? f->size() : 0;
    20c8:	ldr	r0, [r4, #60]	; 0x3c
    20ca:	cmp	r0, #0
    20cc:	beq.n	20a4 <MTPStorage_SD::ScanDir(unsigned long)+0x110>
    20ce:	ldr	r3, [r0, #0]
    20d0:	ldr	r3, [r3, #56]	; 0x38
    20d2:	blx	r3
    20d4:	mov	r3, r0
    20d6:	ldr	r0, [r4, #60]	; 0x3c
    20d8:	b.n	2050 <MTPStorage_SD::ScanDir(unsigned long)+0xbc>
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
	}
	virtual const char* name() {
		return (f) ? f->name() : "";
    20da:	ldr	r1, [pc, #8]	; (20e4 <MTPStorage_SD::ScanDir(unsigned long)+0x150>)
    20dc:	b.n	2064 <MTPStorage_SD::ScanDir(unsigned long)+0xd0>
    20de:	nop
    20e0:	.word	0x0001037c
    20e4:	.word	0x00010444

000020e8 <MTPStorage_SD::ScanAll() [clone .part.48] [clone .constprop.52]>:

  void MTPStorage_SD::ScanAll() 
    20e8:	push	{r3, r4, r5, lr}

  // MTP object handles should not change or be re-used during a session.
  // This would be easy if we could just have a list of all files in memory.
  // Since our RAM is limited, we'll keep the index in a file instead.
  void MTPStorage_SD::GenerateIndex()
  { if (index_generated) return; 
    20ea:	ldrb.w	r3, [r0, #76]	; 0x4c
    }
  }

  void MTPStorage_SD::ScanAll() 
  { if (all_scanned_) return;
    all_scanned_ = true;
    20ee:	movs	r2, #1
      record.child = sibling;
      WriteIndexRecord(i, record);
    }
  }

  void MTPStorage_SD::ScanAll() 
    20f0:	mov	r5, r0
  { if (all_scanned_) return;
    all_scanned_ = true;
    20f2:	strb.w	r2, [r0, #77]	; 0x4d

  // MTP object handles should not change or be re-used during a session.
  // This would be easy if we could just have a list of all files in memory.
  // Since our RAM is limited, we'll keep the index in a file instead.
  void MTPStorage_SD::GenerateIndex()
  { if (index_generated) return; 
    20f6:	cbz	r3, 2110 <MTPStorage_SD::ScanAll() [clone .part.48] [clone .constprop.52]+0x28>
  void MTPStorage_SD::ScanAll() 
  { if (all_scanned_) return;
    all_scanned_ = true;

    GenerateIndex();
    for (uint32_t i = 0; i < index_entries_; i++)  ScanDir(i);
    20f8:	ldr	r3, [r5, #72]	; 0x48
    20fa:	cbz	r3, 210e <MTPStorage_SD::ScanAll() [clone .part.48] [clone .constprop.52]+0x26>
    20fc:	movs	r4, #0
    20fe:	mov	r1, r4
    2100:	mov	r0, r5
    2102:	bl	1f94 <MTPStorage_SD::ScanDir(unsigned long)>
    2106:	ldr	r3, [r5, #72]	; 0x48
    2108:	adds	r4, #1
    210a:	cmp	r3, r4
    210c:	bhi.n	20fe <MTPStorage_SD::ScanAll() [clone .part.48] [clone .constprop.52]+0x16>
    210e:	pop	{r3, r4, r5, pc}
    2110:	bl	181c <MTPStorage_SD::GenerateIndex() [clone .part.47] [clone .constprop.53]>
    2114:	b.n	20f8 <MTPStorage_SD::ScanAll() [clone .part.48] [clone .constprop.52]+0x10>
    2116:	nop

00002118 <MTPStorage_SD::StartGetObjectHandles(unsigned long)>:
  }

  void MTPStorage_SD::StartGetObjectHandles(uint32_t parent) 
  {
    2118:	push	{r4, r5, lr}

  // MTP object handles should not change or be re-used during a session.
  // This would be easy if we could just have a list of all files in memory.
  // Since our RAM is limited, we'll keep the index in a file instead.
  void MTPStorage_SD::GenerateIndex()
  { if (index_generated) return; 
    211a:	ldrb.w	r3, [r0, #76]	; 0x4c
    GenerateIndex();
    for (uint32_t i = 0; i < index_entries_; i++)  ScanDir(i);
  }

  void MTPStorage_SD::StartGetObjectHandles(uint32_t parent) 
  {
    211e:	sub	sp, #84	; 0x54
    2120:	mov	r4, r0
    2122:	mov	r5, r1

  // MTP object handles should not change or be re-used during a session.
  // This would be easy if we could just have a list of all files in memory.
  // Since our RAM is limited, we'll keep the index in a file instead.
  void MTPStorage_SD::GenerateIndex()
  { if (index_generated) return; 
    2124:	cbz	r3, 2162 <MTPStorage_SD::StartGetObjectHandles(unsigned long)+0x4a>
  }

  void MTPStorage_SD::StartGetObjectHandles(uint32_t parent) 
  {
    GenerateIndex();
    if (parent) 
    2126:	cbz	r5, 214e <MTPStorage_SD::StartGetObjectHandles(unsigned long)+0x36>
    { if (parent == 0xFFFFFFFF) parent = 0;
    2128:	adds	r3, r5, #1
    212a:	it	eq
    212c:	moveq	r5, #0

      ScanDir(parent);
    212e:	mov	r1, r5
    2130:	mov	r0, r4
    2132:	bl	1f94 <MTPStorage_SD::ScanDir(unsigned long)>
      follow_sibling_ = true;
    2136:	movs	r3, #1
    2138:	strb.w	r3, [r4, #84]	; 0x54
      // Root folder?
      next_ = ReadIndexRecord(parent).child;
    213c:	mov	r2, r5
    213e:	mov	r1, r4
    2140:	mov	r0, sp
    2142:	bl	18b0 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    2146:	ldr	r3, [sp, #4]
    2148:	str	r3, [r4, #80]	; 0x50
    else 
    { ScanAll();
      follow_sibling_ = false;
      next_ = 1;
    }
  }
    214a:	add	sp, #84	; 0x54
    214c:	pop	{r4, r5, pc}
      WriteIndexRecord(i, record);
    }
  }

  void MTPStorage_SD::ScanAll() 
  { if (all_scanned_) return;
    214e:	ldrb.w	r3, [r4, #77]	; 0x4d
    2152:	cbz	r3, 2168 <MTPStorage_SD::StartGetObjectHandles(unsigned long)+0x50>
      // Root folder?
      next_ = ReadIndexRecord(parent).child;
    } 
    else 
    { ScanAll();
      follow_sibling_ = false;
    2154:	movs	r2, #0
      next_ = 1;
    2156:	movs	r3, #1
      // Root folder?
      next_ = ReadIndexRecord(parent).child;
    } 
    else 
    { ScanAll();
      follow_sibling_ = false;
    2158:	strb.w	r2, [r4, #84]	; 0x54
      next_ = 1;
    215c:	str	r3, [r4, #80]	; 0x50
    }
  }
    215e:	add	sp, #84	; 0x54
    2160:	pop	{r4, r5, pc}
    2162:	bl	181c <MTPStorage_SD::GenerateIndex() [clone .part.47] [clone .constprop.53]>
    2166:	b.n	2126 <MTPStorage_SD::StartGetObjectHandles(unsigned long)+0xe>
    2168:	mov	r0, r4
    216a:	bl	20e8 <MTPStorage_SD::ScanAll() [clone .part.48] [clone .constprop.52]>
      // Root folder?
      next_ = ReadIndexRecord(parent).child;
    } 
    else 
    { ScanAll();
      follow_sibling_ = false;
    216e:	movs	r2, #0
      next_ = 1;
    2170:	movs	r3, #1
      // Root folder?
      next_ = ReadIndexRecord(parent).child;
    } 
    else 
    { ScanAll();
      follow_sibling_ = false;
    2172:	strb.w	r2, [r4, #84]	; 0x54
      next_ = 1;
    2176:	str	r3, [r4, #80]	; 0x50
    2178:	b.n	215e <MTPStorage_SD::StartGetObjectHandles(unsigned long)+0x46>
    217a:	nop

0000217c <Storage_init()>:
    *ms10 = second() & 1 ? 100 : 0;
  }


 bool Storage_init()
  { 
    217c:	push	{r3, r4, r5, lr}
   * \param[in] config SDIO configuration.
   * \return generic card pointer or nullptr if SDIO is not supported.
   */
  SdCard* newCard(SdioConfig config) {
#if HAS_SDIO_CLASS
    m_sdioCard.begin(config);
    217e:	ldr	r4, [pc, #52]	; (21b4 <Storage_init()+0x38>)
   *
   * \param[in] sdioConfig SDIO configuration.
   * \return true for success or false for failure.
   */
  bool cardBegin(SdioConfig sdioConfig) {
    m_card = m_cardFactory.newCard(sdioConfig);
    2180:	sub.w	r5, r4, #1160	; 0x488
    2184:	mov.w	r1, #0
    2188:	mov	r0, r4
    218a:	bl	9324 <SdioCard::begin(SdioConfig)>
    return m_card && !m_card->errorCode();
    218e:	mov	r0, r4
   *
   * \param[in] sdioConfig SDIO configuration.
   * \return true for success or false for failure.
   */
  bool cardBegin(SdioConfig sdioConfig) {
    m_card = m_cardFactory.newCard(sdioConfig);
    2190:	str.w	r4, [r5, #1156]	; 0x484
    return m_card && !m_card->errorCode();
    2194:	bl	8a84 <SdioCard::errorCode() const>
    2198:	cbz	r0, 219e <Storage_init()+0x22>
      SPI.setMOSI(SD_MOSI);
      SPI.setMISO(SD_MISO);
      SPI.setSCK(SD_SCK);
    #endif

    if (!sd_begin(SD_CONFIG)) return false;
    219a:	movs	r0, #0
    219c:	pop	{r3, r4, r5, pc}
   *
   * \param[in] sdioConfig SDIO configuration.
   * \return true for success or false for failure.
   */
  bool begin(SdioConfig sdioConfig) {
    return cardBegin(sdioConfig) && Vol::begin(m_card);
    219e:	ldr.w	r1, [r5, #1156]	; 0x484
    21a2:	mov	r0, r5
    21a4:	bl	8168 <FsVolume::begin(BlockDeviceInterface*)>
    21a8:	cmp	r0, #0
    21aa:	beq.n	219a <Storage_init()+0x1e>

    // Set Time callback
    FsDateTime::callback = dateTime;
    21ac:	ldr	r3, [pc, #8]	; (21b8 <Storage_init()+0x3c>)
    21ae:	ldr	r2, [pc, #12]	; (21bc <Storage_init()+0x40>)
    21b0:	str	r2, [r3, #0]

    return true;
	}
    21b2:	pop	{r3, r4, r5, pc}
    21b4:	.word	0x1fff8bfc
    21b8:	.word	0x1fff8724
    21bc:	.word	0x000014c5

000021c0 <MTPD::get_buffer()>:
    }

#if defined(__MK66FX1M0__)

//  usb_packet_t *data_buffer_ = NULL;
  void MTPD::get_buffer() {
    21c0:	push	{r4, lr}
    21c2:	mov	r4, r0
    21c4:	ldr	r0, [r4, #4]
    while (!data_buffer_) {
    21c6:	cbnz	r0, 21d0 <MTPD::get_buffer()+0x10>
      data_buffer_ = usb_malloc();
    21c8:	bl	a224 <usb_malloc>
    21cc:	str	r0, [r4, #4]
      if (!data_buffer_) mtp_yield();
    21ce:	cbz	r0, 21d2 <MTPD::get_buffer()+0x12>
    21d0:	pop	{r4, pc}
    21d2:	bl	1714 <mtp_yield()>
    21d6:	b.n	21c4 <MTPD::get_buffer()+0x4>

000021d8 <MTPD::write(char const*, int) [clone .part.2]>:
  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
      write_length_ += len;
    } else {
      int pos = 0;
      while (pos < len) {
    21d8:	cmp	r2, #0
    21da:	ble.n	223a <MTPD::write(char const*, int) [clone .part.2]+0x62>
      data_buffer_ = usb_rx(MTP_RX_ENDPOINT);
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    21dc:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    if (write_get_length_) {
      write_length_ += len;
    } else {
      int pos = 0;
      while (pos < len) {
    21e0:	mov.w	r9, #0
    21e4:	mov	r6, r2
    21e6:	mov	r7, r1
    21e8:	mov	r5, r0
               to_copy);
        data_buffer_->len += to_copy;
        pos += to_copy;
        if (data_buffer_->len == sizeof(data_buffer_->buf)) {
          usb_tx(MTP_TX_ENDPOINT, data_buffer_);
          data_buffer_ = NULL;
    21ea:	mov	r8, r9
    21ec:	b.n	21f2 <MTPD::write(char const*, int) [clone .part.2]+0x1a>
  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
      write_length_ += len;
    } else {
      int pos = 0;
      while (pos < len) {
    21ee:	cmp	r6, r9
    21f0:	ble.n	2236 <MTPD::write(char const*, int) [clone .part.2]+0x5e>
        get_buffer();
    21f2:	mov	r0, r5
    21f4:	bl	21c0 <MTPD::get_buffer()>
        int avail = sizeof(data_buffer_->buf) - data_buffer_->len;
    21f8:	ldr	r3, [r5, #4]
    21fa:	ldrh.w	r0, [r3], #8
    21fe:	rsb	r2, r9, r6
    2202:	rsb	r4, r0, #64	; 0x40
    2206:	cmp	r4, r2
    2208:	it	ge
    220a:	movge	r4, r2
        int to_copy = min(len - pos, avail);
        memcpy(data_buffer_->buf + data_buffer_->len,
               data + pos,
               to_copy);
    220c:	add.w	r1, r7, r9
    2210:	add	r0, r3
    2212:	mov	r2, r4
    2214:	bl	9aa8 <memcpy>
        data_buffer_->len += to_copy;
    2218:	ldr	r1, [r5, #4]
    221a:	ldrh	r3, [r1, #0]
    221c:	add	r3, r4
    221e:	uxth	r3, r3
        pos += to_copy;
        if (data_buffer_->len == sizeof(data_buffer_->buf)) {
    2220:	cmp	r3, #64	; 0x40
        int to_copy = min(len - pos, avail);
        memcpy(data_buffer_->buf + data_buffer_->len,
               data + pos,
               to_copy);
        data_buffer_->len += to_copy;
        pos += to_copy;
    2222:	add	r9, r4
        int avail = sizeof(data_buffer_->buf) - data_buffer_->len;
        int to_copy = min(len - pos, avail);
        memcpy(data_buffer_->buf + data_buffer_->len,
               data + pos,
               to_copy);
        data_buffer_->len += to_copy;
    2224:	strh	r3, [r1, #0]
        pos += to_copy;
        if (data_buffer_->len == sizeof(data_buffer_->buf)) {
    2226:	bne.n	21ee <MTPD::write(char const*, int) [clone .part.2]+0x16>
          usb_tx(MTP_TX_ENDPOINT, data_buffer_);
    2228:	movs	r0, #4
    222a:	bl	a420 <usb_tx>
  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
      write_length_ += len;
    } else {
      int pos = 0;
      while (pos < len) {
    222e:	cmp	r6, r9
               to_copy);
        data_buffer_->len += to_copy;
        pos += to_copy;
        if (data_buffer_->len == sizeof(data_buffer_->buf)) {
          usb_tx(MTP_TX_ENDPOINT, data_buffer_);
          data_buffer_ = NULL;
    2230:	str.w	r8, [r5, #4]
  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
      write_length_ += len;
    } else {
      int pos = 0;
      while (pos < len) {
    2234:	bgt.n	21f2 <MTPD::write(char const*, int) [clone .part.2]+0x1a>
    2236:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    223a:	bx	lr

0000223c <MTPD::writestring(char const*)>:
  void MTPD::write8 (uint8_t  x) { write((char*)&x, sizeof(x)); }
  void MTPD::write16(uint16_t x) { write((char*)&x, sizeof(x)); }
  void MTPD::write32(uint32_t x) { write((char*)&x, sizeof(x)); }
  void MTPD::write64(uint64_t x) { write((char*)&x, sizeof(x)); }

  void MTPD::writestring(const char* str) {
    223c:	push	{r4, r5, lr}
    if (*str) 
    223e:	ldrb	r3, [r1, #0]
  void MTPD::write8 (uint8_t  x) { write((char*)&x, sizeof(x)); }
  void MTPD::write16(uint16_t x) { write((char*)&x, sizeof(x)); }
  void MTPD::write32(uint32_t x) { write((char*)&x, sizeof(x)); }
  void MTPD::write64(uint64_t x) { write((char*)&x, sizeof(x)); }

  void MTPD::writestring(const char* str) {
    2240:	sub	sp, #12
    2242:	mov	r4, r0
    if (*str) 
    2244:	cbz	r3, 22a0 <MTPD::writestring(char const*)+0x64>
    { write8(strlen(str) + 1);
    2246:	mov	r0, r1
    2248:	mov	r5, r1
    224a:	bl	cf40 <strlen>
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    224e:	ldrb	r1, [r4, #8]
    2250:	adds	r0, #1
    2252:	strb.w	r0, [sp, #3]
    2256:	cbz	r1, 22b2 <MTPD::writestring(char const*)+0x76>
      write_length_ += len;
    2258:	ldr	r3, [r4, #12]
    225a:	adds	r3, #1
    225c:	str	r3, [r4, #12]
  void MTPD::write64(uint64_t x) { write((char*)&x, sizeof(x)); }

  void MTPD::writestring(const char* str) {
    if (*str) 
    { write8(strlen(str) + 1);
      while (*str) {  write16(*str);  ++str;  } write16(0);
    225e:	ldrb	r2, [r5, #0]
    2260:	cbnz	r2, 2270 <MTPD::writestring(char const*)+0x34>
    2262:	b.n	2298 <MTPD::writestring(char const*)+0x5c>
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
      write_length_ += len;
    2264:	ldr	r3, [r4, #12]
    2266:	adds	r3, #2
    2268:	str	r3, [r4, #12]
  void MTPD::write64(uint64_t x) { write((char*)&x, sizeof(x)); }

  void MTPD::writestring(const char* str) {
    if (*str) 
    { write8(strlen(str) + 1);
      while (*str) {  write16(*str);  ++str;  } write16(0);
    226a:	ldrb.w	r2, [r5, #1]!
    226e:	cbz	r2, 228e <MTPD::writestring(char const*)+0x52>
    2270:	strh.w	r2, [sp, #6]
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    2274:	cmp	r1, #0
    2276:	bne.n	2264 <MTPD::writestring(char const*)+0x28>
    2278:	movs	r2, #2
    227a:	add.w	r1, sp, #6
    227e:	mov	r0, r4
    2280:	bl	21d8 <MTPD::write(char const*, int) [clone .part.2]>
  void MTPD::write64(uint64_t x) { write((char*)&x, sizeof(x)); }

  void MTPD::writestring(const char* str) {
    if (*str) 
    { write8(strlen(str) + 1);
      while (*str) {  write16(*str);  ++str;  } write16(0);
    2284:	ldrb.w	r2, [r5, #1]!
    2288:	ldrb	r1, [r4, #8]
    228a:	cmp	r2, #0
    228c:	bne.n	2270 <MTPD::writestring(char const*)+0x34>
    228e:	movs	r3, #0
    2290:	strh.w	r3, [sp, #4]
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    2294:	cbz	r1, 22d6 <MTPD::writestring(char const*)+0x9a>
    2296:	ldr	r3, [r4, #12]
      write_length_ += len;
    2298:	adds	r3, #2
    229a:	str	r3, [r4, #12]
    { write8(strlen(str) + 1);
      while (*str) {  write16(*str);  ++str;  } write16(0);
    } else 
    { write8(0);
    }
  }
    229c:	add	sp, #12
    229e:	pop	{r4, r5, pc}
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    22a0:	ldrb	r2, [r0, #8]
    22a2:	strb.w	r3, [sp, #2]
    22a6:	cbz	r2, 22c8 <MTPD::writestring(char const*)+0x8c>
      write_length_ += len;
    22a8:	ldr	r3, [r0, #12]
    22aa:	adds	r3, #1
    22ac:	str	r3, [r0, #12]
    { write8(strlen(str) + 1);
      while (*str) {  write16(*str);  ++str;  } write16(0);
    } else 
    { write8(0);
    }
  }
    22ae:	add	sp, #12
    22b0:	pop	{r4, r5, pc}
    22b2:	movs	r2, #1
    22b4:	add.w	r1, sp, #3
    22b8:	mov	r0, r4
    22ba:	bl	21d8 <MTPD::write(char const*, int) [clone .part.2]>
  void MTPD::write64(uint64_t x) { write((char*)&x, sizeof(x)); }

  void MTPD::writestring(const char* str) {
    if (*str) 
    { write8(strlen(str) + 1);
      while (*str) {  write16(*str);  ++str;  } write16(0);
    22be:	ldrb	r2, [r5, #0]
    22c0:	ldrb	r1, [r4, #8]
    22c2:	cmp	r2, #0
    22c4:	bne.n	2270 <MTPD::writestring(char const*)+0x34>
    22c6:	b.n	228e <MTPD::writestring(char const*)+0x52>
    22c8:	movs	r2, #1
    22ca:	add.w	r1, sp, #2
    22ce:	bl	21d8 <MTPD::write(char const*, int) [clone .part.2]>
    } else 
    { write8(0);
    }
  }
    22d2:	add	sp, #12
    22d4:	pop	{r4, r5, pc}
    22d6:	mov	r0, r4
    22d8:	movs	r2, #2
    22da:	add	r1, sp, #4
    22dc:	bl	21d8 <MTPD::write(char const*, int) [clone .part.2]>
    22e0:	add	sp, #12
    22e2:	pop	{r4, r5, pc}

000022e4 <MTPD::GetDevicePropDesc(unsigned long) [clone .part.4]>:
        writestring("Teensy");
        break;
    }
  }

  void MTPD::GetDevicePropDesc(uint32_t prop) {
    22e4:	push	{r4, r5, r6, lr}
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    22e6:	ldrb	r3, [r0, #8]
        writestring("Teensy");
        break;
    }
  }

  void MTPD::GetDevicePropDesc(uint32_t prop) {
    22e8:	sub	sp, #8
    22ea:	mov	r4, r0
    22ec:	mov	r5, r1
    22ee:	strh.w	r1, [sp, #4]
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    22f2:	cbz	r3, 232c <MTPD::GetDevicePropDesc(unsigned long) [clone .part.4]+0x48>
      write_length_ += len;
    22f4:	ldr	r3, [r0, #12]
    22f6:	movw	r2, #65535	; 0xffff
    22fa:	adds	r3, #2
    22fc:	str	r3, [r0, #12]
    22fe:	strh.w	r2, [sp, #6]
    2302:	adds	r3, #2
    2304:	movs	r2, #0
    2306:	str	r3, [r4, #12]
    2308:	strb.w	r2, [sp, #2]
    230c:	adds	r3, #1
    230e:	str	r3, [r4, #12]
      data_buffer_ = NULL;
    }
  }
*/
  void MTPD::GetDevicePropValue(uint32_t prop) {
    switch (prop) {
    2310:	movw	r3, #54274	; 0xd402
    2314:	cmp	r5, r3
    2316:	beq.n	2368 <MTPD::GetDevicePropDesc(unsigned long) [clone .part.4]+0x84>
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    2318:	ldrb	r3, [r4, #8]
    231a:	movs	r2, #0
    231c:	strb.w	r2, [sp, #3]
    2320:	cbz	r3, 2384 <MTPD::GetDevicePropDesc(unsigned long) [clone .part.4]+0xa0>
      write_length_ += len;
    2322:	ldr	r3, [r4, #12]
    2324:	adds	r3, #1
    2326:	str	r3, [r4, #12]
        write8(0);       // read-only
        GetDevicePropValue(prop);
        GetDevicePropValue(prop);
        write8(0);       // no form
    }
  }
    2328:	add	sp, #8
    232a:	pop	{r4, r5, r6, pc}
    232c:	movs	r2, #2
    232e:	add	r1, sp, #4
    2330:	bl	21d8 <MTPD::write(char const*, int) [clone .part.2]>
    2334:	ldrb	r6, [r4, #8]
    2336:	movw	r3, #65535	; 0xffff
    233a:	strh.w	r3, [sp, #6]
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    233e:	cbnz	r6, 2394 <MTPD::GetDevicePropDesc(unsigned long) [clone .part.4]+0xb0>
    2340:	movs	r2, #2
    2342:	add.w	r1, sp, #6
    2346:	mov	r0, r4
    2348:	bl	21d8 <MTPD::write(char const*, int) [clone .part.2]>
    234c:	ldrb	r3, [r4, #8]
    234e:	strb.w	r6, [sp, #2]
    2352:	cbnz	r3, 2398 <MTPD::GetDevicePropDesc(unsigned long) [clone .part.4]+0xb4>
    2354:	movs	r2, #1
    2356:	add.w	r1, sp, #2
    235a:	mov	r0, r4
    235c:	bl	21d8 <MTPD::write(char const*, int) [clone .part.2]>
      data_buffer_ = NULL;
    }
  }
*/
  void MTPD::GetDevicePropValue(uint32_t prop) {
    switch (prop) {
    2360:	movw	r3, #54274	; 0xd402
    2364:	cmp	r5, r3
    2366:	bne.n	2318 <MTPD::GetDevicePropDesc(unsigned long) [clone .part.4]+0x34>
      case 0xd402: // friendly name
        // This is the name we'll actually see in the windows explorer.
        // Should probably be configurable.
        writestring("Teensy");
    2368:	ldr	r1, [pc, #48]	; (239c <MTPD::GetDevicePropDesc(unsigned long) [clone .part.4]+0xb8>)
    236a:	mov	r0, r4
    236c:	bl	223c <MTPD::writestring(char const*)>
    2370:	ldr	r1, [pc, #40]	; (239c <MTPD::GetDevicePropDesc(unsigned long) [clone .part.4]+0xb8>)
    2372:	mov	r0, r4
    2374:	bl	223c <MTPD::writestring(char const*)>
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    2378:	ldrb	r3, [r4, #8]
    237a:	movs	r2, #0
    237c:	strb.w	r2, [sp, #3]
    2380:	cmp	r3, #0
    2382:	bne.n	2322 <MTPD::GetDevicePropDesc(unsigned long) [clone .part.4]+0x3e>
    2384:	mov	r0, r4
    2386:	movs	r2, #1
    2388:	add.w	r1, sp, #3
    238c:	bl	21d8 <MTPD::write(char const*, int) [clone .part.2]>
        write8(0);       // read-only
        GetDevicePropValue(prop);
        GetDevicePropValue(prop);
        write8(0);       // no form
    }
  }
    2390:	add	sp, #8
    2392:	pop	{r4, r5, r6, pc}
    2394:	ldr	r3, [r4, #12]
    2396:	b.n	2302 <MTPD::GetDevicePropDesc(unsigned long) [clone .part.4]+0x1e>
    2398:	ldr	r3, [r4, #12]
    239a:	b.n	230c <MTPD::GetDevicePropDesc(unsigned long) [clone .part.4]+0x28>
    239c:	.word	0x00010570

000023a0 <MTPD::WriteDescriptor()>:
    } else 
    { write8(0);
    }
  }

  void MTPD::WriteDescriptor() {
    23a0:	push	{r4, r5, r6, r7, lr}
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    23a2:	ldrb	r3, [r0, #8]
    } else 
    { write8(0);
    }
  }

  void MTPD::WriteDescriptor() {
    23a4:	sub	sp, #44	; 0x2c
    23a6:	movs	r5, #100	; 0x64
    23a8:	mov	r4, r0
    23aa:	strh.w	r5, [sp, #6]
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    23ae:	cmp	r3, #0
    23b0:	beq.n	2492 <MTPD::WriteDescriptor()+0xf2>
      write_length_ += len;
    23b2:	ldr	r3, [r0, #12]
    23b4:	movs	r2, #6
    23b6:	adds	r3, #2
    23b8:	str	r3, [r0, #12]
    23ba:	str	r2, [sp, #20]
    23bc:	adds	r3, #4
    23be:	movs	r2, #100	; 0x64
    23c0:	str	r3, [r4, #12]
    23c2:	strh.w	r2, [sp, #4]
    23c6:	adds	r3, #2
    23c8:	str	r3, [r4, #12]
  void MTPD::WriteDescriptor() {
    write16(100);  // MTP version
    write32(6);    // MTP extension
//    write32(0xFFFFFFFFUL);    // MTP extension
    write16(100);  // MTP version
    writestring("microsoft.com: 1.0;");
    23ca:	ldr	r1, [pc, #464]	; (259c <MTPD::WriteDescriptor()+0x1fc>)
    23cc:	mov	r0, r4
    23ce:	bl	223c <MTPD::writestring(char const*)>
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    23d2:	ldrb	r3, [r4, #8]
    23d4:	movs	r2, #0
    23d6:	strh.w	r2, [sp, #2]
    23da:	cmp	r3, #0
    23dc:	beq.w	2554 <MTPD::WriteDescriptor()+0x1b4>
      write_length_ += len;
    23e0:	ldr	r3, [r4, #12]
    23e2:	movs	r2, #18
    23e4:	adds	r3, #2
    23e6:	str	r3, [r4, #12]
    23e8:	str	r2, [sp, #16]
    23ea:	adds	r3, #4
    23ec:	str	r3, [r4, #12]
    23ee:	movs	r6, #1
    23f0:	ldr	r5, [pc, #428]	; (25a0 <MTPD::WriteDescriptor()+0x200>)
    23f2:	movw	r3, #4097	; 0x1001
    23f6:	add.w	r7, r5, #34	; 0x22
    23fa:	b.n	240c <MTPD::WriteDescriptor()+0x6c>
    23fc:	ldr	r3, [r4, #12]
    writestring("microsoft.com: 1.0;");
    write16(0);    // functional mode

    // Supported operations (array of uint16)
      write32(supported_op_num);
      for(int ii=0; ii<supported_op_num;ii++) write16(supported_op[ii]);
    23fe:	cmp	r7, r5
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
      write_length_ += len;
    2400:	add.w	r3, r3, #2
    2404:	str	r3, [r4, #12]
    writestring("microsoft.com: 1.0;");
    write16(0);    // functional mode

    // Supported operations (array of uint16)
      write32(supported_op_num);
      for(int ii=0; ii<supported_op_num;ii++) write16(supported_op[ii]);
    2406:	beq.n	2424 <MTPD::WriteDescriptor()+0x84>
    2408:	ldrh.w	r3, [r5, #2]!
    240c:	strh.w	r3, [sp, #8]
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    2410:	cmp	r6, #0
    2412:	bne.n	23fc <MTPD::WriteDescriptor()+0x5c>
    2414:	movs	r2, #2
    2416:	add	r1, sp, #8
    2418:	mov	r0, r4
    241a:	bl	21d8 <MTPD::write(char const*, int) [clone .part.2]>
    writestring("microsoft.com: 1.0;");
    write16(0);    // functional mode

    // Supported operations (array of uint16)
      write32(supported_op_num);
      for(int ii=0; ii<supported_op_num;ii++) write16(supported_op[ii]);
    241e:	cmp	r7, r5
    2420:	ldrb	r6, [r4, #8]
    2422:	bne.n	2408 <MTPD::WriteDescriptor()+0x68>
    2424:	movs	r3, #0
    2426:	str	r3, [sp, #36]	; 0x24
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    2428:	cmp	r6, #0
    242a:	beq.n	24c6 <MTPD::WriteDescriptor()+0x126>
      write_length_ += len;
    242c:	ldr	r3, [r4, #12]
    242e:	movs	r2, #1
    2430:	adds	r3, #4
    2432:	str	r3, [r4, #12]
    2434:	str	r2, [sp, #32]
    2436:	adds	r3, #4
    2438:	movw	r2, #54274	; 0xd402
    243c:	str	r3, [r4, #12]
    243e:	strh.w	r2, [sp, #14]
    2442:	adds	r3, #2
    2444:	movs	r2, #0
    2446:	str	r3, [r4, #12]
    2448:	str	r2, [sp, #28]
    244a:	adds	r3, #4
    244c:	movs	r2, #2
    244e:	str	r3, [r4, #12]
    2450:	str	r2, [sp, #24]
    2452:	adds	r3, #4
    2454:	mov.w	r2, #12288	; 0x3000
    2458:	str	r3, [r4, #12]
    245a:	strh.w	r2, [sp, #12]
    245e:	adds	r3, #2
    2460:	movw	r2, #12289	; 0x3001
    2464:	str	r3, [r4, #12]
    2466:	strh.w	r2, [sp, #10]
    246a:	adds	r3, #2
    246c:	str	r3, [r4, #12]

    write32(2);       // Playback formats (array of uint16)
    write16(0x3000);  // Undefined format
    write16(0x3001);  // Folders (associations)

    writestring("PJRC");     // Manufacturer
    246e:	mov	r0, r4
    2470:	ldr	r1, [pc, #304]	; (25a4 <MTPD::WriteDescriptor()+0x204>)
    2472:	bl	223c <MTPD::writestring(char const*)>
    writestring("Teensy");   // Model
    2476:	mov	r0, r4
    2478:	ldr	r1, [pc, #300]	; (25a8 <MTPD::WriteDescriptor()+0x208>)
    247a:	bl	223c <MTPD::writestring(char const*)>
    writestring("1.0");      // version
    247e:	mov	r0, r4
    2480:	ldr	r1, [pc, #296]	; (25ac <MTPD::WriteDescriptor()+0x20c>)
    2482:	bl	223c <MTPD::writestring(char const*)>
    writestring("???");      // serial
    2486:	mov	r0, r4
    2488:	ldr	r1, [pc, #292]	; (25b0 <MTPD::WriteDescriptor()+0x210>)
    248a:	bl	223c <MTPD::writestring(char const*)>
  }
    248e:	add	sp, #44	; 0x2c
    2490:	pop	{r4, r5, r6, r7, pc}
    2492:	movs	r2, #2
    2494:	add.w	r1, sp, #6
    2498:	bl	21d8 <MTPD::write(char const*, int) [clone .part.2]>
    249c:	ldrb	r3, [r4, #8]
    249e:	movs	r2, #6
    24a0:	str	r2, [sp, #20]
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    24a2:	cmp	r3, #0
    24a4:	bne.n	2582 <MTPD::WriteDescriptor()+0x1e2>
    24a6:	movs	r2, #4
    24a8:	add	r1, sp, #20
    24aa:	mov	r0, r4
    24ac:	bl	21d8 <MTPD::write(char const*, int) [clone .part.2]>
    24b0:	ldrb	r3, [r4, #8]
    24b2:	strh.w	r5, [sp, #4]
    24b6:	cmp	r3, #0
    24b8:	bne.n	2586 <MTPD::WriteDescriptor()+0x1e6>
    24ba:	movs	r2, #2
    24bc:	add	r1, sp, #4
    24be:	mov	r0, r4
    24c0:	bl	21d8 <MTPD::write(char const*, int) [clone .part.2]>
    24c4:	b.n	23ca <MTPD::WriteDescriptor()+0x2a>
    24c6:	movs	r2, #4
    24c8:	add	r1, sp, #36	; 0x24
    24ca:	mov	r0, r4
    24cc:	bl	21d8 <MTPD::write(char const*, int) [clone .part.2]>
    24d0:	ldrb	r3, [r4, #8]
    24d2:	movs	r2, #1
    24d4:	str	r2, [sp, #32]
    24d6:	cmp	r3, #0
    24d8:	bne.n	258a <MTPD::WriteDescriptor()+0x1ea>
    24da:	movs	r2, #4
    24dc:	add	r1, sp, #32
    24de:	mov	r0, r4
    24e0:	bl	21d8 <MTPD::write(char const*, int) [clone .part.2]>
    24e4:	ldrb	r3, [r4, #8]
    24e6:	movw	r2, #54274	; 0xd402
    24ea:	strh.w	r2, [sp, #14]
    24ee:	cmp	r3, #0
    24f0:	bne.n	258e <MTPD::WriteDescriptor()+0x1ee>
    24f2:	movs	r2, #2
    24f4:	add.w	r1, sp, #14
    24f8:	mov	r0, r4
    24fa:	bl	21d8 <MTPD::write(char const*, int) [clone .part.2]>
    24fe:	ldrb	r3, [r4, #8]
    2500:	str	r6, [sp, #28]
    2502:	cmp	r3, #0
    2504:	bne.n	2592 <MTPD::WriteDescriptor()+0x1f2>
    2506:	movs	r2, #4
    2508:	add	r1, sp, #28
    250a:	mov	r0, r4
    250c:	bl	21d8 <MTPD::write(char const*, int) [clone .part.2]>
    2510:	ldrb	r3, [r4, #8]
    2512:	movs	r5, #2
    2514:	str	r5, [sp, #24]
    2516:	cmp	r3, #0
    2518:	bne.n	2596 <MTPD::WriteDescriptor()+0x1f6>
    251a:	movs	r2, #4
    251c:	add	r1, sp, #24
    251e:	mov	r0, r4
    2520:	bl	21d8 <MTPD::write(char const*, int) [clone .part.2]>
    2524:	ldrb	r3, [r4, #8]
    2526:	mov.w	r2, #12288	; 0x3000
    252a:	strh.w	r2, [sp, #12]
    252e:	cbnz	r3, 257a <MTPD::WriteDescriptor()+0x1da>
    2530:	mov	r2, r5
    2532:	add	r1, sp, #12
    2534:	mov	r0, r4
    2536:	bl	21d8 <MTPD::write(char const*, int) [clone .part.2]>
    253a:	ldrb	r3, [r4, #8]
    253c:	movw	r2, #12289	; 0x3001
    2540:	strh.w	r2, [sp, #10]
    2544:	cbnz	r3, 2576 <MTPD::WriteDescriptor()+0x1d6>
    2546:	mov	r2, r5
    2548:	add.w	r1, sp, #10
    254c:	mov	r0, r4
    254e:	bl	21d8 <MTPD::write(char const*, int) [clone .part.2]>
    2552:	b.n	246e <MTPD::WriteDescriptor()+0xce>
    2554:	movs	r2, #2
    2556:	add.w	r1, sp, r2
    255a:	mov	r0, r4
    255c:	bl	21d8 <MTPD::write(char const*, int) [clone .part.2]>
    2560:	ldrb	r3, [r4, #8]
    2562:	movs	r2, #18
    2564:	str	r2, [sp, #16]
    2566:	cbnz	r3, 257e <MTPD::WriteDescriptor()+0x1de>
    2568:	movs	r2, #4
    256a:	add	r1, sp, #16
    256c:	mov	r0, r4
    256e:	bl	21d8 <MTPD::write(char const*, int) [clone .part.2]>
    2572:	ldrb	r6, [r4, #8]
    2574:	b.n	23f0 <MTPD::WriteDescriptor()+0x50>
    2576:	ldr	r3, [r4, #12]
    2578:	b.n	246a <MTPD::WriteDescriptor()+0xca>
    257a:	ldr	r3, [r4, #12]
    257c:	b.n	245e <MTPD::WriteDescriptor()+0xbe>
    257e:	ldr	r3, [r4, #12]
    2580:	b.n	23ea <MTPD::WriteDescriptor()+0x4a>
    2582:	ldr	r3, [r4, #12]
    2584:	b.n	23bc <MTPD::WriteDescriptor()+0x1c>
    2586:	ldr	r3, [r4, #12]
    2588:	b.n	23c6 <MTPD::WriteDescriptor()+0x26>
    258a:	ldr	r3, [r4, #12]
    258c:	b.n	2436 <MTPD::WriteDescriptor()+0x96>
    258e:	ldr	r3, [r4, #12]
    2590:	b.n	2442 <MTPD::WriteDescriptor()+0xa2>
    2592:	ldr	r3, [r4, #12]
    2594:	b.n	244a <MTPD::WriteDescriptor()+0xaa>
    2596:	ldr	r3, [r4, #12]
    2598:	b.n	2452 <MTPD::WriteDescriptor()+0xb2>
    259a:	nop
    259c:	.word	0x00010578
    25a0:	.word	0x00010538
    25a4:	.word	0x0001058c
    25a8:	.word	0x00010570
    25ac:	.word	0x00010594
    25b0:	.word	0x00010598

000025b4 <MTPD::WriteStorageIDs()>:
    writestring("Teensy");   // Model
    writestring("1.0");      // version
    writestring("???");      // serial
  }

  void MTPD::WriteStorageIDs() {
    25b4:	push	{r4, r5, lr}
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    25b6:	ldrb	r3, [r0, #8]
    writestring("Teensy");   // Model
    writestring("1.0");      // version
    writestring("???");      // serial
  }

  void MTPD::WriteStorageIDs() {
    25b8:	sub	sp, #12
    25ba:	movs	r5, #1
    25bc:	mov	r4, r0
    25be:	str	r5, [sp, #4]
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    25c0:	cbz	r3, 25d0 <MTPD::WriteStorageIDs()+0x1c>
      write_length_ += len;
    25c2:	ldr	r3, [r0, #12]
    25c4:	adds	r3, #4
    25c6:	str	r3, [r0, #12]
    25c8:	adds	r3, #4
    25ca:	str	r3, [r4, #12]
  }

  void MTPD::WriteStorageIDs() {
    write32(1); // 1 entry
    write32(1); // 1 storage
  }
    25cc:	add	sp, #12
    25ce:	pop	{r4, r5, pc}
    25d0:	movs	r2, #4
    25d2:	add.w	r1, sp, r2
    25d6:	bl	21d8 <MTPD::write(char const*, int) [clone .part.2]>
    25da:	ldrb	r3, [r4, #8]
    25dc:	str	r5, [sp, #0]
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    25de:	cbnz	r3, 25ee <MTPD::WriteStorageIDs()+0x3a>
    25e0:	mov	r0, r4
    25e2:	movs	r2, #4
    25e4:	mov	r1, sp
    25e6:	bl	21d8 <MTPD::write(char const*, int) [clone .part.2]>
  }

  void MTPD::WriteStorageIDs() {
    write32(1); // 1 entry
    write32(1); // 1 storage
  }
    25ea:	add	sp, #12
    25ec:	pop	{r4, r5, pc}
    25ee:	ldr	r3, [r4, #12]
    25f0:	b.n	25c8 <MTPD::WriteStorageIDs()+0x14>
    25f2:	nop

000025f4 <MTPD::GetObjectHandles(unsigned long, unsigned long)>:
    while (storage_->GetNextObjectHandle()) num++;
    return num;
  }

  void MTPD::GetObjectHandles(uint32_t storage, uint32_t parent) 
  {
    25f4:	push	{r4, r5, r6, lr}
    25f6:	mov	r4, r0
    if (write_get_length_) {
    25f8:	ldrb	r5, [r0, #8]
    writestring("");  // volume identifier
  }

  uint32_t MTPD::GetNumObjects(uint32_t storage, uint32_t parent) 
  {
    storage_->StartGetObjectHandles(parent);
    25fa:	ldr	r0, [r0, #0]
    while (storage_->GetNextObjectHandle()) num++;
    return num;
  }

  void MTPD::GetObjectHandles(uint32_t storage, uint32_t parent) 
  {
    25fc:	sub	sp, #8
    25fe:	mov	r6, r2
    writestring("");  // volume identifier
  }

  uint32_t MTPD::GetNumObjects(uint32_t storage, uint32_t parent) 
  {
    storage_->StartGetObjectHandles(parent);
    2600:	ldr	r3, [r0, #0]
    return num;
  }

  void MTPD::GetObjectHandles(uint32_t storage, uint32_t parent) 
  {
    if (write_get_length_) {
    2602:	cbz	r5, 2622 <MTPD::GetObjectHandles(unsigned long, unsigned long)+0x2e>
    writestring("");  // volume identifier
  }

  uint32_t MTPD::GetNumObjects(uint32_t storage, uint32_t parent) 
  {
    storage_->StartGetObjectHandles(parent);
    2604:	mov	r1, r2
    2606:	ldr	r3, [r3, #20]
    2608:	blx	r3
    int num = 0;
    260a:	movs	r5, #0
    while (storage_->GetNextObjectHandle()) num++;
    260c:	ldr	r0, [r4, #0]
    260e:	ldr	r3, [r0, #0]
    2610:	ldr	r3, [r3, #24]
    2612:	blx	r3
    2614:	adds	r5, #1
    2616:	cmp	r0, #0
    2618:	bne.n	260c <MTPD::GetObjectHandles(unsigned long, unsigned long)+0x18>
  void MTPD::GetObjectHandles(uint32_t storage, uint32_t parent) 
  {
    if (write_get_length_) {
      write_length_ = GetNumObjects(storage, parent);
      write_length_++;
      write_length_ *= 4;
    261a:	lsls	r5, r5, #2
    261c:	str	r5, [r4, #12]
      write32(GetNumObjects(storage, parent));
      int handle;
      storage_->StartGetObjectHandles(parent);
      while ((handle = storage_->GetNextObjectHandle())) write32(handle);
    }
  }
    261e:	add	sp, #8
    2620:	pop	{r4, r5, r6, pc}
    writestring("");  // volume identifier
  }

  uint32_t MTPD::GetNumObjects(uint32_t storage, uint32_t parent) 
  {
    storage_->StartGetObjectHandles(parent);
    2622:	ldr	r3, [r3, #20]
    2624:	mov	r1, r2
    2626:	blx	r3
    2628:	b.n	262c <MTPD::GetObjectHandles(unsigned long, unsigned long)+0x38>
    int num = 0;
    while (storage_->GetNextObjectHandle()) num++;
    262a:	adds	r5, #1
    262c:	ldr	r0, [r4, #0]
    262e:	ldr	r3, [r0, #0]
    2630:	ldr	r3, [r3, #24]
    2632:	blx	r3
    2634:	cmp	r0, #0
    2636:	bne.n	262a <MTPD::GetObjectHandles(unsigned long, unsigned long)+0x36>
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    2638:	ldrb	r3, [r4, #8]
    263a:	str	r5, [sp, #4]
    263c:	cbz	r3, 2674 <MTPD::GetObjectHandles(unsigned long, unsigned long)+0x80>
      write_length_ += len;
    263e:	ldr	r3, [r4, #12]
    2640:	adds	r3, #4
    2642:	str	r3, [r4, #12]
      write_length_ *= 4;
    }
    else{
      write32(GetNumObjects(storage, parent));
      int handle;
      storage_->StartGetObjectHandles(parent);
    2644:	ldr	r0, [r4, #0]
    2646:	ldr	r3, [r0, #0]
    2648:	mov	r1, r6
    264a:	ldr	r3, [r3, #20]
    264c:	blx	r3
      while ((handle = storage_->GetNextObjectHandle())) write32(handle);
    264e:	ldr	r0, [r4, #0]
    2650:	ldr	r3, [r0, #0]
    2652:	ldr	r3, [r3, #24]
    2654:	blx	r3
    2656:	cmp	r0, #0
    2658:	beq.n	261e <MTPD::GetObjectHandles(unsigned long, unsigned long)+0x2a>
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    265a:	ldrb	r3, [r4, #8]
    265c:	str	r0, [sp, #0]
    265e:	cbz	r3, 2668 <MTPD::GetObjectHandles(unsigned long, unsigned long)+0x74>
      write_length_ += len;
    2660:	ldr	r3, [r4, #12]
    2662:	adds	r3, #4
    2664:	str	r3, [r4, #12]
    2666:	b.n	264e <MTPD::GetObjectHandles(unsigned long, unsigned long)+0x5a>
    2668:	movs	r2, #4
    266a:	mov	r1, sp
    266c:	mov	r0, r4
    266e:	bl	21d8 <MTPD::write(char const*, int) [clone .part.2]>
    2672:	b.n	264e <MTPD::GetObjectHandles(unsigned long, unsigned long)+0x5a>
    2674:	movs	r2, #4
    2676:	add.w	r1, sp, r2
    267a:	mov	r0, r4
    267c:	bl	21d8 <MTPD::write(char const*, int) [clone .part.2]>
    2680:	b.n	2644 <MTPD::GetObjectHandles(unsigned long, unsigned long)+0x50>
    2682:	nop

00002684 <MTPD::GetObjectInfo(unsigned long)>:
      while ((handle = storage_->GetNextObjectHandle())) write32(handle);
    }
  }
  
  void MTPD::GetObjectInfo(uint32_t handle) 
  {
    2684:	push	{r4, r5, r6, lr}
    2686:	mov	r4, r0
    char filename[256];
    uint32_t size, parent;
    storage_->GetObjectInfo(handle, filename, &size, &parent);
    2688:	ldr	r0, [r0, #0]
      while ((handle = storage_->GetNextObjectHandle())) write32(handle);
    }
  }
  
  void MTPD::GetObjectInfo(uint32_t handle) 
  {
    268a:	sub	sp, #328	; 0x148
    char filename[256];
    uint32_t size, parent;
    storage_->GetObjectInfo(handle, filename, &size, &parent);
    268c:	ldr	r3, [r0, #0]
    268e:	add	r5, sp, #24
    2690:	str	r5, [sp, #0]
    2692:	ldr	r6, [r3, #28]
    2694:	add	r2, sp, #72	; 0x48
    2696:	add	r3, sp, #20
    2698:	blx	r6
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    269a:	ldrb	r3, [r4, #8]
    269c:	movs	r2, #1
    269e:	str	r2, [sp, #28]
    26a0:	cmp	r3, #0
    26a2:	beq.n	2758 <MTPD::GetObjectInfo(unsigned long)+0xd4>
      write_length_ += len;
    26a4:	ldr	r3, [r4, #12]
    char filename[256];
    uint32_t size, parent;
    storage_->GetObjectInfo(handle, filename, &size, &parent);

    write32(1); // storage
    write16(size == 0xFFFFFFFFUL ? 0x3001 : 0x0000); // format
    26a6:	ldr	r2, [sp, #20]
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
      write_length_ += len;
    26a8:	adds	r3, #4
    char filename[256];
    uint32_t size, parent;
    storage_->GetObjectInfo(handle, filename, &size, &parent);

    write32(1); // storage
    write16(size == 0xFFFFFFFFUL ? 0x3001 : 0x0000); // format
    26aa:	adds	r2, #1
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
      write_length_ += len;
    26ac:	str	r3, [r4, #12]
    char filename[256];
    uint32_t size, parent;
    storage_->GetObjectInfo(handle, filename, &size, &parent);

    write32(1); // storage
    write16(size == 0xFFFFFFFFUL ? 0x3001 : 0x0000); // format
    26ae:	beq.w	2888 <MTPD::GetObjectInfo(unsigned long)+0x204>
    26b2:	movs	r2, #0
    26b4:	strh.w	r2, [sp, #16]
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
      write_length_ += len;
    26b8:	adds	r3, #2
    26ba:	movs	r2, #0
    26bc:	str	r3, [r4, #12]
    26be:	strh.w	r2, [sp, #14]
    26c2:	adds	r3, #2
    26c4:	ldr	r2, [sp, #20]
    26c6:	str	r3, [r4, #12]
    26c8:	str	r2, [sp, #60]	; 0x3c
    26ca:	adds	r3, #4
    26cc:	movs	r2, #0
    26ce:	str	r3, [r4, #12]
    26d0:	strh.w	r2, [sp, #12]
    26d4:	adds	r3, #2
    26d6:	movs	r2, #0
    26d8:	str	r3, [r4, #12]
    26da:	str	r2, [sp, #56]	; 0x38
    26dc:	adds	r3, #4
    26de:	movs	r2, #0
    26e0:	str	r3, [r4, #12]
    26e2:	str	r2, [sp, #52]	; 0x34
    26e4:	adds	r3, #4
    26e6:	movs	r2, #0
    26e8:	str	r3, [r4, #12]
    26ea:	str	r2, [sp, #48]	; 0x30
    26ec:	adds	r3, #4
    26ee:	movs	r2, #0
    26f0:	str	r3, [r4, #12]
    26f2:	str	r2, [sp, #44]	; 0x2c
    26f4:	adds	r3, #4
    26f6:	movs	r2, #0
    26f8:	str	r3, [r4, #12]
    26fa:	str	r2, [sp, #40]	; 0x28
    26fc:	adds	r3, #4
    26fe:	movs	r2, #0
    2700:	str	r3, [r4, #12]
    2702:	str	r2, [sp, #36]	; 0x24
    2704:	adds	r3, #4
    2706:	ldr	r2, [r5, #0]
    2708:	str	r3, [r4, #12]
    270a:	str	r2, [sp, #32]
    270c:	ldr	r2, [sp, #20]
    270e:	sub.w	r2, r2, #4294967295
    2712:	clz	r2, r2
    2716:	lsrs	r2, r2, #5
    2718:	adds	r3, #4
    271a:	str	r3, [r4, #12]
    271c:	strh.w	r2, [sp, #18]
    2720:	adds	r3, #2
    2722:	movs	r2, #0
    2724:	str	r3, [r4, #12]
    2726:	str	r2, [sp, #68]	; 0x44
    2728:	adds	r3, #4
    272a:	movs	r2, #0
    272c:	str	r3, [r4, #12]
    272e:	str	r2, [sp, #64]	; 0x40
    2730:	adds	r3, #4
    2732:	str	r3, [r4, #12]
    write32(0); // bit depth
    write32(parent); // parent
    write16(size == 0xFFFFFFFFUL ? 1 : 0); // association type
    write32(0); // association description
    write32(0);  // sequence number
    writestring(filename);
    2734:	add	r1, sp, #72	; 0x48
    2736:	mov	r0, r4
    2738:	bl	223c <MTPD::writestring(char const*)>
    writestring("");  // date created
    273c:	mov	r0, r4
    273e:	ldr	r1, [pc, #396]	; (28cc <MTPD::GetObjectInfo(unsigned long)+0x248>)
    2740:	bl	223c <MTPD::writestring(char const*)>
    writestring("");  // date modified
    2744:	mov	r0, r4
    2746:	ldr	r1, [pc, #388]	; (28cc <MTPD::GetObjectInfo(unsigned long)+0x248>)
    2748:	bl	223c <MTPD::writestring(char const*)>
    writestring("");  // keywords
    274c:	mov	r0, r4
    274e:	ldr	r1, [pc, #380]	; (28cc <MTPD::GetObjectInfo(unsigned long)+0x248>)
    2750:	bl	223c <MTPD::writestring(char const*)>
  }
    2754:	add	sp, #328	; 0x148
    2756:	pop	{r4, r5, r6, pc}
    2758:	add	r1, sp, #28
    275a:	movs	r2, #4
    275c:	mov	r0, r4
    275e:	bl	21d8 <MTPD::write(char const*, int) [clone .part.2]>
    char filename[256];
    uint32_t size, parent;
    storage_->GetObjectInfo(handle, filename, &size, &parent);

    write32(1); // storage
    write16(size == 0xFFFFFFFFUL ? 0x3001 : 0x0000); // format
    2762:	ldr	r3, [sp, #20]
    2764:	ldrb	r6, [r4, #8]
    2766:	adds	r3, #1
    2768:	movw	r3, #12289	; 0x3001
    276c:	it	ne
    276e:	movne	r3, #0
    2770:	strh.w	r3, [sp, #16]
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    2774:	cmp	r6, #0
    2776:	bne.w	289a <MTPD::GetObjectInfo(unsigned long)+0x216>
    277a:	add	r1, sp, #16
    277c:	movs	r2, #2
    277e:	mov	r0, r4
    2780:	bl	21d8 <MTPD::write(char const*, int) [clone .part.2]>
    2784:	ldrb	r3, [r4, #8]
    2786:	strh.w	r6, [sp, #14]
    278a:	cmp	r3, #0
    278c:	bne.w	289e <MTPD::GetObjectInfo(unsigned long)+0x21a>
    2790:	movs	r2, #2
    2792:	add.w	r1, sp, #14
    2796:	mov	r0, r4
    2798:	bl	21d8 <MTPD::write(char const*, int) [clone .part.2]>
    279c:	ldrb	r3, [r4, #8]
    279e:	ldr	r2, [sp, #20]
    27a0:	str	r2, [sp, #60]	; 0x3c
    27a2:	cmp	r3, #0
    27a4:	bne.n	28a2 <MTPD::GetObjectInfo(unsigned long)+0x21e>
    27a6:	add	r1, sp, #60	; 0x3c
    27a8:	movs	r2, #4
    27aa:	mov	r0, r4
    27ac:	bl	21d8 <MTPD::write(char const*, int) [clone .part.2]>
    27b0:	ldrb	r3, [r4, #8]
    27b2:	strh.w	r6, [sp, #12]
    27b6:	cmp	r3, #0
    27b8:	bne.n	28a6 <MTPD::GetObjectInfo(unsigned long)+0x222>
    27ba:	add	r1, sp, #12
    27bc:	movs	r2, #2
    27be:	mov	r0, r4
    27c0:	bl	21d8 <MTPD::write(char const*, int) [clone .part.2]>
    27c4:	ldrb	r3, [r4, #8]
    27c6:	str	r6, [sp, #56]	; 0x38
    27c8:	cmp	r3, #0
    27ca:	bne.n	28aa <MTPD::GetObjectInfo(unsigned long)+0x226>
    27cc:	add	r1, sp, #56	; 0x38
    27ce:	movs	r2, #4
    27d0:	mov	r0, r4
    27d2:	bl	21d8 <MTPD::write(char const*, int) [clone .part.2]>
    27d6:	ldrb	r3, [r4, #8]
    27d8:	str	r6, [sp, #52]	; 0x34
    27da:	cmp	r3, #0
    27dc:	bne.n	28ae <MTPD::GetObjectInfo(unsigned long)+0x22a>
    27de:	add	r1, sp, #52	; 0x34
    27e0:	movs	r2, #4
    27e2:	mov	r0, r4
    27e4:	bl	21d8 <MTPD::write(char const*, int) [clone .part.2]>
    27e8:	ldrb	r3, [r4, #8]
    27ea:	str	r6, [sp, #48]	; 0x30
    27ec:	cmp	r3, #0
    27ee:	bne.n	28b2 <MTPD::GetObjectInfo(unsigned long)+0x22e>
    27f0:	add	r1, sp, #48	; 0x30
    27f2:	movs	r2, #4
    27f4:	mov	r0, r4
    27f6:	bl	21d8 <MTPD::write(char const*, int) [clone .part.2]>
    27fa:	ldrb	r3, [r4, #8]
    27fc:	str	r6, [sp, #44]	; 0x2c
    27fe:	cmp	r3, #0
    2800:	bne.n	28b6 <MTPD::GetObjectInfo(unsigned long)+0x232>
    2802:	add	r1, sp, #44	; 0x2c
    2804:	movs	r2, #4
    2806:	mov	r0, r4
    2808:	bl	21d8 <MTPD::write(char const*, int) [clone .part.2]>
    280c:	ldrb	r3, [r4, #8]
    280e:	str	r6, [sp, #40]	; 0x28
    2810:	cmp	r3, #0
    2812:	bne.n	28ba <MTPD::GetObjectInfo(unsigned long)+0x236>
    2814:	add	r1, sp, #40	; 0x28
    2816:	movs	r2, #4
    2818:	mov	r0, r4
    281a:	bl	21d8 <MTPD::write(char const*, int) [clone .part.2]>
    281e:	ldrb	r3, [r4, #8]
    2820:	str	r6, [sp, #36]	; 0x24
    2822:	cmp	r3, #0
    2824:	bne.n	28be <MTPD::GetObjectInfo(unsigned long)+0x23a>
    2826:	movs	r2, #4
    2828:	add	r1, sp, #36	; 0x24
    282a:	mov	r0, r4
    282c:	bl	21d8 <MTPD::write(char const*, int) [clone .part.2]>
    2830:	ldrb	r3, [r4, #8]
    2832:	ldr	r2, [r5, #0]
    2834:	str	r2, [sp, #32]
    2836:	cmp	r3, #0
    2838:	bne.n	28c2 <MTPD::GetObjectInfo(unsigned long)+0x23e>
    283a:	add	r1, sp, #32
    283c:	movs	r2, #4
    283e:	mov	r0, r4
    2840:	bl	21d8 <MTPD::write(char const*, int) [clone .part.2]>
    2844:	ldr	r3, [sp, #20]
    2846:	ldrb	r6, [r4, #8]
    2848:	sub.w	r3, r3, #4294967295
    284c:	clz	r3, r3
    2850:	lsrs	r3, r3, #5
    2852:	strh.w	r3, [sp, #18]
    2856:	cmp	r6, #0
    2858:	bne.n	28c6 <MTPD::GetObjectInfo(unsigned long)+0x242>
    285a:	add.w	r1, sp, #18
    285e:	movs	r2, #2
    2860:	mov	r0, r4
    2862:	bl	21d8 <MTPD::write(char const*, int) [clone .part.2]>
    2866:	ldrb	r5, [r4, #8]
    2868:	str	r6, [sp, #68]	; 0x44
    286a:	cbnz	r5, 2896 <MTPD::GetObjectInfo(unsigned long)+0x212>
    286c:	add	r1, sp, #68	; 0x44
    286e:	movs	r2, #4
    2870:	mov	r0, r4
    2872:	bl	21d8 <MTPD::write(char const*, int) [clone .part.2]>
    2876:	ldrb	r3, [r4, #8]
    2878:	str	r5, [sp, #64]	; 0x40
    287a:	cbnz	r3, 2892 <MTPD::GetObjectInfo(unsigned long)+0x20e>
    287c:	add	r1, sp, #64	; 0x40
    287e:	movs	r2, #4
    2880:	mov	r0, r4
    2882:	bl	21d8 <MTPD::write(char const*, int) [clone .part.2]>
    2886:	b.n	2734 <MTPD::GetObjectInfo(unsigned long)+0xb0>
    2888:	movw	r2, #12289	; 0x3001
    288c:	strh.w	r2, [sp, #16]
    2890:	b.n	26b8 <MTPD::GetObjectInfo(unsigned long)+0x34>
    2892:	ldr	r3, [r4, #12]
    2894:	b.n	2730 <MTPD::GetObjectInfo(unsigned long)+0xac>
    2896:	ldr	r3, [r4, #12]
    2898:	b.n	2728 <MTPD::GetObjectInfo(unsigned long)+0xa4>
    289a:	ldr	r3, [r4, #12]
    289c:	b.n	26b8 <MTPD::GetObjectInfo(unsigned long)+0x34>
    289e:	ldr	r3, [r4, #12]
    28a0:	b.n	26c2 <MTPD::GetObjectInfo(unsigned long)+0x3e>
    28a2:	ldr	r3, [r4, #12]
    28a4:	b.n	26ca <MTPD::GetObjectInfo(unsigned long)+0x46>
    28a6:	ldr	r3, [r4, #12]
    28a8:	b.n	26d4 <MTPD::GetObjectInfo(unsigned long)+0x50>
    28aa:	ldr	r3, [r4, #12]
    28ac:	b.n	26dc <MTPD::GetObjectInfo(unsigned long)+0x58>
    28ae:	ldr	r3, [r4, #12]
    28b0:	b.n	26e4 <MTPD::GetObjectInfo(unsigned long)+0x60>
    28b2:	ldr	r3, [r4, #12]
    28b4:	b.n	26ec <MTPD::GetObjectInfo(unsigned long)+0x68>
    28b6:	ldr	r3, [r4, #12]
    28b8:	b.n	26f4 <MTPD::GetObjectInfo(unsigned long)+0x70>
    28ba:	ldr	r3, [r4, #12]
    28bc:	b.n	26fc <MTPD::GetObjectInfo(unsigned long)+0x78>
    28be:	ldr	r3, [r4, #12]
    28c0:	b.n	2704 <MTPD::GetObjectInfo(unsigned long)+0x80>
    28c2:	ldr	r3, [r4, #12]
    28c4:	b.n	270c <MTPD::GetObjectInfo(unsigned long)+0x88>
    28c6:	ldr	r3, [r4, #12]
    28c8:	b.n	2720 <MTPD::GetObjectInfo(unsigned long)+0x9c>
    28ca:	nop
    28cc:	.word	0x00010444

000028d0 <MTPD::getObjectPropsSupported(unsigned long)>:
        write8(0);       // no form
    }
  }

    void MTPD::getObjectPropsSupported(uint32_t p1)
    {
    28d0:	push	{r4, r5, r6, r7, lr}
      write32(propertyListNum);
    28d2:	ldr	r7, [pc, #96]	; (2934 <MTPD::getObjectPropsSupported(unsigned long)+0x64>)
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    28d4:	ldrb	r2, [r0, #8]
    }
  }

    void MTPD::getObjectPropsSupported(uint32_t p1)
    {
      write32(propertyListNum);
    28d6:	ldr	r3, [r7, #0]
        write8(0);       // no form
    }
  }

    void MTPD::getObjectPropsSupported(uint32_t p1)
    {
    28d8:	sub	sp, #12
    28da:	mov	r5, r0
    28dc:	str	r3, [sp, #4]
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    28de:	cbz	r2, 2926 <MTPD::getObjectPropsSupported(unsigned long)+0x56>
      write_length_ += len;
    28e0:	ldr	r2, [r0, #12]
    28e2:	adds	r2, #4
    28e4:	str	r2, [r0, #12]
  }

    void MTPD::getObjectPropsSupported(uint32_t p1)
    {
      write32(propertyListNum);
      for(uint32_t ii=0; ii<propertyListNum;ii++) write16(propertyList[ii]);
    28e6:	cbz	r3, 2922 <MTPD::getObjectPropsSupported(unsigned long)+0x52>
    28e8:	ldr	r6, [pc, #76]	; (2938 <MTPD::getObjectPropsSupported(unsigned long)+0x68>)
    28ea:	movw	r2, #56321	; 0xdc01
    28ee:	movs	r4, #0
    28f0:	b.n	2904 <MTPD::getObjectPropsSupported(unsigned long)+0x34>
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
      write_length_ += len;
    28f2:	ldr	r3, [r5, #12]
    28f4:	adds	r3, #2
    28f6:	str	r3, [r5, #12]
  }

    void MTPD::getObjectPropsSupported(uint32_t p1)
    {
      write32(propertyListNum);
      for(uint32_t ii=0; ii<propertyListNum;ii++) write16(propertyList[ii]);
    28f8:	ldr	r3, [r7, #0]
    28fa:	adds	r4, #1
    28fc:	cmp	r3, r4
    28fe:	bls.n	2922 <MTPD::getObjectPropsSupported(unsigned long)+0x52>
    2900:	ldrh.w	r2, [r6, #2]!
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    2904:	ldrb	r3, [r5, #8]
    2906:	strh.w	r2, [sp, #2]
    290a:	cmp	r3, #0
    290c:	bne.n	28f2 <MTPD::getObjectPropsSupported(unsigned long)+0x22>
    290e:	movs	r2, #2
    2910:	add.w	r1, sp, r2
    2914:	mov	r0, r5
    2916:	bl	21d8 <MTPD::write(char const*, int) [clone .part.2]>
  }

    void MTPD::getObjectPropsSupported(uint32_t p1)
    {
      write32(propertyListNum);
      for(uint32_t ii=0; ii<propertyListNum;ii++) write16(propertyList[ii]);
    291a:	ldr	r3, [r7, #0]
    291c:	adds	r4, #1
    291e:	cmp	r3, r4
    2920:	bhi.n	2900 <MTPD::getObjectPropsSupported(unsigned long)+0x30>
    }
    2922:	add	sp, #12
    2924:	pop	{r4, r5, r6, r7, pc}
    2926:	movs	r2, #4
    2928:	add.w	r1, sp, r2
    292c:	bl	21d8 <MTPD::write(char const*, int) [clone .part.2]>
    2930:	ldr	r3, [r7, #0]
    2932:	b.n	28e6 <MTPD::getObjectPropsSupported(unsigned long)+0x16>
    2934:	.word	0x1fff098c
    2938:	.word	0x0001055c

0000293c <MTPD::getObjectPropValue(unsigned long, unsigned long)>:
          break;
      }
    }

    void MTPD::getObjectPropValue(uint32_t p1, uint32_t p2)
    { char name[128];
    293c:	push	{r4, r5, r6, r7, lr}
    293e:	mov	r5, r0
      uint32_t dir;
      uint32_t size;
      uint32_t parent;
      storage_->GetObjectInfo(p1,name,&size,&parent);
    2940:	ldr	r0, [r0, #0]
          break;
      }
    }

    void MTPD::getObjectPropValue(uint32_t p1, uint32_t p2)
    { char name[128];
    2942:	sub	sp, #188	; 0xbc
      uint32_t dir;
      uint32_t size;
      uint32_t parent;
      storage_->GetObjectInfo(p1,name,&size,&parent);
    2944:	ldr	r3, [r0, #0]
    2946:	add	r4, sp, #20
    2948:	str	r4, [sp, #0]
    294a:	ldr	r6, [r3, #28]
          break;
      }
    }

    void MTPD::getObjectPropValue(uint32_t p1, uint32_t p2)
    { char name[128];
    294c:	mov	r4, r2
      uint32_t dir;
      uint32_t size;
      uint32_t parent;
      storage_->GetObjectInfo(p1,name,&size,&parent);
    294e:	add	r3, sp, #16
    2950:	add	r2, sp, #56	; 0x38
          break;
      }
    }

    void MTPD::getObjectPropValue(uint32_t p1, uint32_t p2)
    { char name[128];
    2952:	mov	r7, r1
      uint32_t dir;
      uint32_t size;
      uint32_t parent;
      storage_->GetObjectInfo(p1,name,&size,&parent);
    2954:	blx	r6
      dir = size == 0xFFFFFFFFUL;
      switch(p2)
    2956:	sub.w	r2, r4, #56320	; 0xdc00
    295a:	subs	r2, #1
    { char name[128];
      uint32_t dir;
      uint32_t size;
      uint32_t parent;
      storage_->GetObjectInfo(p1,name,&size,&parent);
      dir = size == 0xFFFFFFFFUL;
    295c:	ldr	r3, [sp, #16]
      switch(p2)
    295e:	cmp	r2, #67	; 0x43
    2960:	bhi.n	29c4 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x88>
    2962:	tbb	[pc, r2]
    2966:	.short	0x463d
    2968:	.word	0x2f2f6e61
    296c:	.word	0x2f313137
    2970:	.word	0x2f2f2f56
    2974:	.word	0x2f2f2f2f
    2978:	.word	0x2f2f2f2f
    297c:	.word	0x2f2f2f2f
    2980:	.word	0x2f2f2f2f
    2984:	.word	0x2f2f2f2f
    2988:	.word	0x2f2f2f2f
    298c:	.word	0x2f2f2f2f
    2990:	.word	0x2f2f2f2f
    2994:	.word	0x2f2f2f2f
    2998:	.word	0x2f2f2f2f
    299c:	.word	0x2f2f2f2f
    29a0:	.word	0x2f2f2f2f
    29a4:	.word	0x2f222f2f
    29a8:	.short	0x372f
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    29aa:	ldrb	r3, [r5, #8]
    29ac:	str	r7, [sp, #52]	; 0x34
    29ae:	cmp	r3, #0
    29b0:	beq.n	2a52 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x116>
      write_length_ += len;
    29b2:	ldr	r3, [r5, #12]
    29b4:	adds	r3, #4
    29b6:	str	r3, [r5, #12]
    29b8:	adds	r3, #4
    29ba:	str	r3, [r5, #12]
    29bc:	adds	r3, #4
    29be:	str	r3, [r5, #12]
    29c0:	adds	r3, #4
    29c2:	str	r3, [r5, #12]
          writestring(name);
          break;
        default:
          break;
      }
    }
    29c4:	add	sp, #188	; 0xbc
    29c6:	pop	{r4, r5, r6, r7, pc}
          break;
        case MTP_PROPERTY_DATE_CREATED:       //0xDC08:
          writestring("");
          break;
        case MTP_PROPERTY_DATE_MODIFIED:      //0xDC09:
          writestring("");
    29c8:	mov	r0, r5
    29ca:	ldr	r1, [pc, #264]	; (2ad4 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x198>)
    29cc:	bl	223c <MTPD::writestring(char const*)>
          writestring(name);
          break;
        default:
          break;
      }
    }
    29d0:	add	sp, #188	; 0xbc
    29d2:	pop	{r4, r5, r6, r7, pc}
          write32(parent);
          write32(1);
          write32(0);
          break;
        case MTP_PROPERTY_NAME:               //0xDC44:
          writestring(name);
    29d4:	add	r1, sp, #56	; 0x38
    29d6:	mov	r0, r5
    29d8:	bl	223c <MTPD::writestring(char const*)>
          break;
        default:
          break;
      }
    }
    29dc:	add	sp, #188	; 0xbc
    29de:	pop	{r4, r5, r6, r7, pc}
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    29e0:	ldrb	r3, [r5, #8]
    29e2:	str	r7, [sp, #24]
    29e4:	cmp	r3, #0
    29e6:	beq.n	2aa0 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x164>
      write_length_ += len;
    29e8:	ldr	r3, [r5, #12]
    29ea:	adds	r3, #4
    29ec:	str	r3, [r5, #12]
          writestring(name);
          break;
        default:
          break;
      }
    }
    29ee:	add	sp, #188	; 0xbc
    29f0:	pop	{r4, r5, r6, r7, pc}
      {
        case MTP_PROPERTY_STORAGE_ID:         //0xDC01:
          write32(p1);
          break;
        case MTP_PROPERTY_OBJECT_FORMAT:      //0xDC02:
          write16(dir?0x3001:0x3000);
    29f2:	adds	r3, #1
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    29f4:	ldrb	r2, [r5, #8]
      {
        case MTP_PROPERTY_STORAGE_ID:         //0xDC01:
          write32(p1);
          break;
        case MTP_PROPERTY_OBJECT_FORMAT:      //0xDC02:
          write16(dir?0x3001:0x3000);
    29f6:	movw	r3, #12289	; 0x3001
    29fa:	it	ne
    29fc:	movne.w	r3, #12288	; 0x3000
    2a00:	strh.w	r3, [sp, #12]
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    2a04:	cmp	r2, #0
    2a06:	beq.n	2a94 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x158>
      write_length_ += len;
    2a08:	ldr	r3, [r5, #12]
    2a0a:	adds	r3, #2
    2a0c:	str	r3, [r5, #12]
          writestring(name);
          break;
        default:
          break;
      }
    }
    2a0e:	add	sp, #188	; 0xbc
    2a10:	pop	{r4, r5, r6, r7, pc}
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    2a12:	ldrb	r3, [r5, #8]
    2a14:	ldr	r2, [sp, #20]
    2a16:	str	r2, [sp, #36]	; 0x24
    2a18:	cmp	r3, #0
    2a1a:	bne.n	29e8 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xac>
    2a1c:	mov	r0, r5
    2a1e:	movs	r2, #4
    2a20:	add	r1, sp, #36	; 0x24
    2a22:	bl	21d8 <MTPD::write(char const*, int) [clone .part.2]>
    2a26:	b.n	29c4 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x88>
    2a28:	ldrb	r3, [r5, #8]
    2a2a:	movs	r2, #0
    2a2c:	strh.w	r2, [sp, #14]
    2a30:	cmp	r3, #0
    2a32:	bne.n	2a08 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xcc>
    2a34:	mov	r0, r5
    2a36:	movs	r2, #2
    2a38:	add.w	r1, sp, #14
    2a3c:	bl	21d8 <MTPD::write(char const*, int) [clone .part.2]>
    2a40:	b.n	29c4 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x88>
    2a42:	ldrb	r4, [r5, #8]
    2a44:	str	r3, [sp, #32]
    2a46:	cmp	r4, #0
    2a48:	beq.n	2aac <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x170>
      write_length_ += len;
    2a4a:	ldr	r3, [r5, #12]
    2a4c:	adds	r3, #4
    2a4e:	str	r3, [r5, #12]
    2a50:	b.n	29c0 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x84>
    2a52:	movs	r2, #4
    2a54:	add	r1, sp, #52	; 0x34
    2a56:	mov	r0, r5
    2a58:	bl	21d8 <MTPD::write(char const*, int) [clone .part.2]>
    2a5c:	ldrb	r3, [r5, #8]
    2a5e:	ldr	r2, [sp, #20]
    2a60:	str	r2, [sp, #48]	; 0x30
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    2a62:	cmp	r3, #0
    2a64:	bne.n	2ad0 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x194>
    2a66:	movs	r2, #4
    2a68:	add	r1, sp, #48	; 0x30
    2a6a:	mov	r0, r5
    2a6c:	bl	21d8 <MTPD::write(char const*, int) [clone .part.2]>
    2a70:	ldrb	r4, [r5, #8]
    2a72:	movs	r3, #1
    2a74:	str	r3, [sp, #44]	; 0x2c
    2a76:	cbnz	r4, 2acc <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x190>
    2a78:	movs	r2, #4
    2a7a:	add	r1, sp, #44	; 0x2c
    2a7c:	mov	r0, r5
    2a7e:	bl	21d8 <MTPD::write(char const*, int) [clone .part.2]>
    2a82:	ldrb	r3, [r5, #8]
    2a84:	str	r4, [sp, #40]	; 0x28
    2a86:	cbnz	r3, 2ac8 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x18c>
    2a88:	mov	r0, r5
    2a8a:	movs	r2, #4
    2a8c:	add	r1, sp, #40	; 0x28
    2a8e:	bl	21d8 <MTPD::write(char const*, int) [clone .part.2]>
    2a92:	b.n	29c4 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x88>
    2a94:	mov	r0, r5
    2a96:	movs	r2, #2
    2a98:	add	r1, sp, #12
    2a9a:	bl	21d8 <MTPD::write(char const*, int) [clone .part.2]>
    2a9e:	b.n	29c4 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x88>
    2aa0:	mov	r0, r5
    2aa2:	movs	r2, #4
    2aa4:	add	r1, sp, #24
    2aa6:	bl	21d8 <MTPD::write(char const*, int) [clone .part.2]>
    2aaa:	b.n	29c4 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x88>
    2aac:	movs	r2, #4
    2aae:	add	r1, sp, #32
    2ab0:	mov	r0, r5
    2ab2:	bl	21d8 <MTPD::write(char const*, int) [clone .part.2]>
    2ab6:	ldrb	r3, [r5, #8]
    2ab8:	str	r4, [sp, #28]
    2aba:	cbnz	r3, 2ac8 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x18c>
    2abc:	mov	r0, r5
    2abe:	movs	r2, #4
    2ac0:	add	r1, sp, #28
    2ac2:	bl	21d8 <MTPD::write(char const*, int) [clone .part.2]>
    2ac6:	b.n	29c4 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x88>
    2ac8:	ldr	r3, [r5, #12]
    2aca:	b.n	29c0 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x84>
    2acc:	ldr	r3, [r5, #12]
    2ace:	b.n	29bc <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x80>
    2ad0:	ldr	r3, [r5, #12]
    2ad2:	b.n	29b8 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x7c>
    2ad4:	.word	0x00010444

00002ad8 <MTPD::GetStorageInfo(unsigned long)>:
  void MTPD::WriteStorageIDs() {
    write32(1); // 1 entry
    write32(1); // 1 storage
  }

  void MTPD::GetStorageInfo(uint32_t storage) {
    2ad8:	push	{r4, r5, r6, lr}
    2ada:	mov	r4, r0
    write16(storage_->readonly() ? 0x0001 : 0x0004);   // storage type (removable RAM)
    2adc:	ldr	r0, [r0, #0]
    2ade:	ldr	r3, [r0, #0]
  void MTPD::WriteStorageIDs() {
    write32(1); // 1 entry
    write32(1); // 1 storage
  }

  void MTPD::GetStorageInfo(uint32_t storage) {
    2ae0:	sub	sp, #32
    write16(storage_->readonly() ? 0x0001 : 0x0004);   // storage type (removable RAM)
    2ae2:	ldr	r3, [r3, #0]
    2ae4:	blx	r3
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    2ae6:	ldrb	r3, [r4, #8]
    write32(1); // 1 entry
    write32(1); // 1 storage
  }

  void MTPD::GetStorageInfo(uint32_t storage) {
    write16(storage_->readonly() ? 0x0001 : 0x0004);   // storage type (removable RAM)
    2ae8:	cmp	r0, #0
    2aea:	ite	eq
    2aec:	moveq	r2, #4
    2aee:	movne	r2, #1
    2af0:	strh.w	r2, [sp, #6]
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    2af4:	cmp	r3, #0
    2af6:	beq.n	2b98 <MTPD::GetStorageInfo(unsigned long)+0xc0>
      write_length_ += len;
    2af8:	ldr	r3, [r4, #12]
    2afa:	adds	r3, #2
    2afc:	str	r3, [r4, #12]
    write32(1); // 1 storage
  }

  void MTPD::GetStorageInfo(uint32_t storage) {
    write16(storage_->readonly() ? 0x0001 : 0x0004);   // storage type (removable RAM)
    write16(storage_->has_directories() ? 0x0002: 0x0001);   // filesystem type (generic hierarchical)
    2afe:	ldr	r0, [r4, #0]
    2b00:	ldr	r3, [r0, #0]
    2b02:	ldr	r3, [r3, #4]
    2b04:	blx	r3
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    2b06:	ldrb	r5, [r4, #8]
    write32(1); // 1 storage
  }

  void MTPD::GetStorageInfo(uint32_t storage) {
    write16(storage_->readonly() ? 0x0001 : 0x0004);   // storage type (removable RAM)
    write16(storage_->has_directories() ? 0x0002: 0x0001);   // filesystem type (generic hierarchical)
    2b08:	cmp	r0, #0
    2b0a:	ite	eq
    2b0c:	moveq	r3, #1
    2b0e:	movne	r3, #2
    2b10:	strh.w	r3, [sp, #10]
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    2b14:	cmp	r5, #0
    2b16:	beq.n	2bd2 <MTPD::GetStorageInfo(unsigned long)+0xfa>
      write_length_ += len;
    2b18:	ldr	r3, [r4, #12]
    2b1a:	movs	r2, #0
    2b1c:	adds	r3, #2
    2b1e:	str	r3, [r4, #12]
    2b20:	strh.w	r2, [sp, #8]
    2b24:	adds	r3, #2
    2b26:	str	r3, [r4, #12]
  void MTPD::GetStorageInfo(uint32_t storage) {
    write16(storage_->readonly() ? 0x0001 : 0x0004);   // storage type (removable RAM)
    write16(storage_->has_directories() ? 0x0002: 0x0001);   // filesystem type (generic hierarchical)
    write16(0x0000);   // access capability (read-write)
    
  uint64_t nclust = storage_->clusterCount() ;
    2b28:	ldr	r0, [r4, #0]
    2b2a:	ldr	r3, [r0, #0]
    2b2c:	ldr	r3, [r3, #8]
    2b2e:	blx	r3
    2b30:	mov	r5, r0
  uint64_t nsect = storage_->clusterSize() ;
    2b32:	ldr	r0, [r4, #0]
    2b34:	ldr	r3, [r0, #0]
    2b36:	ldr	r3, [r3, #16]
    2b38:	blx	r3
    2b3a:	mov	r6, r0
    2b3c:	umull	r0, r1, r5, r0
    2b40:	lsls	r3, r1, #9
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    2b42:	ldrb	r2, [r4, #8]
    2b44:	orr.w	r3, r3, r0, lsr #23
    2b48:	lsls	r0, r0, #9
    2b4a:	str	r3, [sp, #28]
    2b4c:	str	r0, [sp, #24]
    2b4e:	cmp	r2, #0
    2b50:	beq.n	2bc6 <MTPD::GetStorageInfo(unsigned long)+0xee>
      write_length_ += len;
    2b52:	ldr	r3, [r4, #12]
    2b54:	adds	r3, #8
    2b56:	str	r3, [r4, #12]
    write16(0x0000);   // access capability (read-write)
    
  uint64_t nclust = storage_->clusterCount() ;
  uint64_t nsect = storage_->clusterSize() ;
    write64(nclust*nsect*512L);  // max capacity
  uint64_t nfree = storage_->freeClusters() ;
    2b58:	ldr	r0, [r4, #0]
    2b5a:	ldr	r3, [r0, #0]
    2b5c:	ldr	r3, [r3, #12]
    2b5e:	blx	r3
    2b60:	lsls	r2, r6, #9
    2b62:	umull	r2, r3, r2, r0
    2b66:	lsrs	r6, r6, #23
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    2b68:	ldrb	r1, [r4, #8]
    2b6a:	mla	r3, r0, r6, r3
    2b6e:	strd	r2, r3, [sp, #16]
    2b72:	cbz	r1, 2ba6 <MTPD::GetStorageInfo(unsigned long)+0xce>
      write_length_ += len;
    2b74:	ldr	r3, [r4, #12]
    2b76:	mov.w	r2, #4294967295
    2b7a:	adds	r3, #8
    2b7c:	str	r3, [r4, #12]
    2b7e:	str	r2, [sp, #12]
    2b80:	adds	r3, #4
    2b82:	str	r3, [r4, #12]
    write64(nclust*nsect*512L);  // max capacity
  uint64_t nfree = storage_->freeClusters() ;
    write64(nfree*nsect*512L);  // free space (100M)
    //
    write32(0xFFFFFFFFUL);  // free space (objects)
    writestring("SD Card");  // storage descriptor
    2b84:	mov	r0, r4
    2b86:	ldr	r1, [pc, #116]	; (2bfc <MTPD::GetStorageInfo(unsigned long)+0x124>)
    2b88:	bl	223c <MTPD::writestring(char const*)>
    writestring("");  // volume identifier
    2b8c:	mov	r0, r4
    2b8e:	ldr	r1, [pc, #112]	; (2c00 <MTPD::GetStorageInfo(unsigned long)+0x128>)
    2b90:	bl	223c <MTPD::writestring(char const*)>
  }
    2b94:	add	sp, #32
    2b96:	pop	{r4, r5, r6, pc}
    2b98:	movs	r2, #2
    2b9a:	add.w	r1, sp, #6
    2b9e:	mov	r0, r4
    2ba0:	bl	21d8 <MTPD::write(char const*, int) [clone .part.2]>
    2ba4:	b.n	2afe <MTPD::GetStorageInfo(unsigned long)+0x26>
    2ba6:	movs	r2, #8
    2ba8:	add	r1, sp, #16
    2baa:	mov	r0, r4
    2bac:	bl	21d8 <MTPD::write(char const*, int) [clone .part.2]>
    2bb0:	ldrb	r3, [r4, #8]
    2bb2:	mov.w	r2, #4294967295
    2bb6:	str	r2, [sp, #12]
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    2bb8:	cbnz	r3, 2bf2 <MTPD::GetStorageInfo(unsigned long)+0x11a>
    2bba:	movs	r2, #4
    2bbc:	add	r1, sp, #12
    2bbe:	mov	r0, r4
    2bc0:	bl	21d8 <MTPD::write(char const*, int) [clone .part.2]>
    2bc4:	b.n	2b84 <MTPD::GetStorageInfo(unsigned long)+0xac>
    2bc6:	movs	r2, #8
    2bc8:	add	r1, sp, #24
    2bca:	mov	r0, r4
    2bcc:	bl	21d8 <MTPD::write(char const*, int) [clone .part.2]>
    2bd0:	b.n	2b58 <MTPD::GetStorageInfo(unsigned long)+0x80>
    2bd2:	movs	r2, #2
    2bd4:	add.w	r1, sp, #10
    2bd8:	mov	r0, r4
    2bda:	bl	21d8 <MTPD::write(char const*, int) [clone .part.2]>
    2bde:	ldrb	r3, [r4, #8]
    2be0:	strh.w	r5, [sp, #8]
    2be4:	cbnz	r3, 2bf6 <MTPD::GetStorageInfo(unsigned long)+0x11e>
    2be6:	movs	r2, #2
    2be8:	add	r1, sp, #8
    2bea:	mov	r0, r4
    2bec:	bl	21d8 <MTPD::write(char const*, int) [clone .part.2]>
    2bf0:	b.n	2b28 <MTPD::GetStorageInfo(unsigned long)+0x50>
    2bf2:	ldr	r3, [r4, #12]
    2bf4:	b.n	2b80 <MTPD::GetStorageInfo(unsigned long)+0xa8>
    2bf6:	ldr	r3, [r4, #12]
    2bf8:	b.n	2b24 <MTPD::GetStorageInfo(unsigned long)+0x4c>
    2bfa:	nop
    2bfc:	.word	0x0001059c
    2c00:	.word	0x00010444

00002c04 <MTPD::getObjectPropDesc(unsigned long, unsigned long)>:
      write32(propertyListNum);
      for(uint32_t ii=0; ii<propertyListNum;ii++) write16(propertyList[ii]);
    }

    void MTPD::getObjectPropDesc(uint32_t p1, uint32_t p2)
    {
    2c04:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
      switch(p1)
    2c08:	sub.w	r1, r1, #56320	; 0xdc00
    2c0c:	subs	r1, #1
      write32(propertyListNum);
      for(uint32_t ii=0; ii<propertyListNum;ii++) write16(propertyList[ii]);
    }

    void MTPD::getObjectPropDesc(uint32_t p1, uint32_t p2)
    {
    2c0e:	sub	sp, #148	; 0x94
    2c10:	mov	r4, r0
      switch(p1)
    2c12:	cmp	r1, #67	; 0x43
    2c14:	bhi.n	2ccc <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xc8>
    2c16:	tbh	[pc, r1, lsl #1]
    2c1a:	.short	0x005c
    2c1c:	.word	0x0080006e
    2c20:	.word	0x005900c6
    2c24:	.word	0x00d80059
    2c28:	.word	0x01690121
    2c2c:	.word	0x01b10059
    2c30:	.word	0x00590059
    2c34:	.word	0x00590059
    2c38:	.word	0x00590059
    2c3c:	.word	0x00590059
    2c40:	.word	0x00590059
    2c44:	.word	0x00590059
    2c48:	.word	0x00590059
    2c4c:	.word	0x00590059
    2c50:	.word	0x00590059
    2c54:	.word	0x00590059
    2c58:	.word	0x00590059
    2c5c:	.word	0x00590059
    2c60:	.word	0x00590059
    2c64:	.word	0x00590059
    2c68:	.word	0x00590059
    2c6c:	.word	0x00590059
    2c70:	.word	0x00590059
    2c74:	.word	0x00590059
    2c78:	.word	0x00590059
    2c7c:	.word	0x00590059
    2c80:	.word	0x00590059
    2c84:	.word	0x00590059
    2c88:	.word	0x00590059
    2c8c:	.word	0x00590059
    2c90:	.word	0x00590059
    2c94:	.word	0x00590059
    2c98:	.word	0x01f70059
    2c9c:	.word	0x00590059
    2ca0:	.short	0x0044
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    2ca2:	ldrb	r3, [r0, #8]
    2ca4:	movw	r2, #56388	; 0xdc44
    2ca8:	strh.w	r2, [sp, #70]	; 0x46
    2cac:	cmp	r3, #0
    2cae:	beq.w	312c <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x528>
      write_length_ += len;
    2cb2:	ldr	r3, [r4, #12]
    2cb4:	adds	r3, #2
    2cb6:	str	r3, [r4, #12]
    2cb8:	adds	r3, #2
    2cba:	str	r3, [r4, #12]
    2cbc:	adds	r3, #1
    2cbe:	str	r3, [r4, #12]
    2cc0:	adds	r3, #1
    2cc2:	str	r3, [r4, #12]
    2cc4:	adds	r3, #4
    2cc6:	str	r3, [r4, #12]
    2cc8:	adds	r3, #1
    2cca:	str	r3, [r4, #12]
          write8(0);
          break;
        default:
          break;
      }
    }
    2ccc:	add	sp, #148	; 0x94
    2cce:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    2cd2:	ldrb	r3, [r0, #8]
    2cd4:	movw	r2, #56321	; 0xdc01
    2cd8:	strh.w	r2, [sp, #30]
    2cdc:	cmp	r3, #0
    2cde:	beq.w	3240 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x63c>
      write_length_ += len;
    2ce2:	ldr	r3, [r4, #12]
    2ce4:	adds	r3, #2
    2ce6:	str	r3, [r4, #12]
    2ce8:	adds	r3, #2
    2cea:	str	r3, [r4, #12]
    2cec:	adds	r3, #1
    2cee:	str	r3, [r4, #12]
    2cf0:	adds	r3, #4
    2cf2:	str	r3, [r4, #12]
    2cf4:	b.n	2cc4 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xc0>
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    2cf6:	ldrb	r3, [r0, #8]
    2cf8:	movw	r2, #56322	; 0xdc02
    2cfc:	strh.w	r2, [sp, #36]	; 0x24
    2d00:	cmp	r3, #0
    2d02:	beq.w	30ae <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x4aa>
      write_length_ += len;
    2d06:	ldr	r3, [r4, #12]
    2d08:	adds	r3, #2
    2d0a:	str	r3, [r4, #12]
    2d0c:	adds	r3, #2
    2d0e:	str	r3, [r4, #12]
    2d10:	adds	r3, #1
    2d12:	str	r3, [r4, #12]
    2d14:	adds	r3, #2
    2d16:	str	r3, [r4, #12]
    2d18:	b.n	2cc4 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xc0>
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    2d1a:	ldrb	r3, [r0, #8]
    2d1c:	movw	r2, #56323	; 0xdc03
    2d20:	strh.w	r2, [sp, #42]	; 0x2a
    2d24:	cmp	r3, #0
    2d26:	bne.n	2d06 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x102>
    2d28:	movs	r2, #2
    2d2a:	add.w	r1, sp, #42	; 0x2a
    2d2e:	bl	21d8 <MTPD::write(char const*, int) [clone .part.2]>
    2d32:	ldrb	r7, [r4, #8]
    2d34:	movs	r6, #4
    2d36:	strh.w	r6, [sp, #40]	; 0x28
    2d3a:	cmp	r7, #0
    2d3c:	bne.w	32d6 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6d2>
    2d40:	movs	r2, #2
    2d42:	add	r1, sp, #40	; 0x28
    2d44:	mov	r0, r4
    2d46:	bl	21d8 <MTPD::write(char const*, int) [clone .part.2]>
    2d4a:	ldrb	r5, [r4, #8]
    2d4c:	strb.w	r7, [sp, #9]
    2d50:	cmp	r5, #0
    2d52:	bne.w	32d2 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6ce>
    2d56:	movs	r2, #1
    2d58:	add.w	r1, sp, #9
    2d5c:	mov	r0, r4
    2d5e:	bl	21d8 <MTPD::write(char const*, int) [clone .part.2]>
    2d62:	ldrb	r7, [r4, #8]
    2d64:	strh.w	r5, [sp, #38]	; 0x26
    2d68:	cmp	r7, #0
    2d6a:	bne.w	32ce <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6ca>
    2d6e:	movs	r2, #2
    2d70:	add.w	r1, sp, #38	; 0x26
    2d74:	mov	r0, r4
    2d76:	bl	21d8 <MTPD::write(char const*, int) [clone .part.2]>
    2d7a:	ldrb	r5, [r4, #8]
    2d7c:	str	r7, [sp, #84]	; 0x54
    2d7e:	cmp	r5, #0
    2d80:	bne.w	32aa <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a6>
    2d84:	mov	r2, r6
    2d86:	add	r1, sp, #84	; 0x54
    2d88:	mov	r0, r4
    2d8a:	bl	21d8 <MTPD::write(char const*, int) [clone .part.2]>
    2d8e:	ldrb	r3, [r4, #8]
    2d90:	strb.w	r5, [sp, #8]
    2d94:	cmp	r3, #0
    2d96:	bne.w	32a6 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a2>
    2d9a:	mov	r0, r4
    2d9c:	movs	r2, #1
    2d9e:	add	r1, sp, #8
    2da0:	bl	21d8 <MTPD::write(char const*, int) [clone .part.2]>
    2da4:	b.n	2ccc <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xc8>
    2da6:	ldrb	r3, [r0, #8]
    2da8:	movw	r2, #56324	; 0xdc04
    2dac:	strh.w	r2, [sp, #46]	; 0x2e
    2db0:	cmp	r3, #0
    2db2:	beq.w	302c <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x428>
      write_length_ += len;
    2db6:	ldr	r3, [r0, #12]
    2db8:	adds	r3, #2
    2dba:	str	r3, [r0, #12]
    2dbc:	adds	r3, #2
    2dbe:	str	r3, [r4, #12]
    2dc0:	adds	r3, #1
    2dc2:	str	r3, [r4, #12]
    2dc4:	adds	r3, #8
    2dc6:	str	r3, [r4, #12]
    2dc8:	b.n	2cc4 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xc0>
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    2dca:	ldrb	r3, [r0, #8]
    2dcc:	movw	r2, #56327	; 0xdc07
    2dd0:	strh.w	r2, [sp, #50]	; 0x32
    2dd4:	cmp	r3, #0
    2dd6:	bne.w	2cb2 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xae>
    2dda:	movs	r2, #2
    2ddc:	add.w	r1, sp, #50	; 0x32
    2de0:	bl	21d8 <MTPD::write(char const*, int) [clone .part.2]>
    2de4:	ldrb	r3, [r4, #8]
    2de6:	movw	r2, #65535	; 0xffff
    2dea:	strh.w	r2, [sp, #48]	; 0x30
    2dee:	cmp	r3, #0
    2df0:	bne.w	32be <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6ba>
    2df4:	movs	r2, #2
    2df6:	add	r1, sp, #48	; 0x30
    2df8:	mov	r0, r4
    2dfa:	bl	21d8 <MTPD::write(char const*, int) [clone .part.2]>
    2dfe:	ldrb	r6, [r4, #8]
    2e00:	movs	r5, #1
    2e02:	strb.w	r5, [sp, #14]
    2e06:	cmp	r6, #0
    2e08:	bne.w	32ba <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6b6>
    2e0c:	mov	r2, r5
    2e0e:	add.w	r1, sp, #14
    2e12:	mov	r0, r4
    2e14:	bl	21d8 <MTPD::write(char const*, int) [clone .part.2]>
    2e18:	ldrb	r7, [r4, #8]
    2e1a:	strb.w	r6, [sp, #13]
    2e1e:	cmp	r7, #0
    2e20:	bne.w	32ca <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6c6>
    2e24:	mov	r2, r5
    2e26:	add.w	r1, sp, #13
    2e2a:	mov	r0, r4
    2e2c:	bl	21d8 <MTPD::write(char const*, int) [clone .part.2]>
    2e30:	ldrb	r6, [r4, #8]
    2e32:	str	r7, [sp, #92]	; 0x5c
    2e34:	cmp	r6, #0
    2e36:	bne.w	32aa <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a6>
    2e3a:	movs	r2, #4
    2e3c:	add	r1, sp, #92	; 0x5c
    2e3e:	mov	r0, r4
    2e40:	bl	21d8 <MTPD::write(char const*, int) [clone .part.2]>
    2e44:	ldrb	r3, [r4, #8]
    2e46:	strb.w	r6, [sp, #12]
    2e4a:	cmp	r3, #0
    2e4c:	bne.w	32a6 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a2>
    2e50:	mov	r2, r5
    2e52:	mov	r0, r4
    2e54:	add	r1, sp, #12
    2e56:	bl	21d8 <MTPD::write(char const*, int) [clone .part.2]>
    2e5a:	b.n	2ccc <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xc8>
    2e5c:	ldrb	r3, [r0, #8]
    2e5e:	movw	r2, #56328	; 0xdc08
    2e62:	strh.w	r2, [sp, #54]	; 0x36
    2e66:	cmp	r3, #0
    2e68:	bne.w	2cb2 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xae>
    2e6c:	movs	r2, #2
    2e6e:	add.w	r1, sp, #54	; 0x36
    2e72:	bl	21d8 <MTPD::write(char const*, int) [clone .part.2]>
    2e76:	ldrb	r6, [r4, #8]
    2e78:	movw	r3, #65535	; 0xffff
    2e7c:	strh.w	r3, [sp, #52]	; 0x34
    2e80:	cmp	r6, #0
    2e82:	bne.w	32be <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6ba>
    2e86:	movs	r2, #2
    2e88:	add	r1, sp, #52	; 0x34
    2e8a:	mov	r0, r4
    2e8c:	bl	21d8 <MTPD::write(char const*, int) [clone .part.2]>
    2e90:	ldrb	r5, [r4, #8]
    2e92:	strb.w	r6, [sp, #17]
    2e96:	cmp	r5, #0
    2e98:	bne.w	32ba <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6b6>
    2e9c:	movs	r2, #1
    2e9e:	add.w	r1, sp, #17
    2ea2:	mov	r0, r4
    2ea4:	bl	21d8 <MTPD::write(char const*, int) [clone .part.2]>
    2ea8:	ldrb	r6, [r4, #8]
    2eaa:	strb.w	r5, [sp, #16]
    2eae:	cmp	r6, #0
    2eb0:	bne.w	32ca <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6c6>
    2eb4:	movs	r2, #1
    2eb6:	add	r1, sp, #16
    2eb8:	mov	r0, r4
    2eba:	bl	21d8 <MTPD::write(char const*, int) [clone .part.2]>
    2ebe:	ldrb	r5, [r4, #8]
    2ec0:	str	r6, [sp, #96]	; 0x60
    2ec2:	cmp	r5, #0
    2ec4:	bne.w	32aa <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a6>
    2ec8:	movs	r2, #4
    2eca:	add	r1, sp, #96	; 0x60
    2ecc:	mov	r0, r4
    2ece:	bl	21d8 <MTPD::write(char const*, int) [clone .part.2]>
    2ed2:	ldrb	r3, [r4, #8]
    2ed4:	strb.w	r5, [sp, #15]
    2ed8:	cmp	r3, #0
    2eda:	bne.w	32a6 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a2>
    2ede:	mov	r0, r4
    2ee0:	movs	r2, #1
    2ee2:	add.w	r1, sp, #15
    2ee6:	bl	21d8 <MTPD::write(char const*, int) [clone .part.2]>
    2eea:	b.n	2ccc <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xc8>
    2eec:	ldrb	r3, [r0, #8]
    2eee:	movw	r2, #56329	; 0xdc09
    2ef2:	strh.w	r2, [sp, #58]	; 0x3a
    2ef6:	cmp	r3, #0
    2ef8:	bne.w	2cb2 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xae>
    2efc:	movs	r2, #2
    2efe:	add.w	r1, sp, #58	; 0x3a
    2f02:	bl	21d8 <MTPD::write(char const*, int) [clone .part.2]>
    2f06:	ldrb	r6, [r4, #8]
    2f08:	movw	r3, #65535	; 0xffff
    2f0c:	strh.w	r3, [sp, #56]	; 0x38
    2f10:	cmp	r6, #0
    2f12:	bne.w	32be <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6ba>
    2f16:	movs	r2, #2
    2f18:	add	r1, sp, #56	; 0x38
    2f1a:	mov	r0, r4
    2f1c:	bl	21d8 <MTPD::write(char const*, int) [clone .part.2]>
    2f20:	ldrb	r5, [r4, #8]
    2f22:	strb.w	r6, [sp, #20]
    2f26:	cmp	r5, #0
    2f28:	bne.w	32ba <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6b6>
    2f2c:	movs	r2, #1
    2f2e:	add	r1, sp, #20
    2f30:	mov	r0, r4
    2f32:	bl	21d8 <MTPD::write(char const*, int) [clone .part.2]>
    2f36:	ldrb	r6, [r4, #8]
    2f38:	strb.w	r5, [sp, #19]
    2f3c:	cmp	r6, #0
    2f3e:	bne.w	32ca <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6c6>
    2f42:	movs	r2, #1
    2f44:	add.w	r1, sp, #19
    2f48:	mov	r0, r4
    2f4a:	bl	21d8 <MTPD::write(char const*, int) [clone .part.2]>
    2f4e:	ldrb	r5, [r4, #8]
    2f50:	str	r6, [sp, #100]	; 0x64
    2f52:	cmp	r5, #0
    2f54:	bne.w	32aa <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a6>
    2f58:	movs	r2, #4
    2f5a:	add	r1, sp, #100	; 0x64
    2f5c:	mov	r0, r4
    2f5e:	bl	21d8 <MTPD::write(char const*, int) [clone .part.2]>
    2f62:	ldrb	r3, [r4, #8]
    2f64:	strb.w	r5, [sp, #18]
    2f68:	cmp	r3, #0
    2f6a:	bne.w	32a6 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a2>
    2f6e:	mov	r0, r4
    2f70:	movs	r2, #1
    2f72:	add.w	r1, sp, #18
    2f76:	bl	21d8 <MTPD::write(char const*, int) [clone .part.2]>
    2f7a:	b.n	2ccc <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xc8>
    2f7c:	ldrb	r3, [r0, #8]
    2f7e:	movw	r2, #56331	; 0xdc0b
    2f82:	strh.w	r2, [sp, #62]	; 0x3e
    2f86:	cmp	r3, #0
    2f88:	bne.w	2ce2 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xde>
    2f8c:	movs	r2, #2
    2f8e:	add.w	r1, sp, #62	; 0x3e
    2f92:	bl	21d8 <MTPD::write(char const*, int) [clone .part.2]>
    2f96:	ldrb	r6, [r4, #8]
    2f98:	movs	r3, #6
    2f9a:	strh.w	r3, [sp, #60]	; 0x3c
    2f9e:	cmp	r6, #0
    2fa0:	bne.w	32b6 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6b2>
    2fa4:	movs	r2, #2
    2fa6:	add	r1, sp, #60	; 0x3c
    2fa8:	mov	r0, r4
    2faa:	bl	21d8 <MTPD::write(char const*, int) [clone .part.2]>
    2fae:	ldrb	r5, [r4, #8]
    2fb0:	strb.w	r6, [sp, #22]
    2fb4:	cmp	r5, #0
    2fb6:	bne.w	32b2 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6ae>
    2fba:	movs	r2, #1
    2fbc:	add.w	r1, sp, #22
    2fc0:	mov	r0, r4
    2fc2:	bl	21d8 <MTPD::write(char const*, int) [clone .part.2]>
    2fc6:	ldrb	r6, [r4, #8]
    2fc8:	str	r5, [sp, #108]	; 0x6c
    2fca:	cmp	r6, #0
    2fcc:	bne.w	32ae <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6aa>
    2fd0:	movs	r2, #4
    2fd2:	add	r1, sp, #108	; 0x6c
    2fd4:	mov	r0, r4
    2fd6:	bl	21d8 <MTPD::write(char const*, int) [clone .part.2]>
    2fda:	ldrb	r5, [r4, #8]
    2fdc:	str	r6, [sp, #104]	; 0x68
    2fde:	cmp	r5, #0
    2fe0:	bne.w	32aa <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a6>
    2fe4:	movs	r2, #4
    2fe6:	add	r1, sp, #104	; 0x68
    2fe8:	mov	r0, r4
    2fea:	bl	21d8 <MTPD::write(char const*, int) [clone .part.2]>
    2fee:	ldrb	r3, [r4, #8]
    2ff0:	strb.w	r5, [sp, #21]
    2ff4:	cmp	r3, #0
    2ff6:	bne.w	32a6 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a2>
    2ffa:	mov	r0, r4
    2ffc:	movs	r2, #1
    2ffe:	add.w	r1, sp, #21
    3002:	bl	21d8 <MTPD::write(char const*, int) [clone .part.2]>
    3006:	b.n	2ccc <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xc8>
    3008:	ldrb	r3, [r0, #8]
    300a:	movw	r2, #56385	; 0xdc41
    300e:	strh.w	r2, [sp, #66]	; 0x42
    3012:	cmp	r3, #0
    3014:	beq.w	31ae <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x5aa>
      write_length_ += len;
    3018:	ldr	r3, [r0, #12]
    301a:	adds	r3, #2
    301c:	str	r3, [r0, #12]
    301e:	adds	r3, #2
    3020:	str	r3, [r4, #12]
    3022:	adds	r3, #1
    3024:	str	r3, [r4, #12]
    3026:	adds	r3, #8
    3028:	str	r3, [r4, #12]
    302a:	b.n	2dc4 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1c0>
    302c:	movs	r2, #2
    302e:	add.w	r1, sp, #46	; 0x2e
    3032:	bl	21d8 <MTPD::write(char const*, int) [clone .part.2]>
    3036:	ldrb	r6, [r4, #8]
    3038:	movs	r5, #8
    303a:	strh.w	r5, [sp, #44]	; 0x2c
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    303e:	cmp	r6, #0
    3040:	bne.w	32c6 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6c2>
    3044:	movs	r2, #2
    3046:	add	r1, sp, #44	; 0x2c
    3048:	mov	r0, r4
    304a:	bl	21d8 <MTPD::write(char const*, int) [clone .part.2]>
    304e:	ldrb	r3, [r4, #8]
    3050:	strb.w	r6, [sp, #11]
    3054:	cmp	r3, #0
    3056:	bne.w	32c2 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6be>
    305a:	movs	r2, #1
    305c:	add.w	r1, sp, #11
    3060:	mov	r0, r4
    3062:	bl	21d8 <MTPD::write(char const*, int) [clone .part.2]>
    3066:	ldrb	r6, [r4, #8]
    3068:	movs	r2, #0
    306a:	movs	r3, #0
    306c:	strd	r2, r3, [sp, #120]	; 0x78
    3070:	cmp	r6, #0
    3072:	bne.w	32da <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6d6>
    3076:	mov	r2, r5
    3078:	add	r1, sp, #120	; 0x78
    307a:	mov	r0, r4
    307c:	bl	21d8 <MTPD::write(char const*, int) [clone .part.2]>
    3080:	ldrb	r5, [r4, #8]
    3082:	str	r6, [sp, #88]	; 0x58
    3084:	cmp	r5, #0
    3086:	bne.w	32aa <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a6>
    308a:	movs	r2, #4
    308c:	add	r1, sp, #88	; 0x58
    308e:	mov	r0, r4
    3090:	bl	21d8 <MTPD::write(char const*, int) [clone .part.2]>
    3094:	ldrb	r3, [r4, #8]
    3096:	strb.w	r5, [sp, #10]
    309a:	cmp	r3, #0
    309c:	bne.w	32a6 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a2>
    30a0:	mov	r0, r4
    30a2:	movs	r2, #1
    30a4:	add.w	r1, sp, #10
    30a8:	bl	21d8 <MTPD::write(char const*, int) [clone .part.2]>
    30ac:	b.n	2ccc <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xc8>
    30ae:	movs	r2, #2
    30b0:	add	r1, sp, #36	; 0x24
    30b2:	bl	21d8 <MTPD::write(char const*, int) [clone .part.2]>
    30b6:	ldrb	r7, [r4, #8]
    30b8:	movs	r6, #4
    30ba:	strh.w	r6, [sp, #34]	; 0x22
    30be:	cmp	r7, #0
    30c0:	bne.w	32d6 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6d2>
    30c4:	movs	r2, #2
    30c6:	add.w	r1, sp, #34	; 0x22
    30ca:	mov	r0, r4
    30cc:	bl	21d8 <MTPD::write(char const*, int) [clone .part.2]>
    30d0:	ldrb	r5, [r4, #8]
    30d2:	strb.w	r7, [sp, #7]
    30d6:	cmp	r5, #0
    30d8:	bne.w	32d2 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6ce>
    30dc:	movs	r2, #1
    30de:	add.w	r1, sp, #7
    30e2:	mov	r0, r4
    30e4:	bl	21d8 <MTPD::write(char const*, int) [clone .part.2]>
    30e8:	ldrb	r7, [r4, #8]
    30ea:	strh.w	r5, [sp, #32]
    30ee:	cmp	r7, #0
    30f0:	bne.w	32ce <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6ca>
    30f4:	movs	r2, #2
    30f6:	add	r1, sp, #32
    30f8:	mov	r0, r4
    30fa:	bl	21d8 <MTPD::write(char const*, int) [clone .part.2]>
    30fe:	ldrb	r5, [r4, #8]
    3100:	str	r7, [sp, #80]	; 0x50
    3102:	cmp	r5, #0
    3104:	bne.w	32aa <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a6>
    3108:	mov	r2, r6
    310a:	add	r1, sp, #80	; 0x50
    310c:	mov	r0, r4
    310e:	bl	21d8 <MTPD::write(char const*, int) [clone .part.2]>
    3112:	ldrb	r3, [r4, #8]
    3114:	strb.w	r5, [sp, #6]
    3118:	cmp	r3, #0
    311a:	bne.w	32a6 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a2>
    311e:	mov	r0, r4
    3120:	movs	r2, #1
    3122:	add.w	r1, sp, #6
    3126:	bl	21d8 <MTPD::write(char const*, int) [clone .part.2]>
    312a:	b.n	2ccc <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xc8>
    312c:	movs	r2, #2
    312e:	add.w	r1, sp, #70	; 0x46
    3132:	bl	21d8 <MTPD::write(char const*, int) [clone .part.2]>
    3136:	ldrb	r6, [r4, #8]
    3138:	movw	r3, #65535	; 0xffff
    313c:	strh.w	r3, [sp, #68]	; 0x44
    3140:	cmp	r6, #0
    3142:	bne.w	32be <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6ba>
    3146:	movs	r2, #2
    3148:	add	r1, sp, #68	; 0x44
    314a:	mov	r0, r4
    314c:	bl	21d8 <MTPD::write(char const*, int) [clone .part.2]>
    3150:	ldrb	r5, [r4, #8]
    3152:	strb.w	r6, [sp, #27]
    3156:	cmp	r5, #0
    3158:	bne.w	32ba <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6b6>
    315c:	movs	r2, #1
    315e:	add.w	r1, sp, #27
    3162:	mov	r0, r4
    3164:	bl	21d8 <MTPD::write(char const*, int) [clone .part.2]>
    3168:	ldrb	r6, [r4, #8]
    316a:	strb.w	r5, [sp, #26]
    316e:	cmp	r6, #0
    3170:	bne.w	32ca <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6c6>
    3174:	movs	r2, #1
    3176:	add.w	r1, sp, #26
    317a:	mov	r0, r4
    317c:	bl	21d8 <MTPD::write(char const*, int) [clone .part.2]>
    3180:	ldrb	r5, [r4, #8]
    3182:	str	r6, [sp, #116]	; 0x74
    3184:	cmp	r5, #0
    3186:	bne.w	32aa <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a6>
    318a:	movs	r2, #4
    318c:	add	r1, sp, #116	; 0x74
    318e:	mov	r0, r4
    3190:	bl	21d8 <MTPD::write(char const*, int) [clone .part.2]>
    3194:	ldrb	r3, [r4, #8]
    3196:	strb.w	r5, [sp, #25]
    319a:	cmp	r3, #0
    319c:	bne.w	32a6 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a2>
    31a0:	mov	r0, r4
    31a2:	movs	r2, #1
    31a4:	add.w	r1, sp, #25
    31a8:	bl	21d8 <MTPD::write(char const*, int) [clone .part.2]>
    31ac:	b.n	2ccc <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xc8>
    31ae:	movs	r2, #2
    31b0:	add.w	r1, sp, #66	; 0x42
    31b4:	bl	21d8 <MTPD::write(char const*, int) [clone .part.2]>
    31b8:	ldrb	r5, [r4, #8]
    31ba:	movs	r3, #10
    31bc:	strh.w	r3, [sp, #64]	; 0x40
    31c0:	cmp	r5, #0
    31c2:	bne.w	32e6 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6e2>
    31c6:	movs	r2, #2
    31c8:	add	r1, sp, #64	; 0x40
    31ca:	mov	r0, r4
    31cc:	bl	21d8 <MTPD::write(char const*, int) [clone .part.2]>
    31d0:	ldrb	r3, [r4, #8]
    31d2:	strb.w	r5, [sp, #24]
    31d6:	cmp	r3, #0
    31d8:	bne.w	32e2 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6de>
    31dc:	movs	r2, #1
    31de:	add	r1, sp, #24
    31e0:	mov	r0, r4
    31e2:	bl	21d8 <MTPD::write(char const*, int) [clone .part.2]>
    31e6:	ldrb	r3, [r4, #8]
    31e8:	mov.w	r8, #0
    31ec:	mov.w	r9, #0
    31f0:	strd	r8, r9, [sp, #136]	; 0x88
    31f4:	cmp	r3, #0
    31f6:	bne.n	32de <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6da>
    31f8:	movs	r2, #8
    31fa:	add	r1, sp, #136	; 0x88
    31fc:	mov	r0, r4
    31fe:	bl	21d8 <MTPD::write(char const*, int) [clone .part.2]>
    3202:	ldrb	r6, [r4, #8]
    3204:	strd	r8, r9, [sp, #128]	; 0x80
    3208:	cmp	r6, #0
    320a:	bne.n	32da <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6d6>
    320c:	movs	r2, #8
    320e:	add	r1, sp, #128	; 0x80
    3210:	mov	r0, r4
    3212:	bl	21d8 <MTPD::write(char const*, int) [clone .part.2]>
    3216:	ldrb	r5, [r4, #8]
    3218:	str	r6, [sp, #112]	; 0x70
    321a:	cmp	r5, #0
    321c:	bne.n	32aa <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a6>
    321e:	movs	r2, #4
    3220:	add	r1, sp, #112	; 0x70
    3222:	mov	r0, r4
    3224:	bl	21d8 <MTPD::write(char const*, int) [clone .part.2]>
    3228:	ldrb	r3, [r4, #8]
    322a:	strb.w	r5, [sp, #23]
    322e:	cmp	r3, #0
    3230:	bne.n	32a6 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a2>
    3232:	mov	r0, r4
    3234:	movs	r2, #1
    3236:	add.w	r1, sp, #23
    323a:	bl	21d8 <MTPD::write(char const*, int) [clone .part.2]>
    323e:	b.n	2ccc <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xc8>
    3240:	movs	r2, #2
    3242:	add.w	r1, sp, #30
    3246:	bl	21d8 <MTPD::write(char const*, int) [clone .part.2]>
    324a:	ldrb	r6, [r4, #8]
    324c:	movs	r3, #6
    324e:	strh.w	r3, [sp, #28]
    3252:	cbnz	r6, 32b6 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6b2>
    3254:	movs	r2, #2
    3256:	add	r1, sp, #28
    3258:	mov	r0, r4
    325a:	bl	21d8 <MTPD::write(char const*, int) [clone .part.2]>
    325e:	ldrb	r5, [r4, #8]
    3260:	strb.w	r6, [sp, #5]
    3264:	cbnz	r5, 32b2 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6ae>
    3266:	movs	r2, #1
    3268:	add.w	r1, sp, #5
    326c:	mov	r0, r4
    326e:	bl	21d8 <MTPD::write(char const*, int) [clone .part.2]>
    3272:	ldrb	r6, [r4, #8]
    3274:	str	r5, [sp, #76]	; 0x4c
    3276:	cbnz	r6, 32ae <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6aa>
    3278:	movs	r2, #4
    327a:	add	r1, sp, #76	; 0x4c
    327c:	mov	r0, r4
    327e:	bl	21d8 <MTPD::write(char const*, int) [clone .part.2]>
    3282:	ldrb	r5, [r4, #8]
    3284:	str	r6, [sp, #72]	; 0x48
    3286:	cbnz	r5, 32aa <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a6>
    3288:	movs	r2, #4
    328a:	add	r1, sp, #72	; 0x48
    328c:	mov	r0, r4
    328e:	bl	21d8 <MTPD::write(char const*, int) [clone .part.2]>
    3292:	ldrb	r3, [r4, #8]
    3294:	strb.w	r5, [sp, #4]
    3298:	cbnz	r3, 32a6 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a2>
    329a:	mov	r0, r4
    329c:	movs	r2, #1
    329e:	add	r1, sp, #4
    32a0:	bl	21d8 <MTPD::write(char const*, int) [clone .part.2]>
    32a4:	b.n	2ccc <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xc8>
    32a6:	ldr	r3, [r4, #12]
    32a8:	b.n	2cc8 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xc4>
    32aa:	ldr	r3, [r4, #12]
    32ac:	b.n	2cc4 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xc0>
    32ae:	ldr	r3, [r4, #12]
    32b0:	b.n	2cf0 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xec>
    32b2:	ldr	r3, [r4, #12]
    32b4:	b.n	2cec <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xe8>
    32b6:	ldr	r3, [r4, #12]
    32b8:	b.n	2ce8 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xe4>
    32ba:	ldr	r3, [r4, #12]
    32bc:	b.n	2cbc <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xb8>
    32be:	ldr	r3, [r4, #12]
    32c0:	b.n	2cb8 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xb4>
    32c2:	ldr	r3, [r4, #12]
    32c4:	b.n	2dc0 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1bc>
    32c6:	ldr	r3, [r4, #12]
    32c8:	b.n	2dbc <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1b8>
    32ca:	ldr	r3, [r4, #12]
    32cc:	b.n	2cc0 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xbc>
    32ce:	ldr	r3, [r4, #12]
    32d0:	b.n	2d14 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x110>
    32d2:	ldr	r3, [r4, #12]
    32d4:	b.n	2d10 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x10c>
    32d6:	ldr	r3, [r4, #12]
    32d8:	b.n	2d0c <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x108>
    32da:	ldr	r3, [r4, #12]
    32dc:	b.n	2dc4 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1c0>
    32de:	ldr	r3, [r4, #12]
    32e0:	b.n	3026 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x422>
    32e2:	ldr	r3, [r4, #12]
    32e4:	b.n	3022 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x41e>
    32e6:	ldr	r3, [r4, #12]
    32e8:	b.n	301e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x41a>
    32ea:	nop

000032ec <MTPD::receive_buffer()>:
      data_buffer_ = usb_malloc();
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::receive_buffer() {
    32ec:	push	{r4, lr}
    32ee:	mov	r4, r0
    32f0:	ldr	r3, [r4, #4]
    while (!data_buffer_) {
      data_buffer_ = usb_rx(MTP_RX_ENDPOINT);
    32f2:	movs	r0, #5
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::receive_buffer() {
    while (!data_buffer_) {
    32f4:	cbnz	r3, 32fe <MTPD::receive_buffer()+0x12>
      data_buffer_ = usb_rx(MTP_RX_ENDPOINT);
    32f6:	bl	a2b0 <usb_rx>
    32fa:	str	r0, [r4, #4]
      if (!data_buffer_) mtp_yield();
    32fc:	cbz	r0, 3300 <MTPD::receive_buffer()+0x14>
    32fe:	pop	{r4, pc}
    3300:	bl	1714 <mtp_yield()>
    3304:	b.n	32f0 <MTPD::receive_buffer()+0x4>
    3306:	nop

00003308 <MTPD::GetObject(unsigned long)>:
        }
      }
    }
  }
  void MTPD::GetObject(uint32_t object_id) 
  {
    3308:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    330c:	mov	r6, r0
    uint32_t size = storage_->GetSize(object_id);
    330e:	ldr	r0, [r0, #0]
    3310:	ldr	r3, [r0, #0]
        }
      }
    }
  }
  void MTPD::GetObject(uint32_t object_id) 
  {
    3312:	sub	sp, #8
    uint32_t size = storage_->GetSize(object_id);
    3314:	ldr	r3, [r3, #32]
        }
      }
    }
  }
  void MTPD::GetObject(uint32_t object_id) 
  {
    3316:	mov	r8, r1
    uint32_t size = storage_->GetSize(object_id);
    3318:	blx	r3
    if (write_get_length_) {
    331a:	ldrb	r5, [r6, #8]
      }
    }
  }
  void MTPD::GetObject(uint32_t object_id) 
  {
    uint32_t size = storage_->GetSize(object_id);
    331c:	mov	r7, r0
    if (write_get_length_) {
    331e:	cbnz	r5, 3378 <MTPD::GetObject(unsigned long)+0x70>
      write_length_ += size;
    } else {
      uint32_t pos = 0;
      while (pos < size) {
    3320:	cbz	r0, 3372 <MTPD::GetObject(unsigned long)+0x6a>
                    (char*)(data_buffer_->buf + data_buffer_->len), to_copy);
        pos += to_copy;
        data_buffer_->len += to_copy;
        if (data_buffer_->len == sizeof(data_buffer_->buf)) {
          usb_tx(MTP_TX_ENDPOINT, data_buffer_);
          data_buffer_ = NULL;
    3322:	mov	r9, r5
    3324:	b.n	332a <MTPD::GetObject(unsigned long)+0x22>
    uint32_t size = storage_->GetSize(object_id);
    if (write_get_length_) {
      write_length_ += size;
    } else {
      uint32_t pos = 0;
      while (pos < size) {
    3326:	cmp	r7, r5
    3328:	bls.n	3372 <MTPD::GetObject(unsigned long)+0x6a>
        get_buffer();
    332a:	mov	r0, r6
    332c:	bl	21c0 <MTPD::get_buffer()>
        uint32_t avail = sizeof(data_buffer_->buf) - data_buffer_->len;
        uint32_t to_copy = min(size - pos, avail);
        // Read directly from storage into usb buffer.
        storage_->read(object_id, pos,
    3330:	ldmia.w	r6, {r0, r3}
      write_length_ += size;
    } else {
      uint32_t pos = 0;
      while (pos < size) {
        get_buffer();
        uint32_t avail = sizeof(data_buffer_->buf) - data_buffer_->len;
    3334:	ldrh.w	r2, [r3], #8
        uint32_t to_copy = min(size - pos, avail);
        // Read directly from storage into usb buffer.
        storage_->read(object_id, pos,
                    (char*)(data_buffer_->buf + data_buffer_->len), to_copy);
    3338:	ldr	r1, [r0, #0]
    333a:	subs	r4, r7, r5
    333c:	rsb	lr, r2, #64	; 0x40
    3340:	cmp	r4, lr
    3342:	it	cs
    3344:	movcs	r4, lr
    3346:	str	r4, [sp, #0]
    3348:	add	r3, r2
    334a:	ldr.w	sl, [r1, #40]	; 0x28
    334e:	mov	r2, r5
    3350:	mov	r1, r8
    3352:	blx	sl
        pos += to_copy;
        data_buffer_->len += to_copy;
    3354:	ldr	r1, [r6, #4]
    3356:	ldrh	r3, [r1, #0]
    3358:	add	r3, r4
    335a:	uxth	r3, r3
        if (data_buffer_->len == sizeof(data_buffer_->buf)) {
    335c:	cmp	r3, #64	; 0x40
        uint32_t avail = sizeof(data_buffer_->buf) - data_buffer_->len;
        uint32_t to_copy = min(size - pos, avail);
        // Read directly from storage into usb buffer.
        storage_->read(object_id, pos,
                    (char*)(data_buffer_->buf + data_buffer_->len), to_copy);
        pos += to_copy;
    335e:	add	r5, r4
        data_buffer_->len += to_copy;
    3360:	strh	r3, [r1, #0]
        if (data_buffer_->len == sizeof(data_buffer_->buf)) {
    3362:	bne.n	3326 <MTPD::GetObject(unsigned long)+0x1e>
          usb_tx(MTP_TX_ENDPOINT, data_buffer_);
    3364:	movs	r0, #4
    3366:	bl	a420 <usb_tx>
    uint32_t size = storage_->GetSize(object_id);
    if (write_get_length_) {
      write_length_ += size;
    } else {
      uint32_t pos = 0;
      while (pos < size) {
    336a:	cmp	r7, r5
                    (char*)(data_buffer_->buf + data_buffer_->len), to_copy);
        pos += to_copy;
        data_buffer_->len += to_copy;
        if (data_buffer_->len == sizeof(data_buffer_->buf)) {
          usb_tx(MTP_TX_ENDPOINT, data_buffer_);
          data_buffer_ = NULL;
    336c:	str.w	r9, [r6, #4]
    uint32_t size = storage_->GetSize(object_id);
    if (write_get_length_) {
      write_length_ += size;
    } else {
      uint32_t pos = 0;
      while (pos < size) {
    3370:	bhi.n	332a <MTPD::GetObject(unsigned long)+0x22>
          usb_tx(MTP_TX_ENDPOINT, data_buffer_);
          data_buffer_ = NULL;
        }
      }
    }
  }
    3372:	add	sp, #8
    3374:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  }
  void MTPD::GetObject(uint32_t object_id) 
  {
    uint32_t size = storage_->GetSize(object_id);
    if (write_get_length_) {
      write_length_ += size;
    3378:	ldr	r3, [r6, #12]
    337a:	add	r7, r3
    337c:	str	r7, [r6, #12]
          usb_tx(MTP_TX_ENDPOINT, data_buffer_);
          data_buffer_ = NULL;
        }
      }
    }
  }
    337e:	add	sp, #8
    3380:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00003384 <MTPD::read(char*, unsigned long)>:
                CONTAINER->params[0], CONTAINER->params[1], CONTAINER->params[2]);  }


  void MTPD::read(char* data, uint32_t size) 
  {
    while (size) {
    3384:	cbz	r2, 33f0 <MTPD::read(char*, unsigned long)+0x6c>
                CONTAINER->op, CONTAINER->len, CONTAINER->type, CONTAINER->transaction_id, \
                CONTAINER->params[0], CONTAINER->params[1], CONTAINER->params[2]);  }


  void MTPD::read(char* data, uint32_t size) 
  {
    3386:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    338a:	mov	r6, r0
    338c:	mov	r5, r1
    while (size) {
    338e:	mov	r8, r2
      }
      size -= to_copy;
      data_buffer_->index += to_copy;
      if (data_buffer_->index == data_buffer_->len) {
        usb_free(data_buffer_);
        data_buffer_ = NULL;
    3390:	movs	r7, #0


  void MTPD::read(char* data, uint32_t size) 
  {
    while (size) {
      receive_buffer();
    3392:	mov	r0, r6
    3394:	bl	32ec <MTPD::receive_buffer()>
      uint32_t to_copy = data_buffer_->len - data_buffer_->index;
    3398:	ldr	r3, [r6, #4]
    339a:	ldrh.w	lr, [r3, #2]
    339e:	ldrh.w	ip, [r3]
    33a2:	rsb	r4, lr, ip
    33a6:	cmp	r4, r8
    33a8:	it	cs
    33aa:	movcs	r4, r8
      to_copy = min(to_copy, size);
      if (data) {
        memcpy(data, data_buffer_->buf + data_buffer_->index, to_copy);
    33ac:	add.w	r1, r3, #8
    33b0:	add	r1, lr
    33b2:	mov	r0, r5
    33b4:	mov	r2, r4
        data += to_copy;
      }
      size -= to_copy;
    33b6:	rsb	r8, r4, r8
  {
    while (size) {
      receive_buffer();
      uint32_t to_copy = data_buffer_->len - data_buffer_->index;
      to_copy = min(to_copy, size);
      if (data) {
    33ba:	cbz	r5, 33cc <MTPD::read(char*, unsigned long)+0x48>
        memcpy(data, data_buffer_->buf + data_buffer_->index, to_copy);
    33bc:	bl	9aa8 <memcpy>
    33c0:	ldr	r3, [r6, #4]
    33c2:	ldrh.w	lr, [r3, #2]
    33c6:	ldrh.w	ip, [r3]
        data += to_copy;
    33ca:	add	r5, r4
      }
      size -= to_copy;
      data_buffer_->index += to_copy;
    33cc:	add	r4, lr
    33ce:	uxth	r4, r4
      if (data_buffer_->index == data_buffer_->len) {
    33d0:	cmp	ip, r4
      if (data) {
        memcpy(data, data_buffer_->buf + data_buffer_->index, to_copy);
        data += to_copy;
      }
      size -= to_copy;
      data_buffer_->index += to_copy;
    33d2:	strh	r4, [r3, #2]
      if (data_buffer_->index == data_buffer_->len) {
    33d4:	beq.n	33e0 <MTPD::read(char*, unsigned long)+0x5c>
                CONTAINER->params[0], CONTAINER->params[1], CONTAINER->params[2]);  }


  void MTPD::read(char* data, uint32_t size) 
  {
    while (size) {
    33d6:	cmp.w	r8, #0
    33da:	bne.n	3392 <MTPD::read(char*, unsigned long)+0xe>
    33dc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        data += to_copy;
      }
      size -= to_copy;
      data_buffer_->index += to_copy;
      if (data_buffer_->index == data_buffer_->len) {
        usb_free(data_buffer_);
    33e0:	mov	r0, r3
    33e2:	bl	a264 <usb_free>
        data_buffer_ = NULL;
    33e6:	str	r7, [r6, #4]
                CONTAINER->params[0], CONTAINER->params[1], CONTAINER->params[2]);  }


  void MTPD::read(char* data, uint32_t size) 
  {
    while (size) {
    33e8:	cmp.w	r8, #0
    33ec:	bne.n	3392 <MTPD::read(char*, unsigned long)+0xe>
    33ee:	b.n	33dc <MTPD::read(char*, unsigned long)+0x58>
    33f0:	bx	lr
    33f2:	nop

000033f4 <MTPD::readstring(char*)>:

  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
  uint32_t MTPD::read32() { uint32_t ret; read((char*)&ret, sizeof(ret)); return ret; }

  void MTPD::readstring(char* buffer) {
    33f4:	push	{r4, r5, r6, lr}
    33f6:	sub	sp, #8
      return header.len - 12;
    else
      return 0;
  }

  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
    33f8:	movs	r2, #1
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
  uint32_t MTPD::read32() { uint32_t ret; read((char*)&ret, sizeof(ret)); return ret; }

  void MTPD::readstring(char* buffer) {
    33fa:	mov	r4, r1
      return header.len - 12;
    else
      return 0;
  }

  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
    33fc:	add.w	r1, sp, #6
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
  uint32_t MTPD::read32() { uint32_t ret; read((char*)&ret, sizeof(ret)); return ret; }

  void MTPD::readstring(char* buffer) {
    3400:	mov	r6, r0
      return header.len - 12;
    else
      return 0;
  }

  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
    3402:	bl	3384 <MTPD::read(char*, unsigned long)>
    3406:	ldrb.w	r2, [sp, #6]
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
  uint32_t MTPD::read32() { uint32_t ret; read((char*)&ret, sizeof(ret)); return ret; }

  void MTPD::readstring(char* buffer) {
    int len = read8();
    if (!buffer) {
    340a:	cbz	r4, 342c <MTPD::readstring(char*)+0x38>
    340c:	adds	r5, r4, r2
      read(NULL, len * 2);
    } else {
      for (int i = 0; i < len; i++) {
    340e:	cbz	r2, 3428 <MTPD::readstring(char*)+0x34>
    else
      return 0;
  }

  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    3410:	movs	r2, #2
    3412:	add.w	r1, sp, #6
    3416:	mov	r0, r6
    3418:	bl	3384 <MTPD::read(char*, unsigned long)>
    341c:	ldrh.w	r3, [sp, #6]
    int len = read8();
    if (!buffer) {
      read(NULL, len * 2);
    } else {
      for (int i = 0; i < len; i++) {
        *(buffer++) = read16();
    3420:	strb.w	r3, [r4], #1
  void MTPD::readstring(char* buffer) {
    int len = read8();
    if (!buffer) {
      read(NULL, len * 2);
    } else {
      for (int i = 0; i < len; i++) {
    3424:	cmp	r5, r4
    3426:	bne.n	3410 <MTPD::readstring(char*)+0x1c>
        *(buffer++) = read16();
      }
    }
  }
    3428:	add	sp, #8
    342a:	pop	{r4, r5, r6, pc}
  uint32_t MTPD::read32() { uint32_t ret; read((char*)&ret, sizeof(ret)); return ret; }

  void MTPD::readstring(char* buffer) {
    int len = read8();
    if (!buffer) {
      read(NULL, len * 2);
    342c:	lsls	r2, r2, #1
    342e:	mov	r1, r4
    3430:	mov	r0, r6
    3432:	bl	3384 <MTPD::read(char*, unsigned long)>
    3436:	b.n	3428 <MTPD::readstring(char*)+0x34>

00003438 <MTPD::setObjectPropValue(unsigned long, unsigned long) [clone .part.7]>:
      }
    }
    storage_->close();
  }
  
    uint32_t MTPD::setObjectPropValue(uint32_t p1, uint32_t p2)
    3438:	push	{r4, r5, lr}
    343a:	sub	sp, #132	; 0x84
    343c:	mov	r4, r0
    343e:	mov	r5, r1


  uint32_t MTPD::ReadMTPHeader() 
  {
    MTPHeader header;
    read((char *)&header, sizeof(MTPHeader));
    3440:	movs	r2, #12
    3442:	mov	r1, sp
    3444:	bl	3384 <MTPD::read(char*, unsigned long)>
      receive_buffer();
      if(p2==0xDC07)
      {
        char filename[128];
        ReadMTPHeader();
        readstring(filename);
    3448:	mov	r1, sp
    344a:	mov	r0, r4
    344c:	bl	33f4 <MTPD::readstring(char*)>

        storage_->rename(p1,filename);
    3450:	ldr	r0, [r4, #0]
    3452:	ldr	r3, [r0, #0]
    3454:	mov	r2, sp
    3456:	mov	r1, r5
    3458:	ldr	r3, [r3, #64]	; 0x40
    345a:	blx	r3

        return 0x2001;
      }
      else
        return 0x2005;
    }
    345c:	movw	r0, #8193	; 0x2001
    3460:	add	sp, #132	; 0x84
    3462:	pop	{r4, r5, pc}

00003464 <MTPD::SendObjectInfo(unsigned long, unsigned long)>:
        data_buffer_ = NULL;
      }
    }
  }

  uint32_t MTPD::SendObjectInfo(uint32_t storage, uint32_t parent) {
    3464:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    3468:	sub	sp, #268	; 0x10c


  uint32_t MTPD::ReadMTPHeader() 
  {
    MTPHeader header;
    read((char *)&header, sizeof(MTPHeader));
    346a:	add	r1, sp, #8
        data_buffer_ = NULL;
      }
    }
  }

  uint32_t MTPD::SendObjectInfo(uint32_t storage, uint32_t parent) {
    346c:	mov	r9, r2


  uint32_t MTPD::ReadMTPHeader() 
  {
    MTPHeader header;
    read((char *)&header, sizeof(MTPHeader));
    346e:	movs	r2, #12
        data_buffer_ = NULL;
      }
    }
  }

  uint32_t MTPD::SendObjectInfo(uint32_t storage, uint32_t parent) {
    3470:	mov	r5, r0


  uint32_t MTPD::ReadMTPHeader() 
  {
    MTPHeader header;
    read((char *)&header, sizeof(MTPHeader));
    3472:	bl	3384 <MTPD::read(char*, unsigned long)>
    // check that the type is data
    if(header.type==2)
    3476:	ldrh.w	r3, [sp, #12]
    347a:	cmp	r3, #2
    347c:	it	eq
    347e:	ldreq	r4, [sp, #8]
      return 0;
  }

  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
  uint32_t MTPD::read32() { uint32_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    3480:	mov.w	r2, #4
    3484:	add	r1, sp, #8
    3486:	mov	r0, r5
    3488:	ite	eq
    348a:	subeq	r4, #65	; 0x41
  uint32_t MTPD::ReadMTPHeader() 
  {
    MTPHeader header;
    read((char *)&header, sizeof(MTPHeader));
    // check that the type is data
    if(header.type==2)
    348c:	mvnne.w	r4, #52	; 0x34
      return 0;
  }

  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
  uint32_t MTPD::read32() { uint32_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    3490:	bl	3384 <MTPD::read(char*, unsigned long)>
    else
      return 0;
  }

  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    3494:	movs	r2, #2
    3496:	add	r1, sp, #8
    3498:	mov	r0, r5
    349a:	bl	3384 <MTPD::read(char*, unsigned long)>
    349e:	ldrh.w	r8, [sp, #8]
  uint32_t MTPD::SendObjectInfo(uint32_t storage, uint32_t parent) {
    uint32_t len = ReadMTPHeader();
    char filename[256];

    read32(); len-=4; // storage
    bool dir = read16() == 0x3001; len-=2; // format
    34a2:	movw	r3, #12289	; 0x3001
    else
      return 0;
  }

  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    34a6:	movs	r2, #2
    34a8:	add	r1, sp, #8
    34aa:	mov	r0, r5
  uint32_t MTPD::SendObjectInfo(uint32_t storage, uint32_t parent) {
    uint32_t len = ReadMTPHeader();
    char filename[256];

    read32(); len-=4; // storage
    bool dir = read16() == 0x3001; len-=2; // format
    34ac:	rsb	r8, r3, r8
    else
      return 0;
  }

  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    34b0:	bl	3384 <MTPD::read(char*, unsigned long)>
  uint32_t MTPD::read32() { uint32_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    34b4:	movs	r2, #4
    34b6:	add	r1, sp, #8
    34b8:	mov	r0, r5
    34ba:	bl	3384 <MTPD::read(char*, unsigned long)>
    else
      return 0;
  }

  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    34be:	movs	r2, #2
    34c0:	add	r1, sp, #8
    34c2:	mov	r0, r5
    34c4:	bl	3384 <MTPD::read(char*, unsigned long)>
  uint32_t MTPD::read32() { uint32_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    34c8:	movs	r2, #4
    34ca:	add	r1, sp, #8
    34cc:	mov	r0, r5
    34ce:	bl	3384 <MTPD::read(char*, unsigned long)>
    34d2:	movs	r2, #4
    34d4:	add	r1, sp, #8
    34d6:	mov	r0, r5
    34d8:	bl	3384 <MTPD::read(char*, unsigned long)>
    34dc:	movs	r2, #4
    34de:	add	r1, sp, #8
    34e0:	mov	r0, r5
    34e2:	bl	3384 <MTPD::read(char*, unsigned long)>
    34e6:	movs	r2, #4
    34e8:	add	r1, sp, #8
    34ea:	mov	r0, r5
    34ec:	bl	3384 <MTPD::read(char*, unsigned long)>
    34f0:	movs	r2, #4
    34f2:	add	r1, sp, #8
    34f4:	mov	r0, r5
    34f6:	bl	3384 <MTPD::read(char*, unsigned long)>
    34fa:	movs	r2, #4
    34fc:	add	r1, sp, #8
    34fe:	mov	r0, r5
    3500:	bl	3384 <MTPD::read(char*, unsigned long)>
    3504:	movs	r2, #4
    3506:	add	r1, sp, #8
    3508:	mov	r0, r5
    350a:	bl	3384 <MTPD::read(char*, unsigned long)>
    else
      return 0;
  }

  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    350e:	movs	r2, #2
    3510:	add	r1, sp, #8
    3512:	mov	r0, r5
    3514:	bl	3384 <MTPD::read(char*, unsigned long)>
  uint32_t MTPD::read32() { uint32_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    3518:	movs	r2, #4
    351a:	add	r1, sp, #8
    351c:	mov	r0, r5
    351e:	bl	3384 <MTPD::read(char*, unsigned long)>
    3522:	movs	r2, #4
    3524:	add	r1, sp, #8
    3526:	mov	r0, r5
    3528:	bl	3384 <MTPD::read(char*, unsigned long)>
    read32(); len-=4; // parent
    read16(); len-=2; // association type
    read32(); len-=4; // association description
    read32(); len-=4; // sequence number

    readstring(filename); len -= (2*(strlen(filename)+1)+1); 
    352c:	add	r1, sp, #8
    352e:	mov	r0, r5
    3530:	bl	33f4 <MTPD::readstring(char*)>
    3534:	add	r0, sp, #8
    3536:	bl	cf40 <strlen>
    353a:	adds	r0, #1
    353c:	sub.w	r4, r4, r0, lsl #1
  uint32_t MTPD::SendObjectInfo(uint32_t storage, uint32_t parent) {
    uint32_t len = ReadMTPHeader();
    char filename[256];

    read32(); len-=4; // storage
    bool dir = read16() == 0x3001; len-=2; // format
    3540:	clz	r8, r8
    read32(); len-=4; // association description
    read32(); len-=4; // sequence number

    readstring(filename); len -= (2*(strlen(filename)+1)+1); 
    // ignore rest of ObjectInfo
    while(len>=4) { read32(); len-=4;}
    3544:	cmp	r4, #3
  uint32_t MTPD::SendObjectInfo(uint32_t storage, uint32_t parent) {
    uint32_t len = ReadMTPHeader();
    char filename[256];

    read32(); len-=4; // storage
    bool dir = read16() == 0x3001; len-=2; // format
    3546:	mov.w	r8, r8, lsr #5
    read32(); len-=4; // association description
    read32(); len-=4; // sequence number

    readstring(filename); len -= (2*(strlen(filename)+1)+1); 
    // ignore rest of ObjectInfo
    while(len>=4) { read32(); len-=4;}
    354a:	bls.n	3564 <MTPD::SendObjectInfo(unsigned long, unsigned long)+0x100>
    354c:	mov	r6, r4
    354e:	add	r7, sp, #4
    3550:	subs	r6, #4
      return 0;
  }

  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
  uint32_t MTPD::read32() { uint32_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    3552:	movs	r2, #4
    3554:	mov	r1, r7
    3556:	mov	r0, r5
    3558:	bl	3384 <MTPD::read(char*, unsigned long)>
    read32(); len-=4; // association description
    read32(); len-=4; // sequence number

    readstring(filename); len -= (2*(strlen(filename)+1)+1); 
    // ignore rest of ObjectInfo
    while(len>=4) { read32(); len-=4;}
    355c:	cmp	r6, #3
    355e:	bhi.n	3550 <MTPD::SendObjectInfo(unsigned long, unsigned long)+0xec>
    3560:	and.w	r4, r4, #3
    3564:	add	r7, sp, #4
    while(len) {read8(); len--;}
    3566:	cbz	r4, 3576 <MTPD::SendObjectInfo(unsigned long, unsigned long)+0x112>
      return header.len - 12;
    else
      return 0;
  }

  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
    3568:	movs	r2, #1
    356a:	mov	r1, r7
    356c:	mov	r0, r5
    356e:	bl	3384 <MTPD::read(char*, unsigned long)>
    read32(); len-=4; // sequence number

    readstring(filename); len -= (2*(strlen(filename)+1)+1); 
    // ignore rest of ObjectInfo
    while(len>=4) { read32(); len-=4;}
    while(len) {read8(); len--;}
    3572:	subs	r4, #1
    3574:	bne.n	3568 <MTPD::SendObjectInfo(unsigned long, unsigned long)+0x104>
    
    return storage_->Create(parent, dir, filename);
    3576:	ldr	r0, [r5, #0]
    3578:	ldr	r4, [r0, #0]
    357a:	add	r3, sp, #8
    357c:	mov	r2, r8
    357e:	mov	r1, r9
    3580:	ldr	r4, [r4, #36]	; 0x24
    3582:	blx	r4
  }
    3584:	add	sp, #268	; 0x10c
    3586:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    358a:	nop

0000358c <MTPD::SendObject()>:

  void MTPD::SendObject() {
    358c:	push	{r4, r5, r6, r7, lr}
    358e:	sub	sp, #20


  uint32_t MTPD::ReadMTPHeader() 
  {
    MTPHeader header;
    read((char *)&header, sizeof(MTPHeader));
    3590:	movs	r2, #12
    3592:	add	r1, sp, #4
    while(len) {read8(); len--;}
    
    return storage_->Create(parent, dir, filename);
  }

  void MTPD::SendObject() {
    3594:	mov	r7, r0


  uint32_t MTPD::ReadMTPHeader() 
  {
    MTPHeader header;
    read((char *)&header, sizeof(MTPHeader));
    3596:	bl	3384 <MTPD::read(char*, unsigned long)>
    // check that the type is data
    if(header.type==2)
    359a:	ldrh.w	r3, [sp, #8]
    359e:	cmp	r3, #2
    35a0:	beq.n	35ae <MTPD::SendObject()+0x22>
      {
        usb_free(data_buffer_);
        data_buffer_ = NULL;
      }
    }
    storage_->close();
    35a2:	ldr	r0, [r7, #0]
    35a4:	ldr	r3, [r0, #0]
    35a6:	ldr	r3, [r3, #48]	; 0x30
    35a8:	blx	r3
  }
    35aa:	add	sp, #20
    35ac:	pop	{r4, r5, r6, r7, pc}
  {
    MTPHeader header;
    read((char *)&header, sizeof(MTPHeader));
    // check that the type is data
    if(header.type==2)
      return header.len - 12;
    35ae:	ldr	r5, [sp, #4]
    return storage_->Create(parent, dir, filename);
  }

  void MTPD::SendObject() {
    uint32_t len = ReadMTPHeader();
    while (len) 
    35b0:	subs	r5, #12
    35b2:	beq.n	35a2 <MTPD::SendObject()+0x16>
      data_buffer_->index += to_copy;
      len -= to_copy;
      if (data_buffer_->index == data_buffer_->len) 
      {
        usb_free(data_buffer_);
        data_buffer_ = NULL;
    35b4:	movs	r6, #0

  void MTPD::SendObject() {
    uint32_t len = ReadMTPHeader();
    while (len) 
    { 
      receive_buffer();
    35b6:	mov	r0, r7
    35b8:	bl	32ec <MTPD::receive_buffer()>
      uint32_t to_copy = data_buffer_->len - data_buffer_->index;
      to_copy = min(to_copy, len);
      storage_->write((char*)(data_buffer_->buf + data_buffer_->index), to_copy);
    35bc:	ldmia.w	r7, {r0, r1}
  void MTPD::SendObject() {
    uint32_t len = ReadMTPHeader();
    while (len) 
    { 
      receive_buffer();
      uint32_t to_copy = data_buffer_->len - data_buffer_->index;
    35c0:	ldrh	r2, [r1, #2]
    35c2:	ldrh.w	r4, [r1], #8
      to_copy = min(to_copy, len);
      storage_->write((char*)(data_buffer_->buf + data_buffer_->index), to_copy);
    35c6:	ldr	r3, [r0, #0]
  void MTPD::SendObject() {
    uint32_t len = ReadMTPHeader();
    while (len) 
    { 
      receive_buffer();
      uint32_t to_copy = data_buffer_->len - data_buffer_->index;
    35c8:	subs	r4, r4, r2
    35ca:	cmp	r4, r5
    35cc:	it	cs
    35ce:	movcs	r4, r5
      to_copy = min(to_copy, len);
      storage_->write((char*)(data_buffer_->buf + data_buffer_->index), to_copy);
    35d0:	ldr	r3, [r3, #44]	; 0x2c
    35d2:	add	r1, r2
    35d4:	mov	r2, r4
    35d6:	blx	r3
      data_buffer_->index += to_copy;
    35d8:	ldr	r0, [r7, #4]
    35da:	ldrh	r3, [r0, #2]
      len -= to_copy;
      if (data_buffer_->index == data_buffer_->len) 
    35dc:	ldrh	r2, [r0, #0]
    { 
      receive_buffer();
      uint32_t to_copy = data_buffer_->len - data_buffer_->index;
      to_copy = min(to_copy, len);
      storage_->write((char*)(data_buffer_->buf + data_buffer_->index), to_copy);
      data_buffer_->index += to_copy;
    35de:	add	r3, r4
    35e0:	uxth	r3, r3
      len -= to_copy;
      if (data_buffer_->index == data_buffer_->len) 
    35e2:	cmp	r2, r3
      receive_buffer();
      uint32_t to_copy = data_buffer_->len - data_buffer_->index;
      to_copy = min(to_copy, len);
      storage_->write((char*)(data_buffer_->buf + data_buffer_->index), to_copy);
      data_buffer_->index += to_copy;
      len -= to_copy;
    35e4:	sub.w	r5, r5, r4
    { 
      receive_buffer();
      uint32_t to_copy = data_buffer_->len - data_buffer_->index;
      to_copy = min(to_copy, len);
      storage_->write((char*)(data_buffer_->buf + data_buffer_->index), to_copy);
      data_buffer_->index += to_copy;
    35e8:	strh	r3, [r0, #2]
      len -= to_copy;
      if (data_buffer_->index == data_buffer_->len) 
    35ea:	beq.n	35f2 <MTPD::SendObject()+0x66>
    return storage_->Create(parent, dir, filename);
  }

  void MTPD::SendObject() {
    uint32_t len = ReadMTPHeader();
    while (len) 
    35ec:	cmp	r5, #0
    35ee:	bne.n	35b6 <MTPD::SendObject()+0x2a>
    35f0:	b.n	35a2 <MTPD::SendObject()+0x16>
      storage_->write((char*)(data_buffer_->buf + data_buffer_->index), to_copy);
      data_buffer_->index += to_copy;
      len -= to_copy;
      if (data_buffer_->index == data_buffer_->len) 
      {
        usb_free(data_buffer_);
    35f2:	bl	a264 <usb_free>
        data_buffer_ = NULL;
    35f6:	str	r6, [r7, #4]
    return storage_->Create(parent, dir, filename);
  }

  void MTPD::SendObject() {
    uint32_t len = ReadMTPHeader();
    while (len) 
    35f8:	cmp	r5, #0
    35fa:	bne.n	35b6 <MTPD::SendObject()+0x2a>
    35fc:	b.n	35a2 <MTPD::SendObject()+0x16>
    35fe:	nop

00003600 <MTPD::loop()>:
      else
        return 0x2005;
    }

  void MTPD::loop(void) 
  {
    3600:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    3604:	mov	r6, r0
    3606:	sub	sp, #44	; 0x2c
    usb_packet_t *receive_buffer;
    if ((receive_buffer = usb_rx(MTP_RX_ENDPOINT))) {
    3608:	movs	r0, #5
    360a:	bl	a2b0 <usb_rx>
    360e:	cmp	r0, #0
    3610:	beq.n	3676 <MTPD::loop()+0x76>
      printContainer();
    3612:	ldr	r1, [r0, #28]
    3614:	ldr	r3, [r0, #8]
    3616:	ldrh	r2, [r0, #14]
    3618:	str	r1, [sp, #16]
    361a:	ldr	r1, [r0, #24]
    361c:	str	r1, [sp, #12]
    361e:	ldr	r1, [r0, #20]
    3620:	str	r1, [sp, #8]
    3622:	ldr	r1, [r0, #16]
    3624:	str	r1, [sp, #4]
    3626:	ldrh	r1, [r0, #12]
    3628:	str	r1, [sp, #0]
    362a:	mov	r4, r0
    362c:	ldr	r1, [pc, #716]	; (38fc <MTPD::loop()+0x2fc>)
    362e:	ldr	r0, [pc, #720]	; (3900 <MTPD::loop()+0x300>)
    3630:	bl	b280 <Print::printf(char const*, ...)>
      
      uint32_t return_code = 0;
      uint32_t p1 = 0, p2 = 0;
      if (receive_buffer->len >= 12) {
    3634:	ldrh	r3, [r4, #0]
    3636:	cmp	r3, #11
    3638:	bls.n	3688 <MTPD::loop()+0x88>
        return_code = 0x2001;  // Ok
        receive_buffer->len = 12;
        
        if (CONTAINER->type == 1) { // command
    363a:	ldrh	r2, [r4, #12]
      
      uint32_t return_code = 0;
      uint32_t p1 = 0, p2 = 0;
      if (receive_buffer->len >= 12) {
        return_code = 0x2001;  // Ok
        receive_buffer->len = 12;
    363c:	movs	r5, #12
        
        if (CONTAINER->type == 1) { // command
    363e:	cmp	r2, #1
      
      uint32_t return_code = 0;
      uint32_t p1 = 0, p2 = 0;
      if (receive_buffer->len >= 12) {
        return_code = 0x2001;  // Ok
        receive_buffer->len = 12;
    3640:	strh	r5, [r4, #0]
        
        if (CONTAINER->type == 1) { // command
    3642:	beq.n	3690 <MTPD::loop()+0x90>
    3644:	mov.w	r2, #8192	; 0x2000
    3648:	ldr	r3, [r4, #8]
    364a:	ldr	r5, [r4, #24]
    364c:	ldr	r0, [r4, #28]
    364e:	mov	r6, r2
    usb_packet_t *receive_buffer;
    if ((receive_buffer = usb_rx(MTP_RX_ENDPOINT))) {
      printContainer();
      
      uint32_t return_code = 0;
      uint32_t p1 = 0, p2 = 0;
    3650:	movs	r7, #0
        } else {
          return_code = 0x2000;  // undefined
        }
      }
      if (return_code) {
        CONTAINER->type = 3;
    3652:	movs	r1, #3
    3654:	strh	r1, [r4, #12]
        CONTAINER->op = return_code;
    3656:	strh	r6, [r4, #14]
        CONTAINER->params[0] = p1;
    3658:	str	r7, [r4, #20]
        printContainer();
    365a:	str	r0, [sp, #16]
    365c:	str	r5, [sp, #12]
    365e:	str	r7, [sp, #8]
    3660:	ldr	r0, [r4, #16]
    3662:	str	r0, [sp, #4]
    3664:	str	r1, [sp, #0]
    3666:	ldr	r0, [pc, #664]	; (3900 <MTPD::loop()+0x300>)
    3668:	ldr	r1, [pc, #656]	; (38fc <MTPD::loop()+0x2fc>)
    366a:	bl	b280 <Print::printf(char const*, ...)>

        usb_tx(MTP_TX_ENDPOINT, receive_buffer);
    366e:	mov	r1, r4
    3670:	movs	r0, #4
    3672:	bl	a420 <usb_tx>
      } else {
          usb_free(receive_buffer);
      }
    }
    // Maybe put event handling inside mtp_yield()?
    if ((receive_buffer = usb_rx(MTP_EVENT_ENDPOINT))) {
    3676:	movs	r0, #6
    3678:	bl	a2b0 <usb_rx>
    367c:	cbz	r0, 3682 <MTPD::loop()+0x82>
      usb_free(receive_buffer);
    367e:	bl	a264 <usb_free>
    }
  }
    3682:	add	sp, #44	; 0x2c
    3684:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        printContainer();

        usb_tx(MTP_TX_ENDPOINT, receive_buffer);
        receive_buffer = 0;
      } else {
          usb_free(receive_buffer);
    3688:	mov	r0, r4
    368a:	bl	a264 <usb_free>
    368e:	b.n	3676 <MTPD::loop()+0x76>
      if (receive_buffer->len >= 12) {
        return_code = 0x2001;  // Ok
        receive_buffer->len = 12;
        
        if (CONTAINER->type == 1) { // command
          switch (CONTAINER->op) {
    3690:	ldrh	r1, [r4, #14]
    3692:	movw	r3, #4108	; 0x100c
    3696:	cmp	r1, r3
    3698:	beq.w	394e <MTPD::loop()+0x34e>
    369c:	bls.n	3726 <MTPD::loop()+0x126>
    369e:	movw	r3, #4121	; 0x1019
    36a2:	cmp	r1, r3
    36a4:	beq.w	3972 <MTPD::loop()+0x372>
    36a8:	bls.n	3768 <MTPD::loop()+0x168>
    36aa:	movw	r3, #38914	; 0x9802
    36ae:	cmp	r1, r3
    36b0:	beq.w	3a34 <MTPD::loop()+0x434>
    36b4:	bhi.w	388e <MTPD::loop()+0x28e>
    36b8:	movw	r3, #4122	; 0x101a
    36bc:	cmp	r1, r3
    36be:	beq.w	383c <MTPD::loop()+0x23c>
    36c2:	movw	r3, #38913	; 0x9801
    36c6:	cmp	r1, r3
    36c8:	bne.w	383c <MTPD::loop()+0x23c>
          case 0x101A:  // CopyObject
              return_code = 0x2005;
              break;

          case 0x9801:  // getObjectPropsSupported
            p1=CONTAINER->params[0];
    36cc:	ldr	r7, [r4, #20]

              TRANSMIT(getObjectPropsSupported(p1));
    36ce:	movs	r3, #1
    36d0:	movs	r5, #0
    36d2:	mov	r1, r7
    36d4:	strb	r3, [r6, #8]
    36d6:	mov	r0, r6
    36d8:	str	r5, [r6, #12]
    36da:	bl	28d0 <MTPD::getObjectPropsSupported(unsigned long)>
    36de:	ldr	r3, [r6, #12]
    36e0:	strb	r5, [r6, #8]
    36e2:	adds	r3, #12
    36e4:	movs	r2, #2
    36e6:	strh.w	r2, [sp, #32]
    36ea:	str	r3, [sp, #28]
    36ec:	ldrh	r3, [r4, #14]
    36ee:	strh.w	r3, [sp, #34]	; 0x22
    36f2:	ldr	r3, [r4, #16]
    36f4:	str	r3, [sp, #36]	; 0x24
    36f6:	add	r1, sp, #28
    36f8:	mov	r0, r6
    36fa:	movs	r2, #12
    36fc:	bl	21d8 <MTPD::write(char const*, int) [clone .part.2]>
    3700:	mov	r1, r7
    3702:	mov	r0, r6
    3704:	bl	28d0 <MTPD::getObjectPropsSupported(unsigned long)>

          case 0x9803:  // getObjectPropertyValue
            p1=CONTAINER->params[0];
            p2=CONTAINER->params[1];

            TRANSMIT(getObjectPropValue(p1,p2));
    3708:	mov	r0, r6
    370a:	bl	21c0 <MTPD::get_buffer()>
    370e:	ldr	r1, [r6, #4]
    3710:	movs	r0, #4
    3712:	bl	a420 <usb_tx>
    3716:	str	r5, [r6, #4]
              break;
    3718:	movw	r2, #8193	; 0x2001
    371c:	ldr	r3, [r4, #8]
    371e:	ldr	r5, [r4, #24]
    3720:	ldr	r0, [r4, #28]
    3722:	mov	r6, r2
    3724:	b.n	3652 <MTPD::loop()+0x52>
      if (receive_buffer->len >= 12) {
        return_code = 0x2001;  // Ok
        receive_buffer->len = 12;
        
        if (CONTAINER->type == 1) { // command
          switch (CONTAINER->op) {
    3726:	movw	r3, #4101	; 0x1005
    372a:	cmp	r1, r3
    372c:	beq.w	3992 <MTPD::loop()+0x392>
    3730:	bls.n	37da <MTPD::loop()+0x1da>
    3732:	movw	r3, #4104	; 0x1008
    3736:	cmp	r1, r3
    3738:	beq.w	38c2 <MTPD::loop()+0x2c2>
    373c:	bhi.w	3856 <MTPD::loop()+0x256>
    3740:	movw	r3, #4102	; 0x1006
    3744:	cmp	r1, r3
    3746:	beq.w	3a02 <MTPD::loop()+0x402>
    374a:	movw	r3, #4103	; 0x1007
    374e:	cmp	r1, r3
    3750:	bne.n	383c <MTPD::loop()+0x23c>
              } else {
                p1 = GetNumObjects(CONTAINER->params[0], CONTAINER->params[2]);
              }
              break;
            case 0x1007:  // GetObjectHandles
              if (CONTAINER->params[1]) {
    3752:	ldr	r5, [r4, #24]
    3754:	cmp	r5, #0
    3756:	beq.w	3b1e <MTPD::loop()+0x51e>
              break;
            case 0x1009:  // GetObject
              TRANSMIT(GetObject(CONTAINER->params[0]));
              break;
            case 0x100B:  // DeleteObject
              if (CONTAINER->params[1]) {
    375a:	movw	r2, #8212	; 0x2014
    375e:	mov	r6, r2
    3760:	ldr	r3, [r4, #8]
    3762:	ldr	r0, [r4, #28]
    usb_packet_t *receive_buffer;
    if ((receive_buffer = usb_rx(MTP_RX_ENDPOINT))) {
      printContainer();
      
      uint32_t return_code = 0;
      uint32_t p1 = 0, p2 = 0;
    3764:	movs	r7, #0
    3766:	b.n	3652 <MTPD::loop()+0x52>
      if (receive_buffer->len >= 12) {
        return_code = 0x2001;  // Ok
        receive_buffer->len = 12;
        
        if (CONTAINER->type == 1) { // command
          switch (CONTAINER->op) {
    3768:	movw	r3, #4112	; 0x1010
    376c:	cmp	r1, r3
    376e:	beq.n	383c <MTPD::loop()+0x23c>
    3770:	bls.n	3842 <MTPD::loop()+0x242>
    3772:	movw	r3, #4116	; 0x1014
    3776:	cmp	r1, r3
    3778:	beq.w	3904 <MTPD::loop()+0x304>
    377c:	movw	r3, #4117	; 0x1015
    3780:	cmp	r1, r3
    3782:	bne.n	383c <MTPD::loop()+0x23c>
              break;
            case 0x1014:  // GetDevicePropDesc
              TRANSMIT(GetDevicePropDesc(CONTAINER->params[0]));
              break;
            case 0x1015:  // GetDevicePropvalue
              TRANSMIT(GetDevicePropValue(CONTAINER->params[0]));
    3784:	movs	r2, #0
    3786:	movs	r3, #1
    3788:	strb	r3, [r6, #8]
    378a:	str	r2, [r6, #12]
      data_buffer_ = NULL;
    }
  }
*/
  void MTPD::GetDevicePropValue(uint32_t prop) {
    switch (prop) {
    378c:	ldr	r2, [r4, #20]
    378e:	movw	r3, #54274	; 0xd402
    3792:	cmp	r2, r3
    3794:	beq.w	3b84 <MTPD::loop()+0x584>
    3798:	movs	r3, #12
              break;
            case 0x1014:  // GetDevicePropDesc
              TRANSMIT(GetDevicePropDesc(CONTAINER->params[0]));
              break;
            case 0x1015:  // GetDevicePropvalue
              TRANSMIT(GetDevicePropValue(CONTAINER->params[0]));
    379a:	movs	r1, #0
    379c:	movs	r2, #2
    379e:	strb	r1, [r6, #8]
    37a0:	strh.w	r2, [sp, #32]
    37a4:	str	r3, [sp, #28]
    37a6:	ldrh	r3, [r4, #14]
    37a8:	strh.w	r3, [sp, #34]	; 0x22
    37ac:	ldr	r3, [r4, #16]
    37ae:	str	r3, [sp, #36]	; 0x24
    37b0:	movs	r2, #12
    37b2:	add	r1, sp, #28
    37b4:	mov	r0, r6
    37b6:	bl	21d8 <MTPD::write(char const*, int) [clone .part.2]>
      data_buffer_ = NULL;
    }
  }
*/
  void MTPD::GetDevicePropValue(uint32_t prop) {
    switch (prop) {
    37ba:	ldr	r2, [r4, #20]
    37bc:	movw	r3, #54274	; 0xd402
    37c0:	cmp	r2, r3
    37c2:	beq.w	3b7a <MTPD::loop()+0x57a>
              break;
            case 0x1014:  // GetDevicePropDesc
              TRANSMIT(GetDevicePropDesc(CONTAINER->params[0]));
              break;
            case 0x1015:  // GetDevicePropvalue
              TRANSMIT(GetDevicePropValue(CONTAINER->params[0]));
    37c6:	mov	r0, r6
    37c8:	bl	21c0 <MTPD::get_buffer()>
    37cc:	movs	r7, #0
    37ce:	ldr	r1, [r6, #4]
    37d0:	movs	r0, #4
    37d2:	bl	a420 <usb_tx>
    37d6:	str	r7, [r6, #4]
    37d8:	b.n	3718 <MTPD::loop()+0x118>
      if (receive_buffer->len >= 12) {
        return_code = 0x2001;  // Ok
        receive_buffer->len = 12;
        
        if (CONTAINER->type == 1) { // command
          switch (CONTAINER->op) {
    37da:	movw	r3, #4099	; 0x1003
    37de:	cmp	r1, r3
    37e0:	bhi.w	39cc <MTPD::loop()+0x3cc>
    37e4:	movw	r3, #4098	; 0x1002
    37e8:	cmp	r1, r3
    37ea:	bcs.n	3850 <MTPD::loop()+0x250>
    37ec:	movw	r3, #4097	; 0x1001
    37f0:	cmp	r1, r3
    37f2:	bne.n	383c <MTPD::loop()+0x23c>
            case 0x1001: // GetDescription
              TRANSMIT(WriteDescriptor());
    37f4:	movs	r3, #1
    37f6:	movs	r7, #0
    37f8:	strb	r3, [r6, #8]
    37fa:	mov	r0, r6
    37fc:	str	r7, [r6, #12]
    37fe:	bl	23a0 <MTPD::WriteDescriptor()>
    3802:	ldr	r3, [r6, #12]
    3804:	strb	r7, [r6, #8]
    3806:	adds	r3, #12
    3808:	movs	r2, #2
    380a:	strh.w	r2, [sp, #32]
    380e:	str	r3, [sp, #28]
    3810:	ldrh	r3, [r4, #14]
    3812:	strh.w	r3, [sp, #34]	; 0x22
    3816:	ldr	r3, [r4, #16]
    3818:	str	r3, [sp, #36]	; 0x24
    381a:	mov	r0, r6
    381c:	movs	r2, #12
    381e:	add	r1, sp, #28
    3820:	bl	21d8 <MTPD::write(char const*, int) [clone .part.2]>
    3824:	mov	r0, r6
    3826:	bl	23a0 <MTPD::WriteDescriptor()>
              openSession();
              break;
            case 0x1003:  // CloseSession
              break;
            case 0x1004:  // GetStorageIDs
              TRANSMIT(WriteStorageIDs());
    382a:	mov	r0, r6
    382c:	bl	21c0 <MTPD::get_buffer()>
    3830:	ldr	r1, [r6, #4]
    3832:	movs	r0, #4
    3834:	bl	a420 <usb_tx>
    3838:	str	r7, [r6, #4]
    383a:	b.n	3718 <MTPD::loop()+0x118>
              return_code = setObjectPropValue(p1,p2);
              break;
              
            default:
              return_code = 0x2005;  // operation not supported
              break;
    383c:	movw	r2, #8197	; 0x2005
    3840:	b.n	3648 <MTPD::loop()+0x48>
      if (receive_buffer->len >= 12) {
        return_code = 0x2001;  // Ok
        receive_buffer->len = 12;
        
        if (CONTAINER->type == 1) { // command
          switch (CONTAINER->op) {
    3842:	movw	r3, #4109	; 0x100d
    3846:	cmp	r1, r3
    3848:	bne.n	383c <MTPD::loop()+0x23c>
                  p1 = CONTAINER->params[0];
              if (!p1) p1 = 1;
              CONTAINER->len = receive_buffer->len = 12 + 3 * 4;
              break;
            case 0x100D:  // SendObject
              SendObject();
    384a:	mov	r0, r6
    384c:	bl	358c <MTPD::SendObject()>
              break;
    3850:	movw	r2, #8193	; 0x2001
    3854:	b.n	3648 <MTPD::loop()+0x48>
      if (receive_buffer->len >= 12) {
        return_code = 0x2001;  // Ok
        receive_buffer->len = 12;
        
        if (CONTAINER->type == 1) { // command
          switch (CONTAINER->op) {
    3856:	movw	r3, #4105	; 0x1009
    385a:	cmp	r1, r3
    385c:	beq.w	3a90 <MTPD::loop()+0x490>
    3860:	movw	r3, #4107	; 0x100b
    3864:	cmp	r1, r3
    3866:	bne.n	383c <MTPD::loop()+0x23c>
              break;
            case 0x1009:  // GetObject
              TRANSMIT(GetObject(CONTAINER->params[0]));
              break;
            case 0x100B:  // DeleteObject
              if (CONTAINER->params[1]) {
    3868:	ldr	r5, [r4, #24]
    386a:	cmp	r5, #0
    386c:	bne.w	375a <MTPD::loop()+0x15a>
                return_code = 0x2014; // spec by format unsupported
              } else {
                if (!storage_->DeleteObject(CONTAINER->params[0])) {
    3870:	ldr	r0, [r6, #0]
    3872:	ldr	r1, [r4, #20]
    3874:	ldr	r3, [r0, #0]
    3876:	ldr	r3, [r3, #52]	; 0x34
    3878:	blx	r3
    387a:	cmp	r0, #0
    387c:	bne.n	3850 <MTPD::loop()+0x250>
    387e:	movw	r2, #8210	; 0x2012
    usb_packet_t *receive_buffer;
    if ((receive_buffer = usb_rx(MTP_RX_ENDPOINT))) {
      printContainer();
      
      uint32_t return_code = 0;
      uint32_t p1 = 0, p2 = 0;
    3882:	mov	r7, r0
    3884:	mov	r6, r2
    3886:	ldr	r3, [r4, #8]
    3888:	ldr	r5, [r4, #24]
    388a:	ldr	r0, [r4, #28]
    388c:	b.n	3652 <MTPD::loop()+0x52>
      if (receive_buffer->len >= 12) {
        return_code = 0x2001;  // Ok
        receive_buffer->len = 12;
        
        if (CONTAINER->type == 1) { // command
          switch (CONTAINER->op) {
    388e:	movw	r3, #38915	; 0x9803
    3892:	cmp	r1, r3
    3894:	beq.w	3acc <MTPD::loop()+0x4cc>
    3898:	movw	r3, #38916	; 0x9804
    389c:	cmp	r1, r3
    389e:	bne.n	383c <MTPD::loop()+0x23c>
              break;

          case 0x9804:  // setObjectPropertyValue

            p1=CONTAINER->params[0];
            p2=CONTAINER->params[1];
    38a0:	ldr	r5, [r4, #24]
            TRANSMIT(getObjectPropValue(p1,p2));
              break;

          case 0x9804:  // setObjectPropertyValue

            p1=CONTAINER->params[0];
    38a2:	ldr	r7, [r4, #20]
    storage_->close();
  }
  
    uint32_t MTPD::setObjectPropValue(uint32_t p1, uint32_t p2)
    {
      receive_buffer();
    38a4:	mov	r0, r6
    38a6:	bl	32ec <MTPD::receive_buffer()>
      if(p2==0xDC07)
    38aa:	movw	r3, #56327	; 0xdc07
    38ae:	cmp	r5, r3
    38b0:	beq.w	3b92 <MTPD::loop()+0x592>
    38b4:	movw	r2, #8197	; 0x2005
    38b8:	mov	r6, r2
    38ba:	ldr	r3, [r4, #8]
    38bc:	ldr	r5, [r4, #24]
    38be:	ldr	r0, [r4, #28]
    38c0:	b.n	3652 <MTPD::loop()+0x52>
              } else {
                TRANSMIT(GetObjectHandles(CONTAINER->params[0], CONTAINER->params[2]));
              }
              break;
            case 0x1008:  // GetObjectInfo
              TRANSMIT(GetObjectInfo(CONTAINER->params[0]));
    38c2:	movs	r7, #0
    38c4:	strb	r2, [r6, #8]
    38c6:	str	r7, [r6, #12]
    38c8:	ldr	r1, [r4, #20]
    38ca:	mov	r0, r6
    38cc:	bl	2684 <MTPD::GetObjectInfo(unsigned long)>
    38d0:	ldr	r3, [r6, #12]
    38d2:	strb	r7, [r6, #8]
    38d4:	adds	r3, #12
    38d6:	movs	r2, #2
    38d8:	strh.w	r2, [sp, #32]
    38dc:	str	r3, [sp, #28]
    38de:	ldrh	r3, [r4, #14]
    38e0:	strh.w	r3, [sp, #34]	; 0x22
    38e4:	ldr	r3, [r4, #16]
    38e6:	str	r3, [sp, #36]	; 0x24
    38e8:	add	r1, sp, #28
    38ea:	mov	r0, r6
    38ec:	mov	r2, r5
    38ee:	bl	21d8 <MTPD::write(char const*, int) [clone .part.2]>
    38f2:	ldr	r1, [r4, #20]
    38f4:	mov	r0, r6
    38f6:	bl	2684 <MTPD::GetObjectInfo(unsigned long)>
    38fa:	b.n	382a <MTPD::loop()+0x22a>
    38fc:	.word	0x000105a4
    3900:	.word	0x1fff09a4
              break;
            case 0x100D:  // SendObject
              SendObject();
              break;
            case 0x1014:  // GetDevicePropDesc
              TRANSMIT(GetDevicePropDesc(CONTAINER->params[0]));
    3904:	movs	r3, #1
    3906:	movs	r2, #0
    3908:	strb	r3, [r6, #8]
    390a:	str	r2, [r6, #12]
        break;
    }
  }

  void MTPD::GetDevicePropDesc(uint32_t prop) {
    switch (prop) {
    390c:	ldr	r1, [r4, #20]
    390e:	movw	r3, #54274	; 0xd402
    3912:	cmp	r1, r3
    3914:	beq.w	3b12 <MTPD::loop()+0x512>
    3918:	movs	r3, #12
              break;
            case 0x100D:  // SendObject
              SendObject();
              break;
            case 0x1014:  // GetDevicePropDesc
              TRANSMIT(GetDevicePropDesc(CONTAINER->params[0]));
    391a:	movs	r1, #0
    391c:	movs	r2, #2
    391e:	strb	r1, [r6, #8]
    3920:	strh.w	r2, [sp, #32]
    3924:	str	r3, [sp, #28]
    3926:	ldrh	r3, [r4, #14]
    3928:	strh.w	r3, [sp, #34]	; 0x22
    392c:	ldr	r3, [r4, #16]
    392e:	str	r3, [sp, #36]	; 0x24
    3930:	add	r1, sp, #28
    3932:	movs	r2, #12
    3934:	mov	r0, r6
    3936:	bl	21d8 <MTPD::write(char const*, int) [clone .part.2]>
        break;
    }
  }

  void MTPD::GetDevicePropDesc(uint32_t prop) {
    switch (prop) {
    393a:	ldr	r1, [r4, #20]
    393c:	movw	r3, #54274	; 0xd402
    3940:	cmp	r1, r3
    3942:	bne.w	37c6 <MTPD::loop()+0x1c6>
    3946:	mov	r0, r6
    3948:	bl	22e4 <MTPD::GetDevicePropDesc(unsigned long) [clone .part.4]>
    394c:	b.n	37c6 <MTPD::loop()+0x1c6>
                }
              }
              break;
            case 0x100C:  // SendObjectInfo
              CONTAINER->params[2] =
                  SendObjectInfo(CONTAINER->params[0], // storage
    394e:	mov	r0, r6
    3950:	ldr	r2, [r4, #24]
    3952:	ldr	r1, [r4, #20]
    3954:	bl	3464 <MTPD::SendObjectInfo(unsigned long, unsigned long)>
                                 CONTAINER->params[1]); // parent
                  p1 = CONTAINER->params[0];
    3958:	ldr	r7, [r4, #20]
              }
              break;
            case 0x100C:  // SendObjectInfo
              CONTAINER->params[2] =
                  SendObjectInfo(CONTAINER->params[0], // storage
                                 CONTAINER->params[1]); // parent
    395a:	str	r0, [r4, #28]
                  p1 = CONTAINER->params[0];
              if (!p1) p1 = 1;
              CONTAINER->len = receive_buffer->len = 12 + 3 * 4;
    395c:	movs	r3, #24
            case 0x100C:  // SendObjectInfo
              CONTAINER->params[2] =
                  SendObjectInfo(CONTAINER->params[0], // storage
                                 CONTAINER->params[1]); // parent
                  p1 = CONTAINER->params[0];
              if (!p1) p1 = 1;
    395e:	cmp	r7, #0
              CONTAINER->len = receive_buffer->len = 12 + 3 * 4;
              break;
    3960:	movw	r2, #8193	; 0x2001
            case 0x100C:  // SendObjectInfo
              CONTAINER->params[2] =
                  SendObjectInfo(CONTAINER->params[0], // storage
                                 CONTAINER->params[1]); // parent
                  p1 = CONTAINER->params[0];
              if (!p1) p1 = 1;
    3964:	it	eq
    3966:	moveq	r7, #1
              CONTAINER->len = receive_buffer->len = 12 + 3 * 4;
    3968:	strh	r3, [r4, #0]
    396a:	str	r3, [r4, #8]
              break;
    396c:	mov	r6, r2
    396e:	ldr	r5, [r4, #24]
    3970:	b.n	3652 <MTPD::loop()+0x52>
    }

    uint32_t MTPD::moveObject(uint32_t p1, uint32_t p3)
    { // p1 object
      // p3 new directory
      storage_->move(p1,p3);
    3972:	ldr	r0, [r6, #0]
    3974:	ldr	r2, [r4, #28]
    3976:	ldr	r3, [r0, #0]
    3978:	ldr	r1, [r4, #20]
    397a:	ldr	r3, [r3, #68]	; 0x44
    397c:	blx	r3
              break;

          case 0x1019:  // MoveObject
              return_code = moveObject(CONTAINER->params[0],CONTAINER->params[2]);
              CONTAINER->len  = receive_buffer->len = 12;
              break;
    397e:	movw	r2, #8193	; 0x2001
              return_code = 0x2005;
              break;

          case 0x1019:  // MoveObject
              return_code = moveObject(CONTAINER->params[0],CONTAINER->params[2]);
              CONTAINER->len  = receive_buffer->len = 12;
    3982:	strh	r5, [r4, #0]
    3984:	str	r5, [r4, #8]
              break;
    3986:	mov	r3, r5
    3988:	mov	r6, r2
    398a:	ldr	r5, [r4, #24]
    398c:	ldr	r0, [r4, #28]
    usb_packet_t *receive_buffer;
    if ((receive_buffer = usb_rx(MTP_RX_ENDPOINT))) {
      printContainer();
      
      uint32_t return_code = 0;
      uint32_t p1 = 0, p2 = 0;
    398e:	movs	r7, #0
              break;

          case 0x1019:  // MoveObject
              return_code = moveObject(CONTAINER->params[0],CONTAINER->params[2]);
              CONTAINER->len  = receive_buffer->len = 12;
              break;
    3990:	b.n	3652 <MTPD::loop()+0x52>
              break;
            case 0x1004:  // GetStorageIDs
              TRANSMIT(WriteStorageIDs());
              break;
            case 0x1005:  // GetStorageInfo
              TRANSMIT(GetStorageInfo(CONTAINER->params[0]));
    3992:	movs	r7, #0
    3994:	strb	r2, [r6, #8]
    3996:	str	r7, [r6, #12]
    3998:	ldr	r1, [r4, #20]
    399a:	mov	r0, r6
    399c:	bl	2ad8 <MTPD::GetStorageInfo(unsigned long)>
    39a0:	ldr	r3, [r6, #12]
    39a2:	strb	r7, [r6, #8]
    39a4:	adds	r3, #12
    39a6:	movs	r2, #2
    39a8:	strh.w	r2, [sp, #32]
    39ac:	str	r3, [sp, #28]
    39ae:	ldrh	r3, [r4, #14]
    39b0:	strh.w	r3, [sp, #34]	; 0x22
    39b4:	ldr	r3, [r4, #16]
    39b6:	str	r3, [sp, #36]	; 0x24
    39b8:	add	r1, sp, #28
    39ba:	mov	r0, r6
    39bc:	mov	r2, r5
    39be:	bl	21d8 <MTPD::write(char const*, int) [clone .part.2]>
    39c2:	ldr	r1, [r4, #20]
    39c4:	mov	r0, r6
    39c6:	bl	2ad8 <MTPD::GetStorageInfo(unsigned long)>
    39ca:	b.n	382a <MTPD::loop()+0x22a>
              openSession();
              break;
            case 0x1003:  // CloseSession
              break;
            case 0x1004:  // GetStorageIDs
              TRANSMIT(WriteStorageIDs());
    39cc:	movs	r7, #0
    39ce:	strb	r2, [r6, #8]
    39d0:	mov	r0, r6
    39d2:	str	r7, [r6, #12]
    39d4:	bl	25b4 <MTPD::WriteStorageIDs()>
    39d8:	ldr	r3, [r6, #12]
    39da:	strb	r7, [r6, #8]
    39dc:	adds	r3, #12
    39de:	movs	r2, #2
    39e0:	strh.w	r2, [sp, #32]
    39e4:	str	r3, [sp, #28]
    39e6:	ldrh	r3, [r4, #14]
    39e8:	strh.w	r3, [sp, #34]	; 0x22
    39ec:	ldr	r3, [r4, #16]
    39ee:	str	r3, [sp, #36]	; 0x24
    39f0:	mov	r0, r6
    39f2:	mov	r2, r5
    39f4:	add	r1, sp, #28
    39f6:	bl	21d8 <MTPD::write(char const*, int) [clone .part.2]>
    39fa:	mov	r0, r6
    39fc:	bl	25b4 <MTPD::WriteStorageIDs()>
    3a00:	b.n	382a <MTPD::loop()+0x22a>
              break;
            case 0x1005:  // GetStorageInfo
              TRANSMIT(GetStorageInfo(CONTAINER->params[0]));
              break;
            case 0x1006:  // GetNumObjects
              if (CONTAINER->params[1]) {
    3a02:	ldr	r5, [r4, #24]
    3a04:	cmp	r5, #0
    3a06:	bne.w	375a <MTPD::loop()+0x15a>
    writestring("");  // volume identifier
  }

  uint32_t MTPD::GetNumObjects(uint32_t storage, uint32_t parent) 
  {
    storage_->StartGetObjectHandles(parent);
    3a0a:	ldr	r0, [r6, #0]
    3a0c:	ldr	r1, [r4, #28]
    3a0e:	ldr	r3, [r0, #0]
    3a10:	ldr	r3, [r3, #20]
    3a12:	blx	r3
    3a14:	b.n	3a18 <MTPD::loop()+0x418>
    int num = 0;
    while (storage_->GetNextObjectHandle()) num++;
    3a16:	adds	r5, #1
    3a18:	ldr	r0, [r6, #0]
    3a1a:	ldr	r3, [r0, #0]
    3a1c:	ldr	r3, [r3, #24]
    3a1e:	blx	r3
    3a20:	cmp	r0, #0
    3a22:	bne.n	3a16 <MTPD::loop()+0x416>
    return num;
    3a24:	movw	r2, #8193	; 0x2001
    3a28:	mov	r7, r5
    3a2a:	mov	r6, r2
    3a2c:	ldr	r3, [r4, #8]
    3a2e:	ldr	r5, [r4, #24]
    3a30:	ldr	r0, [r4, #28]
    3a32:	b.n	3652 <MTPD::loop()+0x52>

              TRANSMIT(getObjectPropsSupported(p1));
              break;

          case 0x9802:  // getObjectPropDesc
            p1=CONTAINER->params[0];
    3a34:	ldr	r7, [r4, #20]
            p2=CONTAINER->params[1];
    3a36:	ldr.w	r9, [r4, #24]

            TRANSMIT(getObjectPropDesc(p1,p2));
    3a3a:	strb	r2, [r6, #8]
    3a3c:	mov.w	r8, #0
    3a40:	mov	r1, r7
    3a42:	mov	r2, r9
    3a44:	mov	r0, r6
    3a46:	str.w	r8, [r6, #12]
    3a4a:	bl	2c04 <MTPD::getObjectPropDesc(unsigned long, unsigned long)>
    3a4e:	ldr	r3, [r6, #12]
    3a50:	strb.w	r8, [r6, #8]
    3a54:	adds	r3, #12
    3a56:	movs	r2, #2
    3a58:	strh.w	r2, [sp, #32]
    3a5c:	str	r3, [sp, #28]
    3a5e:	ldrh	r3, [r4, #14]
    3a60:	strh.w	r3, [sp, #34]	; 0x22
    3a64:	ldr	r3, [r4, #16]
    3a66:	str	r3, [sp, #36]	; 0x24
    3a68:	mov	r2, r5
    3a6a:	add	r1, sp, #28
    3a6c:	mov	r0, r6
    3a6e:	bl	21d8 <MTPD::write(char const*, int) [clone .part.2]>
    3a72:	mov	r2, r9
    3a74:	mov	r1, r7
    3a76:	mov	r0, r6
    3a78:	bl	2c04 <MTPD::getObjectPropDesc(unsigned long, unsigned long)>
    3a7c:	mov	r0, r6
    3a7e:	bl	21c0 <MTPD::get_buffer()>
    3a82:	ldr	r1, [r6, #4]
    3a84:	movs	r0, #4
    3a86:	bl	a420 <usb_tx>
    3a8a:	str.w	r8, [r6, #4]
    3a8e:	b.n	3718 <MTPD::loop()+0x118>
              break;
            case 0x1008:  // GetObjectInfo
              TRANSMIT(GetObjectInfo(CONTAINER->params[0]));
              break;
            case 0x1009:  // GetObject
              TRANSMIT(GetObject(CONTAINER->params[0]));
    3a90:	movs	r7, #0
    3a92:	movs	r3, #1
    3a94:	strb	r3, [r6, #8]
    3a96:	str	r7, [r6, #12]
    3a98:	ldr	r1, [r4, #20]
    3a9a:	mov	r0, r6
    3a9c:	bl	3308 <MTPD::GetObject(unsigned long)>
    3aa0:	ldr	r3, [r6, #12]
    3aa2:	strb	r7, [r6, #8]
    3aa4:	adds	r3, #12
    3aa6:	movs	r2, #2
    3aa8:	strh.w	r2, [sp, #32]
    3aac:	str	r3, [sp, #28]
    3aae:	ldrh	r3, [r4, #14]
    3ab0:	strh.w	r3, [sp, #34]	; 0x22
    3ab4:	ldr	r3, [r4, #16]
    3ab6:	str	r3, [sp, #36]	; 0x24
    3ab8:	add	r1, sp, #28
    3aba:	mov	r0, r6
    3abc:	movs	r2, #12
    3abe:	bl	21d8 <MTPD::write(char const*, int) [clone .part.2]>
    3ac2:	ldr	r1, [r4, #20]
    3ac4:	mov	r0, r6
    3ac6:	bl	3308 <MTPD::GetObject(unsigned long)>
    3aca:	b.n	382a <MTPD::loop()+0x22a>

            TRANSMIT(getObjectPropDesc(p1,p2));
              break;

          case 0x9803:  // getObjectPropertyValue
            p1=CONTAINER->params[0];
    3acc:	ldr	r7, [r4, #20]
            p2=CONTAINER->params[1];
    3ace:	ldr.w	r8, [r4, #24]

            TRANSMIT(getObjectPropValue(p1,p2));
    3ad2:	movs	r5, #0
    3ad4:	movs	r3, #1
    3ad6:	mov	r1, r7
    3ad8:	mov	r2, r8
    3ada:	strb	r3, [r6, #8]
    3adc:	mov	r0, r6
    3ade:	str	r5, [r6, #12]
    3ae0:	bl	293c <MTPD::getObjectPropValue(unsigned long, unsigned long)>
    3ae4:	ldr	r3, [r6, #12]
    3ae6:	strb	r5, [r6, #8]
    3ae8:	adds	r3, #12
    3aea:	movs	r2, #2
    3aec:	strh.w	r2, [sp, #32]
    3af0:	str	r3, [sp, #28]
    3af2:	ldrh	r3, [r4, #14]
    3af4:	strh.w	r3, [sp, #34]	; 0x22
    3af8:	ldr	r3, [r4, #16]
    3afa:	str	r3, [sp, #36]	; 0x24
    3afc:	add	r1, sp, #28
    3afe:	mov	r0, r6
    3b00:	movs	r2, #12
    3b02:	bl	21d8 <MTPD::write(char const*, int) [clone .part.2]>
    3b06:	mov	r2, r8
    3b08:	mov	r1, r7
    3b0a:	mov	r0, r6
    3b0c:	bl	293c <MTPD::getObjectPropValue(unsigned long, unsigned long)>
    3b10:	b.n	3708 <MTPD::loop()+0x108>
    3b12:	mov	r0, r6
    3b14:	bl	22e4 <MTPD::GetDevicePropDesc(unsigned long) [clone .part.4]>
    3b18:	ldr	r3, [r6, #12]
    3b1a:	adds	r3, #12
    3b1c:	b.n	391a <MTPD::loop()+0x31a>
              break;
            case 0x1007:  // GetObjectHandles
              if (CONTAINER->params[1]) {
                return_code = 0x2014; // spec by format unsupported
              } else {
                TRANSMIT(GetObjectHandles(CONTAINER->params[0], CONTAINER->params[2]));
    3b1e:	movs	r3, #1
    3b20:	str	r5, [r6, #12]
    3b22:	strb	r3, [r6, #8]
    3b24:	mov	r0, r6
    3b26:	ldr	r2, [r4, #28]
    3b28:	ldr	r1, [r4, #20]
    3b2a:	bl	25f4 <MTPD::GetObjectHandles(unsigned long, unsigned long)>
    3b2e:	ldr	r3, [r6, #12]
    3b30:	strb	r5, [r6, #8]
    3b32:	adds	r3, #12
    3b34:	movs	r2, #2
    3b36:	strh.w	r2, [sp, #32]
    3b3a:	str	r3, [sp, #28]
    3b3c:	ldrh	r3, [r4, #14]
    3b3e:	strh.w	r3, [sp, #34]	; 0x22
    3b42:	ldr	r3, [r4, #16]
    3b44:	str	r3, [sp, #36]	; 0x24
    3b46:	mov	r0, r6
    3b48:	movs	r2, #12
    3b4a:	add	r1, sp, #28
    3b4c:	bl	21d8 <MTPD::write(char const*, int) [clone .part.2]>
    3b50:	ldr	r2, [r4, #28]
    3b52:	ldr	r1, [r4, #20]
    3b54:	mov	r0, r6
    3b56:	bl	25f4 <MTPD::GetObjectHandles(unsigned long, unsigned long)>
    3b5a:	mov	r0, r6
    3b5c:	bl	21c0 <MTPD::get_buffer()>
    3b60:	ldr	r1, [r6, #4]
    3b62:	movs	r0, #4
    3b64:	bl	a420 <usb_tx>
    3b68:	str	r5, [r6, #4]
    3b6a:	movw	r2, #8193	; 0x2001
    3b6e:	ldr	r3, [r4, #8]
    3b70:	ldr	r5, [r4, #24]
    3b72:	ldr	r0, [r4, #28]
    3b74:	mov	r6, r2
    usb_packet_t *receive_buffer;
    if ((receive_buffer = usb_rx(MTP_RX_ENDPOINT))) {
      printContainer();
      
      uint32_t return_code = 0;
      uint32_t p1 = 0, p2 = 0;
    3b76:	movs	r7, #0
    3b78:	b.n	3652 <MTPD::loop()+0x52>
  void MTPD::GetDevicePropValue(uint32_t prop) {
    switch (prop) {
      case 0xd402: // friendly name
        // This is the name we'll actually see in the windows explorer.
        // Should probably be configurable.
        writestring("Teensy");
    3b7a:	ldr	r1, [pc, #48]	; (3bac <MTPD::loop()+0x5ac>)
    3b7c:	mov	r0, r6
    3b7e:	bl	223c <MTPD::writestring(char const*)>
    3b82:	b.n	37c6 <MTPD::loop()+0x1c6>
    3b84:	ldr	r1, [pc, #36]	; (3bac <MTPD::loop()+0x5ac>)
    3b86:	mov	r0, r6
    3b88:	bl	223c <MTPD::writestring(char const*)>
    3b8c:	ldr	r3, [r6, #12]
    3b8e:	adds	r3, #12
    3b90:	b.n	379a <MTPD::loop()+0x19a>
    3b92:	mov	r0, r6
    3b94:	mov	r1, r7
    3b96:	bl	3438 <MTPD::setObjectPropValue(unsigned long, unsigned long) [clone .part.7]>
          }
        } else {
          return_code = 0x2000;  // undefined
        }
      }
      if (return_code) {
    3b9a:	cmp	r0, #0
    3b9c:	beq.w	3688 <MTPD::loop()+0x88>
    3ba0:	uxth	r6, r0
    3ba2:	ldr	r3, [r4, #8]
    3ba4:	ldr	r5, [r4, #24]
    3ba6:	ldr	r0, [r4, #28]
    3ba8:	mov	r2, r6
    3baa:	b.n	3652 <MTPD::loop()+0x52>
    3bac:	.word	0x00010570

00003bb0 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]>:
			}
		}
	}
}

void SPIClass::transfer(const void * buf, void * retbuf, size_t count)
    3bb0:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3bb4:	ldr	r4, [r0, #0]
{

	if (count == 0) return;
	if (!(port().CTAR0 & SPI_CTAR_LSBFE)) {
    3bb6:	ldr	r5, [r4, #12]
    3bb8:	tst.w	r5, #16777216	; 0x1000000
		const uint8_t *p_write = (const uint8_t *)buf;
		uint8_t *p_read = (uint8_t *)retbuf;
		size_t count_read = count;

		// Lets clear the reader queue
		port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);
    3bbc:	ldr	r5, [pc, #484]	; (3da4 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x1f4>)
    3bbe:	str	r5, [r4, #0]

void SPIClass::transfer(const void * buf, void * retbuf, size_t count)
{

	if (count == 0) return;
	if (!(port().CTAR0 & SPI_CTAR_LSBFE)) {
    3bc0:	bne.n	3c68 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0xb8>
		port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);

		uint32_t sr;

		// Now lets loop while we still have data to output
		if (count & 1) {
    3bc2:	lsls	r7, r3, #31
    3bc4:	bpl.w	3d2e <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x17e>
		    if (p_write) {
    3bc8:	cmp	r1, #0
    3bca:	beq.w	3d94 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x1e4>
				if (count > 1)
					port().PUSHR = *p_write++ | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
    3bce:	ldrb	r5, [r1, #0]
		uint32_t sr;

		// Now lets loop while we still have data to output
		if (count & 1) {
		    if (p_write) {
				if (count > 1)
    3bd0:	cmp	r3, #1
					port().PUSHR = *p_write++ | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
    3bd2:	it	ne
    3bd4:	orrne.w	r5, r5, #2147483648	; 0x80000000
				else
					port().PUSHR = *p_write++ | SPI_PUSHR_CTAS(0);
    3bd8:	str	r5, [r4, #52]	; 0x34
    3bda:	adds	r1, #1
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CTAS(0);
			}
			count--;
		}

	    uint16_t w =  (uint16_t)(_transferWriteFill << 8) | _transferWriteFill;
    3bdc:	ldrb.w	r8, [r0, #44]	; 0x2c
				if (count > 1)
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
				else
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CTAS(0);
			}
			count--;
    3be0:	add.w	ip, r3, #4294967295
		}

	    uint16_t w =  (uint16_t)(_transferWriteFill << 8) | _transferWriteFill;
    3be4:	orr.w	r8, r8, r8, lsl #8

		while (count > 0) {
    3be8:	cmp.w	ip, #0
    3bec:	beq.w	3d40 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x190>
			// Push out the next byte; 
		    if (p_write) {
    3bf0:	cbz	r1, 3bfc <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x4c>
		    	w = (*p_write++) << 8;
				w |= *p_write++;
    3bf2:	ldrb	r5, [r1, #1]
	    uint16_t w =  (uint16_t)(_transferWriteFill << 8) | _transferWriteFill;

		while (count > 0) {
			// Push out the next byte; 
		    if (p_write) {
		    	w = (*p_write++) << 8;
    3bf4:	ldrb.w	r8, [r1], #2
				w |= *p_write++;
    3bf8:	orr.w	r8, r5, r8, lsl #8
		    }
		    uint16_t queue_full_status_mask = (hardware().queue_size-1) << 12;
    3bfc:	ldr	r5, [r0, #4]
    3bfe:	ldrb	r6, [r5, #8]
			if (count == 2)
    3c00:	cmp.w	ip, #2
			// Push out the next byte; 
		    if (p_write) {
		    	w = (*p_write++) << 8;
				w |= *p_write++;
		    }
		    uint16_t queue_full_status_mask = (hardware().queue_size-1) << 12;
    3c04:	add.w	r6, r6, #4294967295
    3c08:	mov.w	r6, r6, lsl #12
			if (count == 2)
				port().PUSHR = w | SPI_PUSHR_CTAS(1);
    3c0c:	ite	eq
    3c0e:	orreq.w	r5, r8, #268435456	; 0x10000000
			else	
				port().PUSHR = w | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(1);
    3c12:	orrne.w	r5, r8, #2415919104	; 0x90000000
			// Push out the next byte; 
		    if (p_write) {
		    	w = (*p_write++) << 8;
				w |= *p_write++;
		    }
		    uint16_t queue_full_status_mask = (hardware().queue_size-1) << 12;
    3c16:	uxth	r6, r6
			if (count == 2)
				port().PUSHR = w | SPI_PUSHR_CTAS(1);
			else	
				port().PUSHR = w | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(1);
    3c18:	str	r5, [r4, #52]	; 0x34
			count -= 2; // how many bytes to output.
    3c1a:	sub.w	ip, ip, #2
    3c1e:	b.n	3c32 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x82>
			do {
				sr = port().SR;
				if (sr & 0xF0)  {
					uint16_t w = port().POPR;  // Read any pending RX bytes in
					if (count_read & 1) {
						if (p_read) {
    3c20:	cbz	r2, 3c26 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x76>
							*p_read++ = w;  // Read any pending RX bytes in
    3c22:	strb	r4, [r2, #0]
    3c24:	adds	r2, #1
						} 
						count_read--;
    3c26:	subs	r3, #1
							*p_read++ = (w & 0xff);
						}
						count_read -= 2;
					}
				}
			} while ((sr & (15 << 12)) > queue_full_status_mask);
    3c28:	and.w	r5, r5, #61440	; 0xf000
    3c2c:	cmp	r5, r6
    3c2e:	bls.n	3c5e <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0xae>
    3c30:	ldr	r4, [r0, #0]
			else	
				port().PUSHR = w | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(1);
			count -= 2; // how many bytes to output.
			// Make sure queue is not full before pushing next byte out
			do {
				sr = port().SR;
    3c32:	ldr	r5, [r4, #44]	; 0x2c
				if (sr & 0xF0)  {
    3c34:	tst.w	r5, #240	; 0xf0
    3c38:	beq.n	3c28 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x78>
					uint16_t w = port().POPR;  // Read any pending RX bytes in
    3c3a:	ldr	r4, [r4, #56]	; 0x38
					if (count_read & 1) {
    3c3c:	tst.w	r3, #1
							*p_read++ = w;  // Read any pending RX bytes in
						} 
						count_read--;
					} else {
						if (p_read) {
							*p_read++ = w >> 8;
    3c40:	mov	r7, r2
    3c42:	mov.w	lr, r4, asr #8
			// Make sure queue is not full before pushing next byte out
			do {
				sr = port().SR;
				if (sr & 0xF0)  {
					uint16_t w = port().POPR;  // Read any pending RX bytes in
					if (count_read & 1) {
    3c46:	bne.n	3c20 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x70>
						if (p_read) {
							*p_read++ = w;  // Read any pending RX bytes in
						} 
						count_read--;
					} else {
						if (p_read) {
    3c48:	cbz	r2, 3c52 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0xa2>
							*p_read++ = w >> 8;
    3c4a:	strb.w	lr, [r7], #2
							*p_read++ = (w & 0xff);
    3c4e:	strb	r4, [r2, #1]
    3c50:	mov	r2, r7
						}
						count_read -= 2;
					}
				}
			} while ((sr & (15 << 12)) > queue_full_status_mask);
    3c52:	and.w	r5, r5, #61440	; 0xf000
    3c56:	cmp	r5, r6
					} else {
						if (p_read) {
							*p_read++ = w >> 8;
							*p_read++ = (w & 0xff);
						}
						count_read -= 2;
    3c58:	sub.w	r3, r3, #2
					}
				}
			} while ((sr & (15 << 12)) > queue_full_status_mask);
    3c5c:	bhi.n	3c30 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x80>
			count--;
		}

	    uint16_t w =  (uint16_t)(_transferWriteFill << 8) | _transferWriteFill;

		while (count > 0) {
    3c5e:	cmp.w	ip, #0
    3c62:	beq.n	3d40 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x190>
    3c64:	ldr	r4, [r0, #0]
    3c66:	b.n	3bf0 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x40>
		port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);

		uint32_t sr;

		// Now lets loop while we still have data to output
		if (count & 1) {
    3c68:	lsls	r5, r3, #31
    3c6a:	bpl.n	3d06 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x156>
		    if (p_write) {
    3c6c:	cmp	r1, #0
    3c6e:	beq.w	3d84 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x1d4>
				if (count > 1)
					port().PUSHR = *p_write++ | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
    3c72:	ldrb	r5, [r1, #0]
		uint32_t sr;

		// Now lets loop while we still have data to output
		if (count & 1) {
		    if (p_write) {
				if (count > 1)
    3c74:	cmp	r3, #1
					port().PUSHR = *p_write++ | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
    3c76:	it	ne
    3c78:	orrne.w	r5, r5, #2147483648	; 0x80000000
				else
					port().PUSHR = *p_write++ | SPI_PUSHR_CTAS(0);
    3c7c:	str	r5, [r4, #52]	; 0x34
    3c7e:	adds	r1, #1
				if (count > 1)
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
				else
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CTAS(0);
			}
			count--;
    3c80:	add.w	lr, r3, #4294967295
		}

	    uint16_t w = _transferWriteFill;
    3c84:	ldrb.w	ip, [r0, #44]	; 0x2c

		while (count > 0) {
    3c88:	cmp.w	lr, #0
    3c8c:	beq.n	3d12 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x162>
			// Push out the next byte; 
		    if (p_write) {
    3c8e:	cbz	r1, 3c9c <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0xec>
				w = *p_write++;
		    	w |= ((*p_write++) << 8);
    3c90:	ldrb.w	ip, [r1, #1]
    3c94:	ldrb	r5, [r1, #0]
    3c96:	adds	r1, #2
    3c98:	orr.w	ip, r5, ip, lsl #8
		    }
		    uint16_t queue_full_status_mask = (hardware().queue_size-1) << 12;
    3c9c:	ldr	r5, [r0, #4]
    3c9e:	ldrb	r6, [r5, #8]
			if (count == 2)
    3ca0:	cmp.w	lr, #2
			// Push out the next byte; 
		    if (p_write) {
				w = *p_write++;
		    	w |= ((*p_write++) << 8);
		    }
		    uint16_t queue_full_status_mask = (hardware().queue_size-1) << 12;
    3ca4:	add.w	r6, r6, #4294967295
    3ca8:	mov.w	r6, r6, lsl #12
			if (count == 2)
				port().PUSHR = w | SPI_PUSHR_CTAS(1);
    3cac:	ite	eq
    3cae:	orreq.w	r5, ip, #268435456	; 0x10000000
			else	
				port().PUSHR = w | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(1);
    3cb2:	orrne.w	r5, ip, #2415919104	; 0x90000000
			// Push out the next byte; 
		    if (p_write) {
				w = *p_write++;
		    	w |= ((*p_write++) << 8);
		    }
		    uint16_t queue_full_status_mask = (hardware().queue_size-1) << 12;
    3cb6:	uxth	r6, r6
			if (count == 2)
				port().PUSHR = w | SPI_PUSHR_CTAS(1);
			else	
				port().PUSHR = w | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(1);
    3cb8:	str	r5, [r4, #52]	; 0x34
			count -= 2; // how many bytes to output.
    3cba:	sub.w	lr, lr, #2
    3cbe:	b.n	3cd2 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x122>
			do {
				sr = port().SR;
				if (sr & 0xF0)  {
					uint16_t w = port().POPR;  // Read any pending RX bytes in
					if (count_read & 1) {
						if (p_read) {
    3cc0:	cbz	r2, 3cc6 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x116>
							*p_read++ = w;  // Read any pending RX bytes in
    3cc2:	strb	r4, [r2, #0]
    3cc4:	adds	r2, #1
						} 
						count_read--;
    3cc6:	subs	r3, #1
							*p_read++ = w >> 8;
						}
						count_read -= 2;
					}
				}
			} while ((sr & (15 << 12)) > queue_full_status_mask);
    3cc8:	and.w	r5, r5, #61440	; 0xf000
    3ccc:	cmp	r5, r6
    3cce:	bls.n	3cfc <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x14c>
    3cd0:	ldr	r4, [r0, #0]
			else	
				port().PUSHR = w | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(1);
			count -= 2; // how many bytes to output.
			// Make sure queue is not full before pushing next byte out
			do {
				sr = port().SR;
    3cd2:	ldr	r5, [r4, #44]	; 0x2c
				if (sr & 0xF0)  {
    3cd4:	tst.w	r5, #240	; 0xf0
    3cd8:	beq.n	3cc8 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x118>
					uint16_t w = port().POPR;  // Read any pending RX bytes in
					if (count_read & 1) {
    3cda:	tst.w	r3, #1
							*p_read++ = w;  // Read any pending RX bytes in
						} 
						count_read--;
					} else {
						if (p_read) {
							*p_read++ = (w & 0xff);
    3cde:	mov	r7, r2
			count -= 2; // how many bytes to output.
			// Make sure queue is not full before pushing next byte out
			do {
				sr = port().SR;
				if (sr & 0xF0)  {
					uint16_t w = port().POPR;  // Read any pending RX bytes in
    3ce0:	ldr	r4, [r4, #56]	; 0x38
					if (count_read & 1) {
    3ce2:	bne.n	3cc0 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x110>
						if (p_read) {
							*p_read++ = w;  // Read any pending RX bytes in
						} 
						count_read--;
					} else {
						if (p_read) {
    3ce4:	cbz	r2, 3cf0 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x140>
							*p_read++ = (w & 0xff);
    3ce6:	strb.w	r4, [r7], #2
							*p_read++ = w >> 8;
    3cea:	asrs	r4, r4, #8
    3cec:	strb	r4, [r2, #1]
    3cee:	mov	r2, r7
						}
						count_read -= 2;
					}
				}
			} while ((sr & (15 << 12)) > queue_full_status_mask);
    3cf0:	and.w	r5, r5, #61440	; 0xf000
    3cf4:	cmp	r5, r6
					} else {
						if (p_read) {
							*p_read++ = (w & 0xff);
							*p_read++ = w >> 8;
						}
						count_read -= 2;
    3cf6:	sub.w	r3, r3, #2
					}
				}
			} while ((sr & (15 << 12)) > queue_full_status_mask);
    3cfa:	bhi.n	3cd0 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x120>
			count--;
		}

	    uint16_t w = _transferWriteFill;

		while (count > 0) {
    3cfc:	cmp.w	lr, #0
    3d00:	beq.n	3d12 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x162>
    3d02:	ldr	r4, [r0, #0]
    3d04:	b.n	3c8e <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0xde>
		port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);

		uint32_t sr;

		// Now lets loop while we still have data to output
		if (count & 1) {
    3d06:	mov	lr, r3
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CTAS(0);
			}
			count--;
		}

	    uint16_t w = _transferWriteFill;
    3d08:	ldrb.w	ip, [r0, #44]	; 0x2c

		while (count > 0) {
    3d0c:	cmp.w	lr, #0
    3d10:	bne.n	3c8e <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0xde>
			} while ((sr & (15 << 12)) > queue_full_status_mask);

		}

		// now lets wait for all of the read bytes to be returned...
		while (count_read) {
    3d12:	cbz	r3, 3d5c <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x1ac>
	// setCS() is a special function, not intended for use from normal Arduino
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
	KINETISK_SPI_t & port() { return *(KINETISK_SPI_t *)port_addr; }
    3d14:	ldr	r4, [r0, #0]
			sr = port().SR;
    3d16:	ldr	r1, [r4, #44]	; 0x2c
			if (sr & 0xF0)  {
    3d18:	tst.w	r1, #240	; 0xf0
    3d1c:	beq.n	3d16 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x166>
				uint16_t w = port().POPR;  // Read any pending RX bytes in
    3d1e:	ldr	r1, [r4, #56]	; 0x38
				if (count_read & 1) {
    3d20:	lsls	r4, r3, #31
    3d22:	bpl.n	3d60 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x1b0>
					if (p_read)
    3d24:	cbz	r2, 3d2a <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x17a>
						*p_read++ = w;  // Read any pending RX bytes in
    3d26:	strb	r1, [r2, #0]
    3d28:	adds	r2, #1
					count_read--;
    3d2a:	subs	r3, #1
    3d2c:	b.n	3d12 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x162>
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CTAS(0);
			}
			count--;
		}

	    uint16_t w =  (uint16_t)(_transferWriteFill << 8) | _transferWriteFill;
    3d2e:	ldrb.w	r8, [r0, #44]	; 0x2c
		port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);

		uint32_t sr;

		// Now lets loop while we still have data to output
		if (count & 1) {
    3d32:	mov	ip, r3
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CTAS(0);
			}
			count--;
		}

	    uint16_t w =  (uint16_t)(_transferWriteFill << 8) | _transferWriteFill;
    3d34:	orr.w	r8, r8, r8, lsl #8

		while (count > 0) {
    3d38:	cmp.w	ip, #0
    3d3c:	bne.w	3bf0 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x40>
			} while ((sr & (15 << 12)) > queue_full_status_mask);

		}

		// now lets wait for all of the read bytes to be returned...
		while (count_read) {
    3d40:	cbz	r3, 3d5c <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x1ac>
    3d42:	ldr	r4, [r0, #0]
			sr = port().SR;
    3d44:	ldr	r1, [r4, #44]	; 0x2c
			if (sr & 0xF0)  {
    3d46:	tst.w	r1, #240	; 0xf0
    3d4a:	beq.n	3d44 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x194>
				uint16_t w = port().POPR;  // Read any pending RX bytes in
				if (count_read & 1) {
    3d4c:	lsls	r6, r3, #31

		// now lets wait for all of the read bytes to be returned...
		while (count_read) {
			sr = port().SR;
			if (sr & 0xF0)  {
				uint16_t w = port().POPR;  // Read any pending RX bytes in
    3d4e:	ldr	r1, [r4, #56]	; 0x38
				if (count_read & 1) {
    3d50:	bpl.n	3d72 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x1c2>
					if (p_read)
    3d52:	cbz	r2, 3d58 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x1a8>
						*p_read++ = w;  // Read any pending RX bytes in
    3d54:	strb	r1, [r2, #0]
    3d56:	adds	r2, #1
					count_read--;
    3d58:	subs	r3, #1
    3d5a:	b.n	3d40 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x190>
    3d5c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				if (count_read & 1) {
					if (p_read)
						*p_read++ = w;  // Read any pending RX bytes in
					count_read--;
				} else {
					if (p_read) {
    3d60:	cbz	r2, 3d6e <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x1be>
						*p_read++ = (w & 0xff);
    3d62:	mov	r4, r2
						*p_read++ = w >> 8;
    3d64:	asrs	r5, r1, #8
					if (p_read)
						*p_read++ = w;  // Read any pending RX bytes in
					count_read--;
				} else {
					if (p_read) {
						*p_read++ = (w & 0xff);
    3d66:	strb.w	r1, [r4], #2
						*p_read++ = w >> 8;
    3d6a:	strb	r5, [r2, #1]
    3d6c:	mov	r2, r4
					}
					count_read -= 2;
    3d6e:	subs	r3, #2
    3d70:	b.n	3d12 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x162>
				if (count_read & 1) {
					if (p_read)
						*p_read++ = w;  // Read any pending RX bytes in
					count_read--;
				} else {
					if (p_read) {
    3d72:	cbz	r2, 3d80 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x1d0>
						*p_read++ = w >> 8;
    3d74:	mov	r4, r2
    3d76:	asrs	r5, r1, #8
    3d78:	strb.w	r5, [r4], #2
						*p_read++ = (w & 0xff);
    3d7c:	strb	r1, [r2, #1]
    3d7e:	mov	r2, r4
					}
					count_read -= 2;
    3d80:	subs	r3, #2
    3d82:	b.n	3d40 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x190>
					port().PUSHR = *p_write++ | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
				else
					port().PUSHR = *p_write++ | SPI_PUSHR_CTAS(0);
			} else {
				if (count > 1)
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
    3d84:	ldrb.w	r5, [r0, #44]	; 0x2c
				if (count > 1)
					port().PUSHR = *p_write++ | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
				else
					port().PUSHR = *p_write++ | SPI_PUSHR_CTAS(0);
			} else {
				if (count > 1)
    3d88:	cmp	r3, #1
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
    3d8a:	it	ne
    3d8c:	orrne.w	r5, r5, #2147483648	; 0x80000000
				else
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CTAS(0);
    3d90:	str	r5, [r4, #52]	; 0x34
    3d92:	b.n	3c80 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0xd0>
					port().PUSHR = *p_write++ | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
				else
					port().PUSHR = *p_write++ | SPI_PUSHR_CTAS(0);
			} else {
				if (count > 1)
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
    3d94:	ldrb.w	r5, [r0, #44]	; 0x2c
				if (count > 1)
					port().PUSHR = *p_write++ | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
				else
					port().PUSHR = *p_write++ | SPI_PUSHR_CTAS(0);
			} else {
				if (count > 1)
    3d98:	cmp	r3, #1
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
    3d9a:	it	ne
    3d9c:	orrne.w	r5, r5, #2147483648	; 0x80000000
				else
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CTAS(0);
    3da0:	str	r5, [r4, #52]	; 0x34
    3da2:	b.n	3bdc <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x2c>
    3da4:	.word	0x801f0400

00003da8 <SPIClass::transfer(void const*, void*, unsigned int)>:
}

void SPIClass::transfer(const void * buf, void * retbuf, size_t count)
{

	if (count == 0) return;
    3da8:	cbz	r3, 3dae <SPIClass::transfer(void const*, void*, unsigned int)+0x6>
    3daa:	b.w	3bb0 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]>
    3dae:	bx	lr

00003db0 <breakTime(long, tmElements_t&)>:
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
  time /= 24; // now it is days
    3db0:	ldr	r2, [pc, #400]	; (3f44 <breakTime(long, tmElements_t&)+0x194>)
  uint8_t month, monthLength;
  uint32_t time;
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
    3db2:	ldr	r3, [pc, #404]	; (3f48 <breakTime(long, tmElements_t&)+0x198>)
// leap year calculator expects year argument as years offset from 1970
#define LEAP_YEAR(Y)     ( ((1970+(Y))>0) && !((1970+(Y))%4) && ( ((1970+(Y))%100) || !((1970+(Y))%400) ) )

static  const uint8_t monthDays[]={31,28,31,30,31,30,31,31,30,31,30,31}; // API starts months from 1, this array starts from 0
 
void breakTime(time_t timeInput, tmElements_t &tm){
    3db4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  time = (uint32_t)timeInput;
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
    3db8:	ldr	r6, [pc, #400]	; (3f4c <breakTime(long, tmElements_t&)+0x19c>)
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    3dba:	ldr.w	sl, [pc, #416]	; 3f5c <breakTime(long, tmElements_t&)+0x1ac>
  time = (uint32_t)timeInput;
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
    3dbe:	ldr	r4, [pc, #400]	; (3f50 <breakTime(long, tmElements_t&)+0x1a0>)
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
  
  year = 0;  
  days = 0;
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    3dc0:	ldr.w	r9, [pc, #400]	; 3f54 <breakTime(long, tmElements_t&)+0x1a4>
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
  time /= 24; // now it is days
    3dc4:	umull	r5, r2, r2, r0
    3dc8:	mov.w	ip, r2, lsr #16
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    3dcc:	add.w	r7, ip, #4
  uint8_t month, monthLength;
  uint32_t time;
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
    3dd0:	umull	r2, r5, r3, r0
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
    3dd4:	umull	r6, r2, r6, r0
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    3dd8:	umull	sl, fp, r7, sl
  uint8_t month, monthLength;
  uint32_t time;
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
    3ddc:	lsrs	r5, r5, #5
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
    3dde:	lsrs	r2, r2, #11
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
    3de0:	umull	r6, r3, r3, r5
  time /= 60; // now it is hours
  tm.Hour = time % 24;
    3de4:	umull	r6, r4, r4, r2
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    3de8:	rsb	r6, fp, r7
    3dec:	add.w	r6, fp, r6, lsr #1
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
    3df0:	lsrs	r3, r3, #5
  time /= 60; // now it is hours
  tm.Hour = time % 24;
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    3df2:	lsrs	r6, r6, #2
  time = (uint32_t)timeInput;
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
    3df4:	lsrs	r4, r4, #4
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    3df6:	rsb	r6, r6, r6, lsl #3
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
    3dfa:	rsb	r3, r3, r3, lsl #4
  time /= 60; // now it is hours
  tm.Hour = time % 24;
    3dfe:	add.w	r4, r4, r4, lsl #1
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
    3e02:	sub.w	r3, r5, r3, lsl #2
  time /= 60; // now it is hours
  tm.Hour = time % 24;
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    3e06:	subs	r6, r7, r6
  uint8_t month, monthLength;
  uint32_t time;
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
    3e08:	rsb	r5, r5, r5, lsl #4
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
    3e0c:	sub.w	r2, r2, r4, lsl #3
  uint8_t month, monthLength;
  uint32_t time;
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
    3e10:	sub.w	r0, r0, r5, lsl #2
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    3e14:	adds	r6, #1
    3e16:	movs	r4, #0
  time = (uint32_t)timeInput;
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
    3e18:	strb	r2, [r1, #2]
  uint8_t month, monthLength;
  uint32_t time;
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
    3e1a:	strb	r0, [r1, #0]
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
    3e1c:	strb	r3, [r1, #1]
  time /= 60; // now it is hours
  tm.Hour = time % 24;
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    3e1e:	strb	r6, [r1, #3]
  
  year = 0;  
  days = 0;
    3e20:	mov	r2, r4
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    3e22:	movw	fp, #365	; 0x16d
    3e26:	mov.w	r8, #100	; 0x64
    3e2a:	mov.w	sl, #400	; 0x190
    3e2e:	b.n	3e4e <breakTime(long, tmElements_t&)+0x9e>
    3e30:	rsb	r5, r6, r5, asr #7
    3e34:	mls	r5, sl, r5, r3
    3e38:	cbnz	r0, 3e98 <breakTime(long, tmElements_t&)+0xe8>
    3e3a:	cmp	r5, #0
    3e3c:	ite	ne
    3e3e:	movne	r0, fp
    3e40:	moveq.w	r0, #366	; 0x16e
    3e44:	add	r2, r0
    3e46:	cmp	ip, r2
    3e48:	add.w	r4, r4, #1
    3e4c:	bcc.n	3e76 <breakTime(long, tmElements_t&)+0xc6>
    3e4e:	uxtb	r7, r4
    3e50:	addw	r3, r7, #1970	; 0x7b2
    3e54:	smull	r0, r5, r9, r3
    3e58:	asrs	r6, r3, #31
    3e5a:	rsb	r0, r6, r5, asr #5
    3e5e:	ands.w	lr, r3, #3
    3e62:	mls	r0, r8, r0, r3
    3e66:	beq.n	3e30 <breakTime(long, tmElements_t&)+0x80>
    3e68:	movw	r0, #365	; 0x16d
    3e6c:	add	r2, r0
    3e6e:	cmp	ip, r2
    3e70:	add.w	r4, r4, #1
    3e74:	bcs.n	3e4e <breakTime(long, tmElements_t&)+0x9e>
    year++;
  }
  tm.Year = year; // year is offset from 1970 
    3e76:	strb	r7, [r1, #6]
  
  days -= LEAP_YEAR(year) ? 366 : 365;
    3e78:	cmp.w	lr, #0
    3e7c:	bne.n	3e9e <breakTime(long, tmElements_t&)+0xee>
    3e7e:	ldr	r0, [pc, #212]	; (3f54 <breakTime(long, tmElements_t&)+0x1a4>)
    3e80:	asrs	r6, r3, #31
    3e82:	smull	r4, r0, r0, r3
    3e86:	rsb	r4, r6, r0, asr #5
    3e8a:	movs	r5, #100	; 0x64
    3e8c:	mls	r4, r5, r4, r3
    3e90:	cbz	r4, 3f02 <breakTime(long, tmElements_t&)+0x152>
    3e92:	mov.w	r4, #366	; 0x16e
    3e96:	b.n	3ea4 <breakTime(long, tmElements_t&)+0xf4>
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
  
  year = 0;  
  days = 0;
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    3e98:	mov.w	r0, #366	; 0x16e
    3e9c:	b.n	3e44 <breakTime(long, tmElements_t&)+0x94>
    year++;
  }
  tm.Year = year; // year is offset from 1970 
  
  days -= LEAP_YEAR(year) ? 366 : 365;
    3e9e:	movw	r4, #365	; 0x16d
    3ea2:	asrs	r6, r3, #31
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    if (month==1) { // february
      if (LEAP_YEAR(year)) {
    3ea4:	ldr	r0, [pc, #172]	; (3f54 <breakTime(long, tmElements_t&)+0x1a4>)
        monthLength=29;
      } else {
        monthLength=28;
      }
    } else {
      monthLength = monthDays[month];
    3ea6:	ldr	r5, [pc, #176]	; (3f58 <breakTime(long, tmElements_t&)+0x1a8>)
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    if (month==1) { // february
      if (LEAP_YEAR(year)) {
    3ea8:	smull	r7, r0, r0, r3
    3eac:	rsb	r8, r6, r0, asr #5
    year++;
  }
  tm.Year = year; // year is offset from 1970 
  
  days -= LEAP_YEAR(year) ? 366 : 365;
  time  -= days; // now it is days in this year, starting at 0
    3eb0:	subs	r2, r2, r4
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    if (month==1) { // february
      if (LEAP_YEAR(year)) {
    3eb2:	rsb	r6, r6, r0, asr #7
    3eb6:	movs	r4, #100	; 0x64
    3eb8:	mov.w	r0, #400	; 0x190
    3ebc:	mls	r6, r0, r6, r3
    3ec0:	mls	r8, r4, r8, r3
    year++;
  }
  tm.Year = year; // year is offset from 1970 
  
  days -= LEAP_YEAR(year) ? 366 : 365;
  time  -= days; // now it is days in this year, starting at 0
    3ec4:	rsb	r2, r2, ip
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    if (month==1) { // february
      if (LEAP_YEAR(year)) {
    3ec8:	movs	r0, #1
    3eca:	movs	r3, #0
    3ecc:	b.n	3ed4 <breakTime(long, tmElements_t&)+0x124>
    3ece:	adds	r0, #1
    3ed0:	uxtb	r0, r0
    3ed2:	adds	r3, #1
  
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    if (month==1) { // february
    3ed4:	cmp	r3, #1
    3ed6:	uxtb	r7, r3
    3ed8:	beq.n	3f1c <breakTime(long, tmElements_t&)+0x16c>
      }
    } else {
      monthLength = monthDays[month];
    }
    
    if (time >= monthLength) {
    3eda:	ldrb	r4, [r3, r5]
    3edc:	cmp	r4, r2
    3ede:	bhi.n	3ef4 <breakTime(long, tmElements_t&)+0x144>
  time  -= days; // now it is days in this year, starting at 0
  
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    3ee0:	cmp	r0, #12
    } else {
      monthLength = monthDays[month];
    }
    
    if (time >= monthLength) {
      time -= monthLength;
    3ee2:	sub.w	r2, r2, r4
  time  -= days; // now it is days in this year, starting at 0
  
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    3ee6:	bne.n	3ece <breakTime(long, tmElements_t&)+0x11e>
    3ee8:	movs	r7, #13
    } else {
        break;
    }
  }
  tm.Month = month + 1;  // jan is month 1  
  tm.Day = time + 1;     // day of month
    3eea:	adds	r2, #1
    3eec:	strb	r2, [r1, #4]
      time -= monthLength;
    } else {
        break;
    }
  }
  tm.Month = month + 1;  // jan is month 1  
    3eee:	strb	r7, [r1, #5]
  tm.Day = time + 1;     // day of month
}
    3ef0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3ef4:	adds	r7, #1
    3ef6:	uxtb	r7, r7
    } else {
        break;
    }
  }
  tm.Month = month + 1;  // jan is month 1  
  tm.Day = time + 1;     // day of month
    3ef8:	adds	r2, #1
    3efa:	strb	r2, [r1, #4]
      time -= monthLength;
    } else {
        break;
    }
  }
  tm.Month = month + 1;  // jan is month 1  
    3efc:	strb	r7, [r1, #5]
  tm.Day = time + 1;     // day of month
}
    3efe:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    year++;
  }
  tm.Year = year; // year is offset from 1970 
  
  days -= LEAP_YEAR(year) ? 366 : 365;
    3f02:	mov.w	r4, #400	; 0x190
    3f06:	rsb	r0, r6, r0, asr #7
    3f0a:	mls	r0, r4, r0, r3
    3f0e:	cmp	r0, #0
    3f10:	movw	r4, #365	; 0x16d
    3f14:	it	eq
    3f16:	moveq.w	r4, #366	; 0x16e
    3f1a:	b.n	3ea4 <breakTime(long, tmElements_t&)+0xf4>
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    if (month==1) { // february
      if (LEAP_YEAR(year)) {
    3f1c:	cmp.w	lr, #0
    3f20:	bne.n	3f38 <breakTime(long, tmElements_t&)+0x188>
    3f22:	cmp.w	r8, #0
    3f26:	bne.n	3f40 <breakTime(long, tmElements_t&)+0x190>
    3f28:	cmp	r6, #0
    3f2a:	ite	ne
    3f2c:	movne	r4, #28
    3f2e:	moveq	r4, #29
      }
    } else {
      monthLength = monthDays[month];
    }
    
    if (time >= monthLength) {
    3f30:	cmp	r2, r4
    3f32:	bcc.n	3f3c <breakTime(long, tmElements_t&)+0x18c>
      time -= monthLength;
    3f34:	subs	r2, r2, r4
    3f36:	b.n	3ece <breakTime(long, tmElements_t&)+0x11e>
    3f38:	movs	r4, #28
    3f3a:	b.n	3f30 <breakTime(long, tmElements_t&)+0x180>
      }
    } else {
      monthLength = monthDays[month];
    }
    
    if (time >= monthLength) {
    3f3c:	movs	r7, #2
    3f3e:	b.n	3eea <breakTime(long, tmElements_t&)+0x13a>
    3f40:	movs	r4, #29
    3f42:	b.n	3f30 <breakTime(long, tmElements_t&)+0x180>
    3f44:	.word	0xc22e4507
    3f48:	.word	0x88888889
    3f4c:	.word	0x91a2b3c5
    3f50:	.word	0xaaaaaaab
    3f54:	.word	0x51eb851f
    3f58:	.word	0x000105bc
    3f5c:	.word	0x24924925

00003f60 <refreshCache(long) [clone .part.0]>:

static tmElements_t tm;          // a cache of time elements
static time_t cacheTime;   // the time the cache was updated
static uint32_t syncInterval = 300;  // time sync will be attempted after this many seconds

void refreshCache(time_t t) {
    3f60:	push	{r4, lr}
  if (t != cacheTime) {
    breakTime(t, tm); 
    3f62:	ldr	r1, [pc, #12]	; (3f70 <refreshCache(long) [clone .part.0]+0x10>)

static tmElements_t tm;          // a cache of time elements
static time_t cacheTime;   // the time the cache was updated
static uint32_t syncInterval = 300;  // time sync will be attempted after this many seconds

void refreshCache(time_t t) {
    3f64:	mov	r4, r0
  if (t != cacheTime) {
    breakTime(t, tm); 
    3f66:	bl	3db0 <breakTime(long, tmElements_t&)>
    cacheTime = t; 
    3f6a:	ldr	r3, [pc, #8]	; (3f74 <refreshCache(long) [clone .part.0]+0x14>)
    3f6c:	str	r4, [r3, #0]
    3f6e:	pop	{r4, pc}
    3f70:	.word	0x1fff8708
    3f74:	.word	0x1fff8704

00003f78 <now()>:
#ifdef TIME_DRIFT_INFO   // define this to get drift data
time_t sysUnsyncedTime = 0; // the time sysTime unadjusted by sync  
#endif


time_t now() {
    3f78:	push	{r4, r5, r6, r7, lr}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3f7a:	ldr	r4, [pc, #128]	; (3ffc <now()+0x84>)
	// calculate number of seconds passed since last call to now()
  while (millis() - prevMillis >= 1000) {
    3f7c:	ldr	r6, [pc, #128]	; (4000 <now()+0x88>)
    3f7e:	ldr	r3, [r4, #0]
    3f80:	ldr	r2, [r6, #0]
    3f82:	ldr	r5, [pc, #128]	; (4004 <now()+0x8c>)
#ifdef TIME_DRIFT_INFO   // define this to get drift data
time_t sysUnsyncedTime = 0; // the time sysTime unadjusted by sync  
#endif


time_t now() {
    3f84:	sub	sp, #12
    3f86:	ldr	r0, [r5, #0]
    3f88:	str	r3, [sp, #0]
	return ret;
    3f8a:	ldr	r3, [sp, #0]
	// calculate number of seconds passed since last call to now()
  while (millis() - prevMillis >= 1000) {
    3f8c:	subs	r3, r3, r2
    3f8e:	cmp.w	r3, #1000	; 0x3e8
    3f92:	bcc.n	3fb4 <now()+0x3c>
    3f94:	adds	r0, #1
    3f96:	b.n	3f9a <now()+0x22>
    3f98:	mov	r0, r1
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3f9a:	ldr	r3, [r4, #0]
    3f9c:	str	r3, [sp, #0]
	return ret;
    3f9e:	ldr	r3, [sp, #0]
		// millis() and prevMillis are both unsigned ints thus the subtraction will always be the absolute value of the difference
    sysTime++;
    prevMillis += 1000;	
    3fa0:	add.w	r2, r2, #1000	; 0x3e8
#endif


time_t now() {
	// calculate number of seconds passed since last call to now()
  while (millis() - prevMillis >= 1000) {
    3fa4:	subs	r3, r3, r2
    3fa6:	cmp.w	r3, #1000	; 0x3e8
    3faa:	add.w	r1, r0, #1
    3fae:	bcs.n	3f98 <now()+0x20>
    3fb0:	str	r0, [r5, #0]
    3fb2:	str	r2, [r6, #0]
    prevMillis += 1000;	
#ifdef TIME_DRIFT_INFO
    sysUnsyncedTime++; // this can be compared to the synced time to measure long term drift     
#endif
  }
  if (nextSyncTime <= sysTime) {
    3fb4:	ldr	r7, [pc, #80]	; (4008 <now()+0x90>)
    3fb6:	ldr	r3, [r7, #0]
    3fb8:	cmp	r0, r3
    3fba:	bcc.n	3fdc <now()+0x64>
    if (getTimePtr != 0) {
    3fbc:	ldr	r3, [pc, #76]	; (400c <now()+0x94>)
    3fbe:	ldr	r3, [r3, #0]
    3fc0:	cbz	r3, 3fdc <now()+0x64>
      time_t t = getTimePtr();
    3fc2:	blx	r3
 if(sysUnsyncedTime == 0) 
   sysUnsyncedTime = t;   // store the time of the first call to set a valid Time   
#endif

  sysTime = (uint32_t)t;  
  nextSyncTime = (uint32_t)t + syncInterval;
    3fc4:	ldr	r3, [pc, #72]	; (4010 <now()+0x98>)
#endif
  }
  if (nextSyncTime <= sysTime) {
    if (getTimePtr != 0) {
      time_t t = getTimePtr();
      if (t != 0) {
    3fc6:	cbnz	r0, 3fe0 <now()+0x68>
        setTime(t);
      } else {
        nextSyncTime = sysTime + syncInterval;
        Status = (Status == timeNotSet) ?  timeNotSet : timeNeedsSync;
    3fc8:	ldr	r1, [pc, #72]	; (4014 <now()+0x9c>)
    if (getTimePtr != 0) {
      time_t t = getTimePtr();
      if (t != 0) {
        setTime(t);
      } else {
        nextSyncTime = sysTime + syncInterval;
    3fca:	ldr	r2, [r3, #0]
        Status = (Status == timeNotSet) ?  timeNotSet : timeNeedsSync;
    3fcc:	ldrb	r3, [r1, #0]
    if (getTimePtr != 0) {
      time_t t = getTimePtr();
      if (t != 0) {
        setTime(t);
      } else {
        nextSyncTime = sysTime + syncInterval;
    3fce:	ldr	r0, [r5, #0]
        Status = (Status == timeNotSet) ?  timeNotSet : timeNeedsSync;
    3fd0:	adds	r3, #0
    if (getTimePtr != 0) {
      time_t t = getTimePtr();
      if (t != 0) {
        setTime(t);
      } else {
        nextSyncTime = sysTime + syncInterval;
    3fd2:	add	r2, r0
        Status = (Status == timeNotSet) ?  timeNotSet : timeNeedsSync;
    3fd4:	it	ne
    3fd6:	movne	r3, #1
    if (getTimePtr != 0) {
      time_t t = getTimePtr();
      if (t != 0) {
        setTime(t);
      } else {
        nextSyncTime = sysTime + syncInterval;
    3fd8:	str	r2, [r7, #0]
        Status = (Status == timeNotSet) ?  timeNotSet : timeNeedsSync;
    3fda:	strb	r3, [r1, #0]
      }
    }
  }  
  return (time_t)sysTime;
}
    3fdc:	add	sp, #12
    3fde:	pop	{r4, r5, r6, r7, pc}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3fe0:	ldr	r2, [r4, #0]
    3fe2:	str	r2, [sp, #4]
 if(sysUnsyncedTime == 0) 
   sysUnsyncedTime = t;   // store the time of the first call to set a valid Time   
#endif

  sysTime = (uint32_t)t;  
  nextSyncTime = (uint32_t)t + syncInterval;
    3fe4:	ldr	r3, [r3, #0]
  Status = timeSet;
    3fe6:	ldr	r2, [pc, #44]	; (4014 <now()+0x9c>)
	return ret;
    3fe8:	ldr	r4, [sp, #4]
#ifdef TIME_DRIFT_INFO
 if(sysUnsyncedTime == 0) 
   sysUnsyncedTime = t;   // store the time of the first call to set a valid Time   
#endif

  sysTime = (uint32_t)t;  
    3fea:	str	r0, [r5, #0]
  nextSyncTime = (uint32_t)t + syncInterval;
    3fec:	add	r3, r0
  Status = timeSet;
    3fee:	movs	r1, #2
  prevMillis = millis();  // restart counting from now (thanks to Korman for this fix)
    3ff0:	str	r4, [r6, #0]
 if(sysUnsyncedTime == 0) 
   sysUnsyncedTime = t;   // store the time of the first call to set a valid Time   
#endif

  sysTime = (uint32_t)t;  
  nextSyncTime = (uint32_t)t + syncInterval;
    3ff2:	str	r3, [r7, #0]
  Status = timeSet;
    3ff4:	strb	r1, [r2, #0]
        Status = (Status == timeNotSet) ?  timeNotSet : timeNeedsSync;
      }
    }
  }  
  return (time_t)sysTime;
}
    3ff6:	add	sp, #12
    3ff8:	pop	{r4, r5, r6, r7, pc}
    3ffa:	nop
    3ffc:	.word	0x1fff8c34
    4000:	.word	0x1fff871c
    4004:	.word	0x1fff8710
    4008:	.word	0x1fff8720
    400c:	.word	0x1fff8718
    4010:	.word	0x1fff0990
    4014:	.word	0x1fff8714

00004018 <hour()>:
    breakTime(t, tm); 
    cacheTime = t; 
  }
}

int hour() { // the hour now 
    4018:	push	{r3, lr}
  return hour(now()); 
    401a:	bl	3f78 <now()>
static tmElements_t tm;          // a cache of time elements
static time_t cacheTime;   // the time the cache was updated
static uint32_t syncInterval = 300;  // time sync will be attempted after this many seconds

void refreshCache(time_t t) {
  if (t != cacheTime) {
    401e:	ldr	r3, [pc, #16]	; (4030 <hour()+0x18>)
    4020:	ldr	r3, [r3, #0]
    4022:	cmp	r0, r3
    4024:	beq.n	402a <hour()+0x12>
    4026:	bl	3f60 <refreshCache(long) [clone .part.0]>
  return hour(now()); 
}

int hour(time_t t) { // the hour for the given time
  refreshCache(t);
  return tm.Hour;  
    402a:	ldr	r3, [pc, #8]	; (4034 <hour()+0x1c>)
  }
}

int hour() { // the hour now 
  return hour(now()); 
}
    402c:	ldrb	r0, [r3, #2]
    402e:	pop	{r3, pc}
    4030:	.word	0x1fff8704
    4034:	.word	0x1fff8708

00004038 <minute()>:

uint8_t isPM(time_t t) { // returns true if PM
  return (hour(t) >= 12); 
}

int minute() {
    4038:	push	{r3, lr}
  return minute(now()); 
    403a:	bl	3f78 <now()>
static tmElements_t tm;          // a cache of time elements
static time_t cacheTime;   // the time the cache was updated
static uint32_t syncInterval = 300;  // time sync will be attempted after this many seconds

void refreshCache(time_t t) {
  if (t != cacheTime) {
    403e:	ldr	r3, [pc, #16]	; (4050 <minute()+0x18>)
    4040:	ldr	r3, [r3, #0]
    4042:	cmp	r0, r3
    4044:	beq.n	404a <minute()+0x12>
    4046:	bl	3f60 <refreshCache(long) [clone .part.0]>
  return minute(now()); 
}

int minute(time_t t) { // the minute for the given time
  refreshCache(t);
  return tm.Minute;  
    404a:	ldr	r3, [pc, #8]	; (4054 <minute()+0x1c>)
  return (hour(t) >= 12); 
}

int minute() {
  return minute(now()); 
}
    404c:	ldrb	r0, [r3, #1]
    404e:	pop	{r3, pc}
    4050:	.word	0x1fff8704
    4054:	.word	0x1fff8708

00004058 <second()>:
int minute(time_t t) { // the minute for the given time
  refreshCache(t);
  return tm.Minute;  
}

int second() {
    4058:	push	{r3, lr}
  return second(now()); 
    405a:	bl	3f78 <now()>
static tmElements_t tm;          // a cache of time elements
static time_t cacheTime;   // the time the cache was updated
static uint32_t syncInterval = 300;  // time sync will be attempted after this many seconds

void refreshCache(time_t t) {
  if (t != cacheTime) {
    405e:	ldr	r3, [pc, #16]	; (4070 <second()+0x18>)
    4060:	ldr	r3, [r3, #0]
    4062:	cmp	r0, r3
    4064:	beq.n	406a <second()+0x12>
    4066:	bl	3f60 <refreshCache(long) [clone .part.0]>
  return second(now()); 
}

int second(time_t t) {  // the second for the given time
  refreshCache(t);
  return tm.Second;
    406a:	ldr	r3, [pc, #8]	; (4074 <second()+0x1c>)
  return tm.Minute;  
}

int second() {
  return second(now()); 
}
    406c:	ldrb	r0, [r3, #0]
    406e:	pop	{r3, pc}
    4070:	.word	0x1fff8704
    4074:	.word	0x1fff8708

00004078 <day()>:
int second(time_t t) {  // the second for the given time
  refreshCache(t);
  return tm.Second;
}

int day(){
    4078:	push	{r3, lr}
  return(day(now())); 
    407a:	bl	3f78 <now()>
static tmElements_t tm;          // a cache of time elements
static time_t cacheTime;   // the time the cache was updated
static uint32_t syncInterval = 300;  // time sync will be attempted after this many seconds

void refreshCache(time_t t) {
  if (t != cacheTime) {
    407e:	ldr	r3, [pc, #16]	; (4090 <day()+0x18>)
    4080:	ldr	r3, [r3, #0]
    4082:	cmp	r0, r3
    4084:	beq.n	408a <day()+0x12>
    4086:	bl	3f60 <refreshCache(long) [clone .part.0]>
  return(day(now())); 
}

int day(time_t t) { // the day for the given time (0-6)
  refreshCache(t);
  return tm.Day;
    408a:	ldr	r3, [pc, #8]	; (4094 <day()+0x1c>)
  return tm.Second;
}

int day(){
  return(day(now())); 
}
    408c:	ldrb	r0, [r3, #4]
    408e:	pop	{r3, pc}
    4090:	.word	0x1fff8704
    4094:	.word	0x1fff8708

00004098 <month()>:
int weekday(time_t t) {
  refreshCache(t);
  return tm.Wday;
}
   
int month(){
    4098:	push	{r3, lr}
  return month(now()); 
    409a:	bl	3f78 <now()>
static tmElements_t tm;          // a cache of time elements
static time_t cacheTime;   // the time the cache was updated
static uint32_t syncInterval = 300;  // time sync will be attempted after this many seconds

void refreshCache(time_t t) {
  if (t != cacheTime) {
    409e:	ldr	r3, [pc, #16]	; (40b0 <month()+0x18>)
    40a0:	ldr	r3, [r3, #0]
    40a2:	cmp	r0, r3
    40a4:	beq.n	40aa <month()+0x12>
    40a6:	bl	3f60 <refreshCache(long) [clone .part.0]>
  return month(now()); 
}

int month(time_t t) {  // the month for the given time
  refreshCache(t);
  return tm.Month;
    40aa:	ldr	r3, [pc, #8]	; (40b4 <month()+0x1c>)
  return tm.Wday;
}
   
int month(){
  return month(now()); 
}
    40ac:	ldrb	r0, [r3, #5]
    40ae:	pop	{r3, pc}
    40b0:	.word	0x1fff8704
    40b4:	.word	0x1fff8708

000040b8 <year()>:
int month(time_t t) {  // the month for the given time
  refreshCache(t);
  return tm.Month;
}

int year() {  // as in Processing, the full four digit year: (2009, 2010 etc) 
    40b8:	push	{r3, lr}
  return year(now()); 
    40ba:	bl	3f78 <now()>
static tmElements_t tm;          // a cache of time elements
static time_t cacheTime;   // the time the cache was updated
static uint32_t syncInterval = 300;  // time sync will be attempted after this many seconds

void refreshCache(time_t t) {
  if (t != cacheTime) {
    40be:	ldr	r3, [pc, #20]	; (40d4 <year()+0x1c>)
    40c0:	ldr	r3, [r3, #0]
    40c2:	cmp	r0, r3
    40c4:	beq.n	40ca <year()+0x12>
    40c6:	bl	3f60 <refreshCache(long) [clone .part.0]>
  return year(now()); 
}

int year(time_t t) { // the year for the given time
  refreshCache(t);
  return tmYearToCalendar(tm.Year);
    40ca:	ldr	r3, [pc, #12]	; (40d8 <year()+0x20>)
  refreshCache(t);
  return tm.Month;
}

int year() {  // as in Processing, the full four digit year: (2009, 2010 etc) 
  return year(now()); 
    40cc:	ldrb	r0, [r3, #6]
}
    40ce:	addw	r0, r0, #1970	; 0x7b2
    40d2:	pop	{r3, pc}
    40d4:	.word	0x1fff8704
    40d8:	.word	0x1fff8708

000040dc <dbgPrint(unsigned short)>:
#if USE_DBG_MACROS
#include "Arduino.h"
#ifndef DBG_FILE
#error DBG_FILE not defined
#endif  // DBG_FILE
static void dbgPrint(uint16_t line) {
    40dc:	push	{r3, r4, r5, lr}
    40de:	movs	r1, #10
    40e0:	mov	r5, r0
    40e2:	ldr	r0, [pc, #40]	; (410c <dbgPrint(unsigned short)+0x30>)
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    40e4:	ldr	r4, [pc, #40]	; (4110 <dbgPrint(unsigned short)+0x34>)
    40e6:	bl	9ca8 <usb_serial_write>
    40ea:	movs	r1, #13
    40ec:	ldr	r0, [pc, #36]	; (4114 <dbgPrint(unsigned short)+0x38>)
    40ee:	bl	9ca8 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    40f2:	movs	r0, #46	; 0x2e
    40f4:	bl	9db0 <usb_serial_putchar>
    40f8:	mov	r1, r5
    40fa:	mov	r0, r4
    40fc:	bl	b31c <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    4100:	mov	r0, r4
  Serial.print(F("DBG_FAIL: "));
  Serial.print(F(DBG_FILE));
  Serial.write('.');
  Serial.println(line);
}
    4102:	ldmia.w	sp!, {r3, r4, r5, lr}
    4106:	b.w	b250 <Print::println()>
    410a:	nop
    410c:	.word	0x000105c8
    4110:	.word	0x1fff09a4
    4114:	.word	0x000105d4

00004118 <ExFatFile::close()>:
#include "../common/DebugMacros.h"
#include "ExFatFile.h"
#include "ExFatVolume.h"
#include "upcase.h"
//-----------------------------------------------------------------------------
bool ExFatFile::close() {
    4118:	push	{r4, lr}
    411a:	mov	r4, r0
  bool rtn = sync();
    411c:	bl	5658 <ExFatFile::sync()>
  m_attributes = FILE_ATTR_CLOSED;
    4120:	movs	r3, #0
    4122:	strb.w	r3, [r4, #49]	; 0x31
  m_flags = 0;
    4126:	strb.w	r3, [r4, #51]	; 0x33
  return rtn;
}
    412a:	pop	{r4, pc}

0000412c <ExFatFile::getName(char*, unsigned int)>:
void ExFatFile::fsetpos(const fspos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
}
//-----------------------------------------------------------------------------
size_t ExFatFile::getName(ExChar_t *name, size_t length) {
    412c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  DirName_t* dn;
  DirPos_t pos = m_dirPos;
    4130:	add.w	r3, r0, #36	; 0x24
void ExFatFile::fsetpos(const fspos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
}
//-----------------------------------------------------------------------------
size_t ExFatFile::getName(ExChar_t *name, size_t length) {
    4134:	mov	r9, r0
    4136:	mov	r8, r1
    4138:	mov	r5, r2
  DirName_t* dn;
  DirPos_t pos = m_dirPos;
    413a:	ldmia.w	r3, {r0, r1, r2}
void ExFatFile::fsetpos(const fspos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
}
//-----------------------------------------------------------------------------
size_t ExFatFile::getName(ExChar_t *name, size_t length) {
    413e:	sub	sp, #20
  DirName_t* dn;
  DirPos_t pos = m_dirPos;
  size_t n = 0;
  if (!isOpen()) {
    4140:	ldrb.w	r3, [r9, #49]	; 0x31
  m_curCluster = pos->cluster;
}
//-----------------------------------------------------------------------------
size_t ExFatFile::getName(ExChar_t *name, size_t length) {
  DirName_t* dn;
  DirPos_t pos = m_dirPos;
    4144:	add	r6, sp, #4
    4146:	stmia.w	r6, {r0, r1, r2}
  size_t n = 0;
  if (!isOpen()) {
    414a:	cmp	r3, #0
    414c:	beq.n	41c4 <ExFatFile::getName(char*, unsigned int)+0x98>
      DBG_FAIL_MACRO;
      goto fail;
  }
  for (uint8_t is = 1; is < m_setCount; is++) {
    414e:	ldrb.w	r3, [r9, #48]	; 0x30
    4152:	cmp	r3, #1
    4154:	bls.n	41e6 <ExFatFile::getName(char*, unsigned int)+0xba>
    4156:	movs	r7, #1
    4158:	movs	r4, #0
    if (m_vol->dirSeek(&pos, is == 1 ? 64: 32) != 1) {
    415a:	cmp	r7, #1
    415c:	ite	eq
    415e:	moveq	r2, #64	; 0x40
    4160:	movne	r2, #32
    4162:	mov	r1, r6
    4164:	ldr.w	r0, [r9, #32]
    4168:	bl	4fc0 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)>
    416c:	cmp	r0, #1
    416e:	bne.n	41de <ExFatFile::getName(char*, unsigned int)+0xb2>
      DBG_FAIL_MACRO;
      goto fail;
    }
    dn = reinterpret_cast<DirName_t*>
         (m_vol->dirCache(&pos, FsCache::CACHE_FOR_READ));
    4170:	movs	r2, #0
    4172:	mov	r1, r6
    4174:	ldr.w	r0, [r9, #32]
    4178:	bl	4f40 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
    if (!dn || dn->type != EXFAT_TYPE_NAME) {
    417c:	cbz	r0, 41d6 <ExFatFile::getName(char*, unsigned int)+0xaa>
    417e:	ldrb	r3, [r0, #0]
    4180:	cmp	r3, #193	; 0xc1
    4182:	bne.n	41d6 <ExFatFile::getName(char*, unsigned int)+0xaa>
    4184:	add.w	r1, r0, #30
    4188:	add.w	r2, r8, r4
    418c:	mov	r3, r4
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (uint8_t in = 0; in < 15; in++) {
      if ((n + 1) >= length) {
    418e:	adds	r4, #1
    4190:	cmp	r4, r5
    4192:	bcs.n	41b6 <ExFatFile::getName(char*, unsigned int)+0x8a>
void lbaToMbrChs(uint8_t* chs, uint32_t capacityMB, uint32_t lba);
//-----------------------------------------------------------------------------
#if !defined(USE_SIMPLE_LITTLE_ENDIAN) || USE_SIMPLE_LITTLE_ENDIAN
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
    4194:	ldrh.w	r3, [r0, #2]!
        goto done;
      }
      uint16_t c = getLe16(dn->unicode + 2*in);
      name[n++] = sizeof(ExChar_t) > 1 || c < 0X7F ? c : '?';
    4198:	cmp	r3, #126	; 0x7e
    419a:	ite	ls
    419c:	uxtbls	r3, r3
    419e:	movhi	r3, #63	; 0x3f
         (m_vol->dirCache(&pos, FsCache::CACHE_FOR_READ));
    if (!dn || dn->type != EXFAT_TYPE_NAME) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (uint8_t in = 0; in < 15; in++) {
    41a0:	cmp	r0, r1
      if ((n + 1) >= length) {
        goto done;
      }
      uint16_t c = getLe16(dn->unicode + 2*in);
      name[n++] = sizeof(ExChar_t) > 1 || c < 0X7F ? c : '?';
    41a2:	strb.w	r3, [r2], #1
    41a6:	mov	r3, r4
         (m_vol->dirCache(&pos, FsCache::CACHE_FOR_READ));
    if (!dn || dn->type != EXFAT_TYPE_NAME) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (uint8_t in = 0; in < 15; in++) {
    41a8:	bne.n	418e <ExFatFile::getName(char*, unsigned int)+0x62>
  size_t n = 0;
  if (!isOpen()) {
      DBG_FAIL_MACRO;
      goto fail;
  }
  for (uint8_t is = 1; is < m_setCount; is++) {
    41aa:	adds	r7, #1
    41ac:	ldrb.w	r2, [r9, #48]	; 0x30
    41b0:	uxtb	r7, r7
    41b2:	cmp	r2, r7
    41b4:	bhi.n	415a <ExFatFile::getName(char*, unsigned int)+0x2e>
      uint16_t c = getLe16(dn->unicode + 2*in);
      name[n++] = sizeof(ExChar_t) > 1 || c < 0X7F ? c : '?';
    }
  }
 done:
  name[n] = 0;
    41b6:	movs	r2, #0
  return n;
    41b8:	mov	r0, r3
      uint16_t c = getLe16(dn->unicode + 2*in);
      name[n++] = sizeof(ExChar_t) > 1 || c < 0X7F ? c : '?';
    }
  }
 done:
  name[n] = 0;
    41ba:	strb.w	r2, [r8, r3]
  return n;

 fail:
  *name = 0;
  return 0;
}
    41be:	add	sp, #20
    41c0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
size_t ExFatFile::getName(ExChar_t *name, size_t length) {
  DirName_t* dn;
  DirPos_t pos = m_dirPos;
  size_t n = 0;
  if (!isOpen()) {
      DBG_FAIL_MACRO;
    41c4:	movs	r0, #81	; 0x51
    41c6:	bl	40dc <dbgPrint(unsigned short)>
 done:
  name[n] = 0;
  return n;

 fail:
  *name = 0;
    41ca:	movs	r0, #0
    41cc:	strb.w	r0, [r8]
  return 0;
}
    41d0:	add	sp, #20
    41d2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      goto fail;
    }
    dn = reinterpret_cast<DirName_t*>
         (m_vol->dirCache(&pos, FsCache::CACHE_FOR_READ));
    if (!dn || dn->type != EXFAT_TYPE_NAME) {
      DBG_FAIL_MACRO;
    41d6:	movs	r0, #92	; 0x5c
    41d8:	bl	40dc <dbgPrint(unsigned short)>
      goto fail;
    41dc:	b.n	41ca <ExFatFile::getName(char*, unsigned int)+0x9e>
      DBG_FAIL_MACRO;
      goto fail;
  }
  for (uint8_t is = 1; is < m_setCount; is++) {
    if (m_vol->dirSeek(&pos, is == 1 ? 64: 32) != 1) {
      DBG_FAIL_MACRO;
    41de:	movs	r0, #86	; 0x56
    41e0:	bl	40dc <dbgPrint(unsigned short)>
      goto fail;
    41e4:	b.n	41ca <ExFatFile::getName(char*, unsigned int)+0x9e>
  size_t n = 0;
  if (!isOpen()) {
      DBG_FAIL_MACRO;
      goto fail;
  }
  for (uint8_t is = 1; is < m_setCount; is++) {
    41e6:	movs	r3, #0
    41e8:	b.n	41b6 <ExFatFile::getName(char*, unsigned int)+0x8a>
    41ea:	nop

000041ec <ExFatFile::openRoot(ExFatVolume*)>:
  m_attributes = FILE_ATTR_CLOSED;
  m_flags = 0;
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::openRoot(ExFatVolume* vol) {
    41ec:	push	{r3, r4, r5, lr}
    41ee:	mov	r5, r1
  if (isOpen()) {
    41f0:	ldrb.w	r1, [r0, #49]	; 0x31
    41f4:	cbnz	r1, 420e <ExFatFile::openRoot(ExFatVolume*)+0x22>
    41f6:	mov	r4, r0
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
    41f8:	movs	r2, #56	; 0x38
    41fa:	bl	c92c <memset>
  m_attributes = FILE_ATTR_ROOT;
    41fe:	movs	r3, #64	; 0x40
  m_vol = vol;
  m_flags = FILE_FLAG_READ;
    4200:	movs	r0, #1
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
  m_attributes = FILE_ATTR_ROOT;
    4202:	strb.w	r3, [r4, #49]	; 0x31
  m_vol = vol;
  m_flags = FILE_FLAG_READ;
    4206:	strb.w	r0, [r4, #51]	; 0x33
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
  m_attributes = FILE_ATTR_ROOT;
  m_vol = vol;
    420a:	str	r5, [r4, #32]
  m_flags = FILE_FLAG_READ;
  return true;

 fail:
  return false;
}
    420c:	pop	{r3, r4, r5, pc}
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::openRoot(ExFatVolume* vol) {
  if (isOpen()) {
    DBG_FAIL_MACRO;
    420e:	mov.w	r0, #444	; 0x1bc
    4212:	bl	40dc <dbgPrint(unsigned short)>
  m_vol = vol;
  m_flags = FILE_FLAG_READ;
  return true;

 fail:
  return false;
    4216:	movs	r0, #0
    4218:	pop	{r3, r4, r5, pc}
    421a:	nop

0000421c <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>:
}
//------------------------------------------------------------------------------
bool ExFatFile::parsePathName(const ExChar_t* path,
                            ExName_t* fname, const ExChar_t** ptr) {
    421c:	push	{r4, r5, r6, r7, lr}
  ExChar_t c;
  int end;
  int len = 0;

  // Skip leading spaces.
  while (*path == ' ') {
    421e:	ldrb	r0, [r1, #0]
    4220:	cmp	r0, #32
    4222:	bne.n	422c <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x10>
    4224:	ldrb.w	r0, [r1, #1]!
    4228:	cmp	r0, #32
    422a:	beq.n	4224 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x8>
    path++;
  }
  fname->lfn = path;
    422c:	str	r1, [r2, #4]

  for (len = 0; ; len++) {
    c = path[len];
    422e:	ldrb	r0, [r1, #0]
    if (c == 0 || isDirSeparator(c)) {
    4230:	cmp	r0, #0
    4232:	beq.n	42d8 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xbc>
    4234:	cmp	r0, #47	; 0x2f
    4236:	beq.n	4290 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x74>
 * \param[in] c character to be tested.
 *
 * \return true for legal character else false.
 */
inline bool lfnLegalChar(ExChar_t c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
    4238:	cmp	r0, #92	; 0x5c
    423a:	beq.n	427e <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x62>
    423c:	sub.w	r4, r0, #34	; 0x22
    4240:	uxtb	r4, r4
    4242:	cmp	r4, #29
    4244:	bls.n	4282 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x66>
    4246:	ldr.w	lr, [pc, #148]	; 42dc <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xc0>
    424a:	adds	r6, r1, #1
  while (*path == ' ') {
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    424c:	movs	r4, #0
      c == ':' || c == '<' || c == '>' || c == '?' || c == '|') {
    424e:	cmp	r0, #124	; 0x7c
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
    4250:	sub.w	r5, r0, #32
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    c = path[len];
    4254:	mov	r7, r6
    4256:	beq.n	427e <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x62>
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
    4258:	cmp	r5, #94	; 0x5e
    425a:	bhi.n	427e <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x62>
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    c = path[len];
    425c:	ldrb.w	r0, [r6], #1
 * \param[in] c character to be tested.
 *
 * \return true for legal character else false.
 */
inline bool lfnLegalChar(ExChar_t c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
    4260:	sub.w	r5, r0, #34	; 0x22
    4264:	uxtb	r5, r5
  while (*path == ' ') {
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    4266:	adds	r4, #1
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
    4268:	cbz	r0, 42ca <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xae>
    426a:	cmp	r0, #47	; 0x2f
    426c:	beq.n	4292 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x76>
    426e:	cmp	r0, #92	; 0x5c
    4270:	lsr.w	r7, lr, r5
    4274:	beq.n	427e <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x62>
    4276:	cmp	r5, #29
    4278:	bhi.n	424e <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x32>
    427a:	lsls	r5, r7, #31
    427c:	bpl.n	424e <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x32>
      break;
    }
    if (!lfnLegalChar(c)) {
      return false;
    427e:	movs	r0, #0
    4280:	pop	{r4, r5, r6, r7, pc}
    4282:	ldr	r5, [pc, #88]	; (42dc <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xc0>)
    4284:	lsr.w	r4, r5, r4
    4288:	lsls	r6, r4, #31
    428a:	bpl.n	4246 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x2a>
    428c:	movs	r0, #0
    428e:	pop	{r4, r5, r6, r7, pc}
  while (*path == ' ') {
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    4290:	movs	r4, #0
    4292:	adds	r7, r1, r4
    4294:	mov	r6, r7
    4296:	mov	r5, r4
    4298:	movs	r0, #47	; 0x2f
    429a:	b.n	42a2 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x86>
    429c:	ldrb.w	r0, [r6, #1]!
    if (!lfnLegalChar(c)) {
      return false;
    }
  }
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
    42a0:	adds	r5, #1
    42a2:	cmp	r0, #32
    42a4:	beq.n	429c <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x80>
    42a6:	cmp	r0, #47	; 0x2f
    42a8:	beq.n	429c <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x80>
  *ptr = &path[end];
    42aa:	add	r1, r5
    42ac:	str	r1, [r3, #0]

  // Back over spaces and dots.
  while (len) {
    42ae:	cbz	r4, 42c2 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xa6>
    42b0:	mov	r1, r7
    c = path[len - 1];
    42b2:	ldrb.w	r3, [r1, #-1]!
    if (c != '.' && c != ' ') {
    42b6:	cmp	r3, #46	; 0x2e
    42b8:	beq.n	42be <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xa2>
    42ba:	cmp	r3, #32
    42bc:	bne.n	42d0 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xb4>
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
  *ptr = &path[end];

  // Back over spaces and dots.
  while (len) {
    42be:	subs	r4, #1
    42c0:	bne.n	42b2 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x96>
    42c2:	mov	r0, r4
  }
  // Max length of LFN is 255.
  if (len > EXFAT_MAX_NAME_LENGTH) {
    return false;
  }
  fname->len = len;
    42c4:	str	r0, [r2, #0]
  return true;
    42c6:	movs	r0, #1
    42c8:	pop	{r4, r5, r6, r7, pc}
      return false;
    }
  }
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
  *ptr = &path[end];
    42ca:	str	r7, [r3, #0]
    42cc:	adds	r7, r1, r4
    42ce:	b.n	42b0 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x94>
      break;
    }
    len--;
  }
  // Max length of LFN is 255.
  if (len > EXFAT_MAX_NAME_LENGTH) {
    42d0:	cmp	r4, #255	; 0xff
    42d2:	ble.n	42c2 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xa6>
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
      return false;
    42d4:	movs	r0, #0
    42d6:	pop	{r4, r5, r6, r7, pc}
    }
  }
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
  *ptr = &path[end];
    42d8:	str	r1, [r3, #0]
    42da:	b.n	42c4 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xa8>
    42dc:	.word	0x35000101

000042e0 <ExFatFile::read(void*, unsigned int)>:

 fail:
  return 0;
}
//-----------------------------------------------------------------------------
int ExFatFile::read(void* buf, size_t count) {
    42e0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    42e4:	ldrb.w	r3, [r0, #51]	; 0x33
  uint8_t* cache;
  uint16_t sectorOffset;
  uint32_t sector;
  uint32_t clusterOffset;

  if (!isReadable()) {
    42e8:	lsls	r5, r3, #31

 fail:
  return 0;
}
//-----------------------------------------------------------------------------
int ExFatFile::read(void* buf, size_t count) {
    42ea:	sub	sp, #12
    42ec:	mov	r4, r0
  uint8_t* cache;
  uint16_t sectorOffset;
  uint32_t sector;
  uint32_t clusterOffset;

  if (!isReadable()) {
    42ee:	bpl.w	44ba <ExFatFile::read(void*, unsigned int)+0x1da>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isContiguous() || isFile()) {
    42f2:	lsls	r0, r3, #25
    42f4:	mov	r5, r1
    42f6:	mov	r6, r2
    42f8:	bpl.w	4442 <ExFatFile::read(void*, unsigned int)+0x162>
    if ((m_curPosition + count) > m_validLength) {
    42fc:	ldrd	r0, r1, [r4]
    4300:	ldrd	r2, r3, [r4, #16]
    4304:	adds.w	r8, r0, r6
    4308:	adc.w	r9, r1, #0
    430c:	cmp	r3, r9
    430e:	it	eq
    4310:	cmpeq	r2, r8
    4312:	bcc.w	444e <ExFatFile::read(void*, unsigned int)+0x16e>
      count = toRead = m_validLength - m_curPosition;
    }
  }
  while (toRead) {
    4316:	cmp	r6, #0
    4318:	beq.w	4452 <ExFatFile::read(void*, unsigned int)+0x172>
    431c:	mov	r9, r4
    431e:	ldrd	r2, r3, [r9], #24
    4322:	mov	r8, r6
    4324:	b.n	43c6 <ExFatFile::read(void*, unsigned int)+0xe6>
    clusterOffset = m_curPosition & m_vol->clusterMask();
    sectorOffset = clusterOffset & m_vol->sectorMask();
    if (clusterOffset == 0) {
      if (m_curPosition == 0) {
    4326:	orrs	r3, r2
    4328:	bne.n	4404 <ExFatFile::read(void*, unsigned int)+0x124>
        m_curCluster = isRoot()
                       ? m_vol->rootDirectoryCluster() : m_firstCluster;
    432a:	ldrb.w	r3, [r4, #49]	; 0x31
    432e:	lsls	r2, r3, #25
    4330:	ite	mi
    4332:	ldrmi.w	r1, [r0, #1068]	; 0x42c
    4336:	ldrpl	r1, [r4, #28]
      } else if (isContiguous()) {
        m_curCluster++;
    4338:	str	r1, [r4, #24]
  bool dataCacheSync() {return m_dataCache.sync();}
  //----------------------------------------------------------------------------
  uint32_t clusterMask() {return m_clusterMask;}
  uint32_t clusterStartSector(uint32_t cluster) {
    return m_clusterHeapStartSector +
           ((cluster - 2) << m_sectorsPerClusterShift);
    433a:	ldrb.w	ip, [r0, #1085]	; 0x43d
          goto fail;
        }
      }
    }
    sector = m_vol->clusterStartSector(m_curCluster) +
             (clusterOffset >> m_vol->bytesPerSectorShift());
    433e:	ldr.w	r2, [r0, #1060]	; 0x424
    4342:	subs	r1, #2
    4344:	lsrs	r7, r7, #9
    4346:	lsl.w	lr, r1, ip
    434a:	adds	r1, r7, r2
    434c:	add	r1, lr
    if (sectorOffset != 0 || toRead < m_vol->bytesPerSector()
                          || sector == m_vol->dataCacheSector()) {
    434e:	cmp.w	sl, #0
    4352:	bne.n	43da <ExFatFile::read(void*, unsigned int)+0xfa>
        }
      }
    }
    sector = m_vol->clusterStartSector(m_curCluster) +
             (clusterOffset >> m_vol->bytesPerSectorShift());
    if (sectorOffset != 0 || toRead < m_vol->bytesPerSector()
    4354:	cmp.w	r8, #512	; 0x200
    4358:	bcc.n	43da <ExFatFile::read(void*, unsigned int)+0xfa>
    435a:	ldr.w	r2, [r0, #532]	; 0x214
                          || sector == m_vol->dataCacheSector()) {
    435e:	cmp	r1, r2
    4360:	beq.n	43da <ExFatFile::read(void*, unsigned int)+0xfa>
        goto fail;
      }
      uint8_t* src = cache + sectorOffset;
      memcpy(dst, src, n);
#if USE_MULTI_SECTOR_IO
    } else if (toRead >= 2*m_vol->bytesPerSector()) {
    4362:	cmp.w	r8, #1024	; 0x400
    4366:	bcc.n	4412 <ExFatFile::read(void*, unsigned int)+0x132>
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
      // Limit writes to current cluster.
      uint32_t maxNs = m_vol->sectorsPerCluster()
                       - (clusterOffset >> m_vol->bytesPerSectorShift());
    4368:	movs	r3, #1
    436a:	lsl.w	ip, r3, ip
    436e:	rsb	r7, r7, ip
      }
      uint8_t* src = cache + sectorOffset;
      memcpy(dst, src, n);
#if USE_MULTI_SECTOR_IO
    } else if (toRead >= 2*m_vol->bytesPerSector()) {
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
    4372:	mov.w	r3, r8, lsr #9
    4376:	cmp	r7, r3
    4378:	it	cs
    437a:	movcs	r7, r3
        ns = maxNs;
      }
      n = ns << m_vol->bytesPerSectorShift();
      // Check for cache sector in read range.
      if (sector <= m_vol->dataCacheSector()
          && m_vol->dataCacheSector() < (sector + ns)) {
    437c:	cmp	r1, r2
      uint32_t maxNs = m_vol->sectorsPerCluster()
                       - (clusterOffset >> m_vol->bytesPerSectorShift());
      if (ns > maxNs) {
        ns = maxNs;
      }
      n = ns << m_vol->bytesPerSectorShift();
    437e:	mov.w	fp, r7, lsl #9
      // Check for cache sector in read range.
      if (sector <= m_vol->dataCacheSector()
          && m_vol->dataCacheSector() < (sector + ns)) {
    4382:	bhi.n	439c <ExFatFile::read(void*, unsigned int)+0xbc>
    4384:	adds	r3, r7, r1
    4386:	cmp	r3, r2
    4388:	bls.n	439c <ExFatFile::read(void*, unsigned int)+0xbc>
  void dataCacheInvalidate() {m_dataCache.invalidate();}
  uint8_t* dataCacheGet(uint32_t sector, uint8_t option) {
    return m_dataCache.get(sector, option);
  }
  uint32_t dataCacheSector() {return m_dataCache.sector();}
  bool dataCacheSync() {return m_dataCache.sync();}
    438a:	add.w	r0, r0, #524	; 0x20c
    438e:	str	r1, [sp, #4]
    4390:	bl	4ca4 <FsCache::sync()>
        // Flush cache if cache sector is in the range.
        if (!m_vol->dataCacheSync()) {
    4394:	cmp	r0, #0
    4396:	beq.n	4488 <ExFatFile::read(void*, unsigned int)+0x1a8>
    4398:	ldr	r0, [r4, #32]
    439a:	ldr	r1, [sp, #4]
    439c:	ldr.w	r0, [r0, #1080]	; 0x438
  bool writeSector(uint32_t sector, const uint8_t* src) {
    return m_blockDev->writeSector(sector, src);
  }
#if USE_MULTI_SECTOR_IO
  bool readSectors(uint32_t sector, uint8_t* dst, size_t count) {
    return m_blockDev->readSectors(sector, dst, count);
    43a0:	ldr	r2, [r0, #0]
    43a2:	mov	r3, r7
    43a4:	ldr	r7, [r2, #12]
    43a6:	mov	r2, r5
    43a8:	blx	r7
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
      if (!m_vol->readSectors(sector, dst, ns)) {
    43aa:	cmp	r0, #0
    43ac:	beq.n	447e <ExFatFile::read(void*, unsigned int)+0x19e>
    43ae:	mov	r0, fp
    43b0:	movs	r1, #0
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    m_curPosition += n;
    43b2:	ldrd	r2, r3, [r4]
    43b6:	adds	r2, r2, r0
    43b8:	adcs	r3, r1
  if (isContiguous() || isFile()) {
    if ((m_curPosition + count) > m_validLength) {
      count = toRead = m_validLength - m_curPosition;
    }
  }
  while (toRead) {
    43ba:	subs.w	r8, r8, fp
      if (!m_vol->readSector(sector, dst)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    43be:	add	r5, fp
    m_curPosition += n;
    43c0:	strd	r2, r3, [r4]
  if (isContiguous() || isFile()) {
    if ((m_curPosition + count) > m_validLength) {
      count = toRead = m_validLength - m_curPosition;
    }
  }
  while (toRead) {
    43c4:	beq.n	4452 <ExFatFile::read(void*, unsigned int)+0x172>
    clusterOffset = m_curPosition & m_vol->clusterMask();
    43c6:	ldr	r0, [r4, #32]
    43c8:	ldr.w	r7, [r0, #1072]	; 0x430
    43cc:	ands	r7, r2
    sectorOffset = clusterOffset & m_vol->sectorMask();
    43ce:	ubfx	sl, r7, #0, #9
    if (clusterOffset == 0) {
    43d2:	cmp	r7, #0
    43d4:	beq.n	4326 <ExFatFile::read(void*, unsigned int)+0x46>
    43d6:	ldr	r1, [r4, #24]
    43d8:	b.n	433a <ExFatFile::read(void*, unsigned int)+0x5a>
#endif  // USE_EXFAT_BITMAP_CACHE
  }
  void dataCacheDirty() {m_dataCache.dirty();}
  void dataCacheInvalidate() {m_dataCache.invalidate();}
  uint8_t* dataCacheGet(uint32_t sector, uint8_t option) {
    return m_dataCache.get(sector, option);
    43da:	add.w	r0, r0, #524	; 0x20c
    43de:	movs	r2, #0
    43e0:	bl	4c18 <FsCache::get(unsigned long, unsigned char)>
      if (n > toRead) {
        n = toRead;
      }
      // read sector to cache and copy data to caller
      cache = m_vol->dataCacheGet(sector, FsCache::CACHE_FOR_READ);
      if (!cache) {
    43e4:	cmp	r0, #0
    43e6:	beq.n	4460 <ExFatFile::read(void*, unsigned int)+0x180>
    }
    sector = m_vol->clusterStartSector(m_curCluster) +
             (clusterOffset >> m_vol->bytesPerSectorShift());
    if (sectorOffset != 0 || toRead < m_vol->bytesPerSector()
                          || sector == m_vol->dataCacheSector()) {
      n = m_vol->bytesPerSector() - sectorOffset;
    43e8:	rsb	fp, sl, #512	; 0x200
    43ec:	cmp	fp, r8
    43ee:	it	cs
    43f0:	movcs	fp, r8
      if (!cache) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* src = cache + sectorOffset;
      memcpy(dst, src, n);
    43f2:	add.w	r1, r0, sl
    43f6:	mov	r2, fp
    43f8:	mov	r0, r5
    43fa:	bl	9aa8 <memcpy>
    43fe:	mov	r0, fp
    4400:	movs	r1, #0
    4402:	b.n	43b2 <ExFatFile::read(void*, unsigned int)+0xd2>
    sectorOffset = clusterOffset & m_vol->sectorMask();
    if (clusterOffset == 0) {
      if (m_curPosition == 0) {
        m_curCluster = isRoot()
                       ? m_vol->rootDirectoryCluster() : m_firstCluster;
      } else if (isContiguous()) {
    4404:	ldrb.w	r3, [r4, #51]	; 0x33
    4408:	lsls	r3, r3, #25
    440a:	bpl.n	442c <ExFatFile::read(void*, unsigned int)+0x14c>
        m_curCluster++;
    440c:	ldr	r1, [r4, #24]
    440e:	adds	r1, #1
    4410:	b.n	4338 <ExFatFile::read(void*, unsigned int)+0x58>
    4412:	ldr.w	r0, [r0, #1080]	; 0x438
  uint16_t sectorMask() {return m_sectorMask;}
  bool syncDevice() {
    return m_blockDev->syncDevice();
  }
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
    4416:	ldr	r3, [r0, #0]
    4418:	mov	r2, r5
    441a:	ldr	r3, [r3, #8]
    441c:	blx	r3
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // read single sector
      n = m_vol->bytesPerSector();
      if (!m_vol->readSector(sector, dst)) {
    441e:	cbz	r0, 4492 <ExFatFile::read(void*, unsigned int)+0x1b2>
    4420:	mov.w	r0, #512	; 0x200
    4424:	movs	r1, #0
        goto fail;
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // read single sector
      n = m_vol->bytesPerSector();
    4426:	mov.w	fp, #512	; 0x200
    442a:	b.n	43b2 <ExFatFile::read(void*, unsigned int)+0xd2>
        m_curCluster = isRoot()
                       ? m_vol->rootDirectoryCluster() : m_firstCluster;
      } else if (isContiguous()) {
        m_curCluster++;
      } else {
        fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    442c:	mov	r2, r9
    442e:	ldr	r1, [r4, #24]
    4430:	bl	4f74 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
    4434:	sxtb	r0, r0
        if (fg < 0) {
    4436:	cmp	r0, #0
    4438:	blt.n	449c <ExFatFile::read(void*, unsigned int)+0x1bc>
          DBG_FAIL_MACRO;
          goto fail;
        }
        if (fg == 0) {
    443a:	beq.n	44a6 <ExFatFile::read(void*, unsigned int)+0x1c6>
    443c:	ldr	r0, [r4, #32]
    443e:	ldr	r1, [r4, #24]
    4440:	b.n	433a <ExFatFile::read(void*, unsigned int)+0x5a>

  if (!isReadable()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isContiguous() || isFile()) {
    4442:	ldrb.w	r3, [r4, #49]	; 0x31
    4446:	lsls	r1, r3, #28
    4448:	bmi.w	42fc <ExFatFile::read(void*, unsigned int)+0x1c>
    444c:	b.n	4316 <ExFatFile::read(void*, unsigned int)+0x36>
    if ((m_curPosition + count) > m_validLength) {
      count = toRead = m_validLength - m_curPosition;
    444e:	subs	r6, r2, r0
    4450:	b.n	4316 <ExFatFile::read(void*, unsigned int)+0x36>
        goto fail;
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // read single sector
      n = m_vol->bytesPerSector();
    4452:	mov.w	r8, #0
    }
    dst += n;
    m_curPosition += n;
    toRead -= n;
  }
  return count - toRead;
    4456:	rsb	r0, r8, r6

fail:
  m_error |= READ_ERROR;
  return -1;
}
    445a:	add	sp, #12
    445c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        n = toRead;
      }
      // read sector to cache and copy data to caller
      cache = m_vol->dataCacheGet(sector, FsCache::CACHE_FOR_READ);
      if (!cache) {
        DBG_FAIL_MACRO;
    4460:	movw	r0, #599	; 0x257
    4464:	bl	40dc <dbgPrint(unsigned short)>
    toRead -= n;
  }
  return count - toRead;

fail:
  m_error |= READ_ERROR;
    4468:	ldrb.w	r3, [r4, #50]	; 0x32
  return -1;
    446c:	mov.w	r0, #4294967295
    toRead -= n;
  }
  return count - toRead;

fail:
  m_error |= READ_ERROR;
    4470:	orr.w	r3, r3, #2
    4474:	strb.w	r3, [r4, #50]	; 0x32
  return -1;
}
    4478:	add	sp, #12
    447a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
      if (!m_vol->readSectors(sector, dst, ns)) {
        DBG_FAIL_MACRO;
    447e:	mov.w	r0, #624	; 0x270
    4482:	bl	40dc <dbgPrint(unsigned short)>
        goto fail;
    4486:	b.n	4468 <ExFatFile::read(void*, unsigned int)+0x188>
      // Check for cache sector in read range.
      if (sector <= m_vol->dataCacheSector()
          && m_vol->dataCacheSector() < (sector + ns)) {
        // Flush cache if cache sector is in the range.
        if (!m_vol->dataCacheSync()) {
          DBG_FAIL_MACRO;
    4488:	movw	r0, #619	; 0x26b
    448c:	bl	40dc <dbgPrint(unsigned short)>
          goto fail;
    4490:	b.n	4468 <ExFatFile::read(void*, unsigned int)+0x188>
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // read single sector
      n = m_vol->bytesPerSector();
      if (!m_vol->readSector(sector, dst)) {
        DBG_FAIL_MACRO;
    4492:	mov.w	r0, #632	; 0x278
    4496:	bl	40dc <dbgPrint(unsigned short)>
        goto fail;
    449a:	b.n	4468 <ExFatFile::read(void*, unsigned int)+0x188>
      } else if (isContiguous()) {
        m_curCluster++;
      } else {
        fg = m_vol->fatGet(m_curCluster, &m_curCluster);
        if (fg < 0) {
          DBG_FAIL_MACRO;
    449c:	movw	r0, #575	; 0x23f
    44a0:	bl	40dc <dbgPrint(unsigned short)>
          goto fail;
    44a4:	b.n	4468 <ExFatFile::read(void*, unsigned int)+0x188>
        }
        if (fg == 0) {
          // EOF if directory.
          if (isDir()) {
    44a6:	ldrb.w	r3, [r4, #49]	; 0x31
    44aa:	tst.w	r3, #80	; 0x50
    44ae:	bne.n	4456 <ExFatFile::read(void*, unsigned int)+0x176>
            break;
          }
          DBG_FAIL_MACRO;
    44b0:	movw	r0, #583	; 0x247
    44b4:	bl	40dc <dbgPrint(unsigned short)>
          goto fail;
    44b8:	b.n	4468 <ExFatFile::read(void*, unsigned int)+0x188>
  uint16_t sectorOffset;
  uint32_t sector;
  uint32_t clusterOffset;

  if (!isReadable()) {
    DBG_FAIL_MACRO;
    44ba:	movw	r0, #555	; 0x22b
    44be:	bl	40dc <dbgPrint(unsigned short)>
    goto fail;
    44c2:	b.n	4468 <ExFatFile::read(void*, unsigned int)+0x188>

000044c4 <ExFatFile::peek()>:
  }
  fname->len = len;
  return true;
}
//-----------------------------------------------------------------------------
int ExFatFile::peek() {
    44c4:	push	{r4, r5, r6, r7, lr}
    44c6:	sub	sp, #12
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
    44c8:	movs	r2, #1
    44ca:	add.w	r1, sp, #7
    44ce:	mov	r4, r0
  uint64_t curPosition = m_curPosition;
    44d0:	ldrd	r6, r7, [r0]
  uint32_t curCluster = m_curCluster;
    44d4:	ldr	r5, [r0, #24]
    44d6:	bl	42e0 <ExFatFile::read(void*, unsigned int)>
    44da:	cmp	r0, #1
    44dc:	it	eq
    44de:	ldrbeq.w	r0, [sp, #7]
  int c = read();
  m_curPosition = curPosition;
  m_curCluster = curCluster;
    44e2:	str	r5, [r4, #24]
    44e4:	it	ne
    44e6:	movne.w	r0, #4294967295
//-----------------------------------------------------------------------------
int ExFatFile::peek() {
  uint64_t curPosition = m_curPosition;
  uint32_t curCluster = m_curCluster;
  int c = read();
  m_curPosition = curPosition;
    44ea:	strd	r6, r7, [r4]
  m_curCluster = curCluster;
  return c;
}
    44ee:	add	sp, #12
    44f0:	pop	{r4, r5, r6, r7, pc}
    44f2:	nop

000044f4 <ExFatFile::seekSet(unsigned long long)>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::seekSet(uint64_t pos) {
    44f4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    44f8:	ldrb.w	ip, [r0, #49]	; 0x31
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
    44fc:	ldr	r5, [r0, #24]

fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::seekSet(uint64_t pos) {
    44fe:	sub	sp, #12
    4500:	mov	r4, r0
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
  // error if file not open
  if (!isOpen()) {
    4502:	cmp.w	ip, #0
    4506:	beq.n	45de <ExFatFile::seekSet(unsigned long long)+0xea>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    4508:	ldrd	r0, r1, [r0]
    450c:	cmp	r1, r3
    450e:	it	eq
    4510:	cmpeq	r0, r2
    4512:	mov	r6, r2
    4514:	mov	r7, r3
    4516:	beq.n	45f8 <ExFatFile::seekSet(unsigned long long)+0x104>
    return true;
  }
  if (pos == 0) {
    4518:	orrs.w	r3, r6, r7
    451c:	bne.n	452e <ExFatFile::seekSet(unsigned long long)+0x3a>
    // set position to start of file
    m_curCluster = 0;
    451e:	movs	r3, #0
    4520:	str	r3, [r4, #24]
    }
  }

done:
  m_curPosition = pos;
  return true;
    4522:	movs	r0, #1
      goto fail;
    }
  }

done:
  m_curPosition = pos;
    4524:	strd	r6, r7, [r4]
  return true;

fail:
  m_curCluster = tmp;
  return false;
}
    4528:	add	sp, #12
    452a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (pos == 0) {
    // set position to start of file
    m_curCluster = 0;
    goto done;
  }
  if (isFile()) {
    452e:	tst.w	ip, #8
    4532:	beq.n	4540 <ExFatFile::seekSet(unsigned long long)+0x4c>
    if (pos > m_validLength) {
    4534:	ldrd	r2, r3, [r4, #16]
    4538:	cmp	r3, r7
    453a:	it	eq
    453c:	cmpeq	r2, r6
    453e:	bcc.n	4600 <ExFatFile::seekSet(unsigned long long)+0x10c>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // calculate cluster index for new position
  nNew = (pos - 1) >> m_vol->bytesPerClusterShift();
    4540:	ldr	r3, [r4, #32]
    4542:	str	r3, [sp, #4]
    4544:	ldrb.w	lr, [r3, #1085]	; 0x43d
  if (isContiguous()) {
    4548:	ldrb.w	sl, [r4, #51]	; 0x33
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // calculate cluster index for new position
  nNew = (pos - 1) >> m_vol->bytesPerClusterShift();
    454c:	add.w	lr, lr, #9
    4550:	uxtb.w	lr, lr
    4554:	adds.w	r2, r6, #4294967295
    4558:	adc.w	r3, r7, #4294967295
    455c:	rsb	r8, lr, #32
    4560:	lsl.w	fp, r3, r8
    4564:	lsr.w	r2, r2, lr
    4568:	orr.w	r2, r2, fp
    456c:	sub.w	fp, lr, #32
    4570:	lsr.w	r3, r3, fp
  if (isContiguous()) {
    4574:	tst.w	sl, #64	; 0x40
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // calculate cluster index for new position
  nNew = (pos - 1) >> m_vol->bytesPerClusterShift();
    4578:	orr.w	r2, r2, r3
  if (isContiguous()) {
    457c:	bne.n	45f0 <ExFatFile::seekSet(unsigned long long)+0xfc>
    m_curCluster = m_firstCluster + nNew;
    goto done;
  }
  // calculate cluster index for current position
  nCur = (m_curPosition - 1) >> m_vol->bytesPerClusterShift();
    457e:	adds.w	r9, r0, #4294967295
    4582:	adc.w	sl, r1, #4294967295
    4586:	lsr.w	lr, r9, lr
    458a:	lsl.w	r8, sl, r8
    458e:	orr.w	lr, lr, r8
    4592:	lsr.w	fp, sl, fp
    4596:	orr.w	lr, lr, fp
  if (nNew < nCur || m_curPosition == 0) {
    459a:	cmp	r2, lr
  if (isContiguous()) {
    m_curCluster = m_firstCluster + nNew;
    goto done;
  }
  // calculate cluster index for current position
  nCur = (m_curPosition - 1) >> m_vol->bytesPerClusterShift();
    459c:	mov	r3, sl
  if (nNew < nCur || m_curPosition == 0) {
    459e:	bcc.n	45a6 <ExFatFile::seekSet(unsigned long long)+0xb2>
    45a0:	orrs.w	r3, r0, r1
    45a4:	bne.n	460a <ExFatFile::seekSet(unsigned long long)+0x116>
    // must follow chain from first cluster
    m_curCluster = isRoot() ? m_vol->rootDirectoryCluster() : m_firstCluster;
    45a6:	tst.w	ip, #64	; 0x40
    45aa:	itet	ne
    45ac:	ldrne	r3, [sp, #4]
    45ae:	ldreq	r3, [r4, #28]
    45b0:	ldrne.w	r3, [r3, #1068]	; 0x42c
    45b4:	str	r3, [r4, #24]

fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::seekSet(uint64_t pos) {
    45b6:	mov	r8, r2
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
    45b8:	add.w	r9, r4, #24
    45bc:	mov	r2, r9
    m_curCluster = isRoot() ? m_vol->rootDirectoryCluster() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    45be:	cmp.w	r8, #0
    45c2:	beq.n	4522 <ExFatFile::seekSet(unsigned long long)+0x2e>
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
    45c4:	ldr	r1, [r4, #24]
    45c6:	ldr	r0, [r4, #32]
    45c8:	bl	4f74 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
    45cc:	add.w	r8, r8, #4294967295
    45d0:	cmp	r0, #0
    45d2:	bne.n	45bc <ExFatFile::seekSet(unsigned long long)+0xc8>
      DBG_FAIL_MACRO;
    45d4:	mov.w	r0, #700	; 0x2bc
    45d8:	bl	40dc <dbgPrint(unsigned short)>
      goto fail;
    45dc:	b.n	45e6 <ExFatFile::seekSet(unsigned long long)+0xf2>
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
  // error if file not open
  if (!isOpen()) {
    DBG_FAIL_MACRO;
    45de:	movw	r0, #665	; 0x299
    45e2:	bl	40dc <dbgPrint(unsigned short)>
  m_curPosition = pos;
  return true;

fail:
  m_curCluster = tmp;
  return false;
    45e6:	movs	r0, #0
done:
  m_curPosition = pos;
  return true;

fail:
  m_curCluster = tmp;
    45e8:	str	r5, [r4, #24]
  return false;
}
    45ea:	add	sp, #12
    45ec:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    }
  }
  // calculate cluster index for new position
  nNew = (pos - 1) >> m_vol->bytesPerClusterShift();
  if (isContiguous()) {
    m_curCluster = m_firstCluster + nNew;
    45f0:	ldr	r3, [r4, #28]
    45f2:	add	r2, r3
    45f4:	str	r2, [r4, #24]
    goto done;
    45f6:	b.n	4522 <ExFatFile::seekSet(unsigned long long)+0x2e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    return true;
    45f8:	movs	r0, #1
  return true;

fail:
  m_curCluster = tmp;
  return false;
}
    45fa:	add	sp, #12
    45fc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    m_curCluster = 0;
    goto done;
  }
  if (isFile()) {
    if (pos > m_validLength) {
      DBG_FAIL_MACRO;
    4600:	movw	r0, #679	; 0x2a7
    4604:	bl	40dc <dbgPrint(unsigned short)>
      goto fail;
    4608:	b.n	45e6 <ExFatFile::seekSet(unsigned long long)+0xf2>
  if (nNew < nCur || m_curPosition == 0) {
    // must follow chain from first cluster
    m_curCluster = isRoot() ? m_vol->rootDirectoryCluster() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
    460a:	rsb	r2, lr, r2
    460e:	b.n	45b6 <ExFatFile::seekSet(unsigned long long)+0xc2>

00004610 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)>:
 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::openRootFile(ExFatFile* dir, const ExChar_t* name,
                          uint8_t nameLength, oflag_t oflag) {
    4610:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4614:	mov	r5, r1
    4616:	sub	sp, #76	; 0x4c
  uint8_t freeCount = 0;
  uint8_t freeNeed;
  bool inSet = false;

  // error if already open
  if (isOpen() || !dir->isDir()) {
    4618:	ldrb.w	r1, [r0, #49]	; 0x31
 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::openRootFile(ExFatFile* dir, const ExChar_t* name,
                          uint8_t nameLength, oflag_t oflag) {
    461c:	str	r2, [sp, #0]
    461e:	mov	r6, r0
  uint8_t freeCount = 0;
  uint8_t freeNeed;
  bool inSet = false;

  // error if already open
  if (isOpen() || !dir->isDir()) {
    4620:	cbnz	r1, 462e <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
    4622:	mov	fp, r3
    4624:	ldrb.w	r3, [r5, #49]	; 0x31
    4628:	tst.w	r3, #80	; 0x50
    462c:	bne.n	4644 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x34>
    DBG_FAIL_MACRO;
    462e:	movs	r0, #206	; 0xce
    4630:	bl	40dc <dbgPrint(unsigned short)>
  return sync();
#endif  // READ_ONLY
 fail:

  // close file
  m_attributes = FILE_ATTR_CLOSED;
    4634:	movs	r0, #0
    4636:	strb.w	r0, [r6, #49]	; 0x31
  m_flags = 0;
    463a:	strb.w	r0, [r6, #51]	; 0x33
  return false;
}
    463e:	add	sp, #76	; 0x4c
    4640:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  // error if already open
  if (isOpen() || !dir->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  switch (oflag & O_ACCMODE) {
    4644:	ldr	r3, [sp, #112]	; 0x70
    4646:	and.w	r3, r3, #3
    464a:	cmp	r3, #1
    464c:	beq.w	486c <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x25c>
    4650:	cmp	r3, #2
    4652:	beq.n	4662 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x52>
    4654:	cmp	r3, #0
    4656:	beq.w	4868 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x258>
      break;
    case O_RDWR:
      modeFlags = FILE_FLAG_READ | FILE_FLAG_WRITE;
      break;
    default:
      DBG_FAIL_MACRO;
    465a:	movs	r0, #220	; 0xdc
    465c:	bl	40dc <dbgPrint(unsigned short)>
      goto fail;
    4660:	b.n	4634 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x24>
  // error if already open
  if (isOpen() || !dir->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  switch (oflag & O_ACCMODE) {
    4662:	movs	r3, #3
      break;
    default:
      DBG_FAIL_MACRO;
      goto fail;
  }
  modeFlags |= oflag & O_APPEND ? FILE_FLAG_APPEND : 0;
    4664:	ldr	r2, [sp, #112]	; 0x70
    4666:	and.w	r2, r2, #8
    466a:	orrs	r3, r2
    466c:	str	r3, [sp, #4]
  if (name) {
    466e:	ldr	r3, [sp, #0]
    4670:	cmp	r3, #0
    4672:	beq.w	4878 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x268>
    nameHash = exFatHashName(name, nameLength, 0);
    4676:	movs	r2, #0
    4678:	mov	r0, r3
    467a:	mov	r1, fp
    467c:	bl	51a4 <exFatHashName(char const*, unsigned int, unsigned short)>
   * \return true for success or false for failure.
   */
  bool rename(ExFatFile* dirFile, const ExChar_t* newPath);
  /** Set the file's current position to zero. */
  void rewind() {
    seekSet(0);
    4680:	movs	r2, #0
    4682:	str	r0, [sp, #8]
    4684:	movs	r3, #0
    4686:	mov	r0, r5
    4688:	bl	44f4 <ExFatFile::seekSet(unsigned long long)>
    dir->rewind();
  }
  freeNeed = 2 + (nameLength + 14)/15;
    468c:	ldr	r2, [pc, #708]	; (4954 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x344>)
    468e:	add.w	r3, fp, #14
    4692:	smull	r1, r2, r2, r3
    4696:	add	r2, r3
    4698:	asrs	r3, r3, #31
    469a:	rsb	r3, r3, r2, asr #3
    469e:	uxtb	r3, r3
  DirStream_t* dirStream;
  DirName_t*   dirName;
  uint8_t buf[32];
  uint8_t freeCount = 0;
  uint8_t freeNeed;
  bool inSet = false;
    46a0:	mov.w	r9, #0
  modeFlags |= oflag & O_APPEND ? FILE_FLAG_APPEND : 0;
  if (name) {
    nameHash = exFatHashName(name, nameLength, 0);
    dir->rewind();
  }
  freeNeed = 2 + (nameLength + 14)/15;
    46a4:	add.w	sl, r3, #2
    46a8:	str	r3, [sp, #12]
    46aa:	uxtb.w	sl, sl

  DirFile_t*   dirFile;
  DirStream_t* dirStream;
  DirName_t*   dirName;
  uint8_t buf[32];
  uint8_t freeCount = 0;
    46ae:	mov	r4, r9
}
//------------------------------------------------------------------------------
bool ExFatFile::openRootFile(ExFatFile* dir, const ExChar_t* name,
                          uint8_t nameLength, oflag_t oflag) {
  int n;
  uint8_t nameOffset = 0;
    46b0:	mov	r7, r9
    dir->rewind();
  }
  freeNeed = 2 + (nameLength + 14)/15;

  while (1) {
    n = dir->read(buf, 32);
    46b2:	movs	r2, #32
    46b4:	add	r1, sp, #40	; 0x28
    46b6:	mov	r0, r5
    46b8:	bl	42e0 <ExFatFile::read(void*, unsigned int)>
    if (n == 0) {
    46bc:	cmp	r0, #0
    46be:	beq.n	473e <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x12e>
      goto create;
    }
    if (n != 32) {
    46c0:	cmp	r0, #32
    46c2:	bne.w	4870 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x260>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(buf[0] & 0x80)) {
    46c6:	ldrb.w	r3, [sp, #40]	; 0x28
    46ca:	lsls	r2, r3, #24
    46cc:	bmi.n	479e <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x18e>
      if (freeCount == 0) {
    46ce:	cmp	r4, #0
    46d0:	bne.n	4798 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x188>
        freePos.position = dir->curPosition() - 32;
    46d2:	ldr	r2, [r5, #0]
        freePos.cluster = dir->curCluster();
    46d4:	ldr	r1, [r5, #24]
    46d6:	str	r1, [sp, #28]
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(buf[0] & 0x80)) {
      if (freeCount == 0) {
        freePos.position = dir->curPosition() - 32;
    46d8:	subs	r2, #32
    46da:	str	r2, [sp, #32]
        freePos.cluster = dir->curCluster();
      }
      if (freeCount < freeNeed) {
        freeCount++;
    46dc:	adds	r4, #1
    46de:	uxtb	r4, r4
      }
      if (!buf[0]) {
    46e0:	cbz	r3, 473e <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x12e>
      if (buf[0] != EXFAT_TYPE_FILE) {
        continue;
      }
      inSet = true;
    }
    switch (buf[0]) {
    46e2:	cmp	r3, #192	; 0xc0
    46e4:	beq.w	480c <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1fc>
    46e8:	cmp	r3, #193	; 0xc1
    46ea:	beq.n	47b4 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1a4>
    46ec:	cmp	r3, #133	; 0x85
    46ee:	bne.n	46b2 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xa2>
      case EXFAT_TYPE_FILE:
        memset(this, 0, sizeof(ExFatFile));
    46f0:	movs	r2, #56	; 0x38
    46f2:	movs	r1, #0
    46f4:	mov	r0, r6
    46f6:	bl	c92c <memset>
        dirFile = reinterpret_cast<DirFile_t*>(buf);
        m_setCount = dirFile->setCount;
        m_attributes = getLe16(dirFile->attributes) & FILE_ATTR_COPY;
    46fa:	ldrb.w	r3, [sp, #44]	; 0x2c
    }
    switch (buf[0]) {
      case EXFAT_TYPE_FILE:
        memset(this, 0, sizeof(ExFatFile));
        dirFile = reinterpret_cast<DirFile_t*>(buf);
        m_setCount = dirFile->setCount;
    46fe:	ldrb.w	r2, [sp, #41]	; 0x29
    4702:	strb.w	r2, [r6, #48]	; 0x30
        m_attributes = getLe16(dirFile->attributes) & FILE_ATTR_COPY;
        if (!(m_attributes & EXFAT_ATTRIB_DIRECTORY)) {
    4706:	lsls	r0, r3, #27
    switch (buf[0]) {
      case EXFAT_TYPE_FILE:
        memset(this, 0, sizeof(ExFatFile));
        dirFile = reinterpret_cast<DirFile_t*>(buf);
        m_setCount = dirFile->setCount;
        m_attributes = getLe16(dirFile->attributes) & FILE_ATTR_COPY;
    4708:	and.w	r2, r3, #55	; 0x37
        if (!(m_attributes & EXFAT_ATTRIB_DIRECTORY)) {
          m_attributes |= FILE_ATTR_FILE;
    470c:	it	pl
    470e:	orrpl.w	r2, r2, #8
    4712:	strb.w	r2, [r6, #49]	; 0x31
        }
        m_vol = dir->volume();

        m_dirPos.cluster = dir->curCluster();
        m_dirPos.position = dir->curPosition() - 32;
    4716:	ldr	r3, [r5, #0]
    4718:	ldr	r1, [r5, #32]
    471a:	ldr	r2, [r5, #24]
        if (!(m_attributes & EXFAT_ATTRIB_DIRECTORY)) {
          m_attributes |= FILE_ATTR_FILE;
        }
        m_vol = dir->volume();

        m_dirPos.cluster = dir->curCluster();
    471c:	str	r2, [r6, #36]	; 0x24
        m_dirPos.position = dir->curPosition() - 32;
    471e:	subs	r3, #32
        m_setCount = dirFile->setCount;
        m_attributes = getLe16(dirFile->attributes) & FILE_ATTR_COPY;
        if (!(m_attributes & EXFAT_ATTRIB_DIRECTORY)) {
          m_attributes |= FILE_ATTR_FILE;
        }
        m_vol = dir->volume();
    4720:	str	r1, [r6, #32]

        m_dirPos.cluster = dir->curCluster();
        m_dirPos.position = dir->curPosition() - 32;
    4722:	str	r3, [r6, #40]	; 0x28
        m_dirPos.isContiguous = dir->isContiguous();
    4724:	ldrb.w	r3, [r5, #51]	; 0x33
    4728:	ubfx	r3, r3, #6, #1
    472c:	strb.w	r3, [r6, #44]	; 0x2c
    dir->rewind();
  }
  freeNeed = 2 + (nameLength + 14)/15;

  while (1) {
    n = dir->read(buf, 32);
    4730:	movs	r2, #32
    4732:	add	r1, sp, #40	; 0x28
    4734:	mov	r0, r5
    4736:	bl	42e0 <ExFatFile::read(void*, unsigned int)>
    if (n == 0) {
    473a:	cmp	r0, #0
    473c:	bne.n	46c0 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xb0>
#if READ_ONLY
  DBG_FAIL_MACRO;
  goto fail;
#else  // READ_ONLY
  // don't create unless O_CREAT and write
  if (!(oflag & O_CREAT) || !(modeFlags & FILE_FLAG_WRITE) || !name) {
    473e:	ldr	r3, [sp, #112]	; 0x70
    4740:	lsls	r1, r3, #22
    4742:	bpl.w	485e <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x24e>
    4746:	ldr	r3, [sp, #4]
    4748:	lsls	r2, r3, #30
    474a:	bpl.w	485e <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x24e>
    474e:	ldr	r3, [sp, #0]
    4750:	cmp	r3, #0
    4752:	beq.w	485e <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x24e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (freeCount < freeNeed) {
    4756:	cmp	r4, sl
    4758:	bcc.n	4776 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x166>
    475a:	b.n	4888 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x278>
        goto fail;
      }
      dir->m_curCluster = curCluster;
      continue;
    }
    if (n != 32) {
    475c:	cmp	r0, #32
    475e:	bne.w	494a <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x33a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (freeCount == 0) {
    4762:	cbnz	r4, 476e <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x15e>
      freePos.position = dir->curPosition() - 32;
    4764:	ldr	r2, [r5, #0]
      freePos.cluster = dir->curCluster();
    4766:	ldr	r1, [r5, #24]
    4768:	str	r1, [sp, #28]
    if (n != 32) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (freeCount == 0) {
      freePos.position = dir->curPosition() - 32;
    476a:	subs	r2, #32
    476c:	str	r2, [sp, #32]
      freePos.cluster = dir->curCluster();
    }
    freeCount++;
    476e:	uxtb	r4, r3
  // don't create unless O_CREAT and write
  if (!(oflag & O_CREAT) || !(modeFlags & FILE_FLAG_WRITE) || !name) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (freeCount < freeNeed) {
    4770:	cmp	sl, r4
    4772:	bls.w	4888 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x278>
    n = dir->read(buf, 32);
    4776:	movs	r2, #32
    4778:	add	r1, sp, #40	; 0x28
    477a:	mov	r0, r5
    477c:	bl	42e0 <ExFatFile::read(void*, unsigned int)>
    }
    if (freeCount == 0) {
      freePos.position = dir->curPosition() - 32;
      freePos.cluster = dir->curCluster();
    }
    freeCount++;
    4780:	adds	r3, r4, #1
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (freeCount < freeNeed) {
    n = dir->read(buf, 32);
    if (n == 0) {
    4782:	cmp	r0, #0
    4784:	bne.n	475c <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x14c>
      curCluster = dir->m_curCluster;
      if (!dir->addDirCluster()) {
    4786:	mov	r0, r5
    goto fail;
  }
  while (freeCount < freeNeed) {
    n = dir->read(buf, 32);
    if (n == 0) {
      curCluster = dir->m_curCluster;
    4788:	ldr	r7, [r5, #24]
      if (!dir->addDirCluster()) {
    478a:	bl	56c0 <ExFatFile::addDirCluster()>
    478e:	cmp	r0, #0
    4790:	beq.w	49a6 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x396>
        DBG_FAIL_MACRO;
        goto fail;
      }
      dir->m_curCluster = curCluster;
    4794:	str	r7, [r5, #24]
      continue;
    4796:	b.n	4770 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x160>
    if (!(buf[0] & 0x80)) {
      if (freeCount == 0) {
        freePos.position = dir->curPosition() - 32;
        freePos.cluster = dir->curCluster();
      }
      if (freeCount < freeNeed) {
    4798:	cmp	r4, sl
    479a:	bcs.n	46e0 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xd0>
    479c:	b.n	46dc <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xcc>
        freeCount++;
      }
      if (!buf[0]) {
        goto create;
      }
    } else if (!inSet) {
    479e:	cmp.w	r9, #0
    47a2:	bne.n	46e2 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xd2>
      if (freeCount < freeNeed) {
        freeCount = 0;
    47a4:	cmp	r4, sl
    47a6:	it	cc
    47a8:	movcc	r4, #0
      }
      if (buf[0] != EXFAT_TYPE_FILE) {
    47aa:	cmp	r3, #133	; 0x85
    47ac:	bne.n	46b2 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xa2>
        continue;
      }
      inSet = true;
    47ae:	mov.w	r9, #1
    47b2:	b.n	46f0 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xe0>
        }
        break;

      case EXFAT_TYPE_NAME:
        dirName = reinterpret_cast<DirName_t*>(buf);
        nCmp = nameLength - nameOffset;
    47b4:	rsb	r8, r7, fp
    47b8:	uxtb.w	r8, r8
    47bc:	cmp.w	r8, #15
    47c0:	it	cs
    47c2:	movcs.w	r8, #15
        if (nCmp > 15) {
          nCmp = 15;
        }
        if (!exFatCmpName(dirName, name, nameOffset, nCmp)) {
    47c6:	mov	r3, r8
    47c8:	mov	r2, r7
    47ca:	ldr	r1, [sp, #0]
    47cc:	add	r0, sp, #40	; 0x28
    47ce:	bl	51e0 <exFatCmpName(DirName_t const*, char const*, unsigned int, unsigned int)>
    47d2:	cmp	r0, #0
    47d4:	beq.n	484c <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x23c>
          inSet = false;
          break;
        }
        nameOffset += nCmp;
    47d6:	add	r7, r8
    47d8:	uxtb	r7, r7

        if (nameOffset == nameLength) {
    47da:	cmp	fp, r7
    47dc:	bne.w	46b2 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xa2>
    }
  }

 found:
  // Don't open if create only.
  if (oflag & O_EXCL) {
    47e0:	ldr	r3, [sp, #112]	; 0x70
    47e2:	lsls	r3, r3, #20
    47e4:	bmi.n	487e <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x26e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Write, truncate, or at end is an error for a directory or read-only file.
  if ((oflag & (O_TRUNC | O_AT_END)) || (m_flags & FILE_FLAG_WRITE)) {
    47e6:	ldr	r3, [sp, #112]	; 0x70
    47e8:	tst.w	r3, #17408	; 0x4400
    47ec:	bne.w	4958 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x348>
    47f0:	ldrb.w	r3, [r6, #51]	; 0x33
    47f4:	lsls	r7, r3, #30
    47f6:	bmi.w	4958 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x348>
      goto fail;
    }
  }

#if !READ_ONLY
  if (oflag & O_TRUNC) {
    47fa:	ldr	r3, [sp, #112]	; 0x70
    47fc:	lsls	r3, r3, #21
    47fe:	bpl.w	499c <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x38c>
    if (!(m_flags & FILE_FLAG_WRITE)) {
      DBG_FAIL_MACRO;
    4802:	mov.w	r0, #334	; 0x14e
    4806:	bl	40dc <dbgPrint(unsigned short)>
      goto fail;
    480a:	b.n	4634 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x24>
        break;

      case EXFAT_TYPE_STREAM:
        dirStream = reinterpret_cast<DirStream_t*>(buf);
        m_flags = modeFlags;
        if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
    480c:	ldrb.w	r3, [sp, #41]	; 0x29
        m_dirPos.isContiguous = dir->isContiguous();
        break;

      case EXFAT_TYPE_STREAM:
        dirStream = reinterpret_cast<DirStream_t*>(buf);
        m_flags = modeFlags;
    4810:	ldr	r2, [sp, #4]
    4812:	strb.w	r2, [r6, #51]	; 0x33
        if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
    4816:	lsls	r1, r3, #30
    4818:	bpl.n	4822 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x212>
          m_flags |= FILE_FLAG_CONTIGUOUS;
    481a:	orr.w	r3, r2, #64	; 0x40
    481e:	strb.w	r3, [r6, #51]	; 0x33
        }
        nameOffset = 0;
        m_validLength = getLe64(dirStream->validLength);
    4822:	ldrd	r2, r3, [sp, #48]	; 0x30
        m_firstCluster = getLe32(dirStream->firstCluster);
        m_dataLength = getLe64(dirStream->dataLength);
    4826:	ldrd	r0, r1, [sp, #64]	; 0x40
        m_flags = modeFlags;
        if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
          m_flags |= FILE_FLAG_CONTIGUOUS;
        }
        nameOffset = 0;
        m_validLength = getLe64(dirStream->validLength);
    482a:	strd	r2, r3, [r6, #16]
        m_firstCluster = getLe32(dirStream->firstCluster);
    482e:	ldr	r3, [sp, #60]	; 0x3c
    4830:	str	r3, [r6, #28]
        m_dataLength = getLe64(dirStream->dataLength);
        if (!name) {
    4832:	ldr	r3, [sp, #0]
          m_flags |= FILE_FLAG_CONTIGUOUS;
        }
        nameOffset = 0;
        m_validLength = getLe64(dirStream->validLength);
        m_firstCluster = getLe32(dirStream->firstCluster);
        m_dataLength = getLe64(dirStream->dataLength);
    4834:	strd	r0, r1, [r6, #8]
        if (!name) {
    4838:	cmp	r3, #0
    483a:	beq.n	47e0 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1d0>
          goto found;
        }
        if (nameLength != dirStream->nameLength ||
    483c:	ldrb.w	r3, [sp, #43]	; 0x2b
    4840:	cmp	r3, fp
    4842:	beq.n	4850 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x240>
            nameHash != getLe16(dirStream->nameHash)) {
          inSet = false;
    4844:	mov.w	r9, #0
        dirStream = reinterpret_cast<DirStream_t*>(buf);
        m_flags = modeFlags;
        if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
          m_flags |= FILE_FLAG_CONTIGUOUS;
        }
        nameOffset = 0;
    4848:	mov	r7, r9
    484a:	b.n	46b2 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xa2>
        nCmp = nameLength - nameOffset;
        if (nCmp > 15) {
          nCmp = 15;
        }
        if (!exFatCmpName(dirName, name, nameOffset, nCmp)) {
          inSet = false;
    484c:	mov	r9, r0
    484e:	b.n	46b2 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xa2>
        m_firstCluster = getLe32(dirStream->firstCluster);
        m_dataLength = getLe64(dirStream->dataLength);
        if (!name) {
          goto found;
        }
        if (nameLength != dirStream->nameLength ||
    4850:	ldrh.w	r3, [sp, #44]	; 0x2c
    4854:	ldr	r2, [sp, #8]
    4856:	cmp	r3, r2
    4858:	bne.n	4844 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x234>
        dirStream = reinterpret_cast<DirStream_t*>(buf);
        m_flags = modeFlags;
        if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
          m_flags |= FILE_FLAG_CONTIGUOUS;
        }
        nameOffset = 0;
    485a:	movs	r7, #0
    485c:	b.n	46b2 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xa2>
  DBG_FAIL_MACRO;
  goto fail;
#else  // READ_ONLY
  // don't create unless O_CREAT and write
  if (!(oflag & O_CREAT) || !(modeFlags & FILE_FLAG_WRITE) || !name) {
    DBG_FAIL_MACRO;
    485e:	movw	r0, #355	; 0x163
    4862:	bl	40dc <dbgPrint(unsigned short)>
    goto fail;
    4866:	b.n	4634 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x24>
  // error if already open
  if (isOpen() || !dir->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  switch (oflag & O_ACCMODE) {
    4868:	movs	r3, #1
    486a:	b.n	4664 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x54>
    486c:	movs	r3, #2
    486e:	b.n	4664 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x54>
    n = dir->read(buf, 32);
    if (n == 0) {
      goto create;
    }
    if (n != 32) {
      DBG_FAIL_MACRO;
    4870:	movs	r0, #236	; 0xec
    4872:	bl	40dc <dbgPrint(unsigned short)>
      goto fail;
    4876:	b.n	4634 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x24>
                          uint8_t nameLength, oflag_t oflag) {
  int n;
  uint8_t nameOffset = 0;
  uint8_t nCmp;
  uint8_t modeFlags;
  uint16_t nameHash = 0;
    4878:	ldr	r3, [sp, #0]
    487a:	str	r3, [sp, #8]
    487c:	b.n	468c <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x7c>
  }

 found:
  // Don't open if create only.
  if (oflag & O_EXCL) {
    DBG_FAIL_MACRO;
    487e:	mov.w	r0, #320	; 0x140
    4882:	bl	40dc <dbgPrint(unsigned short)>
    goto fail;
    4886:	b.n	4634 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x24>
      freePos.cluster = dir->curCluster();
    }
    freeCount++;
  }

  freePos.isContiguous = dir->isContiguous();
    4888:	ldrb.w	r3, [r5, #51]	; 0x33
  memset(this, 0, sizeof(ExFatFile));
    488c:	movs	r2, #56	; 0x38
      freePos.cluster = dir->curCluster();
    }
    freeCount++;
  }

  freePos.isContiguous = dir->isContiguous();
    488e:	ubfx	r3, r3, #6, #1
  memset(this, 0, sizeof(ExFatFile));
    4892:	movs	r1, #0
    4894:	mov	r0, r6
  m_vol = dir->volume();
  m_attributes = FILE_ATTR_FILE;
  m_dirPos = freePos;
    4896:	add.w	r8, sp, #28
      freePos.cluster = dir->curCluster();
    }
    freeCount++;
  }

  freePos.isContiguous = dir->isContiguous();
    489a:	strb.w	r3, [sp, #36]	; 0x24
  memset(this, 0, sizeof(ExFatFile));
    489e:	bl	c92c <memset>
    }
    memset(cache, 0 , 32);
    if (i == 0) {
      dirFile = reinterpret_cast<DirFile_t*>(cache);
      dirFile->type = EXFAT_TYPE_FILE;
      m_setCount = freeNeed - 1;
    48a2:	ldr	r4, [sp, #12]
    48a4:	ldr	r3, [r5, #32]
    48a6:	str.w	fp, [sp, #12]

  freePos.isContiguous = dir->isContiguous();
  memset(this, 0, sizeof(ExFatFile));
  m_vol = dir->volume();
  m_attributes = FILE_ATTR_FILE;
  m_dirPos = freePos;
    48aa:	ldmia.w	r8, {r0, r1, r2}
    }
    memset(cache, 0 , 32);
    if (i == 0) {
      dirFile = reinterpret_cast<DirFile_t*>(cache);
      dirFile->type = EXFAT_TYPE_FILE;
      m_setCount = freeNeed - 1;
    48ae:	add.w	r9, r4, #1
  }

  freePos.isContiguous = dir->isContiguous();
  memset(this, 0, sizeof(ExFatFile));
  m_vol = dir->volume();
  m_attributes = FILE_ATTR_FILE;
    48b2:	movs	r4, #8
    48b4:	strb.w	r4, [r6, #49]	; 0x31
    48b8:	add.w	r7, fp, #30
  m_dirPos = freePos;
    48bc:	add.w	r4, r6, #36	; 0x24
    48c0:	ldr.w	fp, [sp]
    freeCount++;
  }

  freePos.isContiguous = dir->isContiguous();
  memset(this, 0, sizeof(ExFatFile));
  m_vol = dir->volume();
    48c4:	str	r3, [r6, #32]
    }
    memset(cache, 0 , 32);
    if (i == 0) {
      dirFile = reinterpret_cast<DirFile_t*>(cache);
      dirFile->type = EXFAT_TYPE_FILE;
      m_setCount = freeNeed - 1;
    48c6:	uxtb.w	r9, r9

  freePos.isContiguous = dir->isContiguous();
  memset(this, 0, sizeof(ExFatFile));
  m_vol = dir->volume();
  m_attributes = FILE_ATTR_FILE;
  m_dirPos = freePos;
    48ca:	stmia.w	r4, {r0, r1, r2}
    48ce:	uxtb	r7, r7
  for (uint8_t i = 0; i < freeNeed; i++) {
    48d0:	movs	r5, #0
    48d2:	mov	r0, r3
      if (1 != m_vol->dirSeek(&freePos, 32)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    cache = m_vol->dirCache(&freePos, FsCache::CACHE_FOR_WRITE);
    48d4:	movs	r2, #1
    48d6:	mov	r1, r8
    48d8:	bl	4f40 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
    if (!cache || (cache[0] & 0x80)) {
    48dc:	mov	r4, r0
    48de:	cmp	r0, #0
    48e0:	beq.n	4992 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x382>
    48e2:	ldrsb.w	r3, [r0]
    48e6:	cmp	r3, #0
    48e8:	blt.n	4992 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x382>
      DBG_FAIL_MACRO;
      goto fail;
    }
    memset(cache, 0 , 32);
    48ea:	movs	r2, #32
    48ec:	movs	r1, #0
    48ee:	bl	c92c <memset>
    if (i == 0) {
    48f2:	cmp	r5, #0
    48f4:	beq.w	4a06 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x3f6>
        FsDateTime::callback(&date, &time, &ms10);
        dirFile->createTimeMs = ms10;
        setLe16(dirFile->createTime, time);
        setLe16(dirFile->createDate, date);
      }
    } else if (i == 1) {
    48f8:	cmp	r5, #1
    48fa:	beq.n	49e6 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x3d6>
    48fc:	rsb	r3, r5, r5, lsl #4
    4900:	cmp	r7, #15
    4902:	sub.w	r3, r3, #30

      dirStream->nameLength = nameLength;
      setLe16(dirStream->nameHash, nameHash);
    } else {
      dirName = reinterpret_cast<DirName_t*>(cache);
      dirName->type = EXFAT_TYPE_NAME;
    4906:	mov.w	r2, #193	; 0xc1
    490a:	mov	r1, r7
    490c:	it	cs
    490e:	movcs	r1, #15
    4910:	uxtb	r3, r3
    4912:	strb	r2, [r4, #0]
      nameOffset = 15*(i - 2);
      nCmp = nameLength - nameOffset;
      if (nCmp > 15) {
        nCmp = 15;
      }
      for (size_t k = 0; k < nCmp; k++) {
    4914:	cbz	r1, 492c <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x31c>
    4916:	adds	r4, #2
    4918:	sxth	r1, r1
    491a:	add.w	r1, r4, r1, lsl #1
    491e:	add	r3, fp
        setLe16(dirName->unicode + 2*k, name[k + nameOffset]);
    4920:	ldrb.w	r2, [r3], #1
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    4924:	strh.w	r2, [r4], #2
      nameOffset = 15*(i - 2);
      nCmp = nameLength - nameOffset;
      if (nCmp > 15) {
        nCmp = 15;
      }
      for (size_t k = 0; k < nCmp; k++) {
    4928:	cmp	r1, r4
    492a:	bne.n	4920 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x310>
  freePos.isContiguous = dir->isContiguous();
  memset(this, 0, sizeof(ExFatFile));
  m_vol = dir->volume();
  m_attributes = FILE_ATTR_FILE;
  m_dirPos = freePos;
  for (uint8_t i = 0; i < freeNeed; i++) {
    492c:	adds	r5, #1
    492e:	uxtb	r5, r5
    4930:	cmp	sl, r5
    4932:	bls.n	49ba <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x3aa>
    if (i) {
      if (1 != m_vol->dirSeek(&freePos, 32)) {
    4934:	movs	r2, #32
    4936:	mov	r1, r8
    4938:	ldr	r0, [r6, #32]
    493a:	bl	4fc0 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)>
    493e:	cmp	r0, #1
    4940:	bne.n	49b0 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x3a0>
    4942:	subs	r7, #15
    4944:	ldr	r0, [r6, #32]
    4946:	uxtb	r7, r7
    4948:	b.n	48d4 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x2c4>
      }
      dir->m_curCluster = curCluster;
      continue;
    }
    if (n != 32) {
      DBG_FAIL_MACRO;
    494a:	mov.w	r0, #370	; 0x172
    494e:	bl	40dc <dbgPrint(unsigned short)>
      goto fail;
    4952:	b.n	4634 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x24>
    4954:	.word	0x88888889
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Write, truncate, or at end is an error for a directory or read-only file.
  if ((oflag & (O_TRUNC | O_AT_END)) || (m_flags & FILE_FLAG_WRITE)) {
    if (isSubDir() || isReadOnly() || READ_ONLY) {
    4958:	ldrb.w	r3, [r6, #49]	; 0x31
    495c:	tst.w	r3, #17
    4960:	bne.n	4988 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x378>
      goto fail;
    }
  }

#if !READ_ONLY
  if (oflag & O_TRUNC) {
    4962:	ldr	r3, [sp, #112]	; 0x70
    4964:	lsls	r5, r3, #21
    4966:	bpl.n	499c <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x38c>
    if (!(m_flags & FILE_FLAG_WRITE)) {
    4968:	ldrb.w	r3, [r6, #51]	; 0x33
    496c:	lsls	r4, r3, #30
    496e:	bpl.w	4802 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1f2>
   * \param[in] length The desired length for the file.
   *
   * \return true for success or false for failure.
   */
  bool truncate(uint64_t length) {
    return seekSet(length) && truncate();
    4972:	movs	r2, #0
    4974:	movs	r3, #0
    4976:	mov	r0, r6
    4978:	bl	44f4 <ExFatFile::seekSet(unsigned long long)>
    497c:	cbnz	r0, 49da <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x3ca>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!truncate(0)) {
      DBG_FAIL_MACRO;
    497e:	mov.w	r0, #338	; 0x152
    4982:	bl	40dc <dbgPrint(unsigned short)>
      goto fail;
    4986:	b.n	4634 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x24>
    goto fail;
  }
  // Write, truncate, or at end is an error for a directory or read-only file.
  if ((oflag & (O_TRUNC | O_AT_END)) || (m_flags & FILE_FLAG_WRITE)) {
    if (isSubDir() || isReadOnly() || READ_ONLY) {
      DBG_FAIL_MACRO;
    4988:	mov.w	r0, #326	; 0x146
    498c:	bl	40dc <dbgPrint(unsigned short)>
      goto fail;
    4990:	b.n	4634 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x24>
        goto fail;
      }
    }
    cache = m_vol->dirCache(&freePos, FsCache::CACHE_FOR_WRITE);
    if (!cache || (cache[0] & 0x80)) {
      DBG_FAIL_MACRO;
    4992:	mov.w	r0, #394	; 0x18a
    4996:	bl	40dc <dbgPrint(unsigned short)>
      goto fail;
    499a:	b.n	4634 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x24>
    }
    if (!truncate(0)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if ((oflag & O_AT_END) && !seekSet(fileSize())) {
    499c:	ldr	r3, [sp, #112]	; 0x70
    499e:	lsls	r0, r3, #17
    49a0:	bmi.n	49c2 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x3b2>
    DBG_FAIL_MACRO;
    goto fail;
  }
#endif  // READ_ONLY
  return true;
    49a2:	movs	r0, #1
    49a4:	b.n	463e <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x2e>
  while (freeCount < freeNeed) {
    n = dir->read(buf, 32);
    if (n == 0) {
      curCluster = dir->m_curCluster;
      if (!dir->addDirCluster()) {
        DBG_FAIL_MACRO;
    49a6:	movw	r0, #363	; 0x16b
    49aa:	bl	40dc <dbgPrint(unsigned short)>
        goto fail;
    49ae:	b.n	4634 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x24>
  m_attributes = FILE_ATTR_FILE;
  m_dirPos = freePos;
  for (uint8_t i = 0; i < freeNeed; i++) {
    if (i) {
      if (1 != m_vol->dirSeek(&freePos, 32)) {
        DBG_FAIL_MACRO;
    49b0:	mov.w	r0, #388	; 0x184
    49b4:	bl	40dc <dbgPrint(unsigned short)>
        goto fail;
    49b8:	b.n	4634 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x24>
      for (size_t k = 0; k < nCmp; k++) {
        setLe16(dirName->unicode + 2*k, name[k + nameOffset]);
      }
    }
  }
  return sync();
    49ba:	mov	r0, r6
    49bc:	bl	5658 <ExFatFile::sync()>
    49c0:	b.n	463e <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x2e>
    }
    if (!truncate(0)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if ((oflag & O_AT_END) && !seekSet(fileSize())) {
    49c2:	ldrd	r2, r3, [r6, #16]
    49c6:	mov	r0, r6
    49c8:	bl	44f4 <ExFatFile::seekSet(unsigned long long)>
    49cc:	cmp	r0, #0
    49ce:	bne.n	49a2 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x392>
    DBG_FAIL_MACRO;
    49d0:	mov.w	r0, #342	; 0x156
    49d4:	bl	40dc <dbgPrint(unsigned short)>
    goto fail;
    49d8:	b.n	4634 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x24>
    49da:	mov	r0, r6
    49dc:	bl	5a28 <ExFatFile::truncate()>
    49e0:	cmp	r0, #0
    49e2:	beq.n	497e <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x36e>
    49e4:	b.n	49a2 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x392>
        setLe16(dirFile->createTime, time);
        setLe16(dirFile->createDate, date);
      }
    } else if (i == 1) {
      dirStream = reinterpret_cast<DirStream_t*>(cache);
      dirStream->type = EXFAT_TYPE_STREAM;
    49e6:	movs	r3, #192	; 0xc0
    49e8:	strb	r3, [r4, #0]
      dirStream->flags = EXFAT_FLAG_ALWAYS1 | EXFAT_FLAG_CONTIGUOUS;
      m_flags = modeFlags | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
    49ea:	ldr	r3, [sp, #4]
        setLe16(dirFile->createDate, date);
      }
    } else if (i == 1) {
      dirStream = reinterpret_cast<DirStream_t*>(cache);
      dirStream->type = EXFAT_TYPE_STREAM;
      dirStream->flags = EXFAT_FLAG_ALWAYS1 | EXFAT_FLAG_CONTIGUOUS;
    49ec:	movs	r2, #3
      m_flags = modeFlags | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
    49ee:	orn	r3, r3, #63	; 0x3f
        setLe16(dirFile->createDate, date);
      }
    } else if (i == 1) {
      dirStream = reinterpret_cast<DirStream_t*>(cache);
      dirStream->type = EXFAT_TYPE_STREAM;
      dirStream->flags = EXFAT_FLAG_ALWAYS1 | EXFAT_FLAG_CONTIGUOUS;
    49f2:	strb	r2, [r4, #1]
      m_flags = modeFlags | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
    49f4:	strb.w	r3, [r6, #51]	; 0x33

      dirStream->nameLength = nameLength;
    49f8:	ldrb.w	r3, [sp, #12]
    49fc:	strb	r3, [r4, #3]
    49fe:	ldrh.w	r3, [sp, #8]
    4a02:	strh	r3, [r4, #4]
    4a04:	b.n	492c <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x31c>
      goto fail;
    }
    memset(cache, 0 , 32);
    if (i == 0) {
      dirFile = reinterpret_cast<DirFile_t*>(cache);
      dirFile->type = EXFAT_TYPE_FILE;
    4a06:	movs	r3, #133	; 0x85
    4a08:	strb	r3, [r4, #0]
      m_setCount = freeNeed - 1;
      dirFile->setCount = m_setCount;
      if (FsDateTime::callback) {
    4a0a:	ldr	r3, [pc, #48]	; (4a3c <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x42c>)
    }
    memset(cache, 0 , 32);
    if (i == 0) {
      dirFile = reinterpret_cast<DirFile_t*>(cache);
      dirFile->type = EXFAT_TYPE_FILE;
      m_setCount = freeNeed - 1;
    4a0c:	strb.w	r9, [r6, #48]	; 0x30
      dirFile->setCount = m_setCount;
    4a10:	strb.w	r9, [r4, #1]
      if (FsDateTime::callback) {
    4a14:	ldr	r3, [r3, #0]
    4a16:	cmp	r3, #0
    4a18:	beq.n	492c <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x31c>
        uint16_t date, time;
        uint8_t ms10;
        FsDateTime::callback(&date, &time, &ms10);
    4a1a:	add.w	r2, sp, #23
    4a1e:	add.w	r1, sp, #26
    4a22:	add	r0, sp, #24
    4a24:	blx	r3
        dirFile->createTimeMs = ms10;
    4a26:	ldrb.w	r1, [sp, #23]
    4a2a:	ldrh.w	r2, [sp, #26]
    4a2e:	ldrh.w	r3, [sp, #24]
    4a32:	strb	r1, [r4, #20]
    4a34:	strh	r2, [r4, #8]
    4a36:	strh	r3, [r4, #10]
    4a38:	b.n	492c <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x31c>
    4a3a:	nop
    4a3c:	.word	0x1fff8724

00004a40 <ExFatFile::open(ExFatFile*, char const*, int)>:
//-----------------------------------------------------------------------------
bool ExFatFile::open(ExFatVolume* vol, const ExChar_t* path, int oflag) {
  return vol && open(vol->vwd(), path, oflag);
}
//------------------------------------------------------------------------------
bool ExFatFile::open(ExFatFile* dirFile, const ExChar_t* path, oflag_t oflag) {
    4a40:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    4a44:	mov	r6, r0
    4a46:	sub	sp, #84	; 0x54
  ExFatFile tmpDir;
  ExName_t fname;
  // error if already open
  if (isOpen() || !dirFile->isDir()) {
    4a48:	ldrb.w	r4, [r6, #49]	; 0x31
//-----------------------------------------------------------------------------
bool ExFatFile::open(ExFatVolume* vol, const ExChar_t* path, int oflag) {
  return vol && open(vol->vwd(), path, oflag);
}
//------------------------------------------------------------------------------
bool ExFatFile::open(ExFatFile* dirFile, const ExChar_t* path, oflag_t oflag) {
    4a4c:	str	r2, [sp, #12]
 * \brief Basic file class.
 */
class ExFatFile {
 public:
  /** Create an instance. */
  ExFatFile() : m_attributes(FILE_ATTR_CLOSED), m_error(0), m_flags(0) {}
    4a4e:	movs	r0, #0
    4a50:	strb.w	r0, [sp, #73]	; 0x49
    4a54:	strb.w	r0, [sp, #74]	; 0x4a
    4a58:	strb.w	r0, [sp, #75]	; 0x4b
  ExFatFile tmpDir;
  ExName_t fname;
  // error if already open
  if (isOpen() || !dirFile->isDir()) {
    4a5c:	cmp	r4, #0
    4a5e:	bne.n	4afc <ExFatFile::open(ExFatFile*, char const*, int)+0xbc>
    4a60:	mov	r9, r3
    4a62:	ldrb.w	r3, [r1, #49]	; 0x31
    4a66:	tst.w	r3, #80	; 0x50
    4a6a:	mov	r5, r1
    4a6c:	beq.n	4afc <ExFatFile::open(ExFatFile*, char const*, int)+0xbc>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    4a6e:	ldrb	r3, [r2, #0]
    4a70:	cmp	r3, #47	; 0x2f
    4a72:	mov	r1, r2
    4a74:	beq.n	4ade <ExFatFile::open(ExFatFile*, char const*, int)+0x9e>
  uint8_t setCount() {return m_setCount;}
  bool mkdir(ExFatFile* parent, ExName_t* fname);
  bool openRootFile(ExFatFile* dir,
                    const ExChar_t* name, uint8_t nameLength, oflag_t oflag);
  bool open(ExFatFile* dirFile, ExName_t* fname, oflag_t oflag) {
    return openRootFile(dirFile, fname->lfn, fname->len, oflag);
    4a76:	mov.w	r8, #0
      goto fail;
    }
    dirFile = &tmpDir;
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
    4a7a:	add	r3, sp, #12
    4a7c:	add	r2, sp, #16
    4a7e:	mov	r0, r6
    4a80:	bl	421c <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>
    4a84:	mov	r4, r0
    4a86:	cmp	r0, #0
    4a88:	beq.n	4b0c <ExFatFile::open(ExFatFile*, char const*, int)+0xcc>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (*path == 0) {
    4a8a:	ldr	r3, [sp, #12]
    4a8c:	ldrb	r3, [r3, #0]
    4a8e:	cmp	r3, #0
    4a90:	beq.n	4b1a <ExFatFile::open(ExFatFile*, char const*, int)+0xda>
    4a92:	ldrb.w	r3, [sp, #16]
    4a96:	ldr	r2, [sp, #20]
    4a98:	str.w	r8, [sp]
    4a9c:	mov	r1, r5
    4a9e:	mov	r0, r6
    4aa0:	bl	4610 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)>
      break;
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
    4aa4:	mov	r4, r0
    4aa6:	cmp	r0, #0
    4aa8:	beq.n	4b36 <ExFatFile::open(ExFatFile*, char const*, int)+0xf6>
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
    4aaa:	mov	r4, r6
    4aac:	add	r7, sp, #24
    4aae:	add.w	lr, r6, #48	; 0x30
    4ab2:	ldr	r0, [r4, #0]
    4ab4:	ldr	r1, [r4, #4]
    4ab6:	ldr	r2, [r4, #8]
    4ab8:	ldr	r3, [r4, #12]
    4aba:	mov	r5, r7
    4abc:	stmia	r5!, {r0, r1, r2, r3}
    4abe:	adds	r4, #16
    4ac0:	cmp	r4, lr
    4ac2:	mov	r7, r5
    4ac4:	bne.n	4ab2 <ExFatFile::open(ExFatFile*, char const*, int)+0x72>
    4ac6:	ldr	r0, [r4, #0]
    4ac8:	str	r0, [r5, #0]
#include "ExFatFile.h"
#include "ExFatVolume.h"
#include "upcase.h"
//-----------------------------------------------------------------------------
bool ExFatFile::close() {
  bool rtn = sync();
    4aca:	mov	r0, r6
    4acc:	bl	5658 <ExFatFile::sync()>
    if (!open(dirFile, &fname, O_RDONLY)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
    dirFile = &tmpDir;
    4ad0:	add	r5, sp, #24
#include "ExFatVolume.h"
#include "upcase.h"
//-----------------------------------------------------------------------------
bool ExFatFile::close() {
  bool rtn = sync();
  m_attributes = FILE_ATTR_CLOSED;
    4ad2:	strb.w	r8, [r6, #49]	; 0x31
  m_flags = 0;
    4ad6:	strb.w	r8, [r6, #51]	; 0x33
    4ada:	ldr	r1, [sp, #12]
    4adc:	b.n	4a7a <ExFatFile::open(ExFatFile*, char const*, int)+0x3a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
      path++;
    4ade:	adds	r1, #1
    4ae0:	str	r1, [sp, #12]
  if (isOpen() || !dirFile->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
    4ae2:	ldrb	r3, [r1, #0]
    4ae4:	cmp	r3, #47	; 0x2f
    4ae6:	beq.n	4ade <ExFatFile::open(ExFatFile*, char const*, int)+0x9e>
      path++;
    }
    if (*path == 0) {
      return openRoot(dirFile->m_vol);
    4ae8:	ldr	r1, [r5, #32]
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
      path++;
    }
    if (*path == 0) {
    4aea:	cbz	r3, 4b44 <ExFatFile::open(ExFatFile*, char const*, int)+0x104>
      return openRoot(dirFile->m_vol);
    }
    if (!tmpDir.openRoot(dirFile->m_vol)) {
    4aec:	add	r0, sp, #24
    4aee:	bl	41ec <ExFatFile::openRoot(ExFatVolume*)>
    4af2:	mov	r4, r0
    4af4:	cbz	r0, 4b4e <ExFatFile::open(ExFatFile*, char const*, int)+0x10e>
    4af6:	ldr	r1, [sp, #12]
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile = &tmpDir;
    4af8:	add	r5, sp, #24
    4afa:	b.n	4a76 <ExFatFile::open(ExFatFile*, char const*, int)+0x36>
bool ExFatFile::open(ExFatFile* dirFile, const ExChar_t* path, oflag_t oflag) {
  ExFatFile tmpDir;
  ExName_t fname;
  // error if already open
  if (isOpen() || !dirFile->isDir()) {
    DBG_FAIL_MACRO;
    4afc:	movs	r0, #125	; 0x7d
    4afe:	bl	40dc <dbgPrint(unsigned short)>
    close();
  }
  return open(dirFile, &fname, oflag);

fail:
  return false;
    4b02:	movs	r4, #0
}
    4b04:	mov	r0, r4
    4b06:	add	sp, #84	; 0x54
    4b08:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    }
    dirFile = &tmpDir;
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
      DBG_FAIL_MACRO;
    4b0c:	movs	r0, #143	; 0x8f
    4b0e:	bl	40dc <dbgPrint(unsigned short)>
  }
  return open(dirFile, &fname, oflag);

fail:
  return false;
}
    4b12:	mov	r0, r4
    4b14:	add	sp, #84	; 0x54
    4b16:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    4b1a:	ldrb.w	r3, [sp, #16]
    4b1e:	ldr	r2, [sp, #20]
    4b20:	str.w	r9, [sp]
    4b24:	mov	r1, r5
    4b26:	mov	r0, r6
    4b28:	bl	4610 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)>
    4b2c:	mov	r4, r0
    4b2e:	mov	r0, r4
    4b30:	add	sp, #84	; 0x54
    4b32:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    }
    if (*path == 0) {
      break;
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
      DBG_FAIL_MACRO;
    4b36:	movs	r0, #150	; 0x96
    4b38:	bl	40dc <dbgPrint(unsigned short)>
  }
  return open(dirFile, &fname, oflag);

fail:
  return false;
}
    4b3c:	mov	r0, r4
    4b3e:	add	sp, #84	; 0x54
    4b40:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
      path++;
    }
    if (*path == 0) {
      return openRoot(dirFile->m_vol);
    4b44:	mov	r0, r6
    4b46:	bl	41ec <ExFatFile::openRoot(ExFatVolume*)>
    4b4a:	mov	r4, r0
    4b4c:	b.n	4b04 <ExFatFile::open(ExFatFile*, char const*, int)+0xc4>
    }
    if (!tmpDir.openRoot(dirFile->m_vol)) {
      DBG_FAIL_MACRO;
    4b4e:	movs	r0, #136	; 0x88
    4b50:	bl	40dc <dbgPrint(unsigned short)>
      goto fail;
    4b54:	b.n	4b04 <ExFatFile::open(ExFatFile*, char const*, int)+0xc4>
    4b56:	nop

00004b58 <ExFatFile::open(ExFatVolume*, char const*, int)>:
bool ExFatFile::open(const ExChar_t* path, int oflag) {
  return open(ExFatVolume::cwv(), path, oflag);
}
//-----------------------------------------------------------------------------
bool ExFatFile::open(ExFatVolume* vol, const ExChar_t* path, int oflag) {
  return vol && open(vol->vwd(), path, oflag);
    4b58:	cbz	r1, 4b62 <ExFatFile::open(ExFatVolume*, char const*, int)+0xa>
    4b5a:	add.w	r1, r1, #1088	; 0x440
    4b5e:	b.w	4a40 <ExFatFile::open(ExFatFile*, char const*, int)>
}
    4b62:	mov	r0, r1
    4b64:	bx	lr
    4b66:	nop

00004b68 <ExFatFile::openNext(ExFatFile*, int)>:
    DBG_FAIL_MACRO;
  }
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::openNext(ExFatFile* dir, oflag_t oflag) {
    4b68:	push	{r4, r5, lr}
  if (isOpen() || !dir->isDir() || (dir->curPosition() & 0X1F)) {
    4b6a:	ldrb.w	r3, [r0, #49]	; 0x31
    DBG_FAIL_MACRO;
  }
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::openNext(ExFatFile* dir, oflag_t oflag) {
    4b6e:	sub	sp, #12
  if (isOpen() || !dir->isDir() || (dir->curPosition() & 0X1F)) {
    4b70:	cbnz	r3, 4b7c <ExFatFile::openNext(ExFatFile*, int)+0x14>
    4b72:	ldrb.w	r5, [r1, #49]	; 0x31
    4b76:	tst.w	r5, #80	; 0x50
    4b7a:	bne.n	4b88 <ExFatFile::openNext(ExFatFile*, int)+0x20>
    DBG_FAIL_MACRO;
    4b7c:	movs	r0, #176	; 0xb0
    4b7e:	bl	40dc <dbgPrint(unsigned short)>
    goto fail;
  }
  return openRootFile(dir, nullptr, 0, oflag);

 fail:
  return false;
    4b82:	movs	r0, #0
}
    4b84:	add	sp, #12
    4b86:	pop	{r4, r5, pc}
  }
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::openNext(ExFatFile* dir, oflag_t oflag) {
  if (isOpen() || !dir->isDir() || (dir->curPosition() & 0X1F)) {
    4b88:	ldrd	r4, r5, [r1]
    4b8c:	movs	r5, #0
    4b8e:	and.w	r4, r4, #31
    4b92:	orrs	r4, r5
    4b94:	bne.n	4b7c <ExFatFile::openNext(ExFatFile*, int)+0x14>
    DBG_FAIL_MACRO;
    goto fail;
  }
  return openRootFile(dir, nullptr, 0, oflag);
    4b96:	str	r2, [sp, #0]
    4b98:	mov	r2, r3
    4b9a:	bl	4610 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)>

 fail:
  return false;
}
    4b9e:	add	sp, #12
    4ba0:	pop	{r4, r5, pc}
    4ba2:	nop

00004ba4 <dbgPrint(unsigned short)>:
#if USE_DBG_MACROS
#include "Arduino.h"
#ifndef DBG_FILE
#error DBG_FILE not defined
#endif  // DBG_FILE
static void dbgPrint(uint16_t line) {
    4ba4:	push	{r3, r4, r5, lr}
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    4ba6:	movs	r1, #10
    4ba8:	mov	r5, r0
    4baa:	ldr	r0, [pc, #40]	; (4bd4 <dbgPrint(unsigned short)+0x30>)
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    4bac:	ldr	r4, [pc, #40]	; (4bd8 <dbgPrint(unsigned short)+0x34>)
    4bae:	bl	9ca8 <usb_serial_write>
    4bb2:	movs	r1, #18
    4bb4:	ldr	r0, [pc, #36]	; (4bdc <dbgPrint(unsigned short)+0x38>)
    4bb6:	bl	9ca8 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    4bba:	movs	r0, #46	; 0x2e
    4bbc:	bl	9db0 <usb_serial_putchar>
    4bc0:	mov	r1, r5
    4bc2:	mov	r0, r4
    4bc4:	bl	b31c <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    4bc8:	mov	r0, r4
  Serial.print(F("DBG_FAIL: "));
  Serial.print(F(DBG_FILE));
  Serial.write('.');
  Serial.println(line);
}
    4bca:	ldmia.w	sp!, {r3, r4, r5, lr}
    4bce:	b.w	b250 <Print::println()>
    4bd2:	nop
    4bd4:	.word	0x000105c8
    4bd8:	.word	0x1fff09a4
    4bdc:	.word	0x000105e4

00004be0 <FsCache::sync() [clone .part.2]>:

fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FsCache::sync() {
    4be0:	push	{r3, r4, r5, lr}
  if (m_status & CACHE_STATUS_DIRTY) {
    if (!m_blockDev->writeSector(m_sector, m_cacheBuffer)) {
    4be2:	add.w	r2, r0, #12

fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FsCache::sync() {
    4be6:	mov	r4, r0
  if (m_status & CACHE_STATUS_DIRTY) {
    if (!m_blockDev->writeSector(m_sector, m_cacheBuffer)) {
    4be8:	ldr	r0, [r0, #4]
    4bea:	ldr	r1, [r4, #8]
    4bec:	ldr	r3, [r0, #0]
    4bee:	ldr	r3, [r3, #24]
    4bf0:	blx	r3
    4bf2:	mov	r5, r0
    4bf4:	cbz	r0, 4c02 <FsCache::sync() [clone .part.2]+0x22>
      DBG_FAIL_MACRO;
      goto fail;
    }
    m_status &= ~CACHE_STATUS_DIRTY;
    4bf6:	ldrb	r3, [r4, #0]
    4bf8:	bic.w	r3, r3, #1
    4bfc:	strb	r3, [r4, #0]
  }
  return true;

fail:
  return false;
}
    4bfe:	mov	r0, r5
    4c00:	pop	{r3, r4, r5, pc}
}
//------------------------------------------------------------------------------
bool FsCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    if (!m_blockDev->writeSector(m_sector, m_cacheBuffer)) {
      DBG_FAIL_MACRO;
    4c02:	movs	r0, #64	; 0x40
    4c04:	bl	4ba4 <dbgPrint(unsigned short)>
  }
  return true;

fail:
  return false;
}
    4c08:	mov	r0, r5
    4c0a:	pop	{r3, r4, r5, pc}

00004c0c <FsCache::invalidate()>:
#include "../common/DebugMacros.h"
#include "ExFatVolume.h"
#include "../common/FsStructs.h"
//-----------------------------------------------------------------------------
void FsCache::invalidate() {
  m_status = 0;
    4c0c:	movs	r2, #0
  m_sector = 0XFFFFFFFF;
    4c0e:	mov.w	r3, #4294967295
#include "../common/DebugMacros.h"
#include "ExFatVolume.h"
#include "../common/FsStructs.h"
//-----------------------------------------------------------------------------
void FsCache::invalidate() {
  m_status = 0;
    4c12:	strb	r2, [r0, #0]
  m_sector = 0XFFFFFFFF;
    4c14:	str	r3, [r0, #8]
    4c16:	bx	lr

00004c18 <FsCache::get(unsigned long, unsigned char)>:
}
//-----------------------------------------------------------------------------
uint8_t* FsCache::get(uint32_t sector, uint8_t option) {
    4c18:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (!m_blockDev) {
    4c1c:	ldr	r4, [r0, #4]
    4c1e:	cmp	r4, #0
    4c20:	beq.n	4c98 <FsCache::get(unsigned long, unsigned char)+0x80>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_sector != sector) {
    4c22:	ldr	r3, [r0, #8]
    4c24:	cmp	r3, r1
    4c26:	mov	r6, r0
    4c28:	mov	r8, r1
    4c2a:	mov	r7, r2
    4c2c:	beq.n	4c50 <FsCache::get(unsigned long, unsigned char)+0x38>
fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FsCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    4c2e:	ldrb	r3, [r0, #0]
    4c30:	lsls	r2, r3, #31
    4c32:	bmi.n	4c60 <FsCache::get(unsigned long, unsigned char)+0x48>
  if (m_sector != sector) {
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
    4c34:	lsls	r3, r7, #30
    4c36:	bpl.n	4c76 <FsCache::get(unsigned long, unsigned char)+0x5e>
    4c38:	add.w	r5, r6, #12
    4c3c:	movs	r3, #0
      }
    }
    m_status = 0;
    m_sector = sector;
  }
  m_status |= option & CACHE_STATUS_MASK;
    4c3e:	and.w	r7, r7, #1
    4c42:	orrs	r7, r3
    4c44:	strb	r7, [r6, #0]
    4c46:	mov	r0, r5
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status = 0;
    m_sector = sector;
    4c48:	str.w	r8, [r6, #8]
  m_status |= option & CACHE_STATUS_MASK;
  return m_cacheBuffer;

fail:
  return nullptr;
}
    4c4c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4c50:	ldrsb.w	r3, [r0], #12
      }
    }
    m_status = 0;
    m_sector = sector;
  }
  m_status |= option & CACHE_STATUS_MASK;
    4c54:	and.w	r7, r7, #1
    4c58:	orrs	r7, r3
    4c5a:	strb	r7, [r6, #0]
  return m_cacheBuffer;

fail:
  return nullptr;
}
    4c5c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4c60:	bl	4be0 <FsCache::sync() [clone .part.2]>
  if (!m_blockDev) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_sector != sector) {
    if (!sync()) {
    4c64:	mov	r4, r0
    4c66:	cmp	r0, #0
    4c68:	bne.n	4c34 <FsCache::get(unsigned long, unsigned char)+0x1c>
      DBG_FAIL_MACRO;
    4c6a:	movs	r0, #42	; 0x2a
    4c6c:	bl	4ba4 <dbgPrint(unsigned short)>
  }
  m_status |= option & CACHE_STATUS_MASK;
  return m_cacheBuffer;

fail:
  return nullptr;
    4c70:	mov	r0, r4
    goto fail;
  }
  if (m_sector != sector) {
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    4c72:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
      if (!m_blockDev->readSector(sector, m_cacheBuffer)) {
    4c76:	ldr	r0, [r6, #4]
    4c78:	ldr	r3, [r0, #0]
    4c7a:	add.w	r5, r6, #12
    4c7e:	ldr	r3, [r3, #8]
    4c80:	mov	r2, r5
    4c82:	mov	r1, r8
    4c84:	blx	r3
    4c86:	mov	r4, r0
    4c88:	cmp	r0, #0
    4c8a:	bne.n	4c3c <FsCache::get(unsigned long, unsigned char)+0x24>
        DBG_FAIL_MACRO;
    4c8c:	movs	r0, #47	; 0x2f
    4c8e:	bl	4ba4 <dbgPrint(unsigned short)>
  }
  m_status |= option & CACHE_STATUS_MASK;
  return m_cacheBuffer;

fail:
  return nullptr;
    4c92:	mov	r0, r4
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
      if (!m_blockDev->readSector(sector, m_cacheBuffer)) {
        DBG_FAIL_MACRO;
        goto fail;
    4c94:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  m_sector = 0XFFFFFFFF;
}
//-----------------------------------------------------------------------------
uint8_t* FsCache::get(uint32_t sector, uint8_t option) {
  if (!m_blockDev) {
    DBG_FAIL_MACRO;
    4c98:	movs	r0, #37	; 0x25
    4c9a:	bl	4ba4 <dbgPrint(unsigned short)>
  }
  m_status |= option & CACHE_STATUS_MASK;
  return m_cacheBuffer;

fail:
  return nullptr;
    4c9e:	mov	r0, r4
}
//-----------------------------------------------------------------------------
uint8_t* FsCache::get(uint32_t sector, uint8_t option) {
  if (!m_blockDev) {
    DBG_FAIL_MACRO;
    goto fail;
    4ca0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00004ca4 <FsCache::sync()>:
fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FsCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    4ca4:	ldrb	r3, [r0, #0]
    4ca6:	lsls	r3, r3, #31
    4ca8:	bmi.n	4cae <FsCache::sync()+0xa>
  }
  return true;

fail:
  return false;
}
    4caa:	movs	r0, #1
    4cac:	bx	lr
    4cae:	b.w	4be0 <FsCache::sync() [clone .part.2]>
    4cb2:	nop

00004cb4 <ExFatPartition::bitmapFind(unsigned long, unsigned long)>:
 fail:
  return false;
}
//-----------------------------------------------------------------------------
// return 0 if error, 1 if no space, else start cluster.
uint32_t ExFatPartition::bitmapFind(uint32_t cluster, uint32_t count) {
    4cb4:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4cb8:	mov	r8, r0
    4cba:	mov	r9, r2
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
    4cbc:	mov	fp, r1
    4cbe:	cmp	r1, #0
    4cc0:	beq.n	4d4c <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x98>
    4cc2:	subs	r7, r1, #2
  if (start >= m_clusterCount) {
    4cc4:	ldr.w	r3, [r8, #1064]	; 0x428
    4cc8:	cmp	r7, r3
    4cca:	bcs.n	4d44 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x90>
    4ccc:	and.w	r5, r7, #7
    4cd0:	movs	r3, #1
    4cd2:	lsl.w	r5, r3, r5
    4cd6:	uxtb	r5, r5
    4cd8:	ubfx	sl, r7, #3, #9
    start = 0;
  }
  uint32_t endAlloc = start;
  uint32_t bgnAlloc = start;
    4cdc:	mov	r6, r7
uint32_t ExFatPartition::bitmapFind(uint32_t cluster, uint32_t count) {
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
  if (start >= m_clusterCount) {
    start = 0;
  }
  uint32_t endAlloc = start;
    4cde:	mov	r4, r7
  bool bitmapModify(uint32_t cluster, uint32_t count, bool value);
  //----------------------------------------------------------------------------
  // Cache functions.
  uint8_t* bitmapCacheGet(uint32_t sector, uint8_t option) {
#if USE_EXFAT_BITMAP_CACHE
    return m_bitmapCache.get(sector, option);
    4ce0:	ldr.w	r1, [r8, #1060]	; 0x424
    4ce4:	movs	r2, #0
    4ce6:	add.w	r1, r1, r4, lsr #12
    4cea:	mov	r0, r8
    4cec:	bl	4c18 <FsCache::get(unsigned long, unsigned char)>
  uint8_t mask = 1 << (start & 7);
  while (true) {
    uint32_t sector = m_clusterHeapStartSector +
                     (endAlloc >> (m_bytesPerSectorShift + 3));
    cache = bitmapCacheGet(sector, FsCache::CACHE_FOR_READ);
    if (!cache) {
    4cf0:	cbz	r0, 4d24 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x70>
    4cf2:	ldrb.w	r1, [r0, sl]
    4cf6:	b.n	4d0e <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x5a>
    }
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
        endAlloc++;
        if (!(mask & cache[i])) {
          if ((endAlloc - bgnAlloc) == count) {
    4cf8:	cmp	r2, r9
    4cfa:	beq.n	4d52 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x9e>
            return bgnAlloc + 2;
          }
        } else {
          bgnAlloc = endAlloc;
        }
        if (endAlloc == start) {
    4cfc:	cmp	r7, r4
    4cfe:	beq.n	4d22 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x6e>
          return 1;
        }
        if (endAlloc >= m_clusterCount) {
    4d00:	ldr.w	r2, [r8, #1064]	; 0x428
    4d04:	cmp	r4, r2
    4d06:	bcs.n	4d38 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x84>
    cache = bitmapCacheGet(sector, FsCache::CACHE_FOR_READ);
    if (!cache) {
      return 0;
    }
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
    4d08:	ands.w	r5, r3, #255	; 0xff
    4d0c:	beq.n	4d28 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x74>
        endAlloc++;
    4d0e:	adds	r4, #1
        if (!(mask & cache[i])) {
    4d10:	tst	r5, r1
    cache = bitmapCacheGet(sector, FsCache::CACHE_FOR_READ);
    if (!cache) {
      return 0;
    }
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
    4d12:	mov.w	r3, r5, lsl #1
        endAlloc++;
        if (!(mask & cache[i])) {
          if ((endAlloc - bgnAlloc) == count) {
    4d16:	sub.w	r2, r4, r6
      return 0;
    }
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
        endAlloc++;
        if (!(mask & cache[i])) {
    4d1a:	beq.n	4cf8 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x44>
            return bgnAlloc + 2;
          }
        } else {
          bgnAlloc = endAlloc;
        }
        if (endAlloc == start) {
    4d1c:	cmp	r7, r4
    if (!cache) {
      return 0;
    }
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
        endAlloc++;
    4d1e:	mov	r6, r4
            return bgnAlloc + 2;
          }
        } else {
          bgnAlloc = endAlloc;
        }
        if (endAlloc == start) {
    4d20:	bne.n	4d00 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x4c>
          return 1;
    4d22:	movs	r0, #1
      mask = 1;
    }
    i = 0;
  }
  return 0;
}
    4d24:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4d28:	add.w	sl, sl, #1
                     (endAlloc >> (m_bytesPerSectorShift + 3));
    cache = bitmapCacheGet(sector, FsCache::CACHE_FOR_READ);
    if (!cache) {
      return 0;
    }
    for (; i < sectorSize; i++) {
    4d2c:	cmp.w	sl, #512	; 0x200
          endAlloc = bgnAlloc = 0;
          i = sectorSize;
          break;
        }
      }
      mask = 1;
    4d30:	mov.w	r5, #1
                     (endAlloc >> (m_bytesPerSectorShift + 3));
    cache = bitmapCacheGet(sector, FsCache::CACHE_FOR_READ);
    if (!cache) {
      return 0;
    }
    for (; i < sectorSize; i++) {
    4d34:	bne.n	4cf2 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x3e>
    4d36:	b.n	4d3c <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x88>
        }
        if (endAlloc == start) {
          return 1;
        }
        if (endAlloc >= m_clusterCount) {
          endAlloc = bgnAlloc = 0;
    4d38:	movs	r6, #0
    4d3a:	mov	r4, r6
          break;
        }
      }
      mask = 1;
    }
    i = 0;
    4d3c:	mov.w	sl, #0
    4d40:	movs	r5, #1
    4d42:	b.n	4ce0 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x2c>
    4d44:	movs	r7, #0
//-----------------------------------------------------------------------------
// return 0 if error, 1 if no space, else start cluster.
uint32_t ExFatPartition::bitmapFind(uint32_t cluster, uint32_t count) {
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
  if (start >= m_clusterCount) {
    start = 0;
    4d46:	mov	sl, r7
    4d48:	movs	r5, #1
    4d4a:	b.n	4cdc <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x28>
  return false;
}
//-----------------------------------------------------------------------------
// return 0 if error, 1 if no space, else start cluster.
uint32_t ExFatPartition::bitmapFind(uint32_t cluster, uint32_t count) {
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
    4d4c:	ldr.w	r7, [r0, #1048]	; 0x418
    4d50:	b.n	4cc4 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x10>
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
        endAlloc++;
        if (!(mask & cache[i])) {
          if ((endAlloc - bgnAlloc) == count) {
            if (cluster == 0 && count == 1) {
    4d52:	cmp.w	fp, #0
    4d56:	bne.n	4d62 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0xae>
    4d58:	cmp.w	r9, #1
              // Start at found sector.  bitmapModify may increase this.
              m_bitmapStart = bgnAlloc;
    4d5c:	it	eq
    4d5e:	streq.w	r6, [r8, #1048]	; 0x418
            }
            return bgnAlloc + 2;
    4d62:	adds	r0, r6, #2
    4d64:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

00004d68 <ExFatPartition::init(BlockDeviceInterface*, unsigned char)>:

fail:
  return false;
}
//=============================================================================
bool ExFatPartition::init(BlockDevice* dev, uint8_t part) {
    4d68:	push	{r3, r4, r5, r6, r7, lr}
    4d6a:	mov	r4, r0
  pbs_t* pbs;
  BpbExFat_t* bpb;
  MbrSector_t* mbr;
  MbrPart_t* mp;

  m_fatType = 0;
    4d6c:	movs	r3, #0
#include "ExFatVolume.h"
#include "../common/FsStructs.h"
//-----------------------------------------------------------------------------
void FsCache::invalidate() {
  m_status = 0;
  m_sector = 0XFFFFFFFF;
    4d6e:	mov.w	r6, #4294967295
#endif  // USE_EXFAT_BITMAP_CACHE
  }
  void dataCacheDirty() {m_dataCache.dirty();}
  void dataCacheInvalidate() {m_dataCache.invalidate();}
  uint8_t* dataCacheGet(uint32_t sector, uint8_t option) {
    return m_dataCache.get(sector, option);
    4d72:	add.w	r7, r0, #524	; 0x20c
  BpbExFat_t* bpb;
  MbrSector_t* mbr;
  MbrPart_t* mp;

  m_fatType = 0;
  m_blockDev = dev;
    4d76:	str.w	r1, [r0, #1080]	; 0x438
  }
  /** Initialize the cache.
   * \param[in] blockDev Block device for this partition.
   */
  void init(BlockDevice* blockDev) {
    m_blockDev = blockDev;
    4d7a:	str	r1, [r0, #4]
    4d7c:	str.w	r1, [r0, #528]	; 0x210

fail:
  return false;
}
//=============================================================================
bool ExFatPartition::init(BlockDevice* dev, uint8_t part) {
    4d80:	mov	r5, r2
#endif  // USE_EXFAT_BITMAP_CACHE
  }
  void dataCacheDirty() {m_dataCache.dirty();}
  void dataCacheInvalidate() {m_dataCache.invalidate();}
  uint8_t* dataCacheGet(uint32_t sector, uint8_t option) {
    return m_dataCache.get(sector, option);
    4d82:	mov	r0, r7
  pbs_t* pbs;
  BpbExFat_t* bpb;
  MbrSector_t* mbr;
  MbrPart_t* mp;

  m_fatType = 0;
    4d84:	strb.w	r3, [r4, #1084]	; 0x43c
#include "../common/DebugMacros.h"
#include "ExFatVolume.h"
#include "../common/FsStructs.h"
//-----------------------------------------------------------------------------
void FsCache::invalidate() {
  m_status = 0;
    4d88:	strb	r3, [r4, #0]
    4d8a:	strb.w	r3, [r4, #524]	; 0x20c
  m_sector = 0XFFFFFFFF;
    4d8e:	str	r6, [r4, #8]
    4d90:	str.w	r6, [r4, #532]	; 0x214
    4d94:	mov	r2, r3
    4d96:	mov	r1, r3
    4d98:	bl	4c18 <FsCache::get(unsigned long, unsigned char)>

  m_fatType = 0;
  m_blockDev = dev;
  cacheInit(m_blockDev);
  cache = dataCacheGet(0, FsCache::CACHE_FOR_READ);
  if (part > 4 || !cache) {
    4d9c:	cmp	r5, #4
    4d9e:	bhi.n	4e0a <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0xa2>
    4da0:	mov	r6, r0
    4da2:	cbz	r0, 4e0a <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0xa2>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (part >= 1) {
    4da4:	cbnz	r5, 4dc8 <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0x60>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  pbs = reinterpret_cast<pbs_t*>(cache);
  if (strncmp(pbs->oemName, "EXFAT", 5)) {
    4da6:	movs	r2, #5
    4da8:	ldr	r1, [pc, #200]	; (4e74 <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0x10c>)
    4daa:	adds	r0, r6, #3
    4dac:	bl	d01c <strncmp>
    4db0:	mov	r7, r0
    4db2:	cmp	r0, #0
    4db4:	bne.n	4e68 <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0x100>
    DBG_FAIL_MACRO;
    goto fail;
  }
  bpb = reinterpret_cast<BpbExFat_t*>(pbs->bpb);
  if (bpb->bytesPerSectorShift != m_bytesPerSectorShift) {
    4db6:	ldrb.w	r3, [r6, #108]	; 0x6c
    4dba:	cmp	r3, #9
    4dbc:	beq.n	4e14 <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0xac>
    DBG_FAIL_MACRO;
    4dbe:	movs	r0, #112	; 0x70
    4dc0:	bl	4ba4 <dbgPrint(unsigned short)>
  bitmapFind(0, 1);
  m_fatType = FAT_TYPE_EXFAT;
  return true;

 fail:
  return false;
    4dc4:	mov	r0, r7
    goto fail;
  }
  bpb = reinterpret_cast<BpbExFat_t*>(pbs->bpb);
  if (bpb->bytesPerSectorShift != m_bytesPerSectorShift) {
    DBG_FAIL_MACRO;
    goto fail;
    4dc6:	pop	{r3, r4, r5, r6, r7, pc}
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (part >= 1) {
    mbr = reinterpret_cast<MbrSector_t*>(cache);
    mp = &mbr->part[part - 1];
    4dc8:	subs	r3, r5, #1
    if ((mp->boot != 0 && mp->boot != 0X80) || mp->type == 0) {
    4dca:	add.w	r3, r0, r3, lsl #4
    4dce:	ldrb.w	r2, [r3, #446]	; 0x1be
    4dd2:	ands.w	r2, r2, #127	; 0x7f
    4dd6:	beq.n	4de2 <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0x7a>
      DBG_FAIL_MACRO;
    4dd8:	movs	r0, #95	; 0x5f
    4dda:	bl	4ba4 <dbgPrint(unsigned short)>
  bitmapFind(0, 1);
  m_fatType = FAT_TYPE_EXFAT;
  return true;

 fail:
  return false;
    4dde:	movs	r0, #0
  if (part >= 1) {
    mbr = reinterpret_cast<MbrSector_t*>(cache);
    mp = &mbr->part[part - 1];
    if ((mp->boot != 0 && mp->boot != 0X80) || mp->type == 0) {
      DBG_FAIL_MACRO;
      goto fail;
    4de0:	pop	{r3, r4, r5, r6, r7, pc}
    goto fail;
  }
  if (part >= 1) {
    mbr = reinterpret_cast<MbrSector_t*>(cache);
    mp = &mbr->part[part - 1];
    if ((mp->boot != 0 && mp->boot != 0X80) || mp->type == 0) {
    4de2:	ldrb.w	r3, [r3, #450]	; 0x1c2
    4de6:	cmp	r3, #0
    4de8:	beq.n	4dd8 <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0x70>
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
}
inline uint32_t getLe32(const uint8_t* src) {
  return *reinterpret_cast<const uint32_t*>(src);
    4dea:	add.w	r5, r0, r5, lsl #4
    4dee:	mov	r0, r7
    4df0:	ldr.w	r5, [r5, #438]	; 0x1b6
    4df4:	mov	r1, r5
    4df6:	bl	4c18 <FsCache::get(unsigned long, unsigned char)>
      DBG_FAIL_MACRO;
      goto fail;
    }
    volStart = getLe32(mp->relativeSectors);
    cache = dataCacheGet(volStart, FsCache::CACHE_FOR_READ);
    if (!cache) {
    4dfa:	mov	r6, r0
    4dfc:	cmp	r0, #0
    4dfe:	bne.n	4da6 <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0x3e>
      DBG_FAIL_MACRO;
    4e00:	movs	r0, #101	; 0x65
    4e02:	bl	4ba4 <dbgPrint(unsigned short)>
  bitmapFind(0, 1);
  m_fatType = FAT_TYPE_EXFAT;
  return true;

 fail:
  return false;
    4e06:	mov	r0, r6
    }
    volStart = getLe32(mp->relativeSectors);
    cache = dataCacheGet(volStart, FsCache::CACHE_FOR_READ);
    if (!cache) {
      DBG_FAIL_MACRO;
      goto fail;
    4e08:	pop	{r3, r4, r5, r6, r7, pc}
  m_fatType = 0;
  m_blockDev = dev;
  cacheInit(m_blockDev);
  cache = dataCacheGet(0, FsCache::CACHE_FOR_READ);
  if (part > 4 || !cache) {
    DBG_FAIL_MACRO;
    4e0a:	movs	r0, #88	; 0x58
    4e0c:	bl	4ba4 <dbgPrint(unsigned short)>
  bitmapFind(0, 1);
  m_fatType = FAT_TYPE_EXFAT;
  return true;

 fail:
  return false;
    4e10:	movs	r0, #0
  m_blockDev = dev;
  cacheInit(m_blockDev);
  cache = dataCacheGet(0, FsCache::CACHE_FOR_READ);
  if (part > 4 || !cache) {
    DBG_FAIL_MACRO;
    goto fail;
    4e12:	pop	{r3, r4, r5, r6, r7, pc}
  bpb = reinterpret_cast<BpbExFat_t*>(pbs->bpb);
  if (bpb->bytesPerSectorShift != m_bytesPerSectorShift) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_fatStartSector = volStart + getLe32(bpb->fatOffset);
    4e14:	ldr	r3, [r6, #80]	; 0x50
    4e16:	add	r3, r5
    4e18:	str.w	r3, [r4, #1052]	; 0x41c
    4e1c:	ldr	r3, [r6, #84]	; 0x54
  m_fatLength = getLe32(bpb->fatLength);
    4e1e:	str.w	r3, [r4, #1056]	; 0x420
  m_clusterHeapStartSector = volStart + getLe32(bpb->clusterHeapOffset);
    4e22:	ldr	r3, [r6, #88]	; 0x58
    4e24:	add	r5, r3
    4e26:	str.w	r5, [r4, #1060]	; 0x424
    4e2a:	ldr	r3, [r6, #92]	; 0x5c
  m_clusterCount = getLe32(bpb->clusterCount);
    4e2c:	str.w	r3, [r4, #1064]	; 0x428
    4e30:	ldr	r3, [r6, #96]	; 0x60
  m_rootDirectoryCluster = getLe32(bpb->rootDirectoryCluster);
    4e32:	str.w	r3, [r4, #1068]	; 0x42c
  m_sectorsPerClusterShift = bpb->sectorsPerClusterShift;
    4e36:	ldrb.w	r3, [r6, #109]	; 0x6d
    4e3a:	strb.w	r3, [r4, #1085]	; 0x43d
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
    4e3e:	movs	r6, #1
    4e40:	adds	r3, #9
    4e42:	lsl.w	r3, r6, r3
  m_clusterMask = m_bytesPerCluster - 1;
    4e46:	subs	r2, r3, #1
  // Set m_bitmapStart to first free cluster.
  m_bitmapStart = 0;
    4e48:	str.w	r0, [r4, #1048]	; 0x418
  bitmapFind(0, 1);
    4e4c:	mov	r1, r0
  m_fatLength = getLe32(bpb->fatLength);
  m_clusterHeapStartSector = volStart + getLe32(bpb->clusterHeapOffset);
  m_clusterCount = getLe32(bpb->clusterCount);
  m_rootDirectoryCluster = getLe32(bpb->rootDirectoryCluster);
  m_sectorsPerClusterShift = bpb->sectorsPerClusterShift;
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
    4e4e:	str.w	r3, [r4, #1076]	; 0x434
  m_clusterMask = m_bytesPerCluster - 1;
    4e52:	str.w	r2, [r4, #1072]	; 0x430
  // Set m_bitmapStart to first free cluster.
  m_bitmapStart = 0;
  bitmapFind(0, 1);
    4e56:	mov	r0, r4
    4e58:	mov	r2, r6
    4e5a:	bl	4cb4 <ExFatPartition::bitmapFind(unsigned long, unsigned long)>
  m_fatType = FAT_TYPE_EXFAT;
    4e5e:	movs	r3, #64	; 0x40
    4e60:	strb.w	r3, [r4, #1084]	; 0x43c
  return true;
    4e64:	mov	r0, r6

 fail:
  return false;
}
    4e66:	pop	{r3, r4, r5, r6, r7, pc}
      goto fail;
    }
  }
  pbs = reinterpret_cast<pbs_t*>(cache);
  if (strncmp(pbs->oemName, "EXFAT", 5)) {
    DBG_FAIL_MACRO;
    4e68:	movs	r0, #107	; 0x6b
    4e6a:	bl	4ba4 <dbgPrint(unsigned short)>
  bitmapFind(0, 1);
  m_fatType = FAT_TYPE_EXFAT;
  return true;

 fail:
  return false;
    4e6e:	movs	r0, #0
    }
  }
  pbs = reinterpret_cast<pbs_t*>(cache);
  if (strncmp(pbs->oemName, "EXFAT", 5)) {
    DBG_FAIL_MACRO;
    goto fail;
    4e70:	pop	{r3, r4, r5, r6, r7, pc}
    4e72:	nop
    4e74:	.word	0x000105f8

00004e78 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>:
  }
  return 0;
}
//-----------------------------------------------------------------------------
bool ExFatPartition::bitmapModify(uint32_t cluster,
                                  uint32_t count, bool value) {
    4e78:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t sector;
  uint32_t start = cluster - 2;
    4e7c:	subs	r1, #2
  }
  return 0;
}
//-----------------------------------------------------------------------------
bool ExFatPartition::bitmapModify(uint32_t cluster,
                                  uint32_t count, bool value) {
    4e7e:	mov	r9, r0
  uint32_t start = cluster - 2;
  size_t i;
  uint8_t* cache;
  uint8_t mask;
  cluster -= 2;
  if ((start + count) > m_clusterCount) {
    4e80:	ldr.w	r0, [r0, #1064]	; 0x428
  }
  return 0;
}
//-----------------------------------------------------------------------------
bool ExFatPartition::bitmapModify(uint32_t cluster,
                                  uint32_t count, bool value) {
    4e84:	mov	r5, r2
  uint32_t start = cluster - 2;
  size_t i;
  uint8_t* cache;
  uint8_t mask;
  cluster -= 2;
  if ((start + count) > m_clusterCount) {
    4e86:	adds	r2, r1, r2
    4e88:	cmp	r2, r0
    4e8a:	bhi.n	4f28 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0xb0>
    4e8c:	mov	sl, r3
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (value) {
    if (start  <= m_bitmapStart && m_bitmapStart < (start + count)) {
    4e8e:	ldr.w	r3, [r9, #1048]	; 0x418
  cluster -= 2;
  if ((start + count) > m_clusterCount) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (value) {
    4e92:	cmp.w	sl, #0
    4e96:	bne.n	4f02 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x8a>
    if (start  <= m_bitmapStart && m_bitmapStart < (start + count)) {
      m_bitmapStart = (start + count) < m_clusterCount ? start + count : 0;
    }
  } else {
    if (start < m_bitmapStart) {
    4e98:	cmp	r1, r3
      m_bitmapStart = start;
    4e9a:	it	cc
    4e9c:	strcc.w	r1, [r9, #1048]	; 0x418
    }
  }
  mask = 1 << (start & 7);
    4ea0:	and.w	r4, r1, #7
    4ea4:	movs	r2, #1
  sector = m_clusterHeapStartSector +
                   (start >> (m_bytesPerSectorShift + 3));
    4ea6:	ldr.w	r3, [r9, #1060]	; 0x424
  } else {
    if (start < m_bitmapStart) {
      m_bitmapStart = start;
    }
  }
  mask = 1 << (start & 7);
    4eaa:	lsl.w	r4, r2, r4
    4eae:	uxtb	r4, r4
  sector = m_clusterHeapStartSector +
                   (start >> (m_bytesPerSectorShift + 3));
    4eb0:	add.w	r8, r3, r1, lsr #12
  i = (start >> 3) & m_sectorMask;
    4eb4:	ubfx	fp, r1, #3, #9
  bool bitmapModify(uint32_t cluster, uint32_t count, bool value);
  //----------------------------------------------------------------------------
  // Cache functions.
  uint8_t* bitmapCacheGet(uint32_t sector, uint8_t option) {
#if USE_EXFAT_BITMAP_CACHE
    return m_bitmapCache.get(sector, option);
    4eb8:	movs	r2, #1
    4eba:	mov	r1, r8
    4ebc:	mov	r0, r9
  while (true) {
    cache = bitmapCacheGet(sector++, FsCache::CACHE_FOR_WRITE);
    4ebe:	add	r8, r2
    4ec0:	bl	4c18 <FsCache::get(unsigned long, unsigned char)>
    if (!cache) {
    4ec4:	mov	r6, r0
    4ec6:	cbz	r0, 4f34 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0xbc>
    4ec8:	add.w	r7, r0, fp
    4ecc:	add.w	r3, r0, #512	; 0x200
    4ed0:	ldrb.w	r2, [r7], #1
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (; i < m_bytesPerSector; i++) {
      for (; mask; mask <<= 1) {
        if (value == static_cast<bool>(cache[i] & mask)) {
    4ed4:	tst	r2, r4
    4ed6:	ite	ne
    4ed8:	movne	r6, #1
    4eda:	moveq	r6, #0
    4edc:	cmp	r6, sl
          DBG_FAIL_MACRO;
          goto fail;
        }
        cache[i] ^= mask;
    4ede:	eor.w	r2, r2, r4
    if (!cache) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (; i < m_bytesPerSector; i++) {
      for (; mask; mask <<= 1) {
    4ee2:	mov.w	r4, r4, lsl #1
        if (value == static_cast<bool>(cache[i] & mask)) {
    4ee6:	beq.n	4f16 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x9e>
          DBG_FAIL_MACRO;
          goto fail;
        }
        cache[i] ^= mask;
        if (--count == 0) {
    4ee8:	subs	r5, #1
      for (; mask; mask <<= 1) {
        if (value == static_cast<bool>(cache[i] & mask)) {
          DBG_FAIL_MACRO;
          goto fail;
        }
        cache[i] ^= mask;
    4eea:	strb.w	r2, [r7, #-1]
        if (--count == 0) {
    4eee:	beq.n	4f22 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0xaa>
    if (!cache) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (; i < m_bytesPerSector; i++) {
      for (; mask; mask <<= 1) {
    4ef0:	ands.w	r4, r4, #255	; 0xff
    4ef4:	bne.n	4ed4 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x5c>
    cache = bitmapCacheGet(sector++, FsCache::CACHE_FOR_WRITE);
    if (!cache) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (; i < m_bytesPerSector; i++) {
    4ef6:	cmp	r3, r7
          return true;
        }
      }
      mask = 1;
    }
    i = 0;
    4ef8:	mov	fp, r4
    4efa:	mov.w	r4, #1
    cache = bitmapCacheGet(sector++, FsCache::CACHE_FOR_WRITE);
    if (!cache) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (; i < m_bytesPerSector; i++) {
    4efe:	bne.n	4ed0 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x58>
    4f00:	b.n	4eb8 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x40>
  if ((start + count) > m_clusterCount) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (value) {
    if (start  <= m_bitmapStart && m_bitmapStart < (start + count)) {
    4f02:	cmp	r1, r3
    4f04:	bhi.n	4ea0 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x28>
    4f06:	cmp	r2, r3
    4f08:	bls.n	4ea0 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x28>
      m_bitmapStart = (start + count) < m_clusterCount ? start + count : 0;
    4f0a:	cmp	r2, r0
    4f0c:	it	cs
    4f0e:	movcs	r2, #0
    4f10:	str.w	r2, [r9, #1048]	; 0x418
    4f14:	b.n	4ea0 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x28>
      goto fail;
    }
    for (; i < m_bytesPerSector; i++) {
      for (; mask; mask <<= 1) {
        if (value == static_cast<bool>(cache[i] & mask)) {
          DBG_FAIL_MACRO;
    4f16:	movs	r0, #216	; 0xd8
    4f18:	bl	4ba4 <dbgPrint(unsigned short)>
    }
    i = 0;
  }

 fail:
  return false;
    4f1c:	movs	r0, #0
    }
    for (; i < m_bytesPerSector; i++) {
      for (; mask; mask <<= 1) {
        if (value == static_cast<bool>(cache[i] & mask)) {
          DBG_FAIL_MACRO;
          goto fail;
    4f1e:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        }
        cache[i] ^= mask;
        if (--count == 0) {
          return true;
    4f22:	movs	r0, #1
    i = 0;
  }

 fail:
  return false;
}
    4f24:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  size_t i;
  uint8_t* cache;
  uint8_t mask;
  cluster -= 2;
  if ((start + count) > m_clusterCount) {
    DBG_FAIL_MACRO;
    4f28:	movs	r0, #191	; 0xbf
    4f2a:	bl	4ba4 <dbgPrint(unsigned short)>
    }
    i = 0;
  }

 fail:
  return false;
    4f2e:	movs	r0, #0
  uint8_t* cache;
  uint8_t mask;
  cluster -= 2;
  if ((start + count) > m_clusterCount) {
    DBG_FAIL_MACRO;
    goto fail;
    4f30:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
                   (start >> (m_bytesPerSectorShift + 3));
  i = (start >> 3) & m_sectorMask;
  while (true) {
    cache = bitmapCacheGet(sector++, FsCache::CACHE_FOR_WRITE);
    if (!cache) {
      DBG_FAIL_MACRO;
    4f34:	movs	r0, #210	; 0xd2
    4f36:	bl	4ba4 <dbgPrint(unsigned short)>
    }
    i = 0;
  }

 fail:
  return false;
    4f3a:	mov	r0, r6
  i = (start >> 3) & m_sectorMask;
  while (true) {
    cache = bitmapCacheGet(sector++, FsCache::CACHE_FOR_WRITE);
    if (!cache) {
      DBG_FAIL_MACRO;
      goto fail;
    4f3c:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

00004f40 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>:
    n++;
  } while (status);
  return n;
}
//-----------------------------------------------------------------------------
uint8_t* ExFatPartition::dirCache(DirPos_t* pos, uint8_t options) {
    4f40:	push	{r3, r4, r5, r6, r7, lr}
    4f42:	mov	r6, r1
#endif  // USE_EXFAT_BITMAP_CACHE
  }
  void dataCacheDirty() {m_dataCache.dirty();}
  void dataCacheInvalidate() {m_dataCache.invalidate();}
  uint8_t* dataCacheGet(uint32_t sector, uint8_t option) {
    return m_dataCache.get(sector, option);
    4f44:	ldmia.w	r6, {r3, r5}
    4f48:	ldr.w	r1, [r0, #1072]	; 0x430
    4f4c:	ldr.w	r4, [r0, #1060]	; 0x424
    4f50:	ldrb.w	r7, [r0, #1085]	; 0x43d
    4f54:	ands	r1, r5
    4f56:	subs	r3, #2
    4f58:	add.w	r1, r4, r1, lsr #9
    4f5c:	lsls	r3, r7
    4f5e:	add	r1, r3
    4f60:	add.w	r0, r0, #524	; 0x20c
    4f64:	bl	4c18 <FsCache::get(unsigned long, unsigned char)>
  uint32_t sector = clusterStartSector(pos->cluster);
  sector += (m_clusterMask & pos->position) >> m_bytesPerSectorShift;
  uint8_t* cache = dataCacheGet(sector, options);
  return cache ? cache + (pos->position & m_sectorMask) : nullptr;
    4f68:	cbz	r0, 4f72 <ExFatPartition::dirCache(DirPos_t*, unsigned char)+0x32>
    4f6a:	ldr	r3, [r6, #4]
    4f6c:	ubfx	r3, r3, #0, #9
    4f70:	add	r0, r3
}
    4f72:	pop	{r3, r4, r5, r6, r7, pc}

00004f74 <ExFatPartition::fatGet(unsigned long, unsigned long*)>:
    }
  }
  return 1;
}
//-----------------------------------------------------------------------------
uint8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
    4f74:	push	{r3, r4, r5, lr}
  uint8_t* cache;
uint32_t next;
  uint32_t sector;

  if (cluster > (m_clusterCount + 1)) {
    4f76:	ldr.w	r3, [r0, #1064]	; 0x428
    4f7a:	adds	r3, #1
    4f7c:	cmp	r3, r1
    4f7e:	bcs.n	4f8c <ExFatPartition::fatGet(unsigned long, unsigned long*)+0x18>
    DBG_FAIL_MACRO;
    4f80:	mov.w	r0, #276	; 0x114
    4f84:	bl	4ba4 <dbgPrint(unsigned short)>
    return -1;
    4f88:	movs	r0, #255	; 0xff
    4f8a:	pop	{r3, r4, r5, pc}
    4f8c:	mov	r4, r1
    4f8e:	ldr.w	r1, [r0, #1052]	; 0x41c
    4f92:	mov	r5, r2
    4f94:	add.w	r0, r0, #524	; 0x20c
    4f98:	add.w	r1, r1, r4, lsr #7
    4f9c:	movs	r2, #0
    4f9e:	bl	4c18 <FsCache::get(unsigned long, unsigned char)>
  }
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));

  cache = dataCacheGet(sector, FsCache::CACHE_FOR_READ);
  if (!cache) {
    4fa2:	cbz	r0, 4fb6 <ExFatPartition::fatGet(unsigned long, unsigned long*)+0x42>
    4fa4:	lsls	r4, r4, #2
    4fa6:	ubfx	r4, r4, #0, #9
    4faa:	ldr	r3, [r0, r4]
    return -1;
  }
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));

  if (next == EXFAT_EOC) {
    4fac:	adds	r2, r3, #1
    4fae:	beq.n	4fba <ExFatPartition::fatGet(unsigned long, unsigned long*)+0x46>
    return 0;
  }
  *value = next;
    4fb0:	str	r3, [r5, #0]
  return 1;
    4fb2:	movs	r0, #1
    4fb4:	pop	{r3, r4, r5, pc}
  }
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));

  cache = dataCacheGet(sector, FsCache::CACHE_FOR_READ);
  if (!cache) {
    return -1;
    4fb6:	movs	r0, #255	; 0xff
    4fb8:	pop	{r3, r4, r5, pc}
  }
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));

  if (next == EXFAT_EOC) {
    return 0;
    4fba:	movs	r0, #0
  }
  *value = next;
  return 1;
}
    4fbc:	pop	{r3, r4, r5, pc}
    4fbe:	nop

00004fc0 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)>:
  uint8_t* cache = dataCacheGet(sector, options);
  return cache ? cache + (pos->position & m_sectorMask) : nullptr;
}
//-----------------------------------------------------------------------------
// return -1 error, 0 EOC, 1 OK
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
    4fc0:	push	{r4, r5, r6, lr}
    4fc2:	mov	r5, r1
  int8_t status;
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
    4fc4:	ldr	r1, [r1, #4]
    4fc6:	ldr.w	r3, [r0, #1072]	; 0x430
  uint8_t* cache = dataCacheGet(sector, options);
  return cache ? cache + (pos->position & m_sectorMask) : nullptr;
}
//-----------------------------------------------------------------------------
// return -1 error, 0 EOC, 1 OK
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
    4fca:	mov	r6, r0
  int8_t status;
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
  pos->position += offset;
    4fcc:	adds	r0, r1, r2
    4fce:	str	r0, [r5, #4]
  tmp >>= bytesPerClusterShift();
    4fd0:	ldrb.w	r4, [r6, #1085]	; 0x43d
}
//-----------------------------------------------------------------------------
// return -1 error, 0 EOC, 1 OK
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
  int8_t status;
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
    4fd4:	ands	r3, r1
  pos->position += offset;
  tmp >>= bytesPerClusterShift();
    4fd6:	adds	r4, #9
}
//-----------------------------------------------------------------------------
// return -1 error, 0 EOC, 1 OK
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
  int8_t status;
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
    4fd8:	add	r2, r3
  pos->position += offset;
  tmp >>= bytesPerClusterShift();
    4fda:	uxtb	r4, r4
    4fdc:	lsr.w	r4, r2, r4
  while (tmp--) {
    4fe0:	cbz	r4, 4ff2 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x32>
    if (pos->isContiguous) {
    4fe2:	ldrb	r3, [r5, #8]
    4fe4:	cbz	r3, 4ff6 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x36>
      pos->cluster++;
    4fe6:	ldr	r3, [r5, #0]
    4fe8:	adds	r3, #1
    4fea:	str	r3, [r5, #0]
    4fec:	subs	r4, #1
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
  int8_t status;
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
  pos->position += offset;
  tmp >>= bytesPerClusterShift();
  while (tmp--) {
    4fee:	cmp	r4, #0
    4ff0:	bne.n	4fe2 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x22>
      if (status != 1) {
        return status;
      }
    }
  }
  return 1;
    4ff2:	movs	r0, #1
}
    4ff4:	pop	{r4, r5, r6, pc}
  tmp >>= bytesPerClusterShift();
  while (tmp--) {
    if (pos->isContiguous) {
      pos->cluster++;
    } else {
      status = fatGet(pos->cluster, &pos->cluster);
    4ff6:	mov	r2, r5
    4ff8:	ldr	r1, [r5, #0]
    4ffa:	mov	r0, r6
    4ffc:	bl	4f74 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
    5000:	sxtb	r0, r0
      if (status != 1) {
    5002:	cmp	r0, #1
    5004:	beq.n	4fec <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x2c>
    5006:	pop	{r4, r5, r6, pc}

00005008 <ExFatPartition::fatPut(unsigned long, unsigned long)>:
}
//-----------------------------------------------------------------------------
bool ExFatPartition::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t sector;
  uint8_t* cache;
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
    5008:	cmp	r1, #1
  }
  *value = next;
  return 1;
}
//-----------------------------------------------------------------------------
bool ExFatPartition::fatPut(uint32_t cluster, uint32_t value) {
    500a:	push	{r4, r5, r6, lr}
  uint32_t sector;
  uint8_t* cache;
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
    500c:	bls.n	501a <ExFatPartition::fatPut(unsigned long, unsigned long)+0x12>
    500e:	ldr.w	r3, [r0, #1064]	; 0x428
    5012:	adds	r3, #1
    5014:	cmp	r1, r3
    5016:	mov	r4, r1
    5018:	bls.n	5026 <ExFatPartition::fatPut(unsigned long, unsigned long)+0x1e>
    DBG_FAIL_MACRO;
    501a:	mov.w	r0, #298	; 0x12a
    501e:	bl	4ba4 <dbgPrint(unsigned short)>
  }
  setLe32(cache + ((cluster << 2) & m_sectorMask), value);
  return true;

 fail:
  return false;
    5022:	movs	r0, #0
bool ExFatPartition::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t sector;
  uint8_t* cache;
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
    DBG_FAIL_MACRO;
    goto fail;
    5024:	pop	{r4, r5, r6, pc}
    5026:	ldr.w	r1, [r0, #1052]	; 0x41c
    502a:	mov	r5, r2
    502c:	add.w	r0, r0, #524	; 0x20c
    5030:	add.w	r1, r1, r4, lsr #7
    5034:	movs	r2, #1
    5036:	bl	4c18 <FsCache::get(unsigned long, unsigned char)>
  }
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
  cache = dataCacheGet(sector, FsCache::CACHE_FOR_WRITE);
  if (!cache) {
    503a:	mov	r6, r0
    503c:	cbz	r0, 504a <ExFatPartition::fatPut(unsigned long, unsigned long)+0x42>
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
}

inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
    503e:	lsls	r4, r4, #2
    5040:	ubfx	r4, r4, #0, #9
    DBG_FAIL_MACRO;
    goto fail;
  }
  setLe32(cache + ((cluster << 2) & m_sectorMask), value);
  return true;
    5044:	movs	r0, #1
    5046:	str	r5, [r6, r4]

 fail:
  return false;
}
    5048:	pop	{r4, r5, r6, pc}
    goto fail;
  }
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
  cache = dataCacheGet(sector, FsCache::CACHE_FOR_WRITE);
  if (!cache) {
    DBG_FAIL_MACRO;
    504a:	mov.w	r0, #304	; 0x130
    504e:	bl	4ba4 <dbgPrint(unsigned short)>
  }
  setLe32(cache + ((cluster << 2) & m_sectorMask), value);
  return true;

 fail:
  return false;
    5052:	mov	r0, r6
    5054:	pop	{r4, r5, r6, pc}
    5056:	nop

00005058 <ExFatPartition::freeChain(unsigned long)>:
}
//-----------------------------------------------------------------------------
bool ExFatPartition::freeChain(uint32_t cluster) {
    5058:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    505c:	mov	r4, r1
    505e:	sub	sp, #12
    5060:	mov	r6, r0
  uint32_t next;
  uint32_t start = cluster;
    5062:	mov	r8, r1
  int8_t status;
  do {
    status = fatGet(cluster, &next);
    5064:	mov	r1, r4
    5066:	add	r2, sp, #4
    5068:	mov	r0, r6
    506a:	bl	4f74 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
    if (status < 0) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!fatPut(cluster, 0)) {
    506e:	movs	r2, #0
bool ExFatPartition::freeChain(uint32_t cluster) {
  uint32_t next;
  uint32_t start = cluster;
  int8_t status;
  do {
    status = fatGet(cluster, &next);
    5070:	sxtb	r5, r0
    if (status < 0) {
    5072:	cmp	r5, r2
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!fatPut(cluster, 0)) {
    5074:	mov	r1, r4
    5076:	mov	r0, r6
      DBG_FAIL_MACRO;
      goto fail;
    }
    if ((cluster + 1) != next || status == 0) {
    5078:	add.w	r4, r4, #1
  uint32_t next;
  uint32_t start = cluster;
  int8_t status;
  do {
    status = fatGet(cluster, &next);
    if (status < 0) {
    507c:	blt.n	50d0 <ExFatPartition::freeChain(unsigned long)+0x78>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!fatPut(cluster, 0)) {
    507e:	bl	5008 <ExFatPartition::fatPut(unsigned long, unsigned long)>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if ((cluster + 1) != next || status == 0) {
      if (!bitmapModify(start, cluster - start + 1, 0)) {
    5082:	rsb	r2, r8, r4
    status = fatGet(cluster, &next);
    if (status < 0) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!fatPut(cluster, 0)) {
    5086:	mov	r9, r0
      DBG_FAIL_MACRO;
      goto fail;
    }
    if ((cluster + 1) != next || status == 0) {
      if (!bitmapModify(start, cluster - start + 1, 0)) {
    5088:	mov	r1, r8
    508a:	movs	r3, #0
    status = fatGet(cluster, &next);
    if (status < 0) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!fatPut(cluster, 0)) {
    508c:	cbz	r0, 50e4 <ExFatPartition::freeChain(unsigned long)+0x8c>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if ((cluster + 1) != next || status == 0) {
    508e:	ldr	r7, [sp, #4]
    5090:	cmp	r4, r7
      if (!bitmapModify(start, cluster - start + 1, 0)) {
    5092:	mov	r0, r6
    }
    if (!fatPut(cluster, 0)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if ((cluster + 1) != next || status == 0) {
    5094:	bne.n	50be <ExFatPartition::freeChain(unsigned long)+0x66>
    5096:	cmp	r5, #0
    5098:	bne.n	5064 <ExFatPartition::freeChain(unsigned long)+0xc>
      if (!bitmapModify(start, cluster - start + 1, 0)) {
    509a:	mov	r3, r5
    509c:	rsb	r2, r8, r4
    50a0:	mov	r1, r8
    50a2:	mov	r0, r6
    50a4:	bl	4e78 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    50a8:	cbnz	r0, 50b6 <ExFatPartition::freeChain(unsigned long)+0x5e>
        DBG_FAIL_MACRO;
    50aa:	mov.w	r0, #330	; 0x14a
    50ae:	bl	4ba4 <dbgPrint(unsigned short)>
  } while (status);

  return true;

 fail:
  return false;
    50b2:	mov.w	r9, #0
}
    50b6:	mov	r0, r9
    50b8:	add	sp, #12
    50ba:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (!fatPut(cluster, 0)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if ((cluster + 1) != next || status == 0) {
      if (!bitmapModify(start, cluster - start + 1, 0)) {
    50be:	bl	4e78 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    50c2:	cmp	r0, #0
    50c4:	beq.n	50aa <ExFatPartition::freeChain(unsigned long)+0x52>
        DBG_FAIL_MACRO;
        goto fail;
      }
      start = next;
    50c6:	ldr	r4, [sp, #4]
//-----------------------------------------------------------------------------
bool ExFatPartition::freeChain(uint32_t cluster) {
  uint32_t next;
  uint32_t start = cluster;
  int8_t status;
  do {
    50c8:	cmp	r5, #0
    50ca:	beq.n	50b6 <ExFatPartition::freeChain(unsigned long)+0x5e>
    if ((cluster + 1) != next || status == 0) {
      if (!bitmapModify(start, cluster - start + 1, 0)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      start = next;
    50cc:	mov	r8, r4
    50ce:	b.n	5064 <ExFatPartition::freeChain(unsigned long)+0xc>
  uint32_t start = cluster;
  int8_t status;
  do {
    status = fatGet(cluster, &next);
    if (status < 0) {
      DBG_FAIL_MACRO;
    50d0:	movw	r0, #321	; 0x141
    50d4:	bl	4ba4 <dbgPrint(unsigned short)>
  } while (status);

  return true;

 fail:
  return false;
    50d8:	mov.w	r9, #0
}
    50dc:	mov	r0, r9
    50de:	add	sp, #12
    50e0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (status < 0) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!fatPut(cluster, 0)) {
      DBG_FAIL_MACRO;
    50e4:	movw	r0, #325	; 0x145
    50e8:	bl	4ba4 <dbgPrint(unsigned short)>

  return true;

 fail:
  return false;
}
    50ec:	mov	r0, r9
    50ee:	add	sp, #12
    50f0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000050f4 <ExFatPartition::freeClusterCount()>:
//-----------------------------------------------------------------------------
uint32_t ExFatPartition::freeClusterCount() {
    50f4:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint32_t nc = 0;
  uint32_t sector = m_clusterHeapStartSector;
  uint32_t usedCount = 0;
    50f8:	movs	r4, #0
  return false;
}
//-----------------------------------------------------------------------------
uint32_t ExFatPartition::freeClusterCount() {
  uint32_t nc = 0;
  uint32_t sector = m_clusterHeapStartSector;
    50fa:	ldr.w	r6, [r0, #1060]	; 0x424

 fail:
  return false;
}
//-----------------------------------------------------------------------------
uint32_t ExFatPartition::freeClusterCount() {
    50fe:	mov	r8, r0
    5100:	add.w	r7, r0, #524	; 0x20c
  uint32_t nc = 0;
    5104:	mov	r5, r4
    5106:	mov	r1, r6
    5108:	movs	r2, #0
    510a:	mov	r0, r7
  uint32_t sector = m_clusterHeapStartSector;
  uint32_t usedCount = 0;
  uint8_t* cache;

  while (true) {
    cache = dataCacheGet(sector++, FsCache::CACHE_FOR_READ);
    510c:	adds	r6, #1
    510e:	bl	4c18 <FsCache::get(unsigned long, unsigned char)>
    if (!cache) {
    5112:	cbz	r0, 5162 <ExFatPartition::freeClusterCount()+0x6e>
    5114:	add.w	lr, r0, #4294967295
    5118:	ldr.w	ip, [r8, #1064]	; 0x428
      return 0;
    }
    for (size_t i = 0; i < m_bytesPerSector; i++) {
      if (cache[i] == 0XFF) {
    511c:	ldrb.w	r0, [lr, #1]!
    5120:	cmp	r0, #255	; 0xff
    5122:	add.w	r9, r5, #4096	; 0x1000
    5126:	beq.n	5150 <ExFatPartition::freeClusterCount()+0x5c>
        usedCount+= 8;
      } else if (cache[i]) {
    5128:	cbz	r0, 513e <ExFatPartition::freeClusterCount()+0x4a>
    512a:	movs	r2, #8
    512c:	movs	r3, #1
        for (uint8_t mask = 1; mask ; mask <<=1) {
          if ((mask & cache[i])) {
    512e:	tst	r0, r3
    }
    for (size_t i = 0; i < m_bytesPerSector; i++) {
      if (cache[i] == 0XFF) {
        usedCount+= 8;
      } else if (cache[i]) {
        for (uint8_t mask = 1; mask ; mask <<=1) {
    5130:	mov.w	r1, r3, lsl #1
          if ((mask & cache[i])) {
            usedCount++;
    5134:	it	ne
    5136:	addne	r4, #1
    }
    for (size_t i = 0; i < m_bytesPerSector; i++) {
      if (cache[i] == 0XFF) {
        usedCount+= 8;
      } else if (cache[i]) {
        for (uint8_t mask = 1; mask ; mask <<=1) {
    5138:	subs	r2, #1
    513a:	uxtb	r3, r1
    513c:	bne.n	512e <ExFatPartition::freeClusterCount()+0x3a>
          if ((mask & cache[i])) {
            usedCount++;
          }
        }
      }
      nc += 8;
    513e:	adds	r5, #8
      if (nc >= m_clusterCount) {
    5140:	cmp	ip, r5
    5142:	bls.n	515a <ExFatPartition::freeClusterCount()+0x66>
  while (true) {
    cache = dataCacheGet(sector++, FsCache::CACHE_FOR_READ);
    if (!cache) {
      return 0;
    }
    for (size_t i = 0; i < m_bytesPerSector; i++) {
    5144:	cmp	r5, r9
    5146:	beq.n	5106 <ExFatPartition::freeClusterCount()+0x12>
      if (cache[i] == 0XFF) {
    5148:	ldrb.w	r0, [lr, #1]!
    514c:	cmp	r0, #255	; 0xff
    514e:	bne.n	5128 <ExFatPartition::freeClusterCount()+0x34>
          if ((mask & cache[i])) {
            usedCount++;
          }
        }
      }
      nc += 8;
    5150:	adds	r5, #8
      if (nc >= m_clusterCount) {
    5152:	cmp	ip, r5
    if (!cache) {
      return 0;
    }
    for (size_t i = 0; i < m_bytesPerSector; i++) {
      if (cache[i] == 0XFF) {
        usedCount+= 8;
    5154:	add.w	r4, r4, #8
            usedCount++;
          }
        }
      }
      nc += 8;
      if (nc >= m_clusterCount) {
    5158:	bhi.n	5144 <ExFatPartition::freeClusterCount()+0x50>
        return m_clusterCount - usedCount;
    515a:	rsb	r0, r4, ip
    515e:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      }
    }
  }
}
    5162:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    5166:	nop

00005168 <ExFatPartition::rootLength()>:
//-----------------------------------------------------------------------------
uint32_t ExFatPartition::rootLength() {
    5168:	push	{r4, r5, r6, lr}
    516a:	sub	sp, #8
    516c:	add	r6, sp, #8
  uint32_t nc = chainSize(m_rootDirectoryCluster);
    516e:	ldr.w	r1, [r0, #1068]	; 0x42c
    5172:	str.w	r1, [r6, #-4]!
      }
    }
  }
}
//-----------------------------------------------------------------------------
uint32_t ExFatPartition::rootLength() {
    5176:	mov	r5, r0
 fail:
  return false;
}
//-----------------------------------------------------------------------------
uint32_t ExFatPartition::chainSize(uint32_t cluster) {
  uint32_t n = 0;
    5178:	movs	r4, #0
    517a:	b.n	5184 <ExFatPartition::rootLength()+0x1c>
  int8_t status;
  do {
    status = fatGet(cluster, & cluster);
    if (status < 0) return 0;
    n++;
    517c:	add.w	r4, r4, #1
}
//-----------------------------------------------------------------------------
uint32_t ExFatPartition::chainSize(uint32_t cluster) {
  uint32_t n = 0;
  int8_t status;
  do {
    5180:	beq.n	5194 <ExFatPartition::rootLength()+0x2c>
    5182:	ldr	r1, [sp, #4]
    status = fatGet(cluster, & cluster);
    5184:	mov	r2, r6
    5186:	mov	r0, r5
    5188:	bl	4f74 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
    518c:	sxtb	r0, r0
    if (status < 0) return 0;
    518e:	cmp	r0, #0
    5190:	bge.n	517c <ExFatPartition::rootLength()+0x14>
    5192:	movs	r4, #0
  }
}
//-----------------------------------------------------------------------------
uint32_t ExFatPartition::rootLength() {
  uint32_t nc = chainSize(m_rootDirectoryCluster);
  return nc << bytesPerClusterShift();
    5194:	ldrb.w	r0, [r5, #1085]	; 0x43d
    5198:	adds	r0, #9
    519a:	uxtb	r0, r0
}
    519c:	lsl.w	r0, r4, r0
    51a0:	add	sp, #8
    51a2:	pop	{r4, r5, r6, pc}

000051a4 <exFatHashName(char const*, unsigned int, unsigned short)>:
static char toUpper(char c) {
  return c - ('a' <= c && c <= 'z' ? 'a' - 'A' : 0);
}
//-----------------------------------------------------------------------------
uint16_t exFatHashName(const char* name, size_t n, uint16_t hash) {
  for (size_t i = 0; i < n; i++) {
    51a4:	cbz	r1, 51da <exFatHashName(char const*, unsigned int, unsigned short)+0x36>
//-----------------------------------------------------------------------------
static char toUpper(char c) {
  return c - ('a' <= c && c <= 'z' ? 'a' - 'A' : 0);
}
//-----------------------------------------------------------------------------
uint16_t exFatHashName(const char* name, size_t n, uint16_t hash) {
    51a6:	push	{r4}
    51a8:	add	r1, r0
    51aa:	lsls	r3, r2, #15
    51ac:	orr.w	r3, r3, r2, lsr #1
  for (size_t i = 0; i < n; i++) {
    uint8_t c = name[i];
    51b0:	ldrb.w	r2, [r0], #1
    if ('a' <= c && c <= 'z') {
    51b4:	sub.w	r4, r2, #97	; 0x61
    51b8:	cmp	r4, #25
      c -= 'a' - 'A';
    51ba:	itt	ls
    51bc:	subls	r2, #32
    51be:	uxtbls	r2, r2
    }
    hash = ((hash << 15) | (hash >> 1)) + c;
    51c0:	uxtah	r2, r2, r3
    51c4:	uxth	r2, r2
    51c6:	lsls	r3, r2, #15
    51c8:	orr.w	r2, r3, r2, lsr #1
static char toUpper(char c) {
  return c - ('a' <= c && c <= 'z' ? 'a' - 'A' : 0);
}
//-----------------------------------------------------------------------------
uint16_t exFatHashName(const char* name, size_t n, uint16_t hash) {
  for (size_t i = 0; i < n; i++) {
    51cc:	cmp	r1, r0
    51ce:	uxth	r2, r2
    51d0:	bne.n	51aa <exFatHashName(char const*, unsigned int, unsigned short)+0x6>
    }
    hash = ((hash << 15) | (hash >> 1)) + c;
    hash = ((hash << 15) | (hash >> 1));
  }
  return hash;
}
    51d2:	mov	r0, r2
    51d4:	ldr.w	r4, [sp], #4
    51d8:	bx	lr
    51da:	mov	r0, r2
    51dc:	bx	lr
    51de:	nop

000051e0 <exFatCmpName(DirName_t const*, char const*, unsigned int, unsigned int)>:
//-----------------------------------------------------------------------------
bool exFatCmpName(const DirName_t* unicode,
                  const char* name, size_t offset, size_t n) {
  uint16_t u;
  for (size_t i = 0; i < n; i++) {
    51e0:	cbz	r3, 5234 <exFatCmpName(DirName_t const*, char const*, unsigned int, unsigned int)+0x54>
  }
  return hash;
}
//-----------------------------------------------------------------------------
bool exFatCmpName(const DirName_t* unicode,
                  const char* name, size_t offset, size_t n) {
    51e2:	push	{r4, r5, r6}
void lbaToMbrChs(uint8_t* chs, uint32_t capacityMB, uint32_t lba);
//-----------------------------------------------------------------------------
#if !defined(USE_SIMPLE_LITTLE_ENDIAN) || USE_SIMPLE_LITTLE_ENDIAN
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
    51e4:	ldrh	r4, [r0, #2]
  uint16_t u;
  for (size_t i = 0; i < n; i++) {
    u = getLe16(unicode->unicode + 2*i);
    if (u >= 0x7F  || toUpper(name[i + offset]) != toUpper(u)) {
    51e6:	cmp	r4, #126	; 0x7e
    51e8:	bhi.n	5228 <exFatCmpName(DirName_t const*, char const*, unsigned int, unsigned int)+0x48>
    51ea:	add	r3, r2
    51ec:	adds	r5, r1, r3
    51ee:	add	r2, r1
    51f0:	adds	r0, #2
    51f2:	ldrb.w	r3, [r2], #1
    51f6:	uxtb	r4, r4
  }
  return true;
}
//-----------------------------------------------------------------------------
static char toUpper(char c) {
  return c - ('a' <= c && c <= 'z' ? 'a' - 'A' : 0);
    51f8:	sub.w	r1, r3, #97	; 0x61
    51fc:	cmp	r1, #25
    51fe:	sub.w	r1, r4, #97	; 0x61
    5202:	ite	ls
    5204:	movls	r6, #32
    5206:	movhi	r6, #0
    5208:	cmp	r1, #25
    520a:	ite	ls
    520c:	movls	r1, #32
    520e:	movhi	r1, #0
    5210:	subs	r3, r3, r6
bool exFatCmpName(const DirName_t* unicode,
                  const char* name, size_t offset, size_t n) {
  uint16_t u;
  for (size_t i = 0; i < n; i++) {
    u = getLe16(unicode->unicode + 2*i);
    if (u >= 0x7F  || toUpper(name[i + offset]) != toUpper(u)) {
    5212:	subs	r4, r4, r1
  }
  return true;
}
//-----------------------------------------------------------------------------
static char toUpper(char c) {
  return c - ('a' <= c && c <= 'z' ? 'a' - 'A' : 0);
    5214:	uxtb	r3, r3
bool exFatCmpName(const DirName_t* unicode,
                  const char* name, size_t offset, size_t n) {
  uint16_t u;
  for (size_t i = 0; i < n; i++) {
    u = getLe16(unicode->unicode + 2*i);
    if (u >= 0x7F  || toUpper(name[i + offset]) != toUpper(u)) {
    5216:	uxtb	r4, r4
    5218:	cmp	r4, r3
    521a:	bne.n	5228 <exFatCmpName(DirName_t const*, char const*, unsigned int, unsigned int)+0x48>
}
//-----------------------------------------------------------------------------
bool exFatCmpName(const DirName_t* unicode,
                  const char* name, size_t offset, size_t n) {
  uint16_t u;
  for (size_t i = 0; i < n; i++) {
    521c:	cmp	r2, r5
    521e:	beq.n	522e <exFatCmpName(DirName_t const*, char const*, unsigned int, unsigned int)+0x4e>
    5220:	ldrh.w	r4, [r0, #2]!
    u = getLe16(unicode->unicode + 2*i);
    if (u >= 0x7F  || toUpper(name[i + offset]) != toUpper(u)) {
    5224:	cmp	r4, #126	; 0x7e
    5226:	bls.n	51f2 <exFatCmpName(DirName_t const*, char const*, unsigned int, unsigned int)+0x12>
      return false;
    5228:	movs	r0, #0
    }
  }
  return true;
}
    522a:	pop	{r4, r5, r6}
    522c:	bx	lr
    u = getLe16(unicode->unicode + 2*i);
    if (u >= 0x7F  || toUpper(name[i + offset]) != toUpper(u)) {
      return false;
    }
  }
  return true;
    522e:	movs	r0, #1
}
    5230:	pop	{r4, r5, r6}
    5232:	bx	lr
    u = getLe16(unicode->unicode + 2*i);
    if (u >= 0x7F  || toUpper(name[i + offset]) != toUpper(u)) {
      return false;
    }
  }
  return true;
    5234:	movs	r0, #1
}
    5236:	bx	lr

00005238 <dbgPrint(unsigned short)>:
#if USE_DBG_MACROS
#include "Arduino.h"
#ifndef DBG_FILE
#error DBG_FILE not defined
#endif  // DBG_FILE
static void dbgPrint(uint16_t line) {
    5238:	push	{r3, r4, r5, lr}
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    523a:	movs	r1, #10
    523c:	mov	r5, r0
    523e:	ldr	r0, [pc, #40]	; (5268 <dbgPrint(unsigned short)+0x30>)
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    5240:	ldr	r4, [pc, #40]	; (526c <dbgPrint(unsigned short)+0x34>)
    5242:	bl	9ca8 <usb_serial_write>
    5246:	movs	r1, #18
    5248:	ldr	r0, [pc, #36]	; (5270 <dbgPrint(unsigned short)+0x38>)
    524a:	bl	9ca8 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    524e:	movs	r0, #46	; 0x2e
    5250:	bl	9db0 <usb_serial_putchar>
    5254:	mov	r1, r5
    5256:	mov	r0, r4
    5258:	bl	b31c <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    525c:	mov	r0, r4
  Serial.print(F("DBG_FAIL: "));
  Serial.print(F(DBG_FILE));
  Serial.write('.');
  Serial.println(line);
}
    525e:	ldmia.w	sp!, {r3, r4, r5, lr}
    5262:	b.w	b250 <Print::println()>
    5266:	nop
    5268:	.word	0x000105c8
    526c:	.word	0x1fff09a4
    5270:	.word	0x00010600

00005274 <ExFatFile::addCluster()>:
  }
  return checksum;
}
//-----------------------------------------------------------------------------
bool ExFatFile::addCluster() {
  uint32_t find = m_vol->bitmapFind(m_curCluster ?  m_curCluster + 1 : 0, 1);
    5274:	ldr	r1, [r0, #24]
    checksum = ((checksum << 15) | (checksum >> 1)) + data[i];
  }
  return checksum;
}
//-----------------------------------------------------------------------------
bool ExFatFile::addCluster() {
    5276:	push	{r3, r4, r5, r6, r7, lr}
    5278:	mov	r4, r0
  uint32_t find = m_vol->bitmapFind(m_curCluster ?  m_curCluster + 1 : 0, 1);
    527a:	ldr	r0, [r0, #32]
    527c:	cbz	r1, 5280 <ExFatFile::addCluster()+0xc>
    527e:	adds	r1, #1
    5280:	movs	r2, #1
    5282:	bl	4cb4 <ExFatPartition::bitmapFind(unsigned long, unsigned long)>
  if (find < 2) {
    5286:	cmp	r0, #1
  }
  return checksum;
}
//-----------------------------------------------------------------------------
bool ExFatFile::addCluster() {
  uint32_t find = m_vol->bitmapFind(m_curCluster ?  m_curCluster + 1 : 0, 1);
    5288:	mov	r6, r0
  if (find < 2) {
    528a:	bls.n	5310 <ExFatFile::addCluster()+0x9c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!m_vol->bitmapModify(find, 1, 1)) {
    528c:	movs	r3, #1
    528e:	mov	r1, r0
    5290:	mov	r2, r3
    5292:	ldr	r0, [r4, #32]
    5294:	bl	4e78 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    5298:	mov	r7, r0
    529a:	cmp	r0, #0
    529c:	beq.n	531c <ExFatFile::addCluster()+0xa8>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_curCluster == 0) {
    529e:	ldr	r0, [r4, #24]
    m_flags |= FILE_FLAG_CONTIGUOUS;
    52a0:	ldrb.w	r3, [r4, #51]	; 0x33
  }
  if (!m_vol->bitmapModify(find, 1, 1)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_curCluster == 0) {
    52a4:	cbnz	r0, 52b4 <ExFatFile::addCluster()+0x40>
    m_flags |= FILE_FLAG_CONTIGUOUS;
    52a6:	orr.w	r3, r3, #64	; 0x40
    52aa:	strb.w	r3, [r4, #51]	; 0x33
      goto fail;
    }
  }

 done:
  m_curCluster = find;
    52ae:	str	r6, [r4, #24]
  return true;

 fail:
  return false;
}
    52b0:	mov	r0, r7
    52b2:	pop	{r3, r4, r5, r6, r7, pc}
  }
  if (m_curCluster == 0) {
    m_flags |= FILE_FLAG_CONTIGUOUS;
    goto done;
  }
  if (isContiguous()) {
    52b4:	lsls	r2, r3, #25
    52b6:	bpl.n	52e2 <ExFatFile::addCluster()+0x6e>
    if (find == (m_curCluster + 1)) {
    52b8:	adds	r2, r0, #1
    52ba:	cmp	r6, r2
    52bc:	beq.n	52ae <ExFatFile::addCluster()+0x3a>
      goto done;
    }
    // No longer contiguous so make FAT chain.
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
    52be:	bic.w	r2, r3, #64	; 0x40
    52c2:	strb.w	r2, [r4, #51]	; 0x33

    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    52c6:	ldr	r3, [r4, #28]
    52c8:	b.n	52d8 <ExFatFile::addCluster()+0x64>
      if (!m_vol->fatPut(c, c + 1)) {
    52ca:	ldr	r0, [r4, #32]
    52cc:	bl	5008 <ExFatPartition::fatPut(unsigned long, unsigned long)>
    52d0:	mov	r3, r0
    52d2:	cbz	r0, 5326 <ExFatFile::addCluster()+0xb2>
    52d4:	ldr	r0, [r4, #24]
      goto done;
    }
    // No longer contiguous so make FAT chain.
    m_flags &= ~FILE_FLAG_CONTIGUOUS;

    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    52d6:	mov	r3, r5
      if (!m_vol->fatPut(c, c + 1)) {
    52d8:	adds	r5, r3, #1
      goto done;
    }
    // No longer contiguous so make FAT chain.
    m_flags &= ~FILE_FLAG_CONTIGUOUS;

    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    52da:	cmp	r3, r0
      if (!m_vol->fatPut(c, c + 1)) {
    52dc:	mov	r1, r3
    52de:	mov	r2, r5
      goto done;
    }
    // No longer contiguous so make FAT chain.
    m_flags &= ~FILE_FLAG_CONTIGUOUS;

    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    52e0:	bcc.n	52ca <ExFatFile::addCluster()+0x56>
        goto fail;
      }
    }
  }
  // New cluster is EOC.
  if (!m_vol->fatPut(find, EXFAT_EOC)) {
    52e2:	mov.w	r2, #4294967295
    52e6:	mov	r1, r6
    52e8:	ldr	r0, [r4, #32]
    52ea:	bl	5008 <ExFatPartition::fatPut(unsigned long, unsigned long)>
    52ee:	mov	r3, r0
    52f0:	cbz	r0, 5330 <ExFatFile::addCluster()+0xbc>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Connect new cluster to existing chain.
  if (m_curCluster) {
    52f2:	ldr	r1, [r4, #24]
    52f4:	cmp	r1, #0
    52f6:	beq.n	52ae <ExFatFile::addCluster()+0x3a>
    if (!m_vol->fatPut(m_curCluster, find)) {
    52f8:	mov	r2, r6
    52fa:	ldr	r0, [r4, #32]
    52fc:	bl	5008 <ExFatPartition::fatPut(unsigned long, unsigned long)>
    5300:	mov	r3, r0
    5302:	cmp	r0, #0
    5304:	bne.n	52ae <ExFatFile::addCluster()+0x3a>
      DBG_FAIL_MACRO;
    5306:	movs	r0, #110	; 0x6e
 done:
  m_curCluster = find;
  return true;

 fail:
  return false;
    5308:	mov	r7, r3
    goto fail;
  }
  // Connect new cluster to existing chain.
  if (m_curCluster) {
    if (!m_vol->fatPut(m_curCluster, find)) {
      DBG_FAIL_MACRO;
    530a:	bl	5238 <dbgPrint(unsigned short)>
      goto fail;
    530e:	b.n	52b0 <ExFatFile::addCluster()+0x3c>
}
//-----------------------------------------------------------------------------
bool ExFatFile::addCluster() {
  uint32_t find = m_vol->bitmapFind(m_curCluster ?  m_curCluster + 1 : 0, 1);
  if (find < 2) {
    DBG_FAIL_MACRO;
    5310:	movs	r0, #77	; 0x4d
 done:
  m_curCluster = find;
  return true;

 fail:
  return false;
    5312:	movs	r7, #0
}
//-----------------------------------------------------------------------------
bool ExFatFile::addCluster() {
  uint32_t find = m_vol->bitmapFind(m_curCluster ?  m_curCluster + 1 : 0, 1);
  if (find < 2) {
    DBG_FAIL_MACRO;
    5314:	bl	5238 <dbgPrint(unsigned short)>
  m_curCluster = find;
  return true;

 fail:
  return false;
}
    5318:	mov	r0, r7
    531a:	pop	{r3, r4, r5, r6, r7, pc}
  if (find < 2) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!m_vol->bitmapModify(find, 1, 1)) {
    DBG_FAIL_MACRO;
    531c:	movs	r0, #81	; 0x51
    531e:	bl	5238 <dbgPrint(unsigned short)>
  m_curCluster = find;
  return true;

 fail:
  return false;
}
    5322:	mov	r0, r7
    5324:	pop	{r3, r4, r5, r6, r7, pc}
    // No longer contiguous so make FAT chain.
    m_flags &= ~FILE_FLAG_CONTIGUOUS;

    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
      if (!m_vol->fatPut(c, c + 1)) {
        DBG_FAIL_MACRO;
    5326:	movs	r0, #97	; 0x61
 done:
  m_curCluster = find;
  return true;

 fail:
  return false;
    5328:	mov	r7, r3
    // No longer contiguous so make FAT chain.
    m_flags &= ~FILE_FLAG_CONTIGUOUS;

    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
      if (!m_vol->fatPut(c, c + 1)) {
        DBG_FAIL_MACRO;
    532a:	bl	5238 <dbgPrint(unsigned short)>
        goto fail;
    532e:	b.n	52b0 <ExFatFile::addCluster()+0x3c>
      }
    }
  }
  // New cluster is EOC.
  if (!m_vol->fatPut(find, EXFAT_EOC)) {
    DBG_FAIL_MACRO;
    5330:	movs	r0, #104	; 0x68
 done:
  m_curCluster = find;
  return true;

 fail:
  return false;
    5332:	mov	r7, r3
      }
    }
  }
  // New cluster is EOC.
  if (!m_vol->fatPut(find, EXFAT_EOC)) {
    DBG_FAIL_MACRO;
    5334:	bl	5238 <dbgPrint(unsigned short)>
    goto fail;
    5338:	b.n	52b0 <ExFatFile::addCluster()+0x3c>
    533a:	nop

0000533c <ExFatFile::remove()>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::remove() {
    533c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  DirPos_t pos = m_dirPos;
    5340:	add.w	r3, r0, #36	; 0x24

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::remove() {
    5344:	mov	r5, r0
  DirPos_t pos = m_dirPos;
    5346:	ldmia.w	r3, {r0, r1, r2}
    534a:	ldrb.w	r7, [r5, #51]	; 0x33

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::remove() {
    534e:	sub	sp, #20
  DirPos_t pos = m_dirPos;
    5350:	add	r6, sp, #4
  uint8_t* cache;
  if (!isWritable()) {
    5352:	and.w	r4, r7, #2
 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::remove() {
  DirPos_t pos = m_dirPos;
    5356:	stmia.w	r6, {r0, r1, r2}
  uint8_t* cache;
  if (!isWritable()) {
    535a:	cmp	r4, #0
    535c:	beq.n	5438 <ExFatFile::remove()+0xfc>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Free any clusters.
  if (m_firstCluster) {
    535e:	ldr	r1, [r5, #28]
    5360:	cbnz	r1, 53ac <ExFatFile::remove()+0x70>
#endif  // USE_EXFAT_BITMAP_CACHE
    m_dataCache.init(dev);
  }
  bool cacheSync() {
#if USE_EXFAT_BITMAP_CACHE
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    5362:	movs	r4, #0
  for (uint8_t i = 0; i <= m_setCount; i++) {
    if (i && m_vol->dirSeek(&pos, 32) != 1) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    cache = m_vol->dirCache(&pos, FsCache::CACHE_FOR_WRITE);
    5364:	movs	r2, #1
    5366:	mov	r1, r6
    5368:	ldr	r0, [r5, #32]
    536a:	bl	4f40 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
        goto fail;
      }
    }
  }

  for (uint8_t i = 0; i <= m_setCount; i++) {
    536e:	adds	r4, #1
    if (i && m_vol->dirSeek(&pos, 32) != 1) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    cache = m_vol->dirCache(&pos, FsCache::CACHE_FOR_WRITE);
    if (!cache) {
    5370:	mov	r3, r0
        goto fail;
      }
    }
  }

  for (uint8_t i = 0; i <= m_setCount; i++) {
    5372:	uxtb	r4, r4
    if (i && m_vol->dirSeek(&pos, 32) != 1) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    cache = m_vol->dirCache(&pos, FsCache::CACHE_FOR_WRITE);
    if (!cache) {
    5374:	cmp	r0, #0
    5376:	beq.n	5426 <ExFatFile::remove()+0xea>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // Mark entry not used.
    cache[0] &= 0x7F;
    5378:	ldrb	r2, [r3, #0]
    537a:	and.w	r2, r2, #127	; 0x7f
    537e:	strb	r2, [r3, #0]
        goto fail;
      }
    }
  }

  for (uint8_t i = 0; i <= m_setCount; i++) {
    5380:	ldrb.w	r3, [r5, #48]	; 0x30
    5384:	cmp	r3, r4
    5386:	bcc.n	53f6 <ExFatFile::remove()+0xba>
    if (i && m_vol->dirSeek(&pos, 32) != 1) {
    5388:	cmp	r4, #0
    538a:	beq.n	5364 <ExFatFile::remove()+0x28>
    538c:	movs	r2, #32
    538e:	mov	r1, r6
    5390:	ldr	r0, [r5, #32]
    5392:	bl	4fc0 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)>
    5396:	cmp	r0, #1
    5398:	beq.n	5364 <ExFatFile::remove()+0x28>
      DBG_FAIL_MACRO;
    539a:	movw	r0, #287	; 0x11f
    539e:	bl	5238 <dbgPrint(unsigned short)>

  // Write entry to device.
  return m_vol->cacheSync();

 fail:
  return false;
    53a2:	movs	r4, #0
}
    53a4:	mov	r0, r4
    53a6:	add	sp, #20
    53a8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Free any clusters.
  if (m_firstCluster) {
    if (isContiguous()) {
    53ac:	lsls	r3, r7, #25
      uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    53ae:	ldr	r0, [r5, #32]
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Free any clusters.
  if (m_firstCluster) {
    if (isContiguous()) {
    53b0:	bpl.n	544e <ExFatFile::remove()+0x112>
      uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
      if (!m_vol->bitmapModify(m_firstCluster, nc, 0)) {
    53b2:	ldrd	r2, r3, [r5, #8]
    53b6:	ldrb.w	r4, [r0, #1085]	; 0x43d
    53ba:	adds	r4, #9
    53bc:	uxtb	r4, r4
    53be:	adds.w	r8, r2, #4294967295
    53c2:	adc.w	r9, r3, #4294967295
    53c6:	rsb	r7, r4, #32
    53ca:	lsr.w	r2, r8, r4
    53ce:	sub.w	r3, r4, #32
    53d2:	lsl.w	r7, r9, r7
    53d6:	lsr.w	r3, r9, r3
    53da:	orrs	r2, r7
    53dc:	orrs	r2, r3
    53de:	adds	r2, #1
    53e0:	movs	r3, #0
    53e2:	bl	4e78 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    53e6:	mov	r4, r0
    53e8:	cmp	r0, #0
    53ea:	bne.n	5362 <ExFatFile::remove()+0x26>
        DBG_FAIL_MACRO;
    53ec:	mov.w	r0, #274	; 0x112
    53f0:	bl	5238 <dbgPrint(unsigned short)>
        goto fail;
    53f4:	b.n	53a4 <ExFatFile::remove()+0x68>
  // Set this file closed.
  m_attributes = FILE_ATTR_CLOSED;
  m_flags = 0;

  // Write entry to device.
  return m_vol->cacheSync();
    53f6:	ldr	r4, [r5, #32]
    }
    // Mark entry not used.
    cache[0] &= 0x7F;
  }
  // Set this file closed.
  m_attributes = FILE_ATTR_CLOSED;
    53f8:	movs	r3, #0
    53fa:	mov	r0, r4
    53fc:	strb.w	r3, [r5, #49]	; 0x31
  m_flags = 0;
    5400:	strb.w	r3, [r5, #51]	; 0x33
    5404:	bl	4ca4 <FsCache::sync()>
    5408:	cmp	r0, #0
    540a:	beq.n	53a2 <ExFatFile::remove()+0x66>
    540c:	add.w	r0, r4, #524	; 0x20c
    5410:	bl	4ca4 <FsCache::sync()>
    5414:	cmp	r0, #0
    5416:	beq.n	53a2 <ExFatFile::remove()+0x66>
    5418:	ldr.w	r0, [r4, #1080]	; 0x438
  bool fatPut(uint32_t cluster, uint32_t value);
  uint32_t chainSize(uint32_t cluster);
  bool freeChain(uint32_t cluster);
  uint16_t sectorMask() {return m_sectorMask;}
  bool syncDevice() {
    return m_blockDev->syncDevice();
    541c:	ldr	r3, [r0, #0]
    541e:	ldr	r3, [r3, #20]
    5420:	blx	r3
    5422:	mov	r4, r0
    5424:	b.n	53a4 <ExFatFile::remove()+0x68>
      DBG_FAIL_MACRO;
      goto fail;
    }
    cache = m_vol->dirCache(&pos, FsCache::CACHE_FOR_WRITE);
    if (!cache) {
      DBG_FAIL_MACRO;
    5426:	mov.w	r0, #292	; 0x124

  // Write entry to device.
  return m_vol->cacheSync();

 fail:
  return false;
    542a:	mov	r4, r3
      DBG_FAIL_MACRO;
      goto fail;
    }
    cache = m_vol->dirCache(&pos, FsCache::CACHE_FOR_WRITE);
    if (!cache) {
      DBG_FAIL_MACRO;
    542c:	bl	5238 <dbgPrint(unsigned short)>
  // Write entry to device.
  return m_vol->cacheSync();

 fail:
  return false;
}
    5430:	mov	r0, r4
    5432:	add	sp, #20
    5434:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    5438:	and.w	r3, r4, #255	; 0xff
//------------------------------------------------------------------------------
bool ExFatFile::remove() {
  DirPos_t pos = m_dirPos;
  uint8_t* cache;
  if (!isWritable()) {
    DBG_FAIL_MACRO;
    543c:	mov.w	r0, #266	; 0x10a

  // Write entry to device.
  return m_vol->cacheSync();

 fail:
  return false;
    5440:	mov	r4, r3
//------------------------------------------------------------------------------
bool ExFatFile::remove() {
  DirPos_t pos = m_dirPos;
  uint8_t* cache;
  if (!isWritable()) {
    DBG_FAIL_MACRO;
    5442:	bl	5238 <dbgPrint(unsigned short)>
  // Write entry to device.
  return m_vol->cacheSync();

 fail:
  return false;
}
    5446:	mov	r0, r4
    5448:	add	sp, #20
    544a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      if (!m_vol->bitmapModify(m_firstCluster, nc, 0)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    } else {
      if (!m_vol->freeChain(m_firstCluster)) {
    544e:	bl	5058 <ExFatPartition::freeChain(unsigned long)>
    5452:	mov	r4, r0
    5454:	cmp	r0, #0
    5456:	bne.n	5362 <ExFatFile::remove()+0x26>
        DBG_FAIL_MACRO;
    5458:	movw	r0, #279	; 0x117
    545c:	bl	5238 <dbgPrint(unsigned short)>
        goto fail;
    5460:	b.n	53a4 <ExFatFile::remove()+0x68>
    5462:	nop

00005464 <ExFatFile::rmdir()>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::rmdir() {
    5464:	push	{r4, r5, lr}
  int n;
  uint8_t dir[32];
  // must be open subdirectory
  if (!isSubDir()) {
    5466:	ldrb.w	r3, [r0, #49]	; 0x31
    546a:	and.w	r3, r3, #16

fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::rmdir() {
    546e:	sub	sp, #36	; 0x24
  int n;
  uint8_t dir[32];
  // must be open subdirectory
  if (!isSubDir()) {
    5470:	cbz	r3, 54b6 <ExFatFile::rmdir()+0x52>
   * \return true for success or false for failure.
   */
  bool rename(ExFatFile* dirFile, const ExChar_t* newPath);
  /** Set the file's current position to zero. */
  void rewind() {
    seekSet(0);
    5472:	movs	r2, #0
    5474:	movs	r3, #0
    5476:	mov	r4, r0
    5478:	bl	44f4 <ExFatFile::seekSet(unsigned long long)>
    547c:	b.n	548c <ExFatFile::rmdir()+0x28>
  while (1) {
    n = read(dir, 32);
    if (n == 0) {
      break;
    }
    if (n != 32 || dir[0] & 0X80) {
    547e:	cmp	r0, #32
    5480:	bne.n	54c8 <ExFatFile::rmdir()+0x64>
    5482:	ldrb.w	r3, [sp]
    5486:	lsls	r2, r3, #24
    5488:	bmi.n	54c8 <ExFatFile::rmdir()+0x64>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (dir[0] == 0) {
    548a:	cbz	r3, 549a <ExFatFile::rmdir()+0x36>
  }
  rewind();

  // make sure directory is empty
  while (1) {
    n = read(dir, 32);
    548c:	movs	r2, #32
    548e:	mov	r1, sp
    5490:	mov	r0, r4
    5492:	bl	42e0 <ExFatFile::read(void*, unsigned int)>
    if (n == 0) {
    5496:	cmp	r0, #0
    5498:	bne.n	547e <ExFatFile::rmdir()+0x1a>
      break;
    }
  }
  // convert empty directory to normal file for remove
  m_attributes = FILE_ATTR_FILE;
  m_flags |= FILE_FLAG_WRITE;
    549a:	ldrb.w	r3, [r4, #51]	; 0x33
    if (dir[0] == 0) {
      break;
    }
  }
  // convert empty directory to normal file for remove
  m_attributes = FILE_ATTR_FILE;
    549e:	movs	r2, #8
  m_flags |= FILE_FLAG_WRITE;
    54a0:	orr.w	r3, r3, #2
    54a4:	strb.w	r3, [r4, #51]	; 0x33
    if (dir[0] == 0) {
      break;
    }
  }
  // convert empty directory to normal file for remove
  m_attributes = FILE_ATTR_FILE;
    54a8:	strb.w	r2, [r4, #49]	; 0x31
  m_flags |= FILE_FLAG_WRITE;
  return remove();
    54ac:	mov	r0, r4
    54ae:	bl	533c <ExFatFile::remove()>

fail:
  return false;
}
    54b2:	add	sp, #36	; 0x24
    54b4:	pop	{r4, r5, pc}
bool ExFatFile::rmdir() {
  int n;
  uint8_t dir[32];
  // must be open subdirectory
  if (!isSubDir()) {
    DBG_FAIL_MACRO;
    54b6:	mov.w	r0, #354	; 0x162
    54ba:	and.w	r5, r3, #255	; 0xff
    54be:	bl	5238 <dbgPrint(unsigned short)>
  m_attributes = FILE_ATTR_FILE;
  m_flags |= FILE_FLAG_WRITE;
  return remove();

fail:
  return false;
    54c2:	mov	r0, r5
}
    54c4:	add	sp, #36	; 0x24
    54c6:	pop	{r4, r5, pc}
    n = read(dir, 32);
    if (n == 0) {
      break;
    }
    if (n != 32 || dir[0] & 0X80) {
      DBG_FAIL_MACRO;
    54c8:	mov.w	r0, #366	; 0x16e
    54cc:	bl	5238 <dbgPrint(unsigned short)>
  m_attributes = FILE_ATTR_FILE;
  m_flags |= FILE_FLAG_WRITE;
  return remove();

fail:
  return false;
    54d0:	movs	r0, #0
}
    54d2:	add	sp, #36	; 0x24
    54d4:	pop	{r4, r5, pc}
    54d6:	nop

000054d8 <ExFatFile::syncDir()>:
 fail:
  m_error |= WRITE_ERROR;
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::syncDir() {
    54d8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  DirStream_t* ds;
  uint8_t* cache;
  uint16_t checksum = 0;
  uint8_t setCount = 0;

  DirPos_t pos = m_dirPos;
    54dc:	add.w	fp, r0, #36	; 0x24
 fail:
  m_error |= WRITE_ERROR;
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::syncDir() {
    54e0:	mov	r6, r0
  DirStream_t* ds;
  uint8_t* cache;
  uint16_t checksum = 0;
  uint8_t setCount = 0;

  DirPos_t pos = m_dirPos;
    54e2:	ldmia.w	fp, {r0, r1, r2}
 fail:
  m_error |= WRITE_ERROR;
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::syncDir() {
    54e6:	sub	sp, #28
  DirStream_t* ds;
  uint8_t* cache;
  uint16_t checksum = 0;
  uint8_t setCount = 0;

  DirPos_t pos = m_dirPos;
    54e8:	add.w	r8, sp, #12
    54ec:	stmia.w	r8, {r0, r1, r2}
    54f0:	movs	r7, #0
bool ExFatFile::syncDir() {
  DirFile_t* df;
  DirStream_t* ds;
  uint8_t* cache;
  uint16_t checksum = 0;
  uint8_t setCount = 0;
    54f2:	mov	sl, r7
//------------------------------------------------------------------------------
bool ExFatFile::syncDir() {
  DirFile_t* df;
  DirStream_t* ds;
  uint8_t* cache;
  uint16_t checksum = 0;
    54f4:	mov	r4, r7
  uint8_t setCount = 0;

  DirPos_t pos = m_dirPos;

  for (uint8_t i = 0;; i++) {
    cache = m_vol->dirCache(&pos, FsCache::CACHE_FOR_READ);
    54f6:	movs	r2, #0
    54f8:	mov	r1, r8
    54fa:	ldr	r0, [r6, #32]
    54fc:	bl	4f40 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
    5500:	uxtb.w	r9, r7
    if (!cache) {
    5504:	mov	r5, r0
    5506:	cmp	r0, #0
    5508:	beq.n	5602 <ExFatFile::syncDir()+0x12a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    switch (cache[0]) {
    550a:	ldrb	r2, [r0, #0]
    550c:	cmp	r2, #192	; 0xc0
    550e:	beq.n	557c <ExFatFile::syncDir()+0xa4>
    5510:	cmp	r2, #193	; 0xc1
    5512:	beq.n	5534 <ExFatFile::syncDir()+0x5c>
    5514:	cmp	r2, #133	; 0x85
    5516:	beq.n	55b8 <ExFatFile::syncDir()+0xe0>

      case EXFAT_TYPE_NAME:
        break;

      default:
        DBG_FAIL_MACRO;
    5518:	mov.w	r0, #452	; 0x1c4
    551c:	bl	5238 <dbgPrint(unsigned short)>
    goto fail;
  }
  return true;

 fail:
  m_error |= WRITE_ERROR;
    5520:	ldrb.w	r3, [r6, #50]	; 0x32
    5524:	orr.w	r3, r3, #1
    5528:	strb.w	r3, [r6, #50]	; 0x32
  return false;
    552c:	movs	r0, #0
}
    552e:	add	sp, #28
    5530:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5534:	mov	r0, r2
//=============================================================================
#else  // READ_ONLY
//-----------------------------------------------------------------------------
static uint16_t exFatDirChecksum(const uint8_t* data, uint16_t checksum) {
  bool skip = data[0] == EXFAT_TYPE_FILE;
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    5536:	movs	r1, #0
    checksum = ((checksum << 15) | (checksum >> 1)) + data[i];
    5538:	ldrb	r2, [r5, r1]
    553a:	lsls	r3, r4, #15
    553c:	orr.w	r4, r3, r4, lsr #1
    5540:	uxtah	r4, r2, r4
//=============================================================================
#else  // READ_ONLY
//-----------------------------------------------------------------------------
static uint16_t exFatDirChecksum(const uint8_t* data, uint16_t checksum) {
  bool skip = data[0] == EXFAT_TYPE_FILE;
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    5544:	cmp	r1, #1
    checksum = ((checksum << 15) | (checksum >> 1)) + data[i];
    5546:	uxth	r4, r4
//=============================================================================
#else  // READ_ONLY
//-----------------------------------------------------------------------------
static uint16_t exFatDirChecksum(const uint8_t* data, uint16_t checksum) {
  bool skip = data[0] == EXFAT_TYPE_FILE;
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    5548:	add.w	r1, r1, #1
    554c:	beq.n	5572 <ExFatFile::syncDir()+0x9a>
    554e:	cmp	r1, #31
    5550:	bls.n	5538 <ExFatFile::syncDir()+0x60>
        DBG_FAIL_MACRO;
        goto fail;
        break;
    }
    checksum = exFatDirChecksum(cache, checksum);
    if (i == setCount) break;
    5552:	cmp	sl, r9
    5554:	beq.n	560c <ExFatFile::syncDir()+0x134>
    if (m_vol->dirSeek(&pos, 32) != 1) {
    5556:	movs	r2, #32
    5558:	mov	r1, r8
    555a:	ldr	r0, [r6, #32]
    555c:	bl	4fc0 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)>
    5560:	cmp	r0, #1
    5562:	add.w	r7, r7, #1
    5566:	beq.n	54f6 <ExFatFile::syncDir()+0x1e>
      DBG_FAIL_MACRO;
    5568:	movw	r0, #459	; 0x1cb
    556c:	bl	5238 <dbgPrint(unsigned short)>
      goto fail;
    5570:	b.n	5520 <ExFatFile::syncDir()+0x48>
//=============================================================================
#else  // READ_ONLY
//-----------------------------------------------------------------------------
static uint16_t exFatDirChecksum(const uint8_t* data, uint16_t checksum) {
  bool skip = data[0] == EXFAT_TYPE_FILE;
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    5572:	cmp	r0, #133	; 0x85
    5574:	ite	eq
    5576:	moveq	r1, #4
    5578:	movne	r1, #2
    557a:	b.n	5538 <ExFatFile::syncDir()+0x60>
        }
        break;

      case EXFAT_TYPE_STREAM:
        ds = reinterpret_cast<DirStream_t*>(cache);
        if (isContiguous()) {
    557c:	ldrb.w	r3, [r6, #51]	; 0x33
    5580:	tst.w	r3, #64	; 0x40
          ds->flags |= EXFAT_FLAG_CONTIGUOUS;
    5584:	ldrb	r3, [r0, #1]
    5586:	ite	ne
    5588:	orrne.w	r3, r3, #2
        } else {
          ds->flags &= ~EXFAT_FLAG_CONTIGUOUS;
    558c:	biceq.w	r3, r3, #2
    5590:	strb	r3, [r0, #1]
        }
        setLe64(ds->validLength, m_validLength);
    5592:	ldrd	r2, r3, [r6, #16]

inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
}
inline void setLe64(uint8_t* dst, uint64_t src) {
  *reinterpret_cast<uint64_t*>(dst) = src;
    5596:	strd	r2, r3, [r0, #8]
        setLe32(ds->firstCluster, m_firstCluster);
        setLe64(ds->dataLength, m_dataLength);
    559a:	ldrd	r2, r3, [r6, #8]
          ds->flags |= EXFAT_FLAG_CONTIGUOUS;
        } else {
          ds->flags &= ~EXFAT_FLAG_CONTIGUOUS;
        }
        setLe64(ds->validLength, m_validLength);
        setLe32(ds->firstCluster, m_firstCluster);
    559e:	ldr	r1, [r6, #28]
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
}

inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
    55a0:	str	r1, [r0, #20]
}
inline void setLe64(uint8_t* dst, uint64_t src) {
  *reinterpret_cast<uint64_t*>(dst) = src;
    55a2:	strd	r2, r3, [r0, #24]
        setLe64(ds->dataLength, m_dataLength);
        m_vol->dataCacheDirty();
    55a6:	ldr	r2, [r6, #32]
    invalidate();
    return m_cacheBuffer;
  }
  /** Set current sector dirty. */
  void dirty() {
    m_status |= CACHE_STATUS_DIRTY;
    55a8:	ldrb.w	r3, [r2, #524]	; 0x20c
    55ac:	orr.w	r3, r3, #1
    55b0:	strb.w	r3, [r2, #524]	; 0x20c
    55b4:	ldrb	r0, [r0, #0]
    55b6:	b.n	5536 <ExFatFile::syncDir()+0x5e>
    switch (cache[0]) {
      case EXFAT_TYPE_FILE:
        df = reinterpret_cast<DirFile_t*>(cache);
        setCount = df->setCount;
        setLe16(df->attributes, m_attributes & FILE_ATTR_COPY);
        if (FsDateTime::callback) {
    55b8:	ldr	r3, [pc, #152]	; (5654 <ExFatFile::syncDir()+0x17c>)
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    55ba:	ldrb.w	r1, [r6, #49]	; 0x31
    55be:	ldr	r3, [r3, #0]
      goto fail;
    }
    switch (cache[0]) {
      case EXFAT_TYPE_FILE:
        df = reinterpret_cast<DirFile_t*>(cache);
        setCount = df->setCount;
    55c0:	ldrb.w	sl, [r0, #1]
    55c4:	and.w	r1, r1, #55	; 0x37
    55c8:	strh	r1, [r0, #4]
        setLe16(df->attributes, m_attributes & FILE_ATTR_COPY);
        if (FsDateTime::callback) {
    55ca:	cmp	r3, #0
    55cc:	beq.n	5534 <ExFatFile::syncDir()+0x5c>
          m_vol->dataCacheDirty();
    55ce:	ldr	r1, [r6, #32]
    55d0:	ldrb.w	r2, [r1, #524]	; 0x20c
    55d4:	orr.w	r2, r2, #1
    55d8:	strb.w	r2, [r1, #524]	; 0x20c
          uint16_t date, time;
          uint8_t ms10;
          FsDateTime::callback(&date, &time, &ms10);
    55dc:	add	r0, sp, #8
    55de:	add.w	r2, sp, #7
    55e2:	add.w	r1, sp, #10
    55e6:	blx	r3
          df->modifyTimeMs = ms10;
          setLe16(df->modifyTime, time);
    55e8:	ldrh.w	r2, [sp, #10]
          setLe16(df->modifyDate, date);
    55ec:	ldrh.w	r3, [sp, #8]
        if (FsDateTime::callback) {
          m_vol->dataCacheDirty();
          uint16_t date, time;
          uint8_t ms10;
          FsDateTime::callback(&date, &time, &ms10);
          df->modifyTimeMs = ms10;
    55f0:	ldrb.w	r1, [sp, #7]
    55f4:	strb	r1, [r5, #21]
    55f6:	strh	r2, [r5, #12]
    55f8:	strh	r2, [r5, #16]
    55fa:	strh	r3, [r5, #14]
    55fc:	strh	r3, [r5, #18]
    55fe:	ldrb	r0, [r5, #0]
    5600:	b.n	5536 <ExFatFile::syncDir()+0x5e>
  DirPos_t pos = m_dirPos;

  for (uint8_t i = 0;; i++) {
    cache = m_vol->dirCache(&pos, FsCache::CACHE_FOR_READ);
    if (!cache) {
      DBG_FAIL_MACRO;
    5602:	mov.w	r0, #414	; 0x19e
    5606:	bl	5238 <dbgPrint(unsigned short)>
      goto fail;
    560a:	b.n	5520 <ExFatFile::syncDir()+0x48>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  df = reinterpret_cast<DirFile_t *>
       (m_vol->dirCache(&m_dirPos, FsCache::CACHE_FOR_WRITE));
    560c:	mov	r1, fp
    560e:	movs	r2, #1
    5610:	ldr	r0, [r6, #32]
    5612:	bl	4f40 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
  if (!df) {
    5616:	cbz	r0, 562e <ExFatFile::syncDir()+0x156>
    DBG_FAIL_MACRO;
    goto fail;
  }
  setLe16(df->setChecksum, checksum);
  if (!m_vol->cacheSync()) {
    5618:	ldr	r5, [r6, #32]
    561a:	strh	r4, [r0, #2]
#endif  // USE_EXFAT_BITMAP_CACHE
    m_dataCache.init(dev);
  }
  bool cacheSync() {
#if USE_EXFAT_BITMAP_CACHE
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    561c:	mov	r0, r5
    561e:	bl	4ca4 <FsCache::sync()>
    5622:	cbnz	r0, 5638 <ExFatFile::syncDir()+0x160>
    DBG_FAIL_MACRO;
    5624:	movw	r0, #471	; 0x1d7
    5628:	bl	5238 <dbgPrint(unsigned short)>
    goto fail;
    562c:	b.n	5520 <ExFatFile::syncDir()+0x48>
    }
  }
  df = reinterpret_cast<DirFile_t *>
       (m_vol->dirCache(&m_dirPos, FsCache::CACHE_FOR_WRITE));
  if (!df) {
    DBG_FAIL_MACRO;
    562e:	mov.w	r0, #466	; 0x1d2
    5632:	bl	5238 <dbgPrint(unsigned short)>
    goto fail;
    5636:	b.n	5520 <ExFatFile::syncDir()+0x48>
    5638:	add.w	r0, r5, #524	; 0x20c
    563c:	bl	4ca4 <FsCache::sync()>
    5640:	cmp	r0, #0
    5642:	beq.n	5624 <ExFatFile::syncDir()+0x14c>
    5644:	ldr.w	r0, [r5, #1080]	; 0x438
  bool fatPut(uint32_t cluster, uint32_t value);
  uint32_t chainSize(uint32_t cluster);
  bool freeChain(uint32_t cluster);
  uint16_t sectorMask() {return m_sectorMask;}
  bool syncDevice() {
    return m_blockDev->syncDevice();
    5648:	ldr	r3, [r0, #0]
    564a:	ldr	r3, [r3, #20]
    564c:	blx	r3
#endif  // USE_EXFAT_BITMAP_CACHE
    m_dataCache.init(dev);
  }
  bool cacheSync() {
#if USE_EXFAT_BITMAP_CACHE
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    564e:	cmp	r0, #0
    5650:	beq.n	5624 <ExFatFile::syncDir()+0x14c>
    5652:	b.n	552e <ExFatFile::syncDir()+0x56>
    5654:	.word	0x1fff8724

00005658 <ExFatFile::sync()>:
fail:
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::sync() {
  if (!isOpen()) {
    5658:	ldrb.w	r2, [r0, #49]	; 0x31
    565c:	cbz	r2, 568c <ExFatFile::sync()+0x34>

fail:
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::sync() {
    565e:	push	{r3, r4, r5, lr}
  if (!isOpen()) {
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    5660:	ldrb.w	r2, [r0, #51]	; 0x33
    5664:	lsls	r1, r2, #24
    5666:	bmi.n	5690 <ExFatFile::sync()+0x38>
    // clear directory dirty
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    return syncDir();
  }
  if (!m_vol->cacheSync()) {
    5668:	ldr	r5, [r0, #32]
    566a:	mov	r4, r0
    566c:	mov	r0, r5
    566e:	bl	4ca4 <FsCache::sync()>
    5672:	cbnz	r0, 56a0 <ExFatFile::sync()+0x48>
    DBG_FAIL_MACRO;
    5674:	mov.w	r0, #392	; 0x188
    5678:	bl	5238 <dbgPrint(unsigned short)>
    goto fail;
  }
  return true;

 fail:
  m_error |= WRITE_ERROR;
    567c:	ldrb.w	r3, [r4, #50]	; 0x32
    5680:	orr.w	r3, r3, #1
    5684:	strb.w	r3, [r4, #50]	; 0x32
    5688:	movs	r0, #0
  return false;
}
    568a:	pop	{r3, r4, r5, pc}
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::sync() {
  if (!isOpen()) {
    return true;
    568c:	movs	r0, #1
  return true;

 fail:
  m_error |= WRITE_ERROR;
  return false;
}
    568e:	bx	lr
  if (!isOpen()) {
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    // clear directory dirty
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    5690:	and.w	r2, r2, #127	; 0x7f
    5694:	strb.w	r2, [r0, #51]	; 0x33
  return true;

 fail:
  m_error |= WRITE_ERROR;
  return false;
}
    5698:	ldmia.w	sp!, {r3, r4, r5, lr}
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    // clear directory dirty
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    return syncDir();
    569c:	b.w	54d8 <ExFatFile::syncDir()>
    56a0:	add.w	r0, r5, #524	; 0x20c
    56a4:	bl	4ca4 <FsCache::sync()>
    56a8:	cmp	r0, #0
    56aa:	beq.n	5674 <ExFatFile::sync()+0x1c>
    56ac:	ldr.w	r0, [r5, #1080]	; 0x438
  bool fatPut(uint32_t cluster, uint32_t value);
  uint32_t chainSize(uint32_t cluster);
  bool freeChain(uint32_t cluster);
  uint16_t sectorMask() {return m_sectorMask;}
  bool syncDevice() {
    return m_blockDev->syncDevice();
    56b0:	ldr	r3, [r0, #0]
    56b2:	ldr	r3, [r3, #20]
    56b4:	blx	r3
#endif  // USE_EXFAT_BITMAP_CACHE
    m_dataCache.init(dev);
  }
  bool cacheSync() {
#if USE_EXFAT_BITMAP_CACHE
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    56b6:	cmp	r0, #0
    56b8:	beq.n	5674 <ExFatFile::sync()+0x1c>
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::sync() {
  if (!isOpen()) {
    return true;
    56ba:	movs	r0, #1
    56bc:	pop	{r3, r4, r5, pc}
    56be:	nop

000056c0 <ExFatFile::addDirCluster()>:

 fail:
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::addDirCluster() {
    56c0:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t sector;
  uint32_t dl = isRoot() ? m_vol->rootLength() : m_dataLength;
    56c4:	ldrb.w	r3, [r0, #49]	; 0x31
    56c8:	lsls	r1, r3, #25

 fail:
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::addDirCluster() {
    56ca:	mov	r8, r0
  uint32_t sector;
  uint32_t dl = isRoot() ? m_vol->rootLength() : m_dataLength;
    56cc:	bmi.n	577c <ExFatFile::addDirCluster()+0xbc>
    56ce:	ldr	r0, [r0, #8]
    56d0:	ldr.w	r3, [r8, #32]
  uint8_t* cache;
  dl += m_vol->bytesPerCluster();
  if (dl >= 0X4000000) {
    56d4:	ldr.w	r3, [r3, #1076]	; 0x434
    56d8:	add	r0, r3
    56da:	cmp.w	r0, #67108864	; 0x4000000
    56de:	bcs.n	5770 <ExFatFile::addDirCluster()+0xb0>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!addCluster()) {
    56e0:	mov	r0, r8
    56e2:	bl	5274 <ExFatFile::addCluster()>
    56e6:	cmp	r0, #0
    56e8:	beq.n	5764 <ExFatFile::addDirCluster()+0xa4>
    DBG_FAIL_MACRO;
    goto fail;
  }
  cache =  m_vol->cacheClear();
    56ea:	ldr.w	r5, [r8, #32]
  uint8_t* cacheBuffer() {
    return m_cacheBuffer;
  }
  /** \return Clear the cache and returns a pointer to the cache. */
  uint8_t* clear() {
    if (isDirty() && !sync()) {
    56ee:	ldrb.w	r3, [r5, #524]	; 0x20c
    56f2:	lsls	r2, r3, #31

  /** Clear the cache and returns a pointer to the cache.  Not for normal apps.
   * \return A pointer to the cache buffer or zero if an error occurs.
   */
  uint8_t* cacheClear() {
    return m_dataCache.clear();
    56f4:	add.w	r4, r5, #524	; 0x20c
  uint8_t* cacheBuffer() {
    return m_cacheBuffer;
  }
  /** \return Clear the cache and returns a pointer to the cache. */
  uint8_t* clear() {
    if (isDirty() && !sync()) {
    56f8:	bmi.n	57c2 <ExFatFile::addDirCluster()+0x102>
      return nullptr;
    }
    invalidate();
    56fa:	mov	r0, r4
    return m_cacheBuffer;
    56fc:	add.w	r5, r5, #536	; 0x218
  /** \return Clear the cache and returns a pointer to the cache. */
  uint8_t* clear() {
    if (isDirty() && !sync()) {
      return nullptr;
    }
    invalidate();
    5700:	bl	4c0c <FsCache::invalidate()>
  if (!cache) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(cache, 0, m_vol->bytesPerSector());
    5704:	mov.w	r2, #512	; 0x200
    5708:	movs	r1, #0
    570a:	mov	r0, r5
    570c:	bl	c92c <memset>
  sector = m_vol->clusterStartSector(m_curCluster);
    5710:	ldr.w	r2, [r8, #32]
  bool dataCacheSync() {return m_dataCache.sync();}
  //----------------------------------------------------------------------------
  uint32_t clusterMask() {return m_clusterMask;}
  uint32_t clusterStartSector(uint32_t cluster) {
    return m_clusterHeapStartSector +
           ((cluster - 2) << m_sectorsPerClusterShift);
    5714:	ldr.w	r3, [r8, #24]
    5718:	ldrb.w	r1, [r2, #1085]	; 0x43d
    571c:	ldr.w	r7, [r2, #1060]	; 0x424
    5720:	subs	r3, #2
    5722:	lsls	r3, r1
  for (uint32_t i = 0; i < m_vol->sectorsPerCluster(); i++) {
    5724:	movs	r6, #1
    5726:	add	r7, r3
    5728:	lsls.w	r3, r6, r1
    572c:	it	ne
    572e:	movne	r4, #0
    5730:	bne.n	5744 <ExFatFile::addDirCluster()+0x84>
    5732:	b.n	5784 <ExFatFile::addDirCluster()+0xc4>
    5734:	ldr.w	r2, [r8, #32]
    5738:	ldrb.w	r3, [r2, #1085]	; 0x43d
    573c:	lsl.w	r3, r6, r3
    5740:	cmp	r3, r4
    5742:	bls.n	5784 <ExFatFile::addDirCluster()+0xc4>
    5744:	ldr.w	r0, [r2, #1080]	; 0x438
  }
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
  }
  bool writeSector(uint32_t sector, const uint8_t* src) {
    return m_blockDev->writeSector(sector, src);
    5748:	ldr	r3, [r0, #0]
    574a:	adds	r1, r7, r4
    574c:	ldr	r3, [r3, #24]
    574e:	mov	r2, r5
    5750:	blx	r3
    5752:	adds	r4, #1
    if (!m_vol->writeSector(sector + i, cache)) {
    5754:	cmp	r0, #0
    5756:	bne.n	5734 <ExFatFile::addDirCluster()+0x74>
      DBG_FAIL_MACRO;
    5758:	movs	r0, #145	; 0x91
    575a:	bl	5238 <dbgPrint(unsigned short)>
  }
  return sync();

 fail:
  return false;
}
    575e:	movs	r0, #0
    5760:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (dl >= 0X4000000) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!addCluster()) {
    DBG_FAIL_MACRO;
    5764:	movs	r0, #133	; 0x85
    5766:	bl	5238 <dbgPrint(unsigned short)>
  }
  return sync();

 fail:
  return false;
}
    576a:	movs	r0, #0
    576c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  uint32_t sector;
  uint32_t dl = isRoot() ? m_vol->rootLength() : m_dataLength;
  uint8_t* cache;
  dl += m_vol->bytesPerCluster();
  if (dl >= 0X4000000) {
    DBG_FAIL_MACRO;
    5770:	movs	r0, #129	; 0x81
    5772:	bl	5238 <dbgPrint(unsigned short)>
  }
  return sync();

 fail:
  return false;
}
    5776:	movs	r0, #0
    5778:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::addDirCluster() {
  uint32_t sector;
  uint32_t dl = isRoot() ? m_vol->rootLength() : m_dataLength;
    577c:	ldr	r0, [r0, #32]
    577e:	bl	5168 <ExFatPartition::rootLength()>
    5782:	b.n	56d0 <ExFatFile::addDirCluster()+0x10>
    if (!m_vol->writeSector(sector + i, cache)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  if (!isRoot()) {
    5784:	ldrb.w	r3, [r8, #49]	; 0x31
    5788:	lsls	r3, r3, #25
    578a:	bmi.n	57b8 <ExFatFile::addDirCluster()+0xf8>
    m_flags |= FILE_FLAG_DIR_DIRTY;
    578c:	ldrb.w	r3, [r8, #51]	; 0x33
    5790:	orn	r3, r3, #127	; 0x7f
    5794:	strb.w	r3, [r8, #51]	; 0x33
    m_dataLength  += m_vol->bytesPerCluster();
    5798:	ldr.w	r4, [r2, #1076]	; 0x434
    579c:	ldrd	r2, r3, [r8, #8]
    m_validLength += m_vol->bytesPerCluster();
    57a0:	ldrd	r0, r1, [r8, #16]
      goto fail;
    }
  }
  if (!isRoot()) {
    m_flags |= FILE_FLAG_DIR_DIRTY;
    m_dataLength  += m_vol->bytesPerCluster();
    57a4:	adds	r2, r2, r4
    57a6:	mov.w	r5, #0
    57aa:	adcs	r3, r5
    m_validLength += m_vol->bytesPerCluster();
    57ac:	adds	r0, r0, r4
    57ae:	adcs	r1, r5
      goto fail;
    }
  }
  if (!isRoot()) {
    m_flags |= FILE_FLAG_DIR_DIRTY;
    m_dataLength  += m_vol->bytesPerCluster();
    57b0:	strd	r2, r3, [r8, #8]
    m_validLength += m_vol->bytesPerCluster();
    57b4:	strd	r0, r1, [r8, #16]
  }
  return sync();
    57b8:	mov	r0, r8

 fail:
  return false;
}
    57ba:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  if (!isRoot()) {
    m_flags |= FILE_FLAG_DIR_DIRTY;
    m_dataLength  += m_vol->bytesPerCluster();
    m_validLength += m_vol->bytesPerCluster();
  }
  return sync();
    57be:	b.w	5658 <ExFatFile::sync()>
  uint8_t* cacheBuffer() {
    return m_cacheBuffer;
  }
  /** \return Clear the cache and returns a pointer to the cache. */
  uint8_t* clear() {
    if (isDirty() && !sync()) {
    57c2:	mov	r0, r4
    57c4:	bl	4ca4 <FsCache::sync()>
    57c8:	cmp	r0, #0
    57ca:	bne.n	56fa <ExFatFile::addDirCluster()+0x3a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  cache =  m_vol->cacheClear();
  if (!cache) {
    DBG_FAIL_MACRO;
    57cc:	movs	r0, #138	; 0x8a
    57ce:	bl	5238 <dbgPrint(unsigned short)>
    57d2:	b.n	576a <ExFatFile::addDirCluster()+0xaa>

000057d4 <ExFatFile::mkdir(ExFatFile*, ExName_t*)>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::mkdir(ExFatFile* parent, ExName_t* fname) {
    57d4:	push	{r4, r5, lr}
  if (!parent->isDir()) {
    57d6:	ldrb.w	r3, [r1, #49]	; 0x31
    57da:	tst.w	r3, #80	; 0x50

fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::mkdir(ExFatFile* parent, ExName_t* fname) {
    57de:	sub	sp, #12
  if (!parent->isDir()) {
    57e0:	beq.n	582e <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0x5a>
  uint8_t setCount() {return m_setCount;}
  bool mkdir(ExFatFile* parent, ExName_t* fname);
  bool openRootFile(ExFatFile* dir,
                    const ExChar_t* name, uint8_t nameLength, oflag_t oflag);
  bool open(ExFatFile* dirFile, ExName_t* fname, oflag_t oflag) {
    return openRootFile(dirFile, fname->lfn, fname->len, oflag);
    57e2:	movw	r5, #2562	; 0xa02
    57e6:	ldrb	r3, [r2, #0]
    57e8:	ldr	r2, [r2, #4]
    57ea:	str	r5, [sp, #0]
    57ec:	mov	r4, r0
    57ee:	bl	4610 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // create a normal file
  if (!open(parent, fname, O_CREAT | O_EXCL | O_RDWR)) {
    57f2:	cbz	r0, 5822 <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0x4e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // convert file to directory

  m_attributes = FILE_ATTR_SUBDIR;
    57f4:	movs	r3, #16
    57f6:	strb.w	r3, [r4, #49]	; 0x31

  // allocate and zero first cluster
  if (!addDirCluster()) {
    57fa:	mov	r0, r4
    57fc:	bl	56c0 <ExFatFile::addDirCluster()>
    5800:	cbz	r0, 583a <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0x66>
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_firstCluster = m_curCluster;
    5802:	ldr	r3, [r4, #24]
    5804:	str	r3, [r4, #28]
   * \return true for success or false for failure.
   */
  bool rename(ExFatFile* dirFile, const ExChar_t* newPath);
  /** Set the file's current position to zero. */
  void rewind() {
    seekSet(0);
    5806:	movs	r2, #0
    5808:	movs	r3, #0
    580a:	mov	r0, r4
    580c:	bl	44f4 <ExFatFile::seekSet(unsigned long long)>

  // Set to start of dir
  rewind();
  m_flags = FILE_FLAG_READ | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
    5810:	movs	r3, #193	; 0xc1
  return sync();
    5812:	mov	r0, r4
  }
  m_firstCluster = m_curCluster;

  // Set to start of dir
  rewind();
  m_flags = FILE_FLAG_READ | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
    5814:	strb.w	r3, [r4, #51]	; 0x33
  return sync();

fail:
  return false;
}
    5818:	add	sp, #12
    581a:	ldmia.w	sp!, {r4, r5, lr}
  m_firstCluster = m_curCluster;

  // Set to start of dir
  rewind();
  m_flags = FILE_FLAG_READ | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
  return sync();
    581e:	b.w	5658 <ExFatFile::sync()>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // create a normal file
  if (!open(parent, fname, O_CREAT | O_EXCL | O_RDWR)) {
    DBG_FAIL_MACRO;
    5822:	movs	r0, #209	; 0xd1
    5824:	bl	5238 <dbgPrint(unsigned short)>
  m_flags = FILE_FLAG_READ | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
  return sync();

fail:
  return false;
}
    5828:	movs	r0, #0
    582a:	add	sp, #12
    582c:	pop	{r4, r5, pc}
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::mkdir(ExFatFile* parent, ExName_t* fname) {
  if (!parent->isDir()) {
    DBG_FAIL_MACRO;
    582e:	movs	r0, #204	; 0xcc
    5830:	bl	5238 <dbgPrint(unsigned short)>
  m_flags = FILE_FLAG_READ | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
  return sync();

fail:
  return false;
}
    5834:	movs	r0, #0
    5836:	add	sp, #12
    5838:	pop	{r4, r5, pc}

  m_attributes = FILE_ATTR_SUBDIR;

  // allocate and zero first cluster
  if (!addDirCluster()) {
    DBG_FAIL_MACRO;
    583a:	movs	r0, #218	; 0xda
    583c:	bl	5238 <dbgPrint(unsigned short)>
  m_flags = FILE_FLAG_READ | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
  return sync();

fail:
  return false;
}
    5840:	movs	r0, #0
    5842:	add	sp, #12
    5844:	pop	{r4, r5, pc}
    5846:	nop

00005848 <ExFatFile::mkdir(ExFatFile*, char const*, bool)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::mkdir(ExFatFile* parent, const ExChar_t* path, bool pFlag) {
    5848:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    584c:	mov	r6, r0
    584e:	sub	sp, #84	; 0x54
  ExName_t fname;
  ExFatFile tmpDir;

  if (isOpen() || !parent->isDir()) {
    5850:	ldrb.w	r4, [r6, #49]	; 0x31

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::mkdir(ExFatFile* parent, const ExChar_t* path, bool pFlag) {
    5854:	str	r2, [sp, #12]
 * \brief Basic file class.
 */
class ExFatFile {
 public:
  /** Create an instance. */
  ExFatFile() : m_attributes(FILE_ATTR_CLOSED), m_error(0), m_flags(0) {}
    5856:	movs	r0, #0
    5858:	strb.w	r0, [sp, #73]	; 0x49
    585c:	strb.w	r0, [sp, #74]	; 0x4a
    5860:	strb.w	r0, [sp, #75]	; 0x4b
  ExName_t fname;
  ExFatFile tmpDir;

  if (isOpen() || !parent->isDir()) {
    5864:	cmp	r4, #0
    5866:	bne.n	58e2 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x9a>
    5868:	mov	r9, r3
    586a:	ldrb.w	r3, [r1, #49]	; 0x31
    586e:	tst.w	r3, #80	; 0x50
    5872:	mov	r5, r1
    5874:	beq.n	58e2 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x9a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    5876:	ldrb	r3, [r2, #0]
    5878:	cmp	r3, #47	; 0x2f
    587a:	mov	r1, r2
    587c:	beq.n	58c4 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x7c>
  uint8_t setCount() {return m_setCount;}
  bool mkdir(ExFatFile* parent, ExName_t* fname);
  bool openRootFile(ExFatFile* dir,
                    const ExChar_t* name, uint8_t nameLength, oflag_t oflag);
  bool open(ExFatFile* dirFile, ExName_t* fname, oflag_t oflag) {
    return openRootFile(dirFile, fname->lfn, fname->len, oflag);
    587e:	mov.w	r8, #0
      goto fail;
    }
    parent = &tmpDir;
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
    5882:	add	r3, sp, #12
    5884:	add	r2, sp, #16
    5886:	mov	r0, r6
    5888:	bl	421c <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>
    588c:	mov	r4, r0
    588e:	cmp	r0, #0
    5890:	beq.n	592c <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xe4>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!*path) {
    5892:	ldr	r3, [sp, #12]
    5894:	ldrb	r3, [r3, #0]
    5896:	cmp	r3, #0
    5898:	beq.n	593a <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xf2>
    589a:	ldrb.w	r3, [sp, #16]
    589e:	ldr	r2, [sp, #20]
    58a0:	str.w	r8, [sp]
    58a4:	mov	r1, r5
    58a6:	mov	r0, r6
    58a8:	bl	4610 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)>
      break;
    }
    if (!open(parent, &fname, O_RDONLY)) {
    58ac:	mov	r4, r0
    58ae:	cbnz	r0, 5900 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xb8>
      if (!pFlag || !mkdir(parent, &fname)) {
    58b0:	cmp.w	r9, #0
    58b4:	bne.n	58f2 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xaa>
        DBG_FAIL_MACRO;
    58b6:	movs	r0, #188	; 0xbc
    58b8:	bl	5238 <dbgPrint(unsigned short)>
  }
  return mkdir(parent, &fname);

fail:
  return false;
}
    58bc:	mov	r0, r4
    58be:	add	sp, #84	; 0x54
    58c0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
      path++;
    58c4:	adds	r1, #1
    58c6:	str	r1, [sp, #12]
  if (isOpen() || !parent->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
    58c8:	ldrb	r3, [r1, #0]
    58ca:	cmp	r3, #47	; 0x2f
    58cc:	beq.n	58c4 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x7c>
      path++;
    }
    if (!tmpDir.openRoot(parent->m_vol)) {
    58ce:	ldr	r1, [r5, #32]
    58d0:	add	r0, sp, #24
    58d2:	bl	41ec <ExFatFile::openRoot(ExFatVolume*)>
    58d6:	mov	r4, r0
    58d8:	cmp	r0, #0
    58da:	beq.n	5948 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x100>
    58dc:	ldr	r1, [sp, #12]
      DBG_FAIL_MACRO;
      goto fail;
    }
    parent = &tmpDir;
    58de:	add	r5, sp, #24
    58e0:	b.n	587e <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x36>
bool ExFatFile::mkdir(ExFatFile* parent, const ExChar_t* path, bool pFlag) {
  ExName_t fname;
  ExFatFile tmpDir;

  if (isOpen() || !parent->isDir()) {
    DBG_FAIL_MACRO;
    58e2:	movs	r0, #165	; 0xa5
    58e4:	bl	5238 <dbgPrint(unsigned short)>
    close();
  }
  return mkdir(parent, &fname);

fail:
  return false;
    58e8:	movs	r4, #0
}
    58ea:	mov	r0, r4
    58ec:	add	sp, #84	; 0x54
    58ee:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    }
    if (!*path) {
      break;
    }
    if (!open(parent, &fname, O_RDONLY)) {
      if (!pFlag || !mkdir(parent, &fname)) {
    58f2:	mov	r1, r5
    58f4:	add	r2, sp, #16
    58f6:	mov	r0, r6
    58f8:	bl	57d4 <ExFatFile::mkdir(ExFatFile*, ExName_t*)>
    58fc:	cmp	r0, #0
    58fe:	beq.n	58b6 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x6e>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    tmpDir = *this;
    5900:	mov	r4, r6
    5902:	add	r7, sp, #24
    5904:	add.w	lr, r6, #48	; 0x30
    5908:	ldr	r0, [r4, #0]
    590a:	ldr	r1, [r4, #4]
    590c:	ldr	r2, [r4, #8]
    590e:	ldr	r3, [r4, #12]
    5910:	mov	r5, r7
    5912:	stmia	r5!, {r0, r1, r2, r3}
    5914:	adds	r4, #16
    5916:	cmp	r4, lr
    5918:	mov	r7, r5
    591a:	bne.n	5908 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xc0>
    591c:	ldr	r0, [r4, #0]
    591e:	str	r0, [r5, #0]
    parent = &tmpDir;
    close();
    5920:	mov	r0, r6
    5922:	bl	4118 <ExFatFile::close()>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    tmpDir = *this;
    parent = &tmpDir;
    5926:	add	r5, sp, #24
    5928:	ldr	r1, [sp, #12]
      DBG_FAIL_MACRO;
      goto fail;
    }
    parent = &tmpDir;
  }
  while (1) {
    592a:	b.n	5882 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x3a>
    if (!parsePathName(path, &fname, &path)) {
      DBG_FAIL_MACRO;
    592c:	movs	r0, #180	; 0xb4
    592e:	bl	5238 <dbgPrint(unsigned short)>
  }
  return mkdir(parent, &fname);

fail:
  return false;
}
    5932:	mov	r0, r4
    5934:	add	sp, #84	; 0x54
    5936:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    }
    tmpDir = *this;
    parent = &tmpDir;
    close();
  }
  return mkdir(parent, &fname);
    593a:	add	r2, sp, #16
    593c:	mov	r1, r5
    593e:	mov	r0, r6
    5940:	bl	57d4 <ExFatFile::mkdir(ExFatFile*, ExName_t*)>
    5944:	mov	r4, r0
    5946:	b.n	58bc <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x74>
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
      path++;
    }
    if (!tmpDir.openRoot(parent->m_vol)) {
      DBG_FAIL_MACRO;
    5948:	movs	r0, #173	; 0xad
    594a:	bl	5238 <dbgPrint(unsigned short)>
      goto fail;
    594e:	b.n	58bc <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x74>

00005950 <ExFatFile::rename(ExFatFile*, char const*)>:
//------------------------------------------------------------------------------
bool ExFatFile::rename(const ExChar_t* newPath) {
  return rename(m_vol->vwd(), newPath);
}
//------------------------------------------------------------------------------
bool ExFatFile::rename(ExFatFile* dirFile, const ExChar_t* newPath) {
    5950:	push	{r4, r5, r6, r7, lr}
  ExFatFile file;
  ExFatFile oldFile;

  // Must be an open file or subdirectory.
  if (!(isFile() || isSubDir())) {
    5952:	ldrb.w	r4, [r0, #49]	; 0x31
//------------------------------------------------------------------------------
bool ExFatFile::rename(const ExChar_t* newPath) {
  return rename(m_vol->vwd(), newPath);
}
//------------------------------------------------------------------------------
bool ExFatFile::rename(ExFatFile* dirFile, const ExChar_t* newPath) {
    5956:	sub	sp, #116	; 0x74
 * \brief Basic file class.
 */
class ExFatFile {
 public:
  /** Create an instance. */
  ExFatFile() : m_attributes(FILE_ATTR_CLOSED), m_error(0), m_flags(0) {}
    5958:	movs	r3, #0
  ExFatFile file;
  ExFatFile oldFile;

  // Must be an open file or subdirectory.
  if (!(isFile() || isSubDir())) {
    595a:	ands.w	r4, r4, #24
    595e:	strb.w	r3, [sp, #49]	; 0x31
    5962:	strb.w	r3, [sp, #50]	; 0x32
    5966:	strb.w	r3, [sp, #51]	; 0x33
    596a:	strb.w	r3, [sp, #105]	; 0x69
    596e:	strb.w	r3, [sp, #106]	; 0x6a
    5972:	strb.w	r3, [sp, #107]	; 0x6b
    5976:	bne.n	5986 <ExFatFile::rename(ExFatFile*, char const*)+0x36>
    DBG_FAIL_MACRO;
    5978:	movw	r0, #319	; 0x13f
    597c:	bl	5238 <dbgPrint(unsigned short)>
  oldFile.m_attributes = FILE_ATTR_FILE;
  return oldFile.remove();

fail:
  return false;
}
    5980:	mov	r0, r4
    5982:	add	sp, #116	; 0x74
    5984:	pop	{r4, r5, r6, r7, pc}
    5986:	mov	r5, r0
  if (!(isFile() || isSubDir())) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Can't move file to new volume.
  if (m_vol != dirFile->m_vol) {
    5988:	ldr	r0, [r1, #32]
    598a:	ldr	r4, [r5, #32]
    598c:	cmp	r4, r0
    598e:	beq.n	59a0 <ExFatFile::rename(ExFatFile*, char const*)+0x50>
    DBG_FAIL_MACRO;
    5990:	mov.w	r0, #324	; 0x144
  oldFile.m_flags = FILE_FLAG_WRITE;
  oldFile.m_attributes = FILE_ATTR_FILE;
  return oldFile.remove();

fail:
  return false;
    5994:	mov	r4, r3
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Can't move file to new volume.
  if (m_vol != dirFile->m_vol) {
    DBG_FAIL_MACRO;
    5996:	bl	5238 <dbgPrint(unsigned short)>
  oldFile.m_attributes = FILE_ATTR_FILE;
  return oldFile.remove();

fail:
  return false;
}
    599a:	mov	r0, r4
    599c:	add	sp, #116	; 0x74
    599e:	pop	{r4, r5, r6, r7, pc}
  // Can't move file to new volume.
  if (m_vol != dirFile->m_vol) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!file.open(dirFile, newPath, O_CREAT | O_EXCL | O_WRONLY)) {
    59a0:	movw	r3, #2561	; 0xa01
    59a4:	mov	r0, sp
    59a6:	bl	4a40 <ExFatFile::open(ExFatFile*, char const*, int)>
    59aa:	mov	r4, r0
    59ac:	cbz	r0, 5a14 <ExFatFile::rename(ExFatFile*, char const*)+0xc4>
    DBG_FAIL_MACRO;
    goto fail;
  }
  oldFile = *this;
    59ae:	add	r7, sp, #56	; 0x38
    59b0:	mov	r4, r5
    59b2:	add.w	lr, r5, #48	; 0x30
    59b6:	ldr	r0, [r4, #0]
    59b8:	ldr	r1, [r4, #4]
    59ba:	ldr	r2, [r4, #8]
    59bc:	ldr	r3, [r4, #12]
    59be:	mov	r6, r7
    59c0:	stmia	r6!, {r0, r1, r2, r3}
    59c2:	adds	r4, #16
    59c4:	cmp	r4, lr
    59c6:	mov	r7, r6
    59c8:	bne.n	59b6 <ExFatFile::rename(ExFatFile*, char const*)+0x66>
    59ca:	ldr	r0, [r4, #0]
    59cc:	str	r0, [r6, #0]
  m_dirPos = file.m_dirPos;
    59ce:	add	r3, sp, #36	; 0x24
    59d0:	ldmia.w	r3, {r0, r1, r2}
    59d4:	add.w	r3, r5, #36	; 0x24
    59d8:	stmia.w	r3, {r0, r1, r2}
  m_setCount = file.m_setCount;
  m_flags |= FILE_FLAG_DIR_DIRTY;
    59dc:	ldrb.w	r3, [r5, #51]	; 0x33
    DBG_FAIL_MACRO;
    goto fail;
  }
  oldFile = *this;
  m_dirPos = file.m_dirPos;
  m_setCount = file.m_setCount;
    59e0:	ldrb.w	r2, [sp, #48]	; 0x30
    59e4:	strb.w	r2, [r5, #48]	; 0x30
  m_flags |= FILE_FLAG_DIR_DIRTY;
    59e8:	orn	r3, r3, #127	; 0x7f
    59ec:	strb.w	r3, [r5, #51]	; 0x33
  if (!sync()) {
    59f0:	mov	r0, r5
    59f2:	bl	5658 <ExFatFile::sync()>
    59f6:	mov	r4, r0
    59f8:	cbz	r0, 5a1e <ExFatFile::rename(ExFatFile*, char const*)+0xce>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Remove old directory entry;
  oldFile.m_firstCluster = 0;
    59fa:	movs	r1, #0
  oldFile.m_flags = FILE_FLAG_WRITE;
    59fc:	movs	r2, #2
  oldFile.m_attributes = FILE_ATTR_FILE;
    59fe:	movs	r3, #8
  return oldFile.remove();
    5a00:	add	r0, sp, #56	; 0x38
  if (!sync()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Remove old directory entry;
  oldFile.m_firstCluster = 0;
    5a02:	str	r1, [sp, #84]	; 0x54
  oldFile.m_flags = FILE_FLAG_WRITE;
    5a04:	strb.w	r2, [sp, #107]	; 0x6b
  oldFile.m_attributes = FILE_ATTR_FILE;
    5a08:	strb.w	r3, [sp, #105]	; 0x69
  return oldFile.remove();
    5a0c:	bl	533c <ExFatFile::remove()>
    5a10:	mov	r4, r0
    5a12:	b.n	5980 <ExFatFile::rename(ExFatFile*, char const*)+0x30>
  if (m_vol != dirFile->m_vol) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!file.open(dirFile, newPath, O_CREAT | O_EXCL | O_WRONLY)) {
    DBG_FAIL_MACRO;
    5a14:	mov.w	r0, #328	; 0x148
    5a18:	bl	5238 <dbgPrint(unsigned short)>
    goto fail;
    5a1c:	b.n	5980 <ExFatFile::rename(ExFatFile*, char const*)+0x30>
  oldFile = *this;
  m_dirPos = file.m_dirPos;
  m_setCount = file.m_setCount;
  m_flags |= FILE_FLAG_DIR_DIRTY;
  if (!sync()) {
    DBG_FAIL_MACRO;
    5a1e:	mov.w	r0, #336	; 0x150
    5a22:	bl	5238 <dbgPrint(unsigned short)>
    goto fail;
    5a26:	b.n	5980 <ExFatFile::rename(ExFatFile*, char const*)+0x30>

00005a28 <ExFatFile::truncate()>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::truncate() {
    5a28:	push	{r4, r5, r6, r7, lr}
    5a2a:	ldrb.w	r3, [r0, #51]	; 0x33
  uint32_t toFree;
  // error if not a normal file or read-only
  if (!isWritable()) {
    5a2e:	and.w	r2, r3, #2

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::truncate() {
    5a32:	sub	sp, #12
  uint32_t toFree;
  // error if not a normal file or read-only
  if (!isWritable()) {
    5a34:	cmp	r2, #0
    5a36:	beq.n	5ae2 <ExFatFile::truncate()+0xba>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_firstCluster == 0) {
    5a38:	ldr	r1, [r0, #28]
    5a3a:	mov	r4, r0
    5a3c:	cbz	r1, 5aa0 <ExFatFile::truncate()+0x78>
      return true;
  }
  if (isContiguous()) {
    5a3e:	and.w	r3, r3, #64	; 0x40
    5a42:	and.w	r5, r3, #255	; 0xff
    5a46:	cbz	r3, 5aa8 <ExFatFile::truncate()+0x80>
    5a48:	ldr	r0, [r0, #32]
    uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    if (m_curCluster) {
    5a4a:	ldr	r5, [r4, #24]
  }
  if (m_firstCluster == 0) {
      return true;
  }
  if (isContiguous()) {
    uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    5a4c:	ldrb.w	r3, [r0, #1085]	; 0x43d
    5a50:	ldrd	r6, r7, [r4, #8]
    5a54:	adds	r3, #9
    5a56:	uxtb	r3, r3
    5a58:	adds.w	r6, r6, #4294967295
    5a5c:	rsb	lr, r3, #32
    5a60:	adc.w	r7, r7, #4294967295
    5a64:	lsr.w	r2, r6, r3
    5a68:	lsl.w	lr, r7, lr
    5a6c:	subs	r3, #32
    5a6e:	orr.w	r2, r2, lr
    5a72:	lsr.w	r3, r7, r3
    5a76:	orrs	r2, r3
    5a78:	adds	r2, #1
    if (m_curCluster) {
    5a7a:	cmp	r5, #0
    5a7c:	beq.n	5af4 <ExFatFile::truncate()+0xcc>
      toFree = m_curCluster + 1;
      nc -= 1 + m_curCluster - m_firstCluster;
    5a7e:	subs	r1, #1
    5a80:	subs	r1, r1, r5
      return true;
  }
  if (isContiguous()) {
    uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    if (m_curCluster) {
      toFree = m_curCluster + 1;
    5a82:	adds	r5, #1
      nc -= 1 + m_curCluster - m_firstCluster;
    5a84:	add	r2, r1
      return true;
  }
  if (isContiguous()) {
    uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    if (m_curCluster) {
      toFree = m_curCluster + 1;
    5a86:	str	r5, [sp, #4]
      nc -= 1 + m_curCluster - m_firstCluster;
    } else {
      toFree = m_firstCluster;
      m_firstCluster = 0;
    }
    if (nc && !m_vol->bitmapModify(toFree, nc, 0)) {
    5a88:	cbz	r2, 5abc <ExFatFile::truncate()+0x94>
    5a8a:	movs	r3, #0
    5a8c:	ldr	r1, [sp, #4]
    5a8e:	bl	4e78 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    5a92:	mov	r5, r0
    5a94:	cbnz	r0, 5abc <ExFatFile::truncate()+0x94>
      DBG_FAIL_MACRO;
    5a96:	movw	r0, #599	; 0x257
    5a9a:	bl	5238 <dbgPrint(unsigned short)>
      goto fail;
    5a9e:	b.n	5aa2 <ExFatFile::truncate()+0x7a>
  if (!isWritable()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_firstCluster == 0) {
      return true;
    5aa0:	movs	r5, #1
  m_flags |= FILE_FLAG_DIR_DIRTY;
  return sync();

 fail:
  return false;
}
    5aa2:	mov	r0, r5
    5aa4:	add	sp, #12
    5aa6:	pop	{r4, r5, r6, r7, pc}
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else {
    // need to free chain
    if (m_curCluster) {
    5aa8:	ldr	r3, [r0, #24]
    5aaa:	cbnz	r3, 5afa <ExFatFile::truncate()+0xd2>
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
    } else {
      toFree = m_firstCluster;
    5aac:	str	r1, [sp, #4]
      m_firstCluster = 0;
    5aae:	str	r3, [r0, #28]
    }
    if (toFree) {
      if (!m_vol->freeChain(toFree)) {
    5ab0:	ldr	r0, [r4, #32]
    5ab2:	bl	5058 <ExFatPartition::freeChain(unsigned long)>
    5ab6:	mov	r5, r0
    5ab8:	cmp	r0, #0
    5aba:	beq.n	5b34 <ExFatFile::truncate()+0x10c>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
  }
  m_dataLength = m_curPosition;
    5abc:	ldrd	r0, r1, [r4]
  m_validLength = m_curPosition;
  m_flags |= FILE_FLAG_DIR_DIRTY;
    5ac0:	ldrb.w	r3, [r4, #51]	; 0x33
    5ac4:	orn	r3, r3, #127	; 0x7f
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
  }
  m_dataLength = m_curPosition;
    5ac8:	strd	r0, r1, [r4, #8]
  m_validLength = m_curPosition;
    5acc:	strd	r0, r1, [r4, #16]
  m_flags |= FILE_FLAG_DIR_DIRTY;
    5ad0:	strb.w	r3, [r4, #51]	; 0x33
  return sync();
    5ad4:	mov	r0, r4
    5ad6:	bl	5658 <ExFatFile::sync()>
    5ada:	mov	r5, r0

 fail:
  return false;
}
    5adc:	mov	r0, r5
    5ade:	add	sp, #12
    5ae0:	pop	{r4, r5, r6, r7, pc}
//------------------------------------------------------------------------------
bool ExFatFile::truncate() {
  uint32_t toFree;
  // error if not a normal file or read-only
  if (!isWritable()) {
    DBG_FAIL_MACRO;
    5ae2:	movw	r0, #583	; 0x247
    5ae6:	and.w	r5, r2, #255	; 0xff
    5aea:	bl	5238 <dbgPrint(unsigned short)>
  m_flags |= FILE_FLAG_DIR_DIRTY;
  return sync();

 fail:
  return false;
}
    5aee:	mov	r0, r5
    5af0:	add	sp, #12
    5af2:	pop	{r4, r5, r6, r7, pc}
    uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    if (m_curCluster) {
      toFree = m_curCluster + 1;
      nc -= 1 + m_curCluster - m_firstCluster;
    } else {
      toFree = m_firstCluster;
    5af4:	str	r1, [sp, #4]
      m_firstCluster = 0;
    5af6:	str	r5, [r4, #28]
    5af8:	b.n	5a88 <ExFatFile::truncate()+0x60>
      goto fail;
    }
  } else {
    // need to free chain
    if (m_curCluster) {
      toFree = 0;
    5afa:	add	r2, sp, #8
      int8_t fg = m_vol->fatGet(m_curCluster, &toFree);
    5afc:	mov	r1, r3
      goto fail;
    }
  } else {
    // need to free chain
    if (m_curCluster) {
      toFree = 0;
    5afe:	str.w	r5, [r2, #-4]!
      int8_t fg = m_vol->fatGet(m_curCluster, &toFree);
    5b02:	ldr	r0, [r0, #32]
    5b04:	bl	4f74 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
    5b08:	sxtb	r0, r0
      if (fg < 0) {
    5b0a:	cmp	r0, #0
    5b0c:	blt.n	5b3e <ExFatFile::truncate()+0x116>
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (fg) {
    5b0e:	bne.n	5b18 <ExFatFile::truncate()+0xf0>
      }
    } else {
      toFree = m_firstCluster;
      m_firstCluster = 0;
    }
    if (toFree) {
    5b10:	ldr	r1, [sp, #4]
    5b12:	cmp	r1, #0
    5b14:	beq.n	5abc <ExFatFile::truncate()+0x94>
    5b16:	b.n	5ab0 <ExFatFile::truncate()+0x88>
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (fg) {
        // current cluster is end of chain
        if (!m_vol->fatPut(m_curCluster, EXFAT_EOC)) {
    5b18:	mov.w	r2, #4294967295
    5b1c:	ldr	r1, [r4, #24]
    5b1e:	ldr	r0, [r4, #32]
    5b20:	bl	5008 <ExFatPartition::fatPut(unsigned long, unsigned long)>
    5b24:	mov	r5, r0
    5b26:	cmp	r0, #0
    5b28:	bne.n	5b10 <ExFatFile::truncate()+0xe8>
          DBG_FAIL_MACRO;
    5b2a:	movw	r0, #614	; 0x266
    5b2e:	bl	5238 <dbgPrint(unsigned short)>
          goto fail;
    5b32:	b.n	5aa2 <ExFatFile::truncate()+0x7a>
      toFree = m_firstCluster;
      m_firstCluster = 0;
    }
    if (toFree) {
      if (!m_vol->freeChain(toFree)) {
        DBG_FAIL_MACRO;
    5b34:	mov.w	r0, #624	; 0x270
    5b38:	bl	5238 <dbgPrint(unsigned short)>
        goto fail;
    5b3c:	b.n	5aa2 <ExFatFile::truncate()+0x7a>
    // need to free chain
    if (m_curCluster) {
      toFree = 0;
      int8_t fg = m_vol->fatGet(m_curCluster, &toFree);
      if (fg < 0) {
        DBG_FAIL_MACRO;
    5b3e:	mov.w	r0, #608	; 0x260
    5b42:	bl	5238 <dbgPrint(unsigned short)>
        goto fail;
    5b46:	b.n	5aa2 <ExFatFile::truncate()+0x7a>

00005b48 <ExFatFile::write(void const*, unsigned int)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
size_t ExFatFile::write(const void* buf, size_t nbyte) {
    5b48:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5b4c:	ldrb.w	r3, [r0, #51]	; 0x33
    5b50:	sub	sp, #20

  // number of bytes left to write  -  must be before goto statements
  size_t toWrite = nbyte;
  size_t n;
  // error if not an open file or is read-only
  if (!isWritable()) {
    5b52:	lsls	r4, r3, #30

 fail:
  return false;
}
//------------------------------------------------------------------------------
size_t ExFatFile::write(const void* buf, size_t nbyte) {
    5b54:	mov	r6, r0
    5b56:	str	r2, [sp, #4]

  // number of bytes left to write  -  must be before goto statements
  size_t toWrite = nbyte;
  size_t n;
  // error if not an open file or is read-only
  if (!isWritable()) {
    5b58:	bpl.w	5da2 <ExFatFile::write(void const*, unsigned int)+0x25a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & FILE_FLAG_APPEND)) {
    5b5c:	lsls	r2, r3, #28
    5b5e:	mov	sl, r1
    5b60:	bmi.w	5dd0 <ExFatFile::write(void const*, unsigned int)+0x288>
    if (!seekSet(m_validLength)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  while (toWrite) {
    5b64:	ldr	r3, [sp, #4]
    5b66:	cmp	r3, #0
    5b68:	beq.w	5e1e <ExFatFile::write(void const*, unsigned int)+0x2d6>
    5b6c:	mov	r1, r6
    5b6e:	ldrd	r2, r3, [r1], #24
    5b72:	ldr.w	r8, [sp, #4]
    5b76:	str	r1, [sp, #12]
    5b78:	mov	fp, r2
    clusterOffset = m_curPosition & m_vol->clusterMask();
    5b7a:	ldr	r0, [r6, #32]
    sectorOffset = clusterOffset & m_vol->sectorMask();
    if (clusterOffset == 0) {
      // start of new cluster
      if (m_curCluster != 0) {
    5b7c:	ldr	r5, [r6, #24]
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  while (toWrite) {
    clusterOffset = m_curPosition & m_vol->clusterMask();
    5b7e:	ldr.w	r4, [r0, #1072]	; 0x430
    5b82:	mov	r3, fp
    5b84:	ands	r4, r3
    sectorOffset = clusterOffset & m_vol->sectorMask();
    5b86:	ubfx	r9, r4, #0, #9
    if (clusterOffset == 0) {
    5b8a:	cbnz	r4, 5be2 <ExFatFile::write(void const*, unsigned int)+0x9a>
      // start of new cluster
      if (m_curCluster != 0) {
    5b8c:	cmp	r5, #0
    5b8e:	beq.w	5d34 <ExFatFile::write(void const*, unsigned int)+0x1ec>
        int fg;

        if (isContiguous()) {
    5b92:	ldrb.w	r3, [r6, #51]	; 0x33
    5b96:	lsls	r3, r3, #25
    5b98:	bpl.w	5d66 <ExFatFile::write(void const*, unsigned int)+0x21e>
          uint32_t lc = m_firstCluster;
          lc += (m_dataLength - 1) >> m_vol->bytesPerClusterShift();
          if (m_curCluster < lc) {
    5b9c:	ldrd	r2, r3, [r6, #8]
    5ba0:	ldrb.w	r7, [r0, #1085]	; 0x43d
    5ba4:	adds	r7, #9
    5ba6:	uxtb	r7, r7
    5ba8:	adds.w	r2, r2, #4294967295
    5bac:	adc.w	r3, r3, #4294967295
    5bb0:	rsb	lr, r7, #32
    5bb4:	lsl.w	lr, r3, lr
    5bb8:	lsr.w	r1, r2, r7
    5bbc:	subs	r7, #32
    5bbe:	lsr.w	r7, r3, r7
    5bc2:	orr.w	r1, r1, lr
    5bc6:	ldr	r3, [r6, #28]
    5bc8:	orrs	r1, r7
    5bca:	add	r3, r1
    5bcc:	cmp	r5, r3
    5bce:	bcc.w	5d60 <ExFatFile::write(void const*, unsigned int)+0x218>
            goto fail;
          }
        }
        if (fg == 0) {
          // add cluster if at end of chain
          if (!addCluster()) {
    5bd2:	mov	r0, r6
    5bd4:	bl	5274 <ExFatFile::addCluster()>
    5bd8:	cmp	r0, #0
    5bda:	beq.w	5e0a <ExFatFile::write(void const*, unsigned int)+0x2c2>
    5bde:	ldr	r0, [r6, #32]
    5be0:	ldr	r5, [r6, #24]
        }
      }
    }
    // sector for data write
    sector = m_vol->clusterStartSector(m_curCluster) +
             (clusterOffset >> m_vol->bytesPerSectorShift());
    5be2:	ldr.w	r7, [r0, #1060]	; 0x424
  bool dataCacheSync() {return m_dataCache.sync();}
  //----------------------------------------------------------------------------
  uint32_t clusterMask() {return m_clusterMask;}
  uint32_t clusterStartSector(uint32_t cluster) {
    return m_clusterHeapStartSector +
           ((cluster - 2) << m_sectorsPerClusterShift);
    5be6:	ldrb.w	lr, [r0, #1085]	; 0x43d
    5bea:	lsrs	r4, r4, #9
    5bec:	subs	r5, #2
    5bee:	adds	r1, r4, r7
    5bf0:	lsl.w	r5, r5, lr
    5bf4:	add	r1, r5

    if (sectorOffset != 0 || toWrite < m_vol->bytesPerSector()) {
    5bf6:	cmp.w	r9, #0
    5bfa:	bne.w	5d10 <ExFatFile::write(void const*, unsigned int)+0x1c8>
    5bfe:	cmp.w	r8, #512	; 0x200
    5c02:	bcs.n	5cba <ExFatFile::write(void const*, unsigned int)+0x172>
      // lesser of space and amount to write
      if (n > toWrite) {
        n = toWrite;
      }

      if (sectorOffset == 0 && m_curPosition >= m_validLength) {
    5c04:	ldrd	r2, r3, [r6, #16]
    5c08:	ldrd	r4, r5, [r6]
    5c0c:	cmp.w	r8, #512	; 0x200
    5c10:	mov	r7, r8
    5c12:	it	cs
    5c14:	movcs.w	r7, #512	; 0x200
        // start of new sector don't need to read into cache
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
    5c18:	cmp	r5, r3
    5c1a:	it	eq
    5c1c:	cmpeq	r4, r2
    5c1e:	ite	cc
    5c20:	movcc	r2, #1
    5c22:	movcs	r2, #3
#endif  // USE_EXFAT_BITMAP_CACHE
  }
  void dataCacheDirty() {m_dataCache.dirty();}
  void dataCacheInvalidate() {m_dataCache.invalidate();}
  uint8_t* dataCacheGet(uint32_t sector, uint8_t option) {
    return m_dataCache.get(sector, option);
    5c24:	add.w	r0, r0, #524	; 0x20c
    5c28:	bl	4c18 <FsCache::get(unsigned long, unsigned char)>
      } else {
        // rewrite part of sector
        cacheOption = FsCache::CACHE_FOR_WRITE;
      }
      cache = m_vol->dataCacheGet(sector, cacheOption);
      if (!cache) {
    5c2c:	cmp	r0, #0
    5c2e:	beq.n	5d2a <ExFatFile::write(void const*, unsigned int)+0x1e2>
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = cache + sectorOffset;
      memcpy(dst, src, n);
    5c30:	add	r0, r9
    5c32:	mov	r2, r7
    5c34:	mov	r1, sl
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    5c36:	add	r9, r7
      if (!cache) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = cache + sectorOffset;
      memcpy(dst, src, n);
    5c38:	bl	9aa8 <memcpy>
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    5c3c:	cmp.w	r9, #512	; 0x200
    5c40:	beq.w	5d88 <ExFatFile::write(void const*, unsigned int)+0x240>
    5c44:	mov	r0, r7
    5c46:	movs	r1, #0
      if (!m_vol->writeSector(sector, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    5c48:	ldrd	r2, r3, [r6]
    src += n;
    toWrite -= n;
    if (m_curPosition > m_validLength) {
    5c4c:	ldrd	r4, r5, [r6, #16]
      if (!m_vol->writeSector(sector, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    5c50:	adds.w	fp, r2, r0
    5c54:	adc.w	ip, r3, r1
    src += n;
    toWrite -= n;
    if (m_curPosition > m_validLength) {
    5c58:	cmp	r5, ip
      if (!m_vol->writeSector(sector, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    5c5a:	mov	r2, fp
    5c5c:	mov	r3, ip
    src += n;
    toWrite -= n;
    if (m_curPosition > m_validLength) {
    5c5e:	it	eq
    5c60:	cmpeq	r4, fp
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    src += n;
    5c62:	add	sl, r7
    toWrite -= n;
    5c64:	rsb	r8, r7, r8
      if (!m_vol->writeSector(sector, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    5c68:	strd	r2, r3, [r6]
    src += n;
    toWrite -= n;
    if (m_curPosition > m_validLength) {
    5c6c:	bcs.n	5c82 <ExFatFile::write(void const*, unsigned int)+0x13a>
      m_flags |= FILE_FLAG_DIR_DIRTY;
    5c6e:	ldrb.w	r1, [r6, #51]	; 0x33
      m_validLength = m_curPosition;
    5c72:	mov	r4, ip
    5c74:	mov	r3, fp
    5c76:	strd	r3, r4, [r6, #16]
    }
    m_curPosition += n;
    src += n;
    toWrite -= n;
    if (m_curPosition > m_validLength) {
      m_flags |= FILE_FLAG_DIR_DIRTY;
    5c7a:	orn	r1, r1, #127	; 0x7f
    5c7e:	strb.w	r1, [r6, #51]	; 0x33
    if (!seekSet(m_validLength)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  while (toWrite) {
    5c82:	cmp.w	r8, #0
    5c86:	bne.w	5b7a <ExFatFile::write(void const*, unsigned int)+0x32>
    5c8a:	mov	r2, fp
    5c8c:	mov	r3, ip
      m_flags |= FILE_FLAG_DIR_DIRTY;
      m_validLength = m_curPosition;
    }
  }

  if (m_curPosition > m_dataLength) {
    5c8e:	ldrd	r0, r1, [r6, #8]
    5c92:	cmp	r1, r3
    5c94:	it	eq
    5c96:	cmpeq	r0, r2
    5c98:	bcc.w	5de8 <ExFatFile::write(void const*, unsigned int)+0x2a0>
    m_dataLength = m_curPosition;
    // update fileSize and insure sync will update dir entr
    m_flags |= FILE_FLAG_DIR_DIRTY;
  } else if (FsDateTime::callback) {
    5c9c:	ldr	r3, [pc, #388]	; (5e24 <ExFatFile::write(void const*, unsigned int)+0x2dc>)
    5c9e:	ldr	r3, [r3, #0]
    5ca0:	cmp	r3, #0
    5ca2:	beq.w	5e06 <ExFatFile::write(void const*, unsigned int)+0x2be>
    // insure sync will update modified date and time
    m_flags |= FILE_FLAG_DIR_DIRTY;
    5ca6:	ldrb.w	r3, [r6, #51]	; 0x33
    5caa:	ldr	r0, [sp, #4]
    5cac:	orn	r3, r3, #127	; 0x7f
    5cb0:	strb.w	r3, [r6, #51]	; 0x33

fail:
  // return for write error
  m_error |= WRITE_ERROR;
  return -1;
}
    5cb4:	add	sp, #20
    5cb6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
#if USE_MULTI_SECTOR_IO
    } else if (toWrite >= 2*m_vol->bytesPerSector()) {
    5cba:	cmp.w	r8, #1024	; 0x400
    5cbe:	bcc.n	5d3c <ExFatFile::write(void const*, unsigned int)+0x1f4>
      // use multiple sector write command
      uint32_t ns = toWrite >> m_vol->bytesPerSectorShift();
      // Limit writes to current cluster.
      uint32_t maxNs = m_vol->sectorsPerCluster()
                       - (clusterOffset >> m_vol->bytesPerSectorShift());
    5cc0:	movs	r3, #1
    5cc2:	lsl.w	lr, r3, lr
    5cc6:	rsb	lr, r4, lr
    5cca:	ldr.w	r3, [r0, #532]	; 0x214
        }
      }
#if USE_MULTI_SECTOR_IO
    } else if (toWrite >= 2*m_vol->bytesPerSector()) {
      // use multiple sector write command
      uint32_t ns = toWrite >> m_vol->bytesPerSectorShift();
    5cce:	mov.w	r4, r8, lsr #9
    5cd2:	cmp	r4, lr
    5cd4:	it	cs
    5cd6:	movcs	r4, lr
        ns = maxNs;
      }
      n = ns << m_vol->bytesPerSectorShift();
      // Check for cache sector in write range.
      if (sector <= m_vol->dataCacheSector()
          && m_vol->dataCacheSector() < (sector + ns)) {
    5cd8:	cmp	r1, r3
      uint32_t maxNs = m_vol->sectorsPerCluster()
                       - (clusterOffset >> m_vol->bytesPerSectorShift());
      if (ns > maxNs) {
        ns = maxNs;
      }
      n = ns << m_vol->bytesPerSectorShift();
    5cda:	mov.w	r7, r4, lsl #9
      // Check for cache sector in write range.
      if (sector <= m_vol->dataCacheSector()
          && m_vol->dataCacheSector() < (sector + ns)) {
    5cde:	bhi.n	5cf4 <ExFatFile::write(void const*, unsigned int)+0x1ac>
    5ce0:	adds	r2, r4, r1
    5ce2:	cmp	r2, r3
    5ce4:	bls.n	5cf4 <ExFatFile::write(void const*, unsigned int)+0x1ac>
#else  // USE_EXFAT_BITMAP_CACHE
    return m_dataCache.sync() && syncDevice();
#endif  // USE_EXFAT_BITMAP_CACHE
  }
  void dataCacheDirty() {m_dataCache.dirty();}
  void dataCacheInvalidate() {m_dataCache.invalidate();}
    5ce6:	add.w	r0, r0, #524	; 0x20c
    5cea:	str	r1, [sp, #8]
    5cec:	bl	4c0c <FsCache::invalidate()>
    5cf0:	ldr	r0, [r6, #32]
    5cf2:	ldr	r1, [sp, #8]
    5cf4:	ldr.w	r0, [r0, #1080]	; 0x438
#if USE_MULTI_SECTOR_IO
  bool readSectors(uint32_t sector, uint8_t* dst, size_t count) {
    return m_blockDev->readSectors(sector, dst, count);
  }
  bool writeSectors(uint32_t sector, const uint8_t* src, size_t count) {
    return m_blockDev->writeSectors(sector, src, count);
    5cf8:	ldr	r5, [r0, #0]
    5cfa:	mov	r3, r4
    5cfc:	mov	r2, sl
    5cfe:	ldr	r4, [r5, #28]
    5d00:	blx	r4
        // Invalidate cache if cache sector is in the range.
        m_vol->dataCacheInvalidate();
      }
      if (!m_vol->writeSectors(sector, src, ns)) {
    5d02:	cmp	r0, #0
    5d04:	bne.n	5c44 <ExFatFile::write(void const*, unsigned int)+0xfc>
        DBG_FAIL_MACRO;
    5d06:	movw	r0, #758	; 0x2f6
    5d0a:	bl	5238 <dbgPrint(unsigned short)>
        goto fail;
    5d0e:	b.n	5daa <ExFatFile::write(void const*, unsigned int)+0x262>
             (clusterOffset >> m_vol->bytesPerSectorShift());

    if (sectorOffset != 0 || toWrite < m_vol->bytesPerSector()) {
      // partial sector - must use cache
      // max space in sector
      n = m_vol->bytesPerSector() - sectorOffset;
    5d10:	rsb	r7, r9, #512	; 0x200
    5d14:	cmp	r7, r8
      if (sectorOffset == 0 && m_curPosition >= m_validLength) {
        // start of new sector don't need to read into cache
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
      } else {
        // rewrite part of sector
        cacheOption = FsCache::CACHE_FOR_WRITE;
    5d16:	mov.w	r2, #1
#endif  // USE_EXFAT_BITMAP_CACHE
  }
  void dataCacheDirty() {m_dataCache.dirty();}
  void dataCacheInvalidate() {m_dataCache.invalidate();}
  uint8_t* dataCacheGet(uint32_t sector, uint8_t option) {
    return m_dataCache.get(sector, option);
    5d1a:	add.w	r0, r0, #524	; 0x20c
    5d1e:	it	cs
    5d20:	movcs	r7, r8
    5d22:	bl	4c18 <FsCache::get(unsigned long, unsigned char)>
      }
      cache = m_vol->dataCacheGet(sector, cacheOption);
      if (!cache) {
    5d26:	cmp	r0, #0
    5d28:	bne.n	5c30 <ExFatFile::write(void const*, unsigned int)+0xe8>
        DBG_FAIL_MACRO;
    5d2a:	mov.w	r0, #728	; 0x2d8
    5d2e:	bl	5238 <dbgPrint(unsigned short)>
        goto fail;
    5d32:	b.n	5daa <ExFatFile::write(void const*, unsigned int)+0x262>
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
      } else {
        if (m_firstCluster == 0) {
    5d34:	ldr	r5, [r6, #28]
    5d36:	cbz	r5, 5d76 <ExFatFile::write(void const*, unsigned int)+0x22e>
            DBG_FAIL_MACRO;
            goto fail;
          }
          m_firstCluster = m_curCluster;
        } else {
          m_curCluster = m_firstCluster;
    5d38:	str	r5, [r6, #24]
    5d3a:	b.n	5be2 <ExFatFile::write(void const*, unsigned int)+0x9a>
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // use single sector write command
      n = m_vol->bytesPerSector();
      if (m_vol->dataCacheSector() == sector) {
    5d3c:	ldr.w	r3, [r0, #532]	; 0x214
    5d40:	cmp	r1, r3
    5d42:	beq.n	5dc0 <ExFatFile::write(void const*, unsigned int)+0x278>
    5d44:	ldr.w	r0, [r0, #1080]	; 0x438
  }
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
  }
  bool writeSector(uint32_t sector, const uint8_t* src) {
    return m_blockDev->writeSector(sector, src);
    5d48:	ldr	r3, [r0, #0]
    5d4a:	mov	r2, sl
    5d4c:	ldr	r3, [r3, #24]
    5d4e:	blx	r3
        m_vol->dataCacheInvalidate();
      }
      if (!m_vol->writeSector(sector, src)) {
    5d50:	cmp	r0, #0
    5d52:	beq.n	5dfc <ExFatFile::write(void const*, unsigned int)+0x2b4>
    5d54:	mov.w	r0, #512	; 0x200
    5d58:	movs	r1, #0
        goto fail;
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // use single sector write command
      n = m_vol->bytesPerSector();
    5d5a:	mov.w	r7, #512	; 0x200
    5d5e:	b.n	5c48 <ExFatFile::write(void const*, unsigned int)+0x100>

        if (isContiguous()) {
          uint32_t lc = m_firstCluster;
          lc += (m_dataLength - 1) >> m_vol->bytesPerClusterShift();
          if (m_curCluster < lc) {
            m_curCluster++;
    5d60:	adds	r5, #1
    5d62:	str	r5, [r6, #24]
    5d64:	b.n	5be2 <ExFatFile::write(void const*, unsigned int)+0x9a>
            fg = 1;
          } else {
            fg = 0;
          }
        } else {
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    5d66:	mov	r1, r5
    5d68:	ldr	r2, [sp, #12]
    5d6a:	bl	4f74 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
          if (fg < 0) {
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
        if (fg == 0) {
    5d6e:	cmp	r0, #0
    5d70:	bne.w	5bde <ExFatFile::write(void const*, unsigned int)+0x96>
    5d74:	b.n	5bd2 <ExFatFile::write(void const*, unsigned int)+0x8a>
          }
        }
      } else {
        if (m_firstCluster == 0) {
          // allocate first cluster of file
          if (!addCluster()) {
    5d76:	mov	r0, r6
    5d78:	bl	5274 <ExFatFile::addCluster()>
    5d7c:	cmp	r0, #0
    5d7e:	beq.n	5e14 <ExFatFile::write(void const*, unsigned int)+0x2cc>
            DBG_FAIL_MACRO;
            goto fail;
          }
          m_firstCluster = m_curCluster;
    5d80:	ldr	r5, [r6, #24]
    5d82:	str	r5, [r6, #28]
    5d84:	ldr	r0, [r6, #32]
    5d86:	b.n	5be2 <ExFatFile::write(void const*, unsigned int)+0x9a>
  void dataCacheInvalidate() {m_dataCache.invalidate();}
  uint8_t* dataCacheGet(uint32_t sector, uint8_t option) {
    return m_dataCache.get(sector, option);
  }
  uint32_t dataCacheSector() {return m_dataCache.sector();}
  bool dataCacheSync() {return m_dataCache.sync();}
    5d88:	ldr	r0, [r6, #32]
    5d8a:	add.w	r0, r0, #524	; 0x20c
    5d8e:	bl	4ca4 <FsCache::sync()>
      }
      uint8_t* dst = cache + sectorOffset;
      memcpy(dst, src, n);
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
        // Force write if sector is full - improves large writes.
        if (!m_vol->dataCacheSync()) {
    5d92:	cmp	r0, #0
    5d94:	bne.w	5c44 <ExFatFile::write(void const*, unsigned int)+0xfc>
          DBG_FAIL_MACRO;
    5d98:	mov.w	r0, #736	; 0x2e0
    5d9c:	bl	5238 <dbgPrint(unsigned short)>
          goto fail;
    5da0:	b.n	5daa <ExFatFile::write(void const*, unsigned int)+0x262>
  // number of bytes left to write  -  must be before goto statements
  size_t toWrite = nbyte;
  size_t n;
  // error if not an open file or is read-only
  if (!isWritable()) {
    DBG_FAIL_MACRO;
    5da2:	mov.w	r0, #652	; 0x28c
    5da6:	bl	5238 <dbgPrint(unsigned short)>
  }
  return nbyte;

fail:
  // return for write error
  m_error |= WRITE_ERROR;
    5daa:	ldrb.w	r3, [r6, #50]	; 0x32
    5dae:	orr.w	r3, r3, #1
    5db2:	strb.w	r3, [r6, #50]	; 0x32
  return -1;
    5db6:	mov.w	r0, #4294967295
}
    5dba:	add	sp, #20
    5dbc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
#else  // USE_EXFAT_BITMAP_CACHE
    return m_dataCache.sync() && syncDevice();
#endif  // USE_EXFAT_BITMAP_CACHE
  }
  void dataCacheDirty() {m_dataCache.dirty();}
  void dataCacheInvalidate() {m_dataCache.invalidate();}
    5dc0:	add.w	r0, r0, #524	; 0x20c
    5dc4:	str	r1, [sp, #8]
    5dc6:	bl	4c0c <FsCache::invalidate()>
    5dca:	ldr	r0, [r6, #32]
    5dcc:	ldr	r1, [sp, #8]
    5dce:	b.n	5d44 <ExFatFile::write(void const*, unsigned int)+0x1fc>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & FILE_FLAG_APPEND)) {
    if (!seekSet(m_validLength)) {
    5dd0:	ldrd	r2, r3, [r0, #16]
    5dd4:	bl	44f4 <ExFatFile::seekSet(unsigned long long)>
    5dd8:	cmp	r0, #0
    5dda:	bne.w	5b64 <ExFatFile::write(void const*, unsigned int)+0x1c>
      DBG_FAIL_MACRO;
    5dde:	movw	r0, #658	; 0x292
    5de2:	bl	5238 <dbgPrint(unsigned short)>
      goto fail;
    5de6:	b.n	5daa <ExFatFile::write(void const*, unsigned int)+0x262>
  }

  if (m_curPosition > m_dataLength) {
    m_dataLength = m_curPosition;
    // update fileSize and insure sync will update dir entr
    m_flags |= FILE_FLAG_DIR_DIRTY;
    5de8:	ldrb.w	r1, [r6, #51]	; 0x33
    5dec:	ldr	r0, [sp, #4]
    5dee:	orn	r1, r1, #127	; 0x7f
      m_validLength = m_curPosition;
    }
  }

  if (m_curPosition > m_dataLength) {
    m_dataLength = m_curPosition;
    5df2:	strd	r2, r3, [r6, #8]
    // update fileSize and insure sync will update dir entr
    m_flags |= FILE_FLAG_DIR_DIRTY;
    5df6:	strb.w	r1, [r6, #51]	; 0x33
    5dfa:	b.n	5dba <ExFatFile::write(void const*, unsigned int)+0x272>
      n = m_vol->bytesPerSector();
      if (m_vol->dataCacheSector() == sector) {
        m_vol->dataCacheInvalidate();
      }
      if (!m_vol->writeSector(sector, src)) {
        DBG_FAIL_MACRO;
    5dfc:	movw	r0, #769	; 0x301
    5e00:	bl	5238 <dbgPrint(unsigned short)>
        goto fail;
    5e04:	b.n	5daa <ExFatFile::write(void const*, unsigned int)+0x262>
    5e06:	ldr	r0, [sp, #4]
    5e08:	b.n	5dba <ExFatFile::write(void const*, unsigned int)+0x272>
          }
        }
        if (fg == 0) {
          // add cluster if at end of chain
          if (!addCluster()) {
            DBG_FAIL_MACRO;
    5e0a:	movw	r0, #689	; 0x2b1
    5e0e:	bl	5238 <dbgPrint(unsigned short)>
            goto fail;
    5e12:	b.n	5daa <ExFatFile::write(void const*, unsigned int)+0x262>
        }
      } else {
        if (m_firstCluster == 0) {
          // allocate first cluster of file
          if (!addCluster()) {
            DBG_FAIL_MACRO;
    5e14:	movw	r0, #697	; 0x2b9
    5e18:	bl	5238 <dbgPrint(unsigned short)>
            goto fail;
    5e1c:	b.n	5daa <ExFatFile::write(void const*, unsigned int)+0x262>
    5e1e:	ldrd	r2, r3, [r6]
    5e22:	b.n	5c8e <ExFatFile::write(void const*, unsigned int)+0x146>
    5e24:	.word	0x1fff8724

00005e28 <dbgPrint(unsigned short)>:
#if USE_DBG_MACROS
#include "Arduino.h"
#ifndef DBG_FILE
#error DBG_FILE not defined
#endif  // DBG_FILE
static void dbgPrint(uint16_t line) {
    5e28:	push	{r3, r4, r5, lr}
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    5e2a:	movs	r1, #10
    5e2c:	mov	r5, r0
    5e2e:	ldr	r0, [pc, #40]	; (5e58 <dbgPrint(unsigned short)+0x30>)
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    5e30:	ldr	r4, [pc, #40]	; (5e5c <dbgPrint(unsigned short)+0x34>)
    5e32:	bl	9ca8 <usb_serial_write>
    5e36:	movs	r1, #11
    5e38:	ldr	r0, [pc, #36]	; (5e60 <dbgPrint(unsigned short)+0x38>)
    5e3a:	bl	9ca8 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    5e3e:	movs	r0, #46	; 0x2e
    5e40:	bl	9db0 <usb_serial_putchar>
    5e44:	mov	r1, r5
    5e46:	mov	r0, r4
    5e48:	bl	b31c <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    5e4c:	mov	r0, r4
  Serial.print(F("DBG_FAIL: "));
  Serial.print(F(DBG_FILE));
  Serial.write('.');
  Serial.println(line);
}
    5e4e:	ldmia.w	sp!, {r3, r4, r5, lr}
    5e52:	b.w	b250 <Print::println()>
    5e56:	nop
    5e58:	.word	0x000105c8
    5e5c:	.word	0x1fff09a4
    5e60:	.word	0x00010614

00005e64 <FatFile::addCluster()>:
#include "FatVolume.h"
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
#if USE_FAT_FILE_FLAG_CONTIGUOUS
  uint32_t cc = m_curCluster;
    5e64:	mov	r2, r0
#include "../common/DebugMacros.h"
#include "FatFile.h"
#include "FatVolume.h"
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
    5e66:	push	{r4, r5, r6, lr}
#if USE_FAT_FILE_FLAG_CONTIGUOUS
  uint32_t cc = m_curCluster;
    5e68:	ldr.w	r5, [r2, #16]!
#include "../common/DebugMacros.h"
#include "FatFile.h"
#include "FatVolume.h"
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
    5e6c:	mov	r4, r0
#if USE_FAT_FILE_FLAG_CONTIGUOUS
  uint32_t cc = m_curCluster;
  if (!m_vol->allocateCluster(m_curCluster, &m_curCluster)) {
    5e6e:	mov	r1, r5
    5e70:	ldr	r0, [r0, #8]
    5e72:	bl	7094 <FatPartition::allocateCluster(unsigned long, unsigned long*)>
    5e76:	mov	r6, r0
    5e78:	cbz	r0, 5e9c <FatFile::addCluster()+0x38>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (cc == 0) {
    5e7a:	cbz	r5, 5e94 <FatFile::addCluster()+0x30>
    m_flags |= FILE_FLAG_CONTIGUOUS;
  } else if (m_curCluster != (cc + 1)) {
    5e7c:	ldr	r3, [r4, #16]
    5e7e:	adds	r5, #1
    5e80:	cmp	r3, r5
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
    5e82:	ldrb	r3, [r4, #2]
    5e84:	it	ne
    5e86:	andne.w	r3, r3, #191	; 0xbf
  }
  m_flags |= FILE_FLAG_DIR_DIRTY;
    5e8a:	orn	r3, r3, #127	; 0x7f
    5e8e:	strb	r3, [r4, #2]
  return false;
#else  // USE_FAT_FILE_FLAG_CONTIGUOUS
  m_flags |= FILE_FLAG_DIR_DIRTY;
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
}
    5e90:	mov	r0, r6
    5e92:	pop	{r4, r5, r6, pc}
  if (!m_vol->allocateCluster(m_curCluster, &m_curCluster)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (cc == 0) {
    m_flags |= FILE_FLAG_CONTIGUOUS;
    5e94:	ldrb	r3, [r4, #2]
    5e96:	orr.w	r3, r3, #64	; 0x40
    5e9a:	b.n	5e8a <FatFile::addCluster()+0x26>
// Add a cluster to a file.
bool FatFile::addCluster() {
#if USE_FAT_FILE_FLAG_CONTIGUOUS
  uint32_t cc = m_curCluster;
  if (!m_vol->allocateCluster(m_curCluster, &m_curCluster)) {
    DBG_FAIL_MACRO;
    5e9c:	movs	r0, #35	; 0x23
    5e9e:	bl	5e28 <dbgPrint(unsigned short)>
  return false;
#else  // USE_FAT_FILE_FLAG_CONTIGUOUS
  m_flags |= FILE_FLAG_DIR_DIRTY;
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
}
    5ea2:	mov	r0, r6
    5ea4:	pop	{r4, r5, r6, pc}
    5ea6:	nop

00005ea8 <FatFile::addDirCluster()>:
//------------------------------------------------------------------------------
// Add a cluster to a directory file and zero the cluster.
// Return with first sector of cluster in the cache.
bool FatFile::addDirCluster() {
    5ea8:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t sector;
  cache_t* pc;

  if (isRootFixed()) {
    5eac:	ldrb	r3, [r0, #0]
    5eae:	and.w	r3, r3, #32
    5eb2:	cmp	r3, #0
    5eb4:	bne.n	5f3a <FatFile::addDirCluster()+0x92>
    5eb6:	and.w	r4, r3, #255	; 0xff
    DBG_FAIL_MACRO;
    goto fail;
  }
  // max folder size
  if (m_curPosition >= 512UL*4095) {
    5eba:	ldr	r2, [r0, #20]
    5ebc:	ldr	r3, [pc, #184]	; (5f78 <FatFile::addDirCluster()+0xd0>)
    5ebe:	cmp	r2, r3
    5ec0:	mov	r5, r0
    5ec2:	bhi.n	5f2c <FatFile::addDirCluster()+0x84>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!addCluster()) {
    5ec4:	bl	5e64 <FatFile::addCluster()>
    5ec8:	mov	r8, r0
    5eca:	cmp	r0, #0
    5ecc:	beq.n	5f4a <FatFile::addDirCluster()+0xa2>
    DBG_FAIL_MACRO;
    goto fail;
  }
  sector = m_vol->clusterStartSector(m_curCluster);
    5ece:	ldr	r1, [r5, #16]
    5ed0:	ldr	r0, [r5, #8]
    5ed2:	bl	6f68 <FatPartition::clusterStartSector(unsigned long) const>
    5ed6:	mov	r6, r0
  bool cacheSync() {
    return m_cache.sync() && syncDevice();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t sector, uint8_t options) {
    return m_cache.read(sector, options);
    5ed8:	ldr	r0, [r5, #8]
    5eda:	mov	r1, r6
    5edc:	adds	r0, #40	; 0x28
    5ede:	movs	r2, #5
    5ee0:	bl	6edc <FatCache::read(unsigned long, unsigned char)>
  pc = m_vol->cacheFetchData(sector, FatCache::CACHE_RESERVE_FOR_WRITE);
  if (!pc) {
    5ee4:	mov	r7, r0
    5ee6:	cmp	r0, #0
    5ee8:	beq.n	5f6e <FatFile::addDirCluster()+0xc6>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(pc, 0, m_vol->bytesPerSector());
    5eea:	mov.w	r2, #512	; 0x200
    5eee:	mov	r1, r4
    5ef0:	bl	c92c <memset>
  // zero rest of clusters
  for (uint8_t i = 1; i < m_vol->sectorsPerCluster(); i++) {
    5ef4:	ldr	r3, [r5, #8]
    5ef6:	ldrb	r2, [r3, #4]
    5ef8:	cmp	r2, #1
    5efa:	bls.n	5f56 <FatFile::addDirCluster()+0xae>
    5efc:	movs	r4, #1
    5efe:	b.n	5f08 <FatFile::addDirCluster()+0x60>
    5f00:	ldr	r3, [r5, #8]
    5f02:	ldrb	r2, [r3, #4]
    5f04:	cmp	r2, r4
    5f06:	bls.n	5f56 <FatFile::addDirCluster()+0xae>
    5f08:	ldr	r0, [r3, #0]
  }
  bool syncDevice() {
    return m_blockDev->syncDevice();
  }
  bool writeSector(uint32_t sector, const uint8_t* src) {
    return m_blockDev->writeSector(sector, src);
    5f0a:	ldr	r3, [r0, #0]
    5f0c:	adds	r1, r4, r6
    5f0e:	ldr	r3, [r3, #24]
    5f10:	mov	r2, r7
    5f12:	blx	r3
    5f14:	adds	r4, #1
    if (!m_vol->writeSector(sector + i, pc->data)) {
    5f16:	mov	r3, r0
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(pc, 0, m_vol->bytesPerSector());
  // zero rest of clusters
  for (uint8_t i = 1; i < m_vol->sectorsPerCluster(); i++) {
    5f18:	uxtb	r4, r4
    if (!m_vol->writeSector(sector + i, pc->data)) {
    5f1a:	cmp	r0, #0
    5f1c:	bne.n	5f00 <FatFile::addDirCluster()+0x58>
  // Set position to EOF to avoid inconsistent curCluster/curPosition.
  m_curPosition += m_vol->bytesPerCluster();
  return true;

fail:
  return false;
    5f1e:	mov	r8, r3
  }
  memset(pc, 0, m_vol->bytesPerSector());
  // zero rest of clusters
  for (uint8_t i = 1; i < m_vol->sectorsPerCluster(); i++) {
    if (!m_vol->writeSector(sector + i, pc->data)) {
      DBG_FAIL_MACRO;
    5f20:	movs	r0, #83	; 0x53
    5f22:	bl	5e28 <dbgPrint(unsigned short)>
  m_curPosition += m_vol->bytesPerCluster();
  return true;

fail:
  return false;
}
    5f26:	mov	r0, r8
    5f28:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    DBG_FAIL_MACRO;
    goto fail;
  }
  // max folder size
  if (m_curPosition >= 512UL*4095) {
    DBG_FAIL_MACRO;
    5f2c:	movs	r0, #66	; 0x42
  // Set position to EOF to avoid inconsistent curCluster/curPosition.
  m_curPosition += m_vol->bytesPerCluster();
  return true;

fail:
  return false;
    5f2e:	mov	r8, r4
    DBG_FAIL_MACRO;
    goto fail;
  }
  // max folder size
  if (m_curPosition >= 512UL*4095) {
    DBG_FAIL_MACRO;
    5f30:	bl	5e28 <dbgPrint(unsigned short)>
  m_curPosition += m_vol->bytesPerCluster();
  return true;

fail:
  return false;
}
    5f34:	mov	r0, r8
    5f36:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
bool FatFile::addDirCluster() {
  uint32_t sector;
  cache_t* pc;

  if (isRootFixed()) {
    DBG_FAIL_MACRO;
    5f3a:	movs	r0, #61	; 0x3d
  // Set position to EOF to avoid inconsistent curCluster/curPosition.
  m_curPosition += m_vol->bytesPerCluster();
  return true;

fail:
  return false;
    5f3c:	mov.w	r8, #0
bool FatFile::addDirCluster() {
  uint32_t sector;
  cache_t* pc;

  if (isRootFixed()) {
    DBG_FAIL_MACRO;
    5f40:	bl	5e28 <dbgPrint(unsigned short)>
  m_curPosition += m_vol->bytesPerCluster();
  return true;

fail:
  return false;
}
    5f44:	mov	r0, r8
    5f46:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (m_curPosition >= 512UL*4095) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!addCluster()) {
    DBG_FAIL_MACRO;
    5f4a:	movs	r0, #70	; 0x46
    5f4c:	bl	5e28 <dbgPrint(unsigned short)>
  m_curPosition += m_vol->bytesPerCluster();
  return true;

fail:
  return false;
}
    5f50:	mov	r0, r8
    5f52:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Set position to EOF to avoid inconsistent curCluster/curPosition.
  m_curPosition += m_vol->bytesPerCluster();
    5f56:	ldrb	r3, [r3, #6]
    5f58:	ldr	r1, [r5, #20]
    5f5a:	mov.w	r2, #512	; 0x200
    5f5e:	lsl.w	r3, r2, r3
    5f62:	uxtah	r3, r1, r3
    5f66:	str	r3, [r5, #20]
  return true;

fail:
  return false;
}
    5f68:	mov	r0, r8
    5f6a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    goto fail;
  }
  sector = m_vol->clusterStartSector(m_curCluster);
  pc = m_vol->cacheFetchData(sector, FatCache::CACHE_RESERVE_FOR_WRITE);
  if (!pc) {
    DBG_FAIL_MACRO;
    5f6e:	movs	r0, #76	; 0x4c
  // Set position to EOF to avoid inconsistent curCluster/curPosition.
  m_curPosition += m_vol->bytesPerCluster();
  return true;

fail:
  return false;
    5f70:	mov	r8, r7
    goto fail;
  }
  sector = m_vol->clusterStartSector(m_curCluster);
  pc = m_vol->cacheFetchData(sector, FatCache::CACHE_RESERVE_FOR_WRITE);
  if (!pc) {
    DBG_FAIL_MACRO;
    5f72:	bl	5e28 <dbgPrint(unsigned short)>
    5f76:	b.n	5f34 <FatFile::addDirCluster()+0x8c>
    5f78:	.word	0x001ffdff

00005f7c <FatFile::cacheDirEntry(unsigned char)>:
  return false;
}
//------------------------------------------------------------------------------
// cache a file's directory entry
// return pointer to cached entry or null for failure
DirFat_t* FatFile::cacheDirEntry(uint8_t action) {
    5f7c:	push	{r3, r4, r5, lr}
    5f7e:	mov	r5, r0
  bool cacheSync() {
    return m_cache.sync() && syncDevice();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t sector, uint8_t options) {
    return m_cache.read(sector, options);
    5f80:	ldr	r0, [r0, #8]
    5f82:	mov	r2, r1
    5f84:	adds	r0, #40	; 0x28
    5f86:	ldr	r1, [r5, #24]
    5f88:	bl	6edc <FatCache::read(unsigned long, unsigned char)>
  cache_t* pc;
  pc = m_vol->cacheFetchData(m_dirSector, action);
  if (!pc) {
    5f8c:	mov	r4, r0
    5f8e:	cbz	r0, 5f9c <FatFile::cacheDirEntry(unsigned char)+0x20>
    DBG_FAIL_MACRO;
    goto fail;
  }
  return pc->dir + (m_dirIndex & 0XF);
    5f90:	ldrh	r0, [r5, #4]
    5f92:	and.w	r0, r0, #15
    5f96:	add.w	r0, r4, r0, lsl #5

fail:
  return nullptr;
}
    5f9a:	pop	{r3, r4, r5, pc}
// return pointer to cached entry or null for failure
DirFat_t* FatFile::cacheDirEntry(uint8_t action) {
  cache_t* pc;
  pc = m_vol->cacheFetchData(m_dirSector, action);
  if (!pc) {
    DBG_FAIL_MACRO;
    5f9c:	movs	r0, #101	; 0x65
    5f9e:	bl	5e28 <dbgPrint(unsigned short)>
    goto fail;
  }
  return pc->dir + (m_dirIndex & 0XF);

fail:
  return nullptr;
    5fa2:	mov	r0, r4
    5fa4:	pop	{r3, r4, r5, pc}
    5fa6:	nop

00005fa8 <FatFile::sync() [clone .part.38]>:
fail:
  m_curCluster = tmp;
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
    5fa8:	push	{r4, r5, r6, lr}
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    5faa:	ldrsb.w	r3, [r0, #2]
    5fae:	cmp	r3, #0
fail:
  m_curCluster = tmp;
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
    5fb0:	sub	sp, #8
    5fb2:	mov	r4, r0
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    5fb4:	blt.n	5ff2 <FatFile::sync() [clone .part.38]+0x4a>
      setLe16(dir->modifyTime, time);
    }
    // clear directory dirty
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
  }
  if (m_vol->cacheSync()) {
    5fb6:	ldr	r5, [r4, #8]
  cache_t* cacheFetchFat(uint32_t sector, uint8_t options) {
    return m_fatCache.read(sector,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    5fb8:	add.w	r0, r5, #40	; 0x28
    5fbc:	bl	6f58 <FatCache::sync()>
    5fc0:	cbnz	r0, 5fd8 <FatFile::sync() [clone .part.38]+0x30>
    return true;
  }
  DBG_FAIL_MACRO;
    5fc2:	movw	r0, #1183	; 0x49f
    5fc6:	bl	5e28 <dbgPrint(unsigned short)>

fail:
  m_error |= WRITE_ERROR;
    5fca:	ldrb	r3, [r4, #1]
    5fcc:	orr.w	r3, r3, #1
    5fd0:	strb	r3, [r4, #1]
  return false;
    5fd2:	movs	r0, #0
}
    5fd4:	add	sp, #8
    5fd6:	pop	{r4, r5, r6, pc}
    5fd8:	add.w	r0, r5, #564	; 0x234
    5fdc:	bl	6f58 <FatCache::sync()>
    5fe0:	cmp	r0, #0
    5fe2:	beq.n	5fc2 <FatFile::sync() [clone .part.38]+0x1a>
    5fe4:	ldr	r0, [r5, #0]
  // sector I/O functions.
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
  }
  bool syncDevice() {
    return m_blockDev->syncDevice();
    5fe6:	ldr	r3, [r0, #0]
    5fe8:	ldr	r3, [r3, #20]
    5fea:	blx	r3
  cache_t* cacheFetchFat(uint32_t sector, uint8_t options) {
    return m_fatCache.read(sector,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    5fec:	cmp	r0, #0
    5fee:	beq.n	5fc2 <FatFile::sync() [clone .part.38]+0x1a>
    5ff0:	b.n	5fd4 <FatFile::sync() [clone .part.38]+0x2c>
  uint8_t ms10;
  if (!isOpen()) {
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    DirFat_t* dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
    5ff2:	movs	r1, #1
    5ff4:	bl	5f7c <FatFile::cacheDirEntry(unsigned char)>
    // check for deleted by another open file object
    if (!dir || dir->name[0] == FAT_NAME_DELETED) {
    5ff8:	mov	r5, r0
    5ffa:	cbz	r0, 603e <FatFile::sync() [clone .part.38]+0x96>
    5ffc:	ldrb	r3, [r0, #0]
    5ffe:	cmp	r3, #229	; 0xe5
    6000:	beq.n	603e <FatFile::sync() [clone .part.38]+0x96>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // do not set filesize for dir files
    if (isFile()) {
    6002:	ldrb	r3, [r4, #0]
    // update first cluster fields
    setLe16(dir->firstClusterLow, m_firstCluster & 0XFFFF);
    setLe16(dir->firstClusterHigh, m_firstCluster >> 16);

    // set modify time if user supplied a callback date/time function
    if (FsDateTime::callback) {
    6004:	ldr	r2, [pc, #64]	; (6048 <FatFile::sync() [clone .part.38]+0xa0>)
    if (!dir || dir->name[0] == FAT_NAME_DELETED) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // do not set filesize for dir files
    if (isFile()) {
    6006:	lsls	r3, r3, #28
      setLe32(dir->fileSize, m_fileSize);
    6008:	itt	mi
    600a:	ldrmi	r3, [r4, #28]
}

inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
    600c:	strmi	r3, [r0, #28]
    }

    // update first cluster fields
    setLe16(dir->firstClusterLow, m_firstCluster & 0XFFFF);
    600e:	ldr	r3, [r4, #32]
    setLe16(dir->firstClusterHigh, m_firstCluster >> 16);

    // set modify time if user supplied a callback date/time function
    if (FsDateTime::callback) {
    6010:	ldr	r6, [r2, #0]
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    6012:	strh	r3, [r0, #26]
    6014:	lsrs	r3, r3, #16
    6016:	strh	r3, [r0, #20]
    6018:	cbz	r6, 6034 <FatFile::sync() [clone .part.38]+0x8c>
      FsDateTime::callback(&date, &time, &ms10);
    601a:	add.w	r2, sp, #3
    601e:	add.w	r1, sp, #6
    6022:	add	r0, sp, #4
    6024:	blx	r6
      setLe16(dir->modifyDate, date);
    6026:	ldrh.w	r3, [sp, #4]
    602a:	ldrh.w	r2, [sp, #6]
    602e:	strh	r3, [r5, #24]
    6030:	strh	r3, [r5, #18]
    6032:	strh	r2, [r5, #22]
      setLe16(dir->accessDate, date);
      setLe16(dir->modifyTime, time);
    }
    // clear directory dirty
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    6034:	ldrb	r3, [r4, #2]
    6036:	and.w	r3, r3, #127	; 0x7f
    603a:	strb	r3, [r4, #2]
    603c:	b.n	5fb6 <FatFile::sync() [clone .part.38]+0xe>
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    DirFat_t* dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
    // check for deleted by another open file object
    if (!dir || dir->name[0] == FAT_NAME_DELETED) {
      DBG_FAIL_MACRO;
    603e:	movw	r0, #1158	; 0x486
    6042:	bl	5e28 <dbgPrint(unsigned short)>
    6046:	b.n	5fca <FatFile::sync() [clone .part.38]+0x22>
    6048:	.word	0x1fff8724

0000604c <FatFile::close()>:

fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
    604c:	push	{r4, lr}
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    604e:	ldrb	r3, [r0, #0]

fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
    6050:	mov	r4, r0
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    6052:	cbnz	r3, 605e <FatFile::close()+0x12>
  return nullptr;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
  bool rtn = sync();
  m_attributes = FILE_ATTR_CLOSED;
    6054:	movs	r3, #0
    6056:	strb	r3, [r4, #0]
  m_flags = 0;
    6058:	strb	r3, [r4, #2]
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    return true;
    605a:	movs	r0, #1
bool FatFile::close() {
  bool rtn = sync();
  m_attributes = FILE_ATTR_CLOSED;
  m_flags = 0;
  return rtn;
}
    605c:	pop	{r4, pc}
    605e:	bl	5fa8 <FatFile::sync() [clone .part.38]>
  return nullptr;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
  bool rtn = sync();
  m_attributes = FILE_ATTR_CLOSED;
    6062:	movs	r3, #0
    6064:	strb	r3, [r4, #0]
  m_flags = 0;
    6066:	strb	r3, [r4, #2]
  return rtn;
}
    6068:	pop	{r4, pc}
    606a:	nop

0000606c <FatFile::openRoot(FatVolume*)>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
    606c:	push	{r4, r5, r6, lr}
  // error if file is already open
  if (isOpen()) {
    606e:	ldrb	r4, [r0, #0]
    6070:	cbnz	r4, 609e <FatFile::openRoot(FatVolume*)+0x32>
    6072:	mov	r5, r0
    6074:	mov	r6, r1
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(FatFile));
    6076:	movs	r2, #36	; 0x24
    6078:	mov	r1, r4
    607a:	bl	c92c <memset>

  m_vol = vol;
    607e:	str	r6, [r5, #8]
  switch (vol->fatType()) {
    6080:	ldrb	r3, [r6, #7]
    6082:	cmp	r3, #16
    6084:	beq.n	6094 <FatFile::openRoot(FatVolume*)+0x28>
    6086:	cmp	r3, #32
    6088:	bne.n	60aa <FatFile::openRoot(FatVolume*)+0x3e>
  case 16:
    m_attributes = FILE_ATTR_ROOT_FIXED;
    break;

  case 32:
    m_attributes = FILE_ATTR_ROOT32;
    608a:	movs	r3, #64	; 0x40
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = FILE_FLAG_READ;
    608c:	movs	r0, #1
  case 16:
    m_attributes = FILE_ATTR_ROOT_FIXED;
    break;

  case 32:
    m_attributes = FILE_ATTR_ROOT32;
    608e:	strb	r3, [r5, #0]
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = FILE_FLAG_READ;
    6090:	strb	r0, [r5, #2]
  return true;

fail:
  return false;
}
    6092:	pop	{r4, r5, r6, pc}
  switch (vol->fatType()) {
#if FAT12_SUPPORT
  case 12:
#endif  // FAT12_SUPPORT
  case 16:
    m_attributes = FILE_ATTR_ROOT_FIXED;
    6094:	movs	r3, #32
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = FILE_FLAG_READ;
    6096:	movs	r0, #1
  switch (vol->fatType()) {
#if FAT12_SUPPORT
  case 12:
#endif  // FAT12_SUPPORT
  case 16:
    m_attributes = FILE_ATTR_ROOT_FIXED;
    6098:	strb	r3, [r5, #0]
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = FILE_FLAG_READ;
    609a:	strb	r0, [r5, #2]
  return true;

fail:
  return false;
}
    609c:	pop	{r4, r5, r6, pc}
}
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
  // error if file is already open
  if (isOpen()) {
    DBG_FAIL_MACRO;
    609e:	movw	r0, #639	; 0x27f
    60a2:	bl	5e28 <dbgPrint(unsigned short)>
  // read only
  m_flags = FILE_FLAG_READ;
  return true;

fail:
  return false;
    60a6:	movs	r0, #0
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
  // error if file is already open
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
    60a8:	pop	{r4, r5, r6, pc}
  case 32:
    m_attributes = FILE_ATTR_ROOT32;
    break;

  default:
    DBG_FAIL_MACRO;
    60aa:	movw	r0, #658	; 0x292
    60ae:	bl	5e28 <dbgPrint(unsigned short)>
  // read only
  m_flags = FILE_FLAG_READ;
  return true;

fail:
  return false;
    60b2:	mov	r0, r4
    60b4:	pop	{r4, r5, r6, pc}
    60b6:	nop

000060b8 <FatFile::open(FatFile*, char const*, int)>:
//------------------------------------------------------------------------------
bool FatFile::open(FatVolume* vol, const char* path, oflag_t oflag) {
  return vol && open(vol->vwd(), path, oflag);
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
    60b8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    60bc:	mov	r6, r0
    60be:	sub	sp, #76	; 0x4c
  FatFile tmpDir;
  fname_t fname;

  // error if already open
  if (isOpen() || !dirFile->isDir()) {
    60c0:	ldrb	r4, [r6, #0]
//------------------------------------------------------------------------------
bool FatFile::open(FatVolume* vol, const char* path, oflag_t oflag) {
  return vol && open(vol->vwd(), path, oflag);
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
    60c2:	str	r2, [sp, #4]
    60c4:	movs	r0, #0
    60c6:	strb.w	r0, [sp, #36]	; 0x24
    60ca:	strb.w	r0, [sp, #37]	; 0x25
    60ce:	strb.w	r0, [sp, #38]	; 0x26
  FatFile tmpDir;
  fname_t fname;

  // error if already open
  if (isOpen() || !dirFile->isDir()) {
    60d2:	cmp	r4, #0
    60d4:	bne.n	6160 <FatFile::open(FatFile*, char const*, int)+0xa8>
    60d6:	mov	r9, r3
    60d8:	ldrb	r3, [r1, #0]
    60da:	tst.w	r3, #112	; 0x70
    60de:	mov	r5, r1
    60e0:	beq.n	6160 <FatFile::open(FatFile*, char const*, int)+0xa8>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    60e2:	ldrb	r3, [r2, #0]
    60e4:	cmp	r3, #47	; 0x2f
    60e6:	mov	r0, r2
    60e8:	beq.n	6142 <FatFile::open(FatFile*, char const*, int)+0x8a>
      goto fail;
    }
    if (*path == 0) {
      break;
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
    60ea:	mov.w	r8, #0
    60ee:	b.n	60fc <FatFile::open(FatFile*, char const*, int)+0x44>
    60f0:	ldr	r0, [sp, #4]
  return nullptr;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
  bool rtn = sync();
  m_attributes = FILE_ATTR_CLOSED;
    60f2:	strb.w	r8, [r6]
  m_flags = 0;
    60f6:	strb.w	r8, [r6, #2]
    if (!open(dirFile, &fname, O_RDONLY)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
    dirFile = &tmpDir;
    60fa:	add	r5, sp, #36	; 0x24
      goto fail;
    }
    dirFile = &tmpDir;
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
    60fc:	add	r2, sp, #4
    60fe:	add	r1, sp, #12
    6100:	bl	75c0 <FatFile::parsePathName(char const*, fname_t*, char const**)>
      goto fail;
    }
    if (*path == 0) {
      break;
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
    6104:	add	r2, sp, #12
      goto fail;
    }
    dirFile = &tmpDir;
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
    6106:	mov	r7, r0
      goto fail;
    }
    if (*path == 0) {
      break;
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
    6108:	mov	r1, r5
    610a:	movs	r3, #0
      goto fail;
    }
    dirFile = &tmpDir;
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
    610c:	cmp	r0, #0
    610e:	beq.n	6172 <FatFile::open(FatFile*, char const*, int)+0xba>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (*path == 0) {
    6110:	ldr	r4, [sp, #4]
    6112:	ldrb	r4, [r4, #0]
      break;
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
    6114:	mov	r0, r6
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (*path == 0) {
    6116:	cmp	r4, #0
    6118:	beq.n	6182 <FatFile::open(FatFile*, char const*, int)+0xca>
      break;
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
    611a:	bl	7b14 <FatFile::open(FatFile*, fname_t*, int)>
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
    611e:	mov	r5, r6
      goto fail;
    }
    if (*path == 0) {
      break;
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
    6120:	mov	r7, r0
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
    6122:	add	r4, sp, #36	; 0x24
      goto fail;
    }
    if (*path == 0) {
      break;
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
    6124:	cmp	r0, #0
    6126:	beq.n	6198 <FatFile::open(FatFile*, char const*, int)+0xe0>
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
    6128:	ldmia	r5!, {r0, r1, r2, r3}
    612a:	stmia	r4!, {r0, r1, r2, r3}
    612c:	ldmia	r5!, {r0, r1, r2, r3}
    612e:	stmia	r4!, {r0, r1, r2, r3}
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    6130:	ldrb	r3, [r6, #0]
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
    6132:	ldr	r2, [r5, #0]
    6134:	str	r2, [r4, #0]
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    6136:	cmp	r3, #0
    6138:	beq.n	60f0 <FatFile::open(FatFile*, char const*, int)+0x38>
    613a:	mov	r0, r6
    613c:	bl	5fa8 <FatFile::sync() [clone .part.38]>
    6140:	b.n	60f0 <FatFile::open(FatFile*, char const*, int)+0x38>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
      path++;
    6142:	adds	r0, #1
    6144:	str	r0, [sp, #4]
  if (isOpen() || !dirFile->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
    6146:	ldrb	r3, [r0, #0]
    6148:	cmp	r3, #47	; 0x2f
    614a:	beq.n	6142 <FatFile::open(FatFile*, char const*, int)+0x8a>
      path++;
    }
    if (*path == 0) {
      return openRoot(dirFile->m_vol);
    614c:	ldr	r1, [r5, #8]
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
      path++;
    }
    if (*path == 0) {
    614e:	cbz	r3, 61a8 <FatFile::open(FatFile*, char const*, int)+0xf0>
      return openRoot(dirFile->m_vol);
    }
    if (!tmpDir.openRoot(dirFile->m_vol)) {
    6150:	add	r0, sp, #36	; 0x24
    6152:	bl	606c <FatFile::openRoot(FatVolume*)>
    6156:	mov	r7, r0
    6158:	cbz	r0, 61b2 <FatFile::open(FatFile*, char const*, int)+0xfa>
    615a:	ldr	r0, [sp, #4]
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile = &tmpDir;
    615c:	add	r5, sp, #36	; 0x24
    615e:	b.n	60ea <FatFile::open(FatFile*, char const*, int)+0x32>
  FatFile tmpDir;
  fname_t fname;

  // error if already open
  if (isOpen() || !dirFile->isDir()) {
    DBG_FAIL_MACRO;
    6160:	mov.w	r0, #418	; 0x1a2
    6164:	bl	5e28 <dbgPrint(unsigned short)>
    close();
  }
  return open(dirFile, &fname, oflag);

fail:
  return false;
    6168:	movs	r7, #0
}
    616a:	mov	r0, r7
    616c:	add	sp, #76	; 0x4c
    616e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    }
    dirFile = &tmpDir;
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
      DBG_FAIL_MACRO;
    6172:	mov.w	r0, #436	; 0x1b4
    6176:	bl	5e28 <dbgPrint(unsigned short)>
  }
  return open(dirFile, &fname, oflag);

fail:
  return false;
}
    617a:	mov	r0, r7
    617c:	add	sp, #76	; 0x4c
    617e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    }
    tmpDir = *this;
    dirFile = &tmpDir;
    close();
  }
  return open(dirFile, &fname, oflag);
    6182:	mov	r3, r9
    6184:	add	r2, sp, #12
    6186:	mov	r1, r5
    6188:	mov	r0, r6
    618a:	bl	7b14 <FatFile::open(FatFile*, fname_t*, int)>
    618e:	mov	r7, r0

fail:
  return false;
}
    6190:	mov	r0, r7
    6192:	add	sp, #76	; 0x4c
    6194:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    }
    if (*path == 0) {
      break;
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
      DBG_FAIL_MACRO;
    6198:	movw	r0, #443	; 0x1bb
    619c:	bl	5e28 <dbgPrint(unsigned short)>
  }
  return open(dirFile, &fname, oflag);

fail:
  return false;
}
    61a0:	mov	r0, r7
    61a2:	add	sp, #76	; 0x4c
    61a4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
      path++;
    }
    if (*path == 0) {
      return openRoot(dirFile->m_vol);
    61a8:	mov	r0, r6
    61aa:	bl	606c <FatFile::openRoot(FatVolume*)>
    61ae:	mov	r7, r0
    61b0:	b.n	616a <FatFile::open(FatFile*, char const*, int)+0xb2>
    }
    if (!tmpDir.openRoot(dirFile->m_vol)) {
      DBG_FAIL_MACRO;
    61b2:	movw	r0, #429	; 0x1ad
    61b6:	bl	5e28 <dbgPrint(unsigned short)>
      goto fail;
    61ba:	b.n	616a <FatFile::open(FatFile*, char const*, int)+0xb2>

000061bc <FatFile::open(FatVolume*, char const*, int)>:
bool FatFile::open(const char* path, oflag_t oflag) {
  return open(FatVolume::cwv(), path, oflag);
}
//------------------------------------------------------------------------------
bool FatFile::open(FatVolume* vol, const char* path, oflag_t oflag) {
  return vol && open(vol->vwd(), path, oflag);
    61bc:	cbz	r1, 61c6 <FatFile::open(FatVolume*, char const*, int)+0xa>
    61be:	add.w	r1, r1, #1088	; 0x440
    61c2:	b.w	60b8 <FatFile::open(FatFile*, char const*, int)>
}
    61c6:	mov	r0, r1
    61c8:	bx	lr
    61ca:	nop

000061cc <FatFile::read(void*, unsigned int)>:
  m_curPosition = curPosition;
  m_curCluster = curCluster;
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
    61cc:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  size_t toRead;
  uint32_t sector;  // raw device sector number
  cache_t* pc;

  // error if not open for read
  if (!isReadable()) {
    61d0:	ldrb	r3, [r0, #2]
    61d2:	lsls	r7, r3, #31
  m_curPosition = curPosition;
  m_curCluster = curCluster;
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
    61d4:	sub	sp, #12
    61d6:	mov	r5, r0
  size_t toRead;
  uint32_t sector;  // raw device sector number
  cache_t* pc;

  // error if not open for read
  if (!isReadable()) {
    61d8:	bpl.w	6384 <FatFile::read(void*, unsigned int)+0x1b8>
    61dc:	mov	r7, r1
    61de:	ldrb	r1, [r0, #0]
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (isFile()) {
    61e0:	lsls	r6, r1, #28
    61e2:	mov	r9, r2
    61e4:	bmi.w	62f6 <FatFile::read(void*, unsigned int)+0x12a>
    uint32_t tmp32 = m_fileSize - m_curPosition;
    if (nbyte >= tmp32) {
      nbyte = tmp32;
    }
  } else if (isRootFixed()) {
    61e8:	lsls	r4, r1, #26
    61ea:	bpl.n	61fe <FatFile::read(void*, unsigned int)+0x32>
    uint16_t tmp16 = 32*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
    61ec:	ldr	r2, [r0, #8]
    if (nbyte > tmp16) {
    61ee:	ldr	r3, [r0, #20]
    61f0:	ldrh	r2, [r2, #8]
    61f2:	rsb	r3, r3, r2, lsl #5
    61f6:	uxth	r3, r3
    61f8:	cmp	r9, r3
    61fa:	it	cs
    61fc:	movcs	r9, r3
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
    61fe:	cmp.w	r9, #0
    6202:	beq.w	6340 <FatFile::read(void*, unsigned int)+0x174>
    6206:	ldr	r3, [r5, #20]
    size_t n;
    offset = m_curPosition & m_vol->sectorMask();  // offset in sector
    6208:	ldr	r2, [r5, #8]
    if (isRootFixed()) {
    620a:	lsls	r0, r1, #26
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
    620c:	mov	r6, r9
    620e:	mov.w	r8, #0
        } else if (isFile() && isContiguous()) {
          m_curCluster++;
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    6212:	add.w	sl, r5, #16
    }
  }
  toRead = nbyte;
  while (toRead) {
    size_t n;
    offset = m_curPosition & m_vol->sectorMask();  // offset in sector
    6216:	ubfx	fp, r3, #0, #9
    if (isRootFixed()) {
    621a:	bpl.n	629c <FatFile::read(void*, unsigned int)+0xd0>
      sector = m_vol->rootDirStart()
               + (m_curPosition >> m_vol->bytesPerSectorShift());
    621c:	ldr	r1, [r2, #32]
    621e:	add.w	r1, r1, r3, lsr #9
        }
      }
      sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
    }
    if (offset != 0 || toRead < m_vol->bytesPerSector()
        || sector == m_vol->cacheSectorNumber()) {
    6222:	cmp.w	fp, #0
    6226:	bne.n	62d0 <FatFile::read(void*, unsigned int)+0x104>
          }
        }
      }
      sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
    }
    if (offset != 0 || toRead < m_vol->bytesPerSector()
    6228:	cmp.w	r6, #512	; 0x200
    622c:	bcc.n	62d0 <FatFile::read(void*, unsigned int)+0x104>
    622e:	ldr	r3, [r2, #48]	; 0x30
        || sector == m_vol->cacheSectorNumber()) {
    6230:	cmp	r1, r3
    6232:	beq.n	62d0 <FatFile::read(void*, unsigned int)+0x104>
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_SECTOR_IO
    } else if (toRead >= 2*m_vol->bytesPerSector()) {
    6234:	cmp.w	r6, #1024	; 0x400
    6238:	bcc.n	6308 <FatFile::read(void*, unsigned int)+0x13c>
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
      if (!isRootFixed()) {
    623a:	ldrb	r0, [r5, #0]
    623c:	lsls	r0, r0, #26
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_SECTOR_IO
    } else if (toRead >= 2*m_vol->bytesPerSector()) {
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
    623e:	mov.w	fp, r6, lsr #9
      if (!isRootFixed()) {
    6242:	bmi.n	6250 <FatFile::read(void*, unsigned int)+0x84>
        uint32_t mb = m_vol->sectorsPerCluster() - sectorOfCluster;
    6244:	ldrb	r0, [r2, #4]
    6246:	rsb	r0, r8, r0
    624a:	cmp	fp, r0
    624c:	it	cs
    624e:	movcs	fp, r0
        }
      }
      n = ns << m_vol->bytesPerSectorShift();
      // Check for cache sector in read range.
      if (sector <= m_vol->cacheSectorNumber()
          && sector < (m_vol->cacheSectorNumber() + ns)) {
    6250:	cmp	r1, r3
        uint32_t mb = m_vol->sectorsPerCluster() - sectorOfCluster;
        if (mb < ns) {
          ns = mb;
        }
      }
      n = ns << m_vol->bytesPerSectorShift();
    6252:	mov.w	r4, fp, lsl #9
      // Check for cache sector in read range.
      if (sector <= m_vol->cacheSectorNumber()
          && sector < (m_vol->cacheSectorNumber() + ns)) {
    6256:	bhi.n	6272 <FatFile::read(void*, unsigned int)+0xa6>
    6258:	add	r3, fp
    625a:	cmp	r1, r3
    625c:	bcs.n	6272 <FatFile::read(void*, unsigned int)+0xa6>
  }
  void cacheInvalidate() {
    m_cache.invalidate();
  }
  bool cacheSyncData() {
    return m_cache.sync();
    625e:	add.w	r0, r2, #40	; 0x28
    6262:	str	r1, [sp, #4]
    6264:	bl	6f58 <FatCache::sync()>
        // Flush cache if cache sector is in the range.
        if (!m_vol->cacheSyncData()) {
    6268:	cmp	r0, #0
    626a:	beq.w	6370 <FatFile::read(void*, unsigned int)+0x1a4>
    626e:	ldr	r2, [r5, #8]
    6270:	ldr	r1, [sp, #4]
    6272:	ldr	r0, [r2, #0]
  bool writeSector(uint32_t sector, const uint8_t* src) {
    return m_blockDev->writeSector(sector, src);
  }
#if USE_MULTI_SECTOR_IO
  bool readSectors(uint32_t sector, uint8_t* dst, size_t ns) {
    return m_blockDev->readSectors(sector, dst, ns);
    6274:	ldr	r2, [r0, #0]
    6276:	mov	r3, fp
    6278:	ldr.w	fp, [r2, #12]
    627c:	mov	r2, r7
    627e:	blx	fp
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
      if (!m_vol->readSectors(sector, dst, ns)) {
    6280:	cmp	r0, #0
    6282:	beq.n	6366 <FatFile::read(void*, unsigned int)+0x19a>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    m_curPosition += n;
    6284:	ldr	r3, [r5, #20]
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
    6286:	subs	r6, r6, r4
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    m_curPosition += n;
    6288:	add	r3, r4
      if (!m_vol->readSector(sector, dst)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    628a:	add	r7, r4
    m_curPosition += n;
    628c:	str	r3, [r5, #20]
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
    628e:	beq.n	6340 <FatFile::read(void*, unsigned int)+0x174>
    6290:	ldrb	r1, [r5, #0]
    size_t n;
    offset = m_curPosition & m_vol->sectorMask();  // offset in sector
    6292:	ldr	r2, [r5, #8]
    if (isRootFixed()) {
    6294:	lsls	r0, r1, #26
    }
  }
  toRead = nbyte;
  while (toRead) {
    size_t n;
    offset = m_curPosition & m_vol->sectorMask();  // offset in sector
    6296:	ubfx	fp, r3, #0, #9
    if (isRootFixed()) {
    629a:	bmi.n	621c <FatFile::read(void*, unsigned int)+0x50>
  }
  //----------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t sectorOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterSectorMask;
    629c:	ldrb.w	r8, [r2, #5]
    62a0:	and.w	r8, r8, r3, lsr #9
      sector = m_vol->rootDirStart()
               + (m_curPosition >> m_vol->bytesPerSectorShift());
    } else {
      sectorOfCluster = m_vol->sectorOfCluster(m_curPosition);
      if (offset == 0 && sectorOfCluster == 0) {
    62a4:	cmp.w	fp, #0
    62a8:	bne.n	6304 <FatFile::read(void*, unsigned int)+0x138>
    62aa:	cmp.w	r8, #0
    62ae:	bne.n	6304 <FatFile::read(void*, unsigned int)+0x138>
        // start of new cluster
        if (m_curPosition == 0) {
    62b0:	cmp	r3, #0
    62b2:	bne.n	631a <FatFile::read(void*, unsigned int)+0x14e>
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
    62b4:	lsls	r1, r1, #25
    62b6:	ite	mi
    62b8:	ldrmi	r1, [r2, #32]
    62ba:	ldrpl	r1, [r5, #32]
#if USE_FAT_FILE_FLAG_CONTIGUOUS
        } else if (isFile() && isContiguous()) {
          m_curCluster++;
    62bc:	str	r1, [r5, #16]
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
      }
      sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
    62be:	mov	r0, r2
    62c0:	bl	6f68 <FatPartition::clusterStartSector(unsigned long) const>
    62c4:	ldr	r2, [r5, #8]
    62c6:	add.w	r1, r8, r0
    }
    if (offset != 0 || toRead < m_vol->bytesPerSector()
        || sector == m_vol->cacheSectorNumber()) {
    62ca:	cmp.w	fp, #0
    62ce:	beq.n	6228 <FatFile::read(void*, unsigned int)+0x5c>
  bool cacheSync() {
    return m_cache.sync() && syncDevice();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t sector, uint8_t options) {
    return m_cache.read(sector, options);
    62d0:	add.w	r0, r2, #40	; 0x28
    62d4:	movs	r2, #0
    62d6:	bl	6edc <FatCache::read(unsigned long, unsigned char)>
      if (n > toRead) {
        n = toRead;
      }
      // read sector to cache and copy data to caller
      pc = m_vol->cacheFetchData(sector, FatCache::CACHE_FOR_READ);
      if (!pc) {
    62da:	cmp	r0, #0
    62dc:	beq.n	634c <FatFile::read(void*, unsigned int)+0x180>
      sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
    }
    if (offset != 0 || toRead < m_vol->bytesPerSector()
        || sector == m_vol->cacheSectorNumber()) {
      // amount to be read from current sector
      n = m_vol->bytesPerSector() - offset;
    62de:	rsb	r4, fp, #512	; 0x200
    62e2:	cmp	r4, r6
    62e4:	it	cs
    62e6:	movcs	r4, r6
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
    62e8:	add.w	r1, r0, fp
    62ec:	mov	r2, r4
    62ee:	mov	r0, r7
    62f0:	bl	9aa8 <memcpy>
    62f4:	b.n	6284 <FatFile::read(void*, unsigned int)+0xb8>
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (isFile()) {
    uint32_t tmp32 = m_fileSize - m_curPosition;
    62f6:	ldr	r3, [r0, #28]
    62f8:	ldr	r2, [r0, #20]
    62fa:	subs	r3, r3, r2
    62fc:	cmp	r9, r3
    62fe:	it	cs
    6300:	movcs	r9, r3
    6302:	b.n	61fe <FatFile::read(void*, unsigned int)+0x32>
    6304:	ldr	r1, [r5, #16]
    6306:	b.n	62be <FatFile::read(void*, unsigned int)+0xf2>
    6308:	ldr	r0, [r2, #0]
  uint32_t m_lastCluster;             // Last cluster number in FAT.
  uint32_t m_rootDirStart;            // Start sector FAT16, cluster FAT32.
  //----------------------------------------------------------------------------
  // sector I/O functions.
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
    630a:	ldr	r3, [r0, #0]
    630c:	mov	r2, r7
    630e:	ldr	r3, [r3, #8]
    6310:	blx	r3
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // read single sector
      n = m_vol->bytesPerSector();
      if (!m_vol->readSector(sector, dst)) {
    6312:	cbz	r0, 637a <FatFile::read(void*, unsigned int)+0x1ae>
        goto fail;
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // read single sector
      n = m_vol->bytesPerSector();
    6314:	mov.w	r4, #512	; 0x200
    6318:	b.n	6284 <FatFile::read(void*, unsigned int)+0xb8>
        // start of new cluster
        if (m_curPosition == 0) {
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
#if USE_FAT_FILE_FLAG_CONTIGUOUS
        } else if (isFile() && isContiguous()) {
    631a:	lsls	r3, r1, #28
    631c:	bpl.n	632a <FatFile::read(void*, unsigned int)+0x15e>
    631e:	ldrb	r3, [r5, #2]
    6320:	lsls	r4, r3, #25
    6322:	bpl.n	632a <FatFile::read(void*, unsigned int)+0x15e>
          m_curCluster++;
    6324:	ldr	r1, [r5, #16]
    6326:	adds	r1, #1
    6328:	b.n	62bc <FatFile::read(void*, unsigned int)+0xf0>
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    632a:	mov	r0, r2
    632c:	ldr	r1, [r5, #16]
    632e:	mov	r2, sl
    6330:	bl	6f74 <FatPartition::fatGet(unsigned long, unsigned long*)>
          if (fg < 0) {
    6334:	cmp	r0, #0
    6336:	blt.n	63a0 <FatFile::read(void*, unsigned int)+0x1d4>
            DBG_FAIL_MACRO;
            goto fail;
          }
          if (fg == 0) {
    6338:	beq.n	638e <FatFile::read(void*, unsigned int)+0x1c2>
    633a:	ldr	r2, [r5, #8]
    633c:	ldr	r1, [r5, #16]
    633e:	b.n	62be <FatFile::read(void*, unsigned int)+0xf2>
        goto fail;
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // read single sector
      n = m_vol->bytesPerSector();
    6340:	movs	r6, #0
    }
    dst += n;
    m_curPosition += n;
    toRead -= n;
  }
  return nbyte - toRead;
    6342:	rsb	r0, r6, r9

fail:
  m_error |= READ_ERROR;
  return -1;
}
    6346:	add	sp, #12
    6348:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        n = toRead;
      }
      // read sector to cache and copy data to caller
      pc = m_vol->cacheFetchData(sector, FatCache::CACHE_FOR_READ);
      if (!pc) {
        DBG_FAIL_MACRO;
    634c:	movw	r0, #750	; 0x2ee
    6350:	bl	5e28 <dbgPrint(unsigned short)>
    toRead -= n;
  }
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
    6354:	ldrb	r3, [r5, #1]
  return -1;
    6356:	mov.w	r0, #4294967295
    toRead -= n;
  }
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
    635a:	orr.w	r3, r3, #2
    635e:	strb	r3, [r5, #1]
  return -1;
}
    6360:	add	sp, #12
    6362:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
      if (!m_vol->readSectors(sector, dst, ns)) {
        DBG_FAIL_MACRO;
    6366:	movw	r0, #775	; 0x307
    636a:	bl	5e28 <dbgPrint(unsigned short)>
        goto fail;
    636e:	b.n	6354 <FatFile::read(void*, unsigned int)+0x188>
      // Check for cache sector in read range.
      if (sector <= m_vol->cacheSectorNumber()
          && sector < (m_vol->cacheSectorNumber() + ns)) {
        // Flush cache if cache sector is in the range.
        if (!m_vol->cacheSyncData()) {
          DBG_FAIL_MACRO;
    6370:	movw	r0, #770	; 0x302
    6374:	bl	5e28 <dbgPrint(unsigned short)>
          goto fail;
    6378:	b.n	6354 <FatFile::read(void*, unsigned int)+0x188>
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // read single sector
      n = m_vol->bytesPerSector();
      if (!m_vol->readSector(sector, dst)) {
        DBG_FAIL_MACRO;
    637a:	movw	r0, #783	; 0x30f
    637e:	bl	5e28 <dbgPrint(unsigned short)>
        goto fail;
    6382:	b.n	6354 <FatFile::read(void*, unsigned int)+0x188>
  uint32_t sector;  // raw device sector number
  cache_t* pc;

  // error if not open for read
  if (!isReadable()) {
    DBG_FAIL_MACRO;
    6384:	movw	r0, #689	; 0x2b1
    6388:	bl	5e28 <dbgPrint(unsigned short)>
    goto fail;
    638c:	b.n	6354 <FatFile::read(void*, unsigned int)+0x188>
          if (fg < 0) {
            DBG_FAIL_MACRO;
            goto fail;
          }
          if (fg == 0) {
            if (isDir()) {
    638e:	ldrb	r3, [r5, #0]
    6390:	tst.w	r3, #112	; 0x70
    6394:	bne.n	6342 <FatFile::read(void*, unsigned int)+0x176>
              break;
            }
            DBG_FAIL_MACRO;
    6396:	movw	r0, #733	; 0x2dd
    639a:	bl	5e28 <dbgPrint(unsigned short)>
            goto fail;
    639e:	b.n	6354 <FatFile::read(void*, unsigned int)+0x188>
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
          if (fg < 0) {
            DBG_FAIL_MACRO;
    63a0:	movw	r0, #726	; 0x2d6
    63a4:	bl	5e28 <dbgPrint(unsigned short)>
            goto fail;
    63a8:	b.n	6354 <FatFile::read(void*, unsigned int)+0x188>
    63aa:	nop

000063ac <FatFile::peek()>:

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::peek() {
    63ac:	push	{r4, r5, r6, lr}
    63ae:	sub	sp, #8
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
    63b0:	movs	r2, #1
    63b2:	add.w	r1, sp, #7
    63b6:	mov	r4, r0
  uint32_t curPosition = m_curPosition;
    63b8:	ldr	r6, [r0, #20]
  uint32_t curCluster = m_curCluster;
    63ba:	ldr	r5, [r0, #16]
    63bc:	bl	61cc <FatFile::read(void*, unsigned int)>
    63c0:	cmp	r0, #1
    63c2:	it	eq
    63c4:	ldrbeq.w	r0, [sp, #7]
  int c = read();
  m_curPosition = curPosition;
    63c8:	str	r6, [r4, #20]
    63ca:	it	ne
    63cc:	movne.w	r0, #4294967295
  m_curCluster = curCluster;
    63d0:	str	r5, [r4, #16]
  return c;
}
    63d2:	add	sp, #8
    63d4:	pop	{r4, r5, r6, pc}
    63d6:	nop

000063d8 <FatFile::readDirCache(bool)>:
  }
}
//------------------------------------------------------------------------------
// Read next directory entry into the cache
// Assumes file is correctly positioned
DirFat_t* FatFile::readDirCache(bool skipReadOk) {
    63d8:	push	{r4, r5, lr}
  uint8_t i = (m_curPosition >> 5) & 0XF;
    63da:	ldr	r3, [r0, #20]
    63dc:	ubfx	r5, r3, #5, #4
  }
}
//------------------------------------------------------------------------------
// Read next directory entry into the cache
// Assumes file is correctly positioned
DirFat_t* FatFile::readDirCache(bool skipReadOk) {
    63e0:	sub	sp, #12
    63e2:	mov	r4, r0
  uint8_t i = (m_curPosition >> 5) & 0XF;

  if (i == 0 || !skipReadOk) {
    63e4:	cbz	r5, 63e8 <FatFile::readDirCache(bool)+0x10>
    63e6:	cbnz	r1, 6410 <FatFile::readDirCache(bool)+0x38>
    int8_t n = read(&n, 1);
    63e8:	movs	r2, #1
    63ea:	add.w	r1, sp, #7
    63ee:	mov	r0, r4
    63f0:	bl	61cc <FatFile::read(void*, unsigned int)>
    63f4:	sxtb	r0, r0
    if  (n != 1) {
    63f6:	cmp	r0, #1
// Assumes file is correctly positioned
DirFat_t* FatFile::readDirCache(bool skipReadOk) {
  uint8_t i = (m_curPosition >> 5) & 0XF;

  if (i == 0 || !skipReadOk) {
    int8_t n = read(&n, 1);
    63f8:	strb.w	r0, [sp, #7]
    if  (n != 1) {
    63fc:	bne.n	6416 <FatFile::readDirCache(bool)+0x3e>
      if (n != 0) {
        DBG_FAIL_MACRO;
      }
      goto fail;
    }
    m_curPosition += 31;
    63fe:	ldr	r3, [r4, #20]
    6400:	adds	r3, #31
    6402:	str	r3, [r4, #20]
  /** Reserve cache sector for write - do not read from sector device. */
  static const uint8_t CACHE_RESERVE_FOR_WRITE
    = CACHE_STATUS_DIRTY | CACHE_OPTION_NO_READ;
  /** \return Cache sector address. */
  cache_t* buffer() {
    return &m_buffer;
    6404:	ldr	r0, [r4, #8]
    6406:	adds	r0, #52	; 0x34
  } else {
    m_curPosition += 32;
  }
  // return pointer to entry
  return reinterpret_cast<DirFat_t*>(m_vol->cacheAddress()) + i;
    6408:	add.w	r0, r0, r5, lsl #5

fail:
  return nullptr;
}
    640c:	add	sp, #12
    640e:	pop	{r4, r5, pc}
      }
      goto fail;
    }
    m_curPosition += 31;
  } else {
    m_curPosition += 32;
    6410:	adds	r3, #32
    6412:	str	r3, [r0, #20]
    6414:	b.n	6404 <FatFile::readDirCache(bool)+0x2c>
  uint8_t i = (m_curPosition >> 5) & 0XF;

  if (i == 0 || !skipReadOk) {
    int8_t n = read(&n, 1);
    if  (n != 1) {
      if (n != 0) {
    6416:	cbz	r0, 6420 <FatFile::readDirCache(bool)+0x48>
        DBG_FAIL_MACRO;
    6418:	movw	r0, #834	; 0x342
    641c:	bl	5e28 <dbgPrint(unsigned short)>
  }
  // return pointer to entry
  return reinterpret_cast<DirFat_t*>(m_vol->cacheAddress()) + i;

fail:
  return nullptr;
    6420:	movs	r0, #0
}
    6422:	add	sp, #12
    6424:	pop	{r4, r5, pc}
    6426:	nop

00006428 <FatFile::seekSet(unsigned long)>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::seekSet(uint32_t pos) {
    6428:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    642c:	ldrb	r3, [r0, #0]
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
    642e:	ldr	r7, [r0, #16]

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::seekSet(uint32_t pos) {
    6430:	mov	r4, r0
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
  // error if file not open
  if (!isOpen()) {
    6432:	cmp	r3, #0
    6434:	beq.n	64a6 <FatFile::seekSet(unsigned long)+0x7e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    6436:	ldr	r2, [r0, #20]
    6438:	cmp	r2, r1
    643a:	mov	r6, r1
    643c:	beq.n	64ce <FatFile::seekSet(unsigned long)+0xa6>
    return true;
  }
  if (pos == 0) {
    643e:	cbnz	r1, 6452 <FatFile::seekSet(unsigned long)+0x2a>
    // set position to start of file
    m_curCluster = 0;
    6440:	str	r1, [r4, #16]
    }
  }

done:
  m_curPosition = pos;
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    6442:	ldrb	r3, [r4, #2]
      goto fail;
    }
  }

done:
  m_curPosition = pos;
    6444:	str	r6, [r4, #20]
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    6446:	bic.w	r3, r3, #32
    644a:	strb	r3, [r4, #2]
  return true;
    644c:	movs	r0, #1
    644e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (pos == 0) {
    // set position to start of file
    m_curCluster = 0;
    goto done;
  }
  if (isFile()) {
    6452:	lsls	r0, r3, #28
    6454:	bpl.n	64b6 <FatFile::seekSet(unsigned long)+0x8e>
    if (pos > m_fileSize) {
    6456:	ldr	r1, [r4, #28]
    6458:	cmp	r6, r1
    645a:	bhi.n	64d8 <FatFile::seekSet(unsigned long)+0xb0>
    }
    DBG_FAIL_MACRO;
    goto fail;
  }
  // calculate cluster index for cur and new position
  nCur = (m_curPosition - 1) >> (m_vol->bytesPerClusterShift());
    645c:	ldr.w	lr, [r4, #8]
    6460:	ldrb.w	r5, [lr, #6]
    6464:	adds	r5, #9
    6466:	uxtb	r1, r5
    6468:	subs	r0, r2, #1
  nNew = (pos - 1) >> (m_vol->bytesPerClusterShift());
    646a:	subs	r5, r6, #1
    }
    DBG_FAIL_MACRO;
    goto fail;
  }
  // calculate cluster index for cur and new position
  nCur = (m_curPosition - 1) >> (m_vol->bytesPerClusterShift());
    646c:	lsrs	r0, r1
  nNew = (pos - 1) >> (m_vol->bytesPerClusterShift());
    646e:	lsrs	r5, r1

  if (nNew < nCur || m_curPosition == 0) {
    6470:	cmp	r0, r5
    6472:	bhi.n	6476 <FatFile::seekSet(unsigned long)+0x4e>
    6474:	cbnz	r2, 64d4 <FatFile::seekSet(unsigned long)+0xac>
    // must follow chain from first cluster
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
    6476:	lsls	r3, r3, #25
    6478:	ite	mi
    647a:	ldrmi.w	r3, [lr, #32]
    647e:	ldrpl	r3, [r4, #32]
    6480:	str	r3, [r4, #16]
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
    6482:	add.w	r8, r4, #16
    6486:	mov	r2, r8
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    6488:	cmp	r5, #0
    648a:	beq.n	6442 <FatFile::seekSet(unsigned long)+0x1a>
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
    648c:	ldr	r1, [r4, #16]
    648e:	ldr	r0, [r4, #8]
    6490:	bl	6f74 <FatPartition::fatGet(unsigned long, unsigned long*)>
    6494:	cmp	r0, #0
    6496:	add.w	r5, r5, #4294967295
    649a:	bgt.n	6486 <FatFile::seekSet(unsigned long)+0x5e>
      DBG_FAIL_MACRO;
    649c:	movw	r0, #1133	; 0x46d
    64a0:	bl	5e28 <dbgPrint(unsigned short)>
      goto fail;
    64a4:	b.n	64ae <FatFile::seekSet(unsigned long)+0x86>
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
  // error if file not open
  if (!isOpen()) {
    DBG_FAIL_MACRO;
    64a6:	mov.w	r0, #1096	; 0x448
    64aa:	bl	5e28 <dbgPrint(unsigned short)>
  m_curPosition = pos;
  m_flags &= ~FILE_FLAG_PREALLOCATE;
  return true;

fail:
  m_curCluster = tmp;
    64ae:	str	r7, [r4, #16]
  return false;
    64b0:	movs	r0, #0
    64b2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (isFile()) {
    if (pos > m_fileSize) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if (isRootFixed()) {
    64b6:	lsls	r1, r3, #26
    64b8:	bpl.n	645c <FatFile::seekSet(unsigned long)+0x34>
    64ba:	ldr	r3, [r4, #8]
    if (pos <= 32*m_vol->rootDirEntryCount()) {
    64bc:	ldrh	r3, [r3, #8]
    64be:	cmp.w	r6, r3, lsl #5
    64c2:	bls.n	6442 <FatFile::seekSet(unsigned long)+0x1a>
      goto done;
    }
    DBG_FAIL_MACRO;
    64c4:	movw	r0, #1117	; 0x45d
    64c8:	bl	5e28 <dbgPrint(unsigned short)>
    goto fail;
    64cc:	b.n	64ae <FatFile::seekSet(unsigned long)+0x86>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    return true;
    64ce:	movs	r0, #1
  return true;

fail:
  m_curCluster = tmp;
  return false;
}
    64d0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (nNew < nCur || m_curPosition == 0) {
    // must follow chain from first cluster
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
    64d4:	subs	r5, r5, r0
    64d6:	b.n	6482 <FatFile::seekSet(unsigned long)+0x5a>
    m_curCluster = 0;
    goto done;
  }
  if (isFile()) {
    if (pos > m_fileSize) {
      DBG_FAIL_MACRO;
    64d8:	movw	r0, #1110	; 0x456
    64dc:	bl	5e28 <dbgPrint(unsigned short)>
      goto fail;
    64e0:	b.n	64ae <FatFile::seekSet(unsigned long)+0x86>
    64e2:	nop

000064e4 <FatFile::rmdir()>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::rmdir() {
    64e4:	push	{r4, lr}
  // must be open subdirectory
  if (!isSubDir() || (!USE_LONG_FILE_NAMES && isLFN())) {
    64e6:	ldrb	r3, [r0, #0]
    64e8:	lsls	r2, r3, #27
    64ea:	bmi.n	64f8 <FatFile::rmdir()+0x14>
    DBG_FAIL_MACRO;
    64ec:	mov.w	r0, #976	; 0x3d0
    64f0:	bl	5e28 <dbgPrint(unsigned short)>
  m_flags |= FILE_FLAG_WRITE;
  return remove();

fail:
  return false;
}
    64f4:	movs	r0, #0
    64f6:	pop	{r4, pc}
   * \return true for success or false for failure.
   */
  bool remove(const char* path);
  /** Set the file's current position to zero. */
  void rewind() {
    seekSet(0);
    64f8:	movs	r1, #0
    64fa:	mov	r4, r0
    64fc:	bl	6428 <FatFile::seekSet(unsigned long)>
  }
  rewind();

  // make sure directory is empty
  while (1) {
    DirFat_t* dir = readDirCache(true);
    6500:	movs	r1, #1
    6502:	mov	r0, r4
    6504:	bl	63d8 <FatFile::readDirCache(bool)>
    if (!dir) {
    6508:	cbz	r0, 6528 <FatFile::rmdir()+0x44>
      }
      DBG_FAIL_MACRO;
      goto fail;
    }
    // done if past last used entry
    if (dir->name[0] == FAT_NAME_FREE) {
    650a:	ldrb	r3, [r0, #0]
    650c:	cbz	r3, 652c <FatFile::rmdir()+0x48>
      break;
    }
    // skip empty slot, '.' or '..'
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == '.') {
    650e:	cmp	r3, #229	; 0xe5
    6510:	beq.n	6500 <FatFile::rmdir()+0x1c>
    6512:	cmp	r3, #46	; 0x2e
    6514:	beq.n	6500 <FatFile::rmdir()+0x1c>
      continue;
    }
    // error not empty
    if (isFileOrSubdir(dir)) {
    6516:	ldrb	r3, [r0, #11]
    6518:	lsls	r3, r3, #28
    651a:	bmi.n	6500 <FatFile::rmdir()+0x1c>
      DBG_FAIL_MACRO;
    651c:	movw	r0, #1002	; 0x3ea
    6520:	bl	5e28 <dbgPrint(unsigned short)>
  m_flags |= FILE_FLAG_WRITE;
  return remove();

fail:
  return false;
}
    6524:	movs	r0, #0
    6526:	pop	{r4, pc}
  // make sure directory is empty
  while (1) {
    DirFat_t* dir = readDirCache(true);
    if (!dir) {
      // EOF if no error.
      if (!getError()) {
    6528:	ldrb	r3, [r4, #1]
    652a:	cbnz	r3, 6542 <FatFile::rmdir()+0x5e>
      goto fail;
    }
  }
  // convert empty directory to normal file for remove
  m_attributes = FILE_ATTR_FILE;
  m_flags |= FILE_FLAG_WRITE;
    652c:	ldrb	r3, [r4, #2]
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // convert empty directory to normal file for remove
  m_attributes = FILE_ATTR_FILE;
    652e:	movs	r2, #8
  m_flags |= FILE_FLAG_WRITE;
    6530:	orr.w	r3, r3, #2
    6534:	strb	r3, [r4, #2]
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // convert empty directory to normal file for remove
  m_attributes = FILE_ATTR_FILE;
    6536:	strb	r2, [r4, #0]
  m_flags |= FILE_FLAG_WRITE;
  return remove();
    6538:	mov	r0, r4

fail:
  return false;
}
    653a:	ldmia.w	sp!, {r4, lr}
    }
  }
  // convert empty directory to normal file for remove
  m_attributes = FILE_ATTR_FILE;
  m_flags |= FILE_FLAG_WRITE;
  return remove();
    653e:	b.w	782c <FatFile::remove()>
    if (!dir) {
      // EOF if no error.
      if (!getError()) {
        break;
      }
      DBG_FAIL_MACRO;
    6542:	movw	r0, #989	; 0x3dd
    6546:	bl	5e28 <dbgPrint(unsigned short)>
      goto fail;
    654a:	b.n	64f4 <FatFile::rmdir()+0x10>

0000654c <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)>:
  return false;
}
//------------------------------------------------------------------------------
// open a cached directory entry.
bool FatFile::openCachedEntry(FatFile* dirFile, uint16_t dirIndex,
                              oflag_t oflag, uint8_t lfnOrd) {
    654c:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6550:	mov	r8, r1
    6552:	mov	r7, r2
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
    6554:	movs	r1, #0
    6556:	movs	r2, #36	; 0x24
  return false;
}
//------------------------------------------------------------------------------
// open a cached directory entry.
bool FatFile::openCachedEntry(FatFile* dirFile, uint16_t dirIndex,
                              oflag_t oflag, uint8_t lfnOrd) {
    6558:	mov	r4, r0
    655a:	mov	r6, r3
    655c:	ldrb.w	r5, [sp, #24]
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
    6560:	bl	c92c <memset>
  // location of entry in cache
  m_vol = dirFile->m_vol;
    6564:	ldr.w	r0, [r8, #8]
  m_dirIndex = dirIndex;
  m_dirCluster = dirFile->m_firstCluster;
    6568:	ldr.w	r3, [r8, #32]
    656c:	str	r3, [r4, #12]
  DirFat_t* dir = reinterpret_cast<DirFat_t*>(m_vol->cacheAddress());
  dir += 0XF & dirIndex;
    656e:	and.w	r2, r7, #15
    6572:	add.w	r3, r0, #52	; 0x34
    6576:	add.w	r2, r3, r2, lsl #5
                              oflag_t oflag, uint8_t lfnOrd) {
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
  // location of entry in cache
  m_vol = dirFile->m_vol;
  m_dirIndex = dirIndex;
    657a:	strh	r7, [r4, #4]
bool FatFile::openCachedEntry(FatFile* dirFile, uint16_t dirIndex,
                              oflag_t oflag, uint8_t lfnOrd) {
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
  // location of entry in cache
  m_vol = dirFile->m_vol;
    657c:	str	r0, [r4, #8]
    657e:	ldrb	r1, [r2, #11]
  m_dirCluster = dirFile->m_firstCluster;
  DirFat_t* dir = reinterpret_cast<DirFat_t*>(m_vol->cacheAddress());
  dir += 0XF & dirIndex;

  // Must be file or subdirectory.
  if (!isFileOrSubdir(dir)) {
    6580:	lsls	r7, r1, #28
    6582:	bmi.n	65bc <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x70>
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_attributes = dir->attributes & FILE_ATTR_COPY;
    6584:	and.w	r1, r1, #23
    6588:	strb	r1, [r4, #0]
  if (isFileDir(dir)) {
    658a:	ldrb	r3, [r2, #11]
    m_attributes |= FILE_ATTR_FILE;
  }
  m_lfnOrd = lfnOrd;
    658c:	strb	r5, [r4, #3]
  if (!isFileOrSubdir(dir)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_attributes = dir->attributes & FILE_ATTR_COPY;
  if (isFileDir(dir)) {
    658e:	tst.w	r3, #24
    m_attributes |= FILE_ATTR_FILE;
    6592:	it	eq
    6594:	orreq.w	r1, r1, #8
  }
  m_lfnOrd = lfnOrd;

  switch (oflag & O_ACCMODE) {
    6598:	and.w	r3, r6, #3
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_attributes = dir->attributes & FILE_ATTR_COPY;
  if (isFileDir(dir)) {
    m_attributes |= FILE_ATTR_FILE;
    659c:	it	eq
    659e:	strbeq	r1, [r4, #0]
  }
  m_lfnOrd = lfnOrd;

  switch (oflag & O_ACCMODE) {
    65a0:	cmp	r3, #1
    65a2:	beq.n	664a <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xfe>
    65a4:	cmp	r3, #2
    65a6:	beq.n	65ce <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x82>
    65a8:	cbz	r3, 65ec <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xa0>
    case O_WRONLY:
      m_flags = FILE_FLAG_WRITE;
      break;

    default:
      DBG_FAIL_MACRO;
    65aa:	movw	r0, #541	; 0x21d
    65ae:	bl	5e28 <dbgPrint(unsigned short)>
    goto fail;
  }
  return true;

fail:
  m_attributes = FILE_ATTR_CLOSED;
    65b2:	movs	r0, #0
    65b4:	strb	r0, [r4, #0]
  m_flags = 0;
    65b6:	strb	r0, [r4, #2]
  return false;
    65b8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  DirFat_t* dir = reinterpret_cast<DirFat_t*>(m_vol->cacheAddress());
  dir += 0XF & dirIndex;

  // Must be file or subdirectory.
  if (!isFileOrSubdir(dir)) {
    DBG_FAIL_MACRO;
    65bc:	movw	r0, #514	; 0x202
    65c0:	bl	5e28 <dbgPrint(unsigned short)>
    goto fail;
  }
  return true;

fail:
  m_attributes = FILE_ATTR_CLOSED;
    65c4:	movs	r0, #0
    65c6:	strb	r0, [r4, #0]
  m_flags = 0;
    65c8:	strb	r0, [r4, #2]
  return false;
    65ca:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      DBG_FAIL_MACRO;
      goto fail;
  }

  if (m_flags & FILE_FLAG_WRITE) {
    if (isSubDir() || isReadOnly()) {
    65ce:	ldrb	r3, [r4, #0]
      }
      m_flags = FILE_FLAG_READ;
      break;

    case O_RDWR:
      m_flags = FILE_FLAG_READ | FILE_FLAG_WRITE;
    65d0:	movs	r5, #3
      DBG_FAIL_MACRO;
      goto fail;
  }

  if (m_flags & FILE_FLAG_WRITE) {
    if (isSubDir() || isReadOnly()) {
    65d2:	tst.w	r3, #17
      }
      m_flags = FILE_FLAG_READ;
      break;

    case O_RDWR:
      m_flags = FILE_FLAG_READ | FILE_FLAG_WRITE;
    65d6:	strb	r5, [r4, #2]
      DBG_FAIL_MACRO;
      goto fail;
  }

  if (m_flags & FILE_FLAG_WRITE) {
    if (isSubDir() || isReadOnly()) {
    65d8:	beq.n	6656 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x10a>
      DBG_FAIL_MACRO;
    65da:	movw	r0, #547	; 0x223
    65de:	bl	5e28 <dbgPrint(unsigned short)>
    goto fail;
  }
  return true;

fail:
  m_attributes = FILE_ATTR_CLOSED;
    65e2:	movs	r0, #0
    65e4:	strb	r0, [r4, #0]
  m_flags = 0;
    65e6:	strb	r0, [r4, #2]
  return false;
    65e8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  }
  m_lfnOrd = lfnOrd;

  switch (oflag & O_ACCMODE) {
    case O_RDONLY:
      if (oflag & O_TRUNC) {
    65ec:	ands.w	lr, r6, #1024	; 0x400
    65f0:	bne.n	666e <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x122>
    65f2:	movs	r5, #1
    if (isSubDir() || isReadOnly()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  m_flags |= (oflag & O_APPEND ? FILE_FLAG_APPEND : 0);
    65f4:	and.w	r3, r6, #8
    65f8:	orrs	r5, r3
    65fa:	uxtb	r5, r5
    65fc:	strb	r5, [r4, #2]

  m_dirSector = m_vol->cacheSectorNumber();

  // copy first cluster number for directory fields
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16)
                 | getLe16(dir->firstClusterLow);
    65fe:	ldrh	r1, [r2, #20]
    6600:	ldrh	r3, [r2, #26]
      goto fail;
    }
  }
  m_flags |= (oflag & O_APPEND ? FILE_FLAG_APPEND : 0);

  m_dirSector = m_vol->cacheSectorNumber();
    6602:	ldr	r7, [r0, #48]	; 0x30
    6604:	str	r7, [r4, #24]

  // copy first cluster number for directory fields
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16)
                 | getLe16(dir->firstClusterLow);
    6606:	orr.w	r1, r3, r1, lsl #16

  if (oflag & O_TRUNC) {
    660a:	cmp.w	lr, #0
    660e:	beq.n	6622 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xd6>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
    6610:	cbnz	r1, 665e <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x112>
      DBG_FAIL_MACRO;
      goto fail;
    }

    // need to update directory entry
    m_flags |= FILE_FLAG_DIR_DIRTY;
    6612:	orn	r5, r5, #127	; 0x7f
  } else {
    m_firstCluster = firstCluster;
    m_fileSize = getLe32(dir->fileSize);
  }
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
    6616:	lsls	r3, r6, #17
      DBG_FAIL_MACRO;
      goto fail;
    }

    // need to update directory entry
    m_flags |= FILE_FLAG_DIR_DIRTY;
    6618:	strb	r5, [r4, #2]
  } else {
    m_firstCluster = firstCluster;
    m_fileSize = getLe32(dir->fileSize);
  }
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
    661a:	bmi.n	662c <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xe0>
    DBG_FAIL_MACRO;
    goto fail;
  }
  return true;
    661c:	movs	r0, #1
    661e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    }

    // need to update directory entry
    m_flags |= FILE_FLAG_DIR_DIRTY;
  } else {
    m_firstCluster = firstCluster;
    6622:	str	r1, [r4, #32]
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
}
inline uint32_t getLe32(const uint8_t* src) {
  return *reinterpret_cast<const uint32_t*>(src);
    6624:	ldr	r3, [r2, #28]
    m_fileSize = getLe32(dir->fileSize);
    6626:	str	r3, [r4, #28]
  }
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
    6628:	lsls	r3, r6, #17
    662a:	bpl.n	661c <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xd0>
    662c:	ldr	r1, [r4, #28]
    662e:	mov	r0, r4
    6630:	bl	6428 <FatFile::seekSet(unsigned long)>
    6634:	cmp	r0, #0
    6636:	bne.n	661c <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xd0>
    DBG_FAIL_MACRO;
    6638:	mov.w	r0, #572	; 0x23c
    663c:	bl	5e28 <dbgPrint(unsigned short)>
    goto fail;
  }
  return true;

fail:
  m_attributes = FILE_ATTR_CLOSED;
    6640:	movs	r0, #0
    6642:	strb	r0, [r4, #0]
  m_flags = 0;
    6644:	strb	r0, [r4, #2]
  return false;
    6646:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      DBG_FAIL_MACRO;
      goto fail;
  }

  if (m_flags & FILE_FLAG_WRITE) {
    if (isSubDir() || isReadOnly()) {
    664a:	ldrb	r3, [r4, #0]
    case O_RDWR:
      m_flags = FILE_FLAG_READ | FILE_FLAG_WRITE;
      break;

    case O_WRONLY:
      m_flags = FILE_FLAG_WRITE;
    664c:	movs	r5, #2
      DBG_FAIL_MACRO;
      goto fail;
  }

  if (m_flags & FILE_FLAG_WRITE) {
    if (isSubDir() || isReadOnly()) {
    664e:	tst.w	r3, #17
    case O_RDWR:
      m_flags = FILE_FLAG_READ | FILE_FLAG_WRITE;
      break;

    case O_WRONLY:
      m_flags = FILE_FLAG_WRITE;
    6652:	strb	r5, [r4, #2]
      DBG_FAIL_MACRO;
      goto fail;
  }

  if (m_flags & FILE_FLAG_WRITE) {
    if (isSubDir() || isReadOnly()) {
    6654:	bne.n	65da <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x8e>
    6656:	sxtb	r5, r5
    6658:	and.w	lr, r6, #1024	; 0x400
    665c:	b.n	65f4 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xa8>
  // copy first cluster number for directory fields
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16)
                 | getLe16(dir->firstClusterLow);

  if (oflag & O_TRUNC) {
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
    665e:	bl	7154 <FatPartition::freeChain(unsigned long)>
    6662:	cbnz	r0, 6678 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x12c>
      DBG_FAIL_MACRO;
    6664:	movw	r0, #561	; 0x231
    6668:	bl	5e28 <dbgPrint(unsigned short)>
      goto fail;
    666c:	b.n	65b2 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x66>
  m_lfnOrd = lfnOrd;

  switch (oflag & O_ACCMODE) {
    case O_RDONLY:
      if (oflag & O_TRUNC) {
        DBG_FAIL_MACRO;
    666e:	movw	r0, #526	; 0x20e
    6672:	bl	5e28 <dbgPrint(unsigned short)>
        goto fail;
    6676:	b.n	65b2 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x66>
    6678:	ldrb	r5, [r4, #2]
    667a:	b.n	6612 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xc6>

0000667c <FatFile::openNext(FatFile*, int)>:
  m_attributes = FILE_ATTR_CLOSED;
  m_flags = 0;
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openNext(FatFile* dirFile, oflag_t oflag) {
    667c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  DirLfn_t* ldir;
  uint8_t lfnOrd = 0;
  uint16_t index;

  // Check for not open and valid directory..
  if (isOpen() || !dirFile->isDir() || (dirFile->curPosition() & 0X1F)) {
    6680:	ldrb	r3, [r0, #0]
  m_attributes = FILE_ATTR_CLOSED;
  m_flags = 0;
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openNext(FatFile* dirFile, oflag_t oflag) {
    6682:	sub	sp, #12
  DirLfn_t* ldir;
  uint8_t lfnOrd = 0;
  uint16_t index;

  // Check for not open and valid directory..
  if (isOpen() || !dirFile->isDir() || (dirFile->curPosition() & 0X1F)) {
    6684:	cbnz	r3, 6690 <FatFile::openNext(FatFile*, int)+0x14>
    6686:	ldrb	r3, [r1, #0]
    6688:	tst.w	r3, #112	; 0x70
    668c:	mov	r5, r1
    668e:	bne.n	66a2 <FatFile::openNext(FatFile*, int)+0x26>
    DBG_FAIL_MACRO;
    6690:	movw	r0, #591	; 0x24f
    6694:	bl	5e28 <dbgPrint(unsigned short)>
      lfnOrd = 0;
    }
  }

fail:
  return false;
    6698:	movs	r4, #0
}
    669a:	mov	r0, r4
    669c:	add	sp, #12
    669e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    66a2:	ldr	r6, [r1, #20]
  DirLfn_t* ldir;
  uint8_t lfnOrd = 0;
  uint16_t index;

  // Check for not open and valid directory..
  if (isOpen() || !dirFile->isDir() || (dirFile->curPosition() & 0X1F)) {
    66a4:	ands.w	r7, r6, #31
    66a8:	bne.n	6690 <FatFile::openNext(FatFile*, int)+0x14>
    66aa:	mov	r8, r0
    66ac:	mov	r9, r2
    66ae:	mov	sl, r7
    66b0:	b.n	66b6 <FatFile::openNext(FatFile*, int)+0x3a>
      if (ldir->order & FAT_ORDER_LAST_LONG_ENTRY) {
        lfnOrd = ldir->order & 0X1F;
        checksum = ldir->checksum;
      }
    } else {
      lfnOrd = 0;
    66b2:	movs	r7, #0
    66b4:	ldr	r6, [r5, #20]
    goto fail;
  }
  while (1) {
    // read entry into cache
    index = dirFile->curPosition()/32;
    DirFat_t* dir = dirFile->readDirCache();
    66b6:	movs	r1, #0
    66b8:	mov	r0, r5
    66ba:	bl	63d8 <FatFile::readDirCache(bool)>
    if (!dir) {
    66be:	mov	r4, r0
    66c0:	cbz	r0, 66ee <FatFile::openNext(FatFile*, int)+0x72>
        DBG_FAIL_MACRO;
      }
      goto fail;
    }
    // done if last entry
    if (dir->name[0] == FAT_NAME_FREE) {
    66c2:	ldrb	r3, [r0, #0]
    66c4:	cmp	r3, #0
    66c6:	beq.n	6698 <FatFile::openNext(FatFile*, int)+0x1c>
      goto fail;
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == '.' || dir->name[0] == FAT_NAME_DELETED) {
    66c8:	cmp	r3, #46	; 0x2e
    66ca:	beq.n	66b2 <FatFile::openNext(FatFile*, int)+0x36>
    66cc:	cmp	r3, #229	; 0xe5
    66ce:	beq.n	66b2 <FatFile::openNext(FatFile*, int)+0x36>
    66d0:	ldrb	r1, [r0, #11]
      lfnOrd = 0;
    } else if (isFileOrSubdir(dir)) {
    66d2:	and.w	r2, r1, #8
    66d6:	and.w	fp, r2, #255	; 0xff
    66da:	cbz	r2, 66fe <FatFile::openNext(FatFile*, int)+0x82>
      if (!openCachedEntry(dirFile, index, oflag, lfnOrd)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      return true;
    } else if (isLongName(dir)) {
    66dc:	cmp	r1, #15
    66de:	bne.n	66b2 <FatFile::openNext(FatFile*, int)+0x36>
      ldir = reinterpret_cast<DirLfn_t*>(dir);
      if (ldir->order & FAT_ORDER_LAST_LONG_ENTRY) {
    66e0:	lsls	r2, r3, #25
    66e2:	bpl.n	66b4 <FatFile::openNext(FatFile*, int)+0x38>
        lfnOrd = ldir->order & 0X1F;
    66e4:	and.w	r7, r3, #31
        checksum = ldir->checksum;
    66e8:	ldrb.w	sl, [r0, #13]
    66ec:	b.n	66b4 <FatFile::openNext(FatFile*, int)+0x38>
  while (1) {
    // read entry into cache
    index = dirFile->curPosition()/32;
    DirFat_t* dir = dirFile->readDirCache();
    if (!dir) {
      if (dirFile->getError()) {
    66ee:	ldrb	r3, [r5, #1]
    66f0:	cmp	r3, #0
    66f2:	beq.n	6698 <FatFile::openNext(FatFile*, int)+0x1c>
        DBG_FAIL_MACRO;
    66f4:	mov.w	r0, #600	; 0x258
    66f8:	bl	5e28 <dbgPrint(unsigned short)>
    66fc:	b.n	669a <FatFile::openNext(FatFile*, int)+0x1e>
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == '.' || dir->name[0] == FAT_NAME_DELETED) {
      lfnOrd = 0;
    } else if (isFileOrSubdir(dir)) {
      if (lfnOrd && checksum != lfnChecksum(dir->name)) {
    66fe:	cbnz	r7, 6720 <FatFile::openNext(FatFile*, int)+0xa4>
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!openCachedEntry(dirFile, index, oflag, lfnOrd)) {
    6700:	str	r7, [sp, #0]
    6702:	mov	r3, r9
    6704:	ubfx	r2, r6, #5, #16
    6708:	mov	r1, r5
    670a:	mov	r0, r8
    670c:	bl	654c <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)>
    6710:	mov	r4, r0
    6712:	cmp	r0, #0
    6714:	bne.n	669a <FatFile::openNext(FatFile*, int)+0x1e>
        DBG_FAIL_MACRO;
    6716:	movw	r0, #617	; 0x269
    671a:	bl	5e28 <dbgPrint(unsigned short)>
        goto fail;
    671e:	b.n	669a <FatFile::openNext(FatFile*, int)+0x1e>
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == '.' || dir->name[0] == FAT_NAME_DELETED) {
      lfnOrd = 0;
    } else if (isFileOrSubdir(dir)) {
      if (lfnOrd && checksum != lfnChecksum(dir->name)) {
    6720:	bl	7438 <FatFile::lfnChecksum(unsigned char*)>
    6724:	cmp	sl, r0
    6726:	beq.n	6700 <FatFile::openNext(FatFile*, int)+0x84>
        DBG_FAIL_MACRO;
    6728:	movw	r0, #613	; 0x265
      lfnOrd = 0;
    }
  }

fail:
  return false;
    672c:	mov	r4, fp
    // skip empty slot or '.' or '..'
    if (dir->name[0] == '.' || dir->name[0] == FAT_NAME_DELETED) {
      lfnOrd = 0;
    } else if (isFileOrSubdir(dir)) {
      if (lfnOrd && checksum != lfnChecksum(dir->name)) {
        DBG_FAIL_MACRO;
    672e:	bl	5e28 <dbgPrint(unsigned short)>
        goto fail;
    6732:	b.n	669a <FatFile::openNext(FatFile*, int)+0x1e>

00006734 <FatFile::mkdir(FatFile*, fname_t*)>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::mkdir(FatFile* parent, fname_t* fname) {
    6734:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  uint32_t sector;
  DirFat_t dot;
  DirFat_t* dir;
  cache_t* pc;

  if (!parent->isDir()) {
    6738:	ldrb	r3, [r1, #0]
    673a:	tst.w	r3, #112	; 0x70

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::mkdir(FatFile* parent, fname_t* fname) {
    673e:	sub	sp, #36	; 0x24
  uint32_t sector;
  DirFat_t dot;
  DirFat_t* dir;
  cache_t* pc;

  if (!parent->isDir()) {
    6740:	beq.w	6872 <FatFile::mkdir(FatFile*, fname_t*)+0x13e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // create a normal file
  if (!open(parent, fname, O_CREAT | O_EXCL | O_RDWR)) {
    6744:	movw	r3, #2562	; 0xa02
    6748:	mov	r6, r1
    674a:	mov	r4, r0
    674c:	bl	7b14 <FatFile::open(FatFile*, fname_t*, int)>
    6750:	cmp	r0, #0
    6752:	beq.w	6862 <FatFile::mkdir(FatFile*, fname_t*)+0x12e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // convert file to directory
  m_flags = FILE_FLAG_READ;
    6756:	movs	r2, #1
  m_attributes = FILE_ATTR_SUBDIR;
    6758:	movs	r3, #16
  if (!open(parent, fname, O_CREAT | O_EXCL | O_RDWR)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // convert file to directory
  m_flags = FILE_FLAG_READ;
    675a:	strb	r2, [r4, #2]
  m_attributes = FILE_ATTR_SUBDIR;
    675c:	strb	r3, [r4, #0]

  // allocate and zero first cluster
  if (!addDirCluster()) {
    675e:	mov	r0, r4
    6760:	bl	5ea8 <FatFile::addDirCluster()>
    6764:	cmp	r0, #0
    6766:	beq.w	6898 <FatFile::mkdir(FatFile*, fname_t*)+0x164>
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_firstCluster = m_curCluster;
    676a:	ldr	r3, [r4, #16]
    676c:	str	r3, [r4, #32]
    676e:	movs	r1, #0
    6770:	mov	r0, r4
    6772:	bl	6428 <FatFile::seekSet(unsigned long)>
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    6776:	ldrb	r3, [r4, #0]
    6778:	cmp	r3, #0
    677a:	bne.w	6882 <FatFile::mkdir(FatFile*, fname_t*)+0x14e>
  if (!sync()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // cache entry - should already be in cache due to sync() call
  dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
    677e:	movs	r1, #1
    6780:	mov	r0, r4
    6782:	bl	5f7c <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    6786:	mov	r5, r0
    6788:	cmp	r0, #0
    678a:	beq.w	68b2 <FatFile::mkdir(FatFile*, fname_t*)+0x17e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // change directory entry  attribute
  dir->attributes = FAT_ATTRIB_DIRECTORY;
    678e:	movs	r3, #16
    6790:	strb	r3, [r0, #11]

  // make entry for '.'
  memcpy(&dot, dir, sizeof(dot));
    6792:	ldr	r2, [r0, #8]
    6794:	ldr	r1, [r5, #4]
    6796:	ldr	r3, [r5, #12]
    6798:	ldr	r0, [r0, #0]
    679a:	ldrh.w	r8, [r5, #20]
    679e:	ldrh.w	r9, [r5, #26]
    67a2:	mov	r7, sp
    67a4:	stmia	r7!, {r0, r1, r2, r3}
    67a6:	ldr	r1, [r5, #20]
    67a8:	ldr	r2, [r5, #24]
    67aa:	ldr	r3, [r5, #28]
    67ac:	ldr	r0, [r5, #16]
  dot.name[0] = '.';
    67ae:	add	r5, sp, #32
  }
  // change directory entry  attribute
  dir->attributes = FAT_ATTRIB_DIRECTORY;

  // make entry for '.'
  memcpy(&dot, dir, sizeof(dot));
    67b0:	stmia	r7!, {r0, r1, r2, r3}
  dot.name[0] = '.';
    67b2:	movs	r3, #46	; 0x2e
    67b4:	strb.w	r3, [r5, #-32]!
    67b8:	add.w	r1, sp, #10
    67bc:	mov	r3, r5
  for (uint8_t i = 1; i < 11; i++) {
    dot.name[i] = ' ';
    67be:	movs	r2, #32
    67c0:	strb.w	r2, [r3, #1]!
  dir->attributes = FAT_ATTRIB_DIRECTORY;

  // make entry for '.'
  memcpy(&dot, dir, sizeof(dot));
  dot.name[0] = '.';
  for (uint8_t i = 1; i < 11; i++) {
    67c4:	cmp	r1, r3
    67c6:	bne.n	67c0 <FatFile::mkdir(FatFile*, fname_t*)+0x8c>
    dot.name[i] = ' ';
  }

  // cache sector for '.'  and '..'
  sector = m_vol->clusterStartSector(m_firstCluster);
    67c8:	ldr	r1, [r4, #32]
    67ca:	ldr	r0, [r4, #8]
    67cc:	bl	6f68 <FatPartition::clusterStartSector(unsigned long) const>
  bool cacheSync() {
    return m_cache.sync() && syncDevice();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t sector, uint8_t options) {
    return m_cache.read(sector, options);
    67d0:	ldr	r3, [r4, #8]
    67d2:	mov	r1, r0
    67d4:	movs	r2, #1
    67d6:	add.w	r0, r3, #40	; 0x28
    67da:	bl	6edc <FatCache::read(unsigned long, unsigned char)>
  pc = m_vol->cacheFetchData(sector, FatCache::CACHE_FOR_WRITE);
  if (!pc) {
    67de:	mov	lr, r0
    67e0:	cmp	r0, #0
    67e2:	beq.n	68a8 <FatFile::mkdir(FatFile*, fname_t*)+0x174>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // copy '.' to sector
  memcpy(&pc->dir[0], &dot, sizeof(dot));
    67e4:	strh.w	r8, [sp, #20]
    67e8:	strh.w	r9, [sp, #26]
    67ec:	mov	r7, r5
    67ee:	ldmia	r7!, {r0, r1, r2, r3}
    67f0:	str.w	r0, [lr]
    67f4:	str.w	r1, [lr, #4]
    67f8:	str.w	r2, [lr, #8]
    67fc:	str.w	r3, [lr, #12]
    6800:	ldmia	r7!, {r0, r1, r2, r3}
    6802:	str.w	r0, [lr, #16]
    6806:	str.w	r1, [lr, #20]
    680a:	str.w	r2, [lr, #24]
    680e:	str.w	r3, [lr, #28]
  // make entry for '..'
  dot.name[1] = '.';
  setLe16(dot.firstClusterLow, parent->m_firstCluster & 0XFFFF);
    6812:	ldr	r3, [r6, #32]
  setLe16(dot.firstClusterHigh, parent->m_firstCluster >> 16);
  // copy '..' to sector
  memcpy(&pc->dir[1], &dot, sizeof(dot));
    6814:	strh.w	r3, [sp, #26]
    goto fail;
  }
  // copy '.' to sector
  memcpy(&pc->dir[0], &dot, sizeof(dot));
  // make entry for '..'
  dot.name[1] = '.';
    6818:	movs	r2, #46	; 0x2e
  setLe16(dot.firstClusterLow, parent->m_firstCluster & 0XFFFF);
  setLe16(dot.firstClusterHigh, parent->m_firstCluster >> 16);
  // copy '..' to sector
  memcpy(&pc->dir[1], &dot, sizeof(dot));
    681a:	lsrs	r3, r3, #16
    681c:	strh.w	r3, [sp, #20]
    goto fail;
  }
  // copy '.' to sector
  memcpy(&pc->dir[0], &dot, sizeof(dot));
  // make entry for '..'
  dot.name[1] = '.';
    6820:	strb.w	r2, [sp, #1]
  setLe16(dot.firstClusterLow, parent->m_firstCluster & 0XFFFF);
  setLe16(dot.firstClusterHigh, parent->m_firstCluster >> 16);
  // copy '..' to sector
  memcpy(&pc->dir[1], &dot, sizeof(dot));
    6824:	ldmia	r5!, {r0, r1, r2, r3}
    6826:	add.w	r6, lr, #32
    682a:	str.w	r0, [lr, #32]
    682e:	str	r1, [r6, #4]
    6830:	str	r2, [r6, #8]
    6832:	str	r3, [r6, #12]
    6834:	ldmia	r5!, {r0, r1, r2, r3}
    6836:	str	r0, [r6, #16]
    6838:	str	r1, [r6, #20]
    683a:	str	r2, [r6, #24]
    683c:	str	r3, [r6, #28]
  // write first sector
  return m_vol->cacheSync();
    683e:	ldr	r4, [r4, #8]
  cache_t* cacheFetchFat(uint32_t sector, uint8_t options) {
    return m_fatCache.read(sector,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    6840:	add.w	r0, r4, #40	; 0x28
    6844:	bl	6f58 <FatCache::sync()>
    6848:	cbz	r0, 686a <FatFile::mkdir(FatFile*, fname_t*)+0x136>
    684a:	add.w	r0, r4, #564	; 0x234
    684e:	bl	6f58 <FatCache::sync()>
    6852:	cbz	r0, 686a <FatFile::mkdir(FatFile*, fname_t*)+0x136>
    6854:	ldr	r0, [r4, #0]
  // sector I/O functions.
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
  }
  bool syncDevice() {
    return m_blockDev->syncDevice();
    6856:	ldr	r3, [r0, #0]
    6858:	ldr	r3, [r3, #20]

fail:
  return false;
}
    685a:	add	sp, #36	; 0x24
    685c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    6860:	bx	r3
    DBG_FAIL_MACRO;
    goto fail;
  }
  // create a normal file
  if (!open(parent, fname, O_CREAT | O_EXCL | O_RDWR)) {
    DBG_FAIL_MACRO;
    6862:	mov.w	r0, #346	; 0x15a
    6866:	bl	5e28 <dbgPrint(unsigned short)>
  // write first sector
  return m_vol->cacheSync();

fail:
  return false;
}
    686a:	movs	r0, #0
    686c:	add	sp, #36	; 0x24
    686e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  DirFat_t dot;
  DirFat_t* dir;
  cache_t* pc;

  if (!parent->isDir()) {
    DBG_FAIL_MACRO;
    6872:	movw	r0, #341	; 0x155
    6876:	bl	5e28 <dbgPrint(unsigned short)>
  // write first sector
  return m_vol->cacheSync();

fail:
  return false;
}
    687a:	movs	r0, #0
    687c:	add	sp, #36	; 0x24
    687e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    6882:	mov	r0, r4
    6884:	bl	5fa8 <FatFile::sync() [clone .part.38]>
  }
  m_firstCluster = m_curCluster;
  // Set to start of dir
  rewind();
  // force entry to device
  if (!sync()) {
    6888:	cmp	r0, #0
    688a:	bne.w	677e <FatFile::mkdir(FatFile*, fname_t*)+0x4a>
    DBG_FAIL_MACRO;
    688e:	movw	r0, #363	; 0x16b
    6892:	bl	5e28 <dbgPrint(unsigned short)>
    6896:	b.n	686a <FatFile::mkdir(FatFile*, fname_t*)+0x136>
  m_flags = FILE_FLAG_READ;
  m_attributes = FILE_ATTR_SUBDIR;

  // allocate and zero first cluster
  if (!addDirCluster()) {
    DBG_FAIL_MACRO;
    6898:	movw	r0, #355	; 0x163
    689c:	bl	5e28 <dbgPrint(unsigned short)>
  // write first sector
  return m_vol->cacheSync();

fail:
  return false;
}
    68a0:	movs	r0, #0
    68a2:	add	sp, #36	; 0x24
    68a4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

  // cache sector for '.'  and '..'
  sector = m_vol->clusterStartSector(m_firstCluster);
  pc = m_vol->cacheFetchData(sector, FatCache::CACHE_FOR_WRITE);
  if (!pc) {
    DBG_FAIL_MACRO;
    68a8:	mov.w	r0, #386	; 0x182
    68ac:	bl	5e28 <dbgPrint(unsigned short)>
    68b0:	b.n	686a <FatFile::mkdir(FatFile*, fname_t*)+0x136>
    goto fail;
  }
  // cache entry - should already be in cache due to sync() call
  dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
  if (!dir) {
    DBG_FAIL_MACRO;
    68b2:	movw	r0, #369	; 0x171
    68b6:	bl	5e28 <dbgPrint(unsigned short)>
    68ba:	b.n	686a <FatFile::mkdir(FatFile*, fname_t*)+0x136>

000068bc <FatFile::mkdir(FatFile*, char const*, bool)>:
void FatFile::fsetpos(const fspos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
}
//------------------------------------------------------------------------------
bool FatFile::mkdir(FatFile* parent, const char* path, bool pFlag) {
    68bc:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    68c0:	mov	r6, r0
    68c2:	sub	sp, #72	; 0x48
  fname_t fname;
  FatFile tmpDir;

  if (isOpen() || !parent->isDir()) {
    68c4:	ldrb	r4, [r6, #0]
void FatFile::fsetpos(const fspos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
}
//------------------------------------------------------------------------------
bool FatFile::mkdir(FatFile* parent, const char* path, bool pFlag) {
    68c6:	str	r2, [sp, #4]
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attributes(FILE_ATTR_CLOSED), m_error(0), m_flags(0) {}
    68c8:	movs	r0, #0
    68ca:	strb.w	r0, [sp, #36]	; 0x24
    68ce:	strb.w	r0, [sp, #37]	; 0x25
    68d2:	strb.w	r0, [sp, #38]	; 0x26
  fname_t fname;
  FatFile tmpDir;

  if (isOpen() || !parent->isDir()) {
    68d6:	cmp	r4, #0
    68d8:	bne.n	694a <FatFile::mkdir(FatFile*, char const*, bool)+0x8e>
    68da:	mov	r8, r3
    68dc:	ldrb	r3, [r1, #0]
    68de:	tst.w	r3, #112	; 0x70
    68e2:	mov	r5, r1
    68e4:	beq.n	694a <FatFile::mkdir(FatFile*, char const*, bool)+0x8e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    68e6:	ldrb	r3, [r2, #0]
    68e8:	cmp	r3, #47	; 0x2f
    68ea:	mov	r0, r2
    68ec:	beq.n	692c <FatFile::mkdir(FatFile*, char const*, bool)+0x70>
      goto fail;
    }
    if (!*path) {
      break;
    }
    if (!open(parent, &fname, O_RDONLY)) {
    68ee:	movs	r7, #0
      goto fail;
    }
    parent = &tmpDir;
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
    68f0:	add	r2, sp, #4
    68f2:	add	r1, sp, #12
    68f4:	bl	75c0 <FatFile::parsePathName(char const*, fname_t*, char const**)>
      goto fail;
    }
    if (!*path) {
      break;
    }
    if (!open(parent, &fname, O_RDONLY)) {
    68f8:	add	r2, sp, #12
      goto fail;
    }
    parent = &tmpDir;
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
    68fa:	mov	r4, r0
      goto fail;
    }
    if (!*path) {
      break;
    }
    if (!open(parent, &fname, O_RDONLY)) {
    68fc:	mov	r1, r5
    68fe:	movs	r3, #0
      goto fail;
    }
    parent = &tmpDir;
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
    6900:	cmp	r0, #0
    6902:	beq.n	6990 <FatFile::mkdir(FatFile*, char const*, bool)+0xd4>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!*path) {
    6904:	ldr	r4, [sp, #4]
    6906:	ldrb	r4, [r4, #0]
      break;
    }
    if (!open(parent, &fname, O_RDONLY)) {
    6908:	mov	r0, r6
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!*path) {
    690a:	cmp	r4, #0
    690c:	beq.n	69a0 <FatFile::mkdir(FatFile*, char const*, bool)+0xe4>
      break;
    }
    if (!open(parent, &fname, O_RDONLY)) {
    690e:	bl	7b14 <FatFile::open(FatFile*, fname_t*, int)>
    6912:	mov	r4, r0
    6914:	cbnz	r0, 696a <FatFile::mkdir(FatFile*, char const*, bool)+0xae>
      if (!pFlag || !mkdir(parent, &fname)) {
    6916:	cmp.w	r8, #0
    691a:	bne.n	695c <FatFile::mkdir(FatFile*, char const*, bool)+0xa0>
        DBG_FAIL_MACRO;
    691c:	mov.w	r0, #320	; 0x140
    6920:	bl	5e28 <dbgPrint(unsigned short)>
  }
  return mkdir(parent, &fname);

fail:
  return false;
}
    6924:	mov	r0, r4
    6926:	add	sp, #72	; 0x48
    6928:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
      path++;
    692c:	adds	r0, #1
    692e:	str	r0, [sp, #4]
  if (isOpen() || !parent->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
    6930:	ldrb	r3, [r0, #0]
    6932:	cmp	r3, #47	; 0x2f
    6934:	beq.n	692c <FatFile::mkdir(FatFile*, char const*, bool)+0x70>
      path++;
    }
    if (!tmpDir.openRoot(parent->m_vol)) {
    6936:	ldr	r1, [r5, #8]
    6938:	add	r0, sp, #36	; 0x24
    693a:	bl	606c <FatFile::openRoot(FatVolume*)>
    693e:	mov	r4, r0
    6940:	cmp	r0, #0
    6942:	beq.n	69ae <FatFile::mkdir(FatFile*, char const*, bool)+0xf2>
    6944:	ldr	r0, [sp, #4]
      DBG_FAIL_MACRO;
      goto fail;
    }
    parent = &tmpDir;
    6946:	add	r5, sp, #36	; 0x24
    6948:	b.n	68ee <FatFile::mkdir(FatFile*, char const*, bool)+0x32>
bool FatFile::mkdir(FatFile* parent, const char* path, bool pFlag) {
  fname_t fname;
  FatFile tmpDir;

  if (isOpen() || !parent->isDir()) {
    DBG_FAIL_MACRO;
    694a:	movw	r0, #297	; 0x129
    694e:	bl	5e28 <dbgPrint(unsigned short)>
    close();
  }
  return mkdir(parent, &fname);

fail:
  return false;
    6952:	movs	r4, #0
}
    6954:	mov	r0, r4
    6956:	add	sp, #72	; 0x48
    6958:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    }
    if (!*path) {
      break;
    }
    if (!open(parent, &fname, O_RDONLY)) {
      if (!pFlag || !mkdir(parent, &fname)) {
    695c:	mov	r1, r5
    695e:	add	r2, sp, #12
    6960:	mov	r0, r6
    6962:	bl	6734 <FatFile::mkdir(FatFile*, fname_t*)>
    6966:	cmp	r0, #0
    6968:	beq.n	691c <FatFile::mkdir(FatFile*, char const*, bool)+0x60>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    tmpDir = *this;
    696a:	mov	r5, r6
    696c:	ldmia	r5!, {r0, r1, r2, r3}
    696e:	add	r4, sp, #36	; 0x24
    6970:	stmia	r4!, {r0, r1, r2, r3}
    6972:	ldmia	r5!, {r0, r1, r2, r3}
    6974:	stmia	r4!, {r0, r1, r2, r3}
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    6976:	ldrb	r3, [r6, #0]
      if (!pFlag || !mkdir(parent, &fname)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    tmpDir = *this;
    6978:	ldr	r2, [r5, #0]
    697a:	str	r2, [r4, #0]
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    697c:	cbnz	r3, 6988 <FatFile::mkdir(FatFile*, char const*, bool)+0xcc>
  return nullptr;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
  bool rtn = sync();
  m_attributes = FILE_ATTR_CLOSED;
    697e:	strb	r7, [r6, #0]
  m_flags = 0;
    6980:	strb	r7, [r6, #2]
    6982:	ldr	r0, [sp, #4]
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    tmpDir = *this;
    parent = &tmpDir;
    6984:	add	r5, sp, #36	; 0x24
    6986:	b.n	68f0 <FatFile::mkdir(FatFile*, char const*, bool)+0x34>
    6988:	mov	r0, r6
    698a:	bl	5fa8 <FatFile::sync() [clone .part.38]>
    698e:	b.n	697e <FatFile::mkdir(FatFile*, char const*, bool)+0xc2>
    }
    parent = &tmpDir;
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
      DBG_FAIL_MACRO;
    6990:	mov.w	r0, #312	; 0x138
    6994:	bl	5e28 <dbgPrint(unsigned short)>
  }
  return mkdir(parent, &fname);

fail:
  return false;
}
    6998:	mov	r0, r4
    699a:	add	sp, #72	; 0x48
    699c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    }
    tmpDir = *this;
    parent = &tmpDir;
    close();
  }
  return mkdir(parent, &fname);
    69a0:	add	r2, sp, #12
    69a2:	mov	r1, r5
    69a4:	mov	r0, r6
    69a6:	bl	6734 <FatFile::mkdir(FatFile*, fname_t*)>
    69aa:	mov	r4, r0
    69ac:	b.n	6924 <FatFile::mkdir(FatFile*, char const*, bool)+0x68>
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
      path++;
    }
    if (!tmpDir.openRoot(parent->m_vol)) {
      DBG_FAIL_MACRO;
    69ae:	movw	r0, #305	; 0x131
    69b2:	bl	5e28 <dbgPrint(unsigned short)>
      goto fail;
    69b6:	b.n	6924 <FatFile::mkdir(FatFile*, char const*, bool)+0x68>

000069b8 <FatFile::rename(FatFile*, char const*)>:
//------------------------------------------------------------------------------
bool FatFile::rename(const char* newPath) {
  return rename(m_vol->vwd(), newPath);
}
//------------------------------------------------------------------------------
bool FatFile::rename(FatFile* dirFile, const char* newPath) {
    69b8:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  FatFile oldFile;
  cache_t* pc;
  DirFat_t* dir;

  // Must be an open file or subdirectory.
  if (!(isFile() || isSubDir())) {
    69bc:	ldrb	r4, [r0, #0]
//------------------------------------------------------------------------------
bool FatFile::rename(const char* newPath) {
  return rename(m_vol->vwd(), newPath);
}
//------------------------------------------------------------------------------
bool FatFile::rename(FatFile* dirFile, const char* newPath) {
    69be:	sub	sp, #104	; 0x68
    69c0:	movs	r6, #0
  FatFile oldFile;
  cache_t* pc;
  DirFat_t* dir;

  // Must be an open file or subdirectory.
  if (!(isFile() || isSubDir())) {
    69c2:	ands.w	r4, r4, #24
    69c6:	strb.w	r6, [sp, #32]
    69ca:	strb.w	r6, [sp, #33]	; 0x21
    69ce:	strb.w	r6, [sp, #34]	; 0x22
    69d2:	strb.w	r6, [sp, #68]	; 0x44
    69d6:	strb.w	r6, [sp, #69]	; 0x45
    69da:	strb.w	r6, [sp, #70]	; 0x46
    69de:	bne.n	69f0 <FatFile::rename(FatFile*, char const*)+0x38>
    DBG_FAIL_MACRO;
    69e0:	movw	r0, #875	; 0x36b
    69e4:	bl	5e28 <dbgPrint(unsigned short)>
  }
  return m_vol->cacheSync();

fail:
  return false;
}
    69e8:	mov	r0, r4
    69ea:	add	sp, #104	; 0x68
    69ec:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    69f0:	mov	r8, r2
  if (!USE_LONG_FILE_NAMES && isLFN()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Can't move file to new volume.
  if (m_vol != dirFile->m_vol) {
    69f2:	ldr	r3, [r1, #8]
    69f4:	ldr	r2, [r0, #8]
    69f6:	cmp	r2, r3
    69f8:	mov	r5, r0
    69fa:	mov	r7, r1
    69fc:	beq.n	6a10 <FatFile::rename(FatFile*, char const*)+0x58>
    DBG_FAIL_MACRO;
    69fe:	movw	r0, #885	; 0x375
    6a02:	bl	5e28 <dbgPrint(unsigned short)>
    goto fail;
  }
  return m_vol->cacheSync();

fail:
  return false;
    6a06:	mov	r4, r6
}
    6a08:	mov	r0, r4
    6a0a:	add	sp, #104	; 0x68
    6a0c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6a10:	bl	5fa8 <FatFile::sync() [clone .part.38]>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // sync() and cache directory entry
  sync();
  oldFile = *this;
    6a14:	mov	lr, r5
    6a16:	ldmia.w	lr!, {r0, r1, r2, r3}
    6a1a:	add	r4, sp, #68	; 0x44
    6a1c:	stmia	r4!, {r0, r1, r2, r3}
    6a1e:	ldmia.w	lr!, {r0, r1, r2, r3}
    6a22:	stmia	r4!, {r0, r1, r2, r3}
    6a24:	ldr.w	r3, [lr]
    6a28:	str	r3, [r4, #0]
  dir = cacheDirEntry(FatCache::CACHE_FOR_READ);
    6a2a:	mov	r1, r6
    6a2c:	mov	r0, r5
    6a2e:	bl	5f7c <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    6a32:	mov	r4, r0
    6a34:	cmp	r0, #0
    6a36:	beq.w	6bd2 <FatFile::rename(FatFile*, char const*)+0x21a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // save directory entry
  memcpy(&entry, dir, sizeof(entry));
    6a3a:	ldr	r1, [r4, #4]
    6a3c:	ldr	r2, [r4, #8]
    6a3e:	ldr	r3, [r4, #12]
    6a40:	ldr	r0, [r0, #0]
  // make directory entry for new path
  if (isFile()) {
    6a42:	ldrb.w	ip, [r5]
  if (!dir) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // save directory entry
  memcpy(&entry, dir, sizeof(entry));
    6a46:	mov	lr, sp
    6a48:	stmia.w	lr!, {r0, r1, r2, r3}
    6a4c:	ldr	r1, [r4, #20]
    6a4e:	ldr	r2, [r4, #24]
    6a50:	ldr	r3, [r4, #28]
    6a52:	ldr	r0, [r4, #16]
  // make directory entry for new path
  if (isFile()) {
    6a54:	and.w	r4, ip, #8
  if (!dir) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // save directory entry
  memcpy(&entry, dir, sizeof(entry));
    6a58:	stmia.w	lr!, {r0, r1, r2, r3}
  // make directory entry for new path
  if (isFile()) {
    6a5c:	and.w	r3, r4, #255	; 0xff
    if (!file.open(dirFile, newPath, O_CREAT | O_EXCL | O_WRONLY)) {
    6a60:	mov	r2, r8
    6a62:	mov	r1, r7
    goto fail;
  }
  // save directory entry
  memcpy(&entry, dir, sizeof(entry));
  // make directory entry for new path
  if (isFile()) {
    6a64:	cmp	r4, #0
    6a66:	bne.w	6b76 <FatFile::rename(FatFile*, char const*)+0x1be>
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else {
    // don't create missing path prefix components
    if (!file.mkdir(dirFile, newPath, false)) {
    6a6a:	add	r0, sp, #32
    6a6c:	bl	68bc <FatFile::mkdir(FatFile*, char const*, bool)>
    6a70:	mov	r4, r0
    6a72:	cmp	r0, #0
    6a74:	beq.w	6bbe <FatFile::rename(FatFile*, char const*)+0x206>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // save cluster containing new dot dot
    dirCluster = file.m_firstCluster;
    6a78:	ldr	r6, [sp, #64]	; 0x40
  }
  // change to new directory entry

  m_dirSector = file.m_dirSector;
    6a7a:	ldr	r0, [sp, #56]	; 0x38
  m_dirIndex = file.m_dirIndex;
    6a7c:	ldrh.w	r1, [sp, #36]	; 0x24
  m_lfnOrd = file.m_lfnOrd;
    6a80:	ldrb.w	r2, [sp, #35]	; 0x23
  m_dirCluster = file.m_dirCluster;
    6a84:	ldr	r3, [sp, #44]	; 0x2c
    // save cluster containing new dot dot
    dirCluster = file.m_firstCluster;
  }
  // change to new directory entry

  m_dirSector = file.m_dirSector;
    6a86:	str	r0, [r5, #24]
  m_dirIndex = file.m_dirIndex;
    6a88:	strh	r1, [r5, #4]
  m_lfnOrd = file.m_lfnOrd;
  m_dirCluster = file.m_dirCluster;
  // mark closed to avoid possible destructor close call
  file.m_attributes = FILE_ATTR_CLOSED;
    6a8a:	movs	r7, #0
  }
  // change to new directory entry

  m_dirSector = file.m_dirSector;
  m_dirIndex = file.m_dirIndex;
  m_lfnOrd = file.m_lfnOrd;
    6a8c:	strb	r2, [r5, #3]
  m_dirCluster = file.m_dirCluster;
    6a8e:	str	r3, [r5, #12]
  // mark closed to avoid possible destructor close call
  file.m_attributes = FILE_ATTR_CLOSED;
  file.m_flags = 0;

  // cache new directory entry
  dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
    6a90:	movs	r1, #1
    6a92:	mov	r0, r5
  m_dirSector = file.m_dirSector;
  m_dirIndex = file.m_dirIndex;
  m_lfnOrd = file.m_lfnOrd;
  m_dirCluster = file.m_dirCluster;
  // mark closed to avoid possible destructor close call
  file.m_attributes = FILE_ATTR_CLOSED;
    6a94:	strb.w	r7, [sp, #32]
  file.m_flags = 0;
    6a98:	strb.w	r7, [sp, #34]	; 0x22

  // cache new directory entry
  dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
    6a9c:	bl	5f7c <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    6aa0:	mov	r4, r0
    6aa2:	cmp	r0, #0
    6aa4:	beq.w	6bc8 <FatFile::rename(FatFile*, char const*)+0x210>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // copy all but name and name flags to new directory entry
  memcpy(&dir->createTimeMs, &entry.createTimeMs,
         sizeof(entry) - sizeof(dir->name) - 2);
    6aa8:	add	r3, sp, #104	; 0x68
  dir->attributes = entry.attributes;
    6aaa:	ldrb.w	r2, [sp, #11]
    DBG_FAIL_MACRO;
    goto fail;
  }
  // copy all but name and name flags to new directory entry
  memcpy(&dir->createTimeMs, &entry.createTimeMs,
         sizeof(entry) - sizeof(dir->name) - 2);
    6aae:	ldr.w	r0, [r3, #-91]!
    6ab2:	str.w	r0, [r4, #13]
    6ab6:	ldr	r0, [r3, #4]
    6ab8:	str.w	r0, [r4, #17]
    6abc:	ldr	r0, [r3, #8]
    6abe:	str.w	r0, [r4, #21]
    6ac2:	ldr	r0, [r3, #12]
    6ac4:	str.w	r0, [r4, #25]
    6ac8:	ldrh	r0, [r3, #16]
    6aca:	ldrb	r3, [r3, #18]
    6acc:	strh.w	r0, [r4, #29]
    6ad0:	strb	r3, [r4, #31]
  dir->attributes = entry.attributes;
    6ad2:	strb	r2, [r4, #11]

  // update dot dot if directory
  if (dirCluster) {
    6ad4:	cmp	r6, #0
    6ad6:	beq.n	6b4c <FatFile::rename(FatFile*, char const*)+0x194>
    // get new dot dot
    uint32_t sector = m_vol->clusterStartSector(dirCluster);
    6ad8:	mov	r1, r6
    6ada:	ldr	r0, [r5, #8]
    6adc:	bl	6f68 <FatPartition::clusterStartSector(unsigned long) const>
  bool cacheSync() {
    return m_cache.sync() && syncDevice();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t sector, uint8_t options) {
    return m_cache.read(sector, options);
    6ae0:	ldr	r3, [r5, #8]
    6ae2:	mov	r1, r0
    6ae4:	mov	r2, r7
    6ae6:	add.w	r0, r3, #40	; 0x28
    6aea:	bl	6edc <FatCache::read(unsigned long, unsigned char)>
    pc = m_vol->cacheFetchData(sector, FatCache::CACHE_FOR_READ);
    if (!pc) {
    6aee:	mov	r4, r0
    6af0:	cmp	r0, #0
    6af2:	beq.n	6bdc <FatFile::rename(FatFile*, char const*)+0x224>
      DBG_FAIL_MACRO;
      goto fail;
    }
    memcpy(&entry, &pc->dir[1], sizeof(entry));
    6af4:	ldr.w	r0, [r4, #32]!
    6af8:	ldr	r1, [r4, #4]
    6afa:	ldr	r2, [r4, #8]
    6afc:	ldr	r3, [r4, #12]
    6afe:	mov	r7, sp
    6b00:	stmia	r7!, {r0, r1, r2, r3}
    6b02:	ldr	r0, [r4, #16]
    6b04:	ldr	r1, [r4, #20]
    6b06:	ldr	r2, [r4, #24]
    6b08:	ldr	r3, [r4, #28]
    6b0a:	stmia	r7!, {r0, r1, r2, r3}

    // free unused cluster
    if (!m_vol->freeChain(dirCluster)) {
    6b0c:	mov	r1, r6
    6b0e:	ldr	r0, [r5, #8]
    6b10:	bl	7154 <FatPartition::freeChain(unsigned long)>
    6b14:	mov	r4, r0
    6b16:	cmp	r0, #0
    6b18:	beq.n	6bb4 <FatFile::rename(FatFile*, char const*)+0x1fc>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // store new dot dot
    sector = m_vol->clusterStartSector(m_firstCluster);
    6b1a:	ldr	r1, [r5, #32]
    6b1c:	ldr	r0, [r5, #8]
    6b1e:	bl	6f68 <FatPartition::clusterStartSector(unsigned long) const>
    6b22:	ldr	r3, [r5, #8]
    6b24:	mov	r1, r0
    6b26:	movs	r2, #1
    6b28:	add.w	r0, r3, #40	; 0x28
    6b2c:	bl	6edc <FatCache::read(unsigned long, unsigned char)>
    pc = m_vol->cacheFetchData(sector, FatCache::CACHE_FOR_WRITE);
    if (!pc) {
    6b30:	mov	r4, r0
    6b32:	cmp	r0, #0
    6b34:	beq.n	6be6 <FatFile::rename(FatFile*, char const*)+0x22e>
      DBG_FAIL_MACRO;
      goto fail;
    }
    memcpy(&pc->dir[1], &entry, sizeof(entry));
    6b36:	mov	r6, sp
    6b38:	ldmia	r6!, {r0, r1, r2, r3}
    6b3a:	str	r0, [r4, #32]
    6b3c:	str	r1, [r4, #36]	; 0x24
    6b3e:	str	r2, [r4, #40]	; 0x28
    6b40:	str	r3, [r4, #44]	; 0x2c
    6b42:	ldmia	r6!, {r0, r1, r2, r3}
    6b44:	str	r0, [r4, #48]	; 0x30
    6b46:	str	r1, [r4, #52]	; 0x34
    6b48:	str	r2, [r4, #56]	; 0x38
    6b4a:	str	r3, [r4, #60]	; 0x3c
  }
  // Remove old directory entry;
  oldFile.m_firstCluster = 0;
    6b4c:	movs	r1, #0
  oldFile.m_flags = FILE_FLAG_WRITE;
    6b4e:	movs	r2, #2
  oldFile.m_attributes = FILE_ATTR_FILE;
    6b50:	movs	r3, #8
  if (!oldFile.remove()) {
    6b52:	add	r0, sp, #68	; 0x44
      goto fail;
    }
    memcpy(&pc->dir[1], &entry, sizeof(entry));
  }
  // Remove old directory entry;
  oldFile.m_firstCluster = 0;
    6b54:	str	r1, [sp, #100]	; 0x64
  oldFile.m_flags = FILE_FLAG_WRITE;
    6b56:	strb.w	r2, [sp, #70]	; 0x46
  oldFile.m_attributes = FILE_ATTR_FILE;
    6b5a:	strb.w	r3, [sp, #68]	; 0x44
  if (!oldFile.remove()) {
    6b5e:	bl	782c <FatFile::remove()>
    6b62:	mov	r4, r0
    6b64:	cbz	r0, 6b92 <FatFile::rename(FatFile*, char const*)+0x1da>
    DBG_FAIL_MACRO;
    goto fail;
  }
  return m_vol->cacheSync();
    6b66:	ldr	r4, [r5, #8]
  cache_t* cacheFetchFat(uint32_t sector, uint8_t options) {
    return m_fatCache.read(sector,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    6b68:	add.w	r0, r4, #40	; 0x28
    6b6c:	bl	6f58 <FatCache::sync()>
    6b70:	cbnz	r0, 6b9c <FatFile::rename(FatFile*, char const*)+0x1e4>
    6b72:	movs	r4, #0
    6b74:	b.n	69e8 <FatFile::rename(FatFile*, char const*)+0x30>
  }
  // save directory entry
  memcpy(&entry, dir, sizeof(entry));
  // make directory entry for new path
  if (isFile()) {
    if (!file.open(dirFile, newPath, O_CREAT | O_EXCL | O_WRONLY)) {
    6b76:	movw	r3, #2561	; 0xa01
    6b7a:	add	r0, sp, #32
    6b7c:	bl	60b8 <FatFile::open(FatFile*, char const*, int)>
    6b80:	mov	r4, r0
    6b82:	cmp	r0, #0
    6b84:	bne.w	6a7a <FatFile::rename(FatFile*, char const*)+0xc2>
      DBG_FAIL_MACRO;
    6b88:	movw	r0, #901	; 0x385
    6b8c:	bl	5e28 <dbgPrint(unsigned short)>
      goto fail;
    6b90:	b.n	69e8 <FatFile::rename(FatFile*, char const*)+0x30>
  // Remove old directory entry;
  oldFile.m_firstCluster = 0;
  oldFile.m_flags = FILE_FLAG_WRITE;
  oldFile.m_attributes = FILE_ATTR_FILE;
  if (!oldFile.remove()) {
    DBG_FAIL_MACRO;
    6b92:	mov.w	r0, #964	; 0x3c4
    6b96:	bl	5e28 <dbgPrint(unsigned short)>
    goto fail;
    6b9a:	b.n	69e8 <FatFile::rename(FatFile*, char const*)+0x30>
    6b9c:	add.w	r0, r4, #564	; 0x234
    6ba0:	bl	6f58 <FatCache::sync()>
    6ba4:	cmp	r0, #0
    6ba6:	beq.n	6b72 <FatFile::rename(FatFile*, char const*)+0x1ba>
    6ba8:	ldr	r0, [r4, #0]
  // sector I/O functions.
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
  }
  bool syncDevice() {
    return m_blockDev->syncDevice();
    6baa:	ldr	r3, [r0, #0]
    6bac:	ldr	r3, [r3, #20]
    6bae:	blx	r3
    6bb0:	mov	r4, r0
    6bb2:	b.n	69e8 <FatFile::rename(FatFile*, char const*)+0x30>
    }
    memcpy(&entry, &pc->dir[1], sizeof(entry));

    // free unused cluster
    if (!m_vol->freeChain(dirCluster)) {
      DBG_FAIL_MACRO;
    6bb4:	movw	r0, #947	; 0x3b3
    6bb8:	bl	5e28 <dbgPrint(unsigned short)>
      goto fail;
    6bbc:	b.n	69e8 <FatFile::rename(FatFile*, char const*)+0x30>
      goto fail;
    }
  } else {
    // don't create missing path prefix components
    if (!file.mkdir(dirFile, newPath, false)) {
      DBG_FAIL_MACRO;
    6bbe:	movw	r0, #907	; 0x38b
    6bc2:	bl	5e28 <dbgPrint(unsigned short)>
      goto fail;
    6bc6:	b.n	69e8 <FatFile::rename(FatFile*, char const*)+0x30>
  file.m_flags = 0;

  // cache new directory entry
  dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
  if (!dir) {
    DBG_FAIL_MACRO;
    6bc8:	movw	r0, #926	; 0x39e
    6bcc:	bl	5e28 <dbgPrint(unsigned short)>
    goto fail;
    6bd0:	b.n	69e8 <FatFile::rename(FatFile*, char const*)+0x30>
  // sync() and cache directory entry
  sync();
  oldFile = *this;
  dir = cacheDirEntry(FatCache::CACHE_FOR_READ);
  if (!dir) {
    DBG_FAIL_MACRO;
    6bd2:	movw	r0, #893	; 0x37d
    6bd6:	bl	5e28 <dbgPrint(unsigned short)>
    goto fail;
    6bda:	b.n	69e8 <FatFile::rename(FatFile*, char const*)+0x30>
  if (dirCluster) {
    // get new dot dot
    uint32_t sector = m_vol->clusterStartSector(dirCluster);
    pc = m_vol->cacheFetchData(sector, FatCache::CACHE_FOR_READ);
    if (!pc) {
      DBG_FAIL_MACRO;
    6bdc:	mov.w	r0, #940	; 0x3ac
    6be0:	bl	5e28 <dbgPrint(unsigned short)>
      goto fail;
    6be4:	b.n	69e8 <FatFile::rename(FatFile*, char const*)+0x30>
    }
    // store new dot dot
    sector = m_vol->clusterStartSector(m_firstCluster);
    pc = m_vol->cacheFetchData(sector, FatCache::CACHE_FOR_WRITE);
    if (!pc) {
      DBG_FAIL_MACRO;
    6be6:	movw	r0, #954	; 0x3ba
    6bea:	bl	5e28 <dbgPrint(unsigned short)>
      goto fail;
    6bee:	b.n	69e8 <FatFile::rename(FatFile*, char const*)+0x30>

00006bf0 <FatFile::sync()>:
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    6bf0:	ldrb	r3, [r0, #0]
    6bf2:	cbz	r3, 6bf8 <FatFile::sync()+0x8>
    6bf4:	b.w	5fa8 <FatFile::sync() [clone .part.38]>
  DBG_FAIL_MACRO;

fail:
  m_error |= WRITE_ERROR;
  return false;
}
    6bf8:	movs	r0, #1
    6bfa:	bx	lr

00006bfc <FatFile::write(void const*, unsigned int)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
size_t FatFile::write(const void* buf, size_t nbyte) {
    6bfc:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6c00:	ldrb	r3, [r0, #2]
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isWritable()) {
    6c02:	lsls	r5, r3, #30

 fail:
  return false;
}
//------------------------------------------------------------------------------
size_t FatFile::write(const void* buf, size_t nbyte) {
    6c04:	mov	r4, r0
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isWritable()) {
    6c06:	bpl.w	6d72 <FatFile::write(void const*, unsigned int)+0x176>
    6c0a:	mov	r9, r2
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & FILE_FLAG_APPEND)) {
    6c0c:	lsls	r2, r3, #28
    6c0e:	mov	r8, r1
    6c10:	bmi.w	6dcc <FatFile::write(void const*, unsigned int)+0x1d0>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
    6c14:	ldr	r2, [r4, #20]
    6c16:	mvns	r3, r2
    6c18:	cmp	r9, r3
    6c1a:	bhi.w	6dc2 <FatFile::write(void const*, unsigned int)+0x1c6>
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
    6c1e:	cmp.w	r9, #0
    6c22:	beq.w	6de2 <FatFile::write(void const*, unsigned int)+0x1e6>
    6c26:	mov	r6, r9
    m_part = vol;
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    6c28:	mov.w	sl, #0
    6c2c:	b.n	6c9a <FatFile::write(void const*, unsigned int)+0x9e>
    uint8_t sectorOfCluster = m_vol->sectorOfCluster(m_curPosition);
    uint16_t sectorOffset = m_curPosition & m_vol->sectorMask();
    if (sectorOfCluster == 0 && sectorOffset == 0) {
      // start of new cluster
      if (m_curCluster != 0) {
    6c2e:	cmp	r1, #0
    6c30:	beq.w	6d36 <FatFile::write(void const*, unsigned int)+0x13a>
#if USE_FAT_FILE_FLAG_CONTIGUOUS
        int8_t fg;
        if (isContiguous() && m_fileSize > m_curPosition) {
    6c34:	ldrb	r3, [r4, #2]
    6c36:	lsls	r3, r3, #25
    6c38:	bpl.w	6d46 <FatFile::write(void const*, unsigned int)+0x14a>
    6c3c:	ldr	r3, [r4, #28]
    6c3e:	cmp	r3, r2
    6c40:	bls.w	6d46 <FatFile::write(void const*, unsigned int)+0x14a>
          m_curCluster++;
    6c44:	adds	r1, #1
    6c46:	str	r1, [r4, #16]
          m_curCluster = m_firstCluster;
        }
      }
    }
    // sector for data write
    uint32_t sector = m_vol->clusterStartSector(m_curCluster)
    6c48:	bl	6f68 <FatPartition::clusterStartSector(unsigned long) const>
                      + sectorOfCluster;

    if (sectorOffset != 0 || nToWrite < m_vol->bytesPerSector()) {
    6c4c:	cmp.w	r6, #512	; 0x200
          m_curCluster = m_firstCluster;
        }
      }
    }
    // sector for data write
    uint32_t sector = m_vol->clusterStartSector(m_curCluster)
    6c50:	mov	r1, r0
                      + sectorOfCluster;

    if (sectorOffset != 0 || nToWrite < m_vol->bytesPerSector()) {
    6c52:	bcs.n	6cd4 <FatFile::write(void const*, unsigned int)+0xd8>
      // lesser of space and amount to write
      if (n > nToWrite) {
        n = nToWrite;
      }

      if (sectorOffset == 0 &&
    6c54:	ldr	r2, [r4, #20]
    6c56:	ldr	r3, [r4, #28]
                      + sectorOfCluster;

    if (sectorOffset != 0 || nToWrite < m_vol->bytesPerSector()) {
      // partial sector - must use cache
      // max space in sector
      n = m_vol->bytesPerSector() - sectorOffset;
    6c58:	ldr	r0, [r4, #8]
    6c5a:	cmp.w	r6, #512	; 0x200
    6c5e:	mov	r5, r6
    6c60:	it	cs
    6c62:	movcs.w	r5, #512	; 0x200
      // lesser of space and amount to write
      if (n > nToWrite) {
        n = nToWrite;
      }

      if (sectorOffset == 0 &&
    6c66:	cmp	r2, r3
    6c68:	bcc.n	6d64 <FatFile::write(void const*, unsigned int)+0x168>
         (m_curPosition >= m_fileSize || m_flags & FILE_FLAG_PREALLOCATE)) {
        // start of new sector don't need to read into cache
        cacheOption = FatCache::CACHE_RESERVE_FOR_WRITE;
    6c6a:	movs	r2, #5
  bool cacheSync() {
    return m_cache.sync() && syncDevice();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t sector, uint8_t options) {
    return m_cache.read(sector, options);
    6c6c:	adds	r0, #40	; 0x28
    6c6e:	bl	6edc <FatCache::read(unsigned long, unsigned char)>
      } else {
        // rewrite part of sector
        cacheOption = FatCache::CACHE_FOR_WRITE;
      }
      pc = m_vol->cacheFetchData(sector, cacheOption);
      if (!pc) {
    6c72:	cmp	r0, #0
    6c74:	beq.w	6dfc <FatFile::write(void const*, unsigned int)+0x200>
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + sectorOffset;
      memcpy(dst, src, n);
    6c78:	add	r0, r7
    6c7a:	mov	r2, r5
    6c7c:	mov	r1, r8
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    6c7e:	add	r7, r5
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + sectorOffset;
      memcpy(dst, src, n);
    6c80:	bl	9aa8 <memcpy>
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    6c84:	cmp.w	r7, #512	; 0x200
    6c88:	beq.w	6d98 <FatFile::write(void const*, unsigned int)+0x19c>
      if (!m_vol->writeSector(sector, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    6c8c:	ldr	r2, [r4, #20]
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
    6c8e:	subs	r6, r6, r5
      if (!m_vol->writeSector(sector, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    6c90:	add	r2, r5
    src += n;
    6c92:	add	r8, r5
      if (!m_vol->writeSector(sector, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    6c94:	str	r2, [r4, #20]
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
    6c96:	beq.w	6de2 <FatFile::write(void const*, unsigned int)+0x1e6>
    uint8_t sectorOfCluster = m_vol->sectorOfCluster(m_curPosition);
    6c9a:	ldr	r0, [r4, #8]
    uint16_t sectorOffset = m_curPosition & m_vol->sectorMask();
    if (sectorOfCluster == 0 && sectorOffset == 0) {
      // start of new cluster
      if (m_curCluster != 0) {
    6c9c:	ldr	r1, [r4, #16]
  }
  //----------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t sectorOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterSectorMask;
    6c9e:	ldrb	r3, [r0, #5]
    goto fail;
  }
  while (nToWrite) {
    uint8_t sectorOfCluster = m_vol->sectorOfCluster(m_curPosition);
    uint16_t sectorOffset = m_curPosition & m_vol->sectorMask();
    if (sectorOfCluster == 0 && sectorOffset == 0) {
    6ca0:	ands.w	r5, r3, r2, lsr #9
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
    uint8_t sectorOfCluster = m_vol->sectorOfCluster(m_curPosition);
    uint16_t sectorOffset = m_curPosition & m_vol->sectorMask();
    6ca4:	ubfx	r7, r2, #0, #9
    if (sectorOfCluster == 0 && sectorOffset == 0) {
    6ca8:	bne.n	6cc4 <FatFile::write(void const*, unsigned int)+0xc8>
    6caa:	cmp	r7, #0
    6cac:	beq.n	6c2e <FatFile::write(void const*, unsigned int)+0x32>
          m_curCluster = m_firstCluster;
        }
      }
    }
    // sector for data write
    uint32_t sector = m_vol->clusterStartSector(m_curCluster)
    6cae:	bl	6f68 <FatPartition::clusterStartSector(unsigned long) const>
    6cb2:	mov	r1, r0
                      + sectorOfCluster;

    if (sectorOffset != 0 || nToWrite < m_vol->bytesPerSector()) {
      // partial sector - must use cache
      // max space in sector
      n = m_vol->bytesPerSector() - sectorOffset;
    6cb4:	rsb	r5, r7, #512	; 0x200
    6cb8:	cmp	r5, r6
    6cba:	it	cs
    6cbc:	movcs	r5, r6
    6cbe:	ldr	r0, [r4, #8]
         (m_curPosition >= m_fileSize || m_flags & FILE_FLAG_PREALLOCATE)) {
        // start of new sector don't need to read into cache
        cacheOption = FatCache::CACHE_RESERVE_FOR_WRITE;
      } else {
        // rewrite part of sector
        cacheOption = FatCache::CACHE_FOR_WRITE;
    6cc0:	movs	r2, #1
    6cc2:	b.n	6c6c <FatFile::write(void const*, unsigned int)+0x70>
          m_curCluster = m_firstCluster;
        }
      }
    }
    // sector for data write
    uint32_t sector = m_vol->clusterStartSector(m_curCluster)
    6cc4:	bl	6f68 <FatPartition::clusterStartSector(unsigned long) const>
                      + sectorOfCluster;
    6cc8:	adds	r1, r5, r0

    if (sectorOffset != 0 || nToWrite < m_vol->bytesPerSector()) {
    6cca:	cmp	r7, #0
    6ccc:	bne.n	6cb4 <FatFile::write(void const*, unsigned int)+0xb8>
    6cce:	cmp.w	r6, #512	; 0x200
    6cd2:	bcc.n	6c54 <FatFile::write(void const*, unsigned int)+0x58>
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
#if USE_MULTI_SECTOR_IO
    } else if (nToWrite >= 2*m_vol->bytesPerSector()) {
    6cd4:	cmp.w	r6, #1024	; 0x400
    6cd8:	ldr	r2, [r4, #8]
    6cda:	bcc.n	6d1c <FatFile::write(void const*, unsigned int)+0x120>
      // use multiple sector write command
      uint32_t maxSectors = m_vol->sectorsPerCluster() - sectorOfCluster;
    6cdc:	ldrb	r3, [r2, #4]
    6cde:	ldr	r7, [r2, #48]	; 0x30
    6ce0:	subs	r3, r3, r5
      uint32_t nSector = nToWrite >> m_vol->bytesPerSectorShift();
    6ce2:	lsrs	r0, r6, #9
    6ce4:	cmp	r3, r0
    6ce6:	it	cs
    6ce8:	movcs	r3, r0
        nSector = maxSectors;
      }
      n = nSector << m_vol->bytesPerSectorShift();
      // Check for cache sector in write range.
      if (sector <= m_vol->cacheSectorNumber()
          && sector < (m_vol->cacheSectorNumber() + nSector)) {
    6cea:	cmp	r7, r1
      uint32_t maxSectors = m_vol->sectorsPerCluster() - sectorOfCluster;
      uint32_t nSector = nToWrite >> m_vol->bytesPerSectorShift();
      if (nSector > maxSectors) {
        nSector = maxSectors;
      }
      n = nSector << m_vol->bytesPerSectorShift();
    6cec:	mov.w	r5, r3, lsl #9
      // Check for cache sector in write range.
      if (sector <= m_vol->cacheSectorNumber()
          && sector < (m_vol->cacheSectorNumber() + nSector)) {
    6cf0:	bcc.n	6d04 <FatFile::write(void const*, unsigned int)+0x108>
    6cf2:	add	r7, r3
    6cf4:	cmp	r7, r1
    6cf6:	bls.n	6d04 <FatFile::write(void const*, unsigned int)+0x108>
    m_part = vol;
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    6cf8:	strb.w	sl, [r2, #40]	; 0x28
    m_lbn = 0XFFFFFFFF;
    6cfc:	mov.w	r0, #4294967295
    6d00:	str	r0, [r2, #48]	; 0x30
    6d02:	ldr	r2, [r4, #8]
    6d04:	ldr	r0, [r2, #0]
#if USE_MULTI_SECTOR_IO
  bool readSectors(uint32_t sector, uint8_t* dst, size_t ns) {
    return m_blockDev->readSectors(sector, dst, ns);
  }
  bool writeSectors(uint32_t sector, const uint8_t* src, size_t ns) {
    return m_blockDev->writeSectors(sector, src, ns);
    6d06:	ldr	r2, [r0, #0]
    6d08:	ldr	r7, [r2, #28]
    6d0a:	mov	r2, r8
    6d0c:	blx	r7
        // Invalidate cache if cache sector is in the range.
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeSectors(sector, src, nSector)) {
    6d0e:	cmp	r0, #0
    6d10:	bne.n	6c8c <FatFile::write(void const*, unsigned int)+0x90>
        DBG_FAIL_MACRO;
    6d12:	movw	r0, #1410	; 0x582
    6d16:	bl	5e28 <dbgPrint(unsigned short)>
        goto fail;
    6d1a:	b.n	6d7a <FatFile::write(void const*, unsigned int)+0x17e>
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // use single sector write command
      n = m_vol->bytesPerSector();
      if (m_vol->cacheSectorNumber() == sector) {
    6d1c:	ldr	r3, [r2, #48]	; 0x30
    6d1e:	cmp	r3, r1
    6d20:	beq.n	6d8a <FatFile::write(void const*, unsigned int)+0x18e>
    6d22:	ldr	r0, [r2, #0]
  }
  bool syncDevice() {
    return m_blockDev->syncDevice();
  }
  bool writeSector(uint32_t sector, const uint8_t* src) {
    return m_blockDev->writeSector(sector, src);
    6d24:	ldr	r3, [r0, #0]
    6d26:	mov	r2, r8
    6d28:	ldr	r3, [r3, #24]
    6d2a:	blx	r3
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeSector(sector, src)) {
    6d2c:	cmp	r0, #0
    6d2e:	beq.n	6e16 <FatFile::write(void const*, unsigned int)+0x21a>
        goto fail;
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // use single sector write command
      n = m_vol->bytesPerSector();
    6d30:	mov.w	r5, #512	; 0x200
    6d34:	b.n	6c8c <FatFile::write(void const*, unsigned int)+0x90>
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
      } else {
        if (m_firstCluster == 0) {
    6d36:	ldr	r1, [r4, #32]
    6d38:	cmp	r1, #0
    6d3a:	beq.n	6db0 <FatFile::write(void const*, unsigned int)+0x1b4>
            DBG_FAIL_MACRO;
            goto fail;
          }
          m_firstCluster = m_curCluster;
        } else {
          m_curCluster = m_firstCluster;
    6d3c:	str	r1, [r4, #16]
        }
      }
    }
    // sector for data write
    uint32_t sector = m_vol->clusterStartSector(m_curCluster)
    6d3e:	bl	6f68 <FatPartition::clusterStartSector(unsigned long) const>
    6d42:	mov	r1, r0
    6d44:	b.n	6cce <FatFile::write(void const*, unsigned int)+0xd2>
        int8_t fg;
        if (isContiguous() && m_fileSize > m_curPosition) {
          m_curCluster++;
          fg = 1;
        } else {
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    6d46:	add.w	r2, r4, #16
    6d4a:	bl	6f74 <FatPartition::fatGet(unsigned long, unsigned long*)>
          if (fg < 0) {
    6d4e:	cmp	r0, #0
    6d50:	blt.n	6e26 <FatFile::write(void const*, unsigned int)+0x22a>
        if (fg < 0) {
          DBG_FAIL_MACRO;
          goto fail;
        }
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
        if (fg == 0) {
    6d52:	bne.n	6d5e <FatFile::write(void const*, unsigned int)+0x162>
          // add cluster if at end of chain
          if (!addCluster()) {
    6d54:	mov	r0, r4
    6d56:	bl	5e64 <FatFile::addCluster()>
    6d5a:	cmp	r0, #0
    6d5c:	beq.n	6e30 <FatFile::write(void const*, unsigned int)+0x234>
    6d5e:	ldr	r0, [r4, #8]
    6d60:	ldr	r1, [r4, #16]
    6d62:	b.n	6d3e <FatFile::write(void const*, unsigned int)+0x142>
      if (n > nToWrite) {
        n = nToWrite;
      }

      if (sectorOffset == 0 &&
         (m_curPosition >= m_fileSize || m_flags & FILE_FLAG_PREALLOCATE)) {
    6d64:	ldrb	r3, [r4, #2]
        // start of new sector don't need to read into cache
        cacheOption = FatCache::CACHE_RESERVE_FOR_WRITE;
    6d66:	tst.w	r3, #32
    6d6a:	ite	eq
    6d6c:	moveq	r2, #1
    6d6e:	movne	r2, #5
    6d70:	b.n	6c6c <FatFile::write(void const*, unsigned int)+0x70>
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isWritable()) {
    DBG_FAIL_MACRO;
    6d72:	movw	r0, #1299	; 0x513
    6d76:	bl	5e28 <dbgPrint(unsigned short)>
  }
  return nbyte;

fail:
  // return for write error
  m_error |= WRITE_ERROR;
    6d7a:	ldrb	r3, [r4, #1]
    6d7c:	orr.w	r3, r3, #1
    6d80:	strb	r3, [r4, #1]
  return -1;
    6d82:	mov.w	r0, #4294967295
    6d86:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    m_part = vol;
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    6d8a:	strb.w	sl, [r2, #40]	; 0x28
    m_lbn = 0XFFFFFFFF;
    6d8e:	mov.w	r3, #4294967295
    6d92:	str	r3, [r2, #48]	; 0x30
    6d94:	ldr	r2, [r4, #8]
    6d96:	b.n	6d22 <FatFile::write(void const*, unsigned int)+0x126>
  }
  void cacheInvalidate() {
    m_cache.invalidate();
  }
  bool cacheSyncData() {
    return m_cache.sync();
    6d98:	ldr	r0, [r4, #8]
    6d9a:	adds	r0, #40	; 0x28
    6d9c:	bl	6f58 <FatCache::sync()>
      }
      uint8_t* dst = pc->data + sectorOffset;
      memcpy(dst, src, n);
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
        // Force write if sector is full - improves large writes.
        if (!m_vol->cacheSyncData()) {
    6da0:	cmp	r0, #0
    6da2:	bne.w	6c8c <FatFile::write(void const*, unsigned int)+0x90>
          DBG_FAIL_MACRO;
    6da6:	movw	r0, #1390	; 0x56e
    6daa:	bl	5e28 <dbgPrint(unsigned short)>
          goto fail;
    6dae:	b.n	6d7a <FatFile::write(void const*, unsigned int)+0x17e>
          }
        }
      } else {
        if (m_firstCluster == 0) {
          // allocate first cluster of file
          if (!addCluster()) {
    6db0:	mov	r0, r4
    6db2:	bl	5e64 <FatFile::addCluster()>
    6db6:	cmp	r0, #0
    6db8:	beq.n	6e3a <FatFile::write(void const*, unsigned int)+0x23e>
            DBG_FAIL_MACRO;
            goto fail;
          }
          m_firstCluster = m_curCluster;
    6dba:	ldr	r1, [r4, #16]
    6dbc:	str	r1, [r4, #32]
    6dbe:	ldr	r0, [r4, #8]
    6dc0:	b.n	6d3e <FatFile::write(void const*, unsigned int)+0x142>
      goto fail;
    }
  }
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
    DBG_FAIL_MACRO;
    6dc2:	movw	r0, #1311	; 0x51f
    6dc6:	bl	5e28 <dbgPrint(unsigned short)>
    goto fail;
    6dca:	b.n	6d7a <FatFile::write(void const*, unsigned int)+0x17e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & FILE_FLAG_APPEND)) {
    if (!seekSet(m_fileSize)) {
    6dcc:	ldr	r1, [r0, #28]
    6dce:	bl	6428 <FatFile::seekSet(unsigned long)>
    6dd2:	cmp	r0, #0
    6dd4:	bne.w	6c14 <FatFile::write(void const*, unsigned int)+0x18>
      DBG_FAIL_MACRO;
    6dd8:	movw	r0, #1305	; 0x519
    6ddc:	bl	5e28 <dbgPrint(unsigned short)>
      goto fail;
    6de0:	b.n	6d7a <FatFile::write(void const*, unsigned int)+0x17e>
    }
    m_curPosition += n;
    src += n;
    nToWrite -= n;
  }
  if (m_curPosition > m_fileSize) {
    6de2:	ldr	r3, [r4, #28]
    6de4:	cmp	r3, r2
    6de6:	bcc.n	6e06 <FatFile::write(void const*, unsigned int)+0x20a>
    // update fileSize and insure sync will update dir entry
    m_fileSize = m_curPosition;
    m_flags |= FILE_FLAG_DIR_DIRTY;
  } else if (FsDateTime::callback) {
    6de8:	ldr	r3, [pc, #88]	; (6e44 <FatFile::write(void const*, unsigned int)+0x248>)
    6dea:	ldr	r3, [r3, #0]
    6dec:	cbz	r3, 6e20 <FatFile::write(void const*, unsigned int)+0x224>
    // insure sync will update modified date and time
    m_flags |= FILE_FLAG_DIR_DIRTY;
    6dee:	ldrb	r3, [r4, #2]
    6df0:	orn	r3, r3, #127	; 0x7f
    6df4:	strb	r3, [r4, #2]
    6df6:	mov	r0, r9
    6df8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        // rewrite part of sector
        cacheOption = FatCache::CACHE_FOR_WRITE;
      }
      pc = m_vol->cacheFetchData(sector, cacheOption);
      if (!pc) {
        DBG_FAIL_MACRO;
    6dfc:	movw	r0, #1382	; 0x566
    6e00:	bl	5e28 <dbgPrint(unsigned short)>
        goto fail;
    6e04:	b.n	6d7a <FatFile::write(void const*, unsigned int)+0x17e>
    nToWrite -= n;
  }
  if (m_curPosition > m_fileSize) {
    // update fileSize and insure sync will update dir entry
    m_fileSize = m_curPosition;
    m_flags |= FILE_FLAG_DIR_DIRTY;
    6e06:	ldrb	r3, [r4, #2]
    src += n;
    nToWrite -= n;
  }
  if (m_curPosition > m_fileSize) {
    // update fileSize and insure sync will update dir entry
    m_fileSize = m_curPosition;
    6e08:	str	r2, [r4, #28]
    m_flags |= FILE_FLAG_DIR_DIRTY;
    6e0a:	orn	r3, r3, #127	; 0x7f
    6e0e:	strb	r3, [r4, #2]
    6e10:	mov	r0, r9
    6e12:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      n = m_vol->bytesPerSector();
      if (m_vol->cacheSectorNumber() == sector) {
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeSector(sector, src)) {
        DBG_FAIL_MACRO;
    6e16:	movw	r0, #1421	; 0x58d
    6e1a:	bl	5e28 <dbgPrint(unsigned short)>
        goto fail;
    6e1e:	b.n	6d7a <FatFile::write(void const*, unsigned int)+0x17e>
    6e20:	mov	r0, r9
    6e22:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
          m_curCluster++;
          fg = 1;
        } else {
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
          if (fg < 0) {
            DBG_FAIL_MACRO;
    6e26:	mov.w	r0, #1328	; 0x530
    6e2a:	bl	5e28 <dbgPrint(unsigned short)>
            goto fail;
    6e2e:	b.n	6d7a <FatFile::write(void const*, unsigned int)+0x17e>
        }
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
        if (fg == 0) {
          // add cluster if at end of chain
          if (!addCluster()) {
            DBG_FAIL_MACRO;
    6e30:	movw	r0, #1342	; 0x53e
    6e34:	bl	5e28 <dbgPrint(unsigned short)>
            goto fail;
    6e38:	b.n	6d7a <FatFile::write(void const*, unsigned int)+0x17e>
        }
      } else {
        if (m_firstCluster == 0) {
          // allocate first cluster of file
          if (!addCluster()) {
            DBG_FAIL_MACRO;
    6e3a:	movw	r0, #1350	; 0x546
    6e3e:	bl	5e28 <dbgPrint(unsigned short)>
            goto fail;
    6e42:	b.n	6d7a <FatFile::write(void const*, unsigned int)+0x17e>
    6e44:	.word	0x1fff8724

00006e48 <dbgPrint(unsigned short)>:
#if USE_DBG_MACROS
#include "Arduino.h"
#ifndef DBG_FILE
#error DBG_FILE not defined
#endif  // DBG_FILE
static void dbgPrint(uint16_t line) {
    6e48:	push	{r3, r4, r5, lr}
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    6e4a:	movs	r1, #10
    6e4c:	mov	r5, r0
    6e4e:	ldr	r0, [pc, #40]	; (6e78 <dbgPrint(unsigned short)+0x30>)
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    6e50:	ldr	r4, [pc, #40]	; (6e7c <dbgPrint(unsigned short)+0x34>)
    6e52:	bl	9ca8 <usb_serial_write>
    6e56:	movs	r1, #16
    6e58:	ldr	r0, [pc, #36]	; (6e80 <dbgPrint(unsigned short)+0x38>)
    6e5a:	bl	9ca8 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    6e5e:	movs	r0, #46	; 0x2e
    6e60:	bl	9db0 <usb_serial_putchar>
    6e64:	mov	r1, r5
    6e66:	mov	r0, r4
    6e68:	bl	b31c <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    6e6c:	mov	r0, r4
  Serial.print(F("DBG_FAIL: "));
  Serial.print(F(DBG_FILE));
  Serial.write('.');
  Serial.println(line);
}
    6e6e:	ldmia.w	sp!, {r3, r4, r5, lr}
    6e72:	b.w	b250 <Print::println()>
    6e76:	nop
    6e78:	.word	0x000105c8
    6e7c:	.word	0x1fff09a4
    6e80:	.word	0x00010620

00006e84 <FatCache::sync() [clone .part.8]>:
fail:

  return nullptr;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
    6e84:	push	{r3, r4, r5, r6, r7, lr}
    6e86:	ldr	r3, [r0, #4]
  }
  bool syncDevice() {
    return m_blockDev->syncDevice();
  }
  bool writeSector(uint32_t sector, const uint8_t* src) {
    return m_blockDev->writeSector(sector, src);
    6e88:	ldr	r1, [r0, #8]
  if (m_status & CACHE_STATUS_DIRTY) {
    if (!m_part->writeSector(m_lbn, m_buffer.data)) {
    6e8a:	add.w	r6, r0, #12
fail:

  return nullptr;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
    6e8e:	mov	r4, r0
    6e90:	ldr	r0, [r3, #0]
    6e92:	ldr	r3, [r0, #0]
    6e94:	mov	r2, r6
    6e96:	ldr	r3, [r3, #24]
    6e98:	blx	r3
  if (m_status & CACHE_STATUS_DIRTY) {
    if (!m_part->writeSector(m_lbn, m_buffer.data)) {
    6e9a:	mov	r5, r0
    6e9c:	cbz	r0, 6ec8 <FatCache::sync() [clone .part.8]+0x44>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
    6e9e:	ldrb	r3, [r4, #0]
    6ea0:	lsls	r2, r3, #30
    6ea2:	bmi.n	6eae <FatCache::sync() [clone .part.8]+0x2a>
      if (!m_part->writeSector(sector, m_buffer.data)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
    6ea4:	bic.w	r3, r3, #1
    6ea8:	strb	r3, [r4, #0]
  }
  return true;

fail:
  return false;
}
    6eaa:	mov	r0, r5
    6eac:	pop	{r3, r4, r5, r6, r7, pc}
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
      uint32_t sector = m_lbn + m_part->sectorsPerFat();
    6eae:	ldr	r3, [r4, #4]
    6eb0:	ldr	r1, [r4, #8]
    6eb2:	ldr	r0, [r3, #0]
    6eb4:	ldr	r7, [r3, #16]
    6eb6:	ldr	r3, [r0, #0]
    6eb8:	mov	r2, r6
    6eba:	ldr	r3, [r3, #24]
    6ebc:	add	r1, r7
    6ebe:	blx	r3
      if (!m_part->writeSector(sector, m_buffer.data)) {
    6ec0:	mov	r3, r0
    6ec2:	cbz	r0, 6ed2 <FatCache::sync() [clone .part.8]+0x4e>
    6ec4:	ldrb	r3, [r4, #0]
    6ec6:	b.n	6ea4 <FatCache::sync() [clone .part.8]+0x20>
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    if (!m_part->writeSector(m_lbn, m_buffer.data)) {
      DBG_FAIL_MACRO;
    6ec8:	movs	r0, #57	; 0x39
    6eca:	bl	6e48 <dbgPrint(unsigned short)>
  }
  return true;

fail:
  return false;
}
    6ece:	mov	r0, r5
    6ed0:	pop	{r3, r4, r5, r6, r7, pc}
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
      uint32_t sector = m_lbn + m_part->sectorsPerFat();
      if (!m_part->writeSector(sector, m_buffer.data)) {
        DBG_FAIL_MACRO;
    6ed2:	movs	r0, #64	; 0x40
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;

fail:
  return false;
    6ed4:	mov	r5, r3
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
      uint32_t sector = m_lbn + m_part->sectorsPerFat();
      if (!m_part->writeSector(sector, m_buffer.data)) {
        DBG_FAIL_MACRO;
    6ed6:	bl	6e48 <dbgPrint(unsigned short)>
    6eda:	b.n	6eaa <FatCache::sync() [clone .part.8]+0x26>

00006edc <FatCache::read(unsigned long, unsigned char)>:
#include "../common/DebugMacros.h"
#include "../common/FsStructs.h"
#include "FatPartition.h"
//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t sector, uint8_t option) {
  if (m_lbn != sector) {
    6edc:	ldr	r3, [r0, #8]
    6ede:	cmp	r3, r1
#define DBG_FILE "FatPartition.cpp"
#include "../common/DebugMacros.h"
#include "../common/FsStructs.h"
#include "FatPartition.h"
//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t sector, uint8_t option) {
    6ee0:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6ee4:	mov	r6, r0
    6ee6:	mov	r5, r2
  if (m_lbn != sector) {
    6ee8:	beq.n	6f0c <FatCache::read(unsigned long, unsigned char)+0x30>

  return nullptr;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    6eea:	ldrb	r3, [r0, #0]
    6eec:	lsls	r2, r3, #31
    6eee:	mov	r7, r1
    6ef0:	bmi.n	6f1c <FatCache::read(unsigned long, unsigned char)+0x40>
  if (m_lbn != sector) {
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
    6ef2:	lsls	r3, r5, #29
    6ef4:	bpl.n	6f32 <FatCache::read(unsigned long, unsigned char)+0x56>
    6ef6:	add.w	r4, r6, #12
    6efa:	movs	r3, #0
      }
    }
    m_status = 0;
    m_lbn = sector;
  }
  m_status |= option & CACHE_STATUS_MASK;
    6efc:	and.w	r5, r5, #3
    6f00:	orrs	r5, r3
    6f02:	strb	r5, [r6, #0]
    6f04:	mov	r0, r4
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status = 0;
    m_lbn = sector;
    6f06:	str	r7, [r6, #8]
  return &m_buffer;

fail:

  return nullptr;
}
    6f08:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6f0c:	ldrsb.w	r3, [r0], #12
      }
    }
    m_status = 0;
    m_lbn = sector;
  }
  m_status |= option & CACHE_STATUS_MASK;
    6f10:	and.w	r5, r5, #3
    6f14:	orrs	r5, r3
    6f16:	strb	r5, [r6, #0]
  return &m_buffer;

fail:

  return nullptr;
}
    6f18:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6f1c:	bl	6e84 <FatCache::sync() [clone .part.8]>
#include "../common/FsStructs.h"
#include "FatPartition.h"
//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t sector, uint8_t option) {
  if (m_lbn != sector) {
    if (!sync()) {
    6f20:	mov	r4, r0
    6f22:	cmp	r0, #0
    6f24:	bne.n	6ef2 <FatCache::read(unsigned long, unsigned char)+0x16>
      DBG_FAIL_MACRO;
    6f26:	movs	r0, #34	; 0x22
    6f28:	bl	6e48 <dbgPrint(unsigned short)>
  m_status |= option & CACHE_STATUS_MASK;
  return &m_buffer;

fail:

  return nullptr;
    6f2c:	mov	r0, r4
//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t sector, uint8_t option) {
  if (m_lbn != sector) {
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    6f2e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6f32:	ldr	r3, [r6, #4]
    6f34:	ldr	r0, [r3, #0]
  uint32_t m_lastCluster;             // Last cluster number in FAT.
  uint32_t m_rootDirStart;            // Start sector FAT16, cluster FAT32.
  //----------------------------------------------------------------------------
  // sector I/O functions.
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
    6f36:	ldr	r3, [r0, #0]
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
      if (!m_part->readSector(sector, m_buffer.data)) {
    6f38:	add.w	r4, r6, #12
    6f3c:	ldr	r3, [r3, #8]
    6f3e:	mov	r2, r4
    6f40:	mov	r1, r7
    6f42:	blx	r3
    6f44:	mov	r8, r0
    6f46:	cmp	r0, #0
    6f48:	bne.n	6efa <FatCache::read(unsigned long, unsigned char)+0x1e>
        DBG_FAIL_MACRO;
    6f4a:	movs	r0, #39	; 0x27
    6f4c:	bl	6e48 <dbgPrint(unsigned short)>
  m_status |= option & CACHE_STATUS_MASK;
  return &m_buffer;

fail:

  return nullptr;
    6f50:	mov	r0, r8
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
      if (!m_part->readSector(sector, m_buffer.data)) {
        DBG_FAIL_MACRO;
        goto fail;
    6f52:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6f56:	nop

00006f58 <FatCache::sync()>:

  return nullptr;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    6f58:	ldrb	r3, [r0, #0]
    6f5a:	lsls	r3, r3, #31
    6f5c:	bmi.n	6f62 <FatCache::sync()+0xa>
  }
  return true;

fail:
  return false;
}
    6f5e:	movs	r0, #1
    6f60:	bx	lr
    6f62:	b.w	6e84 <FatCache::sync() [clone .part.8]>
    6f66:	nop

00006f68 <FatPartition::clusterStartSector(unsigned long) const>:
fail:
  return false;
}
//------------------------------------------------------------------------------
uint32_t FatPartition::clusterStartSector(uint32_t cluster) const {
  return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    6f68:	ldrb	r3, [r0, #6]
    6f6a:	ldr	r0, [r0, #20]
    6f6c:	subs	r1, #2
    6f6e:	lsls	r1, r3
}
    6f70:	add	r0, r1
    6f72:	bx	lr

00006f74 <FatPartition::fatGet(unsigned long, unsigned long*)>:
  uint32_t sector;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
    6f74:	cmp	r1, #1
uint32_t FatPartition::clusterStartSector(uint32_t cluster) const {
  return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
}
//------------------------------------------------------------------------------
// Fetch a FAT entry - return -1 error, 0 EOC, else 1.
int8_t FatPartition::fatGet(uint32_t cluster, uint32_t* value) {
    6f76:	push	{r4, r5, r6, lr}
  uint32_t sector;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
    6f78:	bls.n	6fe2 <FatPartition::fatGet(unsigned long, unsigned long*)+0x6e>
    6f7a:	ldr	r3, [r0, #28]
    6f7c:	cmp	r1, r3
    6f7e:	mov	r4, r1
    6f80:	mov	r5, r0
    6f82:	bhi.n	6fe2 <FatPartition::fatGet(unsigned long, unsigned long*)+0x6e>
    6f84:	ldrb	r3, [r0, #7]
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (fatType() == 32) {
    6f86:	cmp	r3, #32
    6f88:	mov	r6, r2
    6f8a:	beq.n	6fb8 <FatPartition::fatGet(unsigned long, unsigned long*)+0x44>
      DBG_FAIL_MACRO;
      goto fail;
    }
    next = getLe32(reinterpret_cast<uint8_t*>
                  (&pc->fat32[cluster & (m_sectorMask >> 2)]));
  } else if (fatType() == 16) {
    6f8c:	cmp	r3, #16
    6f8e:	bne.n	6fd4 <FatPartition::fatGet(unsigned long, unsigned long*)+0x60>
  FatCache m_cache;
#if USE_SEPARATE_FAT_CACHE
  FatCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t sector, uint8_t options) {
    return m_fatCache.read(sector,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
    6f90:	ldr	r3, [r0, #24]
    6f92:	ubfx	r1, r1, #8, #8
    6f96:	add	r1, r3
    6f98:	movs	r2, #2
    6f9a:	add.w	r0, r0, #564	; 0x234
    6f9e:	bl	6edc <FatCache::read(unsigned long, unsigned char)>
    cluster &= 0XFFFF;
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 1) );
    pc = cacheFetchFat(sector, FatCache::CACHE_FOR_READ);
    if (!pc) {
    6fa2:	cbz	r0, 6fee <FatPartition::fatGet(unsigned long, unsigned long*)+0x7a>
void lbaToMbrChs(uint8_t* chs, uint32_t capacityMB, uint32_t lba);
//-----------------------------------------------------------------------------
#if !defined(USE_SIMPLE_LITTLE_ENDIAN) || USE_SIMPLE_LITTLE_ENDIAN
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
    6fa4:	uxtb	r4, r4
      DBG_FAIL_MACRO;
      goto fail;
    }
    next = getLe16(reinterpret_cast<uint8_t*>
                  (&pc->fat16[cluster & (m_sectorMask >> 1)]));
    6fa6:	ldrh.w	r3, [r0, r4, lsl #1]
    next = cluster & 1 ? tmp >> 4 : tmp & 0XFFF;
  } else {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isEOC(next)) {
    6faa:	ldr	r2, [r5, #28]
    6fac:	cmp	r3, r2
    return 0;
  }
  *value = next;
  return 1;
    6fae:	itte	ls
    6fb0:	movls	r0, #1
    goto fail;
  }
  if (isEOC(next)) {
    return 0;
  }
  *value = next;
    6fb2:	strls	r3, [r6, #0]
  } else {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isEOC(next)) {
    return 0;
    6fb4:	movhi	r0, #0
  *value = next;
  return 1;

fail:
  return -1;
}
    6fb6:	pop	{r4, r5, r6, pc}
    6fb8:	ldr	r1, [r0, #24]
    6fba:	movs	r2, #2
    6fbc:	add.w	r1, r1, r4, lsr #7
    6fc0:	add.w	r0, r0, #564	; 0x234
    6fc4:	bl	6edc <FatCache::read(unsigned long, unsigned char)>
  }

  if (fatType() == 32) {
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    pc = cacheFetchFat(sector, FatCache::CACHE_FOR_READ);
    if (!pc) {
    6fc8:	cbz	r0, 6ffa <FatPartition::fatGet(unsigned long, unsigned long*)+0x86>
}
inline uint32_t getLe32(const uint8_t* src) {
  return *reinterpret_cast<const uint32_t*>(src);
    6fca:	and.w	r4, r4, #127	; 0x7f
    6fce:	ldr.w	r3, [r0, r4, lsl #2]
    6fd2:	b.n	6faa <FatPartition::fatGet(unsigned long, unsigned long*)+0x36>
      index = 0;
    }
    tmp |= pc->data[index] << 8;
    next = cluster & 1 ? tmp >> 4 : tmp & 0XFFF;
  } else {
    DBG_FAIL_MACRO;
    6fd4:	mov.w	r0, #260	; 0x104
    6fd8:	bl	6e48 <dbgPrint(unsigned short)>
  }
  *value = next;
  return 1;

fail:
  return -1;
    6fdc:	mov.w	r0, #4294967295
    }
    tmp |= pc->data[index] << 8;
    next = cluster & 1 ? tmp >> 4 : tmp & 0XFFF;
  } else {
    DBG_FAIL_MACRO;
    goto fail;
    6fe0:	pop	{r4, r5, r6, pc}
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
    DBG_FAIL_MACRO;
    6fe2:	movs	r0, #214	; 0xd6
    6fe4:	bl	6e48 <dbgPrint(unsigned short)>
  }
  *value = next;
  return 1;

fail:
  return -1;
    6fe8:	mov.w	r0, #4294967295
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
    DBG_FAIL_MACRO;
    goto fail;
    6fec:	pop	{r4, r5, r6, pc}
  } else if (fatType() == 16) {
    cluster &= 0XFFFF;
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 1) );
    pc = cacheFetchFat(sector, FatCache::CACHE_FOR_READ);
    if (!pc) {
      DBG_FAIL_MACRO;
    6fee:	movs	r0, #232	; 0xe8
    6ff0:	bl	6e48 <dbgPrint(unsigned short)>
  }
  *value = next;
  return 1;

fail:
  return -1;
    6ff4:	mov.w	r0, #4294967295
    cluster &= 0XFFFF;
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 1) );
    pc = cacheFetchFat(sector, FatCache::CACHE_FOR_READ);
    if (!pc) {
      DBG_FAIL_MACRO;
      goto fail;
    6ff8:	pop	{r4, r5, r6, pc}

  if (fatType() == 32) {
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    pc = cacheFetchFat(sector, FatCache::CACHE_FOR_READ);
    if (!pc) {
      DBG_FAIL_MACRO;
    6ffa:	movs	r0, #222	; 0xde
    6ffc:	bl	6e48 <dbgPrint(unsigned short)>
  }
  *value = next;
  return 1;

fail:
  return -1;
    7000:	mov.w	r0, #4294967295
  if (fatType() == 32) {
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    pc = cacheFetchFat(sector, FatCache::CACHE_FOR_READ);
    if (!pc) {
      DBG_FAIL_MACRO;
      goto fail;
    7004:	pop	{r4, r5, r6, pc}
    7006:	nop

00007008 <FatPartition::fatPut(unsigned long, unsigned long)>:
bool FatPartition::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t sector;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
    7008:	cmp	r1, #1
fail:
  return -1;
}
//------------------------------------------------------------------------------
// Store a FAT entry
bool FatPartition::fatPut(uint32_t cluster, uint32_t value) {
    700a:	push	{r4, r5, r6, lr}
  uint32_t sector;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
    700c:	bls.n	702e <FatPartition::fatPut(unsigned long, unsigned long)+0x26>
    700e:	ldr	r3, [r0, #28]
    7010:	cmp	r1, r3
    7012:	mov	r4, r1
    7014:	bhi.n	702e <FatPartition::fatPut(unsigned long, unsigned long)+0x26>
    7016:	ldrb	r3, [r0, #7]
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (fatType() == 32) {
    7018:	cmp	r3, #32
    701a:	mov	r5, r2
    701c:	beq.n	703a <FatPartition::fatPut(unsigned long, unsigned long)+0x32>
    setLe32(reinterpret_cast<uint8_t*>
           (&pc->fat32[cluster & (m_sectorMask >> 2)]), value);
    return true;
  }

  if (fatType() == 16) {
    701e:	cmp	r3, #16
    7020:	beq.n	705a <FatPartition::fatPut(unsigned long, unsigned long)+0x52>
      tmp = ((pc->data[index] & 0XF0)) | tmp >> 4;
    }
    pc->data[index] = tmp;
    return true;
  } else {
    DBG_FAIL_MACRO;
    7022:	mov.w	r0, #342	; 0x156
    7026:	bl	6e48 <dbgPrint(unsigned short)>
    goto fail;
  }

fail:
  return false;
    702a:	movs	r0, #0
}
    702c:	pop	{r4, r5, r6, pc}
  uint32_t sector;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
    DBG_FAIL_MACRO;
    702e:	mov.w	r0, #280	; 0x118
    7032:	bl	6e48 <dbgPrint(unsigned short)>
    DBG_FAIL_MACRO;
    goto fail;
  }

fail:
  return false;
    7036:	movs	r0, #0
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
    DBG_FAIL_MACRO;
    goto fail;
    7038:	pop	{r4, r5, r6, pc}
    703a:	ldr	r1, [r0, #24]
    703c:	movs	r2, #3
    703e:	add.w	r0, r0, #564	; 0x234
    7042:	add.w	r1, r1, r4, lsr #7
    7046:	bl	6edc <FatCache::read(unsigned long, unsigned char)>
  }

  if (fatType() == 32) {
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    pc = cacheFetchFat(sector, FatCache::CACHE_FOR_WRITE);
    if (!pc) {
    704a:	mov	r6, r0
    704c:	cbz	r0, 7086 <FatPartition::fatPut(unsigned long, unsigned long)+0x7e>
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
}

inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
    704e:	and.w	r4, r4, #127	; 0x7f
      DBG_FAIL_MACRO;
      goto fail;
    }
    setLe32(reinterpret_cast<uint8_t*>
           (&pc->fat32[cluster & (m_sectorMask >> 2)]), value);
    return true;
    7052:	movs	r0, #1
    7054:	str.w	r5, [r6, r4, lsl #2]
    7058:	pop	{r4, r5, r6, pc}
    705a:	ldr	r3, [r0, #24]
    705c:	ubfx	r1, r1, #8, #8
    7060:	add.w	r0, r0, #564	; 0x234
    7064:	add	r1, r3
    7066:	movs	r2, #3
    7068:	bl	6edc <FatCache::read(unsigned long, unsigned char)>

  if (fatType() == 16) {
    cluster &= 0XFFFF;
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 1) );
    pc = cacheFetchFat(sector, FatCache::CACHE_FOR_WRITE);
    if (!pc) {
    706c:	mov	r6, r0
    706e:	cbz	r0, 707a <FatPartition::fatPut(unsigned long, unsigned long)+0x72>
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    7070:	uxtb	r4, r4
      DBG_FAIL_MACRO;
      goto fail;
    }
    setLe16(reinterpret_cast<uint8_t*>
           (&pc->fat16[cluster & (m_sectorMask >> 1)]), value);
    return true;
    7072:	movs	r0, #1
    7074:	strh.w	r5, [r6, r4, lsl #1]
    7078:	pop	{r4, r5, r6, pc}
  if (fatType() == 16) {
    cluster &= 0XFFFF;
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 1) );
    pc = cacheFetchFat(sector, FatCache::CACHE_FOR_WRITE);
    if (!pc) {
      DBG_FAIL_MACRO;
    707a:	movw	r0, #301	; 0x12d
    707e:	bl	6e48 <dbgPrint(unsigned short)>
    DBG_FAIL_MACRO;
    goto fail;
  }

fail:
  return false;
    7082:	mov	r0, r6
    cluster &= 0XFFFF;
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 1) );
    pc = cacheFetchFat(sector, FatCache::CACHE_FOR_WRITE);
    if (!pc) {
      DBG_FAIL_MACRO;
      goto fail;
    7084:	pop	{r4, r5, r6, pc}

  if (fatType() == 32) {
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    pc = cacheFetchFat(sector, FatCache::CACHE_FOR_WRITE);
    if (!pc) {
      DBG_FAIL_MACRO;
    7086:	mov.w	r0, #288	; 0x120
    708a:	bl	6e48 <dbgPrint(unsigned short)>
    DBG_FAIL_MACRO;
    goto fail;
  }

fail:
  return false;
    708e:	mov	r0, r6
    7090:	pop	{r4, r5, r6, pc}
    7092:	nop

00007094 <FatPartition::allocateCluster(unsigned long, unsigned long*)>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatPartition::allocateCluster(uint32_t current, uint32_t* next) {
    7094:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t find;
  bool setStart;
  if (m_allocSearchStart < current) {
    7098:	ldr	r4, [r0, #12]
    709a:	cmp	r4, r1

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatPartition::allocateCluster(uint32_t current, uint32_t* next) {
    709c:	sub	sp, #8
    709e:	mov	r5, r0
    70a0:	mov	r7, r1
    70a2:	mov	r8, r2
  uint32_t find;
  bool setStart;
  if (m_allocSearchStart < current) {
    70a4:	itte	cc
    70a6:	movcc	r4, r1
    // Try to keep file contiguous. Start just after current cluster.
    find = current;
    setStart = false;
    70a8:	movcc	r6, #0
  } else {
    find = m_allocSearchStart;
    setStart = true;
    70aa:	movcs	r6, #1
    70ac:	ldr	r3, [r5, #28]
  }
  while (1) {
    find++;
    70ae:	adds	r4, #1
    if (find > m_lastCluster) {
    70b0:	cmp	r4, r3
      // Can't find space, already searched clusters after current.
      DBG_FAIL_MACRO;
      goto fail;
    }
    uint32_t f;
    int8_t fg = fatGet(find, &f);
    70b2:	add	r2, sp, #4
    70b4:	mov	r0, r5
    70b6:	mov	r1, r4
    find = m_allocSearchStart;
    setStart = true;
  }
  while (1) {
    find++;
    if (find > m_lastCluster) {
    70b8:	bls.n	70ce <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x3a>
      if (setStart) {
    70ba:	cbnz	r6, 7122 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x8e>
        // Can't find space, checked all clusters.
        DBG_FAIL_MACRO;
        goto fail;
      }
      find = m_allocSearchStart;
    70bc:	ldr	r4, [r5, #12]
  } else {
    find = m_allocSearchStart;
    setStart = true;
  }
  while (1) {
    find++;
    70be:	adds	r4, #1
    if (find > m_lastCluster) {
    70c0:	cmp	r4, r3
        // Can't find space, checked all clusters.
        DBG_FAIL_MACRO;
        goto fail;
      }
      find = m_allocSearchStart;
      setStart = true;
    70c2:	mov.w	r6, #1
      // Can't find space, already searched clusters after current.
      DBG_FAIL_MACRO;
      goto fail;
    }
    uint32_t f;
    int8_t fg = fatGet(find, &f);
    70c6:	add	r2, sp, #4
    70c8:	mov	r0, r5
    70ca:	mov	r1, r4
    find = m_allocSearchStart;
    setStart = true;
  }
  while (1) {
    find++;
    if (find > m_lastCluster) {
    70cc:	bhi.n	70ba <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x26>
      }
      find = m_allocSearchStart;
      setStart = true;
      continue;
    }
    if (find == current) {
    70ce:	cmp	r7, r4
    70d0:	beq.n	7112 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x7e>
      // Can't find space, already searched clusters after current.
      DBG_FAIL_MACRO;
      goto fail;
    }
    uint32_t f;
    int8_t fg = fatGet(find, &f);
    70d2:	bl	6f74 <FatPartition::fatGet(unsigned long, unsigned long*)>
    if (fg < 0) {
    70d6:	cmp	r0, #0
    70d8:	blt.n	712a <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x96>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (fg && f == 0) {
    70da:	beq.n	70ac <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x18>
    70dc:	ldr	r3, [sp, #4]
    70de:	cmp	r3, #0
    70e0:	bne.n	70ac <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x18>
      break;
    }
  }
  if (setStart) {
    70e2:	cbz	r6, 70e6 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x52>
    m_allocSearchStart = find;
    70e4:	str	r4, [r5, #12]
  }
  uint32_t clusterStartSector(uint32_t cluster) const;
  int8_t fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  bool fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
    70e6:	mvn.w	r2, #4026531840	; 0xf0000000
    70ea:	mov	r1, r4
    70ec:	mov	r0, r5
    70ee:	bl	7008 <FatPartition::fatPut(unsigned long, unsigned long)>
  }
  // Mark end of chain.
  if (!fatPutEOC(find)) {
    70f2:	mov	r6, r0
    70f4:	cbz	r0, 714c <FatPartition::allocateCluster(unsigned long, unsigned long*)+0xb8>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (current) {
    70f6:	cbnz	r7, 7132 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x9e>
  int32_t  m_freeClusterCount;     // Count of free clusters in volume.
  void setFreeClusterCount(int32_t value) {
    m_freeClusterCount = value;
  }
  void updateFreeClusterCount(int32_t change) {
    if (m_freeClusterCount >= 0) {
    70f8:	ldr	r3, [r5, #36]	; 0x24
    70fa:	cmp	r3, #0
      m_freeClusterCount += change;
    70fc:	it	ge
    70fe:	addge.w	r3, r3, #4294967295
  *next = find;
  return true;

fail:
  return false;
}
    7102:	mov	r0, r6
    7104:	it	ge
    7106:	strge	r3, [r5, #36]	; 0x24
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  updateFreeClusterCount(-1);
  *next = find;
    7108:	str.w	r4, [r8]
  return true;

fail:
  return false;
}
    710c:	add	sp, #8
    710e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      setStart = true;
      continue;
    }
    if (find == current) {
      // Can't find space, already searched clusters after current.
      DBG_FAIL_MACRO;
    7112:	movs	r0, #101	; 0x65
    7114:	bl	6e48 <dbgPrint(unsigned short)>
  updateFreeClusterCount(-1);
  *next = find;
  return true;

fail:
  return false;
    7118:	movs	r6, #0
}
    711a:	mov	r0, r6
    711c:	add	sp, #8
    711e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  while (1) {
    find++;
    if (find > m_lastCluster) {
      if (setStart) {
        // Can't find space, checked all clusters.
        DBG_FAIL_MACRO;
    7122:	movs	r0, #92	; 0x5c
    7124:	bl	6e48 <dbgPrint(unsigned short)>
        goto fail;
    7128:	b.n	7118 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x84>
      goto fail;
    }
    uint32_t f;
    int8_t fg = fatGet(find, &f);
    if (fg < 0) {
      DBG_FAIL_MACRO;
    712a:	movs	r0, #107	; 0x6b
    712c:	bl	6e48 <dbgPrint(unsigned short)>
      goto fail;
    7130:	b.n	7118 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x84>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (current) {
    // Link clusters.
    if (!fatPut(current, find)) {
    7132:	mov	r1, r7
    7134:	mov	r2, r4
    7136:	mov	r0, r5
    7138:	bl	7008 <FatPartition::fatPut(unsigned long, unsigned long)>
    713c:	mov	r3, r0
    713e:	cmp	r0, #0
    7140:	bne.n	70f8 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x64>
      DBG_FAIL_MACRO;
    7142:	movs	r0, #125	; 0x7d
  updateFreeClusterCount(-1);
  *next = find;
  return true;

fail:
  return false;
    7144:	mov	r6, r3
    goto fail;
  }
  if (current) {
    // Link clusters.
    if (!fatPut(current, find)) {
      DBG_FAIL_MACRO;
    7146:	bl	6e48 <dbgPrint(unsigned short)>
      goto fail;
    714a:	b.n	711a <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x86>
  if (setStart) {
    m_allocSearchStart = find;
  }
  // Mark end of chain.
  if (!fatPutEOC(find)) {
    DBG_FAIL_MACRO;
    714c:	movs	r0, #119	; 0x77
    714e:	bl	6e48 <dbgPrint(unsigned short)>
    goto fail;
    7152:	b.n	711a <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x86>

00007154 <FatPartition::freeChain(unsigned long)>:
fail:
  return false;
}
//------------------------------------------------------------------------------
// free a cluster chain
bool FatPartition::freeChain(uint32_t cluster) {
    7154:	push	{r4, r5, r6, r7, lr}
    7156:	mov	r5, r0
    7158:	sub	sp, #12
    715a:	mov	r4, r1
    715c:	b.n	7180 <FatPartition::freeChain(unsigned long)+0x2c>
    if (fg < 0) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // free cluster
    if (!fatPut(cluster, 0)) {
    715e:	bl	7008 <FatPartition::fatPut(unsigned long, unsigned long)>
    7162:	mov	r6, r0
    7164:	cbz	r0, 71a6 <FatPartition::freeChain(unsigned long)+0x52>
  int32_t  m_freeClusterCount;     // Count of free clusters in volume.
  void setFreeClusterCount(int32_t value) {
    m_freeClusterCount = value;
  }
  void updateFreeClusterCount(int32_t change) {
    if (m_freeClusterCount >= 0) {
    7166:	ldr	r3, [r5, #36]	; 0x24
    7168:	cmp	r3, #0
      m_freeClusterCount += change;
    716a:	itt	ge
    716c:	addge	r3, #1
    716e:	strge	r3, [r5, #36]	; 0x24
      DBG_FAIL_MACRO;
      goto fail;
    }
    // Add one to count of free clusters.
    updateFreeClusterCount(1);
    if (cluster < m_allocSearchStart) {
    7170:	ldr	r3, [r5, #12]
    7172:	cmp	r4, r3
      m_allocSearchStart = cluster - 1;
    7174:	itt	cc
    7176:	addcc.w	r4, r4, #4294967295
    717a:	strcc	r4, [r5, #12]
    }
    cluster = next;
    717c:	ldr	r4, [sp, #4]
//------------------------------------------------------------------------------
// free a cluster chain
bool FatPartition::freeChain(uint32_t cluster) {
  uint32_t next;
  int8_t fg;
  do {
    717e:	cbz	r7, 71a0 <FatPartition::freeChain(unsigned long)+0x4c>
    fg = fatGet(cluster, &next);
    7180:	add	r2, sp, #4
    7182:	mov	r1, r4
    7184:	mov	r0, r5
    7186:	bl	6f74 <FatPartition::fatGet(unsigned long, unsigned long*)>
    if (fg < 0) {
    718a:	subs	r7, r0, #0
      DBG_FAIL_MACRO;
      goto fail;
    }
    // free cluster
    if (!fatPut(cluster, 0)) {
    718c:	mov	r1, r4
    718e:	mov.w	r2, #0
    7192:	mov	r0, r5
bool FatPartition::freeChain(uint32_t cluster) {
  uint32_t next;
  int8_t fg;
  do {
    fg = fatGet(cluster, &next);
    if (fg < 0) {
    7194:	bge.n	715e <FatPartition::freeChain(unsigned long)+0xa>
      DBG_FAIL_MACRO;
    7196:	movw	r0, #357	; 0x165
    719a:	bl	6e48 <dbgPrint(unsigned short)>
  } while (fg);

  return true;

fail:
  return false;
    719e:	movs	r6, #0
}
    71a0:	mov	r0, r6
    71a2:	add	sp, #12
    71a4:	pop	{r4, r5, r6, r7, pc}
      DBG_FAIL_MACRO;
      goto fail;
    }
    // free cluster
    if (!fatPut(cluster, 0)) {
      DBG_FAIL_MACRO;
    71a6:	mov.w	r0, #362	; 0x16a
    71aa:	bl	6e48 <dbgPrint(unsigned short)>

  return true;

fail:
  return false;
}
    71ae:	mov	r0, r6
    71b0:	add	sp, #12
    71b2:	pop	{r4, r5, r6, r7, pc}

000071b4 <FatPartition::freeClusterCount()>:
//------------------------------------------------------------------------------
int32_t FatPartition::freeClusterCount() {
    71b4:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
#if MAINTAIN_FREE_CLUSTER_COUNT
  if (m_freeClusterCount >= 0) {
    71b8:	ldr	r4, [r0, #36]	; 0x24
    71ba:	cmp	r4, #0
    71bc:	blt.n	71c4 <FatPartition::freeClusterCount()+0x10>
  setFreeClusterCount(free);
  return free;

fail:
  return -1;
}
    71be:	mov	r0, r4
    71c0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    71c4:	ldrb	r3, [r0, #7]
    return m_freeClusterCount;
  }
#endif  // MAINTAIN_FREE_CLUSTER_COUNT
  uint32_t free = 0;
  uint32_t sector;
  uint32_t todo = m_lastCluster + 1;
    71c6:	ldr	r2, [r0, #28]
      }
      if (fg && c == 0) {
        free++;
      }
    }
  } else if (fatType() == 16 || fatType() == 32) {
    71c8:	cmp	r3, #16
    71ca:	mov	r6, r0
    return m_freeClusterCount;
  }
#endif  // MAINTAIN_FREE_CLUSTER_COUNT
  uint32_t free = 0;
  uint32_t sector;
  uint32_t todo = m_lastCluster + 1;
    71cc:	add.w	r8, r2, #1
      }
      if (fg && c == 0) {
        free++;
      }
    }
  } else if (fatType() == 16 || fatType() == 32) {
    71d0:	beq.n	71e8 <FatPartition::freeClusterCount()+0x34>
    71d2:	cmp	r3, #32
    71d4:	beq.n	71e8 <FatPartition::freeClusterCount()+0x34>
      }
      todo -= n;
    }
  } else {
    // invalid FAT type
    DBG_FAIL_MACRO;
    71d6:	movw	r0, #431	; 0x1af
  }
  setFreeClusterCount(free);
  return free;

fail:
  return -1;
    71da:	mov.w	r4, #4294967295
      }
      todo -= n;
    }
  } else {
    // invalid FAT type
    DBG_FAIL_MACRO;
    71de:	bl	6e48 <dbgPrint(unsigned short)>
  setFreeClusterCount(free);
  return free;

fail:
  return -1;
}
    71e2:	mov	r0, r4
    71e4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (fg && c == 0) {
        free++;
      }
    }
  } else if (fatType() == 16 || fatType() == 32) {
    sector = m_fatStartSector;
    71e8:	ldr	r5, [r6, #24]
    while (todo) {
    71ea:	cmp.w	r8, #0
    71ee:	beq.n	727e <FatPartition::freeClusterCount()+0xca>
    71f0:	add.w	r7, r6, #564	; 0x234
    71f4:	movs	r4, #0
  FatCache m_cache;
#if USE_SEPARATE_FAT_CACHE
  FatCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t sector, uint8_t options) {
    return m_fatCache.read(sector,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
    71f6:	mov	r1, r5
    71f8:	movs	r2, #2
    71fa:	mov	r0, r7
      cache_t* pc = cacheFetchFat(sector++, FatCache::CACHE_FOR_READ);
    71fc:	adds	r5, #1
    71fe:	bl	6edc <FatCache::read(unsigned long, unsigned char)>
      if (!pc) {
    7202:	cbz	r0, 726c <FatPartition::freeClusterCount()+0xb8>
        DBG_FAIL_MACRO;
        goto fail;
      }
      n =  fatType() == 16 ? m_bytesPerSector/2 : m_bytesPerSector/4;
    7204:	ldrb	r3, [r6, #7]
    7206:	cmp	r3, #16
    7208:	beq.n	723a <FatPartition::freeClusterCount()+0x86>
      if (todo < n) {
    720a:	cmp.w	r8, #127	; 0x7f
    720e:	bhi.n	7264 <FatPartition::freeClusterCount()+0xb0>
        n = todo;
    7210:	uxth.w	r1, r8
    7214:	mov	lr, r8
    7216:	subs	r1, #1
    7218:	uxth	r1, r1
    721a:	add.w	r1, r0, r1, lsl #2
    721e:	subs	r3, r0, #4
            free++;
          }
        }
      } else {
        for (uint16_t i = 0; i < n; i++) {
          if (pc->fat32[i] == 0) {
    7220:	ldr.w	r2, [r3, #4]!
    7224:	cbnz	r2, 7228 <FatPartition::freeClusterCount()+0x74>
            free++;
    7226:	adds	r4, #1
          if (pc->fat16[i] == 0) {
            free++;
          }
        }
      } else {
        for (uint16_t i = 0; i < n; i++) {
    7228:	cmp	r3, r1
    722a:	bne.n	7220 <FatPartition::freeClusterCount()+0x6c>
        free++;
      }
    }
  } else if (fatType() == 16 || fatType() == 32) {
    sector = m_fatStartSector;
    while (todo) {
    722c:	subs.w	r8, r8, lr
    7230:	bne.n	71f6 <FatPartition::freeClusterCount()+0x42>
  }
#endif  // USE_MULTI_SECTOR_IO
#if MAINTAIN_FREE_CLUSTER_COUNT
  int32_t  m_freeClusterCount;     // Count of free clusters in volume.
  void setFreeClusterCount(int32_t value) {
    m_freeClusterCount = value;
    7232:	str	r4, [r6, #36]	; 0x24
  setFreeClusterCount(free);
  return free;

fail:
  return -1;
}
    7234:	mov	r0, r4
    7236:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      n =  fatType() == 16 ? m_bytesPerSector/2 : m_bytesPerSector/4;
      if (todo < n) {
    723a:	cmp.w	r8, #255	; 0xff
    723e:	bls.n	7282 <FatPartition::freeClusterCount()+0xce>
    7240:	mov.w	lr, #256	; 0x100
      cache_t* pc = cacheFetchFat(sector++, FatCache::CACHE_FOR_READ);
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      n =  fatType() == 16 ? m_bytesPerSector/2 : m_bytesPerSector/4;
    7244:	mov	r3, lr
    7246:	subs	r1, r3, #1
    7248:	uxth	r1, r1
    724a:	add.w	r1, r0, r1, lsl #1
    724e:	subs	r3, r0, #2
      if (todo < n) {
        n = todo;
      }
      if (fatType() == 16) {
        for (uint16_t i = 0; i < n; i++) {
          if (pc->fat16[i] == 0) {
    7250:	ldrh.w	r2, [r3, #2]!
    7254:	cbnz	r2, 7258 <FatPartition::freeClusterCount()+0xa4>
            free++;
    7256:	adds	r4, #1
      n =  fatType() == 16 ? m_bytesPerSector/2 : m_bytesPerSector/4;
      if (todo < n) {
        n = todo;
      }
      if (fatType() == 16) {
        for (uint16_t i = 0; i < n; i++) {
    7258:	cmp	r1, r3
    725a:	bne.n	7250 <FatPartition::freeClusterCount()+0x9c>
        free++;
      }
    }
  } else if (fatType() == 16 || fatType() == 32) {
    sector = m_fatStartSector;
    while (todo) {
    725c:	subs.w	r8, r8, lr
    7260:	bne.n	71f6 <FatPartition::freeClusterCount()+0x42>
    7262:	b.n	7232 <FatPartition::freeClusterCount()+0x7e>
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      n =  fatType() == 16 ? m_bytesPerSector/2 : m_bytesPerSector/4;
      if (todo < n) {
    7264:	mov.w	lr, #128	; 0x80
      cache_t* pc = cacheFetchFat(sector++, FatCache::CACHE_FOR_READ);
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      n =  fatType() == 16 ? m_bytesPerSector/2 : m_bytesPerSector/4;
    7268:	mov	r1, lr
    726a:	b.n	7216 <FatPartition::freeClusterCount()+0x62>
  } else if (fatType() == 16 || fatType() == 32) {
    sector = m_fatStartSector;
    while (todo) {
      cache_t* pc = cacheFetchFat(sector++, FatCache::CACHE_FOR_READ);
      if (!pc) {
        DBG_FAIL_MACRO;
    726c:	movw	r0, #407	; 0x197
  }
  setFreeClusterCount(free);
  return free;

fail:
  return -1;
    7270:	mov.w	r4, #4294967295
  } else if (fatType() == 16 || fatType() == 32) {
    sector = m_fatStartSector;
    while (todo) {
      cache_t* pc = cacheFetchFat(sector++, FatCache::CACHE_FOR_READ);
      if (!pc) {
        DBG_FAIL_MACRO;
    7274:	bl	6e48 <dbgPrint(unsigned short)>
  setFreeClusterCount(free);
  return free;

fail:
  return -1;
}
    7278:	mov	r0, r4
    727a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        free++;
      }
    }
  } else if (fatType() == 16 || fatType() == 32) {
    sector = m_fatStartSector;
    while (todo) {
    727e:	mov	r4, r8
    7280:	b.n	7232 <FatPartition::freeClusterCount()+0x7e>
        DBG_FAIL_MACRO;
        goto fail;
      }
      n =  fatType() == 16 ? m_bytesPerSector/2 : m_bytesPerSector/4;
      if (todo < n) {
        n = todo;
    7282:	uxth.w	r3, r8
    7286:	mov	lr, r8
    7288:	b.n	7246 <FatPartition::freeClusterCount()+0x92>
    728a:	nop

0000728c <FatPartition::init(BlockDeviceInterface*, unsigned char)>:

fail:
  return -1;
}
//------------------------------------------------------------------------------
bool FatPartition::init(BlockDevice* dev, uint8_t part) {
    728c:	push	{r3, r4, r5, r6, r7, lr}
    728e:	mov	r4, r0
  m_blockDev = dev;
  pbs_t* pbs;
  BpbFat32_t* bpb;
  MbrSector_t* mbr;
  uint8_t tmp;
  m_fatType = 0;
    7290:	movs	r5, #0
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    m_lbn = 0XFFFFFFFF;
    7292:	mov.w	r3, #4294967295
  m_allocSearchStart = 1;
    7296:	movs	r0, #1
//------------------------------------------------------------------------------
bool FatPartition::init(BlockDevice* dev, uint8_t part) {
  uint32_t clusterCount;
  uint32_t totalSectors;
  uint32_t volumeStartSector = 0;
  m_blockDev = dev;
    7298:	str	r1, [r4, #0]
  }
  /** Initialize the cache.
   * \param[in] vol FatPartition that owns this FatCache.
   */
  void init(FatPartition *vol) {
    m_part = vol;
    729a:	str	r4, [r4, #44]	; 0x2c
    729c:	str.w	r4, [r4, #568]	; 0x238
  pbs_t* pbs;
  BpbFat32_t* bpb;
  MbrSector_t* mbr;
  uint8_t tmp;
  m_fatType = 0;
  m_allocSearchStart = 1;
    72a0:	str	r0, [r4, #12]
  m_blockDev = dev;
  pbs_t* pbs;
  BpbFat32_t* bpb;
  MbrSector_t* mbr;
  uint8_t tmp;
  m_fatType = 0;
    72a2:	strb	r5, [r4, #7]
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    72a4:	strb.w	r5, [r4, #40]	; 0x28
    72a8:	strb.w	r5, [r4, #564]	; 0x234
    m_lbn = 0XFFFFFFFF;
    72ac:	str	r3, [r4, #48]	; 0x30
    72ae:	str.w	r3, [r4, #572]	; 0x23c
#if USE_SEPARATE_FAT_CACHE
  m_fatCache.init(this);
#endif  // USE_SEPARATE_FAT_CACHE
  // if part == 0 assume super floppy with FAT boot sector in sector zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
    72b2:	mov	r6, r2
    72b4:	cbz	r2, 72fa <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x6e>
    if (part > 4) {
    72b6:	cmp	r2, #4
    72b8:	bhi.n	72ee <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x62>
  bool cacheSync() {
    return m_cache.sync() && syncDevice();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t sector, uint8_t options) {
    return m_cache.read(sector, options);
    72ba:	add.w	r7, r4, #40	; 0x28
    72be:	mov	r2, r5
    72c0:	mov	r0, r7
    72c2:	mov	r1, r5
    72c4:	bl	6edc <FatCache::read(unsigned long, unsigned char)>
      DBG_FAIL_MACRO;
      goto fail;
    }
    mbr = reinterpret_cast<MbrSector_t*>
          (cacheFetchData(0, FatCache::CACHE_FOR_READ));
    MbrPart_t *mp = mbr->part + part - 1;
    72c8:	add.w	r6, r6, #268435456	; 0x10000000
    72cc:	subs	r6, #1
    72ce:	lsls	r6, r6, #4
    72d0:	add.w	r3, r0, #446	; 0x1be
    72d4:	adds	r2, r3, r6

    if (!mbr || mp->type == 0 || (mp->boot != 0 && mp->boot != 0X80)) {
    72d6:	cbz	r0, 72e2 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x56>
    72d8:	ldrb	r1, [r2, #4]
    72da:	cbz	r1, 72e2 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x56>
    72dc:	ldrb	r3, [r3, r6]
    72de:	lsls	r3, r3, #25
    72e0:	beq.n	731c <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x90>
      DBG_FAIL_MACRO;
    72e2:	mov.w	r0, #468	; 0x1d4
    72e6:	bl	6e48 <dbgPrint(unsigned short)>
    m_fatType = 32;
  }
  return true;

fail:
  return false;
    72ea:	movs	r0, #0
          (cacheFetchData(0, FatCache::CACHE_FOR_READ));
    MbrPart_t *mp = mbr->part + part - 1;

    if (!mbr || mp->type == 0 || (mp->boot != 0 && mp->boot != 0X80)) {
      DBG_FAIL_MACRO;
      goto fail;
    72ec:	pop	{r3, r4, r5, r6, r7, pc}
#endif  // USE_SEPARATE_FAT_CACHE
  // if part == 0 assume super floppy with FAT boot sector in sector zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
    if (part > 4) {
      DBG_FAIL_MACRO;
    72ee:	mov.w	r0, #460	; 0x1cc
    72f2:	bl	6e48 <dbgPrint(unsigned short)>
    m_fatType = 32;
  }
  return true;

fail:
  return false;
    72f6:	mov	r0, r5
  // if part == 0 assume super floppy with FAT boot sector in sector zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
    if (part > 4) {
      DBG_FAIL_MACRO;
      goto fail;
    72f8:	pop	{r3, r4, r5, r6, r7, pc}
    72fa:	add.w	r7, r4, #40	; 0x28
    72fe:	mov	r0, r7
    7300:	movs	r2, #0
    7302:	mov	r1, r6
    7304:	bl	6edc <FatCache::read(unsigned long, unsigned char)>
  }
  pbs = reinterpret_cast<pbs_t*>
        (cacheFetchData(volumeStartSector, FatCache::CACHE_FOR_READ));
  bpb = reinterpret_cast<BpbFat32_t*>(pbs->bpb);

  if (!pbs || bpb->fatCount != 2 || getLe16(bpb->bytesPerSector) != 512) {
    7308:	cbz	r0, 7310 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x84>
    730a:	ldrb	r3, [r0, #16]
    730c:	cmp	r3, #2
    730e:	beq.n	7320 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x94>
    DBG_FAIL_MACRO;
    7310:	mov.w	r0, #478	; 0x1de
    7314:	bl	6e48 <dbgPrint(unsigned short)>
    m_fatType = 32;
  }
  return true;

fail:
  return false;
    7318:	movs	r0, #0
        (cacheFetchData(volumeStartSector, FatCache::CACHE_FOR_READ));
  bpb = reinterpret_cast<BpbFat32_t*>(pbs->bpb);

  if (!pbs || bpb->fatCount != 2 || getLe16(bpb->bytesPerSector) != 512) {
    DBG_FAIL_MACRO;
    goto fail;
    731a:	pop	{r3, r4, r5, r6, r7, pc}
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
}
inline uint32_t getLe32(const uint8_t* src) {
  return *reinterpret_cast<const uint32_t*>(src);
    731c:	ldr	r6, [r2, #8]
    731e:	b.n	72fe <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x72>
  }
  pbs = reinterpret_cast<pbs_t*>
        (cacheFetchData(volumeStartSector, FatCache::CACHE_FOR_READ));
  bpb = reinterpret_cast<BpbFat32_t*>(pbs->bpb);

  if (!pbs || bpb->fatCount != 2 || getLe16(bpb->bytesPerSector) != 512) {
    7320:	ldrh.w	r3, [r0, #11]
    7324:	cmp.w	r3, #512	; 0x200
    7328:	bne.n	7310 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x84>
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_sectorsPerCluster = bpb->sectorsPerCluster;
    732a:	ldrb	r5, [r0, #13]
    732c:	strb	r5, [r4, #4]
  m_clusterSectorMask = m_sectorsPerCluster - 1;
    732e:	subs	r3, r5, #1
  // determine shift that is same as multiply by m_sectorsPerCluster
  m_sectorsPerClusterShift = 0;
    7330:	movs	r2, #0
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    7332:	cmp	r5, #1
  if (!pbs || bpb->fatCount != 2 || getLe16(bpb->bytesPerSector) != 512) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_sectorsPerCluster = bpb->sectorsPerCluster;
  m_clusterSectorMask = m_sectorsPerCluster - 1;
    7334:	strb	r3, [r4, #5]
  // determine shift that is same as multiply by m_sectorsPerCluster
  m_sectorsPerClusterShift = 0;
    7336:	strb	r2, [r4, #6]
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    7338:	beq.n	7362 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0xd6>
    733a:	movs	r2, #1
    733c:	mov	r1, r2
    733e:	b.n	7342 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0xb6>
    7340:	mov	r2, r3
    7342:	lsls	r1, r1, #1
    7344:	uxtb	r1, r1
    7346:	adds	r3, r2, #1
    7348:	cmp	r5, r1
    734a:	uxtb	r3, r3
    734c:	beq.n	7360 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0xd4>
    if (tmp == 0) {
    734e:	cmp	r3, #9
    7350:	bne.n	7340 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0xb4>
    7352:	strb	r2, [r4, #6]
      DBG_FAIL_MACRO;
    7354:	movw	r0, #487	; 0x1e7
    7358:	bl	6e48 <dbgPrint(unsigned short)>
    m_fatType = 32;
  }
  return true;

fail:
  return false;
    735c:	movs	r0, #0
  // determine shift that is same as multiply by m_sectorsPerCluster
  m_sectorsPerClusterShift = 0;
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    if (tmp == 0) {
      DBG_FAIL_MACRO;
      goto fail;
    735e:	pop	{r3, r4, r5, r6, r7, pc}
    7360:	strb	r2, [r4, #6]
    }
    m_sectorsPerClusterShift++;
  }
  m_sectorsPerFat = getLe16(bpb->sectorsPerFat16);
    7362:	ldrh	r1, [r0, #22]
    7364:	str	r1, [r4, #16]
  if (m_sectorsPerFat == 0) {
    7366:	cbnz	r1, 736c <FatPartition::init(BlockDeviceInterface*, unsigned char)+0xe0>
    7368:	ldr	r1, [r0, #36]	; 0x24
    m_sectorsPerFat = getLe32(bpb->sectorsPerFat32);
    736a:	str	r1, [r4, #16]
  }
  m_fatStartSector = volumeStartSector + getLe16(bpb->reservedSectorCount);
    736c:	ldrh	r7, [r0, #14]
void lbaToMbrChs(uint8_t* chs, uint32_t capacityMB, uint32_t lba);
//-----------------------------------------------------------------------------
#if !defined(USE_SIMPLE_LITTLE_ENDIAN) || USE_SIMPLE_LITTLE_ENDIAN
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
    736e:	ldrh.w	r3, [r0, #17]

  // count for FAT16 zero for FAT32
  m_rootDirEntryCount = getLe16(bpb->rootDirEntryCount);
    7372:	strh	r3, [r4, #8]
  }
  m_sectorsPerFat = getLe16(bpb->sectorsPerFat16);
  if (m_sectorsPerFat == 0) {
    m_sectorsPerFat = getLe32(bpb->sectorsPerFat32);
  }
  m_fatStartSector = volumeStartSector + getLe16(bpb->reservedSectorCount);
    7374:	add	r7, r6
  m_rootDirEntryCount = getLe16(bpb->rootDirEntryCount);

  // directory start for FAT16 dataStart for FAT32
  m_rootDirStart = m_fatStartSector + 2 * m_sectorsPerFat;
  // data start for FAT16 and FAT32
  m_dataStartSector = m_rootDirStart +
    7376:	lsls	r3, r3, #5

  // count for FAT16 zero for FAT32
  m_rootDirEntryCount = getLe16(bpb->rootDirEntryCount);

  // directory start for FAT16 dataStart for FAT32
  m_rootDirStart = m_fatStartSector + 2 * m_sectorsPerFat;
    7378:	add.w	r5, r7, r1, lsl #1
  // data start for FAT16 and FAT32
  m_dataStartSector = m_rootDirStart +
    737c:	addw	r3, r3, #511	; 0x1ff
    ((32 * m_rootDirEntryCount + m_bytesPerSector - 1)/m_bytesPerSector);

  // total sectors for FAT16 or FAT32
  totalSectors = getLe16(bpb->totalSectors16);
    7380:	ldrh.w	r1, [r0, #19]
  }
  m_sectorsPerFat = getLe16(bpb->sectorsPerFat16);
  if (m_sectorsPerFat == 0) {
    m_sectorsPerFat = getLe32(bpb->sectorsPerFat32);
  }
  m_fatStartSector = volumeStartSector + getLe16(bpb->reservedSectorCount);
    7384:	str	r7, [r4, #24]
  m_rootDirEntryCount = getLe16(bpb->rootDirEntryCount);

  // directory start for FAT16 dataStart for FAT32
  m_rootDirStart = m_fatStartSector + 2 * m_sectorsPerFat;
  // data start for FAT16 and FAT32
  m_dataStartSector = m_rootDirStart +
    7386:	add.w	r3, r5, r3, asr #9

  // count for FAT16 zero for FAT32
  m_rootDirEntryCount = getLe16(bpb->rootDirEntryCount);

  // directory start for FAT16 dataStart for FAT32
  m_rootDirStart = m_fatStartSector + 2 * m_sectorsPerFat;
    738a:	str	r5, [r4, #32]
  // data start for FAT16 and FAT32
  m_dataStartSector = m_rootDirStart +
    ((32 * m_rootDirEntryCount + m_bytesPerSector - 1)/m_bytesPerSector);
    738c:	str	r3, [r4, #20]

  // total sectors for FAT16 or FAT32
  totalSectors = getLe16(bpb->totalSectors16);
  if (totalSectors == 0) {
    738e:	cbnz	r1, 7392 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x106>
}
inline uint32_t getLe32(const uint8_t* src) {
  return *reinterpret_cast<const uint32_t*>(src);
    7390:	ldr	r1, [r0, #32]
    totalSectors = getLe32(bpb->totalSectors32);
  }
  // total data sectors
  clusterCount = totalSectors - (m_dataStartSector - volumeStartSector);
    7392:	subs	r6, r6, r3
    7394:	add	r6, r1

  // divide by cluster size to get cluster count
  clusterCount >>= m_sectorsPerClusterShift;
    7396:	lsr.w	r2, r6, r2
  m_lastCluster = clusterCount + 1;

  // Indicate unknown number of free clusters.
  setFreeClusterCount(-1);
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
    739a:	movw	r3, #4084	; 0xff4
  // total data sectors
  clusterCount = totalSectors - (m_dataStartSector - volumeStartSector);

  // divide by cluster size to get cluster count
  clusterCount >>= m_sectorsPerClusterShift;
  m_lastCluster = clusterCount + 1;
    739e:	adds	r5, r2, #1
  }
#endif  // USE_MULTI_SECTOR_IO
#if MAINTAIN_FREE_CLUSTER_COUNT
  int32_t  m_freeClusterCount;     // Count of free clusters in volume.
  void setFreeClusterCount(int32_t value) {
    m_freeClusterCount = value;
    73a0:	mov.w	r1, #4294967295

  // Indicate unknown number of free clusters.
  setFreeClusterCount(-1);
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
    73a4:	cmp	r2, r3
  // total data sectors
  clusterCount = totalSectors - (m_dataStartSector - volumeStartSector);

  // divide by cluster size to get cluster count
  clusterCount >>= m_sectorsPerClusterShift;
  m_lastCluster = clusterCount + 1;
    73a6:	str	r5, [r4, #28]
    73a8:	str	r1, [r4, #36]	; 0x24

  // Indicate unknown number of free clusters.
  setFreeClusterCount(-1);
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
    73aa:	bls.n	73c2 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x136>
    m_fatType = 12;
    if (!FAT12_SUPPORT) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if (clusterCount < 65525) {
    73ac:	movw	r3, #65524	; 0xfff4
    73b0:	cmp	r2, r3
    73b2:	ittet	hi
    73b4:	ldrhi	r3, [r0, #44]	; 0x2c
    m_fatType = 16;
  } else {
    m_rootDirStart = getLe32(bpb->fat32RootCluster);
    73b6:	strhi	r3, [r4, #32]
    if (!FAT12_SUPPORT) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if (clusterCount < 65525) {
    m_fatType = 16;
    73b8:	movls	r3, #16
  } else {
    m_rootDirStart = getLe32(bpb->fat32RootCluster);
    m_fatType = 32;
    73ba:	movhi	r3, #32
    73bc:	strb	r3, [r4, #7]
  }
  return true;
    73be:	movs	r0, #1
    73c0:	pop	{r3, r4, r5, r6, r7, pc}

  // Indicate unknown number of free clusters.
  setFreeClusterCount(-1);
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
    m_fatType = 12;
    73c2:	movs	r3, #12
    73c4:	strb	r3, [r4, #7]
    if (!FAT12_SUPPORT) {
      DBG_FAIL_MACRO;
    73c6:	movw	r0, #525	; 0x20d
    73ca:	bl	6e48 <dbgPrint(unsigned short)>
    m_fatType = 32;
  }
  return true;

fail:
  return false;
    73ce:	movs	r0, #0
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
    m_fatType = 12;
    if (!FAT12_SUPPORT) {
      DBG_FAIL_MACRO;
      goto fail;
    73d0:	pop	{r3, r4, r5, r6, r7, pc}
    73d2:	nop

000073d4 <lfnGetChar(DirLfn_t*, unsigned char)>:
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \return The 16-bit character.
 */
static uint16_t lfnGetChar(DirLfn_t *ldir, uint8_t i) {
  if (i < 5) {
    73d4:	cmp	r1, #4
    73d6:	bls.n	73f2 <lfnGetChar(DirLfn_t*, unsigned char)+0x1e>
    return getLe16(ldir->unicode1 + 2*i);
  } else if (i < 11) {
    73d8:	cmp	r1, #10
    73da:	bls.n	73ea <lfnGetChar(DirLfn_t*, unsigned char)+0x16>
    return getLe16(ldir->unicode2 + 2*i - 10);
  } else if (i < 13) {
    73dc:	cmp	r1, #12
void lbaToMbrChs(uint8_t* chs, uint32_t capacityMB, uint32_t lba);
//-----------------------------------------------------------------------------
#if !defined(USE_SIMPLE_LITTLE_ENDIAN) || USE_SIMPLE_LITTLE_ENDIAN
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
    73de:	itte	ls
    73e0:	addls.w	r1, r0, r1, lsl #1
    73e4:	ldrhls	r0, [r1, #6]
    return getLe16(ldir->unicode3 + 2*i - 22);
  }
  return 0;
    73e6:	movhi	r0, #0
}
    73e8:	bx	lr
    73ea:	add.w	r1, r0, r1, lsl #1
    73ee:	ldrh	r0, [r1, #4]
 */
static uint16_t lfnGetChar(DirLfn_t *ldir, uint8_t i) {
  if (i < 5) {
    return getLe16(ldir->unicode1 + 2*i);
  } else if (i < 11) {
    return getLe16(ldir->unicode2 + 2*i - 10);
    73f0:	bx	lr
    73f2:	add.w	r1, r0, r1, lsl #1
    73f6:	ldrh.w	r0, [r1, #1]
 * \param[in] i Index of character.
 * \return The 16-bit character.
 */
static uint16_t lfnGetChar(DirLfn_t *ldir, uint8_t i) {
  if (i < 5) {
    return getLe16(ldir->unicode1 + 2*i);
    73fa:	bx	lr

000073fc <dbgPrint(unsigned short)>:
#if USE_DBG_MACROS
#include "Arduino.h"
#ifndef DBG_FILE
#error DBG_FILE not defined
#endif  // DBG_FILE
static void dbgPrint(uint16_t line) {
    73fc:	push	{r3, r4, r5, lr}
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    73fe:	movs	r1, #10
    7400:	mov	r5, r0
    7402:	ldr	r0, [pc, #40]	; (742c <dbgPrint(unsigned short)+0x30>)
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    7404:	ldr	r4, [pc, #40]	; (7430 <dbgPrint(unsigned short)+0x34>)
    7406:	bl	9ca8 <usb_serial_write>
    740a:	movs	r1, #14
    740c:	ldr	r0, [pc, #36]	; (7434 <dbgPrint(unsigned short)+0x38>)
    740e:	bl	9ca8 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    7412:	movs	r0, #46	; 0x2e
    7414:	bl	9db0 <usb_serial_putchar>
    7418:	mov	r1, r5
    741a:	mov	r0, r4
    741c:	bl	b31c <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    7420:	mov	r0, r4
  Serial.print(F("DBG_FAIL: "));
  Serial.print(F(DBG_FILE));
  Serial.write('.');
  Serial.println(line);
}
    7422:	ldmia.w	sp!, {r3, r4, r5, lr}
    7426:	b.w	b250 <Print::println()>
    742a:	nop
    742c:	.word	0x000105c8
    7430:	.word	0x1fff09a4
    7434:	.word	0x00010634

00007438 <FatFile::lfnChecksum(unsigned char*)>:
#include "../common/DebugMacros.h"
#include "FatFile.h"
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
    7438:	push	{r4}
    743a:	subs	r2, r0, #1
    743c:	add.w	r4, r0, #10
  uint8_t sum = 0;
    7440:	movs	r0, #0
  for (uint8_t i = 0; i < 11; i++) {
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
    7442:	ldrb.w	r1, [r2, #1]!
    7446:	lsrs	r3, r0, #1
    7448:	orr.w	r0, r3, r0, lsl #7
    744c:	uxtab	r0, r1, r0
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
    7450:	cmp	r4, r2
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
    7452:	uxtb	r0, r0
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
    7454:	bne.n	7442 <FatFile::lfnChecksum(unsigned char*)+0xa>
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
  }
  return sum;
}
    7456:	ldr.w	r4, [sp], #4
    745a:	bx	lr

0000745c <FatFile::openCluster(FatFile*)>:
fail:
  name[0] = 0;
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openCluster(FatFile* file) {
    745c:	push	{r3, r4, r5, lr}
  if (file->m_dirCluster == 0) {
    745e:	ldr	r3, [r1, #12]
    7460:	cbz	r3, 7480 <FatFile::openCluster(FatFile*)+0x24>
    7462:	mov	r5, r0
    7464:	mov	r4, r1
    return openRoot(file->m_vol);
  }
  memset(this, 0, sizeof(FatFile));
    7466:	movs	r2, #36	; 0x24
    7468:	movs	r1, #0
    746a:	bl	c92c <memset>
  m_attributes = FILE_ATTR_SUBDIR;
    746e:	movs	r3, #16
  m_flags = FILE_FLAG_READ;
    7470:	movs	r0, #1
bool FatFile::openCluster(FatFile* file) {
  if (file->m_dirCluster == 0) {
    return openRoot(file->m_vol);
  }
  memset(this, 0, sizeof(FatFile));
  m_attributes = FILE_ATTR_SUBDIR;
    7472:	strb	r3, [r5, #0]
  m_flags = FILE_FLAG_READ;
    7474:	strb	r0, [r5, #2]
  m_vol = file->m_vol;
    7476:	ldr	r2, [r4, #8]
  m_firstCluster = file->m_dirCluster;
    7478:	ldr	r3, [r4, #12]
    747a:	str	r3, [r5, #32]
    return openRoot(file->m_vol);
  }
  memset(this, 0, sizeof(FatFile));
  m_attributes = FILE_ATTR_SUBDIR;
  m_flags = FILE_FLAG_READ;
  m_vol = file->m_vol;
    747c:	str	r2, [r5, #8]
  m_firstCluster = file->m_dirCluster;
  return true;
}
    747e:	pop	{r3, r4, r5, pc}
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openCluster(FatFile* file) {
  if (file->m_dirCluster == 0) {
    return openRoot(file->m_vol);
    7480:	ldr	r1, [r1, #8]
  m_attributes = FILE_ATTR_SUBDIR;
  m_flags = FILE_FLAG_READ;
  m_vol = file->m_vol;
  m_firstCluster = file->m_dirCluster;
  return true;
}
    7482:	ldmia.w	sp!, {r3, r4, r5, lr}
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openCluster(FatFile* file) {
  if (file->m_dirCluster == 0) {
    return openRoot(file->m_vol);
    7486:	b.w	606c <FatFile::openRoot(FatVolume*)>
    748a:	nop

0000748c <FatFile::getName(char*, unsigned int)>:
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
    lfnPutChar(ldir, i, c);
  }
}
//==============================================================================
bool FatFile::getName(char* name, size_t size) {
    748c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7490:	sub	sp, #52	; 0x34
  FatFile dirFile;
  DirLfn_t* ldir;
  if (!isOpen() || size < 13) {
    7492:	ldrb	r3, [r0, #0]
    7494:	movs	r4, #0
    7496:	strb.w	r4, [sp, #12]
    749a:	strb.w	r4, [sp, #13]
    749e:	strb.w	r4, [sp, #14]
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
    lfnPutChar(ldir, i, c);
  }
}
//==============================================================================
bool FatFile::getName(char* name, size_t size) {
    74a2:	mov	r9, r1
  FatFile dirFile;
  DirLfn_t* ldir;
  if (!isOpen() || size < 13) {
    74a4:	cbz	r3, 74ac <FatFile::getName(char*, unsigned int)+0x20>
    74a6:	cmp	r2, #12
    74a8:	mov	r5, r2
    74aa:	bhi.n	74c0 <FatFile::getName(char*, unsigned int)+0x34>
    DBG_FAIL_MACRO;
    74ac:	movs	r0, #129	; 0x81
    74ae:	bl	73fc <dbgPrint(unsigned short)>
  }
  // Fall into fail.
  DBG_FAIL_MACRO;

fail:
  name[0] = 0;
    74b2:	movs	r7, #0
    74b4:	strb.w	r7, [r9]
  return false;
}
    74b8:	mov	r0, r7
    74ba:	add	sp, #52	; 0x34
    74bc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  DirLfn_t* ldir;
  if (!isOpen() || size < 13) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!isLFN()) {
    74c0:	ldrb	r3, [r0, #3]
    74c2:	mov	r8, r0
    74c4:	cmp	r3, #0
    74c6:	beq.n	7586 <FatFile::getName(char*, unsigned int)+0xfa>
    return getSFN(name);
  }
  if (!dirFile.openCluster(this)) {
    74c8:	add	r0, sp, #12
    74ca:	mov	r1, r8
    74cc:	bl	745c <FatFile::openCluster(FatFile*)>
    74d0:	cmp	r0, #0
    74d2:	beq.n	7598 <FatFile::getName(char*, unsigned int)+0x10c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    74d4:	ldrb.w	r3, [r8, #3]
    74d8:	cmp	r3, #0
    74da:	beq.n	757e <FatFile::getName(char*, unsigned int)+0xf2>
    if (!dirFile.seekSet(32UL*(m_dirIndex - order))) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    ldir = reinterpret_cast<DirLfn_t*>(dirFile.readDirCache());
    74dc:	str	r4, [sp, #4]
  }
  if (!dirFile.openCluster(this)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    74de:	movs	r6, #1
    if (!dirFile.seekSet(32UL*(m_dirIndex - order))) {
    74e0:	ldrh.w	r1, [r8, #4]
    74e4:	subs	r1, r1, r6
    74e6:	lsls	r1, r1, #5
    74e8:	add	r0, sp, #12
    74ea:	bl	6428 <FatFile::seekSet(unsigned long)>
    74ee:	mov	r7, r0
    74f0:	cmp	r0, #0
    74f2:	beq.n	75a0 <FatFile::getName(char*, unsigned int)+0x114>
      DBG_FAIL_MACRO;
      goto fail;
    }
    ldir = reinterpret_cast<DirLfn_t*>(dirFile.readDirCache());
    74f4:	movs	r1, #0
    74f6:	add	r0, sp, #12
    74f8:	bl	63d8 <FatFile::readDirCache(bool)>
    if (!ldir) {
    74fc:	mov	sl, r0
    74fe:	cmp	r0, #0
    7500:	beq.n	75a8 <FatFile::getName(char*, unsigned int)+0x11c>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME) {
    7502:	ldrb	r3, [r0, #11]
    7504:	cmp	r3, #15
    7506:	bne.n	75b0 <FatFile::getName(char*, unsigned int)+0x124>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (order != (ldir->order & 0X1F)) {
    7508:	ldrb	r3, [r0, #0]
    750a:	and.w	r3, r3, #31
    750e:	cmp	r6, r3
    7510:	bne.n	75b8 <FatFile::getName(char*, unsigned int)+0x12c>
  return 0;
}
//------------------------------------------------------------------------------
static bool lfnGetName(DirLfn_t *ldir, char* name, size_t n) {
  uint8_t i;
  size_t k = 13*((ldir->order & 0X1F) - 1);
    7512:	subs	r3, r6, #1
    7514:	add.w	r2, r3, r3, lsl #1
    7518:	add.w	r2, r3, r2, lsl #2
    751c:	mov	r3, r2
    751e:	add.w	r4, r9, r2
    7522:	add.w	fp, r2, #13
  for (i = 0; i < 13; i++) {
    uint16_t c = lfnGetChar(ldir, i);
    7526:	subs	r1, r3, r2
    7528:	uxtb	r1, r1
    752a:	mov	r0, sl
    752c:	bl	73d4 <lfnGetChar(DirLfn_t*, unsigned char)>
    if (c == 0 || k >= n) {
    7530:	cbz	r0, 7594 <FatFile::getName(char*, unsigned int)+0x108>
    7532:	cmp	r5, r3
      break;
    }
    name[k++] = c >= 0X7F ? '?' : c;
    7534:	add.w	r3, r3, #1
static bool lfnGetName(DirLfn_t *ldir, char* name, size_t n) {
  uint8_t i;
  size_t k = 13*((ldir->order & 0X1F) - 1);
  for (i = 0; i < 13; i++) {
    uint16_t c = lfnGetChar(ldir, i);
    if (c == 0 || k >= n) {
    7538:	bls.n	755e <FatFile::getName(char*, unsigned int)+0xd2>
      break;
    }
    name[k++] = c >= 0X7F ? '?' : c;
    753a:	cmp	r0, #126	; 0x7e
    753c:	ite	ls
    753e:	uxtbls	r0, r0
    7540:	movhi	r0, #63	; 0x3f
}
//------------------------------------------------------------------------------
static bool lfnGetName(DirLfn_t *ldir, char* name, size_t n) {
  uint8_t i;
  size_t k = 13*((ldir->order & 0X1F) - 1);
  for (i = 0; i < 13; i++) {
    7542:	cmp	r3, fp
    uint16_t c = lfnGetChar(ldir, i);
    if (c == 0 || k >= n) {
      break;
    }
    name[k++] = c >= 0X7F ? '?' : c;
    7544:	strb.w	r0, [r4], #1
}
//------------------------------------------------------------------------------
static bool lfnGetName(DirLfn_t *ldir, char* name, size_t n) {
  uint8_t i;
  size_t k = 13*((ldir->order & 0X1F) - 1);
  for (i = 0; i < 13; i++) {
    7548:	bne.n	7526 <FatFile::getName(char*, unsigned int)+0x9a>
      break;
    }
    name[k++] = c >= 0X7F ? '?' : c;
  }
  // Terminate with zero byte if name fits.
  if (k < n && (ldir->order & FAT_ORDER_LAST_LONG_ENTRY)) {
    754a:	cmp	r5, fp
    754c:	bls.n	755e <FatFile::getName(char*, unsigned int)+0xd2>
    754e:	ldrb.w	r3, [sl]
    7552:	lsls	r2, r3, #25
    name[k] = 0;
    7554:	itt	mi
    7556:	ldrbmi.w	r3, [sp, #4]
    755a:	strbmi.w	r3, [r9, fp]
  }
  // Truncate if name is too long.
  name[n - 1] = 0;
    755e:	add.w	r3, r9, r5
    7562:	ldrb.w	r2, [sp, #4]
    7566:	strb.w	r2, [r3, #-1]
    }
    if (!lfnGetName(ldir, name, size)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (ldir->order & FAT_ORDER_LAST_LONG_ENTRY) {
    756a:	ldrb.w	r3, [sl]
    756e:	lsls	r3, r3, #25
    7570:	bmi.n	74b8 <FatFile::getName(char*, unsigned int)+0x2c>
  }
  if (!dirFile.openCluster(this)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    7572:	adds	r6, #1
    7574:	ldrb.w	r3, [r8, #3]
    7578:	uxtb	r6, r6
    757a:	cmp	r3, r6
    757c:	bcs.n	74e0 <FatFile::getName(char*, unsigned int)+0x54>
    if (ldir->order & FAT_ORDER_LAST_LONG_ENTRY) {
      return true;
    }
  }
  // Fall into fail.
  DBG_FAIL_MACRO;
    757e:	movs	r0, #166	; 0xa6
    7580:	bl	73fc <dbgPrint(unsigned short)>
    7584:	b.n	74b2 <FatFile::getName(char*, unsigned int)+0x26>
  if (!isOpen() || size < 13) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!isLFN()) {
    return getSFN(name);
    7586:	bl	7f64 <FatFile::getSFN(char*)>
    758a:	mov	r7, r0
  DBG_FAIL_MACRO;

fail:
  name[0] = 0;
  return false;
}
    758c:	mov	r0, r7
    758e:	add	sp, #52	; 0x34
    7590:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
static bool lfnGetName(DirLfn_t *ldir, char* name, size_t n) {
  uint8_t i;
  size_t k = 13*((ldir->order & 0X1F) - 1);
  for (i = 0; i < 13; i++) {
    uint16_t c = lfnGetChar(ldir, i);
    if (c == 0 || k >= n) {
    7594:	mov	fp, r3
    7596:	b.n	754a <FatFile::getName(char*, unsigned int)+0xbe>
  }
  if (!isLFN()) {
    return getSFN(name);
  }
  if (!dirFile.openCluster(this)) {
    DBG_FAIL_MACRO;
    7598:	movs	r0, #136	; 0x88
    759a:	bl	73fc <dbgPrint(unsigned short)>
    goto fail;
    759e:	b.n	74b2 <FatFile::getName(char*, unsigned int)+0x26>
  }
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    if (!dirFile.seekSet(32UL*(m_dirIndex - order))) {
      DBG_FAIL_MACRO;
    75a0:	movs	r0, #141	; 0x8d
    75a2:	bl	73fc <dbgPrint(unsigned short)>
      goto fail;
    75a6:	b.n	74b2 <FatFile::getName(char*, unsigned int)+0x26>
    }
    ldir = reinterpret_cast<DirLfn_t*>(dirFile.readDirCache());
    if (!ldir) {
      DBG_FAIL_MACRO;
    75a8:	movs	r0, #146	; 0x92
    75aa:	bl	73fc <dbgPrint(unsigned short)>
      goto fail;
    75ae:	b.n	74b2 <FatFile::getName(char*, unsigned int)+0x26>
    }
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME) {
      DBG_FAIL_MACRO;
    75b0:	movs	r0, #150	; 0x96
    75b2:	bl	73fc <dbgPrint(unsigned short)>
      goto fail;
    75b6:	b.n	74b2 <FatFile::getName(char*, unsigned int)+0x26>
    }
    if (order != (ldir->order & 0X1F)) {
      DBG_FAIL_MACRO;
    75b8:	movs	r0, #154	; 0x9a
    75ba:	bl	73fc <dbgPrint(unsigned short)>
      goto fail;
    75be:	b.n	74b2 <FatFile::getName(char*, unsigned int)+0x26>

000075c0 <FatFile::parsePathName(char const*, fname_t*, char const**)>:
  m_firstCluster = file->m_dirCluster;
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::parsePathName(const char* path,
                            fname_t* fname, const char** ptr) {
    75c0:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int len = 0;
  int si;
  int dot;

  // Skip leading spaces.
  while (*path == ' ') {
    75c4:	ldrb	r3, [r0, #0]
    75c6:	cmp	r3, #32
    75c8:	bne.n	75d2 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x12>
    75ca:	ldrb.w	r3, [r0, #1]!
    75ce:	cmp	r3, #32
    75d0:	beq.n	75ca <FatFile::parsePathName(char const*, fname_t*, char const**)+0xa>
    path++;
  }
  fname->lfn = path;
    75d2:	str	r0, [r1, #8]

  for (len = 0; ; len++) {
    c = path[len];
    75d4:	ldrb	r3, [r0, #0]
    if (c == 0 || isDirSeparator(c)) {
    75d6:	cmp	r3, #0
    75d8:	beq.w	780a <FatFile::parsePathName(char const*, fname_t*, char const**)+0x24a>
    75dc:	cmp	r3, #47	; 0x2f
    75de:	beq.n	764c <FatFile::parsePathName(char const*, fname_t*, char const**)+0x8c>
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(uint8_t c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
    75e0:	cmp	r3, #92	; 0x5c
    75e2:	beq.n	762a <FatFile::parsePathName(char const*, fname_t*, char const**)+0x6a>
    75e4:	sub.w	r4, r3, #34	; 0x22
    75e8:	uxtb	r4, r4
    75ea:	cmp	r4, #29
    75ec:	bls.n	7636 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x76>
    75ee:	ldr.w	lr, [pc, #568]	; 7828 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x268>
    75f2:	adds	r6, r0, #1
  while (*path == ' ') {
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    75f4:	movs	r4, #0
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(uint8_t c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
      c == ':' || c == '<' || c == '>' || c == '?' || c == '|') {
    75f6:	cmp	r3, #124	; 0x7c
  for (len = 0; ; len++) {
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
    75f8:	sub.w	r5, r3, #32
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    c = path[len];
    75fc:	mov	r7, r6
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(uint8_t c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
      c == ':' || c == '<' || c == '>' || c == '?' || c == '|') {
    75fe:	beq.n	762a <FatFile::parsePathName(char const*, fname_t*, char const**)+0x6a>
  for (len = 0; ; len++) {
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
    7600:	cmp	r5, #94	; 0x5e
    7602:	bhi.n	762a <FatFile::parsePathName(char const*, fname_t*, char const**)+0x6a>
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    c = path[len];
    7604:	ldrb.w	r3, [r6], #1
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(uint8_t c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
    7608:	sub.w	r5, r3, #34	; 0x22
    760c:	uxtb	r5, r5
  while (*path == ' ') {
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    760e:	adds	r4, #1
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
    7610:	cmp	r3, #0
    7612:	beq.w	77c6 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x206>
    7616:	cmp	r3, #47	; 0x2f
    7618:	beq.n	764e <FatFile::parsePathName(char const*, fname_t*, char const**)+0x8e>
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(uint8_t c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
    761a:	cmp	r3, #92	; 0x5c
    761c:	lsr.w	r7, lr, r5
    7620:	beq.n	762a <FatFile::parsePathName(char const*, fname_t*, char const**)+0x6a>
    7622:	cmp	r5, #29
    7624:	bhi.n	75f6 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x36>
    7626:	lsls	r7, r7, #31
    7628:	bpl.n	75f6 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x36>
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
      DBG_FAIL_MACRO;
    762a:	movs	r0, #211	; 0xd3
    762c:	bl	73fc <dbgPrint(unsigned short)>
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
  
 fail:
  return false;
    7630:	movs	r0, #0
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
      DBG_FAIL_MACRO;
      goto fail;
    7632:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(uint8_t c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
    7636:	ldr	r5, [pc, #496]	; (7828 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x268>)
    7638:	lsr.w	r4, r5, r4
    763c:	lsls	r4, r4, #31
    763e:	bpl.n	75ee <FatFile::parsePathName(char const*, fname_t*, char const**)+0x2e>
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
      DBG_FAIL_MACRO;
    7640:	movs	r0, #211	; 0xd3
    7642:	bl	73fc <dbgPrint(unsigned short)>
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
  
 fail:
  return false;
    7646:	movs	r0, #0
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
      DBG_FAIL_MACRO;
      goto fail;
    7648:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  while (*path == ' ') {
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    764c:	movs	r4, #0
    764e:	adds	r7, r0, r4
    7650:	mov	r6, r7
    7652:	mov	r5, r4
    7654:	movs	r3, #47	; 0x2f
    7656:	b.n	765e <FatFile::parsePathName(char const*, fname_t*, char const**)+0x9e>
    7658:	ldrb.w	r3, [r6, #1]!
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
    765c:	adds	r5, #1
    765e:	cmp	r3, #32
    7660:	beq.n	7658 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x98>
    7662:	cmp	r3, #47	; 0x2f
    7664:	beq.n	7658 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x98>
  *ptr = &path[end];
    7666:	add	r5, r0
    7668:	str	r5, [r2, #0]

  // Back over spaces and dots.
  while (len) {
    766a:	cbz	r4, 7680 <FatFile::parsePathName(char const*, fname_t*, char const**)+0xc0>
    766c:	mov	r2, r7
    c = path[len - 1];
    766e:	ldrb.w	r3, [r2, #-1]!
    if (c != '.' && c != ' ') {
    7672:	cmp	r3, #46	; 0x2e
    7674:	beq.n	767c <FatFile::parsePathName(char const*, fname_t*, char const**)+0xbc>
    7676:	cmp	r3, #32
    7678:	bne.w	77cc <FatFile::parsePathName(char const*, fname_t*, char const**)+0x20c>
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
  *ptr = &path[end];

  // Back over spaces and dots.
  while (len) {
    767c:	subs	r4, #1
    767e:	bne.n	766e <FatFile::parsePathName(char const*, fname_t*, char const**)+0xae>
    7680:	mov.w	r5, #4294967295
    7684:	mov	r3, r4
  // Max length of LFN is 255.
  if (len > 255) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  fname->len = len;
    7686:	str	r3, [r1, #4]
    7688:	add.w	r6, r1, #23
    768c:	add.w	r3, r1, #12
  // Blank file short name.
  for (uint8_t k = 0; k < 11; k++) {
    fname->sfn[k] = ' ';
    7690:	movs	r2, #32
    7692:	strb.w	r2, [r3, #1]!
    DBG_FAIL_MACRO;
    goto fail;
  }
  fname->len = len;
  // Blank file short name.
  for (uint8_t k = 0; k < 11; k++) {
    7696:	cmp	r3, r6
    7698:	bne.n	7692 <FatFile::parsePathName(char const*, fname_t*, char const**)+0xd2>
    769a:	subs	r6, r0, #1
    769c:	movs	r2, #0
    769e:	b.n	76a2 <FatFile::parsePathName(char const*, fname_t*, char const**)+0xe2>
    fname->sfn[k] = ' ';
  }
  // skip leading spaces and dots.
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
    76a0:	adds	r2, #1
    76a2:	ldrb.w	r3, [r6, #1]!
    76a6:	cmp	r3, #46	; 0x2e
    76a8:	beq.n	76a0 <FatFile::parsePathName(char const*, fname_t*, char const**)+0xe0>
    76aa:	cmp	r3, #32
    76ac:	beq.n	76a0 <FatFile::parsePathName(char const*, fname_t*, char const**)+0xe0>
  // Not 8.3 if leading dot or space.
  is83 = !si;
    76ae:	clz	ip, r2

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
    76b2:	adds	r6, r5, #1
    fname->sfn[k] = ' ';
  }
  // skip leading spaces and dots.
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
  // Not 8.3 if leading dot or space.
  is83 = !si;
    76b4:	mov.w	ip, ip, lsr #5

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
    76b8:	beq.n	76d4 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x114>
    76ba:	ldrb	r7, [r0, r5]
    76bc:	cmp	r7, #46	; 0x2e
    76be:	add.w	r6, r0, r5
    76c2:	bne.n	76ce <FatFile::parsePathName(char const*, fname_t*, char const**)+0x10e>
    76c4:	b.n	76d4 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x114>
    76c6:	ldrb.w	r7, [r6, #-1]!
    76ca:	cmp	r7, #46	; 0x2e
    76cc:	beq.n	76d4 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x114>
    76ce:	adds.w	r5, r5, #4294967295
    76d2:	bcs.n	76c6 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x106>
  for (; si < len; si++) {
    76d4:	cmp	r2, r4
    76d6:	mov.w	r9, #0
    76da:	bge.w	7814 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x254>
    76de:	mov	r6, r9
    76e0:	mov	sl, r9
    76e2:	movs	r7, #7
    76e4:	mov.w	r8, #8
    76e8:	b.n	7736 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x176>
    c = path[si];
    if (c == ' ' || (c == '.' && dot != si)) {
    76ea:	cmp	r3, #46	; 0x2e
    76ec:	beq.n	777c <FatFile::parsePathName(char const*, fname_t*, char const**)+0x1bc>
  /** Check for a legal 8.3 character.
   * \param[in] c Character to be checked.
   * \return true for a legal 8.3 character.
   */
  static bool legal83Char(uint8_t c) {
    if (c == '"' || c == '|') {
    76ee:	cmp	r3, #34	; 0x22
    76f0:	beq.n	770a <FatFile::parsePathName(char const*, fname_t*, char const**)+0x14a>
    76f2:	cmp	r3, #124	; 0x7c
    76f4:	beq.n	770a <FatFile::parsePathName(char const*, fname_t*, char const**)+0x14a>
      return false;
    }
    // *+,./
    if (0X2A <= c && c <= 0X2F && c != 0X2D) {
    76f6:	sub.w	lr, r3, #42	; 0x2a
    76fa:	cmp.w	lr, #5
    76fe:	bls.n	7790 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x1d0>
      return false;
    }
    // :;<=>?
    if (0X3A <= c && c <= 0X3F) {
    7700:	sub.w	lr, r3, #58	; 0x3a
    7704:	cmp.w	lr, #5
    7708:	bhi.n	77ba <FatFile::parsePathName(char const*, fname_t*, char const**)+0x1fa>
      is83 = false;
      continue;
    }
    if (!legal83Char(c) && si != dot) {
    770a:	cmp	r5, r2
    770c:	beq.n	7780 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x1c0>
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
    770e:	cmp	r7, r6
    7710:	bcc.n	7764 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x1a4>
    if (c == ' ' || (c == '.' && dot != si)) {
      is83 = false;
      continue;
    }
    if (!legal83Char(c) && si != dot) {
      is83 = false;
    7712:	mov.w	ip, #0
      c = '_';
    7716:	movs	r3, #95	; 0x5f
        c += 'A' - 'a';
        lc |= bit;
      } else if ('A' <= c && c <= 'Z') {
        uc |= bit;
      }
      fname->sfn[i++] = c;
    7718:	add.w	lr, r6, #1
    771c:	add.w	fp, r1, r6
    7720:	uxtb.w	r6, lr
      if (i < 7) {
    7724:	cmp	r6, #6
        c += 'A' - 'a';
        lc |= bit;
      } else if ('A' <= c && c <= 'Z') {
        uc |= bit;
      }
      fname->sfn[i++] = c;
    7726:	strb.w	r3, [fp, #13]
      if (i < 7) {
    772a:	bhi.n	772e <FatFile::parsePathName(char const*, fname_t*, char const**)+0x16e>
        fname->seqPos = i;
    772c:	strb	r6, [r1, #12]
  // Not 8.3 if leading dot or space.
  is83 = !si;

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
  for (; si < len; si++) {
    772e:	adds	r2, #1
    7730:	cmp	r2, r4
    7732:	bge.n	7744 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x184>
    7734:	ldrb	r3, [r0, r2]
    c = path[si];
    if (c == ' ' || (c == '.' && dot != si)) {
    7736:	cmp	r3, #32
    7738:	bne.n	76ea <FatFile::parsePathName(char const*, fname_t*, char const**)+0x12a>
  // Not 8.3 if leading dot or space.
  is83 = !si;

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
  for (; si < len; si++) {
    773a:	adds	r2, #1
    773c:	cmp	r2, r4
    c = path[si];
    if (c == ' ' || (c == '.' && dot != si)) {
      is83 = false;
    773e:	mov.w	ip, #0
  // Not 8.3 if leading dot or space.
  is83 = !si;

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
  for (; si < len; si++) {
    7742:	blt.n	7734 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x174>
      if (i < 7) {
        fname->seqPos = i;
      }
    }
  }
  if (fname->sfn[0] == ' ') {
    7744:	ldrb	r3, [r1, #13]
    7746:	cmp	r3, #32
    7748:	beq.n	77f6 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x236>
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (is83) {
    774a:	cmp.w	ip, #0
    774e:	beq.n	77dc <FatFile::parsePathName(char const*, fname_t*, char const**)+0x21c>
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
    7750:	tst.w	sl, r9
    7754:	it	ne
    7756:	movne.w	r9, #2
    775a:	strb.w	r9, [r1]
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
    775e:	movs	r0, #1
    7760:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (!legal83Char(c) && si != dot) {
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
      if (in == 10) {
    7764:	cmp	r7, #10
    7766:	beq.n	77f0 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x230>
      }
      if (si != dot) {
        is83 = false;
      }
      // Break if no dot and base-name is longer than eight characters.
      if (si > dot) {
    7768:	cmp	r5, r2
    776a:	blt.n	77f0 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x230>
    776c:	mov	r2, r5
        break;
      }
      si = dot;
      in = 10;  // Max index for full 8.3 name.
    776e:	movs	r7, #10
      i = 8;    // Place for extension.
    7770:	movs	r6, #8
      bit = FAT_CASE_LC_EXT;  // bit for extension.
    7772:	mov.w	r8, #16
        // Done - extension longer than three characters.
        is83 = false;
        break;
      }
      if (si != dot) {
        is83 = false;
    7776:	mov.w	ip, #0
    777a:	b.n	772e <FatFile::parsePathName(char const*, fname_t*, char const**)+0x16e>

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
  for (; si < len; si++) {
    c = path[si];
    if (c == ' ' || (c == '.' && dot != si)) {
    777c:	cmp	r5, r2
    777e:	bne.n	773a <FatFile::parsePathName(char const*, fname_t*, char const**)+0x17a>
    if (!legal83Char(c) && si != dot) {
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
      if (in == 10) {
    7780:	cmp	r7, #10
    7782:	beq.n	77f0 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x230>
    7784:	mov	r2, r5
      // Break if no dot and base-name is longer than eight characters.
      if (si > dot) {
        break;
      }
      si = dot;
      in = 10;  // Max index for full 8.3 name.
    7786:	movs	r7, #10
      i = 8;    // Place for extension.
    7788:	movs	r6, #8
      bit = FAT_CASE_LC_EXT;  // bit for extension.
    778a:	mov.w	r8, #16
    778e:	b.n	772e <FatFile::parsePathName(char const*, fname_t*, char const**)+0x16e>
  static bool legal83Char(uint8_t c) {
    if (c == '"' || c == '|') {
      return false;
    }
    // *+,./
    if (0X2A <= c && c <= 0X2F && c != 0X2D) {
    7790:	cmp	r3, #45	; 0x2d
    7792:	bne.n	770a <FatFile::parsePathName(char const*, fname_t*, char const**)+0x14a>
    c = path[si];
    if (c == ' ' || (c == '.' && dot != si)) {
      is83 = false;
      continue;
    }
    if (!legal83Char(c) && si != dot) {
    7794:	sub.w	lr, r3, #33	; 0x21
    7798:	cmp.w	lr, #93	; 0x5d
    779c:	bhi.n	770a <FatFile::parsePathName(char const*, fname_t*, char const**)+0x14a>
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
    779e:	cmp	r5, r2
    77a0:	beq.n	7780 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x1c0>
    77a2:	cmp	r7, r6
    77a4:	bcc.n	7764 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x1a4>
      si = dot;
      in = 10;  // Max index for full 8.3 name.
      i = 8;    // Place for extension.
      bit = FAT_CASE_LC_EXT;  // bit for extension.
    } else {
      if ('a' <= c && c <= 'z') {
    77a6:	sub.w	lr, r3, #97	; 0x61
    77aa:	cmp.w	lr, #25
    77ae:	bhi.n	7818 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x258>
        c += 'A' - 'a';
    77b0:	subs	r3, #32
    77b2:	uxtb	r3, r3
        lc |= bit;
    77b4:	orr.w	r9, r8, r9
    77b8:	b.n	7718 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x158>
    // :;<=>?
    if (0X3A <= c && c <= 0X3F) {
      return false;
    }
    // [\]
    if (0X5B <= c && c <= 0X5D) {
    77ba:	sub.w	lr, r3, #91	; 0x5b
    77be:	cmp.w	lr, #2
    77c2:	bls.n	770a <FatFile::parsePathName(char const*, fname_t*, char const**)+0x14a>
    77c4:	b.n	7794 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x1d4>
      goto fail;
    }
  }
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
  *ptr = &path[end];
    77c6:	str	r7, [r2, #0]
    77c8:	adds	r7, r0, r4
    77ca:	b.n	766c <FatFile::parsePathName(char const*, fname_t*, char const**)+0xac>
      break;
    }
    len--;
  }
  // Max length of LFN is 255.
  if (len > 255) {
    77cc:	cmp	r4, #255	; 0xff
    77ce:	ble.n	7804 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x244>
    DBG_FAIL_MACRO;
    77d0:	movs	r0, #229	; 0xe5
    77d2:	bl	73fc <dbgPrint(unsigned short)>
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
  
 fail:
  return false;
    77d6:	movs	r0, #0
    len--;
  }
  // Max length of LFN is 255.
  if (len > 255) {
    DBG_FAIL_MACRO;
    goto fail;
    77d8:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

  if (is83) {
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
    77dc:	ldrb	r3, [r1, #12]
    77de:	add	r3, r1
  }

  if (is83) {
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    77e0:	movs	r0, #1
    fname->sfn[fname->seqPos] = '~';
    77e2:	movs	r4, #126	; 0x7e
    fname->sfn[fname->seqPos + 1] = '1';
    77e4:	movs	r2, #49	; 0x31
  }

  if (is83) {
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    77e6:	strb	r0, [r1, #0]
    fname->sfn[fname->seqPos] = '~';
    77e8:	strb	r4, [r3, #13]
    fname->sfn[fname->seqPos + 1] = '1';
    77ea:	strb	r2, [r3, #14]
    77ec:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (i < 7) {
        fname->seqPos = i;
      }
    }
  }
  if (fname->sfn[0] == ' ') {
    77f0:	ldrb	r3, [r1, #13]
    77f2:	cmp	r3, #32
    77f4:	bne.n	77dc <FatFile::parsePathName(char const*, fname_t*, char const**)+0x21c>
    DBG_FAIL_MACRO;
    77f6:	movw	r0, #285	; 0x11d
    77fa:	bl	73fc <dbgPrint(unsigned short)>
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
  
 fail:
  return false;
    77fe:	movs	r0, #0
      }
    }
  }
  if (fname->sfn[0] == ' ') {
    DBG_FAIL_MACRO;
    goto fail;
    7800:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7804:	subs	r5, r4, #1
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
  *ptr = &path[end];

  // Back over spaces and dots.
  while (len) {
    c = path[len - 1];
    7806:	mov	r3, r4
    7808:	b.n	7686 <FatFile::parsePathName(char const*, fname_t*, char const**)+0xc6>
      goto fail;
    }
  }
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
  *ptr = &path[end];
    780a:	str	r0, [r2, #0]
    780c:	mov	r4, r3
    780e:	mov.w	r5, #4294967295
    7812:	b.n	7686 <FatFile::parsePathName(char const*, fname_t*, char const**)+0xc6>
  // Not 8.3 if leading dot or space.
  is83 = !si;

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
  for (; si < len; si++) {
    7814:	mov	sl, r9
    7816:	b.n	7744 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x184>
      bit = FAT_CASE_LC_EXT;  // bit for extension.
    } else {
      if ('a' <= c && c <= 'z') {
        c += 'A' - 'a';
        lc |= bit;
      } else if ('A' <= c && c <= 'Z') {
    7818:	sub.w	lr, r3, #65	; 0x41
    781c:	cmp.w	lr, #25
        uc |= bit;
    7820:	it	ls
    7822:	orrls.w	sl, r8, sl
    7826:	b.n	7718 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x158>
    7828:	.word	0x35000101

0000782c <FatFile::remove()>:

fail:
  return 0;
}
//------------------------------------------------------------------------------
bool FatFile::remove() {
    782c:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  FatFile dirFile;
  DirFat_t* dir;
  DirLfn_t* ldir;

  // Cant' remove not open for write.
  if (!isWritable()) {
    7830:	ldrb	r3, [r0, #2]

fail:
  return 0;
}
//------------------------------------------------------------------------------
bool FatFile::remove() {
    7832:	sub	sp, #40	; 0x28
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attributes(FILE_ATTR_CLOSED), m_error(0), m_flags(0) {}
    7834:	movs	r2, #0
  FatFile dirFile;
  DirFat_t* dir;
  DirLfn_t* ldir;

  // Cant' remove not open for write.
  if (!isWritable()) {
    7836:	and.w	r3, r3, #2
    783a:	strb.w	r2, [sp, #4]
    783e:	strb.w	r2, [sp, #5]
    7842:	strb.w	r2, [sp, #6]
    7846:	cmp	r3, #0
    7848:	beq.n	78c4 <FatFile::remove()+0x98>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Free any clusters.
  if (m_firstCluster && !m_vol->freeChain(m_firstCluster)) {
    784a:	ldr	r1, [r0, #32]
    784c:	mov	r6, r0
    784e:	cbnz	r1, 78a8 <FatFile::remove()+0x7c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Cache directory entry.
  dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
    7850:	movs	r1, #1
    7852:	mov	r0, r6
    7854:	bl	5f7c <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    7858:	mov	r7, r0
    785a:	cmp	r0, #0
    785c:	beq.w	7988 <FatFile::remove()+0x15c>
    7860:	subs	r1, r7, #1
    7862:	add.w	r0, r7, #10
#include "FatFile.h"
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
    7866:	movs	r4, #0
  for (uint8_t i = 0; i < 11; i++) {
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
    7868:	lsrs	r2, r4, #1
    786a:	ldrb.w	r5, [r1, #1]!
    786e:	orr.w	r3, r2, r4, lsl #7
    7872:	uxtab	r3, r5, r3
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
    7876:	cmp	r1, r0
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
    7878:	uxtb	r4, r3
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
    787a:	bne.n	7868 <FatFile::remove()+0x3c>
    goto fail;
  }
  checksum = lfnChecksum(dir->name);

  // Mark entry deleted.
  dir->name[0] = FAT_NAME_DELETED;
    787c:	mov.w	r8, #229	; 0xe5
    7880:	strb.w	r8, [r7]
  // Set this file closed.
  m_attributes = FILE_ATTR_CLOSED;
  m_flags = 0;

  // Write entry to device.
  if (!m_vol->cacheSync()) {
    7884:	ldr	r5, [r6, #8]

  // Mark entry deleted.
  dir->name[0] = FAT_NAME_DELETED;

  // Set this file closed.
  m_attributes = FILE_ATTR_CLOSED;
    7886:	movs	r3, #0
  cache_t* cacheFetchFat(uint32_t sector, uint8_t options) {
    return m_fatCache.read(sector,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    7888:	add.w	r0, r5, #40	; 0x28
    788c:	strb	r3, [r6, #0]
  m_flags = 0;
    788e:	strb	r3, [r6, #2]
    7890:	bl	6f58 <FatCache::sync()>
    7894:	cbnz	r0, 78d8 <FatFile::remove()+0xac>

  // Write entry to device.
  if (!m_vol->cacheSync()) {
    DBG_FAIL_MACRO;
    7896:	movw	r0, #594	; 0x252
    789a:	bl	73fc <dbgPrint(unsigned short)>
  }
  // Fall into fail.
  DBG_FAIL_MACRO;

fail:
  return false;
    789e:	movs	r5, #0
}
    78a0:	mov	r0, r5
    78a2:	add	sp, #40	; 0x28
    78a4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (!isWritable()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Free any clusters.
  if (m_firstCluster && !m_vol->freeChain(m_firstCluster)) {
    78a8:	ldr	r0, [r0, #8]
    78aa:	bl	7154 <FatPartition::freeChain(unsigned long)>
    78ae:	mov	r5, r0
    78b0:	cmp	r0, #0
    78b2:	bne.n	7850 <FatFile::remove()+0x24>
    DBG_FAIL_MACRO;
    78b4:	movw	r0, #574	; 0x23e
    78b8:	bl	73fc <dbgPrint(unsigned short)>
  // Fall into fail.
  DBG_FAIL_MACRO;

fail:
  return false;
}
    78bc:	mov	r0, r5
    78be:	add	sp, #40	; 0x28
    78c0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  DirFat_t* dir;
  DirLfn_t* ldir;

  // Cant' remove not open for write.
  if (!isWritable()) {
    DBG_FAIL_MACRO;
    78c4:	movw	r0, #569	; 0x239
    78c8:	and.w	r5, r3, #255	; 0xff
    78cc:	bl	73fc <dbgPrint(unsigned short)>
  // Fall into fail.
  DBG_FAIL_MACRO;

fail:
  return false;
}
    78d0:	mov	r0, r5
    78d2:	add	sp, #40	; 0x28
    78d4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    78d8:	add.w	r0, r5, #564	; 0x234
    78dc:	bl	6f58 <FatCache::sync()>
    78e0:	cmp	r0, #0
    78e2:	beq.n	7896 <FatFile::remove()+0x6a>
    78e4:	ldr	r0, [r5, #0]
  // sector I/O functions.
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
  }
  bool syncDevice() {
    return m_blockDev->syncDevice();
    78e6:	ldr	r3, [r0, #0]
    78e8:	ldr	r3, [r3, #20]
    78ea:	blx	r3
  cache_t* cacheFetchFat(uint32_t sector, uint8_t options) {
    return m_fatCache.read(sector,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    78ec:	mov	r5, r0
    78ee:	cmp	r0, #0
    78f0:	beq.n	7896 <FatFile::remove()+0x6a>
  // Write entry to device.
  if (!m_vol->cacheSync()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!isLFN()) {
    78f2:	ldrb	r3, [r6, #3]
    78f4:	cmp	r3, #0
    78f6:	beq.n	78a0 <FatFile::remove()+0x74>
    // Done, no LFN entries.
    return true;
  }
  if (!dirFile.openCluster(this)) {
    78f8:	add	r0, sp, #4
    78fa:	mov	r1, r6
    78fc:	bl	745c <FatFile::openCluster(FatFile*)>
    7900:	mov	r3, r0
    7902:	cmp	r0, #0
    7904:	beq.n	797c <FatFile::remove()+0x150>
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    7906:	ldrb	r3, [r6, #3]
    7908:	movs	r7, #1
    790a:	cbnz	r3, 7950 <FatFile::remove()+0x124>
    790c:	b.n	7994 <FatFile::remove()+0x168>
    if (!dirFile.seekSet(32UL*(m_dirIndex - order))) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    ldir = reinterpret_cast<DirLfn_t*>(dirFile.readDirCache());
    790e:	add	r0, sp, #4
    7910:	bl	63d8 <FatFile::readDirCache(bool)>
  }
  if (!dirFile.openCluster(this)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    7914:	adds	r1, r7, #1
    if (!dirFile.seekSet(32UL*(m_dirIndex - order))) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    ldir = reinterpret_cast<DirLfn_t*>(dirFile.readDirCache());
    if (!ldir) {
    7916:	mov	r3, r0
    7918:	cmp	r0, #0
    791a:	beq.n	79a0 <FatFile::remove()+0x174>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME ||
    791c:	ldrb	r2, [r0, #11]
    791e:	cmp	r2, #15
    7920:	bne.n	7970 <FatFile::remove()+0x144>
        order != (ldir->order & 0X1F) ||
    7922:	ldrb	r2, [r0, #0]
    ldir = reinterpret_cast<DirLfn_t*>(dirFile.readDirCache());
    if (!ldir) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME ||
    7924:	and.w	r0, r2, #31
    7928:	cmp	r7, r0
  }
  if (!dirFile.openCluster(this)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    792a:	uxtb	r7, r1
    ldir = reinterpret_cast<DirLfn_t*>(dirFile.readDirCache());
    if (!ldir) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME ||
    792c:	bne.n	7970 <FatFile::remove()+0x144>
        order != (ldir->order & 0X1F) ||
    792e:	ldrb	r1, [r3, #13]
    7930:	cmp	r1, r4
    7932:	bne.n	7970 <FatFile::remove()+0x144>
        checksum != ldir->checksum) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    last = ldir->order & FAT_ORDER_LAST_LONG_ENTRY;
    ldir->order = FAT_NAME_DELETED;
    7934:	strb.w	r8, [r3]
    m_vol->cacheDirty();
    7938:	ldr	r1, [r6, #8]
  cache_t* buffer() {
    return &m_buffer;
  }
  /** Set current sector dirty. */
  void dirty() {
    m_status |= CACHE_STATUS_DIRTY;
    793a:	ldrb.w	r3, [r1, #40]	; 0x28
    793e:	orr.w	r3, r3, #1
    7942:	strb.w	r3, [r1, #40]	; 0x28
    if (last) {
    7946:	lsls	r3, r2, #25
    7948:	bmi.n	79ac <FatFile::remove()+0x180>
  }
  if (!dirFile.openCluster(this)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    794a:	ldrb	r3, [r6, #3]
    794c:	cmp	r3, r7
    794e:	bcc.n	7994 <FatFile::remove()+0x168>
    if (!dirFile.seekSet(32UL*(m_dirIndex - order))) {
    7950:	ldrh	r1, [r6, #4]
    7952:	subs	r1, r1, r7
    7954:	lsls	r1, r1, #5
    7956:	add	r0, sp, #4
    7958:	bl	6428 <FatFile::seekSet(unsigned long)>
      DBG_FAIL_MACRO;
      goto fail;
    }
    ldir = reinterpret_cast<DirLfn_t*>(dirFile.readDirCache());
    795c:	movs	r1, #0
  if (!dirFile.openCluster(this)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    if (!dirFile.seekSet(32UL*(m_dirIndex - order))) {
    795e:	mov	r3, r0
    7960:	cmp	r0, #0
    7962:	bne.n	790e <FatFile::remove()+0xe2>
      DBG_FAIL_MACRO;
    7964:	movw	r0, #607	; 0x25f
  }
  // Fall into fail.
  DBG_FAIL_MACRO;

fail:
  return false;
    7968:	mov	r5, r3
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    if (!dirFile.seekSet(32UL*(m_dirIndex - order))) {
      DBG_FAIL_MACRO;
    796a:	bl	73fc <dbgPrint(unsigned short)>
      goto fail;
    796e:	b.n	78a0 <FatFile::remove()+0x74>
      goto fail;
    }
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME ||
        order != (ldir->order & 0X1F) ||
        checksum != ldir->checksum) {
      DBG_FAIL_MACRO;
    7970:	movw	r0, #618	; 0x26a
    7974:	bl	73fc <dbgPrint(unsigned short)>
  }
  // Fall into fail.
  DBG_FAIL_MACRO;

fail:
  return false;
    7978:	movs	r5, #0
    }
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME ||
        order != (ldir->order & 0X1F) ||
        checksum != ldir->checksum) {
      DBG_FAIL_MACRO;
      goto fail;
    797a:	b.n	78a0 <FatFile::remove()+0x74>
  if (!isLFN()) {
    // Done, no LFN entries.
    return true;
  }
  if (!dirFile.openCluster(this)) {
    DBG_FAIL_MACRO;
    797c:	movw	r0, #602	; 0x25a
  }
  // Fall into fail.
  DBG_FAIL_MACRO;

fail:
  return false;
    7980:	mov	r5, r3
  if (!isLFN()) {
    // Done, no LFN entries.
    return true;
  }
  if (!dirFile.openCluster(this)) {
    DBG_FAIL_MACRO;
    7982:	bl	73fc <dbgPrint(unsigned short)>
    goto fail;
    7986:	b.n	78a0 <FatFile::remove()+0x74>
    goto fail;
  }
  // Cache directory entry.
  dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
  if (!dir) {
    DBG_FAIL_MACRO;
    7988:	mov.w	r0, #580	; 0x244
  }
  // Fall into fail.
  DBG_FAIL_MACRO;

fail:
  return false;
    798c:	mov	r5, r7
    goto fail;
  }
  // Cache directory entry.
  dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
  if (!dir) {
    DBG_FAIL_MACRO;
    798e:	bl	73fc <dbgPrint(unsigned short)>
    goto fail;
    7992:	b.n	78a0 <FatFile::remove()+0x74>
      }
      return true;
    }
  }
  // Fall into fail.
  DBG_FAIL_MACRO;
    7994:	movw	r0, #633	; 0x279
    7998:	bl	73fc <dbgPrint(unsigned short)>

fail:
  return false;
    799c:	movs	r5, #0
    799e:	b.n	78a0 <FatFile::remove()+0x74>
      DBG_FAIL_MACRO;
      goto fail;
    }
    ldir = reinterpret_cast<DirLfn_t*>(dirFile.readDirCache());
    if (!ldir) {
      DBG_FAIL_MACRO;
    79a0:	mov.w	r0, #612	; 0x264
  }
  // Fall into fail.
  DBG_FAIL_MACRO;

fail:
  return false;
    79a4:	mov	r5, r3
      DBG_FAIL_MACRO;
      goto fail;
    }
    ldir = reinterpret_cast<DirLfn_t*>(dirFile.readDirCache());
    if (!ldir) {
      DBG_FAIL_MACRO;
    79a6:	bl	73fc <dbgPrint(unsigned short)>
      goto fail;
    79aa:	b.n	78a0 <FatFile::remove()+0x74>
    }
    last = ldir->order & FAT_ORDER_LAST_LONG_ENTRY;
    ldir->order = FAT_NAME_DELETED;
    m_vol->cacheDirty();
    if (last) {
      if (!m_vol->cacheSync()) {
    79ac:	ldr	r4, [r6, #8]
  cache_t* cacheFetchFat(uint32_t sector, uint8_t options) {
    return m_fatCache.read(sector,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    79ae:	add.w	r0, r4, #40	; 0x28
    79b2:	bl	6f58 <FatCache::sync()>
    79b6:	cbnz	r0, 79c4 <FatFile::remove()+0x198>
        DBG_FAIL_MACRO;
    79b8:	movw	r0, #626	; 0x272
    79bc:	bl	73fc <dbgPrint(unsigned short)>
  }
  // Fall into fail.
  DBG_FAIL_MACRO;

fail:
  return false;
    79c0:	movs	r5, #0
    ldir->order = FAT_NAME_DELETED;
    m_vol->cacheDirty();
    if (last) {
      if (!m_vol->cacheSync()) {
        DBG_FAIL_MACRO;
        goto fail;
    79c2:	b.n	78a0 <FatFile::remove()+0x74>
    79c4:	add.w	r0, r4, #564	; 0x234
    79c8:	bl	6f58 <FatCache::sync()>
    79cc:	cmp	r0, #0
    79ce:	beq.n	79b8 <FatFile::remove()+0x18c>
    79d0:	ldr	r0, [r4, #0]
  // sector I/O functions.
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
  }
  bool syncDevice() {
    return m_blockDev->syncDevice();
    79d2:	ldr	r3, [r0, #0]
    79d4:	ldr	r3, [r3, #20]
    79d6:	blx	r3
  cache_t* cacheFetchFat(uint32_t sector, uint8_t options) {
    return m_fatCache.read(sector,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    79d8:	cmp	r0, #0
    79da:	beq.n	79b8 <FatFile::remove()+0x18c>
    79dc:	b.n	78a0 <FatFile::remove()+0x74>
    79de:	nop

000079e0 <FatFile::lfnUniqueSfn(fname_t*)>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::lfnUniqueSfn(fname_t* fname) {
    79e0:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;;
  DirFat_t *dir;
  uint16_t hex;

  DBG_HALT_IF(!(fname->flags & FNAME_FLAG_LOST_CHARS));
    79e4:	ldrb	r3, [r1, #0]
    79e6:	lsls	r2, r3, #31
    79e8:	bpl.n	7ad8 <FatFile::lfnUniqueSfn(fname_t*)+0xf8>
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::lfnUniqueSfn(fname_t* fname) {
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;;
    79ea:	ldrb	r7, [r1, #12]
  DirFat_t *dir;
  uint16_t hex;

  DBG_HALT_IF(!(fname->flags & FNAME_FLAG_LOST_CHARS));
  DBG_HALT_IF(fname->sfn[pos] != '~' && fname->sfn[pos + 1] != '1');
    79ec:	adds	r3, r1, r7
    79ee:	mov	r5, r1
    79f0:	ldrb	r2, [r3, #13]
    79f2:	cmp	r2, #126	; 0x7e
    79f4:	mov	r8, r0
    79f6:	beq.n	7a20 <FatFile::lfnUniqueSfn(fname_t*)+0x40>
    79f8:	ldrb	r3, [r3, #14]
    79fa:	cmp	r3, #49	; 0x31
    79fc:	beq.n	7a20 <FatFile::lfnUniqueSfn(fname_t*)+0x40>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    79fe:	movs	r1, #9
    7a00:	ldr	r0, [pc, #260]	; (7b08 <FatFile::lfnUniqueSfn(fname_t*)+0x128>)
    7a02:	bl	9ca8 <usb_serial_write>
    7a06:	movs	r1, #107	; 0x6b
    7a08:	ldr	r0, [pc, #256]	; (7b0c <FatFile::lfnUniqueSfn(fname_t*)+0x12c>)
    7a0a:	bl	9ca8 <usb_serial_write>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    7a0e:	movw	r1, #646	; 0x286
    7a12:	ldr	r0, [pc, #252]	; (7b10 <FatFile::lfnUniqueSfn(fname_t*)+0x130>)
    7a14:	bl	b31c <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    7a18:	ldr	r0, [pc, #244]	; (7b10 <FatFile::lfnUniqueSfn(fname_t*)+0x130>)
    7a1a:	bl	b250 <Print::println()>
    7a1e:	b.n	7a1e <FatFile::lfnUniqueSfn(fname_t*)+0x3e>
    7a20:	movs	r6, #2
        goto fail;
      }
      if (dir->name[0] == FAT_NAME_FREE) {
        goto done;
      }
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    7a22:	add.w	r9, r5, #13
  for (uint8_t seq = 2; seq < 100; seq++) {
    if (seq < FIRST_HASH_SEQ) {
      fname->sfn[pos + 1] = '0' + seq;
    } else {
      DBG_PRINT_IF(seq > FIRST_HASH_SEQ);
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
    7a26:	ldr	r1, [r5, #4]
    7a28:	ldr	r2, [r5, #8]
    7a2a:	adds	r3, r6, r1
    7a2c:	uxth	r3, r3
}
//------------------------------------------------------------------------------
// Daniel Bernstein University of Illinois at Chicago.
// Original had + instead of ^
static uint16_t Bernstein(uint16_t hash, const char *str, size_t len) {
  for (size_t i = 0; i < len; i++) {
    7a2e:	cbz	r1, 7a42 <FatFile::lfnUniqueSfn(fname_t*)+0x62>
    7a30:	adds	r0, r2, r1
    // hash = hash * 33 ^ str[i];
    hash = ((hash << 5) + hash) ^ str[i];
    7a32:	ldrb.w	r1, [r2], #1
    7a36:	add.w	r3, r3, r3, lsl #5
    7a3a:	eors	r3, r1
}
//------------------------------------------------------------------------------
// Daniel Bernstein University of Illinois at Chicago.
// Original had + instead of ^
static uint16_t Bernstein(uint16_t hash, const char *str, size_t len) {
  for (size_t i = 0; i < len; i++) {
    7a3c:	cmp	r0, r2
    // hash = hash * 33 ^ str[i];
    hash = ((hash << 5) + hash) ^ str[i];
    7a3e:	uxth	r3, r3
}
//------------------------------------------------------------------------------
// Daniel Bernstein University of Illinois at Chicago.
// Original had + instead of ^
static uint16_t Bernstein(uint16_t hash, const char *str, size_t len) {
  for (size_t i = 0; i < len; i++) {
    7a40:	bne.n	7a32 <FatFile::lfnUniqueSfn(fname_t*)+0x52>
    7a42:	cmp	r7, #3
    7a44:	it	cs
    7a46:	movcs	r7, #3
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
    7a48:	adds	r2, r7, #4
    7a4a:	uxtb	r2, r2
        uint8_t h = hex & 0XF;
    7a4c:	and.w	r1, r3, #15
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
    7a50:	adds	r0, r5, r2
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
    7a52:	subs	r2, #1
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
    7a54:	cmp	r1, #9
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
    7a56:	uxtb	r2, r2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
    7a58:	ite	ls
    7a5a:	addls	r1, #48	; 0x30
    7a5c:	addhi	r1, #55	; 0x37
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
    7a5e:	cmp	r2, r7
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
    7a60:	mov.w	r3, r3, lsr #4
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
    7a64:	strb	r1, [r0, #13]
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
    7a66:	bhi.n	7a4c <FatFile::lfnUniqueSfn(fname_t*)+0x6c>
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
      }
    }
    fname->sfn[pos] = '~';
    7a68:	adds	r3, r5, r7
    7a6a:	movs	r2, #126	; 0x7e
    7a6c:	strb	r2, [r3, #13]
   * \return true for success or false for failure.
   */
  bool remove(const char* path);
  /** Set the file's current position to zero. */
  void rewind() {
    seekSet(0);
    7a6e:	movs	r1, #0
    7a70:	mov	r0, r8
    7a72:	bl	6428 <FatFile::seekSet(unsigned long)>
    rewind();
    while (1) {
      dir = readDirCache(true);
    7a76:	movs	r1, #1
    7a78:	mov	r0, r8
    7a7a:	bl	63d8 <FatFile::readDirCache(bool)>
        goto fail;
      }
      if (dir->name[0] == FAT_NAME_FREE) {
        goto done;
      }
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    7a7e:	movs	r2, #11
    }
    fname->sfn[pos] = '~';
    rewind();
    while (1) {
      dir = readDirCache(true);
      if (!dir) {
    7a80:	mov	r4, r0
        goto fail;
      }
      if (dir->name[0] == FAT_NAME_FREE) {
        goto done;
      }
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    7a82:	mov	r1, r0
    }
    fname->sfn[pos] = '~';
    rewind();
    while (1) {
      dir = readDirCache(true);
      if (!dir) {
    7a84:	cbz	r0, 7aae <FatFile::lfnUniqueSfn(fname_t*)+0xce>
          goto done;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (dir->name[0] == FAT_NAME_FREE) {
    7a86:	ldrb	r3, [r4, #0]
        goto done;
      }
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    7a88:	mov	r0, r9
          goto done;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (dir->name[0] == FAT_NAME_FREE) {
    7a8a:	cbz	r3, 7ab4 <FatFile::lfnUniqueSfn(fname_t*)+0xd4>
        goto done;
      }
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    7a8c:	ldrb	r3, [r4, #11]
    7a8e:	lsls	r3, r3, #28
    7a90:	bmi.n	7a76 <FatFile::lfnUniqueSfn(fname_t*)+0x96>
    7a92:	bl	c800 <memcmp>
    7a96:	mov	r4, r0
    7a98:	cmp	r0, #0
    7a9a:	bne.n	7a76 <FatFile::lfnUniqueSfn(fname_t*)+0x96>
  uint16_t hex;

  DBG_HALT_IF(!(fname->flags & FNAME_FLAG_LOST_CHARS));
  DBG_HALT_IF(fname->sfn[pos] != '~' && fname->sfn[pos + 1] != '1');

  for (uint8_t seq = 2; seq < 100; seq++) {
    7a9c:	cmp	r6, #99	; 0x63
    7a9e:	bne.n	7aba <FatFile::lfnUniqueSfn(fname_t*)+0xda>
        break;
      }
    }
  }
  // fall inti fail - too many tries.
  DBG_FAIL_MACRO;
    7aa0:	movw	r0, #686	; 0x2ae
    7aa4:	bl	73fc <dbgPrint(unsigned short)>

fail:
  return false;
    7aa8:	mov	r0, r4
    7aaa:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    fname->sfn[pos] = '~';
    rewind();
    while (1) {
      dir = readDirCache(true);
      if (!dir) {
        if (!getError()) {
    7aae:	ldrb.w	r3, [r8, #1]
    7ab2:	cbnz	r3, 7afa <FatFile::lfnUniqueSfn(fname_t*)+0x11a>

fail:
  return false;

done:
  return true;
    7ab4:	movs	r0, #1
    7ab6:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    7aba:	movs	r1, #107	; 0x6b
    7abc:	ldr	r0, [pc, #76]	; (7b0c <FatFile::lfnUniqueSfn(fname_t*)+0x12c>)
    7abe:	bl	9ca8 <usb_serial_write>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    7ac2:	mov.w	r1, #652	; 0x28c
    7ac6:	ldr	r0, [pc, #72]	; (7b10 <FatFile::lfnUniqueSfn(fname_t*)+0x130>)
    7ac8:	bl	b31c <Print::print(long)>
    7acc:	adds	r6, #1
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    7ace:	ldr	r0, [pc, #64]	; (7b10 <FatFile::lfnUniqueSfn(fname_t*)+0x130>)
    7ad0:	bl	b250 <Print::println()>
    7ad4:	uxth	r6, r6
    7ad6:	b.n	7a26 <FatFile::lfnUniqueSfn(fname_t*)+0x46>
    7ad8:	movs	r1, #9
    7ada:	ldr	r0, [pc, #44]	; (7b08 <FatFile::lfnUniqueSfn(fname_t*)+0x128>)
    7adc:	bl	9ca8 <usb_serial_write>
    7ae0:	movs	r1, #107	; 0x6b
    7ae2:	ldr	r0, [pc, #40]	; (7b0c <FatFile::lfnUniqueSfn(fname_t*)+0x12c>)
    7ae4:	bl	9ca8 <usb_serial_write>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    7ae8:	movw	r1, #645	; 0x285
    7aec:	ldr	r0, [pc, #32]	; (7b10 <FatFile::lfnUniqueSfn(fname_t*)+0x130>)
    7aee:	bl	b31c <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    7af2:	ldr	r0, [pc, #28]	; (7b10 <FatFile::lfnUniqueSfn(fname_t*)+0x130>)
    7af4:	bl	b250 <Print::println()>
    7af8:	b.n	7af8 <FatFile::lfnUniqueSfn(fname_t*)+0x118>
      if (!dir) {
        if (!getError()) {
          // At EOF and name not found if no error.
          goto done;
        }
        DBG_FAIL_MACRO;
    7afa:	movw	r0, #673	; 0x2a1
    7afe:	bl	73fc <dbgPrint(unsigned short)>
  }
  // fall inti fail - too many tries.
  DBG_FAIL_MACRO;

fail:
  return false;
    7b02:	mov	r0, r4
        if (!getError()) {
          // At EOF and name not found if no error.
          goto done;
        }
        DBG_FAIL_MACRO;
        goto fail;
    7b04:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    7b08:	.word	0x00010644
    7b0c:	.word	0x00010650
    7b10:	.word	0x1fff09a4

00007b14 <FatFile::open(FatFile*, fname_t*, int)>:
  
 fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
    7b14:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7b18:	mov	r6, r1
  uint16_t time;
  DirFat_t* dir;
  DirLfn_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
    7b1a:	ldrb	r1, [r1, #0]
  
 fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
    7b1c:	sub	sp, #52	; 0x34
  uint16_t time;
  DirFat_t* dir;
  DirLfn_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
    7b1e:	tst.w	r1, #112	; 0x70
  
 fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
    7b22:	str	r0, [sp, #32]
    7b24:	str	r3, [sp, #24]
  uint16_t time;
  DirFat_t* dir;
  DirLfn_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
    7b26:	beq.n	7b2c <FatFile::open(FatFile*, fname_t*, int)+0x18>
    7b28:	ldrb	r3, [r0, #0]
    7b2a:	cbz	r3, 7b3e <FatFile::open(FatFile*, fname_t*, int)+0x2a>
    DBG_FAIL_MACRO;
    7b2c:	movw	r0, #319	; 0x13f
    7b30:	bl	73fc <dbgPrint(unsigned short)>
    goto fail;
  }
  return true;

fail:
  return false;
    7b34:	movs	r5, #0
}
    7b36:	mov	r0, r5
    7b38:	add	sp, #52	; 0x34
    7b3a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (!dirFile->isDir() || isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
    7b3e:	ldrb	r3, [r2, #0]
  uint16_t curIndex;
  uint16_t date;
  uint16_t time;
  DirFat_t* dir;
  DirLfn_t* ldir;
  size_t len = fname->len;
    7b40:	ldr.w	r8, [r2, #4]
  if (!dirFile->isDir() || isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
    7b44:	lsls	r3, r3, #30
    7b46:	mov	fp, r2
    7b48:	bne.n	7bcc <FatFile::open(FatFile*, fname_t*, int)+0xb8>
    7b4a:	movs	r7, #1
    7b4c:	movs	r1, #0
    7b4e:	mov	r0, r6
  uint8_t freeNeed;
  uint8_t freeFound = 0;
  uint8_t order = 0;
  uint8_t checksum = 0;
  uint8_t ms10;
  uint16_t freeIndex = 0;
    7b50:	mov	r9, r1
    7b52:	bl	6428 <FatFile::seekSet(unsigned long)>
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
    7b56:	add.w	r3, fp, #13
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
  uint8_t order = 0;
  uint8_t checksum = 0;
    7b5a:	str.w	r9, [sp, #28]
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
  uint8_t order = 0;
    7b5e:	str.w	r9, [sp, #12]
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
    7b62:	mov	r4, r9
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
    7b64:	mov	sl, r9
 fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
    7b66:	str.w	r9, [sp, #20]
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
    7b6a:	str	r3, [sp, #16]
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
    dir = dirFile->readDirCache(true);
    7b6c:	movs	r1, #1
    7b6e:	mov	r0, r6
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
    7b70:	ldr	r5, [r6, #20]
    dir = dirFile->readDirCache(true);
    7b72:	bl	63d8 <FatFile::readDirCache(bool)>
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
    7b76:	ubfx	r5, r5, #5, #16
    dir = dirFile->readDirCache(true);
    if (!dir) {
    7b7a:	mov	r3, r0
    7b7c:	cmp	r0, #0
    7b7e:	beq.w	7c96 <FatFile::open(FatFile*, fname_t*, int)+0x182>
        goto fail;
      }
      // At EOF
      goto create;
    }
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == FAT_NAME_FREE) {
    7b82:	ldrb	r2, [r0, #0]
    7b84:	cmp	r2, #229	; 0xe5
    7b86:	beq.n	7bf8 <FatFile::open(FatFile*, fname_t*, int)+0xe4>
    7b88:	cmp	r2, #0
    7b8a:	beq.n	7bf8 <FatFile::open(FatFile*, fname_t*, int)+0xe4>
      if (dir->name[0] == FAT_NAME_FREE) {
        goto create;
      }
    } else {
      if (freeFound < freeNeed) {
        freeFound = 0;
    7b8c:	cmp	r4, r7
    7b8e:	it	cc
    7b90:	movcc	r4, #0
      }
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == '.') {
    7b92:	cmp	r2, #46	; 0x2e
    7b94:	beq.n	7bf2 <FatFile::open(FatFile*, fname_t*, int)+0xde>
    7b96:	ldrb	r1, [r3, #11]
      lfnOrd = 0;
    } else if (isLongName(dir)) {
    7b98:	cmp	r1, #15
    7b9a:	beq.n	7c14 <FatFile::open(FatFile*, fname_t*, int)+0x100>
          // Not found.
          lfnOrd = 0;
          break;
        }
      }
    } else if (isFileOrSubdir(dir)) {
    7b9c:	and.w	r1, r1, #8
    7ba0:	and.w	r2, r1, #255	; 0xff
    7ba4:	cbnz	r1, 7bf2 <FatFile::open(FatFile*, fname_t*, int)+0xde>
      if (lfnOrd) {
    7ba6:	cmp.w	sl, #0
    7baa:	bne.w	7efe <FatFile::open(FatFile*, fname_t*, int)+0x3ea>
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
    7bae:	mov	r0, r3
    7bb0:	movs	r2, #11
    7bb2:	ldr	r1, [sp, #16]
    7bb4:	bl	c800 <memcmp>
    7bb8:	cmp	r0, #0
    7bba:	bne.n	7b6c <FatFile::open(FatFile*, fname_t*, int)+0x58>
        if (!(fname->flags & FNAME_FLAG_LOST_CHARS)) {
    7bbc:	ldrb.w	r3, [fp]
    7bc0:	lsls	r0, r3, #31
    7bc2:	bpl.w	7ede <FatFile::open(FatFile*, fname_t*, int)+0x3ca>
          goto found;
        }
        fnameFound = true;
    7bc6:	movs	r3, #1
    7bc8:	str	r3, [sp, #20]
    7bca:	b.n	7b6c <FatFile::open(FatFile*, fname_t*, int)+0x58>
  if (!dirFile->isDir() || isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
    7bcc:	ldr	r7, [pc, #744]	; (7eb8 <FatFile::open(FatFile*, fname_t*, int)+0x3a4>)
    7bce:	add.w	r3, r8, #12
    7bd2:	umull	r3, r7, r7, r3
    7bd6:	lsrs	r7, r7, #2
    7bd8:	adds	r7, #1
    7bda:	uxtb	r7, r7
    7bdc:	b.n	7b4c <FatFile::open(FatFile*, fname_t*, int)+0x38>
        if ((ldir->order & FAT_ORDER_LAST_LONG_ENTRY) == 0) {
          continue;
        }
        lfnOrd = order = ldir->order & 0X1F;
        checksum = ldir->checksum;
      } else if (ldir->order != --order || checksum != ldir->checksum) {
    7bde:	ldr	r1, [sp, #12]
    7be0:	subs	r1, #1
    7be2:	uxtb	r1, r1
    7be4:	cmp	r2, r1
    7be6:	str	r1, [sp, #12]
    7be8:	bne.n	7bf2 <FatFile::open(FatFile*, fname_t*, int)+0xde>
    7bea:	ldrb	r2, [r3, #13]
    7bec:	ldr	r1, [sp, #28]
    7bee:	cmp	r1, r2
    7bf0:	beq.n	7c2a <FatFile::open(FatFile*, fname_t*, int)+0x116>
          goto found;
        }
        fnameFound = true;
      }
    } else {
      lfnOrd = 0;
    7bf2:	mov.w	sl, #0
    7bf6:	b.n	7b6c <FatFile::open(FatFile*, fname_t*, int)+0x58>
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
    7bf8:	cmp	r4, #0
    7bfa:	it	eq
    7bfc:	moveq	r9, r5
    }
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == FAT_NAME_FREE) {
      if (freeFound == 0) {
        freeIndex = curIndex;
      }
      if (freeFound < freeNeed) {
    7bfe:	cmp	r4, r7
        freeFound++;
    7c00:	itt	cc
    7c02:	addcc	r4, #1
    7c04:	uxtbcc	r4, r4
      }
      if (dir->name[0] == FAT_NAME_FREE) {
    7c06:	cmp	r2, #0
    7c08:	beq.n	7c9e <FatFile::open(FatFile*, fname_t*, int)+0x18a>
      if (freeFound < freeNeed) {
        freeFound = 0;
      }
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == '.') {
    7c0a:	cmp	r2, #229	; 0xe5
    7c0c:	bne.n	7b92 <FatFile::open(FatFile*, fname_t*, int)+0x7e>
          goto found;
        }
        fnameFound = true;
      }
    } else {
      lfnOrd = 0;
    7c0e:	mov.w	sl, #0
    7c12:	b.n	7b6c <FatFile::open(FatFile*, fname_t*, int)+0x58>
    // skip empty slot or '.' or '..'
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == '.') {
      lfnOrd = 0;
    } else if (isLongName(dir)) {
      ldir = reinterpret_cast<DirLfn_t*>(dir);
      if (!lfnOrd) {
    7c14:	cmp.w	sl, #0
    7c18:	bne.n	7bde <FatFile::open(FatFile*, fname_t*, int)+0xca>
        if ((ldir->order & FAT_ORDER_LAST_LONG_ENTRY) == 0) {
    7c1a:	lsls	r5, r2, #25
    7c1c:	bpl.n	7b6c <FatFile::open(FatFile*, fname_t*, int)+0x58>
          continue;
        }
        lfnOrd = order = ldir->order & 0X1F;
    7c1e:	and.w	sl, r2, #31
        checksum = ldir->checksum;
    7c22:	ldrb	r2, [r3, #13]
      ldir = reinterpret_cast<DirLfn_t*>(dir);
      if (!lfnOrd) {
        if ((ldir->order & FAT_ORDER_LAST_LONG_ENTRY) == 0) {
          continue;
        }
        lfnOrd = order = ldir->order & 0X1F;
    7c24:	str.w	sl, [sp, #12]
        checksum = ldir->checksum;
    7c28:	str	r2, [sp, #28]
      } else if (ldir->order != --order || checksum != ldir->checksum) {
        lfnOrd = 0;
        continue;
      }
      size_t k = 13*(order - 1);
    7c2a:	ldr	r2, [sp, #12]
    7c2c:	subs	r2, #1
    7c2e:	add.w	r5, r2, r2, lsl #1
    7c32:	add.w	r5, r2, r5, lsl #2
      if (k >= len) {
    7c36:	cmp	r8, r5
        checksum = ldir->checksum;
      } else if (ldir->order != --order || checksum != ldir->checksum) {
        lfnOrd = 0;
        continue;
      }
      size_t k = 13*(order - 1);
    7c38:	mov	r2, r5
      if (k >= len) {
    7c3a:	bls.n	7bf2 <FatFile::open(FatFile*, fname_t*, int)+0xde>
    7c3c:	add.w	r1, r5, #13
    7c40:	str.w	sl, [sp, #36]	; 0x24
    7c44:	mov	sl, r1
    7c46:	b.n	7c72 <FatFile::open(FatFile*, fname_t*, int)+0x15e>
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
    7c48:	ldr.w	r0, [fp, #8]
    7c4c:	ldrb	r2, [r0, r2]
}
#if USE_LONG_FILE_NAMES
//------------------------------------------------------------------------------
// Saves about 90 bytes of flash on 328 over tolower().
inline char lfnToLower(char c) {
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
    7c4e:	cmp.w	ip, #25
    7c52:	it	ls
    7c54:	addls	r1, #32
    7c56:	sub.w	r0, r2, #65	; 0x41
    7c5a:	it	ls
    7c5c:	uxtbls	r1, r1
    7c5e:	cmp	r0, #25
    7c60:	itt	ls
    7c62:	addls	r2, #32
    7c64:	uxtbls	r2, r2
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
    7c66:	cmp	r2, r1
    7c68:	bne.n	7bf2 <FatFile::open(FatFile*, fname_t*, int)+0xde>
      if (k >= len) {
        // Not found.
        lfnOrd = 0;
        continue;
      }
      for (uint8_t i = 0; i < 13; i++) {
    7c6a:	cmp	lr, sl
    7c6c:	beq.w	7dfa <FatFile::open(FatFile*, fname_t*, int)+0x2e6>
    7c70:	mov	r2, lr
        uint16_t u = lfnGetChar(ldir, i);
    7c72:	subs	r1, r2, r5
    7c74:	uxtb	r1, r1
    7c76:	mov	r0, r3
    7c78:	bl	73d4 <lfnGetChar(DirLfn_t*, unsigned char)>
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
    7c7c:	uxtb	r1, r0
        lfnOrd = 0;
        continue;
      }
      for (uint8_t i = 0; i < 13; i++) {
        uint16_t u = lfnGetChar(ldir, i);
        if (k == len) {
    7c7e:	cmp	r8, r2
}
#if USE_LONG_FILE_NAMES
//------------------------------------------------------------------------------
// Saves about 90 bytes of flash on 328 over tolower().
inline char lfnToLower(char c) {
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
    7c80:	sub.w	ip, r1, #65	; 0x41
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
    7c84:	add.w	lr, r2, #1
        lfnOrd = 0;
        continue;
      }
      for (uint8_t i = 0; i < 13; i++) {
        uint16_t u = lfnGetChar(ldir, i);
        if (k == len) {
    7c88:	beq.w	7ea8 <FatFile::open(FatFile*, fname_t*, int)+0x394>
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
    7c8c:	cmp	r0, #255	; 0xff
    7c8e:	bls.n	7c48 <FatFile::open(FatFile*, fname_t*, int)+0x134>
          goto found;
        }
        fnameFound = true;
      }
    } else {
      lfnOrd = 0;
    7c90:	mov.w	sl, #0
    7c94:	b.n	7b6c <FatFile::open(FatFile*, fname_t*, int)+0x58>
  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
    dir = dirFile->readDirCache(true);
    if (!dir) {
      if (dirFile->getError()) {
    7c96:	ldrb	r2, [r6, #1]
    7c98:	cmp	r2, #0
    7c9a:	bne.w	7e00 <FatFile::open(FatFile*, fname_t*, int)+0x2ec>
  }
  goto open;

create:
  // don't create unless O_CREAT and write mode
  if (!(oflag & O_CREAT) || !isWriteMode(oflag)) {
    7c9e:	ldr	r2, [sp, #24]
    7ca0:	mov	r3, r2
    7ca2:	lsls	r2, r3, #22
    7ca4:	bpl.n	7cb0 <FatFile::open(FatFile*, fname_t*, int)+0x19c>
    7ca6:	and.w	r3, r3, #3
    7caa:	subs	r3, #1
    7cac:	cmp	r3, #1
    7cae:	bls.n	7cc2 <FatFile::open(FatFile*, fname_t*, int)+0x1ae>
    DBG_FAIL_MACRO;
    7cb0:	mov.w	r0, #418	; 0x1a2
    7cb4:	bl	73fc <dbgPrint(unsigned short)>
    goto fail;
  }
  return true;

fail:
  return false;
    7cb8:	movs	r5, #0
}
    7cba:	mov	r0, r5
    7cbc:	add	sp, #52	; 0x34
    7cbe:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (!(oflag & O_CREAT) || !isWriteMode(oflag)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // If at EOF start in next cluster.
  if (freeFound == 0) {
    7cc2:	cmp	r4, #0
    7cc4:	it	eq
    7cc6:	moveq	r9, r5
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
    7cc8:	cmp	r4, r7
    7cca:	bcc.n	7cd4 <FatFile::open(FatFile*, fname_t*, int)+0x1c0>
    7ccc:	b.n	7d20 <FatFile::open(FatFile*, fname_t*, int)+0x20c>
        goto fail;
      }
      // EOF if no error.
      break;
    }
    freeFound++;
    7cce:	uxtb	r4, r3
  // If at EOF start in next cluster.
  if (freeFound == 0) {
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
    7cd0:	cmp	r7, r4
    7cd2:	bls.n	7d20 <FatFile::open(FatFile*, fname_t*, int)+0x20c>
    dir = dirFile->readDirCache();
    7cd4:	movs	r1, #0
    7cd6:	mov	r0, r6
    7cd8:	bl	63d8 <FatFile::readDirCache(bool)>
        goto fail;
      }
      // EOF if no error.
      break;
    }
    freeFound++;
    7cdc:	adds	r3, r4, #1
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
    dir = dirFile->readDirCache();
    if (!dir) {
    7cde:	cmp	r0, #0
    7ce0:	bne.n	7cce <FatFile::open(FatFile*, fname_t*, int)+0x1ba>
      if (dirFile->getError()) {
    7ce2:	ldrb	r2, [r6, #1]
    7ce4:	mov	r3, r0
    7ce6:	cbz	r2, 7cfc <FatFile::open(FatFile*, fname_t*, int)+0x1e8>
        DBG_FAIL_MACRO;
    7ce8:	mov.w	r0, #430	; 0x1ae
    goto fail;
  }
  return true;

fail:
  return false;
    7cec:	mov	r5, r3

  while (freeFound < freeNeed) {
    dir = dirFile->readDirCache();
    if (!dir) {
      if (dirFile->getError()) {
        DBG_FAIL_MACRO;
    7cee:	bl	73fc <dbgPrint(unsigned short)>
        goto fail;
    7cf2:	b.n	7b36 <FatFile::open(FatFile*, fname_t*, int)+0x22>
    7cf4:	ldr	r3, [r6, #8]
    if (!dirFile->addDirCluster()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // Done if more than one sector per cluster.  Max freeNeed is 21.
    if (dirFile->m_vol->sectorsPerCluster() > 1) {
    7cf6:	ldrb	r3, [r3, #4]
    7cf8:	cmp	r3, #1
    7cfa:	bhi.n	7d20 <FatFile::open(FatFile*, fname_t*, int)+0x20c>
      // EOF if no error.
      break;
    }
    freeFound++;
  }
  while (freeFound < freeNeed) {
    7cfc:	cmp	r7, r4
    7cfe:	bls.n	7d20 <FatFile::open(FatFile*, fname_t*, int)+0x20c>
    // Will fail if FAT16 root.
    if (!dirFile->addDirCluster()) {
    7d00:	mov	r0, r6
    7d02:	bl	5ea8 <FatFile::addDirCluster()>
    }
    // Done if more than one sector per cluster.  Max freeNeed is 21.
    if (dirFile->m_vol->sectorsPerCluster() > 1) {
      break;
    }
    freeFound += 16;
    7d06:	adds	r4, #16
    7d08:	uxtb	r4, r4
    }
    freeFound++;
  }
  while (freeFound < freeNeed) {
    // Will fail if FAT16 root.
    if (!dirFile->addDirCluster()) {
    7d0a:	cmp	r0, #0
    7d0c:	bne.n	7cf4 <FatFile::open(FatFile*, fname_t*, int)+0x1e0>
    7d0e:	mov	r5, r0
      DBG_FAIL_MACRO;
    7d10:	movw	r0, #441	; 0x1b9
    7d14:	bl	73fc <dbgPrint(unsigned short)>
  }
  return true;

fail:
  return false;
}
    7d18:	mov	r0, r5
    7d1a:	add	sp, #52	; 0x34
    7d1c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (dirFile->m_vol->sectorsPerCluster() > 1) {
      break;
    }
    freeFound += 16;
  }
  if (fnameFound) {
    7d20:	ldr	r3, [sp, #20]
    7d22:	cbz	r3, 7d34 <FatFile::open(FatFile*, fname_t*, int)+0x220>
    if (!dirFile->lfnUniqueSfn(fname)) {
    7d24:	mov	r1, fp
    7d26:	mov	r0, r6
    7d28:	bl	79e0 <FatFile::lfnUniqueSfn(fname_t*)>
    7d2c:	mov	r5, r0
    7d2e:	cmp	r0, #0
    7d30:	beq.w	7b36 <FatFile::open(FatFile*, fname_t*, int)+0x22>
      goto fail;
    }
  }
  if (!dirFile->seekSet(32UL*freeIndex)) {
    7d34:	mov.w	r1, r9, lsl #5
    7d38:	mov	r0, r6
    7d3a:	bl	6428 <FatFile::seekSet(unsigned long)>
    7d3e:	mov	r5, r0
    7d40:	cmp	r0, #0
    7d42:	beq.w	7f10 <FatFile::open(FatFile*, fname_t*, int)+0x3fc>
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
    7d46:	subs	r7, #1
  for (order = lfnOrd ; order ; order--) {
    7d48:	ands.w	sl, r7, #255	; 0xff
    7d4c:	beq.n	7e14 <FatFile::open(FatFile*, fname_t*, int)+0x300>
    if (!ldir) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    7d4e:	orr.w	r5, sl, #64	; 0x40
    7d52:	uxtb	r5, r5
  if (!dirFile->seekSet(32UL*freeIndex)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
  for (order = lfnOrd ; order ; order--) {
    7d54:	mov	r7, sl
    ldir = reinterpret_cast<DirLfn_t*>(dirFile->readDirCache());
    7d56:	mov.w	r9, #0
    7d5a:	movs	r1, #0
    7d5c:	mov	r0, r6
    7d5e:	bl	63d8 <FatFile::readDirCache(bool)>
    if (!ldir) {
    7d62:	cmp	r0, #0
    7d64:	beq.w	7ef0 <FatFile::open(FatFile*, fname_t*, int)+0x3dc>
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
    7d68:	ldr	r2, [r6, #8]
  cache_t* buffer() {
    return &m_buffer;
  }
  /** Set current sector dirty. */
  void dirty() {
    m_status |= CACHE_STATUS_DIRTY;
    7d6a:	ldrb.w	r3, [r2, #40]	; 0x28
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    7d6e:	cmp	sl, r7
    7d70:	orr.w	r3, r3, #1
    7d74:	ite	ne
    7d76:	movne	r4, r7
    7d78:	moveq	r4, r5
    ldir->attributes = FAT_ATTRIB_LONG_NAME;
    7d7a:	movs	r1, #15
    7d7c:	strb.w	r3, [r2, #40]	; 0x28
    7d80:	add.w	lr, fp, #23
    7d84:	add.w	r3, fp, #12
    ldir->mustBeZero1 = 0;
    7d88:	strb.w	r9, [r0, #12]
    if (!ldir) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    7d8c:	strb	r4, [r0, #0]
    ldir->attributes = FAT_ATTRIB_LONG_NAME;
    7d8e:	strb	r1, [r0, #11]
#include "FatFile.h"
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
    7d90:	movs	r2, #0
  for (uint8_t i = 0; i < 11; i++) {
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
    7d92:	ldrb.w	ip, [r3, #1]!
    7d96:	lsrs	r1, r2, #1
    7d98:	orr.w	r2, r1, r2, lsl #7
    7d9c:	uxtab	r2, ip, r2
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
    7da0:	cmp	r3, lr
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
    7da2:	uxtb	r2, r2
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
    7da4:	bne.n	7d92 <FatFile::open(FatFile*, fname_t*, int)+0x27e>
    setLe16(ldir->unicode3 + 2*i - 22, c);
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(DirLfn_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->order & 0X1F) - 1);
    7da6:	and.w	r4, r4, #31
    7daa:	subs	r4, #1
    }
    dirFile->m_vol->cacheDirty();
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    ldir->attributes = FAT_ATTRIB_LONG_NAME;
    ldir->mustBeZero1 = 0;
    ldir->checksum = lfnChecksum(fname->sfn);
    7dac:	strb	r2, [r0, #13]
    setLe16(ldir->unicode3 + 2*i - 22, c);
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(DirLfn_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->order & 0X1F) - 1);
    7dae:	add.w	r3, r4, r4, lsl #1
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    ldir->attributes = FAT_ATTRIB_LONG_NAME;
    ldir->mustBeZero1 = 0;
    ldir->checksum = lfnChecksum(fname->sfn);
    setLe16(ldir->mustBeZero2, 0);
    lfnPutName(ldir, fname->lfn, len);
    7db2:	ldr.w	r2, [fp, #8]
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    7db6:	strh.w	r9, [r0, #26]
    setLe16(ldir->unicode3 + 2*i - 22, c);
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(DirLfn_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->order & 0X1F) - 1);
    7dba:	add.w	r4, r4, r3, lsl #2
    7dbe:	adds	r0, #4
  for (uint8_t i = 0; i < 13; i++, k++) {
    7dc0:	movs	r3, #0
    7dc2:	b.n	7de2 <FatFile::open(FatFile*, fname_t*, int)+0x2ce>
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \param[in] c  The 16-bit character.
 */
static void lfnPutChar(DirLfn_t *ldir, uint8_t i, uint16_t c) {
  if (i < 5) {
    7dc4:	cmp	r3, #4
}
//------------------------------------------------------------------------------
static void lfnPutName(DirLfn_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->order & 0X1F) - 1);
  for (uint8_t i = 0; i < 13; i++, k++) {
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
    7dc6:	ldrb	r1, [r2, r4]
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \param[in] c  The 16-bit character.
 */
static void lfnPutChar(DirLfn_t *ldir, uint8_t i, uint16_t c) {
  if (i < 5) {
    7dc8:	bls.n	7df4 <FatFile::open(FatFile*, fname_t*, int)+0x2e0>
    setLe16(ldir->unicode1 + 2*i, c);
  } else if (i < 11) {
    7dca:	cmp	r3, #10
    7dcc:	ite	ls
    7dce:	strhls	r1, [r0, #0]
    7dd0:	strhhi	r1, [r0, #2]
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(DirLfn_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->order & 0X1F) - 1);
  for (uint8_t i = 0; i < 13; i++, k++) {
    7dd2:	adds	r3, #1
    7dd4:	uxtb	r3, r3
    7dd6:	cmp	r3, #13
    7dd8:	add.w	r4, r4, #1
    7ddc:	add.w	r0, r0, #2
    7de0:	beq.n	7e0c <FatFile::open(FatFile*, fname_t*, int)+0x2f8>
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
    7de2:	cmp	r8, r4
    7de4:	bhi.n	7dc4 <FatFile::open(FatFile*, fname_t*, int)+0x2b0>
    7de6:	ite	ne
    7de8:	movne.w	r1, #4294967295
    7dec:	moveq	r1, #0
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \param[in] c  The 16-bit character.
 */
static void lfnPutChar(DirLfn_t *ldir, uint8_t i, uint16_t c) {
  if (i < 5) {
    7dee:	cmp	r3, #4
}
//------------------------------------------------------------------------------
static void lfnPutName(DirLfn_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->order & 0X1F) - 1);
  for (uint8_t i = 0; i < 13; i++, k++) {
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
    7df0:	uxth	r1, r1
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \param[in] c  The 16-bit character.
 */
static void lfnPutChar(DirLfn_t *ldir, uint8_t i, uint16_t c) {
  if (i < 5) {
    7df2:	bhi.n	7dca <FatFile::open(FatFile*, fname_t*, int)+0x2b6>
    7df4:	strh.w	r1, [r0, #-3]
    7df8:	b.n	7dd2 <FatFile::open(FatFile*, fname_t*, int)+0x2be>
    7dfa:	ldr.w	sl, [sp, #36]	; 0x24
    7dfe:	b.n	7b6c <FatFile::open(FatFile*, fname_t*, int)+0x58>
  while (1) {
    curIndex = dirFile->m_curPosition/32;
    dir = dirFile->readDirCache(true);
    if (!dir) {
      if (dirFile->getError()) {
        DBG_FAIL_MACRO;
    7e00:	movw	r0, #331	; 0x14b
    goto fail;
  }
  return true;

fail:
  return false;
    7e04:	mov	r5, r3
  while (1) {
    curIndex = dirFile->m_curPosition/32;
    dir = dirFile->readDirCache(true);
    if (!dir) {
      if (dirFile->getError()) {
        DBG_FAIL_MACRO;
    7e06:	bl	73fc <dbgPrint(unsigned short)>
        goto fail;
    7e0a:	b.n	7b36 <FatFile::open(FatFile*, fname_t*, int)+0x22>
  if (!dirFile->seekSet(32UL*freeIndex)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
  for (order = lfnOrd ; order ; order--) {
    7e0c:	subs	r7, #1
    7e0e:	ands.w	r7, r7, #255	; 0xff
    7e12:	bne.n	7d5a <FatFile::open(FatFile*, fname_t*, int)+0x246>
    ldir->checksum = lfnChecksum(fname->sfn);
    setLe16(ldir->mustBeZero2, 0);
    lfnPutName(ldir, fname->lfn, len);
  }
  curIndex = dirFile->m_curPosition/32;
  dir = dirFile->readDirCache();
    7e14:	movs	r1, #0
    7e16:	mov	r0, r6
    ldir->mustBeZero1 = 0;
    ldir->checksum = lfnChecksum(fname->sfn);
    setLe16(ldir->mustBeZero2, 0);
    lfnPutName(ldir, fname->lfn, len);
  }
  curIndex = dirFile->m_curPosition/32;
    7e18:	ldr	r5, [r6, #20]
  dir = dirFile->readDirCache();
    7e1a:	bl	63d8 <FatFile::readDirCache(bool)>
    ldir->mustBeZero1 = 0;
    ldir->checksum = lfnChecksum(fname->sfn);
    setLe16(ldir->mustBeZero2, 0);
    lfnPutName(ldir, fname->lfn, len);
  }
  curIndex = dirFile->m_curPosition/32;
    7e1e:	ubfx	r5, r5, #5, #16
  dir = dirFile->readDirCache();
  if (!dir) {
    7e22:	mov	r4, r0
    7e24:	cmp	r0, #0
    7e26:	beq.n	7f1a <FatFile::open(FatFile*, fname_t*, int)+0x406>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // initialize as empty file
  memset(dir, 0, sizeof(DirFat_t));
    7e28:	movs	r2, #32
    7e2a:	movs	r1, #0
    7e2c:	bl	c92c <memset>
  memcpy(dir->name, fname->sfn, 11);
    7e30:	mov	r3, fp

  // Set base-name and extension lower case bits.
  dir->caseFlags =  (FAT_CASE_LC_BASE | FAT_CASE_LC_EXT) & fname->flags;

  // set timestamps
  if (FsDateTime::callback) {
    7e32:	ldr	r2, [pc, #136]	; (7ebc <FatFile::open(FatFile*, fname_t*, int)+0x3a8>)
    DBG_FAIL_MACRO;
    goto fail;
  }
  // initialize as empty file
  memset(dir, 0, sizeof(DirFat_t));
  memcpy(dir->name, fname->sfn, 11);
    7e34:	ldr.w	r1, [r3, #13]!
    7e38:	ldr	r0, [r3, #4]
    7e3a:	str	r0, [r4, #4]
    7e3c:	str	r1, [r4, #0]
    7e3e:	ldrh	r1, [r3, #8]
    7e40:	ldrb	r3, [r3, #10]
    7e42:	strb	r3, [r4, #10]
    7e44:	strh	r1, [r4, #8]

  // Set base-name and extension lower case bits.
  dir->caseFlags =  (FAT_CASE_LC_BASE | FAT_CASE_LC_EXT) & fname->flags;
    7e46:	ldrb.w	r3, [fp]

  // set timestamps
  if (FsDateTime::callback) {
    7e4a:	ldr	r7, [r2, #0]
  // initialize as empty file
  memset(dir, 0, sizeof(DirFat_t));
  memcpy(dir->name, fname->sfn, 11);

  // Set base-name and extension lower case bits.
  dir->caseFlags =  (FAT_CASE_LC_BASE | FAT_CASE_LC_EXT) & fname->flags;
    7e4c:	and.w	r3, r3, #24
    7e50:	strb	r3, [r4, #12]

  // set timestamps
  if (FsDateTime::callback) {
    7e52:	cbz	r7, 7e78 <FatFile::open(FatFile*, fname_t*, int)+0x364>
    // call user date/time function
    FsDateTime::callback(&date, &time, &ms10);
    7e54:	add.w	r2, sp, #43	; 0x2b
    7e58:	add.w	r1, sp, #46	; 0x2e
    7e5c:	add	r0, sp, #44	; 0x2c
    7e5e:	blx	r7
    dir->createTimeMs = ms10;
    setLe16(dir->createDate, date);
    7e60:	ldrh.w	r3, [sp, #44]	; 0x2c
    setLe16(dir->createTime, time);
    7e64:	ldrh.w	r2, [sp, #46]	; 0x2e

  // set timestamps
  if (FsDateTime::callback) {
    // call user date/time function
    FsDateTime::callback(&date, &time, &ms10);
    dir->createTimeMs = ms10;
    7e68:	ldrb.w	r1, [sp, #43]	; 0x2b
    7e6c:	strb	r1, [r4, #13]
    7e6e:	strh	r3, [r4, #16]
    7e70:	strh	r3, [r4, #18]
    7e72:	strh	r3, [r4, #24]
    7e74:	strh	r2, [r4, #14]
    7e76:	strh	r2, [r4, #22]
    setLe16(dir->accessDate, date);
    setLe16(dir->modifyDate, date);
    setLe16(dir->modifyTime, time);;
  }
  // Force write of entry to device.
  dirFile->m_vol->cacheDirty();
    7e78:	ldr	r2, [r6, #8]
    7e7a:	ldrb.w	r3, [r2, #40]	; 0x28
    7e7e:	orr.w	r3, r3, #1
    7e82:	strb.w	r3, [r2, #40]	; 0x28

open:
  // open entry in cache.
  if (!openCachedEntry(dirFile, curIndex, oflag, lfnOrd)) {
    7e86:	mov	r2, r5
    7e88:	str.w	sl, [sp]
    7e8c:	ldr	r3, [sp, #24]
    7e8e:	ldr	r0, [sp, #32]
    7e90:	mov	r1, r6
    7e92:	bl	654c <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)>
    7e96:	mov	r5, r0
    7e98:	cmp	r0, #0
    7e9a:	bne.w	7b36 <FatFile::open(FatFile*, fname_t*, int)+0x22>
    DBG_FAIL_MACRO;
    7e9e:	mov.w	r0, #504	; 0x1f8
    7ea2:	bl	73fc <dbgPrint(unsigned short)>
    goto fail;
    7ea6:	b.n	7b36 <FatFile::open(FatFile*, fname_t*, int)+0x22>
      for (uint8_t i = 0; i < 13; i++) {
        uint16_t u = lfnGetChar(ldir, i);
        if (k == len) {
          if (u != 0) {
            // Not found.
            lfnOrd = 0;
    7ea8:	cmp	r0, #0
    7eaa:	ldr.w	sl, [sp, #36]	; 0x24
    7eae:	it	ne
    7eb0:	movne.w	sl, #0
    7eb4:	b.n	7b6c <FatFile::open(FatFile*, fname_t*, int)+0x58>
    7eb6:	nop
    7eb8:	.word	0x4ec4ec4f
    7ebc:	.word	0x1fff8724
    7ec0:	subs	r4, r3, #1
    7ec2:	adds	r3, #10
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
    7ec4:	ldrb.w	r0, [r4, #1]!
    7ec8:	lsrs	r1, r2, #1
    7eca:	orr.w	r2, r1, r2, lsl #7
    7ece:	uxtab	r2, r0, r2
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
    7ed2:	cmp	r4, r3
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
    7ed4:	uxtb	r2, r2
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
    7ed6:	bne.n	7ec4 <FatFile::open(FatFile*, fname_t*, int)+0x3b0>
          break;
        }
      }
    } else if (isFileOrSubdir(dir)) {
      if (lfnOrd) {
        if (1 == order && lfnChecksum(dir->name) == checksum) {
    7ed8:	ldr	r3, [sp, #28]
    7eda:	cmp	r3, r2
    7edc:	bne.n	7f04 <FatFile::open(FatFile*, fname_t*, int)+0x3f0>
    }
  }

found:
  // Don't open if create only.
  if (oflag & O_EXCL) {
    7ede:	ldr	r3, [sp, #24]
    7ee0:	lsls	r1, r3, #20
    7ee2:	bpl.n	7e86 <FatFile::open(FatFile*, fname_t*, int)+0x372>
    DBG_FAIL_MACRO;
    7ee4:	mov.w	r0, #410	; 0x19a
    7ee8:	bl	73fc <dbgPrint(unsigned short)>
    goto fail;
  }
  return true;

fail:
  return false;
    7eec:	movs	r5, #0

found:
  // Don't open if create only.
  if (oflag & O_EXCL) {
    DBG_FAIL_MACRO;
    goto fail;
    7eee:	b.n	7b36 <FatFile::open(FatFile*, fname_t*, int)+0x22>
    7ef0:	mov	r3, r0
  }
  lfnOrd = freeNeed - 1;
  for (order = lfnOrd ; order ; order--) {
    ldir = reinterpret_cast<DirLfn_t*>(dirFile->readDirCache());
    if (!ldir) {
      DBG_FAIL_MACRO;
    7ef2:	movw	r0, #463	; 0x1cf
    goto fail;
  }
  return true;

fail:
  return false;
    7ef6:	mov	r5, r3
  }
  lfnOrd = freeNeed - 1;
  for (order = lfnOrd ; order ; order--) {
    ldir = reinterpret_cast<DirLfn_t*>(dirFile->readDirCache());
    if (!ldir) {
      DBG_FAIL_MACRO;
    7ef8:	bl	73fc <dbgPrint(unsigned short)>
      goto fail;
    7efc:	b.n	7b36 <FatFile::open(FatFile*, fname_t*, int)+0x22>
          break;
        }
      }
    } else if (isFileOrSubdir(dir)) {
      if (lfnOrd) {
        if (1 == order && lfnChecksum(dir->name) == checksum) {
    7efe:	ldr	r1, [sp, #12]
    7f00:	cmp	r1, #1
    7f02:	beq.n	7ec0 <FatFile::open(FatFile*, fname_t*, int)+0x3ac>
          goto found;
        }
        DBG_FAIL_MACRO;
    7f04:	movw	r0, #393	; 0x189
    7f08:	bl	73fc <dbgPrint(unsigned short)>
    goto fail;
  }
  return true;

fail:
  return false;
    7f0c:	movs	r5, #0
      if (lfnOrd) {
        if (1 == order && lfnChecksum(dir->name) == checksum) {
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
    7f0e:	b.n	7b36 <FatFile::open(FatFile*, fname_t*, int)+0x22>
    if (!dirFile->lfnUniqueSfn(fname)) {
      goto fail;
    }
  }
  if (!dirFile->seekSet(32UL*freeIndex)) {
    DBG_FAIL_MACRO;
    7f10:	mov.w	r0, #456	; 0x1c8
    7f14:	bl	73fc <dbgPrint(unsigned short)>
    goto fail;
    7f18:	b.n	7b36 <FatFile::open(FatFile*, fname_t*, int)+0x22>
    lfnPutName(ldir, fname->lfn, len);
  }
  curIndex = dirFile->m_curPosition/32;
  dir = dirFile->readDirCache();
  if (!dir) {
    DBG_FAIL_MACRO;
    7f1a:	movw	r0, #477	; 0x1dd
    goto fail;
  }
  return true;

fail:
  return false;
    7f1e:	mov	r5, r4
    lfnPutName(ldir, fname->lfn, len);
  }
  curIndex = dirFile->m_curPosition/32;
  dir = dirFile->readDirCache();
  if (!dir) {
    DBG_FAIL_MACRO;
    7f20:	bl	73fc <dbgPrint(unsigned short)>
    goto fail;
    7f24:	b.n	7b36 <FatFile::open(FatFile*, fname_t*, int)+0x22>
    7f26:	nop

00007f28 <dbgPrint(unsigned short)>:
#if USE_DBG_MACROS
#include "Arduino.h"
#ifndef DBG_FILE
#error DBG_FILE not defined
#endif  // DBG_FILE
static void dbgPrint(uint16_t line) {
    7f28:	push	{r3, r4, r5, lr}
    7f2a:	movs	r1, #10
    7f2c:	mov	r5, r0
    7f2e:	ldr	r0, [pc, #40]	; (7f58 <dbgPrint(unsigned short)+0x30>)
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    7f30:	ldr	r4, [pc, #40]	; (7f5c <dbgPrint(unsigned short)+0x34>)
    7f32:	bl	9ca8 <usb_serial_write>
    7f36:	movs	r1, #14
    7f38:	ldr	r0, [pc, #36]	; (7f60 <dbgPrint(unsigned short)+0x38>)
    7f3a:	bl	9ca8 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    7f3e:	movs	r0, #46	; 0x2e
    7f40:	bl	9db0 <usb_serial_putchar>
    7f44:	mov	r1, r5
    7f46:	mov	r0, r4
    7f48:	bl	b31c <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    7f4c:	mov	r0, r4
  Serial.print(F("DBG_FAIL: "));
  Serial.print(F(DBG_FILE));
  Serial.write('.');
  Serial.println(line);
}
    7f4e:	ldmia.w	sp!, {r3, r4, r5, lr}
    7f52:	b.w	b250 <Print::println()>
    7f56:	nop
    7f58:	.word	0x000105c8
    7f5c:	.word	0x1fff09a4
    7f60:	.word	0x000106bc

00007f64 <FatFile::getSFN(char*)>:
#include "../common/DebugMacros.h"
#include "../common/FsStructs.h"
#include "FatFile.h"
#include "FatVolume.h"
//------------------------------------------------------------------------------
bool FatFile::getSFN(char* name) {
    7f64:	push	{r3, r4, r5, r6, r7, lr}
    7f66:	ldrb	r4, [r0, #0]
  uint8_t j = 0;
  uint8_t lcBit = FAT_CASE_LC_BASE;
  DirFat_t *dir;

  if (!isOpen()) {
    7f68:	cbz	r4, 7fc6 <FatFile::getSFN(char*)+0x62>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isRoot()) {
    7f6a:	ands.w	r4, r4, #96	; 0x60
    7f6e:	mov	r5, r1
    7f70:	beq.n	7f7e <FatFile::getSFN(char*)+0x1a>
    name[0] = '/';
    7f72:	movs	r2, #47	; 0x2f
    name[1] = '\0';
    7f74:	movs	r3, #0
  if (!isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isRoot()) {
    name[0] = '/';
    7f76:	strb	r2, [r1, #0]
    name[1] = '\0';
    7f78:	strb	r3, [r1, #1]
    return true;
    7f7a:	movs	r0, #1
    7f7c:	pop	{r3, r4, r5, r6, r7, pc}
  }
  // cache entry
  dir = reinterpret_cast<DirFat_t*>(cacheDirEntry(FatCache::CACHE_FOR_READ));
    7f7e:	mov	r1, r4
    7f80:	bl	5f7c <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    7f84:	mov	r6, r0
    7f86:	cbz	r0, 7fd0 <FatFile::getSFN(char*)+0x6c>
    7f88:	mov	r1, r4
    7f8a:	mov	r2, r4
    7f8c:	subs	r0, #1
    7f8e:	movs	r7, #8
      continue;
    }
    if (i == 8) {
      // Position bit for extension.
      lcBit = FAT_CASE_LC_EXT;
      name[j++] = '.';
    7f90:	mov.w	lr, #46	; 0x2e
    DBG_FAIL_MACRO;
    goto fail;
  }
  // format name
  for (uint8_t i = 0; i < 11; i++) {
    if (dir->name[i] == ' ') {
    7f94:	ldrb.w	r3, [r0, #1]!
    7f98:	cmp	r3, #32
    7f9a:	beq.n	7fb8 <FatFile::getSFN(char*)+0x54>
      continue;
    }
    if (i == 8) {
    7f9c:	cmp	r1, #8
    7f9e:	beq.n	7fda <FatFile::getSFN(char*)+0x76>
      // Position bit for extension.
      lcBit = FAT_CASE_LC_EXT;
      name[j++] = '.';
    }
    char c = dir->name[i];
    if ('A' <= c && c <= 'Z' && (lcBit & dir->caseFlags)) {
    7fa0:	sub.w	r4, r3, #65	; 0x41
    7fa4:	cmp	r4, #25
    7fa6:	bhi.n	7fb2 <FatFile::getSFN(char*)+0x4e>
    7fa8:	ldrb	r4, [r6, #12]
    7faa:	tst	r7, r4
      c += 'a' - 'A';
    7fac:	itt	ne
    7fae:	addne	r3, #32
    7fb0:	uxtbne	r3, r3
    }
    name[j++] = c;
    7fb2:	strb	r3, [r5, r2]
    7fb4:	adds	r2, #1
    7fb6:	uxtb	r2, r2
    7fb8:	adds	r1, #1
  if (!dir) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // format name
  for (uint8_t i = 0; i < 11; i++) {
    7fba:	cmp	r1, #11
    7fbc:	bne.n	7f94 <FatFile::getSFN(char*)+0x30>
    if ('A' <= c && c <= 'Z' && (lcBit & dir->caseFlags)) {
      c += 'a' - 'A';
    }
    name[j++] = c;
  }
  name[j] = 0;
    7fbe:	movs	r3, #0
    7fc0:	strb	r3, [r5, r2]
  return true;
    7fc2:	movs	r0, #1

fail:
  return false;
}
    7fc4:	pop	{r3, r4, r5, r6, r7, pc}
  uint8_t j = 0;
  uint8_t lcBit = FAT_CASE_LC_BASE;
  DirFat_t *dir;

  if (!isOpen()) {
    DBG_FAIL_MACRO;
    7fc6:	movs	r0, #37	; 0x25
    7fc8:	bl	7f28 <dbgPrint(unsigned short)>
  }
  name[j] = 0;
  return true;

fail:
  return false;
    7fcc:	mov	r0, r4
  uint8_t lcBit = FAT_CASE_LC_BASE;
  DirFat_t *dir;

  if (!isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
    7fce:	pop	{r3, r4, r5, r6, r7, pc}
    return true;
  }
  // cache entry
  dir = reinterpret_cast<DirFat_t*>(cacheDirEntry(FatCache::CACHE_FOR_READ));
  if (!dir) {
    DBG_FAIL_MACRO;
    7fd0:	movs	r0, #48	; 0x30
    7fd2:	bl	7f28 <dbgPrint(unsigned short)>
  }
  name[j] = 0;
  return true;

fail:
  return false;
    7fd6:	mov	r0, r6
    7fd8:	pop	{r3, r4, r5, r6, r7, pc}
      continue;
    }
    if (i == 8) {
      // Position bit for extension.
      lcBit = FAT_CASE_LC_EXT;
      name[j++] = '.';
    7fda:	strb.w	lr, [r5, r2]
    7fde:	adds	r2, #1
    7fe0:	uxtb	r2, r2
    7fe2:	ldrb	r3, [r0, #0]
    if (dir->name[i] == ' ') {
      continue;
    }
    if (i == 8) {
      // Position bit for extension.
      lcBit = FAT_CASE_LC_EXT;
    7fe4:	movs	r7, #16
    7fe6:	b.n	7fa0 <FatFile::getSFN(char*)+0x3c>

00007fe8 <FsBaseFile::FsBaseFile(FsBaseFile const&)>:
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */
#include "FsLib.h"
//------------------------------------------------------------------------------
FsBaseFile::FsBaseFile(const FsBaseFile& from) {
    7fe8:	push	{r3, r4, r5, r6, r7, lr}
  m_fFile = nullptr;
    7fea:	movs	r5, #0
    7fec:	str	r5, [r0, #56]	; 0x38
  m_xFile = nullptr;
  if (from.m_fFile) {
    7fee:	ldr	r4, [r1, #56]	; 0x38
 */
#include "FsLib.h"
//------------------------------------------------------------------------------
FsBaseFile::FsBaseFile(const FsBaseFile& from) {
  m_fFile = nullptr;
  m_xFile = nullptr;
    7ff0:	str	r5, [r0, #60]	; 0x3c
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */
#include "FsLib.h"
//------------------------------------------------------------------------------
FsBaseFile::FsBaseFile(const FsBaseFile& from) {
    7ff2:	mov	r6, r0
    7ff4:	mov	r7, r1
  m_fFile = nullptr;
  m_xFile = nullptr;
  if (from.m_fFile) {
    7ff6:	cbz	r4, 801c <FsBaseFile::FsBaseFile(FsBaseFile const&)+0x34>
    m_fFile = new (m_fileMem) FatFile;
    7ff8:	mov	r1, r0
    7ffa:	movs	r0, #36	; 0x24
    7ffc:	bl	8254 <operator new(unsigned int, unsigned long*)>
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attributes(FILE_ATTR_CLOSED), m_error(0), m_flags(0) {}
    8000:	strb	r5, [r0, #0]
    8002:	strb	r5, [r0, #1]
    8004:	strb	r5, [r0, #2]
    8006:	str	r0, [r6, #56]	; 0x38
    *m_fFile = *from.m_fFile;
    8008:	ldr	r5, [r7, #56]	; 0x38
    800a:	mov	r4, r0
    800c:	ldmia	r5!, {r0, r1, r2, r3}
    800e:	stmia	r4!, {r0, r1, r2, r3}
    8010:	ldmia	r5!, {r0, r1, r2, r3}
    8012:	stmia	r4!, {r0, r1, r2, r3}
    8014:	ldr	r3, [r5, #0]
    8016:	str	r3, [r4, #0]
  } else if (from.m_xFile) {
    m_xFile = new (m_fileMem) ExFatFile;
    *m_xFile = *from.m_xFile;
  }
}
    8018:	mov	r0, r6
    801a:	pop	{r3, r4, r5, r6, r7, pc}
  m_fFile = nullptr;
  m_xFile = nullptr;
  if (from.m_fFile) {
    m_fFile = new (m_fileMem) FatFile;
    *m_fFile = *from.m_fFile;
  } else if (from.m_xFile) {
    801c:	ldr	r3, [r1, #60]	; 0x3c
    801e:	cmp	r3, #0
    8020:	beq.n	8018 <FsBaseFile::FsBaseFile(FsBaseFile const&)+0x30>
    m_xFile = new (m_fileMem) ExFatFile;
    8022:	mov	r1, r0
    8024:	movs	r0, #56	; 0x38
    8026:	bl	8254 <operator new(unsigned int, unsigned long*)>
    802a:	strb.w	r4, [r0, #49]	; 0x31
    802e:	strb.w	r4, [r0, #50]	; 0x32
    8032:	strb.w	r4, [r0, #51]	; 0x33
    8036:	str	r0, [r6, #60]	; 0x3c
    *m_xFile = *from.m_xFile;
    8038:	ldr	r3, [r7, #60]	; 0x3c
    803a:	mov	r2, r0
    803c:	add.w	r1, r3, #48	; 0x30
    8040:	ldr	r5, [r3, #0]
    8042:	ldr	r4, [r3, #4]
    8044:	ldr	r0, [r3, #8]
    8046:	ldr	r7, [r3, #12]
    8048:	str	r7, [r2, #12]
    804a:	adds	r3, #16
    804c:	cmp	r3, r1
    804e:	str	r5, [r2, #0]
    8050:	str	r4, [r2, #4]
    8052:	str	r0, [r2, #8]
    8054:	add.w	r2, r2, #16
    8058:	bne.n	8040 <FsBaseFile::FsBaseFile(FsBaseFile const&)+0x58>
    805a:	ldr	r3, [r3, #0]
    805c:	str	r3, [r2, #0]
    805e:	b.n	8018 <FsBaseFile::FsBaseFile(FsBaseFile const&)+0x30>

00008060 <FsBaseFile::close()>:
    *m_xFile = *from.m_xFile;
  }
  return *this;
}
//------------------------------------------------------------------------------
bool FsBaseFile::close() {
    8060:	push	{r4, lr}
    8062:	mov	r4, r0
  if (m_fFile && m_fFile->close()) {
    8064:	ldr	r0, [r0, #56]	; 0x38
    8066:	cbz	r0, 8074 <FsBaseFile::close()+0x14>
    8068:	bl	604c <FatFile::close()>
    806c:	cbz	r0, 8074 <FsBaseFile::close()+0x14>
    m_fFile = nullptr;
    806e:	movs	r3, #0
    8070:	str	r3, [r4, #56]	; 0x38
    return true;
    8072:	pop	{r4, pc}
  }
  if (m_xFile && m_xFile->close()) {
    8074:	ldr	r0, [r4, #60]	; 0x3c
    8076:	cbz	r0, 8084 <FsBaseFile::close()+0x24>
    8078:	bl	4118 <ExFatFile::close()>
    807c:	cbz	r0, 8084 <FsBaseFile::close()+0x24>
    m_xFile = nullptr;
    807e:	movs	r3, #0
    8080:	str	r3, [r4, #60]	; 0x3c
    8082:	pop	{r4, pc}
    return true;
  }
  return false;
    8084:	movs	r0, #0
}
    8086:	pop	{r4, pc}

00008088 <FsBaseFile::open(FsVolume*, char const*, int)>:
  }
  return false;
}
//------------------------------------------------------------------------------
bool FsBaseFile::open(FsVolume* vol, const char* path, oflag_t oflag) {
  if (!vol) {
    8088:	cbz	r1, 80fe <FsBaseFile::open(FsVolume*, char const*, int)+0x76>
    m_xFile = nullptr;
  }
  return false;
}
//------------------------------------------------------------------------------
bool FsBaseFile::open(FsVolume* vol, const char* path, oflag_t oflag) {
    808a:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    808e:	mov	r4, r1
    8090:	mov	r5, r0
    8092:	mov	r8, r3
    8094:	mov	r7, r2
  if (!vol) {
    return false;
  }
  close();
    8096:	bl	8060 <FsBaseFile::close()>
  if (vol->m_fVol) {
    809a:	ldr.w	r6, [r4, #1144]	; 0x478
    809e:	cbz	r6, 80cc <FsBaseFile::open(FsVolume*, char const*, int)+0x44>
    m_fFile = new (m_fileMem) FatFile;
    80a0:	mov	r1, r5
    80a2:	movs	r0, #36	; 0x24
    80a4:	bl	8254 <operator new(unsigned int, unsigned long*)>
    80a8:	movs	r1, #0
    80aa:	strb	r1, [r0, #0]
    80ac:	strb	r1, [r0, #1]
    80ae:	strb	r1, [r0, #2]
    if (m_fFile && m_fFile->open(vol->m_fVol, path, oflag)) {
    80b0:	ldr.w	r1, [r4, #1144]	; 0x478
  if (!vol) {
    return false;
  }
  close();
  if (vol->m_fVol) {
    m_fFile = new (m_fileMem) FatFile;
    80b4:	str	r0, [r5, #56]	; 0x38
    if (m_fFile && m_fFile->open(vol->m_fVol, path, oflag)) {
    80b6:	mov	r3, r8
    80b8:	mov	r2, r7
    80ba:	bl	61bc <FatFile::open(FatVolume*, char const*, int)>
    80be:	cbz	r0, 80c6 <FsBaseFile::open(FsVolume*, char const*, int)+0x3e>
      return true;
    80c0:	movs	r0, #1
    80c2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    }
    m_fFile = nullptr;
    80c6:	str	r0, [r5, #56]	; 0x38
    return false;
    80c8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  } else if (vol->m_xVol) {
    80cc:	ldr.w	r3, [r4, #1148]	; 0x47c
    80d0:	cbz	r3, 8102 <FsBaseFile::open(FsVolume*, char const*, int)+0x7a>
    m_xFile = new (m_fileMem) ExFatFile;
    80d2:	mov	r1, r5
    80d4:	movs	r0, #56	; 0x38
    80d6:	bl	8254 <operator new(unsigned int, unsigned long*)>
    80da:	strb.w	r6, [r0, #49]	; 0x31
    80de:	strb.w	r6, [r0, #50]	; 0x32
    80e2:	strb.w	r6, [r0, #51]	; 0x33
    if (m_xFile && m_xFile->open(vol->m_xVol, path, oflag)) {
    80e6:	ldr.w	r1, [r4, #1148]	; 0x47c
      return true;
    }
    m_fFile = nullptr;
    return false;
  } else if (vol->m_xVol) {
    m_xFile = new (m_fileMem) ExFatFile;
    80ea:	str	r0, [r5, #60]	; 0x3c
    if (m_xFile && m_xFile->open(vol->m_xVol, path, oflag)) {
    80ec:	mov	r3, r8
    80ee:	mov	r2, r7
    80f0:	bl	4b58 <ExFatFile::open(ExFatVolume*, char const*, int)>
    80f4:	cmp	r0, #0
    80f6:	bne.n	80c0 <FsBaseFile::open(FsVolume*, char const*, int)+0x38>
      return true;
    }
    m_xFile = nullptr;
    80f8:	str	r0, [r5, #60]	; 0x3c
  }
  return false;
}
    80fa:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return false;
}
//------------------------------------------------------------------------------
bool FsBaseFile::open(FsVolume* vol, const char* path, oflag_t oflag) {
  if (!vol) {
    return false;
    80fe:	movs	r0, #0
      return true;
    }
    m_xFile = nullptr;
  }
  return false;
}
    8100:	bx	lr
  return false;
}
//------------------------------------------------------------------------------
bool FsBaseFile::open(FsVolume* vol, const char* path, oflag_t oflag) {
  if (!vol) {
    return false;
    8102:	movs	r0, #0
    8104:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00008108 <FsBaseFile::openNext(FsBaseFile*, int)>:
    m_xFile = nullptr;
  }
  return false;
}
//------------------------------------------------------------------------------
bool FsBaseFile::openNext(FsBaseFile* dir, oflag_t oflag) {
    8108:	push	{r3, r4, r5, r6, r7, lr}
    810a:	mov	r5, r1
    810c:	mov	r7, r2
    810e:	mov	r4, r0
  close();
    8110:	bl	8060 <FsBaseFile::close()>
  if (dir->m_fFile) {
    8114:	ldr	r6, [r5, #56]	; 0x38
    8116:	cbz	r6, 813c <FsBaseFile::openNext(FsBaseFile*, int)+0x34>
    m_fFile = new (m_fileMem) FatFile;
    8118:	mov	r1, r4
    811a:	movs	r0, #36	; 0x24
    811c:	bl	8254 <operator new(unsigned int, unsigned long*)>
    8120:	movs	r2, #0
    8122:	strb	r2, [r0, #0]
    8124:	strb	r2, [r0, #1]
    8126:	strb	r2, [r0, #2]
    8128:	str	r0, [r4, #56]	; 0x38
    if (m_fFile->openNext(dir->m_fFile, oflag)) {
    812a:	mov	r2, r7
    812c:	ldr	r1, [r5, #56]	; 0x38
    812e:	bl	667c <FatFile::openNext(FatFile*, int)>
    8132:	cbz	r0, 8138 <FsBaseFile::openNext(FsBaseFile*, int)+0x30>
      return true;
    8134:	movs	r0, #1
    8136:	pop	{r3, r4, r5, r6, r7, pc}
    }
    m_fFile = nullptr;
    8138:	str	r0, [r4, #56]	; 0x38
    813a:	pop	{r3, r4, r5, r6, r7, pc}
  } else if (dir->m_xFile) {
    813c:	ldr	r0, [r5, #60]	; 0x3c
    813e:	cbz	r0, 8164 <FsBaseFile::openNext(FsBaseFile*, int)+0x5c>
    m_xFile = new (m_fileMem) ExFatFile;
    8140:	mov	r1, r4
    8142:	movs	r0, #56	; 0x38
    8144:	bl	8254 <operator new(unsigned int, unsigned long*)>
    8148:	strb.w	r6, [r0, #49]	; 0x31
    814c:	strb.w	r6, [r0, #50]	; 0x32
    8150:	strb.w	r6, [r0, #51]	; 0x33
    8154:	str	r0, [r4, #60]	; 0x3c
    if (m_xFile->openNext(dir->m_xFile, oflag)) {
    8156:	mov	r2, r7
    8158:	ldr	r1, [r5, #60]	; 0x3c
    815a:	bl	4b68 <ExFatFile::openNext(ExFatFile*, int)>
    815e:	cmp	r0, #0
    8160:	bne.n	8134 <FsBaseFile::openNext(FsBaseFile*, int)+0x2c>
      return true;
    }
    m_xFile = nullptr;
    8162:	str	r0, [r4, #60]	; 0x3c
  }
  return false;
}
    8164:	pop	{r3, r4, r5, r6, r7, pc}
    8166:	nop

00008168 <FsVolume::begin(BlockDeviceInterface*)>:
 * DEALINGS IN THE SOFTWARE.
 */
#include "FsLib.h"
FsVolume* FsVolume::m_cwv = nullptr;
//------------------------------------------------------------------------------
bool FsVolume::begin(BlockDevice* blockDev) {
    8168:	push	{r4, r5, r6, lr}
  m_blockDev = blockDev;
  m_fVol = nullptr;
    816a:	movs	r6, #0
 * DEALINGS IN THE SOFTWARE.
 */
#include "FsLib.h"
FsVolume* FsVolume::m_cwv = nullptr;
//------------------------------------------------------------------------------
bool FsVolume::begin(BlockDevice* blockDev) {
    816c:	mov	r5, r0
  m_blockDev = blockDev;
    816e:	str.w	r1, [r0, #1152]	; 0x480
  m_fVol = nullptr;
    8172:	str.w	r6, [r0, #1144]	; 0x478
  m_xVol = new (m_volMem) ExFatVolume;
    8176:	mov	r1, r0
    8178:	mov.w	r0, #1144	; 0x478
    817c:	bl	8254 <operator new(unsigned int, unsigned long*)>
    8180:	mov	r4, r0
  static const uint8_t CACHE_FOR_WRITE = CACHE_STATUS_DIRTY;
  /** Reserve cache sector for write - do not read from sector device. */
  static const uint8_t CACHE_RESERVE_FOR_WRITE
    = CACHE_STATUS_DIRTY | CACHE_OPTION_NO_READ;

  FsCache() : m_blockDev(nullptr) {
    8182:	str	r6, [r0, #4]
    invalidate();
    8184:	bl	4c0c <FsCache::invalidate()>
    8188:	add.w	r0, r4, #524	; 0x20c
  static const uint8_t CACHE_FOR_WRITE = CACHE_STATUS_DIRTY;
  /** Reserve cache sector for write - do not read from sector device. */
  static const uint8_t CACHE_RESERVE_FOR_WRITE
    = CACHE_STATUS_DIRTY | CACHE_OPTION_NO_READ;

  FsCache() : m_blockDev(nullptr) {
    818c:	str.w	r6, [r4, #528]	; 0x210
    invalidate();
    8190:	bl	4c0c <FsCache::invalidate()>
 * \class ExFatPartition
 * \brief Access exFat partitions on raw file devices.
 */
class ExFatPartition {
 public:
  ExFatPartition() : m_fatType(0) {}
    8194:	strb.w	r6, [r4, #1084]	; 0x43c
    8198:	strb.w	r6, [r4, #1137]	; 0x471
    819c:	strb.w	r6, [r4, #1138]	; 0x472
    81a0:	strb.w	r6, [r4, #1139]	; 0x473
   * \param[in] setCwv Set current working volume if true.
   * \param[in] part partition to initialize.
   * \return true for success or false for failure.
   */
  bool begin(BlockDevice* dev, bool setCwv = true, uint8_t part = 1) {
    if (!init(dev, part)) {
    81a4:	ldr.w	r1, [r5, #1152]	; 0x480
    81a8:	str.w	r4, [r5, #1148]	; 0x47c
    81ac:	mov	r0, r4
    81ae:	movs	r2, #1
    81b0:	bl	4d68 <ExFatPartition::init(BlockDeviceInterface*, unsigned char)>
    81b4:	cbnz	r0, 81f2 <FsVolume::begin(BlockDeviceInterface*)+0x8a>
  if (m_xVol && m_xVol->begin(m_blockDev, false)) {
    goto done;
  }
  m_xVol = nullptr;
    81b6:	movs	r6, #0
  m_fVol = new (m_volMem) FatVolume;
    81b8:	mov	r1, r5
  m_fVol = nullptr;
  m_xVol = new (m_volMem) ExFatVolume;
  if (m_xVol && m_xVol->begin(m_blockDev, false)) {
    goto done;
  }
  m_xVol = nullptr;
    81ba:	str.w	r6, [r5, #1148]	; 0x47c
  m_fVol = new (m_volMem) FatVolume;
    81be:	movw	r0, #1124	; 0x464
    81c2:	bl	8254 <operator new(unsigned int, unsigned long*)>
 */
class FatPartition {
 public:
  /** Create an instance of FatPartition
   */
  FatPartition() : m_fatType(0) {}
    81c6:	strb	r6, [r0, #7]
    81c8:	strb.w	r6, [r0, #1088]	; 0x440
    81cc:	strb.w	r6, [r0, #1089]	; 0x441
    81d0:	strb.w	r6, [r0, #1090]	; 0x442
   * \param[in] setCwv Set current working volume if true.
   * \param[in] part partition to initialize.
   * \return true for success or false for failure.
   */
  bool begin(BlockDevice* dev, bool setCwv = true, uint8_t part = 1) {
    if (!init(dev, part)) {
    81d4:	movs	r2, #1
    81d6:	ldr.w	r1, [r5, #1152]	; 0x480
    81da:	str.w	r0, [r5, #1144]	; 0x478
    81de:	mov	r4, r0
    81e0:	bl	728c <FatPartition::init(BlockDeviceInterface*, unsigned char)>
    81e4:	cbnz	r0, 8210 <FsVolume::begin(BlockDeviceInterface*)+0xa8>
  if (m_fVol && m_fVol->begin(m_blockDev, false)) {
    goto done;
  }
  m_cwv = nullptr;
    81e6:	ldr	r3, [pc, #64]	; (8228 <FsVolume::begin(BlockDeviceInterface*)+0xc0>)
    81e8:	movs	r0, #0
    81ea:	str	r0, [r3, #0]
  m_fVol = nullptr;
    81ec:	str.w	r0, [r5, #1144]	; 0x478
  return false;
    81f0:	pop	{r4, r5, r6, pc}
  /**
   * Set volume working directory to root.
   * \return true for success or false for failure.
   */
  bool chdir() {
    m_vwd.close();
    81f2:	add.w	r6, r4, #1088	; 0x440
    81f6:	mov	r0, r6
    81f8:	bl	4118 <ExFatFile::close()>
    return m_vwd.openRoot(this);
    81fc:	mov	r1, r4
    81fe:	mov	r0, r6
    8200:	bl	41ec <ExFatFile::openRoot(ExFatVolume*)>
   */
  bool begin(BlockDevice* dev, bool setCwv = true, uint8_t part = 1) {
    if (!init(dev, part)) {
      return false;
    }
    if (!chdir()) {
    8204:	cmp	r0, #0
    8206:	beq.n	81b6 <FsVolume::begin(BlockDeviceInterface*)+0x4e>

 done:
  m_cwv = this;
    8208:	ldr	r3, [pc, #28]	; (8228 <FsVolume::begin(BlockDeviceInterface*)+0xc0>)
  return true;
    820a:	movs	r0, #1
  m_cwv = nullptr;
  m_fVol = nullptr;
  return false;

 done:
  m_cwv = this;
    820c:	str	r5, [r3, #0]
  return true;
    820e:	pop	{r4, r5, r6, pc}
  /**
   * Set volume working directory to root.
   * \return true for success or false for failure.
   */
  bool chdir() {
    m_vwd.close();
    8210:	add.w	r6, r4, #1088	; 0x440
    8214:	mov	r0, r6
    8216:	bl	604c <FatFile::close()>
    return m_vwd.openRoot(this);
    821a:	mov	r1, r4
    821c:	mov	r0, r6
    821e:	bl	606c <FatFile::openRoot(FatVolume*)>
   */
  bool begin(BlockDevice* dev, bool setCwv = true, uint8_t part = 1) {
    if (!init(dev, part)) {
      return false;
    }
    if (!chdir()) {
    8222:	cmp	r0, #0
    8224:	bne.n	8208 <FsVolume::begin(BlockDeviceInterface*)+0xa0>
    8226:	b.n	81e6 <FsVolume::begin(BlockDeviceInterface*)+0x7e>
    8228:	.word	0x1fff8728

0000822c <FsVolume::open(char const*, int)>:
bool FsVolume::ls(print_t* pr, const char* path, uint8_t flags) {
  FsBaseFile dir;
  return dir.open(this, path, O_RDONLY) && dir.ls(pr, flags);
}
//------------------------------------------------------------------------------
FsFile FsVolume::open(const char *path, oflag_t oflag) {
    822c:	push	{r3, r4, r5, r6, r7, lr}
class __FlashStringHelper;

class Print
{
  public:
	constexpr Print() : write_error(0) {}
    822e:	movs	r5, #0
    8230:	mov.w	r7, #1000	; 0x3e8
};
/**
 * \class FsFile
 * \brief FsBaseFile file with Arduino Stream.
 */
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    8234:	ldr	r6, [pc, #24]	; (8250 <FsVolume::open(char const*, int)+0x24>)
    8236:	str	r7, [r0, #8]
    8238:	mov	r4, r0
    823a:	strb	r5, [r0, #4]
    823c:	strb	r5, [r0, #12]
 * \class FsBaseFile
 * \brief FsBaseFile class.
 */
class FsBaseFile {
 public:
  FsBaseFile() : m_fFile(nullptr), m_xFile(nullptr) {}
    823e:	str	r5, [r0, #72]	; 0x48
    8240:	str	r5, [r0, #76]	; 0x4c
};
/**
 * \class FsFile
 * \brief FsBaseFile file with Arduino Stream.
 */
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    8242:	str.w	r6, [r0], #16
  FsFile tmpFile;
  tmpFile.open(this, path, oflag);
    8246:	bl	8088 <FsBaseFile::open(FsVolume*, char const*, int)>
  return tmpFile;
}
    824a:	mov	r0, r4
    824c:	pop	{r3, r4, r5, r6, r7, pc}
    824e:	nop
    8250:	.word	0x00010358

00008254 <operator new(unsigned int, unsigned long*)>:
 */
#include "FsNew.h"
void* operator new(size_t size, newalign_t* ptr) {
  (void)size;
  return ptr;
}
    8254:	mov	r0, r1
    8256:	bx	lr

00008258 <SdCardInterface::status()>:
   * \return The number of 512 byte data sectors in the card
   *         or zero if an error occurs.
   */
  virtual uint32_t sectorCount() = 0;
  /** \return card status. */
  virtual uint32_t status() {return 0XFFFFFFFF;}
    8258:	mov.w	r0, #4294967295
    825c:	bx	lr
    825e:	nop

00008260 <SdSpiCard::errorCode() const>:
  /**
   * \return code for the last error. See SdCardInfo.h for a list of error codes.
   */
  uint8_t errorCode() const {
    return m_errorCode;
  }
    8260:	ldrb	r0, [r0, #19]
    8262:	bx	lr

00008264 <SdSpiCard::errorData() const>:
  /** \return error data for last error. */
  uint32_t errorData() const {
    return m_status;
  }
    8264:	ldrb	r0, [r0, #21]
    8266:	bx	lr

00008268 <SdSpiCard::readSector(unsigned long, unsigned char*)>:
   *
   * \param[in] sector Logical sector to be read.
   * \param[out] dst Pointer to the location that will receive the data.
   * \return true for success or false for failure.
   */
  bool readSector(uint32_t sector, uint8_t* dst) {
    8268:	push	{r4}
#if ENABLE_DEDICATED_SPI
    return readSectors(sector, dst, 1);
    826a:	ldr	r4, [r0, #0]
    826c:	ldr	r4, [r4, #12]
    826e:	movs	r3, #1
    8270:	mov	ip, r4
#else  // ENABLE_DEDICATED_SPI
    return readSingle(sector, dst);
#endif  // ENABLE_DEDICATED_SPI
  }
    8272:	ldr.w	r4, [sp], #4
   * \param[out] dst Pointer to the location that will receive the data.
   * \return true for success or false for failure.
   */
  bool readSector(uint32_t sector, uint8_t* dst) {
#if ENABLE_DEDICATED_SPI
    return readSectors(sector, dst, 1);
    8276:	bx	ip

00008278 <SdSpiCard::type() const>:
  /** Return the card type: SD V1, SD V2 or SDHC/SDXC
   * \return 0 - SD V1, 1 - SD V2, or 3 - SDHC/SDXC.
   */
  uint8_t type() const {
    return m_type;
  }
    8278:	ldrb	r0, [r0, #22]
    827a:	bx	lr

0000827c <SdSpiCard::writeSector(unsigned long, unsigned char const*)>:
   *
   * \param[in] sector Logical sector to be written.
   * \param[in] src Pointer to the location of the data to be written.
   * \return true for success or false for failure.
   */
  bool writeSector(uint32_t sector, const uint8_t* src) {
    827c:	push	{r4}
#if ENABLE_DEDICATED_SPI
    return writeSectors(sector, src, 1);
    827e:	ldr	r4, [r0, #0]
    8280:	ldr	r4, [r4, #28]
    8282:	movs	r3, #1
    8284:	mov	ip, r4
#else  // ENABLE_DEDICATED_SPI
    return writeSingle(sector, src);
#endif  // ENABLE_DEDICATED_SPI
  }
    8286:	ldr.w	r4, [sp], #4
   * \param[in] src Pointer to the location of the data to be written.
   * \return true for success or false for failure.
   */
  bool writeSector(uint32_t sector, const uint8_t* src) {
#if ENABLE_DEDICATED_SPI
    return writeSectors(sector, src, 1);
    828a:	bx	ip

0000828c <SdSpiCard::~SdSpiCard()>:
/**
 * \class SdSpiCard
 * \brief Raw access to SD and SDHC flash memory cards via SPI protocol.
 */
#if HAS_SDIO_CLASS
class SdSpiCard : public SdCardInterface {
    828c:	bx	lr
    828e:	nop

00008290 <SdSpiCard::~SdSpiCard()>:
    8290:	push	{r4, lr}
    8292:	movs	r1, #24
    8294:	mov	r4, r0
    8296:	bl	b344 <operator delete(void*, unsigned int)>
    829a:	mov	r0, r4
    829c:	pop	{r4, pc}
    829e:	nop

000082a0 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)>:
  m_curState = IDLE_STATE;
#endif  // ENABLE_DEDICATED_SPI
  return true;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeSectors(uint32_t sector, const uint8_t* src, size_t ns) {
    82a0:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    82a4:	mov	r6, r1
  #if ENABLE_DEDICATED_SPI
  if (m_curState != WRITE_STATE || m_curSector != sector) {
    82a6:	ldrb	r1, [r0, #16]
    82a8:	cmp	r1, #2
  m_curState = IDLE_STATE;
#endif  // ENABLE_DEDICATED_SPI
  return true;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeSectors(uint32_t sector, const uint8_t* src, size_t ns) {
    82aa:	mov	r4, r0
    82ac:	mov	r5, r2
    82ae:	mov	r7, r3
  #if ENABLE_DEDICATED_SPI
  if (m_curState != WRITE_STATE || m_curSector != sector) {
    82b0:	beq.n	82c2 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x22>
    if (!syncDevice()) {
    82b2:	ldr	r3, [r4, #0]
    82b4:	mov	r0, r4
    82b6:	ldr	r3, [r3, #20]
    82b8:	blx	r3
    82ba:	cbnz	r0, 82f4 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x54>
      return false;
    82bc:	movs	r0, #0
    82be:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return true;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeSectors(uint32_t sector, const uint8_t* src, size_t ns) {
  #if ENABLE_DEDICATED_SPI
  if (m_curState != WRITE_STATE || m_curSector != sector) {
    82c2:	ldr	r3, [r0, #12]
    82c4:	cmp	r3, r6
    82c6:	bne.n	82b2 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x12>
      return false;
    }
    m_curSector = sector;
    m_curState = WRITE_STATE;
  }
  for (size_t i = 0; i < ns; i++, src += 512) {
    82c8:	movs	r6, #0
    82ca:	cbz	r7, 82e4 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x44>
    if (!writeData(src)) {
    82cc:	ldr	r3, [r4, #0]
    82ce:	mov	r1, r5
    82d0:	ldr	r3, [r3, #68]	; 0x44
    82d2:	mov	r0, r4
    82d4:	blx	r3
      return false;
    }
    m_curSector = sector;
    m_curState = WRITE_STATE;
  }
  for (size_t i = 0; i < ns; i++, src += 512) {
    82d6:	adds	r6, #1
    82d8:	add.w	r5, r5, #512	; 0x200
    if (!writeData(src)) {
    82dc:	cmp	r0, #0
    82de:	beq.n	82bc <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x1c>
      return false;
    }
    m_curSector = sector;
    m_curState = WRITE_STATE;
  }
  for (size_t i = 0; i < ns; i++, src += 512) {
    82e0:	cmp	r7, r6
    82e2:	bne.n	82cc <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x2c>
    if (!writeData(src)) {
      return false;
    }
  }
  m_curSector += ns;
    82e4:	ldr	r3, [r4, #12]
  return m_sharedSpi ? syncDevice() : true;
    82e6:	ldrb	r2, [r4, #17]
  for (size_t i = 0; i < ns; i++, src += 512) {
    if (!writeData(src)) {
      return false;
    }
  }
  m_curSector += ns;
    82e8:	add	r7, r3
    82ea:	str	r7, [r4, #12]
  return m_sharedSpi ? syncDevice() : true;
    82ec:	cbnz	r2, 830a <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x6a>
    82ee:	movs	r0, #1
    82f0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  #if ENABLE_DEDICATED_SPI
  if (m_curState != WRITE_STATE || m_curSector != sector) {
    if (!syncDevice()) {
      return false;
    }
    if (!writeStart(sector)) {
    82f4:	ldr	r3, [r4, #0]
    82f6:	mov	r1, r6
    82f8:	ldr	r3, [r3, #72]	; 0x48
    82fa:	mov	r0, r4
    82fc:	blx	r3
    82fe:	cmp	r0, #0
    8300:	beq.n	82bc <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x1c>
      return false;
    }
    m_curSector = sector;
    m_curState = WRITE_STATE;
    8302:	movs	r3, #2
      return false;
    }
    if (!writeStart(sector)) {
      return false;
    }
    m_curSector = sector;
    8304:	str	r6, [r4, #12]
    m_curState = WRITE_STATE;
    8306:	strb	r3, [r4, #16]
    8308:	b.n	82c8 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x28>
    if (!writeData(src)) {
      return false;
    }
  }
  m_curSector += ns;
  return m_sharedSpi ? syncDevice() : true;
    830a:	ldr	r3, [r4, #0]
    830c:	mov	r0, r4
    830e:	ldr	r3, [r3, #20]

 fail:
  spiStop();
  return false;
#endif  // ENABLE_DEDICATED_SPI
}
    8310:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    if (!writeData(src)) {
      return false;
    }
  }
  m_curSector += ns;
  return m_sharedSpi ? syncDevice() : true;
    8314:	bx	r3
    8316:	nop

00008318 <SdSpiCard::spiStart() [clone .part.7] [clone .constprop.24]>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStart() {
    8318:	push	{r4, lr}
    831a:	mov	r4, r0
  bool waitNotBusy(SdMillis_t timeoutMS);
  bool writeData(uint8_t token, const uint8_t* src);

#if SPI_DRIVER_SELECT < 2
  void spiActivate() {
    m_spiDriver.activate();
    831c:	adds	r0, #4
    831e:	bl	98c8 <SdSpiArduinoDriver::activate()>
  uint8_t cardCommand(uint8_t cmd, uint32_t arg);
  bool isTimedOut(SdMillis_t startMS, SdMillis_t timeoutMS);
  bool readData(uint8_t* dst, size_t count);
  bool readRegister(uint8_t cmd, void* buf);
  void spiSelect() {
    sdCsWrite(m_csPin, false);
    8322:	ldrb	r0, [r4, #18]
    8324:	movs	r1, #0
    8326:	bl	9a48 <sdCsWrite(unsigned char, bool)>
  if (!m_spiActive) {
    spiActivate();
    spiSelect();
    m_spiActive = true;
    832a:	movs	r3, #1
    832c:	strb	r3, [r4, #20]
    832e:	pop	{r4, pc}

00008330 <SdSpiCard::spiStop() [clone .part.8] [clone .constprop.27]>:
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
    8330:	push	{r3, r4, r5, lr}
    8332:	mov	r4, r0
  }
  void type(uint8_t value) {
    m_type = value;
  }
  void spiUnselect() {
    sdCsWrite(m_csPin, true);
    8334:	movs	r1, #1
    8336:	ldrb	r0, [r0, #18]
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver.receive(buf, n);
  }
  void spiSend(uint8_t data) {
    m_spiDriver.send(data);
    8338:	adds	r5, r4, #4
  }
  void type(uint8_t value) {
    m_type = value;
  }
  void spiUnselect() {
    sdCsWrite(m_csPin, true);
    833a:	bl	9a48 <sdCsWrite(unsigned char, bool)>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver.receive(buf, n);
  }
  void spiSend(uint8_t data) {
    m_spiDriver.send(data);
    833e:	mov	r0, r5
    8340:	movs	r1, #255	; 0xff
    8342:	bl	99dc <SdSpiArduinoDriver::send(unsigned char)>
  }
  void spiBegin(SdSpiConfig spiConfig) {
    m_spiDriver.begin(spiConfig);
  }
  void spiDeactivate() {
    m_spiDriver.deactivate();
    8346:	mov	r0, r5
    8348:	bl	9958 <SdSpiArduinoDriver::deactivate()>
  if (m_spiActive) {
    spiUnselect();
    spiSend(0XFF);
    spiDeactivate();
    m_spiActive = false;
    834c:	movs	r3, #0
    834e:	strb	r3, [r4, #20]
    8350:	pop	{r3, r4, r5, pc}
    8352:	nop

00008354 <SdSpiCard::isBusy()>:
bool SdSpiCard::eraseSingleSectorEnable() {
  csd_t csd;
  return readCSD(&csd) ? csd.v1.erase_blk_en : false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isBusy() {
    8354:	push	{r3, r4, r5, r6, r7, lr}
  bool rtn = true;
  bool spiActive = m_spiActive;
    8356:	ldrb	r7, [r0, #20]
bool SdSpiCard::eraseSingleSectorEnable() {
  csd_t csd;
  return readCSD(&csd) ? csd.v1.erase_blk_en : false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isBusy() {
    8358:	mov	r6, r0
  bool rtn = true;
  bool spiActive = m_spiActive;
  if (!spiActive) {
    835a:	cbnz	r7, 8360 <SdSpiCard::isBusy()+0xc>
    835c:	bl	8318 <SdSpiCard::spiStart() [clone .part.7] [clone .constprop.24]>
    8360:	adds	r5, r6, #4
bool SdSpiCard::eraseSingleSectorEnable() {
  csd_t csd;
  return readCSD(&csd) ? csd.v1.erase_blk_en : false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isBusy() {
    8362:	movs	r4, #8
  }
  uint8_t spiReceive() {
    return m_spiDriver.receive();
    8364:	mov	r0, r5
    8366:	bl	99a0 <SdSpiArduinoDriver::receive()>
  bool spiActive = m_spiActive;
  if (!spiActive) {
    spiStart();
  }
  for (uint8_t i = 0; i < 8; i++) {
    if (0XFF == spiReceive()) {
    836a:	cmp	r0, #255	; 0xff
    836c:	add.w	r3, r4, #4294967295
    8370:	beq.n	838e <SdSpiCard::isBusy()+0x3a>
  bool rtn = true;
  bool spiActive = m_spiActive;
  if (!spiActive) {
    spiStart();
  }
  for (uint8_t i = 0; i < 8; i++) {
    8372:	ands.w	r4, r3, #255	; 0xff
    8376:	bne.n	8364 <SdSpiCard::isBusy()+0x10>
  csd_t csd;
  return readCSD(&csd) ? csd.v1.erase_blk_en : false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isBusy() {
  bool rtn = true;
    8378:	movs	r4, #1
    if (0XFF == spiReceive()) {
      rtn = false;
      break;
    }
  }
  if (!spiActive) {
    837a:	cbnz	r7, 8380 <SdSpiCard::isBusy()+0x2c>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    837c:	ldrb	r3, [r6, #20]
    837e:	cbnz	r3, 8384 <SdSpiCard::isBusy()+0x30>
  }
  if (!spiActive) {
    spiStop();
  }
  return rtn;
}
    8380:	mov	r0, r4
    8382:	pop	{r3, r4, r5, r6, r7, pc}
    8384:	mov	r0, r6
    8386:	bl	8330 <SdSpiCard::spiStop() [clone .part.8] [clone .constprop.27]>
    838a:	mov	r0, r4
    838c:	pop	{r3, r4, r5, r6, r7, pc}
  if (!spiActive) {
    spiStart();
  }
  for (uint8_t i = 0; i < 8; i++) {
    if (0XFF == spiReceive()) {
      rtn = false;
    838e:	movs	r4, #0
    8390:	b.n	837a <SdSpiCard::isBusy()+0x26>
    8392:	nop

00008394 <SdSpiCard::readData(unsigned char*, unsigned int)>:
//------------------------------------------------------------------------------
bool SdSpiCard::readData(uint8_t *dst) {
  return readData(dst, 512);
}
//------------------------------------------------------------------------------
bool SdSpiCard::readData(uint8_t* dst, size_t count) {
    8394:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    8398:	ldr	r6, [pc, #116]	; (8410 <SdSpiCard::readData(unsigned char*, unsigned int)+0x7c>)
    839a:	sub	sp, #12
    839c:	ldr	r3, [r6, #0]
    839e:	str	r3, [sp, #0]
	return ret;
    83a0:	ldr	r5, [sp, #0]
    83a2:	mov	r4, r0
    83a4:	mov	r8, r1
    83a6:	mov	r9, r2

  DBG_BEGIN_TIME(DBG_WAIT_READ);
  // wait for start sector token
  SdMillis_t t0 = SysCall::curTimeMS();
  while ((m_status = spiReceive()) == 0XFF) {
    if (isTimedOut(t0, SD_READ_TIMEOUT)) {
    83a8:	uxth	r5, r5
    83aa:	adds	r7, r0, #4
    83ac:	b.n	83be <SdSpiCard::readData(unsigned char*, unsigned int)+0x2a>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    83ae:	ldr	r3, [r6, #0]
    83b0:	str	r3, [sp, #4]
	return ret;
    83b2:	ldr	r3, [sp, #4]
    83b4:	uxth	r3, r3
    83b6:	subs	r3, r3, r5
    83b8:	cmp.w	r3, #300	; 0x12c
    83bc:	bgt.n	83e4 <SdSpiCard::readData(unsigned char*, unsigned int)+0x50>
    83be:	mov	r0, r7
    83c0:	bl	99a0 <SdSpiArduinoDriver::receive()>
#endif  // USE_SD_CRC

  DBG_BEGIN_TIME(DBG_WAIT_READ);
  // wait for start sector token
  SdMillis_t t0 = SysCall::curTimeMS();
  while ((m_status = spiReceive()) == 0XFF) {
    83c4:	cmp	r0, #255	; 0xff
    83c6:	strb	r0, [r4, #21]
    83c8:	beq.n	83ae <SdSpiCard::readData(unsigned char*, unsigned int)+0x1a>
      error(SD_CARD_ERROR_READ_TIMEOUT);
      goto fail;
    }
  }
  DBG_END_TIME(DBG_WAIT_READ);
  if (m_status != DATA_START_SECTOR) {
    83ca:	cmp	r0, #254	; 0xfe
    83cc:	beq.n	83ea <SdSpiCard::readData(unsigned char*, unsigned int)+0x56>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    83ce:	movs	r3, #24
    83d0:	strb	r3, [r4, #19]
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    83d2:	ldrb	r0, [r4, #20]
    83d4:	cbz	r0, 83de <SdSpiCard::readData(unsigned char*, unsigned int)+0x4a>
    83d6:	mov	r0, r4
    83d8:	bl	8330 <SdSpiCard::spiStop() [clone .part.8] [clone .constprop.27]>
#endif  // USE_SD_CRC
  return true;

fail:
  spiStop();
  return false;
    83dc:	movs	r0, #0
}
    83de:	add	sp, #12
    83e0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    83e4:	movs	r3, #29
    83e6:	strb	r3, [r4, #19]
    83e8:	b.n	83d2 <SdSpiCard::readData(unsigned char*, unsigned int)+0x3e>
  }
  uint8_t spiReceive() {
    return m_spiDriver.receive();
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver.receive(buf, n);
    83ea:	mov	r2, r9
    83ec:	mov	r1, r8
    83ee:	mov	r0, r7
    83f0:	bl	99bc <SdSpiArduinoDriver::receive(unsigned char*, unsigned int)>
  if (m_status != DATA_START_SECTOR) {
    error(SD_CARD_ERROR_READ_TOKEN);
    goto fail;
  }
  // transfer data
  if ((m_status = spiReceive(dst, count))) {
    83f4:	strb	r0, [r4, #21]
    83f6:	cbz	r0, 83fe <SdSpiCard::readData(unsigned char*, unsigned int)+0x6a>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    83f8:	movs	r3, #36	; 0x24
    83fa:	strb	r3, [r4, #19]
    83fc:	b.n	83d2 <SdSpiCard::readData(unsigned char*, unsigned int)+0x3e>
  }
  void spiDeactivate() {
    m_spiDriver.deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver.receive();
    83fe:	mov	r0, r7
    8400:	bl	99a0 <SdSpiArduinoDriver::receive()>
    8404:	mov	r0, r7
    8406:	bl	99a0 <SdSpiArduinoDriver::receive()>
#else  // USE_SD_CRC
  // discard crc
  spiReceive();
  spiReceive();
#endif  // USE_SD_CRC
  return true;
    840a:	movs	r0, #1
    840c:	b.n	83de <SdSpiCard::readData(unsigned char*, unsigned int)+0x4a>
    840e:	nop
    8410:	.word	0x1fff8c34

00008414 <SdSpiCard::waitNotBusy(unsigned short)>:
    m_spiActive = false;
  }
}
//------------------------------------------------------------------------------
// wait for card to go not busy
bool SdSpiCard::waitNotBusy(SdMillis_t timeoutMS) {
    8414:	push	{r4, r5, r6, r7, lr}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    8416:	ldr	r5, [pc, #52]	; (844c <SdSpiCard::waitNotBusy(unsigned short)+0x38>)
    8418:	sub	sp, #12
    841a:	ldr	r3, [r5, #0]
    841c:	str	r3, [sp, #0]
	return ret;
    841e:	ldr	r4, [sp, #0]
    8420:	mov	r7, r1
    8422:	adds	r6, r0, #4
  }
  return false;
#else  // WDT_YIELD_TIME_MILLIS
  // Check not busy first since yield is not called in isTimedOut.
  while (spiReceive() != 0XFF) {
    if (isTimedOut(t0, timeoutMS)) {
    8424:	uxth	r4, r4
    8426:	b.n	8436 <SdSpiCard::waitNotBusy(unsigned short)+0x22>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    8428:	ldr	r3, [r5, #0]
    842a:	str	r3, [sp, #4]
	return ret;
    842c:	ldr	r3, [sp, #4]
    842e:	uxth	r3, r3
    8430:	subs	r3, r3, r4
    8432:	cmp	r3, r7
    8434:	bgt.n	8446 <SdSpiCard::waitNotBusy(unsigned short)+0x32>
    8436:	mov	r0, r6
    8438:	bl	99a0 <SdSpiArduinoDriver::receive()>
    }
  }
  return false;
#else  // WDT_YIELD_TIME_MILLIS
  // Check not busy first since yield is not called in isTimedOut.
  while (spiReceive() != 0XFF) {
    843c:	cmp	r0, #255	; 0xff
    843e:	bne.n	8428 <SdSpiCard::waitNotBusy(unsigned short)+0x14>
    if (isTimedOut(t0, timeoutMS)) {
      return false;
    }
  }
  return true;
    8440:	movs	r0, #1
#endif  // WDT_YIELD_TIME_MILLIS
}
    8442:	add	sp, #12
    8444:	pop	{r4, r5, r6, r7, pc}
  return false;
#else  // WDT_YIELD_TIME_MILLIS
  // Check not busy first since yield is not called in isTimedOut.
  while (spiReceive() != 0XFF) {
    if (isTimedOut(t0, timeoutMS)) {
      return false;
    8446:	movs	r0, #0
    }
  }
  return true;
#endif  // WDT_YIELD_TIME_MILLIS
}
    8448:	add	sp, #12
    844a:	pop	{r4, r5, r6, r7, pc}
    844c:	.word	0x1fff8c34

00008450 <SdSpiCard::cardCommand(unsigned char, unsigned long)>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
    8450:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  // select card
  if (!m_spiActive) {
    8454:	ldrb	r3, [r0, #20]
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
    8456:	sub	sp, #8
    8458:	mov	r6, r0
    845a:	mov	r8, r1
    845c:	str	r2, [sp, #4]
  // select card
  if (!m_spiActive) {
    845e:	cbnz	r3, 8464 <SdSpiCard::cardCommand(unsigned char, unsigned long)+0x14>
    8460:	bl	8318 <SdSpiCard::spiStart() [clone .part.7] [clone .constprop.24]>
    spiStart();
  }
  // wait if busy unless CMD0
  if (cmd != CMD0) {
    8464:	cmp.w	r8, #0
    8468:	bne.n	84c0 <SdSpiCard::cardCommand(unsigned char, unsigned long)+0x70>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver.receive(buf, n);
  }
  void spiSend(uint8_t data) {
    m_spiDriver.send(data);
    846a:	adds	r4, r6, #4
    846c:	mov	r0, r4
    846e:	orr.w	r1, r8, #64	; 0x40
    8472:	bl	99dc <SdSpiArduinoDriver::send(unsigned char)>
    8476:	add	r7, sp, #4
    8478:	add	r5, sp, #8
    847a:	ldrb.w	r1, [r5, #-1]!
    847e:	mov	r0, r4
    8480:	bl	99dc <SdSpiArduinoDriver::send(unsigned char)>
  // send command
  spiSend(cmd | 0x40);

  // send argument
  uint8_t *pa = reinterpret_cast<uint8_t *>(&arg);
  for (int8_t i = 3; i >= 0; i--) {
    8484:	cmp	r5, r7
    8486:	bne.n	847a <SdSpiCard::cardCommand(unsigned char, unsigned long)+0x2a>
    spiSend(pa[i]);
  }

  // send CRC - correct for CMD0 with arg zero or CMD8 with arg 0X1AA
  spiSend(cmd == CMD0 ? 0X95 : 0X87);
    8488:	cmp.w	r8, #0
    848c:	ite	eq
    848e:	moveq	r1, #149	; 0x95
    8490:	movne	r1, #135	; 0x87
    8492:	mov	r0, r4
    8494:	bl	99dc <SdSpiArduinoDriver::send(unsigned char)>
  }
  void spiDeactivate() {
    m_spiDriver.deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver.receive();
    8498:	mov	r0, r4
    849a:	bl	99a0 <SdSpiArduinoDriver::receive()>
    849e:	movs	r5, #11
    84a0:	mov	r0, r4
    84a2:	bl	99a0 <SdSpiArduinoDriver::receive()>

  // discard first fill byte to avoid MISO pull-up problem.
  spiReceive();

  // there are 1-8 fill bytes before response.  fill bytes should be 0XFF.
  for (uint8_t i = 0; ((m_status = spiReceive()) & 0X80) && i < 10; i++) {
    84a6:	lsls	r3, r0, #24
    84a8:	strb	r0, [r6, #21]
    84aa:	bmi.n	84b2 <SdSpiCard::cardCommand(unsigned char, unsigned long)+0x62>
  }
  return m_status;
}
    84ac:	add	sp, #8
    84ae:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    84b2:	subs	r3, r5, #1

  // discard first fill byte to avoid MISO pull-up problem.
  spiReceive();

  // there are 1-8 fill bytes before response.  fill bytes should be 0XFF.
  for (uint8_t i = 0; ((m_status = spiReceive()) & 0X80) && i < 10; i++) {
    84b4:	ands.w	r5, r3, #255	; 0xff
    84b8:	bne.n	84a0 <SdSpiCard::cardCommand(unsigned char, unsigned long)+0x50>
  }
  return m_status;
}
    84ba:	add	sp, #8
    84bc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    spiStart();
  }
  // wait if busy unless CMD0
  if (cmd != CMD0) {
    DBG_BEGIN_TIME(DBG_CMD_BUSY);
    waitNotBusy(SD_CMD_TIMEOUT);
    84c0:	mov.w	r1, #300	; 0x12c
    84c4:	mov	r0, r6
    84c6:	bl	8414 <SdSpiCard::waitNotBusy(unsigned short)>
    84ca:	b.n	846a <SdSpiCard::cardCommand(unsigned char, unsigned long)+0x1a>

000084cc <SdSpiCard::readOCR(unsigned long*)>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readOCR(uint32_t* ocr) {
    84cc:	push	{r3, r4, r5, r6, r7, lr}
  uint8_t *p = reinterpret_cast<uint8_t*>(ocr);
  syncDevice();
    84ce:	ldr	r3, [r0, #0]
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readOCR(uint32_t* ocr) {
    84d0:	mov	r5, r0
  uint8_t *p = reinterpret_cast<uint8_t*>(ocr);
  syncDevice();
    84d2:	ldr	r3, [r3, #20]
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readOCR(uint32_t* ocr) {
    84d4:	mov	r6, r1
  uint8_t *p = reinterpret_cast<uint8_t*>(ocr);
  syncDevice();
    84d6:	blx	r3
  if (cardCommand(CMD58, 0)) {
    84d8:	mov	r0, r5
    84da:	movs	r2, #0
    84dc:	movs	r1, #58	; 0x3a
    84de:	bl	8450 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    84e2:	cbnz	r0, 8500 <SdSpiCard::readOCR(unsigned long*)+0x34>
    84e4:	adds	r7, r5, #4
    84e6:	adds	r4, r6, #4
    84e8:	mov	r0, r7
    84ea:	bl	99a0 <SdSpiArduinoDriver::receive()>
    error(SD_CARD_ERROR_CMD58);
    goto fail;
  }
  for (uint8_t i = 0; i < 4; i++) {
    p[3 - i] = spiReceive();
    84ee:	strb.w	r0, [r4, #-1]!
  syncDevice();
  if (cardCommand(CMD58, 0)) {
    error(SD_CARD_ERROR_CMD58);
    goto fail;
  }
  for (uint8_t i = 0; i < 4; i++) {
    84f2:	cmp	r6, r4
    84f4:	bne.n	84e8 <SdSpiCard::readOCR(unsigned long*)+0x1c>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    84f6:	ldrb	r4, [r5, #20]
    84f8:	cbnz	r4, 8516 <SdSpiCard::readOCR(unsigned long*)+0x4a>
    84fa:	movs	r4, #1
  return true;

fail:
  spiStop();
  return false;
}
    84fc:	mov	r0, r4
    84fe:	pop	{r3, r4, r5, r6, r7, pc}
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    8500:	ldrb	r4, [r5, #20]
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    8502:	movs	r3, #18
    8504:	strb	r3, [r5, #19]
    8506:	cmp	r4, #0
    8508:	beq.n	84fc <SdSpiCard::readOCR(unsigned long*)+0x30>
    850a:	mov	r0, r5
  spiStop();
  return true;

fail:
  spiStop();
  return false;
    850c:	movs	r4, #0
    850e:	bl	8330 <SdSpiCard::spiStop() [clone .part.8] [clone .constprop.27]>
}
    8512:	mov	r0, r4
    8514:	pop	{r3, r4, r5, r6, r7, pc}
    8516:	mov	r0, r5
    8518:	bl	8330 <SdSpiCard::spiStop() [clone .part.8] [clone .constprop.27]>
    851c:	mov	r0, r4
    851e:	pop	{r3, r4, r5, r6, r7, pc}

00008520 <SdSpiCard::readRegister(unsigned char, void*)>:
//------------------------------------------------------------------------------
/** read CID or CSR register */
bool SdSpiCard::readRegister(uint8_t cmd, void* buf) {
  uint8_t* dst = reinterpret_cast<uint8_t*>(buf);
  syncDevice();
    8520:	ldr	r3, [r0, #0]
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
/** read CID or CSR register */
bool SdSpiCard::readRegister(uint8_t cmd, void* buf) {
    8522:	push	{r4, r5, r6, lr}
  uint8_t* dst = reinterpret_cast<uint8_t*>(buf);
  syncDevice();
    8524:	ldr	r3, [r3, #20]
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
/** read CID or CSR register */
bool SdSpiCard::readRegister(uint8_t cmd, void* buf) {
    8526:	mov	r4, r0
    8528:	mov	r5, r1
    852a:	mov	r6, r2
  uint8_t* dst = reinterpret_cast<uint8_t*>(buf);
  syncDevice();
    852c:	blx	r3
  if (cardCommand(cmd, 0)) {
    852e:	mov	r1, r5
    8530:	mov	r0, r4
    8532:	movs	r2, #0
    8534:	bl	8450 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    8538:	cbz	r0, 854c <SdSpiCard::readRegister(unsigned char, void*)+0x2c>
    853a:	movs	r3, #27
    853c:	strb	r3, [r4, #19]
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    853e:	ldrb	r0, [r4, #20]
    8540:	cbz	r0, 854a <SdSpiCard::readRegister(unsigned char, void*)+0x2a>
    8542:	mov	r0, r4
    8544:	bl	8330 <SdSpiCard::spiStop() [clone .part.8] [clone .constprop.27]>
  spiStop();
  return true;

fail:
  spiStop();
  return false;
    8548:	movs	r0, #0
}
    854a:	pop	{r4, r5, r6, pc}
  syncDevice();
  if (cardCommand(cmd, 0)) {
    error(SD_CARD_ERROR_READ_REG);
    goto fail;
  }
  if (!readData(dst, 16)) {
    854c:	mov	r1, r6
    854e:	movs	r2, #16
    8550:	mov	r0, r4
    8552:	bl	8394 <SdSpiCard::readData(unsigned char*, unsigned int)>
    8556:	cmp	r0, #0
    8558:	beq.n	853e <SdSpiCard::readRegister(unsigned char, void*)+0x1e>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    855a:	ldrb	r5, [r4, #20]
    855c:	cmp	r5, #0
    855e:	beq.n	854a <SdSpiCard::readRegister(unsigned char, void*)+0x2a>
    8560:	mov	r0, r4
    8562:	bl	8330 <SdSpiCard::spiStop() [clone .part.8] [clone .constprop.27]>
    8566:	mov	r0, r5
    8568:	pop	{r4, r5, r6, pc}
    856a:	nop

0000856c <SdSpiCard::readCSD(csd_t*)>:
   * \param[out] csd pointer to area for returned data.
   *
   * \return true for success or false for failure.
   */
  bool readCSD(csd_t* csd) {
    return readRegister(CMD9, csd);
    856c:	mov	r2, r1
    856e:	movs	r1, #9
    8570:	b.w	8520 <SdSpiCard::readRegister(unsigned char, void*)>

00008574 <SdSpiCard::readCID(CID*)>:
   * \param[out] cid pointer to area for returned data.
   *
   * \return true for success or false for failure.
   */
  bool readCID(cid_t* cid) {
    return readRegister(CMD10, cid);
    8574:	mov	r2, r1
    8576:	movs	r1, #10
    8578:	b.w	8520 <SdSpiCard::readRegister(unsigned char, void*)>

0000857c <SdSpiCard::sectorCount()>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
uint32_t SdSpiCard::sectorCount() {
    857c:	push	{r4, r5, lr}
  csd_t csd;
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
    857e:	ldr	r3, [r0, #0]
    8580:	ldr	r2, [pc, #140]	; (8610 <SdSpiCard::sectorCount()+0x94>)
    8582:	ldr	r3, [r3, #52]	; 0x34
    8584:	cmp	r3, r2
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
uint32_t SdSpiCard::sectorCount() {
    8586:	sub	sp, #20
    8588:	bne.n	85ea <SdSpiCard::sectorCount()+0x6e>
   * \param[out] csd pointer to area for returned data.
   *
   * \return true for success or false for failure.
   */
  bool readCSD(csd_t* csd) {
    return readRegister(CMD9, csd);
    858a:	mov	r2, sp
    858c:	movs	r1, #9
    858e:	bl	8520 <SdSpiCard::readRegister(unsigned char, void*)>
  csd_t csd;
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
    8592:	cbz	r0, 85a4 <SdSpiCard::sectorCount()+0x28>
  csd1_t v1;
  csd2_t v2;
};
//-----------------------------------------------------------------------------
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    8594:	ldrb.w	r3, [sp]
    8598:	ands.w	r3, r3, #192	; 0xc0
    859c:	beq.n	85a8 <SdSpiCard::sectorCount()+0x2c>
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
  } else if (csd->v2.csd_ver == 1) {
    859e:	cmp	r3, #64	; 0x40
    85a0:	beq.n	85f0 <SdSpiCard::sectorCount()+0x74>
    85a2:	movs	r0, #0
}
    85a4:	add	sp, #20
    85a6:	pop	{r4, r5, pc}
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    uint8_t read_bl_len = csd->v1.read_bl_len;
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
    85a8:	ldrb.w	r4, [sp, #9]
};
//-----------------------------------------------------------------------------
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    uint8_t read_bl_len = csd->v1.read_bl_len;
    uint16_t c_size = (csd->v1.c_size_high << 10)
    85ac:	ldrb.w	r3, [sp, #6]
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    85b0:	ldrb.w	r2, [sp, #7]
  if (csd->v1.csd_ver == 0) {
    uint8_t read_bl_len = csd->v1.read_bl_len;
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    85b4:	ldrb.w	r0, [sp, #10]
  csd2_t v2;
};
//-----------------------------------------------------------------------------
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    uint8_t read_bl_len = csd->v1.read_bl_len;
    85b8:	ldrb.w	r1, [sp, #5]
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    85bc:	ldrb.w	r5, [sp, #8]
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    85c0:	and.w	r4, r4, #3
    85c4:	lsls	r4, r4, #1
    85c6:	lsls	r2, r2, #2
    85c8:	and.w	r3, r3, #3
    85cc:	orr.w	r0, r4, r0, lsr #7
    85d0:	and.w	r1, r1, #15
    85d4:	orr.w	r3, r2, r3, lsl #10
    85d8:	add	r0, r1
    85da:	orr.w	r3, r3, r5, lsr #6
    85de:	adds	r3, #1
    85e0:	subs	r0, #7
    85e2:	lsl.w	r0, r3, r0
    85e6:	add	sp, #20
    85e8:	pop	{r4, r5, pc}
  return false;
}
//------------------------------------------------------------------------------
uint32_t SdSpiCard::sectorCount() {
  csd_t csd;
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
    85ea:	mov	r1, sp
    85ec:	blx	r3
    85ee:	b.n	8592 <SdSpiCard::sectorCount()+0x16>
  } else if (csd->v2.csd_ver == 1) {
    return (((uint32_t)csd->v2.c_size_high << 16) +
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    85f0:	ldrb.w	r3, [sp, #9]
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
  } else if (csd->v2.csd_ver == 1) {
    return (((uint32_t)csd->v2.c_size_high << 16) +
    85f4:	ldrb.w	r1, [sp, #7]
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    85f8:	ldrb.w	r0, [sp, #8]
    85fc:	adds	r2, r3, #1
    85fe:	and.w	r3, r1, #63	; 0x3f
    8602:	add.w	r3, r2, r3, lsl #16
    8606:	add.w	r0, r3, r0, lsl #8
    860a:	lsls	r0, r0, #10
}
    860c:	add	sp, #20
    860e:	pop	{r4, r5, pc}
    8610:	.word	0x0000856d

00008614 <SdSpiCard::readStart(unsigned long)>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t sector) {
    8614:	push	{r4, r5, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
    8616:	ldr	r3, [r0, #0]
    8618:	ldr	r5, [pc, #68]	; (8660 <SdSpiCard::readStart(unsigned long)+0x4c>)
    861a:	ldr	r3, [r3, #64]	; 0x40
    861c:	cmp	r3, r5
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t sector) {
    861e:	sub	sp, #12
    8620:	mov	r4, r0
    8622:	mov	r2, r1
    8624:	bne.n	8656 <SdSpiCard::readStart(unsigned long)+0x42>
  bool syncDevice();
  /** Return the card type: SD V1, SD V2 or SDHC/SDXC
   * \return 0 - SD V1, 1 - SD V2, or 3 - SDHC/SDXC.
   */
  uint8_t type() const {
    return m_type;
    8626:	ldrb	r0, [r0, #22]
  if (type() != SD_CARD_TYPE_SDHC) {
    8628:	cmp	r0, #3
    sector <<= 9;
    862a:	it	ne
    862c:	lslne	r2, r2, #9
  }
  if (cardCommand(CMD18, sector)) {
    862e:	movs	r1, #18
    8630:	mov	r0, r4
    8632:	bl	8450 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    8636:	cbz	r0, 8650 <SdSpiCard::readStart(unsigned long)+0x3c>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    8638:	ldrb	r0, [r4, #20]
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    863a:	movs	r3, #12
    863c:	strb	r3, [r4, #19]
    863e:	cbnz	r0, 8644 <SdSpiCard::readStart(unsigned long)+0x30>
  return true;

fail:
  spiStop();
  return false;
}
    8640:	add	sp, #12
    8642:	pop	{r4, r5, pc}
    8644:	mov	r0, r4
    8646:	bl	8330 <SdSpiCard::spiStop() [clone .part.8] [clone .constprop.27]>
    864a:	movs	r0, #0
    864c:	add	sp, #12
    864e:	pop	{r4, r5, pc}
  if (cardCommand(CMD18, sector)) {
    error(SD_CARD_ERROR_CMD18);
    goto fail;
  }
//  spiStop();
  return true;
    8650:	movs	r0, #1

fail:
  spiStop();
  return false;
}
    8652:	add	sp, #12
    8654:	pop	{r4, r5, pc}
    8656:	str	r1, [sp, #4]
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t sector) {
  if (type() != SD_CARD_TYPE_SDHC) {
    8658:	blx	r3
    865a:	ldr	r2, [sp, #4]
    865c:	b.n	8628 <SdSpiCard::readStart(unsigned long)+0x14>
    865e:	nop
    8660:	.word	0x00008279

00008664 <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readSectors(uint32_t sector, uint8_t* dst, size_t ns) {
    8664:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8668:	mov	r5, r1
#if ENABLE_DEDICATED_SPI
  if (m_curState != READ_STATE || sector != m_curSector) {
    866a:	ldrb	r1, [r0, #16]
    866c:	cmp	r1, #1
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readSectors(uint32_t sector, uint8_t* dst, size_t ns) {
    866e:	mov	r6, r0
    8670:	mov	r4, r2
    8672:	mov	r7, r3
#if ENABLE_DEDICATED_SPI
  if (m_curState != READ_STATE || sector != m_curSector) {
    8674:	beq.n	8686 <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x22>
    if (!syncDevice()) {
    8676:	ldr	r3, [r6, #0]
    8678:	mov	r0, r6
    867a:	ldr	r3, [r3, #20]
    867c:	blx	r3
    867e:	cbnz	r0, 86ba <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x56>
      return false;
    8680:	movs	r0, #0
    8682:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readSectors(uint32_t sector, uint8_t* dst, size_t ns) {
#if ENABLE_DEDICATED_SPI
  if (m_curState != READ_STATE || sector != m_curSector) {
    8686:	ldr	r3, [r0, #12]
    8688:	cmp	r3, r5
    868a:	bne.n	8676 <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x12>
      return false;
    }
    m_curSector = sector;
    m_curState = READ_STATE;
  }
  for (size_t i = 0; i < ns; i++, dst += 512) {
    868c:	movs	r5, #0
    868e:	cbz	r7, 86aa <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x46>
    if (!readData(dst, 512)) {
    8690:	mov	r1, r4
    8692:	mov.w	r2, #512	; 0x200
    8696:	mov	r0, r6
    8698:	bl	8394 <SdSpiCard::readData(unsigned char*, unsigned int)>
      return false;
    }
    m_curSector = sector;
    m_curState = READ_STATE;
  }
  for (size_t i = 0; i < ns; i++, dst += 512) {
    869c:	adds	r5, #1
    869e:	add.w	r4, r4, #512	; 0x200
    if (!readData(dst, 512)) {
    86a2:	cmp	r0, #0
    86a4:	beq.n	8680 <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x1c>
      return false;
    }
    m_curSector = sector;
    m_curState = READ_STATE;
  }
  for (size_t i = 0; i < ns; i++, dst += 512) {
    86a6:	cmp	r7, r5
    86a8:	bne.n	8690 <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x2c>
    if (!readData(dst, 512)) {
      return false;
    }
  }
  m_curSector += ns;
    86aa:	ldr	r3, [r6, #12]
  return m_sharedSpi ? syncDevice() : true;
    86ac:	ldrb	r2, [r6, #17]
  for (size_t i = 0; i < ns; i++, dst += 512) {
    if (!readData(dst, 512)) {
      return false;
    }
  }
  m_curSector += ns;
    86ae:	add	r7, r3
    86b0:	str	r7, [r6, #12]
  return m_sharedSpi ? syncDevice() : true;
    86b2:	cbnz	r2, 86ce <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x6a>
    86b4:	movs	r0, #1
    86b6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
#if ENABLE_DEDICATED_SPI
  if (m_curState != READ_STATE || sector != m_curSector) {
    if (!syncDevice()) {
      return false;
    }
    if (!SdSpiCard::readStart(sector)) {
    86ba:	mov	r1, r5
    86bc:	mov	r0, r6
    86be:	bl	8614 <SdSpiCard::readStart(unsigned long)>
    86c2:	cmp	r0, #0
    86c4:	beq.n	8680 <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x1c>
      return false;
    }
    m_curSector = sector;
    m_curState = READ_STATE;
    86c6:	movs	r3, #1
      return false;
    }
    if (!SdSpiCard::readStart(sector)) {
      return false;
    }
    m_curSector = sector;
    86c8:	str	r5, [r6, #12]
    m_curState = READ_STATE;
    86ca:	strb	r3, [r6, #16]
    86cc:	b.n	868c <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x28>
    if (!readData(dst, 512)) {
      return false;
    }
  }
  m_curSector += ns;
  return m_sharedSpi ? syncDevice() : true;
    86ce:	ldr	r3, [r6, #0]
    86d0:	mov	r0, r6
    86d2:	ldr	r3, [r3, #20]
      return false;
    }
  }
  return readStop();
#endif  // ENABLE_DEDICATED_SPI
}
    86d4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    if (!readData(dst, 512)) {
      return false;
    }
  }
  m_curSector += ns;
  return m_sharedSpi ? syncDevice() : true;
    86d8:	bx	r3
    86da:	nop

000086dc <SdSpiCard::readStop()>:
  csd_t csd;
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
}

//------------------------------------------------------------------------------
bool SdSpiCard::readStop() {
    86dc:	push	{r3, r4, r5, lr}
  if (cardCommand(CMD12, 0)) {
    86de:	movs	r2, #0
    86e0:	movs	r1, #12
  csd_t csd;
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
}

//------------------------------------------------------------------------------
bool SdSpiCard::readStop() {
    86e2:	mov	r5, r0
  if (cardCommand(CMD12, 0)) {
    86e4:	bl	8450 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    86e8:	ldrb	r4, [r5, #20]
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
}

//------------------------------------------------------------------------------
bool SdSpiCard::readStop() {
  if (cardCommand(CMD12, 0)) {
    86ea:	cbz	r0, 86f6 <SdSpiCard::readStop()+0x1a>
    86ec:	movs	r3, #9
    86ee:	strb	r3, [r5, #19]
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    86f0:	cbnz	r4, 8708 <SdSpiCard::readStop()+0x2c>
  return true;

fail:
  spiStop();
  return false;
}
    86f2:	mov	r0, r4
    86f4:	pop	{r3, r4, r5, pc}
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    86f6:	cbnz	r4, 86fe <SdSpiCard::readStop()+0x22>
  if (cardCommand(CMD12, 0)) {
    error(SD_CARD_ERROR_CMD12);
    goto fail;
  }
  spiStop();
  return true;
    86f8:	movs	r4, #1

fail:
  spiStop();
  return false;
}
    86fa:	mov	r0, r4
    86fc:	pop	{r3, r4, r5, pc}
    86fe:	mov	r0, r5
    8700:	bl	8330 <SdSpiCard::spiStop() [clone .part.8] [clone .constprop.27]>
    8704:	mov	r0, r4
    8706:	pop	{r3, r4, r5, pc}
    8708:	mov	r0, r5
    870a:	movs	r4, #0
    870c:	bl	8330 <SdSpiCard::spiStop() [clone .part.8] [clone .constprop.27]>
    8710:	mov	r0, r4
    8712:	pop	{r3, r4, r5, pc}

00008714 <SdSpiCard::writeStart(unsigned long)>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t sector) {
    8714:	push	{r4, r5, lr}
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    8716:	ldr	r3, [r0, #0]
    8718:	ldr	r5, [pc, #68]	; (8760 <SdSpiCard::writeStart(unsigned long)+0x4c>)
    871a:	ldr	r3, [r3, #64]	; 0x40
    871c:	cmp	r3, r5
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t sector) {
    871e:	sub	sp, #12
    8720:	mov	r4, r0
    8722:	mov	r2, r1
    8724:	bne.n	8756 <SdSpiCard::writeStart(unsigned long)+0x42>
  bool syncDevice();
  /** Return the card type: SD V1, SD V2 or SDHC/SDXC
   * \return 0 - SD V1, 1 - SD V2, or 3 - SDHC/SDXC.
   */
  uint8_t type() const {
    return m_type;
    8726:	ldrb	r0, [r0, #22]
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    8728:	cmp	r0, #3
    sector <<= 9;
    872a:	it	ne
    872c:	lslne	r2, r2, #9
  }
  if (cardCommand(CMD25, sector)) {
    872e:	movs	r1, #25
    8730:	mov	r0, r4
    8732:	bl	8450 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    8736:	cbz	r0, 8750 <SdSpiCard::writeStart(unsigned long)+0x3c>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    8738:	ldrb	r0, [r4, #20]
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    873a:	movs	r3, #14
    873c:	strb	r3, [r4, #19]
    873e:	cbnz	r0, 8744 <SdSpiCard::writeStart(unsigned long)+0x30>
  return true;

fail:
  spiStop();
  return false;
}
    8740:	add	sp, #12
    8742:	pop	{r4, r5, pc}
    8744:	mov	r0, r4
    8746:	bl	8330 <SdSpiCard::spiStop() [clone .part.8] [clone .constprop.27]>
    874a:	movs	r0, #0
    874c:	add	sp, #12
    874e:	pop	{r4, r5, pc}
  }
  if (cardCommand(CMD25, sector)) {
    error(SD_CARD_ERROR_CMD25);
    goto fail;
  }
  return true;
    8750:	movs	r0, #1

fail:
  spiStop();
  return false;
}
    8752:	add	sp, #12
    8754:	pop	{r4, r5, pc}
    8756:	str	r1, [sp, #4]
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t sector) {
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    8758:	blx	r3
    875a:	ldr	r2, [sp, #4]
    875c:	b.n	8728 <SdSpiCard::writeStart(unsigned long)+0x14>
    875e:	nop
    8760:	.word	0x00008279

00008764 <SdSpiCard::erase(unsigned long, unsigned long)>:
//------------------------------------------------------------------------------
void SdSpiCard::dbgClearStats() {::dbgClearStats();}
//------------------------------------------------------------------------------
void SdSpiCard::dbgPrintStats() {::dbgPrintStats();}
//------------------------------------------------------------------------------
bool SdSpiCard::erase(uint32_t firstSector, uint32_t lastSector) {
    8764:	push	{r4, r5, r6, r7, lr}
  csd_t csd;
  if (!readCSD(&csd)) {
    8766:	ldr	r3, [r0, #0]
    8768:	ldr	r7, [pc, #172]	; (8818 <SdSpiCard::erase(unsigned long, unsigned long)+0xb4>)
    876a:	ldr	r3, [r3, #52]	; 0x34
    876c:	cmp	r3, r7
//------------------------------------------------------------------------------
void SdSpiCard::dbgClearStats() {::dbgClearStats();}
//------------------------------------------------------------------------------
void SdSpiCard::dbgPrintStats() {::dbgPrintStats();}
//------------------------------------------------------------------------------
bool SdSpiCard::erase(uint32_t firstSector, uint32_t lastSector) {
    876e:	sub	sp, #20
    8770:	mov	r4, r0
    8772:	mov	r5, r1
    8774:	mov	r6, r2
    8776:	bne.n	87d4 <SdSpiCard::erase(unsigned long, unsigned long)+0x70>
   * \param[out] csd pointer to area for returned data.
   *
   * \return true for success or false for failure.
   */
  bool readCSD(csd_t* csd) {
    return readRegister(CMD9, csd);
    8778:	mov	r2, sp
    877a:	movs	r1, #9
    877c:	bl	8520 <SdSpiCard::readRegister(unsigned char, void*)>
  csd_t csd;
  if (!readCSD(&csd)) {
    8780:	cbz	r0, 87a8 <SdSpiCard::erase(unsigned long, unsigned long)+0x44>
    goto fail;
  }
  // check for single sector erase
  if (!csd.v1.erase_blk_en) {
    8782:	ldrb.w	r3, [sp, #10]
    8786:	lsls	r2, r3, #25
    8788:	bpl.n	87b8 <SdSpiCard::erase(unsigned long, unsigned long)+0x54>
      // error card can't erase specified area
      error(SD_CARD_ERROR_ERASE_SINGLE_SECTOR);
      goto fail;
    }
  }
  if (m_type != SD_CARD_TYPE_SDHC) {
    878a:	ldrb	r3, [r4, #22]
    878c:	cmp	r3, #3
    firstSector <<= 9;
    878e:	it	ne
    8790:	lslne	r5, r5, #9
    lastSector <<= 9;
  }
  if (cardCommand(CMD32, firstSector)
    8792:	mov	r2, r5
    8794:	mov.w	r1, #32
    8798:	mov	r0, r4
      goto fail;
    }
  }
  if (m_type != SD_CARD_TYPE_SDHC) {
    firstSector <<= 9;
    lastSector <<= 9;
    879a:	it	ne
    879c:	lslne	r6, r6, #9
  }
  if (cardCommand(CMD32, firstSector)
    879e:	bl	8450 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
      || cardCommand(CMD33, lastSector)
      || cardCommand(CMD38, 0)) {
    87a2:	cbz	r0, 87da <SdSpiCard::erase(unsigned long, unsigned long)+0x76>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    87a4:	movs	r3, #37	; 0x25
    87a6:	strb	r3, [r4, #19]
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    87a8:	ldrb	r0, [r4, #20]
    87aa:	cbz	r0, 87b4 <SdSpiCard::erase(unsigned long, unsigned long)+0x50>
    87ac:	mov	r0, r4
    87ae:	bl	8330 <SdSpiCard::spiStop() [clone .part.8] [clone .constprop.27]>
  spiStop();
  return true;

fail:
  spiStop();
  return false;
    87b2:	movs	r0, #0
}
    87b4:	add	sp, #20
    87b6:	pop	{r4, r5, r6, r7, pc}
  }
  // check for single sector erase
  if (!csd.v1.erase_blk_en) {
    // erase size mask
    uint8_t m = (csd.v1.sector_size_high << 1) | csd.v1.sector_size_low;
    if ((firstSector & m) != 0 || ((lastSector + 1) & m) != 0) {
    87b8:	and.w	r3, r3, #63	; 0x3f
    goto fail;
  }
  // check for single sector erase
  if (!csd.v1.erase_blk_en) {
    // erase size mask
    uint8_t m = (csd.v1.sector_size_high << 1) | csd.v1.sector_size_low;
    87bc:	ldrb.w	r1, [sp, #11]
    if ((firstSector & m) != 0 || ((lastSector + 1) & m) != 0) {
    87c0:	lsls	r3, r3, #1
    87c2:	adds	r2, r6, #1
    87c4:	orr.w	r3, r3, r1, lsr #7
    87c8:	orrs	r2, r5
    87ca:	tst	r3, r2
    87cc:	beq.n	878a <SdSpiCard::erase(unsigned long, unsigned long)+0x26>
    87ce:	movs	r3, #38	; 0x26
    87d0:	strb	r3, [r4, #19]
    87d2:	b.n	87a8 <SdSpiCard::erase(unsigned long, unsigned long)+0x44>
//------------------------------------------------------------------------------
void SdSpiCard::dbgPrintStats() {::dbgPrintStats();}
//------------------------------------------------------------------------------
bool SdSpiCard::erase(uint32_t firstSector, uint32_t lastSector) {
  csd_t csd;
  if (!readCSD(&csd)) {
    87d4:	mov	r1, sp
    87d6:	blx	r3
    87d8:	b.n	8780 <SdSpiCard::erase(unsigned long, unsigned long)+0x1c>
  if (m_type != SD_CARD_TYPE_SDHC) {
    firstSector <<= 9;
    lastSector <<= 9;
  }
  if (cardCommand(CMD32, firstSector)
      || cardCommand(CMD33, lastSector)
    87da:	mov	r2, r6
    87dc:	movs	r1, #33	; 0x21
    87de:	mov	r0, r4
    87e0:	bl	8450 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    87e4:	cmp	r0, #0
    87e6:	bne.n	87a4 <SdSpiCard::erase(unsigned long, unsigned long)+0x40>
      || cardCommand(CMD38, 0)) {
    87e8:	mov	r2, r0
    87ea:	movs	r1, #38	; 0x26
    87ec:	mov	r0, r4
    87ee:	bl	8450 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    87f2:	cmp	r0, #0
    87f4:	bne.n	87a4 <SdSpiCard::erase(unsigned long, unsigned long)+0x40>
    error(SD_CARD_ERROR_ERASE);
    goto fail;
  }
  DBG_BEGIN_TIME(DBG_ERASE_BUSY);
  if (!waitNotBusy(SD_ERASE_TIMEOUT)) {
    87f6:	movw	r1, #10000	; 0x2710
    87fa:	mov	r0, r4
    87fc:	bl	8414 <SdSpiCard::waitNotBusy(unsigned short)>
    8800:	cbnz	r0, 8808 <SdSpiCard::erase(unsigned long, unsigned long)+0xa4>
    8802:	movs	r3, #39	; 0x27
    8804:	strb	r3, [r4, #19]
    8806:	b.n	87a8 <SdSpiCard::erase(unsigned long, unsigned long)+0x44>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    8808:	ldrb	r5, [r4, #20]
    880a:	cmp	r5, #0
    880c:	beq.n	87b4 <SdSpiCard::erase(unsigned long, unsigned long)+0x50>
    880e:	mov	r0, r4
    8810:	bl	8330 <SdSpiCard::spiStop() [clone .part.8] [clone .constprop.27]>
    error(SD_CARD_ERROR_ERASE_TIMEOUT);
    goto fail;
  }
  DBG_END_TIME(DBG_ERASE_BUSY);
  spiStop();
  return true;
    8814:	mov	r0, r5
    8816:	b.n	87b4 <SdSpiCard::erase(unsigned long, unsigned long)+0x50>
    8818:	.word	0x0000856d

0000881c <SdSpiCard::writeStop()>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
    881c:	push	{r4, r5, r6, lr}
  DBG_BEGIN_TIME(DBG_WRITE_STOP);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
    881e:	mov.w	r1, #600	; 0x258
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
    8822:	mov	r5, r0
  DBG_BEGIN_TIME(DBG_WRITE_STOP);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
    8824:	bl	8414 <SdSpiCard::waitNotBusy(unsigned short)>
    8828:	mov	r6, r0
    882a:	cbnz	r0, 8844 <SdSpiCard::writeStop()+0x28>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    882c:	ldrb	r4, [r5, #20]
    882e:	movs	r3, #30
    8830:	strb	r3, [r5, #19]
    8832:	cbnz	r4, 8838 <SdSpiCard::writeStop()+0x1c>

fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  spiStop();
  return false;
}
    8834:	mov	r0, r4
    8836:	pop	{r4, r5, r6, pc}
    8838:	mov	r0, r5
  return true;

fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  spiStop();
  return false;
    883a:	mov	r4, r6
    883c:	bl	8330 <SdSpiCard::spiStop() [clone .part.8] [clone .constprop.27]>
}
    8840:	mov	r0, r4
    8842:	pop	{r4, r5, r6, pc}
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver.receive(buf, n);
  }
  void spiSend(uint8_t data) {
    m_spiDriver.send(data);
    8844:	movs	r1, #253	; 0xfd
    8846:	adds	r0, r5, #4
    8848:	bl	99dc <SdSpiArduinoDriver::send(unsigned char)>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    884c:	ldrb	r4, [r5, #20]
    884e:	cbnz	r4, 8856 <SdSpiCard::writeStop()+0x3a>
    8850:	mov	r4, r6

fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  spiStop();
  return false;
}
    8852:	mov	r0, r4
    8854:	pop	{r4, r5, r6, pc}
    8856:	mov	r0, r5
    8858:	bl	8330 <SdSpiCard::spiStop() [clone .part.8] [clone .constprop.27]>
    885c:	b.n	8834 <SdSpiCard::writeStop()+0x18>
    885e:	nop

00008860 <SdSpiCard::syncDevice()>:
  }
  return readStop();
#endif  // ENABLE_DEDICATED_SPI
}
//------------------------------------------------------------------------------
bool SdSpiCard::syncDevice() {
    8860:	push	{r4, lr}
#if ENABLE_DEDICATED_SPI
  if (m_curState == READ_STATE) {
    8862:	ldrb	r3, [r0, #16]
    8864:	cmp	r3, #1
  }
  return readStop();
#endif  // ENABLE_DEDICATED_SPI
}
//------------------------------------------------------------------------------
bool SdSpiCard::syncDevice() {
    8866:	mov	r4, r0
#if ENABLE_DEDICATED_SPI
  if (m_curState == READ_STATE) {
    8868:	beq.n	8876 <SdSpiCard::syncDevice()+0x16>
    if (!SdSpiCard::readStop()) {
      return false;
    }
  } else if (m_curState == WRITE_STATE) {
    886a:	cmp	r3, #2
    886c:	beq.n	8882 <SdSpiCard::syncDevice()+0x22>
    if (!SdSpiCard::writeStop()) {
      return false;
    }
  }
  m_curState = IDLE_STATE;
    886e:	movs	r3, #0
    8870:	strb	r3, [r4, #16]
#endif  // ENABLE_DEDICATED_SPI
  return true;
    8872:	movs	r0, #1
    8874:	pop	{r4, pc}
}
//------------------------------------------------------------------------------
bool SdSpiCard::syncDevice() {
#if ENABLE_DEDICATED_SPI
  if (m_curState == READ_STATE) {
    if (!SdSpiCard::readStop()) {
    8876:	bl	86dc <SdSpiCard::readStop()>
    887a:	cmp	r0, #0
    887c:	bne.n	886e <SdSpiCard::syncDevice()+0xe>
      return false;
    887e:	movs	r0, #0
    8880:	pop	{r4, pc}
    }
  } else if (m_curState == WRITE_STATE) {
    if (!SdSpiCard::writeStop()) {
    8882:	bl	881c <SdSpiCard::writeStop()>
    8886:	cmp	r0, #0
    8888:	bne.n	886e <SdSpiCard::syncDevice()+0xe>
    888a:	b.n	887e <SdSpiCard::syncDevice()+0x1e>

0000888c <SdSpiCard::writeData(unsigned char, unsigned char const*)>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send one sector of data for write sector or write multiple sectors
bool SdSpiCard::writeData(uint8_t token, const uint8_t* src) {
    888c:	push	{r4, r5, r6, lr}
    888e:	adds	r4, r0, #4
    8890:	mov	r6, r2
    8892:	mov	r5, r0
    8894:	mov	r0, r4
    8896:	bl	99dc <SdSpiArduinoDriver::send(unsigned char)>
  }
  void spiSend(const uint8_t* buf, size_t n) {
    m_spiDriver.send(buf, n);
    889a:	mov.w	r2, #512	; 0x200
    889e:	mov	r1, r6
    88a0:	mov	r0, r4
    88a2:	bl	99f4 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver.receive(buf, n);
  }
  void spiSend(uint8_t data) {
    m_spiDriver.send(data);
    88a6:	mov	r0, r4
    88a8:	movs	r1, #255	; 0xff
    88aa:	bl	99dc <SdSpiArduinoDriver::send(unsigned char)>
    88ae:	mov	r0, r4
    88b0:	movs	r1, #255	; 0xff
    88b2:	bl	99dc <SdSpiArduinoDriver::send(unsigned char)>
  }
  void spiDeactivate() {
    m_spiDriver.deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver.receive();
    88b6:	mov	r0, r4
    88b8:	bl	99a0 <SdSpiArduinoDriver::receive()>
  spiSend(src, 512);
  spiSend(crc >> 8);
  spiSend(crc & 0XFF);

  m_status = spiReceive();
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    88bc:	and.w	r3, r0, #31
    88c0:	cmp	r3, #5
  spiSend(token);
  spiSend(src, 512);
  spiSend(crc >> 8);
  spiSend(crc & 0XFF);

  m_status = spiReceive();
    88c2:	strb	r0, [r5, #21]
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    88c4:	beq.n	88da <SdSpiCard::writeData(unsigned char, unsigned char const*)+0x4e>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    88c6:	ldrb	r0, [r5, #20]
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    88c8:	movs	r3, #31
    88ca:	strb	r3, [r5, #19]
    88cc:	cbnz	r0, 88d0 <SdSpiCard::writeData(unsigned char, unsigned char const*)+0x44>
  return true;

fail:
  spiStop();
  return false;
}
    88ce:	pop	{r4, r5, r6, pc}
    88d0:	mov	r0, r5
    88d2:	bl	8330 <SdSpiCard::spiStop() [clone .part.8] [clone .constprop.27]>
  }
  return true;

fail:
  spiStop();
  return false;
    88d6:	movs	r0, #0
    88d8:	pop	{r4, r5, r6, pc}
  m_status = spiReceive();
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    error(SD_CARD_ERROR_WRITE_DATA);
    goto fail;
  }
  return true;
    88da:	movs	r0, #1

fail:
  spiStop();
  return false;
}
    88dc:	pop	{r4, r5, r6, pc}
    88de:	nop

000088e0 <SdSpiCard::writeData(unsigned char const*)>:
  spiStop();
  return false;
#endif  // ENABLE_DEDICATED_SPI
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeData(const uint8_t* src) {
    88e0:	push	{r3, r4, r5, lr}
    88e2:	mov	r5, r1
  // wait for previous write to finish
  DBG_BEGIN_TIME(DBG_WRITE_BUSY);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
    88e4:	mov.w	r1, #600	; 0x258
  spiStop();
  return false;
#endif  // ENABLE_DEDICATED_SPI
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeData(const uint8_t* src) {
    88e8:	mov	r4, r0
  // wait for previous write to finish
  DBG_BEGIN_TIME(DBG_WRITE_BUSY);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
    88ea:	bl	8414 <SdSpiCard::waitNotBusy(unsigned short)>
    88ee:	cbnz	r0, 8902 <SdSpiCard::writeData(unsigned char const*)+0x22>
    88f0:	movs	r3, #35	; 0x23
    88f2:	strb	r3, [r4, #19]
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    88f4:	ldrb	r0, [r4, #20]
    88f6:	cbz	r0, 8900 <SdSpiCard::writeData(unsigned char const*)+0x20>
    88f8:	mov	r0, r4
    88fa:	bl	8330 <SdSpiCard::spiStop() [clone .part.8] [clone .constprop.27]>
  }
  return true;

fail:
  spiStop();
  return false;
    88fe:	movs	r0, #0
}
    8900:	pop	{r3, r4, r5, pc}
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
    error(SD_CARD_ERROR_WRITE_TIMEOUT);
    goto fail;
  }
  DBG_END_TIME(DBG_WRITE_BUSY);
  if (!writeData(WRITE_MULTIPLE_TOKEN, src)) {
    8902:	mov	r2, r5
    8904:	movs	r1, #252	; 0xfc
    8906:	mov	r0, r4
    8908:	bl	888c <SdSpiCard::writeData(unsigned char, unsigned char const*)>
    890c:	cmp	r0, #0
    890e:	beq.n	88f4 <SdSpiCard::writeData(unsigned char const*)+0x14>
  return true;

fail:
  spiStop();
  return false;
}
    8910:	pop	{r3, r4, r5, pc}
    8912:	nop

00008914 <sdIrs()>:
#endif  // USE_DEBUG_MODE
  return false;
}
//==============================================================================
// ISR
static void sdIrs() {
    8914:	push	{r4}
  SDHC_IRQSIGEN = 0;
    8916:	ldr	r4, [pc, #28]	; (8934 <sdIrs()+0x20>)
  m_irqstat = SDHC_IRQSTAT;
    8918:	ldr	r2, [pc, #28]	; (8938 <sdIrs()+0x24>)
    891a:	ldr	r1, [pc, #32]	; (893c <sdIrs()+0x28>)
  SDHC_IRQSTAT = m_irqstat;
#if defined(__IMXRT1062__)
  SDHC_MIX_CTRL &= ~(SDHC_MIX_CTRL_AC23EN | SDHC_MIX_CTRL_DMAEN);
#endif
  m_dmaBusy = false;
    891c:	ldr	r0, [pc, #32]	; (8940 <sdIrs()+0x2c>)
  return false;
}
//==============================================================================
// ISR
static void sdIrs() {
  SDHC_IRQSIGEN = 0;
    891e:	movs	r3, #0
    8920:	str	r3, [r4, #0]
  m_irqstat = SDHC_IRQSTAT;
    8922:	ldr	r4, [r2, #0]
    8924:	str	r4, [r1, #0]
  SDHC_IRQSTAT = m_irqstat;
    8926:	ldr	r1, [r1, #0]
    8928:	str	r1, [r2, #0]
#if defined(__IMXRT1062__)
  SDHC_MIX_CTRL &= ~(SDHC_MIX_CTRL_AC23EN | SDHC_MIX_CTRL_DMAEN);
#endif
  m_dmaBusy = false;
}
    892a:	ldr.w	r4, [sp], #4
  m_irqstat = SDHC_IRQSTAT;
  SDHC_IRQSTAT = m_irqstat;
#if defined(__IMXRT1062__)
  SDHC_MIX_CTRL &= ~(SDHC_MIX_CTRL_AC23EN | SDHC_MIX_CTRL_DMAEN);
#endif
  m_dmaBusy = false;
    892e:	strb	r3, [r0, #0]
}
    8930:	bx	lr
    8932:	nop
    8934:	.word	0x400b1038
    8938:	.word	0x400b1030
    893c:	.word	0x1fff8750
    8940:	.word	0x1fff8768

00008944 <isBusyCommandComplete()>:
  }
  return !(SDHC_CMDRSP0 & CARD_STATUS_READY_FOR_DATA);
}
//------------------------------------------------------------------------------
static bool isBusyCommandComplete() {
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_CC | SDHC_IRQSTAT_CMD_ERROR));
    8944:	ldr	r3, [pc, #12]	; (8954 <isBusyCommandComplete()+0x10>)
    8946:	ldr	r0, [pc, #16]	; (8958 <isBusyCommandComplete()+0x14>)
    8948:	ldr	r3, [r3, #0]
    894a:	ands	r0, r3
}
    894c:	clz	r0, r0
    8950:	lsrs	r0, r0, #5
    8952:	bx	lr
    8954:	.word	0x400b1030
    8958:	.word	0x000f0001

0000895c <isBusyCommandInhibit()>:
//------------------------------------------------------------------------------
static bool isBusyCommandInhibit() {
  return SDHC_PRSSTAT & SDHC_PRSSTAT_CIHB;
    895c:	ldr	r3, [pc, #8]	; (8968 <isBusyCommandInhibit()+0xc>)
    895e:	ldr	r0, [r3, #0]
}
    8960:	and.w	r0, r0, #1
    8964:	bx	lr
    8966:	nop
    8968:	.word	0x400b1024

0000896c <isBusyDMA()>:
//------------------------------------------------------------------------------
static bool isBusyDMA() {
  return m_dmaBusy;
    896c:	ldr	r3, [pc, #4]	; (8974 <isBusyDMA()+0x8>)
    896e:	ldrb	r0, [r3, #0]
}
    8970:	bx	lr
    8972:	nop
    8974:	.word	0x1fff8768

00008978 <isBusyFifoRead()>:
//------------------------------------------------------------------------------
static bool isBusyFifoRead() {
  return !(SDHC_PRSSTAT & SDHC_PRSSTAT_BREN);
    8978:	ldr	r3, [pc, #12]	; (8988 <isBusyFifoRead()+0x10>)
    897a:	ldr	r0, [r3, #0]
    897c:	eor.w	r0, r0, #2048	; 0x800
}
    8980:	ubfx	r0, r0, #11, #1
    8984:	bx	lr
    8986:	nop
    8988:	.word	0x400b1024

0000898c <isBusyFifoWrite()>:
//------------------------------------------------------------------------------
static bool isBusyFifoWrite() {
  return !(SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN);
    898c:	ldr	r3, [pc, #12]	; (899c <isBusyFifoWrite()+0x10>)
    898e:	ldr	r0, [r3, #0]
    8990:	eor.w	r0, r0, #1024	; 0x400
}
    8994:	ubfx	r0, r0, #10, #1
    8998:	bx	lr
    899a:	nop
    899c:	.word	0x400b1024

000089a0 <isBusyTransferComplete()>:
//------------------------------------------------------------------------------
static bool isBusyTransferComplete() {
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
    89a0:	ldr	r3, [pc, #12]	; (89b0 <isBusyTransferComplete()+0x10>)
    89a2:	ldr	r0, [pc, #16]	; (89b4 <isBusyTransferComplete()+0x14>)
    89a4:	ldr	r3, [r3, #0]
    89a6:	ands	r0, r3
}
    89a8:	clz	r0, r0
    89ac:	lsrs	r0, r0, #5
    89ae:	bx	lr
    89b0:	.word	0x400b1030
    89b4:	.word	0x117f0002

000089b8 <setSdclk(unsigned long)>:
static void setSdclk(uint32_t kHzMax) {
  const uint32_t DVS_LIMIT = 0X10;
  const uint32_t SDCLKFS_LIMIT = 0X100;
  uint32_t dvs = 1;
  uint32_t sdclkfs = 1;
  uint32_t maxSdclk = 1000*kHzMax;
    89b8:	mov.w	r2, #1000	; 0x3e8
  uint32_t base = baseClock();

  while ((base/(sdclkfs*DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    89bc:	ldr	r3, [pc, #176]	; (8a70 <setSdclk(unsigned long)+0xb8>)
static void setSdclk(uint32_t kHzMax) {
  const uint32_t DVS_LIMIT = 0X10;
  const uint32_t SDCLKFS_LIMIT = 0X100;
  uint32_t dvs = 1;
  uint32_t sdclkfs = 1;
  uint32_t maxSdclk = 1000*kHzMax;
    89be:	mul.w	r0, r2, r0
  uint32_t base = baseClock();

  while ((base/(sdclkfs*DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    89c2:	cmp	r0, r3
  }
  d[15] = 0;
  return true;
}
//------------------------------------------------------------------------------
static void setSdclk(uint32_t kHzMax) {
    89c4:	push	{r4, r5, r6, r7}
  uint32_t dvs = 1;
  uint32_t sdclkfs = 1;
  uint32_t maxSdclk = 1000*kHzMax;
  uint32_t base = baseClock();

  while ((base/(sdclkfs*DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    89c6:	bhi.n	8a60 <setSdclk(unsigned long)+0xa8>
    89c8:	ldr	r5, [pc, #168]	; (8a74 <setSdclk(unsigned long)+0xbc>)
    89ca:	movs	r2, #8
    89cc:	movs	r1, #1
    sdclkfs <<= 1;
    89ce:	lsls	r1, r1, #1
  uint32_t dvs = 1;
  uint32_t sdclkfs = 1;
  uint32_t maxSdclk = 1000*kHzMax;
  uint32_t base = baseClock();

  while ((base/(sdclkfs*DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    89d0:	lsls	r3, r1, #4
    89d2:	udiv	r3, r5, r3
    89d6:	cmp	r0, r3
    89d8:	ldr	r4, [pc, #152]	; (8a74 <setSdclk(unsigned long)+0xbc>)
    89da:	bcs.n	8a58 <setSdclk(unsigned long)+0xa0>
    89dc:	subs	r2, #1
    89de:	bne.n	89ce <setSdclk(unsigned long)+0x16>
    89e0:	udiv	r4, r4, r1
    89e4:	lsrs	r3, r1, #1
    89e6:	lsls	r7, r3, #8
    sdclkfs <<= 1;
  }
  while ((base/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    89e8:	cmp	r0, r4
    89ea:	bcs.n	8a68 <setSdclk(unsigned long)+0xb0>
    89ec:	ldr	r6, [pc, #132]	; (8a74 <setSdclk(unsigned long)+0xbc>)
    89ee:	lsls	r3, r1, #1
    89f0:	movs	r2, #1
    89f2:	b.n	89f6 <setSdclk(unsigned long)+0x3e>
    89f4:	mov	r3, r4
    89f6:	udiv	r4, r6, r3
    89fa:	cmp	r0, r4
    dvs++;
    89fc:	add.w	r5, r2, #1
    8a00:	add.w	r4, r3, r1
  uint32_t base = baseClock();

  while ((base/(sdclkfs*DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    sdclkfs <<= 1;
  }
  while ((base/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    8a04:	bcs.n	8a54 <setSdclk(unsigned long)+0x9c>
    8a06:	cmp	r5, #16
    8a08:	mov	r2, r5
    8a0a:	bne.n	89f4 <setSdclk(unsigned long)+0x3c>
    8a0c:	movs	r2, #240	; 0xf0
    dvs++;
  }
  m_sdClkKhz = base/(1000*sdclkfs*dvs);
    8a0e:	ldr	r6, [pc, #104]	; (8a78 <setSdclk(unsigned long)+0xc0>)
  sdclkfs >>= 1;
  dvs--;
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
  // Disable SDHC clock.
  SDHC_SYSCTL &= ~SDHC_SYSCTL_SDCLKEN;
    8a10:	ldr	r4, [pc, #104]	; (8a7c <setSdclk(unsigned long)+0xc4>)
    sdclkfs <<= 1;
  }
  while ((base/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    dvs++;
  }
  m_sdClkKhz = base/(1000*sdclkfs*dvs);
    8a12:	ldr	r0, [pc, #96]	; (8a74 <setSdclk(unsigned long)+0xbc>)

  SDHC_SYSCTL = sysctl | SDHC_SYSCTL_DTOCV(0x0E) | SDHC_SYSCTL_DVS(dvs)
                | SDHC_SYSCTL_SDCLKFS(sdclkfs);

  // Wait until the SDHC clock is stable.
  while (!(SDHC_PRSSTAT & SDHC_PRSSTAT_SDSTB)) {
    8a14:	ldr	r1, [pc, #104]	; (8a80 <setSdclk(unsigned long)+0xc8>)
    sdclkfs <<= 1;
  }
  while ((base/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    dvs++;
  }
  m_sdClkKhz = base/(1000*sdclkfs*dvs);
    8a16:	mov.w	r5, #1000	; 0x3e8
    8a1a:	mul.w	r3, r5, r3
    8a1e:	udiv	r3, r0, r3
    8a22:	str	r3, [r6, #0]
  sdclkfs >>= 1;
  dvs--;
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
  // Disable SDHC clock.
  SDHC_SYSCTL &= ~SDHC_SYSCTL_SDCLKEN;
    8a24:	ldr	r3, [r4, #0]
    8a26:	bic.w	r3, r3, #8
    8a2a:	str	r3, [r4, #0]
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)

  // Change dividers.
  uint32_t sysctl = SDHC_SYSCTL & ~(SDHC_SYSCTL_DTOCV_MASK
    8a2c:	ldr	r0, [r4, #0]
                    | SDHC_SYSCTL_DVS_MASK | SDHC_SYSCTL_SDCLKFS_MASK);

  SDHC_SYSCTL = sysctl | SDHC_SYSCTL_DTOCV(0x0E) | SDHC_SYSCTL_DVS(dvs)
                | SDHC_SYSCTL_SDCLKFS(sdclkfs);
    8a2e:	bic.w	r3, r0, #1044480	; 0xff000
    8a32:	bic.w	r3, r3, #4080	; 0xff0
    8a36:	orr.w	r3, r3, #917504	; 0xe0000
    8a3a:	orrs	r3, r7
    8a3c:	orrs	r2, r3
    8a3e:	str	r2, [r4, #0]

  // Wait until the SDHC clock is stable.
  while (!(SDHC_PRSSTAT & SDHC_PRSSTAT_SDSTB)) {
    8a40:	ldr	r3, [r1, #0]
    8a42:	lsls	r3, r3, #28
    8a44:	bpl.n	8a40 <setSdclk(unsigned long)+0x88>
  }

#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
  // Enable the SDHC clock.
  SDHC_SYSCTL |= SDHC_SYSCTL_SDCLKEN;
    8a46:	ldr	r2, [pc, #52]	; (8a7c <setSdclk(unsigned long)+0xc4>)
    8a48:	ldr	r3, [r2, #0]
    8a4a:	orr.w	r3, r3, #8
    8a4e:	str	r3, [r2, #0]
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
}
    8a50:	pop	{r4, r5, r6, r7}
    8a52:	bx	lr
    8a54:	lsls	r2, r2, #4
    8a56:	b.n	8a0e <setSdclk(unsigned long)+0x56>
    8a58:	udiv	r4, r4, r1
    8a5c:	lsls	r7, r1, #7
    8a5e:	b.n	89e8 <setSdclk(unsigned long)+0x30>
  uint32_t dvs = 1;
  uint32_t sdclkfs = 1;
  uint32_t maxSdclk = 1000*kHzMax;
  uint32_t base = baseClock();

  while ((base/(sdclkfs*DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    8a60:	ldr	r4, [pc, #16]	; (8a74 <setSdclk(unsigned long)+0xbc>)
    8a62:	movs	r7, #0
//------------------------------------------------------------------------------
static void setSdclk(uint32_t kHzMax) {
  const uint32_t DVS_LIMIT = 0X10;
  const uint32_t SDCLKFS_LIMIT = 0X100;
  uint32_t dvs = 1;
  uint32_t sdclkfs = 1;
    8a64:	movs	r1, #1
    8a66:	b.n	89e8 <setSdclk(unsigned long)+0x30>
  uint32_t base = baseClock();

  while ((base/(sdclkfs*DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    sdclkfs <<= 1;
  }
  while ((base/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    8a68:	mov	r3, r1
    8a6a:	movs	r2, #0
    8a6c:	b.n	8a0e <setSdclk(unsigned long)+0x56>
    8a6e:	nop
    8a70:	.word	0x005b8d7f
    8a74:	.word	0x05b8d800
    8a78:	.word	0x1fff876c
    8a7c:	.word	0x400b102c
    8a80:	.word	0x400b1024

00008a84 <SdioCard::errorCode() const>:
  }
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdioCard::errorCode() const {
  return m_errorCode;
    8a84:	ldr	r3, [pc, #4]	; (8a8c <SdioCard::errorCode() const+0x8>)
}
    8a86:	ldrb	r0, [r3, #0]
    8a88:	bx	lr
    8a8a:	nop
    8a8c:	.word	0x1fff0994

00008a90 <SdioCard::errorData() const>:
//------------------------------------------------------------------------------
uint32_t SdioCard::errorData() const {
  return m_irqstat;
    8a90:	ldr	r3, [pc, #4]	; (8a98 <SdioCard::errorData() const+0x8>)
    8a92:	ldr	r0, [r3, #0]
}
    8a94:	bx	lr
    8a96:	nop
    8a98:	.word	0x1fff8750

00008a9c <SdioCard::readCID(CID*)>:
//------------------------------------------------------------------------------
uint32_t SdioCard::kHzSdClk() {
  return m_sdClkKhz;
}
//------------------------------------------------------------------------------
bool SdioCard::readCID(cid_t* cid) {
    8a9c:	push	{r4, r5}
  memcpy(cid, &m_cid, 16);
    8a9e:	ldr	r4, [pc, #20]	; (8ab4 <SdioCard::readCID(CID*)+0x18>)
//------------------------------------------------------------------------------
uint32_t SdioCard::kHzSdClk() {
  return m_sdClkKhz;
}
//------------------------------------------------------------------------------
bool SdioCard::readCID(cid_t* cid) {
    8aa0:	mov	r5, r1
  memcpy(cid, &m_cid, 16);
    8aa2:	ldmia	r4!, {r0, r1, r2, r3}
    8aa4:	str	r0, [r5, #0]
    8aa6:	str	r1, [r5, #4]
    8aa8:	str	r2, [r5, #8]
    8aaa:	str	r3, [r5, #12]
  return true;
}
    8aac:	movs	r0, #1
    8aae:	pop	{r4, r5}
    8ab0:	bx	lr
    8ab2:	nop
    8ab4:	.word	0x1fff8730

00008ab8 <SdioCard::readCSD(csd_t*)>:
//------------------------------------------------------------------------------
bool SdioCard::readCSD(csd_t* csd) {
    8ab8:	push	{r4, r5}
  memcpy(csd, &m_csd, 16);
    8aba:	ldr	r4, [pc, #20]	; (8ad0 <SdioCard::readCSD(csd_t*)+0x18>)
bool SdioCard::readCID(cid_t* cid) {
  memcpy(cid, &m_cid, 16);
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readCSD(csd_t* csd) {
    8abc:	mov	r5, r1
  memcpy(csd, &m_csd, 16);
    8abe:	ldmia	r4!, {r0, r1, r2, r3}
    8ac0:	str	r0, [r5, #0]
    8ac2:	str	r1, [r5, #4]
    8ac4:	str	r2, [r5, #8]
    8ac6:	str	r3, [r5, #12]
  return true;
}
    8ac8:	movs	r0, #1
    8aca:	pop	{r4, r5}
    8acc:	bx	lr
    8ace:	nop
    8ad0:	.word	0x1fff8758

00008ad4 <SdioCard::readOCR(unsigned long*)>:
  SDHC_IRQSTAT = m_irqstat;
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
//------------------------------------------------------------------------------
bool SdioCard::readOCR(uint32_t* ocr) {
  *ocr = m_ocr;
    8ad4:	ldr	r3, [pc, #8]	; (8ae0 <SdioCard::readOCR(unsigned long*)+0xc>)
    8ad6:	ldr	r3, [r3, #0]
    8ad8:	str	r3, [r1, #0]
  return true;
}
    8ada:	movs	r0, #1
    8adc:	bx	lr
    8ade:	nop
    8ae0:	.word	0x1fff8748

00008ae4 <SdioCard::~SdioCard()>:
//------------------------------------------------------------------------------
/**
 * \class SdioCard
 * \brief Raw SDIO access to SD and SDHC flash memory cards.
 */
class SdioCard : public SdCardInterface {
    8ae4:	bx	lr
    8ae6:	nop

00008ae8 <waitTimeout(bool (*)())>:
  }
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
//------------------------------------------------------------------------------
// Return true if timeout occurs.
static bool waitTimeout(bool (*fcn)()) {
    8ae8:	push	{r3, r4, r5, r6, r7, lr}
    8aea:	mov	r5, r0
  uint32_t m = micros();
    8aec:	bl	9fd8 <micros>
  while (fcn()) {
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    8af0:	ldr	r7, [pc, #24]	; (8b0c <waitTimeout(bool (*)())+0x24>)
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
//------------------------------------------------------------------------------
// Return true if timeout occurs.
static bool waitTimeout(bool (*fcn)()) {
  uint32_t m = micros();
    8af2:	mov	r6, r0
    8af4:	b.n	8b00 <waitTimeout(bool (*)())+0x18>
  while (fcn()) {
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    8af6:	bl	9fd8 <micros>
    8afa:	subs	r0, r0, r6
    8afc:	cmp	r0, r7
    8afe:	bhi.n	8b08 <waitTimeout(bool (*)())+0x20>
}
//------------------------------------------------------------------------------
// Return true if timeout occurs.
static bool waitTimeout(bool (*fcn)()) {
  uint32_t m = micros();
  while (fcn()) {
    8b00:	blx	r5
    8b02:	mov	r4, r0
    8b04:	cmp	r0, #0
    8b06:	bne.n	8af6 <waitTimeout(bool (*)())+0xe>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
      return true;
    }
  }
  return false;  // Caller will set errorCode.
}
    8b08:	mov	r0, r4
    8b0a:	pop	{r3, r4, r5, r6, r7, pc}
    8b0c:	.word	0x000f4240

00008b10 <yieldTimeout(bool (*)())>:
  SDHC_PROCTL = proctl;
  return true;
}
//------------------------------------------------------------------------------
// Return true if timeout occurs.
static bool yieldTimeout(bool (*fcn)()) {
    8b10:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  m_busyFcn = fcn;
    8b14:	ldr.w	r8, [pc, #64]	; 8b58 <yieldTimeout(bool (*)())+0x48>
  uint32_t m = micros();
  while (fcn()) {
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    8b18:	ldr	r7, [pc, #56]	; (8b54 <yieldTimeout(bool (*)())+0x44>)
  return true;
}
//------------------------------------------------------------------------------
// Return true if timeout occurs.
static bool yieldTimeout(bool (*fcn)()) {
  m_busyFcn = fcn;
    8b1a:	str.w	r0, [r8]
  SDHC_PROCTL = proctl;
  return true;
}
//------------------------------------------------------------------------------
// Return true if timeout occurs.
static bool yieldTimeout(bool (*fcn)()) {
    8b1e:	mov	r5, r0
  m_busyFcn = fcn;
  uint32_t m = micros();
    8b20:	bl	9fd8 <micros>
    8b24:	mov	r6, r0
    8b26:	b.n	8b36 <yieldTimeout(bool (*)())+0x26>
  while (fcn()) {
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    8b28:	bl	9fd8 <micros>
    8b2c:	subs	r0, r0, r6
    8b2e:	cmp	r0, r7
    8b30:	bhi.n	8b48 <yieldTimeout(bool (*)())+0x38>
  Particle.process();
}
#elif defined(ARDUINO)
inline void SysCall::yield() {
  // Use the external Arduino yield() function.
  ::yield();
    8b32:	bl	afb4 <yield>
//------------------------------------------------------------------------------
// Return true if timeout occurs.
static bool yieldTimeout(bool (*fcn)()) {
  m_busyFcn = fcn;
  uint32_t m = micros();
  while (fcn()) {
    8b36:	blx	r5
    8b38:	mov	r4, r0
    8b3a:	cmp	r0, #0
    8b3c:	bne.n	8b28 <yieldTimeout(bool (*)())+0x18>
      m_busyFcn = 0;
      return true;
    }
    SysCall::yield();
  }
  m_busyFcn = 0;
    8b3e:	str.w	r0, [r8]
  return false;  // Caller will set errorCode.
}
    8b42:	mov	r0, r4
    8b44:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
static bool yieldTimeout(bool (*fcn)()) {
  m_busyFcn = fcn;
  uint32_t m = micros();
  while (fcn()) {
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
      m_busyFcn = 0;
    8b48:	movs	r3, #0
    8b4a:	str.w	r3, [r8]
    }
    SysCall::yield();
  }
  m_busyFcn = 0;
  return false;  // Caller will set errorCode.
}
    8b4e:	mov	r0, r4
    8b50:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8b54:	.word	0x000f4240
    8b58:	.word	0x1fff8740

00008b5c <SdioCard::~SdioCard()>:
    8b5c:	push	{r4, lr}
    8b5e:	movs	r1, #12
    8b60:	mov	r4, r0
    8b62:	bl	b344 <operator delete(void*, unsigned int)>
    8b66:	mov	r0, r4
    8b68:	pop	{r4, pc}
    8b6a:	nop

00008b6c <SdioCard::type() const>:
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdioCard::type() const {
  return  m_version2 ? m_highCapacity ?
          SD_CARD_TYPE_SDHC : SD_CARD_TYPE_SD2 : SD_CARD_TYPE_SD1;
    8b6c:	ldr	r3, [pc, #20]	; (8b84 <SdioCard::type() const+0x18>)
    8b6e:	ldrb	r3, [r3, #0]
    8b70:	cbz	r3, 8b80 <SdioCard::type() const+0x14>
    8b72:	ldr	r3, [pc, #20]	; (8b88 <SdioCard::type() const+0x1c>)
    8b74:	ldrb	r3, [r3, #0]
    8b76:	cmp	r3, #0
    8b78:	ite	ne
    8b7a:	movne	r0, #3
    8b7c:	moveq	r0, #2
    8b7e:	bx	lr
    8b80:	movs	r0, #1
}
    8b82:	bx	lr
    8b84:	.word	0x1fff872c
    8b88:	.word	0x1fff8744

00008b8c <cardCommand(unsigned long, unsigned long)>:
// Static functions.
static bool cardAcmd(uint32_t rca, uint32_t xfertyp, uint32_t arg) {
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
}
//------------------------------------------------------------------------------
static bool cardCommand(uint32_t xfertyp, uint32_t arg) {
    8b8c:	push	{r3, r4, r5, lr}
    8b8e:	mov	r4, r0
  DBG_IRQSTAT();
  if (waitTimeout(isBusyCommandInhibit)) {
    8b90:	ldr	r0, [pc, #60]	; (8bd0 <cardCommand(unsigned long, unsigned long)+0x44>)
// Static functions.
static bool cardAcmd(uint32_t rca, uint32_t xfertyp, uint32_t arg) {
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
}
//------------------------------------------------------------------------------
static bool cardCommand(uint32_t xfertyp, uint32_t arg) {
    8b92:	mov	r5, r1
  DBG_IRQSTAT();
  if (waitTimeout(isBusyCommandInhibit)) {
    8b94:	bl	8ae8 <waitTimeout(bool (*)())>
    8b98:	cbz	r0, 8b9e <cardCommand(unsigned long, unsigned long)+0x12>
    return false;  // Caller will set errorCode.
  }
  m_irqstat = SDHC_IRQSTAT;
  SDHC_IRQSTAT = m_irqstat;

  return (m_irqstat & SDHC_IRQSTAT_CC) &&
    8b9a:	movs	r0, #0
    8b9c:	pop	{r3, r4, r5, pc}
static bool cardCommand(uint32_t xfertyp, uint32_t arg) {
  DBG_IRQSTAT();
  if (waitTimeout(isBusyCommandInhibit)) {
    return false;  // Caller will set errorCode.
  }
  SDHC_CMDARG = arg;
    8b9e:	ldr	r2, [pc, #52]	; (8bd4 <cardCommand(unsigned long, unsigned long)+0x48>)
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_MASK;
    SDHC_MIX_CTRL |= xfertyp & SDHC_MIX_CTRL_MASK;
  }
  xfertyp &= ~SDHC_MIX_CTRL_MASK;
#endif  // defined(__IMXRT1062__)
  SDHC_XFERTYP = xfertyp;
    8ba0:	ldr	r3, [pc, #52]	; (8bd8 <cardCommand(unsigned long, unsigned long)+0x4c>)
static bool cardCommand(uint32_t xfertyp, uint32_t arg) {
  DBG_IRQSTAT();
  if (waitTimeout(isBusyCommandInhibit)) {
    return false;  // Caller will set errorCode.
  }
  SDHC_CMDARG = arg;
    8ba2:	str	r5, [r2, #0]
    SDHC_MIX_CTRL |= xfertyp & SDHC_MIX_CTRL_MASK;
  }
  xfertyp &= ~SDHC_MIX_CTRL_MASK;
#endif  // defined(__IMXRT1062__)
  SDHC_XFERTYP = xfertyp;
  if (waitTimeout(isBusyCommandComplete)) {
    8ba4:	ldr	r0, [pc, #52]	; (8bdc <cardCommand(unsigned long, unsigned long)+0x50>)
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_MASK;
    SDHC_MIX_CTRL |= xfertyp & SDHC_MIX_CTRL_MASK;
  }
  xfertyp &= ~SDHC_MIX_CTRL_MASK;
#endif  // defined(__IMXRT1062__)
  SDHC_XFERTYP = xfertyp;
    8ba6:	str	r4, [r3, #0]
  if (waitTimeout(isBusyCommandComplete)) {
    8ba8:	bl	8ae8 <waitTimeout(bool (*)())>
    8bac:	cmp	r0, #0
    8bae:	bne.n	8b9a <cardCommand(unsigned long, unsigned long)+0xe>
    return false;  // Caller will set errorCode.
  }
  m_irqstat = SDHC_IRQSTAT;
    8bb0:	ldr	r2, [pc, #44]	; (8be0 <cardCommand(unsigned long, unsigned long)+0x54>)
    8bb2:	ldr	r3, [pc, #48]	; (8be4 <cardCommand(unsigned long, unsigned long)+0x58>)
    8bb4:	ldr	r1, [r2, #0]
    8bb6:	str	r1, [r3, #0]
  SDHC_IRQSTAT = m_irqstat;
    8bb8:	ldr	r1, [r3, #0]
    8bba:	str	r1, [r2, #0]

  return (m_irqstat & SDHC_IRQSTAT_CC) &&
    8bbc:	ldr	r2, [r3, #0]
    8bbe:	lsls	r2, r2, #31
    8bc0:	bpl.n	8b9a <cardCommand(unsigned long, unsigned long)+0xe>
         !(m_irqstat & SDHC_IRQSTAT_CMD_ERROR);
    8bc2:	ldr	r3, [r3, #0]
    return false;  // Caller will set errorCode.
  }
  m_irqstat = SDHC_IRQSTAT;
  SDHC_IRQSTAT = m_irqstat;

  return (m_irqstat & SDHC_IRQSTAT_CC) &&
    8bc4:	tst.w	r3, #983040	; 0xf0000
    8bc8:	bne.n	8b9a <cardCommand(unsigned long, unsigned long)+0xe>
    8bca:	movs	r0, #1
         !(m_irqstat & SDHC_IRQSTAT_CMD_ERROR);
}
    8bcc:	pop	{r3, r4, r5, pc}
    8bce:	nop
    8bd0:	.word	0x0000895d
    8bd4:	.word	0x400b1008
    8bd8:	.word	0x400b100c
    8bdc:	.word	0x00008945
    8be0:	.word	0x400b1030
    8be4:	.word	0x1fff8750

00008be8 <SdioCard::status()>:
//------------------------------------------------------------------------------
uint32_t SdioCard::sectorCount() {
  return sdCardCapacity(&m_csd);
}
//------------------------------------------------------------------------------
uint32_t SdioCard::status() {
    8be8:	push	{r3, lr}
  while (SDHC_SYSCTL & SDHC_SYSCTL_INITA) {
  }
}
//------------------------------------------------------------------------------
static uint32_t statusCMD13() {
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    8bea:	ldr	r3, [pc, #16]	; (8bfc <SdioCard::status()+0x14>)
    8bec:	ldr	r0, [pc, #16]	; (8c00 <SdioCard::status()+0x18>)
    8bee:	ldr	r1, [r3, #0]
    8bf0:	bl	8b8c <cardCommand(unsigned long, unsigned long)>
    8bf4:	cbz	r0, 8bfa <SdioCard::status()+0x12>
    8bf6:	ldr	r3, [pc, #12]	; (8c04 <SdioCard::status()+0x1c>)
    8bf8:	ldr	r0, [r3, #0]
  return sdCardCapacity(&m_csd);
}
//------------------------------------------------------------------------------
uint32_t SdioCard::status() {
  return statusCMD13();
}
    8bfa:	pop	{r3, pc}
    8bfc:	.word	0x1fff874c
    8c00:	.word	0x0d1a0000
    8c04:	.word	0x400b1010

00008c08 <readReg16(unsigned long, void*)>:
  }
  return waitDmaStatus();
}
//------------------------------------------------------------------------------
// Read 16 byte CID or CSD register.
static bool readReg16(uint32_t xfertyp, void* data) {
    8c08:	push	{r4, r5, lr}
  uint8_t* d = reinterpret_cast<uint8_t*>(data);
  if (!cardCommand(xfertyp, m_rca)) {
    8c0a:	ldr	r3, [pc, #84]	; (8c60 <readReg16(unsigned long, void*)+0x58>)
  }
  return waitDmaStatus();
}
//------------------------------------------------------------------------------
// Read 16 byte CID or CSD register.
static bool readReg16(uint32_t xfertyp, void* data) {
    8c0c:	sub	sp, #20
    8c0e:	mov	r5, r1
  uint8_t* d = reinterpret_cast<uint8_t*>(data);
  if (!cardCommand(xfertyp, m_rca)) {
    8c10:	ldr	r1, [r3, #0]
    8c12:	bl	8b8c <cardCommand(unsigned long, unsigned long)>
    8c16:	cbz	r0, 8c5a <readReg16(unsigned long, void*)+0x52>
    return false;  // Caller will set errorCode.
  }
  uint32_t sr[] = {SDHC_CMDRSP0, SDHC_CMDRSP1, SDHC_CMDRSP2, SDHC_CMDRSP3};
    8c18:	ldr	r2, [pc, #72]	; (8c64 <readReg16(unsigned long, void*)+0x5c>)
    8c1a:	ldr	r3, [pc, #76]	; (8c68 <readReg16(unsigned long, void*)+0x60>)
    8c1c:	ldr	r2, [r2, #0]
    8c1e:	str	r2, [sp, #0]
    8c20:	ldr	r1, [r3, #0]
    8c22:	str	r1, [sp, #4]
    8c24:	ldr	r1, [r3, #4]
    8c26:	str	r1, [sp, #8]
    8c28:	adds	r3, #8
    8c2a:	add.w	r4, r5, #15
    8c2e:	ldr	r3, [r3, #0]
    8c30:	str	r3, [sp, #12]
  for (int i = 0; i < 15; i++) {
    8c32:	movs	r3, #0
    8c34:	b.n	8c3a <readReg16(unsigned long, void*)+0x32>
    8c36:	ldr.w	r2, [r1, #-16]
    d[14 - i] = sr[i/4] >> 8*(i%4);
    8c3a:	and.w	r1, r3, #3
    8c3e:	lsls	r1, r1, #3
  uint8_t* d = reinterpret_cast<uint8_t*>(data);
  if (!cardCommand(xfertyp, m_rca)) {
    return false;  // Caller will set errorCode.
  }
  uint32_t sr[] = {SDHC_CMDRSP0, SDHC_CMDRSP1, SDHC_CMDRSP2, SDHC_CMDRSP3};
  for (int i = 0; i < 15; i++) {
    8c40:	adds	r3, #1
    d[14 - i] = sr[i/4] >> 8*(i%4);
    8c42:	lsrs	r2, r1
    8c44:	add.w	lr, sp, #16
    8c48:	bic.w	r1, r3, #3
  uint8_t* d = reinterpret_cast<uint8_t*>(data);
  if (!cardCommand(xfertyp, m_rca)) {
    return false;  // Caller will set errorCode.
  }
  uint32_t sr[] = {SDHC_CMDRSP0, SDHC_CMDRSP1, SDHC_CMDRSP2, SDHC_CMDRSP3};
  for (int i = 0; i < 15; i++) {
    8c4c:	cmp	r3, #15
    8c4e:	add	r1, lr
    d[14 - i] = sr[i/4] >> 8*(i%4);
    8c50:	strb.w	r2, [r4, #-1]!
  uint8_t* d = reinterpret_cast<uint8_t*>(data);
  if (!cardCommand(xfertyp, m_rca)) {
    return false;  // Caller will set errorCode.
  }
  uint32_t sr[] = {SDHC_CMDRSP0, SDHC_CMDRSP1, SDHC_CMDRSP2, SDHC_CMDRSP3};
  for (int i = 0; i < 15; i++) {
    8c54:	bne.n	8c36 <readReg16(unsigned long, void*)+0x2e>
    d[14 - i] = sr[i/4] >> 8*(i%4);
  }
  d[15] = 0;
    8c56:	movs	r3, #0
    8c58:	strb	r3, [r5, #15]
  return true;
}
    8c5a:	add	sp, #20
    8c5c:	pop	{r4, r5, pc}
    8c5e:	nop
    8c60:	.word	0x1fff874c
    8c64:	.word	0x400b1010
    8c68:	.word	0x400b1014

00008c6c <isBusyCMD13()>:
//------------------------------------------------------------------------------
static uint32_t statusCMD13() {
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
}
//------------------------------------------------------------------------------
static bool isBusyCMD13() {
    8c6c:	push	{r3, lr}
  if (!cardCommand(CMD13_XFERTYP, m_rca)) {
    8c6e:	ldr	r3, [pc, #28]	; (8c8c <isBusyCMD13()+0x20>)
    8c70:	ldr	r0, [pc, #28]	; (8c90 <isBusyCMD13()+0x24>)
    8c72:	ldr	r1, [r3, #0]
    8c74:	bl	8b8c <cardCommand(unsigned long, unsigned long)>
    8c78:	cbz	r0, 8c88 <isBusyCMD13()+0x1c>
    // Caller will timeout.
    return true;
  }
  return !(SDHC_CMDRSP0 & CARD_STATUS_READY_FOR_DATA);
    8c7a:	ldr	r3, [pc, #24]	; (8c94 <isBusyCMD13()+0x28>)
    8c7c:	ldr	r0, [r3, #0]
    8c7e:	eor.w	r0, r0, #256	; 0x100
    8c82:	ubfx	r0, r0, #8, #1
    8c86:	pop	{r3, pc}
}
//------------------------------------------------------------------------------
static bool isBusyCMD13() {
  if (!cardCommand(CMD13_XFERTYP, m_rca)) {
    // Caller will timeout.
    return true;
    8c88:	movs	r0, #1
  }
  return !(SDHC_CMDRSP0 & CARD_STATUS_READY_FOR_DATA);
}
    8c8a:	pop	{r3, pc}
    8c8c:	.word	0x1fff874c
    8c90:	.word	0x0d1a0000
    8c94:	.word	0x400b1010

00008c98 <SdioCard::isBusy()>:
uint32_t SdioCard::errorLine() const {
  return m_errorLine;
}
//------------------------------------------------------------------------------
bool SdioCard::isBusy() {
  return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
    8c98:	ldr	r3, [pc, #16]	; (8cac <SdioCard::isBusy()+0x14>)
    8c9a:	ldr	r3, [r3, #0]
    8c9c:	cbz	r3, 8ca0 <SdioCard::isBusy()+0x8>
    8c9e:	bx	r3
    8ca0:	ldr	r3, [pc, #12]	; (8cb0 <SdioCard::isBusy()+0x18>)
    8ca2:	ldrb	r0, [r3, #0]
    8ca4:	cbnz	r0, 8ca8 <SdioCard::isBusy()+0x10>
}
    8ca6:	bx	lr
uint32_t SdioCard::errorLine() const {
  return m_errorLine;
}
//------------------------------------------------------------------------------
bool SdioCard::isBusy() {
  return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
    8ca8:	b.w	8c6c <isBusyCMD13()>
    8cac:	.word	0x1fff8740
    8cb0:	.word	0x1fff8754

00008cb4 <waitDmaStatus() [clone .part.6]>:
//------------------------------------------------------------------------------
static bool waitDmaStatus() {
  if (yieldTimeout(isBusyDMA)) {
    return false;  // Caller will set errorCode.
  }
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    8cb4:	ldr	r3, [pc, #20]	; (8ccc <waitDmaStatus() [clone .part.6]+0x18>)
    8cb6:	ldr	r0, [r3, #0]
    8cb8:	ands.w	r0, r0, #2
    8cbc:	beq.n	8cca <waitDmaStatus() [clone .part.6]+0x16>
    8cbe:	ldr	r3, [r3, #0]
    8cc0:	ldr	r0, [pc, #12]	; (8cd0 <waitDmaStatus() [clone .part.6]+0x1c>)
    8cc2:	ands	r0, r3
    8cc4:	clz	r0, r0
    8cc8:	lsrs	r0, r0, #5
}
    8cca:	bx	lr
    8ccc:	.word	0x1fff8750
    8cd0:	.word	0x117f0000

00008cd4 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>:
static bool isBusyTransferComplete() {
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
}
//------------------------------------------------------------------------------
static bool rdWrSectors(uint32_t xfertyp,
                       uint32_t sector, uint8_t* buf, size_t n) {
    8cd4:	push	{r3, r4, r5, r6, r7, lr}
  if ((3 & (uint32_t)buf) || n == 0) {
    8cd6:	lsls	r4, r2, #30
    8cd8:	bne.n	8cdc <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x8>
    8cda:	cbnz	r3, 8cee <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x1a>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8cdc:	ldr	r1, [pc, #124]	; (8d5c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x88>)
  m_errorLine = line;
    8cde:	ldr	r3, [pc, #128]	; (8d60 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x8c>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8ce0:	movs	r0, #36	; 0x24
  m_errorLine = line;
    8ce2:	mov.w	r2, #470	; 0x1d6
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8ce6:	strb	r0, [r1, #0]
  m_errorLine = line;
    8ce8:	str	r2, [r3, #0]
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512*sector)) {
    return false;
  }
  return waitDmaStatus();
}
    8cea:	movs	r0, #0
    8cec:	pop	{r3, r4, r5, r6, r7, pc}
    8cee:	mov	r6, r0
static bool rdWrSectors(uint32_t xfertyp,
                       uint32_t sector, uint8_t* buf, size_t n) {
  if ((3 & (uint32_t)buf) || n == 0) {
    return sdError(SD_CARD_ERROR_DMA);
  }
  if (yieldTimeout(isBusyCMD13)) {
    8cf0:	ldr	r0, [pc, #112]	; (8d64 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x90>)
    8cf2:	mov	r4, r3
    8cf4:	mov	r7, r1
    8cf6:	mov	r5, r2
    8cf8:	bl	8b10 <yieldTimeout(bool (*)())>
    8cfc:	cbnz	r0, 8d46 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x72>
  return true;
}
//------------------------------------------------------------------------------
static void enableDmaIrs() {
  m_dmaBusy = true;
  m_irqstat = 0;
    8cfe:	ldr	r1, [pc, #104]	; (8d68 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x94>)
  }
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)buf;
    8d00:	ldr	r2, [pc, #104]	; (8d6c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x98>)
  }
  return true;
}
//------------------------------------------------------------------------------
static void enableDmaIrs() {
  m_dmaBusy = true;
    8d02:	ldr.w	lr, [pc, #128]	; 8d84 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xb0>
    8d06:	mov.w	ip, #1
    8d0a:	strb.w	ip, [lr]
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)buf;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    8d0e:	lsls	r3, r4, #16
  return true;
}
//------------------------------------------------------------------------------
static void enableDmaIrs() {
  m_dmaBusy = true;
  m_irqstat = 0;
    8d10:	str	r0, [r1, #0]
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)buf;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    8d12:	ldr	r4, [pc, #92]	; (8d70 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x9c>)
  }
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)buf;
    8d14:	str	r5, [r2, #0]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512*sector)) {
    8d16:	ldr	r2, [pc, #92]	; (8d74 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xa0>)
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)buf;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    8d18:	ldr	r1, [pc, #92]	; (8d78 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xa4>)
    8d1a:	ldr	r0, [pc, #96]	; (8d7c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xa8>)
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)buf;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    8d1c:	orr.w	r3, r3, #512	; 0x200
    8d20:	str	r3, [r4, #0]
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512*sector)) {
    8d22:	ldrb	r3, [r2, #0]
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)buf;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    8d24:	str	r0, [r1, #0]
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512*sector)) {
    8d26:	cbnz	r3, 8d56 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x82>
    8d28:	lsls	r1, r7, #9
    8d2a:	mov	r0, r6
    8d2c:	bl	8b8c <cardCommand(unsigned long, unsigned long)>
    8d30:	cmp	r0, #0
    8d32:	beq.n	8cea <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x16>
  m_busyFcn = 0;
  return false;  // Caller will set errorCode.
}
//------------------------------------------------------------------------------
static bool waitDmaStatus() {
  if (yieldTimeout(isBusyDMA)) {
    8d34:	ldr	r0, [pc, #72]	; (8d80 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xac>)
    8d36:	bl	8b10 <yieldTimeout(bool (*)())>
    8d3a:	cmp	r0, #0
    8d3c:	bne.n	8cea <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x16>
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512*sector)) {
    return false;
  }
  return waitDmaStatus();
}
    8d3e:	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    8d42:	b.w	8cb4 <waitDmaStatus() [clone .part.6]>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8d46:	ldr	r1, [pc, #20]	; (8d5c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x88>)
  m_errorLine = line;
    8d48:	ldr	r3, [pc, #20]	; (8d60 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x8c>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8d4a:	movs	r0, #10
  m_errorLine = line;
    8d4c:	movw	r2, #473	; 0x1d9
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8d50:	strb	r0, [r1, #0]
  m_errorLine = line;
    8d52:	str	r2, [r3, #0]
                       uint32_t sector, uint8_t* buf, size_t n) {
  if ((3 & (uint32_t)buf) || n == 0) {
    return sdError(SD_CARD_ERROR_DMA);
  }
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
    8d54:	b.n	8cea <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x16>
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)buf;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512*sector)) {
    8d56:	mov	r1, r7
    8d58:	b.n	8d2a <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x56>
    8d5a:	nop
    8d5c:	.word	0x1fff0994
    8d60:	.word	0x1fff8770
    8d64:	.word	0x00008c6d
    8d68:	.word	0x1fff8750
    8d6c:	.word	0x400b1000
    8d70:	.word	0x400b1004
    8d74:	.word	0x1fff8744
    8d78:	.word	0x400b1038
    8d7c:	.word	0x117f0002
    8d80:	.word	0x0000896d
    8d84:	.word	0x1fff8768

00008d88 <SdioCard::sectorCount()>:
//------------------------------------------------------------------------------
bool SdioCard::readStop() {
  return transferStop();
}
//------------------------------------------------------------------------------
uint32_t SdioCard::sectorCount() {
    8d88:	push	{r4, r5, r6}
  csd1_t v1;
  csd2_t v2;
};
//-----------------------------------------------------------------------------
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    8d8a:	ldr	r1, [pc, #100]	; (8df0 <SdioCard::sectorCount()+0x68>)
    8d8c:	ldrb	r3, [r1, #0]
    8d8e:	ands.w	r3, r3, #192	; 0xc0
    8d92:	beq.n	8db8 <SdioCard::sectorCount()+0x30>
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
  } else if (csd->v2.csd_ver == 1) {
    8d94:	cmp	r3, #64	; 0x40
    8d96:	beq.n	8d9e <SdioCard::sectorCount()+0x16>
    return (((uint32_t)csd->v2.c_size_high << 16) +
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
  } else {
    return 0;
    8d98:	movs	r0, #0
  return sdCardCapacity(&m_csd);
}
    8d9a:	pop	{r4, r5, r6}
    8d9c:	bx	lr
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
  } else if (csd->v2.csd_ver == 1) {
    return (((uint32_t)csd->v2.c_size_high << 16) +
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    8d9e:	ldrb	r3, [r1, #9]
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
  } else if (csd->v2.csd_ver == 1) {
    return (((uint32_t)csd->v2.c_size_high << 16) +
    8da0:	ldrb	r4, [r1, #7]
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    8da2:	ldrb	r0, [r1, #8]
    8da4:	adds	r2, r3, #1
    8da6:	and.w	r3, r4, #63	; 0x3f
    8daa:	add.w	r3, r2, r3, lsl #16
    8dae:	add.w	r0, r3, r0, lsl #8
    8db2:	lsls	r0, r0, #10
    8db4:	pop	{r4, r5, r6}
    8db6:	bx	lr
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    uint8_t read_bl_len = csd->v1.read_bl_len;
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
    8db8:	ldrb	r5, [r1, #9]
};
//-----------------------------------------------------------------------------
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    uint8_t read_bl_len = csd->v1.read_bl_len;
    uint16_t c_size = (csd->v1.c_size_high << 10)
    8dba:	ldrb	r3, [r1, #6]
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    8dbc:	ldrb	r2, [r1, #7]
  csd2_t v2;
};
//-----------------------------------------------------------------------------
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    uint8_t read_bl_len = csd->v1.read_bl_len;
    8dbe:	ldrb	r4, [r1, #5]
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    8dc0:	ldrb	r6, [r1, #8]
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    8dc2:	ldrb	r0, [r1, #10]
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    8dc4:	and.w	r1, r5, #3
    8dc8:	lsls	r1, r1, #1
    8dca:	and.w	r3, r3, #3
    8dce:	lsls	r2, r2, #2
    8dd0:	orr.w	r0, r1, r0, lsr #7
    8dd4:	orr.w	r3, r2, r3, lsl #10
    8dd8:	and.w	r1, r4, #15
    8ddc:	orr.w	r3, r3, r6, lsr #6
    8de0:	add	r0, r1
    8de2:	subs	r0, #7
    8de4:	adds	r3, #1
    8de6:	lsl.w	r0, r3, r0
    8dea:	pop	{r4, r5, r6}
    8dec:	bx	lr
    8dee:	nop
    8df0:	.word	0x1fff8758

00008df4 <SdioCard::erase(unsigned long, unsigned long)>:
  enableGPIO(true);
  m_initDone = true;
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::erase(uint32_t firstSector, uint32_t lastSector) {
    8df4:	push	{r4, r5, r6, lr}
  // check for single sector erase
  if (!m_csd.v1.erase_blk_en) {
    8df6:	ldr	r6, [pc, #176]	; (8ea8 <SdioCard::erase(unsigned long, unsigned long)+0xb4>)
    8df8:	ldrb	r3, [r6, #10]
    8dfa:	and.w	r0, r3, #64	; 0x40
  enableGPIO(true);
  m_initDone = true;
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::erase(uint32_t firstSector, uint32_t lastSector) {
    8dfe:	mov	r5, r2
  // check for single sector erase
  if (!m_csd.v1.erase_blk_en) {
    8e00:	cbnz	r0, 8e1a <SdioCard::erase(unsigned long, unsigned long)+0x26>
    // erase size mask
    uint8_t m = (m_csd.v1.sector_size_high << 1) | m_csd.v1.sector_size_low;
    if ((firstSector & m) != 0 || ((lastSector + 1) & m) != 0) {
    8e02:	and.w	r3, r3, #63	; 0x3f
//------------------------------------------------------------------------------
bool SdioCard::erase(uint32_t firstSector, uint32_t lastSector) {
  // check for single sector erase
  if (!m_csd.v1.erase_blk_en) {
    // erase size mask
    uint8_t m = (m_csd.v1.sector_size_high << 1) | m_csd.v1.sector_size_low;
    8e06:	ldrb	r2, [r6, #11]
    8e08:	and.w	r4, r0, #255	; 0xff
    if ((firstSector & m) != 0 || ((lastSector + 1) & m) != 0) {
    8e0c:	lsls	r3, r3, #1
    8e0e:	adds	r0, r5, #1
    8e10:	orr.w	r3, r3, r2, lsr #7
    8e14:	orrs	r0, r1
    8e16:	tst	r3, r0
    8e18:	bne.n	8e5e <SdioCard::erase(unsigned long, unsigned long)+0x6a>
      // error card can't erase specified area
      return sdError(SD_CARD_ERROR_ERASE_SINGLE_SECTOR);
    }
  }
  if (!m_highCapacity) {
    8e1a:	ldr	r3, [pc, #144]	; (8eac <SdioCard::erase(unsigned long, unsigned long)+0xb8>)
    8e1c:	ldrb	r3, [r3, #0]
    8e1e:	cbnz	r3, 8e24 <SdioCard::erase(unsigned long, unsigned long)+0x30>
    firstSector <<= 9;
    8e20:	lsls	r1, r1, #9
    lastSector <<= 9;
    8e22:	lsls	r5, r5, #9
  }
  if (!cardCommand(CMD32_XFERTYP, firstSector)) {
    8e24:	ldr	r0, [pc, #136]	; (8eb0 <SdioCard::erase(unsigned long, unsigned long)+0xbc>)
    8e26:	bl	8b8c <cardCommand(unsigned long, unsigned long)>
    8e2a:	mov	r4, r0
    8e2c:	cbnz	r0, 8e40 <SdioCard::erase(unsigned long, unsigned long)+0x4c>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8e2e:	ldr	r1, [pc, #132]	; (8eb4 <SdioCard::erase(unsigned long, unsigned long)+0xc0>)
  m_errorLine = line;
    8e30:	ldr	r3, [pc, #132]	; (8eb8 <SdioCard::erase(unsigned long, unsigned long)+0xc4>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8e32:	movs	r0, #15
  m_errorLine = line;
    8e34:	mov.w	r2, #692	; 0x2b4
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8e38:	strb	r0, [r1, #0]
  m_errorLine = line;
    8e3a:	str	r2, [r3, #0]
  }
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_ERASE_TIMEOUT);
  }
  return true;
}
    8e3c:	mov	r0, r4
    8e3e:	pop	{r4, r5, r6, pc}
    lastSector <<= 9;
  }
  if (!cardCommand(CMD32_XFERTYP, firstSector)) {
    return sdError(SD_CARD_ERROR_CMD32);
  }
  if (!cardCommand(CMD33_XFERTYP, lastSector)) {
    8e40:	mov	r1, r5
    8e42:	ldr	r0, [pc, #120]	; (8ebc <SdioCard::erase(unsigned long, unsigned long)+0xc8>)
    8e44:	bl	8b8c <cardCommand(unsigned long, unsigned long)>
    8e48:	mov	r4, r0
    8e4a:	cbnz	r0, 8e70 <SdioCard::erase(unsigned long, unsigned long)+0x7c>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8e4c:	ldr	r1, [pc, #100]	; (8eb4 <SdioCard::erase(unsigned long, unsigned long)+0xc0>)
  m_errorLine = line;
    8e4e:	ldr	r3, [pc, #104]	; (8eb8 <SdioCard::erase(unsigned long, unsigned long)+0xc4>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8e50:	movs	r0, #16
  m_errorLine = line;
    8e52:	movw	r2, #695	; 0x2b7
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8e56:	strb	r0, [r1, #0]
  m_errorLine = line;
    8e58:	str	r2, [r3, #0]
  }
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_ERASE_TIMEOUT);
  }
  return true;
}
    8e5a:	mov	r0, r4
    8e5c:	pop	{r4, r5, r6, pc}
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8e5e:	ldr	r1, [pc, #84]	; (8eb4 <SdioCard::erase(unsigned long, unsigned long)+0xc0>)
  m_errorLine = line;
    8e60:	ldr	r3, [pc, #84]	; (8eb8 <SdioCard::erase(unsigned long, unsigned long)+0xc4>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8e62:	movs	r0, #38	; 0x26
  m_errorLine = line;
    8e64:	mov.w	r2, #684	; 0x2ac
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8e68:	strb	r0, [r1, #0]
  m_errorLine = line;
    8e6a:	str	r2, [r3, #0]
  }
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_ERASE_TIMEOUT);
  }
  return true;
}
    8e6c:	mov	r0, r4
    8e6e:	pop	{r4, r5, r6, pc}
    return sdError(SD_CARD_ERROR_CMD32);
  }
  if (!cardCommand(CMD33_XFERTYP, lastSector)) {
     return sdError(SD_CARD_ERROR_CMD33);
  }
  if (!cardCommand(CMD38_XFERTYP, 0)) {
    8e70:	movs	r1, #0
    8e72:	ldr	r0, [pc, #76]	; (8ec0 <SdioCard::erase(unsigned long, unsigned long)+0xcc>)
    8e74:	bl	8b8c <cardCommand(unsigned long, unsigned long)>
    8e78:	mov	r4, r0
    8e7a:	cbnz	r0, 8e8c <SdioCard::erase(unsigned long, unsigned long)+0x98>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8e7c:	ldr	r1, [pc, #52]	; (8eb4 <SdioCard::erase(unsigned long, unsigned long)+0xc0>)
  m_errorLine = line;
    8e7e:	ldr	r3, [pc, #56]	; (8eb8 <SdioCard::erase(unsigned long, unsigned long)+0xc4>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8e80:	movs	r0, #17
  m_errorLine = line;
    8e82:	movw	r2, #698	; 0x2ba
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8e86:	strb	r0, [r1, #0]
  m_errorLine = line;
    8e88:	str	r2, [r3, #0]
    8e8a:	b.n	8e3c <SdioCard::erase(unsigned long, unsigned long)+0x48>
     return sdError(SD_CARD_ERROR_CMD33);
  }
  if (!cardCommand(CMD38_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD38);
  }
  if (waitTimeout(isBusyCMD13)) {
    8e8c:	ldr	r0, [pc, #52]	; (8ec4 <SdioCard::erase(unsigned long, unsigned long)+0xd0>)
    8e8e:	bl	8ae8 <waitTimeout(bool (*)())>
    8e92:	cmp	r0, #0
    8e94:	beq.n	8e3c <SdioCard::erase(unsigned long, unsigned long)+0x48>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8e96:	ldr	r1, [pc, #28]	; (8eb4 <SdioCard::erase(unsigned long, unsigned long)+0xc0>)
  m_errorLine = line;
    8e98:	ldr	r3, [pc, #28]	; (8eb8 <SdioCard::erase(unsigned long, unsigned long)+0xc4>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8e9a:	movs	r0, #39	; 0x27
  m_errorLine = line;
    8e9c:	movw	r2, #701	; 0x2bd
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8ea0:	strb	r0, [r1, #0]
  m_errorLine = line;
    8ea2:	str	r2, [r3, #0]
  }
  if (!cardCommand(CMD38_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD38);
  }
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_ERASE_TIMEOUT);
    8ea4:	movs	r4, #0
    8ea6:	b.n	8e3c <SdioCard::erase(unsigned long, unsigned long)+0x48>
    8ea8:	.word	0x1fff8758
    8eac:	.word	0x1fff8744
    8eb0:	.word	0x201a0000
    8eb4:	.word	0x1fff0994
    8eb8:	.word	0x1fff8770
    8ebc:	.word	0x211a0000
    8ec0:	.word	0x261b0000
    8ec4:	.word	0x00008c6d

00008ec8 <transferStop()>:
  // Enable the SDHC clock.
  SDHC_SYSCTL |= SDHC_SYSCTL_SDCLKEN;
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
}
//------------------------------------------------------------------------------
static bool transferStop() {
    8ec8:	push	{r4, r5, r6, lr}
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    8eca:	movs	r1, #0
    8ecc:	ldr	r0, [pc, #84]	; (8f24 <transferStop()+0x5c>)
    8ece:	bl	8b8c <cardCommand(unsigned long, unsigned long)>
    8ed2:	mov	r4, r0
    8ed4:	cbnz	r0, 8ee8 <transferStop()+0x20>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8ed6:	ldr	r1, [pc, #80]	; (8f28 <transferStop()+0x60>)
  m_errorLine = line;
    8ed8:	ldr	r3, [pc, #80]	; (8f2c <transferStop()+0x64>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8eda:	movs	r0, #9
  m_errorLine = line;
    8edc:	mov.w	r2, #540	; 0x21c
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8ee0:	strb	r0, [r1, #0]
  m_errorLine = line;
    8ee2:	str	r2, [r3, #0]
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTD;
  // Restore registers.
  SDHC_IRQSTATEN = irqsststen;
  SDHC_PROCTL = proctl;
  return true;
}
    8ee4:	mov	r0, r4
    8ee6:	pop	{r4, r5, r6, pc}
//------------------------------------------------------------------------------
static bool transferStop() {
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD12);
  }
  if (yieldTimeout(isBusyCMD13)) {
    8ee8:	ldr	r0, [pc, #68]	; (8f30 <transferStop()+0x68>)
    8eea:	bl	8b10 <yieldTimeout(bool (*)())>
    8eee:	cbnz	r0, 8f0e <transferStop()+0x46>
    return sdError(SD_CARD_ERROR_CMD13);
  }
  // Save registers before reset DAT lines.
  uint32_t irqsststen = SDHC_IRQSTATEN;
    8ef0:	ldr	r0, [pc, #64]	; (8f34 <transferStop()+0x6c>)
  uint32_t proctl = SDHC_PROCTL & ~SDHC_PROCTL_SABGREQ;
    8ef2:	ldr	r1, [pc, #68]	; (8f38 <transferStop()+0x70>)
  // Do reset to clear CDIHB.  Should be a better way!
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTD;
    8ef4:	ldr	r5, [pc, #68]	; (8f3c <transferStop()+0x74>)
  }
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  // Save registers before reset DAT lines.
  uint32_t irqsststen = SDHC_IRQSTATEN;
    8ef6:	ldr	r6, [r0, #0]
  uint32_t proctl = SDHC_PROCTL & ~SDHC_PROCTL_SABGREQ;
    8ef8:	ldr	r3, [r1, #0]
  // Do reset to clear CDIHB.  Should be a better way!
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTD;
    8efa:	ldr	r2, [r5, #0]
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  // Save registers before reset DAT lines.
  uint32_t irqsststen = SDHC_IRQSTATEN;
  uint32_t proctl = SDHC_PROCTL & ~SDHC_PROCTL_SABGREQ;
    8efc:	bic.w	r3, r3, #65536	; 0x10000
  // Do reset to clear CDIHB.  Should be a better way!
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTD;
    8f00:	orr.w	r2, r2, #67108864	; 0x4000000
    8f04:	str	r2, [r5, #0]
  // Restore registers.
  SDHC_IRQSTATEN = irqsststen;
    8f06:	str	r6, [r0, #0]
  SDHC_PROCTL = proctl;
    8f08:	str	r3, [r1, #0]
  return true;
}
    8f0a:	mov	r0, r4
    8f0c:	pop	{r4, r5, r6, pc}
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8f0e:	ldr	r1, [pc, #24]	; (8f28 <transferStop()+0x60>)
  m_errorLine = line;
    8f10:	ldr	r3, [pc, #24]	; (8f2c <transferStop()+0x64>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8f12:	movs	r0, #10
  m_errorLine = line;
    8f14:	movw	r2, #543	; 0x21f
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8f18:	strb	r0, [r1, #0]
static bool transferStop() {
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD12);
  }
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
    8f1a:	movs	r4, #0
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    8f1c:	str	r2, [r3, #0]
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTD;
  // Restore registers.
  SDHC_IRQSTATEN = irqsststen;
  SDHC_PROCTL = proctl;
  return true;
}
    8f1e:	mov	r0, r4
    8f20:	pop	{r4, r5, r6, pc}
    8f22:	nop
    8f24:	.word	0x0cdb0000
    8f28:	.word	0x1fff0994
    8f2c:	.word	0x1fff8770
    8f30:	.word	0x00008c6d
    8f34:	.word	0x400b1034
    8f38:	.word	0x400b1028
    8f3c:	.word	0x400b102c

00008f40 <SdioCard::readStop()>:
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeStop() {
  return transferStop();
    8f40:	b.w	8ec8 <transferStop()>

00008f44 <SdioCard::writeData(unsigned char const*)>:
uint8_t SdioCard::type() const {
  return  m_version2 ? m_highCapacity ?
          SD_CARD_TYPE_SDHC : SD_CARD_TYPE_SD2 : SD_CARD_TYPE_SD1;
}
//------------------------------------------------------------------------------
bool SdioCard::writeData(const uint8_t* src) {
    8f44:	push	{r3, r4, r5, lr}
  DBG_IRQSTAT();
  const uint32_t* p32 = reinterpret_cast<const uint32_t*>(src);
  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_WTA)) {
    8f46:	ldr	r3, [pc, #160]	; (8fe8 <SdioCard::writeData(unsigned char const*)+0xa4>)
    8f48:	ldr	r3, [r3, #0]
    8f4a:	lsls	r0, r3, #23
uint8_t SdioCard::type() const {
  return  m_version2 ? m_highCapacity ?
          SD_CARD_TYPE_SDHC : SD_CARD_TYPE_SD2 : SD_CARD_TYPE_SD1;
}
//------------------------------------------------------------------------------
bool SdioCard::writeData(const uint8_t* src) {
    8f4c:	mov	r5, r1
  DBG_IRQSTAT();
  const uint32_t* p32 = reinterpret_cast<const uint32_t*>(src);
  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_WTA)) {
    8f4e:	bmi.n	8f62 <SdioCard::writeData(unsigned char const*)+0x1e>
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    8f50:	ldr	r3, [pc, #152]	; (8fec <SdioCard::writeData(unsigned char const*)+0xa8>)
    8f52:	ldr	r2, [r3, #0]
    8f54:	bic.w	r2, r2, #65536	; 0x10000
    8f58:	str	r2, [r3, #0]
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
    8f5a:	ldr	r2, [r3, #0]
    8f5c:	orr.w	r2, r2, #131072	; 0x20000
    8f60:	str	r2, [r3, #0]
  }
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    8f62:	ldr	r2, [pc, #136]	; (8fec <SdioCard::writeData(unsigned char const*)+0xa8>)
  if (waitTimeout(isBusyFifoWrite)) {
    8f64:	ldr	r0, [pc, #136]	; (8ff0 <SdioCard::writeData(unsigned char const*)+0xac>)
  const uint32_t* p32 = reinterpret_cast<const uint32_t*>(src);
  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_WTA)) {
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
  }
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    8f66:	ldr	r3, [r2, #0]
    8f68:	orr.w	r3, r3, #65536	; 0x10000
    8f6c:	str	r3, [r2, #0]
  if (waitTimeout(isBusyFifoWrite)) {
    8f6e:	bl	8ae8 <waitTimeout(bool (*)())>
    8f72:	cmp	r0, #0
    8f74:	bne.n	8fd4 <SdioCard::writeData(unsigned char const*)+0x90>
    return sdError(SD_CARD_ERROR_WRITE_FIFO);
  }
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN)) {
    8f76:	ldr	r4, [pc, #112]	; (8fe8 <SdioCard::writeData(unsigned char const*)+0xa4>)
    }
    for (uint32_t i = 0; i < FIFO_WML; i++) {
      SDHC_DATPORT = p32[i];
    8f78:	ldr	r0, [pc, #120]	; (8ff4 <SdioCard::writeData(unsigned char const*)+0xb0>)
    8f7a:	subs	r3, r5, #4
    8f7c:	add.w	r5, r5, #508	; 0x1fc
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
  if (waitTimeout(isBusyFifoWrite)) {
    return sdError(SD_CARD_ERROR_WRITE_FIFO);
  }
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN)) {
    8f80:	ldr	r2, [r4, #0]
    8f82:	lsls	r1, r2, #21
    8f84:	bpl.n	8f80 <SdioCard::writeData(unsigned char const*)+0x3c>
    8f86:	add.w	r1, r3, #64	; 0x40
    }
    for (uint32_t i = 0; i < FIFO_WML; i++) {
      SDHC_DATPORT = p32[i];
    8f8a:	ldr.w	r2, [r3, #4]!
    8f8e:	str	r2, [r0, #0]
    return sdError(SD_CARD_ERROR_WRITE_FIFO);
  }
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN)) {
    }
    for (uint32_t i = 0; i < FIFO_WML; i++) {
    8f90:	cmp	r1, r3
    8f92:	bne.n	8f8a <SdioCard::writeData(unsigned char const*)+0x46>
  }
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
  if (waitTimeout(isBusyFifoWrite)) {
    return sdError(SD_CARD_ERROR_WRITE_FIFO);
  }
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    8f94:	cmp	r5, r1
    8f96:	mov	r3, r1
    8f98:	bne.n	8f80 <SdioCard::writeData(unsigned char const*)+0x3c>
    for (uint32_t i = 0; i < FIFO_WML; i++) {
      SDHC_DATPORT = p32[i];
    }
    p32 += FIFO_WML;
  }
  if (waitTimeout(isBusyTransferComplete)) {
    8f9a:	ldr	r0, [pc, #92]	; (8ff8 <SdioCard::writeData(unsigned char const*)+0xb4>)
    8f9c:	bl	8ae8 <waitTimeout(bool (*)())>
    8fa0:	cbnz	r0, 8fc2 <SdioCard::writeData(unsigned char const*)+0x7e>
    return sdError(SD_CARD_ERROR_WRITE_TIMEOUT);
  }
  m_irqstat = SDHC_IRQSTAT;
    8fa2:	ldr	r2, [pc, #88]	; (8ffc <SdioCard::writeData(unsigned char const*)+0xb8>)
    8fa4:	ldr	r3, [pc, #88]	; (9000 <SdioCard::writeData(unsigned char const*)+0xbc>)
    8fa6:	ldr	r1, [r2, #0]
    8fa8:	str	r1, [r3, #0]
  SDHC_IRQSTAT = m_irqstat;
    8faa:	ldr	r1, [r3, #0]
    8fac:	str	r1, [r2, #0]
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    8fae:	ldr	r2, [r3, #0]
    8fb0:	lsls	r2, r2, #30
    8fb2:	bpl.n	8fe4 <SdioCard::writeData(unsigned char const*)+0xa0>
    8fb4:	ldr	r3, [r3, #0]
    8fb6:	ldr	r0, [pc, #76]	; (9004 <SdioCard::writeData(unsigned char const*)+0xc0>)
    8fb8:	ands	r0, r3
    8fba:	clz	r0, r0
    8fbe:	lsrs	r0, r0, #5
    8fc0:	pop	{r3, r4, r5, pc}
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8fc2:	ldr	r1, [pc, #68]	; (9008 <SdioCard::writeData(unsigned char const*)+0xc4>)
  m_errorLine = line;
    8fc4:	ldr	r3, [pc, #68]	; (900c <SdioCard::writeData(unsigned char const*)+0xc8>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8fc6:	movs	r0, #35	; 0x23
  m_errorLine = line;
    8fc8:	movw	r2, #905	; 0x389
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8fcc:	strb	r0, [r1, #0]
  m_errorLine = line;
    8fce:	str	r2, [r3, #0]
      SDHC_DATPORT = p32[i];
    }
    p32 += FIFO_WML;
  }
  if (waitTimeout(isBusyTransferComplete)) {
    return sdError(SD_CARD_ERROR_WRITE_TIMEOUT);
    8fd0:	movs	r0, #0
    8fd2:	pop	{r3, r4, r5, pc}
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8fd4:	ldr	r1, [pc, #48]	; (9008 <SdioCard::writeData(unsigned char const*)+0xc4>)
  m_errorLine = line;
    8fd6:	ldr	r3, [pc, #52]	; (900c <SdioCard::writeData(unsigned char const*)+0xc8>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8fd8:	movs	r0, #32
  m_errorLine = line;
    8fda:	movw	r2, #894	; 0x37e
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8fde:	strb	r0, [r1, #0]
  m_errorLine = line;
    8fe0:	str	r2, [r3, #0]
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
  }
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
  if (waitTimeout(isBusyFifoWrite)) {
    return sdError(SD_CARD_ERROR_WRITE_FIFO);
    8fe2:	movs	r0, #0
    return sdError(SD_CARD_ERROR_WRITE_TIMEOUT);
  }
  m_irqstat = SDHC_IRQSTAT;
  SDHC_IRQSTAT = m_irqstat;
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
    8fe4:	pop	{r3, r4, r5, pc}
    8fe6:	nop
    8fe8:	.word	0x400b1024
    8fec:	.word	0x400b1028
    8ff0:	.word	0x0000898d
    8ff4:	.word	0x400b1020
    8ff8:	.word	0x000089a1
    8ffc:	.word	0x400b1030
    9000:	.word	0x1fff8750
    9004:	.word	0x117f0000
    9008:	.word	0x1fff0994
    900c:	.word	0x1fff8770

00009010 <SdioCard::writeStart(unsigned long)>:
    }
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeStart(uint32_t sector) {
    9010:	push	{r3, r4, r5, lr}
  if (yieldTimeout(isBusyCMD13)) {
    9012:	ldr	r0, [pc, #80]	; (9064 <SdioCard::writeStart(unsigned long)+0x54>)
    }
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeStart(uint32_t sector) {
    9014:	mov	r4, r1
  if (yieldTimeout(isBusyCMD13)) {
    9016:	bl	8b10 <yieldTimeout(bool (*)())>
    901a:	cbnz	r0, 9050 <SdioCard::writeStart(unsigned long)+0x40>
    return sdError(SD_CARD_ERROR_CMD13);
  }
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    901c:	ldr	r2, [pc, #72]	; (9068 <SdioCard::writeStart(unsigned long)+0x58>)
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(0XFFFF) | SDHC_BLKATTR_BLKSIZE(512);
#endif  // defined(__IMXRT1062__)
  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    901e:	ldr	r1, [pc, #76]	; (906c <SdioCard::writeStart(unsigned long)+0x5c>)
//------------------------------------------------------------------------------
bool SdioCard::writeStart(uint32_t sector) {
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    9020:	ldr	r3, [r2, #0]
#if defined(__IMXRT1062__)
  // Infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(0XFFFF) | SDHC_BLKATTR_BLKSIZE(512);
    9022:	ldr	r0, [pc, #76]	; (9070 <SdioCard::writeStart(unsigned long)+0x60>)
    9024:	ldr	r5, [pc, #76]	; (9074 <SdioCard::writeStart(unsigned long)+0x64>)
//------------------------------------------------------------------------------
bool SdioCard::writeStart(uint32_t sector) {
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    9026:	bic.w	r3, r3, #65536	; 0x10000
    902a:	str	r3, [r2, #0]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(0XFFFF) | SDHC_BLKATTR_BLKSIZE(512);
#endif  // defined(__IMXRT1062__)
  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    902c:	ldrb	r3, [r1, #0]
#if defined(__IMXRT1062__)
  // Infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(0XFFFF) | SDHC_BLKATTR_BLKSIZE(512);
    902e:	str	r5, [r0, #0]
#endif  // defined(__IMXRT1062__)
  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    9030:	cbnz	r3, 904c <SdioCard::writeStart(unsigned long)+0x3c>
    9032:	lsls	r1, r4, #9
    9034:	ldr	r0, [pc, #64]	; (9078 <SdioCard::writeStart(unsigned long)+0x68>)
    9036:	bl	8b8c <cardCommand(unsigned long, unsigned long)>
    903a:	cbnz	r0, 904a <SdioCard::writeStart(unsigned long)+0x3a>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    903c:	ldr	r1, [pc, #60]	; (907c <SdioCard::writeStart(unsigned long)+0x6c>)
  m_errorLine = line;
    903e:	ldr	r3, [pc, #64]	; (9080 <SdioCard::writeStart(unsigned long)+0x70>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    9040:	movs	r4, #14
  m_errorLine = line;
    9042:	movw	r2, #990	; 0x3de
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    9046:	strb	r4, [r1, #0]
  m_errorLine = line;
    9048:	str	r2, [r3, #0]
#endif  // defined(__IMXRT1062__)
  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    return sdError(SD_CARD_ERROR_CMD25);
  }
  return true;
}
    904a:	pop	{r3, r4, r5, pc}
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(0XFFFF) | SDHC_BLKATTR_BLKSIZE(512);
#endif  // defined(__IMXRT1062__)
  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    904c:	mov	r1, r4
    904e:	b.n	9034 <SdioCard::writeStart(unsigned long)+0x24>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    9050:	ldr	r1, [pc, #40]	; (907c <SdioCard::writeStart(unsigned long)+0x6c>)
  m_errorLine = line;
    9052:	ldr	r3, [pc, #44]	; (9080 <SdioCard::writeStart(unsigned long)+0x70>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    9054:	movs	r0, #10
  m_errorLine = line;
    9056:	movw	r2, #978	; 0x3d2
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    905a:	strb	r0, [r1, #0]
  m_errorLine = line;
    905c:	str	r2, [r3, #0]
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeStart(uint32_t sector) {
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
    905e:	movs	r0, #0
    9060:	pop	{r3, r4, r5, pc}
    9062:	nop
    9064:	.word	0x00008c6d
    9068:	.word	0x400b1028
    906c:	.word	0x1fff8744
    9070:	.word	0x400b1004
    9074:	.word	0xffff0200
    9078:	.word	0x193a0022
    907c:	.word	0x1fff0994
    9080:	.word	0x1fff8770

00009084 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)>:
    m_curSector++;
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
    9084:	push	{r3, r4, r5, r6, r7, lr}
    9086:	mov	r6, r0
  if (m_sdioConfig.useDma()) {
    9088:	ldrb	r0, [r0, #8]
    908a:	lsls	r0, r0, #31
    m_curSector++;
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
    908c:	mov	r4, r1
    908e:	mov	r5, r2
    9090:	mov	r7, r3
  if (m_sdioConfig.useDma()) {
    9092:	bmi.n	90bc <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x38>
    }
    if (!rdWrSectors(CMD18_DMA_XFERTYP, sector, dst, n)) {
      return sdError(SD_CARD_ERROR_CMD18);
    }
  } else {
    for (size_t i = 0; i < n; i++) {
    9094:	cbz	r3, 90b8 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
    9096:	add	r7, r1
    9098:	b.n	909e <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x1a>
    909a:	cmp	r4, r7
    909c:	beq.n	90b8 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
      if (!readSector(sector + i, dst + i*512UL)) {
    909e:	ldr	r3, [r6, #0]
    90a0:	mov	r2, r5
    90a2:	mov	r1, r4
    90a4:	ldr	r3, [r3, #8]
    90a6:	mov	r0, r6
    90a8:	blx	r3
    90aa:	adds	r4, #1
    90ac:	add.w	r5, r5, #512	; 0x200
    90b0:	cmp	r0, #0
    90b2:	bne.n	909a <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x16>
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
  if (m_sdioConfig.useDma()) {
    if ((uint32_t)dst & 3) {
      for (size_t i = 0; i < n; i++, sector++, dst += 512) {
        if (!readSector(sector, dst)) {
          return false;  // readSector will set errorCode.
    90b4:	movs	r0, #0
    90b6:	pop	{r3, r4, r5, r6, r7, pc}
      if (!readSector(sector + i, dst + i*512UL)) {
        return false;
      }
    }
  }
  return true;
    90b8:	movs	r0, #1
    90ba:	pop	{r3, r4, r5, r6, r7, pc}
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
  if (m_sdioConfig.useDma()) {
    if ((uint32_t)dst & 3) {
    90bc:	lsls	r0, r2, #30
    90be:	beq.n	90e6 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x62>
      for (size_t i = 0; i < n; i++, sector++, dst += 512) {
    90c0:	cmp	r3, #0
    90c2:	beq.n	90b8 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
    90c4:	add	r7, r1
    90c6:	b.n	90cc <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x48>
    90c8:	cmp	r7, r4
    90ca:	beq.n	90b8 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
        if (!readSector(sector, dst)) {
    90cc:	ldr	r3, [r6, #0]
    90ce:	mov	r2, r5
    90d0:	mov	r1, r4
    90d2:	ldr	r3, [r3, #8]
    90d4:	mov	r0, r6
    90d6:	blx	r3
}
//------------------------------------------------------------------------------
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
  if (m_sdioConfig.useDma()) {
    if ((uint32_t)dst & 3) {
      for (size_t i = 0; i < n; i++, sector++, dst += 512) {
    90d8:	adds	r4, #1
    90da:	add.w	r5, r5, #512	; 0x200
        if (!readSector(sector, dst)) {
    90de:	cmp	r0, #0
    90e0:	bne.n	90c8 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x44>
          return false;  // readSector will set errorCode.
    90e2:	movs	r0, #0
    90e4:	pop	{r3, r4, r5, r6, r7, pc}
        }
      }
      return true;
    }
    if (!rdWrSectors(CMD18_DMA_XFERTYP, sector, dst, n)) {
    90e6:	ldr	r0, [pc, #24]	; (9100 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x7c>)
    90e8:	bl	8cd4 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    90ec:	cmp	r0, #0
    90ee:	bne.n	90b8 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    90f0:	ldr	r1, [pc, #16]	; (9104 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x80>)
  m_errorLine = line;
    90f2:	ldr	r3, [pc, #20]	; (9108 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x84>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    90f4:	movs	r4, #12
  m_errorLine = line;
    90f6:	mov.w	r2, #820	; 0x334
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    90fa:	strb	r4, [r1, #0]
  m_errorLine = line;
    90fc:	str	r2, [r3, #0]
    90fe:	pop	{r3, r4, r5, r6, r7, pc}
    9100:	.word	0x123a0037
    9104:	.word	0x1fff0994
    9108:	.word	0x1fff8770

0000910c <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)>:
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeSectors(uint32_t sector, const uint8_t* src, size_t n) {
    910c:	push	{r3, r4, r5, r6, r7, lr}
    910e:	mov	r6, r0
  if (m_sdioConfig.useDma()) {
    9110:	ldrb	r0, [r0, #8]
    9112:	lsls	r0, r0, #31
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeSectors(uint32_t sector, const uint8_t* src, size_t n) {
    9114:	mov	r4, r1
    9116:	mov	r5, r2
    9118:	mov	r7, r3
  if (m_sdioConfig.useDma()) {
    911a:	bmi.n	9144 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x38>
    }
    if (!rdWrSectors(CMD25_DMA_XFERTYP, sector, ptr, n)) {
      return sdError(SD_CARD_ERROR_CMD25);
    }
  } else {
    for (size_t i = 0; i < n; i++) {
    911c:	cbz	r3, 9140 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
    911e:	add	r7, r1
    9120:	b.n	9126 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x1a>
    9122:	cmp	r4, r7
    9124:	beq.n	9140 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
      if (!writeSector(sector + i, src + i*512UL)) {
    9126:	ldr	r3, [r6, #0]
    9128:	mov	r2, r5
    912a:	mov	r1, r4
    912c:	ldr	r3, [r3, #24]
    912e:	mov	r0, r6
    9130:	blx	r3
    9132:	adds	r4, #1
    9134:	add.w	r5, r5, #512	; 0x200
    9138:	cmp	r0, #0
    913a:	bne.n	9122 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x16>
  if (m_sdioConfig.useDma()) {
    uint8_t* ptr = const_cast<uint8_t*>(src);
    if (3 & (uint32_t)ptr) {
      for (size_t i = 0; i < n; i++, sector++, ptr += 512) {
        if (!writeSector(sector, ptr)) {
          return false;  // writeSector will set errorCode.
    913c:	movs	r0, #0
    913e:	pop	{r3, r4, r5, r6, r7, pc}
      if (!writeSector(sector + i, src + i*512UL)) {
        return false;
      }
    }
  }
  return true;
    9140:	movs	r0, #1
    9142:	pop	{r3, r4, r5, r6, r7, pc}
}
//------------------------------------------------------------------------------
bool SdioCard::writeSectors(uint32_t sector, const uint8_t* src, size_t n) {
  if (m_sdioConfig.useDma()) {
    uint8_t* ptr = const_cast<uint8_t*>(src);
    if (3 & (uint32_t)ptr) {
    9144:	lsls	r0, r2, #30
    9146:	beq.n	916e <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x62>
      for (size_t i = 0; i < n; i++, sector++, ptr += 512) {
    9148:	cmp	r3, #0
    914a:	beq.n	9140 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
    914c:	add	r7, r1
    914e:	b.n	9154 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x48>
    9150:	cmp	r7, r4
    9152:	beq.n	9140 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
        if (!writeSector(sector, ptr)) {
    9154:	ldr	r3, [r6, #0]
    9156:	mov	r2, r5
    9158:	mov	r1, r4
    915a:	ldr	r3, [r3, #24]
    915c:	mov	r0, r6
    915e:	blx	r3
//------------------------------------------------------------------------------
bool SdioCard::writeSectors(uint32_t sector, const uint8_t* src, size_t n) {
  if (m_sdioConfig.useDma()) {
    uint8_t* ptr = const_cast<uint8_t*>(src);
    if (3 & (uint32_t)ptr) {
      for (size_t i = 0; i < n; i++, sector++, ptr += 512) {
    9160:	adds	r4, #1
    9162:	add.w	r5, r5, #512	; 0x200
        if (!writeSector(sector, ptr)) {
    9166:	cmp	r0, #0
    9168:	bne.n	9150 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x44>
          return false;  // writeSector will set errorCode.
    916a:	movs	r0, #0
    916c:	pop	{r3, r4, r5, r6, r7, pc}
        }
      }
      return true;
    }
    if (!rdWrSectors(CMD25_DMA_XFERTYP, sector, ptr, n)) {
    916e:	ldr	r0, [pc, #24]	; (9188 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x7c>)
    9170:	bl	8cd4 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    9174:	cmp	r0, #0
    9176:	bne.n	9140 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    9178:	ldr	r1, [pc, #16]	; (918c <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x80>)
  m_errorLine = line;
    917a:	ldr	r3, [pc, #20]	; (9190 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x84>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    917c:	movs	r4, #14
  m_errorLine = line;
    917e:	mov.w	r2, #964	; 0x3c4
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    9182:	strb	r4, [r1, #0]
  m_errorLine = line;
    9184:	str	r2, [r3, #0]
    9186:	pop	{r3, r4, r5, r6, r7, pc}
    9188:	.word	0x193a0027
    918c:	.word	0x1fff0994
    9190:	.word	0x1fff8770

00009194 <SdioCard::writeSector(unsigned long, unsigned char const*)>:
  m_irqstat = SDHC_IRQSTAT;
  SDHC_IRQSTAT = m_irqstat;
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
//------------------------------------------------------------------------------
bool SdioCard::writeSector(uint32_t sector, const uint8_t* src) {
    9194:	push	{r4, r5, r6, lr}
  if (m_sdioConfig.useDma()) {
    9196:	ldrb	r3, [r0, #8]
  m_irqstat = SDHC_IRQSTAT;
  SDHC_IRQSTAT = m_irqstat;
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
//------------------------------------------------------------------------------
bool SdioCard::writeSector(uint32_t sector, const uint8_t* src) {
    9198:	mov	r5, r2
  if (m_sdioConfig.useDma()) {
    919a:	lsls	r2, r3, #31
  m_irqstat = SDHC_IRQSTAT;
  SDHC_IRQSTAT = m_irqstat;
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
//------------------------------------------------------------------------------
bool SdioCard::writeSector(uint32_t sector, const uint8_t* src) {
    919c:	sub.w	sp, sp, #512	; 0x200
    91a0:	mov	r6, r1
  if (m_sdioConfig.useDma()) {
    91a2:	bpl.n	91d8 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x44>
    uint8_t *ptr;
    uint8_t aligned[512];
    if (3 & (uint32_t)src) {
    91a4:	lsls	r3, r5, #30
    91a6:	beq.n	91b6 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x22>
      ptr = aligned;
      memcpy(aligned, src, 512);
    91a8:	mov	r1, r5
    91aa:	mov	r0, sp
    91ac:	mov.w	r2, #512	; 0x200
    91b0:	bl	9aa8 <memcpy>
bool SdioCard::writeSector(uint32_t sector, const uint8_t* src) {
  if (m_sdioConfig.useDma()) {
    uint8_t *ptr;
    uint8_t aligned[512];
    if (3 & (uint32_t)src) {
      ptr = aligned;
    91b4:	mov	r5, sp
      memcpy(aligned, src, 512);
    } else {
      ptr = const_cast<uint8_t*>(src);
    }
  if (!rdWrSectors(CMD24_DMA_XFERTYP, sector, ptr, 1)) {
    91b6:	mov	r2, r5
    91b8:	mov	r1, r6
    91ba:	movs	r3, #1
    91bc:	ldr	r0, [pc, #120]	; (9238 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xa4>)
    91be:	bl	8cd4 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    91c2:	cbnz	r0, 91d2 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x3e>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    91c4:	ldr	r1, [pc, #116]	; (923c <SdioCard::writeSector(unsigned long, unsigned char const*)+0xa8>)
  m_errorLine = line;
    91c6:	ldr	r3, [pc, #120]	; (9240 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xac>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    91c8:	movs	r4, #13
  m_errorLine = line;
    91ca:	movw	r2, #923	; 0x39b
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    91ce:	strb	r4, [r1, #0]
  m_errorLine = line;
    91d0:	str	r2, [r3, #0]
      }
    }
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
  }
  return true;
}
    91d2:	add.w	sp, sp, #512	; 0x200
    91d6:	pop	{r4, r5, r6, pc}
    }
  if (!rdWrSectors(CMD24_DMA_XFERTYP, sector, ptr, 1)) {
      return sdError(SD_CARD_ERROR_CMD24);
    }
  } else {
    if (m_curState != WRITE_STATE || m_curSector != sector) {
    91d8:	ldrb	r3, [r0, #9]
    91da:	cmp	r3, #2
    91dc:	mov	r4, r0
    91de:	beq.n	91f2 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x5e>
      if (!syncDevice()) {
    91e0:	ldr	r3, [r4, #0]
    91e2:	mov	r0, r4
    91e4:	ldr	r3, [r3, #20]
    91e6:	blx	r3
    91e8:	cbnz	r0, 9222 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x8e>
        return false;
    91ea:	movs	r0, #0
      }
    }
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
  }
  return true;
}
    91ec:	add.w	sp, sp, #512	; 0x200
    91f0:	pop	{r4, r5, r6, pc}
    }
  if (!rdWrSectors(CMD24_DMA_XFERTYP, sector, ptr, 1)) {
      return sdError(SD_CARD_ERROR_CMD24);
    }
  } else {
    if (m_curState != WRITE_STATE || m_curSector != sector) {
    91f2:	ldr	r3, [r0, #4]
    91f4:	cmp	r1, r3
    91f6:	bne.n	91e0 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x4c>
        return false;
      }
      m_curSector = sector;
      m_curState = WRITE_STATE;
    }
    if (!writeData(src)) {
    91f8:	ldr	r3, [r4, #0]
    91fa:	mov	r1, r5
    91fc:	ldr	r3, [r3, #68]	; 0x44
    91fe:	mov	r0, r4
    9200:	blx	r3
    9202:	cmp	r0, #0
    9204:	beq.n	91ea <SdioCard::writeSector(unsigned long, unsigned char const*)+0x56>
      return false;
    }
    m_curSector++;
    9206:	ldr	r3, [r4, #4]
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
    // End transfer with CMD12 if required.
    if ((SDHC_BLKATTR & 0XFFFF0000) == 0) {
    9208:	ldr	r2, [pc, #56]	; (9244 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xb0>)
      m_curState = WRITE_STATE;
    }
    if (!writeData(src)) {
      return false;
    }
    m_curSector++;
    920a:	adds	r3, #1
    920c:	str	r3, [r4, #4]
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
    // End transfer with CMD12 if required.
    if ((SDHC_BLKATTR & 0XFFFF0000) == 0) {
    920e:	ldr	r3, [r2, #0]
    9210:	lsrs	r3, r3, #16
    9212:	lsls	r3, r3, #16
    9214:	cmp	r3, #0
    9216:	bne.n	91d2 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x3e>
      if (!syncDevice()) {
    9218:	ldr	r3, [r4, #0]
    921a:	mov	r0, r4
    921c:	ldr	r3, [r3, #20]
    921e:	blx	r3
    9220:	b.n	91d2 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x3e>
  } else {
    if (m_curState != WRITE_STATE || m_curSector != sector) {
      if (!syncDevice()) {
        return false;
      }
      if (!writeStart(sector )) {
    9222:	ldr	r3, [r4, #0]
    9224:	mov	r1, r6
    9226:	ldr	r3, [r3, #72]	; 0x48
    9228:	mov	r0, r4
    922a:	blx	r3
    922c:	cmp	r0, #0
    922e:	beq.n	91ea <SdioCard::writeSector(unsigned long, unsigned char const*)+0x56>
        return false;
      }
      m_curSector = sector;
      m_curState = WRITE_STATE;
    9230:	movs	r3, #2
        return false;
      }
      if (!writeStart(sector )) {
        return false;
      }
      m_curSector = sector;
    9232:	str	r6, [r4, #4]
      m_curState = WRITE_STATE;
    9234:	strb	r3, [r4, #9]
    9236:	b.n	91f8 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x64>
    9238:	.word	0x183a0001
    923c:	.word	0x1fff0994
    9240:	.word	0x1fff8770
    9244:	.word	0x400b1004

00009248 <SdioCard::syncDevice()>:
uint32_t SdioCard::status() {
  return statusCMD13();
}
//------------------------------------------------------------------------------
bool SdioCard::syncDevice() {
  if (m_curState == READ_STATE) {
    9248:	ldrb	r3, [r0, #9]
    924a:	cmp	r3, #1
    924c:	beq.n	9268 <SdioCard::syncDevice()+0x20>
    m_curState = IDLE_STATE;
    if (!readStop()) {
      return false;
    }
  } else if (m_curState == WRITE_STATE) {
    924e:	cmp	r3, #2
    9250:	beq.n	9256 <SdioCard::syncDevice()+0xe>
    if (!writeStop()) {
      return false;
    }
  }
  return true;
}
    9252:	movs	r0, #1
    9254:	bx	lr
    m_curState = IDLE_STATE;
    if (!readStop()) {
      return false;
    }
  } else if (m_curState == WRITE_STATE) {
    m_curState = IDLE_STATE;
    9256:	movs	r1, #0
    if (!writeStop()) {
    9258:	ldr	r3, [r0, #0]
    m_curState = IDLE_STATE;
    if (!readStop()) {
      return false;
    }
  } else if (m_curState == WRITE_STATE) {
    m_curState = IDLE_STATE;
    925a:	strb	r1, [r0, #9]
    if (!writeStop()) {
    925c:	ldr	r3, [r3, #76]	; 0x4c
    925e:	ldr	r2, [pc, #20]	; (9274 <SdioCard::syncDevice()+0x2c>)
    9260:	cmp	r3, r2
    9262:	bne.n	9270 <SdioCard::syncDevice()+0x28>
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeStop() {
  return transferStop();
    9264:	b.w	8ec8 <transferStop()>
  return statusCMD13();
}
//------------------------------------------------------------------------------
bool SdioCard::syncDevice() {
  if (m_curState == READ_STATE) {
    m_curState = IDLE_STATE;
    9268:	movs	r3, #0
    926a:	strb	r3, [r0, #9]
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readStop() {
  return transferStop();
    926c:	b.w	8ec8 <transferStop()>
    if (!readStop()) {
      return false;
    }
  } else if (m_curState == WRITE_STATE) {
    m_curState = IDLE_STATE;
    if (!writeStop()) {
    9270:	bx	r3
    9272:	nop
    9274:	.word	0x00008f41

00009278 <cardCMD6(unsigned long, unsigned char*)>:

  return (m_irqstat & SDHC_IRQSTAT_CC) &&
         !(m_irqstat & SDHC_IRQSTAT_CMD_ERROR);
}
//------------------------------------------------------------------------------
static bool cardCMD6(uint32_t arg, uint8_t* status) {
    9278:	push	{r3, r4, r5, r6, r7, lr}
    927a:	mov	r5, r0
  // CMD6 returns 64 bytes.
  if (waitTimeout(isBusyCMD13)) {
    927c:	ldr	r0, [pc, #116]	; (92f4 <cardCMD6(unsigned long, unsigned char*)+0x7c>)

  return (m_irqstat & SDHC_IRQSTAT_CC) &&
         !(m_irqstat & SDHC_IRQSTAT_CMD_ERROR);
}
//------------------------------------------------------------------------------
static bool cardCMD6(uint32_t arg, uint8_t* status) {
    927e:	mov	r4, r1
  // CMD6 returns 64 bytes.
  if (waitTimeout(isBusyCMD13)) {
    9280:	bl	8ae8 <waitTimeout(bool (*)())>
    9284:	cbz	r0, 9298 <cardCMD6(unsigned long, unsigned char*)+0x20>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    9286:	ldr	r1, [pc, #112]	; (92f8 <cardCMD6(unsigned long, unsigned char*)+0x80>)
  m_errorLine = line;
    9288:	ldr	r3, [pc, #112]	; (92fc <cardCMD6(unsigned long, unsigned char*)+0x84>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    928a:	movs	r0, #10
  m_errorLine = line;
    928c:	movw	r2, #377	; 0x179
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    9290:	strb	r0, [r1, #0]
  m_errorLine = line;
    9292:	str	r2, [r3, #0]
}
//------------------------------------------------------------------------------
static bool cardCMD6(uint32_t arg, uint8_t* status) {
  // CMD6 returns 64 bytes.
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
    9294:	movs	r0, #0
    9296:	pop	{r3, r4, r5, r6, r7, pc}
  return true;
}
//------------------------------------------------------------------------------
static void enableDmaIrs() {
  m_dmaBusy = true;
  m_irqstat = 0;
    9298:	ldr	r2, [pc, #100]	; (9300 <cardCMD6(unsigned long, unsigned char*)+0x88>)
  }
  return true;
}
//------------------------------------------------------------------------------
static void enableDmaIrs() {
  m_dmaBusy = true;
    929a:	ldr.w	lr, [pc, #132]	; 9320 <cardCMD6(unsigned long, unsigned char*)+0xa8>
  // CMD6 returns 64 bytes.
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)status;
    929e:	ldr	r7, [pc, #100]	; (9304 <cardCMD6(unsigned long, unsigned char*)+0x8c>)
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
    92a0:	ldr	r6, [pc, #100]	; (9308 <cardCMD6(unsigned long, unsigned char*)+0x90>)
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    92a2:	ldr	r3, [pc, #104]	; (930c <cardCMD6(unsigned long, unsigned char*)+0x94>)
  }
  return true;
}
//------------------------------------------------------------------------------
static void enableDmaIrs() {
  m_dmaBusy = true;
    92a4:	mov.w	ip, #1
    92a8:	strb.w	ip, [lr]
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)status;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    92ac:	mov	r1, r5
  return true;
}
//------------------------------------------------------------------------------
static void enableDmaIrs() {
  m_dmaBusy = true;
  m_irqstat = 0;
    92ae:	str	r0, [r2, #0]
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)status;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
    92b0:	ldr	r5, [pc, #92]	; (9310 <cardCMD6(unsigned long, unsigned char*)+0x98>)
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    92b2:	ldr	r2, [pc, #96]	; (9314 <cardCMD6(unsigned long, unsigned char*)+0x9c>)
  // CMD6 returns 64 bytes.
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)status;
    92b4:	str	r4, [r7, #0]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    92b6:	ldr	r0, [pc, #96]	; (9318 <cardCMD6(unsigned long, unsigned char*)+0xa0>)
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)status;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
    92b8:	str	r5, [r6, #0]
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    92ba:	str	r2, [r3, #0]
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    92bc:	bl	8b8c <cardCommand(unsigned long, unsigned long)>
    92c0:	cbnz	r0, 92d2 <cardCMD6(unsigned long, unsigned char*)+0x5a>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    92c2:	ldr	r1, [pc, #52]	; (92f8 <cardCMD6(unsigned long, unsigned char*)+0x80>)
  m_errorLine = line;
    92c4:	ldr	r3, [pc, #52]	; (92fc <cardCMD6(unsigned long, unsigned char*)+0x84>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    92c6:	movs	r4, #4
  m_errorLine = line;
    92c8:	mov.w	r2, #384	; 0x180
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    92cc:	strb	r4, [r1, #0]
  m_errorLine = line;
    92ce:	str	r2, [r3, #0]
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)status;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    return sdError(SD_CARD_ERROR_CMD6);
    92d0:	pop	{r3, r4, r5, r6, r7, pc}
  m_busyFcn = 0;
  return false;  // Caller will set errorCode.
}
//------------------------------------------------------------------------------
static bool waitDmaStatus() {
  if (yieldTimeout(isBusyDMA)) {
    92d2:	ldr	r0, [pc, #72]	; (931c <cardCMD6(unsigned long, unsigned char*)+0xa4>)
    92d4:	bl	8b10 <yieldTimeout(bool (*)())>
    92d8:	cbnz	r0, 92e2 <cardCMD6(unsigned long, unsigned char*)+0x6a>
    92da:	bl	8cb4 <waitDmaStatus() [clone .part.6]>
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    return sdError(SD_CARD_ERROR_CMD6);
  }
  if (!waitDmaStatus()) {
    92de:	cbz	r0, 92e2 <cardCMD6(unsigned long, unsigned char*)+0x6a>
    return sdError(SD_CARD_ERROR_DMA);
  }
  return true;
}
    92e0:	pop	{r3, r4, r5, r6, r7, pc}
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    92e2:	ldr	r1, [pc, #20]	; (92f8 <cardCMD6(unsigned long, unsigned char*)+0x80>)
  m_errorLine = line;
    92e4:	ldr	r3, [pc, #20]	; (92fc <cardCMD6(unsigned long, unsigned char*)+0x84>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    92e6:	movs	r0, #36	; 0x24
  m_errorLine = line;
    92e8:	movw	r2, #387	; 0x183
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    92ec:	strb	r0, [r1, #0]
  m_errorLine = line;
    92ee:	str	r2, [r3, #0]
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    return sdError(SD_CARD_ERROR_CMD6);
  }
  if (!waitDmaStatus()) {
    return sdError(SD_CARD_ERROR_DMA);
    92f0:	movs	r0, #0
    92f2:	pop	{r3, r4, r5, r6, r7, pc}
    92f4:	.word	0x00008c6d
    92f8:	.word	0x1fff0994
    92fc:	.word	0x1fff8770
    9300:	.word	0x1fff8750
    9304:	.word	0x400b1000
    9308:	.word	0x400b1004
    930c:	.word	0x400b1038
    9310:	.word	0x00010040
    9314:	.word	0x117f0002
    9318:	.word	0x063a0011
    931c:	.word	0x0000896d
    9320:	.word	0x1fff8768

00009324 <SdioCard::begin(SdioConfig)>:
  return false;  // Caller will set errorCode.
}
//==============================================================================
// Start of SdioCard member functions.
//==============================================================================
bool SdioCard::begin(SdioConfig sdioConfig) {
    9324:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t kHzSdClk;
  uint32_t arg;
  m_sdioConfig = sdioConfig;
  m_curState = IDLE_STATE;
  m_initDone = false;
  m_errorCode = SD_CARD_ERROR_NONE;
    9328:	ldr	r5, [pc, #568]	; (9564 <SdioCard::begin(SdioConfig)+0x240>)
}
//------------------------------------------------------------------------------
static void initClock() {
#ifdef HAS_KINETIS_MPU
  // Allow SDHC Bus Master access.
  MPU_RGDAAC0 |= 0x0C000000;
    932a:	ldr	r4, [pc, #572]	; (9568 <SdioCard::begin(SdioConfig)+0x244>)
bool SdioCard::begin(SdioConfig sdioConfig) {
  uint32_t kHzSdClk;
  uint32_t arg;
  m_sdioConfig = sdioConfig;
  m_curState = IDLE_STATE;
  m_initDone = false;
    932c:	ldr.w	r8, [pc, #684]	; 95dc <SdioCard::begin(SdioConfig)+0x2b8>
  m_errorCode = SD_CARD_ERROR_NONE;
  m_highCapacity = false;
    9330:	ldr	r7, [pc, #568]	; (956c <SdioCard::begin(SdioConfig)+0x248>)
  m_version2 = false;
    9332:	ldr	r6, [pc, #572]	; (9570 <SdioCard::begin(SdioConfig)+0x24c>)
// Start of SdioCard member functions.
//==============================================================================
bool SdioCard::begin(SdioConfig sdioConfig) {
  uint32_t kHzSdClk;
  uint32_t arg;
  m_sdioConfig = sdioConfig;
    9334:	strb	r1, [r0, #8]
  m_curState = IDLE_STATE;
    9336:	movs	r3, #0
  m_initDone = false;
  m_errorCode = SD_CARD_ERROR_NONE;
    9338:	strb	r3, [r5, #0]
//==============================================================================
bool SdioCard::begin(SdioConfig sdioConfig) {
  uint32_t kHzSdClk;
  uint32_t arg;
  m_sdioConfig = sdioConfig;
  m_curState = IDLE_STATE;
    933a:	strb	r3, [r0, #9]
  m_initDone = false;
    933c:	strb.w	r3, [r8]
  m_errorCode = SD_CARD_ERROR_NONE;
  m_highCapacity = false;
    9340:	strb	r3, [r7, #0]
  m_version2 = false;
    9342:	strb	r3, [r6, #0]
}
//------------------------------------------------------------------------------
static void initClock() {
#ifdef HAS_KINETIS_MPU
  // Allow SDHC Bus Master access.
  MPU_RGDAAC0 |= 0x0C000000;
    9344:	ldr	r3, [r4, #0]
#endif  // HAS_KINETIS_MPU
  // Enable SDHC clock.
  SIM_SCGC3 |= SIM_SCGC3_SDHC;
    9346:	ldr	r2, [pc, #556]	; (9574 <SdioCard::begin(SdioConfig)+0x250>)
static void enableGPIO(bool enable) {
  const uint32_t PORT_CLK = PORT_PCR_MUX(4) | PORT_PCR_DSE;
  const uint32_t PORT_CMD_DATA = PORT_CLK   | PORT_PCR_PE | PORT_PCR_PS;
  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
    9348:	ldr	r0, [pc, #556]	; (9578 <SdioCard::begin(SdioConfig)+0x254>)
  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
    934a:	ldr	r1, [pc, #560]	; (957c <SdioCard::begin(SdioConfig)+0x258>)
  const uint32_t PORT_CLK = PORT_PCR_MUX(4) | PORT_PCR_DSE;
  const uint32_t PORT_CMD_DATA = PORT_CLK   | PORT_PCR_PE | PORT_PCR_PS;
  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
    934c:	ldr.w	lr, [pc, #656]	; 95e0 <SdioCard::begin(SdioConfig)+0x2bc>
}
//------------------------------------------------------------------------------
static void initClock() {
#ifdef HAS_KINETIS_MPU
  // Allow SDHC Bus Master access.
  MPU_RGDAAC0 |= 0x0C000000;
    9350:	orr.w	r3, r3, #201326592	; 0xc000000
    9354:	str	r3, [r4, #0]
#endif  // HAS_KINETIS_MPU
  // Enable SDHC clock.
  SIM_SCGC3 |= SIM_SCGC3_SDHC;
    9356:	ldr	r3, [r2, #0]
  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
  PORTE_PCR3 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_CMD
    9358:	add.w	r4, r4, #260096	; 0x3f800
#ifdef HAS_KINETIS_MPU
  // Allow SDHC Bus Master access.
  MPU_RGDAAC0 |= 0x0C000000;
#endif  // HAS_KINETIS_MPU
  // Enable SDHC clock.
  SIM_SCGC3 |= SIM_SCGC3_SDHC;
    935c:	orr.w	r3, r3, #131072	; 0x20000
    9360:	str	r3, [r2, #0]
  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
  PORTE_PCR3 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_CMD
    9362:	adds	r4, #12
#if defined (__IMXRT1062__)
  SDHC_MIX_CTRL |= 0x80000000;
#endif

  // Reset SDHC. Use default Water Mark Level of 16.
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTA | SDHC_SYSCTL_SDCLKFS(0x80);
    9364:	add.w	r2, r2, #428032	; 0x68800
static void enableGPIO(bool enable) {
  const uint32_t PORT_CLK = PORT_PCR_MUX(4) | PORT_PCR_DSE;
  const uint32_t PORT_CMD_DATA = PORT_CLK   | PORT_PCR_PE | PORT_PCR_PS;
  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
    9368:	movw	r3, #259	; 0x103
#if defined (__IMXRT1062__)
  SDHC_MIX_CTRL |= 0x80000000;
#endif

  // Reset SDHC. Use default Water Mark Level of 16.
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTA | SDHC_SYSCTL_SDCLKFS(0x80);
    936c:	addw	r2, r2, #2044	; 0x7fc
static void enableGPIO(bool enable) {
  const uint32_t PORT_CLK = PORT_PCR_MUX(4) | PORT_PCR_DSE;
  const uint32_t PORT_CMD_DATA = PORT_CLK   | PORT_PCR_PE | PORT_PCR_PS;
  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
    9370:	str	r3, [r0, #0]
  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
    9372:	str.w	r3, [lr]
  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
    9376:	str	r3, [r1, #0]
  PORTE_PCR3 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_CMD
    9378:	str	r3, [r4, #0]
  PORTE_PCR4 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D3
    937a:	str	r3, [r0, #16]
  PORTE_PCR5 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D2
    937c:	str	r3, [r1, #12]
#if defined (__IMXRT1062__)
  SDHC_MIX_CTRL |= 0x80000000;
#endif

  // Reset SDHC. Use default Water Mark Level of 16.
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTA | SDHC_SYSCTL_SDCLKFS(0x80);
    937e:	ldr	r3, [r2, #0]
    9380:	orr.w	r3, r3, #16777216	; 0x1000000
    9384:	orr.w	r3, r3, #32768	; 0x8000
  return false;  // Caller will set errorCode.
}
//==============================================================================
// Start of SdioCard member functions.
//==============================================================================
bool SdioCard::begin(SdioConfig sdioConfig) {
    9388:	sub	sp, #68	; 0x44
#if defined (__IMXRT1062__)
  SDHC_MIX_CTRL |= 0x80000000;
#endif

  // Reset SDHC. Use default Water Mark Level of 16.
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTA | SDHC_SYSCTL_SDCLKFS(0x80);
    938a:	str	r3, [r2, #0]

  while (SDHC_SYSCTL & SDHC_SYSCTL_RSTA) {
    938c:	ldr	r3, [r2, #0]
    938e:	ldr	r4, [pc, #496]	; (9580 <SdioCard::begin(SdioConfig)+0x25c>)
    9390:	lsls	r1, r3, #7
    9392:	bmi.n	938c <SdioCard::begin(SdioConfig)+0x68>
  }

  // Set initial SCK rate.
  setSdclk(SD_MAX_INIT_RATE_KHZ);
    9394:	mov.w	r0, #400	; 0x190
    9398:	bl	89b8 <setSdclk(unsigned long)>
static void enableGPIO(bool enable) {
  const uint32_t PORT_CLK = PORT_PCR_MUX(4) | PORT_PCR_DSE;
  const uint32_t PORT_CMD_DATA = PORT_CLK   | PORT_PCR_PE | PORT_PCR_PS;
  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
    939c:	ldr.w	ip, [pc, #472]	; 9578 <SdioCard::begin(SdioConfig)+0x254>
  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
    93a0:	ldr.w	lr, [pc, #572]	; 95e0 <SdioCard::begin(SdioConfig)+0x2bc>
  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
    93a4:	ldr	r1, [pc, #468]	; (957c <SdioCard::begin(SdioConfig)+0x258>)
  PORTE_PCR3 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_CMD
    93a6:	ldr	r2, [pc, #476]	; (9584 <SdioCard::begin(SdioConfig)+0x260>)
  PORTE_PCR4 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D3
    93a8:	ldr	r0, [pc, #476]	; (9588 <SdioCard::begin(SdioConfig)+0x264>)
static void enableGPIO(bool enable) {
  const uint32_t PORT_CLK = PORT_PCR_MUX(4) | PORT_PCR_DSE;
  const uint32_t PORT_CMD_DATA = PORT_CLK   | PORT_PCR_PE | PORT_PCR_PS;
  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
    93aa:	movw	r3, #1091	; 0x443
    93ae:	str.w	r3, [ip]
  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
    93b2:	str.w	r3, [lr]
  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
    93b6:	mov.w	lr, #1088	; 0x440
    93ba:	str.w	lr, [r1]
  PORTE_PCR3 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_CMD
    93be:	str	r3, [r2, #0]
  setSdclk(SD_MAX_INIT_RATE_KHZ);

  enableGPIO(true);

  // Enable desired IRQSTAT bits.
  SDHC_IRQSTATEN = SDHC_IRQSTATEN_MASK;
    93c0:	add.w	r2, r2, #409600	; 0x64000
    93c4:	adds	r2, #40	; 0x28

  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
  PORTE_PCR3 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_CMD
  PORTE_PCR4 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D3
    93c6:	str	r3, [r0, #0]
  setSdclk(SD_MAX_INIT_RATE_KHZ);

  enableGPIO(true);

  // Enable desired IRQSTAT bits.
  SDHC_IRQSTATEN = SDHC_IRQSTATEN_MASK;
    93c8:	ldr	r0, [pc, #448]	; (958c <SdioCard::begin(SdioConfig)+0x268>)
  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
  PORTE_PCR3 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_CMD
  PORTE_PCR4 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D3
  PORTE_PCR5 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D2
    93ca:	str	r3, [r1, #12]
  setSdclk(SD_MAX_INIT_RATE_KHZ);

  enableGPIO(true);

  // Enable desired IRQSTAT bits.
  SDHC_IRQSTATEN = SDHC_IRQSTATEN_MASK;
    93cc:	str	r0, [r2, #0]

  attachInterruptVector(IRQ_SDHC, sdIrs);
    93ce:	ldr	r1, [pc, #448]	; (9590 <SdioCard::begin(SdioConfig)+0x26c>)
    93d0:	movs	r0, #81	; 0x51
    93d2:	bl	9f8c <attachInterruptVector>
  NVIC_SET_PRIORITY(IRQ_SDHC, 6*16);
  NVIC_ENABLE_IRQ(IRQ_SDHC);
    93d6:	ldr	r3, [pc, #444]	; (9594 <SdioCard::begin(SdioConfig)+0x270>)

  // Enable desired IRQSTAT bits.
  SDHC_IRQSTATEN = SDHC_IRQSTATEN_MASK;

  attachInterruptVector(IRQ_SDHC, sdIrs);
  NVIC_SET_PRIORITY(IRQ_SDHC, 6*16);
    93d8:	ldr	r1, [pc, #444]	; (9598 <SdioCard::begin(SdioConfig)+0x274>)
    93da:	movs	r0, #96	; 0x60
  NVIC_ENABLE_IRQ(IRQ_SDHC);
    93dc:	mov.w	r2, #131072	; 0x20000

  // Enable desired IRQSTAT bits.
  SDHC_IRQSTATEN = SDHC_IRQSTATEN_MASK;

  attachInterruptVector(IRQ_SDHC, sdIrs);
  NVIC_SET_PRIORITY(IRQ_SDHC, 6*16);
    93e0:	strb	r0, [r1, #0]
  NVIC_ENABLE_IRQ(IRQ_SDHC);
    93e2:	str	r2, [r3, #0]

  // Send 80 clocks to card.
  SDHC_SYSCTL |= SDHC_SYSCTL_INITA;
    93e4:	ldr	r3, [r4, #0]
    93e6:	orr.w	r3, r3, #134217728	; 0x8000000
    93ea:	str	r3, [r4, #0]
  while (SDHC_SYSCTL & SDHC_SYSCTL_INITA) {
    93ec:	ldr	r1, [r4, #0]
    93ee:	ands.w	r1, r1, #134217728	; 0x8000000
    93f2:	bne.n	93ec <SdioCard::begin(SdioConfig)+0xc8>
  m_highCapacity = false;
  m_version2 = false;

  // initialize controller.
  initSDHC();
  if (!cardCommand(CMD0_XFERTYP, 0)) {
    93f4:	mov	r0, r1
    93f6:	bl	8b8c <cardCommand(unsigned long, unsigned long)>
    93fa:	mov	r4, r0
    93fc:	cmp	r0, #0
    93fe:	beq.n	949e <SdioCard::begin(SdioConfig)+0x17a>
    9400:	movs	r4, #3
    return sdError(SD_CARD_ERROR_CMD0);
  }
  // Try several times for case of reset delay.
  for (uint32_t i = 0; i < CMD8_RETRIES; i++) {
    if (cardCommand(CMD8_XFERTYP, 0X1AA)) {
    9402:	mov.w	r1, #426	; 0x1aa
    9406:	ldr	r0, [pc, #404]	; (959c <SdioCard::begin(SdioConfig)+0x278>)
    9408:	bl	8b8c <cardCommand(unsigned long, unsigned long)>
    940c:	cmp	r0, #0
    940e:	bne.n	94cc <SdioCard::begin(SdioConfig)+0x1a8>
  initSDHC();
  if (!cardCommand(CMD0_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD0);
  }
  // Try several times for case of reset delay.
  for (uint32_t i = 0; i < CMD8_RETRIES; i++) {
    9410:	subs	r4, #1
    9412:	bne.n	9402 <SdioCard::begin(SdioConfig)+0xde>
      }
      m_version2 = true;
      break;
    }
  }
  arg = m_version2 ? 0X40300000 : 0x00300000;
    9414:	ldrb	r3, [r6, #0]
    9416:	ldr	r6, [pc, #392]	; (95a0 <SdioCard::begin(SdioConfig)+0x27c>)
    9418:	cmp	r3, #0
    941a:	it	eq
    941c:	moveq.w	r6, #3145728	; 0x300000
  int m = micros();
    9420:	bl	9fd8 <micros>
  do {
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
       ((micros() - m) > BUSY_TIMEOUT_MICROS)) {
      return sdError(SD_CARD_ERROR_ACMD41);
    }
  } while ((SDHC_CMDRSP0 & 0x80000000) == 0);
    9424:	ldr	r4, [pc, #380]	; (95a4 <SdioCard::begin(SdioConfig)+0x280>)
      m_version2 = true;
      break;
    }
  }
  arg = m_version2 ? 0X40300000 : 0x00300000;
  int m = micros();
    9426:	mov	r9, r0
}
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
//==============================================================================
// Static functions.
static bool cardAcmd(uint32_t rca, uint32_t xfertyp, uint32_t arg) {
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    9428:	movs	r1, #0
    942a:	ldr	r0, [pc, #380]	; (95a8 <SdioCard::begin(SdioConfig)+0x284>)
    942c:	bl	8b8c <cardCommand(unsigned long, unsigned long)>
    9430:	cbnz	r0, 9448 <SdioCard::begin(SdioConfig)+0x124>
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    9432:	ldr	r2, [pc, #376]	; (95ac <SdioCard::begin(SdioConfig)+0x288>)
    9434:	movw	r1, #621	; 0x26d
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    9438:	movs	r3, #23
  m_errorLine = line;
    943a:	str	r1, [r2, #0]
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    943c:	strb	r3, [r5, #0]
  arg = m_version2 ? 0X40300000 : 0x00300000;
  int m = micros();
  do {
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
       ((micros() - m) > BUSY_TIMEOUT_MICROS)) {
      return sdError(SD_CARD_ERROR_ACMD41);
    943e:	movs	r4, #0

  // Enable GPIO.
  enableGPIO(true);
  m_initDone = true;
  return true;
}
    9440:	mov	r0, r4
    9442:	add	sp, #68	; 0x44
    9444:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
}
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
//==============================================================================
// Static functions.
static bool cardAcmd(uint32_t rca, uint32_t xfertyp, uint32_t arg) {
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    9448:	mov	r1, r6
    944a:	ldr	r0, [pc, #356]	; (95b0 <SdioCard::begin(SdioConfig)+0x28c>)
    944c:	bl	8b8c <cardCommand(unsigned long, unsigned long)>
    9450:	cmp	r0, #0
    9452:	beq.n	9432 <SdioCard::begin(SdioConfig)+0x10e>
  }
  arg = m_version2 ? 0X40300000 : 0x00300000;
  int m = micros();
  do {
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
       ((micros() - m) > BUSY_TIMEOUT_MICROS)) {
    9454:	bl	9fd8 <micros>
    }
  }
  arg = m_version2 ? 0X40300000 : 0x00300000;
  int m = micros();
  do {
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
    9458:	ldr	r3, [pc, #344]	; (95b4 <SdioCard::begin(SdioConfig)+0x290>)
       ((micros() - m) > BUSY_TIMEOUT_MICROS)) {
      return sdError(SD_CARD_ERROR_ACMD41);
    }
  } while ((SDHC_CMDRSP0 & 0x80000000) == 0);
    945a:	ldr	r2, [pc, #328]	; (95a4 <SdioCard::begin(SdioConfig)+0x280>)
    }
  }
  arg = m_version2 ? 0X40300000 : 0x00300000;
  int m = micros();
  do {
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
    945c:	rsb	r0, r9, r0
    9460:	cmp	r0, r3
    9462:	bhi.n	9432 <SdioCard::begin(SdioConfig)+0x10e>
       ((micros() - m) > BUSY_TIMEOUT_MICROS)) {
      return sdError(SD_CARD_ERROR_ACMD41);
    }
  } while ((SDHC_CMDRSP0 & 0x80000000) == 0);
    9464:	ldr	r3, [r4, #0]
      break;
    }
  }
  arg = m_version2 ? 0X40300000 : 0x00300000;
  int m = micros();
  do {
    9466:	cmp	r3, #0
    9468:	bge.n	9428 <SdioCard::begin(SdioConfig)+0x104>
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
       ((micros() - m) > BUSY_TIMEOUT_MICROS)) {
      return sdError(SD_CARD_ERROR_ACMD41);
    }
  } while ((SDHC_CMDRSP0 & 0x80000000) == 0);
  m_ocr = SDHC_CMDRSP0;
    946a:	ldr	r3, [pc, #332]	; (95b8 <SdioCard::begin(SdioConfig)+0x294>)
    946c:	ldr	r1, [r2, #0]
    946e:	str	r1, [r3, #0]
  if (SDHC_CMDRSP0 & 0x40000000) {
    9470:	ldr	r3, [r2, #0]
    // Is high capacity.
    m_highCapacity = true;
  }
  if (!cardCommand(CMD2_XFERTYP, 0)) {
    9472:	ldr	r0, [pc, #328]	; (95bc <SdioCard::begin(SdioConfig)+0x298>)
       ((micros() - m) > BUSY_TIMEOUT_MICROS)) {
      return sdError(SD_CARD_ERROR_ACMD41);
    }
  } while ((SDHC_CMDRSP0 & 0x80000000) == 0);
  m_ocr = SDHC_CMDRSP0;
  if (SDHC_CMDRSP0 & 0x40000000) {
    9474:	lsls	r2, r3, #1
    // Is high capacity.
    m_highCapacity = true;
    9476:	it	mi
    9478:	movmi	r3, #1
  }
  if (!cardCommand(CMD2_XFERTYP, 0)) {
    947a:	mov.w	r1, #0
    }
  } while ((SDHC_CMDRSP0 & 0x80000000) == 0);
  m_ocr = SDHC_CMDRSP0;
  if (SDHC_CMDRSP0 & 0x40000000) {
    // Is high capacity.
    m_highCapacity = true;
    947e:	it	mi
    9480:	strbmi	r3, [r7, #0]
  }
  if (!cardCommand(CMD2_XFERTYP, 0)) {
    9482:	bl	8b8c <cardCommand(unsigned long, unsigned long)>
    9486:	mov	r4, r0
    9488:	cbnz	r0, 94b2 <SdioCard::begin(SdioConfig)+0x18e>
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    948a:	ldr	r2, [pc, #288]	; (95ac <SdioCard::begin(SdioConfig)+0x288>)
    948c:	movw	r1, #630	; 0x276
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    9490:	movs	r3, #2

  // Enable GPIO.
  enableGPIO(true);
  m_initDone = true;
  return true;
}
    9492:	mov	r0, r4
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    9494:	str	r1, [r2, #0]
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    9496:	strb	r3, [r5, #0]

  // Enable GPIO.
  enableGPIO(true);
  m_initDone = true;
  return true;
}
    9498:	add	sp, #68	; 0x44
    949a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    949e:	ldr	r2, [pc, #268]	; (95ac <SdioCard::begin(SdioConfig)+0x288>)
    94a0:	mov.w	r1, #604	; 0x25c
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    94a4:	movs	r3, #1

  // Enable GPIO.
  enableGPIO(true);
  m_initDone = true;
  return true;
}
    94a6:	mov	r0, r4
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    94a8:	str	r1, [r2, #0]
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    94aa:	strb	r3, [r5, #0]

  // Enable GPIO.
  enableGPIO(true);
  m_initDone = true;
  return true;
}
    94ac:	add	sp, #68	; 0x44
    94ae:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    m_highCapacity = true;
  }
  if (!cardCommand(CMD2_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD2);
  }
  if (!cardCommand(CMD3_XFERTYP, 0)) {
    94b2:	movs	r1, #0
    94b4:	ldr	r0, [pc, #264]	; (95c0 <SdioCard::begin(SdioConfig)+0x29c>)
    94b6:	bl	8b8c <cardCommand(unsigned long, unsigned long)>
    94ba:	mov	r4, r0
    94bc:	cbnz	r0, 94ee <SdioCard::begin(SdioConfig)+0x1ca>
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    94be:	ldr	r2, [pc, #236]	; (95ac <SdioCard::begin(SdioConfig)+0x288>)
    94c0:	movw	r1, #633	; 0x279
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    94c4:	movs	r3, #3
  m_errorLine = line;
    94c6:	str	r1, [r2, #0]
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    94c8:	strb	r3, [r5, #0]
  }
  if (!cardCommand(CMD2_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD2);
  }
  if (!cardCommand(CMD3_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD3);
    94ca:	b.n	9440 <SdioCard::begin(SdioConfig)+0x11c>
    return sdError(SD_CARD_ERROR_CMD0);
  }
  // Try several times for case of reset delay.
  for (uint32_t i = 0; i < CMD8_RETRIES; i++) {
    if (cardCommand(CMD8_XFERTYP, 0X1AA)) {
      if (SDHC_CMDRSP0 != 0X1AA) {
    94cc:	ldr	r3, [pc, #212]	; (95a4 <SdioCard::begin(SdioConfig)+0x280>)
    94ce:	ldr	r3, [r3, #0]
    94d0:	cmp.w	r3, #426	; 0x1aa
    94d4:	beq.n	94e6 <SdioCard::begin(SdioConfig)+0x1c2>
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    94d6:	ldr	r2, [pc, #212]	; (95ac <SdioCard::begin(SdioConfig)+0x288>)
    94d8:	movw	r1, #610	; 0x262
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    94dc:	movs	r3, #6
  m_errorLine = line;
    94de:	str	r1, [r2, #0]
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    94e0:	strb	r3, [r5, #0]
  }
  // Try several times for case of reset delay.
  for (uint32_t i = 0; i < CMD8_RETRIES; i++) {
    if (cardCommand(CMD8_XFERTYP, 0X1AA)) {
      if (SDHC_CMDRSP0 != 0X1AA) {
        return sdError(SD_CARD_ERROR_CMD8);
    94e2:	movs	r4, #0
    94e4:	b.n	9440 <SdioCard::begin(SdioConfig)+0x11c>
      }
      m_version2 = true;
    94e6:	movs	r3, #1
    94e8:	strb	r3, [r6, #0]
      break;
    }
  }
  arg = m_version2 ? 0X40300000 : 0x00300000;
    94ea:	ldr	r6, [pc, #180]	; (95a0 <SdioCard::begin(SdioConfig)+0x27c>)
    94ec:	b.n	9420 <SdioCard::begin(SdioConfig)+0xfc>
    return sdError(SD_CARD_ERROR_CMD2);
  }
  if (!cardCommand(CMD3_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD3);
  }
  m_rca = SDHC_CMDRSP0 & 0xFFFF0000;
    94ee:	ldr	r3, [pc, #180]	; (95a4 <SdioCard::begin(SdioConfig)+0x280>)
    94f0:	ldr	r6, [pc, #208]	; (95c4 <SdioCard::begin(SdioConfig)+0x2a0>)
    94f2:	ldr	r3, [r3, #0]

  if (!readReg16(CMD9_XFERTYP, &m_csd)) {
    94f4:	ldr	r1, [pc, #208]	; (95c8 <SdioCard::begin(SdioConfig)+0x2a4>)
    94f6:	ldr	r0, [pc, #212]	; (95cc <SdioCard::begin(SdioConfig)+0x2a8>)
    return sdError(SD_CARD_ERROR_CMD2);
  }
  if (!cardCommand(CMD3_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD3);
  }
  m_rca = SDHC_CMDRSP0 & 0xFFFF0000;
    94f8:	lsrs	r3, r3, #16
    94fa:	lsls	r3, r3, #16
    94fc:	str	r3, [r6, #0]

  if (!readReg16(CMD9_XFERTYP, &m_csd)) {
    94fe:	bl	8c08 <readReg16(unsigned long, void*)>
    9502:	mov	r4, r0
    9504:	cbnz	r0, 9514 <SdioCard::begin(SdioConfig)+0x1f0>
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    9506:	ldr	r2, [pc, #164]	; (95ac <SdioCard::begin(SdioConfig)+0x288>)
    9508:	movw	r1, #638	; 0x27e
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    950c:	movs	r3, #7
  m_errorLine = line;
    950e:	str	r1, [r2, #0]
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    9510:	strb	r3, [r5, #0]
    return sdError(SD_CARD_ERROR_CMD3);
  }
  m_rca = SDHC_CMDRSP0 & 0xFFFF0000;

  if (!readReg16(CMD9_XFERTYP, &m_csd)) {
    return sdError(SD_CARD_ERROR_CMD9);
    9512:	b.n	9440 <SdioCard::begin(SdioConfig)+0x11c>
  }
  if (!readReg16(CMD10_XFERTYP, &m_cid)) {
    9514:	ldr	r1, [pc, #184]	; (95d0 <SdioCard::begin(SdioConfig)+0x2ac>)
    9516:	ldr	r0, [pc, #188]	; (95d4 <SdioCard::begin(SdioConfig)+0x2b0>)
    9518:	bl	8c08 <readReg16(unsigned long, void*)>
    951c:	mov	r4, r0
    951e:	cbnz	r0, 952e <SdioCard::begin(SdioConfig)+0x20a>
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    9520:	ldr	r2, [pc, #136]	; (95ac <SdioCard::begin(SdioConfig)+0x288>)
    9522:	movw	r1, #641	; 0x281
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    9526:	movs	r3, #8
  m_errorLine = line;
    9528:	str	r1, [r2, #0]
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    952a:	strb	r3, [r5, #0]

  if (!readReg16(CMD9_XFERTYP, &m_csd)) {
    return sdError(SD_CARD_ERROR_CMD9);
  }
  if (!readReg16(CMD10_XFERTYP, &m_cid)) {
    return sdError(SD_CARD_ERROR_CMD10);
    952c:	b.n	9440 <SdioCard::begin(SdioConfig)+0x11c>
  }
  if (!cardCommand(CMD7_XFERTYP, m_rca)) {
    952e:	ldr	r1, [r6, #0]
    9530:	ldr	r0, [pc, #164]	; (95d8 <SdioCard::begin(SdioConfig)+0x2b4>)
    9532:	bl	8b8c <cardCommand(unsigned long, unsigned long)>
    9536:	mov	r4, r0
    9538:	cbnz	r0, 9548 <SdioCard::begin(SdioConfig)+0x224>
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    953a:	ldr	r2, [pc, #112]	; (95ac <SdioCard::begin(SdioConfig)+0x288>)
    953c:	mov.w	r1, #644	; 0x284
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    9540:	movs	r3, #5
  m_errorLine = line;
    9542:	str	r1, [r2, #0]
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    9544:	strb	r3, [r5, #0]
  }
  if (!readReg16(CMD10_XFERTYP, &m_cid)) {
    return sdError(SD_CARD_ERROR_CMD10);
  }
  if (!cardCommand(CMD7_XFERTYP, m_rca)) {
    return sdError(SD_CARD_ERROR_CMD7);
    9546:	b.n	9440 <SdioCard::begin(SdioConfig)+0x11c>
}
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
//==============================================================================
// Static functions.
static bool cardAcmd(uint32_t rca, uint32_t xfertyp, uint32_t arg) {
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    9548:	ldr	r1, [r6, #0]
    954a:	ldr	r0, [pc, #92]	; (95a8 <SdioCard::begin(SdioConfig)+0x284>)
    954c:	bl	8b8c <cardCommand(unsigned long, unsigned long)>
    9550:	cmp	r0, #0
    9552:	bne.n	95e4 <SdioCard::begin(SdioConfig)+0x2c0>
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    9554:	ldr	r2, [pc, #84]	; (95ac <SdioCard::begin(SdioConfig)+0x288>)
    9556:	mov.w	r1, #648	; 0x288
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    955a:	movs	r3, #20
  m_errorLine = line;
    955c:	str	r1, [r2, #0]
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    955e:	strb	r3, [r5, #0]
  if (!cardCommand(CMD7_XFERTYP, m_rca)) {
    return sdError(SD_CARD_ERROR_CMD7);
  }
  // Set card to bus width four.
  if (!cardAcmd(m_rca, ACMD6_XFERTYP, 2)) {
    return sdError(SD_CARD_ERROR_ACMD6);
    9560:	movs	r4, #0
    9562:	b.n	9440 <SdioCard::begin(SdioConfig)+0x11c>
    9564:	.word	0x1fff0994
    9568:	.word	0x4000d800
    956c:	.word	0x1fff8744
    9570:	.word	0x1fff872c
    9574:	.word	0x40048030
    9578:	.word	0x4004d000
    957c:	.word	0x4004d008
    9580:	.word	0x400b102c
    9584:	.word	0x4004d00c
    9588:	.word	0x4004d010
    958c:	.word	0x117f000b
    9590:	.word	0x00008915
    9594:	.word	0xe000e108
    9598:	.word	0xe000e451
    959c:	.word	0x081a0000
    95a0:	.word	0x40300000
    95a4:	.word	0x400b1010
    95a8:	.word	0x371a0000
    95ac:	.word	0x1fff8770
    95b0:	.word	0x29020000
    95b4:	.word	0x000f4240
    95b8:	.word	0x1fff8748
    95bc:	.word	0x02090000
    95c0:	.word	0x031a0000
    95c4:	.word	0x1fff874c
    95c8:	.word	0x1fff8758
    95cc:	.word	0x09090000
    95d0:	.word	0x1fff8730
    95d4:	.word	0x0a090000
    95d8:	.word	0x071b0000
    95dc:	.word	0x1fff8754
    95e0:	.word	0x4004d004
}
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
//==============================================================================
// Static functions.
static bool cardAcmd(uint32_t rca, uint32_t xfertyp, uint32_t arg) {
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    95e4:	movs	r1, #2
    95e6:	ldr	r0, [pc, #168]	; (9690 <SdioCard::begin(SdioConfig)+0x36c>)
    95e8:	bl	8b8c <cardCommand(unsigned long, unsigned long)>
    95ec:	mov	r4, r0
    95ee:	cmp	r0, #0
    95f0:	beq.n	9554 <SdioCard::begin(SdioConfig)+0x230>
  // Set card to bus width four.
  if (!cardAcmd(m_rca, ACMD6_XFERTYP, 2)) {
    return sdError(SD_CARD_ERROR_ACMD6);
  }
  // Set SDHC to bus width four.
  SDHC_PROCTL &= ~SDHC_PROCTL_DTW_MASK;
    95f2:	ldr	r3, [pc, #160]	; (9694 <SdioCard::begin(SdioConfig)+0x370>)
  SDHC_PROCTL |= SDHC_PROCTL_DTW(SDHC_PROCTL_DTW_4BIT);

  SDHC_WML = SDHC_WML_RDWML(FIFO_WML) | SDHC_WML_WRWML(FIFO_WML);
    95f4:	ldr	r0, [pc, #160]	; (9698 <SdioCard::begin(SdioConfig)+0x374>)
  // Set card to bus width four.
  if (!cardAcmd(m_rca, ACMD6_XFERTYP, 2)) {
    return sdError(SD_CARD_ERROR_ACMD6);
  }
  // Set SDHC to bus width four.
  SDHC_PROCTL &= ~SDHC_PROCTL_DTW_MASK;
    95f6:	ldr	r2, [r3, #0]
    95f8:	bic.w	r2, r2, #6
    95fc:	str	r2, [r3, #0]
  SDHC_PROCTL |= SDHC_PROCTL_DTW(SDHC_PROCTL_DTW_4BIT);
    95fe:	ldr	r2, [r3, #0]

  SDHC_WML = SDHC_WML_RDWML(FIFO_WML) | SDHC_WML_WRWML(FIFO_WML);
    9600:	mov.w	r5, #1048592	; 0x100010
  if (!cardAcmd(m_rca, ACMD6_XFERTYP, 2)) {
    return sdError(SD_CARD_ERROR_ACMD6);
  }
  // Set SDHC to bus width four.
  SDHC_PROCTL &= ~SDHC_PROCTL_DTW_MASK;
  SDHC_PROCTL |= SDHC_PROCTL_DTW(SDHC_PROCTL_DTW_4BIT);
    9604:	orr.w	r2, r2, #2
    9608:	str	r2, [r3, #0]
  SDHC_WML = SDHC_WML_RDWML(FIFO_WML) | SDHC_WML_WRWML(FIFO_WML);

  // Determine if High Speed mode is supported and set frequency.
  // Check status[16] for error 0XF or status[16] for new mode 0X1.
  uint8_t status[64];
  if (cardCMD6(0X00FFFFFF, status) && (2 & status[13]) &&
    960a:	mov	r1, sp
  }
  // Set SDHC to bus width four.
  SDHC_PROCTL &= ~SDHC_PROCTL_DTW_MASK;
  SDHC_PROCTL |= SDHC_PROCTL_DTW(SDHC_PROCTL_DTW_4BIT);

  SDHC_WML = SDHC_WML_RDWML(FIFO_WML) | SDHC_WML_WRWML(FIFO_WML);
    960c:	str	r5, [r0, #0]

  // Determine if High Speed mode is supported and set frequency.
  // Check status[16] for error 0XF or status[16] for new mode 0X1.
  uint8_t status[64];
  if (cardCMD6(0X00FFFFFF, status) && (2 & status[13]) &&
    960e:	mvn.w	r0, #4278190080	; 0xff000000
    9612:	bl	9278 <cardCMD6(unsigned long, unsigned char*)>
      cardCMD6(0X80FFFFF1, status) && (status[16] & 0XF) == 1) {
    9616:	cbz	r0, 9620 <SdioCard::begin(SdioConfig)+0x2fc>
  SDHC_WML = SDHC_WML_RDWML(FIFO_WML) | SDHC_WML_WRWML(FIFO_WML);

  // Determine if High Speed mode is supported and set frequency.
  // Check status[16] for error 0XF or status[16] for new mode 0X1.
  uint8_t status[64];
  if (cardCMD6(0X00FFFFFF, status) && (2 & status[13]) &&
    9618:	ldrb.w	r3, [sp, #13]
    961c:	lsls	r3, r3, #30
    961e:	bmi.n	9672 <SdioCard::begin(SdioConfig)+0x34e>
      cardCMD6(0X80FFFFF1, status) && (status[16] & 0XF) == 1) {
    kHzSdClk = 50000;
  } else {
    kHzSdClk = 25000;
    9620:	movw	r0, #25000	; 0x61a8
static void enableGPIO(bool enable) {
  const uint32_t PORT_CLK = PORT_PCR_MUX(4) | PORT_PCR_DSE;
  const uint32_t PORT_CMD_DATA = PORT_CLK   | PORT_PCR_PE | PORT_PCR_PS;
  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
    9624:	ldr.w	fp, [pc, #132]	; 96ac <SdioCard::begin(SdioConfig)+0x388>
  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
    9628:	ldr.w	sl, [pc, #132]	; 96b0 <SdioCard::begin(SdioConfig)+0x38c>
  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
    962c:	ldr.w	r9, [pc, #132]	; 96b4 <SdioCard::begin(SdioConfig)+0x390>
  PORTE_PCR3 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_CMD
    9630:	ldr	r7, [pc, #104]	; (969c <SdioCard::begin(SdioConfig)+0x378>)
  PORTE_PCR4 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D3
    9632:	ldr	r6, [pc, #108]	; (96a0 <SdioCard::begin(SdioConfig)+0x37c>)
  PORTE_PCR5 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D2
    9634:	ldr	r5, [pc, #108]	; (96a4 <SdioCard::begin(SdioConfig)+0x380>)
static void enableGPIO(bool enable) {
  const uint32_t PORT_CLK = PORT_PCR_MUX(4) | PORT_PCR_DSE;
  const uint32_t PORT_CMD_DATA = PORT_CLK   | PORT_PCR_PE | PORT_PCR_PS;
  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
    9636:	movw	r3, #259	; 0x103
    963a:	str.w	r3, [fp]
  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
    963e:	str.w	r3, [sl]
  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
    9642:	str.w	r3, [r9]
  PORTE_PCR3 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_CMD
    9646:	str	r3, [r7, #0]
  PORTE_PCR4 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D3
    9648:	str	r3, [r6, #0]
  PORTE_PCR5 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D2
    964a:	str	r3, [r5, #0]
  }
  // Disable GPIO.
  enableGPIO(false);

  // Set the SDHC SCK frequency.
  setSdclk(kHzSdClk);
    964c:	bl	89b8 <setSdclk(unsigned long)>
static void enableGPIO(bool enable) {
  const uint32_t PORT_CLK = PORT_PCR_MUX(4) | PORT_PCR_DSE;
  const uint32_t PORT_CMD_DATA = PORT_CLK   | PORT_PCR_PE | PORT_PCR_PS;
  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
    9650:	movw	r3, #1091	; 0x443
  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
    9654:	mov.w	r1, #1088	; 0x440
  // Set the SDHC SCK frequency.
  setSdclk(kHzSdClk);

  // Enable GPIO.
  enableGPIO(true);
  m_initDone = true;
    9658:	movs	r2, #1
static void enableGPIO(bool enable) {
  const uint32_t PORT_CLK = PORT_PCR_MUX(4) | PORT_PCR_DSE;
  const uint32_t PORT_CMD_DATA = PORT_CLK   | PORT_PCR_PE | PORT_PCR_PS;
  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
    965a:	str.w	r3, [fp]
  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
    965e:	str.w	r3, [sl]
  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
    9662:	str.w	r1, [r9]
  PORTE_PCR3 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_CMD
    9666:	str	r3, [r7, #0]
  PORTE_PCR4 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D3
    9668:	str	r3, [r6, #0]
  PORTE_PCR5 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D2
    966a:	str	r3, [r5, #0]
  // Set the SDHC SCK frequency.
  setSdclk(kHzSdClk);

  // Enable GPIO.
  enableGPIO(true);
  m_initDone = true;
    966c:	strb.w	r2, [r8]
  return true;
    9670:	b.n	9440 <SdioCard::begin(SdioConfig)+0x11c>

  // Determine if High Speed mode is supported and set frequency.
  // Check status[16] for error 0XF or status[16] for new mode 0X1.
  uint8_t status[64];
  if (cardCMD6(0X00FFFFFF, status) && (2 & status[13]) &&
      cardCMD6(0X80FFFFF1, status) && (status[16] & 0XF) == 1) {
    9672:	mov	r1, sp
    9674:	ldr	r0, [pc, #48]	; (96a8 <SdioCard::begin(SdioConfig)+0x384>)
    9676:	bl	9278 <cardCMD6(unsigned long, unsigned char*)>
  SDHC_WML = SDHC_WML_RDWML(FIFO_WML) | SDHC_WML_WRWML(FIFO_WML);

  // Determine if High Speed mode is supported and set frequency.
  // Check status[16] for error 0XF or status[16] for new mode 0X1.
  uint8_t status[64];
  if (cardCMD6(0X00FFFFFF, status) && (2 & status[13]) &&
    967a:	cmp	r0, #0
    967c:	beq.n	9620 <SdioCard::begin(SdioConfig)+0x2fc>
      cardCMD6(0X80FFFFF1, status) && (status[16] & 0XF) == 1) {
    967e:	ldrb.w	r3, [sp, #16]
    9682:	and.w	r3, r3, #15
    9686:	cmp	r3, #1
    9688:	bne.n	9620 <SdioCard::begin(SdioConfig)+0x2fc>
    kHzSdClk = 50000;
    968a:	movw	r0, #50000	; 0xc350
    968e:	b.n	9624 <SdioCard::begin(SdioConfig)+0x300>
    9690:	.word	0x061a0000
    9694:	.word	0x400b1028
    9698:	.word	0x400b1044
    969c:	.word	0x4004d00c
    96a0:	.word	0x4004d010
    96a4:	.word	0x4004d014
    96a8:	.word	0x80fffff1
    96ac:	.word	0x4004d000
    96b0:	.word	0x4004d004
    96b4:	.word	0x4004d008

000096b8 <SdioCard::readData(unsigned char*)>:
bool SdioCard::readCSD(csd_t* csd) {
  memcpy(csd, &m_csd, 16);
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readData(uint8_t *dst) {
    96b8:	push	{r3, r4, r5, lr}
  DBG_IRQSTAT();
  uint32_t *p32 = reinterpret_cast<uint32_t*>(dst);

  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_RTA)) {
    96ba:	ldr	r3, [pc, #160]	; (975c <SdioCard::readData(unsigned char*)+0xa4>)
    96bc:	ldr	r3, [r3, #0]
    96be:	lsls	r0, r3, #22
bool SdioCard::readCSD(csd_t* csd) {
  memcpy(csd, &m_csd, 16);
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readData(uint8_t *dst) {
    96c0:	mov	r5, r1
  DBG_IRQSTAT();
  uint32_t *p32 = reinterpret_cast<uint32_t*>(dst);

  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_RTA)) {
    96c2:	bmi.n	96e2 <SdioCard::readData(unsigned char*)+0x2a>
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    96c4:	ldr	r3, [pc, #152]	; (9760 <SdioCard::readData(unsigned char*)+0xa8>)
    96c6:	ldr	r2, [r3, #0]
    96c8:	bic.w	r2, r2, #65536	; 0x10000
    96cc:	str	r2, [r3, #0]
    noInterrupts();
    96ce:	cpsid	i
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
    96d0:	ldr	r2, [r3, #0]
    96d2:	orr.w	r2, r2, #131072	; 0x20000
    96d6:	str	r2, [r3, #0]
    SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    96d8:	ldr	r2, [r3, #0]
    96da:	orr.w	r2, r2, #65536	; 0x10000
    96de:	str	r2, [r3, #0]
    interrupts();
    96e0:	cpsie	i
  }
  if (waitTimeout(isBusyFifoRead)) {
    96e2:	ldr	r0, [pc, #128]	; (9764 <SdioCard::readData(unsigned char*)+0xac>)
    96e4:	bl	8ae8 <waitTimeout(bool (*)())>
    96e8:	cmp	r0, #0
    96ea:	bne.n	974a <SdioCard::readData(unsigned char*)+0x92>
    return sdError(SD_CARD_ERROR_READ_FIFO);
  }
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BREN)) {
    96ec:	ldr	r4, [pc, #108]	; (975c <SdioCard::readData(unsigned char*)+0xa4>)
    }
    for (uint32_t i = 0; i < FIFO_WML; i++) {
      p32[i] = SDHC_DATPORT;
    96ee:	ldr	r0, [pc, #120]	; (9768 <SdioCard::readData(unsigned char*)+0xb0>)
    96f0:	subs	r3, r5, #4
    96f2:	add.w	r5, r5, #508	; 0x1fc
  }
  if (waitTimeout(isBusyFifoRead)) {
    return sdError(SD_CARD_ERROR_READ_FIFO);
  }
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BREN)) {
    96f6:	ldr	r2, [r4, #0]
    96f8:	lsls	r1, r2, #20
    96fa:	bpl.n	96f6 <SdioCard::readData(unsigned char*)+0x3e>
    96fc:	add.w	r1, r3, #64	; 0x40
    }
    for (uint32_t i = 0; i < FIFO_WML; i++) {
      p32[i] = SDHC_DATPORT;
    9700:	ldr	r2, [r0, #0]
    9702:	str.w	r2, [r3, #4]!
    return sdError(SD_CARD_ERROR_READ_FIFO);
  }
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BREN)) {
    }
    for (uint32_t i = 0; i < FIFO_WML; i++) {
    9706:	cmp	r1, r3
    9708:	bne.n	9700 <SdioCard::readData(unsigned char*)+0x48>
    interrupts();
  }
  if (waitTimeout(isBusyFifoRead)) {
    return sdError(SD_CARD_ERROR_READ_FIFO);
  }
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    970a:	cmp	r5, r1
    970c:	mov	r3, r1
    970e:	bne.n	96f6 <SdioCard::readData(unsigned char*)+0x3e>
    for (uint32_t i = 0; i < FIFO_WML; i++) {
      p32[i] = SDHC_DATPORT;
    }
    p32 += FIFO_WML;
  }
  if (waitTimeout(isBusyTransferComplete)) {
    9710:	ldr	r0, [pc, #88]	; (976c <SdioCard::readData(unsigned char*)+0xb4>)
    9712:	bl	8ae8 <waitTimeout(bool (*)())>
    9716:	cbnz	r0, 9738 <SdioCard::readData(unsigned char*)+0x80>
    return sdError(SD_CARD_ERROR_READ_TIMEOUT);
  }
  m_irqstat = SDHC_IRQSTAT;
    9718:	ldr	r2, [pc, #84]	; (9770 <SdioCard::readData(unsigned char*)+0xb8>)
    971a:	ldr	r3, [pc, #88]	; (9774 <SdioCard::readData(unsigned char*)+0xbc>)
    971c:	ldr	r1, [r2, #0]
    971e:	str	r1, [r3, #0]
  SDHC_IRQSTAT = m_irqstat;
    9720:	ldr	r1, [r3, #0]
    9722:	str	r1, [r2, #0]
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    9724:	ldr	r2, [r3, #0]
    9726:	lsls	r2, r2, #30
    9728:	bpl.n	975a <SdioCard::readData(unsigned char*)+0xa2>
    972a:	ldr	r3, [r3, #0]
    972c:	ldr	r0, [pc, #72]	; (9778 <SdioCard::readData(unsigned char*)+0xc0>)
    972e:	ands	r0, r3
    9730:	clz	r0, r0
    9734:	lsrs	r0, r0, #5
    9736:	pop	{r3, r4, r5, pc}
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    9738:	ldr	r1, [pc, #64]	; (977c <SdioCard::readData(unsigned char*)+0xc4>)
  m_errorLine = line;
    973a:	ldr	r3, [pc, #68]	; (9780 <SdioCard::readData(unsigned char*)+0xc8>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    973c:	movs	r0, #29
  m_errorLine = line;
    973e:	movw	r2, #759	; 0x2f7
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    9742:	strb	r0, [r1, #0]
  m_errorLine = line;
    9744:	str	r2, [r3, #0]
      p32[i] = SDHC_DATPORT;
    }
    p32 += FIFO_WML;
  }
  if (waitTimeout(isBusyTransferComplete)) {
    return sdError(SD_CARD_ERROR_READ_TIMEOUT);
    9746:	movs	r0, #0
    9748:	pop	{r3, r4, r5, pc}
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    974a:	ldr	r1, [pc, #48]	; (977c <SdioCard::readData(unsigned char*)+0xc4>)
  m_errorLine = line;
    974c:	ldr	r3, [pc, #48]	; (9780 <SdioCard::readData(unsigned char*)+0xc8>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    974e:	movs	r0, #26
  m_errorLine = line;
    9750:	mov.w	r2, #748	; 0x2ec
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    9754:	strb	r0, [r1, #0]
  m_errorLine = line;
    9756:	str	r2, [r3, #0]
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
    SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    interrupts();
  }
  if (waitTimeout(isBusyFifoRead)) {
    return sdError(SD_CARD_ERROR_READ_FIFO);
    9758:	movs	r0, #0
    return sdError(SD_CARD_ERROR_READ_TIMEOUT);
  }
  m_irqstat = SDHC_IRQSTAT;
  SDHC_IRQSTAT = m_irqstat;
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
    975a:	pop	{r3, r4, r5, pc}
    975c:	.word	0x400b1024
    9760:	.word	0x400b1028
    9764:	.word	0x00008979
    9768:	.word	0x400b1020
    976c:	.word	0x000089a1
    9770:	.word	0x400b1030
    9774:	.word	0x1fff8750
    9778:	.word	0x117f0000
    977c:	.word	0x1fff0994
    9780:	.word	0x1fff8770

00009784 <SdioCard::readStart(unsigned long)>:
  }
  return true;
}
//------------------------------------------------------------------------------
// SDHC will do Auto CMD12 after count sectors.
bool SdioCard::readStart(uint32_t sector) {
    9784:	push	{r3, r4, r5, lr}
  DBG_IRQSTAT();
  if (yieldTimeout(isBusyCMD13)) {
    9786:	ldr	r0, [pc, #80]	; (97d8 <SdioCard::readStart(unsigned long)+0x54>)
  }
  return true;
}
//------------------------------------------------------------------------------
// SDHC will do Auto CMD12 after count sectors.
bool SdioCard::readStart(uint32_t sector) {
    9788:	mov	r4, r1
  DBG_IRQSTAT();
  if (yieldTimeout(isBusyCMD13)) {
    978a:	bl	8b10 <yieldTimeout(bool (*)())>
    978e:	cbnz	r0, 97c4 <SdioCard::readStart(unsigned long)+0x40>
    return sdError(SD_CARD_ERROR_CMD13);
  }
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    9790:	ldr	r2, [pc, #72]	; (97dc <SdioCard::readStart(unsigned long)+0x58>)
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(0XFFFF) | SDHC_BLKATTR_BLKSIZE(512);
#endif  // defined(__IMXRT1062__)

  if (!cardCommand(CMD18_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    9792:	ldr	r1, [pc, #76]	; (97e0 <SdioCard::readStart(unsigned long)+0x5c>)
bool SdioCard::readStart(uint32_t sector) {
  DBG_IRQSTAT();
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    9794:	ldr	r3, [r2, #0]
#if defined(__IMXRT1062__)
  // Infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(0XFFFF) | SDHC_BLKATTR_BLKSIZE(512);
    9796:	ldr	r0, [pc, #76]	; (97e4 <SdioCard::readStart(unsigned long)+0x60>)
    9798:	ldr	r5, [pc, #76]	; (97e8 <SdioCard::readStart(unsigned long)+0x64>)
bool SdioCard::readStart(uint32_t sector) {
  DBG_IRQSTAT();
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    979a:	orr.w	r3, r3, #65536	; 0x10000
    979e:	str	r3, [r2, #0]
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(0XFFFF) | SDHC_BLKATTR_BLKSIZE(512);
#endif  // defined(__IMXRT1062__)

  if (!cardCommand(CMD18_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    97a0:	ldrb	r3, [r1, #0]
#if defined(__IMXRT1062__)
  // Infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(0XFFFF) | SDHC_BLKATTR_BLKSIZE(512);
    97a2:	str	r5, [r0, #0]
#endif  // defined(__IMXRT1062__)

  if (!cardCommand(CMD18_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    97a4:	cbnz	r3, 97c0 <SdioCard::readStart(unsigned long)+0x3c>
    97a6:	lsls	r1, r4, #9
    97a8:	ldr	r0, [pc, #64]	; (97ec <SdioCard::readStart(unsigned long)+0x68>)
    97aa:	bl	8b8c <cardCommand(unsigned long, unsigned long)>
    97ae:	cbnz	r0, 97be <SdioCard::readStart(unsigned long)+0x3a>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    97b0:	ldr	r1, [pc, #60]	; (97f0 <SdioCard::readStart(unsigned long)+0x6c>)
  m_errorLine = line;
    97b2:	ldr	r3, [pc, #64]	; (97f4 <SdioCard::readStart(unsigned long)+0x70>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    97b4:	movs	r4, #12
  m_errorLine = line;
    97b6:	mov.w	r2, #848	; 0x350
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    97ba:	strb	r4, [r1, #0]
  m_errorLine = line;
    97bc:	str	r2, [r3, #0]

  if (!cardCommand(CMD18_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    return sdError(SD_CARD_ERROR_CMD18);
  }
  return true;
}
    97be:	pop	{r3, r4, r5, pc}
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(0XFFFF) | SDHC_BLKATTR_BLKSIZE(512);
#endif  // defined(__IMXRT1062__)

  if (!cardCommand(CMD18_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    97c0:	mov	r1, r4
    97c2:	b.n	97a8 <SdioCard::readStart(unsigned long)+0x24>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    97c4:	ldr	r1, [pc, #40]	; (97f0 <SdioCard::readStart(unsigned long)+0x6c>)
  m_errorLine = line;
    97c6:	ldr	r3, [pc, #44]	; (97f4 <SdioCard::readStart(unsigned long)+0x70>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    97c8:	movs	r0, #10
  m_errorLine = line;
    97ca:	mov.w	r2, #836	; 0x344
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    97ce:	strb	r0, [r1, #0]
  m_errorLine = line;
    97d0:	str	r2, [r3, #0]
//------------------------------------------------------------------------------
// SDHC will do Auto CMD12 after count sectors.
bool SdioCard::readStart(uint32_t sector) {
  DBG_IRQSTAT();
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
    97d2:	movs	r0, #0
    97d4:	pop	{r3, r4, r5, pc}
    97d6:	nop
    97d8:	.word	0x00008c6d
    97dc:	.word	0x400b1028
    97e0:	.word	0x1fff8744
    97e4:	.word	0x400b1004
    97e8:	.word	0xffff0200
    97ec:	.word	0x123a0032
    97f0:	.word	0x1fff0994
    97f4:	.word	0x1fff8770

000097f8 <SdioCard::readSector(unsigned long, unsigned char*)>:
bool SdioCard::readOCR(uint32_t* ocr) {
  *ocr = m_ocr;
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readSector(uint32_t sector, uint8_t* dst) {
    97f8:	push	{r4, r5, r6, lr}
  if (m_sdioConfig.useDma()) {
    97fa:	ldrb	r3, [r0, #8]
    97fc:	lsls	r4, r3, #31
bool SdioCard::readOCR(uint32_t* ocr) {
  *ocr = m_ocr;
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readSector(uint32_t sector, uint8_t* dst) {
    97fe:	sub.w	sp, sp, #512	; 0x200
    9802:	mov	r5, r2
  if (m_sdioConfig.useDma()) {
    9804:	bpl.n	982c <SdioCard::readSector(unsigned long, unsigned char*)+0x34>
    uint8_t aligned[512];

    uint8_t* ptr = (uint32_t)dst & 3 ? aligned : dst;
    9806:	lsls	r3, r2, #30
    9808:	beq.n	984a <SdioCard::readSector(unsigned long, unsigned char*)+0x52>

    if (!rdWrSectors(CMD17_DMA_XFERTYP, sector, ptr, 1)) {
    980a:	mov	r2, sp
    980c:	movs	r3, #1
    980e:	ldr	r0, [pc, #168]	; (98b8 <SdioCard::readSector(unsigned long, unsigned char*)+0xc0>)
    9810:	bl	8cd4 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    9814:	cbz	r0, 9856 <SdioCard::readSector(unsigned long, unsigned char*)+0x5e>
      return sdError(SD_CARD_ERROR_CMD17);
    }
    if (ptr != dst) {
      memcpy(dst, aligned, 512);
    9816:	mov	r1, sp
    9818:	mov	r0, r5
    981a:	mov.w	r2, #512	; 0x200
    981e:	bl	9aa8 <memcpy>
      }
    }
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
    m_curSector++;
  }
  return true;
    9822:	movs	r5, #1
}
    9824:	mov	r0, r5
    9826:	add.w	sp, sp, #512	; 0x200
    982a:	pop	{r4, r5, r6, pc}
    }
    if (ptr != dst) {
      memcpy(dst, aligned, 512);
    }
  } else {
    if (m_curState != READ_STATE || sector != m_curSector) {
    982c:	ldrb	r3, [r0, #9]
    982e:	cmp	r3, #1
    9830:	mov	r4, r0
    9832:	mov	r6, r1
    9834:	beq.n	986e <SdioCard::readSector(unsigned long, unsigned char*)+0x76>
      if (!syncDevice()) {
    9836:	ldr	r3, [r4, #0]
    9838:	mov	r0, r4
    983a:	ldr	r3, [r3, #20]
    983c:	blx	r3
    983e:	cbnz	r0, 9894 <SdioCard::readSector(unsigned long, unsigned char*)+0x9c>
        return false;
    9840:	movs	r5, #0
    }
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
    m_curSector++;
  }
  return true;
}
    9842:	mov	r0, r5
    9844:	add.w	sp, sp, #512	; 0x200
    9848:	pop	{r4, r5, r6, pc}
  if (m_sdioConfig.useDma()) {
    uint8_t aligned[512];

    uint8_t* ptr = (uint32_t)dst & 3 ? aligned : dst;

    if (!rdWrSectors(CMD17_DMA_XFERTYP, sector, ptr, 1)) {
    984a:	movs	r3, #1
    984c:	ldr	r0, [pc, #104]	; (98b8 <SdioCard::readSector(unsigned long, unsigned char*)+0xc0>)
    984e:	bl	8cd4 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    9852:	cmp	r0, #0
    9854:	bne.n	9822 <SdioCard::readSector(unsigned long, unsigned char*)+0x2a>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    9856:	ldr	r1, [pc, #100]	; (98bc <SdioCard::readSector(unsigned long, unsigned char*)+0xc4>)
  m_errorLine = line;
    9858:	ldr	r3, [pc, #100]	; (98c0 <SdioCard::readSector(unsigned long, unsigned char*)+0xc8>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    985a:	movs	r0, #11
    uint8_t aligned[512];

    uint8_t* ptr = (uint32_t)dst & 3 ? aligned : dst;

    if (!rdWrSectors(CMD17_DMA_XFERTYP, sector, ptr, 1)) {
      return sdError(SD_CARD_ERROR_CMD17);
    985c:	movs	r5, #0
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    985e:	movw	r2, #778	; 0x30a
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    9862:	strb	r0, [r1, #0]
    }
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
    m_curSector++;
  }
  return true;
}
    9864:	mov	r0, r5
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    9866:	str	r2, [r3, #0]
    }
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
    m_curSector++;
  }
  return true;
}
    9868:	add.w	sp, sp, #512	; 0x200
    986c:	pop	{r4, r5, r6, pc}
    }
    if (ptr != dst) {
      memcpy(dst, aligned, 512);
    }
  } else {
    if (m_curState != READ_STATE || sector != m_curSector) {
    986e:	ldr	r3, [r0, #4]
    9870:	cmp	r1, r3
    9872:	bne.n	9836 <SdioCard::readSector(unsigned long, unsigned char*)+0x3e>
        return false;
      }
      m_curSector = sector;
      m_curState = READ_STATE;
    }
    if (!readData(dst)) {
    9874:	mov	r1, r5
    9876:	mov	r0, r4
    9878:	bl	96b8 <SdioCard::readData(unsigned char*)>
    987c:	mov	r5, r0
    987e:	cmp	r0, #0
    9880:	beq.n	9840 <SdioCard::readSector(unsigned long, unsigned char*)+0x48>
      return false;
    }
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
    if ((SDHC_BLKATTR & 0XFFFF0000) == 0) {
    9882:	ldr	r3, [pc, #64]	; (98c4 <SdioCard::readSector(unsigned long, unsigned char*)+0xcc>)
    9884:	ldr	r3, [r3, #0]
    9886:	lsrs	r3, r3, #16
    9888:	lsls	r3, r3, #16
    988a:	cbz	r3, 98a8 <SdioCard::readSector(unsigned long, unsigned char*)+0xb0>
      if (!syncDevice()) {
        return false;
      }
    }
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
    m_curSector++;
    988c:	ldr	r3, [r4, #4]
    988e:	adds	r3, #1
    9890:	str	r3, [r4, #4]
    9892:	b.n	9842 <SdioCard::readSector(unsigned long, unsigned char*)+0x4a>
  } else {
    if (m_curState != READ_STATE || sector != m_curSector) {
      if (!syncDevice()) {
        return false;
      }
      if (!readStart(sector)) {
    9894:	mov	r1, r6
    9896:	mov	r0, r4
    9898:	bl	9784 <SdioCard::readStart(unsigned long)>
    989c:	cmp	r0, #0
    989e:	beq.n	9840 <SdioCard::readSector(unsigned long, unsigned char*)+0x48>
        return false;
      }
      m_curSector = sector;
      m_curState = READ_STATE;
    98a0:	movs	r3, #1
        return false;
      }
      if (!readStart(sector)) {
        return false;
      }
      m_curSector = sector;
    98a2:	str	r6, [r4, #4]
      m_curState = READ_STATE;
    98a4:	strb	r3, [r4, #9]
    98a6:	b.n	9874 <SdioCard::readSector(unsigned long, unsigned char*)+0x7c>
    if (!readData(dst)) {
      return false;
    }
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
    if ((SDHC_BLKATTR & 0XFFFF0000) == 0) {
      if (!syncDevice()) {
    98a8:	ldr	r3, [r4, #0]
    98aa:	mov	r0, r4
    98ac:	ldr	r3, [r3, #20]
    98ae:	blx	r3
    98b0:	cmp	r0, #0
    98b2:	bne.n	988c <SdioCard::readSector(unsigned long, unsigned char*)+0x94>
    98b4:	b.n	9840 <SdioCard::readSector(unsigned long, unsigned char*)+0x48>
    98b6:	nop
    98b8:	.word	0x113a0011
    98bc:	.word	0x1fff0994
    98c0:	.word	0x1fff8770
    98c4:	.word	0x400b1004

000098c8 <SdSpiArduinoDriver::activate()>:
 */
#include "SdSpiDriver.h"
#if defined(SD_USE_CUSTOM_SPI) &&  defined(__arm__) && defined(CORE_TEENSY)
#define USE_BLOCK_TRANSFER 1
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::activate() {
    98c8:	push	{r4}
  m_spi->beginTransaction(m_spiSettings);
    98ca:	ldr	r3, [r0, #0]
    98cc:	ldr	r2, [r0, #4]

	// Before using SPI.transfer() or asserting chip select pins,
	// this function is used to gain exclusive access to the SPI bus
	// and configure the correct settings.
	void beginTransaction(SPISettings settings) {
		if (interruptMasksUsed) {
    98ce:	ldrb	r1, [r3, #11]
    98d0:	cbz	r1, 9912 <SdSpiArduinoDriver::activate()+0x4a>
			__disable_irq();
    98d2:	cpsid	i
			if (interruptMasksUsed & 0x01) {
    98d4:	ldrb	r1, [r3, #11]
    98d6:	lsls	r0, r1, #31
    98d8:	bpl.n	98e8 <SdSpiArduinoDriver::activate()+0x20>
				interruptSave[0] = NVIC_ICER0 & interruptMask[0];
    98da:	ldr	r0, [pc, #100]	; (9940 <SdSpiArduinoDriver::activate()+0x78>)
    98dc:	ldr	r1, [r3, #12]
    98de:	ldr	r4, [r0, #0]
    98e0:	ands	r1, r4
    98e2:	str	r1, [r3, #28]
				NVIC_ICER0 = interruptSave[0];
    98e4:	str	r1, [r0, #0]
    98e6:	ldrb	r1, [r3, #11]
			}
			#if NVIC_NUM_INTERRUPTS > 32
			if (interruptMasksUsed & 0x02) {
    98e8:	lsls	r4, r1, #30
    98ea:	bpl.n	98fa <SdSpiArduinoDriver::activate()+0x32>
				interruptSave[1] = NVIC_ICER1 & interruptMask[1];
    98ec:	ldr	r0, [pc, #84]	; (9944 <SdSpiArduinoDriver::activate()+0x7c>)
    98ee:	ldr	r1, [r3, #16]
    98f0:	ldr	r4, [r0, #0]
    98f2:	ands	r1, r4
    98f4:	str	r1, [r3, #32]
				NVIC_ICER1 = interruptSave[1];
    98f6:	str	r1, [r0, #0]
    98f8:	ldrb	r1, [r3, #11]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 64 && defined(NVIC_ISER2)
			if (interruptMasksUsed & 0x04) {
    98fa:	lsls	r0, r1, #29
    98fc:	bpl.n	990c <SdSpiArduinoDriver::activate()+0x44>
				interruptSave[2] = NVIC_ICER2 & interruptMask[2];
    98fe:	ldr	r0, [pc, #72]	; (9948 <SdSpiArduinoDriver::activate()+0x80>)
    9900:	ldr	r1, [r3, #20]
    9902:	ldr	r4, [r0, #0]
    9904:	ands	r1, r4
    9906:	str	r1, [r3, #36]	; 0x24
				NVIC_ICER2 = interruptSave[2];
    9908:	str	r1, [r0, #0]
    990a:	ldrb	r1, [r3, #11]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 96 && defined(NVIC_ISER3)
			if (interruptMasksUsed & 0x08) {
    990c:	lsls	r1, r1, #28
    990e:	bmi.n	9930 <SdSpiArduinoDriver::activate()+0x68>
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
				NVIC_ICER3 = interruptSave[3];
			}
			#endif
			__enable_irq();
    9910:	cpsie	i
	// setCS() is a special function, not intended for use from normal Arduino
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
	KINETISK_SPI_t & port() { return *(KINETISK_SPI_t *)port_addr; }
    9912:	ldr	r3, [r3, #0]
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 1;
		#endif
		if (port().CTAR0 != settings.ctar) {
    9914:	ldr	r1, [r3, #12]
    9916:	cmp	r1, r2
    9918:	beq.n	992a <SdSpiArduinoDriver::activate()+0x62>
			port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x3F);
    991a:	ldr	r0, [pc, #48]	; (994c <SdSpiArduinoDriver::activate()+0x84>)
    991c:	str	r0, [r3, #0]
			port().CTAR0 = settings.ctar;
			port().CTAR1 = settings.ctar| SPI_CTAR_FMSZ(8);
			port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x3F);
    991e:	ldr	r1, [pc, #48]	; (9950 <SdSpiArduinoDriver::activate()+0x88>)
		}
		inTransactionFlag = 1;
		#endif
		if (port().CTAR0 != settings.ctar) {
			port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x3F);
			port().CTAR0 = settings.ctar;
    9920:	str	r2, [r3, #12]
			port().CTAR1 = settings.ctar| SPI_CTAR_FMSZ(8);
    9922:	orr.w	r0, r2, #1073741824	; 0x40000000
    9926:	str	r0, [r3, #16]
			port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x3F);
    9928:	str	r1, [r3, #0]
}
    992a:	ldr.w	r4, [sp], #4
    992e:	bx	lr
				NVIC_ICER2 = interruptSave[2];
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 96 && defined(NVIC_ISER3)
			if (interruptMasksUsed & 0x08) {
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
    9930:	ldr	r0, [pc, #32]	; (9954 <SdSpiArduinoDriver::activate()+0x8c>)
    9932:	ldr	r1, [r3, #24]
    9934:	ldr	r4, [r0, #0]
    9936:	ands	r1, r4
    9938:	str	r1, [r3, #40]	; 0x28
				NVIC_ICER3 = interruptSave[3];
    993a:	str	r1, [r0, #0]
    993c:	b.n	9910 <SdSpiArduinoDriver::activate()+0x48>
    993e:	nop
    9940:	.word	0xe000e180
    9944:	.word	0xe000e184
    9948:	.word	0xe000e188
    994c:	.word	0x003f4001
    9950:	.word	0x803f0000
    9954:	.word	0xe000e18c

00009958 <SdSpiArduinoDriver::deactivate()>:
  }
  m_spi->begin();
}
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::deactivate() {
  m_spi->endTransaction();
    9958:	ldr	r2, [r0, #0]
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 0;
		#endif
		if (interruptMasksUsed) {
    995a:	ldrb	r3, [r2, #11]
    995c:	cbz	r3, 998c <SdSpiArduinoDriver::deactivate()+0x34>
			if (interruptMasksUsed & 0x01) {
    995e:	lsls	r1, r3, #31
    9960:	bpl.n	996a <SdSpiArduinoDriver::deactivate()+0x12>
				NVIC_ISER0 = interruptSave[0];
    9962:	ldr	r3, [pc, #44]	; (9990 <SdSpiArduinoDriver::deactivate()+0x38>)
    9964:	ldr	r1, [r2, #28]
    9966:	str	r1, [r3, #0]
    9968:	ldrb	r3, [r2, #11]
			}
			#if NVIC_NUM_INTERRUPTS > 32
			if (interruptMasksUsed & 0x02) {
    996a:	lsls	r0, r3, #30
    996c:	bpl.n	9976 <SdSpiArduinoDriver::deactivate()+0x1e>
				NVIC_ISER1 = interruptSave[1];
    996e:	ldr	r3, [pc, #36]	; (9994 <SdSpiArduinoDriver::deactivate()+0x3c>)
    9970:	ldr	r1, [r2, #32]
    9972:	str	r1, [r3, #0]
    9974:	ldrb	r3, [r2, #11]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 64 && defined(NVIC_ISER2)
			if (interruptMasksUsed & 0x04) {
    9976:	lsls	r1, r3, #29
    9978:	bpl.n	9982 <SdSpiArduinoDriver::deactivate()+0x2a>
				NVIC_ISER2 = interruptSave[2];
    997a:	ldr	r3, [pc, #28]	; (9998 <SdSpiArduinoDriver::deactivate()+0x40>)
    997c:	ldr	r1, [r2, #36]	; 0x24
    997e:	str	r1, [r3, #0]
    9980:	ldrb	r3, [r2, #11]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 96 && defined(NVIC_ISER3)
			if (interruptMasksUsed & 0x08) {
    9982:	lsls	r3, r3, #28
    9984:	bpl.n	998c <SdSpiArduinoDriver::deactivate()+0x34>
				NVIC_ISER3 = interruptSave[3];
    9986:	ldr	r3, [pc, #20]	; (999c <SdSpiArduinoDriver::deactivate()+0x44>)
    9988:	ldr	r2, [r2, #40]	; 0x28
    998a:	str	r2, [r3, #0]
    998c:	bx	lr
    998e:	nop
    9990:	.word	0xe000e100
    9994:	.word	0xe000e104
    9998:	.word	0xe000e108
    999c:	.word	0xe000e10c

000099a0 <SdSpiArduinoDriver::receive()>:
}
//------------------------------------------------------------------------------
uint8_t SdSpiArduinoDriver::receive() {
    99a0:	ldr	r3, [r0, #0]
	// setCS() is a special function, not intended for use from normal Arduino
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
	KINETISK_SPI_t & port() { return *(KINETISK_SPI_t *)port_addr; }
    99a2:	ldr	r2, [r3, #0]
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
    99a4:	mov.w	r1, #2147483648	; 0x80000000
		port().PUSHR = data;
    99a8:	movs	r3, #255	; 0xff
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
    99aa:	str	r1, [r2, #44]	; 0x2c
		port().PUSHR = data;
    99ac:	str	r3, [r2, #52]	; 0x34
		while (!(port().SR & SPI_SR_TCF)) ; // wait
    99ae:	ldr	r3, [r2, #44]	; 0x2c
    99b0:	cmp	r3, #0
    99b2:	bge.n	99ae <SdSpiArduinoDriver::receive()+0xe>
		return port().POPR;
    99b4:	ldr	r0, [r2, #56]	; 0x38
  return m_spi->transfer(0XFF);
}
    99b6:	uxtb	r0, r0
    99b8:	bx	lr
    99ba:	nop

000099bc <SdSpiArduinoDriver::receive(unsigned char*, unsigned int)>:
//------------------------------------------------------------------------------
uint8_t SdSpiArduinoDriver::receive(uint8_t* buf, size_t count) {
    99bc:	push	{r4, r5, r6, lr}
    99be:	mov	r5, r0
    99c0:	mov	r4, r1
    99c2:	mov	r6, r2
#if USE_BLOCK_TRANSFER
  memset(buf, 0XFF, count);
    99c4:	mov	r0, r1
    99c6:	movs	r1, #255	; 0xff
    99c8:	bl	c92c <memset>
		port().PUSHR = data | SPI_PUSHR_CTAS(1);
		while (!(port().SR & SPI_SR_TCF)) ; // wait
		return port().POPR;
	}

	void inline transfer(void *buf, size_t count) {transfer(buf, buf, count);}
    99cc:	ldr	r0, [r5, #0]
    99ce:	mov	r3, r6
    99d0:	mov	r2, r4
    99d2:	mov	r1, r4
    99d4:	bl	3da8 <SPIClass::transfer(void const*, void*, unsigned int)>
  for (size_t i = 0; i < count; i++) {
    buf[i] = m_spi->transfer(0XFF);
  }
#endif  // USE_BLOCK_TRANSFER
  return 0;
}
    99d8:	movs	r0, #0
    99da:	pop	{r4, r5, r6, pc}

000099dc <SdSpiArduinoDriver::send(unsigned char)>:
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::send(uint8_t data) {
    99dc:	ldr	r3, [r0, #0]
	// setCS() is a special function, not intended for use from normal Arduino
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
	KINETISK_SPI_t & port() { return *(KINETISK_SPI_t *)port_addr; }
    99de:	ldr	r2, [r3, #0]
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
    99e0:	mov.w	r3, #2147483648	; 0x80000000
    99e4:	str	r3, [r2, #44]	; 0x2c
		port().PUSHR = data;
    99e6:	str	r1, [r2, #52]	; 0x34
		while (!(port().SR & SPI_SR_TCF)) ; // wait
    99e8:	ldr	r3, [r2, #44]	; 0x2c
    99ea:	cmp	r3, #0
    99ec:	bge.n	99e8 <SdSpiArduinoDriver::send(unsigned char)+0xc>
		return port().POPR;
    99ee:	ldr	r3, [r2, #56]	; 0x38
    99f0:	bx	lr
    99f2:	nop

000099f4 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)>:
  m_spi->transfer(data);
}
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::send(const uint8_t* buf , size_t count) {
    99f4:	push	{r4, r5, lr}
#if USE_BLOCK_TRANSFER
  uint32_t tmp[128];
  if (0 < count && count <= 512) {
    99f6:	subs	r5, r2, #1
    99f8:	cmp.w	r5, #512	; 0x200
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::send(uint8_t data) {
  m_spi->transfer(data);
}
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::send(const uint8_t* buf , size_t count) {
    99fc:	sub.w	sp, sp, #516	; 0x204
    9a00:	mov	r3, r2
#if USE_BLOCK_TRANSFER
  uint32_t tmp[128];
  if (0 < count && count <= 512) {
    9a02:	bcc.n	9a2a <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x36>
    memcpy(tmp, buf, count);
    m_spi->transfer(tmp, count);
    return;
  }
#endif  // USE_BLOCK_TRANSFER
  for (size_t i = 0; i < count; i++) {
    9a04:	cbz	r2, 9a24 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x30>
    9a06:	ldr	r2, [r0, #0]
    9a08:	ldr	r2, [r2, #0]
    9a0a:	adds	r0, r1, r3
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
    9a0c:	mov.w	r4, #2147483648	; 0x80000000
    m_spi->transfer(buf[i]);
    9a10:	ldrb.w	r3, [r1], #1
    9a14:	str	r4, [r2, #44]	; 0x2c
		port().PUSHR = data;
    9a16:	str	r3, [r2, #52]	; 0x34
		while (!(port().SR & SPI_SR_TCF)) ; // wait
    9a18:	ldr	r3, [r2, #44]	; 0x2c
    9a1a:	cmp	r3, #0
    9a1c:	bge.n	9a18 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x24>
    memcpy(tmp, buf, count);
    m_spi->transfer(tmp, count);
    return;
  }
#endif  // USE_BLOCK_TRANSFER
  for (size_t i = 0; i < count; i++) {
    9a1e:	cmp	r1, r0
		return port().POPR;
    9a20:	ldr	r3, [r2, #56]	; 0x38
    9a22:	bne.n	9a10 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x1c>
    m_spi->transfer(buf[i]);
  }
}
    9a24:	add.w	sp, sp, #516	; 0x204
    9a28:	pop	{r4, r5, pc}
    9a2a:	mov	r5, r0
    9a2c:	mov	r4, r2
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::send(const uint8_t* buf , size_t count) {
#if USE_BLOCK_TRANSFER
  uint32_t tmp[128];
  if (0 < count && count <= 512) {
    memcpy(tmp, buf, count);
    9a2e:	mov	r0, sp
    9a30:	bl	9aa8 <memcpy>
		port().PUSHR = data | SPI_PUSHR_CTAS(1);
		while (!(port().SR & SPI_SR_TCF)) ; // wait
		return port().POPR;
	}

	void inline transfer(void *buf, size_t count) {transfer(buf, buf, count);}
    9a34:	mov	r3, r4
    9a36:	mov	r2, sp
    9a38:	mov	r1, sp
    9a3a:	ldr	r0, [r5, #0]
    9a3c:	bl	3da8 <SPIClass::transfer(void const*, void*, unsigned int)>
  }
#endif  // USE_BLOCK_TRANSFER
  for (size_t i = 0; i < count; i++) {
    m_spi->transfer(buf[i]);
  }
}
    9a40:	add.w	sp, sp, #516	; 0x204
    9a44:	pop	{r4, r5, pc}
    9a46:	nop

00009a48 <sdCsWrite(unsigned char, bool)>:
void sdCsInit(SdCsPin_t pin) {
  pinMode(pin, OUTPUT);
}
//------------------------------------------------------------------------------
void sdCsWrite(SdCsPin_t pin, bool level) {
  digitalWrite(pin, level);
    9a48:	b.w	9fcc <digitalWrite>

00009a4c <SDClass::~SDClass()>:
	char *filename;
};



class SDClass : public FS
    9a4c:	bx	lr
    9a4e:	nop

00009a50 <_GLOBAL__sub_I_SD>:
#include <Arduino.h>
#include <SD.h>

SDClass SD;
    9a50:	push	{r4, r5, r6, r7}
 * \class FsVolume
 * \brief FsVolume class.
 */
class FsVolume {
 public:
  FsVolume() : m_fVol(nullptr), m_xVol(nullptr) {}
    9a52:	ldr	r3, [pc, #56]	; (9a8c <_GLOBAL__sub_I_SD+0x3c>)
    9a54:	ldr	r0, [pc, #56]	; (9a90 <_GLOBAL__sub_I_SD+0x40>)
#else  // HAS_SDIO_CLASS
class SdSpiCard {
#endif  // HAS_SDIO_CLASS
 public:
  /** Construct an instance of SdSpiCard. */
  SdSpiCard() : m_errorCode(SD_CARD_ERROR_INIT_NOT_CALLED), m_type(0) {}
    9a56:	ldr	r7, [pc, #60]	; (9a94 <_GLOBAL__sub_I_SD+0x44>)
		}
		if (dataMode & 0x04) {
			c |= SPI_CTAR_CPHA;
			t = (t & 0xFFFF0FFF) | ((t & 0xF000) >> 4);
		}
		ctar = c | t;
    9a58:	ldr	r6, [pc, #60]	; (9a98 <_GLOBAL__sub_I_SD+0x48>)
    9a5a:	str.w	r0, [r3, #1160]	; 0x488
    9a5e:	movs	r4, #0
    9a60:	movs	r5, #40	; 0x28
    9a62:	strb.w	r5, [r3, #1191]	; 0x4a7
 * \class SdioConfig
 * \brief SDIO card configuration.
 */
class SdioConfig {
 public:
  SdioConfig() : m_options(FIFO_SDIO) {}
    9a66:	strb.w	r4, [r3, #1168]	; 0x490
    9a6a:	strb.w	r4, [r3, #1194]	; 0x4aa
    9a6e:	str.w	r7, [r3, #1172]	; 0x494
    9a72:	str.w	r6, [r3, #1180]	; 0x49c
    9a76:	str.w	r4, [r3, #1144]	; 0x478
    9a7a:	str.w	r4, [r3, #1148]	; 0x47c
    9a7e:	ldr	r2, [pc, #28]	; (9a9c <_GLOBAL__sub_I_SD+0x4c>)
    9a80:	ldr	r1, [pc, #28]	; (9aa0 <_GLOBAL__sub_I_SD+0x50>)
    9a82:	mov	r0, r3
    9a84:	pop	{r4, r5, r6, r7}
    9a86:	b.w	b4f0 <__aeabi_atexit>
    9a8a:	nop
    9a8c:	.word	0x1fff8774
    9a90:	.word	0x0001072c
    9a94:	.word	0x000106d4
    9a98:	.word	0x38011001
    9a9c:	.word	0x1fff0970
    9aa0:	.word	0x00009a4d

00009aa4 <usb_mtp_configure>:
		if (!(usb_transfer_status(rx_transfer) & 0x80)) return MTP_RX_SIZE;
		return 0;
	}

#else
	void usb_mtp_configure(void) {}
    9aa4:	bx	lr
    9aa6:	nop

00009aa8 <memcpy>:
	@ r1: src
	@ r2: len
#ifdef __ARM_FEATURE_UNALIGNED
	/* In case of UNALIGNED access supported, ip is not used in
	   function body.  */
	mov	ip, r0
    9aa8:	mov	ip, r0
#else
	push	{r0}
#endif
	orr	r3, r1, r0
    9aaa:	orr.w	r3, r1, r0
	ands	r3, r3, #3
    9aae:	ands.w	r3, r3, #3
	bne	.Lmisaligned_copy
    9ab2:	bne.n	9b90 <memcpy+0xe8>

.Lbig_block:
	subs	r2, __OPT_BIG_BLOCK_SIZE
    9ab4:	subs	r2, #64	; 0x40
	blo	.Lmid_block
    9ab6:	bcc.n	9b3c <memcpy+0x94>
.Lbig_block_loop:
	BEGIN_UNROLL_BIG_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    9ab8:	ldr.w	r3, [r1], #4
    9abc:	str.w	r3, [r0], #4
    9ac0:	ldr.w	r3, [r1], #4
    9ac4:	str.w	r3, [r0], #4
    9ac8:	ldr.w	r3, [r1], #4
    9acc:	str.w	r3, [r0], #4
    9ad0:	ldr.w	r3, [r1], #4
    9ad4:	str.w	r3, [r0], #4
    9ad8:	ldr.w	r3, [r1], #4
    9adc:	str.w	r3, [r0], #4
    9ae0:	ldr.w	r3, [r1], #4
    9ae4:	str.w	r3, [r0], #4
    9ae8:	ldr.w	r3, [r1], #4
    9aec:	str.w	r3, [r0], #4
    9af0:	ldr.w	r3, [r1], #4
    9af4:	str.w	r3, [r0], #4
    9af8:	ldr.w	r3, [r1], #4
    9afc:	str.w	r3, [r0], #4
    9b00:	ldr.w	r3, [r1], #4
    9b04:	str.w	r3, [r0], #4
    9b08:	ldr.w	r3, [r1], #4
    9b0c:	str.w	r3, [r0], #4
    9b10:	ldr.w	r3, [r1], #4
    9b14:	str.w	r3, [r0], #4
    9b18:	ldr.w	r3, [r1], #4
    9b1c:	str.w	r3, [r0], #4
    9b20:	ldr.w	r3, [r1], #4
    9b24:	str.w	r3, [r0], #4
    9b28:	ldr.w	r3, [r1], #4
    9b2c:	str.w	r3, [r0], #4
    9b30:	ldr.w	r3, [r1], #4
    9b34:	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds	r0, __OPT_BIG_BLOCK_SIZE
	adds	r1, __OPT_BIG_BLOCK_SIZE
#endif
	subs	r2, __OPT_BIG_BLOCK_SIZE
    9b38:	subs	r2, #64	; 0x40
	bhs .Lbig_block_loop
    9b3a:	bcs.n	9ab8 <memcpy+0x10>

.Lmid_block:
	adds	r2, __OPT_BIG_BLOCK_SIZE - __OPT_MID_BLOCK_SIZE
    9b3c:	adds	r2, #48	; 0x30
	blo	.Lcopy_word_by_word
    9b3e:	bcc.n	9b64 <memcpy+0xbc>
.Lmid_block_loop:
	BEGIN_UNROLL_MID_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    9b40:	ldr.w	r3, [r1], #4
    9b44:	str.w	r3, [r0], #4
    9b48:	ldr.w	r3, [r1], #4
    9b4c:	str.w	r3, [r0], #4
    9b50:	ldr.w	r3, [r1], #4
    9b54:	str.w	r3, [r0], #4
    9b58:	ldr.w	r3, [r1], #4
    9b5c:	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds    r0, __OPT_MID_BLOCK_SIZE
	adds    r1, __OPT_MID_BLOCK_SIZE
#endif
	subs	r2, __OPT_MID_BLOCK_SIZE
    9b60:	subs	r2, #16
	bhs	.Lmid_block_loop
    9b62:	bcs.n	9b40 <memcpy+0x98>

.Lcopy_word_by_word:
	adds	r2, __OPT_MID_BLOCK_SIZE - 4
    9b64:	adds	r2, #12
	blo	.Lcopy_less_than_4
    9b66:	bcc.n	9b74 <memcpy+0xcc>

	/* Kernel loop for small block copy */
	.align 2
.Lcopy_word_by_word_loop:
	ldr	r3, [r1], #4
    9b68:	ldr.w	r3, [r1], #4
	str	r3, [r0], #4
    9b6c:	str.w	r3, [r0], #4
	subs	r2, #4
    9b70:	subs	r2, #4
	bhs	.Lcopy_word_by_word_loop
    9b72:	bcs.n	9b68 <memcpy+0xc0>

.Lcopy_less_than_4:
	adds	r2, #4
    9b74:	adds	r2, #4
	beq	.Ldone
    9b76:	beq.n	9b8a <memcpy+0xe2>

	lsls	r2, r2, #31
    9b78:	lsls	r2, r2, #31
	itt ne
    9b7a:	itt	ne
	ldrbne  r3, [r1], #1
    9b7c:	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    9b80:	strbne.w	r3, [r0], #1

	bcc	.Ldone
    9b84:	bcc.n	9b8a <memcpy+0xe2>
#ifdef __ARM_FEATURE_UNALIGNED
	ldrh	r3, [r1]
    9b86:	ldrh	r3, [r1, #0]
	strh	r3, [r0]
    9b88:	strh	r3, [r0, #0]
	strb	r3, [r0, #1]
#endif /* __ARM_FEATURE_UNALIGNED */

.Ldone:
#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    9b8a:	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    9b8c:	bx	lr
    9b8e:	nop
#define Ldst_aligned Lbig_block

	/* Copy word by word using LDR when alignment can be done in hardware,
	i.e., SCTLR.A is set, supporting unaligned access in LDR and STR.  */

	cmp	r2, #8
    9b90:	cmp	r2, #8
	blo	.Lbyte_copy
    9b92:	bcc.n	9bbc <memcpy+0x114>

	/* if src is aligned, just go to the big block loop.  */
	lsls	r3, r1, #30
    9b94:	lsls	r3, r1, #30
	beq	.Ldst_aligned
    9b96:	beq.n	9ab4 <memcpy+0xc>
	handling of aligned src and misaligned dst need more overhead than
	otherwise.  By doing this the worst case is when initial src is aligned,
	additional up to 4 byte additional copy will executed, which is
	acceptable.  */

	ands	r3, r0, #3
    9b98:	ands.w	r3, r0, #3
	beq	.Ldst_aligned
    9b9c:	beq.n	9ab4 <memcpy+0xc>

	rsb	r3, #4
    9b9e:	rsb	r3, r3, #4
	subs	r2, r3
    9ba2:	subs	r2, r2, r3

	lsls    r3, r3, #31
    9ba4:	lsls	r3, r3, #31
	itt ne
    9ba6:	itt	ne
	ldrbne  r3, [r1], #1
    9ba8:	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    9bac:	strbne.w	r3, [r0], #1

	bcc .Ldst_aligned
    9bb0:	bcc.n	9ab4 <memcpy+0xc>

#ifdef __ARM_FEATURE_UNALIGNED
	ldrh    r3, [r1], #2
    9bb2:	ldrh.w	r3, [r1], #2
	strh    r3, [r0], #2
    9bb6:	strh.w	r3, [r0], #2
	b	.Ldst_aligned
    9bba:	b.n	9ab4 <memcpy+0xc>
	pop	{r4, r5}

#endif /* __ARM_FEATURE_UNALIGNED */

.Lbyte_copy:
	subs	r2, #4
    9bbc:	subs	r2, #4
	blo	.Lcopy_less_than_4
    9bbe:	bcc.n	9b74 <memcpy+0xcc>

.Lbyte_copy_loop:
	subs    r2, #1
    9bc0:	subs	r2, #1
	ldrb    r3, [r1], #1
    9bc2:	ldrb.w	r3, [r1], #1
	strb    r3, [r0], #1
    9bc6:	strb.w	r3, [r0], #1
	bhs	.Lbyte_copy_loop
    9bca:	bcs.n	9bc0 <memcpy+0x118>

	ldrb	r3, [r1]
    9bcc:	ldrb	r3, [r1, #0]
	strb	r3, [r0]
    9bce:	strb	r3, [r0, #0]
	ldrb	r3, [r1, #1]
    9bd0:	ldrb	r3, [r1, #1]
	strb	r3, [r0, #1]
    9bd2:	strb	r3, [r0, #1]
	ldrb	r3, [r1, #2]
    9bd4:	ldrb	r3, [r1, #2]
	strb	r3, [r0, #2]
    9bd6:	strb	r3, [r0, #2]

#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    9bd8:	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    9bda:	bx	lr

00009bdc <usb_serial_getchar>:

#define TRANSMIT_FLUSH_TIMEOUT	5   /* in milliseconds */

// get the next character, or -1 if nothing received
int usb_serial_getchar(void)
{
    9bdc:	push	{r3, r4, r5, lr}
	unsigned int i;
	int c;

	if (!rx_packet) {
    9bde:	ldr	r5, [pc, #60]	; (9c1c <usb_serial_getchar+0x40>)
    9be0:	ldr	r0, [r5, #0]
    9be2:	cbz	r0, 9c04 <usb_serial_getchar+0x28>
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
    9be4:	ldrh	r3, [r0, #2]
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
    9be6:	ldrh	r2, [r0, #0]
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
    9be8:	adds	r1, r0, r3
    9bea:	adds	r3, #1
	if (i >= rx_packet->len) {
    9bec:	cmp	r3, r2
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
    9bee:	ldrb	r4, [r1, #8]
	if (i >= rx_packet->len) {
    9bf0:	bcs.n	9bf8 <usb_serial_getchar+0x1c>
		usb_free(rx_packet);
		rx_packet = NULL;
	} else {
		rx_packet->index = i;
    9bf2:	strh	r3, [r0, #2]
	}
	return c;
    9bf4:	mov	r0, r4
}
    9bf6:	pop	{r3, r4, r5, pc}
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
		usb_free(rx_packet);
    9bf8:	bl	a264 <usb_free>
		rx_packet = NULL;
    9bfc:	movs	r3, #0
	} else {
		rx_packet->index = i;
	}
	return c;
    9bfe:	mov	r0, r4
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
		usb_free(rx_packet);
		rx_packet = NULL;
    9c00:	str	r3, [r5, #0]
    9c02:	pop	{r3, r4, r5, pc}
{
	unsigned int i;
	int c;

	if (!rx_packet) {
		if (!usb_configuration) return -1;
    9c04:	ldr	r3, [pc, #24]	; (9c20 <usb_serial_getchar+0x44>)
    9c06:	ldrb	r3, [r3, #0]
    9c08:	cbz	r3, 9c16 <usb_serial_getchar+0x3a>
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
    9c0a:	movs	r0, #2
    9c0c:	bl	a2b0 <usb_rx>
    9c10:	str	r0, [r5, #0]
		if (!rx_packet) return -1;
    9c12:	cmp	r0, #0
    9c14:	bne.n	9be4 <usb_serial_getchar+0x8>
{
	unsigned int i;
	int c;

	if (!rx_packet) {
		if (!usb_configuration) return -1;
    9c16:	mov.w	r0, #4294967295
    9c1a:	pop	{r3, r4, r5, pc}
    9c1c:	.word	0x1fff8c2c
    9c20:	.word	0x1fff8d38

00009c24 <usb_serial_peekchar>:
	return c;
}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
    9c24:	push	{r4, lr}
	if (!rx_packet) {
    9c26:	ldr	r4, [pc, #36]	; (9c4c <usb_serial_peekchar+0x28>)
    9c28:	ldr	r0, [r4, #0]
    9c2a:	cbz	r0, 9c34 <usb_serial_peekchar+0x10>
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	if (!rx_packet) return -1;
	return rx_packet->buf[rx_packet->index];
    9c2c:	ldrh	r3, [r0, #2]
    9c2e:	add	r0, r3
    9c30:	ldrb	r0, [r0, #8]
}
    9c32:	pop	{r4, pc}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	if (!rx_packet) {
		if (!usb_configuration) return -1;
    9c34:	ldr	r3, [pc, #24]	; (9c50 <usb_serial_peekchar+0x2c>)
    9c36:	ldrb	r3, [r3, #0]
    9c38:	cbz	r3, 9c46 <usb_serial_peekchar+0x22>
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
    9c3a:	movs	r0, #2
    9c3c:	bl	a2b0 <usb_rx>
    9c40:	str	r0, [r4, #0]
		if (!rx_packet) return -1;
    9c42:	cmp	r0, #0
    9c44:	bne.n	9c2c <usb_serial_peekchar+0x8>

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	if (!rx_packet) {
		if (!usb_configuration) return -1;
    9c46:	mov.w	r0, #4294967295
    9c4a:	pop	{r4, pc}
    9c4c:	.word	0x1fff8c2c
    9c50:	.word	0x1fff8d38

00009c54 <usb_serial_available>:
// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	int count;
	count = usb_rx_byte_count(CDC_RX_ENDPOINT);
	if (rx_packet) count += rx_packet->len - rx_packet->index;
    9c54:	ldr	r3, [pc, #16]	; (9c68 <usb_serial_available+0x14>)
static inline uint32_t usb_rx_byte_count(uint32_t endpoint) __attribute__((always_inline));
static inline uint32_t usb_rx_byte_count(uint32_t endpoint)
{
        endpoint--;
        if (endpoint >= NUM_ENDPOINTS) return 0;
        return usb_rx_byte_count_data[endpoint];
    9c56:	ldr	r2, [pc, #20]	; (9c6c <usb_serial_available+0x18>)
    9c58:	ldr	r3, [r3, #0]

// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	int count;
	count = usb_rx_byte_count(CDC_RX_ENDPOINT);
    9c5a:	ldrh	r0, [r2, #2]
	if (rx_packet) count += rx_packet->len - rx_packet->index;
    9c5c:	cbz	r3, 9c66 <usb_serial_available+0x12>
    9c5e:	ldrh	r2, [r3, #0]
    9c60:	ldrh	r3, [r3, #2]
    9c62:	subs	r3, r2, r3
    9c64:	add	r0, r3
	return count;
}
    9c66:	bx	lr
    9c68:	.word	0x1fff8c2c
    9c6c:	.word	0x1fff8db8

00009c70 <usb_serial_flush_input>:
// discard any buffered input
void usb_serial_flush_input(void)
{
	usb_packet_t *rx;

	if (!usb_configuration) return;
    9c70:	ldr	r3, [pc, #44]	; (9ca0 <usb_serial_flush_input+0x30>)
    9c72:	ldrb	r3, [r3, #0]
    9c74:	cbz	r3, 9c9e <usb_serial_flush_input+0x2e>
	return count;
}

// discard any buffered input
void usb_serial_flush_input(void)
{
    9c76:	push	{r4, lr}
	usb_packet_t *rx;

	if (!usb_configuration) return;
	if (rx_packet) {
    9c78:	ldr	r4, [pc, #40]	; (9ca4 <usb_serial_flush_input+0x34>)
    9c7a:	ldr	r0, [r4, #0]
    9c7c:	cbz	r0, 9c92 <usb_serial_flush_input+0x22>
		usb_free(rx_packet);
    9c7e:	bl	a264 <usb_free>
		rx_packet = NULL;
    9c82:	movs	r3, #0
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
    9c84:	movs	r0, #2
	usb_packet_t *rx;

	if (!usb_configuration) return;
	if (rx_packet) {
		usb_free(rx_packet);
		rx_packet = NULL;
    9c86:	str	r3, [r4, #0]
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
    9c88:	bl	a2b0 <usb_rx>
		if (!rx) break;
    9c8c:	cbz	r0, 9c9c <usb_serial_flush_input+0x2c>
		usb_free(rx);
    9c8e:	bl	a264 <usb_free>
	if (rx_packet) {
		usb_free(rx_packet);
		rx_packet = NULL;
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
    9c92:	movs	r0, #2
    9c94:	bl	a2b0 <usb_rx>
		if (!rx) break;
    9c98:	cmp	r0, #0
    9c9a:	bne.n	9c8e <usb_serial_flush_input+0x1e>
    9c9c:	pop	{r4, pc}
    9c9e:	bx	lr
    9ca0:	.word	0x1fff8d38
    9ca4:	.word	0x1fff8c2c

00009ca8 <usb_serial_write>:
	return usb_serial_write(&c, 1);
}


int usb_serial_write(const void *buffer, uint32_t size)
{
    9ca8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t len;
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
    9cac:	ldr.w	r9, [pc, #248]	; 9da8 <usb_serial_write+0x100>
	return usb_serial_write(&c, 1);
}


int usb_serial_write(const void *buffer, uint32_t size)
{
    9cb0:	sub	sp, #12
	uint32_t len;
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
    9cb2:	movs	r2, #1
    9cb4:	strb.w	r2, [r9]
	while (size > 0) {
    9cb8:	str	r1, [sp, #4]
    9cba:	cbz	r1, 9d18 <usb_serial_write+0x70>
    9cbc:	ldr.w	r8, [pc, #236]	; 9dac <usb_serial_write+0x104>
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
    9cc0:	ldr	r7, [pc, #216]	; (9d9c <usb_serial_write+0xf4>)
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
	while (size > 0) {
    9cc2:	ldr	r6, [sp, #4]
    9cc4:	mov	fp, r0
		if (!tx_packet) {
    9cc6:	ldr.w	r0, [r8]
    9cca:	cbz	r0, 9d3a <usb_serial_write+0x92>
    9ccc:	ldr	r5, [pc, #208]	; (9da0 <usb_serial_write+0xf8>)
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
    9cce:	ldrh	r4, [r0, #2]
    9cd0:	rsb	r1, r4, #64	; 0x40
    9cd4:	cmp	r1, r6
    9cd6:	it	cs
    9cd8:	movcs	r1, r6
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
    9cda:	add.w	lr, r4, r1
					return -1;
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
    9cde:	movs	r2, #0
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
    9ce0:	uxth.w	lr, lr
					return -1;
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
    9ce4:	strb	r2, [r5, #0]
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
		size -= len;
    9ce6:	subs	r6, r6, r1
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
    9ce8:	strh.w	lr, [r0, #2]
			}
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
    9cec:	add.w	r2, r0, #8
		tx_packet->index += len;
		size -= len;
		while (len-- > 0) *dest++ = *src++;
    9cf0:	cbz	r1, 9d08 <usb_serial_write+0x60>
    9cf2:	subs	r4, #1
    9cf4:	add	r2, r4
    9cf6:	add	r1, fp
    9cf8:	ldrb.w	r4, [fp], #1
    9cfc:	strb.w	r4, [r2, #1]!
    9d00:	cmp	fp, r1
    9d02:	bne.n	9cf8 <usb_serial_write+0x50>
    9d04:	ldrh.w	lr, [r0, #2]
		if (tx_packet->index >= CDC_TX_SIZE) {
    9d08:	cmp.w	lr, #63	; 0x3f
    9d0c:	bhi.n	9d26 <usb_serial_write+0x7e>
			tx_packet->len = CDC_TX_SIZE;
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
    9d0e:	ldr	r2, [pc, #148]	; (9da4 <usb_serial_write+0xfc>)
    9d10:	movs	r1, #5
    9d12:	strb	r1, [r2, #0]
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
	while (size > 0) {
    9d14:	cmp	r6, #0
    9d16:	bne.n	9cc6 <usb_serial_write+0x1e>
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
	return ret;
    9d18:	ldr	r0, [sp, #4]
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
    9d1a:	movs	r3, #0
    9d1c:	strb.w	r3, [r9]
	return ret;
}
    9d20:	add	sp, #12
    9d22:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
		size -= len;
		while (len-- > 0) *dest++ = *src++;
		if (tx_packet->index >= CDC_TX_SIZE) {
			tx_packet->len = CDC_TX_SIZE;
    9d26:	movs	r2, #64	; 0x40
    9d28:	strh	r2, [r0, #0]
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
    9d2a:	mov	r1, r0
    9d2c:	movs	r0, #3
    9d2e:	bl	a420 <usb_tx>
			tx_packet = NULL;
    9d32:	movs	r2, #0
    9d34:	str.w	r2, [r8]
    9d38:	b.n	9d0e <usb_serial_write+0x66>
	tx_noautoflush = 1;
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
    9d3a:	ldrb	r2, [r7, #0]
    9d3c:	cbz	r2, 9d8a <usb_serial_write+0xe2>
    9d3e:	ldr	r5, [pc, #96]	; (9da0 <usb_serial_write+0xf8>)
    9d40:	movw	r4, #41721	; 0xa2f9
					tx_noautoflush = 0;
					return -1;
				}
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
					tx_noautoflush = 1;
    9d44:	mov.w	sl, #1
    9d48:	b.n	9d5a <usb_serial_write+0xb2>
					tx_packet = usb_malloc();
					if (tx_packet) break;
					tx_noautoflush = 0;
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    9d4a:	subs	r4, #1
    9d4c:	beq.n	9d7c <usb_serial_write+0xd4>
    9d4e:	ldrb	r2, [r5, #0]
    9d50:	cbnz	r2, 9d7c <usb_serial_write+0xd4>
					transmit_previous_timeout = 1;
					return -1;
				}
				yield();
    9d52:	bl	afb4 <yield>
	tx_noautoflush = 1;
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
    9d56:	ldrb	r2, [r7, #0]
    9d58:	cbz	r2, 9d8a <usb_serial_write+0xe2>
					tx_noautoflush = 0;
					return -1;
				}
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
    9d5a:	movs	r0, #3
    9d5c:	bl	a2ec <usb_tx_packet_count>
    9d60:	cmp	r0, #7
    9d62:	bhi.n	9d4a <usb_serial_write+0xa2>
					tx_noautoflush = 1;
    9d64:	strb.w	sl, [r9]
					tx_packet = usb_malloc();
    9d68:	bl	a224 <usb_malloc>
    9d6c:	str.w	r0, [r8]
					if (tx_packet) break;
    9d70:	cmp	r0, #0
    9d72:	bne.n	9cce <usb_serial_write+0x26>
					tx_noautoflush = 0;
    9d74:	ldr	r3, [pc, #48]	; (9da8 <usb_serial_write+0x100>)
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    9d76:	subs	r4, #1
				}
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
					tx_noautoflush = 1;
					tx_packet = usb_malloc();
					if (tx_packet) break;
					tx_noautoflush = 0;
    9d78:	strb	r0, [r3, #0]
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    9d7a:	bne.n	9d4e <usb_serial_write+0xa6>
					transmit_previous_timeout = 1;
    9d7c:	movs	r3, #1
					return -1;
    9d7e:	mov.w	r0, #4294967295
					tx_packet = usb_malloc();
					if (tx_packet) break;
					tx_noautoflush = 0;
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
					transmit_previous_timeout = 1;
    9d82:	strb	r3, [r5, #0]
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
	return ret;
}
    9d84:	add	sp, #12
    9d86:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
					tx_noautoflush = 0;
    9d8a:	movs	r3, #0
					return -1;
    9d8c:	mov.w	r0, #4294967295
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
					tx_noautoflush = 0;
    9d90:	strb.w	r3, [r9]
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
	return ret;
}
    9d94:	add	sp, #12
    9d96:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9d9a:	nop
    9d9c:	.word	0x1fff8d38
    9da0:	.word	0x1fff8c28
    9da4:	.word	0x1fff8c20
    9da8:	.word	0x1fff8c21
    9dac:	.word	0x1fff8c24

00009db0 <usb_serial_putchar>:
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    9db0:	push	{lr}
    9db2:	sub	sp, #12
    9db4:	add	r3, sp, #8
	return usb_serial_write(&c, 1);
    9db6:	movs	r1, #1
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    9db8:	strb.w	r0, [r3, #-1]!
	return usb_serial_write(&c, 1);
    9dbc:	mov	r0, r3
    9dbe:	bl	9ca8 <usb_serial_write>
}
    9dc2:	add	sp, #12
    9dc4:	ldr.w	pc, [sp], #4

00009dc8 <usb_serial_write_buffer_free>:
	tx_noautoflush = 0;
	return ret;
}

int usb_serial_write_buffer_free(void)
{
    9dc8:	push	{r3, r4, r5, lr}
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
    9dca:	ldr	r5, [pc, #56]	; (9e04 <usb_serial_write_buffer_free+0x3c>)

int usb_serial_write_buffer_free(void)
{
	uint32_t len;

	tx_noautoflush = 1;
    9dcc:	ldr	r4, [pc, #56]	; (9e08 <usb_serial_write_buffer_free+0x40>)
	if (!tx_packet) {
    9dce:	ldr	r0, [r5, #0]

int usb_serial_write_buffer_free(void)
{
	uint32_t len;

	tx_noautoflush = 1;
    9dd0:	movs	r3, #1
    9dd2:	strb	r3, [r4, #0]
	if (!tx_packet) {
    9dd4:	cbz	r0, 9de2 <usb_serial_write_buffer_free+0x1a>
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
			return 0;
		}
	}
	len = CDC_TX_SIZE - tx_packet->index;
    9dd6:	ldrh	r0, [r0, #2]
	// space we just promised the user could write without blocking?
	// But does this come with other performance downsides?  Could it lead to
	// buffer data never actually transmitting in some usage cases?  More
	// investigation is needed.
	// https://github.com/PaulStoffregen/cores/issues/10#issuecomment-61514955
	tx_noautoflush = 0;
    9dd8:	movs	r3, #0
    9dda:	strb	r3, [r4, #0]
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
			return 0;
		}
	}
	len = CDC_TX_SIZE - tx_packet->index;
    9ddc:	rsb	r0, r0, #64	; 0x40
	// buffer data never actually transmitting in some usage cases?  More
	// investigation is needed.
	// https://github.com/PaulStoffregen/cores/issues/10#issuecomment-61514955
	tx_noautoflush = 0;
	return len;
}
    9de0:	pop	{r3, r4, r5, pc}
{
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
    9de2:	ldr	r3, [pc, #40]	; (9e0c <usb_serial_write_buffer_free+0x44>)
    9de4:	ldrb	r3, [r3, #0]
    9de6:	cbnz	r3, 9dee <usb_serial_write_buffer_free+0x26>
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
    9de8:	movs	r0, #0
    9dea:	strb	r0, [r4, #0]
			return 0;
    9dec:	pop	{r3, r4, r5, pc}
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
    9dee:	movs	r0, #3
    9df0:	bl	a2ec <usb_tx_packet_count>
{
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
    9df4:	cmp	r0, #7
    9df6:	bhi.n	9de8 <usb_serial_write_buffer_free+0x20>
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
		  (tx_packet = usb_malloc()) == NULL) {
    9df8:	bl	a224 <usb_malloc>
    9dfc:	str	r0, [r5, #0]
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
    9dfe:	cmp	r0, #0
    9e00:	bne.n	9dd6 <usb_serial_write_buffer_free+0xe>
    9e02:	b.n	9de8 <usb_serial_write_buffer_free+0x20>
    9e04:	.word	0x1fff8c24
    9e08:	.word	0x1fff8c21
    9e0c:	.word	0x1fff8d38

00009e10 <usb_serial_flush_output>:
	tx_noautoflush = 0;
	return len;
}

void usb_serial_flush_output(void)
{
    9e10:	push	{r3, r4, r5, r6, r7, lr}
	if (!usb_configuration) return;
    9e12:	ldr	r3, [pc, #68]	; (9e58 <usb_serial_flush_output+0x48>)
    9e14:	ldrb	r3, [r3, #0]
    9e16:	cbz	r3, 9e3c <usb_serial_flush_output+0x2c>
	tx_noautoflush = 1;
	if (tx_packet) {
    9e18:	ldr	r6, [pc, #64]	; (9e5c <usb_serial_flush_output+0x4c>)
}

void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
    9e1a:	ldr	r5, [pc, #68]	; (9e60 <usb_serial_flush_output+0x50>)
	if (tx_packet) {
    9e1c:	ldr	r4, [r6, #0]
}

void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
    9e1e:	movs	r7, #1
    9e20:	strb	r7, [r5, #0]
	if (tx_packet) {
    9e22:	cbz	r4, 9e3e <usb_serial_flush_output+0x2e>
		usb_cdc_transmit_flush_timer = 0;
    9e24:	ldr	r2, [pc, #60]	; (9e64 <usb_serial_flush_output+0x54>)
		tx_packet->len = tx_packet->index;
    9e26:	ldrh	r3, [r4, #2]
void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
	if (tx_packet) {
		usb_cdc_transmit_flush_timer = 0;
    9e28:	movs	r7, #0
    9e2a:	strb	r7, [r2, #0]
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    9e2c:	mov	r1, r4
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
	if (tx_packet) {
		usb_cdc_transmit_flush_timer = 0;
		tx_packet->len = tx_packet->index;
    9e2e:	strh	r3, [r4, #0]
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    9e30:	movs	r0, #3
    9e32:	bl	a420 <usb_tx>
		tx_packet = NULL;
    9e36:	str	r7, [r6, #0]
			usb_tx(CDC_TX_ENDPOINT, tx);
		} else {
			usb_cdc_transmit_flush_timer = 1;
		}
	}
	tx_noautoflush = 0;
    9e38:	movs	r3, #0
    9e3a:	strb	r3, [r5, #0]
    9e3c:	pop	{r3, r4, r5, r6, r7, pc}
		usb_cdc_transmit_flush_timer = 0;
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
    9e3e:	bl	a224 <usb_malloc>
		if (tx) {
			usb_cdc_transmit_flush_timer = 0;
    9e42:	ldr	r3, [pc, #32]	; (9e64 <usb_serial_flush_output+0x54>)
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
    9e44:	cbz	r0, 9e52 <usb_serial_flush_output+0x42>
			usb_cdc_transmit_flush_timer = 0;
			usb_tx(CDC_TX_ENDPOINT, tx);
    9e46:	mov	r1, r0
    9e48:	movs	r0, #3
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_cdc_transmit_flush_timer = 0;
    9e4a:	strb	r4, [r3, #0]
			usb_tx(CDC_TX_ENDPOINT, tx);
    9e4c:	bl	a420 <usb_tx>
    9e50:	b.n	9e38 <usb_serial_flush_output+0x28>
		} else {
			usb_cdc_transmit_flush_timer = 1;
    9e52:	strb	r7, [r3, #0]
    9e54:	b.n	9e38 <usb_serial_flush_output+0x28>
    9e56:	nop
    9e58:	.word	0x1fff8d38
    9e5c:	.word	0x1fff8c24
    9e60:	.word	0x1fff8c21
    9e64:	.word	0x1fff8c20

00009e68 <usb_serial_flush_callback>:
	}
	tx_noautoflush = 0;
}

void usb_serial_flush_callback(void)
{
    9e68:	push	{r3, r4, r5, lr}
	if (tx_noautoflush) return;
    9e6a:	ldr	r3, [pc, #56]	; (9ea4 <usb_serial_flush_callback+0x3c>)
    9e6c:	ldrb	r3, [r3, #0]
    9e6e:	cbnz	r3, 9e8e <usb_serial_flush_callback+0x26>
	if (tx_packet) {
    9e70:	ldr	r4, [pc, #52]	; (9ea8 <usb_serial_flush_callback+0x40>)
    9e72:	ldr	r1, [r4, #0]
    9e74:	cbz	r1, 9e90 <usb_serial_flush_callback+0x28>
    9e76:	and.w	r5, r3, #255	; 0xff
		tx_packet->len = tx_packet->index;
    9e7a:	ldrh	r3, [r1, #2]
    9e7c:	strh	r3, [r1, #0]
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    9e7e:	movs	r0, #3
    9e80:	bl	a420 <usb_tx>
		tx_packet = NULL;
    9e84:	str	r5, [r4, #0]
    9e86:	pop	{r3, r4, r5, pc}
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_tx(CDC_TX_ENDPOINT, tx);
		} else {
			usb_cdc_transmit_flush_timer = 1;
    9e88:	ldr	r3, [pc, #32]	; (9eac <usb_serial_flush_callback+0x44>)
    9e8a:	movs	r2, #1
    9e8c:	strb	r2, [r3, #0]
    9e8e:	pop	{r3, r4, r5, pc}
	if (tx_packet) {
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
    9e90:	bl	a224 <usb_malloc>
		if (tx) {
    9e94:	cmp	r0, #0
    9e96:	beq.n	9e88 <usb_serial_flush_callback+0x20>
			usb_tx(CDC_TX_ENDPOINT, tx);
    9e98:	mov	r1, r0
		} else {
			usb_cdc_transmit_flush_timer = 1;
		}
	}
}
    9e9a:	ldmia.w	sp!, {r3, r4, r5, lr}
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_tx(CDC_TX_ENDPOINT, tx);
    9e9e:	movs	r0, #3
    9ea0:	b.w	a420 <usb_tx>
    9ea4:	.word	0x1fff8c21
    9ea8:	.word	0x1fff8c24
    9eac:	.word	0x1fff8c20

00009eb0 <fault_isr>:
void _init_Teensyduino_internal_(void) __attribute__((noinline));
void __libc_init_array(void);


void fault_isr(void)
{
    9eb0:	push	{r3, lr}
        asm("ldr %0, [sp, #0]" : "=r" (addr) ::);
#endif
	while (1) {
		// keep polling some communication while in fault
		// mode, so we don't completely die.
		if (SIM_SCGC4 & SIM_SCGC4_USBOTG) usb_isr();
    9eb2:	ldr	r4, [pc, #64]	; (9ef4 <fault_isr+0x44>)
    9eb4:	b.n	9ec8 <fault_isr+0x18>
		if (SIM_SCGC4 & SIM_SCGC4_UART0) uart0_status_isr();
    9eb6:	ldr	r3, [r4, #0]
    9eb8:	lsls	r1, r3, #21
    9eba:	bmi.n	9ed8 <fault_isr+0x28>
		if (SIM_SCGC4 & SIM_SCGC4_UART1) uart1_status_isr();
    9ebc:	ldr	r3, [r4, #0]
    9ebe:	lsls	r2, r3, #20
    9ec0:	bmi.n	9ee2 <fault_isr+0x32>
		if (SIM_SCGC4 & SIM_SCGC4_UART2) uart2_status_isr();
    9ec2:	ldr	r3, [r4, #0]
    9ec4:	lsls	r3, r3, #19
    9ec6:	bmi.n	9eec <fault_isr+0x3c>
        asm("ldr %0, [sp, #0]" : "=r" (addr) ::);
#endif
	while (1) {
		// keep polling some communication while in fault
		// mode, so we don't completely die.
		if (SIM_SCGC4 & SIM_SCGC4_USBOTG) usb_isr();
    9ec8:	ldr	r3, [r4, #0]
    9eca:	lsls	r0, r3, #13
    9ecc:	bpl.n	9eb6 <fault_isr+0x6>
    9ece:	bl	a4a4 <usb_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART0) uart0_status_isr();
    9ed2:	ldr	r3, [r4, #0]
    9ed4:	lsls	r1, r3, #21
    9ed6:	bpl.n	9ebc <fault_isr+0xc>
    9ed8:	bl	9ef8 <unused_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART1) uart1_status_isr();
    9edc:	ldr	r3, [r4, #0]
    9ede:	lsls	r2, r3, #20
    9ee0:	bpl.n	9ec2 <fault_isr+0x12>
    9ee2:	bl	9ef8 <unused_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART2) uart2_status_isr();
    9ee6:	ldr	r3, [r4, #0]
    9ee8:	lsls	r3, r3, #19
    9eea:	bpl.n	9ec8 <fault_isr+0x18>
    9eec:	bl	9ef8 <unused_isr>
    9ef0:	b.n	9ec8 <fault_isr+0x18>
    9ef2:	nop
    9ef4:	.word	0x40048034

00009ef8 <unused_isr>:
	}
}

void unused_isr(void)
{
    9ef8:	push	{r3, lr}
	fault_isr();
    9efa:	bl	9eb0 <fault_isr>
    9efe:	nop

00009f00 <startup_early_hook>:
extern void rtc_set(unsigned long t);


static void startup_default_early_hook(void) {
#if defined(KINETISK)
	WDOG_STCTRLH = WDOG_STCTRLH_ALLOWUPDATE;
    9f00:	ldr	r3, [pc, #4]	; (9f08 <startup_early_hook+0x8>)
    9f02:	movs	r2, #16
    9f04:	strh	r2, [r3, #0]
    9f06:	bx	lr
    9f08:	.word	0x40052000

00009f0c <startup_late_hook>:
#elif defined(KINETISL)
	SIM_COPC = 0;  // disable the watchdog
#endif
}
static void startup_default_late_hook(void) {}
    9f0c:	bx	lr
    9f0e:	nop

00009f10 <_sbrk>:

void * _sbrk(int incr)
{
	char *prev, *stack;

	prev = __brkval;
    9f10:	ldr	r1, [pc, #36]	; (9f38 <_sbrk+0x28>)

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wunused-parameter"

void * _sbrk(int incr)
{
    9f12:	push	{r3, lr}
	char *prev, *stack;

	prev = __brkval;
    9f14:	ldr	r3, [r1, #0]
	if (incr != 0) {
    9f16:	cbz	r0, 9f26 <_sbrk+0x16>
		__asm__ volatile("mov %0, sp" : "=r" (stack) ::);
    9f18:	mov	r2, sp
		if (prev + incr >= stack - STACK_MARGIN) {
    9f1a:	add	r0, r3
    9f1c:	sub.w	r2, r2, #8192	; 0x2000
    9f20:	cmp	r0, r2
    9f22:	bcs.n	9f2a <_sbrk+0x1a>
			errno = ENOMEM;
			return (void *)-1;
		}
		__brkval = prev + incr;
    9f24:	str	r0, [r1, #0]
	}
	return prev;
    9f26:	mov	r0, r3
}
    9f28:	pop	{r3, pc}

	prev = __brkval;
	if (incr != 0) {
		__asm__ volatile("mov %0, sp" : "=r" (stack) ::);
		if (prev + incr >= stack - STACK_MARGIN) {
			errno = ENOMEM;
    9f2a:	bl	c140 <__errno>
    9f2e:	movs	r3, #12
    9f30:	str	r3, [r0, #0]
			return (void *)-1;
    9f32:	mov.w	r0, #4294967295
    9f36:	pop	{r3, pc}
    9f38:	.word	0x1fff0998

00009f3c <__cxa_pure_virtual>:
	while (1);
}

__attribute__((weak)) 
void __cxa_pure_virtual()
{
    9f3c:	b.n	9f3c <__cxa_pure_virtual>
    9f3e:	nop

00009f40 <digitalWrite.part.1>:



// TODO: startup code needs to initialize all pins to GPIO mode, input by default

void digitalWrite(uint8_t pin, uint8_t val)
    9f40:	push	{r4}
{
	if (pin >= CORE_NUM_DIGITAL) return;
#ifdef KINETISK
	if (*portModeRegister(pin)) {
    9f42:	ldr	r3, [pc, #68]	; (9f88 <digitalWrite.part.1+0x48>)
    9f44:	ldr.w	r2, [r3, r0, lsl #3]
    9f48:	ldrb.w	r4, [r2, #640]	; 0x280
    9f4c:	cbz	r4, 9f5c <digitalWrite.part.1+0x1c>
		if (val) {
			*portSetRegister(pin) = 1;
    9f4e:	movs	r3, #1
void digitalWrite(uint8_t pin, uint8_t val)
{
	if (pin >= CORE_NUM_DIGITAL) return;
#ifdef KINETISK
	if (*portModeRegister(pin)) {
		if (val) {
    9f50:	cbz	r1, 9f72 <digitalWrite.part.1+0x32>
			*portSetRegister(pin) = 1;
    9f52:	strb.w	r3, [r2, #128]	; 0x80
			*config &= ~(PORT_PCR_PE);
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    9f56:	ldr.w	r4, [sp], #4
    9f5a:	bx	lr
		} else {
			*portClearRegister(pin) = digitalPinToBitMask(pin);
		}
#endif
	} else {
		volatile uint32_t *config = portConfigRegister(pin);
    9f5c:	add.w	r3, r3, r0, lsl #3
    9f60:	ldr	r3, [r3, #4]
		if (val) {
			// TODO use bitband for atomic read-mod-write
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
    9f62:	ldr	r2, [r3, #0]
			*portClearRegister(pin) = digitalPinToBitMask(pin);
		}
#endif
	} else {
		volatile uint32_t *config = portConfigRegister(pin);
		if (val) {
    9f64:	cbnz	r1, 9f7c <digitalWrite.part.1+0x3c>
			// TODO use bitband for atomic read-mod-write
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
			//*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
		} else {
			// TODO use bitband for atomic read-mod-write
			*config &= ~(PORT_PCR_PE);
    9f66:	bic.w	r2, r2, #2
    9f6a:	str	r2, [r3, #0]
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    9f6c:	ldr.w	r4, [sp], #4
    9f70:	bx	lr
#ifdef KINETISK
	if (*portModeRegister(pin)) {
		if (val) {
			*portSetRegister(pin) = 1;
		} else {
			*portClearRegister(pin) = 1;
    9f72:	strb.w	r3, [r2, #256]	; 0x100
			*config &= ~(PORT_PCR_PE);
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    9f76:	ldr.w	r4, [sp], #4
    9f7a:	bx	lr
#endif
	} else {
		volatile uint32_t *config = portConfigRegister(pin);
		if (val) {
			// TODO use bitband for atomic read-mod-write
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
    9f7c:	orr.w	r2, r2, #3
    9f80:	str	r2, [r3, #0]
			*config &= ~(PORT_PCR_PE);
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    9f82:	ldr.w	r4, [sp], #4
    9f86:	bx	lr
    9f88:	.word	0x0001077c

00009f8c <attachInterruptVector>:
static void portcd_interrupt(void);
#endif

void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void))
{
	_VectorsRam[irq + 16] = function;
    9f8c:	adds	r0, #16
    9f8e:	ldr	r3, [pc, #8]	; (9f98 <attachInterruptVector+0xc>)
    9f90:	str.w	r1, [r3, r0, lsl #2]
    9f94:	bx	lr
    9f96:	nop
    9f98:	.word	0x1fff0200

00009f9c <rtc_get>:

#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)

unsigned long rtc_get(void)
{
	return RTC_TSR;
    9f9c:	ldr	r3, [pc, #4]	; (9fa4 <rtc_get+0x8>)
    9f9e:	ldr	r0, [r3, #0]
}
    9fa0:	bx	lr
    9fa2:	nop
    9fa4:	.word	0x4003d000

00009fa8 <rtc_set>:

void rtc_set(unsigned long t)
{
    9fa8:	push	{r4, r5}
	RTC_SR = 0;
    9faa:	ldr	r3, [pc, #20]	; (9fc0 <rtc_set+0x18>)
	RTC_TPR = 0;
    9fac:	ldr	r5, [pc, #20]	; (9fc4 <rtc_set+0x1c>)
	RTC_TSR = t;
    9fae:	ldr	r4, [pc, #24]	; (9fc8 <rtc_set+0x20>)
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
	RTC_SR = 0;
    9fb0:	movs	r2, #0
	RTC_TPR = 0;
	RTC_TSR = t;
	RTC_SR = RTC_SR_TCE;
    9fb2:	movs	r1, #16
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
	RTC_SR = 0;
    9fb4:	str	r2, [r3, #0]
	RTC_TPR = 0;
    9fb6:	str	r2, [r5, #0]
	RTC_TSR = t;
    9fb8:	str	r0, [r4, #0]
	RTC_SR = RTC_SR_TCE;
    9fba:	str	r1, [r3, #0]
}
    9fbc:	pop	{r4, r5}
    9fbe:	bx	lr
    9fc0:	.word	0x4003d014
    9fc4:	.word	0x4003d004
    9fc8:	.word	0x4003d000

00009fcc <digitalWrite>:

// TODO: startup code needs to initialize all pins to GPIO mode, input by default

void digitalWrite(uint8_t pin, uint8_t val)
{
	if (pin >= CORE_NUM_DIGITAL) return;
    9fcc:	cmp	r0, #63	; 0x3f
    9fce:	bhi.n	9fd4 <digitalWrite+0x8>
    9fd0:	b.w	9f40 <digitalWrite.part.1>
    9fd4:	bx	lr
    9fd6:	nop

00009fd8 <micros>:

uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
    9fd8:	cpsid	i
	current = SYST_CVR;
	count = systick_millis_count;
    9fda:	ldr	r1, [pc, #48]	; (a00c <micros+0x34>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    9fdc:	ldr	r3, [pc, #48]	; (a010 <micros+0x38>)
	count = systick_millis_count;
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    9fde:	ldr	r2, [pc, #52]	; (a014 <micros+0x3c>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    9fe0:	ldr	r3, [r3, #0]
	count = systick_millis_count;
    9fe2:	ldr	r0, [r1, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    9fe4:	ldr	r2, [r2, #0]
	__enable_irq();
    9fe6:	cpsie	i
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    9fe8:	lsls	r2, r2, #5
    9fea:	bpl.n	9ff2 <micros+0x1a>
    9fec:	cmp	r3, #50	; 0x32
    9fee:	it	hi
    9ff0:	addhi	r0, #1
#if defined(KINETISL) && F_CPU == 48000000
	return count * 1000 + ((current * (uint32_t)87381) >> 22);
#elif defined(KINETISL) && F_CPU == 24000000
	return count * 1000 + ((current * (uint32_t)174763) >> 22);
#endif
	return count * 1000 + current / (F_CPU / 1000000);
    9ff2:	ldr	r1, [pc, #36]	; (a018 <micros+0x40>)
    9ff4:	rsb	r3, r3, #95744	; 0x17600
    9ff8:	mov.w	r2, #1000	; 0x3e8
    9ffc:	adds	r3, #255	; 0xff
    9ffe:	umull	r1, r3, r1, r3
    a002:	mul.w	r0, r2, r0
}
    a006:	add.w	r0, r0, r3, lsr #6
    a00a:	bx	lr
    a00c:	.word	0x1fff8c34
    a010:	.word	0xe000e018
    a014:	.word	0xe000ed04
    a018:	.word	0xaaaaaaab

0000a01c <delay>:

void delay(uint32_t ms)
{
    a01c:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    a020:	mov	r5, r0

uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
    a022:	cpsid	i
	current = SYST_CVR;
	count = systick_millis_count;
    a024:	ldr	r7, [pc, #128]	; (a0a8 <delay+0x8c>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    a026:	ldr	r3, [pc, #132]	; (a0ac <delay+0x90>)
	count = systick_millis_count;
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    a028:	ldr	r2, [pc, #132]	; (a0b0 <delay+0x94>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    a02a:	ldr	r3, [r3, #0]
	count = systick_millis_count;
    a02c:	ldr	r4, [r7, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    a02e:	ldr	r2, [r2, #0]
	__enable_irq();
    a030:	cpsie	i
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    a032:	lsls	r2, r2, #5
    a034:	bpl.n	a03c <delay+0x20>
    a036:	cmp	r3, #50	; 0x32
    a038:	it	hi
    a03a:	addhi	r4, #1

void delay(uint32_t ms)
{
	uint32_t start = micros();

	if (ms > 0) {
    a03c:	cbz	r5, a0a4 <delay+0x88>
#if defined(KINETISL) && F_CPU == 48000000
	return count * 1000 + ((current * (uint32_t)87381) >> 22);
#elif defined(KINETISL) && F_CPU == 24000000
	return count * 1000 + ((current * (uint32_t)174763) >> 22);
#endif
	return count * 1000 + current / (F_CPU / 1000000);
    a03e:	rsb	r3, r3, #95744	; 0x17600
    a042:	ldr	r6, [pc, #112]	; (a0b4 <delay+0x98>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    a044:	ldr.w	r9, [pc, #100]	; a0ac <delay+0x90>
	count = systick_millis_count;
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    a048:	ldr.w	r8, [pc, #100]	; a0b0 <delay+0x94>
#if defined(KINETISL) && F_CPU == 48000000
	return count * 1000 + ((current * (uint32_t)87381) >> 22);
#elif defined(KINETISL) && F_CPU == 24000000
	return count * 1000 + ((current * (uint32_t)174763) >> 22);
#endif
	return count * 1000 + current / (F_CPU / 1000000);
    a04c:	adds	r3, #255	; 0xff
    a04e:	mov.w	r2, #1000	; 0x3e8
    a052:	umull	r1, r3, r6, r3
    a056:	mul.w	r4, r2, r4
    a05a:	add.w	r4, r4, r3, lsr #6

uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
    a05e:	cpsid	i
	current = SYST_CVR;
    a060:	ldr.w	r1, [r9]
	count = systick_millis_count;
    a064:	ldr	r2, [r7, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    a066:	ldr.w	lr, [r8]
	__enable_irq();
    a06a:	cpsie	i
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    a06c:	rsb	r3, r1, #95744	; 0x17600
    a070:	adds	r3, #255	; 0xff
    a072:	umull	r0, r3, r6, r3
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
	__enable_irq();
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    a076:	tst.w	lr, #67108864	; 0x4000000
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    a07a:	rsb	r3, r4, r3, lsr #6
    a07e:	mov.w	r0, #1000	; 0x3e8
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
	__enable_irq();
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    a082:	beq.n	a08a <delay+0x6e>
    a084:	cmp	r1, #50	; 0x32
    a086:	it	hi
    a088:	addhi	r2, #1
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    a08a:	mla	r3, r0, r2, r3
    a08e:	cmp.w	r3, #1000	; 0x3e8
    a092:	bcc.n	a09e <delay+0x82>
				ms--;
				if (ms == 0) return;
    a094:	subs	r5, #1
    a096:	beq.n	a0a4 <delay+0x88>
				start += 1000;
    a098:	add.w	r4, r4, #1000	; 0x3e8
    a09c:	b.n	a05e <delay+0x42>
			}
			yield();
    a09e:	bl	afb4 <yield>
		}
    a0a2:	b.n	a05e <delay+0x42>
    a0a4:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    a0a8:	.word	0x1fff8c34
    a0ac:	.word	0xe000e018
    a0b0:	.word	0xe000ed04
    a0b4:	.word	0xaaaaaaab

0000a0b8 <_init_Teensyduino_internal_>:
#endif

//void init_pins(void)
__attribute__((noinline))
void _init_Teensyduino_internal_(void)
{
    a0b8:	push	{r3, r4, r5, r6, r7, lr}
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
    a0ba:	ldr	r3, [pc, #312]	; (a1f4 <_init_Teensyduino_internal_+0x13c>)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
    a0bc:	ldr	r0, [pc, #312]	; (a1f8 <_init_Teensyduino_internal_+0x140>)
	FTM0_MOD = DEFAULT_FTM_MOD;
    a0be:	ldr.w	ip, [pc, #348]	; a21c <_init_Teensyduino_internal_+0x164>
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
	FTM0_C1SC = 0x28;
    a0c2:	ldr	r4, [pc, #312]	; (a1fc <_init_Teensyduino_internal_+0x144>)
	FTM0_C2SC = 0x28;
    a0c4:	ldr	r1, [pc, #312]	; (a200 <_init_Teensyduino_internal_+0x148>)
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    a0c6:	ldr.w	lr, [pc, #344]	; a220 <_init_Teensyduino_internal_+0x168>
	FTM0_C1SC = 0x28;
	FTM0_C2SC = 0x28;
	FTM0_C3SC = 0x28;
    a0ca:	ldr	r6, [pc, #312]	; (a204 <_init_Teensyduino_internal_+0x14c>)
	FTM0_C4SC = 0x28;
    a0cc:	ldr	r5, [pc, #312]	; (a208 <_init_Teensyduino_internal_+0x150>)
	FTM0_C5SC = 0x28;
    a0ce:	ldr	r7, [pc, #316]	; (a20c <_init_Teensyduino_internal_+0x154>)
//void init_pins(void)
__attribute__((noinline))
void _init_Teensyduino_internal_(void)
{
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
    a0d0:	mov.w	r2, #134217728	; 0x8000000
    a0d4:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTB);
    a0d6:	mov.w	r2, #268435456	; 0x10000000
    a0da:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTC);
    a0dc:	mov.w	r2, #536870912	; 0x20000000
    a0e0:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTD);
    a0e2:	mov.w	r2, #1073741824	; 0x40000000
    a0e6:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTE);
    a0e8:	mov.w	r2, #2147483648	; 0x80000000
    a0ec:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTA);
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
    a0ee:	movs	r2, #0
    a0f0:	str	r2, [r0, #0]
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    a0f2:	movs	r3, #40	; 0x28
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
    a0f4:	movw	r0, #49151	; 0xbfff
    a0f8:	str.w	r0, [ip]
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    a0fc:	str.w	r3, [lr]
	FTM0_C1SC = 0x28;
    a100:	str	r3, [r4, #0]
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
    a102:	add.w	lr, lr, #528384	; 0x81000
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
	FTM0_C1SC = 0x28;
	FTM0_C2SC = 0x28;
    a106:	str	r3, [r1, #0]
	FTM0_C3SC = 0x28;
    a108:	str	r3, [r6, #0]
	FTM0_C4SC = 0x28;
    a10a:	str	r3, [r5, #0]
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
    a10c:	add.w	r6, r6, #524288	; 0x80000
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
	FTM0_C1SC = 0x28;
	FTM0_C2SC = 0x28;
	FTM0_C3SC = 0x28;
	FTM0_C4SC = 0x28;
	FTM0_C5SC = 0x28;
    a110:	str	r3, [r7, #0]
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
    a112:	add.w	r5, r5, #524288	; 0x80000
	FTM0_C2SC = 0x28;
	FTM0_C3SC = 0x28;
	FTM0_C4SC = 0x28;
	FTM0_C5SC = 0x28;
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
    a116:	str	r3, [r4, #40]	; 0x28
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
    a118:	add.w	r7, r7, #524288	; 0x80000
	FTM0_C3SC = 0x28;
	FTM0_C4SC = 0x28;
	FTM0_C5SC = 0x28;
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
    a11c:	str	r3, [r1, #40]	; 0x28
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
	FTM3_C4SC = 0x28;
	FTM3_C5SC = 0x28;
    a11e:	add.w	r4, r4, #528384	; 0x81000
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
	FTM3_C4SC = 0x28;
    a122:	add.w	r1, r1, #528384	; 0x81000
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
    a126:	addw	r6, r6, #4072	; 0xfe8
	FTM3_C1SC = 0x28;
    a12a:	addw	r5, r5, #4072	; 0xfe8
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
    a12e:	add.w	r7, r7, #4080	; 0xff0
	FTM3_C4SC = 0x28;
    a132:	adds	r1, #16
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
    a134:	add.w	lr, lr, #16
	FTM3_C3SC = 0x28;
	FTM3_C4SC = 0x28;
	FTM3_C5SC = 0x28;
    a138:	adds	r4, #32
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
    a13a:	str	r3, [r6, #0]
	FTM3_C1SC = 0x28;
    a13c:	str	r3, [r5, #0]
	FTM3_C2SC = 0x28;
    a13e:	str.w	r3, [lr]
	FTM3_C3SC = 0x28;
    a142:	str	r3, [r7, #0]
	FTM3_C4SC = 0x28;
    a144:	str	r3, [r1, #0]
	FTM3_C5SC = 0x28;
    a146:	str	r3, [r4, #0]
	FTM3_C6SC = 0x28;
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    a148:	ldr	r4, [pc, #196]	; (a210 <_init_Teensyduino_internal_+0x158>)
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
	FTM3_C4SC = 0x28;
	FTM3_C5SC = 0x28;
	FTM3_C6SC = 0x28;
    a14a:	str	r3, [r7, #24]
	FTM3_C7SC = 0x28;
    a14c:	str	r3, [r1, #24]
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    a14e:	movs	r1, #9
    a150:	str	r1, [r4, #0]
	FTM1_CNT = 0;
    a152:	sub.w	r7, r7, #524288	; 0x80000
	FTM1_MOD = DEFAULT_FTM_MOD;
    a156:	add.w	r4, r4, #4096	; 0x1000
	FTM3_C5SC = 0x28;
	FTM3_C6SC = 0x28;
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
	FTM1_CNT = 0;
    a15a:	subs	r7, #32
	FTM1_MOD = DEFAULT_FTM_MOD;
    a15c:	adds	r4, #8
	FTM3_C5SC = 0x28;
	FTM3_C6SC = 0x28;
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
	FTM1_CNT = 0;
    a15e:	str	r2, [r7, #0]
	FTM1_MOD = DEFAULT_FTM_MOD;
    a160:	str	r0, [r4, #0]
	FTM1_C0SC = 0x28;
    a162:	str	r3, [r7, #8]
	FTM1_C1SC = 0x28;
    a164:	str	r3, [r4, #12]
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    a166:	str.w	r1, [r7, #-4]
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
    a16a:	add.w	r4, r4, #518144	; 0x7e800
	FTM2_MOD = DEFAULT_FTM_MOD;
    a16e:	add.w	r7, r7, #520192	; 0x7f000
    a172:	adds	r7, #4
	FTM1_MOD = DEFAULT_FTM_MOD;
	FTM1_C0SC = 0x28;
	FTM1_C1SC = 0x28;
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
    a174:	addw	r4, r4, #2044	; 0x7fc
    a178:	str	r2, [r4, #0]
	FTM2_MOD = DEFAULT_FTM_MOD;
    a17a:	str	r0, [r7, #0]
	FTM2_C0SC = 0x28;
    a17c:	str	r3, [r4, #8]
	FTM2_C1SC = 0x28;
    a17e:	str	r3, [r7, #12]
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    a180:	str.w	r1, [r4, #-4]
	FTM1_C1SC = 0x28;
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
	FTM2_MOD = DEFAULT_FTM_MOD;
	FTM2_C0SC = 0x28;
    a184:	adds	r4, #8
	FTM2_C1SC = 0x28;
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_CNT = 0;
	FTM3_MOD = DEFAULT_FTM_MOD;
    a186:	addw	r4, r4, #4092	; 0xffc
	FTM2_C0SC = 0x28;
	FTM2_C1SC = 0x28;
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_CNT = 0;
    a18a:	str.w	r2, [r7, #4092]	; 0xffc
	FTM3_MOD = DEFAULT_FTM_MOD;
    a18e:	str	r0, [r4, #0]
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
    a190:	sub.w	r4, r4, #460800	; 0x70800
    a194:	subw	r4, r4, #2012	; 0x7dc
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_CNT = 0;
	FTM3_MOD = DEFAULT_FTM_MOD;
	FTM3_C0SC = 0x28;
    a198:	str	r3, [r6, #0]
	FTM3_C1SC = 0x28;
    a19a:	str	r3, [r5, #0]
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    a19c:	str.w	r1, [r7, #4088]	; 0xff8
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
    a1a0:	ldr	r1, [r4, #0]
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
    a1a2:	ldr	r0, [pc, #112]	; (a214 <_init_Teensyduino_internal_+0x15c>)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
    a1a4:	orr.w	r1, r1, #512	; 0x200
    a1a8:	str	r1, [r4, #0]
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
    a1aa:	ldr	r1, [r0, #0]
	TPM1_CNT = 0;
	TPM1_MOD = 32767;
	TPM1_C0SC = 0x28;
	TPM1_C1SC = 0x28;
	TPM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0);
    a1ac:	ldr	r4, [pc, #104]	; (a218 <_init_Teensyduino_internal_+0x160>)
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
	TPM1_CNT = 0;
    a1ae:	add.w	lr, lr, #65280	; 0xff00
    a1b2:	add.w	lr, lr, #232	; 0xe8
	TPM1_MOD = 32767;
    a1b6:	add.w	r7, r7, #69632	; 0x11000
	TPM1_C0SC = 0x28;
    a1ba:	add.w	r6, r6, #65536	; 0x10000
	TPM1_C1SC = 0x28;
    a1be:	add.w	r5, r5, #65536	; 0x10000
	FTM3_C1SC = 0x28;
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
    a1c2:	orr.w	r1, r1, #33554432	; 0x2000000
    a1c6:	str	r1, [r0, #0]
	TPM1_CNT = 0;
    a1c8:	str.w	r2, [lr]
	TPM1_MOD = 32767;
    a1cc:	movw	r1, #32767	; 0x7fff
	TPM1_C0SC = 0x28;
	TPM1_C1SC = 0x28;
	TPM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0);
    a1d0:	movs	r2, #8
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
	TPM1_CNT = 0;
	TPM1_MOD = 32767;
    a1d2:	str	r1, [r7, #0]
	TPM1_C0SC = 0x28;
    a1d4:	str	r3, [r6, #0]
	TPM1_C1SC = 0x28;
    a1d6:	str	r3, [r5, #0]
	TPM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0);
    a1d8:	str	r2, [r4, #0]
#endif
	analog_init();
    a1da:	bl	b348 <analog_init>

	// for background about this startup delay, please see these conversations
	// https://forum.pjrc.com/threads/36606-startup-time-(400ms)?p=113980&viewfull=1#post113980
	// https://forum.pjrc.com/threads/31290-Teensey-3-2-Teensey-Loader-1-24-Issues?p=87273&viewfull=1#post87273

	delay(TEENSY_INIT_USB_DELAY_BEFORE);
    a1de:	movs	r0, #25
    a1e0:	bl	a01c <delay>
	usb_init();
    a1e4:	bl	aeec <usb_init>
	delay(TEENSY_INIT_USB_DELAY_AFTER);
    a1e8:	movw	r0, #275	; 0x113
}
    a1ec:	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	// https://forum.pjrc.com/threads/36606-startup-time-(400ms)?p=113980&viewfull=1#post113980
	// https://forum.pjrc.com/threads/31290-Teensey-3-2-Teensey-Loader-1-24-Issues?p=87273&viewfull=1#post87273

	delay(TEENSY_INIT_USB_DELAY_BEFORE);
	usb_init();
	delay(TEENSY_INIT_USB_DELAY_AFTER);
    a1f0:	b.w	a01c <delay>
    a1f4:	.word	0xe000e104
    a1f8:	.word	0x40038004
    a1fc:	.word	0x40038014
    a200:	.word	0x4003801c
    a204:	.word	0x40038024
    a208:	.word	0x4003802c
    a20c:	.word	0x40038034
    a210:	.word	0x40038000
    a214:	.word	0x40048004
    a218:	.word	0x400c9000
    a21c:	.word	0x40038008
    a220:	.word	0x4003800c

0000a224 <usb_malloc>:
usb_packet_t * usb_malloc(void)
{
	unsigned int n, avail;
	uint8_t *p;

	__disable_irq();
    a224:	cpsid	i
	avail = usb_buffer_available;
    a226:	ldr	r0, [pc, #52]	; (a25c <usb_malloc+0x38>)
    a228:	ldr	r2, [r0, #0]
	n = __builtin_clz(avail); // clz = count leading zeros
    a22a:	clz	r3, r2
	if (n >= NUM_USB_BUFFERS) {
    a22e:	cmp	r3, #19
    a230:	bgt.n	a254 <usb_malloc+0x30>
	}
	//serial_print("malloc:");
	//serial_phex(n);
	//serial_print("\n");

	usb_buffer_available = avail & ~(0x80000000 >> n);
    a232:	mov.w	r1, #2147483648	; 0x80000000
    a236:	lsrs	r1, r3
    a238:	bic.w	r2, r2, r1
    a23c:	str	r2, [r0, #0]
	__enable_irq();
    a23e:	cpsie	i
	p = usb_buffer_memory + (n * sizeof(usb_packet_t));
    a240:	ldr	r0, [pc, #28]	; (a260 <usb_malloc+0x3c>)
    a242:	add.w	r3, r3, r3, lsl #3
    a246:	lsls	r3, r3, #3
    a248:	adds	r2, r0, r3
	//serial_print("malloc:");
	//serial_phex32((int)p);
	//serial_print("\n");
	*(uint32_t *)p = 0;
    a24a:	movs	r1, #0
    a24c:	str	r1, [r0, r3]
	*(uint32_t *)(p + 4) = 0;
	return (usb_packet_t *)p;
    a24e:	mov	r0, r2
	p = usb_buffer_memory + (n * sizeof(usb_packet_t));
	//serial_print("malloc:");
	//serial_phex32((int)p);
	//serial_print("\n");
	*(uint32_t *)p = 0;
	*(uint32_t *)(p + 4) = 0;
    a250:	str	r1, [r2, #4]
	return (usb_packet_t *)p;
}
    a252:	bx	lr

	__disable_irq();
	avail = usb_buffer_available;
	n = __builtin_clz(avail); // clz = count leading zeros
	if (n >= NUM_USB_BUFFERS) {
		__enable_irq();
    a254:	cpsie	i
		return NULL;
    a256:	movs	r0, #0
    a258:	bx	lr
    a25a:	nop
    a25c:	.word	0x1fff099c
    a260:	.word	0x1fff03d0

0000a264 <usb_free>:
void usb_free(usb_packet_t *p)
{
	unsigned int n, mask;

	//serial_print("free:");
	n = ((uint8_t *)p - usb_buffer_memory) / sizeof(usb_packet_t);
    a264:	ldr	r3, [pc, #52]	; (a29c <usb_free+0x38>)
    a266:	ldr	r2, [pc, #56]	; (a2a0 <usb_free+0x3c>)
    a268:	subs	r3, r0, r3
    a26a:	umull	r2, r3, r2, r3
    a26e:	lsrs	r3, r3, #4
	if (n >= NUM_USB_BUFFERS) return;
    a270:	cmp	r3, #19
    a272:	bhi.n	a28e <usb_free+0x2a>
	//serial_phex(n);
	//serial_print("\n");

	// if any endpoints are starving for memory to receive
	// packets, give this memory to them immediately!
	if (usb_rx_memory_needed && usb_configuration) {
    a274:	ldr	r2, [pc, #44]	; (a2a4 <usb_free+0x40>)
    a276:	ldrb	r2, [r2, #0]
    a278:	cbnz	r2, a290 <usb_free+0x2c>
		usb_rx_memory(p);
		return;
	}

	mask = (0x80000000 >> n);
	__disable_irq();
    a27a:	cpsid	i
	usb_buffer_available |= mask;
    a27c:	ldr	r0, [pc, #40]	; (a2a8 <usb_free+0x44>)
    a27e:	mov.w	r1, #2147483648	; 0x80000000
    a282:	ldr	r2, [r0, #0]
    a284:	lsr.w	r3, r1, r3
    a288:	orrs	r2, r3
    a28a:	str	r2, [r0, #0]
	__enable_irq();
    a28c:	cpsie	i
    a28e:	bx	lr
	//serial_phex(n);
	//serial_print("\n");

	// if any endpoints are starving for memory to receive
	// packets, give this memory to them immediately!
	if (usb_rx_memory_needed && usb_configuration) {
    a290:	ldr	r2, [pc, #24]	; (a2ac <usb_free+0x48>)
    a292:	ldrb	r2, [r2, #0]
    a294:	cmp	r2, #0
    a296:	beq.n	a27a <usb_free+0x16>
		//serial_print("give to rx:");
		//serial_phex32((int)p);
		//serial_print("\n");
		usb_rx_memory(p);
    a298:	b.w	a318 <usb_rx_memory>
    a29c:	.word	0x1fff03d0
    a2a0:	.word	0x38e38e39
    a2a4:	.word	0x1fff8d2d
    a2a8:	.word	0x1fff099c
    a2ac:	.word	0x1fff8d38

0000a2b0 <usb_rx>:


usb_packet_t *usb_rx(uint32_t endpoint)
{
	usb_packet_t *ret;
	endpoint--;
    a2b0:	subs	r3, r0, #1
	if (endpoint >= NUM_ENDPOINTS) return NULL;
    a2b2:	cmp	r3, #5
    a2b4:	bhi.n	a2e0 <usb_rx+0x30>
	__disable_irq();
    a2b6:	cpsid	i
	ret = rx_first[endpoint];
    a2b8:	ldr	r1, [pc, #40]	; (a2e4 <usb_rx+0x34>)
    a2ba:	ldr.w	r0, [r1, r3, lsl #2]
	if (ret) {
    a2be:	cbz	r0, a2dc <usb_rx+0x2c>




usb_packet_t *usb_rx(uint32_t endpoint)
{
    a2c0:	push	{r4, r5, r6}
	if (endpoint >= NUM_ENDPOINTS) return NULL;
	__disable_irq();
	ret = rx_first[endpoint];
	if (ret) {
		rx_first[endpoint] = ret->next;
		usb_rx_byte_count_data[endpoint] -= ret->len;
    a2c2:	ldr	r4, [pc, #36]	; (a2e8 <usb_rx+0x38>)
    a2c4:	ldrh	r5, [r0, #0]
    a2c6:	ldrh.w	r2, [r4, r3, lsl #1]
	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return NULL;
	__disable_irq();
	ret = rx_first[endpoint];
	if (ret) {
		rx_first[endpoint] = ret->next;
    a2ca:	ldr	r6, [r0, #4]
    a2cc:	str.w	r6, [r1, r3, lsl #2]
		usb_rx_byte_count_data[endpoint] -= ret->len;
    a2d0:	subs	r2, r2, r5
    a2d2:	strh.w	r2, [r4, r3, lsl #1]
	}
	__enable_irq();
    a2d6:	cpsie	i
	//serial_phex(endpoint);
	//serial_print(", packet=");
	//serial_phex32(ret);
	//serial_print("\n");
	return ret;
}
    a2d8:	pop	{r4, r5, r6}
    a2da:	bx	lr
	ret = rx_first[endpoint];
	if (ret) {
		rx_first[endpoint] = ret->next;
		usb_rx_byte_count_data[endpoint] -= ret->len;
	}
	__enable_irq();
    a2dc:	cpsie	i
	//serial_phex(endpoint);
	//serial_print(", packet=");
	//serial_phex32(ret);
	//serial_print("\n");
	return ret;
}
    a2de:	bx	lr

usb_packet_t *usb_rx(uint32_t endpoint)
{
	usb_packet_t *ret;
	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return NULL;
    a2e0:	movs	r0, #0
    a2e2:	bx	lr
    a2e4:	.word	0x1fff8c98
    a2e8:	.word	0x1fff8db8

0000a2ec <usb_tx_packet_count>:
uint32_t usb_tx_packet_count(uint32_t endpoint)
{
	const usb_packet_t *p;
	uint32_t count=0;

	endpoint--;
    a2ec:	subs	r0, #1
	if (endpoint >= NUM_ENDPOINTS) return 0;
    a2ee:	cmp	r0, #5
    a2f0:	bhi.n	a30a <usb_tx_packet_count+0x1e>
	__disable_irq();
    a2f2:	cpsid	i
	for (p = tx_first[endpoint]; p; p = p->next) count++;
    a2f4:	ldr	r3, [pc, #28]	; (a314 <usb_tx_packet_count+0x28>)
    a2f6:	ldr.w	r3, [r3, r0, lsl #2]
    a2fa:	cbz	r3, a30e <usb_tx_packet_count+0x22>
    a2fc:	movs	r0, #0
    a2fe:	ldr	r3, [r3, #4]
    a300:	adds	r0, #1
    a302:	cmp	r3, #0
    a304:	bne.n	a2fe <usb_tx_packet_count+0x12>
	__enable_irq();
    a306:	cpsie	i
	return count;
    a308:	bx	lr
{
	const usb_packet_t *p;
	uint32_t count=0;

	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return 0;
    a30a:	movs	r0, #0
	__disable_irq();
	for (p = tx_first[endpoint]; p; p = p->next) count++;
	__enable_irq();
	return count;
}
    a30c:	bx	lr
// https://forum.pjrc.com/threads/58663?p=223513&viewfull=1#post223513
//
uint32_t usb_tx_packet_count(uint32_t endpoint)
{
	const usb_packet_t *p;
	uint32_t count=0;
    a30e:	mov	r0, r3
    a310:	b.n	a306 <usb_tx_packet_count+0x1a>
    a312:	nop
    a314:	.word	0x1fff8cf4

0000a318 <usb_rx_memory>:
// user is creating data very quickly, their consumption could starve reception
// without this prioritization.  The packet buffer (input) is assigned to the
// first endpoint needing memory.
//
void usb_rx_memory(usb_packet_t *packet)
{
    a318:	push	{r4, r5}
	unsigned int i;
	const uint8_t *cfg;

	cfg = usb_endpoint_config_table;
	//serial_print("rx_mem:");
	__disable_irq();
    a31a:	cpsid	i
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    a31c:	ldr	r2, [pc, #236]	; (a40c <usb_rx_memory+0xf4>)
    a31e:	ldrb	r3, [r2, #0]
    a320:	lsls	r1, r3, #28
    a322:	bpl.n	a332 <usb_rx_memory+0x1a>
			if (table[index(i, RX, EVEN)].desc == 0) {
    a324:	ldr	r3, [pc, #232]	; (a410 <usb_rx_memory+0xf8>)
    a326:	ldr	r1, [r3, #32]
    a328:	cmp	r1, #0
    a32a:	beq.n	a3cc <usb_rx_memory+0xb4>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    a32c:	ldr	r1, [r3, #40]	; 0x28
    a32e:	cmp	r1, #0
    a330:	beq.n	a3e8 <usb_rx_memory+0xd0>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    a332:	ldrb	r3, [r2, #1]
    a334:	lsls	r3, r3, #28
    a336:	bpl.n	a346 <usb_rx_memory+0x2e>
			if (table[index(i, RX, EVEN)].desc == 0) {
    a338:	ldr	r3, [pc, #212]	; (a410 <usb_rx_memory+0xf8>)
    a33a:	ldr	r1, [r3, #64]	; 0x40
    a33c:	cmp	r1, #0
    a33e:	beq.n	a3fc <usb_rx_memory+0xe4>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    a340:	ldr	r1, [r3, #72]	; 0x48
    a342:	cmp	r1, #0
    a344:	beq.n	a3ec <usb_rx_memory+0xd4>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    a346:	ldrb	r3, [r2, #2]
    a348:	lsls	r5, r3, #28
    a34a:	bpl.n	a35a <usb_rx_memory+0x42>
			if (table[index(i, RX, EVEN)].desc == 0) {
    a34c:	ldr	r3, [pc, #192]	; (a410 <usb_rx_memory+0xf8>)
    a34e:	ldr	r1, [r3, #96]	; 0x60
    a350:	cmp	r1, #0
    a352:	beq.n	a3f8 <usb_rx_memory+0xe0>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    a354:	ldr	r1, [r3, #104]	; 0x68
    a356:	cmp	r1, #0
    a358:	beq.n	a3f0 <usb_rx_memory+0xd8>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    a35a:	ldrb	r3, [r2, #3]
    a35c:	lsls	r4, r3, #28
    a35e:	bpl.n	a372 <usb_rx_memory+0x5a>
			if (table[index(i, RX, EVEN)].desc == 0) {
    a360:	ldr	r3, [pc, #172]	; (a410 <usb_rx_memory+0xf8>)
    a362:	ldr.w	r1, [r3, #128]	; 0x80
    a366:	cmp	r1, #0
    a368:	beq.n	a400 <usb_rx_memory+0xe8>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    a36a:	ldr.w	r1, [r3, #136]	; 0x88
    a36e:	cmp	r1, #0
    a370:	beq.n	a3f4 <usb_rx_memory+0xdc>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    a372:	ldrb	r3, [r2, #4]
    a374:	lsls	r1, r3, #28
    a376:	bpl.n	a388 <usb_rx_memory+0x70>
			if (table[index(i, RX, EVEN)].desc == 0) {
    a378:	ldr	r3, [pc, #148]	; (a410 <usb_rx_memory+0xf8>)
    a37a:	ldr.w	r1, [r3, #160]	; 0xa0
    a37e:	cmp	r1, #0
    a380:	beq.n	a408 <usb_rx_memory+0xf0>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    a382:	ldr.w	r1, [r3, #168]	; 0xa8
    a386:	cbz	r1, a3ae <usb_rx_memory+0x96>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    a388:	ldrb	r3, [r2, #5]
    a38a:	lsls	r3, r3, #28
    a38c:	bpl.n	a3a0 <usb_rx_memory+0x88>
			if (table[index(i, RX, EVEN)].desc == 0) {
    a38e:	ldr	r3, [pc, #128]	; (a410 <usb_rx_memory+0xf8>)
    a390:	ldr.w	r2, [r3, #192]	; 0xc0
    a394:	cmp	r2, #0
    a396:	beq.n	a404 <usb_rx_memory+0xec>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    a398:	ldr.w	r2, [r3, #200]	; 0xc8
    a39c:	movs	r4, #25
    a39e:	cbz	r2, a3b0 <usb_rx_memory+0x98>
				//serial_print(",odd\n");
				return;
			}
		}
	}
	__enable_irq();
    a3a0:	cpsie	i
	// we should never reach this point.  If we get here, it means
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
    a3a2:	ldr	r3, [pc, #112]	; (a414 <usb_rx_memory+0xfc>)
    a3a4:	movs	r2, #0
    a3a6:	strb	r2, [r3, #0]
	usb_free(packet);
	return;
}
    a3a8:	pop	{r4, r5}
	__enable_irq();
	// we should never reach this point.  If we get here, it means
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
	usb_free(packet);
    a3aa:	b.w	a264 <usb_free>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    a3ae:	movs	r4, #21
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
    a3b0:	ldr	r1, [pc, #96]	; (a414 <usb_rx_memory+0xfc>)
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    a3b2:	ldr	r5, [pc, #100]	; (a418 <usb_rx_memory+0x100>)
				usb_rx_memory_needed--;
    a3b4:	ldrb	r2, [r1, #0]
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    a3b6:	str.w	r5, [r3, r4, lsl #3]
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
    a3ba:	add.w	r3, r3, r4, lsl #3
    a3be:	adds	r0, #8
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
    a3c0:	subs	r2, #1
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
    a3c2:	str	r0, [r3, #4]
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
    a3c4:	strb	r2, [r1, #0]
				__enable_irq();
    a3c6:	cpsie	i
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
	usb_free(packet);
	return;
}
    a3c8:	pop	{r4, r5}
    a3ca:	bx	lr
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
    a3cc:	movs	r2, #4
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
    a3ce:	ldr	r4, [pc, #68]	; (a414 <usb_rx_memory+0xfc>)
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    a3d0:	ldr	r5, [pc, #72]	; (a41c <usb_rx_memory+0x104>)
				usb_rx_memory_needed--;
    a3d2:	ldrb	r1, [r4, #0]
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    a3d4:	str.w	r5, [r3, r2, lsl #3]
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
    a3d8:	add.w	r3, r3, r2, lsl #3
    a3dc:	adds	r0, #8
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
    a3de:	subs	r2, r1, #1
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
    a3e0:	str	r0, [r3, #4]
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
    a3e2:	strb	r2, [r4, #0]
				__enable_irq();
    a3e4:	cpsie	i
				//serial_phex(i);
				//serial_print(",even\n");
				return;
    a3e6:	b.n	a3c8 <usb_rx_memory+0xb0>
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    a3e8:	movs	r4, #5
    a3ea:	b.n	a3b0 <usb_rx_memory+0x98>
    a3ec:	movs	r4, #9
    a3ee:	b.n	a3b0 <usb_rx_memory+0x98>
    a3f0:	movs	r4, #13
    a3f2:	b.n	a3b0 <usb_rx_memory+0x98>
    a3f4:	movs	r4, #17
    a3f6:	b.n	a3b0 <usb_rx_memory+0x98>
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
    a3f8:	movs	r2, #12
    a3fa:	b.n	a3ce <usb_rx_memory+0xb6>
    a3fc:	movs	r2, #8
    a3fe:	b.n	a3ce <usb_rx_memory+0xb6>
    a400:	movs	r2, #16
    a402:	b.n	a3ce <usb_rx_memory+0xb6>
    a404:	movs	r2, #24
    a406:	b.n	a3ce <usb_rx_memory+0xb6>
    a408:	movs	r2, #20
    a40a:	b.n	a3ce <usb_rx_memory+0xb6>
    a40c:	.word	0x000109a8
    a410:	.word	0x1fff0000
    a414:	.word	0x1fff8d2d
    a418:	.word	0x004000c8
    a41c:	.word	0x00400088

0000a420 <usb_tx>:
void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
	uint8_t next;

	endpoint--;
    a420:	subs	r3, r0, #1
	if (endpoint >= NUM_ENDPOINTS) return;
    a422:	cmp	r3, #5
    a424:	bhi.n	a462 <usb_tx+0x42>
//#define index(endpoint, tx, odd) (((endpoint) << 2) | ((tx) << 1) | (odd))
//#define stat2bufferdescriptor(stat) (table + ((stat) >> 2))

void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
    a426:	ldr	r2, [pc, #108]	; (a494 <usb_tx+0x74>)
    a428:	lsls	r0, r0, #5
    a42a:	orr.w	r0, r0, #16

//#define index(endpoint, tx, odd) (((endpoint) << 2) | ((tx) << 1) | (odd))
//#define stat2bufferdescriptor(stat) (table + ((stat) >> 2))

void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
    a42e:	push	{r4, r5}
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
    a430:	add	r0, r2
	uint8_t next;

	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return;
	__disable_irq();
    a432:	cpsid	i
	//serial_print("txstate=");
	//serial_phex(tx_state[endpoint]);
	//serial_print("\n");
	switch (tx_state[endpoint]) {
    a434:	ldr	r4, [pc, #96]	; (a498 <usb_tx+0x78>)
    a436:	ldrb	r2, [r4, r3]
    a438:	cmp	r2, #3
    a43a:	bhi.n	a474 <usb_tx+0x54>
    a43c:	tbb	[pc, r2]
    a440:	.word	0x17151202
	  case TX_STATE_BOTH_FREE_EVEN_FIRST:
		next = TX_STATE_ODD_FREE;
    a444:	movs	r2, #3
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    a446:	ldrh	r5, [r1, #0]
		}
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
    a448:	strb	r2, [r4, r3]
	b->addr = packet->buf;
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    a44a:	tst.w	r0, #8
    a44e:	ite	ne
    a450:	movne	r3, #200	; 0xc8
    a452:	moveq	r3, #136	; 0x88
    a454:	orr.w	r3, r3, r5, lsl #16
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
    a458:	adds	r1, #8
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    a45a:	str	r3, [r0, #0]
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
    a45c:	str	r1, [r0, #4]
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
	__enable_irq();
    a45e:	cpsie	i
}
    a460:	pop	{r4, r5}
    a462:	bx	lr
	switch (tx_state[endpoint]) {
	  case TX_STATE_BOTH_FREE_EVEN_FIRST:
		next = TX_STATE_ODD_FREE;
		break;
	  case TX_STATE_BOTH_FREE_ODD_FIRST:
		b++;
    a464:	adds	r0, #8
		next = TX_STATE_EVEN_FREE;
    a466:	movs	r2, #2
		break;
    a468:	b.n	a446 <usb_tx+0x26>
	  case TX_STATE_EVEN_FREE:
		next = TX_STATE_NONE_FREE_ODD_FIRST;
    a46a:	movs	r2, #5
    a46c:	b.n	a446 <usb_tx+0x26>
		break;
	  case TX_STATE_ODD_FREE:
		b++;
    a46e:	adds	r0, #8
		next = TX_STATE_NONE_FREE_EVEN_FIRST;
    a470:	movs	r2, #4
		break;
    a472:	b.n	a446 <usb_tx+0x26>
	  default:
		if (tx_first[endpoint] == NULL) {
    a474:	ldr	r2, [pc, #36]	; (a49c <usb_tx+0x7c>)
    a476:	ldr.w	r0, [r2, r3, lsl #2]
    a47a:	cbz	r0, a48c <usb_tx+0x6c>
			tx_first[endpoint] = packet;
		} else {
			tx_last[endpoint]->next = packet;
    a47c:	ldr	r2, [pc, #32]	; (a4a0 <usb_tx+0x80>)
    a47e:	ldr.w	r0, [r2, r3, lsl #2]
    a482:	str	r1, [r0, #4]
		}
		tx_last[endpoint] = packet;
    a484:	str.w	r1, [r2, r3, lsl #2]
		__enable_irq();
    a488:	cpsie	i
		return;
    a48a:	b.n	a460 <usb_tx+0x40>
		b++;
		next = TX_STATE_NONE_FREE_EVEN_FIRST;
		break;
	  default:
		if (tx_first[endpoint] == NULL) {
			tx_first[endpoint] = packet;
    a48c:	str.w	r1, [r2, r3, lsl #2]
    a490:	ldr	r2, [pc, #12]	; (a4a0 <usb_tx+0x80>)
    a492:	b.n	a484 <usb_tx+0x64>
    a494:	.word	0x1fff0000
    a498:	.word	0x1fff8d3c
    a49c:	.word	0x1fff8cf4
    a4a0:	.word	0x1fff8d0c

0000a4a4 <usb_isr>:
}



void usb_isr(void)
{
    a4a4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	//serial_print("isr");
	//status = USB0_ISTAT;
	//serial_phex(status);
	//serial_print("\n");
	restart:
	status = USB0_ISTAT;
    a4a8:	ldr.w	fp, [pc, #780]	; a7b8 <usb_isr+0x314>
		USB0_ISTAT = USB_ISTAT_SOFTOK;
	}

	if ((status & USB_ISTAT_TOKDNE /* 08 */ )) {
		uint8_t endpoint;
		stat = USB0_STAT;
    a4ac:	ldr.w	sl, [pc, #780]	; a7bc <usb_isr+0x318>
}



void usb_isr(void)
{
    a4b0:	sub	sp, #28
    a4b2:	b.n	a53e <usb_isr+0x9a>
		//serial_print(stat & 0x04 ? ",odd\n" : ",even\n");
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
    a4b4:	ldr	r7, [pc, #692]	; (a76c <usb_isr+0x2c8>)
    a4b6:	mov.w	r8, r3, lsr #2
    a4ba:	add.w	r9, r7, r8, lsl #3
			serial_print(((uint32_t)b & 8) ? ", odd" : ", even");
			serial_print(", count:");
			serial_phex(b->desc >> 16);
			serial_print("\n");
#endif
			endpoint--;	// endpoint is index to zero-based arrays
    a4be:	subs	r6, #1
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
			usb_packet_t *packet = (usb_packet_t *)((uint8_t *)(b->addr) - 8);
    a4c0:	ldr.w	r2, [r9, #4]
				b->addr = &usb_audio_sync_feedback;
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
    a4c4:	and.w	r3, r3, #8
			serial_print(((uint32_t)b & 8) ? ", odd" : ", even");
			serial_print(", count:");
			serial_phex(b->desc >> 16);
			serial_print("\n");
#endif
			endpoint--;	// endpoint is index to zero-based arrays
    a4c8:	uxtb	r6, r6
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
			usb_packet_t *packet = (usb_packet_t *)((uint8_t *)(b->addr) - 8);
    a4ca:	sub.w	r0, r2, #8
				b->addr = &usb_audio_sync_feedback;
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
    a4ce:	and.w	r4, r3, #255	; 0xff
    a4d2:	cmp	r3, #0
    a4d4:	bne.w	a7c0 <usb_isr+0x31c>
						  TX_STATE_ODD_FREE : TX_STATE_EVEN_FREE;
						break;
					}
				}
			} else { // receive
				packet->len = b->desc >> 16;
    a4d8:	ldr.w	r3, [r7, r8, lsl #3]
    a4dc:	lsrs	r3, r3, #16
    a4de:	uxth	r1, r3
    a4e0:	strh.w	r1, [r2, #-8]
				if (packet->len > 0) {
    a4e4:	cmp	r3, #0
    a4e6:	beq.w	a758 <usb_isr+0x2b4>
					packet->index = 0;
					packet->next = NULL;
					if (rx_first[endpoint] == NULL) {
    a4ea:	ldr	r3, [pc, #644]	; (a770 <usb_isr+0x2cc>)
					}
				}
			} else { // receive
				packet->len = b->desc >> 16;
				if (packet->len > 0) {
					packet->index = 0;
    a4ec:	strh.w	r4, [r2, #-6]
					packet->next = NULL;
    a4f0:	str.w	r4, [r2, #-4]
					if (rx_first[endpoint] == NULL) {
    a4f4:	ldr.w	r2, [r3, r6, lsl #2]
    a4f8:	cmp	r2, #0
    a4fa:	beq.w	a85c <usb_isr+0x3b8>
						//serial_print("rx Nth, epidx=");
						//serial_phex(endpoint);
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_last[endpoint]->next = packet;
    a4fe:	ldr	r5, [pc, #628]	; (a774 <usb_isr+0x2d0>)
    a500:	ldr.w	r3, [r5, r6, lsl #2]
    a504:	str	r0, [r3, #4]
					}
					rx_last[endpoint] = packet;
					usb_rx_byte_count_data[endpoint] += packet->len;
    a506:	ldr	r4, [pc, #624]	; (a778 <usb_isr+0x2d4>)
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_last[endpoint]->next = packet;
					}
					rx_last[endpoint] = packet;
    a508:	str.w	r0, [r5, r6, lsl #2]
					usb_rx_byte_count_data[endpoint] += packet->len;
    a50c:	ldrh.w	r3, [r4, r6, lsl #1]
    a510:	add	r1, r3
    a512:	strh.w	r1, [r4, r6, lsl #1]
					// TODO: implement a per-endpoint maximum # of allocated
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
    a516:	bl	a224 <usb_malloc>
					if (packet) {
    a51a:	cmp	r0, #0
    a51c:	beq.w	a84e <usb_isr+0x3aa>
						b->addr = packet->buf;
						b->desc = BDT_DESC(64,
    a520:	ldr	r2, [pc, #600]	; (a77c <usb_isr+0x2d8>)
    a522:	ldr	r3, [pc, #604]	; (a780 <usb_isr+0x2dc>)
    a524:	tst.w	r9, #8
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
					if (packet) {
						b->addr = packet->buf;
    a528:	add.w	r0, r0, #8
						b->desc = BDT_DESC(64,
    a52c:	it	ne
    a52e:	movne	r3, r2
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
					if (packet) {
						b->addr = packet->buf;
    a530:	str.w	r0, [r9, #4]
						b->desc = BDT_DESC(64,
    a534:	str.w	r3, [r7, r8, lsl #3]
					b->desc = BDT_DESC(64, ((uint32_t)b & 8) ? DATA1 : DATA0);
				}
			}

		}
		USB0_ISTAT = USB_ISTAT_TOKDNE;
    a538:	movs	r3, #8
    a53a:	strb.w	r3, [fp]
	//serial_print("isr");
	//status = USB0_ISTAT;
	//serial_phex(status);
	//serial_print("\n");
	restart:
	status = USB0_ISTAT;
    a53e:	ldrb.w	r4, [fp]
    a542:	uxtb	r4, r4

	if ((status & USB_ISTAT_SOFTOK /* 04 */ )) {
    a544:	lsls	r5, r4, #29
    a546:	bpl.n	a580 <usb_isr+0xdc>
		if (usb_configuration) {
    a548:	ldr	r3, [pc, #568]	; (a784 <usb_isr+0x2e0>)
    a54a:	ldrb	r3, [r3, #0]
    a54c:	cbz	r3, a57a <usb_isr+0xd6>
			t = usb_reboot_timer;
    a54e:	ldr	r1, [pc, #568]	; (a788 <usb_isr+0x2e4>)
    a550:	ldrb	r2, [r1, #0]
			if (t) {
    a552:	and.w	r3, r2, #255	; 0xff
    a556:	cbz	r2, a564 <usb_isr+0xc0>
				usb_reboot_timer = --t;
    a558:	subs	r3, #1
    a55a:	uxtb	r3, r3
    a55c:	strb	r3, [r1, #0]
				if (!t) _reboot_Teensyduino_();
    a55e:	cmp	r3, #0
    a560:	beq.w	aee2 <usb_isr+0xa3e>
			}
#ifdef CDC_DATA_INTERFACE
			t = usb_cdc_transmit_flush_timer;
    a564:	ldr	r1, [pc, #548]	; (a78c <usb_isr+0x2e8>)
    a566:	ldrb	r2, [r1, #0]
			if (t) {
    a568:	and.w	r3, r2, #255	; 0xff
    a56c:	cbz	r2, a57a <usb_isr+0xd6>
				usb_cdc_transmit_flush_timer = --t;
    a56e:	subs	r3, #1
    a570:	uxtb	r3, r3
    a572:	strb	r3, [r1, #0]
				if (t == 0) usb_serial_flush_callback();
    a574:	cmp	r3, #0
    a576:	beq.w	a848 <usb_isr+0x3a4>
#endif
#ifdef MULTITOUCH_INTERFACE
			usb_touchscreen_update_callback();
#endif
		}
		USB0_ISTAT = USB_ISTAT_SOFTOK;
    a57a:	movs	r3, #4
    a57c:	strb.w	r3, [fp]
	}

	if ((status & USB_ISTAT_TOKDNE /* 08 */ )) {
    a580:	and.w	r3, r4, #8
    a584:	and.w	r2, r3, #255	; 0xff
    a588:	cmp	r3, #0
    a58a:	beq.w	a81a <usb_isr+0x376>
		uint8_t endpoint;
		stat = USB0_STAT;
    a58e:	ldrb.w	r3, [sl]
    a592:	uxtb	r3, r3
		//serial_print("token: ep=");
		//serial_phex(stat >> 4);
		//serial_print(stat & 0x08 ? ",tx" : ",rx");
		//serial_print(stat & 0x04 ? ",odd\n" : ",even\n");
		endpoint = stat >> 4;
		if (endpoint == 0) {
    a594:	lsrs	r6, r3, #4
    a596:	bne.n	a4b4 <usb_isr+0x10>
	bdt_t *b;
	uint32_t pid, size;
	uint8_t *buf;
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
    a598:	lsrs	r0, r3, #2
    a59a:	ldr.w	r9, [pc, #464]	; a76c <usb_isr+0x2c8>
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
    a59e:	ldr.w	r2, [r9, r0, lsl #3]
	bdt_t *b;
	uint32_t pid, size;
	uint8_t *buf;
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
    a5a2:	add.w	r1, r9, r0, lsl #3
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
    a5a6:	ubfx	r2, r2, #2, #4
    a5aa:	subs	r2, #1
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
	pid = BDT_PID(b->desc);
	//count = b->desc >> 16;
	buf = b->addr;
    a5ac:	ldr	r1, [r1, #4]
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
    a5ae:	cmp	r2, #12
    a5b0:	bhi.w	a73a <usb_isr+0x296>
    a5b4:	tbh	[pc, r2, lsl #1]
    a5b8:	.word	0x00c500c5
    a5bc:	.word	0x00c100c1
    a5c0:	.word	0x00c100c1
    a5c4:	.word	0x00c100c1
    a5c8:	.word	0x00c1008b
    a5cc:	.word	0x00c100c1
    a5d0:	.short	0x000d
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
    a5d2:	ldr	r2, [r1, #0]
    a5d4:	ldr	r5, [pc, #440]	; (a790 <usb_isr+0x2ec>)
		setup.word2 = *(uint32_t *)(buf + 4);
    a5d6:	ldr	r1, [r1, #4]
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    a5d8:	ldr	r7, [pc, #440]	; (a794 <usb_isr+0x2f0>)
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    a5da:	ldr	r6, [pc, #444]	; (a798 <usb_isr+0x2f4>)
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);

		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    a5dc:	ldr	r4, [pc, #412]	; (a77c <usb_isr+0x2d8>)
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);
    a5de:	str	r1, [r5, #4]
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    a5e0:	uxth	r1, r2
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);

		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    a5e2:	str.w	r4, [r9, r0, lsl #3]
	switch (pid) {
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
    a5e6:	str	r2, [r5, #0]
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    a5e8:	movs	r0, #1
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    a5ea:	movs	r2, #0
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    a5ec:	cmp.w	r1, #2176	; 0x880
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    a5f0:	str	r2, [r7, #0]
			//serial_print("leftover tx even\n");
		//}
		//if (table[index(0, TX, ODD)].desc & 0x80) {
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
    a5f2:	str.w	r2, [r9, #16]
		table[index(0, TX, ODD)].desc = 0;
    a5f6:	str.w	r2, [r9, #24]
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    a5fa:	strb	r0, [r6, #0]
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    a5fc:	beq.w	ac9e <usb_isr+0x7fa>
    a600:	bls.w	a864 <usb_isr+0x3c0>
    a604:	movw	r4, #8993	; 0x2321
    a608:	cmp	r1, r4
    a60a:	beq.w	aca8 <usb_isr+0x804>
    a60e:	bhi.w	a99a <usb_isr+0x4f6>
    a612:	movw	r4, #8225	; 0x2021
    a616:	cmp	r1, r4
    a618:	beq.w	a9b0 <usb_isr+0x50c>
    a61c:	movw	r4, #8737	; 0x2221
    a620:	cmp	r1, r4
    a622:	beq.w	aafa <usb_isr+0x656>
    a626:	cmp.w	r1, #2304	; 0x900
    a62a:	bne.w	a9aa <usb_isr+0x506>
	  case 0x0500: // SET_ADDRESS
		break;
	  case 0x0900: // SET_CONFIGURATION
		//serial_print("configure\n");
		usb_configuration = setup.wValue;
    a62e:	ldr	r2, [pc, #340]	; (a784 <usb_isr+0x2e0>)
    a630:	ldr	r4, [pc, #312]	; (a76c <usb_isr+0x2c8>)
    a632:	ldrb	r1, [r5, #2]
    a634:	strb	r1, [r2, #0]
    a636:	add.w	r5, r4, #192	; 0xc0
    a63a:	b.n	a642 <usb_isr+0x19e>
    a63c:	adds	r4, #8
		reg = &USB0_ENDPT1;
		cfg = usb_endpoint_config_table;
		// clear all BDT entries, free any allocated memory...
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
    a63e:	cmp	r5, r4
    a640:	beq.n	a656 <usb_isr+0x1b2>
			if (table[i].desc & BDT_OWN) {
    a642:	ldr	r3, [r4, #32]
    a644:	lsls	r0, r3, #24
    a646:	bpl.n	a63c <usb_isr+0x198>
				usb_free((usb_packet_t *)((uint8_t *)(table[i].addr) - 8));
    a648:	ldr	r0, [r4, #36]	; 0x24
    a64a:	adds	r4, #8
    a64c:	subs	r0, #8
    a64e:	bl	a264 <usb_free>
		//serial_print("configure\n");
		usb_configuration = setup.wValue;
		reg = &USB0_ENDPT1;
		cfg = usb_endpoint_config_table;
		// clear all BDT entries, free any allocated memory...
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
    a652:	cmp	r5, r4
    a654:	bne.n	a642 <usb_isr+0x19e>
    a656:	ldr	r4, [pc, #324]	; (a79c <usb_isr+0x2f8>)
    a658:	ldr	r2, [pc, #276]	; (a770 <usb_isr+0x2cc>)
    a65a:	ldr	r1, [pc, #324]	; (a7a0 <usb_isr+0x2fc>)
    a65c:	ldr	r0, [pc, #324]	; (a7a4 <usb_isr+0x300>)
    a65e:	ldr	r5, [pc, #276]	; (a774 <usb_isr+0x2d0>)
    a660:	str	r4, [sp, #4]
    a662:	movs	r3, #0
    a664:	ldr	r4, [pc, #272]	; (a778 <usb_isr+0x2d4>)
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
				break;
			  case TX_STATE_ODD_FREE:
			  case TX_STATE_NONE_FREE_ODD_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    a666:	str	r6, [sp, #20]
    a668:	str	r5, [sp, #8]
    a66a:	str	r4, [sp, #12]
    a66c:	mov	r8, r0
    a66e:	str	r7, [sp, #16]
    a670:	mov	r6, r2
    a672:	mov	r5, r1
    a674:	mov	r4, r3
			}
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
			usb_packet_t *p, *n;
			p = rx_first[i];
    a676:	ldr	r0, [r6, #0]
			while (p) {
    a678:	cbz	r0, a686 <usb_isr+0x1e2>
				n = p->next;
    a67a:	ldr	r7, [r0, #4]
				usb_free(p);
    a67c:	bl	a264 <usb_free>
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
			usb_packet_t *p, *n;
			p = rx_first[i];
			while (p) {
    a680:	mov	r0, r7
    a682:	cmp	r7, #0
    a684:	bne.n	a67a <usb_isr+0x1d6>
				n = p->next;
				usb_free(p);
				p = n;
			}
			rx_first[i] = NULL;
    a686:	movs	r3, #0
    a688:	str	r3, [r6, #0]
			rx_last[i] = NULL;
    a68a:	ldr	r3, [sp, #8]
			p = tx_first[i];
    a68c:	ldr	r0, [r5, #0]
				n = p->next;
				usb_free(p);
				p = n;
			}
			rx_first[i] = NULL;
			rx_last[i] = NULL;
    a68e:	mov	r2, r3
    a690:	movs	r3, #0
    a692:	str.w	r3, [r2, r4, lsl #2]
			p = tx_first[i];
			while (p) {
    a696:	cbz	r0, a6a4 <usb_isr+0x200>
				n = p->next;
    a698:	ldr	r7, [r0, #4]
				usb_free(p);
    a69a:	bl	a264 <usb_free>
				p = n;
			}
			rx_first[i] = NULL;
			rx_last[i] = NULL;
			p = tx_first[i];
			while (p) {
    a69e:	mov	r0, r7
    a6a0:	cmp	r7, #0
    a6a2:	bne.n	a698 <usb_isr+0x1f4>
				p = n;
			}
			tx_first[i] = NULL;
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
    a6a4:	ldr	r3, [sp, #4]
			while (p) {
				n = p->next;
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
    a6a6:	movs	r2, #0
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
    a6a8:	ldrb	r3, [r3, #0]
			while (p) {
				n = p->next;
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
    a6aa:	str	r2, [r5, #0]
			tx_last[i] = NULL;
    a6ac:	str.w	r2, [r8], #4
			usb_rx_byte_count_data[i] = 0;
    a6b0:	ldr	r2, [sp, #12]
    a6b2:	mov.w	r1, #0
			switch (tx_state[i]) {
    a6b6:	subs	r3, #2
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
    a6b8:	strh.w	r1, [r2, r4, lsl #1]
			switch (tx_state[i]) {
    a6bc:	cmp	r3, #3
    a6be:	bhi.w	abd4 <usb_isr+0x730>
    a6c2:	tbh	[pc, r3, lsl #1]
    a6c6:	.short	0x02e7
    a6c8:	.word	0x02e70283
    a6cc:	.short	0x0283
		//serial_print("PID=IN:");
		//serial_phex(stat);
		//serial_print("\n");

		// send remaining data, if any...
		data = ep0_tx_ptr;
    a6ce:	ldr	r7, [pc, #196]	; (a794 <usb_isr+0x2f0>)
    a6d0:	ldr	r2, [r7, #0]
		if (data) {
    a6d2:	cbz	r2, a726 <usb_isr+0x282>
			size = ep0_tx_len;
    a6d4:	ldr	r3, [pc, #208]	; (a7a8 <usb_isr+0x304>)
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    a6d6:	ldr	r6, [pc, #192]	; (a798 <usb_isr+0x2f4>)
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    a6d8:	ldr	r1, [pc, #208]	; (a7ac <usb_isr+0x308>)
		//serial_print("\n");

		// send remaining data, if any...
		data = ep0_tx_ptr;
		if (data) {
			size = ep0_tx_len;
    a6da:	ldrh	r0, [r3, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    a6dc:	ldrb	r4, [r6, #0]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    a6de:	ldrb	r5, [r1, #0]
    a6e0:	cmp	r0, #64	; 0x40
    a6e2:	mov	lr, r0
    a6e4:	orr.w	r8, r5, #2
    a6e8:	it	cs
    a6ea:	movcs.w	lr, #64	; 0x40
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    a6ee:	cmp	r4, #0
	ep0_tx_data_toggle ^= 1;
    a6f0:	eor.w	r4, r4, #1
    a6f4:	strb	r4, [r6, #0]
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
    a6f6:	rsb	r0, lr, r0
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    a6fa:	ite	eq
    a6fc:	moveq	r4, #136	; 0x88
    a6fe:	movne	r4, #200	; 0xc8
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    a700:	add.w	r6, r9, r8, lsl #3
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
    a704:	uxth	r0, r0
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    a706:	eor.w	r5, r5, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    a70a:	orr.w	r4, r4, lr, lsl #16
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    a70e:	str	r2, [r6, #4]
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
    a710:	strh	r0, [r3, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    a712:	str.w	r4, [r9, r8, lsl #3]
		data = ep0_tx_ptr;
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
    a716:	add	r2, lr
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    a718:	strb	r5, [r1, #0]
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
    a71a:	cbnz	r0, a724 <usb_isr+0x280>
    a71c:	cmp.w	lr, #64	; 0x40
    a720:	it	ne
    a722:	movne	r2, #0
    a724:	str	r2, [r7, #0]
		}

		if (setup.bRequest == 5 && setup.bmRequestType == 0) {
    a726:	ldr	r3, [pc, #104]	; (a790 <usb_isr+0x2ec>)
    a728:	ldrh	r2, [r3, #0]
    a72a:	cmp.w	r2, #1280	; 0x500
    a72e:	bne.n	a73a <usb_isr+0x296>
			setup.bRequest = 0;
    a730:	movs	r1, #0
			//serial_print("set address: ");
			//serial_phex16(setup.wValue);
			//serial_print("\n");
			USB0_ADDR = setup.wValue;
    a732:	ldrb	r2, [r3, #2]
			ep0_tx_len -= size;
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
		}

		if (setup.bRequest == 5 && setup.bmRequestType == 0) {
			setup.bRequest = 0;
    a734:	strb	r1, [r3, #1]
			//serial_print("set address: ");
			//serial_phex16(setup.wValue);
			//serial_print("\n");
			USB0_ADDR = setup.wValue;
    a736:	ldr	r3, [pc, #120]	; (a7b0 <usb_isr+0x30c>)
    a738:	strb	r2, [r3, #0]
	//default:
		//serial_print("PID=unknown:");
		//serial_phex(pid);
		//serial_print("\n");
	}
	USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    a73a:	ldr	r2, [pc, #120]	; (a7b4 <usb_isr+0x310>)
    a73c:	movs	r3, #1
    a73e:	strb	r3, [r2, #0]
    a740:	b.n	a538 <usb_isr+0x94>
		USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
		break;
	case 0x01:  // OUT transaction received from host
	case 0x02:
		//serial_print("PID=OUT\n");
		if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
    a742:	ldr	r2, [pc, #76]	; (a790 <usb_isr+0x2ec>)
    a744:	ldrh	r5, [r2, #0]
    a746:	movw	r4, #8225	; 0x2021
    a74a:	cmp	r5, r4
    a74c:	beq.w	a944 <usb_isr+0x4a0>
		if (usb_audio_set_feature(&setup, buf)) {
			endpoint0_transmit(NULL, 0);
		}
#endif
		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    a750:	ldr	r2, [pc, #40]	; (a77c <usb_isr+0x2d8>)
    a752:	str.w	r2, [r9, r0, lsl #3]
    a756:	b.n	a73a <usb_isr+0x296>
						//serial_phex(endpoint + 1);
						b->desc = 0;
						usb_rx_memory_needed++;
					}
				} else {
					b->desc = BDT_DESC(64, ((uint32_t)b & 8) ? DATA1 : DATA0);
    a758:	ldr	r2, [pc, #32]	; (a77c <usb_isr+0x2d8>)
    a75a:	ldr	r3, [pc, #36]	; (a780 <usb_isr+0x2dc>)
    a75c:	tst.w	r9, #8
    a760:	it	ne
    a762:	movne	r3, r2
    a764:	str.w	r3, [r7, r8, lsl #3]
    a768:	b.n	a538 <usb_isr+0x94>
    a76a:	nop
    a76c:	.word	0x1fff0000
    a770:	.word	0x1fff8c98
    a774:	.word	0x1fff8c3c
    a778:	.word	0x1fff8db8
    a77c:	.word	0x004000c8
    a780:	.word	0x00400088
    a784:	.word	0x1fff8d38
    a788:	.word	0x1fff8cb1
    a78c:	.word	0x1fff8c20
    a790:	.word	0x1fff8d24
    a794:	.word	0x1fff8c38
    a798:	.word	0x1fff8cb0
    a79c:	.word	0x1fff8d3c
    a7a0:	.word	0x1fff8cf4
    a7a4:	.word	0x1fff8d0c
    a7a8:	.word	0x1fff8c54
    a7ac:	.word	0x1fff8d2c
    a7b0:	.word	0x40072098
    a7b4:	.word	0x40072094
    a7b8:	.word	0x40072080
    a7bc:	.word	0x40072090
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
				usb_free(packet);
    a7c0:	bl	a264 <usb_free>
				packet = tx_first[endpoint];
    a7c4:	ldr	r2, [pc, #692]	; (aa7c <usb_isr+0x5d8>)
				if (packet) {
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
    a7c6:	ldr	r1, [pc, #696]	; (aa80 <usb_isr+0x5dc>)
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
				usb_free(packet);
				packet = tx_first[endpoint];
    a7c8:	ldr.w	r3, [r2, r6, lsl #2]
				if (packet) {
    a7cc:	cmp	r3, #0
    a7ce:	beq.w	a924 <usb_isr+0x480>
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
    a7d2:	ldr	r0, [r3, #4]
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
    a7d4:	ldrb	r4, [r1, r6]
			if (stat & 0x08) { // transmit
				usb_free(packet);
				packet = tx_first[endpoint];
				if (packet) {
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
    a7d6:	str.w	r0, [r2, r6, lsl #2]
					b->addr = packet->buf;
    a7da:	add.w	r2, r3, #8
    a7de:	str.w	r2, [r9, #4]
					switch (tx_state[endpoint]) {
    a7e2:	cmp	r4, #3
    a7e4:	bhi.n	a7f2 <usb_isr+0x34e>
    a7e6:	tbb	[pc, r4]
    a7ea:	.short	0x0f12
    a7ec:	.short	0x0215
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_ODD_FIRST;
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_EVEN_FIRST;
    a7ee:	movs	r2, #4
    a7f0:	strb	r2, [r1, r6]
						break;
					  default:
						break;
					}
					b->desc = BDT_DESC(packet->len,
    a7f2:	ldrh	r2, [r3, #0]
    a7f4:	tst.w	r9, #8
    a7f8:	ite	eq
    a7fa:	moveq	r3, #136	; 0x88
    a7fc:	movne	r3, #200	; 0xc8
    a7fe:	orr.w	r3, r3, r2, lsl #16
    a802:	str.w	r3, [r7, r8, lsl #3]
    a806:	b.n	a538 <usb_isr+0x94>
					switch (tx_state[endpoint]) {
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
						tx_state[endpoint] = TX_STATE_ODD_FREE;
						break;
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						tx_state[endpoint] = TX_STATE_EVEN_FREE;
    a808:	movs	r2, #2
    a80a:	strb	r2, [r1, r6]
						break;
    a80c:	b.n	a7f2 <usb_isr+0x34e>
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
						tx_state[endpoint] = TX_STATE_ODD_FREE;
    a80e:	movs	r2, #3
    a810:	strb	r2, [r1, r6]
						break;
    a812:	b.n	a7f2 <usb_isr+0x34e>
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						tx_state[endpoint] = TX_STATE_EVEN_FREE;
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_ODD_FIRST;
    a814:	movs	r2, #5
    a816:	strb	r2, [r1, r6]
						break;
    a818:	b.n	a7f2 <usb_isr+0x34e>
		goto restart;
	}



	if (status & USB_ISTAT_USBRST /* 01 */ ) {
    a81a:	lsls	r0, r4, #31
    a81c:	bmi.w	a9b8 <usb_isr+0x514>
		USB0_CTL = USB_CTL_USBENSOFEN;
		return;
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
    a820:	lsls	r1, r4, #24
    a822:	bmi.w	aa54 <usb_isr+0x5b0>
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
    a826:	lsls	r2, r4, #30
    a828:	bpl.n	a838 <usb_isr+0x394>
		uint8_t err = USB0_ERRSTAT;
    a82a:	ldr	r2, [pc, #600]	; (aa84 <usb_isr+0x5e0>)
		USB0_ERRSTAT = err;
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    a82c:	ldr	r1, [pc, #600]	; (aa88 <usb_isr+0x5e4>)
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
		uint8_t err = USB0_ERRSTAT;
    a82e:	ldrb	r3, [r2, #0]
		USB0_ERRSTAT = err;
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    a830:	movs	r0, #2
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
		uint8_t err = USB0_ERRSTAT;
    a832:	uxtb	r3, r3
		USB0_ERRSTAT = err;
    a834:	strb	r3, [r2, #0]
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    a836:	strb	r0, [r1, #0]
	}

	if ((status & USB_ISTAT_SLEEP /* 10 */ )) {
    a838:	lsls	r3, r4, #27
    a83a:	bpl.n	a842 <usb_isr+0x39e>
		//serial_print("sleep\n");
		USB0_ISTAT = USB_ISTAT_SLEEP;
    a83c:	ldr	r3, [pc, #584]	; (aa88 <usb_isr+0x5e4>)
    a83e:	movs	r2, #16
    a840:	strb	r2, [r3, #0]
	}

}
    a842:	add	sp, #28
    a844:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			}
#ifdef CDC_DATA_INTERFACE
			t = usb_cdc_transmit_flush_timer;
			if (t) {
				usb_cdc_transmit_flush_timer = --t;
				if (t == 0) usb_serial_flush_callback();
    a848:	bl	9e68 <usb_serial_flush_callback>
    a84c:	b.n	a57a <usb_isr+0xd6>
							((uint32_t)b & 8) ? DATA1 : DATA0);
					} else {
						//serial_print("starving ");
						//serial_phex(endpoint + 1);
						b->desc = 0;
						usb_rx_memory_needed++;
    a84e:	ldr	r2, [pc, #572]	; (aa8c <usb_isr+0x5e8>)
						b->desc = BDT_DESC(64,
							((uint32_t)b & 8) ? DATA1 : DATA0);
					} else {
						//serial_print("starving ");
						//serial_phex(endpoint + 1);
						b->desc = 0;
    a850:	str.w	r0, [r7, r8, lsl #3]
						usb_rx_memory_needed++;
    a854:	ldrb	r3, [r2, #0]
    a856:	adds	r3, #1
    a858:	strb	r3, [r2, #0]
    a85a:	b.n	a538 <usb_isr+0x94>
						//serial_print("rx 1st, epidx=");
						//serial_phex(endpoint);
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_first[endpoint] = packet;
    a85c:	str.w	r0, [r3, r6, lsl #2]
    a860:	ldr	r5, [pc, #556]	; (aa90 <usb_isr+0x5ec>)
    a862:	b.n	a506 <usb_isr+0x62>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    a864:	movw	r4, #770	; 0x302
    a868:	cmp	r1, r4
    a86a:	beq.w	acb0 <usb_isr+0x80c>
    a86e:	bhi.w	aa12 <usb_isr+0x56e>
    a872:	cmp	r1, #130	; 0x82
    a874:	beq.w	aba6 <usb_isr+0x702>
    a878:	cmp.w	r1, #258	; 0x102
    a87c:	beq.w	aad4 <usb_isr+0x630>
    a880:	cmp	r1, #128	; 0x80
    a882:	bne.w	a9aa <usb_isr+0x506>
		reply_buffer[0] = usb_configuration;
		datalen = 1;
		data = reply_buffer;
		break;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    a886:	ldr	r4, [pc, #524]	; (aa94 <usb_isr+0x5f0>)
		reply_buffer[1] = 0;
		datalen = 2;
    a888:	movs	r0, #2
		reply_buffer[0] = usb_configuration;
		datalen = 1;
		data = reply_buffer;
		break;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    a88a:	strb	r2, [r4, #0]
		reply_buffer[1] = 0;
    a88c:	strb	r2, [r4, #1]
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
    a88e:	ldrh	r2, [r5, #6]
    a890:	cmp	r2, r0
    a892:	bcs.w	ae32 <usb_isr+0x98e>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    a896:	ldr	r1, [pc, #512]	; (aa98 <usb_isr+0x5f4>)
    a898:	ldrb	r5, [r1, #0]
    a89a:	cmp	r2, #64	; 0x40
    a89c:	mov	lr, r2
    a89e:	orr.w	ip, r5, #2
    a8a2:	it	cs
    a8a4:	movcs.w	lr, #64	; 0x40
    a8a8:	add.w	r3, r4, lr
    a8ac:	add.w	r0, r9, ip, lsl #3
    a8b0:	str	r3, [sp, #4]
    a8b2:	movs	r3, #1
    a8b4:	str	r4, [r0, #4]
    a8b6:	mov.w	r8, lr, lsl #16
    a8ba:	rsb	r0, lr, r2
    a8be:	str	r3, [sp, #8]
    a8c0:	movs	r2, #0
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    a8c2:	movs	r4, #200	; 0xc8
    a8c4:	orr.w	r3, r8, r4
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    a8c8:	eor.w	r4, r5, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    a8cc:	str.w	r3, [r9, ip, lsl #3]
	ep0_tx_data_toggle ^= 1;
    a8d0:	strb	r2, [r6, #0]
	ep0_tx_bdt_bank ^= 1;
    a8d2:	strb	r4, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    a8d4:	ldr.w	ip, [pc, #472]	; aab0 <usb_isr+0x60c>
	ep0_tx_data_toggle ^= 1;
    a8d8:	ldr	r3, [pc, #448]	; (aa9c <usb_isr+0x5f8>)
	ep0_tx_bdt_bank ^= 1;
    a8da:	ldr.w	r8, [pc, #444]	; aa98 <usb_isr+0x5f4>
	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;
    a8de:	cmp	r0, #0
    a8e0:	bne.w	ab3c <usb_isr+0x698>
    a8e4:	cmp.w	lr, #64	; 0x40
    a8e8:	bne.n	a9b0 <usb_isr+0x50c>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    a8ea:	orr.w	ip, r4, #2
    a8ee:	add.w	r3, r9, ip, lsl #3
    a8f2:	ldr	r4, [sp, #4]
    a8f4:	ldr.w	lr, [pc, #440]	; aab0 <usb_isr+0x60c>
    a8f8:	str	r4, [r3, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    a8fa:	cmp	r2, #0
    a8fc:	bne.w	ab68 <usb_isr+0x6c4>
    a900:	lsls	r2, r0, #16
    a902:	orr.w	r2, r2, #136	; 0x88
	ep0_tx_data_toggle ^= 1;
    a906:	ldrb.w	r3, [sp, #8]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    a90a:	str.w	r2, [lr, ip, lsl #3]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    a90e:	add	r4, r0
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
    a910:	strb	r3, [r6, #0]
	ep0_tx_bdt_bank ^= 1;
    a912:	strb	r5, [r1, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    a914:	mov	r3, r4
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;
    a916:	cmp	r0, #64	; 0x40
    a918:	bne.n	a9b0 <usb_isr+0x50c>
    a91a:	movs	r0, #0

	ep0_tx_ptr = data;
	ep0_tx_len = datalen;
    a91c:	ldr	r2, [pc, #384]	; (aaa0 <usb_isr+0x5fc>)
	endpoint0_transmit(data, size);
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;

	ep0_tx_ptr = data;
    a91e:	str	r3, [r7, #0]
	ep0_tx_len = datalen;
    a920:	strh	r0, [r2, #0]
    a922:	b.n	a9b0 <usb_isr+0x50c>
					}
					b->desc = BDT_DESC(packet->len,
						((uint32_t)b & 8) ? DATA1 : DATA0);
				} else {
					//serial_print("tx no packet\n");
					switch (tx_state[endpoint]) {
    a924:	ldrb	r3, [r1, r6]
    a926:	cmp	r3, #3
    a928:	bhi.w	ab98 <usb_isr+0x6f4>
    a92c:	add	r2, pc, #4	; (adr r2, a934 <usb_isr+0x490>)
    a92e:	ldr.w	pc, [r2, r3, lsl #2]
    a932:	nop
    a934:	.word	0x0000a539
    a938:	.word	0x0000a539
    a93c:	.word	0x0000aa0d
    a940:	.word	0x0000aa07
	case 0x02:
		//serial_print("PID=OUT\n");
		if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
			int i;
			uint32_t *line_coding = NULL;
			switch (setup.wIndex) {
    a944:	ldrh	r2, [r2, #4]
    a946:	cbnz	r2, a96c <usb_isr+0x4c8>
			if (line_coding) {
				uint8_t *dst = (uint8_t *)line_coding;
				//serial_print("set line coding ");
				for (i=0; i<7; i++) {
					//serial_phex(*buf);
					*dst++ = *buf++;
    a948:	ldr	r2, [pc, #344]	; (aaa4 <usb_isr+0x600>)
    a94a:	ldrb	r5, [r1, #0]
    a94c:	ldrb	r4, [r1, #1]
    a94e:	strb	r5, [r2, #0]
    a950:	strb	r4, [r2, #1]
    a952:	ldrb	r5, [r1, #2]
    a954:	ldrb	r4, [r1, #3]
    a956:	strb	r5, [r2, #2]
    a958:	strb	r4, [r2, #3]
				}
				//serial_phex32(line_coding[0]);
				//serial_print("\n");
				if (line_coding[0] == 134) usb_reboot_timer = 15;
    a95a:	ldr	r4, [r2, #0]
			if (line_coding) {
				uint8_t *dst = (uint8_t *)line_coding;
				//serial_print("set line coding ");
				for (i=0; i<7; i++) {
					//serial_phex(*buf);
					*dst++ = *buf++;
    a95c:	ldrb	r5, [r1, #4]
    a95e:	strb	r5, [r2, #4]
				}
				//serial_phex32(line_coding[0]);
				//serial_print("\n");
				if (line_coding[0] == 134) usb_reboot_timer = 15;
    a960:	cmp	r4, #134	; 0x86
			if (line_coding) {
				uint8_t *dst = (uint8_t *)line_coding;
				//serial_print("set line coding ");
				for (i=0; i<7; i++) {
					//serial_phex(*buf);
					*dst++ = *buf++;
    a962:	ldrb	r5, [r1, #5]
    a964:	ldrb	r1, [r1, #6]
    a966:	strb	r5, [r2, #5]
    a968:	strb	r1, [r2, #6]
				}
				//serial_phex32(line_coding[0]);
				//serial_print("\n");
				if (line_coding[0] == 134) usb_reboot_timer = 15;
    a96a:	beq.n	aa68 <usb_isr+0x5c4>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    a96c:	ldr	r1, [pc, #296]	; (aa98 <usb_isr+0x5f4>)
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    a96e:	ldr	r6, [pc, #300]	; (aa9c <usb_isr+0x5f8>)
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    a970:	ldrb	r2, [r1, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    a972:	ldrb	r4, [r6, #0]
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    a974:	eor.w	r5, r2, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    a978:	cmp	r4, #0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    a97a:	orr.w	r2, r2, #2
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    a97e:	strb	r5, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    a980:	ite	eq
    a982:	moveq	r1, #136	; 0x88
    a984:	movne	r1, #200	; 0xc8
    a986:	str.w	r1, [r9, r2, lsl #3]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    a98a:	add.w	r2, r9, r2, lsl #3
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
    a98e:	eor.w	r4, r4, #1
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    a992:	movs	r1, #0
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
    a994:	strb	r4, [r6, #0]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    a996:	str	r1, [r2, #4]
    a998:	b.n	a750 <usb_isr+0x2ac>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    a99a:	movw	r2, #26273	; 0x66a1
    a99e:	cmp	r1, r2
    a9a0:	beq.n	a9aa <usb_isr+0x506>
    a9a2:	movw	r2, #26529	; 0x67a1
    a9a6:	cmp	r1, r2
    a9a8:	beq.n	aa70 <usb_isr+0x5cc>
volatile uint8_t usb_reboot_timer = 0;


static void endpoint0_stall(void)
{
	USB0_ENDPT0 = USB_ENDPT_EPSTALL | USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    a9aa:	ldr	r2, [pc, #252]	; (aaa8 <usb_isr+0x604>)
    a9ac:	movs	r3, #15
    a9ae:	strb	r3, [r2, #0]
		serial_print("\n");
#endif
		// actually "do" the setup request
		usb_setup();
		// unfreeze the USB, now that we're ready
		USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    a9b0:	ldr	r2, [pc, #248]	; (aaac <usb_isr+0x608>)
    a9b2:	movs	r3, #1
    a9b4:	strb	r3, [r2, #0]
    a9b6:	b.n	a73a <usb_isr+0x296>
		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
    a9b8:	ldr	r3, [pc, #244]	; (aab0 <usb_isr+0x60c>)

	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
    a9ba:	ldr	r0, [pc, #240]	; (aaac <usb_isr+0x608>)
		ep0_tx_bdt_bank = 0;
    a9bc:	ldr	r1, [pc, #216]	; (aa98 <usb_isr+0x5f4>)
		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
    a9be:	str	r2, [r3, #16]

	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
    a9c0:	mov.w	lr, #2
    a9c4:	strb.w	lr, [r0]
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    a9c8:	ldr	r7, [pc, #220]	; (aaa8 <usb_isr+0x604>)
	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;
    a9ca:	strb	r2, [r1, #0]

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
    a9cc:	ldr	r1, [pc, #228]	; (aab4 <usb_isr+0x610>)
    a9ce:	str	r1, [r3, #0]
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
    a9d0:	str	r1, [r3, #8]

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
    a9d2:	ldr	r6, [pc, #176]	; (aa84 <usb_isr+0x5e0>)
		USB0_ISTAT = 0xFF;
    a9d4:	ldr	r5, [pc, #176]	; (aa88 <usb_isr+0x5e4>)

		// set the address to zero during enumeration
		USB0_ADDR = 0;
    a9d6:	ldr	r4, [pc, #224]	; (aab8 <usb_isr+0x614>)
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
    a9d8:	str	r2, [r3, #24]

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    a9da:	movs	r1, #13
    a9dc:	strb	r1, [r7, #0]

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
    a9de:	movs	r1, #255	; 0xff
    a9e0:	strb	r1, [r6, #0]

		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
    a9e2:	ldr.w	lr, [pc, #236]	; aad0 <usb_isr+0x62c>
		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
		USB0_ISTAT = 0xFF;
    a9e6:	strb	r1, [r5, #0]

		// set the address to zero during enumeration
		USB0_ADDR = 0;
    a9e8:	strb	r2, [r4, #0]
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
    a9ea:	ldr	r5, [pc, #208]	; (aabc <usb_isr+0x618>)
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
    a9ec:	ldr	r2, [pc, #208]	; (aac0 <usb_isr+0x61c>)

		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
    a9ee:	strb.w	r1, [lr]
		USB0_INTEN = USB_INTEN_TOKDNEEN |
    a9f2:	movs	r7, #159	; 0x9f
			USB_INTEN_ERROREN |
			USB_INTEN_USBRSTEN |
			USB_INTEN_SLEEPEN;

		// is this necessary?
		USB0_CTL = USB_CTL_USBENSOFEN;
    a9f4:	movs	r4, #1
		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
		USB0_INTEN = USB_INTEN_TOKDNEEN |
    a9f6:	strb.w	r7, [r6, #-4]
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
    a9fa:	str	r5, [r3, #4]
			USB_INTEN_ERROREN |
			USB_INTEN_USBRSTEN |
			USB_INTEN_SLEEPEN;

		// is this necessary?
		USB0_CTL = USB_CTL_USBENSOFEN;
    a9fc:	strb	r4, [r0, #0]

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
    a9fe:	str	r2, [r3, #12]
	if ((status & USB_ISTAT_SLEEP /* 10 */ )) {
		//serial_print("sleep\n");
		USB0_ISTAT = USB_ISTAT_SLEEP;
	}

}
    aa00:	add	sp, #28
    aa02:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_EVEN_FIRST;
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_ODD_FIRST;
    aa06:	movs	r3, #1
    aa08:	strb	r3, [r1, r6]
						break;
    aa0a:	b.n	a538 <usb_isr+0x94>
					switch (tx_state[endpoint]) {
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_EVEN_FIRST;
    aa0c:	movs	r3, #0
    aa0e:	strb	r3, [r1, r6]
						break;
    aa10:	b.n	a538 <usb_isr+0x94>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    aa12:	cmp.w	r1, #1280	; 0x500
    aa16:	beq.w	aca8 <usb_isr+0x804>
    aa1a:	bcc.n	a9aa <usb_isr+0x506>
    aa1c:	sub.w	r1, r1, #1664	; 0x680
    aa20:	cmp	r1, #1
    aa22:	bhi.n	a9aa <usb_isr+0x506>
	  case 0x0681:
		//serial_print("desc:");
		//serial_phex16(setup.wValue);
		//serial_print("\n");
		for (list = usb_descriptor_list; 1; list++) {
			if (list->addr == NULL) break;
    aa24:	ldr	r2, [pc, #156]	; (aac4 <usb_isr+0x620>)
    aa26:	ldr	r4, [r2, #4]
    aa28:	cmp	r4, #0
    aa2a:	beq.n	a9aa <usb_isr+0x506>
    aa2c:	ldrh	r0, [r5, #2]
			//if (setup.wValue == list->wValue &&
			//(setup.wIndex == list->wIndex) || ((setup.wValue >> 8) == 3)) {
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    aa2e:	ldrh.w	lr, [r5, #4]
    aa32:	b.n	aa3c <usb_isr+0x598>
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
		//serial_print("desc:");
		//serial_phex16(setup.wValue);
		//serial_print("\n");
		for (list = usb_descriptor_list; 1; list++) {
    aa34:	adds	r2, #12
			if (list->addr == NULL) break;
    aa36:	ldr	r4, [r2, #4]
    aa38:	cmp	r4, #0
    aa3a:	beq.n	a9aa <usb_isr+0x506>
			//if (setup.wValue == list->wValue &&
			//(setup.wIndex == list->wIndex) || ((setup.wValue >> 8) == 3)) {
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    aa3c:	ldrh	r3, [r2, #0]
    aa3e:	cmp	r3, r0
    aa40:	bne.n	aa34 <usb_isr+0x590>
    aa42:	ldrh	r3, [r2, #2]
    aa44:	cmp	r3, lr
    aa46:	bne.n	aa34 <usb_isr+0x590>
				data = list->addr;
				if ((setup.wValue >> 8) == 3) {
    aa48:	lsrs	r0, r0, #8
    aa4a:	cmp	r0, #3
					// for string descriptors, use the descriptor's
					// length field, allowing runtime configured
					// length.
					datalen = *(list->addr);
    aa4c:	ite	eq
    aa4e:	ldrbeq	r0, [r4, #0]
				} else {
					datalen = list->length;
    aa50:	ldrhne	r0, [r2, #8]
    aa52:	b.n	a88e <usb_isr+0x3ea>
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    aa54:	ldr	r1, [pc, #80]	; (aaa8 <usb_isr+0x604>)
		USB0_ISTAT = USB_ISTAT_STALL;
    aa56:	ldr	r3, [pc, #48]	; (aa88 <usb_isr+0x5e4>)
    aa58:	movs	r2, #128	; 0x80
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    aa5a:	movs	r0, #13
    aa5c:	strb	r0, [r1, #0]
		USB0_ISTAT = USB_ISTAT_STALL;
    aa5e:	strb	r2, [r3, #0]
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
    aa60:	lsls	r2, r4, #30
    aa62:	bpl.w	a838 <usb_isr+0x394>
    aa66:	b.n	a82a <usb_isr+0x386>
					//serial_phex(*buf);
					*dst++ = *buf++;
				}
				//serial_phex32(line_coding[0]);
				//serial_print("\n");
				if (line_coding[0] == 134) usb_reboot_timer = 15;
    aa68:	ldr	r2, [pc, #92]	; (aac8 <usb_isr+0x624>)
    aa6a:	movs	r1, #15
    aa6c:	strb	r1, [r2, #0]
    aa6e:	b.n	a96c <usb_isr+0x4c8>
		// TODO: required by PTP spec
		endpoint0_stall();
		return;
	case 0x67A1: // Get Device Statis (PTP spec, 5.2.4, page 10)
		// For now, always respond with status ok.
		reply_buffer[0] = 0x4;
    aa70:	ldr	r4, [pc, #32]	; (aa94 <usb_isr+0x5f0>)
    aa72:	ldr	r3, [pc, #88]	; (aacc <usb_isr+0x628>)
    aa74:	str	r3, [r4, #0]
		reply_buffer[1] = 0;
		reply_buffer[2] = 0x01;
		reply_buffer[3] = 0x20;
		data = reply_buffer;
		datalen = 4;
    aa76:	movs	r0, #4
    aa78:	b.n	a88e <usb_isr+0x3ea>
    aa7a:	nop
    aa7c:	.word	0x1fff8cf4
    aa80:	.word	0x1fff8d3c
    aa84:	.word	0x40072088
    aa88:	.word	0x40072080
    aa8c:	.word	0x1fff8d2d
    aa90:	.word	0x1fff8c3c
    aa94:	.word	0x1fff8d30
    aa98:	.word	0x1fff8d2c
    aa9c:	.word	0x1fff8cb0
    aaa0:	.word	0x1fff8c54
    aaa4:	.word	0x1fff8dac
    aaa8:	.word	0x400720c0
    aaac:	.word	0x40072094
    aab0:	.word	0x1fff0000
    aab4:	.word	0x00400088
    aab8:	.word	0x40072098
    aabc:	.word	0x1fff8c58
    aac0:	.word	0x1fff8cb4
    aac4:	.word	0x000109b0
    aac8:	.word	0x1fff8cb1
    aacc:	.word	0x20010004
    aad0:	.word	0x4007208c
    aad4:	ldrh	r1, [r5, #4]
    aad6:	and.w	r1, r1, #127	; 0x7f
		data = reply_buffer;
		datalen = 2;
		break;
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    aada:	cmp	r1, #6
    aadc:	bhi.w	a9aa <usb_isr+0x506>
    aae0:	ldrh	r2, [r5, #2]
    aae2:	cmp	r2, #0
    aae4:	bne.w	a9aa <usb_isr+0x506>
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) &= ~0x02;
    aae8:	ldr	r4, [pc, #724]	; (adc0 <usb_isr+0x91c>)
    aaea:	str	r0, [sp, #8]
    aaec:	lsls	r1, r1, #2
    aaee:	add	r4, r1
    aaf0:	ldrb	r1, [r4, #0]
    aaf2:	bic.w	r1, r1, #2
    aaf6:	strb	r1, [r4, #0]
    aaf8:	b.n	ab14 <usb_isr+0x670>
		}
		//serial_print("desc: not found\n");
		endpoint0_stall();
		return;
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		switch (setup.wIndex) {
    aafa:	ldrh	r1, [r5, #4]
    aafc:	cmp	r1, #0
    aafe:	bne.w	acd6 <usb_isr+0x832>
#ifdef CDC_STATUS_INTERFACE
		  case CDC_STATUS_INTERFACE:
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    ab02:	ldr	r3, [pc, #704]	; (adc4 <usb_isr+0x920>)
    ab04:	ldr	r2, [pc, #704]	; (adc8 <usb_isr+0x924>)
			usb_cdc_line_rtsdtr = setup.wValue;
    ab06:	ldr	r4, [pc, #708]	; (adcc <usb_isr+0x928>)
		return;
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		switch (setup.wIndex) {
#ifdef CDC_STATUS_INTERFACE
		  case CDC_STATUS_INTERFACE:
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    ab08:	ldr	r3, [r3, #0]
			usb_cdc_line_rtsdtr = setup.wValue;
    ab0a:	ldrb	r5, [r5, #2]
		return;
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		switch (setup.wIndex) {
#ifdef CDC_STATUS_INTERFACE
		  case CDC_STATUS_INTERFACE:
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    ab0c:	str	r3, [r2, #0]
			usb_cdc_line_rtsdtr = setup.wValue;
    ab0e:	str	r0, [sp, #8]
    ab10:	mov	r2, r1
    ab12:	strb	r5, [r4, #0]
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
    ab14:	movs	r0, #0
    ab16:	str	r0, [sp, #4]
    ab18:	mov	r8, r0
    ab1a:	mov	lr, r0
    ab1c:	mov	r4, r0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    ab1e:	ldr	r1, [pc, #688]	; (add0 <usb_isr+0x92c>)
    ab20:	ldrb	r5, [r1, #0]
    ab22:	orr.w	ip, r5, #2
    ab26:	add.w	r3, r9, ip, lsl #3
    ab2a:	str	r3, [sp, #12]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    ab2c:	ldr	r3, [sp, #8]
    ab2e:	cmp	r3, #0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    ab30:	ldr	r3, [sp, #12]
    ab32:	str	r4, [r3, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    ab34:	ite	eq
    ab36:	moveq	r4, #136	; 0x88
    ab38:	movne	r4, #200	; 0xc8
    ab3a:	b.n	a8c4 <usb_isr+0x420>
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
    ab3c:	cmp	r0, #64	; 0x40
    ab3e:	bls.w	a8ea <usb_isr+0x446>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    ab42:	orr.w	r4, r4, #2
    ab46:	add.w	r1, ip, r4, lsl #3
    ab4a:	ldr	r6, [sp, #4]
    ab4c:	str	r6, [r1, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    ab4e:	cbz	r2, ab80 <usb_isr+0x6dc>
	ep0_tx_data_toggle ^= 1;
    ab50:	ldrb.w	r1, [sp, #8]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    ab54:	ldr	r2, [pc, #636]	; (add4 <usb_isr+0x930>)
	ep0_tx_data_toggle ^= 1;
    ab56:	strb	r1, [r3, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    ab58:	mov	r3, r6
    ab5a:	subs	r0, #64	; 0x40
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    ab5c:	strb.w	r5, [r8]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    ab60:	adds	r3, #64	; 0x40
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    ab62:	str.w	r2, [ip, r4, lsl #3]
    ab66:	b.n	a91c <usb_isr+0x478>
	ep0_tx_data_toggle ^= 1;
    ab68:	ldrb.w	r3, [sp, #8]
    ab6c:	strb	r3, [r6, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    ab6e:	lsls	r2, r0, #16
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    ab70:	ldr	r3, [sp, #4]
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    ab72:	strb	r5, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    ab74:	orr.w	r2, r2, #200	; 0xc8
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    ab78:	add	r3, r0
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    ab7a:	str.w	r2, [lr, ip, lsl #3]
    ab7e:	b.n	a916 <usb_isr+0x472>
	ep0_tx_data_toggle ^= 1;
    ab80:	ldrb.w	r1, [sp, #8]
    ab84:	strb	r1, [r3, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    ab86:	ldr	r3, [sp, #4]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    ab88:	ldr	r2, [pc, #588]	; (add8 <usb_isr+0x934>)
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    ab8a:	strb.w	r5, [r8]
    ab8e:	subs	r0, #64	; 0x40
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    ab90:	adds	r3, #64	; 0x40
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    ab92:	str.w	r2, [ip, r4, lsl #3]
    ab96:	b.n	a91c <usb_isr+0x478>
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_ODD_FIRST;
						break;
					  default:
						tx_state[endpoint] = ((uint32_t)b & 8) ?
    ab98:	tst.w	r9, #8
    ab9c:	ite	eq
    ab9e:	moveq	r3, #2
    aba0:	movne	r3, #3
    aba2:	strb	r3, [r1, r6]
						  TX_STATE_ODD_FREE : TX_STATE_EVEN_FREE;
						break;
    aba4:	b.n	a538 <usb_isr+0x94>
    aba6:	ldrh	r1, [r5, #4]
    aba8:	and.w	r1, r1, #127	; 0x7f
		datalen = 2;
		data = reply_buffer;
		break;
	  case 0x0082: // GET_STATUS (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS) {
    abac:	cmp	r1, #6
    abae:	bhi.w	a9aa <usb_isr+0x506>
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    abb2:	ldr	r3, [pc, #524]	; (adc0 <usb_isr+0x91c>)
		if (i > NUM_ENDPOINTS) {
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
    abb4:	ldr	r4, [pc, #548]	; (addc <usb_isr+0x938>)
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    abb6:	lsls	r1, r1, #2
    abb8:	add	r3, r1
		if (i > NUM_ENDPOINTS) {
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
    abba:	strb	r2, [r4, #0]
		reply_buffer[1] = 0;
    abbc:	strb	r2, [r4, #1]
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    abbe:	ldrb	r2, [r3, #0]
    abc0:	lsls	r3, r2, #30
    abc2:	bpl.w	acda <usb_isr+0x836>
    abc6:	strb	r0, [r4, #0]
		data = reply_buffer;
		datalen = 2;
    abc8:	movs	r0, #2
    abca:	b.n	a88e <usb_isr+0x3ea>
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
				break;
			  case TX_STATE_ODD_FREE:
			  case TX_STATE_NONE_FREE_ODD_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    abcc:	ldr	r3, [sp, #4]
    abce:	mov.w	r2, #1
    abd2:	strb	r2, [r3, #0]
    abd4:	ldr	r3, [sp, #4]
			if (table[i].desc & BDT_OWN) {
				usb_free((usb_packet_t *)((uint8_t *)(table[i].addr) - 8));
			}
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
    abd6:	adds	r4, #1
    abd8:	adds	r3, #1
    abda:	cmp	r4, #6
    abdc:	add.w	r6, r6, #4
    abe0:	add.w	r5, r5, #4
    abe4:	str	r3, [sp, #4]
    abe6:	bne.w	a676 <usb_isr+0x1d2>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    abea:	ldr	r5, [pc, #500]	; (ade0 <usb_isr+0x93c>)
			*reg = epconf;
    abec:	ldr	r1, [pc, #500]	; (ade4 <usb_isr+0x940>)
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    abee:	ldrb	r2, [r5, #0]
				break;
			  default:
				break;
			}
		}
		usb_rx_memory_needed = 0;
    abf0:	ldr	r4, [pc, #500]	; (ade8 <usb_isr+0x944>)
    abf2:	ldr	r7, [sp, #16]
    abf4:	ldr	r6, [sp, #20]
    abf6:	movs	r0, #0
    abf8:	strb	r0, [r4, #0]
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    abfa:	strb	r2, [r1, #0]
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    abfc:	lsls	r1, r2, #28
    abfe:	bmi.w	ad0c <usb_isr+0x868>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    ac02:	ldrb	r2, [r5, #1]
			*reg = epconf;
    ac04:	ldr	r1, [pc, #484]	; (adec <usb_isr+0x948>)
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    ac06:	ldr.w	r8, [pc, #504]	; ae00 <usb_isr+0x95c>
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    ac0a:	strb	r2, [r1, #0]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    ac0c:	movs	r1, #0
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    ac0e:	lsls	r2, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    ac10:	str.w	r1, [r9, #48]	; 0x30
			table[index(i, TX, ODD)].desc = 0;
    ac14:	str.w	r1, [r9, #56]	; 0x38
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    ac18:	bmi.n	acde <usb_isr+0x83a>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    ac1a:	ldrb	r2, [r5, #2]
			*reg = epconf;
    ac1c:	ldr	r1, [pc, #464]	; (adf0 <usb_isr+0x94c>)
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    ac1e:	ldr.w	r8, [pc, #480]	; ae00 <usb_isr+0x95c>
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    ac22:	strb	r2, [r1, #0]
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    ac24:	lsls	r3, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    ac26:	mov.w	r1, #0
    ac2a:	str.w	r1, [r9, #80]	; 0x50
			table[index(i, TX, ODD)].desc = 0;
    ac2e:	str.w	r1, [r9, #88]	; 0x58
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    ac32:	bmi.w	ae08 <usb_isr+0x964>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    ac36:	ldrb	r2, [r5, #3]
			*reg = epconf;
    ac38:	ldr	r1, [pc, #440]	; (adf4 <usb_isr+0x950>)
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    ac3a:	ldr.w	r8, [pc, #452]	; ae00 <usb_isr+0x95c>
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    ac3e:	strb	r2, [r1, #0]
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    ac40:	lsls	r0, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    ac42:	mov.w	r1, #0
    ac46:	str.w	r1, [r9, #112]	; 0x70
			table[index(i, TX, ODD)].desc = 0;
    ac4a:	str.w	r1, [r9, #120]	; 0x78
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    ac4e:	bmi.w	ad96 <usb_isr+0x8f2>
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    ac52:	ldr	r1, [pc, #420]	; (adf8 <usb_isr+0x954>)
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    ac54:	ldrb	r2, [r5, #4]
			*reg = epconf;
    ac56:	strb	r2, [r1, #0]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    ac58:	movs	r1, #0
    ac5a:	str.w	r1, [r9, #144]	; 0x90
			table[index(i, TX, ODD)].desc = 0;
    ac5e:	str.w	r1, [r9, #152]	; 0x98
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    ac62:	lsls	r1, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    ac64:	ldr.w	r8, [pc, #408]	; ae00 <usb_isr+0x95c>
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    ac68:	bmi.n	ad68 <usb_isr+0x8c4>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    ac6a:	ldrb	r2, [r5, #5]
			*reg = epconf;
    ac6c:	ldr	r1, [pc, #396]	; (adfc <usb_isr+0x958>)
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    ac6e:	ldr	r5, [pc, #400]	; (ae00 <usb_isr+0x95c>)
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    ac70:	strb	r2, [r1, #0]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    ac72:	movs	r1, #0
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    ac74:	lsls	r2, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    ac76:	str.w	r1, [r9, #176]	; 0xb0
			table[index(i, TX, ODD)].desc = 0;
    ac7a:	str.w	r1, [r9, #184]	; 0xb8
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    ac7e:	bmi.n	ad3a <usb_isr+0x896>
    ac80:	ldrb	r3, [r6, #0]
    ac82:	str	r3, [sp, #8]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    ac84:	movs	r1, #0
    ac86:	eor.w	r2, r3, #1
    ac8a:	str.w	r1, [r9, #208]	; 0xd0
			table[index(i, TX, ODD)].desc = 0;
    ac8e:	str.w	r1, [r9, #216]	; 0xd8
    ac92:	b.n	ab14 <usb_isr+0x670>
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
			  case TX_STATE_EVEN_FREE:
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
    ac94:	ldr	r3, [sp, #4]
    ac96:	mov.w	r2, #0
    ac9a:	strb	r2, [r3, #0]
    ac9c:	b.n	abd4 <usb_isr+0x730>
			}
#endif
		}
		break;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    ac9e:	ldr	r2, [pc, #356]	; (ae04 <usb_isr+0x960>)
    aca0:	ldr	r4, [pc, #312]	; (addc <usb_isr+0x938>)
    aca2:	ldrb	r2, [r2, #0]
    aca4:	strb	r2, [r4, #0]
    aca6:	b.n	a88e <usb_isr+0x3ea>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    aca8:	movs	r3, #1
    acaa:	movs	r2, #0
    acac:	str	r3, [sp, #8]
    acae:	b.n	ab14 <usb_isr+0x670>
    acb0:	ldrh	r1, [r5, #4]
    acb2:	and.w	r1, r1, #127	; 0x7f
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) &= ~0x02;
		// TODO: do we need to clear the data toggle here?
		break;
	  case 0x0302: // SET_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    acb6:	cmp	r1, #6
    acb8:	bhi.w	a9aa <usb_isr+0x506>
    acbc:	ldrh	r2, [r5, #2]
    acbe:	cmp	r2, #0
    acc0:	bne.w	a9aa <usb_isr+0x506>
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) |= 0x02;
    acc4:	ldr	r4, [pc, #248]	; (adc0 <usb_isr+0x91c>)
    acc6:	str	r0, [sp, #8]
    acc8:	lsls	r1, r1, #2
    acca:	add	r4, r1
    accc:	ldrb	r1, [r4, #0]
    acce:	orr.w	r1, r1, #2
    acd2:	strb	r1, [r4, #0]
    acd4:	b.n	ab14 <usb_isr+0x670>
		}
		//serial_print("desc: not found\n");
		endpoint0_stall();
		return;
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		switch (setup.wIndex) {
    acd6:	str	r0, [sp, #8]
    acd8:	b.n	ab14 <usb_isr+0x670>
		}
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
		data = reply_buffer;
		datalen = 2;
    acda:	movs	r0, #2
    acdc:	b.n	a88e <usb_isr+0x3ea>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    acde:	bl	a224 <usb_malloc>
				if (p) {
    ace2:	cmp	r0, #0
    ace4:	beq.w	aebe <usb_isr+0xa1a>
					table[index(i, RX, EVEN)].addr = p->buf;
    ace8:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    acea:	ldr	r2, [pc, #236]	; (add8 <usb_isr+0x934>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    acec:	str.w	r0, [r8, #68]	; 0x44
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    acf0:	str.w	r2, [r8, #64]	; 0x40
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    acf4:	bl	a224 <usb_malloc>
				if (p) {
    acf8:	cmp	r0, #0
    acfa:	beq.w	aeb2 <usb_isr+0xa0e>
					table[index(i, RX, ODD)].addr = p->buf;
    acfe:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    ad00:	ldr	r2, [pc, #208]	; (add4 <usb_isr+0x930>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    ad02:	str.w	r0, [r9, #76]	; 0x4c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    ad06:	str.w	r2, [r9, #72]	; 0x48
    ad0a:	b.n	ac1a <usb_isr+0x776>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    ad0c:	bl	a224 <usb_malloc>
				if (p) {
    ad10:	cmp	r0, #0
    ad12:	beq.w	ae8e <usb_isr+0x9ea>
					table[index(i, RX, EVEN)].addr = p->buf;
    ad16:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    ad18:	ldr	r2, [pc, #188]	; (add8 <usb_isr+0x934>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    ad1a:	str.w	r0, [r9, #36]	; 0x24
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    ad1e:	str.w	r2, [r9, #32]
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    ad22:	bl	a224 <usb_malloc>
				if (p) {
    ad26:	cmp	r0, #0
    ad28:	beq.w	ae82 <usb_isr+0x9de>
					table[index(i, RX, ODD)].addr = p->buf;
    ad2c:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    ad2e:	ldr	r2, [pc, #164]	; (add4 <usb_isr+0x930>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    ad30:	str.w	r0, [r9, #44]	; 0x2c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    ad34:	str.w	r2, [r9, #40]	; 0x28
    ad38:	b.n	ac02 <usb_isr+0x75e>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    ad3a:	bl	a224 <usb_malloc>
				if (p) {
    ad3e:	cmp	r0, #0
    ad40:	beq.w	ae76 <usb_isr+0x9d2>
					table[index(i, RX, EVEN)].addr = p->buf;
    ad44:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    ad46:	ldr	r2, [pc, #144]	; (add8 <usb_isr+0x934>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    ad48:	str.w	r0, [r5, #196]	; 0xc4
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    ad4c:	str.w	r2, [r5, #192]	; 0xc0
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    ad50:	bl	a224 <usb_malloc>
				if (p) {
    ad54:	cmp	r0, #0
    ad56:	beq.w	ae6a <usb_isr+0x9c6>
					table[index(i, RX, ODD)].addr = p->buf;
    ad5a:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    ad5c:	ldr	r2, [pc, #116]	; (add4 <usb_isr+0x930>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    ad5e:	str.w	r0, [r9, #204]	; 0xcc
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    ad62:	str.w	r2, [r9, #200]	; 0xc8
    ad66:	b.n	ac80 <usb_isr+0x7dc>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    ad68:	bl	a224 <usb_malloc>
				if (p) {
    ad6c:	cmp	r0, #0
    ad6e:	beq.w	aea6 <usb_isr+0xa02>
					table[index(i, RX, EVEN)].addr = p->buf;
    ad72:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    ad74:	ldr	r2, [pc, #96]	; (add8 <usb_isr+0x934>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    ad76:	str.w	r0, [r8, #164]	; 0xa4
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    ad7a:	str.w	r2, [r8, #160]	; 0xa0
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    ad7e:	bl	a224 <usb_malloc>
				if (p) {
    ad82:	cmp	r0, #0
    ad84:	beq.w	ae9a <usb_isr+0x9f6>
					table[index(i, RX, ODD)].addr = p->buf;
    ad88:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    ad8a:	ldr	r2, [pc, #72]	; (add4 <usb_isr+0x930>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    ad8c:	str.w	r0, [r9, #172]	; 0xac
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    ad90:	str.w	r2, [r9, #168]	; 0xa8
    ad94:	b.n	ac6a <usb_isr+0x7c6>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    ad96:	bl	a224 <usb_malloc>
				if (p) {
    ad9a:	cmp	r0, #0
    ad9c:	beq.n	ae5e <usb_isr+0x9ba>
					table[index(i, RX, EVEN)].addr = p->buf;
    ad9e:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    ada0:	ldr	r2, [pc, #52]	; (add8 <usb_isr+0x934>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    ada2:	str.w	r0, [r8, #132]	; 0x84
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    ada6:	str.w	r2, [r8, #128]	; 0x80
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    adaa:	bl	a224 <usb_malloc>
				if (p) {
    adae:	cmp	r0, #0
    adb0:	beq.n	ae52 <usb_isr+0x9ae>
					table[index(i, RX, ODD)].addr = p->buf;
    adb2:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    adb4:	ldr	r2, [pc, #28]	; (add4 <usb_isr+0x930>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    adb6:	str.w	r0, [r9, #140]	; 0x8c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    adba:	str.w	r2, [r9, #136]	; 0x88
    adbe:	b.n	ac52 <usb_isr+0x7ae>
    adc0:	.word	0x400720c0
    adc4:	.word	0x1fff8c34
    adc8:	.word	0x1fff8db4
    adcc:	.word	0x1fff8c30
    add0:	.word	0x1fff8d2c
    add4:	.word	0x004000c8
    add8:	.word	0x00400088
    addc:	.word	0x1fff8d30
    ade0:	.word	0x000109a8
    ade4:	.word	0x400720c4
    ade8:	.word	0x1fff8d2d
    adec:	.word	0x400720c8
    adf0:	.word	0x400720cc
    adf4:	.word	0x400720d0
    adf8:	.word	0x400720d4
    adfc:	.word	0x400720d8
    ae00:	.word	0x1fff0000
    ae04:	.word	0x1fff8d38
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    ae08:	bl	a224 <usb_malloc>
				if (p) {
    ae0c:	cmp	r0, #0
    ae0e:	beq.n	aed6 <usb_isr+0xa32>
					table[index(i, RX, EVEN)].addr = p->buf;
    ae10:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    ae12:	ldr	r2, [pc, #208]	; (aee4 <usb_isr+0xa40>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    ae14:	str.w	r0, [r8, #100]	; 0x64
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    ae18:	str.w	r2, [r8, #96]	; 0x60
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    ae1c:	bl	a224 <usb_malloc>
				if (p) {
    ae20:	cmp	r0, #0
    ae22:	beq.n	aeca <usb_isr+0xa26>
					table[index(i, RX, ODD)].addr = p->buf;
    ae24:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    ae26:	ldr	r2, [pc, #192]	; (aee8 <usb_isr+0xa44>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    ae28:	str.w	r0, [r9, #108]	; 0x6c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    ae2c:	str.w	r2, [r9, #104]	; 0x68
    ae30:	b.n	ac36 <usb_isr+0x792>
    ae32:	cmp	r0, #64	; 0x40
    ae34:	mov	lr, r0
    ae36:	it	cs
    ae38:	movcs.w	lr, #64	; 0x40
    ae3c:	add.w	r3, r4, lr
    ae40:	str	r3, [sp, #4]
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
    ae42:	movs	r3, #1
    ae44:	rsb	r0, lr, r0
    ae48:	mov.w	r8, lr, lsl #16
    ae4c:	movs	r2, #0
    ae4e:	str	r3, [sp, #8]
    ae50:	b.n	ab1e <usb_isr+0x67a>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    ae52:	ldrb	r2, [r4, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    ae54:	str.w	r0, [r9, #136]	; 0x88
					usb_rx_memory_needed++;
    ae58:	adds	r2, #1
    ae5a:	strb	r2, [r4, #0]
    ae5c:	b.n	ac52 <usb_isr+0x7ae>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    ae5e:	ldrb	r2, [r4, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    ae60:	str.w	r0, [r8, #128]	; 0x80
					usb_rx_memory_needed++;
    ae64:	adds	r2, #1
    ae66:	strb	r2, [r4, #0]
    ae68:	b.n	adaa <usb_isr+0x906>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    ae6a:	ldrb	r2, [r4, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    ae6c:	str.w	r0, [r9, #200]	; 0xc8
					usb_rx_memory_needed++;
    ae70:	adds	r2, #1
    ae72:	strb	r2, [r4, #0]
    ae74:	b.n	ac80 <usb_isr+0x7dc>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    ae76:	ldrb	r2, [r4, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    ae78:	str.w	r0, [r5, #192]	; 0xc0
					usb_rx_memory_needed++;
    ae7c:	adds	r2, #1
    ae7e:	strb	r2, [r4, #0]
    ae80:	b.n	ad50 <usb_isr+0x8ac>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    ae82:	ldrb	r2, [r4, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    ae84:	str.w	r0, [r9, #40]	; 0x28
					usb_rx_memory_needed++;
    ae88:	adds	r2, #1
    ae8a:	strb	r2, [r4, #0]
    ae8c:	b.n	ac02 <usb_isr+0x75e>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    ae8e:	ldrb	r2, [r4, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    ae90:	str.w	r0, [r9, #32]
					usb_rx_memory_needed++;
    ae94:	adds	r2, #1
    ae96:	strb	r2, [r4, #0]
    ae98:	b.n	ad22 <usb_isr+0x87e>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    ae9a:	ldrb	r2, [r4, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    ae9c:	str.w	r0, [r9, #168]	; 0xa8
					usb_rx_memory_needed++;
    aea0:	adds	r2, #1
    aea2:	strb	r2, [r4, #0]
    aea4:	b.n	ac6a <usb_isr+0x7c6>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    aea6:	ldrb	r2, [r4, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    aea8:	str.w	r0, [r8, #160]	; 0xa0
					usb_rx_memory_needed++;
    aeac:	adds	r2, #1
    aeae:	strb	r2, [r4, #0]
    aeb0:	b.n	ad7e <usb_isr+0x8da>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    aeb2:	ldrb	r2, [r4, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    aeb4:	str.w	r0, [r9, #72]	; 0x48
					usb_rx_memory_needed++;
    aeb8:	adds	r2, #1
    aeba:	strb	r2, [r4, #0]
    aebc:	b.n	ac1a <usb_isr+0x776>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    aebe:	ldrb	r2, [r4, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    aec0:	str.w	r0, [r8, #64]	; 0x40
					usb_rx_memory_needed++;
    aec4:	adds	r2, #1
    aec6:	strb	r2, [r4, #0]
    aec8:	b.n	acf4 <usb_isr+0x850>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    aeca:	ldrb	r2, [r4, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    aecc:	str.w	r0, [r9, #104]	; 0x68
					usb_rx_memory_needed++;
    aed0:	adds	r2, #1
    aed2:	strb	r2, [r4, #0]
    aed4:	b.n	ac36 <usb_isr+0x792>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    aed6:	ldrb	r2, [r4, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    aed8:	str.w	r0, [r8, #96]	; 0x60
					usb_rx_memory_needed++;
    aedc:	adds	r2, #1
    aede:	strb	r2, [r4, #0]
    aee0:	b.n	ae1c <usb_isr+0x978>


void _reboot_Teensyduino_(void)
{
	// TODO: initialize R0 with a code....
	__asm__ volatile("bkpt");
    aee2:	bkpt	0x0000
    aee4:	.word	0x00400088
    aee8:	.word	0x004000c8

0000aeec <usb_init>:
}



void usb_init(void)
{
    aeec:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    aef0:	ldr	r4, [pc, #144]	; (af84 <usb_init+0x98>)
	int i;

	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();
    aef2:	bl	b428 <usb_init_serialnumber>

	for (i=0; i < (NUM_ENDPOINTS+1)*4; i++) {
		table[i].desc = 0;
    aef6:	movs	r2, #0
    aef8:	add.w	r0, r4, #224	; 0xe0
	int i;

	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();
    aefc:	mov	r3, r4

	for (i=0; i < (NUM_ENDPOINTS+1)*4; i++) {
		table[i].desc = 0;
    aefe:	str	r2, [r3, #0]
		table[i].addr = 0;
    af00:	str	r2, [r3, #4]
    af02:	adds	r3, #8
	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i < (NUM_ENDPOINTS+1)*4; i++) {
    af04:	cmp	r3, r0
		table[i].desc = 0;
    af06:	mov.w	r1, #0
	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i < (NUM_ENDPOINTS+1)*4; i++) {
    af0a:	bne.n	aefe <usb_init+0x12>
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    af0c:	ldr	r0, [pc, #120]	; (af88 <usb_init+0x9c>)
#ifdef HAS_KINETIS_MPU
	MPU_RGDAAC0 |= 0x03000000;
    af0e:	ldr	r2, [pc, #124]	; (af8c <usb_init+0xa0>)
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    af10:	ldr	r3, [r0, #0]
	// reset USB module
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
    af12:	ldr.w	lr, [pc, #144]	; afa4 <usb_init+0xb8>
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    af16:	ldr	r7, [pc, #120]	; (af90 <usb_init+0xa4>)
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    af18:	ldr	r5, [pc, #120]	; (af94 <usb_init+0xa8>)

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
	USB0_ERRSTAT = 0xFF;
	USB0_OTGISTAT = 0xFF;
    af1a:	ldr	r6, [pc, #124]	; (af98 <usb_init+0xac>)
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
    af1c:	ldr.w	r8, [pc, #136]	; afa8 <usb_init+0xbc>
	USB0_ERRSTAT = 0xFF;
    af20:	ldr.w	ip, [pc, #136]	; afac <usb_init+0xc0>
	USB0_OTGISTAT = 0xFF;

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
    af24:	ldr.w	r9, [pc, #136]	; afb0 <usb_init+0xc4>
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    af28:	orr.w	r3, r3, #262144	; 0x40000
    af2c:	str	r3, [r0, #0]
#ifdef HAS_KINETIS_MPU
	MPU_RGDAAC0 |= 0x03000000;
    af2e:	ldr	r3, [r2, #0]
	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    af30:	ldr	r0, [pc, #104]	; (af9c <usb_init+0xb0>)

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
#ifdef HAS_KINETIS_MPU
	MPU_RGDAAC0 |= 0x03000000;
    af32:	orr.w	r3, r3, #50331648	; 0x3000000
    af36:	str	r3, [r2, #0]
	// reset USB module
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
    af38:	ubfx	r3, r4, #8, #8
    af3c:	strb.w	r3, [lr]
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    af40:	ubfx	r3, r4, #16, #8
    af44:	strb	r3, [r7, #0]
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    af46:	lsrs	r4, r4, #24

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
    af48:	movs	r3, #255	; 0xff
	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
	NVIC_ENABLE_IRQ(IRQ_USBOTG);

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    af4a:	add.w	r2, r2, #411648	; 0x64800
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    af4e:	strb	r4, [r5, #0]
	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
	NVIC_ENABLE_IRQ(IRQ_USBOTG);

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    af50:	add.w	r2, r2, #264	; 0x108
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
    af54:	strb.w	r3, [r8]

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    af58:	ldr	r5, [pc, #68]	; (afa0 <usb_init+0xb4>)
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
	USB0_ERRSTAT = 0xFF;
    af5a:	strb.w	r3, [ip]
	USB0_OTGISTAT = 0xFF;
    af5e:	strb	r3, [r6, #0]

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
    af60:	movs	r3, #1
    af62:	strb.w	r3, [r9]

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    af66:	movs	r6, #112	; 0x70

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
	USB0_USBCTRL = 0;
    af68:	strb.w	r1, [lr, #100]	; 0x64
	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    af6c:	mov.w	r4, #2097152	; 0x200000

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    af70:	movs	r1, #16
	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
	USB0_USBCTRL = 0;

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;
    af72:	strb.w	r3, [r7, #-44]

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    af76:	strb	r6, [r5, #0]
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    af78:	str	r4, [r0, #0]

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    af7a:	strb	r1, [r2, #0]

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
	USB0_USBCTRL = 0;
    af7c:	add.w	lr, lr, #100	; 0x64
	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
	NVIC_ENABLE_IRQ(IRQ_USBOTG);

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    af80:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    af84:	.word	0x1fff0000
    af88:	.word	0x40048034
    af8c:	.word	0x4000d800
    af90:	.word	0x400720b0
    af94:	.word	0x400720b4
    af98:	.word	0x40072010
    af9c:	.word	0xe000e104
    afa0:	.word	0xe000e435
    afa4:	.word	0x4007209c
    afa8:	.word	0x40072080
    afac:	.word	0x40072088
    afb0:	.word	0x40072094

0000afb4 <yield>:

extern const uint8_t _serialEvent_default;	

void yield(void) __attribute__ ((weak));
void yield(void)
{
    afb4:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	static uint8_t running=0;
	if (!yield_active_check_flags) return;	// nothing to do
    afb8:	ldr	r6, [pc, #196]	; (b080 <yield+0xcc>)
    afba:	ldrb	r3, [r6, #0]
    afbc:	cbz	r3, afe4 <yield+0x30>
	if (running) return; // TODO: does this need to be atomic?
    afbe:	ldr	r7, [pc, #196]	; (b084 <yield+0xd0>)
    afc0:	ldrb	r2, [r7, #0]
    afc2:	cbnz	r2, afe4 <yield+0x30>
	running = 1;
    afc4:	movs	r2, #1


	// USB Serail - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
    afc6:	lsls	r1, r3, #31
void yield(void)
{
	static uint8_t running=0;
	if (!yield_active_check_flags) return;	// nothing to do
	if (running) return; // TODO: does this need to be atomic?
	running = 1;
    afc8:	strb	r2, [r7, #0]


	// USB Serail - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
    afca:	bmi.n	b03a <yield+0x86>
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIALUSB2) {
		if (SerialUSB2.available()) serialEventUSB2();
		if (_serialEventUSB2_default) yield_active_check_flags &= ~YIELD_CHECK_USB_SERIALUSB2;
	}
#endif
	if (yield_active_check_flags & YIELD_CHECK_HARDWARE_SERIAL) {
    afcc:	lsls	r2, r3, #30
    afce:	bmi.n	b004 <yield+0x50>
		HardwareSerial::processSerialEventsList();
	}
	running = 0;
    afd0:	movs	r2, #0
	if (yield_active_check_flags & YIELD_CHECK_EVENT_RESPONDER) EventResponder::runFromYield();
    afd2:	lsls	r3, r3, #29
	}
#endif
	if (yield_active_check_flags & YIELD_CHECK_HARDWARE_SERIAL) {
		HardwareSerial::processSerialEventsList();
	}
	running = 0;
    afd4:	strb	r2, [r7, #0]
	if (yield_active_check_flags & YIELD_CHECK_EVENT_RESPONDER) EventResponder::runFromYield();
    afd6:	bpl.n	afe4 <yield+0x30>
	// used with a scheduler or RTOS.
	bool waitForEvent(EventResponderRef event, int timeout);
	EventResponder * waitForEvent(EventResponder *list, int listsize, int timeout);

	static void runFromYield() {
		if (!firstYield) return;  
    afd8:	ldr	r3, [pc, #172]	; (b088 <yield+0xd4>)
    afda:	ldr	r2, [r3, #0]
    afdc:	cbz	r2, afe4 <yield+0x30>
		// First, check if yield was called from an interrupt
		// never call normal handler functions from any interrupt context
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    afde:	mrs	r2, IPSR
		if (ipsr != 0) return;
    afe2:	cbz	r2, afe8 <yield+0x34>
    afe4:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    afe8:	mrs	r1, PRIMASK
		__disable_irq();
    afec:	cpsid	i
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
		if (ipsr != 0) return;
		// Next, check if any events have been triggered
		bool irq = disableInterrupts();
		EventResponder *first = firstYield;
    afee:	ldr	r0, [r3, #0]
		if (first == nullptr) {
    aff0:	cbz	r0, affa <yield+0x46>
			return;
		}
		// Finally, make sure we're not being recursively called,
		// which can happen if the user's function does anything
		// that calls yield.
		if (runningFromYield) {
    aff2:	ldr	r4, [pc, #152]	; (b08c <yield+0xd8>)
    aff4:	ldrb	r2, [r4, #0]
    aff6:	cmp	r2, #0
    aff8:	beq.n	b058 <yield+0xa4>
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    affa:	cmp	r1, #0
    affc:	bne.n	afe4 <yield+0x30>
    affe:	cpsie	i
    b000:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					  return len; }
	virtual size_t write9bit(uint32_t c)	{ serial_putchar(c); return 1; }
	operator bool()			{ return true; }

	static inline void processSerialEventsList() {
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    b004:	ldr.w	r8, [pc, #144]	; b098 <yield+0xe4>
    b008:	ldrb.w	r2, [r8]
    b00c:	cmp	r2, #0
    b00e:	beq.n	afd0 <yield+0x1c>
    b010:	ldr.w	r9, [pc, #136]	; b09c <yield+0xe8>
    b014:	movs	r4, #0
    b016:	b.n	b024 <yield+0x70>
    b018:	adds	r4, #1
    b01a:	ldrb.w	r3, [r8]
    b01e:	uxtb	r4, r4
    b020:	cmp	r3, r4
    b022:	bls.n	b04a <yield+0x96>
			s_serials_with_serial_events[i]->doYieldCode();
    b024:	ldr.w	r5, [r9, r4, lsl #2]
	static HardwareSerial 	*s_serials_with_serial_events[CNT_HARDWARE_SERIAL];
	static uint8_t 			s_count_serials_with_serial_events;
	void 		(* const _serialEvent)(); 
	void addToSerialEventsList(); 
	inline void doYieldCode()  {
		if (available()) (*_serialEvent)();
    b028:	ldr	r3, [r5, #0]
    b02a:	mov	r0, r5
    b02c:	ldr	r3, [r3, #16]
    b02e:	blx	r3
    b030:	cmp	r0, #0
    b032:	beq.n	b018 <yield+0x64>
    b034:	ldr	r3, [r5, #16]
    b036:	blx	r3
    b038:	b.n	b018 <yield+0x64>
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    b03a:	bl	9c54 <usb_serial_available>
	running = 1;


	// USB Serail - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
		if (Serial.available()) serialEvent();
    b03e:	cbnz	r0, b074 <yield+0xc0>
		if (_serialEvent_default) yield_active_check_flags &= ~YIELD_CHECK_USB_SERIAL;
    b040:	ldr	r3, [pc, #76]	; (b090 <yield+0xdc>)
    b042:	ldrb	r3, [r3, #0]
    b044:	cbnz	r3, b04e <yield+0x9a>
    b046:	ldrb	r3, [r6, #0]
    b048:	b.n	afcc <yield+0x18>
    b04a:	ldrb	r3, [r6, #0]
    b04c:	b.n	afd0 <yield+0x1c>
    b04e:	ldrb	r3, [r6, #0]
    b050:	and.w	r3, r3, #254	; 0xfe
    b054:	strb	r3, [r6, #0]
    b056:	b.n	afcc <yield+0x18>
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
		firstYield = first->_next;
    b058:	ldr	r5, [r0, #20]
    b05a:	str	r5, [r3, #0]
		if (runningFromYield) {
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
    b05c:	movs	r3, #1
    b05e:	strb	r3, [r4, #0]
		firstYield = first->_next;
		if (firstYield) {
    b060:	cbz	r5, b07a <yield+0xc6>
			firstYield->_prev = nullptr;
    b062:	str	r2, [r5, #24]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    b064:	cbnz	r1, b068 <yield+0xb4>
    b066:	cpsie	i
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
		}
		enableInterrupts(irq);
		first->_triggered = false;
    b068:	movs	r5, #0
    b06a:	strb	r5, [r0, #29]
		(*(first->_function))(*first);
    b06c:	ldr	r3, [r0, #8]
    b06e:	blx	r3
		runningFromYield = false;
    b070:	strb	r5, [r4, #0]
    b072:	b.n	afe4 <yield+0x30>
	running = 1;


	// USB Serail - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
		if (Serial.available()) serialEvent();
    b074:	bl	b33c <serialEvent()>
    b078:	b.n	b040 <yield+0x8c>
		runningFromYield = true;
		firstYield = first->_next;
		if (firstYield) {
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
    b07a:	ldr	r3, [pc, #24]	; (b094 <yield+0xe0>)
    b07c:	str	r5, [r3, #0]
    b07e:	b.n	b064 <yield+0xb0>
    b080:	.word	0x1fff09a0
    b084:	.word	0x1fff8d42
    b088:	.word	0x1fff8d54
    b08c:	.word	0x1fff8d58
    b090:	.word	0x1fff09b4
    b094:	.word	0x1fff8d50
    b098:	.word	0x1fff8d74
    b09c:	.word	0x1fff8d5c

0000b0a0 <DMAChannel::begin(bool)>:
/**                     Teensy 3.0 & 3.1                       **/
/****************************************************************/
#if defined(KINETISK)

void DMAChannel::begin(bool force_initialization)
{
    b0a0:	push	{r4, r5, r6, r7, lr}
	uint32_t ch = 0;

	__disable_irq();
    b0a2:	cpsid	i
	if (!force_initialization && TCD && channel < DMA_MAX_CHANNELS
    b0a4:	cbnz	r1, b0ce <DMAChannel::begin(bool)+0x2e>
    b0a6:	ldr	r2, [r0, #0]
    b0a8:	cbz	r2, b0ce <DMAChannel::begin(bool)+0x2e>
    b0aa:	ldrb	r3, [r0, #4]
    b0ac:	cmp	r3, #15
    b0ae:	bhi.n	b0ce <DMAChannel::begin(bool)+0x2e>
	  && (dma_channel_allocated_mask & (1 << channel))
    b0b0:	ldr	r4, [pc, #160]	; (b154 <DMAChannel::begin(bool)+0xb4>)
    b0b2:	ldrh	r1, [r4, #0]
    b0b4:	asr.w	r5, r1, r3
    b0b8:	lsls	r5, r5, #31
    b0ba:	bpl.n	b0d2 <DMAChannel::begin(bool)+0x32>
	  && (uint32_t)TCD == (uint32_t)(0x40009000 + channel * 32)) {
    b0bc:	add.w	r3, r3, #33554432	; 0x2000000
    b0c0:	add.w	r3, r3, #1152	; 0x480
    b0c4:	cmp.w	r2, r3, lsl #5
    b0c8:	bne.n	b0d2 <DMAChannel::begin(bool)+0x32>
		// DMA channel already allocated
		__enable_irq();
    b0ca:	cpsie	i
		return;
    b0cc:	pop	{r4, r5, r6, r7, pc}
    b0ce:	ldr	r4, [pc, #132]	; (b154 <DMAChannel::begin(bool)+0xb4>)
    b0d0:	ldrh	r1, [r4, #0]
/**                     Teensy 3.0 & 3.1                       **/
/****************************************************************/
#if defined(KINETISK)

void DMAChannel::begin(bool force_initialization)
{
    b0d2:	movs	r3, #0
		// DMA channel already allocated
		__enable_irq();
		return;
	}
	while (1) {
		if (!(dma_channel_allocated_mask & (1 << ch))) {
    b0d4:	asr.w	r2, r1, r3
    b0d8:	ands.w	r2, r2, #1
    b0dc:	beq.n	b0ee <DMAChannel::begin(bool)+0x4e>
			dma_channel_allocated_mask |= (1 << ch);
			__enable_irq();
			break;
		}
		if (++ch >= DMA_MAX_CHANNELS) {
    b0de:	adds	r3, #1
    b0e0:	cmp	r3, #16
    b0e2:	bne.n	b0d4 <DMAChannel::begin(bool)+0x34>
			__enable_irq();
    b0e4:	cpsie	i
			TCD = (TCD_t *)0;
    b0e6:	movs	r2, #0
			channel = DMA_MAX_CHANNELS;
    b0e8:	strb	r3, [r0, #4]
			__enable_irq();
			break;
		}
		if (++ch >= DMA_MAX_CHANNELS) {
			__enable_irq();
			TCD = (TCD_t *)0;
    b0ea:	str	r2, [r0, #0]
    b0ec:	pop	{r4, r5, r6, r7, pc}
		__enable_irq();
		return;
	}
	while (1) {
		if (!(dma_channel_allocated_mask & (1 << ch))) {
			dma_channel_allocated_mask |= (1 << ch);
    b0ee:	movs	r5, #1
    b0f0:	lsls	r5, r3
    b0f2:	orrs	r1, r5
    b0f4:	strh	r1, [r4, #0]
			__enable_irq();
    b0f6:	cpsie	i
			return; // no more channels available
			// attempts to use this object will hardfault
		}
	}
	channel = ch;
	SIM_SCGC7 |= SIM_SCGC7_DMA;
    b0f8:	ldr	r6, [pc, #92]	; (b158 <DMAChannel::begin(bool)+0xb8>)
	SIM_SCGC6 |= SIM_SCGC6_DMAMUX;
    b0fa:	ldr	r5, [pc, #96]	; (b15c <DMAChannel::begin(bool)+0xbc>)
#if DMA_NUM_CHANNELS <= 16
	DMA_CR = DMA_CR_EMLM | DMA_CR_EDBG; // minor loop mapping is available
#else
	DMA_CR = DMA_CR_GRP1PRI| DMA_CR_EMLM | DMA_CR_EDBG;
    b0fc:	ldr	r7, [pc, #96]	; (b160 <DMAChannel::begin(bool)+0xc0>)
#endif
	DMA_CERQ = ch;
    b0fe:	ldr.w	lr, [pc, #104]	; b168 <DMAChannel::begin(bool)+0xc8>
			channel = DMA_MAX_CHANNELS;
			return; // no more channels available
			// attempts to use this object will hardfault
		}
	}
	channel = ch;
    b102:	uxtb	r1, r3
    b104:	strb	r1, [r0, #4]
	SIM_SCGC7 |= SIM_SCGC7_DMA;
    b106:	ldr	r4, [r6, #0]
    b108:	orr.w	r4, r4, #2
    b10c:	str	r4, [r6, #0]
	SIM_SCGC6 |= SIM_SCGC6_DMAMUX;
    b10e:	ldr	r4, [r5, #0]
    b110:	orr.w	r4, r4, #2
    b114:	str	r4, [r5, #0]
	DMA_CR = DMA_CR_EMLM | DMA_CR_EDBG; // minor loop mapping is available
#else
	DMA_CR = DMA_CR_GRP1PRI| DMA_CR_EMLM | DMA_CR_EDBG;
#endif
	DMA_CERQ = ch;
	DMA_CERR = ch;
    b116:	sub.w	r6, r6, #262144	; 0x40000
	SIM_SCGC7 |= SIM_SCGC7_DMA;
	SIM_SCGC6 |= SIM_SCGC6_DMAMUX;
#if DMA_NUM_CHANNELS <= 16
	DMA_CR = DMA_CR_EMLM | DMA_CR_EDBG; // minor loop mapping is available
#else
	DMA_CR = DMA_CR_GRP1PRI| DMA_CR_EMLM | DMA_CR_EDBG;
    b11a:	movw	r4, #1154	; 0x482
#endif
	DMA_CERQ = ch;
	DMA_CERR = ch;
	DMA_CEEI = ch;
    b11e:	sub.w	r5, r5, #262144	; 0x40000
	DMA_CINT = ch;
	TCD = (TCD_t *)(0x40009000 + ch * 32);
    b122:	add.w	r3, r3, #33554432	; 0x2000000
	SIM_SCGC7 |= SIM_SCGC7_DMA;
	SIM_SCGC6 |= SIM_SCGC6_DMAMUX;
#if DMA_NUM_CHANNELS <= 16
	DMA_CR = DMA_CR_EMLM | DMA_CR_EDBG; // minor loop mapping is available
#else
	DMA_CR = DMA_CR_GRP1PRI| DMA_CR_EMLM | DMA_CR_EDBG;
    b126:	str	r4, [r7, #0]
#endif
	DMA_CERQ = ch;
	DMA_CERR = ch;
	DMA_CEEI = ch;
	DMA_CINT = ch;
	TCD = (TCD_t *)(0x40009000 + ch * 32);
    b128:	add.w	r3, r3, #1152	; 0x480
	DMA_CR = DMA_CR_EMLM | DMA_CR_EDBG; // minor loop mapping is available
#else
	DMA_CR = DMA_CR_GRP1PRI| DMA_CR_EMLM | DMA_CR_EDBG;
#endif
	DMA_CERQ = ch;
	DMA_CERR = ch;
    b12c:	subs	r6, #34	; 0x22
	DMA_CEEI = ch;
    b12e:	subs	r5, #36	; 0x24
	DMA_CINT = ch;
    b130:	ldr	r4, [pc, #48]	; (b164 <DMAChannel::begin(bool)+0xc4>)
#if DMA_NUM_CHANNELS <= 16
	DMA_CR = DMA_CR_EMLM | DMA_CR_EDBG; // minor loop mapping is available
#else
	DMA_CR = DMA_CR_GRP1PRI| DMA_CR_EMLM | DMA_CR_EDBG;
#endif
	DMA_CERQ = ch;
    b132:	strb.w	r1, [lr]
	DMA_CERR = ch;
	DMA_CEEI = ch;
	DMA_CINT = ch;
	TCD = (TCD_t *)(0x40009000 + ch * 32);
    b136:	lsls	r3, r3, #5
	DMA_CR = DMA_CR_EMLM | DMA_CR_EDBG; // minor loop mapping is available
#else
	DMA_CR = DMA_CR_GRP1PRI| DMA_CR_EMLM | DMA_CR_EDBG;
#endif
	DMA_CERQ = ch;
	DMA_CERR = ch;
    b138:	strb	r1, [r6, #0]
	DMA_CEEI = ch;
    b13a:	strb	r1, [r5, #0]
	DMA_CINT = ch;
    b13c:	strb	r1, [r4, #0]
	TCD = (TCD_t *)(0x40009000 + ch * 32);
    b13e:	str	r3, [r0, #0]
	uint32_t *p = (uint32_t *)TCD;
	*p++ = 0;
    b140:	str	r2, [r3, #0]
	*p++ = 0;
    b142:	str	r2, [r3, #4]
	*p++ = 0;
    b144:	str	r2, [r3, #8]
	*p++ = 0;
    b146:	str	r2, [r3, #12]
	*p++ = 0;
    b148:	str	r2, [r3, #16]
	*p++ = 0;
    b14a:	str	r2, [r3, #20]
	*p++ = 0;
    b14c:	str	r2, [r3, #24]
	*p++ = 0;
    b14e:	str	r2, [r3, #28]
    b150:	pop	{r4, r5, r6, r7, pc}
    b152:	nop
    b154:	.word	0x1fff8d44
    b158:	.word	0x40048040
    b15c:	.word	0x4004803c
    b160:	.word	0x40008000
    b164:	.word	0x4000801f
    b168:	.word	0x4000801a

0000b16c <DMAChannel::release()>:
}

void DMAChannel::release(void)
{
	if (channel >= DMA_MAX_CHANNELS) return;
    b16c:	ldrb	r3, [r0, #4]
    b16e:	cmp	r3, #15
    b170:	bhi.n	b198 <DMAChannel::release()+0x2c>
	DMA_CERQ = channel;
    b172:	ldr	r2, [pc, #40]	; (b19c <DMAChannel::release()+0x30>)
	*p++ = 0;
	*p++ = 0;
}

void DMAChannel::release(void)
{
    b174:	push	{r4}
	if (channel >= DMA_MAX_CHANNELS) return;
	DMA_CERQ = channel;
    b176:	strb	r3, [r2, #0]
	__disable_irq();
    b178:	cpsid	i
	dma_channel_allocated_mask &= ~(1 << channel);
    b17a:	ldr	r1, [pc, #36]	; (b1a0 <DMAChannel::release()+0x34>)
    b17c:	ldrb	r4, [r0, #4]
    b17e:	ldrh	r2, [r1, #0]
    b180:	movs	r3, #1
    b182:	lsls	r3, r4
    b184:	bic.w	r3, r2, r3
    b188:	strh	r3, [r1, #0]
	__enable_irq();
    b18a:	cpsie	i
	channel = DMA_MAX_CHANNELS;
    b18c:	movs	r2, #16
	TCD = (TCD_t *)0;
    b18e:	movs	r3, #0
}
    b190:	ldr.w	r4, [sp], #4
	if (channel >= DMA_MAX_CHANNELS) return;
	DMA_CERQ = channel;
	__disable_irq();
	dma_channel_allocated_mask &= ~(1 << channel);
	__enable_irq();
	channel = DMA_MAX_CHANNELS;
    b194:	strb	r2, [r0, #4]
	TCD = (TCD_t *)0;
    b196:	str	r3, [r0, #0]
}
    b198:	bx	lr
    b19a:	nop
    b19c:	.word	0x4000801a
    b1a0:	.word	0x1fff8d44

0000b1a4 <EventResponder::runFromInterrupt()>:
{
	EventResponder::runFromInterrupt();
}

void EventResponder::runFromInterrupt()
{
    b1a4:	push	{r4, r5, r6, lr}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    b1a6:	mrs	r2, PRIMASK
		__disable_irq();
    b1aa:	cpsid	i
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    b1ac:	ldr	r4, [pc, #48]	; (b1e0 <EventResponder::runFromInterrupt()+0x3c>)
    b1ae:	ldr	r0, [r4, #0]
		if (first) {
    b1b0:	cbz	r0, b1d4 <EventResponder::runFromInterrupt()+0x30>
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    b1b2:	ldr	r6, [pc, #48]	; (b1e4 <EventResponder::runFromInterrupt()+0x40>)
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
    b1b4:	movs	r5, #0
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
    b1b6:	ldr	r3, [r0, #20]
    b1b8:	str	r3, [r4, #0]
			if (firstInterrupt) {
    b1ba:	cbz	r3, b1da <EventResponder::runFromInterrupt()+0x36>
				firstInterrupt->_prev = nullptr;
    b1bc:	str	r5, [r3, #24]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    b1be:	cbnz	r2, b1c2 <EventResponder::runFromInterrupt()+0x1e>
    b1c0:	cpsie	i
			} else {
				lastInterrupt = nullptr;
			}
			enableInterrupts(irq);
			first->_triggered = false;
    b1c2:	strb	r5, [r0, #29]
			(*(first->_function))(*first);
    b1c4:	ldr	r3, [r0, #8]
    b1c6:	blx	r3
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    b1c8:	mrs	r2, PRIMASK
		__disable_irq();
    b1cc:	cpsid	i

void EventResponder::runFromInterrupt()
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    b1ce:	ldr	r0, [r4, #0]
		if (first) {
    b1d0:	cmp	r0, #0
    b1d2:	bne.n	b1b6 <EventResponder::runFromInterrupt()+0x12>
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    b1d4:	cbnz	r2, b1d8 <EventResponder::runFromInterrupt()+0x34>
    b1d6:	cpsie	i
    b1d8:	pop	{r4, r5, r6, pc}
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    b1da:	str	r3, [r6, #0]
    b1dc:	b.n	b1be <EventResponder::runFromInterrupt()+0x1a>
    b1de:	nop
    b1e0:	.word	0x1fff8d48
    b1e4:	.word	0x1fff8d4c

0000b1e8 <pendablesrvreq_isr>:
	enableInterrupts(irq);
}

void pendablesrvreq_isr(void)
{
	EventResponder::runFromInterrupt();
    b1e8:	b.w	b1a4 <EventResponder::runFromInterrupt()>

0000b1ec <systick_isr>:

extern "C" volatile uint32_t systick_millis_count;

void systick_isr(void)
{
	systick_millis_count++;
    b1ec:	ldr	r2, [pc, #8]	; (b1f8 <systick_isr+0xc>)
    b1ee:	ldr	r3, [r2, #0]
    b1f0:	adds	r3, #1
    b1f2:	str	r3, [r2, #0]
    b1f4:	bx	lr
    b1f6:	nop
    b1f8:	.word	0x1fff8c34

0000b1fc <usb_serial_class::clear()>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
    b1fc:	b.w	9c70 <usb_serial_flush_input>

0000b200 <usb_serial_class::peek()>:
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
    b200:	b.w	9c24 <usb_serial_peekchar>

0000b204 <usb_serial_class::read()>:
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
    b204:	b.w	9bdc <usb_serial_getchar>

0000b208 <usb_serial_class::available()>:
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    b208:	b.w	9c54 <usb_serial_available>

0000b20c <usb_serial_class::flush()>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
    b20c:	b.w	9e10 <usb_serial_flush_output>

0000b210 <usb_serial_class::availableForWrite()>:
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
	size_t write(unsigned long n) { return write((uint8_t)n); }
	size_t write(long n) { return write((uint8_t)n); }
	size_t write(unsigned int n) { return write((uint8_t)n); }
	size_t write(int n) { return write((uint8_t)n); }
	virtual int availableForWrite() { return usb_serial_write_buffer_free(); }
    b210:	b.w	9dc8 <usb_serial_write_buffer_free>

0000b214 <usb_serial_class::write(unsigned char const*, unsigned int)>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    b214:	mov	r0, r1
    b216:	mov	r1, r2
    b218:	b.w	9ca8 <usb_serial_write>

0000b21c <usb_serial_class::write(unsigned char)>:
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    b21c:	mov	r0, r1
    b21e:	b.w	9db0 <usb_serial_putchar>
    b222:	nop

0000b224 <Print::write(unsigned char const*, unsigned int)>:

#include <Arduino.h>


size_t Print::write(const uint8_t *buffer, size_t size)
{
    b224:	push	{r3, r4, r5, r6, r7, lr}
	if (buffer == nullptr) return 0;
    b226:	mov	r6, r1
    b228:	cbz	r1, b248 <Print::write(unsigned char const*, unsigned int)+0x24>
	size_t count = 0;
	while (size--) count += write(*buffer++);
    b22a:	cbz	r2, b24c <Print::write(unsigned char const*, unsigned int)+0x28>
    b22c:	mov	r7, r0
    b22e:	mov	r4, r2
    b230:	movs	r5, #0
    b232:	ldr	r3, [r7, #0]
    b234:	ldrb.w	r1, [r6], #1
    b238:	ldr	r3, [r3, #0]
    b23a:	mov	r0, r7
    b23c:	blx	r3
    b23e:	subs	r4, #1
    b240:	add	r5, r0
    b242:	bne.n	b232 <Print::write(unsigned char const*, unsigned int)+0xe>
    b244:	mov	r0, r5
    b246:	pop	{r3, r4, r5, r6, r7, pc}
#include <Arduino.h>


size_t Print::write(const uint8_t *buffer, size_t size)
{
	if (buffer == nullptr) return 0;
    b248:	mov	r0, r1
    b24a:	pop	{r3, r4, r5, r6, r7, pc}
    b24c:	mov	r0, r2
	size_t count = 0;
	while (size--) count += write(*buffer++);
	return count;
}
    b24e:	pop	{r3, r4, r5, r6, r7, pc}

0000b250 <Print::println()>:
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
    b250:	push	{lr}
	uint8_t buf[2]={'\r', '\n'};
    b252:	ldr	r2, [pc, #24]	; (b26c <Print::println()+0x1c>)
	return write(buf, 2);
    b254:	ldr	r3, [r0, #0]
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    b256:	ldrh	r2, [r2, #0]
	return write(buf, 2);
    b258:	ldr	r3, [r3, #4]
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
    b25a:	sub	sp, #12
	uint8_t buf[2]={'\r', '\n'};
	return write(buf, 2);
    b25c:	add	r1, sp, #4
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    b25e:	strh.w	r2, [sp, #4]
	return write(buf, 2);
    b262:	movs	r2, #2
    b264:	blx	r3
}
    b266:	add	sp, #12
    b268:	ldr.w	pc, [sp], #4
    b26c:	.word	0x000109a4

0000b270 <_write>:

extern "C" {
__attribute__((weak))
int _write(int file, char *ptr, int len)
{
    b270:	push	{r4, lr}
	((class Print *)file)->write((uint8_t *)ptr, len);
    b272:	ldr	r3, [r0, #0]
}

extern "C" {
__attribute__((weak))
int _write(int file, char *ptr, int len)
{
    b274:	mov	r4, r2
	((class Print *)file)->write((uint8_t *)ptr, len);
    b276:	ldr	r3, [r3, #4]
    b278:	blx	r3
	return len;
}
    b27a:	mov	r0, r4
    b27c:	pop	{r4, pc}
    b27e:	nop

0000b280 <Print::printf(char const*, ...)>:
}

int Print::printf(const char *format, ...)
{
    b280:	push	{r1, r2, r3}
    b282:	push	{lr}
    b284:	sub	sp, #8
    b286:	add	r2, sp, #12
    b288:	ldr.w	r1, [r2], #4
	va_list ap;
	va_start(ap, format);
    b28c:	str	r2, [sp, #4]
#ifdef __STRICT_ANSI__
	return 0;  // TODO: make this work with -std=c++0x
#else
	return vdprintf((int)this, format, ap);
    b28e:	bl	e7f0 <vdprintf>
#endif
}
    b292:	add	sp, #8
    b294:	ldr.w	lr, [sp], #4
    b298:	add	sp, #12
    b29a:	bx	lr

0000b29c <Print::printNumber(unsigned long, unsigned char, unsigned char)>:
}

#else

size_t Print::printNumber(unsigned long n, uint8_t base, uint8_t sign)
{
    b29c:	push	{r4, r5, r6, r7, lr}
    b29e:	mov	r7, r0
    b2a0:	sub	sp, #44	; 0x2c
	uint8_t digit, i;

	// TODO: make these checks as inline, since base is
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
    b2a2:	cmp	r2, #0
    b2a4:	beq.n	b30e <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x72>
		return write((uint8_t)n);
	} else if (base == 1) {
		base = 10;
    b2a6:	cmp	r2, #1
    b2a8:	it	eq
    b2aa:	moveq	r2, #10
	}


	if (n == 0) {
    b2ac:	cbz	r1, b304 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x68>
    b2ae:	movs	r4, #33	; 0x21
    b2b0:	b.n	b2b4 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x18>
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
			n /= base;
			if (n == 0) break;
			i--;
    b2b2:	uxtb	r4, r6
		buf[sizeof(buf) - 1] = '0';
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
    b2b4:	udiv	r5, r1, r2
    b2b8:	mls	r1, r2, r5, r1
    b2bc:	uxtb	r0, r1
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    b2be:	cmp	r1, #9
    b2c0:	add.w	r1, r0, #48	; 0x30
    b2c4:	it	ls
    b2c6:	uxtbls	r0, r1
    b2c8:	add	r1, sp, #40	; 0x28
    b2ca:	it	hi
    b2cc:	addhi	r0, #55	; 0x37
    b2ce:	add	r1, r4
    b2d0:	it	hi
    b2d2:	uxtbhi	r0, r0
    b2d4:	strb.w	r0, [r1, #-36]
			n /= base;
			if (n == 0) break;
			i--;
    b2d8:	subs	r6, r4, #1
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
			n /= base;
			if (n == 0) break;
    b2da:	mov	r1, r5
    b2dc:	cmp	r5, #0
    b2de:	bne.n	b2b2 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x16>
			i--;
		}
	}
	if (sign) {
    b2e0:	cbz	r3, b2f0 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x54>
		i--;
    b2e2:	subs	r4, #1
    b2e4:	uxtb	r4, r4
		buf[i] = '-';
    b2e6:	add	r3, sp, #40	; 0x28
    b2e8:	add	r3, r4
    b2ea:	movs	r2, #45	; 0x2d
    b2ec:	strb.w	r2, [r3, #-36]
	}
	return write(buf + i, sizeof(buf) - i);
    b2f0:	ldr	r3, [r7, #0]
    b2f2:	add	r2, sp, #4
    b2f4:	adds	r1, r2, r4
    b2f6:	ldr	r3, [r3, #4]
    b2f8:	mov	r0, r7
    b2fa:	rsb	r2, r4, #34	; 0x22
    b2fe:	blx	r3
}
    b300:	add	sp, #44	; 0x2c
    b302:	pop	{r4, r5, r6, r7, pc}
		base = 10;
	}


	if (n == 0) {
		buf[sizeof(buf) - 1] = '0';
    b304:	movs	r2, #48	; 0x30
    b306:	strb.w	r2, [sp, #37]	; 0x25
		i = sizeof(buf) - 1;
    b30a:	movs	r4, #33	; 0x21
    b30c:	b.n	b2e0 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x44>

	// TODO: make these checks as inline, since base is
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
		return write((uint8_t)n);
    b30e:	ldr	r3, [r0, #0]
    b310:	uxtb	r1, r1
    b312:	ldr	r3, [r3, #0]
    b314:	blx	r3
	if (sign) {
		i--;
		buf[i] = '-';
	}
	return write(buf + i, sizeof(buf) - i);
}
    b316:	add	sp, #44	; 0x2c
    b318:	pop	{r4, r5, r6, r7, pc}
    b31a:	nop

0000b31c <Print::print(long)>:

size_t Print::print(long n)
{
	uint8_t sign=0;

	if (n < 0) {
    b31c:	cmp	r1, #0
		sign = '-';
		n = -n;
    b31e:	itte	lt
    b320:	neglt	r1, r1
size_t Print::print(long n)
{
	uint8_t sign=0;

	if (n < 0) {
		sign = '-';
    b322:	movlt	r3, #45	; 0x2d
}


size_t Print::print(long n)
{
	uint8_t sign=0;
    b324:	movge	r3, #0

	if (n < 0) {
		sign = '-';
		n = -n;
	}
	return printNumber(n, 10, sign);
    b326:	movs	r2, #10
    b328:	b.w	b29c <Print::printNumber(unsigned long, unsigned char, unsigned char)>

0000b32c <main>:
 */

#include <Arduino.h>

extern "C" int main(void)
{
    b32c:	push	{r3, lr}
	}


#else
	// Arduino's main() function just calls setup() and loop()....
	setup();
    b32e:	bl	1358 <setup>
	while (1) {
		loop();
    b332:	bl	1120 <loop>
		yield();
    b336:	bl	afb4 <yield>
    b33a:	b.n	b332 <main+0x6>

0000b33c <serialEvent()>:

#include <Arduino.h>
void serialEvent() __attribute__((weak));
void serialEvent() {
    b33c:	bx	lr
    b33e:	nop

0000b340 <operator new(unsigned int)>:
    b340:	b.w	c19c <malloc>

0000b344 <operator delete(void*, unsigned int)>:
    b344:	b.w	c1ac <free>

0000b348 <analog_init>:
#else
#error "F_BUS must be 128, 120, 108, 96, 90, 80, 72, 64, 60, 56, 54, 48, 40, 36, 24, 4 or 2 MHz"
#endif

void analog_init(void)
{
    b348:	push	{r4, r5}
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    b34a:	ldr	r0, [pc, #164]	; (b3f0 <analog_init+0xa8>)
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    b34c:	ldr	r2, [pc, #164]	; (b3f4 <analog_init+0xac>)
	#endif

	if (analog_config_bits == 8) {
    b34e:	ldr	r3, [pc, #168]	; (b3f8 <analog_init+0xb0>)
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    b350:	ldr	r5, [pc, #168]	; (b3fc <analog_init+0xb4>)
void analog_init(void)
{
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    b352:	movs	r4, #96	; 0x60
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    b354:	movs	r1, #225	; 0xe1
void analog_init(void)
{
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    b356:	strb	r4, [r0, #0]
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    b358:	strb	r1, [r2, #0]
	#endif

	if (analog_config_bits == 8) {
    b35a:	ldrb	r3, [r3, #0]
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    b35c:	ldr	r4, [pc, #160]	; (b400 <analog_init+0xb8>)
	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
	VREF_SC = 0xE1;		// enable 1.2 volt ref
	#endif

	if (analog_config_bits == 8) {
    b35e:	cmp	r3, #8
    b360:	beq.n	b3c4 <analog_init+0x7c>
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
    b362:	cmp	r3, #10
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    b364:	ldr	r0, [pc, #156]	; (b404 <analog_init+0xbc>)
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    b366:	ldr	r1, [pc, #160]	; (b408 <analog_init+0xc0>)
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
    b368:	beq.n	b3da <analog_init+0x92>
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 12) {
    b36a:	cmp	r3, #12
		ADC0_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
    b36c:	ite	eq
    b36e:	moveq	r2, #53	; 0x35
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
		#endif
	} else {
		ADC0_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    b370:	movne	r2, #61	; 0x3d
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    b372:	movs	r3, #18
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
		#endif
	} else {
		ADC0_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    b374:	str	r2, [r5, #0]
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    b376:	str	r3, [r4, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    b378:	str	r2, [r0, #0]
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    b37a:	str	r3, [r1, #0]
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    b37c:	ldr	r3, [pc, #140]	; (b40c <analog_init+0xc4>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    b37e:	ldr	r1, [pc, #144]	; (b410 <analog_init+0xc8>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    b380:	ldrb	r3, [r3, #0]
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    b382:	ldr	r2, [pc, #144]	; (b414 <analog_init+0xcc>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    b384:	cbz	r3, b3b6 <analog_init+0x6e>
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    b386:	movs	r3, #1
    b388:	str	r3, [r1, #0]
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    b38a:	str	r3, [r2, #0]
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
    b38c:	ldr	r3, [pc, #136]	; (b418 <analog_init+0xd0>)
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
    b38e:	ldr	r1, [pc, #140]	; (b41c <analog_init+0xd4>)
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
    b390:	ldrb	r3, [r3, #0]
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
    b392:	ldr	r2, [pc, #140]	; (b420 <analog_init+0xd8>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
	if (num <= 1) {
    b394:	cmp	r3, #1
    b396:	bls.n	b3e6 <analog_init+0x9e>
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
		#endif
	} else if (num <= 4) {
    b398:	cmp	r3, #4
    b39a:	bls.n	b3bc <analog_init+0x74>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#endif
	} else if (num <= 8) {
    b39c:	cmp	r3, #8
    b39e:	bls.n	b3de <analog_init+0x96>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
		#endif
	} else if (num <= 16) {
    b3a0:	cmp	r3, #16
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(2);
    b3a2:	ite	ls
    b3a4:	movls	r3, #134	; 0x86
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(2);
		#endif
	} else {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(3);
    b3a6:	movhi	r3, #135	; 0x87
    b3a8:	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(3);
    b3aa:	str	r3, [r2, #0]
		#endif
	}
	calibrating = 1;
    b3ac:	ldr	r3, [pc, #116]	; (b424 <analog_init+0xdc>)
    b3ae:	movs	r2, #1
    b3b0:	strb	r2, [r3, #0]
}
    b3b2:	pop	{r4, r5}
    b3b4:	bx	lr
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
    b3b6:	str	r3, [r1, #0]
		ADC1_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
    b3b8:	str	r3, [r2, #0]
    b3ba:	b.n	b38c <analog_init+0x44>
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
		#endif
	} else if (num <= 4) {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
    b3bc:	movs	r3, #132	; 0x84
    b3be:	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
    b3c0:	str	r3, [r2, #0]
    b3c2:	b.n	b3ac <analog_init+0x64>

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    b3c4:	add.w	r0, r0, #290816	; 0x47000
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    b3c8:	ldr	r1, [pc, #60]	; (b408 <analog_init+0xc0>)

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    b3ca:	adds	r0, #8
	VREF_TRM = 0x60;
	VREF_SC = 0xE1;		// enable 1.2 volt ref
	#endif

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    b3cc:	movs	r2, #1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    b3ce:	movs	r3, #19
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    b3d0:	str	r2, [r5, #0]
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    b3d2:	str	r3, [r4, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    b3d4:	str	r2, [r0, #0]
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    b3d6:	str	r3, [r1, #0]
    b3d8:	b.n	b37c <analog_init+0x34>
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    b3da:	movs	r2, #57	; 0x39
    b3dc:	b.n	b3ce <analog_init+0x86>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#endif
	} else if (num <= 8) {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
    b3de:	movs	r3, #133	; 0x85
    b3e0:	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
    b3e2:	str	r3, [r2, #0]
    b3e4:	b.n	b3ac <analog_init+0x64>
	}
	#endif

	num = analog_num_average;
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
    b3e6:	movs	r3, #128	; 0x80
    b3e8:	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
    b3ea:	str	r3, [r2, #0]
    b3ec:	b.n	b3ac <analog_init+0x64>
    b3ee:	nop
    b3f0:	.word	0x40074000
    b3f4:	.word	0x40074001
    b3f8:	.word	0x1fff09b5
    b3fc:	.word	0x4003b008
    b400:	.word	0x4003b00c
    b404:	.word	0x400bb008
    b408:	.word	0x400bb00c
    b40c:	.word	0x1fff8d76
    b410:	.word	0x4003b020
    b414:	.word	0x400bb020
    b418:	.word	0x1fff09b6
    b41c:	.word	0x4003b024
    b420:	.word	0x400bb024
    b424:	.word	0x1fff8d75

0000b428 <usb_init_serialnumber>:
void usb_init_serialnumber(void)
{
	char buf[11];
	uint32_t i, num;

	__disable_irq();
    b428:	cpsid	i
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
    b42a:	ldr	r2, [pc, #96]	; (b48c <usb_init_serialnumber+0x64>)
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    b42c:	ldr	r3, [pc, #96]	; (b490 <usb_init_serialnumber+0x68>)
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
    b42e:	ldr	r1, [pc, #100]	; (b494 <usb_init_serialnumber+0x6c>)
    b430:	str	r1, [r2, #0]
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    b432:	movs	r2, #112	; 0x70
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
    b434:	movs	r1, #128	; 0x80
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    b436:	strb	r2, [r3, #0]
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
    b438:	mov	r2, r3
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
    b43a:	strb	r1, [r3, #0]
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
    b43c:	ldrb	r3, [r2, #0]
    b43e:	lsls	r3, r3, #24
    b440:	bpl.n	b43c <usb_init_serialnumber+0x14>
	{'M','T','P'}
};
#endif

void usb_init_serialnumber(void)
{
    b442:	push	{r4, lr}
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOBB;
    b444:	ldr	r3, [pc, #80]	; (b498 <usb_init_serialnumber+0x70>)
	{'M','T','P'}
};
#endif

void usb_init_serialnumber(void)
{
    b446:	sub	sp, #16
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOBB;
    b448:	ldr	r0, [r3, #0]
	kinetis_hsrun_enable();
#endif
	__enable_irq();
    b44a:	cpsie	i
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    b44c:	ldr	r3, [pc, #76]	; (b49c <usb_init_serialnumber+0x74>)
    b44e:	ldr	r4, [pc, #80]	; (b4a0 <usb_init_serialnumber+0x78>)
    b450:	cmp	r0, r3
    b452:	it	ls
    b454:	addls.w	r0, r0, r0, lsl #2
	ultoa(num, buf, 10);
    b458:	add	r1, sp, #4
	num = *(uint32_t *)&FTFL_FCCOBB;
	kinetis_hsrun_enable();
#endif
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    b45a:	it	ls
    b45c:	lslls	r0, r0, #1
	ultoa(num, buf, 10);
    b45e:	movs	r2, #10
    b460:	bl	b4a4 <ultoa>
    b464:	add	r1, sp, #4
    b466:	mov	r0, r4
	for (i=0; i<10; i++) {
    b468:	movs	r3, #0
		char c = buf[i];
    b46a:	ldrb.w	r2, [r1], #1
    b46e:	adds	r3, #1
		if (!c) break;
    b470:	cbz	r2, b482 <usb_init_serialnumber+0x5a>
#endif
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    b472:	cmp	r3, #10
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
    b474:	strh.w	r2, [r0, #2]!
#endif
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    b478:	bne.n	b46a <usb_init_serialnumber+0x42>
    b47a:	movs	r3, #22
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    b47c:	strb	r3, [r4, #0]
}
    b47e:	add	sp, #16
    b480:	pop	{r4, pc}
    b482:	lsls	r3, r3, #1
    b484:	uxtb	r3, r3
	for (i=0; i<10; i++) {
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    b486:	strb	r3, [r4, #0]
}
    b488:	add	sp, #16
    b48a:	pop	{r4, pc}
    b48c:	.word	0x40020004
    b490:	.word	0x40020000
    b494:	.word	0x41070000
    b498:	.word	0x4002000c
    b49c:	.word	0x0098967f
    b4a0:	.word	0x1fff0a8c

0000b4a4 <ultoa>:
#include <stdlib.h>
#include <math.h>


char * ultoa(unsigned long val, char *buf, int radix)
{
    b4a4:	push	{r4, r5, r6, r7}
    b4a6:	subs	r5, r1, #1
    b4a8:	mov	r6, r5
	unsigned digit;
	int i=0, j;
    b4aa:	movs	r4, #0
    b4ac:	b.n	b4b0 <ultoa+0xc>
	while (1) {
		digit = val % radix;
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
		val /= radix;
		if (val == 0) break;
		i++;
    b4ae:	adds	r4, #1
	unsigned digit;
	int i=0, j;
	char t;

	while (1) {
		digit = val % radix;
    b4b0:	udiv	r3, r0, r2
    b4b4:	mls	r0, r2, r3, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    b4b8:	cmp	r0, #9
    b4ba:	add.w	r7, r0, #48	; 0x30
    b4be:	itet	hi
    b4c0:	addhi	r0, #55	; 0x37
    b4c2:	uxtbls	r0, r7
    b4c4:	uxtbhi	r0, r0
    b4c6:	strb.w	r0, [r6, #1]!
		val /= radix;
		if (val == 0) break;
    b4ca:	mov	r0, r3
    b4cc:	cmp	r3, #0
    b4ce:	bne.n	b4ae <ultoa+0xa>
		i++;
	}
	buf[i + 1] = 0;
    b4d0:	adds	r2, r1, r4
    b4d2:	strb	r3, [r2, #1]
	for (j=0; j < i; j++, i--) {
    b4d4:	cbz	r4, b4ea <ultoa+0x46>
		t = buf[j];
		buf[j] = buf[i];
    b4d6:	ldrb	r0, [r2, #0]
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
		t = buf[j];
    b4d8:	ldrb.w	r6, [r5, #1]!
		buf[j] = buf[i];
    b4dc:	strb	r0, [r5, #0]
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    b4de:	adds	r3, #1
    b4e0:	subs	r0, r4, r3
    b4e2:	cmp	r3, r0
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
    b4e4:	strb.w	r6, [r2], #-1
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    b4e8:	blt.n	b4d6 <ultoa+0x32>
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
	}
	return buf;
}
    b4ea:	mov	r0, r1
    b4ec:	pop	{r4, r5, r6, r7}
    b4ee:	bx	lr

0000b4f0 <__aeabi_atexit>:
    b4f0:	mov	r3, r1
    b4f2:	mov	r1, r0
    b4f4:	mov	r0, r3
    b4f6:	b.w	c134 <__cxa_atexit>
    b4fa:	nop

0000b4fc <__aeabi_drsub>:
    b4fc:	eor.w	r1, r1, #2147483648	; 0x80000000
    b500:	b.n	b508 <__adddf3>
    b502:	nop

0000b504 <__aeabi_dsub>:
    b504:	eor.w	r3, r3, #2147483648	; 0x80000000

0000b508 <__adddf3>:
    b508:	push	{r4, r5, lr}
    b50a:	mov.w	r4, r1, lsl #1
    b50e:	mov.w	r5, r3, lsl #1
    b512:	teq	r4, r5
    b516:	it	eq
    b518:	teqeq	r0, r2
    b51c:	itttt	ne
    b51e:	orrsne.w	ip, r4, r0
    b522:	orrsne.w	ip, r5, r2
    b526:	mvnsne.w	ip, r4, asr #21
    b52a:	mvnsne.w	ip, r5, asr #21
    b52e:	beq.w	b6f6 <__adddf3+0x1ee>
    b532:	mov.w	r4, r4, lsr #21
    b536:	rsbs	r5, r4, r5, lsr #21
    b53a:	it	lt
    b53c:	neglt	r5, r5
    b53e:	ble.n	b55a <__adddf3+0x52>
    b540:	add	r4, r5
    b542:	eor.w	r2, r0, r2
    b546:	eor.w	r3, r1, r3
    b54a:	eor.w	r0, r2, r0
    b54e:	eor.w	r1, r3, r1
    b552:	eor.w	r2, r0, r2
    b556:	eor.w	r3, r1, r3
    b55a:	cmp	r5, #54	; 0x36
    b55c:	it	hi
    b55e:	pophi	{r4, r5, pc}
    b560:	tst.w	r1, #2147483648	; 0x80000000
    b564:	mov.w	r1, r1, lsl #12
    b568:	mov.w	ip, #1048576	; 0x100000
    b56c:	orr.w	r1, ip, r1, lsr #12
    b570:	beq.n	b578 <__adddf3+0x70>
    b572:	negs	r0, r0
    b574:	sbc.w	r1, r1, r1, lsl #1
    b578:	tst.w	r3, #2147483648	; 0x80000000
    b57c:	mov.w	r3, r3, lsl #12
    b580:	orr.w	r3, ip, r3, lsr #12
    b584:	beq.n	b58c <__adddf3+0x84>
    b586:	negs	r2, r2
    b588:	sbc.w	r3, r3, r3, lsl #1
    b58c:	teq	r4, r5
    b590:	beq.w	b6e2 <__adddf3+0x1da>
    b594:	sub.w	r4, r4, #1
    b598:	rsbs	lr, r5, #32
    b59c:	blt.n	b5ba <__adddf3+0xb2>
    b59e:	lsl.w	ip, r2, lr
    b5a2:	lsr.w	r2, r2, r5
    b5a6:	adds	r0, r0, r2
    b5a8:	adc.w	r1, r1, #0
    b5ac:	lsl.w	r2, r3, lr
    b5b0:	adds	r0, r0, r2
    b5b2:	asr.w	r3, r3, r5
    b5b6:	adcs	r1, r3
    b5b8:	b.n	b5d8 <__adddf3+0xd0>
    b5ba:	sub.w	r5, r5, #32
    b5be:	add.w	lr, lr, #32
    b5c2:	cmp	r2, #1
    b5c4:	lsl.w	ip, r3, lr
    b5c8:	it	cs
    b5ca:	orrcs.w	ip, ip, #2
    b5ce:	asr.w	r3, r3, r5
    b5d2:	adds	r0, r0, r3
    b5d4:	adcs.w	r1, r1, r3, asr #31
    b5d8:	and.w	r5, r1, #2147483648	; 0x80000000
    b5dc:	bpl.n	b5ee <__adddf3+0xe6>
    b5de:	mov.w	lr, #0
    b5e2:	rsbs	ip, ip, #0
    b5e6:	sbcs.w	r0, lr, r0
    b5ea:	sbc.w	r1, lr, r1
    b5ee:	cmp.w	r1, #1048576	; 0x100000
    b5f2:	bcc.n	b62c <__adddf3+0x124>
    b5f4:	cmp.w	r1, #2097152	; 0x200000
    b5f8:	bcc.n	b614 <__adddf3+0x10c>
    b5fa:	lsrs	r1, r1, #1
    b5fc:	movs.w	r0, r0, rrx
    b600:	mov.w	ip, ip, rrx
    b604:	add.w	r4, r4, #1
    b608:	mov.w	r2, r4, lsl #21
    b60c:	cmn.w	r2, #4194304	; 0x400000
    b610:	bcs.w	b748 <__adddf3+0x240>
    b614:	cmp.w	ip, #2147483648	; 0x80000000
    b618:	it	eq
    b61a:	movseq.w	ip, r0, lsr #1
    b61e:	adcs.w	r0, r0, #0
    b622:	adc.w	r1, r1, r4, lsl #20
    b626:	orr.w	r1, r1, r5
    b62a:	pop	{r4, r5, pc}
    b62c:	movs.w	ip, ip, lsl #1
    b630:	adcs	r0, r0
    b632:	adc.w	r1, r1, r1
    b636:	tst.w	r1, #1048576	; 0x100000
    b63a:	sub.w	r4, r4, #1
    b63e:	bne.n	b614 <__adddf3+0x10c>
    b640:	teq	r1, #0
    b644:	itt	eq
    b646:	moveq	r1, r0
    b648:	moveq	r0, #0
    b64a:	clz	r3, r1
    b64e:	it	eq
    b650:	addeq	r3, #32
    b652:	sub.w	r3, r3, #11
    b656:	subs.w	r2, r3, #32
    b65a:	bge.n	b676 <__adddf3+0x16e>
    b65c:	adds	r2, #12
    b65e:	ble.n	b672 <__adddf3+0x16a>
    b660:	add.w	ip, r2, #20
    b664:	rsb	r2, r2, #12
    b668:	lsl.w	r0, r1, ip
    b66c:	lsr.w	r1, r1, r2
    b670:	b.n	b68c <__adddf3+0x184>
    b672:	add.w	r2, r2, #20
    b676:	it	le
    b678:	rsble	ip, r2, #32
    b67c:	lsl.w	r1, r1, r2
    b680:	lsr.w	ip, r0, ip
    b684:	itt	le
    b686:	orrle.w	r1, r1, ip
    b68a:	lslle	r0, r2
    b68c:	subs	r4, r4, r3
    b68e:	ittt	ge
    b690:	addge.w	r1, r1, r4, lsl #20
    b694:	orrge	r1, r5
    b696:	popge	{r4, r5, pc}
    b698:	mvn.w	r4, r4
    b69c:	subs	r4, #31
    b69e:	bge.n	b6da <__adddf3+0x1d2>
    b6a0:	adds	r4, #12
    b6a2:	bgt.n	b6c2 <__adddf3+0x1ba>
    b6a4:	add.w	r4, r4, #20
    b6a8:	rsb	r2, r4, #32
    b6ac:	lsr.w	r0, r0, r4
    b6b0:	lsl.w	r3, r1, r2
    b6b4:	orr.w	r0, r0, r3
    b6b8:	lsr.w	r3, r1, r4
    b6bc:	orr.w	r1, r5, r3
    b6c0:	pop	{r4, r5, pc}
    b6c2:	rsb	r4, r4, #12
    b6c6:	rsb	r2, r4, #32
    b6ca:	lsr.w	r0, r0, r2
    b6ce:	lsl.w	r3, r1, r4
    b6d2:	orr.w	r0, r0, r3
    b6d6:	mov	r1, r5
    b6d8:	pop	{r4, r5, pc}
    b6da:	lsr.w	r0, r1, r4
    b6de:	mov	r1, r5
    b6e0:	pop	{r4, r5, pc}
    b6e2:	teq	r4, #0
    b6e6:	eor.w	r3, r3, #1048576	; 0x100000
    b6ea:	itte	eq
    b6ec:	eoreq.w	r1, r1, #1048576	; 0x100000
    b6f0:	addeq	r4, #1
    b6f2:	subne	r5, #1
    b6f4:	b.n	b594 <__adddf3+0x8c>
    b6f6:	mvns.w	ip, r4, asr #21
    b6fa:	it	ne
    b6fc:	mvnsne.w	ip, r5, asr #21
    b700:	beq.n	b756 <__adddf3+0x24e>
    b702:	teq	r4, r5
    b706:	it	eq
    b708:	teqeq	r0, r2
    b70c:	beq.n	b71a <__adddf3+0x212>
    b70e:	orrs.w	ip, r4, r0
    b712:	itt	eq
    b714:	moveq	r1, r3
    b716:	moveq	r0, r2
    b718:	pop	{r4, r5, pc}
    b71a:	teq	r1, r3
    b71e:	ittt	ne
    b720:	movne	r1, #0
    b722:	movne	r0, #0
    b724:	popne	{r4, r5, pc}
    b726:	movs.w	ip, r4, lsr #21
    b72a:	bne.n	b738 <__adddf3+0x230>
    b72c:	lsls	r0, r0, #1
    b72e:	adcs	r1, r1
    b730:	it	cs
    b732:	orrcs.w	r1, r1, #2147483648	; 0x80000000
    b736:	pop	{r4, r5, pc}
    b738:	adds.w	r4, r4, #4194304	; 0x400000
    b73c:	itt	cc
    b73e:	addcc.w	r1, r1, #1048576	; 0x100000
    b742:	popcc	{r4, r5, pc}
    b744:	and.w	r5, r1, #2147483648	; 0x80000000
    b748:	orr.w	r1, r5, #2130706432	; 0x7f000000
    b74c:	orr.w	r1, r1, #15728640	; 0xf00000
    b750:	mov.w	r0, #0
    b754:	pop	{r4, r5, pc}
    b756:	mvns.w	ip, r4, asr #21
    b75a:	itte	ne
    b75c:	movne	r1, r3
    b75e:	movne	r0, r2
    b760:	mvnseq.w	ip, r5, asr #21
    b764:	itt	ne
    b766:	movne	r3, r1
    b768:	movne	r2, r0
    b76a:	orrs.w	r4, r0, r1, lsl #12
    b76e:	itte	eq
    b770:	orrseq.w	r5, r2, r3, lsl #12
    b774:	teqeq	r1, r3
    b778:	orrne.w	r1, r1, #524288	; 0x80000
    b77c:	pop	{r4, r5, pc}
    b77e:	nop

0000b780 <__aeabi_ui2d>:
    b780:	teq	r0, #0
    b784:	itt	eq
    b786:	moveq	r1, #0
    b788:	bxeq	lr
    b78a:	push	{r4, r5, lr}
    b78c:	mov.w	r4, #1024	; 0x400
    b790:	add.w	r4, r4, #50	; 0x32
    b794:	mov.w	r5, #0
    b798:	mov.w	r1, #0
    b79c:	b.n	b640 <__adddf3+0x138>
    b79e:	nop

0000b7a0 <__aeabi_i2d>:
    b7a0:	teq	r0, #0
    b7a4:	itt	eq
    b7a6:	moveq	r1, #0
    b7a8:	bxeq	lr
    b7aa:	push	{r4, r5, lr}
    b7ac:	mov.w	r4, #1024	; 0x400
    b7b0:	add.w	r4, r4, #50	; 0x32
    b7b4:	ands.w	r5, r0, #2147483648	; 0x80000000
    b7b8:	it	mi
    b7ba:	negmi	r0, r0
    b7bc:	mov.w	r1, #0
    b7c0:	b.n	b640 <__adddf3+0x138>
    b7c2:	nop

0000b7c4 <__aeabi_f2d>:
    b7c4:	lsls	r2, r0, #1
    b7c6:	mov.w	r1, r2, asr #3
    b7ca:	mov.w	r1, r1, rrx
    b7ce:	mov.w	r0, r2, lsl #28
    b7d2:	itttt	ne
    b7d4:	andsne.w	r3, r2, #4278190080	; 0xff000000
    b7d8:	teqne	r3, #4278190080	; 0xff000000
    b7dc:	eorne.w	r1, r1, #939524096	; 0x38000000
    b7e0:	bxne	lr
    b7e2:	teq	r2, #0
    b7e6:	ite	ne
    b7e8:	teqne	r3, #4278190080	; 0xff000000
    b7ec:	bxeq	lr
    b7ee:	push	{r4, r5, lr}
    b7f0:	mov.w	r4, #896	; 0x380
    b7f4:	and.w	r5, r1, #2147483648	; 0x80000000
    b7f8:	bic.w	r1, r1, #2147483648	; 0x80000000
    b7fc:	b.n	b640 <__adddf3+0x138>
    b7fe:	nop

0000b800 <__aeabi_ul2d>:
    b800:	orrs.w	r2, r0, r1
    b804:	it	eq
    b806:	bxeq	lr
    b808:	push	{r4, r5, lr}
    b80a:	mov.w	r5, #0
    b80e:	b.n	b826 <__aeabi_l2d+0x16>

0000b810 <__aeabi_l2d>:
    b810:	orrs.w	r2, r0, r1
    b814:	it	eq
    b816:	bxeq	lr
    b818:	push	{r4, r5, lr}
    b81a:	ands.w	r5, r1, #2147483648	; 0x80000000
    b81e:	bpl.n	b826 <__aeabi_l2d+0x16>
    b820:	negs	r0, r0
    b822:	sbc.w	r1, r1, r1, lsl #1
    b826:	mov.w	r4, #1024	; 0x400
    b82a:	add.w	r4, r4, #50	; 0x32
    b82e:	movs.w	ip, r1, lsr #22
    b832:	beq.w	b5ee <__adddf3+0xe6>
    b836:	mov.w	r2, #3
    b83a:	movs.w	ip, ip, lsr #3
    b83e:	it	ne
    b840:	addne	r2, #3
    b842:	movs.w	ip, ip, lsr #3
    b846:	it	ne
    b848:	addne	r2, #3
    b84a:	add.w	r2, r2, ip, lsr #3
    b84e:	rsb	r3, r2, #32
    b852:	lsl.w	ip, r0, r3
    b856:	lsr.w	r0, r0, r2
    b85a:	lsl.w	lr, r1, r3
    b85e:	orr.w	r0, r0, lr
    b862:	lsr.w	r1, r1, r2
    b866:	add	r4, r2
    b868:	b.n	b5ee <__adddf3+0xe6>
    b86a:	nop

0000b86c <__aeabi_dmul>:
    b86c:	push	{r4, r5, r6, lr}
    b86e:	mov.w	ip, #255	; 0xff
    b872:	orr.w	ip, ip, #1792	; 0x700
    b876:	ands.w	r4, ip, r1, lsr #20
    b87a:	ittte	ne
    b87c:	andsne.w	r5, ip, r3, lsr #20
    b880:	teqne	r4, ip
    b884:	teqne	r5, ip
    b888:	bleq	ba48 <__aeabi_dmul+0x1dc>
    b88c:	add	r4, r5
    b88e:	eor.w	r6, r1, r3
    b892:	bic.w	r1, r1, ip, lsl #21
    b896:	bic.w	r3, r3, ip, lsl #21
    b89a:	orrs.w	r5, r0, r1, lsl #12
    b89e:	it	ne
    b8a0:	orrsne.w	r5, r2, r3, lsl #12
    b8a4:	orr.w	r1, r1, #1048576	; 0x100000
    b8a8:	orr.w	r3, r3, #1048576	; 0x100000
    b8ac:	beq.n	b920 <__aeabi_dmul+0xb4>
    b8ae:	umull	ip, lr, r0, r2
    b8b2:	mov.w	r5, #0
    b8b6:	umlal	lr, r5, r1, r2
    b8ba:	and.w	r2, r6, #2147483648	; 0x80000000
    b8be:	umlal	lr, r5, r0, r3
    b8c2:	mov.w	r6, #0
    b8c6:	umlal	r5, r6, r1, r3
    b8ca:	teq	ip, #0
    b8ce:	it	ne
    b8d0:	orrne.w	lr, lr, #1
    b8d4:	sub.w	r4, r4, #255	; 0xff
    b8d8:	cmp.w	r6, #512	; 0x200
    b8dc:	sbc.w	r4, r4, #768	; 0x300
    b8e0:	bcs.n	b8ec <__aeabi_dmul+0x80>
    b8e2:	movs.w	lr, lr, lsl #1
    b8e6:	adcs	r5, r5
    b8e8:	adc.w	r6, r6, r6
    b8ec:	orr.w	r1, r2, r6, lsl #11
    b8f0:	orr.w	r1, r1, r5, lsr #21
    b8f4:	mov.w	r0, r5, lsl #11
    b8f8:	orr.w	r0, r0, lr, lsr #21
    b8fc:	mov.w	lr, lr, lsl #11
    b900:	subs.w	ip, r4, #253	; 0xfd
    b904:	it	hi
    b906:	cmphi.w	ip, #1792	; 0x700
    b90a:	bhi.n	b94a <__aeabi_dmul+0xde>
    b90c:	cmp.w	lr, #2147483648	; 0x80000000
    b910:	it	eq
    b912:	movseq.w	lr, r0, lsr #1
    b916:	adcs.w	r0, r0, #0
    b91a:	adc.w	r1, r1, r4, lsl #20
    b91e:	pop	{r4, r5, r6, pc}
    b920:	and.w	r6, r6, #2147483648	; 0x80000000
    b924:	orr.w	r1, r6, r1
    b928:	orr.w	r0, r0, r2
    b92c:	eor.w	r1, r1, r3
    b930:	subs.w	r4, r4, ip, lsr #1
    b934:	ittt	gt
    b936:	rsbsgt	r5, r4, ip
    b93a:	orrgt.w	r1, r1, r4, lsl #20
    b93e:	popgt	{r4, r5, r6, pc}
    b940:	orr.w	r1, r1, #1048576	; 0x100000
    b944:	mov.w	lr, #0
    b948:	subs	r4, #1
    b94a:	bgt.w	baa4 <__aeabi_dmul+0x238>
    b94e:	cmn.w	r4, #54	; 0x36
    b952:	ittt	le
    b954:	movle	r0, #0
    b956:	andle.w	r1, r1, #2147483648	; 0x80000000
    b95a:	pople	{r4, r5, r6, pc}
    b95c:	rsb	r4, r4, #0
    b960:	subs	r4, #32
    b962:	bge.n	b9d0 <__aeabi_dmul+0x164>
    b964:	adds	r4, #12
    b966:	bgt.n	b9a0 <__aeabi_dmul+0x134>
    b968:	add.w	r4, r4, #20
    b96c:	rsb	r5, r4, #32
    b970:	lsl.w	r3, r0, r5
    b974:	lsr.w	r0, r0, r4
    b978:	lsl.w	r2, r1, r5
    b97c:	orr.w	r0, r0, r2
    b980:	and.w	r2, r1, #2147483648	; 0x80000000
    b984:	bic.w	r1, r1, #2147483648	; 0x80000000
    b988:	adds.w	r0, r0, r3, lsr #31
    b98c:	lsr.w	r6, r1, r4
    b990:	adc.w	r1, r2, r6
    b994:	orrs.w	lr, lr, r3, lsl #1
    b998:	it	eq
    b99a:	biceq.w	r0, r0, r3, lsr #31
    b99e:	pop	{r4, r5, r6, pc}
    b9a0:	rsb	r4, r4, #12
    b9a4:	rsb	r5, r4, #32
    b9a8:	lsl.w	r3, r0, r4
    b9ac:	lsr.w	r0, r0, r5
    b9b0:	lsl.w	r2, r1, r4
    b9b4:	orr.w	r0, r0, r2
    b9b8:	and.w	r1, r1, #2147483648	; 0x80000000
    b9bc:	adds.w	r0, r0, r3, lsr #31
    b9c0:	adc.w	r1, r1, #0
    b9c4:	orrs.w	lr, lr, r3, lsl #1
    b9c8:	it	eq
    b9ca:	biceq.w	r0, r0, r3, lsr #31
    b9ce:	pop	{r4, r5, r6, pc}
    b9d0:	rsb	r5, r4, #32
    b9d4:	lsl.w	r2, r0, r5
    b9d8:	orr.w	lr, lr, r2
    b9dc:	lsr.w	r3, r0, r4
    b9e0:	lsl.w	r2, r1, r5
    b9e4:	orr.w	r3, r3, r2
    b9e8:	lsr.w	r0, r1, r4
    b9ec:	and.w	r1, r1, #2147483648	; 0x80000000
    b9f0:	lsr.w	r2, r1, r4
    b9f4:	bic.w	r0, r0, r2
    b9f8:	add.w	r0, r0, r3, lsr #31
    b9fc:	orrs.w	lr, lr, r3, lsl #1
    ba00:	it	eq
    ba02:	biceq.w	r0, r0, r3, lsr #31
    ba06:	pop	{r4, r5, r6, pc}
    ba08:	teq	r4, #0
    ba0c:	bne.n	ba2e <__aeabi_dmul+0x1c2>
    ba0e:	and.w	r6, r1, #2147483648	; 0x80000000
    ba12:	lsls	r0, r0, #1
    ba14:	adc.w	r1, r1, r1
    ba18:	tst.w	r1, #1048576	; 0x100000
    ba1c:	it	eq
    ba1e:	subeq	r4, #1
    ba20:	beq.n	ba12 <__aeabi_dmul+0x1a6>
    ba22:	orr.w	r1, r1, r6
    ba26:	teq	r5, #0
    ba2a:	it	ne
    ba2c:	bxne	lr
    ba2e:	and.w	r6, r3, #2147483648	; 0x80000000
    ba32:	lsls	r2, r2, #1
    ba34:	adc.w	r3, r3, r3
    ba38:	tst.w	r3, #1048576	; 0x100000
    ba3c:	it	eq
    ba3e:	subeq	r5, #1
    ba40:	beq.n	ba32 <__aeabi_dmul+0x1c6>
    ba42:	orr.w	r3, r3, r6
    ba46:	bx	lr
    ba48:	teq	r4, ip
    ba4c:	and.w	r5, ip, r3, lsr #20
    ba50:	it	ne
    ba52:	teqne	r5, ip
    ba56:	beq.n	ba72 <__aeabi_dmul+0x206>
    ba58:	orrs.w	r6, r0, r1, lsl #1
    ba5c:	it	ne
    ba5e:	orrsne.w	r6, r2, r3, lsl #1
    ba62:	bne.n	ba08 <__aeabi_dmul+0x19c>
    ba64:	eor.w	r1, r1, r3
    ba68:	and.w	r1, r1, #2147483648	; 0x80000000
    ba6c:	mov.w	r0, #0
    ba70:	pop	{r4, r5, r6, pc}
    ba72:	orrs.w	r6, r0, r1, lsl #1
    ba76:	itte	eq
    ba78:	moveq	r0, r2
    ba7a:	moveq	r1, r3
    ba7c:	orrsne.w	r6, r2, r3, lsl #1
    ba80:	beq.n	bab6 <__aeabi_dmul+0x24a>
    ba82:	teq	r4, ip
    ba86:	bne.n	ba8e <__aeabi_dmul+0x222>
    ba88:	orrs.w	r6, r0, r1, lsl #12
    ba8c:	bne.n	bab6 <__aeabi_dmul+0x24a>
    ba8e:	teq	r5, ip
    ba92:	bne.n	baa0 <__aeabi_dmul+0x234>
    ba94:	orrs.w	r6, r2, r3, lsl #12
    ba98:	itt	ne
    ba9a:	movne	r0, r2
    ba9c:	movne	r1, r3
    ba9e:	bne.n	bab6 <__aeabi_dmul+0x24a>
    baa0:	eor.w	r1, r1, r3
    baa4:	and.w	r1, r1, #2147483648	; 0x80000000
    baa8:	orr.w	r1, r1, #2130706432	; 0x7f000000
    baac:	orr.w	r1, r1, #15728640	; 0xf00000
    bab0:	mov.w	r0, #0
    bab4:	pop	{r4, r5, r6, pc}
    bab6:	orr.w	r1, r1, #2130706432	; 0x7f000000
    baba:	orr.w	r1, r1, #16252928	; 0xf80000
    babe:	pop	{r4, r5, r6, pc}

0000bac0 <__aeabi_ddiv>:
    bac0:	push	{r4, r5, r6, lr}
    bac2:	mov.w	ip, #255	; 0xff
    bac6:	orr.w	ip, ip, #1792	; 0x700
    baca:	ands.w	r4, ip, r1, lsr #20
    bace:	ittte	ne
    bad0:	andsne.w	r5, ip, r3, lsr #20
    bad4:	teqne	r4, ip
    bad8:	teqne	r5, ip
    badc:	bleq	bc2e <__aeabi_ddiv+0x16e>
    bae0:	sub.w	r4, r4, r5
    bae4:	eor.w	lr, r1, r3
    bae8:	orrs.w	r5, r2, r3, lsl #12
    baec:	mov.w	r1, r1, lsl #12
    baf0:	beq.w	bc04 <__aeabi_ddiv+0x144>
    baf4:	mov.w	r3, r3, lsl #12
    baf8:	mov.w	r5, #268435456	; 0x10000000
    bafc:	orr.w	r3, r5, r3, lsr #4
    bb00:	orr.w	r3, r3, r2, lsr #24
    bb04:	mov.w	r2, r2, lsl #8
    bb08:	orr.w	r5, r5, r1, lsr #4
    bb0c:	orr.w	r5, r5, r0, lsr #24
    bb10:	mov.w	r6, r0, lsl #8
    bb14:	and.w	r1, lr, #2147483648	; 0x80000000
    bb18:	cmp	r5, r3
    bb1a:	it	eq
    bb1c:	cmpeq	r6, r2
    bb1e:	adc.w	r4, r4, #253	; 0xfd
    bb22:	add.w	r4, r4, #768	; 0x300
    bb26:	bcs.n	bb2e <__aeabi_ddiv+0x6e>
    bb28:	lsrs	r3, r3, #1
    bb2a:	mov.w	r2, r2, rrx
    bb2e:	subs	r6, r6, r2
    bb30:	sbc.w	r5, r5, r3
    bb34:	lsrs	r3, r3, #1
    bb36:	mov.w	r2, r2, rrx
    bb3a:	mov.w	r0, #1048576	; 0x100000
    bb3e:	mov.w	ip, #524288	; 0x80000
    bb42:	subs.w	lr, r6, r2
    bb46:	sbcs.w	lr, r5, r3
    bb4a:	ittt	cs
    bb4c:	subcs	r6, r6, r2
    bb4e:	movcs	r5, lr
    bb50:	orrcs.w	r0, r0, ip
    bb54:	lsrs	r3, r3, #1
    bb56:	mov.w	r2, r2, rrx
    bb5a:	subs.w	lr, r6, r2
    bb5e:	sbcs.w	lr, r5, r3
    bb62:	ittt	cs
    bb64:	subcs	r6, r6, r2
    bb66:	movcs	r5, lr
    bb68:	orrcs.w	r0, r0, ip, lsr #1
    bb6c:	lsrs	r3, r3, #1
    bb6e:	mov.w	r2, r2, rrx
    bb72:	subs.w	lr, r6, r2
    bb76:	sbcs.w	lr, r5, r3
    bb7a:	ittt	cs
    bb7c:	subcs	r6, r6, r2
    bb7e:	movcs	r5, lr
    bb80:	orrcs.w	r0, r0, ip, lsr #2
    bb84:	lsrs	r3, r3, #1
    bb86:	mov.w	r2, r2, rrx
    bb8a:	subs.w	lr, r6, r2
    bb8e:	sbcs.w	lr, r5, r3
    bb92:	ittt	cs
    bb94:	subcs	r6, r6, r2
    bb96:	movcs	r5, lr
    bb98:	orrcs.w	r0, r0, ip, lsr #3
    bb9c:	orrs.w	lr, r5, r6
    bba0:	beq.n	bbd4 <__aeabi_ddiv+0x114>
    bba2:	mov.w	r5, r5, lsl #4
    bba6:	orr.w	r5, r5, r6, lsr #28
    bbaa:	mov.w	r6, r6, lsl #4
    bbae:	mov.w	r3, r3, lsl #3
    bbb2:	orr.w	r3, r3, r2, lsr #29
    bbb6:	mov.w	r2, r2, lsl #3
    bbba:	movs.w	ip, ip, lsr #4
    bbbe:	bne.n	bb42 <__aeabi_ddiv+0x82>
    bbc0:	tst.w	r1, #1048576	; 0x100000
    bbc4:	bne.n	bbde <__aeabi_ddiv+0x11e>
    bbc6:	orr.w	r1, r1, r0
    bbca:	mov.w	r0, #0
    bbce:	mov.w	ip, #2147483648	; 0x80000000
    bbd2:	b.n	bb42 <__aeabi_ddiv+0x82>
    bbd4:	tst.w	r1, #1048576	; 0x100000
    bbd8:	itt	eq
    bbda:	orreq	r1, r0
    bbdc:	moveq	r0, #0
    bbde:	subs.w	ip, r4, #253	; 0xfd
    bbe2:	it	hi
    bbe4:	cmphi.w	ip, #1792	; 0x700
    bbe8:	bhi.w	b94a <__aeabi_dmul+0xde>
    bbec:	subs.w	ip, r5, r3
    bbf0:	itt	eq
    bbf2:	subseq.w	ip, r6, r2
    bbf6:	movseq.w	ip, r0, lsr #1
    bbfa:	adcs.w	r0, r0, #0
    bbfe:	adc.w	r1, r1, r4, lsl #20
    bc02:	pop	{r4, r5, r6, pc}
    bc04:	and.w	lr, lr, #2147483648	; 0x80000000
    bc08:	orr.w	r1, lr, r1, lsr #12
    bc0c:	adds.w	r4, r4, ip, lsr #1
    bc10:	ittt	gt
    bc12:	rsbsgt	r5, r4, ip
    bc16:	orrgt.w	r1, r1, r4, lsl #20
    bc1a:	popgt	{r4, r5, r6, pc}
    bc1c:	orr.w	r1, r1, #1048576	; 0x100000
    bc20:	mov.w	lr, #0
    bc24:	subs	r4, #1
    bc26:	b.n	b94a <__aeabi_dmul+0xde>
    bc28:	orr.w	lr, r5, r6
    bc2c:	b.n	b94a <__aeabi_dmul+0xde>
    bc2e:	and.w	r5, ip, r3, lsr #20
    bc32:	teq	r4, ip
    bc36:	it	eq
    bc38:	teqeq	r5, ip
    bc3c:	beq.w	bab6 <__aeabi_dmul+0x24a>
    bc40:	teq	r4, ip
    bc44:	bne.n	bc5c <__aeabi_ddiv+0x19c>
    bc46:	orrs.w	r4, r0, r1, lsl #12
    bc4a:	bne.w	bab6 <__aeabi_dmul+0x24a>
    bc4e:	teq	r5, ip
    bc52:	bne.w	baa0 <__aeabi_dmul+0x234>
    bc56:	mov	r0, r2
    bc58:	mov	r1, r3
    bc5a:	b.n	bab6 <__aeabi_dmul+0x24a>
    bc5c:	teq	r5, ip
    bc60:	bne.n	bc70 <__aeabi_ddiv+0x1b0>
    bc62:	orrs.w	r5, r2, r3, lsl #12
    bc66:	beq.w	ba64 <__aeabi_dmul+0x1f8>
    bc6a:	mov	r0, r2
    bc6c:	mov	r1, r3
    bc6e:	b.n	bab6 <__aeabi_dmul+0x24a>
    bc70:	orrs.w	r6, r0, r1, lsl #1
    bc74:	it	ne
    bc76:	orrsne.w	r6, r2, r3, lsl #1
    bc7a:	bne.w	ba08 <__aeabi_dmul+0x19c>
    bc7e:	orrs.w	r4, r0, r1, lsl #1
    bc82:	bne.w	baa0 <__aeabi_dmul+0x234>
    bc86:	orrs.w	r5, r2, r3, lsl #1
    bc8a:	bne.w	ba64 <__aeabi_dmul+0x1f8>
    bc8e:	b.n	bab6 <__aeabi_dmul+0x24a>

0000bc90 <__gedf2>:
    bc90:	mov.w	ip, #4294967295
    bc94:	b.n	bca4 <__cmpdf2+0x4>
    bc96:	nop

0000bc98 <__ledf2>:
    bc98:	mov.w	ip, #1
    bc9c:	b.n	bca4 <__cmpdf2+0x4>
    bc9e:	nop

0000bca0 <__cmpdf2>:
    bca0:	mov.w	ip, #1
    bca4:	str.w	ip, [sp, #-4]!
    bca8:	mov.w	ip, r1, lsl #1
    bcac:	mvns.w	ip, ip, asr #21
    bcb0:	mov.w	ip, r3, lsl #1
    bcb4:	it	ne
    bcb6:	mvnsne.w	ip, ip, asr #21
    bcba:	beq.n	bcf4 <__cmpdf2+0x54>
    bcbc:	add	sp, #4
    bcbe:	orrs.w	ip, r0, r1, lsl #1
    bcc2:	ite	eq
    bcc4:	orrseq.w	ip, r2, r3, lsl #1
    bcc8:	teqne	r1, r3
    bccc:	ittt	eq
    bcce:	teqeq	r0, r2
    bcd2:	moveq	r0, #0
    bcd4:	bxeq	lr
    bcd6:	cmn.w	r0, #0
    bcda:	teq	r1, r3
    bcde:	it	pl
    bce0:	cmppl	r1, r3
    bce2:	it	eq
    bce4:	cmpeq	r0, r2
    bce6:	ite	cs
    bce8:	asrcs	r0, r3, #31
    bcea:	mvncc.w	r0, r3, asr #31
    bcee:	orr.w	r0, r0, #1
    bcf2:	bx	lr
    bcf4:	mov.w	ip, r1, lsl #1
    bcf8:	mvns.w	ip, ip, asr #21
    bcfc:	bne.n	bd04 <__cmpdf2+0x64>
    bcfe:	orrs.w	ip, r0, r1, lsl #12
    bd02:	bne.n	bd14 <__cmpdf2+0x74>
    bd04:	mov.w	ip, r3, lsl #1
    bd08:	mvns.w	ip, ip, asr #21
    bd0c:	bne.n	bcbc <__cmpdf2+0x1c>
    bd0e:	orrs.w	ip, r2, r3, lsl #12
    bd12:	beq.n	bcbc <__cmpdf2+0x1c>
    bd14:	ldr.w	r0, [sp], #4
    bd18:	bx	lr
    bd1a:	nop

0000bd1c <__aeabi_cdrcmple>:
    bd1c:	mov	ip, r0
    bd1e:	mov	r0, r2
    bd20:	mov	r2, ip
    bd22:	mov	ip, r1
    bd24:	mov	r1, r3
    bd26:	mov	r3, ip
    bd28:	b.n	bd2c <__aeabi_cdcmpeq>
    bd2a:	nop

0000bd2c <__aeabi_cdcmpeq>:
    bd2c:	push	{r0, lr}
    bd2e:	bl	bca0 <__cmpdf2>
    bd32:	cmp	r0, #0
    bd34:	it	mi
    bd36:	cmnmi.w	r0, #0
    bd3a:	pop	{r0, pc}

0000bd3c <__aeabi_dcmpeq>:
    bd3c:	str.w	lr, [sp, #-8]!
    bd40:	bl	bd2c <__aeabi_cdcmpeq>
    bd44:	ite	eq
    bd46:	moveq	r0, #1
    bd48:	movne	r0, #0
    bd4a:	ldr.w	pc, [sp], #8
    bd4e:	nop

0000bd50 <__aeabi_dcmplt>:
    bd50:	str.w	lr, [sp, #-8]!
    bd54:	bl	bd2c <__aeabi_cdcmpeq>
    bd58:	ite	cc
    bd5a:	movcc	r0, #1
    bd5c:	movcs	r0, #0
    bd5e:	ldr.w	pc, [sp], #8
    bd62:	nop

0000bd64 <__aeabi_dcmple>:
    bd64:	str.w	lr, [sp, #-8]!
    bd68:	bl	bd2c <__aeabi_cdcmpeq>
    bd6c:	ite	ls
    bd6e:	movls	r0, #1
    bd70:	movhi	r0, #0
    bd72:	ldr.w	pc, [sp], #8
    bd76:	nop

0000bd78 <__aeabi_dcmpge>:
    bd78:	str.w	lr, [sp, #-8]!
    bd7c:	bl	bd1c <__aeabi_cdrcmple>
    bd80:	ite	ls
    bd82:	movls	r0, #1
    bd84:	movhi	r0, #0
    bd86:	ldr.w	pc, [sp], #8
    bd8a:	nop

0000bd8c <__aeabi_dcmpgt>:
    bd8c:	str.w	lr, [sp, #-8]!
    bd90:	bl	bd1c <__aeabi_cdrcmple>
    bd94:	ite	cc
    bd96:	movcc	r0, #1
    bd98:	movcs	r0, #0
    bd9a:	ldr.w	pc, [sp], #8
    bd9e:	nop

0000bda0 <__aeabi_dcmpun>:
    bda0:	mov.w	ip, r1, lsl #1
    bda4:	mvns.w	ip, ip, asr #21
    bda8:	bne.n	bdb0 <__aeabi_dcmpun+0x10>
    bdaa:	orrs.w	ip, r0, r1, lsl #12
    bdae:	bne.n	bdc6 <__aeabi_dcmpun+0x26>
    bdb0:	mov.w	ip, r3, lsl #1
    bdb4:	mvns.w	ip, ip, asr #21
    bdb8:	bne.n	bdc0 <__aeabi_dcmpun+0x20>
    bdba:	orrs.w	ip, r2, r3, lsl #12
    bdbe:	bne.n	bdc6 <__aeabi_dcmpun+0x26>
    bdc0:	mov.w	r0, #0
    bdc4:	bx	lr
    bdc6:	mov.w	r0, #1
    bdca:	bx	lr

0000bdcc <__aeabi_d2iz>:
    bdcc:	mov.w	r2, r1, lsl #1
    bdd0:	adds.w	r2, r2, #2097152	; 0x200000
    bdd4:	bcs.n	be02 <__aeabi_d2iz+0x36>
    bdd6:	bpl.n	bdfc <__aeabi_d2iz+0x30>
    bdd8:	mvn.w	r3, #992	; 0x3e0
    bddc:	subs.w	r2, r3, r2, asr #21
    bde0:	bls.n	be08 <__aeabi_d2iz+0x3c>
    bde2:	mov.w	r3, r1, lsl #11
    bde6:	orr.w	r3, r3, #2147483648	; 0x80000000
    bdea:	orr.w	r3, r3, r0, lsr #21
    bdee:	tst.w	r1, #2147483648	; 0x80000000
    bdf2:	lsr.w	r0, r3, r2
    bdf6:	it	ne
    bdf8:	negne	r0, r0
    bdfa:	bx	lr
    bdfc:	mov.w	r0, #0
    be00:	bx	lr
    be02:	orrs.w	r0, r0, r1, lsl #12
    be06:	bne.n	be14 <__aeabi_d2iz+0x48>
    be08:	ands.w	r0, r1, #2147483648	; 0x80000000
    be0c:	it	eq
    be0e:	mvneq.w	r0, #2147483648	; 0x80000000
    be12:	bx	lr
    be14:	mov.w	r0, #0
    be18:	bx	lr
    be1a:	nop

0000be1c <__aeabi_uldivmod>:
    be1c:	cbnz	r3, be34 <__aeabi_uldivmod+0x18>
    be1e:	cbnz	r2, be34 <__aeabi_uldivmod+0x18>
    be20:	cmp	r1, #0
    be22:	it	eq
    be24:	cmpeq	r0, #0
    be26:	itt	ne
    be28:	movne.w	r1, #4294967295
    be2c:	movne.w	r0, #4294967295
    be30:	b.w	c130 <__aeabi_idiv0>
    be34:	sub.w	ip, sp, #8
    be38:	strd	ip, lr, [sp, #-16]!
    be3c:	bl	be4c <__udivmoddi4>
    be40:	ldr.w	lr, [sp, #4]
    be44:	ldrd	r2, r3, [sp, #8]
    be48:	add	sp, #16
    be4a:	bx	lr

0000be4c <__udivmoddi4>:
    be4c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    be50:	mov	ip, r1
    be52:	mov	r6, r1
    be54:	mov	r4, r0
    be56:	ldr	r5, [sp, #32]
    be58:	cmp	r3, #0
    be5a:	bne.n	befe <__udivmoddi4+0xb2>
    be5c:	cmp	r2, r1
    be5e:	mov	r7, r2
    be60:	bls.n	bf3c <__udivmoddi4+0xf0>
    be62:	clz	lr, r2
    be66:	cmp.w	lr, #0
    be6a:	beq.n	be84 <__udivmoddi4+0x38>
    be6c:	rsb	r4, lr, #32
    be70:	lsr.w	r4, r0, r4
    be74:	lsl.w	r6, r1, lr
    be78:	orr.w	ip, r4, r6
    be7c:	lsl.w	r7, r2, lr
    be80:	lsl.w	r4, r0, lr
    be84:	mov.w	r9, r7, lsr #16
    be88:	lsrs	r2, r4, #16
    be8a:	udiv	r0, ip, r9
    be8e:	uxth.w	r8, r7
    be92:	mls	r6, r9, r0, ip
    be96:	orr.w	r6, r2, r6, lsl #16
    be9a:	mul.w	r3, r0, r8
    be9e:	cmp	r3, r6
    bea0:	bls.n	beb6 <__udivmoddi4+0x6a>
    bea2:	adds	r6, r6, r7
    bea4:	add.w	r2, r0, #4294967295
    bea8:	bcs.w	c0f0 <__udivmoddi4+0x2a4>
    beac:	cmp	r3, r6
    beae:	bls.w	c0f0 <__udivmoddi4+0x2a4>
    beb2:	subs	r0, #2
    beb4:	add	r6, r7
    beb6:	subs	r6, r6, r3
    beb8:	uxth	r2, r4
    beba:	udiv	r3, r6, r9
    bebe:	mls	r6, r9, r3, r6
    bec2:	orr.w	r4, r2, r6, lsl #16
    bec6:	mul.w	r8, r3, r8
    beca:	cmp	r8, r4
    becc:	bls.n	bee2 <__udivmoddi4+0x96>
    bece:	adds	r4, r4, r7
    bed0:	add.w	r2, r3, #4294967295
    bed4:	bcs.w	c0ec <__udivmoddi4+0x2a0>
    bed8:	cmp	r8, r4
    beda:	bls.w	c0ec <__udivmoddi4+0x2a0>
    bede:	subs	r3, #2
    bee0:	add	r4, r7
    bee2:	rsb	r4, r8, r4
    bee6:	orr.w	r0, r3, r0, lsl #16
    beea:	movs	r1, #0
    beec:	cmp	r5, #0
    beee:	beq.n	bfb6 <__udivmoddi4+0x16a>
    bef0:	lsr.w	r4, r4, lr
    bef4:	movs	r3, #0
    bef6:	str	r4, [r5, #0]
    bef8:	str	r3, [r5, #4]
    befa:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    befe:	cmp	r3, r1
    bf00:	bls.n	bf12 <__udivmoddi4+0xc6>
    bf02:	cmp	r5, #0
    bf04:	beq.n	bfb2 <__udivmoddi4+0x166>
    bf06:	movs	r1, #0
    bf08:	stmia.w	r5, {r0, r6}
    bf0c:	mov	r0, r1
    bf0e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    bf12:	clz	r1, r3
    bf16:	cmp	r1, #0
    bf18:	bne.w	c03c <__udivmoddi4+0x1f0>
    bf1c:	cmp	r3, r6
    bf1e:	bcc.n	bf26 <__udivmoddi4+0xda>
    bf20:	cmp	r2, r0
    bf22:	bhi.w	c116 <__udivmoddi4+0x2ca>
    bf26:	subs	r4, r0, r2
    bf28:	sbc.w	r6, r6, r3
    bf2c:	movs	r0, #1
    bf2e:	mov	ip, r6
    bf30:	cmp	r5, #0
    bf32:	beq.n	bfb6 <__udivmoddi4+0x16a>
    bf34:	stmia.w	r5, {r4, ip}
    bf38:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    bf3c:	cbnz	r2, bf44 <__udivmoddi4+0xf8>
    bf3e:	movs	r7, #1
    bf40:	udiv	r7, r7, r2
    bf44:	clz	lr, r7
    bf48:	cmp.w	lr, #0
    bf4c:	bne.n	bfba <__udivmoddi4+0x16e>
    bf4e:	subs	r3, r6, r7
    bf50:	mov.w	r8, r7, lsr #16
    bf54:	uxth.w	ip, r7
    bf58:	movs	r1, #1
    bf5a:	udiv	r0, r3, r8
    bf5e:	lsrs	r2, r4, #16
    bf60:	mls	r6, r8, r0, r3
    bf64:	orr.w	r6, r2, r6, lsl #16
    bf68:	mul.w	r3, ip, r0
    bf6c:	cmp	r3, r6
    bf6e:	bls.n	bf80 <__udivmoddi4+0x134>
    bf70:	adds	r6, r6, r7
    bf72:	add.w	r2, r0, #4294967295
    bf76:	bcs.n	bf7e <__udivmoddi4+0x132>
    bf78:	cmp	r3, r6
    bf7a:	bhi.w	c11a <__udivmoddi4+0x2ce>
    bf7e:	mov	r0, r2
    bf80:	subs	r6, r6, r3
    bf82:	uxth	r2, r4
    bf84:	udiv	r3, r6, r8
    bf88:	mls	r6, r8, r3, r6
    bf8c:	orr.w	r4, r2, r6, lsl #16
    bf90:	mul.w	ip, ip, r3
    bf94:	cmp	ip, r4
    bf96:	bls.n	bfa8 <__udivmoddi4+0x15c>
    bf98:	adds	r4, r4, r7
    bf9a:	add.w	r2, r3, #4294967295
    bf9e:	bcs.n	bfa6 <__udivmoddi4+0x15a>
    bfa0:	cmp	ip, r4
    bfa2:	bhi.w	c110 <__udivmoddi4+0x2c4>
    bfa6:	mov	r3, r2
    bfa8:	rsb	r4, ip, r4
    bfac:	orr.w	r0, r3, r0, lsl #16
    bfb0:	b.n	beec <__udivmoddi4+0xa0>
    bfb2:	mov	r1, r5
    bfb4:	mov	r0, r5
    bfb6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    bfba:	rsb	r1, lr, #32
    bfbe:	lsl.w	r3, r6, lr
    bfc2:	lsl.w	r7, r7, lr
    bfc6:	lsr.w	r9, r0, r1
    bfca:	mov.w	r8, r7, lsr #16
    bfce:	lsrs	r6, r1
    bfd0:	orr.w	r9, r9, r3
    bfd4:	udiv	sl, r6, r8
    bfd8:	mov.w	r4, r9, lsr #16
    bfdc:	mls	r6, r8, sl, r6
    bfe0:	uxth.w	ip, r7
    bfe4:	orr.w	r3, r4, r6, lsl #16
    bfe8:	mul.w	r2, sl, ip
    bfec:	cmp	r2, r3
    bfee:	lsl.w	r4, r0, lr
    bff2:	bls.n	c00a <__udivmoddi4+0x1be>
    bff4:	adds	r3, r3, r7
    bff6:	add.w	r1, sl, #4294967295
    bffa:	bcs.w	c10c <__udivmoddi4+0x2c0>
    bffe:	cmp	r2, r3
    c000:	bls.w	c10c <__udivmoddi4+0x2c0>
    c004:	sub.w	sl, sl, #2
    c008:	add	r3, r7
    c00a:	subs	r3, r3, r2
    c00c:	uxth.w	r9, r9
    c010:	udiv	r1, r3, r8
    c014:	mls	r3, r8, r1, r3
    c018:	orr.w	r3, r9, r3, lsl #16
    c01c:	mul.w	r6, r1, ip
    c020:	cmp	r6, r3
    c022:	bls.n	c034 <__udivmoddi4+0x1e8>
    c024:	adds	r3, r3, r7
    c026:	add.w	r2, r1, #4294967295
    c02a:	bcs.n	c104 <__udivmoddi4+0x2b8>
    c02c:	cmp	r6, r3
    c02e:	bls.n	c104 <__udivmoddi4+0x2b8>
    c030:	subs	r1, #2
    c032:	add	r3, r7
    c034:	subs	r3, r3, r6
    c036:	orr.w	r1, r1, sl, lsl #16
    c03a:	b.n	bf5a <__udivmoddi4+0x10e>
    c03c:	rsb	lr, r1, #32
    c040:	lsr.w	r4, r2, lr
    c044:	lsls	r3, r1
    c046:	orrs	r3, r4
    c048:	lsr.w	r7, r0, lr
    c04c:	lsl.w	r4, r6, r1
    c050:	mov.w	ip, r3, lsr #16
    c054:	lsr.w	r6, r6, lr
    c058:	orrs	r4, r7
    c05a:	udiv	r9, r6, ip
    c05e:	lsrs	r7, r4, #16
    c060:	mls	r6, ip, r9, r6
    c064:	uxth.w	r8, r3
    c068:	orr.w	r6, r7, r6, lsl #16
    c06c:	mul.w	r7, r9, r8
    c070:	cmp	r7, r6
    c072:	lsl.w	r2, r2, r1
    c076:	lsl.w	sl, r0, r1
    c07a:	bls.n	c08e <__udivmoddi4+0x242>
    c07c:	adds	r6, r6, r3
    c07e:	add.w	r0, r9, #4294967295
    c082:	bcs.n	c108 <__udivmoddi4+0x2bc>
    c084:	cmp	r7, r6
    c086:	bls.n	c108 <__udivmoddi4+0x2bc>
    c088:	sub.w	r9, r9, #2
    c08c:	add	r6, r3
    c08e:	subs	r6, r6, r7
    c090:	uxth	r0, r4
    c092:	udiv	r4, r6, ip
    c096:	mls	r6, ip, r4, r6
    c09a:	orr.w	r7, r0, r6, lsl #16
    c09e:	mul.w	r8, r4, r8
    c0a2:	cmp	r8, r7
    c0a4:	bls.n	c0b6 <__udivmoddi4+0x26a>
    c0a6:	adds	r7, r7, r3
    c0a8:	add.w	r0, r4, #4294967295
    c0ac:	bcs.n	c100 <__udivmoddi4+0x2b4>
    c0ae:	cmp	r8, r7
    c0b0:	bls.n	c100 <__udivmoddi4+0x2b4>
    c0b2:	subs	r4, #2
    c0b4:	add	r7, r3
    c0b6:	orr.w	r0, r4, r9, lsl #16
    c0ba:	rsb	r7, r8, r7
    c0be:	umull	r8, r9, r0, r2
    c0c2:	cmp	r7, r9
    c0c4:	mov	r4, r8
    c0c6:	mov	r6, r9
    c0c8:	bcc.n	c0f4 <__udivmoddi4+0x2a8>
    c0ca:	beq.n	c120 <__udivmoddi4+0x2d4>
    c0cc:	cbz	r5, c128 <__udivmoddi4+0x2dc>
    c0ce:	subs.w	r3, sl, r4
    c0d2:	sbc.w	r7, r7, r6
    c0d6:	lsl.w	lr, r7, lr
    c0da:	lsrs	r3, r1
    c0dc:	lsrs	r7, r1
    c0de:	orr.w	r3, lr, r3
    c0e2:	stmia.w	r5, {r3, r7}
    c0e6:	movs	r1, #0
    c0e8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c0ec:	mov	r3, r2
    c0ee:	b.n	bee2 <__udivmoddi4+0x96>
    c0f0:	mov	r0, r2
    c0f2:	b.n	beb6 <__udivmoddi4+0x6a>
    c0f4:	subs.w	r4, r8, r2
    c0f8:	sbc.w	r6, r9, r3
    c0fc:	subs	r0, #1
    c0fe:	b.n	c0cc <__udivmoddi4+0x280>
    c100:	mov	r4, r0
    c102:	b.n	c0b6 <__udivmoddi4+0x26a>
    c104:	mov	r1, r2
    c106:	b.n	c034 <__udivmoddi4+0x1e8>
    c108:	mov	r9, r0
    c10a:	b.n	c08e <__udivmoddi4+0x242>
    c10c:	mov	sl, r1
    c10e:	b.n	c00a <__udivmoddi4+0x1be>
    c110:	subs	r3, #2
    c112:	add	r4, r7
    c114:	b.n	bfa8 <__udivmoddi4+0x15c>
    c116:	mov	r0, r1
    c118:	b.n	bf30 <__udivmoddi4+0xe4>
    c11a:	subs	r0, #2
    c11c:	add	r6, r7
    c11e:	b.n	bf80 <__udivmoddi4+0x134>
    c120:	cmp	sl, r8
    c122:	bcc.n	c0f4 <__udivmoddi4+0x2a8>
    c124:	mov	r6, r7
    c126:	b.n	c0cc <__udivmoddi4+0x280>
    c128:	mov	r1, r5
    c12a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c12e:	nop

0000c130 <__aeabi_idiv0>:
    c130:	bx	lr
    c132:	nop

0000c134 <__cxa_atexit>:
    c134:	mov	r3, r2
    c136:	mov	r2, r1
    c138:	mov	r1, r0
    c13a:	movs	r0, #2
    c13c:	b.w	e850 <__register_exitproc>

0000c140 <__errno>:
    c140:	ldr	r3, [pc, #4]	; (c148 <__errno+0x8>)
    c142:	ldr	r0, [r3, #0]
    c144:	bx	lr
    c146:	nop
    c148:	.word	0x1fff0ed0

0000c14c <__libc_init_array>:
    c14c:	push	{r4, r5, r6, lr}
    c14e:	ldr	r6, [pc, #60]	; (c18c <__libc_init_array+0x40>)
    c150:	ldr	r5, [pc, #60]	; (c190 <__libc_init_array+0x44>)
    c152:	subs	r6, r6, r5
    c154:	asrs	r6, r6, #2
    c156:	it	ne
    c158:	movne	r4, #0
    c15a:	beq.n	c168 <__libc_init_array+0x1c>
    c15c:	adds	r4, #1
    c15e:	ldr.w	r3, [r5], #4
    c162:	blx	r3
    c164:	cmp	r6, r4
    c166:	bne.n	c15c <__libc_init_array+0x10>
    c168:	ldr	r6, [pc, #40]	; (c194 <__libc_init_array+0x48>)
    c16a:	ldr	r5, [pc, #44]	; (c198 <__libc_init_array+0x4c>)
    c16c:	subs	r6, r6, r5
    c16e:	bl	10c9c <_init>
    c172:	asrs	r6, r6, #2
    c174:	it	ne
    c176:	movne	r4, #0
    c178:	beq.n	c188 <__libc_init_array+0x3c>
    c17a:	adds	r4, #1
    c17c:	ldr.w	r3, [r5], #4
    c180:	blx	r3
    c182:	cmp	r6, r4
    c184:	bne.n	c17a <__libc_init_array+0x2e>
    c186:	pop	{r4, r5, r6, pc}
    c188:	pop	{r4, r5, r6, pc}
    c18a:	nop
    c18c:	.word	0x00010ca8
    c190:	.word	0x00010ca8
    c194:	.word	0x00010cb8
    c198:	.word	0x00010ca8

0000c19c <malloc>:
    c19c:	ldr	r3, [pc, #8]	; (c1a8 <malloc+0xc>)
    c19e:	mov	r1, r0
    c1a0:	ldr	r0, [r3, #0]
    c1a2:	b.w	c1bc <_malloc_r>
    c1a6:	nop
    c1a8:	.word	0x1fff0ed0

0000c1ac <free>:
    c1ac:	ldr	r3, [pc, #8]	; (c1b8 <free+0xc>)
    c1ae:	mov	r1, r0
    c1b0:	ldr	r0, [r3, #0]
    c1b2:	b.w	f938 <_free_r>
    c1b6:	nop
    c1b8:	.word	0x1fff0ed0

0000c1bc <_malloc_r>:
    c1bc:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c1c0:	add.w	r5, r1, #11
    c1c4:	cmp	r5, #22
    c1c6:	sub	sp, #12
    c1c8:	mov	r6, r0
    c1ca:	bls.w	c30c <_malloc_r+0x150>
    c1ce:	bics.w	r5, r5, #7
    c1d2:	bmi.w	c354 <_malloc_r+0x198>
    c1d6:	cmp	r1, r5
    c1d8:	bhi.w	c354 <_malloc_r+0x198>
    c1dc:	bl	c9c8 <__malloc_lock>
    c1e0:	cmp.w	r5, #504	; 0x1f8
    c1e4:	bcc.w	c720 <_malloc_r+0x564>
    c1e8:	lsrs	r3, r5, #9
    c1ea:	beq.w	c362 <_malloc_r+0x1a6>
    c1ee:	cmp	r3, #4
    c1f0:	bhi.w	c4fa <_malloc_r+0x33e>
    c1f4:	lsrs	r0, r5, #6
    c1f6:	add.w	lr, r0, #57	; 0x39
    c1fa:	mov.w	r3, lr, lsl #1
    c1fe:	adds	r0, #56	; 0x38
    c200:	ldr	r7, [pc, #784]	; (c514 <_malloc_r+0x358>)
    c202:	add.w	r3, r7, r3, lsl #2
    c206:	sub.w	r1, r3, #8
    c20a:	ldr	r4, [r3, #4]
    c20c:	cmp	r1, r4
    c20e:	bne.n	c220 <_malloc_r+0x64>
    c210:	b.n	c36c <_malloc_r+0x1b0>
    c212:	cmp	r2, #0
    c214:	bge.w	c370 <_malloc_r+0x1b4>
    c218:	ldr	r4, [r4, #12]
    c21a:	cmp	r1, r4
    c21c:	beq.w	c36c <_malloc_r+0x1b0>
    c220:	ldr	r3, [r4, #4]
    c222:	bic.w	r3, r3, #3
    c226:	subs	r2, r3, r5
    c228:	cmp	r2, #15
    c22a:	ble.n	c212 <_malloc_r+0x56>
    c22c:	ldr	r1, [pc, #740]	; (c514 <_malloc_r+0x358>)
    c22e:	ldr	r4, [r7, #16]
    c230:	add.w	lr, r1, #8
    c234:	cmp	r4, lr
    c236:	beq.w	c5a0 <_malloc_r+0x3e4>
    c23a:	ldr	r3, [r4, #4]
    c23c:	bic.w	r3, r3, #3
    c240:	subs	r2, r3, r5
    c242:	cmp	r2, #15
    c244:	bgt.w	c57a <_malloc_r+0x3be>
    c248:	cmp	r2, #0
    c24a:	str.w	lr, [r1, #20]
    c24e:	str.w	lr, [r1, #16]
    c252:	bge.w	c392 <_malloc_r+0x1d6>
    c256:	cmp.w	r3, #512	; 0x200
    c25a:	bcs.w	c52c <_malloc_r+0x370>
    c25e:	lsrs	r3, r3, #3
    c260:	add.w	ip, r3, #1
    c264:	movs	r2, #1
    c266:	asrs	r3, r3, #2
    c268:	lsl.w	r3, r2, r3
    c26c:	ldr	r2, [r1, #4]
    c26e:	ldr.w	r8, [r1, ip, lsl #3]
    c272:	str.w	r8, [r4, #8]
    c276:	add.w	r9, r1, ip, lsl #3
    c27a:	orrs	r2, r3
    c27c:	sub.w	r3, r9, #8
    c280:	str	r3, [r4, #12]
    c282:	str	r2, [r1, #4]
    c284:	str.w	r4, [r1, ip, lsl #3]
    c288:	str.w	r4, [r8, #12]
    c28c:	asrs	r3, r0, #2
    c28e:	movs	r4, #1
    c290:	lsls	r4, r3
    c292:	cmp	r4, r2
    c294:	bhi.w	c3ac <_malloc_r+0x1f0>
    c298:	tst	r4, r2
    c29a:	bne.n	c2aa <_malloc_r+0xee>
    c29c:	bic.w	r0, r0, #3
    c2a0:	lsls	r4, r4, #1
    c2a2:	tst	r4, r2
    c2a4:	add.w	r0, r0, #4
    c2a8:	beq.n	c2a0 <_malloc_r+0xe4>
    c2aa:	add.w	r9, r7, r0, lsl #3
    c2ae:	mov	ip, r9
    c2b0:	mov	r8, r0
    c2b2:	ldr.w	r1, [ip, #12]
    c2b6:	cmp	ip, r1
    c2b8:	bne.n	c2ca <_malloc_r+0x10e>
    c2ba:	b.n	c5a4 <_malloc_r+0x3e8>
    c2bc:	cmp	r2, #0
    c2be:	bge.w	c5c4 <_malloc_r+0x408>
    c2c2:	ldr	r1, [r1, #12]
    c2c4:	cmp	ip, r1
    c2c6:	beq.w	c5a4 <_malloc_r+0x3e8>
    c2ca:	ldr	r3, [r1, #4]
    c2cc:	bic.w	r3, r3, #3
    c2d0:	subs	r2, r3, r5
    c2d2:	cmp	r2, #15
    c2d4:	ble.n	c2bc <_malloc_r+0x100>
    c2d6:	mov	r4, r1
    c2d8:	ldr.w	ip, [r1, #12]
    c2dc:	ldr.w	r8, [r4, #8]!
    c2e0:	adds	r3, r1, r5
    c2e2:	orr.w	r5, r5, #1
    c2e6:	str	r5, [r1, #4]
    c2e8:	orr.w	r1, r2, #1
    c2ec:	str.w	ip, [r8, #12]
    c2f0:	mov	r0, r6
    c2f2:	str.w	r8, [ip, #8]
    c2f6:	str	r3, [r7, #20]
    c2f8:	str	r3, [r7, #16]
    c2fa:	str.w	lr, [r3, #12]
    c2fe:	str.w	lr, [r3, #8]
    c302:	str	r1, [r3, #4]
    c304:	str	r2, [r3, r2]
    c306:	bl	c9cc <__malloc_unlock>
    c30a:	b.n	c34c <_malloc_r+0x190>
    c30c:	cmp	r1, #16
    c30e:	bhi.n	c354 <_malloc_r+0x198>
    c310:	bl	c9c8 <__malloc_lock>
    c314:	movs	r5, #16
    c316:	movs	r3, #6
    c318:	movs	r0, #2
    c31a:	ldr	r7, [pc, #504]	; (c514 <_malloc_r+0x358>)
    c31c:	add.w	r3, r7, r3, lsl #2
    c320:	sub.w	r2, r3, #8
    c324:	ldr	r4, [r3, #4]
    c326:	cmp	r4, r2
    c328:	beq.w	c5b6 <_malloc_r+0x3fa>
    c32c:	ldr	r3, [r4, #4]
    c32e:	ldr	r1, [r4, #12]
    c330:	ldr	r5, [r4, #8]
    c332:	bic.w	r3, r3, #3
    c336:	add	r3, r4
    c338:	mov	r0, r6
    c33a:	ldr	r2, [r3, #4]
    c33c:	str	r1, [r5, #12]
    c33e:	orr.w	r2, r2, #1
    c342:	str	r5, [r1, #8]
    c344:	str	r2, [r3, #4]
    c346:	bl	c9cc <__malloc_unlock>
    c34a:	adds	r4, #8
    c34c:	mov	r0, r4
    c34e:	add	sp, #12
    c350:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c354:	movs	r4, #0
    c356:	movs	r3, #12
    c358:	mov	r0, r4
    c35a:	str	r3, [r6, #0]
    c35c:	add	sp, #12
    c35e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c362:	movs	r3, #128	; 0x80
    c364:	mov.w	lr, #64	; 0x40
    c368:	movs	r0, #63	; 0x3f
    c36a:	b.n	c200 <_malloc_r+0x44>
    c36c:	mov	r0, lr
    c36e:	b.n	c22c <_malloc_r+0x70>
    c370:	add	r3, r4
    c372:	ldr	r1, [r4, #12]
    c374:	ldr	r2, [r3, #4]
    c376:	ldr	r5, [r4, #8]
    c378:	orr.w	r2, r2, #1
    c37c:	str	r1, [r5, #12]
    c37e:	mov	r0, r6
    c380:	str	r5, [r1, #8]
    c382:	str	r2, [r3, #4]
    c384:	bl	c9cc <__malloc_unlock>
    c388:	adds	r4, #8
    c38a:	mov	r0, r4
    c38c:	add	sp, #12
    c38e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c392:	add	r3, r4
    c394:	mov	r0, r6
    c396:	ldr	r2, [r3, #4]
    c398:	orr.w	r2, r2, #1
    c39c:	str	r2, [r3, #4]
    c39e:	bl	c9cc <__malloc_unlock>
    c3a2:	adds	r4, #8
    c3a4:	mov	r0, r4
    c3a6:	add	sp, #12
    c3a8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c3ac:	ldr	r4, [r7, #8]
    c3ae:	ldr	r3, [r4, #4]
    c3b0:	bic.w	r8, r3, #3
    c3b4:	cmp	r8, r5
    c3b6:	bcc.n	c3c2 <_malloc_r+0x206>
    c3b8:	rsb	r3, r5, r8
    c3bc:	cmp	r3, #15
    c3be:	bgt.w	c4da <_malloc_r+0x31e>
    c3c2:	ldr	r3, [pc, #340]	; (c518 <_malloc_r+0x35c>)
    c3c4:	ldr.w	r9, [pc, #352]	; c528 <_malloc_r+0x36c>
    c3c8:	ldr	r2, [r3, #0]
    c3ca:	ldr.w	r3, [r9]
    c3ce:	adds	r3, #1
    c3d0:	add	r2, r5
    c3d2:	add.w	sl, r4, r8
    c3d6:	beq.w	c69a <_malloc_r+0x4de>
    c3da:	add.w	r2, r2, #4096	; 0x1000
    c3de:	adds	r2, #15
    c3e0:	bic.w	r2, r2, #4080	; 0xff0
    c3e4:	bic.w	r2, r2, #15
    c3e8:	mov	r1, r2
    c3ea:	mov	r0, r6
    c3ec:	str	r2, [sp, #4]
    c3ee:	bl	cdb0 <_sbrk_r>
    c3f2:	cmp.w	r0, #4294967295
    c3f6:	mov	fp, r0
    c3f8:	ldr	r2, [sp, #4]
    c3fa:	beq.w	c6ae <_malloc_r+0x4f2>
    c3fe:	cmp	sl, r0
    c400:	bhi.w	c5fc <_malloc_r+0x440>
    c404:	ldr	r3, [pc, #276]	; (c51c <_malloc_r+0x360>)
    c406:	ldr	r1, [r3, #0]
    c408:	cmp	sl, fp
    c40a:	add	r1, r2
    c40c:	str	r1, [r3, #0]
    c40e:	beq.w	c6b8 <_malloc_r+0x4fc>
    c412:	ldr.w	r0, [r9]
    c416:	ldr.w	lr, [pc, #272]	; c528 <_malloc_r+0x36c>
    c41a:	adds	r0, #1
    c41c:	ittet	ne
    c41e:	rsbne	sl, sl, fp
    c422:	addne	r1, sl
    c424:	streq.w	fp, [lr]
    c428:	strne	r1, [r3, #0]
    c42a:	ands.w	r1, fp, #7
    c42e:	beq.w	c660 <_malloc_r+0x4a4>
    c432:	rsb	r0, r1, #8
    c436:	rsb	r1, r1, #4096	; 0x1000
    c43a:	add	fp, r0
    c43c:	adds	r1, #8
    c43e:	add	r2, fp
    c440:	ubfx	r2, r2, #0, #12
    c444:	rsb	r9, r2, r1
    c448:	mov	r1, r9
    c44a:	mov	r0, r6
    c44c:	str	r3, [sp, #4]
    c44e:	bl	cdb0 <_sbrk_r>
    c452:	adds	r3, r0, #1
    c454:	ldr	r3, [sp, #4]
    c456:	beq.w	c6d8 <_malloc_r+0x51c>
    c45a:	rsb	r2, fp, r0
    c45e:	add	r2, r9
    c460:	orr.w	r2, r2, #1
    c464:	ldr	r1, [r3, #0]
    c466:	str.w	fp, [r7, #8]
    c46a:	add	r1, r9
    c46c:	cmp	r4, r7
    c46e:	str.w	r2, [fp, #4]
    c472:	str	r1, [r3, #0]
    c474:	ldr.w	r9, [pc, #164]	; c51c <_malloc_r+0x360>
    c478:	beq.n	c4a8 <_malloc_r+0x2ec>
    c47a:	cmp.w	r8, #15
    c47e:	bls.w	c67c <_malloc_r+0x4c0>
    c482:	ldr	r2, [r4, #4]
    c484:	sub.w	r3, r8, #12
    c488:	bic.w	r3, r3, #7
    c48c:	adds	r0, r4, r3
    c48e:	and.w	r2, r2, #1
    c492:	mov.w	lr, #5
    c496:	orrs	r2, r3
    c498:	cmp	r3, #15
    c49a:	str	r2, [r4, #4]
    c49c:	str.w	lr, [r0, #4]
    c4a0:	str.w	lr, [r0, #8]
    c4a4:	bhi.w	c6e0 <_malloc_r+0x524>
    c4a8:	ldr	r3, [pc, #116]	; (c520 <_malloc_r+0x364>)
    c4aa:	ldr	r4, [r7, #8]
    c4ac:	ldr	r2, [r3, #0]
    c4ae:	cmp	r1, r2
    c4b0:	it	hi
    c4b2:	strhi	r1, [r3, #0]
    c4b4:	ldr	r3, [pc, #108]	; (c524 <_malloc_r+0x368>)
    c4b6:	ldr	r2, [r3, #0]
    c4b8:	cmp	r1, r2
    c4ba:	ldr	r2, [r4, #4]
    c4bc:	it	hi
    c4be:	strhi	r1, [r3, #0]
    c4c0:	bic.w	r2, r2, #3
    c4c4:	cmp	r5, r2
    c4c6:	sub.w	r3, r2, r5
    c4ca:	bhi.n	c4d0 <_malloc_r+0x314>
    c4cc:	cmp	r3, #15
    c4ce:	bgt.n	c4da <_malloc_r+0x31e>
    c4d0:	mov	r0, r6
    c4d2:	bl	c9cc <__malloc_unlock>
    c4d6:	movs	r4, #0
    c4d8:	b.n	c34c <_malloc_r+0x190>
    c4da:	adds	r2, r4, r5
    c4dc:	orr.w	r3, r3, #1
    c4e0:	orr.w	r5, r5, #1
    c4e4:	str	r5, [r4, #4]
    c4e6:	mov	r0, r6
    c4e8:	str	r2, [r7, #8]
    c4ea:	str	r3, [r2, #4]
    c4ec:	bl	c9cc <__malloc_unlock>
    c4f0:	adds	r4, #8
    c4f2:	mov	r0, r4
    c4f4:	add	sp, #12
    c4f6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c4fa:	cmp	r3, #20
    c4fc:	bls.n	c5e2 <_malloc_r+0x426>
    c4fe:	cmp	r3, #84	; 0x54
    c500:	bhi.w	c64c <_malloc_r+0x490>
    c504:	lsrs	r0, r5, #12
    c506:	add.w	lr, r0, #111	; 0x6f
    c50a:	mov.w	r3, lr, lsl #1
    c50e:	adds	r0, #110	; 0x6e
    c510:	b.n	c200 <_malloc_r+0x44>
    c512:	nop
    c514:	.word	0x1fff1040
    c518:	.word	0x1fff8d80
    c51c:	.word	0x1fff8d84
    c520:	.word	0x1fff8d7c
    c524:	.word	0x1fff8d78
    c528:	.word	0x1fff144c
    c52c:	lsrs	r2, r3, #9
    c52e:	cmp	r2, #4
    c530:	bls.n	c5f0 <_malloc_r+0x434>
    c532:	cmp	r2, #20
    c534:	bhi.w	c69e <_malloc_r+0x4e2>
    c538:	add.w	r1, r2, #92	; 0x5c
    c53c:	lsls	r1, r1, #1
    c53e:	adds	r2, #91	; 0x5b
    c540:	add.w	ip, r7, r1, lsl #2
    c544:	ldr.w	r1, [r7, r1, lsl #2]
    c548:	ldr.w	r8, [pc, #476]	; c728 <_malloc_r+0x56c>
    c54c:	sub.w	ip, ip, #8
    c550:	cmp	ip, r1
    c552:	beq.w	c666 <_malloc_r+0x4aa>
    c556:	ldr	r2, [r1, #4]
    c558:	bic.w	r2, r2, #3
    c55c:	cmp	r3, r2
    c55e:	bcs.n	c566 <_malloc_r+0x3aa>
    c560:	ldr	r1, [r1, #8]
    c562:	cmp	ip, r1
    c564:	bne.n	c556 <_malloc_r+0x39a>
    c566:	ldr.w	ip, [r1, #12]
    c56a:	ldr	r2, [r7, #4]
    c56c:	str.w	ip, [r4, #12]
    c570:	str	r1, [r4, #8]
    c572:	str.w	r4, [ip, #8]
    c576:	str	r4, [r1, #12]
    c578:	b.n	c28c <_malloc_r+0xd0>
    c57a:	adds	r3, r4, r5
    c57c:	orr.w	r7, r2, #1
    c580:	orr.w	r5, r5, #1
    c584:	str	r5, [r4, #4]
    c586:	mov	r0, r6
    c588:	str	r3, [r1, #20]
    c58a:	str	r3, [r1, #16]
    c58c:	str.w	lr, [r3, #12]
    c590:	str.w	lr, [r3, #8]
    c594:	str	r7, [r3, #4]
    c596:	str	r2, [r3, r2]
    c598:	adds	r4, #8
    c59a:	bl	c9cc <__malloc_unlock>
    c59e:	b.n	c34c <_malloc_r+0x190>
    c5a0:	ldr	r2, [r1, #4]
    c5a2:	b.n	c28c <_malloc_r+0xd0>
    c5a4:	add.w	r8, r8, #1
    c5a8:	tst.w	r8, #3
    c5ac:	add.w	ip, ip, #8
    c5b0:	bne.w	c2b2 <_malloc_r+0xf6>
    c5b4:	b.n	c618 <_malloc_r+0x45c>
    c5b6:	ldr	r4, [r3, #12]
    c5b8:	cmp	r3, r4
    c5ba:	it	eq
    c5bc:	addeq	r0, #2
    c5be:	beq.w	c22c <_malloc_r+0x70>
    c5c2:	b.n	c32c <_malloc_r+0x170>
    c5c4:	add	r3, r1
    c5c6:	mov	r4, r1
    c5c8:	ldr	r2, [r3, #4]
    c5ca:	ldr	r1, [r1, #12]
    c5cc:	ldr.w	r5, [r4, #8]!
    c5d0:	orr.w	r2, r2, #1
    c5d4:	str	r2, [r3, #4]
    c5d6:	mov	r0, r6
    c5d8:	str	r1, [r5, #12]
    c5da:	str	r5, [r1, #8]
    c5dc:	bl	c9cc <__malloc_unlock>
    c5e0:	b.n	c34c <_malloc_r+0x190>
    c5e2:	add.w	lr, r3, #92	; 0x5c
    c5e6:	add.w	r0, r3, #91	; 0x5b
    c5ea:	mov.w	r3, lr, lsl #1
    c5ee:	b.n	c200 <_malloc_r+0x44>
    c5f0:	lsrs	r2, r3, #6
    c5f2:	add.w	r1, r2, #57	; 0x39
    c5f6:	lsls	r1, r1, #1
    c5f8:	adds	r2, #56	; 0x38
    c5fa:	b.n	c540 <_malloc_r+0x384>
    c5fc:	cmp	r4, r7
    c5fe:	ldr	r3, [pc, #296]	; (c728 <_malloc_r+0x56c>)
    c600:	beq.w	c404 <_malloc_r+0x248>
    c604:	ldr	r4, [r3, #8]
    c606:	ldr	r2, [r4, #4]
    c608:	bic.w	r2, r2, #3
    c60c:	b.n	c4c4 <_malloc_r+0x308>
    c60e:	ldr.w	r3, [r9], #-8
    c612:	cmp	r9, r3
    c614:	bne.w	c71c <_malloc_r+0x560>
    c618:	tst.w	r0, #3
    c61c:	add.w	r0, r0, #4294967295
    c620:	bne.n	c60e <_malloc_r+0x452>
    c622:	ldr	r3, [r7, #4]
    c624:	bic.w	r3, r3, r4
    c628:	str	r3, [r7, #4]
    c62a:	lsls	r4, r4, #1
    c62c:	cmp	r4, r3
    c62e:	bhi.w	c3ac <_malloc_r+0x1f0>
    c632:	cmp	r4, #0
    c634:	beq.w	c3ac <_malloc_r+0x1f0>
    c638:	tst	r4, r3
    c63a:	mov	r0, r8
    c63c:	bne.w	c2aa <_malloc_r+0xee>
    c640:	lsls	r4, r4, #1
    c642:	tst	r4, r3
    c644:	add.w	r0, r0, #4
    c648:	beq.n	c640 <_malloc_r+0x484>
    c64a:	b.n	c2aa <_malloc_r+0xee>
    c64c:	cmp.w	r3, #340	; 0x154
    c650:	bhi.n	c684 <_malloc_r+0x4c8>
    c652:	lsrs	r0, r5, #15
    c654:	add.w	lr, r0, #120	; 0x78
    c658:	mov.w	r3, lr, lsl #1
    c65c:	adds	r0, #119	; 0x77
    c65e:	b.n	c200 <_malloc_r+0x44>
    c660:	mov.w	r1, #4096	; 0x1000
    c664:	b.n	c43e <_malloc_r+0x282>
    c666:	movs	r1, #1
    c668:	ldr.w	r3, [r8, #4]
    c66c:	asrs	r2, r2, #2
    c66e:	lsl.w	r2, r1, r2
    c672:	orrs	r2, r3
    c674:	str.w	r2, [r8, #4]
    c678:	mov	r1, ip
    c67a:	b.n	c56c <_malloc_r+0x3b0>
    c67c:	movs	r3, #1
    c67e:	str.w	r3, [fp, #4]
    c682:	b.n	c4d0 <_malloc_r+0x314>
    c684:	movw	r2, #1364	; 0x554
    c688:	cmp	r3, r2
    c68a:	bhi.n	c6ce <_malloc_r+0x512>
    c68c:	lsrs	r0, r5, #18
    c68e:	add.w	lr, r0, #125	; 0x7d
    c692:	mov.w	r3, lr, lsl #1
    c696:	adds	r0, #124	; 0x7c
    c698:	b.n	c200 <_malloc_r+0x44>
    c69a:	adds	r2, #16
    c69c:	b.n	c3e8 <_malloc_r+0x22c>
    c69e:	cmp	r2, #84	; 0x54
    c6a0:	bhi.n	c6f0 <_malloc_r+0x534>
    c6a2:	lsrs	r2, r3, #12
    c6a4:	add.w	r1, r2, #111	; 0x6f
    c6a8:	lsls	r1, r1, #1
    c6aa:	adds	r2, #110	; 0x6e
    c6ac:	b.n	c540 <_malloc_r+0x384>
    c6ae:	ldr	r4, [r7, #8]
    c6b0:	ldr	r2, [r4, #4]
    c6b2:	bic.w	r2, r2, #3
    c6b6:	b.n	c4c4 <_malloc_r+0x308>
    c6b8:	ubfx	r0, sl, #0, #12
    c6bc:	cmp	r0, #0
    c6be:	bne.w	c412 <_malloc_r+0x256>
    c6c2:	add	r2, r8
    c6c4:	ldr	r3, [r7, #8]
    c6c6:	orr.w	r2, r2, #1
    c6ca:	str	r2, [r3, #4]
    c6cc:	b.n	c4a8 <_malloc_r+0x2ec>
    c6ce:	movs	r3, #254	; 0xfe
    c6d0:	mov.w	lr, #127	; 0x7f
    c6d4:	movs	r0, #126	; 0x7e
    c6d6:	b.n	c200 <_malloc_r+0x44>
    c6d8:	movs	r2, #1
    c6da:	mov.w	r9, #0
    c6de:	b.n	c464 <_malloc_r+0x2a8>
    c6e0:	add.w	r1, r4, #8
    c6e4:	mov	r0, r6
    c6e6:	bl	f938 <_free_r>
    c6ea:	ldr.w	r1, [r9]
    c6ee:	b.n	c4a8 <_malloc_r+0x2ec>
    c6f0:	cmp.w	r2, #340	; 0x154
    c6f4:	bhi.n	c702 <_malloc_r+0x546>
    c6f6:	lsrs	r2, r3, #15
    c6f8:	add.w	r1, r2, #120	; 0x78
    c6fc:	lsls	r1, r1, #1
    c6fe:	adds	r2, #119	; 0x77
    c700:	b.n	c540 <_malloc_r+0x384>
    c702:	movw	r1, #1364	; 0x554
    c706:	cmp	r2, r1
    c708:	bhi.n	c716 <_malloc_r+0x55a>
    c70a:	lsrs	r2, r3, #18
    c70c:	add.w	r1, r2, #125	; 0x7d
    c710:	lsls	r1, r1, #1
    c712:	adds	r2, #124	; 0x7c
    c714:	b.n	c540 <_malloc_r+0x384>
    c716:	movs	r1, #254	; 0xfe
    c718:	movs	r2, #126	; 0x7e
    c71a:	b.n	c540 <_malloc_r+0x384>
    c71c:	ldr	r3, [r7, #4]
    c71e:	b.n	c62a <_malloc_r+0x46e>
    c720:	lsrs	r0, r5, #3
    c722:	adds	r3, r0, #1
    c724:	lsls	r3, r3, #1
    c726:	b.n	c31a <_malloc_r+0x15e>
    c728:	.word	0x1fff1040

0000c72c <__ascii_mbtowc>:
    c72c:	sub	sp, #8
    c72e:	cbz	r1, c744 <__ascii_mbtowc+0x18>
    c730:	cbz	r2, c74a <__ascii_mbtowc+0x1e>
    c732:	cbz	r3, c750 <__ascii_mbtowc+0x24>
    c734:	ldrb	r3, [r2, #0]
    c736:	str	r3, [r1, #0]
    c738:	ldrb	r2, [r2, #0]
    c73a:	adds	r0, r2, #0
    c73c:	it	ne
    c73e:	movne	r0, #1
    c740:	add	sp, #8
    c742:	bx	lr
    c744:	add	r1, sp, #4
    c746:	cmp	r2, #0
    c748:	bne.n	c732 <__ascii_mbtowc+0x6>
    c74a:	mov	r0, r2
    c74c:	add	sp, #8
    c74e:	bx	lr
    c750:	mvn.w	r0, #1
    c754:	b.n	c740 <__ascii_mbtowc+0x14>
    c756:	nop
    c758:			; <UNDEFINED> instruction: 0xffffffff
    c75c:			; <UNDEFINED> instruction: 0xffffffff

0000c760 <memchr>:
    c760:	and.w	r1, r1, #255	; 0xff
    c764:	cmp	r2, #16
    c766:	blt.n	c7c0 <memchr+0x60>
    c768:	tst.w	r0, #7
    c76c:	beq.n	c780 <memchr+0x20>
    c76e:	ldrb.w	r3, [r0], #1
    c772:	subs	r2, #1
    c774:	cmp	r3, r1
    c776:	beq.n	c7d4 <memchr+0x74>
    c778:	tst.w	r0, #7
    c77c:	cbz	r2, c7d0 <memchr+0x70>
    c77e:	bne.n	c76e <memchr+0xe>
    c780:	push	{r4, r5, r6, r7}
    c782:	orr.w	r1, r1, r1, lsl #8
    c786:	orr.w	r1, r1, r1, lsl #16
    c78a:	bic.w	r4, r2, #7
    c78e:	mvns.w	r7, #0
    c792:	movs	r3, #0
    c794:	ldrd	r5, r6, [r0], #8
    c798:	subs	r4, #8
    c79a:	eor.w	r5, r5, r1
    c79e:	eor.w	r6, r6, r1
    c7a2:	uadd8	r5, r5, r7
    c7a6:	sel	r5, r3, r7
    c7aa:	uadd8	r6, r6, r7
    c7ae:	sel	r6, r5, r7
    c7b2:	cbnz	r6, c7d8 <memchr+0x78>
    c7b4:	bne.n	c794 <memchr+0x34>
    c7b6:	pop	{r4, r5, r6, r7}
    c7b8:	and.w	r1, r1, #255	; 0xff
    c7bc:	and.w	r2, r2, #7
    c7c0:	cbz	r2, c7d0 <memchr+0x70>
    c7c2:	ldrb.w	r3, [r0], #1
    c7c6:	subs	r2, #1
    c7c8:	eor.w	r3, r3, r1
    c7cc:	cbz	r3, c7d4 <memchr+0x74>
    c7ce:	bne.n	c7c2 <memchr+0x62>
    c7d0:	movs	r0, #0
    c7d2:	bx	lr
    c7d4:	subs	r0, #1
    c7d6:	bx	lr
    c7d8:	cmp	r5, #0
    c7da:	itte	eq
    c7dc:	moveq	r5, r6
    c7de:	subeq	r0, #3
    c7e0:	subne	r0, #7
    c7e2:	tst.w	r5, #1
    c7e6:	bne.n	c7f8 <memchr+0x98>
    c7e8:	adds	r0, #1
    c7ea:	tst.w	r5, #256	; 0x100
    c7ee:	ittt	eq
    c7f0:	addeq	r0, #1
    c7f2:	tsteq.w	r5, #98304	; 0x18000
    c7f6:	addeq	r0, #1
    c7f8:	pop	{r4, r5, r6, r7}
    c7fa:	subs	r0, #1
    c7fc:	bx	lr
    c7fe:	nop

0000c800 <memcmp>:
    c800:	cmp	r2, #3
    c802:	push	{r4, r5, r6}
    c804:	bls.n	c854 <memcmp+0x54>
    c806:	orr.w	r3, r0, r1
    c80a:	lsls	r3, r3, #30
    c80c:	beq.n	c832 <memcmp+0x32>
    c80e:	ldrb	r4, [r0, #0]
    c810:	ldrb	r5, [r1, #0]
    c812:	cmp	r4, r5
    c814:	bne.n	c85c <memcmp+0x5c>
    c816:	add	r2, r0
    c818:	adds	r3, r0, #1
    c81a:	b.n	c828 <memcmp+0x28>
    c81c:	ldrb.w	r4, [r3], #1
    c820:	ldrb.w	r5, [r1, #1]!
    c824:	cmp	r4, r5
    c826:	bne.n	c85c <memcmp+0x5c>
    c828:	cmp	r3, r2
    c82a:	bne.n	c81c <memcmp+0x1c>
    c82c:	movs	r0, #0
    c82e:	pop	{r4, r5, r6}
    c830:	bx	lr
    c832:	mov	r4, r1
    c834:	mov	r3, r0
    c836:	ldr	r6, [r3, #0]
    c838:	ldr	r5, [r4, #0]
    c83a:	cmp	r6, r5
    c83c:	mov	r0, r3
    c83e:	mov	r1, r4
    c840:	add.w	r3, r3, #4
    c844:	add.w	r4, r4, #4
    c848:	bne.n	c80e <memcmp+0xe>
    c84a:	subs	r2, #4
    c84c:	cmp	r2, #3
    c84e:	mov	r0, r3
    c850:	mov	r1, r4
    c852:	bhi.n	c836 <memcmp+0x36>
    c854:	cmp	r2, #0
    c856:	bne.n	c80e <memcmp+0xe>
    c858:	mov	r0, r2
    c85a:	b.n	c82e <memcmp+0x2e>
    c85c:	subs	r0, r4, r5
    c85e:	pop	{r4, r5, r6}
    c860:	bx	lr
    c862:	nop

0000c864 <memmove>:
    c864:	cmp	r0, r1
    c866:	push	{r4, r5, r6, r7, lr}
    c868:	bls.n	c886 <memmove+0x22>
    c86a:	adds	r3, r1, r2
    c86c:	cmp	r0, r3
    c86e:	bcs.n	c886 <memmove+0x22>
    c870:	adds	r1, r0, r2
    c872:	cmp	r2, #0
    c874:	beq.n	c91a <memmove+0xb6>
    c876:	subs	r2, r3, r2
    c878:	ldrb.w	r4, [r3, #-1]!
    c87c:	strb.w	r4, [r1, #-1]!
    c880:	cmp	r3, r2
    c882:	bne.n	c878 <memmove+0x14>
    c884:	pop	{r4, r5, r6, r7, pc}
    c886:	cmp	r2, #15
    c888:	bls.n	c91c <memmove+0xb8>
    c88a:	orr.w	r3, r1, r0
    c88e:	lsls	r3, r3, #30
    c890:	bne.n	c920 <memmove+0xbc>
    c892:	add.w	r4, r0, #16
    c896:	add.w	r3, r1, #16
    c89a:	mov	r5, r2
    c89c:	ldr.w	r6, [r3, #-16]
    c8a0:	str.w	r6, [r4, #-16]
    c8a4:	ldr.w	r6, [r3, #-12]
    c8a8:	str.w	r6, [r4, #-12]
    c8ac:	ldr.w	r6, [r3, #-8]
    c8b0:	str.w	r6, [r4, #-8]
    c8b4:	subs	r5, #16
    c8b6:	ldr.w	r6, [r3, #-4]
    c8ba:	str.w	r6, [r4, #-4]
    c8be:	cmp	r5, #15
    c8c0:	add.w	r3, r3, #16
    c8c4:	add.w	r4, r4, #16
    c8c8:	bhi.n	c89c <memmove+0x38>
    c8ca:	sub.w	r3, r2, #16
    c8ce:	bic.w	r3, r3, #15
    c8d2:	and.w	lr, r2, #15
    c8d6:	adds	r3, #16
    c8d8:	cmp.w	lr, #3
    c8dc:	add	r1, r3
    c8de:	add	r3, r0
    c8e0:	bls.n	c926 <memmove+0xc2>
    c8e2:	subs	r6, r3, #4
    c8e4:	mov	r5, r1
    c8e6:	mov	r4, lr
    c8e8:	subs	r4, #4
    c8ea:	ldr.w	r7, [r5], #4
    c8ee:	str.w	r7, [r6, #4]!
    c8f2:	cmp	r4, #3
    c8f4:	bhi.n	c8e8 <memmove+0x84>
    c8f6:	sub.w	r4, lr, #4
    c8fa:	bic.w	r4, r4, #3
    c8fe:	adds	r4, #4
    c900:	add	r3, r4
    c902:	add	r1, r4
    c904:	and.w	r2, r2, #3
    c908:	cbz	r2, c924 <memmove+0xc0>
    c90a:	subs	r3, #1
    c90c:	add	r2, r1
    c90e:	ldrb.w	r4, [r1], #1
    c912:	strb.w	r4, [r3, #1]!
    c916:	cmp	r2, r1
    c918:	bne.n	c90e <memmove+0xaa>
    c91a:	pop	{r4, r5, r6, r7, pc}
    c91c:	mov	r3, r0
    c91e:	b.n	c908 <memmove+0xa4>
    c920:	mov	r3, r0
    c922:	b.n	c90a <memmove+0xa6>
    c924:	pop	{r4, r5, r6, r7, pc}
    c926:	mov	r2, lr
    c928:	b.n	c908 <memmove+0xa4>
    c92a:	nop

0000c92c <memset>:
    c92c:	push	{r4, r5, r6}
    c92e:	lsls	r4, r0, #30
    c930:	beq.n	c9c0 <memset+0x94>
    c932:	subs	r4, r2, #1
    c934:	cmp	r2, #0
    c936:	beq.n	c9bc <memset+0x90>
    c938:	uxtb	r5, r1
    c93a:	mov	r3, r0
    c93c:	b.n	c944 <memset+0x18>
    c93e:	subs	r2, r4, #1
    c940:	cbz	r4, c9bc <memset+0x90>
    c942:	mov	r4, r2
    c944:	strb.w	r5, [r3], #1
    c948:	lsls	r2, r3, #30
    c94a:	bne.n	c93e <memset+0x12>
    c94c:	cmp	r4, #3
    c94e:	bls.n	c9ae <memset+0x82>
    c950:	uxtb	r5, r1
    c952:	orr.w	r5, r5, r5, lsl #8
    c956:	cmp	r4, #15
    c958:	orr.w	r5, r5, r5, lsl #16
    c95c:	bls.n	c992 <memset+0x66>
    c95e:	add.w	r2, r3, #16
    c962:	mov	r6, r4
    c964:	subs	r6, #16
    c966:	cmp	r6, #15
    c968:	str.w	r5, [r2, #-16]
    c96c:	str.w	r5, [r2, #-12]
    c970:	str.w	r5, [r2, #-8]
    c974:	str.w	r5, [r2, #-4]
    c978:	add.w	r2, r2, #16
    c97c:	bhi.n	c964 <memset+0x38>
    c97e:	sub.w	r2, r4, #16
    c982:	bic.w	r2, r2, #15
    c986:	and.w	r4, r4, #15
    c98a:	adds	r2, #16
    c98c:	cmp	r4, #3
    c98e:	add	r3, r2
    c990:	bls.n	c9ae <memset+0x82>
    c992:	mov	r6, r3
    c994:	mov	r2, r4
    c996:	subs	r2, #4
    c998:	cmp	r2, #3
    c99a:	str.w	r5, [r6], #4
    c99e:	bhi.n	c996 <memset+0x6a>
    c9a0:	subs	r2, r4, #4
    c9a2:	bic.w	r2, r2, #3
    c9a6:	adds	r2, #4
    c9a8:	add	r3, r2
    c9aa:	and.w	r4, r4, #3
    c9ae:	cbz	r4, c9bc <memset+0x90>
    c9b0:	uxtb	r1, r1
    c9b2:	add	r4, r3
    c9b4:	strb.w	r1, [r3], #1
    c9b8:	cmp	r3, r4
    c9ba:	bne.n	c9b4 <memset+0x88>
    c9bc:	pop	{r4, r5, r6}
    c9be:	bx	lr
    c9c0:	mov	r4, r2
    c9c2:	mov	r3, r0
    c9c4:	b.n	c94c <memset+0x20>
    c9c6:	nop

0000c9c8 <__malloc_lock>:
    c9c8:	bx	lr
    c9ca:	nop

0000c9cc <__malloc_unlock>:
    c9cc:	bx	lr
    c9ce:	nop

0000c9d0 <_realloc_r>:
    c9d0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c9d4:	mov	r7, r2
    c9d6:	sub	sp, #12
    c9d8:	cmp	r1, #0
    c9da:	beq.w	cb60 <_realloc_r+0x190>
    c9de:	mov	r6, r1
    c9e0:	mov	r9, r0
    c9e2:	add.w	r5, r7, #11
    c9e6:	bl	c9c8 <__malloc_lock>
    c9ea:	ldr.w	lr, [r6, #-4]
    c9ee:	cmp	r5, #22
    c9f0:	bic.w	r4, lr, #3
    c9f4:	sub.w	r8, r6, #8
    c9f8:	bhi.n	ca7c <_realloc_r+0xac>
    c9fa:	movs	r2, #16
    c9fc:	mov	r5, r2
    c9fe:	cmp	r7, r5
    ca00:	bhi.n	ca86 <_realloc_r+0xb6>
    ca02:	cmp	r4, r2
    ca04:	bge.n	caf2 <_realloc_r+0x122>
    ca06:	ldr	r3, [pc, #804]	; (cd2c <_realloc_r+0x35c>)
    ca08:	ldr	r1, [r3, #8]
    ca0a:	add.w	r0, r8, r4
    ca0e:	cmp	r0, r1
    ca10:	ldr	r1, [r0, #4]
    ca12:	beq.w	cbc8 <_realloc_r+0x1f8>
    ca16:	bic.w	r3, r1, #1
    ca1a:	add	r3, r0
    ca1c:	ldr	r3, [r3, #4]
    ca1e:	lsls	r3, r3, #31
    ca20:	bpl.n	cb1e <_realloc_r+0x14e>
    ca22:	tst.w	lr, #1
    ca26:	beq.n	ca94 <_realloc_r+0xc4>
    ca28:	mov	r1, r7
    ca2a:	mov	r0, r9
    ca2c:	bl	c1bc <_malloc_r>
    ca30:	mov	r7, r0
    ca32:	cbz	r0, ca6e <_realloc_r+0x9e>
    ca34:	ldr.w	r3, [r6, #-4]
    ca38:	bic.w	r3, r3, #1
    ca3c:	add	r3, r8
    ca3e:	sub.w	r2, r0, #8
    ca42:	cmp	r2, r3
    ca44:	beq.w	ccd0 <_realloc_r+0x300>
    ca48:	subs	r2, r4, #4
    ca4a:	cmp	r2, #36	; 0x24
    ca4c:	bhi.w	ccb2 <_realloc_r+0x2e2>
    ca50:	cmp	r2, #19
    ca52:	bhi.w	cc5e <_realloc_r+0x28e>
    ca56:	mov	r3, r0
    ca58:	mov	r2, r6
    ca5a:	ldr	r1, [r2, #0]
    ca5c:	str	r1, [r3, #0]
    ca5e:	ldr	r1, [r2, #4]
    ca60:	str	r1, [r3, #4]
    ca62:	ldr	r2, [r2, #8]
    ca64:	str	r2, [r3, #8]
    ca66:	mov	r1, r6
    ca68:	mov	r0, r9
    ca6a:	bl	f938 <_free_r>
    ca6e:	mov	r0, r9
    ca70:	bl	c9cc <__malloc_unlock>
    ca74:	mov	r0, r7
    ca76:	add	sp, #12
    ca78:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ca7c:	bic.w	r5, r5, #7
    ca80:	cmp	r5, #0
    ca82:	mov	r2, r5
    ca84:	bge.n	c9fe <_realloc_r+0x2e>
    ca86:	movs	r3, #12
    ca88:	movs	r0, #0
    ca8a:	str.w	r3, [r9]
    ca8e:	add	sp, #12
    ca90:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ca94:	ldr.w	r3, [r6, #-8]
    ca98:	rsb	sl, r3, r8
    ca9c:	ldr.w	r3, [sl, #4]
    caa0:	bic.w	ip, r3, #3
    caa4:	add.w	r3, r4, ip
    caa8:	cmp	r3, r2
    caaa:	blt.n	ca28 <_realloc_r+0x58>
    caac:	mov	r7, sl
    caae:	ldr.w	r1, [sl, #12]
    cab2:	ldr.w	r0, [r7, #8]!
    cab6:	subs	r2, r4, #4
    cab8:	cmp	r2, #36	; 0x24
    caba:	str	r1, [r0, #12]
    cabc:	str	r0, [r1, #8]
    cabe:	bhi.w	ccf0 <_realloc_r+0x320>
    cac2:	cmp	r2, #19
    cac4:	bls.w	ccec <_realloc_r+0x31c>
    cac8:	ldr	r1, [r6, #0]
    caca:	str.w	r1, [sl, #8]
    cace:	ldr	r1, [r6, #4]
    cad0:	str.w	r1, [sl, #12]
    cad4:	cmp	r2, #27
    cad6:	bhi.w	cd30 <_realloc_r+0x360>
    cada:	adds	r6, #8
    cadc:	add.w	r2, sl, #16
    cae0:	ldr	r1, [r6, #0]
    cae2:	str	r1, [r2, #0]
    cae4:	ldr	r1, [r6, #4]
    cae6:	str	r1, [r2, #4]
    cae8:	ldr	r1, [r6, #8]
    caea:	str	r1, [r2, #8]
    caec:	mov	r6, r7
    caee:	mov	r4, r3
    caf0:	mov	r8, sl
    caf2:	subs	r3, r4, r5
    caf4:	cmp	r3, #15
    caf6:	bhi.n	cb34 <_realloc_r+0x164>
    caf8:	ldr.w	r3, [r8, #4]
    cafc:	and.w	r3, r3, #1
    cb00:	orrs	r3, r4
    cb02:	add	r4, r8
    cb04:	str.w	r3, [r8, #4]
    cb08:	ldr	r3, [r4, #4]
    cb0a:	orr.w	r3, r3, #1
    cb0e:	str	r3, [r4, #4]
    cb10:	mov	r0, r9
    cb12:	bl	c9cc <__malloc_unlock>
    cb16:	mov	r0, r6
    cb18:	add	sp, #12
    cb1a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    cb1e:	bic.w	r1, r1, #3
    cb22:	add	r1, r4
    cb24:	cmp	r1, r2
    cb26:	blt.n	cb6c <_realloc_r+0x19c>
    cb28:	ldr	r3, [r0, #12]
    cb2a:	ldr	r2, [r0, #8]
    cb2c:	mov	r4, r1
    cb2e:	str	r3, [r2, #12]
    cb30:	str	r2, [r3, #8]
    cb32:	b.n	caf2 <_realloc_r+0x122>
    cb34:	ldr.w	r2, [r8, #4]
    cb38:	add.w	r1, r8, r5
    cb3c:	and.w	r2, r2, #1
    cb40:	orrs	r5, r2
    cb42:	orr.w	r2, r3, #1
    cb46:	add	r3, r1
    cb48:	str.w	r5, [r8, #4]
    cb4c:	str	r2, [r1, #4]
    cb4e:	ldr	r2, [r3, #4]
    cb50:	orr.w	r2, r2, #1
    cb54:	adds	r1, #8
    cb56:	str	r2, [r3, #4]
    cb58:	mov	r0, r9
    cb5a:	bl	f938 <_free_r>
    cb5e:	b.n	cb10 <_realloc_r+0x140>
    cb60:	mov	r1, r2
    cb62:	add	sp, #12
    cb64:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    cb68:	b.w	c1bc <_malloc_r>
    cb6c:	tst.w	lr, #1
    cb70:	bne.w	ca28 <_realloc_r+0x58>
    cb74:	ldr.w	r3, [r6, #-8]
    cb78:	rsb	sl, r3, r8
    cb7c:	ldr.w	r3, [sl, #4]
    cb80:	bic.w	ip, r3, #3
    cb84:	add.w	lr, r1, ip
    cb88:	cmp	lr, r2
    cb8a:	blt.n	caa4 <_realloc_r+0xd4>
    cb8c:	ldr	r3, [r0, #12]
    cb8e:	ldr	r2, [r0, #8]
    cb90:	mov	r7, sl
    cb92:	str	r3, [r2, #12]
    cb94:	str	r2, [r3, #8]
    cb96:	ldr.w	r1, [r7, #8]!
    cb9a:	ldr.w	r3, [sl, #12]
    cb9e:	str	r3, [r1, #12]
    cba0:	subs	r2, r4, #4
    cba2:	cmp	r2, #36	; 0x24
    cba4:	str	r1, [r3, #8]
    cba6:	bhi.w	ccdc <_realloc_r+0x30c>
    cbaa:	cmp	r2, #19
    cbac:	bls.n	cc74 <_realloc_r+0x2a4>
    cbae:	ldr	r3, [r6, #0]
    cbb0:	str.w	r3, [sl, #8]
    cbb4:	ldr	r3, [r6, #4]
    cbb6:	str.w	r3, [sl, #12]
    cbba:	cmp	r2, #27
    cbbc:	bhi.w	cd00 <_realloc_r+0x330>
    cbc0:	adds	r6, #8
    cbc2:	add.w	r3, sl, #16
    cbc6:	b.n	cc76 <_realloc_r+0x2a6>
    cbc8:	bic.w	fp, r1, #3
    cbcc:	add	fp, r4
    cbce:	add.w	r0, r5, #16
    cbd2:	cmp	fp, r0
    cbd4:	bge.n	cc8a <_realloc_r+0x2ba>
    cbd6:	tst.w	lr, #1
    cbda:	bne.w	ca28 <_realloc_r+0x58>
    cbde:	ldr.w	r1, [r6, #-8]
    cbe2:	rsb	sl, r1, r8
    cbe6:	ldr.w	r1, [sl, #4]
    cbea:	bic.w	ip, r1, #3
    cbee:	add	fp, ip
    cbf0:	cmp	r0, fp
    cbf2:	bgt.w	caa4 <_realloc_r+0xd4>
    cbf6:	mov	r7, sl
    cbf8:	ldr.w	r1, [sl, #12]
    cbfc:	ldr.w	r0, [r7, #8]!
    cc00:	subs	r2, r4, #4
    cc02:	cmp	r2, #36	; 0x24
    cc04:	str	r1, [r0, #12]
    cc06:	str	r0, [r1, #8]
    cc08:	bhi.w	cd74 <_realloc_r+0x3a4>
    cc0c:	cmp	r2, #19
    cc0e:	bls.w	cd5c <_realloc_r+0x38c>
    cc12:	ldr	r1, [r6, #0]
    cc14:	str.w	r1, [sl, #8]
    cc18:	ldr	r1, [r6, #4]
    cc1a:	str.w	r1, [sl, #12]
    cc1e:	cmp	r2, #27
    cc20:	bhi.w	cd82 <_realloc_r+0x3b2>
    cc24:	adds	r6, #8
    cc26:	add.w	r2, sl, #16
    cc2a:	ldr	r1, [r6, #0]
    cc2c:	str	r1, [r2, #0]
    cc2e:	ldr	r1, [r6, #4]
    cc30:	str	r1, [r2, #4]
    cc32:	ldr	r1, [r6, #8]
    cc34:	str	r1, [r2, #8]
    cc36:	add.w	r1, sl, r5
    cc3a:	rsb	r2, r5, fp
    cc3e:	orr.w	r2, r2, #1
    cc42:	str	r1, [r3, #8]
    cc44:	str	r2, [r1, #4]
    cc46:	ldr.w	r3, [sl, #4]
    cc4a:	and.w	r3, r3, #1
    cc4e:	orrs	r5, r3
    cc50:	mov	r0, r9
    cc52:	str.w	r5, [sl, #4]
    cc56:	bl	c9cc <__malloc_unlock>
    cc5a:	mov	r0, r7
    cc5c:	b.n	cb18 <_realloc_r+0x148>
    cc5e:	ldr	r3, [r6, #0]
    cc60:	str	r3, [r0, #0]
    cc62:	ldr	r3, [r6, #4]
    cc64:	str	r3, [r0, #4]
    cc66:	cmp	r2, #27
    cc68:	bhi.n	ccba <_realloc_r+0x2ea>
    cc6a:	add.w	r3, r0, #8
    cc6e:	add.w	r2, r6, #8
    cc72:	b.n	ca5a <_realloc_r+0x8a>
    cc74:	mov	r3, r7
    cc76:	ldr	r2, [r6, #0]
    cc78:	str	r2, [r3, #0]
    cc7a:	ldr	r2, [r6, #4]
    cc7c:	str	r2, [r3, #4]
    cc7e:	ldr	r2, [r6, #8]
    cc80:	str	r2, [r3, #8]
    cc82:	mov	r6, r7
    cc84:	mov	r4, lr
    cc86:	mov	r8, sl
    cc88:	b.n	caf2 <_realloc_r+0x122>
    cc8a:	add.w	r1, r8, r5
    cc8e:	rsb	fp, r5, fp
    cc92:	orr.w	r2, fp, #1
    cc96:	str	r1, [r3, #8]
    cc98:	str	r2, [r1, #4]
    cc9a:	ldr.w	r3, [r6, #-4]
    cc9e:	and.w	r3, r3, #1
    cca2:	orrs	r5, r3
    cca4:	mov	r0, r9
    cca6:	str.w	r5, [r6, #-4]
    ccaa:	bl	c9cc <__malloc_unlock>
    ccae:	mov	r0, r6
    ccb0:	b.n	cb18 <_realloc_r+0x148>
    ccb2:	mov	r1, r6
    ccb4:	bl	c864 <memmove>
    ccb8:	b.n	ca66 <_realloc_r+0x96>
    ccba:	ldr	r3, [r6, #8]
    ccbc:	str	r3, [r0, #8]
    ccbe:	ldr	r3, [r6, #12]
    ccc0:	str	r3, [r0, #12]
    ccc2:	cmp	r2, #36	; 0x24
    ccc4:	beq.n	cd18 <_realloc_r+0x348>
    ccc6:	add.w	r3, r0, #16
    ccca:	add.w	r2, r6, #16
    ccce:	b.n	ca5a <_realloc_r+0x8a>
    ccd0:	ldr.w	r3, [r0, #-4]
    ccd4:	bic.w	r3, r3, #3
    ccd8:	add	r4, r3
    ccda:	b.n	caf2 <_realloc_r+0x122>
    ccdc:	mov	r1, r6
    ccde:	mov	r0, r7
    cce0:	mov	r4, lr
    cce2:	mov	r8, sl
    cce4:	bl	c864 <memmove>
    cce8:	mov	r6, r7
    ccea:	b.n	caf2 <_realloc_r+0x122>
    ccec:	mov	r2, r7
    ccee:	b.n	cae0 <_realloc_r+0x110>
    ccf0:	mov	r1, r6
    ccf2:	mov	r0, r7
    ccf4:	mov	r4, r3
    ccf6:	mov	r8, sl
    ccf8:	bl	c864 <memmove>
    ccfc:	mov	r6, r7
    ccfe:	b.n	caf2 <_realloc_r+0x122>
    cd00:	ldr	r3, [r6, #8]
    cd02:	str.w	r3, [sl, #16]
    cd06:	ldr	r3, [r6, #12]
    cd08:	str.w	r3, [sl, #20]
    cd0c:	cmp	r2, #36	; 0x24
    cd0e:	beq.n	cd48 <_realloc_r+0x378>
    cd10:	adds	r6, #16
    cd12:	add.w	r3, sl, #24
    cd16:	b.n	cc76 <_realloc_r+0x2a6>
    cd18:	ldr	r3, [r6, #16]
    cd1a:	str	r3, [r0, #16]
    cd1c:	ldr	r3, [r6, #20]
    cd1e:	str	r3, [r0, #20]
    cd20:	add.w	r2, r6, #24
    cd24:	add.w	r3, r0, #24
    cd28:	b.n	ca5a <_realloc_r+0x8a>
    cd2a:	nop
    cd2c:	.word	0x1fff1040
    cd30:	ldr	r1, [r6, #8]
    cd32:	str.w	r1, [sl, #16]
    cd36:	ldr	r1, [r6, #12]
    cd38:	str.w	r1, [sl, #20]
    cd3c:	cmp	r2, #36	; 0x24
    cd3e:	beq.n	cd60 <_realloc_r+0x390>
    cd40:	adds	r6, #16
    cd42:	add.w	r2, sl, #24
    cd46:	b.n	cae0 <_realloc_r+0x110>
    cd48:	ldr	r3, [r6, #16]
    cd4a:	str.w	r3, [sl, #24]
    cd4e:	ldr	r3, [r6, #20]
    cd50:	str.w	r3, [sl, #28]
    cd54:	adds	r6, #24
    cd56:	add.w	r3, sl, #32
    cd5a:	b.n	cc76 <_realloc_r+0x2a6>
    cd5c:	mov	r2, r7
    cd5e:	b.n	cc2a <_realloc_r+0x25a>
    cd60:	ldr	r2, [r6, #16]
    cd62:	str.w	r2, [sl, #24]
    cd66:	ldr	r2, [r6, #20]
    cd68:	str.w	r2, [sl, #28]
    cd6c:	adds	r6, #24
    cd6e:	add.w	r2, sl, #32
    cd72:	b.n	cae0 <_realloc_r+0x110>
    cd74:	mov	r1, r6
    cd76:	mov	r0, r7
    cd78:	str	r3, [sp, #4]
    cd7a:	bl	c864 <memmove>
    cd7e:	ldr	r3, [sp, #4]
    cd80:	b.n	cc36 <_realloc_r+0x266>
    cd82:	ldr	r1, [r6, #8]
    cd84:	str.w	r1, [sl, #16]
    cd88:	ldr	r1, [r6, #12]
    cd8a:	str.w	r1, [sl, #20]
    cd8e:	cmp	r2, #36	; 0x24
    cd90:	beq.n	cd9a <_realloc_r+0x3ca>
    cd92:	adds	r6, #16
    cd94:	add.w	r2, sl, #24
    cd98:	b.n	cc2a <_realloc_r+0x25a>
    cd9a:	ldr	r2, [r6, #16]
    cd9c:	str.w	r2, [sl, #24]
    cda0:	ldr	r2, [r6, #20]
    cda2:	str.w	r2, [sl, #28]
    cda6:	adds	r6, #24
    cda8:	add.w	r2, sl, #32
    cdac:	b.n	cc2a <_realloc_r+0x25a>
    cdae:	nop

0000cdb0 <_sbrk_r>:
    cdb0:	push	{r3, r4, r5, lr}
    cdb2:	ldr	r4, [pc, #28]	; (cdd0 <_sbrk_r+0x20>)
    cdb4:	movs	r3, #0
    cdb6:	mov	r5, r0
    cdb8:	mov	r0, r1
    cdba:	str	r3, [r4, #0]
    cdbc:	bl	9f10 <_sbrk>
    cdc0:	adds	r3, r0, #1
    cdc2:	beq.n	cdc6 <_sbrk_r+0x16>
    cdc4:	pop	{r3, r4, r5, pc}
    cdc6:	ldr	r3, [r4, #0]
    cdc8:	cmp	r3, #0
    cdca:	beq.n	cdc4 <_sbrk_r+0x14>
    cdcc:	str	r3, [r5, #0]
    cdce:	pop	{r3, r4, r5, pc}
    cdd0:	.word	0x1fff8dc4

0000cdd4 <sprintf>:
    cdd4:	push	{r1, r2, r3}
    cdd6:	push	{r4, r5, r6, r7, lr}
    cdd8:	sub	sp, #112	; 0x70
    cdda:	add	r3, sp, #132	; 0x84
    cddc:	ldr	r1, [pc, #60]	; (ce1c <sprintf+0x48>)
    cdde:	ldr.w	r2, [r3], #4
    cde2:	str	r3, [sp, #4]
    cde4:	mov	r5, r0
    cde6:	mvn.w	r4, #2147483648	; 0x80000000
    cdea:	ldr	r0, [r1, #0]
    cdec:	str	r5, [sp, #8]
    cdee:	mov.w	r7, #520	; 0x208
    cdf2:	movw	r6, #65535	; 0xffff
    cdf6:	add	r1, sp, #8
    cdf8:	str	r5, [sp, #24]
    cdfa:	strh.w	r7, [sp, #20]
    cdfe:	str	r4, [sp, #16]
    ce00:	str	r4, [sp, #28]
    ce02:	strh.w	r6, [sp, #22]
    ce06:	bl	d0c0 <_svfprintf_r>
    ce0a:	ldr	r3, [sp, #8]
    ce0c:	movs	r2, #0
    ce0e:	strb	r2, [r3, #0]
    ce10:	add	sp, #112	; 0x70
    ce12:	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    ce16:	add	sp, #12
    ce18:	bx	lr
    ce1a:	nop
    ce1c:	.word	0x1fff0ed0

0000ce20 <strcat>:
    ce20:	lsls	r3, r0, #30
    ce22:	push	{r4, lr}
    ce24:	mov	r4, r0
    ce26:	bne.n	ce4a <strcat+0x2a>
    ce28:	ldr	r2, [r0, #0]
    ce2a:	sub.w	r3, r2, #16843009	; 0x1010101
    ce2e:	bic.w	r3, r3, r2
    ce32:	tst.w	r3, #2155905152	; 0x80808080
    ce36:	bne.n	ce4a <strcat+0x2a>
    ce38:	ldr.w	r2, [r0, #4]!
    ce3c:	sub.w	r3, r2, #16843009	; 0x1010101
    ce40:	bic.w	r3, r3, r2
    ce44:	tst.w	r3, #2155905152	; 0x80808080
    ce48:	beq.n	ce38 <strcat+0x18>
    ce4a:	ldrb	r3, [r0, #0]
    ce4c:	cbz	r3, ce56 <strcat+0x36>
    ce4e:	ldrb.w	r3, [r0, #1]!
    ce52:	cmp	r3, #0
    ce54:	bne.n	ce4e <strcat+0x2e>
    ce56:	bl	ce60 <strcpy>
    ce5a:	mov	r0, r4
    ce5c:	pop	{r4, pc}
    ce5e:	nop

0000ce60 <strcpy>:
    ce60:	eor.w	r2, r0, r1
    ce64:	mov	ip, r0
    ce66:	tst.w	r2, #3
    ce6a:	bne.n	cf0c <strcpy+0xac>
    ce6c:	tst.w	r1, #3
    ce70:	bne.n	ced8 <strcpy+0x78>
    ce72:	str.w	r4, [sp, #-4]!
    ce76:	tst.w	r1, #4
    ce7a:	ldr.w	r3, [r1], #4
    ce7e:	beq.n	ce98 <strcpy+0x38>
    ce80:	sub.w	r2, r3, #16843009	; 0x1010101
    ce84:	bics	r2, r3
    ce86:	tst.w	r2, #2155905152	; 0x80808080
    ce8a:	itt	eq
    ce8c:	streq.w	r3, [ip], #4
    ce90:	ldreq.w	r3, [r1], #4
    ce94:	bne.n	cec4 <strcpy+0x64>
    ce96:	nop
    ce98:	ldr.w	r4, [r1], #4
    ce9c:	sub.w	r2, r3, #16843009	; 0x1010101
    cea0:	bics	r2, r3
    cea2:	tst.w	r2, #2155905152	; 0x80808080
    cea6:	sub.w	r2, r4, #16843009	; 0x1010101
    ceaa:	bne.n	cec4 <strcpy+0x64>
    ceac:	str.w	r3, [ip], #4
    ceb0:	bics	r2, r4
    ceb2:	tst.w	r2, #2155905152	; 0x80808080
    ceb6:	itt	eq
    ceb8:	ldreq.w	r3, [r1], #4
    cebc:	streq.w	r4, [ip], #4
    cec0:	beq.n	ce98 <strcpy+0x38>
    cec2:	mov	r3, r4
    cec4:	strb.w	r3, [ip], #1
    cec8:	tst.w	r3, #255	; 0xff
    cecc:	mov.w	r3, r3, ror #8
    ced0:	bne.n	cec4 <strcpy+0x64>
    ced2:	ldr.w	r4, [sp], #4
    ced6:	bx	lr
    ced8:	tst.w	r1, #1
    cedc:	beq.n	ceec <strcpy+0x8c>
    cede:	ldrb.w	r2, [r1], #1
    cee2:	strb.w	r2, [ip], #1
    cee6:	cmp	r2, #0
    cee8:	it	eq
    ceea:	bxeq	lr
    ceec:	tst.w	r1, #2
    cef0:	beq.n	ce72 <strcpy+0x12>
    cef2:	ldrh.w	r2, [r1], #2
    cef6:	tst.w	r2, #255	; 0xff
    cefa:	itet	ne
    cefc:	strhne.w	r2, [ip], #2
    cf00:	strbeq.w	r2, [ip]
    cf04:	tstne.w	r2, #65280	; 0xff00
    cf08:	bne.n	ce72 <strcpy+0x12>
    cf0a:	bx	lr
    cf0c:	ldrb.w	r2, [r1], #1
    cf10:	strb.w	r2, [ip], #1
    cf14:	cmp	r2, #0
    cf16:	bne.n	cf0c <strcpy+0xac>
    cf18:	bx	lr
    cf1a:	nop
    cf1c:			; <UNDEFINED> instruction: 0xffffffff
    cf20:			; <UNDEFINED> instruction: 0xffffffff
    cf24:			; <UNDEFINED> instruction: 0xffffffff
    cf28:			; <UNDEFINED> instruction: 0xffffffff
    cf2c:			; <UNDEFINED> instruction: 0xffffffff
    cf30:			; <UNDEFINED> instruction: 0xffffffff
    cf34:			; <UNDEFINED> instruction: 0xffffffff
    cf38:			; <UNDEFINED> instruction: 0xffffffff
    cf3c:			; <UNDEFINED> instruction: 0xffffffff

0000cf40 <strlen>:
    cf40:	pld	[r0]
    cf44:	strd	r4, r5, [sp, #-8]!
    cf48:	bic.w	r1, r0, #7
    cf4c:	mvn.w	ip, #0
    cf50:	ands.w	r4, r0, #7
    cf54:	pld	[r1, #32]
    cf58:	bne.w	cfee <strlen+0xae>
    cf5c:	mov.w	r4, #0
    cf60:	mvn.w	r0, #7
    cf64:	ldrd	r2, r3, [r1]
    cf68:	pld	[r1, #64]	; 0x40
    cf6c:	add.w	r0, r0, #8
    cf70:	uadd8	r2, r2, ip
    cf74:	sel	r2, r4, ip
    cf78:	uadd8	r3, r3, ip
    cf7c:	sel	r3, r2, ip
    cf80:	cbnz	r3, cfd6 <strlen+0x96>
    cf82:	ldrd	r2, r3, [r1, #8]
    cf86:	uadd8	r2, r2, ip
    cf8a:	add.w	r0, r0, #8
    cf8e:	sel	r2, r4, ip
    cf92:	uadd8	r3, r3, ip
    cf96:	sel	r3, r2, ip
    cf9a:	cbnz	r3, cfd6 <strlen+0x96>
    cf9c:	ldrd	r2, r3, [r1, #16]
    cfa0:	uadd8	r2, r2, ip
    cfa4:	add.w	r0, r0, #8
    cfa8:	sel	r2, r4, ip
    cfac:	uadd8	r3, r3, ip
    cfb0:	sel	r3, r2, ip
    cfb4:	cbnz	r3, cfd6 <strlen+0x96>
    cfb6:	ldrd	r2, r3, [r1, #24]
    cfba:	add.w	r1, r1, #32
    cfbe:	uadd8	r2, r2, ip
    cfc2:	add.w	r0, r0, #8
    cfc6:	sel	r2, r4, ip
    cfca:	uadd8	r3, r3, ip
    cfce:	sel	r3, r2, ip
    cfd2:	cmp	r3, #0
    cfd4:	beq.n	cf64 <strlen+0x24>
    cfd6:	cmp	r2, #0
    cfd8:	itt	eq
    cfda:	addeq	r0, #4
    cfdc:	moveq	r2, r3
    cfde:	rev	r2, r2
    cfe0:	clz	r2, r2
    cfe4:	ldrd	r4, r5, [sp], #8
    cfe8:	add.w	r0, r0, r2, lsr #3
    cfec:	bx	lr
    cfee:	ldrd	r2, r3, [r1]
    cff2:	and.w	r5, r4, #3
    cff6:	rsb	r0, r4, #0
    cffa:	mov.w	r5, r5, lsl #3
    cffe:	tst.w	r4, #4
    d002:	pld	[r1, #64]	; 0x40
    d006:	lsl.w	r5, ip, r5
    d00a:	orn	r2, r2, r5
    d00e:	itt	ne
    d010:	ornne	r3, r3, r5
    d014:	movne	r2, ip
    d016:	mov.w	r4, #0
    d01a:	b.n	cf70 <strlen+0x30>

0000d01c <strncmp>:
    d01c:	cmp	r2, #0
    d01e:	beq.n	d0a4 <strncmp+0x88>
    d020:	orr.w	r3, r0, r1
    d024:	ands.w	r3, r3, #3
    d028:	push	{r4, r5, r6, r7}
    d02a:	bne.n	d078 <strncmp+0x5c>
    d02c:	cmp	r2, #3
    d02e:	bls.n	d078 <strncmp+0x5c>
    d030:	ldr	r4, [r0, #0]
    d032:	ldr	r5, [r1, #0]
    d034:	cmp	r4, r5
    d036:	bne.n	d078 <strncmp+0x5c>
    d038:	subs	r2, #4
    d03a:	beq.n	d0a8 <strncmp+0x8c>
    d03c:	sub.w	r5, r4, #16843009	; 0x1010101
    d040:	bic.w	r4, r5, r4
    d044:	tst.w	r4, #2155905152	; 0x80808080
    d048:	bne.n	d0ae <strncmp+0x92>
    d04a:	adds	r7, r0, #4
    d04c:	adds	r5, r1, #4
    d04e:	b.n	d06c <strncmp+0x50>
    d050:	ldr.w	r3, [r7], #4
    d054:	ldr	r6, [r1, #0]
    d056:	sub.w	r4, r3, #16843009	; 0x1010101
    d05a:	cmp	r3, r6
    d05c:	bic.w	r4, r4, r3
    d060:	bne.n	d078 <strncmp+0x5c>
    d062:	subs	r2, #4
    d064:	beq.n	d0a8 <strncmp+0x8c>
    d066:	tst.w	r4, #2155905152	; 0x80808080
    d06a:	bne.n	d0b4 <strncmp+0x98>
    d06c:	cmp	r2, #3
    d06e:	mov	r1, r5
    d070:	mov	r0, r7
    d072:	add.w	r5, r5, #4
    d076:	bhi.n	d050 <strncmp+0x34>
    d078:	ldrb	r3, [r0, #0]
    d07a:	ldrb	r4, [r1, #0]
    d07c:	cmp	r4, r3
    d07e:	add.w	r2, r2, #4294967295
    d082:	bne.n	d09e <strncmp+0x82>
    d084:	cbz	r2, d0a8 <strncmp+0x8c>
    d086:	cbnz	r4, d08e <strncmp+0x72>
    d088:	b.n	d0b8 <strncmp+0x9c>
    d08a:	cbz	r2, d0a8 <strncmp+0x8c>
    d08c:	cbz	r3, d0ae <strncmp+0x92>
    d08e:	ldrb.w	r3, [r0, #1]!
    d092:	ldrb.w	r4, [r1, #1]!
    d096:	cmp	r3, r4
    d098:	add.w	r2, r2, #4294967295
    d09c:	beq.n	d08a <strncmp+0x6e>
    d09e:	subs	r0, r3, r4
    d0a0:	pop	{r4, r5, r6, r7}
    d0a2:	bx	lr
    d0a4:	mov	r0, r2
    d0a6:	bx	lr
    d0a8:	mov	r0, r2
    d0aa:	pop	{r4, r5, r6, r7}
    d0ac:	bx	lr
    d0ae:	mov	r0, r3
    d0b0:	pop	{r4, r5, r6, r7}
    d0b2:	bx	lr
    d0b4:	movs	r0, #0
    d0b6:	b.n	d0a0 <strncmp+0x84>
    d0b8:	mov	r0, r4
    d0ba:	b.n	d0a0 <strncmp+0x84>
    d0bc:			; <UNDEFINED> instruction: 0xffffffff

0000d0c0 <_svfprintf_r>:
    d0c0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d0c4:	sub	sp, #260	; 0x104
    d0c6:	mov	r4, r1
    d0c8:	str	r1, [sp, #20]
    d0ca:	mov	r5, r2
    d0cc:	str	r3, [sp, #40]	; 0x28
    d0ce:	str	r0, [sp, #24]
    d0d0:	bl	fb08 <_localeconv_r>
    d0d4:	ldr	r3, [r0, #0]
    d0d6:	str	r3, [sp, #76]	; 0x4c
    d0d8:	mov	r0, r3
    d0da:	bl	cf40 <strlen>
    d0de:	ldrh	r3, [r4, #12]
    d0e0:	str	r0, [sp, #72]	; 0x48
    d0e2:	lsls	r6, r3, #24
    d0e4:	bpl.n	d0ee <_svfprintf_r+0x2e>
    d0e6:	ldr	r3, [r4, #16]
    d0e8:	cmp	r3, #0
    d0ea:	beq.w	e350 <_svfprintf_r+0x1290>
    d0ee:	vldr	d7, [pc, #664]	; d388 <_svfprintf_r+0x2c8>
    d0f2:	movs	r3, #0
    d0f4:	vstr	d7, [sp, #64]	; 0x40
    d0f8:	str	r3, [sp, #56]	; 0x38
    d0fa:	str	r3, [sp, #148]	; 0x94
    d0fc:	str	r3, [sp, #144]	; 0x90
    d0fe:	str	r3, [sp, #84]	; 0x54
    d100:	str	r3, [sp, #28]
    d102:	ldr.w	sl, [pc, #656]	; d394 <_svfprintf_r+0x2d4>
    d106:	add	r3, sp, #192	; 0xc0
    d108:	str	r3, [sp, #140]	; 0x8c
    d10a:	mov	r9, r3
    d10c:	mov	r8, r5
    d10e:	ldrb.w	r3, [r8]
    d112:	mov	r4, r8
    d114:	cbz	r3, d152 <_svfprintf_r+0x92>
    d116:	cmp	r3, #37	; 0x25
    d118:	bne.n	d120 <_svfprintf_r+0x60>
    d11a:	b.n	d152 <_svfprintf_r+0x92>
    d11c:	cmp	r3, #37	; 0x25
    d11e:	beq.n	d128 <_svfprintf_r+0x68>
    d120:	ldrb.w	r3, [r4, #1]!
    d124:	cmp	r3, #0
    d126:	bne.n	d11c <_svfprintf_r+0x5c>
    d128:	rsb	r5, r8, r4
    d12c:	cbz	r5, d152 <_svfprintf_r+0x92>
    d12e:	ldr	r3, [sp, #144]	; 0x90
    d130:	ldr	r2, [sp, #148]	; 0x94
    d132:	str.w	r8, [r9]
    d136:	adds	r3, #1
    d138:	add	r2, r5
    d13a:	cmp	r3, #7
    d13c:	str.w	r5, [r9, #4]
    d140:	str	r2, [sp, #148]	; 0x94
    d142:	str	r3, [sp, #144]	; 0x90
    d144:	bgt.w	d294 <_svfprintf_r+0x1d4>
    d148:	add.w	r9, r9, #8
    d14c:	ldr	r3, [sp, #28]
    d14e:	add	r3, r5
    d150:	str	r3, [sp, #28]
    d152:	ldrb	r3, [r4, #0]
    d154:	cmp	r3, #0
    d156:	beq.w	d2a6 <_svfprintf_r+0x1e6>
    d15a:	movs	r3, #0
    d15c:	mov	r2, r3
    d15e:	strb.w	r3, [sp, #111]	; 0x6f
    d162:	mov	r1, r3
    d164:	str	r3, [sp, #32]
    d166:	str	r3, [sp, #12]
    d168:	mov.w	fp, #4294967295
    d16c:	ldrb	r3, [r4, #1]
    d16e:	add.w	r8, r4, #1
    d172:	mov	r5, fp
    d174:	add.w	r8, r8, #1
    d178:	sub.w	r0, r3, #32
    d17c:	cmp	r0, #88	; 0x58
    d17e:	bhi.w	d9ea <_svfprintf_r+0x92a>
    d182:	tbh	[pc, r0, lsl #1]
    d186:	.short	0x03a0
    d188:	.word	0x04320432
    d18c:	.word	0x043203a8
    d190:	.word	0x04320432
    d194:	.word	0x04320432
    d198:	.word	0x03af0432
    d19c:	.word	0x043203bd
    d1a0:	.word	0x00e2005d
    d1a4:	.word	0x01090432
    d1a8:	.word	0x01100110
    d1ac:	.word	0x01100110
    d1b0:	.word	0x01100110
    d1b4:	.word	0x01100110
    d1b8:	.word	0x04320110
    d1bc:	.word	0x04320432
    d1c0:	.word	0x04320432
    d1c4:	.word	0x04320432
    d1c8:	.word	0x04320432
    d1cc:	.word	0x01200432
    d1d0:	.word	0x04320286
    d1d4:	.word	0x04320286
    d1d8:	.word	0x04320432
    d1dc:	.word	0x02d40432
    d1e0:	.word	0x04320432
    d1e4:	.word	0x043202e5
    d1e8:	.word	0x04320432
    d1ec:	.word	0x04320432
    d1f0:	.word	0x0432030f
    d1f4:	.word	0x033d0432
    d1f8:	.word	0x04320432
    d1fc:	.word	0x04320432
    d200:	.word	0x04320432
    d204:	.word	0x04320432
    d208:	.word	0x04320432
    d20c:	.word	0x0391037e
    d210:	.word	0x02860286
    d214:	.word	0x03990286
    d218:	.word	0x04320391
    d21c:	.word	0x04070432
    d220:	.word	0x04120432
    d224:	.word	0x006400a3
    d228:	.word	0x043203c2
    d22c:	.word	0x043203c9
    d230:	.word	0x043203ea
    d234:	.word	0x03f20432
    d238:	ldr	r0, [sp, #32]
    d23a:	str	r3, [sp, #40]	; 0x28
    d23c:	negs	r0, r0
    d23e:	str	r0, [sp, #32]
    d240:	ldr	r3, [sp, #12]
    d242:	orr.w	r3, r3, #4
    d246:	str	r3, [sp, #12]
    d248:	ldrb.w	r3, [r8]
    d24c:	b.n	d174 <_svfprintf_r+0xb4>
    d24e:	ldr	r0, [sp, #40]	; 0x28
    d250:	mov	fp, r5
    d252:	movs	r1, #0
    d254:	ldr	r4, [r0, #0]
    d256:	strb.w	r1, [sp, #111]	; 0x6f
    d25a:	adds	r7, r0, #4
    d25c:	ldr	r0, [sp, #12]
    d25e:	movs	r3, #48	; 0x30
    d260:	movs	r2, #120	; 0x78
    d262:	cmp	fp, r1
    d264:	strb.w	r3, [sp, #112]	; 0x70
    d268:	mov.w	r5, #0
    d26c:	strb.w	r2, [sp, #113]	; 0x71
    d270:	orr.w	r3, r0, #2
    d274:	blt.w	da24 <_svfprintf_r+0x964>
    d278:	bic.w	r3, r0, #128	; 0x80
    d27c:	orr.w	r3, r3, #2
    d280:	str	r3, [sp, #12]
    d282:	orrs.w	r3, r4, r5
    d286:	str	r7, [sp, #40]	; 0x28
    d288:	beq.w	d9d0 <_svfprintf_r+0x910>
    d28c:	mov	r7, r1
    d28e:	str	r2, [sp, #52]	; 0x34
    d290:	ldr	r0, [pc, #252]	; (d390 <_svfprintf_r+0x2d0>)
    d292:	b.n	d862 <_svfprintf_r+0x7a2>
    d294:	add	r2, sp, #140	; 0x8c
    d296:	ldr	r1, [sp, #20]
    d298:	ldr	r0, [sp, #24]
    d29a:	bl	10148 <__ssprint_r>
    d29e:	cbnz	r0, d2b4 <_svfprintf_r+0x1f4>
    d2a0:	add.w	r9, sp, #192	; 0xc0
    d2a4:	b.n	d14c <_svfprintf_r+0x8c>
    d2a6:	ldr	r3, [sp, #148]	; 0x94
    d2a8:	cbz	r3, d2b4 <_svfprintf_r+0x1f4>
    d2aa:	ldr	r0, [sp, #24]
    d2ac:	ldr	r1, [sp, #20]
    d2ae:	add	r2, sp, #140	; 0x8c
    d2b0:	bl	10148 <__ssprint_r>
    d2b4:	ldr	r3, [sp, #20]
    d2b6:	ldrh	r3, [r3, #12]
    d2b8:	tst.w	r3, #64	; 0x40
    d2bc:	ldr	r3, [sp, #28]
    d2be:	it	ne
    d2c0:	movne.w	r3, #4294967295
    d2c4:	mov	r0, r3
    d2c6:	add	sp, #260	; 0x104
    d2c8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d2cc:	str	r3, [sp, #52]	; 0x34
    d2ce:	mov	fp, r5
    d2d0:	cmp	r2, #0
    d2d2:	bne.w	e73c <_svfprintf_r+0x167c>
    d2d6:	ldr	r2, [sp, #12]
    d2d8:	ands.w	r3, r2, #32
    d2dc:	beq.w	d76c <_svfprintf_r+0x6ac>
    d2e0:	ldr	r7, [sp, #40]	; 0x28
    d2e2:	adds	r7, #7
    d2e4:	bic.w	r3, r7, #7
    d2e8:	movs	r7, #0
    d2ea:	add.w	r1, r3, #8
    d2ee:	cmp	fp, r7
    d2f0:	str	r1, [sp, #40]	; 0x28
    d2f2:	ldrd	r4, r5, [r3]
    d2f6:	strb.w	r7, [sp, #111]	; 0x6f
    d2fa:	blt.w	e1c2 <_svfprintf_r+0x1102>
    d2fe:	bic.w	r3, r2, #128	; 0x80
    d302:	str	r3, [sp, #12]
    d304:	orrs.w	r3, r4, r5
    d308:	beq.w	da14 <_svfprintf_r+0x954>
    d30c:	add	r6, sp, #192	; 0xc0
    d30e:	lsrs	r2, r4, #3
    d310:	orr.w	r2, r2, r5, lsl #29
    d314:	lsrs	r1, r5, #3
    d316:	and.w	r3, r4, #7
    d31a:	mov	r5, r1
    d31c:	mov	r4, r2
    d31e:	adds	r3, #48	; 0x30
    d320:	orrs.w	r2, r4, r5
    d324:	strb.w	r3, [r6, #-1]!
    d328:	bne.n	d30e <_svfprintf_r+0x24e>
    d32a:	ldr	r2, [sp, #12]
    d32c:	lsls	r1, r2, #31
    d32e:	bpl.w	d450 <_svfprintf_r+0x390>
    d332:	cmp	r3, #48	; 0x30
    d334:	beq.w	d450 <_svfprintf_r+0x390>
    d338:	movs	r2, #48	; 0x30
    d33a:	subs	r3, r6, #1
    d33c:	strb.w	r2, [r6, #-1]
    d340:	add	r2, sp, #192	; 0xc0
    d342:	subs	r2, r2, r3
    d344:	str	r2, [sp, #36]	; 0x24
    d346:	mov	r6, r3
    d348:	b.n	d456 <_svfprintf_r+0x396>
    d34a:	ldrb.w	r3, [r8]
    d34e:	cmp	r3, #42	; 0x2a
    d350:	add.w	r4, r8, #1
    d354:	beq.w	e720 <_svfprintf_r+0x1660>
    d358:	sub.w	r0, r3, #48	; 0x30
    d35c:	cmp	r0, #9
    d35e:	it	ls
    d360:	movls	r5, #0
    d362:	bhi.w	e672 <_svfprintf_r+0x15b2>
    d366:	ldrb.w	r3, [r4], #1
    d36a:	add.w	r5, r5, r5, lsl #2
    d36e:	add.w	r5, r0, r5, lsl #1
    d372:	sub.w	r0, r3, #48	; 0x30
    d376:	cmp	r0, #9
    d378:	bls.n	d366 <_svfprintf_r+0x2a6>
    d37a:	orr.w	r5, r5, r5, asr #31
    d37e:	mov	r8, r4
    d380:	b.n	d178 <_svfprintf_r+0xb8>
    d382:	nop
    d384:	nop.w
	...
    d390:	.word	0x00010a58
    d394:	.word	0x00010a24
    d398:	ldr	r3, [sp, #12]
    d39a:	orr.w	r3, r3, #128	; 0x80
    d39e:	str	r3, [sp, #12]
    d3a0:	ldrb.w	r3, [r8]
    d3a4:	b.n	d174 <_svfprintf_r+0xb4>
    d3a6:	sub.w	r0, r3, #48	; 0x30
    d3aa:	movs	r3, #0
    d3ac:	mov	r4, r3
    d3ae:	ldrb.w	r3, [r8], #1
    d3b2:	add.w	r4, r4, r4, lsl #2
    d3b6:	add.w	r4, r0, r4, lsl #1
    d3ba:	sub.w	r0, r3, #48	; 0x30
    d3be:	cmp	r0, #9
    d3c0:	bls.n	d3ae <_svfprintf_r+0x2ee>
    d3c2:	str	r4, [sp, #32]
    d3c4:	b.n	d178 <_svfprintf_r+0xb8>
    d3c6:	str	r3, [sp, #52]	; 0x34
    d3c8:	mov	fp, r5
    d3ca:	cmp	r2, #0
    d3cc:	bne.w	e758 <_svfprintf_r+0x1698>
    d3d0:	ldr	r3, [sp, #12]
    d3d2:	orr.w	r3, r3, #16
    d3d6:	str	r3, [sp, #12]
    d3d8:	ldr	r3, [sp, #12]
    d3da:	lsls	r4, r3, #26
    d3dc:	bpl.w	de4e <_svfprintf_r+0xd8e>
    d3e0:	ldr	r7, [sp, #40]	; 0x28
    d3e2:	adds	r7, #7
    d3e4:	bic.w	r7, r7, #7
    d3e8:	ldrd	r2, r3, [r7]
    d3ec:	add.w	r1, r7, #8
    d3f0:	str	r1, [sp, #40]	; 0x28
    d3f2:	mov	r4, r2
    d3f4:	mov	r5, r3
    d3f6:	cmp	r2, #0
    d3f8:	sbcs.w	r3, r3, #0
    d3fc:	blt.w	dec4 <_svfprintf_r+0xe04>
    d400:	cmp.w	fp, #0
    d404:	ldrb.w	r7, [sp, #111]	; 0x6f
    d408:	blt.w	de8a <_svfprintf_r+0xdca>
    d40c:	ldr	r3, [sp, #12]
    d40e:	bic.w	r3, r3, #128	; 0x80
    d412:	str	r3, [sp, #12]
    d414:	orrs.w	r3, r4, r5
    d418:	beq.w	d7ec <_svfprintf_r+0x72c>
    d41c:	cmp	r5, #0
    d41e:	it	eq
    d420:	cmpeq	r4, #10
    d422:	bcc.w	d7f6 <_svfprintf_r+0x736>
    d426:	add	r6, sp, #192	; 0xc0
    d428:	mov	r0, r4
    d42a:	mov	r1, r5
    d42c:	movs	r2, #10
    d42e:	movs	r3, #0
    d430:	bl	be1c <__aeabi_uldivmod>
    d434:	adds	r2, #48	; 0x30
    d436:	strb.w	r2, [r6, #-1]!
    d43a:	mov	r0, r4
    d43c:	mov	r1, r5
    d43e:	movs	r3, #0
    d440:	movs	r2, #10
    d442:	bl	be1c <__aeabi_uldivmod>
    d446:	mov	r4, r0
    d448:	mov	r5, r1
    d44a:	orrs.w	r3, r4, r5
    d44e:	bne.n	d428 <_svfprintf_r+0x368>
    d450:	add	r3, sp, #192	; 0xc0
    d452:	subs	r3, r3, r6
    d454:	str	r3, [sp, #36]	; 0x24
    d456:	ldr	r3, [sp, #36]	; 0x24
    d458:	cmp	r3, fp
    d45a:	it	lt
    d45c:	movlt	r3, fp
    d45e:	str	r3, [sp, #16]
    d460:	movs	r3, #0
    d462:	str	r3, [sp, #60]	; 0x3c
    d464:	cbz	r7, d46c <_svfprintf_r+0x3ac>
    d466:	ldr	r3, [sp, #16]
    d468:	adds	r3, #1
    d46a:	str	r3, [sp, #16]
    d46c:	ldr	r3, [sp, #12]
    d46e:	ands.w	r3, r3, #2
    d472:	str	r3, [sp, #44]	; 0x2c
    d474:	beq.n	d47c <_svfprintf_r+0x3bc>
    d476:	ldr	r3, [sp, #16]
    d478:	adds	r3, #2
    d47a:	str	r3, [sp, #16]
    d47c:	ldr	r3, [sp, #12]
    d47e:	ands.w	r3, r3, #132	; 0x84
    d482:	str	r3, [sp, #48]	; 0x30
    d484:	bne.w	da3e <_svfprintf_r+0x97e>
    d488:	ldr	r3, [sp, #32]
    d48a:	ldr	r2, [sp, #16]
    d48c:	subs	r5, r3, r2
    d48e:	cmp	r5, #0
    d490:	ble.w	da3e <_svfprintf_r+0x97e>
    d494:	cmp	r5, #16
    d496:	ldr	r1, [sp, #148]	; 0x94
    d498:	ldr	r2, [sp, #144]	; 0x90
    d49a:	ldr	r7, [pc, #672]	; (d73c <_svfprintf_r+0x67c>)
    d49c:	ble.n	d4ee <_svfprintf_r+0x42e>
    d49e:	str	r6, [sp, #80]	; 0x50
    d4a0:	mov	r0, r9
    d4a2:	movs	r4, #16
    d4a4:	mov	r9, r7
    d4a6:	ldr	r6, [sp, #20]
    d4a8:	mov	r7, r5
    d4aa:	ldr	r5, [sp, #24]
    d4ac:	b.n	d4b8 <_svfprintf_r+0x3f8>
    d4ae:	subs	r7, #16
    d4b0:	cmp	r7, #16
    d4b2:	add.w	r0, r0, #8
    d4b6:	ble.n	d4e6 <_svfprintf_r+0x426>
    d4b8:	adds	r2, #1
    d4ba:	ldr	r3, [pc, #640]	; (d73c <_svfprintf_r+0x67c>)
    d4bc:	str	r2, [sp, #144]	; 0x90
    d4be:	adds	r1, #16
    d4c0:	cmp	r2, #7
    d4c2:	str	r1, [sp, #148]	; 0x94
    d4c4:	stmia.w	r0, {r3, r4}
    d4c8:	ble.n	d4ae <_svfprintf_r+0x3ee>
    d4ca:	add	r2, sp, #140	; 0x8c
    d4cc:	mov	r1, r6
    d4ce:	mov	r0, r5
    d4d0:	bl	10148 <__ssprint_r>
    d4d4:	cmp	r0, #0
    d4d6:	bne.w	d2b4 <_svfprintf_r+0x1f4>
    d4da:	subs	r7, #16
    d4dc:	cmp	r7, #16
    d4de:	ldr	r1, [sp, #148]	; 0x94
    d4e0:	ldr	r2, [sp, #144]	; 0x90
    d4e2:	add	r0, sp, #192	; 0xc0
    d4e4:	bgt.n	d4b8 <_svfprintf_r+0x3f8>
    d4e6:	ldr	r6, [sp, #80]	; 0x50
    d4e8:	mov	r5, r7
    d4ea:	mov	r7, r9
    d4ec:	mov	r9, r0
    d4ee:	adds	r2, #1
    d4f0:	adds	r4, r5, r1
    d4f2:	cmp	r2, #7
    d4f4:	str	r4, [sp, #148]	; 0x94
    d4f6:	str	r2, [sp, #144]	; 0x90
    d4f8:	str.w	r7, [r9]
    d4fc:	str.w	r5, [r9, #4]
    d500:	bgt.w	dd5e <_svfprintf_r+0xc9e>
    d504:	ldrb.w	r7, [sp, #111]	; 0x6f
    d508:	add.w	r9, r9, #8
    d50c:	cbz	r7, d52c <_svfprintf_r+0x46c>
    d50e:	ldr	r3, [sp, #144]	; 0x90
    d510:	adds	r3, #1
    d512:	adds	r4, #1
    d514:	add.w	r1, sp, #111	; 0x6f
    d518:	movs	r2, #1
    d51a:	cmp	r3, #7
    d51c:	str	r4, [sp, #148]	; 0x94
    d51e:	str	r3, [sp, #144]	; 0x90
    d520:	stmia.w	r9, {r1, r2}
    d524:	bgt.w	dc72 <_svfprintf_r+0xbb2>
    d528:	add.w	r9, r9, #8
    d52c:	ldr	r3, [sp, #44]	; 0x2c
    d52e:	cbz	r3, d54c <_svfprintf_r+0x48c>
    d530:	ldr	r3, [sp, #144]	; 0x90
    d532:	adds	r3, #1
    d534:	adds	r4, #2
    d536:	add	r1, sp, #112	; 0x70
    d538:	movs	r2, #2
    d53a:	cmp	r3, #7
    d53c:	str	r4, [sp, #148]	; 0x94
    d53e:	str	r3, [sp, #144]	; 0x90
    d540:	stmia.w	r9, {r1, r2}
    d544:	bgt.w	dc8a <_svfprintf_r+0xbca>
    d548:	add.w	r9, r9, #8
    d54c:	ldr	r3, [sp, #48]	; 0x30
    d54e:	cmp	r3, #128	; 0x80
    d550:	beq.w	db16 <_svfprintf_r+0xa56>
    d554:	ldr	r3, [sp, #36]	; 0x24
    d556:	rsb	r7, r3, fp
    d55a:	cmp	r7, #0
    d55c:	ble.n	d5c6 <_svfprintf_r+0x506>
    d55e:	ldr	r2, [pc, #480]	; (d740 <_svfprintf_r+0x680>)
    d560:	ldr	r3, [sp, #144]	; 0x90
    d562:	str	r2, [sp, #44]	; 0x2c
    d564:	cmp	r7, #16
    d566:	ble.n	d5ae <_svfprintf_r+0x4ee>
    d568:	mov	r2, r4
    d56a:	mov.w	fp, #16
    d56e:	ldr	r5, [sp, #24]
    d570:	ldr	r4, [sp, #20]
    d572:	b.n	d57e <_svfprintf_r+0x4be>
    d574:	subs	r7, #16
    d576:	cmp	r7, #16
    d578:	add.w	r9, r9, #8
    d57c:	ble.n	d5ac <_svfprintf_r+0x4ec>
    d57e:	adds	r3, #1
    d580:	adds	r2, #16
    d582:	cmp	r3, #7
    d584:	str	r2, [sp, #148]	; 0x94
    d586:	str	r3, [sp, #144]	; 0x90
    d588:	stmia.w	r9, {sl, fp}
    d58c:	ble.n	d574 <_svfprintf_r+0x4b4>
    d58e:	add	r2, sp, #140	; 0x8c
    d590:	mov	r1, r4
    d592:	mov	r0, r5
    d594:	bl	10148 <__ssprint_r>
    d598:	cmp	r0, #0
    d59a:	bne.w	d2b4 <_svfprintf_r+0x1f4>
    d59e:	subs	r7, #16
    d5a0:	cmp	r7, #16
    d5a2:	ldr	r2, [sp, #148]	; 0x94
    d5a4:	ldr	r3, [sp, #144]	; 0x90
    d5a6:	add.w	r9, sp, #192	; 0xc0
    d5aa:	bgt.n	d57e <_svfprintf_r+0x4be>
    d5ac:	mov	r4, r2
    d5ae:	adds	r3, #1
    d5b0:	ldr	r2, [sp, #44]	; 0x2c
    d5b2:	str	r3, [sp, #144]	; 0x90
    d5b4:	add	r4, r7
    d5b6:	cmp	r3, #7
    d5b8:	str	r4, [sp, #148]	; 0x94
    d5ba:	stmia.w	r9, {r2, r7}
    d5be:	bgt.w	dc5a <_svfprintf_r+0xb9a>
    d5c2:	add.w	r9, r9, #8
    d5c6:	ldr	r3, [sp, #12]
    d5c8:	lsls	r2, r3, #23
    d5ca:	bmi.w	da42 <_svfprintf_r+0x982>
    d5ce:	ldr	r3, [sp, #144]	; 0x90
    d5d0:	ldr	r1, [sp, #36]	; 0x24
    d5d2:	str.w	r6, [r9]
    d5d6:	adds	r3, #1
    d5d8:	add	r4, r1
    d5da:	cmp	r3, #7
    d5dc:	str	r4, [sp, #148]	; 0x94
    d5de:	str.w	r1, [r9, #4]
    d5e2:	str	r3, [sp, #144]	; 0x90
    d5e4:	bgt.w	dc2e <_svfprintf_r+0xb6e>
    d5e8:	add.w	r9, r9, #8
    d5ec:	ldr	r3, [sp, #12]
    d5ee:	lsls	r1, r3, #29
    d5f0:	bpl.n	d672 <_svfprintf_r+0x5b2>
    d5f2:	ldr	r3, [sp, #32]
    d5f4:	ldr	r2, [sp, #16]
    d5f6:	subs	r5, r3, r2
    d5f8:	cmp	r5, #0
    d5fa:	ble.n	d672 <_svfprintf_r+0x5b2>
    d5fc:	cmp	r5, #16
    d5fe:	ldr	r3, [sp, #144]	; 0x90
    d600:	ldr	r7, [pc, #312]	; (d73c <_svfprintf_r+0x67c>)
    d602:	ble.n	d64c <_svfprintf_r+0x58c>
    d604:	mov	r2, r4
    d606:	movs	r6, #16
    d608:	ldr.w	fp, [sp, #24]
    d60c:	ldr	r4, [sp, #20]
    d60e:	b.n	d61a <_svfprintf_r+0x55a>
    d610:	subs	r5, #16
    d612:	cmp	r5, #16
    d614:	add.w	r9, r9, #8
    d618:	ble.n	d64a <_svfprintf_r+0x58a>
    d61a:	adds	r3, #1
    d61c:	ldr	r1, [pc, #284]	; (d73c <_svfprintf_r+0x67c>)
    d61e:	str	r3, [sp, #144]	; 0x90
    d620:	adds	r2, #16
    d622:	cmp	r3, #7
    d624:	str	r2, [sp, #148]	; 0x94
    d626:	stmia.w	r9, {r1, r6}
    d62a:	ble.n	d610 <_svfprintf_r+0x550>
    d62c:	add	r2, sp, #140	; 0x8c
    d62e:	mov	r1, r4
    d630:	mov	r0, fp
    d632:	bl	10148 <__ssprint_r>
    d636:	cmp	r0, #0
    d638:	bne.w	d2b4 <_svfprintf_r+0x1f4>
    d63c:	subs	r5, #16
    d63e:	cmp	r5, #16
    d640:	ldr	r2, [sp, #148]	; 0x94
    d642:	ldr	r3, [sp, #144]	; 0x90
    d644:	add.w	r9, sp, #192	; 0xc0
    d648:	bgt.n	d61a <_svfprintf_r+0x55a>
    d64a:	mov	r4, r2
    d64c:	adds	r3, #1
    d64e:	add	r4, r5
    d650:	cmp	r3, #7
    d652:	str	r4, [sp, #148]	; 0x94
    d654:	str	r3, [sp, #144]	; 0x90
    d656:	str.w	r7, [r9]
    d65a:	str.w	r5, [r9, #4]
    d65e:	ble.n	d672 <_svfprintf_r+0x5b2>
    d660:	add	r2, sp, #140	; 0x8c
    d662:	ldr	r1, [sp, #20]
    d664:	ldr	r0, [sp, #24]
    d666:	bl	10148 <__ssprint_r>
    d66a:	cmp	r0, #0
    d66c:	bne.w	d2b4 <_svfprintf_r+0x1f4>
    d670:	ldr	r4, [sp, #148]	; 0x94
    d672:	ldr	r3, [sp, #28]
    d674:	ldr	r2, [sp, #32]
    d676:	ldr	r1, [sp, #16]
    d678:	cmp	r2, r1
    d67a:	ite	ge
    d67c:	addge	r3, r3, r2
    d67e:	addlt	r3, r3, r1
    d680:	str	r3, [sp, #28]
    d682:	cmp	r4, #0
    d684:	bne.w	dc46 <_svfprintf_r+0xb86>
    d688:	movs	r3, #0
    d68a:	str	r3, [sp, #144]	; 0x90
    d68c:	add.w	r9, sp, #192	; 0xc0
    d690:	b.n	d10e <_svfprintf_r+0x4e>
    d692:	str	r3, [sp, #52]	; 0x34
    d694:	mov	fp, r5
    d696:	cmp	r2, #0
    d698:	bne.w	e760 <_svfprintf_r+0x16a0>
    d69c:	ldr	r3, [sp, #12]
    d69e:	ldr	r7, [sp, #40]	; 0x28
    d6a0:	lsls	r2, r3, #28
    d6a2:	add.w	r7, r7, #7
    d6a6:	bpl.w	e192 <_svfprintf_r+0x10d2>
    d6aa:	bic.w	r3, r7, #7
    d6ae:	vldr	d7, [r3]
    d6b2:	vstr	d7, [sp, #64]	; 0x40
    d6b6:	add.w	r2, r3, #8
    d6ba:	str	r2, [sp, #40]	; 0x28
    d6bc:	ldrd	r1, r2, [sp, #64]	; 0x40
    d6c0:	bic.w	r3, r2, #2147483648	; 0x80000000
    d6c4:	str	r1, [sp, #88]	; 0x58
    d6c6:	str	r3, [sp, #92]	; 0x5c
    d6c8:	ldrd	r4, r5, [sp, #88]	; 0x58
    d6cc:	mov.w	r2, #4294967295
    d6d0:	mov	r0, r4
    d6d2:	mov	r1, r5
    d6d4:	ldr	r3, [pc, #108]	; (d744 <_svfprintf_r+0x684>)
    d6d6:	bl	bda0 <__aeabi_dcmpun>
    d6da:	cmp	r0, #0
    d6dc:	bne.w	e094 <_svfprintf_r+0xfd4>
    d6e0:	mov.w	r2, #4294967295
    d6e4:	ldr	r3, [pc, #92]	; (d744 <_svfprintf_r+0x684>)
    d6e6:	mov	r0, r4
    d6e8:	mov	r1, r5
    d6ea:	bl	bd64 <__aeabi_dcmple>
    d6ee:	cmp	r0, #0
    d6f0:	bne.w	e094 <_svfprintf_r+0xfd4>
    d6f4:	movs	r2, #0
    d6f6:	movs	r3, #0
    d6f8:	ldrd	r0, r1, [sp, #64]	; 0x40
    d6fc:	bl	bd50 <__aeabi_dcmplt>
    d700:	cmp	r0, #0
    d702:	bne.w	e5aa <_svfprintf_r+0x14ea>
    d706:	ldrb.w	r7, [sp, #111]	; 0x6f
    d70a:	ldr	r6, [pc, #60]	; (d748 <_svfprintf_r+0x688>)
    d70c:	ldr	r3, [pc, #60]	; (d74c <_svfprintf_r+0x68c>)
    d70e:	ldr	r1, [sp, #12]
    d710:	bic.w	r1, r1, #128	; 0x80
    d714:	str	r1, [sp, #12]
    d716:	ldr	r1, [sp, #52]	; 0x34
    d718:	movs	r2, #3
    d71a:	mov.w	fp, #0
    d71e:	str	r2, [sp, #16]
    d720:	cmp	r1, #71	; 0x47
    d722:	it	le
    d724:	movle	r6, r3
    d726:	str	r2, [sp, #36]	; 0x24
    d728:	str.w	fp, [sp, #60]	; 0x3c
    d72c:	b.n	d464 <_svfprintf_r+0x3a4>
    d72e:	ldr	r3, [sp, #12]
    d730:	orr.w	r3, r3, #8
    d734:	str	r3, [sp, #12]
    d736:	ldrb.w	r3, [r8]
    d73a:	b.n	d174 <_svfprintf_r+0xb4>
    d73c:	.word	0x00010a78
    d740:	.word	0x00010a24
    d744:	.word	0x7fefffff
    d748:	.word	0x00010a38
    d74c:	.word	0x00010a34
    d750:	str	r3, [sp, #52]	; 0x34
    d752:	mov	fp, r5
    d754:	cmp	r2, #0
    d756:	bne.w	e778 <_svfprintf_r+0x16b8>
    d75a:	ldr	r3, [sp, #12]
    d75c:	orr.w	r3, r3, #16
    d760:	str	r3, [sp, #12]
    d762:	ldr	r2, [sp, #12]
    d764:	ands.w	r3, r2, #32
    d768:	bne.w	d2e0 <_svfprintf_r+0x220>
    d76c:	ldr	r1, [sp, #12]
    d76e:	ands.w	r2, r1, #16
    d772:	beq.w	e02c <_svfprintf_r+0xf6c>
    d776:	ldr	r0, [sp, #40]	; 0x28
    d778:	strb.w	r3, [sp, #111]	; 0x6f
    d77c:	cmp.w	fp, #0
    d780:	ldr	r4, [r0, #0]
    d782:	add.w	r7, r0, #4
    d786:	mov.w	r5, #0
    d78a:	blt.w	e1c0 <_svfprintf_r+0x1100>
    d78e:	mov	r2, r1
    d790:	bic.w	r2, r2, #128	; 0x80
    d794:	str	r2, [sp, #12]
    d796:	orrs.w	r2, r4, r5
    d79a:	str	r7, [sp, #40]	; 0x28
    d79c:	beq.w	da14 <_svfprintf_r+0x954>
    d7a0:	mov	r7, r3
    d7a2:	b.n	d30c <_svfprintf_r+0x24c>
    d7a4:	str	r3, [sp, #52]	; 0x34
    d7a6:	mov	fp, r5
    d7a8:	cmp	r2, #0
    d7aa:	bne.w	e770 <_svfprintf_r+0x16b0>
    d7ae:	ldr	r3, [sp, #12]
    d7b0:	orr.w	r3, r3, #16
    d7b4:	str	r3, [sp, #12]
    d7b6:	ldr	r2, [sp, #12]
    d7b8:	ands.w	r3, r2, #32
    d7bc:	beq.w	de18 <_svfprintf_r+0xd58>
    d7c0:	ldr	r7, [sp, #40]	; 0x28
    d7c2:	adds	r7, #7
    d7c4:	bic.w	r3, r7, #7
    d7c8:	movs	r7, #0
    d7ca:	add.w	r1, r3, #8
    d7ce:	cmp	fp, r7
    d7d0:	str	r1, [sp, #40]	; 0x28
    d7d2:	ldrd	r4, r5, [r3]
    d7d6:	strb.w	r7, [sp, #111]	; 0x6f
    d7da:	blt.w	de8a <_svfprintf_r+0xdca>
    d7de:	bic.w	r3, r2, #128	; 0x80
    d7e2:	str	r3, [sp, #12]
    d7e4:	orrs.w	r3, r4, r5
    d7e8:	bne.w	d41c <_svfprintf_r+0x35c>
    d7ec:	cmp.w	fp, #0
    d7f0:	beq.w	d9de <_svfprintf_r+0x91e>
    d7f4:	movs	r4, #0
    d7f6:	add	r6, sp, #256	; 0x100
    d7f8:	adds	r4, #48	; 0x30
    d7fa:	strb.w	r4, [r6, #-65]!
    d7fe:	b.n	d450 <_svfprintf_r+0x390>
    d800:	str	r3, [sp, #52]	; 0x34
    d802:	mov	fp, r5
    d804:	cmp	r2, #0
    d806:	bne.w	e768 <_svfprintf_r+0x16a8>
    d80a:	ldr	r3, [sp, #12]
    d80c:	ldr	r0, [pc, #700]	; (dacc <_svfprintf_r+0xa0c>)
    d80e:	lsls	r5, r3, #26
    d810:	bpl.w	d97e <_svfprintf_r+0x8be>
    d814:	ldr	r7, [sp, #40]	; 0x28
    d816:	adds	r7, #7
    d818:	bic.w	r3, r7, #7
    d81c:	ldrd	r4, r5, [r3]
    d820:	add.w	r2, r3, #8
    d824:	str	r2, [sp, #40]	; 0x28
    d826:	ldr	r2, [sp, #12]
    d828:	ands.w	r7, r2, #1
    d82c:	beq.w	dca2 <_svfprintf_r+0xbe2>
    d830:	orrs.w	r3, r4, r5
    d834:	beq.w	e23c <_svfprintf_r+0x117c>
    d838:	ldrb.w	r2, [sp, #52]	; 0x34
    d83c:	strb.w	r2, [sp, #113]	; 0x71
    d840:	movs	r7, #0
    d842:	ldr	r2, [sp, #12]
    d844:	strb.w	r7, [sp, #111]	; 0x6f
    d848:	movs	r3, #48	; 0x30
    d84a:	cmp	fp, r7
    d84c:	strb.w	r3, [sp, #112]	; 0x70
    d850:	orr.w	r3, r2, #2
    d854:	blt.w	e5b4 <_svfprintf_r+0x14f4>
    d858:	bic.w	r3, r2, #128	; 0x80
    d85c:	orr.w	r3, r3, #2
    d860:	str	r3, [sp, #12]
    d862:	add	r6, sp, #192	; 0xc0
    d864:	lsrs	r3, r4, #4
    d866:	and.w	r1, r4, #15
    d86a:	orr.w	r3, r3, r5, lsl #28
    d86e:	lsrs	r2, r5, #4
    d870:	mov	r4, r3
    d872:	mov	r5, r2
    d874:	ldrb	r3, [r0, r1]
    d876:	strb.w	r3, [r6, #-1]!
    d87a:	orrs.w	r3, r4, r5
    d87e:	bne.n	d864 <_svfprintf_r+0x7a4>
    d880:	b.n	d450 <_svfprintf_r+0x390>
    d882:	ldr	r1, [sp, #40]	; 0x28
    d884:	str	r3, [sp, #52]	; 0x34
    d886:	ldr	r2, [r1, #0]
    d888:	strb.w	r2, [sp, #152]	; 0x98
    d88c:	movs	r3, #0
    d88e:	mov	r2, r1
    d890:	mov	r7, r3
    d892:	strb.w	r3, [sp, #111]	; 0x6f
    d896:	adds	r2, #4
    d898:	movs	r3, #1
    d89a:	str	r3, [sp, #16]
    d89c:	mov	fp, r7
    d89e:	str	r7, [sp, #60]	; 0x3c
    d8a0:	str	r2, [sp, #40]	; 0x28
    d8a2:	str	r3, [sp, #36]	; 0x24
    d8a4:	add	r6, sp, #152	; 0x98
    d8a6:	b.n	d46c <_svfprintf_r+0x3ac>
    d8a8:	str	r3, [sp, #52]	; 0x34
    d8aa:	mov	fp, r5
    d8ac:	cmp	r2, #0
    d8ae:	beq.w	d3d8 <_svfprintf_r+0x318>
    d8b2:	strb.w	r1, [sp, #111]	; 0x6f
    d8b6:	b.n	d3d8 <_svfprintf_r+0x318>
    d8b8:	ldr	r3, [sp, #12]
    d8ba:	orr.w	r3, r3, #64	; 0x40
    d8be:	str	r3, [sp, #12]
    d8c0:	ldrb.w	r3, [r8]
    d8c4:	b.n	d174 <_svfprintf_r+0xb4>
    d8c6:	ldrb.w	r3, [r8]
    d8ca:	cmp	r1, #0
    d8cc:	bne.w	d174 <_svfprintf_r+0xb4>
    d8d0:	movs	r2, #1
    d8d2:	movs	r1, #32
    d8d4:	b.n	d174 <_svfprintf_r+0xb4>
    d8d6:	ldr	r3, [sp, #12]
    d8d8:	orr.w	r3, r3, #1
    d8dc:	str	r3, [sp, #12]
    d8de:	ldrb.w	r3, [r8]
    d8e2:	b.n	d174 <_svfprintf_r+0xb4>
    d8e4:	ldr	r4, [sp, #40]	; 0x28
    d8e6:	ldr	r3, [r4, #0]
    d8e8:	str	r3, [sp, #32]
    d8ea:	mov	r0, r3
    d8ec:	cmp	r0, #0
    d8ee:	mov	r3, r4
    d8f0:	add.w	r3, r3, #4
    d8f4:	blt.w	d238 <_svfprintf_r+0x178>
    d8f8:	str	r3, [sp, #40]	; 0x28
    d8fa:	ldrb.w	r3, [r8]
    d8fe:	b.n	d174 <_svfprintf_r+0xb4>
    d900:	ldrb.w	r3, [r8]
    d904:	movs	r2, #1
    d906:	movs	r1, #43	; 0x2b
    d908:	b.n	d174 <_svfprintf_r+0xb4>
    d90a:	ldr	r3, [sp, #12]
    d90c:	orr.w	r3, r3, #32
    d910:	str	r3, [sp, #12]
    d912:	ldrb.w	r3, [r8]
    d916:	b.n	d174 <_svfprintf_r+0xb4>
    d918:	ldr	r2, [sp, #40]	; 0x28
    d91a:	str	r3, [sp, #52]	; 0x34
    d91c:	ldr	r6, [r2, #0]
    d91e:	movs	r4, #0
    d920:	strb.w	r4, [sp, #111]	; 0x6f
    d924:	adds	r7, r2, #4
    d926:	cmp	r6, #0
    d928:	beq.w	e564 <_svfprintf_r+0x14a4>
    d92c:	cmp	r5, #0
    d92e:	blt.w	e3f4 <_svfprintf_r+0x1334>
    d932:	mov	r2, r5
    d934:	mov	r1, r4
    d936:	mov	r0, r6
    d938:	bl	c760 <memchr>
    d93c:	cmp	r0, #0
    d93e:	beq.w	e608 <_svfprintf_r+0x1548>
    d942:	subs	r3, r0, r6
    d944:	str	r3, [sp, #36]	; 0x24
    d946:	mov	fp, r4
    d948:	bic.w	r3, r3, r3, asr #31
    d94c:	str	r7, [sp, #40]	; 0x28
    d94e:	str	r3, [sp, #16]
    d950:	str.w	fp, [sp, #60]	; 0x3c
    d954:	ldrb.w	r7, [sp, #111]	; 0x6f
    d958:	b.n	d464 <_svfprintf_r+0x3a4>
    d95a:	str	r3, [sp, #52]	; 0x34
    d95c:	mov	fp, r5
    d95e:	cmp	r2, #0
    d960:	beq.w	d7b6 <_svfprintf_r+0x6f6>
    d964:	strb.w	r1, [sp, #111]	; 0x6f
    d968:	b.n	d7b6 <_svfprintf_r+0x6f6>
    d96a:	str	r3, [sp, #52]	; 0x34
    d96c:	mov	fp, r5
    d96e:	cmp	r2, #0
    d970:	bne.w	e790 <_svfprintf_r+0x16d0>
    d974:	ldr	r3, [sp, #12]
    d976:	ldr	r0, [pc, #344]	; (dad0 <_svfprintf_r+0xa10>)
    d978:	lsls	r5, r3, #26
    d97a:	bmi.w	d814 <_svfprintf_r+0x754>
    d97e:	ldr	r3, [sp, #12]
    d980:	lsls	r4, r3, #27
    d982:	bpl.w	e202 <_svfprintf_r+0x1142>
    d986:	ldr	r2, [sp, #40]	; 0x28
    d988:	mov	r3, r2
    d98a:	adds	r3, #4
    d98c:	ldr	r4, [r2, #0]
    d98e:	str	r3, [sp, #40]	; 0x28
    d990:	movs	r5, #0
    d992:	b.n	d826 <_svfprintf_r+0x766>
    d994:	ldrb.w	r3, [r8]
    d998:	cmp	r3, #108	; 0x6c
    d99a:	beq.w	e322 <_svfprintf_r+0x1262>
    d99e:	ldr	r0, [sp, #12]
    d9a0:	orr.w	r0, r0, #16
    d9a4:	str	r0, [sp, #12]
    d9a6:	b.w	d174 <_svfprintf_r+0xb4>
    d9aa:	cmp	r2, #0
    d9ac:	bne.w	e788 <_svfprintf_r+0x16c8>
    d9b0:	ldr	r3, [sp, #12]
    d9b2:	lsls	r3, r3, #26
    d9b4:	bpl.w	e066 <_svfprintf_r+0xfa6>
    d9b8:	ldr	r2, [sp, #40]	; 0x28
    d9ba:	ldr	r1, [sp, #28]
    d9bc:	ldr	r3, [r2, #0]
    d9be:	asrs	r5, r1, #31
    d9c0:	mov	r0, r1
    d9c2:	adds	r2, #4
    d9c4:	mov	r1, r5
    d9c6:	str	r2, [sp, #40]	; 0x28
    d9c8:	strd	r0, r1, [r3]
    d9cc:	b.w	d10e <_svfprintf_r+0x4e>
    d9d0:	ldr	r0, [pc, #252]	; (dad0 <_svfprintf_r+0xa10>)
    d9d2:	str	r2, [sp, #52]	; 0x34
    d9d4:	cmp.w	fp, #0
    d9d8:	bne.w	dcc4 <_svfprintf_r+0xc04>
    d9dc:	mov	r7, fp
    d9de:	mov.w	fp, #0
    d9e2:	str.w	fp, [sp, #36]	; 0x24
    d9e6:	add	r6, sp, #192	; 0xc0
    d9e8:	b.n	d456 <_svfprintf_r+0x396>
    d9ea:	str	r3, [sp, #52]	; 0x34
    d9ec:	cmp	r2, #0
    d9ee:	bne.w	e780 <_svfprintf_r+0x16c0>
    d9f2:	ldr	r2, [sp, #52]	; 0x34
    d9f4:	cmp	r2, #0
    d9f6:	beq.w	d2a6 <_svfprintf_r+0x1e6>
    d9fa:	movs	r3, #0
    d9fc:	movs	r1, #1
    d9fe:	mov	r7, r3
    da00:	str	r1, [sp, #16]
    da02:	strb.w	r2, [sp, #152]	; 0x98
    da06:	strb.w	r3, [sp, #111]	; 0x6f
    da0a:	mov	fp, r3
    da0c:	str	r3, [sp, #60]	; 0x3c
    da0e:	str	r1, [sp, #36]	; 0x24
    da10:	add	r6, sp, #152	; 0x98
    da12:	b.n	d46c <_svfprintf_r+0x3ac>
    da14:	cmp.w	fp, #0
    da18:	beq.w	e638 <_svfprintf_r+0x1578>
    da1c:	movs	r7, #0
    da1e:	movs	r4, #0
    da20:	movs	r5, #0
    da22:	b.n	d30c <_svfprintf_r+0x24c>
    da24:	ldr	r0, [pc, #168]	; (dad0 <_svfprintf_r+0xa10>)
    da26:	str	r3, [sp, #12]
    da28:	str	r2, [sp, #52]	; 0x34
    da2a:	orrs.w	r3, r4, r5
    da2e:	str	r7, [sp, #40]	; 0x28
    da30:	mov.w	r7, #0
    da34:	bne.w	d862 <_svfprintf_r+0x7a2>
    da38:	movs	r4, #0
    da3a:	movs	r5, #0
    da3c:	b.n	d862 <_svfprintf_r+0x7a2>
    da3e:	ldr	r4, [sp, #148]	; 0x94
    da40:	b.n	d50c <_svfprintf_r+0x44c>
    da42:	ldr	r3, [sp, #52]	; 0x34
    da44:	cmp	r3, #101	; 0x65
    da46:	ble.w	db9e <_svfprintf_r+0xade>
    da4a:	movs	r2, #0
    da4c:	movs	r3, #0
    da4e:	ldrd	r0, r1, [sp, #64]	; 0x40
    da52:	bl	bd3c <__aeabi_dcmpeq>
    da56:	cmp	r0, #0
    da58:	beq.w	dcc8 <_svfprintf_r+0xc08>
    da5c:	ldr	r3, [sp, #144]	; 0x90
    da5e:	ldr	r2, [pc, #116]	; (dad4 <_svfprintf_r+0xa14>)
    da60:	str.w	r2, [r9]
    da64:	adds	r3, #1
    da66:	adds	r4, #1
    da68:	movs	r2, #1
    da6a:	cmp	r3, #7
    da6c:	str	r4, [sp, #148]	; 0x94
    da6e:	str	r3, [sp, #144]	; 0x90
    da70:	str.w	r2, [r9, #4]
    da74:	bgt.w	e254 <_svfprintf_r+0x1194>
    da78:	add.w	r9, r9, #8
    da7c:	ldr	r3, [sp, #116]	; 0x74
    da7e:	ldr	r2, [sp, #56]	; 0x38
    da80:	cmp	r3, r2
    da82:	blt.n	da8c <_svfprintf_r+0x9cc>
    da84:	ldr	r3, [sp, #12]
    da86:	lsls	r3, r3, #31
    da88:	bpl.w	d5ec <_svfprintf_r+0x52c>
    da8c:	ldr	r3, [sp, #144]	; 0x90
    da8e:	ldr	r1, [sp, #72]	; 0x48
    da90:	ldr	r2, [sp, #76]	; 0x4c
    da92:	str.w	r2, [r9]
    da96:	adds	r3, #1
    da98:	add	r4, r1
    da9a:	cmp	r3, #7
    da9c:	str	r4, [sp, #148]	; 0x94
    da9e:	str.w	r1, [r9, #4]
    daa2:	str	r3, [sp, #144]	; 0x90
    daa4:	bgt.w	e336 <_svfprintf_r+0x1276>
    daa8:	add.w	r9, r9, #8
    daac:	ldr	r3, [sp, #56]	; 0x38
    daae:	subs	r5, r3, #1
    dab0:	cmp	r5, #0
    dab2:	ble.w	d5ec <_svfprintf_r+0x52c>
    dab6:	ldr	r2, [pc, #32]	; (dad8 <_svfprintf_r+0xa18>)
    dab8:	ldr	r3, [sp, #144]	; 0x90
    daba:	str	r2, [sp, #44]	; 0x2c
    dabc:	cmp	r5, #16
    dabe:	ble.w	de94 <_svfprintf_r+0xdd4>
    dac2:	movs	r6, #16
    dac4:	ldr	r7, [sp, #24]
    dac6:	ldr.w	fp, [sp, #20]
    daca:	b.n	dae8 <_svfprintf_r+0xa28>
    dacc:	.word	0x00010a44
    dad0:	.word	0x00010a58
    dad4:	.word	0x00010a74
    dad8:	.word	0x00010a24
    dadc:	add.w	r9, r9, #8
    dae0:	subs	r5, #16
    dae2:	cmp	r5, #16
    dae4:	ble.w	de94 <_svfprintf_r+0xdd4>
    dae8:	adds	r3, #1
    daea:	adds	r4, #16
    daec:	cmp	r3, #7
    daee:	str	r4, [sp, #148]	; 0x94
    daf0:	str	r3, [sp, #144]	; 0x90
    daf2:	str.w	sl, [r9]
    daf6:	str.w	r6, [r9, #4]
    dafa:	ble.n	dadc <_svfprintf_r+0xa1c>
    dafc:	add	r2, sp, #140	; 0x8c
    dafe:	mov	r1, fp
    db00:	mov	r0, r7
    db02:	bl	10148 <__ssprint_r>
    db06:	cmp	r0, #0
    db08:	bne.w	d2b4 <_svfprintf_r+0x1f4>
    db0c:	ldr	r4, [sp, #148]	; 0x94
    db0e:	ldr	r3, [sp, #144]	; 0x90
    db10:	add.w	r9, sp, #192	; 0xc0
    db14:	b.n	dae0 <_svfprintf_r+0xa20>
    db16:	ldr	r3, [sp, #32]
    db18:	ldr	r2, [sp, #16]
    db1a:	subs	r7, r3, r2
    db1c:	cmp	r7, #0
    db1e:	ble.w	d554 <_svfprintf_r+0x494>
    db22:	ldr	r2, [pc, #752]	; (de14 <_svfprintf_r+0xd54>)
    db24:	ldr	r3, [sp, #144]	; 0x90
    db26:	str	r2, [sp, #44]	; 0x2c
    db28:	cmp	r7, #16
    db2a:	ble.n	db84 <_svfprintf_r+0xac4>
    db2c:	mov	r2, r9
    db2e:	mov	r1, r4
    db30:	mov	r9, r7
    db32:	movs	r5, #16
    db34:	mov	r7, r6
    db36:	ldr	r4, [sp, #24]
    db38:	ldr	r6, [sp, #20]
    db3a:	b.n	db4a <_svfprintf_r+0xa8a>
    db3c:	sub.w	r9, r9, #16
    db40:	cmp.w	r9, #16
    db44:	add.w	r2, r2, #8
    db48:	ble.n	db7c <_svfprintf_r+0xabc>
    db4a:	adds	r3, #1
    db4c:	adds	r1, #16
    db4e:	cmp	r3, #7
    db50:	str	r1, [sp, #148]	; 0x94
    db52:	str	r3, [sp, #144]	; 0x90
    db54:	str.w	sl, [r2]
    db58:	str	r5, [r2, #4]
    db5a:	ble.n	db3c <_svfprintf_r+0xa7c>
    db5c:	add	r2, sp, #140	; 0x8c
    db5e:	mov	r1, r6
    db60:	mov	r0, r4
    db62:	bl	10148 <__ssprint_r>
    db66:	cmp	r0, #0
    db68:	bne.w	d2b4 <_svfprintf_r+0x1f4>
    db6c:	sub.w	r9, r9, #16
    db70:	cmp.w	r9, #16
    db74:	ldr	r1, [sp, #148]	; 0x94
    db76:	ldr	r3, [sp, #144]	; 0x90
    db78:	add	r2, sp, #192	; 0xc0
    db7a:	bgt.n	db4a <_svfprintf_r+0xa8a>
    db7c:	mov	r6, r7
    db7e:	mov	r4, r1
    db80:	mov	r7, r9
    db82:	mov	r9, r2
    db84:	adds	r3, #1
    db86:	ldr	r2, [sp, #44]	; 0x2c
    db88:	str	r3, [sp, #144]	; 0x90
    db8a:	add	r4, r7
    db8c:	cmp	r3, #7
    db8e:	str	r4, [sp, #148]	; 0x94
    db90:	stmia.w	r9, {r2, r7}
    db94:	bgt.w	e012 <_svfprintf_r+0xf52>
    db98:	add.w	r9, r9, #8
    db9c:	b.n	d554 <_svfprintf_r+0x494>
    db9e:	ldr	r3, [sp, #56]	; 0x38
    dba0:	ldr	r5, [sp, #144]	; 0x90
    dba2:	cmp	r3, #1
    dba4:	ble.w	dfbc <_svfprintf_r+0xefc>
    dba8:	adds	r5, #1
    dbaa:	adds	r4, #1
    dbac:	movs	r3, #1
    dbae:	cmp	r5, #7
    dbb0:	str	r4, [sp, #148]	; 0x94
    dbb2:	str	r5, [sp, #144]	; 0x90
    dbb4:	str.w	r6, [r9]
    dbb8:	str.w	r3, [r9, #4]
    dbbc:	bgt.w	dfde <_svfprintf_r+0xf1e>
    dbc0:	add.w	r9, r9, #8
    dbc4:	ldr	r2, [sp, #72]	; 0x48
    dbc6:	ldr	r3, [sp, #76]	; 0x4c
    dbc8:	str.w	r3, [r9]
    dbcc:	adds	r5, #1
    dbce:	add	r4, r2
    dbd0:	cmp	r5, #7
    dbd2:	str	r4, [sp, #148]	; 0x94
    dbd4:	str	r5, [sp, #144]	; 0x90
    dbd6:	str.w	r2, [r9, #4]
    dbda:	bgt.w	dff8 <_svfprintf_r+0xf38>
    dbde:	add.w	r9, r9, #8
    dbe2:	movs	r3, #0
    dbe4:	movs	r2, #0
    dbe6:	ldrd	r0, r1, [sp, #64]	; 0x40
    dbea:	bl	bd3c <__aeabi_dcmpeq>
    dbee:	ldr	r3, [sp, #56]	; 0x38
    dbf0:	cmp	r0, #0
    dbf2:	bne.w	dd7c <_svfprintf_r+0xcbc>
    dbf6:	subs	r3, #1
    dbf8:	adds	r5, #1
    dbfa:	adds	r6, #1
    dbfc:	add	r4, r3
    dbfe:	cmp	r5, #7
    dc00:	str	r5, [sp, #144]	; 0x90
    dc02:	str	r4, [sp, #148]	; 0x94
    dc04:	str.w	r6, [r9]
    dc08:	str.w	r3, [r9, #4]
    dc0c:	bgt.w	ddfa <_svfprintf_r+0xd3a>
    dc10:	add.w	r9, r9, #8
    dc14:	ldr	r2, [sp, #84]	; 0x54
    dc16:	str.w	r2, [r9, #4]
    dc1a:	adds	r5, #1
    dc1c:	add	r4, r2
    dc1e:	add	r3, sp, #124	; 0x7c
    dc20:	cmp	r5, #7
    dc22:	str	r4, [sp, #148]	; 0x94
    dc24:	str	r5, [sp, #144]	; 0x90
    dc26:	str.w	r3, [r9]
    dc2a:	ble.w	d5e8 <_svfprintf_r+0x528>
    dc2e:	add	r2, sp, #140	; 0x8c
    dc30:	ldr	r1, [sp, #20]
    dc32:	ldr	r0, [sp, #24]
    dc34:	bl	10148 <__ssprint_r>
    dc38:	cmp	r0, #0
    dc3a:	bne.w	d2b4 <_svfprintf_r+0x1f4>
    dc3e:	ldr	r4, [sp, #148]	; 0x94
    dc40:	add.w	r9, sp, #192	; 0xc0
    dc44:	b.n	d5ec <_svfprintf_r+0x52c>
    dc46:	add	r2, sp, #140	; 0x8c
    dc48:	ldr	r1, [sp, #20]
    dc4a:	ldr	r0, [sp, #24]
    dc4c:	bl	10148 <__ssprint_r>
    dc50:	cmp	r0, #0
    dc52:	beq.w	d688 <_svfprintf_r+0x5c8>
    dc56:	b.w	d2b4 <_svfprintf_r+0x1f4>
    dc5a:	add	r2, sp, #140	; 0x8c
    dc5c:	ldr	r1, [sp, #20]
    dc5e:	ldr	r0, [sp, #24]
    dc60:	bl	10148 <__ssprint_r>
    dc64:	cmp	r0, #0
    dc66:	bne.w	d2b4 <_svfprintf_r+0x1f4>
    dc6a:	ldr	r4, [sp, #148]	; 0x94
    dc6c:	add.w	r9, sp, #192	; 0xc0
    dc70:	b.n	d5c6 <_svfprintf_r+0x506>
    dc72:	add	r2, sp, #140	; 0x8c
    dc74:	ldr	r1, [sp, #20]
    dc76:	ldr	r0, [sp, #24]
    dc78:	bl	10148 <__ssprint_r>
    dc7c:	cmp	r0, #0
    dc7e:	bne.w	d2b4 <_svfprintf_r+0x1f4>
    dc82:	ldr	r4, [sp, #148]	; 0x94
    dc84:	add.w	r9, sp, #192	; 0xc0
    dc88:	b.n	d52c <_svfprintf_r+0x46c>
    dc8a:	add	r2, sp, #140	; 0x8c
    dc8c:	ldr	r1, [sp, #20]
    dc8e:	ldr	r0, [sp, #24]
    dc90:	bl	10148 <__ssprint_r>
    dc94:	cmp	r0, #0
    dc96:	bne.w	d2b4 <_svfprintf_r+0x1f4>
    dc9a:	ldr	r4, [sp, #148]	; 0x94
    dc9c:	add.w	r9, sp, #192	; 0xc0
    dca0:	b.n	d54c <_svfprintf_r+0x48c>
    dca2:	cmp.w	fp, #0
    dca6:	strb.w	r7, [sp, #111]	; 0x6f
    dcaa:	blt.w	e26c <_svfprintf_r+0x11ac>
    dcae:	bic.w	r3, r2, #128	; 0x80
    dcb2:	str	r3, [sp, #12]
    dcb4:	orrs.w	r3, r4, r5
    dcb8:	bne.w	d862 <_svfprintf_r+0x7a2>
    dcbc:	cmp.w	fp, #0
    dcc0:	beq.w	d9dc <_svfprintf_r+0x91c>
    dcc4:	movs	r7, #0
    dcc6:	b.n	da38 <_svfprintf_r+0x978>
    dcc8:	ldr	r5, [sp, #116]	; 0x74
    dcca:	cmp	r5, #0
    dccc:	ble.w	e272 <_svfprintf_r+0x11b2>
    dcd0:	ldr	r3, [sp, #60]	; 0x3c
    dcd2:	ldr	r2, [sp, #56]	; 0x38
    dcd4:	cmp	r3, r2
    dcd6:	it	ge
    dcd8:	movge	r3, r2
    dcda:	cmp	r3, #0
    dcdc:	mov	r5, r3
    dcde:	ble.n	dcfc <_svfprintf_r+0xc3c>
    dce0:	ldr	r3, [sp, #144]	; 0x90
    dce2:	str.w	r6, [r9]
    dce6:	adds	r3, #1
    dce8:	add	r4, r5
    dcea:	cmp	r3, #7
    dcec:	str	r4, [sp, #148]	; 0x94
    dcee:	str.w	r5, [r9, #4]
    dcf2:	str	r3, [sp, #144]	; 0x90
    dcf4:	bgt.w	e44a <_svfprintf_r+0x138a>
    dcf8:	add.w	r9, r9, #8
    dcfc:	ldr	r3, [sp, #60]	; 0x3c
    dcfe:	cmp	r5, #0
    dd00:	it	ge
    dd02:	subge	r3, r3, r5
    dd04:	cmp	r3, #0
    dd06:	mov	r5, r3
    dd08:	ble.w	defc <_svfprintf_r+0xe3c>
    dd0c:	ldr	r2, [pc, #260]	; (de14 <_svfprintf_r+0xd54>)
    dd0e:	ldr	r3, [sp, #144]	; 0x90
    dd10:	str	r2, [sp, #44]	; 0x2c
    dd12:	cmp	r5, #16
    dd14:	ble.w	e21e <_svfprintf_r+0x115e>
    dd18:	mov	r2, r4
    dd1a:	movs	r7, #16
    dd1c:	ldr.w	fp, [sp, #24]
    dd20:	ldr	r4, [sp, #20]
    dd22:	b.n	dd30 <_svfprintf_r+0xc70>
    dd24:	add.w	r9, r9, #8
    dd28:	subs	r5, #16
    dd2a:	cmp	r5, #16
    dd2c:	ble.w	e21c <_svfprintf_r+0x115c>
    dd30:	adds	r3, #1
    dd32:	adds	r2, #16
    dd34:	cmp	r3, #7
    dd36:	str	r2, [sp, #148]	; 0x94
    dd38:	str	r3, [sp, #144]	; 0x90
    dd3a:	str.w	sl, [r9]
    dd3e:	str.w	r7, [r9, #4]
    dd42:	ble.n	dd24 <_svfprintf_r+0xc64>
    dd44:	add	r2, sp, #140	; 0x8c
    dd46:	mov	r1, r4
    dd48:	mov	r0, fp
    dd4a:	bl	10148 <__ssprint_r>
    dd4e:	cmp	r0, #0
    dd50:	bne.w	d2b4 <_svfprintf_r+0x1f4>
    dd54:	ldr	r2, [sp, #148]	; 0x94
    dd56:	ldr	r3, [sp, #144]	; 0x90
    dd58:	add.w	r9, sp, #192	; 0xc0
    dd5c:	b.n	dd28 <_svfprintf_r+0xc68>
    dd5e:	add	r2, sp, #140	; 0x8c
    dd60:	ldr	r1, [sp, #20]
    dd62:	ldr	r0, [sp, #24]
    dd64:	bl	10148 <__ssprint_r>
    dd68:	cmp	r0, #0
    dd6a:	bne.w	d2b4 <_svfprintf_r+0x1f4>
    dd6e:	ldrb.w	r7, [sp, #111]	; 0x6f
    dd72:	ldr	r4, [sp, #148]	; 0x94
    dd74:	add.w	r9, sp, #192	; 0xc0
    dd78:	b.w	d50c <_svfprintf_r+0x44c>
    dd7c:	subs	r6, r3, #1
    dd7e:	cmp	r6, #0
    dd80:	ble.w	dc14 <_svfprintf_r+0xb54>
    dd84:	ldr	r3, [pc, #140]	; (de14 <_svfprintf_r+0xd54>)
    dd86:	str	r3, [sp, #44]	; 0x2c
    dd88:	cmp	r6, #16
    dd8a:	ble.n	dde6 <_svfprintf_r+0xd26>
    dd8c:	str.w	r8, [sp, #36]	; 0x24
    dd90:	movs	r7, #16
    dd92:	mov	r8, r6
    dd94:	ldr.w	fp, [sp, #24]
    dd98:	ldr	r6, [sp, #20]
    dd9a:	b.n	ddaa <_svfprintf_r+0xcea>
    dd9c:	sub.w	r8, r8, #16
    dda0:	cmp.w	r8, #16
    dda4:	add.w	r9, r9, #8
    dda8:	ble.n	dde0 <_svfprintf_r+0xd20>
    ddaa:	adds	r5, #1
    ddac:	adds	r4, #16
    ddae:	cmp	r5, #7
    ddb0:	str	r4, [sp, #148]	; 0x94
    ddb2:	str	r5, [sp, #144]	; 0x90
    ddb4:	str.w	sl, [r9]
    ddb8:	str.w	r7, [r9, #4]
    ddbc:	ble.n	dd9c <_svfprintf_r+0xcdc>
    ddbe:	add	r2, sp, #140	; 0x8c
    ddc0:	mov	r1, r6
    ddc2:	mov	r0, fp
    ddc4:	bl	10148 <__ssprint_r>
    ddc8:	cmp	r0, #0
    ddca:	bne.w	d2b4 <_svfprintf_r+0x1f4>
    ddce:	sub.w	r8, r8, #16
    ddd2:	cmp.w	r8, #16
    ddd6:	ldr	r4, [sp, #148]	; 0x94
    ddd8:	ldr	r5, [sp, #144]	; 0x90
    ddda:	add.w	r9, sp, #192	; 0xc0
    ddde:	bgt.n	ddaa <_svfprintf_r+0xcea>
    dde0:	mov	r6, r8
    dde2:	ldr.w	r8, [sp, #36]	; 0x24
    dde6:	ldr	r3, [sp, #44]	; 0x2c
    dde8:	adds	r5, #1
    ddea:	add	r4, r6
    ddec:	cmp	r5, #7
    ddee:	str	r4, [sp, #148]	; 0x94
    ddf0:	str	r5, [sp, #144]	; 0x90
    ddf2:	stmia.w	r9, {r3, r6}
    ddf6:	ble.w	dc10 <_svfprintf_r+0xb50>
    ddfa:	add	r2, sp, #140	; 0x8c
    ddfc:	ldr	r1, [sp, #20]
    ddfe:	ldr	r0, [sp, #24]
    de00:	bl	10148 <__ssprint_r>
    de04:	cmp	r0, #0
    de06:	bne.w	d2b4 <_svfprintf_r+0x1f4>
    de0a:	ldr	r4, [sp, #148]	; 0x94
    de0c:	ldr	r5, [sp, #144]	; 0x90
    de0e:	add.w	r9, sp, #192	; 0xc0
    de12:	b.n	dc14 <_svfprintf_r+0xb54>
    de14:	.word	0x00010a24
    de18:	ldr	r1, [sp, #12]
    de1a:	ands.w	r2, r1, #16
    de1e:	beq.w	e1c8 <_svfprintf_r+0x1108>
    de22:	ldr	r0, [sp, #40]	; 0x28
    de24:	strb.w	r3, [sp, #111]	; 0x6f
    de28:	cmp.w	fp, #0
    de2c:	ldr	r4, [r0, #0]
    de2e:	add.w	r7, r0, #4
    de32:	mov.w	r5, #0
    de36:	blt.n	de86 <_svfprintf_r+0xdc6>
    de38:	mov	r2, r1
    de3a:	bic.w	r2, r2, #128	; 0x80
    de3e:	str	r2, [sp, #12]
    de40:	orrs.w	r2, r4, r5
    de44:	str	r7, [sp, #40]	; 0x28
    de46:	mov	r7, r3
    de48:	bne.w	d41c <_svfprintf_r+0x35c>
    de4c:	b.n	d7ec <_svfprintf_r+0x72c>
    de4e:	ldr	r3, [sp, #12]
    de50:	lsls	r0, r3, #27
    de52:	bmi.n	deaa <_svfprintf_r+0xdea>
    de54:	ldr	r3, [sp, #12]
    de56:	lsls	r1, r3, #25
    de58:	bpl.n	deaa <_svfprintf_r+0xdea>
    de5a:	ldr	r1, [sp, #40]	; 0x28
    de5c:	ldrsh.w	r4, [r1]
    de60:	adds	r1, #4
    de62:	asrs	r5, r4, #31
    de64:	mov	r2, r4
    de66:	mov	r3, r5
    de68:	str	r1, [sp, #40]	; 0x28
    de6a:	b.w	d3f6 <_svfprintf_r+0x336>
    de6e:	ldr	r1, [sp, #40]	; 0x28
    de70:	strb.w	r3, [sp, #111]	; 0x6f
    de74:	cmp.w	fp, #0
    de78:	ldr	r4, [r1, #0]
    de7a:	add.w	r7, r1, #4
    de7e:	mov.w	r5, #0
    de82:	bge.w	e31e <_svfprintf_r+0x125e>
    de86:	str	r7, [sp, #40]	; 0x28
    de88:	mov	r7, r3
    de8a:	orrs.w	r3, r4, r5
    de8e:	bne.w	d41c <_svfprintf_r+0x35c>
    de92:	b.n	d7f6 <_svfprintf_r+0x736>
    de94:	adds	r3, #1
    de96:	ldr	r2, [sp, #44]	; 0x2c
    de98:	str	r3, [sp, #144]	; 0x90
    de9a:	add	r4, r5
    de9c:	cmp	r3, #7
    de9e:	str	r4, [sp, #148]	; 0x94
    dea0:	stmia.w	r9, {r2, r5}
    dea4:	ble.w	d5e8 <_svfprintf_r+0x528>
    dea8:	b.n	dc2e <_svfprintf_r+0xb6e>
    deaa:	ldr	r2, [sp, #40]	; 0x28
    deac:	ldr	r4, [r2, #0]
    deae:	mov	r3, r2
    deb0:	adds	r3, #4
    deb2:	asrs	r5, r4, #31
    deb4:	mov	r2, r4
    deb6:	str	r3, [sp, #40]	; 0x28
    deb8:	cmp	r2, #0
    deba:	mov	r3, r5
    debc:	sbcs.w	r3, r3, #0
    dec0:	bge.w	d400 <_svfprintf_r+0x340>
    dec4:	negs	r4, r4
    dec6:	mov.w	r7, #45	; 0x2d
    deca:	sbc.w	r5, r5, r5, lsl #1
    dece:	cmp.w	fp, #0
    ded2:	strb.w	r7, [sp, #111]	; 0x6f
    ded6:	blt.w	d41c <_svfprintf_r+0x35c>
    deda:	ldr	r3, [sp, #12]
    dedc:	bic.w	r3, r3, #128	; 0x80
    dee0:	str	r3, [sp, #12]
    dee2:	b.w	d41c <_svfprintf_r+0x35c>
    dee6:	add	r2, sp, #140	; 0x8c
    dee8:	ldr	r1, [sp, #20]
    deea:	ldr	r0, [sp, #24]
    deec:	bl	10148 <__ssprint_r>
    def0:	cmp	r0, #0
    def2:	bne.w	d2b4 <_svfprintf_r+0x1f4>
    def6:	ldr	r4, [sp, #148]	; 0x94
    def8:	add.w	r9, sp, #192	; 0xc0
    defc:	ldr	r2, [sp, #60]	; 0x3c
    defe:	ldr	r3, [sp, #116]	; 0x74
    df00:	add	r2, r6
    df02:	mov	r7, r2
    df04:	ldr	r2, [sp, #56]	; 0x38
    df06:	cmp	r3, r2
    df08:	blt.n	df9a <_svfprintf_r+0xeda>
    df0a:	ldr	r2, [sp, #12]
    df0c:	lsls	r5, r2, #31
    df0e:	bmi.n	df9a <_svfprintf_r+0xeda>
    df10:	ldr	r1, [sp, #56]	; 0x38
    df12:	add	r6, r1
    df14:	subs	r5, r6, r7
    df16:	subs	r3, r1, r3
    df18:	cmp	r5, r3
    df1a:	it	ge
    df1c:	movge	r5, r3
    df1e:	cmp	r5, #0
    df20:	mov	r6, r5
    df22:	ble.n	df40 <_svfprintf_r+0xe80>
    df24:	ldr	r2, [sp, #144]	; 0x90
    df26:	str.w	r7, [r9]
    df2a:	adds	r2, #1
    df2c:	add	r4, r5
    df2e:	cmp	r2, #7
    df30:	str	r4, [sp, #148]	; 0x94
    df32:	str.w	r5, [r9, #4]
    df36:	str	r2, [sp, #144]	; 0x90
    df38:	bgt.w	e538 <_svfprintf_r+0x1478>
    df3c:	add.w	r9, r9, #8
    df40:	cmp	r6, #0
    df42:	ite	ge
    df44:	subge	r5, r3, r6
    df46:	movlt	r5, r3
    df48:	cmp	r5, #0
    df4a:	ble.w	d5ec <_svfprintf_r+0x52c>
    df4e:	ldr	r2, [pc, #744]	; (e238 <_svfprintf_r+0x1178>)
    df50:	ldr	r3, [sp, #144]	; 0x90
    df52:	str	r2, [sp, #44]	; 0x2c
    df54:	cmp	r5, #16
    df56:	ble.n	de94 <_svfprintf_r+0xdd4>
    df58:	movs	r6, #16
    df5a:	ldr	r7, [sp, #24]
    df5c:	ldr.w	fp, [sp, #20]
    df60:	b.n	df6c <_svfprintf_r+0xeac>
    df62:	add.w	r9, r9, #8
    df66:	subs	r5, #16
    df68:	cmp	r5, #16
    df6a:	ble.n	de94 <_svfprintf_r+0xdd4>
    df6c:	adds	r3, #1
    df6e:	adds	r4, #16
    df70:	cmp	r3, #7
    df72:	str	r4, [sp, #148]	; 0x94
    df74:	str	r3, [sp, #144]	; 0x90
    df76:	str.w	sl, [r9]
    df7a:	str.w	r6, [r9, #4]
    df7e:	ble.n	df62 <_svfprintf_r+0xea2>
    df80:	add	r2, sp, #140	; 0x8c
    df82:	mov	r1, fp
    df84:	mov	r0, r7
    df86:	bl	10148 <__ssprint_r>
    df8a:	cmp	r0, #0
    df8c:	bne.w	d2b4 <_svfprintf_r+0x1f4>
    df90:	ldr	r4, [sp, #148]	; 0x94
    df92:	ldr	r3, [sp, #144]	; 0x90
    df94:	add.w	r9, sp, #192	; 0xc0
    df98:	b.n	df66 <_svfprintf_r+0xea6>
    df9a:	ldr	r2, [sp, #144]	; 0x90
    df9c:	ldr	r0, [sp, #72]	; 0x48
    df9e:	ldr	r1, [sp, #76]	; 0x4c
    dfa0:	str.w	r1, [r9]
    dfa4:	adds	r2, #1
    dfa6:	add	r4, r0
    dfa8:	cmp	r2, #7
    dfaa:	str	r4, [sp, #148]	; 0x94
    dfac:	str.w	r0, [r9, #4]
    dfb0:	str	r2, [sp, #144]	; 0x90
    dfb2:	bgt.w	e51e <_svfprintf_r+0x145e>
    dfb6:	add.w	r9, r9, #8
    dfba:	b.n	df10 <_svfprintf_r+0xe50>
    dfbc:	ldr	r3, [sp, #12]
    dfbe:	lsls	r0, r3, #31
    dfc0:	bmi.w	dba8 <_svfprintf_r+0xae8>
    dfc4:	adds	r5, #1
    dfc6:	adds	r4, #1
    dfc8:	movs	r3, #1
    dfca:	cmp	r5, #7
    dfcc:	str	r4, [sp, #148]	; 0x94
    dfce:	str	r5, [sp, #144]	; 0x90
    dfd0:	str.w	r6, [r9]
    dfd4:	str.w	r3, [r9, #4]
    dfd8:	ble.w	dc10 <_svfprintf_r+0xb50>
    dfdc:	b.n	ddfa <_svfprintf_r+0xd3a>
    dfde:	add	r2, sp, #140	; 0x8c
    dfe0:	ldr	r1, [sp, #20]
    dfe2:	ldr	r0, [sp, #24]
    dfe4:	bl	10148 <__ssprint_r>
    dfe8:	cmp	r0, #0
    dfea:	bne.w	d2b4 <_svfprintf_r+0x1f4>
    dfee:	ldr	r4, [sp, #148]	; 0x94
    dff0:	ldr	r5, [sp, #144]	; 0x90
    dff2:	add.w	r9, sp, #192	; 0xc0
    dff6:	b.n	dbc4 <_svfprintf_r+0xb04>
    dff8:	add	r2, sp, #140	; 0x8c
    dffa:	ldr	r1, [sp, #20]
    dffc:	ldr	r0, [sp, #24]
    dffe:	bl	10148 <__ssprint_r>
    e002:	cmp	r0, #0
    e004:	bne.w	d2b4 <_svfprintf_r+0x1f4>
    e008:	ldr	r4, [sp, #148]	; 0x94
    e00a:	ldr	r5, [sp, #144]	; 0x90
    e00c:	add.w	r9, sp, #192	; 0xc0
    e010:	b.n	dbe2 <_svfprintf_r+0xb22>
    e012:	add	r2, sp, #140	; 0x8c
    e014:	ldr	r1, [sp, #20]
    e016:	ldr	r0, [sp, #24]
    e018:	bl	10148 <__ssprint_r>
    e01c:	cmp	r0, #0
    e01e:	bne.w	d2b4 <_svfprintf_r+0x1f4>
    e022:	ldr	r4, [sp, #148]	; 0x94
    e024:	add.w	r9, sp, #192	; 0xc0
    e028:	b.w	d554 <_svfprintf_r+0x494>
    e02c:	ldr	r1, [sp, #12]
    e02e:	ands.w	r3, r1, #64	; 0x40
    e032:	beq.w	e1a8 <_svfprintf_r+0x10e8>
    e036:	ldr	r0, [sp, #40]	; 0x28
    e038:	strb.w	r2, [sp, #111]	; 0x6f
    e03c:	mov	r3, r0
    e03e:	cmp.w	fp, #0
    e042:	add.w	r3, r3, #4
    e046:	ldrh	r4, [r0, #0]
    e048:	mov.w	r5, #0
    e04c:	blt.w	e3d0 <_svfprintf_r+0x1310>
    e050:	bic.w	r1, r1, #128	; 0x80
    e054:	str	r1, [sp, #12]
    e056:	orrs.w	r1, r4, r5
    e05a:	str	r3, [sp, #40]	; 0x28
    e05c:	beq.w	da14 <_svfprintf_r+0x954>
    e060:	mov	r7, r2
    e062:	b.w	d30c <_svfprintf_r+0x24c>
    e066:	ldr	r3, [sp, #12]
    e068:	lsls	r7, r3, #27
    e06a:	bmi.n	e084 <_svfprintf_r+0xfc4>
    e06c:	ldr	r3, [sp, #12]
    e06e:	lsls	r6, r3, #25
    e070:	bpl.n	e084 <_svfprintf_r+0xfc4>
    e072:	ldr	r2, [sp, #40]	; 0x28
    e074:	ldr	r3, [r2, #0]
    e076:	adds	r2, #4
    e078:	str	r2, [sp, #40]	; 0x28
    e07a:	ldrh.w	r2, [sp, #28]
    e07e:	strh	r2, [r3, #0]
    e080:	b.w	d10e <_svfprintf_r+0x4e>
    e084:	ldr	r2, [sp, #40]	; 0x28
    e086:	ldr	r3, [r2, #0]
    e088:	adds	r2, #4
    e08a:	str	r2, [sp, #40]	; 0x28
    e08c:	ldr	r2, [sp, #28]
    e08e:	str	r2, [r3, #0]
    e090:	b.w	d10e <_svfprintf_r+0x4e>
    e094:	ldrd	r0, r1, [sp, #64]	; 0x40
    e098:	mov	r2, r0
    e09a:	mov	r3, r1
    e09c:	bl	bda0 <__aeabi_dcmpun>
    e0a0:	cmp	r0, #0
    e0a2:	bne.w	e6a0 <_svfprintf_r+0x15e0>
    e0a6:	ldr	r3, [sp, #52]	; 0x34
    e0a8:	cmp.w	fp, #4294967295
    e0ac:	bic.w	r7, r3, #32
    e0b0:	beq.w	e582 <_svfprintf_r+0x14c2>
    e0b4:	cmp	r7, #71	; 0x47
    e0b6:	beq.w	e3be <_svfprintf_r+0x12fe>
    e0ba:	ldr	r3, [sp, #68]	; 0x44
    e0bc:	ldr	r2, [sp, #12]
    e0be:	cmp	r3, #0
    e0c0:	orr.w	r2, r2, #256	; 0x100
    e0c4:	str	r2, [sp, #44]	; 0x2c
    e0c6:	blt.w	e5ba <_svfprintf_r+0x14fa>
    e0ca:	vldr	d7, [sp, #64]	; 0x40
    e0ce:	vstr	d7, [sp, #96]	; 0x60
    e0d2:	movs	r3, #0
    e0d4:	str	r3, [sp, #16]
    e0d6:	ldr	r3, [sp, #52]	; 0x34
    e0d8:	cmp	r3, #102	; 0x66
    e0da:	beq.w	e588 <_svfprintf_r+0x14c8>
    e0de:	cmp	r3, #70	; 0x46
    e0e0:	beq.w	e36e <_svfprintf_r+0x12ae>
    e0e4:	cmp	r7, #69	; 0x45
    e0e6:	ite	eq
    e0e8:	addeq.w	r5, fp, #1
    e0ec:	movne	r5, fp
    e0ee:	add	r2, sp, #132	; 0x84
    e0f0:	add	r3, sp, #120	; 0x78
    e0f2:	str	r2, [sp, #4]
    e0f4:	str	r3, [sp, #0]
    e0f6:	mov	r2, r5
    e0f8:	add	r3, sp, #116	; 0x74
    e0fa:	movs	r1, #2
    e0fc:	vldr	d0, [sp, #96]	; 0x60
    e100:	ldr	r0, [sp, #24]
    e102:	bl	ea40 <_dtoa_r>
    e106:	ldr	r3, [sp, #52]	; 0x34
    e108:	cmp	r3, #103	; 0x67
    e10a:	mov	r6, r0
    e10c:	bne.w	e5e6 <_svfprintf_r+0x1526>
    e110:	ldr	r3, [sp, #12]
    e112:	lsls	r2, r3, #31
    e114:	bpl.w	e68a <_svfprintf_r+0x15ca>
    e118:	adds	r4, r6, r5
    e11a:	movs	r2, #0
    e11c:	movs	r3, #0
    e11e:	ldrd	r0, r1, [sp, #96]	; 0x60
    e122:	bl	bd3c <__aeabi_dcmpeq>
    e126:	cmp	r0, #0
    e128:	bne.w	e446 <_svfprintf_r+0x1386>
    e12c:	ldr	r3, [sp, #132]	; 0x84
    e12e:	cmp	r4, r3
    e130:	bls.n	e140 <_svfprintf_r+0x1080>
    e132:	movs	r1, #48	; 0x30
    e134:	adds	r2, r3, #1
    e136:	str	r2, [sp, #132]	; 0x84
    e138:	strb	r1, [r3, #0]
    e13a:	ldr	r3, [sp, #132]	; 0x84
    e13c:	cmp	r4, r3
    e13e:	bhi.n	e134 <_svfprintf_r+0x1074>
    e140:	subs	r3, r3, r6
    e142:	cmp	r7, #71	; 0x47
    e144:	str	r3, [sp, #56]	; 0x38
    e146:	beq.w	e438 <_svfprintf_r+0x1378>
    e14a:	ldr	r3, [sp, #52]	; 0x34
    e14c:	cmp	r3, #101	; 0x65
    e14e:	ble.w	e604 <_svfprintf_r+0x1544>
    e152:	ldr	r3, [sp, #52]	; 0x34
    e154:	cmp	r3, #102	; 0x66
    e156:	ldr	r3, [sp, #116]	; 0x74
    e158:	str	r3, [sp, #60]	; 0x3c
    e15a:	beq.w	e61e <_svfprintf_r+0x155e>
    e15e:	ldr	r2, [sp, #60]	; 0x3c
    e160:	ldr	r1, [sp, #56]	; 0x38
    e162:	cmp	r2, r1
    e164:	blt.w	e5cc <_svfprintf_r+0x150c>
    e168:	ldr	r3, [sp, #12]
    e16a:	lsls	r1, r3, #31
    e16c:	bmi.w	e68e <_svfprintf_r+0x15ce>
    e170:	bic.w	r3, r2, r2, asr #31
    e174:	str	r2, [sp, #36]	; 0x24
    e176:	movs	r2, #103	; 0x67
    e178:	str	r2, [sp, #52]	; 0x34
    e17a:	ldr	r2, [sp, #16]
    e17c:	cmp	r2, #0
    e17e:	bne.w	e3e0 <_svfprintf_r+0x1320>
    e182:	str	r3, [sp, #16]
    e184:	ldr	r3, [sp, #44]	; 0x2c
    e186:	str	r3, [sp, #12]
    e188:	mov	fp, r2
    e18a:	ldrb.w	r7, [sp, #111]	; 0x6f
    e18e:	b.w	d464 <_svfprintf_r+0x3a4>
    e192:	bic.w	r7, r7, #7
    e196:	vldr	d7, [r7]
    e19a:	add.w	r3, r7, #8
    e19e:	vstr	d7, [sp, #64]	; 0x40
    e1a2:	str	r3, [sp, #40]	; 0x28
    e1a4:	b.w	d6bc <_svfprintf_r+0x5fc>
    e1a8:	ldr	r1, [sp, #40]	; 0x28
    e1aa:	strb.w	r3, [sp, #111]	; 0x6f
    e1ae:	cmp.w	fp, #0
    e1b2:	ldr	r4, [r1, #0]
    e1b4:	add.w	r7, r1, #4
    e1b8:	mov.w	r5, #0
    e1bc:	bge.w	e318 <_svfprintf_r+0x1258>
    e1c0:	str	r7, [sp, #40]	; 0x28
    e1c2:	movs	r7, #0
    e1c4:	b.w	d30c <_svfprintf_r+0x24c>
    e1c8:	ldr	r1, [sp, #12]
    e1ca:	ands.w	r3, r1, #64	; 0x40
    e1ce:	beq.w	de6e <_svfprintf_r+0xdae>
    e1d2:	ldr	r0, [sp, #40]	; 0x28
    e1d4:	strb.w	r2, [sp, #111]	; 0x6f
    e1d8:	mov	r3, r0
    e1da:	cmp.w	fp, #0
    e1de:	add.w	r3, r3, #4
    e1e2:	ldrh	r4, [r0, #0]
    e1e4:	mov.w	r5, #0
    e1e8:	blt.w	e3ca <_svfprintf_r+0x130a>
    e1ec:	bic.w	r1, r1, #128	; 0x80
    e1f0:	str	r1, [sp, #12]
    e1f2:	orrs.w	r1, r4, r5
    e1f6:	str	r3, [sp, #40]	; 0x28
    e1f8:	mov	r7, r2
    e1fa:	bne.w	d41c <_svfprintf_r+0x35c>
    e1fe:	b.w	d7ec <_svfprintf_r+0x72c>
    e202:	ldr	r3, [sp, #12]
    e204:	ldr	r2, [sp, #40]	; 0x28
    e206:	tst.w	r3, #64	; 0x40
    e20a:	mov	r3, r2
    e20c:	beq.w	e3d4 <_svfprintf_r+0x1314>
    e210:	adds	r3, #4
    e212:	ldrh	r4, [r2, #0]
    e214:	str	r3, [sp, #40]	; 0x28
    e216:	movs	r5, #0
    e218:	b.w	d826 <_svfprintf_r+0x766>
    e21c:	mov	r4, r2
    e21e:	adds	r3, #1
    e220:	ldr	r2, [sp, #44]	; 0x2c
    e222:	str	r3, [sp, #144]	; 0x90
    e224:	add	r4, r5
    e226:	cmp	r3, #7
    e228:	str	r4, [sp, #148]	; 0x94
    e22a:	stmia.w	r9, {r2, r5}
    e22e:	bgt.w	dee6 <_svfprintf_r+0xe26>
    e232:	add.w	r9, r9, #8
    e236:	b.n	defc <_svfprintf_r+0xe3c>
    e238:	.word	0x00010a24
    e23c:	movs	r7, #0
    e23e:	cmp	fp, r7
    e240:	strb.w	r7, [sp, #111]	; 0x6f
    e244:	blt.w	da38 <_svfprintf_r+0x978>
    e248:	ldr	r3, [sp, #12]
    e24a:	bic.w	r3, r3, #128	; 0x80
    e24e:	str	r3, [sp, #12]
    e250:	b.w	d9d4 <_svfprintf_r+0x914>
    e254:	add	r2, sp, #140	; 0x8c
    e256:	ldr	r1, [sp, #20]
    e258:	ldr	r0, [sp, #24]
    e25a:	bl	10148 <__ssprint_r>
    e25e:	cmp	r0, #0
    e260:	bne.w	d2b4 <_svfprintf_r+0x1f4>
    e264:	ldr	r4, [sp, #148]	; 0x94
    e266:	add.w	r9, sp, #192	; 0xc0
    e26a:	b.n	da7c <_svfprintf_r+0x9bc>
    e26c:	ldr	r7, [sp, #40]	; 0x28
    e26e:	b.w	da2a <_svfprintf_r+0x96a>
    e272:	ldr	r3, [sp, #144]	; 0x90
    e274:	ldr	r2, [pc, #736]	; (e558 <_svfprintf_r+0x1498>)
    e276:	str.w	r2, [r9]
    e27a:	adds	r3, #1
    e27c:	adds	r4, #1
    e27e:	movs	r2, #1
    e280:	cmp	r3, #7
    e282:	str	r4, [sp, #148]	; 0x94
    e284:	str	r3, [sp, #144]	; 0x90
    e286:	str.w	r2, [r9, #4]
    e28a:	bgt.w	e3a4 <_svfprintf_r+0x12e4>
    e28e:	add.w	r9, r9, #8
    e292:	cbnz	r5, e2a0 <_svfprintf_r+0x11e0>
    e294:	ldr	r3, [sp, #56]	; 0x38
    e296:	cbnz	r3, e2a0 <_svfprintf_r+0x11e0>
    e298:	ldr	r3, [sp, #12]
    e29a:	lsls	r7, r3, #31
    e29c:	bpl.w	d5ec <_svfprintf_r+0x52c>
    e2a0:	ldr	r3, [sp, #144]	; 0x90
    e2a2:	ldr	r1, [sp, #72]	; 0x48
    e2a4:	ldr	r2, [sp, #76]	; 0x4c
    e2a6:	str.w	r2, [r9]
    e2aa:	adds	r3, #1
    e2ac:	add	r4, r1
    e2ae:	cmp	r3, #7
    e2b0:	str	r4, [sp, #148]	; 0x94
    e2b2:	str.w	r1, [r9, #4]
    e2b6:	str	r3, [sp, #144]	; 0x90
    e2b8:	bgt.w	e656 <_svfprintf_r+0x1596>
    e2bc:	add.w	r9, r9, #8
    e2c0:	negs	r5, r5
    e2c2:	cmp	r5, #0
    e2c4:	ble.w	e41c <_svfprintf_r+0x135c>
    e2c8:	ldr	r2, [pc, #656]	; (e55c <_svfprintf_r+0x149c>)
    e2ca:	str	r2, [sp, #44]	; 0x2c
    e2cc:	cmp	r5, #16
    e2ce:	ble.w	e464 <_svfprintf_r+0x13a4>
    e2d2:	mov	r2, r4
    e2d4:	movs	r7, #16
    e2d6:	ldr.w	fp, [sp, #24]
    e2da:	ldr	r4, [sp, #20]
    e2dc:	b.n	e2ea <_svfprintf_r+0x122a>
    e2de:	add.w	r9, r9, #8
    e2e2:	subs	r5, #16
    e2e4:	cmp	r5, #16
    e2e6:	ble.w	e462 <_svfprintf_r+0x13a2>
    e2ea:	adds	r3, #1
    e2ec:	adds	r2, #16
    e2ee:	cmp	r3, #7
    e2f0:	str	r2, [sp, #148]	; 0x94
    e2f2:	str	r3, [sp, #144]	; 0x90
    e2f4:	str.w	sl, [r9]
    e2f8:	str.w	r7, [r9, #4]
    e2fc:	ble.n	e2de <_svfprintf_r+0x121e>
    e2fe:	add	r2, sp, #140	; 0x8c
    e300:	mov	r1, r4
    e302:	mov	r0, fp
    e304:	bl	10148 <__ssprint_r>
    e308:	cmp	r0, #0
    e30a:	bne.w	d2b4 <_svfprintf_r+0x1f4>
    e30e:	ldr	r2, [sp, #148]	; 0x94
    e310:	ldr	r3, [sp, #144]	; 0x90
    e312:	add.w	r9, sp, #192	; 0xc0
    e316:	b.n	e2e2 <_svfprintf_r+0x1222>
    e318:	ldr	r2, [sp, #12]
    e31a:	b.w	d790 <_svfprintf_r+0x6d0>
    e31e:	ldr	r2, [sp, #12]
    e320:	b.n	de3a <_svfprintf_r+0xd7a>
    e322:	ldr	r3, [sp, #12]
    e324:	orr.w	r3, r3, #32
    e328:	str	r3, [sp, #12]
    e32a:	add.w	r8, r8, #1
    e32e:	ldrb.w	r3, [r8]
    e332:	b.w	d174 <_svfprintf_r+0xb4>
    e336:	add	r2, sp, #140	; 0x8c
    e338:	ldr	r1, [sp, #20]
    e33a:	ldr	r0, [sp, #24]
    e33c:	bl	10148 <__ssprint_r>
    e340:	cmp	r0, #0
    e342:	bne.w	d2b4 <_svfprintf_r+0x1f4>
    e346:	ldr	r4, [sp, #148]	; 0x94
    e348:	add.w	r9, sp, #192	; 0xc0
    e34c:	b.w	daac <_svfprintf_r+0x9ec>
    e350:	movs	r1, #64	; 0x40
    e352:	ldr	r0, [sp, #24]
    e354:	bl	c1bc <_malloc_r>
    e358:	ldr	r2, [sp, #20]
    e35a:	str	r0, [r2, #0]
    e35c:	str	r0, [r2, #16]
    e35e:	cmp	r0, #0
    e360:	beq.w	e74a <_svfprintf_r+0x168a>
    e364:	ldr	r2, [sp, #20]
    e366:	movs	r3, #64	; 0x40
    e368:	str	r3, [r2, #20]
    e36a:	b.w	d0ee <_svfprintf_r+0x2e>
    e36e:	add	r2, sp, #132	; 0x84
    e370:	add	r3, sp, #120	; 0x78
    e372:	str	r2, [sp, #4]
    e374:	str	r3, [sp, #0]
    e376:	mov	r2, fp
    e378:	add	r3, sp, #116	; 0x74
    e37a:	movs	r1, #3
    e37c:	vldr	d0, [sp, #96]	; 0x60
    e380:	ldr	r0, [sp, #24]
    e382:	bl	ea40 <_dtoa_r>
    e386:	mov	r5, fp
    e388:	mov	r6, r0
    e38a:	ldr	r3, [sp, #52]	; 0x34
    e38c:	cmp	r3, #70	; 0x46
    e38e:	add.w	r4, r6, r5
    e392:	bne.w	e11a <_svfprintf_r+0x105a>
    e396:	ldrb	r3, [r6, #0]
    e398:	cmp	r3, #48	; 0x30
    e39a:	beq.w	e6ac <_svfprintf_r+0x15ec>
    e39e:	ldr	r5, [sp, #116]	; 0x74
    e3a0:	add	r4, r5
    e3a2:	b.n	e11a <_svfprintf_r+0x105a>
    e3a4:	add	r2, sp, #140	; 0x8c
    e3a6:	ldr	r1, [sp, #20]
    e3a8:	ldr	r0, [sp, #24]
    e3aa:	bl	10148 <__ssprint_r>
    e3ae:	cmp	r0, #0
    e3b0:	bne.w	d2b4 <_svfprintf_r+0x1f4>
    e3b4:	ldr	r5, [sp, #116]	; 0x74
    e3b6:	ldr	r4, [sp, #148]	; 0x94
    e3b8:	add.w	r9, sp, #192	; 0xc0
    e3bc:	b.n	e292 <_svfprintf_r+0x11d2>
    e3be:	cmp.w	fp, #0
    e3c2:	it	eq
    e3c4:	moveq.w	fp, #1
    e3c8:	b.n	e0ba <_svfprintf_r+0xffa>
    e3ca:	str	r3, [sp, #40]	; 0x28
    e3cc:	mov	r7, r2
    e3ce:	b.n	de8a <_svfprintf_r+0xdca>
    e3d0:	str	r3, [sp, #40]	; 0x28
    e3d2:	b.n	e1c2 <_svfprintf_r+0x1102>
    e3d4:	adds	r3, #4
    e3d6:	ldr	r4, [r2, #0]
    e3d8:	str	r3, [sp, #40]	; 0x28
    e3da:	movs	r5, #0
    e3dc:	b.w	d826 <_svfprintf_r+0x766>
    e3e0:	movs	r7, #45	; 0x2d
    e3e2:	str	r3, [sp, #16]
    e3e4:	ldr	r3, [sp, #44]	; 0x2c
    e3e6:	str	r3, [sp, #12]
    e3e8:	strb.w	r7, [sp, #111]	; 0x6f
    e3ec:	mov.w	fp, #0
    e3f0:	b.w	d466 <_svfprintf_r+0x3a6>
    e3f4:	mov	r0, r6
    e3f6:	bl	cf40 <strlen>
    e3fa:	mov	fp, r4
    e3fc:	mov	r3, r0
    e3fe:	str	r0, [sp, #36]	; 0x24
    e400:	b.w	d948 <_svfprintf_r+0x888>
    e404:	add	r2, sp, #140	; 0x8c
    e406:	ldr	r1, [sp, #20]
    e408:	ldr	r0, [sp, #24]
    e40a:	bl	10148 <__ssprint_r>
    e40e:	cmp	r0, #0
    e410:	bne.w	d2b4 <_svfprintf_r+0x1f4>
    e414:	ldr	r4, [sp, #148]	; 0x94
    e416:	ldr	r3, [sp, #144]	; 0x90
    e418:	add.w	r9, sp, #192	; 0xc0
    e41c:	ldr	r1, [sp, #56]	; 0x38
    e41e:	str.w	r6, [r9]
    e422:	adds	r3, #1
    e424:	add	r4, r1
    e426:	cmp	r3, #7
    e428:	str	r4, [sp, #148]	; 0x94
    e42a:	str	r3, [sp, #144]	; 0x90
    e42c:	str.w	r1, [r9, #4]
    e430:	ble.w	d5e8 <_svfprintf_r+0x528>
    e434:	b.w	dc2e <_svfprintf_r+0xb6e>
    e438:	ldr	r3, [sp, #116]	; 0x74
    e43a:	adds	r5, r3, #3
    e43c:	blt.n	e47c <_svfprintf_r+0x13bc>
    e43e:	cmp	fp, r3
    e440:	blt.n	e47c <_svfprintf_r+0x13bc>
    e442:	str	r3, [sp, #60]	; 0x3c
    e444:	b.n	e15e <_svfprintf_r+0x109e>
    e446:	mov	r3, r4
    e448:	b.n	e140 <_svfprintf_r+0x1080>
    e44a:	add	r2, sp, #140	; 0x8c
    e44c:	ldr	r1, [sp, #20]
    e44e:	ldr	r0, [sp, #24]
    e450:	bl	10148 <__ssprint_r>
    e454:	cmp	r0, #0
    e456:	bne.w	d2b4 <_svfprintf_r+0x1f4>
    e45a:	ldr	r4, [sp, #148]	; 0x94
    e45c:	add.w	r9, sp, #192	; 0xc0
    e460:	b.n	dcfc <_svfprintf_r+0xc3c>
    e462:	mov	r4, r2
    e464:	adds	r3, #1
    e466:	ldr	r2, [sp, #44]	; 0x2c
    e468:	str	r3, [sp, #144]	; 0x90
    e46a:	add	r4, r5
    e46c:	cmp	r3, #7
    e46e:	str	r4, [sp, #148]	; 0x94
    e470:	stmia.w	r9, {r2, r5}
    e474:	bgt.n	e404 <_svfprintf_r+0x1344>
    e476:	add.w	r9, r9, #8
    e47a:	b.n	e41c <_svfprintf_r+0x135c>
    e47c:	ldr	r2, [sp, #52]	; 0x34
    e47e:	subs	r2, #2
    e480:	str	r2, [sp, #52]	; 0x34
    e482:	subs	r3, #1
    e484:	cmp	r3, #0
    e486:	ldrb.w	r2, [sp, #52]	; 0x34
    e48a:	str	r3, [sp, #116]	; 0x74
    e48c:	it	lt
    e48e:	neglt	r3, r3
    e490:	strb.w	r2, [sp, #124]	; 0x7c
    e494:	ite	lt
    e496:	movlt	r2, #45	; 0x2d
    e498:	movge	r2, #43	; 0x2b
    e49a:	cmp	r3, #9
    e49c:	strb.w	r2, [sp, #125]	; 0x7d
    e4a0:	ble.w	e67a <_svfprintf_r+0x15ba>
    e4a4:	add.w	r0, sp, #139	; 0x8b
    e4a8:	mov	r4, r0
    e4aa:	ldr	r2, [pc, #180]	; (e560 <_svfprintf_r+0x14a0>)
    e4ac:	smull	r2, r1, r2, r3
    e4b0:	asrs	r2, r3, #31
    e4b2:	rsb	r2, r2, r1, asr #2
    e4b6:	add.w	r1, r2, r2, lsl #2
    e4ba:	sub.w	r3, r3, r1, lsl #1
    e4be:	add.w	r1, r3, #48	; 0x30
    e4c2:	cmp	r2, #9
    e4c4:	mov	r3, r2
    e4c6:	strb.w	r1, [r4, #-1]!
    e4ca:	bgt.n	e4aa <_svfprintf_r+0x13ea>
    e4cc:	mov	r1, r4
    e4ce:	adds	r3, #48	; 0x30
    e4d0:	uxtb	r2, r3
    e4d2:	strb.w	r2, [r1, #-1]!
    e4d6:	cmp	r0, r1
    e4d8:	bls.w	e744 <_svfprintf_r+0x1684>
    e4dc:	add.w	r1, sp, #126	; 0x7e
    e4e0:	mov	r3, r4
    e4e2:	b.n	e4e8 <_svfprintf_r+0x1428>
    e4e4:	ldrb.w	r2, [r3], #1
    e4e8:	strb.w	r2, [r1], #1
    e4ec:	cmp	r0, r3
    e4ee:	bne.n	e4e4 <_svfprintf_r+0x1424>
    e4f0:	adds	r3, r0, #1
    e4f2:	subs	r3, r3, r4
    e4f4:	add.w	r2, sp, #126	; 0x7e
    e4f8:	add	r3, r2
    e4fa:	add	r2, sp, #124	; 0x7c
    e4fc:	subs	r3, r3, r2
    e4fe:	ldr	r2, [sp, #56]	; 0x38
    e500:	str	r3, [sp, #84]	; 0x54
    e502:	cmp	r2, #1
    e504:	add	r3, r2
    e506:	str	r3, [sp, #36]	; 0x24
    e508:	ble.w	e6da <_svfprintf_r+0x161a>
    e50c:	ldr	r3, [sp, #36]	; 0x24
    e50e:	ldr	r2, [sp, #72]	; 0x48
    e510:	add	r3, r2
    e512:	movs	r2, #0
    e514:	str	r3, [sp, #36]	; 0x24
    e516:	str	r2, [sp, #60]	; 0x3c
    e518:	bic.w	r3, r3, r3, asr #31
    e51c:	b.n	e17a <_svfprintf_r+0x10ba>
    e51e:	add	r2, sp, #140	; 0x8c
    e520:	ldr	r1, [sp, #20]
    e522:	ldr	r0, [sp, #24]
    e524:	bl	10148 <__ssprint_r>
    e528:	cmp	r0, #0
    e52a:	bne.w	d2b4 <_svfprintf_r+0x1f4>
    e52e:	ldr	r3, [sp, #116]	; 0x74
    e530:	ldr	r4, [sp, #148]	; 0x94
    e532:	add.w	r9, sp, #192	; 0xc0
    e536:	b.n	df10 <_svfprintf_r+0xe50>
    e538:	add	r2, sp, #140	; 0x8c
    e53a:	ldr	r1, [sp, #20]
    e53c:	ldr	r0, [sp, #24]
    e53e:	bl	10148 <__ssprint_r>
    e542:	cmp	r0, #0
    e544:	bne.w	d2b4 <_svfprintf_r+0x1f4>
    e548:	ldr	r3, [sp, #116]	; 0x74
    e54a:	ldr	r2, [sp, #56]	; 0x38
    e54c:	ldr	r4, [sp, #148]	; 0x94
    e54e:	subs	r3, r2, r3
    e550:	add.w	r9, sp, #192	; 0xc0
    e554:	b.n	df40 <_svfprintf_r+0xe80>
    e556:	nop
    e558:	.word	0x00010a74
    e55c:	.word	0x00010a24
    e560:	.word	0x66666667
    e564:	cmp	r5, #6
    e566:	mov	r3, r5
    e568:	it	cs
    e56a:	movcs	r3, #6
    e56c:	str	r3, [sp, #36]	; 0x24
    e56e:	bic.w	r3, r3, r3, asr #31
    e572:	mov	fp, r6
    e574:	str	r7, [sp, #40]	; 0x28
    e576:	str	r6, [sp, #60]	; 0x3c
    e578:	mov	r7, r6
    e57a:	str	r3, [sp, #16]
    e57c:	ldr	r6, [pc, #536]	; (e798 <_svfprintf_r+0x16d8>)
    e57e:	b.w	d464 <_svfprintf_r+0x3a4>
    e582:	mov.w	fp, #6
    e586:	b.n	e0ba <_svfprintf_r+0xffa>
    e588:	add	r2, sp, #132	; 0x84
    e58a:	add	r3, sp, #120	; 0x78
    e58c:	str	r2, [sp, #4]
    e58e:	str	r3, [sp, #0]
    e590:	mov	r2, fp
    e592:	add	r3, sp, #116	; 0x74
    e594:	movs	r1, #3
    e596:	vldr	d0, [sp, #96]	; 0x60
    e59a:	ldr	r0, [sp, #24]
    e59c:	bl	ea40 <_dtoa_r>
    e5a0:	mov	r5, fp
    e5a2:	mov	r6, r0
    e5a4:	add.w	r4, r0, fp
    e5a8:	b.n	e396 <_svfprintf_r+0x12d6>
    e5aa:	movs	r7, #45	; 0x2d
    e5ac:	strb.w	r7, [sp, #111]	; 0x6f
    e5b0:	b.w	d70a <_svfprintf_r+0x64a>
    e5b4:	str	r3, [sp, #12]
    e5b6:	b.w	d862 <_svfprintf_r+0x7a2>
    e5ba:	ldrd	r1, r2, [sp, #64]	; 0x40
    e5be:	add.w	r3, r2, #2147483648	; 0x80000000
    e5c2:	str	r3, [sp, #100]	; 0x64
    e5c4:	movs	r3, #45	; 0x2d
    e5c6:	str	r1, [sp, #96]	; 0x60
    e5c8:	str	r3, [sp, #16]
    e5ca:	b.n	e0d6 <_svfprintf_r+0x1016>
    e5cc:	ldr	r2, [sp, #72]	; 0x48
    e5ce:	ldr	r3, [sp, #56]	; 0x38
    e5d0:	add	r3, r2
    e5d2:	ldr	r2, [sp, #60]	; 0x3c
    e5d4:	str	r3, [sp, #36]	; 0x24
    e5d6:	cmp	r2, #0
    e5d8:	ble.w	e6ee <_svfprintf_r+0x162e>
    e5dc:	movs	r2, #103	; 0x67
    e5de:	bic.w	r3, r3, r3, asr #31
    e5e2:	str	r2, [sp, #52]	; 0x34
    e5e4:	b.n	e17a <_svfprintf_r+0x10ba>
    e5e6:	ldr	r3, [sp, #52]	; 0x34
    e5e8:	cmp	r3, #71	; 0x47
    e5ea:	bne.w	e118 <_svfprintf_r+0x1058>
    e5ee:	ldr	r3, [sp, #12]
    e5f0:	lsls	r3, r3, #31
    e5f2:	bmi.w	e38a <_svfprintf_r+0x12ca>
    e5f6:	ldr	r3, [sp, #132]	; 0x84
    e5f8:	cmp	r7, #71	; 0x47
    e5fa:	sub.w	r3, r3, r6
    e5fe:	str	r3, [sp, #56]	; 0x38
    e600:	beq.w	e438 <_svfprintf_r+0x1378>
    e604:	ldr	r3, [sp, #116]	; 0x74
    e606:	b.n	e482 <_svfprintf_r+0x13c2>
    e608:	bic.w	r3, r5, r5, asr #31
    e60c:	str	r7, [sp, #40]	; 0x28
    e60e:	str	r3, [sp, #16]
    e610:	str	r5, [sp, #36]	; 0x24
    e612:	mov	fp, r0
    e614:	str	r0, [sp, #60]	; 0x3c
    e616:	ldrb.w	r7, [sp, #111]	; 0x6f
    e61a:	b.w	d464 <_svfprintf_r+0x3a4>
    e61e:	cmp	r3, #0
    e620:	ble.n	e6fe <_svfprintf_r+0x163e>
    e622:	cmp.w	fp, #0
    e626:	bne.n	e6c8 <_svfprintf_r+0x1608>
    e628:	ldr	r2, [sp, #12]
    e62a:	lsls	r4, r2, #31
    e62c:	bmi.n	e6c8 <_svfprintf_r+0x1608>
    e62e:	mov	r2, r3
    e630:	str	r2, [sp, #36]	; 0x24
    e632:	bic.w	r3, r3, r3, asr #31
    e636:	b.n	e17a <_svfprintf_r+0x10ba>
    e638:	ldr	r3, [sp, #12]
    e63a:	lsls	r3, r3, #31
    e63c:	mov	r7, fp
    e63e:	bpl.n	e64c <_svfprintf_r+0x158c>
    e640:	add	r6, sp, #256	; 0x100
    e642:	movs	r3, #48	; 0x30
    e644:	strb.w	r3, [r6, #-65]!
    e648:	b.w	d450 <_svfprintf_r+0x390>
    e64c:	str.w	fp, [sp, #36]	; 0x24
    e650:	add	r6, sp, #192	; 0xc0
    e652:	b.w	d456 <_svfprintf_r+0x396>
    e656:	add	r2, sp, #140	; 0x8c
    e658:	ldr	r1, [sp, #20]
    e65a:	ldr	r0, [sp, #24]
    e65c:	bl	10148 <__ssprint_r>
    e660:	cmp	r0, #0
    e662:	bne.w	d2b4 <_svfprintf_r+0x1f4>
    e666:	ldr	r5, [sp, #116]	; 0x74
    e668:	ldr	r4, [sp, #148]	; 0x94
    e66a:	ldr	r3, [sp, #144]	; 0x90
    e66c:	add.w	r9, sp, #192	; 0xc0
    e670:	b.n	e2c0 <_svfprintf_r+0x1200>
    e672:	mov	r8, r4
    e674:	movs	r5, #0
    e676:	b.w	d178 <_svfprintf_r+0xb8>
    e67a:	adds	r3, #48	; 0x30
    e67c:	movs	r2, #48	; 0x30
    e67e:	strb.w	r3, [sp, #127]	; 0x7f
    e682:	strb.w	r2, [sp, #126]	; 0x7e
    e686:	add	r3, sp, #128	; 0x80
    e688:	b.n	e4fa <_svfprintf_r+0x143a>
    e68a:	ldr	r3, [sp, #132]	; 0x84
    e68c:	b.n	e140 <_svfprintf_r+0x1080>
    e68e:	ldr	r2, [sp, #72]	; 0x48
    e690:	ldr	r3, [sp, #60]	; 0x3c
    e692:	add	r3, r2
    e694:	movs	r2, #103	; 0x67
    e696:	str	r3, [sp, #36]	; 0x24
    e698:	str	r2, [sp, #52]	; 0x34
    e69a:	bic.w	r3, r3, r3, asr #31
    e69e:	b.n	e17a <_svfprintf_r+0x10ba>
    e6a0:	ldr	r6, [pc, #248]	; (e79c <_svfprintf_r+0x16dc>)
    e6a2:	ldr	r3, [pc, #252]	; (e7a0 <_svfprintf_r+0x16e0>)
    e6a4:	ldrb.w	r7, [sp, #111]	; 0x6f
    e6a8:	b.w	d70e <_svfprintf_r+0x64e>
    e6ac:	movs	r2, #0
    e6ae:	movs	r3, #0
    e6b0:	ldrd	r0, r1, [sp, #96]	; 0x60
    e6b4:	bl	bd3c <__aeabi_dcmpeq>
    e6b8:	cmp	r0, #0
    e6ba:	bne.w	e39e <_svfprintf_r+0x12de>
    e6be:	rsb	r5, r5, #1
    e6c2:	str	r5, [sp, #116]	; 0x74
    e6c4:	add	r4, r5
    e6c6:	b.n	e11a <_svfprintf_r+0x105a>
    e6c8:	ldr	r3, [sp, #60]	; 0x3c
    e6ca:	ldr	r2, [sp, #72]	; 0x48
    e6cc:	adds	r5, r3, r2
    e6ce:	add.w	r3, r5, fp
    e6d2:	str	r3, [sp, #36]	; 0x24
    e6d4:	bic.w	r3, r3, r3, asr #31
    e6d8:	b.n	e17a <_svfprintf_r+0x10ba>
    e6da:	ldr	r3, [sp, #12]
    e6dc:	ands.w	r3, r3, #1
    e6e0:	bne.w	e50c <_svfprintf_r+0x144c>
    e6e4:	str	r3, [sp, #60]	; 0x3c
    e6e6:	ldr	r3, [sp, #36]	; 0x24
    e6e8:	bic.w	r3, r3, r3, asr #31
    e6ec:	b.n	e17a <_svfprintf_r+0x10ba>
    e6ee:	ldr	r3, [sp, #60]	; 0x3c
    e6f0:	ldr	r2, [sp, #36]	; 0x24
    e6f2:	rsb	r3, r3, #1
    e6f6:	add	r2, r3
    e6f8:	mov	r3, r2
    e6fa:	str	r2, [sp, #36]	; 0x24
    e6fc:	b.n	e5dc <_svfprintf_r+0x151c>
    e6fe:	cmp.w	fp, #0
    e702:	bne.n	e70a <_svfprintf_r+0x164a>
    e704:	ldr	r3, [sp, #12]
    e706:	lsls	r0, r3, #31
    e708:	bpl.n	e71a <_svfprintf_r+0x165a>
    e70a:	ldr	r3, [sp, #72]	; 0x48
    e70c:	adds	r5, r3, #1
    e70e:	add.w	r3, r5, fp
    e712:	str	r3, [sp, #36]	; 0x24
    e714:	bic.w	r3, r3, r3, asr #31
    e718:	b.n	e17a <_svfprintf_r+0x10ba>
    e71a:	movs	r3, #1
    e71c:	str	r3, [sp, #36]	; 0x24
    e71e:	b.n	e17a <_svfprintf_r+0x10ba>
    e720:	ldr	r0, [sp, #40]	; 0x28
    e722:	ldrb.w	r3, [r8, #1]
    e726:	ldr	r5, [r0, #0]
    e728:	adds	r0, #4
    e72a:	cmp	r5, #0
    e72c:	str	r0, [sp, #40]	; 0x28
    e72e:	mov	r8, r4
    e730:	bge.w	d174 <_svfprintf_r+0xb4>
    e734:	mov.w	r5, #4294967295
    e738:	b.w	d174 <_svfprintf_r+0xb4>
    e73c:	strb.w	r1, [sp, #111]	; 0x6f
    e740:	b.w	d2d6 <_svfprintf_r+0x216>
    e744:	add.w	r3, sp, #126	; 0x7e
    e748:	b.n	e4fa <_svfprintf_r+0x143a>
    e74a:	ldr	r2, [sp, #24]
    e74c:	movs	r3, #12
    e74e:	str	r3, [r2, #0]
    e750:	mov.w	r0, #4294967295
    e754:	b.w	d2c6 <_svfprintf_r+0x206>
    e758:	strb.w	r1, [sp, #111]	; 0x6f
    e75c:	b.w	d3d0 <_svfprintf_r+0x310>
    e760:	strb.w	r1, [sp, #111]	; 0x6f
    e764:	b.w	d69c <_svfprintf_r+0x5dc>
    e768:	strb.w	r1, [sp, #111]	; 0x6f
    e76c:	b.w	d80a <_svfprintf_r+0x74a>
    e770:	strb.w	r1, [sp, #111]	; 0x6f
    e774:	b.w	d7ae <_svfprintf_r+0x6ee>
    e778:	strb.w	r1, [sp, #111]	; 0x6f
    e77c:	b.w	d75a <_svfprintf_r+0x69a>
    e780:	strb.w	r1, [sp, #111]	; 0x6f
    e784:	b.w	d9f2 <_svfprintf_r+0x932>
    e788:	strb.w	r1, [sp, #111]	; 0x6f
    e78c:	b.w	d9b0 <_svfprintf_r+0x8f0>
    e790:	strb.w	r1, [sp, #111]	; 0x6f
    e794:	b.w	d974 <_svfprintf_r+0x8b4>
    e798:	.word	0x00010a6c
    e79c:	.word	0x00010a40
    e7a0:	.word	0x00010a3c

0000e7a4 <_vdprintf_r>:
    e7a4:	push	{r4, r5, r6, r7, lr}
    e7a6:	sub.w	sp, sp, #532	; 0x214
    e7aa:	add	r5, sp, #16
    e7ac:	str	r3, [sp, #0]
    e7ae:	mov	r7, r1
    e7b0:	mov	r3, r2
    e7b2:	mov.w	r4, #512	; 0x200
    e7b6:	add	r2, sp, #12
    e7b8:	mov	r1, r5
    e7ba:	str	r4, [sp, #12]
    e7bc:	mov	r6, r0
    e7be:	bl	10248 <_vasnprintf_r>
    e7c2:	cbz	r0, e7e8 <_vdprintf_r+0x44>
    e7c4:	mov	r4, r0
    e7c6:	mov	r2, r0
    e7c8:	mov	r1, r7
    e7ca:	ldr	r3, [sp, #12]
    e7cc:	mov	r0, r6
    e7ce:	bl	e824 <_write_r>
    e7d2:	cmp	r4, r5
    e7d4:	str	r0, [sp, #12]
    e7d6:	beq.n	e7e2 <_vdprintf_r+0x3e>
    e7d8:	mov	r0, r6
    e7da:	mov	r1, r4
    e7dc:	bl	f938 <_free_r>
    e7e0:	ldr	r0, [sp, #12]
    e7e2:	add.w	sp, sp, #532	; 0x214
    e7e6:	pop	{r4, r5, r6, r7, pc}
    e7e8:	mov.w	r0, #4294967295
    e7ec:	b.n	e7e2 <_vdprintf_r+0x3e>
    e7ee:	nop

0000e7f0 <vdprintf>:
    e7f0:	push	{r4}
    e7f2:	ldr	r4, [pc, #16]	; (e804 <vdprintf+0x14>)
    e7f4:	mov	r3, r2
    e7f6:	mov	r2, r1
    e7f8:	mov	r1, r0
    e7fa:	ldr	r0, [r4, #0]
    e7fc:	ldr.w	r4, [sp], #4
    e800:	b.w	e7a4 <_vdprintf_r>
    e804:	.word	0x1fff0ed0

0000e808 <__ascii_wctomb>:
    e808:	cbz	r1, e814 <__ascii_wctomb+0xc>
    e80a:	cmp	r2, #255	; 0xff
    e80c:	bhi.n	e818 <__ascii_wctomb+0x10>
    e80e:	strb	r2, [r1, #0]
    e810:	movs	r0, #1
    e812:	bx	lr
    e814:	mov	r0, r1
    e816:	bx	lr
    e818:	movs	r3, #138	; 0x8a
    e81a:	str	r3, [r0, #0]
    e81c:	mov.w	r0, #4294967295
    e820:	bx	lr
    e822:	nop

0000e824 <_write_r>:
    e824:	push	{r4, r5, r6, lr}
    e826:	mov	r5, r1
    e828:	ldr	r4, [pc, #32]	; (e84c <_write_r+0x28>)
    e82a:	mov	r1, r2
    e82c:	mov	r6, r0
    e82e:	mov	r2, r3
    e830:	mov	r0, r5
    e832:	movs	r3, #0
    e834:	str	r3, [r4, #0]
    e836:	bl	b270 <_write>
    e83a:	adds	r3, r0, #1
    e83c:	beq.n	e840 <_write_r+0x1c>
    e83e:	pop	{r4, r5, r6, pc}
    e840:	ldr	r3, [r4, #0]
    e842:	cmp	r3, #0
    e844:	beq.n	e83e <_write_r+0x1a>
    e846:	str	r3, [r6, #0]
    e848:	pop	{r4, r5, r6, pc}
    e84a:	nop
    e84c:	.word	0x1fff8dc4

0000e850 <__register_exitproc>:
    e850:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    e854:	ldr	r4, [pc, #148]	; (e8ec <__register_exitproc+0x9c>)
    e856:	ldr	r5, [r4, #0]
    e858:	ldr.w	r4, [r5, #328]	; 0x148
    e85c:	mov	r6, r0
    e85e:	mov	r8, r1
    e860:	mov	sl, r2
    e862:	mov	r9, r3
    e864:	cbz	r4, e8d8 <__register_exitproc+0x88>
    e866:	ldr	r0, [r4, #4]
    e868:	cmp	r0, #31
    e86a:	bgt.n	e89c <__register_exitproc+0x4c>
    e86c:	adds	r3, r0, #1
    e86e:	cbz	r6, e88e <__register_exitproc+0x3e>
    e870:	add.w	r5, r4, r0, lsl #2
    e874:	movs	r2, #1
    e876:	str.w	sl, [r5, #136]	; 0x88
    e87a:	ldr.w	r1, [r4, #392]	; 0x188
    e87e:	lsls	r2, r0
    e880:	orrs	r1, r2
    e882:	cmp	r6, #2
    e884:	str.w	r1, [r4, #392]	; 0x188
    e888:	str.w	r9, [r5, #264]	; 0x108
    e88c:	beq.n	e8cc <__register_exitproc+0x7c>
    e88e:	adds	r0, #2
    e890:	str	r3, [r4, #4]
    e892:	str.w	r8, [r4, r0, lsl #2]
    e896:	movs	r0, #0
    e898:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    e89c:	ldr	r3, [pc, #80]	; (e8f0 <__register_exitproc+0xa0>)
    e89e:	cbz	r3, e8e2 <__register_exitproc+0x92>
    e8a0:	mov.w	r0, #400	; 0x190
    e8a4:	bl	c19c <malloc>
    e8a8:	mov	r4, r0
    e8aa:	cbz	r0, e8e2 <__register_exitproc+0x92>
    e8ac:	ldr.w	r3, [r5, #328]	; 0x148
    e8b0:	movs	r7, #0
    e8b2:	stmia.w	r0, {r3, r7}
    e8b6:	str.w	r4, [r5, #328]	; 0x148
    e8ba:	mov	r0, r7
    e8bc:	movs	r3, #1
    e8be:	str.w	r7, [r4, #392]	; 0x188
    e8c2:	str.w	r7, [r4, #396]	; 0x18c
    e8c6:	cmp	r6, #0
    e8c8:	beq.n	e88e <__register_exitproc+0x3e>
    e8ca:	b.n	e870 <__register_exitproc+0x20>
    e8cc:	ldr.w	r1, [r4, #396]	; 0x18c
    e8d0:	orrs	r2, r1
    e8d2:	str.w	r2, [r4, #396]	; 0x18c
    e8d6:	b.n	e88e <__register_exitproc+0x3e>
    e8d8:	add.w	r4, r5, #332	; 0x14c
    e8dc:	str.w	r4, [r5, #328]	; 0x148
    e8e0:	b.n	e866 <__register_exitproc+0x16>
    e8e2:	mov.w	r0, #4294967295
    e8e6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    e8ea:	nop
    e8ec:	.word	0x00010a10
    e8f0:	.word	0x0000c19d

0000e8f4 <register_fini>:
    e8f4:	ldr	r3, [pc, #8]	; (e900 <register_fini+0xc>)
    e8f6:	cbz	r3, e8fe <register_fini+0xa>
    e8f8:	ldr	r0, [pc, #8]	; (e904 <register_fini+0x10>)
    e8fa:	b.w	e908 <atexit>
    e8fe:	bx	lr
    e900:	.word	0x00000000
    e904:	.word	0x0000f875

0000e908 <atexit>:
    e908:	movs	r3, #0
    e90a:	mov	r1, r0
    e90c:	mov	r2, r3
    e90e:	mov	r0, r3
    e910:	b.w	e850 <__register_exitproc>

0000e914 <quorem>:
    e914:	ldr	r2, [r0, #16]
    e916:	ldr	r3, [r1, #16]
    e918:	cmp	r3, r2
    e91a:	bgt.w	ea38 <quorem+0x124>
    e91e:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e922:	add.w	r8, r3, #4294967295
    e926:	add.w	r7, r1, #20
    e92a:	add.w	fp, r0, #20
    e92e:	ldr.w	r2, [r7, r8, lsl #2]
    e932:	ldr.w	r3, [fp, r8, lsl #2]
    e936:	mov.w	r4, r8, lsl #2
    e93a:	sub	sp, #12
    e93c:	adds	r2, #1
    e93e:	udiv	r9, r3, r2
    e942:	add.w	r3, fp, r4
    e946:	str	r4, [sp, #0]
    e948:	add.w	sl, r7, r4
    e94c:	str	r3, [sp, #4]
    e94e:	cmp.w	r9, #0
    e952:	beq.n	e9c8 <quorem+0xb4>
    e954:	movs	r5, #0
    e956:	mov	ip, r7
    e958:	mov	lr, fp
    e95a:	mov	r3, r5
    e95c:	ldr.w	r6, [ip], #4
    e960:	ldr.w	r2, [lr]
    e964:	uxth	r4, r6
    e966:	mla	r5, r9, r4, r5
    e96a:	lsrs	r6, r6, #16
    e96c:	lsrs	r4, r5, #16
    e96e:	mla	r4, r9, r6, r4
    e972:	uxth	r5, r5
    e974:	subs	r3, r3, r5
    e976:	uxth	r6, r4
    e978:	uxtah	r3, r3, r2
    e97c:	rsb	r6, r6, r2, lsr #16
    e980:	add.w	r6, r6, r3, asr #16
    e984:	uxth	r3, r3
    e986:	orr.w	r3, r3, r6, lsl #16
    e98a:	cmp	sl, ip
    e98c:	str.w	r3, [lr], #4
    e990:	mov.w	r5, r4, lsr #16
    e994:	mov.w	r3, r6, asr #16
    e998:	bcs.n	e95c <quorem+0x48>
    e99a:	ldr	r3, [sp, #0]
    e99c:	ldr.w	r3, [fp, r3]
    e9a0:	cbnz	r3, e9c8 <quorem+0xb4>
    e9a2:	ldr	r4, [sp, #4]
    e9a4:	subs	r3, r4, #4
    e9a6:	cmp	fp, r3
    e9a8:	bcs.n	e9c4 <quorem+0xb0>
    e9aa:	ldr.w	r3, [r4, #-4]
    e9ae:	cbnz	r3, e9c4 <quorem+0xb0>
    e9b0:	sub.w	r3, r4, #8
    e9b4:	b.n	e9bc <quorem+0xa8>
    e9b6:	ldr	r2, [r3, #0]
    e9b8:	subs	r3, #4
    e9ba:	cbnz	r2, e9c4 <quorem+0xb0>
    e9bc:	cmp	fp, r3
    e9be:	add.w	r8, r8, #4294967295
    e9c2:	bcc.n	e9b6 <quorem+0xa2>
    e9c4:	str.w	r8, [r0, #16]
    e9c8:	mov	r4, r0
    e9ca:	bl	ff34 <__mcmp>
    e9ce:	cmp	r0, #0
    e9d0:	blt.n	ea30 <quorem+0x11c>
    e9d2:	add.w	r9, r9, #1
    e9d6:	mov	r5, fp
    e9d8:	movs	r3, #0
    e9da:	ldr.w	r1, [r7], #4
    e9de:	ldr	r0, [r5, #0]
    e9e0:	uxth	r2, r1
    e9e2:	subs	r2, r3, r2
    e9e4:	lsrs	r1, r1, #16
    e9e6:	uxtah	r2, r2, r0
    e9ea:	rsb	r3, r1, r0, lsr #16
    e9ee:	add.w	r3, r3, r2, asr #16
    e9f2:	uxth	r1, r2
    e9f4:	orr.w	r1, r1, r3, lsl #16
    e9f8:	cmp	sl, r7
    e9fa:	str.w	r1, [r5], #4
    e9fe:	mov.w	r3, r3, asr #16
    ea02:	bcs.n	e9da <quorem+0xc6>
    ea04:	ldr.w	r2, [fp, r8, lsl #2]
    ea08:	add.w	r3, fp, r8, lsl #2
    ea0c:	cbnz	r2, ea30 <quorem+0x11c>
    ea0e:	subs	r2, r3, #4
    ea10:	cmp	fp, r2
    ea12:	bcs.n	ea2c <quorem+0x118>
    ea14:	ldr.w	r2, [r3, #-4]
    ea18:	cbnz	r2, ea2c <quorem+0x118>
    ea1a:	subs	r3, #8
    ea1c:	b.n	ea24 <quorem+0x110>
    ea1e:	ldr	r2, [r3, #0]
    ea20:	subs	r3, #4
    ea22:	cbnz	r2, ea2c <quorem+0x118>
    ea24:	cmp	fp, r3
    ea26:	add.w	r8, r8, #4294967295
    ea2a:	bcc.n	ea1e <quorem+0x10a>
    ea2c:	str.w	r8, [r4, #16]
    ea30:	mov	r0, r9
    ea32:	add	sp, #12
    ea34:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ea38:	movs	r0, #0
    ea3a:	bx	lr
    ea3c:			; <UNDEFINED> instruction: 0xffffffff

0000ea40 <_dtoa_r>:
    ea40:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ea44:	vmov	r6, r7, d0
    ea48:	sub	sp, #108	; 0x6c
    ea4a:	ldr	r4, [r0, #64]	; 0x40
    ea4c:	ldr	r5, [sp, #144]	; 0x90
    ea4e:	str	r1, [sp, #0]
    ea50:	mov	r9, r0
    ea52:	str	r2, [sp, #20]
    ea54:	str	r3, [sp, #12]
    ea56:	vmov	sl, s0
    ea5a:	mov	fp, r7
    ea5c:	cbz	r4, ea74 <_dtoa_r+0x34>
    ea5e:	ldr	r2, [r0, #68]	; 0x44
    ea60:	str	r2, [r4, #4]
    ea62:	movs	r3, #1
    ea64:	lsls	r3, r2
    ea66:	str	r3, [r4, #8]
    ea68:	mov	r1, r4
    ea6a:	bl	fb70 <_Bfree>
    ea6e:	movs	r3, #0
    ea70:	str.w	r3, [r9, #64]	; 0x40
    ea74:	cmp.w	fp, #0
    ea78:	mov	r4, fp
    ea7a:	blt.n	eae6 <_dtoa_r+0xa6>
    ea7c:	movs	r3, #0
    ea7e:	str	r3, [r5, #0]
    ea80:	ldr	r3, [pc, #644]	; (ed08 <_dtoa_r+0x2c8>)
    ea82:	mov	r2, r3
    ea84:	ands	r3, r4
    ea86:	cmp	r3, r2
    ea88:	beq.n	eab8 <_dtoa_r+0x78>
    ea8a:	movs	r2, #0
    ea8c:	movs	r3, #0
    ea8e:	mov	r0, sl
    ea90:	mov	r1, fp
    ea92:	bl	bd3c <__aeabi_dcmpeq>
    ea96:	mov	r6, sl
    ea98:	mov	r7, fp
    ea9a:	mov	r8, r0
    ea9c:	cbz	r0, eaf2 <_dtoa_r+0xb2>
    ea9e:	ldr	r2, [sp, #12]
    eaa0:	movs	r3, #1
    eaa2:	str	r3, [r2, #0]
    eaa4:	ldr	r3, [sp, #148]	; 0x94
    eaa6:	cmp	r3, #0
    eaa8:	beq.w	ec28 <_dtoa_r+0x1e8>
    eaac:	ldr	r0, [pc, #604]	; (ed0c <_dtoa_r+0x2cc>)
    eaae:	str	r0, [r3, #0]
    eab0:	subs	r0, #1
    eab2:	add	sp, #108	; 0x6c
    eab4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    eab8:	ldr	r2, [sp, #12]
    eaba:	movw	r3, #9999	; 0x270f
    eabe:	str	r3, [r2, #0]
    eac0:	cmp.w	sl, #0
    eac4:	beq.w	ebfc <_dtoa_r+0x1bc>
    eac8:	ldr	r0, [pc, #580]	; (ed10 <_dtoa_r+0x2d0>)
    eaca:	ldr	r3, [sp, #148]	; 0x94
    eacc:	cmp	r3, #0
    eace:	beq.n	eab2 <_dtoa_r+0x72>
    ead0:	ldrb	r3, [r0, #3]
    ead2:	cmp	r3, #0
    ead4:	beq.w	ec2c <_dtoa_r+0x1ec>
    ead8:	add.w	r3, r0, #8
    eadc:	ldr	r2, [sp, #148]	; 0x94
    eade:	str	r3, [r2, #0]
    eae0:	add	sp, #108	; 0x6c
    eae2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    eae6:	movs	r3, #1
    eae8:	bic.w	r4, fp, #2147483648	; 0x80000000
    eaec:	str	r3, [r5, #0]
    eaee:	mov	fp, r4
    eaf0:	b.n	ea80 <_dtoa_r+0x40>
    eaf2:	add	r2, sp, #96	; 0x60
    eaf4:	add	r1, sp, #100	; 0x64
    eaf6:	vmov	d0, r6, r7
    eafa:	mov	r0, r9
    eafc:	bl	1008c <__d2b>
    eb00:	lsrs	r5, r4, #20
    eb02:	str	r0, [sp, #40]	; 0x28
    eb04:	bne.w	ec0e <_dtoa_r+0x1ce>
    eb08:	ldr	r5, [sp, #96]	; 0x60
    eb0a:	ldr	r6, [sp, #100]	; 0x64
    eb0c:	add	r6, r5
    eb0e:	addw	r3, r6, #1074	; 0x432
    eb12:	cmp	r3, #32
    eb14:	ble.w	f028 <_dtoa_r+0x5e8>
    eb18:	rsb	r3, r3, #64	; 0x40
    eb1c:	addw	r0, r6, #1042	; 0x412
    eb20:	lsls	r4, r3
    eb22:	lsr.w	r0, sl, r0
    eb26:	orrs	r0, r4
    eb28:	bl	b780 <__aeabi_ui2d>
    eb2c:	movs	r3, #1
    eb2e:	subs	r4, r6, #1
    eb30:	sub.w	r1, r1, #32505856	; 0x1f00000
    eb34:	str	r3, [sp, #60]	; 0x3c
    eb36:	movs	r2, #0
    eb38:	ldr	r3, [pc, #472]	; (ed14 <_dtoa_r+0x2d4>)
    eb3a:	bl	b504 <__aeabi_dsub>
    eb3e:	add	r3, pc, #432	; (adr r3, ecf0 <_dtoa_r+0x2b0>)
    eb40:	ldrd	r2, r3, [r3]
    eb44:	bl	b86c <__aeabi_dmul>
    eb48:	add	r3, pc, #428	; (adr r3, ecf8 <_dtoa_r+0x2b8>)
    eb4a:	ldrd	r2, r3, [r3]
    eb4e:	bl	b508 <__adddf3>
    eb52:	mov	r6, r0
    eb54:	mov	r0, r4
    eb56:	mov	r7, r1
    eb58:	bl	b7a0 <__aeabi_i2d>
    eb5c:	add	r3, pc, #416	; (adr r3, ed00 <_dtoa_r+0x2c0>)
    eb5e:	ldrd	r2, r3, [r3]
    eb62:	bl	b86c <__aeabi_dmul>
    eb66:	mov	r2, r0
    eb68:	mov	r3, r1
    eb6a:	mov	r0, r6
    eb6c:	mov	r1, r7
    eb6e:	bl	b508 <__adddf3>
    eb72:	mov	r6, r0
    eb74:	mov	r7, r1
    eb76:	bl	bdcc <__aeabi_d2iz>
    eb7a:	movs	r2, #0
    eb7c:	str	r0, [sp, #16]
    eb7e:	movs	r3, #0
    eb80:	mov	r0, r6
    eb82:	mov	r1, r7
    eb84:	bl	bd50 <__aeabi_dcmplt>
    eb88:	cmp	r0, #0
    eb8a:	bne.w	efde <_dtoa_r+0x59e>
    eb8e:	ldr	r6, [sp, #16]
    eb90:	cmp	r6, #22
    eb92:	bhi.w	efd8 <_dtoa_r+0x598>
    eb96:	ldr	r3, [pc, #384]	; (ed18 <_dtoa_r+0x2d8>)
    eb98:	add.w	r3, r3, r6, lsl #3
    eb9c:	ldrd	r0, r1, [r3]
    eba0:	mov	r2, sl
    eba2:	mov	r3, fp
    eba4:	bl	bd8c <__aeabi_dcmpgt>
    eba8:	cmp	r0, #0
    ebaa:	beq.w	f032 <_dtoa_r+0x5f2>
    ebae:	subs	r3, r6, #1
    ebb0:	str	r3, [sp, #16]
    ebb2:	movs	r3, #0
    ebb4:	str	r3, [sp, #52]	; 0x34
    ebb6:	subs	r5, r5, r4
    ebb8:	subs.w	r8, r5, #1
    ebbc:	bmi.w	f014 <_dtoa_r+0x5d4>
    ebc0:	movs	r3, #0
    ebc2:	str	r3, [sp, #28]
    ebc4:	ldr	r3, [sp, #16]
    ebc6:	cmp	r3, #0
    ebc8:	blt.w	f002 <_dtoa_r+0x5c2>
    ebcc:	add	r8, r3
    ebce:	str	r3, [sp, #48]	; 0x30
    ebd0:	movs	r3, #0
    ebd2:	str	r3, [sp, #24]
    ebd4:	ldr	r3, [sp, #0]
    ebd6:	cmp	r3, #9
    ebd8:	bhi.n	ec30 <_dtoa_r+0x1f0>
    ebda:	cmp	r3, #5
    ebdc:	ble.w	f868 <_dtoa_r+0xe28>
    ebe0:	subs	r3, #4
    ebe2:	str	r3, [sp, #0]
    ebe4:	movs	r6, #0
    ebe6:	ldr	r3, [sp, #0]
    ebe8:	subs	r3, #2
    ebea:	cmp	r3, #3
    ebec:	bhi.w	f836 <_dtoa_r+0xdf6>
    ebf0:	tbh	[pc, r3, lsl #1]
    ebf4:	.word	0x0224032b
    ebf8:	.word	0x04500336
    ebfc:	ldr	r3, [pc, #272]	; (ed10 <_dtoa_r+0x2d0>)
    ebfe:	ldr	r2, [pc, #284]	; (ed1c <_dtoa_r+0x2dc>)
    ec00:	ubfx	r0, r4, #0, #20
    ec04:	cmp	r0, #0
    ec06:	ite	ne
    ec08:	movne	r0, r3
    ec0a:	moveq	r0, r2
    ec0c:	b.n	eaca <_dtoa_r+0x8a>
    ec0e:	ubfx	r3, fp, #0, #20
    ec12:	orr.w	r1, r3, #1069547520	; 0x3fc00000
    ec16:	subw	r4, r5, #1023	; 0x3ff
    ec1a:	mov	r0, sl
    ec1c:	str.w	r8, [sp, #60]	; 0x3c
    ec20:	orr.w	r1, r1, #3145728	; 0x300000
    ec24:	ldr	r5, [sp, #96]	; 0x60
    ec26:	b.n	eb36 <_dtoa_r+0xf6>
    ec28:	ldr	r0, [pc, #244]	; (ed20 <_dtoa_r+0x2e0>)
    ec2a:	b.n	eab2 <_dtoa_r+0x72>
    ec2c:	adds	r3, r0, #3
    ec2e:	b.n	eadc <_dtoa_r+0x9c>
    ec30:	movs	r1, #0
    ec32:	str.w	r1, [r9, #68]	; 0x44
    ec36:	mov	r0, r9
    ec38:	mov	r4, r1
    ec3a:	str	r1, [sp, #0]
    ec3c:	bl	fb24 <_Balloc>
    ec40:	mov.w	r3, #4294967295
    ec44:	str	r3, [sp, #32]
    ec46:	str	r3, [sp, #56]	; 0x38
    ec48:	movs	r3, #1
    ec4a:	str	r0, [sp, #36]	; 0x24
    ec4c:	str.w	r0, [r9, #64]	; 0x40
    ec50:	str	r4, [sp, #20]
    ec52:	str	r3, [sp, #44]	; 0x2c
    ec54:	ldr	r3, [sp, #100]	; 0x64
    ec56:	cmp	r3, #0
    ec58:	blt.w	edfc <_dtoa_r+0x3bc>
    ec5c:	ldr	r2, [sp, #16]
    ec5e:	cmp	r2, #14
    ec60:	bgt.w	edfc <_dtoa_r+0x3bc>
    ec64:	ldr	r3, [pc, #176]	; (ed18 <_dtoa_r+0x2d8>)
    ec66:	add.w	r3, r3, r2, lsl #3
    ec6a:	vldr	d7, [r3]
    ec6e:	ldr	r3, [sp, #20]
    ec70:	cmp	r3, #0
    ec72:	vstr	d7, [sp]
    ec76:	blt.w	f276 <_dtoa_r+0x836>
    ec7a:	mov	r6, sl
    ec7c:	mov	r7, fp
    ec7e:	ldrd	sl, fp, [sp]
    ec82:	mov	r0, r6
    ec84:	mov	r2, sl
    ec86:	mov	r3, fp
    ec88:	mov	r1, r7
    ec8a:	bl	bac0 <__aeabi_ddiv>
    ec8e:	bl	bdcc <__aeabi_d2iz>
    ec92:	mov	r4, r0
    ec94:	bl	b7a0 <__aeabi_i2d>
    ec98:	mov	r2, sl
    ec9a:	mov	r3, fp
    ec9c:	bl	b86c <__aeabi_dmul>
    eca0:	mov	r3, r1
    eca2:	mov	r2, r0
    eca4:	mov	r1, r7
    eca6:	mov	r0, r6
    eca8:	bl	b504 <__aeabi_dsub>
    ecac:	ldr	r5, [sp, #36]	; 0x24
    ecae:	add.w	r3, r4, #48	; 0x30
    ecb2:	strb	r3, [r5, #0]
    ecb4:	ldr	r3, [sp, #32]
    ecb6:	cmp	r3, #1
    ecb8:	mov	r6, r0
    ecba:	mov	r7, r1
    ecbc:	add.w	r5, r5, #1
    ecc0:	beq.n	ed86 <_dtoa_r+0x346>
    ecc2:	movs	r2, #0
    ecc4:	ldr	r3, [pc, #92]	; (ed24 <_dtoa_r+0x2e4>)
    ecc6:	bl	b86c <__aeabi_dmul>
    ecca:	movs	r2, #0
    eccc:	movs	r3, #0
    ecce:	mov	r6, r0
    ecd0:	mov	r7, r1
    ecd2:	bl	bd3c <__aeabi_dcmpeq>
    ecd6:	cmp	r0, #0
    ecd8:	bne.n	edd6 <_dtoa_r+0x396>
    ecda:	str.w	r9, [sp, #20]
    ecde:	ldr.w	sl, [sp, #32]
    ece2:	ldr.w	fp, [sp, #36]	; 0x24
    ece6:	ldrd	r8, r9, [sp]
    ecea:	b.n	ed3e <_dtoa_r+0x2fe>
    ecec:	nop.w
    ecf0:	.word	0x636f4361
    ecf4:	.word	0x3fd287a7
    ecf8:	.word	0x8b60c8b3
    ecfc:	.word	0x3fc68a28
    ed00:	.word	0x509f79fb
    ed04:	.word	0x3fd34413
    ed08:	.word	0x7ff00000
    ed0c:	.word	0x00010a75
    ed10:	.word	0x00010b98
    ed14:	.word	0x3ff80000
    ed18:	.word	0x00010ba0
    ed1c:	.word	0x00010b8c
    ed20:	.word	0x00010a74
    ed24:	.word	0x40240000
    ed28:	bl	b86c <__aeabi_dmul>
    ed2c:	movs	r2, #0
    ed2e:	movs	r3, #0
    ed30:	mov	r6, r0
    ed32:	mov	r7, r1
    ed34:	bl	bd3c <__aeabi_dcmpeq>
    ed38:	cmp	r0, #0
    ed3a:	bne.w	f49a <_dtoa_r+0xa5a>
    ed3e:	mov	r2, r8
    ed40:	mov	r3, r9
    ed42:	mov	r0, r6
    ed44:	mov	r1, r7
    ed46:	bl	bac0 <__aeabi_ddiv>
    ed4a:	bl	bdcc <__aeabi_d2iz>
    ed4e:	mov	r4, r0
    ed50:	bl	b7a0 <__aeabi_i2d>
    ed54:	mov	r2, r8
    ed56:	mov	r3, r9
    ed58:	bl	b86c <__aeabi_dmul>
    ed5c:	mov	r2, r0
    ed5e:	mov	r3, r1
    ed60:	mov	r0, r6
    ed62:	mov	r1, r7
    ed64:	bl	b504 <__aeabi_dsub>
    ed68:	add.w	lr, r4, #48	; 0x30
    ed6c:	strb.w	lr, [r5], #1
    ed70:	rsb	lr, fp, r5
    ed74:	cmp	lr, sl
    ed76:	mov	r6, r0
    ed78:	mov	r7, r1
    ed7a:	mov.w	r2, #0
    ed7e:	ldr	r3, [pc, #696]	; (f038 <_dtoa_r+0x5f8>)
    ed80:	bne.n	ed28 <_dtoa_r+0x2e8>
    ed82:	ldr.w	r9, [sp, #20]
    ed86:	mov	r2, r6
    ed88:	mov	r3, r7
    ed8a:	mov	r0, r6
    ed8c:	mov	r1, r7
    ed8e:	bl	b508 <__adddf3>
    ed92:	mov	r6, r0
    ed94:	mov	r7, r1
    ed96:	mov	r2, r0
    ed98:	mov	r3, r1
    ed9a:	ldrd	r0, r1, [sp]
    ed9e:	bl	bd50 <__aeabi_dcmplt>
    eda2:	cbnz	r0, edb6 <_dtoa_r+0x376>
    eda4:	mov	r2, r6
    eda6:	mov	r3, r7
    eda8:	ldrd	r0, r1, [sp]
    edac:	bl	bd3c <__aeabi_dcmpeq>
    edb0:	cbz	r0, edd6 <_dtoa_r+0x396>
    edb2:	lsls	r3, r4, #31
    edb4:	bpl.n	edd6 <_dtoa_r+0x396>
    edb6:	ldrb.w	r4, [r5, #-1]
    edba:	ldr	r2, [sp, #36]	; 0x24
    edbc:	subs	r3, r5, #1
    edbe:	b.n	edca <_dtoa_r+0x38a>
    edc0:	cmp	r2, r3
    edc2:	beq.w	f5be <_dtoa_r+0xb7e>
    edc6:	ldrb.w	r4, [r3, #-1]!
    edca:	cmp	r4, #57	; 0x39
    edcc:	add.w	r5, r3, #1
    edd0:	beq.n	edc0 <_dtoa_r+0x380>
    edd2:	adds	r4, #1
    edd4:	strb	r4, [r3, #0]
    edd6:	ldr	r1, [sp, #40]	; 0x28
    edd8:	mov	r0, r9
    edda:	bl	fb70 <_Bfree>
    edde:	movs	r2, #0
    ede0:	ldr	r3, [sp, #16]
    ede2:	strb	r2, [r5, #0]
    ede4:	ldr	r2, [sp, #12]
    ede6:	adds	r3, #1
    ede8:	str	r3, [r2, #0]
    edea:	ldr	r3, [sp, #148]	; 0x94
    edec:	cmp	r3, #0
    edee:	beq.w	f528 <_dtoa_r+0xae8>
    edf2:	ldr	r0, [sp, #36]	; 0x24
    edf4:	str	r5, [r3, #0]
    edf6:	add	sp, #108	; 0x6c
    edf8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    edfc:	ldr	r2, [sp, #44]	; 0x2c
    edfe:	cmp	r2, #0
    ee00:	beq.w	f020 <_dtoa_r+0x5e0>
    ee04:	ldr	r2, [sp, #0]
    ee06:	cmp	r2, #1
    ee08:	ble.w	f2ba <_dtoa_r+0x87a>
    ee0c:	ldr	r3, [sp, #32]
    ee0e:	ldr	r2, [sp, #24]
    ee10:	subs	r7, r3, #1
    ee12:	cmp	r2, r7
    ee14:	blt.w	f52e <_dtoa_r+0xaee>
    ee18:	subs	r7, r2, r7
    ee1a:	ldr	r3, [sp, #32]
    ee1c:	cmp	r3, #0
    ee1e:	blt.w	f722 <_dtoa_r+0xce2>
    ee22:	ldr	r5, [sp, #28]
    ee24:	ldr	r3, [sp, #32]
    ee26:	ldr	r2, [sp, #28]
    ee28:	movs	r1, #1
    ee2a:	add	r2, r3
    ee2c:	mov	r0, r9
    ee2e:	str	r2, [sp, #28]
    ee30:	add	r8, r3
    ee32:	bl	fca0 <__i2b>
    ee36:	mov	r6, r0
    ee38:	cbz	r5, ee54 <_dtoa_r+0x414>
    ee3a:	cmp.w	r8, #0
    ee3e:	ble.n	ee54 <_dtoa_r+0x414>
    ee40:	cmp	r5, r8
    ee42:	ldr	r2, [sp, #28]
    ee44:	mov	r3, r5
    ee46:	it	ge
    ee48:	movge	r3, r8
    ee4a:	subs	r2, r2, r3
    ee4c:	str	r2, [sp, #28]
    ee4e:	subs	r5, r5, r3
    ee50:	rsb	r8, r3, r8
    ee54:	ldr	r3, [sp, #24]
    ee56:	cmp	r3, #0
    ee58:	ble.w	f446 <_dtoa_r+0xa06>
    ee5c:	ldr	r2, [sp, #44]	; 0x2c
    ee5e:	cmp	r2, #0
    ee60:	beq.w	f268 <_dtoa_r+0x828>
    ee64:	cmp	r7, #0
    ee66:	beq.w	f268 <_dtoa_r+0x828>
    ee6a:	mov	r1, r6
    ee6c:	mov	r2, r7
    ee6e:	mov	r0, r9
    ee70:	bl	fde4 <__pow5mult>
    ee74:	ldr	r2, [sp, #40]	; 0x28
    ee76:	mov	r1, r0
    ee78:	mov	r6, r0
    ee7a:	mov	r0, r9
    ee7c:	bl	fcb4 <__multiply>
    ee80:	ldr	r1, [sp, #40]	; 0x28
    ee82:	mov	r4, r0
    ee84:	mov	r0, r9
    ee86:	bl	fb70 <_Bfree>
    ee8a:	ldr	r3, [sp, #24]
    ee8c:	subs	r3, r3, r7
    ee8e:	str	r3, [sp, #24]
    ee90:	bne.w	f266 <_dtoa_r+0x826>
    ee94:	movs	r1, #1
    ee96:	mov	r0, r9
    ee98:	bl	fca0 <__i2b>
    ee9c:	ldr	r3, [sp, #48]	; 0x30
    ee9e:	str	r0, [sp, #24]
    eea0:	cmp	r3, #0
    eea2:	beq.w	f2d0 <_dtoa_r+0x890>
    eea6:	mov	r1, r0
    eea8:	mov	r2, r3
    eeaa:	mov	r0, r9
    eeac:	bl	fde4 <__pow5mult>
    eeb0:	ldr	r3, [sp, #0]
    eeb2:	str	r0, [sp, #24]
    eeb4:	cmp	r3, #1
    eeb6:	ble.w	f4a0 <_dtoa_r+0xa60>
    eeba:	movs	r7, #0
    eebc:	ldr	r2, [sp, #24]
    eebe:	ldr	r3, [r2, #16]
    eec0:	add.w	r3, r2, r3, lsl #2
    eec4:	ldr	r0, [r3, #16]
    eec6:	bl	fc04 <__hi0bits>
    eeca:	rsb	r0, r0, #32
    eece:	add	r0, r8
    eed0:	ands.w	r0, r0, #31
    eed4:	beq.w	f2cc <_dtoa_r+0x88c>
    eed8:	rsb	r3, r0, #32
    eedc:	cmp	r3, #4
    eede:	ble.w	f85c <_dtoa_r+0xe1c>
    eee2:	rsb	r0, r0, #28
    eee6:	ldr	r3, [sp, #28]
    eee8:	add	r3, r0
    eeea:	str	r3, [sp, #28]
    eeec:	add	r5, r0
    eeee:	add	r8, r0
    eef0:	ldr	r3, [sp, #28]
    eef2:	cmp	r3, #0
    eef4:	ble.n	ef02 <_dtoa_r+0x4c2>
    eef6:	mov	r1, r4
    eef8:	mov	r2, r3
    eefa:	mov	r0, r9
    eefc:	bl	fe84 <__lshift>
    ef00:	mov	r4, r0
    ef02:	cmp.w	r8, #0
    ef06:	ble.n	ef14 <_dtoa_r+0x4d4>
    ef08:	mov	r2, r8
    ef0a:	ldr	r1, [sp, #24]
    ef0c:	mov	r0, r9
    ef0e:	bl	fe84 <__lshift>
    ef12:	str	r0, [sp, #24]
    ef14:	ldr	r3, [sp, #52]	; 0x34
    ef16:	cmp	r3, #0
    ef18:	bne.w	f410 <_dtoa_r+0x9d0>
    ef1c:	ldr	r3, [sp, #32]
    ef1e:	cmp	r3, #0
    ef20:	ble.w	f44a <_dtoa_r+0xa0a>
    ef24:	ldr	r3, [sp, #44]	; 0x2c
    ef26:	cmp	r3, #0
    ef28:	bne.w	f314 <_dtoa_r+0x8d4>
    ef2c:	ldr.w	fp, [sp, #36]	; 0x24
    ef30:	ldr	r7, [sp, #32]
    ef32:	ldr.w	r8, [sp, #24]
    ef36:	mov	r5, fp
    ef38:	b.n	ef40 <_dtoa_r+0x500>
    ef3a:	bl	fb84 <__multadd>
    ef3e:	mov	r4, r0
    ef40:	mov	r1, r8
    ef42:	mov	r0, r4
    ef44:	bl	e914 <quorem>
    ef48:	add.w	sl, r0, #48	; 0x30
    ef4c:	strb.w	sl, [r5], #1
    ef50:	rsb	r3, fp, r5
    ef54:	cmp	r3, r7
    ef56:	mov.w	r2, #10
    ef5a:	mov.w	r3, #0
    ef5e:	mov	r1, r4
    ef60:	mov	r0, r9
    ef62:	blt.n	ef3a <_dtoa_r+0x4fa>
    ef64:	ldr	r3, [sp, #36]	; 0x24
    ef66:	ldr	r2, [sp, #32]
    ef68:	cmp	r2, #1
    ef6a:	ite	ge
    ef6c:	addge	r3, r3, r2
    ef6e:	addlt	r3, #1
    ef70:	mov	r5, r3
    ef72:	mov.w	fp, #0
    ef76:	mov	r1, r4
    ef78:	movs	r2, #1
    ef7a:	mov	r0, r9
    ef7c:	bl	fe84 <__lshift>
    ef80:	ldr	r1, [sp, #24]
    ef82:	str	r0, [sp, #40]	; 0x28
    ef84:	bl	ff34 <__mcmp>
    ef88:	cmp	r0, #0
    ef8a:	ble.w	f598 <_dtoa_r+0xb58>
    ef8e:	ldrb.w	r2, [r5, #-1]
    ef92:	ldr	r1, [sp, #36]	; 0x24
    ef94:	subs	r3, r5, #1
    ef96:	b.n	efa2 <_dtoa_r+0x562>
    ef98:	cmp	r3, r1
    ef9a:	beq.w	f486 <_dtoa_r+0xa46>
    ef9e:	ldrb.w	r2, [r3, #-1]!
    efa2:	cmp	r2, #57	; 0x39
    efa4:	add.w	r5, r3, #1
    efa8:	beq.n	ef98 <_dtoa_r+0x558>
    efaa:	adds	r2, #1
    efac:	strb	r2, [r3, #0]
    efae:	ldr	r1, [sp, #24]
    efb0:	mov	r0, r9
    efb2:	bl	fb70 <_Bfree>
    efb6:	cmp	r6, #0
    efb8:	beq.w	edd6 <_dtoa_r+0x396>
    efbc:	cmp.w	fp, #0
    efc0:	beq.n	efce <_dtoa_r+0x58e>
    efc2:	cmp	fp, r6
    efc4:	beq.n	efce <_dtoa_r+0x58e>
    efc6:	mov	r1, fp
    efc8:	mov	r0, r9
    efca:	bl	fb70 <_Bfree>
    efce:	mov	r1, r6
    efd0:	mov	r0, r9
    efd2:	bl	fb70 <_Bfree>
    efd6:	b.n	edd6 <_dtoa_r+0x396>
    efd8:	movs	r3, #1
    efda:	str	r3, [sp, #52]	; 0x34
    efdc:	b.n	ebb6 <_dtoa_r+0x176>
    efde:	ldr.w	r8, [sp, #16]
    efe2:	mov	r0, r8
    efe4:	bl	b7a0 <__aeabi_i2d>
    efe8:	mov	r2, r0
    efea:	mov	r3, r1
    efec:	mov	r0, r6
    efee:	mov	r1, r7
    eff0:	bl	bd3c <__aeabi_dcmpeq>
    eff4:	cmp	r0, #0
    eff6:	bne.w	eb8e <_dtoa_r+0x14e>
    effa:	add.w	r3, r8, #4294967295
    effe:	str	r3, [sp, #16]
    f000:	b.n	eb8e <_dtoa_r+0x14e>
    f002:	ldr	r2, [sp, #28]
    f004:	ldr	r3, [sp, #16]
    f006:	subs	r2, r2, r3
    f008:	negs	r3, r3
    f00a:	str	r3, [sp, #24]
    f00c:	movs	r3, #0
    f00e:	str	r2, [sp, #28]
    f010:	str	r3, [sp, #48]	; 0x30
    f012:	b.n	ebd4 <_dtoa_r+0x194>
    f014:	rsb	r3, r8, #0
    f018:	str	r3, [sp, #28]
    f01a:	mov.w	r8, #0
    f01e:	b.n	ebc4 <_dtoa_r+0x184>
    f020:	ldr	r7, [sp, #24]
    f022:	ldr	r5, [sp, #28]
    f024:	ldr	r6, [sp, #44]	; 0x2c
    f026:	b.n	ee38 <_dtoa_r+0x3f8>
    f028:	rsb	r4, r3, #32
    f02c:	lsl.w	r0, sl, r4
    f030:	b.n	eb28 <_dtoa_r+0xe8>
    f032:	str	r0, [sp, #52]	; 0x34
    f034:	b.n	ebb6 <_dtoa_r+0x176>
    f036:	nop
    f038:	.word	0x40240000
    f03c:	movs	r3, #0
    f03e:	str	r3, [sp, #44]	; 0x2c
    f040:	ldr	r3, [sp, #16]
    f042:	ldr	r2, [sp, #20]
    f044:	add	r3, r2
    f046:	str	r3, [sp, #56]	; 0x38
    f048:	adds	r3, #1
    f04a:	cmp	r3, #0
    f04c:	str	r3, [sp, #32]
    f04e:	ble.w	f54c <_dtoa_r+0xb0c>
    f052:	ldr	r4, [sp, #32]
    f054:	mov	r5, r4
    f056:	movs	r1, #0
    f058:	cmp	r5, #23
    f05a:	str.w	r1, [r9, #68]	; 0x44
    f05e:	bls.n	f078 <_dtoa_r+0x638>
    f060:	movs	r2, #1
    f062:	movs	r3, #4
    f064:	lsls	r3, r3, #1
    f066:	add.w	r0, r3, #20
    f06a:	cmp	r0, r5
    f06c:	mov	r1, r2
    f06e:	add.w	r2, r2, #1
    f072:	bls.n	f064 <_dtoa_r+0x624>
    f074:	str.w	r1, [r9, #68]	; 0x44
    f078:	mov	r0, r9
    f07a:	bl	fb24 <_Balloc>
    f07e:	cmp	r4, #14
    f080:	str	r0, [sp, #36]	; 0x24
    f082:	str.w	r0, [r9, #64]	; 0x40
    f086:	bhi.w	ec54 <_dtoa_r+0x214>
    f08a:	cmp	r6, #0
    f08c:	beq.w	ec54 <_dtoa_r+0x214>
    f090:	ldr	r1, [sp, #16]
    f092:	cmp	r1, #0
    f094:	strd	sl, fp, [sp, #64]	; 0x40
    f098:	ble.w	f5d0 <_dtoa_r+0xb90>
    f09c:	ldr	r3, [pc, #576]	; (f2e0 <_dtoa_r+0x8a0>)
    f09e:	and.w	r2, r1, #15
    f0a2:	asrs	r6, r1, #4
    f0a4:	add.w	r3, r3, r2, lsl #3
    f0a8:	lsls	r0, r6, #27
    f0aa:	ldrd	r4, r5, [r3]
    f0ae:	bpl.w	f53e <_dtoa_r+0xafe>
    f0b2:	ldr	r3, [pc, #560]	; (f2e4 <_dtoa_r+0x8a4>)
    f0b4:	mov	r0, sl
    f0b6:	mov	r1, fp
    f0b8:	ldrd	r2, r3, [r3, #32]
    f0bc:	bl	bac0 <__aeabi_ddiv>
    f0c0:	strd	r0, r1, [sp, #72]	; 0x48
    f0c4:	and.w	r6, r6, #15
    f0c8:	mov.w	sl, #3
    f0cc:	cbz	r6, f0f0 <_dtoa_r+0x6b0>
    f0ce:	ldr	r7, [pc, #532]	; (f2e4 <_dtoa_r+0x8a4>)
    f0d0:	lsls	r1, r6, #31
    f0d2:	bpl.n	f0e8 <_dtoa_r+0x6a8>
    f0d4:	mov	r0, r4
    f0d6:	mov	r1, r5
    f0d8:	ldrd	r2, r3, [r7]
    f0dc:	bl	b86c <__aeabi_dmul>
    f0e0:	add.w	sl, sl, #1
    f0e4:	mov	r4, r0
    f0e6:	mov	r5, r1
    f0e8:	asrs	r6, r6, #1
    f0ea:	add.w	r7, r7, #8
    f0ee:	bne.n	f0d0 <_dtoa_r+0x690>
    f0f0:	mov	r2, r4
    f0f2:	mov	r3, r5
    f0f4:	ldrd	r0, r1, [sp, #72]	; 0x48
    f0f8:	bl	bac0 <__aeabi_ddiv>
    f0fc:	mov	r6, r0
    f0fe:	mov	r7, r1
    f100:	ldr	r3, [sp, #52]	; 0x34
    f102:	cbz	r3, f116 <_dtoa_r+0x6d6>
    f104:	movs	r2, #0
    f106:	ldr	r3, [pc, #480]	; (f2e8 <_dtoa_r+0x8a8>)
    f108:	mov	r0, r6
    f10a:	mov	r1, r7
    f10c:	bl	bd50 <__aeabi_dcmplt>
    f110:	cmp	r0, #0
    f112:	bne.w	f74a <_dtoa_r+0xd0a>
    f116:	mov	r0, sl
    f118:	bl	b7a0 <__aeabi_i2d>
    f11c:	mov	r2, r6
    f11e:	mov	r3, r7
    f120:	bl	b86c <__aeabi_dmul>
    f124:	ldr	r3, [pc, #452]	; (f2ec <_dtoa_r+0x8ac>)
    f126:	movs	r2, #0
    f128:	bl	b508 <__adddf3>
    f12c:	ldr	r3, [sp, #32]
    f12e:	mov	r4, r0
    f130:	sub.w	r5, r1, #54525952	; 0x3400000
    f134:	cmp	r3, #0
    f136:	beq.w	f4f0 <_dtoa_r+0xab0>
    f13a:	ldr	r3, [sp, #16]
    f13c:	str	r3, [sp, #88]	; 0x58
    f13e:	ldr	r3, [sp, #32]
    f140:	str	r3, [sp, #72]	; 0x48
    f142:	ldr	r3, [sp, #44]	; 0x2c
    f144:	cmp	r3, #0
    f146:	beq.w	f672 <_dtoa_r+0xc32>
    f14a:	ldr	r2, [sp, #72]	; 0x48
    f14c:	ldr	r3, [pc, #400]	; (f2e0 <_dtoa_r+0x8a0>)
    f14e:	ldr	r1, [pc, #416]	; (f2f0 <_dtoa_r+0x8b0>)
    f150:	add.w	r3, r3, r2, lsl #3
    f154:	ldrd	r2, r3, [r3, #-8]
    f158:	movs	r0, #0
    f15a:	bl	bac0 <__aeabi_ddiv>
    f15e:	mov	r2, r4
    f160:	mov	r3, r5
    f162:	bl	b504 <__aeabi_dsub>
    f166:	mov	sl, r0
    f168:	mov	fp, r1
    f16a:	mov	r0, r6
    f16c:	mov	r1, r7
    f16e:	bl	bdcc <__aeabi_d2iz>
    f172:	mov	r4, r0
    f174:	bl	b7a0 <__aeabi_i2d>
    f178:	mov	r2, r0
    f17a:	mov	r3, r1
    f17c:	mov	r0, r6
    f17e:	mov	r1, r7
    f180:	bl	b504 <__aeabi_dsub>
    f184:	adds	r4, #48	; 0x30
    f186:	ldr	r5, [sp, #36]	; 0x24
    f188:	uxtb	r4, r4
    f18a:	mov	r6, r0
    f18c:	mov	r7, r1
    f18e:	strb	r4, [r5, #0]
    f190:	mov	r2, r0
    f192:	mov	r3, r1
    f194:	mov	r0, sl
    f196:	mov	r1, fp
    f198:	adds	r5, #1
    f19a:	bl	bd8c <__aeabi_dcmpgt>
    f19e:	cmp	r0, #0
    f1a0:	bne.n	f244 <_dtoa_r+0x804>
    f1a2:	mov	r2, r6
    f1a4:	mov	r3, r7
    f1a6:	movs	r0, #0
    f1a8:	ldr	r1, [pc, #316]	; (f2e8 <_dtoa_r+0x8a8>)
    f1aa:	bl	b504 <__aeabi_dsub>
    f1ae:	mov	r2, r0
    f1b0:	mov	r3, r1
    f1b2:	mov	r0, sl
    f1b4:	mov	r1, fp
    f1b6:	bl	bd8c <__aeabi_dcmpgt>
    f1ba:	cmp	r0, #0
    f1bc:	bne.w	f7d0 <_dtoa_r+0xd90>
    f1c0:	ldr	r2, [sp, #72]	; 0x48
    f1c2:	cmp	r2, #1
    f1c4:	ble.w	f5b6 <_dtoa_r+0xb76>
    f1c8:	ldr	r3, [sp, #72]	; 0x48
    f1ca:	ldr	r2, [sp, #36]	; 0x24
    f1cc:	str.w	r8, [sp, #72]	; 0x48
    f1d0:	add	r3, r2
    f1d2:	mov	r8, r3
    f1d4:	b.n	f1f2 <_dtoa_r+0x7b2>
    f1d6:	movs	r0, #0
    f1d8:	ldr	r1, [pc, #268]	; (f2e8 <_dtoa_r+0x8a8>)
    f1da:	bl	b504 <__aeabi_dsub>
    f1de:	mov	r2, sl
    f1e0:	mov	r3, fp
    f1e2:	bl	bd50 <__aeabi_dcmplt>
    f1e6:	cmp	r0, #0
    f1e8:	bne.w	f7d0 <_dtoa_r+0xd90>
    f1ec:	cmp	r5, r8
    f1ee:	beq.w	f5b2 <_dtoa_r+0xb72>
    f1f2:	mov	r0, sl
    f1f4:	mov	r1, fp
    f1f6:	movs	r2, #0
    f1f8:	ldr	r3, [pc, #248]	; (f2f4 <_dtoa_r+0x8b4>)
    f1fa:	bl	b86c <__aeabi_dmul>
    f1fe:	movs	r2, #0
    f200:	ldr	r3, [pc, #240]	; (f2f4 <_dtoa_r+0x8b4>)
    f202:	mov	sl, r0
    f204:	mov	fp, r1
    f206:	mov	r0, r6
    f208:	mov	r1, r7
    f20a:	bl	b86c <__aeabi_dmul>
    f20e:	mov	r7, r1
    f210:	mov	r6, r0
    f212:	bl	bdcc <__aeabi_d2iz>
    f216:	mov	r4, r0
    f218:	bl	b7a0 <__aeabi_i2d>
    f21c:	mov	r2, r0
    f21e:	mov	r3, r1
    f220:	mov	r0, r6
    f222:	mov	r1, r7
    f224:	bl	b504 <__aeabi_dsub>
    f228:	adds	r4, #48	; 0x30
    f22a:	uxtb	r4, r4
    f22c:	mov	r2, sl
    f22e:	mov	r3, fp
    f230:	strb.w	r4, [r5], #1
    f234:	mov	r6, r0
    f236:	mov	r7, r1
    f238:	bl	bd50 <__aeabi_dcmplt>
    f23c:	mov	r2, r6
    f23e:	mov	r3, r7
    f240:	cmp	r0, #0
    f242:	beq.n	f1d6 <_dtoa_r+0x796>
    f244:	ldr	r3, [sp, #88]	; 0x58
    f246:	str	r3, [sp, #16]
    f248:	b.n	edd6 <_dtoa_r+0x396>
    f24a:	movs	r3, #0
    f24c:	str	r3, [sp, #44]	; 0x2c
    f24e:	ldr	r3, [sp, #20]
    f250:	cmp	r3, #0
    f252:	ble.w	f556 <_dtoa_r+0xb16>
    f256:	mov	r5, r3
    f258:	mov	r4, r3
    f25a:	str	r3, [sp, #56]	; 0x38
    f25c:	str	r3, [sp, #32]
    f25e:	b.n	f056 <_dtoa_r+0x616>
    f260:	movs	r3, #1
    f262:	str	r3, [sp, #44]	; 0x2c
    f264:	b.n	f24e <_dtoa_r+0x80e>
    f266:	str	r4, [sp, #40]	; 0x28
    f268:	ldr	r2, [sp, #24]
    f26a:	ldr	r1, [sp, #40]	; 0x28
    f26c:	mov	r0, r9
    f26e:	bl	fde4 <__pow5mult>
    f272:	mov	r4, r0
    f274:	b.n	ee94 <_dtoa_r+0x454>
    f276:	ldr	r3, [sp, #32]
    f278:	cmp	r3, #0
    f27a:	bgt.w	ec7a <_dtoa_r+0x23a>
    f27e:	bne.w	f520 <_dtoa_r+0xae0>
    f282:	movs	r2, #0
    f284:	ldr	r3, [pc, #112]	; (f2f8 <_dtoa_r+0x8b8>)
    f286:	ldrd	r0, r1, [sp]
    f28a:	bl	b86c <__aeabi_dmul>
    f28e:	mov	r3, fp
    f290:	mov	r2, sl
    f292:	bl	bd78 <__aeabi_dcmpge>
    f296:	ldr	r3, [sp, #32]
    f298:	str	r3, [sp, #24]
    f29a:	mov	r6, r3
    f29c:	cmp	r0, #0
    f29e:	beq.w	f476 <_dtoa_r+0xa36>
    f2a2:	ldr	r3, [sp, #20]
    f2a4:	ldr	r5, [sp, #36]	; 0x24
    f2a6:	mvns	r3, r3
    f2a8:	str	r3, [sp, #16]
    f2aa:	ldr	r1, [sp, #24]
    f2ac:	mov	r0, r9
    f2ae:	bl	fb70 <_Bfree>
    f2b2:	cmp	r6, #0
    f2b4:	beq.w	edd6 <_dtoa_r+0x396>
    f2b8:	b.n	efce <_dtoa_r+0x58e>
    f2ba:	ldr	r2, [sp, #60]	; 0x3c
    f2bc:	cmp	r2, #0
    f2be:	beq.w	f732 <_dtoa_r+0xcf2>
    f2c2:	addw	r3, r3, #1075	; 0x433
    f2c6:	ldr	r7, [sp, #24]
    f2c8:	ldr	r5, [sp, #28]
    f2ca:	b.n	ee26 <_dtoa_r+0x3e6>
    f2cc:	movs	r0, #28
    f2ce:	b.n	eee6 <_dtoa_r+0x4a6>
    f2d0:	ldr	r3, [sp, #0]
    f2d2:	cmp	r3, #1
    f2d4:	ble.w	f7d8 <_dtoa_r+0xd98>
    f2d8:	ldr	r7, [sp, #48]	; 0x30
    f2da:	movs	r0, #1
    f2dc:	b.n	eece <_dtoa_r+0x48e>
    f2de:	nop
    f2e0:	.word	0x00010ba0
    f2e4:	.word	0x00010c68
    f2e8:	.word	0x3ff00000
    f2ec:	.word	0x401c0000
    f2f0:	.word	0x3fe00000
    f2f4:	.word	0x40240000
    f2f8:	.word	0x40140000
    f2fc:	mov	r1, r6
    f2fe:	movs	r3, #0
    f300:	movs	r2, #10
    f302:	mov	r0, r9
    f304:	bl	fb84 <__multadd>
    f308:	ldr	r3, [sp, #56]	; 0x38
    f30a:	cmp	r3, #0
    f30c:	mov	r6, r0
    f30e:	ble.w	f82c <_dtoa_r+0xdec>
    f312:	str	r3, [sp, #32]
    f314:	cmp	r5, #0
    f316:	ble.n	f324 <_dtoa_r+0x8e4>
    f318:	mov	r1, r6
    f31a:	mov	r2, r5
    f31c:	mov	r0, r9
    f31e:	bl	fe84 <__lshift>
    f322:	mov	r6, r0
    f324:	cmp	r7, #0
    f326:	bne.w	f622 <_dtoa_r+0xbe2>
    f32a:	mov	r8, r6
    f32c:	ldr	r3, [sp, #32]
    f32e:	ldr	r2, [sp, #36]	; 0x24
    f330:	subs	r3, #1
    f332:	adds	r3, r2, r3
    f334:	str	r3, [sp, #32]
    f336:	and.w	r3, sl, #1
    f33a:	str	r3, [sp, #40]	; 0x28
    f33c:	mov	r7, r2
    f33e:	ldr.w	fp, [sp, #24]
    f342:	mov	r0, r4
    f344:	mov	r1, fp
    f346:	bl	e914 <quorem>
    f34a:	mov	r1, r6
    f34c:	mov	r5, r0
    f34e:	mov	r0, r4
    f350:	bl	ff34 <__mcmp>
    f354:	mov	r2, r8
    f356:	mov	r1, fp
    f358:	mov	sl, r0
    f35a:	mov	r0, r9
    f35c:	bl	ff78 <__mdiff>
    f360:	ldr	r2, [r0, #12]
    f362:	mov	fp, r0
    f364:	add.w	r3, r5, #48	; 0x30
    f368:	cmp	r2, #0
    f36a:	bne.n	f400 <_dtoa_r+0x9c0>
    f36c:	mov	r1, r0
    f36e:	mov	r0, r4
    f370:	str	r3, [sp, #28]
    f372:	bl	ff34 <__mcmp>
    f376:	mov	r1, fp
    f378:	str	r0, [sp, #20]
    f37a:	mov	r0, r9
    f37c:	bl	fb70 <_Bfree>
    f380:	ldr	r2, [sp, #20]
    f382:	ldr	r3, [sp, #28]
    f384:	cbnz	r2, f392 <_dtoa_r+0x952>
    f386:	ldr	r1, [sp, #0]
    f388:	cbnz	r1, f392 <_dtoa_r+0x952>
    f38a:	ldr	r1, [sp, #40]	; 0x28
    f38c:	cmp	r1, #0
    f38e:	beq.w	f7fc <_dtoa_r+0xdbc>
    f392:	cmp.w	sl, #0
    f396:	blt.w	f560 <_dtoa_r+0xb20>
    f39a:	bne.n	f3a8 <_dtoa_r+0x968>
    f39c:	ldr	r1, [sp, #0]
    f39e:	cbnz	r1, f3a8 <_dtoa_r+0x968>
    f3a0:	ldr	r1, [sp, #40]	; 0x28
    f3a2:	cmp	r1, #0
    f3a4:	beq.w	f560 <_dtoa_r+0xb20>
    f3a8:	cmp	r2, #0
    f3aa:	bgt.w	f64a <_dtoa_r+0xc0a>
    f3ae:	ldr	r2, [sp, #32]
    f3b0:	strb	r3, [r7, #0]
    f3b2:	add.w	sl, r7, #1
    f3b6:	cmp	r7, r2
    f3b8:	mov	r5, sl
    f3ba:	beq.w	f662 <_dtoa_r+0xc22>
    f3be:	mov	r1, r4
    f3c0:	movs	r3, #0
    f3c2:	movs	r2, #10
    f3c4:	mov	r0, r9
    f3c6:	bl	fb84 <__multadd>
    f3ca:	cmp	r6, r8
    f3cc:	mov	r4, r0
    f3ce:	mov	r1, r6
    f3d0:	mov.w	r3, #0
    f3d4:	mov.w	r2, #10
    f3d8:	mov	r0, r9
    f3da:	beq.n	f3f4 <_dtoa_r+0x9b4>
    f3dc:	bl	fb84 <__multadd>
    f3e0:	mov	r1, r8
    f3e2:	mov	r6, r0
    f3e4:	movs	r3, #0
    f3e6:	movs	r2, #10
    f3e8:	mov	r0, r9
    f3ea:	bl	fb84 <__multadd>
    f3ee:	mov	r7, sl
    f3f0:	mov	r8, r0
    f3f2:	b.n	f33e <_dtoa_r+0x8fe>
    f3f4:	bl	fb84 <__multadd>
    f3f8:	mov	r7, sl
    f3fa:	mov	r6, r0
    f3fc:	mov	r8, r0
    f3fe:	b.n	f33e <_dtoa_r+0x8fe>
    f400:	mov	r1, r0
    f402:	mov	r0, r9
    f404:	str	r3, [sp, #20]
    f406:	bl	fb70 <_Bfree>
    f40a:	movs	r2, #1
    f40c:	ldr	r3, [sp, #20]
    f40e:	b.n	f392 <_dtoa_r+0x952>
    f410:	ldr	r1, [sp, #24]
    f412:	mov	r0, r4
    f414:	bl	ff34 <__mcmp>
    f418:	cmp	r0, #0
    f41a:	bge.w	ef1c <_dtoa_r+0x4dc>
    f41e:	mov	r1, r4
    f420:	ldr	r4, [sp, #16]
    f422:	movs	r3, #0
    f424:	subs	r4, #1
    f426:	movs	r2, #10
    f428:	mov	r0, r9
    f42a:	str	r4, [sp, #16]
    f42c:	bl	fb84 <__multadd>
    f430:	ldr	r3, [sp, #44]	; 0x2c
    f432:	mov	r4, r0
    f434:	cmp	r3, #0
    f436:	bne.w	f2fc <_dtoa_r+0x8bc>
    f43a:	ldr	r3, [sp, #56]	; 0x38
    f43c:	cmp	r3, #0
    f43e:	ble.w	f81c <_dtoa_r+0xddc>
    f442:	str	r3, [sp, #32]
    f444:	b.n	ef2c <_dtoa_r+0x4ec>
    f446:	ldr	r4, [sp, #40]	; 0x28
    f448:	b.n	ee94 <_dtoa_r+0x454>
    f44a:	ldr	r3, [sp, #0]
    f44c:	cmp	r3, #2
    f44e:	ble.w	ef24 <_dtoa_r+0x4e4>
    f452:	ldr	r3, [sp, #32]
    f454:	cmp	r3, #0
    f456:	bne.w	f794 <_dtoa_r+0xd54>
    f45a:	ldr	r1, [sp, #24]
    f45c:	movs	r2, #5
    f45e:	mov	r0, r9
    f460:	bl	fb84 <__multadd>
    f464:	mov	r1, r0
    f466:	str	r0, [sp, #24]
    f468:	mov	r0, r4
    f46a:	bl	ff34 <__mcmp>
    f46e:	cmp	r0, #0
    f470:	str	r4, [sp, #40]	; 0x28
    f472:	ble.w	f2a2 <_dtoa_r+0x862>
    f476:	ldr	r2, [sp, #16]
    f478:	ldr	r1, [sp, #36]	; 0x24
    f47a:	movs	r3, #49	; 0x31
    f47c:	adds	r2, #1
    f47e:	str	r2, [sp, #16]
    f480:	strb	r3, [r1, #0]
    f482:	adds	r5, r1, #1
    f484:	b.n	f2aa <_dtoa_r+0x86a>
    f486:	ldr	r2, [sp, #16]
    f488:	adds	r2, #1
    f48a:	str	r2, [sp, #16]
    f48c:	ldr	r2, [sp, #36]	; 0x24
    f48e:	movs	r3, #49	; 0x31
    f490:	strb	r3, [r2, #0]
    f492:	b.n	efae <_dtoa_r+0x56e>
    f494:	movs	r3, #1
    f496:	str	r3, [sp, #44]	; 0x2c
    f498:	b.n	f040 <_dtoa_r+0x600>
    f49a:	ldr.w	r9, [sp, #20]
    f49e:	b.n	edd6 <_dtoa_r+0x396>
    f4a0:	cmp.w	sl, #0
    f4a4:	bne.w	eeba <_dtoa_r+0x47a>
    f4a8:	ubfx	r3, fp, #0, #20
    f4ac:	cmp	r3, #0
    f4ae:	bne.w	f72e <_dtoa_r+0xcee>
    f4b2:	bic.w	r7, fp, #2147483648	; 0x80000000
    f4b6:	lsrs	r7, r7, #20
    f4b8:	lsls	r7, r7, #20
    f4ba:	cbz	r7, f4c8 <_dtoa_r+0xa88>
    f4bc:	ldr	r3, [sp, #28]
    f4be:	adds	r3, #1
    f4c0:	str	r3, [sp, #28]
    f4c2:	add.w	r8, r8, #1
    f4c6:	movs	r7, #1
    f4c8:	ldr	r3, [sp, #48]	; 0x30
    f4ca:	movs	r0, #1
    f4cc:	cmp	r3, #0
    f4ce:	beq.w	eece <_dtoa_r+0x48e>
    f4d2:	b.n	eebc <_dtoa_r+0x47c>
    f4d4:	mov	r0, sl
    f4d6:	bl	b7a0 <__aeabi_i2d>
    f4da:	mov	r2, r6
    f4dc:	mov	r3, r7
    f4de:	bl	b86c <__aeabi_dmul>
    f4e2:	movs	r2, #0
    f4e4:	ldr	r3, [pc, #764]	; (f7e4 <_dtoa_r+0xda4>)
    f4e6:	bl	b508 <__adddf3>
    f4ea:	mov	r4, r0
    f4ec:	sub.w	r5, r1, #54525952	; 0x3400000
    f4f0:	mov	r0, r6
    f4f2:	mov	r1, r7
    f4f4:	movs	r2, #0
    f4f6:	ldr	r3, [pc, #752]	; (f7e8 <_dtoa_r+0xda8>)
    f4f8:	bl	b504 <__aeabi_dsub>
    f4fc:	mov	r2, r4
    f4fe:	mov	r3, r5
    f500:	mov	r6, r0
    f502:	mov	r7, r1
    f504:	bl	bd8c <__aeabi_dcmpgt>
    f508:	cmp	r0, #0
    f50a:	bne.w	f66a <_dtoa_r+0xc2a>
    f50e:	mov	r2, r4
    f510:	add.w	r3, r5, #2147483648	; 0x80000000
    f514:	mov	r0, r6
    f516:	mov	r1, r7
    f518:	bl	bd50 <__aeabi_dcmplt>
    f51c:	cmp	r0, #0
    f51e:	beq.n	f5b6 <_dtoa_r+0xb76>
    f520:	movs	r3, #0
    f522:	str	r3, [sp, #24]
    f524:	mov	r6, r3
    f526:	b.n	f2a2 <_dtoa_r+0x862>
    f528:	ldr	r0, [sp, #36]	; 0x24
    f52a:	b.w	eab2 <_dtoa_r+0x72>
    f52e:	ldr	r3, [sp, #24]
    f530:	ldr	r2, [sp, #48]	; 0x30
    f532:	str	r7, [sp, #24]
    f534:	subs	r3, r7, r3
    f536:	add	r2, r3
    f538:	str	r2, [sp, #48]	; 0x30
    f53a:	movs	r7, #0
    f53c:	b.n	ee1a <_dtoa_r+0x3da>
    f53e:	vldr	d7, [sp, #64]	; 0x40
    f542:	mov.w	sl, #2
    f546:	vstr	d7, [sp, #72]	; 0x48
    f54a:	b.n	f0cc <_dtoa_r+0x68c>
    f54c:	mov	r4, r3
    f54e:	movs	r1, #0
    f550:	str.w	r1, [r9, #68]	; 0x44
    f554:	b.n	f078 <_dtoa_r+0x638>
    f556:	movs	r4, #1
    f558:	str	r4, [sp, #56]	; 0x38
    f55a:	str	r4, [sp, #32]
    f55c:	str	r4, [sp, #20]
    f55e:	b.n	f54e <_dtoa_r+0xb0e>
    f560:	cmp	r2, #0
    f562:	mov	sl, r3
    f564:	ble.n	f58a <_dtoa_r+0xb4a>
    f566:	mov	r1, r4
    f568:	movs	r2, #1
    f56a:	mov	r0, r9
    f56c:	bl	fe84 <__lshift>
    f570:	ldr	r1, [sp, #24]
    f572:	mov	r4, r0
    f574:	bl	ff34 <__mcmp>
    f578:	cmp	r0, #0
    f57a:	ble.w	f80e <_dtoa_r+0xdce>
    f57e:	cmp.w	sl, #57	; 0x39
    f582:	beq.w	f798 <_dtoa_r+0xd58>
    f586:	add.w	sl, r5, #49	; 0x31
    f58a:	mov	fp, r6
    f58c:	strb.w	sl, [r7]
    f590:	adds	r5, r7, #1
    f592:	mov	r6, r8
    f594:	str	r4, [sp, #40]	; 0x28
    f596:	b.n	efae <_dtoa_r+0x56e>
    f598:	bne.n	f5a4 <_dtoa_r+0xb64>
    f59a:	tst.w	sl, #1
    f59e:	beq.n	f5a4 <_dtoa_r+0xb64>
    f5a0:	b.n	ef8e <_dtoa_r+0x54e>
    f5a2:	mov	r5, r2
    f5a4:	ldrb.w	r3, [r5, #-1]
    f5a8:	cmp	r3, #48	; 0x30
    f5aa:	add.w	r2, r5, #4294967295
    f5ae:	beq.n	f5a2 <_dtoa_r+0xb62>
    f5b0:	b.n	efae <_dtoa_r+0x56e>
    f5b2:	ldr.w	r8, [sp, #72]	; 0x48
    f5b6:	ldrd	sl, fp, [sp, #64]	; 0x40
    f5ba:	b.w	ec54 <_dtoa_r+0x214>
    f5be:	ldr	r1, [sp, #36]	; 0x24
    f5c0:	movs	r2, #48	; 0x30
    f5c2:	strb	r2, [r1, #0]
    f5c4:	ldr	r2, [sp, #16]
    f5c6:	ldrb.w	r4, [r5, #-1]
    f5ca:	adds	r2, #1
    f5cc:	str	r2, [sp, #16]
    f5ce:	b.n	edd2 <_dtoa_r+0x392>
    f5d0:	ldr	r3, [sp, #16]
    f5d2:	negs	r4, r3
    f5d4:	cmp	r4, #0
    f5d6:	beq.w	f740 <_dtoa_r+0xd00>
    f5da:	ldr	r3, [pc, #528]	; (f7ec <_dtoa_r+0xdac>)
    f5dc:	and.w	r2, r4, #15
    f5e0:	add.w	r3, r3, r2, lsl #3
    f5e4:	ldrd	r2, r3, [r3]
    f5e8:	ldrd	r0, r1, [sp, #64]	; 0x40
    f5ec:	bl	b86c <__aeabi_dmul>
    f5f0:	asrs	r4, r4, #4
    f5f2:	mov	r6, r0
    f5f4:	mov	r7, r1
    f5f6:	beq.w	f826 <_dtoa_r+0xde6>
    f5fa:	ldr	r5, [pc, #500]	; (f7f0 <_dtoa_r+0xdb0>)
    f5fc:	mov.w	sl, #2
    f600:	lsls	r2, r4, #31
    f602:	bpl.n	f618 <_dtoa_r+0xbd8>
    f604:	mov	r0, r6
    f606:	mov	r1, r7
    f608:	ldrd	r2, r3, [r5]
    f60c:	bl	b86c <__aeabi_dmul>
    f610:	add.w	sl, sl, #1
    f614:	mov	r6, r0
    f616:	mov	r7, r1
    f618:	asrs	r4, r4, #1
    f61a:	add.w	r5, r5, #8
    f61e:	bne.n	f600 <_dtoa_r+0xbc0>
    f620:	b.n	f100 <_dtoa_r+0x6c0>
    f622:	ldr	r1, [r6, #4]
    f624:	mov	r0, r9
    f626:	bl	fb24 <_Balloc>
    f62a:	ldr	r3, [r6, #16]
    f62c:	adds	r2, r3, #2
    f62e:	mov	r5, r0
    f630:	lsls	r2, r2, #2
    f632:	add.w	r1, r6, #12
    f636:	adds	r0, #12
    f638:	bl	9aa8 <memcpy>
    f63c:	mov	r1, r5
    f63e:	movs	r2, #1
    f640:	mov	r0, r9
    f642:	bl	fe84 <__lshift>
    f646:	mov	r8, r0
    f648:	b.n	f32c <_dtoa_r+0x8ec>
    f64a:	cmp	r3, #57	; 0x39
    f64c:	beq.w	f798 <_dtoa_r+0xd58>
    f650:	add.w	sl, r3, #1
    f654:	mov	fp, r6
    f656:	strb.w	sl, [r7]
    f65a:	adds	r5, r7, #1
    f65c:	mov	r6, r8
    f65e:	str	r4, [sp, #40]	; 0x28
    f660:	b.n	efae <_dtoa_r+0x56e>
    f662:	mov	fp, r6
    f664:	mov	sl, r3
    f666:	mov	r6, r8
    f668:	b.n	ef76 <_dtoa_r+0x536>
    f66a:	movs	r3, #0
    f66c:	str	r3, [sp, #24]
    f66e:	mov	r6, r3
    f670:	b.n	f476 <_dtoa_r+0xa36>
    f672:	ldr	r3, [sp, #72]	; 0x48
    f674:	ldr	r1, [pc, #372]	; (f7ec <_dtoa_r+0xdac>)
    f676:	subs	r2, r3, #1
    f678:	add.w	r1, r1, r2, lsl #3
    f67c:	mov	r3, r5
    f67e:	str	r2, [sp, #92]	; 0x5c
    f680:	ldrd	r0, r1, [r1]
    f684:	mov	r2, r4
    f686:	bl	b86c <__aeabi_dmul>
    f68a:	strd	r0, r1, [sp, #80]	; 0x50
    f68e:	mov	r1, r7
    f690:	mov	r0, r6
    f692:	bl	bdcc <__aeabi_d2iz>
    f696:	mov	r4, r0
    f698:	bl	b7a0 <__aeabi_i2d>
    f69c:	mov	r3, r1
    f69e:	mov	r2, r0
    f6a0:	mov	r1, r7
    f6a2:	mov	r0, r6
    f6a4:	bl	b504 <__aeabi_dsub>
    f6a8:	ldr	r3, [sp, #72]	; 0x48
    f6aa:	mov	r7, r1
    f6ac:	ldr	r1, [sp, #36]	; 0x24
    f6ae:	adds	r4, #48	; 0x30
    f6b0:	cmp	r3, #1
    f6b2:	mov	r6, r0
    f6b4:	strb	r4, [r1, #0]
    f6b6:	add.w	r5, r1, #1
    f6ba:	beq.n	f6fe <_dtoa_r+0xcbe>
    f6bc:	ldr	r3, [sp, #72]	; 0x48
    f6be:	ldr	r2, [sp, #36]	; 0x24
    f6c0:	add	r3, r2
    f6c2:	mov	sl, r3
    f6c4:	mov	fp, r5
    f6c6:	movs	r2, #0
    f6c8:	ldr	r3, [pc, #296]	; (f7f4 <_dtoa_r+0xdb4>)
    f6ca:	mov	r0, r6
    f6cc:	mov	r1, r7
    f6ce:	bl	b86c <__aeabi_dmul>
    f6d2:	mov	r7, r1
    f6d4:	mov	r6, r0
    f6d6:	bl	bdcc <__aeabi_d2iz>
    f6da:	mov	r4, r0
    f6dc:	bl	b7a0 <__aeabi_i2d>
    f6e0:	adds	r4, #48	; 0x30
    f6e2:	mov	r2, r0
    f6e4:	mov	r3, r1
    f6e6:	mov	r0, r6
    f6e8:	mov	r1, r7
    f6ea:	bl	b504 <__aeabi_dsub>
    f6ee:	strb.w	r4, [fp], #1
    f6f2:	cmp	sl, fp
    f6f4:	mov	r6, r0
    f6f6:	mov	r7, r1
    f6f8:	bne.n	f6c6 <_dtoa_r+0xc86>
    f6fa:	ldr	r3, [sp, #92]	; 0x5c
    f6fc:	add	r5, r3
    f6fe:	movs	r2, #0
    f700:	ldr	r3, [pc, #244]	; (f7f8 <_dtoa_r+0xdb8>)
    f702:	ldrd	r0, r1, [sp, #80]	; 0x50
    f706:	bl	b508 <__adddf3>
    f70a:	mov	r2, r6
    f70c:	mov	r3, r7
    f70e:	bl	bd50 <__aeabi_dcmplt>
    f712:	cmp	r0, #0
    f714:	beq.n	f7a8 <_dtoa_r+0xd68>
    f716:	ldr	r3, [sp, #88]	; 0x58
    f718:	str	r3, [sp, #16]
    f71a:	ldrb.w	r4, [r5, #-1]
    f71e:	b.w	edba <_dtoa_r+0x37a>
    f722:	ldr	r3, [sp, #28]
    f724:	ldr	r2, [sp, #32]
    f726:	subs	r5, r3, r2
    f728:	movs	r3, #0
    f72a:	b.w	ee26 <_dtoa_r+0x3e6>
    f72e:	movs	r7, #0
    f730:	b.n	f4c8 <_dtoa_r+0xa88>
    f732:	ldr	r3, [sp, #96]	; 0x60
    f734:	ldr	r7, [sp, #24]
    f736:	ldr	r5, [sp, #28]
    f738:	rsb	r3, r3, #54	; 0x36
    f73c:	b.w	ee26 <_dtoa_r+0x3e6>
    f740:	ldrd	r6, r7, [sp, #64]	; 0x40
    f744:	mov.w	sl, #2
    f748:	b.n	f100 <_dtoa_r+0x6c0>
    f74a:	ldr	r3, [sp, #32]
    f74c:	cmp	r3, #0
    f74e:	beq.w	f4d4 <_dtoa_r+0xa94>
    f752:	ldr	r3, [sp, #56]	; 0x38
    f754:	cmp	r3, #0
    f756:	ble.w	f5b6 <_dtoa_r+0xb76>
    f75a:	movs	r2, #0
    f75c:	ldr	r3, [pc, #148]	; (f7f4 <_dtoa_r+0xdb4>)
    f75e:	mov	r0, r6
    f760:	mov	r1, r7
    f762:	bl	b86c <__aeabi_dmul>
    f766:	mov	r6, r0
    f768:	mov	r7, r1
    f76a:	add.w	r0, sl, #1
    f76e:	bl	b7a0 <__aeabi_i2d>
    f772:	mov	r2, r6
    f774:	mov	r3, r7
    f776:	bl	b86c <__aeabi_dmul>
    f77a:	movs	r2, #0
    f77c:	ldr	r3, [pc, #100]	; (f7e4 <_dtoa_r+0xda4>)
    f77e:	bl	b508 <__adddf3>
    f782:	ldr	r2, [sp, #16]
    f784:	ldr	r3, [sp, #56]	; 0x38
    f786:	str	r3, [sp, #72]	; 0x48
    f788:	subs	r2, #1
    f78a:	mov	r4, r0
    f78c:	sub.w	r5, r1, #54525952	; 0x3400000
    f790:	str	r2, [sp, #88]	; 0x58
    f792:	b.n	f142 <_dtoa_r+0x702>
    f794:	str	r4, [sp, #40]	; 0x28
    f796:	b.n	f2a2 <_dtoa_r+0x862>
    f798:	movs	r2, #57	; 0x39
    f79a:	mov	fp, r6
    f79c:	str	r4, [sp, #40]	; 0x28
    f79e:	mov	r6, r8
    f7a0:	strb	r2, [r7, #0]
    f7a2:	adds	r5, r7, #1
    f7a4:	b.w	ef92 <_dtoa_r+0x552>
    f7a8:	ldrd	r2, r3, [sp, #80]	; 0x50
    f7ac:	movs	r0, #0
    f7ae:	ldr	r1, [pc, #72]	; (f7f8 <_dtoa_r+0xdb8>)
    f7b0:	bl	b504 <__aeabi_dsub>
    f7b4:	mov	r2, r6
    f7b6:	mov	r3, r7
    f7b8:	bl	bd8c <__aeabi_dcmpgt>
    f7bc:	cbnz	r0, f7c2 <_dtoa_r+0xd82>
    f7be:	b.n	f5b6 <_dtoa_r+0xb76>
    f7c0:	mov	r5, r2
    f7c2:	ldrb.w	r3, [r5, #-1]
    f7c6:	cmp	r3, #48	; 0x30
    f7c8:	add.w	r2, r5, #4294967295
    f7cc:	beq.n	f7c0 <_dtoa_r+0xd80>
    f7ce:	b.n	f244 <_dtoa_r+0x804>
    f7d0:	ldr	r3, [sp, #88]	; 0x58
    f7d2:	str	r3, [sp, #16]
    f7d4:	b.w	edba <_dtoa_r+0x37a>
    f7d8:	cmp.w	sl, #0
    f7dc:	bne.w	f2d8 <_dtoa_r+0x898>
    f7e0:	b.n	f4a8 <_dtoa_r+0xa68>
    f7e2:	nop
    f7e4:	.word	0x401c0000
    f7e8:	.word	0x40140000
    f7ec:	.word	0x00010ba0
    f7f0:	.word	0x00010c68
    f7f4:	.word	0x40240000
    f7f8:	.word	0x3fe00000
    f7fc:	cmp	r3, #57	; 0x39
    f7fe:	mov	fp, sl
    f800:	mov	sl, r3
    f802:	beq.n	f798 <_dtoa_r+0xd58>
    f804:	cmp.w	fp, #0
    f808:	bgt.w	f586 <_dtoa_r+0xb46>
    f80c:	b.n	f58a <_dtoa_r+0xb4a>
    f80e:	bne.w	f58a <_dtoa_r+0xb4a>
    f812:	tst.w	sl, #1
    f816:	beq.w	f58a <_dtoa_r+0xb4a>
    f81a:	b.n	f57e <_dtoa_r+0xb3e>
    f81c:	ldr	r3, [sp, #0]
    f81e:	cmp	r3, #2
    f820:	bgt.n	f86e <_dtoa_r+0xe2e>
    f822:	ldr	r3, [sp, #56]	; 0x38
    f824:	b.n	f442 <_dtoa_r+0xa02>
    f826:	mov.w	sl, #2
    f82a:	b.n	f100 <_dtoa_r+0x6c0>
    f82c:	ldr	r3, [sp, #0]
    f82e:	cmp	r3, #2
    f830:	bgt.n	f86e <_dtoa_r+0xe2e>
    f832:	ldr	r3, [sp, #56]	; 0x38
    f834:	b.n	f312 <_dtoa_r+0x8d2>
    f836:	movs	r4, #0
    f838:	str.w	r4, [r9, #68]	; 0x44
    f83c:	mov	r1, r4
    f83e:	mov	r0, r9
    f840:	bl	fb24 <_Balloc>
    f844:	mov.w	r3, #4294967295
    f848:	str	r3, [sp, #32]
    f84a:	str	r3, [sp, #56]	; 0x38
    f84c:	movs	r3, #1
    f84e:	str	r0, [sp, #36]	; 0x24
    f850:	str	r4, [sp, #20]
    f852:	str.w	r0, [r9, #64]	; 0x40
    f856:	str	r3, [sp, #44]	; 0x2c
    f858:	b.w	ec54 <_dtoa_r+0x214>
    f85c:	beq.w	eef0 <_dtoa_r+0x4b0>
    f860:	rsb	r0, r0, #60	; 0x3c
    f864:	b.w	eee6 <_dtoa_r+0x4a6>
    f868:	movs	r6, #1
    f86a:	b.w	ebe6 <_dtoa_r+0x1a6>
    f86e:	ldr	r3, [sp, #56]	; 0x38
    f870:	str	r3, [sp, #32]
    f872:	b.n	f452 <_dtoa_r+0xa12>

0000f874 <__libc_fini_array>:
    f874:	push	{r3, r4, r5, lr}
    f876:	ldr	r5, [pc, #28]	; (f894 <__libc_fini_array+0x20>)
    f878:	ldr	r4, [pc, #28]	; (f898 <__libc_fini_array+0x24>)
    f87a:	subs	r4, r5, r4
    f87c:	asrs	r4, r4, #2
    f87e:	beq.n	f88c <__libc_fini_array+0x18>
    f880:	subs	r4, #1
    f882:	ldr.w	r3, [r5, #-4]!
    f886:	blx	r3
    f888:	cmp	r4, #0
    f88a:	bne.n	f880 <__libc_fini_array+0xc>
    f88c:	ldmia.w	sp!, {r3, r4, r5, lr}
    f890:	b.w	10cb8 <__init_array_end>
	...

0000f89c <_malloc_trim_r>:
    f89c:	push	{r3, r4, r5, r6, r7, lr}
    f89e:	ldr	r7, [pc, #140]	; (f92c <_malloc_trim_r+0x90>)
    f8a0:	mov	r4, r1
    f8a2:	mov	r6, r0
    f8a4:	bl	c9c8 <__malloc_lock>
    f8a8:	ldr	r3, [r7, #8]
    f8aa:	ldr	r5, [r3, #4]
    f8ac:	bic.w	r5, r5, #3
    f8b0:	subs	r1, r5, r4
    f8b2:	addw	r1, r1, #4079	; 0xfef
    f8b6:	bic.w	r1, r1, #4080	; 0xff0
    f8ba:	bic.w	r1, r1, #15
    f8be:	sub.w	r4, r1, #4096	; 0x1000
    f8c2:	cmp.w	r4, #4096	; 0x1000
    f8c6:	blt.n	f8d8 <_malloc_trim_r+0x3c>
    f8c8:	movs	r1, #0
    f8ca:	mov	r0, r6
    f8cc:	bl	cdb0 <_sbrk_r>
    f8d0:	ldr	r3, [r7, #8]
    f8d2:	add	r3, r5
    f8d4:	cmp	r0, r3
    f8d6:	beq.n	f8e2 <_malloc_trim_r+0x46>
    f8d8:	mov	r0, r6
    f8da:	bl	c9cc <__malloc_unlock>
    f8de:	movs	r0, #0
    f8e0:	pop	{r3, r4, r5, r6, r7, pc}
    f8e2:	negs	r1, r4
    f8e4:	mov	r0, r6
    f8e6:	bl	cdb0 <_sbrk_r>
    f8ea:	adds	r0, #1
    f8ec:	beq.n	f90a <_malloc_trim_r+0x6e>
    f8ee:	ldr	r3, [pc, #64]	; (f930 <_malloc_trim_r+0x94>)
    f8f0:	ldr	r2, [r7, #8]
    f8f2:	ldr	r1, [r3, #0]
    f8f4:	subs	r5, r5, r4
    f8f6:	orr.w	r5, r5, #1
    f8fa:	mov	r0, r6
    f8fc:	subs	r1, r1, r4
    f8fe:	str	r5, [r2, #4]
    f900:	str	r1, [r3, #0]
    f902:	bl	c9cc <__malloc_unlock>
    f906:	movs	r0, #1
    f908:	pop	{r3, r4, r5, r6, r7, pc}
    f90a:	movs	r1, #0
    f90c:	mov	r0, r6
    f90e:	bl	cdb0 <_sbrk_r>
    f912:	ldr	r2, [r7, #8]
    f914:	subs	r3, r0, r2
    f916:	cmp	r3, #15
    f918:	ble.n	f8d8 <_malloc_trim_r+0x3c>
    f91a:	ldr	r4, [pc, #24]	; (f934 <_malloc_trim_r+0x98>)
    f91c:	ldr	r1, [pc, #16]	; (f930 <_malloc_trim_r+0x94>)
    f91e:	ldr	r4, [r4, #0]
    f920:	orr.w	r3, r3, #1
    f924:	subs	r0, r0, r4
    f926:	str	r3, [r2, #4]
    f928:	str	r0, [r1, #0]
    f92a:	b.n	f8d8 <_malloc_trim_r+0x3c>
    f92c:	.word	0x1fff1040
    f930:	.word	0x1fff8d84
    f934:	.word	0x1fff144c

0000f938 <_free_r>:
    f938:	cmp	r1, #0
    f93a:	beq.n	f9c8 <_free_r+0x90>
    f93c:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f940:	mov	r5, r1
    f942:	mov	r8, r0
    f944:	bl	c9c8 <__malloc_lock>
    f948:	ldr.w	r7, [r5, #-4]
    f94c:	ldr	r1, [pc, #424]	; (faf8 <_free_r+0x1c0>)
    f94e:	bic.w	r3, r7, #1
    f952:	sub.w	r4, r5, #8
    f956:	adds	r2, r4, r3
    f958:	ldr	r6, [r1, #8]
    f95a:	ldr	r0, [r2, #4]
    f95c:	cmp	r2, r6
    f95e:	bic.w	r0, r0, #3
    f962:	beq.n	fa2a <_free_r+0xf2>
    f964:	lsls	r6, r7, #31
    f966:	str	r0, [r2, #4]
    f968:	bmi.n	f982 <_free_r+0x4a>
    f96a:	ldr.w	r7, [r5, #-8]
    f96e:	subs	r4, r4, r7
    f970:	add.w	lr, r1, #8
    f974:	ldr	r5, [r4, #8]
    f976:	cmp	r5, lr
    f978:	add	r3, r7
    f97a:	beq.n	fa5c <_free_r+0x124>
    f97c:	ldr	r7, [r4, #12]
    f97e:	str	r7, [r5, #12]
    f980:	str	r5, [r7, #8]
    f982:	adds	r5, r2, r0
    f984:	ldr	r5, [r5, #4]
    f986:	lsls	r5, r5, #31
    f988:	bpl.n	fa10 <_free_r+0xd8>
    f98a:	orr.w	r2, r3, #1
    f98e:	str	r2, [r4, #4]
    f990:	str	r3, [r4, r3]
    f992:	cmp.w	r3, #512	; 0x200
    f996:	bcs.n	f9ca <_free_r+0x92>
    f998:	lsrs	r3, r3, #3
    f99a:	adds	r2, r3, #1
    f99c:	ldr	r5, [r1, #4]
    f99e:	ldr.w	r7, [r1, r2, lsl #3]
    f9a2:	str	r7, [r4, #8]
    f9a4:	movs	r0, #1
    f9a6:	asrs	r3, r3, #2
    f9a8:	lsl.w	r3, r0, r3
    f9ac:	add.w	r0, r1, r2, lsl #3
    f9b0:	orrs	r5, r3
    f9b2:	subs	r0, #8
    f9b4:	str	r0, [r4, #12]
    f9b6:	str	r5, [r1, #4]
    f9b8:	str.w	r4, [r1, r2, lsl #3]
    f9bc:	str	r4, [r7, #12]
    f9be:	mov	r0, r8
    f9c0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    f9c4:	b.w	c9cc <__malloc_unlock>
    f9c8:	bx	lr
    f9ca:	lsrs	r2, r3, #9
    f9cc:	cmp	r2, #4
    f9ce:	bhi.n	fa78 <_free_r+0x140>
    f9d0:	lsrs	r2, r3, #6
    f9d2:	add.w	r7, r2, #57	; 0x39
    f9d6:	lsls	r7, r7, #1
    f9d8:	add.w	r5, r2, #56	; 0x38
    f9dc:	add.w	r0, r1, r7, lsl #2
    f9e0:	ldr.w	r2, [r1, r7, lsl #2]
    f9e4:	ldr	r1, [pc, #272]	; (faf8 <_free_r+0x1c0>)
    f9e6:	subs	r0, #8
    f9e8:	cmp	r0, r2
    f9ea:	beq.n	fa88 <_free_r+0x150>
    f9ec:	ldr	r1, [r2, #4]
    f9ee:	bic.w	r1, r1, #3
    f9f2:	cmp	r3, r1
    f9f4:	bcs.n	f9fc <_free_r+0xc4>
    f9f6:	ldr	r2, [r2, #8]
    f9f8:	cmp	r0, r2
    f9fa:	bne.n	f9ec <_free_r+0xb4>
    f9fc:	ldr	r0, [r2, #12]
    f9fe:	str	r0, [r4, #12]
    fa00:	str	r2, [r4, #8]
    fa02:	str	r4, [r0, #8]
    fa04:	str	r4, [r2, #12]
    fa06:	mov	r0, r8
    fa08:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    fa0c:	b.w	c9cc <__malloc_unlock>
    fa10:	ldr	r5, [r2, #8]
    fa12:	ldr	r7, [pc, #232]	; (fafc <_free_r+0x1c4>)
    fa14:	cmp	r5, r7
    fa16:	add	r3, r0
    fa18:	beq.n	fa9a <_free_r+0x162>
    fa1a:	ldr	r0, [r2, #12]
    fa1c:	str	r0, [r5, #12]
    fa1e:	orr.w	r2, r3, #1
    fa22:	str	r5, [r0, #8]
    fa24:	str	r2, [r4, #4]
    fa26:	str	r3, [r4, r3]
    fa28:	b.n	f992 <_free_r+0x5a>
    fa2a:	lsls	r7, r7, #31
    fa2c:	add	r3, r0
    fa2e:	bmi.n	fa40 <_free_r+0x108>
    fa30:	ldr.w	r2, [r5, #-8]
    fa34:	subs	r4, r4, r2
    fa36:	add	r3, r2
    fa38:	ldr	r0, [r4, #8]
    fa3a:	ldr	r2, [r4, #12]
    fa3c:	str	r2, [r0, #12]
    fa3e:	str	r0, [r2, #8]
    fa40:	ldr	r2, [pc, #188]	; (fb00 <_free_r+0x1c8>)
    fa42:	ldr	r2, [r2, #0]
    fa44:	orr.w	r0, r3, #1
    fa48:	cmp	r3, r2
    fa4a:	str	r0, [r4, #4]
    fa4c:	str	r4, [r1, #8]
    fa4e:	bcc.n	f9be <_free_r+0x86>
    fa50:	ldr	r3, [pc, #176]	; (fb04 <_free_r+0x1cc>)
    fa52:	mov	r0, r8
    fa54:	ldr	r1, [r3, #0]
    fa56:	bl	f89c <_malloc_trim_r>
    fa5a:	b.n	f9be <_free_r+0x86>
    fa5c:	adds	r1, r2, r0
    fa5e:	ldr	r1, [r1, #4]
    fa60:	lsls	r1, r1, #31
    fa62:	bmi.n	faee <_free_r+0x1b6>
    fa64:	ldr	r1, [r2, #8]
    fa66:	ldr	r2, [r2, #12]
    fa68:	str	r2, [r1, #12]
    fa6a:	add	r3, r0
    fa6c:	orr.w	r0, r3, #1
    fa70:	str	r1, [r2, #8]
    fa72:	str	r0, [r4, #4]
    fa74:	str	r3, [r4, r3]
    fa76:	b.n	f9be <_free_r+0x86>
    fa78:	cmp	r2, #20
    fa7a:	bhi.n	faac <_free_r+0x174>
    fa7c:	add.w	r7, r2, #92	; 0x5c
    fa80:	lsls	r7, r7, #1
    fa82:	add.w	r5, r2, #91	; 0x5b
    fa86:	b.n	f9dc <_free_r+0xa4>
    fa88:	asrs	r2, r5, #2
    fa8a:	ldr	r3, [r1, #4]
    fa8c:	movs	r5, #1
    fa8e:	lsl.w	r2, r5, r2
    fa92:	orrs	r3, r2
    fa94:	str	r3, [r1, #4]
    fa96:	mov	r2, r0
    fa98:	b.n	f9fe <_free_r+0xc6>
    fa9a:	orr.w	r2, r3, #1
    fa9e:	str	r4, [r1, #20]
    faa0:	str	r4, [r1, #16]
    faa2:	str	r5, [r4, #12]
    faa4:	str	r5, [r4, #8]
    faa6:	str	r2, [r4, #4]
    faa8:	str	r3, [r4, r3]
    faaa:	b.n	f9be <_free_r+0x86>
    faac:	cmp	r2, #84	; 0x54
    faae:	bhi.n	fabe <_free_r+0x186>
    fab0:	lsrs	r2, r3, #12
    fab2:	add.w	r7, r2, #111	; 0x6f
    fab6:	lsls	r7, r7, #1
    fab8:	add.w	r5, r2, #110	; 0x6e
    fabc:	b.n	f9dc <_free_r+0xa4>
    fabe:	cmp.w	r2, #340	; 0x154
    fac2:	bhi.n	fad2 <_free_r+0x19a>
    fac4:	lsrs	r2, r3, #15
    fac6:	add.w	r7, r2, #120	; 0x78
    faca:	lsls	r7, r7, #1
    facc:	add.w	r5, r2, #119	; 0x77
    fad0:	b.n	f9dc <_free_r+0xa4>
    fad2:	movw	r0, #1364	; 0x554
    fad6:	cmp	r2, r0
    fad8:	bhi.n	fae8 <_free_r+0x1b0>
    fada:	lsrs	r2, r3, #18
    fadc:	add.w	r7, r2, #125	; 0x7d
    fae0:	lsls	r7, r7, #1
    fae2:	add.w	r5, r2, #124	; 0x7c
    fae6:	b.n	f9dc <_free_r+0xa4>
    fae8:	movs	r7, #254	; 0xfe
    faea:	movs	r5, #126	; 0x7e
    faec:	b.n	f9dc <_free_r+0xa4>
    faee:	orr.w	r2, r3, #1
    faf2:	str	r2, [r4, #4]
    faf4:	str	r3, [r4, r3]
    faf6:	b.n	f9be <_free_r+0x86>
    faf8:	.word	0x1fff1040
    fafc:	.word	0x1fff1048
    fb00:	.word	0x1fff1448
    fb04:	.word	0x1fff8d80

0000fb08 <_localeconv_r>:
    fb08:	ldr	r2, [pc, #16]	; (fb1c <_localeconv_r+0x14>)
    fb0a:	ldr	r3, [pc, #20]	; (fb20 <_localeconv_r+0x18>)
    fb0c:	ldr	r2, [r2, #0]
    fb0e:	ldr	r0, [r2, #52]	; 0x34
    fb10:	cmp	r0, #0
    fb12:	it	eq
    fb14:	moveq	r0, r3
    fb16:	adds	r0, #240	; 0xf0
    fb18:	bx	lr
    fb1a:	nop
    fb1c:	.word	0x1fff0ed0
    fb20:	.word	0x1fff0ed4

0000fb24 <_Balloc>:
    fb24:	ldr	r3, [r0, #76]	; 0x4c
    fb26:	push	{r4, r5, r6, lr}
    fb28:	mov	r5, r0
    fb2a:	mov	r4, r1
    fb2c:	cbz	r3, fb42 <_Balloc+0x1e>
    fb2e:	ldr.w	r0, [r3, r4, lsl #2]
    fb32:	cbz	r0, fb56 <_Balloc+0x32>
    fb34:	ldr	r2, [r0, #0]
    fb36:	str.w	r2, [r3, r4, lsl #2]
    fb3a:	movs	r3, #0
    fb3c:	str	r3, [r0, #16]
    fb3e:	str	r3, [r0, #12]
    fb40:	pop	{r4, r5, r6, pc}
    fb42:	movs	r2, #33	; 0x21
    fb44:	movs	r1, #4
    fb46:	bl	102a8 <_calloc_r>
    fb4a:	str	r0, [r5, #76]	; 0x4c
    fb4c:	mov	r3, r0
    fb4e:	cmp	r0, #0
    fb50:	bne.n	fb2e <_Balloc+0xa>
    fb52:	movs	r0, #0
    fb54:	pop	{r4, r5, r6, pc}
    fb56:	movs	r1, #1
    fb58:	lsl.w	r6, r1, r4
    fb5c:	adds	r2, r6, #5
    fb5e:	mov	r0, r5
    fb60:	lsls	r2, r2, #2
    fb62:	bl	102a8 <_calloc_r>
    fb66:	cmp	r0, #0
    fb68:	beq.n	fb52 <_Balloc+0x2e>
    fb6a:	str	r4, [r0, #4]
    fb6c:	str	r6, [r0, #8]
    fb6e:	b.n	fb3a <_Balloc+0x16>

0000fb70 <_Bfree>:
    fb70:	cbz	r1, fb80 <_Bfree+0x10>
    fb72:	ldr	r3, [r0, #76]	; 0x4c
    fb74:	ldr	r2, [r1, #4]
    fb76:	ldr.w	r0, [r3, r2, lsl #2]
    fb7a:	str	r0, [r1, #0]
    fb7c:	str.w	r1, [r3, r2, lsl #2]
    fb80:	bx	lr
    fb82:	nop

0000fb84 <__multadd>:
    fb84:	push	{r4, r5, r6, r7, lr}
    fb86:	ldr	r4, [r1, #16]
    fb88:	sub	sp, #12
    fb8a:	mov	r5, r1
    fb8c:	mov	r6, r0
    fb8e:	add.w	lr, r1, #20
    fb92:	movs	r7, #0
    fb94:	ldr.w	r0, [lr]
    fb98:	uxth	r1, r0
    fb9a:	mla	r1, r2, r1, r3
    fb9e:	lsrs	r3, r1, #16
    fba0:	lsrs	r0, r0, #16
    fba2:	mla	r3, r2, r0, r3
    fba6:	uxth	r1, r1
    fba8:	adds	r7, #1
    fbaa:	add.w	r1, r1, r3, lsl #16
    fbae:	cmp	r4, r7
    fbb0:	str.w	r1, [lr], #4
    fbb4:	mov.w	r3, r3, lsr #16
    fbb8:	bgt.n	fb94 <__multadd+0x10>
    fbba:	cbz	r3, fbcc <__multadd+0x48>
    fbbc:	ldr	r2, [r5, #8]
    fbbe:	cmp	r4, r2
    fbc0:	bge.n	fbd2 <__multadd+0x4e>
    fbc2:	add.w	r2, r5, r4, lsl #2
    fbc6:	adds	r4, #1
    fbc8:	str	r3, [r2, #20]
    fbca:	str	r4, [r5, #16]
    fbcc:	mov	r0, r5
    fbce:	add	sp, #12
    fbd0:	pop	{r4, r5, r6, r7, pc}
    fbd2:	ldr	r1, [r5, #4]
    fbd4:	str	r3, [sp, #4]
    fbd6:	adds	r1, #1
    fbd8:	mov	r0, r6
    fbda:	bl	fb24 <_Balloc>
    fbde:	ldr	r2, [r5, #16]
    fbe0:	adds	r2, #2
    fbe2:	add.w	r1, r5, #12
    fbe6:	mov	r7, r0
    fbe8:	lsls	r2, r2, #2
    fbea:	adds	r0, #12
    fbec:	bl	9aa8 <memcpy>
    fbf0:	ldr	r2, [r6, #76]	; 0x4c
    fbf2:	ldr	r1, [r5, #4]
    fbf4:	ldr	r3, [sp, #4]
    fbf6:	ldr.w	r0, [r2, r1, lsl #2]
    fbfa:	str	r0, [r5, #0]
    fbfc:	str.w	r5, [r2, r1, lsl #2]
    fc00:	mov	r5, r7
    fc02:	b.n	fbc2 <__multadd+0x3e>

0000fc04 <__hi0bits>:
    fc04:	lsrs	r3, r0, #16
    fc06:	lsls	r3, r3, #16
    fc08:	cbnz	r3, fc38 <__hi0bits+0x34>
    fc0a:	lsls	r0, r0, #16
    fc0c:	movs	r3, #16
    fc0e:	tst.w	r0, #4278190080	; 0xff000000
    fc12:	itt	eq
    fc14:	lsleq	r0, r0, #8
    fc16:	addeq	r3, #8
    fc18:	tst.w	r0, #4026531840	; 0xf0000000
    fc1c:	itt	eq
    fc1e:	lsleq	r0, r0, #4
    fc20:	addeq	r3, #4
    fc22:	tst.w	r0, #3221225472	; 0xc0000000
    fc26:	itt	eq
    fc28:	lsleq	r0, r0, #2
    fc2a:	addeq	r3, #2
    fc2c:	cmp	r0, #0
    fc2e:	blt.n	fc40 <__hi0bits+0x3c>
    fc30:	lsls	r2, r0, #1
    fc32:	bmi.n	fc3c <__hi0bits+0x38>
    fc34:	movs	r0, #32
    fc36:	bx	lr
    fc38:	movs	r3, #0
    fc3a:	b.n	fc0e <__hi0bits+0xa>
    fc3c:	adds	r0, r3, #1
    fc3e:	bx	lr
    fc40:	mov	r0, r3
    fc42:	bx	lr

0000fc44 <__lo0bits>:
    fc44:	ldr	r3, [r0, #0]
    fc46:	ands.w	r2, r3, #7
    fc4a:	beq.n	fc5c <__lo0bits+0x18>
    fc4c:	lsls	r1, r3, #31
    fc4e:	bmi.n	fc92 <__lo0bits+0x4e>
    fc50:	lsls	r2, r3, #30
    fc52:	bmi.n	fc96 <__lo0bits+0x52>
    fc54:	lsrs	r3, r3, #2
    fc56:	str	r3, [r0, #0]
    fc58:	movs	r0, #2
    fc5a:	bx	lr
    fc5c:	uxth	r1, r3
    fc5e:	cbnz	r1, fc64 <__lo0bits+0x20>
    fc60:	lsrs	r3, r3, #16
    fc62:	movs	r2, #16
    fc64:	tst.w	r3, #255	; 0xff
    fc68:	itt	eq
    fc6a:	lsreq	r3, r3, #8
    fc6c:	addeq	r2, #8
    fc6e:	lsls	r1, r3, #28
    fc70:	itt	eq
    fc72:	lsreq	r3, r3, #4
    fc74:	addeq	r2, #4
    fc76:	lsls	r1, r3, #30
    fc78:	itt	eq
    fc7a:	lsreq	r3, r3, #2
    fc7c:	addeq	r2, #2
    fc7e:	lsls	r1, r3, #31
    fc80:	bmi.n	fc8c <__lo0bits+0x48>
    fc82:	lsrs	r3, r3, #1
    fc84:	bne.n	fc8a <__lo0bits+0x46>
    fc86:	movs	r0, #32
    fc88:	bx	lr
    fc8a:	adds	r2, #1
    fc8c:	str	r3, [r0, #0]
    fc8e:	mov	r0, r2
    fc90:	bx	lr
    fc92:	movs	r0, #0
    fc94:	bx	lr
    fc96:	lsrs	r3, r3, #1
    fc98:	str	r3, [r0, #0]
    fc9a:	movs	r0, #1
    fc9c:	bx	lr
    fc9e:	nop

0000fca0 <__i2b>:
    fca0:	push	{r4, lr}
    fca2:	mov	r4, r1
    fca4:	movs	r1, #1
    fca6:	bl	fb24 <_Balloc>
    fcaa:	movs	r2, #1
    fcac:	str	r4, [r0, #20]
    fcae:	str	r2, [r0, #16]
    fcb0:	pop	{r4, pc}
    fcb2:	nop

0000fcb4 <__multiply>:
    fcb4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    fcb8:	ldr	r5, [r1, #16]
    fcba:	ldr	r7, [r2, #16]
    fcbc:	cmp	r5, r7
    fcbe:	sub	sp, #12
    fcc0:	mov	r4, r1
    fcc2:	mov	r6, r2
    fcc4:	bge.n	fcd0 <__multiply+0x1c>
    fcc6:	mov	r2, r5
    fcc8:	mov	r4, r6
    fcca:	mov	r5, r7
    fccc:	mov	r6, r1
    fcce:	mov	r7, r2
    fcd0:	ldr	r3, [r4, #8]
    fcd2:	ldr	r1, [r4, #4]
    fcd4:	add.w	r8, r5, r7
    fcd8:	cmp	r8, r3
    fcda:	it	gt
    fcdc:	addgt	r1, #1
    fcde:	bl	fb24 <_Balloc>
    fce2:	add.w	ip, r0, #20
    fce6:	add.w	r9, ip, r8, lsl #2
    fcea:	cmp	ip, r9
    fcec:	str	r0, [sp, #0]
    fcee:	bcs.n	fcfc <__multiply+0x48>
    fcf0:	mov	r3, ip
    fcf2:	movs	r1, #0
    fcf4:	str.w	r1, [r3], #4
    fcf8:	cmp	r9, r3
    fcfa:	bhi.n	fcf4 <__multiply+0x40>
    fcfc:	add.w	r2, r6, #20
    fd00:	add.w	sl, r2, r7, lsl #2
    fd04:	add.w	r3, r4, #20
    fd08:	cmp	r2, sl
    fd0a:	add.w	lr, r3, r5, lsl #2
    fd0e:	bcs.n	fdba <__multiply+0x106>
    fd10:	str.w	r9, [sp, #4]
    fd14:	mov	r9, r3
    fd16:	ldr.w	r3, [r2], #4
    fd1a:	uxth.w	fp, r3
    fd1e:	cmp.w	fp, #0
    fd22:	beq.n	fd66 <__multiply+0xb2>
    fd24:	movs	r0, #0
    fd26:	mov	r7, r9
    fd28:	mov	r6, ip
    fd2a:	mov	r5, r0
    fd2c:	b.n	fd30 <__multiply+0x7c>
    fd2e:	mov	r6, r3
    fd30:	ldr.w	r4, [r7], #4
    fd34:	ldr	r0, [r6, #0]
    fd36:	uxth	r1, r4
    fd38:	uxth	r3, r0
    fd3a:	mla	r1, fp, r1, r3
    fd3e:	lsrs	r4, r4, #16
    fd40:	lsrs	r0, r0, #16
    fd42:	adds	r3, r1, r5
    fd44:	mla	r0, fp, r4, r0
    fd48:	add.w	r0, r0, r3, lsr #16
    fd4c:	uxth	r1, r3
    fd4e:	mov	r3, r6
    fd50:	orr.w	r1, r1, r0, lsl #16
    fd54:	cmp	lr, r7
    fd56:	mov.w	r5, r0, lsr #16
    fd5a:	str.w	r1, [r3], #4
    fd5e:	bhi.n	fd2e <__multiply+0x7a>
    fd60:	str	r5, [r6, #4]
    fd62:	ldr.w	r3, [r2, #-4]
    fd66:	movs.w	fp, r3, lsr #16
    fd6a:	beq.n	fdae <__multiply+0xfa>
    fd6c:	ldr.w	r3, [ip]
    fd70:	mov	r7, ip
    fd72:	mov	r0, r3
    fd74:	mov	r5, r9
    fd76:	movs	r1, #0
    fd78:	b.n	fd7c <__multiply+0xc8>
    fd7a:	mov	r7, r6
    fd7c:	ldrh	r4, [r5, #0]
    fd7e:	lsrs	r0, r0, #16
    fd80:	mla	r0, fp, r4, r0
    fd84:	add	r1, r0
    fd86:	uxth	r4, r3
    fd88:	mov	r6, r7
    fd8a:	orr.w	r3, r4, r1, lsl #16
    fd8e:	str.w	r3, [r6], #4
    fd92:	ldr	r0, [r7, #4]
    fd94:	ldr.w	r4, [r5], #4
    fd98:	uxth	r3, r0
    fd9a:	lsrs	r4, r4, #16
    fd9c:	mla	r4, fp, r4, r3
    fda0:	add.w	r3, r4, r1, lsr #16
    fda4:	cmp	lr, r5
    fda6:	mov.w	r1, r3, lsr #16
    fdaa:	bhi.n	fd7a <__multiply+0xc6>
    fdac:	str	r3, [r7, #4]
    fdae:	cmp	sl, r2
    fdb0:	add.w	ip, ip, #4
    fdb4:	bhi.n	fd16 <__multiply+0x62>
    fdb6:	ldr.w	r9, [sp, #4]
    fdba:	cmp.w	r8, #0
    fdbe:	ble.n	fdd8 <__multiply+0x124>
    fdc0:	ldr.w	r3, [r9, #-4]
    fdc4:	sub.w	r9, r9, #4
    fdc8:	cbz	r3, fdd2 <__multiply+0x11e>
    fdca:	b.n	fdd8 <__multiply+0x124>
    fdcc:	ldr.w	r3, [r9, #-4]!
    fdd0:	cbnz	r3, fdd8 <__multiply+0x124>
    fdd2:	subs.w	r8, r8, #1
    fdd6:	bne.n	fdcc <__multiply+0x118>
    fdd8:	ldr	r0, [sp, #0]
    fdda:	str.w	r8, [r0, #16]
    fdde:	add	sp, #12
    fde0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000fde4 <__pow5mult>:
    fde4:	ands.w	r3, r2, #3
    fde8:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    fdec:	mov	r4, r2
    fdee:	mov	r7, r0
    fdf0:	bne.n	fe50 <__pow5mult+0x6c>
    fdf2:	mov	r6, r1
    fdf4:	asrs	r4, r4, #2
    fdf6:	beq.n	fe32 <__pow5mult+0x4e>
    fdf8:	ldr	r5, [r7, #72]	; 0x48
    fdfa:	cbz	r5, fe62 <__pow5mult+0x7e>
    fdfc:	lsls	r3, r4, #31
    fdfe:	mov.w	r8, #0
    fe02:	bmi.n	fe12 <__pow5mult+0x2e>
    fe04:	asrs	r4, r4, #1
    fe06:	beq.n	fe32 <__pow5mult+0x4e>
    fe08:	ldr	r0, [r5, #0]
    fe0a:	cbz	r0, fe38 <__pow5mult+0x54>
    fe0c:	mov	r5, r0
    fe0e:	lsls	r3, r4, #31
    fe10:	bpl.n	fe04 <__pow5mult+0x20>
    fe12:	mov	r2, r5
    fe14:	mov	r1, r6
    fe16:	mov	r0, r7
    fe18:	bl	fcb4 <__multiply>
    fe1c:	cbz	r6, fe4c <__pow5mult+0x68>
    fe1e:	ldr	r2, [r6, #4]
    fe20:	ldr	r3, [r7, #76]	; 0x4c
    fe22:	asrs	r4, r4, #1
    fe24:	ldr.w	r1, [r3, r2, lsl #2]
    fe28:	str	r1, [r6, #0]
    fe2a:	str.w	r6, [r3, r2, lsl #2]
    fe2e:	mov	r6, r0
    fe30:	bne.n	fe08 <__pow5mult+0x24>
    fe32:	mov	r0, r6
    fe34:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    fe38:	mov	r2, r5
    fe3a:	mov	r1, r5
    fe3c:	mov	r0, r7
    fe3e:	bl	fcb4 <__multiply>
    fe42:	str	r0, [r5, #0]
    fe44:	str.w	r8, [r0]
    fe48:	mov	r5, r0
    fe4a:	b.n	fe0e <__pow5mult+0x2a>
    fe4c:	mov	r6, r0
    fe4e:	b.n	fe04 <__pow5mult+0x20>
    fe50:	subs	r2, r3, #1
    fe52:	ldr	r5, [pc, #44]	; (fe80 <__pow5mult+0x9c>)
    fe54:	movs	r3, #0
    fe56:	ldr.w	r2, [r5, r2, lsl #2]
    fe5a:	bl	fb84 <__multadd>
    fe5e:	mov	r6, r0
    fe60:	b.n	fdf4 <__pow5mult+0x10>
    fe62:	movs	r1, #1
    fe64:	mov	r0, r7
    fe66:	bl	fb24 <_Balloc>
    fe6a:	movw	r1, #625	; 0x271
    fe6e:	movs	r2, #1
    fe70:	movs	r3, #0
    fe72:	str	r1, [r0, #20]
    fe74:	str	r2, [r0, #16]
    fe76:	mov	r5, r0
    fe78:	str	r0, [r7, #72]	; 0x48
    fe7a:	str	r3, [r0, #0]
    fe7c:	b.n	fdfc <__pow5mult+0x18>
    fe7e:	nop
    fe80:	.word	0x00010c90

0000fe84 <__lshift>:
    fe84:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    fe88:	mov	r9, r2
    fe8a:	ldr	r2, [r1, #16]
    fe8c:	ldr	r3, [r1, #8]
    fe8e:	mov.w	r4, r9, asr #5
    fe92:	add.w	r8, r4, r2
    fe96:	add.w	r5, r8, #1
    fe9a:	cmp	r5, r3
    fe9c:	mov	r6, r1
    fe9e:	mov	sl, r0
    fea0:	ldr	r1, [r1, #4]
    fea2:	ble.n	feae <__lshift+0x2a>
    fea4:	lsls	r3, r3, #1
    fea6:	cmp	r5, r3
    fea8:	add.w	r1, r1, #1
    feac:	bgt.n	fea4 <__lshift+0x20>
    feae:	mov	r0, sl
    feb0:	bl	fb24 <_Balloc>
    feb4:	cmp	r4, #0
    feb6:	add.w	r2, r0, #20
    feba:	ble.n	ff2e <__lshift+0xaa>
    febc:	add.w	r3, r2, r4, lsl #2
    fec0:	movs	r1, #0
    fec2:	str.w	r1, [r2], #4
    fec6:	cmp	r3, r2
    fec8:	bne.n	fec2 <__lshift+0x3e>
    feca:	ldr	r4, [r6, #16]
    fecc:	add.w	r1, r6, #20
    fed0:	ands.w	r9, r9, #31
    fed4:	add.w	lr, r1, r4, lsl #2
    fed8:	beq.n	ff1e <__lshift+0x9a>
    feda:	rsb	r2, r9, #32
    fede:	movs	r4, #0
    fee0:	ldr	r7, [r1, #0]
    fee2:	lsl.w	ip, r7, r9
    fee6:	orr.w	r4, ip, r4
    feea:	mov	ip, r3
    feec:	str.w	r4, [r3], #4
    fef0:	ldr.w	r4, [r1], #4
    fef4:	cmp	lr, r1
    fef6:	lsr.w	r4, r4, r2
    fefa:	bhi.n	fee0 <__lshift+0x5c>
    fefc:	str.w	r4, [ip, #4]
    ff00:	cbz	r4, ff06 <__lshift+0x82>
    ff02:	add.w	r5, r8, #2
    ff06:	ldr.w	r3, [sl, #76]	; 0x4c
    ff0a:	ldr	r2, [r6, #4]
    ff0c:	subs	r5, #1
    ff0e:	ldr.w	r1, [r3, r2, lsl #2]
    ff12:	str	r5, [r0, #16]
    ff14:	str	r1, [r6, #0]
    ff16:	str.w	r6, [r3, r2, lsl #2]
    ff1a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ff1e:	subs	r3, #4
    ff20:	ldr.w	r2, [r1], #4
    ff24:	str.w	r2, [r3, #4]!
    ff28:	cmp	lr, r1
    ff2a:	bhi.n	ff20 <__lshift+0x9c>
    ff2c:	b.n	ff06 <__lshift+0x82>
    ff2e:	mov	r3, r2
    ff30:	b.n	feca <__lshift+0x46>
    ff32:	nop

0000ff34 <__mcmp>:
    ff34:	ldr	r2, [r0, #16]
    ff36:	ldr	r3, [r1, #16]
    ff38:	subs	r2, r2, r3
    ff3a:	bne.n	ff64 <__mcmp+0x30>
    ff3c:	lsls	r3, r3, #2
    ff3e:	adds	r0, #20
    ff40:	adds	r1, #20
    ff42:	add	r1, r3
    ff44:	push	{r4}
    ff46:	add	r3, r0
    ff48:	b.n	ff4e <__mcmp+0x1a>
    ff4a:	cmp	r0, r3
    ff4c:	bcs.n	ff68 <__mcmp+0x34>
    ff4e:	ldr.w	r4, [r3, #-4]!
    ff52:	ldr.w	r2, [r1, #-4]!
    ff56:	cmp	r4, r2
    ff58:	beq.n	ff4a <__mcmp+0x16>
    ff5a:	bcc.n	ff70 <__mcmp+0x3c>
    ff5c:	movs	r0, #1
    ff5e:	ldr.w	r4, [sp], #4
    ff62:	bx	lr
    ff64:	mov	r0, r2
    ff66:	bx	lr
    ff68:	movs	r0, #0
    ff6a:	ldr.w	r4, [sp], #4
    ff6e:	bx	lr
    ff70:	mov.w	r0, #4294967295
    ff74:	b.n	ff5e <__mcmp+0x2a>
    ff76:	nop

0000ff78 <__mdiff>:
    ff78:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    ff7c:	ldr	r3, [r1, #16]
    ff7e:	mov	r7, r1
    ff80:	ldr	r1, [r2, #16]
    ff82:	subs	r3, r3, r1
    ff84:	cmp	r3, #0
    ff86:	mov	r8, r2
    ff88:	bne.n	ffba <__mdiff+0x42>
    ff8a:	lsls	r1, r1, #2
    ff8c:	add.w	r2, r7, #20
    ff90:	add.w	r5, r8, #20
    ff94:	adds	r3, r2, r1
    ff96:	add	r1, r5
    ff98:	b.n	ff9e <__mdiff+0x26>
    ff9a:	cmp	r2, r3
    ff9c:	bcs.n	1005c <__mdiff+0xe4>
    ff9e:	ldr.w	r6, [r3, #-4]!
    ffa2:	ldr.w	r4, [r1, #-4]!
    ffa6:	cmp	r6, r4
    ffa8:	beq.n	ff9a <__mdiff+0x22>
    ffaa:	bcs.n	1006e <__mdiff+0xf6>
    ffac:	mov	r3, r7
    ffae:	mov	r4, r2
    ffb0:	mov	r7, r8
    ffb2:	mov.w	r9, #1
    ffb6:	mov	r8, r3
    ffb8:	b.n	ffc8 <__mdiff+0x50>
    ffba:	blt.n	10078 <__mdiff+0x100>
    ffbc:	add.w	r5, r7, #20
    ffc0:	add.w	r4, r2, #20
    ffc4:	mov.w	r9, #0
    ffc8:	ldr	r1, [r7, #4]
    ffca:	bl	fb24 <_Balloc>
    ffce:	ldr.w	r3, [r8, #16]
    ffd2:	ldr	r6, [r7, #16]
    ffd4:	str.w	r9, [r0, #12]
    ffd8:	add.w	ip, r4, r3, lsl #2
    ffdc:	mov	lr, r4
    ffde:	add.w	r7, r5, r6, lsl #2
    ffe2:	add.w	r4, r0, #20
    ffe6:	movs	r3, #0
    ffe8:	ldr.w	r1, [lr], #4
    ffec:	ldr.w	r8, [r5], #4
    fff0:	uxth	r2, r1
    fff2:	uxtah	r3, r3, r8
    fff6:	lsrs	r1, r1, #16
    fff8:	subs	r2, r3, r2
    fffa:	rsb	r3, r1, r8, lsr #16
    fffe:	add.w	r3, r3, r2, asr #16
   10002:	uxth	r2, r2
   10004:	orr.w	r2, r2, r3, lsl #16
   10008:	cmp	ip, lr
   1000a:	str.w	r2, [r4], #4
   1000e:	mov.w	r3, r3, asr #16
   10012:	bhi.n	ffe8 <__mdiff+0x70>
   10014:	cmp	r7, r5
   10016:	bls.n	10048 <__mdiff+0xd0>
   10018:	mov	ip, r4
   1001a:	mov	r1, r5
   1001c:	ldr.w	lr, [r1], #4
   10020:	uxtah	r2, r3, lr
   10024:	asrs	r3, r2, #16
   10026:	add.w	r3, r3, lr, lsr #16
   1002a:	uxth	r2, r2
   1002c:	orr.w	r2, r2, r3, lsl #16
   10030:	cmp	r7, r1
   10032:	str.w	r2, [ip], #4
   10036:	mov.w	r3, r3, asr #16
   1003a:	bhi.n	1001c <__mdiff+0xa4>
   1003c:	mvns	r5, r5
   1003e:	add	r5, r7
   10040:	bic.w	r5, r5, #3
   10044:	adds	r5, #4
   10046:	add	r4, r5
   10048:	subs	r4, #4
   1004a:	cbnz	r2, 10056 <__mdiff+0xde>
   1004c:	ldr.w	r3, [r4, #-4]!
   10050:	subs	r6, #1
   10052:	cmp	r3, #0
   10054:	beq.n	1004c <__mdiff+0xd4>
   10056:	str	r6, [r0, #16]
   10058:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1005c:	movs	r1, #0
   1005e:	bl	fb24 <_Balloc>
   10062:	movs	r2, #1
   10064:	movs	r3, #0
   10066:	str	r2, [r0, #16]
   10068:	str	r3, [r0, #20]
   1006a:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1006e:	mov	r4, r5
   10070:	mov.w	r9, #0
   10074:	mov	r5, r2
   10076:	b.n	ffc8 <__mdiff+0x50>
   10078:	mov	r3, r7
   1007a:	add.w	r4, r7, #20
   1007e:	add.w	r5, r8, #20
   10082:	mov	r7, r8
   10084:	mov.w	r9, #1
   10088:	mov	r8, r3
   1008a:	b.n	ffc8 <__mdiff+0x50>

0001008c <__d2b>:
   1008c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   10090:	vmov	r6, r7, d0
   10094:	sub	sp, #12
   10096:	mov	r8, r1
   10098:	movs	r1, #1
   1009a:	mov	r4, r7
   1009c:	ubfx	r5, r7, #20, #11
   100a0:	mov	r7, r2
   100a2:	bl	fb24 <_Balloc>
   100a6:	ubfx	r4, r4, #0, #20
   100aa:	mov	r9, r0
   100ac:	cbz	r5, 100b2 <__d2b+0x26>
   100ae:	orr.w	r4, r4, #1048576	; 0x100000
   100b2:	str	r4, [sp, #4]
   100b4:	cbz	r6, 100fe <__d2b+0x72>
   100b6:	add	r0, sp, #8
   100b8:	str.w	r6, [r0, #-8]!
   100bc:	bl	fc44 <__lo0bits>
   100c0:	cmp	r0, #0
   100c2:	bne.n	1012e <__d2b+0xa2>
   100c4:	ldmia.w	sp, {r2, r3}
   100c8:	str.w	r2, [r9, #20]
   100cc:	cmp	r3, #0
   100ce:	ite	eq
   100d0:	moveq	r1, #1
   100d2:	movne	r1, #2
   100d4:	str.w	r3, [r9, #24]
   100d8:	str.w	r1, [r9, #16]
   100dc:	cbnz	r5, 10116 <__d2b+0x8a>
   100de:	add.w	r3, r9, r1, lsl #2
   100e2:	subw	r0, r0, #1074	; 0x432
   100e6:	str.w	r0, [r8]
   100ea:	ldr	r0, [r3, #16]
   100ec:	bl	fc04 <__hi0bits>
   100f0:	rsb	r0, r0, r1, lsl #5
   100f4:	str	r0, [r7, #0]
   100f6:	mov	r0, r9
   100f8:	add	sp, #12
   100fa:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   100fe:	add	r0, sp, #4
   10100:	bl	fc44 <__lo0bits>
   10104:	ldr	r3, [sp, #4]
   10106:	str.w	r3, [r9, #20]
   1010a:	movs	r1, #1
   1010c:	adds	r0, #32
   1010e:	str.w	r1, [r9, #16]
   10112:	cmp	r5, #0
   10114:	beq.n	100de <__d2b+0x52>
   10116:	subw	r5, r5, #1075	; 0x433
   1011a:	add	r5, r0
   1011c:	rsb	r0, r0, #53	; 0x35
   10120:	str.w	r5, [r8]
   10124:	str	r0, [r7, #0]
   10126:	mov	r0, r9
   10128:	add	sp, #12
   1012a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1012e:	ldmia.w	sp, {r2, r3}
   10132:	rsb	r1, r0, #32
   10136:	lsl.w	r1, r3, r1
   1013a:	orrs	r2, r1
   1013c:	lsrs	r3, r0
   1013e:	str	r3, [sp, #4]
   10140:	str.w	r2, [r9, #20]
   10144:	b.n	100cc <__d2b+0x40>
   10146:	nop

00010148 <__ssprint_r>:
   10148:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1014c:	ldr	r3, [r2, #8]
   1014e:	sub	sp, #12
   10150:	mov	r8, r2
   10152:	cmp	r3, #0
   10154:	beq.n	1023c <__ssprint_r+0xf4>
   10156:	mov	fp, r0
   10158:	mov.w	r9, #0
   1015c:	ldr	r6, [r2, #0]
   1015e:	ldr	r0, [r1, #0]
   10160:	ldr	r3, [r1, #8]
   10162:	mov	r5, r1
   10164:	mov	r4, r9
   10166:	cmp	r4, #0
   10168:	beq.n	101f6 <__ssprint_r+0xae>
   1016a:	cmp	r4, r3
   1016c:	mov	r7, r3
   1016e:	mov	sl, r3
   10170:	bcc.n	10200 <__ssprint_r+0xb8>
   10172:	ldrh	r3, [r5, #12]
   10174:	tst.w	r3, #1152	; 0x480
   10178:	beq.n	101d6 <__ssprint_r+0x8e>
   1017a:	ldr	r7, [r5, #20]
   1017c:	ldr	r1, [r5, #16]
   1017e:	add.w	r7, r7, r7, lsl #1
   10182:	rsb	sl, r1, r0
   10186:	add.w	r7, r7, r7, lsr #31
   1018a:	adds	r0, r4, #1
   1018c:	asrs	r7, r7, #1
   1018e:	add	r0, sl
   10190:	cmp	r0, r7
   10192:	mov	r2, r7
   10194:	itt	hi
   10196:	movhi	r7, r0
   10198:	movhi	r2, r7
   1019a:	lsls	r3, r3, #21
   1019c:	bpl.n	10206 <__ssprint_r+0xbe>
   1019e:	mov	r1, r2
   101a0:	mov	r0, fp
   101a2:	bl	c1bc <_malloc_r>
   101a6:	cmp	r0, #0
   101a8:	beq.n	1021a <__ssprint_r+0xd2>
   101aa:	mov	r2, sl
   101ac:	ldr	r1, [r5, #16]
   101ae:	str	r0, [sp, #4]
   101b0:	bl	9aa8 <memcpy>
   101b4:	ldrh	r2, [r5, #12]
   101b6:	ldr	r3, [sp, #4]
   101b8:	bic.w	r2, r2, #1152	; 0x480
   101bc:	orr.w	r2, r2, #128	; 0x80
   101c0:	strh	r2, [r5, #12]
   101c2:	rsb	r2, sl, r7
   101c6:	add.w	r0, r3, sl
   101ca:	str	r7, [r5, #20]
   101cc:	str	r3, [r5, #16]
   101ce:	str	r0, [r5, #0]
   101d0:	str	r2, [r5, #8]
   101d2:	mov	r7, r4
   101d4:	mov	sl, r4
   101d6:	mov	r2, sl
   101d8:	mov	r1, r9
   101da:	bl	c864 <memmove>
   101de:	ldr.w	r2, [r8, #8]
   101e2:	ldr	r3, [r5, #8]
   101e4:	ldr	r0, [r5, #0]
   101e6:	subs	r3, r3, r7
   101e8:	add	r0, sl
   101ea:	subs	r4, r2, r4
   101ec:	str	r3, [r5, #8]
   101ee:	str	r0, [r5, #0]
   101f0:	str.w	r4, [r8, #8]
   101f4:	cbz	r4, 1023c <__ssprint_r+0xf4>
   101f6:	ldr.w	r9, [r6]
   101fa:	ldr	r4, [r6, #4]
   101fc:	adds	r6, #8
   101fe:	b.n	10166 <__ssprint_r+0x1e>
   10200:	mov	r7, r4
   10202:	mov	sl, r4
   10204:	b.n	101d6 <__ssprint_r+0x8e>
   10206:	mov	r0, fp
   10208:	bl	c9d0 <_realloc_r>
   1020c:	mov	r3, r0
   1020e:	cmp	r0, #0
   10210:	bne.n	101c2 <__ssprint_r+0x7a>
   10212:	ldr	r1, [r5, #16]
   10214:	mov	r0, fp
   10216:	bl	f938 <_free_r>
   1021a:	movs	r3, #12
   1021c:	str.w	r3, [fp]
   10220:	ldrh	r3, [r5, #12]
   10222:	movs	r2, #0
   10224:	orr.w	r3, r3, #64	; 0x40
   10228:	mov.w	r0, #4294967295
   1022c:	strh	r3, [r5, #12]
   1022e:	str.w	r2, [r8, #8]
   10232:	str.w	r2, [r8, #4]
   10236:	add	sp, #12
   10238:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1023c:	movs	r0, #0
   1023e:	str.w	r0, [r8, #4]
   10242:	add	sp, #12
   10244:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00010248 <_vasnprintf_r>:
   10248:	push	{r4, r5, r6, lr}
   1024a:	mov	r5, r2
   1024c:	sub	sp, #104	; 0x68
   1024e:	ldr	r4, [r2, #0]
   10250:	cbz	r1, 10256 <_vasnprintf_r+0xe>
   10252:	cmp	r4, #0
   10254:	bne.n	1028c <_vasnprintf_r+0x44>
   10256:	movs	r4, #0
   10258:	mov.w	r2, #648	; 0x288
   1025c:	strh.w	r2, [sp, #12]
   10260:	str	r4, [sp, #0]
   10262:	str	r4, [sp, #16]
   10264:	mov	r2, r3
   10266:	movw	r6, #65535	; 0xffff
   1026a:	ldr	r3, [sp, #120]	; 0x78
   1026c:	str	r4, [sp, #8]
   1026e:	mov	r1, sp
   10270:	str	r4, [sp, #20]
   10272:	strh.w	r6, [sp, #14]
   10276:	bl	d0c0 <_svfprintf_r>
   1027a:	cmp	r0, #0
   1027c:	blt.n	102a2 <_vasnprintf_r+0x5a>
   1027e:	ldr	r3, [sp, #0]
   10280:	str	r0, [r5, #0]
   10282:	movs	r2, #0
   10284:	strb	r2, [r3, #0]
   10286:	ldr	r0, [sp, #16]
   10288:	add	sp, #104	; 0x68
   1028a:	pop	{r4, r5, r6, pc}
   1028c:	mov.w	r2, #1544	; 0x608
   10290:	str	r1, [sp, #0]
   10292:	str	r1, [sp, #16]
   10294:	strh.w	r2, [sp, #12]
   10298:	bge.n	10264 <_vasnprintf_r+0x1c>
   1029a:	movs	r3, #139	; 0x8b
   1029c:	str	r3, [r0, #0]
   1029e:	movs	r0, #0
   102a0:	b.n	10288 <_vasnprintf_r+0x40>
   102a2:	movs	r0, #0
   102a4:	b.n	10288 <_vasnprintf_r+0x40>
   102a6:	nop

000102a8 <_calloc_r>:
   102a8:	push	{r4, lr}
   102aa:	mul.w	r1, r2, r1
   102ae:	bl	c1bc <_malloc_r>
   102b2:	mov	r4, r0
   102b4:	cbz	r0, 102ee <_calloc_r+0x46>
   102b6:	ldr.w	r2, [r0, #-4]
   102ba:	bic.w	r2, r2, #3
   102be:	subs	r2, #4
   102c0:	cmp	r2, #36	; 0x24
   102c2:	bhi.n	102f6 <_calloc_r+0x4e>
   102c4:	cmp	r2, #19
   102c6:	bls.n	102f2 <_calloc_r+0x4a>
   102c8:	movs	r3, #0
   102ca:	cmp	r2, #27
   102cc:	str	r3, [r0, #0]
   102ce:	str	r3, [r0, #4]
   102d0:	bls.n	10300 <_calloc_r+0x58>
   102d2:	cmp	r2, #36	; 0x24
   102d4:	str	r3, [r0, #8]
   102d6:	str	r3, [r0, #12]
   102d8:	iteee	ne
   102da:	addne.w	r2, r0, #16
   102de:	streq	r3, [r0, #16]
   102e0:	streq	r3, [r0, #20]
   102e2:	addeq.w	r2, r0, #24
   102e6:	movs	r3, #0
   102e8:	str	r3, [r2, #0]
   102ea:	str	r3, [r2, #4]
   102ec:	str	r3, [r2, #8]
   102ee:	mov	r0, r4
   102f0:	pop	{r4, pc}
   102f2:	mov	r2, r0
   102f4:	b.n	102e6 <_calloc_r+0x3e>
   102f6:	movs	r1, #0
   102f8:	bl	c92c <memset>
   102fc:	mov	r0, r4
   102fe:	pop	{r4, pc}
   10300:	add.w	r2, r0, #8
   10304:	b.n	102e6 <_calloc_r+0x3e>
   10306:	nop

00010308 <vtable for Stream>:
	...
   10310:	=...%...m...q...
   10320:	=...=...=...

0001032c <vtable for StreamFile<FsBaseFile, unsigned long long>>:
	...
   10334:	....]...m...y...
   10344:	....A...)...

00010350 <vtable for FsFile>:
	...
   10358:	....]...m...y...
   10368:	....A...)...

00010374 <vtable for File>:
	...
   1037c:	....%...m.......
   1038c:	....U.......q...
   1039c:	........u.......
   103ac:	................
   103bc:	................
   103cc:	I...

000103d0 <vtable for SDFile>:
	...
   103d8:	....%...m...I...
   103e8:	....U...........
   103f8:	............q...
   10408:	................
   10418:	....A...!.......
   10428:	....  File    th
   10438:	is=%x, f=%x.....
   10448:	   SDFile this=%
   10458:	x, refcount=%u..
   10468:	%s: %6d %4d %4d 
   10478:	%4d %4d %d...Sta
   10488:	rt...Stop.../%d/
   10498:	%02d_%02d_%02d.r
   104a8:	aw..loop....%d %
   104b8:	d...No storage..
   104c8:	MTP logger..

000104d4 <vtable for MTPStorage_SD>:
	...
   104dc:	........].......
   104ec:	}....!......Q...
   104fc:	........y.......
   1050c:	....Q...........
   1051c:	......../mtpinde
   1052c:	x.dat.../...

00010538 <supported_op>:
   10538:	................
   10548:	................
   10558:	....

0001055c <propertyList>:
   1055c:	................
   1056c:	A.D.Teensy..micr
   1057c:	osoft.com: 1.0;.
   1058c:	PJRC....1.0.???.
   1059c:	SD Card.%x %d %d
   105ac:	 %d: %x %x %x...

000105bc <monthDays>:
   105bc:	............DBG_
   105cc:	FAIL: ..ExFatFil
   105dc:	e.cpp...ExFatPar
   105ec:	tition.cpp..EXFA
   105fc:	T...ExFatFileWri
   1060c:	te.cpp..FatFile.
   1061c:	cpp.FatPartition
   1062c:	.cpp....FatFileL
   1063c:	FN.cpp..DBG_HALT
   1064c:	 ...C:\Users\zim
   1065c:	me\Documents\ard
   1066c:	uino-1.8.12\hard
   1067c:	ware\teensy\avr\
   1068c:	libraries/SdFat-
   1069c:	beta/src/FatLib/
   106ac:	/FatFileLFN.cpp.
   106bc:	FatFileSFN.cpp..

000106cc <vtable for SdSpiCard>:
	...
   106d4:	........i...e...
   106e4:	}...a...}.......
   106f4:	e...a...e...U...
   10704:	u...m.......Y...
   10714:	y...............

00010724 <vtable for SdioCard>:
	...
   1072c:	....]...........
   1073c:	....I...........
   1074c:	................
   1075c:	................
   1076c:	m...E.......A...

0001077c <digital_pin_to_info_PGM>:
   1077c:	@..C@..@D..CD..@
   1078c:	...C...@0..C0..@
   1079c:	4..C4..@...C...@
   107ac:	...C...@...C...@
   107bc:	...C...@...C...@
   107cc:	...C...@...C...@
   107dc:	...C...@...C...@
   107ec:	...C...@...C...@
   107fc:	...C...@...C...@
   1080c:	...C...@...C...@
   1081c:	...C...@...C...@
   1082c:	...C...@...C...@
   1083c:	h .Ch..@...C...@
   1084c:	8..C8..@<..C<..@
   1085c:	@..C@..@H..CH..@
   1086c:	L..CL..@(..C(..@
   1087c:	,..C,..@` .C`..@
   1088c:	d .Cd..@ ..C ..@
   1089c:	$..C$..@(..C(..@
   108ac:	,..C,..@D..CD..@
   108bc:	p..Cp..@t..Ct..@
   108cc:	h..Ch..@P..CP..@
   108dc:	X..CX..@\..C\..@
   108ec:	T..CT..@ ..C ..@
   108fc:	$..C$..@...C...@
   1090c:	...C...@8..C8..@
   1091c:	4..C4..@0..C0..@
   1092c:	<..C<..@,..C,..@
   1093c:	( .C(..@, .C,..@
   1094c:	. .C...@. .C...@
   1095c:	. .C...@. .C...@
   1096c:	. .C...@. .C...@

0001097c <vtable for usb_serial_class>:
	...
   10984:	................
   10994:	................
   109a4:	....

000109a8 <usb_endpoint_config_table>:
   109a8:	........

000109b0 <usb_descriptor_list>:
   109b0:	................
   109c0:	....i.......P...
   109d0:	................
   109e0:	................
   109f0:	X...............
	...

00010a10 <_global_impure_ptr>:
   10a10:	....C...POSIX...
   10a20:	....

00010a24 <zeroes.7258>:
   10a24:	0000000000000000
   10a34:	INF.inf.NAN.nan.
   10a44:	0123456789ABCDEF
   10a54:	....0123456789ab
   10a64:	cdef....(null)..
   10a74:	0...

00010a78 <blanks.7257>:
   10a78:	                

00010a88 <_ctype_>:
   10a88:	.         ((((( 
   10a98:	                
   10aa8:	 ...............
   10ab8:	................
   10ac8:	..AAAAAA........
   10ad8:	................
   10ae8:	..BBBBBB........
   10af8:	................
   10b08:	 ...............
	...
   10b88:	....Infinity....
   10b98:	NaN.....

00010ba0 <__mprec_tens>:
   10ba0:	.......?......$@
   10bb0:	......Y@.....@.@
   10bc0:	.......@.....j.@
   10bd0:	.......A......cA
   10be0:	.......A....e..A
   10bf0:	... _..B....vH7B
   10c00:	......mB..@..0.B
   10c10:	.......B..4&.k.C
   10c20:	...7y.AC....W4vC
   10c30:	..Ngm..C.=.`.X.C
   10c40:	@..x...DP.....KD
   10c50:	..M....D.J...-.D
   10c60:	...yCx.D

00010c68 <__mprec_bigtens>:
   10c68:	...7y.AC.n.....F
   10c78:	..?..O8M2.0.Hw.Z
   10c88:	<.s..O.u

00010c90 <p05.6087>:
   10c90:	........}...

00010c9c <_init>:
   10c9c:	push	{r3, r4, r5, r6, r7, lr}
   10c9e:	nop
   10ca0:	pop	{r3, r4, r5, r6, r7}
   10ca2:	pop	{r3}
   10ca4:	mov	lr, r3
   10ca6:	bx	lr

00010ca8 <__init_array_start>:
   10ca8:	.word	0x0000e8f5

00010cac <__frame_dummy_init_array_entry>:
   10cac:	5.......Q...

Disassembly of section .fini:

00010cb8 <_fini>:
   10cb8:	push	{r3, r4, r5, r6, r7, lr}
   10cba:	nop
