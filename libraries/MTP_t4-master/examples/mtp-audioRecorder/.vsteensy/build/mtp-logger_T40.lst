
.vsteensy/build/mtp-logger_T40.elf:     file format elf32-littlearm

SYMBOL TABLE:
60000000 l    d  .text.headers	00000000 .text.headers
60001400 l    d  .text.code	00000000 .text.code
60001bb8 l    d  .text.progmem	00000000 .text.progmem
00000000 l    d  .text.itcm	00000000 .text.itcm
00014320 l    d  .fini	00000000 .fini
00014324 l    d  .ARM.exidx	00000000 .ARM.exidx
20000000 l    d  .data	00000000 .data
20001618 l    d  .bss	00000000 .bss
20200000 l    d  .bss.dma	00000000 .bss.dma
60017718 l    d  .text.csf	00000000 .text.csf
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 bootdata.c
00000000 l    df *ABS*	00000000 startup.c
0000f0b4 l       .text.itcm	00000000 _MSP
00000000 l    df *ABS*	00000000 WireIMXRT.cpp
00000000 l    df *ABS*	00000000 usb.c
0000e64c l     F .text.itcm	00000070 schedule_transfer
0000e6bc l     F .text.itcm	00000036 run_callbacks
0000e6f4 l     F .text.itcm	000000a0 endpoint0_transmit.constprop.1
0000e794 l     F .text.itcm	00000670 isr
20044764 l     O .bss	00000004 endpointN_notify_mask
20044768 l     O .bss	00000001 sof_usage
20044774 l     O .bss	00000004 endpoint0_notify_mask
20044778 l     O .bss	00000001 usb_reboot_timer
20044780 l     O .bss	00000008 endpoint0_setupdata
20044788 l     O .bss	00000008 reply_buffer
20044790 l     O .bss	00000008 endpoint0_buffer
00000000 l    df *ABS*	00000000 tempmon.c
200447a8 l     O .bss	00000004 s_hotTemp
200447ac l     O .bss	00000004 s_hot_ROOM
200447b0 l     O .bss	00000004 s_roomC_hotC
200447b4 l     O .bss	00000004 s_hotCount
00000000 l    df *ABS*	00000000 analog.c
20044915 l     O .bss	00000001 calibrating
00000000 l    df *ABS*	00000000 c:/users/zimme/documents/arduino-1.8.15/hardware/tools/arm/bin/../lib/gcc/arm-none-eabi/5.4.1/armv7e-m/fpu/fpv5-d16/crti.o
00000000 l    df *ABS*	00000000 c:/users/zimme/documents/arduino-1.8.15/hardware/tools/arm/bin/../lib/gcc/arm-none-eabi/5.4.1/armv7e-m/fpu/fpv5-d16/crtn.o
00000000 l    df *ABS*	00000000 crtstuff.c
00000020 l     F .text.itcm	00000000 __do_global_dtors_aux
20001618 l       .bss	00000000 completed.8605
00000044 l     F .text.itcm	00000000 frame_dummy
2000161c l       .bss	00000000 object.8610
60001b48 l     O .text.code	00000000 __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000 mtp-audioRecorder.ino
000001e4 l     F .text.itcm	00000002 __tcf_0
00000498 l     F .text.itcm	00000074 logg(unsigned long, char const*) [clone .part.54]
00001538 l     F .text.itcm	00000220 acq_init(long) [clone .part.59]
00001758 l     F .text.itcm	0000015c _GLOBAL__sub_I_audioShield
20002848 l     O .bss	00000400 acq_rx_buffer
20002d4c l     O .bss	00000002 front_
20002d50 l     O .bss	00000800 tdm_rx_buffer
20000b48 l     O .data	00000014 mfile
20043e62 l     O .bss	00000002 rear_
20043e78 l     O .bss	00000004 check_filing(short)::to
20043e7c l     O .bss	00000004 logg(unsigned long, char const*)::to
00000000 l    df *ABS*	00000000 output_i2s_oct.cpp
000082d0 l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN17AudioOutputI2SOct13block_ch1_1stE
00000000 l    df *ABS*	00000000 input_i2s.cpp
000082e8 l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN13AudioInputI2S10block_leftE
00000000 l    df *ABS*	00000000 output_pt8211_2.cpp
00008300 l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN19AudioOutputPT8211_214block_left_1stE
00000000 l    df *ABS*	00000000 output_pt8211.cpp
00008318 l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN17AudioOutputPT821114block_left_1stE
00000000 l    df *ABS*	00000000 input_spdif3.cpp
00008330 l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN16AudioInputSPDIF310block_leftE
00000000 l    df *ABS*	00000000 input_tdm2.cpp
00008348 l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN14AudioInputTDM214block_incomingE
00000000 l    df *ABS*	00000000 input_adc.cpp
00008360 l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN16AudioInputAnalog3dmaE
00000000 l    df *ABS*	00000000 input_pdm_i2s2.cpp
00008780 l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN14AudioInputPDM210block_leftE
00000000 l    df *ABS*	00000000 input_i2s2.cpp
00008798 l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN14AudioInputI2S210block_leftE
00000000 l    df *ABS*	00000000 input_i2s_quad.cpp
000087b0 l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN17AudioInputI2SQuad9block_ch1E
00000000 l    df *ABS*	00000000 output_i2s_quad.cpp
000087c8 l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN18AudioOutputI2SQuad13block_ch1_1stE
00000000 l    df *ABS*	00000000 output_tdm2.cpp
000087e0 l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN15AudioOutputTDM211block_inputE
00000000 l    df *ABS*	00000000 output_i2s2.cpp
000087f8 l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN15AudioOutputI2S214block_left_1stE
00000000 l    df *ABS*	00000000 output_i2s_hex.cpp
00008810 l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN17AudioOutputI2SHex13block_ch1_1stE
00000000 l    df *ABS*	00000000 input_i2s_oct.cpp
00008828 l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN16AudioInputI2SOct9block_ch1E
00000000 l    df *ABS*	00000000 output_tdm.cpp
00008840 l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN14AudioOutputTDM11block_inputE
00000000 l    df *ABS*	00000000 input_tdm.cpp
00008858 l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN13AudioInputTDM14block_incomingE
00000000 l    df *ABS*	00000000 input_i2s_hex.cpp
00008870 l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN16AudioInputI2SHex9block_ch1E
00000000 l    df *ABS*	00000000 output_spdif3.cpp
00008888 l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN17AudioOutputSPDIF314block_left_1stE
00000000 l    df *ABS*	00000000 output_mqs.cpp
000088a0 l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN14AudioOutputMQS14block_left_1stE
00000000 l    df *ABS*	00000000 async_input_spdif3.cpp
000088b8 l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN21AsyncAudioInputSPDIF310microsLastE
00000000 l    df *ABS*	00000000 input_pdm.cpp
000088d0 l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN13AudioInputPDM10block_leftE
00000000 l    df *ABS*	00000000 output_i2s.cpp
000088e8 l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN14AudioOutputI2S14block_left_1stE
00000000 l    df *ABS*	00000000 output_spdif2.cpp
00008900 l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN17AudioOutputSPDIF214block_left_1stE
00000000 l    df *ABS*	00000000 output_spdif.cpp
00008918 l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN16AudioOutputSPDIF14block_left_1stE
00000000 l    df *ABS*	00000000 SD.cpp
0000daa8 l     F .text.itcm	0000006c _GLOBAL__sub_I_SD
00000000 l    df *ABS*	00000000 usb_desc.c
60001dc8 l     O .text.progmem	0000000a qualifier_descriptor
20000c34 l     O .data	00000012 device_descriptor
00000000 l    df *ABS*	00000000 serialEvent.cpp
00000000 l    df *ABS*	00000000 Storage.cpp
00001c94 l     F .text.itcm	000000a0 File::invalidate() [clone .isra.1]
00002214 l     F .text.itcm	00000084 MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.6] [clone .constprop.14]
000036a8 l     F .text.itcm	00000036 MTPStorage_SD::ScanAll(unsigned long) [clone .part.7] [clone .constprop.12]
000036e0 l     F .text.itcm	00000030 MTPStorage_SD::StartGetObjectHandles(unsigned long, unsigned long) [clone .part.8] [clone .constprop.13]
00003f0c l     F .text.itcm	000000b2 MTPStorage_SD::DeleteObject(unsigned long) [clone .part.9] [clone .constprop.11]
00004ab8 l     F .text.itcm	00000a4c mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]
00000000 l    df *ABS*	00000000 MTP.cpp
00005718 l     F .text.itcm	00000010 txEvent_event
00005728 l     F .text.itcm	00000010 rxEvent_event
00005738 l     F .text.itcm	0000004c usb_mtp_wait
00005784 l     F .text.itcm	00000080 MTPD::write(char const*, int) [clone .part.2]
000058d0 l     F .text.itcm	000000c8 MTPD::GetDevicePropDesc(unsigned long) [clone .part.4]
00006ebc l     F .text.itcm	00000038 MTPD::setObjectPropValue(unsigned long, unsigned long) [clone .part.6]
2000039c l     O .data	00000028 supported_op
20043e80 l     O .bss	00000004 mtp_rxEventcount
200003c4 l     O .data	00000010 propertyList
20043ea0 l     O .bss	00000020 rx_event_buffer
20043ec0 l     O .bss	00000004 mtp_txEventcount
20043ee0 l     O .bss	00000020 tx_event_transfer
20043f00 l     O .bss	00000004 MTPD::write(char const*, int)::dst
20043f20 l     O .bss	00000020 rx_event_transfer
20043f40 l     O .bss	00000004 MTPD::read(char*, unsigned long)::index
20043f60 l     O .bss	00000020 tx_event_buffer
2000041c l     O .data	00000008 supported_events
00000000 l    df *ABS*	00000000 SPI.cpp
00007b4c l     F .text.itcm	00000058 SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]
00000000 l    df *ABS*	00000000 Time.cpp
0000814c l     F .text.itcm	00000018 refreshCache(long) [clone .part.0]
20043f80 l     O .bss	00000004 cacheTime
20043f84 l     O .bss	00000007 tm
20043f8c l     O .bss	00000004 sysTime
20043f90 l     O .bss	00000001 Status
20043f98 l     O .bss	00000004 prevMillis
20000bb0 l     O .data	00000004 syncInterval
20000484 l     O .data	0000000c monthDays
20043f9c l     O .bss	00000004 nextSyncTime
00000000 l    df *ABS*	00000000 control_sgtl5000.cpp
00000000 l    df *ABS*	00000000 FsCache.cpp
00008d38 l     F .text.itcm	00000046 FsCache::sync() [clone .part.0]
00000000 l    df *ABS*	00000000 ExFatFile.cpp
00000000 l    df *ABS*	00000000 ExFatPartition.cpp
000097f0 l     F .text.itcm	00000034 ExFatPartition::fatGet(unsigned long, unsigned long*) [clone .part.3]
00009824 l     F .text.itcm	0000002a ExFatPartition::fatPut(unsigned long, unsigned long) [clone .part.4]
00000000 l    df *ABS*	00000000 upcase.cpp
00000000 l    df *ABS*	00000000 ExFatFileWrite.cpp
00000000 l    df *ABS*	00000000 FatFile.cpp
0000a6d0 l     F .text.itcm	00000032 FatFile::openRoot(FatVolume*) [clone .part.38]
0000a7f0 l     F .text.itcm	00000094 FatFile::sync() [clone .part.42]
00000000 l    df *ABS*	00000000 FatPartition.cpp
00000000 l    df *ABS*	00000000 FatFileLFN.cpp
0000b810 l     F .text.itcm	0000002a lfnGetChar(DirLfn_t*, unsigned char)
00000000 l    df *ABS*	00000000 FatFileSFN.cpp
00000000 l    df *ABS*	00000000 FsFile.cpp
00000000 l    df *ABS*	00000000 FsVolume.cpp
00000000 l    df *ABS*	00000000 FsNew.cpp
00000000 l    df *ABS*	00000000 SdSpiCard.cpp
0000c4c8 l     F .text.itcm	00000018 SdSpiCard::spiStart() [clone .part.5] [clone .constprop.25]
0000c4e0 l     F .text.itcm	00000022 SdSpiCard::spiStop() [clone .part.6] [clone .constprop.27]
00000000 l    df *ABS*	00000000 SdioTeensy.cpp
0000cd80 l     F .text.itcm	00000018 isBusyCommandComplete()
0000cd98 l     F .text.itcm	00000010 isBusyCommandInhibit()
0000cda8 l     F .text.itcm	00000014 isBusyDat()
0000cdbc l     F .text.itcm	0000000c isBusyDMA()
0000cdc8 l     F .text.itcm	00000014 isBusyFifoRead()
0000cddc l     F .text.itcm	00000014 isBusyFifoWrite()
0000cdf0 l     F .text.itcm	00000018 isBusyTransferComplete()
0000ce6c l     F .text.itcm	00000028 waitTimeout(bool (*)())
0000ce94 l     F .text.itcm	0000004c yieldTimeout(bool (*)())
0000cf10 l     F .text.itcm	00000068 cardCommand(unsigned long, unsigned long)
0000cf78 l     F .text.itcm	0000002c isBusyCMD13()
0000cfc4 l     F .text.itcm	00000020 waitDmaStatus() [clone .part.5]
0000cfe4 l     F .text.itcm	000000b8 rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)
0000d248 l     F .text.itcm	00000058 waitTransferComplete() [clone .part.10]
20044078 l     O .bss	00000001 m_version2
2004407c l     O .bss	00000010 m_cid
2004408c l     O .bss	00000004 m_busyFcn
20044090 l     O .bss	00000001 m_highCapacity
20044094 l     O .bss	00000004 m_ocr
20044098 l     O .bss	00000004 m_rca
2004409c l     O .bss	00000001 m_transferActive
200440a0 l     O .bss	00000004 m_irqstat
20000c24 l     O .data	00000001 m_errorCode
200440a4 l     O .bss	00000001 m_initDone
200440a8 l     O .bss	00000010 m_csd
200440b8 l     O .bss	00000001 m_dmaBusy
200440bc l     O .bss	00000004 m_errorLine
00000000 l    df *ABS*	00000000 SdSpiTeensy3.cpp
00000000 l    df *ABS*	00000000 SdSpiChipSelect.cpp
00000000 l    df *ABS*	00000000 memcpy-armv7m.o
00000000 l    df *ABS*	00000000 usb_serial.c
0000dc48 l     F .text.itcm	0000006c rx_queue_transfer
0000dcb4 l     F .text.itcm	000000b4 rx_event
0000dd68 l     F .text.itcm	00000098 usb_serial_flush_callback
0000de00 l     F .text.itcm	0000017c usb_serial_write.part.1
2004457c l     O .bss	00000010 rx_index
2004458c l     O .bss	00000002 tx_packet_size
2004458e l     O .bss	00000001 tx_noautoflush
2004458f l     O .bss	00000001 tx_head
200445a0 l     O .bss	00000100 rx_transfer
200446a0 l     O .bss	00000001 rx_tail
200446a4 l     O .bss	00000009 rx_list
200446ae l     O .bss	00000002 rx_packet_size
20200000 l     O .bss.dma	00001000 rx_buffer
20201000 l     O .bss.dma	00002000 txbuffer
200446b0 l     O .bss	00000010 rx_count
200446c0 l     O .bss	00000004 rx_available
200446c4 l     O .bss	00000001 rx_head
200446c5 l     O .bss	00000001 transmit_previous_timeout
200446c6 l     O .bss	00000002 tx_available
200446e0 l     O .bss	00000080 tx_transfer
00000000 l    df *ABS*	00000000 clockspeed.c
00000000 l    df *ABS*	00000000 delay.c
00000000 l    df *ABS*	00000000 rtc.c
00000000 l    df *ABS*	00000000 nonstd.c
00000000 l    df *ABS*	00000000 digital.c
0000f578 l     F .text.itcm	0000004c digitalWrite.part.0
00000000 l    df *ABS*	00000000 pwm.c
00000000 l    df *ABS*	00000000 usb_mtp.c
0000f908 l     F .text.itcm	00000034 rx_event
0000f93c l     F .text.itcm	00000068 rx_queue_transfer
200447b8 l     O .bss	00000002 tx_packet_size
200447ba l     O .bss	00000001 tx_head
200447c0 l     O .bss	00000080 rx_transfer
20044840 l     O .bss	00000001 rx_tail
20044844 l     O .bss	00000005 rx_list
2004484a l     O .bss	00000002 rx_packet_size
20203000 l     O .bss.dma	00000800 rx_buffer
20203800 l     O .bss.dma	00000800 txbuffer
2004484c l     O .bss	00000001 rx_head
20044860 l     O .bss	00000080 tx_transfer
00000000 l    df *ABS*	00000000 yield.cpp
200448e0 l     O .bss	00000001 yield::running
00000000 l    df *ABS*	00000000 EventResponder.cpp
00000000 l    df *ABS*	00000000 DMAChannel.cpp
00000000 l    df *ABS*	00000000 usb_inst.cpp
00000000 l    df *ABS*	00000000 Print.cpp
00000000 l    df *ABS*	00000000 main.cpp
00000000 l    df *ABS*	00000000 new.cpp
00000000 l    df *ABS*	00000000 atexit_arm.cc
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 cxa_atexit.c
00000000 l    df *ABS*	00000000 efgcvt.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 mbtowc_r.c
00000000 l    df *ABS*	00000000 lib_a-memchr.o
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 strcpy.c
00000000 l    df *ABS*	00000000 strlcat.c
00000000 l    df *ABS*	00000000 strlcpy.c
00000000 l    df *ABS*	00000000 lib_a-strlen.o
00000000 l    df *ABS*	00000000 strncmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
200008c8 l     O .data	00000010 zeroes.7258
20000918 l     O .data	00000010 blanks.7257
00000000 l    df *ABS*	00000000 vdprintf.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 dtoa.c
00012a80 l     F .text.itcm	00000128 quorem
00000000 l    df *ABS*	00000000 ecvtbuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 localeconv.c
00000000 l    df *ABS*	00000000 mprec.c
20000b30 l     O .data	0000000c p05.6087
00000000 l    df *ABS*	00000000 vfprintf.c
00000000 l    df *ABS*	00000000 vasnprintf.c
00000000 l    df *ABS*	00000000 impure.c
20000c70 l     O .data	00000428 impure_data
00000000 l    df *ABS*	00000000 locale.c
00000000 l    df *ABS*	00000000 ctype_.c
00000000 l    df *ABS*	00000000 FsDateTime.cpp
00000000 l    df *ABS*	00000000 ExFatVolume.cpp
00000000 l    df *ABS*	00000000 FatVolume.cpp
00000000 l    df *ABS*	00000000 HardwareSerial.cpp
00000000 l    df *ABS*	00000000 reent.c
00000000 l    df *ABS*	00000000 
00000000 l       *UND*	00000000 __fini_array_end
00000000 l       *UND*	00000000 __bss_start__
00000000 l       *UND*	00000000 __bss_end__
00000000 l       *UND*	00000000 software_init_hook
00000000 l       *UND*	00000000 __fini_array_start
00000000 l       *UND*	00000000 hardware_init_hook
00000000 l       *UND*	00000000 __libc_fini
00000000 l       *UND*	00000000 __stack
00014308 l     F .text.itcm	00000008 ___init_veneer
00014310 l     F .text.itcm	00000008 ___ZN7TwoWire5beginEv_veneer
60001b00 l     F .text.code	00000008 __memset_veneer
60001b08 l     F .text.code	00000008 __startup_late_hook_veneer
60001b10 l     F .text.code	00000008 __main_veneer
60001b18 l     F .text.code	00000008 __pwm_init_veneer
60001b20 l     F .text.code	00000008 __startup_early_hook_veneer
60001b28 l     F .text.code	00000008 __delay_veneer
60001b30 l     F .text.code	00000008 ____libc_init_array_veneer
60001b38 l     F .text.code	00000008 __usb_init_serialnumber_veneer
60001b40 l     F .text.code	00000008 __set_arm_clock_veneer
000014e4 g     F .text.itcm	00000054 set_audioClock(int, long, unsigned long)
000020c8 g     F .text.itcm	0000014c MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)
00000e04 g     F .text.itcm	00000068 pushData(unsigned long*)
0000e1b8 g     F .text.itcm	0000000c usb_serial_available
20044040 g     O .bss	00000008 AsyncAudioInputSPDIF3::dma
000110f0 g     F .text.itcm	000000ba strcpy
0000f0c0 g     F .text.itcm	00000002 startup_default_late_hook
0000d55c g     F .text.itcm	00000088 SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)
0000fc48  w    F .text.itcm	000000f0 yield
20043e74 g     O .bss	00000004 acq_miss
2004476c g     O .bss	00000004 usb_timer1_callback
0000b298 g     F .text.itcm	0000020c FatFile::write(void const*, unsigned int)
0000c4b4  w    F .text.itcm	00000002 SdSpiCard::~SdSpiCard()
0000ff98 g     F .text.itcm	000000bc Print::printNumber64(unsigned long long, unsigned char, unsigned char)
000092bc g     F .text.itcm	000003e0 ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)
20002c48 g     O .bss	00000104 storage
60001cd4 g     O .text.progmem	00000018 usb_string_manufacturer_name_default
0000b220 g     F .text.itcm	00000076 FatFile::truncate()
00000e6c g     F .text.itcm	00000098 acq_isr()
00008460 g     F .text.itcm	00000070 AudioControlSGTL5000::micGain(unsigned int)
00002508 g     F .text.itcm	0000003c MTPStorage_SD::GetObjectInfo(unsigned long, char*, unsigned long*, unsigned long*, unsigned short*)
20001638 g     O .bss	00000008 dma
00001378 g     F .text.itcm	000000a4 do_logger(unsigned short, short)
20044068 g     O .bss	00000004 FsDateTime::callback
0000ff48 g     F .text.itcm	00000020 Print::println()
000091b4 g     F .text.itcm	00000108 ExFatFile::seekSet(unsigned long long)
0001382c g     F .text.itcm	000000d0 fcvtbuf
0000c498  w    F .text.itcm	00000004 SdSpiCard::errorCode() const
000000c0  w    F .text.itcm	0000000c File::flush()
00008380 g     F .text.itcm	00000084 AudioControlSGTL5000::read(unsigned int)
00007a78 g     F .text.itcm	00000044 usb_init_events
00010c9c g     F .text.itcm	00000002 __malloc_unlock
00000240  w    F .text.itcm	000000bc SDFile::openNextFile(unsigned char)
20044074 g     O .bss	00000004 FsVolume::m_cwv
0000aad0 g     F .text.itcm	000000c6 FatFile::open(FatFile*, char const*, int)
60001a98 g     F .text.code	00000058 analog_init
00012930 g     F .text.itcm	0000004a _vdprintf_r
00007f48 g     F .text.itcm	00000054 SPIClass::setSCK(unsigned char)
20000c2c g     O .data	00000004 F_CPU_ACTUAL
200000cc  w    O .data	00000060 vtable for SDFile
00010b34 g     F .text.itcm	000000c6 memmove
00003710 g     F .text.itcm	00000046 MTPStorage_SD::StartGetObjectHandles(unsigned long, unsigned long)
0000d7d8 g     F .text.itcm	00000068 SdioCard::stopTransmission(bool)
00013b84 g     F .text.itcm	0000004c _Balloc
00007af8 g     F .text.itcm	00000030 MTPD::send_Event(unsigned short)
00001a54  w    F .text.itcm	00000004 MTPStorage_SD::get_FSCount()
0001432c g       .ARM.exidx	00000000 __exidx_end
0000b600 g     F .text.itcm	0000003a FatPartition::freeChain(unsigned long)
200448f4 g     O .bss	00000001 EventResponder::runningFromYield
0000d9fc g     F .text.itcm	00000016 SdSpiArduinoDriver::receive()
0000c674 g     F .text.itcm	0000009c SdSpiCard::cardCommand(unsigned char, unsigned long)
20043e60 g     O .bss	00000002 maxCount
0000ff1c g     F .text.itcm	0000002c Print::write(unsigned char const*, unsigned int)
0000b83c g     F .text.itcm	00000024 FatFile::lfnChecksum(unsigned char*)
0001040c g     F .text.itcm	0000000c __errno
000008a8  w    F .text.itcm	00000026 SDFile::isDirectory()
60001000 g     O .text.headers	00000020 ImageVectorTable
000010f4 g     F .text.itcm	00000088 makeFilename(char*)
00000ac0  w    F .text.itcm	00000028 File::~File()
200448e4 g     O .bss	00000004 EventResponder::firstInterrupt
0000ef4c g     F .text.itcm	00000028 usb_transfer_status
00005e90 g     F .text.itcm	0000008a MTPD::GetObjectHandles(unsigned long, unsigned long)
0000c4b8  w    F .text.itcm	0000000e SdSpiCard::~SdSpiCard()
0000c214 g     F .text.itcm	00000084 FsBaseFile::FsBaseFile(FsBaseFile const&)
00009c74 g     F .text.itcm	00000018 ExFatPartition::rootLength()
20044030 g     O .bss	00000008 AudioOutputSPDIF3::dma
0000c49c  w    F .text.itcm	00000004 SdSpiCard::errorData() const
0000ff0c  w    F .text.itcm	00000008 usb_serial_class::write(unsigned char const*, unsigned int)
20000590 g     O .data	00000280 digital_pin_to_info_PGM
200466c0 g     O .bss	00000004 errno
0000c8e8 g     F .text.itcm	0000004c SdSpiCard::readOCR(unsigned long*)
0000da14 g     F .text.itcm	00000020 SdSpiArduinoDriver::receive(unsigned char*, unsigned int)
0000bdf0 g     F .text.itcm	0000039c FatFile::open(FatFile*, fname_t*, int)
00009a78 g     F .text.itcm	00000012 ExFatPartition::fatGet(unsigned long, unsigned long*)
60001c04 g     O .text.progmem	0000004c TwoWire::i2c3_hardware
00014328 g       .text.itcm	00000000 _etext
00007ba4 g     F .text.itcm	000000d4 _spi_dma_rxISR0()
20001618 g       .bss	00000000 _sbss
0000da98 g     F .text.itcm	00000006 sdCsInit(unsigned char)
0000ce14 g     F .text.itcm	0000000c SdioCard::errorData() const
00001a68 g     F .text.itcm	0000000c MTPStorage_SD::totalSize(unsigned long)
0000487c g     F .text.itcm	000000fe MTPStorage_SD::copy(unsigned long, unsigned long, unsigned long)
0000d49c g     F .text.itcm	000000c0 SdioCard::writeSector(unsigned long, unsigned char const*)
60001dd4 g       *ABS*	00000000 _stextload
0000141c g     F .text.itcm	000000c8 loop
0000ee04 g     F .text.itcm	00000064 usb_config_rx
00005cf8 g     F .text.itcm	00000170 MTPD::GetStorageInfo(unsigned long)
00008ed8 g     F .text.itcm	000000fc ExFatFile::parsePathName(char const*, ExName_t*, char const**)
0000d5e4 g     F .text.itcm	000000bc SdioCard::readData(unsigned char*)
00008378  w    F .text.itcm	00000004 AudioControlSGTL5000::disable()
0000c5d0 g     F .text.itcm	00000074 SdSpiCard::readData(unsigned char*, unsigned int)
00008b38 g     F .text.itcm	000000e0 TwoWire::endTransmission(unsigned char)
200448e8 g     O .bss	00000004 EventResponder::lastInterrupt
0000c298 g     F .text.itcm	00000028 FsBaseFile::close()
0000db14 g     F .text.itcm	00000134 memcpy
000000a4  w    F .text.itcm	0000000c File::available()
00003758 g     F .text.itcm	000007b4 MTPStorage_SD::removeFile(unsigned long, char*)
00002e84 g     F .text.itcm	00000822 MTPStorage_SD::ScanDir(unsigned long, unsigned long)
000010b4 g     F .text.itcm	00000040 file_writeHeader()
00009ab0 g     F .text.itcm	00000068 ExFatPartition::freeChain(unsigned long)
0000280c g     F .text.itcm	0000046c MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)
0000ad50 g     F .text.itcm	00000028 FatFile::peek()
000113c0 g     F .text.itcm	00001570 _svfprintf_r
00000210  w    F .text.itcm	00000014 SDFile::whoami()
20001634  w    O .bss	00000001 SDFile::name()::zeroterm
200447a4 g     O .bss	00000004 systick_millis_count
0000a2cc g     F .text.itcm	000000ae ExFatFile::rename(ExFatFile*, char const*)
0000fbc0 g     F .text.itcm	00000030 usb_mtp_available
000005bc  w    F .text.itcm	00000044 SDFile::truncate(unsigned long long)
00008afc g     F .text.itcm	0000003c TwoWire::wait_idle()
00007194 g     F .text.itcm	000008e4 MTPD::loop()
0001007c g     F .text.itcm	00000000 .hidden __aeabi_uldivmod
20044798 g     O .bss	00000001 usb_configuration
00000084  w    F .text.itcm	00000006 SdCardInterface::status()
60000000 g     O .text.headers	00000200 FlexSPI_NOR_Config
0000d840 g     F .text.itcm	0000002c SdioCard::syncDevice()
0000d318 g     F .text.itcm	00000090 SdioCard::writeData(unsigned char const*)
00001080 g     F .text.itcm	00000034 makeHeader(char*)
000009dc  w    F .text.itcm	0000005a StreamFile<FsBaseFile, unsigned long long>::available()
0000ad78 g     F .text.itcm	00000042 FatFile::readDirCache(bool)
20043e64 g     O .bss	00000004 loop_count
60001cd4  w    O .text.progmem	00000018 usb_string_manufacturer_name
60001c9c g     O .text.progmem	00000008 usb_string_mtp
00010468 g     F .text.itcm	00000010 malloc
60001c50 g     O .text.progmem	0000004c TwoWire::i2c1_hardware
00000f64 g     F .text.itcm	00000078 do_menu(short)
20000048  w    O .data	00000024 vtable for FsFile
0000893c  w    F .text.itcm	0000001e TwoWire::read()
00007b30  w    F .text.itcm	0000001c EventResponder::triggerEvent(int, void*)
00007160 g     F .text.itcm	00000034 MTPD::setObjectPropValue(unsigned long, unsigned long)
20000a40 g     O .data	000000c8 __mprec_tens
60001748 g     F .text.code	000000ec usb_init
20043ec4 g     O .bss	00000004 sessionID_
0000c4b0  w    F .text.itcm	00000004 SdSpiCard::type() const
00000a38  w    F .text.itcm	00000088 SDFile::seek(unsigned long long, int)
20044920 g     O .bss	00000004 __malloc_top_pad
20046300 g     O .bss	00000004 systick_safe_read
0000c504 g     F .text.itcm	0000007c SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)
000089e4 g     F .text.itcm	00000118 TwoWire::force_clock()
aaaaaabf g       *ABS*	00000000 _flexram_bank_config
0000a37c g     F .text.itcm	000000e4 ExFatFile::truncate()
20000b3c g     O .data	00000000 .hidden __dso_handle
00013b68 g     F .text.itcm	0000001c _localeconv_r
20000b44 g     O .data	00000004 sd_str
0000d9a4 g     F .text.itcm	00000058 SdSpiArduinoDriver::deactivate()
00013d00 g     F .text.itcm	00000012 __i2b
20000000 g       .data	00000000 _sdata
0000f9a4 g     F .text.itcm	000000a0 usb_mtp_configure
20000b40 g     O .data	00000004 t_on
60001d5c g     O .text.progmem	00000069 usb_config_descriptor_480
0000011c  w    F .text.itcm	0000000c File::operator bool()
000100ac g     F .text.itcm	000002e2 .hidden __udivmoddi4
000069c4 g     F .text.itcm	000001d8 MTPD::getObjectPropValue(unsigned long, unsigned long)
0000a704 g     F .text.itcm	00000034 FatFile::addCluster()
00011080 g     F .text.itcm	00000024 _sbrk_r
0000c934 g     F .text.itcm	0000003e SdSpiCard::readRegister(unsigned char, void*)
0000cef0 g     F .text.itcm	00000020 SdioCard::type() const
00000098  w    F .text.itcm	0000000c File::write(void const*, unsigned int)
0000f0bc g     F .text.itcm	00000002 startup_default_early_hook
60001400 g     F .text.code	00000274 ResetHandler
0000e238 g     F .text.itcm	00000020 usb_serial_getchar
00000570  w    F .text.itcm	0000004c SDFile::name()
2004494c g     O .bss	00000008 usb_cdc_line_coding
0000f5c4 g     F .text.itcm	0000000a digitalWrite
200448ec g     O .bss	00000004 EventResponder::lastYield
00008eb0 g     F .text.itcm	00000028 ExFatFile::openRoot(ExFatVolume*)
00000418  w    F .text.itcm	00000038 StreamFile<FsBaseFile, unsigned long long>::read()
2004491c g     O .bss	00000004 __malloc_max_sbrked_mem
0000080c  w    F .text.itcm	0000001a SDFile::position()
0000f5d0 g     F .text.itcm	00000080 pinMode
0000cc34 g     F .text.itcm	00000042 SdSpiCard::writeStop()
00002c78 g     F .text.itcm	00000160 MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)
20043fc8 g     O .bss	00000008 AudioInputTDM2::dma
000061c0 g     F .text.itcm	00000090 MTPD::getObjectPropsSupported(unsigned long)
60017800 g     O .text.csf	00000c00 hab_csf
00005804 g     F .text.itcm	000000cc MTPD::writestring(char const*)
0000cccc g     F .text.itcm	00000032 SdSpiCard::writeData(unsigned char const*)
000000b0  w    F .text.itcm	00000010 File::peek()
0000b63c g     F .text.itcm	000000ae FatPartition::freeClusterCount()
20280000 g       .text.csf	00000000 _heap_end
000008d0  w    F .text.itcm	000000d0 SDClass::open(char const*, unsigned char)
00014324 g       .ARM.exidx	00000000 __exidx_start
00000398  w    F .text.itcm	0000000c DMAChannel::~DMAChannel()
0000cb30 g     F .text.itcm	00000050 SdSpiCard::writeStart(unsigned long)
200448f0 g     O .bss	00000004 EventResponder::firstYield
200008b4 g     O .data	00000004 _global_impure_ptr
00001a80 g     F .text.itcm	00000080 MTPStorage_SD::write(char const*, unsigned long)
00000464  w    F .text.itcm	00000034 StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)
00010ca0 g     F .text.itcm	000003de _realloc_r
00000844  w    F .text.itcm	00000018 SDFile::read(void*, unsigned int)
00010418 g     F .text.itcm	00000050 __libc_init_array
0000f204 g     F .text.itcm	00000350 dtostrf
0000069c  w    F .text.itcm	00000044 SDFile::rewindDirectory()
00008930  w    F .text.itcm	0000000c TwoWire::available()
000097a0 g     F .text.itcm	0000000e ExFatFile::open(ExFatVolume*, char const*, int)
0000ce20 g     F .text.itcm	0000001c SdioCard::readCID(CID*)
0000a0b0 g     F .text.itcm	000000e4 ExFatFile::addDirCluster()
00004a84 g     F .text.itcm	00000034 mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*)
0000cc78 g     F .text.itcm	00000052 SdSpiCard::writeData(unsigned char, unsigned char const*)
20000b08 g     O .data	00000028 __mprec_bigtens
0000f0c4  w    F .text.itcm	0000008c HardFault_HandlerC
00008c18 g     F .text.itcm	00000120 TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)
0000fef4  w    F .text.itcm	00000004 usb_serial_class::clear()
0000f150 g     F .text.itcm	00000030 _sbrk
60016100 g       *ABS*	00000000 _sdataload
00013f94 g     F .text.itcm	00000042 __mcmp
00003fd4 g     F .text.itcm	000008a8 mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)
2000012c  w    O .data	00000028 vtable for SDClass
20044018 g     O .bss	00000008 AudioOutputTDM::dma
000001d0  w    F .text.itcm	00000012 SDFile::operator bool()
20000c30 g     O .data	00000004 __brkval
200446c8 g     O .bss	00000001 usb_cdc_line_rtsdtr
60001af0 g     F .text.code	00000000 _init
0000df7c g     F .text.itcm	00000002 usb_serial_reset
0000a7d0 g     F .text.itcm	0000001e FatFile::cacheDirEntry(unsigned char)
20002d4e g     O .bss	00000002 state
0000050c  w    F .text.itcm	00000062 SDClass::remove(char const*)
00000224  w    F .text.itcm	0000001c SDFile::close()
00000bf4  w    F .text.itcm	0000005c SDFile::~SDFile()
00008250 g     F .text.itcm	00000020 day()
60001cf0 g     O .text.progmem	00000069 usb_config_descriptor_12
200004ac g     O .data	00000024 vtable for TwoWire
0000d970 g     F .text.itcm	00000034 SdSpiArduinoDriver::begin(SdSpiConfig)
20046700 g       .bss	00000000 _ebss
0000d414 g     F .text.itcm	00000088 SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)
00005998 g     F .text.itcm	000002dc MTPD::WriteDescriptor()
20000b5c g     O .data	00000004 propertyListNum
000009a0  w    F .text.itcm	00000014 StreamFile<FsBaseFile, unsigned long long>::flush()
00013c64 g     F .text.itcm	00000040 __hi0bits
0000a194 g     F .text.itcm	0000005a ExFatFile::mkdir(ExFatFile*, ExName_t*)
20204080 g       .bss.dma	00000000 _heap_start
00005c74 g     F .text.itcm	00000084 MTPD::WriteStorageIDs()
0000daa4  w    F .text.itcm	00000002 SDClass::~SDClass()
00005504 g     F .text.itcm	00000214 MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)
60001bb8 g     O .text.progmem	0000004c TwoWire::i2c4_hardware
00000398  w    F .text.itcm	0000000c DMAChannel::~DMAChannel()
20001844 g     O .bss	00001000 diskBuffer
20003550 g     O .bss	000004bc sdx
00000ac0  w    F .text.itcm	00000028 File::~File()
00000c50 g     F .text.itcm	000001b4 storage_configure()
00000003 g       *ABS*	00000000 _itcm_block_count
20045000 g     O .bss	00000020 endpoint0_transfer_data
00008290 g     F .text.itcm	00000024 year()
0001006c g     F .text.itcm	00000004 operator delete(void*, unsigned int)
0000f650 g     F .text.itcm	000002b8 pwm_init
60001918 g     F .text.code	00000064 usb_pll_start
00013e44 g     F .text.itcm	000000a0 __pow5mult
0000afa0 g     F .text.itcm	0000005c FatFile::rmdir()
0000b57c g     F .text.itcm	00000082 FatPartition::allocateCluster(unsigned long, unsigned long*)
00000650  w    F .text.itcm	0000004c SDClass::exists(char const*)
00000000  w      *UND*	00000000 __deregister_frame_info
20045020 g     O .bss	00000020 endpoint0_transfer_ack
20044954 g     O .bss	00000004 usb_cdc_line_rtsdtr_millis
0000ef00 g     F .text.itcm	00000028 usb_transmit
0000fe00 g     F .text.itcm	00000020 systick_isr
0000013c  w    F .text.itcm	0000000c File::isDirectory()
0000c18c g     F .text.itcm	00000088 FatFile::getSFN(char*)
0000ca6c g     F .text.itcm	0000006a SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)
20000c60 g     O .data	00000010 Serial
000000d8  w    F .text.itcm	00000016 File::seek(unsigned long long, int)
20000490 g     O .data	0000001c vtable for AudioControlSGTL5000
0000ff14  w    F .text.itcm	00000006 usb_serial_class::write(unsigned char)
0000c340 g     F .text.itcm	0000005e FsBaseFile::openNext(FsBaseFile*, int)
0000f0bc  w    F .text.itcm	00000002 startup_early_hook
0000cd00 g     F .text.itcm	00000064 SdSpiCard::writeSingle(unsigned long, unsigned char const*)
00009d24 g     F .text.itcm	0000008e ExFatFile::addCluster()
0000837c  w    F .text.itcm	00000004 AudioControlSGTL5000::inputLevel(float)
2000006c  w    O .data	00000060 vtable for File
000007b8  w    F .text.itcm	00000052 SDClass::usedSize()
0000e174 g     F .text.itcm	00000044 usb_serial_peekchar
00010a30 g     F .text.itcm	00000000 memchr
0000b514 g     F .text.itcm	00000066 FatPartition::fatPut(unsigned long, unsigned long)
0000e388 g     F .text.itcm	000002c4 set_arm_clock
2004479c g     O .bss	00000004 systick_cycle_count
20000c48 g     O .data	00000016 usb_string_serial_number_default
00013998 g     F .text.itcm	000001d0 _free_r
0000d2a0 g     F .text.itcm	00000078 SdioCard::readStop()
00008d80 g     F .text.itcm	00000060 FsCache::get(unsigned long, unsigned char)
0000497c g     F .text.itcm	00000108 MTPStorage_SD::CopyFiles(unsigned long, unsigned long, unsigned long)
0000ff04  w    F .text.itcm	00000004 usb_serial_class::flush()
0000b6ec g     F .text.itcm	00000122 FatPartition::init(BlockDeviceInterface*, unsigned char)
0000a8a4 g     F .text.itcm	00000162 FatFile::mkdir(FatFile*, fname_t*)
20001614 g     O .data	00000004 __malloc_sbrk_base
0000fefc  w    F .text.itcm	00000004 usb_serial_class::read()
00000180  w    F .text.itcm	0000000c File::rewindDirectory()
20043fa0 g     O .bss	00000008 AudioOutputI2SOct::dma
0000bc08 g     F .text.itcm	00000128 FatFile::remove()
0000f180  w    F .text.itcm	00000004 __cxa_pure_virtual
00013ee4 g     F .text.itcm	000000ae __lshift
0000aa08 g     F .text.itcm	000000c8 FatFile::mkdir(FatFile*, char const*, bool)
0000eed0 g     F .text.itcm	0000002e usb_prepare_transfer
00009c8c g     F .text.itcm	0000005a exFatCmpName(DirName_t const*, char const*, unsigned int, unsigned int)
0000f0a4 g     F .text.itcm	00000018 unused_interrupt_vector
000141a8 g     F .text.itcm	00000100 __ssprint_r
6000197c g     F .text.code	0000011c tempmon_init
20044760 g     O .bss	00000004 usb_timer0_callback
000142a8 g     F .text.itcm	0000005e _vasnprintf_r
00010064  w    F .text.itcm	00000002 serialEvent()
00008694  w    F .text.itcm	0000005c AudioControlSGTL5000::inputSelect(int)
000129dc g     F .text.itcm	000000a4 __register_exitproc
0000969c g     F .text.itcm	00000104 ExFatFile::open(ExFatFile*, char const*, int)
00011200 g     F .text.itcm	0000002c strlcpy
000082b4 g     F .text.itcm	0000001c setSyncProvider(long (*)())
0001131c g     F .text.itcm	000000a0 strncmp
0000117c g     F .text.itcm	00000104 checkPath(unsigned short, char*)
0000a1f0 g     F .text.itcm	000000dc ExFatFile::mkdir(ExFatFile*, char const*, bool)
0000e1c4 g     F .text.itcm	00000074 usb_serial_flush_input
00009b18 g     F .text.itcm	00000070 ExFatPartition::freeClusterCount()
000026f8 g     F .text.itcm	00000064 MTPStorage_SD::ConstructFilename(int, char*, int)
00013d14 g     F .text.itcm	00000130 __multiply
20002844 g     O .bss	00000004 acq_count
0000e258 g     F .text.itcm	0000002c usb_serial_putchar
00000024 g       *ABS*	00000000 _teensy_model_identifier
20044000 g     O .bss	00000008 AudioOutputI2S2::dma
20044924 g     O .bss	00000028 __malloc_current_mallinfo
20043fe0 g     O .bss	00000008 AudioInputI2S2::dma
00008760  w    F .text.itcm	00000020 AudioControlSGTL5000::volume(float)
20000434 g     O .data	00000050 SPIClass::spiclass_lpspi4_hardware
000140ec g     F .text.itcm	000000ba __d2b
200448f8 g     O .bss	0000001c HardwareSerial::s_serials_with_serial_events
0000cee0  w    F .text.itcm	0000000e SdioCard::~SdioCard()
00001a58  w    F .text.itcm	00000008 MTPStorage_SD::get_FSName(unsigned long)
00008e04 g     F .text.itcm	000000aa ExFatFile::getName(char*, unsigned int)
0000103c g     F .text.itcm	00000044 printTimestamp(unsigned long)
0000d3a8 g     F .text.itcm	0000006c SdioCard::writeStart(unsigned long)
0000faf4 g     F .text.itcm	000000cc usb_mtp_send
000103f4 g     F .text.itcm	0000000c __cxa_atexit
00008fd4 g     F .text.itcm	000001b4 ExFatFile::read(void*, unsigned int)
0000085c  w    F .text.itcm	00000018 SDFile::peek()
00008de0 g     F .text.itcm	0000000e FsCache::sync()
20043fb0 g     O .bss	00000008 AudioOutputPT8211_2::dma
20000b60 g     O .data	00000050 SPI
00010ad0 g     F .text.itcm	00000062 memcmp
20000888  w    O .data	00000028 vtable for usb_serial_class
0000da34 g     F .text.itcm	00000012 SdSpiArduinoDriver::send(unsigned char)
00006bb4 g     F .text.itcm	0000011c MTPD::GetObject(unsigned long)
0000daa0 g     F .text.itcm	00000004 sdCsWrite(unsigned char, bool)
200447a0 g     O .bss	00000004 scale_cpu_cycles_to_microseconds
00010390  w    F .text.itcm	00000002 .hidden __aeabi_ldiv0
00009e8c g     F .text.itcm	0000005a ExFatFile::rmdir()
20044028 g     O .bss	00000008 AudioInputI2SHex::dma
00006250 g     F .text.itcm	00000772 MTPD::getObjectPropDesc(unsigned long, unsigned long)
0000c984 g     F .text.itcm	00000098 SdSpiCard::sectorCount()
00001a64 g     F .text.itcm	00000004 MTPStorage_SD::has_directories(unsigned long)
20001208 g     O .data	00000408 __malloc_av_
00000450  w    F .text.itcm	00000014 SDFile::flush()
0000e2e8 g     F .text.itcm	000000a0 usb_serial_flush_output
20043fa8 g     O .bss	00000008 AudioInputI2S::dma
00010c98 g     F .text.itcm	00000002 __malloc_lock
0000b984 g     F .text.itcm	00000284 FatFile::parsePathName(char const*, fname_t*, char const**)
00007abc g     F .text.itcm	0000003c usb_mtp_sendEvent
20046400 g     O .bss	000002c0 _VectorsRam
0000da48 g     F .text.itcm	0000004e SdSpiArduinoDriver::send(unsigned char const*, unsigned int)
00010394 g     F .text.itcm	0000005e _calloc_r
00007c78 g     F .text.itcm	00000230 SPIClass::begin()
00006e08 g     F .text.itcm	00000070 MTPD::read(char*, unsigned long)
20043f94 g     O .bss	00000004 getTimePtr
00000fdc g     F .text.itcm	00000038 file_writeData(void*, unsigned long)
20000c5e g     O .data	00000001 yield_active_check_flags
0000a050 g     F .text.itcm	0000005e ExFatFile::sync()
20044770 g     O .bss	00000001 usb_high_speed
0000adbc g     F .text.itcm	000001e4 FatFile::rename(FatFile*, char const*)
0000d108 g     F .text.itcm	00000054 SdioCard::isBusy()
0000cad8 g     F .text.itcm	0000003a SdSpiCard::readStop()
20043fe8 g     O .bss	00000008 AudioInputI2SQuad::dma
00010bfc g     F .text.itcm	0000009a memset
000086f0 g     F .text.itcm	0000006e AudioControlSGTL5000::volumeInteger(unsigned int)
00010054 g     F .text.itcm	00000010 main
20044050 g     O .bss	00000008 AudioOutputI2S::dma
20044918 g     O .bss	00000004 __malloc_max_total_mem
00009850 g     F .text.itcm	000000b2 ExFatPartition::bitmapFind(unsigned long, unsigned long)
20204000 g     O .bss.dma	00000069 usb_descriptor_buffer
00008164 g     F .text.itcm	0000008c now()
0000a460 g     F .text.itcm	00000270 ExFatFile::write(void const*, unsigned int)
200002dc g     O .data	00000060 vtable for MTPStorage_SD
00006ef4 g     F .text.itcm	00000158 MTPD::SendObjectInfo(unsigned long, unsigned long)
000111ac g     F .text.itcm	00000052 strlcat
000003a4  w    F .text.itcm	0000005a SDFile::available()
00000110  w    F .text.itcm	0000000c File::close()
00008404 g     F .text.itcm	0000005c AudioControlSGTL5000::write(unsigned int, unsigned int)
0000fbf0 g     F .text.itcm	00000058 usb_init_serialnumber
60001bb8 g       .text.code	00000000 __init_array_end
00012ba8 g     F .text.itcm	00000c84 _dtoa_r
00010488 g     F .text.itcm	00000570 _malloc_r
20044914 g     O .bss	00000001 HardwareSerial::s_count_serials_with_serial_events
00012994 g     F .text.itcm	0000001a __ascii_wctomb
0000c214 g     F .text.itcm	00000084 FsBaseFile::FsBaseFile(FsBaseFile const&)
20044070 g     O .bss	00000004 FatVolume::m_cwv
20044010 g     O .bss	00000008 AudioInputI2SOct::dma
20000424  w    O .data	00000010 SPIClass::beginTransaction(SPISettings)::clk_sel
0000fd38 g     F .text.itcm	00000080 EventResponder::triggerEventNotImmediate()
00007f9c g     F .text.itcm	00000008 SPIClass::transfer(void const*, void*, unsigned int)
60e6ea97 g       *ABS*	00000000 __rtc_localtime
00008688 g     F .text.itcm	0000000c AudioControlSGTL5000::enable()
0000f040 g     F .text.itcm	00000064 micros
00000148  w    F .text.itcm	00000038 File::openNextFile(unsigned char)
00009ee8 g     F .text.itcm	00000168 ExFatFile::syncDir()
000138fc g     F .text.itcm	0000009c _malloc_trim_r
60001cec g     O .text.progmem	00000004 string0
0000e284 g     F .text.itcm	00000018 usb_serial_write
00001a38  w    F .text.itcm	0000001a MTPStorage_SD::addFilesystem(FS&, char const*)
0000f0c0  w    F .text.itcm	00000002 startup_late_hook
0000ff00  w    F .text.itcm	00000004 usb_serial_class::available()
60001dd2 g     O .text.progmem	00000001 _serialEvent_default
00006e78 g     F .text.itcm	00000044 MTPD::readstring(char*)
0000b214 g     F .text.itcm	0000000c FatFile::sync()
00000600  w    F .text.itcm	00000050 SDClass::mkdir(char const*)
20046000 g     O .bss	00000300 endpoint_queue_head
60001ca4  w    O .text.progmem	0000002e usb_string_product_name
00005e68 g     F .text.itcm	00000028 MTPD::GetNumObjects(unsigned long, unsigned long)
0000ef74 g     F .text.itcm	000000cc delay
200448f6 g     O .bss	00000002 dma_channel_allocated_mask
00001b7c g     F .text.itcm	00000118 MTPStorage_SD::CloseIndex()
00014320 g     F .fini	00000000 _fini
00000128  w    F .text.itcm	00000014 File::name()
00008978 g     F .text.itcm	00000030 TwoWire::write(unsigned char)
20043fb8 g     O .bss	00000008 AudioOutputPT8211::dma
60001020 g     O .text.headers	0000000c BootData
00008270 g     F .text.itcm	00000020 month()
20044038 g     O .bss	00000008 AudioOutputMQS::dma
0000ca1c g     F .text.itcm	00000050 SdSpiCard::readStart(unsigned long)
000097b0 g     F .text.itcm	00000040 ExFatFile::openNext(ExFatFile*, int)
000110a4 g     F .text.itcm	0000004c sprintf
0000ff78 g     F .text.itcm	0000001e Print::printf(char const*, ...)
0000a884 g     F .text.itcm	0000001e FatFile::close()
0000f554 g     F .text.itcm	00000024 Panic_Temp_isr
000000f0  w    F .text.itcm	00000010 File::position()
00000ae8  w    F .text.itcm	00000064 SDFile::~SDFile()
0000ce68  w    F .text.itcm	00000002 SdioCard::~SdioCard()
00000400  w    F .text.itcm	00000018 StreamFile<FsBaseFile, unsigned long long>::peek()
000001b8  w    F .text.itcm	00000018 File::write(unsigned char)
000129b0 g     F .text.itcm	0000002c _write_r
200440c0 g     O .bss	000004bc SD
0000d15c g     F .text.itcm	000000ec SdioCard::erase(unsigned long, unsigned long)
00007ea8 g     F .text.itcm	00000054 SPIClass::setMOSI(unsigned char)
0000fa44 g     F .text.itcm	000000b0 usb_mtp_recv
20001098 g     O .data	00000004 _impure_ptr
20000000  w    O .data	00000024 vtable for Stream
00009188 g     F .text.itcm	0000002c ExFatFile::peek()
20000024  w    O .data	00000024 vtable for StreamFile<FsBaseFile, unsigned long long>
20044060 g     O .bss	00000008 AudioOutputSPDIF::dma
20000bb4 g     O .data	00000070 Wire
0000bd30 g     F .text.itcm	000000be FatFile::lfnUniqueSfn(fname_t*)
000009b4  w    F .text.itcm	00000014 SDFile::write(void const*, unsigned int)
0000c46c g     F .text.itcm	00000028 FsVolume::open(char const*, int)
0000ce08 g     F .text.itcm	0000000c SdioCard::errorCode() const
20043e68 g     O .bss	0000000c audioShield
0000ab98 g     F .text.itcm	0000000e FatFile::open(FatVolume*, char const*, int)
000009c8  w    F .text.itcm	00000014 StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)
60001b48 g       .text.code	00000000 __preinit_array_end
000002fc g     F .text.itcm	0000009c dateTime(unsigned short*, unsigned short*, unsigned char*)
0000c4b4  w    F .text.itcm	00000002 SdSpiCard::~SdSpiCard()
20044020 g     O .bss	00000008 AudioInputTDM::dma
20043ff8 g     O .bss	00000008 AudioOutputTDM2::dma
00008210 g     F .text.itcm	00000020 minute()
00009b88 g     F .text.itcm	000000ec ExFatPartition::init(BlockDeviceInterface*, unsigned char)
000099e8 g     F .text.itcm	00000036 ExFatPartition::dirCache(DirPos_t*, unsigned char)
0000cb80 g     F .text.itcm	000000b4 SdSpiCard::erase(unsigned long, unsigned long)
00003fc0 g     F .text.itcm	00000012 MTPStorage_SD::DeleteObject(unsigned long)
000109f8 g     F .text.itcm	0000002a __ascii_mbtowc
0000c580 g     F .text.itcm	0000004e SdSpiCard::isBusy()
200004d8 g     O .data	00000058 vtable for SdSpiCard
20001644 g     O .bss	00000200 header
0000c97c  w    F .text.itcm	00000008 SdSpiCard::readCID(CID*)
0000895c  w    F .text.itcm	00000018 TwoWire::peek()
00008974  w    F .text.itcm	00000002 TwoWire::flush()
00001904 g     F .text.itcm	00000134 setup
20000810 g     O .data	00000078 usb_descriptor_list
0000cfa4 g     F .text.itcm	00000020 SdioCard::status()
00001b00 g     F .text.itcm	0000007c MTPStorage_SD::ResetIndex()
00006b9c g     F .text.itcm	00000018 MTPD::pull_packet(unsigned char*)
00000080  w    F .text.itcm	00000002 Print::flush()
00000100  w    F .text.itcm	00000010 File::size()
000006e0  w    F .text.itcm	00000062 SDClass::rmdir(char const*)
00001280 g     F .text.itcm	000000f8 file_open(unsigned short)
0000abb4 g     F .text.itcm	0000019a FatFile::read(void*, unsigned int)
00006cd0 g     F .text.itcm	00000138 MTPD::GetPartialObject(unsigned long, unsigned long, unsigned long)
000018b4 g     F .text.itcm	00000050 chipWrite(unsigned int, unsigned int)
0000aba8 g     F .text.itcm	0000000c FatFile::openRoot(FatVolume*)
2004406c g     O .bss	00000004 ExFatVolume::m_cwv
20068000 g       .text.csf	00000000 _estack
0000c494 g     F .text.itcm	00000004 operator new(unsigned int, unsigned long*)
0000c974  w    F .text.itcm	00000008 SdSpiCard::readCSD(csd_t*)
0000fec0 g     F .text.itcm	00000034 DMAChannel::release()
0000018c  w    F .text.itcm	0000002c File::read()
0000e29c g     F .text.itcm	0000004c usb_serial_write_buffer_free
0000c644 g     F .text.itcm	00000030 SdSpiCard::waitNotBusy(unsigned short)
20044048 g     O .bss	00000008 AudioInputPDM::dma
0000df80 g     F .text.itcm	00000108 usb_serial_configure
000089a8 g     F .text.itcm	0000003a TwoWire::write(unsigned char const*, unsigned int)
00000b4c  w    F .text.itcm	00000030 File::~File()
0000ff68  w    F .text.itcm	0000000e _write
20001640 g     O .bss	00000004 maxDel
20043fd8 g     O .bss	00000008 AudioInputPDM2::dma
20001618 g       .data	00000000 _edata
00009a8c g     F .text.itcm	00000024 ExFatPartition::fatPut(unsigned long, unsigned long)
00005f1c g     F .text.itcm	000002a4 MTPD::GetObjectInfo(unsigned long)
0000ce68  w    F .text.itcm	00000002 SdioCard::~SdioCard()
0000cb14 g     F .text.itcm	0000001c SdSpiCard::syncDevice()
0000a738 g     F .text.itcm	00000098 FatFile::addDirCluster()
0000008c  w    F .text.itcm	0000000c File::read(void*, unsigned int)
0000ff08  w    F .text.itcm	00000004 usb_serial_class::availableForWrite()
000000cc  w    F .text.itcm	0000000c File::truncate(unsigned long long)
0000f1b4 g     F .text.itcm	0000004e ultoa
0000daa4  w    F .text.itcm	00000002 SDClass::~SDClass()
0000c710 g     F .text.itcm	000001d8 SdSpiCard::begin(SdSpiConfig)
00008230 g     F .text.itcm	00000020 second()
60001674 g     F .text.code	000000d4 TwoWire::begin()
0000c2c0 g     F .text.itcm	00000080 FsBaseFile::open(FsVolume*, char const*, int)
00002298 g     F .text.itcm	00000210 MTPStorage_SD::ReadIndexRecord(unsigned long)
00010068 g     F .text.itcm	00000004 operator new(unsigned int)
0000fdb8 g     F .text.itcm	00000044 EventResponder::runFromInterrupt()
20001610 g     O .data	00000004 __malloc_trim_threshold
0000fef8  w    F .text.itcm	00000004 usb_serial_class::peek()
00010400 g     F .text.itcm	0000000a fcvtf
000024a8 g     F .text.itcm	0000005e MTPStorage_SD::GetNextObjectHandle(unsigned long)
000084d0 g     F .text.itcm	000001b8 AudioControlSGTL5000::enable(unsigned int, unsigned long)
00000b7c  w    F .text.itcm	00000078 MTPStorage_SD::~MTPStorage_SD()
20041a20 g     O .bss	00002440 mtpd
00013fd8 g     F .text.itcm	00000114 __mdiff
0000ce58 g     F .text.itcm	00000010 SdioCard::readOCR(unsigned long*)
00002dd8 g     F .text.itcm	000000aa MTPStorage_SD::Create(unsigned long, unsigned long, bool, char const*)
00009a20 g     F .text.itcm	00000058 ExFatPartition::dirSeek(DirPos_t*, unsigned long)
20044008 g     O .bss	00000008 AudioOutputI2SHex::dma
000081f0 g     F .text.itcm	00000020 hour()
0000d2a0 g     F .text.itcm	00000078 SdioCard::writeStop()
0000cd64  w    F .text.itcm	0000001c SdSpiCard::writeSector(unsigned long, unsigned char const*)
00008df0 g     F .text.itcm	00000014 ExFatFile::close()
20000928 g     O .data	00000101 _ctype_
0000c4a0  w    F .text.itcm	00000010 SdSpiCard::readSector(unsigned long, unsigned char*)
60001b48 g       .text.code	00000000 __init_array_start
00010390  w    F .text.itcm	00000002 .hidden __aeabi_idiv0
00001d34 g     F .text.itcm	00000394 MTPStorage_SD::OpenIndex()
20000c28 g     O .data	00000004 F_BUS_ACTUAL
00000744  w    F .text.itcm	00000074 SDClass::rename(char const*, char const*)
00000000 g       .text.itcm	00000000 _stext
0000fe20 g     F .text.itcm	000000a0 DMAChannel::begin(bool)
00011240 g     F .text.itcm	000000dc strlen
0000b860 g     F .text.itcm	0000002e FatFile::openCluster(FatFile*)
0000affc g     F .text.itcm	000000ae FatFile::seekSet(unsigned long)
60001ca4 g     O .text.progmem	0000002e usb_string_product_name_default
20043ff0 g     O .bss	00000008 AudioOutputI2SQuad::dma
0001297c g     F .text.itcm	00000018 vdprintf
0000d09c g     F .text.itcm	0000006c SdioCard::sectorCount()
0000c3a0 g     F .text.itcm	000000cc FsVolume::begin(BlockDeviceInterface*)
00007b28 g     F .text.itcm	00000008 MTPD::send_DeviceResetEvent()
0000b184 g     F .text.itcm	0000008e FatFile::openNext(FatFile*, int)
20000530 g     O .data	00000058 vtable for SdioCard
0000255c g     F .text.itcm	0000019c MTPStorage_SD::close()
0000b890 g     F .text.itcm	000000f2 FatFile::getName(char*, unsigned int)
60001834 g     F .text.code	000000e4 configure_cache
00000b7c  w    F .text.itcm	00000078 MTPStorage_SD::~MTPStorage_SD()
0000275c g     F .text.itcm	000000b0 MTPStorage_SD::rename(unsigned long, char const*)
20044058 g     O .bss	00000008 AudioOutputSPDIF2::dma
0000d6a0 g     F .text.itcm	0000006c SdioCard::readStart(unsigned long)
00000000  w      *UND*	00000000 _Jv_RegisterClasses
20043fd0 g     O .bss	00000008 AudioInputAnalog::dma
0000d86c g     F .text.itcm	00000104 SdSpiArduinoDriver::activate()
00001a60 g     F .text.itcm	00000004 MTPStorage_SD::readonly(unsigned long)
00000f04 g     F .text.itcm	00000060 pullData(unsigned long*, unsigned long)
60001b48 g       .text.code	00000000 __preinit_array_start
0000ef28 g     F .text.itcm	00000024 usb_receive
00009904 g     F .text.itcm	000000aa ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)
00002544 g     F .text.itcm	00000016 MTPStorage_SD::GetSize(unsigned long)
000001e8  w    F .text.itcm	00000028 File::whoami()
20003a0c g     O .bss	0003e000 data_buffer
00013ca4 g     F .text.itcm	0000005a __lo0bits
000099b0 g     F .text.itcm	00000038 ExFatPartition::chainSize(unsigned long)
0000b0ac g     F .text.itcm	000000d6 FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)
000183fc g       *ABS*	00000000 _flashimagelen
00010070 g     F .text.itcm	0000000a __aeabi_atexit
00000000  w      *UND*	00000000 __register_frame_info
0000f184 g     F .text.itcm	00000030 rtc_get
00009db4 g     F .text.itcm	000000d6 ExFatFile::remove()
0000fdfc g     F .text.itcm	00000004 pendablesrvreq_isr
00000874  w    F .text.itcm	00000034 SDClass::totalSize()
20043fc0 g     O .bss	00000008 AudioInputSPDIF3::dma
0000704c g     F .text.itcm	00000114 MTPD::SendObject()
00001a74 g     F .text.itcm	0000000c MTPStorage_SD::usedSize(unsigned long)
0000007c  w    F .text.itcm	00000004 Print::availableForWrite()
2000109c g     O .data	0000016c __global_locale
00007efc g     F .text.itcm	0000004c SPIClass::setMISO(unsigned char)
00001014 g     F .text.itcm	00000028 file_close()
0000e088 g     F .text.itcm	000000ec usb_serial_read
00007fa4 g     F .text.itcm	000001a8 breakTime(long, tmElements_t&)
0000ee68 g     F .text.itcm	00000068 usb_config_tx
0000b4a4 g     F .text.itcm	00000070 FatPartition::fatGet(unsigned long, unsigned long*)
00010478 g     F .text.itcm	00000010 free
00013be4 g     F .text.itcm	00000080 __multadd
00013bd0 g     F .text.itcm	00000012 _Bfree
00000828  w    F .text.itcm	0000001a SDFile::size()
00000bf4  w    F .text.itcm	0000005c SDFile::~SDFile()
20000c48  w    O .data	00000016 usb_string_serial_number
00009ce8 g     F .text.itcm	0000003c exFatHashName(char const*, unsigned int, unsigned short)
0000d70c g     F .text.itcm	000000cc SdioCard::readSector(unsigned long, unsigned char*)
0000ce3c g     F .text.itcm	0000001c SdioCard::readCSD(csd_t*)



Disassembly of section .text.code:

60001400 <ResetHandler>:
void ResetHandler(void)
{
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
60001400:	ldr	r3, [pc, #476]	; (600015e0 <ResetHandler+0x1e0>)
	IOMUXC_GPR_GPR16 = 0x00200007;
	IOMUXC_GPR_GPR14 = 0x00AA0000;
60001402:	mov.w	r1, #11141120	; 0xaa0000
void ResetHandler(void)
{
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
60001406:	ldr	r2, [pc, #476]	; (600015e4 <ResetHandler+0x1e4>)
	IOMUXC_GPR_GPR16 = 0x00200007;
60001408:	ldr	r0, [pc, #476]	; (600015e8 <ResetHandler+0x1e8>)
void startup_early_hook(void)		__attribute__ ((weak, alias("startup_default_early_hook")));
void startup_default_late_hook(void) {}
void startup_late_hook(void)		__attribute__ ((weak, alias("startup_default_late_hook")));
__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
void ResetHandler(void)
{
6000140a:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
6000140e:	str	r2, [r3, #68]	; 0x44
	IOMUXC_GPR_GPR16 = 0x00200007;
60001410:	str	r0, [r3, #64]	; 0x40
	IOMUXC_GPR_GPR14 = 0x00AA0000;
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
60001412:	ldr	r2, [pc, #472]	; (600015ec <ResetHandler+0x1ec>)
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
	IOMUXC_GPR_GPR16 = 0x00200007;
	IOMUXC_GPR_GPR14 = 0x00AA0000;
60001414:	str	r1, [r3, #56]	; 0x38
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
60001416:	mov	sp, r2
	__asm__ volatile("dsb":::"memory");
60001418:	dsb	sy
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
6000141c:	ldr	r2, [pc, #464]	; (600015f0 <ResetHandler+0x1f0>)
	IOMUXC_GPR_GPR16 = 0x00200007;
	IOMUXC_GPR_GPR14 = 0x00AA0000;
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
	__asm__ volatile("dsb":::"memory");
#endif
	PMU_MISC0_SET = 1<<3; //Use bandgap-based bias currents for best performance (Page 1175)
6000141e:	add.w	r3, r3, #180224	; 0x2c000
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
60001422:	ldr	r1, [pc, #464]	; (600015f4 <ResetHandler+0x1f4>)
	IOMUXC_GPR_GPR16 = 0x00200007;
	IOMUXC_GPR_GPR14 = 0x00AA0000;
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
	__asm__ volatile("dsb":::"memory");
#endif
	PMU_MISC0_SET = 1<<3; //Use bandgap-based bias currents for best performance (Page 1175)
60001424:	movs	r0, #8
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
60001426:	cmp	r2, r1
	IOMUXC_GPR_GPR16 = 0x00200007;
	IOMUXC_GPR_GPR14 = 0x00AA0000;
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
	__asm__ volatile("dsb":::"memory");
#endif
	PMU_MISC0_SET = 1<<3; //Use bandgap-based bias currents for best performance (Page 1175)
60001428:	str.w	r0, [r3, #340]	; 0x154
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
6000142c:	beq.n	6000144e <ResetHandler+0x4e>
	while (dest < dest_end) {
6000142e:	ldr	r3, [pc, #456]	; (600015f8 <ResetHandler+0x1f8>)
60001430:	cmp	r2, r3
60001432:	bcs.n	6000144e <ResetHandler+0x4e>
60001434:	mvns	r4, r2
60001436:	mov	r0, r1
60001438:	add	r3, r4
6000143a:	bic.w	r3, r3, #3
6000143e:	adds	r3, #4
60001440:	add	r3, r1
		*dest++ = *src++;
60001442:	ldr.w	r1, [r0], #4

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
60001446:	cmp	r0, r3
		*dest++ = *src++;
60001448:	str.w	r1, [r2], #4

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
6000144c:	bne.n	60001442 <ResetHandler+0x42>
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
6000144e:	ldr	r2, [pc, #428]	; (600015fc <ResetHandler+0x1fc>)
60001450:	ldr	r1, [pc, #428]	; (60001600 <ResetHandler+0x200>)
60001452:	cmp	r2, r1
60001454:	beq.n	60001476 <ResetHandler+0x76>
	while (dest < dest_end) {
60001456:	ldr	r3, [pc, #428]	; (60001604 <ResetHandler+0x204>)
60001458:	cmp	r2, r3
6000145a:	bcs.n	60001476 <ResetHandler+0x76>
6000145c:	mvns	r4, r2
6000145e:	mov	r0, r1
60001460:	add	r3, r4
60001462:	bic.w	r3, r3, #3
60001466:	adds	r3, #4
60001468:	add	r3, r1
		*dest++ = *src++;
6000146a:	ldr.w	r1, [r0], #4

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
6000146e:	cmp	r0, r3
		*dest++ = *src++;
60001470:	str.w	r1, [r2], #4

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
60001474:	bne.n	6000146a <ResetHandler+0x6a>
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_clear(uint32_t *dest, uint32_t *dest_end)
{
	while (dest < dest_end) {
60001476:	ldr	r2, [pc, #400]	; (60001608 <ResetHandler+0x208>)
60001478:	ldr	r3, [pc, #400]	; (6000160c <ResetHandler+0x20c>)
6000147a:	cmp	r2, r3
6000147c:	bcs.n	60001496 <ResetHandler+0x96>
6000147e:	mvns	r0, r2
60001480:	mov	r1, r2
		*dest++ = 0;
60001482:	movs	r4, #0
60001484:	add	r3, r0
60001486:	bic.w	r3, r3, #3
6000148a:	adds	r3, #4
6000148c:	add	r3, r2
6000148e:	str.w	r4, [r1], #4
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_clear(uint32_t *dest, uint32_t *dest_end)
{
	while (dest < dest_end) {
60001492:	cmp	r3, r1
60001494:	bne.n	6000148e <ResetHandler+0x8e>
	memory_copy(&_stext, &_stextload, &_etext);
	memory_copy(&_sdata, &_sdataload, &_edata);
	memory_clear(&_sbss, &_ebss);

	// enable FPU
	SCB_CPACR = 0x00F00000;
60001496:	ldr	r2, [pc, #376]	; (60001610 <ResetHandler+0x210>)
60001498:	mov.w	r1, #15728640	; 0xf00000
6000149c:	ldr	r3, [pc, #372]	; (60001614 <ResetHandler+0x214>)
6000149e:	str	r1, [r2, #0]
600014a0:	add.w	r1, r3, #704	; 0x2c0
600014a4:	ldr	r2, [pc, #368]	; (60001618 <ResetHandler+0x218>)

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
600014a6:	str.w	r2, [r3, #4]!
600014aa:	cmp	r1, r3
600014ac:	bne.n	600014a6 <ResetHandler+0xa6>
600014ae:	ldr	r3, [pc, #364]	; (6000161c <ResetHandler+0x21c>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
600014b0:	movs	r1, #128	; 0x80
600014b2:	ldr	r2, [pc, #364]	; (60001620 <ResetHandler+0x220>)
600014b4:	strb.w	r1, [r3], #1
600014b8:	cmp	r3, r2
600014ba:	bne.n	600014b4 <ResetHandler+0xb4>
}

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
600014bc:	ldr	r4, [pc, #356]	; (60001624 <ResetHandler+0x224>)
600014be:	mov.w	r7, #2155905152	; 0x80808080
	reset_PFD();
	
	// Configure clocks
	// TODO: make sure all affected peripherals are turned off!
	// PIT & GPT timers to run from 24 MHz clock (independent of CPU speed)
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600014c2:	ldr	r6, [pc, #356]	; (60001628 <ResetHandler+0x228>)
	// UARTs run from 24 MHz clock (works if PLL3 off or bypassed)
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;

#if defined(__IMXRT1062__)
	// Use fast GPIO6, GPIO7, GPIO8, GPIO9
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600014c4:	mov.w	r2, #4294967295
	SCB_CPACR = 0x00F00000;

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
	SCB_VTOR = (uint32_t)_VectorsRam;
600014c8:	ldr.w	sl, [pc, #412]	; 60001668 <ResetHandler+0x268>
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
600014cc:	movs	r5, #0
	SCB_CPACR = 0x00F00000;

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
	SCB_VTOR = (uint32_t)_VectorsRam;
600014ce:	ldr	r3, [pc, #348]	; (6000162c <ResetHandler+0x22c>)

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
600014d0:	ldr.w	r9, [pc, #408]	; 6000166c <ResetHandler+0x26c>
	//PLL3:
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
600014d4:	ldr.w	r8, [pc, #408]	; 60001670 <ResetHandler+0x270>
	SCB_CPACR = 0x00F00000;

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
	SCB_VTOR = (uint32_t)_VectorsRam;
600014d8:	str.w	sl, [r3]
}

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
600014dc:	str.w	r7, [r4, #260]	; 0x104
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
600014e0:	str.w	r9, [r4, #256]	; 0x100
	//PLL3:
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
600014e4:	str.w	r7, [r4, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
600014e8:	str.w	r8, [r4, #240]	; 0xf0
	reset_PFD();
	
	// Configure clocks
	// TODO: make sure all affected peripherals are turned off!
	// PIT & GPT timers to run from 24 MHz clock (independent of CPU speed)
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600014ec:	ldr	r3, [r6, #28]
	// UARTs run from 24 MHz clock (works if PLL3 off or bypassed)
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;

#if defined(__IMXRT1062__)
	// Use fast GPIO6, GPIO7, GPIO8, GPIO9
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600014ee:	ldr	r1, [pc, #240]	; (600015e0 <ResetHandler+0x1e0>)
	reset_PFD();
	
	// Configure clocks
	// TODO: make sure all affected peripherals are turned off!
	// PIT & GPT timers to run from 24 MHz clock (independent of CPU speed)
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600014f0:	bic.w	r3, r3, #127	; 0x7f
600014f4:	orr.w	r3, r3, #64	; 0x40
600014f8:	str	r3, [r6, #28]
	// UARTs run from 24 MHz clock (works if PLL3 off or bypassed)
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;
600014fa:	ldr	r3, [r6, #36]	; 0x24
600014fc:	bic.w	r3, r3, #127	; 0x7f
60001500:	orr.w	r3, r3, #64	; 0x40
60001504:	str	r3, [r6, #36]	; 0x24

#if defined(__IMXRT1062__)
	// Use fast GPIO6, GPIO7, GPIO8, GPIO9
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
60001506:	str	r2, [r1, #104]	; 0x68
	IOMUXC_GPR_GPR27 = 0xFFFFFFFF;
60001508:	str	r2, [r1, #108]	; 0x6c
	IOMUXC_GPR_GPR28 = 0xFFFFFFFF;
6000150a:	str	r2, [r1, #112]	; 0x70
	IOMUXC_GPR_GPR29 = 0xFFFFFFFF;
6000150c:	str	r2, [r1, #116]	; 0x74
	// must enable PRINT_DEBUG_STUFF in debug/print.h
	printf_debug_init();
	printf("\n***********IMXRT Startup**********\n");
	printf("test %d %d %d\n", 1, -1234567, 3);

	configure_cache();
6000150e:	bl	60001834 <configure_cache>
extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
60001512:	ldr	r2, [pc, #284]	; (60001630 <ResetHandler+0x230>)
60001514:	movs	r0, #99	; 0x63
	SYST_CVR = 0;
60001516:	ldr	r3, [pc, #284]	; (60001634 <ResetHandler+0x234>)
#define SYSTICK_EXT_FREQ 100000

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
60001518:	ldr	r1, [pc, #284]	; (60001638 <ResetHandler+0x238>)
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
6000151a:	str	r0, [r2, #0]
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
6000151c:	movs	r2, #3
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
6000151e:	str	r5, [r3, #0]
#define SYSTICK_EXT_FREQ 100000

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
60001520:	str.w	r1, [sl, #56]	; 0x38
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
60001524:	str.w	r2, [r3, #-8]
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
60001528:	ldr	r1, [pc, #272]	; (6000163c <ResetHandler+0x23c>)
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
6000152a:	ldr	r2, [pc, #276]	; (60001640 <ResetHandler+0x240>)

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
6000152c:	ldr	r0, [pc, #276]	; (60001644 <ResetHandler+0x244>)
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
6000152e:	str.w	r2, [r3, #3336]	; 0xd08
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
60001532:	ldr	r3, [r1, #0]
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
60001534:	ldr	r2, [pc, #272]	; (60001648 <ResetHandler+0x248>)
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
60001536:	orr.w	r3, r3, #16777216	; 0x1000000

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
6000153a:	str.w	r0, [sl, #60]	; 0x3c
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
6000153e:	ldr	r0, [pc, #268]	; (6000164c <ResetHandler+0x24c>)
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
60001540:	str	r3, [r1, #0]
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
60001542:	ldr	r3, [r2, #0]
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
60001544:	ldr	r1, [pc, #264]	; (60001650 <ResetHandler+0x250>)
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
60001546:	orr.w	r3, r3, #1
6000154a:	str	r3, [r2, #0]
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
6000154c:	ldr	r3, [r0, #0]
6000154e:	str	r3, [r1, #0]
	printf("\n***********IMXRT Startup**********\n");
	printf("test %d %d %d\n", 1, -1234567, 3);

	configure_cache();
	configure_systick();
	usb_pll_start();	
60001550:	bl	60001918 <usb_pll_start>
}

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
60001554:	str.w	r7, [r4, #260]	; 0x104
	configure_cache();
	configure_systick();
	usb_pll_start();	
	reset_PFD(); //TODO: is this really needed?
#ifdef F_CPU
	set_arm_clock(F_CPU);
60001558:	ldr	r0, [pc, #248]	; (60001654 <ResetHandler+0x254>)

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
6000155a:	str.w	r9, [r4, #256]	; 0x100
	//PLL3:
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
6000155e:	str.w	r7, [r4, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
60001562:	str.w	r8, [r4, #240]	; 0xf0
	configure_cache();
	configure_systick();
	usb_pll_start();	
	reset_PFD(); //TODO: is this really needed?
#ifdef F_CPU
	set_arm_clock(F_CPU);
60001566:	bl	60001b40 <__set_arm_clock_veneer>
#endif

	// Undo PIT timer usage by ROM startup
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
6000156a:	ldr	r1, [r6, #108]	; 0x6c
	PIT_MCR = 0;
6000156c:	ldr	r2, [pc, #232]	; (60001658 <ResetHandler+0x258>)
#ifdef F_CPU
	set_arm_clock(F_CPU);
#endif

	// Undo PIT timer usage by ROM startup
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
6000156e:	orr.w	r1, r1, #12288	; 0x3000
	PIT_TCTRL1 = 0;
	PIT_TCTRL2 = 0;
	PIT_TCTRL3 = 0;

	// initialize RTC
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
60001572:	ldr	r3, [pc, #232]	; (6000165c <ResetHandler+0x25c>)
#ifdef F_CPU
	set_arm_clock(F_CPU);
#endif

	// Undo PIT timer usage by ROM startup
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
60001574:	str	r1, [r6, #108]	; 0x6c
	PIT_MCR = 0;
60001576:	str	r5, [r2, #0]
	PIT_TCTRL0 = 0;
60001578:	str.w	r5, [r2, #264]	; 0x108
	PIT_TCTRL1 = 0;
6000157c:	str.w	r5, [r2, #280]	; 0x118
	PIT_TCTRL2 = 0;
60001580:	str.w	r5, [r2, #296]	; 0x128
	PIT_TCTRL3 = 0;
60001584:	str.w	r5, [r2, #312]	; 0x138

	// initialize RTC
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
60001588:	ldr	r2, [r3, #56]	; 0x38
6000158a:	lsls	r2, r2, #31
6000158c:	bmi.n	600015a0 <ResetHandler+0x1a0>
		// if SRTC isn't running, start it with default Jan 1, 2019
		SNVS_LPSRTCLR = 1546300800u << 15;
		SNVS_LPSRTCMR = 1546300800u >> 17;
6000158e:	movw	r2, #11797	; 0x2e15
	PIT_TCTRL3 = 0;

	// initialize RTC
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
		// if SRTC isn't running, start it with default Jan 1, 2019
		SNVS_LPSRTCLR = 1546300800u << 15;
60001592:	ldr	r1, [pc, #204]	; (60001660 <ResetHandler+0x260>)
60001594:	str	r1, [r3, #84]	; 0x54
		SNVS_LPSRTCMR = 1546300800u >> 17;
60001596:	str	r2, [r3, #80]	; 0x50
		SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
60001598:	ldr	r2, [r3, #56]	; 0x38
6000159a:	orr.w	r2, r2, #1
6000159e:	str	r2, [r3, #56]	; 0x38
	}
	SNVS_HPCR |= SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS;
600015a0:	ldr	r2, [pc, #184]	; (6000165c <ResetHandler+0x25c>)
600015a2:	ldr	r4, [pc, #192]	; (60001664 <ResetHandler+0x264>)
600015a4:	ldr	r3, [r2, #8]
600015a6:	orr.w	r3, r3, #65537	; 0x10001
600015aa:	str	r3, [r2, #8]

#ifdef ARDUINO_TEENSY41
	configure_external_ram();
#endif
	startup_early_hook();
600015ac:	bl	60001b20 <__startup_early_hook_veneer>
extern volatile uint32_t systick_millis_count;

static inline uint32_t millis(void) __attribute__((always_inline, unused));
static inline uint32_t millis(void)
{
	return systick_millis_count;
600015b0:	ldr	r3, [r4, #0]
	while (millis() < 20) ; // wait at least 20ms before starting USB
600015b2:	cmp	r3, #19
600015b4:	bls.n	600015b0 <ResetHandler+0x1b0>
	usb_init();
600015b6:	bl	60001748 <usb_init>
	analog_init();
600015ba:	bl	60001a98 <analog_init>
	pwm_init();
600015be:	bl	60001b18 <__pwm_init_veneer>
	tempmon_init();
600015c2:	bl	6000197c <tempmon_init>

	startup_late_hook();
600015c6:	bl	60001b08 <__startup_late_hook_veneer>
600015ca:	ldr	r3, [r4, #0]
	while (millis() < 300) ; // wait at least 300ms before calling user code
600015cc:	cmp.w	r3, #300	; 0x12c
600015d0:	bcc.n	600015ca <ResetHandler+0x1ca>
	//printf("before C++ constructors\n");
	__libc_init_array();
600015d2:	bl	60001b30 <____libc_init_array_veneer>
	//printf("after C++ constructors\n");
	//printf("before setup\n");
	main();
600015d6:	bl	60001b10 <__main_veneer>
	
	while (1) asm("WFI");
600015da:	wfi
600015dc:	b.n	600015da <ResetHandler+0x1da>
600015de:	nop
600015e0:	.word	0x400ac000
600015e4:	.word	0xaaaaaabf
600015e8:	.word	0x00200007
600015ec:	.word	0x20068000
600015f0:	.word	0x00000000
600015f4:	.word	0x60001dd4
600015f8:	.word	0x00014328
600015fc:	.word	0x20000000
60001600:	.word	0x60016100
60001604:	.word	0x20001618
60001608:	.word	0x20001618
6000160c:	.word	0x20046700
60001610:	.word	0xe000ed88
60001614:	.word	0x200463fc
60001618:	.word	0x0000f0a5
6000161c:	.word	0xe000e400
60001620:	.word	0xe000e4a0
60001624:	.word	0x400d8000
60001628:	.word	0x400fc000
6000162c:	.word	0xe000ed08
60001630:	.word	0xe000e014
60001634:	.word	0xe000e018
60001638:	.word	0x0000fdfd
6000163c:	.word	0xe000edfc
60001640:	.word	0x20200000
60001644:	.word	0x0000fe01
60001648:	.word	0xe0001000
6000164c:	.word	0xe0001004
60001650:	.word	0x2004479c
60001654:	.word	0x23c34600
60001658:	.word	0x40084000
6000165c:	.word	0x400d4000
60001660:	.word	0x56c00000
60001664:	.word	0x200447a4
60001668:	.word	0x20046400
6000166c:	.word	0x2018101b
60001670:	.word	0x13110d0c

60001674 <TwoWire::begin()>:
//#include "debug/printf.h"

#define PINCONFIG (IOMUXC_PAD_ODE | IOMUXC_PAD_SRE | IOMUXC_PAD_DSE(4) | IOMUXC_PAD_SPEED(1) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3))

FLASHMEM void TwoWire::begin(void)
{
60001674:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	// use 24 MHz clock
	CCM_CSCDR2 = (CCM_CSCDR2 & ~CCM_CSCDR2_LPI2C_CLK_PODF(63)) | CCM_CSCDR2_LPI2C_CLK_SEL;
60001678:	ldr	r7, [pc, #188]	; (60001738 <TwoWire::begin()+0xc4>)
#define CLOCK_STRETCH_TIMEOUT 15000


void TwoWire::setClock(uint32_t frequency)
{
	port->MCR = 0;
6000167a:	movs	r5, #0

FLASHMEM void TwoWire::begin(void)
{
	// use 24 MHz clock
	CCM_CSCDR2 = (CCM_CSCDR2 & ~CCM_CSCDR2_LPI2C_CLK_PODF(63)) | CCM_CSCDR2_LPI2C_CLK_SEL;
	hardware.clock_gate_register |= hardware.clock_gate_mask;
6000167c:	ldr	r2, [r0, #20]
	port->MCR = 0;
	if (frequency < 400000) {
		// 100 kHz
		port->MCCR0 = LPI2C_MCCR0_CLKHI(55) | LPI2C_MCCR0_CLKLO(59) |
			LPI2C_MCCR0_DATAVD(25) | LPI2C_MCCR0_SETHOLD(40);
		port->MCFGR1 = LPI2C_MCFGR1_PRESCALE(1);
6000167e:	movs	r4, #1
#define PINCONFIG (IOMUXC_PAD_ODE | IOMUXC_PAD_SRE | IOMUXC_PAD_DSE(4) | IOMUXC_PAD_SPEED(1) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3))

FLASHMEM void TwoWire::begin(void)
{
	// use 24 MHz clock
	CCM_CSCDR2 = (CCM_CSCDR2 & ~CCM_CSCDR2_LPI2C_CLK_PODF(63)) | CCM_CSCDR2_LPI2C_CLK_SEL;
60001680:	ldr	r1, [r7, #56]	; 0x38
	hardware.clock_gate_register |= hardware.clock_gate_mask;
	port->MCR = LPI2C_MCR_RST;
60001682:	mov.w	lr, #2

FLASHMEM void TwoWire::begin(void)
{
	// use 24 MHz clock
	CCM_CSCDR2 = (CCM_CSCDR2 & ~CCM_CSCDR2_LPI2C_CLK_PODF(63)) | CCM_CSCDR2_LPI2C_CLK_SEL;
	hardware.clock_gate_register |= hardware.clock_gate_mask;
60001686:	ldr	r6, [r2, #0]
		port->MCCR0 = LPI2C_MCCR0_CLKHI(55) | LPI2C_MCCR0_CLKLO(59) |
			LPI2C_MCCR0_DATAVD(25) | LPI2C_MCCR0_SETHOLD(40);
		port->MCFGR1 = LPI2C_MCFGR1_PRESCALE(1);
		port->MCFGR2 = LPI2C_MCFGR2_FILTSDA(5) | LPI2C_MCFGR2_FILTSCL(5) |
			LPI2C_MCFGR2_BUSIDLE(3000); // idle timeout 250 us
		port->MCFGR3 = LPI2C_MCFGR3_PINLOW(CLOCK_STRETCH_TIMEOUT * 12 / 256 + 1);
60001688:	mov.w	r8, #180224	; 0x2c000
#define PINCONFIG (IOMUXC_PAD_ODE | IOMUXC_PAD_SRE | IOMUXC_PAD_DSE(4) | IOMUXC_PAD_SPEED(1) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3))

FLASHMEM void TwoWire::begin(void)
{
	// use 24 MHz clock
	CCM_CSCDR2 = (CCM_CSCDR2 & ~CCM_CSCDR2_LPI2C_CLK_PODF(63)) | CCM_CSCDR2_LPI2C_CLK_SEL;
6000168c:	bic.w	r1, r1, #16515072	; 0xfc0000
	hardware.clock_gate_register |= hardware.clock_gate_mask;
	port->MCR = LPI2C_MCR_RST;
60001690:	ldr	r3, [r0, #16]
{
	port->MCR = 0;
	if (frequency < 400000) {
		// 100 kHz
		port->MCCR0 = LPI2C_MCCR0_CLKHI(55) | LPI2C_MCCR0_CLKLO(59) |
			LPI2C_MCCR0_DATAVD(25) | LPI2C_MCCR0_SETHOLD(40);
60001692:	ldr.w	ip, [pc, #176]	; 60001744 <TwoWire::begin()+0xd0>
#define PINCONFIG (IOMUXC_PAD_ODE | IOMUXC_PAD_SRE | IOMUXC_PAD_DSE(4) | IOMUXC_PAD_SPEED(1) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3))

FLASHMEM void TwoWire::begin(void)
{
	// use 24 MHz clock
	CCM_CSCDR2 = (CCM_CSCDR2 & ~CCM_CSCDR2_LPI2C_CLK_PODF(63)) | CCM_CSCDR2_LPI2C_CLK_SEL;
60001696:	orr.w	r1, r1, #262144	; 0x40000
6000169a:	str	r1, [r7, #56]	; 0x38
	hardware.clock_gate_register |= hardware.clock_gate_mask;
6000169c:	ldr	r1, [r6, #0]
6000169e:	ldr	r7, [r2, #4]
600016a0:	orrs	r1, r7
600016a2:	str	r1, [r6, #0]
			LPI2C_MCFGR2_BUSIDLE(2400); // idle timeout 100 us
		port->MCFGR3 = LPI2C_MCFGR3_PINLOW(CLOCK_STRETCH_TIMEOUT * 24 / 256 + 1);
	}
	port->MCCR1 = port->MCCR0;
	port->MCFGR0 = 0;
	port->MFCR = LPI2C_MFCR_RXWATER(1) | LPI2C_MFCR_TXWATER(1);
600016a4:	mov.w	r1, #65537	; 0x10001
		// 100 kHz
		port->MCCR0 = LPI2C_MCCR0_CLKHI(55) | LPI2C_MCCR0_CLKLO(59) |
			LPI2C_MCCR0_DATAVD(25) | LPI2C_MCCR0_SETHOLD(40);
		port->MCFGR1 = LPI2C_MCFGR1_PRESCALE(1);
		port->MCFGR2 = LPI2C_MCFGR2_FILTSDA(5) | LPI2C_MCFGR2_FILTSCL(5) |
			LPI2C_MCFGR2_BUSIDLE(3000); // idle timeout 250 us
600016a8:	ldr	r6, [pc, #144]	; (6000173c <TwoWire::begin()+0xc8>)
FLASHMEM void TwoWire::begin(void)
{
	// use 24 MHz clock
	CCM_CSCDR2 = (CCM_CSCDR2 & ~CCM_CSCDR2_LPI2C_CLK_PODF(63)) | CCM_CSCDR2_LPI2C_CLK_SEL;
	hardware.clock_gate_register |= hardware.clock_gate_mask;
	port->MCR = LPI2C_MCR_RST;
600016aa:	str.w	lr, [r3, #16]
#define CLOCK_STRETCH_TIMEOUT 15000


void TwoWire::setClock(uint32_t frequency)
{
	port->MCR = 0;
600016ae:	str	r5, [r3, #16]
	if (frequency < 400000) {
		// 100 kHz
		port->MCCR0 = LPI2C_MCCR0_CLKHI(55) | LPI2C_MCCR0_CLKLO(59) |
			LPI2C_MCCR0_DATAVD(25) | LPI2C_MCCR0_SETHOLD(40);
600016b0:	str.w	ip, [r3, #72]	; 0x48
		port->MCFGR1 = LPI2C_MCFGR1_PRESCALE(1);
600016b4:	str	r4, [r3, #36]	; 0x24
		port->MCFGR2 = LPI2C_MCFGR2_FILTSDA(5) | LPI2C_MCFGR2_FILTSCL(5) |
			LPI2C_MCFGR2_BUSIDLE(3000); // idle timeout 250 us
600016b6:	str	r6, [r3, #40]	; 0x28
	hardware.clock_gate_register |= hardware.clock_gate_mask;
	port->MCR = LPI2C_MCR_RST;
	setClock(100000);

	// Setup SDA register
	*(portControlRegister(hardware.sda_pins[sda_pin_index_].pin)) = PINCONFIG;
600016b8:	movw	r6, #63585	; 0xf861
		port->MCCR0 = LPI2C_MCCR0_CLKHI(55) | LPI2C_MCCR0_CLKLO(59) |
			LPI2C_MCCR0_DATAVD(25) | LPI2C_MCCR0_SETHOLD(40);
		port->MCFGR1 = LPI2C_MCFGR1_PRESCALE(1);
		port->MCFGR2 = LPI2C_MCFGR2_FILTSDA(5) | LPI2C_MCFGR2_FILTSCL(5) |
			LPI2C_MCFGR2_BUSIDLE(3000); // idle timeout 250 us
		port->MCFGR3 = LPI2C_MCFGR3_PINLOW(CLOCK_STRETCH_TIMEOUT * 12 / 256 + 1);
600016bc:	str.w	r8, [r3, #44]	; 0x2c
		port->MCFGR1 = LPI2C_MCFGR1_PRESCALE(0);
		port->MCFGR2 = LPI2C_MCFGR2_FILTSDA(1) | LPI2C_MCFGR2_FILTSCL(1) |
			LPI2C_MCFGR2_BUSIDLE(2400); // idle timeout 100 us
		port->MCFGR3 = LPI2C_MCFGR3_PINLOW(CLOCK_STRETCH_TIMEOUT * 24 / 256 + 1);
	}
	port->MCCR1 = port->MCCR0;
600016c0:	ldr	r7, [r3, #72]	; 0x48
600016c2:	str	r7, [r3, #80]	; 0x50
	port->MCFGR0 = 0;
600016c4:	str	r5, [r3, #32]
	port->MFCR = LPI2C_MFCR_RXWATER(1) | LPI2C_MFCR_TXWATER(1);
600016c6:	str	r1, [r3, #88]	; 0x58
	port->MCR = LPI2C_MCR_MEN;
600016c8:	str	r4, [r3, #16]
	hardware.clock_gate_register |= hardware.clock_gate_mask;
	port->MCR = LPI2C_MCR_RST;
	setClock(100000);

	// Setup SDA register
	*(portControlRegister(hardware.sda_pins[sda_pin_index_].pin)) = PINCONFIG;
600016ca:	ldrb	r1, [r0, #24]
600016cc:	ldr	r3, [pc, #112]	; (60001740 <TwoWire::begin()+0xcc>)
600016ce:	add.w	r1, r2, r1, lsl #4
600016d2:	ldrb	r1, [r1, #8]
600016d4:	add.w	r1, r3, r1, lsl #4
600016d8:	ldr	r1, [r1, #8]
600016da:	str	r6, [r1, #0]
	*(portConfigRegister(hardware.sda_pins[sda_pin_index_].pin)) = hardware.sda_pins[sda_pin_index_].mux_val;
600016dc:	ldrb	r1, [r0, #24]
600016de:	add.w	r1, r2, r1, lsl #4
600016e2:	ldrb	r4, [r1, #8]
600016e4:	ldr	r5, [r1, #12]
600016e6:	add.w	r1, r3, r4, lsl #4
600016ea:	ldr	r1, [r1, #4]
600016ec:	str	r5, [r1, #0]
600016ee:	ldrb	r1, [r0, #24]
600016f0:	add.w	r1, r2, r1, lsl #4
	if (hardware.sda_pins[sda_pin_index_].select_input_register) {
600016f4:	ldr	r4, [r1, #16]
600016f6:	cbz	r4, 600016fc <TwoWire::begin()+0x88>
		*(hardware.sda_pins[sda_pin_index_].select_input_register) =  hardware.sda_pins[sda_pin_index_].select_val;
600016f8:	ldr	r1, [r1, #20]
600016fa:	str	r1, [r4, #0]
	}

	// setup SCL register
	*(portControlRegister(hardware.scl_pins[scl_pin_index_].pin)) = PINCONFIG;
600016fc:	ldrb	r1, [r0, #25]
600016fe:	movw	r4, #63585	; 0xf861
60001702:	add.w	r1, r2, r1, lsl #4
60001706:	ldrb.w	r1, [r1, #40]	; 0x28
6000170a:	add.w	r1, r3, r1, lsl #4
6000170e:	ldr	r1, [r1, #8]
60001710:	str	r4, [r1, #0]
	*(portConfigRegister(hardware.scl_pins[scl_pin_index_].pin)) = hardware.scl_pins[scl_pin_index_].mux_val;
60001712:	ldrb	r1, [r0, #25]
60001714:	add.w	r1, r2, r1, lsl #4
60001718:	ldrb.w	r4, [r1, #40]	; 0x28
6000171c:	ldr	r1, [r1, #44]	; 0x2c
6000171e:	add.w	r3, r3, r4, lsl #4
60001722:	ldr	r3, [r3, #4]
60001724:	str	r1, [r3, #0]
60001726:	ldrb	r3, [r0, #25]
60001728:	add.w	r2, r2, r3, lsl #4
	if (hardware.scl_pins[scl_pin_index_].select_input_register) {
6000172c:	ldr	r3, [r2, #48]	; 0x30
6000172e:	cbz	r3, 60001734 <TwoWire::begin()+0xc0>
		*(hardware.scl_pins[scl_pin_index_].select_input_register) =  hardware.scl_pins[scl_pin_index_].select_val;
60001730:	ldr	r2, [r2, #52]	; 0x34
60001732:	str	r2, [r3, #0]
60001734:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
60001738:	.word	0x400fc000
6000173c:	.word	0x05050bb8
60001740:	.word	0x20000590
60001744:	.word	0x1928373b

60001748 <usb_init>:
FLASHMEM void usb_init(void)
{
	// TODO: only enable when VBUS detected
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
60001748:	ldr	r3, [pc, #192]	; (6000180c <usb_init+0xc4>)
6000174a:	movw	r2, #3937	; 0xf61

static void run_callbacks(endpoint_t *ep);


FLASHMEM void usb_init(void)
{
6000174e:	push	{r4, r5, r6, lr}
	// TODO: only enable when VBUS detected
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
60001750:	str.w	r2, [r3, #288]	; 0x120

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
60001754:	movw	r5, #1028	; 0x404
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
		| PMU_REG_3P0_ENABLE_LINREG;

	usb_init_serialnumber();
60001758:	bl	60001b38 <__usb_init_serialnumber_veneer>

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
6000175c:	ldr	r1, [pc, #176]	; (60001810 <usb_init+0xc8>)
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
6000175e:	ldr	r0, [pc, #180]	; (60001814 <usb_init+0xcc>)

	usb_init_serialnumber();

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001760:	ldr.w	r2, [r1, #128]	; 0x80
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60001764:	ldr	r4, [pc, #176]	; (60001818 <usb_init+0xd0>)

	usb_init_serialnumber();

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001766:	orr.w	r2, r2, #3
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
6000176a:	ldr	r3, [pc, #176]	; (6000181c <usb_init+0xd4>)

	usb_init_serialnumber();

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
6000176c:	str.w	r2, [r1, #128]	; 0x80
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
60001770:	str.w	r5, [r0, #352]	; 0x160
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60001774:	ldr	r2, [r4, #0]
60001776:	ands	r3, r2
60001778:	cbnz	r3, 60001782 <usb_init+0x3a>
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
6000177a:	ldr.w	r3, [r0, #424]	; 0x1a8
6000177e:	lsls	r2, r3, #30
60001780:	beq.n	600017b8 <usb_init+0x70>
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
60001782:	ldr	r3, [pc, #144]	; (60001814 <usb_init+0xcc>)
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
60001784:	mov.w	r1, #2147483648	; 0x80000000
60001788:	ldr	r2, [pc, #140]	; (60001818 <usb_init+0xd0>)
6000178a:	str	r1, [r2, #52]	; 0x34
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
6000178c:	mov	r2, r3
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
6000178e:	ldr.w	r1, [r3, #320]	; 0x140
60001792:	orr.w	r1, r1, #2
60001796:	str.w	r1, [r3, #320]	; 0x140
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
6000179a:	ldr.w	r3, [r2, #320]	; 0x140
6000179e:	lsls	r3, r3, #30
600017a0:	bmi.n	6000179a <usb_init+0x52>
		NVIC_CLEAR_PENDING(IRQ_USB1);
600017a2:	mov.w	r0, #131072	; 0x20000
600017a6:	ldr	r1, [pc, #120]	; (60001820 <usb_init+0xd8>)
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
600017a8:	ldr	r3, [pc, #108]	; (60001818 <usb_init+0xd0>)
600017aa:	mov.w	r2, #2147483648	; 0x80000000
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
		NVIC_CLEAR_PENDING(IRQ_USB1);
600017ae:	str	r0, [r1, #0]
		//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
		//printf("USBPHY1_TX=%08lX\n", USBPHY1_TX);
		//printf("USBPHY1_RX=%08lX\n", USBPHY1_RX);
		//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);
		//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);
		delay(25);
600017b0:	movs	r0, #25
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
		NVIC_CLEAR_PENDING(IRQ_USB1);
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
600017b2:	str	r2, [r3, #56]	; 0x38
		//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
		//printf("USBPHY1_TX=%08lX\n", USBPHY1_TX);
		//printf("USBPHY1_RX=%08lX\n", USBPHY1_RX);
		//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);
		//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);
		delay(25);
600017b4:	bl	60001b28 <__delay_veneer>
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
600017b8:	ldr	r5, [pc, #104]	; (60001824 <usb_init+0xdc>)
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
	USBPHY1_PWD = 0;
600017ba:	movs	r2, #0
	// ENDPTFLUSH	pg 3247
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
600017bc:	ldr	r3, [pc, #88]	; (60001818 <usb_init+0xd0>)
600017be:	mov.w	r1, #1073741824	; 0x40000000
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
600017c2:	ldr	r4, [pc, #80]	; (60001814 <usb_init+0xcc>)
600017c4:	movs	r6, #10
	// ENDPTFLUSH	pg 3247
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
600017c6:	str	r1, [r3, #56]	; 0x38
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
600017c8:	mov	r0, r5
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
	USBPHY1_PWD = 0;
600017ca:	str	r2, [r3, #0]
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
600017cc:	mov	r1, r2
	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
600017ce:	str.w	r6, [r4, #424]	; 0x1a8
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
600017d2:	mov.w	r2, #768	; 0x300
600017d6:	bl	60001b00 <__memset_veneer>
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
600017da:	mov.w	r6, #4227072	; 0x408000
	endpoint_queue_head[1].config = (64 << 16);
600017de:	mov.w	r0, #4194304	; 0x400000
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
	//  Recommended: enable all device interrupts including: USBINT, USBERRINT,
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
600017e2:	movw	r3, #323	; 0x143
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
#else
extern void (* _VectorsRam[NVIC_NUM_INTERRUPTS+16])(void);
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
600017e6:	ldr	r2, [pc, #64]	; (60001828 <usb_init+0xe0>)
600017e8:	ldr	r1, [pc, #64]	; (6000182c <usb_init+0xe4>)
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
600017ea:	str	r6, [r5, #0]
	endpoint_queue_head[1].config = (64 << 16);
600017ec:	str	r0, [r5, #64]	; 0x40
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
600017ee:	str.w	r5, [r4, #344]	; 0x158
600017f2:	str.w	r1, [r2, #516]	; 0x204
	//  Recommended: enable all device interrupts including: USBINT, USBERRINT,
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
600017f6:	str.w	r3, [r4, #328]	; 0x148
		USB_USBINTR_URE | USB_USBINTR_SLE;
	//_VectorsRam[IRQ_USB1+16] = &isr;
	attachInterruptVector(IRQ_USB1, &isr);
	NVIC_ENABLE_IRQ(IRQ_USB1);
600017fa:	ldr	r2, [pc, #52]	; (60001830 <usb_init+0xe8>)
600017fc:	mov.w	r1, #131072	; 0x20000
	//printf("USB1_ENDPTCTRL0=%08lX\n", USB1_ENDPTCTRL0);
	//printf("USB1_ENDPTCTRL1=%08lX\n", USB1_ENDPTCTRL1);
	//printf("USB1_ENDPTCTRL2=%08lX\n", USB1_ENDPTCTRL2);
	//printf("USB1_ENDPTCTRL3=%08lX\n", USB1_ENDPTCTRL3);
	USB1_USBCMD = USB_USBCMD_RS;
60001800:	movs	r3, #1
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
		USB_USBINTR_URE | USB_USBINTR_SLE;
	//_VectorsRam[IRQ_USB1+16] = &isr;
	attachInterruptVector(IRQ_USB1, &isr);
	NVIC_ENABLE_IRQ(IRQ_USB1);
60001802:	str	r1, [r2, #0]
	//printf("USB1_ENDPTCTRL0=%08lX\n", USB1_ENDPTCTRL0);
	//printf("USB1_ENDPTCTRL1=%08lX\n", USB1_ENDPTCTRL1);
	//printf("USB1_ENDPTCTRL2=%08lX\n", USB1_ENDPTCTRL2);
	//printf("USB1_ENDPTCTRL3=%08lX\n", USB1_ENDPTCTRL3);
	USB1_USBCMD = USB_USBCMD_RS;
60001804:	str.w	r3, [r4, #320]	; 0x140
60001808:	pop	{r4, r5, r6, pc}
6000180a:	nop
6000180c:	.word	0x400d8000
60001810:	.word	0x400fc000
60001814:	.word	0x402e0000
60001818:	.word	0x400d9000
6000181c:	.word	0x001e1c00
60001820:	.word	0xe000e28c
60001824:	.word	0x20046000
60001828:	.word	0x20046400
6000182c:	.word	0x0000e795
60001830:	.word	0xe000e10c

60001834 <configure_cache>:
#define SIZE_2G		(SCB_MPU_RASR_SIZE(30) | SCB_MPU_RASR_ENABLE)
#define SIZE_4G		(SCB_MPU_RASR_SIZE(31) | SCB_MPU_RASR_ENABLE)
#define REGION(n)	(SCB_MPU_RBAR_REGION(n) | SCB_MPU_RBAR_VALID)

FLASHMEM void configure_cache(void)
{
60001834:	push	{r4, r5, r6, r7, lr}
	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU

	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
60001836:	ldr	r2, [pc, #144]	; (600018c8 <configure_cache+0x94>)
	//printf("MPU_TYPE = %08lX\n", SCB_MPU_TYPE);
	//printf("CCR = %08lX\n", SCB_CCR);

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU
60001838:	movs	r0, #0

	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
6000183a:	ldr	r3, [pc, #144]	; (600018cc <configure_cache+0x98>)
	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU

	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
6000183c:	mov.w	ip, #16
	//printf("MPU_TYPE = %08lX\n", SCB_MPU_TYPE);
	//printf("CCR = %08lX\n", SCB_CCR);

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU
60001840:	ldr	r4, [pc, #140]	; (600018d0 <configure_cache+0x9c>)

	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
	
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
60001842:	movs	r6, #17

	SCB_MPU_CTRL = 0; // turn off MPU

	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
60001844:	ldr.w	lr, [pc, #200]	; 60001910 <configure_cache+0xdc>
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;

	// TODO: trap regions should be created last, because the hardware gives
	//  priority to the higher number ones.
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
60001848:	movs	r7, #18
	//printf("MPU_TYPE = %08lX\n", SCB_MPU_TYPE);
	//printf("CCR = %08lX\n", SCB_CCR);

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU
6000184a:	str	r0, [r4, #0]
	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;

	// TODO: protect access to power supply config

	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
6000184c:	movs	r5, #1
	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU

	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
6000184e:	str.w	ip, [r2]
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
60001852:	str.w	lr, [r3]
	
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
60001856:	str	r6, [r2, #0]
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;
60001858:	ldr.w	lr, [pc, #184]	; 60001914 <configure_cache+0xe0>

	// TODO: trap regions should be created last, because the hardware gives
	//  priority to the higher number ones.
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;
6000185c:	ldr	r6, [pc, #116]	; (600018d4 <configure_cache+0xa0>)
	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
	
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;
6000185e:	str.w	lr, [r3]
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
60001862:	ldr	r1, [pc, #116]	; (600018d8 <configure_cache+0xa4>)
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;

	// TODO: trap regions should be created last, because the hardware gives
	//  priority to the higher number ones.
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
60001864:	str	r7, [r2, #0]
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;
60001866:	str	r6, [r3, #0]
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
60001868:	orr.w	r1, r1, #21
	// TODO: trap regions should be created last, because the hardware gives
	//  priority to the higher number ones.
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;

	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
6000186c:	ldr	r7, [pc, #108]	; (600018dc <configure_cache+0xa8>)
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
6000186e:	ldr	r6, [pc, #112]	; (600018e0 <configure_cache+0xac>)
	// TODO: trap regions should be created last, because the hardware gives
	//  priority to the higher number ones.
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;

	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
60001870:	str	r7, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
60001872:	str	r6, [r3, #0]

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
60001874:	ldr	r7, [pc, #108]	; (600018e4 <configure_cache+0xb0>)
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
60001876:	ldr	r6, [pc, #112]	; (600018e8 <configure_cache+0xb4>)
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;

	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
60001878:	str	r7, [r2, #0]
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
6000187a:	str	r6, [r3, #0]
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;
6000187c:	ldr	r7, [pc, #108]	; (600018ec <configure_cache+0xb8>)
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
6000187e:	str	r1, [r2, #0]
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;

	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
60001880:	ldr	r6, [pc, #108]	; (600018f0 <configure_cache+0xbc>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
60001882:	ldr	r1, [pc, #112]	; (600018f4 <configure_cache+0xc0>)

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;
60001884:	str	r7, [r3, #0]

	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
60001886:	str	r6, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;

	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
60001888:	ldr	r7, [pc, #108]	; (600018f8 <configure_cache+0xc4>)
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;

	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
6000188a:	str	r1, [r3, #0]

	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
6000188c:	ldr	r6, [pc, #108]	; (600018fc <configure_cache+0xc8>)

	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
6000188e:	ldr	r1, [pc, #112]	; (60001900 <configure_cache+0xcc>)
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;

	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;

	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
60001890:	str	r7, [r2, #0]
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
60001892:	str	r6, [r3, #0]

	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
60001894:	ldr	r7, [pc, #108]	; (60001904 <configure_cache+0xd0>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;

	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;

	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
60001896:	str	r1, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;

	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
60001898:	ldr	r6, [pc, #108]	; (60001908 <configure_cache+0xd4>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;
6000189a:	ldr	r1, [pc, #112]	; (6000190c <configure_cache+0xd8>)

	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;

	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
6000189c:	str	r7, [r3, #0]

	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
6000189e:	str	r6, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;
600018a0:	str	r1, [r3, #0]

	// TODO: protect access to power supply config

	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
600018a2:	str	r5, [r4, #0]

	// cache enable, ARM DDI0403E, pg 628
	asm("dsb");
600018a4:	dsb	sy
	asm("isb");
600018a8:	isb	sy
	SCB_CACHE_ICIALLU = 0;
600018ac:	str.w	r0, [r3, #432]	; 0x1b0

	asm("dsb");
600018b0:	dsb	sy
	asm("isb");
600018b4:	isb	sy
	SCB_CCR |= (SCB_CCR_IC | SCB_CCR_DC);
600018b8:	ldr.w	r3, [r2, #-136]
600018bc:	orr.w	r3, r3, #196608	; 0x30000
600018c0:	str.w	r3, [r2, #-136]
600018c4:	pop	{r4, r5, r6, r7, pc}
600018c6:	nop
600018c8:	.word	0xe000ed9c
600018cc:	.word	0xe000eda0
600018d0:	.word	0xe000ed94
600018d4:	.word	0x00100009
600018d8:	.word	0x20046700
600018dc:	.word	0x00200013
600018e0:	.word	0x07020021
600018e4:	.word	0x20000014
600018e8:	.word	0x13080025
600018ec:	.word	0x10000009
600018f0:	.word	0x20200016
600018f4:	.word	0x130b0027
600018f8:	.word	0x40000017
600018fc:	.word	0x13100033
60001900:	.word	0x60000018
60001904:	.word	0x070b002f
60001908:	.word	0x70000019
6000190c:	.word	0x130b002f
60001910:	.word	0x1000003f
60001914:	.word	0x03080025

60001918 <usb_pll_start>:

#endif // ARDUINO_TEENSY41


FLASHMEM void usb_pll_start()
{
60001918:	push	{r4, r5, r6, r7}
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
6000191a:	ldr	r2, [pc, #92]	; (60001978 <usb_pll_start+0x60>)
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_EN_USB_CLKS)) {
			printf("  enable USB clocks\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
6000191c:	movs	r7, #64	; 0x40
			printf("  wait for lock\n");
			continue;
		}
		if (n & CCM_ANALOG_PLL_USB1_BYPASS) {
			printf("  turn off bypass\n");
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
6000191e:	mov.w	r1, #65536	; 0x10000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_POWER)) {
			printf("  power up PLL\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
60001922:	mov.w	r6, #4096	; 0x1000
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_ENABLE)) {
			printf("  enable PLL\n");
			// TODO: should this be done so early, or later??
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
60001926:	mov.w	r5, #8192	; 0x2000
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
		printf("CCM_ANALOG_PLL_USB1=%08lX\n", n);
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
			printf("  ERROR, 528 MHz mode!\n"); // never supposed to use this mode!
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
6000192a:	mov.w	r4, #49152	; 0xc000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_BYPASS;	// bypass
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
6000192e:	movw	r0, #12354	; 0x3042


FLASHMEM void usb_pll_start()
{
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
60001932:	ldr	r3, [r2, #16]
		printf("CCM_ANALOG_PLL_USB1=%08lX\n", n);
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
60001934:	tst.w	r3, #2
60001938:	beq.n	60001948 <usb_pll_start+0x30>
			printf("  ERROR, 528 MHz mode!\n"); // never supposed to use this mode!
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
6000193a:	str	r4, [r2, #24]
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_BYPASS;	// bypass
6000193c:	str	r1, [r2, #20]
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
6000193e:	str	r0, [r2, #24]


FLASHMEM void usb_pll_start()
{
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
60001940:	ldr	r3, [r2, #16]
		printf("CCM_ANALOG_PLL_USB1=%08lX\n", n);
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
60001942:	tst.w	r3, #2
60001946:	bne.n	6000193a <usb_pll_start+0x22>
				CCM_ANALOG_PLL_USB1_DIV_SELECT |		// use 480 MHz
				CCM_ANALOG_PLL_USB1_ENABLE |			// disable
				CCM_ANALOG_PLL_USB1_EN_USB_CLKS;		// disable usb
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_ENABLE)) {
60001948:	tst.w	r3, #8192	; 0x2000
6000194c:	bne.n	60001952 <usb_pll_start+0x3a>
			printf("  enable PLL\n");
			// TODO: should this be done so early, or later??
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
6000194e:	str	r5, [r2, #20]
			continue;
60001950:	b.n	60001932 <usb_pll_start+0x1a>
		}
		if (!(n & CCM_ANALOG_PLL_USB1_POWER)) {
60001952:	tst.w	r3, #4096	; 0x1000
60001956:	bne.n	6000195c <usb_pll_start+0x44>
			printf("  power up PLL\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
60001958:	str	r6, [r2, #20]
			continue;
6000195a:	b.n	60001932 <usb_pll_start+0x1a>
		}
		if (!(n & CCM_ANALOG_PLL_USB1_LOCK)) {
6000195c:	cmp	r3, #0
6000195e:	bge.n	60001932 <usb_pll_start+0x1a>
			printf("  wait for lock\n");
			continue;
		}
		if (n & CCM_ANALOG_PLL_USB1_BYPASS) {
60001960:	tst.w	r3, #65536	; 0x10000
60001964:	beq.n	6000196a <usb_pll_start+0x52>
			printf("  turn off bypass\n");
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
60001966:	str	r1, [r2, #24]
			continue;
60001968:	b.n	60001932 <usb_pll_start+0x1a>
		}
		if (!(n & CCM_ANALOG_PLL_USB1_EN_USB_CLKS)) {
6000196a:	lsls	r3, r3, #25
6000196c:	bmi.n	60001972 <usb_pll_start+0x5a>
			printf("  enable USB clocks\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
6000196e:	str	r7, [r2, #20]
			continue;
60001970:	b.n	60001932 <usb_pll_start+0x1a>
		}
		return; // everything is as it should be  :-)
	}
}
60001972:	pop	{r4, r5, r6, r7}
60001974:	bx	lr
60001976:	nop
60001978:	.word	0x400d8000

6000197c <tempmon_init>:
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
6000197c:	ldr	r2, [pc, #236]	; (60001a6c <tempmon_init+0xf0>)
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
6000197e:	vmov.f32	s13, #57	; 0x41c80000  25.0

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
60001982:	ldr	r1, [pc, #236]	; (60001a70 <tempmon_init+0xf4>)
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring

  //PANIC shutdown:
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60001984:	movs	r0, #0
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001986:	ldr	r3, [r2, #0]
  asm volatile ("dsb":::"memory");
  while (1) asm ("wfi");
}

FLASHMEM void tempmon_init(void)
{
60001988:	push	{r4, r5, r6, r7, lr}
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
6000198a:	bic.w	r3, r3, #1

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
6000198e:	movs	r4, #3
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60001990:	ldr.w	lr, [pc, #256]	; 60001a94 <tempmon_init+0x118>
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001994:	str	r3, [r2, #0]

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
60001996:	str.w	r4, [r2, #144]	; 0x90
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
6000199a:	ldr.w	r3, [r1, #224]	; 0xe0
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;
6000199e:	ldr	r7, [pc, #212]	; (60001a74 <tempmon_init+0xf8>)
  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
600019a0:	uxtb	r5, r3
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
600019a2:	ubfx	r4, r3, #8, #12
600019a6:	ldr	r6, [pc, #208]	; (60001a78 <tempmon_init+0xfc>)
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;
600019a8:	rsb	r3, r4, r3, lsr #20
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
600019ac:	vmov	s15, r5
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600019b0:	sub.w	r1, r5, #85	; 0x55
  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
600019b4:	str.w	r5, [lr]
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
600019b8:	vcvt.f32.s32	s14, s15
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600019bc:	add.w	r5, r3, r3, lsl #2
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600019c0:	vmov	s15, r4
600019c4:	mul.w	r1, r3, r1
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;
600019c8:	str	r3, [r7, #0]
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
600019ca:	add.w	r3, r3, r3, lsl #6
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600019ce:	vcvt.f32.s32	s10, s15
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
600019d2:	vmov	s15, r1
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600019d6:	subs	r1, r1, r5
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
600019d8:	vsub.f32	s13, s14, s13
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
600019dc:	vcvt.f32.u32	s14, s15
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
600019e0:	ldr	r5, [pc, #152]	; (60001a7c <tempmon_init+0x100>)
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
600019e2:	vmov	s15, r1
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
600019e6:	add	r3, r1
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
600019e8:	vstr	s13, [r5]
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
600019ec:	vcvt.f32.u32	s15, s15
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
600019f0:	str	r4, [r6, #0]
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
600019f2:	vdiv.f32	s11, s14, s13
600019f6:	ldr	r6, [pc, #136]	; (60001a80 <tempmon_init+0x104>)
600019f8:	ldr	r5, [r2, #0]
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
600019fa:	ldr	r1, [pc, #136]	; (60001a84 <tempmon_init+0x108>)
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring

  //PANIC shutdown:
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
600019fc:	ldr	r4, [pc, #136]	; (60001a88 <tempmon_init+0x10c>)
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
600019fe:	vdiv.f32	s12, s15, s13
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001a02:	vmov	s15, r3
60001a06:	ldr	r3, [pc, #132]	; (60001a8c <tempmon_init+0x110>)
60001a08:	str.w	r3, [r6, #320]	; 0x140
60001a0c:	vcvt.f32.u32	s15, s15
60001a10:	vdiv.f32	s14, s15, s13
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001a14:	vadd.f32	s11, s11, s10
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001a18:	vadd.f32	s13, s12, s10
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001a1c:	vcvt.u32.f32	s11, s11
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001a20:	vcvt.u32.f32	s13, s13
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001a24:	vmov	r3, s11
60001a28:	orr.w	r3, r5, r3, lsl #20
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001a2c:	vmov	r5, s13
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001a30:	vadd.f32	s15, s14, s10
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001a34:	str	r3, [r2, #0]
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001a36:	and.w	r1, r1, r5, lsl #16
60001a3a:	ldr.w	r3, [r2, #272]	; 0x110
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001a3e:	vcvt.u32.f32	s15, s15
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001a42:	orrs	r3, r1
60001a44:	str.w	r3, [r2, #272]	; 0x110
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001a48:	vmov	r3, s15
60001a4c:	ldr.w	r1, [r2, #272]	; 0x110
60001a50:	ubfx	r3, r3, #0, #12
60001a54:	orrs	r3, r1
60001a56:	str.w	r3, [r2, #272]	; 0x110
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring
60001a5a:	ldr	r3, [r2, #0]
60001a5c:	orr.w	r3, r3, #2
60001a60:	str	r3, [r2, #0]

  //PANIC shutdown:
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60001a62:	strb	r0, [r4, #0]
  attachInterruptVector(IRQ_TEMPERATURE_PANIC, &Panic_Temp_isr);
  NVIC_ENABLE_IRQ(IRQ_TEMPERATURE_PANIC);
60001a64:	ldr	r3, [pc, #40]	; (60001a90 <tempmon_init+0x114>)
60001a66:	movs	r2, #1
60001a68:	str	r2, [r3, #0]
60001a6a:	pop	{r4, r5, r6, r7, pc}
60001a6c:	.word	0x400d8180
60001a70:	.word	0x401f4400
60001a74:	.word	0x200447b0
60001a78:	.word	0x200447b4
60001a7c:	.word	0x200447ac
60001a80:	.word	0x20046400
60001a84:	.word	0x0fff0000
60001a88:	.word	0xe000e440
60001a8c:	.word	0x0000f555
60001a90:	.word	0xe000e108
60001a94:	.word	0x200447a8

60001a98 <analog_init>:
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001a98:	ldr	r3, [pc, #68]	; (60001ae0 <analog_init+0x48>)
	} else {
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
60001a9a:	ldr	r1, [pc, #72]	; (60001ae4 <analog_init+0x4c>)
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001a9c:	ldr	r0, [r3, #108]	; 0x6c
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) ;
60001a9e:	mov	r2, r1
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001aa0:	orr.w	r0, r0, #196608	; 0x30000
}

#define MAX_ADC_CLOCK 20000000

FLASHMEM void analog_init(void)
{
60001aa4:	push	{r4, r5}
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001aa6:	str	r0, [r3, #108]	; 0x6c
	} else {
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
60001aa8:	movw	r5, #1591	; 0x637
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
	CCM_CCGR1 |= CCM_CCGR1_ADC2(CCM_CCGR_ON);
60001aac:	ldr	r0, [r3, #108]	; 0x6c
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
60001aae:	movs	r4, #160	; 0xa0
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
	CCM_CCGR1 |= CCM_CCGR1_ADC2(CCM_CCGR_ON);
60001ab0:	orr.w	r0, r0, #768	; 0x300
60001ab4:	str	r0, [r3, #108]	; 0x6c
	} else {
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
60001ab6:	str	r5, [r1, #68]	; 0x44
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
60001ab8:	str	r4, [r1, #72]	; 0x48
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) ;
60001aba:	ldr	r3, [r2, #72]	; 0x48
60001abc:	lsls	r3, r3, #24
60001abe:	bmi.n	60001aba <analog_init+0x22>
	calibrating = 0;
	//ADC2
	ADC2_CFG = mode | ADC_CFG_ADHSC;
60001ac0:	ldr	r3, [pc, #36]	; (60001ae8 <analog_init+0x50>)
60001ac2:	movw	r0, #1591	; 0x637
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
60001ac6:	movs	r1, #160	; 0xa0
	calibrating = 1;
	while (ADC2_GC & ADC_GC_CAL) ;
60001ac8:	mov	r2, r3
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) ;
	calibrating = 0;
	//ADC2
	ADC2_CFG = mode | ADC_CFG_ADHSC;
60001aca:	str	r0, [r3, #68]	; 0x44
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
60001acc:	str	r1, [r3, #72]	; 0x48
	calibrating = 1;
	while (ADC2_GC & ADC_GC_CAL) ;
60001ace:	ldr	r3, [r2, #72]	; 0x48
60001ad0:	ands.w	r3, r3, #128	; 0x80
60001ad4:	bne.n	60001ace <analog_init+0x36>
	calibrating = 0;
60001ad6:	ldr	r2, [pc, #20]	; (60001aec <analog_init+0x54>)
60001ad8:	strb	r3, [r2, #0]
}
60001ada:	pop	{r4, r5}
60001adc:	bx	lr
60001ade:	nop
60001ae0:	.word	0x400fc000
60001ae4:	.word	0x400c4000
60001ae8:	.word	0x400c8000
60001aec:	.word	0x20044915

60001af0 <_init>:
60001af0:	push	{r3, r4, r5, r6, r7, lr}
60001af2:	nop
60001af4:	pop	{r3, r4, r5, r6, r7}
60001af6:	pop	{r3}
60001af8:	mov	lr, r3
60001afa:	bx	lr
60001afc:	movs	r0, r0
	...

60001b00 <__memset_veneer>:
60001b00:	ldr.w	pc, [pc]	; 60001b04 <__memset_veneer+0x4>
60001b04:	.word	0x00010bfd

60001b08 <__startup_late_hook_veneer>:
60001b08:	ldr.w	pc, [pc]	; 60001b0c <__startup_late_hook_veneer+0x4>
60001b0c:	.word	0x0000f0c1

60001b10 <__main_veneer>:
60001b10:	ldr.w	pc, [pc]	; 60001b14 <__main_veneer+0x4>
60001b14:	.word	0x00010055

60001b18 <__pwm_init_veneer>:
60001b18:	ldr.w	pc, [pc]	; 60001b1c <__pwm_init_veneer+0x4>
60001b1c:	.word	0x0000f651

60001b20 <__startup_early_hook_veneer>:
60001b20:	ldr.w	pc, [pc]	; 60001b24 <__startup_early_hook_veneer+0x4>
60001b24:	.word	0x0000f0bd

60001b28 <__delay_veneer>:
60001b28:	ldr.w	pc, [pc]	; 60001b2c <__delay_veneer+0x4>
60001b2c:	.word	0x0000ef75

60001b30 <____libc_init_array_veneer>:
60001b30:	ldr.w	pc, [pc]	; 60001b34 <____libc_init_array_veneer+0x4>
60001b34:	.word	0x00010419

60001b38 <__usb_init_serialnumber_veneer>:
60001b38:	ldr.w	pc, [pc]	; 60001b3c <__usb_init_serialnumber_veneer+0x4>
60001b3c:	.word	0x0000fbf1

60001b40 <__set_arm_clock_veneer>:
60001b40:	ldr.w	pc, [pc]	; 60001b44 <__set_arm_clock_veneer+0x4>
60001b44:	.word	0x0000e389

60001b48 <__init_array_start>:
60001b48:	.word	0x00000045
60001b4c:	.word	0x00001759
60001b50:	.word	0x000082d1
60001b54:	.word	0x000082e9
60001b58:	.word	0x00008301
60001b5c:	.word	0x00008319
60001b60:	.word	0x00008331
60001b64:	.word	0x00008349
60001b68:	.word	0x00008361
60001b6c:	.word	0x00008781
60001b70:	.word	0x00008799
60001b74:	.word	0x000087b1
60001b78:	.word	0x000087c9
60001b7c:	.word	0x000087e1
60001b80:	.word	0x000087f9
60001b84:	.word	0x00008811
60001b88:	.word	0x00008829
60001b8c:	.word	0x00008841
60001b90:	.word	0x00008859
60001b94:	.word	0x00008871
60001b98:	.word	0x00008889
60001b9c:	.word	0x000088a1
60001ba0:	.word	0x000088b9
60001ba4:	.word	0x000088d1
60001ba8:	.word	0x000088e9
60001bac:	.word	0x00008901
60001bb0:	.word	0x00008919
60001bb4:	.word	0x0000daa9

Disassembly of section .text.itcm:

00000000 <_stext>:
	...

00000020 <__do_global_dtors_aux>:
#include "FatVolume.h"
FatVolume* FatVolume::m_cwv = nullptr;
//------------------------------------------------------------------------------
bool FatVolume::chdir(const char *path) {
  FatFile dir;
  if (!dir.open(vwd(), path, O_RDONLY)) {
      20:	.word	0x4c05b510
      24:	ldrb	r3, [r4, #0]
    goto fail;
  }
  if (!dir.isDir()) {
      26:	.short	0xb933
      28:	ldr	r3, [pc, #16]	; (3c <_teensy_model_identifier+0x18>)
      2a:	cbz	r3, 32 <_teensy_model_identifier+0xe>
      2c:	ldr	r0, [pc, #16]	; (40 <_teensy_model_identifier+0x1c>)
      2e:	nop.w
    goto fail;
  }
  m_vwd = dir;
      32:	movs	r3, #1
      34:	strb	r3, [r4, #0]
      36:	pop	{r4, pc}
      38:	.word	0x20001618
      3c:	movs	r0, r0
  return true;

 fail:
  return false;
}
      3e:	movs	r0, r0
      40:	orrs	r4, r4
      42:	movs	r1, r0

00000044 <frame_dummy>:
  }
  m_vwd = dir;
  return true;

 fail:
  return false;
      44:	ldr	r3, [pc, #32]	; (68 <frame_dummy+0x24>)
}
      46:	push	{r4, lr}
      48:	cbz	r3, 52 <frame_dummy+0xe>
      4a:	ldr	r1, [pc, #32]	; (6c <frame_dummy+0x28>)
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    /* Calculate temperature */
    tmeas = s_hotTemp - (float)((nmeas - s_hotCount) * s_hot_ROOM / s_roomC_hotC);

    return tmeas;
}
      4c:	.word	0xf3af4808
      50:	strh	r0, [r0, #0]
      52:	.short	0x4808
      54:	ldr	r3, [r0, #0]
      56:	.short	0xb903
      58:	pop	{r4, pc}
      5a:	.short	0x4b07
  }
  m_vwd = dir;
  return true;

 fail:
  return false;
      5c:	cmp	r3, #0
}
      5e:	.short	0xd0fb
      60:	ldmia.w	sp!, {r4, lr}
{
	if (mult < 1 || mult > 3) return;
	uint32_t config = (packet_size << 16) | (mult << 30);
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
      64:	.word	0xbf004718
	if ((hardware.clock_gate_register & hardware.clock_gate_mask)) {
		*(portConfigRegister(hardware.scl_pins[scl_pin_index_].pin)) = 5;	// hard to know what to go back to?

		// setup new one...
		*(portControlRegister(hardware.scl_pins[newindex].pin)) |= IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3);
		*(portConfigRegister(hardware.scl_pins[newindex].pin)) = hardware.scl_pins[newindex].mux_val;
      68:	movs	r0, r0
      6a:	.short	0x0000
		if (hardware.scl_pins[newindex].select_input_register) {
      6c:	asrs	r4, r3, #24
      6e:	.short	0x2000
			*(hardware.scl_pins[newindex].select_input_register) =  hardware.scl_pins[newindex].select_val;
      70:	orrs	r4, r4
      72:	movs	r1, r0
		}
	}
	scl_pin_index_ = newindex;
      74:	.word	0x20001618
}
      78:	movs	r0, r0
	...

0000007c <Print::availableForWrite()>:
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
	virtual size_t write(const uint8_t *buffer, size_t size);
	virtual int availableForWrite(void)		{ return 0; }
      7c:	.word	0x47702000

00000080 <Print::flush()>:
	virtual void flush()				{ }
      80:	bx	lr
	if (pin == hardware.scl_pins[scl_pin_index_].pin) return;
	uint32_t newindex=0;
	while (1) {
		uint32_t scl_pin = hardware.scl_pins[newindex].pin;
		if (scl_pin == 255) return;
		if (scl_pin == pin) break;
      82:	nop

00000084 <SdCardInterface::status()>:
   * \return The number of 512 byte data sectors in the card
   *         or zero if an error occurs.
   */
  virtual uint32_t sectorCount() = 0;
  /** \return card status. */
  virtual uint32_t status() {return 0XFFFFFFFF;}
      84:	.word	0x30fff04f
      88:	bx	lr
    } else {
      sign = '+';
      tz &= 0X7F;
    }
    if (tz) {
      str = fsFmtField(str, 15*(tz%4), 0);
      8a:	nop

0000008c <File::read(void*, unsigned int)>:
	unsigned int getRefcount() { // testing only
		return refcount;
	}
#endif
	virtual size_t read(void *buf, size_t nbyte) {
		return (f) ? f->read(buf, nbyte) : 0;
      8c:	.word	0xb1106900
      90:	ldr	r3, [r0, #0]
      92:	.short	0x6a9b
      94:	bx	r3
	}
      96:	.short	0x4770

00000098 <File::write(void const*, unsigned int)>:
	virtual size_t write(const void *buf, size_t size) {
		return (f) ? f->write(buf, size) : 0;
      98:	ldr	r0, [r0, #16]
      9a:	.short	0xb110
      9c:	ldr	r3, [r0, #0]
      9e:	.short	0x6adb
      a0:	bx	r3
	}
      a2:	.short	0x4770

000000a4 <File::available()>:
	virtual int available() {
		return (f) ? f->available() : 0;
      a4:	ldr	r0, [r0, #16]
      a6:	.short	0xb110
      a8:	ldr	r3, [r0, #0]
      aa:	ldr	r3, [r3, #16]
      ac:	bx	r3
	}
      ae:	bx	lr

000000b0 <File::peek()>:
	virtual int peek() {
		return (f) ? f->peek() : -1;
      b0:	ldr	r0, [r0, #16]
      b2:	cbz	r0, ba <File::peek()+0xa>
      b4:	.word	0x699b6803
      b8:	bx	r3
	}
      ba:	.short	0xf04f
      bc:	adds	r0, #255	; 0xff
      be:	bx	lr

000000c0 <File::flush()>:
	virtual void flush() {
		if (f) f->flush();
      c0:	.word	0xb1106900
      c4:	ldr	r3, [r0, #0]
      c6:	ldr	r3, [r3, #12]
      c8:	bx	r3
      ca:	bx	lr

000000cc <File::truncate(unsigned long long)>:
	}
	virtual bool truncate(uint64_t size=0) {
		return (f) ? f->truncate(size) : false;
      cc:	ldr	r0, [r0, #16]
      ce:	cbz	r0, d6 <File::truncate(unsigned long long)+0xa>
      d0:	ldr	r1, [r0, #0]
      d2:	ldr	r1, [r1, #48]	; 0x30
      d4:	.word	0x47704708

000000d8 <File::seek(unsigned long long, int)>:
	}
	virtual bool seek(uint64_t pos, int mode) {
      d8:	push	{r4}
		return (f) ? f->seek(pos, mode) : false;
      da:	.short	0x6900
      dc:	cbz	r0, e8 <File::seek(unsigned long long, int)+0x10>
      de:	.short	0x6804
      e0:	ldr	r1, [r4, #52]	; 0x34
	}
      e2:	.short	0xf85d
      e4:	ldr	r3, [pc, #16]	; (f8 <File::position()+0x8>)
	}
	virtual bool truncate(uint64_t size=0) {
		return (f) ? f->truncate(size) : false;
	}
	virtual bool seek(uint64_t pos, int mode) {
		return (f) ? f->seek(pos, mode) : false;
      e6:	.short	0x4708
	}
      e8:	ldr.w	r4, [sp], #4
      ec:	.word	0xbf004770

000000f0 <File::position()>:
	virtual uint64_t position() {
		return (f) ? f->position() : 0;
      f0:	ldr	r0, [r0, #16]
      f2:	cbz	r0, fa <File::position()+0xa>
      f4:	ldr	r3, [r0, #0]
      f6:	ldr	r3, [r3, #56]	; 0x38
      f8:	bx	r3
	}
      fa:	movs	r0, #0
      fc:	movs	r1, #0
      fe:	bx	lr

00000100 <File::size()>:
	virtual uint64_t size() {
		return (f) ? f->size() : 0;
     100:	ldr	r0, [r0, #16]
     102:	cbz	r0, 10a <File::size()+0xa>
     104:	ldr	r3, [r0, #0]
     106:	ldr	r3, [r3, #60]	; 0x3c
     108:	bx	r3
	}
     10a:	movs	r0, #0
     10c:	movs	r1, #0
     10e:	.short	0x4770

00000110 <File::close()>:
	virtual void close() {
		if (f) f->close();
     110:	ldr	r0, [r0, #16]
     112:	cbz	r0, 11a <File::close()+0xa>
     114:	ldr	r3, [r0, #0]
     116:	ldr	r3, [r3, #64]	; 0x40
     118:	bx	r3
     11a:	bx	lr

0000011c <File::operator bool()>:
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
     11c:	ldr	r0, [r0, #16]
     11e:	cbz	r0, 126 <File::operator bool()+0xa>
     120:	ldr	r3, [r0, #0]
     122:	ldr	r3, [r3, #68]	; 0x44
     124:	.word	0x47704718

00000128 <File::name()>:
	}
	virtual const char* name() {
		return (f) ? f->name() : "";
     128:	ldr	r0, [r0, #16]
     12a:	.short	0xb110
     12c:	ldr	r3, [r0, #0]
     12e:	.short	0x6c9b
     130:	bx	r3
	}
     132:	ldr	r0, [pc, #4]	; (138 <File::name()+0x10>)
     134:	.word	0xbf004770
     138:	lsls	r0, r5, #8
     13a:	.short	0x2000

0000013c <File::isDirectory()>:
	virtual bool isDirectory() {
		return (f) ? f->isDirectory() : false;
     13c:	ldr	r0, [r0, #16]
     13e:	.short	0xb110
     140:	ldr	r3, [r0, #0]
     142:	.short	0x6cdb
     144:	bx	r3
	}
     146:	.short	0x4770

00000148 <File::openNextFile(unsigned char)>:
	virtual File openNextFile(uint8_t mode=0) {
     148:	push	{r3, r4, r5, lr}
		return (f) ? f->openNextFile(mode) : *this;
     14a:	.short	0x690b
		return (f) ? f->name() : "";
	}
	virtual bool isDirectory() {
		return (f) ? f->isDirectory() : false;
	}
	virtual File openNextFile(uint8_t mode=0) {
     14c:	mov	r4, r0
		return (f) ? f->openNextFile(mode) : *this;
     14e:	.short	0xb12b
     150:	ldr	r5, [r3, #0]
     152:	.short	0x4619
     154:	ldr	r3, [r5, #80]	; 0x50
     156:	.short	0x4798
	}
     158:	mov	r0, r4
     15a:	.short	0xbd38
#include "Print.h"

class Stream : public Print
{
  public:
	constexpr Stream() : _timeout(1000), read_error(0) {}
     15c:	mov.w	r0, #1000	; 0x3e8
			//"File(File *file) constructor only accepts pointers "
			//"to derived classes, not File itself");
		f = file;
		if (f) f->refcount++;
	}
	File(const File &file) {
     160:	.word	0x71234a06
     164:	strb	r3, [r4, #12]
     166:	.short	0x60a0
     168:	str	r2, [r4, #0]
		//Serial.println("File copy constructor");
		//static int copycount=0;
		//if (++copycount > 20) while (1) ;
		f = file.f;
     16a:	ldr	r3, [r1, #16]
     16c:	.word	0x2b006123
		if (f) f->refcount++;
     170:	beq.n	158 <File::openNextFile(unsigned char)+0x10>
     172:	.short	0x691a
	virtual bool isDirectory() {
		return (f) ? f->isDirectory() : false;
	}
	virtual File openNextFile(uint8_t mode=0) {
		return (f) ? f->openNextFile(mode) : *this;
	}
     174:	mov	r0, r4
	File(const File &file) {
		//Serial.println("File copy constructor");
		//static int copycount=0;
		//if (++copycount > 20) while (1) ;
		f = file.f;
		if (f) f->refcount++;
     176:	.short	0x3201
     178:	str	r2, [r3, #16]
	virtual bool isDirectory() {
		return (f) ? f->isDirectory() : false;
	}
	virtual File openNextFile(uint8_t mode=0) {
		return (f) ? f->openNextFile(mode) : *this;
	}
     17a:	pop	{r3, r4, r5, pc}
     17c:	.word	0x20000074

00000180 <File::rewindDirectory()>:
	virtual void rewindDirectory(void) {
		if (f) f->rewindDirectory();
     180:	ldr	r0, [r0, #16]
     182:	cbz	r0, 18a <File::rewindDirectory()+0xa>
     184:	.word	0x6d5b6803
     188:	bx	r3
     18a:	.short	0x4770

0000018c <File::read()>:
	}
	bool seek(uint64_t pos) {
		return seek(pos, SeekSet);
	}
	int read() {
		if (!f) return -1;
     18c:	ldr	r0, [r0, #16]
     18e:	cbz	r0, 1b2 <File::read()+0x26>
		unsigned char b;
		if (f->read(&b, 1) < 1) return -1;
     190:	ldr	r3, [r0, #0]
     192:	movs	r2, #1
		if (f) f->rewindDirectory();
	}
	bool seek(uint64_t pos) {
		return seek(pos, SeekSet);
	}
	int read() {
     194:	.word	0xb083b500
		if (!f) return -1;
		unsigned char b;
		if (f->read(&b, 1) < 1) return -1;
     198:	ldr	r3, [r3, #40]	; 0x28
     19a:	.short	0xf10d
     19c:	lsls	r7, r0, #4
     19e:	.short	0x4798
     1a0:	cbz	r0, 1ac <File::read()+0x20>
		return b;
     1a2:	.short	0xf89d
     1a4:	movs	r7, r0
	}
     1a6:	.short	0xb003
     1a8:	ldr.w	pc, [sp], #4
	}
	bool seek(uint64_t pos) {
		return seek(pos, SeekSet);
	}
	int read() {
		if (!f) return -1;
     1ac:	mov.w	r0, #4294967295
     1b0:	.word	0xf04fe7f9
     1b4:	adds	r0, #255	; 0xff
		unsigned char b;
		if (f->read(&b, 1) < 1) return -1;
		return b;
	}
     1b6:	.short	0x4770

000001b8 <File::write(unsigned char)>:
	size_t write(uint8_t b) {
     1b8:	push	{r4, lr}
     1ba:	.short	0xb082
		return write(&b, 1);
     1bc:	ldr	r4, [r0, #0]
     1be:	.short	0x2201
		if (!f) return -1;
		unsigned char b;
		if (f->read(&b, 1) < 1) return -1;
		return b;
	}
	size_t write(uint8_t b) {
     1c0:	add	r3, sp, #8
     1c2:	.short	0xf803
     1c4:	adds	r1, r0, #4
		return write(&b, 1);
     1c6:	.short	0x4619
     1c8:	ldr	r3, [r4, #44]	; 0x2c
     1ca:	blx	r3
	}
     1cc:	.word	0xbd10b002

000001d0 <SDFile::operator bool()>:
  bool isHidden() const {
    return m_fFile ? m_fFile->isHidden() :
           m_xFile ? m_xFile->isHidden() : false;
  }
  /** \return True if this is an open file/directory else false. */
  bool isOpen() const {return m_fFile || m_xFile;}
     1d0:	ldr	r3, [r0, #92]	; 0x5c
     1d2:	.short	0xb10b
     1d4:	movs	r0, #1
		}
		sdfatfile.close();
	}
	virtual operator bool() {
		return sdfatfile.isOpen();
	}
     1d6:	.short	0x4770
     1d8:	ldr	r0, [r0, #96]	; 0x60
     1da:	.short	0x3000
     1dc:	it	ne
     1de:	.short	0x2001
     1e0:	bx	lr	; unpredictable branch in IT block

	// lets configure up our CTRL register value
	uint32_t ctrl = CTRL_TX_INACTIVE;

	// Now process the bits in the Format value passed in
	// Bits 0-2 - Parity plus 9  bit. 
	ctrl |= (format & (LPUART_CTRL_PT | LPUART_CTRL_PE) );	// configure parity - turn off PT, PE, M and configure PT, PE
     1e2:	.short	0xbf00

000001e4 <__tcf_0>:
  return state;
}

/************ Basic File System Interface *************************/
#include "SD.h"
extern SDClass sdx[];
     1e4:	bx	lr	; unpredictable branch in IT block

	if (format & 0x04) ctrl |= LPUART_CTRL_M;		// 9 bits (might include parity)
	if ((format & 0x0F) == 0x04) ctrl |=  LPUART_CTRL_R9T8; // 8N2 is 9 bit with 9th bit always 1
     1e6:	nopne

000001e8 <File::whoami()>:
	}
	virtual ~File() {
		invalidate();
	}
#ifdef FILE_WHOAMI
	virtual void whoami() { // testing only
     1e8:	.word	0x4604b510
		Serial.printf("  File    this=%x, f=%x\n", (int)this, (int)f);
     1ec:	ldr	r1, [pc, #24]	; (208 <File::whoami()+0x20>)
     1ee:	.short	0x4807
     1f0:	ldr	r3, [r4, #16]
     1f2:	.short	0x4622
     1f4:	bl	ff78 <Print::printf(char const*, ...)>
		if (f) f->whoami();
     1f8:	.word	0xb1206920
     1fc:	ldr	r3, [r0, #0]
	}
     1fe:	.short	0xe8bd
     200:	ands	r0, r2
		invalidate();
	}
#ifdef FILE_WHOAMI
	virtual void whoami() { // testing only
		Serial.printf("  File    this=%x, f=%x\n", (int)this, (int)f);
		if (f) f->whoami();
     202:	ldr	r3, [r3, #36]	; 0x24
     204:	.word	0xbd104718
     208:	lsls	r4, r2, #5
     20a:	.short	0x2000
     20c:	lsrs	r0, r4, #17
     20e:	.short	0x2000

00000210 <SDFile::whoami()>:
	virtual ~SDFile(void) {
		if (sdfatfile) sdfatfile.close();
		if (filename) free(filename);
	}
#ifdef FILE_WHOAMI
	virtual void whoami() {
     210:	mov	r2, r0
		Serial.printf("   SDFile this=%x, refcount=%u\n",
			(int)this, getRefcount());
     212:	.short	0x4902
     214:	ldr	r0, [pc, #8]	; (220 <SDFile::whoami()+0x10>)
     216:	ldr	r3, [r2, #16]
     218:	.word	0xbeaef00f
     21c:	lsls	r0, r6, #5
     21e:	movs	r0, #0
     220:	lsrs	r0, r4, #17
     222:	movs	r0, #0

00000224 <SDFile::close()>:
		return sdfatfile.curPosition();
	}
	virtual uint64_t size() {
		return sdfatfile.size();
	}
	virtual void close() {
     224:	push	{r4, lr}
     226:	mov	r4, r0
		if (filename) {
     228:	ldr	r0, [r0, #100]	; 0x64
     22a:	cbz	r0, 234 <SDFile::close()+0x10>
			free(filename);
     22c:	.word	0xf924f010
			filename = nullptr;
     230:	movs	r3, #0
     232:	.short	0x6663
		}
		sdfatfile.close();
     234:	add.w	r0, r4, #36	; 0x24
	}
     238:	.word	0x4010e8bd
	virtual void close() {
		if (filename) {
			free(filename);
			filename = nullptr;
		}
		sdfatfile.close();
     23c:	b.w	c298 <FsBaseFile::close()>

00000240 <SDFile::openNextFile(unsigned char)>:
		return filename;
	}
	virtual boolean isDirectory(void) {
		return sdfatfile.isDirectory();
	}
	virtual File openNextFile(uint8_t mode=0) {
     240:	.word	0x41f0e92d
class __FlashStringHelper;

class Print
{
  public:
	constexpr Print() : write_error(0) {}
     244:	movs	r3, #0
     246:	.short	0xb094
     248:	mov.w	r4, #1000	; 0x3e8
};
/**
 * \class FsFile
 * \brief FsBaseFile file with Arduino Stream.
 */
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
     24c:	.word	0x461a4f26
     250:	mov	r5, r0
   * \param[in] oflag open flags.
   * \return a FatStream object.
   */
  FsFile openNextFile(oflag_t oflag = O_RDONLY) {
    FsFile tmpFile;
    tmpFile.openNext(this, oflag);
     252:	.short	0x3124
     254:	add	r0, sp, #16
     256:	.short	0xf88d
     258:	adds	r0, #4
     25a:	.short	0xf88d
     25c:	adds	r0, #12
 * \brief FsBaseFile class.
 */
class FsBaseFile {
 public:
  /** Create an instance. */
  FsBaseFile() {}
     25e:	.short	0x9312
     260:	str	r3, [sp, #76]	; 0x4c
     262:	.short	0x9402
};
/**
 * \class FsFile
 * \brief FsBaseFile file with Arduino Stream.
 */
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
     264:	str	r7, [sp, #0]
   * \param[in] oflag open flags.
   * \return a FatStream object.
   */
  FsFile openNextFile(oflag_t oflag = O_RDONLY) {
    FsFile tmpFile;
    tmpFile.openNext(this, oflag);
     266:	.short	0xf00c
     268:	str??.w	r9, [fp], #18
  bool isHidden() const {
    return m_fFile ? m_fFile->isHidden() :
           m_xFile ? m_xFile->isHidden() : false;
  }
  /** \return True if this is an open file/directory else false. */
  bool isOpen() const {return m_fFile || m_xFile;}
     26c:	.word	0xd0312b00
		SDFAT_FILE file = sdfatfile.openNextFile();
		if (file) return File(new SDFile(file));
     270:	movs	r0, #104	; 0x68
     272:	.short	0x2600
     274:	bl	10068 <operator new(unsigned int)>
//#define BYTE 0
//#endif

class __FlashStringHelper;

class Print
     278:	.word	0x3004f89d
     27c:	mov	r4, r0
	// Classes derived from File are never meant to be constructed
	// anywhere other than open() in the parent FS class and
	// openNextFile() while traversing a directory.
	// Only the abstract File class which references these derived
	// classes is meant to have a public constructor!
	SDFile(const SDFAT_FILE &file) : sdfatfile(file), filename(nullptr) { }
     27e:	.short	0x4a1b
     280:	mov.w	r8, #1000	; 0x3e8
/**
 * \class StreamFile
 * \brief StreamFile class.
 */
template<class BaseFile, typename PosType>
class StreamFile : public stream_t, public BaseFile {
     284:	.word	0x76233024
     288:	add	r1, sp, #16
#define Stream_h

#include <inttypes.h>
#include "Print.h"

class Stream : public Print
     28a:	.short	0x9b02
     28c:	str	r2, [r4, #0]
     28e:	.short	0x61e3
     290:	ldr	r2, [pc, #92]	; (2f0 <SDFile::openNextFile(unsigned char)+0xb0>)
     292:	.short	0xf89d
     294:	adds	r0, #12
     296:	.short	0x6162
     298:	strb.w	r3, [r4, #32]
{
  public:
	constexpr Print() : write_error(0) {}
     29c:	.word	0x73267126

#define FILE_WHOAMI

class File : public Stream {
public:
	constexpr File() : f(nullptr) { }
     2a0:	str	r6, [r4, #16]
{
  public:
	constexpr Stream() : _timeout(1000), read_error(0) {}
     2a2:	.short	0xf8c4
     2a4:	strh	r0, [r1, #0]
     2a6:	.short	0xf00b
     2a8:	vtbl.8	d6, {d5-d6}, d19
	File(File *file) {
     2ac:	ldr	r2, [pc, #68]	; (2f4 <SDFile::openNextFile(unsigned char)+0xb4>)
		// or is_base_of
		//static_assert(std::is_same<decltype(*file),File>::value,
			//"File(File *file) constructor only accepts pointers "
			//"to derived classes, not File itself");
		f = file;
		if (f) f->refcount++;
     2ae:	.short	0x3301
};
/**
 * \class FsFile
 * \brief FsBaseFile file with Arduino Stream.
 */
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
     2b0:	str	r7, [r4, #20]
     2b2:	.short	0x6666
     2b4:	strb	r6, [r5, #4]
     2b6:	str.w	r8, [r5, #8]
     2ba:	.short	0x732e
		// can we use is_same or is_polymorphic with static_assert?
		// or is_base_of
		//static_assert(std::is_same<decltype(*file),File>::value,
			//"File(File *file) constructor only accepts pointers "
			//"to derived classes, not File itself");
		f = file;
     2bc:	str	r4, [r5, #16]
		if (f) f->refcount++;
     2be:	.short	0x6123
#define FILE_WHOAMI

class File : public Stream {
public:
	constexpr File() : f(nullptr) { }
	File(File *file) {
     2c0:	str	r2, [r5, #0]
     2c2:	.short	0x4b0d
   */
  FsBaseFile(const char* path, oflag_t oflag) {
    open(path, oflag);
  }

  ~FsBaseFile() {close();}
     2c4:	add	r0, sp, #16
     2c6:	.short	0x9300
     2c8:	bl	c298 <FsBaseFile::close()>
	}
	virtual File openNextFile(uint8_t mode=0) {
		SDFAT_FILE file = sdfatfile.openNextFile();
		if (file) return File(new SDFile(file));
		return File();
	}
     2cc:	.word	0xb0144628
     2d0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  bool isHidden() const {
    return m_fFile ? m_fFile->isHidden() :
           m_xFile ? m_xFile->isHidden() : false;
  }
  /** \return True if this is an open file/directory else false. */
  bool isOpen() const {return m_fFile || m_xFile;}
     2d4:	.word	0x2b009b13
     2d8:	bne.n	270 <SDFile::openNextFile(unsigned char)+0x30>

#define FILE_WHOAMI

class File : public Stream {
public:
	constexpr File() : f(nullptr) { }
     2da:	.short	0x4a06
     2dc:	strb	r3, [r5, #4]
     2de:	.short	0x60ac
     2e0:	strb	r3, [r5, #12]
     2e2:	.short	0x612b
     2e4:	str	r2, [r5, #0]
     2e6:	.short	0xe7ec
     2e8:	lsls	r0, r2, #1
     2ea:	.short	0x2000
     2ec:	lsls	r4, r2, #3
     2ee:	.short	0x2000
     2f0:	movs	r0, r1
     2f2:	movs	r0, #0
     2f4:	.word	0x20000074
     2f8:	movs	r4, r5
     2fa:	movs	r0, #0

000002fc <dateTime(unsigned short*, unsigned short*, unsigned char*)>:

/****************** File Utilities *****************************/
  #if USE_SD==1
    // Call back for file timestamps.  Only called for file create and sync()
    void dateTime(uint16_t* date, uint16_t* time, uint8_t* ms10) 
    { *date = FS_DATE(year(), month(), day());
     2fc:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     300:	mov	r6, r1
     302:	.short	0x4615
     304:	mov	r7, r0
     306:	.short	0xf007
     308:	vrsubhn.i16	d20, <illegal reg q1.5>, q2
     30c:	bl	8270 <month()>
     310:	mov	r8, r0
     312:	bl	8250 <day()>
     316:	.short	0xb2c0
 *
 * \return Packed date for directory entry.
 */
static inline uint16_t FS_DATE(uint16_t year, uint8_t month, uint8_t day) {
  year -= 1980;
  return year > 127 || month > 12 || day > 31 ? 0 :
     318:	uxtb.w	r3, r8
     31c:	.word	0xbf982b0c
     320:	cmpls	r0, #31
     322:	bhi.n	394 <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x98>
     324:	subw	r4, r4, #1980	; 0x7bc
     328:	uxth	r4, r4
     32a:	cmp	r4, #127	; 0x7f
     32c:	.word	0xea4fd832
         year << 9 | month << 5 | day;
     330:	adds	r0, r1, r1
     332:	and.w	r8, r8, #8160	; 0x1fe0
     336:	.short	0xea48
     338:	movs	r0, r0
     33a:	.short	0xea40
     33c:	movs	r4, #68	; 0x44
     33e:	uxth	r4, r4
     340:	strh	r4, [r7, #0]
      *time = FS_TIME(hour(), minute(), second());
     342:	bl	81f0 <hour()>
     346:	mov	r7, r0
     348:	bl	8210 <minute()>
     34c:	mov	r4, r0
     34e:	bl	8230 <second()>
 * \param[in] second [0,59]
 *
 * \return Packed time for directory entry.
 */
static inline uint16_t FS_TIME(uint8_t hour, uint8_t minute, uint8_t second) {
  return hour > 23 || minute > 59 || second > 59 ? 0 :
     352:	uxtb	r2, r4
     354:	uxtb	r3, r7
     356:	cmp	r2, #59	; 0x3b
     358:	it	ls
     35a:	.short	0x2b17
     35c:	bhi.n	390 <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x94>
     35e:	.short	0xb2c3
     360:	cmp	r3, #59	; 0x3b
     362:	bhi.n	390 <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x94>	; unpredictable <IT:ls>
         hour << 11 | minute << 5 | second >> 1;
     364:	lsls	r7, r7, #11
     366:	ubfx	r3, r0, #1, #7
     36a:	lsls	r4, r4, #5
     36c:	and.w	r0, r7, #522240	; 0x7f800
     370:	.word	0x54fff404
     374:	orrs	r0, r4
     376:	orrs	r0, r3
     378:	uxth	r0, r0
     37a:	.short	0x8030
      *ms10 = second() & 1 ? 100 : 0;
     37c:	bl	8230 <second()>
     380:	tst.w	r0, #1
     384:	ite	ne
     386:	movne	r3, #100	; 0x64
     388:	moveq	r3, #0
     38a:	strb	r3, [r5, #0]
     38c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     390:	movs	r0, #0
     392:	b.n	37a <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x7e>
 * \return Packed date for directory entry.
 */
static inline uint16_t FS_DATE(uint16_t year, uint8_t month, uint8_t day) {
  year -= 1980;
  return year > 127 || month > 12 || day > 31 ? 0 :
         year << 9 | month << 5 | day;
     394:	movs	r4, #0
     396:	b.n	340 <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x44>

00000398 <DMAChannel::~DMAChannel()>:
	}
	DMAChannel & operator = (const DMASetting &rhs) {
		copy_tcd(TCD, rhs.TCD);
		return *this;
	}
	~DMAChannel() {
     398:	.word	0x4604b510
		release();
     39c:	bl	fec0 <DMAChannel::release()>
	}
     3a0:	mov	r0, r4
     3a2:	pop	{r4, pc}

000003a4 <SDFile::available()>:
		return sdfatfile.write(buf, size);
	}
	virtual int peek() {
		return sdfatfile.peek();
	}
	virtual int available() {
     3a4:	ldr	r2, [r0, #92]	; 0x5c
  /** \return number of bytes available from the current position to EOF
   *   or INT_MAX if more than INT_MAX bytes are available.
   */
  int available() const {
    return m_fFile ? m_fFile->available() :
           m_xFile ? m_xFile->available() : 0;
     3a6:	cbz	r2, 3c2 <SDFile::available()+0x1e>
  }
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint32_t available32() const {
    return isFile() ? fileSize() - curPosition() : 0;
     3a8:	ldrb	r3, [r2, #0]
     3aa:	and.w	r3, r3, #8
     3ae:	and.w	r0, r3, #255	; 0xff
     3b2:	cbz	r3, 3f8 <SDFile::available()+0x54>
   * Zero is returned for directory files.
   *
   */
  int available() const {
    uint32_t n = available32();
    return n > INT_MAX ? INT_MAX : n;
     3b4:	ldr	r3, [r2, #28]
     3b6:	ldr	r0, [r2, #20]
     3b8:	subs	r0, r3, r0
     3ba:	it	mi
     3bc:	mvnmi.w	r0, #2147483648	; 0x80000000
     3c0:	bx	lr
     3c2:	ldr	r1, [r0, #96]	; 0x60
     3c4:	cbz	r1, 3fa <SDFile::available()+0x56>
  }
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint64_t available64() {
    return isFile() ? fileSize() - curPosition() : 0;
     3c6:	.short	0xf891
     3c8:	adds	r0, #49	; 0x31
     3ca:	and.w	r3, r3, #8
     3ce:	.short	0xf003
     3d0:	lsls	r7, r7, #3
     3d2:	cbz	r3, 3f8 <SDFile::available()+0x54>
     3d4:	ldrd	r2, r3, [r1, #16]
     3d8:	.word	0x0100e9d1
     3dc:	push	{r4, r5}
     3de:	subs	r0, r2, r0
     3e0:	mov.w	r5, #0
     3e4:	mvn.w	r4, #2147483648	; 0x80000000
     3e8:	sbc.w	r1, r3, r1
     3ec:	cmp	r5, r1
     3ee:	it	eq
     3f0:	.word	0xd2004284
     3f4:	mov	r0, r4
		return sdfatfile.available();
	}
     3f6:	popeq	{r4, r5}
     3f8:	bx	lr
     3fa:	mov	r0, r1
     3fc:	bx	lr
			#endif //defined(AUDIO_PT8211_INTERPOLATION_LINEAR)
		#else
			memcpy_tointerleaveL(dest, blockL->data + offsetL);
			offsetL += (AUDIO_BLOCK_SAMPLES / 2);
		#endif //defined(AUDIO_PT8211_OVERSAMPLING)
	} else if (blockR) {
     3fe:	nop

00000400 <StreamFile<FsBaseFile, unsigned long long>::peek()>:
  const char* name() const {return "use getName()";}
  /** Return the next available byte without consuming it.
   *
   * \return The byte if no error and not at eof else -1;
   */
  int peek() {
     400:	ldr	r3, [r0, #72]	; 0x48
   *
   * \return The byte if no error and not at eof else -1;
   */
  int peek() {
    return m_fFile ? m_fFile->peek() :
           m_xFile ? m_xFile->peek() : -1;
     402:	.short	0xb113
     404:	mov	r0, r3
     406:	b.w	ad50 <FatFile::peek()>
     40a:	ldr	r0, [r0, #76]	; 0x4c
     40c:	cbz	r0, 412 <StreamFile<FsBaseFile, unsigned long long>::peek()+0x12>
     40e:	b.w	9188 <ExFatFile::peek()>
    return BaseFile::peek();
  }
     412:	mov.w	r0, #4294967295
     416:	bx	lr

00000418 <StreamFile<FsBaseFile, unsigned long long>::read()>:
  /** Read the next byte from a file.
   *
   * \return For success return the next byte in the file as an int.
   * If an error occurs or end of file is reached return -1.
   */
  int read() {
     418:	ldr	r3, [r0, #72]	; 0x48
     41a:	push	{lr}
     41c:	sub	sp, #12
   * read() called before a file has been opened, corrupt file system
   * or an I/O error occurred.
   */
  int read(void* buf, size_t count) {
    return m_fFile ? m_fFile->read(buf, count) :
           m_xFile ? m_xFile->read(buf, count) : -1;
     41e:	cbz	r3, 43a <StreamFile<FsBaseFile, unsigned long long>::read()+0x22>
     420:	mov	r0, r3
     422:	movs	r2, #1
     424:	add.w	r1, sp, #7
     428:	bl	abb4 <FatFile::read(void*, unsigned int)>
   * \return For success return the next byte in the file as an int.
   * If an error occurs or end of file is reached return -1.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
     42c:	.word	0xd10c2801
     430:	ldrb.w	r0, [sp, #7]
    return BaseFile::read();
  }
     434:	.word	0xf85db003
     438:			; <UNDEFINED> instruction: 0xfb046cc0
   * read() called before a file has been opened, corrupt file system
   * or an I/O error occurred.
   */
  int read(void* buf, size_t count) {
    return m_fFile ? m_fFile->read(buf, count) :
           m_xFile ? m_xFile->read(buf, count) : -1;
     43c:	cbz	r0, 44a <StreamFile<FsBaseFile, unsigned long long>::read()+0x32>
     43e:	movs	r2, #1
     440:	add.w	r1, sp, #7
     444:	.word	0xfdc6f008
     448:	b.n	42c <StreamFile<FsBaseFile, unsigned long long>::read()+0x14>
   * \return For success return the next byte in the file as an int.
   * If an error occurs or end of file is reached return -1.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
     44a:	mov.w	r0, #4294967295
     44e:	b.n	434 <StreamFile<FsBaseFile, unsigned long long>::read()+0x1c>

00000450 <SDFile::flush()>:
	virtual void flush() {
     450:	ldr	r3, [r0, #92]	; 0x5c
   *
   * \return true for success or false for failure.
   */
  bool sync() {
    return m_fFile ? m_fFile->sync() :
           m_xFile ? m_xFile->sync() : false;
     452:	cbz	r3, 45a <SDFile::flush()+0xa>
     454:	mov	r0, r3
     456:	b.w	b214 <FatFile::sync()>
     45a:	.short	0x6e00
     45c:	cbz	r0, 462 <SDFile::flush()+0x12>
     45e:	.short	0xf009
     460:	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
     462:	.short	0x4770

00000464 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)>:
  /** Write a byte to a file. Required by the Arduino Print class.
   * \param[in] b the byte to be written.
   * Use getWriteError to check for errors.
   * \return 1 for success and 0 for failure.
   */
  size_t write(uint8_t b) {
     464:	push	{lr}
     466:	.short	0x6c83
     468:	sub	sp, #12
     46a:	strb.w	r1, [sp, #7]
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const void* buf, size_t count) {
    return m_fFile ? m_fFile->write(buf, count) :
           m_xFile ? m_xFile->write(buf, count) : 0;
     46e:	cbz	r3, 482 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)+0x1e>
     470:	mov	r0, r3
     472:	movs	r2, #1
     474:	add.w	r1, sp, #7
     478:	bl	b298 <FatFile::write(void const*, unsigned int)>
    return BaseFile::write(b);
  }
     47c:	.word	0xf85db003
     480:			; <UNDEFINED> instruction: 0xfb046cc0
     484:	.word	0xd0f92800
     488:	movs	r2, #1
     48a:	.short	0xf10d
     48c:	lsls	r7, r0, #4
     48e:	.short	0xf009
     490:	vaddl.u32	<illegal reg q13.5>, d7, d3
     494:	.word	0xfb04f85d

00000498 <logg(unsigned long, char const*) [clone .part.54]>:
}

/**************** Online logging *******************************/
extern uint32_t loop_count, acq_count, acq_miss, maxDel;
extern uint16_t maxCount;
void logg(uint32_t del, const char *txt)
     498:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
{ static uint32_t to;
  if(millis()-to > del)
  {
    Serial.printf("%s: %6d %4d; %4d %4d; %4d\n",
            txt,loop_count, acq_count, acq_miss,maxCount, maxDel); 
     49c:	.word	0xb0844c12
extern uint16_t maxCount;
void logg(uint32_t del, const char *txt)
{ static uint32_t to;
  if(millis()-to > del)
  {
    Serial.printf("%s: %6d %4d; %4d %4d; %4d\n",
     4a0:	ldr	r5, [pc, #72]	; (4ec <logg(unsigned long, char const*) [clone .part.54]+0x54>)
            txt,loop_count, acq_count, acq_miss,maxCount, maxDel); 
     4a2:	.short	0x4602
     4a4:	ldr	r6, [pc, #72]	; (4f0 <logg(unsigned long, char const*) [clone .part.54]+0x58>)
     4a6:	.short	0x6821
     4a8:	ldr	r0, [r6, #0]
     4aa:	.short	0xf8b5
     4ac:	b.n	4b0 <logg(unsigned long, char const*) [clone .part.54]+0x18>
     4ae:	.short	0x4f11
     4b0:	str	r0, [sp, #4]
     4b2:	.short	0x9103
     4b4:	str.w	lr, [sp, #8]
     4b8:	.word	0xf8df6839
     4bc:	strh	r4, [r1, #2]
     4be:	.short	0x9100
     4c0:	ldr.w	r3, [r8]
     4c4:	.word	0x480d490c
     4c8:	bl	ff78 <Print::printf(char const*, ...)>
     4cc:	.word	0x2300490c
    loop_count=0;
    acq_count=0;
    acq_miss=0;
    maxCount=0;
    maxDel=0;
    to=millis();
     4d0:	ldr	r2, [pc, #48]	; (504 <logg(unsigned long, char const*) [clone .part.54]+0x6c>)
     4d2:	.short	0x6809
{ static uint32_t to;
  if(millis()-to > del)
  {
    Serial.printf("%s: %6d %4d; %4d %4d; %4d\n",
            txt,loop_count, acq_count, acq_miss,maxCount, maxDel); 
    loop_count=0;
     4d4:	str.w	r3, [r8]
    acq_count=0;
     4d8:	.word	0x6033603b
    acq_miss=0;
    maxCount=0;
     4dc:	strh	r3, [r5, #0]
    maxDel=0;
     4de:	.short	0x6023
    to=millis();
     4e0:	str	r1, [r2, #0]
  }
}
     4e2:	.short	0xb004
     4e4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     4e8:	asrs	r0, r0, #25
     4ea:	movs	r0, #0
     4ec:	.word	0x20043e60
     4f0:	subs	r6, #116	; 0x74
     4f2:	.short	0x2004
     4f4:	cmp	r0, #68	; 0x44
     4f6:	.short	0x2000
     4f8:	lsls	r0, r2, #6
     4fa:	.short	0x2000
     4fc:	lsrs	r0, r4, #17
     4fe:	.short	0x2000
     500:	blxns	r4
     502:	movs	r0, #4
     504:	subs	r6, #124	; 0x7c
     506:	.short	0x2004
     508:	subs	r6, #100	; 0x64
     50a:	.short	0x2004

0000050c <SDClass::remove(char const*)>:
		return sdfs.mkdir(filepath);
	}
	bool rename(const char *oldfilepath, const char *newfilepath) {
		return sdfs.rename(oldfilepath, newfilepath);
	}
	bool remove(const char *filepath) {
     50c:	push	{r4, r5, lr}
     50e:	.short	0xf8d0
     510:	add	ip, r0
     512:	.short	0xb08f
  *
   * \return true for success or false for failure.
  */
  bool remove(const char *path) {
    return m_fVol ? m_fVol->remove(path) :
           m_xVol ? m_xVol->remove(path) : false;
     514:	cbz	r4, 540 <SDClass::remove(char const*)+0x34>
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() {}
     516:	.short	0x2500
   *
   * \return true for success or false for failure.
   */
  bool remove(const char* path) {
    FatFile tmp;
    return tmp.open(this, path, O_WRONLY) && tmp.remove();
     518:	mov	r2, r1
     51a:	.short	0x4668
     51c:	mov	r1, r4
     51e:	.short	0x2301
     520:	strb.w	r5, [sp]
     524:	.word	0x5001f88d
     528:	strb.w	r5, [sp, #2]
     52c:	.word	0xfb34f00a
     530:	cbnz	r0, 536 <SDClass::remove(char const*)+0x2a>
		return sdfs.remove(filepath);
	}
     532:	.short	0xb00f
     534:	pop	{r4, r5, pc}
     536:	.short	0x4668
     538:	bl	bc08 <FatFile::remove()>
     53c:	.word	0xbd30b00f
     540:	ldr.w	r0, [r0, #1160]	; 0x488
     544:	.word	0xd0f42800
   *
   * \return true for success or false for failure.
   */
  bool remove(const ExChar_t* path) {
    ExFatFile tmp;
    return tmp.open(this, path, O_WRONLY) && tmp.remove();
     548:	mov	r2, r1
     54a:	.short	0x2301
     54c:	mov	r1, r0
     54e:	.short	0x4668
 * \brief Basic file class.
 */
class ExFatFile {
 public:
  /** Create an instance. */
  ExFatFile() {}
     550:	strb.w	r4, [sp, #49]	; 0x31
     554:	.word	0x4032f88d
     558:	strb.w	r4, [sp, #51]	; 0x33
     55c:	.word	0xf920f009
     560:	cmp	r0, #0
     562:	beq.n	532 <SDClass::remove(char const*)+0x26>
     564:	.word	0xf0094668
     568:	stc2	0, cr11, [r5], #-60	; 0xffffffc4
     56c:	.word	0xbf00bd30

00000570 <SDFile::name()>:
		sdfatfile.close();
	}
	virtual operator bool() {
		return sdfatfile.isOpen();
	}
	virtual const char * name() {
     570:	push	{r3, r4, r5, lr}
		if (!filename) {
     572:	.short	0x6e44
     574:	cbz	r4, 57a <SDFile::name()+0xa>
				static char zeroterm = 0;
				filename = &zeroterm;
			}
		}
		return filename;
	}
     576:	.short	0x4620
     578:	pop	{r3, r4, r5, pc}
     57a:	.short	0x4605
	virtual operator bool() {
		return sdfatfile.isOpen();
	}
	virtual const char * name() {
		if (!filename) {
			filename = (char *)malloc(MAX_FILENAME_LEN);
     57c:	mov.w	r0, #256	; 0x100
     580:	bl	10468 <malloc>
     584:	mov	r1, r0
     586:	str	r0, [r5, #100]	; 0x64
			if (filename) {
     588:	cbz	r0, 5ac <SDFile::name()+0x3c>
   *             truncated if the file's name is too long.
   * \return The length of the returned string.
   */
  size_t getName(char* name, size_t len) {
    *name = 0;
    return m_fFile ? m_fFile->getName(name, len) :
     58a:	.short	0x6de8
   *             must be at least 13 bytes long.  The file's name will be
   *             truncated if the file's name is too long.
   * \return The length of the returned string.
   */
  size_t getName(char* name, size_t len) {
    *name = 0;
     58c:	strb	r4, [r1, #0]
    return m_fFile ? m_fFile->getName(name, len) :
           m_xFile ? m_xFile->getName(name, len) : 0;
     58e:	.short	0xb128
     590:	mov.w	r2, #256	; 0x100
     594:	.word	0xf97cf00b
     598:	ldr	r4, [r5, #100]	; 0x64
     59a:	.short	0xe7ec
     59c:	ldr	r0, [r5, #96]	; 0x60
     59e:	.short	0xb140
     5a0:	mov.w	r2, #256	; 0x100
     5a4:	.word	0xfc2ef008
     5a8:	ldr	r4, [r5, #100]	; 0x64
     5aa:	.short	0xe7e4
				sdfatfile.getName(filename, MAX_FILENAME_LEN);
			} else {
				static char zeroterm = 0;
				filename = &zeroterm;
     5ac:	ldr	r4, [pc, #8]	; (5b8 <SDFile::name()+0x48>)
     5ae:	.short	0x666c
     5b0:	b.n	576 <SDFile::name()+0x6>
     5b2:	mov	r4, r1
     5b4:	b.n	576 <SDFile::name()+0x6>
     5b6:	.short	0xbf00
     5b8:	asrs	r4, r6, #24
     5ba:	movs	r0, #0

000005bc <SDFile::truncate(unsigned long long)>:
		sdfatfile.flush();
	}
	virtual size_t read(void *buf, size_t nbyte) {
		return sdfatfile.read(buf, nbyte);
	}
	virtual bool truncate(uint64_t size=0) {
     5bc:	push	{r4, r6, r7, lr}
     5be:	ldr	r4, [r0, #92]	; 0x5c
   *
   * \return true for success or false for failure.
   */
  bool truncate(uint64_t length) {
    return m_fFile ? length < (1ULL << 32) && m_fFile->truncate(length) :
           m_xFile ? m_xFile->truncate(length) : false;
     5c0:	.word	0x2b01b18c
   * \param[in] length The desired length for the file.
   *
   * \return true for success or false for failure.
   */
  bool truncate(uint64_t length) {
    return m_fFile ? length < (1ULL << 32) && m_fFile->truncate(length) :
     5c4:	it	eq
     5c6:	.short	0x2a00
     5c8:	bcc.n	5ce <SDFile::truncate(unsigned long long)+0x12>
     5ca:	moveq	r0, #0
		return sdfatfile.truncate(size);
	}
     5cc:	.word	0x4611bdd0
   * \param[in] length The desired length for the file.
   *
   * \return true for success or false for failure.
   */
  bool truncate(uint32_t length) {
    return seekSet(length) && truncate();
     5d0:	mov	r0, r4
     5d2:	.short	0xf00a
     5d4:	ldc2	8, cr2, [r3, #-0]
     5d8:	.word	0x4620d0f7
     5dc:	bl	b220 <FatFile::truncate()>
     5e0:	cmp	r0, #0
     5e2:	beq.n	5ca <SDFile::truncate(unsigned long long)+0xe>
     5e4:	.word	0x6e04bdd0
           m_xFile ? m_xFile->truncate(length) : false;
     5e8:	cmp	r4, #0
     5ea:	.short	0xd0ee
   * \param[in] length The desired length for the file.
   *
   * \return true for success or false for failure.
   */
  bool truncate(uint64_t length) {
    return seekSet(length) && truncate();
     5ec:	mov	r0, r4
     5ee:	.short	0xf008
     5f0:	stc2l	8, cr2, [r1]
     5f4:	.word	0x4620d0e9
     5f8:	ldmia.w	sp!, {r4, r6, r7, lr}
     5fc:	b.w	a37c <ExFatFile::truncate()>

00000600 <SDClass::mkdir(char const*)>:
		return File();
	}
	bool exists(const char *filepath) {
		return sdfs.exists(filepath);
	}
	bool mkdir(const char *filepath) {
     600:	.word	0xf8d0b530
     604:	add	ip, r0
     606:	.short	0xb08f
   *
   * \return true for success or false for failure.
   */
  bool mkdir(const char *path, bool pFlag = true) {
    return m_fVol ? m_fVol->mkdir(path, pFlag) :
           m_xVol ? m_xVol->mkdir(path, pFlag) : false;
     608:	cbz	r4, 62a <SDClass::mkdir(char const*)+0x2a>
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() {}
     60a:	.short	0x2500
   *
   * \return true for success or false for failure.
   */
  bool mkdir(const char* path, bool pFlag = true) {
    FatFile sub;
    return sub.mkdir(vwd(), path, pFlag);
     60c:	mov	r2, r1
     60e:	.short	0x2301
     610:	addw	r1, r4, #1092	; 0x444
     614:	.word	0xf88d4668
     618:	str	r0, [r0, r0]
     61a:	.short	0xf88d
     61c:	str	r1, [r0, r0]
     61e:	.short	0xf88d
     620:	str	r2, [r0, r0]
     622:	.short	0xf00a
     624:	ldr??.w	fp, [r1, #15]
		return sdfs.mkdir(filepath);
	}
     628:	.word	0xf8d0bd30
     62c:	lsls	r0, r1, #18
     62e:	cmp	r0, #0
     630:	beq.n	626 <SDClass::mkdir(char const*)+0x26>
   *
   * \return true for success or false for failure.
   */
  bool mkdir(const ExChar_t* path, bool pFlag = true) {
    ExFatFile sub;
    return sub.mkdir(vwd(), path, pFlag);
     632:	mov	r2, r1
     634:	.word	0xf5002301
     638:	str	r1, [r1, #24]
     63a:	.short	0x4668
 * \brief Basic file class.
 */
class ExFatFile {
 public:
  /** Create an instance. */
  ExFatFile() {}
     63c:	strb.w	r4, [sp, #49]	; 0x31
     640:	.word	0x4032f88d
     644:	strb.w	r4, [sp, #51]	; 0x33
     648:	.word	0xfdd2f009
     64c:	add	sp, #60	; 0x3c
     64e:	pop	{r4, r5, pc}

00000650 <SDClass::exists(char const*)>:
		else if (mode == FILE_WRITE_BEGIN) flags = O_RDWR | O_CREAT;
		SDFAT_FILE file = sdfs.open(filepath, flags);
		if (file) return File(new SDFile(file));
		return File();
	}
	bool exists(const char *filepath) {
     650:	push	{r4, r5, lr}
     652:	.short	0xf8d0
     654:	add	ip, r0
     656:	.short	0xb08f
   *
   * \return true if the file exists else false.
   */
  bool exists(const char* path) {
    return m_fVol ? m_fVol->exists(path) :
           m_xVol ? m_xVol->exists(path) : false;
     658:	cbz	r4, 678 <SDClass::exists(char const*)+0x28>
     65a:	.short	0x2500
   *
   * \return true if the file exists else false.
   */
  bool exists(const char* path) {
    FatFile tmp;
    return tmp.open(this, path, O_RDONLY);
     65c:	mov	r2, r1
     65e:	mov	r0, sp
     660:	mov	r1, r4
     662:	mov	r3, r5
     664:	strb.w	r5, [sp]
     668:	.word	0x5001f88d
     66c:	strb.w	r5, [sp, #2]
     670:	.word	0xfa92f00a
		return sdfs.exists(filepath);
	}
     674:	add	sp, #60	; 0x3c
     676:	.short	0xbd30
     678:	ldr.w	r0, [r0, #1160]	; 0x488
     67c:	cmp	r0, #0
     67e:	.short	0xd0f9
   *
   * \return true if the file exists else false.
   */
  bool exists(const ExChar_t* path) {
    ExFatFile tmp;
    return tmp.open(this, path, O_RDONLY);
     680:	mov	r2, r1
     682:	mov	r3, r4
     684:	.word	0x46684601
     688:	strb.w	r4, [sp, #49]	; 0x31
     68c:	.word	0x4032f88d
     690:	strb.w	r4, [sp, #51]	; 0x33
     694:	.word	0xf884f009
     698:	add	sp, #60	; 0x3c
     69a:	.short	0xbd30

0000069c <SDFile::rewindDirectory()>:
	virtual File openNextFile(uint8_t mode=0) {
		SDFAT_FILE file = sdfatfile.openNextFile();
		if (file) return File(new SDFile(file));
		return File();
	}
	virtual void rewindDirectory(void) {
     69c:	ldr	r3, [r0, #92]	; 0x5c
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
  }
  /** \return True if this is a directory else false. */
  bool isDir() const {
    return m_fFile ? m_fFile->isDir() :
           m_xFile ? m_xFile->isDir() : false;
     69e:	.short	0xb19b
  int read() {
    return BaseFile::read();
  }
  /** Rewind a file if it is a directory */
  void rewindDirectory() {
    if (BaseFile::isDir()) {
     6a0:	ldrb	r2, [r3, #0]
     6a2:	tst.w	r2, #112	; 0x70
     6a6:	bne.n	6aa <SDFile::rewindDirectory()+0xe>
     6a8:	bx	lr
     6aa:	.short	0xb510
     6ac:	mov	r4, r0
   * \return true for success or false for failure.
   */
  bool rename(FatFile* dirFile, const char* newPath);
  /** Set the file's current position to zero. */
  void rewind() {
    seekSet(0);
     6ae:	.short	0x2100
     6b0:	mov	r0, r3
     6b2:	.short	0xf00a
     6b4:	stc2	14, cr6, [r3], #128	; 0x80
           m_xFile ? m_xFile->rename(dirFile->m_xFile, newPath) : false;
  }
  /** Set the file's current position to zero. */
  void rewind() {
    if (m_fFile) m_fFile->rewind();
    if (m_xFile) m_xFile->rewind();
     6b8:	.word	0x2200b128
   * \return true for success or false for failure.
   */
  bool rename(ExFatFile* dirFile, const ExChar_t* newPath);
  /** Set the file's current position to zero. */
  void rewind() {
    seekSet(0);
     6bc:	movs	r3, #0
		sdfatfile.rewindDirectory();
	}
     6be:	.short	0xe8bd
     6c0:	ands	r0, r2
     6c2:	.short	0xf008
     6c4:	pop	{r0, r1, r2, r4, r5, r6, pc}
     6c6:	.short	0xbd10
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
  }
  /** \return True if this is a directory else false. */
  bool isDir() const {
    return m_fFile ? m_fFile->isDir() :
           m_xFile ? m_xFile->isDir() : false;
     6c8:	ldr	r0, [r0, #96]	; 0x60
     6ca:	.short	0x2800
     6cc:	beq.n	6a8 <SDFile::rewindDirectory()+0xc>
     6ce:	.short	0xf890
     6d0:	adds	r0, #49	; 0x31
     6d2:	tst.w	r3, #80	; 0x50
     6d6:	beq.n	6a8 <SDFile::rewindDirectory()+0xc>
     6d8:	movs	r2, #0
     6da:	movs	r3, #0
     6dc:	b.w	91b4 <ExFatFile::seekSet(unsigned long long)>

000006e0 <SDClass::rmdir(char const*)>:
		return sdfs.rename(oldfilepath, newfilepath);
	}
	bool remove(const char *filepath) {
		return sdfs.remove(filepath);
	}
	bool rmdir(const char *filepath) {
     6e0:	push	{r4, r5, lr}
     6e2:	ldr.w	r4, [r0, #1156]	; 0x484
     6e6:	.short	0xb08f
   *
   * \return true for success or false for failure.
   */
  bool rmdir(const char *path) {
    return m_fVol ? m_fVol->rmdir(path) :
           m_xVol ? m_xVol->rmdir(path) : false;
     6e8:	cbz	r4, 714 <SDClass::rmdir(char const*)+0x34>
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() {}
     6ea:	.short	0x2500
   *
   * \return true for success or false for failure.
   */
  bool rmdir(const char* path) {
    FatFile sub;
    return sub.open(this, path, O_RDONLY) && sub.rmdir();
     6ec:	mov	r2, r1
     6ee:	.short	0x4668
     6f0:	mov	r1, r4
     6f2:	.short	0x462b
     6f4:	strb.w	r5, [sp]
     6f8:	.word	0x5001f88d
     6fc:	strb.w	r5, [sp, #2]
     700:	.word	0xfa4af00a
     704:	cbnz	r0, 70a <SDClass::rmdir(char const*)+0x2a>
		return sdfs.rmdir(filepath);
	}
     706:	.short	0xb00f
     708:	pop	{r4, r5, pc}
     70a:	.short	0x4668
     70c:	bl	afa0 <FatFile::rmdir()>
     710:	.word	0xbd30b00f
     714:	ldr.w	r0, [r0, #1160]	; 0x488
     718:	.word	0xd0f42800
   *
   * \return true for success or false for failure.
   */
  bool rmdir(const ExChar_t* path) {
    ExFatFile sub;
    return sub.open(this, path, O_RDONLY) && sub.rmdir();
     71c:	mov	r2, r1
     71e:	.short	0x4623
     720:	mov	r1, r0
     722:	.short	0x4668
 * \brief Basic file class.
 */
class ExFatFile {
 public:
  /** Create an instance. */
  ExFatFile() {}
     724:	strb.w	r4, [sp, #49]	; 0x31
     728:	.word	0x4032f88d
     72c:	strb.w	r4, [sp, #51]	; 0x33
     730:	.word	0xf836f009
     734:	cmp	r0, #0
     736:	.short	0xd0e6
     738:	mov	r0, sp
     73a:	.short	0xf009
     73c:	umull	fp, r0, r7, pc	; <UNPREDICTABLE>
     740:	.word	0xbf00bd30

00000744 <SDClass::rename(char const*, char const*)>:
		return sdfs.exists(filepath);
	}
	bool mkdir(const char *filepath) {
		return sdfs.mkdir(filepath);
	}
	bool rename(const char *oldfilepath, const char *newfilepath) {
     744:	push	{r4, r5, r6, lr}
     746:	.short	0xf8d0
     748:	add	ip, r0
     74a:	.short	0xb08e
     74c:	mov	r6, r2
   *
   * \return true for success or false for failure.
   */
  bool rename(const char *oldPath, const char *newPath) {
    return m_fVol ? m_fVol->rename(oldPath, newPath) :
           m_xVol ? m_xVol->rename(oldPath, newPath) : false;
     74e:	.short	0xb1c4
     750:	movs	r5, #0
#endif  // ENABLE_ARDUINO_STRING

 private:
  friend FatFile;
  static FatVolume* cwv() {return m_cwv;}
  FatFile* vwd() {return &m_vwd;}
     752:	.short	0xf204
     754:	add	r4, r8
   *
   * \return true for success or false for failure.
   */
  bool rename(const char *oldPath, const char *newPath) {
    FatFile file;
    return file.open(vwd(), oldPath, O_RDONLY) && file.rename(vwd(), newPath);
     756:	.short	0x460a
     758:	mov	r0, sp
     75a:	.short	0x4621
     75c:	mov	r3, r5
     75e:	.short	0xf88d
     760:	str	r0, [r0, r0]
     762:	.short	0xf88d
     764:	str	r1, [r0, r0]
     766:	strb.w	r5, [sp, #2]
     76a:	bl	aad0 <FatFile::open(FatFile*, char const*, int)>
     76e:	cbnz	r0, 774 <SDClass::rename(char const*, char const*)+0x30>
		return sdfs.rename(oldfilepath, newfilepath);
	}
     770:	add	sp, #56	; 0x38
     772:	pop	{r4, r5, r6, pc}
     774:	.word	0x46214632
     778:	mov	r0, sp
     77a:	bl	adbc <FatFile::rename(FatFile*, char const*)>
     77e:	add	sp, #56	; 0x38
     780:	pop	{r4, r5, r6, pc}
     782:	ldr.w	r0, [r0, #1160]	; 0x488
     786:	cmp	r0, #0
     788:	beq.n	770 <SDClass::rename(char const*, char const*)+0x2c>
#endif  //  USE_EXFAT_UNICODE_NAMES

 private:
  friend ExFatFile;
  static ExFatVolume* cwv() {return m_cwv;}
  ExFatFile* vwd() {return &m_vwd;}
     78a:	add.w	r5, r0, #1096	; 0x448
   *
   * \return true for success or false for failure.
   */
  bool rename(const ExChar_t* oldPath, const ExChar_t* newPath) {
    ExFatFile file;
    return file.open(vwd(), oldPath, O_RDONLY) && file.rename(vwd(), newPath);
     78e:	mov	r2, r1
     790:	mov	r3, r4
     792:	mov	r0, sp
     794:	mov	r1, r5
     796:	strb.w	r4, [sp, #49]	; 0x31
     79a:	strb.w	r4, [sp, #50]	; 0x32
     79e:	strb.w	r4, [sp, #51]	; 0x33
     7a2:	bl	969c <ExFatFile::open(ExFatFile*, char const*, int)>
     7a6:	cmp	r0, #0
     7a8:	beq.n	770 <SDClass::rename(char const*, char const*)+0x2c>
     7aa:	mov	r2, r6
     7ac:	mov	r1, r5
     7ae:	mov	r0, sp
     7b0:	bl	a2cc <ExFatFile::rename(ExFatFile*, char const*)>
     7b4:	add	sp, #56	; 0x38
     7b6:	pop	{r4, r5, r6, pc}

000007b8 <SDClass::usedSize()>:
		return sdfs.remove(filepath);
	}
	bool rmdir(const char *filepath) {
		return sdfs.rmdir(filepath);
	}
	uint64_t usedSize() {
     7b8:	push	{r3, r4, r5, lr}
     7ba:	mov	r5, r0
     7bc:	ldr.w	r0, [r0, #1156]	; 0x484
  /** Change global working volume to this volume. */
  void chvol() {m_cwv = this;}
  /** \return The total number of clusters in the volume. */
  uint32_t clusterCount() const {
    return m_fVol ? m_fVol->clusterCount() :
           m_xVol ? m_xVol->clusterCount() : 0;
     7c0:	cbz	r0, 7f4 <SDClass::usedSize()+0x3c>
  uint8_t* cacheClear() {
    return m_cache.clear();
  }
  /** \return The total number of clusters in the volume. */
  uint32_t clusterCount() const {
    return m_lastCluster - 1;
     7c2:	ldr	r4, [r0, #28]
     7c4:	subs	r4, #1
    return m_fVol ? m_fVol->fatType() :
           m_xVol ? m_xVol->fatType() : 0;
  }
  /** \return the free cluster count. */
  uint32_t freeClusterCount() const {
    return m_fVol ? m_fVol->freeClusterCount() :
     7c6:	bl	b63c <FatPartition::freeClusterCount()>
     7ca:	ldr.w	r3, [r5, #1156]	; 0x484
		return (uint64_t)(sdfs.clusterCount() - sdfs.freeClusterCount())
     7ce:	subs	r4, r4, r0
  uint32_t blocksPerCluster() __attribute__ ((deprecated)) {return sectorsPerCluster();} //NOLINT
#endif  // DOXYGEN_SHOULD_SKIP_THIS
  /** \return the number of bytes in a cluster. */
  uint32_t bytesPerCluster() const {
    return m_fVol ? m_fVol->bytesPerCluster() :
           m_xVol ? m_xVol->bytesPerCluster() : 0;
     7d0:	cbz	r3, 7e4 <SDClass::usedSize()+0x2c>
     7d2:	ldrb	r0, [r3, #6]
     7d4:	mov.w	r3, #512	; 0x200
     7d8:	lsl.w	r0, r3, r0
     7dc:	uxth	r0, r0
     7de:	umull	r0, r1, r0, r4
     7e2:	pop	{r3, r4, r5, pc}
     7e4:	ldr.w	r3, [r5, #1160]	; 0x488
     7e8:	cbz	r3, 804 <SDClass::usedSize()+0x4c>
     7ea:	ldr.w	r0, [r3, #1084]	; 0x43c
     7ee:	umull	r0, r1, r0, r4
     7f2:	pop	{r3, r4, r5, pc}
  /** Change global working volume to this volume. */
  void chvol() {m_cwv = this;}
  /** \return The total number of clusters in the volume. */
  uint32_t clusterCount() const {
    return m_fVol ? m_fVol->clusterCount() :
           m_xVol ? m_xVol->clusterCount() : 0;
     7f4:	ldr.w	r0, [r5, #1160]	; 0x488
     7f8:	cbz	r0, 804 <SDClass::usedSize()+0x4c>
     7fa:	ldr.w	r4, [r0, #1072]	; 0x430
           m_xVol ? m_xVol->fatType() : 0;
  }
  /** \return the free cluster count. */
  uint32_t freeClusterCount() const {
    return m_fVol ? m_fVol->freeClusterCount() :
           m_xVol ? m_xVol->freeClusterCount() : 0;
     7fe:	bl	9b18 <ExFatPartition::freeClusterCount()>
     802:	b.n	7ca <SDClass::usedSize()+0x12>
  /** Change global working volume to this volume. */
  void chvol() {m_cwv = this;}
  /** \return The total number of clusters in the volume. */
  uint32_t clusterCount() const {
    return m_fVol ? m_fVol->clusterCount() :
           m_xVol ? m_xVol->clusterCount() : 0;
     804:	movs	r0, #0
     806:	movs	r1, #0
		  * (uint64_t)sdfs.bytesPerCluster();
	}
     808:	pop	{r3, r4, r5, pc}
     80a:	nop

0000080c <SDFile::position()>:
		if (mode == SeekSet) return sdfatfile.seekSet(pos);
		if (mode == SeekCur) return sdfatfile.seekCur(pos);
		if (mode == SeekEnd) return sdfatfile.seekEnd(pos);
		return false;
	}
	virtual uint64_t position() {
     80c:	ldr	r3, [r0, #92]	; 0x5c
           m_xFile ? m_xFile->contiguousRange(bgnSector, endSector) : false;
  }
  /** \return The current position for a file or directory. */
  uint64_t curPosition() const {
    return m_fFile ? m_fFile->curPosition() :
           m_xFile ? m_xFile->curPosition() : 0;
     80e:	cbz	r3, 816 <SDFile::position()+0xa>
     810:	ldr	r0, [r3, #20]
     812:	movs	r1, #0
     814:	bx	lr
     816:	ldr	r3, [r0, #96]	; 0x60
     818:	cbz	r3, 820 <SDFile::position()+0x14>
     81a:	ldmia.w	r3, {r0, r1}
     81e:	bx	lr
     820:	mov	r0, r3
     822:	mov	r1, r3
		return sdfatfile.curPosition();
	}
     824:	bx	lr
     826:	nop

00000828 <SDFile::size()>:
	virtual uint64_t size() {
     828:	ldr	r3, [r0, #92]	; 0x5c
           m_xFile ? m_xFile->fgets(str, num, delim) : -1;
  }
  /** \return The total number of bytes in a file. */
  uint64_t fileSize() const {
    return m_fFile ? m_fFile->fileSize() :
           m_xFile ? m_xFile->fileSize() : 0;
     82a:	cbz	r3, 832 <SDFile::size()+0xa>
     82c:	ldr	r0, [r3, #28]
     82e:	movs	r1, #0
     830:	bx	lr
     832:	ldr	r3, [r0, #96]	; 0x60
     834:	cbz	r3, 83c <SDFile::size()+0x14>
     836:	ldr	r0, [r3, #16]
     838:	ldr	r1, [r3, #20]
     83a:	bx	lr
     83c:	mov	r0, r3
     83e:	mov	r1, r3
		return sdfatfile.size();
	}
     840:	bx	lr
     842:	nop

00000844 <SDFile::read(void*, unsigned int)>:
		return sdfatfile.available();
	}
	virtual void flush() {
		sdfatfile.flush();
	}
	virtual size_t read(void *buf, size_t nbyte) {
     844:	ldr	r3, [r0, #92]	; 0x5c
   * read() called before a file has been opened, corrupt file system
   * or an I/O error occurred.
   */
  int read(void* buf, size_t count) {
    return m_fFile ? m_fFile->read(buf, count) :
           m_xFile ? m_xFile->read(buf, count) : -1;
     846:	cbz	r3, 84e <SDFile::read(void*, unsigned int)+0xa>
     848:	mov	r0, r3
     84a:	b.w	abb4 <FatFile::read(void*, unsigned int)>
     84e:	ldr	r0, [r0, #96]	; 0x60
     850:	cbz	r0, 856 <SDFile::read(void*, unsigned int)+0x12>
     852:	b.w	8fd4 <ExFatFile::read(void*, unsigned int)>
		return sdfatfile.read(buf, nbyte);
	}
     856:	mov.w	r0, #4294967295
     85a:	bx	lr

0000085c <SDFile::peek()>:
	}
#endif
	virtual size_t write(const void *buf, size_t size) {
		return sdfatfile.write(buf, size);
	}
	virtual int peek() {
     85c:	ldr	r3, [r0, #92]	; 0x5c
   *
   * \return The byte if no error and not at eof else -1;
   */
  int peek() {
    return m_fFile ? m_fFile->peek() :
           m_xFile ? m_xFile->peek() : -1;
     85e:	cbz	r3, 866 <SDFile::peek()+0xa>
     860:	mov	r0, r3
     862:	b.w	ad50 <FatFile::peek()>
     866:	ldr	r0, [r0, #96]	; 0x60
     868:	cbz	r0, 86e <SDFile::peek()+0x12>
     86a:	b.w	9188 <ExFatFile::peek()>
		return sdfatfile.peek();
	}
     86e:	mov.w	r0, #4294967295
     872:	bx	lr

00000874 <SDClass::totalSize()>:
	}
	uint64_t usedSize() {
		return (uint64_t)(sdfs.clusterCount() - sdfs.freeClusterCount())
		  * (uint64_t)sdfs.bytesPerCluster();
	}
	uint64_t totalSize() {
     874:	ldr.w	r2, [r0, #1156]	; 0x484
     878:	cbz	r2, 88e <SDClass::totalSize()+0x1a>
     87a:	ldrb	r1, [r2, #6]
     87c:	mov.w	r3, #512	; 0x200
     880:	ldr	r0, [r2, #28]
     882:	lsls	r3, r1
     884:	subs	r0, #1
     886:	uxth	r3, r3
     888:	umull	r0, r1, r3, r0
     88c:	bx	lr
     88e:	ldr.w	r2, [r0, #1160]	; 0x488
     892:	cbz	r2, 8a2 <SDClass::totalSize()+0x2e>
     894:	ldr.w	r3, [r2, #1072]	; 0x430
     898:	ldr.w	r0, [r2, #1084]	; 0x43c
     89c:	umull	r0, r1, r3, r0
     8a0:	bx	lr
     8a2:	movs	r0, #0
     8a4:	movs	r1, #0
		return (uint64_t)sdfs.clusterCount() * (uint64_t)sdfs.bytesPerCluster();
	}
     8a6:	bx	lr

000008a8 <SDFile::isDirectory()>:
				filename = &zeroterm;
			}
		}
		return filename;
	}
	virtual boolean isDirectory(void) {
     8a8:	ldr	r3, [r0, #92]	; 0x5c
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
  }
  /** \return True if this is a directory else false. */
  bool isDir() const {
    return m_fFile ? m_fFile->isDir() :
           m_xFile ? m_xFile->isDir() : false;
     8aa:	cbz	r3, 8ba <SDFile::isDirectory()+0x12>
#if USE_FAT_FILE_FLAG_CONTIGUOUS
    /** \return True if the file is contiguous. */
  bool isContiguous() const {return m_flags & FILE_FLAG_CONTIGUOUS;}
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
  /** \return True if this is a directory. */
  bool isDir() const {return m_attributes & FILE_ATTR_DIR;}
     8ac:	ldrb	r3, [r3, #0]
     8ae:	tst.w	r3, #112	; 0x70
     8b2:	ite	ne
     8b4:	movne	r0, #1
     8b6:	moveq	r0, #0
     8b8:	bx	lr
     8ba:	ldr	r0, [r0, #96]	; 0x60
     8bc:	cbz	r0, 8cc <SDFile::isDirectory()+0x24>
   */
  bool isBusy();
  /** \return True if the file is contiguous. */
  bool isContiguous() const {return m_flags & FILE_FLAG_CONTIGUOUS;}
  /** \return True if this is a directory. */
  bool isDir() const  {return m_attributes & FILE_ATTR_DIR;}
     8be:	ldrb.w	r3, [r0, #49]	; 0x31
     8c2:	tst.w	r3, #80	; 0x50
     8c6:	ite	ne
     8c8:	movne	r0, #1
     8ca:	moveq	r0, #0
		return sdfatfile.isDirectory();
	}
     8cc:	bx	lr
     8ce:	nop

000008d0 <SDClass::open(char const*, unsigned char)>:
		return sdfs.begin(SdSpiConfig(csPin, SHARED_SPI, SD_SCK_MHZ(16)));
		//return sdfs.begin(csPin, SD_SCK_MHZ(24));
	}
	File open(const char *filepath, uint8_t mode = FILE_READ) {
		oflag_t flags = O_READ;
		if (mode == FILE_WRITE) flags = O_RDWR | O_CREAT | O_AT_END;
     8d0:	cmp	r3, #1
		}
#endif
		return sdfs.begin(SdSpiConfig(csPin, SHARED_SPI, SD_SCK_MHZ(16)));
		//return sdfs.begin(csPin, SD_SCK_MHZ(24));
	}
	File open(const char *filepath, uint8_t mode = FILE_READ) {
     8d2:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     8d6:	mov	r5, r0
     8d8:	sub	sp, #80	; 0x50
		oflag_t flags = O_READ;
		if (mode == FILE_WRITE) flags = O_RDWR | O_CREAT | O_AT_END;
     8da:	beq.n	95e <SDClass::open(char const*, unsigned char)+0x8e>
		else if (mode == FILE_WRITE_BEGIN) flags = O_RDWR | O_CREAT;
     8dc:	cmp	r3, #2
		SDFAT_FILE file = sdfs.open(filepath, flags);
     8de:	add.w	r1, r1, #4
		//return sdfs.begin(csPin, SD_SCK_MHZ(24));
	}
	File open(const char *filepath, uint8_t mode = FILE_READ) {
		oflag_t flags = O_READ;
		if (mode == FILE_WRITE) flags = O_RDWR | O_CREAT | O_AT_END;
		else if (mode == FILE_WRITE_BEGIN) flags = O_RDWR | O_CREAT;
     8e2:	movw	r3, #514	; 0x202
		SDFAT_FILE file = sdfs.open(filepath, flags);
     8e6:	mov	r0, sp
		//return sdfs.begin(csPin, SD_SCK_MHZ(24));
	}
	File open(const char *filepath, uint8_t mode = FILE_READ) {
		oflag_t flags = O_READ;
		if (mode == FILE_WRITE) flags = O_RDWR | O_CREAT | O_AT_END;
		else if (mode == FILE_WRITE_BEGIN) flags = O_RDWR | O_CREAT;
     8e8:	it	ne
     8ea:	movne	r3, #0
		SDFAT_FILE file = sdfs.open(filepath, flags);
     8ec:	bl	c46c <FsVolume::open(char const*, int)>
  bool isHidden() const {
    return m_fFile ? m_fFile->isHidden() :
           m_xFile ? m_xFile->isHidden() : false;
  }
  /** \return True if this is an open file/directory else false. */
  bool isOpen() const {return m_fFile || m_xFile;}
     8f0:	ldr	r3, [sp, #72]	; 0x48
     8f2:	cmp	r3, #0
     8f4:	beq.n	970 <SDClass::open(char const*, unsigned char)+0xa0>
		if (file) return File(new SDFile(file));
     8f6:	movs	r0, #104	; 0x68
/**
 * \class StreamFile
 * \brief StreamFile class.
 */
template<class BaseFile, typename PosType>
class StreamFile : public stream_t, public BaseFile {
     8f8:	add	r7, sp, #16
     8fa:	bl	10068 <operator new(unsigned int)>
//#define BYTE 0
//#endif

class __FlashStringHelper;

class Print
     8fe:	ldrb.w	r2, [sp, #4]
     902:	mov	r4, r0
#define Stream_h

#include <inttypes.h>
#include "Print.h"

class Stream : public Print
     904:	ldr	r3, [pc, #132]	; (98c <SDClass::open(char const*, unsigned char)+0xbc>)
	// Classes derived from File are never meant to be constructed
	// anywhere other than open() in the parent FS class and
	// openNextFile() while traversing a directory.
	// Only the abstract File class which references these derived
	// classes is meant to have a public constructor!
	SDFile(const SDFAT_FILE &file) : sdfatfile(file), filename(nullptr) { }
     906:	ldr	r1, [pc, #136]	; (990 <SDClass::open(char const*, unsigned char)+0xc0>)
{
  public:
	constexpr Print() : write_error(0) {}
     908:	movs	r6, #0
{
  public:
	constexpr Stream() : _timeout(1000), read_error(0) {}
     90a:	mov.w	r8, #1000	; 0x3e8
//#define BYTE 0
//#endif

class __FlashStringHelper;

class Print
     90e:	strb	r2, [r4, #24]
#define Stream_h

#include <inttypes.h>
#include "Print.h"

class Stream : public Print
     910:	str	r3, [r4, #20]
     912:	adds	r0, #36	; 0x24
     914:	ldr	r3, [sp, #8]
     916:	ldrb.w	r2, [sp, #12]
     91a:	str	r1, [r4, #0]
     91c:	mov	r1, r7
     91e:	str	r3, [r4, #28]
     920:	strb.w	r2, [r4, #32]
{
  public:
	constexpr Print() : write_error(0) {}
     924:	strb	r6, [r4, #4]
{
  public:
	constexpr Stream() : _timeout(1000), read_error(0) {}
     926:	strb	r6, [r4, #12]
     928:	str	r6, [r4, #16]
     92a:	str.w	r8, [r4, #8]
     92e:	bl	c214 <FsBaseFile::FsBaseFile(FsBaseFile const&)>
		// or is_base_of
		//static_assert(std::is_same<decltype(*file),File>::value,
			//"File(File *file) constructor only accepts pointers "
			//"to derived classes, not File itself");
		f = file;
		if (f) f->refcount++;
     932:	ldr	r3, [r4, #16]
};
/**
 * \class FsFile
 * \brief FsBaseFile file with Arduino Stream.
 */
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
     934:	ldr	r1, [pc, #92]	; (994 <SDClass::open(char const*, unsigned char)+0xc4>)
     936:	adds	r3, #1
#define FILE_WHOAMI

class File : public Stream {
public:
	constexpr File() : f(nullptr) { }
	File(File *file) {
     938:	ldr	r2, [pc, #92]	; (998 <SDClass::open(char const*, unsigned char)+0xc8>)
     93a:	str	r6, [r4, #100]	; 0x64
     93c:	strb	r6, [r5, #4]
     93e:	str.w	r8, [r5, #8]
     942:	strb	r6, [r5, #12]
		// can we use is_same or is_polymorphic with static_assert?
		// or is_base_of
		//static_assert(std::is_same<decltype(*file),File>::value,
			//"File(File *file) constructor only accepts pointers "
			//"to derived classes, not File itself");
		f = file;
     944:	str	r4, [r5, #16]
     946:	str	r1, [r4, #20]
		if (f) f->refcount++;
     948:	str	r3, [r4, #16]
#define FILE_WHOAMI

class File : public Stream {
public:
	constexpr File() : f(nullptr) { }
	File(File *file) {
     94a:	str	r2, [r5, #0]
     94c:	ldr	r3, [pc, #76]	; (99c <SDClass::open(char const*, unsigned char)+0xcc>)
   */
  FsBaseFile(const char* path, oflag_t oflag) {
    open(path, oflag);
  }

  ~FsBaseFile() {close();}
     94e:	mov	r0, r7
     950:	str	r3, [sp, #0]
     952:	bl	c298 <FsBaseFile::close()>
		if (mode == FILE_WRITE) flags = O_RDWR | O_CREAT | O_AT_END;
		else if (mode == FILE_WRITE_BEGIN) flags = O_RDWR | O_CREAT;
		SDFAT_FILE file = sdfs.open(filepath, flags);
		if (file) return File(new SDFile(file));
		return File();
	}
     956:	mov	r0, r5
     958:	add	sp, #80	; 0x50
     95a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return sdfs.begin(SdSpiConfig(csPin, SHARED_SPI, SD_SCK_MHZ(16)));
		//return sdfs.begin(csPin, SD_SCK_MHZ(24));
	}
	File open(const char *filepath, uint8_t mode = FILE_READ) {
		oflag_t flags = O_READ;
		if (mode == FILE_WRITE) flags = O_RDWR | O_CREAT | O_AT_END;
     95e:	movw	r3, #16898	; 0x4202
		else if (mode == FILE_WRITE_BEGIN) flags = O_RDWR | O_CREAT;
		SDFAT_FILE file = sdfs.open(filepath, flags);
     962:	adds	r1, #4
     964:	mov	r0, sp
     966:	bl	c46c <FsVolume::open(char const*, int)>
  bool isHidden() const {
    return m_fFile ? m_fFile->isHidden() :
           m_xFile ? m_xFile->isHidden() : false;
  }
  /** \return True if this is an open file/directory else false. */
  bool isOpen() const {return m_fFile || m_xFile;}
     96a:	ldr	r3, [sp, #72]	; 0x48
     96c:	cmp	r3, #0
     96e:	bne.n	8f6 <SDClass::open(char const*, unsigned char)+0x26>
     970:	ldr	r3, [sp, #76]	; 0x4c
     972:	cmp	r3, #0
     974:	bne.n	8f6 <SDClass::open(char const*, unsigned char)+0x26>
     976:	mov.w	r1, #1000	; 0x3e8

#define FILE_WHOAMI

class File : public Stream {
public:
	constexpr File() : f(nullptr) { }
     97a:	ldr	r2, [pc, #28]	; (998 <SDClass::open(char const*, unsigned char)+0xc8>)
     97c:	strb	r3, [r5, #4]
     97e:	add	r7, sp, #16
     980:	strb	r3, [r5, #12]
     982:	str	r3, [r5, #16]
     984:	str	r1, [r5, #8]
     986:	str	r2, [r5, #0]
     988:	b.n	94c <SDClass::open(char const*, unsigned char)+0x7c>
     98a:	nop
     98c:	.word	0x20000008
     990:	.word	0x200000d4
     994:	.word	0x20000050
     998:	.word	0x20000074
     99c:	.word	0x2000002c

000009a0 <StreamFile<FsBaseFile, unsigned long long>::flush()>:
   */
  int available() {
    return BaseFile::available();
  }
  /** Ensure that any bytes written to the file are saved to the SD card. */
  void flush() {
     9a0:	ldr	r3, [r0, #72]	; 0x48
   *
   * \return true for success or false for failure.
   */
  bool sync() {
    return m_fFile ? m_fFile->sync() :
           m_xFile ? m_xFile->sync() : false;
     9a2:	cbz	r3, 9aa <StreamFile<FsBaseFile, unsigned long long>::flush()+0xa>
     9a4:	mov	r0, r3
     9a6:	b.w	b214 <FatFile::sync()>
     9aa:	ldr	r0, [r0, #76]	; 0x4c
     9ac:	cbz	r0, 9b2 <StreamFile<FsBaseFile, unsigned long long>::flush()+0x12>
     9ae:	b.w	a050 <ExFatFile::sync()>
     9b2:	bx	lr

000009b4 <SDFile::write(void const*, unsigned int)>:
	virtual void whoami() {
		Serial.printf("   SDFile this=%x, refcount=%u\n",
			(int)this, getRefcount());
	}
#endif
	virtual size_t write(const void *buf, size_t size) {
     9b4:	ldr	r3, [r0, #92]	; 0x5c
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const void* buf, size_t count) {
    return m_fFile ? m_fFile->write(buf, count) :
           m_xFile ? m_xFile->write(buf, count) : 0;
     9b6:	cbz	r3, 9be <SDFile::write(void const*, unsigned int)+0xa>
     9b8:	mov	r0, r3
     9ba:	b.w	b298 <FatFile::write(void const*, unsigned int)>
     9be:	ldr	r0, [r0, #96]	; 0x60
     9c0:	cbz	r0, 9c6 <SDFile::write(void const*, unsigned int)+0x12>
     9c2:	b.w	a460 <ExFatFile::write(void const*, unsigned int)>
		return sdfatfile.write(buf, size);
	}
     9c6:	bx	lr

000009c8 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)>:
   * \param[in] size Number of bytes to write.
   *
   * \return For success write() returns the number of bytes written, always
   * \a size.
   */
  size_t write(const uint8_t* buffer, size_t size) {
     9c8:	ldr	r3, [r0, #72]	; 0x48
     9ca:	cbz	r3, 9d2 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)+0xa>
     9cc:	mov	r0, r3
     9ce:	b.w	b298 <FatFile::write(void const*, unsigned int)>
     9d2:	ldr	r0, [r0, #76]	; 0x4c
     9d4:	cbz	r0, 9da <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)+0x12>
     9d6:	b.w	a460 <ExFatFile::write(void const*, unsigned int)>
    return BaseFile::write(buffer, size);
  }
     9da:	bx	lr

000009dc <StreamFile<FsBaseFile, unsigned long long>::available()>:
  StreamFile() {}

  /** \return number of bytes available from the current position to EOF
   *   or INT_MAX if more than INT_MAX bytes are available.
   */
  int available() {
     9dc:	ldr	r2, [r0, #72]	; 0x48
  /** \return number of bytes available from the current position to EOF
   *   or INT_MAX if more than INT_MAX bytes are available.
   */
  int available() const {
    return m_fFile ? m_fFile->available() :
           m_xFile ? m_xFile->available() : 0;
     9de:	cbz	r2, 9fa <StreamFile<FsBaseFile, unsigned long long>::available()+0x1e>
  }
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint32_t available32() const {
    return isFile() ? fileSize() - curPosition() : 0;
     9e0:	ldrb	r3, [r2, #0]
     9e2:	and.w	r3, r3, #8
     9e6:	and.w	r0, r3, #255	; 0xff
     9ea:	cbz	r3, a30 <StreamFile<FsBaseFile, unsigned long long>::available()+0x54>
   * Zero is returned for directory files.
   *
   */
  int available() const {
    uint32_t n = available32();
    return n > INT_MAX ? INT_MAX : n;
     9ec:	ldr	r3, [r2, #28]
     9ee:	ldr	r0, [r2, #20]
     9f0:	subs	r0, r3, r0
     9f2:	it	mi
     9f4:	mvnmi.w	r0, #2147483648	; 0x80000000
     9f8:	bx	lr
     9fa:	ldr	r1, [r0, #76]	; 0x4c
     9fc:	cbz	r1, a32 <StreamFile<FsBaseFile, unsigned long long>::available()+0x56>
  }
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint64_t available64() {
    return isFile() ? fileSize() - curPosition() : 0;
     9fe:	ldrb.w	r3, [r1, #49]	; 0x31
     a02:	and.w	r3, r3, #8
     a06:	and.w	r0, r3, #255	; 0xff
     a0a:	cbz	r3, a30 <StreamFile<FsBaseFile, unsigned long long>::available()+0x54>
     a0c:	ldrd	r2, r3, [r1, #16]
     a10:	ldrd	r0, r1, [r1]
     a14:	push	{r4, r5}
     a16:	subs	r0, r2, r0
     a18:	mov.w	r5, #0
     a1c:	mvn.w	r4, #2147483648	; 0x80000000
     a20:	sbc.w	r1, r3, r1
     a24:	cmp	r5, r1
     a26:	it	eq
     a28:	cmpeq	r4, r0
     a2a:	bcs.n	a2e <StreamFile<FsBaseFile, unsigned long long>::available()+0x52>
     a2c:	mov	r0, r4
    return BaseFile::available();
  }
     a2e:	pop	{r4, r5}
     a30:	bx	lr
     a32:	mov	r0, r1
     a34:	bx	lr
     a36:	nop

00000a38 <SDFile::seek(unsigned long long, int)>:
		return sdfatfile.read(buf, nbyte);
	}
	virtual bool truncate(uint64_t size=0) {
		return sdfatfile.truncate(size);
	}
	virtual bool seek(uint64_t pos, int mode = SeekSet) {
     a38:	push	{r4, r6, r7}
     a3a:	ldr	r4, [sp, #12]
     a3c:	mov	r6, r2
     a3e:	mov	r7, r3
		if (mode == SeekSet) return sdfatfile.seekSet(pos);
     a40:	cbz	r4, a50 <SDFile::seek(unsigned long long, int)+0x18>
		if (mode == SeekCur) return sdfatfile.seekCur(pos);
     a42:	cmp	r4, #1
     a44:	beq.n	a84 <SDFile::seek(unsigned long long, int)+0x4c>
		if (mode == SeekEnd) return sdfatfile.seekEnd(pos);
     a46:	cmp	r4, #2
     a48:	beq.n	a66 <SDFile::seek(unsigned long long, int)+0x2e>
		return false;
	}
     a4a:	movs	r0, #0
     a4c:	pop	{r4, r6, r7}
     a4e:	bx	lr
     a50:	ldr	r4, [r0, #92]	; 0x5c
   *
   * \return true for success or false for failure.
   */
  bool seekSet(uint64_t pos) {
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
           m_xFile ? m_xFile->seekSet(pos) : false;
     a52:	cbz	r4, a8c <SDFile::seek(unsigned long long, int)+0x54>
   * \param[in] pos The new position in bytes from the beginning of the file.
   *
   * \return true for success or false for failure.
   */
  bool seekSet(uint64_t pos) {
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
     a54:	cmp	r3, #1
     a56:	it	eq
     a58:	cmpeq	r2, #0
     a5a:	bcs.n	a4a <SDFile::seek(unsigned long long, int)+0x12>
     a5c:	mov	r0, r4
     a5e:	mov	r1, r2
     a60:	pop	{r4, r6, r7}
     a62:	b.w	affc <FatFile::seekSet(unsigned long)>
     a66:	ldr	r3, [r0, #92]	; 0x5c
           m_xFile ? m_xFile->fgets(str, num, delim) : -1;
  }
  /** \return The total number of bytes in a file. */
  uint64_t fileSize() const {
    return m_fFile ? m_fFile->fileSize() :
           m_xFile ? m_xFile->fileSize() : 0;
     a68:	cbz	r3, a98 <SDFile::seek(unsigned long long, int)+0x60>
   * Can't be used for directory files since file size is not defined.
   * \param[in] offset The new position in bytes from end-of-file.
   * \return true for success or false for failure.
   */
  bool seekEnd(int64_t offset = 0) {
    return seekSet(fileSize() + offset);
     a6a:	ldr	r2, [r3, #28]
     a6c:	adds	r6, r6, r2
     a6e:	adc.w	r7, r7, #0
   * \param[in] pos The new position in bytes from the beginning of the file.
   *
   * \return true for success or false for failure.
   */
  bool seekSet(uint64_t pos) {
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
     a72:	cmp	r7, #1
     a74:	it	eq
     a76:	cmpeq	r6, #0
     a78:	bcs.n	a4a <SDFile::seek(unsigned long long, int)+0x12>
     a7a:	mov	r1, r6
     a7c:	mov	r0, r3
     a7e:	pop	{r4, r6, r7}
     a80:	b.w	affc <FatFile::seekSet(unsigned long)>
     a84:	ldr	r3, [r0, #92]	; 0x5c
           m_xFile ? m_xFile->contiguousRange(bgnSector, endSector) : false;
  }
  /** \return The current position for a file or directory. */
  uint64_t curPosition() const {
    return m_fFile ? m_fFile->curPosition() :
           m_xFile ? m_xFile->curPosition() : 0;
     a86:	cbz	r3, aae <SDFile::seek(unsigned long long, int)+0x76>
  /** Set the files position to current position + \a pos. See seekSet().
   * \param[in] offset The new position in bytes from the current position.
   * \return true for success or false for failure.
   */
  bool seekCur(int64_t offset) {
    return seekSet(curPosition() + offset);
     a88:	ldr	r2, [r3, #20]
     a8a:	b.n	a6c <SDFile::seek(unsigned long long, int)+0x34>
   *
   * \return true for success or false for failure.
   */
  bool seekSet(uint64_t pos) {
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
           m_xFile ? m_xFile->seekSet(pos) : false;
     a8c:	ldr	r0, [r0, #96]	; 0x60
     a8e:	cmp	r0, #0
     a90:	beq.n	a4a <SDFile::seek(unsigned long long, int)+0x12>
     a92:	pop	{r4, r6, r7}
     a94:	b.w	91b4 <ExFatFile::seekSet(unsigned long long)>
           m_xFile ? m_xFile->fgets(str, num, delim) : -1;
  }
  /** \return The total number of bytes in a file. */
  uint64_t fileSize() const {
    return m_fFile ? m_fFile->fileSize() :
           m_xFile ? m_xFile->fileSize() : 0;
     a98:	ldr	r3, [r0, #96]	; 0x60
     a9a:	cmp	r3, #0
     a9c:	beq.n	a4a <SDFile::seek(unsigned long long, int)+0x12>
   *
   * \return true for success or false for failure.
   */
  bool seekSet(uint64_t pos) {
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
           m_xFile ? m_xFile->seekSet(pos) : false;
     a9e:	mov	r0, r3
     aa0:	ldrd	r2, r3, [r3, #16]
     aa4:	adds	r2, r2, r6
     aa6:	adcs	r3, r7
     aa8:	pop	{r4, r6, r7}
     aaa:	b.w	91b4 <ExFatFile::seekSet(unsigned long long)>
           m_xFile ? m_xFile->contiguousRange(bgnSector, endSector) : false;
  }
  /** \return The current position for a file or directory. */
  uint64_t curPosition() const {
    return m_fFile ? m_fFile->curPosition() :
           m_xFile ? m_xFile->curPosition() : 0;
     aae:	ldr	r3, [r0, #96]	; 0x60
     ab0:	cmp	r3, #0
     ab2:	beq.n	a4a <SDFile::seek(unsigned long long, int)+0x12>
   *
   * \return true for success or false for failure.
   */
  bool seekSet(uint64_t pos) {
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
           m_xFile ? m_xFile->seekSet(pos) : false;
     ab4:	mov	r0, r3
     ab6:	ldrd	r2, r3, [r3]
     aba:	adds	r2, r2, r6
     abc:	adcs	r3, r7
     abe:	b.n	a92 <SDFile::seek(unsigned long long, int)+0x5a>

00000ac0 <File::~File()>:
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
     ac0:	ldr	r3, [pc, #32]	; (ae4 <File::~File()+0x24>)
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
     ac2:	ldr	r2, [r0, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
     ac4:	push	{r4, lr}
     ac6:	mov	r4, r0
     ac8:	str	r3, [r0, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
     aca:	cbz	r2, ade <File::~File()+0x1e>
     acc:	ldr	r3, [r2, #16]
     ace:	subs	r3, #1
     ad0:	str	r3, [r2, #16]
     ad2:	cbnz	r3, ade <File::~File()+0x1e>
     ad4:	ldr	r0, [r0, #16]
     ad6:	cbz	r0, ade <File::~File()+0x1e>
     ad8:	ldr	r3, [r0, #0]
     ada:	ldr	r3, [r3, #32]
     adc:	blx	r3
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
		invalidate();
	}
     ade:	mov	r0, r4
     ae0:	pop	{r4, pc}
     ae2:	nop
     ae4:	.word	0x20000074

00000ae8 <SDFile::~SDFile()>:
	// Only the abstract File class which references these derived
	// classes is meant to have a public constructor!
	SDFile(const SDFAT_FILE &file) : sdfatfile(file), filename(nullptr) { }
	friend class SDClass;
public:
	virtual ~SDFile(void) {
     ae8:	push	{r3, r4, r5, lr}
     aea:	ldr	r2, [pc, #84]	; (b40 <SDFile::~SDFile()+0x58>)
     aec:	mov	r4, r0
  bool isHidden() const {
    return m_fFile ? m_fFile->isHidden() :
           m_xFile ? m_xFile->isHidden() : false;
  }
  /** \return True if this is an open file/directory else false. */
  bool isOpen() const {return m_fFile || m_xFile;}
     aee:	ldr	r3, [r0, #92]	; 0x5c
		if (sdfatfile) sdfatfile.close();
     af0:	add.w	r5, r0, #36	; 0x24
	// Only the abstract File class which references these derived
	// classes is meant to have a public constructor!
	SDFile(const SDFAT_FILE &file) : sdfatfile(file), filename(nullptr) { }
	friend class SDClass;
public:
	virtual ~SDFile(void) {
     af4:	str	r2, [r0, #0]
     af6:	cbz	r3, b36 <SDFile::~SDFile()+0x4e>
		if (sdfatfile) sdfatfile.close();
     af8:	mov	r0, r5
     afa:	bl	c298 <FsBaseFile::close()>
		if (filename) free(filename);
     afe:	ldr	r0, [r4, #100]	; 0x64
     b00:	cbz	r0, b06 <SDFile::~SDFile()+0x1e>
     b02:	bl	10478 <free>
/**
 * \class StreamFile
 * \brief StreamFile class.
 */
template<class BaseFile, typename PosType>
class StreamFile : public stream_t, public BaseFile {
     b06:	ldr	r3, [pc, #60]	; (b44 <SDFile::~SDFile()+0x5c>)
   */
  FsBaseFile(const char* path, oflag_t oflag) {
    open(path, oflag);
  }

  ~FsBaseFile() {close();}
     b08:	mov	r0, r5
     b0a:	str	r3, [r4, #20]
     b0c:	bl	c298 <FsBaseFile::close()>
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
     b10:	ldr	r3, [pc, #52]	; (b48 <SDFile::~SDFile()+0x60>)
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
     b12:	ldr	r2, [r4, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
     b14:	str	r3, [r4, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
     b16:	cbz	r2, b2a <SDFile::~SDFile()+0x42>
     b18:	ldr	r3, [r2, #16]
     b1a:	subs	r3, #1
     b1c:	str	r3, [r2, #16]
     b1e:	cbnz	r3, b2a <SDFile::~SDFile()+0x42>
     b20:	ldr	r0, [r4, #16]
     b22:	cbz	r0, b2a <SDFile::~SDFile()+0x42>
     b24:	ldr	r3, [r0, #0]
     b26:	ldr	r3, [r3, #32]
     b28:	blx	r3
	}
     b2a:	mov	r0, r4
     b2c:	movs	r1, #104	; 0x68
     b2e:	bl	1006c <operator delete(void*, unsigned int)>
     b32:	mov	r0, r4
     b34:	pop	{r3, r4, r5, pc}
  bool isHidden() const {
    return m_fFile ? m_fFile->isHidden() :
           m_xFile ? m_xFile->isHidden() : false;
  }
  /** \return True if this is an open file/directory else false. */
  bool isOpen() const {return m_fFile || m_xFile;}
     b36:	ldr	r3, [r0, #96]	; 0x60
     b38:	cmp	r3, #0
     b3a:	bne.n	af8 <SDFile::~SDFile()+0x10>
     b3c:	b.n	afe <SDFile::~SDFile()+0x16>
     b3e:	nop
     b40:	.word	0x200000d4
     b44:	.word	0x2000002c
     b48:	.word	0x20000074

00000b4c <File::~File()>:
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
     b4c:	ldr	r3, [pc, #40]	; (b78 <File::~File()+0x2c>)
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
     b4e:	ldr	r2, [r0, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
     b50:	push	{r4, lr}
     b52:	mov	r4, r0
     b54:	str	r3, [r0, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
     b56:	cbz	r2, b6a <File::~File()+0x1e>
     b58:	ldr	r3, [r2, #16]
     b5a:	subs	r3, #1
     b5c:	str	r3, [r2, #16]
     b5e:	cbnz	r3, b6a <File::~File()+0x1e>
     b60:	ldr	r0, [r0, #16]
     b62:	cbz	r0, b6a <File::~File()+0x1e>
     b64:	ldr	r3, [r0, #0]
     b66:	ldr	r3, [r3, #32]
     b68:	blx	r3
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
		invalidate();
	}
     b6a:	mov	r0, r4
     b6c:	movs	r1, #20
     b6e:	bl	1006c <operator delete(void*, unsigned int)>
     b72:	mov	r0, r4
     b74:	pop	{r4, pc}
     b76:	nop
     b78:	.word	0x20000074

00000b7c <MTPStorage_SD::~MTPStorage_SD()>:

  void mtp_yield(void);


// Storage implementation for SD. SD needs to be already initialized.
class MTPStorage_SD : public MTPStorageInterface, mSD_Base
     b7c:	push	{r3, r4, r5, lr}
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
     b7e:	ldr.w	r2, [r0, #224]	; 0xe0
     b82:	mov	r4, r0
     b84:	ldr	r3, [pc, #100]	; (bec <MTPStorage_SD::~MTPStorage_SD()+0x70>)
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
     b86:	ldr	r5, [pc, #104]	; (bf0 <MTPStorage_SD::~MTPStorage_SD()+0x74>)
     b88:	str	r3, [r0, #0]
     b8a:	str.w	r5, [r0, #208]	; 0xd0
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
     b8e:	cbz	r2, b98 <MTPStorage_SD::~MTPStorage_SD()+0x1c>
     b90:	ldr	r3, [r2, #16]
     b92:	subs	r3, #1
     b94:	str	r3, [r2, #16]
     b96:	cbz	r3, bcc <MTPStorage_SD::~MTPStorage_SD()+0x50>
     b98:	ldr.w	r2, [r4, #204]	; 0xcc
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
     b9c:	str.w	r5, [r4, #188]	; 0xbc
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
     ba0:	cbz	r2, baa <MTPStorage_SD::~MTPStorage_SD()+0x2e>
     ba2:	ldr	r3, [r2, #16]
     ba4:	subs	r3, #1
     ba6:	str	r3, [r2, #16]
     ba8:	cbz	r3, bdc <MTPStorage_SD::~MTPStorage_SD()+0x60>
     baa:	ldr.w	r2, [r4, #184]	; 0xb8
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
     bae:	str.w	r5, [r4, #168]	; 0xa8
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
     bb2:	cbz	r2, bc8 <MTPStorage_SD::~MTPStorage_SD()+0x4c>
     bb4:	ldr	r3, [r2, #16]
     bb6:	subs	r3, #1
     bb8:	str	r3, [r2, #16]
     bba:	cbnz	r3, bc8 <MTPStorage_SD::~MTPStorage_SD()+0x4c>
     bbc:	ldr.w	r0, [r4, #184]	; 0xb8
     bc0:	cbz	r0, bc8 <MTPStorage_SD::~MTPStorage_SD()+0x4c>
     bc2:	ldr	r3, [r0, #0]
     bc4:	ldr	r3, [r3, #32]
     bc6:	blx	r3
     bc8:	mov	r0, r4
     bca:	pop	{r3, r4, r5, pc}
     bcc:	ldr.w	r0, [r0, #224]	; 0xe0
     bd0:	cmp	r0, #0
     bd2:	beq.n	b98 <MTPStorage_SD::~MTPStorage_SD()+0x1c>
     bd4:	ldr	r3, [r0, #0]
     bd6:	ldr	r3, [r3, #32]
     bd8:	blx	r3
     bda:	b.n	b98 <MTPStorage_SD::~MTPStorage_SD()+0x1c>
     bdc:	ldr.w	r0, [r4, #204]	; 0xcc
     be0:	cmp	r0, #0
     be2:	beq.n	baa <MTPStorage_SD::~MTPStorage_SD()+0x2e>
     be4:	ldr	r3, [r0, #0]
     be6:	ldr	r3, [r3, #32]
     be8:	blx	r3
     bea:	b.n	baa <MTPStorage_SD::~MTPStorage_SD()+0x2e>
     bec:	.word	0x200002e4
     bf0:	.word	0x20000074

00000bf4 <SDFile::~SDFile()>:
	// Only the abstract File class which references these derived
	// classes is meant to have a public constructor!
	SDFile(const SDFAT_FILE &file) : sdfatfile(file), filename(nullptr) { }
	friend class SDClass;
public:
	virtual ~SDFile(void) {
     bf4:	push	{r3, r4, r5, lr}
     bf6:	ldr	r2, [pc, #76]	; (c44 <SDFile::~SDFile()+0x50>)
     bf8:	mov	r4, r0
     bfa:	ldr	r3, [r0, #92]	; 0x5c
		if (sdfatfile) sdfatfile.close();
     bfc:	add.w	r5, r0, #36	; 0x24
	// Only the abstract File class which references these derived
	// classes is meant to have a public constructor!
	SDFile(const SDFAT_FILE &file) : sdfatfile(file), filename(nullptr) { }
	friend class SDClass;
public:
	virtual ~SDFile(void) {
     c00:	str	r2, [r0, #0]
     c02:	cbz	r3, c3a <SDFile::~SDFile()+0x46>
		if (sdfatfile) sdfatfile.close();
     c04:	mov	r0, r5
     c06:	bl	c298 <FsBaseFile::close()>
		if (filename) free(filename);
     c0a:	ldr	r0, [r4, #100]	; 0x64
     c0c:	cbz	r0, c12 <SDFile::~SDFile()+0x1e>
     c0e:	bl	10478 <free>
     c12:	ldr	r3, [pc, #52]	; (c48 <SDFile::~SDFile()+0x54>)
   */
  FsBaseFile(const char* path, oflag_t oflag) {
    open(path, oflag);
  }

  ~FsBaseFile() {close();}
     c14:	mov	r0, r5
     c16:	str	r3, [r4, #20]
     c18:	bl	c298 <FsBaseFile::close()>
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
     c1c:	ldr	r3, [pc, #44]	; (c4c <SDFile::~SDFile()+0x58>)
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
     c1e:	ldr	r2, [r4, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
     c20:	str	r3, [r4, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
     c22:	cbz	r2, c36 <SDFile::~SDFile()+0x42>
     c24:	ldr	r3, [r2, #16]
     c26:	subs	r3, #1
     c28:	str	r3, [r2, #16]
     c2a:	cbnz	r3, c36 <SDFile::~SDFile()+0x42>
     c2c:	ldr	r0, [r4, #16]
     c2e:	cbz	r0, c36 <SDFile::~SDFile()+0x42>
     c30:	ldr	r3, [r0, #0]
     c32:	ldr	r3, [r3, #32]
     c34:	blx	r3
	}
     c36:	mov	r0, r4
     c38:	pop	{r3, r4, r5, pc}
  bool isHidden() const {
    return m_fFile ? m_fFile->isHidden() :
           m_xFile ? m_xFile->isHidden() : false;
  }
  /** \return True if this is an open file/directory else false. */
  bool isOpen() const {return m_fFile || m_xFile;}
     c3a:	ldr	r3, [r0, #96]	; 0x60
     c3c:	cmp	r3, #0
     c3e:	bne.n	c04 <SDFile::~SDFile()+0x10>
     c40:	b.n	c0a <SDFile::~SDFile()+0x16>
     c42:	nop
     c44:	.word	0x200000d4
     c48:	.word	0x2000002c
     c4c:	.word	0x20000074

00000c50 <storage_configure()>:
MTPStorage_SD storage;
MTPD       mtpd(&storage);


void storage_configure()
{
     c50:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  #if USE_SD==1
    #if defined SD_SCK
      SPI.setMOSI(SD_MOSI);
     c54:	movs	r1, #11
MTPStorage_SD storage;
MTPD       mtpd(&storage);


void storage_configure()
{
     c56:	sub	sp, #52	; 0x34
  #if USE_SD==1
    #if defined SD_SCK
      SPI.setMOSI(SD_MOSI);
     c58:	ldr	r0, [pc, #384]	; (ddc <storage_configure()+0x18c>)
     c5a:	movs	r6, #0
     c5c:	bl	7ea8 <SPIClass::setMOSI(unsigned char)>
      SPI.setMISO(SD_MISO);
     c60:	movs	r1, #12
     c62:	ldr	r0, [pc, #376]	; (ddc <storage_configure()+0x18c>)
     c64:	movs	r7, #10
     c66:	bl	7efc <SPIClass::setMISO(unsigned char)>
      SPI.setSCK(SD_SCK);
     c6a:	movs	r1, #13
     c6c:	ldr	r0, [pc, #364]	; (ddc <storage_configure()+0x18c>)
     c6e:	add	r4, sp, #24
     c70:	bl	7f48 <SPIClass::setSCK(unsigned char)>
          }
        }
        else if(cs[ii]<BUILTIN_SDCARD)
      #endif
      {
        pinMode(cs[ii],OUTPUT); digitalWriteFast(cs[ii],HIGH);
     c74:	movs	r1, #1
     c76:	movs	r0, #10
   *
   * \param[in] config SPI configuration.
   * \return generic card pointer.
   */
  SdCard* newCard(SdSpiConfig config) {
    m_spiCard.begin(config);
     c78:	ldr	r5, [pc, #356]	; (de0 <storage_configure()+0x190>)
     c7a:	bl	f5d0 <pinMode>
     c7e:	ldr.w	lr, [pc, #384]	; e00 <storage_configure()+0x1b0>
			} else if (pin == 8) {
				CORE_PIN8_PORTSET = CORE_PIN8_BITMASK;
			} else if (pin == 9) {
				CORE_PIN9_PORTSET = CORE_PIN9_BITMASK;
			} else if (pin == 10) {
				CORE_PIN10_PORTSET = CORE_PIN10_BITMASK;
     c82:	ldr	r2, [pc, #352]	; (de4 <storage_configure()+0x194>)
     c84:	movs	r1, #1
     c86:	add	r3, sp, #12
     c88:	str.w	r1, [r2, #132]	; 0x84
     c8c:	strb.w	r7, [sp, #12]
     c90:	strb.w	r6, [sp, #13]
     c94:	str	r6, [sp, #20]
     c96:	str.w	lr, [sp, #16]
     c9a:	ldmia.w	r3, {r0, r1, r2}
     c9e:	add	r3, sp, #36	; 0x24
     ca0:	stmia.w	r4, {r0, r1, r2}
     ca4:	strb.w	r7, [sp, #24]
     ca8:	add.w	r7, r5, #1184	; 0x4a0
     cac:	strb.w	r6, [sp, #25]
     cb0:	str.w	lr, [sp, #28]
     cb4:	str	r6, [sp, #32]
     cb6:	ldmia.w	r4, {r0, r1, r2}
     cba:	stmia.w	r3, {r0, r1, r2}
     cbe:	mov	r0, r7
     cc0:	ldmia	r3, {r1, r2, r3}
     cc2:	bl	c710 <SdSpiCard::begin(SdSpiConfig)>
   * \param[in] spiConfig SPI configuration.
   * \return true for success or false for failure.
   */
  bool cardBegin(SdSpiConfig spiConfig) {
    m_card = m_cardFactory.newCard(spiConfig);
    return m_card && !m_card->errorCode();
     cc6:	ldrb.w	r3, [r5, #1207]	; 0x4b7
   *
   * \param[in] spiConfig SPI configuration.
   * \return true for success or false for failure.
   */
  bool cardBegin(SdSpiConfig spiConfig) {
    m_card = m_cardFactory.newCard(spiConfig);
     cca:	str.w	r7, [r5, #1168]	; 0x490
    return m_card && !m_card->errorCode();
     cce:	cbz	r3, cee <storage_configure()+0x9e>
        if(!sdx[ii].sdfs.begin(SdSpiConfig(cs[ii], SHARED_SPI, SPI_SPEED))) 
        { Serial.printf("SD Storage %d %d %s failed or missing",ii,cs[ii],sd_str[ii]);  Serial.println();
     cd0:	ldr	r0, [pc, #276]	; (de8 <storage_configure()+0x198>)
     cd2:	movs	r3, #10
     cd4:	movs	r2, #0
     cd6:	ldr	r1, [pc, #276]	; (dec <storage_configure()+0x19c>)
     cd8:	ldr	r4, [r0, #0]
     cda:	ldr	r0, [pc, #276]	; (df0 <storage_configure()+0x1a0>)
     cdc:	str	r4, [sp, #0]
     cde:	bl	ff78 <Print::printf(char const*, ...)>
	size_t println(int n)				{ return print(n) + println(); }
	size_t println(unsigned int n)			{ return print(n) + println(); }
	size_t println(long n)				{ return print(n) + println(); }
	size_t println(unsigned long n)			{ return print(n) + println(); }
	size_t println(int64_t n)			{ return print(n) + println(); }
	size_t println(uint64_t n)			{ return print(n) + println(); }
     ce2:	ldr	r0, [pc, #268]	; (df0 <storage_configure()+0x1a0>)
      uint64_t usedSize  = ramfs[ii].usedSize();
      Serial.printf("Storage %d %s ",ii,lfs_str[ii]); Serial.print(totalSize); Serial.print(" "); Serial.println(usedSize);

    }
    #endif
}
     ce4:	add	sp, #52	; 0x34
     ce6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
     cea:	b.w	ff48 <Print::println()>
   *
   * \param[in] spiConfig SPI configuration.
   * \return true for success or false for failure.
   */
  bool begin(SdSpiConfig spiConfig) {
    return cardBegin(spiConfig) && Vol::begin(m_card);
     cee:	mov	r1, r7
     cf0:	adds	r0, r5, #4
     cf2:	bl	c3a0 <FsVolume::begin(BlockDeviceInterface*)>
     cf6:	cmp	r0, #0
     cf8:	beq.n	cd0 <storage_configure()+0x80>
    mSD_Base() {
      fsCount = 0;
    }

    void sd_addFilesystem(FS &fs, const char *name) {
      if (fsCount < MTPD_MAX_FILESYSTEMS) {
     cfa:	ldr	r1, [pc, #248]	; (df4 <storage_configure()+0x1a4>)
        if(!sdx[ii].sdfs.begin(SdSpiConfig(cs[ii], SHARED_SPI, SPI_SPEED))) 
        { Serial.printf("SD Storage %d %d %s failed or missing",ii,cs[ii],sd_str[ii]);  Serial.println();
        }
        else
        {
          storage.addFilesystem(sdx[ii], sd_str[ii]);
     cfc:	ldr.w	r8, [pc, #232]	; de8 <storage_configure()+0x198>
     d00:	ldr	r3, [r1, #4]
     d02:	ldr.w	r2, [r8]
     d06:	cmp	r3, #19
     d08:	bgt.n	d16 <storage_configure()+0xc6>
        sd_name[fsCount] = name;
     d0a:	add.w	r4, r1, r3, lsl #2
        sdx[fsCount++] = &fs;
     d0e:	adds	r0, r3, #1
      fsCount = 0;
    }

    void sd_addFilesystem(FS &fs, const char *name) {
      if (fsCount < MTPD_MAX_FILESYSTEMS) {
        sd_name[fsCount] = name;
     d10:	str	r2, [r4, #8]
        sdx[fsCount++] = &fs;
     d12:	str	r0, [r1, #4]
     d14:	str	r5, [r4, #88]	; 0x58
     d16:	ldr.w	r0, [r5, #1156]	; 0x484
     d1a:	ldr	r3, [pc, #196]	; (de0 <storage_configure()+0x190>)
     d1c:	cmp	r0, #0
     d1e:	beq.n	dae <storage_configure()+0x15e>
	uint64_t usedSize() {
		return (uint64_t)(sdfs.clusterCount() - sdfs.freeClusterCount())
		  * (uint64_t)sdfs.bytesPerCluster();
	}
	uint64_t totalSize() {
		return (uint64_t)sdfs.clusterCount() * (uint64_t)sdfs.bytesPerCluster();
     d20:	ldrb	r6, [r0, #6]
     d22:	mov.w	r3, #512	; 0x200
     d26:	ldr	r4, [r0, #28]
     d28:	lsl.w	r6, r3, r6
     d2c:	subs	r4, #1
     d2e:	uxth	r6, r6
     d30:	umull	r6, r7, r6, r4
    return m_fVol ? m_fVol->fatType() :
           m_xVol ? m_xVol->fatType() : 0;
  }
  /** \return the free cluster count. */
  uint32_t freeClusterCount() const {
    return m_fVol ? m_fVol->freeClusterCount() :
     d34:	bl	b63c <FatPartition::freeClusterCount()>
     d38:	ldr.w	r3, [r5, #1156]	; 0x484
	}
	bool rmdir(const char *filepath) {
		return sdfs.rmdir(filepath);
	}
	uint64_t usedSize() {
		return (uint64_t)(sdfs.clusterCount() - sdfs.freeClusterCount())
     d3c:	subs	r4, r4, r0
     d3e:	ldr	r2, [pc, #160]	; (de0 <storage_configure()+0x190>)
  uint32_t blocksPerCluster() __attribute__ ((deprecated)) {return sectorsPerCluster();} //NOLINT
#endif  // DOXYGEN_SHOULD_SKIP_THIS
  /** \return the number of bytes in a cluster. */
  uint32_t bytesPerCluster() const {
    return m_fVol ? m_fVol->bytesPerCluster() :
           m_xVol ? m_xVol->bytesPerCluster() : 0;
     d40:	cbz	r3, d9a <storage_configure()+0x14a>
     d42:	ldrb	r0, [r3, #6]
     d44:	mov.w	r3, #512	; 0x200
     d48:	ldr.w	r2, [r8]
     d4c:	lsl.w	r0, r3, r0
     d50:	uxth	r0, r0
     d52:	umull	r4, r5, r0, r4
          uint64_t totalSize = sdx[ii].totalSize();
          uint64_t usedSize  = sdx[ii].usedSize();
          Serial.printf("SD Storage %d %d %s ",ii,cs[ii],sd_str[ii]); 
     d56:	movs	r3, #10
	size_t print(int n)				{ return print((long)n); }
	size_t print(unsigned int n)			{ return printNumber(n, 10, 0); }
	size_t print(long n);
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
	size_t print(int64_t n);
	size_t print(uint64_t n)			{ return printNumber64(n, 10, 0); }
     d58:	mov.w	r9, #0
     d5c:	str	r2, [sp, #0]
     d5e:	mov	r8, r3
     d60:	mov	r2, r9
     d62:	ldr	r1, [pc, #148]	; (df8 <storage_configure()+0x1a8>)
     d64:	ldr	r0, [pc, #136]	; (df0 <storage_configure()+0x1a0>)
     d66:	bl	ff78 <Print::printf(char const*, ...)>
     d6a:	mov	r2, r6
     d6c:	mov	r3, r7
     d6e:	ldr	r0, [pc, #128]	; (df0 <storage_configure()+0x1a0>)
     d70:	stmia.w	sp, {r8, r9}
     d74:	bl	ff98 <Print::printNumber64(unsigned long long, unsigned char, unsigned char)>
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     d78:	movs	r1, #1
     d7a:	ldr	r0, [pc, #128]	; (dfc <storage_configure()+0x1ac>)
     d7c:	bl	e284 <usb_serial_write>
     d80:	mov	r2, r4
     d82:	mov	r3, r5
     d84:	ldr	r0, [pc, #104]	; (df0 <storage_configure()+0x1a0>)
     d86:	stmia.w	sp, {r8, r9}
     d8a:	bl	ff98 <Print::printNumber64(unsigned long long, unsigned char, unsigned char)>
	size_t println(int n)				{ return print(n) + println(); }
	size_t println(unsigned int n)			{ return print(n) + println(); }
	size_t println(long n)				{ return print(n) + println(); }
	size_t println(unsigned long n)			{ return print(n) + println(); }
	size_t println(int64_t n)			{ return print(n) + println(); }
	size_t println(uint64_t n)			{ return print(n) + println(); }
     d8e:	ldr	r0, [pc, #96]	; (df0 <storage_configure()+0x1a0>)
      uint64_t usedSize  = ramfs[ii].usedSize();
      Serial.printf("Storage %d %s ",ii,lfs_str[ii]); Serial.print(totalSize); Serial.print(" "); Serial.println(usedSize);

    }
    #endif
}
     d90:	add	sp, #52	; 0x34
     d92:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
     d96:	b.w	ff48 <Print::println()>
     d9a:	ldr.w	r3, [r2, #1160]	; 0x488
     d9e:	ldr.w	r2, [r8]
     da2:	cbz	r3, dd4 <storage_configure()+0x184>
     da4:	ldr.w	r0, [r3, #1084]	; 0x43c
     da8:	umull	r4, r5, r0, r4
     dac:	b.n	d56 <storage_configure()+0x106>
  /** Change global working volume to this volume. */
  void chvol() {m_cwv = this;}
  /** \return The total number of clusters in the volume. */
  uint32_t clusterCount() const {
    return m_fVol ? m_fVol->clusterCount() :
           m_xVol ? m_xVol->clusterCount() : 0;
     dae:	ldr.w	r3, [r3, #1160]	; 0x488
     db2:	cbz	r3, dca <storage_configure()+0x17a>
     db4:	ldr.w	r2, [r3, #1072]	; 0x430
           m_xVol ? m_xVol->fatType() : 0;
  }
  /** \return the free cluster count. */
  uint32_t freeClusterCount() const {
    return m_fVol ? m_fVol->freeClusterCount() :
           m_xVol ? m_xVol->freeClusterCount() : 0;
     db8:	mov	r0, r3
     dba:	ldr.w	r6, [r3, #1084]	; 0x43c
  /** Change global working volume to this volume. */
  void chvol() {m_cwv = this;}
  /** \return The total number of clusters in the volume. */
  uint32_t clusterCount() const {
    return m_fVol ? m_fVol->clusterCount() :
           m_xVol ? m_xVol->clusterCount() : 0;
     dbe:	mov	r4, r2
		  * (uint64_t)sdfs.bytesPerCluster();
	}
	uint64_t totalSize() {
		return (uint64_t)sdfs.clusterCount() * (uint64_t)sdfs.bytesPerCluster();
     dc0:	umull	r6, r7, r2, r6
           m_xVol ? m_xVol->fatType() : 0;
  }
  /** \return the free cluster count. */
  uint32_t freeClusterCount() const {
    return m_fVol ? m_fVol->freeClusterCount() :
           m_xVol ? m_xVol->freeClusterCount() : 0;
     dc4:	bl	9b18 <ExFatPartition::freeClusterCount()>
     dc8:	b.n	d38 <storage_configure()+0xe8>
  /** Change global working volume to this volume. */
  void chvol() {m_cwv = this;}
  /** \return The total number of clusters in the volume. */
  uint32_t clusterCount() const {
    return m_fVol ? m_fVol->clusterCount() :
           m_xVol ? m_xVol->clusterCount() : 0;
     dca:	movs	r4, #0
     dcc:	movs	r5, #0
     dce:	mov	r6, r4
     dd0:	mov	r7, r5
     dd2:	b.n	d56 <storage_configure()+0x106>
  uint32_t blocksPerCluster() __attribute__ ((deprecated)) {return sectorsPerCluster();} //NOLINT
#endif  // DOXYGEN_SHOULD_SKIP_THIS
  /** \return the number of bytes in a cluster. */
  uint32_t bytesPerCluster() const {
    return m_fVol ? m_fVol->bytesPerCluster() :
           m_xVol ? m_xVol->bytesPerCluster() : 0;
     dd4:	movs	r4, #0
     dd6:	movs	r5, #0
     dd8:	b.n	d56 <storage_configure()+0x106>
     dda:	nop
     ddc:	.word	0x20000b60
     de0:	.word	0x20003550
     de4:	.word	0x42004000
     de8:	.word	0x20000b44
     dec:	.word	0x200001ac
     df0:	.word	0x20000c60
     df4:	.word	0x20002c48
     df8:	.word	0x200001d4
     dfc:	.word	0x20000410
     e00:	.word	0x01f78a40

00000e04 <pushData(unsigned long*)>:
uint16_t maxCount=0;

void resetData(void) {  front_ = 0;  rear_ = 0; }

uint16_t pushData(uint32_t * src)
{ uint16_t f =front_ + 1;
     e04:	push	{r4, r5, r6, lr}
     e06:	ldr	r6, [pc, #84]	; (e5c <pushData(unsigned long*)+0x58>)
  if(f >= MAXBUF) f=0;
  if(f == rear_) return 0;
     e08:	ldr	r3, [pc, #84]	; (e60 <pushData(unsigned long*)+0x5c>)
uint16_t maxCount=0;

void resetData(void) {  front_ = 0;  rear_ = 0; }

uint16_t pushData(uint32_t * src)
{ uint16_t f =front_ + 1;
     e0a:	ldrh	r4, [r6, #0]
  if(f >= MAXBUF) f=0;
  if(f == rear_) return 0;
     e0c:	ldrh	r5, [r3, #0]
uint16_t maxCount=0;

void resetData(void) {  front_ = 0;  rear_ = 0; }

uint16_t pushData(uint32_t * src)
{ uint16_t f =front_ + 1;
     e0e:	adds	r4, #1
     e10:	uxth	r4, r4
  if(f >= MAXBUF) f=0;
     e12:	cmp	r4, #248	; 0xf8
     e14:	it	cs
     e16:	movcs	r4, #0
  if(f == rear_) return 0;
     e18:	cmp	r4, r5
     e1a:	beq.n	e58 <pushData(unsigned long*)+0x54>
     e1c:	mov	r1, r0

  uint32_t *ptr= data_buffer+f*NBUF_ACQ;
  memcpy(ptr,src,NBUF_ACQ*4);
     e1e:	ldr	r0, [pc, #68]	; (e64 <pushData(unsigned long*)+0x60>)
     e20:	mov.w	r2, #1024	; 0x400
     e24:	add.w	r0, r0, r4, lsl #10
     e28:	bl	db14 <memcpy>
  front_ = f;
  //
  uint16_t count;
  count = (front_ >= rear_) ? (front_ - rear_) : front_+ (MAXBUF -rear_) ;
     e2c:	cmp	r4, r5
  if(f >= MAXBUF) f=0;
  if(f == rear_) return 0;

  uint32_t *ptr= data_buffer+f*NBUF_ACQ;
  memcpy(ptr,src,NBUF_ACQ*4);
  front_ = f;
     e2e:	strh	r4, [r6, #0]
  //
  uint16_t count;
  count = (front_ >= rear_) ? (front_ - rear_) : front_+ (MAXBUF -rear_) ;
     e30:	bcs.n	e48 <pushData(unsigned long*)+0x44>
     e32:	rsb	r5, r5, #248	; 0xf8
  if(count>maxCount) maxCount=count;
     e36:	ldr	r3, [pc, #48]	; (e68 <pushData(unsigned long*)+0x64>)
  uint32_t *ptr= data_buffer+f*NBUF_ACQ;
  memcpy(ptr,src,NBUF_ACQ*4);
  front_ = f;
  //
  uint16_t count;
  count = (front_ >= rear_) ? (front_ - rear_) : front_+ (MAXBUF -rear_) ;
     e38:	add	r4, r5
  if(count>maxCount) maxCount=count;
     e3a:	ldrh	r2, [r3, #0]
  uint32_t *ptr= data_buffer+f*NBUF_ACQ;
  memcpy(ptr,src,NBUF_ACQ*4);
  front_ = f;
  //
  uint16_t count;
  count = (front_ >= rear_) ? (front_ - rear_) : front_+ (MAXBUF -rear_) ;
     e3c:	uxth	r4, r4
  if(count>maxCount) maxCount=count;
     e3e:	cmp	r2, r4
     e40:	bcs.n	e54 <pushData(unsigned long*)+0x50>
     e42:	strh	r4, [r3, #0]
  //
  return 1;
     e44:	movs	r0, #1
     e46:	pop	{r4, r5, r6, pc}
  uint32_t *ptr= data_buffer+f*NBUF_ACQ;
  memcpy(ptr,src,NBUF_ACQ*4);
  front_ = f;
  //
  uint16_t count;
  count = (front_ >= rear_) ? (front_ - rear_) : front_+ (MAXBUF -rear_) ;
     e48:	subs	r4, r4, r5
  if(count>maxCount) maxCount=count;
     e4a:	ldr	r3, [pc, #28]	; (e68 <pushData(unsigned long*)+0x64>)
  uint32_t *ptr= data_buffer+f*NBUF_ACQ;
  memcpy(ptr,src,NBUF_ACQ*4);
  front_ = f;
  //
  uint16_t count;
  count = (front_ >= rear_) ? (front_ - rear_) : front_+ (MAXBUF -rear_) ;
     e4c:	uxth	r4, r4
  if(count>maxCount) maxCount=count;
     e4e:	ldrh	r2, [r3, #0]
     e50:	cmp	r2, r4
     e52:	bcc.n	e42 <pushData(unsigned long*)+0x3e>
  //
  return 1;
     e54:	movs	r0, #1
}
     e56:	pop	{r4, r5, r6, pc}
void resetData(void) {  front_ = 0;  rear_ = 0; }

uint16_t pushData(uint32_t * src)
{ uint16_t f =front_ + 1;
  if(f >= MAXBUF) f=0;
  if(f == rear_) return 0;
     e58:	movs	r0, #0
     e5a:	pop	{r4, r5, r6, pc}
     e5c:	.word	0x20002d4c
     e60:	.word	0x20043e62
     e64:	.word	0x20003a0c
     e68:	.word	0x20043e60

00000e6c <acq_isr()>:
    {
        uint32_t daddr;
        uint32_t *src;
        acq_count++;

        daddr = (uint32_t)(dma.TCD->DADDR);
     e6c:	ldr	r0, [pc, #120]	; (ee8 <acq_isr()+0x7c>)
        dma.clearInterrupt();

        if (daddr < (uint32_t)tdm_rx_buffer + sizeof(tdm_rx_buffer) / 2) {
     e6e:	ldr	r3, [pc, #124]	; (eec <acq_isr()+0x80>)
    {
        uint32_t daddr;
        uint32_t *src;
        acq_count++;

        daddr = (uint32_t)(dma.TCD->DADDR);
     e70:	ldr	r1, [r0, #0]
            // need to remove data from the second half
            src = &tdm_rx_buffer[NBUF_I2S];
        } else {
            // DMA is receiving to the second half of the buffer
            // need to remove data from the first half
            src = &tdm_rx_buffer[0];
     e72:	sub.w	r2, r3, #1024	; 0x400

  uint32_t acq_count=0;
  uint32_t acq_miss=0;

    void acq_isr(void)
    {
     e76:	push	{r4, r5, r6, lr}
        uint32_t daddr;
        uint32_t *src;
        acq_count++;
     e78:	ldr	r4, [pc, #116]	; (ef0 <acq_isr()+0x84>)

        daddr = (uint32_t)(dma.TCD->DADDR);
     e7a:	ldr	r5, [r1, #16]

    void acq_isr(void)
    {
        uint32_t daddr;
        uint32_t *src;
        acq_count++;
     e7c:	ldr	r1, [r4, #0]
            // need to remove data from the second half
            src = &tdm_rx_buffer[NBUF_I2S];
        } else {
            // DMA is receiving to the second half of the buffer
            // need to remove data from the first half
            src = &tdm_rx_buffer[0];
     e7e:	cmp	r5, r3
     e80:	it	cc
     e82:	movcc	r2, r3
     e84:	ldrb	r6, [r0, #4]

    void acq_isr(void)
    {
        uint32_t daddr;
        uint32_t *src;
        acq_count++;
     e86:	adds	r1, #1
	void detachInterrupt(void) {
		NVIC_DISABLE_IRQ(IRQ_DMA_CH0 + channel);
	}

	void clearInterrupt(void) {
		DMA_CINT = channel;
     e88:	ldr	r5, [pc, #104]	; (ef4 <acq_isr()+0x88>)
// want to delete anything the cache may have stored, so your next
// read is certain to access the physical memory.
__attribute__((always_inline, unused))
static inline void arm_dcache_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
     e8a:	bic.w	r3, r2, #31
	uint32_t end_addr = (uint32_t)addr + size;
     e8e:	add.w	r0, r2, #1024	; 0x400
     e92:	str	r1, [r4, #0]
     e94:	strb	r6, [r5, #31]
	asm volatile("": : :"memory");
	asm("dsb");
     e96:	dsb	sy
	do {
		SCB_CACHE_DCIMVAC = location;
     e9a:	ldr	r1, [pc, #92]	; (ef8 <acq_isr()+0x8c>)
     e9c:	str	r3, [r1, #0]
		location += 32;
     e9e:	adds	r3, #32
	} while (location < end_addr);
     ea0:	cmp	r0, r3
     ea2:	bhi.n	e9c <acq_isr()+0x30>
	asm("dsb");
     ea4:	dsb	sy
	asm("isb");
     ea8:	isb	sy
     eac:	movs	r3, #0
     eae:	ldr	r0, [pc, #76]	; (efc <acq_isr()+0x90>)

        for(int jj=0;jj<NCH_ACQ;jj++)
        {
          for(int ii=0; ii<NDAT;ii++)
          {
            acq_rx_buffer[ichan[jj]+ii*NCH_ACQ]=src[ichan[jj]+ii*NCH_I2S];
     eb0:	ldr.w	r1, [r2, r3, lsl #3]
     eb4:	str.w	r1, [r0, r3, lsl #3]
            arm_dcache_delete((void*)src, sizeof(tdm_rx_buffer) / 2);
        #endif

        for(int jj=0;jj<NCH_ACQ;jj++)
        {
          for(int ii=0; ii<NDAT;ii++)
     eb8:	adds	r3, #1
     eba:	cmp	r3, #128	; 0x80
     ebc:	bne.n	eb0 <acq_isr()+0x44>
     ebe:	ldr	r1, [pc, #60]	; (efc <acq_isr()+0x90>)
     ec0:	mov	r3, r2
     ec2:	add.w	r0, r1, #1024	; 0x400
          {
            acq_rx_buffer[ichan[jj]+ii*NCH_ACQ]=src[ichan[jj]+ii*NCH_I2S];
     ec6:	ldr	r2, [r3, #4]
     ec8:	adds	r1, #8
     eca:	adds	r3, #8
     ecc:	str.w	r2, [r1, #-4]
            arm_dcache_delete((void*)src, sizeof(tdm_rx_buffer) / 2);
        #endif

        for(int jj=0;jj<NCH_ACQ;jj++)
        {
          for(int ii=0; ii<NDAT;ii++)
     ed0:	cmp	r0, r1
     ed2:	bne.n	ec6 <acq_isr()+0x5a>
          {
            acq_rx_buffer[ichan[jj]+ii*NCH_ACQ]=src[ichan[jj]+ii*NCH_I2S];
          }
        }

        if(!pushData(acq_rx_buffer)) acq_miss++;
     ed4:	ldr	r0, [pc, #36]	; (efc <acq_isr()+0x90>)
     ed6:	bl	e04 <pushData(unsigned long*)>
     eda:	cbnz	r0, ee4 <acq_isr()+0x78>
     edc:	ldr	r2, [pc, #32]	; (f00 <acq_isr()+0x94>)
     ede:	ldr	r3, [r2, #0]
     ee0:	adds	r3, #1
     ee2:	str	r3, [r2, #0]
     ee4:	pop	{r4, r5, r6, pc}
     ee6:	nop
     ee8:	.word	0x20001638
     eec:	.word	0x20003150
     ef0:	.word	0x20002844
     ef4:	.word	0x400e8000
     ef8:	.word	0xe000ef5c
     efc:	.word	0x20002848
     f00:	.word	0x20043e74

00000f04 <pullData(unsigned long*, unsigned long)>:
  //
  return 1;
}

uint16_t pullData(uint32_t * dst, uint32_t ndbl)
{ uint16_t r = (rear_/ndbl) ;
     f04:	push	{r4, r5, r6, lr}
  if(r == (front_/ndbl)) return 0;
     f06:	ldr	r3, [pc, #80]	; (f58 <pullData(unsigned long*, unsigned long)+0x54>)
  //
  return 1;
}

uint16_t pullData(uint32_t * dst, uint32_t ndbl)
{ uint16_t r = (rear_/ndbl) ;
     f08:	ldr	r5, [pc, #80]	; (f5c <pullData(unsigned long*, unsigned long)+0x58>)
  if(r == (front_/ndbl)) return 0;
     f0a:	ldrh	r4, [r3, #0]
  //
  return 1;
}

uint16_t pullData(uint32_t * dst, uint32_t ndbl)
{ uint16_t r = (rear_/ndbl) ;
     f0c:	ldrh	r2, [r5, #0]
  if(r == (front_/ndbl)) return 0;
     f0e:	udiv	r4, r4, r1
  //
  return 1;
}

uint16_t pullData(uint32_t * dst, uint32_t ndbl)
{ uint16_t r = (rear_/ndbl) ;
     f12:	udiv	r2, r2, r1
  if(r == (front_/ndbl)) return 0;
     f16:	cmp	r2, r4
     f18:	beq.n	f52 <pullData(unsigned long*, unsigned long)+0x4e>
     f1a:	uxth	r3, r2
  if(++r >= (MAXBUF/ndbl)) r=0;
     f1c:	movs	r2, #248	; 0xf8
     f1e:	adds	r3, #1
     f20:	udiv	r2, r2, r1
     f24:	uxth	r3, r3
     f26:	cmp	r3, r2
     f28:	mov.w	r2, r1, lsl #10
     f2c:	bcs.n	f44 <pullData(unsigned long*, unsigned long)+0x40>
     f2e:	smulbb	r4, r1, r3
     f32:	ldr	r6, [pc, #44]	; (f60 <pullData(unsigned long*, unsigned long)+0x5c>)
     f34:	uxth	r4, r4
     f36:	mla	r1, r2, r3, r6
  uint32_t *ptr= data_buffer + r*ndbl*NBUF_ACQ;
  memcpy(dst,ptr,ndbl*NBUF_ACQ*4);
     f3a:	bl	db14 <memcpy>
  rear_ = r*ndbl;
  return 1;
     f3e:	movs	r0, #1
{ uint16_t r = (rear_/ndbl) ;
  if(r == (front_/ndbl)) return 0;
  if(++r >= (MAXBUF/ndbl)) r=0;
  uint32_t *ptr= data_buffer + r*ndbl*NBUF_ACQ;
  memcpy(dst,ptr,ndbl*NBUF_ACQ*4);
  rear_ = r*ndbl;
     f40:	strh	r4, [r5, #0]
  return 1;
     f42:	pop	{r4, r5, r6, pc}
     f44:	movs	r4, #0
     f46:	ldr	r1, [pc, #24]	; (f60 <pullData(unsigned long*, unsigned long)+0x5c>)
uint16_t pullData(uint32_t * dst, uint32_t ndbl)
{ uint16_t r = (rear_/ndbl) ;
  if(r == (front_/ndbl)) return 0;
  if(++r >= (MAXBUF/ndbl)) r=0;
  uint32_t *ptr= data_buffer + r*ndbl*NBUF_ACQ;
  memcpy(dst,ptr,ndbl*NBUF_ACQ*4);
     f48:	bl	db14 <memcpy>
  rear_ = r*ndbl;
  return 1;
     f4c:	movs	r0, #1
{ uint16_t r = (rear_/ndbl) ;
  if(r == (front_/ndbl)) return 0;
  if(++r >= (MAXBUF/ndbl)) r=0;
  uint32_t *ptr= data_buffer + r*ndbl*NBUF_ACQ;
  memcpy(dst,ptr,ndbl*NBUF_ACQ*4);
  rear_ = r*ndbl;
     f4e:	strh	r4, [r5, #0]
  return 1;
     f50:	pop	{r4, r5, r6, pc}
  return 1;
}

uint16_t pullData(uint32_t * dst, uint32_t ndbl)
{ uint16_t r = (rear_/ndbl) ;
  if(r == (front_/ndbl)) return 0;
     f52:	movs	r0, #0
  if(++r >= (MAXBUF/ndbl)) r=0;
  uint32_t *ptr= data_buffer + r*ndbl*NBUF_ACQ;
  memcpy(dst,ptr,ndbl*NBUF_ACQ*4);
  rear_ = r*ndbl;
  return 1;
}
     f54:	pop	{r4, r5, r6, pc}
     f56:	nop
     f58:	.word	0x20002d4c
     f5c:	.word	0x20043e62
     f60:	.word	0x20003a0c

00000f64 <do_menu(short)>:
void do_menu1(void);
void do_menu2(void);
void do_menu3(void);

int16_t do_menu(int16_t state)
{ // check Serial input
     f64:	push	{r4, lr}
     f66:	mov	r4, r0
				if (elapsed > 750) break;
			}
		}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
     f68:	bl	e1b8 <usb_serial_available>
  if(!Serial.available()) return state;
     f6c:	cbnz	r0, f72 <do_menu(short)+0xe>
      break;
    default:
      break;
  }
  return state;
}
     f6e:	mov	r0, r4
     f70:	pop	{r4, pc}
        virtual int read() { return usb_serial_getchar(); }
     f72:	bl	e238 <usb_serial_getchar>

int16_t do_menu(int16_t state)
{ // check Serial input
  if(!Serial.available()) return state;
  char cc = Serial.read();
  switch(cc)
     f76:	uxtb	r0, r0
     f78:	cmp	r0, #114	; 0x72
     f7a:	beq.n	fb0 <do_menu(short)+0x4c>
     f7c:	cmp	r0, #115	; 0x73
     f7e:	beq.n	f9a <do_menu(short)+0x36>
     f80:	cmp	r0, #113	; 0x71
     f82:	bne.n	f6e <do_menu(short)+0xa>
      if(state>=0) return state;
      state=0;
      Serial.println("\nStart");
      break;
    case 'q': // stop acquisition
      if(state<0) return state;
     f84:	cmp	r4, #0
     f86:	blt.n	f6e <do_menu(short)+0xa>
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     f88:	movs	r1, #5
     f8a:	ldr	r0, [pc, #60]	; (fc8 <do_menu(short)+0x64>)
     f8c:	bl	e284 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
     f90:	ldr	r0, [pc, #56]	; (fcc <do_menu(short)+0x68>)
     f92:	bl	ff48 <Print::println()>
      state=4;
     f96:	movs	r4, #4
     f98:	b.n	f6e <do_menu(short)+0xa>
  if(!Serial.available()) return state;
  char cc = Serial.read();
  switch(cc)
  {
    case 's': // start acquisition
      if(state>=0) return state;
     f9a:	cmp	r4, #0
     f9c:	bge.n	f6e <do_menu(short)+0xa>
     f9e:	movs	r1, #6
     fa0:	ldr	r0, [pc, #44]	; (fd0 <do_menu(short)+0x6c>)
     fa2:	bl	e284 <usb_serial_write>
     fa6:	ldr	r0, [pc, #36]	; (fcc <do_menu(short)+0x68>)
     fa8:	bl	ff48 <Print::println()>
     fac:	movs	r4, #0
     fae:	b.n	f6e <do_menu(short)+0xa>
     fb0:	movs	r1, #5
     fb2:	ldr	r0, [pc, #32]	; (fd4 <do_menu(short)+0x70>)
     fb4:	bl	e284 <usb_serial_write>
     fb8:	ldr	r0, [pc, #16]	; (fcc <do_menu(short)+0x68>)
     fba:	bl	ff48 <Print::println()>
      Serial.println("\nStop");
      break;
#if USE_EVENTS==1
    case 'r': 
      Serial.println("Reset");
      mtpd.send_DeviceResetEvent();
     fbe:	ldr	r0, [pc, #24]	; (fd8 <do_menu(short)+0x74>)
     fc0:	bl	7b28 <MTPD::send_DeviceResetEvent()>
      break;
     fc4:	b.n	f6e <do_menu(short)+0xa>
     fc6:	nop
     fc8:	.word	0x200001f4
     fcc:	.word	0x20000c60
     fd0:	.word	0x200001ec
     fd4:	.word	0x200001fc
     fd8:	.word	0x20041a20

00000fdc <file_writeData(void*, unsigned long)>:
  size_t nb = mfile.write(header,512);
  return (nb==512);
}

int16_t file_writeData(void *diskBuffer, uint32_t nd)
{ if(!mfile) return 0;
     fdc:	push	{r4, r5, r6, lr}
	}
	virtual void close() {
		if (f) f->close();
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
     fde:	ldr	r6, [pc, #48]	; (1010 <file_writeData(void*, unsigned long)+0x34>)
     fe0:	ldr	r3, [r6, #16]
     fe2:	cbz	r3, 100c <file_writeData(void*, unsigned long)+0x30>
     fe4:	ldr	r2, [r3, #0]
     fe6:	mov	r5, r0
     fe8:	mov	r0, r3
     fea:	mov	r4, r1
     fec:	ldr	r3, [r2, #68]	; 0x44
     fee:	blx	r3
     ff0:	cbz	r0, 100c <file_writeData(void*, unsigned long)+0x30>
#endif
	virtual size_t read(void *buf, size_t nbyte) {
		return (f) ? f->read(buf, nbyte) : 0;
	}
	virtual size_t write(const void *buf, size_t size) {
		return (f) ? f->write(buf, size) : 0;
     ff2:	ldr	r0, [r6, #16]
     ff4:	cbz	r0, 1000 <file_writeData(void*, unsigned long)+0x24>
     ff6:	ldr	r3, [r0, #0]
     ff8:	mov	r1, r5
     ffa:	mov	r2, r4
     ffc:	ldr	r3, [r3, #44]	; 0x2c
     ffe:	blx	r3
  uint32_t nb = mfile.write(diskBuffer,nd);
  return (nb==nd);
    1000:	subs	r0, r4, r0
    1002:	clz	r0, r0
    1006:	lsrs	r0, r0, #5
    1008:	sxth	r0, r0
}
    100a:	pop	{r4, r5, r6, pc}
  size_t nb = mfile.write(header,512);
  return (nb==512);
}

int16_t file_writeData(void *diskBuffer, uint32_t nd)
{ if(!mfile) return 0;
    100c:	movs	r0, #0
    100e:	pop	{r4, r5, r6, pc}
    1010:	.word	0x20000b48

00001014 <file_close()>:
  uint32_t nb = mfile.write(diskBuffer,nd);
  return (nb==nd);
}

int16_t file_close(void)
{ mfile.close();
    1014:	push	{r4, lr}
	}
	virtual uint64_t size() {
		return (f) ? f->size() : 0;
	}
	virtual void close() {
		if (f) f->close();
    1016:	ldr	r4, [pc, #32]	; (1038 <file_close()+0x24>)
    1018:	ldr	r0, [r4, #16]
    101a:	cbz	r0, 1034 <file_close()+0x20>
    101c:	ldr	r3, [r0, #0]
    101e:	ldr	r3, [r3, #64]	; 0x40
    1020:	blx	r3
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
    1022:	ldr	r0, [r4, #16]
    1024:	cbz	r0, 1034 <file_close()+0x20>
    1026:	ldr	r3, [r0, #0]
    1028:	ldr	r3, [r3, #68]	; 0x44
    102a:	blx	r3
    102c:	eor.w	r0, r0, #1
    1030:	uxtb	r0, r0
  return (!mfile);
}
    1032:	pop	{r4, pc}
  uint32_t nb = mfile.write(diskBuffer,nd);
  return (nb==nd);
}

int16_t file_close(void)
{ mfile.close();
    1034:	movs	r0, #1
    1036:	pop	{r4, pc}
    1038:	.word	0x20000b48

0000103c <printTimestamp(unsigned long)>:
 * Custom Implementation
 * 
 */
/****************** Time Utilities *****************************/
void printTimestamp(uint32_t tt)
{
    103c:	push	{r4, r5, lr}
    103e:	sub	sp, #28
  tmElements_t tm;
  breakTime(tt, tm);
    1040:	add	r1, sp, #16
    1042:	bl	7fa4 <breakTime(long, tmElements_t&)>
  Serial.printf("Now: %04d-%02d-%02d_%02d:%02d:%02d\r\n", 
                      tmYearToCalendar(tm.Year), tm.Month, tm.Day, tm.Hour, tm.Minute, tm.Second);
    1046:	ldrb.w	r1, [sp, #20]
    104a:	ldrb.w	r2, [sp, #22]
    104e:	ldrb.w	r0, [sp, #18]
    1052:	ldrb.w	r5, [sp, #16]
    1056:	addw	r2, r2, #1970	; 0x7b2
    105a:	ldrb.w	r4, [sp, #17]
    105e:	str	r1, [sp, #0]
    1060:	ldrb.w	r3, [sp, #21]
    1064:	ldr	r1, [pc, #16]	; (1078 <printTimestamp(unsigned long)+0x3c>)
    1066:	str	r0, [sp, #4]
    1068:	str	r5, [sp, #12]
    106a:	str	r4, [sp, #8]
    106c:	ldr	r0, [pc, #12]	; (107c <printTimestamp(unsigned long)+0x40>)
    106e:	bl	ff78 <Print::printf(char const*, ...)>
}
    1072:	add	sp, #28
    1074:	pop	{r4, r5, pc}
    1076:	nop
    1078:	.word	0x20000204
    107c:	.word	0x20000c60

00001080 <makeHeader(char*)>:
    }
  #endif


void makeHeader(char *header)
{
    1080:	push	{r4, lr}
  memset(header,0,512);
    1082:	movs	r1, #0
    1084:	mov.w	r2, #512	; 0x200
    }
  #endif


void makeHeader(char *header)
{
    1088:	mov	r4, r0
  memset(header,0,512);
    108a:	bl	10bfc <memset>
  sprintf(header,"WMXZ");
    108e:	ldr	r3, [pc, #32]	; (10b0 <makeHeader(char*)+0x30>)
  int32_t *ihdr=(int32_t *)&header[strlen(header)+1];
  uint32_t *uhdr=(uint32_t *)&header[strlen(header)+1];
  ihdr[0]=1; // version number
    1090:	movs	r2, #1


void makeHeader(char *header)
{
  memset(header,0,512);
  sprintf(header,"WMXZ");
    1092:	ldr	r0, [r3, #0]
    1094:	ldrb	r3, [r3, #4]
  int32_t *ihdr=(int32_t *)&header[strlen(header)+1];
  uint32_t *uhdr=(uint32_t *)&header[strlen(header)+1];
  ihdr[0]=1; // version number
    1096:	str.w	r2, [r4, #5]


void makeHeader(char *header)
{
  memset(header,0,512);
  sprintf(header,"WMXZ");
    109a:	strb	r3, [r4, #4]
    109c:	str	r0, [r4, #0]
  int32_t *ihdr=(int32_t *)&header[strlen(header)+1];
  uint32_t *uhdr=(uint32_t *)&header[strlen(header)+1];
  ihdr[0]=1; // version number
  uhdr[1]=rtc_get();
    109e:	bl	f184 <rtc_get>
    10a2:	str.w	r0, [r4, #9]
  uhdr[2]=micros();
    10a6:	bl	f040 <micros>
    10aa:	str.w	r0, [r4, #13]
    10ae:	pop	{r4, pc}
    10b0:	.word	0x2000022c

000010b4 <file_writeHeader()>:
  mfile = sdx[store].open(filename,FILE_WRITE);
  return !(!mfile);
}

int16_t file_writeHeader(void)
{ if(!mfile) return 0;
    10b4:	push	{r4, lr}
    10b6:	ldr	r4, [pc, #52]	; (10ec <file_writeHeader()+0x38>)
    10b8:	ldr	r0, [r4, #16]
    10ba:	cbz	r0, 10e8 <file_writeHeader()+0x34>
    10bc:	ldr	r3, [r0, #0]
    10be:	ldr	r3, [r3, #68]	; 0x44
    10c0:	blx	r3
    10c2:	cbz	r0, 10e8 <file_writeHeader()+0x34>
  makeHeader(header);
    10c4:	ldr	r0, [pc, #40]	; (10f0 <file_writeHeader()+0x3c>)
    10c6:	bl	1080 <makeHeader(char*)>
#endif
	virtual size_t read(void *buf, size_t nbyte) {
		return (f) ? f->read(buf, nbyte) : 0;
	}
	virtual size_t write(const void *buf, size_t size) {
		return (f) ? f->write(buf, size) : 0;
    10ca:	ldr	r0, [r4, #16]
    10cc:	cbz	r0, 10e6 <file_writeHeader()+0x32>
    10ce:	ldr	r3, [r0, #0]
    10d0:	mov.w	r2, #512	; 0x200
    10d4:	ldr	r1, [pc, #24]	; (10f0 <file_writeHeader()+0x3c>)
    10d6:	ldr	r3, [r3, #44]	; 0x2c
    10d8:	blx	r3
    10da:	sub.w	r0, r0, #512	; 0x200
    10de:	clz	r0, r0
    10e2:	lsrs	r0, r0, #5
    10e4:	sxth	r0, r0
  size_t nb = mfile.write(header,512);
  return (nb==512);
}
    10e6:	pop	{r4, pc}
  mfile = sdx[store].open(filename,FILE_WRITE);
  return !(!mfile);
}

int16_t file_writeHeader(void)
{ if(!mfile) return 0;
    10e8:	movs	r0, #0
    10ea:	pop	{r4, pc}
    10ec:	.word	0x20000b48
    10f0:	.word	0x20001644

000010f4 <makeFilename(char*)>:
  uhdr[1]=rtc_get();
  uhdr[2]=micros();
}

int16_t makeFilename(char *filename)
{
    10f4:	push	{r4, r5, r6, r7, lr}
    10f6:	sub	sp, #12
    10f8:	mov	r5, r0
  uint32_t tt = rtc_get();
    10fa:	bl	f184 <rtc_get>
  int dd;
  ss= tt % 60; tt /= 60;
  mm= tt % 60; tt /= 60;
  hh= tt % 24; tt /= 24;
  dd= tt;
  sprintf(filename,"/%d/%02d_%02d_%02d.raw",dd,hh,mm,ss);
    10fe:	ldr	r1, [pc, #100]	; (1164 <makeFilename(char*)+0x70>)
  uhdr[2]=micros();
}

int16_t makeFilename(char *filename)
{
  uint32_t tt = rtc_get();
    1100:	mov	r7, r0
  int dd;
  ss= tt % 60; tt /= 60;
  mm= tt % 60; tt /= 60;
  hh= tt % 24; tt /= 24;
  dd= tt;
  sprintf(filename,"/%d/%02d_%02d_%02d.raw",dd,hh,mm,ss);
    1102:	ldr	r3, [pc, #100]	; (1168 <makeFilename(char*)+0x74>)
    1104:	ldr	r4, [pc, #100]	; (116c <makeFilename(char*)+0x78>)
    1106:	mov	r0, r5
    1108:	umull	r2, r6, r1, r7
    110c:	umull	r2, r3, r3, r7
    1110:	ldr	r2, [pc, #92]	; (1170 <makeFilename(char*)+0x7c>)
    1112:	lsrs	r6, r6, #5
    1114:	lsrs	r3, r3, #11
    1116:	umull	lr, r2, r2, r7
    111a:	umull	lr, r1, r1, r6
    111e:	umull	lr, r4, r4, r3
    1122:	rsb	lr, r6, r6, lsl #4
    1126:	lsrs	r1, r1, #5
    1128:	lsrs	r4, r4, #4
    112a:	rsb	r1, r1, r1, lsl #4
    112e:	sub.w	r7, r7, lr, lsl #2
    1132:	sub.w	r6, r6, r1, lsl #2
    1136:	ldr	r1, [pc, #60]	; (1174 <makeFilename(char*)+0x80>)
    1138:	add.w	r4, r4, r4, lsl #1
    113c:	lsrs	r2, r2, #16
    113e:	sub.w	r3, r3, r4, lsl #3
    1142:	stmia.w	sp, {r6, r7}
    1146:	bl	110a4 <sprintf>
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
    114a:	mov	r0, r5
    114c:	bl	11240 <strlen>
    1150:	mov	r1, r0
    1152:	mov	r0, r5
    1154:	bl	e284 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    1158:	ldr	r0, [pc, #28]	; (1178 <makeFilename(char*)+0x84>)
    115a:	bl	ff48 <Print::println()>
  Serial.println(filename);
  return 1;
}
    115e:	movs	r0, #1
    1160:	add	sp, #12
    1162:	pop	{r4, r5, r6, r7, pc}
    1164:	.word	0x88888889
    1168:	.word	0x91a2b3c5
    116c:	.word	0xaaaaaaab
    1170:	.word	0xc22e4507
    1174:	.word	0x20000234
    1178:	.word	0x20000c60

0000117c <checkPath(unsigned short, char*)>:

int16_t checkPath(uint16_t store, char *filename)
{
    117c:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1180:	mov	r7, r0
    1182:	sub	sp, #56	; 0x38
  int ln=strlen(filename);
    1184:	mov	r0, r1
  Serial.println(filename);
  return 1;
}

int16_t checkPath(uint16_t store, char *filename)
{
    1186:	mov	r5, r1
  int ln=strlen(filename);
    1188:	bl	11240 <strlen>
  int i1=-1;
  for(int ii=0;ii<ln;ii++) if(filename[ii]=='/') i1=ii;
    118c:	cmp	r0, #0
    118e:	ble.n	124a <checkPath(unsigned short, char*)+0xce>
    1190:	subs	r1, r5, #1
    1192:	movs	r3, #0
    1194:	mov.w	r2, #4294967295
    1198:	ldrb.w	r4, [r1, #1]!
    119c:	cmp	r4, #47	; 0x2f
    119e:	it	eq
    11a0:	moveq	r2, r3
    11a2:	adds	r3, #1
    11a4:	cmp	r0, r3
    11a6:	bne.n	1198 <checkPath(unsigned short, char*)+0x1c>
  if(i1<0) return 1; // no path
    11a8:	cmp	r2, #0
    11aa:	blt.n	124a <checkPath(unsigned short, char*)+0xce>
  filename[i1]=0;
  if(!sdx[store].exists(filename))
    11ac:	ldr	r3, [pc, #200]	; (1278 <checkPath(unsigned short, char*)+0xfc>)
    11ae:	movw	r4, #1212	; 0x4bc
{
  int ln=strlen(filename);
  int i1=-1;
  for(int ii=0;ii<ln;ii++) if(filename[ii]=='/') i1=ii;
  if(i1<0) return 1; // no path
  filename[i1]=0;
    11b2:	movs	r6, #0
    11b4:	add.w	r8, r5, r2
  if(!sdx[store].exists(filename))
    11b8:	mla	r4, r4, r7, r3
{
  int ln=strlen(filename);
  int i1=-1;
  for(int ii=0;ii<ln;ii++) if(filename[ii]=='/') i1=ii;
  if(i1<0) return 1; // no path
  filename[i1]=0;
    11bc:	strb	r6, [r5, r2]
    11be:	ldr.w	r7, [r4, #1156]	; 0x484
   *
   * \return true if the file exists else false.
   */
  bool exists(const char* path) {
    return m_fVol ? m_fVol->exists(path) :
           m_xVol ? m_xVol->exists(path) : false;
    11c2:	cbz	r7, 11ec <checkPath(unsigned short, char*)+0x70>
   *
   * \return true if the file exists else false.
   */
  bool exists(const char* path) {
    FatFile tmp;
    return tmp.open(this, path, O_RDONLY);
    11c4:	mov	r1, r7
    11c6:	mov	r3, r6
    11c8:	mov	r2, r5
    11ca:	mov	r0, sp
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() {}
    11cc:	strb.w	r6, [sp]
    11d0:	strb.w	r6, [sp, #1]
    11d4:	strb.w	r6, [sp, #2]
    11d8:	bl	ab98 <FatFile::open(FatVolume*, char const*, int)>
  if(!sdx[store].exists(filename))
    11dc:	cbz	r0, 120c <checkPath(unsigned short, char*)+0x90>
  { Serial.println(filename); 
    if(!sdx[store].mkdir(filename)) return 0;
  }

  filename[i1]='/';
    11de:	movs	r3, #47	; 0x2f
  return 1;
    11e0:	movs	r0, #1
  if(!sdx[store].exists(filename))
  { Serial.println(filename); 
    if(!sdx[store].mkdir(filename)) return 0;
  }

  filename[i1]='/';
    11e2:	strb.w	r3, [r8]
  return 1;
}
    11e6:	add	sp, #56	; 0x38
    11e8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    11ec:	ldr.w	r1, [r4, #1160]	; 0x488
    11f0:	cbz	r1, 120c <checkPath(unsigned short, char*)+0x90>
   *
   * \return true if the file exists else false.
   */
  bool exists(const ExChar_t* path) {
    ExFatFile tmp;
    return tmp.open(this, path, O_RDONLY);
    11f2:	mov	r3, r7
    11f4:	mov	r2, r5
    11f6:	mov	r0, sp
 * \brief Basic file class.
 */
class ExFatFile {
 public:
  /** Create an instance. */
  ExFatFile() {}
    11f8:	strb.w	r7, [sp, #49]	; 0x31
    11fc:	strb.w	r7, [sp, #50]	; 0x32
    1200:	strb.w	r7, [sp, #51]	; 0x33
    1204:	bl	97a0 <ExFatFile::open(ExFatVolume*, char const*, int)>
  int ln=strlen(filename);
  int i1=-1;
  for(int ii=0;ii<ln;ii++) if(filename[ii]=='/') i1=ii;
  if(i1<0) return 1; // no path
  filename[i1]=0;
  if(!sdx[store].exists(filename))
    1208:	cmp	r0, #0
    120a:	bne.n	11de <checkPath(unsigned short, char*)+0x62>
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
    120c:	mov	r0, r5
    120e:	bl	11240 <strlen>
    1212:	mov	r1, r0
    1214:	mov	r0, r5
    1216:	bl	e284 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    121a:	ldr	r0, [pc, #96]	; (127c <checkPath(unsigned short, char*)+0x100>)
    121c:	bl	ff48 <Print::println()>
    1220:	ldr.w	r6, [r4, #1156]	; 0x484
   *
   * \return true for success or false for failure.
   */
  bool mkdir(const char *path, bool pFlag = true) {
    return m_fVol ? m_fVol->mkdir(path, pFlag) :
           m_xVol ? m_xVol->mkdir(path, pFlag) : false;
    1224:	cbz	r6, 1252 <checkPath(unsigned short, char*)+0xd6>
    1226:	movs	r4, #0
   *
   * \return true for success or false for failure.
   */
  bool mkdir(const char* path, bool pFlag = true) {
    FatFile sub;
    return sub.mkdir(vwd(), path, pFlag);
    1228:	mov	r2, r5
    122a:	addw	r1, r6, #1092	; 0x444
    122e:	movs	r3, #1
    1230:	mov	r0, sp
    1232:	strb.w	r4, [sp]
    1236:	strb.w	r4, [sp, #1]
    123a:	strb.w	r4, [sp, #2]
    123e:	bl	aa08 <FatFile::mkdir(FatFile*, char const*, bool)>
  { Serial.println(filename); 
    if(!sdx[store].mkdir(filename)) return 0;
    1242:	cmp	r0, #0
    1244:	bne.n	11de <checkPath(unsigned short, char*)+0x62>
    1246:	movs	r0, #0
    1248:	b.n	11e6 <checkPath(unsigned short, char*)+0x6a>
int16_t checkPath(uint16_t store, char *filename)
{
  int ln=strlen(filename);
  int i1=-1;
  for(int ii=0;ii<ln;ii++) if(filename[ii]=='/') i1=ii;
  if(i1<0) return 1; // no path
    124a:	movs	r0, #1
    if(!sdx[store].mkdir(filename)) return 0;
  }

  filename[i1]='/';
  return 1;
}
    124c:	add	sp, #56	; 0x38
    124e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1252:	ldr.w	r1, [r4, #1160]	; 0x488
    1256:	cmp	r1, #0
    1258:	beq.n	1246 <checkPath(unsigned short, char*)+0xca>
   *
   * \return true for success or false for failure.
   */
  bool mkdir(const ExChar_t* path, bool pFlag = true) {
    ExFatFile sub;
    return sub.mkdir(vwd(), path, pFlag);
    125a:	mov	r2, r5
    125c:	add.w	r1, r1, #1096	; 0x448
    1260:	movs	r3, #1
    1262:	mov	r0, sp
    1264:	strb.w	r6, [sp, #49]	; 0x31
    1268:	strb.w	r6, [sp, #50]	; 0x32
    126c:	strb.w	r6, [sp, #51]	; 0x33
    1270:	bl	a1f0 <ExFatFile::mkdir(ExFatFile*, char const*, bool)>
    1274:	b.n	1242 <checkPath(unsigned short, char*)+0xc6>
    1276:	nop
    1278:	.word	0x20003550
    127c:	.word	0x20000c60

00001280 <file_open(unsigned short)>:
void makeHeader(char *header);
int16_t makeFilename(char *filename);
int16_t checkPath(uint16_t store, char *filename);

int16_t file_open(uint16_t store)
{ char filename[80];
    1280:	push	{r4, r5, r6, r7, lr}
    1282:	sub	sp, #164	; 0xa4
    1284:	mov	r4, r0
  if(!makeFilename(filename)) return 0;
    1286:	mov	r0, sp
    1288:	bl	10f4 <makeFilename(char*)>
    128c:	cbnz	r0, 1294 <file_open(unsigned short)+0x14>
    128e:	movs	r0, #0
  if(!checkPath(store, filename)) return 0;
  mfile = sdx[store].open(filename,FILE_WRITE);
  return !(!mfile);
}
    1290:	add	sp, #164	; 0xa4
    1292:	pop	{r4, r5, r6, r7, pc}
int16_t checkPath(uint16_t store, char *filename);

int16_t file_open(uint16_t store)
{ char filename[80];
  if(!makeFilename(filename)) return 0;
  if(!checkPath(store, filename)) return 0;
    1294:	mov	r1, sp
    1296:	mov	r0, r4
    1298:	bl	117c <checkPath(unsigned short, char*)>
    129c:	cmp	r0, #0
    129e:	beq.n	128e <file_open(unsigned short)+0xe>
	}
	File open(const char *filepath, uint8_t mode = FILE_READ) {
		oflag_t flags = O_READ;
		if (mode == FILE_WRITE) flags = O_RDWR | O_CREAT | O_AT_END;
		else if (mode == FILE_WRITE_BEGIN) flags = O_RDWR | O_CREAT;
		SDFAT_FILE file = sdfs.open(filepath, flags);
    12a0:	movw	r0, #1212	; 0x4bc
    12a4:	ldr	r1, [pc, #184]	; (1360 <file_open(unsigned short)+0xe0>)
    12a6:	movw	r3, #16898	; 0x4202
    12aa:	mov	r2, sp
    12ac:	mla	r1, r0, r4, r1
    12b0:	add	r0, sp, #80	; 0x50
    12b2:	adds	r1, #4
    12b4:	bl	c46c <FsVolume::open(char const*, int)>
    12b8:	ldr	r3, [sp, #152]	; 0x98
    12ba:	cmp	r3, #0
    12bc:	beq.n	134e <file_open(unsigned short)+0xce>
		if (file) return File(new SDFile(file));
    12be:	movs	r0, #104	; 0x68
class __FlashStringHelper;

class Print
{
  public:
	constexpr Print() : write_error(0) {}
    12c0:	movs	r6, #0
    12c2:	bl	10068 <operator new(unsigned int)>
//#define BYTE 0
//#endif

class __FlashStringHelper;

class Print
    12c6:	ldrb.w	r2, [sp, #84]	; 0x54
    12ca:	mov	r5, r0
#define Stream_h

#include <inttypes.h>
#include "Print.h"

class Stream : public Print
    12cc:	ldr	r3, [pc, #148]	; (1364 <file_open(unsigned short)+0xe4>)
{
  public:
	constexpr Stream() : _timeout(1000), read_error(0) {}
    12ce:	mov.w	r1, #1000	; 0x3e8
	// Classes derived from File are never meant to be constructed
	// anywhere other than open() in the parent FS class and
	// openNextFile() while traversing a directory.
	// Only the abstract File class which references these derived
	// classes is meant to have a public constructor!
	SDFile(const SDFAT_FILE &file) : sdfatfile(file), filename(nullptr) { }
    12d2:	ldr	r4, [pc, #148]	; (1368 <file_open(unsigned short)+0xe8>)
    12d4:	strb	r2, [r5, #24]
    12d6:	add	r7, sp, #96	; 0x60
#define Stream_h

#include <inttypes.h>
#include "Print.h"

class Stream : public Print
    12d8:	ldr	r2, [sp, #88]	; 0x58
    12da:	adds	r0, #36	; 0x24
    12dc:	str	r3, [r5, #20]
    12de:	ldrb.w	r3, [sp, #92]	; 0x5c
{
  public:
	constexpr Stream() : _timeout(1000), read_error(0) {}
    12e2:	str	r1, [r5, #8]
    12e4:	mov	r1, r7
    12e6:	str	r4, [r5, #0]
		// or is_base_of
		//static_assert(std::is_same<decltype(*file),File>::value,
			//"File(File *file) constructor only accepts pointers "
			//"to derived classes, not File itself");
		f = file;
		if (f) f->refcount++;
    12e8:	mov	r4, r5
#define Stream_h

#include <inttypes.h>
#include "Print.h"

class Stream : public Print
    12ea:	str	r2, [r5, #28]
    12ec:	strb.w	r3, [r5, #32]
{
  public:
	constexpr Print() : write_error(0) {}
    12f0:	strb	r6, [r5, #4]
{
  public:
	constexpr Stream() : _timeout(1000), read_error(0) {}
    12f2:	strb	r6, [r5, #12]

#define FILE_WHOAMI

class File : public Stream {
public:
	constexpr File() : f(nullptr) { }
    12f4:	str	r6, [r5, #16]
    12f6:	bl	c214 <FsBaseFile::FsBaseFile(FsBaseFile const&)>
		// or is_base_of
		//static_assert(std::is_same<decltype(*file),File>::value,
			//"File(File *file) constructor only accepts pointers "
			//"to derived classes, not File itself");
		f = file;
		if (f) f->refcount++;
    12fa:	ldr	r3, [r5, #16]
};
/**
 * \class FsFile
 * \brief FsBaseFile file with Arduino Stream.
 */
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    12fc:	ldr	r2, [pc, #108]	; (136c <file_open(unsigned short)+0xec>)
    12fe:	adds	r3, #1
    1300:	str	r6, [r5, #100]	; 0x64
    1302:	str	r2, [r5, #20]
    1304:	str	r3, [r5, #16]
    1306:	ldr	r3, [pc, #104]	; (1370 <file_open(unsigned short)+0xf0>)
   */
  FsBaseFile(const char* path, oflag_t oflag) {
    open(path, oflag);
  }

  ~FsBaseFile() {close();}
    1308:	mov	r0, r7
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    130a:	ldr	r5, [pc, #104]	; (1374 <file_open(unsigned short)+0xf4>)
    130c:	str	r3, [sp, #80]	; 0x50
    130e:	bl	c298 <FsBaseFile::close()>
    1312:	ldr	r2, [r5, #16]
    1314:	cbz	r2, 1328 <file_open(unsigned short)+0xa8>
    1316:	ldr	r3, [r2, #16]
    1318:	subs	r3, #1
    131a:	str	r3, [r2, #16]
    131c:	cbnz	r3, 1328 <file_open(unsigned short)+0xa8>
    131e:	ldr	r0, [r5, #16]
    1320:	cbz	r0, 1328 <file_open(unsigned short)+0xa8>
    1322:	ldr	r3, [r0, #0]
    1324:	ldr	r3, [r3, #32]
    1326:	blx	r3
	File& operator = (const File &file) {
		//Serial.println("File assignment");
		//static int assigncount=0;
		//if (++assigncount > 20) while (1) ;
		invalidate();
		f = file.f;
    1328:	str	r4, [r5, #16]
    132a:	ldr	r5, [pc, #72]	; (1374 <file_open(unsigned short)+0xf4>)
		if (f) f->refcount++;
    132c:	cbz	r4, 135a <file_open(unsigned short)+0xda>
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    132e:	ldr	r3, [r4, #16]
    1330:	cbnz	r3, 1340 <file_open(unsigned short)+0xc0>
    1332:	ldr	r3, [r4, #0]
    1334:	mov	r0, r4
    1336:	ldr	r3, [r3, #32]
    1338:	blx	r3
    133a:	ldr	r4, [r5, #16]
	}
	virtual void close() {
		if (f) f->close();
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
    133c:	cmp	r4, #0
    133e:	beq.n	128e <file_open(unsigned short)+0xe>
    1340:	ldr	r3, [r4, #0]
    1342:	mov	r0, r4
    1344:	ldr	r3, [r3, #68]	; 0x44
    1346:	blx	r3
    1348:	sxth	r0, r0
  mfile = sdx[store].open(filename,FILE_WRITE);
  return !(!mfile);
}
    134a:	add	sp, #164	; 0xa4
    134c:	pop	{r4, r5, r6, r7, pc}
  bool isHidden() const {
    return m_fFile ? m_fFile->isHidden() :
           m_xFile ? m_xFile->isHidden() : false;
  }
  /** \return True if this is an open file/directory else false. */
  bool isOpen() const {return m_fFile || m_xFile;}
    134e:	ldr	r0, [sp, #156]	; 0x9c
    1350:	cmp	r0, #0
    1352:	bne.n	12be <file_open(unsigned short)+0x3e>

#define FILE_WHOAMI

class File : public Stream {
public:
	constexpr File() : f(nullptr) { }
    1354:	mov	r4, r0
    1356:	add	r7, sp, #96	; 0x60
    1358:	b.n	1306 <file_open(unsigned short)+0x86>
		//Serial.println("File assignment");
		//static int assigncount=0;
		//if (++assigncount > 20) while (1) ;
		invalidate();
		f = file.f;
		if (f) f->refcount++;
    135a:	mov	r0, r4
    135c:	b.n	1290 <file_open(unsigned short)+0x10>
    135e:	nop
    1360:	.word	0x20003550
    1364:	.word	0x20000008
    1368:	.word	0x200000d4
    136c:	.word	0x20000050
    1370:	.word	0x2000002c
    1374:	.word	0x20000b48

00001378 <do_logger(unsigned short, short)>:
#define NBUF_DISK (NDBL*NBUF_ACQ)
uint32_t diskBuffer[NBUF_DISK];
uint32_t maxDel=0;

int16_t do_logger(uint16_t store, int16_t state)
{ uint32_t to=millis();
    1378:	push	{r3, r4, r5, r6, r7, lr}
extern volatile uint32_t systick_millis_count;

static inline uint32_t millis(void) __attribute__((always_inline, unused));
static inline uint32_t millis(void)
{
	return systick_millis_count;
    137a:	ldr	r5, [pc, #148]	; (1410 <do_logger(unsigned short, short)+0x98>)
    137c:	mov	r7, r0
    137e:	mov	r4, r1
  if(pullData(diskBuffer,NDBL))
    1380:	ldr	r0, [pc, #144]	; (1414 <do_logger(unsigned short, short)+0x9c>)
    1382:	movs	r1, #4
    1384:	ldr	r6, [r5, #0]
    1386:	bl	f04 <pullData(unsigned long*, unsigned long)>
    138a:	cbz	r0, 13a0 <do_logger(unsigned short, short)+0x28>
  {
    if(state==0)
    138c:	cbz	r4, 13be <do_logger(unsigned short, short)+0x46>
    { // acquisition is running, need to open file
      if(!file_open(store)) return -2;
      state=1;
    }
    if(state==1)
    138e:	cmp	r4, #1
    1390:	beq.n	13c6 <do_logger(unsigned short, short)+0x4e>
    { // file just opended, need to write header
      if(!file_writeHeader()) return -3;
      state=2;
      
    }
    if(state>=2)
    1392:	ble.n	13a4 <do_logger(unsigned short, short)+0x2c>
    { // write data to disk
      if(!file_writeData(diskBuffer,NBUF_DISK*4)) return -4;
    1394:	mov.w	r1, #4096	; 0x1000
    1398:	ldr	r0, [pc, #120]	; (1414 <do_logger(unsigned short, short)+0x9c>)
    139a:	bl	fdc <file_writeData(void*, unsigned long)>
    139e:	cbz	r0, 13f2 <do_logger(unsigned short, short)+0x7a>
    }
  }

  if(state==3)
    13a0:	cmp	r4, #3
    13a2:	beq.n	13dc <do_logger(unsigned short, short)+0x64>
  { // close file, but continue acquisition
    if(!file_close()) return -5;
    state=0;
  }

  if(state==4)
    13a4:	cmp	r4, #4
    13a6:	beq.n	13e6 <do_logger(unsigned short, short)+0x6e>
    13a8:	ldr	r3, [r5, #0]
    if(!file_close()) return -6;
    state=-1;
  }

  uint32_t dt=millis()-to;
  if(dt>maxDel) maxDel=dt;
    13aa:	ldr	r2, [pc, #108]	; (1418 <do_logger(unsigned short, short)+0xa0>)
  { // close file and stop acquisition
    if(!file_close()) return -6;
    state=-1;
  }

  uint32_t dt=millis()-to;
    13ac:	subs	r3, r3, r6
  if(dt>maxDel) maxDel=dt;
    13ae:	ldr	r1, [r2, #0]
    13b0:	cmp	r3, r1
    13b2:	bls.n	13ba <do_logger(unsigned short, short)+0x42>
    13b4:	str	r3, [r2, #0]

  return state;
    13b6:	mov	r0, r4
    13b8:	pop	{r3, r4, r5, r6, r7, pc}
    13ba:	mov	r0, r4
    13bc:	pop	{r3, r4, r5, r6, r7, pc}
{ uint32_t to=millis();
  if(pullData(diskBuffer,NDBL))
  {
    if(state==0)
    { // acquisition is running, need to open file
      if(!file_open(store)) return -2;
    13be:	mov	r0, r7
    13c0:	bl	1280 <file_open(unsigned short)>
    13c4:	cbz	r0, 13f8 <do_logger(unsigned short, short)+0x80>
      state=1;
    }
    if(state==1)
    { // file just opended, need to write header
      if(!file_writeHeader()) return -3;
    13c6:	bl	10b4 <file_writeHeader()>
    13ca:	cbz	r0, 13fe <do_logger(unsigned short, short)+0x86>
      state=2;
      
    }
    if(state>=2)
    { // write data to disk
      if(!file_writeData(diskBuffer,NBUF_DISK*4)) return -4;
    13cc:	mov.w	r1, #4096	; 0x1000
    13d0:	ldr	r0, [pc, #64]	; (1414 <do_logger(unsigned short, short)+0x9c>)
    13d2:	bl	fdc <file_writeData(void*, unsigned long)>
    13d6:	cbz	r0, 13f2 <do_logger(unsigned short, short)+0x7a>
      state=1;
    }
    if(state==1)
    { // file just opended, need to write header
      if(!file_writeHeader()) return -3;
      state=2;
    13d8:	movs	r4, #2
    13da:	b.n	13a8 <do_logger(unsigned short, short)+0x30>
    }
  }

  if(state==3)
  { // close file, but continue acquisition
    if(!file_close()) return -5;
    13dc:	bl	1014 <file_close()>
    13e0:	cbz	r0, 140a <do_logger(unsigned short, short)+0x92>
    state=0;
    13e2:	movs	r4, #0
    13e4:	b.n	13a8 <do_logger(unsigned short, short)+0x30>
  }

  if(state==4)
  { // close file and stop acquisition
    if(!file_close()) return -6;
    13e6:	bl	1014 <file_close()>
    13ea:	cbz	r0, 1404 <do_logger(unsigned short, short)+0x8c>
    state=-1;
    13ec:	mov.w	r4, #4294967295
    13f0:	b.n	13a8 <do_logger(unsigned short, short)+0x30>
      state=2;
      
    }
    if(state>=2)
    { // write data to disk
      if(!file_writeData(diskBuffer,NBUF_DISK*4)) return -4;
    13f2:	mvn.w	r0, #3
    13f6:	pop	{r3, r4, r5, r6, r7, pc}
{ uint32_t to=millis();
  if(pullData(diskBuffer,NDBL))
  {
    if(state==0)
    { // acquisition is running, need to open file
      if(!file_open(store)) return -2;
    13f8:	mvn.w	r0, #1
    13fc:	pop	{r3, r4, r5, r6, r7, pc}
      state=1;
    }
    if(state==1)
    { // file just opended, need to write header
      if(!file_writeHeader()) return -3;
    13fe:	mvn.w	r0, #2
    1402:	pop	{r3, r4, r5, r6, r7, pc}
    state=0;
  }

  if(state==4)
  { // close file and stop acquisition
    if(!file_close()) return -6;
    1404:	mvn.w	r0, #5
    1408:	pop	{r3, r4, r5, r6, r7, pc}
    }
  }

  if(state==3)
  { // close file, but continue acquisition
    if(!file_close()) return -5;
    140a:	mvn.w	r0, #4
    140e:	pop	{r3, r4, r5, r6, r7, pc}
    1410:	.word	0x200447a4
    1414:	.word	0x20001844
    1418:	.word	0x20001640

0000141c <loop>:
  Serial.flush();
}

uint32_t loop_count=0;
void loop()
{ loop_count++;
    141c:	ldr	r2, [pc, #160]	; (14c0 <loop+0xa4>)
    141e:	ldr	r3, [r2, #0]
    1420:	push	{r4, r5, r6, lr}
  state = do_menu(state);
    1422:	ldr	r4, [pc, #160]	; (14c4 <loop+0xa8>)
  Serial.flush();
}

uint32_t loop_count=0;
void loop()
{ loop_count++;
    1424:	adds	r3, #1
    1426:	sub	sp, #8
  state = do_menu(state);
    1428:	ldrsh.w	r0, [r4]
  Serial.flush();
}

uint32_t loop_count=0;
void loop()
{ loop_count++;
    142c:	str	r3, [r2, #0]
  state = do_menu(state);
    142e:	bl	f64 <do_menu(short)>
    1432:	mov	r1, r0
    1434:	strh	r0, [r4, #0]
        if(!pushData(acq_rx_buffer)) acq_miss++;

    }

  int16_t acq_check(int16_t state)
  { if(!state)
    1436:	cbnz	r0, 1466 <loop+0x4a>
      }

      void acq_start(void)
      {
          //DMA_SERQ = dma.channel;
          I2S1_RCSR |= (I2S_RCSR_RE | I2S_RCSR_BCE);
    1438:	ldr	r2, [pc, #140]	; (14c8 <loop+0xac>)
    143a:	ldr.w	r3, [r2, #136]	; 0x88
    143e:	orr.w	r3, r3, #2415919104	; 0x90000000
    1442:	str.w	r3, [r2, #136]	; 0x88
  state = check_filing(state);
  //
  if(state<0)
    mtpd.loop();
  else
    state=do_logger(0,state);
    1446:	movs	r0, #0
    1448:	bl	1378 <do_logger(unsigned short, short)>
    144c:	strh	r0, [r4, #0]

  if(state>=0) logg(1000,"loop");
    144e:	cmp	r0, #0
    1450:	blt.n	1462 <loop+0x46>
    1452:	ldr	r3, [pc, #120]	; (14cc <loop+0xb0>)
/**************** Online logging *******************************/
extern uint32_t loop_count, acq_count, acq_miss, maxDel;
extern uint16_t maxCount;
void logg(uint32_t del, const char *txt)
{ static uint32_t to;
  if(millis()-to > del)
    1454:	ldr	r2, [pc, #120]	; (14d0 <loop+0xb4>)
    1456:	ldr	r3, [r3, #0]
    1458:	ldr	r2, [r2, #0]
    145a:	subs	r3, r3, r2
    145c:	cmp.w	r3, #1000	; 0x3e8
    1460:	bhi.n	147a <loop+0x5e>
  else
    state=do_logger(0,state);

  if(state>=0) logg(1000,"loop");
  //asm("wfi"); // may wait forever on T4.x
}
    1462:	add	sp, #8
    1464:	pop	{r4, r5, r6, pc}
  int16_t acq_check(int16_t state)
  { if(!state)
    { // start acquisition
      acq_start();
    }
    if(state>3)
    1466:	cmp	r0, #3
    1468:	ble.n	1486 <loop+0x6a>
          I2S1_RCSR |= (I2S_RCSR_RE | I2S_RCSR_BCE);
      }

      void acq_stop(void)
      {
          I2S1_RCSR &= ~(I2S_RCSR_RE | I2S_RCSR_BCE);
    146a:	ldr	r2, [pc, #92]	; (14c8 <loop+0xac>)
    146c:	ldr.w	r3, [r2, #136]	; 0x88
    1470:	bic.w	r3, r3, #2415919104	; 0x90000000
    1474:	str.w	r3, [r2, #136]	; 0x88
    1478:	b.n	1446 <loop+0x2a>
    147a:	ldr	r0, [pc, #88]	; (14d4 <loop+0xb8>)
  else
    state=do_logger(0,state);

  if(state>=0) logg(1000,"loop");
  //asm("wfi"); // may wait forever on T4.x
}
    147c:	add	sp, #8
    147e:	ldmia.w	sp!, {r4, r5, r6, lr}
    1482:	b.w	498 <logg(unsigned long, char const*) [clone .part.54]>

uint32_t t_on = 60;
int16_t check_filing(int16_t state)
{
  static uint32_t to;
  if(state==2)
    1486:	cmp	r0, #2
    1488:	bne.n	14ae <loop+0x92>
    148a:	str	r0, [sp, #4]
  {
    uint32_t tt = rtc_get();
    148c:	bl	f184 <rtc_get>
    uint32_t dt = tt % t_on;
    1490:	ldr	r3, [pc, #68]	; (14d8 <loop+0xbc>)
    if(dt<to) state = 3;
    1492:	ldr	r2, [pc, #72]	; (14dc <loop+0xc0>)
{
  static uint32_t to;
  if(state==2)
  {
    uint32_t tt = rtc_get();
    uint32_t dt = tt % t_on;
    1494:	ldr	r3, [r3, #0]
    if(dt<to) state = 3;
    1496:	ldr	r5, [r2, #0]
    1498:	ldr	r1, [sp, #4]
{
  static uint32_t to;
  if(state==2)
  {
    uint32_t tt = rtc_get();
    uint32_t dt = tt % t_on;
    149a:	udiv	r6, r0, r3
    149e:	mls	r0, r6, r3, r0
    if(dt<to) state = 3;
    14a2:	cmp	r0, r5
    14a4:	it	cc
    14a6:	movcc	r1, #3
    to = dt;
    14a8:	str	r0, [r2, #0]
uint32_t loop_count=0;
void loop()
{ loop_count++;
  state = do_menu(state);
  state = acq_check(state);
  state = check_filing(state);
    14aa:	strh	r1, [r4, #0]
    14ac:	b.n	1446 <loop+0x2a>
  //
  if(state<0)
    14ae:	cmp	r0, #0
    14b0:	bge.n	1446 <loop+0x2a>
    mtpd.loop();
    14b2:	ldr	r0, [pc, #44]	; (14e0 <loop+0xc4>)
    14b4:	bl	7194 <MTPD::loop()>
    14b8:	ldrsh.w	r0, [r4]
    14bc:	b.n	144e <loop+0x32>
    14be:	nop
    14c0:	.word	0x20043e64
    14c4:	.word	0x20002d4e
    14c8:	.word	0x40384000
    14cc:	.word	0x200447a4
    14d0:	.word	0x20043e7c
    14d4:	.word	0x2000024c
    14d8:	.word	0x20000b40
    14dc:	.word	0x20043e78
    14e0:	.word	0x20041a20

000014e4 <set_audioClock(int, long, unsigned long)>:
    
    void set_audioClock(int nfact, int32_t nmult, uint32_t ndiv) // sets PLL4
      {
          CCM_ANALOG_PLL_AUDIO = CCM_ANALOG_PLL_AUDIO_BYPASS | CCM_ANALOG_PLL_AUDIO_ENABLE
                      | CCM_ANALOG_PLL_AUDIO_POST_DIV_SELECT(2) // 2: 1/4; 1: 1/2; 0: 1/1
                      | CCM_ANALOG_PLL_AUDIO_DIV_SELECT(nfact);
    14e4:	and.w	r0, r0, #63	; 0x3f
    14e8:	ldr	r3, [pc, #68]	; (1530 <set_audioClock(int, long, unsigned long)+0x4c>)

          CCM_ANALOG_PLL_AUDIO_NUM   = nmult & CCM_ANALOG_PLL_AUDIO_NUM_MASK;
          CCM_ANALOG_PLL_AUDIO_DENOM = ndiv & CCM_ANALOG_PLL_AUDIO_DENOM_MASK;
    14ea:	bic.w	r2, r2, #3758096384	; 0xe0000000
      {
          CCM_ANALOG_PLL_AUDIO = CCM_ANALOG_PLL_AUDIO_BYPASS | CCM_ANALOG_PLL_AUDIO_ENABLE
                      | CCM_ANALOG_PLL_AUDIO_POST_DIV_SELECT(2) // 2: 1/4; 1: 1/2; 0: 1/1
                      | CCM_ANALOG_PLL_AUDIO_DIV_SELECT(nfact);

          CCM_ANALOG_PLL_AUDIO_NUM   = nmult & CCM_ANALOG_PLL_AUDIO_NUM_MASK;
    14ee:	bic.w	r1, r1, #3758096384	; 0xe0000000
    
    void set_audioClock(int nfact, int32_t nmult, uint32_t ndiv) // sets PLL4
      {
          CCM_ANALOG_PLL_AUDIO = CCM_ANALOG_PLL_AUDIO_BYPASS | CCM_ANALOG_PLL_AUDIO_ENABLE
                      | CCM_ANALOG_PLL_AUDIO_POST_DIV_SELECT(2) // 2: 1/4; 1: 1/2; 0: 1/1
                      | CCM_ANALOG_PLL_AUDIO_DIV_SELECT(nfact);
    14f2:	orr.w	r0, r0, #1122304	; 0x112000
    #define IMXRT_CACHE_ENABLED 2 // 0=disabled, 1=WT, 2= WB

    /************************* I2S *************************************************/
    
    void set_audioClock(int nfact, int32_t nmult, uint32_t ndiv) // sets PLL4
      {
    14f6:	push	{r4}
          CCM_ANALOG_PLL_AUDIO = CCM_ANALOG_PLL_AUDIO_BYPASS | CCM_ANALOG_PLL_AUDIO_ENABLE
                      | CCM_ANALOG_PLL_AUDIO_POST_DIV_SELECT(2) // 2: 1/4; 1: 1/2; 0: 1/1
                      | CCM_ANALOG_PLL_AUDIO_DIV_SELECT(nfact);
    14f8:	str	r0, [r3, #112]	; 0x70

          CCM_ANALOG_PLL_AUDIO_NUM   = nmult & CCM_ANALOG_PLL_AUDIO_NUM_MASK;
          CCM_ANALOG_PLL_AUDIO_DENOM = ndiv & CCM_ANALOG_PLL_AUDIO_DENOM_MASK;
          
          CCM_ANALOG_PLL_AUDIO &= ~CCM_ANALOG_PLL_AUDIO_POWERDOWN;//Switch on PLL
          while (!(CCM_ANALOG_PLL_AUDIO & CCM_ANALOG_PLL_AUDIO_LOCK)) {}; //Wait for pll-lock
    14fa:	mov	r4, r3
      {
          CCM_ANALOG_PLL_AUDIO = CCM_ANALOG_PLL_AUDIO_BYPASS | CCM_ANALOG_PLL_AUDIO_ENABLE
                      | CCM_ANALOG_PLL_AUDIO_POST_DIV_SELECT(2) // 2: 1/4; 1: 1/2; 0: 1/1
                      | CCM_ANALOG_PLL_AUDIO_DIV_SELECT(nfact);

          CCM_ANALOG_PLL_AUDIO_NUM   = nmult & CCM_ANALOG_PLL_AUDIO_NUM_MASK;
    14fc:	str.w	r1, [r3, #128]	; 0x80
          CCM_ANALOG_PLL_AUDIO_DENOM = ndiv & CCM_ANALOG_PLL_AUDIO_DENOM_MASK;
    1500:	str.w	r2, [r3, #144]	; 0x90
          
          CCM_ANALOG_PLL_AUDIO &= ~CCM_ANALOG_PLL_AUDIO_POWERDOWN;//Switch on PLL
    1504:	ldr	r2, [r3, #112]	; 0x70
    1506:	bic.w	r2, r2, #4096	; 0x1000
    150a:	str	r2, [r3, #112]	; 0x70
          while (!(CCM_ANALOG_PLL_AUDIO & CCM_ANALOG_PLL_AUDIO_LOCK)) {}; //Wait for pll-lock
    150c:	ldr	r3, [r4, #112]	; 0x70
    150e:	ldr	r2, [pc, #32]	; (1530 <set_audioClock(int, long, unsigned long)+0x4c>)
    1510:	cmp	r3, #0
    1512:	bge.n	150c <set_audioClock(int, long, unsigned long)+0x28>
          
          const int div_post_pll = 1; // other values: 2,4
          CCM_ANALOG_MISC2 &= ~(CCM_ANALOG_MISC2_DIV_MSB | CCM_ANALOG_MISC2_DIV_LSB);
    1514:	ldr.w	r1, [r2, #368]	; 0x170
    1518:	ldr	r3, [pc, #24]	; (1534 <set_audioClock(int, long, unsigned long)+0x50>)
          if(div_post_pll>1) CCM_ANALOG_MISC2 |= CCM_ANALOG_MISC2_DIV_LSB;
          if(div_post_pll>3) CCM_ANALOG_MISC2 |= CCM_ANALOG_MISC2_DIV_MSB;
          
          CCM_ANALOG_PLL_AUDIO &= ~CCM_ANALOG_PLL_AUDIO_BYPASS;   //Disable Bypass
      }
    151a:	ldr.w	r4, [sp], #4
          
          CCM_ANALOG_PLL_AUDIO &= ~CCM_ANALOG_PLL_AUDIO_POWERDOWN;//Switch on PLL
          while (!(CCM_ANALOG_PLL_AUDIO & CCM_ANALOG_PLL_AUDIO_LOCK)) {}; //Wait for pll-lock
          
          const int div_post_pll = 1; // other values: 2,4
          CCM_ANALOG_MISC2 &= ~(CCM_ANALOG_MISC2_DIV_MSB | CCM_ANALOG_MISC2_DIV_LSB);
    151e:	ands	r3, r1
    1520:	str.w	r3, [r2, #368]	; 0x170
          if(div_post_pll>1) CCM_ANALOG_MISC2 |= CCM_ANALOG_MISC2_DIV_LSB;
          if(div_post_pll>3) CCM_ANALOG_MISC2 |= CCM_ANALOG_MISC2_DIV_MSB;
          
          CCM_ANALOG_PLL_AUDIO &= ~CCM_ANALOG_PLL_AUDIO_BYPASS;   //Disable Bypass
    1524:	ldr	r3, [r2, #112]	; 0x70
    1526:	bic.w	r3, r3, #65536	; 0x10000
    152a:	str	r3, [r2, #112]	; 0x70
      }
    152c:	bx	lr
    152e:	nop
    1530:	.word	0x400d8000
    1534:	.word	0xff7f7fff

00001538 <acq_init(long) [clone .part.59]>:
      {
          I2S1_RCSR &= ~(I2S_RCSR_RE | I2S_RCSR_BCE);
          //DMA_CERQ = dma.channel;     
      }

      void acq_init(int32_t fsamp)
    1538:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
          //PLL:
          int fs = fsamp;
          int ovr = FRAME_I2S*32;
          // PLL between 27*24 = 648MHz und 54*24=1296MHz
          int n1 = 4;                    //4; //SAI prescaler 4 => (n1*n2) = multiple of 4
          int n2 = 1 + (24000000 * 27) / (fs * ovr * n1);
    153c:	lsls	r1, r0, #8
    153e:	ldr	r6, [pc, #432]	; (16f0 <acq_init(long) [clone .part.59]+0x1b8>)
          Serial.printf("fs=%d, n1=%d, n2=%d, %d (>27 && < 54)\r\n", 
                        fs, n1,n2,n1*n2*(fs/1000)*ovr/24000);
    1540:	ldr	r5, [pc, #432]	; (16f4 <acq_init(long) [clone .part.59]+0x1bc>)
      {
          I2S1_RCSR &= ~(I2S_RCSR_RE | I2S_RCSR_BCE);
          //DMA_CERQ = dma.channel;     
      }

      void acq_init(int32_t fsamp)
    1542:	sub	sp, #8
          int ovr = FRAME_I2S*32;
          // PLL between 27*24 = 648MHz und 54*24=1296MHz
          int n1 = 4;                    //4; //SAI prescaler 4 => (n1*n2) = multiple of 4
          int n2 = 1 + (24000000 * 27) / (fs * ovr * n1);
          Serial.printf("fs=%d, n1=%d, n2=%d, %d (>27 && < 54)\r\n", 
                        fs, n1,n2,n1*n2*(fs/1000)*ovr/24000);
    1544:	ldr.w	lr, [pc, #512]	; 1748 <acq_init(long) [clone .part.59]+0x210>
      {
          I2S1_RCSR &= ~(I2S_RCSR_RE | I2S_RCSR_BCE);
          //DMA_CERQ = dma.channel;     
      }

      void acq_init(int32_t fsamp)
    1548:	mov	r4, r0
          int ovr = FRAME_I2S*32;
          // PLL between 27*24 = 648MHz und 54*24=1296MHz
          int n1 = 4;                    //4; //SAI prescaler 4 => (n1*n2) = multiple of 4
          int n2 = 1 + (24000000 * 27) / (fs * ovr * n1);
          Serial.printf("fs=%d, n1=%d, n2=%d, %d (>27 && < 54)\r\n", 
                        fs, n1,n2,n1*n2*(fs/1000)*ovr/24000);
    154a:	smull	r2, r5, r5, r0
    154e:	asrs	r2, r0, #31
    1550:	movs	r3, #4
          I2S1_RCR1 = I2S_RCR1_RFW(4);
          I2S1_RCR2 = I2S_RCR2_SYNC(0) | I2S_TCR2_BCP | I2S_RCR2_MSEL(1)
              | I2S_RCR2_BCD | I2S_RCR2_DIV(0);
          
          I2S1_RCR4 = I2S_RCR4_FRSZ((FRAME_I2S-1)) | I2S_RCR4_SYWD(0) | I2S_RCR4_MF
              | I2S_RCR4_FSE | I2S_RCR4_FSD;
    1552:	ldr.w	r8, [pc, #504]	; 174c <acq_init(long) [clone .part.59]+0x214>
          //PLL:
          int fs = fsamp;
          int ovr = FRAME_I2S*32;
          // PLL between 27*24 = 648MHz und 54*24=1296MHz
          int n1 = 4;                    //4; //SAI prescaler 4 => (n1*n2) = multiple of 4
          int n2 = 1 + (24000000 * 27) / (fs * ovr * n1);
    1556:	sdiv	r6, r6, r1
    155a:	adds	r7, r6, #1
          Serial.printf("fs=%d, n1=%d, n2=%d, %d (>27 && < 54)\r\n", 
                        fs, n1,n2,n1*n2*(fs/1000)*ovr/24000);
    155c:	rsb	r1, r2, r5, asr #6
    1560:	mov	r2, r0
    1562:	ldr	r0, [pc, #404]	; (16f8 <acq_init(long) [clone .part.59]+0x1c0>)
    1564:	lsls	r5, r7, #2
    1566:	str	r7, [sp, #0]

          n1 = n1 / 2; //Double Speed for TDM

          CCM_CS1CDR = (CCM_CS1CDR & ~(CCM_CS1CDR_SAI1_CLK_PRED_MASK | CCM_CS1CDR_SAI1_CLK_PODF_MASK))
              | CCM_CS1CDR_SAI1_CLK_PRED((n1-1)) // &0x07
              | CCM_CS1CDR_SAI1_CLK_PODF((n2-1)); // &0x3f
    1568:	and.w	r6, r6, #63	; 0x3f
          int ovr = FRAME_I2S*32;
          // PLL between 27*24 = 648MHz und 54*24=1296MHz
          int n1 = 4;                    //4; //SAI prescaler 4 => (n1*n2) = multiple of 4
          int n2 = 1 + (24000000 * 27) / (fs * ovr * n1);
          Serial.printf("fs=%d, n1=%d, n2=%d, %d (>27 && < 54)\r\n", 
                        fs, n1,n2,n1*n2*(fs/1000)*ovr/24000);
    156c:	mul.w	r5, r1, r5
    1570:	ldr	r1, [pc, #392]	; (16fc <acq_init(long) [clone .part.59]+0x1c4>)
    1572:	lsls	r5, r5, #6
    1574:	smull	ip, lr, lr, r5
    1578:	asrs	r5, r5, #31
    157a:	rsb	r5, r5, lr, asr #9
    157e:	str	r5, [sp, #4]

          IOMUXC_GPR_GPR1 = (IOMUXC_GPR_GPR1 & ~(IOMUXC_GPR_GPR1_SAI1_MCLK1_SEL_MASK))
                  | (IOMUXC_GPR_GPR1_SAI1_MCLK_DIR | IOMUXC_GPR_GPR1_SAI1_MCLK1_SEL(0));	//Select MCLK

          I2S1_RMR = 0;
          I2S1_RCR1 = I2S_RCR1_RFW(4);
    1580:	movs	r5, #4
          int ovr = FRAME_I2S*32;
          // PLL between 27*24 = 648MHz und 54*24=1296MHz
          int n1 = 4;                    //4; //SAI prescaler 4 => (n1*n2) = multiple of 4
          int n2 = 1 + (24000000 * 27) / (fs * ovr * n1);
          Serial.printf("fs=%d, n1=%d, n2=%d, %d (>27 && < 54)\r\n", 
                        fs, n1,n2,n1*n2*(fs/1000)*ovr/24000);
    1582:	bl	ff78 <Print::printf(char const*, ...)>

          double C = ((double)fs * ovr * n1 * n2) / 24000000;
    1586:	vmov	s15, r4
    158a:	vmov	s11, r7
          int c0 = C;
          int c2 = 10000;
          int c1 = C * c2 - (c0 * c2);
          set_audioClock(c0, c1, c2);
    158e:	movw	r3, #10000	; 0x2710
          int n1 = 4;                    //4; //SAI prescaler 4 => (n1*n2) = multiple of 4
          int n2 = 1 + (24000000 * 27) / (fs * ovr * n1);
          Serial.printf("fs=%d, n1=%d, n2=%d, %d (>27 && < 54)\r\n", 
                        fs, n1,n2,n1*n2*(fs/1000)*ovr/24000);

          double C = ((double)fs * ovr * n1 * n2) / 24000000;
    1592:	vcvt.f64.s32	d6, s15

          CCM_CS1CDR = (CCM_CS1CDR & ~(CCM_CS1CDR_SAI1_CLK_PRED_MASK | CCM_CS1CDR_SAI1_CLK_PODF_MASK))
              | CCM_CS1CDR_SAI1_CLK_PRED((n1-1)) // &0x07
              | CCM_CS1CDR_SAI1_CLK_PODF((n2-1)); // &0x3f

          IOMUXC_GPR_GPR1 = (IOMUXC_GPR_GPR1 & ~(IOMUXC_GPR_GPR1_SAI1_MCLK1_SEL_MASK))
    1596:	ldr	r7, [pc, #360]	; (1700 <acq_init(long) [clone .part.59]+0x1c8>)
          int n1 = 4;                    //4; //SAI prescaler 4 => (n1*n2) = multiple of 4
          int n2 = 1 + (24000000 * 27) / (fs * ovr * n1);
          Serial.printf("fs=%d, n1=%d, n2=%d, %d (>27 && < 54)\r\n", 
                        fs, n1,n2,n1*n2*(fs/1000)*ovr/24000);

          double C = ((double)fs * ovr * n1 * n2) / 24000000;
    1598:	vmov.f64	d7, #16	; 0x40800000  4.0
          int c0 = C;
          int c2 = 10000;
          int c1 = C * c2 - (c0 * c2);
          set_audioClock(c0, c1, c2);
    159c:	mov	r2, r3
          int n1 = 4;                    //4; //SAI prescaler 4 => (n1*n2) = multiple of 4
          int n2 = 1 + (24000000 * 27) / (fs * ovr * n1);
          Serial.printf("fs=%d, n1=%d, n2=%d, %d (>27 && < 54)\r\n", 
                        fs, n1,n2,n1*n2*(fs/1000)*ovr/24000);

          double C = ((double)fs * ovr * n1 * n2) / 24000000;
    159e:	vcvt.f64.s32	d5, s11
              | CCM_CS1CDR_SAI1_CLK_PODF((n2-1)); // &0x3f

          IOMUXC_GPR_GPR1 = (IOMUXC_GPR_GPR1 & ~(IOMUXC_GPR_GPR1_SAI1_MCLK1_SEL_MASK))
                  | (IOMUXC_GPR_GPR1_SAI1_MCLK_DIR | IOMUXC_GPR_GPR1_SAI1_MCLK1_SEL(0));	//Select MCLK

          I2S1_RMR = 0;
    15a2:	movs	r4, #0
          int n1 = 4;                    //4; //SAI prescaler 4 => (n1*n2) = multiple of 4
          int n2 = 1 + (24000000 * 27) / (fs * ovr * n1);
          Serial.printf("fs=%d, n1=%d, n2=%d, %d (>27 && < 54)\r\n", 
                        fs, n1,n2,n1*n2*(fs/1000)*ovr/24000);

          double C = ((double)fs * ovr * n1 * n2) / 24000000;
    15a4:	vldr	d2, [pc, #304]	; 16d8 <acq_init(long) [clone .part.59]+0x1a0>
    15a8:	vldr	d3, [pc, #308]	; 16e0 <acq_init(long) [clone .part.59]+0x1a8>
          int c0 = C;
          int c2 = 10000;
          int c1 = C * c2 - (c0 * c2);
          set_audioClock(c0, c1, c2);
    15ac:	vldr	d4, [pc, #312]	; 16e8 <acq_init(long) [clone .part.59]+0x1b0>
          int n1 = 4;                    //4; //SAI prescaler 4 => (n1*n2) = multiple of 4
          int n2 = 1 + (24000000 * 27) / (fs * ovr * n1);
          Serial.printf("fs=%d, n1=%d, n2=%d, %d (>27 && < 54)\r\n", 
                        fs, n1,n2,n1*n2*(fs/1000)*ovr/24000);

          double C = ((double)fs * ovr * n1 * n2) / 24000000;
    15b0:	vmul.f64	d6, d6, d2
    15b4:	vmul.f64	d7, d6, d7
    15b8:	vmul.f64	d7, d7, d5
    15bc:	vdiv.f64	d6, d7, d3
          int c0 = C;
    15c0:	vcvt.s32.f64	s15, d6
    15c4:	vmov	r0, s15
          int c2 = 10000;
          int c1 = C * c2 - (c0 * c2);
          set_audioClock(c0, c1, c2);
    15c8:	mul.w	r3, r3, r0
    15cc:	vmov	s14, r3
    15d0:	vcvt.f64.s32	d7, s14
    15d4:	vfnms.f64	d7, d6, d4
    15d8:	vcvt.s32.f64	s15, d7
    15dc:	vmov	r1, s15
    15e0:	bl	14e4 <set_audioClock(int, long, unsigned long)>

          // clear SAI1_CLK register locations
          CCM_CSCMR1 = (CCM_CSCMR1 & ~(CCM_CSCMR1_SAI1_CLK_SEL_MASK))
    15e4:	ldr.w	lr, [pc, #360]	; 1750 <acq_init(long) [clone .part.59]+0x218>

          n1 = n1 / 2; //Double Speed for TDM

          CCM_CS1CDR = (CCM_CS1CDR & ~(CCM_CS1CDR_SAI1_CLK_PRED_MASK | CCM_CS1CDR_SAI1_CLK_PODF_MASK))
              | CCM_CS1CDR_SAI1_CLK_PRED((n1-1)) // &0x07
              | CCM_CS1CDR_SAI1_CLK_PODF((n2-1)); // &0x3f
    15e8:	ldr	r1, [pc, #280]	; (1704 <acq_init(long) [clone .part.59]+0x1cc>)
                  | (IOMUXC_GPR_GPR1_SAI1_MCLK_DIR | IOMUXC_GPR_GPR1_SAI1_MCLK1_SEL(0));	//Select MCLK

          I2S1_RMR = 0;
          I2S1_RCR1 = I2S_RCR1_RFW(4);
          I2S1_RCR2 = I2S_RCR2_SYNC(0) | I2S_TCR2_BCP | I2S_RCR2_MSEL(1)
              | I2S_RCR2_BCD | I2S_RCR2_DIV(0);
    15ea:	mov.w	ip, #117440512	; 0x7000000
          int c2 = 10000;
          int c1 = C * c2 - (c0 * c2);
          set_audioClock(c0, c1, c2);

          // clear SAI1_CLK register locations
          CCM_CSCMR1 = (CCM_CSCMR1 & ~(CCM_CSCMR1_SAI1_CLK_SEL_MASK))
    15ee:	ldr.w	r0, [lr, #28]
          CCM_CS1CDR = (CCM_CS1CDR & ~(CCM_CS1CDR_SAI1_CLK_PRED_MASK | CCM_CS1CDR_SAI1_CLK_PODF_MASK))
              | CCM_CS1CDR_SAI1_CLK_PRED((n1-1)) // &0x07
              | CCM_CS1CDR_SAI1_CLK_PODF((n2-1)); // &0x3f

          IOMUXC_GPR_GPR1 = (IOMUXC_GPR_GPR1 & ~(IOMUXC_GPR_GPR1_SAI1_MCLK1_SEL_MASK))
                  | (IOMUXC_GPR_GPR1_SAI1_MCLK_DIR | IOMUXC_GPR_GPR1_SAI1_MCLK1_SEL(0));	//Select MCLK
    15f2:	ldr	r3, [pc, #276]	; (1708 <acq_init(long) [clone .part.59]+0x1d0>)
          int c1 = C * c2 - (c0 * c2);
          set_audioClock(c0, c1, c2);

          // clear SAI1_CLK register locations
          CCM_CSCMR1 = (CCM_CSCMR1 & ~(CCM_CSCMR1_SAI1_CLK_SEL_MASK))
              | CCM_CSCMR1_SAI1_CLK_SEL(2); // &0x03 // (0,1,2): PLL3PFD0, PLL5, PLL4
    15f4:	bic.w	r0, r0, #3072	; 0xc00
              | CCM_CS1CDR_SAI1_CLK_PODF((n2-1)); // &0x3f

          IOMUXC_GPR_GPR1 = (IOMUXC_GPR_GPR1 & ~(IOMUXC_GPR_GPR1_SAI1_MCLK1_SEL_MASK))
                  | (IOMUXC_GPR_GPR1_SAI1_MCLK_DIR | IOMUXC_GPR_GPR1_SAI1_MCLK1_SEL(0));	//Select MCLK

          I2S1_RMR = 0;
    15f8:	ldr	r2, [pc, #272]	; (170c <acq_init(long) [clone .part.59]+0x1d4>)
          int c1 = C * c2 - (c0 * c2);
          set_audioClock(c0, c1, c2);

          // clear SAI1_CLK register locations
          CCM_CSCMR1 = (CCM_CSCMR1 & ~(CCM_CSCMR1_SAI1_CLK_SEL_MASK))
              | CCM_CSCMR1_SAI1_CLK_SEL(2); // &0x03 // (0,1,2): PLL3PFD0, PLL5, PLL4
    15fa:	orr.w	r0, r0, #2048	; 0x800
    15fe:	str.w	r0, [lr, #28]

          n1 = n1 / 2; //Double Speed for TDM

          CCM_CS1CDR = (CCM_CS1CDR & ~(CCM_CS1CDR_SAI1_CLK_PRED_MASK | CCM_CS1CDR_SAI1_CLK_PODF_MASK))
    1602:	ldr.w	r0, [lr, #40]	; 0x28
              | CCM_CS1CDR_SAI1_CLK_PRED((n1-1)) // &0x07
              | CCM_CS1CDR_SAI1_CLK_PODF((n2-1)); // &0x3f
    1606:	ands	r1, r0
          
          I2S1_RCR4 = I2S_RCR4_FRSZ((FRAME_I2S-1)) | I2S_RCR4_SYWD(0) | I2S_RCR4_MF
              | I2S_RCR4_FSE | I2S_RCR4_FSD;
          I2S1_RCR5 = I2S_RCR5_WNW(31) | I2S_RCR5_W0W(31) | I2S_RCR5_FBT(31);

        	CORE_PIN23_CONFIG = 3;  //1:MCLK 
    1608:	movs	r0, #3

          n1 = n1 / 2; //Double Speed for TDM

          CCM_CS1CDR = (CCM_CS1CDR & ~(CCM_CS1CDR_SAI1_CLK_PRED_MASK | CCM_CS1CDR_SAI1_CLK_PODF_MASK))
              | CCM_CS1CDR_SAI1_CLK_PRED((n1-1)) // &0x07
              | CCM_CS1CDR_SAI1_CLK_PODF((n2-1)); // &0x3f
    160a:	orr.w	r1, r1, #64	; 0x40
    160e:	orrs	r6, r1
    1610:	str.w	r6, [lr, #40]	; 0x28
          CORE_PIN21_CONFIG = 3;  //1:RX_BCLK
          CORE_PIN20_CONFIG = 3;  //1:RX_SYNC
#if N_ADC==1
          I2S1_RCR3 = I2S_RCR3_RCE;
          CORE_PIN8_CONFIG  = 3;  //RX_DATA0
          IOMUXC_SAI1_RX_DATA0_SELECT_INPUT = 2;
    1614:	mov.w	lr, #2

          CCM_CS1CDR = (CCM_CS1CDR & ~(CCM_CS1CDR_SAI1_CLK_PRED_MASK | CCM_CS1CDR_SAI1_CLK_PODF_MASK))
              | CCM_CS1CDR_SAI1_CLK_PRED((n1-1)) // &0x07
              | CCM_CS1CDR_SAI1_CLK_PODF((n2-1)); // &0x3f

          IOMUXC_GPR_GPR1 = (IOMUXC_GPR_GPR1 & ~(IOMUXC_GPR_GPR1_SAI1_MCLK1_SEL_MASK))
    1618:	ldr	r1, [r7, #4]
          I2S1_RCR2 = I2S_RCR2_SYNC(0) | I2S_TCR2_BCP | I2S_RCR2_MSEL(1)
              | I2S_RCR2_BCD | I2S_RCR2_DIV(0);
          
          I2S1_RCR4 = I2S_RCR4_FRSZ((FRAME_I2S-1)) | I2S_RCR4_SYWD(0) | I2S_RCR4_MF
              | I2S_RCR4_FSE | I2S_RCR4_FSD;
          I2S1_RCR5 = I2S_RCR5_WNW(31) | I2S_RCR5_W0W(31) | I2S_RCR5_FBT(31);
    161a:	ldr	r6, [pc, #244]	; (1710 <acq_init(long) [clone .part.59]+0x1d8>)
          CCM_CS1CDR = (CCM_CS1CDR & ~(CCM_CS1CDR_SAI1_CLK_PRED_MASK | CCM_CS1CDR_SAI1_CLK_PODF_MASK))
              | CCM_CS1CDR_SAI1_CLK_PRED((n1-1)) // &0x07
              | CCM_CS1CDR_SAI1_CLK_PODF((n2-1)); // &0x3f

          IOMUXC_GPR_GPR1 = (IOMUXC_GPR_GPR1 & ~(IOMUXC_GPR_GPR1_SAI1_MCLK1_SEL_MASK))
                  | (IOMUXC_GPR_GPR1_SAI1_MCLK_DIR | IOMUXC_GPR_GPR1_SAI1_MCLK1_SEL(0));	//Select MCLK
    161c:	ands	r3, r1
          
          I2S1_RCR4 = I2S_RCR4_FRSZ((FRAME_I2S-1)) | I2S_RCR4_SYWD(0) | I2S_RCR4_MF
              | I2S_RCR4_FSE | I2S_RCR4_FSD;
          I2S1_RCR5 = I2S_RCR5_WNW(31) | I2S_RCR5_W0W(31) | I2S_RCR5_FBT(31);

        	CORE_PIN23_CONFIG = 3;  //1:MCLK 
    161e:	ldr	r1, [pc, #244]	; (1714 <acq_init(long) [clone .part.59]+0x1dc>)
          CCM_CS1CDR = (CCM_CS1CDR & ~(CCM_CS1CDR_SAI1_CLK_PRED_MASK | CCM_CS1CDR_SAI1_CLK_PODF_MASK))
              | CCM_CS1CDR_SAI1_CLK_PRED((n1-1)) // &0x07
              | CCM_CS1CDR_SAI1_CLK_PODF((n2-1)); // &0x3f

          IOMUXC_GPR_GPR1 = (IOMUXC_GPR_GPR1 & ~(IOMUXC_GPR_GPR1_SAI1_MCLK1_SEL_MASK))
                  | (IOMUXC_GPR_GPR1_SAI1_MCLK_DIR | IOMUXC_GPR_GPR1_SAI1_MCLK1_SEL(0));	//Select MCLK
    1620:	orr.w	r3, r3, #524288	; 0x80000
    1624:	str	r3, [r7, #4]

        	CORE_PIN23_CONFIG = 3;  //1:MCLK 
          CORE_PIN21_CONFIG = 3;  //1:RX_BCLK
          CORE_PIN20_CONFIG = 3;  //1:RX_SYNC
#if N_ADC==1
          I2S1_RCR3 = I2S_RCR3_RCE;
    1626:	mov.w	r7, #65536	; 0x10000
              | CCM_CS1CDR_SAI1_CLK_PODF((n2-1)); // &0x3f

          IOMUXC_GPR_GPR1 = (IOMUXC_GPR_GPR1 & ~(IOMUXC_GPR_GPR1_SAI1_MCLK1_SEL_MASK))
                  | (IOMUXC_GPR_GPR1_SAI1_MCLK_DIR | IOMUXC_GPR_GPR1_SAI1_MCLK1_SEL(0));	//Select MCLK

          I2S1_RMR = 0;
    162a:	str.w	r4, [r2, #224]	; 0xe0
          CORE_PIN21_CONFIG = 3;  //1:RX_BCLK
          CORE_PIN20_CONFIG = 3;  //1:RX_SYNC
#if N_ADC==1
          I2S1_RCR3 = I2S_RCR3_RCE;
          CORE_PIN8_CONFIG  = 3;  //RX_DATA0
          IOMUXC_SAI1_RX_DATA0_SELECT_INPUT = 2;
    162e:	ldr	r3, [pc, #232]	; (1718 <acq_init(long) [clone .part.59]+0x1e0>)

          IOMUXC_GPR_GPR1 = (IOMUXC_GPR_GPR1 & ~(IOMUXC_GPR_GPR1_SAI1_MCLK1_SEL_MASK))
                  | (IOMUXC_GPR_GPR1_SAI1_MCLK_DIR | IOMUXC_GPR_GPR1_SAI1_MCLK1_SEL(0));	//Select MCLK

          I2S1_RMR = 0;
          I2S1_RCR1 = I2S_RCR1_RFW(4);
    1630:	str.w	r5, [r2, #140]	; 0x8c
          I2S1_RCR2 = I2S_RCR2_SYNC(0) | I2S_TCR2_BCP | I2S_RCR2_MSEL(1)
              | I2S_RCR2_BCD | I2S_RCR2_DIV(0);
    1634:	str.w	ip, [r2, #144]	; 0x90
          
          I2S1_RCR4 = I2S_RCR4_FRSZ((FRAME_I2S-1)) | I2S_RCR4_SYWD(0) | I2S_RCR4_MF
              | I2S_RCR4_FSE | I2S_RCR4_FSD;
    1638:	str.w	r8, [r2, #152]	; 0x98
          I2S1_RCR5 = I2S_RCR5_WNW(31) | I2S_RCR5_W0W(31) | I2S_RCR5_FBT(31);
    163c:	str.w	r6, [r2, #156]	; 0x9c
          CORE_PIN8_CONFIG  = 3;  //RX_DATA0
          IOMUXC_SAI1_RX_DATA0_SELECT_INPUT = 2;

          dma.TCD->SADDR = &I2S1_RDR0;
          dma.TCD->SOFF = 0;
          dma.TCD->ATTR = DMA_TCD_ATTR_SSIZE(2) | DMA_TCD_ATTR_DSIZE(2);
    1640:	movw	r6, #514	; 0x202
          
          I2S1_RCR4 = I2S_RCR4_FRSZ((FRAME_I2S-1)) | I2S_RCR4_SYWD(0) | I2S_RCR4_MF
              | I2S_RCR4_FSE | I2S_RCR4_FSD;
          I2S1_RCR5 = I2S_RCR5_WNW(31) | I2S_RCR5_W0W(31) | I2S_RCR5_FBT(31);

        	CORE_PIN23_CONFIG = 3;  //1:MCLK 
    1644:	str.w	r0, [r1, #288]	; 0x120
          CORE_PIN21_CONFIG = 3;  //1:RX_BCLK
    1648:	str.w	r0, [r1, #296]	; 0x128
          CORE_PIN20_CONFIG = 3;  //1:RX_SYNC
    164c:	str.w	r0, [r1, #292]	; 0x124
#if N_ADC==1
          I2S1_RCR3 = I2S_RCR3_RCE;
    1650:	str.w	r7, [r2, #148]	; 0x94
              DMA_TCD_NBYTES_MLOFFYES_NBYTES(8);
          dma.TCD->SLAST = -8;
#endif
          dma.TCD->DADDR = tdm_rx_buffer;
          dma.TCD->DOFF = 4;
          dma.TCD->CITER_ELINKNO = dma.TCD->BITER_ELINKNO = NDAT*FRAME_I2S*2;
    1654:	mov.w	r7, #512	; 0x200
        	CORE_PIN23_CONFIG = 3;  //1:MCLK 
          CORE_PIN21_CONFIG = 3;  //1:RX_BCLK
          CORE_PIN20_CONFIG = 3;  //1:RX_SYNC
#if N_ADC==1
          I2S1_RCR3 = I2S_RCR3_RCE;
          CORE_PIN8_CONFIG  = 3;  //RX_DATA0
    1658:	str.w	r0, [r1, #380]	; 0x17c
          IOMUXC_SAI1_RX_DATA0_SELECT_INPUT = 2;

          dma.TCD->SADDR = &I2S1_RDR0;
    165c:	ldr	r1, [pc, #188]	; (171c <acq_init(long) [clone .part.59]+0x1e4>)
          CORE_PIN21_CONFIG = 3;  //1:RX_BCLK
          CORE_PIN20_CONFIG = 3;  //1:RX_SYNC
#if N_ADC==1
          I2S1_RCR3 = I2S_RCR3_RCE;
          CORE_PIN8_CONFIG  = 3;  //RX_DATA0
          IOMUXC_SAI1_RX_DATA0_SELECT_INPUT = 2;
    165e:	str.w	lr, [r3, #404]	; 0x194
#endif
          dma.TCD->DADDR = tdm_rx_buffer;
          dma.TCD->DOFF = 4;
          dma.TCD->CITER_ELINKNO = dma.TCD->BITER_ELINKNO = NDAT*FRAME_I2S*2;
          dma.TCD->DLASTSGA = -sizeof(tdm_rx_buffer);
          dma.TCD->CSR = DMA_TCD_CSR_INTHALF | DMA_TCD_CSR_INTMAJOR;
    1662:	mov.w	lr, #6
#if N_ADC==1
          I2S1_RCR3 = I2S_RCR3_RCE;
          CORE_PIN8_CONFIG  = 3;  //RX_DATA0
          IOMUXC_SAI1_RX_DATA0_SELECT_INPUT = 2;

          dma.TCD->SADDR = &I2S1_RDR0;
    1666:	ldr	r3, [r1, #0]
    1668:	ldr	r0, [pc, #180]	; (1720 <acq_init(long) [clone .part.59]+0x1e8>)
          dma.TCD->SOFF = 0;
          dma.TCD->ATTR = DMA_TCD_ATTR_SSIZE(2) | DMA_TCD_ATTR_DSIZE(2);
          dma.TCD->NBYTES_MLNO = 4;
    166a:	str	r5, [r3, #8]
              DMA_TCD_NBYTES_MLOFFYES_MLOFF(-8) |
              DMA_TCD_NBYTES_MLOFFYES_NBYTES(8);
          dma.TCD->SLAST = -8;
#endif
          dma.TCD->DADDR = tdm_rx_buffer;
          dma.TCD->DOFF = 4;
    166c:	strh	r5, [r3, #20]
          dma.TCD->NBYTES_MLOFFYES = DMA_TCD_NBYTES_SMLOE |
              DMA_TCD_NBYTES_MLOFFYES_MLOFF(-8) |
              DMA_TCD_NBYTES_MLOFFYES_NBYTES(8);
          dma.TCD->SLAST = -8;
#endif
          dma.TCD->DADDR = tdm_rx_buffer;
    166e:	ldr	r5, [pc, #180]	; (1724 <acq_init(long) [clone .part.59]+0x1ec>)
#if N_ADC==1
          I2S1_RCR3 = I2S_RCR3_RCE;
          CORE_PIN8_CONFIG  = 3;  //RX_DATA0
          IOMUXC_SAI1_RX_DATA0_SELECT_INPUT = 2;

          dma.TCD->SADDR = &I2S1_RDR0;
    1670:	str	r0, [r3, #0]
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
	}

	void attachInterrupt(void (*isr)(void), uint8_t prio) {
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
    1672:	movs	r0, #1
          dma.TCD->NBYTES_MLOFFYES = DMA_TCD_NBYTES_SMLOE |
              DMA_TCD_NBYTES_MLOFFYES_MLOFF(-8) |
              DMA_TCD_NBYTES_MLOFFYES_NBYTES(8);
          dma.TCD->SLAST = -8;
#endif
          dma.TCD->DADDR = tdm_rx_buffer;
    1674:	str	r5, [r3, #16]
          dma.TCD->DOFF = 4;
          dma.TCD->CITER_ELINKNO = dma.TCD->BITER_ELINKNO = NDAT*FRAME_I2S*2;
          dma.TCD->DLASTSGA = -sizeof(tdm_rx_buffer);
    1676:	ldr	r5, [pc, #176]	; (1728 <acq_init(long) [clone .part.59]+0x1f0>)
              DMA_TCD_NBYTES_MLOFFYES_NBYTES(8);
          dma.TCD->SLAST = -8;
#endif
          dma.TCD->DADDR = tdm_rx_buffer;
          dma.TCD->DOFF = 4;
          dma.TCD->CITER_ELINKNO = dma.TCD->BITER_ELINKNO = NDAT*FRAME_I2S*2;
    1678:	strh	r7, [r3, #30]
          I2S1_RCR3 = I2S_RCR3_RCE;
          CORE_PIN8_CONFIG  = 3;  //RX_DATA0
          IOMUXC_SAI1_RX_DATA0_SELECT_INPUT = 2;

          dma.TCD->SADDR = &I2S1_RDR0;
          dma.TCD->SOFF = 0;
    167a:	strh	r4, [r3, #4]
              DMA_TCD_NBYTES_MLOFFYES_NBYTES(8);
          dma.TCD->SLAST = -8;
#endif
          dma.TCD->DADDR = tdm_rx_buffer;
          dma.TCD->DOFF = 4;
          dma.TCD->CITER_ELINKNO = dma.TCD->BITER_ELINKNO = NDAT*FRAME_I2S*2;
    167c:	strh	r7, [r3, #22]
		NVIC_SET_PRIORITY(IRQ_DMA_CH0 + channel, prio);
    167e:	movs	r7, #96	; 0x60

          dma.TCD->SADDR = &I2S1_RDR0;
          dma.TCD->SOFF = 0;
          dma.TCD->ATTR = DMA_TCD_ATTR_SSIZE(2) | DMA_TCD_ATTR_DSIZE(2);
          dma.TCD->NBYTES_MLNO = 4;
          dma.TCD->SLAST = 0;
    1680:	str	r4, [r3, #12]
          CORE_PIN8_CONFIG  = 3;  //RX_DATA0
          IOMUXC_SAI1_RX_DATA0_SELECT_INPUT = 2;

          dma.TCD->SADDR = &I2S1_RDR0;
          dma.TCD->SOFF = 0;
          dma.TCD->ATTR = DMA_TCD_ATTR_SSIZE(2) | DMA_TCD_ATTR_DSIZE(2);
    1682:	strh	r6, [r3, #6]
          dma.TCD->SLAST = -8;
#endif
          dma.TCD->DADDR = tdm_rx_buffer;
          dma.TCD->DOFF = 4;
          dma.TCD->CITER_ELINKNO = dma.TCD->BITER_ELINKNO = NDAT*FRAME_I2S*2;
          dma.TCD->DLASTSGA = -sizeof(tdm_rx_buffer);
    1684:	str	r5, [r3, #24]
	// trigger moves a single data unit, which is typically 8, 16 or
	// 32 bits.  If a channel is configured for 200 transfers

	// Use a hardware trigger to make the DMA channel run
	void triggerAtHardwareEvent(uint8_t source) {
		volatile uint32_t *mux = &DMAMUX_CHCFG0 + channel;
    1686:	ldrb	r6, [r1, #4]
          dma.TCD->CSR = DMA_TCD_CSR_INTHALF | DMA_TCD_CSR_INTMAJOR;
    1688:	strh.w	lr, [r3, #28]
    168c:	ldr	r5, [pc, #156]	; (172c <acq_init(long) [clone .part.59]+0x1f4>)
		//mux = (volatile uint32_t *)&(DMAMUX_CHCFG0) + channel;
		*mux = 0;
		*mux = (source & 0x7F) | DMAMUX_CHCFG_ENBL;
    168e:	ldr	r3, [pc, #160]	; (1730 <acq_init(long) [clone .part.59]+0x1f8>)

	// Use a hardware trigger to make the DMA channel run
	void triggerAtHardwareEvent(uint8_t source) {
		volatile uint32_t *mux = &DMAMUX_CHCFG0 + channel;
		//mux = (volatile uint32_t *)&(DMAMUX_CHCFG0) + channel;
		*mux = 0;
    1690:	str.w	r4, [r5, r6, lsl #2]
		*mux = (source & 0x7F) | DMAMUX_CHCFG_ENBL;
    1694:	str.w	r3, [r5, r6, lsl #2]
    1698:	ldrb	r3, [r1, #4]
	/***************************************/
	/**    Enable / Disable               **/
	/***************************************/

	void enable(void) {
		DMA_SERQ = channel;
    169a:	ldr	r6, [pc, #152]	; (1734 <acq_init(long) [clone .part.59]+0x1fc>)
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
	}

	void attachInterrupt(void (*isr)(void), uint8_t prio) {
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
    169c:	and.w	r4, r3, #31
          dma.triggerAtHardwareEvent(DMAMUX_SOURCE_SAI1_RX);
          dma.enable();

          I2S1_RCSR =  I2S_RCSR_FRDE | I2S_RCSR_FR;
    16a0:	ldr	r5, [pc, #148]	; (1738 <acq_init(long) [clone .part.59]+0x200>)
	/***************************************/
	/**    Enable / Disable               **/
	/***************************************/

	void enable(void) {
		DMA_SERQ = channel;
    16a2:	strb	r3, [r6, #27]
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
	}

	void attachInterrupt(void (*isr)(void), uint8_t prio) {
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
    16a4:	add.w	r6, r3, #16
    16a8:	str.w	r5, [r2, #136]	; 0x88
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
    16ac:	lsls	r0, r4
    16ae:	asrs	r3, r3, #5
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
	}

	void attachInterrupt(void (*isr)(void), uint8_t prio) {
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
    16b0:	ldr	r4, [pc, #136]	; (173c <acq_init(long) [clone .part.59]+0x204>)
    16b2:	ldr.w	lr, [pc, #160]	; 1754 <acq_init(long) [clone .part.59]+0x21c>
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
    16b6:	ldr	r5, [pc, #136]	; (1740 <acq_init(long) [clone .part.59]+0x208>)
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
	}

	void attachInterrupt(void (*isr)(void), uint8_t prio) {
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
    16b8:	str.w	lr, [r4, r6, lsl #2]
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
    16bc:	str.w	r0, [r5, r3, lsl #2]
		NVIC_SET_PRIORITY(IRQ_DMA_CH0 + channel, prio);
    16c0:	ldr	r4, [pc, #128]	; (1744 <acq_init(long) [clone .part.59]+0x20c>)
    16c2:	ldrb	r3, [r1, #4]
    16c4:	strb	r7, [r3, r4]
      }

      void acq_start(void)
      {
          //DMA_SERQ = dma.channel;
          I2S1_RCSR |= (I2S_RCSR_RE | I2S_RCSR_BCE);
    16c6:	ldr.w	r3, [r2, #136]	; 0x88
    16ca:	orr.w	r3, r3, #2415919104	; 0x90000000
    16ce:	str.w	r3, [r2, #136]	; 0x88
          dma.enable();

          I2S1_RCSR =  I2S_RCSR_FRDE | I2S_RCSR_FR;
          dma.attachInterrupt(acq_isr,I2S_DMA_PRIO*16);	
          acq_start();
      }
    16d2:	add	sp, #8
    16d4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    16d8:	.word	0x00000000
    16dc:	.word	0x40500000
    16e0:	.word	0x00000000
    16e4:	.word	0x4176e360
    16e8:	.word	0x00000000
    16ec:	.word	0x40c38800
    16f0:	.word	0x269fb200
    16f4:	.word	0x10624dd3
    16f8:	.word	0x20000c60
    16fc:	.word	0x20000254
    1700:	.word	0x400ac000
    1704:	.word	0xfffffe00
    1708:	.word	0xfff7fff8
    170c:	.word	0x40384000
    1710:	.word	0x1f1f1f00
    1714:	.word	0x401f8000
    1718:	.word	0x401f8400
    171c:	.word	0x20001638
    1720:	.word	0x403840a0
    1724:	.word	0x20002d50
    1728:	.word	0xfffff800
    172c:	.word	0x400ec000
    1730:	.word	0x80000013
    1734:	.word	0x400e8000
    1738:	.word	0x02000001
    173c:	.word	0x20046400
    1740:	.word	0xe000e100
    1744:	.word	0xe000e400
    1748:	.word	0x057619f1
    174c:	.word	0x00010019
    1750:	.word	0x400fc000
    1754:	.word	0x00000e6d

00001758 <_GLOBAL__sub_I_audioShield>:

void SGTL5000_disable(void)
{
  chipWrite(CHIP_DIG_POWER, 0); 
  chipWrite(CHIP_ANA_POWER, 0); 
}
    1758:	push	{r3, r4, r5, r6, r7, lr}


class SDClass : public FS
{
public:
	SDClass() { }
    175a:	ldr	r3, [pc, #272]	; (186c <_GLOBAL__sub_I_audioShield+0x114>)
 * \class FsVolume
 * \brief FsVolume class.
 */
class FsVolume {
 public:
  FsVolume() {}
    175c:	movs	r4, #0
//------------------------------------------------------------------------------
/**
 * \class SdioCard
 * \brief Raw SDIO access to SD and SDHC flash memory cards.
 */
class SdioCard : public SdCardInterface {
    175e:	ldr	r5, [pc, #272]	; (1870 <_GLOBAL__sub_I_audioShield+0x118>)
		init_AlwaysInline(MSBFIRST, SPI_MODE0);
	}
private:
	void init_AlwaysInline(uint8_t bitOrder, uint8_t dataMode)
	  __attribute__((__always_inline__)) {
			tcr = LPSPI_TCR_FRAMESZ(7);    // TCR has polarity and bit order too
    1760:	movs	r2, #7
    1762:	ldr.w	ip, [pc, #328]	; 18ac <_GLOBAL__sub_I_audioShield+0x154>
#else  // HAS_SDIO_CLASS
class SdSpiCard {
#endif  // HAS_SDIO_CLASS
 public:
  /** Construct an instance of SdSpiCard. */
  SdSpiCard() {}
    1766:	movs	r7, #1
    1768:	str.w	r5, [r3, #1172]	; 0x494
    176c:	movs	r1, #41	; 0x29
    176e:	ldr	r5, [pc, #260]	; (1874 <_GLOBAL__sub_I_audioShield+0x11c>)
#define AUDIO_HEADPHONE_LINEIN 1

class AudioControlSGTL5000 : public AudioControl
{
public:
	AudioControlSGTL5000(void) : i2c_addr(0x0A) { }
    1770:	mov.w	lr, #10
  return state;
}

/************ Basic File System Interface *************************/
#include "SD.h"
extern SDClass sdx[];
    1774:	ldr	r6, [pc, #256]	; (1878 <_GLOBAL__sub_I_audioShield+0x120>)
    1776:	mov	r0, r4
    1778:	str.w	r5, [r3, #1184]	; 0x4a0
public:
	SPISettings(uint32_t clockIn, uint8_t bitOrderIn, uint8_t dataModeIn) : _clock(clockIn) {
		init_AlwaysInline(bitOrderIn, dataModeIn);
	}

	SPISettings() : _clock(4000000) {
    177c:	ldr	r5, [pc, #252]	; (187c <_GLOBAL__sub_I_audioShield+0x124>)
    177e:	str.w	ip, [r3]
    1782:	str.w	r4, [r3, #1156]	; 0x484
    1786:	str.w	r4, [r3, #1160]	; 0x488
 * \class SdioConfig
 * \brief SDIO card configuration.
 */
class SdioConfig {
 public:
  SdioConfig() {}
    178a:	strb.w	r4, [r3, #1180]	; 0x49c
//------------------------------------------------------------------------------
/**
 * \class SdioCard
 * \brief Raw SDIO access to SD and SDHC flash memory cards.
 */
class SdioCard : public SdCardInterface {
    178e:	strb.w	r4, [r3, #1181]	; 0x49d
    1792:	strb.w	r4, [r3, #1210]	; 0x4ba
		init_AlwaysInline(MSBFIRST, SPI_MODE0);
	}
private:
	void init_AlwaysInline(uint8_t bitOrder, uint8_t dataMode)
	  __attribute__((__always_inline__)) {
			tcr = LPSPI_TCR_FRAMESZ(7);    // TCR has polarity and bit order too
    1796:	str.w	r2, [r3, #1196]	; 0x4ac
    179a:	mov	r2, r6
    179c:	strb.w	r7, [r3, #1205]	; 0x4b5
public:
	SPISettings(uint32_t clockIn, uint8_t bitOrderIn, uint8_t dataModeIn) : _clock(clockIn) {
		init_AlwaysInline(bitOrderIn, dataModeIn);
	}

	SPISettings() : _clock(4000000) {
    17a0:	str.w	r5, [r3, #1192]	; 0x4a8
    17a4:	ldr	r7, [pc, #216]	; (1880 <_GLOBAL__sub_I_audioShield+0x128>)
    17a6:	strb.w	r1, [r3, #1207]	; 0x4b7
    17aa:	ldr	r3, [pc, #216]	; (1884 <_GLOBAL__sub_I_audioShield+0x12c>)
    17ac:	ldr	r1, [pc, #216]	; (1888 <_GLOBAL__sub_I_audioShield+0x130>)

class mSD_Base
{
  public:
    mSD_Base() {
      fsCount = 0;
    17ae:	ldr	r5, [pc, #220]	; (188c <_GLOBAL__sub_I_audioShield+0x134>)
    17b0:	str	r3, [r7, #0]
    17b2:	strb.w	lr, [r7, #8]
    17b6:	bl	10070 <__aeabi_atexit>
    17ba:	mov.w	r7, #1000	; 0x3e8

#define FILE_WHOAMI

class File : public Stream {
public:
	constexpr File() : f(nullptr) { }
    17be:	ldr	r3, [pc, #208]	; (1890 <_GLOBAL__sub_I_audioShield+0x138>)

  void mtp_yield(void);


// Storage implementation for SD. SD needs to be already initialized.
class MTPStorage_SD : public MTPStorageInterface, mSD_Base
    17c0:	mvn.w	r1, #1
    17c4:	ldr.w	lr, [pc, #232]	; 18b0 <_GLOBAL__sub_I_audioShield+0x158>
  const int nfs = sizeof(lfs_size)/sizeof(int);

  LittleFS_RAM ramfs[nfs]; // needs to be declared if LittleFS is used in storage.h
#endif

MTPStorage_SD storage;
    17c8:	mov	r2, r6
    17ca:	str.w	r7, [r5, #176]	; 0xb0
    17ce:	str.w	r1, [r5, #240]	; 0xf0
    17d2:	mov	r0, r5
    17d4:	str.w	r7, [r5, #196]	; 0xc4
    17d8:	str.w	r7, [r5, #216]	; 0xd8
    17dc:	str.w	r3, [r5, #168]	; 0xa8
    17e0:	str.w	r3, [r5, #188]	; 0xbc
    17e4:	str.w	r3, [r5, #208]	; 0xd0

class mSD_Base
{
  public:
    mSD_Base() {
      fsCount = 0;
    17e8:	str	r4, [r5, #4]
    17ea:	strb.w	r4, [r5, #172]	; 0xac
    17ee:	strb.w	r4, [r5, #180]	; 0xb4
    17f2:	str.w	r4, [r5, #184]	; 0xb8
    17f6:	strb.w	r4, [r5, #192]	; 0xc0
    17fa:	strb.w	r4, [r5, #200]	; 0xc8
    17fe:	str.w	r4, [r5, #204]	; 0xcc
    1802:	strb.w	r4, [r5, #212]	; 0xd4
    1806:	strb.w	r4, [r5, #220]	; 0xdc
    180a:	str.w	r4, [r5, #224]	; 0xe0
    180e:	ldr	r1, [pc, #132]	; (1894 <_GLOBAL__sub_I_audioShield+0x13c>)

  void mtp_yield(void);


// Storage implementation for SD. SD needs to be already initialized.
class MTPStorage_SD : public MTPStorageInterface, mSD_Base
    1810:	str.w	lr, [r5]
    1814:	str.w	r4, [r5, #228]	; 0xe4
    1818:	str.w	r4, [r5, #232]	; 0xe8
    181c:	str.w	r4, [r5, #236]	; 0xec
    1820:	str.w	r4, [r5, #244]	; 0xf4
    1824:	strb.w	r4, [r5, #248]	; 0xf8
    1828:	strb.w	r4, [r5, #249]	; 0xf9
    182c:	bl	10070 <__aeabi_atexit>

// MTP Responder.
class MTPD {
public:

  explicit MTPD(MTPStorageInterface* storage): storage_(storage) {}
    1830:	ldr	r3, [pc, #100]	; (1898 <_GLOBAL__sub_I_audioShield+0x140>)
    1832:	movw	r1, #9248	; 0x2420
    1836:	movw	r0, #9252	; 0x2424
    183a:	movw	lr, #9256	; 0x2428
	/*************************************************/
	/**    Channel Allocation                       **/
	/*************************************************/

	DMAChannel() {
		begin();
    183e:	ldr	r7, [pc, #92]	; (189c <_GLOBAL__sub_I_audioShield+0x144>)
}

/************ Basic File System Interface *************************/
#include "SD.h"
extern SDClass sdx[];
static File mfile;
    1840:	mov	r2, r6
    1842:	str	r4, [r3, r1]
    1844:	strb	r4, [r3, r0]
    1846:	ldr	r1, [pc, #88]	; (18a0 <_GLOBAL__sub_I_audioShield+0x148>)
    1848:	ldr	r0, [pc, #88]	; (18a4 <_GLOBAL__sub_I_audioShield+0x14c>)
    184a:	str	r5, [r3, #0]
    184c:	str.w	r4, [r3, lr]
    1850:	bl	10070 <__aeabi_atexit>
    1854:	mov	r1, r4
    1856:	mov	r0, r7
    1858:	bl	fe20 <DMAChannel::begin(bool)>
  static uint32_t tdm_rx_buffer[2*NBUF_I2S];
  static uint32_t acq_rx_buffer[NBUF_ACQ];
  #define I2S_DMA_PRIO 6

  #include "DMAChannel.h"
  DMAChannel dma;
    185c:	mov	r2, r6
    185e:	mov	r0, r7
    1860:	ldr	r1, [pc, #68]	; (18a8 <_GLOBAL__sub_I_audioShield+0x150>)

void SGTL5000_disable(void)
{
  chipWrite(CHIP_DIG_POWER, 0); 
  chipWrite(CHIP_ANA_POWER, 0); 
}
    1862:	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  static uint32_t tdm_rx_buffer[2*NBUF_I2S];
  static uint32_t acq_rx_buffer[NBUF_ACQ];
  #define I2S_DMA_PRIO 6

  #include "DMAChannel.h"
  DMAChannel dma;
    1866:	b.w	10070 <__aeabi_atexit>
    186a:	nop
    186c:	.word	0x20003550
    1870:	.word	0x20000538
    1874:	.word	0x200004e0
    1878:	.word	0x20000b3c
    187c:	.word	0x003d0900
    1880:	.word	0x20043e68
    1884:	.word	0x20000498
    1888:	.word	0x000001e5
    188c:	.word	0x20002c48
    1890:	.word	0x20000074
    1894:	.word	0x00000b7d
    1898:	.word	0x20041a20
    189c:	.word	0x20001638
    18a0:	.word	0x00000ac1
    18a4:	.word	0x20000b48
    18a8:	.word	0x00000399
    18ac:	.word	0x20000134
    18b0:	.word	0x200002e4

000018b4 <chipWrite(unsigned int, unsigned int)>:
  val |= Wire.read();
  return val;
}

bool chipWrite(unsigned int reg, unsigned int val)
{
    18b4:	push	{r3, r4, r5, r6, r7, lr}
	void end();
	void setClock(uint32_t frequency);
	void setSDA(uint8_t pin);
	void setSCL(uint8_t pin); 
	void beginTransmission(uint8_t address) {
		txBuffer[0] = (address << 1);
    18b6:	ldr	r4, [pc, #72]	; (1900 <chipWrite(unsigned int, unsigned int)+0x4c>)
    18b8:	mov	r7, r0
    18ba:	movs	r3, #20
		transmitting = 1;
    18bc:	movs	r5, #1
    18be:	mov	r6, r1
	}
	size_t write(long n) {
		return write((uint8_t)n);
	}
	size_t write(unsigned int n) {
		return write((uint8_t)n);
    18c0:	mov	r0, r4
    18c2:	ubfx	r1, r7, #8, #8
	void end();
	void setClock(uint32_t frequency);
	void setSDA(uint8_t pin);
	void setSCL(uint8_t pin); 
	void beginTransmission(uint8_t address) {
		txBuffer[0] = (address << 1);
    18c6:	strb.w	r3, [r4, #61]	; 0x3d
		transmitting = 1;
    18ca:	strb.w	r5, [r4, #96]	; 0x60
		txBufferLength = 1;
    18ce:	strb.w	r5, [r4, #95]	; 0x5f
	}
	size_t write(long n) {
		return write((uint8_t)n);
	}
	size_t write(unsigned int n) {
		return write((uint8_t)n);
    18d2:	bl	8978 <TwoWire::write(unsigned char)>
    18d6:	uxtb	r1, r7
    18d8:	mov	r0, r4
    18da:	bl	8978 <TwoWire::write(unsigned char)>
    18de:	ubfx	r1, r6, #8, #8
    18e2:	mov	r0, r4
    18e4:	bl	8978 <TwoWire::write(unsigned char)>
    18e8:	mov	r0, r4
    18ea:	uxtb	r1, r6
    18ec:	bl	8978 <TwoWire::write(unsigned char)>
	void beginTransmission(int address) {
		beginTransmission((uint8_t)address);
	}
	uint8_t endTransmission(uint8_t sendStop);
	uint8_t endTransmission(void) {
		return endTransmission(1);
    18f0:	mov	r1, r5
    18f2:	mov	r0, r4
    18f4:	bl	8b38 <TwoWire::endTransmission(unsigned char)>
  Wire.write(reg);
  Wire.write(val >> 8);
  Wire.write(val);
  if (Wire.endTransmission() == 0) return true;
  return false;
}
    18f8:	clz	r0, r0
    18fc:	lsrs	r0, r0, #5
    18fe:	pop	{r3, r4, r5, r6, r7, pc}
    1900:	.word	0x20000bb4

00001904 <setup>:

#include "TimeLib.h"
void printTimestamp(uint32_t tt);

void setup()
{ while(!Serial && millis()<3000); 
    1904:	push	{r4, r5, r6, lr}
    1906:	ldr	r1, [pc, #240]	; (19f8 <setup+0xf4>)
    1908:	movw	r0, #2999	; 0xbb7
    190c:	ldr	r2, [pc, #236]	; (19fc <setup+0xf8>)
        uint8_t stopbits(void) { uint8_t b = usb_cdc_line_coding[1]; if (!b) b = 1; return b; }
        uint8_t paritytype(void) { return usb_cdc_line_coding[1] >> 8; } // 0=none, 1=odd, 2=even
        uint8_t numbits(void) { return usb_cdc_line_coding[1] >> 16; }
        uint8_t dtr(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) ? 1 : 0; }
        uint8_t rts(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_RTS) ? 1 : 0; }
        operator bool() { return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    190e:	ldr	r4, [pc, #240]	; (1a00 <setup+0xfc>)
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
    1910:	ldr	r6, [pc, #240]	; (1a04 <setup+0x100>)
        uint8_t stopbits(void) { uint8_t b = usb_cdc_line_coding[1]; if (!b) b = 1; return b; }
        uint8_t paritytype(void) { return usb_cdc_line_coding[1] >> 8; } // 0=none, 1=odd, 2=even
        uint8_t numbits(void) { return usb_cdc_line_coding[1] >> 16; }
        uint8_t dtr(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) ? 1 : 0; }
        uint8_t rts(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_RTS) ? 1 : 0; }
        operator bool() { return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    1912:	ldrb	r3, [r1, #0]
    1914:	cmp	r3, #0
    1916:	beq.n	19d2 <setup+0xce>
    1918:	ldrb	r3, [r4, #0]
    191a:	lsls	r3, r3, #31
    191c:	bpl.n	19d2 <setup+0xce>
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
    191e:	ldr	r3, [r2, #0]
    1920:	ldr	r5, [r6, #0]
        uint8_t stopbits(void) { uint8_t b = usb_cdc_line_coding[1]; if (!b) b = 1; return b; }
        uint8_t paritytype(void) { return usb_cdc_line_coding[1] >> 8; } // 0=none, 1=odd, 2=even
        uint8_t numbits(void) { return usb_cdc_line_coding[1] >> 16; }
        uint8_t dtr(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) ? 1 : 0; }
        uint8_t rts(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_RTS) ? 1 : 0; }
        operator bool() { return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    1922:	subs	r3, r3, r5
    1924:	cmp	r3, #14
    1926:	bls.n	19d2 <setup+0xce>
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    1928:	movs	r1, #10
    192a:	ldr	r0, [pc, #220]	; (1a08 <setup+0x104>)
    192c:	bl	e284 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    1930:	ldr	r0, [pc, #216]	; (1a0c <setup+0x108>)
    1932:	bl	ff48 <Print::println()>
  Serial.println("MTP logger");
  setSyncProvider(rtc_get);
    1936:	ldr	r0, [pc, #216]	; (1a10 <setup+0x10c>)
    1938:	bl	82b4 <setSyncProvider(long (*)())>
  // Set Time callback // needed for SDFat
  FsDateTime::callback = dateTime;
  #endif


  audioShield.enable();
    193c:	ldr	r4, [pc, #212]	; (1a14 <setup+0x110>)
void setup()
{ while(!Serial && millis()<3000); 
  Serial.println("MTP logger");
  setSyncProvider(rtc_get);

  printTimestamp(rtc_get());
    193e:	bl	f184 <rtc_get>
    1942:	bl	103c <printTimestamp(unsigned long)>

  #if USE_EVENTS==1
    usb_init_events();
    1946:	bl	7a78 <usb_init_events>
  #endif

  #if !__has_include("usb_mtp.h")
    usb_mtp_configure();
  #endif
  storage_configure();
    194a:	bl	c50 <storage_configure()>

  #if USE_SD==1
  // Set Time callback // needed for SDFat
  FsDateTime::callback = dateTime;
    194e:	ldr	r2, [pc, #200]	; (1a18 <setup+0x114>)
    1950:	ldr	r3, [pc, #200]	; (1a1c <setup+0x118>)
  #endif


  audioShield.enable();
    1952:	mov	r0, r4
  #endif
  storage_configure();

  #if USE_SD==1
  // Set Time callback // needed for SDFat
  FsDateTime::callback = dateTime;
    1954:	str	r2, [r3, #0]
  #endif


  audioShield.enable();
    1956:	bl	8688 <AudioControlSGTL5000::enable()>
	bool inputSelect(int n) {
		if (n == AUDIO_INPUT_LINEIN) {
			return write(0x0020, 0x055) // +7.5dB gain (1.3Vp-p full scale)
			 && write(0x0024, ana_ctrl | (1<<2)); // enable linein
		} else if (n == AUDIO_INPUT_MIC) {
			return write(0x002A, 0x0173) // mic preamp gain = +40dB
    195a:	mov	r0, r4
    195c:	movw	r2, #371	; 0x173
    1960:	movs	r1, #42	; 0x2a
    1962:	bl	8404 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
			 && write(0x0020, 0x088)     // input gain +12dB (is this enough?)
			 && write(0x0024, ana_ctrl & ~(1<<2)); // enable mic
    1966:	cmp	r0, #0
    1968:	bne.n	19da <setup+0xd6>
          I2S1_RCSR |= (I2S_RCSR_RE | I2S_RCSR_BCE);
      }

      void acq_stop(void)
      {
          I2S1_RCSR &= ~(I2S_RCSR_RE | I2S_RCSR_BCE);
    196a:	ldr	r3, [pc, #180]	; (1a20 <setup+0x11c>)
          //DMA_CERQ = dma.channel;     
      }

      void acq_init(int32_t fsamp)
      {
          CCM_CCGR5 |= CCM_CCGR5_SAI1(CCM_CCGR_ON);
    196c:	ldr	r1, [pc, #180]	; (1a24 <setup+0x120>)
          I2S1_RCSR |= (I2S_RCSR_RE | I2S_RCSR_BCE);
      }

      void acq_stop(void)
      {
          I2S1_RCSR &= ~(I2S_RCSR_RE | I2S_RCSR_BCE);
    196e:	ldr.w	r2, [r3, #136]	; 0x88
    1972:	bic.w	r2, r2, #2415919104	; 0x90000000
    1976:	str.w	r2, [r3, #136]	; 0x88
          //DMA_CERQ = dma.channel;     
      }

      void acq_init(int32_t fsamp)
      {
          CCM_CCGR5 |= CCM_CCGR5_SAI1(CCM_CCGR_ON);
    197a:	ldr	r2, [r1, #124]	; 0x7c
    197c:	orr.w	r2, r2, #786432	; 0xc0000
    1980:	str	r2, [r1, #124]	; 0x7c

          // if either transmitter or receiver is enabled, do nothing
          if (I2S1_RCSR & I2S_RCSR_RE) return;
    1982:	ldr.w	r3, [r3, #136]	; 0x88
    1986:	cmp	r3, #0
    1988:	blt.n	1990 <setup+0x8c>
    198a:	ldr	r0, [pc, #156]	; (1a28 <setup+0x124>)
    198c:	bl	1538 <acq_init(long) [clone .part.59]>
  audioShield.enable();
  audioShield.inputSelect(AUDIO_SELECT);  //AUDIO_INPUT_LINEIN or AUDIO_INPUT_MIC

  acq_stop();
  acq_init(fsamps[IFR]);
  delay(10);
    1990:	movs	r0, #10
    1992:	bl	ef74 <delay>
  if(sgtl_mode>3) sgtl_mode = 3; 
  if(sgtl_mode<0) sgtl_mode = 0;
  
//  write(CHIP_CLK_CTRL, 0x0004);  // 44.1 kHz, 256*Fs
//	write(CHIP_I2S_CTRL, 0x0130); // SCLK=32*Fs, 16bit, I2S format
  chipWrite(CHIP_CLK_CTRL, (sgtl_mode<<2));  // 256*Fs| sgtl_mode = 0:32 kHz; 1:44.1 kHz; 2:48 kHz; 3:96 kHz
    1996:	movs	r1, #12
    1998:	movs	r0, #4
    199a:	bl	18b4 <chipWrite(unsigned int, unsigned int)>
  SGTL5000_modification(IFR); // must be called after I2S initialization stabilized 
  //(0: 8kHz, 1: 16 kHz 2:32 kHz, 3:44.1 kHz, 4:48 kHz, 5:96 kHz, 6:192 kHz, 7:384kHz)
  
  if(AUDIO_SELECT == AUDIO_INPUT_MIC)
  {
    audioShield.micGain(MicGain);
    199e:	movs	r1, #0
    19a0:	ldr	r0, [pc, #112]	; (1a14 <setup+0x110>)
    19a2:	bl	8460 <AudioControlSGTL5000::micGain(unsigned int)>
  }

  state=-1;
    19a6:	ldr	r3, [pc, #132]	; (1a2c <setup+0x128>)
    19a8:	movw	r2, #65535	; 0xffff
    19ac:	movs	r1, #10
    19ae:	ldr	r0, [pc, #128]	; (1a30 <setup+0x12c>)
    19b0:	strh	r2, [r3, #0]
    19b2:	bl	e284 <usb_serial_write>
    19b6:	ldr	r0, [pc, #84]	; (1a0c <setup+0x108>)
    19b8:	bl	ff48 <Print::println()>
    19bc:	movs	r1, #67	; 0x43
    19be:	ldr	r0, [pc, #116]	; (1a34 <setup+0x130>)
    19c0:	bl	e284 <usb_serial_write>
    19c4:	ldr	r0, [pc, #68]	; (1a0c <setup+0x108>)
    19c6:	bl	ff48 <Print::println()>

  Serial.println("Setup done");
  Serial.println(" Enter 's' to start, 'q' to stop acquisition and 'r' to restart MTP");
  Serial.flush();
}
    19ca:	ldmia.w	sp!, {r4, r5, r6, lr}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
    19ce:	b.w	e2e8 <usb_serial_flush_output>
    19d2:	ldr	r3, [r2, #0]

#include "TimeLib.h"
void printTimestamp(uint32_t tt);

void setup()
{ while(!Serial && millis()<3000); 
    19d4:	cmp	r3, r0
    19d6:	bls.n	1912 <setup+0xe>
    19d8:	b.n	1928 <setup+0x24>
		if (n == AUDIO_INPUT_LINEIN) {
			return write(0x0020, 0x055) // +7.5dB gain (1.3Vp-p full scale)
			 && write(0x0024, ana_ctrl | (1<<2)); // enable linein
		} else if (n == AUDIO_INPUT_MIC) {
			return write(0x002A, 0x0173) // mic preamp gain = +40dB
			 && write(0x0020, 0x088)     // input gain +12dB (is this enough?)
    19da:	movs	r2, #136	; 0x88
    19dc:	movs	r1, #32
    19de:	mov	r0, r4
    19e0:	bl	8404 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
    19e4:	cmp	r0, #0
    19e6:	beq.n	196a <setup+0x66>
			 && write(0x0024, ana_ctrl & ~(1<<2)); // enable mic
    19e8:	ldrh	r2, [r4, #6]
    19ea:	mov	r0, r4
    19ec:	movs	r1, #36	; 0x24
    19ee:	bic.w	r2, r2, #4
    19f2:	bl	8404 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
    19f6:	b.n	196a <setup+0x66>
    19f8:	.word	0x20044798
    19fc:	.word	0x200447a4
    1a00:	.word	0x200446c8
    1a04:	.word	0x20044954
    1a08:	.word	0x2000027c
    1a0c:	.word	0x20000c60
    1a10:	.word	0x0000f185
    1a14:	.word	0x20043e68
    1a18:	.word	0x000002fd
    1a1c:	.word	0x20044068
    1a20:	.word	0x40384000
    1a24:	.word	0x400fc000
    1a28:	.word	0x00017700
    1a2c:	.word	0x20002d4e
    1a30:	.word	0x20000288
    1a34:	.word	0x20000294

00001a38 <MTPStorage_SD::addFilesystem(FS&, char const*)>:
    mSD_Base() {
      fsCount = 0;
    }

    void sd_addFilesystem(FS &fs, const char *name) {
      if (fsCount < MTPD_MAX_FILESYSTEMS) {
    1a38:	ldr	r3, [r0, #4]
    1a3a:	cmp	r3, #19
    1a3c:	bgt.n	1a50 <MTPStorage_SD::addFilesystem(FS&, char const*)+0x18>

// Storage implementation for SD. SD needs to be already initialized.
class MTPStorage_SD : public MTPStorageInterface, mSD_Base
{ 
public:
  void addFilesystem(FS &fs, const char *name) { sd_addFilesystem(fs, name);}
    1a3e:	push	{r4}
    1a40:	add.w	r4, r0, r3, lsl #2
    }

    void sd_addFilesystem(FS &fs, const char *name) {
      if (fsCount < MTPD_MAX_FILESYSTEMS) {
        sd_name[fsCount] = name;
        sdx[fsCount++] = &fs;
    1a44:	adds	r3, #1
      fsCount = 0;
    }

    void sd_addFilesystem(FS &fs, const char *name) {
      if (fsCount < MTPD_MAX_FILESYSTEMS) {
        sd_name[fsCount] = name;
    1a46:	str	r2, [r4, #8]
        sdx[fsCount++] = &fs;
    1a48:	str	r3, [r0, #4]
    1a4a:	str	r1, [r4, #88]	; 0x58

// Storage implementation for SD. SD needs to be already initialized.
class MTPStorage_SD : public MTPStorageInterface, mSD_Base
{ 
public:
  void addFilesystem(FS &fs, const char *name) { sd_addFilesystem(fs, name);}
    1a4c:	ldr.w	r4, [sp], #4
    1a50:	bx	lr
    1a52:	nop

00001a54 <MTPStorage_SD::get_FSCount()>:
  Record ReadIndexRecord(uint32_t i) ;
  uint16_t ConstructFilename(int i, char* out, int len) ;
  void OpenFileByIndex(uint32_t i, uint32_t mode = FILE_READ) ;
  void printRecord(int h, Record *p);

  uint32_t get_FSCount(void) {return sd_getFSCount();}
    1a54:	ldr	r0, [r0, #4]
    1a56:	bx	lr

00001a58 <MTPStorage_SD::get_FSName(unsigned long)>:
      for(int ii=0; ii<fsCount;ii++) if(!strcmp(name,sd_name[ii])) return ii;
      return 0xFFFFFFFFUL;
    }

    uint32_t sd_getFSCount(void) {return fsCount;}
    const char *sd_getFSName(uint32_t store) { return sd_name[store];}
    1a58:	add.w	r1, r0, r1, lsl #2
  uint16_t ConstructFilename(int i, char* out, int len) ;
  void OpenFileByIndex(uint32_t i, uint32_t mode = FILE_READ) ;
  void printRecord(int h, Record *p);

  uint32_t get_FSCount(void) {return sd_getFSCount();}
  const char *get_FSName(uint32_t storage) { return sd_getFSName(storage);}
    1a5c:	ldr	r0, [r1, #8]
    1a5e:	bx	lr

00001a60 <MTPStorage_SD::readonly(unsigned long)>:

// These should probably be weak.
void mtp_yield() {}
void mtp_lock_storage(bool lock) {}

  bool MTPStorage_SD::readonly(uint32_t store) { return false; }
    1a60:	movs	r0, #0
    1a62:	bx	lr

00001a64 <MTPStorage_SD::has_directories(unsigned long)>:
  bool MTPStorage_SD::has_directories(uint32_t store) { return true; }
    1a64:	movs	r0, #1
    1a66:	bx	lr

00001a68 <MTPStorage_SD::totalSize(unsigned long)>:
    bool sd_mkdir(uint32_t store, char *filename) {  return sdx[store]->mkdir(filename);  }
    bool sd_rename(uint32_t store, char *oldfilename, char *newfilename) { return sdx[store]->rename(oldfilename,newfilename);  }
    bool sd_remove(uint32_t store, const char *filename) {    Serial.println(filename); return sdx[store]->remove(filename);  }
    bool sd_rmdir(uint32_t store, char *filename) { return sdx[store]->rmdir(filename);  }

    uint64_t sd_totalSize(uint32_t store) { return sdx[store]->totalSize();  }
    1a68:	add.w	r1, r0, r1, lsl #2
    1a6c:	ldr	r0, [r1, #88]	; 0x58
    1a6e:	ldr	r3, [r0, #0]
    1a70:	ldr	r3, [r3, #28]
    1a72:	bx	r3

00001a74 <MTPStorage_SD::usedSize(unsigned long)>:
    uint64_t sd_usedSize(uint32_t store)  { return sdx[store]->usedSize();  }
    1a74:	add.w	r1, r0, r1, lsl #2
    1a78:	ldr	r0, [r1, #88]	; 0x58
    1a7a:	ldr	r3, [r0, #0]
    1a7c:	ldr	r3, [r3, #24]
    1a7e:	bx	r3

00001a80 <MTPStorage_SD::write(char const*, unsigned long)>:
#endif
	virtual size_t read(void *buf, size_t nbyte) {
		return (f) ? f->read(buf, nbyte) : 0;
	}
	virtual size_t write(const void *buf, size_t size) {
		return (f) ? f->write(buf, size) : 0;
    1a80:	ldr.w	r0, [r0, #204]	; 0xcc
    1a84:	cmp	r0, #0
    1a86:	beq.n	1aee <MTPStorage_SD::write(char const*, unsigned long)+0x6e>
    1a88:	ldr	r3, [pc, #112]	; (1afc <MTPStorage_SD::write(char const*, unsigned long)+0x7c>)
    #endif
    return ret;
  }

  size_t MTPStorage_SD::write(const char* data, uint32_t bytes)
  {
    1a8a:	push	{r4, r5, r6}
    1a8c:	ldr	r4, [r0, #0]
    1a8e:	ldr	r4, [r4, #44]	; 0x2c
    1a90:	cmp	r4, r3
    1a92:	bne.n	1ae8 <MTPStorage_SD::write(char const*, unsigned long)+0x68>
    1a94:	ldr	r0, [r0, #16]
    1a96:	cbz	r0, 1ae2 <MTPStorage_SD::write(char const*, unsigned long)+0x62>
    1a98:	ldr	r4, [r0, #0]
    1a9a:	ldr	r4, [r4, #44]	; 0x2c
    1a9c:	cmp	r4, r3
    1a9e:	bne.n	1ae8 <MTPStorage_SD::write(char const*, unsigned long)+0x68>
    1aa0:	ldr	r0, [r0, #16]
    1aa2:	cbz	r0, 1ae2 <MTPStorage_SD::write(char const*, unsigned long)+0x62>
    1aa4:	ldr	r4, [r0, #0]
    1aa6:	ldr	r4, [r4, #44]	; 0x2c
    1aa8:	cmp	r4, r3
    1aaa:	bne.n	1ae8 <MTPStorage_SD::write(char const*, unsigned long)+0x68>
    1aac:	ldr	r0, [r0, #16]
    1aae:	cbz	r0, 1ae2 <MTPStorage_SD::write(char const*, unsigned long)+0x62>
    1ab0:	ldr	r4, [r0, #0]
    1ab2:	ldr	r4, [r4, #44]	; 0x2c
    1ab4:	cmp	r4, r3
    1ab6:	bne.n	1ae8 <MTPStorage_SD::write(char const*, unsigned long)+0x68>
    1ab8:	ldr	r0, [r0, #16]
    1aba:	cbz	r0, 1ae2 <MTPStorage_SD::write(char const*, unsigned long)+0x62>
    1abc:	mov	r6, r2
    1abe:	ldr	r2, [r0, #0]
    1ac0:	mov	r5, r1
    1ac2:	ldr	r4, [r2, #44]	; 0x2c
    1ac4:	cmp	r4, r3
    1ac6:	bne.n	1af2 <MTPStorage_SD::write(char const*, unsigned long)+0x72>
    1ac8:	ldr	r0, [r0, #16]
    1aca:	cbz	r0, 1ae2 <MTPStorage_SD::write(char const*, unsigned long)+0x62>
    1acc:	ldr	r2, [r0, #0]
    1ace:	ldr	r4, [r2, #44]	; 0x2c
    1ad0:	cmp	r4, r3
    1ad2:	bne.n	1af2 <MTPStorage_SD::write(char const*, unsigned long)+0x72>
    1ad4:	ldr	r0, [r0, #16]
    1ad6:	cbz	r0, 1ae2 <MTPStorage_SD::write(char const*, unsigned long)+0x62>
    1ad8:	ldr	r3, [r0, #0]
    1ada:	mov	r2, r6
    1adc:	ldr	r3, [r3, #44]	; 0x2c
      mtp_lock_storage(true);
      size_t ret = file_.write(data,bytes);
      mtp_lock_storage(false);
      return ret;
  }
    1ade:	pop	{r4, r5, r6}
    1ae0:	bx	r3
    1ae2:	movs	r0, #0
    1ae4:	pop	{r4, r5, r6}
    1ae6:	bx	lr
    1ae8:	mov	r3, r4
    1aea:	pop	{r4, r5, r6}
    1aec:	bx	r3
    1aee:	movs	r0, #0
    1af0:	bx	lr
    1af2:	mov	r2, r6
    1af4:	mov	r1, r5
    1af6:	mov	r3, r4
    1af8:	pop	{r4, r5, r6}
    1afa:	bx	r3
    1afc:	.word	0x00000099

00001b00 <MTPStorage_SD::ResetIndex()>:
	}
	virtual void close() {
		if (f) f->close();
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
    1b00:	ldr.w	r3, [r0, #184]	; 0xb8
    1b04:	cmp	r3, #0
    1b06:	beq.n	1b70 <MTPStorage_SD::ResetIndex()+0x70>
    1b08:	ldr	r2, [r3, #0]
    1b0a:	ldr	r1, [pc, #108]	; (1b78 <MTPStorage_SD::ResetIndex()+0x78>)
    1b0c:	ldr	r2, [r2, #68]	; 0x44
    1b0e:	cmp	r2, r1
    index_=sd_open(0,indexFile, FILE_WRITE_BEGIN);
    if(!index_) Serial.println("cannot open Index file"); 
    mtp_lock_storage(false);
  }

  void MTPStorage_SD::ResetIndex() {
    1b10:	push	{r4, lr}
    1b12:	mov	r4, r0
    1b14:	bne.n	1b6a <MTPStorage_SD::ResetIndex()+0x6a>
    1b16:	ldr	r0, [r3, #16]
    1b18:	cbz	r0, 1b68 <MTPStorage_SD::ResetIndex()+0x68>
    1b1a:	ldr	r3, [r0, #0]
    1b1c:	ldr	r3, [r3, #68]	; 0x44
    1b1e:	cmp	r3, r2
    1b20:	bne.n	1b72 <MTPStorage_SD::ResetIndex()+0x72>
    1b22:	ldr	r0, [r0, #16]
    1b24:	cbz	r0, 1b68 <MTPStorage_SD::ResetIndex()+0x68>
    1b26:	ldr	r2, [r0, #0]
    1b28:	ldr	r2, [r2, #68]	; 0x44
    1b2a:	cmp	r2, r3
    1b2c:	bne.n	1b6c <MTPStorage_SD::ResetIndex()+0x6c>
    1b2e:	ldr	r0, [r0, #16]
    1b30:	cbz	r0, 1b68 <MTPStorage_SD::ResetIndex()+0x68>
    1b32:	ldr	r3, [r0, #0]
    1b34:	ldr	r3, [r3, #68]	; 0x44
    1b36:	cmp	r3, r2
    1b38:	bne.n	1b72 <MTPStorage_SD::ResetIndex()+0x72>
    1b3a:	ldr	r0, [r0, #16]
    1b3c:	cbz	r0, 1b68 <MTPStorage_SD::ResetIndex()+0x68>
    1b3e:	ldr	r2, [r0, #0]
    1b40:	ldr	r2, [r2, #68]	; 0x44
    1b42:	cmp	r2, r3
    1b44:	bne.n	1b6c <MTPStorage_SD::ResetIndex()+0x6c>
    1b46:	ldr	r0, [r0, #16]
    1b48:	cbz	r0, 1b68 <MTPStorage_SD::ResetIndex()+0x68>
    1b4a:	ldr	r3, [r0, #0]
    1b4c:	ldr	r3, [r3, #68]	; 0x44
    1b4e:	blx	r3
    if(!sd_isOpen(index_)) return;
    1b50:	cbz	r0, 1b68 <MTPStorage_SD::ResetIndex()+0x68>
    CloseIndex();
    1b52:	ldr	r3, [r4, #0]
    1b54:	mov	r0, r4
    1b56:	ldr	r3, [r3, #64]	; 0x40
    1b58:	blx	r3
//    OpenIndex();

    all_scanned_ = false;
    1b5a:	movs	r2, #0
    open_file_ = 0xFFFFFFFEUL;
    1b5c:	mvn.w	r3, #1
  void MTPStorage_SD::ResetIndex() {
    if(!sd_isOpen(index_)) return;
    CloseIndex();
//    OpenIndex();

    all_scanned_ = false;
    1b60:	strb.w	r2, [r4, #249]	; 0xf9
    open_file_ = 0xFFFFFFFEUL;
    1b64:	str.w	r3, [r4, #240]	; 0xf0
    1b68:	pop	{r4, pc}
    1b6a:	mov	r0, r3
    1b6c:	blx	r2
    1b6e:	b.n	1b50 <MTPStorage_SD::ResetIndex()+0x50>
    1b70:	bx	lr
    1b72:	blx	r3
    1b74:	b.n	1b50 <MTPStorage_SD::ResetIndex()+0x50>
    1b76:	nop
    1b78:	.word	0x0000011d

00001b7c <MTPStorage_SD::CloseIndex()>:

  uint64_t MTPStorage_SD::totalSize(uint32_t store) { return sd_totalSize(store); }
  uint64_t MTPStorage_SD::usedSize(uint32_t store) { return sd_usedSize(store); }

  void MTPStorage_SD::CloseIndex()
  {
    1b7c:	push	{r4, lr}
    1b7e:	mov	r4, r0
    1b80:	ldr.w	r0, [r0, #184]	; 0xb8
    1b84:	cmp	r0, #0
    1b86:	beq.n	1c68 <MTPStorage_SD::CloseIndex()+0xec>
    1b88:	ldr	r3, [r0, #0]
    1b8a:	ldr	r2, [pc, #256]	; (1c8c <MTPStorage_SD::CloseIndex()+0x110>)
    1b8c:	ldr	r3, [r3, #68]	; 0x44
    1b8e:	cmp	r3, r2
    1b90:	bne.n	1c74 <MTPStorage_SD::CloseIndex()+0xf8>
    1b92:	ldr	r0, [r0, #16]
    1b94:	cmp	r0, #0
    1b96:	beq.n	1c68 <MTPStorage_SD::CloseIndex()+0xec>
    1b98:	ldr	r2, [r0, #0]
    1b9a:	ldr	r2, [r2, #68]	; 0x44
    1b9c:	cmp	r2, r3
    1b9e:	bne.n	1c86 <MTPStorage_SD::CloseIndex()+0x10a>
    1ba0:	ldr	r0, [r0, #16]
    1ba2:	cmp	r0, #0
    1ba4:	beq.n	1c68 <MTPStorage_SD::CloseIndex()+0xec>
    1ba6:	ldr	r3, [r0, #0]
    1ba8:	ldr	r3, [r3, #68]	; 0x44
    1baa:	cmp	r3, r2
    1bac:	bne.n	1c74 <MTPStorage_SD::CloseIndex()+0xf8>
    1bae:	ldr	r0, [r0, #16]
    1bb0:	cmp	r0, #0
    1bb2:	beq.n	1c68 <MTPStorage_SD::CloseIndex()+0xec>
    1bb4:	ldr	r2, [r0, #0]
    1bb6:	ldr	r2, [r2, #68]	; 0x44
    1bb8:	cmp	r2, r3
    1bba:	bne.n	1c86 <MTPStorage_SD::CloseIndex()+0x10a>
    1bbc:	ldr	r0, [r0, #16]
    1bbe:	cmp	r0, #0
    1bc0:	beq.n	1c68 <MTPStorage_SD::CloseIndex()+0xec>
    1bc2:	ldr	r3, [r0, #0]
    1bc4:	ldr	r3, [r3, #68]	; 0x44
    1bc6:	cmp	r3, r2
    1bc8:	bne.n	1c74 <MTPStorage_SD::CloseIndex()+0xf8>
    1bca:	ldr	r0, [r0, #16]
    1bcc:	cmp	r0, #0
    1bce:	beq.n	1c68 <MTPStorage_SD::CloseIndex()+0xec>
    1bd0:	ldr	r3, [r0, #0]
    1bd2:	ldr	r3, [r3, #68]	; 0x44
    1bd4:	blx	r3
    mtp_lock_storage(true);
    if(sd_isOpen(index_)) index_.close();
    1bd6:	cmp	r0, #0
    1bd8:	beq.n	1c68 <MTPStorage_SD::CloseIndex()+0xec>
	}
	virtual uint64_t size() {
		return (f) ? f->size() : 0;
	}
	virtual void close() {
		if (f) f->close();
    1bda:	ldr.w	r0, [r4, #184]	; 0xb8
    1bde:	cmp	r0, #0
    1be0:	beq.n	1c68 <MTPStorage_SD::CloseIndex()+0xec>
    1be2:	ldr	r2, [r0, #0]
    1be4:	ldr	r3, [pc, #168]	; (1c90 <MTPStorage_SD::CloseIndex()+0x114>)
    1be6:	ldr	r2, [r2, #64]	; 0x40
    1be8:	cmp	r2, r3
    1bea:	bne.n	1c78 <MTPStorage_SD::CloseIndex()+0xfc>
    1bec:	ldr	r0, [r0, #16]
    1bee:	cmp	r0, #0
    1bf0:	beq.n	1c68 <MTPStorage_SD::CloseIndex()+0xec>
    1bf2:	ldr	r2, [r0, #0]
    1bf4:	ldr	r2, [r2, #64]	; 0x40
    1bf6:	cmp	r2, r3
    1bf8:	bne.n	1c78 <MTPStorage_SD::CloseIndex()+0xfc>
    1bfa:	ldr	r0, [r0, #16]
    1bfc:	cmp	r0, #0
    1bfe:	beq.n	1c68 <MTPStorage_SD::CloseIndex()+0xec>
    1c00:	ldr	r2, [r0, #0]
    1c02:	ldr	r2, [r2, #64]	; 0x40
    1c04:	cmp	r2, r3
    1c06:	bne.n	1c78 <MTPStorage_SD::CloseIndex()+0xfc>
    1c08:	ldr	r0, [r0, #16]
    1c0a:	cmp	r0, #0
    1c0c:	beq.n	1c68 <MTPStorage_SD::CloseIndex()+0xec>
    1c0e:	ldr	r2, [r0, #0]
    1c10:	ldr	r2, [r2, #64]	; 0x40
    1c12:	cmp	r2, r3
    1c14:	bne.n	1c78 <MTPStorage_SD::CloseIndex()+0xfc>
    1c16:	ldr	r0, [r0, #16]
    1c18:	cbz	r0, 1c68 <MTPStorage_SD::CloseIndex()+0xec>
    1c1a:	ldr	r2, [r0, #0]
    1c1c:	ldr	r2, [r2, #64]	; 0x40
    1c1e:	cmp	r2, r3
    1c20:	bne.n	1c78 <MTPStorage_SD::CloseIndex()+0xfc>
    1c22:	ldr	r0, [r0, #16]
    1c24:	cbz	r0, 1c68 <MTPStorage_SD::CloseIndex()+0xec>
    1c26:	ldr	r2, [r0, #0]
    1c28:	ldr	r2, [r2, #64]	; 0x40
    1c2a:	cmp	r2, r3
    1c2c:	bne.n	1c78 <MTPStorage_SD::CloseIndex()+0xfc>
    1c2e:	ldr	r0, [r0, #16]
    1c30:	cbz	r0, 1c68 <MTPStorage_SD::CloseIndex()+0xec>
    1c32:	ldr	r2, [r0, #0]
    1c34:	ldr	r2, [r2, #64]	; 0x40
    1c36:	cmp	r2, r3
    1c38:	bne.n	1c78 <MTPStorage_SD::CloseIndex()+0xfc>
    1c3a:	ldr	r0, [r0, #16]
    1c3c:	cbz	r0, 1c68 <MTPStorage_SD::CloseIndex()+0xec>
    1c3e:	ldr	r2, [r0, #0]
    1c40:	ldr	r2, [r2, #64]	; 0x40
    1c42:	cmp	r2, r3
    1c44:	bne.n	1c78 <MTPStorage_SD::CloseIndex()+0xfc>
    1c46:	ldr	r0, [r0, #16]
    1c48:	cbz	r0, 1c68 <MTPStorage_SD::CloseIndex()+0xec>
    1c4a:	ldr	r2, [r0, #0]
    1c4c:	ldr	r2, [r2, #64]	; 0x40
    1c4e:	cmp	r2, r3
    1c50:	bne.n	1c78 <MTPStorage_SD::CloseIndex()+0xfc>
    1c52:	ldr	r0, [r0, #16]
    1c54:	cbz	r0, 1c68 <MTPStorage_SD::CloseIndex()+0xec>
    1c56:	ldr	r2, [r0, #0]
    1c58:	ldr	r2, [r2, #64]	; 0x40
    1c5a:	cmp	r2, r3
    1c5c:	bne.n	1c78 <MTPStorage_SD::CloseIndex()+0xfc>
    1c5e:	ldr	r0, [r0, #16]
    1c60:	cbz	r0, 1c68 <MTPStorage_SD::CloseIndex()+0xec>
    1c62:	ldr	r3, [r0, #0]
    1c64:	ldr	r3, [r3, #64]	; 0x40
    1c66:	blx	r3
    mtp_lock_storage(false);
    index_generated = false;
    1c68:	movs	r3, #0
    1c6a:	strb.w	r3, [r4, #248]	; 0xf8
    index_entries_ = 0;
    1c6e:	str.w	r3, [r4, #244]	; 0xf4
    1c72:	pop	{r4, pc}
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
    1c74:	blx	r3
    1c76:	b.n	1bd6 <MTPStorage_SD::CloseIndex()+0x5a>
	}
	virtual uint64_t size() {
		return (f) ? f->size() : 0;
	}
	virtual void close() {
		if (f) f->close();
    1c78:	blx	r2
  void MTPStorage_SD::CloseIndex()
  {
    mtp_lock_storage(true);
    if(sd_isOpen(index_)) index_.close();
    mtp_lock_storage(false);
    index_generated = false;
    1c7a:	movs	r3, #0
    1c7c:	strb.w	r3, [r4, #248]	; 0xf8
    index_entries_ = 0;
    1c80:	str.w	r3, [r4, #244]	; 0xf4
    1c84:	pop	{r4, pc}
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
    1c86:	blx	r2
    1c88:	b.n	1bd6 <MTPStorage_SD::CloseIndex()+0x5a>
    1c8a:	nop
    1c8c:	.word	0x0000011d
    1c90:	.word	0x00000111

00001c94 <File::invalidate() [clone .isra.1]>:
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    1c94:	ldr	r2, [r0, #0]
    1c96:	cmp	r2, #0
    1c98:	beq.n	1d14 <File::invalidate() [clone .isra.1]+0x80>
    1c9a:	ldr	r3, [r2, #16]
    1c9c:	subs	r3, #1
    1c9e:	str	r3, [r2, #16]
    1ca0:	cmp	r3, #0
    1ca2:	bne.n	1d14 <File::invalidate() [clone .isra.1]+0x80>
	}
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
    1ca4:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		if (f && --(f->refcount) == 0) delete f;
    1ca8:	ldr	r4, [r0, #0]
    1caa:	cmp	r4, #0
    1cac:	beq.n	1d16 <File::invalidate() [clone .isra.1]+0x82>
    1cae:	ldr	r3, [r4, #0]
    1cb0:	ldr	r1, [pc, #120]	; (1d2c <File::invalidate() [clone .isra.1]+0x98>)
    1cb2:	ldr	r3, [r3, #32]
    1cb4:	cmp	r3, r1
    1cb6:	bne.n	1d1a <File::invalidate() [clone .isra.1]+0x86>
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    1cb8:	ldr	r6, [pc, #116]	; (1d30 <File::invalidate() [clone .isra.1]+0x9c>)
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    1cba:	ldr	r2, [r4, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    1cbc:	str	r6, [r4, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    1cbe:	cbz	r2, 1d08 <File::invalidate() [clone .isra.1]+0x74>
    1cc0:	ldr	r3, [r2, #16]
    1cc2:	subs	r3, #1
    1cc4:	str	r3, [r2, #16]
    1cc6:	cbnz	r3, 1d08 <File::invalidate() [clone .isra.1]+0x74>
    1cc8:	ldr	r5, [r4, #16]
    1cca:	cbz	r5, 1d08 <File::invalidate() [clone .isra.1]+0x74>
    1ccc:	ldr	r3, [r5, #0]
    1cce:	ldr	r3, [r3, #32]
    1cd0:	cmp	r3, r1
    1cd2:	bne.n	1d22 <File::invalidate() [clone .isra.1]+0x8e>
    1cd4:	ldr	r2, [r5, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    1cd6:	str	r6, [r5, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    1cd8:	cbz	r2, 1d00 <File::invalidate() [clone .isra.1]+0x6c>
    1cda:	ldr	r3, [r2, #16]
    1cdc:	subs	r3, #1
    1cde:	str	r3, [r2, #16]
    1ce0:	cbnz	r3, 1d00 <File::invalidate() [clone .isra.1]+0x6c>
    1ce2:	ldr	r7, [r5, #16]
    1ce4:	cbz	r7, 1d00 <File::invalidate() [clone .isra.1]+0x6c>
    1ce6:	ldr	r3, [r7, #0]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    1ce8:	mov	r0, r7
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    1cea:	ldr	r3, [r3, #32]
    1cec:	cmp	r3, r1
    1cee:	bne.n	1d28 <File::invalidate() [clone .isra.1]+0x94>
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    1cf0:	str.w	r6, [r0], #16
		invalidate();
    1cf4:	bl	1c94 <File::invalidate() [clone .isra.1]>
	}
    1cf8:	mov	r0, r7
    1cfa:	movs	r1, #20
    1cfc:	bl	1006c <operator delete(void*, unsigned int)>
    1d00:	mov	r0, r5
    1d02:	movs	r1, #20
    1d04:	bl	1006c <operator delete(void*, unsigned int)>
    1d08:	mov	r0, r4
    1d0a:	movs	r1, #20
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
	}
    1d0c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
		invalidate();
	}
    1d10:	b.w	1006c <operator delete(void*, unsigned int)>
    1d14:	bx	lr
    1d16:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    1d1a:	mov	r0, r4
	}
    1d1c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    1d20:	bx	r3
    1d22:	mov	r0, r5
    1d24:	blx	r3
    1d26:	b.n	1d08 <File::invalidate() [clone .isra.1]+0x74>
    1d28:	blx	r3
    1d2a:	b.n	1d00 <File::invalidate() [clone .isra.1]+0x6c>
    1d2c:	.word	0x00000b4d
    1d30:	.word	0x20000074

00001d34 <MTPStorage_SD::OpenIndex()>:
  }

  void MTPStorage_SD::OpenIndex() 
  { if(sd_isOpen(index_)) return; // only once
    1d34:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    1d38:	mov	r4, r0
	}
	virtual void close() {
		if (f) f->close();
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
    1d3a:	ldr.w	r0, [r0, #184]	; 0xb8
    1d3e:	sub	sp, #28
    1d40:	cbz	r0, 1d94 <MTPStorage_SD::OpenIndex()+0x60>
    1d42:	ldr	r3, [r0, #0]
    1d44:	ldr	r2, [pc, #536]	; (1f60 <MTPStorage_SD::OpenIndex()+0x22c>)
    1d46:	ldr	r3, [r3, #68]	; 0x44
    1d48:	cmp	r3, r2
    1d4a:	bne.w	2064 <MTPStorage_SD::OpenIndex()+0x330>
    1d4e:	ldr	r0, [r0, #16]
    1d50:	cbz	r0, 1d94 <MTPStorage_SD::OpenIndex()+0x60>
    1d52:	ldr	r2, [r0, #0]
    1d54:	ldr	r2, [r2, #68]	; 0x44
    1d56:	cmp	r2, r3
    1d58:	bne.w	2078 <MTPStorage_SD::OpenIndex()+0x344>
    1d5c:	ldr	r0, [r0, #16]
    1d5e:	cbz	r0, 1d94 <MTPStorage_SD::OpenIndex()+0x60>
    1d60:	ldr	r3, [r0, #0]
    1d62:	ldr	r3, [r3, #68]	; 0x44
    1d64:	cmp	r3, r2
    1d66:	bne.w	2064 <MTPStorage_SD::OpenIndex()+0x330>
    1d6a:	ldr	r0, [r0, #16]
    1d6c:	cbz	r0, 1d94 <MTPStorage_SD::OpenIndex()+0x60>
    1d6e:	ldr	r2, [r0, #0]
    1d70:	ldr	r2, [r2, #68]	; 0x44
    1d72:	cmp	r2, r3
    1d74:	bne.w	2078 <MTPStorage_SD::OpenIndex()+0x344>
    1d78:	ldr	r0, [r0, #16]
    1d7a:	cbz	r0, 1d94 <MTPStorage_SD::OpenIndex()+0x60>
    1d7c:	ldr	r3, [r0, #0]
    1d7e:	ldr	r3, [r3, #68]	; 0x44
    1d80:	cmp	r3, r2
    1d82:	bne.w	2064 <MTPStorage_SD::OpenIndex()+0x330>
    1d86:	ldr	r0, [r0, #16]
    1d88:	cbz	r0, 1d94 <MTPStorage_SD::OpenIndex()+0x60>
    1d8a:	ldr	r3, [r0, #0]
    1d8c:	ldr	r3, [r3, #68]	; 0x44
    1d8e:	blx	r3
    1d90:	cmp	r0, #0
    1d92:	bne.n	1e68 <MTPStorage_SD::OpenIndex()+0x134>
    }

    uint32_t sd_getFSCount(void) {return fsCount;}
    const char *sd_getFSName(uint32_t store) { return sd_name[store];}

    File sd_open(uint32_t store, const char *filename, uint32_t mode) { return sdx[store]->open(filename,mode);  }
    1d94:	ldr	r1, [r4, #88]	; 0x58
    1d96:	movs	r3, #2
    1d98:	ldr	r2, [pc, #456]	; (1f64 <MTPStorage_SD::OpenIndex()+0x230>)
    1d9a:	add	r0, sp, #4
    1d9c:	ldr	r5, [r1, #0]
    1d9e:	ldr	r5, [r5, #0]
    1da0:	blx	r5
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    1da2:	ldr.w	r3, [r4, #184]	; 0xb8
    1da6:	cbz	r3, 1db4 <MTPStorage_SD::OpenIndex()+0x80>
    1da8:	ldr	r2, [r3, #16]
    1daa:	subs	r2, #1
    1dac:	str	r2, [r3, #16]
    1dae:	cmp	r2, #0
    1db0:	beq.w	1f78 <MTPStorage_SD::OpenIndex()+0x244>
	File& operator = (const File &file) {
		//Serial.println("File assignment");
		//static int assigncount=0;
		//if (++assigncount > 20) while (1) ;
		invalidate();
		f = file.f;
    1db4:	ldr	r3, [sp, #20]
    1db6:	str.w	r3, [r4, #184]	; 0xb8
		if (f) f->refcount++;
    1dba:	cbz	r3, 1dd4 <MTPStorage_SD::OpenIndex()+0xa0>
    1dbc:	ldr	r2, [r3, #16]
		return *this;
	}
	virtual ~File() {
    1dbe:	ldr	r1, [pc, #424]	; (1f68 <MTPStorage_SD::OpenIndex()+0x234>)
		//Serial.println("File assignment");
		//static int assigncount=0;
		//if (++assigncount > 20) while (1) ;
		invalidate();
		f = file.f;
		if (f) f->refcount++;
    1dc0:	adds	r2, #1
		return *this;
	}
	virtual ~File() {
    1dc2:	str	r1, [sp, #4]
		//Serial.println("File assignment");
		//static int assigncount=0;
		//if (++assigncount > 20) while (1) ;
		invalidate();
		f = file.f;
		if (f) f->refcount++;
    1dc4:	str	r2, [r3, #16]
    1dc6:	ldr	r2, [sp, #20]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    1dc8:	cbz	r2, 1dd4 <MTPStorage_SD::OpenIndex()+0xa0>
    1dca:	ldr	r3, [r2, #16]
    1dcc:	subs	r3, #1
    1dce:	str	r3, [r2, #16]
    1dd0:	cmp	r3, #0
    1dd2:	beq.n	1e6e <MTPStorage_SD::OpenIndex()+0x13a>
	}
	virtual void close() {
		if (f) f->close();
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
    1dd4:	ldr.w	r0, [r4, #184]	; 0xb8
    1dd8:	cmp	r0, #0
    1dda:	beq.n	1e5a <MTPStorage_SD::OpenIndex()+0x126>
    1ddc:	ldr	r2, [r0, #0]
    1dde:	ldr	r3, [pc, #384]	; (1f60 <MTPStorage_SD::OpenIndex()+0x22c>)
    1de0:	ldr	r2, [r2, #68]	; 0x44
    1de2:	cmp	r2, r3
    1de4:	bne.w	206e <MTPStorage_SD::OpenIndex()+0x33a>
    1de8:	ldr	r0, [r0, #16]
    1dea:	cmp	r0, #0
    1dec:	beq.n	1e5a <MTPStorage_SD::OpenIndex()+0x126>
    1dee:	ldr	r2, [r0, #0]
    1df0:	ldr	r2, [r2, #68]	; 0x44
    1df2:	cmp	r2, r3
    1df4:	bne.w	206e <MTPStorage_SD::OpenIndex()+0x33a>
    1df8:	ldr	r0, [r0, #16]
    1dfa:	cmp	r0, #0
    1dfc:	beq.n	1e5a <MTPStorage_SD::OpenIndex()+0x126>
    1dfe:	ldr	r2, [r0, #0]
    1e00:	ldr	r2, [r2, #68]	; 0x44
    1e02:	cmp	r2, r3
    1e04:	bne.w	206e <MTPStorage_SD::OpenIndex()+0x33a>
    1e08:	ldr	r0, [r0, #16]
    1e0a:	cbz	r0, 1e5a <MTPStorage_SD::OpenIndex()+0x126>
    1e0c:	ldr	r2, [r0, #0]
    1e0e:	ldr	r2, [r2, #68]	; 0x44
    1e10:	cmp	r2, r3
    1e12:	bne.w	206e <MTPStorage_SD::OpenIndex()+0x33a>
    1e16:	ldr	r0, [r0, #16]
    1e18:	cbz	r0, 1e5a <MTPStorage_SD::OpenIndex()+0x126>
    1e1a:	ldr	r2, [r0, #0]
    1e1c:	ldr	r2, [r2, #68]	; 0x44
    1e1e:	cmp	r2, r3
    1e20:	bne.w	206e <MTPStorage_SD::OpenIndex()+0x33a>
    1e24:	ldr	r0, [r0, #16]
    1e26:	cbz	r0, 1e5a <MTPStorage_SD::OpenIndex()+0x126>
    1e28:	ldr	r2, [r0, #0]
    1e2a:	ldr	r2, [r2, #68]	; 0x44
    1e2c:	cmp	r2, r3
    1e2e:	bne.w	206e <MTPStorage_SD::OpenIndex()+0x33a>
    1e32:	ldr	r0, [r0, #16]
    1e34:	cbz	r0, 1e5a <MTPStorage_SD::OpenIndex()+0x126>
    1e36:	ldr	r2, [r0, #0]
    1e38:	ldr	r2, [r2, #68]	; 0x44
    1e3a:	cmp	r2, r3
    1e3c:	bne.w	206e <MTPStorage_SD::OpenIndex()+0x33a>
    1e40:	ldr	r0, [r0, #16]
    1e42:	cbz	r0, 1e5a <MTPStorage_SD::OpenIndex()+0x126>
    1e44:	ldr	r2, [r0, #0]
    1e46:	ldr	r2, [r2, #68]	; 0x44
    1e48:	cmp	r2, r3
    1e4a:	bne.w	206e <MTPStorage_SD::OpenIndex()+0x33a>
    1e4e:	ldr	r0, [r0, #16]
    1e50:	cbz	r0, 1e5a <MTPStorage_SD::OpenIndex()+0x126>
    1e52:	ldr	r3, [r0, #0]
    1e54:	ldr	r3, [r3, #68]	; 0x44
    1e56:	blx	r3
    mtp_lock_storage(true);
    index_=sd_open(0,indexFile, FILE_WRITE_BEGIN);
    if(!index_) Serial.println("cannot open Index file"); 
    1e58:	cbnz	r0, 1e68 <MTPStorage_SD::OpenIndex()+0x134>
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    1e5a:	movs	r1, #22
    1e5c:	ldr	r0, [pc, #268]	; (1f6c <MTPStorage_SD::OpenIndex()+0x238>)
    1e5e:	bl	e284 <usb_serial_write>
    1e62:	ldr	r0, [pc, #268]	; (1f70 <MTPStorage_SD::OpenIndex()+0x23c>)
    1e64:	bl	ff48 <Print::println()>
    mtp_lock_storage(false);
  }
    1e68:	add	sp, #28
    1e6a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    1e6e:	ldr	r5, [sp, #20]
    1e70:	cmp	r5, #0
    1e72:	beq.n	1dd4 <MTPStorage_SD::OpenIndex()+0xa0>
    1e74:	ldr	r2, [r5, #0]
    1e76:	ldr	r3, [pc, #252]	; (1f74 <MTPStorage_SD::OpenIndex()+0x240>)
    1e78:	ldr	r2, [r2, #32]
    1e7a:	cmp	r2, r3
    1e7c:	bne.w	2088 <MTPStorage_SD::OpenIndex()+0x354>
    1e80:	ldr	r0, [r5, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    1e82:	str	r1, [r5, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    1e84:	cmp	r0, #0
    1e86:	beq.n	1f56 <MTPStorage_SD::OpenIndex()+0x222>
    1e88:	ldr	r2, [r0, #16]
    1e8a:	subs	r2, #1
    1e8c:	str	r2, [r0, #16]
    1e8e:	cmp	r2, #0
    1e90:	bne.n	1f56 <MTPStorage_SD::OpenIndex()+0x222>
    1e92:	ldr	r6, [r5, #16]
    1e94:	cmp	r6, #0
    1e96:	beq.n	1f56 <MTPStorage_SD::OpenIndex()+0x222>
    1e98:	ldr	r2, [r6, #0]
    1e9a:	ldr	r2, [r2, #32]
    1e9c:	cmp	r2, r3
    1e9e:	bne.w	208e <MTPStorage_SD::OpenIndex()+0x35a>
    1ea2:	ldr	r0, [r6, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    1ea4:	str	r1, [r6, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    1ea6:	cmp	r0, #0
    1ea8:	beq.n	1f4e <MTPStorage_SD::OpenIndex()+0x21a>
    1eaa:	ldr	r2, [r0, #16]
    1eac:	subs	r2, #1
    1eae:	str	r2, [r0, #16]
    1eb0:	cmp	r2, #0
    1eb2:	bne.n	1f4e <MTPStorage_SD::OpenIndex()+0x21a>
    1eb4:	ldr	r7, [r6, #16]
    1eb6:	cmp	r7, #0
    1eb8:	beq.n	1f4e <MTPStorage_SD::OpenIndex()+0x21a>
    1eba:	ldr	r2, [r7, #0]
    1ebc:	ldr	r2, [r2, #32]
    1ebe:	cmp	r2, r3
    1ec0:	bne.w	20a0 <MTPStorage_SD::OpenIndex()+0x36c>
    1ec4:	ldr	r0, [r7, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    1ec6:	str	r1, [r7, #0]
    1ec8:	ldr.w	lr, [pc, #156]	; 1f68 <MTPStorage_SD::OpenIndex()+0x234>
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    1ecc:	cmp	r0, #0
    1ece:	beq.n	1f46 <MTPStorage_SD::OpenIndex()+0x212>
    1ed0:	ldr	r2, [r0, #16]
    1ed2:	subs	r2, #1
    1ed4:	str	r2, [r0, #16]
    1ed6:	cmp	r2, #0
    1ed8:	bne.n	1f46 <MTPStorage_SD::OpenIndex()+0x212>
    1eda:	ldr.w	r8, [r7, #16]
    1ede:	cmp.w	r8, #0
    1ee2:	beq.n	1f46 <MTPStorage_SD::OpenIndex()+0x212>
    1ee4:	ldr.w	r2, [r8]
    1ee8:	ldr	r2, [r2, #32]
    1eea:	cmp	r2, r3
    1eec:	bne.w	20ac <MTPStorage_SD::OpenIndex()+0x378>
    1ef0:	ldr.w	r0, [r8, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    1ef4:	str.w	lr, [r8]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    1ef8:	cbz	r0, 1f3e <MTPStorage_SD::OpenIndex()+0x20a>
    1efa:	ldr	r2, [r0, #16]
    1efc:	subs	r2, #1
    1efe:	str	r2, [r0, #16]
    1f00:	cbnz	r2, 1f3e <MTPStorage_SD::OpenIndex()+0x20a>
    1f02:	ldr.w	r9, [r8, #16]
    1f06:	cmp.w	r9, #0
    1f0a:	beq.n	1f3e <MTPStorage_SD::OpenIndex()+0x20a>
    1f0c:	ldr.w	r2, [r9]
    1f10:	ldr	r2, [r2, #32]
    1f12:	cmp	r2, r3
    1f14:	bne.w	20b8 <MTPStorage_SD::OpenIndex()+0x384>
    1f18:	ldr.w	r2, [r9, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    1f1c:	str.w	r1, [r9]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    1f20:	cbz	r2, 1f36 <MTPStorage_SD::OpenIndex()+0x202>
    1f22:	ldr	r3, [r2, #16]
    1f24:	subs	r3, #1
    1f26:	str	r3, [r2, #16]
    1f28:	cbnz	r3, 1f36 <MTPStorage_SD::OpenIndex()+0x202>
    1f2a:	ldr.w	r0, [r9, #16]
    1f2e:	cbz	r0, 1f36 <MTPStorage_SD::OpenIndex()+0x202>
    1f30:	ldr	r3, [r0, #0]
    1f32:	ldr	r3, [r3, #32]
    1f34:	blx	r3
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
		invalidate();
	}
    1f36:	mov	r0, r9
    1f38:	movs	r1, #20
    1f3a:	bl	1006c <operator delete(void*, unsigned int)>
    1f3e:	mov	r0, r8
    1f40:	movs	r1, #20
    1f42:	bl	1006c <operator delete(void*, unsigned int)>
    1f46:	mov	r0, r7
    1f48:	movs	r1, #20
    1f4a:	bl	1006c <operator delete(void*, unsigned int)>
    1f4e:	mov	r0, r6
    1f50:	movs	r1, #20
    1f52:	bl	1006c <operator delete(void*, unsigned int)>
    1f56:	mov	r0, r5
    1f58:	movs	r1, #20
    1f5a:	bl	1006c <operator delete(void*, unsigned int)>
    1f5e:	b.n	1dd4 <MTPStorage_SD::OpenIndex()+0xa0>
    1f60:	.word	0x0000011d
    1f64:	.word	0x2000033c
    1f68:	.word	0x20000074
    1f6c:	.word	0x2000034c
    1f70:	.word	0x20000c60
    1f74:	.word	0x00000b4d
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    1f78:	ldr.w	r5, [r4, #184]	; 0xb8
    1f7c:	cmp	r5, #0
    1f7e:	beq.w	1db4 <MTPStorage_SD::OpenIndex()+0x80>
    1f82:	ldr	r2, [r5, #0]
    1f84:	ldr	r3, [pc, #312]	; (20c0 <MTPStorage_SD::OpenIndex()+0x38c>)
    1f86:	ldr	r2, [r2, #32]
    1f88:	cmp	r2, r3
    1f8a:	bne.n	2082 <MTPStorage_SD::OpenIndex()+0x34e>
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    1f8c:	ldr	r1, [pc, #308]	; (20c4 <MTPStorage_SD::OpenIndex()+0x390>)
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    1f8e:	ldr	r0, [r5, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    1f90:	str	r1, [r5, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    1f92:	cmp	r0, #0
    1f94:	beq.n	205a <MTPStorage_SD::OpenIndex()+0x326>
    1f96:	ldr	r2, [r0, #16]
    1f98:	subs	r2, #1
    1f9a:	str	r2, [r0, #16]
    1f9c:	cmp	r2, #0
    1f9e:	bne.n	205a <MTPStorage_SD::OpenIndex()+0x326>
    1fa0:	ldr	r6, [r5, #16]
    1fa2:	cmp	r6, #0
    1fa4:	beq.n	205a <MTPStorage_SD::OpenIndex()+0x326>
    1fa6:	ldr	r2, [r6, #0]
    1fa8:	ldr	r2, [r2, #32]
    1faa:	cmp	r2, r3
    1fac:	bne.n	2094 <MTPStorage_SD::OpenIndex()+0x360>
    1fae:	ldr	r0, [r6, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    1fb0:	str	r1, [r6, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    1fb2:	cmp	r0, #0
    1fb4:	beq.n	2052 <MTPStorage_SD::OpenIndex()+0x31e>
    1fb6:	ldr	r2, [r0, #16]
    1fb8:	subs	r2, #1
    1fba:	str	r2, [r0, #16]
    1fbc:	cmp	r2, #0
    1fbe:	bne.n	2052 <MTPStorage_SD::OpenIndex()+0x31e>
    1fc0:	ldr	r7, [r6, #16]
    1fc2:	cmp	r7, #0
    1fc4:	beq.n	2052 <MTPStorage_SD::OpenIndex()+0x31e>
    1fc6:	ldr	r2, [r7, #0]
    1fc8:	ldr	r2, [r2, #32]
    1fca:	cmp	r2, r3
    1fcc:	bne.n	209a <MTPStorage_SD::OpenIndex()+0x366>
    1fce:	ldr	r0, [r7, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    1fd0:	str	r1, [r7, #0]
    1fd2:	ldr.w	lr, [pc, #240]	; 20c4 <MTPStorage_SD::OpenIndex()+0x390>
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    1fd6:	cmp	r0, #0
    1fd8:	beq.n	204a <MTPStorage_SD::OpenIndex()+0x316>
    1fda:	ldr	r2, [r0, #16]
    1fdc:	subs	r2, #1
    1fde:	str	r2, [r0, #16]
    1fe0:	cbnz	r2, 204a <MTPStorage_SD::OpenIndex()+0x316>
    1fe2:	ldr.w	r8, [r7, #16]
    1fe6:	cmp.w	r8, #0
    1fea:	beq.n	204a <MTPStorage_SD::OpenIndex()+0x316>
    1fec:	ldr.w	r2, [r8]
    1ff0:	ldr	r2, [r2, #32]
    1ff2:	cmp	r2, r3
    1ff4:	bne.n	20a6 <MTPStorage_SD::OpenIndex()+0x372>
    1ff6:	ldr.w	r0, [r8, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    1ffa:	str.w	lr, [r8]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    1ffe:	cbz	r0, 2042 <MTPStorage_SD::OpenIndex()+0x30e>
    2000:	ldr	r2, [r0, #16]
    2002:	subs	r2, #1
    2004:	str	r2, [r0, #16]
    2006:	cbnz	r2, 2042 <MTPStorage_SD::OpenIndex()+0x30e>
    2008:	ldr.w	r9, [r8, #16]
    200c:	cmp.w	r9, #0
    2010:	beq.n	2042 <MTPStorage_SD::OpenIndex()+0x30e>
    2012:	ldr.w	r2, [r9]
    2016:	ldr	r2, [r2, #32]
    2018:	cmp	r2, r3
    201a:	bne.n	20b2 <MTPStorage_SD::OpenIndex()+0x37e>
    201c:	ldr.w	r2, [r9, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    2020:	str.w	r1, [r9]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    2024:	cbz	r2, 203a <MTPStorage_SD::OpenIndex()+0x306>
    2026:	ldr	r3, [r2, #16]
    2028:	subs	r3, #1
    202a:	str	r3, [r2, #16]
    202c:	cbnz	r3, 203a <MTPStorage_SD::OpenIndex()+0x306>
    202e:	ldr.w	r0, [r9, #16]
    2032:	cbz	r0, 203a <MTPStorage_SD::OpenIndex()+0x306>
    2034:	ldr	r3, [r0, #0]
    2036:	ldr	r3, [r3, #32]
    2038:	blx	r3
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
		invalidate();
	}
    203a:	mov	r0, r9
    203c:	movs	r1, #20
    203e:	bl	1006c <operator delete(void*, unsigned int)>
    2042:	mov	r0, r8
    2044:	movs	r1, #20
    2046:	bl	1006c <operator delete(void*, unsigned int)>
    204a:	mov	r0, r7
    204c:	movs	r1, #20
    204e:	bl	1006c <operator delete(void*, unsigned int)>
    2052:	mov	r0, r6
    2054:	movs	r1, #20
    2056:	bl	1006c <operator delete(void*, unsigned int)>
    205a:	mov	r0, r5
    205c:	movs	r1, #20
    205e:	bl	1006c <operator delete(void*, unsigned int)>
    2062:	b.n	1db4 <MTPStorage_SD::OpenIndex()+0x80>
	}
	virtual void close() {
		if (f) f->close();
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
    2064:	blx	r3
    index_generated = false;
    index_entries_ = 0;
  }

  void MTPStorage_SD::OpenIndex() 
  { if(sd_isOpen(index_)) return; // only once
    2066:	cmp	r0, #0
    2068:	bne.w	1e68 <MTPStorage_SD::OpenIndex()+0x134>
    206c:	b.n	1d94 <MTPStorage_SD::OpenIndex()+0x60>
    206e:	blx	r2
    mtp_lock_storage(true);
    index_=sd_open(0,indexFile, FILE_WRITE_BEGIN);
    if(!index_) Serial.println("cannot open Index file"); 
    2070:	cmp	r0, #0
    2072:	bne.w	1e68 <MTPStorage_SD::OpenIndex()+0x134>
    2076:	b.n	1e5a <MTPStorage_SD::OpenIndex()+0x126>
    2078:	blx	r2
    index_generated = false;
    index_entries_ = 0;
  }

  void MTPStorage_SD::OpenIndex() 
  { if(sd_isOpen(index_)) return; // only once
    207a:	cmp	r0, #0
    207c:	bne.w	1e68 <MTPStorage_SD::OpenIndex()+0x134>
    2080:	b.n	1d94 <MTPStorage_SD::OpenIndex()+0x60>
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    2082:	mov	r0, r5
    2084:	blx	r2
    2086:	b.n	1db4 <MTPStorage_SD::OpenIndex()+0x80>
    2088:	mov	r0, r5
    208a:	blx	r2
    208c:	b.n	1dd4 <MTPStorage_SD::OpenIndex()+0xa0>
    208e:	mov	r0, r6
    2090:	blx	r2
    2092:	b.n	1f56 <MTPStorage_SD::OpenIndex()+0x222>
    2094:	mov	r0, r6
    2096:	blx	r2
    2098:	b.n	205a <MTPStorage_SD::OpenIndex()+0x326>
    209a:	mov	r0, r7
    209c:	blx	r2
    209e:	b.n	2052 <MTPStorage_SD::OpenIndex()+0x31e>
    20a0:	mov	r0, r7
    20a2:	blx	r2
    20a4:	b.n	1f4e <MTPStorage_SD::OpenIndex()+0x21a>
    20a6:	mov	r0, r8
    20a8:	blx	r2
    20aa:	b.n	204a <MTPStorage_SD::OpenIndex()+0x316>
    20ac:	mov	r0, r8
    20ae:	blx	r2
    20b0:	b.n	1f46 <MTPStorage_SD::OpenIndex()+0x212>
    20b2:	mov	r0, r9
    20b4:	blx	r2
    20b6:	b.n	2042 <MTPStorage_SD::OpenIndex()+0x30e>
    20b8:	mov	r0, r9
    20ba:	blx	r2
    20bc:	b.n	1f3e <MTPStorage_SD::OpenIndex()+0x20a>
    20be:	nop
    20c0:	.word	0x00000b4d
    20c4:	.word	0x20000074

000020c8 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>:
    all_scanned_ = false;
    open_file_ = 0xFFFFFFFEUL;
  }

  void MTPStorage_SD::WriteIndexRecord(uint32_t i, const Record& r) 
  { OpenIndex();
    20c8:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    20cc:	mov	r6, r0
    20ce:	sub	sp, #8
    20d0:	mov	r4, r1
    20d2:	mov	r7, r2
    20d4:	bl	1d34 <MTPStorage_SD::OpenIndex()>
	}
	virtual bool truncate(uint64_t size=0) {
		return (f) ? f->truncate(size) : false;
	}
	virtual bool seek(uint64_t pos, int mode) {
		return (f) ? f->seek(pos, mode) : false;
    20d8:	ldr.w	r5, [r6, #184]	; 0xb8
    mtp_lock_storage(true);
    index_.seek((sizeof(r) * i));
    20dc:	add.w	r4, r4, r4, lsl #4
    20e0:	cmp	r5, #0
    20e2:	beq.n	21ae <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0xe6>
    20e4:	ldr.w	lr, [r5]
    20e8:	lsls	r2, r4, #4
    20ea:	ldr	r1, [pc, #288]	; (220c <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x144>)
    20ec:	mov.w	ip, #0
    20f0:	ldr.w	r4, [lr, #52]	; 0x34
    20f4:	cmp	r4, r1
    20f6:	bne.n	21d8 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x110>
    20f8:	ldr	r1, [r5, #16]
    20fa:	cmp	r1, #0
    20fc:	beq.n	21a4 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0xdc>
    20fe:	ldr	r0, [r1, #0]
    2100:	ldr.w	r8, [r0, #52]	; 0x34
    2104:	cmp	r8, r4
    2106:	bne.n	21e4 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x11c>
    2108:	ldr	r0, [r1, #16]
    210a:	cmp	r0, #0
    210c:	beq.n	21b4 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0xec>
    210e:	ldr	r4, [r0, #0]
    2110:	ldr	r4, [r4, #52]	; 0x34
    2112:	cmp	r4, r8
    2114:	bne.n	21f0 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x128>
    2116:	ldr	r0, [r0, #16]
    2118:	cmp	r0, #0
    211a:	beq.n	21b4 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0xec>
    211c:	ldr	r3, [r0, #0]
    211e:	ldr.w	r8, [r3, #52]	; 0x34
    2122:	cmp	r8, r4
    2124:	bne.n	21fa <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x132>
    2126:	ldr	r0, [r0, #16]
    2128:	cmp	r0, #0
    212a:	beq.n	21b4 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0xec>
    212c:	ldr	r3, [r0, #0]
    212e:	ldr	r4, [r3, #52]	; 0x34
    2130:	cmp	r4, r8
    2132:	bne.n	2204 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x13c>
    2134:	ldr	r0, [r0, #16]
    2136:	cmp	r0, #0
    2138:	beq.n	21b4 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0xec>
    213a:	ldr	r1, [r0, #0]
    213c:	mov	r3, ip
    213e:	str.w	ip, [sp]
    2142:	ldr	r1, [r1, #52]	; 0x34
    2144:	blx	r1
#endif
	virtual size_t read(void *buf, size_t nbyte) {
		return (f) ? f->read(buf, nbyte) : 0;
	}
	virtual size_t write(const void *buf, size_t size) {
		return (f) ? f->write(buf, size) : 0;
    2146:	ldr.w	r5, [r6, #184]	; 0xb8
    214a:	cmp	r5, #0
    214c:	beq.n	21ae <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0xe6>
    214e:	ldr	r2, [r5, #0]
    2150:	ldr	r3, [pc, #188]	; (2210 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x148>)
    2152:	ldr	r4, [r2, #44]	; 0x2c
    2154:	cmp	r4, r3
    2156:	bne.n	21c2 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0xfa>
    2158:	ldr	r0, [r5, #16]
    215a:	cbz	r0, 21ae <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0xe6>
    215c:	ldr	r2, [r0, #0]
    215e:	ldr	r4, [r2, #44]	; 0x2c
    2160:	cmp	r4, r3
    2162:	bne.n	21d4 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x10c>
    2164:	ldr	r0, [r0, #16]
    2166:	cbz	r0, 21ae <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0xe6>
    2168:	ldr	r2, [r0, #0]
    216a:	ldr	r4, [r2, #44]	; 0x2c
    216c:	cmp	r4, r3
    216e:	bne.n	21d4 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x10c>
    2170:	ldr	r0, [r0, #16]
    2172:	cbz	r0, 21ae <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0xe6>
    2174:	ldr	r2, [r0, #0]
    2176:	ldr	r4, [r2, #44]	; 0x2c
    2178:	cmp	r4, r3
    217a:	bne.n	21d4 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x10c>
    217c:	ldr	r0, [r0, #16]
    217e:	cbz	r0, 21ae <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0xe6>
    2180:	ldr	r2, [r0, #0]
    2182:	ldr	r4, [r2, #44]	; 0x2c
    2184:	cmp	r4, r3
    2186:	bne.n	21d4 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x10c>
    2188:	ldr	r0, [r0, #16]
    218a:	cbz	r0, 21ae <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0xe6>
    218c:	ldr	r2, [r0, #0]
    218e:	ldr	r4, [r2, #44]	; 0x2c
    2190:	cmp	r4, r3
    2192:	bne.n	21d4 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x10c>
    2194:	ldr	r0, [r0, #16]
    2196:	cbz	r0, 21ae <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0xe6>
    2198:	ldr	r3, [r0, #0]
    219a:	mov	r1, r7
    219c:	mov.w	r2, #272	; 0x110
    21a0:	ldr	r3, [r3, #44]	; 0x2c
    21a2:	b.n	21cc <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x104>
    21a4:	ldr.w	r4, [lr, #44]	; 0x2c
    21a8:	ldr	r3, [pc, #100]	; (2210 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x148>)
    21aa:	cmp	r4, r3
    21ac:	bne.n	21c2 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0xfa>
    index_.write((char*)&r, sizeof(r));
    mtp_lock_storage(false);
  }
    21ae:	add	sp, #8
    21b0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    21b4:	ldr.w	r4, [lr, #44]	; 0x2c
    21b8:	ldr	r3, [pc, #84]	; (2210 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x148>)
    21ba:	cmp	r4, r3
    21bc:	bne.n	21c2 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0xfa>
    21be:	mov	r0, r1
    21c0:	b.n	215c <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x94>
    21c2:	mov	r1, r7
    21c4:	mov	r0, r5
    21c6:	mov.w	r2, #272	; 0x110
    21ca:	mov	r3, r4
    21cc:	add	sp, #8
    21ce:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    21d2:	bx	r3
    21d4:	mov	r1, r7
    21d6:	b.n	21c6 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0xfe>
	}
	virtual bool truncate(uint64_t size=0) {
		return (f) ? f->truncate(size) : false;
	}
	virtual bool seek(uint64_t pos, int mode) {
		return (f) ? f->seek(pos, mode) : false;
    21d8:	str.w	ip, [sp]
    21dc:	mov	r3, ip
    21de:	mov	r0, r5
    21e0:	blx	r4
    21e2:	b.n	2146 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x7e>
    21e4:	str.w	ip, [sp]
    21e8:	mov	r3, ip
    21ea:	mov	r0, r1
    21ec:	blx	r8
    21ee:	b.n	2146 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x7e>
    21f0:	str.w	ip, [sp]
    21f4:	mov	r3, ip
    21f6:	blx	r4
    21f8:	b.n	2146 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x7e>
    21fa:	str.w	ip, [sp]
    21fe:	mov	r3, ip
    2200:	blx	r8
    2202:	b.n	2146 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x7e>
    2204:	movs	r3, #0
    2206:	str	r3, [sp, #0]
    2208:	blx	r4
    220a:	b.n	2146 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x7e>
    220c:	.word	0x000000d9
    2210:	.word	0x00000099

00002214 <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.6] [clone .constprop.14]>:
  }

  // MTP object handles should not change or be re-used during a session.
  // This would be easy if we could just have a list of all files in memory.
  // Since our RAM is limited, we'll keep the index in a file instead.
  void MTPStorage_SD::GenerateIndex(uint32_t store)
    2214:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2218:	mov	r4, r0
  { if (index_generated) return; 
    index_generated = true;
    221a:	movs	r7, #1
  }

  // MTP object handles should not change or be re-used during a session.
  // This would be easy if we could just have a list of all files in memory.
  // Since our RAM is limited, we'll keep the index in a file instead.
  void MTPStorage_SD::GenerateIndex(uint32_t store)
    221c:	sub	sp, #272	; 0x110
    221e:	movs	r1, #13
    2220:	ldr	r0, [pc, #108]	; (2290 <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.6] [clone .constprop.14]+0x7c>)
  { if (index_generated) return; 
    index_generated = true;
    2222:	strb.w	r7, [r4, #248]	; 0xf8
    2226:	bl	e284 <usb_serial_write>
    222a:	ldr	r0, [pc, #104]	; (2294 <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.6] [clone .constprop.14]+0x80>)
    222c:	bl	ff48 <Print::println()>
    bool sd_mkdir(uint32_t store, char *filename) {  return sdx[store]->mkdir(filename);  }
    bool sd_rename(uint32_t store, char *oldfilename, char *newfilename) { return sdx[store]->rename(oldfilename,newfilename);  }
    bool sd_remove(uint32_t store, const char *filename) {    Serial.println(filename); return sdx[store]->remove(filename);  }
    2230:	ldr	r0, [r4, #88]	; 0x58
    2232:	ldr	r1, [pc, #92]	; (2290 <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.6] [clone .constprop.14]+0x7c>)
    2234:	ldr	r3, [r0, #0]
    2236:	ldr	r3, [r3, #16]
    2238:	blx	r3
    223a:	ldr	r3, [r4, #4]
    sd_remove(0,indexFile);
    mtp_lock_storage(false);

    num_storage = sd_getFSCount();

    index_entries_ = 0;
    223c:	movs	r1, #0
    // first remove old index file
    mtp_lock_storage(true);
    sd_remove(0,indexFile);
    mtp_lock_storage(false);

    num_storage = sd_getFSCount();
    223e:	str.w	r3, [r4, #228]	; 0xe4

    index_entries_ = 0;
    Record r;
    for(int ii=0; ii<num_storage; ii++)
    2242:	cmp	r3, r1
    sd_remove(0,indexFile);
    mtp_lock_storage(false);

    num_storage = sd_getFSCount();

    index_entries_ = 0;
    2244:	str.w	r1, [r4, #244]	; 0xf4
    Record r;
    for(int ii=0; ii<num_storage; ii++)
    2248:	ble.n	228a <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.6] [clone .constprop.14]+0x76>
    224a:	mov	r5, r1
    {
      r.store = ii; // 
      r.parent = 0xFFFFFFFFUL; // 
      r.sibling = 0;
    224c:	mov	r6, r1
    index_entries_ = 0;
    Record r;
    for(int ii=0; ii<num_storage; ii++)
    {
      r.store = ii; // 
      r.parent = 0xFFFFFFFFUL; // 
    224e:	mov.w	r8, #4294967295
    2252:	b.n	2258 <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.6] [clone .constprop.14]+0x44>
    2254:	ldr.w	r1, [r4, #244]	; 0xf4
    index_.write((char*)&r, sizeof(r));
    mtp_lock_storage(false);
  }

  uint32_t MTPStorage_SD::AppendIndexRecord(const Record& r) 
  { uint32_t new_record = index_entries_++;
    2258:	adds	r0, r1, #1
      r.parent = 0xFFFFFFFFUL; // 
      r.sibling = 0;
      r.child = 0;
      r.isdir = true;
      r.scanned = false;
      strcpy(r.name, "/");
    225a:	movs	r3, #47	; 0x2f
    mtp_lock_storage(false);
  }

  uint32_t MTPStorage_SD::AppendIndexRecord(const Record& r) 
  { uint32_t new_record = index_entries_++;
    WriteIndexRecord(new_record, r);
    225c:	mov	r2, sp

    index_entries_ = 0;
    Record r;
    for(int ii=0; ii<num_storage; ii++)
    {
      r.store = ii; // 
    225e:	strh.w	r5, [sp, #14]
    index_.write((char*)&r, sizeof(r));
    mtp_lock_storage(false);
  }

  uint32_t MTPStorage_SD::AppendIndexRecord(const Record& r) 
  { uint32_t new_record = index_entries_++;
    2262:	str.w	r0, [r4, #244]	; 0xf4
    WriteIndexRecord(new_record, r);
    2266:	mov	r0, r4
      r.parent = 0xFFFFFFFFUL; // 
      r.sibling = 0;
      r.child = 0;
      r.isdir = true;
      r.scanned = false;
      strcpy(r.name, "/");
    2268:	strh.w	r3, [sp, #16]

    num_storage = sd_getFSCount();

    index_entries_ = 0;
    Record r;
    for(int ii=0; ii<num_storage; ii++)
    226c:	adds	r5, #1
    {
      r.store = ii; // 
      r.parent = 0xFFFFFFFFUL; // 
    226e:	str.w	r8, [sp]
      r.sibling = 0;
    2272:	str	r6, [sp, #8]
      r.child = 0;
    2274:	str	r6, [sp, #4]
      r.isdir = true;
    2276:	strb.w	r7, [sp, #12]
      r.scanned = false;
    227a:	strb.w	r6, [sp, #13]
    mtp_lock_storage(false);
  }

  uint32_t MTPStorage_SD::AppendIndexRecord(const Record& r) 
  { uint32_t new_record = index_entries_++;
    WriteIndexRecord(new_record, r);
    227e:	bl	20c8 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>

    num_storage = sd_getFSCount();

    index_entries_ = 0;
    Record r;
    for(int ii=0; ii<num_storage; ii++)
    2282:	ldr.w	r3, [r4, #228]	; 0xe4
    2286:	cmp	r3, r5
    2288:	bgt.n	2254 <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.6] [clone .constprop.14]+0x40>
      r.isdir = true;
      r.scanned = false;
      strcpy(r.name, "/");
      AppendIndexRecord(r);
    }
  }
    228a:	add	sp, #272	; 0x110
    228c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2290:	.word	0x2000033c
    2294:	.word	0x20000c60

00002298 <MTPStorage_SD::ReadIndexRecord(unsigned long)>:
    return new_record;
  }

  // TODO(hubbe): Cache a few records for speed.
  Record MTPStorage_SD::ReadIndexRecord(uint32_t i) 
  {
    2298:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    229c:	mov	r5, r1
    229e:	mov	r4, r2
    22a0:	sub	sp, #8
    Record ret;
    memset(&ret, 0, sizeof(ret));
    22a2:	movs	r1, #0
    22a4:	mov.w	r2, #272	; 0x110
    return new_record;
  }

  // TODO(hubbe): Cache a few records for speed.
  Record MTPStorage_SD::ReadIndexRecord(uint32_t i) 
  {
    22a8:	mov	r6, r0
    Record ret;
    memset(&ret, 0, sizeof(ret));
    22aa:	bl	10bfc <memset>
    if (i > index_entries_) 
    22ae:	ldr.w	r3, [r5, #244]	; 0xf4
    22b2:	cmp	r3, r4
    22b4:	bcc.w	242e <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x196>
    { memset(&ret, 0, sizeof(ret));
      return ret;
    }
    OpenIndex();
    22b8:	mov	r0, r5
    mtp_lock_storage(true);
    index_.seek(sizeof(ret) * i);
    22ba:	add.w	r4, r4, r4, lsl #4
    memset(&ret, 0, sizeof(ret));
    if (i > index_entries_) 
    { memset(&ret, 0, sizeof(ret));
      return ret;
    }
    OpenIndex();
    22be:	bl	1d34 <MTPStorage_SD::OpenIndex()>
    22c2:	ldr.w	r0, [r5, #184]	; 0xb8
    mtp_lock_storage(true);
    index_.seek(sizeof(ret) * i);
    22c6:	mov.w	ip, #0
    22ca:	lsls	r2, r4, #4
    22cc:	cmp	r0, #0
    22ce:	beq.w	2426 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x18e>
    22d2:	ldr	r7, [r0, #0]
    22d4:	ldr	r4, [pc, #456]	; (24a0 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x208>)
    22d6:	ldr	r1, [r7, #52]	; 0x34
    22d8:	cmp	r1, r4
    22da:	bne.w	245a <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x1c2>
    22de:	ldr	r1, [r0, #16]
    22e0:	cmp	r1, #0
    22e2:	beq.w	2442 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x1aa>
    22e6:	ldr	r3, [r1, #0]
    22e8:	ldr.w	r8, [r3, #52]	; 0x34
    22ec:	cmp	r8, r4
    22ee:	bne.w	2488 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x1f0>
    22f2:	ldr.w	lr, [r1, #16]
    22f6:	cmp.w	lr, #0
    22fa:	beq.n	23ae <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x116>
    22fc:	ldr.w	r3, [lr]
    2300:	ldr.w	r8, [r3, #52]	; 0x34
    2304:	cmp	r8, r4
    2306:	bne.w	247c <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x1e4>
    230a:	ldr.w	lr, [lr, #16]
    230e:	cmp.w	lr, #0
    2312:	beq.n	23ae <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x116>
    2314:	ldr.w	r3, [lr]
    2318:	ldr.w	r8, [r3, #52]	; 0x34
    231c:	cmp	r8, r4
    231e:	bne.w	247c <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x1e4>
    2322:	ldr.w	lr, [lr, #16]
    2326:	cmp.w	lr, #0
    232a:	beq.n	23ae <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x116>
    232c:	ldr.w	r3, [lr]
    2330:	ldr.w	r8, [r3, #52]	; 0x34
    2334:	cmp	r8, r4
    2336:	bne.w	2494 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x1fc>
    233a:	ldr.w	lr, [lr, #16]
    233e:	cmp.w	lr, #0
    2342:	beq.n	23ae <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x116>
    2344:	ldr.w	r3, [lr]
    2348:	ldr.w	r8, [r3, #52]	; 0x34
    234c:	cmp	r8, r4
    234e:	bne.w	2494 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x1fc>
    2352:	ldr.w	lr, [lr, #16]
    2356:	cmp.w	lr, #0
    235a:	beq.n	23ae <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x116>
    235c:	ldr.w	r3, [lr]
    2360:	ldr.w	r8, [r3, #52]	; 0x34
    2364:	cmp	r8, r4
    2366:	bne.w	2494 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x1fc>
    236a:	ldr.w	lr, [lr, #16]
    236e:	cmp.w	lr, #0
    2372:	beq.n	23ae <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x116>
    2374:	ldr.w	r3, [lr]
    2378:	ldr.w	r8, [r3, #52]	; 0x34
    237c:	cmp	r8, r4
    237e:	bne.w	2494 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x1fc>
    2382:	ldr.w	lr, [lr, #16]
    2386:	cmp.w	lr, #0
    238a:	beq.n	23ae <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x116>
    238c:	ldr.w	r3, [lr]
    2390:	ldr.w	r8, [r3, #52]	; 0x34
    2394:	cmp	r8, r4
    2396:	bne.n	2494 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x1fc>
    2398:	ldr.w	r4, [lr, #16]
    239c:	cbz	r4, 23ae <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x116>
    239e:	ldr	r1, [r4, #0]
    23a0:	mov	r3, ip
    23a2:	str.w	ip, [sp]
    23a6:	mov	r0, r4
    23a8:	ldr	r1, [r1, #52]	; 0x34
    23aa:	blx	r1
    23ac:	b.n	2462 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x1ca>
	unsigned int getRefcount() { // testing only
		return refcount;
	}
#endif
	virtual size_t read(void *buf, size_t nbyte) {
		return (f) ? f->read(buf, nbyte) : 0;
    23ae:	ldr	r4, [r7, #40]	; 0x28
    23b0:	ldr	r3, [pc, #240]	; (24a4 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x20c>)
    23b2:	cmp	r4, r3
    23b4:	bne.n	244a <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x1b2>
    23b6:	mov	r0, r1
    23b8:	ldr	r2, [r0, #0]
    23ba:	ldr	r4, [r2, #40]	; 0x28
    23bc:	cmp	r4, r3
    23be:	bne.n	244a <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x1b2>
    23c0:	ldr	r0, [r0, #16]
    23c2:	cmp	r0, #0
    23c4:	beq.n	2426 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x18e>
    23c6:	ldr	r2, [r0, #0]
    23c8:	ldr	r4, [r2, #40]	; 0x28
    23ca:	cmp	r4, r3
    23cc:	bne.n	244a <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x1b2>
    23ce:	ldr	r0, [r0, #16]
    23d0:	cbz	r0, 2426 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x18e>
    23d2:	ldr	r2, [r0, #0]
    23d4:	ldr	r4, [r2, #40]	; 0x28
    23d6:	cmp	r4, r3
    23d8:	bne.n	244a <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x1b2>
    23da:	ldr	r0, [r0, #16]
    23dc:	cbz	r0, 2426 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x18e>
    23de:	ldr	r2, [r0, #0]
    23e0:	ldr	r4, [r2, #40]	; 0x28
    23e2:	cmp	r4, r3
    23e4:	bne.n	244a <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x1b2>
    23e6:	ldr	r0, [r0, #16]
    23e8:	cbz	r0, 2426 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x18e>
    23ea:	ldr	r2, [r0, #0]
    23ec:	ldr	r4, [r2, #40]	; 0x28
    23ee:	cmp	r4, r3
    23f0:	bne.n	244a <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x1b2>
    23f2:	ldr	r0, [r0, #16]
    23f4:	cbz	r0, 2426 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x18e>
    23f6:	ldr	r2, [r0, #0]
    23f8:	ldr	r4, [r2, #40]	; 0x28
    23fa:	cmp	r4, r3
    23fc:	bne.n	244a <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x1b2>
    23fe:	ldr	r0, [r0, #16]
    2400:	cbz	r0, 2426 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x18e>
    2402:	ldr	r2, [r0, #0]
    2404:	ldr	r4, [r2, #40]	; 0x28
    2406:	cmp	r4, r3
    2408:	bne.n	244a <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x1b2>
    240a:	ldr	r0, [r0, #16]
    240c:	cbz	r0, 2426 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x18e>
    240e:	ldr	r2, [r0, #0]
    2410:	ldr	r4, [r2, #40]	; 0x28
    2412:	cmp	r4, r3
    2414:	bne.n	244a <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x1b2>
    2416:	ldr	r0, [r0, #16]
    2418:	cbz	r0, 2426 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x18e>
    241a:	ldr	r3, [r0, #0]
    241c:	mov.w	r2, #272	; 0x110
    2420:	mov	r1, r6
    2422:	ldr	r3, [r3, #40]	; 0x28
    2424:	blx	r3
    index_.read((char *)&ret, sizeof(ret));
    mtp_lock_storage(false);

    return ret;
  }
    2426:	mov	r0, r6
    2428:	add	sp, #8
    242a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  Record MTPStorage_SD::ReadIndexRecord(uint32_t i) 
  {
    Record ret;
    memset(&ret, 0, sizeof(ret));
    if (i > index_entries_) 
    { memset(&ret, 0, sizeof(ret));
    242e:	mov.w	r2, #272	; 0x110
    2432:	movs	r1, #0
    2434:	mov	r0, r6
    2436:	bl	10bfc <memset>
    index_.seek(sizeof(ret) * i);
    index_.read((char *)&ret, sizeof(ret));
    mtp_lock_storage(false);

    return ret;
  }
    243a:	mov	r0, r6
    243c:	add	sp, #8
    243e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2442:	ldr	r4, [r7, #40]	; 0x28
    2444:	ldr	r3, [pc, #92]	; (24a4 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x20c>)
    2446:	cmp	r4, r3
    2448:	beq.n	2426 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x18e>
    244a:	mov.w	r2, #272	; 0x110
    244e:	mov	r1, r6
    2450:	blx	r4
    2452:	mov	r0, r6
    2454:	add	sp, #8
    2456:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}
	virtual bool truncate(uint64_t size=0) {
		return (f) ? f->truncate(size) : false;
	}
	virtual bool seek(uint64_t pos, int mode) {
		return (f) ? f->seek(pos, mode) : false;
    245a:	str.w	ip, [sp]
    245e:	mov	r3, ip
    2460:	blx	r1
	unsigned int getRefcount() { // testing only
		return refcount;
	}
#endif
	virtual size_t read(void *buf, size_t nbyte) {
		return (f) ? f->read(buf, nbyte) : 0;
    2462:	ldr.w	r0, [r5, #184]	; 0xb8
    2466:	cmp	r0, #0
    2468:	beq.n	2426 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x18e>
    246a:	ldr	r2, [r0, #0]
    246c:	ldr	r3, [pc, #52]	; (24a4 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x20c>)
    246e:	ldr	r4, [r2, #40]	; 0x28
    2470:	cmp	r4, r3
    2472:	bne.n	244a <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x1b2>
    2474:	ldr	r0, [r0, #16]
    2476:	cmp	r0, #0
    2478:	bne.n	23b8 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x120>
    247a:	b.n	2426 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x18e>
	}
	virtual bool truncate(uint64_t size=0) {
		return (f) ? f->truncate(size) : false;
	}
	virtual bool seek(uint64_t pos, int mode) {
		return (f) ? f->seek(pos, mode) : false;
    247c:	str.w	ip, [sp]
    2480:	mov	r3, ip
    2482:	mov	r0, lr
    2484:	blx	r8
    2486:	b.n	2462 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x1ca>
    2488:	str.w	ip, [sp]
    248c:	mov	r3, ip
    248e:	mov	r0, r1
    2490:	blx	r8
    2492:	b.n	2462 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x1ca>
    2494:	movs	r3, #0
    2496:	mov	r0, lr
    2498:	str	r3, [sp, #0]
    249a:	blx	r8
    249c:	b.n	2462 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x1ca>
    249e:	nop
    24a0:	.word	0x000000d9
    24a4:	.word	0x0000008d

000024a8 <MTPStorage_SD::GetNextObjectHandle(unsigned long)>:
      next_ = 1;
    }
  }

  uint32_t MTPStorage_SD::GetNextObjectHandle(uint32_t  store)
  {
    24a8:	push	{r4, r5, lr}
    while (true) 
    { if (next_ == 0) return 0;
    24aa:	ldr.w	r5, [r0, #252]	; 0xfc
      next_ = 1;
    }
  }

  uint32_t MTPStorage_SD::GetNextObjectHandle(uint32_t  store)
  {
    24ae:	sub	sp, #276	; 0x114
    while (true) 
    { if (next_ == 0) return 0;
    24b0:	cbz	r5, 24fe <MTPStorage_SD::GetNextObjectHandle(unsigned long)+0x56>
    24b2:	mov	r4, r0
    24b4:	b.n	24c8 <MTPStorage_SD::GetNextObjectHandle(unsigned long)+0x20>

      int ret = next_;
      Record r = ReadIndexRecord(ret);
      if (follow_sibling_) 
      { next_ = r.sibling;
    24b6:	ldr	r3, [sp, #8]
    24b8:	str.w	r3, [r4, #252]	; 0xfc
      } 
      else 
      { next_++;
        if (next_ >= index_entries_) next_ = 0;
      }
      if (r.name[0]) return ret;
    24bc:	ldrb.w	r3, [sp, #16]
    24c0:	cbnz	r3, 24f8 <MTPStorage_SD::GetNextObjectHandle(unsigned long)+0x50>
  }

  uint32_t MTPStorage_SD::GetNextObjectHandle(uint32_t  store)
  {
    while (true) 
    { if (next_ == 0) return 0;
    24c2:	ldr.w	r5, [r4, #252]	; 0xfc
    24c6:	cbz	r5, 24fe <MTPStorage_SD::GetNextObjectHandle(unsigned long)+0x56>

      int ret = next_;
      Record r = ReadIndexRecord(ret);
    24c8:	mov	r2, r5
    24ca:	mov	r1, r4
    24cc:	mov	r0, sp
    24ce:	bl	2298 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
      if (follow_sibling_) 
    24d2:	ldrb.w	r2, [r4, #256]	; 0x100
    24d6:	cmp	r2, #0
    24d8:	bne.n	24b6 <MTPStorage_SD::GetNextObjectHandle(unsigned long)+0xe>
      { next_ = r.sibling;
      } 
      else 
      { next_++;
    24da:	ldr.w	r3, [r4, #252]	; 0xfc
        if (next_ >= index_entries_) next_ = 0;
    24de:	ldr.w	r1, [r4, #244]	; 0xf4
      Record r = ReadIndexRecord(ret);
      if (follow_sibling_) 
      { next_ = r.sibling;
      } 
      else 
      { next_++;
    24e2:	adds	r3, #1
    24e4:	str.w	r3, [r4, #252]	; 0xfc
        if (next_ >= index_entries_) next_ = 0;
    24e8:	cmp	r3, r1
      }
      if (r.name[0]) return ret;
    24ea:	ldrb.w	r3, [sp, #16]
      if (follow_sibling_) 
      { next_ = r.sibling;
      } 
      else 
      { next_++;
        if (next_ >= index_entries_) next_ = 0;
    24ee:	it	cs
    24f0:	strcs.w	r2, [r4, #252]	; 0xfc
      }
      if (r.name[0]) return ret;
    24f4:	cmp	r3, #0
    24f6:	beq.n	24c2 <MTPStorage_SD::GetNextObjectHandle(unsigned long)+0x1a>
    }
  }
    24f8:	mov	r0, r5
    24fa:	add	sp, #276	; 0x114
    24fc:	pop	{r4, r5, pc}
  }

  uint32_t MTPStorage_SD::GetNextObjectHandle(uint32_t  store)
  {
    while (true) 
    { if (next_ == 0) return 0;
    24fe:	movs	r5, #0
      { next_++;
        if (next_ >= index_entries_) next_ = 0;
      }
      if (r.name[0]) return ret;
    }
  }
    2500:	mov	r0, r5
    2502:	add	sp, #276	; 0x114
    2504:	pop	{r4, r5, pc}
    2506:	nop

00002508 <MTPStorage_SD::GetObjectInfo(unsigned long, char*, unsigned long*, unsigned long*, unsigned short*)>:

  void MTPStorage_SD::GetObjectInfo(uint32_t handle, char* name, uint32_t* size, uint32_t* parent, uint16_t *store)
  {
    2508:	push	{r4, r5, r6, r7, lr}
    250a:	sub	sp, #276	; 0x114
    250c:	mov	r7, r2
    Record r = ReadIndexRecord(handle);
    250e:	mov	r2, r1
    2510:	mov	r1, r0
    2512:	mov	r0, sp
      if (r.name[0]) return ret;
    }
  }

  void MTPStorage_SD::GetObjectInfo(uint32_t handle, char* name, uint32_t* size, uint32_t* parent, uint16_t *store)
  {
    2514:	mov	r5, r3
    2516:	ldr	r6, [sp, #296]	; 0x128
    2518:	ldr	r4, [sp, #300]	; 0x12c
    Record r = ReadIndexRecord(handle);
    251a:	bl	2298 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    strcpy(name, r.name);
    251e:	mov	r0, r7
    2520:	add	r1, sp, #16
    2522:	bl	110f0 <strcpy>
    *parent = r.parent;
    2526:	ldr	r2, [sp, #0]
    *size = r.isdir ? 0xFFFFFFFFUL : r.child;
    2528:	ldrb.w	r3, [sp, #12]

  void MTPStorage_SD::GetObjectInfo(uint32_t handle, char* name, uint32_t* size, uint32_t* parent, uint16_t *store)
  {
    Record r = ReadIndexRecord(handle);
    strcpy(name, r.name);
    *parent = r.parent;
    252c:	str	r2, [r6, #0]
    *size = r.isdir ? 0xFFFFFFFFUL : r.child;
    252e:	cbnz	r3, 253e <MTPStorage_SD::GetObjectInfo(unsigned long, char*, unsigned long*, unsigned long*, unsigned short*)+0x36>
    2530:	ldr	r3, [sp, #4]
    *store = r.store;
    2532:	ldrh.w	r2, [sp, #14]
  void MTPStorage_SD::GetObjectInfo(uint32_t handle, char* name, uint32_t* size, uint32_t* parent, uint16_t *store)
  {
    Record r = ReadIndexRecord(handle);
    strcpy(name, r.name);
    *parent = r.parent;
    *size = r.isdir ? 0xFFFFFFFFUL : r.child;
    2536:	str	r3, [r5, #0]
    *store = r.store;
    2538:	strh	r2, [r4, #0]
  }
    253a:	add	sp, #276	; 0x114
    253c:	pop	{r4, r5, r6, r7, pc}
  void MTPStorage_SD::GetObjectInfo(uint32_t handle, char* name, uint32_t* size, uint32_t* parent, uint16_t *store)
  {
    Record r = ReadIndexRecord(handle);
    strcpy(name, r.name);
    *parent = r.parent;
    *size = r.isdir ? 0xFFFFFFFFUL : r.child;
    253e:	mov.w	r3, #4294967295
    2542:	b.n	2532 <MTPStorage_SD::GetObjectInfo(unsigned long, char*, unsigned long*, unsigned long*, unsigned short*)+0x2a>

00002544 <MTPStorage_SD::GetSize(unsigned long)>:
    *store = r.store;
  }

  uint32_t MTPStorage_SD::GetSize(uint32_t handle) 
  {
    2544:	push	{lr}
    2546:	sub	sp, #276	; 0x114
    return ReadIndexRecord(handle).child;
    2548:	mov	r2, r1
    254a:	mov	r1, r0
    254c:	mov	r0, sp
    254e:	bl	2298 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
  }
    2552:	ldr	r0, [sp, #4]
    2554:	add	sp, #276	; 0x114
    2556:	ldr.w	pc, [sp], #4
    255a:	nop

0000255c <MTPStorage_SD::close()>:
      mtp_lock_storage(false);
      return ret;
  }

  void MTPStorage_SD::close() 
  {
    255c:	push	{r4, r5, r6, lr}
	}
	virtual uint64_t position() {
		return (f) ? f->position() : 0;
	}
	virtual uint64_t size() {
		return (f) ? f->size() : 0;
    255e:	ldr.w	r3, [r0, #204]	; 0xcc
    2562:	sub	sp, #272	; 0x110
    2564:	mov	r4, r0
    2566:	cmp	r3, #0
    2568:	beq.n	2604 <MTPStorage_SD::close()+0xa8>
    256a:	ldr	r5, [r3, #0]
    256c:	ldr	r1, [pc, #384]	; (26f0 <MTPStorage_SD::close()+0x194>)
    256e:	ldr	r2, [r5, #60]	; 0x3c
    2570:	cmp	r2, r1
    2572:	bne.w	26e4 <MTPStorage_SD::close()+0x188>
    2576:	ldr	r2, [r3, #16]
    2578:	cmp	r2, #0
    257a:	beq.w	26d4 <MTPStorage_SD::close()+0x178>
    257e:	ldr	r0, [r2, #0]
    2580:	ldr	r6, [r0, #60]	; 0x3c
    2582:	cmp	r6, r1
    2584:	bne.n	262c <MTPStorage_SD::close()+0xd0>
    2586:	ldr	r0, [r2, #16]
    2588:	cmp	r0, #0
    258a:	beq.n	25f6 <MTPStorage_SD::close()+0x9a>
    258c:	ldr	r6, [r0, #0]
    258e:	ldr	r6, [r6, #60]	; 0x3c
    2590:	cmp	r6, r1
    2592:	bne.n	262e <MTPStorage_SD::close()+0xd2>
    2594:	ldr	r0, [r0, #16]
    2596:	cmp	r0, #0
    2598:	beq.n	25f6 <MTPStorage_SD::close()+0x9a>
    259a:	ldr	r6, [r0, #0]
    259c:	ldr	r6, [r6, #60]	; 0x3c
    259e:	cmp	r6, r1
    25a0:	bne.n	262e <MTPStorage_SD::close()+0xd2>
    25a2:	ldr	r0, [r0, #16]
    25a4:	cbz	r0, 25f6 <MTPStorage_SD::close()+0x9a>
    25a6:	ldr	r6, [r0, #0]
    25a8:	ldr	r6, [r6, #60]	; 0x3c
    25aa:	cmp	r6, r1
    25ac:	bne.n	262e <MTPStorage_SD::close()+0xd2>
    25ae:	ldr	r0, [r0, #16]
    25b0:	cbz	r0, 25f6 <MTPStorage_SD::close()+0x9a>
    25b2:	ldr	r6, [r0, #0]
    25b4:	ldr	r6, [r6, #60]	; 0x3c
    25b6:	cmp	r6, r1
    25b8:	bne.n	262e <MTPStorage_SD::close()+0xd2>
    25ba:	ldr	r0, [r0, #16]
    25bc:	cbz	r0, 25f6 <MTPStorage_SD::close()+0x9a>
    25be:	ldr	r6, [r0, #0]
    25c0:	ldr	r6, [r6, #60]	; 0x3c
    25c2:	cmp	r6, r1
    25c4:	bne.n	262e <MTPStorage_SD::close()+0xd2>
    25c6:	ldr	r0, [r0, #16]
    25c8:	cbz	r0, 25f6 <MTPStorage_SD::close()+0x9a>
    25ca:	ldr	r6, [r0, #0]
    25cc:	ldr	r6, [r6, #60]	; 0x3c
    25ce:	cmp	r6, r1
    25d0:	bne.n	262e <MTPStorage_SD::close()+0xd2>
    25d2:	ldr	r0, [r0, #16]
    25d4:	cbz	r0, 25f6 <MTPStorage_SD::close()+0x9a>
    25d6:	ldr	r6, [r0, #0]
    25d8:	ldr	r6, [r6, #60]	; 0x3c
    25da:	cmp	r6, r1
    25dc:	bne.n	262e <MTPStorage_SD::close()+0xd2>
    25de:	ldr	r0, [r0, #16]
    25e0:	cbz	r0, 25f6 <MTPStorage_SD::close()+0x9a>
    25e2:	ldr	r6, [r0, #0]
    25e4:	ldr	r6, [r6, #60]	; 0x3c
    25e6:	cmp	r6, r1
    25e8:	bne.n	262e <MTPStorage_SD::close()+0xd2>
    25ea:	ldr	r0, [r0, #16]
    25ec:	cbz	r0, 25f6 <MTPStorage_SD::close()+0x9a>
    25ee:	ldr	r3, [r0, #0]
    25f0:	ldr	r3, [r3, #60]	; 0x3c
    25f2:	blx	r3
    25f4:	b.n	2630 <MTPStorage_SD::close()+0xd4>
	}
	virtual void close() {
		if (f) f->close();
    25f6:	ldr	r6, [r5, #64]	; 0x40
    25f8:	ldr	r1, [pc, #248]	; (26f4 <MTPStorage_SD::close()+0x198>)
    25fa:	cmp	r6, r1
    25fc:	bne.n	26ea <MTPStorage_SD::close()+0x18e>
    25fe:	mov	r0, r2
    2600:	movs	r5, #0
    2602:	b.n	264a <MTPStorage_SD::close()+0xee>
    mtp_lock_storage(true);
    uint32_t size = (uint32_t) file_.size();
    2604:	mov	r5, r3
    file_.close();
    mtp_lock_storage(false);
    //
    // update record with file size
    Record r = ReadIndexRecord(open_file_);
    2606:	ldr.w	r2, [r4, #240]	; 0xf0
    260a:	mov	r1, r4
    260c:	mov	r0, sp
    260e:	bl	2298 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    r.child = size;
    WriteIndexRecord(open_file_, r);
    2612:	mov	r2, sp
    2614:	ldr.w	r1, [r4, #240]	; 0xf0
    2618:	mov	r0, r4
    file_.close();
    mtp_lock_storage(false);
    //
    // update record with file size
    Record r = ReadIndexRecord(open_file_);
    r.child = size;
    261a:	str	r5, [sp, #4]
    WriteIndexRecord(open_file_, r);
    261c:	bl	20c8 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    open_file_ = 0xFFFFFFFEUL;
    2620:	mvn.w	r3, #1
    2624:	str.w	r3, [r4, #240]	; 0xf0
  }
    2628:	add	sp, #272	; 0x110
    262a:	pop	{r4, r5, r6, pc}
	}
	virtual uint64_t position() {
		return (f) ? f->position() : 0;
	}
	virtual uint64_t size() {
		return (f) ? f->size() : 0;
    262c:	mov	r0, r2
    262e:	blx	r6
	}
	virtual void close() {
		if (f) f->close();
    2630:	ldr.w	r3, [r4, #204]	; 0xcc
  }

  void MTPStorage_SD::close() 
  {
    mtp_lock_storage(true);
    uint32_t size = (uint32_t) file_.size();
    2634:	mov	r5, r0
    2636:	cmp	r3, #0
    2638:	beq.n	2606 <MTPStorage_SD::close()+0xaa>
    263a:	ldr	r2, [r3, #0]
    263c:	ldr	r1, [pc, #180]	; (26f4 <MTPStorage_SD::close()+0x198>)
    263e:	ldr	r6, [r2, #64]	; 0x40
    2640:	cmp	r6, r1
    2642:	bne.n	26de <MTPStorage_SD::close()+0x182>
    2644:	ldr	r0, [r3, #16]
    2646:	cmp	r0, #0
    2648:	beq.n	2606 <MTPStorage_SD::close()+0xaa>
    264a:	ldr	r3, [r0, #0]
    264c:	ldr	r3, [r3, #64]	; 0x40
    264e:	cmp	r3, r1
    2650:	bne.n	26d0 <MTPStorage_SD::close()+0x174>
    2652:	ldr	r0, [r0, #16]
    2654:	cmp	r0, #0
    2656:	beq.n	2606 <MTPStorage_SD::close()+0xaa>
    2658:	ldr	r3, [r0, #0]
    265a:	ldr	r3, [r3, #64]	; 0x40
    265c:	cmp	r3, r1
    265e:	bne.n	26d0 <MTPStorage_SD::close()+0x174>
    2660:	ldr	r0, [r0, #16]
    2662:	cmp	r0, #0
    2664:	beq.n	2606 <MTPStorage_SD::close()+0xaa>
    2666:	ldr	r3, [r0, #0]
    2668:	ldr	r3, [r3, #64]	; 0x40
    266a:	cmp	r3, r1
    266c:	bne.n	26d0 <MTPStorage_SD::close()+0x174>
    266e:	ldr	r0, [r0, #16]
    2670:	cmp	r0, #0
    2672:	beq.n	2606 <MTPStorage_SD::close()+0xaa>
    2674:	ldr	r3, [r0, #0]
    2676:	ldr	r3, [r3, #64]	; 0x40
    2678:	cmp	r3, r1
    267a:	bne.n	26d0 <MTPStorage_SD::close()+0x174>
    267c:	ldr	r0, [r0, #16]
    267e:	cmp	r0, #0
    2680:	beq.n	2606 <MTPStorage_SD::close()+0xaa>
    2682:	ldr	r3, [r0, #0]
    2684:	ldr	r3, [r3, #64]	; 0x40
    2686:	cmp	r3, r1
    2688:	bne.n	26d0 <MTPStorage_SD::close()+0x174>
    268a:	ldr	r0, [r0, #16]
    268c:	cmp	r0, #0
    268e:	beq.n	2606 <MTPStorage_SD::close()+0xaa>
    2690:	ldr	r3, [r0, #0]
    2692:	ldr	r3, [r3, #64]	; 0x40
    2694:	cmp	r3, r1
    2696:	bne.n	26d0 <MTPStorage_SD::close()+0x174>
    2698:	ldr	r0, [r0, #16]
    269a:	cmp	r0, #0
    269c:	beq.n	2606 <MTPStorage_SD::close()+0xaa>
    269e:	ldr	r3, [r0, #0]
    26a0:	ldr	r3, [r3, #64]	; 0x40
    26a2:	cmp	r3, r1
    26a4:	bne.n	26d0 <MTPStorage_SD::close()+0x174>
    26a6:	ldr	r0, [r0, #16]
    26a8:	cmp	r0, #0
    26aa:	beq.n	2606 <MTPStorage_SD::close()+0xaa>
    26ac:	ldr	r3, [r0, #0]
    26ae:	ldr	r3, [r3, #64]	; 0x40
    26b0:	cmp	r3, r1
    26b2:	bne.n	26d0 <MTPStorage_SD::close()+0x174>
    26b4:	ldr	r0, [r0, #16]
    26b6:	cmp	r0, #0
    26b8:	beq.n	2606 <MTPStorage_SD::close()+0xaa>
    26ba:	ldr	r3, [r0, #0]
    26bc:	ldr	r3, [r3, #64]	; 0x40
    26be:	cmp	r3, r1
    26c0:	bne.n	26d0 <MTPStorage_SD::close()+0x174>
    26c2:	ldr	r0, [r0, #16]
    26c4:	cmp	r0, #0
    26c6:	beq.n	2606 <MTPStorage_SD::close()+0xaa>
    26c8:	ldr	r3, [r0, #0]
    26ca:	ldr	r3, [r3, #64]	; 0x40
    26cc:	blx	r3
    26ce:	b.n	2606 <MTPStorage_SD::close()+0xaa>
    26d0:	blx	r3
    26d2:	b.n	2606 <MTPStorage_SD::close()+0xaa>
    26d4:	ldr	r6, [r5, #64]	; 0x40
    26d6:	mov	r5, r2
    26d8:	ldr	r1, [pc, #24]	; (26f4 <MTPStorage_SD::close()+0x198>)
    26da:	cmp	r6, r1
    26dc:	beq.n	2606 <MTPStorage_SD::close()+0xaa>
    26de:	mov	r0, r3
    26e0:	blx	r6
    26e2:	b.n	2606 <MTPStorage_SD::close()+0xaa>
	}
	virtual uint64_t position() {
		return (f) ? f->position() : 0;
	}
	virtual uint64_t size() {
		return (f) ? f->size() : 0;
    26e4:	mov	r0, r3
    26e6:	blx	r2
    26e8:	b.n	2630 <MTPStorage_SD::close()+0xd4>
	}
	virtual void close() {
		if (f) f->close();
    26ea:	movs	r5, #0
    26ec:	b.n	26de <MTPStorage_SD::close()+0x182>
    26ee:	nop
    26f0:	.word	0x00000101
    26f4:	.word	0x00000111

000026f8 <MTPStorage_SD::ConstructFilename(int, char*, int)>:

    return ret;
  }

  uint16_t MTPStorage_SD::ConstructFilename(int i, char* out, int len) // construct filename rexursively
  {
    26f8:	push	{r4, r5, r6, lr}
    26fa:	mov	r6, r0
    26fc:	sub	sp, #272	; 0x110
    26fe:	mov	r4, r2
    Record tmp = ReadIndexRecord(i);
    2700:	mov	r2, r1
    2702:	mov	r0, sp
    2704:	mov	r1, r6

    return ret;
  }

  uint16_t MTPStorage_SD::ConstructFilename(int i, char* out, int len) // construct filename rexursively
  {
    2706:	mov	r5, r3
    Record tmp = ReadIndexRecord(i);
    2708:	bl	2298 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
      
    if (tmp.parent==0xFFFFFFFFUL) //flags the root object
    270c:	ldr	r1, [sp, #0]
    270e:	adds	r3, r1, #1
    2710:	beq.n	2748 <MTPStorage_SD::ConstructFilename(int, char*, int)+0x50>
    { strcpy(out, "/");
      return tmp.store;
    }
    else 
    { ConstructFilename(tmp.parent, out, len);
    2712:	mov	r3, r5
    2714:	mov	r2, r4
    2716:	mov	r0, r6
    2718:	bl	26f8 <MTPStorage_SD::ConstructFilename(int, char*, int)>
      if (out[strlen(out)-1] != '/') strlcat(out, "/",len);
    271c:	mov	r0, r4
    271e:	bl	11240 <strlen>
    2722:	add	r0, r4
    2724:	ldrb.w	r3, [r0, #-1]
    2728:	cmp	r3, #47	; 0x2f
    272a:	beq.n	2736 <MTPStorage_SD::ConstructFilename(int, char*, int)+0x3e>
    272c:	mov	r2, r5
    272e:	ldr	r1, [pc, #40]	; (2758 <MTPStorage_SD::ConstructFilename(int, char*, int)+0x60>)
    2730:	mov	r0, r4
    2732:	bl	111ac <strlcat>
      strlcat(out, tmp.name,len);
    2736:	mov	r2, r5
    2738:	mov	r0, r4
    273a:	add	r1, sp, #16
    273c:	bl	111ac <strlcat>
      return tmp.store;
    2740:	ldrh.w	r0, [sp, #14]
    }
  }
    2744:	add	sp, #272	; 0x110
    2746:	pop	{r4, r5, r6, pc}
  uint16_t MTPStorage_SD::ConstructFilename(int i, char* out, int len) // construct filename rexursively
  {
    Record tmp = ReadIndexRecord(i);
      
    if (tmp.parent==0xFFFFFFFFUL) //flags the root object
    { strcpy(out, "/");
    2748:	ldr	r3, [pc, #12]	; (2758 <MTPStorage_SD::ConstructFilename(int, char*, int)+0x60>)
      return tmp.store;
    274a:	ldrh.w	r0, [sp, #14]
  uint16_t MTPStorage_SD::ConstructFilename(int i, char* out, int len) // construct filename rexursively
  {
    Record tmp = ReadIndexRecord(i);
      
    if (tmp.parent==0xFFFFFFFFUL) //flags the root object
    { strcpy(out, "/");
    274e:	ldrh	r3, [r3, #0]
    2750:	strh	r3, [r4, #0]
    { ConstructFilename(tmp.parent, out, len);
      if (out[strlen(out)-1] != '/') strlcat(out, "/",len);
      strlcat(out, tmp.name,len);
      return tmp.store;
    }
  }
    2752:	add	sp, #272	; 0x110
    2754:	pop	{r4, r5, r6, pc}
    2756:	nop
    2758:	.word	0x20000364

0000275c <MTPStorage_SD::rename(unsigned long, char const*)>:
    WriteIndexRecord(open_file_, r);
    open_file_ = 0xFFFFFFFEUL;
  }

  bool MTPStorage_SD::rename(uint32_t handle, const char* name) 
  { char oldName[MAX_FILENAME_LEN];
    275c:	push	{r4, r5, r6, r7, lr}
    275e:	subw	sp, sp, #1044	; 0x414
    char newName[MAX_FILENAME_LEN];
    char temp[MAX_FILENAME_LEN];

    uint16_t store = ConstructFilename(handle, oldName, MAX_FILENAME_LEN);
    2762:	mov.w	r3, #256	; 0x100
    WriteIndexRecord(open_file_, r);
    open_file_ = 0xFFFFFFFEUL;
  }

  bool MTPStorage_SD::rename(uint32_t handle, const char* name) 
  { char oldName[MAX_FILENAME_LEN];
    2766:	mov	r7, r2
    2768:	mov	r5, r1
    char newName[MAX_FILENAME_LEN];
    char temp[MAX_FILENAME_LEN];

    uint16_t store = ConstructFilename(handle, oldName, MAX_FILENAME_LEN);
    276a:	mov	r2, sp
    WriteIndexRecord(open_file_, r);
    open_file_ = 0xFFFFFFFEUL;
  }

  bool MTPStorage_SD::rename(uint32_t handle, const char* name) 
  { char oldName[MAX_FILENAME_LEN];
    276c:	mov	r4, r0
    char newName[MAX_FILENAME_LEN];
    char temp[MAX_FILENAME_LEN];

    uint16_t store = ConstructFilename(handle, oldName, MAX_FILENAME_LEN);
    276e:	bl	26f8 <MTPStorage_SD::ConstructFilename(int, char*, int)>
    2772:	mov	r6, r0
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
    2774:	mov	r0, sp
    2776:	bl	11240 <strlen>
    277a:	mov	r1, r0
    277c:	mov	r0, sp
    uint32_t sd_getFSCount(void) {return fsCount;}
    const char *sd_getFSName(uint32_t store) { return sd_name[store];}

    File sd_open(uint32_t store, const char *filename, uint32_t mode) { return sdx[store]->open(filename,mode);  }
    bool sd_mkdir(uint32_t store, char *filename) {  return sdx[store]->mkdir(filename);  }
    bool sd_rename(uint32_t store, char *oldfilename, char *newfilename) { return sdx[store]->rename(oldfilename,newfilename);  }
    277e:	add.w	r6, r4, r6, lsl #2
    2782:	bl	e284 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    2786:	ldr	r0, [pc, #128]	; (2808 <MTPStorage_SD::rename(unsigned long, char const*)+0xac>)
    2788:	bl	ff48 <Print::println()>
    Serial.println(oldName);

    Record p1 = ReadIndexRecord(handle);
    278c:	mov	r2, r5
    278e:	mov	r1, r4
    2790:	add	r0, sp, #768	; 0x300
    2792:	bl	2298 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    strlcpy(temp,p1.name,MAX_FILENAME_LEN);
    2796:	add	r1, sp, #784	; 0x310
    2798:	mov.w	r2, #256	; 0x100
    279c:	add	r0, sp, #512	; 0x200
    279e:	bl	11200 <strlcpy>
    strlcpy(p1.name,name,MAX_FILENAME_LEN);
    27a2:	mov	r1, r7
    27a4:	mov.w	r2, #256	; 0x100
    27a8:	add	r0, sp, #784	; 0x310
    27aa:	bl	11200 <strlcpy>

    WriteIndexRecord(handle, p1);
    27ae:	add	r2, sp, #768	; 0x300
    27b0:	mov	r1, r5
    27b2:	mov	r0, r4
    27b4:	bl	20c8 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    ConstructFilename(handle, newName, MAX_FILENAME_LEN);
    27b8:	add	r2, sp, #256	; 0x100
    27ba:	mov.w	r3, #256	; 0x100
    27be:	mov	r1, r5
    27c0:	mov	r0, r4
    27c2:	bl	26f8 <MTPStorage_SD::ConstructFilename(int, char*, int)>
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
    27c6:	add	r0, sp, #256	; 0x100
    27c8:	bl	11240 <strlen>
    27cc:	mov	r1, r0
    27ce:	add	r0, sp, #256	; 0x100
    27d0:	bl	e284 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    27d4:	ldr	r0, [pc, #48]	; (2808 <MTPStorage_SD::rename(unsigned long, char const*)+0xac>)
    27d6:	bl	ff48 <Print::println()>
    27da:	ldr	r0, [r6, #88]	; 0x58
    27dc:	add	r2, sp, #256	; 0x100
    27de:	mov	r1, sp
    27e0:	ldr	r3, [r0, #0]
    27e2:	ldr	r3, [r3, #12]
    27e4:	blx	r3
    Serial.println(newName);

    if (sd_rename(store,oldName,newName)) return true;
    27e6:	mov	r6, r0
    27e8:	cbnz	r0, 2800 <MTPStorage_SD::rename(unsigned long, char const*)+0xa4>

    // rename failed; undo index update
    strlcpy(p1.name,temp,MAX_FILENAME_LEN);
    27ea:	add	r1, sp, #512	; 0x200
    27ec:	mov.w	r2, #256	; 0x100
    27f0:	add	r0, sp, #784	; 0x310
    27f2:	bl	11200 <strlcpy>
    WriteIndexRecord(handle, p1);
    27f6:	add	r2, sp, #768	; 0x300
    27f8:	mov	r1, r5
    27fa:	mov	r0, r4
    27fc:	bl	20c8 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    return false;
  }
    2800:	mov	r0, r6
    2802:	addw	sp, sp, #1044	; 0x414
    2806:	pop	{r4, r5, r6, r7, pc}
    2808:	.word	0x20000c60

0000280c <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)>:
    }
  }

  void MTPStorage_SD::OpenFileByIndex(uint32_t i, uint32_t mode) 
  {
    if (open_file_ == i && mode_ == mode) return;
    280c:	ldr.w	r3, [r0, #240]	; 0xf0
    2810:	cmp	r3, r1
      return tmp.store;
    }
  }

  void MTPStorage_SD::OpenFileByIndex(uint32_t i, uint32_t mode) 
  {
    2812:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2816:	sub	sp, #292	; 0x124
    if (open_file_ == i && mode_ == mode) return;
    2818:	beq.w	2c10 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x404>
    281c:	mov	r4, r0
    281e:	mov	r6, r2
    char filename[MAX_FILENAME_LEN];
    uint16_t store = ConstructFilename(i, filename, MAX_FILENAME_LEN);
    2820:	mov.w	r3, #256	; 0x100
    2824:	add	r2, sp, #32
    2826:	mov	r5, r1
    2828:	bl	26f8 <MTPStorage_SD::ConstructFilename(int, char*, int)>
    282c:	mov	r7, r0
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
    282e:	ldr.w	r0, [r4, #204]	; 0xcc
    2832:	cmp	r0, #0
    2834:	beq.w	2948 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x13c>
    2838:	ldr	r2, [r0, #0]
    283a:	ldr	r3, [pc, #348]	; (2998 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x18c>)
    283c:	ldr	r2, [r2, #68]	; 0x44
    283e:	cmp	r2, r3
    2840:	bne.w	2c20 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x414>
    2844:	ldr	r0, [r0, #16]
    2846:	cmp	r0, #0
    2848:	beq.n	2948 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x13c>
    284a:	ldr	r2, [r0, #0]
    284c:	ldr	r2, [r2, #68]	; 0x44
    284e:	cmp	r2, r3
    2850:	bne.w	2c20 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x414>
    2854:	ldr	r0, [r0, #16]
    2856:	cmp	r0, #0
    2858:	beq.n	2948 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x13c>
    285a:	ldr	r2, [r0, #0]
    285c:	ldr	r2, [r2, #68]	; 0x44
    285e:	cmp	r2, r3
    2860:	bne.w	2c20 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x414>
    2864:	ldr	r0, [r0, #16]
    2866:	cmp	r0, #0
    2868:	beq.n	2948 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x13c>
    286a:	ldr	r2, [r0, #0]
    286c:	ldr	r2, [r2, #68]	; 0x44
    286e:	cmp	r2, r3
    2870:	bne.w	2c20 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x414>
    2874:	ldr	r0, [r0, #16]
    2876:	cmp	r0, #0
    2878:	beq.n	2948 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x13c>
    287a:	ldr	r2, [r0, #0]
    287c:	ldr	r2, [r2, #68]	; 0x44
    287e:	cmp	r2, r3
    2880:	bne.w	2c20 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x414>
    2884:	ldr	r0, [r0, #16]
    2886:	cmp	r0, #0
    2888:	beq.n	2948 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x13c>
    288a:	ldr	r2, [r0, #0]
    288c:	ldr	r2, [r2, #68]	; 0x44
    288e:	cmp	r2, r3
    2890:	bne.w	2c20 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x414>
    2894:	ldr	r0, [r0, #16]
    2896:	cmp	r0, #0
    2898:	beq.n	2948 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x13c>
    289a:	ldr	r2, [r0, #0]
    289c:	ldr	r2, [r2, #68]	; 0x44
    289e:	cmp	r2, r3
    28a0:	bne.w	2c20 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x414>
    28a4:	ldr	r0, [r0, #16]
    28a6:	cmp	r0, #0
    28a8:	beq.n	2948 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x13c>
    28aa:	ldr	r2, [r0, #0]
    28ac:	ldr	r2, [r2, #68]	; 0x44
    28ae:	cmp	r2, r3
    28b0:	bne.w	2c20 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x414>
    28b4:	ldr	r0, [r0, #16]
    28b6:	cmp	r0, #0
    28b8:	beq.n	2948 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x13c>
    28ba:	ldr	r2, [r0, #0]
    28bc:	ldr	r2, [r2, #68]	; 0x44
    28be:	cmp	r2, r3
    28c0:	bne.w	2c20 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x414>
    28c4:	ldr	r0, [r0, #16]
    28c6:	cmp	r0, #0
    28c8:	beq.n	2948 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x13c>
    28ca:	ldr	r3, [r0, #0]
    28cc:	ldr	r3, [r3, #68]	; 0x44
    28ce:	blx	r3

    mtp_lock_storage(true);
    if(sd_isOpen(file_)) file_.close();
    28d0:	cmp	r0, #0
    28d2:	beq.n	2948 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x13c>
	}
	virtual uint64_t size() {
		return (f) ? f->size() : 0;
	}
	virtual void close() {
		if (f) f->close();
    28d4:	ldr.w	r0, [r4, #204]	; 0xcc
    28d8:	cmp	r0, #0
    28da:	beq.n	2948 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x13c>
    28dc:	ldr	r2, [r0, #0]
    28de:	ldr	r3, [pc, #188]	; (299c <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x190>)
    28e0:	ldr	r2, [r2, #64]	; 0x40
    28e2:	cmp	r2, r3
    28e4:	bne.w	2c24 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x418>
    28e8:	ldr	r0, [r0, #16]
    28ea:	cmp	r0, #0
    28ec:	beq.n	2948 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x13c>
    28ee:	ldr	r2, [r0, #0]
    28f0:	ldr	r2, [r2, #64]	; 0x40
    28f2:	cmp	r2, r3
    28f4:	bne.w	2c24 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x418>
    28f8:	ldr	r0, [r0, #16]
    28fa:	cbz	r0, 2948 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x13c>
    28fc:	ldr	r2, [r0, #0]
    28fe:	ldr	r2, [r2, #64]	; 0x40
    2900:	cmp	r2, r3
    2902:	bne.w	2c24 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x418>
    2906:	ldr	r0, [r0, #16]
    2908:	cbz	r0, 2948 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x13c>
    290a:	ldr	r2, [r0, #0]
    290c:	ldr	r2, [r2, #64]	; 0x40
    290e:	cmp	r2, r3
    2910:	bne.w	2c24 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x418>
    2914:	ldr	r0, [r0, #16]
    2916:	cbz	r0, 2948 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x13c>
    2918:	ldr	r2, [r0, #0]
    291a:	ldr	r2, [r2, #64]	; 0x40
    291c:	cmp	r2, r3
    291e:	bne.w	2c24 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x418>
    2922:	ldr	r0, [r0, #16]
    2924:	cbz	r0, 2948 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x13c>
    2926:	ldr	r2, [r0, #0]
    2928:	ldr	r2, [r2, #64]	; 0x40
    292a:	cmp	r2, r3
    292c:	bne.w	2c24 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x418>
    2930:	ldr	r0, [r0, #16]
    2932:	cbz	r0, 2948 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x13c>
    2934:	ldr	r2, [r0, #0]
    2936:	ldr	r2, [r2, #64]	; 0x40
    2938:	cmp	r2, r3
    293a:	bne.w	2c24 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x418>
    293e:	ldr	r0, [r0, #16]
    2940:	cbz	r0, 2948 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x13c>
    2942:	ldr	r3, [r0, #0]
    2944:	ldr	r3, [r3, #64]	; 0x40
    2946:	blx	r3
    }

    uint32_t sd_getFSCount(void) {return fsCount;}
    const char *sd_getFSName(uint32_t store) { return sd_name[store];}

    File sd_open(uint32_t store, const char *filename, uint32_t mode) { return sdx[store]->open(filename,mode);  }
    2948:	add.w	r7, r4, r7, lsl #2
    294c:	add	r2, sp, #32
    294e:	uxtb	r3, r6
    2950:	add	r0, sp, #12
    2952:	ldr	r1, [r7, #88]	; 0x58
    2954:	ldr	r7, [r1, #0]
    2956:	ldr	r7, [r7, #0]
    2958:	blx	r7
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    295a:	ldr.w	r2, [r4, #204]	; 0xcc
    295e:	cbz	r2, 2968 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x15c>
    2960:	ldr	r3, [r2, #16]
    2962:	subs	r3, #1
    2964:	str	r3, [r2, #16]
    2966:	cbz	r3, 29a4 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x198>
	File& operator = (const File &file) {
		//Serial.println("File assignment");
		//static int assigncount=0;
		//if (++assigncount > 20) while (1) ;
		invalidate();
		f = file.f;
    2968:	ldr	r2, [sp, #28]
    296a:	str.w	r2, [r4, #204]	; 0xcc
		if (f) f->refcount++;
    296e:	cbz	r2, 298a <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x17e>
    2970:	ldr	r1, [r2, #16]
		return *this;
	}
	virtual ~File() {
    2972:	ldr	r3, [pc, #44]	; (29a0 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x194>)
		//Serial.println("File assignment");
		//static int assigncount=0;
		//if (++assigncount > 20) while (1) ;
		invalidate();
		f = file.f;
		if (f) f->refcount++;
    2974:	adds	r1, #1
		return *this;
	}
	virtual ~File() {
    2976:	str	r3, [sp, #12]
		//Serial.println("File assignment");
		//static int assigncount=0;
		//if (++assigncount > 20) while (1) ;
		invalidate();
		f = file.f;
		if (f) f->refcount++;
    2978:	str	r1, [r2, #16]
    297a:	ldr	r1, [sp, #28]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    297c:	cbz	r1, 298a <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x17e>
    297e:	ldr	r2, [r1, #16]
    2980:	subs	r2, #1
    2982:	str	r2, [r1, #16]
    2984:	cmp	r2, #0
    2986:	beq.w	2ae0 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x2d4>
    file_=sd_open(store,filename,mode);
    open_file_ = i;
    298a:	str.w	r5, [r4, #240]	; 0xf0
    mode_ = mode;
    298e:	str.w	r6, [r4, #236]	; 0xec
    mtp_lock_storage(false);
  }
    2992:	add	sp, #292	; 0x124
    2994:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2998:	.word	0x0000011d
    299c:	.word	0x00000111
    29a0:	.word	0x20000074
    29a4:	ldr.w	r7, [r4, #204]	; 0xcc
    29a8:	cmp	r7, #0
    29aa:	beq.n	2968 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x15c>
    29ac:	ldr	r3, [r7, #0]
    29ae:	ldr	r1, [pc, #680]	; (2c58 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x44c>)
    29b0:	ldr	r3, [r3, #32]
    29b2:	cmp	r3, r1
    29b4:	bne.w	2c28 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x41c>
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    29b8:	ldr	r3, [pc, #672]	; (2c5c <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x450>)
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    29ba:	ldr	r0, [r7, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    29bc:	str	r3, [r7, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    29be:	cmp	r0, #0
    29c0:	beq.w	2ad6 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x2ca>
    29c4:	ldr	r2, [r0, #16]
    29c6:	subs	r2, #1
    29c8:	str	r2, [r0, #16]
    29ca:	cmp	r2, #0
    29cc:	bne.w	2ad6 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x2ca>
    29d0:	ldr.w	r8, [r7, #16]
    29d4:	cmp.w	r8, #0
    29d8:	beq.n	2ad6 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x2ca>
    29da:	ldr.w	r2, [r8]
    29de:	ldr	r2, [r2, #32]
    29e0:	cmp	r2, r1
    29e2:	bne.w	2c46 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x43a>
    29e6:	ldr.w	r0, [r8, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    29ea:	str.w	r3, [r8]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    29ee:	cmp	r0, #0
    29f0:	beq.n	2ace <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x2c2>
    29f2:	ldr	r2, [r0, #16]
    29f4:	subs	r2, #1
    29f6:	str	r2, [r0, #16]
    29f8:	cmp	r2, #0
    29fa:	bne.n	2ace <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x2c2>
    29fc:	ldr.w	r9, [r8, #16]
    2a00:	cmp.w	r9, #0
    2a04:	beq.n	2ace <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x2c2>
    2a06:	ldr.w	r2, [r9]
    2a0a:	ldr	r2, [r2, #32]
    2a0c:	cmp	r2, r1
    2a0e:	bne.w	2c3a <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x42e>
    2a12:	ldr.w	r0, [r9, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    2a16:	str.w	r3, [r9]
    2a1a:	ldr.w	lr, [pc, #576]	; 2c5c <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x450>
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    2a1e:	cmp	r0, #0
    2a20:	beq.n	2ac6 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x2ba>
    2a22:	ldr	r2, [r0, #16]
    2a24:	subs	r2, #1
    2a26:	str	r2, [r0, #16]
    2a28:	cmp	r2, #0
    2a2a:	bne.n	2ac6 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x2ba>
    2a2c:	ldr.w	sl, [r9, #16]
    2a30:	cmp.w	sl, #0
    2a34:	beq.n	2ac6 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x2ba>
    2a36:	ldr.w	r2, [sl]
    2a3a:	ldr	r2, [r2, #32]
    2a3c:	cmp	r2, r1
    2a3e:	bne.w	2c52 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x446>
    2a42:	ldr.w	r0, [sl, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    2a46:	str.w	lr, [sl]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    2a4a:	cmp	r0, #0
    2a4c:	beq.n	2abe <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x2b2>
    2a4e:	ldr	r2, [r0, #16]
    2a50:	subs	r2, #1
    2a52:	str	r2, [r0, #16]
    2a54:	cmp	r2, #0
    2a56:	bne.n	2abe <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x2b2>
    2a58:	ldr.w	fp, [sl, #16]
    2a5c:	cmp.w	fp, #0
    2a60:	beq.n	2abe <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x2b2>
    2a62:	ldr.w	r2, [fp]
    2a66:	ldr	r2, [r2, #32]
    2a68:	cmp	r2, r1
    2a6a:	bne.w	2c66 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x45a>
    2a6e:	ldr.w	r2, [fp, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    2a72:	str.w	r3, [fp]
    2a76:	ldr	r0, [pc, #484]	; (2c5c <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x450>)
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    2a78:	cbz	r2, 2ab6 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x2aa>
    2a7a:	ldr	r3, [r2, #16]
    2a7c:	subs	r3, #1
    2a7e:	str	r3, [r2, #16]
    2a80:	cbnz	r3, 2ab6 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x2aa>
    2a82:	ldr.w	r2, [fp, #16]
    2a86:	cbz	r2, 2ab6 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x2aa>
    2a88:	ldr	r3, [r2, #0]
    2a8a:	ldr	r3, [r3, #32]
    2a8c:	cmp	r3, r1
    2a8e:	bne.w	2c72 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x466>
    2a92:	ldr	r1, [r2, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    2a94:	str	r0, [r2, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    2a96:	cbz	r1, 2aae <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x2a2>
    2a98:	ldr	r3, [r1, #16]
    2a9a:	subs	r3, #1
    2a9c:	str	r3, [r1, #16]
    2a9e:	cbnz	r3, 2aae <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x2a2>
    2aa0:	ldr	r0, [r2, #16]
    2aa2:	cbz	r0, 2aae <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x2a2>
    2aa4:	ldr	r3, [r0, #0]
    2aa6:	str	r2, [sp, #4]
    2aa8:	ldr	r3, [r3, #32]
    2aaa:	blx	r3
    2aac:	ldr	r2, [sp, #4]
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
		invalidate();
	}
    2aae:	mov	r0, r2
    2ab0:	movs	r1, #20
    2ab2:	bl	1006c <operator delete(void*, unsigned int)>
    2ab6:	mov	r0, fp
    2ab8:	movs	r1, #20
    2aba:	bl	1006c <operator delete(void*, unsigned int)>
    2abe:	mov	r0, sl
    2ac0:	movs	r1, #20
    2ac2:	bl	1006c <operator delete(void*, unsigned int)>
    2ac6:	mov	r0, r9
    2ac8:	movs	r1, #20
    2aca:	bl	1006c <operator delete(void*, unsigned int)>
    2ace:	mov	r0, r8
    2ad0:	movs	r1, #20
    2ad2:	bl	1006c <operator delete(void*, unsigned int)>
    2ad6:	mov	r0, r7
    2ad8:	movs	r1, #20
    2ada:	bl	1006c <operator delete(void*, unsigned int)>
    2ade:	b.n	2968 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x15c>
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    2ae0:	ldr	r7, [sp, #28]
    2ae2:	cmp	r7, #0
    2ae4:	beq.w	298a <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x17e>
    2ae8:	ldr	r2, [r7, #0]
    2aea:	ldr	r1, [pc, #364]	; (2c58 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x44c>)
    2aec:	ldr	r2, [r2, #32]
    2aee:	cmp	r2, r1
    2af0:	bne.w	2c2e <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x422>
    2af4:	ldr	r0, [r7, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    2af6:	str	r3, [r7, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    2af8:	cmp	r0, #0
    2afa:	beq.w	2c06 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x3fa>
    2afe:	ldr	r2, [r0, #16]
    2b00:	subs	r2, #1
    2b02:	str	r2, [r0, #16]
    2b04:	cmp	r2, #0
    2b06:	bne.n	2c06 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x3fa>
    2b08:	ldr.w	r8, [r7, #16]
    2b0c:	cmp.w	r8, #0
    2b10:	beq.n	2c06 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x3fa>
    2b12:	ldr.w	r2, [r8]
    2b16:	ldr	r2, [r2, #32]
    2b18:	cmp	r2, r1
    2b1a:	bne.w	2c40 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x434>
    2b1e:	ldr.w	r0, [r8, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    2b22:	str.w	r3, [r8]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    2b26:	cmp	r0, #0
    2b28:	beq.n	2bfe <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x3f2>
    2b2a:	ldr	r2, [r0, #16]
    2b2c:	subs	r2, #1
    2b2e:	str	r2, [r0, #16]
    2b30:	cmp	r2, #0
    2b32:	bne.n	2bfe <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x3f2>
    2b34:	ldr.w	r9, [r8, #16]
    2b38:	cmp.w	r9, #0
    2b3c:	beq.n	2bfe <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x3f2>
    2b3e:	ldr.w	r2, [r9]
    2b42:	ldr	r2, [r2, #32]
    2b44:	cmp	r2, r1
    2b46:	bne.n	2c34 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x428>
    2b48:	ldr.w	r0, [r9, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    2b4c:	str.w	r3, [r9]
    2b50:	ldr.w	lr, [pc, #264]	; 2c5c <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x450>
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    2b54:	cmp	r0, #0
    2b56:	beq.n	2bf6 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x3ea>
    2b58:	ldr	r2, [r0, #16]
    2b5a:	subs	r2, #1
    2b5c:	str	r2, [r0, #16]
    2b5e:	cmp	r2, #0
    2b60:	bne.n	2bf6 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x3ea>
    2b62:	ldr.w	sl, [r9, #16]
    2b66:	cmp.w	sl, #0
    2b6a:	beq.n	2bf6 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x3ea>
    2b6c:	ldr.w	r2, [sl]
    2b70:	ldr	r2, [r2, #32]
    2b72:	cmp	r2, r1
    2b74:	bne.n	2c4c <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x440>
    2b76:	ldr.w	r0, [sl, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    2b7a:	str.w	lr, [sl]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    2b7e:	cmp	r0, #0
    2b80:	beq.n	2bee <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x3e2>
    2b82:	ldr	r2, [r0, #16]
    2b84:	subs	r2, #1
    2b86:	str	r2, [r0, #16]
    2b88:	cmp	r2, #0
    2b8a:	bne.n	2bee <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x3e2>
    2b8c:	ldr.w	fp, [sl, #16]
    2b90:	cmp.w	fp, #0
    2b94:	beq.n	2bee <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x3e2>
    2b96:	ldr.w	r2, [fp]
    2b9a:	ldr	r2, [r2, #32]
    2b9c:	cmp	r2, r1
    2b9e:	bne.n	2c60 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x454>
    2ba0:	ldr.w	r2, [fp, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    2ba4:	str.w	r3, [fp]
    2ba8:	ldr	r0, [pc, #176]	; (2c5c <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x450>)
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    2baa:	cbz	r2, 2be6 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x3da>
    2bac:	ldr	r3, [r2, #16]
    2bae:	subs	r3, #1
    2bb0:	str	r3, [r2, #16]
    2bb2:	cbnz	r3, 2be6 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x3da>
    2bb4:	ldr.w	r2, [fp, #16]
    2bb8:	cbz	r2, 2be6 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x3da>
    2bba:	ldr	r3, [r2, #0]
    2bbc:	ldr	r3, [r3, #32]
    2bbe:	cmp	r3, r1
    2bc0:	bne.n	2c6c <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x460>
    2bc2:	ldr	r1, [r2, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    2bc4:	str	r0, [r2, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    2bc6:	cbz	r1, 2bde <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x3d2>
    2bc8:	ldr	r3, [r1, #16]
    2bca:	subs	r3, #1
    2bcc:	str	r3, [r1, #16]
    2bce:	cbnz	r3, 2bde <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x3d2>
    2bd0:	ldr	r0, [r2, #16]
    2bd2:	cbz	r0, 2bde <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x3d2>
    2bd4:	ldr	r3, [r0, #0]
    2bd6:	str	r2, [sp, #4]
    2bd8:	ldr	r3, [r3, #32]
    2bda:	blx	r3
    2bdc:	ldr	r2, [sp, #4]
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
		invalidate();
	}
    2bde:	mov	r0, r2
    2be0:	movs	r1, #20
    2be2:	bl	1006c <operator delete(void*, unsigned int)>
    2be6:	mov	r0, fp
    2be8:	movs	r1, #20
    2bea:	bl	1006c <operator delete(void*, unsigned int)>
    2bee:	mov	r0, sl
    2bf0:	movs	r1, #20
    2bf2:	bl	1006c <operator delete(void*, unsigned int)>
    2bf6:	mov	r0, r9
    2bf8:	movs	r1, #20
    2bfa:	bl	1006c <operator delete(void*, unsigned int)>
    2bfe:	mov	r0, r8
    2c00:	movs	r1, #20
    2c02:	bl	1006c <operator delete(void*, unsigned int)>
    2c06:	mov	r0, r7
    2c08:	movs	r1, #20
    2c0a:	bl	1006c <operator delete(void*, unsigned int)>
    2c0e:	b.n	298a <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x17e>
    }
  }

  void MTPStorage_SD::OpenFileByIndex(uint32_t i, uint32_t mode) 
  {
    if (open_file_ == i && mode_ == mode) return;
    2c10:	ldr.w	r3, [r0, #236]	; 0xec
    2c14:	cmp	r3, r2
    2c16:	bne.w	281c <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x10>
    if(sd_isOpen(file_)) file_.close();
    file_=sd_open(store,filename,mode);
    open_file_ = i;
    mode_ = mode;
    mtp_lock_storage(false);
  }
    2c1a:	add	sp, #292	; 0x124
    2c1c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	}
	virtual void close() {
		if (f) f->close();
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
    2c20:	blx	r2
    2c22:	b.n	28d0 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0xc4>
	}
	virtual uint64_t size() {
		return (f) ? f->size() : 0;
	}
	virtual void close() {
		if (f) f->close();
    2c24:	blx	r2
    2c26:	b.n	2948 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x13c>
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    2c28:	mov	r0, r7
    2c2a:	blx	r3
    2c2c:	b.n	2968 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x15c>
    2c2e:	mov	r0, r7
    2c30:	blx	r2
    2c32:	b.n	298a <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x17e>
    2c34:	mov	r0, r9
    2c36:	blx	r2
    2c38:	b.n	2bfe <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x3f2>
    2c3a:	mov	r0, r9
    2c3c:	blx	r2
    2c3e:	b.n	2ace <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x2c2>
    2c40:	mov	r0, r8
    2c42:	blx	r2
    2c44:	b.n	2c06 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x3fa>
    2c46:	mov	r0, r8
    2c48:	blx	r2
    2c4a:	b.n	2ad6 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x2ca>
    2c4c:	mov	r0, sl
    2c4e:	blx	r2
    2c50:	b.n	2bf6 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x3ea>
    2c52:	mov	r0, sl
    2c54:	blx	r2
    2c56:	b.n	2ac6 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x2ba>
    2c58:	.word	0x00000b4d
    2c5c:	.word	0x20000074
    2c60:	mov	r0, fp
    2c62:	blx	r2
    2c64:	b.n	2bee <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x3e2>
    2c66:	mov	r0, fp
    2c68:	blx	r2
    2c6a:	b.n	2abe <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x2b2>
    2c6c:	mov	r0, r2
    2c6e:	blx	r3
    2c70:	b.n	2be6 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x3da>
    2c72:	mov	r0, r2
    2c74:	blx	r3
    2c76:	b.n	2ab6 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x2aa>

00002c78 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)>:
  {
    return ReadIndexRecord(handle).child;
  }

  void MTPStorage_SD::read(uint32_t handle, uint32_t pos, char* out, uint32_t bytes)
  {
    2c78:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2c7c:	mov	r5, r0
    2c7e:	sub	sp, #8
    2c80:	mov	r7, r2
    OpenFileByIndex(handle);
    2c82:	movs	r2, #0
  {
    return ReadIndexRecord(handle).child;
  }

  void MTPStorage_SD::read(uint32_t handle, uint32_t pos, char* out, uint32_t bytes)
  {
    2c84:	mov	r8, r3
    2c86:	ldr.w	r9, [sp, #40]	; 0x28
    OpenFileByIndex(handle);
    2c8a:	bl	280c <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)>
	}
	virtual bool truncate(uint64_t size=0) {
		return (f) ? f->truncate(size) : false;
	}
	virtual bool seek(uint64_t pos, int mode) {
		return (f) ? f->seek(pos, mode) : false;
    2c8e:	ldr.w	r4, [r5, #204]	; 0xcc
    2c92:	cmp	r4, #0
    2c94:	beq.n	2d6a <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0xf2>
    2c96:	ldr	r0, [r4, #0]
    2c98:	movs	r3, #0
    2c9a:	ldr	r2, [pc, #308]	; (2dd0 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x158>)
    2c9c:	ldr	r6, [r0, #52]	; 0x34
    2c9e:	cmp	r6, r2
    2ca0:	bne.n	2d9a <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x122>
    2ca2:	ldr	r1, [r4, #16]
    2ca4:	cmp	r1, #0
    2ca6:	beq.n	2d62 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0xea>
    2ca8:	ldr	r2, [r1, #0]
    2caa:	ldr.w	sl, [r2, #52]	; 0x34
    2cae:	cmp	sl, r6
    2cb0:	bne.n	2da4 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x12c>
    2cb2:	ldr.w	lr, [r1, #16]
    2cb6:	cmp.w	lr, #0
    2cba:	beq.n	2d70 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0xf8>
    2cbc:	ldr.w	r2, [lr]
    2cc0:	ldr	r6, [r2, #52]	; 0x34
    2cc2:	cmp	r6, sl
    2cc4:	bne.n	2dae <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x136>
    2cc6:	ldr.w	lr, [lr, #16]
    2cca:	cmp.w	lr, #0
    2cce:	beq.n	2d70 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0xf8>
    2cd0:	ldr.w	r2, [lr]
    2cd4:	ldr.w	sl, [r2, #52]	; 0x34
    2cd8:	cmp	sl, r6
    2cda:	bne.n	2db8 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x140>
    2cdc:	ldr.w	lr, [lr, #16]
    2ce0:	cmp.w	lr, #0
    2ce4:	beq.n	2d70 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0xf8>
    2ce6:	ldr.w	r3, [lr]
    2cea:	ldr	r6, [r3, #52]	; 0x34
    2cec:	cmp	r6, sl
    2cee:	bne.n	2dc2 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x14a>
    2cf0:	ldr.w	r6, [lr, #16]
    2cf4:	cmp	r6, #0
    2cf6:	beq.n	2d70 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0xf8>
    2cf8:	ldr	r1, [r6, #0]
    2cfa:	movs	r3, #0
    2cfc:	mov	r2, r7
    2cfe:	mov	r0, r6
    2d00:	str	r3, [sp, #0]
    2d02:	ldr	r1, [r1, #52]	; 0x34
    2d04:	blx	r1
	unsigned int getRefcount() { // testing only
		return refcount;
	}
#endif
	virtual size_t read(void *buf, size_t nbyte) {
		return (f) ? f->read(buf, nbyte) : 0;
    2d06:	ldr.w	r4, [r5, #204]	; 0xcc
    2d0a:	cmp	r4, #0
    2d0c:	beq.n	2d6a <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0xf2>
    2d0e:	ldr	r2, [r4, #0]
    2d10:	ldr	r3, [pc, #192]	; (2dd4 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x15c>)
    2d12:	ldr	r5, [r2, #40]	; 0x28
    2d14:	cmp	r5, r3
    2d16:	bne.n	2d7c <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x104>
    2d18:	ldr	r0, [r4, #16]
    2d1a:	cbz	r0, 2d6a <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0xf2>
    2d1c:	ldr	r2, [r0, #0]
    2d1e:	ldr	r4, [r2, #40]	; 0x28
    2d20:	cmp	r4, r3
    2d22:	bne.n	2d8c <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x114>
    2d24:	ldr	r0, [r0, #16]
    2d26:	cbz	r0, 2d6a <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0xf2>
    2d28:	ldr	r2, [r0, #0]
    2d2a:	ldr	r4, [r2, #40]	; 0x28
    2d2c:	cmp	r4, r3
    2d2e:	bne.n	2d8c <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x114>
    2d30:	ldr	r0, [r0, #16]
    2d32:	cbz	r0, 2d6a <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0xf2>
    2d34:	ldr	r2, [r0, #0]
    2d36:	ldr	r4, [r2, #40]	; 0x28
    2d38:	cmp	r4, r3
    2d3a:	bne.n	2d8c <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x114>
    2d3c:	ldr	r0, [r0, #16]
    2d3e:	cbz	r0, 2d6a <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0xf2>
    2d40:	ldr	r2, [r0, #0]
    2d42:	ldr	r4, [r2, #40]	; 0x28
    2d44:	cmp	r4, r3
    2d46:	bne.n	2d8c <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x114>
    2d48:	ldr	r0, [r0, #16]
    2d4a:	cbz	r0, 2d6a <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0xf2>
    2d4c:	ldr	r2, [r0, #0]
    2d4e:	ldr	r4, [r2, #40]	; 0x28
    2d50:	cmp	r4, r3
    2d52:	bne.n	2d8c <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x114>
    2d54:	ldr	r0, [r0, #16]
    2d56:	cbz	r0, 2d6a <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0xf2>
    2d58:	ldr	r3, [r0, #0]
    2d5a:	mov	r2, r9
    2d5c:	mov	r1, r8
    2d5e:	ldr	r3, [r3, #40]	; 0x28
    2d60:	b.n	2d84 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x10c>
    2d62:	ldr	r5, [r0, #40]	; 0x28
    2d64:	ldr	r3, [pc, #108]	; (2dd4 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x15c>)
    2d66:	cmp	r5, r3
    2d68:	bne.n	2d7c <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x104>
    mtp_lock_storage(true);
    file_.seek(pos);
    file_.read(out,bytes);
    mtp_lock_storage(false);
  }
    2d6a:	add	sp, #8
    2d6c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2d70:	ldr	r5, [r0, #40]	; 0x28
    2d72:	ldr	r3, [pc, #96]	; (2dd4 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x15c>)
    2d74:	cmp	r5, r3
    2d76:	bne.n	2d7c <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x104>
    2d78:	mov	r0, r1
    2d7a:	b.n	2d1c <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0xa4>
    2d7c:	mov	r2, r9
    2d7e:	mov	r1, r8
    2d80:	mov	r0, r4
    2d82:	mov	r3, r5
    2d84:	add	sp, #8
    2d86:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2d8a:	bx	r3
    2d8c:	mov	r2, r9
    2d8e:	mov	r1, r8
    2d90:	mov	r3, r4
    2d92:	add	sp, #8
    2d94:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2d98:	bx	r3
	}
	virtual bool truncate(uint64_t size=0) {
		return (f) ? f->truncate(size) : false;
	}
	virtual bool seek(uint64_t pos, int mode) {
		return (f) ? f->seek(pos, mode) : false;
    2d9a:	str	r3, [sp, #0]
    2d9c:	mov	r2, r7
    2d9e:	mov	r0, r4
    2da0:	blx	r6
    2da2:	b.n	2d06 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x8e>
    2da4:	str	r3, [sp, #0]
    2da6:	mov	r2, r7
    2da8:	mov	r0, r1
    2daa:	blx	sl
    2dac:	b.n	2d06 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x8e>
    2dae:	str	r3, [sp, #0]
    2db0:	mov	r2, r7
    2db2:	mov	r0, lr
    2db4:	blx	r6
    2db6:	b.n	2d06 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x8e>
    2db8:	str	r3, [sp, #0]
    2dba:	mov	r2, r7
    2dbc:	mov	r0, lr
    2dbe:	blx	sl
    2dc0:	b.n	2d06 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x8e>
    2dc2:	movs	r3, #0
    2dc4:	mov	r2, r7
    2dc6:	mov	r0, lr
    2dc8:	str	r3, [sp, #0]
    2dca:	blx	r6
    2dcc:	b.n	2d06 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x8e>
    2dce:	nop
    2dd0:	.word	0x000000d9
    2dd4:	.word	0x0000008d

00002dd8 <MTPStorage_SD::Create(unsigned long, unsigned long, bool, char const*)>:
    }
    return 1;
  }

  uint32_t MTPStorage_SD::Create(uint32_t store, uint32_t parent,  bool folder, const char* filename)
  {
    2dd8:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    uint32_t ret;
    if (parent == 0xFFFFFFFFUL) parent = store;
    2ddc:	cmp.w	r2, #4294967295
    2de0:	ite	ne
    2de2:	movne	r6, r2
    2de4:	moveq	r6, r1
    }
    return 1;
  }

  uint32_t MTPStorage_SD::Create(uint32_t store, uint32_t parent,  bool folder, const char* filename)
  {
    2de6:	sub.w	sp, sp, #800	; 0x320
    2dea:	mov	r4, r0
    2dec:	mov	r7, r1
    uint32_t ret;
    if (parent == 0xFFFFFFFFUL) parent = store;
    Record p = ReadIndexRecord(parent);
    2dee:	mov	r2, r6
    2df0:	mov	r1, r0
    2df2:	add	r0, sp, #256	; 0x100
    }
    return 1;
  }

  uint32_t MTPStorage_SD::Create(uint32_t store, uint32_t parent,  bool folder, const char* filename)
  {
    2df4:	mov	r8, r3
    uint32_t ret;
    if (parent == 0xFFFFFFFFUL) parent = store;
    Record p = ReadIndexRecord(parent);
    2df6:	bl	2298 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    Record r;
    strlcpy(r.name, filename,MAX_FILENAME_LEN);
    2dfa:	ldr	r1, [sp, #824]	; 0x338
    2dfc:	mov.w	r2, #256	; 0x100
    2e00:	add	r0, sp, #544	; 0x220
    2e02:	bl	11200 <strlcpy>
    index_.write((char*)&r, sizeof(r));
    mtp_lock_storage(false);
  }

  uint32_t MTPStorage_SD::AppendIndexRecord(const Record& r) 
  { uint32_t new_record = index_entries_++;
    2e06:	ldr.w	r5, [r4, #244]	; 0xf4
    Record r;
    strlcpy(r.name, filename,MAX_FILENAME_LEN);
    r.store = p.store;
    r.parent = parent;
    r.child = 0;
    r.sibling = p.child;
    2e0a:	ldr	r0, [sp, #260]	; 0x104
    Record p = ReadIndexRecord(parent);
    Record r;
    strlcpy(r.name, filename,MAX_FILENAME_LEN);
    r.store = p.store;
    r.parent = parent;
    r.child = 0;
    2e0c:	movs	r2, #0
    index_.write((char*)&r, sizeof(r));
    mtp_lock_storage(false);
  }

  uint32_t MTPStorage_SD::AppendIndexRecord(const Record& r) 
  { uint32_t new_record = index_entries_++;
    2e0e:	adds	r3, r5, #1
    uint32_t ret;
    if (parent == 0xFFFFFFFFUL) parent = store;
    Record p = ReadIndexRecord(parent);
    Record r;
    strlcpy(r.name, filename,MAX_FILENAME_LEN);
    r.store = p.store;
    2e10:	ldrh.w	lr, [sp, #270]	; 0x10e
    mtp_lock_storage(false);
  }

  uint32_t MTPStorage_SD::AppendIndexRecord(const Record& r) 
  { uint32_t new_record = index_entries_++;
    WriteIndexRecord(new_record, r);
    2e14:	mov	r1, r5
    Record p = ReadIndexRecord(parent);
    Record r;
    strlcpy(r.name, filename,MAX_FILENAME_LEN);
    r.store = p.store;
    r.parent = parent;
    r.child = 0;
    2e16:	str	r2, [sp, #532]	; 0x214
    index_.write((char*)&r, sizeof(r));
    mtp_lock_storage(false);
  }

  uint32_t MTPStorage_SD::AppendIndexRecord(const Record& r) 
  { uint32_t new_record = index_entries_++;
    2e18:	str.w	r3, [r4, #244]	; 0xf4
    r.parent = parent;
    r.child = 0;
    r.sibling = p.child;
    r.isdir = folder;
    // New folder is empty, scanned = true.
    r.scanned = 1;
    2e1c:	movs	r3, #1
    mtp_lock_storage(false);
  }

  uint32_t MTPStorage_SD::AppendIndexRecord(const Record& r) 
  { uint32_t new_record = index_entries_++;
    WriteIndexRecord(new_record, r);
    2e1e:	add	r2, sp, #528	; 0x210
    Record r;
    strlcpy(r.name, filename,MAX_FILENAME_LEN);
    r.store = p.store;
    r.parent = parent;
    r.child = 0;
    r.sibling = p.child;
    2e20:	str	r0, [sp, #536]	; 0x218
    mtp_lock_storage(false);
  }

  uint32_t MTPStorage_SD::AppendIndexRecord(const Record& r) 
  { uint32_t new_record = index_entries_++;
    WriteIndexRecord(new_record, r);
    2e22:	mov	r0, r4
    if (parent == 0xFFFFFFFFUL) parent = store;
    Record p = ReadIndexRecord(parent);
    Record r;
    strlcpy(r.name, filename,MAX_FILENAME_LEN);
    r.store = p.store;
    r.parent = parent;
    2e24:	str	r6, [sp, #528]	; 0x210
    r.child = 0;
    r.sibling = p.child;
    r.isdir = folder;
    2e26:	strb.w	r8, [sp, #540]	; 0x21c
    uint32_t ret;
    if (parent == 0xFFFFFFFFUL) parent = store;
    Record p = ReadIndexRecord(parent);
    Record r;
    strlcpy(r.name, filename,MAX_FILENAME_LEN);
    r.store = p.store;
    2e2a:	strh.w	lr, [sp, #542]	; 0x21e
    r.parent = parent;
    r.child = 0;
    r.sibling = p.child;
    r.isdir = folder;
    // New folder is empty, scanned = true.
    r.scanned = 1;
    2e2e:	strb.w	r3, [sp, #541]	; 0x21d
    mtp_lock_storage(false);
  }

  uint32_t MTPStorage_SD::AppendIndexRecord(const Record& r) 
  { uint32_t new_record = index_entries_++;
    WriteIndexRecord(new_record, r);
    2e32:	bl	20c8 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    r.sibling = p.child;
    r.isdir = folder;
    // New folder is empty, scanned = true.
    r.scanned = 1;
    ret = p.child = AppendIndexRecord(r);
    WriteIndexRecord(parent, p);
    2e36:	mov	r1, r6
    2e38:	add	r2, sp, #256	; 0x100
    2e3a:	mov	r0, r4
    r.child = 0;
    r.sibling = p.child;
    r.isdir = folder;
    // New folder is empty, scanned = true.
    r.scanned = 1;
    ret = p.child = AppendIndexRecord(r);
    2e3c:	str	r5, [sp, #260]	; 0x104
    WriteIndexRecord(parent, p);
    2e3e:	bl	20c8 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    if (folder) 
    2e42:	cmp.w	r8, #0
    2e46:	bne.n	2e5c <MTPStorage_SD::Create(unsigned long, unsigned long, bool, char const*)+0x84>
      sd_mkdir(store,filename);
      mtp_lock_storage(false);
    } 
    else 
    {
      OpenFileByIndex(ret, FILE_WRITE_BEGIN);
    2e48:	mov	r0, r4
    2e4a:	movs	r2, #2
    2e4c:	mov	r1, r5
    2e4e:	bl	280c <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)>
      Serial.print(store); Serial.print(" "); 
      Serial.print(parent); Serial.print(" "); 
      Serial.println(filename);
    #endif
    return ret;
  }
    2e52:	mov	r0, r5
    2e54:	add.w	sp, sp, #800	; 0x320
    2e58:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = p.child = AppendIndexRecord(r);
    WriteIndexRecord(parent, p);
    if (folder) 
    {
      char filename[MAX_FILENAME_LEN];
      ConstructFilename(ret, filename, MAX_FILENAME_LEN);
    2e5c:	mov	r0, r4
    bool sd_mkdir(uint32_t store, char *filename) {  return sdx[store]->mkdir(filename);  }
    2e5e:	add.w	r4, r4, r7, lsl #2
    2e62:	mov	r1, r5
    2e64:	mov	r2, sp
    2e66:	mov.w	r3, #256	; 0x100
    2e6a:	bl	26f8 <MTPStorage_SD::ConstructFilename(int, char*, int)>
    2e6e:	ldr	r0, [r4, #88]	; 0x58
    2e70:	mov	r1, sp
    2e72:	ldr	r3, [r0, #0]
    2e74:	ldr	r3, [r3, #8]
    2e76:	blx	r3
      Serial.print(store); Serial.print(" "); 
      Serial.print(parent); Serial.print(" "); 
      Serial.println(filename);
    #endif
    return ret;
  }
    2e78:	mov	r0, r5
    2e7a:	add.w	sp, sp, #800	; 0x320
    2e7e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2e82:	nop

00002e84 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)>:
      AppendIndexRecord(r);
    }
  }

  void MTPStorage_SD::ScanDir(uint32_t store, uint32_t i) 
  { if (i == 0xFFFFFFFFUL) i = store;
    2e84:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2e88:	cmp.w	r2, #4294967295
    2e8c:	ite	ne
    2e8e:	movne	r5, r2
    2e90:	moveq	r5, r1
    2e92:	sub.w	sp, sp, #564	; 0x234
    
    Record record = ReadIndexRecord(i);
    2e96:	mov	r1, r0
      AppendIndexRecord(r);
    }
  }

  void MTPStorage_SD::ScanDir(uint32_t store, uint32_t i) 
  { if (i == 0xFFFFFFFFUL) i = store;
    2e98:	mov	r4, r0
    
    Record record = ReadIndexRecord(i);
    2e9a:	mov	r2, r5
    2e9c:	add	r0, sp, #16
    2e9e:	bl	2298 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    if (record.isdir && !record.scanned) {
    2ea2:	ldrb.w	r3, [sp, #28]
    2ea6:	cbz	r3, 2eae <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x2a>
    2ea8:	ldrb.w	r2, [sp, #29]
    2eac:	cbz	r2, 2eb6 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x32>
      }
      record.scanned = true;
      record.child = sibling;
      WriteIndexRecord(i, record);
    }
  }
    2eae:	add.w	sp, sp, #564	; 0x234
    2eb2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  void MTPStorage_SD::ScanDir(uint32_t store, uint32_t i) 
  { if (i == 0xFFFFFFFFUL) i = store;
    
    Record record = ReadIndexRecord(i);
    if (record.isdir && !record.scanned) {
      OpenFileByIndex(i);
    2eb6:	mov	r0, r4
    2eb8:	mov	r1, r5
    2eba:	bl	280c <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)>
	}
	virtual void close() {
		if (f) f->close();
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
    2ebe:	ldr.w	r0, [r4, #204]	; 0xcc
    2ec2:	cmp	r0, #0
    2ec4:	beq.n	2eae <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x2a>
    2ec6:	ldr	r3, [r0, #0]
    2ec8:	ldr	r7, [pc, #200]	; (2f94 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x110>)
    2eca:	ldr	r3, [r3, #68]	; 0x44
    2ecc:	cmp	r3, r7
    2ece:	bne.n	2f8e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x10a>
    2ed0:	ldr	r0, [r0, #16]
    2ed2:	cmp	r0, #0
    2ed4:	beq.n	2eae <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x2a>
    2ed6:	ldr	r3, [r0, #0]
    2ed8:	ldr	r3, [r3, #68]	; 0x44
    2eda:	cmp	r3, r7
    2edc:	bne.n	2f8e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x10a>
    2ede:	ldr	r0, [r0, #16]
    2ee0:	cmp	r0, #0
    2ee2:	beq.n	2eae <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x2a>
    2ee4:	ldr	r3, [r0, #0]
    2ee6:	ldr	r3, [r3, #68]	; 0x44
    2ee8:	cmp	r3, r7
    2eea:	bne.n	2f8e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x10a>
    2eec:	ldr	r0, [r0, #16]
    2eee:	cmp	r0, #0
    2ef0:	beq.n	2eae <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x2a>
    2ef2:	ldr	r3, [r0, #0]
    2ef4:	ldr	r3, [r3, #68]	; 0x44
    2ef6:	cmp	r3, r7
    2ef8:	bne.n	2f8e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x10a>
    2efa:	ldr	r0, [r0, #16]
    2efc:	cmp	r0, #0
    2efe:	beq.n	2eae <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x2a>
    2f00:	ldr	r3, [r0, #0]
    2f02:	ldr	r3, [r3, #68]	; 0x44
    2f04:	cmp	r3, r7
    2f06:	bne.n	2f8e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x10a>
    2f08:	ldr	r0, [r0, #16]
    2f0a:	cmp	r0, #0
    2f0c:	beq.n	2eae <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x2a>
    2f0e:	ldr	r3, [r0, #0]
    2f10:	ldr	r3, [r3, #68]	; 0x44
    2f12:	blx	r3
      if (!sd_isOpen(file_)) return;
    2f14:	cmp	r0, #0
    2f16:	beq.n	2eae <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x2a>
			//"File(File *file) constructor only accepts pointers "
			//"to derived classes, not File itself");
		f = file;
		if (f) f->refcount++;
	}
	File(const File &file) {
    2f18:	ldr.w	r9, [pc, #124]	; 2f98 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x114>
    2f1c:	mov.w	r8, #0
    2f20:	ldr.w	fp, [pc, #120]	; 2f9c <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x118>
	}
	virtual bool isDirectory() {
		return (f) ? f->isDirectory() : false;
	}
	virtual File openNextFile(uint8_t mode=0) {
		return (f) ? f->openNextFile(mode) : *this;
    2f24:	ldr.w	r1, [r4, #204]	; 0xcc
    2f28:	cmp	r1, #0
    2f2a:	beq.n	2fa0 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x11c>
    2f2c:	ldr	r3, [r1, #0]
    2f2e:	ldr	r3, [r3, #80]	; 0x50
    2f30:	cmp	r3, fp
    2f32:	bne.w	3452 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5ce>
    2f36:	ldr	r1, [r1, #16]
    2f38:	cmp	r1, #0
    2f3a:	beq.n	2fa0 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x11c>
    2f3c:	ldr	r3, [r1, #0]
    2f3e:	ldr	r3, [r3, #80]	; 0x50
    2f40:	cmp	r3, fp
    2f42:	bne.w	3452 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5ce>
    2f46:	ldr	r1, [r1, #16]
    2f48:	cbz	r1, 2fa0 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x11c>
    2f4a:	ldr	r3, [r1, #0]
    2f4c:	ldr	r3, [r3, #80]	; 0x50
    2f4e:	cmp	r3, fp
    2f50:	bne.w	3452 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5ce>
    2f54:	ldr	r1, [r1, #16]
    2f56:	cbz	r1, 2fa0 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x11c>
    2f58:	ldr	r3, [r1, #0]
    2f5a:	ldr	r3, [r3, #80]	; 0x50
    2f5c:	cmp	r3, fp
    2f5e:	bne.w	3452 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5ce>
    2f62:	ldr	r1, [r1, #16]
    2f64:	cbz	r1, 2fa0 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x11c>
    2f66:	ldr	r3, [r1, #0]
    2f68:	ldr	r3, [r3, #80]	; 0x50
    2f6a:	cmp	r3, fp
    2f6c:	bne.w	3452 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5ce>
    2f70:	ldr	r1, [r1, #16]
    2f72:	cbz	r1, 2fa0 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x11c>
    2f74:	ldr	r3, [r1, #0]
    2f76:	ldr	r3, [r3, #80]	; 0x50
    2f78:	cmp	r3, fp
    2f7a:	bne.w	3452 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5ce>
    2f7e:	ldr	r1, [r1, #16]
    2f80:	cbz	r1, 2fa0 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x11c>
    2f82:	ldr	r3, [r1, #0]
    2f84:	movs	r2, #0
    2f86:	add	r0, sp, #288	; 0x120
    2f88:	ldr	r3, [r3, #80]	; 0x50
    2f8a:	blx	r3
    2f8c:	b.n	2fb6 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x132>
	}
	virtual void close() {
		if (f) f->close();
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
    2f8e:	blx	r3
    2f90:	b.n	2f14 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x90>
    2f92:	nop
    2f94:	.word	0x0000011d
    2f98:	.word	0x20000074
    2f9c:	.word	0x00000149
class __FlashStringHelper;

class Print
{
  public:
	constexpr Print() : write_error(0) {}
    2fa0:	movs	r3, #0
    2fa2:	mov.w	r2, #1000	; 0x3e8
			//"File(File *file) constructor only accepts pointers "
			//"to derived classes, not File itself");
		f = file;
		if (f) f->refcount++;
	}
	File(const File &file) {
    2fa6:	str.w	r9, [sp, #288]	; 0x120
    2faa:	strb.w	r3, [sp, #292]	; 0x124
    2fae:	strb.w	r3, [sp, #300]	; 0x12c
		//Serial.println("File copy constructor");
		//static int copycount=0;
		//if (++copycount > 20) while (1) ;
		f = file.f;
    2fb2:	str	r3, [sp, #304]	; 0x130
    2fb4:	str	r2, [sp, #296]	; 0x128
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    2fb6:	ldr.w	r2, [r4, #224]	; 0xe0
    2fba:	cmp	r2, #0
    2fbc:	beq.n	3052 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x1ce>
    2fbe:	ldr	r3, [r2, #16]
    2fc0:	subs	r3, #1
    2fc2:	str	r3, [r2, #16]
    2fc4:	cmp	r3, #0
    2fc6:	bne.n	3052 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x1ce>
    2fc8:	ldr.w	r6, [r4, #224]	; 0xe0
    2fcc:	cmp	r6, #0
    2fce:	beq.n	3052 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x1ce>
    2fd0:	ldr	r3, [r6, #0]
    2fd2:	ldr	r0, [pc, #636]	; (3250 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3cc>)
    2fd4:	ldr	r3, [r3, #32]
    2fd6:	cmp	r3, r0
    2fd8:	bne.w	3474 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5f0>
    2fdc:	ldr	r2, [r6, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    2fde:	str.w	r9, [r6]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    2fe2:	cbz	r2, 304a <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x1c6>
    2fe4:	ldr	r3, [r2, #16]
    2fe6:	subs	r3, #1
    2fe8:	str	r3, [r2, #16]
    2fea:	cbnz	r3, 304a <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x1c6>
    2fec:	ldr.w	sl, [r6, #16]
    2ff0:	cmp.w	sl, #0
    2ff4:	beq.n	304a <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x1c6>
    2ff6:	ldr.w	r3, [sl]
    2ffa:	ldr	r3, [r3, #32]
    2ffc:	cmp	r3, r0
    2ffe:	bne.w	3642 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x7be>
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    3002:	ldr	r3, [pc, #592]	; (3254 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3d0>)
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    3004:	ldr.w	r2, [sl, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    3008:	str.w	r3, [sl]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    300c:	cbz	r2, 3042 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x1be>
    300e:	ldr	r3, [r2, #16]
    3010:	subs	r3, #1
    3012:	str	r3, [r2, #16]
    3014:	cbnz	r3, 3042 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x1be>
    3016:	ldr.w	r3, [sl, #16]
    301a:	cbz	r3, 3042 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x1be>
    301c:	ldr	r2, [r3, #0]
    301e:	ldr	r2, [r2, #32]
    3020:	cmp	r2, r0
    3022:	bne.w	3654 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x7d0>
    3026:	ldr	r1, [r3, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    3028:	str.w	r9, [r3]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    302c:	cbz	r1, 303a <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x1b6>
    302e:	ldr	r2, [r1, #16]
    3030:	subs	r2, #1
    3032:	str	r2, [r1, #16]
    3034:	cmp	r2, #0
    3036:	beq.w	348c <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x608>
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
		invalidate();
	}
    303a:	mov	r0, r3
    303c:	movs	r1, #20
    303e:	bl	1006c <operator delete(void*, unsigned int)>
    3042:	mov	r0, sl
    3044:	movs	r1, #20
    3046:	bl	1006c <operator delete(void*, unsigned int)>
    304a:	mov	r0, r6
    304c:	movs	r1, #20
    304e:	bl	1006c <operator delete(void*, unsigned int)>
	File& operator = (const File &file) {
		//Serial.println("File assignment");
		//static int assigncount=0;
		//if (++assigncount > 20) while (1) ;
		invalidate();
		f = file.f;
    3052:	ldr	r3, [sp, #304]	; 0x130
    3054:	str.w	r3, [r4, #224]	; 0xe0
		if (f) f->refcount++;
    3058:	cmp	r3, #0
    305a:	beq.n	30fe <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x27a>
    305c:	ldr	r2, [r3, #16]
    305e:	adds	r2, #1
    3060:	str	r2, [r3, #16]
    3062:	ldr	r2, [sp, #304]	; 0x130
		return *this;
	}
	virtual ~File() {
    3064:	str.w	r9, [sp, #288]	; 0x120
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    3068:	cmp	r2, #0
    306a:	beq.n	30fe <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x27a>
    306c:	ldr	r3, [r2, #16]
    306e:	subs	r3, #1
    3070:	str	r3, [r2, #16]
    3072:	cmp	r3, #0
    3074:	bne.n	30fe <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x27a>
    3076:	ldr	r6, [sp, #304]	; 0x130
    3078:	cmp	r6, #0
    307a:	beq.n	30fe <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x27a>
    307c:	ldr	r3, [r6, #0]
    307e:	ldr	r0, [pc, #464]	; (3250 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3cc>)
    3080:	ldr	r3, [r3, #32]
    3082:	cmp	r3, r0
    3084:	bne.w	346e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5ea>
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    3088:	ldr	r3, [pc, #456]	; (3254 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3d0>)
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    308a:	ldr	r2, [r6, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    308c:	str	r3, [r6, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    308e:	cbz	r2, 30f6 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x272>
    3090:	ldr	r3, [r2, #16]
    3092:	subs	r3, #1
    3094:	str	r3, [r2, #16]
    3096:	cbnz	r3, 30f6 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x272>
    3098:	ldr.w	sl, [r6, #16]
    309c:	cmp.w	sl, #0
    30a0:	beq.n	30f6 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x272>
    30a2:	ldr.w	r3, [sl]
    30a6:	ldr	r3, [r3, #32]
    30a8:	cmp	r3, r0
    30aa:	bne.w	3648 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x7c4>
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    30ae:	ldr	r3, [pc, #420]	; (3254 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3d0>)
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    30b0:	ldr.w	r2, [sl, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    30b4:	str.w	r3, [sl]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    30b8:	cbz	r2, 30ee <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x26a>
    30ba:	ldr	r3, [r2, #16]
    30bc:	subs	r3, #1
    30be:	str	r3, [r2, #16]
    30c0:	cbnz	r3, 30ee <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x26a>
    30c2:	ldr.w	r3, [sl, #16]
    30c6:	cbz	r3, 30ee <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x26a>
    30c8:	ldr	r2, [r3, #0]
    30ca:	ldr	r2, [r2, #32]
    30cc:	cmp	r2, r0
    30ce:	bne.w	364e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x7ca>
    30d2:	ldr	r1, [r3, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    30d4:	str.w	r9, [r3]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    30d8:	cbz	r1, 30e6 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x262>
    30da:	ldr	r2, [r1, #16]
    30dc:	subs	r2, #1
    30de:	str	r2, [r1, #16]
    30e0:	cmp	r2, #0
    30e2:	beq.w	356a <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x6e6>
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
		invalidate();
	}
    30e6:	mov	r0, r3
    30e8:	movs	r1, #20
    30ea:	bl	1006c <operator delete(void*, unsigned int)>
    30ee:	mov	r0, sl
    30f0:	movs	r1, #20
    30f2:	bl	1006c <operator delete(void*, unsigned int)>
    30f6:	mov	r0, r6
    30f8:	movs	r1, #20
    30fa:	bl	1006c <operator delete(void*, unsigned int)>
	}
	virtual void close() {
		if (f) f->close();
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
    30fe:	ldr.w	r0, [r4, #224]	; 0xe0
    3102:	cmp	r0, #0
    3104:	beq.w	3230 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3ac>
    3108:	ldr	r3, [r0, #0]
    310a:	ldr	r3, [r3, #68]	; 0x44
    310c:	cmp	r3, r7
    310e:	bne.w	324c <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3c8>
    3112:	ldr	r0, [r0, #16]
    3114:	cmp	r0, #0
    3116:	beq.w	3230 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3ac>
    311a:	ldr	r3, [r0, #0]
    311c:	ldr	r3, [r3, #68]	; 0x44
    311e:	cmp	r3, r7
    3120:	bne.w	324c <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3c8>
    3124:	ldr	r0, [r0, #16]
    3126:	cmp	r0, #0
    3128:	beq.w	3230 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3ac>
    312c:	ldr	r3, [r0, #0]
    312e:	ldr	r3, [r3, #68]	; 0x44
    3130:	cmp	r3, r7
    3132:	bne.w	324c <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3c8>
    3136:	ldr	r0, [r0, #16]
    3138:	cmp	r0, #0
    313a:	beq.n	3230 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3ac>
    313c:	ldr	r3, [r0, #0]
    313e:	ldr	r3, [r3, #68]	; 0x44
    3140:	cmp	r3, r7
    3142:	bne.w	324c <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3c8>
    3146:	ldr	r0, [r0, #16]
    3148:	cmp	r0, #0
    314a:	beq.n	3230 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3ac>
    314c:	ldr	r3, [r0, #0]
    314e:	ldr	r3, [r3, #68]	; 0x44
    3150:	cmp	r3, r7
    3152:	bne.n	324c <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3c8>
    3154:	ldr	r0, [r0, #16]
    3156:	cmp	r0, #0
    3158:	beq.n	3230 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3ac>
    315a:	ldr	r3, [r0, #0]
    315c:	ldr	r3, [r3, #68]	; 0x44
    315e:	cmp	r3, r7
    3160:	bne.n	324c <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3c8>
    3162:	ldr	r0, [r0, #16]
    3164:	cmp	r0, #0
    3166:	beq.n	3230 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3ac>
    3168:	ldr	r3, [r0, #0]
    316a:	ldr	r3, [r3, #68]	; 0x44
    316c:	cmp	r3, r7
    316e:	bne.n	324c <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3c8>
    3170:	ldr	r0, [r0, #16]
    3172:	cmp	r0, #0
    3174:	beq.n	3230 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3ac>
    3176:	ldr	r3, [r0, #0]
    3178:	ldr	r3, [r3, #68]	; 0x44
    317a:	cmp	r3, r7
    317c:	bne.n	324c <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3c8>
    317e:	ldr	r0, [r0, #16]
    3180:	cmp	r0, #0
    3182:	beq.n	3230 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3ac>
    3184:	ldr	r3, [r0, #0]
    3186:	ldr	r3, [r3, #68]	; 0x44
    3188:	blx	r3
      int sibling = 0;
      while (true) 
      { mtp_lock_storage(true);
        child_=file_.openNextFile();
        mtp_lock_storage(false);
        if(!sd_isOpen(child_)) break;
    318a:	cmp	r0, #0
    318c:	beq.n	3230 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3ac>

        Record r;
        r.store = record.store;
    318e:	ldrh.w	r2, [sp, #30]
	}
	virtual const char* name() {
		return (f) ? f->name() : "";
	}
	virtual bool isDirectory() {
		return (f) ? f->isDirectory() : false;
    3192:	ldr.w	r3, [r4, #224]	; 0xe0
        r.parent = i;
    3196:	str	r5, [sp, #288]	; 0x120
        r.sibling = sibling;
    3198:	str.w	r8, [sp, #296]	; 0x128
        child_=file_.openNextFile();
        mtp_lock_storage(false);
        if(!sd_isOpen(child_)) break;

        Record r;
        r.store = record.store;
    319c:	strh.w	r2, [sp, #302]	; 0x12e
    31a0:	cmp	r3, #0
    31a2:	beq.w	33c6 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x542>
    31a6:	ldr	r1, [r3, #0]
    31a8:	ldr	r2, [pc, #172]	; (3258 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3d4>)
    31aa:	ldr	r1, [r1, #76]	; 0x4c
    31ac:	cmp	r1, r2
    31ae:	bne.n	325c <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3d8>
    31b0:	ldr	r0, [r3, #16]
    31b2:	cmp	r0, #0
    31b4:	beq.w	33c6 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x542>
    31b8:	ldr	r1, [r0, #0]
    31ba:	ldr	r1, [r1, #76]	; 0x4c
    31bc:	cmp	r1, r2
    31be:	bne.n	325e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3da>
    31c0:	ldr	r0, [r0, #16]
    31c2:	cmp	r0, #0
    31c4:	beq.w	33c6 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x542>
    31c8:	ldr	r1, [r0, #0]
    31ca:	ldr	r1, [r1, #76]	; 0x4c
    31cc:	cmp	r1, r2
    31ce:	bne.n	325e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3da>
    31d0:	ldr	r0, [r0, #16]
    31d2:	cmp	r0, #0
    31d4:	beq.w	33c6 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x542>
    31d8:	ldr	r1, [r0, #0]
    31da:	ldr	r1, [r1, #76]	; 0x4c
    31dc:	cmp	r1, r2
    31de:	bne.n	325e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3da>
    31e0:	ldr	r0, [r0, #16]
    31e2:	cmp	r0, #0
    31e4:	beq.w	33c6 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x542>
    31e8:	ldr	r1, [r0, #0]
    31ea:	ldr	r1, [r1, #76]	; 0x4c
    31ec:	cmp	r1, r2
    31ee:	bne.n	325e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3da>
    31f0:	ldr	r0, [r0, #16]
    31f2:	cmp	r0, #0
    31f4:	beq.w	33c6 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x542>
    31f8:	ldr	r1, [r0, #0]
    31fa:	ldr	r1, [r1, #76]	; 0x4c
    31fc:	cmp	r1, r2
    31fe:	bne.n	325e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3da>
    3200:	ldr	r0, [r0, #16]
    3202:	cmp	r0, #0
    3204:	beq.w	33c6 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x542>
    3208:	ldr	r1, [r0, #0]
    320a:	ldr	r1, [r1, #76]	; 0x4c
    320c:	cmp	r1, r2
    320e:	bne.n	325e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3da>
    3210:	ldr	r0, [r0, #16]
    3212:	cmp	r0, #0
    3214:	beq.w	33c6 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x542>
    3218:	ldr	r1, [r0, #0]
    321a:	ldr	r1, [r1, #76]	; 0x4c
    321c:	cmp	r1, r2
    321e:	bne.n	325e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3da>
    3220:	ldr	r0, [r0, #16]
    3222:	cmp	r0, #0
    3224:	beq.w	33c6 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x542>
    3228:	ldr	r3, [r0, #0]
    322a:	ldr	r3, [r3, #76]	; 0x4c
    322c:	blx	r3
    322e:	b.n	3260 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3dc>
        r.scanned = false;
        sd_getName(child_,r.name, MAX_FILENAME_LEN);
        sibling = AppendIndexRecord(r);
        child_.close();
      }
      record.scanned = true;
    3230:	movs	r3, #1
      record.child = sibling;
      WriteIndexRecord(i, record);
    3232:	mov	r1, r5
    3234:	mov	r0, r4
    3236:	add	r2, sp, #16
        sd_getName(child_,r.name, MAX_FILENAME_LEN);
        sibling = AppendIndexRecord(r);
        child_.close();
      }
      record.scanned = true;
      record.child = sibling;
    3238:	str.w	r8, [sp, #20]
        r.scanned = false;
        sd_getName(child_,r.name, MAX_FILENAME_LEN);
        sibling = AppendIndexRecord(r);
        child_.close();
      }
      record.scanned = true;
    323c:	strb.w	r3, [sp, #29]
      record.child = sibling;
      WriteIndexRecord(i, record);
    3240:	bl	20c8 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    }
  }
    3244:	add.w	sp, sp, #564	; 0x234
    3248:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	}
	virtual void close() {
		if (f) f->close();
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
    324c:	blx	r3
    324e:	b.n	318a <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x306>
    3250:	.word	0x00000b4d
    3254:	.word	0x20000074
    3258:	.word	0x0000013d
	}
	virtual const char* name() {
		return (f) ? f->name() : "";
	}
	virtual bool isDirectory() {
		return (f) ? f->isDirectory() : false;
    325c:	mov	r0, r3
    325e:	blx	r1

        Record r;
        r.store = record.store;
        r.parent = i;
        r.sibling = sibling;
        r.isdir = child_.isDirectory();
    3260:	strb.w	r0, [sp, #300]	; 0x12c
    3264:	ldr.w	r3, [r4, #224]	; 0xe0
        r.child = r.isdir ? 0 : (uint32_t) child_.size();
    3268:	cmp	r0, #0
    326a:	beq.w	33cc <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x548>
    326e:	movs	r0, #0
        r.scanned = false;
    3270:	movs	r2, #0
        Record r;
        r.store = record.store;
        r.parent = i;
        r.sibling = sibling;
        r.isdir = child_.isDirectory();
        r.child = r.isdir ? 0 : (uint32_t) child_.size();
    3272:	str	r0, [sp, #292]	; 0x124
        r.scanned = false;
    3274:	strb.w	r2, [sp, #301]	; 0x12d
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
	}
	virtual const char* name() {
		return (f) ? f->name() : "";
    3278:	cmp	r3, #0
    327a:	beq.w	344e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5ca>
    327e:	ldr	r1, [r3, #0]
    3280:	ldr	r2, [pc, #504]	; (347c <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5f8>)
    3282:	ldr	r1, [r1, #72]	; 0x48
    3284:	cmp	r1, r2
    3286:	bne.w	3446 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5c2>
    328a:	ldr	r0, [r3, #16]
    328c:	cmp	r0, #0
    328e:	beq.w	344e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5ca>
    3292:	ldr	r3, [r0, #0]
    3294:	ldr	r3, [r3, #72]	; 0x48
    3296:	cmp	r3, r2
    3298:	bne.n	330c <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x488>
    329a:	ldr	r0, [r0, #16]
    329c:	cmp	r0, #0
    329e:	beq.w	344e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5ca>
    32a2:	ldr	r3, [r0, #0]
    32a4:	ldr	r3, [r3, #72]	; 0x48
    32a6:	cmp	r3, r2
    32a8:	bne.n	330c <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x488>
    32aa:	ldr	r0, [r0, #16]
    32ac:	cmp	r0, #0
    32ae:	beq.w	344e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5ca>
    32b2:	ldr	r3, [r0, #0]
    32b4:	ldr	r3, [r3, #72]	; 0x48
    32b6:	cmp	r3, r2
    32b8:	bne.n	330c <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x488>
    32ba:	ldr	r0, [r0, #16]
    32bc:	cmp	r0, #0
    32be:	beq.w	344e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5ca>
    32c2:	ldr	r3, [r0, #0]
    32c4:	ldr	r3, [r3, #72]	; 0x48
    32c6:	cmp	r3, r2
    32c8:	bne.n	330c <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x488>
    32ca:	ldr	r0, [r0, #16]
    32cc:	cmp	r0, #0
    32ce:	beq.w	344e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5ca>
    32d2:	ldr	r3, [r0, #0]
    32d4:	ldr	r3, [r3, #72]	; 0x48
    32d6:	cmp	r3, r2
    32d8:	bne.n	330c <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x488>
    32da:	ldr	r0, [r0, #16]
    32dc:	cmp	r0, #0
    32de:	beq.w	344e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5ca>
    32e2:	ldr	r3, [r0, #0]
    32e4:	ldr	r3, [r3, #72]	; 0x48
    32e6:	cmp	r3, r2
    32e8:	bne.n	330c <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x488>
    32ea:	ldr	r0, [r0, #16]
    32ec:	cmp	r0, #0
    32ee:	beq.w	344e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5ca>
    32f2:	ldr	r3, [r0, #0]
    32f4:	ldr	r3, [r3, #72]	; 0x48
    32f6:	cmp	r3, r2
    32f8:	bne.n	330c <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x488>
    32fa:	ldr	r0, [r0, #16]
    32fc:	cmp	r0, #0
    32fe:	beq.w	344e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5ca>
    3302:	ldr	r3, [r0, #0]
    3304:	ldr	r3, [r3, #72]	; 0x48
    3306:	blx	r3
    3308:	mov	r1, r0
    330a:	b.n	3310 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x48c>
    330c:	blx	r3
    330e:	mov	r1, r0
        sd_getName(child_,r.name, MAX_FILENAME_LEN);
    3310:	mov.w	r2, #256	; 0x100
    3314:	add	r0, sp, #304	; 0x130
    3316:	bl	11200 <strlcpy>
    index_.write((char*)&r, sizeof(r));
    mtp_lock_storage(false);
  }

  uint32_t MTPStorage_SD::AppendIndexRecord(const Record& r) 
  { uint32_t new_record = index_entries_++;
    331a:	ldr.w	r1, [r4, #244]	; 0xf4
    WriteIndexRecord(new_record, r);
    331e:	mov	r0, r4
    3320:	add	r2, sp, #288	; 0x120
    index_.write((char*)&r, sizeof(r));
    mtp_lock_storage(false);
  }

  uint32_t MTPStorage_SD::AppendIndexRecord(const Record& r) 
  { uint32_t new_record = index_entries_++;
    3322:	adds	r3, r1, #1
        r.sibling = sibling;
        r.isdir = child_.isDirectory();
        r.child = r.isdir ? 0 : (uint32_t) child_.size();
        r.scanned = false;
        sd_getName(child_,r.name, MAX_FILENAME_LEN);
        sibling = AppendIndexRecord(r);
    3324:	mov	r8, r1
    index_.write((char*)&r, sizeof(r));
    mtp_lock_storage(false);
  }

  uint32_t MTPStorage_SD::AppendIndexRecord(const Record& r) 
  { uint32_t new_record = index_entries_++;
    3326:	str.w	r3, [r4, #244]	; 0xf4
    WriteIndexRecord(new_record, r);
    332a:	bl	20c8 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
	}
	virtual uint64_t size() {
		return (f) ? f->size() : 0;
	}
	virtual void close() {
		if (f) f->close();
    332e:	ldr.w	r0, [r4, #224]	; 0xe0
    3332:	cmp	r0, #0
    3334:	beq.w	2f24 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0xa0>
    3338:	ldr	r2, [r0, #0]
    333a:	ldr	r3, [pc, #324]	; (3480 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5fc>)
    333c:	ldr	r2, [r2, #64]	; 0x40
    333e:	cmp	r2, r3
    3340:	bne.n	33c2 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x53e>
    3342:	ldr	r0, [r0, #16]
    3344:	cmp	r0, #0
    3346:	beq.w	2f24 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0xa0>
    334a:	ldr	r2, [r0, #0]
    334c:	ldr	r2, [r2, #64]	; 0x40
    334e:	cmp	r2, r3
    3350:	bne.n	33c2 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x53e>
    3352:	ldr	r0, [r0, #16]
    3354:	cmp	r0, #0
    3356:	beq.w	2f24 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0xa0>
    335a:	ldr	r2, [r0, #0]
    335c:	ldr	r2, [r2, #64]	; 0x40
    335e:	cmp	r2, r3
    3360:	bne.n	33c2 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x53e>
    3362:	ldr	r0, [r0, #16]
    3364:	cmp	r0, #0
    3366:	beq.w	2f24 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0xa0>
    336a:	ldr	r2, [r0, #0]
    336c:	ldr	r2, [r2, #64]	; 0x40
    336e:	cmp	r2, r3
    3370:	bne.n	33c2 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x53e>
    3372:	ldr	r0, [r0, #16]
    3374:	cmp	r0, #0
    3376:	beq.w	2f24 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0xa0>
    337a:	ldr	r2, [r0, #0]
    337c:	ldr	r2, [r2, #64]	; 0x40
    337e:	cmp	r2, r3
    3380:	bne.n	33c2 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x53e>
    3382:	ldr	r0, [r0, #16]
    3384:	cmp	r0, #0
    3386:	beq.w	2f24 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0xa0>
    338a:	ldr	r2, [r0, #0]
    338c:	ldr	r2, [r2, #64]	; 0x40
    338e:	cmp	r2, r3
    3390:	bne.n	33c2 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x53e>
    3392:	ldr	r0, [r0, #16]
    3394:	cmp	r0, #0
    3396:	beq.w	2f24 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0xa0>
    339a:	ldr	r2, [r0, #0]
    339c:	ldr	r2, [r2, #64]	; 0x40
    339e:	cmp	r2, r3
    33a0:	bne.n	33c2 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x53e>
    33a2:	ldr	r0, [r0, #16]
    33a4:	cmp	r0, #0
    33a6:	beq.w	2f24 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0xa0>
    33aa:	ldr	r2, [r0, #0]
    33ac:	ldr	r2, [r2, #64]	; 0x40
    33ae:	cmp	r2, r3
    33b0:	bne.n	33c2 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x53e>
    33b2:	ldr	r0, [r0, #16]
    33b4:	cmp	r0, #0
    33b6:	beq.w	2f24 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0xa0>
    33ba:	ldr	r3, [r0, #0]
    33bc:	ldr	r3, [r3, #64]	; 0x40
    33be:	blx	r3
    33c0:	b.n	2f24 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0xa0>
    33c2:	blx	r2
    if (record.isdir && !record.scanned) {
      OpenFileByIndex(i);
      if (!sd_isOpen(file_)) return;
    
      int sibling = 0;
      while (true) 
    33c4:	b.n	2f24 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0xa0>

        Record r;
        r.store = record.store;
        r.parent = i;
        r.sibling = sibling;
        r.isdir = child_.isDirectory();
    33c6:	movs	r2, #0
    33c8:	strb.w	r2, [sp, #300]	; 0x12c
	}
	virtual uint64_t position() {
		return (f) ? f->position() : 0;
	}
	virtual uint64_t size() {
		return (f) ? f->size() : 0;
    33cc:	cmp	r3, #0
    33ce:	beq.n	3464 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5e0>
    33d0:	ldr	r1, [r3, #0]
    33d2:	ldr	r2, [pc, #176]	; (3484 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x600>)
    33d4:	ldr	r1, [r1, #60]	; 0x3c
    33d6:	cmp	r1, r2
    33d8:	bne.n	345a <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5d6>
    33da:	ldr	r0, [r3, #16]
    33dc:	cbz	r0, 3432 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5ae>
    33de:	ldr	r1, [r0, #0]
    33e0:	ldr	r1, [r1, #60]	; 0x3c
    33e2:	cmp	r1, r2
    33e4:	bne.n	345c <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5d8>
    33e6:	ldr	r0, [r0, #16]
    33e8:	cbz	r0, 3432 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5ae>
    33ea:	ldr	r1, [r0, #0]
    33ec:	ldr	r1, [r1, #60]	; 0x3c
    33ee:	cmp	r1, r2
    33f0:	bne.n	345c <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5d8>
    33f2:	ldr	r0, [r0, #16]
    33f4:	cbz	r0, 3432 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5ae>
    33f6:	ldr	r1, [r0, #0]
    33f8:	ldr	r1, [r1, #60]	; 0x3c
    33fa:	cmp	r1, r2
    33fc:	bne.n	345c <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5d8>
    33fe:	ldr	r0, [r0, #16]
    3400:	cbz	r0, 3432 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5ae>
    3402:	ldr	r1, [r0, #0]
    3404:	ldr	r1, [r1, #60]	; 0x3c
    3406:	cmp	r1, r2
    3408:	bne.n	345c <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5d8>
    340a:	ldr	r0, [r0, #16]
    340c:	cbz	r0, 3432 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5ae>
    340e:	ldr	r1, [r0, #0]
    3410:	ldr	r1, [r1, #60]	; 0x3c
    3412:	cmp	r1, r2
    3414:	bne.n	345c <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5d8>
    3416:	ldr	r0, [r0, #16]
    3418:	cbz	r0, 3432 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5ae>
    341a:	ldr	r1, [r0, #0]
    341c:	ldr	r1, [r1, #60]	; 0x3c
    341e:	cmp	r1, r2
    3420:	bne.n	345c <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5d8>
    3422:	ldr	r0, [r0, #16]
    3424:	cbz	r0, 3432 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5ae>
    3426:	ldr	r3, [r0, #0]
    3428:	ldr	r3, [r3, #60]	; 0x3c
    342a:	blx	r3
    342c:	ldr.w	r3, [r4, #224]	; 0xe0
    3430:	b.n	3270 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3ec>
        r.child = r.isdir ? 0 : (uint32_t) child_.size();
    3432:	movs	r2, #0
        r.scanned = false;
    3434:	strb.w	r2, [sp, #301]	; 0x12d
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
	}
	virtual const char* name() {
		return (f) ? f->name() : "";
    3438:	ldr	r1, [r3, #0]
        Record r;
        r.store = record.store;
        r.parent = i;
        r.sibling = sibling;
        r.isdir = child_.isDirectory();
        r.child = r.isdir ? 0 : (uint32_t) child_.size();
    343a:	str	r2, [sp, #292]	; 0x124
    343c:	ldr	r1, [r1, #72]	; 0x48
    343e:	ldr	r2, [pc, #60]	; (347c <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5f8>)
    3440:	cmp	r1, r2
    3442:	beq.w	328a <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x406>
    3446:	mov	r0, r3
    3448:	blx	r1
    344a:	mov	r1, r0
    344c:	b.n	3310 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x48c>
    344e:	ldr	r1, [pc, #56]	; (3488 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x604>)
    3450:	b.n	3310 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x48c>
	}
	virtual bool isDirectory() {
		return (f) ? f->isDirectory() : false;
	}
	virtual File openNextFile(uint8_t mode=0) {
		return (f) ? f->openNextFile(mode) : *this;
    3452:	movs	r2, #0
    3454:	add	r0, sp, #288	; 0x120
    3456:	blx	r3
    3458:	b.n	2fb6 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x132>
	}
	virtual uint64_t position() {
		return (f) ? f->position() : 0;
	}
	virtual uint64_t size() {
		return (f) ? f->size() : 0;
    345a:	mov	r0, r3
    345c:	blx	r1
    345e:	ldr.w	r3, [r4, #224]	; 0xe0
    3462:	b.n	3270 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3ec>
    3464:	str	r3, [sp, #292]	; 0x124
        r.scanned = false;
    3466:	strb.w	r3, [sp, #301]	; 0x12d
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
	}
	virtual const char* name() {
		return (f) ? f->name() : "";
    346a:	ldr	r1, [pc, #28]	; (3488 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x604>)
    346c:	b.n	3310 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x48c>
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    346e:	mov	r0, r6
    3470:	blx	r3
    3472:	b.n	30fe <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x27a>
    3474:	mov	r0, r6
    3476:	blx	r3
    3478:	b.n	3052 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x1ce>
    347a:	nop
    347c:	.word	0x00000129
    3480:	.word	0x00000111
    3484:	.word	0x00000101
    3488:	.word	0x20000228
    348c:	ldr	r2, [r3, #16]
    348e:	cmp	r2, #0
    3490:	beq.w	303a <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x1b6>
    3494:	ldr	r1, [r2, #0]
    3496:	ldr	r1, [r1, #32]
    3498:	cmp	r1, r0
    349a:	bne.w	3664 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x7e0>
    349e:	ldr.w	lr, [r2, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    34a2:	str.w	r9, [r2]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    34a6:	cmp.w	lr, #0
    34aa:	beq.n	355c <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x6d8>
    34ac:	ldr.w	r1, [lr, #16]
    34b0:	subs	r1, #1
    34b2:	str.w	r1, [lr, #16]
    34b6:	cmp	r1, #0
    34b8:	bne.n	355c <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x6d8>
    34ba:	ldr	r1, [r2, #16]
    34bc:	str	r1, [sp, #0]
    34be:	cmp	r1, #0
    34c0:	beq.n	355c <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x6d8>
    34c2:	ldr	r1, [sp, #0]
    34c4:	ldr	r1, [r1, #0]
    34c6:	ldr	r1, [r1, #32]
    34c8:	cmp	r1, r0
    34ca:	bne.w	367c <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x7f8>
    34ce:	ldr	r1, [sp, #0]
    34d0:	ldr.w	lr, [r1, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    34d4:	str.w	r9, [r1]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    34d8:	cmp.w	lr, #0
    34dc:	beq.n	354c <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x6c8>
    34de:	ldr.w	r1, [lr, #16]
    34e2:	subs	r1, #1
    34e4:	str.w	r1, [lr, #16]
    34e8:	cbnz	r1, 354c <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x6c8>
    34ea:	ldr	r1, [sp, #0]
    34ec:	ldr.w	ip, [r1, #16]
    34f0:	cmp.w	ip, #0
    34f4:	beq.n	354c <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x6c8>
    34f6:	ldr.w	r1, [ip]
    34fa:	ldr	r1, [r1, #32]
    34fc:	cmp	r1, r0
    34fe:	bne.w	3698 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x814>
    3502:	ldr.w	r0, [ip, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    3506:	str.w	r9, [ip]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    350a:	cbz	r0, 353c <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x6b8>
    350c:	ldr	r1, [r0, #16]
    350e:	add.w	lr, r1, #4294967295
    3512:	str.w	lr, [r0, #16]
    3516:	cmp.w	lr, #0
    351a:	bne.n	353c <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x6b8>
    351c:	ldr.w	r0, [ip, #16]
    3520:	cbz	r0, 353c <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x6b8>
    3522:	ldr.w	lr, [r0]
    3526:	str.w	ip, [sp, #12]
    352a:	str	r2, [sp, #8]
    352c:	str	r3, [sp, #4]
    352e:	ldr.w	r3, [lr, #32]
    3532:	blx	r3
    3534:	ldr.w	ip, [sp, #12]
    3538:	ldr	r2, [sp, #8]
    353a:	ldr	r3, [sp, #4]
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
		invalidate();
	}
    353c:	mov	r0, ip
    353e:	movs	r1, #20
    3540:	str	r2, [sp, #8]
    3542:	str	r3, [sp, #4]
    3544:	bl	1006c <operator delete(void*, unsigned int)>
    3548:	ldr	r3, [sp, #4]
    354a:	ldr	r2, [sp, #8]
    354c:	ldr	r0, [sp, #0]
    354e:	movs	r1, #20
    3550:	str	r2, [sp, #8]
    3552:	str	r3, [sp, #4]
    3554:	bl	1006c <operator delete(void*, unsigned int)>
    3558:	ldr	r3, [sp, #4]
    355a:	ldr	r2, [sp, #8]
    355c:	mov	r0, r2
    355e:	movs	r1, #20
    3560:	str	r3, [sp, #0]
    3562:	bl	1006c <operator delete(void*, unsigned int)>
    3566:	ldr	r3, [sp, #0]
    3568:	b.n	303a <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x1b6>
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    356a:	ldr	r2, [r3, #16]
    356c:	cmp	r2, #0
    356e:	beq.w	30e6 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x262>
    3572:	ldr	r1, [r2, #0]
    3574:	ldr	r1, [r1, #32]
    3576:	cmp	r1, r0
    3578:	bne.n	365a <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x7d6>
    357a:	ldr.w	lr, [r2, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    357e:	str.w	r9, [r2]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    3582:	cmp.w	lr, #0
    3586:	beq.n	3634 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x7b0>
    3588:	ldr.w	r1, [lr, #16]
    358c:	subs	r1, #1
    358e:	str.w	r1, [lr, #16]
    3592:	cmp	r1, #0
    3594:	bne.n	3634 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x7b0>
    3596:	ldr	r1, [r2, #16]
    3598:	str	r1, [sp, #0]
    359a:	cmp	r1, #0
    359c:	beq.n	3634 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x7b0>
    359e:	ldr	r1, [sp, #0]
    35a0:	ldr	r1, [r1, #0]
    35a2:	ldr	r1, [r1, #32]
    35a4:	cmp	r1, r0
    35a6:	bne.n	366e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x7ea>
    35a8:	ldr	r1, [sp, #0]
    35aa:	ldr.w	lr, [r1, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    35ae:	str.w	r9, [r1]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    35b2:	cmp.w	lr, #0
    35b6:	beq.n	3624 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x7a0>
    35b8:	ldr.w	r1, [lr, #16]
    35bc:	subs	r1, #1
    35be:	str.w	r1, [lr, #16]
    35c2:	cbnz	r1, 3624 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x7a0>
    35c4:	ldr	r1, [sp, #0]
    35c6:	ldr.w	ip, [r1, #16]
    35ca:	cmp.w	ip, #0
    35ce:	beq.n	3624 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x7a0>
    35d0:	ldr.w	r1, [ip]
    35d4:	ldr	r1, [r1, #32]
    35d6:	cmp	r1, r0
    35d8:	bne.n	368a <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x806>
    35da:	ldr.w	r0, [ip, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    35de:	str.w	r9, [ip]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    35e2:	cbz	r0, 3614 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x790>
    35e4:	ldr	r1, [r0, #16]
    35e6:	add.w	lr, r1, #4294967295
    35ea:	str.w	lr, [r0, #16]
    35ee:	cmp.w	lr, #0
    35f2:	bne.n	3614 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x790>
    35f4:	ldr.w	r0, [ip, #16]
    35f8:	cbz	r0, 3614 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x790>
    35fa:	ldr.w	lr, [r0]
    35fe:	str.w	ip, [sp, #12]
    3602:	str	r2, [sp, #8]
    3604:	str	r3, [sp, #4]
    3606:	ldr.w	r3, [lr, #32]
    360a:	blx	r3
    360c:	ldr.w	ip, [sp, #12]
    3610:	ldr	r2, [sp, #8]
    3612:	ldr	r3, [sp, #4]
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
		invalidate();
	}
    3614:	mov	r0, ip
    3616:	movs	r1, #20
    3618:	str	r2, [sp, #8]
    361a:	str	r3, [sp, #4]
    361c:	bl	1006c <operator delete(void*, unsigned int)>
    3620:	ldr	r3, [sp, #4]
    3622:	ldr	r2, [sp, #8]
    3624:	ldr	r0, [sp, #0]
    3626:	movs	r1, #20
    3628:	str	r2, [sp, #8]
    362a:	str	r3, [sp, #4]
    362c:	bl	1006c <operator delete(void*, unsigned int)>
    3630:	ldr	r3, [sp, #4]
    3632:	ldr	r2, [sp, #8]
    3634:	mov	r0, r2
    3636:	movs	r1, #20
    3638:	str	r3, [sp, #0]
    363a:	bl	1006c <operator delete(void*, unsigned int)>
    363e:	ldr	r3, [sp, #0]
    3640:	b.n	30e6 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x262>
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    3642:	mov	r0, sl
    3644:	blx	r3
    3646:	b.n	304a <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x1c6>
    3648:	mov	r0, sl
    364a:	blx	r3
    364c:	b.n	30f6 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x272>
    364e:	mov	r0, r3
    3650:	blx	r2
    3652:	b.n	30ee <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x26a>
    3654:	mov	r0, r3
    3656:	blx	r2
    3658:	b.n	3042 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x1be>
    365a:	str	r3, [sp, #0]
    365c:	mov	r0, r2
    365e:	blx	r1
    3660:	ldr	r3, [sp, #0]
    3662:	b.n	30e6 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x262>
    3664:	str	r3, [sp, #0]
    3666:	mov	r0, r2
    3668:	blx	r1
    366a:	ldr	r3, [sp, #0]
    366c:	b.n	303a <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x1b6>
    366e:	str	r2, [sp, #8]
    3670:	str	r3, [sp, #4]
    3672:	ldr	r0, [sp, #0]
    3674:	blx	r1
    3676:	ldr	r2, [sp, #8]
    3678:	ldr	r3, [sp, #4]
    367a:	b.n	3634 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x7b0>
    367c:	str	r2, [sp, #8]
    367e:	str	r3, [sp, #4]
    3680:	ldr	r0, [sp, #0]
    3682:	blx	r1
    3684:	ldr	r2, [sp, #8]
    3686:	ldr	r3, [sp, #4]
    3688:	b.n	355c <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x6d8>
    368a:	str	r2, [sp, #8]
    368c:	mov	r0, ip
    368e:	str	r3, [sp, #4]
    3690:	blx	r1
    3692:	ldr	r2, [sp, #8]
    3694:	ldr	r3, [sp, #4]
    3696:	b.n	3624 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x7a0>
    3698:	str	r2, [sp, #8]
    369a:	mov	r0, ip
    369c:	str	r3, [sp, #4]
    369e:	blx	r1
    36a0:	ldr	r2, [sp, #8]
    36a2:	ldr	r3, [sp, #4]
    36a4:	b.n	354c <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x6c8>
    36a6:	nop

000036a8 <MTPStorage_SD::ScanAll(unsigned long) [clone .part.7] [clone .constprop.12]>:
    }
  }

  void MTPStorage_SD::ScanAll(uint32_t store) 
  { if (all_scanned_) return;
    all_scanned_ = true;
    36a8:	movs	r2, #1

  // MTP object handles should not change or be re-used during a session.
  // This would be easy if we could just have a list of all files in memory.
  // Since our RAM is limited, we'll keep the index in a file instead.
  void MTPStorage_SD::GenerateIndex(uint32_t store)
  { if (index_generated) return; 
    36aa:	ldrb.w	r3, [r0, #248]	; 0xf8
      record.child = sibling;
      WriteIndexRecord(i, record);
    }
  }

  void MTPStorage_SD::ScanAll(uint32_t store) 
    36ae:	push	{r4, r5, r6, lr}
    36b0:	mov	r5, r0
    36b2:	mov	r6, r1
  { if (all_scanned_) return;
    all_scanned_ = true;
    36b4:	strb.w	r2, [r0, #249]	; 0xf9

  // MTP object handles should not change or be re-used during a session.
  // This would be easy if we could just have a list of all files in memory.
  // Since our RAM is limited, we'll keep the index in a file instead.
  void MTPStorage_SD::GenerateIndex(uint32_t store)
  { if (index_generated) return; 
    36b8:	cbz	r3, 36d8 <MTPStorage_SD::ScanAll(unsigned long) [clone .part.7] [clone .constprop.12]+0x30>
  void MTPStorage_SD::ScanAll(uint32_t store) 
  { if (all_scanned_) return;
    all_scanned_ = true;

    GenerateIndex(store);
    for (uint32_t i = 0; i < index_entries_; i++)  ScanDir(store,i);
    36ba:	ldr.w	r3, [r5, #244]	; 0xf4
    36be:	cbz	r3, 36d6 <MTPStorage_SD::ScanAll(unsigned long) [clone .part.7] [clone .constprop.12]+0x2e>
    36c0:	movs	r4, #0
    36c2:	mov	r2, r4
    36c4:	mov	r1, r6
    36c6:	mov	r0, r5
    36c8:	adds	r4, #1
    36ca:	bl	2e84 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)>
    36ce:	ldr.w	r3, [r5, #244]	; 0xf4
    36d2:	cmp	r3, r4
    36d4:	bhi.n	36c2 <MTPStorage_SD::ScanAll(unsigned long) [clone .part.7] [clone .constprop.12]+0x1a>
    36d6:	pop	{r4, r5, r6, pc}
    36d8:	bl	2214 <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.6] [clone .constprop.14]>
    36dc:	b.n	36ba <MTPStorage_SD::ScanAll(unsigned long) [clone .part.7] [clone .constprop.12]+0x12>
    36de:	nop

000036e0 <MTPStorage_SD::StartGetObjectHandles(unsigned long, unsigned long) [clone .part.8] [clone .constprop.13]>:
  }

  void MTPStorage_SD::StartGetObjectHandles(uint32_t store, uint32_t parent) 
    36e0:	push	{r4, r5, lr}
  { 
    GenerateIndex(store);
    if (parent) 
    { if (parent == 0xFFFFFFFFUL) parent = store; // As per initizalization
    36e2:	cmp.w	r2, #4294967295
    36e6:	ite	ne
    36e8:	movne	r5, r2
    36ea:	moveq	r5, r1

    GenerateIndex(store);
    for (uint32_t i = 0; i < index_entries_; i++)  ScanDir(store,i);
  }

  void MTPStorage_SD::StartGetObjectHandles(uint32_t store, uint32_t parent) 
    36ec:	sub	sp, #276	; 0x114
    36ee:	mov	r4, r0
  { 
    GenerateIndex(store);
    if (parent) 
    { if (parent == 0xFFFFFFFFUL) parent = store; // As per initizalization

      ScanDir(store, parent);
    36f0:	mov	r2, r5
    36f2:	bl	2e84 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)>
      follow_sibling_ = true;
    36f6:	movs	r3, #1
      // Root folder?
      next_ = ReadIndexRecord(parent).child;
    36f8:	mov	r2, r5
    36fa:	mov	r1, r4
    GenerateIndex(store);
    if (parent) 
    { if (parent == 0xFFFFFFFFUL) parent = store; // As per initizalization

      ScanDir(store, parent);
      follow_sibling_ = true;
    36fc:	strb.w	r3, [r4, #256]	; 0x100
      // Root folder?
      next_ = ReadIndexRecord(parent).child;
    3700:	mov	r0, sp
    3702:	bl	2298 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    3706:	ldr	r3, [sp, #4]
    3708:	str.w	r3, [r4, #252]	; 0xfc
    { 
      ScanAll(store);
      follow_sibling_ = false;
      next_ = 1;
    }
  }
    370c:	add	sp, #276	; 0x114
    370e:	pop	{r4, r5, pc}

00003710 <MTPStorage_SD::StartGetObjectHandles(unsigned long, unsigned long)>:

  // MTP object handles should not change or be re-used during a session.
  // This would be easy if we could just have a list of all files in memory.
  // Since our RAM is limited, we'll keep the index in a file instead.
  void MTPStorage_SD::GenerateIndex(uint32_t store)
  { if (index_generated) return; 
    3710:	ldrb.w	r3, [r0, #248]	; 0xf8
    GenerateIndex(store);
    for (uint32_t i = 0; i < index_entries_; i++)  ScanDir(store,i);
  }

  void MTPStorage_SD::StartGetObjectHandles(uint32_t store, uint32_t parent) 
  { 
    3714:	push	{r4, lr}
    3716:	mov	r4, r0
    3718:	sub	sp, #8

  // MTP object handles should not change or be re-used during a session.
  // This would be easy if we could just have a list of all files in memory.
  // Since our RAM is limited, we'll keep the index in a file instead.
  void MTPStorage_SD::GenerateIndex(uint32_t store)
  { if (index_generated) return; 
    371a:	cbz	r3, 3740 <MTPStorage_SD::StartGetObjectHandles(unsigned long, unsigned long)+0x30>
  }

  void MTPStorage_SD::StartGetObjectHandles(uint32_t store, uint32_t parent) 
  { 
    GenerateIndex(store);
    if (parent) 
    371c:	cbz	r2, 372a <MTPStorage_SD::StartGetObjectHandles(unsigned long, unsigned long)+0x1a>
    371e:	mov	r0, r4
    { 
      ScanAll(store);
      follow_sibling_ = false;
      next_ = 1;
    }
  }
    3720:	add	sp, #8
    3722:	ldmia.w	sp!, {r4, lr}
    3726:	b.w	36e0 <MTPStorage_SD::StartGetObjectHandles(unsigned long, unsigned long) [clone .part.8] [clone .constprop.13]>
      WriteIndexRecord(i, record);
    }
  }

  void MTPStorage_SD::ScanAll(uint32_t store) 
  { if (all_scanned_) return;
    372a:	ldrb.w	r3, [r4, #249]	; 0xf9
    372e:	cbz	r3, 374e <MTPStorage_SD::StartGetObjectHandles(unsigned long, unsigned long)+0x3e>
      next_ = ReadIndexRecord(parent).child;
    } 
    else 
    { 
      ScanAll(store);
      follow_sibling_ = false;
    3730:	movs	r2, #0
      next_ = 1;
    3732:	movs	r3, #1
      next_ = ReadIndexRecord(parent).child;
    } 
    else 
    { 
      ScanAll(store);
      follow_sibling_ = false;
    3734:	strb.w	r2, [r4, #256]	; 0x100
      next_ = 1;
    3738:	str.w	r3, [r4, #252]	; 0xfc
    }
  }
    373c:	add	sp, #8
    373e:	pop	{r4, pc}
    3740:	stmia.w	sp, {r1, r2}
    3744:	bl	2214 <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.6] [clone .constprop.14]>
    3748:	ldmia.w	sp, {r1, r2}
    374c:	b.n	371c <MTPStorage_SD::StartGetObjectHandles(unsigned long, unsigned long)+0xc>
    374e:	mov	r0, r4
    3750:	bl	36a8 <MTPStorage_SD::ScanAll(unsigned long) [clone .part.7] [clone .constprop.12]>
    3754:	b.n	3730 <MTPStorage_SD::StartGetObjectHandles(unsigned long, unsigned long)+0x20>
    3756:	nop

00003758 <MTPStorage_SD::removeFile(unsigned long, char*)>:
    file_.read(out,bytes);
    mtp_lock_storage(false);
  }

void MTPStorage_SD::removeFile(uint32_t store, char *file)
{ 
    3758:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    375c:	add.w	r9, r0, r1, lsl #2
    3760:	sub	sp, #340	; 0x154
    }

    uint32_t sd_getFSCount(void) {return fsCount;}
    const char *sd_getFSName(uint32_t store) { return sd_name[store];}

    File sd_open(uint32_t store, const char *filename, uint32_t mode) { return sdx[store]->open(filename,mode);  }
    3762:	movs	r3, #0
    3764:	str	r1, [sp, #12]
    3766:	ldr.w	r1, [r9, #88]	; 0x58
    376a:	str	r0, [sp, #8]
    376c:	add	r0, sp, #40	; 0x28
    376e:	ldr	r4, [r1, #0]
    3770:	str	r2, [sp, #4]
    3772:	ldr	r4, [r4, #0]
    3774:	blx	r4
	}
	virtual const char* name() {
		return (f) ? f->name() : "";
	}
	virtual bool isDirectory() {
		return (f) ? f->isDirectory() : false;
    3776:	ldr	r0, [sp, #56]	; 0x38
    3778:	cmp	r0, #0
    377a:	beq.w	3b24 <MTPStorage_SD::removeFile(unsigned long, char*)+0x3cc>
    377e:	ldr	r3, [r0, #0]
    3780:	ldr.w	sl, [pc, #868]	; 3ae8 <MTPStorage_SD::removeFile(unsigned long, char*)+0x390>
    3784:	ldr	r3, [r3, #76]	; 0x4c
    3786:	cmp	r3, sl
    3788:	bne.w	3c88 <MTPStorage_SD::removeFile(unsigned long, char*)+0x530>
    378c:	ldr	r0, [r0, #16]
    378e:	cmp	r0, #0
    3790:	beq.w	3b24 <MTPStorage_SD::removeFile(unsigned long, char*)+0x3cc>
    3794:	ldr	r3, [r0, #0]
    3796:	ldr	r3, [r3, #76]	; 0x4c
    3798:	cmp	r3, sl
    379a:	bne.w	3c88 <MTPStorage_SD::removeFile(unsigned long, char*)+0x530>
    379e:	ldr	r0, [r0, #16]
    37a0:	cmp	r0, #0
    37a2:	beq.w	3b24 <MTPStorage_SD::removeFile(unsigned long, char*)+0x3cc>
    37a6:	ldr	r3, [r0, #0]
    37a8:	ldr	r3, [r3, #76]	; 0x4c
    37aa:	cmp	r3, sl
    37ac:	bne.w	3c88 <MTPStorage_SD::removeFile(unsigned long, char*)+0x530>
    37b0:	ldr	r0, [r0, #16]
    37b2:	cmp	r0, #0
    37b4:	beq.w	3b24 <MTPStorage_SD::removeFile(unsigned long, char*)+0x3cc>
    37b8:	ldr	r3, [r0, #0]
    37ba:	ldr	r3, [r3, #76]	; 0x4c
    37bc:	cmp	r3, sl
    37be:	bne.w	3c88 <MTPStorage_SD::removeFile(unsigned long, char*)+0x530>
    37c2:	ldr	r0, [r0, #16]
    37c4:	cmp	r0, #0
    37c6:	beq.w	3b24 <MTPStorage_SD::removeFile(unsigned long, char*)+0x3cc>
    37ca:	ldr	r3, [r0, #0]
    37cc:	ldr	r3, [r3, #76]	; 0x4c
    37ce:	cmp	r3, sl
    37d0:	bne.w	3c88 <MTPStorage_SD::removeFile(unsigned long, char*)+0x530>
    37d4:	ldr	r0, [r0, #16]
    37d6:	cmp	r0, #0
    37d8:	beq.w	3b24 <MTPStorage_SD::removeFile(unsigned long, char*)+0x3cc>
    37dc:	ldr	r3, [r0, #0]
    37de:	ldr	r3, [r3, #76]	; 0x4c
    37e0:	cmp	r3, sl
    37e2:	bne.w	3c88 <MTPStorage_SD::removeFile(unsigned long, char*)+0x530>
    37e6:	ldr	r0, [r0, #16]
    37e8:	cmp	r0, #0
    37ea:	beq.w	3b24 <MTPStorage_SD::removeFile(unsigned long, char*)+0x3cc>
    37ee:	ldr	r3, [r0, #0]
    37f0:	ldr	r3, [r3, #76]	; 0x4c
    37f2:	cmp	r3, sl
    37f4:	bne.w	3c88 <MTPStorage_SD::removeFile(unsigned long, char*)+0x530>
    37f8:	ldr	r0, [r0, #16]
    37fa:	cmp	r0, #0
    37fc:	beq.w	3b24 <MTPStorage_SD::removeFile(unsigned long, char*)+0x3cc>
    3800:	ldr	r3, [r0, #0]
    3802:	ldr	r3, [r3, #76]	; 0x4c
    3804:	cmp	r3, sl
    3806:	bne.w	3c88 <MTPStorage_SD::removeFile(unsigned long, char*)+0x530>
    380a:	ldr	r0, [r0, #16]
    380c:	cmp	r0, #0
    380e:	beq.w	3b24 <MTPStorage_SD::removeFile(unsigned long, char*)+0x3cc>
    3812:	ldr	r3, [r0, #0]
    3814:	ldr	r3, [r3, #76]	; 0x4c
    3816:	blx	r3
  char tname[MAX_FILENAME_LEN];
  File f1=sd_open(store,file,0);
  if(f1.isDirectory())
    3818:	cmp	r0, #0
    381a:	beq.w	3b24 <MTPStorage_SD::removeFile(unsigned long, char*)+0x3cc>
    381e:	ldr.w	fp, [pc, #700]	; 3adc <MTPStorage_SD::removeFile(unsigned long, char*)+0x384>
    3822:	movs	r4, #0
    3824:	ldr.w	r8, [pc, #708]	; 3aec <MTPStorage_SD::removeFile(unsigned long, char*)+0x394>
    3828:	mov	r7, fp
	}
	virtual File openNextFile(uint8_t mode=0) {
		return (f) ? f->openNextFile(mode) : *this;
    382a:	ldr	r1, [sp, #56]	; 0x38
    382c:	cmp	r1, #0
    382e:	beq.w	3b0e <MTPStorage_SD::removeFile(unsigned long, char*)+0x3b6>
    3832:	ldr	r3, [r1, #0]
    3834:	ldr	r2, [pc, #668]	; (3ad4 <MTPStorage_SD::removeFile(unsigned long, char*)+0x37c>)
    3836:	ldr	r3, [r3, #80]	; 0x50
    3838:	cmp	r3, r2
    383a:	bne.w	3c8c <MTPStorage_SD::removeFile(unsigned long, char*)+0x534>
    383e:	ldr	r1, [r1, #16]
    3840:	cmp	r1, #0
    3842:	beq.w	3b0e <MTPStorage_SD::removeFile(unsigned long, char*)+0x3b6>
    3846:	ldr	r3, [r1, #0]
    3848:	ldr	r3, [r3, #80]	; 0x50
    384a:	cmp	r3, r2
    384c:	bne.w	3c8c <MTPStorage_SD::removeFile(unsigned long, char*)+0x534>
    3850:	ldr	r1, [r1, #16]
    3852:	cmp	r1, #0
    3854:	beq.w	3b0e <MTPStorage_SD::removeFile(unsigned long, char*)+0x3b6>
    3858:	ldr	r3, [r1, #0]
    385a:	ldr	r3, [r3, #80]	; 0x50
    385c:	cmp	r3, r2
    385e:	bne.w	3c8c <MTPStorage_SD::removeFile(unsigned long, char*)+0x534>
    3862:	ldr	r1, [r1, #16]
    3864:	cmp	r1, #0
    3866:	beq.w	3b0e <MTPStorage_SD::removeFile(unsigned long, char*)+0x3b6>
    386a:	ldr	r3, [r1, #0]
    386c:	ldr	r3, [r3, #80]	; 0x50
    386e:	cmp	r3, r2
    3870:	bne.w	3c8c <MTPStorage_SD::removeFile(unsigned long, char*)+0x534>
    3874:	ldr	r1, [r1, #16]
    3876:	cmp	r1, #0
    3878:	beq.w	3b0e <MTPStorage_SD::removeFile(unsigned long, char*)+0x3b6>
    387c:	ldr	r3, [r1, #0]
    387e:	ldr	r3, [r3, #80]	; 0x50
    3880:	cmp	r3, r2
    3882:	bne.w	3c8c <MTPStorage_SD::removeFile(unsigned long, char*)+0x534>
    3886:	ldr	r1, [r1, #16]
    3888:	cmp	r1, #0
    388a:	beq.w	3b0e <MTPStorage_SD::removeFile(unsigned long, char*)+0x3b6>
    388e:	ldr	r3, [r1, #0]
    3890:	ldr	r3, [r3, #80]	; 0x50
    3892:	cmp	r3, r2
    3894:	bne.w	3c8c <MTPStorage_SD::removeFile(unsigned long, char*)+0x534>
    3898:	ldr	r1, [r1, #16]
    389a:	cmp	r1, #0
    389c:	beq.w	3b0e <MTPStorage_SD::removeFile(unsigned long, char*)+0x3b6>
    38a0:	ldr	r3, [r1, #0]
    38a2:	movs	r2, #0
    38a4:	add	r0, sp, #60	; 0x3c
    38a6:	ldr	r3, [r3, #80]	; 0x50
    38a8:	blx	r3
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    38aa:	cbz	r4, 38c8 <MTPStorage_SD::removeFile(unsigned long, char*)+0x170>
    38ac:	ldr	r3, [r4, #16]
    38ae:	subs	r3, #1
    38b0:	str	r3, [r4, #16]
    38b2:	cbnz	r3, 38c8 <MTPStorage_SD::removeFile(unsigned long, char*)+0x170>
    38b4:	ldr	r3, [r4, #0]
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
		invalidate();
	}
    38b6:	mov	r0, r4
    38b8:	ldr	r2, [pc, #540]	; (3ad8 <MTPStorage_SD::removeFile(unsigned long, char*)+0x380>)
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    38ba:	ldr	r3, [r3, #32]
    38bc:	cmp	r3, r2
    38be:	bne.w	3e7c <MTPStorage_SD::removeFile(unsigned long, char*)+0x724>
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
		invalidate();
	}
    38c2:	movs	r1, #20
    38c4:	bl	1006c <operator delete(void*, unsigned int)>
	File& operator = (const File &file) {
		//Serial.println("File assignment");
		//static int assigncount=0;
		//if (++assigncount > 20) while (1) ;
		invalidate();
		f = file.f;
    38c8:	ldr	r4, [sp, #76]	; 0x4c
		if (f) f->refcount++;
    38ca:	cmp	r4, #0
    38cc:	beq.w	3e48 <MTPStorage_SD::removeFile(unsigned long, char*)+0x6f0>
    38d0:	ldr	r3, [r4, #16]
	}
	virtual void close() {
		if (f) f->close();
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
    38d2:	ldr	r2, [r4, #0]
		//Serial.println("File assignment");
		//static int assigncount=0;
		//if (++assigncount > 20) while (1) ;
		invalidate();
		f = file.f;
		if (f) f->refcount++;
    38d4:	adds	r0, r3, #1
    38d6:	str	r0, [r4, #16]
	}
	virtual void close() {
		if (f) f->close();
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
    38d8:	ldr	r2, [r2, #68]	; 0x44
    38da:	cmp	r2, r8
    38dc:	bne.w	3e34 <MTPStorage_SD::removeFile(unsigned long, char*)+0x6dc>
    38e0:	cmp	r0, #0
    38e2:	beq.w	3e14 <MTPStorage_SD::removeFile(unsigned long, char*)+0x6bc>
    38e6:	ldr.w	r3, [r3, #1]
    38ea:	ldr	r3, [r3, #68]	; 0x44
    38ec:	cmp	r3, r8
    38ee:	bne.w	3e2c <MTPStorage_SD::removeFile(unsigned long, char*)+0x6d4>
    38f2:	ldr	r0, [r0, #16]
    38f4:	cmp	r0, #0
    38f6:	beq.w	3e14 <MTPStorage_SD::removeFile(unsigned long, char*)+0x6bc>
    38fa:	ldr	r3, [r0, #0]
    38fc:	ldr	r3, [r3, #68]	; 0x44
    38fe:	cmp	r3, r8
    3900:	bne.w	3e2c <MTPStorage_SD::removeFile(unsigned long, char*)+0x6d4>
    3904:	ldr	r0, [r0, #16]
    3906:	cmp	r0, #0
    3908:	beq.w	3e14 <MTPStorage_SD::removeFile(unsigned long, char*)+0x6bc>
    390c:	ldr	r3, [r0, #0]
    390e:	ldr	r3, [r3, #68]	; 0x44
    3910:	cmp	r3, r8
    3912:	bne.w	3e2c <MTPStorage_SD::removeFile(unsigned long, char*)+0x6d4>
    3916:	ldr	r0, [r0, #16]
    3918:	cmp	r0, #0
    391a:	beq.w	3e14 <MTPStorage_SD::removeFile(unsigned long, char*)+0x6bc>
    391e:	ldr	r3, [r0, #0]
    3920:	ldr	r3, [r3, #68]	; 0x44
    3922:	cmp	r3, r8
    3924:	bne.w	3e2c <MTPStorage_SD::removeFile(unsigned long, char*)+0x6d4>
    3928:	ldr	r0, [r0, #16]
    392a:	cmp	r0, #0
    392c:	beq.w	3e14 <MTPStorage_SD::removeFile(unsigned long, char*)+0x6bc>
    3930:	ldr	r3, [r0, #0]
    3932:	ldr	r3, [r3, #68]	; 0x44
    3934:	blx	r3
    3936:	ldr	r2, [sp, #76]	; 0x4c
    3938:	mov	r6, r0
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    393a:	str	r7, [sp, #60]	; 0x3c
    393c:	ldr	r1, [pc, #412]	; (3adc <MTPStorage_SD::removeFile(unsigned long, char*)+0x384>)
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    393e:	cmp	r2, #0
    3940:	beq.n	39d8 <MTPStorage_SD::removeFile(unsigned long, char*)+0x280>
    3942:	ldr	r3, [r2, #16]
    3944:	subs	r3, #1
    3946:	str	r3, [r2, #16]
    3948:	cmp	r3, #0
    394a:	bne.n	39d8 <MTPStorage_SD::removeFile(unsigned long, char*)+0x280>
    394c:	ldr	r5, [sp, #76]	; 0x4c
    394e:	cmp	r5, #0
    3950:	beq.n	39d8 <MTPStorage_SD::removeFile(unsigned long, char*)+0x280>
    3952:	ldr	r3, [r5, #0]
    3954:	ldr	r2, [pc, #384]	; (3ad8 <MTPStorage_SD::removeFile(unsigned long, char*)+0x380>)
    3956:	ldr	r3, [r3, #32]
    3958:	cmp	r3, r2
    395a:	bne.w	3e3e <MTPStorage_SD::removeFile(unsigned long, char*)+0x6e6>
    395e:	ldr	r2, [r5, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    3960:	str	r1, [r5, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    3962:	cmp	r2, #0
    3964:	beq.n	39d0 <MTPStorage_SD::removeFile(unsigned long, char*)+0x278>
    3966:	ldr	r3, [r2, #16]
    3968:	subs	r3, #1
    396a:	str	r3, [r2, #16]
    396c:	cbnz	r3, 39d0 <MTPStorage_SD::removeFile(unsigned long, char*)+0x278>
    396e:	ldr.w	fp, [r5, #16]
    3972:	cmp.w	fp, #0
    3976:	beq.n	39d0 <MTPStorage_SD::removeFile(unsigned long, char*)+0x278>
    3978:	ldr.w	r3, [fp]
    397c:	ldr	r2, [pc, #344]	; (3ad8 <MTPStorage_SD::removeFile(unsigned long, char*)+0x380>)
    397e:	ldr	r3, [r3, #32]
    3980:	cmp	r3, r2
    3982:	bne.w	3e80 <MTPStorage_SD::removeFile(unsigned long, char*)+0x728>
    3986:	ldr.w	r2, [fp, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    398a:	str.w	r1, [fp]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    398e:	cbz	r2, 39c8 <MTPStorage_SD::removeFile(unsigned long, char*)+0x270>
    3990:	ldr	r3, [r2, #16]
    3992:	subs	r3, #1
    3994:	str	r3, [r2, #16]
    3996:	cbnz	r3, 39c8 <MTPStorage_SD::removeFile(unsigned long, char*)+0x270>
    3998:	ldr.w	r3, [fp, #16]
    399c:	cbz	r3, 39c8 <MTPStorage_SD::removeFile(unsigned long, char*)+0x270>
    399e:	ldr	r2, [r3, #0]
    39a0:	ldr	r1, [pc, #308]	; (3ad8 <MTPStorage_SD::removeFile(unsigned long, char*)+0x380>)
    39a2:	ldr	r2, [r2, #32]
    39a4:	cmp	r2, r1
    39a6:	bne.w	3e86 <MTPStorage_SD::removeFile(unsigned long, char*)+0x72e>
    39aa:	ldr	r1, [r3, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    39ac:	str	r7, [r3, #0]
    39ae:	ldr.w	ip, [pc, #300]	; 3adc <MTPStorage_SD::removeFile(unsigned long, char*)+0x384>
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    39b2:	cbz	r1, 39c0 <MTPStorage_SD::removeFile(unsigned long, char*)+0x268>
    39b4:	ldr	r2, [r1, #16]
    39b6:	subs	r2, #1
    39b8:	str	r2, [r1, #16]
    39ba:	cmp	r2, #0
    39bc:	beq.w	3ca0 <MTPStorage_SD::removeFile(unsigned long, char*)+0x548>
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
		invalidate();
	}
    39c0:	mov	r0, r3
    39c2:	movs	r1, #20
    39c4:	bl	1006c <operator delete(void*, unsigned int)>
    39c8:	mov	r0, fp
    39ca:	movs	r1, #20
    39cc:	bl	1006c <operator delete(void*, unsigned int)>
    39d0:	mov	r0, r5
    39d2:	movs	r1, #20
    39d4:	bl	1006c <operator delete(void*, unsigned int)>
  {
    File f2;
    while(f2=f1.openNextFile())
    39d8:	cmp	r6, #0
    39da:	beq.w	3e48 <MTPStorage_SD::removeFile(unsigned long, char*)+0x6f0>
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
	}
	virtual const char* name() {
		return (f) ? f->name() : "";
    39de:	cmp	r4, #0
    39e0:	beq.w	3de4 <MTPStorage_SD::removeFile(unsigned long, char*)+0x68c>
    39e4:	ldr	r2, [r4, #0]
    39e6:	ldr	r3, [pc, #248]	; (3ae0 <MTPStorage_SD::removeFile(unsigned long, char*)+0x388>)
    39e8:	ldr	r2, [r2, #72]	; 0x48
    39ea:	cmp	r2, r3
    39ec:	bne.w	3e20 <MTPStorage_SD::removeFile(unsigned long, char*)+0x6c8>
    39f0:	ldr	r0, [r4, #16]
    39f2:	cmp	r0, #0
    39f4:	beq.w	3e28 <MTPStorage_SD::removeFile(unsigned long, char*)+0x6d0>
    39f8:	ldr	r2, [r0, #0]
    39fa:	ldr	r2, [r2, #72]	; 0x48
    39fc:	cmp	r2, r3
    39fe:	bne.w	3e22 <MTPStorage_SD::removeFile(unsigned long, char*)+0x6ca>
    3a02:	ldr	r0, [r0, #16]
    3a04:	cmp	r0, #0
    3a06:	beq.w	3e28 <MTPStorage_SD::removeFile(unsigned long, char*)+0x6d0>
    3a0a:	ldr	r2, [r0, #0]
    3a0c:	ldr	r2, [r2, #72]	; 0x48
    3a0e:	cmp	r2, r3
    3a10:	bne.w	3e22 <MTPStorage_SD::removeFile(unsigned long, char*)+0x6ca>
    3a14:	ldr	r0, [r0, #16]
    3a16:	cmp	r0, #0
    3a18:	beq.w	3e28 <MTPStorage_SD::removeFile(unsigned long, char*)+0x6d0>
    3a1c:	ldr	r2, [r0, #0]
    3a1e:	ldr	r2, [r2, #72]	; 0x48
    3a20:	cmp	r2, r3
    3a22:	bne.w	3e22 <MTPStorage_SD::removeFile(unsigned long, char*)+0x6ca>
    3a26:	ldr	r0, [r0, #16]
    3a28:	cmp	r0, #0
    3a2a:	beq.w	3e28 <MTPStorage_SD::removeFile(unsigned long, char*)+0x6d0>
    3a2e:	ldr	r2, [r0, #0]
    3a30:	ldr	r2, [r2, #72]	; 0x48
    3a32:	cmp	r2, r3
    3a34:	bne.w	3e22 <MTPStorage_SD::removeFile(unsigned long, char*)+0x6ca>
    3a38:	ldr	r0, [r0, #16]
    3a3a:	cmp	r0, #0
    3a3c:	beq.w	3e28 <MTPStorage_SD::removeFile(unsigned long, char*)+0x6d0>
    3a40:	ldr	r2, [r0, #0]
    3a42:	ldr	r2, [r2, #72]	; 0x48
    3a44:	cmp	r2, r3
    3a46:	bne.w	3e22 <MTPStorage_SD::removeFile(unsigned long, char*)+0x6ca>
    3a4a:	ldr	r0, [r0, #16]
    3a4c:	cmp	r0, #0
    3a4e:	beq.w	3e28 <MTPStorage_SD::removeFile(unsigned long, char*)+0x6d0>
    3a52:	ldr	r3, [r0, #0]
    3a54:	ldr	r3, [r3, #72]	; 0x48
    3a56:	blx	r3
    3a58:	mov	r3, r0
    { sprintf(tname,"%s/%s",file,f2.name());
    3a5a:	add	r5, sp, #80	; 0x50
    3a5c:	ldr	r2, [sp, #4]
    3a5e:	ldr	r1, [pc, #132]	; (3ae4 <MTPStorage_SD::removeFile(unsigned long, char*)+0x38c>)
    3a60:	mov	r0, r5
    3a62:	bl	110a4 <sprintf>
	}
	virtual bool isDirectory() {
		return (f) ? f->isDirectory() : false;
    3a66:	ldr	r3, [r4, #0]
    3a68:	ldr	r3, [r3, #76]	; 0x4c
    3a6a:	cmp	r3, sl
    3a6c:	bne.w	3e1a <MTPStorage_SD::removeFile(unsigned long, char*)+0x6c2>
    3a70:	ldr	r0, [r4, #16]
    3a72:	cmp	r0, #0
    3a74:	beq.w	3df2 <MTPStorage_SD::removeFile(unsigned long, char*)+0x69a>
    3a78:	ldr	r3, [r0, #0]
    3a7a:	ldr	r3, [r3, #76]	; 0x4c
    3a7c:	cmp	r3, sl
    3a7e:	bne.w	3e1c <MTPStorage_SD::removeFile(unsigned long, char*)+0x6c4>
    3a82:	ldr	r0, [r0, #16]
    3a84:	cmp	r0, #0
    3a86:	beq.w	3df2 <MTPStorage_SD::removeFile(unsigned long, char*)+0x69a>
    3a8a:	ldr	r3, [r0, #0]
    3a8c:	ldr	r3, [r3, #76]	; 0x4c
    3a8e:	cmp	r3, sl
    3a90:	bne.w	3e1c <MTPStorage_SD::removeFile(unsigned long, char*)+0x6c4>
    3a94:	ldr	r0, [r0, #16]
    3a96:	cmp	r0, #0
    3a98:	beq.w	3df2 <MTPStorage_SD::removeFile(unsigned long, char*)+0x69a>
    3a9c:	ldr	r3, [r0, #0]
    3a9e:	ldr	r3, [r3, #76]	; 0x4c
    3aa0:	cmp	r3, sl
    3aa2:	bne.w	3e1c <MTPStorage_SD::removeFile(unsigned long, char*)+0x6c4>
    3aa6:	ldr	r0, [r0, #16]
    3aa8:	cmp	r0, #0
    3aaa:	beq.w	3df2 <MTPStorage_SD::removeFile(unsigned long, char*)+0x69a>
    3aae:	ldr	r3, [r0, #0]
    3ab0:	ldr	r3, [r3, #76]	; 0x4c
    3ab2:	cmp	r3, sl
    3ab4:	bne.w	3e1c <MTPStorage_SD::removeFile(unsigned long, char*)+0x6c4>
    3ab8:	ldr	r0, [r0, #16]
    3aba:	cmp	r0, #0
    3abc:	beq.w	3df2 <MTPStorage_SD::removeFile(unsigned long, char*)+0x69a>
    3ac0:	ldr	r3, [r0, #0]
    3ac2:	ldr	r3, [r3, #76]	; 0x4c
    3ac4:	cmp	r3, sl
    3ac6:	bne.w	3e1c <MTPStorage_SD::removeFile(unsigned long, char*)+0x6c4>
    3aca:	ldr	r0, [r0, #16]
    3acc:	cmp	r0, #0
    3ace:	beq.w	3df2 <MTPStorage_SD::removeFile(unsigned long, char*)+0x69a>
    3ad2:	b.n	3af0 <MTPStorage_SD::removeFile(unsigned long, char*)+0x398>
    3ad4:	.word	0x00000149
    3ad8:	.word	0x00000b4d
    3adc:	.word	0x20000074
    3ae0:	.word	0x00000129
    3ae4:	.word	0x20000368
    3ae8:	.word	0x0000013d
    3aec:	.word	0x0000011d
    3af0:	ldr	r3, [r0, #0]
    3af2:	ldr	r3, [r3, #76]	; 0x4c
    3af4:	blx	r3
      if(f2.isDirectory()) removeFile(store,tname); else sd_remove(store,tname);
    3af6:	cmp	r0, #0
    3af8:	beq.w	3df2 <MTPStorage_SD::removeFile(unsigned long, char*)+0x69a>
    3afc:	ldr	r1, [sp, #12]
    3afe:	mov	r2, r5
    3b00:	ldr	r0, [sp, #8]
    3b02:	bl	3758 <MTPStorage_SD::removeFile(unsigned long, char*)>
	}
	virtual File openNextFile(uint8_t mode=0) {
		return (f) ? f->openNextFile(mode) : *this;
    3b06:	ldr	r1, [sp, #56]	; 0x38
    3b08:	cmp	r1, #0
    3b0a:	bne.w	3832 <MTPStorage_SD::removeFile(unsigned long, char*)+0xda>
    3b0e:	movs	r3, #0
    3b10:	mov.w	r2, #1000	; 0x3e8
			//"File(File *file) constructor only accepts pointers "
			//"to derived classes, not File itself");
		f = file;
		if (f) f->refcount++;
	}
	File(const File &file) {
    3b14:	str	r7, [sp, #60]	; 0x3c
    3b16:	strb.w	r3, [sp, #64]	; 0x40
    3b1a:	strb.w	r3, [sp, #72]	; 0x48
		//Serial.println("File copy constructor");
		//static int copycount=0;
		//if (++copycount > 20) while (1) ;
		f = file.f;
    3b1e:	str	r3, [sp, #76]	; 0x4c
    3b20:	str	r2, [sp, #68]	; 0x44
    3b22:	b.n	38aa <MTPStorage_SD::removeFile(unsigned long, char*)+0x152>
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
    3b24:	ldr	r4, [sp, #4]
    3b26:	ldr.w	fp, [pc, #368]	; 3c98 <MTPStorage_SD::removeFile(unsigned long, char*)+0x540>
    3b2a:	mov	r0, r4
    3b2c:	bl	11240 <strlen>
    3b30:	mov	r1, r0
    3b32:	mov	r0, r4
    3b34:	bl	e284 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    3b38:	ldr	r0, [pc, #344]	; (3c94 <MTPStorage_SD::removeFile(unsigned long, char*)+0x53c>)
    3b3a:	bl	ff48 <Print::println()>
    bool sd_mkdir(uint32_t store, char *filename) {  return sdx[store]->mkdir(filename);  }
    bool sd_rename(uint32_t store, char *oldfilename, char *newfilename) { return sdx[store]->rename(oldfilename,newfilename);  }
    bool sd_remove(uint32_t store, const char *filename) {    Serial.println(filename); return sdx[store]->remove(filename);  }
    3b3e:	ldr.w	r0, [r9, #88]	; 0x58
    3b42:	mov	r1, r4
    3b44:	ldr	r3, [r0, #0]
    3b46:	ldr	r3, [r3, #16]
    3b48:	blx	r3
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    3b4a:	ldr	r2, [sp, #56]	; 0x38
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    3b4c:	str.w	fp, [sp, #40]	; 0x28
    3b50:	ldr	r1, [pc, #324]	; (3c98 <MTPStorage_SD::removeFile(unsigned long, char*)+0x540>)
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    3b52:	cmp	r2, #0
    3b54:	beq.w	3c82 <MTPStorage_SD::removeFile(unsigned long, char*)+0x52a>
    3b58:	ldr	r3, [r2, #16]
    3b5a:	subs	r3, #1
    3b5c:	str	r3, [r2, #16]
    3b5e:	cmp	r3, #0
    3b60:	bne.w	3c82 <MTPStorage_SD::removeFile(unsigned long, char*)+0x52a>
    3b64:	ldr	r4, [sp, #56]	; 0x38
    3b66:	cmp	r4, #0
    3b68:	beq.w	3c82 <MTPStorage_SD::removeFile(unsigned long, char*)+0x52a>
    3b6c:	ldr	r3, [r4, #0]
    3b6e:	ldr	r0, [pc, #300]	; (3c9c <MTPStorage_SD::removeFile(unsigned long, char*)+0x544>)
    3b70:	ldr	r3, [r3, #32]
    3b72:	cmp	r3, r0
    3b74:	bne.w	3e8c <MTPStorage_SD::removeFile(unsigned long, char*)+0x734>
    3b78:	ldr	r2, [r4, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    3b7a:	str	r1, [r4, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    3b7c:	cmp	r2, #0
    3b7e:	beq.n	3c7a <MTPStorage_SD::removeFile(unsigned long, char*)+0x522>
    3b80:	ldr	r3, [r2, #16]
    3b82:	subs	r3, #1
    3b84:	str	r3, [r2, #16]
    3b86:	cmp	r3, #0
    3b88:	bne.n	3c7a <MTPStorage_SD::removeFile(unsigned long, char*)+0x522>
    3b8a:	ldr	r5, [r4, #16]
    3b8c:	cmp	r5, #0
    3b8e:	beq.n	3c7a <MTPStorage_SD::removeFile(unsigned long, char*)+0x522>
    3b90:	ldr	r3, [r5, #0]
    3b92:	ldr	r3, [r3, #32]
    3b94:	cmp	r3, r0
    3b96:	bne.w	3ea0 <MTPStorage_SD::removeFile(unsigned long, char*)+0x748>
    3b9a:	ldr	r2, [r5, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    3b9c:	str	r1, [r5, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    3b9e:	cmp	r2, #0
    3ba0:	beq.n	3c72 <MTPStorage_SD::removeFile(unsigned long, char*)+0x51a>
    3ba2:	ldr	r3, [r2, #16]
    3ba4:	subs	r3, #1
    3ba6:	str	r3, [r2, #16]
    3ba8:	cmp	r3, #0
    3baa:	bne.n	3c72 <MTPStorage_SD::removeFile(unsigned long, char*)+0x51a>
    3bac:	ldr	r6, [r5, #16]
    3bae:	cmp	r6, #0
    3bb0:	beq.n	3c72 <MTPStorage_SD::removeFile(unsigned long, char*)+0x51a>
    3bb2:	ldr	r3, [r6, #0]
    3bb4:	ldr	r3, [r3, #32]
    3bb6:	cmp	r3, r0
    3bb8:	bne.w	3eb4 <MTPStorage_SD::removeFile(unsigned long, char*)+0x75c>
    3bbc:	ldr	r2, [r6, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    3bbe:	str.w	fp, [r6]
    3bc2:	ldr	r1, [pc, #212]	; (3c98 <MTPStorage_SD::removeFile(unsigned long, char*)+0x540>)
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    3bc4:	cmp	r2, #0
    3bc6:	beq.n	3c6a <MTPStorage_SD::removeFile(unsigned long, char*)+0x512>
    3bc8:	ldr	r3, [r2, #16]
    3bca:	subs	r3, #1
    3bcc:	str	r3, [r2, #16]
    3bce:	cmp	r3, #0
    3bd0:	bne.n	3c6a <MTPStorage_SD::removeFile(unsigned long, char*)+0x512>
    3bd2:	ldr	r7, [r6, #16]
    3bd4:	cmp	r7, #0
    3bd6:	beq.n	3c6a <MTPStorage_SD::removeFile(unsigned long, char*)+0x512>
    3bd8:	ldr	r3, [r7, #0]
    3bda:	ldr	r3, [r3, #32]
    3bdc:	cmp	r3, r0
    3bde:	bne.w	3eba <MTPStorage_SD::removeFile(unsigned long, char*)+0x762>
    3be2:	ldr	r2, [r7, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    3be4:	str	r1, [r7, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    3be6:	cmp	r2, #0
    3be8:	beq.n	3c62 <MTPStorage_SD::removeFile(unsigned long, char*)+0x50a>
    3bea:	ldr	r3, [r2, #16]
    3bec:	subs	r3, #1
    3bee:	str	r3, [r2, #16]
    3bf0:	cmp	r3, #0
    3bf2:	bne.n	3c62 <MTPStorage_SD::removeFile(unsigned long, char*)+0x50a>
    3bf4:	ldr.w	r8, [r7, #16]
    3bf8:	cmp.w	r8, #0
    3bfc:	beq.n	3c62 <MTPStorage_SD::removeFile(unsigned long, char*)+0x50a>
    3bfe:	ldr.w	r3, [r8]
    3c02:	ldr	r3, [r3, #32]
    3c04:	cmp	r3, r0
    3c06:	bne.w	3edc <MTPStorage_SD::removeFile(unsigned long, char*)+0x784>
    3c0a:	ldr.w	r2, [r8, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    3c0e:	str.w	fp, [r8]
    3c12:	ldr	r1, [pc, #132]	; (3c98 <MTPStorage_SD::removeFile(unsigned long, char*)+0x540>)
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    3c14:	cbz	r2, 3c5a <MTPStorage_SD::removeFile(unsigned long, char*)+0x502>
    3c16:	ldr	r3, [r2, #16]
    3c18:	subs	r3, #1
    3c1a:	str	r3, [r2, #16]
    3c1c:	cbnz	r3, 3c5a <MTPStorage_SD::removeFile(unsigned long, char*)+0x502>
    3c1e:	ldr.w	r9, [r8, #16]
    3c22:	cmp.w	r9, #0
    3c26:	beq.n	3c5a <MTPStorage_SD::removeFile(unsigned long, char*)+0x502>
    3c28:	ldr.w	r3, [r9]
    3c2c:	ldr	r3, [r3, #32]
    3c2e:	cmp	r3, r0
    3c30:	bne.w	3ef2 <MTPStorage_SD::removeFile(unsigned long, char*)+0x79a>
    3c34:	ldr.w	r2, [r9, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    3c38:	str.w	r1, [r9]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    3c3c:	cbz	r2, 3c52 <MTPStorage_SD::removeFile(unsigned long, char*)+0x4fa>
    3c3e:	ldr	r3, [r2, #16]
    3c40:	subs	r3, #1
    3c42:	str	r3, [r2, #16]
    3c44:	cbnz	r3, 3c52 <MTPStorage_SD::removeFile(unsigned long, char*)+0x4fa>
    3c46:	ldr.w	r0, [r9, #16]
    3c4a:	cbz	r0, 3c52 <MTPStorage_SD::removeFile(unsigned long, char*)+0x4fa>
    3c4c:	ldr	r3, [r0, #0]
    3c4e:	ldr	r3, [r3, #32]
    3c50:	blx	r3
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
		invalidate();
	}
    3c52:	mov	r0, r9
    3c54:	movs	r1, #20
    3c56:	bl	1006c <operator delete(void*, unsigned int)>
    3c5a:	mov	r0, r8
    3c5c:	movs	r1, #20
    3c5e:	bl	1006c <operator delete(void*, unsigned int)>
    3c62:	mov	r0, r7
    3c64:	movs	r1, #20
    3c66:	bl	1006c <operator delete(void*, unsigned int)>
    3c6a:	mov	r0, r6
    3c6c:	movs	r1, #20
    3c6e:	bl	1006c <operator delete(void*, unsigned int)>
    3c72:	mov	r0, r5
    3c74:	movs	r1, #20
    3c76:	bl	1006c <operator delete(void*, unsigned int)>
    3c7a:	mov	r0, r4
    3c7c:	movs	r1, #20
    3c7e:	bl	1006c <operator delete(void*, unsigned int)>
  }
  else
  {
    sd_remove(store,file);
  }
}
    3c82:	add	sp, #340	; 0x154
    3c84:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	}
	virtual const char* name() {
		return (f) ? f->name() : "";
	}
	virtual bool isDirectory() {
		return (f) ? f->isDirectory() : false;
    3c88:	blx	r3
    3c8a:	b.n	3818 <MTPStorage_SD::removeFile(unsigned long, char*)+0xc0>
	}
	virtual File openNextFile(uint8_t mode=0) {
		return (f) ? f->openNextFile(mode) : *this;
    3c8c:	movs	r2, #0
    3c8e:	add	r0, sp, #60	; 0x3c
    3c90:	blx	r3
    3c92:	b.n	38aa <MTPStorage_SD::removeFile(unsigned long, char*)+0x152>
    3c94:	.word	0x20000c60
    3c98:	.word	0x20000074
    3c9c:	.word	0x00000b4d
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    3ca0:	ldr	r2, [r3, #16]
    3ca2:	cmp	r2, #0
    3ca4:	beq.w	39c0 <MTPStorage_SD::removeFile(unsigned long, char*)+0x268>
    3ca8:	ldr	r1, [r2, #0]
    3caa:	ldr	r0, [pc, #588]	; (3ef8 <MTPStorage_SD::removeFile(unsigned long, char*)+0x7a0>)
    3cac:	ldr	r1, [r1, #32]
    3cae:	cmp	r1, r0
    3cb0:	bne.w	3e96 <MTPStorage_SD::removeFile(unsigned long, char*)+0x73e>
    3cb4:	ldr.w	lr, [r2, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    3cb8:	str.w	ip, [r2]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    3cbc:	cmp.w	lr, #0
    3cc0:	beq.w	3dd6 <MTPStorage_SD::removeFile(unsigned long, char*)+0x67e>
    3cc4:	ldr.w	r1, [lr, #16]
    3cc8:	subs	r1, #1
    3cca:	str.w	r1, [lr, #16]
    3cce:	cmp	r1, #0
    3cd0:	bne.w	3dd6 <MTPStorage_SD::removeFile(unsigned long, char*)+0x67e>
    3cd4:	ldr	r1, [r2, #16]
    3cd6:	str	r1, [sp, #16]
    3cd8:	cmp	r1, #0
    3cda:	beq.n	3dd6 <MTPStorage_SD::removeFile(unsigned long, char*)+0x67e>
    3cdc:	ldr	r1, [sp, #16]
    3cde:	ldr	r0, [pc, #536]	; (3ef8 <MTPStorage_SD::removeFile(unsigned long, char*)+0x7a0>)
    3ce0:	ldr	r1, [r1, #0]
    3ce2:	ldr	r1, [r1, #32]
    3ce4:	cmp	r1, r0
    3ce6:	bne.w	3ea6 <MTPStorage_SD::removeFile(unsigned long, char*)+0x74e>
    3cea:	ldr	r1, [sp, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    3cec:	ldr.w	ip, [pc, #536]	; 3f08 <MTPStorage_SD::removeFile(unsigned long, char*)+0x7b0>
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    3cf0:	ldr.w	lr, [r1, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    3cf4:	str	r7, [r1, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    3cf6:	cmp.w	lr, #0
    3cfa:	beq.n	3dc6 <MTPStorage_SD::removeFile(unsigned long, char*)+0x66e>
    3cfc:	ldr.w	r1, [lr, #16]
    3d00:	subs	r1, #1
    3d02:	str.w	r1, [lr, #16]
    3d06:	cmp	r1, #0
    3d08:	bne.n	3dc6 <MTPStorage_SD::removeFile(unsigned long, char*)+0x66e>
    3d0a:	ldr	r1, [sp, #16]
    3d0c:	ldr	r1, [r1, #16]
    3d0e:	str	r1, [sp, #20]
    3d10:	cmp	r1, #0
    3d12:	beq.n	3dc6 <MTPStorage_SD::removeFile(unsigned long, char*)+0x66e>
    3d14:	ldr	r1, [sp, #20]
    3d16:	ldr	r0, [pc, #480]	; (3ef8 <MTPStorage_SD::removeFile(unsigned long, char*)+0x7a0>)
    3d18:	ldr	r1, [r1, #0]
    3d1a:	ldr	r1, [r1, #32]
    3d1c:	cmp	r1, r0
    3d1e:	bne.w	3ec0 <MTPStorage_SD::removeFile(unsigned long, char*)+0x768>
    3d22:	ldr	r0, [sp, #20]
    3d24:	ldr.w	lr, [r0, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    3d28:	str.w	ip, [r0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    3d2c:	cmp.w	lr, #0
    3d30:	beq.n	3db6 <MTPStorage_SD::removeFile(unsigned long, char*)+0x65e>
    3d32:	ldr.w	r1, [lr, #16]
    3d36:	subs	r1, #1
    3d38:	str.w	r1, [lr, #16]
    3d3c:	cmp	r1, #0
    3d3e:	bne.n	3db6 <MTPStorage_SD::removeFile(unsigned long, char*)+0x65e>
    3d40:	ldr	r1, [sp, #20]
    3d42:	ldr	r1, [r1, #16]
    3d44:	str	r1, [sp, #24]
    3d46:	cmp	r1, #0
    3d48:	beq.n	3db6 <MTPStorage_SD::removeFile(unsigned long, char*)+0x65e>
    3d4a:	ldr	r1, [sp, #24]
    3d4c:	ldr	r0, [pc, #424]	; (3ef8 <MTPStorage_SD::removeFile(unsigned long, char*)+0x7a0>)
    3d4e:	ldr	r1, [r1, #0]
    3d50:	ldr	r1, [r1, #32]
    3d52:	cmp	r1, r0
    3d54:	bne.w	3ece <MTPStorage_SD::removeFile(unsigned long, char*)+0x776>
    3d58:	ldr	r0, [sp, #24]
    3d5a:	ldr.w	lr, [r0, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    3d5e:	str.w	ip, [r0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    3d62:	cmp.w	lr, #0
    3d66:	beq.n	3da6 <MTPStorage_SD::removeFile(unsigned long, char*)+0x64e>
    3d68:	ldr.w	r1, [lr, #16]
    3d6c:	subs	r1, #1
    3d6e:	str.w	r1, [lr, #16]
    3d72:	cbnz	r1, 3da6 <MTPStorage_SD::removeFile(unsigned long, char*)+0x64e>
    3d74:	ldr	r1, [sp, #24]
    3d76:	ldr	r1, [r1, #16]
    3d78:	cbz	r1, 3da6 <MTPStorage_SD::removeFile(unsigned long, char*)+0x64e>
    3d7a:	ldr	r0, [r1, #0]
    3d7c:	ldr	r0, [r0, #32]
    3d7e:	mov	lr, r0
    3d80:	ldr	r0, [pc, #372]	; (3ef8 <MTPStorage_SD::removeFile(unsigned long, char*)+0x7a0>)
    3d82:	cmp	lr, r0
    3d84:	bne.w	3ee2 <MTPStorage_SD::removeFile(unsigned long, char*)+0x78a>
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    3d88:	mov	r0, r1
    3d8a:	str	r2, [sp, #36]	; 0x24
    3d8c:	str	r3, [sp, #32]
    3d8e:	str.w	r7, [r0], #16
    3d92:	str	r1, [sp, #28]
		invalidate();
    3d94:	bl	1c94 <File::invalidate() [clone .isra.1]>
	}
    3d98:	ldr	r1, [sp, #28]
    3d9a:	mov	r0, r1
    3d9c:	movs	r1, #20
    3d9e:	bl	1006c <operator delete(void*, unsigned int)>
    3da2:	ldr	r3, [sp, #32]
    3da4:	ldr	r2, [sp, #36]	; 0x24
    3da6:	ldr	r0, [sp, #24]
    3da8:	movs	r1, #20
    3daa:	str	r2, [sp, #32]
    3dac:	str	r3, [sp, #28]
    3dae:	bl	1006c <operator delete(void*, unsigned int)>
    3db2:	ldr	r3, [sp, #28]
    3db4:	ldr	r2, [sp, #32]
    3db6:	ldr	r0, [sp, #20]
    3db8:	movs	r1, #20
    3dba:	str	r2, [sp, #28]
    3dbc:	str	r3, [sp, #24]
    3dbe:	bl	1006c <operator delete(void*, unsigned int)>
    3dc2:	ldr	r3, [sp, #24]
    3dc4:	ldr	r2, [sp, #28]
    3dc6:	ldr	r0, [sp, #16]
    3dc8:	movs	r1, #20
    3dca:	str	r2, [sp, #24]
    3dcc:	str	r3, [sp, #20]
    3dce:	bl	1006c <operator delete(void*, unsigned int)>
    3dd2:	ldr	r3, [sp, #20]
    3dd4:	ldr	r2, [sp, #24]
    3dd6:	mov	r0, r2
    3dd8:	movs	r1, #20
    3dda:	str	r3, [sp, #16]
    3ddc:	bl	1006c <operator delete(void*, unsigned int)>
    3de0:	ldr	r3, [sp, #16]
    3de2:	b.n	39c0 <MTPStorage_SD::removeFile(unsigned long, char*)+0x268>
  File f1=sd_open(store,file,0);
  if(f1.isDirectory())
  {
    File f2;
    while(f2=f1.openNextFile())
    { sprintf(tname,"%s/%s",file,f2.name());
    3de4:	add	r5, sp, #80	; 0x50
    3de6:	ldr	r3, [pc, #276]	; (3efc <MTPStorage_SD::removeFile(unsigned long, char*)+0x7a4>)
    3de8:	ldr	r2, [sp, #4]
    3dea:	ldr	r1, [pc, #276]	; (3f00 <MTPStorage_SD::removeFile(unsigned long, char*)+0x7a8>)
    3dec:	mov	r0, r5
    3dee:	bl	110a4 <sprintf>
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
    3df2:	mov	r0, r5
    3df4:	bl	11240 <strlen>
    3df8:	mov	r1, r0
    3dfa:	mov	r0, r5
    3dfc:	bl	e284 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    3e00:	ldr	r0, [pc, #256]	; (3f04 <MTPStorage_SD::removeFile(unsigned long, char*)+0x7ac>)
    3e02:	bl	ff48 <Print::println()>
    3e06:	ldr.w	r0, [r9, #88]	; 0x58
    3e0a:	mov	r1, r5
    3e0c:	ldr	r3, [r0, #0]
    3e0e:	ldr	r3, [r3, #16]
    3e10:	blx	r3
    3e12:	b.n	382a <MTPStorage_SD::removeFile(unsigned long, char*)+0xd2>
    3e14:	ldr	r2, [sp, #76]	; 0x4c
	}
	virtual void close() {
		if (f) f->close();
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
    3e16:	movs	r6, #0
    3e18:	b.n	393a <MTPStorage_SD::removeFile(unsigned long, char*)+0x1e2>
	}
	virtual const char* name() {
		return (f) ? f->name() : "";
	}
	virtual bool isDirectory() {
		return (f) ? f->isDirectory() : false;
    3e1a:	mov	r0, r4
    3e1c:	blx	r3
    3e1e:	b.n	3af6 <MTPStorage_SD::removeFile(unsigned long, char*)+0x39e>
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
	}
	virtual const char* name() {
		return (f) ? f->name() : "";
    3e20:	mov	r0, r4
    3e22:	blx	r2
    3e24:	mov	r3, r0
    3e26:	b.n	3a5a <MTPStorage_SD::removeFile(unsigned long, char*)+0x302>
    3e28:	ldr	r3, [pc, #208]	; (3efc <MTPStorage_SD::removeFile(unsigned long, char*)+0x7a4>)
    3e2a:	b.n	3a5a <MTPStorage_SD::removeFile(unsigned long, char*)+0x302>
	}
	virtual void close() {
		if (f) f->close();
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
    3e2c:	blx	r3
    3e2e:	ldr	r2, [sp, #76]	; 0x4c
    3e30:	mov	r6, r0
    3e32:	b.n	393a <MTPStorage_SD::removeFile(unsigned long, char*)+0x1e2>
    3e34:	mov	r0, r4
    3e36:	blx	r2
    3e38:	ldr	r2, [sp, #76]	; 0x4c
    3e3a:	mov	r6, r0
    3e3c:	b.n	393a <MTPStorage_SD::removeFile(unsigned long, char*)+0x1e2>
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    3e3e:	mov	r0, r5
    3e40:	blx	r3
  char tname[MAX_FILENAME_LEN];
  File f1=sd_open(store,file,0);
  if(f1.isDirectory())
  {
    File f2;
    while(f2=f1.openNextFile())
    3e42:	cmp	r6, #0
    3e44:	bne.w	39de <MTPStorage_SD::removeFile(unsigned long, char*)+0x286>
    bool sd_rmdir(uint32_t store, char *filename) { return sdx[store]->rmdir(filename);  }
    3e48:	ldr.w	r0, [r9, #88]	; 0x58
    3e4c:	mov	fp, r7
    3e4e:	ldr	r1, [sp, #4]
    3e50:	ldr	r3, [r0, #0]
    3e52:	ldr	r3, [r3, #20]
    3e54:	blx	r3
    3e56:	cmp	r4, #0
    3e58:	beq.w	3b4a <MTPStorage_SD::removeFile(unsigned long, char*)+0x3f2>
    3e5c:	ldr	r3, [r4, #16]
    3e5e:	subs	r3, #1
    3e60:	str	r3, [r4, #16]
    3e62:	cmp	r3, #0
    3e64:	bne.w	3b4a <MTPStorage_SD::removeFile(unsigned long, char*)+0x3f2>
    3e68:	ldr	r3, [r4, #0]
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
		invalidate();
	}
    3e6a:	mov	r0, r4
    3e6c:	ldr	r2, [pc, #136]	; (3ef8 <MTPStorage_SD::removeFile(unsigned long, char*)+0x7a0>)
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    3e6e:	ldr	r3, [r3, #32]
    3e70:	cmp	r3, r2
    3e72:	bne.n	3e92 <MTPStorage_SD::removeFile(unsigned long, char*)+0x73a>
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
		invalidate();
	}
    3e74:	movs	r1, #20
    3e76:	bl	1006c <operator delete(void*, unsigned int)>
    3e7a:	b.n	3b4a <MTPStorage_SD::removeFile(unsigned long, char*)+0x3f2>
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    3e7c:	blx	r3
    3e7e:	b.n	38c8 <MTPStorage_SD::removeFile(unsigned long, char*)+0x170>
    3e80:	mov	r0, fp
    3e82:	blx	r3
    3e84:	b.n	39d0 <MTPStorage_SD::removeFile(unsigned long, char*)+0x278>
    3e86:	mov	r0, r3
    3e88:	blx	r2
    3e8a:	b.n	39c8 <MTPStorage_SD::removeFile(unsigned long, char*)+0x270>
    3e8c:	mov	r0, r4
    3e8e:	blx	r3
  }
  else
  {
    sd_remove(store,file);
  }
}
    3e90:	b.n	3c82 <MTPStorage_SD::removeFile(unsigned long, char*)+0x52a>
    3e92:	blx	r3
    3e94:	b.n	3b4a <MTPStorage_SD::removeFile(unsigned long, char*)+0x3f2>
    3e96:	str	r3, [sp, #16]
    3e98:	mov	r0, r2
    3e9a:	blx	r1
    3e9c:	ldr	r3, [sp, #16]
    3e9e:	b.n	39c0 <MTPStorage_SD::removeFile(unsigned long, char*)+0x268>
    3ea0:	mov	r0, r5
    3ea2:	blx	r3
    3ea4:	b.n	3c7a <MTPStorage_SD::removeFile(unsigned long, char*)+0x522>
    3ea6:	str	r2, [sp, #24]
    3ea8:	str	r3, [sp, #20]
    3eaa:	ldr	r0, [sp, #16]
    3eac:	blx	r1
    3eae:	ldr	r2, [sp, #24]
    3eb0:	ldr	r3, [sp, #20]
    3eb2:	b.n	3dd6 <MTPStorage_SD::removeFile(unsigned long, char*)+0x67e>
    3eb4:	mov	r0, r6
    3eb6:	blx	r3
    3eb8:	b.n	3c72 <MTPStorage_SD::removeFile(unsigned long, char*)+0x51a>
    3eba:	mov	r0, r7
    3ebc:	blx	r3
    3ebe:	b.n	3c6a <MTPStorage_SD::removeFile(unsigned long, char*)+0x512>
    3ec0:	str	r2, [sp, #28]
    3ec2:	str	r3, [sp, #24]
    3ec4:	ldr	r0, [sp, #20]
    3ec6:	blx	r1
    3ec8:	ldr	r2, [sp, #28]
    3eca:	ldr	r3, [sp, #24]
    3ecc:	b.n	3dc6 <MTPStorage_SD::removeFile(unsigned long, char*)+0x66e>
    3ece:	str	r2, [sp, #32]
    3ed0:	str	r3, [sp, #28]
    3ed2:	ldr	r0, [sp, #24]
    3ed4:	blx	r1
    3ed6:	ldr	r2, [sp, #32]
    3ed8:	ldr	r3, [sp, #28]
    3eda:	b.n	3db6 <MTPStorage_SD::removeFile(unsigned long, char*)+0x65e>
    3edc:	mov	r0, r8
    3ede:	blx	r3
    3ee0:	b.n	3c62 <MTPStorage_SD::removeFile(unsigned long, char*)+0x50a>
    3ee2:	str	r2, [sp, #32]
    3ee4:	mov	r0, r1
    3ee6:	str	r3, [sp, #28]
    3ee8:	mov	r3, lr
    3eea:	blx	r3
    3eec:	ldr	r2, [sp, #32]
    3eee:	ldr	r3, [sp, #28]
    3ef0:	b.n	3da6 <MTPStorage_SD::removeFile(unsigned long, char*)+0x64e>
    3ef2:	mov	r0, r9
    3ef4:	blx	r3
    3ef6:	b.n	3c5a <MTPStorage_SD::removeFile(unsigned long, char*)+0x502>
    3ef8:	.word	0x00000b4d
    3efc:	.word	0x20000228
    3f00:	.word	0x20000368
    3f04:	.word	0x20000c60
    3f08:	.word	0x20000074

00003f0c <MTPStorage_SD::DeleteObject(unsigned long) [clone .part.9] [clone .constprop.11]>:

  bool MTPStorage_SD::DeleteObject(uint32_t object)
    3f0c:	push	{r4, r5, r6, r7, lr}
    3f0e:	subw	sp, sp, #1348	; 0x544
    3f12:	mov	r5, r0
    3f14:	mov	r6, r1
  {
    if(object==0xFFFFFFFFUL) return true; // don't do anything if trying to delete a root directory see below

    // first create full filename
    char filename[MAX_FILENAME_LEN];
    ConstructFilename(object, filename, MAX_FILENAME_LEN);
    3f16:	mov.w	r3, #256	; 0x100
    3f1a:	add	r2, sp, #272	; 0x110
    3f1c:	bl	26f8 <MTPStorage_SD::ConstructFilename(int, char*, int)>

    Record r = ReadIndexRecord(object);
    3f20:	mov	r2, r6
    3f22:	mov	r1, r5
    3f24:	add	r0, sp, #528	; 0x210
    3f26:	bl	2298 <MTPStorage_SD::ReadIndexRecord(unsigned long)>

    // remove file from storage (assume it is always working)
    mtp_lock_storage(true);
    removeFile(r.store,filename);
    3f2a:	add	r2, sp, #272	; 0x110
    3f2c:	ldrh.w	r1, [sp, #542]	; 0x21e
    3f30:	mov	r0, r5
    3f32:	bl	3758 <MTPStorage_SD::removeFile(unsigned long, char*)>
    mtp_lock_storage(false);

    // mark object as deleted
    r.name[0]=0;
    3f36:	movs	r3, #0
    WriteIndexRecord(object, r);
    3f38:	add	r2, sp, #528	; 0x210
    3f3a:	mov	r1, r6
    3f3c:	mov	r0, r5
    mtp_lock_storage(true);
    removeFile(r.store,filename);
    mtp_lock_storage(false);

    // mark object as deleted
    r.name[0]=0;
    3f3e:	strb.w	r3, [sp, #544]	; 0x220
    WriteIndexRecord(object, r);
    3f42:	bl	20c8 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    
    // update index file
    Record t = ReadIndexRecord(r.parent);
    3f46:	ldr	r2, [sp, #528]	; 0x210
    3f48:	mov	r1, r5
    3f4a:	add	r0, sp, #800	; 0x320
    3f4c:	bl	2298 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    if(t.child==object)
    3f50:	ldr	r7, [sp, #804]	; 0x324
    3f52:	cmp	r6, r7
    3f54:	beq.n	3fa6 <MTPStorage_SD::DeleteObject(unsigned long) [clone .part.9] [clone .constprop.11]+0x9a>
    }
    else
    { // link junger to older sibling
      // find junger sibling
      uint32_t is = t.child;
      Record x = ReadIndexRecord(is);
    3f56:	mov	r2, r7
    3f58:	mov	r1, r5
    3f5a:	add.w	r0, sp, #1072	; 0x430
    3f5e:	bl	2298 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
      while((x.sibling != object)) { is=x.sibling; x=ReadIndexRecord(is);}
    3f62:	ldr.w	r4, [sp, #1080]	; 0x438
    3f66:	cmp	r6, r4
    3f68:	bne.n	3f6e <MTPStorage_SD::DeleteObject(unsigned long) [clone .part.9] [clone .constprop.11]+0x62>
    3f6a:	b.n	3fba <MTPStorage_SD::DeleteObject(unsigned long) [clone .part.9] [clone .constprop.11]+0xae>
    3f6c:	mov	r4, r3
    3f6e:	mov	r2, r4
    3f70:	mov	r1, r5
    3f72:	mov	r0, sp
    3f74:	bl	2298 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    3f78:	mov.w	r2, #272	; 0x110
    3f7c:	mov	r1, sp
    3f7e:	add.w	r0, sp, #1072	; 0x430
    3f82:	bl	db14 <memcpy>
    3f86:	ldr.w	r3, [sp, #1080]	; 0x438
    3f8a:	cmp	r6, r3
    3f8c:	bne.n	3f6c <MTPStorage_SD::DeleteObject(unsigned long) [clone .part.9] [clone .constprop.11]+0x60>
      // is points now to junder sibling
      x.sibling = r.sibling;
      WriteIndexRecord(is, x);
    3f8e:	mov	r0, r5
      // find junger sibling
      uint32_t is = t.child;
      Record x = ReadIndexRecord(is);
      while((x.sibling != object)) { is=x.sibling; x=ReadIndexRecord(is);}
      // is points now to junder sibling
      x.sibling = r.sibling;
    3f90:	ldr	r3, [sp, #536]	; 0x218
      WriteIndexRecord(is, x);
    3f92:	add.w	r2, sp, #1072	; 0x430
    3f96:	mov	r1, r4
      // find junger sibling
      uint32_t is = t.child;
      Record x = ReadIndexRecord(is);
      while((x.sibling != object)) { is=x.sibling; x=ReadIndexRecord(is);}
      // is points now to junder sibling
      x.sibling = r.sibling;
    3f98:	str.w	r3, [sp, #1080]	; 0x438
      WriteIndexRecord(is, x);
    3f9c:	bl	20c8 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    }
    return 1;
  }
    3fa0:	addw	sp, sp, #1348	; 0x544
    3fa4:	pop	{r4, r5, r6, r7, pc}
    // update index file
    Record t = ReadIndexRecord(r.parent);
    if(t.child==object)
    { // we are the jungest, simply relink parent to older sibling
      t.child = r.sibling;
      WriteIndexRecord(r.parent, t);
    3fa6:	mov	r0, r5
    
    // update index file
    Record t = ReadIndexRecord(r.parent);
    if(t.child==object)
    { // we are the jungest, simply relink parent to older sibling
      t.child = r.sibling;
    3fa8:	ldr	r3, [sp, #536]	; 0x218
      WriteIndexRecord(r.parent, t);
    3faa:	add	r2, sp, #800	; 0x320
    3fac:	ldr	r1, [sp, #528]	; 0x210
    
    // update index file
    Record t = ReadIndexRecord(r.parent);
    if(t.child==object)
    { // we are the jungest, simply relink parent to older sibling
      t.child = r.sibling;
    3fae:	str	r3, [sp, #804]	; 0x324
      WriteIndexRecord(r.parent, t);
    3fb0:	bl	20c8 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
      // is points now to junder sibling
      x.sibling = r.sibling;
      WriteIndexRecord(is, x);
    }
    return 1;
  }
    3fb4:	addw	sp, sp, #1348	; 0x544
    3fb8:	pop	{r4, r5, r6, r7, pc}
    else
    { // link junger to older sibling
      // find junger sibling
      uint32_t is = t.child;
      Record x = ReadIndexRecord(is);
      while((x.sibling != object)) { is=x.sibling; x=ReadIndexRecord(is);}
    3fba:	mov	r4, r7
    3fbc:	b.n	3f8e <MTPStorage_SD::DeleteObject(unsigned long) [clone .part.9] [clone .constprop.11]+0x82>
    3fbe:	nop

00003fc0 <MTPStorage_SD::DeleteObject(unsigned long)>:
  }
}

  bool MTPStorage_SD::DeleteObject(uint32_t object)
  {
    if(object==0xFFFFFFFFUL) return true; // don't do anything if trying to delete a root directory see below
    3fc0:	adds	r2, r1, #1
    3fc2:	beq.n	3fce <MTPStorage_SD::DeleteObject(unsigned long)+0xe>
    sd_remove(store,file);
  }
}

  bool MTPStorage_SD::DeleteObject(uint32_t object)
  {
    3fc4:	push	{r3, lr}
    3fc6:	bl	3f0c <MTPStorage_SD::DeleteObject(unsigned long) [clone .part.9] [clone .constprop.11]>
      // is points now to junder sibling
      x.sibling = r.sibling;
      WriteIndexRecord(is, x);
    }
    return 1;
  }
    3fca:	movs	r0, #1
    3fcc:	pop	{r3, pc}
    3fce:	movs	r0, #1
    3fd0:	bx	lr
    3fd2:	nop

00003fd4 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)>:
    }

    uint32_t sd_getFSCount(void) {return fsCount;}
    const char *sd_getFSName(uint32_t store) { return sd_name[store];}

    File sd_open(uint32_t store, const char *filename, uint32_t mode) { return sdx[store]->open(filename,mode);  }
    3fd4:	add.w	r1, r0, r1, lsl #2
    3fd8:	ldr	r1, [r1, #84]	; 0x54
  WriteIndexRecord(newHandle,p2);
  return true;
}
/************************************** mSD_Base *******************************/
bool mSD_Base::sd_copy(uint32_t store0, char *oldfilename, uint32_t store1, char *newfilename)
{
    3fda:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3fde:	ldr	r4, [r1, #0]
    3fe0:	subw	sp, sp, #2092	; 0x82c
    3fe4:	mov	r6, r0
    3fe6:	mov	r7, r3
    3fe8:	mov	r0, sp
    3fea:	movs	r3, #0
    3fec:	ldr	r4, [r4, #0]
    3fee:	blx	r4
	}
	virtual void close() {
		if (f) f->close();
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
    3ff0:	ldr	r2, [sp, #16]
    3ff2:	cmp	r2, #0
    3ff4:	beq.w	441e <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x44a>
    3ff8:	ldr	r3, [r2, #0]
    3ffa:	ldr	r5, [pc, #624]	; (426c <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x298>)
    3ffc:	ldr	r3, [r3, #68]	; 0x44
    3ffe:	cmp	r3, r5
    4000:	bne.w	437c <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x3a8>
    4004:	ldr	r0, [r2, #16]
    4006:	cmp	r0, #0
    4008:	beq.w	422c <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x258>
    400c:	ldr	r3, [r0, #0]
    400e:	ldr	r3, [r3, #68]	; 0x44
    4010:	cmp	r3, r5
    4012:	bne.w	437e <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x3aa>
    4016:	ldr	r0, [r0, #16]
    4018:	cmp	r0, #0
    401a:	beq.w	422c <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x258>
    401e:	ldr	r3, [r0, #0]
    4020:	ldr	r3, [r3, #68]	; 0x44
    4022:	cmp	r3, r5
    4024:	bne.w	437e <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x3aa>
    4028:	ldr	r0, [r0, #16]
    402a:	cmp	r0, #0
    402c:	beq.w	422c <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x258>
    4030:	ldr	r3, [r0, #0]
    4032:	ldr	r3, [r3, #68]	; 0x44
    4034:	cmp	r3, r5
    4036:	bne.w	437e <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x3aa>
    403a:	ldr	r0, [r0, #16]
    403c:	cmp	r0, #0
    403e:	beq.w	422c <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x258>
    4042:	ldr	r3, [r0, #0]
    4044:	ldr	r3, [r3, #68]	; 0x44
    4046:	cmp	r3, r5
    4048:	bne.w	437e <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x3aa>
    404c:	ldr	r0, [r0, #16]
    404e:	cmp	r0, #0
    4050:	beq.w	422c <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x258>
    4054:	ldr	r3, [r0, #0]
    4056:	ldr	r3, [r3, #68]	; 0x44
    4058:	cmp	r3, r5
    405a:	bne.w	437e <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x3aa>
    405e:	ldr	r0, [r0, #16]
    4060:	cmp	r0, #0
    4062:	beq.w	422c <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x258>
    4066:	ldr	r3, [r0, #0]
    4068:	ldr	r3, [r3, #68]	; 0x44
    406a:	cmp	r3, r5
    406c:	bne.w	437e <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x3aa>
    4070:	ldr	r0, [r0, #16]
    4072:	cmp	r0, #0
    4074:	beq.w	422c <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x258>
    4078:	ldr	r3, [r0, #0]
    407a:	ldr	r3, [r3, #68]	; 0x44
    407c:	blx	r3
    407e:	mov	r4, r0
  #if DEBUG>1
    Serial.print("From "); Serial.print(store0); Serial.print(": ");Serial.println(oldfilename);
    Serial.print("To   "); Serial.print(store1); Serial.print(": ");Serial.println(newfilename);
  #endif

  File f1 = sd_open(store0,oldfilename,FILE_READ); if(!f1) {DBG_FAIL_MACRO; return false;}
    4080:	cmp	r4, #0
    4082:	beq.w	4866 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x892>
    4086:	add.w	r6, r6, r7, lsl #2
    408a:	add	r0, sp, #20
    408c:	movs	r3, #2
    408e:	ldr.w	r2, [sp, #2128]	; 0x850
    4092:	ldr	r1, [r6, #84]	; 0x54
    4094:	ldr	r4, [r1, #0]
    4096:	ldr	r4, [r4, #0]
    4098:	blx	r4
    409a:	ldr	r0, [sp, #36]	; 0x24
    409c:	cmp	r0, #0
    409e:	beq.w	4384 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x3b0>
    40a2:	ldr	r3, [r0, #0]
    40a4:	ldr	r3, [r3, #68]	; 0x44
    40a6:	cmp	r3, r5
    40a8:	bne.w	454e <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x57a>
    40ac:	ldr	r0, [r0, #16]
    40ae:	cmp	r0, #0
    40b0:	beq.w	4384 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x3b0>
    40b4:	ldr	r3, [r0, #0]
    40b6:	ldr	r3, [r3, #68]	; 0x44
    40b8:	cmp	r3, r5
    40ba:	bne.w	454e <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x57a>
    40be:	ldr	r0, [r0, #16]
    40c0:	cmp	r0, #0
    40c2:	beq.w	4384 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x3b0>
    40c6:	ldr	r3, [r0, #0]
    40c8:	ldr	r3, [r3, #68]	; 0x44
    40ca:	cmp	r3, r5
    40cc:	bne.w	454e <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x57a>
    40d0:	ldr	r0, [r0, #16]
    40d2:	cmp	r0, #0
    40d4:	beq.w	4384 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x3b0>
    40d8:	ldr	r3, [r0, #0]
    40da:	ldr	r3, [r3, #68]	; 0x44
    40dc:	cmp	r3, r5
    40de:	bne.w	454e <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x57a>
    40e2:	ldr	r0, [r0, #16]
    40e4:	cmp	r0, #0
    40e6:	beq.w	4384 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x3b0>
    40ea:	ldr	r3, [r0, #0]
    40ec:	ldr	r3, [r3, #68]	; 0x44
    40ee:	cmp	r3, r5
    40f0:	bne.w	454e <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x57a>
    40f4:	ldr	r0, [r0, #16]
    40f6:	cmp	r0, #0
    40f8:	beq.w	4384 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x3b0>
    40fc:	ldr	r3, [r0, #0]
    40fe:	ldr	r3, [r3, #68]	; 0x44
    4100:	cmp	r3, r5
    4102:	bne.w	454e <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x57a>
    4106:	ldr	r0, [r0, #16]
    4108:	cmp	r0, #0
    410a:	beq.w	4384 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x3b0>
    410e:	ldr	r3, [r0, #0]
    4110:	ldr	r3, [r3, #68]	; 0x44
    4112:	cmp	r3, r5
    4114:	bne.w	454e <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x57a>
    4118:	ldr	r0, [r0, #16]
    411a:	cmp	r0, #0
    411c:	beq.w	4384 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x3b0>
    4120:	ldr	r3, [r0, #0]
    4122:	ldr	r3, [r3, #68]	; 0x44
    4124:	cmp	r3, r5
    4126:	bne.w	454e <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x57a>
    412a:	ldr	r0, [r0, #16]
    412c:	cmp	r0, #0
    412e:	beq.w	4384 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x3b0>
    4132:	ldr	r3, [r0, #0]
    4134:	ldr	r3, [r3, #68]	; 0x44
    4136:	cmp	r3, r5
    4138:	bne.w	454e <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x57a>
    413c:	ldr	r0, [r0, #16]
    413e:	cmp	r0, #0
    4140:	beq.w	4384 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x3b0>
    4144:	ldr	r3, [r0, #0]
    4146:	ldr	r3, [r3, #68]	; 0x44
    4148:	cmp	r3, r5
    414a:	bne.w	454e <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x57a>
    414e:	ldr	r0, [r0, #16]
    4150:	cmp	r0, #0
    4152:	beq.w	4384 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x3b0>
    4156:	ldr	r3, [r0, #0]
    4158:	ldr	r3, [r3, #68]	; 0x44
    415a:	blx	r3
  File f2 = sd_open(store1,newfilename,FILE_WRITE_BEGIN);
  if(!f2) { f1.close(); {DBG_FAIL_MACRO; return false;}}
    415c:	cmp	r0, #0
    415e:	beq.w	4384 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x3b0>
    4162:	mov.w	r4, #4294967295
    4166:	ldr	r5, [pc, #264]	; (4270 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x29c>)
	}
	virtual size_t write(const void *buf, size_t size) {
		return (f) ? f->write(buf, size) : 0;
	}
	virtual int available() {
		return (f) ? f->available() : 0;
    4168:	ldr	r3, [sp, #16]
    416a:	cmp	r3, #0
    416c:	beq.w	476a <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x796>
    4170:	ldr	r1, [r3, #0]
    4172:	ldr	r2, [r1, #16]
    4174:	cmp	r2, r5
    4176:	bne.w	475c <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x788>
    417a:	ldr	r2, [r3, #16]
    417c:	cmp	r2, #0
    417e:	beq.w	4762 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x78e>
    4182:	ldr	r0, [r2, #0]
    4184:	ldr	r6, [r0, #16]
    4186:	cmp	r6, r5
    4188:	bne.w	4604 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x630>
    418c:	ldr	r0, [r2, #16]
    418e:	cmp	r0, #0
    4190:	beq.w	4552 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x57e>
    4194:	ldr	r6, [r0, #0]
    4196:	ldr	r6, [r6, #16]
    4198:	cmp	r6, r5
    419a:	bne.w	4606 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x632>
    419e:	ldr	r0, [r0, #16]
    41a0:	cmp	r0, #0
    41a2:	beq.w	4552 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x57e>
    41a6:	ldr	r6, [r0, #0]
    41a8:	ldr	r6, [r6, #16]
    41aa:	cmp	r6, r5
    41ac:	bne.w	4606 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x632>
    41b0:	ldr	r0, [r0, #16]
    41b2:	cmp	r0, #0
    41b4:	beq.w	4552 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x57e>
    41b8:	ldr	r6, [r0, #0]
    41ba:	ldr	r6, [r6, #16]
    41bc:	cmp	r6, r5
    41be:	bne.w	4606 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x632>
    41c2:	ldr	r0, [r0, #16]
    41c4:	cmp	r0, #0
    41c6:	beq.w	4552 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x57e>
    41ca:	ldr	r6, [r0, #0]
    41cc:	ldr	r6, [r6, #16]
    41ce:	cmp	r6, r5
    41d0:	bne.w	4606 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x632>
    41d4:	ldr	r0, [r0, #16]
    41d6:	cmp	r0, #0
    41d8:	beq.w	4552 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x57e>
    41dc:	ldr	r6, [r0, #0]
    41de:	ldr	r6, [r6, #16]
    41e0:	cmp	r6, r5
    41e2:	bne.w	4606 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x632>
    41e6:	ldr	r0, [r0, #16]
    41e8:	cmp	r0, #0
    41ea:	beq.w	4552 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x57e>
    41ee:	ldr	r6, [r0, #0]
    41f0:	ldr	r6, [r6, #16]
    41f2:	cmp	r6, r5
    41f4:	bne.w	4606 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x632>
    41f8:	ldr	r0, [r0, #16]
    41fa:	cmp	r0, #0
    41fc:	beq.w	4552 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x57e>
    4200:	ldr	r6, [r0, #0]
    4202:	ldr	r6, [r6, #16]
    4204:	cmp	r6, r5
    4206:	bne.w	4606 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x632>
    420a:	ldr	r0, [r0, #16]
    420c:	cmp	r0, #0
    420e:	beq.w	4552 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x57e>
    4212:	ldr	r6, [r0, #0]
    4214:	ldr	r6, [r6, #16]
    4216:	cmp	r6, r5
    4218:	bne.w	4606 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x632>
    421c:	ldr	r0, [r0, #16]
    421e:	cmp	r0, #0
    4220:	beq.w	4552 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x57e>
    4224:	ldr	r3, [r0, #0]
    4226:	ldr	r3, [r3, #16]
    4228:	blx	r3
    422a:	b.n	4608 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x634>
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    422c:	ldr	r6, [pc, #68]	; (4274 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x2a0>)
    422e:	movs	r4, #0
    4230:	str	r6, [sp, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    4232:	ldr	r3, [r2, #16]
    4234:	subs	r3, #1
    4236:	str	r3, [r2, #16]
    4238:	cbnz	r3, 4260 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x28c>
    423a:	ldr	r5, [sp, #16]
    423c:	cbz	r5, 4260 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x28c>
    423e:	ldr	r3, [r5, #0]
    4240:	ldr	r2, [pc, #52]	; (4278 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x2a4>)
    4242:	ldr	r3, [r3, #32]
    4244:	cmp	r3, r2
    4246:	bne.w	47fa <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x826>
    424a:	ldr	r1, [r5, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    424c:	str	r6, [r5, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    424e:	cbz	r1, 4258 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x284>
    4250:	ldr	r3, [r1, #16]
    4252:	subs	r3, #1
    4254:	str	r3, [r1, #16]
    4256:	cbz	r3, 427c <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x2a8>
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
		invalidate();
	}
    4258:	mov	r0, r5
    425a:	movs	r1, #20
    425c:	bl	1006c <operator delete(void*, unsigned int)>
  // close all files
  f1.close();
  f2.close();
  if(nd<0) {DBG_FAIL_MACRO; return false;}
  return true;
}
    4260:	mov	r0, r4
    4262:	addw	sp, sp, #2092	; 0x82c
    4266:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    426a:	nop
    426c:	.word	0x0000011d
    4270:	.word	0x000000a5
    4274:	.word	0x20000074
    4278:	.word	0x00000b4d
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    427c:	ldr	r7, [r5, #16]
    427e:	cmp	r7, #0
    4280:	beq.n	4258 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x284>
    4282:	ldr	r3, [r7, #0]
    4284:	ldr	r3, [r3, #32]
    4286:	cmp	r3, r2
    4288:	bne.w	481c <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x848>
    428c:	ldr	r1, [r7, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    428e:	str	r6, [r7, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    4290:	cmp	r1, #0
    4292:	beq.n	4372 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x39e>
    4294:	ldr	r3, [r1, #16]
    4296:	subs	r3, #1
    4298:	str	r3, [r1, #16]
    429a:	cmp	r3, #0
    429c:	bne.n	4372 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x39e>
    429e:	ldr.w	r8, [r7, #16]
    42a2:	cmp.w	r8, #0
    42a6:	beq.n	4372 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x39e>
    42a8:	ldr.w	r3, [r8]
    42ac:	ldr	r3, [r3, #32]
    42ae:	cmp	r3, r2
    42b0:	bne.w	4842 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x86e>
    42b4:	ldr.w	r1, [r8, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    42b8:	str.w	r6, [r8]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    42bc:	cmp	r1, #0
    42be:	beq.n	436a <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x396>
    42c0:	ldr	r3, [r1, #16]
    42c2:	subs	r3, #1
    42c4:	str	r3, [r1, #16]
    42c6:	cmp	r3, #0
    42c8:	bne.n	436a <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x396>
    42ca:	ldr.w	r9, [r8, #16]
    42ce:	cmp.w	r9, #0
    42d2:	beq.n	436a <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x396>
    42d4:	ldr.w	r3, [r9]
    42d8:	ldr	r3, [r3, #32]
    42da:	cmp	r3, r2
    42dc:	bne.w	4848 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x874>
    42e0:	ldr.w	r1, [r9, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    42e4:	str.w	r6, [r9]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    42e8:	cmp	r1, #0
    42ea:	beq.n	4362 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x38e>
    42ec:	ldr	r3, [r1, #16]
    42ee:	subs	r3, #1
    42f0:	str	r3, [r1, #16]
    42f2:	cmp	r3, #0
    42f4:	bne.n	4362 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x38e>
    42f6:	ldr.w	sl, [r9, #16]
    42fa:	cmp.w	sl, #0
    42fe:	beq.n	4362 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x38e>
    4300:	ldr.w	r3, [sl]
    4304:	ldr	r3, [r3, #32]
    4306:	cmp	r3, r2
    4308:	bne.w	485a <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x886>
    430c:	ldr.w	r1, [sl, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    4310:	str.w	r6, [sl]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    4314:	cbz	r1, 435a <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x386>
    4316:	ldr	r3, [r1, #16]
    4318:	subs	r3, #1
    431a:	str	r3, [r1, #16]
    431c:	cbnz	r3, 435a <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x386>
    431e:	ldr.w	fp, [sl, #16]
    4322:	cmp.w	fp, #0
    4326:	beq.n	435a <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x386>
    4328:	ldr.w	r3, [fp]
    432c:	ldr	r3, [r3, #32]
    432e:	cmp	r3, r2
    4330:	bne.w	4860 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x88c>
    4334:	ldr.w	r2, [fp, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    4338:	str.w	r6, [fp]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    433c:	cbz	r2, 4352 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x37e>
    433e:	ldr	r3, [r2, #16]
    4340:	subs	r3, #1
    4342:	str	r3, [r2, #16]
    4344:	cbnz	r3, 4352 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x37e>
    4346:	ldr.w	r0, [fp, #16]
    434a:	cbz	r0, 4352 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x37e>
    434c:	ldr	r3, [r0, #0]
    434e:	ldr	r3, [r3, #32]
    4350:	blx	r3
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
		invalidate();
	}
    4352:	mov	r0, fp
    4354:	movs	r1, #20
    4356:	bl	1006c <operator delete(void*, unsigned int)>
    435a:	mov	r0, sl
    435c:	movs	r1, #20
    435e:	bl	1006c <operator delete(void*, unsigned int)>
    4362:	mov	r0, r9
    4364:	movs	r1, #20
    4366:	bl	1006c <operator delete(void*, unsigned int)>
    436a:	mov	r0, r8
    436c:	movs	r1, #20
    436e:	bl	1006c <operator delete(void*, unsigned int)>
    4372:	mov	r0, r7
    4374:	movs	r1, #20
    4376:	bl	1006c <operator delete(void*, unsigned int)>
    437a:	b.n	4258 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x284>
	}
	virtual void close() {
		if (f) f->close();
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
    437c:	mov	r0, r2
    437e:	blx	r3
    4380:	mov	r4, r0
    4382:	b.n	4080 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0xac>
	}
	virtual uint64_t size() {
		return (f) ? f->size() : 0;
	}
	virtual void close() {
		if (f) f->close();
    4384:	ldr	r0, [sp, #16]
    4386:	cmp	r0, #0
    4388:	beq.n	442a <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x456>
    438a:	ldr	r3, [r0, #0]
    438c:	ldr	r1, [pc, #616]	; (45f8 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x624>)
    438e:	ldr	r3, [r3, #64]	; 0x40
    4390:	cmp	r3, r1
    4392:	bne.w	4546 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x572>
    4396:	ldr	r0, [r0, #16]
    4398:	cmp	r0, #0
    439a:	beq.n	442a <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x456>
    439c:	ldr	r3, [r0, #0]
    439e:	ldr	r3, [r3, #64]	; 0x40
    43a0:	cmp	r3, r1
    43a2:	bne.w	4546 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x572>
    43a6:	ldr	r0, [r0, #16]
    43a8:	cmp	r0, #0
    43aa:	beq.n	442a <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x456>
    43ac:	ldr	r3, [r0, #0]
    43ae:	ldr	r3, [r3, #64]	; 0x40
    43b0:	cmp	r3, r1
    43b2:	bne.w	4546 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x572>
    43b6:	ldr	r0, [r0, #16]
    43b8:	cmp	r0, #0
    43ba:	beq.n	442a <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x456>
    43bc:	ldr	r3, [r0, #0]
    43be:	ldr	r3, [r3, #64]	; 0x40
    43c0:	cmp	r3, r1
    43c2:	bne.w	4546 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x572>
    43c6:	ldr	r0, [r0, #16]
    43c8:	cmp	r0, #0
    43ca:	beq.n	442a <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x456>
    43cc:	ldr	r3, [r0, #0]
    43ce:	ldr	r3, [r3, #64]	; 0x40
    43d0:	cmp	r3, r1
    43d2:	bne.w	4546 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x572>
    43d6:	ldr	r0, [r0, #16]
    43d8:	cbz	r0, 442a <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x456>
    43da:	ldr	r3, [r0, #0]
    43dc:	ldr	r3, [r3, #64]	; 0x40
    43de:	cmp	r3, r1
    43e0:	bne.w	4546 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x572>
    43e4:	ldr	r0, [r0, #16]
    43e6:	cbz	r0, 442a <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x456>
    43e8:	ldr	r3, [r0, #0]
    43ea:	ldr	r3, [r3, #64]	; 0x40
    43ec:	cmp	r3, r1
    43ee:	bne.w	4546 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x572>
    43f2:	ldr	r0, [r0, #16]
    43f4:	cbz	r0, 442a <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x456>
    43f6:	ldr	r3, [r0, #0]
    43f8:	ldr	r3, [r3, #64]	; 0x40
    43fa:	cmp	r3, r1
    43fc:	bne.w	4546 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x572>
    4400:	ldr	r0, [r0, #16]
    4402:	cbz	r0, 442a <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x456>
    4404:	ldr	r3, [r0, #0]
    4406:	ldr	r3, [r3, #64]	; 0x40
    4408:	cmp	r3, r1
    440a:	bne.w	4546 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x572>
    440e:	ldr	r0, [r0, #16]
    4410:	cbz	r0, 442a <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x456>
    4412:	ldr	r3, [r0, #0]
    Serial.print("To   "); Serial.print(store1); Serial.print(": ");Serial.println(newfilename);
  #endif

  File f1 = sd_open(store0,oldfilename,FILE_READ); if(!f1) {DBG_FAIL_MACRO; return false;}
  File f2 = sd_open(store1,newfilename,FILE_WRITE_BEGIN);
  if(!f2) { f1.close(); {DBG_FAIL_MACRO; return false;}}
    4414:	movs	r4, #0
    4416:	ldr	r3, [r3, #64]	; 0x40
    4418:	blx	r3
    441a:	ldr	r3, [sp, #36]	; 0x24
    441c:	b.n	442e <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x45a>
  #if DEBUG>1
    Serial.print("From "); Serial.print(store0); Serial.print(": ");Serial.println(oldfilename);
    Serial.print("To   "); Serial.print(store1); Serial.print(": ");Serial.println(newfilename);
  #endif

  File f1 = sd_open(store0,oldfilename,FILE_READ); if(!f1) {DBG_FAIL_MACRO; return false;}
    441e:	mov	r4, r2
  // close all files
  f1.close();
  f2.close();
  if(nd<0) {DBG_FAIL_MACRO; return false;}
  return true;
}
    4420:	mov	r0, r4
    4422:	addw	sp, sp, #2092	; 0x82c
    4426:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    442a:	ldr	r3, [sp, #36]	; 0x24
    Serial.print("To   "); Serial.print(store1); Serial.print(": ");Serial.println(newfilename);
  #endif

  File f1 = sd_open(store0,oldfilename,FILE_READ); if(!f1) {DBG_FAIL_MACRO; return false;}
  File f2 = sd_open(store1,newfilename,FILE_WRITE_BEGIN);
  if(!f2) { f1.close(); {DBG_FAIL_MACRO; return false;}}
    442c:	movs	r4, #0
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    442e:	ldr	r6, [pc, #460]	; (45fc <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x628>)
    4430:	str	r6, [sp, #20]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    4432:	cmp	r3, #0
    4434:	beq.w	453a <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x566>
    4438:	ldr	r2, [r3, #16]
    443a:	subs	r2, #1
    443c:	str	r2, [r3, #16]
    443e:	cmp	r2, #0
    4440:	bne.n	453a <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x566>
    4442:	ldr	r5, [sp, #36]	; 0x24
    4444:	cmp	r5, #0
    4446:	beq.n	453a <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x566>
    4448:	ldr	r3, [r5, #0]
    444a:	ldr	r2, [pc, #436]	; (4600 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x62c>)
    444c:	ldr	r3, [r3, #32]
    444e:	cmp	r3, r2
    4450:	bne.w	4822 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x84e>
    4454:	ldr	r1, [r5, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    4456:	str	r6, [r5, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    4458:	cmp	r1, #0
    445a:	beq.n	4532 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x55e>
    445c:	ldr	r3, [r1, #16]
    445e:	subs	r3, #1
    4460:	str	r3, [r1, #16]
    4462:	cmp	r3, #0
    4464:	bne.n	4532 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x55e>
    4466:	ldr	r7, [r5, #16]
    4468:	cmp	r7, #0
    446a:	beq.n	4532 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x55e>
    446c:	ldr	r3, [r7, #0]
    446e:	ldr	r3, [r3, #32]
    4470:	cmp	r3, r2
    4472:	bne.w	483c <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x868>
    4476:	ldr	r1, [r7, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    4478:	str	r6, [r7, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    447a:	cmp	r1, #0
    447c:	beq.n	452a <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x556>
    447e:	ldr	r3, [r1, #16]
    4480:	subs	r3, #1
    4482:	str	r3, [r1, #16]
    4484:	cmp	r3, #0
    4486:	bne.n	452a <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x556>
    4488:	ldr.w	r8, [r7, #16]
    448c:	cmp.w	r8, #0
    4490:	beq.n	452a <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x556>
    4492:	ldr.w	r3, [r8]
    4496:	ldr	r3, [r3, #32]
    4498:	cmp	r3, r2
    449a:	bne.w	484e <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x87a>
    449e:	ldr.w	r1, [r8, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    44a2:	str.w	r6, [r8]
    44a6:	ldr	r0, [pc, #340]	; (45fc <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x628>)
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    44a8:	cmp	r1, #0
    44aa:	beq.n	4522 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x54e>
    44ac:	ldr	r3, [r1, #16]
    44ae:	subs	r3, #1
    44b0:	str	r3, [r1, #16]
    44b2:	cmp	r3, #0
    44b4:	bne.n	4522 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x54e>
    44b6:	ldr.w	r9, [r8, #16]
    44ba:	cmp.w	r9, #0
    44be:	beq.n	4522 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x54e>
    44c0:	ldr.w	r3, [r9]
    44c4:	ldr	r3, [r3, #32]
    44c6:	cmp	r3, r2
    44c8:	bne.w	4854 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x880>
    44cc:	ldr.w	r1, [r9, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    44d0:	str.w	r0, [r9]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    44d4:	cbz	r1, 451a <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x546>
    44d6:	ldr	r3, [r1, #16]
    44d8:	subs	r3, #1
    44da:	str	r3, [r1, #16]
    44dc:	cbnz	r3, 451a <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x546>
    44de:	ldr.w	sl, [r9, #16]
    44e2:	cmp.w	sl, #0
    44e6:	beq.n	451a <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x546>
    44e8:	ldr.w	r3, [sl]
    44ec:	ldr	r3, [r3, #32]
    44ee:	cmp	r3, r2
    44f0:	bne.w	4870 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x89c>
    44f4:	ldr.w	r2, [sl, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    44f8:	str.w	r6, [sl]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    44fc:	cbz	r2, 4512 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x53e>
    44fe:	ldr	r3, [r2, #16]
    4500:	subs	r3, #1
    4502:	str	r3, [r2, #16]
    4504:	cbnz	r3, 4512 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x53e>
    4506:	ldr.w	r0, [sl, #16]
    450a:	cbz	r0, 4512 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x53e>
    450c:	ldr	r3, [r0, #0]
    450e:	ldr	r3, [r3, #32]
    4510:	blx	r3
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
		invalidate();
	}
    4512:	mov	r0, sl
    4514:	movs	r1, #20
    4516:	bl	1006c <operator delete(void*, unsigned int)>
    451a:	mov	r0, r9
    451c:	movs	r1, #20
    451e:	bl	1006c <operator delete(void*, unsigned int)>
    4522:	mov	r0, r8
    4524:	movs	r1, #20
    4526:	bl	1006c <operator delete(void*, unsigned int)>
    452a:	mov	r0, r7
    452c:	movs	r1, #20
    452e:	bl	1006c <operator delete(void*, unsigned int)>
    4532:	mov	r0, r5
    4534:	movs	r1, #20
    4536:	bl	1006c <operator delete(void*, unsigned int)>
    453a:	ldr	r2, [sp, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    453c:	str	r6, [sp, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    453e:	cmp	r2, #0
    4540:	bne.w	4232 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x25e>
    4544:	b.n	4260 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x28c>
	}
	virtual uint64_t size() {
		return (f) ? f->size() : 0;
	}
	virtual void close() {
		if (f) f->close();
    4546:	blx	r3
    4548:	movs	r4, #0
    454a:	ldr	r3, [sp, #36]	; 0x24
    454c:	b.n	442e <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x45a>
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
    454e:	blx	r3
    4550:	b.n	415c <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x188>
	}
	virtual uint64_t size() {
		return (f) ? f->size() : 0;
	}
	virtual void close() {
		if (f) f->close();
    4552:	ldr	r5, [r1, #64]	; 0x40
    4554:	ldr	r1, [pc, #160]	; (45f8 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x624>)
    4556:	cmp	r5, r1
    4558:	bne.w	4828 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x854>
    455c:	mov	r0, r2
    455e:	ldr	r3, [r0, #0]
    4560:	ldr	r3, [r3, #64]	; 0x40
    4562:	cmp	r3, r1
    4564:	bne.w	4818 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x844>
    4568:	ldr	r0, [r0, #16]
    456a:	cmp	r0, #0
    456c:	beq.w	476a <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x796>
    4570:	ldr	r3, [r0, #0]
    4572:	ldr	r3, [r3, #64]	; 0x40
    4574:	cmp	r3, r1
    4576:	bne.w	4818 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x844>
    457a:	ldr	r0, [r0, #16]
    457c:	cmp	r0, #0
    457e:	beq.w	476a <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x796>
    4582:	ldr	r3, [r0, #0]
    4584:	ldr	r3, [r3, #64]	; 0x40
    4586:	cmp	r3, r1
    4588:	bne.w	4818 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x844>
    458c:	ldr	r0, [r0, #16]
    458e:	cmp	r0, #0
    4590:	beq.w	476a <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x796>
    4594:	ldr	r3, [r0, #0]
    4596:	ldr	r3, [r3, #64]	; 0x40
    4598:	cmp	r3, r1
    459a:	bne.w	4818 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x844>
    459e:	ldr	r0, [r0, #16]
    45a0:	cmp	r0, #0
    45a2:	beq.w	476a <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x796>
    45a6:	ldr	r3, [r0, #0]
    45a8:	ldr	r3, [r3, #64]	; 0x40
    45aa:	cmp	r3, r1
    45ac:	bne.w	4818 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x844>
    45b0:	ldr	r0, [r0, #16]
    45b2:	cmp	r0, #0
    45b4:	beq.w	476a <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x796>
    45b8:	ldr	r3, [r0, #0]
    45ba:	ldr	r3, [r3, #64]	; 0x40
    45bc:	cmp	r3, r1
    45be:	bne.w	4818 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x844>
    45c2:	ldr	r0, [r0, #16]
    45c4:	cmp	r0, #0
    45c6:	beq.w	476a <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x796>
    45ca:	ldr	r3, [r0, #0]
    45cc:	ldr	r3, [r3, #64]	; 0x40
    45ce:	cmp	r3, r1
    45d0:	bne.w	4818 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x844>
    45d4:	ldr	r0, [r0, #16]
    45d6:	cmp	r0, #0
    45d8:	beq.w	476a <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x796>
    45dc:	ldr	r3, [r0, #0]
    45de:	ldr	r3, [r3, #64]	; 0x40
    45e0:	cmp	r3, r1
    45e2:	bne.w	4818 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x844>
    45e6:	ldr	r0, [r0, #16]
    45e8:	cmp	r0, #0
    45ea:	beq.w	476a <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x796>
    45ee:	ldr	r3, [r0, #0]
    45f0:	ldr	r3, [r3, #64]	; 0x40
    45f2:	blx	r3
    45f4:	b.n	476a <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x796>
    45f6:	nop
    45f8:	.word	0x00000111
    45fc:	.word	0x20000074
    4600:	.word	0x00000b4d
	}
	virtual size_t write(const void *buf, size_t size) {
		return (f) ? f->write(buf, size) : 0;
	}
	virtual int available() {
		return (f) ? f->available() : 0;
    4604:	mov	r0, r2
    4606:	blx	r6

  while(f1.available()>0)
    4608:	cmp	r0, #0
	unsigned int getRefcount() { // testing only
		return refcount;
	}
#endif
	virtual size_t read(void *buf, size_t nbyte) {
		return (f) ? f->read(buf, nbyte) : 0;
    460a:	ldr	r3, [sp, #16]
    460c:	ble.n	46b8 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6e4>
    460e:	cmp	r3, #0
    4610:	beq.n	46c0 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6ec>
    4612:	ldr	r1, [r3, #0]
    4614:	ldr	r2, [pc, #536]	; (4830 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x85c>)
    4616:	ldr	r4, [r1, #40]	; 0x28
    4618:	cmp	r4, r2
    461a:	bne.n	469a <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6c6>
    461c:	ldr	r0, [r3, #16]
    461e:	cmp	r0, #0
    4620:	beq.n	46c0 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6ec>
    4622:	ldr	r1, [r0, #0]
    4624:	ldr	r4, [r1, #40]	; 0x28
    4626:	cmp	r4, r2
    4628:	bne.n	469c <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6c8>
    462a:	ldr	r0, [r0, #16]
    462c:	cmp	r0, #0
    462e:	beq.n	46c0 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6ec>
    4630:	ldr	r1, [r0, #0]
    4632:	ldr	r4, [r1, #40]	; 0x28
    4634:	cmp	r4, r2
    4636:	bne.n	469c <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6c8>
    4638:	ldr	r0, [r0, #16]
    463a:	cmp	r0, #0
    463c:	beq.n	46c0 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6ec>
    463e:	ldr	r1, [r0, #0]
    4640:	ldr	r4, [r1, #40]	; 0x28
    4642:	cmp	r4, r2
    4644:	bne.n	469c <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6c8>
    4646:	ldr	r0, [r0, #16]
    4648:	cmp	r0, #0
    464a:	beq.n	46c0 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6ec>
    464c:	ldr	r1, [r0, #0]
    464e:	ldr	r4, [r1, #40]	; 0x28
    4650:	cmp	r4, r2
    4652:	bne.n	469c <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6c8>
    4654:	ldr	r0, [r0, #16]
    4656:	cmp	r0, #0
    4658:	beq.n	46c0 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6ec>
    465a:	ldr	r1, [r0, #0]
    465c:	ldr	r4, [r1, #40]	; 0x28
    465e:	cmp	r4, r2
    4660:	bne.n	469c <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6c8>
    4662:	ldr	r0, [r0, #16]
    4664:	cbz	r0, 46c0 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6ec>
    4666:	ldr	r1, [r0, #0]
    4668:	ldr	r4, [r1, #40]	; 0x28
    466a:	cmp	r4, r2
    466c:	bne.n	469c <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6c8>
    466e:	ldr	r0, [r0, #16]
    4670:	cbz	r0, 46c0 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6ec>
    4672:	ldr	r1, [r0, #0]
    4674:	ldr	r4, [r1, #40]	; 0x28
    4676:	cmp	r4, r2
    4678:	bne.n	469c <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6c8>
    467a:	ldr	r0, [r0, #16]
    467c:	cbz	r0, 46c0 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6ec>
    467e:	ldr	r1, [r0, #0]
    4680:	ldr	r4, [r1, #40]	; 0x28
    4682:	cmp	r4, r2
    4684:	bne.n	469c <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6c8>
    4686:	ldr	r0, [r0, #16]
    4688:	cbz	r0, 46c0 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6ec>
    468a:	ldr	r3, [r0, #0]
    468c:	mov.w	r2, #2048	; 0x800
    4690:	add	r1, sp, #40	; 0x28
    4692:	ldr	r3, [r3, #40]	; 0x28
    4694:	blx	r3
    4696:	mov	r2, r0
    4698:	b.n	46a6 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6d2>
    469a:	mov	r0, r3
    469c:	mov.w	r2, #2048	; 0x800
    46a0:	add	r1, sp, #40	; 0x28
    46a2:	blx	r4
    46a4:	mov	r2, r0
  {
    nd=f1.read(buffer,nbuf);
    if(nd<0) break;     // read error
    46a6:	subs	r4, r2, #0
    46a8:	blt.n	46b6 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6e2>
	}
	virtual size_t write(const void *buf, size_t size) {
		return (f) ? f->write(buf, size) : 0;
    46aa:	ldr	r0, [sp, #36]	; 0x24
    46ac:	cbnz	r0, 46cc <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6f8>
    f2.write(buffer,nd);
    if(nd<nbuf) break;  // end of file
    46ae:	cmp.w	r4, #2048	; 0x800
    46b2:	bge.w	4168 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x194>
    46b6:	ldr	r3, [sp, #16]
	}
	virtual uint64_t size() {
		return (f) ? f->size() : 0;
	}
	virtual void close() {
		if (f) f->close();
    46b8:	cmp	r3, #0
    46ba:	bne.w	4806 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x832>
    46be:	b.n	476a <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x796>
#endif
	virtual size_t read(void *buf, size_t nbyte) {
		return (f) ? f->read(buf, nbyte) : 0;
	}
	virtual size_t write(const void *buf, size_t size) {
		return (f) ? f->write(buf, size) : 0;
    46c0:	ldr	r0, [sp, #36]	; 0x24
    46c2:	cmp	r0, #0
    46c4:	beq.w	4800 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x82c>
    46c8:	movs	r2, #0
  File f2 = sd_open(store1,newfilename,FILE_WRITE_BEGIN);
  if(!f2) { f1.close(); {DBG_FAIL_MACRO; return false;}}

  while(f1.available()>0)
  {
    nd=f1.read(buffer,nbuf);
    46ca:	mov	r4, r2
    46cc:	ldr	r1, [r0, #0]
    46ce:	ldr	r3, [pc, #356]	; (4834 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x860>)
    46d0:	ldr	r6, [r1, #44]	; 0x2c
    46d2:	cmp	r6, r3
    46d4:	bne.n	4756 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x782>
    46d6:	ldr	r0, [r0, #16]
    46d8:	cmp	r0, #0
    46da:	beq.n	46ae <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6da>
    46dc:	ldr	r1, [r0, #0]
    46de:	ldr	r6, [r1, #44]	; 0x2c
    46e0:	cmp	r6, r3
    46e2:	bne.n	4756 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x782>
    46e4:	ldr	r0, [r0, #16]
    46e6:	cmp	r0, #0
    46e8:	beq.n	46ae <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6da>
    46ea:	ldr	r1, [r0, #0]
    46ec:	ldr	r6, [r1, #44]	; 0x2c
    46ee:	cmp	r6, r3
    46f0:	bne.n	4756 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x782>
    46f2:	ldr	r0, [r0, #16]
    46f4:	cmp	r0, #0
    46f6:	beq.n	46ae <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6da>
    46f8:	ldr	r1, [r0, #0]
    46fa:	ldr	r6, [r1, #44]	; 0x2c
    46fc:	cmp	r6, r3
    46fe:	bne.n	4756 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x782>
    4700:	ldr	r0, [r0, #16]
    4702:	cmp	r0, #0
    4704:	beq.n	46ae <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6da>
    4706:	ldr	r1, [r0, #0]
    4708:	ldr	r6, [r1, #44]	; 0x2c
    470a:	cmp	r6, r3
    470c:	bne.n	4756 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x782>
    470e:	ldr	r0, [r0, #16]
    4710:	cmp	r0, #0
    4712:	beq.n	46ae <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6da>
    4714:	ldr	r1, [r0, #0]
    4716:	ldr	r6, [r1, #44]	; 0x2c
    4718:	cmp	r6, r3
    471a:	bne.n	4756 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x782>
    471c:	ldr	r0, [r0, #16]
    471e:	cmp	r0, #0
    4720:	beq.n	46ae <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6da>
    4722:	ldr	r1, [r0, #0]
    4724:	ldr	r6, [r1, #44]	; 0x2c
    4726:	cmp	r6, r3
    4728:	bne.n	4756 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x782>
    472a:	ldr	r0, [r0, #16]
    472c:	cmp	r0, #0
    472e:	beq.n	46ae <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6da>
    4730:	ldr	r1, [r0, #0]
    4732:	ldr	r6, [r1, #44]	; 0x2c
    4734:	cmp	r6, r3
    4736:	bne.n	4756 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x782>
    4738:	ldr	r0, [r0, #16]
    473a:	cmp	r0, #0
    473c:	beq.n	46ae <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6da>
    473e:	ldr	r1, [r0, #0]
    4740:	ldr	r6, [r1, #44]	; 0x2c
    4742:	cmp	r6, r3
    4744:	bne.n	4756 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x782>
    4746:	ldr	r0, [r0, #16]
    4748:	cmp	r0, #0
    474a:	beq.n	46ae <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6da>
    474c:	ldr	r3, [r0, #0]
    474e:	add	r1, sp, #40	; 0x28
    4750:	ldr	r3, [r3, #44]	; 0x2c
    4752:	blx	r3
    4754:	b.n	46ae <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6da>
    4756:	add	r1, sp, #40	; 0x28
    4758:	blx	r6
    475a:	b.n	46ae <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6da>
	}
	virtual int available() {
		return (f) ? f->available() : 0;
    475c:	mov	r0, r3
    475e:	blx	r2
    4760:	b.n	4608 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x634>
	}
	virtual uint64_t size() {
		return (f) ? f->size() : 0;
	}
	virtual void close() {
		if (f) f->close();
    4762:	ldr	r5, [r1, #64]	; 0x40
    4764:	ldr	r2, [pc, #208]	; (4838 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x864>)
    4766:	cmp	r5, r2
    4768:	bne.n	4828 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x854>
    476a:	ldr	r3, [sp, #36]	; 0x24
    476c:	cmp	r3, #0
    476e:	beq.n	47f4 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x820>
    4770:	ldr	r2, [r3, #0]
    4772:	ldr	r1, [pc, #196]	; (4838 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x864>)
    4774:	ldr	r2, [r2, #64]	; 0x40
    4776:	cmp	r2, r1
    4778:	bne.n	47ee <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x81a>
    477a:	ldr	r0, [r3, #16]
    477c:	cmp	r0, #0
    477e:	beq.n	47f4 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x820>
    4780:	ldr	r2, [r0, #0]
    4782:	ldr	r2, [r2, #64]	; 0x40
    4784:	cmp	r2, r1
    4786:	bne.n	47f0 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x81c>
    4788:	ldr	r0, [r0, #16]
    478a:	cmp	r0, #0
    478c:	beq.n	47f4 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x820>
    478e:	ldr	r2, [r0, #0]
    4790:	ldr	r2, [r2, #64]	; 0x40
    4792:	cmp	r2, r1
    4794:	bne.n	47f0 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x81c>
    4796:	ldr	r0, [r0, #16]
    4798:	cmp	r0, #0
    479a:	beq.n	47f4 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x820>
    479c:	ldr	r2, [r0, #0]
    479e:	ldr	r2, [r2, #64]	; 0x40
    47a0:	cmp	r2, r1
    47a2:	bne.n	47f0 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x81c>
    47a4:	ldr	r0, [r0, #16]
    47a6:	cbz	r0, 47f4 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x820>
    47a8:	ldr	r2, [r0, #0]
    47aa:	ldr	r2, [r2, #64]	; 0x40
    47ac:	cmp	r2, r1
    47ae:	bne.n	47f0 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x81c>
    47b0:	ldr	r0, [r0, #16]
    47b2:	cbz	r0, 47f4 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x820>
    47b4:	ldr	r2, [r0, #0]
    47b6:	ldr	r2, [r2, #64]	; 0x40
    47b8:	cmp	r2, r1
    47ba:	bne.n	47f0 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x81c>
    47bc:	ldr	r0, [r0, #16]
    47be:	cbz	r0, 47f4 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x820>
    47c0:	ldr	r2, [r0, #0]
    47c2:	ldr	r2, [r2, #64]	; 0x40
    47c4:	cmp	r2, r1
    47c6:	bne.n	47f0 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x81c>
    47c8:	ldr	r0, [r0, #16]
    47ca:	cbz	r0, 47f4 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x820>
    47cc:	ldr	r2, [r0, #0]
    47ce:	ldr	r2, [r2, #64]	; 0x40
    47d0:	cmp	r2, r1
    47d2:	bne.n	47f0 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x81c>
    47d4:	ldr	r0, [r0, #16]
    47d6:	cbz	r0, 47f4 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x820>
    47d8:	ldr	r2, [r0, #0]
    47da:	ldr	r2, [r2, #64]	; 0x40
    47dc:	cmp	r2, r1
    47de:	bne.n	47f0 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x81c>
    47e0:	ldr	r0, [r0, #16]
    47e2:	cbz	r0, 47f4 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x820>
    47e4:	ldr	r3, [r0, #0]
    47e6:	ldr	r3, [r3, #64]	; 0x40
    47e8:	blx	r3
    47ea:	ldr	r3, [sp, #36]	; 0x24
    47ec:	b.n	47f4 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x820>
    47ee:	mov	r0, r3
    47f0:	blx	r2
    47f2:	ldr	r3, [sp, #36]	; 0x24
    if(nd<nbuf) break;  // end of file
  }
  // close all files
  f1.close();
  f2.close();
  if(nd<0) {DBG_FAIL_MACRO; return false;}
    47f4:	mvns	r4, r4
    47f6:	lsrs	r4, r4, #31
    47f8:	b.n	442e <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x45a>
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    47fa:	mov	r0, r5
    47fc:	blx	r3
    47fe:	b.n	4260 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x28c>
	}
	virtual uint64_t size() {
		return (f) ? f->size() : 0;
	}
	virtual void close() {
		if (f) f->close();
    4800:	cmp	r3, #0
    4802:	beq.n	486c <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x898>
  File f2 = sd_open(store1,newfilename,FILE_WRITE_BEGIN);
  if(!f2) { f1.close(); {DBG_FAIL_MACRO; return false;}}

  while(f1.available()>0)
  {
    nd=f1.read(buffer,nbuf);
    4804:	mov	r4, r0
    4806:	ldr	r2, [r3, #0]
    4808:	ldr	r1, [pc, #44]	; (4838 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x864>)
    480a:	ldr	r5, [r2, #64]	; 0x40
    480c:	cmp	r5, r1
    480e:	bne.n	4828 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x854>
    4810:	ldr	r0, [r3, #16]
    4812:	cmp	r0, #0
    4814:	beq.n	476a <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x796>
    4816:	b.n	455e <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x58a>
    4818:	blx	r3
    481a:	b.n	476a <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x796>
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    481c:	mov	r0, r7
    481e:	blx	r3
    4820:	b.n	4258 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x284>
    4822:	mov	r0, r5
    4824:	blx	r3
    4826:	b.n	453a <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x566>
	}
	virtual uint64_t size() {
		return (f) ? f->size() : 0;
	}
	virtual void close() {
		if (f) f->close();
    4828:	mov	r0, r3
    482a:	blx	r5
    482c:	b.n	476a <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x796>
    482e:	nop
    4830:	.word	0x0000008d
    4834:	.word	0x00000099
    4838:	.word	0x00000111
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    483c:	mov	r0, r7
    483e:	blx	r3
    4840:	b.n	4532 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x55e>
    4842:	mov	r0, r8
    4844:	blx	r3
    4846:	b.n	4372 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x39e>
    4848:	mov	r0, r9
    484a:	blx	r3
    484c:	b.n	436a <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x396>
    484e:	mov	r0, r8
    4850:	blx	r3
    4852:	b.n	452a <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x556>
    4854:	mov	r0, r9
    4856:	blx	r3
    4858:	b.n	4522 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x54e>
    485a:	mov	r0, sl
    485c:	blx	r3
    485e:	b.n	4362 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x38e>
    4860:	mov	r0, fp
    4862:	blx	r3
    4864:	b.n	435a <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x386>
    4866:	ldr	r2, [sp, #16]
    4868:	ldr	r6, [pc, #12]	; (4878 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x8a4>)
    486a:	b.n	453c <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x568>
    486c:	mov	r4, r3
    486e:	b.n	47f4 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x820>
    4870:	mov	r0, sl
    4872:	blx	r3
    4874:	b.n	451a <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x546>
    4876:	nop
    4878:	.word	0x20000074

0000487c <MTPStorage_SD::copy(unsigned long, unsigned long, unsigned long)>:
    WriteIndexRecord(newParent,p2o);      
    return false;
  }

  uint32_t MTPStorage_SD::copy(uint32_t handle, uint32_t newStore, uint32_t newParent ) 
  { 
    487c:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4880:	sub.w	sp, sp, #1336	; 0x538
    if(newParent==0xFFFFFFFFUL) newParent=newStore;
    4884:	cmp.w	r3, #4294967295
    4888:	ite	ne
    488a:	movne	r7, r3
    488c:	moveq	r7, r2
    WriteIndexRecord(newParent,p2o);      
    return false;
  }

  uint32_t MTPStorage_SD::copy(uint32_t handle, uint32_t newStore, uint32_t newParent ) 
  { 
    488e:	mov	r4, r0
    if(newParent==0xFFFFFFFFUL) newParent=newStore;

    Record p1 = ReadIndexRecord(handle);
    4890:	mov	r2, r1
    WriteIndexRecord(newParent,p2o);      
    return false;
  }

  uint32_t MTPStorage_SD::copy(uint32_t handle, uint32_t newStore, uint32_t newParent ) 
  { 
    4892:	mov	r8, r1
    if(newParent==0xFFFFFFFFUL) newParent=newStore;

    Record p1 = ReadIndexRecord(handle);
    4894:	mov	r1, r0
    4896:	add	r0, sp, #520	; 0x208
    4898:	bl	2298 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    Record p2 = ReadIndexRecord(newParent);
    489c:	mov	r2, r7
    489e:	mov	r1, r4
    48a0:	add	r0, sp, #792	; 0x318
    48a2:	bl	2298 <MTPStorage_SD::ReadIndexRecord(unsigned long)>

    uint32_t newHandle;
    if(p1.isdir)
    48a6:	ldrb.w	r6, [sp, #532]	; 0x214
    48aa:	cmp	r6, #0
    48ac:	bne.n	4934 <MTPStorage_SD::copy(unsigned long, unsigned long, unsigned long)+0xb8>
      CopyFiles(handle, p2.store, newHandle);
    }
    else
    {  
      Record r;
      strlcpy(r.name, p1.name,MAX_FILENAME_LEN);
    48ae:	add	r1, sp, #536	; 0x218
    48b0:	mov.w	r2, #256	; 0x100
    48b4:	add.w	r0, sp, #1080	; 0x438
    48b8:	bl	11200 <strlcpy>
    index_.write((char*)&r, sizeof(r));
    mtp_lock_storage(false);
  }

  uint32_t MTPStorage_SD::AppendIndexRecord(const Record& r) 
  { uint32_t new_record = index_entries_++;
    48bc:	ldr.w	r5, [r4, #244]	; 0xf4
    }
    else
    {  
      Record r;
      strlcpy(r.name, p1.name,MAX_FILENAME_LEN);
      r.store = p2.store;
    48c0:	ldrh.w	lr, [sp, #806]	; 0x326
    mtp_lock_storage(false);
  }

  uint32_t MTPStorage_SD::AppendIndexRecord(const Record& r) 
  { uint32_t new_record = index_entries_++;
    WriteIndexRecord(new_record, r);
    48c4:	add.w	r2, sp, #1064	; 0x428
    index_.write((char*)&r, sizeof(r));
    mtp_lock_storage(false);
  }

  uint32_t MTPStorage_SD::AppendIndexRecord(const Record& r) 
  { uint32_t new_record = index_entries_++;
    48c8:	adds	r1, r5, #1
      Record r;
      strlcpy(r.name, p1.name,MAX_FILENAME_LEN);
      r.store = p2.store;
      r.parent = newParent;
      r.child = 0;
      r.sibling = p2.child;
    48ca:	ldr	r3, [sp, #796]	; 0x31c
    mtp_lock_storage(false);
  }

  uint32_t MTPStorage_SD::AppendIndexRecord(const Record& r) 
  { uint32_t new_record = index_entries_++;
    WriteIndexRecord(new_record, r);
    48cc:	mov	r0, r4
    }
    else
    {  
      Record r;
      strlcpy(r.name, p1.name,MAX_FILENAME_LEN);
      r.store = p2.store;
    48ce:	strh.w	lr, [sp, #1078]	; 0x436
    index_.write((char*)&r, sizeof(r));
    mtp_lock_storage(false);
  }

  uint32_t MTPStorage_SD::AppendIndexRecord(const Record& r) 
  { uint32_t new_record = index_entries_++;
    48d2:	str.w	r1, [r4, #244]	; 0xf4
    WriteIndexRecord(new_record, r);
    48d6:	mov	r1, r5
      Record r;
      strlcpy(r.name, p1.name,MAX_FILENAME_LEN);
      r.store = p2.store;
      r.parent = newParent;
      r.child = 0;
      r.sibling = p2.child;
    48d8:	str.w	r3, [sp, #1072]	; 0x430
    else
    {  
      Record r;
      strlcpy(r.name, p1.name,MAX_FILENAME_LEN);
      r.store = p2.store;
      r.parent = newParent;
    48dc:	str.w	r7, [sp, #1064]	; 0x428
      r.child = 0;
    48e0:	str.w	r6, [sp, #1068]	; 0x42c
      r.sibling = p2.child;
      r.isdir = 0;
    48e4:	strb.w	r6, [sp, #1076]	; 0x434
      r.scanned = 0;
    48e8:	strb.w	r6, [sp, #1077]	; 0x435
    mtp_lock_storage(false);
  }

  uint32_t MTPStorage_SD::AppendIndexRecord(const Record& r) 
  { uint32_t new_record = index_entries_++;
    WriteIndexRecord(new_record, r);
    48ec:	bl	20c8 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
      r.child = 0;
      r.sibling = p2.child;
      r.isdir = 0;
      r.scanned = 0;
      newHandle = p2.child = AppendIndexRecord(r);
      WriteIndexRecord(newParent, p2);
    48f0:	add	r2, sp, #792	; 0x318
    48f2:	mov	r1, r7
    48f4:	mov	r0, r4

      char oldfilename[MAX_FILENAME_LEN];
      char newfilename[MAX_FILENAME_LEN];
      uint32_t store0 = ConstructFilename(handle,oldfilename,MAX_FILENAME_LEN);
      uint32_t store1 = ConstructFilename(newHandle,newfilename,MAX_FILENAME_LEN);
    48f6:	add	r6, sp, #264	; 0x108
      r.parent = newParent;
      r.child = 0;
      r.sibling = p2.child;
      r.isdir = 0;
      r.scanned = 0;
      newHandle = p2.child = AppendIndexRecord(r);
    48f8:	str	r5, [sp, #796]	; 0x31c
      WriteIndexRecord(newParent, p2);
    48fa:	bl	20c8 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>

      char oldfilename[MAX_FILENAME_LEN];
      char newfilename[MAX_FILENAME_LEN];
      uint32_t store0 = ConstructFilename(handle,oldfilename,MAX_FILENAME_LEN);
    48fe:	mov	r1, r8
    4900:	add	r2, sp, #8
    4902:	mov.w	r3, #256	; 0x100
    4906:	mov	r0, r4
    4908:	bl	26f8 <MTPStorage_SD::ConstructFilename(int, char*, int)>
    490c:	mov	r7, r0
      uint32_t store1 = ConstructFilename(newHandle,newfilename,MAX_FILENAME_LEN);
    490e:	mov	r1, r5
    4910:	mov	r2, r6
    4912:	mov.w	r3, #256	; 0x100
    4916:	mov	r0, r4
    4918:	bl	26f8 <MTPStorage_SD::ConstructFilename(int, char*, int)>

      sd_copy(store0,oldfilename,store1,newfilename);
    491c:	str	r6, [sp, #0]
    491e:	mov	r3, r0
    4920:	add	r2, sp, #8
    4922:	mov	r1, r7
    4924:	adds	r0, r4, #4
    4926:	bl	3fd4 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)>
    }

    return newHandle;
  }
    492a:	mov	r0, r5
    492c:	add.w	sp, sp, #1336	; 0x538
    4930:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    Record p2 = ReadIndexRecord(newParent);

    uint32_t newHandle;
    if(p1.isdir)
    {
      ScanDir(p1.store+1,handle);
    4934:	ldrh.w	r1, [sp, #534]	; 0x216
    4938:	mov	r2, r8
    493a:	mov	r0, r4
      newHandle = Create(p2.store,newParent,p1.isdir,p1.name);
    493c:	add	r5, sp, #536	; 0x218
    Record p2 = ReadIndexRecord(newParent);

    uint32_t newHandle;
    if(p1.isdir)
    {
      ScanDir(p1.store+1,handle);
    493e:	adds	r1, #1
    4940:	bl	2e84 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)>
      newHandle = Create(p2.store,newParent,p1.isdir,p1.name);
    4944:	ldrb.w	r3, [sp, #532]	; 0x214
    4948:	ldr	r0, [r4, #0]
    494a:	mov	r2, r7
    494c:	adds	r3, #0
    494e:	ldrh.w	r1, [sp, #806]	; 0x326
    4952:	str	r5, [sp, #0]
    4954:	it	ne
    4956:	movne	r3, #1
    4958:	ldr	r5, [r0, #44]	; 0x2c
    495a:	mov	r0, r4
    495c:	blx	r5
    495e:	mov	r5, r0
      CopyFiles(handle, p2.store, newHandle);
    4960:	ldr	r0, [r4, #0]
    4962:	mov	r1, r8
    4964:	ldrh.w	r2, [sp, #806]	; 0x326
    4968:	mov	r3, r5
    496a:	ldr	r6, [r0, #84]	; 0x54
    496c:	mov	r0, r4
    496e:	blx	r6

      sd_copy(store0,oldfilename,store1,newfilename);
    }

    return newHandle;
  }
    4970:	mov	r0, r5
    4972:	add.w	sp, sp, #1336	; 0x538
    4976:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    497a:	nop

0000497c <MTPStorage_SD::CopyFiles(unsigned long, unsigned long, unsigned long)>:

bool MTPStorage_SD::CopyFiles(uint32_t handle, uint32_t store, uint32_t newHandle)
{ // assume handle and newHandle point to existing directories
    497c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4980:	mov	r4, r0
    4982:	sub.w	sp, sp, #1608	; 0x648
  if(newHandle==0xFFFFFFFFUL) newHandle=store;
    4986:	cmp.w	r3, #4294967295
    498a:	ite	ne
    498c:	movne	r8, r3
    498e:	moveq	r8, r2
  #if DEBUG>1
    Serial.printf("%d -> %d\n",handle,newHandle);
  #endif

  Record p1=ReadIndexRecord(handle);
    4990:	mov	r2, r1
    4992:	add	r0, sp, #520	; 0x208
    4994:	mov	r1, r4
    4996:	bl	2298 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
  Record p2=ReadIndexRecord(newHandle);
    499a:	mov	r2, r8
    499c:	mov	r1, r4
    499e:	add	r0, sp, #792	; 0x318
  if(newHandle==0xFFFFFFFFUL) newHandle=store;
  #if DEBUG>1
    Serial.printf("%d -> %d\n",handle,newHandle);
  #endif

  Record p1=ReadIndexRecord(handle);
    49a0:	ldrh.w	r9, [sp, #534]	; 0x216
  Record p2=ReadIndexRecord(newHandle);
    49a4:	bl	2298 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
  uint32_t ix= p1.child;
    49a8:	ldr	r6, [sp, #524]	; 0x20c
  uint32_t iy= 0;
  while(ix)
    49aa:	cmp	r6, #0
    49ac:	beq.n	4a80 <MTPStorage_SD::CopyFiles(unsigned long, unsigned long, unsigned long)+0x104>
    49ae:	movs	r5, #0
    49b0:	add	r7, sp, #264	; 0x108

      ScanDir(p1.store,ix); 
      CopyFiles(ix,p2.store,iy); 
    }
    else
    { sd_copy(p1.store,oldfilename,py.store,newfilename);
    49b2:	add.w	sl, r4, #4
    49b6:	b.n	49ea <MTPStorage_SD::CopyFiles(unsigned long, unsigned long, unsigned long)+0x6e>
    bool sd_mkdir(uint32_t store, char *filename) {  return sdx[store]->mkdir(filename);  }
    49b8:	ldrh.w	r3, [sp, #1350]	; 0x546
    49bc:	add.w	r3, r4, r3, lsl #2
    49c0:	ldr	r0, [r3, #88]	; 0x58
    49c2:	ldr	r3, [r0, #0]
    49c4:	ldr	r3, [r3, #8]
    49c6:	blx	r3

    if(py.isdir) 
    { 
      sd_mkdir(py.store,newfilename);

      ScanDir(p1.store,ix); 
    49c8:	mov	r2, r6
    49ca:	mov	r1, r9
    49cc:	mov	r0, r4
    49ce:	bl	2e84 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)>
      CopyFiles(ix,p2.store,iy); 
    49d2:	ldr	r2, [r4, #0]
    49d4:	mov	r1, r6
    49d6:	mov	r3, r5
    49d8:	ldr	r6, [r2, #84]	; 0x54
    49da:	mov	r0, r4
    49dc:	ldrh.w	r2, [sp, #806]	; 0x326
    49e0:	blx	r6
    }
    else
    { sd_copy(p1.store,oldfilename,py.store,newfilename);
    }
    ix = px.sibling;
    49e2:	ldr.w	r6, [sp, #1072]	; 0x430

  Record p1=ReadIndexRecord(handle);
  Record p2=ReadIndexRecord(newHandle);
  uint32_t ix= p1.child;
  uint32_t iy= 0;
  while(ix)
    49e6:	cmp	r6, #0
    49e8:	beq.n	4a6a <MTPStorage_SD::CopyFiles(unsigned long, unsigned long, unsigned long)+0xee>
  { // get child
    Record px = ReadIndexRecord(ix) ;
    49ea:	mov	r2, r6
    49ec:	mov	r1, r4
    49ee:	add.w	r0, sp, #1064	; 0x428
    49f2:	bl	2298 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    Record py = px;
    49f6:	mov.w	r2, #272	; 0x110
    49fa:	add.w	r1, sp, #1064	; 0x428
    49fe:	add.w	r0, sp, #1336	; 0x538
    4a02:	bl	db14 <memcpy>
    py.store = p2.store;
    py.parent = newHandle;
    py.sibling = iy;
    4a06:	str.w	r5, [sp, #1344]	; 0x540
    index_.write((char*)&r, sizeof(r));
    mtp_lock_storage(false);
  }

  uint32_t MTPStorage_SD::AppendIndexRecord(const Record& r) 
  { uint32_t new_record = index_entries_++;
    4a0a:	ldr.w	r5, [r4, #244]	; 0xf4
    WriteIndexRecord(new_record, r);
    4a0e:	add.w	r2, sp, #1336	; 0x538
  uint32_t iy= 0;
  while(ix)
  { // get child
    Record px = ReadIndexRecord(ix) ;
    Record py = px;
    py.store = p2.store;
    4a12:	ldrh.w	lr, [sp, #806]	; 0x326
    mtp_lock_storage(false);
  }

  uint32_t MTPStorage_SD::AppendIndexRecord(const Record& r) 
  { uint32_t new_record = index_entries_++;
    WriteIndexRecord(new_record, r);
    4a16:	mov	r0, r4
    index_.write((char*)&r, sizeof(r));
    mtp_lock_storage(false);
  }

  uint32_t MTPStorage_SD::AppendIndexRecord(const Record& r) 
  { uint32_t new_record = index_entries_++;
    4a18:	adds	r3, r5, #1
    WriteIndexRecord(new_record, r);
    4a1a:	mov	r1, r5
  uint32_t iy= 0;
  while(ix)
  { // get child
    Record px = ReadIndexRecord(ix) ;
    Record py = px;
    py.store = p2.store;
    4a1c:	strh.w	lr, [sp, #1350]	; 0x546
    index_.write((char*)&r, sizeof(r));
    mtp_lock_storage(false);
  }

  uint32_t MTPStorage_SD::AppendIndexRecord(const Record& r) 
  { uint32_t new_record = index_entries_++;
    4a20:	str.w	r3, [r4, #244]	; 0xf4
  while(ix)
  { // get child
    Record px = ReadIndexRecord(ix) ;
    Record py = px;
    py.store = p2.store;
    py.parent = newHandle;
    4a24:	str.w	r8, [sp, #1336]	; 0x538
    mtp_lock_storage(false);
  }

  uint32_t MTPStorage_SD::AppendIndexRecord(const Record& r) 
  { uint32_t new_record = index_entries_++;
    WriteIndexRecord(new_record, r);
    4a28:	bl	20c8 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    py.sibling = iy;
    iy = AppendIndexRecord(py);

    char oldfilename[MAX_FILENAME_LEN];
    char newfilename[MAX_FILENAME_LEN];
    ConstructFilename(ix,oldfilename,MAX_FILENAME_LEN);
    4a2c:	mov.w	r3, #256	; 0x100
    4a30:	add	r2, sp, #8
    4a32:	mov	r1, r6
    4a34:	mov	r0, r4
    4a36:	bl	26f8 <MTPStorage_SD::ConstructFilename(int, char*, int)>
    ConstructFilename(iy,newfilename,MAX_FILENAME_LEN);
    4a3a:	mov	r1, r5
    4a3c:	mov.w	r3, #256	; 0x100
    4a40:	mov	r2, r7
    4a42:	mov	r0, r4
    4a44:	bl	26f8 <MTPStorage_SD::ConstructFilename(int, char*, int)>

    if(py.isdir) 
    4a48:	ldrb.w	r3, [sp, #1348]	; 0x544
    4a4c:	mov	r1, r7

      ScanDir(p1.store,ix); 
      CopyFiles(ix,p2.store,iy); 
    }
    else
    { sd_copy(p1.store,oldfilename,py.store,newfilename);
    4a4e:	add	r2, sp, #8
    4a50:	mov	r0, sl
    char oldfilename[MAX_FILENAME_LEN];
    char newfilename[MAX_FILENAME_LEN];
    ConstructFilename(ix,oldfilename,MAX_FILENAME_LEN);
    ConstructFilename(iy,newfilename,MAX_FILENAME_LEN);

    if(py.isdir) 
    4a52:	cmp	r3, #0
    4a54:	bne.n	49b8 <MTPStorage_SD::CopyFiles(unsigned long, unsigned long, unsigned long)+0x3c>

      ScanDir(p1.store,ix); 
      CopyFiles(ix,p2.store,iy); 
    }
    else
    { sd_copy(p1.store,oldfilename,py.store,newfilename);
    4a56:	ldrh.w	r3, [sp, #1350]	; 0x546
    4a5a:	mov	r1, r9
    4a5c:	str	r7, [sp, #0]
    4a5e:	bl	3fd4 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)>
    }
    ix = px.sibling;
    4a62:	ldr.w	r6, [sp, #1072]	; 0x430

  Record p1=ReadIndexRecord(handle);
  Record p2=ReadIndexRecord(newHandle);
  uint32_t ix= p1.child;
  uint32_t iy= 0;
  while(ix)
    4a66:	cmp	r6, #0
    4a68:	bne.n	49ea <MTPStorage_SD::CopyFiles(unsigned long, unsigned long, unsigned long)+0x6e>
    { sd_copy(p1.store,oldfilename,py.store,newfilename);
    }
    ix = px.sibling;
  }
  p2.child=iy;
  WriteIndexRecord(newHandle,p2);
    4a6a:	mov	r0, r4
    4a6c:	mov	r1, r8
    4a6e:	add	r2, sp, #792	; 0x318
    else
    { sd_copy(p1.store,oldfilename,py.store,newfilename);
    }
    ix = px.sibling;
  }
  p2.child=iy;
    4a70:	str	r5, [sp, #796]	; 0x31c
  WriteIndexRecord(newHandle,p2);
    4a72:	bl	20c8 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
  return true;
}
    4a76:	movs	r0, #1
    4a78:	add.w	sp, sp, #1608	; 0x648
    4a7c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  #endif

  Record p1=ReadIndexRecord(handle);
  Record p2=ReadIndexRecord(newHandle);
  uint32_t ix= p1.child;
  uint32_t iy= 0;
    4a80:	mov	r5, r6
    4a82:	b.n	4a6a <MTPStorage_SD::CopyFiles(unsigned long, unsigned long, unsigned long)+0xee>

00004a84 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*)>:
  if(nd<0) {DBG_FAIL_MACRO; return false;}
  return true;
}

bool mSD_Base::sd_moveDir(uint32_t store0, char *oldfilename, uint32_t store1, char *newfilename)
{ // old and new are directory paths
    4a84:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4a88:	mov	r5, r3
    4a8a:	add.w	r3, r0, r3, lsl #2
    4a8e:	mov	r4, r0
    4a90:	ldr	r6, [sp, #24]
    4a92:	ldr	r0, [r3, #84]	; 0x54
    4a94:	mov	r7, r1
    4a96:	mov	r1, r6
    4a98:	mov	r8, r2
    4a9a:	ldr	r3, [r0, #0]
    4a9c:	ldr	r3, [r3, #8]
    4a9e:	blx	r3

  char tmp0Name[MAX_FILENAME_LEN];
  char tmp1Name[MAX_FILENAME_LEN];

  if(!sd_mkdir(store1,newfilename))  {DBG_FAIL_MACRO; return false;}
    4aa0:	cbnz	r0, 4aa6 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*)+0x22>
        }
      }
    }
  }
  return sd_rmdir(store0,oldfilename);
}
    4aa2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4aa6:	str	r6, [sp, #24]
    4aa8:	mov	r3, r5
    4aaa:	mov	r2, r8
    4aac:	mov	r1, r7
    4aae:	mov	r0, r4
    4ab0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    4ab4:	b.w	4ab8 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]>

00004ab8 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]>:
  f2.close();
  if(nd<0) {DBG_FAIL_MACRO; return false;}
  return true;
}

bool mSD_Base::sd_moveDir(uint32_t store0, char *oldfilename, uint32_t store1, char *newfilename)
    4ab8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4abc:	add.w	sl, r0, r1, lsl #2
    4ac0:	mov	r8, r1
    4ac2:	sub.w	sp, sp, #596	; 0x254
    4ac6:	mov	r9, r0
    }

    uint32_t sd_getFSCount(void) {return fsCount;}
    const char *sd_getFSName(uint32_t store) { return sd_name[store];}

    File sd_open(uint32_t store, const char *filename, uint32_t mode) { return sdx[store]->open(filename,mode);  }
    4ac8:	ldr.w	r1, [sl, #84]	; 0x54
    4acc:	str	r3, [sp, #8]
    4ace:	add	r0, sp, #40	; 0x28
    4ad0:	ldr	r4, [r1, #0]
    4ad2:	movs	r3, #0
    4ad4:	str	r2, [sp, #12]
    4ad6:	ldr	r4, [r4, #0]
    4ad8:	blx	r4
	}
	virtual void close() {
		if (f) f->close();
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
    4ada:	ldr	r3, [sp, #56]	; 0x38
    4adc:	cmp	r3, #0
    4ade:	beq.w	5436 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x97e>
    4ae2:	ldr	r2, [r3, #0]
    4ae4:	ldr	r6, [pc, #460]	; (4cb4 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x1fc>)
    4ae6:	ldr	r2, [r2, #68]	; 0x44
    4ae8:	cmp	r2, r6
    4aea:	bne.w	4dc2 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x30a>
    4aee:	ldr	r0, [r3, #16]
    4af0:	cmp	r0, #0
    4af2:	beq.w	4c70 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x1b8>
    4af6:	ldr	r2, [r0, #0]
    4af8:	ldr	r2, [r2, #68]	; 0x44
    4afa:	cmp	r2, r6
    4afc:	bne.w	4dc4 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x30c>
    4b00:	ldr	r0, [r0, #16]
    4b02:	cmp	r0, #0
    4b04:	beq.w	4c70 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x1b8>
    4b08:	ldr	r2, [r0, #0]
    4b0a:	ldr	r2, [r2, #68]	; 0x44
    4b0c:	cmp	r2, r6
    4b0e:	bne.w	4dc4 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x30c>
    4b12:	ldr	r0, [r0, #16]
    4b14:	cmp	r0, #0
    4b16:	beq.w	4c70 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x1b8>
    4b1a:	ldr	r2, [r0, #0]
    4b1c:	ldr	r2, [r2, #68]	; 0x44
    4b1e:	cmp	r2, r6
    4b20:	bne.w	4dc4 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x30c>
    4b24:	ldr	r0, [r0, #16]
    4b26:	cmp	r0, #0
    4b28:	beq.w	4c70 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x1b8>
    4b2c:	ldr	r2, [r0, #0]
    4b2e:	ldr	r2, [r2, #68]	; 0x44
    4b30:	cmp	r2, r6
    4b32:	bne.w	4dc4 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x30c>
    4b36:	ldr	r0, [r0, #16]
    4b38:	cmp	r0, #0
    4b3a:	beq.w	4c70 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x1b8>
    4b3e:	ldr	r2, [r0, #0]
    4b40:	ldr	r2, [r2, #68]	; 0x44
    4b42:	cmp	r2, r6
    4b44:	bne.w	4dc4 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x30c>
    4b48:	ldr	r0, [r0, #16]
    4b4a:	cmp	r0, #0
    4b4c:	beq.w	4c70 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x1b8>
    4b50:	ldr	r2, [r0, #0]
    4b52:	ldr	r2, [r2, #68]	; 0x44
    4b54:	cmp	r2, r6
    4b56:	bne.w	4dc4 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x30c>
    4b5a:	ldr	r0, [r0, #16]
    4b5c:	cmp	r0, #0
    4b5e:	beq.w	4c70 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x1b8>
    4b62:	ldr	r3, [r0, #0]
    4b64:	ldr	r3, [r3, #68]	; 0x44
    4b66:	blx	r3
    4b68:	mov	r4, r0
  char tmp1Name[MAX_FILENAME_LEN];

  if(!sd_mkdir(store1,newfilename))  {DBG_FAIL_MACRO; return false;}

  File f1=sd_open(store0,oldfilename,FILE_READ);
  if(!f1) {DBG_FAIL_MACRO; return false;}
    4b6a:	cmp	r4, #0
    4b6c:	beq.w	54ec <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0xa34>
    4b70:	add	r4, sp, #336	; 0x150
    4b72:	ldr.w	fp, [pc, #336]	; 4cc4 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x20c>
  { while(1)
    {
      strlcpy(tmp0Name,oldfilename,MAX_FILENAME_LEN);
    4b76:	mov.w	r2, #256	; 0x100
    4b7a:	ldr	r1, [sp, #12]
    4b7c:	add	r0, sp, #80	; 0x50
    4b7e:	bl	11200 <strlcpy>
      if(tmp0Name[strlen(tmp0Name)-1]!='/') strlcat(tmp0Name,"/",MAX_FILENAME_LEN);
    4b82:	add	r0, sp, #80	; 0x50
    4b84:	bl	11240 <strlen>
    4b88:	add	r3, sp, #80	; 0x50
    4b8a:	add	r0, r3
    4b8c:	ldrb.w	r3, [r0, #-1]
    4b90:	cmp	r3, #47	; 0x2f
    4b92:	beq.n	4ba0 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0xe8>
    4b94:	mov.w	r2, #256	; 0x100
    4b98:	ldr	r1, [pc, #284]	; (4cb8 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x200>)
    4b9a:	add	r0, sp, #80	; 0x50
    4b9c:	bl	111ac <strlcat>

      strlcpy(tmp1Name,newfilename,MAX_FILENAME_LEN);
    4ba0:	mov.w	r2, #256	; 0x100
    4ba4:	ldr	r1, [sp, #632]	; 0x278
    4ba6:	mov	r0, r4
    4ba8:	bl	11200 <strlcpy>
      if(tmp1Name[strlen(tmp1Name)-1]!='/') strlcat(tmp1Name,"/",MAX_FILENAME_LEN);
    4bac:	mov	r0, r4
    4bae:	bl	11240 <strlen>
    4bb2:	add	r0, r4
    4bb4:	ldrb.w	r3, [r0, #-1]
    4bb8:	cmp	r3, #47	; 0x2f
    4bba:	beq.n	4bc8 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x110>
    4bbc:	mov.w	r2, #256	; 0x100
    4bc0:	ldr	r1, [pc, #244]	; (4cb8 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x200>)
    4bc2:	mov	r0, r4
    4bc4:	bl	111ac <strlcat>
	}
	virtual bool isDirectory() {
		return (f) ? f->isDirectory() : false;
	}
	virtual File openNextFile(uint8_t mode=0) {
		return (f) ? f->openNextFile(mode) : *this;
    4bc8:	ldr	r1, [sp, #56]	; 0x38
    4bca:	cmp	r1, #0
    4bcc:	beq.w	4e86 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3ce>
    4bd0:	ldr	r3, [r1, #0]
    4bd2:	ldr	r2, [pc, #232]	; (4cbc <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x204>)
    4bd4:	ldr	r3, [r3, #80]	; 0x50
    4bd6:	cmp	r3, r2
    4bd8:	bne.w	4eac <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3f4>
    4bdc:	ldr	r1, [r1, #16]
    4bde:	cmp	r1, #0
    4be0:	beq.w	4e86 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3ce>
    4be4:	ldr	r3, [r1, #0]
    4be6:	ldr	r3, [r3, #80]	; 0x50
    4be8:	cmp	r3, r2
    4bea:	bne.w	4eac <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3f4>
    4bee:	ldr	r1, [r1, #16]
    4bf0:	cmp	r1, #0
    4bf2:	beq.w	4e86 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3ce>
    4bf6:	ldr	r3, [r1, #0]
    4bf8:	ldr	r3, [r3, #80]	; 0x50
    4bfa:	cmp	r3, r2
    4bfc:	bne.w	4eac <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3f4>
    4c00:	ldr	r1, [r1, #16]
    4c02:	cmp	r1, #0
    4c04:	beq.w	4e86 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3ce>
    4c08:	ldr	r3, [r1, #0]
    4c0a:	ldr	r3, [r3, #80]	; 0x50
    4c0c:	cmp	r3, r2
    4c0e:	bne.w	4eac <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3f4>
    4c12:	ldr	r1, [r1, #16]
    4c14:	cmp	r1, #0
    4c16:	beq.w	4e86 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3ce>
    4c1a:	ldr	r3, [r1, #0]
    4c1c:	ldr	r3, [r3, #80]	; 0x50
    4c1e:	cmp	r3, r2
    4c20:	bne.w	4eac <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3f4>
    4c24:	ldr	r1, [r1, #16]
    4c26:	cmp	r1, #0
    4c28:	beq.w	4e86 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3ce>
    4c2c:	ldr	r3, [r1, #0]
    4c2e:	ldr	r3, [r3, #80]	; 0x50
    4c30:	cmp	r3, r2
    4c32:	bne.w	4eac <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3f4>
    4c36:	ldr	r1, [r1, #16]
    4c38:	cmp	r1, #0
    4c3a:	beq.w	4e86 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3ce>
    4c3e:	ldr	r3, [r1, #0]
    4c40:	ldr	r3, [r3, #80]	; 0x50
    4c42:	cmp	r3, r2
    4c44:	bne.w	4eac <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3f4>
    4c48:	ldr	r1, [r1, #16]
    4c4a:	cmp	r1, #0
    4c4c:	beq.w	4e86 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3ce>
    4c50:	ldr	r3, [r1, #0]
    4c52:	ldr	r3, [r3, #80]	; 0x50
    4c54:	cmp	r3, r2
    4c56:	bne.w	4eac <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3f4>
    4c5a:	ldr	r1, [r1, #16]
    4c5c:	cmp	r1, #0
    4c5e:	beq.w	4e86 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3ce>
    4c62:	add	r5, sp, #60	; 0x3c
    4c64:	ldr	r3, [r1, #0]
    4c66:	movs	r2, #0
    4c68:	mov	r0, r5
    4c6a:	ldr	r3, [r3, #80]	; 0x50
    4c6c:	blx	r3
    4c6e:	b.n	4eb4 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3fc>
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    4c70:	ldr.w	fp, [pc, #80]	; 4cc4 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x20c>
    4c74:	movs	r4, #0
    4c76:	str.w	fp, [sp, #40]	; 0x28
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    4c7a:	ldr	r2, [r3, #16]
    4c7c:	subs	r2, #1
    4c7e:	str	r2, [r3, #16]
    4c80:	cbnz	r2, 4caa <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x1f2>
    4c82:	ldr	r5, [sp, #56]	; 0x38
    4c84:	cbz	r5, 4caa <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x1f2>
    4c86:	ldr	r2, [r5, #0]
    4c88:	ldr	r3, [pc, #52]	; (4cc0 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x208>)
    4c8a:	ldr	r2, [r2, #32]
    4c8c:	cmp	r2, r3
    4c8e:	bne.w	5450 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x998>
    4c92:	ldr	r1, [r5, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    4c94:	str.w	fp, [r5]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    4c98:	cbz	r1, 4ca2 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x1ea>
    4c9a:	ldr	r2, [r1, #16]
    4c9c:	subs	r2, #1
    4c9e:	str	r2, [r1, #16]
    4ca0:	cbz	r2, 4cc8 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x210>
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
		invalidate();
	}
    4ca2:	mov	r0, r5
    4ca4:	movs	r1, #20
    4ca6:	bl	1006c <operator delete(void*, unsigned int)>
        }
      }
    }
  }
  return sd_rmdir(store0,oldfilename);
}
    4caa:	mov	r0, r4
    4cac:	add.w	sp, sp, #596	; 0x254
    4cb0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4cb4:	.word	0x0000011d
    4cb8:	.word	0x20000364
    4cbc:	.word	0x00000149
    4cc0:	.word	0x00000b4d
    4cc4:	.word	0x20000074
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    4cc8:	ldr	r6, [r5, #16]
    4cca:	cmp	r6, #0
    4ccc:	beq.n	4ca2 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x1ea>
    4cce:	ldr	r2, [r6, #0]
    4cd0:	ldr	r2, [r2, #32]
    4cd2:	cmp	r2, r3
    4cd4:	bne.w	5466 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x9ae>
    4cd8:	ldr	r1, [r6, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    4cda:	str.w	fp, [r6]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    4cde:	cmp	r1, #0
    4ce0:	beq.n	4db8 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x300>
    4ce2:	ldr	r2, [r1, #16]
    4ce4:	subs	r2, #1
    4ce6:	str	r2, [r1, #16]
    4ce8:	cmp	r2, #0
    4cea:	bne.n	4db8 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x300>
    4cec:	ldr	r7, [r6, #16]
    4cee:	cmp	r7, #0
    4cf0:	beq.n	4db8 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x300>
    4cf2:	ldr	r2, [r7, #0]
    4cf4:	ldr	r2, [r2, #32]
    4cf6:	cmp	r2, r3
    4cf8:	bne.w	5482 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x9ca>
    4cfc:	ldr	r1, [r7, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    4cfe:	str.w	fp, [r7]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    4d02:	cmp	r1, #0
    4d04:	beq.n	4db0 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x2f8>
    4d06:	ldr	r2, [r1, #16]
    4d08:	subs	r2, #1
    4d0a:	str	r2, [r1, #16]
    4d0c:	cmp	r2, #0
    4d0e:	bne.n	4db0 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x2f8>
    4d10:	ldr.w	r8, [r7, #16]
    4d14:	cmp.w	r8, #0
    4d18:	beq.n	4db0 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x2f8>
    4d1a:	ldr.w	r2, [r8]
    4d1e:	ldr	r2, [r2, #32]
    4d20:	cmp	r2, r3
    4d22:	bne.w	5498 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x9e0>
    4d26:	ldr.w	r1, [r8, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    4d2a:	str.w	fp, [r8]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    4d2e:	cmp	r1, #0
    4d30:	beq.n	4da8 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x2f0>
    4d32:	ldr	r2, [r1, #16]
    4d34:	subs	r2, #1
    4d36:	str	r2, [r1, #16]
    4d38:	cmp	r2, #0
    4d3a:	bne.n	4da8 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x2f0>
    4d3c:	ldr.w	r9, [r8, #16]
    4d40:	cmp.w	r9, #0
    4d44:	beq.n	4da8 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x2f0>
    4d46:	ldr.w	r2, [r9]
    4d4a:	ldr	r2, [r2, #32]
    4d4c:	cmp	r2, r3
    4d4e:	bne.w	54c0 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0xa08>
    4d52:	ldr.w	r1, [r9, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    4d56:	str.w	fp, [r9]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    4d5a:	cbz	r1, 4da0 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x2e8>
    4d5c:	ldr	r2, [r1, #16]
    4d5e:	subs	r2, #1
    4d60:	str	r2, [r1, #16]
    4d62:	cbnz	r2, 4da0 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x2e8>
    4d64:	ldr.w	sl, [r9, #16]
    4d68:	cmp.w	sl, #0
    4d6c:	beq.n	4da0 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x2e8>
    4d6e:	ldr.w	r2, [sl]
    4d72:	ldr	r2, [r2, #32]
    4d74:	cmp	r2, r3
    4d76:	bne.w	54c6 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0xa0e>
    4d7a:	ldr.w	r2, [sl, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    4d7e:	str.w	fp, [sl]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    4d82:	cbz	r2, 4d98 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x2e0>
    4d84:	ldr	r3, [r2, #16]
    4d86:	subs	r3, #1
    4d88:	str	r3, [r2, #16]
    4d8a:	cbnz	r3, 4d98 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x2e0>
    4d8c:	ldr.w	r0, [sl, #16]
    4d90:	cbz	r0, 4d98 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x2e0>
    4d92:	ldr	r3, [r0, #0]
    4d94:	ldr	r3, [r3, #32]
    4d96:	blx	r3
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
		invalidate();
	}
    4d98:	mov	r0, sl
    4d9a:	movs	r1, #20
    4d9c:	bl	1006c <operator delete(void*, unsigned int)>
    4da0:	mov	r0, r9
    4da2:	movs	r1, #20
    4da4:	bl	1006c <operator delete(void*, unsigned int)>
    4da8:	mov	r0, r8
    4daa:	movs	r1, #20
    4dac:	bl	1006c <operator delete(void*, unsigned int)>
    4db0:	mov	r0, r7
    4db2:	movs	r1, #20
    4db4:	bl	1006c <operator delete(void*, unsigned int)>
    4db8:	mov	r0, r6
    4dba:	movs	r1, #20
    4dbc:	bl	1006c <operator delete(void*, unsigned int)>
    4dc0:	b.n	4ca2 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x1ea>
	}
	virtual void close() {
		if (f) f->close();
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
    4dc2:	mov	r0, r3
    4dc4:	blx	r2
    4dc6:	mov	r4, r0
    4dc8:	b.n	4b6a <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0xb2>
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    4dca:	str.w	fp, [r5]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    4dce:	ldr	r3, [r2, #16]
    4dd0:	subs	r3, #1
    4dd2:	str	r3, [r2, #16]
    4dd4:	cmp	r3, #0
    4dd6:	bne.n	4e86 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3ce>
    4dd8:	ldr	r4, [r5, #16]
    4dda:	cmp	r4, #0
    4ddc:	beq.n	4e86 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3ce>
    4dde:	ldr	r2, [r4, #0]
    4de0:	ldr	r3, [pc, #192]	; (4ea4 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3ec>)
    4de2:	ldr	r2, [r2, #32]
    4de4:	cmp	r2, r3
    4de6:	bne.w	5472 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x9ba>
    4dea:	ldr	r1, [r4, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    4dec:	str.w	fp, [r4]
    4df0:	ldr	r0, [pc, #180]	; (4ea8 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3f0>)
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    4df2:	cmp	r1, #0
    4df4:	beq.n	4e7e <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3c6>
    4df6:	ldr	r2, [r1, #16]
    4df8:	subs	r2, #1
    4dfa:	str	r2, [r1, #16]
    4dfc:	cmp	r2, #0
    4dfe:	bne.n	4e7e <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3c6>
    4e00:	ldr	r5, [r4, #16]
    4e02:	cmp	r5, #0
    4e04:	beq.n	4e7e <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3c6>
    4e06:	ldr	r2, [r5, #0]
    4e08:	ldr	r2, [r2, #32]
    4e0a:	cmp	r2, r3
    4e0c:	bne.w	5488 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x9d0>
    4e10:	ldr	r1, [r5, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    4e12:	str	r0, [r5, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    4e14:	cmp	r1, #0
    4e16:	beq.n	4e76 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3be>
    4e18:	ldr	r2, [r1, #16]
    4e1a:	subs	r2, #1
    4e1c:	str	r2, [r1, #16]
    4e1e:	cbnz	r2, 4e76 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3be>
    4e20:	ldr	r6, [r5, #16]
    4e22:	cbz	r6, 4e76 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3be>
    4e24:	ldr	r2, [r6, #0]
    4e26:	ldr	r2, [r2, #32]
    4e28:	cmp	r2, r3
    4e2a:	bne.w	54ae <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x9f6>
    4e2e:	ldr	r1, [r6, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    4e30:	str.w	fp, [r6]
    4e34:	ldr	r0, [pc, #112]	; (4ea8 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3f0>)
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    4e36:	cbz	r1, 4e6e <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3b6>
    4e38:	ldr	r2, [r1, #16]
    4e3a:	subs	r2, #1
    4e3c:	str	r2, [r1, #16]
    4e3e:	cbnz	r2, 4e6e <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3b6>
    4e40:	ldr	r7, [r6, #16]
    4e42:	cbz	r7, 4e6e <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3b6>
    4e44:	ldr	r2, [r7, #0]
    4e46:	ldr	r2, [r2, #32]
    4e48:	cmp	r2, r3
    4e4a:	bne.w	54b4 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x9fc>
    4e4e:	ldr	r2, [r7, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    4e50:	str	r0, [r7, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    4e52:	cbz	r2, 4e66 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3ae>
    4e54:	ldr	r3, [r2, #16]
    4e56:	subs	r3, #1
    4e58:	str	r3, [r2, #16]
    4e5a:	cbnz	r3, 4e66 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3ae>
    4e5c:	ldr	r0, [r7, #16]
    4e5e:	cbz	r0, 4e66 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3ae>
    4e60:	ldr	r3, [r0, #0]
    4e62:	ldr	r3, [r3, #32]
    4e64:	blx	r3
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
		invalidate();
	}
    4e66:	mov	r0, r7
    4e68:	movs	r1, #20
    4e6a:	bl	1006c <operator delete(void*, unsigned int)>
    4e6e:	mov	r0, r6
    4e70:	movs	r1, #20
    4e72:	bl	1006c <operator delete(void*, unsigned int)>
    4e76:	mov	r0, r5
    4e78:	movs	r1, #20
    4e7a:	bl	1006c <operator delete(void*, unsigned int)>
    4e7e:	mov	r0, r4
    4e80:	movs	r1, #20
    4e82:	bl	1006c <operator delete(void*, unsigned int)>
    bool sd_mkdir(uint32_t store, char *filename) {  return sdx[store]->mkdir(filename);  }
    bool sd_rename(uint32_t store, char *oldfilename, char *newfilename) { return sdx[store]->rename(oldfilename,newfilename);  }
    bool sd_remove(uint32_t store, const char *filename) {    Serial.println(filename); return sdx[store]->remove(filename);  }
    bool sd_rmdir(uint32_t store, char *filename) { return sdx[store]->rmdir(filename);  }
    4e86:	ldr.w	r0, [sl, #84]	; 0x54
    4e8a:	ldr	r1, [sp, #12]
    4e8c:	ldr	r3, [r0, #0]
    4e8e:	ldr	r3, [r3, #20]
    4e90:	blx	r3
    4e92:	ldr	r3, [sp, #56]	; 0x38
    4e94:	mov	r4, r0
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    4e96:	str.w	fp, [sp, #40]	; 0x28
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    4e9a:	cmp	r3, #0
    4e9c:	bne.w	4c7a <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x1c2>
    4ea0:	b.n	4caa <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x1f2>
    4ea2:	nop
    4ea4:	.word	0x00000b4d
    4ea8:	.word	0x20000074
	}
	virtual bool isDirectory() {
		return (f) ? f->isDirectory() : false;
	}
	virtual File openNextFile(uint8_t mode=0) {
		return (f) ? f->openNextFile(mode) : *this;
    4eac:	add	r5, sp, #60	; 0x3c
    4eae:	movs	r2, #0
    4eb0:	mov	r0, r5
    4eb2:	blx	r3
	}
	virtual void close() {
		if (f) f->close();
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
    4eb4:	ldr	r2, [r5, #16]
    4eb6:	cmp	r2, #0
    4eb8:	beq.n	4e86 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3ce>
    4eba:	ldr	r3, [r2, #0]
    4ebc:	ldr	r3, [r3, #68]	; 0x44
    4ebe:	cmp	r3, r6
    4ec0:	bne.w	5404 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x94c>
    4ec4:	ldr	r0, [r2, #16]
    4ec6:	cmp	r0, #0
    4ec8:	beq.w	4dca <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x312>
    4ecc:	ldr	r1, [r0, #0]
    4ece:	ldr	r1, [r1, #68]	; 0x44
    4ed0:	cmp	r1, r6
    4ed2:	bne.w	541a <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x962>
    4ed6:	ldr	r0, [r0, #16]
    4ed8:	cmp	r0, #0
    4eda:	beq.w	4dca <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x312>
    4ede:	ldr	r3, [r0, #0]
    4ee0:	ldr	r3, [r3, #68]	; 0x44
    4ee2:	cmp	r3, r6
    4ee4:	bne.w	5406 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x94e>
    4ee8:	ldr	r0, [r0, #16]
    4eea:	cmp	r0, #0
    4eec:	beq.w	4dca <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x312>
    4ef0:	ldr	r3, [r0, #0]
    4ef2:	ldr	r3, [r3, #68]	; 0x44
    4ef4:	cmp	r3, r6
    4ef6:	bne.w	5406 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x94e>
    4efa:	ldr	r0, [r0, #16]
    4efc:	cmp	r0, #0
    4efe:	beq.w	4dca <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x312>
    4f02:	ldr	r3, [r0, #0]
    4f04:	ldr	r3, [r3, #68]	; 0x44
    4f06:	cmp	r3, r6
    4f08:	bne.w	5406 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x94e>
    4f0c:	ldr	r0, [r0, #16]
    4f0e:	cmp	r0, #0
    4f10:	beq.w	4dca <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x312>
    4f14:	ldr	r3, [r0, #0]
    4f16:	ldr	r3, [r3, #68]	; 0x44
    4f18:	cmp	r3, r6
    4f1a:	bne.w	5406 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x94e>
    4f1e:	ldr	r0, [r0, #16]
    4f20:	cmp	r0, #0
    4f22:	beq.w	4dca <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x312>
    4f26:	ldr	r3, [r0, #0]
    4f28:	ldr	r3, [r3, #68]	; 0x44
    4f2a:	blx	r3

      strlcpy(tmp1Name,newfilename,MAX_FILENAME_LEN);
      if(tmp1Name[strlen(tmp1Name)-1]!='/') strlcat(tmp1Name,"/",MAX_FILENAME_LEN);

      File f2=f1.openNextFile();
      if(!f2) break;
    4f2c:	cmp	r0, #0
    4f2e:	beq.w	54de <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0xa26>
	}
	virtual const char* name() {
		return (f) ? f->name() : "";
    4f32:	ldr	r0, [r5, #16]
    4f34:	cmp	r0, #0
    4f36:	beq.w	5400 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x948>
    4f3a:	ldr	r2, [r0, #0]
    4f3c:	ldr	r3, [pc, #696]	; (51f8 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x740>)
    4f3e:	ldr	r2, [r2, #72]	; 0x48
    4f40:	cmp	r2, r3
    4f42:	bne.w	540a <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x952>
    4f46:	ldr	r0, [r0, #16]
    4f48:	cmp	r0, #0
    4f4a:	beq.w	5400 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x948>
    4f4e:	ldr	r2, [r0, #0]
    4f50:	ldr	r2, [r2, #72]	; 0x48
    4f52:	cmp	r2, r3
    4f54:	bne.w	540a <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x952>
    4f58:	ldr	r0, [r0, #16]
    4f5a:	cmp	r0, #0
    4f5c:	beq.w	5400 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x948>
    4f60:	ldr	r2, [r0, #0]
    4f62:	ldr	r2, [r2, #72]	; 0x48
    4f64:	cmp	r2, r3
    4f66:	bne.w	540a <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x952>
    4f6a:	ldr	r0, [r0, #16]
    4f6c:	cmp	r0, #0
    4f6e:	beq.w	5400 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x948>
    4f72:	ldr	r2, [r0, #0]
    4f74:	ldr	r2, [r2, #72]	; 0x48
    4f76:	cmp	r2, r3
    4f78:	bne.w	540a <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x952>
    4f7c:	ldr	r0, [r0, #16]
    4f7e:	cmp	r0, #0
    4f80:	beq.w	5400 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x948>
    4f84:	ldr	r2, [r0, #0]
    4f86:	ldr	r2, [r2, #72]	; 0x48
    4f88:	cmp	r2, r3
    4f8a:	bne.w	540a <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x952>
    4f8e:	ldr	r0, [r0, #16]
    4f90:	cmp	r0, #0
    4f92:	beq.w	5400 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x948>
    4f96:	ldr	r2, [r0, #0]
    4f98:	ldr	r2, [r2, #72]	; 0x48
    4f9a:	cmp	r2, r3
    4f9c:	bne.w	540a <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x952>
    4fa0:	ldr	r0, [r0, #16]
    4fa2:	cmp	r0, #0
    4fa4:	beq.w	5400 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x948>
    4fa8:	ldr	r3, [r0, #0]
    4faa:	ldr	r3, [r3, #72]	; 0x48
    4fac:	blx	r3
    4fae:	mov	r1, r0
      { // generate filenames
        strlcat(tmp0Name,f2.name(),MAX_FILENAME_LEN);
    4fb0:	mov.w	r2, #256	; 0x100
    4fb4:	add	r0, sp, #80	; 0x50
    4fb6:	bl	111ac <strlcat>
    4fba:	ldr	r0, [r5, #16]
    4fbc:	cmp	r0, #0
    4fbe:	beq.w	53fc <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x944>
    4fc2:	ldr	r2, [r0, #0]
    4fc4:	ldr	r3, [pc, #560]	; (51f8 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x740>)
    4fc6:	ldr	r2, [r2, #72]	; 0x48
    4fc8:	cmp	r2, r3
    4fca:	bne.w	5414 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x95c>
    4fce:	ldr	r0, [r0, #16]
    4fd0:	cmp	r0, #0
    4fd2:	beq.w	53fc <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x944>
    4fd6:	ldr	r2, [r0, #0]
    4fd8:	ldr	r2, [r2, #72]	; 0x48
    4fda:	cmp	r2, r3
    4fdc:	bne.w	5414 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x95c>
    4fe0:	ldr	r0, [r0, #16]
    4fe2:	cmp	r0, #0
    4fe4:	beq.w	53fc <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x944>
    4fe8:	ldr	r2, [r0, #0]
    4fea:	ldr	r2, [r2, #72]	; 0x48
    4fec:	cmp	r2, r3
    4fee:	bne.w	5414 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x95c>
    4ff2:	ldr	r0, [r0, #16]
    4ff4:	cmp	r0, #0
    4ff6:	beq.w	53fc <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x944>
    4ffa:	ldr	r2, [r0, #0]
    4ffc:	ldr	r2, [r2, #72]	; 0x48
    4ffe:	cmp	r2, r3
    5000:	bne.w	5414 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x95c>
    5004:	ldr	r0, [r0, #16]
    5006:	cmp	r0, #0
    5008:	beq.w	53fc <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x944>
    500c:	ldr	r2, [r0, #0]
    500e:	ldr	r2, [r2, #72]	; 0x48
    5010:	cmp	r2, r3
    5012:	bne.w	5414 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x95c>
    5016:	ldr	r0, [r0, #16]
    5018:	cmp	r0, #0
    501a:	beq.w	53fc <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x944>
    501e:	ldr	r2, [r0, #0]
    5020:	ldr	r2, [r2, #72]	; 0x48
    5022:	cmp	r2, r3
    5024:	bne.w	5414 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x95c>
    5028:	ldr	r0, [r0, #16]
    502a:	cmp	r0, #0
    502c:	beq.w	53fc <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x944>
    5030:	ldr	r3, [r0, #0]
    5032:	ldr	r3, [r3, #72]	; 0x48
    5034:	blx	r3
    5036:	mov	r1, r0
        strlcat(tmp1Name,f2.name(),MAX_FILENAME_LEN);
    5038:	mov.w	r2, #256	; 0x100
    503c:	mov	r0, r4
    503e:	bl	111ac <strlcat>
	}
	virtual bool isDirectory() {
		return (f) ? f->isDirectory() : false;
    5042:	ldr	r0, [r5, #16]
    5044:	cmp	r0, #0
    5046:	beq.w	52c8 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x810>
    504a:	ldr	r2, [r0, #0]
    504c:	ldr	r3, [pc, #428]	; (51fc <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x744>)
    504e:	ldr	r2, [r2, #76]	; 0x4c
    5050:	cmp	r2, r3
    5052:	bne.w	5410 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x958>
    5056:	ldr	r0, [r0, #16]
    5058:	cmp	r0, #0
    505a:	beq.w	52c8 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x810>
    505e:	ldr	r2, [r0, #0]
    5060:	ldr	r2, [r2, #76]	; 0x4c
    5062:	cmp	r2, r3
    5064:	bne.w	5410 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x958>
    5068:	ldr	r0, [r0, #16]
    506a:	cmp	r0, #0
    506c:	beq.w	52c8 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x810>
    5070:	ldr	r2, [r0, #0]
    5072:	ldr	r2, [r2, #76]	; 0x4c
    5074:	cmp	r2, r3
    5076:	bne.w	5410 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x958>
    507a:	ldr	r0, [r0, #16]
    507c:	cmp	r0, #0
    507e:	beq.w	52c8 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x810>
    5082:	ldr	r2, [r0, #0]
    5084:	ldr	r2, [r2, #76]	; 0x4c
    5086:	cmp	r2, r3
    5088:	bne.w	5410 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x958>
    508c:	ldr	r0, [r0, #16]
    508e:	cmp	r0, #0
    5090:	beq.w	52c8 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x810>
    5094:	ldr	r2, [r0, #0]
    5096:	ldr	r2, [r2, #76]	; 0x4c
    5098:	cmp	r2, r3
    509a:	bne.w	5410 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x958>
    509e:	ldr	r0, [r0, #16]
    50a0:	cmp	r0, #0
    50a2:	beq.w	52c8 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x810>
    50a6:	ldr	r2, [r0, #0]
    50a8:	ldr	r2, [r2, #76]	; 0x4c
    50aa:	cmp	r2, r3
    50ac:	bne.w	5410 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x958>
    50b0:	ldr	r0, [r0, #16]
    50b2:	cmp	r0, #0
    50b4:	beq.w	52c8 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x810>
    50b8:	ldr	r3, [r0, #0]
    50ba:	ldr	r3, [r3, #76]	; 0x4c
    50bc:	blx	r3

        if(f2.isDirectory())
    50be:	cmp	r0, #0
    50c0:	beq.w	52c8 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x810>
        { 
          if(!sd_moveDir(store0, tmp0Name, store1, tmp1Name)) {DBG_FAIL_MACRO; return false;}
    50c4:	str	r4, [sp, #0]
    50c6:	add	r2, sp, #80	; 0x50
    50c8:	ldr	r3, [sp, #8]
    50ca:	mov	r1, r8
    50cc:	mov	r0, r9
    50ce:	bl	4a84 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*)>
    50d2:	cmp	r0, #0
    50d4:	beq.w	52fe <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x846>
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    50d8:	ldr	r2, [r5, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    50da:	str.w	fp, [r5]
    50de:	ldr	r1, [pc, #288]	; (5200 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x748>)
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    50e0:	cmp	r2, #0
    50e2:	beq.w	4b76 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0xbe>
    50e6:	ldr	r3, [r2, #16]
    50e8:	subs	r3, #1
    50ea:	str	r3, [r2, #16]
    50ec:	cmp	r3, #0
    50ee:	bne.w	4b76 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0xbe>
    50f2:	ldr	r5, [r5, #16]
    50f4:	cmp	r5, #0
    50f6:	beq.w	4b76 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0xbe>
    50fa:	ldr	r2, [r5, #0]
    50fc:	ldr	r3, [pc, #260]	; (5204 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x74c>)
    50fe:	ldr	r2, [r2, #32]
    5100:	cmp	r2, r3
    5102:	bne.w	541e <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x966>
    5106:	ldr	r0, [r5, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    5108:	str	r1, [r5, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    510a:	cmp	r0, #0
    510c:	beq.w	52be <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x806>
    5110:	ldr	r2, [r0, #16]
    5112:	subs	r2, #1
    5114:	str	r2, [r0, #16]
    5116:	cmp	r2, #0
    5118:	bne.w	52be <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x806>
    511c:	ldr	r7, [r5, #16]
    511e:	cmp	r7, #0
    5120:	beq.w	52be <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x806>
    5124:	ldr	r2, [r7, #0]
    5126:	ldr	r2, [r2, #32]
    5128:	cmp	r2, r3
    512a:	bne.w	5426 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x96e>
    512e:	ldr	r0, [r7, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    5130:	str	r1, [r7, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    5132:	cmp	r0, #0
    5134:	beq.w	52b6 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x7fe>
    5138:	ldr	r2, [r0, #16]
    513a:	subs	r2, #1
    513c:	str	r2, [r0, #16]
    513e:	cmp	r2, #0
    5140:	bne.w	52b6 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x7fe>
    5144:	ldr	r2, [r7, #16]
    5146:	cmp	r2, #0
    5148:	beq.w	52b6 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x7fe>
    514c:	ldr	r1, [r2, #0]
    514e:	ldr	r1, [r1, #32]
    5150:	cmp	r1, r3
    5152:	bne.w	5442 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x98a>
    5156:	ldr.w	lr, [r2, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    515a:	str.w	fp, [r2]
    515e:	ldr	r0, [pc, #160]	; (5200 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x748>)
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    5160:	cmp.w	lr, #0
    5164:	beq.w	52ae <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x7f6>
    5168:	ldr.w	r1, [lr, #16]
    516c:	subs	r1, #1
    516e:	str.w	r1, [lr, #16]
    5172:	cmp	r1, #0
    5174:	bne.w	52ae <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x7f6>
    5178:	ldr	r1, [r2, #16]
    517a:	str	r1, [sp, #16]
    517c:	cmp	r1, #0
    517e:	beq.w	52ae <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x7f6>
    5182:	ldr	r1, [sp, #16]
    5184:	ldr	r1, [r1, #0]
    5186:	ldr	r1, [r1, #32]
    5188:	cmp	r1, r3
    518a:	bne.w	5456 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x99e>
    518e:	ldr	r1, [sp, #16]
    5190:	ldr.w	lr, [r1, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    5194:	str	r0, [r1, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    5196:	cmp.w	lr, #0
    519a:	beq.w	52a2 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x7ea>
    519e:	ldr.w	r1, [lr, #16]
    51a2:	subs	r1, #1
    51a4:	str.w	r1, [lr, #16]
    51a8:	cmp	r1, #0
    51aa:	bne.n	52a2 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x7ea>
    51ac:	ldr	r1, [sp, #16]
    51ae:	ldr	r1, [r1, #16]
    51b0:	str	r1, [sp, #20]
    51b2:	cmp	r1, #0
    51b4:	beq.n	52a2 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x7ea>
    51b6:	ldr	r0, [sp, #20]
    51b8:	ldr	r1, [r0, #0]
    51ba:	ldr	r1, [r1, #32]
    51bc:	cmp	r1, r3
    51be:	bne.w	5478 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x9c0>
    51c2:	ldr.w	lr, [r0, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    51c6:	str.w	fp, [r0]
    51ca:	ldr	r0, [pc, #52]	; (5200 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x748>)
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    51cc:	cmp.w	lr, #0
    51d0:	beq.n	5296 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x7de>
    51d2:	ldr.w	r1, [lr, #16]
    51d6:	subs	r1, #1
    51d8:	str.w	r1, [lr, #16]
    51dc:	cmp	r1, #0
    51de:	bne.n	5296 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x7de>
    51e0:	ldr	r1, [sp, #20]
    51e2:	ldr	r1, [r1, #16]
    51e4:	str	r1, [sp, #24]
    51e6:	cmp	r1, #0
    51e8:	beq.n	5296 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x7de>
    51ea:	ldr	r1, [sp, #24]
    51ec:	ldr	r1, [r1, #0]
    51ee:	ldr	r1, [r1, #32]
    51f0:	cmp	r1, r3
    51f2:	bne.w	548e <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x9d6>
    51f6:	b.n	5208 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x750>
    51f8:	.word	0x00000129
    51fc:	.word	0x0000013d
    5200:	.word	0x20000074
    5204:	.word	0x00000b4d
    5208:	ldr	r1, [sp, #24]
    520a:	ldr.w	lr, [r1, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    520e:	str	r0, [r1, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    5210:	cmp.w	lr, #0
    5214:	beq.n	528a <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x7d2>
    5216:	ldr.w	r1, [lr, #16]
    521a:	subs	r1, #1
    521c:	str.w	r1, [lr, #16]
    5220:	cmp	r1, #0
    5222:	bne.n	528a <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x7d2>
    5224:	ldr	r1, [sp, #24]
    5226:	ldr	r1, [r1, #16]
    5228:	str	r1, [sp, #28]
    522a:	cbz	r1, 528a <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x7d2>
    522c:	ldr	r1, [sp, #28]
    522e:	ldr	r1, [r1, #0]
    5230:	ldr	r1, [r1, #32]
    5232:	cmp	r1, r3
    5234:	bne.w	54a4 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x9ec>
    5238:	ldr	r1, [sp, #28]
    523a:	ldr.w	lr, [r1, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    523e:	str	r0, [r1, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    5240:	cmp.w	lr, #0
    5244:	beq.n	527e <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x7c6>
    5246:	ldr.w	r1, [lr, #16]
    524a:	subs	r1, #1
    524c:	str.w	r1, [lr, #16]
    5250:	cbnz	r1, 527e <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x7c6>
    5252:	ldr	r1, [sp, #28]
    5254:	ldr	r1, [r1, #16]
    5256:	cbz	r1, 527e <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x7c6>
    5258:	ldr	r0, [r1, #0]
    525a:	ldr	r0, [r0, #32]
    525c:	cmp	r0, r3
    525e:	mov	lr, r0
    5260:	bne.w	54cc <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0xa14>
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    5264:	mov	r0, r1
    5266:	str	r2, [sp, #36]	; 0x24
    5268:	str	r1, [sp, #32]
    526a:	str.w	fp, [r0], #16
		invalidate();
    526e:	bl	1c94 <File::invalidate() [clone .isra.1]>
	}
    5272:	ldr	r1, [sp, #32]
    5274:	mov	r0, r1
    5276:	movs	r1, #20
    5278:	bl	1006c <operator delete(void*, unsigned int)>
    527c:	ldr	r2, [sp, #36]	; 0x24
    527e:	ldr	r0, [sp, #28]
    5280:	movs	r1, #20
    5282:	str	r2, [sp, #32]
    5284:	bl	1006c <operator delete(void*, unsigned int)>
    5288:	ldr	r2, [sp, #32]
    528a:	ldr	r0, [sp, #24]
    528c:	movs	r1, #20
    528e:	str	r2, [sp, #28]
    5290:	bl	1006c <operator delete(void*, unsigned int)>
    5294:	ldr	r2, [sp, #28]
    5296:	ldr	r0, [sp, #20]
    5298:	movs	r1, #20
    529a:	str	r2, [sp, #24]
    529c:	bl	1006c <operator delete(void*, unsigned int)>
    52a0:	ldr	r2, [sp, #24]
    52a2:	ldr	r0, [sp, #16]
    52a4:	movs	r1, #20
    52a6:	str	r2, [sp, #20]
    52a8:	bl	1006c <operator delete(void*, unsigned int)>
    52ac:	ldr	r2, [sp, #20]
    52ae:	mov	r0, r2
    52b0:	movs	r1, #20
    52b2:	bl	1006c <operator delete(void*, unsigned int)>
    52b6:	mov	r0, r7
    52b8:	movs	r1, #20
    52ba:	bl	1006c <operator delete(void*, unsigned int)>
    52be:	mov	r0, r5
    52c0:	movs	r1, #20
    52c2:	bl	1006c <operator delete(void*, unsigned int)>
    52c6:	b.n	4b76 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0xbe>
        }
        else
        { 
          if(!sd_copy(store0, tmp0Name, store1, tmp1Name)) {DBG_FAIL_MACRO; return false;}
    52c8:	str	r4, [sp, #0]
    52ca:	add	r2, sp, #80	; 0x50
    52cc:	ldr	r3, [sp, #8]
    52ce:	mov	r1, r8
    52d0:	mov	r0, r9
    52d2:	bl	3fd4 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)>
    52d6:	cbz	r0, 52fe <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x846>
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
    52d8:	add	r0, sp, #80	; 0x50
    52da:	bl	11240 <strlen>
    52de:	mov	r1, r0
    52e0:	add	r0, sp, #80	; 0x50
    52e2:	bl	e284 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    52e6:	ldr	r0, [pc, #524]	; (54f4 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0xa3c>)
    52e8:	bl	ff48 <Print::println()>
    const char *sd_getFSName(uint32_t store) { return sd_name[store];}

    File sd_open(uint32_t store, const char *filename, uint32_t mode) { return sdx[store]->open(filename,mode);  }
    bool sd_mkdir(uint32_t store, char *filename) {  return sdx[store]->mkdir(filename);  }
    bool sd_rename(uint32_t store, char *oldfilename, char *newfilename) { return sdx[store]->rename(oldfilename,newfilename);  }
    bool sd_remove(uint32_t store, const char *filename) {    Serial.println(filename); return sdx[store]->remove(filename);  }
    52ec:	ldr.w	r0, [sl, #84]	; 0x54
    52f0:	add	r1, sp, #80	; 0x50
    52f2:	ldr	r3, [r0, #0]
    52f4:	ldr	r3, [r3, #16]
    52f6:	blx	r3
          if(!sd_remove(store0,tmp0Name)) {DBG_FAIL_MACRO; return false;}
    52f8:	cmp	r0, #0
    52fa:	bne.w	50d8 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x620>
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    52fe:	ldr	r2, [r5, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    5300:	str.w	fp, [r5]
    5304:	ldr	r1, [pc, #496]	; (54f8 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0xa40>)
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    5306:	cmp	r2, #0
    5308:	beq.n	53f6 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x93e>
    530a:	ldr	r3, [r2, #16]
    530c:	subs	r3, #1
    530e:	str	r3, [r2, #16]
    5310:	cmp	r3, #0
    5312:	bne.n	53f6 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x93e>
    5314:	ldr	r4, [r5, #16]
    5316:	cmp	r4, #0
    5318:	beq.n	53f6 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x93e>
    531a:	ldr	r2, [r4, #0]
    531c:	ldr	r3, [pc, #476]	; (54fc <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0xa44>)
    531e:	ldr	r2, [r2, #32]
    5320:	cmp	r2, r3
    5322:	bne.w	546c <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x9b4>
    5326:	ldr	r0, [r4, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    5328:	str	r1, [r4, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    532a:	cmp	r0, #0
    532c:	beq.n	53ee <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x936>
    532e:	ldr	r2, [r0, #16]
    5330:	subs	r2, #1
    5332:	str	r2, [r0, #16]
    5334:	cmp	r2, #0
    5336:	bne.n	53ee <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x936>
    5338:	ldr	r5, [r4, #16]
    533a:	cmp	r5, #0
    533c:	beq.n	53ee <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x936>
    533e:	ldr	r2, [r5, #0]
    5340:	ldr	r2, [r2, #32]
    5342:	cmp	r2, r3
    5344:	bne.w	5460 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x9a8>
    5348:	ldr	r0, [r5, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    534a:	str	r1, [r5, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    534c:	cmp	r0, #0
    534e:	beq.n	53e6 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x92e>
    5350:	ldr	r2, [r0, #16]
    5352:	subs	r2, #1
    5354:	str	r2, [r0, #16]
    5356:	cmp	r2, #0
    5358:	bne.n	53e6 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x92e>
    535a:	ldr	r6, [r5, #16]
    535c:	cmp	r6, #0
    535e:	beq.n	53e6 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x92e>
    5360:	ldr	r2, [r6, #0]
    5362:	ldr	r2, [r2, #32]
    5364:	cmp	r2, r3
    5366:	bne.w	549e <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x9e6>
    536a:	ldr	r1, [r6, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    536c:	str.w	fp, [r6]
    5370:	ldr	r0, [pc, #388]	; (54f8 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0xa40>)
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    5372:	cmp	r1, #0
    5374:	beq.n	53de <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x926>
    5376:	ldr	r2, [r1, #16]
    5378:	subs	r2, #1
    537a:	str	r2, [r1, #16]
    537c:	cbnz	r2, 53de <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x926>
    537e:	ldr	r7, [r6, #16]
    5380:	cbz	r7, 53de <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x926>
    5382:	ldr	r2, [r7, #0]
    5384:	ldr	r2, [r2, #32]
    5386:	cmp	r2, r3
    5388:	bne.w	54ba <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0xa02>
    538c:	ldr	r1, [r7, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    538e:	str	r0, [r7, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    5390:	cbz	r1, 53d6 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x91e>
    5392:	ldr	r2, [r1, #16]
    5394:	subs	r2, #1
    5396:	str	r2, [r1, #16]
    5398:	cbnz	r2, 53d6 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x91e>
    539a:	ldr.w	r8, [r7, #16]
    539e:	cmp.w	r8, #0
    53a2:	beq.n	53d6 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x91e>
    53a4:	ldr.w	r2, [r8]
    53a8:	ldr	r2, [r2, #32]
    53aa:	cmp	r2, r3
    53ac:	bne.w	54d8 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0xa20>
    53b0:	ldr.w	r2, [r8, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    53b4:	str.w	fp, [r8]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    53b8:	cbz	r2, 53ce <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x916>
    53ba:	ldr	r3, [r2, #16]
    53bc:	subs	r3, #1
    53be:	str	r3, [r2, #16]
    53c0:	cbnz	r3, 53ce <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x916>
    53c2:	ldr.w	r0, [r8, #16]
    53c6:	cbz	r0, 53ce <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x916>
    53c8:	ldr	r3, [r0, #0]
    53ca:	ldr	r3, [r3, #32]
    53cc:	blx	r3
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
		invalidate();
	}
    53ce:	mov	r0, r8
    53d0:	movs	r1, #20
    53d2:	bl	1006c <operator delete(void*, unsigned int)>
    53d6:	mov	r0, r7
    53d8:	movs	r1, #20
    53da:	bl	1006c <operator delete(void*, unsigned int)>
    53de:	mov	r0, r6
    53e0:	movs	r1, #20
    53e2:	bl	1006c <operator delete(void*, unsigned int)>
    53e6:	mov	r0, r5
    53e8:	movs	r1, #20
    53ea:	bl	1006c <operator delete(void*, unsigned int)>
    53ee:	mov	r0, r4
    53f0:	movs	r1, #20
    53f2:	bl	1006c <operator delete(void*, unsigned int)>
    53f6:	ldr	r3, [sp, #56]	; 0x38
    53f8:	movs	r4, #0
    53fa:	b.n	4e96 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3de>
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
	}
	virtual const char* name() {
		return (f) ? f->name() : "";
    53fc:	ldr	r1, [pc, #256]	; (5500 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0xa48>)
    53fe:	b.n	5038 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x580>
    5400:	ldr	r1, [pc, #252]	; (5500 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0xa48>)
    5402:	b.n	4fb0 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x4f8>
	}
	virtual void close() {
		if (f) f->close();
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
    5404:	mov	r0, r2
    5406:	blx	r3
    5408:	b.n	4f2c <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x474>
	}
	virtual const char* name() {
		return (f) ? f->name() : "";
    540a:	blx	r2
    540c:	mov	r1, r0
    540e:	b.n	4fb0 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x4f8>
	}
	virtual bool isDirectory() {
		return (f) ? f->isDirectory() : false;
    5410:	blx	r2
    5412:	b.n	50be <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x606>
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
	}
	virtual const char* name() {
		return (f) ? f->name() : "";
    5414:	blx	r2
    5416:	mov	r1, r0
    5418:	b.n	5038 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x580>
	}
	virtual void close() {
		if (f) f->close();
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
    541a:	blx	r1
    541c:	b.n	4f2c <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x474>
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    541e:	mov	r0, r5
    5420:	blx	r2
    5422:	b.w	4b76 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0xbe>
    5426:	mov	r0, r7
    5428:	blx	r2
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
		invalidate();
	}
    542a:	mov	r0, r5
    542c:	movs	r1, #20
    542e:	bl	1006c <operator delete(void*, unsigned int)>
    5432:	b.w	4b76 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0xbe>
  char tmp1Name[MAX_FILENAME_LEN];

  if(!sd_mkdir(store1,newfilename))  {DBG_FAIL_MACRO; return false;}

  File f1=sd_open(store0,oldfilename,FILE_READ);
  if(!f1) {DBG_FAIL_MACRO; return false;}
    5436:	mov	r4, r3
        }
      }
    }
  }
  return sd_rmdir(store0,oldfilename);
}
    5438:	mov	r0, r4
    543a:	add.w	sp, sp, #596	; 0x254
    543e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    5442:	mov	r0, r2
    5444:	blx	r1
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
		invalidate();
	}
    5446:	mov	r0, r7
    5448:	movs	r1, #20
    544a:	bl	1006c <operator delete(void*, unsigned int)>
    544e:	b.n	52be <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x806>
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    5450:	mov	r0, r5
    5452:	blx	r2
    5454:	b.n	4caa <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x1f2>
    5456:	str	r2, [sp, #20]
    5458:	ldr	r0, [sp, #16]
    545a:	blx	r1
    545c:	ldr	r2, [sp, #20]
    545e:	b.n	52ae <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x7f6>
    5460:	mov	r0, r5
    5462:	blx	r2
    5464:	b.n	53ee <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x936>
    5466:	mov	r0, r6
    5468:	blx	r2
    546a:	b.n	4ca2 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x1ea>
    546c:	mov	r0, r4
    546e:	blx	r2
    5470:	b.n	53f6 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x93e>
    5472:	mov	r0, r4
    5474:	blx	r2
    5476:	b.n	4e86 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3ce>
    5478:	str	r2, [sp, #24]
    547a:	ldr	r0, [sp, #20]
    547c:	blx	r1
    547e:	ldr	r2, [sp, #24]
    5480:	b.n	52a2 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x7ea>
    5482:	mov	r0, r7
    5484:	blx	r2
    5486:	b.n	4db8 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x300>
    5488:	mov	r0, r5
    548a:	blx	r2
    548c:	b.n	4e7e <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3c6>
    548e:	str	r2, [sp, #28]
    5490:	ldr	r0, [sp, #24]
    5492:	blx	r1
    5494:	ldr	r2, [sp, #28]
    5496:	b.n	5296 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x7de>
    5498:	mov	r0, r8
    549a:	blx	r2
    549c:	b.n	4db0 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x2f8>
    549e:	mov	r0, r6
    54a0:	blx	r2
    54a2:	b.n	53e6 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x92e>
    54a4:	str	r2, [sp, #32]
    54a6:	ldr	r0, [sp, #28]
    54a8:	blx	r1
    54aa:	ldr	r2, [sp, #32]
    54ac:	b.n	528a <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x7d2>
    54ae:	mov	r0, r6
    54b0:	blx	r2
    54b2:	b.n	4e76 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3be>
    54b4:	mov	r0, r7
    54b6:	blx	r2
    54b8:	b.n	4e6e <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3b6>
    54ba:	mov	r0, r7
    54bc:	blx	r2
    54be:	b.n	53de <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x926>
    54c0:	mov	r0, r9
    54c2:	blx	r2
    54c4:	b.n	4da8 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x2f0>
    54c6:	mov	r0, sl
    54c8:	blx	r2
    54ca:	b.n	4da0 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x2e8>
    54cc:	str	r2, [sp, #32]
    54ce:	mov	r0, r1
    54d0:	mov	r3, lr
    54d2:	blx	r3
    54d4:	ldr	r2, [sp, #32]
    54d6:	b.n	527e <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x7c6>
    54d8:	mov	r0, r8
    54da:	blx	r2
    54dc:	b.n	53d6 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x91e>
    54de:	ldr	r2, [r5, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    54e0:	str.w	fp, [r5]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    54e4:	cmp	r2, #0
    54e6:	beq.w	4e86 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3ce>
    54ea:	b.n	4dce <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x316>
    54ec:	ldr	r3, [sp, #56]	; 0x38
    54ee:	ldr.w	fp, [pc, #8]	; 54f8 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0xa40>
    54f2:	b.n	4e96 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3de>
    54f4:	.word	0x20000c60
    54f8:	.word	0x20000074
    54fc:	.word	0x00000b4d
    5500:	.word	0x20000228

00005504 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)>:
 * save p2
 * 
*/

  bool MTPStorage_SD::move(uint32_t handle, uint32_t newStore, uint32_t newParent ) 
  { 
    5504:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5508:	subw	sp, sp, #2696	; 0xa88
    #if DEBUG>1
      Serial.printf("%d -> %d %d\n",handle,newStorage,newParent);
    #endif
    if(newParent==0xFFFFFFFFUL) newParent=newStore; //storage runs from 1, while record.store runs from 0
    550c:	cmp.w	r3, #4294967295
    5510:	ite	ne
    5512:	movne	r7, r3
    5514:	moveq	r7, r2
 * save p2
 * 
*/

  bool MTPStorage_SD::move(uint32_t handle, uint32_t newStore, uint32_t newParent ) 
  { 
    5516:	mov	r4, r0
    #if DEBUG>1
      Serial.printf("%d -> %d %d\n",handle,newStorage,newParent);
    #endif
    if(newParent==0xFFFFFFFFUL) newParent=newStore; //storage runs from 1, while record.store runs from 0

    Record p1 = ReadIndexRecord(handle);
    5518:	mov	r2, r1
 * save p2
 * 
*/

  bool MTPStorage_SD::move(uint32_t handle, uint32_t newStore, uint32_t newParent ) 
  { 
    551a:	mov	r6, r1
    #if DEBUG>1
      Serial.printf("%d -> %d %d\n",handle,newStorage,newParent);
    #endif
    if(newParent==0xFFFFFFFFUL) newParent=newStore; //storage runs from 1, while record.store runs from 0

    Record p1 = ReadIndexRecord(handle);
    551c:	mov	r1, r0
    551e:	add	r0, sp, #792	; 0x318
    5520:	bl	2298 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    Record p2 = ReadIndexRecord(newParent);
    5524:	mov	r2, r7
    5526:	mov	r1, r4
    5528:	add.w	r0, sp, #1064	; 0x428
    552c:	bl	2298 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    Record p3 = ReadIndexRecord(p1.parent); 
    5530:	ldr	r2, [sp, #792]	; 0x318
    5532:	mov	r1, r4
    5534:	add.w	r0, sp, #1336	; 0x538
    5538:	bl	2298 <MTPStorage_SD::ReadIndexRecord(unsigned long)>

    if(p1.isdir) 
    553c:	ldrb.w	r3, [sp, #804]	; 0x324
    5540:	cbz	r3, 554c <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x48>
    { if(!p1.scanned) 
    5542:	ldrb.w	r3, [sp, #805]	; 0x325
    5546:	cmp	r3, #0
    5548:	beq.w	56f8 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x1f4>
      { ScanDir(p1.store, handle) ; // in case scan directory
        WriteIndexRecord(handle, p1);
      }
    }

    Record p1o = p1;
    554c:	mov.w	r2, #272	; 0x110
    5550:	add	r1, sp, #792	; 0x318
    5552:	add.w	r0, sp, #1608	; 0x648
    5556:	bl	db14 <memcpy>
    Record p2o = p2;
    555a:	mov.w	r2, #272	; 0x110
    555e:	add.w	r1, sp, #1064	; 0x428
    5562:	add.w	r0, sp, #1880	; 0x758
    5566:	bl	db14 <memcpy>
    Record p3o = p3;

    char oldName[MAX_FILENAME_LEN];
    ConstructFilename(handle, oldName, MAX_FILENAME_LEN);
    556a:	add	r2, sp, #280	; 0x118
    556c:	mov.w	r3, #256	; 0x100
    5570:	mov	r1, r6
    5572:	mov	r0, r4
    5574:	bl	26f8 <MTPStorage_SD::ConstructFilename(int, char*, int)>
    uint32_t jx=-1;
    Record pxo;

      // remove index from old parent
      Record px;
      if(p3.child==handle)
    5578:	ldr.w	r8, [sp, #1340]	; 0x53c
    557c:	cmp	r6, r8
    557e:	beq.w	56be <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x1ba>
        p3.child = p1.sibling;
        WriteIndexRecord(p1.parent, p3);    
      }
      else
      { jx = p3.child;
        px = ReadIndexRecord(jx); 
    5582:	mov	r2, r8
    5584:	mov	r1, r4
    5586:	add	r0, sp, #8
    5588:	bl	2298 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    558c:	add	r1, sp, #8
    558e:	mov.w	r2, #272	; 0x110
    5592:	addw	r0, sp, #2424	; 0x978
    5596:	bl	db14 <memcpy>
        pxo = px;
    559a:	addw	r1, sp, #2424	; 0x978
    559e:	addw	r0, sp, #2152	; 0x868
    55a2:	mov.w	r2, #272	; 0x110
    55a6:	bl	db14 <memcpy>
        while(handle != px.sibling)
    55aa:	ldr.w	r5, [sp, #2432]	; 0x980
    55ae:	cmp	r6, r5
    55b0:	bne.n	55b6 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0xb2>
    55b2:	b.n	5710 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x20c>
    55b4:	mov	r5, r3
        {
          jx = px.sibling;
          px = ReadIndexRecord(jx); 
    55b6:	mov	r2, r5
    55b8:	mov	r1, r4
    55ba:	add	r0, sp, #8
    55bc:	bl	2298 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    55c0:	mov.w	r2, #272	; 0x110
    55c4:	add	r1, sp, #8
    55c6:	addw	r0, sp, #2424	; 0x978
    55ca:	bl	db14 <memcpy>
          pxo = px;
    55ce:	mov.w	r2, #272	; 0x110
    55d2:	addw	r1, sp, #2424	; 0x978
    55d6:	addw	r0, sp, #2152	; 0x868
    55da:	bl	db14 <memcpy>
      }
      else
      { jx = p3.child;
        px = ReadIndexRecord(jx); 
        pxo = px;
        while(handle != px.sibling)
    55de:	ldr.w	r3, [sp, #2432]	; 0x980
    55e2:	cmp	r6, r3
    55e4:	bne.n	55b4 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0xb0>
        {
          jx = px.sibling;
          px = ReadIndexRecord(jx); 
          pxo = px;
        }
        px.sibling = p1.sibling;
    55e6:	ldr	r3, [sp, #800]	; 0x320
        WriteIndexRecord(jx, px);
    55e8:	addw	r2, sp, #2424	; 0x978
    55ec:	mov	r1, r5
    55ee:	mov	r0, r4
        {
          jx = px.sibling;
          px = ReadIndexRecord(jx); 
          pxo = px;
        }
        px.sibling = p1.sibling;
    55f0:	str.w	r3, [sp, #2432]	; 0x980
        WriteIndexRecord(jx, px);
    55f4:	bl	20c8 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
      }
    
      // add to new parent
      p1.parent = newParent;
      p1.store = p2.store;
      p1.sibling = p2.child;
    55f8:	ldr.w	r3, [sp, #1068]	; 0x42c
      p2.child = handle;
      WriteIndexRecord(handle, p1);
    55fc:	add	r2, sp, #792	; 0x318
        WriteIndexRecord(jx, px);
      }
    
      // add to new parent
      p1.parent = newParent;
      p1.store = p2.store;
    55fe:	ldrh.w	lr, [sp, #1078]	; 0x436
      p1.sibling = p2.child;
      p2.child = handle;
      WriteIndexRecord(handle, p1);
    5602:	mov	r1, r6
    5604:	mov	r0, r4
      }
    
      // add to new parent
      p1.parent = newParent;
      p1.store = p2.store;
      p1.sibling = p2.child;
    5606:	str	r3, [sp, #800]	; 0x320
        WriteIndexRecord(jx, px);
      }
    
      // add to new parent
      p1.parent = newParent;
      p1.store = p2.store;
    5608:	strh.w	lr, [sp, #806]	; 0x326
        px.sibling = p1.sibling;
        WriteIndexRecord(jx, px);
      }
    
      // add to new parent
      p1.parent = newParent;
    560c:	str	r7, [sp, #792]	; 0x318
      p1.store = p2.store;
      p1.sibling = p2.child;
      p2.child = handle;
    560e:	str.w	r6, [sp, #1068]	; 0x42c
      WriteIndexRecord(handle, p1);
    5612:	bl	20c8 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
      WriteIndexRecord(newParent,p2);
    5616:	add.w	r2, sp, #1064	; 0x428
    561a:	mov	r1, r7
    561c:	mov	r0, r4
    561e:	bl	20c8 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>

      // now working on disk storage
      char newName[MAX_FILENAME_LEN];
      ConstructFilename(handle, newName, MAX_FILENAME_LEN);
    5622:	mov.w	r3, #256	; 0x100
    5626:	mov	r1, r6
    5628:	add	r2, sp, #536	; 0x218
    562a:	mov	r0, r4
    562c:	bl	26f8 <MTPStorage_SD::ConstructFilename(int, char*, int)>
        Serial.print(p1.store); Serial.print(": ");Serial.println(newName);
        dumpIndexList();
      #endif


    if(p1o.store == p2o.store)
    5630:	ldrh.w	r1, [sp, #1622]	; 0x656
    5634:	ldrh.w	r3, [sp, #1894]	; 0x766
    5638:	cmp	r1, r3
    563a:	beq.n	56d6 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x1d2>
    { // do a simple rename (works for files and directories)
      if(sd_rename(p1o.store,oldName,newName)) return true; else {DBG_FAIL_MACRO; goto fail;}
    }
    else if(!p1o.isdir)
    563c:	ldrb.w	r2, [sp, #1620]	; 0x654
    5640:	cbz	r2, 5684 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x180>
    { if(sd_copy(p1o.store,oldName, p2o.store, newName)) 
      { sd_remove(p2o.store,oldName); return true; } else { DBG_FAIL_MACRO; goto fail;}
    }
    else
    { // move directory cross mtp-disks
      if(sd_moveDir(p1o.store,oldName,p2o.store,newName)) return true; else {DBG_FAIL_MACRO; goto fail;}
    5642:	add	r2, sp, #536	; 0x218
    5644:	adds	r0, r4, #4
    5646:	str	r2, [sp, #0]
    5648:	add	r2, sp, #280	; 0x118
    564a:	bl	4a84 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*)>
    564e:	cmp	r0, #0
    5650:	bne.n	56ea <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x1e6>
    }

  fail:
    // undo changes in index list
    if(jx<0) WriteIndexRecord(p1.parent, p3o); else WriteIndexRecord(jx, pxo);
    5652:	mov	r1, r5
    5654:	addw	r2, sp, #2152	; 0x868
    5658:	mov	r0, r4
    WriteIndexRecord(handle, p1o);
    WriteIndexRecord(newParent,p2o);      
    return false;
    565a:	mov.w	r8, #0
      if(sd_moveDir(p1o.store,oldName,p2o.store,newName)) return true; else {DBG_FAIL_MACRO; goto fail;}
    }

  fail:
    // undo changes in index list
    if(jx<0) WriteIndexRecord(p1.parent, p3o); else WriteIndexRecord(jx, pxo);
    565e:	bl	20c8 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    WriteIndexRecord(handle, p1o);
    5662:	add.w	r2, sp, #1608	; 0x648
    5666:	mov	r1, r6
    5668:	mov	r0, r4
    566a:	bl	20c8 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    WriteIndexRecord(newParent,p2o);      
    566e:	add.w	r2, sp, #1880	; 0x758
    5672:	mov	r1, r7
    5674:	mov	r0, r4
    5676:	bl	20c8 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    return false;
  }
    567a:	mov	r0, r8
    567c:	addw	sp, sp, #2696	; 0xa88
    5680:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(p1o.store == p2o.store)
    { // do a simple rename (works for files and directories)
      if(sd_rename(p1o.store,oldName,newName)) return true; else {DBG_FAIL_MACRO; goto fail;}
    }
    else if(!p1o.isdir)
    { if(sd_copy(p1o.store,oldName, p2o.store, newName)) 
    5684:	add	r2, sp, #536	; 0x218
    5686:	adds	r0, r4, #4
    5688:	str	r2, [sp, #0]
    568a:	add	r2, sp, #280	; 0x118
    568c:	bl	3fd4 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)>
    5690:	mov	r8, r0
    5692:	cmp	r0, #0
    5694:	beq.n	5652 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x14e>
      { sd_remove(p2o.store,oldName); return true; } else { DBG_FAIL_MACRO; goto fail;}
    5696:	ldrh.w	r5, [sp, #1894]	; 0x766
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
    569a:	add	r0, sp, #280	; 0x118
    569c:	bl	11240 <strlen>
    56a0:	mov	r1, r0
    56a2:	add.w	r4, r4, r5, lsl #2
    56a6:	add	r0, sp, #280	; 0x118
    56a8:	bl	e284 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    56ac:	ldr	r0, [pc, #100]	; (5714 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x210>)
    56ae:	bl	ff48 <Print::println()>
    56b2:	ldr	r0, [r4, #88]	; 0x58
    56b4:	add	r1, sp, #280	; 0x118
    56b6:	ldr	r3, [r0, #0]
    56b8:	ldr	r3, [r3, #16]
    56ba:	blx	r3
    56bc:	b.n	567a <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x176>

      // remove index from old parent
      Record px;
      if(p3.child==handle)
      {
        p3.child = p1.sibling;
    56be:	ldr	r3, [sp, #800]	; 0x320
        WriteIndexRecord(p1.parent, p3);    
    56c0:	add.w	r2, sp, #1336	; 0x538
    56c4:	ldr	r1, [sp, #792]	; 0x318
    56c6:	mov	r0, r4

      // remove index from old parent
      Record px;
      if(p3.child==handle)
      {
        p3.child = p1.sibling;
    56c8:	str.w	r3, [sp, #1340]	; 0x53c
    #if DEBUG>1
      Serial.print(p1.store); Serial.print(": "); Serial.println(oldName);
      dumpIndexList();
    #endif

    uint32_t jx=-1;
    56cc:	mov.w	r5, #4294967295
      // remove index from old parent
      Record px;
      if(p3.child==handle)
      {
        p3.child = p1.sibling;
        WriteIndexRecord(p1.parent, p3);    
    56d0:	bl	20c8 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    56d4:	b.n	55f8 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0xf4>
    uint32_t sd_getFSCount(void) {return fsCount;}
    const char *sd_getFSName(uint32_t store) { return sd_name[store];}

    File sd_open(uint32_t store, const char *filename, uint32_t mode) { return sdx[store]->open(filename,mode);  }
    bool sd_mkdir(uint32_t store, char *filename) {  return sdx[store]->mkdir(filename);  }
    bool sd_rename(uint32_t store, char *oldfilename, char *newfilename) { return sdx[store]->rename(oldfilename,newfilename);  }
    56d6:	add.w	r3, r4, r1, lsl #2
    56da:	add	r2, sp, #536	; 0x218
    56dc:	add	r1, sp, #280	; 0x118
    56de:	ldr	r0, [r3, #88]	; 0x58
    56e0:	ldr	r3, [r0, #0]
    56e2:	ldr	r3, [r3, #12]
    56e4:	blx	r3
      #endif


    if(p1o.store == p2o.store)
    { // do a simple rename (works for files and directories)
      if(sd_rename(p1o.store,oldName,newName)) return true; else {DBG_FAIL_MACRO; goto fail;}
    56e6:	cmp	r0, #0
    56e8:	beq.n	5652 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x14e>
    56ea:	mov.w	r8, #1
    // undo changes in index list
    if(jx<0) WriteIndexRecord(p1.parent, p3o); else WriteIndexRecord(jx, pxo);
    WriteIndexRecord(handle, p1o);
    WriteIndexRecord(newParent,p2o);      
    return false;
  }
    56ee:	mov	r0, r8
    56f0:	addw	sp, sp, #2696	; 0xa88
    56f4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    Record p2 = ReadIndexRecord(newParent);
    Record p3 = ReadIndexRecord(p1.parent); 

    if(p1.isdir) 
    { if(!p1.scanned) 
      { ScanDir(p1.store, handle) ; // in case scan directory
    56f8:	mov	r2, r6
    56fa:	ldrh.w	r1, [sp, #806]	; 0x326
    56fe:	mov	r0, r4
    5700:	bl	2e84 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)>
        WriteIndexRecord(handle, p1);
    5704:	add	r2, sp, #792	; 0x318
    5706:	mov	r1, r6
    5708:	mov	r0, r4
    570a:	bl	20c8 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    570e:	b.n	554c <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x48>
      }
      else
      { jx = p3.child;
        px = ReadIndexRecord(jx); 
        pxo = px;
        while(handle != px.sibling)
    5710:	mov	r5, r8
    5712:	b.n	55e6 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0xe2>
    5714:	.word	0x20000c60

00005718 <txEvent_event>:
    static uint32_t mtp_rxEventcount=0;

    uint32_t get_mtp_txEventcount() {return mtp_txEventcount; }
    uint32_t get_mtp_rxEventcount() {return mtp_rxEventcount; }
    
    static void txEvent_event(transfer_t *t) { mtp_txEventcount++;}
    5718:	ldr	r2, [pc, #8]	; (5724 <txEvent_event+0xc>)
    571a:	ldr	r3, [r2, #0]
    571c:	adds	r3, #1
    571e:	str	r3, [r2, #0]
    5720:	bx	lr
    5722:	nop
    5724:	.word	0x20043ec0

00005728 <rxEvent_event>:
    static void rxEvent_event(transfer_t *t) { mtp_rxEventcount++;}
    5728:	ldr	r2, [pc, #8]	; (5734 <rxEvent_event+0xc>)
    572a:	ldr	r3, [r2, #0]
    572c:	adds	r3, #1
    572e:	str	r3, [r2, #0]
    5730:	bx	lr
    5732:	nop
    5734:	.word	0x20043e80

00005738 <usb_mtp_wait>:
        usb_receive(MTP_EVENT_ENDPOINT, rx_event_transfer + 0);
        return 1;
    }

    static int usb_mtp_wait(transfer_t *xfer, uint32_t timeout)
    {
    5738:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
      uint32_t wait_begin_at = systick_millis_count;
    573c:	ldr	r4, [pc, #60]	; (577c <usb_mtp_wait+0x44>)
      while (1) {
        if (!usb_configuration) return -1; // usb not enumerated by host
    573e:	ldr	r5, [pc, #64]	; (5780 <usb_mtp_wait+0x48>)
        return 1;
    }

    static int usb_mtp_wait(transfer_t *xfer, uint32_t timeout)
    {
      uint32_t wait_begin_at = systick_millis_count;
    5740:	ldr	r7, [r4, #0]
      while (1) {
        if (!usb_configuration) return -1; // usb not enumerated by host
    5742:	ldrb	r3, [r5, #0]
    5744:	cbz	r3, 576c <usb_mtp_wait+0x34>
    5746:	mov	r6, r0
    5748:	mov	r8, r1
    574a:	b.n	575c <usb_mtp_wait+0x24>
        uint32_t status = usb_transfer_status(xfer);
        if (!(status & 0x80)) break; // transfer descriptor ready
        if (systick_millis_count - wait_begin_at > timeout) return 0;
    574c:	ldr	r3, [r4, #0]
    574e:	subs	r3, r3, r7
    5750:	cmp	r3, r8
    5752:	bhi.n	5774 <usb_mtp_wait+0x3c>
        yield();
    5754:	bl	fc48 <yield>

    static int usb_mtp_wait(transfer_t *xfer, uint32_t timeout)
    {
      uint32_t wait_begin_at = systick_millis_count;
      while (1) {
        if (!usb_configuration) return -1; // usb not enumerated by host
    5758:	ldrb	r3, [r5, #0]
    575a:	cbz	r3, 576c <usb_mtp_wait+0x34>
        uint32_t status = usb_transfer_status(xfer);
    575c:	mov	r0, r6
    575e:	bl	ef4c <usb_transfer_status>
        if (!(status & 0x80)) break; // transfer descriptor ready
    5762:	lsls	r3, r0, #24
    5764:	bmi.n	574c <usb_mtp_wait+0x14>
        if (systick_millis_count - wait_begin_at > timeout) return 0;
        yield();
      }
      return 1;
    5766:	movs	r0, #1
    5768:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

    static int usb_mtp_wait(transfer_t *xfer, uint32_t timeout)
    {
      uint32_t wait_begin_at = systick_millis_count;
      while (1) {
        if (!usb_configuration) return -1; // usb not enumerated by host
    576c:	mov.w	r0, #4294967295
    5770:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        uint32_t status = usb_transfer_status(xfer);
        if (!(status & 0x80)) break; // transfer descriptor ready
        if (systick_millis_count - wait_begin_at > timeout) return 0;
    5774:	movs	r0, #0
        yield();
      }
      return 1;
    }
    5776:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    577a:	nop
    577c:	.word	0x200447a4
    5780:	.word	0x20044798

00005784 <MTPD::write(char const*, int) [clone .part.2]>:
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    5784:	movw	r3, #9256	; 0x2428
    5788:	ldr	r3, [r0, r3]
    int MTPD::fetch_packet(uint8_t *data_buffer)
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    578a:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    578e:	mov	r5, r1
    5790:	mov	r8, r2
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    5792:	cbnz	r3, 579c <MTPD::write(char const*, int) [clone .part.2]+0x18>
    5794:	ldr	r7, [pc, #104]	; (5800 <MTPD::write(char const*, int) [clone .part.2]+0x7c>)
    5796:	add.w	r2, r0, #544	; 0x220
    579a:	str	r2, [r7, #0]
        write_length_ += len;
    579c:	add	r3, r8
    579e:	movw	r2, #9256	; 0x2428
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    57a2:	cmp.w	r8, #0
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    57a6:	str	r3, [r0, r2]
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    57a8:	ble.n	57fa <MTPD::write(char const*, int) [clone .part.2]+0x76>
    57aa:	add.w	r9, r0, #1056	; 0x420
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    57ae:	add.w	r6, r0, #544	; 0x220
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    57b2:	movs	r4, #0
    57b4:	ldr	r7, [pc, #72]	; (5800 <MTPD::write(char const*, int) [clone .part.2]+0x7c>)
    57b6:	b.n	57bc <MTPD::write(char const*, int) [clone .part.2]+0x38>
    57b8:	cmp	r8, r4
    57ba:	ble.n	57fa <MTPD::write(char const*, int) [clone .part.2]+0x76>
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
    57bc:	ldr	r3, [r7, #0]
    57be:	rsb	r2, r4, r8
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    57c2:	mov	r1, r5
    57c4:	rsb	sl, r3, r9
    57c8:	mov	r0, r3
    57ca:	cmp	sl, r2
    57cc:	it	ge
    57ce:	movge	sl, r2
    57d0:	mov	r2, sl
          pos += to_copy;
    57d2:	add	r4, sl
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    57d4:	bl	db14 <memcpy>
    57d8:	mov	r3, r0
          pos += to_copy;
          src += to_copy;
    57da:	add	r5, sl
          dst += to_copy;
    57dc:	add	r3, sl
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    57de:	cmp	r3, r9
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    57e0:	str	r3, [r7, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    57e2:	bne.n	57b8 <MTPD::write(char const*, int) [clone .part.2]+0x34>

#elif defined(__IMXRT1062__)  

    int MTPD::push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    57e4:	movs	r2, #60	; 0x3c
    57e6:	mov.w	r1, #512	; 0x200
    57ea:	mov	r0, r6
    57ec:	bl	faf4 <usb_mtp_send>
    57f0:	cmp	r0, #0
    57f2:	ble.n	57e4 <MTPD::write(char const*, int) [clone .part.2]+0x60>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    57f4:	cmp	r8, r4
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    57f6:	str	r6, [r7, #0]
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    57f8:	bgt.n	57bc <MTPD::write(char const*, int) [clone .part.2]+0x38>
    57fa:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    57fe:	nop
    5800:	.word	0x20043f00

00005804 <MTPD::writestring(char const*)>:
  void MTPD::write64(uint64_t x) { write((char*)&x, sizeof(x)); }

#define Store2Storage(x) (x+1)
#define Storage2Store(x) (x-1)

  void MTPD::writestring(const char* str) {
    5804:	push	{r4, r5, r6, r7, lr}
    if (*str) 
    5806:	ldrb	r3, [r1, #0]
  void MTPD::write64(uint64_t x) { write((char*)&x, sizeof(x)); }

#define Store2Storage(x) (x+1)
#define Storage2Store(x) (x-1)

  void MTPD::writestring(const char* str) {
    5808:	sub	sp, #12
    580a:	mov	r6, r0
    if (*str) 
    580c:	cmp	r3, #0
    580e:	beq.n	5884 <MTPD::writestring(char const*)+0x80>
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    5810:	movw	r5, #9252	; 0x2424
#define Store2Storage(x) (x+1)
#define Storage2Store(x) (x-1)

  void MTPD::writestring(const char* str) {
    if (*str) 
    { write8(strlen(str) + 1);
    5814:	mov	r0, r1
    5816:	mov	r4, r1
    5818:	bl	11240 <strlen>
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    581c:	ldrb	r2, [r6, r5]
    581e:	adds	r0, #1
    5820:	strb.w	r0, [sp, #3]
    5824:	cmp	r2, #0
    5826:	beq.n	58ac <MTPD::writestring(char const*)+0xa8>
      {
        write_length_ += len;
    5828:	movw	r1, #9256	; 0x2428
    582c:	ldr	r3, [r6, r1]
    582e:	adds	r3, #1
    5830:	str	r3, [r6, r1]
#define Storage2Store(x) (x-1)

  void MTPD::writestring(const char* str) {
    if (*str) 
    { write8(strlen(str) + 1);
      while (*str) {  write16(*str);  ++str;  } write16(0);
    5832:	ldrb	r3, [r4, #0]
    5834:	cbz	r3, 5876 <MTPD::writestring(char const*)+0x72>
    5836:	movw	r7, #9252	; 0x2424
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
      {
        write_length_ += len;
    583a:	movw	r5, #9256	; 0x2428
    583e:	add	r7, r6
    5840:	add	r5, r6
    5842:	b.n	5850 <MTPD::writestring(char const*)+0x4c>
    5844:	ldr	r3, [r5, #0]
    5846:	adds	r3, #2
    5848:	str	r3, [r5, #0]
#define Storage2Store(x) (x-1)

  void MTPD::writestring(const char* str) {
    if (*str) 
    { write8(strlen(str) + 1);
      while (*str) {  write16(*str);  ++str;  } write16(0);
    584a:	ldrb.w	r3, [r4, #1]!
    584e:	cbz	r3, 586e <MTPD::writestring(char const*)+0x6a>
    5850:	strh.w	r3, [sp, #6]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    5854:	cmp	r2, #0
    5856:	bne.n	5844 <MTPD::writestring(char const*)+0x40>
    5858:	movs	r2, #2
    585a:	add.w	r1, sp, #6
    585e:	mov	r0, r6
    5860:	bl	5784 <MTPD::write(char const*, int) [clone .part.2]>
#define Storage2Store(x) (x-1)

  void MTPD::writestring(const char* str) {
    if (*str) 
    { write8(strlen(str) + 1);
      while (*str) {  write16(*str);  ++str;  } write16(0);
    5864:	ldrb.w	r3, [r4, #1]!
    5868:	ldrb	r2, [r7, #0]
    586a:	cmp	r3, #0
    586c:	bne.n	5850 <MTPD::writestring(char const*)+0x4c>
    586e:	movs	r3, #0
    5870:	strh.w	r3, [sp, #4]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    5874:	cbz	r2, 58c2 <MTPD::writestring(char const*)+0xbe>
      {
        write_length_ += len;
    5876:	movw	r2, #9256	; 0x2428
    587a:	ldr	r3, [r6, r2]
    587c:	adds	r3, #2
    587e:	str	r3, [r6, r2]
    { write8(strlen(str) + 1);
      while (*str) {  write16(*str);  ++str;  } write16(0);
    } else 
    { write8(0);
    }
  }
    5880:	add	sp, #12
    5882:	pop	{r4, r5, r6, r7, pc}
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    5884:	movw	r2, #9252	; 0x2424
    5888:	strb.w	r3, [sp, #2]
    588c:	ldrb	r3, [r0, r2]
    588e:	cbz	r3, 589e <MTPD::writestring(char const*)+0x9a>
      {
        write_length_ += len;
    5890:	movw	r2, #9256	; 0x2428
    5894:	ldr	r3, [r0, r2]
    5896:	adds	r3, #1
    5898:	str	r3, [r0, r2]
    { write8(strlen(str) + 1);
      while (*str) {  write16(*str);  ++str;  } write16(0);
    } else 
    { write8(0);
    }
  }
    589a:	add	sp, #12
    589c:	pop	{r4, r5, r6, r7, pc}
    589e:	movs	r2, #1
    58a0:	add.w	r1, sp, #2
    58a4:	bl	5784 <MTPD::write(char const*, int) [clone .part.2]>
    58a8:	add	sp, #12
    58aa:	pop	{r4, r5, r6, r7, pc}
    58ac:	movs	r2, #1
    58ae:	add.w	r1, sp, #3
    58b2:	mov	r0, r6
    58b4:	bl	5784 <MTPD::write(char const*, int) [clone .part.2]>
#define Storage2Store(x) (x-1)

  void MTPD::writestring(const char* str) {
    if (*str) 
    { write8(strlen(str) + 1);
      while (*str) {  write16(*str);  ++str;  } write16(0);
    58b8:	ldrb	r3, [r4, #0]
    58ba:	ldrb	r2, [r6, r5]
    58bc:	cmp	r3, #0
    58be:	bne.n	5836 <MTPD::writestring(char const*)+0x32>
    58c0:	b.n	586e <MTPD::writestring(char const*)+0x6a>
    58c2:	mov	r0, r6
    58c4:	movs	r2, #2
    58c6:	add	r1, sp, #4
    58c8:	bl	5784 <MTPD::write(char const*, int) [clone .part.2]>
    } else 
    { write8(0);
    }
  }
    58cc:	add	sp, #12
    58ce:	pop	{r4, r5, r6, r7, pc}

000058d0 <MTPD::GetDevicePropDesc(unsigned long) [clone .part.4]>:
        writestring(MTP_NAME);
        break;
    }
  }

  void MTPD::GetDevicePropDesc(uint32_t prop) {
    58d0:	push	{r4, r5, r6, r7, lr}
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    58d2:	movw	r6, #9252	; 0x2424
        writestring(MTP_NAME);
        break;
    }
  }

  void MTPD::GetDevicePropDesc(uint32_t prop) {
    58d6:	sub	sp, #12
    58d8:	mov	r4, r0
    58da:	mov	r5, r1
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    58dc:	ldrb	r3, [r0, r6]
    58de:	strh.w	r1, [sp, #4]
    58e2:	cmp	r3, #0
    58e4:	beq.n	5958 <MTPD::GetDevicePropDesc(unsigned long) [clone .part.4]+0x88>
      {
        write_length_ += len;
    58e6:	movw	r2, #9256	; 0x2428
    58ea:	movw	r1, #65535	; 0xffff
    58ee:	ldr	r3, [r0, r2]
    58f0:	strh.w	r1, [sp, #6]
    58f4:	adds	r3, #2
    58f6:	str	r3, [r0, r2]
    58f8:	movw	r2, #9256	; 0x2428
    58fc:	movs	r1, #0
    58fe:	ldr	r3, [r4, r2]
    5900:	strb.w	r1, [sp, #2]
    5904:	adds	r3, #2
    5906:	str	r3, [r4, r2]
    5908:	movw	r2, #9256	; 0x2428
    590c:	ldr	r3, [r4, r2]
    590e:	adds	r3, #1
    5910:	str	r3, [r4, r2]
      }
    }
  }

  void MTPD::GetDevicePropValue(uint32_t prop) {
    switch (prop) {
    5912:	movw	r3, #54274	; 0xd402
    5916:	cmp	r5, r3
    5918:	beq.n	5946 <MTPD::GetDevicePropDesc(unsigned long) [clone .part.4]+0x76>
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    591a:	movw	r3, #9252	; 0x2424
    591e:	movs	r2, #0
    5920:	ldrb	r3, [r4, r3]
    5922:	strb.w	r2, [sp, #3]
    5926:	cbz	r3, 5936 <MTPD::GetDevicePropDesc(unsigned long) [clone .part.4]+0x66>
      {
        write_length_ += len;
    5928:	movw	r2, #9256	; 0x2428
    592c:	ldr	r3, [r4, r2]
    592e:	adds	r3, #1
    5930:	str	r3, [r4, r2]
        write8(0);       // read-only
        GetDevicePropValue(prop);
        GetDevicePropValue(prop);
        write8(0);       // no form
    }
  }
    5932:	add	sp, #12
    5934:	pop	{r4, r5, r6, r7, pc}
    5936:	mov	r0, r4
    5938:	movs	r2, #1
    593a:	add.w	r1, sp, #3
    593e:	bl	5784 <MTPD::write(char const*, int) [clone .part.2]>
    5942:	add	sp, #12
    5944:	pop	{r4, r5, r6, r7, pc}
  void MTPD::GetDevicePropValue(uint32_t prop) {
    switch (prop) {
      case 0xd402: // friendly name
        // This is the name we'll actually see in the windows explorer.
        // Should probably be configurable.
        writestring(MTP_NAME);
    5946:	mov	r0, r4
    5948:	ldr	r1, [pc, #72]	; (5994 <MTPD::GetDevicePropDesc(unsigned long) [clone .part.4]+0xc4>)
    594a:	bl	5804 <MTPD::writestring(char const*)>
    594e:	ldr	r1, [pc, #68]	; (5994 <MTPD::GetDevicePropDesc(unsigned long) [clone .part.4]+0xc4>)
    5950:	mov	r0, r4
    5952:	bl	5804 <MTPD::writestring(char const*)>
    5956:	b.n	591a <MTPD::GetDevicePropDesc(unsigned long) [clone .part.4]+0x4a>
    5958:	movs	r2, #2
    595a:	add	r1, sp, #4
    595c:	bl	5784 <MTPD::write(char const*, int) [clone .part.2]>
    5960:	movw	r3, #65535	; 0xffff
    5964:	ldrb	r7, [r4, r6]
    5966:	strh.w	r3, [sp, #6]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    596a:	cmp	r7, #0
    596c:	bne.n	58f8 <MTPD::GetDevicePropDesc(unsigned long) [clone .part.4]+0x28>
    596e:	movs	r2, #2
    5970:	add.w	r1, sp, #6
    5974:	mov	r0, r4
    5976:	bl	5784 <MTPD::write(char const*, int) [clone .part.2]>
    597a:	ldrb	r3, [r4, r6]
    597c:	strb.w	r7, [sp, #2]
    5980:	cmp	r3, #0
    5982:	bne.n	5908 <MTPD::GetDevicePropDesc(unsigned long) [clone .part.4]+0x38>
    5984:	movs	r2, #1
    5986:	add.w	r1, sp, #2
    598a:	mov	r0, r4
    598c:	bl	5784 <MTPD::write(char const*, int) [clone .part.2]>
    5990:	b.n	5912 <MTPD::GetDevicePropDesc(unsigned long) [clone .part.4]+0x42>
    5992:	nop
    5994:	.word	0x200003d4

00005998 <MTPD::WriteDescriptor()>:
    } else 
    { write8(0);
    }
  }

  void MTPD::WriteDescriptor() {
    5998:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    599c:	movw	r4, #9252	; 0x2424
    } else 
    { write8(0);
    }
  }

  void MTPD::WriteDescriptor() {
    59a0:	sub	sp, #68	; 0x44
    59a2:	movs	r6, #100	; 0x64
    59a4:	mov	r5, r0
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    59a6:	ldrb	r3, [r0, r4]
    59a8:	strh.w	r6, [sp, #8]
    59ac:	cmp	r3, #0
    59ae:	beq.w	5b62 <MTPD::WriteDescriptor()+0x1ca>
      {
        write_length_ += len;
    59b2:	movw	r2, #9256	; 0x2428
    59b6:	movs	r1, #6
    59b8:	ldr	r3, [r0, r2]
    59ba:	str	r1, [sp, #24]
    59bc:	adds	r3, #2
    59be:	str	r3, [r0, r2]
    59c0:	movw	r2, #9256	; 0x2428
    59c4:	movs	r1, #100	; 0x64
    59c6:	ldr	r3, [r5, r2]
    59c8:	strh.w	r1, [sp, #6]
    59cc:	adds	r3, #4
    59ce:	str	r3, [r5, r2]
    59d0:	movw	r2, #9256	; 0x2428
    59d4:	ldr	r3, [r5, r2]
    59d6:	adds	r3, #2
    59d8:	str	r3, [r5, r2]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    59da:	movw	r4, #9252	; 0x2424
  void MTPD::WriteDescriptor() {
    write16(100);  // MTP version
    write32(6);    // MTP extension
//    write32(0xFFFFFFFFUL);    // MTP extension
    write16(100);  // MTP version
    writestring("microsoft.com: 1.0;");
    59de:	ldr	r1, [pc, #628]	; (5c54 <MTPD::WriteDescriptor()+0x2bc>)
    59e0:	mov	r0, r5
    59e2:	bl	5804 <MTPD::writestring(char const*)>
    59e6:	movs	r2, #0
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    59e8:	ldrb	r3, [r5, r4]
    59ea:	strh.w	r2, [sp, #4]
    59ee:	cmp	r3, #0
    59f0:	beq.w	5c30 <MTPD::WriteDescriptor()+0x298>
      {
        write_length_ += len;
    59f4:	movw	r2, #9256	; 0x2428
    59f8:	movs	r1, #20
    59fa:	ldr	r3, [r5, r2]
    59fc:	str	r1, [sp, #20]
    59fe:	adds	r3, #2
    5a00:	str	r3, [r5, r2]
    5a02:	movw	r2, #9256	; 0x2428
    5a06:	movs	r6, #1
    5a08:	ldr	r3, [r5, r2]
    5a0a:	adds	r3, #4
    5a0c:	str	r3, [r5, r2]
    5a0e:	ldr	r4, [pc, #584]	; (5c58 <MTPD::WriteDescriptor()+0x2c0>)
    5a10:	movw	r8, #9252	; 0x2424
    5a14:	movw	r7, #9256	; 0x2428
    5a18:	movw	r3, #4097	; 0x1001
    5a1c:	add.w	r9, r4, #38	; 0x26
    5a20:	add	r8, r5
    5a22:	add	r7, r5
    5a24:	b.n	5a36 <MTPD::WriteDescriptor()+0x9e>
    5a26:	ldr	r3, [r7, #0]
    writestring("microsoft.com: 1.0;");
    write16(0);    // functional mode

    // Supported operations (array of uint16)
    write32(supported_op_num);
    for(int ii=0; ii<supported_op_num;ii++) write16(supported_op[ii]);
    5a28:	cmp	r4, r9
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
      {
        write_length_ += len;
    5a2a:	add.w	r3, r3, #2
    5a2e:	str	r3, [r7, #0]
    writestring("microsoft.com: 1.0;");
    write16(0);    // functional mode

    // Supported operations (array of uint16)
    write32(supported_op_num);
    for(int ii=0; ii<supported_op_num;ii++) write16(supported_op[ii]);
    5a30:	beq.n	5a52 <MTPD::WriteDescriptor()+0xba>
    5a32:	ldrh.w	r3, [r4, #2]!
    5a36:	strh.w	r3, [sp, #10]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    5a3a:	cmp	r6, #0
    5a3c:	bne.n	5a26 <MTPD::WriteDescriptor()+0x8e>
    5a3e:	movs	r2, #2
    5a40:	add.w	r1, sp, #10
    5a44:	mov	r0, r5
    5a46:	bl	5784 <MTPD::write(char const*, int) [clone .part.2]>
    writestring("microsoft.com: 1.0;");
    write16(0);    // functional mode

    // Supported operations (array of uint16)
    write32(supported_op_num);
    for(int ii=0; ii<supported_op_num;ii++) write16(supported_op[ii]);
    5a4a:	cmp	r4, r9
    5a4c:	ldrb.w	r6, [r8]
    5a50:	bne.n	5a32 <MTPD::WriteDescriptor()+0x9a>
    5a52:	movs	r2, #4
    5a54:	str	r2, [sp, #28]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    5a56:	cmp	r6, #0
    5a58:	beq.w	5c20 <MTPD::WriteDescriptor()+0x288>
      {
        write_length_ += len;
    5a5c:	movw	r2, #9256	; 0x2428
    5a60:	ldr	r3, [r5, r2]
    5a62:	adds	r3, #4
    5a64:	str	r3, [r5, r2]
    5a66:	ldr	r4, [pc, #500]	; (5c5c <MTPD::WriteDescriptor()+0x2c4>)
    5a68:	movw	r9, #9252	; 0x2424
    5a6c:	movw	r7, #9256	; 0x2428
    5a70:	movw	r3, #16388	; 0x4004
    5a74:	add.w	r8, r4, #6
    5a78:	add	r9, r5
    5a7a:	add	r7, r5
    5a7c:	strh.w	r3, [sp, #12]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    5a80:	cbz	r6, 5a9a <MTPD::WriteDescriptor()+0x102>
      {
        write_length_ += len;
    5a82:	ldr	r3, [r7, #0]
    write32(supported_op_num);
    for(int ii=0; ii<supported_op_num;ii++) write16(supported_op[ii]);
    
    // Events (array of uint16)
    write32(supported_event_num);      
    for(int ii=0; ii<supported_event_num;ii++) write16(supported_events[ii]);
    5a84:	cmp	r8, r4
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
      {
        write_length_ += len;
    5a86:	add.w	r3, r3, #2
    5a8a:	str	r3, [r7, #0]
    write32(supported_op_num);
    for(int ii=0; ii<supported_op_num;ii++) write16(supported_op[ii]);
    
    // Events (array of uint16)
    write32(supported_event_num);      
    for(int ii=0; ii<supported_event_num;ii++) write16(supported_events[ii]);
    5a8c:	beq.n	5aac <MTPD::WriteDescriptor()+0x114>
    5a8e:	ldrh.w	r3, [r4, #2]!
    5a92:	strh.w	r3, [sp, #12]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    5a96:	cmp	r6, #0
    5a98:	bne.n	5a82 <MTPD::WriteDescriptor()+0xea>
    5a9a:	movs	r2, #2
    5a9c:	add	r1, sp, #12
    5a9e:	mov	r0, r5
    5aa0:	bl	5784 <MTPD::write(char const*, int) [clone .part.2]>
    write32(supported_op_num);
    for(int ii=0; ii<supported_op_num;ii++) write16(supported_op[ii]);
    
    // Events (array of uint16)
    write32(supported_event_num);      
    for(int ii=0; ii<supported_event_num;ii++) write16(supported_events[ii]);
    5aa4:	cmp	r8, r4
    5aa6:	ldrb.w	r6, [r9]
    5aaa:	bne.n	5a8e <MTPD::WriteDescriptor()+0xf6>
    5aac:	movs	r3, #1
    5aae:	str	r3, [sp, #40]	; 0x28
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    5ab0:	cmp	r6, #0
    5ab2:	beq.n	5b9a <MTPD::WriteDescriptor()+0x202>
      {
        write_length_ += len;
    5ab4:	movw	r2, #9256	; 0x2428
    5ab8:	movw	r1, #54274	; 0xd402
    5abc:	ldr	r3, [r5, r2]
    5abe:	strh.w	r1, [sp, #18]
    5ac2:	adds	r3, #4
    5ac4:	str	r3, [r5, r2]
    5ac6:	movw	r2, #9256	; 0x2428
    5aca:	movs	r1, #0
    5acc:	ldr	r3, [r5, r2]
    5ace:	str	r1, [sp, #36]	; 0x24
    5ad0:	adds	r3, #2
    5ad2:	str	r3, [r5, r2]
    5ad4:	movw	r2, #9256	; 0x2428
    5ad8:	movs	r1, #2
    5ada:	ldr	r3, [r5, r2]
    5adc:	str	r1, [sp, #32]
    5ade:	adds	r3, #4
    5ae0:	str	r3, [r5, r2]
    5ae2:	movw	r2, #9256	; 0x2428
    5ae6:	mov.w	r1, #12288	; 0x3000
    5aea:	ldr	r3, [r5, r2]
    5aec:	strh.w	r1, [sp, #16]
    5af0:	adds	r3, #4
    5af2:	str	r3, [r5, r2]
    5af4:	movw	r2, #9256	; 0x2428
    5af8:	movw	r1, #12289	; 0x3001
    5afc:	ldr	r3, [r5, r2]
    5afe:	strh.w	r1, [sp, #14]
    5b02:	adds	r3, #2
    5b04:	str	r3, [r5, r2]
    5b06:	movw	r2, #9256	; 0x2428
    5b0a:	ldr	r3, [r5, r2]
    5b0c:	adds	r3, #2
    5b0e:	str	r3, [r5, r2]

    write32(2);       // Playback formats (array of uint16)
    write16(0x3000);  // Undefined format
    write16(0x3001);  // Folders (associations)

    writestring(MTP_MANUF);     // Manufacturer
    5b10:	ldr	r1, [pc, #332]	; (5c60 <MTPD::WriteDescriptor()+0x2c8>)
    5b12:	mov	r0, r5
    5b14:	bl	5804 <MTPD::writestring(char const*)>
    writestring(MTP_MODEL);     // Model
    5b18:	ldr	r1, [pc, #328]	; (5c64 <MTPD::WriteDescriptor()+0x2cc>)
    5b1a:	mov	r0, r5
    5b1c:	bl	5804 <MTPD::writestring(char const*)>
    //writestring(MTP_VERS);      // version
    //writestring(MTP_SERNR);     // serial
    
    char buf[20];    
    dtostrf( (float)(TEENSYDUINO / 100.0f), 3, 2, buf);
    5b20:	vldr	s0, [pc, #324]	; 5c68 <MTPD::WriteDescriptor()+0x2d0>
    5b24:	add	r2, sp, #44	; 0x2c
    5b26:	movs	r1, #2
    5b28:	movs	r0, #3
    5b2a:	bl	f204 <dtostrf>
    strlcat(buf, " / MTP " MTP_VERS, sizeof(buf) );
    5b2e:	movs	r2, #20
    5b30:	ldr	r1, [pc, #312]	; (5c6c <MTPD::WriteDescriptor()+0x2d4>)
    5b32:	add	r0, sp, #44	; 0x2c
    5b34:	bl	111ac <strlcat>
    writestring( buf );    
    5b38:	mov	r0, r5
    5b3a:	add	r1, sp, #44	; 0x2c
    5b3c:	bl	5804 <MTPD::writestring(char const*)>
    5b40:	add	r3, sp, #44	; 0x2c
    5b42:	ldr	r2, [pc, #300]	; (5c70 <MTPD::WriteDescriptor()+0x2d8>)
    5b44:	add.w	r0, sp, #54	; 0x36
    #pragma GCC diagnostic push
    #pragma GCC diagnostic ignored "-Warray-bounds"
    for (size_t i=0; i<10; i++) buf[i] = usb_string_serial_number.wString[i];
    5b48:	ldrh.w	r1, [r2, #2]!
    5b4c:	strb.w	r1, [r3], #1
    5b50:	cmp	r3, r0
    5b52:	bne.n	5b48 <MTPD::WriteDescriptor()+0x1b0>
    #pragma GCC diagnostic pop
    writestring(buf);    
    5b54:	add	r1, sp, #44	; 0x2c
    5b56:	mov	r0, r5
    5b58:	bl	5804 <MTPD::writestring(char const*)>
  }
    5b5c:	add	sp, #68	; 0x44
    5b5e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    5b62:	movs	r2, #2
    5b64:	add	r1, sp, #8
    5b66:	bl	5784 <MTPD::write(char const*, int) [clone .part.2]>
    5b6a:	movs	r2, #6
    5b6c:	ldrb	r3, [r5, r4]
    5b6e:	str	r2, [sp, #24]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    5b70:	cmp	r3, #0
    5b72:	bne.w	59c0 <MTPD::WriteDescriptor()+0x28>
    5b76:	movs	r2, #4
    5b78:	add	r1, sp, #24
    5b7a:	mov	r0, r5
    5b7c:	bl	5784 <MTPD::write(char const*, int) [clone .part.2]>
    5b80:	ldrb	r3, [r5, r4]
    5b82:	strh.w	r6, [sp, #6]
    5b86:	cmp	r3, #0
    5b88:	bne.w	59d0 <MTPD::WriteDescriptor()+0x38>
    5b8c:	movs	r2, #2
    5b8e:	add.w	r1, sp, #6
    5b92:	mov	r0, r5
    5b94:	bl	5784 <MTPD::write(char const*, int) [clone .part.2]>
    5b98:	b.n	59da <MTPD::WriteDescriptor()+0x42>
    5b9a:	movw	r4, #9252	; 0x2424
    5b9e:	movs	r2, #4
    5ba0:	add	r1, sp, #40	; 0x28
    5ba2:	mov	r0, r5
    5ba4:	bl	5784 <MTPD::write(char const*, int) [clone .part.2]>
    5ba8:	movw	r2, #54274	; 0xd402
    5bac:	ldrb	r3, [r5, r4]
    5bae:	strh.w	r2, [sp, #18]
    5bb2:	cmp	r3, #0
    5bb4:	bne.n	5ac6 <MTPD::WriteDescriptor()+0x12e>
    5bb6:	movs	r2, #2
    5bb8:	add.w	r1, sp, #18
    5bbc:	mov	r0, r5
    5bbe:	bl	5784 <MTPD::write(char const*, int) [clone .part.2]>
    5bc2:	ldrb	r3, [r5, r4]
    5bc4:	str	r6, [sp, #36]	; 0x24
    5bc6:	cmp	r3, #0
    5bc8:	bne.n	5ad4 <MTPD::WriteDescriptor()+0x13c>
    5bca:	movs	r2, #4
    5bcc:	add	r1, sp, #36	; 0x24
    5bce:	mov	r0, r5
    5bd0:	movs	r6, #2
    5bd2:	bl	5784 <MTPD::write(char const*, int) [clone .part.2]>
    5bd6:	ldrb	r3, [r5, r4]
    5bd8:	str	r6, [sp, #32]
    5bda:	cmp	r3, #0
    5bdc:	bne.n	5ae2 <MTPD::WriteDescriptor()+0x14a>
    5bde:	movs	r2, #4
    5be0:	add	r1, sp, #32
    5be2:	mov	r0, r5
    5be4:	bl	5784 <MTPD::write(char const*, int) [clone .part.2]>
    5be8:	mov.w	r2, #12288	; 0x3000
    5bec:	ldrb	r3, [r5, r4]
    5bee:	strh.w	r2, [sp, #16]
    5bf2:	cmp	r3, #0
    5bf4:	bne.w	5af4 <MTPD::WriteDescriptor()+0x15c>
    5bf8:	mov	r2, r6
    5bfa:	add	r1, sp, #16
    5bfc:	mov	r0, r5
    5bfe:	bl	5784 <MTPD::write(char const*, int) [clone .part.2]>
    5c02:	movw	r2, #12289	; 0x3001
    5c06:	ldrb	r3, [r5, r4]
    5c08:	strh.w	r2, [sp, #14]
    5c0c:	cmp	r3, #0
    5c0e:	bne.w	5b06 <MTPD::WriteDescriptor()+0x16e>
    5c12:	mov	r2, r6
    5c14:	add.w	r1, sp, #14
    5c18:	mov	r0, r5
    5c1a:	bl	5784 <MTPD::write(char const*, int) [clone .part.2]>
    5c1e:	b.n	5b10 <MTPD::WriteDescriptor()+0x178>
    5c20:	add	r1, sp, #28
    5c22:	mov	r0, r5
    5c24:	bl	5784 <MTPD::write(char const*, int) [clone .part.2]>
    5c28:	movw	r3, #9252	; 0x2424
    5c2c:	ldrb	r6, [r5, r3]
    5c2e:	b.n	5a66 <MTPD::WriteDescriptor()+0xce>
    5c30:	movs	r2, #2
    5c32:	add	r1, sp, #4
    5c34:	mov	r0, r5
    5c36:	bl	5784 <MTPD::write(char const*, int) [clone .part.2]>
    5c3a:	movs	r2, #20
    5c3c:	ldrb	r3, [r5, r4]
    5c3e:	str	r2, [sp, #20]
    5c40:	cmp	r3, #0
    5c42:	bne.w	5a02 <MTPD::WriteDescriptor()+0x6a>
    5c46:	movs	r2, #4
    5c48:	add	r1, sp, #20
    5c4a:	mov	r0, r5
    5c4c:	bl	5784 <MTPD::write(char const*, int) [clone .part.2]>
    5c50:	ldrb	r6, [r5, r4]
    5c52:	b.n	5a0e <MTPD::WriteDescriptor()+0x76>
    5c54:	.word	0x200003dc
    5c58:	.word	0x2000039c
    5c5c:	.word	0x2000041c
    5c60:	.word	0x200003f0
    5c64:	.word	0x200003d4
    5c68:	.word	0x3fc51eb8
    5c6c:	.word	0x200003f8
    5c70:	.word	0x20000c48

00005c74 <MTPD::WriteStorageIDs()>:
    for (size_t i=0; i<10; i++) buf[i] = usb_string_serial_number.wString[i];
    #pragma GCC diagnostic pop
    writestring(buf);    
  }

  void MTPD::WriteStorageIDs() {
    5c74:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5c78:	mov	r8, r0
    uint32_t num=storage_->get_FSCount();
    5c7a:	ldr	r0, [r0, #0]
    5c7c:	ldr	r2, [pc, #116]	; (5cf4 <MTPD::WriteStorageIDs()+0x80>)
    for (size_t i=0; i<10; i++) buf[i] = usb_string_serial_number.wString[i];
    #pragma GCC diagnostic pop
    writestring(buf);    
  }

  void MTPD::WriteStorageIDs() {
    5c7e:	sub	sp, #8
    uint32_t num=storage_->get_FSCount();
    5c80:	ldr	r3, [r0, #0]
    5c82:	ldr	r3, [r3, #4]
    5c84:	cmp	r3, r2
    5c86:	bne.n	5cee <MTPD::WriteStorageIDs()+0x7a>
    {
      for(int ii=0; ii<fsCount;ii++) if(!strcmp(name,sd_name[ii])) return ii;
      return 0xFFFFFFFFUL;
    }

    uint32_t sd_getFSCount(void) {return fsCount;}
    5c88:	ldr	r6, [r0, #4]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    5c8a:	movw	r3, #9252	; 0x2424
    5c8e:	str	r6, [sp, #0]
    5c90:	ldrb.w	r3, [r8, r3]
    5c94:	cbz	r3, 5ce2 <MTPD::WriteStorageIDs()+0x6e>
      {
        write_length_ += len;
    5c96:	movw	r2, #9256	; 0x2428
    5c9a:	ldr.w	r3, [r8, r2]
    5c9e:	adds	r3, #4
    5ca0:	str.w	r3, [r8, r2]
  }

  void MTPD::WriteStorageIDs() {
    uint32_t num=storage_->get_FSCount();
    write32(num); // number of storages (disks)
    for(uint32_t ii=0;ii<num;ii++)  write32(Store2Storage(ii)); // storage id
    5ca4:	cbz	r6, 5cdc <MTPD::WriteStorageIDs()+0x68>
    5ca6:	movw	r7, #9252	; 0x2424
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
      {
        write_length_ += len;
    5caa:	movw	r5, #9256	; 0x2428
  }

  void MTPD::WriteStorageIDs() {
    uint32_t num=storage_->get_FSCount();
    write32(num); // number of storages (disks)
    for(uint32_t ii=0;ii<num;ii++)  write32(Store2Storage(ii)); // storage id
    5cae:	movs	r4, #0
    5cb0:	add	r7, r8
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
      {
        write_length_ += len;
    5cb2:	add	r5, r8
    5cb4:	b.n	5cc2 <MTPD::WriteStorageIDs()+0x4e>
    5cb6:	ldr	r3, [r5, #0]
  }

  void MTPD::WriteStorageIDs() {
    uint32_t num=storage_->get_FSCount();
    write32(num); // number of storages (disks)
    for(uint32_t ii=0;ii<num;ii++)  write32(Store2Storage(ii)); // storage id
    5cb8:	cmp	r6, r4
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
      {
        write_length_ += len;
    5cba:	add.w	r3, r3, #4
    5cbe:	str	r3, [r5, #0]
  }

  void MTPD::WriteStorageIDs() {
    uint32_t num=storage_->get_FSCount();
    write32(num); // number of storages (disks)
    for(uint32_t ii=0;ii<num;ii++)  write32(Store2Storage(ii)); // storage id
    5cc0:	beq.n	5cdc <MTPD::WriteStorageIDs()+0x68>
    5cc2:	adds	r4, #1
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    5cc4:	ldrb	r3, [r7, #0]
    5cc6:	str	r4, [sp, #4]
    5cc8:	cmp	r3, #0
    5cca:	bne.n	5cb6 <MTPD::WriteStorageIDs()+0x42>
    5ccc:	movs	r2, #4
    5cce:	mov	r0, r8
    5cd0:	add.w	r1, sp, r2
    5cd4:	bl	5784 <MTPD::write(char const*, int) [clone .part.2]>
  }

  void MTPD::WriteStorageIDs() {
    uint32_t num=storage_->get_FSCount();
    write32(num); // number of storages (disks)
    for(uint32_t ii=0;ii<num;ii++)  write32(Store2Storage(ii)); // storage id
    5cd8:	cmp	r6, r4
    5cda:	bne.n	5cc2 <MTPD::WriteStorageIDs()+0x4e>
  }
    5cdc:	add	sp, #8
    5cde:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5ce2:	movs	r2, #4
    5ce4:	mov	r1, sp
    5ce6:	mov	r0, r8
    5ce8:	bl	5784 <MTPD::write(char const*, int) [clone .part.2]>
    5cec:	b.n	5ca4 <MTPD::WriteStorageIDs()+0x30>
    #pragma GCC diagnostic pop
    writestring(buf);    
  }

  void MTPD::WriteStorageIDs() {
    uint32_t num=storage_->get_FSCount();
    5cee:	blx	r3
    5cf0:	mov	r6, r0
    5cf2:	b.n	5c8a <MTPD::WriteStorageIDs()+0x16>
    5cf4:	.word	0x00001a55

00005cf8 <MTPD::GetStorageInfo(unsigned long)>:
    write32(num); // number of storages (disks)
    for(uint32_t ii=0;ii<num;ii++)  write32(Store2Storage(ii)); // storage id
  }

  void MTPD::GetStorageInfo(uint32_t storage) {
    5cf8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5cfc:	mov	r4, r0
    uint32_t store = Storage2Store(storage);
    write16(storage_->readonly(store) ? 0x0001 : 0x0004);   // storage type (removable RAM)
    5cfe:	ldr	r0, [r0, #0]
    write32(num); // number of storages (disks)
    for(uint32_t ii=0;ii<num;ii++)  write32(Store2Storage(ii)); // storage id
  }

  void MTPD::GetStorageInfo(uint32_t storage) {
    uint32_t store = Storage2Store(storage);
    5d00:	subs	r5, r1, #1
    uint32_t num=storage_->get_FSCount();
    write32(num); // number of storages (disks)
    for(uint32_t ii=0;ii<num;ii++)  write32(Store2Storage(ii)); // storage id
  }

  void MTPD::GetStorageInfo(uint32_t storage) {
    5d02:	sub	sp, #32
    uint32_t store = Storage2Store(storage);
    write16(storage_->readonly(store) ? 0x0001 : 0x0004);   // storage type (removable RAM)
    5d04:	ldr	r3, [r0, #0]
    5d06:	mov	r1, r5
    5d08:	ldr	r3, [r3, #20]
    5d0a:	blx	r3
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    5d0c:	movw	r3, #9252	; 0x2424
    for(uint32_t ii=0;ii<num;ii++)  write32(Store2Storage(ii)); // storage id
  }

  void MTPD::GetStorageInfo(uint32_t storage) {
    uint32_t store = Storage2Store(storage);
    write16(storage_->readonly(store) ? 0x0001 : 0x0004);   // storage type (removable RAM)
    5d10:	cmp	r0, #0
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    5d12:	ldrb	r3, [r4, r3]
    for(uint32_t ii=0;ii<num;ii++)  write32(Store2Storage(ii)); // storage id
  }

  void MTPD::GetStorageInfo(uint32_t storage) {
    uint32_t store = Storage2Store(storage);
    write16(storage_->readonly(store) ? 0x0001 : 0x0004);   // storage type (removable RAM)
    5d14:	ite	eq
    5d16:	moveq	r2, #4
    5d18:	movne	r2, #1
    5d1a:	strh.w	r2, [sp, #6]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    5d1e:	cmp	r3, #0
    5d20:	beq.n	5de6 <MTPD::GetStorageInfo(unsigned long)+0xee>
      {
        write_length_ += len;
    5d22:	movw	r2, #9256	; 0x2428
    5d26:	ldr	r3, [r4, r2]
    5d28:	adds	r3, #2
    5d2a:	str	r3, [r4, r2]
  }

  void MTPD::GetStorageInfo(uint32_t storage) {
    uint32_t store = Storage2Store(storage);
    write16(storage_->readonly(store) ? 0x0001 : 0x0004);   // storage type (removable RAM)
    write16(storage_->has_directories(store) ? 0x0002: 0x0001);   // filesystem type (generic hierarchical)
    5d2c:	ldr	r0, [r4, #0]
    5d2e:	mov	r1, r5
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    5d30:	movw	r7, #9252	; 0x2424
  }

  void MTPD::GetStorageInfo(uint32_t storage) {
    uint32_t store = Storage2Store(storage);
    write16(storage_->readonly(store) ? 0x0001 : 0x0004);   // storage type (removable RAM)
    write16(storage_->has_directories(store) ? 0x0002: 0x0001);   // filesystem type (generic hierarchical)
    5d34:	ldr	r3, [r0, #0]
    5d36:	ldr	r3, [r3, #24]
    5d38:	blx	r3
    5d3a:	cmp	r0, #0
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    5d3c:	ldrb	r6, [r4, r7]
  }

  void MTPD::GetStorageInfo(uint32_t storage) {
    uint32_t store = Storage2Store(storage);
    write16(storage_->readonly(store) ? 0x0001 : 0x0004);   // storage type (removable RAM)
    write16(storage_->has_directories(store) ? 0x0002: 0x0001);   // filesystem type (generic hierarchical)
    5d3e:	ite	eq
    5d40:	moveq	r3, #1
    5d42:	movne	r3, #2
    5d44:	strh.w	r3, [sp, #10]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    5d48:	cmp	r6, #0
    5d4a:	beq.n	5e36 <MTPD::GetStorageInfo(unsigned long)+0x13e>
      {
        write_length_ += len;
    5d4c:	movw	r2, #9256	; 0x2428
    5d50:	movs	r1, #0
    5d52:	ldr	r3, [r4, r2]
    5d54:	strh.w	r1, [sp, #8]
    5d58:	adds	r3, #2
    5d5a:	str	r3, [r4, r2]
    5d5c:	movw	r2, #9256	; 0x2428
    5d60:	ldr	r3, [r4, r2]
    5d62:	adds	r3, #2
    5d64:	str	r3, [r4, r2]
    uint32_t store = Storage2Store(storage);
    write16(storage_->readonly(store) ? 0x0001 : 0x0004);   // storage type (removable RAM)
    write16(storage_->has_directories(store) ? 0x0002: 0x0001);   // filesystem type (generic hierarchical)
    write16(0x0000);   // access capability (read-write)

    uint64_t ntotal = storage_->totalSize(store) ; 
    5d66:	ldr	r0, [r4, #0]
    5d68:	mov	r1, r5
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    5d6a:	movw	sl, #9252	; 0x2424
    uint32_t store = Storage2Store(storage);
    write16(storage_->readonly(store) ? 0x0001 : 0x0004);   // storage type (removable RAM)
    write16(storage_->has_directories(store) ? 0x0002: 0x0001);   // filesystem type (generic hierarchical)
    write16(0x0000);   // access capability (read-write)

    uint64_t ntotal = storage_->totalSize(store) ; 
    5d6e:	ldr	r3, [r0, #0]
    5d70:	ldr	r3, [r3, #12]
    5d72:	blx	r3
    5d74:	mov	r6, r0
    uint64_t nused = storage_->usedSize(store) ; 
    5d76:	ldr	r0, [r4, #0]
    uint32_t store = Storage2Store(storage);
    write16(storage_->readonly(store) ? 0x0001 : 0x0004);   // storage type (removable RAM)
    write16(storage_->has_directories(store) ? 0x0002: 0x0001);   // filesystem type (generic hierarchical)
    write16(0x0000);   // access capability (read-write)

    uint64_t ntotal = storage_->totalSize(store) ; 
    5d78:	mov	r7, r1
    uint64_t nused = storage_->usedSize(store) ; 
    5d7a:	mov	r1, r5
    5d7c:	ldr	r3, [r0, #0]
    5d7e:	ldr	r3, [r3, #16]
    5d80:	blx	r3
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    5d82:	ldrb.w	r3, [r4, sl]
    write16(storage_->readonly(store) ? 0x0001 : 0x0004);   // storage type (removable RAM)
    write16(storage_->has_directories(store) ? 0x0002: 0x0001);   // filesystem type (generic hierarchical)
    write16(0x0000);   // access capability (read-write)

    uint64_t ntotal = storage_->totalSize(store) ; 
    uint64_t nused = storage_->usedSize(store) ; 
    5d86:	mov	r8, r0
    5d88:	mov	r9, r1
    5d8a:	strd	r6, r7, [sp, #24]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    5d8e:	cmp	r3, #0
    5d90:	beq.n	5df4 <MTPD::GetStorageInfo(unsigned long)+0xfc>
      {
        write_length_ += len;
    5d92:	movw	r2, #9256	; 0x2428
    5d96:	subs	r6, r6, r0
    5d98:	ldr	r3, [r4, r2]
    5d9a:	sbc.w	r7, r7, r1
    5d9e:	adds	r3, #8
    5da0:	strd	r6, r7, [sp, #16]
    5da4:	str	r3, [r4, r2]
    5da6:	movw	r2, #9256	; 0x2428
    5daa:	mov.w	r1, #4294967295
    5dae:	ldr	r3, [r4, r2]
    5db0:	str	r1, [sp, #12]
    5db2:	adds	r3, #8
    5db4:	str	r3, [r4, r2]
    5db6:	movw	r2, #9256	; 0x2428
    5dba:	ldr	r3, [r4, r2]
    5dbc:	adds	r3, #4
    5dbe:	str	r3, [r4, r2]

    write64(ntotal);  // max capacity
    write64((ntotal-nused));  // free space (100M)
    //
    write32(0xFFFFFFFFUL);  // free space (objects)
    const char *name = storage_->get_FSName(store);
    5dc0:	ldr	r0, [r4, #0]
    5dc2:	ldr	r2, [pc, #156]	; (5e60 <MTPD::GetStorageInfo(unsigned long)+0x168>)
    5dc4:	ldr	r3, [r0, #0]
    5dc6:	ldr	r3, [r3, #8]
    5dc8:	cmp	r3, r2
    5dca:	bne.n	5e58 <MTPD::GetStorageInfo(unsigned long)+0x160>
    const char *sd_getFSName(uint32_t store) { return sd_name[store];}
    5dcc:	add.w	r0, r0, r5, lsl #2
    5dd0:	ldr	r1, [r0, #8]
    writestring(name);  // storage descriptor
    5dd2:	mov	r0, r4
    5dd4:	bl	5804 <MTPD::writestring(char const*)>
    writestring("");  // volume identifier
    5dd8:	mov	r0, r4
    5dda:	ldr	r1, [pc, #136]	; (5e64 <MTPD::GetStorageInfo(unsigned long)+0x16c>)
    5ddc:	bl	5804 <MTPD::writestring(char const*)>

    //printf("%d %d ",storage,store); Serial.println(name); Serial.flush();
  }
    5de0:	add	sp, #32
    5de2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5de6:	movs	r2, #2
    5de8:	add.w	r1, sp, #6
    5dec:	mov	r0, r4
    5dee:	bl	5784 <MTPD::write(char const*, int) [clone .part.2]>
    5df2:	b.n	5d2c <MTPD::GetStorageInfo(unsigned long)+0x34>
    5df4:	movs	r2, #8
    5df6:	add	r1, sp, #24
    5df8:	mov	r0, r4
    5dfa:	bl	5784 <MTPD::write(char const*, int) [clone .part.2]>
    5dfe:	subs.w	r6, r6, r8
    5e02:	ldrb.w	r3, [r4, sl]
    5e06:	sbc.w	r7, r7, r9
    5e0a:	strd	r6, r7, [sp, #16]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    5e0e:	cmp	r3, #0
    5e10:	bne.n	5da6 <MTPD::GetStorageInfo(unsigned long)+0xae>
    5e12:	movs	r2, #8
    5e14:	add	r1, sp, #16
    5e16:	mov	r0, r4
    5e18:	bl	5784 <MTPD::write(char const*, int) [clone .part.2]>
    5e1c:	mov.w	r2, #4294967295
    5e20:	ldrb.w	r3, [r4, sl]
    5e24:	str	r2, [sp, #12]
    5e26:	cmp	r3, #0
    5e28:	bne.n	5db6 <MTPD::GetStorageInfo(unsigned long)+0xbe>
    5e2a:	movs	r2, #4
    5e2c:	add	r1, sp, #12
    5e2e:	mov	r0, r4
    5e30:	bl	5784 <MTPD::write(char const*, int) [clone .part.2]>
    5e34:	b.n	5dc0 <MTPD::GetStorageInfo(unsigned long)+0xc8>
    5e36:	movs	r2, #2
    5e38:	add.w	r1, sp, #10
    5e3c:	mov	r0, r4
    5e3e:	bl	5784 <MTPD::write(char const*, int) [clone .part.2]>
    5e42:	ldrb	r3, [r4, r7]
    5e44:	strh.w	r6, [sp, #8]
    5e48:	cmp	r3, #0
    5e4a:	bne.n	5d5c <MTPD::GetStorageInfo(unsigned long)+0x64>
    5e4c:	movs	r2, #2
    5e4e:	add	r1, sp, #8
    5e50:	mov	r0, r4
    5e52:	bl	5784 <MTPD::write(char const*, int) [clone .part.2]>
    5e56:	b.n	5d66 <MTPD::GetStorageInfo(unsigned long)+0x6e>

    write64(ntotal);  // max capacity
    write64((ntotal-nused));  // free space (100M)
    //
    write32(0xFFFFFFFFUL);  // free space (objects)
    const char *name = storage_->get_FSName(store);
    5e58:	mov	r1, r5
    5e5a:	blx	r3
    5e5c:	mov	r1, r0
    5e5e:	b.n	5dd2 <MTPD::GetStorageInfo(unsigned long)+0xda>
    5e60:	.word	0x00001a59
    5e64:	.word	0x20000228

00005e68 <MTPD::GetNumObjects(unsigned long, unsigned long)>:

    //printf("%d %d ",storage,store); Serial.println(name); Serial.flush();
  }

  uint32_t MTPD::GetNumObjects(uint32_t storage, uint32_t parent) 
  { uint32_t store = Storage2Store(storage);
    5e68:	push	{r4, r5, r6, lr}
    5e6a:	mov	r6, r0
    storage_->StartGetObjectHandles(store, parent);
    5e6c:	ldr	r0, [r0, #0]

    //printf("%d %d ",storage,store); Serial.println(name); Serial.flush();
  }

  uint32_t MTPD::GetNumObjects(uint32_t storage, uint32_t parent) 
  { uint32_t store = Storage2Store(storage);
    5e6e:	subs	r5, r1, #1
    storage_->StartGetObjectHandles(store, parent);
    int num = 0;
    5e70:	movs	r4, #0
    //printf("%d %d ",storage,store); Serial.println(name); Serial.flush();
  }

  uint32_t MTPD::GetNumObjects(uint32_t storage, uint32_t parent) 
  { uint32_t store = Storage2Store(storage);
    storage_->StartGetObjectHandles(store, parent);
    5e72:	ldr	r3, [r0, #0]
    5e74:	mov	r1, r5
    5e76:	ldr	r3, [r3, #28]
    5e78:	blx	r3
    5e7a:	b.n	5e7e <MTPD::GetNumObjects(unsigned long, unsigned long)+0x16>
    int num = 0;
    while (storage_->GetNextObjectHandle(store)) num++;
    5e7c:	adds	r4, #1
    5e7e:	ldr	r0, [r6, #0]
    5e80:	mov	r1, r5
    5e82:	ldr	r3, [r0, #0]
    5e84:	ldr	r3, [r3, #32]
    5e86:	blx	r3
    5e88:	cmp	r0, #0
    5e8a:	bne.n	5e7c <MTPD::GetNumObjects(unsigned long, unsigned long)+0x14>
    return num;
  }
    5e8c:	mov	r0, r4
    5e8e:	pop	{r4, r5, r6, pc}

00005e90 <MTPD::GetObjectHandles(unsigned long, unsigned long)>:

  void MTPD::GetObjectHandles(uint32_t storage, uint32_t parent) 
  { uint32_t store = Storage2Store(storage);
    5e90:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if (write_get_length_) {
    5e94:	movw	r5, #9252	; 0x2424
    while (storage_->GetNextObjectHandle(store)) num++;
    return num;
  }

  void MTPD::GetObjectHandles(uint32_t storage, uint32_t parent) 
  { uint32_t store = Storage2Store(storage);
    5e98:	sub	sp, #8
    5e9a:	mov	r4, r0
    if (write_get_length_) {
    5e9c:	ldrb	r3, [r0, r5]
    5e9e:	cbnz	r3, 5efa <MTPD::GetObjectHandles(unsigned long, unsigned long)+0x6a>
    5ea0:	mov	r6, r1
    5ea2:	mov	r8, r2
      write_length_ = GetNumObjects(storage, parent);
      write_length_++;
      write_length_ *= 4;
    }
    else{
      write32(GetNumObjects(storage, parent));
    5ea4:	bl	5e68 <MTPD::GetNumObjects(unsigned long, unsigned long)>
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    5ea8:	ldrb	r3, [r4, r5]
    5eaa:	str	r0, [sp, #0]
    5eac:	cbz	r3, 5f0e <MTPD::GetObjectHandles(unsigned long, unsigned long)+0x7e>
      {
        write_length_ += len;
    5eae:	movw	r2, #9256	; 0x2428
    5eb2:	ldr	r3, [r4, r2]
    5eb4:	adds	r3, #4
    5eb6:	str	r3, [r4, r2]
      write_length_ *= 4;
    }
    else{
      write32(GetNumObjects(storage, parent));
      int handle;
      storage_->StartGetObjectHandles(store, parent);
    5eb8:	ldr	r0, [r4, #0]
    while (storage_->GetNextObjectHandle(store)) num++;
    return num;
  }

  void MTPD::GetObjectHandles(uint32_t storage, uint32_t parent) 
  { uint32_t store = Storage2Store(storage);
    5eba:	subs	r6, #1
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    5ebc:	movw	r7, #9252	; 0x2424
      {
        write_length_ += len;
    5ec0:	movw	r5, #9256	; 0x2428
      write_length_ *= 4;
    }
    else{
      write32(GetNumObjects(storage, parent));
      int handle;
      storage_->StartGetObjectHandles(store, parent);
    5ec4:	ldr	r3, [r0, #0]
    5ec6:	mov	r2, r8
    5ec8:	mov	r1, r6
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    5eca:	add	r7, r4
      write_length_ *= 4;
    }
    else{
      write32(GetNumObjects(storage, parent));
      int handle;
      storage_->StartGetObjectHandles(store, parent);
    5ecc:	ldr	r3, [r3, #28]
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
      {
        write_length_ += len;
    5ece:	add	r5, r4
      write_length_ *= 4;
    }
    else{
      write32(GetNumObjects(storage, parent));
      int handle;
      storage_->StartGetObjectHandles(store, parent);
    5ed0:	blx	r3
      while ((handle = storage_->GetNextObjectHandle(store))) write32(handle);
    5ed2:	ldr	r0, [r4, #0]
    5ed4:	mov	r1, r6
    5ed6:	ldr	r3, [r0, #0]
    5ed8:	ldr	r3, [r3, #32]
    5eda:	blx	r3
    5edc:	cbz	r0, 5f08 <MTPD::GetObjectHandles(unsigned long, unsigned long)+0x78>
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    5ede:	ldrb	r3, [r7, #0]
    5ee0:	str	r0, [sp, #4]
    5ee2:	cbz	r3, 5eec <MTPD::GetObjectHandles(unsigned long, unsigned long)+0x5c>
      {
        write_length_ += len;
    5ee4:	ldr	r3, [r5, #0]
    5ee6:	adds	r3, #4
    5ee8:	str	r3, [r5, #0]
    5eea:	b.n	5ed2 <MTPD::GetObjectHandles(unsigned long, unsigned long)+0x42>
    5eec:	movs	r2, #4
    5eee:	mov	r0, r4
    5ef0:	add.w	r1, sp, r2
    5ef4:	bl	5784 <MTPD::write(char const*, int) [clone .part.2]>
    5ef8:	b.n	5ed2 <MTPD::GetObjectHandles(unsigned long, unsigned long)+0x42>
  }

  void MTPD::GetObjectHandles(uint32_t storage, uint32_t parent) 
  { uint32_t store = Storage2Store(storage);
    if (write_get_length_) {
      write_length_ = GetNumObjects(storage, parent);
    5efa:	bl	5e68 <MTPD::GetNumObjects(unsigned long, unsigned long)>
      write_length_++;
      write_length_ *= 4;
    5efe:	adds	r0, #1
    5f00:	movw	r3, #9256	; 0x2428
    5f04:	lsls	r0, r0, #2
    5f06:	str	r0, [r4, r3]
      write32(GetNumObjects(storage, parent));
      int handle;
      storage_->StartGetObjectHandles(store, parent);
      while ((handle = storage_->GetNextObjectHandle(store))) write32(handle);
    }
  }
    5f08:	add	sp, #8
    5f0a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5f0e:	movs	r2, #4
    5f10:	mov	r1, sp
    5f12:	mov	r0, r4
    5f14:	bl	5784 <MTPD::write(char const*, int) [clone .part.2]>
    5f18:	b.n	5eb8 <MTPD::GetObjectHandles(unsigned long, unsigned long)+0x28>
    5f1a:	nop

00005f1c <MTPD::GetObjectInfo(unsigned long)>:
  
  void MTPD::GetObjectInfo(uint32_t handle) 
  {
    5f1c:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5f20:	mov	r4, r0
    5f22:	sub	sp, #328	; 0x148
    char filename[MAX_FILENAME_LEN];
    uint32_t size, parent;
    uint16_t store;
    storage_->GetObjectInfo(handle, filename, &size, &parent, &store);
    5f24:	ldr	r0, [r0, #0]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    5f26:	movw	r6, #9252	; 0x2424
  void MTPD::GetObjectInfo(uint32_t handle) 
  {
    char filename[MAX_FILENAME_LEN];
    uint32_t size, parent;
    uint16_t store;
    storage_->GetObjectInfo(handle, filename, &size, &parent, &store);
    5f2a:	add.w	r5, sp, #10
    5f2e:	add	r7, sp, #24
    5f30:	ldr.w	lr, [r0]
    5f34:	add	r3, sp, #20
    5f36:	str	r5, [sp, #4]
    5f38:	add	r2, sp, #72	; 0x48
    5f3a:	str	r7, [sp, #0]
    5f3c:	ldr.w	r8, [lr, #36]	; 0x24
    5f40:	blx	r8
    5f42:	ldrh	r3, [r5, #0]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    5f44:	ldrb	r2, [r4, r6]
    5f46:	adds	r3, #1
    5f48:	str	r3, [sp, #28]
    5f4a:	cmp	r2, #0
    5f4c:	beq.w	6060 <MTPD::GetObjectInfo(unsigned long)+0x144>
      {
        write_length_ += len;
    5f50:	movw	r2, #9256	; 0x2428
    uint16_t store;
    storage_->GetObjectInfo(handle, filename, &size, &parent, &store);

    uint32_t storage = Store2Storage(store);
    write32(storage); // storage
    write16(size == 0xFFFFFFFFUL ? 0x3001 : 0x0000); // format
    5f54:	ldr	r1, [sp, #20]
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
      {
        write_length_ += len;
    5f56:	ldr	r3, [r4, r2]
    uint16_t store;
    storage_->GetObjectInfo(handle, filename, &size, &parent, &store);

    uint32_t storage = Store2Storage(store);
    write32(storage); // storage
    write16(size == 0xFFFFFFFFUL ? 0x3001 : 0x0000); // format
    5f58:	adds	r1, #1
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
      {
        write_length_ += len;
    5f5a:	add.w	r3, r3, #4
    5f5e:	str	r3, [r4, r2]
    uint16_t store;
    storage_->GetObjectInfo(handle, filename, &size, &parent, &store);

    uint32_t storage = Store2Storage(store);
    write32(storage); // storage
    write16(size == 0xFFFFFFFFUL ? 0x3001 : 0x0000); // format
    5f60:	beq.w	61b0 <MTPD::GetObjectInfo(unsigned long)+0x294>
    5f64:	movs	r3, #0
    5f66:	strh.w	r3, [sp, #16]
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
      {
        write_length_ += len;
    5f6a:	movw	r2, #9256	; 0x2428
    5f6e:	movs	r1, #0
    5f70:	ldr	r3, [r4, r2]
    5f72:	strh.w	r1, [sp, #14]
    5f76:	adds	r3, #2
    5f78:	str	r3, [r4, r2]
    5f7a:	movw	r2, #9256	; 0x2428
    5f7e:	ldr	r1, [sp, #20]
    5f80:	ldr	r3, [r4, r2]
    5f82:	str	r1, [sp, #60]	; 0x3c
    5f84:	adds	r3, #2
    5f86:	str	r3, [r4, r2]
    5f88:	movw	r2, #9256	; 0x2428
    5f8c:	movs	r1, #0
    5f8e:	ldr	r3, [r4, r2]
    5f90:	strh.w	r1, [sp, #12]
    5f94:	adds	r3, #4
    5f96:	str	r3, [r4, r2]
    5f98:	movw	r2, #9256	; 0x2428
    5f9c:	movs	r1, #0
    5f9e:	ldr	r3, [r4, r2]
    5fa0:	str	r1, [sp, #56]	; 0x38
    5fa2:	adds	r3, #2
    5fa4:	str	r3, [r4, r2]
    5fa6:	movw	r2, #9256	; 0x2428
    5faa:	movs	r1, #0
    5fac:	ldr	r3, [r4, r2]
    5fae:	str	r1, [sp, #52]	; 0x34
    5fb0:	adds	r3, #4
    5fb2:	str	r3, [r4, r2]
    5fb4:	movw	r2, #9256	; 0x2428
    5fb8:	movs	r1, #0
    5fba:	ldr	r3, [r4, r2]
    5fbc:	str	r1, [sp, #48]	; 0x30
    5fbe:	adds	r3, #4
    5fc0:	str	r3, [r4, r2]
    5fc2:	movw	r2, #9256	; 0x2428
    5fc6:	movs	r1, #0
    5fc8:	ldr	r3, [r4, r2]
    5fca:	str	r1, [sp, #44]	; 0x2c
    5fcc:	adds	r3, #4
    5fce:	str	r3, [r4, r2]
    5fd0:	movw	r2, #9256	; 0x2428
    5fd4:	movs	r1, #0
    5fd6:	ldr	r3, [r4, r2]
    5fd8:	str	r1, [sp, #40]	; 0x28
    5fda:	adds	r3, #4
    5fdc:	str	r3, [r4, r2]
    5fde:	movw	r2, #9256	; 0x2428
    5fe2:	movs	r1, #0
    5fe4:	ldr	r3, [r4, r2]
    5fe6:	str	r1, [sp, #36]	; 0x24
    5fe8:	adds	r3, #4
    5fea:	str	r3, [r4, r2]
    5fec:	movw	r2, #9256	; 0x2428
    5ff0:	ldr	r1, [r7, #0]
    5ff2:	ldr	r3, [r4, r2]
    5ff4:	str	r1, [sp, #32]
    5ff6:	adds	r3, #4
    5ff8:	str	r3, [r4, r2]
    5ffa:	ldr	r2, [sp, #20]
    5ffc:	movw	r1, #9256	; 0x2428
    6000:	sub.w	r2, r2, #4294967295
    6004:	ldr	r3, [r4, r1]
    6006:	clz	r2, r2
    600a:	adds	r3, #4
    600c:	lsrs	r2, r2, #5
    600e:	str	r3, [r4, r1]
    6010:	strh.w	r2, [sp, #18]
    6014:	movw	r2, #9256	; 0x2428
    6018:	movs	r1, #0
    601a:	ldr	r3, [r4, r2]
    601c:	str	r1, [sp, #68]	; 0x44
    601e:	adds	r3, #2
    6020:	str	r3, [r4, r2]
    6022:	movw	r2, #9256	; 0x2428
    6026:	movs	r1, #0
    6028:	ldr	r3, [r4, r2]
    602a:	str	r1, [sp, #64]	; 0x40
    602c:	adds	r3, #4
    602e:	str	r3, [r4, r2]
    6030:	movw	r2, #9256	; 0x2428
    6034:	ldr	r3, [r4, r2]
    6036:	adds	r3, #4
    6038:	str	r3, [r4, r2]
    write32(0); // bit depth
    write32(parent); // parent
    write16(size == 0xFFFFFFFFUL ? 1 : 0); // association type
    write32(0); // association description
    write32(0);  // sequence number
    writestring(filename);
    603a:	add	r1, sp, #72	; 0x48
    603c:	mov	r0, r4
    603e:	bl	5804 <MTPD::writestring(char const*)>
    writestring("");  // date created
    6042:	mov	r0, r4
    6044:	ldr	r1, [pc, #372]	; (61bc <MTPD::GetObjectInfo(unsigned long)+0x2a0>)
    6046:	bl	5804 <MTPD::writestring(char const*)>
    writestring("");  // date modified
    604a:	mov	r0, r4
    604c:	ldr	r1, [pc, #364]	; (61bc <MTPD::GetObjectInfo(unsigned long)+0x2a0>)
    604e:	bl	5804 <MTPD::writestring(char const*)>
    writestring("");  // keywords
    6052:	mov	r0, r4
    6054:	ldr	r1, [pc, #356]	; (61bc <MTPD::GetObjectInfo(unsigned long)+0x2a0>)
    6056:	bl	5804 <MTPD::writestring(char const*)>
  }
    605a:	add	sp, #328	; 0x148
    605c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6060:	movs	r2, #4
    6062:	add	r1, sp, #28
    6064:	mov	r0, r4
    6066:	bl	5784 <MTPD::write(char const*, int) [clone .part.2]>
    uint16_t store;
    storage_->GetObjectInfo(handle, filename, &size, &parent, &store);

    uint32_t storage = Store2Storage(store);
    write32(storage); // storage
    write16(size == 0xFFFFFFFFUL ? 0x3001 : 0x0000); // format
    606a:	ldr	r2, [sp, #20]
    606c:	movw	r3, #12289	; 0x3001
    6070:	ldrb	r5, [r4, r6]
    6072:	adds	r2, #1
    6074:	it	ne
    6076:	movne	r3, #0
    6078:	strh.w	r3, [sp, #16]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    607c:	cmp	r5, #0
    607e:	bne.w	5f6a <MTPD::GetObjectInfo(unsigned long)+0x4e>
    6082:	add	r1, sp, #16
    6084:	movs	r2, #2
    6086:	mov	r0, r4
    6088:	bl	5784 <MTPD::write(char const*, int) [clone .part.2]>
    608c:	ldrb	r3, [r4, r6]
    608e:	strh.w	r5, [sp, #14]
    6092:	cmp	r3, #0
    6094:	bne.w	5f7a <MTPD::GetObjectInfo(unsigned long)+0x5e>
    6098:	movs	r2, #2
    609a:	add.w	r1, sp, #14
    609e:	mov	r0, r4
    60a0:	bl	5784 <MTPD::write(char const*, int) [clone .part.2]>
    60a4:	ldr	r2, [sp, #20]
    60a6:	ldrb	r3, [r4, r6]
    60a8:	str	r2, [sp, #60]	; 0x3c
    60aa:	cmp	r3, #0
    60ac:	bne.w	5f88 <MTPD::GetObjectInfo(unsigned long)+0x6c>
    60b0:	add	r1, sp, #60	; 0x3c
    60b2:	movs	r2, #4
    60b4:	mov	r0, r4
    60b6:	bl	5784 <MTPD::write(char const*, int) [clone .part.2]>
    60ba:	ldrb	r3, [r4, r6]
    60bc:	strh.w	r5, [sp, #12]
    60c0:	cmp	r3, #0
    60c2:	bne.w	5f98 <MTPD::GetObjectInfo(unsigned long)+0x7c>
    60c6:	add	r1, sp, #12
    60c8:	movs	r2, #2
    60ca:	mov	r0, r4
    60cc:	bl	5784 <MTPD::write(char const*, int) [clone .part.2]>
    60d0:	ldrb	r3, [r4, r6]
    60d2:	str	r5, [sp, #56]	; 0x38
    60d4:	cmp	r3, #0
    60d6:	bne.w	5fa6 <MTPD::GetObjectInfo(unsigned long)+0x8a>
    60da:	add	r1, sp, #56	; 0x38
    60dc:	movs	r2, #4
    60de:	mov	r0, r4
    60e0:	bl	5784 <MTPD::write(char const*, int) [clone .part.2]>
    60e4:	ldrb	r3, [r4, r6]
    60e6:	str	r5, [sp, #52]	; 0x34
    60e8:	cmp	r3, #0
    60ea:	bne.w	5fb4 <MTPD::GetObjectInfo(unsigned long)+0x98>
    60ee:	add	r1, sp, #52	; 0x34
    60f0:	movs	r2, #4
    60f2:	mov	r0, r4
    60f4:	bl	5784 <MTPD::write(char const*, int) [clone .part.2]>
    60f8:	ldrb	r3, [r4, r6]
    60fa:	str	r5, [sp, #48]	; 0x30
    60fc:	cmp	r3, #0
    60fe:	bne.w	5fc2 <MTPD::GetObjectInfo(unsigned long)+0xa6>
    6102:	add	r1, sp, #48	; 0x30
    6104:	movs	r2, #4
    6106:	mov	r0, r4
    6108:	bl	5784 <MTPD::write(char const*, int) [clone .part.2]>
    610c:	ldrb	r3, [r4, r6]
    610e:	str	r5, [sp, #44]	; 0x2c
    6110:	cmp	r3, #0
    6112:	bne.w	5fd0 <MTPD::GetObjectInfo(unsigned long)+0xb4>
    6116:	add	r1, sp, #44	; 0x2c
    6118:	movs	r2, #4
    611a:	mov	r0, r4
    611c:	bl	5784 <MTPD::write(char const*, int) [clone .part.2]>
    6120:	ldrb	r3, [r4, r6]
    6122:	str	r5, [sp, #40]	; 0x28
    6124:	cmp	r3, #0
    6126:	bne.w	5fde <MTPD::GetObjectInfo(unsigned long)+0xc2>
    612a:	add	r1, sp, #40	; 0x28
    612c:	movs	r2, #4
    612e:	mov	r0, r4
    6130:	bl	5784 <MTPD::write(char const*, int) [clone .part.2]>
    6134:	ldrb	r3, [r4, r6]
    6136:	str	r5, [sp, #36]	; 0x24
    6138:	cmp	r3, #0
    613a:	bne.w	5fec <MTPD::GetObjectInfo(unsigned long)+0xd0>
    613e:	movw	r5, #9252	; 0x2424
    6142:	movs	r2, #4
    6144:	add	r1, sp, #36	; 0x24
    6146:	mov	r0, r4
    6148:	bl	5784 <MTPD::write(char const*, int) [clone .part.2]>
    614c:	ldr	r2, [r7, #0]
    614e:	ldrb	r3, [r4, r5]
    6150:	str	r2, [sp, #32]
    6152:	cmp	r3, #0
    6154:	bne.w	5ffa <MTPD::GetObjectInfo(unsigned long)+0xde>
    6158:	add	r1, sp, #32
    615a:	movs	r2, #4
    615c:	mov	r0, r4
    615e:	bl	5784 <MTPD::write(char const*, int) [clone .part.2]>
    6162:	ldr	r3, [sp, #20]
    6164:	ldrb	r7, [r4, r5]
    6166:	sub.w	r3, r3, #4294967295
    616a:	clz	r3, r3
    616e:	lsrs	r3, r3, #5
    6170:	strh.w	r3, [sp, #18]
    6174:	cmp	r7, #0
    6176:	bne.w	6014 <MTPD::GetObjectInfo(unsigned long)+0xf8>
    617a:	add.w	r1, sp, #18
    617e:	movs	r2, #2
    6180:	mov	r0, r4
    6182:	bl	5784 <MTPD::write(char const*, int) [clone .part.2]>
    6186:	ldrb	r6, [r4, r5]
    6188:	str	r7, [sp, #68]	; 0x44
    618a:	cmp	r6, #0
    618c:	bne.w	6022 <MTPD::GetObjectInfo(unsigned long)+0x106>
    6190:	add	r1, sp, #68	; 0x44
    6192:	movs	r2, #4
    6194:	mov	r0, r4
    6196:	bl	5784 <MTPD::write(char const*, int) [clone .part.2]>
    619a:	ldrb	r3, [r4, r5]
    619c:	str	r6, [sp, #64]	; 0x40
    619e:	cmp	r3, #0
    61a0:	bne.w	6030 <MTPD::GetObjectInfo(unsigned long)+0x114>
    61a4:	add	r1, sp, #64	; 0x40
    61a6:	movs	r2, #4
    61a8:	mov	r0, r4
    61aa:	bl	5784 <MTPD::write(char const*, int) [clone .part.2]>
    61ae:	b.n	603a <MTPD::GetObjectInfo(unsigned long)+0x11e>
    61b0:	movw	r3, #12289	; 0x3001
    61b4:	strh.w	r3, [sp, #16]
    61b8:	b.n	5f6a <MTPD::GetObjectInfo(unsigned long)+0x4e>
    61ba:	nop
    61bc:	.word	0x20000228

000061c0 <MTPD::getObjectPropsSupported(unsigned long)>:
        write8(0);       // no form
    }
  }

    void MTPD::getObjectPropsSupported(uint32_t p1)
    {
    61c0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    61c4:	movw	r2, #9252	; 0x2424
    }
  }

    void MTPD::getObjectPropsSupported(uint32_t p1)
    {
      write32(propertyListNum);
    61c8:	ldr.w	r8, [pc, #128]	; 624c <MTPD::getObjectPropsSupported(unsigned long)+0x8c>
        write8(0);       // no form
    }
  }

    void MTPD::getObjectPropsSupported(uint32_t p1)
    {
    61cc:	sub	sp, #12
    61ce:	mov	r9, r0
      write32(propertyListNum);
    61d0:	ldr.w	r3, [r8]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    61d4:	ldrb	r2, [r0, r2]
    61d6:	str	r3, [sp, #4]
    61d8:	cbz	r2, 6236 <MTPD::getObjectPropsSupported(unsigned long)+0x76>
      {
        write_length_ += len;
    61da:	movw	r1, #9256	; 0x2428
    61de:	ldr	r2, [r0, r1]
    61e0:	adds	r2, #4
    61e2:	str	r2, [r0, r1]
  }

    void MTPD::getObjectPropsSupported(uint32_t p1)
    {
      write32(propertyListNum);
      for(uint32_t ii=0; ii<propertyListNum;ii++) write16(propertyList[ii]);
    61e4:	cbz	r3, 6230 <MTPD::getObjectPropsSupported(unsigned long)+0x70>
    61e6:	movw	r7, #9252	; 0x2424
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
      {
        write_length_ += len;
    61ea:	movw	r6, #9256	; 0x2428
    61ee:	ldr	r5, [pc, #88]	; (6248 <MTPD::getObjectPropsSupported(unsigned long)+0x88>)
  }

    void MTPD::getObjectPropsSupported(uint32_t p1)
    {
      write32(propertyListNum);
      for(uint32_t ii=0; ii<propertyListNum;ii++) write16(propertyList[ii]);
    61f0:	movw	r3, #56321	; 0xdc01
    61f4:	add	r7, r9
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
      {
        write_length_ += len;
    61f6:	add	r6, r9
  }

    void MTPD::getObjectPropsSupported(uint32_t p1)
    {
      write32(propertyListNum);
      for(uint32_t ii=0; ii<propertyListNum;ii++) write16(propertyList[ii]);
    61f8:	movs	r4, #0
    61fa:	b.n	6210 <MTPD::getObjectPropsSupported(unsigned long)+0x50>
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
      {
        write_length_ += len;
    61fc:	ldr	r3, [r6, #0]
  }

    void MTPD::getObjectPropsSupported(uint32_t p1)
    {
      write32(propertyListNum);
      for(uint32_t ii=0; ii<propertyListNum;ii++) write16(propertyList[ii]);
    61fe:	adds	r4, #1
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
      {
        write_length_ += len;
    6200:	adds	r3, #2
    6202:	str	r3, [r6, #0]
  }

    void MTPD::getObjectPropsSupported(uint32_t p1)
    {
      write32(propertyListNum);
      for(uint32_t ii=0; ii<propertyListNum;ii++) write16(propertyList[ii]);
    6204:	ldr.w	r3, [r8]
    6208:	cmp	r3, r4
    620a:	bls.n	6230 <MTPD::getObjectPropsSupported(unsigned long)+0x70>
    620c:	ldrh.w	r3, [r5, #2]!
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    6210:	ldrb	r2, [r7, #0]
    6212:	strh.w	r3, [sp, #2]
    6216:	cmp	r2, #0
    6218:	bne.n	61fc <MTPD::getObjectPropsSupported(unsigned long)+0x3c>
    621a:	movs	r2, #2
    621c:	mov	r0, r9
  }

    void MTPD::getObjectPropsSupported(uint32_t p1)
    {
      write32(propertyListNum);
      for(uint32_t ii=0; ii<propertyListNum;ii++) write16(propertyList[ii]);
    621e:	adds	r4, #1
    6220:	add.w	r1, sp, r2
    6224:	bl	5784 <MTPD::write(char const*, int) [clone .part.2]>
    6228:	ldr.w	r3, [r8]
    622c:	cmp	r3, r4
    622e:	bhi.n	620c <MTPD::getObjectPropsSupported(unsigned long)+0x4c>
    }
    6230:	add	sp, #12
    6232:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    6236:	movs	r2, #4
    6238:	add.w	r1, sp, r2
    623c:	bl	5784 <MTPD::write(char const*, int) [clone .part.2]>
    6240:	ldr.w	r3, [r8]
    6244:	b.n	61e4 <MTPD::getObjectPropsSupported(unsigned long)+0x24>
    6246:	nop
    6248:	.word	0x200003c4
    624c:	.word	0x20000b5c

00006250 <MTPD::getObjectPropDesc(unsigned long, unsigned long)>:

    void MTPD::getObjectPropDesc(uint32_t p1, uint32_t p2)
    {
      switch(p1)
    6250:	mvn.w	r3, #56320	; 0xdc00
    6254:	add	r3, r1
      write32(propertyListNum);
      for(uint32_t ii=0; ii<propertyListNum;ii++) write16(propertyList[ii]);
    }

    void MTPD::getObjectPropDesc(uint32_t p1, uint32_t p2)
    {
    6256:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    625a:	mov	r4, r0
    625c:	sub	sp, #148	; 0x94
      switch(p1)
    625e:	cmp	r3, #67	; 0x43
    6260:	bhi.w	6380 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x130>
    6264:	tbh	[pc, r3, lsl #1]
    6268:	.word	0x00d900ba
    626c:	.word	0x014200f8
    6270:	.word	0x008c008c
    6274:	.word	0x01af0161
    6278:	.word	0x008c01f9
    627c:	.word	0x008c0243
    6280:	.word	0x008c008c
    6284:	.word	0x008c008c
    6288:	.word	0x008c008c
    628c:	.word	0x008c008c
    6290:	.word	0x008c008c
    6294:	.word	0x008c008c
    6298:	.word	0x008c008c
    629c:	.word	0x008c008c
    62a0:	.word	0x008c008c
    62a4:	.word	0x008c008c
    62a8:	.word	0x008c008c
    62ac:	.word	0x008c008c
    62b0:	.word	0x008c008c
    62b4:	.word	0x008c008c
    62b8:	.word	0x008c008c
    62bc:	.word	0x008c008c
    62c0:	.word	0x008c008c
    62c4:	.word	0x008c008c
    62c8:	.word	0x008c008c
    62cc:	.word	0x008c008c
    62d0:	.word	0x008c008c
    62d4:	.word	0x008c008c
    62d8:	.word	0x008c008c
    62dc:	.word	0x008c008c
    62e0:	.word	0x008c008c
    62e4:	.word	0x008c008c
    62e8:	.word	0x008c028b
    62ec:	.word	0x008f008c
    62f0:	movs	r2, #2
    62f2:	add.w	r1, sp, #66	; 0x42
    62f6:	bl	5784 <MTPD::write(char const*, int) [clone .part.2]>
    62fa:	movs	r3, #10
    62fc:	ldrb	r6, [r4, r5]
    62fe:	strh.w	r3, [sp, #64]	; 0x40
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    6302:	cmp	r6, #0
    6304:	bne.w	679c <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x54c>
    6308:	movs	r2, #2
    630a:	add	r1, sp, #64	; 0x40
    630c:	mov	r0, r4
    630e:	bl	5784 <MTPD::write(char const*, int) [clone .part.2]>
    6312:	ldrb	r3, [r4, r5]
    6314:	strb.w	r6, [sp, #24]
    6318:	cmp	r3, #0
    631a:	bne.w	67a6 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x556>
    631e:	movs	r2, #1
    6320:	add	r1, sp, #24
    6322:	mov	r0, r4
    6324:	mov.w	r8, #0
    6328:	bl	5784 <MTPD::write(char const*, int) [clone .part.2]>
    632c:	mov.w	r9, #0
    6330:	ldrb	r3, [r4, r5]
    6332:	strd	r8, r9, [sp, #136]	; 0x88
    6336:	cmp	r3, #0
    6338:	bne.w	67b0 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x560>
    633c:	movs	r2, #8
    633e:	add	r1, sp, #136	; 0x88
    6340:	mov	r0, r4
    6342:	bl	5784 <MTPD::write(char const*, int) [clone .part.2]>
    6346:	ldrb	r7, [r4, r5]
    6348:	strd	r8, r9, [sp, #128]	; 0x80
    634c:	cmp	r7, #0
    634e:	bne.w	651e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x2ce>
    6352:	movs	r2, #8
    6354:	add	r1, sp, #128	; 0x80
    6356:	mov	r0, r4
    6358:	bl	5784 <MTPD::write(char const*, int) [clone .part.2]>
    635c:	ldrb	r6, [r4, r5]
    635e:	str	r7, [sp, #112]	; 0x70
    6360:	cbnz	r6, 63c2 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x172>
    6362:	movs	r2, #4
    6364:	add	r1, sp, #112	; 0x70
    6366:	mov	r0, r4
    6368:	bl	5784 <MTPD::write(char const*, int) [clone .part.2]>
    636c:	ldrb	r3, [r4, r5]
    636e:	strb.w	r6, [sp, #23]
    6372:	cbnz	r3, 63cc <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x17c>
    6374:	mov	r0, r4
    6376:	movs	r2, #1
    6378:	add.w	r1, sp, #23
    637c:	bl	5784 <MTPD::write(char const*, int) [clone .part.2]>
          write8(0);
          break;
        default:
          break;
      }
    }
    6380:	add	sp, #148	; 0x94
    6382:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    6386:	movw	r5, #9252	; 0x2424
    638a:	movw	r2, #56388	; 0xdc44
    638e:	ldrb	r3, [r0, r5]
    6390:	strh.w	r2, [sp, #70]	; 0x46
    6394:	cmp	r3, #0
    6396:	beq.w	6940 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6f0>
      {
        write_length_ += len;
    639a:	movw	r2, #9256	; 0x2428
    639e:	ldr	r3, [r4, r2]
    63a0:	adds	r3, #2
    63a2:	str	r3, [r4, r2]
    63a4:	movw	r2, #9256	; 0x2428
    63a8:	ldr	r3, [r4, r2]
    63aa:	adds	r3, #2
    63ac:	str	r3, [r4, r2]
    63ae:	movw	r2, #9256	; 0x2428
    63b2:	ldr	r3, [r4, r2]
    63b4:	adds	r3, #1
    63b6:	str	r3, [r4, r2]
    63b8:	movw	r2, #9256	; 0x2428
    63bc:	ldr	r3, [r4, r2]
    63be:	adds	r3, #1
    63c0:	str	r3, [r4, r2]
    63c2:	movw	r2, #9256	; 0x2428
    63c6:	ldr	r3, [r4, r2]
    63c8:	adds	r3, #4
    63ca:	str	r3, [r4, r2]
    63cc:	movw	r2, #9256	; 0x2428
    63d0:	ldr	r3, [r4, r2]
    63d2:	adds	r3, #1
    63d4:	str	r3, [r4, r2]
          write8(0);
          break;
        default:
          break;
      }
    }
    63d6:	add	sp, #148	; 0x94
    63d8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    63dc:	movw	r5, #9252	; 0x2424
    63e0:	movw	r2, #56321	; 0xdc01
    63e4:	ldrb	r3, [r0, r5]
    63e6:	strh.w	r2, [sp, #30]
    63ea:	cmp	r3, #0
    63ec:	beq.w	68c6 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x676>
      {
        write_length_ += len;
    63f0:	movw	r2, #9256	; 0x2428
    63f4:	ldr	r3, [r4, r2]
    63f6:	adds	r3, #2
    63f8:	str	r3, [r4, r2]
    63fa:	movw	r2, #9256	; 0x2428
    63fe:	ldr	r3, [r4, r2]
    6400:	adds	r3, #2
    6402:	str	r3, [r4, r2]
    6404:	movw	r2, #9256	; 0x2428
    6408:	ldr	r3, [r4, r2]
    640a:	adds	r3, #1
    640c:	str	r3, [r4, r2]
    640e:	movw	r2, #9256	; 0x2428
    6412:	ldr	r3, [r4, r2]
    6414:	adds	r3, #4
    6416:	str	r3, [r4, r2]
    6418:	b.n	63c2 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x172>
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    641a:	movw	r5, #9252	; 0x2424
    641e:	movw	r2, #56322	; 0xdc02
    6422:	ldrb	r3, [r0, r5]
    6424:	strh.w	r2, [sp, #36]	; 0x24
    6428:	cmp	r3, #0
    642a:	beq.w	683e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x5ee>
      {
        write_length_ += len;
    642e:	movw	r2, #9256	; 0x2428
    6432:	ldr	r3, [r4, r2]
    6434:	adds	r3, #2
    6436:	str	r3, [r4, r2]
    6438:	movw	r2, #9256	; 0x2428
    643c:	ldr	r3, [r4, r2]
    643e:	adds	r3, #2
    6440:	str	r3, [r4, r2]
    6442:	movw	r2, #9256	; 0x2428
    6446:	ldr	r3, [r4, r2]
    6448:	adds	r3, #1
    644a:	str	r3, [r4, r2]
    644c:	movw	r2, #9256	; 0x2428
    6450:	ldr	r3, [r4, r2]
    6452:	adds	r3, #2
    6454:	str	r3, [r4, r2]
    6456:	b.n	63c2 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x172>
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    6458:	movw	r5, #9252	; 0x2424
    645c:	movw	r2, #56323	; 0xdc03
    6460:	ldrb	r3, [r0, r5]
    6462:	strh.w	r2, [sp, #42]	; 0x2a
    6466:	cmp	r3, #0
    6468:	bne.n	642e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1de>
    646a:	movs	r2, #2
    646c:	add.w	r1, sp, #42	; 0x2a
    6470:	bl	5784 <MTPD::write(char const*, int) [clone .part.2]>
    6474:	movs	r7, #4
    6476:	ldrb.w	r8, [r4, r5]
    647a:	strh.w	r7, [sp, #40]	; 0x28
    647e:	cmp.w	r8, #0
    6482:	bne.n	6438 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1e8>
    6484:	movs	r2, #2
    6486:	add	r1, sp, #40	; 0x28
    6488:	mov	r0, r4
    648a:	bl	5784 <MTPD::write(char const*, int) [clone .part.2]>
    648e:	ldrb	r6, [r4, r5]
    6490:	strb.w	r8, [sp, #9]
    6494:	cmp	r6, #0
    6496:	bne.n	6442 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1f2>
    6498:	movs	r2, #1
    649a:	add.w	r1, sp, #9
    649e:	mov	r0, r4
    64a0:	bl	5784 <MTPD::write(char const*, int) [clone .part.2]>
    64a4:	ldrb.w	r8, [r4, r5]
    64a8:	strh.w	r6, [sp, #38]	; 0x26
    64ac:	cmp.w	r8, #0
    64b0:	bne.n	644c <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1fc>
    64b2:	movs	r2, #2
    64b4:	add.w	r1, sp, #38	; 0x26
    64b8:	mov	r0, r4
    64ba:	bl	5784 <MTPD::write(char const*, int) [clone .part.2]>
    64be:	ldrb	r6, [r4, r5]
    64c0:	str.w	r8, [sp, #84]	; 0x54
    64c4:	cmp	r6, #0
    64c6:	bne.w	63c2 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x172>
    64ca:	mov	r2, r7
    64cc:	add	r1, sp, #84	; 0x54
    64ce:	mov	r0, r4
    64d0:	bl	5784 <MTPD::write(char const*, int) [clone .part.2]>
    64d4:	ldrb	r3, [r4, r5]
    64d6:	strb.w	r6, [sp, #8]
    64da:	cmp	r3, #0
    64dc:	bne.w	63cc <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x17c>
    64e0:	mov	r0, r4
    64e2:	movs	r2, #1
    64e4:	add	r1, sp, #8
    64e6:	bl	5784 <MTPD::write(char const*, int) [clone .part.2]>
    64ea:	b.n	6380 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x130>
    64ec:	movw	r5, #9252	; 0x2424
    64f0:	movw	r2, #56324	; 0xdc04
    64f4:	ldrb	r3, [r0, r5]
    64f6:	strh.w	r2, [sp, #46]	; 0x2e
    64fa:	cmp	r3, #0
    64fc:	beq.w	67bc <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x56c>
      {
        write_length_ += len;
    6500:	movw	r2, #9256	; 0x2428
    6504:	ldr	r3, [r0, r2]
    6506:	adds	r3, #2
    6508:	str	r3, [r0, r2]
    650a:	movw	r2, #9256	; 0x2428
    650e:	ldr	r3, [r4, r2]
    6510:	adds	r3, #2
    6512:	str	r3, [r4, r2]
    6514:	movw	r2, #9256	; 0x2428
    6518:	ldr	r3, [r4, r2]
    651a:	adds	r3, #1
    651c:	str	r3, [r4, r2]
    651e:	movw	r2, #9256	; 0x2428
    6522:	ldr	r3, [r4, r2]
    6524:	adds	r3, #8
    6526:	str	r3, [r4, r2]
    6528:	b.n	63c2 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x172>
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    652a:	movw	r5, #9252	; 0x2424
    652e:	movw	r2, #56327	; 0xdc07
    6532:	ldrb	r3, [r0, r5]
    6534:	strh.w	r2, [sp, #50]	; 0x32
    6538:	cmp	r3, #0
    653a:	bne.w	639a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x14a>
    653e:	movs	r2, #2
    6540:	add.w	r1, sp, #50	; 0x32
    6544:	bl	5784 <MTPD::write(char const*, int) [clone .part.2]>
    6548:	movw	r2, #65535	; 0xffff
    654c:	ldrb	r3, [r4, r5]
    654e:	strh.w	r2, [sp, #48]	; 0x30
    6552:	cmp	r3, #0
    6554:	bne.w	63a4 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x154>
    6558:	movs	r2, #2
    655a:	add	r1, sp, #48	; 0x30
    655c:	mov	r0, r4
    655e:	movs	r6, #1
    6560:	bl	5784 <MTPD::write(char const*, int) [clone .part.2]>
    6564:	ldrb	r7, [r4, r5]
    6566:	strb.w	r6, [sp, #14]
    656a:	cmp	r7, #0
    656c:	bne.w	63ae <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x15e>
    6570:	mov	r2, r6
    6572:	add.w	r1, sp, #14
    6576:	mov	r0, r4
    6578:	bl	5784 <MTPD::write(char const*, int) [clone .part.2]>
    657c:	ldrb.w	r8, [r4, r5]
    6580:	strb.w	r7, [sp, #13]
    6584:	cmp.w	r8, #0
    6588:	bne.w	63b8 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x168>
    658c:	mov	r2, r6
    658e:	add.w	r1, sp, #13
    6592:	mov	r0, r4
    6594:	bl	5784 <MTPD::write(char const*, int) [clone .part.2]>
    6598:	ldrb	r7, [r4, r5]
    659a:	str.w	r8, [sp, #92]	; 0x5c
    659e:	cmp	r7, #0
    65a0:	bne.w	63c2 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x172>
    65a4:	movs	r2, #4
    65a6:	add	r1, sp, #92	; 0x5c
    65a8:	mov	r0, r4
    65aa:	bl	5784 <MTPD::write(char const*, int) [clone .part.2]>
    65ae:	ldrb	r3, [r4, r5]
    65b0:	strb.w	r7, [sp, #12]
    65b4:	cmp	r3, #0
    65b6:	bne.w	63cc <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x17c>
    65ba:	mov	r2, r6
    65bc:	mov	r0, r4
    65be:	add	r1, sp, #12
    65c0:	bl	5784 <MTPD::write(char const*, int) [clone .part.2]>
    65c4:	b.n	6380 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x130>
    65c6:	movw	r5, #9252	; 0x2424
    65ca:	movw	r2, #56328	; 0xdc08
    65ce:	ldrb	r3, [r0, r5]
    65d0:	strh.w	r2, [sp, #54]	; 0x36
    65d4:	cmp	r3, #0
    65d6:	bne.w	639a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x14a>
    65da:	movs	r2, #2
    65dc:	add.w	r1, sp, #54	; 0x36
    65e0:	bl	5784 <MTPD::write(char const*, int) [clone .part.2]>
    65e4:	movw	r3, #65535	; 0xffff
    65e8:	ldrb	r7, [r4, r5]
    65ea:	strh.w	r3, [sp, #52]	; 0x34
    65ee:	cmp	r7, #0
    65f0:	bne.w	63a4 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x154>
    65f4:	movs	r2, #2
    65f6:	add	r1, sp, #52	; 0x34
    65f8:	mov	r0, r4
    65fa:	bl	5784 <MTPD::write(char const*, int) [clone .part.2]>
    65fe:	ldrb	r6, [r4, r5]
    6600:	strb.w	r7, [sp, #17]
    6604:	cmp	r6, #0
    6606:	bne.w	63ae <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x15e>
    660a:	movs	r2, #1
    660c:	add.w	r1, sp, #17
    6610:	mov	r0, r4
    6612:	bl	5784 <MTPD::write(char const*, int) [clone .part.2]>
    6616:	ldrb	r7, [r4, r5]
    6618:	strb.w	r6, [sp, #16]
    661c:	cmp	r7, #0
    661e:	bne.w	63b8 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x168>
    6622:	movs	r2, #1
    6624:	add	r1, sp, #16
    6626:	mov	r0, r4
    6628:	bl	5784 <MTPD::write(char const*, int) [clone .part.2]>
    662c:	ldrb	r6, [r4, r5]
    662e:	str	r7, [sp, #96]	; 0x60
    6630:	cmp	r6, #0
    6632:	bne.w	63c2 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x172>
    6636:	movs	r2, #4
    6638:	add	r1, sp, #96	; 0x60
    663a:	mov	r0, r4
    663c:	bl	5784 <MTPD::write(char const*, int) [clone .part.2]>
    6640:	ldrb	r3, [r4, r5]
    6642:	strb.w	r6, [sp, #15]
    6646:	cmp	r3, #0
    6648:	bne.w	63cc <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x17c>
    664c:	mov	r0, r4
    664e:	movs	r2, #1
    6650:	add.w	r1, sp, #15
    6654:	bl	5784 <MTPD::write(char const*, int) [clone .part.2]>
    6658:	b.n	6380 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x130>
    665a:	movw	r5, #9252	; 0x2424
    665e:	movw	r2, #56329	; 0xdc09
    6662:	ldrb	r3, [r0, r5]
    6664:	strh.w	r2, [sp, #58]	; 0x3a
    6668:	cmp	r3, #0
    666a:	bne.w	639a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x14a>
    666e:	movs	r2, #2
    6670:	add.w	r1, sp, #58	; 0x3a
    6674:	bl	5784 <MTPD::write(char const*, int) [clone .part.2]>
    6678:	movw	r3, #65535	; 0xffff
    667c:	ldrb	r7, [r4, r5]
    667e:	strh.w	r3, [sp, #56]	; 0x38
    6682:	cmp	r7, #0
    6684:	bne.w	63a4 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x154>
    6688:	movs	r2, #2
    668a:	add	r1, sp, #56	; 0x38
    668c:	mov	r0, r4
    668e:	bl	5784 <MTPD::write(char const*, int) [clone .part.2]>
    6692:	ldrb	r6, [r4, r5]
    6694:	strb.w	r7, [sp, #20]
    6698:	cmp	r6, #0
    669a:	bne.w	63ae <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x15e>
    669e:	movs	r2, #1
    66a0:	add	r1, sp, #20
    66a2:	mov	r0, r4
    66a4:	bl	5784 <MTPD::write(char const*, int) [clone .part.2]>
    66a8:	ldrb	r7, [r4, r5]
    66aa:	strb.w	r6, [sp, #19]
    66ae:	cmp	r7, #0
    66b0:	bne.w	63b8 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x168>
    66b4:	movs	r2, #1
    66b6:	add.w	r1, sp, #19
    66ba:	mov	r0, r4
    66bc:	bl	5784 <MTPD::write(char const*, int) [clone .part.2]>
    66c0:	ldrb	r6, [r4, r5]
    66c2:	str	r7, [sp, #100]	; 0x64
    66c4:	cmp	r6, #0
    66c6:	bne.w	63c2 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x172>
    66ca:	movs	r2, #4
    66cc:	add	r1, sp, #100	; 0x64
    66ce:	mov	r0, r4
    66d0:	bl	5784 <MTPD::write(char const*, int) [clone .part.2]>
    66d4:	ldrb	r3, [r4, r5]
    66d6:	strb.w	r6, [sp, #18]
    66da:	cmp	r3, #0
    66dc:	bne.w	63cc <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x17c>
    66e0:	mov	r0, r4
    66e2:	movs	r2, #1
    66e4:	add.w	r1, sp, #18
    66e8:	bl	5784 <MTPD::write(char const*, int) [clone .part.2]>
    66ec:	b.n	6380 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x130>
    66ee:	movw	r5, #9252	; 0x2424
    66f2:	movw	r2, #56331	; 0xdc0b
    66f6:	ldrb	r3, [r0, r5]
    66f8:	strh.w	r2, [sp, #62]	; 0x3e
    66fc:	cmp	r3, #0
    66fe:	bne.w	63f0 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1a0>
    6702:	movs	r2, #2
    6704:	add.w	r1, sp, #62	; 0x3e
    6708:	bl	5784 <MTPD::write(char const*, int) [clone .part.2]>
    670c:	movs	r3, #6
    670e:	ldrb	r7, [r4, r5]
    6710:	strh.w	r3, [sp, #60]	; 0x3c
    6714:	cmp	r7, #0
    6716:	bne.w	63fa <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1aa>
    671a:	movs	r2, #2
    671c:	add	r1, sp, #60	; 0x3c
    671e:	mov	r0, r4
    6720:	bl	5784 <MTPD::write(char const*, int) [clone .part.2]>
    6724:	ldrb	r6, [r4, r5]
    6726:	strb.w	r7, [sp, #22]
    672a:	cmp	r6, #0
    672c:	bne.w	6404 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1b4>
    6730:	movs	r2, #1
    6732:	add.w	r1, sp, #22
    6736:	mov	r0, r4
    6738:	bl	5784 <MTPD::write(char const*, int) [clone .part.2]>
    673c:	ldrb	r7, [r4, r5]
    673e:	str	r6, [sp, #108]	; 0x6c
    6740:	cmp	r7, #0
    6742:	bne.w	640e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1be>
    6746:	movs	r2, #4
    6748:	add	r1, sp, #108	; 0x6c
    674a:	mov	r0, r4
    674c:	bl	5784 <MTPD::write(char const*, int) [clone .part.2]>
    6750:	ldrb	r6, [r4, r5]
    6752:	str	r7, [sp, #104]	; 0x68
    6754:	cmp	r6, #0
    6756:	bne.w	63c2 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x172>
    675a:	movs	r2, #4
    675c:	add	r1, sp, #104	; 0x68
    675e:	mov	r0, r4
    6760:	bl	5784 <MTPD::write(char const*, int) [clone .part.2]>
    6764:	ldrb	r3, [r4, r5]
    6766:	strb.w	r6, [sp, #21]
    676a:	cmp	r3, #0
    676c:	bne.w	63cc <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x17c>
    6770:	mov	r0, r4
    6772:	movs	r2, #1
    6774:	add.w	r1, sp, #21
    6778:	bl	5784 <MTPD::write(char const*, int) [clone .part.2]>
    677c:	b.n	6380 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x130>
    677e:	movw	r5, #9252	; 0x2424
    6782:	movw	r2, #56385	; 0xdc41
    6786:	ldrb	r3, [r0, r5]
    6788:	strh.w	r2, [sp, #66]	; 0x42
    678c:	cmp	r3, #0
    678e:	beq.w	62f0 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xa0>
      {
        write_length_ += len;
    6792:	movw	r2, #9256	; 0x2428
    6796:	ldr	r3, [r0, r2]
    6798:	adds	r3, #2
    679a:	str	r3, [r0, r2]
    679c:	movw	r2, #9256	; 0x2428
    67a0:	ldr	r3, [r4, r2]
    67a2:	adds	r3, #2
    67a4:	str	r3, [r4, r2]
    67a6:	movw	r2, #9256	; 0x2428
    67aa:	ldr	r3, [r4, r2]
    67ac:	adds	r3, #1
    67ae:	str	r3, [r4, r2]
    67b0:	movw	r2, #9256	; 0x2428
    67b4:	ldr	r3, [r4, r2]
    67b6:	adds	r3, #8
    67b8:	str	r3, [r4, r2]
    67ba:	b.n	651e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x2ce>
    67bc:	movs	r2, #2
    67be:	add.w	r1, sp, #46	; 0x2e
    67c2:	bl	5784 <MTPD::write(char const*, int) [clone .part.2]>
    67c6:	movs	r6, #8
    67c8:	ldrb	r7, [r4, r5]
    67ca:	strh.w	r6, [sp, #44]	; 0x2c
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    67ce:	cmp	r7, #0
    67d0:	bne.w	650a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x2ba>
    67d4:	movs	r2, #2
    67d6:	add	r1, sp, #44	; 0x2c
    67d8:	mov	r0, r4
    67da:	bl	5784 <MTPD::write(char const*, int) [clone .part.2]>
    67de:	ldrb	r3, [r4, r5]
    67e0:	strb.w	r7, [sp, #11]
    67e4:	cmp	r3, #0
    67e6:	bne.w	6514 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x2c4>
    67ea:	movs	r2, #1
    67ec:	add.w	r1, sp, #11
    67f0:	mov	r0, r4
    67f2:	bl	5784 <MTPD::write(char const*, int) [clone .part.2]>
    67f6:	movs	r2, #0
    67f8:	movs	r3, #0
    67fa:	ldrb	r7, [r4, r5]
    67fc:	strd	r2, r3, [sp, #120]	; 0x78
    6800:	cmp	r7, #0
    6802:	bne.w	651e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x2ce>
    6806:	mov	r2, r6
    6808:	add	r1, sp, #120	; 0x78
    680a:	mov	r0, r4
    680c:	bl	5784 <MTPD::write(char const*, int) [clone .part.2]>
    6810:	ldrb	r6, [r4, r5]
    6812:	str	r7, [sp, #88]	; 0x58
    6814:	cmp	r6, #0
    6816:	bne.w	63c2 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x172>
    681a:	movs	r2, #4
    681c:	add	r1, sp, #88	; 0x58
    681e:	mov	r0, r4
    6820:	bl	5784 <MTPD::write(char const*, int) [clone .part.2]>
    6824:	ldrb	r3, [r4, r5]
    6826:	strb.w	r6, [sp, #10]
    682a:	cmp	r3, #0
    682c:	bne.w	63cc <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x17c>
    6830:	mov	r0, r4
    6832:	movs	r2, #1
    6834:	add.w	r1, sp, #10
    6838:	bl	5784 <MTPD::write(char const*, int) [clone .part.2]>
    683c:	b.n	6380 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x130>
    683e:	movs	r2, #2
    6840:	add	r1, sp, #36	; 0x24
    6842:	bl	5784 <MTPD::write(char const*, int) [clone .part.2]>
    6846:	movs	r7, #4
    6848:	ldrb.w	r8, [r4, r5]
    684c:	strh.w	r7, [sp, #34]	; 0x22
    6850:	cmp.w	r8, #0
    6854:	bne.w	6438 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1e8>
    6858:	movs	r2, #2
    685a:	add.w	r1, sp, #34	; 0x22
    685e:	mov	r0, r4
    6860:	bl	5784 <MTPD::write(char const*, int) [clone .part.2]>
    6864:	ldrb	r6, [r4, r5]
    6866:	strb.w	r8, [sp, #7]
    686a:	cmp	r6, #0
    686c:	bne.w	6442 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1f2>
    6870:	movs	r2, #1
    6872:	add.w	r1, sp, #7
    6876:	mov	r0, r4
    6878:	bl	5784 <MTPD::write(char const*, int) [clone .part.2]>
    687c:	ldrb.w	r8, [r4, r5]
    6880:	strh.w	r6, [sp, #32]
    6884:	cmp.w	r8, #0
    6888:	bne.w	644c <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1fc>
    688c:	movs	r2, #2
    688e:	add	r1, sp, #32
    6890:	mov	r0, r4
    6892:	bl	5784 <MTPD::write(char const*, int) [clone .part.2]>
    6896:	ldrb	r6, [r4, r5]
    6898:	str.w	r8, [sp, #80]	; 0x50
    689c:	cmp	r6, #0
    689e:	bne.w	63c2 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x172>
    68a2:	mov	r2, r7
    68a4:	add	r1, sp, #80	; 0x50
    68a6:	mov	r0, r4
    68a8:	bl	5784 <MTPD::write(char const*, int) [clone .part.2]>
    68ac:	ldrb	r3, [r4, r5]
    68ae:	strb.w	r6, [sp, #6]
    68b2:	cmp	r3, #0
    68b4:	bne.w	63cc <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x17c>
    68b8:	mov	r0, r4
    68ba:	movs	r2, #1
    68bc:	add.w	r1, sp, #6
    68c0:	bl	5784 <MTPD::write(char const*, int) [clone .part.2]>
    68c4:	b.n	6380 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x130>
    68c6:	movs	r2, #2
    68c8:	add.w	r1, sp, #30
    68cc:	bl	5784 <MTPD::write(char const*, int) [clone .part.2]>
    68d0:	movs	r3, #6
    68d2:	ldrb	r7, [r4, r5]
    68d4:	strh.w	r3, [sp, #28]
    68d8:	cmp	r7, #0
    68da:	bne.w	63fa <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1aa>
    68de:	movs	r2, #2
    68e0:	add	r1, sp, #28
    68e2:	mov	r0, r4
    68e4:	bl	5784 <MTPD::write(char const*, int) [clone .part.2]>
    68e8:	ldrb	r6, [r4, r5]
    68ea:	strb.w	r7, [sp, #5]
    68ee:	cmp	r6, #0
    68f0:	bne.w	6404 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1b4>
    68f4:	movs	r2, #1
    68f6:	add.w	r1, sp, #5
    68fa:	mov	r0, r4
    68fc:	bl	5784 <MTPD::write(char const*, int) [clone .part.2]>
    6900:	ldrb	r7, [r4, r5]
    6902:	str	r6, [sp, #76]	; 0x4c
    6904:	cmp	r7, #0
    6906:	bne.w	640e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1be>
    690a:	movs	r2, #4
    690c:	add	r1, sp, #76	; 0x4c
    690e:	mov	r0, r4
    6910:	bl	5784 <MTPD::write(char const*, int) [clone .part.2]>
    6914:	ldrb	r6, [r4, r5]
    6916:	str	r7, [sp, #72]	; 0x48
    6918:	cmp	r6, #0
    691a:	bne.w	63c2 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x172>
    691e:	movs	r2, #4
    6920:	add	r1, sp, #72	; 0x48
    6922:	mov	r0, r4
    6924:	bl	5784 <MTPD::write(char const*, int) [clone .part.2]>
    6928:	ldrb	r3, [r4, r5]
    692a:	strb.w	r6, [sp, #4]
    692e:	cmp	r3, #0
    6930:	bne.w	63cc <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x17c>
    6934:	mov	r0, r4
    6936:	movs	r2, #1
    6938:	add	r1, sp, #4
    693a:	bl	5784 <MTPD::write(char const*, int) [clone .part.2]>
    693e:	b.n	6380 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x130>
    6940:	movs	r2, #2
    6942:	add.w	r1, sp, #70	; 0x46
    6946:	bl	5784 <MTPD::write(char const*, int) [clone .part.2]>
    694a:	movw	r3, #65535	; 0xffff
    694e:	ldrb	r7, [r4, r5]
    6950:	strh.w	r3, [sp, #68]	; 0x44
    6954:	cmp	r7, #0
    6956:	bne.w	63a4 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x154>
    695a:	movs	r2, #2
    695c:	add	r1, sp, #68	; 0x44
    695e:	mov	r0, r4
    6960:	bl	5784 <MTPD::write(char const*, int) [clone .part.2]>
    6964:	ldrb	r6, [r4, r5]
    6966:	strb.w	r7, [sp, #27]
    696a:	cmp	r6, #0
    696c:	bne.w	63ae <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x15e>
    6970:	movs	r2, #1
    6972:	add.w	r1, sp, #27
    6976:	mov	r0, r4
    6978:	bl	5784 <MTPD::write(char const*, int) [clone .part.2]>
    697c:	ldrb	r7, [r4, r5]
    697e:	strb.w	r6, [sp, #26]
    6982:	cmp	r7, #0
    6984:	bne.w	63b8 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x168>
    6988:	movs	r2, #1
    698a:	add.w	r1, sp, #26
    698e:	mov	r0, r4
    6990:	bl	5784 <MTPD::write(char const*, int) [clone .part.2]>
    6994:	ldrb	r6, [r4, r5]
    6996:	str	r7, [sp, #116]	; 0x74
    6998:	cmp	r6, #0
    699a:	bne.w	63c2 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x172>
    699e:	movs	r2, #4
    69a0:	add	r1, sp, #116	; 0x74
    69a2:	mov	r0, r4
    69a4:	bl	5784 <MTPD::write(char const*, int) [clone .part.2]>
    69a8:	ldrb	r3, [r4, r5]
    69aa:	strb.w	r6, [sp, #25]
    69ae:	cmp	r3, #0
    69b0:	bne.w	63cc <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x17c>
    69b4:	mov	r0, r4
    69b6:	movs	r2, #1
    69b8:	add.w	r1, sp, #25
    69bc:	bl	5784 <MTPD::write(char const*, int) [clone .part.2]>
          write8(0);
          break;
        default:
          break;
      }
    }
    69c0:	b.n	6380 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x130>
    69c2:	nop

000069c4 <MTPD::getObjectPropValue(unsigned long, unsigned long)>:

    void MTPD::getObjectPropValue(uint32_t p1, uint32_t p2)
    { char name[MAX_FILENAME_LEN];
    69c4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    69c8:	mov	r4, r0
    69ca:	sub	sp, #316	; 0x13c
      uint32_t dir;
      uint32_t size;
      uint32_t parent;
      uint16_t store;
      storage_->GetObjectInfo(p1,name,&size,&parent, &store);
    69cc:	ldr	r0, [r0, #0]
          break;
      }
    }

    void MTPD::getObjectPropValue(uint32_t p1, uint32_t p2)
    { char name[MAX_FILENAME_LEN];
    69ce:	mov	r7, r2
      uint32_t dir;
      uint32_t size;
      uint32_t parent;
      uint16_t store;
      storage_->GetObjectInfo(p1,name,&size,&parent, &store);
    69d0:	add.w	r5, sp, #10
    69d4:	add	r6, sp, #20
    69d6:	ldr.w	lr, [r0]
    69da:	add	r3, sp, #16
    69dc:	str	r5, [sp, #4]
    69de:	add	r2, sp, #56	; 0x38
    69e0:	str	r6, [sp, #0]
          break;
      }
    }

    void MTPD::getObjectPropValue(uint32_t p1, uint32_t p2)
    { char name[MAX_FILENAME_LEN];
    69e2:	mov	r9, r1
      uint32_t dir;
      uint32_t size;
      uint32_t parent;
      uint16_t store;
      storage_->GetObjectInfo(p1,name,&size,&parent, &store);
    69e4:	ldr.w	r8, [lr, #36]	; 0x24
    69e8:	blx	r8
      dir = size == 0xFFFFFFFFUL;
      uint32_t storage = Store2Storage(store);
      switch(p2)
    69ea:	mvn.w	r3, #56320	; 0xdc00
      uint32_t size;
      uint32_t parent;
      uint16_t store;
      storage_->GetObjectInfo(p1,name,&size,&parent, &store);
      dir = size == 0xFFFFFFFFUL;
      uint32_t storage = Store2Storage(store);
    69ee:	ldrh	r2, [r5, #0]
      switch(p2)
    69f0:	add	r3, r7
      uint32_t dir;
      uint32_t size;
      uint32_t parent;
      uint16_t store;
      storage_->GetObjectInfo(p1,name,&size,&parent, &store);
      dir = size == 0xFFFFFFFFUL;
    69f2:	ldr	r1, [sp, #16]
      uint32_t storage = Store2Storage(store);
    69f4:	adds	r5, r2, #1
      switch(p2)
    69f6:	cmp	r3, #67	; 0x43
    69f8:	bhi.n	6a82 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xbe>
    69fa:	tbb	[pc, r3]
    69fe:	.short	0x6153
    6a00:	.word	0x4242ac9d
    6a04:	.word	0x4245454c
    6a08:	.word	0x42424276
    6a0c:	.word	0x42424242
    6a10:	.word	0x42424242
    6a14:	.word	0x42424242
    6a18:	.word	0x42424242
    6a1c:	.word	0x42424242
    6a20:	.word	0x42424242
    6a24:	.word	0x42424242
    6a28:	.word	0x42424242
    6a2c:	.word	0x42424242
    6a30:	.word	0x42424242
    6a34:	.word	0x42424242
    6a38:	.word	0x42424242
    6a3c:	.word	0x42864242
    6a40:	.short	0x4c42
    6a42:	movs	r2, #4
    6a44:	add	r1, sp, #52	; 0x34
    6a46:	mov	r0, r4
    6a48:	bl	5784 <MTPD::write(char const*, int) [clone .part.2]>
    6a4c:	ldr	r2, [r6, #0]
    6a4e:	ldrb	r3, [r4, r7]
    6a50:	str	r2, [sp, #48]	; 0x30
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    6a52:	cmp	r3, #0
    6a54:	bne.n	6b22 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x15e>
    6a56:	add	r1, sp, #48	; 0x30
    6a58:	movs	r2, #4
    6a5a:	mov	r0, r4
    6a5c:	bl	5784 <MTPD::write(char const*, int) [clone .part.2]>
    6a60:	ldrb	r6, [r4, r7]
    6a62:	str	r5, [sp, #44]	; 0x2c
    6a64:	cmp	r6, #0
    6a66:	bne.n	6b2c <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x168>
    6a68:	add	r1, sp, #44	; 0x2c
    6a6a:	movs	r2, #4
    6a6c:	mov	r0, r4
    6a6e:	bl	5784 <MTPD::write(char const*, int) [clone .part.2]>
    6a72:	ldrb	r3, [r4, r7]
    6a74:	str	r6, [sp, #40]	; 0x28
    6a76:	cbnz	r3, 6ab0 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xec>
    6a78:	add	r1, sp, #40	; 0x28
    6a7a:	mov	r0, r4
    6a7c:	movs	r2, #4
    6a7e:	bl	5784 <MTPD::write(char const*, int) [clone .part.2]>
          writestring(name);
          break;
        default:
          break;
      }
    }
    6a82:	add	sp, #316	; 0x13c
    6a84:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          break;
        case MTP_PROPERTY_DATE_CREATED:       //0xDC08:
          writestring("");
          break;
        case MTP_PROPERTY_DATE_MODIFIED:      //0xDC09:
          writestring("");
    6a88:	mov	r0, r4
    6a8a:	ldr	r1, [pc, #268]	; (6b98 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x1d4>)
    6a8c:	bl	5804 <MTPD::writestring(char const*)>
          writestring(name);
          break;
        default:
          break;
      }
    }
    6a90:	add	sp, #316	; 0x13c
    6a92:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          write32(parent);
          write32(storage);
          write32(0);
          break;
        case MTP_PROPERTY_NAME:               //0xDC44:
          writestring(name);
    6a96:	add	r1, sp, #56	; 0x38
    6a98:	mov	r0, r4
    6a9a:	bl	5804 <MTPD::writestring(char const*)>
          break;
        default:
          break;
      }
    }
    6a9e:	add	sp, #316	; 0x13c
    6aa0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    6aa4:	movw	r3, #9252	; 0x2424
    6aa8:	str	r5, [sp, #24]
    6aaa:	ldrb	r3, [r4, r3]
    6aac:	cmp	r3, #0
    6aae:	beq.n	6b8c <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x1c8>
      {
        write_length_ += len;
    6ab0:	movw	r2, #9256	; 0x2428
    6ab4:	ldr	r3, [r4, r2]
    6ab6:	adds	r3, #4
    6ab8:	str	r3, [r4, r2]
          writestring(name);
          break;
        default:
          break;
      }
    }
    6aba:	add	sp, #316	; 0x13c
    6abc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      {
        case MTP_PROPERTY_STORAGE_ID:         //0xDC01:
          write32(storage);
          break;
        case MTP_PROPERTY_OBJECT_FORMAT:      //0xDC02:
          write16(dir?0x3001:0x3000);
    6ac0:	adds	r1, #1
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    6ac2:	movw	r2, #9252	; 0x2424
      {
        case MTP_PROPERTY_STORAGE_ID:         //0xDC01:
          write32(storage);
          break;
        case MTP_PROPERTY_OBJECT_FORMAT:      //0xDC02:
          write16(dir?0x3001:0x3000);
    6ac6:	movw	r3, #12289	; 0x3001
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    6aca:	ldrb	r2, [r4, r2]
      {
        case MTP_PROPERTY_STORAGE_ID:         //0xDC01:
          write32(storage);
          break;
        case MTP_PROPERTY_OBJECT_FORMAT:      //0xDC02:
          write16(dir?0x3001:0x3000);
    6acc:	it	ne
    6ace:	movne.w	r3, #12288	; 0x3000
    6ad2:	strh.w	r3, [sp, #12]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    6ad6:	cmp	r2, #0
    6ad8:	beq.n	6b80 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x1bc>
      {
        write_length_ += len;
    6ada:	movw	r2, #9256	; 0x2428
    6ade:	ldr	r3, [r4, r2]
    6ae0:	adds	r3, #2
    6ae2:	str	r3, [r4, r2]
          writestring(name);
          break;
        default:
          break;
      }
    }
    6ae4:	add	sp, #316	; 0x13c
    6ae6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          break;
        case MTP_PROPERTY_DATE_MODIFIED:      //0xDC09:
          writestring("");
          break;
        case MTP_PROPERTY_PARENT_OBJECT:      //0xDC0B:
          write32((store==parent)? 0: parent);
    6aea:	ldr	r3, [r6, #0]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    6aec:	movw	r1, #9252	; 0x2424
          break;
        case MTP_PROPERTY_DATE_MODIFIED:      //0xDC09:
          writestring("");
          break;
        case MTP_PROPERTY_PARENT_OBJECT:      //0xDC0B:
          write32((store==parent)? 0: parent);
    6af0:	cmp	r2, r3
    6af2:	it	eq
    6af4:	moveq	r3, #0
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    6af6:	ldrb	r2, [r4, r1]
    6af8:	str	r3, [sp, #36]	; 0x24
    6afa:	cmp	r2, #0
    6afc:	bne.n	6ab0 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xec>
    6afe:	add	r1, sp, #36	; 0x24
    6b00:	mov	r0, r4
    6b02:	movs	r2, #4
    6b04:	bl	5784 <MTPD::write(char const*, int) [clone .part.2]>
    6b08:	b.n	6a82 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xbe>
    6b0a:	movw	r7, #9252	; 0x2424
    6b0e:	str.w	r9, [sp, #52]	; 0x34
    6b12:	ldrb	r3, [r4, r7]
    6b14:	cmp	r3, #0
    6b16:	beq.n	6a42 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x7e>
      {
        write_length_ += len;
    6b18:	movw	r2, #9256	; 0x2428
    6b1c:	ldr	r3, [r4, r2]
    6b1e:	adds	r3, #4
    6b20:	str	r3, [r4, r2]
    6b22:	movw	r2, #9256	; 0x2428
    6b26:	ldr	r3, [r4, r2]
    6b28:	adds	r3, #4
    6b2a:	str	r3, [r4, r2]
    6b2c:	movw	r2, #9256	; 0x2428
    6b30:	ldr	r3, [r4, r2]
    6b32:	adds	r3, #4
    6b34:	str	r3, [r4, r2]
    6b36:	b.n	6ab0 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xec>
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    6b38:	movw	r3, #9252	; 0x2424
    6b3c:	movs	r2, #0
    6b3e:	ldrb	r3, [r4, r3]
    6b40:	strh.w	r2, [sp, #14]
    6b44:	cmp	r3, #0
    6b46:	bne.n	6ada <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x116>
    6b48:	add.w	r1, sp, #14
    6b4c:	mov	r0, r4
    6b4e:	movs	r2, #2
    6b50:	bl	5784 <MTPD::write(char const*, int) [clone .part.2]>
    6b54:	b.n	6a82 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xbe>
    6b56:	movw	r6, #9252	; 0x2424
    6b5a:	str	r1, [sp, #32]
    6b5c:	ldrb	r5, [r4, r6]
    6b5e:	cmp	r5, #0
    6b60:	bne.n	6b2c <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x168>
    6b62:	add	r1, sp, #32
    6b64:	movs	r2, #4
    6b66:	mov	r0, r4
    6b68:	bl	5784 <MTPD::write(char const*, int) [clone .part.2]>
    6b6c:	ldrb	r3, [r4, r6]
    6b6e:	str	r5, [sp, #28]
    6b70:	cmp	r3, #0
    6b72:	bne.n	6ab0 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xec>
    6b74:	add	r1, sp, #28
    6b76:	mov	r0, r4
    6b78:	movs	r2, #4
    6b7a:	bl	5784 <MTPD::write(char const*, int) [clone .part.2]>
    6b7e:	b.n	6a82 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xbe>
    6b80:	add	r1, sp, #12
    6b82:	mov	r0, r4
    6b84:	movs	r2, #2
    6b86:	bl	5784 <MTPD::write(char const*, int) [clone .part.2]>
    6b8a:	b.n	6a82 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xbe>
    6b8c:	add	r1, sp, #24
    6b8e:	mov	r0, r4
    6b90:	movs	r2, #4
    6b92:	bl	5784 <MTPD::write(char const*, int) [clone .part.2]>
    6b96:	b.n	6a82 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xbe>
    6b98:	.word	0x20000228

00006b9c <MTPD::pull_packet(unsigned char*)>:
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
      return 1;
    }

    int MTPD::pull_packet(uint8_t *data_buffer)
    {
    6b9c:	push	{r4, lr}
    6b9e:	mov	r4, r1
      while(!usb_mtp_available());
    6ba0:	bl	fbc0 <usb_mtp_available>
    6ba4:	cmp	r0, #0
    6ba6:	beq.n	6ba0 <MTPD::pull_packet(unsigned char*)+0x4>
      return usb_mtp_recv(data_buffer,60);
    6ba8:	mov	r0, r4
    6baa:	movs	r1, #60	; 0x3c
    }
    6bac:	ldmia.w	sp!, {r4, lr}
    }

    int MTPD::pull_packet(uint8_t *data_buffer)
    {
      while(!usb_mtp_available());
      return usb_mtp_recv(data_buffer,60);
    6bb0:	b.w	fa44 <usb_mtp_recv>

00006bb4 <MTPD::GetObject(unsigned long)>:
        }
      }
    }

    void MTPD::GetObject(uint32_t object_id) 
    {
    6bb4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6bb8:	mov	fp, r0
      uint32_t size = storage_->GetSize(object_id);
    6bba:	ldr	r0, [r0, #0]
        }
      }
    }

    void MTPD::GetObject(uint32_t object_id) 
    {
    6bbc:	sub	sp, #28
      uint32_t size = storage_->GetSize(object_id);
    6bbe:	ldr	r3, [r0, #0]
        }
      }
    }

    void MTPD::GetObject(uint32_t object_id) 
    {
    6bc0:	str	r1, [sp, #16]
      uint32_t size = storage_->GetSize(object_id);
    6bc2:	ldr	r3, [r3, #40]	; 0x28
    6bc4:	blx	r3

      if (write_get_length_) {
    6bc6:	movw	r3, #9252	; 0x2424
      }
    }

    void MTPD::GetObject(uint32_t object_id) 
    {
      uint32_t size = storage_->GetSize(object_id);
    6bca:	mov	sl, r0

      if (write_get_length_) {
    6bcc:	ldrb.w	r7, [fp, r3]
    6bd0:	cmp	r7, #0
    6bd2:	bne.n	6cb6 <MTPD::GetObject(unsigned long)+0x102>
      } else 
      { 
        uint32_t pos = 0; // into data
        uint32_t len = sizeof(MTPHeader);

        disk_pos=DISK_BUFFER_SIZE;
    6bd4:	movw	r2, #9248	; 0x2420
    6bd8:	mov.w	r3, #8192	; 0x2000
    6bdc:	str.w	r3, [fp, r2]
        while(pos<size)
    6be0:	cmp	r0, #0
    6be2:	beq.n	6cca <MTPD::GetObject(unsigned long)+0x116>
    6be4:	mov	r8, r3
    6be6:	add.w	r6, fp, #544	; 0x220
    6bea:	add.w	r3, fp, #1056	; 0x420
    6bee:	movw	r9, #9248	; 0x2420
    6bf2:	str.w	fp, [sp, #20]
    6bf6:	movs	r5, #12
    6bf8:	add	r9, fp
    6bfa:	mov	fp, r3
    6bfc:	mov	r3, r6
    6bfe:	mov	r6, r8
    6c00:	mov	r8, r3
    6c02:	b.n	6c48 <MTPD::GetObject(unsigned long)+0x94>
    6c04:	str	r3, [sp, #12]
    6c06:	rsb	r3, r6, #8192	; 0x2000
    6c0a:	ldr	r2, [sp, #12]
          }

          uint32_t to_copy = min(size-pos,MTP_TX_SIZE-len);
          to_copy = min (to_copy, DISK_BUFFER_SIZE-disk_pos);

          memcpy(tx_data_buffer+len,disk_buffer+disk_pos,to_copy);
    6c0c:	add.w	r0, r8, r5
    6c10:	add.w	r1, fp, r6
    6c14:	cmp	r2, r3
    6c16:	it	cs
    6c18:	movcs	r2, r3
    6c1a:	rsb	r3, r5, #512	; 0x200
    6c1e:	cmp	r2, r3
    6c20:	mov	r4, r2
    6c22:	it	cs
    6c24:	movcs	r4, r3
    6c26:	mov	r2, r4
          disk_pos += to_copy;
          pos += to_copy;
          len += to_copy;
    6c28:	add	r5, r4
          }

          uint32_t to_copy = min(size-pos,MTP_TX_SIZE-len);
          to_copy = min (to_copy, DISK_BUFFER_SIZE-disk_pos);

          memcpy(tx_data_buffer+len,disk_buffer+disk_pos,to_copy);
    6c2a:	bl	db14 <memcpy>
          disk_pos += to_copy;
    6c2e:	ldr.w	r3, [r9]
          pos += to_copy;
    6c32:	add	r7, r4
          len += to_copy;

          if(len==MTP_TX_SIZE)
    6c34:	cmp.w	r5, #512	; 0x200

          uint32_t to_copy = min(size-pos,MTP_TX_SIZE-len);
          to_copy = min (to_copy, DISK_BUFFER_SIZE-disk_pos);

          memcpy(tx_data_buffer+len,disk_buffer+disk_pos,to_copy);
          disk_pos += to_copy;
    6c38:	add	r4, r3
    6c3a:	str.w	r4, [r9]
          pos += to_copy;
          len += to_copy;

          if(len==MTP_TX_SIZE)
    6c3e:	beq.n	6c84 <MTPD::GetObject(unsigned long)+0xd0>
      { 
        uint32_t pos = 0; // into data
        uint32_t len = sizeof(MTPHeader);

        disk_pos=DISK_BUFFER_SIZE;
        while(pos<size)
    6c40:	cmp	sl, r7
    6c42:	bls.n	6c9c <MTPD::GetObject(unsigned long)+0xe8>
    6c44:	ldr.w	r6, [r9]
        {
          if(disk_pos==DISK_BUFFER_SIZE)
    6c48:	cmp.w	r6, #8192	; 0x2000
          {
            uint32_t nread=min(size-pos,(uint32_t)DISK_BUFFER_SIZE);
    6c4c:	rsb	r3, r7, sl
        uint32_t len = sizeof(MTPHeader);

        disk_pos=DISK_BUFFER_SIZE;
        while(pos<size)
        {
          if(disk_pos==DISK_BUFFER_SIZE)
    6c50:	bne.n	6c04 <MTPD::GetObject(unsigned long)+0x50>
          {
            uint32_t nread=min(size-pos,(uint32_t)DISK_BUFFER_SIZE);
    6c52:	mov	r1, r3
    6c54:	str	r3, [sp, #12]
            storage_->read(object_id,pos,(char *)disk_buffer,nread);
    6c56:	ldr	r3, [sp, #20]
    6c58:	mov	r2, r7
//#include <algorithm> // this isn't really needed, is it?  (slows down compiling)
#include <utility>
// https://forum.pjrc.com/threads/44596-Teensyduino-1-37-Beta-2-(Arduino-1-8-3-support)?p=145150&viewfull=1#post145150
template<class A, class B>
constexpr auto min(A&& a, B&& b) -> decltype(a < b ? std::forward<A>(a) : std::forward<B>(b)) {
  return a < b ? std::forward<A>(a) : std::forward<B>(b);
    6c5a:	cmp.w	r1, #8192	; 0x2000
    6c5e:	mov	ip, r1
    6c60:	ldr	r0, [r3, #0]
    6c62:	mov	r3, fp
    6c64:	it	cs
    6c66:	movcs.w	ip, #8192	; 0x2000
    6c6a:	ldr	r1, [sp, #16]
    6c6c:	ldr.w	lr, [r0]
    6c70:	str.w	ip, [sp]
    6c74:	ldr.w	r4, [lr, #48]	; 0x30
    6c78:	blx	r4
    6c7a:	mov	r3, r6
    6c7c:	movs	r6, #0
            disk_pos=0;
    6c7e:	str.w	r6, [r9]
    6c82:	b.n	6c0a <MTPD::GetObject(unsigned long)+0x56>

#elif defined(__IMXRT1062__)  

    int MTPD::push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    6c84:	movs	r2, #60	; 0x3c
    6c86:	mov.w	r1, #512	; 0x200
    6c8a:	mov	r0, r8
    6c8c:	bl	faf4 <usb_mtp_send>
    6c90:	cmp	r0, #0
    6c92:	ble.n	6c84 <MTPD::GetObject(unsigned long)+0xd0>
      { 
        uint32_t pos = 0; // into data
        uint32_t len = sizeof(MTPHeader);

        disk_pos=DISK_BUFFER_SIZE;
        while(pos<size)
    6c94:	cmp	sl, r7
          pos += to_copy;
          len += to_copy;

          if(len==MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            len=0;
    6c96:	mov.w	r5, #0
      { 
        uint32_t pos = 0; // into data
        uint32_t len = sizeof(MTPHeader);

        disk_pos=DISK_BUFFER_SIZE;
        while(pos<size)
    6c9a:	bhi.n	6c44 <MTPD::GetObject(unsigned long)+0x90>
    6c9c:	mov	r6, r8
          if(len==MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            len=0;
          }
        }
        if(len>0)
    6c9e:	cbz	r5, 6cb0 <MTPD::GetObject(unsigned long)+0xfc>

#elif defined(__IMXRT1062__)  

    int MTPD::push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    6ca0:	movs	r2, #60	; 0x3c
    6ca2:	mov.w	r1, #512	; 0x200
    6ca6:	mov	r0, r6
    6ca8:	bl	faf4 <usb_mtp_send>
    6cac:	cmp	r0, #0
    6cae:	ble.n	6ca0 <MTPD::GetObject(unsigned long)+0xec>
        if(len>0)
        { push_packet(tx_data_buffer,MTP_TX_SIZE);
          len=0;
        }
      }
    }
    6cb0:	add	sp, #28
    6cb2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    void MTPD::GetObject(uint32_t object_id) 
    {
      uint32_t size = storage_->GetSize(object_id);

      if (write_get_length_) {
        write_length_ += size;
    6cb6:	movw	r2, #9256	; 0x2428
    6cba:	ldr.w	r3, [fp, r2]
    6cbe:	add	r3, r0
    6cc0:	str.w	r3, [fp, r2]
        if(len>0)
        { push_packet(tx_data_buffer,MTP_TX_SIZE);
          len=0;
        }
      }
    }
    6cc4:	add	sp, #28
    6cc6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6cca:	add.w	r6, fp, #544	; 0x220
    6cce:	b.n	6ca0 <MTPD::GetObject(unsigned long)+0xec>

00006cd0 <MTPD::GetPartialObject(unsigned long, unsigned long, unsigned long)>:
    uint32_t MTPD::GetPartialObject(uint32_t object_id, uint32_t offset, uint32_t NumBytes) 
    {
    6cd0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6cd4:	mov	fp, r0
      uint32_t size = storage_->GetSize(object_id);
    6cd6:	ldr	r0, [r0, #0]
          len=0;
        }
      }
    }
    uint32_t MTPD::GetPartialObject(uint32_t object_id, uint32_t offset, uint32_t NumBytes) 
    {
    6cd8:	sub	sp, #28
    6cda:	mov	sl, r3
      uint32_t size = storage_->GetSize(object_id);
    6cdc:	ldr	r3, [r0, #0]
          len=0;
        }
      }
    }
    uint32_t MTPD::GetPartialObject(uint32_t object_id, uint32_t offset, uint32_t NumBytes) 
    {
    6cde:	mov	r7, r2
    6ce0:	str	r1, [sp, #12]
      uint32_t size = storage_->GetSize(object_id);
    6ce2:	ldr	r3, [r3, #40]	; 0x28
    6ce4:	blx	r3

      size -= offset;
    6ce6:	subs	r0, r0, r7
      if(NumBytes == 0xffffffff) NumBytes=size;
      if (NumBytes<size) size=NumBytes;
    6ce8:	cmp	r0, sl
    6cea:	bls.w	6dfe <MTPD::GetPartialObject(unsigned long, unsigned long, unsigned long)+0x12e>
    6cee:	cmp.w	sl, #4294967295
    6cf2:	beq.w	6dfe <MTPD::GetPartialObject(unsigned long, unsigned long, unsigned long)+0x12e>

      if (write_get_length_) {
    6cf6:	movw	r3, #9252	; 0x2424
    6cfa:	ldrb.w	r3, [fp, r3]
    6cfe:	cmp	r3, #0
    6d00:	bne.n	6de8 <MTPD::GetPartialObject(unsigned long, unsigned long, unsigned long)+0x118>
      } else 
      { 
        uint32_t pos = offset; // into data
        uint32_t len = sizeof(MTPHeader);

        disk_pos=DISK_BUFFER_SIZE;
    6d02:	movw	r1, #9248	; 0x2420
    6d06:	mov.w	r2, #8192	; 0x2000
        while(pos<size)
    6d0a:	cmp	sl, r7
      } else 
      { 
        uint32_t pos = offset; // into data
        uint32_t len = sizeof(MTPHeader);

        disk_pos=DISK_BUFFER_SIZE;
    6d0c:	str.w	r2, [fp, r1]
        while(pos<size)
    6d10:	bls.n	6e02 <MTPD::GetPartialObject(unsigned long, unsigned long, unsigned long)+0x132>
    6d12:	add.w	r6, fp, #544	; 0x220
    6d16:	movw	r9, #9248	; 0x2420
        {
          if(disk_pos==DISK_BUFFER_SIZE)
          {
            uint32_t nread=min(size-pos,(uint32_t)DISK_BUFFER_SIZE);
            storage_->read(object_id,pos,(char *)disk_buffer,nread);
            disk_pos=0;
    6d1a:	str	r3, [sp, #16]
    6d1c:	add.w	r3, fp, #1056	; 0x420
    6d20:	add	r9, fp
    6d22:	str.w	fp, [sp, #20]
    6d26:	mov	fp, r3
    6d28:	mov	r3, r6
      { 
        uint32_t pos = offset; // into data
        uint32_t len = sizeof(MTPHeader);

        disk_pos=DISK_BUFFER_SIZE;
        while(pos<size)
    6d2a:	movs	r5, #12
    6d2c:	mov	r6, r2
    6d2e:	mov	r8, r3
    6d30:	b.n	6d76 <MTPD::GetPartialObject(unsigned long, unsigned long, unsigned long)+0xa6>
    6d32:	str	r3, [sp, #8]
    6d34:	rsb	r3, r6, #8192	; 0x2000
    6d38:	ldr	r2, [sp, #8]
          }

          uint32_t to_copy = min(size-pos,MTP_TX_SIZE-len);
          to_copy = min (to_copy, DISK_BUFFER_SIZE-disk_pos);

          memcpy(tx_data_buffer+len,disk_buffer+disk_pos,to_copy);
    6d3a:	add.w	r0, r8, r5
    6d3e:	add.w	r1, fp, r6
    6d42:	cmp	r2, r3
    6d44:	it	cs
    6d46:	movcs	r2, r3
    6d48:	rsb	r3, r5, #512	; 0x200
    6d4c:	cmp	r2, r3
    6d4e:	mov	r4, r2
    6d50:	it	cs
    6d52:	movcs	r4, r3
    6d54:	mov	r2, r4
          disk_pos += to_copy;
          pos += to_copy;
          len += to_copy;
    6d56:	add	r5, r4
          }

          uint32_t to_copy = min(size-pos,MTP_TX_SIZE-len);
          to_copy = min (to_copy, DISK_BUFFER_SIZE-disk_pos);

          memcpy(tx_data_buffer+len,disk_buffer+disk_pos,to_copy);
    6d58:	bl	db14 <memcpy>
          disk_pos += to_copy;
    6d5c:	ldr.w	r3, [r9]
          pos += to_copy;
    6d60:	add	r7, r4
          len += to_copy;

          if(len==MTP_TX_SIZE)
    6d62:	cmp.w	r5, #512	; 0x200

          uint32_t to_copy = min(size-pos,MTP_TX_SIZE-len);
          to_copy = min (to_copy, DISK_BUFFER_SIZE-disk_pos);

          memcpy(tx_data_buffer+len,disk_buffer+disk_pos,to_copy);
          disk_pos += to_copy;
    6d66:	add	r4, r3
    6d68:	str.w	r4, [r9]
          pos += to_copy;
          len += to_copy;

          if(len==MTP_TX_SIZE)
    6d6c:	beq.n	6db4 <MTPD::GetPartialObject(unsigned long, unsigned long, unsigned long)+0xe4>
      { 
        uint32_t pos = offset; // into data
        uint32_t len = sizeof(MTPHeader);

        disk_pos=DISK_BUFFER_SIZE;
        while(pos<size)
    6d6e:	cmp	sl, r7
    6d70:	bls.n	6dcc <MTPD::GetPartialObject(unsigned long, unsigned long, unsigned long)+0xfc>
    6d72:	ldr.w	r6, [r9]
        {
          if(disk_pos==DISK_BUFFER_SIZE)
    6d76:	cmp.w	r6, #8192	; 0x2000
          {
            uint32_t nread=min(size-pos,(uint32_t)DISK_BUFFER_SIZE);
    6d7a:	rsb	r3, r7, sl
        uint32_t len = sizeof(MTPHeader);

        disk_pos=DISK_BUFFER_SIZE;
        while(pos<size)
        {
          if(disk_pos==DISK_BUFFER_SIZE)
    6d7e:	bne.n	6d32 <MTPD::GetPartialObject(unsigned long, unsigned long, unsigned long)+0x62>
          {
            uint32_t nread=min(size-pos,(uint32_t)DISK_BUFFER_SIZE);
    6d80:	mov	r1, r3
    6d82:	str	r3, [sp, #8]
            storage_->read(object_id,pos,(char *)disk_buffer,nread);
    6d84:	ldr	r3, [sp, #20]
    6d86:	mov	r2, r7
    6d88:	cmp.w	r1, #8192	; 0x2000
    6d8c:	mov	ip, r1
    6d8e:	ldr	r0, [r3, #0]
    6d90:	mov	r3, fp
    6d92:	it	cs
    6d94:	movcs.w	ip, #8192	; 0x2000
    6d98:	ldr	r1, [sp, #12]
    6d9a:	ldr.w	lr, [r0]
    6d9e:	str.w	ip, [sp]
    6da2:	ldr.w	r4, [lr, #48]	; 0x30
    6da6:	blx	r4
            disk_pos=0;
    6da8:	ldr	r2, [sp, #16]
    6daa:	mov	r3, r6
    6dac:	movs	r6, #0
    6dae:	str.w	r2, [r9]
    6db2:	b.n	6d38 <MTPD::GetPartialObject(unsigned long, unsigned long, unsigned long)+0x68>

#elif defined(__IMXRT1062__)  

    int MTPD::push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    6db4:	movs	r2, #60	; 0x3c
    6db6:	mov.w	r1, #512	; 0x200
    6dba:	mov	r0, r8
    6dbc:	bl	faf4 <usb_mtp_send>
    6dc0:	cmp	r0, #0
    6dc2:	ble.n	6db4 <MTPD::GetPartialObject(unsigned long, unsigned long, unsigned long)+0xe4>
      { 
        uint32_t pos = offset; // into data
        uint32_t len = sizeof(MTPHeader);

        disk_pos=DISK_BUFFER_SIZE;
        while(pos<size)
    6dc4:	cmp	sl, r7
          pos += to_copy;
          len += to_copy;

          if(len==MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            len=0;
    6dc6:	mov.w	r5, #0
      { 
        uint32_t pos = offset; // into data
        uint32_t len = sizeof(MTPHeader);

        disk_pos=DISK_BUFFER_SIZE;
        while(pos<size)
    6dca:	bhi.n	6d72 <MTPD::GetPartialObject(unsigned long, unsigned long, unsigned long)+0xa2>
    6dcc:	mov	r6, r8
          if(len==MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            len=0;
          }
        }
        if(len>0)
    6dce:	cbz	r5, 6de0 <MTPD::GetPartialObject(unsigned long, unsigned long, unsigned long)+0x110>

#elif defined(__IMXRT1062__)  

    int MTPD::push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    6dd0:	movs	r2, #60	; 0x3c
    6dd2:	mov.w	r1, #512	; 0x200
    6dd6:	mov	r0, r6
    6dd8:	bl	faf4 <usb_mtp_send>
    6ddc:	cmp	r0, #0
    6dde:	ble.n	6dd0 <MTPD::GetPartialObject(unsigned long, unsigned long, unsigned long)+0x100>
        { push_packet(tx_data_buffer,MTP_TX_SIZE);
          len=0;
        }
      }
      return size;
    }
    6de0:	mov	r0, sl
    6de2:	add	sp, #28
    6de4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      size -= offset;
      if(NumBytes == 0xffffffff) NumBytes=size;
      if (NumBytes<size) size=NumBytes;

      if (write_get_length_) {
        write_length_ += size;
    6de8:	movw	r2, #9256	; 0x2428
        { push_packet(tx_data_buffer,MTP_TX_SIZE);
          len=0;
        }
      }
      return size;
    }
    6dec:	mov	r0, sl
      size -= offset;
      if(NumBytes == 0xffffffff) NumBytes=size;
      if (NumBytes<size) size=NumBytes;

      if (write_get_length_) {
        write_length_ += size;
    6dee:	ldr.w	r3, [fp, r2]
    6df2:	add	r3, sl
    6df4:	str.w	r3, [fp, r2]
        { push_packet(tx_data_buffer,MTP_TX_SIZE);
          len=0;
        }
      }
      return size;
    }
    6df8:	add	sp, #28
    6dfa:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    }
    uint32_t MTPD::GetPartialObject(uint32_t object_id, uint32_t offset, uint32_t NumBytes) 
    {
      uint32_t size = storage_->GetSize(object_id);

      size -= offset;
    6dfe:	mov	sl, r0
    6e00:	b.n	6cf6 <MTPD::GetPartialObject(unsigned long, unsigned long, unsigned long)+0x26>
    6e02:	add.w	r6, fp, #544	; 0x220
    6e06:	b.n	6dd0 <MTPD::GetPartialObject(unsigned long, unsigned long, unsigned long)+0x100>

00006e08 <MTPD::read(char*, unsigned long)>:
    printf("\r\n"); \
    }


    void MTPD::read(char* data, uint32_t size) 
    {
    6e08:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      static int index=0;
      if(!size) 
    6e0c:	cbz	r2, 6e6a <MTPD::read(char*, unsigned long)+0x62>
    6e0e:	ldr.w	fp, [pc, #100]	; 6e74 <MTPD::read(char*, unsigned long)+0x6c>
    6e12:	mov	r8, r0
    6e14:	mov	r6, r1
    6e16:	mov	r5, r2

      while (size) {
        uint32_t to_copy = MTP_RX_SIZE - index;
        to_copy = min(to_copy, size);
        if (data) {
          memcpy(data, rx_data_buffer + index, to_copy);
    6e18:	add.w	r7, r0, #32
          data += to_copy;
        }
        size -= to_copy;
        index += to_copy;
    6e1c:	mov	r9, fp
        index=0;
        return;
      }

      while (size) {
        uint32_t to_copy = MTP_RX_SIZE - index;
    6e1e:	ldr.w	sl, [fp]
        to_copy = min(to_copy, size);
        if (data) {
          memcpy(data, rx_data_buffer + index, to_copy);
    6e22:	mov	r0, r6
        index=0;
        return;
      }

      while (size) {
        uint32_t to_copy = MTP_RX_SIZE - index;
    6e24:	rsb	r4, sl, #512	; 0x200
        to_copy = min(to_copy, size);
        if (data) {
          memcpy(data, rx_data_buffer + index, to_copy);
    6e28:	add.w	r1, r7, sl
    6e2c:	cmp	r4, r5
    6e2e:	it	cs
    6e30:	movcs	r4, r5
      }

      while (size) {
        uint32_t to_copy = MTP_RX_SIZE - index;
        to_copy = min(to_copy, size);
        if (data) {
    6e32:	cbz	r6, 6e3c <MTPD::read(char*, unsigned long)+0x34>
          memcpy(data, rx_data_buffer + index, to_copy);
    6e34:	mov	r2, r4
          data += to_copy;
    6e36:	add	r6, r4

      while (size) {
        uint32_t to_copy = MTP_RX_SIZE - index;
        to_copy = min(to_copy, size);
        if (data) {
          memcpy(data, rx_data_buffer + index, to_copy);
    6e38:	bl	db14 <memcpy>
          data += to_copy;
        }
        size -= to_copy;
        index += to_copy;
    6e3c:	add.w	r3, r4, sl
        to_copy = min(to_copy, size);
        if (data) {
          memcpy(data, rx_data_buffer + index, to_copy);
          data += to_copy;
        }
        size -= to_copy;
    6e40:	subs	r4, r5, r4
        index += to_copy;
        if (index == MTP_RX_SIZE) {
    6e42:	cmp.w	r3, #512	; 0x200
        if (data) {
          memcpy(data, rx_data_buffer + index, to_copy);
          data += to_copy;
        }
        size -= to_copy;
        index += to_copy;
    6e46:	str.w	r3, [fp]
      {
        index=0;
        return;
      }

      while (size) {
    6e4a:	mov	r5, r4
          memcpy(data, rx_data_buffer + index, to_copy);
          data += to_copy;
        }
        size -= to_copy;
        index += to_copy;
        if (index == MTP_RX_SIZE) {
    6e4c:	beq.n	6e56 <MTPD::read(char*, unsigned long)+0x4e>
      {
        index=0;
        return;
      }

      while (size) {
    6e4e:	cmp	r4, #0
    6e50:	bne.n	6e1e <MTPD::read(char*, unsigned long)+0x16>
    6e52:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
          data += to_copy;
        }
        size -= to_copy;
        index += to_copy;
        if (index == MTP_RX_SIZE) {
          pull_packet(rx_data_buffer);
    6e56:	mov	r1, r7
    6e58:	mov	r0, r8
    6e5a:	bl	6b9c <MTPD::pull_packet(unsigned char*)>
          index=0;
    6e5e:	movs	r3, #0
    6e60:	str.w	r3, [r9]
      {
        index=0;
        return;
      }

      while (size) {
    6e64:	cmp	r4, #0
    6e66:	bne.n	6e1e <MTPD::read(char*, unsigned long)+0x16>
    6e68:	b.n	6e52 <MTPD::read(char*, unsigned long)+0x4a>
    void MTPD::read(char* data, uint32_t size) 
    {
      static int index=0;
      if(!size) 
      {
        index=0;
    6e6a:	ldr	r3, [pc, #8]	; (6e74 <MTPD::read(char*, unsigned long)+0x6c>)
    6e6c:	str	r2, [r3, #0]
        return;
    6e6e:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6e72:	nop
    6e74:	.word	0x20043f40

00006e78 <MTPD::readstring(char*)>:

  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
  uint32_t MTPD::read32() { uint32_t ret; read((char*)&ret, sizeof(ret)); return ret; }

  void MTPD::readstring(char* buffer) {
    6e78:	push	{r4, r5, r6, lr}
    6e7a:	sub	sp, #8
    6e7c:	mov	r4, r1
      return header.len - 12;
    else
      return 0;
  }

  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
    6e7e:	movs	r2, #1
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
  uint32_t MTPD::read32() { uint32_t ret; read((char*)&ret, sizeof(ret)); return ret; }

  void MTPD::readstring(char* buffer) {
    6e80:	mov	r6, r0
      return header.len - 12;
    else
      return 0;
  }

  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
    6e82:	add.w	r1, sp, #6
    6e86:	bl	6e08 <MTPD::read(char*, unsigned long)>
    6e8a:	ldrb.w	r2, [sp, #6]
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
  uint32_t MTPD::read32() { uint32_t ret; read((char*)&ret, sizeof(ret)); return ret; }

  void MTPD::readstring(char* buffer) {
    int len = read8();
    if (!buffer) {
    6e8e:	cbz	r4, 6eb0 <MTPD::readstring(char*)+0x38>
      read(NULL, len * 2);
    } else {
      for (int i = 0; i < len; i++) {
    6e90:	cbz	r2, 6eac <MTPD::readstring(char*)+0x34>
    6e92:	adds	r5, r4, r2
    else
      return 0;
  }

  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    6e94:	movs	r2, #2
    6e96:	add.w	r1, sp, #6
    6e9a:	mov	r0, r6
    6e9c:	bl	6e08 <MTPD::read(char*, unsigned long)>
    6ea0:	ldrh.w	r3, [sp, #6]
    if (!buffer) {
      read(NULL, len * 2);
    } else {
      for (int i = 0; i < len; i++) {
        int16_t c2;
        *(buffer++) = c2 = read16();
    6ea4:	strb.w	r3, [r4], #1
  void MTPD::readstring(char* buffer) {
    int len = read8();
    if (!buffer) {
      read(NULL, len * 2);
    } else {
      for (int i = 0; i < len; i++) {
    6ea8:	cmp	r5, r4
    6eaa:	bne.n	6e94 <MTPD::readstring(char*)+0x1c>
        int16_t c2;
        *(buffer++) = c2 = read16();
      }
    }
  }
    6eac:	add	sp, #8
    6eae:	pop	{r4, r5, r6, pc}
  uint32_t MTPD::read32() { uint32_t ret; read((char*)&ret, sizeof(ret)); return ret; }

  void MTPD::readstring(char* buffer) {
    int len = read8();
    if (!buffer) {
      read(NULL, len * 2);
    6eb0:	lsls	r2, r2, #1
    6eb2:	mov	r1, r4
    6eb4:	mov	r0, r6
    6eb6:	bl	6e08 <MTPD::read(char*, unsigned long)>
    6eba:	b.n	6eac <MTPD::readstring(char*)+0x34>

00006ebc <MTPD::setObjectPropValue(unsigned long, unsigned long) [clone .part.6]>:
      }
      storage_->close();
      return true;
    }

    uint32_t MTPD::setObjectPropValue(uint32_t handle, uint32_t p2)
    6ebc:	push	{r4, r5, lr}
    6ebe:	sub	sp, #260	; 0x104
    6ec0:	mov	r4, r0
    6ec2:	mov	r5, r1
  }

  uint32_t MTPD::ReadMTPHeader() 
  {
    MTPHeader header;
    read((char *)&header, sizeof(MTPHeader));
    6ec4:	movs	r2, #12
    6ec6:	mov	r1, sp
    6ec8:	bl	6e08 <MTPD::read(char*, unsigned long)>
         
      if(p2==0xDC07)
      { 
        char filename[MAX_FILENAME_LEN]; 
        ReadMTPHeader();
        readstring(filename);
    6ecc:	mov	r1, sp
    6ece:	mov	r0, r4
    6ed0:	bl	6e78 <MTPD::readstring(char*)>
        if(storage_->rename(handle,filename)) return 0x2001; else return 0x2005;
    6ed4:	ldr	r0, [r4, #0]
    6ed6:	mov	r2, sp
    6ed8:	mov	r1, r5
    6eda:	ldr	r3, [r0, #0]
    6edc:	ldr	r3, [r3, #72]	; 0x48
    6ede:	blx	r3
    6ee0:	movw	r2, #8193	; 0x2001
    6ee4:	movw	r3, #8197	; 0x2005
      }
      else
        return 0x2005;
    }
    6ee8:	cmp	r0, #0
    6eea:	ite	ne
    6eec:	movne	r0, r2
    6eee:	moveq	r0, r3
    6ef0:	add	sp, #260	; 0x104
    6ef2:	pop	{r4, r5, pc}

00006ef4 <MTPD::SendObjectInfo(unsigned long, unsigned long)>:
          index=0;
        }
      }
    }

    uint32_t MTPD::SendObjectInfo(uint32_t storage, uint32_t parent) {
    6ef4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6ef8:	mov	r9, r1
    6efa:	sub	sp, #284	; 0x11c
    6efc:	mov	r4, r0
      pull_packet(rx_data_buffer);
    6efe:	add.w	r1, r0, #32
      read(0,0); // resync read
//      printContainer(); 
      uint32_t store = Storage2Store(storage);
    6f02:	add.w	r3, r9, #4294967295
  }

  uint32_t MTPD::ReadMTPHeader() 
  {
    MTPHeader header;
    read((char *)&header, sizeof(MTPHeader));
    6f06:	add	r6, sp, #24
          index=0;
        }
      }
    }

    uint32_t MTPD::SendObjectInfo(uint32_t storage, uint32_t parent) {
    6f08:	mov	fp, r2
    void MTPD::read(char* data, uint32_t size) 
    {
      static int index=0;
      if(!size) 
      {
        index=0;
    6f0a:	movs	r5, #0

    uint32_t MTPD::SendObjectInfo(uint32_t storage, uint32_t parent) {
      pull_packet(rx_data_buffer);
      read(0,0); // resync read
//      printContainer(); 
      uint32_t store = Storage2Store(storage);
    6f0c:	str	r3, [sp, #12]
        }
      }
    }

    uint32_t MTPD::SendObjectInfo(uint32_t storage, uint32_t parent) {
      pull_packet(rx_data_buffer);
    6f0e:	bl	6b9c <MTPD::pull_packet(unsigned char*)>
    void MTPD::read(char* data, uint32_t size) 
    {
      static int index=0;
      if(!size) 
      {
        index=0;
    6f12:	ldr	r3, [pc, #308]	; (7048 <MTPD::SendObjectInfo(unsigned long, unsigned long)+0x154>)
  }

  uint32_t MTPD::ReadMTPHeader() 
  {
    MTPHeader header;
    read((char *)&header, sizeof(MTPHeader));
    6f14:	mov	r0, r4
    6f16:	mov	r1, r6
    6f18:	movs	r2, #12
    void MTPD::read(char* data, uint32_t size) 
    {
      static int index=0;
      if(!size) 
      {
        index=0;
    6f1a:	str	r5, [r3, #0]
  }

  uint32_t MTPD::ReadMTPHeader() 
  {
    MTPHeader header;
    read((char *)&header, sizeof(MTPHeader));
    6f1c:	bl	6e08 <MTPD::read(char*, unsigned long)>
    // check that the type is data
    if(header.type==2)
    6f20:	ldrh	r3, [r6, #4]
    6f22:	cmp	r3, #2
    6f24:	beq.w	7040 <MTPD::SendObjectInfo(unsigned long, unsigned long)+0x14c>
    6f28:	mvn.w	r5, #51	; 0x33
      return 0;
  }

  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
  uint32_t MTPD::read32() { uint32_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    6f2c:	movs	r2, #4
    6f2e:	mov	r1, r6
    6f30:	mov	r0, r4
    6f32:	bl	6e08 <MTPD::read(char*, unsigned long)>
    else
      return 0;
  }

  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    6f36:	movs	r2, #2
    6f38:	mov	r1, r6
    6f3a:	mov	r0, r4
    6f3c:	bl	6e08 <MTPD::read(char*, unsigned long)>

      int len=ReadMTPHeader();
      char filename[MAX_FILENAME_LEN];

      read32(); len -=4; // storage
      bool dir = (read16() == 0x3001); len -=2; // format
    6f40:	movw	r3, #12289	; 0x3001
    else
      return 0;
  }

  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    6f44:	ldrh.w	sl, [r6]
    6f48:	movs	r2, #2
    6f4a:	mov	r1, r6
    6f4c:	mov	r0, r4

      int len=ReadMTPHeader();
      char filename[MAX_FILENAME_LEN];

      read32(); len -=4; // storage
      bool dir = (read16() == 0x3001); len -=2; // format
    6f4e:	rsb	sl, r3, sl
    else
      return 0;
  }

  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    6f52:	bl	6e08 <MTPD::read(char*, unsigned long)>
  uint32_t MTPD::read32() { uint32_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    6f56:	movs	r2, #4
    6f58:	mov	r1, r6
    6f5a:	mov	r0, r4

      int len=ReadMTPHeader();
      char filename[MAX_FILENAME_LEN];

      read32(); len -=4; // storage
      bool dir = (read16() == 0x3001); len -=2; // format
    6f5c:	clz	sl, sl
      return 0;
  }

  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
  uint32_t MTPD::read32() { uint32_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    6f60:	bl	6e08 <MTPD::read(char*, unsigned long)>
    else
      return 0;
  }

  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    6f64:	movs	r2, #2
    6f66:	mov	r1, r6
    6f68:	mov	r0, r4
    6f6a:	bl	6e08 <MTPD::read(char*, unsigned long)>
  uint32_t MTPD::read32() { uint32_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    6f6e:	movs	r2, #4
    6f70:	mov	r1, r6
    6f72:	mov	r0, r4
    6f74:	bl	6e08 <MTPD::read(char*, unsigned long)>
    6f78:	movs	r2, #4
    6f7a:	mov	r1, r6
    6f7c:	mov	r0, r4
    6f7e:	bl	6e08 <MTPD::read(char*, unsigned long)>
    6f82:	movs	r2, #4
    6f84:	mov	r1, r6
    6f86:	mov	r0, r4
    6f88:	bl	6e08 <MTPD::read(char*, unsigned long)>
    6f8c:	movs	r2, #4
    6f8e:	mov	r1, r6
    6f90:	mov	r0, r4
    6f92:	bl	6e08 <MTPD::read(char*, unsigned long)>
    6f96:	movs	r2, #4
    6f98:	mov	r1, r6
    6f9a:	mov	r0, r4
    6f9c:	bl	6e08 <MTPD::read(char*, unsigned long)>
    6fa0:	movs	r2, #4
    6fa2:	mov	r1, r6
    6fa4:	mov	r0, r4
    6fa6:	bl	6e08 <MTPD::read(char*, unsigned long)>
    6faa:	movs	r2, #4
    6fac:	mov	r1, r6
    6fae:	mov	r0, r4
    6fb0:	bl	6e08 <MTPD::read(char*, unsigned long)>
    else
      return 0;
  }

  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    6fb4:	movs	r2, #2
    6fb6:	mov	r1, r6
    6fb8:	mov	r0, r4
    6fba:	bl	6e08 <MTPD::read(char*, unsigned long)>
  uint32_t MTPD::read32() { uint32_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    6fbe:	movs	r2, #4
    6fc0:	mov	r1, r6
    6fc2:	mov	r0, r4
    6fc4:	bl	6e08 <MTPD::read(char*, unsigned long)>
    6fc8:	movs	r2, #4
    6fca:	mov	r1, r6
    6fcc:	mov	r0, r4
    6fce:	bl	6e08 <MTPD::read(char*, unsigned long)>
      read32(); len -=4; // bit depth
      read32(); len -=4; // parent
      read16(); len -=2; // association type
      read32(); len -=4; // association description
      read32(); len -=4; // sequence number
      readstring(filename); len -= (2*(strlen(filename)+1)+1); 
    6fd2:	mov	r1, r6
    6fd4:	mov	r0, r4

      int len=ReadMTPHeader();
      char filename[MAX_FILENAME_LEN];

      read32(); len -=4; // storage
      bool dir = (read16() == 0x3001); len -=2; // format
    6fd6:	mov.w	sl, sl, lsr #5
      read32(); len -=4; // bit depth
      read32(); len -=4; // parent
      read16(); len -=2; // association type
      read32(); len -=4; // association description
      read32(); len -=4; // sequence number
      readstring(filename); len -= (2*(strlen(filename)+1)+1); 
    6fda:	bl	6e78 <MTPD::readstring(char*)>
    6fde:	mov	r0, r6
    6fe0:	bl	11240 <strlen>
    6fe4:	adds	r0, #1
    6fe6:	sub.w	r8, r5, r0, lsl #1
    6fea:	add.w	r5, r8, #4294967295
      // ignore rest of ObjectInfo
      while(len>=4) { read32(); len-=4;}
    6fee:	cmp	r5, #3
    6ff0:	ble.n	7018 <MTPD::SendObjectInfo(unsigned long, unsigned long)+0x124>
    6ff2:	mov	r9, r5
    6ff4:	add	r7, sp, #20
    6ff6:	sub.w	r9, r9, #4
      return 0;
  }

  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
  uint32_t MTPD::read32() { uint32_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    6ffa:	movs	r2, #4
    6ffc:	mov	r1, r7
    6ffe:	mov	r0, r4
    7000:	bl	6e08 <MTPD::read(char*, unsigned long)>
      read16(); len -=2; // association type
      read32(); len -=4; // association description
      read32(); len -=4; // sequence number
      readstring(filename); len -= (2*(strlen(filename)+1)+1); 
      // ignore rest of ObjectInfo
      while(len>=4) { read32(); len-=4;}
    7004:	cmp.w	r9, #3
    7008:	bgt.n	6ff6 <MTPD::SendObjectInfo(unsigned long, unsigned long)+0x102>
    700a:	sub.w	r8, r8, #5
    700e:	subs	r5, #4
    7010:	bic.w	r8, r8, #3
    7014:	rsb	r5, r8, r5
      while(len) {read8(); len--;}
    7018:	cbz	r5, 702a <MTPD::SendObjectInfo(unsigned long, unsigned long)+0x136>
    701a:	add	r7, sp, #20
      return header.len - 12;
    else
      return 0;
  }

  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
    701c:	movs	r2, #1
    701e:	mov	r1, r7
    7020:	mov	r0, r4
    7022:	bl	6e08 <MTPD::read(char*, unsigned long)>
      read32(); len -=4; // association description
      read32(); len -=4; // sequence number
      readstring(filename); len -= (2*(strlen(filename)+1)+1); 
      // ignore rest of ObjectInfo
      while(len>=4) { read32(); len-=4;}
      while(len) {read8(); len--;}
    7026:	subs	r5, #1
    7028:	bne.n	701c <MTPD::SendObjectInfo(unsigned long, unsigned long)+0x128>

      return storage_->Create(store, parent, dir, filename);
    702a:	ldr	r0, [r4, #0]
    702c:	mov	r3, sl
    702e:	mov	r2, fp
    7030:	ldr	r1, [sp, #12]
    7032:	ldr	r4, [r0, #0]
    7034:	str	r6, [sp, #0]
    7036:	ldr	r4, [r4, #44]	; 0x2c
    7038:	blx	r4
    }
    703a:	add	sp, #284	; 0x11c
    703c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7040:	ldr	r5, [r6, #0]
    7042:	subs	r5, #64	; 0x40
    7044:	b.n	6f2c <MTPD::SendObjectInfo(unsigned long, unsigned long)+0x38>
    7046:	nop
    7048:	.word	0x20043f40

0000704c <MTPD::SendObject()>:

    bool MTPD::SendObject() 
    { 
    704c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      pull_packet(rx_data_buffer);
    7050:	add.w	sl, r0, #32

      return storage_->Create(store, parent, dir, filename);
    }

    bool MTPD::SendObject() 
    { 
    7054:	sub	sp, #20
    7056:	mov	r9, r0
    void MTPD::read(char* data, uint32_t size) 
    {
      static int index=0;
      if(!size) 
      {
        index=0;
    7058:	movs	r4, #0
      return storage_->Create(store, parent, dir, filename);
    }

    bool MTPD::SendObject() 
    { 
      pull_packet(rx_data_buffer);
    705a:	mov	r1, sl
    705c:	bl	6b9c <MTPD::pull_packet(unsigned char*)>
    void MTPD::read(char* data, uint32_t size) 
    {
      static int index=0;
      if(!size) 
      {
        index=0;
    7060:	ldr	r3, [pc, #248]	; (715c <MTPD::SendObject()+0x110>)
  }

  uint32_t MTPD::ReadMTPHeader() 
  {
    MTPHeader header;
    read((char *)&header, sizeof(MTPHeader));
    7062:	mov	r0, r9
    7064:	movs	r2, #12
    7066:	add	r1, sp, #4
    void MTPD::read(char* data, uint32_t size) 
    {
      static int index=0;
      if(!size) 
      {
        index=0;
    7068:	str	r4, [r3, #0]
  }

  uint32_t MTPD::ReadMTPHeader() 
  {
    MTPHeader header;
    read((char *)&header, sizeof(MTPHeader));
    706a:	bl	6e08 <MTPD::read(char*, unsigned long)>
    // check that the type is data
    if(header.type==2)
    706e:	ldrh.w	r3, [sp, #8]
    7072:	cmp	r3, #2
    7074:	beq.n	7090 <MTPD::SendObject()+0x44>
      read(0,0);
//      printContainer(); 

      uint32_t len = ReadMTPHeader();
      uint32_t index = sizeof(MTPHeader);
      disk_pos=0;
    7076:	movw	r3, #9248	; 0x2420
    707a:	str.w	r4, [r9, r3]
      //printf("len %d\n",disk_pos);
      if(disk_pos)
      {
        if(storage_->write((const char *)disk_buffer, disk_pos)<disk_pos) return false;
      }
      storage_->close();
    707e:	ldr.w	r0, [r9]
    7082:	ldr	r3, [r0, #0]
    7084:	ldr	r3, [r3, #56]	; 0x38
    7086:	blx	r3
      return true;
    7088:	movs	r0, #1
    }
    708a:	add	sp, #20
    708c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  {
    MTPHeader header;
    read((char *)&header, sizeof(MTPHeader));
    // check that the type is data
    if(header.type==2)
      return header.len - 12;
    7090:	ldr	r7, [sp, #4]
      read(0,0);
//      printContainer(); 

      uint32_t len = ReadMTPHeader();
      uint32_t index = sizeof(MTPHeader);
      disk_pos=0;
    7092:	movw	r3, #9248	; 0x2420
  {
    MTPHeader header;
    read((char *)&header, sizeof(MTPHeader));
    // check that the type is data
    if(header.type==2)
      return header.len - 12;
    7096:	subs	r7, #12
      read(0,0);
//      printContainer(); 

      uint32_t len = ReadMTPHeader();
      uint32_t index = sizeof(MTPHeader);
      disk_pos=0;
    7098:	str.w	r4, [r9, r3]
      
      while((int)len>0)
    709c:	cmp	r7, r4
    709e:	ble.n	707e <MTPD::SendObject()+0x32>
    70a0:	movw	r8, #9248	; 0x2420
    70a4:	mov	r0, r4
    70a6:	add.w	fp, r9, #1056	; 0x420
    70aa:	movs	r5, #12
    70ac:	add	r8, r9
      { uint32_t bytes = MTP_RX_SIZE - index;                     // how many data in usb-packet
    70ae:	rsb	r4, r5, #512	; 0x200
    70b2:	rsb	r6, r0, #8192	; 0x2000
        bytes = min(bytes,len);                                   // loimit at end
        uint32_t to_copy=min(bytes, DISK_BUFFER_SIZE-disk_pos);   // how many data to copy to disk buffer
        memcpy(disk_buffer+disk_pos, rx_data_buffer + index,to_copy);
    70b6:	add.w	r1, sl, r5
    70ba:	add	r0, fp
    70bc:	cmp	r4, r7
    70be:	it	cs
    70c0:	movcs	r4, r7
    70c2:	cmp	r6, r4
    70c4:	it	cs
    70c6:	movcs	r6, r4
    70c8:	mov	r2, r6
        disk_pos += to_copy;
        bytes -= to_copy;
        len -= to_copy;
    70ca:	subs	r7, r7, r6
      
      while((int)len>0)
      { uint32_t bytes = MTP_RX_SIZE - index;                     // how many data in usb-packet
        bytes = min(bytes,len);                                   // loimit at end
        uint32_t to_copy=min(bytes, DISK_BUFFER_SIZE-disk_pos);   // how many data to copy to disk buffer
        memcpy(disk_buffer+disk_pos, rx_data_buffer + index,to_copy);
    70cc:	bl	db14 <memcpy>
        disk_pos += to_copy;
    70d0:	ldr.w	r2, [r8]
    70d4:	add	r2, r6
        bytes -= to_copy;
        len -= to_copy;
        //printf("a %d %d %d %d %d\n", len,disk_pos,bytes,index,to_copy);
        //
        if(disk_pos==DISK_BUFFER_SIZE)
    70d6:	cmp.w	r2, #8192	; 0x2000
      while((int)len>0)
      { uint32_t bytes = MTP_RX_SIZE - index;                     // how many data in usb-packet
        bytes = min(bytes,len);                                   // loimit at end
        uint32_t to_copy=min(bytes, DISK_BUFFER_SIZE-disk_pos);   // how many data to copy to disk buffer
        memcpy(disk_buffer+disk_pos, rx_data_buffer + index,to_copy);
        disk_pos += to_copy;
    70da:	str.w	r2, [r8]
        bytes -= to_copy;
        len -= to_copy;
        //printf("a %d %d %d %d %d\n", len,disk_pos,bytes,index,to_copy);
        //
        if(disk_pos==DISK_BUFFER_SIZE)
    70de:	beq.n	710e <MTPD::SendObject()+0xc2>
            disk_pos += bytes;
            len -= bytes;
          }
          //printf("b %d %d %d %d %d\n", len,disk_pos,bytes,index,to_copy);
        }
        if(len>0)  // we have still data to be transfered
    70e0:	cbnz	r7, 7146 <MTPD::SendObject()+0xfa>
    70e2:	movw	r3, #9248	; 0x2420
    70e6:	ldr.w	r2, [r9, r3]
        { pull_packet(rx_data_buffer);
          index=0;
        }
      }
      //printf("len %d\n",disk_pos);
      if(disk_pos)
    70ea:	cmp	r2, #0
    70ec:	beq.n	707e <MTPD::SendObject()+0x32>
      {
        if(storage_->write((const char *)disk_buffer, disk_pos)<disk_pos) return false;
    70ee:	ldr.w	r0, [r9]
    70f2:	mov	r1, fp
    70f4:	ldr	r3, [r0, #0]
    70f6:	ldr	r3, [r3, #52]	; 0x34
    70f8:	blx	r3
    70fa:	movw	r3, #9248	; 0x2420
    70fe:	ldr.w	r3, [r9, r3]
    7102:	cmp	r0, r3
    7104:	bcs.n	707e <MTPD::SendObject()+0x32>
        len -= to_copy;
        //printf("a %d %d %d %d %d\n", len,disk_pos,bytes,index,to_copy);
        //
        if(disk_pos==DISK_BUFFER_SIZE)
        {
          if(storage_->write((const char *)disk_buffer, DISK_BUFFER_SIZE)<DISK_BUFFER_SIZE) return false;
    7106:	movs	r0, #0
      {
        if(storage_->write((const char *)disk_buffer, disk_pos)<disk_pos) return false;
      }
      storage_->close();
      return true;
    }
    7108:	add	sp, #20
    710a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        len -= to_copy;
        //printf("a %d %d %d %d %d\n", len,disk_pos,bytes,index,to_copy);
        //
        if(disk_pos==DISK_BUFFER_SIZE)
        {
          if(storage_->write((const char *)disk_buffer, DISK_BUFFER_SIZE)<DISK_BUFFER_SIZE) return false;
    710e:	ldr.w	r0, [r9]
    7112:	mov	r1, fp
    7114:	ldr	r3, [r0, #0]
    7116:	ldr	r3, [r3, #52]	; 0x34
    7118:	blx	r3
    711a:	cmp.w	r0, #8192	; 0x2000
    711e:	bcc.n	7106 <MTPD::SendObject()+0xba>
          disk_pos =0;
    7120:	movs	r3, #0

          if(bytes) // we have still data in transfer buffer, copy to initial disk_buffer
    7122:	subs	r4, r4, r6
        //printf("a %d %d %d %d %d\n", len,disk_pos,bytes,index,to_copy);
        //
        if(disk_pos==DISK_BUFFER_SIZE)
        {
          if(storage_->write((const char *)disk_buffer, DISK_BUFFER_SIZE)<DISK_BUFFER_SIZE) return false;
          disk_pos =0;
    7124:	str.w	r3, [r8]

          if(bytes) // we have still data in transfer buffer, copy to initial disk_buffer
    7128:	beq.n	70e0 <MTPD::SendObject()+0x94>
          {
            memcpy(disk_buffer,rx_data_buffer+index+to_copy,bytes);
    712a:	adds	r1, r6, r5
    712c:	mov	r2, r4
    712e:	mov	r0, fp
            disk_pos += bytes;
            len -= bytes;
    7130:	subs	r7, r7, r4
          if(storage_->write((const char *)disk_buffer, DISK_BUFFER_SIZE)<DISK_BUFFER_SIZE) return false;
          disk_pos =0;

          if(bytes) // we have still data in transfer buffer, copy to initial disk_buffer
          {
            memcpy(disk_buffer,rx_data_buffer+index+to_copy,bytes);
    7132:	add	r1, sl
    7134:	bl	db14 <memcpy>
            disk_pos += bytes;
    7138:	ldr.w	r3, [r8]
    713c:	add	r4, r3
    713e:	str.w	r4, [r8]
            len -= bytes;
          }
          //printf("b %d %d %d %d %d\n", len,disk_pos,bytes,index,to_copy);
        }
        if(len>0)  // we have still data to be transfered
    7142:	cmp	r7, #0
    7144:	beq.n	70e2 <MTPD::SendObject()+0x96>
        { pull_packet(rx_data_buffer);
    7146:	mov	r1, sl
    7148:	mov	r0, r9
    714a:	bl	6b9c <MTPD::pull_packet(unsigned char*)>

      uint32_t len = ReadMTPHeader();
      uint32_t index = sizeof(MTPHeader);
      disk_pos=0;
      
      while((int)len>0)
    714e:	cmp	r7, #0
          }
          //printf("b %d %d %d %d %d\n", len,disk_pos,bytes,index,to_copy);
        }
        if(len>0)  // we have still data to be transfered
        { pull_packet(rx_data_buffer);
          index=0;
    7150:	mov.w	r5, #0

      uint32_t len = ReadMTPHeader();
      uint32_t index = sizeof(MTPHeader);
      disk_pos=0;
      
      while((int)len>0)
    7154:	ble.n	70e2 <MTPD::SendObject()+0x96>
    7156:	ldr.w	r0, [r8]
    715a:	b.n	70ae <MTPD::SendObject()+0x62>
    715c:	.word	0x20043f40

00007160 <MTPD::setObjectPropValue(unsigned long, unsigned long)>:
      storage_->close();
      return true;
    }

    uint32_t MTPD::setObjectPropValue(uint32_t handle, uint32_t p2)
    { pull_packet(rx_data_buffer);
    7160:	push	{r4, r5, r6, lr}
    7162:	mov	r6, r1
    7164:	add.w	r1, r0, #32
    7168:	mov	r5, r2
    716a:	mov	r4, r0
    716c:	bl	6b9c <MTPD::pull_packet(unsigned char*)>
      read(0,0);
      //printContainer(); 
         
      if(p2==0xDC07)
    7170:	movw	r3, #56327	; 0xdc07
    void MTPD::read(char* data, uint32_t size) 
    {
      static int index=0;
      if(!size) 
      {
        index=0;
    7174:	ldr	r2, [pc, #24]	; (7190 <MTPD::setObjectPropValue(unsigned long, unsigned long)+0x30>)
    7176:	movs	r1, #0
    uint32_t MTPD::setObjectPropValue(uint32_t handle, uint32_t p2)
    { pull_packet(rx_data_buffer);
      read(0,0);
      //printContainer(); 
         
      if(p2==0xDC07)
    7178:	cmp	r5, r3
    void MTPD::read(char* data, uint32_t size) 
    {
      static int index=0;
      if(!size) 
      {
        index=0;
    717a:	str	r1, [r2, #0]
    uint32_t MTPD::setObjectPropValue(uint32_t handle, uint32_t p2)
    { pull_packet(rx_data_buffer);
      read(0,0);
      //printContainer(); 
         
      if(p2==0xDC07)
    717c:	beq.n	7184 <MTPD::setObjectPropValue(unsigned long, unsigned long)+0x24>
        readstring(filename);
        if(storage_->rename(handle,filename)) return 0x2001; else return 0x2005;
      }
      else
        return 0x2005;
    }
    717e:	movw	r0, #8197	; 0x2005
    7182:	pop	{r4, r5, r6, pc}
    7184:	mov	r1, r6
    7186:	mov	r0, r4
    7188:	ldmia.w	sp!, {r4, r5, r6, lr}
    718c:	b.w	6ebc <MTPD::setObjectPropValue(unsigned long, unsigned long) [clone .part.6]>
    7190:	.word	0x20043f40

00007194 <MTPD::loop()>:

    void MTPD::loop(void)
    { if(!usb_mtp_available()) return;
    7194:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7198:	sub	sp, #52	; 0x34
    719a:	mov	r4, r0
    719c:	bl	fbc0 <usb_mtp_available>
    71a0:	cbnz	r0, 71a8 <MTPD::loop()+0x14>

            memcpy(tx_data_buffer,rx_data_buffer,len);
            push_packet(tx_data_buffer,len); // for acknowledge use rx_data_buffer
        }
      }
    }
    71a2:	add	sp, #52	; 0x34
    71a4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return 0x2005;
    }

    void MTPD::loop(void)
    { if(!usb_mtp_available()) return;
      if(fetch_packet(rx_data_buffer))
    71a8:	add.w	r7, r4, #32
      return usb_mtp_recv(data_buffer,60);
    }

    int MTPD::fetch_packet(uint8_t *data_buffer)
    {
      return usb_mtp_recv(data_buffer,60);
    71ac:	movs	r1, #60	; 0x3c
    71ae:	mov	r0, r7
    71b0:	bl	fa44 <usb_mtp_recv>
        return 0x2005;
    }

    void MTPD::loop(void)
    { if(!usb_mtp_available()) return;
      if(fetch_packet(rx_data_buffer))
    71b4:	cmp	r0, #0
    71b6:	beq.n	71a2 <MTPD::loop()+0xe>
      { printContainer(); // to switch on set debug to 1 at beginning of file
    71b8:	ldr	r0, [r4, #40]	; 0x28
    71ba:	ldrh	r1, [r4, #36]	; 0x24
    71bc:	ldr	r3, [r4, #32]
    71be:	ldrh	r2, [r4, #38]	; 0x26
    71c0:	str	r0, [sp, #4]
    71c2:	str	r1, [sp, #0]
    71c4:	ldr	r0, [pc, #740]	; (74ac <MTPD::loop()+0x318>)
    71c6:	ldr	r1, [pc, #744]	; (74b0 <MTPD::loop()+0x31c>)
    71c8:	bl	ff78 <Print::printf(char const*, ...)>
    71cc:	ldr	r3, [r4, #32]
    71ce:	cmp	r3, #12
    71d0:	bhi.w	73e0 <MTPD::loop()+0x24c>
    71d4:	ldr	r1, [pc, #732]	; (74b4 <MTPD::loop()+0x320>)
        int id = CONTAINER->transaction_id;
        int len= CONTAINER->len;
        int typ= CONTAINER->type;
        TID=id;

        int return_code =0x2001; //OK use as default value
    71d6:	movw	sl, #8197	; 0x2005
    }

    void MTPD::loop(void)
    { if(!usb_mtp_available()) return;
      if(fetch_packet(rx_data_buffer))
      { printContainer(); // to switch on set debug to 1 at beginning of file
    71da:	ldr	r0, [pc, #720]	; (74ac <MTPD::loop()+0x318>)
        int id = CONTAINER->transaction_id;
        int len= CONTAINER->len;
        int typ= CONTAINER->type;
        TID=id;

        int return_code =0x2001; //OK use as default value
    71dc:	movw	fp, #8193	; 0x2001
    }

    void MTPD::loop(void)
    { if(!usb_mtp_available()) return;
      if(fetch_packet(rx_data_buffer))
      { printContainer(); // to switch on set debug to 1 at beginning of file
    71e0:	bl	ff78 <Print::printf(char const*, ...)>
        int p2 = CONTAINER->params[1];
        int p3 = CONTAINER->params[2];
        int id = CONTAINER->transaction_id;
        int len= CONTAINER->len;
        int typ= CONTAINER->type;
        TID=id;
    71e4:	movw	r1, #9260	; 0x242c
        int p1 = CONTAINER->params[0];
        int p2 = CONTAINER->params[1];
        int p3 = CONTAINER->params[2];
        int id = CONTAINER->transaction_id;
        int len= CONTAINER->len;
        int typ= CONTAINER->type;
    71e8:	ldrh	r0, [r4, #36]	; 0x24

        int return_code =0x2001; //OK use as default value

        if(typ==2) return_code=0x2005; // we should only get cmds

        switch (op)
    71ea:	movw	r2, #4108	; 0x100c

        int op = CONTAINER->op;
        int p1 = CONTAINER->params[0];
        int p2 = CONTAINER->params[1];
        int p3 = CONTAINER->params[2];
        int id = CONTAINER->transaction_id;
    71ee:	ldr.w	r8, [r4, #40]	; 0x28
    void MTPD::loop(void)
    { if(!usb_mtp_available()) return;
      if(fetch_packet(rx_data_buffer))
      { printContainer(); // to switch on set debug to 1 at beginning of file

        int op = CONTAINER->op;
    71f2:	ldrh	r3, [r4, #38]	; 0x26
        int p2 = CONTAINER->params[1];
        int p3 = CONTAINER->params[2];
        int id = CONTAINER->transaction_id;
        int len= CONTAINER->len;
        int typ= CONTAINER->type;
        TID=id;
    71f4:	str.w	r8, [r4, r1]

        int return_code =0x2001; //OK use as default value
    71f8:	cmp	r0, #2
    71fa:	ite	eq
    71fc:	moveq	r1, sl
    71fe:	movne	r1, fp

        if(typ==2) return_code=0x2005; // we should only get cmds

        switch (op)
    7200:	cmp	r3, r2
    { if(!usb_mtp_available()) return;
      if(fetch_packet(rx_data_buffer))
      { printContainer(); // to switch on set debug to 1 at beginning of file

        int op = CONTAINER->op;
        int p1 = CONTAINER->params[0];
    7202:	ldr.w	r9, [r4, #44]	; 0x2c
        int id = CONTAINER->transaction_id;
        int len= CONTAINER->len;
        int typ= CONTAINER->type;
        TID=id;

        int return_code =0x2001; //OK use as default value
    7206:	str	r1, [sp, #8]
      if(fetch_packet(rx_data_buffer))
      { printContainer(); // to switch on set debug to 1 at beginning of file

        int op = CONTAINER->op;
        int p1 = CONTAINER->params[0];
        int p2 = CONTAINER->params[1];
    7208:	ldr	r1, [r4, #48]	; 0x30
        int p3 = CONTAINER->params[2];
    720a:	ldr	r5, [r4, #52]	; 0x34
      if(fetch_packet(rx_data_buffer))
      { printContainer(); // to switch on set debug to 1 at beginning of file

        int op = CONTAINER->op;
        int p1 = CONTAINER->params[0];
        int p2 = CONTAINER->params[1];
    720c:	str	r1, [sp, #12]
        int p3 = CONTAINER->params[2];
        int id = CONTAINER->transaction_id;
        int len= CONTAINER->len;
    720e:	ldr	r6, [r4, #32]

        int return_code =0x2001; //OK use as default value

        if(typ==2) return_code=0x2005; // we should only get cmds

        switch (op)
    7210:	beq.w	77d6 <MTPD::loop()+0x642>
    7214:	bhi.n	7258 <MTPD::loop()+0xc4>
    7216:	movw	r2, #4101	; 0x1005
    721a:	cmp	r3, r2
    721c:	beq.w	7648 <MTPD::loop()+0x4b4>
    7220:	bls.w	7350 <MTPD::loop()+0x1bc>
    7224:	movw	r2, #4104	; 0x1008
    7228:	cmp	r3, r2
    722a:	beq.w	789c <MTPD::loop()+0x708>
    722e:	bhi.w	7444 <MTPD::loop()+0x2b0>
    7232:	movw	r2, #4102	; 0x1006
    7236:	cmp	r3, r2
    7238:	beq.w	787a <MTPD::loop()+0x6e6>
    723c:	movw	r2, #4103	; 0x1007
    7240:	cmp	r3, r2
    7242:	bne.w	785a <MTPD::loop()+0x6c6>
                p1 = GetNumObjects(p1, p3);
            }
            break;

          case 0x1007:  // GetObjectHandles
            if (p2) 
    7246:	ldr	r3, [sp, #12]
    7248:	cmp	r3, #0
    724a:	beq.w	79b8 <MTPD::loop()+0x824>
    724e:	add.w	r5, r4, #544	; 0x220
          case 0x1009:  // GetObject
            TRANSMIT(GetObject(p1));
            break;

          case 0x100B:  // DeleteObject
              if (p2) {
    7252:	movw	r0, #8212	; 0x2014
    7256:	b.n	728c <MTPD::loop()+0xf8>

        int return_code =0x2001; //OK use as default value

        if(typ==2) return_code=0x2005; // we should only get cmds

        switch (op)
    7258:	movw	r2, #4122	; 0x101a
    725c:	cmp	r3, r2
    725e:	beq.w	76be <MTPD::loop()+0x52a>
    7262:	bhi.n	72b6 <MTPD::loop()+0x122>
    7264:	movw	r2, #4116	; 0x1014
    7268:	cmp	r3, r2
    726a:	beq.w	77f6 <MTPD::loop()+0x662>
    726e:	bhi.w	7410 <MTPD::loop()+0x27c>
    7272:	movw	r2, #4109	; 0x100d
    7276:	cmp	r3, r2
    7278:	beq.w	7864 <MTPD::loop()+0x6d0>
    727c:	movw	r2, #4112	; 0x1010
    7280:	cmp	r3, r2
    7282:	bne.w	785a <MTPD::loop()+0x6c6>
              TRANSMIT(GetDevicePropValue(p1));
              break;

          case 0x1010:  // Reset
              return_code = 0x2005;
              break;
    7286:	mov	r0, sl
    7288:	add.w	r5, r4, #544	; 0x220
              return_code = 0x2005;  // operation not supported
              break;
        }
        if(return_code)
        {
            CONTAINER->type=3;
    728c:	movs	r3, #3
            CONTAINER->len=len;
            CONTAINER->op=return_code;
    728e:	strh	r0, [r4, #38]	; 0x26
              break;
        }
        if(return_code)
        {
            CONTAINER->type=3;
            CONTAINER->len=len;
    7290:	str	r6, [r4, #32]
            CONTAINER->params[0]=p1;
            #if DEBUG >1
              printContainer(); // to switch on set debug to 2 at beginning of file
            #endif

            memcpy(tx_data_buffer,rx_data_buffer,len);
    7292:	mov	r1, r7
        if(return_code)
        {
            CONTAINER->type=3;
            CONTAINER->len=len;
            CONTAINER->op=return_code;
            CONTAINER->transaction_id=id;
    7294:	str.w	r8, [r4, #40]	; 0x28
            CONTAINER->params[0]=p1;
            #if DEBUG >1
              printContainer(); // to switch on set debug to 2 at beginning of file
            #endif

            memcpy(tx_data_buffer,rx_data_buffer,len);
    7298:	mov	r2, r6
        {
            CONTAINER->type=3;
            CONTAINER->len=len;
            CONTAINER->op=return_code;
            CONTAINER->transaction_id=id;
            CONTAINER->params[0]=p1;
    729a:	str.w	r9, [r4, #44]	; 0x2c
            #if DEBUG >1
              printContainer(); // to switch on set debug to 2 at beginning of file
            #endif

            memcpy(tx_data_buffer,rx_data_buffer,len);
    729e:	mov	r0, r5
              return_code = 0x2005;  // operation not supported
              break;
        }
        if(return_code)
        {
            CONTAINER->type=3;
    72a0:	strh	r3, [r4, #36]	; 0x24
            CONTAINER->params[0]=p1;
            #if DEBUG >1
              printContainer(); // to switch on set debug to 2 at beginning of file
            #endif

            memcpy(tx_data_buffer,rx_data_buffer,len);
    72a2:	bl	db14 <memcpy>

#elif defined(__IMXRT1062__)  

    int MTPD::push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    72a6:	movs	r2, #60	; 0x3c
    72a8:	mov	r1, r6
    72aa:	mov	r0, r5
    72ac:	bl	faf4 <usb_mtp_send>
    72b0:	cmp	r0, #0
    72b2:	ble.n	72a6 <MTPD::loop()+0x112>
    72b4:	b.n	71a2 <MTPD::loop()+0xe>

        int return_code =0x2001; //OK use as default value

        if(typ==2) return_code=0x2005; // we should only get cmds

        switch (op)
    72b6:	movw	r2, #38914	; 0x9802
    72ba:	cmp	r3, r2
    72bc:	beq.w	76de <MTPD::loop()+0x54a>
    72c0:	bhi.w	7476 <MTPD::loop()+0x2e2>
    72c4:	movw	r2, #4123	; 0x101b
    72c8:	cmp	r3, r2
    72ca:	beq.w	754e <MTPD::loop()+0x3ba>
    72ce:	movw	r2, #38913	; 0x9801
    72d2:	cmp	r3, r2
    72d4:	bne.w	785a <MTPD::loop()+0x6c6>
          case 0x101B:  // GetPartialObject
              TRANSMIT1(GetPartialObject(p1,p2,p3));
              break;

          case 0x9801:  // getObjectPropsSupported
              TRANSMIT(getObjectPropsSupported(p1));
    72d8:	movw	r5, #9256	; 0x2428
    72dc:	mov.w	sl, #0
    72e0:	movs	r3, #1
    72e2:	movw	fp, #9252	; 0x2424
    72e6:	str.w	sl, [r4, r5]
    72ea:	mov	r1, r9
    72ec:	strb.w	r3, [r4, fp]
    72f0:	mov	r0, r4
    72f2:	bl	61c0 <MTPD::getObjectPropsSupported(unsigned long)>
    72f6:	ldr	r3, [r4, r5]
    72f8:	ldrh.w	lr, [r4, #38]	; 0x26
    72fc:	mov.w	ip, #2
    7300:	add.w	r0, r3, #12
    7304:	strb.w	sl, [r4, fp]
    7308:	ldr	r3, [r4, #40]	; 0x28
    730a:	movs	r2, #12
    730c:	str.w	sl, [r4, r5]
    7310:	add	r1, sp, #16
    7312:	str	r0, [sp, #16]
    7314:	mov	r0, r4
    7316:	str	r3, [sp, #24]
    7318:	add.w	r5, r4, #544	; 0x220
    731c:	strh.w	ip, [sp, #20]
    7320:	strh.w	lr, [sp, #22]
    7324:	bl	5784 <MTPD::write(char const*, int) [clone .part.2]>
    7328:	mov	r1, r9
    732a:	mov	r0, r4
    732c:	bl	61c0 <MTPD::getObjectPropsSupported(unsigned long)>
    7330:	ldr	r3, [sp, #16]
    7332:	ubfx	sl, r3, #0, #9
    7336:	cmp.w	sl, #0
    733a:	beq.n	734a <MTPD::loop()+0x1b6>

#elif defined(__IMXRT1062__)  

    int MTPD::push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    733c:	movs	r2, #60	; 0x3c
    733e:	mov	r1, sl
    7340:	mov	r0, r5
    7342:	bl	faf4 <usb_mtp_send>
    7346:	cmp	r0, #0
    7348:	ble.n	733c <MTPD::loop()+0x1a8>
    734a:	ldrh.w	r0, [sp, #8]
              TRANSMIT(getObjectPropDesc(p1,p2));
              break;

          case 0x9803:  // getObjectPropertyValue
              TRANSMIT(getObjectPropValue(p1,p2));
              break;
    734e:	b.n	728c <MTPD::loop()+0xf8>

        int return_code =0x2001; //OK use as default value

        if(typ==2) return_code=0x2005; // we should only get cmds

        switch (op)
    7350:	movw	r2, #4098	; 0x1002
    7354:	cmp	r3, r2
    7356:	beq.w	7536 <MTPD::loop()+0x3a2>
    735a:	bls.w	74bc <MTPD::loop()+0x328>
    735e:	movw	r2, #4099	; 0x1003
    7362:	cmp	r3, r2
    7364:	beq.w	74a2 <MTPD::loop()+0x30e>
    7368:	movw	r2, #4100	; 0x1004
    736c:	cmp	r3, r2
    736e:	bne.w	785a <MTPD::loop()+0x6c6>

          case 0x1003:  // CloseSession
            break;

          case 0x1004:  // GetStorageIDs
              TRANSMIT(WriteStorageIDs());
    7372:	movw	r5, #9256	; 0x2428
    7376:	mov.w	sl, #0
    737a:	movs	r3, #1
    737c:	movw	fp, #9252	; 0x2424
    7380:	str.w	sl, [r4, r5]
    7384:	mov	r0, r4
    7386:	strb.w	r3, [r4, fp]
    738a:	bl	5c74 <MTPD::WriteStorageIDs()>
    738e:	ldr	r3, [r4, r5]
    7390:	mov.w	lr, #2
    7394:	strb.w	sl, [r4, fp]
    7398:	adds	r3, #12
    739a:	ldrh.w	ip, [r4, #38]	; 0x26
    739e:	str.w	sl, [r4, r5]
    73a2:	movs	r2, #12
    73a4:	ldr	r5, [r4, #40]	; 0x28
    73a6:	add	r1, sp, #16
    73a8:	mov	r0, r4
    73aa:	str	r3, [sp, #16]
    73ac:	strh.w	lr, [sp, #20]
    73b0:	strh.w	ip, [sp, #22]
    73b4:	str	r5, [sp, #24]
    73b6:	bl	5784 <MTPD::write(char const*, int) [clone .part.2]>
    73ba:	mov	r0, r4
    73bc:	add.w	r5, r4, #544	; 0x220
    73c0:	bl	5c74 <MTPD::WriteStorageIDs()>
    73c4:	ldr	r3, [sp, #16]
    73c6:	ubfx	sl, r3, #0, #9
    73ca:	cmp.w	sl, #0
    73ce:	beq.n	734a <MTPD::loop()+0x1b6>

#elif defined(__IMXRT1062__)  

    int MTPD::push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    73d0:	movs	r2, #60	; 0x3c
    73d2:	mov	r1, sl
    73d4:	mov	r0, r5
    73d6:	bl	faf4 <usb_mtp_send>
    73da:	cmp	r0, #0
    73dc:	ble.n	73d0 <MTPD::loop()+0x23c>
    73de:	b.n	734a <MTPD::loop()+0x1b6>
    }

    void MTPD::loop(void)
    { if(!usb_mtp_available()) return;
      if(fetch_packet(rx_data_buffer))
      { printContainer(); // to switch on set debug to 1 at beginning of file
    73e0:	ldr	r2, [r4, #44]	; 0x2c
    73e2:	ldr	r1, [pc, #212]	; (74b8 <MTPD::loop()+0x324>)
    73e4:	ldr	r0, [pc, #196]	; (74ac <MTPD::loop()+0x318>)
    73e6:	bl	ff78 <Print::printf(char const*, ...)>
    73ea:	ldr	r3, [r4, #32]
    73ec:	cmp	r3, #16
    73ee:	bls.w	71d4 <MTPD::loop()+0x40>
    73f2:	ldr	r2, [r4, #48]	; 0x30
    73f4:	ldr	r1, [pc, #192]	; (74b8 <MTPD::loop()+0x324>)
    73f6:	ldr	r0, [pc, #180]	; (74ac <MTPD::loop()+0x318>)
    73f8:	bl	ff78 <Print::printf(char const*, ...)>
    73fc:	ldr	r3, [r4, #32]
    73fe:	cmp	r3, #20
    7400:	bls.w	71d4 <MTPD::loop()+0x40>
    7404:	ldr	r2, [r4, #52]	; 0x34
    7406:	ldr	r1, [pc, #176]	; (74b8 <MTPD::loop()+0x324>)
    7408:	ldr	r0, [pc, #160]	; (74ac <MTPD::loop()+0x318>)
    740a:	bl	ff78 <Print::printf(char const*, ...)>
    740e:	b.n	71d4 <MTPD::loop()+0x40>

        int return_code =0x2001; //OK use as default value

        if(typ==2) return_code=0x2005; // we should only get cmds

        switch (op)
    7410:	movw	r2, #4117	; 0x1015
    7414:	cmp	r3, r2
    7416:	beq.w	7912 <MTPD::loop()+0x77e>
    741a:	movw	r2, #4121	; 0x1019
    741e:	cmp	r3, r2
    7420:	bne.w	785a <MTPD::loop()+0x6c6>
        return 0x2001;
    }

    uint32_t MTPD::moveObject(uint32_t handle, uint32_t newStorage, uint32_t newHandle)
    { uint32_t store1=Storage2Store(newStorage);
      if(storage_->move(handle,store1,newHandle)) return 0x2001; else return  0x2005;
    7424:	ldr	r0, [r4, #0]
    7426:	mov	r3, r5
    7428:	ldr	r2, [sp, #12]
    742a:	mov	r1, r9
    742c:	ldr	r6, [r0, #0]
    742e:	add.w	r5, r4, #544	; 0x220
    7432:	subs	r2, #1
    7434:	ldr	r6, [r6, #76]	; 0x4c
    7436:	blx	r6
              break;

          case 0x1019:  // MoveObject
              return_code = moveObject(p1,p2,p3);
              len = 12;
              break;
    7438:	movs	r6, #12
        return 0x2001;
    }

    uint32_t MTPD::moveObject(uint32_t handle, uint32_t newStorage, uint32_t newHandle)
    { uint32_t store1=Storage2Store(newStorage);
      if(storage_->move(handle,store1,newHandle)) return 0x2001; else return  0x2005;
    743a:	cmp	r0, #0
    743c:	ite	eq
    743e:	moveq	r0, sl
    7440:	movne	r0, fp
              break;

          case 0x1019:  // MoveObject
              return_code = moveObject(p1,p2,p3);
              len = 12;
              break;
    7442:	b.n	728c <MTPD::loop()+0xf8>

        int return_code =0x2001; //OK use as default value

        if(typ==2) return_code=0x2005; // we should only get cmds

        switch (op)
    7444:	movw	r2, #4105	; 0x1009
    7448:	cmp	r3, r2
    744a:	beq.w	7756 <MTPD::loop()+0x5c2>
    744e:	movw	r2, #4107	; 0x100b
    7452:	cmp	r3, r2
    7454:	bne.w	785a <MTPD::loop()+0x6c6>
          case 0x1009:  // GetObject
            TRANSMIT(GetObject(p1));
            break;

          case 0x100B:  // DeleteObject
              if (p2) {
    7458:	ldr	r3, [sp, #12]
    745a:	cmp	r3, #0
    745c:	bne.w	724e <MTPD::loop()+0xba>
                return_code = 0x2014; // spec by format unsupported
              } else {
                if (!storage_->DeleteObject(p1)) {
    7460:	ldr	r0, [r4, #0]
    7462:	mov	r1, r9
    7464:	ldr	r3, [r0, #0]
    7466:	ldr	r3, [r3, #60]	; 0x3c
    7468:	blx	r3
    746a:	cbnz	r0, 74a2 <MTPD::loop()+0x30e>
    746c:	add.w	r5, r4, #544	; 0x220
    7470:	movw	r0, #8210	; 0x2012
    7474:	b.n	728c <MTPD::loop()+0xf8>

        int return_code =0x2001; //OK use as default value

        if(typ==2) return_code=0x2005; // we should only get cmds

        switch (op)
    7476:	movw	r2, #38915	; 0x9803
    747a:	cmp	r3, r2
    747c:	beq.w	75d0 <MTPD::loop()+0x43c>
    7480:	movw	r2, #38916	; 0x9804
    7484:	cmp	r3, r2
    7486:	bne.w	785a <MTPD::loop()+0x6c6>
          case 0x9803:  // getObjectPropertyValue
              TRANSMIT(getObjectPropValue(p1,p2));
              break;

          case 0x9804:  // setObjectPropertyValue
              return_code = setObjectPropValue(p1,p2);
    748a:	ldr	r2, [sp, #12]
    748c:	mov	r1, r9
    748e:	mov	r0, r4
    7490:	bl	7160 <MTPD::setObjectPropValue(unsigned long, unsigned long)>

          default:
              return_code = 0x2005;  // operation not supported
              break;
        }
        if(return_code)
    7494:	cmp	r0, #0
    7496:	beq.w	71a2 <MTPD::loop()+0xe>
    749a:	uxth	r0, r0
    749c:	add.w	r5, r4, #544	; 0x220
    74a0:	b.n	728c <MTPD::loop()+0xf8>
    74a2:	ldrh.w	r0, [sp, #8]
    74a6:	add.w	r5, r4, #544	; 0x220
    74aa:	b.n	728c <MTPD::loop()+0xf8>
    74ac:	.word	0x20000c60
    74b0:	.word	0x20000404
    74b4:	.word	0x20000418
    74b8:	.word	0x20000414

        int return_code =0x2001; //OK use as default value

        if(typ==2) return_code=0x2005; // we should only get cmds

        switch (op)
    74bc:	movw	r2, #4097	; 0x1001
    74c0:	cmp	r3, r2
    74c2:	bne.w	785a <MTPD::loop()+0x6c6>
        {
          case 0x1001:
            TRANSMIT(WriteDescriptor());
    74c6:	movw	r5, #9256	; 0x2428
    74ca:	mov.w	sl, #0
    74ce:	movs	r3, #1
    74d0:	movw	fp, #9252	; 0x2424
    74d4:	str.w	sl, [r4, r5]
    74d8:	mov	r0, r4
    74da:	strb.w	r3, [r4, fp]
    74de:	bl	5998 <MTPD::WriteDescriptor()>
    74e2:	ldr	r3, [r4, r5]
    74e4:	mov.w	lr, #2
    74e8:	strb.w	sl, [r4, fp]
    74ec:	adds	r3, #12
    74ee:	ldrh.w	ip, [r4, #38]	; 0x26
    74f2:	str.w	sl, [r4, r5]
    74f6:	movs	r2, #12
    74f8:	ldr	r5, [r4, #40]	; 0x28
    74fa:	add	r1, sp, #16
    74fc:	mov	r0, r4
    74fe:	str	r3, [sp, #16]
    7500:	strh.w	lr, [sp, #20]
    7504:	strh.w	ip, [sp, #22]
    7508:	str	r5, [sp, #24]
    750a:	bl	5784 <MTPD::write(char const*, int) [clone .part.2]>
    750e:	mov	r0, r4
    7510:	add.w	r5, r4, #544	; 0x220
    7514:	bl	5998 <MTPD::WriteDescriptor()>
    7518:	ldr	r3, [sp, #16]
    751a:	ubfx	sl, r3, #0, #9
    751e:	cmp.w	sl, #0
    7522:	beq.w	734a <MTPD::loop()+0x1b6>

#elif defined(__IMXRT1062__)  

    int MTPD::push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    7526:	movs	r2, #60	; 0x3c
    7528:	mov	r1, sl
    752a:	mov	r0, r5
    752c:	bl	faf4 <usb_mtp_send>
    7530:	cmp	r0, #0
    7532:	ble.n	7526 <MTPD::loop()+0x392>
    7534:	b.n	734a <MTPD::loop()+0x1b6>
    }
    
    void MTPD::openSession(uint32_t id)
    {
      sessionID_ = id;
      storage_->ResetIndex();
    7536:	ldr	r0, [r4, #0]
    7538:	add.w	r5, r4, #544	; 0x220
      return storage_->copy(handle,store1,newHandle);
    }
    
    void MTPD::openSession(uint32_t id)
    {
      sessionID_ = id;
    753c:	ldr	r2, [pc, #856]	; (7898 <MTPD::loop()+0x704>)
      storage_->ResetIndex();
    753e:	ldr	r3, [r0, #0]
      return storage_->copy(handle,store1,newHandle);
    }
    
    void MTPD::openSession(uint32_t id)
    {
      sessionID_ = id;
    7540:	str.w	r9, [r2]
      storage_->ResetIndex();
    7544:	ldr	r3, [r3, #68]	; 0x44
    7546:	blx	r3
    7548:	ldrh.w	r0, [sp, #8]
    754c:	b.n	728c <MTPD::loop()+0xf8>
              else
              { p1 = return_code; return_code=0x2001; len = 16;  }
              break;

          case 0x101B:  // GetPartialObject
              TRANSMIT1(GetPartialObject(p1,p2,p3));
    754e:	movw	sl, #9256	; 0x2428
    7552:	mov.w	fp, #0
    7556:	movs	r2, #1
    7558:	movw	r1, #9252	; 0x2424
    755c:	str.w	fp, [r4, sl]
    7560:	mov	r3, r5
    7562:	strb	r2, [r4, r1]
    7564:	mov	r0, r4
    7566:	ldr	r2, [sp, #12]
    7568:	mov	r1, r9
    756a:	bl	6cd0 <MTPD::GetPartialObject(unsigned long, unsigned long, unsigned long)>
    756e:	ldr.w	r3, [r4, sl]
    7572:	movw	r1, #9252	; 0x2424
    7576:	ldrh.w	lr, [r4, #38]	; 0x26
    757a:	adds	r3, #16
    757c:	mov.w	ip, #2
    7580:	strb.w	fp, [r4, r1]
    7584:	movs	r2, #32
    7586:	str.w	fp, [r4, sl]
    758a:	add	r1, sp, #16
    758c:	str	r3, [sp, #16]
    758e:	ldr	r3, [r4, #40]	; 0x28
    7590:	str	r0, [sp, #28]
    7592:	mov	r0, r4
    7594:	strh.w	ip, [sp, #20]
    7598:	strh.w	lr, [sp, #22]
    759c:	str	r3, [sp, #24]
    759e:	bl	5784 <MTPD::write(char const*, int) [clone .part.2]>
    75a2:	mov	r3, r5
    75a4:	ldr	r2, [sp, #12]
    75a6:	mov	r1, r9
    75a8:	mov	r0, r4
    75aa:	bl	6cd0 <MTPD::GetPartialObject(unsigned long, unsigned long, unsigned long)>
    75ae:	ldr	r3, [sp, #16]
    75b0:	add.w	r5, r4, #544	; 0x220
    75b4:	ubfx	sl, r3, #0, #9
    75b8:	cmp.w	sl, #0
    75bc:	beq.w	734a <MTPD::loop()+0x1b6>

#elif defined(__IMXRT1062__)  

    int MTPD::push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    75c0:	movs	r2, #60	; 0x3c
    75c2:	mov	r1, sl
    75c4:	mov	r0, r5
    75c6:	bl	faf4 <usb_mtp_send>
    75ca:	cmp	r0, #0
    75cc:	ble.n	75c0 <MTPD::loop()+0x42c>
    75ce:	b.n	734a <MTPD::loop()+0x1b6>
          case 0x9802:  // getObjectPropDesc
              TRANSMIT(getObjectPropDesc(p1,p2));
              break;

          case 0x9803:  // getObjectPropertyValue
              TRANSMIT(getObjectPropValue(p1,p2));
    75d0:	movw	r5, #9256	; 0x2428
    75d4:	mov.w	sl, #0
    75d8:	movs	r3, #1
    75da:	movw	fp, #9252	; 0x2424
    75de:	str.w	sl, [r4, r5]
    75e2:	mov	r1, r9
    75e4:	ldr	r2, [sp, #12]
    75e6:	mov	r0, r4
    75e8:	strb.w	r3, [r4, fp]
    75ec:	bl	69c4 <MTPD::getObjectPropValue(unsigned long, unsigned long)>
    75f0:	ldr	r3, [r4, r5]
    75f2:	ldrh.w	ip, [r4, #38]	; 0x26
    75f6:	mov.w	lr, #2
    75fa:	adds	r3, #12
    75fc:	strb.w	sl, [r4, fp]
    7600:	str.w	sl, [r4, r5]
    7604:	movs	r2, #12
    7606:	str	r3, [sp, #16]
    7608:	add	r1, sp, #16
    760a:	ldr	r3, [r4, #40]	; 0x28
    760c:	mov	r0, r4
    760e:	strh.w	lr, [sp, #20]
    7612:	add.w	r5, r4, #544	; 0x220
    7616:	str	r3, [sp, #24]
    7618:	strh.w	ip, [sp, #22]
    761c:	bl	5784 <MTPD::write(char const*, int) [clone .part.2]>
    7620:	ldr	r2, [sp, #12]
    7622:	mov	r1, r9
    7624:	mov	r0, r4
    7626:	bl	69c4 <MTPD::getObjectPropValue(unsigned long, unsigned long)>
    762a:	ldr	r3, [sp, #16]
    762c:	ubfx	sl, r3, #0, #9
    7630:	cmp.w	sl, #0
    7634:	beq.w	734a <MTPD::loop()+0x1b6>

#elif defined(__IMXRT1062__)  

    int MTPD::push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    7638:	movs	r2, #60	; 0x3c
    763a:	mov	r1, sl
    763c:	mov	r0, r5
    763e:	bl	faf4 <usb_mtp_send>
    7642:	cmp	r0, #0
    7644:	ble.n	7638 <MTPD::loop()+0x4a4>
    7646:	b.n	734a <MTPD::loop()+0x1b6>
          case 0x1004:  // GetStorageIDs
              TRANSMIT(WriteStorageIDs());
            break;

          case 0x1005:  // GetStorageInfo
            TRANSMIT(GetStorageInfo(p1));
    7648:	movw	r5, #9256	; 0x2428
    764c:	mov.w	sl, #0
    7650:	movs	r3, #1
    7652:	movw	fp, #9252	; 0x2424
    7656:	str.w	sl, [r4, r5]
    765a:	mov	r1, r9
    765c:	strb.w	r3, [r4, fp]
    7660:	mov	r0, r4
    7662:	bl	5cf8 <MTPD::GetStorageInfo(unsigned long)>
    7666:	ldr	r3, [r4, r5]
    7668:	ldrh.w	lr, [r4, #38]	; 0x26
    766c:	mov.w	ip, #2
    7670:	add.w	r0, r3, #12
    7674:	strb.w	sl, [r4, fp]
    7678:	ldr	r3, [r4, #40]	; 0x28
    767a:	movs	r2, #12
    767c:	str.w	sl, [r4, r5]
    7680:	add	r1, sp, #16
    7682:	str	r0, [sp, #16]
    7684:	mov	r0, r4
    7686:	str	r3, [sp, #24]
    7688:	add.w	r5, r4, #544	; 0x220
    768c:	strh.w	ip, [sp, #20]
    7690:	strh.w	lr, [sp, #22]
    7694:	bl	5784 <MTPD::write(char const*, int) [clone .part.2]>
    7698:	mov	r1, r9
    769a:	mov	r0, r4
    769c:	bl	5cf8 <MTPD::GetStorageInfo(unsigned long)>
    76a0:	ldr	r3, [sp, #16]
    76a2:	ubfx	sl, r3, #0, #9
    76a6:	cmp.w	sl, #0
    76aa:	beq.w	734a <MTPD::loop()+0x1b6>

#elif defined(__IMXRT1062__)  

    int MTPD::push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    76ae:	movs	r2, #60	; 0x3c
    76b0:	mov	r1, sl
    76b2:	mov	r0, r5
    76b4:	bl	faf4 <usb_mtp_send>
    76b8:	cmp	r0, #0
    76ba:	ble.n	76ae <MTPD::loop()+0x51a>
    76bc:	b.n	734a <MTPD::loop()+0x1b6>
      if(storage_->move(handle,store1,newHandle)) return 0x2001; else return  0x2005;
    }
    
    uint32_t MTPD::copyObject(uint32_t handle, uint32_t newStorage, uint32_t newHandle)
    { uint32_t store1=Storage2Store(newStorage);
      return storage_->copy(handle,store1,newHandle);
    76be:	ldr	r0, [r4, #0]
    76c0:	mov	r3, r5
    76c2:	ldr	r2, [sp, #12]
    76c4:	mov	r1, r9
    76c6:	ldr	r5, [r0, #0]
    76c8:	subs	r2, #1
    76ca:	ldr	r5, [r5, #80]	; 0x50
    76cc:	blx	r5
              len = 12;
              break;

          case 0x101A:  // CopyObject
              return_code = copyObject(p1,p2,p3);
              if(!return_code) 
    76ce:	cmp	r0, #0
    76d0:	beq.n	77cc <MTPD::loop()+0x638>
    76d2:	mov	r9, r0
    76d4:	add.w	r5, r4, #544	; 0x220
    76d8:	mov	r0, fp
    76da:	movs	r6, #16
    76dc:	b.n	728c <MTPD::loop()+0xf8>
          case 0x9801:  // getObjectPropsSupported
              TRANSMIT(getObjectPropsSupported(p1));
              break;

          case 0x9802:  // getObjectPropDesc
              TRANSMIT(getObjectPropDesc(p1,p2));
    76de:	movw	r5, #9256	; 0x2428
    76e2:	mov.w	sl, #0
    76e6:	movs	r3, #1
    76e8:	movw	fp, #9252	; 0x2424
    76ec:	str.w	sl, [r4, r5]
    76f0:	mov	r1, r9
    76f2:	ldr	r2, [sp, #12]
    76f4:	mov	r0, r4
    76f6:	strb.w	r3, [r4, fp]
    76fa:	bl	6250 <MTPD::getObjectPropDesc(unsigned long, unsigned long)>
    76fe:	ldr	r3, [r4, r5]
    7700:	ldrh.w	ip, [r4, #38]	; 0x26
    7704:	mov.w	lr, #2
    7708:	adds	r3, #12
    770a:	strb.w	sl, [r4, fp]
    770e:	str.w	sl, [r4, r5]
    7712:	movs	r2, #12
    7714:	str	r3, [sp, #16]
    7716:	add	r1, sp, #16
    7718:	ldr	r3, [r4, #40]	; 0x28
    771a:	mov	r0, r4
    771c:	strh.w	lr, [sp, #20]
    7720:	add.w	r5, r4, #544	; 0x220
    7724:	str	r3, [sp, #24]
    7726:	strh.w	ip, [sp, #22]
    772a:	bl	5784 <MTPD::write(char const*, int) [clone .part.2]>
    772e:	ldr	r2, [sp, #12]
    7730:	mov	r1, r9
    7732:	mov	r0, r4
    7734:	bl	6250 <MTPD::getObjectPropDesc(unsigned long, unsigned long)>
    7738:	ldr	r3, [sp, #16]
    773a:	ubfx	sl, r3, #0, #9
    773e:	cmp.w	sl, #0
    7742:	beq.w	734a <MTPD::loop()+0x1b6>

#elif defined(__IMXRT1062__)  

    int MTPD::push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    7746:	movs	r2, #60	; 0x3c
    7748:	mov	r1, sl
    774a:	mov	r0, r5
    774c:	bl	faf4 <usb_mtp_send>
    7750:	cmp	r0, #0
    7752:	ble.n	7746 <MTPD::loop()+0x5b2>
    7754:	b.n	734a <MTPD::loop()+0x1b6>
          case 0x1008:  // GetObjectInfo
            TRANSMIT(GetObjectInfo(p1));
            break;

          case 0x1009:  // GetObject
            TRANSMIT(GetObject(p1));
    7756:	movw	r5, #9256	; 0x2428
    775a:	mov.w	sl, #0
    775e:	movs	r3, #1
    7760:	movw	fp, #9252	; 0x2424
    7764:	str.w	sl, [r4, r5]
    7768:	mov	r1, r9
    776a:	strb.w	r3, [r4, fp]
    776e:	mov	r0, r4
    7770:	bl	6bb4 <MTPD::GetObject(unsigned long)>
    7774:	ldr	r3, [r4, r5]
    7776:	ldrh.w	lr, [r4, #38]	; 0x26
    777a:	mov.w	ip, #2
    777e:	add.w	r0, r3, #12
    7782:	strb.w	sl, [r4, fp]
    7786:	ldr	r3, [r4, #40]	; 0x28
    7788:	movs	r2, #12
    778a:	str.w	sl, [r4, r5]
    778e:	add	r1, sp, #16
    7790:	str	r0, [sp, #16]
    7792:	mov	r0, r4
    7794:	str	r3, [sp, #24]
    7796:	add.w	r5, r4, #544	; 0x220
    779a:	strh.w	ip, [sp, #20]
    779e:	strh.w	lr, [sp, #22]
    77a2:	bl	5784 <MTPD::write(char const*, int) [clone .part.2]>
    77a6:	mov	r1, r9
    77a8:	mov	r0, r4
    77aa:	bl	6bb4 <MTPD::GetObject(unsigned long)>
    77ae:	ldr	r3, [sp, #16]
    77b0:	ubfx	sl, r3, #0, #9
    77b4:	cmp.w	sl, #0
    77b8:	beq.w	734a <MTPD::loop()+0x1b6>

#elif defined(__IMXRT1062__)  

    int MTPD::push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    77bc:	movs	r2, #60	; 0x3c
    77be:	mov	r1, sl
    77c0:	mov	r0, r5
    77c2:	bl	faf4 <usb_mtp_send>
    77c6:	cmp	r0, #0
    77c8:	ble.n	77bc <MTPD::loop()+0x628>
    77ca:	b.n	734a <MTPD::loop()+0x1b6>
              len = 12;
              break;

          case 0x101A:  // CopyObject
              return_code = copyObject(p1,p2,p3);
              if(!return_code) 
    77cc:	mov	r0, sl
    77ce:	add.w	r5, r4, #544	; 0x220
    77d2:	movs	r6, #12
    77d4:	b.n	728c <MTPD::loop()+0xf8>
                }
              }
              break;

          case 0x100C:  // SendObjectInfo
              p3 = SendObjectInfo(p1, // storage
    77d6:	ldr.w	sl, [sp, #12]
    77da:	mov	r1, r9
    77dc:	mov	r0, r4
    77de:	add.w	r5, r4, #544	; 0x220
    77e2:	mov	r2, sl
                                  p2); // parent

              CONTAINER->params[1]=p2;
              CONTAINER->params[2]=p3;
              len = 12 + 3 * 4;
              break;
    77e4:	movs	r6, #24
                }
              }
              break;

          case 0x100C:  // SendObjectInfo
              p3 = SendObjectInfo(p1, // storage
    77e6:	bl	6ef4 <MTPD::SendObjectInfo(unsigned long, unsigned long)>
                                  p2); // parent

              CONTAINER->params[1]=p2;
    77ea:	str.w	sl, [r4, #48]	; 0x30
              CONTAINER->params[2]=p3;
    77ee:	str	r0, [r4, #52]	; 0x34
    77f0:	ldrh.w	r0, [sp, #8]
              len = 12 + 3 * 4;
              break;
    77f4:	b.n	728c <MTPD::loop()+0xf8>
        break;
    }
  }

  void MTPD::GetDevicePropDesc(uint32_t prop) {
    switch (prop) {
    77f6:	movw	r2, #54274	; 0xd402
              if(!SendObject()) return_code = 0x2005;
              len = 12;
              break;

          case 0x1014:  // GetDevicePropDesc
              TRANSMIT(GetDevicePropDesc(p1));
    77fa:	movw	sl, #9256	; 0x2428
    77fe:	movs	r5, #0
    7800:	movw	fp, #9252	; 0x2424
    7804:	movs	r1, #1
        break;
    }
  }

  void MTPD::GetDevicePropDesc(uint32_t prop) {
    switch (prop) {
    7806:	cmp	r9, r2
              if(!SendObject()) return_code = 0x2005;
              len = 12;
              break;

          case 0x1014:  // GetDevicePropDesc
              TRANSMIT(GetDevicePropDesc(p1));
    7808:	str.w	r5, [r4, sl]
    780c:	strb.w	r1, [r4, fp]
        break;
    }
  }

  void MTPD::GetDevicePropDesc(uint32_t prop) {
    switch (prop) {
    7810:	beq.w	7976 <MTPD::loop()+0x7e2>
              if(!SendObject()) return_code = 0x2005;
              len = 12;
              break;

          case 0x1014:  // GetDevicePropDesc
              TRANSMIT(GetDevicePropDesc(p1));
    7814:	mov.w	lr, #12
    7818:	strb.w	r5, [r4, fp]
    781c:	movs	r5, #2
    781e:	add	r1, sp, #16
    7820:	mov	r2, lr
    7822:	mov	r0, r4
    7824:	strh.w	r3, [sp, #22]
    7828:	str.w	r8, [sp, #24]
    782c:	str.w	lr, [sp, #16]
    7830:	strh.w	r5, [sp, #20]
    7834:	bl	5784 <MTPD::write(char const*, int) [clone .part.2]>
    7838:	ldr	r3, [sp, #16]
    783a:	add.w	r5, r4, #544	; 0x220
    783e:	ubfx	sl, r3, #0, #9
    7842:	cmp.w	sl, #0
    7846:	beq.w	734a <MTPD::loop()+0x1b6>

#elif defined(__IMXRT1062__)  

    int MTPD::push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    784a:	movs	r2, #60	; 0x3c
    784c:	mov	r1, sl
    784e:	mov	r0, r5
    7850:	bl	faf4 <usb_mtp_send>
    7854:	cmp	r0, #0
    7856:	ble.n	784a <MTPD::loop()+0x6b6>
    7858:	b.n	734a <MTPD::loop()+0x1b6>
    785a:	add.w	r5, r4, #544	; 0x220
              return_code = setObjectPropValue(p1,p2);
              break;

          default:
              return_code = 0x2005;  // operation not supported
              break;
    785e:	movw	r0, #8197	; 0x2005
    7862:	b.n	728c <MTPD::loop()+0xf8>
              CONTAINER->params[2]=p3;
              len = 12 + 3 * 4;
              break;

          case 0x100D:  // SendObject
              if(!SendObject()) return_code = 0x2005;
    7864:	mov	r0, r4
    7866:	bl	704c <MTPD::SendObject()>
    786a:	cmp	r0, #0
    786c:	beq.n	77cc <MTPD::loop()+0x638>
    786e:	ldrh.w	r0, [sp, #8]
    7872:	add.w	r5, r4, #544	; 0x220
    7876:	movs	r6, #12
    7878:	b.n	728c <MTPD::loop()+0xf8>
          case 0x1005:  // GetStorageInfo
            TRANSMIT(GetStorageInfo(p1));
            break;

          case 0x1006:  // GetNumObjects
            if (p2) 
    787a:	ldr	r3, [sp, #12]
    787c:	cmp	r3, #0
    787e:	bne.w	724e <MTPD::loop()+0xba>
            {
                return_code = 0x2014; // spec by format unsupported
            } else 
            {
                p1 = GetNumObjects(p1, p3);
    7882:	mov	r2, r5
    7884:	mov	r1, r9
    7886:	mov	r0, r4
    7888:	add.w	r5, r4, #544	; 0x220
    788c:	bl	5e68 <MTPD::GetNumObjects(unsigned long, unsigned long)>
    7890:	mov	r9, r0
    7892:	ldrh.w	r0, [sp, #8]
    7896:	b.n	728c <MTPD::loop()+0xf8>
    7898:	.word	0x20043ec4
              TRANSMIT(GetObjectHandles(p1, p3));
            }
            break;

          case 0x1008:  // GetObjectInfo
            TRANSMIT(GetObjectInfo(p1));
    789c:	movw	r5, #9256	; 0x2428
    78a0:	mov.w	sl, #0
    78a4:	movs	r3, #1
    78a6:	movw	fp, #9252	; 0x2424
    78aa:	str.w	sl, [r4, r5]
    78ae:	mov	r1, r9
    78b0:	strb.w	r3, [r4, fp]
    78b4:	mov	r0, r4
    78b6:	bl	5f1c <MTPD::GetObjectInfo(unsigned long)>
    78ba:	ldr	r3, [r4, r5]
    78bc:	ldrh.w	lr, [r4, #38]	; 0x26
    78c0:	mov.w	ip, #2
    78c4:	add.w	r0, r3, #12
    78c8:	strb.w	sl, [r4, fp]
    78cc:	ldr	r3, [r4, #40]	; 0x28
    78ce:	movs	r2, #12
    78d0:	str.w	sl, [r4, r5]
    78d4:	add	r1, sp, #16
    78d6:	str	r0, [sp, #16]
    78d8:	mov	r0, r4
    78da:	str	r3, [sp, #24]
    78dc:	add.w	r5, r4, #544	; 0x220
    78e0:	strh.w	ip, [sp, #20]
    78e4:	strh.w	lr, [sp, #22]
    78e8:	bl	5784 <MTPD::write(char const*, int) [clone .part.2]>
    78ec:	mov	r1, r9
    78ee:	mov	r0, r4
    78f0:	bl	5f1c <MTPD::GetObjectInfo(unsigned long)>
    78f4:	ldr	r3, [sp, #16]
    78f6:	ubfx	sl, r3, #0, #9
    78fa:	cmp.w	sl, #0
    78fe:	beq.w	734a <MTPD::loop()+0x1b6>

#elif defined(__IMXRT1062__)  

    int MTPD::push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    7902:	movs	r2, #60	; 0x3c
    7904:	mov	r1, sl
    7906:	mov	r0, r5
    7908:	bl	faf4 <usb_mtp_send>
    790c:	cmp	r0, #0
    790e:	ble.n	7902 <MTPD::loop()+0x76e>
    7910:	b.n	734a <MTPD::loop()+0x1b6>
      }
    }
  }

  void MTPD::GetDevicePropValue(uint32_t prop) {
    switch (prop) {
    7912:	movw	r2, #54274	; 0xd402
          case 0x1014:  // GetDevicePropDesc
              TRANSMIT(GetDevicePropDesc(p1));
              break;

          case 0x1015:  // GetDevicePropvalue
              TRANSMIT(GetDevicePropValue(p1));
    7916:	movw	sl, #9256	; 0x2428
    791a:	movs	r5, #0
    791c:	movw	fp, #9252	; 0x2424
    7920:	movs	r1, #1
      }
    }
  }

  void MTPD::GetDevicePropValue(uint32_t prop) {
    switch (prop) {
    7922:	cmp	r9, r2
          case 0x1014:  // GetDevicePropDesc
              TRANSMIT(GetDevicePropDesc(p1));
              break;

          case 0x1015:  // GetDevicePropvalue
              TRANSMIT(GetDevicePropValue(p1));
    7924:	str.w	r5, [r4, sl]
    7928:	strb.w	r1, [r4, fp]
      }
    }
  }

  void MTPD::GetDevicePropValue(uint32_t prop) {
    switch (prop) {
    792c:	beq.w	7a32 <MTPD::loop()+0x89e>
          case 0x1014:  // GetDevicePropDesc
              TRANSMIT(GetDevicePropDesc(p1));
              break;

          case 0x1015:  // GetDevicePropvalue
              TRANSMIT(GetDevicePropValue(p1));
    7930:	mov.w	lr, #12
    7934:	strb.w	r5, [r4, fp]
    7938:	movs	r5, #2
    793a:	add	r1, sp, #16
    793c:	mov	r2, lr
    793e:	mov	r0, r4
    7940:	strh.w	r3, [sp, #22]
    7944:	str.w	r8, [sp, #24]
    7948:	str.w	lr, [sp, #16]
    794c:	strh.w	r5, [sp, #20]
    7950:	bl	5784 <MTPD::write(char const*, int) [clone .part.2]>
    7954:	ldr	r3, [sp, #16]
    7956:	add.w	r5, r4, #544	; 0x220
    795a:	ubfx	sl, r3, #0, #9
    795e:	cmp.w	sl, #0
    7962:	beq.w	734a <MTPD::loop()+0x1b6>

#elif defined(__IMXRT1062__)  

    int MTPD::push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    7966:	movs	r2, #60	; 0x3c
    7968:	mov	r1, sl
    796a:	mov	r0, r5
    796c:	bl	faf4 <usb_mtp_send>
    7970:	cmp	r0, #0
    7972:	ble.n	7966 <MTPD::loop()+0x7d2>
    7974:	b.n	734a <MTPD::loop()+0x1b6>
    7976:	mov	r1, r9
    7978:	mov	r0, r4
    797a:	bl	58d0 <MTPD::GetDevicePropDesc(unsigned long) [clone .part.4]>
              if(!SendObject()) return_code = 0x2005;
              len = 12;
              break;

          case 0x1014:  // GetDevicePropDesc
              TRANSMIT(GetDevicePropDesc(p1));
    797e:	ldr.w	r3, [r4, sl]
    7982:	ldrh.w	lr, [r4, #38]	; 0x26
    7986:	mov.w	ip, #2
    798a:	add.w	r0, r3, #12
    798e:	strb.w	r5, [r4, fp]
    7992:	ldr	r3, [r4, #40]	; 0x28
    7994:	add	r1, sp, #16
    7996:	str	r0, [sp, #16]
    7998:	movs	r2, #12
    799a:	mov	r0, r4
    799c:	str.w	r5, [r4, sl]
    79a0:	strh.w	ip, [sp, #20]
    79a4:	strh.w	lr, [sp, #22]
    79a8:	str	r3, [sp, #24]
    79aa:	bl	5784 <MTPD::write(char const*, int) [clone .part.2]>
    79ae:	mov	r1, r9
    79b0:	mov	r0, r4
    79b2:	bl	58d0 <MTPD::GetDevicePropDesc(unsigned long) [clone .part.4]>
    79b6:	b.n	7838 <MTPD::loop()+0x6a4>
          case 0x1007:  // GetObjectHandles
            if (p2) 
            { return_code = 0x2014; // spec by format unsupported
            } else 
            { 
              TRANSMIT(GetObjectHandles(p1, p3));
    79b8:	movw	sl, #9256	; 0x2428
    79bc:	movs	r3, #1
    79be:	ldr	r1, [sp, #12]
    79c0:	movw	fp, #9252	; 0x2424
    79c4:	mov	r2, r5
    79c6:	mov	r0, r4
    79c8:	str.w	r1, [r4, sl]
    79cc:	mov	r1, r9
    79ce:	strb.w	r3, [r4, fp]
    79d2:	bl	5e90 <MTPD::GetObjectHandles(unsigned long, unsigned long)>
    79d6:	ldr.w	r3, [r4, sl]
    79da:	ldr	r1, [sp, #12]
    79dc:	mov.w	lr, #2
    79e0:	adds	r3, #12
    79e2:	ldrh.w	ip, [r4, #38]	; 0x26
    79e6:	strb.w	r1, [r4, fp]
    79ea:	movs	r2, #12
    79ec:	str.w	r1, [r4, sl]
    79f0:	mov	r0, r4
    79f2:	str	r3, [sp, #16]
    79f4:	add	r1, sp, #16
    79f6:	ldr	r3, [r4, #40]	; 0x28
    79f8:	strh.w	lr, [sp, #20]
    79fc:	str	r3, [sp, #24]
    79fe:	strh.w	ip, [sp, #22]
    7a02:	bl	5784 <MTPD::write(char const*, int) [clone .part.2]>
    7a06:	mov	r2, r5
    7a08:	mov	r1, r9
    7a0a:	mov	r0, r4
    7a0c:	add.w	r5, r4, #544	; 0x220
    7a10:	bl	5e90 <MTPD::GetObjectHandles(unsigned long, unsigned long)>
    7a14:	ldr	r3, [sp, #16]
    7a16:	ubfx	sl, r3, #0, #9
    7a1a:	cmp.w	sl, #0
    7a1e:	beq.w	734a <MTPD::loop()+0x1b6>

#elif defined(__IMXRT1062__)  

    int MTPD::push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    7a22:	movs	r2, #60	; 0x3c
    7a24:	mov	r1, sl
    7a26:	mov	r0, r5
    7a28:	bl	faf4 <usb_mtp_send>
    7a2c:	cmp	r0, #0
    7a2e:	ble.n	7a22 <MTPD::loop()+0x88e>
    7a30:	b.n	734a <MTPD::loop()+0x1b6>
  void MTPD::GetDevicePropValue(uint32_t prop) {
    switch (prop) {
      case 0xd402: // friendly name
        // This is the name we'll actually see in the windows explorer.
        // Should probably be configurable.
        writestring(MTP_NAME);
    7a32:	mov	r0, r4
    7a34:	ldr	r1, [pc, #60]	; (7a74 <MTPD::loop()+0x8e0>)
    7a36:	bl	5804 <MTPD::writestring(char const*)>
          case 0x1014:  // GetDevicePropDesc
              TRANSMIT(GetDevicePropDesc(p1));
              break;

          case 0x1015:  // GetDevicePropvalue
              TRANSMIT(GetDevicePropValue(p1));
    7a3a:	ldr.w	r3, [r4, sl]
    7a3e:	ldrh.w	lr, [r4, #38]	; 0x26
    7a42:	mov.w	ip, #2
    7a46:	add.w	r0, r3, #12
    7a4a:	strb.w	r5, [r4, fp]
    7a4e:	ldr	r3, [r4, #40]	; 0x28
    7a50:	add	r1, sp, #16
    7a52:	str	r0, [sp, #16]
    7a54:	movs	r2, #12
    7a56:	mov	r0, r4
    7a58:	str.w	r5, [r4, sl]
    7a5c:	strh.w	ip, [sp, #20]
    7a60:	strh.w	lr, [sp, #22]
    7a64:	str	r3, [sp, #24]
    7a66:	bl	5784 <MTPD::write(char const*, int) [clone .part.2]>
  void MTPD::GetDevicePropValue(uint32_t prop) {
    switch (prop) {
      case 0xd402: // friendly name
        // This is the name we'll actually see in the windows explorer.
        // Should probably be configurable.
        writestring(MTP_NAME);
    7a6a:	ldr	r1, [pc, #8]	; (7a74 <MTPD::loop()+0x8e0>)
    7a6c:	mov	r0, r4
    7a6e:	bl	5804 <MTPD::writestring(char const*)>
    7a72:	b.n	7954 <MTPD::loop()+0x7c0>
    7a74:	.word	0x200003d4

00007a78 <usb_init_events>:
    
    static void txEvent_event(transfer_t *t) { mtp_txEventcount++;}
    static void rxEvent_event(transfer_t *t) { mtp_rxEventcount++;}

    int usb_init_events(void)
    {
    7a78:	push	{r4, lr}
        usb_config_tx(MTP_EVENT_ENDPOINT, MTP_EVENT_SIZE, 0, txEvent_event);
    7a7a:	ldr	r3, [pc, #48]	; (7aac <usb_init_events+0x34>)
    7a7c:	movs	r2, #0
        //	
        usb_config_rx(MTP_EVENT_ENDPOINT, MTP_EVENT_SIZE, 0, rxEvent_event);
        usb_prepare_transfer(rx_event_transfer + 0, rx_event_buffer, MTP_EVENT_SIZE, 0);
    7a7e:	ldr	r4, [pc, #48]	; (7ab0 <usb_init_events+0x38>)
    static void txEvent_event(transfer_t *t) { mtp_txEventcount++;}
    static void rxEvent_event(transfer_t *t) { mtp_rxEventcount++;}

    int usb_init_events(void)
    {
        usb_config_tx(MTP_EVENT_ENDPOINT, MTP_EVENT_SIZE, 0, txEvent_event);
    7a80:	movs	r1, #32
    7a82:	movs	r0, #5
    7a84:	bl	ee68 <usb_config_tx>
        //	
        usb_config_rx(MTP_EVENT_ENDPOINT, MTP_EVENT_SIZE, 0, rxEvent_event);
    7a88:	ldr	r3, [pc, #40]	; (7ab4 <usb_init_events+0x3c>)
    7a8a:	movs	r2, #0
    7a8c:	movs	r1, #32
    7a8e:	movs	r0, #5
    7a90:	bl	ee04 <usb_config_rx>
        usb_prepare_transfer(rx_event_transfer + 0, rx_event_buffer, MTP_EVENT_SIZE, 0);
    7a94:	mov	r0, r4
    7a96:	movs	r3, #0
    7a98:	movs	r2, #32
    7a9a:	ldr	r1, [pc, #28]	; (7ab8 <usb_init_events+0x40>)
    7a9c:	bl	eed0 <usb_prepare_transfer>
        usb_receive(MTP_EVENT_ENDPOINT, rx_event_transfer + 0);
    7aa0:	mov	r1, r4
    7aa2:	movs	r0, #5
    7aa4:	bl	ef28 <usb_receive>
        return 1;
    }
    7aa8:	movs	r0, #1
    7aaa:	pop	{r4, pc}
    7aac:	.word	0x00005719
    7ab0:	.word	0x20043f20
    7ab4:	.word	0x00005729
    7ab8:	.word	0x20043ea0

00007abc <usb_mtp_sendEvent>:
      NVIC_ENABLE_IRQ(IRQ_USB1);
      return MTP_EVENT_SIZE;
    }

    int usb_mtp_sendEvent(const void *buffer, uint32_t len, uint32_t timeout)
    {
    7abc:	push	{r3, r4, r5, lr}
    7abe:	mov	r5, r0
    7ac0:	mov	r4, r1
      transfer_t *xfer = tx_event_transfer;
      int ret= usb_mtp_wait(xfer, timeout); if(ret<=0) return ret;
    7ac2:	ldr	r0, [pc, #44]	; (7af0 <usb_mtp_sendEvent+0x34>)
    7ac4:	mov	r1, r2
    7ac6:	bl	5738 <usb_mtp_wait>
    7aca:	cmp	r0, #0
    7acc:	ble.n	7aee <usb_mtp_sendEvent+0x32>

      uint8_t *eventdata = tx_event_buffer;
      memcpy(eventdata, buffer, len);
    7ace:	mov	r1, r5
    7ad0:	mov	r2, r4
    7ad2:	ldr	r0, [pc, #32]	; (7af4 <usb_mtp_sendEvent+0x38>)
    7ad4:	bl	db14 <memcpy>
      usb_prepare_transfer(xfer, eventdata, len, 0);
    7ad8:	movs	r3, #0
    7ada:	mov	r2, r4
    7adc:	ldr	r1, [pc, #20]	; (7af4 <usb_mtp_sendEvent+0x38>)
    7ade:	ldr	r0, [pc, #16]	; (7af0 <usb_mtp_sendEvent+0x34>)
    7ae0:	bl	eed0 <usb_prepare_transfer>
      usb_transmit(MTP_EVENT_ENDPOINT, xfer);
    7ae4:	movs	r0, #5
    7ae6:	ldr	r1, [pc, #8]	; (7af0 <usb_mtp_sendEvent+0x34>)
    7ae8:	bl	ef00 <usb_transmit>
      return len;
    7aec:	mov	r0, r4
    }
    7aee:	pop	{r3, r4, r5, pc}
    7af0:	.word	0x20043ee0
    7af4:	.word	0x20043f60

00007af8 <MTPD::send_Event(unsigned short)>:

  #endif
  const uint32_t EVENT_TIMEOUT=60;

  int MTPD::send_Event(uint16_t eventCode)
  {
    7af8:	push	{r4, r5, r6, lr}
    MTPContainer event;
    event.len = 12;
    event.op =eventCode ;
    event.type = MTP_CONTAINER_TYPE_EVENT; 
    event.transaction_id=TID;
    7afa:	movw	r2, #9260	; 0x242c

  #endif
  const uint32_t EVENT_TIMEOUT=60;

  int MTPD::send_Event(uint16_t eventCode)
  {
    7afe:	sub	sp, #32
    MTPContainer event;
    event.len = 12;
    7b00:	movs	r4, #12
    event.op =eventCode ;
    event.type = MTP_CONTAINER_TYPE_EVENT; 
    event.transaction_id=TID;
    event.params[0]=0;
    7b02:	movs	r3, #0
  {
    MTPContainer event;
    event.len = 12;
    event.op =eventCode ;
    event.type = MTP_CONTAINER_TYPE_EVENT; 
    event.transaction_id=TID;
    7b04:	ldr	r6, [r0, r2]
  int MTPD::send_Event(uint16_t eventCode)
  {
    MTPContainer event;
    event.len = 12;
    event.op =eventCode ;
    event.type = MTP_CONTAINER_TYPE_EVENT; 
    7b06:	movs	r5, #4

  int MTPD::send_Event(uint16_t eventCode)
  {
    MTPContainer event;
    event.len = 12;
    event.op =eventCode ;
    7b08:	strh.w	r1, [sp, #6]
    event.type = MTP_CONTAINER_TYPE_EVENT; 
    event.transaction_id=TID;
    event.params[0]=0;
    event.params[1]=0;
    event.params[2]=0;
    return usb_mtp_sendEvent((const void *) &event, event.len, EVENT_TIMEOUT);
    7b0c:	movs	r2, #60	; 0x3c
    7b0e:	mov	r1, r4
    7b10:	mov	r0, sp
  {
    MTPContainer event;
    event.len = 12;
    event.op =eventCode ;
    event.type = MTP_CONTAINER_TYPE_EVENT; 
    event.transaction_id=TID;
    7b12:	str	r6, [sp, #8]
  const uint32_t EVENT_TIMEOUT=60;

  int MTPD::send_Event(uint16_t eventCode)
  {
    MTPContainer event;
    event.len = 12;
    7b14:	str	r4, [sp, #0]
    event.op =eventCode ;
    event.type = MTP_CONTAINER_TYPE_EVENT; 
    7b16:	strh.w	r5, [sp, #4]
    event.transaction_id=TID;
    event.params[0]=0;
    7b1a:	str	r3, [sp, #12]
    event.params[1]=0;
    7b1c:	str	r3, [sp, #16]
    event.params[2]=0;
    7b1e:	str	r3, [sp, #20]
    return usb_mtp_sendEvent((const void *) &event, event.len, EVENT_TIMEOUT);
    7b20:	bl	7abc <usb_mtp_sendEvent>
  }
    7b24:	add	sp, #32
    7b26:	pop	{r4, r5, r6, pc}

00007b28 <MTPD::send_DeviceResetEvent()>:
    event.params[2]=p3;
    return usb_mtp_sendEvent((const void *) &event, event.len, EVENT_TIMEOUT);
  }

  int MTPD::send_DeviceResetEvent(void) 
  { return send_Event(MTP_EVENT_DEVICE_RESET); } 
    7b28:	movw	r1, #16395	; 0x400b
    7b2c:	b.w	7af8 <MTPD::send_Event(unsigned short)>

00007b30 <EventResponder::triggerEvent(int, void*)>:
	}

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
    7b30:	push	{r4}
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    7b32:	ldrb	r4, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    7b34:	str	r1, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    7b36:	cmp	r4, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    7b38:	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    7b3a:	beq.n	7b44 <EventResponder::triggerEvent(int, void*)+0x14>
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
		}
	}
    7b3c:	ldr.w	r4, [sp], #4
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    7b40:	b.w	fd38 <EventResponder::triggerEventNotImmediate()>
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    7b44:	ldr	r3, [r0, #8]
		} else {
			triggerEventNotImmediate();
		}
	}
    7b46:	ldr.w	r4, [sp], #4
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    7b4a:	bx	r3

00007b4c <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]>:
	if (interruptMask[n >> 5] == 0) {
		interruptMasksUsed &= ~(1 << (n >> 5));
	}
}

void SPIClass::transfer(const void * buf, void * retbuf, size_t count)
    7b4c:	push	{r4, r5, r6}
    uint8_t *p_read = (uint8_t*)retbuf;
    size_t count_read = count;

	// Pass 1 keep it simple and don't try packing 8 bits into 16 yet..
	// Lets clear the reader queue
	port().CR = LPSPI_CR_RRF | LPSPI_CR_MEN;	// clear the queue and make sure still enabled. 
    7b4e:	movw	r5, #513	; 0x201
    7b52:	ldr	r4, [r0, #0]
    7b54:	str	r5, [r4, #16]

	while (count > 0) {
    7b56:	cbz	r3, 7ba0 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]+0x54>
    7b58:	mov	r6, r3
		// Push out the next byte; 
		port().TDR = p_write? *p_write++ : _transferWriteFill;
    7b5a:	cbz	r1, 7b9a <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]+0x4e>
    7b5c:	ldrb	r5, [r1, #0]
    7b5e:	adds	r1, #1
		count--; // how many bytes left to output.
    7b60:	subs	r3, #1
	// Lets clear the reader queue
	port().CR = LPSPI_CR_RRF | LPSPI_CR_MEN;	// clear the queue and make sure still enabled. 

	while (count > 0) {
		// Push out the next byte; 
		port().TDR = p_write? *p_write++ : _transferWriteFill;
    7b62:	str	r5, [r4, #100]	; 0x64
		count--; // how many bytes left to output.
		// Make sure queue is not full before pushing next byte out
		do {
			if ((port().RSR & LPSPI_RSR_RXEMPTY) == 0)  {
    7b64:	ldr	r5, [r4, #112]	; 0x70
    7b66:	lsls	r5, r5, #30
    7b68:	bmi.n	7b78 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]+0x2c>
				uint8_t b = port().RDR;  // Read any pending RX bytes in
    7b6a:	ldr	r5, [r4, #116]	; 0x74
				if (p_read) *p_read++ = b; 
				count_read--;
    7b6c:	subs	r6, #1
		port().TDR = p_write? *p_write++ : _transferWriteFill;
		count--; // how many bytes left to output.
		// Make sure queue is not full before pushing next byte out
		do {
			if ((port().RSR & LPSPI_RSR_RXEMPTY) == 0)  {
				uint8_t b = port().RDR;  // Read any pending RX bytes in
    7b6e:	uxtb	r5, r5
				if (p_read) *p_read++ = b; 
    7b70:	cbz	r2, 7b78 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]+0x2c>
    7b72:	strb	r5, [r2, #0]
    7b74:	adds	r2, #1
    7b76:	ldr	r4, [r0, #0]
				count_read--;
			}
		} while ((port().SR & LPSPI_SR_TDF) == 0) ;
    7b78:	ldr	r5, [r4, #20]
	while (count > 0) {
		// Push out the next byte; 
		port().TDR = p_write? *p_write++ : _transferWriteFill;
		count--; // how many bytes left to output.
		// Make sure queue is not full before pushing next byte out
		do {
    7b7a:	lsls	r5, r5, #31
    7b7c:	bpl.n	7b64 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]+0x18>

	// Pass 1 keep it simple and don't try packing 8 bits into 16 yet..
	// Lets clear the reader queue
	port().CR = LPSPI_CR_RRF | LPSPI_CR_MEN;	// clear the queue and make sure still enabled. 

	while (count > 0) {
    7b7e:	cmp	r3, #0
    7b80:	bne.n	7b5a <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]+0xe>
		} while ((port().SR & LPSPI_SR_TDF) == 0) ;

	}

	// now lets wait for all of the read bytes to be returned...
	while (count_read) {
    7b82:	cbz	r6, 7ba0 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]+0x54>
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
private:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    7b84:	ldr	r1, [r0, #0]
		if ((port().RSR & LPSPI_RSR_RXEMPTY) == 0)  {
    7b86:	ldr	r3, [r1, #112]	; 0x70
    7b88:	lsls	r3, r3, #30
    7b8a:	bmi.n	7b86 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]+0x3a>
			uint8_t b = port().RDR;  // Read any pending RX bytes in
    7b8c:	ldr	r3, [r1, #116]	; 0x74
    7b8e:	uxtb	r3, r3
			if (p_read) *p_read++ = b; 
    7b90:	cbz	r2, 7b96 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]+0x4a>
    7b92:	strb	r3, [r2, #0]
    7b94:	adds	r2, #1
			count_read--;
    7b96:	subs	r6, #1
    7b98:	b.n	7b82 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]+0x36>
	// Lets clear the reader queue
	port().CR = LPSPI_CR_RRF | LPSPI_CR_MEN;	// clear the queue and make sure still enabled. 

	while (count > 0) {
		// Push out the next byte; 
		port().TDR = p_write? *p_write++ : _transferWriteFill;
    7b9a:	ldrb.w	r5, [r0, #60]	; 0x3c
    7b9e:	b.n	7b60 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]+0x14>
			uint8_t b = port().RDR;  // Read any pending RX bytes in
			if (p_read) *p_read++ = b; 
			count_read--;
		}
	}
}
    7ba0:	pop	{r4, r5, r6}
    7ba2:	bx	lr

00007ba4 <_spi_dma_rxISR0()>:
	// Save back out
	port().TCR = tcr;

}

void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    7ba4:	push	{r4, r5, r6, r7, lr}

//-------------------------------------------------------------------------
// DMA RX ISR
//-------------------------------------------------------------------------
void SPIClass::dma_rxisr(void) {
	_dmaRX->clearInterrupt();
    7ba6:	ldr	r4, [pc, #192]	; (7c68 <_spi_dma_rxISR0()+0xc4>)
	void detachInterrupt(void) {
		NVIC_DISABLE_IRQ(IRQ_DMA_CH0 + channel);
	}

	void clearInterrupt(void) {
		DMA_CINT = channel;
    7ba8:	ldr	r3, [pc, #192]	; (7c6c <_spi_dma_rxISR0()+0xc8>)
    7baa:	ldr	r0, [r4, #72]	; 0x48
	_dmaTX->clearComplete();
    7bac:	ldr	r5, [r4, #68]	; 0x44
    7bae:	ldrb	r1, [r0, #4]
	_dmaRX->clearComplete();

	if (_dma_count_remaining) {
    7bb0:	ldr	r2, [r4, #64]	; 0x40
    7bb2:	strb	r1, [r3, #31]
    7bb4:	ldrb	r1, [r5, #4]
	bool complete(void) {
		if (TCD->CSR & DMA_TCD_CSR_DONE) return true;
		return false;
	}
	void clearComplete(void) {
		DMA_CDNE = channel;
    7bb6:	strb	r1, [r3, #28]
    7bb8:	ldrb	r1, [r0, #4]
    7bba:	strb	r1, [r3, #28]
    7bbc:	cbz	r2, 7bfe <_spi_dma_rxISR0()+0x5a>
		// What do I need to do to start it back up again...
		// We will use the BITR/CITR from RX as TX may have prefed some stuff
		if (_dma_count_remaining > MAX_DMA_COUNT) {
    7bbe:	cmp.w	r2, #32768	; 0x8000
    7bc2:	bcs.n	7bf6 <_spi_dma_rxISR0()+0x52>
    7bc4:	ldr	r3, [r5, #0]
#ifndef TRANSFER_COUNT_FIXED
inline void DMAChanneltransferCount(DMAChannel * dmac, unsigned int len) {
	// note does no validation of length...
	DMABaseClass::TCD_t *tcd = dmac->TCD;
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
		tcd->BITER = len & 0x7fff;
    7bc6:	uxth	r2, r2
//=========================================================================
#ifndef TRANSFER_COUNT_FIXED
inline void DMAChanneltransferCount(DMAChannel * dmac, unsigned int len) {
	// note does no validation of length...
	DMABaseClass::TCD_t *tcd = dmac->TCD;
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    7bc8:	ldrh	r1, [r3, #30]
    7bca:	lsls	r6, r1, #16
    7bcc:	bmi.n	7c46 <_spi_dma_rxISR0()+0xa2>
		tcd->BITER = len & 0x7fff;
    7bce:	strh	r2, [r3, #30]
	} else {
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
	}
	tcd->CITER = tcd->BITER; 
    7bd0:	ldrh	r1, [r3, #30]
    7bd2:	uxth	r1, r1
    7bd4:	strh	r1, [r3, #22]
    7bd6:	ldr	r3, [r0, #0]
//=========================================================================
#ifndef TRANSFER_COUNT_FIXED
inline void DMAChanneltransferCount(DMAChannel * dmac, unsigned int len) {
	// note does no validation of length...
	DMABaseClass::TCD_t *tcd = dmac->TCD;
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    7bd8:	ldrh	r1, [r3, #30]
    7bda:	lsls	r1, r1, #16
    7bdc:	bmi.n	7c38 <_spi_dma_rxISR0()+0x94>
		tcd->BITER = len & 0x7fff;
	} else {
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
    7bde:	strh	r2, [r3, #30]
			_dma_count_remaining -= MAX_DMA_COUNT;
		} else {
			DMAChanneltransferCount(_dmaTX, _dma_count_remaining);
			DMAChanneltransferCount(_dmaRX, _dma_count_remaining);

			_dma_count_remaining = 0;
    7be0:	movs	r1, #0
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
		tcd->BITER = len & 0x7fff;
	} else {
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
	}
	tcd->CITER = tcd->BITER; 
    7be2:	ldrh	r2, [r3, #30]
    7be4:	uxth	r2, r2
    7be6:	strh	r2, [r3, #22]
			_dma_count_remaining -= MAX_DMA_COUNT;
		} else {
			DMAChanneltransferCount(_dmaTX, _dma_count_remaining);
			DMAChanneltransferCount(_dmaRX, _dma_count_remaining);

			_dma_count_remaining = 0;
    7be8:	str	r1, [r4, #64]	; 0x40
    7bea:	ldrb	r2, [r0, #4]
	/***************************************/
	/**    Enable / Disable               **/
	/***************************************/

	void enable(void) {
		DMA_SERQ = channel;
    7bec:	ldr	r3, [pc, #124]	; (7c6c <_spi_dma_rxISR0()+0xc8>)
    7bee:	strb	r2, [r3, #27]
    7bf0:	ldrb	r2, [r5, #4]
    7bf2:	strb	r2, [r3, #27]
    7bf4:	pop	{r4, r5, r6, r7, pc}

	if (_dma_count_remaining) {
		// What do I need to do to start it back up again...
		// We will use the BITR/CITR from RX as TX may have prefed some stuff
		if (_dma_count_remaining > MAX_DMA_COUNT) {
			_dma_count_remaining -= MAX_DMA_COUNT;
    7bf6:	ldr	r3, [pc, #120]	; (7c70 <_spi_dma_rxISR0()+0xcc>)
    7bf8:	add	r3, r2
    7bfa:	str	r3, [r4, #64]	; 0x40
    7bfc:	b.n	7bea <_spi_dma_rxISR0()+0x46>

		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
		port().SR = 0x3f00;	// clear out all of the other status...

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
		_dma_event_responder->triggerEvent();
    7bfe:	ldr	r0, [r4, #76]	; 0x4c
		}
		_dmaRX->enable();
		_dmaTX->enable();
	} else {

		port().FCR = LPSPI_FCR_TXWATER(15); // _spi_fcr_save;	// restore the FSR status... 
    7c00:	movs	r5, #15
    7c02:	ldr	r3, [r4, #0]
 		port().DER = 0;		// DMA no longer doing TX (or RX)

		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
    7c04:	movw	lr, #769	; 0x301
		port().SR = 0x3f00;	// clear out all of the other status...

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
		_dma_event_responder->triggerEvent();
    7c08:	ldr	r1, [r0, #0]

		port().FCR = LPSPI_FCR_TXWATER(15); // _spi_fcr_save;	// restore the FSR status... 
 		port().DER = 0;		// DMA no longer doing TX (or RX)

		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
		port().SR = 0x3f00;	// clear out all of the other status...
    7c0a:	mov.w	r7, #16128	; 0x3f00
		}
		_dmaRX->enable();
		_dmaTX->enable();
	} else {

		port().FCR = LPSPI_FCR_TXWATER(15); // _spi_fcr_save;	// restore the FSR status... 
    7c0e:	str	r5, [r3, #88]	; 0x58
 		port().DER = 0;		// DMA no longer doing TX (or RX)

		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
		port().SR = 0x3f00;	// clear out all of the other status...

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
    7c10:	movs	r6, #3
		_dma_event_responder->triggerEvent();
    7c12:	ldr	r5, [r1, #0]
    7c14:	ldr	r1, [pc, #92]	; (7c74 <_spi_dma_rxISR0()+0xd0>)
		_dmaRX->enable();
		_dmaTX->enable();
	} else {

		port().FCR = LPSPI_FCR_TXWATER(15); // _spi_fcr_save;	// restore the FSR status... 
 		port().DER = 0;		// DMA no longer doing TX (or RX)
    7c16:	str	r2, [r3, #28]
    7c18:	cmp	r5, r1

		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
    7c1a:	str.w	lr, [r3, #16]
		port().SR = 0x3f00;	// clear out all of the other status...
    7c1e:	str	r7, [r3, #20]

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
    7c20:	strb.w	r6, [r4, #61]	; 0x3d
    7c24:	bne.n	7c56 <_spi_dma_rxISR0()+0xb2>
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    7c26:	ldrb	r3, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    7c28:	str	r2, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    7c2a:	cmp	r3, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    7c2c:	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    7c2e:	beq.n	7c60 <_spi_dma_rxISR0()+0xbc>
	// Save back out
	port().TCR = tcr;

}

void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    7c30:	ldmia.w	sp!, {r4, r5, r6, r7, lr}
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    7c34:	b.w	fd38 <EventResponder::triggerEventNotImmediate()>
	// note does no validation of length...
	DMABaseClass::TCD_t *tcd = dmac->TCD;
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
		tcd->BITER = len & 0x7fff;
	} else {
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
    7c38:	ldrh	r1, [r3, #30]
    7c3a:	ubfx	r2, r2, #0, #9
    7c3e:	and.w	r1, r1, #65024	; 0xfe00
    7c42:	orrs	r2, r1
    7c44:	b.n	7bde <_spi_dma_rxISR0()+0x3a>
    7c46:	ldrh	r1, [r3, #30]
    7c48:	ubfx	r6, r2, #0, #9
    7c4c:	and.w	r1, r1, #65024	; 0xfe00
    7c50:	orrs	r1, r6
    7c52:	strh	r1, [r3, #30]
    7c54:	b.n	7bd0 <_spi_dma_rxISR0()+0x2c>

		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
		port().SR = 0x3f00;	// clear out all of the other status...

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
		_dma_event_responder->triggerEvent();
    7c56:	mov	r3, r5
    7c58:	mov	r1, r2
	// Save back out
	port().TCR = tcr;

}

void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    7c5a:	ldmia.w	sp!, {r4, r5, r6, r7, lr}

		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
		port().SR = 0x3f00;	// clear out all of the other status...

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
		_dma_event_responder->triggerEvent();
    7c5e:	bx	r3
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    7c60:	ldr	r3, [r0, #8]
	// Save back out
	port().TCR = tcr;

}

void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    7c62:	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    7c66:	bx	r3
    7c68:	.word	0x20000b60
    7c6c:	.word	0x400e8000
    7c70:	.word	0xffff8001
    7c74:	.word	0x00007b31

00007c78 <SPIClass::begin()>:
	const SPI_Hardware_t & hardware() { return *(const SPI_Hardware_t *)hardware_addr; }
    7c78:	ldr	r3, [r0, #4]
#elif defined(__arm__) && defined(TEENSYDUINO) && (defined(__IMXRT1052__) || defined(__IMXRT1062__))

//#include "debug/printf.h"

void SPIClass::begin()
{
    7c7a:	push	{r4, r5, r6, r7, lr}

	// CBCMR[LPSPI_CLK_SEL] - PLL2 = 528 MHz
	// CBCMR[LPSPI_PODF] - div4 = 132 MHz


	hardware().clock_gate_register &= ~hardware().clock_gate_mask;
    7c7c:	ldmia.w	r3, {r1, r7}

	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_LPSPI_PODF_MASK | CCM_CBCMR_LPSPI_CLK_SEL_MASK)) |
    7c80:	ldr.w	lr, [pc, #508]	; 7e80 <SPIClass::begin()+0x208>

	uint32_t fastio = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_SPEED(2);
	//uint32_t fastio = IOMUXC_PAD_DSE(6) | IOMUXC_PAD_SPEED(1);
	//uint32_t fastio = IOMUXC_PAD_DSE(3) | IOMUXC_PAD_SPEED(3);
	//Serial.printf("SPI MISO: %d MOSI: %d, SCK: %d\n", hardware().miso_pin[miso_pin_index], hardware().mosi_pin[mosi_pin_index], hardware().sck_pin[sck_pin_index]);
	*(portControlRegister(hardware().miso_pin[miso_pin_index])) = fastio;
    7c84:	movs	r6, #184	; 0xb8

	// CBCMR[LPSPI_CLK_SEL] - PLL2 = 528 MHz
	// CBCMR[LPSPI_PODF] - div4 = 132 MHz


	hardware().clock_gate_register &= ~hardware().clock_gate_mask;
    7c86:	ldr	r2, [r1, #0]
	hardware().mosi_select_input_register = hardware().mosi_select_val[mosi_pin_index];

	//digitalWriteFast(10, HIGH);
	//pinMode(10, OUTPUT);
	//digitalWriteFast(10, HIGH);
	port().CR = LPSPI_CR_RST;
    7c88:	movs	r5, #2


	hardware().clock_gate_register &= ~hardware().clock_gate_mask;

	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_LPSPI_PODF_MASK | CCM_CBCMR_LPSPI_CLK_SEL_MASK)) |
		CCM_CBCMR_LPSPI_PODF(2) | CCM_CBCMR_LPSPI_CLK_SEL(1); // pg 714
    7c8a:	ldr	r4, [pc, #468]	; (7e60 <SPIClass::begin()+0x1e8>)

	// CBCMR[LPSPI_CLK_SEL] - PLL2 = 528 MHz
	// CBCMR[LPSPI_PODF] - div4 = 132 MHz


	hardware().clock_gate_register &= ~hardware().clock_gate_mask;
    7c8c:	bic.w	r2, r2, r7

	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_LPSPI_PODF_MASK | CCM_CBCMR_LPSPI_CLK_SEL_MASK)) |
		CCM_CBCMR_LPSPI_PODF(2) | CCM_CBCMR_LPSPI_CLK_SEL(1); // pg 714
    7c90:	ldr	r7, [pc, #464]	; (7e64 <SPIClass::begin()+0x1ec>)

	// CBCMR[LPSPI_CLK_SEL] - PLL2 = 528 MHz
	// CBCMR[LPSPI_PODF] - div4 = 132 MHz


	hardware().clock_gate_register &= ~hardware().clock_gate_mask;
    7c92:	str	r2, [r1, #0]

	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_LPSPI_PODF_MASK | CCM_CBCMR_LPSPI_CLK_SEL_MASK)) |
    7c94:	ldr.w	r2, [lr, #24]
		CCM_CBCMR_LPSPI_PODF(2) | CCM_CBCMR_LPSPI_CLK_SEL(1); // pg 714
    7c98:	ands	r4, r2

	uint32_t fastio = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_SPEED(2);
	//uint32_t fastio = IOMUXC_PAD_DSE(6) | IOMUXC_PAD_SPEED(1);
	//uint32_t fastio = IOMUXC_PAD_DSE(3) | IOMUXC_PAD_SPEED(3);
	//Serial.printf("SPI MISO: %d MOSI: %d, SCK: %d\n", hardware().miso_pin[miso_pin_index], hardware().mosi_pin[mosi_pin_index], hardware().sck_pin[sck_pin_index]);
	*(portControlRegister(hardware().miso_pin[miso_pin_index])) = fastio;
    7c9a:	ldr	r2, [pc, #460]	; (7e68 <SPIClass::begin()+0x1f0>)


	hardware().clock_gate_register &= ~hardware().clock_gate_mask;

	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_LPSPI_PODF_MASK | CCM_CBCMR_LPSPI_CLK_SEL_MASK)) |
		CCM_CBCMR_LPSPI_PODF(2) | CCM_CBCMR_LPSPI_CLK_SEL(1); // pg 714
    7c9c:	orrs	r7, r4
	//digitalWriteFast(10, HIGH);
	port().CR = LPSPI_CR_RST;

	// Lets initialize the Transmit FIFO watermark to FIFO size - 1... 
	// BUGBUG:: I assume queue of 16 for now...
	port().FCR = LPSPI_FCR_TXWATER(15);
    7c9e:	movs	r4, #15


	hardware().clock_gate_register &= ~hardware().clock_gate_mask;

	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_LPSPI_PODF_MASK | CCM_CBCMR_LPSPI_CLK_SEL_MASK)) |
		CCM_CBCMR_LPSPI_PODF(2) | CCM_CBCMR_LPSPI_CLK_SEL(1); // pg 714
    7ca0:	str.w	r7, [lr, #24]

	uint32_t fastio = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_SPEED(2);
	//uint32_t fastio = IOMUXC_PAD_DSE(6) | IOMUXC_PAD_SPEED(1);
	//uint32_t fastio = IOMUXC_PAD_DSE(3) | IOMUXC_PAD_SPEED(3);
	//Serial.printf("SPI MISO: %d MOSI: %d, SCK: %d\n", hardware().miso_pin[miso_pin_index], hardware().mosi_pin[mosi_pin_index], hardware().sck_pin[sck_pin_index]);
	*(portControlRegister(hardware().miso_pin[miso_pin_index])) = fastio;
    7ca4:	ldrb	r7, [r0, #16]
    7ca6:	add	r7, r3
    7ca8:	ldrb	r7, [r7, #16]
    7caa:	add.w	r7, r2, r7, lsl #4
    7cae:	ldr	r7, [r7, #8]
    7cb0:	str	r6, [r7, #0]
	*(portControlRegister(hardware().mosi_pin[mosi_pin_index])) = fastio;
    7cb2:	ldrb	r7, [r0, #17]
    7cb4:	add	r7, r3
    7cb6:	ldrb.w	r7, [r7, #32]
    7cba:	add.w	r7, r2, r7, lsl #4
    7cbe:	ldr	r7, [r7, #8]
    7cc0:	str	r6, [r7, #0]
	*(portControlRegister(hardware().sck_pin[sck_pin_index])) = fastio;
    7cc2:	ldrb	r7, [r0, #18]
    7cc4:	add	r7, r3
    7cc6:	ldrb.w	r7, [r7, #48]	; 0x30
    7cca:	add.w	r7, r2, r7, lsl #4
    7cce:	ldr	r7, [r7, #8]
    7cd0:	str	r6, [r7, #0]

	//printf("CBCMR = %08lX\n", CCM_CBCMR);
	hardware().clock_gate_register |= hardware().clock_gate_mask;
    7cd2:	ldr	r7, [r1, #0]
    7cd4:	ldr	r6, [r3, #4]
    7cd6:	orrs	r6, r7
    7cd8:	str	r6, [r1, #0]
	*(portConfigRegister(hardware().miso_pin[miso_pin_index])) = hardware().miso_mux[miso_pin_index];
    7cda:	ldrb	r1, [r0, #16]
    7cdc:	adds	r6, r3, r1
    7cde:	add.w	r1, r3, r1, lsl #2
    7ce2:	ldrb	r6, [r6, #16]
    7ce4:	ldr	r7, [r1, #20]
    7ce6:	add.w	r1, r2, r6, lsl #4
    7cea:	ldr	r1, [r1, #4]
    7cec:	str	r7, [r1, #0]
	*(portConfigRegister(hardware().mosi_pin [mosi_pin_index])) = hardware().mosi_mux[mosi_pin_index];
    7cee:	ldrb	r1, [r0, #17]
    7cf0:	adds	r6, r3, r1
    7cf2:	add.w	r1, r3, r1, lsl #2
    7cf6:	ldrb.w	r6, [r6, #32]
    7cfa:	ldr	r7, [r1, #36]	; 0x24
    7cfc:	add.w	r1, r2, r6, lsl #4
    7d00:	ldr	r1, [r1, #4]
    7d02:	str	r7, [r1, #0]
	*(portConfigRegister(hardware().sck_pin [sck_pin_index])) = hardware().sck_mux[sck_pin_index];
    7d04:	ldrb	r1, [r0, #18]

	// Set the Mux pins 
	//Serial.println("SPI: Set Input select registers");
	hardware().sck_select_input_register = hardware().sck_select_val[sck_pin_index];
    7d06:	ldr.w	lr, [r3, #60]	; 0x3c

	//printf("CBCMR = %08lX\n", CCM_CBCMR);
	hardware().clock_gate_register |= hardware().clock_gate_mask;
	*(portConfigRegister(hardware().miso_pin[miso_pin_index])) = hardware().miso_mux[miso_pin_index];
	*(portConfigRegister(hardware().mosi_pin [mosi_pin_index])) = hardware().mosi_mux[mosi_pin_index];
	*(portConfigRegister(hardware().sck_pin [sck_pin_index])) = hardware().sck_mux[sck_pin_index];
    7d0a:	adds	r6, r3, r1
    7d0c:	add.w	r1, r3, r1, lsl #2

	// Set the Mux pins 
	//Serial.println("SPI: Set Input select registers");
	hardware().sck_select_input_register = hardware().sck_select_val[sck_pin_index];
	hardware().miso_select_input_register = hardware().miso_select_val[miso_pin_index];
    7d10:	ldr	r7, [r3, #28]

	//printf("CBCMR = %08lX\n", CCM_CBCMR);
	hardware().clock_gate_register |= hardware().clock_gate_mask;
	*(portConfigRegister(hardware().miso_pin[miso_pin_index])) = hardware().miso_mux[miso_pin_index];
	*(portConfigRegister(hardware().mosi_pin [mosi_pin_index])) = hardware().mosi_mux[mosi_pin_index];
	*(portConfigRegister(hardware().sck_pin [sck_pin_index])) = hardware().sck_mux[sck_pin_index];
    7d12:	ldrb.w	r6, [r6, #48]	; 0x30
    7d16:	ldr	r1, [r1, #52]	; 0x34
    7d18:	add.w	r2, r2, r6, lsl #4

	// Set the Mux pins 
	//Serial.println("SPI: Set Input select registers");
	hardware().sck_select_input_register = hardware().sck_select_val[sck_pin_index];
	hardware().miso_select_input_register = hardware().miso_select_val[miso_pin_index];
	hardware().mosi_select_input_register = hardware().mosi_select_val[mosi_pin_index];
    7d1c:	ldr	r6, [r3, #44]	; 0x2c

	//printf("CBCMR = %08lX\n", CCM_CBCMR);
	hardware().clock_gate_register |= hardware().clock_gate_mask;
	*(portConfigRegister(hardware().miso_pin[miso_pin_index])) = hardware().miso_mux[miso_pin_index];
	*(portConfigRegister(hardware().mosi_pin [mosi_pin_index])) = hardware().mosi_mux[mosi_pin_index];
	*(portConfigRegister(hardware().sck_pin [sck_pin_index])) = hardware().sck_mux[sck_pin_index];
    7d1e:	ldr	r2, [r2, #4]
    7d20:	str	r1, [r2, #0]

	// Set the Mux pins 
	//Serial.println("SPI: Set Input select registers");
	hardware().sck_select_input_register = hardware().sck_select_val[sck_pin_index];
    7d22:	ldrb	r1, [r0, #18]
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
private:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    7d24:	ldr	r2, [r0, #0]
    7d26:	add	r1, r3
    7d28:	ldrb.w	r1, [r1, #56]	; 0x38
    7d2c:	str.w	r1, [lr]
	hardware().miso_select_input_register = hardware().miso_select_val[miso_pin_index];
    7d30:	ldrb	r1, [r0, #16]
    7d32:	add	r1, r3
    7d34:	ldrb	r1, [r1, #24]
    7d36:	str	r1, [r7, #0]
	hardware().mosi_select_input_register = hardware().mosi_select_val[mosi_pin_index];
    7d38:	ldrb	r1, [r0, #17]
    7d3a:	add	r3, r1
    7d3c:	ldrb.w	r3, [r3, #40]	; 0x28
    7d40:	str	r3, [r6, #0]

	//digitalWriteFast(10, HIGH);
	//pinMode(10, OUTPUT);
	//digitalWriteFast(10, HIGH);
	port().CR = LPSPI_CR_RST;
    7d42:	str	r5, [r2, #16]

	// Lets initialize the Transmit FIFO watermark to FIFO size - 1... 
	// BUGBUG:: I assume queue of 16 for now...
	port().FCR = LPSPI_FCR_TXWATER(15);
    7d44:	str	r4, [r2, #88]	; 0x58

	// Before using SPI.transfer() or asserting chip select pins,
	// this function is used to gain exclusive access to the SPI bus
	// and configure the correct settings.
	void beginTransaction(SPISettings settings) {
		if (interruptMasksUsed) {
    7d46:	ldrb	r3, [r0, #19]
    7d48:	cmp	r3, #0
    7d4a:	beq.n	7da0 <SPIClass::begin()+0x128>
			__disable_irq();
    7d4c:	cpsid	i
			if (interruptMasksUsed & 0x01) {
    7d4e:	ldrb	r3, [r0, #19]
    7d50:	lsls	r4, r3, #31
    7d52:	bpl.n	7d62 <SPIClass::begin()+0xea>
				interruptSave[0] = NVIC_ICER0 & interruptMask[0];
    7d54:	ldr	r2, [pc, #276]	; (7e6c <SPIClass::begin()+0x1f4>)
    7d56:	ldr	r3, [r0, #20]
    7d58:	ldr	r1, [r2, #0]
    7d5a:	ands	r3, r1
    7d5c:	str	r3, [r0, #40]	; 0x28
				NVIC_ICER0 = interruptSave[0];
    7d5e:	str	r3, [r2, #0]
    7d60:	ldrb	r3, [r0, #19]
			}
			if (interruptMasksUsed & 0x02) {
    7d62:	lsls	r1, r3, #30
    7d64:	bpl.n	7d74 <SPIClass::begin()+0xfc>
				interruptSave[1] = NVIC_ICER1 & interruptMask[1];
    7d66:	ldr	r2, [pc, #264]	; (7e70 <SPIClass::begin()+0x1f8>)
    7d68:	ldr	r3, [r0, #24]
    7d6a:	ldr	r1, [r2, #0]
    7d6c:	ands	r3, r1
    7d6e:	str	r3, [r0, #44]	; 0x2c
				NVIC_ICER1 = interruptSave[1];
    7d70:	str	r3, [r2, #0]
    7d72:	ldrb	r3, [r0, #19]
			}
			if (interruptMasksUsed & 0x04) {
    7d74:	lsls	r2, r3, #29
    7d76:	bpl.n	7d86 <SPIClass::begin()+0x10e>
				interruptSave[2] = NVIC_ICER2 & interruptMask[2];
    7d78:	ldr	r2, [pc, #248]	; (7e74 <SPIClass::begin()+0x1fc>)
    7d7a:	ldr	r3, [r0, #28]
    7d7c:	ldr	r1, [r2, #0]
    7d7e:	ands	r3, r1
    7d80:	str	r3, [r0, #48]	; 0x30
				NVIC_ICER2 = interruptSave[2];
    7d82:	str	r3, [r2, #0]
    7d84:	ldrb	r3, [r0, #19]
			}
			if (interruptMasksUsed & 0x08) {
    7d86:	lsls	r7, r3, #28
    7d88:	bpl.n	7d98 <SPIClass::begin()+0x120>
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
    7d8a:	ldr	r2, [pc, #236]	; (7e78 <SPIClass::begin()+0x200>)
    7d8c:	ldr	r3, [r0, #32]
    7d8e:	ldr	r1, [r2, #0]
    7d90:	ands	r3, r1
    7d92:	str	r3, [r0, #52]	; 0x34
				NVIC_ICER3 = interruptSave[3];
    7d94:	str	r3, [r2, #0]
    7d96:	ldrb	r3, [r0, #19]
			}
			if (interruptMasksUsed & 0x10) {
    7d98:	lsls	r6, r3, #27
    7d9a:	bmi.n	7e34 <SPIClass::begin()+0x1bc>
				interruptSave[4] = NVIC_ICER4 & interruptMask[4];
				NVIC_ICER4 = interruptSave[4];
			}
			__enable_irq();
    7d9c:	cpsie	i
    7d9e:	ldr	r2, [r0, #0]
		}
		inTransactionFlag = 1;
		#endif

		//printf("trans\n");
		if (settings.clock() != _clock) {
    7da0:	ldr	r5, [pc, #216]	; (7e7c <SPIClass::begin()+0x204>)
    7da2:	ldr	r3, [r0, #8]
    7da4:	cmp	r3, r5
    7da6:	beq.n	7e42 <SPIClass::begin()+0x1ca>
						     396000000}; // PLL2 PFD2				

		    // First save away the new settings..
		    _clock = settings.clock();

			uint32_t cbcmr = CCM_CBCMR;
    7da8:	ldr	r3, [pc, #212]	; (7e80 <SPIClass::begin()+0x208>)
						     720000000,  // PLL3 PFD0
						     528000000,  // PLL2
						     396000000}; // PLL2 PFD2				

		    // First save away the new settings..
		    _clock = settings.clock();
    7daa:	str	r5, [r0, #8]

			uint32_t cbcmr = CCM_CBCMR;
    7dac:	ldr	r3, [r3, #24]
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
    7dae:	ldr	r4, [pc, #212]	; (7e84 <SPIClass::begin()+0x20c>)
    7db0:	ubfx	r6, r3, #4, #2
    7db4:	ubfx	r1, r3, #26, #3
			
			uint32_t d, div;		
			d = _clock ? clkhz/_clock : clkhz;
    7db8:	ldr	r3, [pc, #204]	; (7e88 <SPIClass::begin()+0x210>)

		    // First save away the new settings..
		    _clock = settings.clock();

			uint32_t cbcmr = CCM_CBCMR;
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
    7dba:	ldr.w	r4, [r4, r6, lsl #2]
    7dbe:	adds	r1, #1
    7dc0:	udiv	r1, r4, r1
			
			uint32_t d, div;		
			d = _clock ? clkhz/_clock : clkhz;
    7dc4:	umull	r4, r3, r3, r1

			if (d && clkhz/d > _clock) d++;
    7dc8:	lsrs	r3, r3, #20
    7dca:	bne.n	7e20 <SPIClass::begin()+0x1a8>
				div = d-2;
			} else {
				div =0;
			}
	
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);
    7dcc:	str	r3, [r0, #12]

		} 
		//Serial.printf("SPI.beginTransaction CCR:%x TCR:%x\n", _ccr, settings.tcr);
		port().CR = 0;
    7dce:	movs	r6, #0
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
    7dd0:	movs	r5, #3
		port().CCR = _ccr;
		port().TCR = settings.tcr;
    7dd2:	movs	r4, #7
		port().CR = LPSPI_CR_MEN;
    7dd4:	movs	r1, #1
	
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);

		} 
		//Serial.printf("SPI.beginTransaction CCR:%x TCR:%x\n", _ccr, settings.tcr);
		port().CR = 0;
    7dd6:	str	r6, [r2, #16]
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
    7dd8:	str	r5, [r2, #36]	; 0x24
		port().CCR = _ccr;
    7dda:	str	r3, [r2, #64]	; 0x40
		port().TCR = settings.tcr;
    7ddc:	str	r4, [r2, #96]	; 0x60
		port().CR = LPSPI_CR_MEN;
    7dde:	str	r1, [r2, #16]
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 0;
		#endif
		if (interruptMasksUsed) {
    7de0:	ldrb	r3, [r0, #19]
    7de2:	cbz	r3, 7e1e <SPIClass::begin()+0x1a6>
			if (interruptMasksUsed & 0x01) NVIC_ISER0 = interruptSave[0];
    7de4:	lsls	r5, r3, #31
    7de6:	bpl.n	7df0 <SPIClass::begin()+0x178>
    7de8:	ldr	r3, [pc, #160]	; (7e8c <SPIClass::begin()+0x214>)
    7dea:	ldr	r2, [r0, #40]	; 0x28
    7dec:	str	r2, [r3, #0]
    7dee:	ldrb	r3, [r0, #19]
			if (interruptMasksUsed & 0x02) NVIC_ISER1 = interruptSave[1];
    7df0:	lsls	r4, r3, #30
    7df2:	bpl.n	7dfc <SPIClass::begin()+0x184>
    7df4:	ldr	r3, [pc, #152]	; (7e90 <SPIClass::begin()+0x218>)
    7df6:	ldr	r2, [r0, #44]	; 0x2c
    7df8:	str	r2, [r3, #0]
    7dfa:	ldrb	r3, [r0, #19]
			if (interruptMasksUsed & 0x04) NVIC_ISER2 = interruptSave[2];
    7dfc:	lsls	r1, r3, #29
    7dfe:	bpl.n	7e08 <SPIClass::begin()+0x190>
    7e00:	ldr	r3, [pc, #144]	; (7e94 <SPIClass::begin()+0x21c>)
    7e02:	ldr	r2, [r0, #48]	; 0x30
    7e04:	str	r2, [r3, #0]
    7e06:	ldrb	r3, [r0, #19]
			if (interruptMasksUsed & 0x08) NVIC_ISER3 = interruptSave[3];
    7e08:	lsls	r2, r3, #28
    7e0a:	bpl.n	7e14 <SPIClass::begin()+0x19c>
    7e0c:	ldr	r3, [pc, #136]	; (7e98 <SPIClass::begin()+0x220>)
    7e0e:	ldr	r2, [r0, #52]	; 0x34
    7e10:	str	r2, [r3, #0]
    7e12:	ldrb	r3, [r0, #19]
			if (interruptMasksUsed & 0x10) NVIC_ISER4 = interruptSave[4];
    7e14:	lsls	r3, r3, #27
    7e16:	bpl.n	7e1e <SPIClass::begin()+0x1a6>
    7e18:	ldr	r2, [r0, #56]	; 0x38
    7e1a:	ldr	r3, [pc, #128]	; (7e9c <SPIClass::begin()+0x224>)
    7e1c:	str	r2, [r3, #0]
    7e1e:	pop	{r4, r5, r6, r7, pc}
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
			
			uint32_t d, div;		
			d = _clock ? clkhz/_clock : clkhz;

			if (d && clkhz/d > _clock) d++;
    7e20:	udiv	r1, r1, r3
    7e24:	cmp	r1, r5
    7e26:	it	hi
    7e28:	addhi	r3, #1
			if (d > 257) d= 257;  // max div
    7e2a:	cmp.w	r3, #258	; 0x102
    7e2e:	bcc.n	7e46 <SPIClass::begin()+0x1ce>
    7e30:	ldr	r3, [pc, #108]	; (7ea0 <SPIClass::begin()+0x228>)
    7e32:	b.n	7dcc <SPIClass::begin()+0x154>
			if (interruptMasksUsed & 0x08) {
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
				NVIC_ICER3 = interruptSave[3];
			}
			if (interruptMasksUsed & 0x10) {
				interruptSave[4] = NVIC_ICER4 & interruptMask[4];
    7e34:	ldr	r2, [pc, #108]	; (7ea4 <SPIClass::begin()+0x22c>)
    7e36:	ldr	r3, [r0, #36]	; 0x24
    7e38:	ldr	r1, [r2, #0]
    7e3a:	ands	r3, r1
    7e3c:	str	r3, [r0, #56]	; 0x38
				NVIC_ICER4 = interruptSave[4];
    7e3e:	str	r3, [r2, #0]
    7e40:	b.n	7d9c <SPIClass::begin()+0x124>
    7e42:	ldr	r3, [r0, #12]
    7e44:	b.n	7dce <SPIClass::begin()+0x156>
			uint32_t d, div;		
			d = _clock ? clkhz/_clock : clkhz;

			if (d && clkhz/d > _clock) d++;
			if (d > 257) d= 257;  // max div
			if (d > 2) {
    7e46:	cmp	r3, #2
    7e48:	it	ls
    7e4a:	movls	r3, #0
    7e4c:	bls.n	7dcc <SPIClass::begin()+0x154>
    7e4e:	subs	r3, #2
    7e50:	lsrs	r4, r3, #1
    7e52:	lsls	r1, r4, #16
    7e54:	orr.w	r3, r3, r4, lsl #8
    7e58:	and.w	r1, r1, #16711680	; 0xff0000
    7e5c:	orrs	r3, r1
    7e5e:	b.n	7dcc <SPIClass::begin()+0x154>
    7e60:	.word	0xe3ffffcf
    7e64:	.word	0x08000010
    7e68:	.word	0x20000590
    7e6c:	.word	0xe000e180
    7e70:	.word	0xe000e184
    7e74:	.word	0xe000e188
    7e78:	.word	0xe000e18c
    7e7c:	.word	0x003d0900
    7e80:	.word	0x400fc000
    7e84:	.word	0x20000424
    7e88:	.word	0x431bde83
    7e8c:	.word	0xe000e100
    7e90:	.word	0xe000e104
    7e94:	.word	0xe000e108
    7e98:	.word	0xe000e10c
    7e9c:	.word	0xe000e110
    7ea0:	.word	0x007f7fff
    7ea4:	.word	0xe000e190

00007ea8 <SPIClass::setMOSI(unsigned char)>:
	uint8_t setCS(uint8_t pin);

private:
private:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
	const SPI_Hardware_t & hardware() { return *(const SPI_Hardware_t *)hardware_addr; }
    7ea8:	ldr	r3, [r0, #4]
	return 0;
}

void SPIClass::setMOSI(uint8_t pin)
{
	if (pin != hardware().mosi_pin[mosi_pin_index]) {
    7eaa:	ldrb	r2, [r0, #17]
    7eac:	add	r2, r3
    7eae:	ldrb.w	r2, [r2, #32]
    7eb2:	cmp	r2, r1
    7eb4:	beq.n	7ebe <SPIClass::setMOSI(unsigned char)+0x16>
		for (unsigned int i = 0; i < sizeof(hardware().mosi_pin); i++) {
			if (pin == hardware().mosi_pin[i] ) {
    7eb6:	ldrb.w	r2, [r3, #32]
    7eba:	cmp	r2, r1
    7ebc:	beq.n	7ec0 <SPIClass::setMOSI(unsigned char)+0x18>
				mosi_pin_index = i;
				return;
			}
		}
	}
}
    7ebe:	bx	lr
	}
	return 0;
}

void SPIClass::setMOSI(uint8_t pin)
{
    7ec0:	push	{r4, r5}
	if (pin != hardware().mosi_pin[mosi_pin_index]) {
		for (unsigned int i = 0; i < sizeof(hardware().mosi_pin); i++) {
			if (pin == hardware().mosi_pin[i] ) {
				if (hardware().clock_gate_register & hardware().clock_gate_mask) {
    7ec2:	ldr	r4, [r3, #0]
    7ec4:	ldr	r1, [r3, #4]
    7ec6:	ldr	r4, [r4, #0]
    7ec8:	tst	r4, r1
    7eca:	beq.n	7eee <SPIClass::setMOSI(unsigned char)+0x46>
					// BUGBUG:: Unclear what to do with previous pin as there is no unused setting like t3.x
					uint32_t fastio = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_SPEED(2);
					*(portControlRegister(hardware().mosi_pin[i])) = fastio;
    7ecc:	ldr	r1, [pc, #40]	; (7ef8 <SPIClass::setMOSI(unsigned char)+0x50>)
    7ece:	movs	r5, #184	; 0xb8
					*(portConfigRegister(hardware().mosi_pin [i])) = hardware().mosi_mux[i];
					hardware().mosi_select_input_register = hardware().mosi_select_val[i];
    7ed0:	ldr	r4, [r3, #44]	; 0x2c
		for (unsigned int i = 0; i < sizeof(hardware().mosi_pin); i++) {
			if (pin == hardware().mosi_pin[i] ) {
				if (hardware().clock_gate_register & hardware().clock_gate_mask) {
					// BUGBUG:: Unclear what to do with previous pin as there is no unused setting like t3.x
					uint32_t fastio = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_SPEED(2);
					*(portControlRegister(hardware().mosi_pin[i])) = fastio;
    7ed2:	add.w	r2, r1, r2, lsl #4
    7ed6:	ldr	r2, [r2, #8]
    7ed8:	str	r5, [r2, #0]
					*(portConfigRegister(hardware().mosi_pin [i])) = hardware().mosi_mux[i];
    7eda:	ldrb.w	r2, [r3, #32]
    7ede:	ldr	r5, [r3, #36]	; 0x24
    7ee0:	add.w	r1, r1, r2, lsl #4
    7ee4:	ldr	r2, [r1, #4]
    7ee6:	str	r5, [r2, #0]
					hardware().mosi_select_input_register = hardware().mosi_select_val[i];
    7ee8:	ldrb.w	r3, [r3, #40]	; 0x28
    7eec:	str	r3, [r4, #0]
				}	
				mosi_pin_index = i;
    7eee:	movs	r3, #0
				return;
			}
		}
	}
}
    7ef0:	pop	{r4, r5}
					uint32_t fastio = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_SPEED(2);
					*(portControlRegister(hardware().mosi_pin[i])) = fastio;
					*(portConfigRegister(hardware().mosi_pin [i])) = hardware().mosi_mux[i];
					hardware().mosi_select_input_register = hardware().mosi_select_val[i];
				}	
				mosi_pin_index = i;
    7ef2:	strb	r3, [r0, #17]
				return;
			}
		}
	}
}
    7ef4:	bx	lr
    7ef6:	nop
    7ef8:	.word	0x20000590

00007efc <SPIClass::setMISO(unsigned char)>:
    7efc:	ldr	r3, [r0, #4]

void SPIClass::setMISO(uint8_t pin)
{
	if (pin != hardware().miso_pin[miso_pin_index]) {
    7efe:	ldrb	r2, [r0, #16]
    7f00:	add	r2, r3
    7f02:	ldrb	r2, [r2, #16]
    7f04:	cmp	r2, r1
    7f06:	beq.n	7f0e <SPIClass::setMISO(unsigned char)+0x12>
		for (unsigned int i = 0; i < sizeof(hardware().miso_pin); i++) {
			if (pin == hardware().miso_pin[i] ) {
    7f08:	ldrb	r2, [r3, #16]
    7f0a:	cmp	r2, r1
    7f0c:	beq.n	7f10 <SPIClass::setMISO(unsigned char)+0x14>
				miso_pin_index = i;
				return;
			}
		}
	}
}
    7f0e:	bx	lr
		}
	}
}

void SPIClass::setMISO(uint8_t pin)
{
    7f10:	push	{r4, r5}
	if (pin != hardware().miso_pin[miso_pin_index]) {
		for (unsigned int i = 0; i < sizeof(hardware().miso_pin); i++) {
			if (pin == hardware().miso_pin[i] ) {
				if (hardware().clock_gate_register & hardware().clock_gate_mask) {
    7f12:	ldr	r4, [r3, #0]
    7f14:	ldr	r1, [r3, #4]
    7f16:	ldr	r4, [r4, #0]
    7f18:	tst	r4, r1
    7f1a:	beq.n	7f3a <SPIClass::setMISO(unsigned char)+0x3e>
					// BUGBUG:: Unclear what to do with previous pin as there is no unused setting like t3.x
					uint32_t fastio = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_SPEED(2);
					*(portControlRegister(hardware().miso_pin[i])) = fastio;
    7f1c:	ldr	r1, [pc, #36]	; (7f44 <SPIClass::setMISO(unsigned char)+0x48>)
    7f1e:	movs	r5, #184	; 0xb8
					*(portConfigRegister(hardware().miso_pin[i])) = hardware().miso_mux[i];
					hardware().miso_select_input_register = hardware().miso_select_val[i];
    7f20:	ldr	r4, [r3, #28]
		for (unsigned int i = 0; i < sizeof(hardware().miso_pin); i++) {
			if (pin == hardware().miso_pin[i] ) {
				if (hardware().clock_gate_register & hardware().clock_gate_mask) {
					// BUGBUG:: Unclear what to do with previous pin as there is no unused setting like t3.x
					uint32_t fastio = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_SPEED(2);
					*(portControlRegister(hardware().miso_pin[i])) = fastio;
    7f22:	add.w	r2, r1, r2, lsl #4
    7f26:	ldr	r2, [r2, #8]
    7f28:	str	r5, [r2, #0]
					*(portConfigRegister(hardware().miso_pin[i])) = hardware().miso_mux[i];
    7f2a:	ldrb	r2, [r3, #16]
    7f2c:	ldr	r5, [r3, #20]
    7f2e:	add.w	r1, r1, r2, lsl #4
    7f32:	ldr	r2, [r1, #4]
    7f34:	str	r5, [r2, #0]
					hardware().miso_select_input_register = hardware().miso_select_val[i];
    7f36:	ldrb	r3, [r3, #24]
    7f38:	str	r3, [r4, #0]
				}	
				miso_pin_index = i;
    7f3a:	movs	r3, #0
				return;
			}
		}
	}
}
    7f3c:	pop	{r4, r5}
					uint32_t fastio = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_SPEED(2);
					*(portControlRegister(hardware().miso_pin[i])) = fastio;
					*(portConfigRegister(hardware().miso_pin[i])) = hardware().miso_mux[i];
					hardware().miso_select_input_register = hardware().miso_select_val[i];
				}	
				miso_pin_index = i;
    7f3e:	strb	r3, [r0, #16]
				return;
			}
		}
	}
}
    7f40:	bx	lr
    7f42:	nop
    7f44:	.word	0x20000590

00007f48 <SPIClass::setSCK(unsigned char)>:
    7f48:	ldr	r3, [r0, #4]

void SPIClass::setSCK(uint8_t pin)
{
	if (pin != hardware().sck_pin[sck_pin_index]) {
    7f4a:	ldrb	r2, [r0, #18]
    7f4c:	add	r2, r3
    7f4e:	ldrb.w	r2, [r2, #48]	; 0x30
    7f52:	cmp	r2, r1
    7f54:	beq.n	7f5e <SPIClass::setSCK(unsigned char)+0x16>
		for (unsigned int i = 0; i < sizeof(hardware().sck_pin); i++) {
			if (pin == hardware().sck_pin[i] ) {
    7f56:	ldrb.w	r2, [r3, #48]	; 0x30
    7f5a:	cmp	r2, r1
    7f5c:	beq.n	7f60 <SPIClass::setSCK(unsigned char)+0x18>
				sck_pin_index = i;
				return;
			}
		}
	}
}
    7f5e:	bx	lr
		}
	}
}

void SPIClass::setSCK(uint8_t pin)
{
    7f60:	push	{r4, r5}
	if (pin != hardware().sck_pin[sck_pin_index]) {
		for (unsigned int i = 0; i < sizeof(hardware().sck_pin); i++) {
			if (pin == hardware().sck_pin[i] ) {
				if (hardware().clock_gate_register & hardware().clock_gate_mask) {
    7f62:	ldr	r4, [r3, #0]
    7f64:	ldr	r1, [r3, #4]
    7f66:	ldr	r4, [r4, #0]
    7f68:	tst	r4, r1
    7f6a:	beq.n	7f8e <SPIClass::setSCK(unsigned char)+0x46>
					// BUGBUG:: Unclear what to do with previous pin as there is no unused setting like t3.x
					uint32_t fastio = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_SPEED(2);
					*(portControlRegister(hardware().sck_pin[i])) = fastio;
    7f6c:	ldr	r1, [pc, #40]	; (7f98 <SPIClass::setSCK(unsigned char)+0x50>)
    7f6e:	movs	r5, #184	; 0xb8
					*(portConfigRegister(hardware().sck_pin [i])) = hardware().sck_mux[i];
					hardware().sck_select_input_register = hardware().sck_select_val[i];
    7f70:	ldr	r4, [r3, #60]	; 0x3c
		for (unsigned int i = 0; i < sizeof(hardware().sck_pin); i++) {
			if (pin == hardware().sck_pin[i] ) {
				if (hardware().clock_gate_register & hardware().clock_gate_mask) {
					// BUGBUG:: Unclear what to do with previous pin as there is no unused setting like t3.x
					uint32_t fastio = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_SPEED(2);
					*(portControlRegister(hardware().sck_pin[i])) = fastio;
    7f72:	add.w	r2, r1, r2, lsl #4
    7f76:	ldr	r2, [r2, #8]
    7f78:	str	r5, [r2, #0]
					*(portConfigRegister(hardware().sck_pin [i])) = hardware().sck_mux[i];
    7f7a:	ldrb.w	r2, [r3, #48]	; 0x30
    7f7e:	ldr	r5, [r3, #52]	; 0x34
    7f80:	add.w	r1, r1, r2, lsl #4
    7f84:	ldr	r2, [r1, #4]
    7f86:	str	r5, [r2, #0]
					hardware().sck_select_input_register = hardware().sck_select_val[i];
    7f88:	ldrb.w	r3, [r3, #56]	; 0x38
    7f8c:	str	r3, [r4, #0]
				}	
				sck_pin_index = i;
    7f8e:	movs	r3, #0
				return;
			}
		}
	}
}
    7f90:	pop	{r4, r5}
					uint32_t fastio = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_SPEED(2);
					*(portControlRegister(hardware().sck_pin[i])) = fastio;
					*(portConfigRegister(hardware().sck_pin [i])) = hardware().sck_mux[i];
					hardware().sck_select_input_register = hardware().sck_select_val[i];
				}	
				sck_pin_index = i;
    7f92:	strb	r3, [r0, #18]
				return;
			}
		}
	}
}
    7f94:	bx	lr
    7f96:	nop
    7f98:	.word	0x20000590

00007f9c <SPIClass::transfer(void const*, void*, unsigned int)>:
}

void SPIClass::transfer(const void * buf, void * retbuf, size_t count)
{

	if (count == 0) return;
    7f9c:	cbz	r3, 7fa2 <SPIClass::transfer(void const*, void*, unsigned int)+0x6>
    7f9e:	b.w	7b4c <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]>
    7fa2:	bx	lr

00007fa4 <breakTime(long, tmElements_t&)>:
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
  time /= 24; // now it is days
    7fa4:	ldr	r3, [pc, #392]	; (8130 <breakTime(long, tmElements_t&)+0x18c>)
  time = (uint32_t)timeInput;
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
    7fa6:	ldr	r2, [pc, #396]	; (8134 <breakTime(long, tmElements_t&)+0x190>)
  time /= 24; // now it is days
    7fa8:	umull	r3, ip, r3, r0
  uint8_t month, monthLength;
  uint32_t time;
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
    7fac:	ldr	r3, [pc, #392]	; (8138 <breakTime(long, tmElements_t&)+0x194>)
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
  time /= 24; // now it is days
    7fae:	mov.w	ip, ip, lsr #16
// leap year calculator expects year argument as years offset from 1970
#define LEAP_YEAR(Y)     ( ((1970+(Y))>0) && !((1970+(Y))%4) && ( ((1970+(Y))%100) || !((1970+(Y))%400) ) )

static  const uint8_t monthDays[]={31,28,31,30,31,30,31,31,30,31,30,31}; // API starts months from 1, this array starts from 0
 
void breakTime(time_t timeInput, tmElements_t &tm){
    7fb2:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint8_t month, monthLength;
  uint32_t time;
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
    7fb6:	umull	r4, r8, r3, r0
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    7fba:	add.w	lr, ip, #4
    7fbe:	ldr	r6, [pc, #380]	; (813c <breakTime(long, tmElements_t&)+0x198>)
  time = (uint32_t)timeInput;
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
    7fc0:	umull	r4, r2, r2, r0
  uint8_t month, monthLength;
  uint32_t time;
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
    7fc4:	mov.w	r8, r8, lsr #5
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
    7fc8:	ldr.w	r9, [pc, #380]	; 8148 <breakTime(long, tmElements_t&)+0x1a4>
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    7fcc:	umull	r6, r7, lr, r6
  time = (uint32_t)timeInput;
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
    7fd0:	lsrs	r2, r2, #11
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
    7fd2:	umull	r4, r3, r3, r8
  time /= 60; // now it is hours
  tm.Hour = time % 24;
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    7fd6:	movs	r5, #0
    7fd8:	rsb	r4, r7, lr
  time = (uint32_t)timeInput;
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
    7fdc:	umull	r9, r6, r9, r2
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
    7fe0:	lsrs	r3, r3, #5
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
  
  year = 0;  
  days = 0;
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    7fe2:	ldr.w	r9, [pc, #348]	; 8140 <breakTime(long, tmElements_t&)+0x19c>
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    7fe6:	add.w	r4, r7, r4, lsr #1
  
  year = 0;  
  days = 0;
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    7fea:	mov.w	fp, #100	; 0x64
  time = (uint32_t)timeInput;
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
    7fee:	lsrs	r6, r6, #4
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
  
  year = 0;  
  days = 0;
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    7ff0:	mov.w	sl, #400	; 0x190
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    7ff4:	lsrs	r4, r4, #2
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
    7ff6:	rsb	r3, r3, r3, lsl #4
  time /= 60; // now it is hours
  tm.Hour = time % 24;
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    7ffa:	rsb	r4, r4, r4, lsl #3
  time = (uint32_t)timeInput;
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
    7ffe:	add.w	r6, r6, r6, lsl #1
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    8002:	rsb	r4, r4, lr
  uint8_t month, monthLength;
  uint32_t time;
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
    8006:	rsb	r7, r8, r8, lsl #4
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
    800a:	sub.w	r6, r2, r6, lsl #3
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
  
  year = 0;  
  days = 0;
    800e:	mov	r2, r5
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
    8010:	sub.w	r3, r8, r3, lsl #2
  time /= 60; // now it is hours
  tm.Hour = time % 24;
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    8014:	adds	r4, #1
  uint8_t month, monthLength;
  uint32_t time;
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
    8016:	sub.w	r0, r0, r7, lsl #2
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
    801a:	strb	r6, [r1, #2]
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
    801c:	strb	r3, [r1, #1]
  uint8_t month, monthLength;
  uint32_t time;
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
    801e:	strb	r0, [r1, #0]
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    8020:	strb	r4, [r1, #3]
    8022:	uxtb	r7, r5
  
  year = 0;  
  days = 0;
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    8024:	movw	r4, #365	; 0x16d
    8028:	addw	r3, r7, #1970	; 0x7b2
    802c:	smull	r0, lr, r9, r3
    8030:	ands.w	r8, r3, #3
    8034:	mov.w	r0, r3, asr #31
    8038:	rsb	r6, r0, lr, asr #5
    803c:	bne.n	805a <breakTime(long, tmElements_t&)+0xb6>
    803e:	rsb	r0, r0, lr, asr #7
    8042:	mls	r6, fp, r6, r3
    8046:	mov.w	r4, #366	; 0x16e
    804a:	mls	r0, sl, r0, r3
    804e:	cbnz	r6, 805a <breakTime(long, tmElements_t&)+0xb6>
    8050:	cmp	r0, #0
    8052:	movw	r0, #365	; 0x16d
    8056:	it	ne
    8058:	movne	r4, r0
    805a:	add	r2, r4
    805c:	adds	r5, #1
    805e:	cmp	ip, r2
    8060:	bcs.n	8022 <breakTime(long, tmElements_t&)+0x7e>
    year++;
  }
  tm.Year = year; // year is offset from 1970 
    8062:	strb	r7, [r1, #6]
  
  days -= LEAP_YEAR(year) ? 366 : 365;
    8064:	cmp.w	r8, #0
    8068:	bne.n	8084 <breakTime(long, tmElements_t&)+0xe0>
    806a:	ldr	r0, [pc, #212]	; (8140 <breakTime(long, tmElements_t&)+0x19c>)
    806c:	asrs	r6, r3, #31
    806e:	movs	r5, #100	; 0x64
    8070:	smull	r4, r0, r0, r3
    8074:	rsb	r4, r6, r0, asr #5
    8078:	mls	r4, r5, r4, r3
    807c:	cbz	r4, 80f0 <breakTime(long, tmElements_t&)+0x14c>
    807e:	mov.w	r4, #366	; 0x16e
    8082:	b.n	808a <breakTime(long, tmElements_t&)+0xe6>
    8084:	movw	r4, #365	; 0x16d
    8088:	asrs	r6, r3, #31
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    if (month==1) { // february
      if (LEAP_YEAR(year)) {
    808a:	ldr	r0, [pc, #180]	; (8140 <breakTime(long, tmElements_t&)+0x19c>)
    year++;
  }
  tm.Year = year; // year is offset from 1970 
  
  days -= LEAP_YEAR(year) ? 366 : 365;
  time  -= days; // now it is days in this year, starting at 0
    808c:	subs	r2, r2, r4
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    if (month==1) { // february
      if (LEAP_YEAR(year)) {
    808e:	movs	r5, #100	; 0x64
    8090:	mov.w	r4, #400	; 0x190
    8094:	smull	r7, r0, r0, r3
    year++;
  }
  tm.Year = year; // year is offset from 1970 
  
  days -= LEAP_YEAR(year) ? 366 : 365;
  time  -= days; // now it is days in this year, starting at 0
    8098:	rsb	ip, r2, ip
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    if (month==1) { // february
      if (LEAP_YEAR(year)) {
    809c:	movs	r2, #0
    809e:	rsb	r7, r6, r0, asr #5
    80a2:	rsb	r6, r6, r0, asr #7
    80a6:	movs	r0, #1
    80a8:	mls	r7, r5, r7, r3
        monthLength=29;
      } else {
        monthLength=28;
      }
    } else {
      monthLength = monthDays[month];
    80ac:	ldr	r5, [pc, #148]	; (8144 <breakTime(long, tmElements_t&)+0x1a0>)
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    if (month==1) { // february
      if (LEAP_YEAR(year)) {
    80ae:	mls	r6, r4, r6, r3
    80b2:	b.n	80ba <breakTime(long, tmElements_t&)+0x116>
    80b4:	adds	r0, #1
    80b6:	adds	r2, #1
    80b8:	uxtb	r0, r0
  
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    if (month==1) { // february
    80ba:	cmp	r2, #1
    80bc:	uxtb	r4, r2
    80be:	beq.n	810a <breakTime(long, tmElements_t&)+0x166>
      }
    } else {
      monthLength = monthDays[month];
    }
    
    if (time >= monthLength) {
    80c0:	ldrb	r3, [r2, r5]
    80c2:	cmp	r3, ip
    80c4:	bhi.n	80de <breakTime(long, tmElements_t&)+0x13a>
  time  -= days; // now it is days in this year, starting at 0
  
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    80c6:	cmp	r0, #12
    } else {
      monthLength = monthDays[month];
    }
    
    if (time >= monthLength) {
      time -= monthLength;
    80c8:	rsb	ip, r3, ip
  time  -= days; // now it is days in this year, starting at 0
  
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    80cc:	bne.n	80b4 <breakTime(long, tmElements_t&)+0x110>
    80ce:	movs	r4, #13
    } else {
        break;
    }
  }
  tm.Month = month + 1;  // jan is month 1  
  tm.Day = time + 1;     // day of month
    80d0:	add.w	ip, ip, #1
      time -= monthLength;
    } else {
        break;
    }
  }
  tm.Month = month + 1;  // jan is month 1  
    80d4:	strb	r4, [r1, #5]
  tm.Day = time + 1;     // day of month
    80d6:	strb.w	ip, [r1, #4]
}
    80da:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    80de:	adds	r4, #1
    } else {
        break;
    }
  }
  tm.Month = month + 1;  // jan is month 1  
  tm.Day = time + 1;     // day of month
    80e0:	add.w	ip, ip, #1
    80e4:	uxtb	r4, r4
    80e6:	strb.w	ip, [r1, #4]
      time -= monthLength;
    } else {
        break;
    }
  }
  tm.Month = month + 1;  // jan is month 1  
    80ea:	strb	r4, [r1, #5]
  tm.Day = time + 1;     // day of month
}
    80ec:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    year++;
  }
  tm.Year = year; // year is offset from 1970 
  
  days -= LEAP_YEAR(year) ? 366 : 365;
    80f0:	rsb	r0, r6, r0, asr #7
    80f4:	mov.w	r5, #400	; 0x190
    80f8:	movw	r4, #365	; 0x16d
    80fc:	mls	r0, r5, r0, r3
    8100:	cmp	r0, #0
    8102:	it	eq
    8104:	moveq.w	r4, #366	; 0x16e
    8108:	b.n	808a <breakTime(long, tmElements_t&)+0xe6>
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    if (month==1) { // february
      if (LEAP_YEAR(year)) {
    810a:	cmp.w	r8, #0
    810e:	bne.n	8124 <breakTime(long, tmElements_t&)+0x180>
    8110:	cbnz	r7, 812c <breakTime(long, tmElements_t&)+0x188>
    8112:	cmp	r6, #0
    8114:	ite	ne
    8116:	movne	r3, #28
    8118:	moveq	r3, #29
      }
    } else {
      monthLength = monthDays[month];
    }
    
    if (time >= monthLength) {
    811a:	cmp	ip, r3
    811c:	bcc.n	8128 <breakTime(long, tmElements_t&)+0x184>
      time -= monthLength;
    811e:	rsb	ip, r3, ip
    8122:	b.n	80b4 <breakTime(long, tmElements_t&)+0x110>
    8124:	movs	r3, #28
    8126:	b.n	811a <breakTime(long, tmElements_t&)+0x176>
      }
    } else {
      monthLength = monthDays[month];
    }
    
    if (time >= monthLength) {
    8128:	movs	r4, #2
    812a:	b.n	80d0 <breakTime(long, tmElements_t&)+0x12c>
    812c:	movs	r3, #29
    812e:	b.n	811a <breakTime(long, tmElements_t&)+0x176>
    8130:	.word	0xc22e4507
    8134:	.word	0x91a2b3c5
    8138:	.word	0x88888889
    813c:	.word	0x24924925
    8140:	.word	0x51eb851f
    8144:	.word	0x20000484
    8148:	.word	0xaaaaaaab

0000814c <refreshCache(long) [clone .part.0]>:

static tmElements_t tm;          // a cache of time elements
static time_t cacheTime;   // the time the cache was updated
static uint32_t syncInterval = 300;  // time sync will be attempted after this many seconds

void refreshCache(time_t t) {
    814c:	push	{r4, lr}
  if (t != cacheTime) {
    breakTime(t, tm); 
    814e:	ldr	r1, [pc, #12]	; (815c <refreshCache(long) [clone .part.0]+0x10>)

static tmElements_t tm;          // a cache of time elements
static time_t cacheTime;   // the time the cache was updated
static uint32_t syncInterval = 300;  // time sync will be attempted after this many seconds

void refreshCache(time_t t) {
    8150:	mov	r4, r0
  if (t != cacheTime) {
    breakTime(t, tm); 
    8152:	bl	7fa4 <breakTime(long, tmElements_t&)>
    cacheTime = t; 
    8156:	ldr	r3, [pc, #8]	; (8160 <refreshCache(long) [clone .part.0]+0x14>)
    8158:	str	r4, [r3, #0]
    815a:	pop	{r4, pc}
    815c:	.word	0x20043f84
    8160:	.word	0x20043f80

00008164 <now()>:
#ifdef TIME_DRIFT_INFO   // define this to get drift data
time_t sysUnsyncedTime = 0; // the time sysTime unadjusted by sync  
#endif


time_t now() {
    8164:	push	{r3, r4, r5, r6, r7, lr}
    8166:	ldr	r4, [pc, #108]	; (81d4 <now()+0x70>)
	// calculate number of seconds passed since last call to now()
  while (millis() - prevMillis >= 1000) {
    8168:	ldr	r5, [pc, #108]	; (81d8 <now()+0x74>)
    816a:	ldr	r3, [r4, #0]
    816c:	ldr	r2, [r5, #0]
    816e:	ldr	r7, [pc, #108]	; (81dc <now()+0x78>)
    8170:	subs	r3, r3, r2
    8172:	ldr	r0, [r7, #0]
    8174:	cmp.w	r3, #1000	; 0x3e8
    8178:	bcc.n	8194 <now()+0x30>
    817a:	adds	r0, #1
    817c:	b.n	8180 <now()+0x1c>
    817e:	mov	r0, r1
		// millis() and prevMillis are both unsigned ints thus the subtraction will always be the absolute value of the difference
    sysTime++;
    prevMillis += 1000;	
    8180:	add.w	r2, r2, #1000	; 0x3e8
    8184:	ldr	r3, [r4, #0]
    8186:	adds	r1, r0, #1
#endif


time_t now() {
	// calculate number of seconds passed since last call to now()
  while (millis() - prevMillis >= 1000) {
    8188:	subs	r3, r3, r2
    818a:	cmp.w	r3, #1000	; 0x3e8
    818e:	bcs.n	817e <now()+0x1a>
    8190:	str	r0, [r7, #0]
    8192:	str	r2, [r5, #0]
    prevMillis += 1000;	
#ifdef TIME_DRIFT_INFO
    sysUnsyncedTime++; // this can be compared to the synced time to measure long term drift     
#endif
  }
  if (nextSyncTime <= sysTime) {
    8194:	ldr	r6, [pc, #72]	; (81e0 <now()+0x7c>)
    8196:	ldr	r3, [r6, #0]
    8198:	cmp	r0, r3
    819a:	bcc.n	81bc <now()+0x58>
    if (getTimePtr != 0) {
    819c:	ldr	r3, [pc, #68]	; (81e4 <now()+0x80>)
    819e:	ldr	r3, [r3, #0]
    81a0:	cbz	r3, 81bc <now()+0x58>
      time_t t = getTimePtr();
    81a2:	blx	r3
 if(sysUnsyncedTime == 0) 
   sysUnsyncedTime = t;   // store the time of the first call to set a valid Time   
#endif

  sysTime = (uint32_t)t;  
  nextSyncTime = (uint32_t)t + syncInterval;
    81a4:	ldr	r3, [pc, #64]	; (81e8 <now()+0x84>)
#endif
  }
  if (nextSyncTime <= sysTime) {
    if (getTimePtr != 0) {
      time_t t = getTimePtr();
      if (t != 0) {
    81a6:	cbnz	r0, 81be <now()+0x5a>
        setTime(t);
      } else {
        nextSyncTime = sysTime + syncInterval;
        Status = (Status == timeNotSet) ?  timeNotSet : timeNeedsSync;
    81a8:	ldr	r1, [pc, #64]	; (81ec <now()+0x88>)
    if (getTimePtr != 0) {
      time_t t = getTimePtr();
      if (t != 0) {
        setTime(t);
      } else {
        nextSyncTime = sysTime + syncInterval;
    81aa:	ldr	r2, [r3, #0]
        Status = (Status == timeNotSet) ?  timeNotSet : timeNeedsSync;
    81ac:	ldrb	r3, [r1, #0]
    if (getTimePtr != 0) {
      time_t t = getTimePtr();
      if (t != 0) {
        setTime(t);
      } else {
        nextSyncTime = sysTime + syncInterval;
    81ae:	ldr	r0, [r7, #0]
        Status = (Status == timeNotSet) ?  timeNotSet : timeNeedsSync;
    81b0:	adds	r3, #0
    if (getTimePtr != 0) {
      time_t t = getTimePtr();
      if (t != 0) {
        setTime(t);
      } else {
        nextSyncTime = sysTime + syncInterval;
    81b2:	add	r2, r0
        Status = (Status == timeNotSet) ?  timeNotSet : timeNeedsSync;
    81b4:	it	ne
    81b6:	movne	r3, #1
    if (getTimePtr != 0) {
      time_t t = getTimePtr();
      if (t != 0) {
        setTime(t);
      } else {
        nextSyncTime = sysTime + syncInterval;
    81b8:	str	r2, [r6, #0]
        Status = (Status == timeNotSet) ?  timeNotSet : timeNeedsSync;
    81ba:	strb	r3, [r1, #0]
      }
    }
  }  
  return (time_t)sysTime;
}
    81bc:	pop	{r3, r4, r5, r6, r7, pc}
 if(sysUnsyncedTime == 0) 
   sysUnsyncedTime = t;   // store the time of the first call to set a valid Time   
#endif

  sysTime = (uint32_t)t;  
  nextSyncTime = (uint32_t)t + syncInterval;
    81be:	ldr	r3, [r3, #0]
  Status = timeSet;
    81c0:	movs	r1, #2
    81c2:	ldr	r4, [r4, #0]
    81c4:	ldr	r2, [pc, #36]	; (81ec <now()+0x88>)
 if(sysUnsyncedTime == 0) 
   sysUnsyncedTime = t;   // store the time of the first call to set a valid Time   
#endif

  sysTime = (uint32_t)t;  
  nextSyncTime = (uint32_t)t + syncInterval;
    81c6:	add	r3, r0
#ifdef TIME_DRIFT_INFO
 if(sysUnsyncedTime == 0) 
   sysUnsyncedTime = t;   // store the time of the first call to set a valid Time   
#endif

  sysTime = (uint32_t)t;  
    81c8:	str	r0, [r7, #0]
  nextSyncTime = (uint32_t)t + syncInterval;
  Status = timeSet;
  prevMillis = millis();  // restart counting from now (thanks to Korman for this fix)
    81ca:	str	r4, [r5, #0]
 if(sysUnsyncedTime == 0) 
   sysUnsyncedTime = t;   // store the time of the first call to set a valid Time   
#endif

  sysTime = (uint32_t)t;  
  nextSyncTime = (uint32_t)t + syncInterval;
    81cc:	str	r3, [r6, #0]
  Status = timeSet;
    81ce:	strb	r1, [r2, #0]
    81d0:	pop	{r3, r4, r5, r6, r7, pc}
    81d2:	nop
    81d4:	.word	0x200447a4
    81d8:	.word	0x20043f98
    81dc:	.word	0x20043f8c
    81e0:	.word	0x20043f9c
    81e4:	.word	0x20043f94
    81e8:	.word	0x20000bb0
    81ec:	.word	0x20043f90

000081f0 <hour()>:
    breakTime(t, tm); 
    cacheTime = t; 
  }
}

int hour() { // the hour now 
    81f0:	push	{r3, lr}
  return hour(now()); 
    81f2:	bl	8164 <now()>
static tmElements_t tm;          // a cache of time elements
static time_t cacheTime;   // the time the cache was updated
static uint32_t syncInterval = 300;  // time sync will be attempted after this many seconds

void refreshCache(time_t t) {
  if (t != cacheTime) {
    81f6:	ldr	r3, [pc, #16]	; (8208 <hour()+0x18>)
    81f8:	ldr	r3, [r3, #0]
    81fa:	cmp	r0, r3
    81fc:	beq.n	8202 <hour()+0x12>
    81fe:	bl	814c <refreshCache(long) [clone .part.0]>
  return hour(now()); 
}

int hour(time_t t) { // the hour for the given time
  refreshCache(t);
  return tm.Hour;  
    8202:	ldr	r3, [pc, #8]	; (820c <hour()+0x1c>)
  }
}

int hour() { // the hour now 
  return hour(now()); 
}
    8204:	ldrb	r0, [r3, #2]
    8206:	pop	{r3, pc}
    8208:	.word	0x20043f80
    820c:	.word	0x20043f84

00008210 <minute()>:

uint8_t isPM(time_t t) { // returns true if PM
  return (hour(t) >= 12); 
}

int minute() {
    8210:	push	{r3, lr}
  return minute(now()); 
    8212:	bl	8164 <now()>
static tmElements_t tm;          // a cache of time elements
static time_t cacheTime;   // the time the cache was updated
static uint32_t syncInterval = 300;  // time sync will be attempted after this many seconds

void refreshCache(time_t t) {
  if (t != cacheTime) {
    8216:	ldr	r3, [pc, #16]	; (8228 <minute()+0x18>)
    8218:	ldr	r3, [r3, #0]
    821a:	cmp	r0, r3
    821c:	beq.n	8222 <minute()+0x12>
    821e:	bl	814c <refreshCache(long) [clone .part.0]>
  return minute(now()); 
}

int minute(time_t t) { // the minute for the given time
  refreshCache(t);
  return tm.Minute;  
    8222:	ldr	r3, [pc, #8]	; (822c <minute()+0x1c>)
  return (hour(t) >= 12); 
}

int minute() {
  return minute(now()); 
}
    8224:	ldrb	r0, [r3, #1]
    8226:	pop	{r3, pc}
    8228:	.word	0x20043f80
    822c:	.word	0x20043f84

00008230 <second()>:
int minute(time_t t) { // the minute for the given time
  refreshCache(t);
  return tm.Minute;  
}

int second() {
    8230:	push	{r3, lr}
  return second(now()); 
    8232:	bl	8164 <now()>
static tmElements_t tm;          // a cache of time elements
static time_t cacheTime;   // the time the cache was updated
static uint32_t syncInterval = 300;  // time sync will be attempted after this many seconds

void refreshCache(time_t t) {
  if (t != cacheTime) {
    8236:	ldr	r3, [pc, #16]	; (8248 <second()+0x18>)
    8238:	ldr	r3, [r3, #0]
    823a:	cmp	r0, r3
    823c:	beq.n	8242 <second()+0x12>
    823e:	bl	814c <refreshCache(long) [clone .part.0]>
  return second(now()); 
}

int second(time_t t) {  // the second for the given time
  refreshCache(t);
  return tm.Second;
    8242:	ldr	r3, [pc, #8]	; (824c <second()+0x1c>)
  return tm.Minute;  
}

int second() {
  return second(now()); 
}
    8244:	ldrb	r0, [r3, #0]
    8246:	pop	{r3, pc}
    8248:	.word	0x20043f80
    824c:	.word	0x20043f84

00008250 <day()>:
int second(time_t t) {  // the second for the given time
  refreshCache(t);
  return tm.Second;
}

int day(){
    8250:	push	{r3, lr}
  return(day(now())); 
    8252:	bl	8164 <now()>
static tmElements_t tm;          // a cache of time elements
static time_t cacheTime;   // the time the cache was updated
static uint32_t syncInterval = 300;  // time sync will be attempted after this many seconds

void refreshCache(time_t t) {
  if (t != cacheTime) {
    8256:	ldr	r3, [pc, #16]	; (8268 <day()+0x18>)
    8258:	ldr	r3, [r3, #0]
    825a:	cmp	r0, r3
    825c:	beq.n	8262 <day()+0x12>
    825e:	bl	814c <refreshCache(long) [clone .part.0]>
  return(day(now())); 
}

int day(time_t t) { // the day for the given time (0-6)
  refreshCache(t);
  return tm.Day;
    8262:	ldr	r3, [pc, #8]	; (826c <day()+0x1c>)
  return tm.Second;
}

int day(){
  return(day(now())); 
}
    8264:	ldrb	r0, [r3, #4]
    8266:	pop	{r3, pc}
    8268:	.word	0x20043f80
    826c:	.word	0x20043f84

00008270 <month()>:
int weekday(time_t t) {
  refreshCache(t);
  return tm.Wday;
}
   
int month(){
    8270:	push	{r3, lr}
  return month(now()); 
    8272:	bl	8164 <now()>
static tmElements_t tm;          // a cache of time elements
static time_t cacheTime;   // the time the cache was updated
static uint32_t syncInterval = 300;  // time sync will be attempted after this many seconds

void refreshCache(time_t t) {
  if (t != cacheTime) {
    8276:	ldr	r3, [pc, #16]	; (8288 <month()+0x18>)
    8278:	ldr	r3, [r3, #0]
    827a:	cmp	r0, r3
    827c:	beq.n	8282 <month()+0x12>
    827e:	bl	814c <refreshCache(long) [clone .part.0]>
  return month(now()); 
}

int month(time_t t) {  // the month for the given time
  refreshCache(t);
  return tm.Month;
    8282:	ldr	r3, [pc, #8]	; (828c <month()+0x1c>)
  return tm.Wday;
}
   
int month(){
  return month(now()); 
}
    8284:	ldrb	r0, [r3, #5]
    8286:	pop	{r3, pc}
    8288:	.word	0x20043f80
    828c:	.word	0x20043f84

00008290 <year()>:
int month(time_t t) {  // the month for the given time
  refreshCache(t);
  return tm.Month;
}

int year() {  // as in Processing, the full four digit year: (2009, 2010 etc) 
    8290:	push	{r3, lr}
  return year(now()); 
    8292:	bl	8164 <now()>
static tmElements_t tm;          // a cache of time elements
static time_t cacheTime;   // the time the cache was updated
static uint32_t syncInterval = 300;  // time sync will be attempted after this many seconds

void refreshCache(time_t t) {
  if (t != cacheTime) {
    8296:	ldr	r3, [pc, #20]	; (82ac <year()+0x1c>)
    8298:	ldr	r3, [r3, #0]
    829a:	cmp	r0, r3
    829c:	beq.n	82a2 <year()+0x12>
    829e:	bl	814c <refreshCache(long) [clone .part.0]>
  return year(now()); 
}

int year(time_t t) { // the year for the given time
  refreshCache(t);
  return tmYearToCalendar(tm.Year);
    82a2:	ldr	r3, [pc, #12]	; (82b0 <year()+0x20>)
  refreshCache(t);
  return tm.Month;
}

int year() {  // as in Processing, the full four digit year: (2009, 2010 etc) 
  return year(now()); 
    82a4:	ldrb	r0, [r3, #6]
}
    82a6:	addw	r0, r0, #1970	; 0x7b2
    82aa:	pop	{r3, pc}
    82ac:	.word	0x20043f80
    82b0:	.word	0x20043f84

000082b4 <setSyncProvider(long (*)())>:
  return Status;
}

void setSyncProvider( getExternalTime getTimeFunction){
  getTimePtr = getTimeFunction;  
  nextSyncTime = sysTime;
    82b4:	ldr	r3, [pc, #12]	; (82c4 <setSyncProvider(long (*)())+0x10>)
    82b6:	ldr	r2, [pc, #16]	; (82c8 <setSyncProvider(long (*)())+0x14>)
    82b8:	ldr	r1, [r3, #0]
  now(); // required to actually update the status
  return Status;
}

void setSyncProvider( getExternalTime getTimeFunction){
  getTimePtr = getTimeFunction;  
    82ba:	ldr	r3, [pc, #16]	; (82cc <setSyncProvider(long (*)())+0x18>)
  nextSyncTime = sysTime;
    82bc:	str	r1, [r2, #0]
  now(); // required to actually update the status
  return Status;
}

void setSyncProvider( getExternalTime getTimeFunction){
  getTimePtr = getTimeFunction;  
    82be:	str	r0, [r3, #0]
  nextSyncTime = sysTime;
  now(); // this will sync the clock
    82c0:	b.w	8164 <now()>
    82c4:	.word	0x20043f8c
    82c8:	.word	0x20043f9c
    82cc:	.word	0x20043f94

000082d0 <_GLOBAL__sub_I__ZN17AudioOutputI2SOct13block_ch1_1stE>:
uint16_t  AudioOutputI2SOct::ch6_offset = 0;
uint16_t  AudioOutputI2SOct::ch7_offset = 0;
uint16_t  AudioOutputI2SOct::ch8_offset = 0;
bool AudioOutputI2SOct::update_responsibility = false;
DMAMEM __attribute__((aligned(32))) static uint32_t i2s_tx_buffer[AUDIO_BLOCK_SAMPLES*4];
DMAChannel AudioOutputI2SOct::dma(false);
    82d0:	ldr	r2, [pc, #8]	; (82dc <_GLOBAL__sub_I__ZN17AudioOutputI2SOct13block_ch1_1stE+0xc>)
    82d2:	ldr	r1, [pc, #12]	; (82e0 <_GLOBAL__sub_I__ZN17AudioOutputI2SOct13block_ch1_1stE+0x10>)
    82d4:	ldr	r0, [pc, #12]	; (82e4 <_GLOBAL__sub_I__ZN17AudioOutputI2SOct13block_ch1_1stE+0x14>)
    82d6:	b.w	10070 <__aeabi_atexit>
    82da:	nop
    82dc:	.word	0x20000b3c
    82e0:	.word	0x00000399
    82e4:	.word	0x20043fa0

000082e8 <_GLOBAL__sub_I__ZN13AudioInputI2S10block_leftE>:
DMAMEM __attribute__((aligned(32))) static uint32_t i2s_rx_buffer[AUDIO_BLOCK_SAMPLES];
audio_block_t * AudioInputI2S::block_left = NULL;
audio_block_t * AudioInputI2S::block_right = NULL;
uint16_t AudioInputI2S::block_offset = 0;
bool AudioInputI2S::update_responsibility = false;
DMAChannel AudioInputI2S::dma(false);
    82e8:	ldr	r2, [pc, #8]	; (82f4 <_GLOBAL__sub_I__ZN13AudioInputI2S10block_leftE+0xc>)
    82ea:	ldr	r1, [pc, #12]	; (82f8 <_GLOBAL__sub_I__ZN13AudioInputI2S10block_leftE+0x10>)
    82ec:	ldr	r0, [pc, #12]	; (82fc <_GLOBAL__sub_I__ZN13AudioInputI2S10block_leftE+0x14>)
    82ee:	b.w	10070 <__aeabi_atexit>
    82f2:	nop
    82f4:	.word	0x20000b3c
    82f8:	.word	0x00000399
    82fc:	.word	0x20043fa8

00008300 <_GLOBAL__sub_I__ZN19AudioOutputPT8211_214block_left_1stE>:
#if defined(AUDIO_PT8211_OVERSAMPLING)
DMAMEM __attribute__((aligned(32))) static uint32_t i2s_tx_buffer[AUDIO_BLOCK_SAMPLES*4];
#else
DMAMEM __attribute__((aligned(32))) static uint32_t i2s_tx_buffer[AUDIO_BLOCK_SAMPLES];
#endif
DMAChannel AudioOutputPT8211_2::dma(false);
    8300:	ldr	r2, [pc, #8]	; (830c <_GLOBAL__sub_I__ZN19AudioOutputPT8211_214block_left_1stE+0xc>)
    8302:	ldr	r1, [pc, #12]	; (8310 <_GLOBAL__sub_I__ZN19AudioOutputPT8211_214block_left_1stE+0x10>)
    8304:	ldr	r0, [pc, #12]	; (8314 <_GLOBAL__sub_I__ZN19AudioOutputPT8211_214block_left_1stE+0x14>)
    8306:	b.w	10070 <__aeabi_atexit>
    830a:	nop
    830c:	.word	0x20000b3c
    8310:	.word	0x00000399
    8314:	.word	0x20043fb0

00008318 <_GLOBAL__sub_I__ZN17AudioOutputPT821114block_left_1stE>:
#if defined(AUDIO_PT8211_OVERSAMPLING)
DMAMEM __attribute__((aligned(32))) static uint32_t i2s_tx_buffer[AUDIO_BLOCK_SAMPLES*4];
#else
DMAMEM __attribute__((aligned(32))) static uint32_t i2s_tx_buffer[AUDIO_BLOCK_SAMPLES];
#endif
DMAChannel AudioOutputPT8211::dma(false);
    8318:	ldr	r2, [pc, #8]	; (8324 <_GLOBAL__sub_I__ZN17AudioOutputPT821114block_left_1stE+0xc>)
    831a:	ldr	r1, [pc, #12]	; (8328 <_GLOBAL__sub_I__ZN17AudioOutputPT821114block_left_1stE+0x10>)
    831c:	ldr	r0, [pc, #12]	; (832c <_GLOBAL__sub_I__ZN17AudioOutputPT821114block_left_1stE+0x14>)
    831e:	b.w	10070 <__aeabi_atexit>
    8322:	nop
    8324:	.word	0x20000b3c
    8328:	.word	0x00000399
    832c:	.word	0x20043fb8

00008330 <_GLOBAL__sub_I__ZN16AudioInputSPDIF310block_leftE>:
static uint32_t spdif_rx_buffer[AUDIO_BLOCK_SAMPLES * 4];
audio_block_t * AudioInputSPDIF3::block_left = NULL;
audio_block_t * AudioInputSPDIF3::block_right = NULL;
uint16_t AudioInputSPDIF3::block_offset = 0;
bool AudioInputSPDIF3::update_responsibility = false;
DMAChannel AudioInputSPDIF3::dma(false);
    8330:	ldr	r2, [pc, #8]	; (833c <_GLOBAL__sub_I__ZN16AudioInputSPDIF310block_leftE+0xc>)
    8332:	ldr	r1, [pc, #12]	; (8340 <_GLOBAL__sub_I__ZN16AudioInputSPDIF310block_leftE+0x10>)
    8334:	ldr	r0, [pc, #12]	; (8344 <_GLOBAL__sub_I__ZN16AudioInputSPDIF310block_leftE+0x14>)
    8336:	b.w	10070 <__aeabi_atexit>
    833a:	nop
    833c:	.word	0x20000b3c
    8340:	.word	0x00000399
    8344:	.word	0x20043fc0

00008348 <_GLOBAL__sub_I__ZN14AudioInputTDM214block_incomingE>:
audio_block_t * AudioInputTDM2::block_incoming[16] = {
	nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr,
	nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr
};
bool AudioInputTDM2::update_responsibility = false;
DMAChannel AudioInputTDM2::dma(false);
    8348:	ldr	r2, [pc, #8]	; (8354 <_GLOBAL__sub_I__ZN14AudioInputTDM214block_incomingE+0xc>)
    834a:	ldr	r1, [pc, #12]	; (8358 <_GLOBAL__sub_I__ZN14AudioInputTDM214block_incomingE+0x10>)
    834c:	ldr	r0, [pc, #12]	; (835c <_GLOBAL__sub_I__ZN14AudioInputTDM214block_incomingE+0x14>)
    834e:	b.w	10070 <__aeabi_atexit>
    8352:	nop
    8354:	.word	0x20000b3c
    8358:	.word	0x00000399
    835c:	.word	0x20043fc8

00008360 <_GLOBAL__sub_I__ZN16AudioInputAnalog3dmaE>:

extern "C" void xbar_connect(unsigned int input, unsigned int output);

#define FILTERLEN 15

DMAChannel AudioInputAnalog::dma(false);
    8360:	ldr	r2, [pc, #8]	; (836c <_GLOBAL__sub_I__ZN16AudioInputAnalog3dmaE+0xc>)
    8362:	ldr	r1, [pc, #12]	; (8370 <_GLOBAL__sub_I__ZN16AudioInputAnalog3dmaE+0x10>)
    8364:	ldr	r0, [pc, #12]	; (8374 <_GLOBAL__sub_I__ZN16AudioInputAnalog3dmaE+0x14>)
    8366:	b.w	10070 <__aeabi_atexit>
    836a:	nop
    836c:	.word	0x20000b3c
    8370:	.word	0x00000399
    8374:	.word	0x20043fd0

00008378 <AudioControlSGTL5000::disable()>:
public:
	AudioControlSGTL5000(void) : i2c_addr(0x0A) { }
	void setAddress(uint8_t level);
	bool enable(void);//For Teensy LC the SGTL acts as master, for all other Teensys as slave.
	bool enable(const unsigned extMCLK, const uint32_t pllFreq = (4096.0l * AUDIO_SAMPLE_RATE_EXACT) ); //With extMCLK > 0, the SGTL acts as Master
	bool disable(void) { return false; }
    8378:	movs	r0, #0
    837a:	bx	lr

0000837c <AudioControlSGTL5000::inputLevel(float)>:
	bool volume(float n) { return volumeInteger(n * 129 + 0.499f); }
	bool inputLevel(float n) {return false;}
    837c:	movs	r0, #0
    837e:	bx	lr

00008380 <AudioControlSGTL5000::read(unsigned int)>:
	return true;
}


unsigned int AudioControlSGTL5000::read(unsigned int reg)
{
    8380:	push	{r3, r4, r5, r6, r7, lr}
	void setClock(uint32_t frequency);
	void setSDA(uint8_t pin);
	void setSCL(uint8_t pin); 
	void beginTransmission(uint8_t address) {
		txBuffer[0] = (address << 1);
		transmitting = 1;
    8382:	movs	r5, #1
	void end();
	void setClock(uint32_t frequency);
	void setSDA(uint8_t pin);
	void setSCL(uint8_t pin); 
	void beginTransmission(uint8_t address) {
		txBuffer[0] = (address << 1);
    8384:	ldrb	r2, [r0, #8]
    8386:	ldr	r4, [pc, #120]	; (8400 <AudioControlSGTL5000::read(unsigned int)+0x80>)
    8388:	mov	r6, r1
    838a:	lsls	r2, r5
	}
	size_t write(long n) {
		return write((uint8_t)n);
	}
	size_t write(unsigned int n) {
		return write((uint8_t)n);
    838c:	ubfx	r1, r1, #8, #8
    8390:	mov	r7, r0
    8392:	mov	r0, r4
	void end();
	void setClock(uint32_t frequency);
	void setSDA(uint8_t pin);
	void setSCL(uint8_t pin); 
	void beginTransmission(uint8_t address) {
		txBuffer[0] = (address << 1);
    8394:	strb.w	r2, [r4, #61]	; 0x3d
		transmitting = 1;
    8398:	strb.w	r5, [r4, #96]	; 0x60
		txBufferLength = 1;
    839c:	strb.w	r5, [r4, #95]	; 0x5f
	}
	size_t write(long n) {
		return write((uint8_t)n);
	}
	size_t write(unsigned int n) {
		return write((uint8_t)n);
    83a0:	bl	8978 <TwoWire::write(unsigned char)>
    83a4:	uxtb	r1, r6
    83a6:	mov	r0, r4
    83a8:	bl	8978 <TwoWire::write(unsigned char)>
	unsigned int val;
	Wire.beginTransmission(i2c_addr);
	Wire.write(reg >> 8);
	Wire.write(reg);
	if (Wire.endTransmission(false) != 0) return 0;
    83ac:	mov	r0, r4
    83ae:	movs	r1, #0
    83b0:	bl	8b38 <TwoWire::endTransmission(unsigned char)>
    83b4:	cbz	r0, 83ba <AudioControlSGTL5000::read(unsigned int)+0x3a>
    83b6:	movs	r0, #0
    83b8:	pop	{r3, r4, r5, r6, r7, pc}
	uint8_t requestFrom(int address, int quantity, int sendStop) {
		return requestFrom((uint8_t)address, (uint8_t)quantity,
			(uint8_t)(sendStop ? 1 : 0));
	}
	uint8_t requestFrom(int address, int quantity) {
		return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)1);
    83ba:	mov	r3, r5
    83bc:	ldrb	r1, [r7, #8]
    83be:	movs	r2, #2
    83c0:	mov	r0, r4
    83c2:	bl	8c18 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)>
	if (Wire.requestFrom((int)i2c_addr, 2) < 2) return 0;
    83c6:	cmp	r0, #1
    83c8:	bls.n	83b6 <AudioControlSGTL5000::read(unsigned int)+0x36>
	virtual size_t write(const uint8_t *data, size_t quantity);
	virtual int available(void) {
		return rxBufferLength - rxBufferIndex;
	}
	virtual int read(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
    83ca:	ldrb.w	r1, [r4, #58]	; 0x3a
    83ce:	ldrb.w	r5, [r4, #59]	; 0x3b
    83d2:	cmp	r1, r5
    83d4:	bcs.n	83f8 <AudioControlSGTL5000::read(unsigned int)+0x78>
		return rxBuffer[rxBufferIndex++];
    83d6:	adds	r2, r1, #1
    83d8:	adds	r3, r4, r1
    83da:	uxtb	r2, r2
	val = Wire.read() << 8;
    83dc:	ldrb	r0, [r3, #26]
	virtual size_t write(const uint8_t *data, size_t quantity);
	virtual int available(void) {
		return rxBufferLength - rxBufferIndex;
	}
	virtual int read(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
    83de:	cmp	r5, r2
		return rxBuffer[rxBufferIndex++];
    83e0:	strb.w	r2, [r4, #58]	; 0x3a
    83e4:	mov.w	r3, r0, lsl #8
	virtual size_t write(const uint8_t *data, size_t quantity);
	virtual int available(void) {
		return rxBufferLength - rxBufferIndex;
	}
	virtual int read(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
    83e8:	bls.n	83f8 <AudioControlSGTL5000::read(unsigned int)+0x78>
		return rxBuffer[rxBufferIndex++];
    83ea:	add	r2, r4
    83ec:	adds	r1, #2
    83ee:	ldrb	r0, [r2, #26]
    83f0:	strb.w	r1, [r4, #58]	; 0x3a
    83f4:	orrs	r0, r3
    83f6:	pop	{r3, r4, r5, r6, r7, pc}
	virtual size_t write(const uint8_t *data, size_t quantity);
	virtual int available(void) {
		return rxBufferLength - rxBufferIndex;
	}
	virtual int read(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
    83f8:	mov.w	r0, #4294967295
	val |= Wire.read();
	return val;
}
    83fc:	pop	{r3, r4, r5, r6, r7, pc}
    83fe:	nop
    8400:	.word	0x20000bb4

00008404 <AudioControlSGTL5000::write(unsigned int, unsigned int)>:

bool AudioControlSGTL5000::write(unsigned int reg, unsigned int val)
{
    8404:	push	{r3, r4, r5, r6, r7, lr}
	void setClock(uint32_t frequency);
	void setSDA(uint8_t pin);
	void setSCL(uint8_t pin); 
	void beginTransmission(uint8_t address) {
		txBuffer[0] = (address << 1);
		transmitting = 1;
    8406:	movs	r5, #1
	void end();
	void setClock(uint32_t frequency);
	void setSDA(uint8_t pin);
	void setSCL(uint8_t pin); 
	void beginTransmission(uint8_t address) {
		txBuffer[0] = (address << 1);
    8408:	ldrb	r3, [r0, #8]
    840a:	ldr	r4, [pc, #80]	; (845c <AudioControlSGTL5000::write(unsigned int, unsigned int)+0x58>)
	if (reg == CHIP_ANA_CTRL) ana_ctrl = val;
    840c:	cmp	r1, #36	; 0x24
    840e:	lsl.w	r3, r3, r5
	val |= Wire.read();
	return val;
}

bool AudioControlSGTL5000::write(unsigned int reg, unsigned int val)
{
    8412:	mov	r6, r1
	if (reg == CHIP_ANA_CTRL) ana_ctrl = val;
    8414:	it	eq
    8416:	strheq	r2, [r0, #6]
	val |= Wire.read();
	return val;
}

bool AudioControlSGTL5000::write(unsigned int reg, unsigned int val)
{
    8418:	mov	r7, r2
	}
	size_t write(long n) {
		return write((uint8_t)n);
	}
	size_t write(unsigned int n) {
		return write((uint8_t)n);
    841a:	ubfx	r1, r1, #8, #8
    841e:	mov	r0, r4
	void end();
	void setClock(uint32_t frequency);
	void setSDA(uint8_t pin);
	void setSCL(uint8_t pin); 
	void beginTransmission(uint8_t address) {
		txBuffer[0] = (address << 1);
    8420:	strb.w	r3, [r4, #61]	; 0x3d
		transmitting = 1;
    8424:	strb.w	r5, [r4, #96]	; 0x60
		txBufferLength = 1;
    8428:	strb.w	r5, [r4, #95]	; 0x5f
	}
	size_t write(long n) {
		return write((uint8_t)n);
	}
	size_t write(unsigned int n) {
		return write((uint8_t)n);
    842c:	bl	8978 <TwoWire::write(unsigned char)>
    8430:	uxtb	r1, r6
    8432:	mov	r0, r4
    8434:	bl	8978 <TwoWire::write(unsigned char)>
    8438:	ubfx	r1, r7, #8, #8
    843c:	mov	r0, r4
    843e:	bl	8978 <TwoWire::write(unsigned char)>
    8442:	mov	r0, r4
    8444:	uxtb	r1, r7
    8446:	bl	8978 <TwoWire::write(unsigned char)>
	void beginTransmission(int address) {
		beginTransmission((uint8_t)address);
	}
	uint8_t endTransmission(uint8_t sendStop);
	uint8_t endTransmission(void) {
		return endTransmission(1);
    844a:	mov	r1, r5
    844c:	mov	r0, r4
    844e:	bl	8b38 <TwoWire::endTransmission(unsigned char)>
	Wire.write(reg);
	Wire.write(val >> 8);
	Wire.write(val);
	if (Wire.endTransmission() == 0) return true;
	return false;
}
    8452:	clz	r0, r0
    8456:	lsrs	r0, r0, #5
    8458:	pop	{r3, r4, r5, r6, r7, pc}
    845a:	nop
    845c:	.word	0x20000bb4

00008460 <AudioControlSGTL5000::micGain(unsigned int)>:

bool AudioControlSGTL5000::micGain(unsigned int dB)
{
	unsigned int preamp_gain, input_gain;

	if (dB >= 40) {
    8460:	cmp	r1, #39	; 0x27
	unsigned short m=((0x7F-calcVol(right,0x7F))<<8)|(0x7F-calcVol(left,0x7F));
	return write(CHIP_ANA_HP_CTRL, m);
}

bool AudioControlSGTL5000::micGain(unsigned int dB)
{
    8462:	push	{r3, r4, r5, lr}
    8464:	mov	r4, r1
    8466:	mov	r5, r0
	unsigned int preamp_gain, input_gain;

	if (dB >= 40) {
    8468:	bls.n	847e <AudioControlSGTL5000::micGain(unsigned int)+0x1e>
		preamp_gain = 3;
		dB -= 40;
    846a:	sub.w	r4, r1, #40	; 0x28
    846e:	movw	r2, #371	; 0x173
		preamp_gain = 0;
	}
	input_gain = (dB * 2) / 3;
	if (input_gain > 15) input_gain = 15;

	return write(CHIP_MIC_CTRL, 0x0170 | preamp_gain)
    8472:	movs	r1, #42	; 0x2a
    8474:	mov	r0, r5
    8476:	bl	8404 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	    && write(CHIP_ANA_ADC_CTRL, (input_gain << 4) | input_gain);
    847a:	cbnz	r0, 8496 <AudioControlSGTL5000::micGain(unsigned int)+0x36>
}
    847c:	pop	{r3, r4, r5, pc}
	unsigned int preamp_gain, input_gain;

	if (dB >= 40) {
		preamp_gain = 3;
		dB -= 40;
	} else if (dB >= 30) {
    847e:	cmp	r1, #29
    8480:	bls.n	84b6 <AudioControlSGTL5000::micGain(unsigned int)+0x56>
		preamp_gain = 2;
		dB -= 30;
    8482:	sub.w	r4, r1, #30
    8486:	mov.w	r2, #370	; 0x172
		preamp_gain = 0;
	}
	input_gain = (dB * 2) / 3;
	if (input_gain > 15) input_gain = 15;

	return write(CHIP_MIC_CTRL, 0x0170 | preamp_gain)
    848a:	movs	r1, #42	; 0x2a
    848c:	mov	r0, r5
    848e:	bl	8404 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	    && write(CHIP_ANA_ADC_CTRL, (input_gain << 4) | input_gain);
    8492:	cmp	r0, #0
    8494:	beq.n	847c <AudioControlSGTL5000::micGain(unsigned int)+0x1c>
		preamp_gain = 1;
		dB -= 20;
	} else {
		preamp_gain = 0;
	}
	input_gain = (dB * 2) / 3;
    8496:	lsls	r4, r4, #1
    8498:	ldr	r2, [pc, #48]	; (84cc <AudioControlSGTL5000::micGain(unsigned int)+0x6c>)
	if (input_gain > 15) input_gain = 15;

	return write(CHIP_MIC_CTRL, 0x0170 | preamp_gain)
	    && write(CHIP_ANA_ADC_CTRL, (input_gain << 4) | input_gain);
    849a:	mov	r0, r5
    849c:	movs	r1, #32
		preamp_gain = 1;
		dB -= 20;
	} else {
		preamp_gain = 0;
	}
	input_gain = (dB * 2) / 3;
    849e:	umull	r3, r2, r2, r4
    84a2:	lsrs	r2, r2, #1
    84a4:	cmp	r2, #15
    84a6:	it	cs
    84a8:	movcs	r2, #15
	if (input_gain > 15) input_gain = 15;

	return write(CHIP_MIC_CTRL, 0x0170 | preamp_gain)
	    && write(CHIP_ANA_ADC_CTRL, (input_gain << 4) | input_gain);
}
    84aa:	ldmia.w	sp!, {r3, r4, r5, lr}
	}
	input_gain = (dB * 2) / 3;
	if (input_gain > 15) input_gain = 15;

	return write(CHIP_MIC_CTRL, 0x0170 | preamp_gain)
	    && write(CHIP_ANA_ADC_CTRL, (input_gain << 4) | input_gain);
    84ae:	orr.w	r2, r2, r2, lsl #4
    84b2:	b.w	8404 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
		preamp_gain = 3;
		dB -= 40;
	} else if (dB >= 30) {
		preamp_gain = 2;
		dB -= 30;
	} else if (dB >= 20) {
    84b6:	cmp	r1, #19
    84b8:	bls.n	84c4 <AudioControlSGTL5000::micGain(unsigned int)+0x64>
		preamp_gain = 1;
		dB -= 20;
    84ba:	sub.w	r4, r1, #20
    84be:	movw	r2, #369	; 0x171
    84c2:	b.n	8472 <AudioControlSGTL5000::micGain(unsigned int)+0x12>
    84c4:	mov.w	r2, #368	; 0x170
    84c8:	b.n	8472 <AudioControlSGTL5000::micGain(unsigned int)+0x12>
    84ca:	nop
    84cc:	.word	0xaaaaaaab

000084d0 <AudioControlSGTL5000::enable(unsigned int, unsigned long)>:
	return enable(0);
#endif	
}

bool AudioControlSGTL5000::enable(const unsigned extMCLK, const uint32_t pllFreq)
{
    84d0:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    84d4:	mov	r4, r0

	Wire.begin();
    84d6:	ldr	r0, [pc, #420]	; (867c <AudioControlSGTL5000::enable(unsigned int, unsigned long)+0x1ac>)
	return enable(0);
#endif	
}

bool AudioControlSGTL5000::enable(const unsigned extMCLK, const uint32_t pllFreq)
{
    84d8:	mov	r6, r1
    84da:	mov	r7, r2

	Wire.begin();
    84dc:	bl	14310 <___ZN7TwoWire5beginEv_veneer>
	delay(5);
    84e0:	movs	r0, #5
    84e2:	bl	ef74 <delay>
	
	//Check if we are in Master Mode and if the Teensy had a reset:
	unsigned int n = read(CHIP_I2S_CTRL);
    84e6:	mov	r0, r4
    84e8:	movs	r1, #6
    84ea:	bl	8380 <AudioControlSGTL5000::read(unsigned int)>
	if ( (extMCLK > 0) && (n == (0x0030 | (1<<7))) ) {
    84ee:	adds	r5, r6, #0
    84f0:	it	ne
    84f2:	movne	r5, #1
    84f4:	cmp	r0, #176	; 0xb0
    84f6:	it	ne
    84f8:	movne	r5, #0
    84fa:	cbz	r5, 850a <AudioControlSGTL5000::enable(unsigned int, unsigned long)+0x3a>
		//Yes. Do not initialize.
		muted = false;
    84fc:	movs	r2, #0
		semi_automated = true;
    84fe:	movs	r3, #1
	
	//Check if we are in Master Mode and if the Teensy had a reset:
	unsigned int n = read(CHIP_I2S_CTRL);
	if ( (extMCLK > 0) && (n == (0x0030 | (1<<7))) ) {
		//Yes. Do not initialize.
		muted = false;
    8500:	strb	r2, [r4, #4]
		semi_automated = true;
    8502:	strb	r3, [r4, #9]
	write(CHIP_ANA_HP_CTRL, 0x7F7F); // set volume (lowest level)
	write(CHIP_ANA_CTRL, 0x0036);  // enable zero cross detectors

	semi_automated = true;
	return true;
}
    8504:	mov	r0, r5
    8506:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	//Serial.print("chip ID = ");
	//delay(5);
	//unsigned int n = read(CHIP_ID);
	//Serial.println(n, HEX);

        muted = true;
    850a:	mov.w	r8, #1

	int r = write(CHIP_ANA_POWER, 0x4060);  // VDDD is externally driven with 1.8V
    850e:	movw	r2, #16480	; 0x4060
    8512:	movs	r1, #48	; 0x30
    8514:	mov	r0, r4
	//Serial.print("chip ID = ");
	//delay(5);
	//unsigned int n = read(CHIP_ID);
	//Serial.println(n, HEX);

        muted = true;
    8516:	strb.w	r8, [r4, #4]

	int r = write(CHIP_ANA_POWER, 0x4060);  // VDDD is externally driven with 1.8V
    851a:	bl	8404 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	if (!r) return false;
    851e:	mov	r5, r0
    8520:	cmp	r0, #0
    8522:	beq.n	8504 <AudioControlSGTL5000::enable(unsigned int, unsigned long)+0x34>
	write(CHIP_LINREG_CTRL, 0x006C);  // VDDA & VDDIO both over 3.1V
    8524:	movs	r2, #108	; 0x6c
    8526:	movs	r1, #38	; 0x26
    8528:	mov	r0, r4
    852a:	bl	8404 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	write(CHIP_REF_CTRL, 0x01F2); // VAG=1.575, normal ramp, +12.5% bias current
    852e:	mov.w	r2, #498	; 0x1f2
    8532:	movs	r1, #40	; 0x28
    8534:	mov	r0, r4
    8536:	bl	8404 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	write(CHIP_LINE_OUT_CTRL, 0x0F22); // LO_VAGCNTRL=1.65V, OUT_CURRENT=0.54mA
    853a:	movw	r2, #3874	; 0xf22
    853e:	movs	r1, #44	; 0x2c
    8540:	mov	r0, r4
    8542:	bl	8404 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	write(CHIP_SHORT_CTRL, 0x4446);  // allow up to 125mA
    8546:	movw	r2, #17478	; 0x4446
    854a:	movs	r1, #60	; 0x3c
    854c:	mov	r0, r4
    854e:	bl	8404 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	write(CHIP_ANA_CTRL, 0x0137);  // enable zero cross detectors
    8552:	movw	r2, #311	; 0x137
    8556:	movs	r1, #36	; 0x24
    8558:	mov	r0, r4
    855a:	bl	8404 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
		
	if (extMCLK > 0) {
    855e:	cmp	r6, #0
    8560:	beq.n	863a <AudioControlSGTL5000::enable(unsigned int, unsigned long)+0x16a>
		//SGTL is I2S Master
		//Datasheet Pg. 14: Using the PLL - Asynchronous SYS_MCLK input
		if (extMCLK > 17000000) {
    8562:	ldr	r3, [pc, #284]	; (8680 <AudioControlSGTL5000::enable(unsigned int, unsigned long)+0x1b0>)
			write(CHIP_CLK_TOP_CTRL, 1);
		} else {
			write(CHIP_CLK_TOP_CTRL, 0);
    8564:	movs	r1, #52	; 0x34
    8566:	mov	r0, r4
	write(CHIP_ANA_CTRL, 0x0137);  // enable zero cross detectors
		
	if (extMCLK > 0) {
		//SGTL is I2S Master
		//Datasheet Pg. 14: Using the PLL - Asynchronous SYS_MCLK input
		if (extMCLK > 17000000) {
    8568:	cmp	r6, r3
			write(CHIP_CLK_TOP_CTRL, 1);
    856a:	ite	hi
    856c:	movhi	r2, r8
		} else {
			write(CHIP_CLK_TOP_CTRL, 0);
    856e:	movls	r2, #0
    8570:	bl	8404 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
		}

		uint32_t int_divisor = (pllFreq / extMCLK) & 0x1f;
		uint32_t frac_divisor = (uint32_t)((((float)pllFreq / extMCLK) - int_divisor) * 2048.0f) & 0x7ff;
		
		write(CHIP_PLL_CTRL, (int_divisor << 11) | frac_divisor);		
    8574:	vmov	s15, r7
    8578:	vldr	s13, [pc, #264]	; 8684 <AudioControlSGTL5000::enable(unsigned int, unsigned long)+0x1b4>
    857c:	movs	r1, #50	; 0x32
    857e:	vcvt.f32.u32	s12, s15
    8582:	vmov	s15, r6
    8586:	mov	r0, r4
    8588:	vcvt.f32.u32	s15, s15
			write(CHIP_CLK_TOP_CTRL, 1);
		} else {
			write(CHIP_CLK_TOP_CTRL, 0);
		}

		uint32_t int_divisor = (pllFreq / extMCLK) & 0x1f;
    858c:	udiv	r6, r7, r6
		uint32_t frac_divisor = (uint32_t)((((float)pllFreq / extMCLK) - int_divisor) * 2048.0f) & 0x7ff;
		
		write(CHIP_PLL_CTRL, (int_divisor << 11) | frac_divisor);		
    8590:	vdiv.f32	s14, s12, s15
			write(CHIP_CLK_TOP_CTRL, 1);
		} else {
			write(CHIP_CLK_TOP_CTRL, 0);
		}

		uint32_t int_divisor = (pllFreq / extMCLK) & 0x1f;
    8594:	and.w	r2, r6, #31
		uint32_t frac_divisor = (uint32_t)((((float)pllFreq / extMCLK) - int_divisor) * 2048.0f) & 0x7ff;
		
		write(CHIP_PLL_CTRL, (int_divisor << 11) | frac_divisor);		
    8598:	vmov	s15, r2
    859c:	vcvt.f32.s32	s15, s15
    85a0:	vsub.f32	s15, s14, s15
    85a4:	vmul.f32	s15, s15, s13
    85a8:	vcvt.u32.f32	s15, s15
    85ac:	vmov	r3, s15
    85b0:	ubfx	r3, r3, #0, #11
    85b4:	orr.w	r2, r3, r2, lsl #11
    85b8:	bl	8404 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
		write(CHIP_ANA_POWER, 0x40FF | (1<<10) | (1<<8) ); // power up: lineout, hp, adc, dac, PLL_POWERUP, VCOAMP_POWERUP
    85bc:	movw	r2, #17919	; 0x45ff
    85c0:	movs	r1, #48	; 0x30
    85c2:	mov	r0, r4
    85c4:	bl	8404 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	} else {
		//SGTL is I2S Slave
		write(CHIP_ANA_POWER, 0x40FF); // power up: lineout, hp, adc, dac
	}

	write(CHIP_DIG_POWER, 0x0073); // power up all digital stuff
    85c8:	movs	r2, #115	; 0x73
    85ca:	movs	r1, #2
    85cc:	mov	r0, r4
    85ce:	bl	8404 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	delay(400);
    85d2:	mov.w	r0, #400	; 0x190
    85d6:	bl	ef74 <delay>
	write(CHIP_LINE_OUT_VOL, 0x1D1D); // default approx 1.3 volts peak-to-peak
    85da:	movw	r2, #7453	; 0x1d1d
    85de:	movs	r1, #46	; 0x2e
    85e0:	mov	r0, r4
    85e2:	bl	8404 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	
	if (extMCLK > 0) { 
		//SGTL is I2S Master
		write(CHIP_CLK_CTRL, 0x0004 | 0x03);  // 44.1 kHz, 256*Fs, use PLL
    85e6:	movs	r2, #7
    85e8:	movs	r1, #4
    85ea:	mov	r0, r4
    85ec:	bl	8404 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
		write(CHIP_I2S_CTRL, 0x0030 | (1<<7)); // SCLK=64*Fs, 16bit, I2S format
    85f0:	movs	r2, #176	; 0xb0
    85f2:	movs	r1, #6
    85f4:	mov	r0, r4
    85f6:	bl	8404 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
		write(CHIP_CLK_CTRL, 0x0004);  // 44.1 kHz, 256*Fs
		write(CHIP_I2S_CTRL, 0x0030); // SCLK=64*Fs, 16bit, I2S format
	}

	// default signal routing is ok?
	write(CHIP_SSS_CTRL, 0x0010); // ADC->I2S, I2S->DAC
    85fa:	movs	r2, #16
    85fc:	movs	r1, #10
    85fe:	mov	r0, r4
    8600:	bl	8404 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	write(CHIP_ADCDAC_CTRL, 0x0000); // disable dac mute
    8604:	movs	r2, #0
    8606:	movs	r1, #14
    8608:	mov	r0, r4
    860a:	bl	8404 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	write(CHIP_DAC_VOL, 0x3C3C); // digital gain, 0dB
    860e:	movw	r2, #15420	; 0x3c3c
    8612:	movs	r1, #16
    8614:	mov	r0, r4
    8616:	bl	8404 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	write(CHIP_ANA_HP_CTRL, 0x7F7F); // set volume (lowest level)
    861a:	movw	r2, #32639	; 0x7f7f
    861e:	movs	r1, #34	; 0x22
    8620:	mov	r0, r4
    8622:	bl	8404 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	write(CHIP_ANA_CTRL, 0x0036);  // enable zero cross detectors
    8626:	movs	r2, #54	; 0x36
    8628:	movs	r1, #36	; 0x24
    862a:	mov	r0, r4
    862c:	bl	8404 <AudioControlSGTL5000::write(unsigned int, unsigned int)>

	semi_automated = true;
    8630:	movs	r3, #1
	return true;
}
    8632:	mov	r0, r5
	write(CHIP_ADCDAC_CTRL, 0x0000); // disable dac mute
	write(CHIP_DAC_VOL, 0x3C3C); // digital gain, 0dB
	write(CHIP_ANA_HP_CTRL, 0x7F7F); // set volume (lowest level)
	write(CHIP_ANA_CTRL, 0x0036);  // enable zero cross detectors

	semi_automated = true;
    8634:	strb	r3, [r4, #9]
	return true;
}
    8636:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		
		write(CHIP_PLL_CTRL, (int_divisor << 11) | frac_divisor);		
		write(CHIP_ANA_POWER, 0x40FF | (1<<10) | (1<<8) ); // power up: lineout, hp, adc, dac, PLL_POWERUP, VCOAMP_POWERUP
	} else {
		//SGTL is I2S Slave
		write(CHIP_ANA_POWER, 0x40FF); // power up: lineout, hp, adc, dac
    863a:	movw	r2, #16639	; 0x40ff
    863e:	movs	r1, #48	; 0x30
    8640:	mov	r0, r4
    8642:	bl	8404 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	}

	write(CHIP_DIG_POWER, 0x0073); // power up all digital stuff
    8646:	movs	r2, #115	; 0x73
    8648:	movs	r1, #2
    864a:	mov	r0, r4
    864c:	bl	8404 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	delay(400);
    8650:	mov.w	r0, #400	; 0x190
    8654:	bl	ef74 <delay>
	write(CHIP_LINE_OUT_VOL, 0x1D1D); // default approx 1.3 volts peak-to-peak
    8658:	movw	r2, #7453	; 0x1d1d
    865c:	movs	r1, #46	; 0x2e
    865e:	mov	r0, r4
    8660:	bl	8404 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
		//SGTL is I2S Master
		write(CHIP_CLK_CTRL, 0x0004 | 0x03);  // 44.1 kHz, 256*Fs, use PLL
		write(CHIP_I2S_CTRL, 0x0030 | (1<<7)); // SCLK=64*Fs, 16bit, I2S format
	} else {
		//SGTL is I2S Slave
		write(CHIP_CLK_CTRL, 0x0004);  // 44.1 kHz, 256*Fs
    8664:	movs	r2, #4
    8666:	mov	r0, r4
    8668:	mov	r1, r2
    866a:	bl	8404 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
		write(CHIP_I2S_CTRL, 0x0030); // SCLK=64*Fs, 16bit, I2S format
    866e:	movs	r2, #48	; 0x30
    8670:	movs	r1, #6
    8672:	mov	r0, r4
    8674:	bl	8404 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
    8678:	b.n	85fa <AudioControlSGTL5000::enable(unsigned int, unsigned long)+0x12a>
    867a:	nop
    867c:	.word	0x20000bb4
    8680:	.word	0x01036640
    8684:	.word	0x45000000

00008688 <AudioControlSGTL5000::enable()>:

bool AudioControlSGTL5000::enable(void) {
#if defined(KINETISL)
	return enable(16000000); // SGTL as Master with 16MHz MCLK from Teensy LC
#else	
	return enable(0);
    8688:	ldr	r2, [pc, #4]	; (8690 <AudioControlSGTL5000::enable()+0x8>)
    868a:	movs	r1, #0
    868c:	b.w	84d0 <AudioControlSGTL5000::enable(unsigned int, unsigned long)>
    8690:	.word	0x0ac44000

00008694 <AudioControlSGTL5000::inputSelect(int)>:
	bool muteHeadphone(void) { return write(0x0024, ana_ctrl | (1<<4)); }
	bool unmuteHeadphone(void) { return write(0x0024, ana_ctrl & ~(1<<4)); }
	bool muteLineout(void) { return write(0x0024, ana_ctrl | (1<<8)); }
	bool unmuteLineout(void) { return write(0x0024, ana_ctrl & ~(1<<8)); }
	bool inputSelect(int n) {
    8694:	push	{r4, lr}
    8696:	mov	r4, r0
		if (n == AUDIO_INPUT_LINEIN) {
    8698:	cbz	r1, 86a2 <AudioControlSGTL5000::inputSelect(int)+0xe>
			return write(0x0020, 0x055) // +7.5dB gain (1.3Vp-p full scale)
			 && write(0x0024, ana_ctrl | (1<<2)); // enable linein
		} else if (n == AUDIO_INPUT_MIC) {
    869a:	cmp	r1, #1
    869c:	beq.n	86c2 <AudioControlSGTL5000::inputSelect(int)+0x2e>
			 && write(0x0020, 0x088)     // input gain +12dB (is this enough?)
			 && write(0x0024, ana_ctrl & ~(1<<2)); // enable mic
		} else {
			return false;
		}
	}
    869e:	movs	r0, #0
    86a0:	pop	{r4, pc}
	bool unmuteHeadphone(void) { return write(0x0024, ana_ctrl & ~(1<<4)); }
	bool muteLineout(void) { return write(0x0024, ana_ctrl | (1<<8)); }
	bool unmuteLineout(void) { return write(0x0024, ana_ctrl & ~(1<<8)); }
	bool inputSelect(int n) {
		if (n == AUDIO_INPUT_LINEIN) {
			return write(0x0020, 0x055) // +7.5dB gain (1.3Vp-p full scale)
    86a2:	movs	r2, #85	; 0x55
    86a4:	movs	r1, #32
    86a6:	bl	8404 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
			 && write(0x0024, ana_ctrl | (1<<2)); // enable linein
    86aa:	cmp	r0, #0
    86ac:	beq.n	869e <AudioControlSGTL5000::inputSelect(int)+0xa>
    86ae:	ldrh	r2, [r4, #6]
    86b0:	mov	r0, r4
    86b2:	movs	r1, #36	; 0x24
    86b4:	orr.w	r2, r2, #4
			 && write(0x0020, 0x088)     // input gain +12dB (is this enough?)
			 && write(0x0024, ana_ctrl & ~(1<<2)); // enable mic
		} else {
			return false;
		}
	}
    86b8:	ldmia.w	sp!, {r4, lr}
	bool muteLineout(void) { return write(0x0024, ana_ctrl | (1<<8)); }
	bool unmuteLineout(void) { return write(0x0024, ana_ctrl & ~(1<<8)); }
	bool inputSelect(int n) {
		if (n == AUDIO_INPUT_LINEIN) {
			return write(0x0020, 0x055) // +7.5dB gain (1.3Vp-p full scale)
			 && write(0x0024, ana_ctrl | (1<<2)); // enable linein
    86bc:	uxth	r2, r2
    86be:	b.w	8404 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
		} else if (n == AUDIO_INPUT_MIC) {
			return write(0x002A, 0x0173) // mic preamp gain = +40dB
    86c2:	movw	r2, #371	; 0x173
    86c6:	movs	r1, #42	; 0x2a
    86c8:	bl	8404 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
			 && write(0x0020, 0x088)     // input gain +12dB (is this enough?)
			 && write(0x0024, ana_ctrl & ~(1<<2)); // enable mic
    86cc:	cmp	r0, #0
    86ce:	beq.n	869e <AudioControlSGTL5000::inputSelect(int)+0xa>
		if (n == AUDIO_INPUT_LINEIN) {
			return write(0x0020, 0x055) // +7.5dB gain (1.3Vp-p full scale)
			 && write(0x0024, ana_ctrl | (1<<2)); // enable linein
		} else if (n == AUDIO_INPUT_MIC) {
			return write(0x002A, 0x0173) // mic preamp gain = +40dB
			 && write(0x0020, 0x088)     // input gain +12dB (is this enough?)
    86d0:	movs	r2, #136	; 0x88
    86d2:	movs	r1, #32
    86d4:	mov	r0, r4
    86d6:	bl	8404 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
    86da:	cmp	r0, #0
    86dc:	beq.n	869e <AudioControlSGTL5000::inputSelect(int)+0xa>
			 && write(0x0024, ana_ctrl & ~(1<<2)); // enable mic
    86de:	ldrh	r2, [r4, #6]
    86e0:	mov	r0, r4
    86e2:	movs	r1, #36	; 0x24
    86e4:	bic.w	r2, r2, #4
		} else {
			return false;
		}
	}
    86e8:	ldmia.w	sp!, {r4, lr}
			return write(0x0020, 0x055) // +7.5dB gain (1.3Vp-p full scale)
			 && write(0x0024, ana_ctrl | (1<<2)); // enable linein
		} else if (n == AUDIO_INPUT_MIC) {
			return write(0x002A, 0x0173) // mic preamp gain = +40dB
			 && write(0x0020, 0x088)     // input gain +12dB (is this enough?)
			 && write(0x0024, ana_ctrl & ~(1<<2)); // enable mic
    86ec:	b.w	8404 <AudioControlSGTL5000::write(unsigned int, unsigned int)>

000086f0 <AudioControlSGTL5000::volumeInteger(unsigned int)>:
	if(!write(reg,val1)) return 0;
	return val1;
}

bool AudioControlSGTL5000::volumeInteger(unsigned int n)
{
    86f0:	push	{r3, r4, r5, lr}
    86f2:	mov	r5, r0
	if (n == 0) {
    86f4:	cbz	r1, 873c <AudioControlSGTL5000::volumeInteger(unsigned int)+0x4c>
		muted = true;
		write(CHIP_ANA_HP_CTRL, 0x7F7F);
		return muteHeadphone();
	} else if (n > 0x80) {
    86f6:	cmp	r1, #128	; 0x80
    86f8:	bls.n	870e <AudioControlSGTL5000::volumeInteger(unsigned int)+0x1e>
		n = 0;
	} else {
		n = 0x80 - n;
	}
	if (muted) {
    86fa:	ldrb	r3, [r5, #4]
    86fc:	movs	r4, #0
    86fe:	cbnz	r3, 871c <AudioControlSGTL5000::volumeInteger(unsigned int)+0x2c>
		muted = false;
		unmuteHeadphone();
	}
	n = n | (n << 8);
	return write(CHIP_ANA_HP_CTRL, n);  // set volume
    8700:	mov	r2, r4
    8702:	mov	r0, r5
    8704:	movs	r1, #34	; 0x22
}
    8706:	ldmia.w	sp!, {r3, r4, r5, lr}
	if (muted) {
		muted = false;
		unmuteHeadphone();
	}
	n = n | (n << 8);
	return write(CHIP_ANA_HP_CTRL, n);  // set volume
    870a:	b.w	8404 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
		write(CHIP_ANA_HP_CTRL, 0x7F7F);
		return muteHeadphone();
	} else if (n > 0x80) {
		n = 0;
	} else {
		n = 0x80 - n;
    870e:	rsb	r4, r1, #128	; 0x80
	}
	if (muted) {
    8712:	ldrb	r3, [r5, #4]
    8714:	orr.w	r4, r4, r4, lsl #8
    8718:	cmp	r3, #0
    871a:	beq.n	8700 <AudioControlSGTL5000::volumeInteger(unsigned int)+0x10>
	bool enable(const unsigned extMCLK, const uint32_t pllFreq = (4096.0l * AUDIO_SAMPLE_RATE_EXACT) ); //With extMCLK > 0, the SGTL acts as Master
	bool disable(void) { return false; }
	bool volume(float n) { return volumeInteger(n * 129 + 0.499f); }
	bool inputLevel(float n) {return false;}
	bool muteHeadphone(void) { return write(0x0024, ana_ctrl | (1<<4)); }
	bool unmuteHeadphone(void) { return write(0x0024, ana_ctrl & ~(1<<4)); }
    871c:	ldrh	r2, [r5, #6]
		muted = false;
    871e:	movs	r3, #0
    8720:	movs	r1, #36	; 0x24
    8722:	mov	r0, r5
    8724:	bic.w	r2, r2, #16
    8728:	strb	r3, [r5, #4]
    872a:	bl	8404 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
		unmuteHeadphone();
	}
	n = n | (n << 8);
	return write(CHIP_ANA_HP_CTRL, n);  // set volume
    872e:	mov	r2, r4
    8730:	mov	r0, r5
    8732:	movs	r1, #34	; 0x22
}
    8734:	ldmia.w	sp!, {r3, r4, r5, lr}
	if (muted) {
		muted = false;
		unmuteHeadphone();
	}
	n = n | (n << 8);
	return write(CHIP_ANA_HP_CTRL, n);  // set volume
    8738:	b.w	8404 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
}

bool AudioControlSGTL5000::volumeInteger(unsigned int n)
{
	if (n == 0) {
		muted = true;
    873c:	movs	r3, #1
		write(CHIP_ANA_HP_CTRL, 0x7F7F);
    873e:	movw	r2, #32639	; 0x7f7f
    8742:	movs	r1, #34	; 0x22
}

bool AudioControlSGTL5000::volumeInteger(unsigned int n)
{
	if (n == 0) {
		muted = true;
    8744:	strb	r3, [r0, #4]
		write(CHIP_ANA_HP_CTRL, 0x7F7F);
    8746:	bl	8404 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	bool enable(void);//For Teensy LC the SGTL acts as master, for all other Teensys as slave.
	bool enable(const unsigned extMCLK, const uint32_t pllFreq = (4096.0l * AUDIO_SAMPLE_RATE_EXACT) ); //With extMCLK > 0, the SGTL acts as Master
	bool disable(void) { return false; }
	bool volume(float n) { return volumeInteger(n * 129 + 0.499f); }
	bool inputLevel(float n) {return false;}
	bool muteHeadphone(void) { return write(0x0024, ana_ctrl | (1<<4)); }
    874a:	ldrh	r2, [r5, #6]
    874c:	mov	r0, r5
    874e:	movs	r1, #36	; 0x24
    8750:	orr.w	r2, r2, #16
		muted = false;
		unmuteHeadphone();
	}
	n = n | (n << 8);
	return write(CHIP_ANA_HP_CTRL, n);  // set volume
}
    8754:	ldmia.w	sp!, {r3, r4, r5, lr}
    8758:	uxth	r2, r2
    875a:	b.w	8404 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
    875e:	nop

00008760 <AudioControlSGTL5000::volume(float)>:
	AudioControlSGTL5000(void) : i2c_addr(0x0A) { }
	void setAddress(uint8_t level);
	bool enable(void);//For Teensy LC the SGTL acts as master, for all other Teensys as slave.
	bool enable(const unsigned extMCLK, const uint32_t pllFreq = (4096.0l * AUDIO_SAMPLE_RATE_EXACT) ); //With extMCLK > 0, the SGTL acts as Master
	bool disable(void) { return false; }
	bool volume(float n) { return volumeInteger(n * 129 + 0.499f); }
    8760:	vldr	s14, [pc, #20]	; 8778 <AudioControlSGTL5000::volume(float)+0x18>
    8764:	vldr	s15, [pc, #20]	; 877c <AudioControlSGTL5000::volume(float)+0x1c>
    8768:	vfma.f32	s15, s0, s14
    876c:	vcvt.u32.f32	s15, s15
    8770:	vmov	r1, s15
    8774:	b.w	86f0 <AudioControlSGTL5000::volumeInteger(unsigned int)>
    8778:	.word	0x43010000
    877c:	.word	0x3eff7cee

00008780 <_GLOBAL__sub_I__ZN14AudioInputPDM210block_leftE>:

DMAMEM __attribute__((aligned(32))) static uint32_t pdm_buffer[AUDIO_BLOCK_SAMPLES*4];
static uint32_t leftover[14];
audio_block_t * AudioInputPDM2::block_left = NULL;
bool AudioInputPDM2::update_responsibility = false;
DMAChannel AudioInputPDM2::dma(false);
    8780:	ldr	r2, [pc, #8]	; (878c <_GLOBAL__sub_I__ZN14AudioInputPDM210block_leftE+0xc>)
    8782:	ldr	r1, [pc, #12]	; (8790 <_GLOBAL__sub_I__ZN14AudioInputPDM210block_leftE+0x10>)
    8784:	ldr	r0, [pc, #12]	; (8794 <_GLOBAL__sub_I__ZN14AudioInputPDM210block_leftE+0x14>)
    8786:	b.w	10070 <__aeabi_atexit>
    878a:	nop
    878c:	.word	0x20000b3c
    8790:	.word	0x00000399
    8794:	.word	0x20043fd8

00008798 <_GLOBAL__sub_I__ZN14AudioInputI2S210block_leftE>:
DMAMEM __attribute__((aligned(32))) static uint32_t i2s2_rx_buffer[AUDIO_BLOCK_SAMPLES];
audio_block_t * AudioInputI2S2::block_left = NULL;
audio_block_t * AudioInputI2S2::block_right = NULL;
uint16_t AudioInputI2S2::block_offset = 0;
bool AudioInputI2S2::update_responsibility = false;
DMAChannel AudioInputI2S2::dma(false);
    8798:	ldr	r2, [pc, #8]	; (87a4 <_GLOBAL__sub_I__ZN14AudioInputI2S210block_leftE+0xc>)
    879a:	ldr	r1, [pc, #12]	; (87a8 <_GLOBAL__sub_I__ZN14AudioInputI2S210block_leftE+0x10>)
    879c:	ldr	r0, [pc, #12]	; (87ac <_GLOBAL__sub_I__ZN14AudioInputI2S210block_leftE+0x14>)
    879e:	b.w	10070 <__aeabi_atexit>
    87a2:	nop
    87a4:	.word	0x20000b3c
    87a8:	.word	0x00000399
    87ac:	.word	0x20043fe0

000087b0 <_GLOBAL__sub_I__ZN17AudioInputI2SQuad9block_ch1E>:
audio_block_t * AudioInputI2SQuad::block_ch2 = NULL;
audio_block_t * AudioInputI2SQuad::block_ch3 = NULL;
audio_block_t * AudioInputI2SQuad::block_ch4 = NULL;
uint16_t AudioInputI2SQuad::block_offset = 0;
bool AudioInputI2SQuad::update_responsibility = false;
DMAChannel AudioInputI2SQuad::dma(false);
    87b0:	ldr	r2, [pc, #8]	; (87bc <_GLOBAL__sub_I__ZN17AudioInputI2SQuad9block_ch1E+0xc>)
    87b2:	ldr	r1, [pc, #12]	; (87c0 <_GLOBAL__sub_I__ZN17AudioInputI2SQuad9block_ch1E+0x10>)
    87b4:	ldr	r0, [pc, #12]	; (87c4 <_GLOBAL__sub_I__ZN17AudioInputI2SQuad9block_ch1E+0x14>)
    87b6:	b.w	10070 <__aeabi_atexit>
    87ba:	nop
    87bc:	.word	0x20000b3c
    87c0:	.word	0x00000399
    87c4:	.word	0x20043fe8

000087c8 <_GLOBAL__sub_I__ZN18AudioOutputI2SQuad13block_ch1_1stE>:
uint16_t  AudioOutputI2SQuad::ch2_offset = 0;
uint16_t  AudioOutputI2SQuad::ch3_offset = 0;
uint16_t  AudioOutputI2SQuad::ch4_offset = 0;
bool AudioOutputI2SQuad::update_responsibility = false;
DMAMEM __attribute__((aligned(32))) static uint32_t i2s_tx_buffer[AUDIO_BLOCK_SAMPLES*2];
DMAChannel AudioOutputI2SQuad::dma(false);
    87c8:	ldr	r2, [pc, #8]	; (87d4 <_GLOBAL__sub_I__ZN18AudioOutputI2SQuad13block_ch1_1stE+0xc>)
    87ca:	ldr	r1, [pc, #12]	; (87d8 <_GLOBAL__sub_I__ZN18AudioOutputI2SQuad13block_ch1_1stE+0x10>)
    87cc:	ldr	r0, [pc, #12]	; (87dc <_GLOBAL__sub_I__ZN18AudioOutputI2SQuad13block_ch1_1stE+0x14>)
    87ce:	b.w	10070 <__aeabi_atexit>
    87d2:	nop
    87d4:	.word	0x20000b3c
    87d8:	.word	0x00000399
    87dc:	.word	0x20043ff0

000087e0 <_GLOBAL__sub_I__ZN15AudioOutputTDM211block_inputE>:
audio_block_t * AudioOutputTDM2::block_input[16] = {
	nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr,
	nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr
};
bool AudioOutputTDM2::update_responsibility = false;
DMAChannel AudioOutputTDM2::dma(false);
    87e0:	ldr	r2, [pc, #8]	; (87ec <_GLOBAL__sub_I__ZN15AudioOutputTDM211block_inputE+0xc>)
    87e2:	ldr	r1, [pc, #12]	; (87f0 <_GLOBAL__sub_I__ZN15AudioOutputTDM211block_inputE+0x10>)
    87e4:	ldr	r0, [pc, #12]	; (87f4 <_GLOBAL__sub_I__ZN15AudioOutputTDM211block_inputE+0x14>)
    87e6:	b.w	10070 <__aeabi_atexit>
    87ea:	nop
    87ec:	.word	0x20000b3c
    87f0:	.word	0x00000399
    87f4:	.word	0x20043ff8

000087f8 <_GLOBAL__sub_I__ZN15AudioOutputI2S214block_left_1stE>:
audio_block_t * AudioOutputI2S2::block_left_2nd = NULL;
audio_block_t * AudioOutputI2S2::block_right_2nd = NULL;
uint16_t  AudioOutputI2S2::block_left_offset = 0;
uint16_t  AudioOutputI2S2::block_right_offset = 0;
bool AudioOutputI2S2::update_responsibility = false;
DMAChannel AudioOutputI2S2::dma(false);
    87f8:	ldr	r2, [pc, #8]	; (8804 <_GLOBAL__sub_I__ZN15AudioOutputI2S214block_left_1stE+0xc>)
    87fa:	ldr	r1, [pc, #12]	; (8808 <_GLOBAL__sub_I__ZN15AudioOutputI2S214block_left_1stE+0x10>)
    87fc:	ldr	r0, [pc, #12]	; (880c <_GLOBAL__sub_I__ZN15AudioOutputI2S214block_left_1stE+0x14>)
    87fe:	b.w	10070 <__aeabi_atexit>
    8802:	nop
    8804:	.word	0x20000b3c
    8808:	.word	0x00000399
    880c:	.word	0x20044000

00008810 <_GLOBAL__sub_I__ZN17AudioOutputI2SHex13block_ch1_1stE>:
uint16_t  AudioOutputI2SHex::ch4_offset = 0;
uint16_t  AudioOutputI2SHex::ch5_offset = 0;
uint16_t  AudioOutputI2SHex::ch6_offset = 0;
bool AudioOutputI2SHex::update_responsibility = false;
DMAMEM __attribute__((aligned(32))) static uint32_t i2s_tx_buffer[AUDIO_BLOCK_SAMPLES*3];
DMAChannel AudioOutputI2SHex::dma(false);
    8810:	ldr	r2, [pc, #8]	; (881c <_GLOBAL__sub_I__ZN17AudioOutputI2SHex13block_ch1_1stE+0xc>)
    8812:	ldr	r1, [pc, #12]	; (8820 <_GLOBAL__sub_I__ZN17AudioOutputI2SHex13block_ch1_1stE+0x10>)
    8814:	ldr	r0, [pc, #12]	; (8824 <_GLOBAL__sub_I__ZN17AudioOutputI2SHex13block_ch1_1stE+0x14>)
    8816:	b.w	10070 <__aeabi_atexit>
    881a:	nop
    881c:	.word	0x20000b3c
    8820:	.word	0x00000399
    8824:	.word	0x20044008

00008828 <_GLOBAL__sub_I__ZN16AudioInputI2SOct9block_ch1E>:
audio_block_t * AudioInputI2SOct::block_ch6 = NULL;
audio_block_t * AudioInputI2SOct::block_ch7 = NULL;
audio_block_t * AudioInputI2SOct::block_ch8 = NULL;
uint16_t AudioInputI2SOct::block_offset = 0;
bool AudioInputI2SOct::update_responsibility = false;
DMAChannel AudioInputI2SOct::dma(false);
    8828:	ldr	r2, [pc, #8]	; (8834 <_GLOBAL__sub_I__ZN16AudioInputI2SOct9block_ch1E+0xc>)
    882a:	ldr	r1, [pc, #12]	; (8838 <_GLOBAL__sub_I__ZN16AudioInputI2SOct9block_ch1E+0x10>)
    882c:	ldr	r0, [pc, #12]	; (883c <_GLOBAL__sub_I__ZN16AudioInputI2SOct9block_ch1E+0x14>)
    882e:	b.w	10070 <__aeabi_atexit>
    8832:	nop
    8834:	.word	0x20000b3c
    8838:	.word	0x00000399
    883c:	.word	0x20044010

00008840 <_GLOBAL__sub_I__ZN14AudioOutputTDM11block_inputE>:
audio_block_t * AudioOutputTDM::block_input[16] = {
	nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr,
	nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr
};
bool AudioOutputTDM::update_responsibility = false;
DMAChannel AudioOutputTDM::dma(false);
    8840:	ldr	r2, [pc, #8]	; (884c <_GLOBAL__sub_I__ZN14AudioOutputTDM11block_inputE+0xc>)
    8842:	ldr	r1, [pc, #12]	; (8850 <_GLOBAL__sub_I__ZN14AudioOutputTDM11block_inputE+0x10>)
    8844:	ldr	r0, [pc, #12]	; (8854 <_GLOBAL__sub_I__ZN14AudioOutputTDM11block_inputE+0x14>)
    8846:	b.w	10070 <__aeabi_atexit>
    884a:	nop
    884c:	.word	0x20000b3c
    8850:	.word	0x00000399
    8854:	.word	0x20044018

00008858 <_GLOBAL__sub_I__ZN13AudioInputTDM14block_incomingE>:
audio_block_t * AudioInputTDM::block_incoming[16] = {
	nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr,
	nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr
};
bool AudioInputTDM::update_responsibility = false;
DMAChannel AudioInputTDM::dma(false);
    8858:	ldr	r2, [pc, #8]	; (8864 <_GLOBAL__sub_I__ZN13AudioInputTDM14block_incomingE+0xc>)
    885a:	ldr	r1, [pc, #12]	; (8868 <_GLOBAL__sub_I__ZN13AudioInputTDM14block_incomingE+0x10>)
    885c:	ldr	r0, [pc, #12]	; (886c <_GLOBAL__sub_I__ZN13AudioInputTDM14block_incomingE+0x14>)
    885e:	b.w	10070 <__aeabi_atexit>
    8862:	nop
    8864:	.word	0x20000b3c
    8868:	.word	0x00000399
    886c:	.word	0x20044020

00008870 <_GLOBAL__sub_I__ZN16AudioInputI2SHex9block_ch1E>:
audio_block_t * AudioInputI2SHex::block_ch4 = NULL;
audio_block_t * AudioInputI2SHex::block_ch5 = NULL;
audio_block_t * AudioInputI2SHex::block_ch6 = NULL;
uint16_t AudioInputI2SHex::block_offset = 0;
bool AudioInputI2SHex::update_responsibility = false;
DMAChannel AudioInputI2SHex::dma(false);
    8870:	ldr	r2, [pc, #8]	; (887c <_GLOBAL__sub_I__ZN16AudioInputI2SHex9block_ch1E+0xc>)
    8872:	ldr	r1, [pc, #12]	; (8880 <_GLOBAL__sub_I__ZN16AudioInputI2SHex9block_ch1E+0x10>)
    8874:	ldr	r0, [pc, #12]	; (8884 <_GLOBAL__sub_I__ZN16AudioInputI2SHex9block_ch1E+0x14>)
    8876:	b.w	10070 <__aeabi_atexit>
    887a:	nop
    887c:	.word	0x20000b3c
    8880:	.word	0x00000399
    8884:	.word	0x20044028

00008888 <_GLOBAL__sub_I__ZN17AudioOutputSPDIF314block_left_1stE>:
audio_block_t * AudioOutputSPDIF3::block_left_1st = nullptr;
audio_block_t * AudioOutputSPDIF3::block_right_1st = nullptr;
audio_block_t * AudioOutputSPDIF3::block_left_2nd = nullptr;
audio_block_t * AudioOutputSPDIF3::block_right_2nd = nullptr;
bool AudioOutputSPDIF3::update_responsibility = false;
DMAChannel AudioOutputSPDIF3::dma(false);
    8888:	ldr	r2, [pc, #8]	; (8894 <_GLOBAL__sub_I__ZN17AudioOutputSPDIF314block_left_1stE+0xc>)
    888a:	ldr	r1, [pc, #12]	; (8898 <_GLOBAL__sub_I__ZN17AudioOutputSPDIF314block_left_1stE+0x10>)
    888c:	ldr	r0, [pc, #12]	; (889c <_GLOBAL__sub_I__ZN17AudioOutputSPDIF314block_left_1stE+0x14>)
    888e:	b.w	10070 <__aeabi_atexit>
    8892:	nop
    8894:	.word	0x20000b3c
    8898:	.word	0x00000399
    889c:	.word	0x20044030

000088a0 <_GLOBAL__sub_I__ZN14AudioOutputMQS14block_left_1stE>:
audio_block_t * AudioOutputMQS::block_left_2nd = NULL;
audio_block_t * AudioOutputMQS::block_right_2nd = NULL;
uint16_t  AudioOutputMQS::block_left_offset = 0;
uint16_t  AudioOutputMQS::block_right_offset = 0;
bool AudioOutputMQS::update_responsibility = false;
DMAChannel AudioOutputMQS::dma(false);
    88a0:	ldr	r2, [pc, #8]	; (88ac <_GLOBAL__sub_I__ZN14AudioOutputMQS14block_left_1stE+0xc>)
    88a2:	ldr	r1, [pc, #12]	; (88b0 <_GLOBAL__sub_I__ZN14AudioOutputMQS14block_left_1stE+0x10>)
    88a4:	ldr	r0, [pc, #12]	; (88b4 <_GLOBAL__sub_I__ZN14AudioOutputMQS14block_left_1stE+0x14>)
    88a6:	b.w	10070 <__aeabi_atexit>
    88aa:	nop
    88ac:	.word	0x20000b3c
    88b0:	.word	0x00000399
    88b4:	.word	0x20044038

000088b8 <_GLOBAL__sub_I__ZN21AsyncAudioInputSPDIF310microsLastE>:
static float bufferL[bufferLength];

volatile int32_t AsyncAudioInputSPDIF3::buffer_offset = 0;	// read by resample/ written in spdif input isr -> copied at the beginning of 'resmaple' protected by __disable_irq() in resample
int32_t AsyncAudioInputSPDIF3::resample_offset = 0; // read/written by resample/ read in spdif input isr -> no protection needed?

DMAChannel AsyncAudioInputSPDIF3::dma(false);
    88b8:	ldr	r2, [pc, #8]	; (88c4 <_GLOBAL__sub_I__ZN21AsyncAudioInputSPDIF310microsLastE+0xc>)
    88ba:	ldr	r1, [pc, #12]	; (88c8 <_GLOBAL__sub_I__ZN21AsyncAudioInputSPDIF310microsLastE+0x10>)
    88bc:	ldr	r0, [pc, #12]	; (88cc <_GLOBAL__sub_I__ZN21AsyncAudioInputSPDIF310microsLastE+0x14>)
    88be:	b.w	10070 <__aeabi_atexit>
    88c2:	nop
    88c4:	.word	0x20000b3c
    88c8:	.word	0x00000399
    88cc:	.word	0x20044040

000088d0 <_GLOBAL__sub_I__ZN13AudioInputPDM10block_leftE>:

DMAMEM __attribute__((aligned(32))) static uint32_t pdm_buffer[AUDIO_BLOCK_SAMPLES*4];
static uint32_t leftover[14];
audio_block_t * AudioInputPDM::block_left = NULL;
bool AudioInputPDM::update_responsibility = false;
DMAChannel AudioInputPDM::dma(false);
    88d0:	ldr	r2, [pc, #8]	; (88dc <_GLOBAL__sub_I__ZN13AudioInputPDM10block_leftE+0xc>)
    88d2:	ldr	r1, [pc, #12]	; (88e0 <_GLOBAL__sub_I__ZN13AudioInputPDM10block_leftE+0x10>)
    88d4:	ldr	r0, [pc, #12]	; (88e4 <_GLOBAL__sub_I__ZN13AudioInputPDM10block_leftE+0x14>)
    88d6:	b.w	10070 <__aeabi_atexit>
    88da:	nop
    88dc:	.word	0x20000b3c
    88e0:	.word	0x00000399
    88e4:	.word	0x20044048

000088e8 <_GLOBAL__sub_I__ZN14AudioOutputI2S14block_left_1stE>:
audio_block_t * AudioOutputI2S::block_left_2nd = NULL;
audio_block_t * AudioOutputI2S::block_right_2nd = NULL;
uint16_t  AudioOutputI2S::block_left_offset = 0;
uint16_t  AudioOutputI2S::block_right_offset = 0;
bool AudioOutputI2S::update_responsibility = false;
DMAChannel AudioOutputI2S::dma(false);
    88e8:	ldr	r2, [pc, #8]	; (88f4 <_GLOBAL__sub_I__ZN14AudioOutputI2S14block_left_1stE+0xc>)
    88ea:	ldr	r1, [pc, #12]	; (88f8 <_GLOBAL__sub_I__ZN14AudioOutputI2S14block_left_1stE+0x10>)
    88ec:	ldr	r0, [pc, #12]	; (88fc <_GLOBAL__sub_I__ZN14AudioOutputI2S14block_left_1stE+0x14>)
    88ee:	b.w	10070 <__aeabi_atexit>
    88f2:	nop
    88f4:	.word	0x20000b3c
    88f8:	.word	0x00000399
    88fc:	.word	0x20044050

00008900 <_GLOBAL__sub_I__ZN17AudioOutputSPDIF214block_left_1stE>:
audio_block_t * AudioOutputSPDIF2::block_left_2nd = NULL;
audio_block_t * AudioOutputSPDIF2::block_right_2nd = NULL;
uint16_t  AudioOutputSPDIF2::block_left_offset = 0;
uint16_t  AudioOutputSPDIF2::block_right_offset = 0;
bool AudioOutputSPDIF2::update_responsibility = false;
DMAChannel AudioOutputSPDIF2::dma(false);
    8900:	ldr	r2, [pc, #8]	; (890c <_GLOBAL__sub_I__ZN17AudioOutputSPDIF214block_left_1stE+0xc>)
    8902:	ldr	r1, [pc, #12]	; (8910 <_GLOBAL__sub_I__ZN17AudioOutputSPDIF214block_left_1stE+0x10>)
    8904:	ldr	r0, [pc, #12]	; (8914 <_GLOBAL__sub_I__ZN17AudioOutputSPDIF214block_left_1stE+0x14>)
    8906:	b.w	10070 <__aeabi_atexit>
    890a:	nop
    890c:	.word	0x20000b3c
    8910:	.word	0x00000399
    8914:	.word	0x20044058

00008918 <_GLOBAL__sub_I__ZN16AudioOutputSPDIF14block_left_1stE>:
audio_block_t * AudioOutputSPDIF::block_left_2nd = NULL;
audio_block_t * AudioOutputSPDIF::block_right_2nd = NULL;
uint16_t  AudioOutputSPDIF::block_left_offset = 0;
uint16_t  AudioOutputSPDIF::block_right_offset = 0;
bool AudioOutputSPDIF::update_responsibility = false;
DMAChannel AudioOutputSPDIF::dma(false);
    8918:	ldr	r2, [pc, #8]	; (8924 <_GLOBAL__sub_I__ZN16AudioOutputSPDIF14block_left_1stE+0xc>)
    891a:	ldr	r1, [pc, #12]	; (8928 <_GLOBAL__sub_I__ZN16AudioOutputSPDIF14block_left_1stE+0x10>)
    891c:	ldr	r0, [pc, #12]	; (892c <_GLOBAL__sub_I__ZN16AudioOutputSPDIF14block_left_1stE+0x14>)
    891e:	b.w	10070 <__aeabi_atexit>
    8922:	nop
    8924:	.word	0x20000b3c
    8928:	.word	0x00000399
    892c:	.word	0x20044060

00008930 <TwoWire::available()>:
	}
	uint8_t requestFrom(uint8_t addr, uint8_t qty, uint32_t iaddr, uint8_t n, uint8_t stop);
	virtual size_t write(uint8_t data);
	virtual size_t write(const uint8_t *data, size_t quantity);
	virtual int available(void) {
		return rxBufferLength - rxBufferIndex;
    8930:	ldrb.w	r2, [r0, #59]	; 0x3b
    8934:	ldrb.w	r0, [r0, #58]	; 0x3a
	}
    8938:	subs	r0, r2, r0
    893a:	bx	lr

0000893c <TwoWire::read()>:
	virtual int read(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
    893c:	ldrb.w	r3, [r0, #58]	; 0x3a
    8940:	ldrb.w	r2, [r0, #59]	; 0x3b
    8944:	cmp	r2, r3
    8946:	bls.n	8954 <TwoWire::read()+0x18>
		return rxBuffer[rxBufferIndex++];
    8948:	adds	r2, r3, #1
    894a:	add	r3, r0
    894c:	strb.w	r2, [r0, #58]	; 0x3a
    8950:	ldrb	r0, [r3, #26]
    8952:	bx	lr
	virtual size_t write(const uint8_t *data, size_t quantity);
	virtual int available(void) {
		return rxBufferLength - rxBufferIndex;
	}
	virtual int read(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
    8954:	mov.w	r0, #4294967295
		return rxBuffer[rxBufferIndex++];
	}
    8958:	bx	lr
    895a:	nop

0000895c <TwoWire::peek()>:
	virtual int peek(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
    895c:	ldrb.w	r3, [r0, #58]	; 0x3a
    8960:	ldrb.w	r2, [r0, #59]	; 0x3b
    8964:	cmp	r2, r3
    8966:	bls.n	896e <TwoWire::peek()+0x12>
		return rxBuffer[rxBufferIndex];
    8968:	add	r3, r0
    896a:	ldrb	r0, [r3, #26]
    896c:	bx	lr
	virtual int read(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
		return rxBuffer[rxBufferIndex++];
	}
	virtual int peek(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
    896e:	mov.w	r0, #4294967295
		return rxBuffer[rxBufferIndex];
	}
    8972:	bx	lr

00008974 <TwoWire::flush()>:
	virtual void flush(void) {
    8974:	bx	lr
    8976:	nop

00008978 <TwoWire::write(unsigned char)>:
	return ret;
}

size_t TwoWire::write(uint8_t data)
{
	if (transmitting || slave_mode) {
    8978:	ldrh.w	r3, [r0, #96]	; 0x60
    897c:	cbz	r3, 89a4 <TwoWire::write(unsigned char)+0x2c>
		if (txBufferLength >= BUFFER_LENGTH+1) {
    897e:	ldrb.w	r3, [r0, #95]	; 0x5f
    8982:	cmp	r3, #32
    8984:	bhi.n	899e <TwoWire::write(unsigned char)+0x26>
			setWriteError();
			return 0;
		}
		txBuffer[txBufferLength++] = data;
    8986:	adds	r2, r0, r3
	*(portConfigRegister(scl_pin)) = hardware.scl_pins[scl_pin_index_].mux_val;
	return ret;
}

size_t TwoWire::write(uint8_t data)
{
    8988:	push	{r4}
	if (transmitting || slave_mode) {
		if (txBufferLength >= BUFFER_LENGTH+1) {
			setWriteError();
			return 0;
		}
		txBuffer[txBufferLength++] = data;
    898a:	adds	r4, r3, #1
		return 1;
    898c:	movs	r3, #1
	if (transmitting || slave_mode) {
		if (txBufferLength >= BUFFER_LENGTH+1) {
			setWriteError();
			return 0;
		}
		txBuffer[txBufferLength++] = data;
    898e:	strb.w	r4, [r0, #95]	; 0x5f
		return 1;
	}
	return 0;
}
    8992:	mov	r0, r3
	if (transmitting || slave_mode) {
		if (txBufferLength >= BUFFER_LENGTH+1) {
			setWriteError();
			return 0;
		}
		txBuffer[txBufferLength++] = data;
    8994:	strb.w	r1, [r2, #61]	; 0x3d
		return 1;
	}
	return 0;
}
    8998:	ldr.w	r4, [sp], #4
    899c:	bx	lr
	// format warnings are too pedantic - disable until newer toolchain offers better...
	// https://forum.pjrc.com/threads/62473?p=256873&viewfull=1#post256873
	int printf(const char *format, ...) /*__attribute__ ((format (printf, 2, 3)))*/;
	int printf(const __FlashStringHelper *format, ...);
  protected:
	void setWriteError(int err = 1) { write_error = err; }
    899e:	movs	r2, #1
size_t TwoWire::write(uint8_t data)
{
	if (transmitting || slave_mode) {
		if (txBufferLength >= BUFFER_LENGTH+1) {
			setWriteError();
			return 0;
    89a0:	movs	r3, #0
    89a2:	strb	r2, [r0, #4]
		}
		txBuffer[txBufferLength++] = data;
		return 1;
	}
	return 0;
}
    89a4:	mov	r0, r3
    89a6:	bx	lr

000089a8 <TwoWire::write(unsigned char const*, unsigned int)>:

size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
    89a8:	push	{r3, r4, r5, lr}
    89aa:	mov	r5, r0
	if (transmitting || slave_mode) {
    89ac:	ldrh.w	r0, [r0, #96]	; 0x60
    89b0:	cbz	r0, 89d8 <TwoWire::write(unsigned char const*, unsigned int)+0x30>
		size_t avail = BUFFER_LENGTH+1 - txBufferLength;
    89b2:	ldrb.w	r3, [r5, #95]	; 0x5f
    89b6:	mov	r4, r2
    89b8:	rsb	r2, r3, #33	; 0x21
		if (quantity > avail) {
    89bc:	cmp	r4, r2
    89be:	bhi.n	89da <TwoWire::write(unsigned char const*, unsigned int)+0x32>
			quantity = avail;
			setWriteError();
		}
		memcpy(txBuffer + txBufferLength, data, quantity);
    89c0:	add.w	r0, r5, #61	; 0x3d
    89c4:	mov	r2, r4
    89c6:	add	r0, r3
    89c8:	bl	db14 <memcpy>
		txBufferLength += quantity;
    89cc:	ldrb.w	r3, [r5, #95]	; 0x5f
    89d0:	mov	r0, r4
    89d2:	add	r4, r3
    89d4:	strb.w	r4, [r5, #95]	; 0x5f
		return quantity;
	}
	return 0;
}
    89d8:	pop	{r3, r4, r5, pc}
    89da:	mov	r4, r2
    89dc:	movs	r2, #1
    89de:	strb	r2, [r5, #4]
    89e0:	b.n	89c0 <TwoWire::write(unsigned char const*, unsigned int)+0x18>
    89e2:	nop

000089e4 <TwoWire::force_clock()>:
	}
	scl_pin_index_ = newindex;
}

bool TwoWire::force_clock()
{
    89e4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    89e8:	mov	fp, r0
	bool ret = false;
	uint32_t sda_pin = hardware.sda_pins[sda_pin_index_].pin;
	uint32_t scl_pin = hardware.scl_pins[scl_pin_index_].pin;
	uint32_t sda_mask = digitalPinToBitMask(sda_pin);
    89ea:	ldr	r0, [pc, #256]	; (8aec <TwoWire::force_clock()+0x108>)
	}
	scl_pin_index_ = newindex;
}

bool TwoWire::force_clock()
{
    89ec:	sub	sp, #12
	uint32_t sda_pin = hardware.sda_pins[sda_pin_index_].pin;
	uint32_t scl_pin = hardware.scl_pins[scl_pin_index_].pin;
	uint32_t sda_mask = digitalPinToBitMask(sda_pin);
	uint32_t scl_mask = digitalPinToBitMask(scl_pin);
	// take control of pins with GPIO
	*portConfigRegister(sda_pin) = 5 | 0x10;
    89ee:	movs	r5, #21
}

bool TwoWire::force_clock()
{
	bool ret = false;
	uint32_t sda_pin = hardware.sda_pins[sda_pin_index_].pin;
    89f0:	ldr.w	sl, [fp, #20]
    89f4:	ldrb.w	r6, [fp, #24]
	uint32_t scl_pin = hardware.scl_pins[scl_pin_index_].pin;
    89f8:	ldrb.w	r3, [fp, #25]
}

bool TwoWire::force_clock()
{
	bool ret = false;
	uint32_t sda_pin = hardware.sda_pins[sda_pin_index_].pin;
    89fc:	add.w	r6, sl, r6, lsl #4
uint32_t micros(void);

static inline void delayMicroseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayMicroseconds(uint32_t usec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
    8a00:	ldr	r1, [pc, #236]	; (8af0 <TwoWire::force_clock()+0x10c>)
	uint32_t scl_pin = hardware.scl_pins[scl_pin_index_].pin;
    8a02:	add.w	r3, sl, r3, lsl #4
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    8a06:	ldr.w	lr, [pc, #236]	; 8af4 <TwoWire::force_clock()+0x110>
}

bool TwoWire::force_clock()
{
	bool ret = false;
	uint32_t sda_pin = hardware.sda_pins[sda_pin_index_].pin;
    8a0a:	ldrb	r6, [r6, #8]
	// TODO: check if cycles is large, do a wait with yield calls until it's smaller
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    8a0c:	mov	r4, r1
	uint32_t scl_pin = hardware.scl_pins[scl_pin_index_].pin;
    8a0e:	ldrb.w	r3, [r3, #40]	; 0x28
	uint32_t sda_mask = digitalPinToBitMask(sda_pin);
    8a12:	lsls	r6, r6, #4

static inline void delayMicroseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayMicroseconds(uint32_t usec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    8a14:	ldr.w	r9, [pc, #224]	; 8af8 <TwoWire::force_clock()+0x114>
	uint32_t scl_mask = digitalPinToBitMask(scl_pin);
    8a18:	lsls	r3, r3, #4
bool TwoWire::force_clock()
{
	bool ret = false;
	uint32_t sda_pin = hardware.sda_pins[sda_pin_index_].pin;
	uint32_t scl_pin = hardware.scl_pins[scl_pin_index_].pin;
	uint32_t sda_mask = digitalPinToBitMask(sda_pin);
    8a1a:	adds	r7, r0, r6
	uint32_t scl_mask = digitalPinToBitMask(scl_pin);
	// take control of pins with GPIO
	*portConfigRegister(sda_pin) = 5 | 0x10;
	*portSetRegister(sda_pin) = sda_mask;
    8a1c:	ldr.w	r8, [r0, r6]
{
	bool ret = false;
	uint32_t sda_pin = hardware.sda_pins[sda_pin_index_].pin;
	uint32_t scl_pin = hardware.scl_pins[scl_pin_index_].pin;
	uint32_t sda_mask = digitalPinToBitMask(sda_pin);
	uint32_t scl_mask = digitalPinToBitMask(scl_pin);
    8a20:	add.w	ip, r0, r3
	// take control of pins with GPIO
	*portConfigRegister(sda_pin) = 5 | 0x10;
	*portSetRegister(sda_pin) = sda_mask;
	*portModeRegister(sda_pin) |= sda_mask;
	*portConfigRegister(scl_pin) = 5 | 0x10;
	*portSetRegister(scl_pin) = scl_mask;
    8a24:	ldr	r6, [r0, r3]
bool TwoWire::force_clock()
{
	bool ret = false;
	uint32_t sda_pin = hardware.sda_pins[sda_pin_index_].pin;
	uint32_t scl_pin = hardware.scl_pins[scl_pin_index_].pin;
	uint32_t sda_mask = digitalPinToBitMask(sda_pin);
    8a26:	ldr	r0, [r7, #12]
	uint32_t scl_mask = digitalPinToBitMask(scl_pin);
	// take control of pins with GPIO
	*portConfigRegister(sda_pin) = 5 | 0x10;
    8a28:	ldr	r3, [r7, #4]
{
	bool ret = false;
	uint32_t sda_pin = hardware.sda_pins[sda_pin_index_].pin;
	uint32_t scl_pin = hardware.scl_pins[scl_pin_index_].pin;
	uint32_t sda_mask = digitalPinToBitMask(sda_pin);
	uint32_t scl_mask = digitalPinToBitMask(scl_pin);
    8a2a:	ldr.w	r7, [ip, #12]
	// take control of pins with GPIO
	*portConfigRegister(sda_pin) = 5 | 0x10;
    8a2e:	str	r3, [sp, #0]
    8a30:	str	r5, [r3, #0]
	*portSetRegister(sda_pin) = sda_mask;
    8a32:	str.w	r0, [r8, #132]	; 0x84
	*portModeRegister(sda_pin) |= sda_mask;
    8a36:	ldr.w	r3, [r8, #4]
	*portConfigRegister(scl_pin) = 5 | 0x10;
    8a3a:	ldr.w	r2, [ip, #4]
	uint32_t sda_mask = digitalPinToBitMask(sda_pin);
	uint32_t scl_mask = digitalPinToBitMask(scl_pin);
	// take control of pins with GPIO
	*portConfigRegister(sda_pin) = 5 | 0x10;
	*portSetRegister(sda_pin) = sda_mask;
	*portModeRegister(sda_pin) |= sda_mask;
    8a3e:	orrs	r3, r0
	*portConfigRegister(scl_pin) = 5 | 0x10;
    8a40:	str	r2, [sp, #4]
	uint32_t sda_mask = digitalPinToBitMask(sda_pin);
	uint32_t scl_mask = digitalPinToBitMask(scl_pin);
	// take control of pins with GPIO
	*portConfigRegister(sda_pin) = 5 | 0x10;
	*portSetRegister(sda_pin) = sda_mask;
	*portModeRegister(sda_pin) |= sda_mask;
    8a42:	str.w	r3, [r8, #4]
	*portConfigRegister(scl_pin) = 5 | 0x10;
    8a46:	str	r5, [r2, #0]
	*portSetRegister(scl_pin) = scl_mask;
    8a48:	str.w	r7, [r6, #132]	; 0x84
	*portModeRegister(scl_pin) |= scl_mask;
    8a4c:	ldr	r3, [r6, #4]
    8a4e:	orrs	r3, r7
    8a50:	str	r3, [r6, #4]
uint32_t micros(void);

static inline void delayMicroseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayMicroseconds(uint32_t usec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
    8a52:	ldr	r1, [r1, #0]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    8a54:	ldr.w	r3, [lr]
    8a58:	umull	r3, r2, r9, r3
    8a5c:	lsrs	r2, r2, #18
    8a5e:	add.w	r2, r2, r2, lsl #2
    8a62:	lsls	r2, r2, #1
	// TODO: check if cycles is large, do a wait with yield calls until it's smaller
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    8a64:	ldr	r3, [r4, #0]
    8a66:	subs	r3, r3, r1
    8a68:	cmp	r2, r3
    8a6a:	bhi.n	8a64 <TwoWire::force_clock()+0x80>
uint32_t micros(void);

static inline void delayMicroseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayMicroseconds(uint32_t usec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
    8a6c:	ldr	r2, [pc, #128]	; (8af0 <TwoWire::force_clock()+0x10c>)
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
	// TODO: check if cycles is large, do a wait with yield calls until it's smaller
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    8a6e:	movs	r5, #9

static inline void delayMicroseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayMicroseconds(uint32_t usec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    8a70:	ldr.w	ip, [pc, #132]	; 8af8 <TwoWire::force_clock()+0x114>
	// TODO: check if cycles is large, do a wait with yield calls until it's smaller
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    8a74:	mov	r9, r2
	delayMicroseconds(10);
	for (int i=0; i < 9; i++) {
		if ((*portInputRegister(sda_pin) & sda_mask)
    8a76:	ldr.w	r3, [r8, #8]
		  && (*portInputRegister(scl_pin) & scl_mask)) {
    8a7a:	tst	r0, r3
    8a7c:	beq.n	8a84 <TwoWire::force_clock()+0xa0>
    8a7e:	ldr	r3, [r6, #8]
    8a80:	tst	r7, r3
    8a82:	bne.n	8ae8 <TwoWire::force_clock()+0x104>
			// success, both pins are high
			ret = true;
			break;
		}
		*portClearRegister(scl_pin) = scl_mask;
    8a84:	str.w	r7, [r6, #136]	; 0x88
uint32_t micros(void);

static inline void delayMicroseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayMicroseconds(uint32_t usec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
    8a88:	ldr	r4, [r2, #0]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    8a8a:	ldr.w	r1, [lr]
    8a8e:	umull	r3, r1, ip, r1
    8a92:	lsrs	r1, r1, #18
    8a94:	add.w	r1, r1, r1, lsl #2
	// TODO: check if cycles is large, do a wait with yield calls until it's smaller
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    8a98:	ldr	r3, [r2, #0]
    8a9a:	subs	r3, r3, r4
    8a9c:	cmp	r1, r3
    8a9e:	bhi.n	8a98 <TwoWire::force_clock()+0xb4>
		delayMicroseconds(5);
		*portSetRegister(scl_pin) = scl_mask;
    8aa0:	str.w	r7, [r6, #132]	; 0x84
uint32_t micros(void);

static inline void delayMicroseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayMicroseconds(uint32_t usec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
    8aa4:	ldr.w	r4, [r9]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    8aa8:	ldr.w	r1, [lr]
    8aac:	umull	r3, r1, ip, r1
    8ab0:	lsrs	r1, r1, #18
    8ab2:	add.w	r1, r1, r1, lsl #2
	// TODO: check if cycles is large, do a wait with yield calls until it's smaller
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    8ab6:	ldr	r3, [r2, #0]
    8ab8:	subs	r3, r3, r4
    8aba:	cmp	r1, r3
    8abc:	bhi.n	8ab6 <TwoWire::force_clock()+0xd2>
	*portModeRegister(sda_pin) |= sda_mask;
	*portConfigRegister(scl_pin) = 5 | 0x10;
	*portSetRegister(scl_pin) = scl_mask;
	*portModeRegister(scl_pin) |= scl_mask;
	delayMicroseconds(10);
	for (int i=0; i < 9; i++) {
    8abe:	subs	r5, #1
    8ac0:	bne.n	8a76 <TwoWire::force_clock()+0x92>
	scl_pin_index_ = newindex;
}

bool TwoWire::force_clock()
{
	bool ret = false;
    8ac2:	mov	r0, r5
		delayMicroseconds(5);
		*portSetRegister(scl_pin) = scl_mask;
		delayMicroseconds(5);
	}
	// return control of pins to I2C
	*(portConfigRegister(sda_pin)) = hardware.sda_pins[sda_pin_index_].mux_val;
    8ac4:	ldrb.w	r3, [fp, #24]
    8ac8:	ldr	r2, [sp, #0]
    8aca:	add.w	r3, sl, r3, lsl #4
    8ace:	ldr	r3, [r3, #12]
    8ad0:	str	r3, [r2, #0]
	*(portConfigRegister(scl_pin)) = hardware.scl_pins[scl_pin_index_].mux_val;
    8ad2:	ldrb.w	r3, [fp, #25]
    8ad6:	ldr	r2, [sp, #4]
    8ad8:	add.w	sl, sl, r3, lsl #4
    8adc:	ldr.w	r3, [sl, #44]	; 0x2c
    8ae0:	str	r3, [r2, #0]
	return ret;
}
    8ae2:	add	sp, #12
    8ae4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	delayMicroseconds(10);
	for (int i=0; i < 9; i++) {
		if ((*portInputRegister(sda_pin) & sda_mask)
		  && (*portInputRegister(scl_pin) & scl_mask)) {
			// success, both pins are high
			ret = true;
    8ae8:	movs	r0, #1
    8aea:	b.n	8ac4 <TwoWire::force_clock()+0xe0>
    8aec:	.word	0x20000590
    8af0:	.word	0xe0001004
    8af4:	.word	0x20000c2c
    8af8:	.word	0x431bde83

00008afc <TwoWire::wait_idle()>:
extern volatile uint32_t systick_millis_count;

static inline uint32_t millis(void) __attribute__((always_inline, unused));
static inline uint32_t millis(void)
{
	return systick_millis_count;
    8afc:	ldr	r1, [pc, #52]	; (8b34 <TwoWire::wait_idle()+0x38>)
    8afe:	ldr	r2, [r0, #16]
//   01   EPF = End Packet Flag
//      2 RDF = Receive Data Flag
//      1 TDF = Transmit Data Flag

bool TwoWire::wait_idle()
{
    8b00:	push	{r4, lr}
    8b02:	ldr	r4, [r1, #0]
    8b04:	b.n	8b12 <TwoWire::wait_idle()+0x16>
	elapsedMillis timeout = 0;
	while (1) {
		uint32_t status = port->MSR; // pg 2899 & 2892
		if (!(status & LPI2C_MSR_BBF)) break; // bus is available
		if (status & LPI2C_MSR_MBF) break; // we already have bus control
    8b06:	lsls	r3, r3, #7
    8b08:	bmi.n	8b1a <TwoWire::wait_idle()+0x1e>
    8b0a:	ldr	r3, [r1, #0]
		if (timeout > 16) {
    8b0c:	subs	r3, r3, r4
    8b0e:	cmp	r3, #16
    8b10:	bhi.n	8b24 <TwoWire::wait_idle()+0x28>

bool TwoWire::wait_idle()
{
	elapsedMillis timeout = 0;
	while (1) {
		uint32_t status = port->MSR; // pg 2899 & 2892
    8b12:	ldr	r3, [r2, #20]
		if (!(status & LPI2C_MSR_BBF)) break; // bus is available
    8b14:	tst.w	r3, #33554432	; 0x2000000
    8b18:	bne.n	8b06 <TwoWire::wait_idle()+0xa>
			if (force_clock()) break;
			//Serial.printf("unable to get control of I2C bus\n");
			return false;
		}
	}
	port->MSR = 0x00007F00; // clear all prior flags
    8b1a:	mov.w	r3, #32512	; 0x7f00
	return true;
    8b1e:	movs	r0, #1
			if (force_clock()) break;
			//Serial.printf("unable to get control of I2C bus\n");
			return false;
		}
	}
	port->MSR = 0x00007F00; // clear all prior flags
    8b20:	str	r3, [r2, #20]
	return true;
}
    8b22:	pop	{r4, pc}
    8b24:	mov	r4, r0
		uint32_t status = port->MSR; // pg 2899 & 2892
		if (!(status & LPI2C_MSR_BBF)) break; // bus is available
		if (status & LPI2C_MSR_MBF) break; // we already have bus control
		if (timeout > 16) {
			//Serial.printf("timeout waiting for idle, MSR = %x\n", status);
			if (force_clock()) break;
    8b26:	bl	89e4 <TwoWire::force_clock()>
    8b2a:	cmp	r0, #0
    8b2c:	beq.n	8b22 <TwoWire::wait_idle()+0x26>
    8b2e:	ldr	r2, [r4, #16]
    8b30:	b.n	8b1a <TwoWire::wait_idle()+0x1e>
    8b32:	nop
    8b34:	.word	0x200447a4

00008b38 <TwoWire::endTransmission(unsigned char)>:
	return true;
}


uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
    8b38:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t tx_len = txBufferLength;
    8b3c:	ldrb.w	sl, [r0, #95]	; 0x5f
	if (!tx_len) return 4; // no address for transmit
    8b40:	cmp.w	sl, #0
    8b44:	bne.n	8b4c <TwoWire::endTransmission(unsigned char)+0x14>
    8b46:	movs	r0, #4
    8b48:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    8b4c:	mov	r5, r0
    8b4e:	mov	r6, r1
	if (!wait_idle()) return 4;
    8b50:	bl	8afc <TwoWire::wait_idle()>
    8b54:	cmp	r0, #0
    8b56:	beq.n	8b46 <TwoWire::endTransmission(unsigned char)+0xe>
    8b58:	ldr	r7, [pc, #184]	; (8c14 <TwoWire::endTransmission(unsigned char)+0xdc>)
	uint32_t tx_index = 0; // 0=start, 1=addr, 2-(N-1)=data, N=stop
    8b5a:	movs	r4, #0
					port->MTDR = LPI2C_MTDR_CMD_START | txBuffer[0];
					tx_index = 1;
				} else if (tx_index < tx_len) {
					port->MTDR = LPI2C_MTDR_CMD_TRANSMIT | txBuffer[tx_index++];
				} else {
					if (sendStop) port->MTDR = LPI2C_MTDR_CMD_STOP;
    8b5c:	mov.w	r9, #512	; 0x200
    8b60:	ldr.w	r8, [r7]
	if (!wait_idle()) return 4;
	uint32_t tx_index = 0; // 0=start, 1=addr, 2-(N-1)=data, N=stop
	elapsedMillis timeout = 0;
	while (1) {
		// transmit stuff, if we haven't already
		if (tx_index <= tx_len) {
    8b64:	cmp	r4, sl
			uint32_t fifo_used = port->MFSR & 0x07; // pg 2914
    8b66:	ldr	r1, [r5, #16]
	if (!wait_idle()) return 4;
	uint32_t tx_index = 0; // 0=start, 1=addr, 2-(N-1)=data, N=stop
	elapsedMillis timeout = 0;
	while (1) {
		// transmit stuff, if we haven't already
		if (tx_index <= tx_len) {
    8b68:	bhi.n	8ba0 <TwoWire::endTransmission(unsigned char)+0x68>
			uint32_t fifo_used = port->MFSR & 0x07; // pg 2914
    8b6a:	ldr	r3, [r1, #92]	; 0x5c
    8b6c:	and.w	r3, r3, #7
			while (fifo_used < 4) {
    8b70:	cmp	r3, #3
    8b72:	bls.n	8b88 <TwoWire::endTransmission(unsigned char)+0x50>
    8b74:	b.n	8ba0 <TwoWire::endTransmission(unsigned char)+0x68>
				if (tx_index == 0) {
					port->MTDR = LPI2C_MTDR_CMD_START | txBuffer[0];
    8b76:	ldrb.w	r2, [r5, #61]	; 0x3d
				} else {
					if (sendStop) port->MTDR = LPI2C_MTDR_CMD_STOP;
					tx_index++;
					break;
				}
				fifo_used++;
    8b7a:	adds	r3, #1
		if (tx_index <= tx_len) {
			uint32_t fifo_used = port->MFSR & 0x07; // pg 2914
			while (fifo_used < 4) {
				if (tx_index == 0) {
					port->MTDR = LPI2C_MTDR_CMD_START | txBuffer[0];
					tx_index = 1;
    8b7c:	movs	r4, #1
		// transmit stuff, if we haven't already
		if (tx_index <= tx_len) {
			uint32_t fifo_used = port->MFSR & 0x07; // pg 2914
			while (fifo_used < 4) {
				if (tx_index == 0) {
					port->MTDR = LPI2C_MTDR_CMD_START | txBuffer[0];
    8b7e:	orr.w	r2, r2, #1024	; 0x400
	elapsedMillis timeout = 0;
	while (1) {
		// transmit stuff, if we haven't already
		if (tx_index <= tx_len) {
			uint32_t fifo_used = port->MFSR & 0x07; // pg 2914
			while (fifo_used < 4) {
    8b82:	cmp	r3, #4
				if (tx_index == 0) {
					port->MTDR = LPI2C_MTDR_CMD_START | txBuffer[0];
    8b84:	str	r2, [r1, #96]	; 0x60
	elapsedMillis timeout = 0;
	while (1) {
		// transmit stuff, if we haven't already
		if (tx_index <= tx_len) {
			uint32_t fifo_used = port->MFSR & 0x07; // pg 2914
			while (fifo_used < 4) {
    8b86:	beq.n	8ba0 <TwoWire::endTransmission(unsigned char)+0x68>
				if (tx_index == 0) {
					port->MTDR = LPI2C_MTDR_CMD_START | txBuffer[0];
					tx_index = 1;
				} else if (tx_index < tx_len) {
					port->MTDR = LPI2C_MTDR_CMD_TRANSMIT | txBuffer[tx_index++];
    8b88:	adds	r2, r5, r4
	while (1) {
		// transmit stuff, if we haven't already
		if (tx_index <= tx_len) {
			uint32_t fifo_used = port->MFSR & 0x07; // pg 2914
			while (fifo_used < 4) {
				if (tx_index == 0) {
    8b8a:	cmp	r4, #0
    8b8c:	beq.n	8b76 <TwoWire::endTransmission(unsigned char)+0x3e>
					port->MTDR = LPI2C_MTDR_CMD_START | txBuffer[0];
					tx_index = 1;
				} else if (tx_index < tx_len) {
    8b8e:	cmp	sl, r4
    8b90:	bls.n	8be2 <TwoWire::endTransmission(unsigned char)+0xaa>
				} else {
					if (sendStop) port->MTDR = LPI2C_MTDR_CMD_STOP;
					tx_index++;
					break;
				}
				fifo_used++;
    8b92:	adds	r3, #1
			while (fifo_used < 4) {
				if (tx_index == 0) {
					port->MTDR = LPI2C_MTDR_CMD_START | txBuffer[0];
					tx_index = 1;
				} else if (tx_index < tx_len) {
					port->MTDR = LPI2C_MTDR_CMD_TRANSMIT | txBuffer[tx_index++];
    8b94:	ldrb.w	r2, [r2, #61]	; 0x3d
    8b98:	adds	r4, #1
	elapsedMillis timeout = 0;
	while (1) {
		// transmit stuff, if we haven't already
		if (tx_index <= tx_len) {
			uint32_t fifo_used = port->MFSR & 0x07; // pg 2914
			while (fifo_used < 4) {
    8b9a:	cmp	r3, #4
				if (tx_index == 0) {
					port->MTDR = LPI2C_MTDR_CMD_START | txBuffer[0];
					tx_index = 1;
				} else if (tx_index < tx_len) {
					port->MTDR = LPI2C_MTDR_CMD_TRANSMIT | txBuffer[tx_index++];
    8b9c:	str	r2, [r1, #96]	; 0x60
	elapsedMillis timeout = 0;
	while (1) {
		// transmit stuff, if we haven't already
		if (tx_index <= tx_len) {
			uint32_t fifo_used = port->MFSR & 0x07; // pg 2914
			while (fifo_used < 4) {
    8b9e:	bne.n	8b88 <TwoWire::endTransmission(unsigned char)+0x50>
				}
				fifo_used++;
			}
		}
		// monitor status
		uint32_t status = port->MSR; // pg 2884 & 2891
    8ba0:	ldr	r3, [r1, #20]
		if (status & LPI2C_MSR_ALF) {
    8ba2:	lsls	r0, r3, #20
    8ba4:	bmi.n	8bec <TwoWire::endTransmission(unsigned char)+0xb4>
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
			return 4; // we lost bus arbitration to another master
		}
		if (status & LPI2C_MSR_NDF) {
    8ba6:	lsls	r2, r3, #21
    8ba8:	bmi.n	8bfa <TwoWire::endTransmission(unsigned char)+0xc2>
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
			port->MTDR = LPI2C_MTDR_CMD_STOP;
			return 2; // NACK (assume address, TODO: how to tell address from data)
		}
		if ((status & LPI2C_MSR_PLTF) || timeout > 50) {
    8baa:	lsls	r0, r3, #18
    8bac:	bmi.n	8bb8 <TwoWire::endTransmission(unsigned char)+0x80>
    8bae:	ldr	r2, [r7, #0]
    8bb0:	rsb	r2, r8, r2
    8bb4:	cmp	r2, #50	; 0x32
    8bb6:	bls.n	8bcc <TwoWire::endTransmission(unsigned char)+0x94>
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    8bb8:	ldr	r3, [r1, #16]
			port->MTDR = LPI2C_MTDR_CMD_STOP; // try to send a stop
    8bba:	mov.w	r2, #512	; 0x200
			return 4; // clock stretched too long or generic timeout
    8bbe:	movs	r0, #4
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
			port->MTDR = LPI2C_MTDR_CMD_STOP;
			return 2; // NACK (assume address, TODO: how to tell address from data)
		}
		if ((status & LPI2C_MSR_PLTF) || timeout > 50) {
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    8bc0:	orr.w	r3, r3, #768	; 0x300
    8bc4:	str	r3, [r1, #16]
			port->MTDR = LPI2C_MTDR_CMD_STOP; // try to send a stop
    8bc6:	str	r2, [r1, #96]	; 0x60
			return 4; // clock stretched too long or generic timeout
    8bc8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		}
		// are we done yet?
		if (tx_index > tx_len) {
    8bcc:	cmp	r4, sl
    8bce:	bls.n	8bdc <TwoWire::endTransmission(unsigned char)+0xa4>
			uint32_t tx_fifo = port->MFSR & 0x07;
    8bd0:	ldr	r2, [r1, #92]	; 0x5c
			if (tx_fifo == 0 && ((status & LPI2C_MSR_SDF) || !sendStop)) {
    8bd2:	lsls	r2, r2, #29
    8bd4:	bne.n	8bdc <TwoWire::endTransmission(unsigned char)+0xa4>
    8bd6:	lsls	r3, r3, #22
    8bd8:	bmi.n	8c0e <TwoWire::endTransmission(unsigned char)+0xd6>
    8bda:	cbz	r6, 8c0e <TwoWire::endTransmission(unsigned char)+0xd6>
				return 0;
			}
		}
		yield();
    8bdc:	bl	fc48 <yield>
	uint32_t tx_len = txBufferLength;
	if (!tx_len) return 4; // no address for transmit
	if (!wait_idle()) return 4;
	uint32_t tx_index = 0; // 0=start, 1=addr, 2-(N-1)=data, N=stop
	elapsedMillis timeout = 0;
	while (1) {
    8be0:	b.n	8b64 <TwoWire::endTransmission(unsigned char)+0x2c>
					port->MTDR = LPI2C_MTDR_CMD_START | txBuffer[0];
					tx_index = 1;
				} else if (tx_index < tx_len) {
					port->MTDR = LPI2C_MTDR_CMD_TRANSMIT | txBuffer[tx_index++];
				} else {
					if (sendStop) port->MTDR = LPI2C_MTDR_CMD_STOP;
    8be2:	cbz	r6, 8be8 <TwoWire::endTransmission(unsigned char)+0xb0>
    8be4:	str.w	r9, [r1, #96]	; 0x60
					tx_index++;
    8be8:	adds	r4, #1
					break;
    8bea:	b.n	8ba0 <TwoWire::endTransmission(unsigned char)+0x68>
			}
		}
		// monitor status
		uint32_t status = port->MSR; // pg 2884 & 2891
		if (status & LPI2C_MSR_ALF) {
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    8bec:	ldr	r3, [r1, #16]
			return 4; // we lost bus arbitration to another master
    8bee:	movs	r0, #4
			}
		}
		// monitor status
		uint32_t status = port->MSR; // pg 2884 & 2891
		if (status & LPI2C_MSR_ALF) {
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    8bf0:	orr.w	r3, r3, #768	; 0x300
    8bf4:	str	r3, [r1, #16]
			return 4; // we lost bus arbitration to another master
    8bf6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		}
		if (status & LPI2C_MSR_NDF) {
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    8bfa:	ldr	r3, [r1, #16]
			port->MTDR = LPI2C_MTDR_CMD_STOP;
    8bfc:	mov.w	r2, #512	; 0x200
			return 2; // NACK (assume address, TODO: how to tell address from data)
    8c00:	movs	r0, #2
		if (status & LPI2C_MSR_ALF) {
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
			return 4; // we lost bus arbitration to another master
		}
		if (status & LPI2C_MSR_NDF) {
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    8c02:	orr.w	r3, r3, #768	; 0x300
    8c06:	str	r3, [r1, #16]
			port->MTDR = LPI2C_MTDR_CMD_STOP;
    8c08:	str	r2, [r1, #96]	; 0x60
			return 2; // NACK (assume address, TODO: how to tell address from data)
    8c0a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		}
		// are we done yet?
		if (tx_index > tx_len) {
			uint32_t tx_fifo = port->MFSR & 0x07;
			if (tx_fifo == 0 && ((status & LPI2C_MSR_SDF) || !sendStop)) {
				return 0;
    8c0e:	movs	r0, #0
    8c10:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    8c14:	.word	0x200447a4

00008c18 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)>:
		yield();
	}
}

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t length, uint8_t sendStop)
{
    8c18:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8c1c:	mov	r4, r1
    8c1e:	mov	r5, r2
    8c20:	mov	r8, r3
    8c22:	mov	r9, r0
	if (!wait_idle()) return 4;
    8c24:	bl	8afc <TwoWire::wait_idle()>
    8c28:	cbnz	r0, 8c30 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x18>
    8c2a:	movs	r0, #4
    8c2c:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	address = (address & 0x7F) << 1;
	if (length < 1) length = 1;
	if (length > 255) length = 255;
	rxBufferIndex = 0;
    8c30:	movs	r2, #0
}

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t length, uint8_t sendStop)
{
	if (!wait_idle()) return 4;
	address = (address & 0x7F) << 1;
    8c32:	lsls	r3, r4, #1
	if (length < 1) length = 1;
    8c34:	cmp	r5, #0
		// transmit stuff, if we haven't already
		if (tx_state < 3) {
			uint32_t tx_fifo = port->MFSR & 0x07; // pg 2914
			while (tx_fifo < 4 && tx_state < 3) {
				if (tx_state == 0) {
					port->MTDR = LPI2C_MTDR_CMD_START | 1 | address;
    8c36:	movw	sl, #1025	; 0x401
	address = (address & 0x7F) << 1;
	if (length < 1) length = 1;
	if (length > 255) length = 255;
	rxBufferIndex = 0;
	rxBufferLength = 0;
	uint32_t tx_state = 0; // 0=begin, 1=start, 2=data, 3=stop
    8c3a:	mov	r4, r2
		// transmit stuff, if we haven't already
		if (tx_state < 3) {
			uint32_t tx_fifo = port->MFSR & 0x07; // pg 2914
			while (tx_fifo < 4 && tx_state < 3) {
				if (tx_state == 0) {
					port->MTDR = LPI2C_MTDR_CMD_START | 1 | address;
    8c3c:	uxtb	r3, r3
    8c3e:	ldr	r6, [pc, #244]	; (8d34 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x11c>)

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t length, uint8_t sendStop)
{
	if (!wait_idle()) return 4;
	address = (address & 0x7F) << 1;
	if (length < 1) length = 1;
    8c40:	it	eq
    8c42:	moveq	r5, #1
	rxBufferLength = 0;
	uint32_t tx_state = 0; // 0=begin, 1=start, 2=data, 3=stop
	elapsedMillis timeout = 0;
	while (1) {
		// transmit stuff, if we haven't already
		if (tx_state < 3) {
    8c44:	cmp	r4, #2
			uint32_t tx_fifo = port->MFSR & 0x07; // pg 2914
			while (tx_fifo < 4 && tx_state < 3) {
				if (tx_state == 0) {
					port->MTDR = LPI2C_MTDR_CMD_START | 1 | address;
    8c46:	orr.w	sl, r3, sl
    8c4a:	ldr.w	fp, [r6]
{
	if (!wait_idle()) return 4;
	address = (address & 0x7F) << 1;
	if (length < 1) length = 1;
	if (length > 255) length = 255;
	rxBufferIndex = 0;
    8c4e:	strb.w	r2, [r9, #58]	; 0x3a
	rxBufferLength = 0;
    8c52:	strb.w	r2, [r9, #59]	; 0x3b
	uint32_t tx_state = 0; // 0=begin, 1=start, 2=data, 3=stop
	elapsedMillis timeout = 0;
	while (1) {
		// transmit stuff, if we haven't already
		if (tx_state < 3) {
    8c56:	bls.n	8cea <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xd2>
    8c58:	ldr.w	r3, [r9, #16]
				tx_state++;
				tx_fifo--;
			}
		}
		// receive stuff
		if (rxBufferLength < sizeof(rxBuffer)) {
    8c5c:	ldrb.w	r2, [r9, #59]	; 0x3b
    8c60:	cmp	r2, #31
    8c62:	bhi.n	8c8a <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x72>
			uint32_t rx_fifo = (port->MFSR >> 16) & 0x07;
    8c64:	ldr	r1, [r3, #92]	; 0x5c
    8c66:	ubfx	r1, r1, #16, #3
			while (rx_fifo > 0 && rxBufferLength < sizeof(rxBuffer)) {
    8c6a:	cbnz	r1, 8c72 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x5a>
    8c6c:	b.n	8c8a <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x72>
    8c6e:	cmp	r2, #32
    8c70:	beq.n	8c8a <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x72>
				rxBuffer[rxBufferLength++] = port->MRDR;
    8c72:	add.w	lr, r2, #1
    8c76:	add.w	r0, r9, r2
			}
		}
		// receive stuff
		if (rxBufferLength < sizeof(rxBuffer)) {
			uint32_t rx_fifo = (port->MFSR >> 16) & 0x07;
			while (rx_fifo > 0 && rxBufferLength < sizeof(rxBuffer)) {
    8c7a:	subs	r1, #1
				rxBuffer[rxBufferLength++] = port->MRDR;
    8c7c:	uxtb.w	r2, lr
    8c80:	strb.w	r2, [r9, #59]	; 0x3b
    8c84:	ldr	r7, [r3, #112]	; 0x70
    8c86:	strb	r7, [r0, #26]
			}
		}
		// receive stuff
		if (rxBufferLength < sizeof(rxBuffer)) {
			uint32_t rx_fifo = (port->MFSR >> 16) & 0x07;
			while (rx_fifo > 0 && rxBufferLength < sizeof(rxBuffer)) {
    8c88:	bne.n	8c6e <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x56>
				rxBuffer[rxBufferLength++] = port->MRDR;
				rx_fifo--;
			}
		}
		// monitor status, check for error conditions
		uint32_t status = port->MSR; // pg 2884 & 2891
    8c8a:	ldr	r2, [r3, #20]
		if (status & LPI2C_MSR_ALF) {
    8c8c:	lsls	r0, r2, #20
    8c8e:	bmi.n	8d2a <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x112>
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
			break;
		}
		if ((status & LPI2C_MSR_NDF) || (status & LPI2C_MSR_PLTF) || timeout > 50) {
    8c90:	tst.w	r2, #9216	; 0x2400
    8c94:	bne.n	8ca0 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x88>
    8c96:	ldr	r1, [r6, #0]
    8c98:	rsb	r1, fp, r1
    8c9c:	cmp	r1, #50	; 0x32
    8c9e:	bls.n	8cc6 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xae>
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    8ca0:	ldr	r2, [r3, #16]
			port->MTDR = LPI2C_MTDR_CMD_STOP; // try to send a stop
    8ca2:	mov.w	r1, #512	; 0x200
		if (status & LPI2C_MSR_ALF) {
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
			break;
		}
		if ((status & LPI2C_MSR_NDF) || (status & LPI2C_MSR_PLTF) || timeout > 50) {
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    8ca6:	orr.w	r2, r2, #768	; 0x300
    8caa:	str	r2, [r3, #16]
			port->MTDR = LPI2C_MTDR_CMD_STOP; // try to send a stop
    8cac:	str	r1, [r3, #96]	; 0x60
				break;
			}
		}
		yield();
	}
	uint32_t rx_fifo = (port->MFSR >> 16) & 0x07;
    8cae:	ldr	r2, [r3, #92]	; 0x5c
	if (rx_fifo > 0) port->MCR |= LPI2C_MCR_RRF;
    8cb0:	tst.w	r2, #458752	; 0x70000
    8cb4:	beq.n	8cbe <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xa6>
    8cb6:	ldr	r2, [r3, #16]
    8cb8:	orr.w	r2, r2, #512	; 0x200
    8cbc:	str	r2, [r3, #16]
	return rxBufferLength;
    8cbe:	ldrb.w	r0, [r9, #59]	; 0x3b
    8cc2:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
			port->MTDR = LPI2C_MTDR_CMD_STOP; // try to send a stop
			break;
		}
		// are we done yet?
		if (rxBufferLength >= length && tx_state >= 3) {
    8cc6:	ldrb.w	r1, [r9, #59]	; 0x3b
    8cca:	cmp	r1, r5
    8ccc:	bcc.n	8ce2 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xca>
    8cce:	cmp	r4, #2
    8cd0:	bls.n	8ce2 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xca>
			uint32_t tx_fifo = port->MFSR & 0x07;
    8cd2:	ldr	r1, [r3, #92]	; 0x5c
			if (tx_fifo == 0 && ((status & LPI2C_MSR_SDF) || !sendStop)) {
    8cd4:	lsls	r1, r1, #29
    8cd6:	bne.n	8ce2 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xca>
    8cd8:	lsls	r2, r2, #22
    8cda:	bmi.n	8cae <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x96>
    8cdc:	cmp.w	r8, #0
    8ce0:	beq.n	8cae <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x96>
				break;
			}
		}
		yield();
    8ce2:	bl	fc48 <yield>
	rxBufferLength = 0;
	uint32_t tx_state = 0; // 0=begin, 1=start, 2=data, 3=stop
	elapsedMillis timeout = 0;
	while (1) {
		// transmit stuff, if we haven't already
		if (tx_state < 3) {
    8ce6:	cmp	r4, #2
    8ce8:	bhi.n	8c58 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x40>
			uint32_t tx_fifo = port->MFSR & 0x07; // pg 2914
    8cea:	ldr.w	r2, [r9, #16]
    8cee:	ldr	r3, [r2, #92]	; 0x5c
    8cf0:	and.w	r3, r3, #7
			while (tx_fifo < 4 && tx_state < 3) {
    8cf4:	cmp	r3, #3
    8cf6:	bhi.n	8d14 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xfc>
				if (tx_state == 0) {
					port->MTDR = LPI2C_MTDR_CMD_START | 1 | address;
				} else if (tx_state == 1) {
					port->MTDR = LPI2C_MTDR_CMD_RECEIVE | (length - 1);
    8cf8:	subs	r1, r5, #1
				} else {
					if (sendStop) port->MTDR = LPI2C_MTDR_CMD_STOP;
    8cfa:	mov.w	r0, #512	; 0x200
			uint32_t tx_fifo = port->MFSR & 0x07; // pg 2914
			while (tx_fifo < 4 && tx_state < 3) {
				if (tx_state == 0) {
					port->MTDR = LPI2C_MTDR_CMD_START | 1 | address;
				} else if (tx_state == 1) {
					port->MTDR = LPI2C_MTDR_CMD_RECEIVE | (length - 1);
    8cfe:	orr.w	r1, r1, #256	; 0x100
	while (1) {
		// transmit stuff, if we haven't already
		if (tx_state < 3) {
			uint32_t tx_fifo = port->MFSR & 0x07; // pg 2914
			while (tx_fifo < 4 && tx_state < 3) {
				if (tx_state == 0) {
    8d02:	cbnz	r4, 8d18 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x100>
					port->MTDR = LPI2C_MTDR_CMD_START | 1 | address;
    8d04:	str.w	sl, [r2, #96]	; 0x60
					port->MTDR = LPI2C_MTDR_CMD_RECEIVE | (length - 1);
				} else {
					if (sendStop) port->MTDR = LPI2C_MTDR_CMD_STOP;
				}
				tx_state++;
				tx_fifo--;
    8d08:	subs	r3, #1
				} else if (tx_state == 1) {
					port->MTDR = LPI2C_MTDR_CMD_RECEIVE | (length - 1);
				} else {
					if (sendStop) port->MTDR = LPI2C_MTDR_CMD_STOP;
				}
				tx_state++;
    8d0a:	adds	r4, #1
	elapsedMillis timeout = 0;
	while (1) {
		// transmit stuff, if we haven't already
		if (tx_state < 3) {
			uint32_t tx_fifo = port->MFSR & 0x07; // pg 2914
			while (tx_fifo < 4 && tx_state < 3) {
    8d0c:	cmp	r3, #3
    8d0e:	bhi.n	8d14 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xfc>
    8d10:	cmp	r4, #2
    8d12:	bls.n	8d02 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xea>
    8d14:	mov	r3, r2
    8d16:	b.n	8c5c <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x44>
				if (tx_state == 0) {
					port->MTDR = LPI2C_MTDR_CMD_START | 1 | address;
				} else if (tx_state == 1) {
    8d18:	cmp	r4, #1
    8d1a:	beq.n	8d26 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x10e>
					port->MTDR = LPI2C_MTDR_CMD_RECEIVE | (length - 1);
				} else {
					if (sendStop) port->MTDR = LPI2C_MTDR_CMD_STOP;
    8d1c:	cmp.w	r8, #0
    8d20:	beq.n	8d08 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xf0>
    8d22:	str	r0, [r2, #96]	; 0x60
    8d24:	b.n	8d08 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xf0>
			uint32_t tx_fifo = port->MFSR & 0x07; // pg 2914
			while (tx_fifo < 4 && tx_state < 3) {
				if (tx_state == 0) {
					port->MTDR = LPI2C_MTDR_CMD_START | 1 | address;
				} else if (tx_state == 1) {
					port->MTDR = LPI2C_MTDR_CMD_RECEIVE | (length - 1);
    8d26:	str	r1, [r2, #96]	; 0x60
    8d28:	b.n	8d08 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xf0>
			}
		}
		// monitor status, check for error conditions
		uint32_t status = port->MSR; // pg 2884 & 2891
		if (status & LPI2C_MSR_ALF) {
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    8d2a:	ldr	r2, [r3, #16]
    8d2c:	orr.w	r2, r2, #768	; 0x300
    8d30:	str	r2, [r3, #16]
    8d32:	b.n	8cae <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x96>
    8d34:	.word	0x200447a4

00008d38 <FsCache::sync() [clone .part.0]>:

 fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FsCache::sync() {
    8d38:	push	{r4, r5, r6, lr}
    8d3a:	mov	r4, r0
  if (m_status & CACHE_STATUS_DIRTY) {
    if (!m_blockDev->writeSector(m_sector, m_buffer)) {
    8d3c:	ldr	r0, [r0, #4]
    8d3e:	add.w	r6, r4, #16
    8d42:	ldr	r3, [r0, #0]
    8d44:	ldr	r1, [r4, #12]
    8d46:	mov	r2, r6
    8d48:	ldr	r3, [r3, #28]
    8d4a:	blx	r3
    8d4c:	cbz	r0, 8d60 <FsCache::sync() [clone .part.0]+0x28>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
    8d4e:	ldrb	r3, [r4, #0]
    8d50:	mov	r5, r0
    8d52:	lsls	r2, r3, #30
    8d54:	bmi.n	8d66 <FsCache::sync() [clone .part.0]+0x2e>
      if (!m_blockDev->writeSector(sector, m_buffer)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
    8d56:	bic.w	r3, r3, #1
  }
  return true;

 fail:
  return false;
}
    8d5a:	mov	r0, r5
      if (!m_blockDev->writeSector(sector, m_buffer)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
    8d5c:	strb	r3, [r4, #0]
  }
  return true;

 fail:
  return false;
}
    8d5e:	pop	{r4, r5, r6, pc}
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;

 fail:
  return false;
    8d60:	movs	r5, #0
}
    8d62:	mov	r0, r5
    8d64:	pop	{r4, r5, r6, pc}
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
      uint32_t sector = m_sector + m_mirrorOffset;
      if (!m_blockDev->writeSector(sector, m_buffer)) {
    8d66:	ldr	r0, [r4, #4]
    8d68:	mov	r2, r6
    8d6a:	ldr	r1, [r4, #8]
    8d6c:	ldr	r6, [r4, #12]
    8d6e:	ldr	r3, [r0, #0]
    8d70:	add	r1, r6
    8d72:	ldr	r3, [r3, #28]
    8d74:	blx	r3
    8d76:	cmp	r0, #0
    8d78:	beq.n	8d60 <FsCache::sync() [clone .part.0]+0x28>
    8d7a:	ldrb	r3, [r4, #0]
    8d7c:	b.n	8d56 <FsCache::sync() [clone .part.0]+0x1e>
    8d7e:	nop

00008d80 <FsCache::get(unsigned long, unsigned char)>:
 * DEALINGS IN THE SOFTWARE.
 */
#include "DebugMacros.h"
#include "FsCache.h"
//------------------------------------------------------------------------------
uint8_t* FsCache::get(uint32_t sector, uint8_t option) {
    8d80:	push	{r3, r4, r5, r6, r7, lr}
  if (!m_blockDev) {
    8d82:	ldr	r3, [r0, #4]
    8d84:	cbz	r3, 8dc6 <FsCache::get(unsigned long, unsigned char)+0x46>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_sector != sector) {
    8d86:	ldr	r3, [r0, #12]
    8d88:	mov	r4, r0
    8d8a:	mov	r5, r2
    8d8c:	mov	r7, r1
    8d8e:	cmp	r3, r1
    8d90:	beq.n	8db0 <FsCache::get(unsigned long, unsigned char)+0x30>
 fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FsCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    8d92:	ldrb	r3, [r0, #0]
    8d94:	lsls	r2, r3, #31
    8d96:	bmi.n	8dbe <FsCache::get(unsigned long, unsigned char)+0x3e>
  if (m_sector != sector) {
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
    8d98:	lsls	r3, r5, #29
    8d9a:	bpl.n	8dca <FsCache::get(unsigned long, unsigned char)+0x4a>
    8d9c:	add.w	r6, r4, #16
    8da0:	movs	r2, #0
      }
    }
    m_status = 0;
    m_sector = sector;
  }
  m_status |= option & CACHE_STATUS_MASK;
    8da2:	and.w	r5, r5, #3
    8da6:	mov	r0, r6
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status = 0;
    m_sector = sector;
    8da8:	str	r7, [r4, #12]
  }
  m_status |= option & CACHE_STATUS_MASK;
    8daa:	orrs	r5, r2
    8dac:	strb	r5, [r4, #0]
  return m_buffer;

 fail:
  return nullptr;
}
    8dae:	pop	{r3, r4, r5, r6, r7, pc}
    8db0:	ldrsb.w	r2, [r0], #16
      }
    }
    m_status = 0;
    m_sector = sector;
  }
  m_status |= option & CACHE_STATUS_MASK;
    8db4:	and.w	r5, r5, #3
    8db8:	orrs	r5, r2
    8dba:	strb	r5, [r4, #0]
  return m_buffer;

 fail:
  return nullptr;
}
    8dbc:	pop	{r3, r4, r5, r6, r7, pc}
    8dbe:	bl	8d38 <FsCache::sync() [clone .part.0]>
  if (!m_blockDev) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_sector != sector) {
    if (!sync()) {
    8dc2:	cmp	r0, #0
    8dc4:	bne.n	8d98 <FsCache::get(unsigned long, unsigned char)+0x18>
  }
  m_status |= option & CACHE_STATUS_MASK;
  return m_buffer;

 fail:
  return nullptr;
    8dc6:	movs	r0, #0
    8dc8:	pop	{r3, r4, r5, r6, r7, pc}
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
      if (!m_blockDev->readSector(sector, m_buffer)) {
    8dca:	ldr	r0, [r4, #4]
    8dcc:	add.w	r6, r4, #16
    8dd0:	mov	r1, r7
    8dd2:	ldr	r3, [r0, #0]
    8dd4:	mov	r2, r6
    8dd6:	ldr	r3, [r3, #12]
    8dd8:	blx	r3
    8dda:	cmp	r0, #0
    8ddc:	bne.n	8da0 <FsCache::get(unsigned long, unsigned char)+0x20>
    8dde:	b.n	8dc6 <FsCache::get(unsigned long, unsigned char)+0x46>

00008de0 <FsCache::sync()>:
 fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FsCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    8de0:	ldrb	r3, [r0, #0]
    8de2:	lsls	r3, r3, #31
    8de4:	bmi.n	8dea <FsCache::sync()+0xa>
  }
  return true;

 fail:
  return false;
}
    8de6:	movs	r0, #1
    8de8:	bx	lr
    8dea:	b.w	8d38 <FsCache::sync() [clone .part.0]>
    8dee:	nop

00008df0 <ExFatFile::close()>:
#include "../common/DebugMacros.h"
#include "ExFatFile.h"
#include "ExFatVolume.h"
#include "upcase.h"
//------------------------------------------------------------------------------
bool ExFatFile::close() {
    8df0:	push	{r4, lr}
    8df2:	mov	r4, r0
  bool rtn = sync();
    8df4:	bl	a050 <ExFatFile::sync()>
  m_attributes = FILE_ATTR_CLOSED;
    8df8:	movs	r3, #0
    8dfa:	strb.w	r3, [r4, #49]	; 0x31
  m_flags = 0;
    8dfe:	strb.w	r3, [r4, #51]	; 0x33
  return rtn;
}
    8e02:	pop	{r4, pc}

00008e04 <ExFatFile::getName(char*, unsigned int)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
size_t ExFatFile::getName(ExChar_t* name, size_t length) {
    8e04:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  DirName_t* dn;
  DirPos_t pos = m_dirPos;
    8e08:	add.w	r3, r0, #36	; 0x24

 fail:
  return false;
}
//------------------------------------------------------------------------------
size_t ExFatFile::getName(ExChar_t* name, size_t length) {
    8e0c:	sub	sp, #20
    8e0e:	mov	r9, r0
    8e10:	mov	r8, r1
    8e12:	mov	r5, r2
  DirName_t* dn;
  DirPos_t pos = m_dirPos;
    8e14:	add	r6, sp, #4
  size_t n = 0;
  if (!isOpen()) {
    8e16:	ldrb.w	r4, [r0, #49]	; 0x31
  return false;
}
//------------------------------------------------------------------------------
size_t ExFatFile::getName(ExChar_t* name, size_t length) {
  DirName_t* dn;
  DirPos_t pos = m_dirPos;
    8e1a:	ldmia.w	r3, {r0, r1, r2}
    8e1e:	stmia.w	r6, {r0, r1, r2}
  size_t n = 0;
  if (!isOpen()) {
    8e22:	cbz	r4, 8e90 <ExFatFile::getName(char*, unsigned int)+0x8c>
      DBG_FAIL_MACRO;
      goto fail;
  }
  for (uint8_t is = 1; is < m_setCount; is++) {
    8e24:	ldrb.w	r3, [r9, #48]	; 0x30
    8e28:	cmp	r3, #1
    8e2a:	bls.n	8e9e <ExFatFile::getName(char*, unsigned int)+0x9a>
    8e2c:	movs	r7, #1
    8e2e:	movs	r4, #0
    if (m_vol->dirSeek(&pos, is == 1 ? 64: 32) != 1) {
    8e30:	cmp	r7, #1
    8e32:	mov	r1, r6
    8e34:	ldr.w	r0, [r9, #32]
    8e38:	ite	ne
    8e3a:	movne	r2, #32
    8e3c:	moveq	r2, #64	; 0x40
    8e3e:	bl	9a20 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)>
    8e42:	cmp	r0, #1
    8e44:	bne.n	8e90 <ExFatFile::getName(char*, unsigned int)+0x8c>
      DBG_FAIL_MACRO;
      goto fail;
    }
    dn = reinterpret_cast<DirName_t*>
         (m_vol->dirCache(&pos, FsCache::CACHE_FOR_READ));
    8e46:	movs	r2, #0
    8e48:	mov	r1, r6
    8e4a:	ldr.w	r0, [r9, #32]
    8e4e:	bl	99e8 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
    if (!dn || dn->type != EXFAT_TYPE_NAME) {
    8e52:	cbz	r0, 8e90 <ExFatFile::getName(char*, unsigned int)+0x8c>
    8e54:	ldrb	r3, [r0, #0]
    8e56:	cmp	r3, #193	; 0xc1
    8e58:	bne.n	8e90 <ExFatFile::getName(char*, unsigned int)+0x8c>
    8e5a:	add.w	lr, r8, r4
    8e5e:	add.w	ip, r4, #15
void lbaToMbrChs(uint8_t* chs, uint32_t capacityMB, uint32_t lba);
//-----------------------------------------------------------------------------
#if !defined(USE_SIMPLE_LITTLE_ENDIAN) || USE_SIMPLE_LITTLE_ENDIAN
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
    8e62:	ldrh.w	r2, [r0, #2]!
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (uint8_t in = 0; in < 15; in++) {
      uint16_t c = getLe16(dn->unicode + 2*in);
      if (c == 0 || (n + 1) >= length) {
    8e66:	adds	r3, r4, #1
        goto done;
      }
      name[n++] = sizeof(ExChar_t) > 1 || c < 0X7F ? c : '?';
    8e68:	movs	r1, #63	; 0x3f
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (uint8_t in = 0; in < 15; in++) {
      uint16_t c = getLe16(dn->unicode + 2*in);
      if (c == 0 || (n + 1) >= length) {
    8e6a:	cbz	r2, 8ea0 <ExFatFile::getName(char*, unsigned int)+0x9c>
    8e6c:	cmp	r3, r5
    8e6e:	bcs.n	8ea0 <ExFatFile::getName(char*, unsigned int)+0x9c>
        goto done;
      }
      name[n++] = sizeof(ExChar_t) > 1 || c < 0X7F ? c : '?';
    8e70:	cmp	r2, #126	; 0x7e
    8e72:	mov	r4, r3
    8e74:	it	ls
    8e76:	uxtbls	r1, r2
         (m_vol->dirCache(&pos, FsCache::CACHE_FOR_READ));
    if (!dn || dn->type != EXFAT_TYPE_NAME) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (uint8_t in = 0; in < 15; in++) {
    8e78:	cmp	r3, ip
      uint16_t c = getLe16(dn->unicode + 2*in);
      if (c == 0 || (n + 1) >= length) {
        goto done;
      }
      name[n++] = sizeof(ExChar_t) > 1 || c < 0X7F ? c : '?';
    8e7a:	strb.w	r1, [lr], #1
         (m_vol->dirCache(&pos, FsCache::CACHE_FOR_READ));
    if (!dn || dn->type != EXFAT_TYPE_NAME) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (uint8_t in = 0; in < 15; in++) {
    8e7e:	bne.n	8e62 <ExFatFile::getName(char*, unsigned int)+0x5e>
  size_t n = 0;
  if (!isOpen()) {
      DBG_FAIL_MACRO;
      goto fail;
  }
  for (uint8_t is = 1; is < m_setCount; is++) {
    8e80:	adds	r7, #1
    8e82:	ldrb.w	r2, [r9, #48]	; 0x30
    8e86:	uxtb	r7, r7
    8e88:	cmp	r2, r7
    8e8a:	bls.n	8ea0 <ExFatFile::getName(char*, unsigned int)+0x9c>
    8e8c:	mov	r4, r3
    8e8e:	b.n	8e30 <ExFatFile::getName(char*, unsigned int)+0x2c>
 done:
  name[n] = 0;
  return n;

 fail:
  *name = 0;
    8e90:	movs	r3, #0
  return 0;
    8e92:	mov	r0, r3
 done:
  name[n] = 0;
  return n;

 fail:
  *name = 0;
    8e94:	strb.w	r3, [r8]
  return 0;
}
    8e98:	add	sp, #20
    8e9a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  size_t n = 0;
  if (!isOpen()) {
      DBG_FAIL_MACRO;
      goto fail;
  }
  for (uint8_t is = 1; is < m_setCount; is++) {
    8e9e:	movs	r4, #0
      }
      name[n++] = sizeof(ExChar_t) > 1 || c < 0X7F ? c : '?';
    }
  }
 done:
  name[n] = 0;
    8ea0:	movs	r3, #0
  return n;
    8ea2:	mov	r0, r4
      }
      name[n++] = sizeof(ExChar_t) > 1 || c < 0X7F ? c : '?';
    }
  }
 done:
  name[n] = 0;
    8ea4:	strb.w	r3, [r8, r4]
  return n;

 fail:
  *name = 0;
  return 0;
}
    8ea8:	add	sp, #20
    8eaa:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    8eae:	nop

00008eb0 <ExFatFile::openRoot(ExFatVolume*)>:
  m_flags = 0;
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::openRoot(ExFatVolume* vol) {
  if (isOpen()) {
    8eb0:	ldrb.w	r2, [r0, #49]	; 0x31
    8eb4:	cbz	r2, 8eba <ExFatFile::openRoot(ExFatVolume*)+0xa>
  m_vol = vol;
  m_flags = FILE_FLAG_READ;
  return true;

 fail:
  return false;
    8eb6:	movs	r0, #0
    8eb8:	bx	lr
  m_attributes = FILE_ATTR_CLOSED;
  m_flags = 0;
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::openRoot(ExFatVolume* vol) {
    8eba:	push	{r3, r4, r5, lr}
    8ebc:	mov	r5, r1
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
    8ebe:	mov	r1, r2
    8ec0:	movs	r2, #56	; 0x38
    8ec2:	mov	r4, r0
    8ec4:	bl	10bfc <memset>
  m_attributes = FILE_ATTR_ROOT;
    8ec8:	movs	r3, #64	; 0x40
  m_vol = vol;
  m_flags = FILE_FLAG_READ;
    8eca:	movs	r0, #1
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
  m_attributes = FILE_ATTR_ROOT;
  m_vol = vol;
    8ecc:	str	r5, [r4, #32]
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
  m_attributes = FILE_ATTR_ROOT;
    8ece:	strb.w	r3, [r4, #49]	; 0x31
  m_vol = vol;
  m_flags = FILE_FLAG_READ;
    8ed2:	strb.w	r0, [r4, #51]	; 0x33
    8ed6:	pop	{r3, r4, r5, pc}

00008ed8 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>:
 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::parsePathName(const ExChar_t* path,
                            ExName_t* fname, const ExChar_t** ptr) {
    8ed8:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  ExChar_t c;
  int end;
  int len = 0;

  // Skip leading spaces.
  while (*path == ' ') {
    8edc:	ldrb	r0, [r1, #0]
    8ede:	cmp	r0, #32
    8ee0:	bne.n	8eea <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x12>
    8ee2:	ldrb.w	r0, [r1, #1]!
    8ee6:	cmp	r0, #32
    8ee8:	beq.n	8ee2 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xa>
    path++;
  }
  fname->lfn = path;
    8eea:	str	r1, [r2, #4]

  for (len = 0; ; len++) {
    c = path[len];
    8eec:	ldrb	r0, [r1, #0]
    if (c == 0 || isDirSeparator(c)) {
    8eee:	cmp	r0, #47	; 0x2f
    8ef0:	beq.n	8fbc <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xe4>
    8ef2:	cmp	r0, #0
    8ef4:	beq.n	8fbc <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xe4>
 * \param[in] c character to be tested.
 *
 * \return true for legal character else false.
 */
inline bool lfnLegalChar(ExChar_t c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
    8ef6:	cmp	r0, #92	; 0x5c
    8ef8:	beq.n	8f46 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x6e>
    8efa:	sub.w	r4, r0, #34	; 0x22
    8efe:	uxtb	r4, r4
    8f00:	cmp	r4, #26
    8f02:	bls.n	8f4c <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x74>
    8f04:	adds	r5, r1, #1
 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::parsePathName(const ExChar_t* path,
                            ExName_t* fname, const ExChar_t** ptr) {
    8f06:	movs	r6, #0
    8f08:	ldr.w	lr, [pc, #196]	; 8fd0 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xf8>
    8f0c:	b.n	8f16 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x3e>
    8f0e:	cmp	r4, #26
    8f10:	lsr.w	r7, lr, r4
    8f14:	bls.n	8f5c <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x84>
      c == ':' || c == '<' || c == '>' || c == '?' || c == '|') {
    8f16:	sub.w	r4, r0, #62	; 0x3e
  while (*path == ' ') {
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    8f1a:	adds	r6, #1
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
    8f1c:	sub.w	ip, r0, #32
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    c = path[len];
    8f20:	mov	r8, r5
    8f22:	cmp	r4, #1
    8f24:	mov	r7, r6
    8f26:	bls.n	8f46 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x6e>
    8f28:	cmp	r0, #124	; 0x7c
    8f2a:	beq.n	8f46 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x6e>
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
    8f2c:	cmp.w	ip, #94	; 0x5e
    8f30:	bhi.n	8f46 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x6e>
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    c = path[len];
    8f32:	ldrb.w	r0, [r5], #1
 * \param[in] c character to be tested.
 *
 * \return true for legal character else false.
 */
inline bool lfnLegalChar(ExChar_t c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
    8f36:	sub.w	r4, r0, #34	; 0x22
    if (c == 0 || isDirSeparator(c)) {
    8f3a:	cbz	r0, 8f66 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x8e>
    8f3c:	cmp	r0, #47	; 0x2f
    8f3e:	uxtb	r4, r4
    8f40:	beq.n	8f66 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x8e>
    8f42:	cmp	r0, #92	; 0x5c
    8f44:	bne.n	8f0e <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x36>
      break;
    }
    if (!lfnLegalChar(c)) {
      return false;
    8f46:	movs	r0, #0
    8f48:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8f4c:	ldr	r5, [pc, #128]	; (8fd0 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xf8>)
    8f4e:	lsr.w	r4, r5, r4
    8f52:	lsls	r5, r4, #31
    8f54:	bpl.n	8f04 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x2c>
    8f56:	movs	r0, #0
    8f58:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8f5c:	lsls	r4, r7, #31
    8f5e:	bpl.n	8f16 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x3e>
    8f60:	movs	r0, #0
    8f62:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    }
  }
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
    8f66:	cmp	r0, #47	; 0x2f
    8f68:	beq.n	8f6e <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x96>
    8f6a:	cmp	r0, #32
    8f6c:	bne.n	8fb6 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xde>
    8f6e:	adds	r0, r6, #1
    8f70:	add	r0, r1
    8f72:	mov	r5, r0
    8f74:	ldrb.w	r4, [r0], #1
    8f78:	cmp	r4, #32
    8f7a:	beq.n	8f72 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x9a>
    8f7c:	cmp	r4, #47	; 0x2f
    8f7e:	beq.n	8f72 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x9a>
  *ptr = &path[end];
    8f80:	str	r5, [r3, #0]

  // Back over spaces and dots.
  while (len) {
    8f82:	cbz	r6, 8fac <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xd4>
    c = path[len - 1];
    8f84:	add	r7, r1
    8f86:	ldrb.w	r3, [r7, #-1]
    if (c != '.' && c != ' ') {
    8f8a:	cmp	r3, #32
    8f8c:	beq.n	8f92 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xba>
    8f8e:	cmp	r3, #46	; 0x2e
    8f90:	bne.n	8fa8 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xd0>
    8f92:	subs	r3, r6, #1
    8f94:	add	r1, r3
      break;
    }
    len--;
    8f96:	mov	r6, r3
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
  *ptr = &path[end];

  // Back over spaces and dots.
  while (len) {
    8f98:	cbz	r3, 8fae <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xd6>
    c = path[len - 1];
    8f9a:	ldrb.w	r0, [r1, #-1]!
    8f9e:	subs	r3, #1
    if (c != '.' && c != ' ') {
    8fa0:	cmp	r0, #46	; 0x2e
    8fa2:	beq.n	8f96 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xbe>
    8fa4:	cmp	r0, #32
    8fa6:	beq.n	8f96 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xbe>
      break;
    }
    len--;
  }
  // Max length of LFN is 255.
  if (len > EXFAT_MAX_NAME_LENGTH) {
    8fa8:	cmp	r6, #255	; 0xff
    8faa:	bgt.n	8f46 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x6e>
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
  *ptr = &path[end];

  // Back over spaces and dots.
  while (len) {
    8fac:	mov	r3, r6
  }
  // Max length of LFN is 255.
  if (len > EXFAT_MAX_NAME_LENGTH) {
    return false;
  }
  fname->len = len;
    8fae:	str	r3, [r2, #0]
  return true;
    8fb0:	movs	r0, #1
    8fb2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return false;
    }
  }
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
  *ptr = &path[end];
    8fb6:	str.w	r8, [r3]
    8fba:	b.n	8f84 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xac>
    if (!lfnLegalChar(c)) {
      return false;
    }
  }
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
    8fbc:	cmp	r0, #32
    8fbe:	beq.n	8fc4 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xec>
    8fc0:	cmp	r0, #47	; 0x2f
    8fc2:	bne.n	8fca <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xf2>
    8fc4:	movs	r7, #0
  while (*path == ' ') {
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    8fc6:	mov	r6, r7
    8fc8:	b.n	8f6e <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x96>
      return false;
    }
  }
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
  *ptr = &path[end];
    8fca:	str	r1, [r3, #0]
    8fcc:	movs	r3, #0
    8fce:	b.n	8fae <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xd6>
    8fd0:	.word	0x05000101

00008fd4 <ExFatFile::read(void*, unsigned int)>:
  m_curPosition = curPosition;
  m_curCluster = curCluster;
  return c;
}
//------------------------------------------------------------------------------
int ExFatFile::read(void* buf, size_t count) {
    8fd4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8fd8:	ldrb.w	r3, [r0, #51]	; 0x33
    8fdc:	sub	sp, #12
    8fde:	mov	r5, r0
  uint8_t* cache;
  uint16_t sectorOffset;
  uint32_t sector;
  uint32_t clusterOffset;

  if (!isReadable()) {
    8fe0:	lsls	r6, r3, #31
    8fe2:	bpl.n	90a6 <ExFatFile::read(void*, unsigned int)+0xd2>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isContiguous() || isFile()) {
    8fe4:	lsls	r4, r3, #25
    8fe6:	mov	r6, r1
    8fe8:	mov	r9, r2
    8fea:	bpl.w	916a <ExFatFile::read(void*, unsigned int)+0x196>
    if ((m_curPosition + count) > m_validLength) {
    8fee:	ldrd	r0, r1, [r5]
    8ff2:	ldrd	r2, r3, [r5, #16]
    8ff6:	adds.w	sl, r0, r9
    8ffa:	adc.w	fp, r1, #0
    8ffe:	cmp	r3, fp
    9000:	it	eq
    9002:	cmpeq	r2, sl
    9004:	bcc.w	9176 <ExFatFile::read(void*, unsigned int)+0x1a2>
      count = toRead = m_validLength - m_curPosition;
    }
  }
  while (toRead) {
    9008:	cmp.w	r9, #0
    900c:	beq.n	90f8 <ExFatFile::read(void*, unsigned int)+0x124>
    900e:	mov	sl, r5
    9010:	mov	r4, r9
        }
      }
    }
    sector = m_vol->clusterStartSector(m_curCluster) +
             (clusterOffset >> m_vol->bytesPerSectorShift());
    if (sectorOffset != 0 || toRead < m_vol->bytesPerSector()
    9012:	movw	r7, #511	; 0x1ff
    9016:	ldrd	r0, r1, [sl], #24
    if ((m_curPosition + count) > m_validLength) {
      count = toRead = m_validLength - m_curPosition;
    }
  }
  while (toRead) {
    clusterOffset = m_curPosition & m_vol->clusterMask();
    901a:	ldr	r3, [r5, #32]
    901c:	ldr.w	r2, [r3, #1080]	; 0x438
    9020:	and.w	r8, r2, r0
    sectorOffset = clusterOffset & m_vol->sectorMask();
    9024:	ubfx	fp, r8, #0, #9
    if (clusterOffset == 0) {
    9028:	cmp.w	r8, #0
    902c:	bne.n	9104 <ExFatFile::read(void*, unsigned int)+0x130>
      if (m_curPosition == 0) {
    902e:	orrs.w	r2, r0, r1
    9032:	bne.n	9128 <ExFatFile::read(void*, unsigned int)+0x154>
        m_curCluster = isRoot()
                       ? m_vol->rootDirectoryCluster() : m_firstCluster;
    9034:	ldrb.w	r2, [r5, #49]	; 0x31
    9038:	lsls	r1, r2, #25
    903a:	ite	mi
    903c:	ldrmi.w	r1, [r3, #1076]	; 0x434
    9040:	ldrpl	r1, [r5, #28]
      } else if (isContiguous()) {
        m_curCluster++;
    9042:	str	r1, [r5, #24]
          goto fail;
        }
      }
    }
    sector = m_vol->clusterStartSector(m_curCluster) +
             (clusterOffset >> m_vol->bytesPerSectorShift());
    9044:	mov.w	r0, r8, lsr #9
    9048:	subs	r1, #2
    904a:	ldr.w	r2, [r3, #1068]	; 0x42c
    if (sectorOffset != 0 || toRead < m_vol->bytesPerSector()
    904e:	cmp	r4, r7
  bool dataCacheSync() {return m_dataCache.sync();}
  //----------------------------------------------------------------------------
  uint32_t clusterMask() const {return m_clusterMask;}
  uint32_t clusterStartSector(uint32_t cluster) {
    return m_clusterHeapStartSector +
           ((cluster - 2) << m_sectorsPerClusterShift);
    9050:	ldrb.w	lr, [r3, #1093]	; 0x445
          goto fail;
        }
      }
    }
    sector = m_vol->clusterStartSector(m_curCluster) +
             (clusterOffset >> m_vol->bytesPerSectorShift());
    9054:	add	r2, r0
    9056:	lsl.w	r1, r1, lr
    905a:	add	r1, r2
    if (sectorOffset != 0 || toRead < m_vol->bytesPerSector()
    905c:	bls.n	90bc <ExFatFile::read(void*, unsigned int)+0xe8>
    905e:	cmp.w	fp, #0
    9062:	bne.n	90bc <ExFatFile::read(void*, unsigned int)+0xe8>
    9064:	ldr.w	r2, [r3, #540]	; 0x21c
                          || sector == m_vol->dataCacheSector()) {
    9068:	cmp	r1, r2
    906a:	beq.n	90bc <ExFatFile::read(void*, unsigned int)+0xe8>
        goto fail;
      }
      uint8_t* src = cache + sectorOffset;
      memcpy(dst, src, n);
#if USE_MULTI_SECTOR_IO
    } else if (toRead >= 2*m_vol->bytesPerSector()) {
    906c:	cmp.w	r4, #1024	; 0x400
    9070:	bcc.n	9136 <ExFatFile::read(void*, unsigned int)+0x162>
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
      // Limit reads to current cluster.
      uint32_t maxNs = m_vol->sectorsPerCluster()
                       - (clusterOffset >> m_vol->bytesPerSectorShift());
    9072:	mov.w	ip, #1
      }
      uint8_t* src = cache + sectorOffset;
      memcpy(dst, src, n);
#if USE_MULTI_SECTOR_IO
    } else if (toRead >= 2*m_vol->bytesPerSector()) {
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
    9076:	mov.w	r8, r4, lsr #9
      // Limit reads to current cluster.
      uint32_t maxNs = m_vol->sectorsPerCluster()
                       - (clusterOffset >> m_vol->bytesPerSectorShift());
    907a:	lsl.w	lr, ip, lr
    907e:	rsb	r0, r0, lr
    9082:	cmp	r8, r0
    9084:	it	cs
    9086:	movcs	r8, r0
   * \param[in] sector Start sector of the range.
   * \param[in] count Number of sectors in the range.
   * \return true if a sector in the range is cached.
   */
  bool isCached(uint32_t sector, size_t count) {
    return sector <= m_sector && m_sector < (sector + count);
    9088:	cmp	r1, r2
    908a:	bhi.n	9108 <ExFatFile::read(void*, unsigned int)+0x134>
    908c:	add.w	r0, r1, r8
    9090:	cmp	r2, r0
    9092:	bcs.n	9108 <ExFatFile::read(void*, unsigned int)+0x134>
   * \param[in] count Number of sectors to be read.
   * \param[out] dst Pointer to the location that will receive the data.
   * \return true for success or false for failure.
   */
  bool cacheSafeRead(uint32_t sector, uint8_t* dst, size_t count) {
    if (isCached(sector, count) && !sync()) {
    9094:	add.w	r0, r3, #528	; 0x210
    9098:	str	r1, [sp, #4]
    909a:	str	r3, [sp, #0]
    909c:	bl	8de0 <FsCache::sync()>
    90a0:	ldr	r3, [sp, #0]
    90a2:	ldr	r1, [sp, #4]
    90a4:	cbnz	r0, 9108 <ExFatFile::read(void*, unsigned int)+0x134>
    toRead -= n;
  }
  return count - toRead;

 fail:
  m_error |= READ_ERROR;
    90a6:	ldrb.w	r3, [r5, #50]	; 0x32
  return -1;
    90aa:	mov.w	r0, #4294967295
    toRead -= n;
  }
  return count - toRead;

 fail:
  m_error |= READ_ERROR;
    90ae:	orr.w	r3, r3, #2
    90b2:	strb.w	r3, [r5, #50]	; 0x32
  return -1;
}
    90b6:	add	sp, #12
    90b8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
#endif  // USE_EXFAT_BITMAP_CACHE
  }
  void dataCacheDirty() {m_dataCache.dirty();}
  void dataCacheInvalidate() {m_dataCache.invalidate();}
  uint8_t* dataCacheGet(uint32_t sector, uint8_t option) {
    return m_dataCache.get(sector, option);
    90bc:	add.w	r0, r3, #528	; 0x210
    90c0:	movs	r2, #0
    90c2:	bl	8d80 <FsCache::get(unsigned long, unsigned char)>
      if (n > toRead) {
        n = toRead;
      }
      // read sector to cache and copy data to caller
      cache = m_vol->dataCacheGet(sector, FsCache::CACHE_FOR_READ);
      if (!cache) {
    90c6:	cmp	r0, #0
    90c8:	beq.n	90a6 <ExFatFile::read(void*, unsigned int)+0xd2>
    }
    sector = m_vol->clusterStartSector(m_curCluster) +
             (clusterOffset >> m_vol->bytesPerSectorShift());
    if (sectorOffset != 0 || toRead < m_vol->bytesPerSector()
                          || sector == m_vol->dataCacheSector()) {
      n = m_vol->bytesPerSector() - sectorOffset;
    90ca:	rsb	r8, fp, #512	; 0x200
      if (!cache) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* src = cache + sectorOffset;
      memcpy(dst, src, n);
    90ce:	add.w	r1, r0, fp
    90d2:	mov	r0, r6
    90d4:	cmp	r8, r4
    90d6:	it	cs
    90d8:	movcs	r8, r4
    90da:	mov	r2, r8
    90dc:	bl	db14 <memcpy>
    90e0:	mov	r0, r8
    90e2:	movs	r1, #0
      if (!m_vol->cacheSafeRead(sector, dst)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    90e4:	add	r6, r8
    m_curPosition += n;
    90e6:	ldrd	r2, r3, [r5]
    90ea:	adds	r0, r0, r2
    90ec:	adcs	r1, r3
  if (isContiguous() || isFile()) {
    if ((m_curPosition + count) > m_validLength) {
      count = toRead = m_validLength - m_curPosition;
    }
  }
  while (toRead) {
    90ee:	subs.w	r4, r4, r8
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    m_curPosition += n;
    90f2:	strd	r0, r1, [r5]
  if (isContiguous() || isFile()) {
    if ((m_curPosition + count) > m_validLength) {
      count = toRead = m_validLength - m_curPosition;
    }
  }
  while (toRead) {
    90f6:	bne.n	901a <ExFatFile::read(void*, unsigned int)+0x46>
        goto fail;
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // read single sector
      n = m_vol->bytesPerSector();
    90f8:	movs	r4, #0
    }
    dst += n;
    m_curPosition += n;
    toRead -= n;
  }
  return count - toRead;
    90fa:	rsb	r0, r4, r9

 fail:
  m_error |= READ_ERROR;
  return -1;
}
    90fe:	add	sp, #12
    9100:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9104:	ldr	r1, [r5, #24]
    9106:	b.n	9044 <ExFatFile::read(void*, unsigned int)+0x70>
      return false;
    }
    return m_blockDev->readSectors(sector, dst, count);
    9108:	ldr.w	r0, [r3, #532]	; 0x214
    910c:	mov	r2, r6
    910e:	mov	r3, r8
    9110:	ldr.w	lr, [r0]
    9114:	ldr.w	fp, [lr, #16]
    9118:	blx	fp
                       - (clusterOffset >> m_vol->bytesPerSectorShift());
      if (ns > maxNs) {
        ns = maxNs;
      }
      n = ns << m_vol->bytesPerSectorShift();
     if (!m_vol->cacheSafeRead(sector, dst, ns)) {
    911a:	cmp	r0, #0
    911c:	beq.n	90a6 <ExFatFile::read(void*, unsigned int)+0xd2>
      uint32_t maxNs = m_vol->sectorsPerCluster()
                       - (clusterOffset >> m_vol->bytesPerSectorShift());
      if (ns > maxNs) {
        ns = maxNs;
      }
      n = ns << m_vol->bytesPerSectorShift();
    911e:	mov.w	r8, r8, lsl #9
    9122:	movs	r1, #0
    9124:	mov	r0, r8
    9126:	b.n	90e4 <ExFatFile::read(void*, unsigned int)+0x110>
    sectorOffset = clusterOffset & m_vol->sectorMask();
    if (clusterOffset == 0) {
      if (m_curPosition == 0) {
        m_curCluster = isRoot()
                       ? m_vol->rootDirectoryCluster() : m_firstCluster;
      } else if (isContiguous()) {
    9128:	ldrb.w	r2, [r5, #51]	; 0x33
    912c:	lsls	r2, r2, #25
    912e:	bpl.n	9152 <ExFatFile::read(void*, unsigned int)+0x17e>
        m_curCluster++;
    9130:	ldr	r1, [r5, #24]
    9132:	adds	r1, #1
    9134:	b.n	9042 <ExFatFile::read(void*, unsigned int)+0x6e>
  bool cacheSafeRead(uint32_t sector, uint8_t* dst) {
    if (isCached(sector)) {
      memcpy(dst, m_buffer, 512);
      return true;
    }
    return m_blockDev->readSector(sector, dst);
    9136:	ldr.w	r0, [r3, #532]	; 0x214
    913a:	mov	r2, r6
    913c:	ldr	r3, [r0, #0]
    913e:	ldr	r3, [r3, #12]
    9140:	blx	r3
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // read single sector
      n = m_vol->bytesPerSector();
      if (!m_vol->cacheSafeRead(sector, dst)) {
    9142:	cmp	r0, #0
    9144:	beq.n	90a6 <ExFatFile::read(void*, unsigned int)+0xd2>
    9146:	mov.w	r0, #512	; 0x200
    914a:	movs	r1, #0
        goto fail;
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // read single sector
      n = m_vol->bytesPerSector();
    914c:	mov.w	r8, #512	; 0x200
    9150:	b.n	90e4 <ExFatFile::read(void*, unsigned int)+0x110>
        m_curCluster = isRoot()
                       ? m_vol->rootDirectoryCluster() : m_firstCluster;
      } else if (isContiguous()) {
        m_curCluster++;
      } else {
        fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    9152:	mov	r0, r3
    9154:	mov	r2, sl
    9156:	ldr	r1, [r5, #24]
    9158:	bl	9a78 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
    915c:	sxtb	r0, r0
        if (fg < 0) {
    915e:	cmp	r0, #0
    9160:	blt.n	90a6 <ExFatFile::read(void*, unsigned int)+0xd2>
          DBG_FAIL_MACRO;
          goto fail;
        }
        if (fg == 0) {
    9162:	beq.n	917c <ExFatFile::read(void*, unsigned int)+0x1a8>
    9164:	ldr	r3, [r5, #32]
    9166:	ldr	r1, [r5, #24]
    9168:	b.n	9044 <ExFatFile::read(void*, unsigned int)+0x70>

  if (!isReadable()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isContiguous() || isFile()) {
    916a:	ldrb.w	r3, [r0, #49]	; 0x31
    916e:	lsls	r0, r3, #28
    9170:	bmi.w	8fee <ExFatFile::read(void*, unsigned int)+0x1a>
    9174:	b.n	9008 <ExFatFile::read(void*, unsigned int)+0x34>
    if ((m_curPosition + count) > m_validLength) {
      count = toRead = m_validLength - m_curPosition;
    9176:	rsb	r9, r0, r2
    917a:	b.n	9008 <ExFatFile::read(void*, unsigned int)+0x34>
          DBG_FAIL_MACRO;
          goto fail;
        }
        if (fg == 0) {
          // EOF if directory.
          if (isDir()) {
    917c:	ldrb.w	r3, [r5, #49]	; 0x31
    9180:	tst.w	r3, #80	; 0x50
    9184:	bne.n	90fa <ExFatFile::read(void*, unsigned int)+0x126>
    9186:	b.n	90a6 <ExFatFile::read(void*, unsigned int)+0xd2>

00009188 <ExFatFile::peek()>:
  }
  fname->len = len;
  return true;
}
//------------------------------------------------------------------------------
int ExFatFile::peek() {
    9188:	push	{r4, r5, r6, r7, lr}
    918a:	sub	sp, #12
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
    918c:	movs	r2, #1
    918e:	mov	r4, r0
  uint64_t curPosition = m_curPosition;
  uint32_t curCluster = m_curCluster;
    9190:	ldr	r5, [r0, #24]
    9192:	add.w	r1, sp, #7
  fname->len = len;
  return true;
}
//------------------------------------------------------------------------------
int ExFatFile::peek() {
  uint64_t curPosition = m_curPosition;
    9196:	ldrd	r6, r7, [r0]
    919a:	bl	8fd4 <ExFatFile::read(void*, unsigned int)>
    919e:	cmp	r0, #1
  uint32_t curCluster = m_curCluster;
  int c = read();
  m_curPosition = curPosition;
  m_curCluster = curCluster;
    91a0:	str	r5, [r4, #24]
    91a2:	ite	eq
    91a4:	ldrbeq.w	r0, [sp, #7]
    91a8:	movne.w	r0, #4294967295
//------------------------------------------------------------------------------
int ExFatFile::peek() {
  uint64_t curPosition = m_curPosition;
  uint32_t curCluster = m_curCluster;
  int c = read();
  m_curPosition = curPosition;
    91ac:	strd	r6, r7, [r4]
  m_curCluster = curCluster;
  return c;
}
    91b0:	add	sp, #12
    91b2:	pop	{r4, r5, r6, r7, pc}

000091b4 <ExFatFile::seekSet(unsigned long long)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::seekSet(uint64_t pos) {
    91b4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    91b8:	ldrb.w	lr, [r0, #49]	; 0x31
    91bc:	sub	sp, #20
    91be:	mov	r4, r0
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
    91c0:	ldr	r5, [r0, #24]
  // error if file not open
  if (!isOpen()) {
    91c2:	cmp.w	lr, #0
    91c6:	beq.n	9236 <ExFatFile::seekSet(unsigned long long)+0x82>
    91c8:	mov	r6, r2
    91ca:	mov	r7, r3
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    91cc:	ldrd	r0, r1, [r0]
    91d0:	cmp	r1, r3
    91d2:	it	eq
    91d4:	cmpeq	r0, r2
    91d6:	beq.n	92a4 <ExFatFile::seekSet(unsigned long long)+0xf0>
    return true;
  }
  if (pos == 0) {
    91d8:	orrs.w	r3, r6, r7
    91dc:	bne.n	9240 <ExFatFile::seekSet(unsigned long long)+0x8c>
    // set position to start of file
    m_curCluster = 0;
    91de:	movs	r3, #0
    91e0:	str	r3, [r4, #24]
    }
  }

 done:
  m_curPosition = pos;
  return true;
    91e2:	movs	r0, #1
      goto fail;
    }
  }

 done:
  m_curPosition = pos;
    91e4:	strd	r6, r7, [r4]
  return true;

 fail:
  m_curCluster = tmp;
  return false;
}
    91e8:	add	sp, #20
    91ea:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (isContiguous()) {
    m_curCluster = m_firstCluster + nNew;
    goto done;
  }
  // calculate cluster index for current position
  nCur = (m_curPosition - 1) >> m_vol->bytesPerClusterShift();
    91ee:	adds.w	r2, r0, #4294967295
    91f2:	adc.w	r3, r1, #4294967295
    91f6:	lsr.w	ip, r2, ip
    91fa:	lsl.w	r8, r3, r8
    91fe:	lsr.w	sl, r3, sl
  if (nNew < nCur || m_curPosition == 0) {
    9202:	orrs.w	r3, r0, r1
  if (isContiguous()) {
    m_curCluster = m_firstCluster + nNew;
    goto done;
  }
  // calculate cluster index for current position
  nCur = (m_curPosition - 1) >> m_vol->bytesPerClusterShift();
    9206:	orr.w	ip, ip, r8
    920a:	orr.w	ip, ip, sl
  if (nNew < nCur || m_curPosition == 0) {
    920e:	beq.n	92a8 <ExFatFile::seekSet(unsigned long long)+0xf4>
    9210:	cmp	fp, ip
    9212:	bcc.n	92a8 <ExFatFile::seekSet(unsigned long long)+0xf4>
    // must follow chain from first cluster
    m_curCluster = isRoot() ? m_vol->rootDirectoryCluster() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
    9214:	rsb	fp, ip, fp
    9218:	mov	r9, r5
  }
  while (nNew--) {
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
    921a:	add.w	r8, r4, #24
    921e:	mov	r5, fp
    9220:	mov	r2, r8
    m_curCluster = isRoot() ? m_vol->rootDirectoryCluster() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    9222:	cmp	r5, #0
    9224:	beq.n	91e2 <ExFatFile::seekSet(unsigned long long)+0x2e>
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
    9226:	ldr	r1, [r4, #24]
    9228:	subs	r5, #1
    922a:	ldr	r0, [r4, #32]
    922c:	bl	9a78 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
    9230:	cmp	r0, #0
    9232:	bne.n	9220 <ExFatFile::seekSet(unsigned long long)+0x6c>
    9234:	mov	r5, r9
  m_curPosition = pos;
  return true;

 fail:
  m_curCluster = tmp;
  return false;
    9236:	movs	r0, #0
 done:
  m_curPosition = pos;
  return true;

 fail:
  m_curCluster = tmp;
    9238:	str	r5, [r4, #24]
  return false;
}
    923a:	add	sp, #20
    923c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (pos == 0) {
    // set position to start of file
    m_curCluster = 0;
    goto done;
  }
  if (isFile()) {
    9240:	tst.w	lr, #8
    9244:	bne.n	9296 <ExFatFile::seekSet(unsigned long long)+0xe2>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // calculate cluster index for new position
  nNew = (pos - 1) >> m_vol->bytesPerClusterShift();
    9246:	ldr	r3, [r4, #32]
    9248:	adds.w	r8, r6, #4294967295
    924c:	ldrb.w	ip, [r3, #1093]	; 0x445
    9250:	adc.w	r9, r7, #4294967295
    9254:	mov	sl, r8
    9256:	str	r3, [sp, #12]
    9258:	add.w	ip, ip, #9
    925c:	mov	fp, r9
  if (isContiguous()) {
    925e:	ldrb.w	r9, [r4, #51]	; 0x33
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // calculate cluster index for new position
  nNew = (pos - 1) >> m_vol->bytesPerClusterShift();
    9262:	uxtb.w	ip, ip
  if (isContiguous()) {
    9266:	tst.w	r9, #64	; 0x40
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // calculate cluster index for new position
  nNew = (pos - 1) >> m_vol->bytesPerClusterShift();
    926a:	rsb	r8, ip, #32
    926e:	lsr.w	r2, sl, ip
    9272:	strd	sl, fp, [sp]
    9276:	ldr	r3, [sp, #4]
    9278:	sub.w	sl, ip, #32
    927c:	lsl.w	fp, r3, r8
    9280:	lsr.w	r3, r3, sl
    9284:	orr.w	r2, r2, fp
    9288:	orr.w	fp, r2, r3
  if (isContiguous()) {
    928c:	beq.n	91ee <ExFatFile::seekSet(unsigned long long)+0x3a>
    m_curCluster = m_firstCluster + nNew;
    928e:	ldr	r3, [r4, #28]
    9290:	add	r3, fp
    9292:	str	r3, [r4, #24]
    goto done;
    9294:	b.n	91e2 <ExFatFile::seekSet(unsigned long long)+0x2e>
    // set position to start of file
    m_curCluster = 0;
    goto done;
  }
  if (isFile()) {
    if (pos > m_validLength) {
    9296:	ldrd	r2, r3, [r4, #16]
    929a:	cmp	r3, r7
    929c:	it	eq
    929e:	cmpeq	r2, r6
    92a0:	bcc.n	9236 <ExFatFile::seekSet(unsigned long long)+0x82>
    92a2:	b.n	9246 <ExFatFile::seekSet(unsigned long long)+0x92>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    return true;
    92a4:	movs	r0, #1
    92a6:	b.n	923a <ExFatFile::seekSet(unsigned long long)+0x86>
  }
  // calculate cluster index for current position
  nCur = (m_curPosition - 1) >> m_vol->bytesPerClusterShift();
  if (nNew < nCur || m_curPosition == 0) {
    // must follow chain from first cluster
    m_curCluster = isRoot() ? m_vol->rootDirectoryCluster() : m_firstCluster;
    92a8:	tst.w	lr, #64	; 0x40
    92ac:	bne.n	92b4 <ExFatFile::seekSet(unsigned long long)+0x100>
    92ae:	ldr	r3, [r4, #28]
    92b0:	str	r3, [r4, #24]
    92b2:	b.n	9218 <ExFatFile::seekSet(unsigned long long)+0x64>
    92b4:	ldr	r3, [sp, #12]
    92b6:	ldr.w	r3, [r3, #1076]	; 0x434
    92ba:	b.n	92b0 <ExFatFile::seekSet(unsigned long long)+0xfc>

000092bc <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)>:
 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::openRootFile(ExFatFile* dir, const ExChar_t* name,
                          uint8_t nameLength, oflag_t oflag) {
    92bc:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    92c0:	mov	sl, r3
    92c2:	sub	sp, #76	; 0x4c
  uint8_t freeCount = 0;
  uint8_t freeNeed;
  bool inSet = false;

  // error if already open
  if (isOpen() || !dir->isDir()) {
    92c4:	ldrb.w	r3, [r0, #49]	; 0x31
 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::openRootFile(ExFatFile* dir, const ExChar_t* name,
                          uint8_t nameLength, oflag_t oflag) {
    92c8:	mov	r5, r0
    92ca:	str	r2, [sp, #0]
  uint8_t freeCount = 0;
  uint8_t freeNeed;
  bool inSet = false;

  // error if already open
  if (isOpen() || !dir->isDir()) {
    92cc:	cbnz	r3, 92da <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
    92ce:	ldrb.w	r3, [r1, #49]	; 0x31
    92d2:	mov	r6, r1
    92d4:	tst.w	r3, #80	; 0x50
    92d8:	bne.n	92ec <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x30>
  return sync();
#endif  // READ_ONLY
 fail:

  // close file
  m_attributes = FILE_ATTR_CLOSED;
    92da:	movs	r3, #0
  m_flags = 0;
  return false;
    92dc:	mov	r0, r3
  return sync();
#endif  // READ_ONLY
 fail:

  // close file
  m_attributes = FILE_ATTR_CLOSED;
    92de:	strb.w	r3, [r5, #49]	; 0x31
  m_flags = 0;
    92e2:	strb.w	r3, [r5, #51]	; 0x33
  return false;
}
    92e6:	add	sp, #76	; 0x4c
    92e8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  // error if already open
  if (isOpen() || !dir->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  switch (oflag & O_ACCMODE) {
    92ec:	ldr	r3, [sp, #112]	; 0x70
    92ee:	and.w	r3, r3, #3
    92f2:	cmp	r3, #1
    92f4:	beq.n	9304 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x48>
    92f6:	cmp	r3, #2
    92f8:	beq.w	950e <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x252>
    92fc:	cmp	r3, #0
    92fe:	bne.n	92da <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
    9300:	movs	r3, #1
    9302:	b.n	9306 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x4a>
    9304:	movs	r3, #2
      break;
    default:
      DBG_FAIL_MACRO;
      goto fail;
  }
  modeFlags |= oflag & O_APPEND ? FILE_FLAG_APPEND : 0;
    9306:	ldr	r2, [sp, #112]	; 0x70
    9308:	and.w	r2, r2, #8
    930c:	orrs	r3, r2
    930e:	str	r3, [sp, #4]
  if (name) {
    9310:	ldr	r3, [sp, #0]
    9312:	cmp	r3, #0
    9314:	beq.w	9512 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x256>
    nameHash = exFatHashName(name, nameLength, 0);
    9318:	mov	r0, r3
    931a:	movs	r2, #0
    931c:	mov	r1, sl
    931e:	bl	9ce8 <exFatHashName(char const*, unsigned int, unsigned short)>
bool ExFatFile::seekSet(uint64_t pos) {
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
  // error if file not open
  if (!isOpen()) {
    9322:	ldrb.w	r3, [r6, #49]	; 0x31
      DBG_FAIL_MACRO;
      goto fail;
  }
  modeFlags |= oflag & O_APPEND ? FILE_FLAG_APPEND : 0;
  if (name) {
    nameHash = exFatHashName(name, nameLength, 0);
    9326:	str	r0, [sp, #8]
bool ExFatFile::seekSet(uint64_t pos) {
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
  // error if file not open
  if (!isOpen()) {
    9328:	cbz	r3, 933e <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x82>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    932a:	ldrd	r2, r3, [r6]
    932e:	orrs	r3, r2
    9330:	beq.n	933e <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x82>
    return true;
  }
  if (pos == 0) {
    // set position to start of file
    m_curCluster = 0;
    9332:	movs	r1, #0
      goto fail;
    }
  }

 done:
  m_curPosition = pos;
    9334:	movs	r2, #0
    9336:	movs	r3, #0
  if (pos == m_curPosition) {
    return true;
  }
  if (pos == 0) {
    // set position to start of file
    m_curCluster = 0;
    9338:	str	r1, [r6, #24]
      goto fail;
    }
  }

 done:
  m_curPosition = pos;
    933a:	strd	r2, r3, [r6]
  modeFlags |= oflag & O_APPEND ? FILE_FLAG_APPEND : 0;
  if (name) {
    nameHash = exFatHashName(name, nameLength, 0);
    dir->rewind();
  }
  freeNeed = 2 + (nameLength + 14)/15;
    933e:	add.w	r3, sl, #14
    9342:	ldr	r1, [pc, #736]	; (9624 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x368>)
  DirStream_t* dirStream;
  DirName_t*   dirName;
  uint8_t buf[32];
  uint8_t freeCount = 0;
  uint8_t freeNeed;
  bool inSet = false;
    9344:	mov.w	r9, #0
  modeFlags |= oflag & O_APPEND ? FILE_FLAG_APPEND : 0;
  if (name) {
    nameHash = exFatHashName(name, nameLength, 0);
    dir->rewind();
  }
  freeNeed = 2 + (nameLength + 14)/15;
    9348:	smull	r2, r1, r1, r3
    934c:	asrs	r2, r3, #31

  DirFile_t*   dirFile;
  DirStream_t* dirStream;
  DirName_t*   dirName;
  uint8_t buf[32];
  uint8_t freeCount = 0;
    934e:	mov	r4, r9
}
//------------------------------------------------------------------------------
bool ExFatFile::openRootFile(ExFatFile* dir, const ExChar_t* name,
                          uint8_t nameLength, oflag_t oflag) {
  int n;
  uint8_t nameOffset = 0;
    9350:	mov	r7, r9
  modeFlags |= oflag & O_APPEND ? FILE_FLAG_APPEND : 0;
  if (name) {
    nameHash = exFatHashName(name, nameLength, 0);
    dir->rewind();
  }
  freeNeed = 2 + (nameLength + 14)/15;
    9352:	add	r3, r1
    9354:	rsb	r3, r2, r3, asr #3
    9358:	uxtb	r3, r3
    935a:	str	r3, [sp, #12]
    935c:	adds	r3, #2
    935e:	uxtb.w	fp, r3

  while (1) {
    n = dir->read(buf, 32);
    9362:	movs	r2, #32
    9364:	add	r1, sp, #40	; 0x28
    9366:	mov	r0, r6
    9368:	bl	8fd4 <ExFatFile::read(void*, unsigned int)>
    if (n == 0) {
    936c:	cmp	r0, #0
    936e:	beq.n	93ec <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x130>
      goto create;
    }
    if (n != 32) {
    9370:	cmp	r0, #32
    9372:	bne.n	92da <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(buf[0] & 0x80)) {
    9374:	ldrb.w	r3, [sp, #40]	; 0x28
    9378:	lsls	r2, r3, #24
    937a:	bmi.n	944a <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x18e>
      if (freeCount == 0) {
    937c:	cmp	r4, #0
    937e:	bne.n	9444 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x188>
        freePos.position = dir->curPosition() - 32;
    9380:	ldr	r2, [r6, #0]
        freePos.cluster = dir->curCluster();
    9382:	ldr	r1, [r6, #24]
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(buf[0] & 0x80)) {
      if (freeCount == 0) {
        freePos.position = dir->curPosition() - 32;
    9384:	subs	r2, #32
        freePos.cluster = dir->curCluster();
    9386:	str	r1, [sp, #28]
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(buf[0] & 0x80)) {
      if (freeCount == 0) {
        freePos.position = dir->curPosition() - 32;
    9388:	str	r2, [sp, #32]
        freePos.cluster = dir->curCluster();
      }
      if (freeCount < freeNeed) {
        freeCount++;
    938a:	adds	r4, #1
    938c:	uxtb	r4, r4
      }
      if (!buf[0]) {
    938e:	cbz	r3, 93ec <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x130>
      if (buf[0] != EXFAT_TYPE_FILE) {
        continue;
      }
      inSet = true;
    }
    switch (buf[0]) {
    9390:	cmp	r3, #192	; 0xc0
    9392:	beq.w	94bc <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x200>
    9396:	cmp	r3, #193	; 0xc1
    9398:	beq.n	9460 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1a4>
    939a:	cmp	r3, #133	; 0x85
    939c:	bne.n	9362 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xa6>
      case EXFAT_TYPE_FILE:
        memset(this, 0, sizeof(ExFatFile));
    939e:	movs	r2, #56	; 0x38
    93a0:	movs	r1, #0
    93a2:	mov	r0, r5
    93a4:	bl	10bfc <memset>
        dirFile = reinterpret_cast<DirFile_t*>(buf);
        m_setCount = dirFile->setCount;
        m_attributes = getLe16(dirFile->attributes) & FILE_ATTR_COPY;
    93a8:	ldrb.w	r3, [sp, #44]	; 0x2c
    }
    switch (buf[0]) {
      case EXFAT_TYPE_FILE:
        memset(this, 0, sizeof(ExFatFile));
        dirFile = reinterpret_cast<DirFile_t*>(buf);
        m_setCount = dirFile->setCount;
    93ac:	ldrb.w	r2, [sp, #41]	; 0x29
        m_attributes = getLe16(dirFile->attributes) & FILE_ATTR_COPY;
        if (!(m_attributes & EXFAT_ATTRIB_DIRECTORY)) {
    93b0:	lsls	r0, r3, #27
    dir->rewind();
  }
  freeNeed = 2 + (nameLength + 14)/15;

  while (1) {
    n = dir->read(buf, 32);
    93b2:	mov	r0, r6
    }
    switch (buf[0]) {
      case EXFAT_TYPE_FILE:
        memset(this, 0, sizeof(ExFatFile));
        dirFile = reinterpret_cast<DirFile_t*>(buf);
        m_setCount = dirFile->setCount;
    93b4:	strb.w	r2, [r5, #48]	; 0x30
        m_attributes = getLe16(dirFile->attributes) & FILE_ATTR_COPY;
    93b8:	and.w	r2, r3, #55	; 0x37
        if (!(m_attributes & EXFAT_ATTRIB_DIRECTORY)) {
          m_attributes |= FILE_ATTR_FILE;
    93bc:	it	pl
    93be:	orrpl.w	r2, r2, #8
    93c2:	strb.w	r2, [r5, #49]	; 0x31
        }
        m_vol = dir->volume();

        m_dirPos.cluster = dir->curCluster();
        m_dirPos.position = dir->curPosition() - 32;
    93c6:	ldr	r3, [r6, #0]
    93c8:	ldr	r1, [r6, #32]
    93ca:	ldr	r2, [r6, #24]
    93cc:	subs	r3, #32
        m_setCount = dirFile->setCount;
        m_attributes = getLe16(dirFile->attributes) & FILE_ATTR_COPY;
        if (!(m_attributes & EXFAT_ATTRIB_DIRECTORY)) {
          m_attributes |= FILE_ATTR_FILE;
        }
        m_vol = dir->volume();
    93ce:	str	r1, [r5, #32]
    dir->rewind();
  }
  freeNeed = 2 + (nameLength + 14)/15;

  while (1) {
    n = dir->read(buf, 32);
    93d0:	add	r1, sp, #40	; 0x28
        if (!(m_attributes & EXFAT_ATTRIB_DIRECTORY)) {
          m_attributes |= FILE_ATTR_FILE;
        }
        m_vol = dir->volume();

        m_dirPos.cluster = dir->curCluster();
    93d2:	str	r2, [r5, #36]	; 0x24
    dir->rewind();
  }
  freeNeed = 2 + (nameLength + 14)/15;

  while (1) {
    n = dir->read(buf, 32);
    93d4:	movs	r2, #32
          m_attributes |= FILE_ATTR_FILE;
        }
        m_vol = dir->volume();

        m_dirPos.cluster = dir->curCluster();
        m_dirPos.position = dir->curPosition() - 32;
    93d6:	str	r3, [r5, #40]	; 0x28
        m_dirPos.isContiguous = dir->isContiguous();
    93d8:	ldrb.w	r3, [r6, #51]	; 0x33
    93dc:	ubfx	r3, r3, #6, #1
    93e0:	strb.w	r3, [r5, #44]	; 0x2c
    dir->rewind();
  }
  freeNeed = 2 + (nameLength + 14)/15;

  while (1) {
    n = dir->read(buf, 32);
    93e4:	bl	8fd4 <ExFatFile::read(void*, unsigned int)>
    if (n == 0) {
    93e8:	cmp	r0, #0
    93ea:	bne.n	9370 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xb4>
#if READ_ONLY
  DBG_FAIL_MACRO;
  goto fail;
#else  // READ_ONLY
  // don't create unless O_CREAT and write
  if (!(oflag & O_CREAT) || !(modeFlags & FILE_FLAG_WRITE) || !name) {
    93ec:	ldr	r3, [sp, #112]	; 0x70
    93ee:	lsls	r1, r3, #22
    93f0:	bpl.w	92da <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
    93f4:	ldr	r3, [sp, #4]
    93f6:	lsls	r2, r3, #30
    93f8:	bpl.w	92da <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
    93fc:	ldr	r3, [sp, #0]
    93fe:	cmp	r3, #0
    9400:	beq.w	92da <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (freeCount < freeNeed) {
    9404:	cmp	r4, fp
    9406:	bcc.n	9422 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x166>
    9408:	b.n	9518 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x25c>
        goto fail;
      }
      dir->m_curCluster = curCluster;
      continue;
    }
    if (n != 32) {
    940a:	cmp	r0, #32
    940c:	bne.w	92da <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (freeCount == 0) {
    9410:	cbnz	r4, 941c <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x160>
      freePos.position = dir->curPosition() - 32;
    9412:	ldr	r2, [r6, #0]
      freePos.cluster = dir->curCluster();
    9414:	ldr	r1, [r6, #24]
    if (n != 32) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (freeCount == 0) {
      freePos.position = dir->curPosition() - 32;
    9416:	subs	r2, #32
      freePos.cluster = dir->curCluster();
    9418:	str	r1, [sp, #28]
    if (n != 32) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (freeCount == 0) {
      freePos.position = dir->curPosition() - 32;
    941a:	str	r2, [sp, #32]
      freePos.cluster = dir->curCluster();
    }
    freeCount++;
    941c:	uxtb	r4, r3
  // don't create unless O_CREAT and write
  if (!(oflag & O_CREAT) || !(modeFlags & FILE_FLAG_WRITE) || !name) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (freeCount < freeNeed) {
    941e:	cmp	fp, r4
    9420:	bls.n	9518 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x25c>
    n = dir->read(buf, 32);
    9422:	movs	r2, #32
    9424:	add	r1, sp, #40	; 0x28
    9426:	mov	r0, r6
    9428:	bl	8fd4 <ExFatFile::read(void*, unsigned int)>
    }
    if (freeCount == 0) {
      freePos.position = dir->curPosition() - 32;
      freePos.cluster = dir->curCluster();
    }
    freeCount++;
    942c:	adds	r3, r4, #1
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (freeCount < freeNeed) {
    n = dir->read(buf, 32);
    if (n == 0) {
    942e:	cmp	r0, #0
    9430:	bne.n	940a <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x14e>
      curCluster = dir->m_curCluster;
      if (!dir->addDirCluster()) {
    9432:	mov	r0, r6
    goto fail;
  }
  while (freeCount < freeNeed) {
    n = dir->read(buf, 32);
    if (n == 0) {
      curCluster = dir->m_curCluster;
    9434:	ldr	r7, [r6, #24]
      if (!dir->addDirCluster()) {
    9436:	bl	a0b0 <ExFatFile::addDirCluster()>
    943a:	cmp	r0, #0
    943c:	beq.w	92da <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
        DBG_FAIL_MACRO;
        goto fail;
      }
      dir->m_curCluster = curCluster;
    9440:	str	r7, [r6, #24]
      continue;
    9442:	b.n	941e <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x162>
    if (!(buf[0] & 0x80)) {
      if (freeCount == 0) {
        freePos.position = dir->curPosition() - 32;
        freePos.cluster = dir->curCluster();
      }
      if (freeCount < freeNeed) {
    9444:	cmp	r4, fp
    9446:	bcs.n	938e <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xd2>
    9448:	b.n	938a <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xce>
        freeCount++;
      }
      if (!buf[0]) {
        goto create;
      }
    } else if (!inSet) {
    944a:	cmp.w	r9, #0
    944e:	bne.n	9390 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xd4>
      if (freeCount < freeNeed) {
        freeCount = 0;
    9450:	cmp	r4, fp
    9452:	it	cc
    9454:	movcc	r4, #0
      }
      if (buf[0] != EXFAT_TYPE_FILE) {
    9456:	cmp	r3, #133	; 0x85
    9458:	bne.n	9362 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xa6>
        continue;
      }
      inSet = true;
    945a:	mov.w	r9, #1
    945e:	b.n	939e <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xe2>
        }
        break;

      case EXFAT_TYPE_NAME:
        dirName = reinterpret_cast<DirName_t*>(buf);
        nCmp = nameLength - nameOffset;
    9460:	rsb	r8, r7, sl
        if (nCmp > 15) {
          nCmp = 15;
        }
        if (!exFatCmpName(dirName, name, nameOffset, nCmp)) {
    9464:	mov	r2, r7
    9466:	ldr	r1, [sp, #0]
    9468:	add	r0, sp, #40	; 0x28
        }
        break;

      case EXFAT_TYPE_NAME:
        dirName = reinterpret_cast<DirName_t*>(buf);
        nCmp = nameLength - nameOffset;
    946a:	uxtb.w	r8, r8
    946e:	cmp.w	r8, #15
    9472:	it	cs
    9474:	movcs.w	r8, #15
        if (nCmp > 15) {
          nCmp = 15;
        }
        if (!exFatCmpName(dirName, name, nameOffset, nCmp)) {
    9478:	mov	r3, r8
    947a:	bl	9c8c <exFatCmpName(DirName_t const*, char const*, unsigned int, unsigned int)>
    947e:	cmp	r0, #0
    9480:	beq.n	94fc <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x240>
          inSet = false;
          break;
        }
        nameOffset += nCmp;
    9482:	add	r7, r8
    9484:	uxtb	r7, r7

        if (nameOffset == nameLength) {
    9486:	cmp	sl, r7
    9488:	bne.w	9362 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xa6>
    }
  }

 found:
  // Don't open if create only.
  if (oflag & O_EXCL) {
    948c:	ldr	r3, [sp, #112]	; 0x70
    948e:	lsls	r3, r3, #20
    9490:	bmi.w	92da <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Write, truncate, or at end is an error for a directory or read-only file.
  if ((oflag & (O_TRUNC | O_AT_END)) || (m_flags & FILE_FLAG_WRITE)) {
    9494:	ldr	r3, [sp, #112]	; 0x70
    9496:	tst.w	r3, #17408	; 0x4400
    949a:	bne.w	95de <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x322>
    949e:	ldrb.w	r3, [r5, #51]	; 0x33
    94a2:	lsls	r7, r3, #30
    94a4:	bmi.w	95de <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x322>
      goto fail;
    }
  }

#if !READ_ONLY
  if (oflag & O_TRUNC) {
    94a8:	ldr	r3, [sp, #112]	; 0x70
    94aa:	lsls	r3, r3, #21
    94ac:	bmi.w	92da <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
    }
    if (!truncate(0)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if ((oflag & O_AT_END) && !seekSet(fileSize())) {
    94b0:	ldr	r3, [sp, #112]	; 0x70
    94b2:	lsls	r0, r3, #17
    94b4:	bmi.w	9628 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x36c>
    DBG_FAIL_MACRO;
    goto fail;
  }
#endif  // READ_ONLY
  return true;
    94b8:	movs	r0, #1
    94ba:	b.n	92e6 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x2a>
        break;

      case EXFAT_TYPE_STREAM:
        dirStream = reinterpret_cast<DirStream_t*>(buf);
        m_flags = modeFlags;
        if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
    94bc:	ldrb.w	r3, [sp, #41]	; 0x29
        m_dirPos.isContiguous = dir->isContiguous();
        break;

      case EXFAT_TYPE_STREAM:
        dirStream = reinterpret_cast<DirStream_t*>(buf);
        m_flags = modeFlags;
    94c0:	ldr	r2, [sp, #4]
        if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
    94c2:	lsls	r1, r3, #30
        m_dirPos.isContiguous = dir->isContiguous();
        break;

      case EXFAT_TYPE_STREAM:
        dirStream = reinterpret_cast<DirStream_t*>(buf);
        m_flags = modeFlags;
    94c4:	strb.w	r2, [r5, #51]	; 0x33
        if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
    94c8:	bpl.n	94d2 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x216>
          m_flags |= FILE_FLAG_CONTIGUOUS;
    94ca:	orr.w	r3, r2, #64	; 0x40
    94ce:	strb.w	r3, [r5, #51]	; 0x33
        }
        nameOffset = 0;
        m_validLength = getLe64(dirStream->validLength);
        m_firstCluster = getLe32(dirStream->firstCluster);
    94d2:	ldr	r1, [sp, #60]	; 0x3c
        m_flags = modeFlags;
        if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
          m_flags |= FILE_FLAG_CONTIGUOUS;
        }
        nameOffset = 0;
        m_validLength = getLe64(dirStream->validLength);
    94d4:	ldrd	r2, r3, [sp, #48]	; 0x30
        m_firstCluster = getLe32(dirStream->firstCluster);
    94d8:	str	r1, [r5, #28]
        m_flags = modeFlags;
        if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
          m_flags |= FILE_FLAG_CONTIGUOUS;
        }
        nameOffset = 0;
        m_validLength = getLe64(dirStream->validLength);
    94da:	strd	r2, r3, [r5, #16]
        m_firstCluster = getLe32(dirStream->firstCluster);
        m_dataLength = getLe64(dirStream->dataLength);
    94de:	ldrd	r0, r1, [sp, #64]	; 0x40
        if (!name) {
    94e2:	ldr	r3, [sp, #0]
          m_flags |= FILE_FLAG_CONTIGUOUS;
        }
        nameOffset = 0;
        m_validLength = getLe64(dirStream->validLength);
        m_firstCluster = getLe32(dirStream->firstCluster);
        m_dataLength = getLe64(dirStream->dataLength);
    94e4:	strd	r0, r1, [r5, #8]
        if (!name) {
    94e8:	cmp	r3, #0
    94ea:	beq.n	948c <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1d0>
          goto found;
        }
        if (nameLength != dirStream->nameLength ||
    94ec:	ldrb.w	r3, [sp, #43]	; 0x2b
    94f0:	cmp	r3, sl
    94f2:	beq.n	9500 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x244>
            nameHash != getLe16(dirStream->nameHash)) {
          inSet = false;
    94f4:	mov.w	r9, #0
        dirStream = reinterpret_cast<DirStream_t*>(buf);
        m_flags = modeFlags;
        if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
          m_flags |= FILE_FLAG_CONTIGUOUS;
        }
        nameOffset = 0;
    94f8:	mov	r7, r9
    94fa:	b.n	9362 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xa6>
        nCmp = nameLength - nameOffset;
        if (nCmp > 15) {
          nCmp = 15;
        }
        if (!exFatCmpName(dirName, name, nameOffset, nCmp)) {
          inSet = false;
    94fc:	mov	r9, r0
    94fe:	b.n	9362 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xa6>
        m_firstCluster = getLe32(dirStream->firstCluster);
        m_dataLength = getLe64(dirStream->dataLength);
        if (!name) {
          goto found;
        }
        if (nameLength != dirStream->nameLength ||
    9500:	ldrh.w	r3, [sp, #44]	; 0x2c
    9504:	ldr	r2, [sp, #8]
    9506:	cmp	r3, r2
    9508:	bne.n	94f4 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x238>
        dirStream = reinterpret_cast<DirStream_t*>(buf);
        m_flags = modeFlags;
        if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
          m_flags |= FILE_FLAG_CONTIGUOUS;
        }
        nameOffset = 0;
    950a:	movs	r7, #0
    950c:	b.n	9362 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xa6>
  // error if already open
  if (isOpen() || !dir->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  switch (oflag & O_ACCMODE) {
    950e:	movs	r3, #3
    9510:	b.n	9306 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x4a>
                          uint8_t nameLength, oflag_t oflag) {
  int n;
  uint8_t nameOffset = 0;
  uint8_t nCmp;
  uint8_t modeFlags;
  uint16_t nameHash = 0;
    9512:	ldr	r3, [sp, #0]
    9514:	str	r3, [sp, #8]
    9516:	b.n	933e <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x82>
      freePos.cluster = dir->curCluster();
    }
    freeCount++;
  }

  freePos.isContiguous = dir->isContiguous();
    9518:	ldrb.w	r3, [r6, #51]	; 0x33
  memset(this, 0, sizeof(ExFatFile));
    951c:	movs	r1, #0
    951e:	movs	r2, #56	; 0x38
    9520:	mov	r0, r5
      freePos.cluster = dir->curCluster();
    }
    freeCount++;
  }

  freePos.isContiguous = dir->isContiguous();
    9522:	ubfx	r3, r3, #6, #1
  memset(this, 0, sizeof(ExFatFile));
  m_vol = dir->volume();
  m_attributes = FILE_ATTR_FILE;
  m_dirPos = freePos;
  for (uint8_t i = 0; i < freeNeed; i++) {
    9526:	mov	r7, r1

  freePos.isContiguous = dir->isContiguous();
  memset(this, 0, sizeof(ExFatFile));
  m_vol = dir->volume();
  m_attributes = FILE_ATTR_FILE;
  m_dirPos = freePos;
    9528:	add.w	r8, sp, #28
    952c:	add.w	r4, r5, #36	; 0x24
      freePos.cluster = dir->curCluster();
    }
    freeCount++;
  }

  freePos.isContiguous = dir->isContiguous();
    9530:	strb.w	r3, [sp, #36]	; 0x24
  memset(this, 0, sizeof(ExFatFile));
    9534:	bl	10bfc <memset>
    }
    memset(cache, 0 , 32);
    if (i == 0) {
      dirFile = reinterpret_cast<DirFile_t*>(cache);
      dirFile->type = EXFAT_TYPE_FILE;
      m_setCount = freeNeed - 1;
    9538:	ldr	r2, [sp, #12]
    953a:	ldr	r3, [r6, #32]
    953c:	add.w	r6, sl, #30
    9540:	add.w	r9, r2, #1
  }

  freePos.isContiguous = dir->isContiguous();
  memset(this, 0, sizeof(ExFatFile));
  m_vol = dir->volume();
  m_attributes = FILE_ATTR_FILE;
    9544:	movs	r2, #8
    freeCount++;
  }

  freePos.isContiguous = dir->isContiguous();
  memset(this, 0, sizeof(ExFatFile));
  m_vol = dir->volume();
    9546:	str	r3, [r5, #32]
    9548:	uxtb	r6, r6
  m_attributes = FILE_ATTR_FILE;
    954a:	strb.w	r2, [r5, #49]	; 0x31
    }
    memset(cache, 0 , 32);
    if (i == 0) {
      dirFile = reinterpret_cast<DirFile_t*>(cache);
      dirFile->type = EXFAT_TYPE_FILE;
      m_setCount = freeNeed - 1;
    954e:	uxtb.w	r9, r9
    9552:	str.w	sl, [sp, #12]
    9556:	ldr.w	sl, [sp]

  freePos.isContiguous = dir->isContiguous();
  memset(this, 0, sizeof(ExFatFile));
  m_vol = dir->volume();
  m_attributes = FILE_ATTR_FILE;
  m_dirPos = freePos;
    955a:	ldmia.w	r8, {r0, r1, r2}
    955e:	stmia.w	r4, {r0, r1, r2}
    9562:	mov	r0, r3
      if (1 != m_vol->dirSeek(&freePos, 32)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    cache = m_vol->dirCache(&freePos, FsCache::CACHE_FOR_WRITE);
    9564:	movs	r2, #1
    9566:	mov	r1, r8
    9568:	bl	99e8 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
    if (!cache || (cache[0] & 0x80)) {
    956c:	mov	r4, r0
    956e:	cmp	r0, #0
    9570:	beq.w	92da <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
    9574:	ldrsb.w	r3, [r0]
    9578:	cmp	r3, #0
    957a:	blt.w	92da <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
      DBG_FAIL_MACRO;
      goto fail;
    }
    memset(cache, 0 , 32);
    957e:	movs	r2, #32
    9580:	movs	r1, #0
    9582:	bl	10bfc <memset>
    if (i == 0) {
    9586:	cmp	r7, #0
    9588:	beq.n	965a <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x39e>
         setLe16(dirFile->createTime, FS_DEFAULT_TIME);
         setLe16(dirFile->modifyTime, FS_DEFAULT_TIME);
         setLe16(dirFile->accessTime, FS_DEFAULT_TIME);
       }
      }
    } else if (i == 1) {
    958a:	cmp	r7, #1
    958c:	beq.n	963a <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x37e>
    958e:	rsb	r3, r7, r7, lsl #4
    9592:	cmp	r6, #15

      dirStream->nameLength = nameLength;
      setLe16(dirStream->nameHash, nameHash);
    } else {
      dirName = reinterpret_cast<DirName_t*>(cache);
      dirName->type = EXFAT_TYPE_NAME;
    9594:	mov.w	r1, #193	; 0xc1
    9598:	mov	r2, r6
    959a:	sub.w	r3, r3, #30
    959e:	it	cs
    95a0:	movcs	r2, #15
    95a2:	strb	r1, [r4, #0]
    95a4:	uxtb	r3, r3
      nameOffset = 15*(i - 2);
      nCmp = nameLength - nameOffset;
      if (nCmp > 15) {
        nCmp = 15;
      }
      for (size_t k = 0; k < nCmp; k++) {
    95a6:	cbz	r2, 95be <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x302>
    95a8:	adds	r4, #2
    95aa:	sxth	r2, r2
    95ac:	add	r3, sl
    95ae:	add.w	r2, r4, r2, lsl #1
        setLe16(dirName->unicode + 2*k, name[k + nameOffset]);
    95b2:	ldrb.w	r1, [r3], #1
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    95b6:	strh.w	r1, [r4], #2
      nameOffset = 15*(i - 2);
      nCmp = nameLength - nameOffset;
      if (nCmp > 15) {
        nCmp = 15;
      }
      for (size_t k = 0; k < nCmp; k++) {
    95ba:	cmp	r2, r4
    95bc:	bne.n	95b2 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x2f6>
  freePos.isContiguous = dir->isContiguous();
  memset(this, 0, sizeof(ExFatFile));
  m_vol = dir->volume();
  m_attributes = FILE_ATTR_FILE;
  m_dirPos = freePos;
  for (uint8_t i = 0; i < freeNeed; i++) {
    95be:	adds	r7, #1
    95c0:	uxtb	r7, r7
    95c2:	cmp	fp, r7
    95c4:	bls.n	961a <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x35e>
    if (i) {
      if (1 != m_vol->dirSeek(&freePos, 32)) {
    95c6:	movs	r2, #32
    95c8:	mov	r1, r8
    95ca:	ldr	r0, [r5, #32]
    95cc:	bl	9a20 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)>
    95d0:	cmp	r0, #1
    95d2:	bne.w	92da <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
    95d6:	subs	r6, #15
    95d8:	ldr	r0, [r5, #32]
    95da:	uxtb	r6, r6
    95dc:	b.n	9564 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x2a8>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Write, truncate, or at end is an error for a directory or read-only file.
  if ((oflag & (O_TRUNC | O_AT_END)) || (m_flags & FILE_FLAG_WRITE)) {
    if (isSubDir() || isReadOnly() || READ_ONLY) {
    95de:	ldrb.w	r3, [r5, #49]	; 0x31
    95e2:	tst.w	r3, #17
    95e6:	bne.w	92da <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
      goto fail;
    }
  }

#if !READ_ONLY
  if (oflag & O_TRUNC) {
    95ea:	ldr	r3, [sp, #112]	; 0x70
    95ec:	lsls	r6, r3, #21
    95ee:	bpl.w	94b0 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1f4>
    if (!(m_flags & FILE_FLAG_WRITE)) {
    95f2:	ldrb.w	r3, [r5, #51]	; 0x33
    95f6:	lsls	r4, r3, #30
    95f8:	bpl.w	92da <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
   * \param[in] length The desired length for the file.
   *
   * \return true for success or false for failure.
   */
  bool truncate(uint64_t length) {
    return seekSet(length) && truncate();
    95fc:	movs	r2, #0
    95fe:	movs	r3, #0
    9600:	mov	r0, r5
    9602:	bl	91b4 <ExFatFile::seekSet(unsigned long long)>
    9606:	cmp	r0, #0
    9608:	beq.w	92da <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
    960c:	mov	r0, r5
    960e:	bl	a37c <ExFatFile::truncate()>
    9612:	cmp	r0, #0
    9614:	beq.w	92da <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
    9618:	b.n	94b8 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1fc>
      for (size_t k = 0; k < nCmp; k++) {
        setLe16(dirName->unicode + 2*k, name[k + nameOffset]);
      }
    }
  }
  return sync();
    961a:	mov	r0, r5
    961c:	bl	a050 <ExFatFile::sync()>
    9620:	b.n	92e6 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x2a>
    9622:	nop
    9624:	.word	0x88888889
    }
    if (!truncate(0)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if ((oflag & O_AT_END) && !seekSet(fileSize())) {
    9628:	mov	r0, r5
    962a:	ldrd	r2, r3, [r5, #16]
    962e:	bl	91b4 <ExFatFile::seekSet(unsigned long long)>
    9632:	cmp	r0, #0
    9634:	bne.w	94b8 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1fc>
    9638:	b.n	92da <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
      }
    } else if (i == 1) {
      dirStream = reinterpret_cast<DirStream_t*>(cache);
      dirStream->type = EXFAT_TYPE_STREAM;
      dirStream->flags = EXFAT_FLAG_ALWAYS1 | EXFAT_FLAG_CONTIGUOUS;
      m_flags = modeFlags | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
    963a:	ldr	r3, [sp, #4]
         setLe16(dirFile->accessTime, FS_DEFAULT_TIME);
       }
      }
    } else if (i == 1) {
      dirStream = reinterpret_cast<DirStream_t*>(cache);
      dirStream->type = EXFAT_TYPE_STREAM;
    963c:	movs	r1, #192	; 0xc0
      dirStream->flags = EXFAT_FLAG_ALWAYS1 | EXFAT_FLAG_CONTIGUOUS;
    963e:	movs	r2, #3
      m_flags = modeFlags | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
    9640:	orn	r3, r3, #63	; 0x3f
         setLe16(dirFile->accessTime, FS_DEFAULT_TIME);
       }
      }
    } else if (i == 1) {
      dirStream = reinterpret_cast<DirStream_t*>(cache);
      dirStream->type = EXFAT_TYPE_STREAM;
    9644:	strb	r1, [r4, #0]
      dirStream->flags = EXFAT_FLAG_ALWAYS1 | EXFAT_FLAG_CONTIGUOUS;
    9646:	strb	r2, [r4, #1]
      m_flags = modeFlags | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
    9648:	strb.w	r3, [r5, #51]	; 0x33

      dirStream->nameLength = nameLength;
    964c:	ldrb.w	r3, [sp, #12]
    9650:	strb	r3, [r4, #3]
    9652:	ldrh.w	r3, [sp, #8]
    9656:	strh	r3, [r4, #4]
    9658:	b.n	95be <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x302>
      goto fail;
    }
    memset(cache, 0 , 32);
    if (i == 0) {
      dirFile = reinterpret_cast<DirFile_t*>(cache);
      dirFile->type = EXFAT_TYPE_FILE;
    965a:	movs	r3, #133	; 0x85
    965c:	strb	r3, [r4, #0]
      m_setCount = freeNeed - 1;
      dirFile->setCount = m_setCount;

      if (FsDateTime::callback) {
    965e:	ldr	r3, [pc, #56]	; (9698 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x3dc>)
    }
    memset(cache, 0 , 32);
    if (i == 0) {
      dirFile = reinterpret_cast<DirFile_t*>(cache);
      dirFile->type = EXFAT_TYPE_FILE;
      m_setCount = freeNeed - 1;
    9660:	strb.w	r9, [r5, #48]	; 0x30
      dirFile->setCount = m_setCount;
    9664:	strb.w	r9, [r4, #1]

      if (FsDateTime::callback) {
    9668:	ldr	r3, [r3, #0]
    966a:	cbz	r3, 968c <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x3d0>
        uint16_t date, time;
        uint8_t ms10;
        FsDateTime::callback(&date, &time, &ms10);
    966c:	add.w	r2, sp, #23
    9670:	add.w	r1, sp, #26
    9674:	add	r0, sp, #24
    9676:	blx	r3
    9678:	ldrh.w	r1, [sp, #24]
    967c:	ldrh.w	r2, [sp, #26]
        setLe16(dirFile->createDate, date);
        setLe16(dirFile->createTime, time);
        dirFile->createTimeMs = ms10;
    9680:	ldrb.w	r3, [sp, #23]
    9684:	strh	r1, [r4, #10]
    9686:	strh	r2, [r4, #8]
    9688:	strb	r3, [r4, #20]
    968a:	b.n	95be <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x302>
    968c:	movw	r3, #21025	; 0x5221
    9690:	strh	r3, [r4, #10]
    9692:	strh	r3, [r4, #14]
    9694:	strh	r3, [r4, #18]
    9696:	b.n	95be <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x302>
    9698:	.word	0x20044068

0000969c <ExFatFile::open(ExFatFile*, char const*, int)>:
//------------------------------------------------------------------------------
bool ExFatFile::open(ExFatVolume* vol, const ExChar_t* path, int oflag) {
  return vol && open(vol->vwd(), path, oflag);
}
//------------------------------------------------------------------------------
bool ExFatFile::open(ExFatFile* dirFile, const ExChar_t* path, oflag_t oflag) {
    969c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    96a0:	mov	r6, r0
    96a2:	sub	sp, #84	; 0x54
 * \brief Basic file class.
 */
class ExFatFile {
 public:
  /** Create an instance. */
  ExFatFile() {}
    96a4:	movs	r0, #0
    96a6:	mov	r5, r1
  ExFatFile tmpDir;
  ExName_t fname;
  // error if already open
  if (isOpen() || !dirFile->isDir()) {
    96a8:	ldrb.w	r1, [r6, #49]	; 0x31
//------------------------------------------------------------------------------
bool ExFatFile::open(ExFatVolume* vol, const ExChar_t* path, int oflag) {
  return vol && open(vol->vwd(), path, oflag);
}
//------------------------------------------------------------------------------
bool ExFatFile::open(ExFatFile* dirFile, const ExChar_t* path, oflag_t oflag) {
    96ac:	str	r2, [sp, #12]
    96ae:	strb.w	r0, [sp, #73]	; 0x49
    96b2:	strb.w	r0, [sp, #74]	; 0x4a
    96b6:	strb.w	r0, [sp, #75]	; 0x4b
  ExFatFile tmpDir;
  ExName_t fname;
  // error if already open
  if (isOpen() || !dirFile->isDir()) {
    96ba:	cbnz	r1, 96c8 <ExFatFile::open(ExFatFile*, char const*, int)+0x2c>
    96bc:	mov	r9, r3
    96be:	ldrb.w	r3, [r5, #49]	; 0x31
    96c2:	tst.w	r3, #80	; 0x50
    96c6:	bne.n	96d0 <ExFatFile::open(ExFatFile*, char const*, int)+0x34>
    close();
  }
  return open(dirFile, &fname, oflag);

 fail:
  return false;
    96c8:	movs	r0, #0
}
    96ca:	add	sp, #84	; 0x54
    96cc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  // error if already open
  if (isOpen() || !dirFile->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    96d0:	ldrb	r3, [r2, #0]
    96d2:	mov	r4, r2
    96d4:	cmp	r3, #47	; 0x2f
    96d6:	beq.n	9744 <ExFatFile::open(ExFatFile*, char const*, int)+0xa8>
  uint8_t setCount() const {return m_setCount;}
  bool mkdir(ExFatFile* parent, ExName_t* fname);
  bool openRootFile(ExFatFile* dir,
                    const ExChar_t* name, uint8_t nameLength, oflag_t oflag);
  bool open(ExFatFile* dirFile, ExName_t* fname, oflag_t oflag) {
    return openRootFile(dirFile, fname->lfn, fname->len, oflag);
    96d8:	mov.w	r8, #0
      goto fail;
    }
    dirFile = &tmpDir;
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
    96dc:	mov	r1, r4
    96de:	add	r3, sp, #12
    96e0:	add	r2, sp, #16
    96e2:	mov	r0, r6
    96e4:	bl	8ed8 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>
    96e8:	cmp	r0, #0
    96ea:	beq.n	96c8 <ExFatFile::open(ExFatFile*, char const*, int)+0x2c>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (*path == 0) {
    96ec:	ldr	r3, [sp, #12]
    96ee:	ldrb	r3, [r3, #0]
    96f0:	cmp	r3, #0
    96f2:	beq.n	976e <ExFatFile::open(ExFatFile*, char const*, int)+0xd2>
    96f4:	ldrb.w	r3, [sp, #16]
    96f8:	mov	r1, r5
    96fa:	ldr	r2, [sp, #20]
    96fc:	mov	r0, r6
    96fe:	str.w	r8, [sp]
    9702:	bl	92bc <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)>
      break;
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
    9706:	cmp	r0, #0
    9708:	beq.n	96c8 <ExFatFile::open(ExFatFile*, char const*, int)+0x2c>
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
    970a:	mov	r4, r6
    970c:	add	r7, sp, #24
    970e:	add.w	lr, r6, #48	; 0x30
    9712:	ldr	r0, [r4, #0]
    9714:	adds	r4, #16
    9716:	ldr.w	r1, [r4, #-12]
    971a:	mov	r5, r7
    971c:	ldr.w	r2, [r4, #-8]
    9720:	adds	r7, #16
    9722:	ldr.w	r3, [r4, #-4]
    9726:	cmp	r4, lr
    9728:	stmia	r5!, {r0, r1, r2, r3}
    972a:	bne.n	9712 <ExFatFile::open(ExFatFile*, char const*, int)+0x76>
    972c:	ldr	r0, [r4, #0]
    dirFile = &tmpDir;
    972e:	add	r5, sp, #24
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
    9730:	str	r0, [r7, #0]
#include "ExFatFile.h"
#include "ExFatVolume.h"
#include "upcase.h"
//------------------------------------------------------------------------------
bool ExFatFile::close() {
  bool rtn = sync();
    9732:	mov	r0, r6
    9734:	bl	a050 <ExFatFile::sync()>
  m_attributes = FILE_ATTR_CLOSED;
    9738:	strb.w	r8, [r6, #49]	; 0x31
  m_flags = 0;
    973c:	strb.w	r8, [r6, #51]	; 0x33
    9740:	ldr	r4, [sp, #12]
    9742:	b.n	96dc <ExFatFile::open(ExFatFile*, char const*, int)+0x40>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
      path++;
    9744:	adds	r4, #1
    9746:	str	r4, [sp, #12]
  if (isOpen() || !dirFile->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
    9748:	ldrb	r1, [r4, #0]
    974a:	cmp	r1, #47	; 0x2f
    974c:	beq.n	9744 <ExFatFile::open(ExFatFile*, char const*, int)+0xa8>
      path++;
    }
    if (*path == 0) {
    974e:	cbz	r1, 9786 <ExFatFile::open(ExFatFile*, char const*, int)+0xea>
bool ExFatFile::openRoot(ExFatVolume* vol) {
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
    9750:	add	r0, sp, #24
    9752:	movs	r2, #56	; 0x38
    9754:	movs	r1, #0
      path++;
    }
    if (*path == 0) {
      return openRoot(dirFile->m_vol);
    }
    if (!tmpDir.openRoot(dirFile->m_vol)) {
    9756:	ldr	r7, [r5, #32]
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile = &tmpDir;
    9758:	mov	r5, r0
bool ExFatFile::openRoot(ExFatVolume* vol) {
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
    975a:	bl	10bfc <memset>
  m_attributes = FILE_ATTR_ROOT;
    975e:	movs	r2, #64	; 0x40
  m_vol = vol;
  m_flags = FILE_FLAG_READ;
    9760:	movs	r3, #1
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
  m_attributes = FILE_ATTR_ROOT;
  m_vol = vol;
    9762:	str	r7, [sp, #56]	; 0x38
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
  m_attributes = FILE_ATTR_ROOT;
    9764:	strb.w	r2, [sp, #73]	; 0x49
  m_vol = vol;
  m_flags = FILE_FLAG_READ;
    9768:	strb.w	r3, [sp, #75]	; 0x4b
    976c:	b.n	96d8 <ExFatFile::open(ExFatFile*, char const*, int)+0x3c>
    976e:	ldrb.w	r3, [sp, #16]
    9772:	mov	r1, r5
    9774:	ldr	r2, [sp, #20]
    9776:	mov	r0, r6
    9778:	str.w	r9, [sp]
    977c:	bl	92bc <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)>
  }
  return open(dirFile, &fname, oflag);

 fail:
  return false;
}
    9780:	add	sp, #84	; 0x54
    9782:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
bool ExFatFile::openRoot(ExFatVolume* vol) {
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
    9786:	movs	r2, #56	; 0x38
    9788:	mov	r0, r6
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
      path++;
    }
    if (*path == 0) {
      return openRoot(dirFile->m_vol);
    978a:	ldr	r4, [r5, #32]
bool ExFatFile::openRoot(ExFatVolume* vol) {
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
    978c:	bl	10bfc <memset>
  m_attributes = FILE_ATTR_ROOT;
    9790:	movs	r3, #64	; 0x40
  m_vol = vol;
  m_flags = FILE_FLAG_READ;
    9792:	movs	r0, #1
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
  m_attributes = FILE_ATTR_ROOT;
  m_vol = vol;
    9794:	str	r4, [r6, #32]
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
  m_attributes = FILE_ATTR_ROOT;
    9796:	strb.w	r3, [r6, #49]	; 0x31
  m_vol = vol;
  m_flags = FILE_FLAG_READ;
    979a:	strb.w	r0, [r6, #51]	; 0x33
    979e:	b.n	96ca <ExFatFile::open(ExFatFile*, char const*, int)+0x2e>

000097a0 <ExFatFile::open(ExFatVolume*, char const*, int)>:
bool ExFatFile::open(const ExChar_t* path, int oflag) {
  return open(ExFatVolume::cwv(), path, oflag);
}
//------------------------------------------------------------------------------
bool ExFatFile::open(ExFatVolume* vol, const ExChar_t* path, int oflag) {
  return vol && open(vol->vwd(), path, oflag);
    97a0:	cbz	r1, 97aa <ExFatFile::open(ExFatVolume*, char const*, int)+0xa>
    97a2:	add.w	r1, r1, #1096	; 0x448
    97a6:	b.w	969c <ExFatFile::open(ExFatFile*, char const*, int)>
}
    97aa:	mov	r0, r1
    97ac:	bx	lr
    97ae:	nop

000097b0 <ExFatFile::openNext(ExFatFile*, int)>:
  }
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::openNext(ExFatFile* dir, oflag_t oflag) {
  if (isOpen() || !dir->isDir() || (dir->curPosition() & 0X1F)) {
    97b0:	ldrb.w	r3, [r0, #49]	; 0x31
    97b4:	cbnz	r3, 97cc <ExFatFile::openNext(ExFatFile*, int)+0x1c>
    DBG_FAIL_MACRO;
  }
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::openNext(ExFatFile* dir, oflag_t oflag) {
    97b6:	push	{r4, r5, lr}
  if (isOpen() || !dir->isDir() || (dir->curPosition() & 0X1F)) {
    97b8:	ldrb.w	r4, [r1, #49]	; 0x31
    DBG_FAIL_MACRO;
  }
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::openNext(ExFatFile* dir, oflag_t oflag) {
    97bc:	sub	sp, #12
    97be:	mov	r5, r1
  if (isOpen() || !dir->isDir() || (dir->curPosition() & 0X1F)) {
    97c0:	ands.w	r4, r4, #80	; 0x50
    97c4:	bne.n	97d0 <ExFatFile::openNext(ExFatFile*, int)+0x20>
    goto fail;
  }
  return openRootFile(dir, nullptr, 0, oflag);

 fail:
  return false;
    97c6:	mov	r0, r4
}
    97c8:	add	sp, #12
    97ca:	pop	{r4, r5, pc}
    goto fail;
  }
  return openRootFile(dir, nullptr, 0, oflag);

 fail:
  return false;
    97cc:	movs	r0, #0
}
    97ce:	bx	lr
  }
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::openNext(ExFatFile* dir, oflag_t oflag) {
  if (isOpen() || !dir->isDir() || (dir->curPosition() & 0X1F)) {
    97d0:	ldrd	r4, r5, [r5]
    97d4:	movs	r5, #0
    97d6:	and.w	r4, r4, #31
    97da:	orrs	r4, r5
    97dc:	beq.n	97e4 <ExFatFile::openNext(ExFatFile*, int)+0x34>
    goto fail;
  }
  return openRootFile(dir, nullptr, 0, oflag);

 fail:
  return false;
    97de:	mov	r0, r3
}
    97e0:	add	sp, #12
    97e2:	pop	{r4, r5, pc}
bool ExFatFile::openNext(ExFatFile* dir, oflag_t oflag) {
  if (isOpen() || !dir->isDir() || (dir->curPosition() & 0X1F)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  return openRootFile(dir, nullptr, 0, oflag);
    97e4:	str	r2, [sp, #0]
    97e6:	mov	r2, r3
    97e8:	bl	92bc <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)>

 fail:
  return false;
}
    97ec:	add	sp, #12
    97ee:	pop	{r4, r5, pc}

000097f0 <ExFatPartition::fatGet(unsigned long, unsigned long*) [clone .part.3]>:
    }
  }
  return 1;
}
//------------------------------------------------------------------------------
uint8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
    97f0:	push	{r3, r4, r5, lr}
    97f2:	mov	r4, r1
    97f4:	ldr.w	r1, [r0, #1060]	; 0x424
    97f8:	mov	r5, r2
    97fa:	add.w	r0, r0, #528	; 0x210
    97fe:	movs	r2, #0
    9800:	add.w	r1, r1, r4, lsr #7
    9804:	bl	8d80 <FsCache::get(unsigned long, unsigned char)>
    return -1;
  }
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));

  cache = dataCacheGet(sector, FsCache::CACHE_FOR_READ);
  if (!cache) {
    9808:	cbz	r0, 981c <ExFatPartition::fatGet(unsigned long, unsigned long*) [clone .part.3]+0x2c>
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
}
inline uint32_t getLe32(const uint8_t* src) {
  return *reinterpret_cast<const uint32_t*>(src);
    980a:	lsls	r4, r4, #2
    980c:	ubfx	r4, r4, #0, #9
    9810:	ldr	r3, [r0, r4]
    return -1;
  }
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));

  if (next == EXFAT_EOC) {
    9812:	adds	r2, r3, #1
    9814:	beq.n	9820 <ExFatPartition::fatGet(unsigned long, unsigned long*) [clone .part.3]+0x30>
    return 0;
  }
  *value = next;
    9816:	str	r3, [r5, #0]
  return 1;
    9818:	movs	r0, #1
    981a:	pop	{r3, r4, r5, pc}
  }
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));

  cache = dataCacheGet(sector, FsCache::CACHE_FOR_READ);
  if (!cache) {
    return -1;
    981c:	movs	r0, #255	; 0xff
    981e:	pop	{r3, r4, r5, pc}
  }
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));

  if (next == EXFAT_EOC) {
    return 0;
    9820:	movs	r0, #0
  }
  *value = next;
  return 1;
}
    9822:	pop	{r3, r4, r5, pc}

00009824 <ExFatPartition::fatPut(unsigned long, unsigned long) [clone .part.4]>:
//------------------------------------------------------------------------------
bool ExFatPartition::fatPut(uint32_t cluster, uint32_t value) {
    9824:	push	{r3, r4, r5, lr}
    9826:	mov	r4, r1
    9828:	ldr.w	r1, [r0, #1060]	; 0x424
    982c:	mov	r5, r2
    982e:	add.w	r0, r0, #528	; 0x210
    9832:	movs	r2, #1
    9834:	add.w	r1, r1, r4, lsr #7
    9838:	bl	8d80 <FsCache::get(unsigned long, unsigned char)>
    DBG_FAIL_MACRO;
    goto fail;
  }
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
  cache = dataCacheGet(sector, FsCache::CACHE_FOR_WRITE);
  if (!cache) {
    983c:	mov	r3, r0
    983e:	cbz	r0, 984c <ExFatPartition::fatPut(unsigned long, unsigned long) [clone .part.4]+0x28>
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
}

inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
    9840:	lsls	r4, r4, #2
    DBG_FAIL_MACRO;
    goto fail;
  }
  setLe32(cache + ((cluster << 2) & m_sectorMask), value);
  return true;
    9842:	movs	r0, #1
    9844:	ubfx	r4, r4, #0, #9
    9848:	str	r5, [r3, r4]
    984a:	pop	{r3, r4, r5, pc}

 fail:
  return false;
}
    984c:	pop	{r3, r4, r5, pc}
    984e:	nop

00009850 <ExFatPartition::bitmapFind(unsigned long, unsigned long)>:
#include "../common/DebugMacros.h"
#include "ExFatVolume.h"
#include "../common/FsStructs.h"
//------------------------------------------------------------------------------
// return 0 if error, 1 if no space, else start cluster.
uint32_t ExFatPartition::bitmapFind(uint32_t cluster, uint32_t count) {
    9850:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9854:	mov	r8, r0
    9856:	mov	r9, r2
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
    9858:	mov	fp, r1
    985a:	cmp	r1, #0
    985c:	beq.n	98e6 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x96>
    985e:	subs	r7, r1, #2
  if (start >= m_clusterCount) {
    9860:	ldr.w	r3, [r8, #1072]	; 0x430
    9864:	cmp	r7, r3
    9866:	bcs.n	98de <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x8e>
    9868:	and.w	r5, r7, #7
    986c:	movs	r3, #1
    986e:	ubfx	sl, r7, #3, #9
    9872:	lsl.w	r5, r3, r5
    9876:	uxtb	r5, r5
    start = 0;
  }
  uint32_t endAlloc = start;
  uint32_t bgnAlloc = start;
    9878:	mov	r6, r7
uint32_t ExFatPartition::bitmapFind(uint32_t cluster, uint32_t count) {
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
  if (start >= m_clusterCount) {
    start = 0;
  }
  uint32_t endAlloc = start;
    987a:	mov	r4, r7
  bool bitmapModify(uint32_t cluster, uint32_t count, bool value);
  //----------------------------------------------------------------------------
  // Cache functions.
  uint8_t* bitmapCacheGet(uint32_t sector, uint8_t option) {
#if USE_EXFAT_BITMAP_CACHE
    return m_bitmapCache.get(sector, option);
    987c:	ldr.w	r1, [r8, #1068]	; 0x42c
    9880:	movs	r2, #0
    9882:	mov	r0, r8
    9884:	add.w	r1, r1, r4, lsr #12
    9888:	bl	8d80 <FsCache::get(unsigned long, unsigned char)>
  uint8_t mask = 1 << (start & 7);
  while (true) {
    uint32_t sector = m_clusterHeapStartSector +
                     (endAlloc >> (m_bytesPerSectorShift + 3));
    cache = bitmapCacheGet(sector, FsCache::CACHE_FOR_READ);
    if (!cache) {
    988c:	cbz	r0, 98c0 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x70>
    988e:	ldrb.w	r1, [r0, sl]
    9892:	b.n	98aa <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x5a>
    }
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
        endAlloc++;
        if (!(mask & cache[i])) {
          if ((endAlloc - bgnAlloc) == count) {
    9894:	cmp	r2, r9
    9896:	beq.n	98ec <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x9c>
            return bgnAlloc + 2;
          }
        } else {
          bgnAlloc = endAlloc;
        }
        if (endAlloc == start) {
    9898:	cmp	r7, r4
    989a:	beq.n	98be <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x6e>
          return 1;
        }
        if (endAlloc >= m_clusterCount) {
    989c:	ldr.w	r2, [r8, #1072]	; 0x430
    98a0:	cmp	r4, r2
    98a2:	bcs.n	98d2 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x82>
    cache = bitmapCacheGet(sector, FsCache::CACHE_FOR_READ);
    if (!cache) {
      return 0;
    }
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
    98a4:	ands.w	r5, r3, #255	; 0xff
    98a8:	beq.n	98c4 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x74>
        endAlloc++;
    98aa:	adds	r4, #1
        if (!(mask & cache[i])) {
    98ac:	tst	r5, r1
    cache = bitmapCacheGet(sector, FsCache::CACHE_FOR_READ);
    if (!cache) {
      return 0;
    }
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
    98ae:	mov.w	r3, r5, lsl #1
        endAlloc++;
        if (!(mask & cache[i])) {
          if ((endAlloc - bgnAlloc) == count) {
    98b2:	sub.w	r2, r4, r6
      return 0;
    }
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
        endAlloc++;
        if (!(mask & cache[i])) {
    98b6:	beq.n	9894 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x44>
            return bgnAlloc + 2;
          }
        } else {
          bgnAlloc = endAlloc;
        }
        if (endAlloc == start) {
    98b8:	cmp	r7, r4
    if (!cache) {
      return 0;
    }
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
        endAlloc++;
    98ba:	mov	r6, r4
            return bgnAlloc + 2;
          }
        } else {
          bgnAlloc = endAlloc;
        }
        if (endAlloc == start) {
    98bc:	bne.n	989c <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x4c>
          return 1;
    98be:	movs	r0, #1
      mask = 1;
    }
    i = 0;
  }
  return 0;
}
    98c0:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    98c4:	add.w	sl, sl, #1
          endAlloc = bgnAlloc = 0;
          i = sectorSize;
          break;
        }
      }
      mask = 1;
    98c8:	movs	r5, #1
                     (endAlloc >> (m_bytesPerSectorShift + 3));
    cache = bitmapCacheGet(sector, FsCache::CACHE_FOR_READ);
    if (!cache) {
      return 0;
    }
    for (; i < sectorSize; i++) {
    98ca:	cmp.w	sl, #512	; 0x200
    98ce:	bne.n	988e <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x3e>
    98d0:	b.n	98d6 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x86>
        }
        if (endAlloc == start) {
          return 1;
        }
        if (endAlloc >= m_clusterCount) {
          endAlloc = bgnAlloc = 0;
    98d2:	movs	r6, #0
    98d4:	mov	r4, r6
          break;
        }
      }
      mask = 1;
    }
    i = 0;
    98d6:	mov.w	sl, #0
    98da:	movs	r5, #1
    98dc:	b.n	987c <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x2c>
    98de:	movs	r7, #0
    98e0:	movs	r5, #1
//------------------------------------------------------------------------------
// return 0 if error, 1 if no space, else start cluster.
uint32_t ExFatPartition::bitmapFind(uint32_t cluster, uint32_t count) {
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
  if (start >= m_clusterCount) {
    start = 0;
    98e2:	mov	sl, r7
    98e4:	b.n	9878 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x28>
#include "ExFatVolume.h"
#include "../common/FsStructs.h"
//------------------------------------------------------------------------------
// return 0 if error, 1 if no space, else start cluster.
uint32_t ExFatPartition::bitmapFind(uint32_t cluster, uint32_t count) {
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
    98e6:	ldr.w	r7, [r0, #1056]	; 0x420
    98ea:	b.n	9860 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x10>
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
        endAlloc++;
        if (!(mask & cache[i])) {
          if ((endAlloc - bgnAlloc) == count) {
            if (cluster == 0 && count == 1) {
    98ec:	cmp.w	fp, #0
    98f0:	bne.n	98fc <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0xac>
    98f2:	cmp.w	r9, #1
              // Start at found sector.  bitmapModify may increase this.
              m_bitmapStart = bgnAlloc;
    98f6:	it	eq
    98f8:	streq.w	r6, [r8, #1056]	; 0x420
            }
            return bgnAlloc + 2;
    98fc:	adds	r0, r6, #2
    98fe:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9902:	nop

00009904 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>:
  }
  return 0;
}
//------------------------------------------------------------------------------
bool ExFatPartition::bitmapModify(uint32_t cluster,
                                  uint32_t count, bool value) {
    9904:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint32_t sector;
  uint32_t start = cluster - 2;
    9908:	subs	r1, #2
  }
  return 0;
}
//------------------------------------------------------------------------------
bool ExFatPartition::bitmapModify(uint32_t cluster,
                                  uint32_t count, bool value) {
    990a:	mov	r5, r2
    990c:	mov	sl, r3
  uint32_t start = cluster - 2;
  size_t i;
  uint8_t* cache;
  uint8_t mask;
  cluster -= 2;
  if ((start + count) > m_clusterCount) {
    990e:	ldr.w	r2, [r0, #1072]	; 0x430
    9912:	adds	r3, r1, r5
    9914:	cmp	r3, r2
    9916:	bhi.n	998a <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x86>
    9918:	mov	r8, r0
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (value) {
    991a:	cmp.w	sl, #0
    991e:	bne.n	9990 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x8c>
    if (start  <= m_bitmapStart && m_bitmapStart < (start + count)) {
      m_bitmapStart = (start + count) < m_clusterCount ? start + count : 0;
    }
  } else {
    if (start < m_bitmapStart) {
    9920:	ldr.w	r3, [r0, #1056]	; 0x420
    9924:	cmp	r1, r3
      m_bitmapStart = start;
    9926:	it	cc
    9928:	strcc.w	r1, [r0, #1056]	; 0x420
    }
  }
  mask = 1 << (start & 7);
    992c:	and.w	r4, r1, #7
    9930:	movs	r2, #1
  sector = m_clusterHeapStartSector +
                   (start >> (m_bytesPerSectorShift + 3));
    9932:	ldr.w	r3, [r8, #1068]	; 0x42c
  i = (start >> 3) & m_sectorMask;
    9936:	ubfx	r6, r1, #3, #9
  } else {
    if (start < m_bitmapStart) {
      m_bitmapStart = start;
    }
  }
  mask = 1 << (start & 7);
    993a:	lsl.w	r4, r2, r4
  sector = m_clusterHeapStartSector +
                   (start >> (m_bytesPerSectorShift + 3));
    993e:	add.w	r9, r3, r1, lsr #12
  } else {
    if (start < m_bitmapStart) {
      m_bitmapStart = start;
    }
  }
  mask = 1 << (start & 7);
    9942:	uxtb	r4, r4
    9944:	movs	r2, #1
    9946:	mov	r1, r9
    9948:	mov	r0, r8
  sector = m_clusterHeapStartSector +
                   (start >> (m_bytesPerSectorShift + 3));
  i = (start >> 3) & m_sectorMask;
  while (true) {
    cache = bitmapCacheGet(sector++, FsCache::CACHE_FOR_WRITE);
    994a:	add	r9, r2
    994c:	bl	8d80 <FsCache::get(unsigned long, unsigned char)>
    if (!cache) {
    9950:	cbz	r0, 998a <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x86>
    9952:	adds	r7, r0, r6
    9954:	add.w	r0, r0, #512	; 0x200
    9958:	ldrb.w	r2, [r7], #1
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (; i < m_bytesPerSector; i++) {
      for (; mask; mask <<= 1) {
        if (value == static_cast<bool>(cache[i] & mask)) {
    995c:	tst	r2, r4
          DBG_FAIL_MACRO;
          goto fail;
        }
        cache[i] ^= mask;
    995e:	eor.w	r2, r2, r4
    if (!cache) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (; i < m_bytesPerSector; i++) {
      for (; mask; mask <<= 1) {
    9962:	mov.w	r4, r4, lsl #1
        if (value == static_cast<bool>(cache[i] & mask)) {
    9966:	ite	ne
    9968:	movne	r6, #1
    996a:	moveq	r6, #0
    996c:	cmp	r6, sl
    996e:	beq.n	998a <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x86>
          DBG_FAIL_MACRO;
          goto fail;
        }
        cache[i] ^= mask;
        if (--count == 0) {
    9970:	subs	r5, #1
      for (; mask; mask <<= 1) {
        if (value == static_cast<bool>(cache[i] & mask)) {
          DBG_FAIL_MACRO;
          goto fail;
        }
        cache[i] ^= mask;
    9972:	strb.w	r2, [r7, #-1]
        if (--count == 0) {
    9976:	beq.n	99a8 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0xa4>
    if (!cache) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (; i < m_bytesPerSector; i++) {
      for (; mask; mask <<= 1) {
    9978:	ands.w	r4, r4, #255	; 0xff
    997c:	bne.n	995c <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x58>
    cache = bitmapCacheGet(sector++, FsCache::CACHE_FOR_WRITE);
    if (!cache) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (; i < m_bytesPerSector; i++) {
    997e:	cmp	r7, r0
          return true;
        }
      }
      mask = 1;
    }
    i = 0;
    9980:	mov	r6, r4
    9982:	mov.w	r4, #1
    cache = bitmapCacheGet(sector++, FsCache::CACHE_FOR_WRITE);
    if (!cache) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (; i < m_bytesPerSector; i++) {
    9986:	bne.n	9958 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x54>
    9988:	b.n	9944 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x40>
    }
    i = 0;
  }

 fail:
  return false;
    998a:	movs	r0, #0
    998c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if ((start + count) > m_clusterCount) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (value) {
    if (start  <= m_bitmapStart && m_bitmapStart < (start + count)) {
    9990:	ldr.w	r0, [r0, #1056]	; 0x420
    9994:	cmp	r3, r0
    9996:	bls.n	992c <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x28>
    9998:	cmp	r1, r0
    999a:	bhi.n	992c <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x28>
      m_bitmapStart = (start + count) < m_clusterCount ? start + count : 0;
    999c:	cmp	r3, r2
    999e:	it	cs
    99a0:	movcs	r3, #0
    99a2:	str.w	r3, [r8, #1056]	; 0x420
    99a6:	b.n	992c <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x28>
          DBG_FAIL_MACRO;
          goto fail;
        }
        cache[i] ^= mask;
        if (--count == 0) {
          return true;
    99a8:	movs	r0, #1
    i = 0;
  }

 fail:
  return false;
}
    99aa:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    99ae:	nop

000099b0 <ExFatPartition::chainSize(unsigned long)>:
//------------------------------------------------------------------------------
uint32_t ExFatPartition::chainSize(uint32_t cluster) {
    99b0:	push	{r4, r5, r6, lr}
    99b2:	sub	sp, #8
    99b4:	mov	r5, r0
  uint32_t n = 0;
    99b6:	movs	r4, #0

 fail:
  return false;
}
//------------------------------------------------------------------------------
uint32_t ExFatPartition::chainSize(uint32_t cluster) {
    99b8:	add	r6, sp, #8
    99ba:	str.w	r1, [r6, #-4]!
uint8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
  uint8_t* cache;
  uint32_t next;
  uint32_t sector;

  if (cluster > (m_clusterCount + 1)) {
    99be:	ldr.w	r3, [r5, #1072]	; 0x430
//------------------------------------------------------------------------------
uint32_t ExFatPartition::chainSize(uint32_t cluster) {
  uint32_t n = 0;
  int8_t status;
  do {
    status = fatGet(cluster, & cluster);
    99c2:	ldr	r1, [sp, #4]
uint8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
  uint8_t* cache;
  uint32_t next;
  uint32_t sector;

  if (cluster > (m_clusterCount + 1)) {
    99c4:	adds	r3, #1
    99c6:	cmp	r1, r3
    99c8:	bls.n	99d0 <ExFatPartition::chainSize(unsigned long)+0x20>
uint32_t ExFatPartition::chainSize(uint32_t cluster) {
  uint32_t n = 0;
  int8_t status;
  do {
    status = fatGet(cluster, & cluster);
    if (status < 0) return 0;
    99ca:	movs	r0, #0
    n++;
  } while (status);
  return n;
}
    99cc:	add	sp, #8
    99ce:	pop	{r4, r5, r6, pc}
    99d0:	mov	r2, r6
    99d2:	mov	r0, r5
    99d4:	bl	97f0 <ExFatPartition::fatGet(unsigned long, unsigned long*) [clone .part.3]>
  uint32_t n = 0;
  int8_t status;
  do {
    status = fatGet(cluster, & cluster);
    if (status < 0) return 0;
    n++;
    99d8:	adds	r4, #1
//------------------------------------------------------------------------------
uint32_t ExFatPartition::chainSize(uint32_t cluster) {
  uint32_t n = 0;
  int8_t status;
  do {
    status = fatGet(cluster, & cluster);
    99da:	sxtb	r0, r0
    if (status < 0) return 0;
    99dc:	cmp	r0, #0
    99de:	blt.n	99ca <ExFatPartition::chainSize(unsigned long)+0x1a>
}
//------------------------------------------------------------------------------
uint32_t ExFatPartition::chainSize(uint32_t cluster) {
  uint32_t n = 0;
  int8_t status;
  do {
    99e0:	bne.n	99be <ExFatPartition::chainSize(unsigned long)+0xe>
    status = fatGet(cluster, & cluster);
    if (status < 0) return 0;
    n++;
    99e2:	mov	r0, r4
  } while (status);
  return n;
}
    99e4:	add	sp, #8
    99e6:	pop	{r4, r5, r6, pc}

000099e8 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>:
//------------------------------------------------------------------------------
uint8_t* ExFatPartition::dirCache(DirPos_t* pos, uint8_t options) {
    99e8:	push	{r4, r5, r6, lr}
    99ea:	mov	r6, r1
    99ec:	mov	r4, r0
#endif  // USE_EXFAT_BITMAP_CACHE
  }
  void dataCacheDirty() {m_dataCache.dirty();}
  void dataCacheInvalidate() {m_dataCache.invalidate();}
  uint8_t* dataCacheGet(uint32_t sector, uint8_t option) {
    return m_dataCache.get(sector, option);
    99ee:	ldr.w	r5, [r0, #1080]	; 0x438
    99f2:	add.w	r0, r0, #528	; 0x210
    99f6:	ldr	r1, [r1, #4]
    99f8:	ldr	r3, [r6, #0]
    99fa:	ands	r1, r5
    99fc:	ldr.w	r5, [r4, #1068]	; 0x42c
    9a00:	subs	r3, #2
    9a02:	ldrb.w	r4, [r4, #1093]	; 0x445
    9a06:	add.w	r1, r5, r1, lsr #9
    9a0a:	lsls	r3, r4
    9a0c:	add	r1, r3
    9a0e:	bl	8d80 <FsCache::get(unsigned long, unsigned char)>
  uint32_t sector = clusterStartSector(pos->cluster);
  sector += (m_clusterMask & pos->position) >> m_bytesPerSectorShift;
  uint8_t* cache = dataCacheGet(sector, options);
  return cache ? cache + (pos->position & m_sectorMask) : nullptr;
    9a12:	cbz	r0, 9a1c <ExFatPartition::dirCache(DirPos_t*, unsigned char)+0x34>
    9a14:	ldr	r3, [r6, #4]
    9a16:	ubfx	r3, r3, #0, #9
    9a1a:	add	r0, r3
}
    9a1c:	pop	{r4, r5, r6, pc}
    9a1e:	nop

00009a20 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)>:
//------------------------------------------------------------------------------
// return -1 error, 0 EOC, 1 OK
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
    9a20:	push	{r4, r5, r6, lr}
  int8_t status;
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
    9a22:	ldr	r4, [r1, #4]
  uint8_t* cache = dataCacheGet(sector, options);
  return cache ? cache + (pos->position & m_sectorMask) : nullptr;
}
//------------------------------------------------------------------------------
// return -1 error, 0 EOC, 1 OK
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
    9a24:	mov	r5, r1
  int8_t status;
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
    9a26:	ldr.w	r3, [r0, #1080]	; 0x438
  uint8_t* cache = dataCacheGet(sector, options);
  return cache ? cache + (pos->position & m_sectorMask) : nullptr;
}
//------------------------------------------------------------------------------
// return -1 error, 0 EOC, 1 OK
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
    9a2a:	mov	r6, r0
  int8_t status;
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
  pos->position += offset;
    9a2c:	adds	r1, r4, r2
}
//------------------------------------------------------------------------------
// return -1 error, 0 EOC, 1 OK
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
  int8_t status;
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
    9a2e:	ands	r4, r3
  pos->position += offset;
    9a30:	str	r1, [r5, #4]
  tmp >>= bytesPerClusterShift();
    9a32:	ldrb.w	r3, [r0, #1093]	; 0x445
}
//------------------------------------------------------------------------------
// return -1 error, 0 EOC, 1 OK
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
  int8_t status;
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
    9a36:	add	r2, r4
  pos->position += offset;
  tmp >>= bytesPerClusterShift();
    9a38:	adds	r3, #9
    9a3a:	uxtb	r3, r3
    9a3c:	lsr.w	r4, r2, r3
  while (tmp--) {
    9a40:	cbz	r4, 9a52 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x32>
    if (pos->isContiguous) {
    9a42:	ldrb	r3, [r5, #8]
    9a44:	cbz	r3, 9a56 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x36>
      pos->cluster++;
    9a46:	ldr	r3, [r5, #0]
    9a48:	adds	r3, #1
    9a4a:	str	r3, [r5, #0]
    9a4c:	subs	r4, #1
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
  int8_t status;
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
  pos->position += offset;
  tmp >>= bytesPerClusterShift();
  while (tmp--) {
    9a4e:	cmp	r4, #0
    9a50:	bne.n	9a42 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x22>
      if (status != 1) {
        return status;
      }
    }
  }
  return 1;
    9a52:	movs	r0, #1
    9a54:	pop	{r4, r5, r6, pc}
uint8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
  uint8_t* cache;
  uint32_t next;
  uint32_t sector;

  if (cluster > (m_clusterCount + 1)) {
    9a56:	ldr.w	r3, [r6, #1072]	; 0x430
  tmp >>= bytesPerClusterShift();
  while (tmp--) {
    if (pos->isContiguous) {
      pos->cluster++;
    } else {
      status = fatGet(pos->cluster, &pos->cluster);
    9a5a:	ldr	r1, [r5, #0]
uint8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
  uint8_t* cache;
  uint32_t next;
  uint32_t sector;

  if (cluster > (m_clusterCount + 1)) {
    9a5c:	adds	r3, #1
    9a5e:	cmp	r1, r3
    9a60:	bls.n	9a68 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x48>
  tmp >>= bytesPerClusterShift();
  while (tmp--) {
    if (pos->isContiguous) {
      pos->cluster++;
    } else {
      status = fatGet(pos->cluster, &pos->cluster);
    9a62:	mov.w	r0, #4294967295
        return status;
      }
    }
  }
  return 1;
}
    9a66:	pop	{r4, r5, r6, pc}
    9a68:	mov	r2, r5
    9a6a:	mov	r0, r6
    9a6c:	bl	97f0 <ExFatPartition::fatGet(unsigned long, unsigned long*) [clone .part.3]>
  tmp >>= bytesPerClusterShift();
  while (tmp--) {
    if (pos->isContiguous) {
      pos->cluster++;
    } else {
      status = fatGet(pos->cluster, &pos->cluster);
    9a70:	sxtb	r0, r0
      if (status != 1) {
    9a72:	cmp	r0, #1
    9a74:	beq.n	9a4c <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x2c>
    9a76:	pop	{r4, r5, r6, pc}

00009a78 <ExFatPartition::fatGet(unsigned long, unsigned long*)>:
uint8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
  uint8_t* cache;
  uint32_t next;
  uint32_t sector;

  if (cluster > (m_clusterCount + 1)) {
    9a78:	ldr.w	r3, [r0, #1072]	; 0x430
    9a7c:	adds	r3, #1
    9a7e:	cmp	r3, r1
    9a80:	bcs.n	9a86 <ExFatPartition::fatGet(unsigned long, unsigned long*)+0xe>
  if (next == EXFAT_EOC) {
    return 0;
  }
  *value = next;
  return 1;
}
    9a82:	movs	r0, #255	; 0xff
    9a84:	bx	lr
    9a86:	b.w	97f0 <ExFatPartition::fatGet(unsigned long, unsigned long*) [clone .part.3]>
    9a8a:	nop

00009a8c <ExFatPartition::fatPut(unsigned long, unsigned long)>:
//------------------------------------------------------------------------------
bool ExFatPartition::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t sector;
  uint8_t* cache;
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
    9a8c:	cmp	r1, #1
    9a8e:	bls.n	9aac <ExFatPartition::fatPut(unsigned long, unsigned long)+0x20>
    9a90:	ldr.w	r3, [r0, #1072]	; 0x430
    9a94:	adds	r3, #1
    9a96:	cmp	r1, r3
  }
  *value = next;
  return 1;
}
//------------------------------------------------------------------------------
bool ExFatPartition::fatPut(uint32_t cluster, uint32_t value) {
    9a98:	push	{r4}
  uint32_t sector;
  uint8_t* cache;
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
    9a9a:	bls.n	9aa4 <ExFatPartition::fatPut(unsigned long, unsigned long)+0x18>
  setLe32(cache + ((cluster << 2) & m_sectorMask), value);
  return true;

 fail:
  return false;
}
    9a9c:	movs	r0, #0
    9a9e:	ldr.w	r4, [sp], #4
    9aa2:	bx	lr
    9aa4:	ldr.w	r4, [sp], #4
    9aa8:	b.w	9824 <ExFatPartition::fatPut(unsigned long, unsigned long) [clone .part.4]>
    9aac:	movs	r0, #0
    9aae:	bx	lr

00009ab0 <ExFatPartition::freeChain(unsigned long)>:
//------------------------------------------------------------------------------
bool ExFatPartition::freeChain(uint32_t cluster) {
    9ab0:	push	{r4, r5, r6, r7, lr}
    9ab2:	mov	r4, r1
    9ab4:	sub	sp, #12
    9ab6:	mov	r5, r0
  uint32_t next;
  uint32_t start = cluster;
    9ab8:	mov	r7, r1
uint8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
  uint8_t* cache;
  uint32_t next;
  uint32_t sector;

  if (cluster > (m_clusterCount + 1)) {
    9aba:	ldr.w	r3, [r5, #1072]	; 0x430
    9abe:	adds	r3, #1
    9ac0:	cmp	r4, r3
    9ac2:	bls.n	9aca <ExFatPartition::freeChain(unsigned long)+0x1a>
  } while (status);

  return true;

 fail:
  return false;
    9ac4:	movs	r0, #0
}
    9ac6:	add	sp, #12
    9ac8:	pop	{r4, r5, r6, r7, pc}
    9aca:	mov	r1, r4
    9acc:	add	r2, sp, #4
    9ace:	mov	r0, r5
    9ad0:	bl	97f0 <ExFatPartition::fatGet(unsigned long, unsigned long*) [clone .part.3]>
}
//------------------------------------------------------------------------------
bool ExFatPartition::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t sector;
  uint8_t* cache;
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
    9ad4:	cmp	r4, #1
bool ExFatPartition::freeChain(uint32_t cluster) {
  uint32_t next;
  uint32_t start = cluster;
  int8_t status;
  do {
    status = fatGet(cluster, &next);
    9ad6:	sxtb	r6, r0
    9ad8:	mov	r1, r4
    9ada:	mov	r0, r5
}
//------------------------------------------------------------------------------
bool ExFatPartition::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t sector;
  uint8_t* cache;
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
    9adc:	bls.n	9ac4 <ExFatPartition::freeChain(unsigned long)+0x14>
    9ade:	lsrs	r2, r6, #31
    9ae0:	bne.n	9ac4 <ExFatPartition::freeChain(unsigned long)+0x14>
    9ae2:	ldr.w	r3, [r5, #1072]	; 0x430
    9ae6:	adds	r3, #1
    9ae8:	cmp	r4, r3
    9aea:	bhi.n	9ac4 <ExFatPartition::freeChain(unsigned long)+0x14>
    9aec:	bl	9824 <ExFatPartition::fatPut(unsigned long, unsigned long) [clone .part.4]>
    if (!fatPut(cluster, 0)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if ((cluster + 1) != next || status == 0) {
      if (!bitmapModify(start, cluster - start + 1, 0)) {
    9af0:	mov	r1, r7
    9af2:	movs	r3, #0
    status = fatGet(cluster, &next);
    if (status < 0) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!fatPut(cluster, 0)) {
    9af4:	cmp	r0, #0
    9af6:	beq.n	9ac4 <ExFatPartition::freeChain(unsigned long)+0x14>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if ((cluster + 1) != next || status == 0) {
    9af8:	adds	r2, r4, #1
      if (!bitmapModify(start, cluster - start + 1, 0)) {
    9afa:	mov	r0, r5
    }
    if (!fatPut(cluster, 0)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if ((cluster + 1) != next || status == 0) {
    9afc:	ldr	r4, [sp, #4]
    9afe:	cbz	r6, 9b04 <ExFatPartition::freeChain(unsigned long)+0x54>
    9b00:	cmp	r2, r4
    9b02:	beq.n	9aba <ExFatPartition::freeChain(unsigned long)+0xa>
      if (!bitmapModify(start, cluster - start + 1, 0)) {
    9b04:	subs	r2, r2, r7
    9b06:	bl	9904 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    9b0a:	cmp	r0, #0
    9b0c:	beq.n	9ac4 <ExFatPartition::freeChain(unsigned long)+0x14>
        DBG_FAIL_MACRO;
        goto fail;
      }
      start = next;
    9b0e:	ldr	r4, [sp, #4]
//------------------------------------------------------------------------------
bool ExFatPartition::freeChain(uint32_t cluster) {
  uint32_t next;
  uint32_t start = cluster;
  int8_t status;
  do {
    9b10:	cmp	r6, #0
    9b12:	beq.n	9ac6 <ExFatPartition::freeChain(unsigned long)+0x16>
    if ((cluster + 1) != next || status == 0) {
      if (!bitmapModify(start, cluster - start + 1, 0)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      start = next;
    9b14:	mov	r7, r4
    9b16:	b.n	9aba <ExFatPartition::freeChain(unsigned long)+0xa>

00009b18 <ExFatPartition::freeClusterCount()>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
uint32_t ExFatPartition::freeClusterCount() {
    9b18:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint32_t nc = 0;
  uint32_t sector = m_clusterHeapStartSector;
  uint32_t usedCount = 0;
    9b1c:	movs	r4, #0

 fail:
  return false;
}
//------------------------------------------------------------------------------
uint32_t ExFatPartition::freeClusterCount() {
    9b1e:	mov	r8, r0
  uint32_t nc = 0;
  uint32_t sector = m_clusterHeapStartSector;
    9b20:	ldr.w	r6, [r0, #1068]	; 0x42c
    9b24:	add.w	r7, r0, #528	; 0x210
 fail:
  return false;
}
//------------------------------------------------------------------------------
uint32_t ExFatPartition::freeClusterCount() {
  uint32_t nc = 0;
    9b28:	mov	r5, r4
    9b2a:	mov	r1, r6
    9b2c:	movs	r2, #0
    9b2e:	mov	r0, r7
  uint32_t sector = m_clusterHeapStartSector;
  uint32_t usedCount = 0;
  uint8_t* cache;

  while (true) {
    cache = dataCacheGet(sector++, FsCache::CACHE_FOR_READ);
    9b30:	adds	r6, #1
    9b32:	bl	8d80 <FsCache::get(unsigned long, unsigned char)>
    if (!cache) {
    9b36:	cbz	r0, 9b84 <ExFatPartition::freeClusterCount()+0x6c>
    9b38:	add.w	lr, r0, #4294967295
    9b3c:	ldr.w	ip, [r8, #1072]	; 0x430
    9b40:	add.w	r9, r5, #4096	; 0x1000
      return 0;
    }
    for (size_t i = 0; i < m_bytesPerSector; i++) {
      if (cache[i] == 0XFF) {
    9b44:	ldrb.w	r0, [lr, #1]!
    9b48:	cmp	r0, #255	; 0xff
    9b4a:	beq.n	9b74 <ExFatPartition::freeClusterCount()+0x5c>
        usedCount+= 8;
      } else if (cache[i]) {
    9b4c:	cbz	r0, 9b62 <ExFatPartition::freeClusterCount()+0x4a>
    9b4e:	movs	r2, #8
    9b50:	movs	r3, #1
        for (uint8_t mask = 1; mask ; mask <<=1) {
          if ((mask & cache[i])) {
    9b52:	tst	r0, r3
    }
    for (size_t i = 0; i < m_bytesPerSector; i++) {
      if (cache[i] == 0XFF) {
        usedCount+= 8;
      } else if (cache[i]) {
        for (uint8_t mask = 1; mask ; mask <<=1) {
    9b54:	mov.w	r1, r3, lsl #1
          if ((mask & cache[i])) {
            usedCount++;
    9b58:	it	ne
    9b5a:	addne	r4, #1
    }
    for (size_t i = 0; i < m_bytesPerSector; i++) {
      if (cache[i] == 0XFF) {
        usedCount+= 8;
      } else if (cache[i]) {
        for (uint8_t mask = 1; mask ; mask <<=1) {
    9b5c:	subs	r2, #1
    9b5e:	uxtb	r3, r1
    9b60:	bne.n	9b52 <ExFatPartition::freeClusterCount()+0x3a>
          if ((mask & cache[i])) {
            usedCount++;
          }
        }
      }
      nc += 8;
    9b62:	adds	r5, #8
      if (nc >= m_clusterCount) {
    9b64:	cmp	ip, r5
    9b66:	bls.n	9b7c <ExFatPartition::freeClusterCount()+0x64>
  while (true) {
    cache = dataCacheGet(sector++, FsCache::CACHE_FOR_READ);
    if (!cache) {
      return 0;
    }
    for (size_t i = 0; i < m_bytesPerSector; i++) {
    9b68:	cmp	r5, r9
    9b6a:	beq.n	9b2a <ExFatPartition::freeClusterCount()+0x12>
      if (cache[i] == 0XFF) {
    9b6c:	ldrb.w	r0, [lr, #1]!
    9b70:	cmp	r0, #255	; 0xff
    9b72:	bne.n	9b4c <ExFatPartition::freeClusterCount()+0x34>
          if ((mask & cache[i])) {
            usedCount++;
          }
        }
      }
      nc += 8;
    9b74:	adds	r5, #8
    if (!cache) {
      return 0;
    }
    for (size_t i = 0; i < m_bytesPerSector; i++) {
      if (cache[i] == 0XFF) {
        usedCount+= 8;
    9b76:	adds	r4, #8
            usedCount++;
          }
        }
      }
      nc += 8;
      if (nc >= m_clusterCount) {
    9b78:	cmp	ip, r5
    9b7a:	bhi.n	9b68 <ExFatPartition::freeClusterCount()+0x50>
        return m_clusterCount - usedCount;
    9b7c:	rsb	r0, r4, ip
    9b80:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      }
    }
  }
}
    9b84:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00009b88 <ExFatPartition::init(BlockDeviceInterface*, unsigned char)>:
//------------------------------------------------------------------------------
bool ExFatPartition::init(BlockDevice* dev, uint8_t part) {
    9b88:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  pbs_t* pbs;
  BpbExFat_t* bpb;
  MbrSector_t* mbr;
  MbrPart_t* mp;

  m_fatType = 0;
    9b8c:	movs	r3, #0
      }
    }
  }
}
//------------------------------------------------------------------------------
bool ExFatPartition::init(BlockDevice* dev, uint8_t part) {
    9b8e:	mov	r4, r0
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    m_sector = 0XFFFFFFFF;
    9b90:	mov.w	r6, #4294967295
    9b94:	add.w	r7, r0, #528	; 0x210
    9b98:	mov	r5, r2
  BpbExFat_t* bpb;
  MbrSector_t* mbr;
  MbrPart_t* mp;

  m_fatType = 0;
  m_blockDev = dev;
    9b9a:	str.w	r1, [r0, #1088]	; 0x440
  }
  /** Initialize the cache.
   * \param[in] blockDev Block device for this cache.
   */
  void init(BlockDevice* blockDev) {
    m_blockDev = blockDev;
    9b9e:	str	r1, [r0, #4]
    9ba0:	mov	r2, r3
    9ba2:	str.w	r1, [r4, #532]	; 0x214
    9ba6:	mov	r0, r7
    9ba8:	mov	r1, r3
  pbs_t* pbs;
  BpbExFat_t* bpb;
  MbrSector_t* mbr;
  MbrPart_t* mp;

  m_fatType = 0;
    9baa:	strb.w	r3, [r4, #1092]	; 0x444
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    9bae:	strb	r3, [r4, #0]
    9bb0:	strb.w	r3, [r4, #528]	; 0x210
    m_sector = 0XFFFFFFFF;
    9bb4:	str	r6, [r4, #12]
    9bb6:	str.w	r6, [r4, #540]	; 0x21c
    9bba:	bl	8d80 <FsCache::get(unsigned long, unsigned char)>
  m_blockDev = dev;
  cacheInit(m_blockDev);
  cache = dataCacheGet(0, FsCache::CACHE_FOR_READ);
  if (part > 4 || !cache) {
    9bbe:	cmp	r5, #4
    9bc0:	bhi.n	9bde <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0x56>
    9bc2:	mov	r6, r0
    9bc4:	cbz	r0, 9bde <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0x56>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (part >= 1) {
    9bc6:	cbnz	r5, 9be4 <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0x5c>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  pbs = reinterpret_cast<pbs_t*>(cache);
  if (strncmp(pbs->oemName, "EXFAT", 5)) {
    9bc8:	movs	r2, #5
    9bca:	ldr	r1, [pc, #164]	; (9c70 <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0xe8>)
    9bcc:	adds	r0, r6, #3
    9bce:	bl	1131c <strncmp>
    9bd2:	mov	r3, r0
    9bd4:	cbnz	r0, 9bde <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0x56>
    DBG_FAIL_MACRO;
    goto fail;
  }
  bpb = reinterpret_cast<BpbExFat_t*>(pbs->bpb);
  if (bpb->bytesPerSectorShift != m_bytesPerSectorShift) {
    9bd6:	ldrb.w	r2, [r6, #108]	; 0x6c
    9bda:	cmp	r2, #9
    9bdc:	beq.n	9c14 <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0x8c>
  bitmapFind(0, 1);
  m_fatType = FAT_TYPE_EXFAT;
  return true;

 fail:
  return false;
    9bde:	movs	r0, #0
    9be0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (part >= 1) {
    mbr = reinterpret_cast<MbrSector_t*>(cache);
    mp = &mbr->part[part - 1];
    9be4:	subs	r3, r5, #1
    if ((mp->boot != 0 && mp->boot != 0X80) || mp->type == 0) {
    9be6:	add.w	r3, r0, r3, lsl #4
    9bea:	ldrb.w	r2, [r3, #446]	; 0x1be
    9bee:	ands.w	r2, r2, #127	; 0x7f
    9bf2:	bne.n	9bde <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0x56>
    9bf4:	ldrb.w	r3, [r3, #450]	; 0x1c2
    9bf8:	cmp	r3, #0
    9bfa:	beq.n	9bde <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0x56>
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
}
inline uint32_t getLe32(const uint8_t* src) {
  return *reinterpret_cast<const uint32_t*>(src);
    9bfc:	add.w	r5, r0, r5, lsl #4
    9c00:	mov	r0, r7
    9c02:	ldr.w	r5, [r5, #438]	; 0x1b6
    9c06:	mov	r1, r5
    9c08:	bl	8d80 <FsCache::get(unsigned long, unsigned char)>
      DBG_FAIL_MACRO;
      goto fail;
    }
    volStart = getLe32(mp->relativeSectors);
    cache = dataCacheGet(volStart, FsCache::CACHE_FOR_READ);
    if (!cache) {
    9c0c:	mov	r6, r0
    9c0e:	cmp	r0, #0
    9c10:	bne.n	9bc8 <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0x40>
    9c12:	b.n	9bde <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0x56>
  bpb = reinterpret_cast<BpbExFat_t*>(pbs->bpb);
  if (bpb->bytesPerSectorShift != m_bytesPerSectorShift) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_fatStartSector = volStart + getLe32(bpb->fatOffset);
    9c14:	ldr	r2, [r6, #80]	; 0x50
  m_fatLength = getLe32(bpb->fatLength);
  m_clusterHeapStartSector = volStart + getLe32(bpb->clusterHeapOffset);
  m_clusterCount = getLe32(bpb->clusterCount);
  m_rootDirectoryCluster = getLe32(bpb->rootDirectoryCluster);
  m_sectorsPerClusterShift = bpb->sectorsPerClusterShift;
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
    9c16:	mov.w	r8, #1
  m_clusterMask = m_bytesPerCluster - 1;
  // Set m_bitmapStart to first free cluster.
  m_bitmapStart = 0;
  bitmapFind(0, 1);
    9c1a:	mov	r1, r0
    9c1c:	mov	r0, r4
  bpb = reinterpret_cast<BpbExFat_t*>(pbs->bpb);
  if (bpb->bytesPerSectorShift != m_bytesPerSectorShift) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_fatStartSector = volStart + getLe32(bpb->fatOffset);
    9c1e:	add.w	lr, r2, r5
  m_sectorsPerClusterShift = bpb->sectorsPerClusterShift;
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
  m_clusterMask = m_bytesPerCluster - 1;
  // Set m_bitmapStart to first free cluster.
  m_bitmapStart = 0;
  bitmapFind(0, 1);
    9c22:	mov	r2, r8
  bpb = reinterpret_cast<BpbExFat_t*>(pbs->bpb);
  if (bpb->bytesPerSectorShift != m_bytesPerSectorShift) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_fatStartSector = volStart + getLe32(bpb->fatOffset);
    9c24:	str.w	lr, [r4, #1060]	; 0x424
  m_fatLength = getLe32(bpb->fatLength);
    9c28:	ldr	r7, [r6, #84]	; 0x54
    9c2a:	str.w	r7, [r4, #1064]	; 0x428
  m_clusterHeapStartSector = volStart + getLe32(bpb->clusterHeapOffset);
    9c2e:	ldr	r7, [r6, #88]	; 0x58
    9c30:	add	r5, r7
    9c32:	str.w	r5, [r4, #1068]	; 0x42c
    9c36:	ldr	r5, [r6, #92]	; 0x5c
  m_clusterCount = getLe32(bpb->clusterCount);
    9c38:	str.w	r5, [r4, #1072]	; 0x430
    9c3c:	ldr	r5, [r6, #96]	; 0x60
  m_rootDirectoryCluster = getLe32(bpb->rootDirectoryCluster);
    9c3e:	str.w	r5, [r4, #1076]	; 0x434
  m_sectorsPerClusterShift = bpb->sectorsPerClusterShift;
    9c42:	ldrb.w	r5, [r6, #109]	; 0x6d
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
  m_clusterMask = m_bytesPerCluster - 1;
  // Set m_bitmapStart to first free cluster.
  m_bitmapStart = 0;
    9c46:	str.w	r3, [r4, #1056]	; 0x420
  m_fatLength = getLe32(bpb->fatLength);
  m_clusterHeapStartSector = volStart + getLe32(bpb->clusterHeapOffset);
  m_clusterCount = getLe32(bpb->clusterCount);
  m_rootDirectoryCluster = getLe32(bpb->rootDirectoryCluster);
  m_sectorsPerClusterShift = bpb->sectorsPerClusterShift;
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
    9c4a:	add.w	r3, r5, #9
  m_fatStartSector = volStart + getLe32(bpb->fatOffset);
  m_fatLength = getLe32(bpb->fatLength);
  m_clusterHeapStartSector = volStart + getLe32(bpb->clusterHeapOffset);
  m_clusterCount = getLe32(bpb->clusterCount);
  m_rootDirectoryCluster = getLe32(bpb->rootDirectoryCluster);
  m_sectorsPerClusterShift = bpb->sectorsPerClusterShift;
    9c4e:	strb.w	r5, [r4, #1093]	; 0x445
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
    9c52:	lsl.w	r3, r8, r3
  m_clusterMask = m_bytesPerCluster - 1;
    9c56:	subs	r5, r3, #1
  m_fatLength = getLe32(bpb->fatLength);
  m_clusterHeapStartSector = volStart + getLe32(bpb->clusterHeapOffset);
  m_clusterCount = getLe32(bpb->clusterCount);
  m_rootDirectoryCluster = getLe32(bpb->rootDirectoryCluster);
  m_sectorsPerClusterShift = bpb->sectorsPerClusterShift;
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
    9c58:	str.w	r3, [r4, #1084]	; 0x43c
  m_clusterMask = m_bytesPerCluster - 1;
    9c5c:	str.w	r5, [r4, #1080]	; 0x438
  // Set m_bitmapStart to first free cluster.
  m_bitmapStart = 0;
  bitmapFind(0, 1);
    9c60:	bl	9850 <ExFatPartition::bitmapFind(unsigned long, unsigned long)>
  m_fatType = FAT_TYPE_EXFAT;
    9c64:	movs	r3, #64	; 0x40
  return true;
    9c66:	mov	r0, r8
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
  m_clusterMask = m_bytesPerCluster - 1;
  // Set m_bitmapStart to first free cluster.
  m_bitmapStart = 0;
  bitmapFind(0, 1);
  m_fatType = FAT_TYPE_EXFAT;
    9c68:	strb.w	r3, [r4, #1092]	; 0x444
  return true;
    9c6c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9c70:	.word	0x200004d0

00009c74 <ExFatPartition::rootLength()>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
uint32_t ExFatPartition::rootLength() {
    9c74:	push	{r4, lr}
    9c76:	mov	r4, r0
  uint32_t nc = chainSize(m_rootDirectoryCluster);
    9c78:	ldr.w	r1, [r0, #1076]	; 0x434
    9c7c:	bl	99b0 <ExFatPartition::chainSize(unsigned long)>
  return nc << bytesPerClusterShift();
    9c80:	ldrb.w	r3, [r4, #1093]	; 0x445
    9c84:	adds	r3, #9
    9c86:	uxtb	r3, r3
}
    9c88:	lsls	r0, r3
    9c8a:	pop	{r4, pc}

00009c8c <exFatCmpName(DirName_t const*, char const*, unsigned int, unsigned int)>:
}
//------------------------------------------------------------------------------
bool exFatCmpName(const DirName_t* unicode,
                  const char* name, size_t offset, size_t n) {
  uint16_t u;
  for (size_t i = 0; i < n; i++) {
    9c8c:	cbz	r3, 9ce2 <exFatCmpName(DirName_t const*, char const*, unsigned int, unsigned int)+0x56>
  }
  return true;
}
//------------------------------------------------------------------------------
bool exFatCmpName(const DirName_t* unicode,
                  const char* name, size_t offset, size_t n) {
    9c8e:	push	{r4, r5, r6}
void lbaToMbrChs(uint8_t* chs, uint32_t capacityMB, uint32_t lba);
//-----------------------------------------------------------------------------
#if !defined(USE_SIMPLE_LITTLE_ENDIAN) || USE_SIMPLE_LITTLE_ENDIAN
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
    9c90:	ldrh	r4, [r0, #2]
  uint16_t u;
  for (size_t i = 0; i < n; i++) {
    u = getLe16(unicode->unicode + 2*i);
    if (u >= 0x7F  || toUpper(name[i + offset]) != toUpper(u)) {
    9c92:	cmp	r4, #126	; 0x7e
    9c94:	bhi.n	9cd6 <exFatCmpName(DirName_t const*, char const*, unsigned int, unsigned int)+0x4a>
    9c96:	add	r3, r2
    9c98:	adds	r0, #2
    9c9a:	add	r2, r1
    9c9c:	add	r1, r3
    9c9e:	ldrb.w	r3, [r2], #1
    9ca2:	uxtb	r4, r4
  }
  return left;
}
//------------------------------------------------------------------------------
static char toUpper(char c) {
  return c - ('a' <= c && c <= 'z' ? 'a' - 'A' : 0);
    9ca4:	sub.w	r6, r3, #97	; 0x61
    9ca8:	sub.w	r5, r4, #97	; 0x61
    9cac:	cmp	r6, #25
    9cae:	ite	ls
    9cb0:	movls	r6, #32
    9cb2:	movhi	r6, #0
    9cb4:	cmp	r5, #25
    9cb6:	sub.w	r3, r3, r6
    9cba:	ite	ls
    9cbc:	movls	r5, #32
    9cbe:	movhi	r5, #0
    9cc0:	uxtb	r3, r3
bool exFatCmpName(const DirName_t* unicode,
                  const char* name, size_t offset, size_t n) {
  uint16_t u;
  for (size_t i = 0; i < n; i++) {
    u = getLe16(unicode->unicode + 2*i);
    if (u >= 0x7F  || toUpper(name[i + offset]) != toUpper(u)) {
    9cc2:	subs	r4, r4, r5
    9cc4:	uxtb	r4, r4
    9cc6:	cmp	r4, r3
    9cc8:	bne.n	9cd6 <exFatCmpName(DirName_t const*, char const*, unsigned int, unsigned int)+0x4a>
}
//------------------------------------------------------------------------------
bool exFatCmpName(const DirName_t* unicode,
                  const char* name, size_t offset, size_t n) {
  uint16_t u;
  for (size_t i = 0; i < n; i++) {
    9cca:	cmp	r2, r1
    9ccc:	beq.n	9cdc <exFatCmpName(DirName_t const*, char const*, unsigned int, unsigned int)+0x50>
    9cce:	ldrh.w	r4, [r0, #2]!
    u = getLe16(unicode->unicode + 2*i);
    if (u >= 0x7F  || toUpper(name[i + offset]) != toUpper(u)) {
    9cd2:	cmp	r4, #126	; 0x7e
    9cd4:	bls.n	9c9e <exFatCmpName(DirName_t const*, char const*, unsigned int, unsigned int)+0x12>
      return false;
    9cd6:	movs	r0, #0
    }
  }
  return true;
}
    9cd8:	pop	{r4, r5, r6}
    9cda:	bx	lr
    u = getLe16(unicode->unicode + 2*i);
    if (u >= 0x7F  || toUpper(name[i + offset]) != toUpper(u)) {
      return false;
    }
  }
  return true;
    9cdc:	movs	r0, #1
}
    9cde:	pop	{r4, r5, r6}
    9ce0:	bx	lr
    u = getLe16(unicode->unicode + 2*i);
    if (u >= 0x7F  || toUpper(name[i + offset]) != toUpper(u)) {
      return false;
    }
  }
  return true;
    9ce2:	movs	r0, #1
}
    9ce4:	bx	lr
    9ce6:	nop

00009ce8 <exFatHashName(char const*, unsigned int, unsigned short)>:
  }
  return hash;
}
//------------------------------------------------------------------------------
uint16_t exFatHashName(const char* name, size_t n, uint16_t hash) {
  for (size_t i = 0; i < n; i++) {
    9ce8:	cbz	r1, 9d20 <exFatHashName(char const*, unsigned int, unsigned short)+0x38>
    9cea:	add	r1, r0
    hash = ((hash << 15) | (hash >> 1)) + (c >> 8);
  }
  return hash;
}
//------------------------------------------------------------------------------
uint16_t exFatHashName(const char* name, size_t n, uint16_t hash) {
    9cec:	push	{r4, r5}
  for (size_t i = 0; i < n; i++) {
    uint8_t c = name[i];
    9cee:	ldrb.w	r4, [r0], #1
    9cf2:	lsls	r3, r2, #15
    9cf4:	orr.w	r2, r3, r2, lsr #1
    if ('a' <= c && c <= 'z') {
    9cf8:	sub.w	r3, r4, #97	; 0x61
      c -= 'a' - 'A';
    9cfc:	sub.w	r5, r4, #32
}
//------------------------------------------------------------------------------
uint16_t exFatHashName(const char* name, size_t n, uint16_t hash) {
  for (size_t i = 0; i < n; i++) {
    uint8_t c = name[i];
    if ('a' <= c && c <= 'z') {
    9d00:	cmp	r3, #25
      c -= 'a' - 'A';
    9d02:	it	ls
    9d04:	uxtbls	r4, r5
  }
  return hash;
}
//------------------------------------------------------------------------------
uint16_t exFatHashName(const char* name, size_t n, uint16_t hash) {
  for (size_t i = 0; i < n; i++) {
    9d06:	cmp	r1, r0
    uint8_t c = name[i];
    if ('a' <= c && c <= 'z') {
      c -= 'a' - 'A';
    }
    hash = ((hash << 15) | (hash >> 1)) + c;
    9d08:	uxtah	r2, r4, r2
    9d0c:	uxth	r2, r2
    9d0e:	mov.w	r3, r2, lsl #15
    9d12:	orr.w	r2, r3, r2, lsr #1
    9d16:	uxth	r2, r2
  }
  return hash;
}
//------------------------------------------------------------------------------
uint16_t exFatHashName(const char* name, size_t n, uint16_t hash) {
  for (size_t i = 0; i < n; i++) {
    9d18:	bne.n	9cee <exFatHashName(char const*, unsigned int, unsigned short)+0x6>
    }
    hash = ((hash << 15) | (hash >> 1)) + c;
    hash = ((hash << 15) | (hash >> 1));
  }
  return hash;
}
    9d1a:	mov	r0, r2
    9d1c:	pop	{r4, r5}
    9d1e:	bx	lr
    9d20:	mov	r0, r2
    9d22:	bx	lr

00009d24 <ExFatFile::addCluster()>:
  }
  return checksum;
}
//------------------------------------------------------------------------------
bool ExFatFile::addCluster() {
  uint32_t find = m_vol->bitmapFind(m_curCluster ?  m_curCluster + 1 : 0, 1);
    9d24:	ldr	r1, [r0, #24]
    checksum = ((checksum << 15) | (checksum >> 1)) + data[i];
  }
  return checksum;
}
//------------------------------------------------------------------------------
bool ExFatFile::addCluster() {
    9d26:	push	{r3, r4, r5, r6, r7, lr}
    9d28:	mov	r4, r0
  uint32_t find = m_vol->bitmapFind(m_curCluster ?  m_curCluster + 1 : 0, 1);
    9d2a:	ldr	r0, [r0, #32]
    9d2c:	cbz	r1, 9d30 <ExFatFile::addCluster()+0xc>
    9d2e:	adds	r1, #1
    9d30:	movs	r2, #1
    9d32:	bl	9850 <ExFatPartition::bitmapFind(unsigned long, unsigned long)>
  if (find < 2) {
    9d36:	cmp	r0, #1
  }
  return checksum;
}
//------------------------------------------------------------------------------
bool ExFatFile::addCluster() {
  uint32_t find = m_vol->bitmapFind(m_curCluster ?  m_curCluster + 1 : 0, 1);
    9d38:	mov	r6, r0
  if (find < 2) {
    9d3a:	bls.n	9d9a <ExFatFile::addCluster()+0x76>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!m_vol->bitmapModify(find, 1, 1)) {
    9d3c:	movs	r3, #1
    9d3e:	mov	r1, r0
    9d40:	ldr	r0, [r4, #32]
    9d42:	mov	r2, r3
    9d44:	bl	9904 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    9d48:	mov	r7, r0
    9d4a:	cbz	r0, 9d9a <ExFatFile::addCluster()+0x76>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_curCluster == 0) {
    9d4c:	ldr	r3, [r4, #24]
    9d4e:	cbz	r3, 9da0 <ExFatFile::addCluster()+0x7c>
    9d50:	ldrb.w	r2, [r4, #51]	; 0x33
    m_flags |= FILE_FLAG_CONTIGUOUS;
    goto done;
  }
  if (isContiguous()) {
    9d54:	lsls	r1, r2, #25
    9d56:	bpl.n	9d7e <ExFatFile::addCluster()+0x5a>
    if (find == (m_curCluster + 1)) {
    9d58:	adds	r1, r3, #1
    9d5a:	cmp	r6, r1
    9d5c:	beq.n	9dac <ExFatFile::addCluster()+0x88>
      goto done;
    }
    // No longer contiguous so make FAT chain.
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
    9d5e:	bic.w	r2, r2, #64	; 0x40

    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    9d62:	ldr	r1, [r4, #28]
  if (isContiguous()) {
    if (find == (m_curCluster + 1)) {
      goto done;
    }
    // No longer contiguous so make FAT chain.
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
    9d64:	strb.w	r2, [r4, #51]	; 0x33
    9d68:	b.n	9d76 <ExFatFile::addCluster()+0x52>

    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
      if (!m_vol->fatPut(c, c + 1)) {
    9d6a:	ldr	r0, [r4, #32]
    9d6c:	bl	9a8c <ExFatPartition::fatPut(unsigned long, unsigned long)>
      goto done;
    }
    // No longer contiguous so make FAT chain.
    m_flags &= ~FILE_FLAG_CONTIGUOUS;

    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    9d70:	mov	r1, r5
      if (!m_vol->fatPut(c, c + 1)) {
    9d72:	cbz	r0, 9d9a <ExFatFile::addCluster()+0x76>
    9d74:	ldr	r3, [r4, #24]
    9d76:	adds	r5, r1, #1
      goto done;
    }
    // No longer contiguous so make FAT chain.
    m_flags &= ~FILE_FLAG_CONTIGUOUS;

    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    9d78:	cmp	r1, r3
      if (!m_vol->fatPut(c, c + 1)) {
    9d7a:	mov	r2, r5
      goto done;
    }
    // No longer contiguous so make FAT chain.
    m_flags &= ~FILE_FLAG_CONTIGUOUS;

    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    9d7c:	bcc.n	9d6a <ExFatFile::addCluster()+0x46>
        goto fail;
      }
    }
  }
  // New cluster is EOC.
  if (!m_vol->fatPut(find, EXFAT_EOC)) {
    9d7e:	mov.w	r2, #4294967295
    9d82:	mov	r1, r6
    9d84:	ldr	r0, [r4, #32]
    9d86:	bl	9a8c <ExFatPartition::fatPut(unsigned long, unsigned long)>
    9d8a:	cbz	r0, 9d9a <ExFatFile::addCluster()+0x76>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Connect new cluster to existing chain.
  if (m_curCluster) {
    9d8c:	ldr	r1, [r4, #24]
    9d8e:	cbz	r1, 9dac <ExFatFile::addCluster()+0x88>
    if (!m_vol->fatPut(m_curCluster, find)) {
    9d90:	mov	r2, r6
    9d92:	ldr	r0, [r4, #32]
    9d94:	bl	9a8c <ExFatPartition::fatPut(unsigned long, unsigned long)>
    9d98:	cbnz	r0, 9dac <ExFatFile::addCluster()+0x88>
 done:
  m_curCluster = find;
  return true;

 fail:
  return false;
    9d9a:	movs	r7, #0
}
    9d9c:	mov	r0, r7
    9d9e:	pop	{r3, r4, r5, r6, r7, pc}
  if (!m_vol->bitmapModify(find, 1, 1)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_curCluster == 0) {
    m_flags |= FILE_FLAG_CONTIGUOUS;
    9da0:	ldrb.w	r3, [r4, #51]	; 0x33
    9da4:	orr.w	r3, r3, #64	; 0x40
    9da8:	strb.w	r3, [r4, #51]	; 0x33
      goto fail;
    }
  }

 done:
  m_curCluster = find;
    9dac:	str	r6, [r4, #24]
  return true;

 fail:
  return false;
}
    9dae:	mov	r0, r7
    9db0:	pop	{r3, r4, r5, r6, r7, pc}
    9db2:	nop

00009db4 <ExFatFile::remove()>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::remove() {
    9db4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  DirPos_t pos = m_dirPos;
    9db8:	add.w	r3, r0, #36	; 0x24

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::remove() {
    9dbc:	sub	sp, #20
    9dbe:	ldrb.w	r4, [r0, #51]	; 0x33
    9dc2:	mov	r5, r0
  DirPos_t pos = m_dirPos;
    9dc4:	add	r6, sp, #4
    9dc6:	ldmia.w	r3, {r0, r1, r2}
    9dca:	stmia.w	r6, {r0, r1, r2}
  uint8_t* cache;
  if (!isWritable()) {
    9dce:	lsls	r2, r4, #30
    9dd0:	bpl.n	9e0a <ExFatFile::remove()+0x56>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Free any clusters.
  if (m_firstCluster) {
    9dd2:	ldr	r1, [r5, #28]
    9dd4:	cbnz	r1, 9e12 <ExFatFile::remove()+0x5e>

  // Write entry to device.
  return m_vol->cacheSync();

 fail:
  return false;
    9dd6:	movs	r4, #0
  for (uint8_t i = 0; i <= m_setCount; i++) {
    if (i && m_vol->dirSeek(&pos, 32) != 1) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    cache = m_vol->dirCache(&pos, FsCache::CACHE_FOR_WRITE);
    9dd8:	movs	r2, #1
    9dda:	mov	r1, r6
    9ddc:	ldr	r0, [r5, #32]
        goto fail;
      }
    }
  }

  for (uint8_t i = 0; i <= m_setCount; i++) {
    9dde:	adds	r4, #1
    if (i && m_vol->dirSeek(&pos, 32) != 1) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    cache = m_vol->dirCache(&pos, FsCache::CACHE_FOR_WRITE);
    9de0:	bl	99e8 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
    if (!cache) {
    9de4:	cbz	r0, 9e0a <ExFatFile::remove()+0x56>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // Mark entry not used.
    cache[0] &= 0x7F;
    9de6:	ldrb	r3, [r0, #0]
        goto fail;
      }
    }
  }

  for (uint8_t i = 0; i <= m_setCount; i++) {
    9de8:	uxtb	r4, r4
    if (!cache) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // Mark entry not used.
    cache[0] &= 0x7F;
    9dea:	and.w	r3, r3, #127	; 0x7f
    9dee:	strb	r3, [r0, #0]
        goto fail;
      }
    }
  }

  for (uint8_t i = 0; i <= m_setCount; i++) {
    9df0:	ldrb.w	r3, [r5, #48]	; 0x30
    9df4:	cmp	r3, r4
    9df6:	bcc.n	9e5c <ExFatFile::remove()+0xa8>
    if (i && m_vol->dirSeek(&pos, 32) != 1) {
    9df8:	cmp	r4, #0
    9dfa:	beq.n	9dd8 <ExFatFile::remove()+0x24>
    9dfc:	movs	r2, #32
    9dfe:	mov	r1, r6
    9e00:	ldr	r0, [r5, #32]
    9e02:	bl	9a20 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)>
    9e06:	cmp	r0, #1
    9e08:	beq.n	9dd8 <ExFatFile::remove()+0x24>

  // Write entry to device.
  return m_vol->cacheSync();

 fail:
  return false;
    9e0a:	movs	r0, #0
}
    9e0c:	add	sp, #20
    9e0e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Free any clusters.
  if (m_firstCluster) {
    if (isContiguous()) {
    9e12:	lsls	r3, r4, #25
      uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    9e14:	ldr	r0, [r5, #32]
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Free any clusters.
  if (m_firstCluster) {
    if (isContiguous()) {
    9e16:	bpl.n	9e52 <ExFatFile::remove()+0x9e>
      uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
      if (!m_vol->bitmapModify(m_firstCluster, nc, 0)) {
    9e18:	ldrb.w	r2, [r0, #1093]	; 0x445
    9e1c:	movs	r3, #0
    9e1e:	ldrd	r8, r9, [r5, #8]
    9e22:	adds	r2, #9
    9e24:	adds.w	r8, r8, #4294967295
    9e28:	uxtb	r2, r2
    9e2a:	adc.w	r9, r9, #4294967295
    9e2e:	rsb	r7, r2, #32
    9e32:	sub.w	r4, r2, #32
    9e36:	lsr.w	r2, r8, r2
    9e3a:	lsl.w	r7, r9, r7
    9e3e:	lsr.w	r4, r9, r4
    9e42:	orrs	r2, r7
    9e44:	orrs	r2, r4
    9e46:	adds	r2, #1
    9e48:	bl	9904 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    9e4c:	cmp	r0, #0
    9e4e:	bne.n	9dd6 <ExFatFile::remove()+0x22>
    9e50:	b.n	9e0a <ExFatFile::remove()+0x56>
        DBG_FAIL_MACRO;
        goto fail;
      }
    } else {
      if (!m_vol->freeChain(m_firstCluster)) {
    9e52:	bl	9ab0 <ExFatPartition::freeChain(unsigned long)>
    9e56:	cmp	r0, #0
    9e58:	bne.n	9dd6 <ExFatFile::remove()+0x22>
    9e5a:	b.n	9e0a <ExFatFile::remove()+0x56>
    }
    // Mark entry not used.
    cache[0] &= 0x7F;
  }
  // Set this file closed.
  m_attributes = FILE_ATTR_CLOSED;
    9e5c:	movs	r3, #0
  m_flags = 0;

  // Write entry to device.
  return m_vol->cacheSync();
    9e5e:	ldr	r4, [r5, #32]
    }
    // Mark entry not used.
    cache[0] &= 0x7F;
  }
  // Set this file closed.
  m_attributes = FILE_ATTR_CLOSED;
    9e60:	strb.w	r3, [r5, #49]	; 0x31
#endif  // USE_EXFAT_BITMAP_CACHE
    m_dataCache.init(dev);
  }
  bool cacheSync() {
#if USE_EXFAT_BITMAP_CACHE
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    9e64:	mov	r0, r4
  m_flags = 0;
    9e66:	strb.w	r3, [r5, #51]	; 0x33
    9e6a:	bl	8de0 <FsCache::sync()>
    9e6e:	cmp	r0, #0
    9e70:	beq.n	9e0a <ExFatFile::remove()+0x56>
    9e72:	add.w	r0, r4, #528	; 0x210
    9e76:	bl	8de0 <FsCache::sync()>
    9e7a:	cmp	r0, #0
    9e7c:	beq.n	9e0a <ExFatFile::remove()+0x56>
    9e7e:	ldr.w	r0, [r4, #1088]	; 0x440
  bool fatPut(uint32_t cluster, uint32_t value);
  uint32_t chainSize(uint32_t cluster);
  bool freeChain(uint32_t cluster);
  uint16_t sectorMask() const {return m_sectorMask;}
  bool syncDevice() {
    return m_blockDev->syncDevice();
    9e82:	ldr	r3, [r0, #0]
    9e84:	ldr	r3, [r3, #24]
    9e86:	blx	r3
    9e88:	b.n	9e0c <ExFatFile::remove()+0x58>
    9e8a:	nop

00009e8c <ExFatFile::rmdir()>:
//------------------------------------------------------------------------------
bool ExFatFile::rmdir() {
  int n;
  uint8_t dir[32];
  // must be open subdirectory
  if (!isSubDir()) {
    9e8c:	ldrb.w	r3, [r0, #49]	; 0x31
    9e90:	lsls	r1, r3, #27
    9e92:	bmi.n	9e98 <ExFatFile::rmdir()+0xc>
  m_attributes = FILE_ATTR_FILE;
  m_flags |= FILE_FLAG_WRITE;
  return remove();

 fail:
  return false;
    9e94:	movs	r0, #0
}
    9e96:	bx	lr

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::rmdir() {
    9e98:	push	{r4, lr}
   * \return true for success or false for failure.
   */
  bool rename(ExFatFile* dirFile, const ExChar_t* newPath);
  /** Set the file's current position to zero. */
  void rewind() {
    seekSet(0);
    9e9a:	movs	r2, #0
    9e9c:	sub	sp, #32
    9e9e:	movs	r3, #0
    9ea0:	mov	r4, r0
    9ea2:	bl	91b4 <ExFatFile::seekSet(unsigned long long)>
    9ea6:	b.n	9eb6 <ExFatFile::rmdir()+0x2a>
  while (1) {
    n = read(dir, 32);
    if (n == 0) {
      break;
    }
    if (n != 32 || dir[0] & 0X80) {
    9ea8:	cmp	r0, #32
    9eaa:	bne.n	9ee0 <ExFatFile::rmdir()+0x54>
    9eac:	ldrb.w	r3, [sp]
    9eb0:	lsls	r2, r3, #24
    9eb2:	bmi.n	9ee0 <ExFatFile::rmdir()+0x54>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (dir[0] == 0) {
    9eb4:	cbz	r3, 9ec4 <ExFatFile::rmdir()+0x38>
  }
  rewind();

  // make sure directory is empty
  while (1) {
    n = read(dir, 32);
    9eb6:	movs	r2, #32
    9eb8:	mov	r1, sp
    9eba:	mov	r0, r4
    9ebc:	bl	8fd4 <ExFatFile::read(void*, unsigned int)>
    if (n == 0) {
    9ec0:	cmp	r0, #0
    9ec2:	bne.n	9ea8 <ExFatFile::rmdir()+0x1c>
      break;
    }
  }
  // convert empty directory to normal file for remove
  m_attributes = FILE_ATTR_FILE;
  m_flags |= FILE_FLAG_WRITE;
    9ec4:	ldrb.w	r3, [r4, #51]	; 0x33
    if (dir[0] == 0) {
      break;
    }
  }
  // convert empty directory to normal file for remove
  m_attributes = FILE_ATTR_FILE;
    9ec8:	movs	r2, #8
  m_flags |= FILE_FLAG_WRITE;
  return remove();
    9eca:	mov	r0, r4
      break;
    }
  }
  // convert empty directory to normal file for remove
  m_attributes = FILE_ATTR_FILE;
  m_flags |= FILE_FLAG_WRITE;
    9ecc:	orr.w	r3, r3, #2
    if (dir[0] == 0) {
      break;
    }
  }
  // convert empty directory to normal file for remove
  m_attributes = FILE_ATTR_FILE;
    9ed0:	strb.w	r2, [r4, #49]	; 0x31
  m_flags |= FILE_FLAG_WRITE;
    9ed4:	strb.w	r3, [r4, #51]	; 0x33
  return remove();
    9ed8:	bl	9db4 <ExFatFile::remove()>

 fail:
  return false;
}
    9edc:	add	sp, #32
    9ede:	pop	{r4, pc}
  m_attributes = FILE_ATTR_FILE;
  m_flags |= FILE_FLAG_WRITE;
  return remove();

 fail:
  return false;
    9ee0:	movs	r0, #0
}
    9ee2:	add	sp, #32
    9ee4:	pop	{r4, pc}
    9ee6:	nop

00009ee8 <ExFatFile::syncDir()>:
 fail:
  m_error |= WRITE_ERROR;
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::syncDir() {
    9ee8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  DirStream_t* ds;
  uint8_t* cache;
  uint16_t checksum = 0;
  uint8_t setCount = 0;

  DirPos_t pos = m_dirPos;
    9eec:	movs	r7, #0
 fail:
  m_error |= WRITE_ERROR;
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::syncDir() {
    9eee:	sub	sp, #28
  DirStream_t* ds;
  uint8_t* cache;
  uint16_t checksum = 0;
  uint8_t setCount = 0;

  DirPos_t pos = m_dirPos;
    9ef0:	add.w	fp, r0, #36	; 0x24
 fail:
  m_error |= WRITE_ERROR;
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::syncDir() {
    9ef4:	mov	r6, r0
  DirStream_t* ds;
  uint8_t* cache;
  uint16_t checksum = 0;
  uint8_t setCount = 0;

  DirPos_t pos = m_dirPos;
    9ef6:	add.w	r8, sp, #12
bool ExFatFile::syncDir() {
  DirFile_t* df;
  DirStream_t* ds;
  uint8_t* cache;
  uint16_t checksum = 0;
  uint8_t setCount = 0;
    9efa:	mov	sl, r7
//------------------------------------------------------------------------------
bool ExFatFile::syncDir() {
  DirFile_t* df;
  DirStream_t* ds;
  uint8_t* cache;
  uint16_t checksum = 0;
    9efc:	mov	r4, r7
  uint8_t setCount = 0;

  DirPos_t pos = m_dirPos;
    9efe:	ldmia.w	fp, {r0, r1, r2}
    9f02:	stmia.w	r8, {r0, r1, r2}

  for (uint8_t i = 0;; i++) {
    cache = m_vol->dirCache(&pos, FsCache::CACHE_FOR_READ);
    9f06:	movs	r2, #0
    9f08:	mov	r1, r8
    9f0a:	ldr	r0, [r6, #32]
    9f0c:	uxtb.w	r9, r7
    9f10:	bl	99e8 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
    if (!cache) {
    9f14:	mov	r5, r0
    9f16:	cbz	r0, 9f26 <ExFatFile::syncDir()+0x3e>
      DBG_FAIL_MACRO;
      goto fail;
    }
    switch (cache[0]) {
    9f18:	ldrb	r3, [r0, #0]
    9f1a:	cmp	r3, #192	; 0xc0
    9f1c:	beq.n	9fd2 <ExFatFile::syncDir()+0xea>
    9f1e:	cmp	r3, #193	; 0xc1
    9f20:	beq.n	9f80 <ExFatFile::syncDir()+0x98>
    9f22:	cmp	r3, #133	; 0x85
    9f24:	beq.n	9f3a <ExFatFile::syncDir()+0x52>
    goto fail;
  }
  return true;

 fail:
  m_error |= WRITE_ERROR;
    9f26:	ldrb.w	r3, [r6, #50]	; 0x32
  return false;
    9f2a:	movs	r0, #0
    goto fail;
  }
  return true;

 fail:
  m_error |= WRITE_ERROR;
    9f2c:	orr.w	r3, r3, #1
    9f30:	strb.w	r3, [r6, #50]	; 0x32
  return false;
}
    9f34:	add	sp, #28
    9f36:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    9f3a:	ldrb.w	r2, [r6, #49]	; 0x31
    switch (cache[0]) {
      case EXFAT_TYPE_FILE:
        df = reinterpret_cast<DirFile_t*>(cache);
        setCount = df->setCount;
        setLe16(df->attributes, m_attributes & FILE_ATTR_COPY);
        if (FsDateTime::callback) {
    9f3e:	ldr	r3, [pc, #268]	; (a04c <ExFatFile::syncDir()+0x164>)
    9f40:	and.w	r2, r2, #55	; 0x37
      goto fail;
    }
    switch (cache[0]) {
      case EXFAT_TYPE_FILE:
        df = reinterpret_cast<DirFile_t*>(cache);
        setCount = df->setCount;
    9f44:	ldrb.w	sl, [r0, #1]
        setLe16(df->attributes, m_attributes & FILE_ATTR_COPY);
        if (FsDateTime::callback) {
    9f48:	ldr	r3, [r3, #0]
    9f4a:	strh	r2, [r0, #4]
    9f4c:	cbz	r3, 9f70 <ExFatFile::syncDir()+0x88>
          uint16_t date, time;
          uint8_t ms10;
          FsDateTime::callback(&date, &time, &ms10);
    9f4e:	add.w	r2, sp, #7
    9f52:	add.w	r1, sp, #10
    9f56:	add	r0, sp, #8
    9f58:	blx	r3
          df->modifyTimeMs = ms10;
          setLe16(df->modifyTime, time);
    9f5a:	ldrh.w	r2, [sp, #10]
          setLe16(df->modifyDate, date);
    9f5e:	ldrh.w	r3, [sp, #8]
        setLe16(df->attributes, m_attributes & FILE_ATTR_COPY);
        if (FsDateTime::callback) {
          uint16_t date, time;
          uint8_t ms10;
          FsDateTime::callback(&date, &time, &ms10);
          df->modifyTimeMs = ms10;
    9f62:	ldrb.w	r1, [sp, #7]
    9f66:	strh	r2, [r5, #12]
    9f68:	strb	r1, [r5, #21]
    9f6a:	strh	r2, [r5, #16]
    9f6c:	strh	r3, [r5, #14]
    9f6e:	strh	r3, [r5, #18]
          setLe16(df->modifyTime, time);
          setLe16(df->modifyDate, date);
          setLe16(df->accessTime, time);
          setLe16(df->accessDate, date);
        }
        m_vol->dataCacheDirty();
    9f70:	ldr	r2, [r6, #32]
    invalidate();
    return m_buffer;
  }
  /** Set current sector dirty. */
  void dirty() {
    m_status |= CACHE_STATUS_DIRTY;
    9f72:	ldrb.w	r3, [r2, #528]	; 0x210
    9f76:	orr.w	r3, r3, #1
    9f7a:	strb.w	r3, [r2, #528]	; 0x210
    9f7e:	ldrb	r3, [r5, #0]
    9f80:	lsls	r1, r4, #15
}
//==============================================================================
#else  // READ_ONLY
//------------------------------------------------------------------------------
static uint16_t exFatDirChecksum(const uint8_t* data, uint16_t checksum) {
  bool skip = data[0] == EXFAT_TYPE_FILE;
    9f82:	sub.w	r0, r3, #133	; 0x85
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    9f86:	movs	r2, #0
    9f88:	orr.w	r4, r1, r4, lsr #1
}
//==============================================================================
#else  // READ_ONLY
//------------------------------------------------------------------------------
static uint16_t exFatDirChecksum(const uint8_t* data, uint16_t checksum) {
  bool skip = data[0] == EXFAT_TYPE_FILE;
    9f8c:	clz	r0, r0
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    9f90:	movs	r1, #1
    checksum = ((checksum << 15) | (checksum >> 1)) + data[i];
    9f92:	uxtah	r3, r3, r4
}
//==============================================================================
#else  // READ_ONLY
//------------------------------------------------------------------------------
static uint16_t exFatDirChecksum(const uint8_t* data, uint16_t checksum) {
  bool skip = data[0] == EXFAT_TYPE_FILE;
    9f96:	lsrs	r0, r0, #5
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    checksum = ((checksum << 15) | (checksum >> 1)) + data[i];
    9f98:	uxth	r4, r3
//==============================================================================
#else  // READ_ONLY
//------------------------------------------------------------------------------
static uint16_t exFatDirChecksum(const uint8_t* data, uint16_t checksum) {
  bool skip = data[0] == EXFAT_TYPE_FILE;
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    9f9a:	add	r2, r1
    9f9c:	lsls	r3, r4, #15
    9f9e:	movs	r1, #3
    9fa0:	cmp	r2, #31
    9fa2:	orr.w	r3, r3, r4, lsr #1
    9fa6:	bhi.n	9fbc <ExFatFile::syncDir()+0xd4>
    checksum = ((checksum << 15) | (checksum >> 1)) + data[i];
    9fa8:	ldrb	r4, [r5, r2]
//==============================================================================
#else  // READ_ONLY
//------------------------------------------------------------------------------
static uint16_t exFatDirChecksum(const uint8_t* data, uint16_t checksum) {
  bool skip = data[0] == EXFAT_TYPE_FILE;
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    9faa:	cmp	r2, #1
    checksum = ((checksum << 15) | (checksum >> 1)) + data[i];
    9fac:	uxtah	r3, r4, r3
    9fb0:	uxth	r4, r3
//==============================================================================
#else  // READ_ONLY
//------------------------------------------------------------------------------
static uint16_t exFatDirChecksum(const uint8_t* data, uint16_t checksum) {
  bool skip = data[0] == EXFAT_TYPE_FILE;
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    9fb2:	bne.n	9fb8 <ExFatFile::syncDir()+0xd0>
    9fb4:	cmp	r0, #0
    9fb6:	bne.n	9f9a <ExFatFile::syncDir()+0xb2>
    9fb8:	movs	r1, #1
    9fba:	b.n	9f9a <ExFatFile::syncDir()+0xb2>
        DBG_FAIL_MACRO;
        goto fail;
        break;
    }
    checksum = exFatDirChecksum(cache, checksum);
    if (i == setCount) break;
    9fbc:	cmp	sl, r9
    9fbe:	beq.n	a00e <ExFatFile::syncDir()+0x126>
    if (m_vol->dirSeek(&pos, 32) != 1) {
    9fc0:	movs	r2, #32
    9fc2:	mov	r1, r8
    9fc4:	ldr	r0, [r6, #32]
    9fc6:	adds	r7, #1
    9fc8:	bl	9a20 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)>
    9fcc:	cmp	r0, #1
    9fce:	beq.n	9f06 <ExFatFile::syncDir()+0x1e>
    9fd0:	b.n	9f26 <ExFatFile::syncDir()+0x3e>
        m_vol->dataCacheDirty();
        break;

      case EXFAT_TYPE_STREAM:
        ds = reinterpret_cast<DirStream_t*>(cache);
        if (isContiguous()) {
    9fd2:	ldrb.w	r3, [r6, #51]	; 0x33
    9fd6:	tst.w	r3, #64	; 0x40
          ds->flags |= EXFAT_FLAG_CONTIGUOUS;
    9fda:	ldrb	r3, [r0, #1]
    9fdc:	ite	ne
    9fde:	orrne.w	r3, r3, #2
        } else {
          ds->flags &= ~EXFAT_FLAG_CONTIGUOUS;
    9fe2:	biceq.w	r3, r3, #2
    9fe6:	strb	r3, [r0, #1]
        }
        setLe64(ds->validLength, m_validLength);
        setLe32(ds->firstCluster, m_firstCluster);
        setLe64(ds->dataLength, m_dataLength);
        m_vol->dataCacheDirty();
    9fe8:	ldr	r0, [r6, #32]
          ds->flags |= EXFAT_FLAG_CONTIGUOUS;
        } else {
          ds->flags &= ~EXFAT_FLAG_CONTIGUOUS;
        }
        setLe64(ds->validLength, m_validLength);
        setLe32(ds->firstCluster, m_firstCluster);
    9fea:	ldr	r1, [r6, #28]
        if (isContiguous()) {
          ds->flags |= EXFAT_FLAG_CONTIGUOUS;
        } else {
          ds->flags &= ~EXFAT_FLAG_CONTIGUOUS;
        }
        setLe64(ds->validLength, m_validLength);
    9fec:	ldrd	r2, r3, [r6, #16]
}

inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
    9ff0:	str	r1, [r5, #20]
}
inline void setLe64(uint8_t* dst, uint64_t src) {
  *reinterpret_cast<uint64_t*>(dst) = src;
    9ff2:	strd	r2, r3, [r5, #8]
        setLe32(ds->firstCluster, m_firstCluster);
        setLe64(ds->dataLength, m_dataLength);
    9ff6:	ldrd	r2, r3, [r6, #8]
    9ffa:	strd	r2, r3, [r5, #24]
    9ffe:	ldrb.w	r3, [r0, #528]	; 0x210
    a002:	orr.w	r3, r3, #1
    a006:	strb.w	r3, [r0, #528]	; 0x210
    a00a:	ldrb	r3, [r5, #0]
    a00c:	b.n	9f80 <ExFatFile::syncDir()+0x98>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  df = reinterpret_cast<DirFile_t*>
       (m_vol->dirCache(&m_dirPos, FsCache::CACHE_FOR_WRITE));
    a00e:	mov	r1, fp
    a010:	movs	r2, #1
    a012:	ldr	r0, [r6, #32]
    a014:	bl	99e8 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
  if (!df) {
    a018:	cmp	r0, #0
    a01a:	beq.n	9f26 <ExFatFile::syncDir()+0x3e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  setLe16(df->setChecksum, checksum);
  if (!m_vol->cacheSync()) {
    a01c:	ldr	r5, [r6, #32]
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    a01e:	strh	r4, [r0, #2]
#endif  // USE_EXFAT_BITMAP_CACHE
    m_dataCache.init(dev);
  }
  bool cacheSync() {
#if USE_EXFAT_BITMAP_CACHE
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    a020:	mov	r0, r5
    a022:	bl	8de0 <FsCache::sync()>
    a026:	cmp	r0, #0
    a028:	beq.w	9f26 <ExFatFile::syncDir()+0x3e>
    a02c:	add.w	r0, r5, #528	; 0x210
    a030:	bl	8de0 <FsCache::sync()>
    a034:	cmp	r0, #0
    a036:	beq.w	9f26 <ExFatFile::syncDir()+0x3e>
    a03a:	ldr.w	r0, [r5, #1088]	; 0x440
  bool fatPut(uint32_t cluster, uint32_t value);
  uint32_t chainSize(uint32_t cluster);
  bool freeChain(uint32_t cluster);
  uint16_t sectorMask() const {return m_sectorMask;}
  bool syncDevice() {
    return m_blockDev->syncDevice();
    a03e:	ldr	r3, [r0, #0]
    a040:	ldr	r3, [r3, #24]
    a042:	blx	r3
#endif  // USE_EXFAT_BITMAP_CACHE
    m_dataCache.init(dev);
  }
  bool cacheSync() {
#if USE_EXFAT_BITMAP_CACHE
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    a044:	cmp	r0, #0
    a046:	beq.w	9f26 <ExFatFile::syncDir()+0x3e>
    a04a:	b.n	9f34 <ExFatFile::syncDir()+0x4c>
    a04c:	.word	0x20044068

0000a050 <ExFatFile::sync()>:
 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::sync() {
  if (!isOpen()) {
    a050:	ldrb.w	r2, [r0, #49]	; 0x31
    a054:	cbz	r2, a07c <ExFatFile::sync()+0x2c>

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::sync() {
    a056:	push	{r3, r4, r5, lr}
  if (!isOpen()) {
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    a058:	ldrb.w	r2, [r0, #51]	; 0x33
    a05c:	lsls	r1, r2, #24
    a05e:	bmi.n	a080 <ExFatFile::sync()+0x30>
    // clear directory dirty
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    return syncDir();
  }
  if (!m_vol->cacheSync()) {
    a060:	ldr	r5, [r0, #32]
    a062:	mov	r4, r0
    a064:	mov	r0, r5
    a066:	bl	8de0 <FsCache::sync()>
    a06a:	cbnz	r0, a090 <ExFatFile::sync()+0x40>
    goto fail;
  }
  return true;

 fail:
  m_error |= WRITE_ERROR;
    a06c:	ldrb.w	r3, [r4, #50]	; 0x32
  return false;
    a070:	movs	r0, #0
    goto fail;
  }
  return true;

 fail:
  m_error |= WRITE_ERROR;
    a072:	orr.w	r3, r3, #1
    a076:	strb.w	r3, [r4, #50]	; 0x32
  return false;
}
    a07a:	pop	{r3, r4, r5, pc}
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::sync() {
  if (!isOpen()) {
    return true;
    a07c:	movs	r0, #1
  return true;

 fail:
  m_error |= WRITE_ERROR;
  return false;
}
    a07e:	bx	lr
  if (!isOpen()) {
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    // clear directory dirty
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    a080:	and.w	r2, r2, #127	; 0x7f
    a084:	strb.w	r2, [r0, #51]	; 0x33
  return true;

 fail:
  m_error |= WRITE_ERROR;
  return false;
}
    a088:	ldmia.w	sp!, {r3, r4, r5, lr}
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    // clear directory dirty
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    return syncDir();
    a08c:	b.w	9ee8 <ExFatFile::syncDir()>
    a090:	add.w	r0, r5, #528	; 0x210
    a094:	bl	8de0 <FsCache::sync()>
    a098:	cmp	r0, #0
    a09a:	beq.n	a06c <ExFatFile::sync()+0x1c>
    a09c:	ldr.w	r0, [r5, #1088]	; 0x440
  bool fatPut(uint32_t cluster, uint32_t value);
  uint32_t chainSize(uint32_t cluster);
  bool freeChain(uint32_t cluster);
  uint16_t sectorMask() const {return m_sectorMask;}
  bool syncDevice() {
    return m_blockDev->syncDevice();
    a0a0:	ldr	r3, [r0, #0]
    a0a2:	ldr	r3, [r3, #24]
    a0a4:	blx	r3
#endif  // USE_EXFAT_BITMAP_CACHE
    m_dataCache.init(dev);
  }
  bool cacheSync() {
#if USE_EXFAT_BITMAP_CACHE
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    a0a6:	cmp	r0, #0
    a0a8:	beq.n	a06c <ExFatFile::sync()+0x1c>
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::sync() {
  if (!isOpen()) {
    return true;
    a0aa:	movs	r0, #1
    a0ac:	pop	{r3, r4, r5, pc}
    a0ae:	nop

0000a0b0 <ExFatFile::addDirCluster()>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::addDirCluster() {
    a0b0:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t sector;
  uint32_t dl = isRoot() ? m_vol->rootLength() : m_dataLength;
    a0b4:	ldrb.w	r3, [r0, #49]	; 0x31

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::addDirCluster() {
    a0b8:	mov	r4, r0
  uint32_t sector;
  uint32_t dl = isRoot() ? m_vol->rootLength() : m_dataLength;
    a0ba:	lsls	r1, r3, #25
    a0bc:	bmi.n	a17e <ExFatFile::addDirCluster()+0xce>
    a0be:	ldr	r0, [r0, #8]
    a0c0:	ldr	r3, [r4, #32]
  uint8_t* cache;
  dl += m_vol->bytesPerCluster();
  if (dl >= 0X4000000) {
    a0c2:	ldr.w	r3, [r3, #1084]	; 0x43c
    a0c6:	add	r0, r3
    a0c8:	cmp.w	r0, #67108864	; 0x4000000
    a0cc:	bcc.n	a0d4 <ExFatFile::addDirCluster()+0x24>
  }
  return sync();

 fail:
  return false;
}
    a0ce:	movs	r0, #0
    a0d0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  dl += m_vol->bytesPerCluster();
  if (dl >= 0X4000000) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!addCluster()) {
    a0d4:	mov	r0, r4
    a0d6:	bl	9d24 <ExFatFile::addCluster()>
    a0da:	cmp	r0, #0
    a0dc:	beq.n	a0ce <ExFatFile::addDirCluster()+0x1e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  cache =  m_vol->cacheClear();
    a0de:	ldr	r6, [r4, #32]
    }
    return m_blockDev->writeSectors(sector, src, count);
  }
  /** \return Clear the cache and returns a pointer to the cache. */
  uint8_t* clear() {
    if (isDirty() && !sync()) {
    a0e0:	ldrb.w	r3, [r6, #528]	; 0x210
    a0e4:	lsls	r2, r3, #31
    a0e6:	bmi.n	a186 <ExFatFile::addDirCluster()+0xd6>
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    m_sector = 0XFFFFFFFF;
    a0e8:	mov.w	r3, #4294967295
    m_blockDev = blockDev;
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    a0ec:	movs	r5, #0
  uint8_t* clear() {
    if (isDirty() && !sync()) {
      return nullptr;
    }
    invalidate();
    return m_buffer;
    a0ee:	add.w	r8, r6, #544	; 0x220
  if (!cache) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(cache, 0, m_vol->bytesPerSector());
    a0f2:	mov.w	r2, #512	; 0x200
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    m_sector = 0XFFFFFFFF;
    a0f6:	str.w	r3, [r6, #540]	; 0x21c
    a0fa:	mov	r1, r5
    m_blockDev = blockDev;
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    a0fc:	strb.w	r5, [r6, #528]	; 0x210
    a100:	mov	r0, r8
    a102:	bl	10bfc <memset>
  sector = m_vol->clusterStartSector(m_curCluster);
    a106:	ldr	r2, [r4, #32]
  bool dataCacheSync() {return m_dataCache.sync();}
  //----------------------------------------------------------------------------
  uint32_t clusterMask() const {return m_clusterMask;}
  uint32_t clusterStartSector(uint32_t cluster) {
    return m_clusterHeapStartSector +
           ((cluster - 2) << m_sectorsPerClusterShift);
    a108:	ldr	r7, [r4, #24]
  for (uint32_t i = 0; i < m_vol->sectorsPerCluster(); i++) {
    a10a:	movs	r6, #1
    a10c:	ldrb.w	r1, [r2, #1093]	; 0x445
    a110:	subs	r7, #2
    a112:	ldr.w	r3, [r2, #1068]	; 0x42c
    a116:	lsls	r7, r1
    a118:	add	r7, r3
    a11a:	lsls.w	r3, r6, r1
    a11e:	beq.n	a142 <ExFatFile::addDirCluster()+0x92>
    a120:	ldr.w	r0, [r2, #1088]	; 0x440
  }
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
  }
  bool writeSector(uint32_t sector, const uint8_t* src) {
    return m_blockDev->writeSector(sector, src);
    a124:	adds	r1, r7, r5
    a126:	mov	r2, r8
    a128:	adds	r5, #1
    a12a:	ldr	r3, [r0, #0]
    a12c:	ldr	r3, [r3, #28]
    a12e:	blx	r3
    if (!m_vol->writeSector(sector + i, cache)) {
    a130:	cmp	r0, #0
    a132:	beq.n	a0ce <ExFatFile::addDirCluster()+0x1e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(cache, 0, m_vol->bytesPerSector());
  sector = m_vol->clusterStartSector(m_curCluster);
  for (uint32_t i = 0; i < m_vol->sectorsPerCluster(); i++) {
    a134:	ldr	r2, [r4, #32]
    a136:	ldrb.w	r3, [r2, #1093]	; 0x445
    a13a:	lsl.w	r3, r6, r3
    a13e:	cmp	r3, r5
    a140:	bhi.n	a120 <ExFatFile::addDirCluster()+0x70>
    if (!m_vol->writeSector(sector + i, cache)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  if (!isRoot()) {
    a142:	ldrb.w	r3, [r4, #49]	; 0x31
    a146:	lsls	r3, r3, #25
    a148:	bmi.n	a174 <ExFatFile::addDirCluster()+0xc4>
    m_flags |= FILE_FLAG_DIR_DIRTY;
    a14a:	ldrb.w	r3, [r4, #51]	; 0x33
    m_dataLength  += m_vol->bytesPerCluster();
    a14e:	movs	r7, #0
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  if (!isRoot()) {
    m_flags |= FILE_FLAG_DIR_DIRTY;
    a150:	orn	r3, r3, #127	; 0x7f
    a154:	strb.w	r3, [r4, #51]	; 0x33
    m_dataLength  += m_vol->bytesPerCluster();
    a158:	ldr.w	r6, [r2, #1084]	; 0x43c
    a15c:	ldrd	r2, r3, [r4, #8]
    m_validLength += m_vol->bytesPerCluster();
    a160:	ldrd	r0, r1, [r4, #16]
      goto fail;
    }
  }
  if (!isRoot()) {
    m_flags |= FILE_FLAG_DIR_DIRTY;
    m_dataLength  += m_vol->bytesPerCluster();
    a164:	adds	r2, r2, r6
    a166:	adcs	r3, r7
    m_validLength += m_vol->bytesPerCluster();
    a168:	adds	r0, r0, r6
    a16a:	adcs	r1, r7
      goto fail;
    }
  }
  if (!isRoot()) {
    m_flags |= FILE_FLAG_DIR_DIRTY;
    m_dataLength  += m_vol->bytesPerCluster();
    a16c:	strd	r2, r3, [r4, #8]
    m_validLength += m_vol->bytesPerCluster();
    a170:	strd	r0, r1, [r4, #16]
  }
  return sync();
    a174:	mov	r0, r4

 fail:
  return false;
}
    a176:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  if (!isRoot()) {
    m_flags |= FILE_FLAG_DIR_DIRTY;
    m_dataLength  += m_vol->bytesPerCluster();
    m_validLength += m_vol->bytesPerCluster();
  }
  return sync();
    a17a:	b.w	a050 <ExFatFile::sync()>
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::addDirCluster() {
  uint32_t sector;
  uint32_t dl = isRoot() ? m_vol->rootLength() : m_dataLength;
    a17e:	ldr	r0, [r0, #32]
    a180:	bl	9c74 <ExFatPartition::rootLength()>
    a184:	b.n	a0c0 <ExFatFile::addDirCluster()+0x10>
    }
    return m_blockDev->writeSectors(sector, src, count);
  }
  /** \return Clear the cache and returns a pointer to the cache. */
  uint8_t* clear() {
    if (isDirty() && !sync()) {
    a186:	add.w	r0, r6, #528	; 0x210
    a18a:	bl	8de0 <FsCache::sync()>
    a18e:	cmp	r0, #0
    a190:	bne.n	a0e8 <ExFatFile::addDirCluster()+0x38>
    a192:	b.n	a0ce <ExFatFile::addDirCluster()+0x1e>

0000a194 <ExFatFile::mkdir(ExFatFile*, ExName_t*)>:
 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::mkdir(ExFatFile* parent, ExName_t* fname) {
  if (!parent->isDir()) {
    a194:	ldrb.w	r3, [r1, #49]	; 0x31
    a198:	tst.w	r3, #80	; 0x50
    a19c:	bne.n	a1a2 <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0xe>
  m_flags = FILE_FLAG_READ | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
  return sync();

 fail:
  return false;
}
    a19e:	movs	r0, #0
    a1a0:	bx	lr

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::mkdir(ExFatFile* parent, ExName_t* fname) {
    a1a2:	push	{r4, r5, lr}
  uint8_t setCount() const {return m_setCount;}
  bool mkdir(ExFatFile* parent, ExName_t* fname);
  bool openRootFile(ExFatFile* dir,
                    const ExChar_t* name, uint8_t nameLength, oflag_t oflag);
  bool open(ExFatFile* dirFile, ExName_t* fname, oflag_t oflag) {
    return openRootFile(dirFile, fname->lfn, fname->len, oflag);
    a1a4:	movw	r5, #2562	; 0xa02
    a1a8:	sub	sp, #12
    a1aa:	ldrb	r3, [r2, #0]
    a1ac:	mov	r4, r0
    a1ae:	ldr	r2, [r2, #4]
    a1b0:	str	r5, [sp, #0]
    a1b2:	bl	92bc <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)>
  if (!parent->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // create a normal file
  if (!open(parent, fname, O_CREAT | O_EXCL | O_RDWR)) {
    a1b6:	cbnz	r0, a1be <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0x2a>
  m_flags = FILE_FLAG_READ | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
  return sync();

 fail:
  return false;
}
    a1b8:	movs	r0, #0
    a1ba:	add	sp, #12
    a1bc:	pop	{r4, r5, pc}
    DBG_FAIL_MACRO;
    goto fail;
  }
  // convert file to directory

  m_attributes = FILE_ATTR_SUBDIR;
    a1be:	movs	r3, #16

  // allocate and zero first cluster
  if (!addDirCluster()) {
    a1c0:	mov	r0, r4
    DBG_FAIL_MACRO;
    goto fail;
  }
  // convert file to directory

  m_attributes = FILE_ATTR_SUBDIR;
    a1c2:	strb.w	r3, [r4, #49]	; 0x31

  // allocate and zero first cluster
  if (!addDirCluster()) {
    a1c6:	bl	a0b0 <ExFatFile::addDirCluster()>
    a1ca:	cmp	r0, #0
    a1cc:	beq.n	a1b8 <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0x24>
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_firstCluster = m_curCluster;
    a1ce:	ldr	r1, [r4, #24]
   * \return true for success or false for failure.
   */
  bool rename(ExFatFile* dirFile, const ExChar_t* newPath);
  /** Set the file's current position to zero. */
  void rewind() {
    seekSet(0);
    a1d0:	movs	r2, #0
    a1d2:	movs	r3, #0
    a1d4:	mov	r0, r4
    a1d6:	str	r1, [r4, #28]
    a1d8:	bl	91b4 <ExFatFile::seekSet(unsigned long long)>

  // Set to start of dir
  rewind();
  m_flags = FILE_FLAG_READ | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
    a1dc:	movs	r3, #193	; 0xc1
  return sync();
    a1de:	mov	r0, r4
  }
  m_firstCluster = m_curCluster;

  // Set to start of dir
  rewind();
  m_flags = FILE_FLAG_READ | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
    a1e0:	strb.w	r3, [r4, #51]	; 0x33
  return sync();

 fail:
  return false;
}
    a1e4:	add	sp, #12
    a1e6:	ldmia.w	sp!, {r4, r5, lr}
  m_firstCluster = m_curCluster;

  // Set to start of dir
  rewind();
  m_flags = FILE_FLAG_READ | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
  return sync();
    a1ea:	b.w	a050 <ExFatFile::sync()>
    a1ee:	nop

0000a1f0 <ExFatFile::mkdir(ExFatFile*, char const*, bool)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::mkdir(ExFatFile* parent, const ExChar_t* path, bool pFlag) {
    a1f0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    a1f4:	mov	r6, r0
    a1f6:	sub	sp, #84	; 0x54
 * \brief Basic file class.
 */
class ExFatFile {
 public:
  /** Create an instance. */
  ExFatFile() {}
    a1f8:	movs	r0, #0
    a1fa:	mov	r4, r1
  ExName_t fname;
  ExFatFile tmpDir;

  if (isOpen() || !parent->isDir()) {
    a1fc:	ldrb.w	r1, [r6, #49]	; 0x31

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::mkdir(ExFatFile* parent, const ExChar_t* path, bool pFlag) {
    a200:	str	r2, [sp, #12]
    a202:	strb.w	r0, [sp, #73]	; 0x49
    a206:	strb.w	r0, [sp, #74]	; 0x4a
    a20a:	strb.w	r0, [sp, #75]	; 0x4b
  ExName_t fname;
  ExFatFile tmpDir;

  if (isOpen() || !parent->isDir()) {
    a20e:	cbnz	r1, a21c <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x2c>
    a210:	mov	r9, r3
    a212:	ldrb.w	r3, [r4, #49]	; 0x31
    a216:	tst.w	r3, #80	; 0x50
    a21a:	bne.n	a224 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x34>
    close();
  }
  return mkdir(parent, &fname);

 fail:
  return false;
    a21c:	movs	r0, #0
}
    a21e:	add	sp, #84	; 0x54
    a220:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

  if (isOpen() || !parent->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    a224:	ldrb	r3, [r2, #0]
    a226:	mov	r1, r2
    a228:	cmp	r3, #47	; 0x2f
    a22a:	beq.n	a2a0 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xb0>
  uint8_t setCount() const {return m_setCount;}
  bool mkdir(ExFatFile* parent, ExName_t* fname);
  bool openRootFile(ExFatFile* dir,
                    const ExChar_t* name, uint8_t nameLength, oflag_t oflag);
  bool open(ExFatFile* dirFile, ExName_t* fname, oflag_t oflag) {
    return openRootFile(dirFile, fname->lfn, fname->len, oflag);
    a22c:	mov.w	r8, #0
      goto fail;
    }
    parent = &tmpDir;
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
    a230:	add	r3, sp, #12
    a232:	add	r2, sp, #16
    a234:	mov	r0, r6
    a236:	bl	8ed8 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>
    a23a:	cmp	r0, #0
    a23c:	beq.n	a21c <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x2c>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!*path) {
    a23e:	ldr	r3, [sp, #12]
    a240:	ldrb	r3, [r3, #0]
    a242:	cmp	r3, #0
    a244:	beq.n	a2bc <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xcc>
    a246:	ldrb.w	r3, [sp, #16]
    a24a:	mov	r1, r4
    a24c:	ldr	r2, [sp, #20]
    a24e:	mov	r0, r6
    a250:	str.w	r8, [sp]
    a254:	bl	92bc <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)>
      break;
    }
    if (!open(parent, &fname, O_RDONLY)) {
    a258:	cbnz	r0, a26e <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x7e>
      if (!pFlag || !mkdir(parent, &fname)) {
    a25a:	cmp.w	r9, #0
    a25e:	beq.n	a21c <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x2c>
    a260:	mov	r1, r4
    a262:	add	r2, sp, #16
    a264:	mov	r0, r6
    a266:	bl	a194 <ExFatFile::mkdir(ExFatFile*, ExName_t*)>
    a26a:	cmp	r0, #0
    a26c:	beq.n	a21c <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x2c>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    tmpDir = *this;
    a26e:	mov	r4, r6
    a270:	add	r7, sp, #24
    a272:	add.w	lr, r6, #48	; 0x30
    a276:	ldr	r0, [r4, #0]
    a278:	adds	r4, #16
    a27a:	ldr.w	r1, [r4, #-12]
    a27e:	mov	r5, r7
    a280:	ldr.w	r2, [r4, #-8]
    a284:	adds	r7, #16
    a286:	ldr.w	r3, [r4, #-4]
    a28a:	cmp	r4, lr
    a28c:	stmia	r5!, {r0, r1, r2, r3}
    a28e:	bne.n	a276 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x86>
    a290:	ldr	r0, [r4, #0]
    parent = &tmpDir;
    a292:	add	r4, sp, #24
      if (!pFlag || !mkdir(parent, &fname)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    tmpDir = *this;
    a294:	str	r0, [r7, #0]
    parent = &tmpDir;
    close();
    a296:	mov	r0, r6
    a298:	bl	8df0 <ExFatFile::close()>
    a29c:	ldr	r1, [sp, #12]
      DBG_FAIL_MACRO;
      goto fail;
    }
    parent = &tmpDir;
  }
  while (1) {
    a29e:	b.n	a230 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x40>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
      path++;
    a2a0:	adds	r1, #1
    a2a2:	str	r1, [sp, #12]
  if (isOpen() || !parent->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
    a2a4:	ldrb	r3, [r1, #0]
    a2a6:	cmp	r3, #47	; 0x2f
    a2a8:	beq.n	a2a0 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xb0>
      path++;
    }
    if (!tmpDir.openRoot(parent->m_vol)) {
    a2aa:	ldr	r1, [r4, #32]
    a2ac:	add	r0, sp, #24
    a2ae:	bl	8eb0 <ExFatFile::openRoot(ExFatVolume*)>
    a2b2:	cmp	r0, #0
    a2b4:	beq.n	a21c <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x2c>
      DBG_FAIL_MACRO;
      goto fail;
    }
    parent = &tmpDir;
    a2b6:	add	r4, sp, #24
    a2b8:	ldr	r1, [sp, #12]
    a2ba:	b.n	a22c <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x3c>
    }
    tmpDir = *this;
    parent = &tmpDir;
    close();
  }
  return mkdir(parent, &fname);
    a2bc:	add	r2, sp, #16
    a2be:	mov	r1, r4
    a2c0:	mov	r0, r6
    a2c2:	bl	a194 <ExFatFile::mkdir(ExFatFile*, ExName_t*)>

 fail:
  return false;
}
    a2c6:	add	sp, #84	; 0x54
    a2c8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0000a2cc <ExFatFile::rename(ExFatFile*, char const*)>:
//------------------------------------------------------------------------------
bool ExFatFile::rename(const ExChar_t* newPath) {
  return rename(m_vol->vwd(), newPath);
}
//------------------------------------------------------------------------------
bool ExFatFile::rename(ExFatFile* dirFile, const ExChar_t* newPath) {
    a2cc:	push	{r4, r5, r6, r7, lr}
  ExFatFile file;
  ExFatFile oldFile;

  // Must be an open file or subdirectory.
  if (!(isFile() || isSubDir())) {
    a2ce:	ldrb.w	r4, [r0, #49]	; 0x31
//------------------------------------------------------------------------------
bool ExFatFile::rename(const ExChar_t* newPath) {
  return rename(m_vol->vwd(), newPath);
}
//------------------------------------------------------------------------------
bool ExFatFile::rename(ExFatFile* dirFile, const ExChar_t* newPath) {
    a2d2:	sub	sp, #116	; 0x74
 * \brief Basic file class.
 */
class ExFatFile {
 public:
  /** Create an instance. */
  ExFatFile() {}
    a2d4:	movs	r3, #0
  ExFatFile file;
  ExFatFile oldFile;

  // Must be an open file or subdirectory.
  if (!(isFile() || isSubDir())) {
    a2d6:	tst.w	r4, #24
    a2da:	strb.w	r3, [sp, #49]	; 0x31
    a2de:	strb.w	r3, [sp, #50]	; 0x32
    a2e2:	strb.w	r3, [sp, #51]	; 0x33
    a2e6:	strb.w	r3, [sp, #105]	; 0x69
    a2ea:	strb.w	r3, [sp, #106]	; 0x6a
    a2ee:	strb.w	r3, [sp, #107]	; 0x6b
    a2f2:	beq.n	a2fc <ExFatFile::rename(ExFatFile*, char const*)+0x30>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Can't move file to new volume.
  if (m_vol != dirFile->m_vol) {
    a2f4:	ldr	r3, [r1, #32]
    a2f6:	ldr	r4, [r0, #32]
    a2f8:	cmp	r4, r3
    a2fa:	beq.n	a302 <ExFatFile::rename(ExFatFile*, char const*)+0x36>
  oldFile.m_flags = FILE_FLAG_WRITE;
  oldFile.m_attributes = FILE_ATTR_FILE;
  return oldFile.remove();

 fail:
  return false;
    a2fc:	movs	r0, #0
}
    a2fe:	add	sp, #116	; 0x74
    a300:	pop	{r4, r5, r6, r7, pc}
    a302:	mov	r4, r0
  // Can't move file to new volume.
  if (m_vol != dirFile->m_vol) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!file.open(dirFile, newPath, O_CREAT | O_EXCL | O_WRONLY)) {
    a304:	movw	r3, #2561	; 0xa01
    a308:	mov	r0, sp
    a30a:	bl	969c <ExFatFile::open(ExFatFile*, char const*, int)>
    a30e:	cmp	r0, #0
    a310:	beq.n	a2fc <ExFatFile::rename(ExFatFile*, char const*)+0x30>
    DBG_FAIL_MACRO;
    goto fail;
  }
  oldFile = *this;
    a312:	mov	r5, r4
    a314:	add.w	lr, r4, #48	; 0x30
    a318:	add	r7, sp, #56	; 0x38
    a31a:	ldr	r0, [r5, #0]
    a31c:	adds	r5, #16
    a31e:	ldr.w	r1, [r5, #-12]
    a322:	mov	r6, r7
    a324:	ldr.w	r2, [r5, #-8]
    a328:	adds	r7, #16
    a32a:	ldr.w	r3, [r5, #-4]
    a32e:	cmp	r5, lr
    a330:	stmia	r6!, {r0, r1, r2, r3}
    a332:	bne.n	a31a <ExFatFile::rename(ExFatFile*, char const*)+0x4e>
    a334:	ldr	r0, [r5, #0]
  m_dirPos = file.m_dirPos;
    a336:	add	r2, sp, #36	; 0x24
    a338:	add.w	r3, r4, #36	; 0x24
  }
  if (!file.open(dirFile, newPath, O_CREAT | O_EXCL | O_WRONLY)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  oldFile = *this;
    a33c:	str	r0, [r7, #0]
  m_dirPos = file.m_dirPos;
  m_setCount = file.m_setCount;
    a33e:	ldrb.w	r5, [sp, #48]	; 0x30
  if (!file.open(dirFile, newPath, O_CREAT | O_EXCL | O_WRONLY)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  oldFile = *this;
  m_dirPos = file.m_dirPos;
    a342:	ldmia	r2, {r0, r1, r2}
    a344:	stmia.w	r3, {r0, r1, r2}
  m_setCount = file.m_setCount;
  m_flags |= FILE_FLAG_DIR_DIRTY;
    a348:	ldrb.w	r3, [r4, #51]	; 0x33
  if (!sync()) {
    a34c:	mov	r0, r4
    DBG_FAIL_MACRO;
    goto fail;
  }
  oldFile = *this;
  m_dirPos = file.m_dirPos;
  m_setCount = file.m_setCount;
    a34e:	strb.w	r5, [r4, #48]	; 0x30
  m_flags |= FILE_FLAG_DIR_DIRTY;
    a352:	orn	r3, r3, #127	; 0x7f
    a356:	strb.w	r3, [r4, #51]	; 0x33
  if (!sync()) {
    a35a:	bl	a050 <ExFatFile::sync()>
    a35e:	cmp	r0, #0
    a360:	beq.n	a2fc <ExFatFile::rename(ExFatFile*, char const*)+0x30>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Remove old directory entry;
  oldFile.m_firstCluster = 0;
    a362:	movs	r1, #0
  oldFile.m_flags = FILE_FLAG_WRITE;
    a364:	movs	r2, #2
  oldFile.m_attributes = FILE_ATTR_FILE;
    a366:	movs	r3, #8
  return oldFile.remove();
    a368:	add	r0, sp, #56	; 0x38
  if (!sync()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Remove old directory entry;
  oldFile.m_firstCluster = 0;
    a36a:	str	r1, [sp, #84]	; 0x54
  oldFile.m_flags = FILE_FLAG_WRITE;
    a36c:	strb.w	r2, [sp, #107]	; 0x6b
  oldFile.m_attributes = FILE_ATTR_FILE;
    a370:	strb.w	r3, [sp, #105]	; 0x69
  return oldFile.remove();
    a374:	bl	9db4 <ExFatFile::remove()>
    a378:	b.n	a2fe <ExFatFile::rename(ExFatFile*, char const*)+0x32>
    a37a:	nop

0000a37c <ExFatFile::truncate()>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::truncate() {
    a37c:	ldrb.w	r3, [r0, #51]	; 0x33
  uint32_t toFree;
  // error if not a normal file or read-only
  if (!isWritable()) {
    a380:	lsls	r2, r3, #30
    a382:	bpl.n	a3b6 <ExFatFile::truncate()+0x3a>

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::truncate() {
    a384:	push	{r4, r5, r6, r7, lr}
  // error if not a normal file or read-only
  if (!isWritable()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_firstCluster == 0) {
    a386:	ldr	r5, [r0, #28]

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::truncate() {
    a388:	sub	sp, #12
  // error if not a normal file or read-only
  if (!isWritable()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_firstCluster == 0) {
    a38a:	cbz	r5, a3b0 <ExFatFile::truncate()+0x34>
      return true;
  }
  if (isContiguous()) {
    a38c:	and.w	r3, r3, #64	; 0x40
    a390:	mov	r4, r0
    a392:	and.w	r6, r3, #255	; 0xff
    a396:	cbnz	r3, a3ba <ExFatFile::truncate()+0x3e>
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else {
    // need to free chain
    if (m_curCluster) {
    a398:	ldr	r1, [r0, #24]
    a39a:	cmp	r1, #0
    a39c:	bne.n	a424 <ExFatFile::truncate()+0xa8>
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
    } else {
      toFree = m_firstCluster;
    a39e:	str	r5, [sp, #4]
      m_firstCluster = 0;
    a3a0:	str	r1, [r0, #28]
    }
    if (toFree) {
      if (!m_vol->freeChain(toFree)) {
    a3a2:	mov	r1, r5
    a3a4:	ldr	r0, [r4, #32]
    a3a6:	bl	9ab0 <ExFatPartition::freeChain(unsigned long)>
    a3aa:	cbnz	r0, a3fc <ExFatFile::truncate()+0x80>
  m_validLength = m_curPosition;
  m_flags |= FILE_FLAG_DIR_DIRTY;
  return sync();

 fail:
  return false;
    a3ac:	movs	r0, #0
    a3ae:	b.n	a3b2 <ExFatFile::truncate()+0x36>
  if (!isWritable()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_firstCluster == 0) {
      return true;
    a3b0:	movs	r0, #1
  m_flags |= FILE_FLAG_DIR_DIRTY;
  return sync();

 fail:
  return false;
}
    a3b2:	add	sp, #12
    a3b4:	pop	{r4, r5, r6, r7, pc}
  m_validLength = m_curPosition;
  m_flags |= FILE_FLAG_DIR_DIRTY;
  return sync();

 fail:
  return false;
    a3b6:	movs	r0, #0
}
    a3b8:	bx	lr
    a3ba:	ldr	r0, [r0, #32]
  if (m_firstCluster == 0) {
      return true;
  }
  if (isContiguous()) {
    uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    if (m_curCluster) {
    a3bc:	ldr	r1, [r4, #24]
  }
  if (m_firstCluster == 0) {
      return true;
  }
  if (isContiguous()) {
    uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    a3be:	ldrb.w	r2, [r0, #1093]	; 0x445
    a3c2:	ldrd	r6, r7, [r4, #8]
    a3c6:	adds	r2, #9
    a3c8:	adds.w	r6, r6, #4294967295
    a3cc:	uxtb	r2, r2
    a3ce:	adc.w	r7, r7, #4294967295
    a3d2:	rsb	lr, r2, #32
    a3d6:	sub.w	r3, r2, #32
    a3da:	lsr.w	r2, r6, r2
    a3de:	lsl.w	lr, r7, lr
    a3e2:	lsr.w	r3, r7, r3
    a3e6:	orr.w	r2, r2, lr
    a3ea:	orrs	r2, r3
    a3ec:	adds	r2, #1
    if (m_curCluster) {
    a3ee:	cbz	r1, a41e <ExFatFile::truncate()+0xa2>
      toFree = m_curCluster + 1;
      nc -= 1 + m_curCluster - m_firstCluster;
    a3f0:	subs	r5, #1
      return true;
  }
  if (isContiguous()) {
    uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    if (m_curCluster) {
      toFree = m_curCluster + 1;
    a3f2:	adds	r3, r1, #1
      nc -= 1 + m_curCluster - m_firstCluster;
    a3f4:	subs	r1, r5, r1
      return true;
  }
  if (isContiguous()) {
    uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    if (m_curCluster) {
      toFree = m_curCluster + 1;
    a3f6:	str	r3, [sp, #4]
      nc -= 1 + m_curCluster - m_firstCluster;
    a3f8:	add	r2, r1
    } else {
      toFree = m_firstCluster;
      m_firstCluster = 0;
    }
    if (nc && !m_vol->bitmapModify(toFree, nc, 0)) {
    a3fa:	cbnz	r2, a440 <ExFatFile::truncate()+0xc4>
      }
    }
  }
  m_dataLength = m_curPosition;
  m_validLength = m_curPosition;
  m_flags |= FILE_FLAG_DIR_DIRTY;
    a3fc:	ldrb.w	r3, [r4, #51]	; 0x33
  return sync();
    a400:	mov	r0, r4
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
  }
  m_dataLength = m_curPosition;
    a402:	ldrd	r6, r7, [r4]
  m_validLength = m_curPosition;
  m_flags |= FILE_FLAG_DIR_DIRTY;
    a406:	orn	r3, r3, #127	; 0x7f
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
  }
  m_dataLength = m_curPosition;
    a40a:	strd	r6, r7, [r4, #8]
  m_validLength = m_curPosition;
  m_flags |= FILE_FLAG_DIR_DIRTY;
    a40e:	strb.w	r3, [r4, #51]	; 0x33
        goto fail;
      }
    }
  }
  m_dataLength = m_curPosition;
  m_validLength = m_curPosition;
    a412:	strd	r6, r7, [r4, #16]
  m_flags |= FILE_FLAG_DIR_DIRTY;
  return sync();
    a416:	bl	a050 <ExFatFile::sync()>

 fail:
  return false;
}
    a41a:	add	sp, #12
    a41c:	pop	{r4, r5, r6, r7, pc}
    uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    if (m_curCluster) {
      toFree = m_curCluster + 1;
      nc -= 1 + m_curCluster - m_firstCluster;
    } else {
      toFree = m_firstCluster;
    a41e:	str	r5, [sp, #4]
      m_firstCluster = 0;
    a420:	str	r1, [r4, #28]
    a422:	b.n	a3fa <ExFatFile::truncate()+0x7e>
      goto fail;
    }
  } else {
    // need to free chain
    if (m_curCluster) {
      toFree = 0;
    a424:	add	r2, sp, #8
      int8_t fg = m_vol->fatGet(m_curCluster, &toFree);
    a426:	ldr	r0, [r0, #32]
      goto fail;
    }
  } else {
    // need to free chain
    if (m_curCluster) {
      toFree = 0;
    a428:	str.w	r6, [r2, #-4]!
      int8_t fg = m_vol->fatGet(m_curCluster, &toFree);
    a42c:	bl	9a78 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
    a430:	sxtb	r0, r0
      if (fg < 0) {
    a432:	cmp	r0, #0
    a434:	blt.n	a3ac <ExFatFile::truncate()+0x30>
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (fg) {
    a436:	bne.n	a44e <ExFatFile::truncate()+0xd2>
      }
    } else {
      toFree = m_firstCluster;
      m_firstCluster = 0;
    }
    if (toFree) {
    a438:	ldr	r5, [sp, #4]
    a43a:	cmp	r5, #0
    a43c:	beq.n	a3fc <ExFatFile::truncate()+0x80>
    a43e:	b.n	a3a2 <ExFatFile::truncate()+0x26>
      nc -= 1 + m_curCluster - m_firstCluster;
    } else {
      toFree = m_firstCluster;
      m_firstCluster = 0;
    }
    if (nc && !m_vol->bitmapModify(toFree, nc, 0)) {
    a440:	movs	r3, #0
    a442:	ldr	r1, [sp, #4]
    a444:	bl	9904 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    a448:	cmp	r0, #0
    a44a:	bne.n	a3fc <ExFatFile::truncate()+0x80>
    a44c:	b.n	a3ac <ExFatFile::truncate()+0x30>
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (fg) {
        // current cluster is end of chain
        if (!m_vol->fatPut(m_curCluster, EXFAT_EOC)) {
    a44e:	mov.w	r2, #4294967295
    a452:	ldr	r1, [r4, #24]
    a454:	ldr	r0, [r4, #32]
    a456:	bl	9a8c <ExFatPartition::fatPut(unsigned long, unsigned long)>
    a45a:	cmp	r0, #0
    a45c:	bne.n	a438 <ExFatFile::truncate()+0xbc>
    a45e:	b.n	a3ac <ExFatFile::truncate()+0x30>

0000a460 <ExFatFile::write(void const*, unsigned int)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
size_t ExFatFile::write(const void* buf, size_t nbyte) {
    a460:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a464:	ldrb.w	r3, [r0, #51]	; 0x33
    a468:	sub	sp, #12
    a46a:	mov	r4, r0

  // number of bytes left to write  -  must be before goto statements
  size_t toWrite = nbyte;
  size_t n;
  // error if not an open file or is read-only
  if (!isWritable()) {
    a46c:	lsls	r5, r3, #30

 fail:
  return false;
}
//------------------------------------------------------------------------------
size_t ExFatFile::write(const void* buf, size_t nbyte) {
    a46e:	str	r2, [sp, #0]

  // number of bytes left to write  -  must be before goto statements
  size_t toWrite = nbyte;
  size_t n;
  // error if not an open file or is read-only
  if (!isWritable()) {
    a470:	bmi.n	a488 <ExFatFile::write(void const*, unsigned int)+0x28>
  }
  return nbyte;

 fail:
  // return for write error
  m_error |= WRITE_ERROR;
    a472:	ldrb.w	r3, [r4, #50]	; 0x32
  return -1;
    a476:	mov.w	r0, #4294967295
  }
  return nbyte;

 fail:
  // return for write error
  m_error |= WRITE_ERROR;
    a47a:	orr.w	r3, r3, #1
    a47e:	strb.w	r3, [r4, #50]	; 0x32
  return -1;
}
    a482:	add	sp, #12
    a484:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (!isWritable()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & FILE_FLAG_APPEND)) {
    a488:	lsls	r2, r3, #28
    a48a:	mov	r8, r1
    a48c:	bmi.w	a69e <ExFatFile::write(void const*, unsigned int)+0x23e>
    if (!seekSet(m_validLength)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  while (toWrite) {
    a490:	ldr	r3, [sp, #0]
    a492:	cmp	r3, #0
    a494:	beq.w	a6c6 <ExFatFile::write(void const*, unsigned int)+0x266>
    a498:	mov	r1, r4
    a49a:	ldr	r5, [sp, #0]
      if (sectorOffset == 0 && m_curPosition >= m_validLength) {
        // start of new sector don't need to read into cache
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
      } else {
        // rewrite part of sector
        cacheOption = FsCache::CACHE_FOR_WRITE;
    a49c:	mov.w	sl, #1
    a4a0:	ldrd	r2, r3, [r1], #24
    a4a4:	mov	fp, r2
    a4a6:	str	r1, [sp, #4]
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  while (toWrite) {
    clusterOffset = m_curPosition & m_vol->clusterMask();
    a4a8:	ldr	r0, [r4, #32]
    sectorOffset = clusterOffset & m_vol->sectorMask();
    if (clusterOffset == 0) {
      // start of new cluster
      if (m_curCluster != 0) {
    a4aa:	ldr	r1, [r4, #24]
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  while (toWrite) {
    clusterOffset = m_curPosition & m_vol->clusterMask();
    a4ac:	ldr.w	r6, [r0, #1080]	; 0x438
    a4b0:	and.w	r6, r6, fp
    sectorOffset = clusterOffset & m_vol->sectorMask();
    a4b4:	ubfx	r9, r6, #0, #9
    if (clusterOffset == 0) {
    a4b8:	cbnz	r6, a510 <ExFatFile::write(void const*, unsigned int)+0xb0>
      // start of new cluster
      if (m_curCluster != 0) {
    a4ba:	cmp	r1, #0
    a4bc:	beq.w	a63a <ExFatFile::write(void const*, unsigned int)+0x1da>
        int fg;

        if (isContiguous()) {
    a4c0:	ldrb.w	r3, [r4, #51]	; 0x33
    a4c4:	lsls	r3, r3, #25
    a4c6:	bpl.w	a66e <ExFatFile::write(void const*, unsigned int)+0x20e>
          uint32_t lc = m_firstCluster;
          lc += (m_dataLength - 1) >> m_vol->bytesPerClusterShift();
          if (m_curCluster < lc) {
    a4ca:	ldrb.w	r2, [r0, #1093]	; 0x445
      // start of new cluster
      if (m_curCluster != 0) {
        int fg;

        if (isContiguous()) {
          uint32_t lc = m_firstCluster;
    a4ce:	ldr	r3, [r4, #28]
          lc += (m_dataLength - 1) >> m_vol->bytesPerClusterShift();
          if (m_curCluster < lc) {
    a4d0:	adds	r2, #9
    a4d2:	ldrd	fp, ip, [r4, #8]
    a4d6:	uxtb	r2, r2
    a4d8:	adds.w	fp, fp, #4294967295
    a4dc:	rsb	lr, r2, #32
    a4e0:	sub.w	r7, r2, #32
    a4e4:	adc.w	ip, ip, #4294967295
    a4e8:	lsr.w	r2, fp, r2
    a4ec:	lsl.w	lr, ip, lr
    a4f0:	lsr.w	r7, ip, r7
    a4f4:	orr.w	r2, r2, lr
    a4f8:	orrs	r2, r7
    a4fa:	add	r2, r3
    a4fc:	cmp	r1, r2
    a4fe:	bcc.w	a668 <ExFatFile::write(void const*, unsigned int)+0x208>
            goto fail;
          }
        }
        if (fg == 0) {
          // add cluster if at end of chain
          if (!addCluster()) {
    a502:	mov	r0, r4
    a504:	bl	9d24 <ExFatFile::addCluster()>
    a508:	cmp	r0, #0
    a50a:	beq.n	a472 <ExFatFile::write(void const*, unsigned int)+0x12>
    a50c:	ldr	r0, [r4, #32]
    a50e:	ldr	r1, [r4, #24]
        }
      }
    }
    // sector for data write
    sector = m_vol->clusterStartSector(m_curCluster) +
             (clusterOffset >> m_vol->bytesPerSectorShift());
    a510:	lsrs	r6, r6, #9
    a512:	subs	r1, #2
    a514:	ldr.w	r7, [r0, #1068]	; 0x42c
  bool dataCacheSync() {return m_dataCache.sync();}
  //----------------------------------------------------------------------------
  uint32_t clusterMask() const {return m_clusterMask;}
  uint32_t clusterStartSector(uint32_t cluster) {
    return m_clusterHeapStartSector +
           ((cluster - 2) << m_sectorsPerClusterShift);
    a518:	ldrb.w	lr, [r0, #1093]	; 0x445
    a51c:	add	r7, r6
    a51e:	lsl.w	r1, r1, lr
    a522:	add	r1, r7

    if (sectorOffset != 0 || toWrite < m_vol->bytesPerSector()) {
    a524:	cmp.w	r9, #0
    a528:	bne.n	a5e2 <ExFatFile::write(void const*, unsigned int)+0x182>
    a52a:	cmp.w	r5, #512	; 0x200
    a52e:	ite	cs
    a530:	movcs	r2, #0
    a532:	movcc	r2, #1
    a534:	cmp	r2, #0
    a536:	bne.n	a5e2 <ExFatFile::write(void const*, unsigned int)+0x182>
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
#if USE_MULTI_SECTOR_IO
    } else if (toWrite >= 2*m_vol->bytesPerSector()) {
    a538:	cmp.w	r5, #1024	; 0x400
    a53c:	bcc.w	a642 <ExFatFile::write(void const*, unsigned int)+0x1e2>
      // use multiple sector write command
      uint32_t ns = toWrite >> m_vol->bytesPerSectorShift();
      // Limit writes to current cluster.
      uint32_t maxNs = m_vol->sectorsPerCluster()
                       - (clusterOffset >> m_vol->bytesPerSectorShift());
    a540:	lsl.w	lr, sl, lr
        }
      }
#if USE_MULTI_SECTOR_IO
    } else if (toWrite >= 2*m_vol->bytesPerSector()) {
      // use multiple sector write command
      uint32_t ns = toWrite >> m_vol->bytesPerSectorShift();
    a544:	lsrs	r3, r5, #9
    a546:	ldr.w	ip, [r0, #540]	; 0x21c
      // Limit writes to current cluster.
      uint32_t maxNs = m_vol->sectorsPerCluster()
                       - (clusterOffset >> m_vol->bytesPerSectorShift());
    a54a:	rsb	r6, r6, lr
    a54e:	cmp	r3, r6
    a550:	it	cs
    a552:	movcs	r3, r6
   * \param[in] sector Start sector of the range.
   * \param[in] count Number of sectors in the range.
   * \return true if a sector in the range is cached.
   */
  bool isCached(uint32_t sector, size_t count) {
    return sector <= m_sector && m_sector < (sector + count);
    a554:	cmp	r1, ip
      if (ns > maxNs) {
        ns = maxNs;
      }
      n = ns << m_vol->bytesPerSectorShift();
    a556:	mov.w	r7, r3, lsl #9
    a55a:	bhi.n	a56e <ExFatFile::write(void const*, unsigned int)+0x10e>
    a55c:	adds	r6, r3, r1
    a55e:	cmp	ip, r6
    a560:	bcs.n	a56e <ExFatFile::write(void const*, unsigned int)+0x10e>
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    m_sector = 0XFFFFFFFF;
    a562:	mov.w	r6, #4294967295
    m_blockDev = blockDev;
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    a566:	strb.w	r2, [r0, #528]	; 0x210
    m_sector = 0XFFFFFFFF;
    a56a:	str.w	r6, [r0, #540]	; 0x21c
   */
  bool cacheSafeWrite(uint32_t sector, const uint8_t* src, size_t count) {
     if (isCached(sector, count)) {
      invalidate();
    }
    return m_blockDev->writeSectors(sector, src, count);
    a56e:	ldr.w	r0, [r0, #532]	; 0x214
    a572:	mov	r2, r8
    a574:	ldr	r6, [r0, #0]
    a576:	ldr	r6, [r6, #32]
    a578:	blx	r6
      if (!m_vol->cacheSafeWrite(sector, src, ns)) {
    a57a:	cmp	r0, #0
    a57c:	beq.w	a472 <ExFatFile::write(void const*, unsigned int)+0x12>
    a580:	mov	r0, r7
    a582:	movs	r1, #0
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    src += n;
    a584:	add	r8, r7
    toWrite -= n;
    a586:	subs	r5, r5, r7
      if (!m_vol->cacheSafeWrite(sector, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    a588:	ldrd	r2, r3, [r4]
    src += n;
    toWrite -= n;
    if (m_curPosition > m_validLength) {
    a58c:	ldrd	r6, r7, [r4, #16]
      if (!m_vol->cacheSafeWrite(sector, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    a590:	adds.w	fp, r2, r0
    a594:	adc.w	ip, r3, r1
    src += n;
    toWrite -= n;
    if (m_curPosition > m_validLength) {
    a598:	cmp	r7, ip
    a59a:	it	eq
    a59c:	cmpeq	r6, fp
      if (!m_vol->cacheSafeWrite(sector, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    a59e:	strd	fp, ip, [r4]
    src += n;
    toWrite -= n;
    if (m_curPosition > m_validLength) {
    a5a2:	bcs.n	a5b4 <ExFatFile::write(void const*, unsigned int)+0x154>
      m_flags |= FILE_FLAG_DIR_DIRTY;
    a5a4:	ldrb.w	r1, [r4, #51]	; 0x33
    a5a8:	orn	r1, r1, #127	; 0x7f
      m_validLength = m_curPosition;
    a5ac:	strd	fp, ip, [r4, #16]
    }
    m_curPosition += n;
    src += n;
    toWrite -= n;
    if (m_curPosition > m_validLength) {
      m_flags |= FILE_FLAG_DIR_DIRTY;
    a5b0:	strb.w	r1, [r4, #51]	; 0x33
    if (!seekSet(m_validLength)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  while (toWrite) {
    a5b4:	cmp	r5, #0
    a5b6:	bne.w	a4a8 <ExFatFile::write(void const*, unsigned int)+0x48>
    a5ba:	mov	r2, fp
    a5bc:	mov	r3, ip
    if (m_curPosition > m_validLength) {
      m_flags |= FILE_FLAG_DIR_DIRTY;
      m_validLength = m_curPosition;
    }
  }
  if (m_curPosition > m_dataLength) {
    a5be:	ldrd	r0, r1, [r4, #8]
    a5c2:	cmp	r1, r3
    a5c4:	it	eq
    a5c6:	cmpeq	r0, r2
    a5c8:	bcc.n	a6ae <ExFatFile::write(void const*, unsigned int)+0x24e>
    m_dataLength = m_curPosition;
    // update fileSize and insure sync will update dir entry
    m_flags |= FILE_FLAG_DIR_DIRTY;
  } else if (FsDateTime::callback) {
    a5ca:	ldr	r3, [pc, #256]	; (a6cc <ExFatFile::write(void const*, unsigned int)+0x26c>)
    a5cc:	ldr	r3, [r3, #0]
    a5ce:	cmp	r3, #0
    a5d0:	beq.n	a6c2 <ExFatFile::write(void const*, unsigned int)+0x262>
    // insure sync will update modified date and time
    m_flags |= FILE_FLAG_DIR_DIRTY;
    a5d2:	ldrb.w	r3, [r4, #51]	; 0x33
    a5d6:	ldr	r0, [sp, #0]
    a5d8:	orn	r3, r3, #127	; 0x7f
    a5dc:	strb.w	r3, [r4, #51]	; 0x33
    a5e0:	b.n	a482 <ExFatFile::write(void const*, unsigned int)+0x22>
      // lesser of space and amount to write
      if (n > toWrite) {
        n = toWrite;
      }

      if (sectorOffset == 0 && m_curPosition >= m_validLength) {
    a5e2:	cmp.w	r9, #0
    a5e6:	bne.n	a636 <ExFatFile::write(void const*, unsigned int)+0x1d6>
    a5e8:	ldrd	r2, r3, [r4, #16]
    a5ec:	ldrd	r6, r7, [r4]
        // start of new sector don't need to read into cache
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
    a5f0:	cmp	r7, r3
    a5f2:	it	eq
    a5f4:	cmpeq	r6, r2
    a5f6:	ite	cc
    a5f8:	movcc	r2, #1
    a5fa:	movcs	r2, #5
#endif  // USE_EXFAT_BITMAP_CACHE
  }
  void dataCacheDirty() {m_dataCache.dirty();}
  void dataCacheInvalidate() {m_dataCache.invalidate();}
  uint8_t* dataCacheGet(uint32_t sector, uint8_t option) {
    return m_dataCache.get(sector, option);
    a5fc:	add.w	r0, r0, #528	; 0x210
    a600:	bl	8d80 <FsCache::get(unsigned long, unsigned char)>
      } else {
        // rewrite part of sector
        cacheOption = FsCache::CACHE_FOR_WRITE;
      }
      cache = m_vol->dataCacheGet(sector, cacheOption);
      if (!cache) {
    a604:	cmp	r0, #0
    a606:	beq.w	a472 <ExFatFile::write(void const*, unsigned int)+0x12>
             (clusterOffset >> m_vol->bytesPerSectorShift());

    if (sectorOffset != 0 || toWrite < m_vol->bytesPerSector()) {
      // partial sector - must use cache
      // max space in sector
      n = m_vol->bytesPerSector() - sectorOffset;
    a60a:	rsb	r7, r9, #512	; 0x200
      if (!cache) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = cache + sectorOffset;
      memcpy(dst, src, n);
    a60e:	add	r0, r9
    a610:	mov	r1, r8
    a612:	cmp	r7, r5
    a614:	it	cs
    a616:	movcs	r7, r5
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    a618:	add	r9, r7
      if (!cache) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = cache + sectorOffset;
      memcpy(dst, src, n);
    a61a:	mov	r2, r7
    a61c:	bl	db14 <memcpy>
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    a620:	cmp.w	r9, #512	; 0x200
    a624:	bne.n	a580 <ExFatFile::write(void const*, unsigned int)+0x120>
  }
  uint32_t dataCacheSector() {return m_dataCache.sector();}
  bool dataCacheSync() {return m_dataCache.sync();}
    a626:	ldr	r0, [r4, #32]
    a628:	add.w	r0, r0, #528	; 0x210
    a62c:	bl	8de0 <FsCache::sync()>
        // Force write if sector is full - improves large writes.
        if (!m_vol->dataCacheSync()) {
    a630:	cmp	r0, #0
    a632:	bne.n	a580 <ExFatFile::write(void const*, unsigned int)+0x120>
    a634:	b.n	a472 <ExFatFile::write(void const*, unsigned int)+0x12>
      if (sectorOffset == 0 && m_curPosition >= m_validLength) {
        // start of new sector don't need to read into cache
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
      } else {
        // rewrite part of sector
        cacheOption = FsCache::CACHE_FOR_WRITE;
    a636:	movs	r2, #1
    a638:	b.n	a5fc <ExFatFile::write(void const*, unsigned int)+0x19c>
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
      } else {
        if (m_firstCluster == 0) {
    a63a:	ldr	r1, [r4, #28]
    a63c:	cbz	r1, a67c <ExFatFile::write(void const*, unsigned int)+0x21c>
            DBG_FAIL_MACRO;
            goto fail;
          }
          m_firstCluster = m_curCluster;
        } else {
          m_curCluster = m_firstCluster;
    a63e:	str	r1, [r4, #24]
    a640:	b.n	a510 <ExFatFile::write(void const*, unsigned int)+0xb0>
   * \param[in] sector Logical sector to be written.
   * \param[in] src Pointer to the location of the data to be written.
   * \return true for success or false for failure.
   */
  bool cacheSafeWrite(uint32_t sector, const uint8_t* src) {
    if (isCached(sector)) {
    a642:	ldr.w	r3, [r0, #540]	; 0x21c
    a646:	cmp	r1, r3
    a648:	beq.n	a690 <ExFatFile::write(void const*, unsigned int)+0x230>
      invalidate();
    }
    return m_blockDev->writeSector(sector, src);
    a64a:	ldr.w	r0, [r0, #532]	; 0x214
    a64e:	mov	r2, r8
    a650:	ldr	r3, [r0, #0]
    a652:	ldr	r3, [r3, #28]
    a654:	blx	r3
        goto fail;
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      n = m_vol->bytesPerSector();
      if (!m_vol->cacheSafeWrite(sector, src)) {
    a656:	cmp	r0, #0
    a658:	beq.w	a472 <ExFatFile::write(void const*, unsigned int)+0x12>
    a65c:	mov.w	r0, #512	; 0x200
    a660:	movs	r1, #0
         DBG_FAIL_MACRO;
        goto fail;
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      n = m_vol->bytesPerSector();
    a662:	mov.w	r7, #512	; 0x200
    a666:	b.n	a584 <ExFatFile::write(void const*, unsigned int)+0x124>

        if (isContiguous()) {
          uint32_t lc = m_firstCluster;
          lc += (m_dataLength - 1) >> m_vol->bytesPerClusterShift();
          if (m_curCluster < lc) {
            m_curCluster++;
    a668:	adds	r1, #1
    a66a:	str	r1, [r4, #24]
    a66c:	b.n	a510 <ExFatFile::write(void const*, unsigned int)+0xb0>
            fg = 1;
          } else {
            fg = 0;
          }
        } else {
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    a66e:	ldr	r2, [sp, #4]
    a670:	bl	9a78 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
          if (fg < 0) {
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
        if (fg == 0) {
    a674:	cmp	r0, #0
    a676:	bne.w	a50c <ExFatFile::write(void const*, unsigned int)+0xac>
    a67a:	b.n	a502 <ExFatFile::write(void const*, unsigned int)+0xa2>
          }
        }
      } else {
        if (m_firstCluster == 0) {
          // allocate first cluster of file
          if (!addCluster()) {
    a67c:	mov	r0, r4
    a67e:	bl	9d24 <ExFatFile::addCluster()>
    a682:	cmp	r0, #0
    a684:	beq.w	a472 <ExFatFile::write(void const*, unsigned int)+0x12>
            DBG_FAIL_MACRO;
            goto fail;
          }
          m_firstCluster = m_curCluster;
    a688:	ldr	r1, [r4, #24]
    a68a:	ldr	r0, [r4, #32]
    a68c:	str	r1, [r4, #28]
    a68e:	b.n	a510 <ExFatFile::write(void const*, unsigned int)+0xb0>
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    m_sector = 0XFFFFFFFF;
    a690:	mov.w	r3, #4294967295
    m_blockDev = blockDev;
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    a694:	strb.w	r2, [r0, #528]	; 0x210
    m_sector = 0XFFFFFFFF;
    a698:	str.w	r3, [r0, #540]	; 0x21c
    a69c:	b.n	a64a <ExFatFile::write(void const*, unsigned int)+0x1ea>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & FILE_FLAG_APPEND)) {
    if (!seekSet(m_validLength)) {
    a69e:	ldrd	r2, r3, [r0, #16]
    a6a2:	bl	91b4 <ExFatFile::seekSet(unsigned long long)>
    a6a6:	cmp	r0, #0
    a6a8:	beq.w	a472 <ExFatFile::write(void const*, unsigned int)+0x12>
    a6ac:	b.n	a490 <ExFatFile::write(void const*, unsigned int)+0x30>
    }
  }
  if (m_curPosition > m_dataLength) {
    m_dataLength = m_curPosition;
    // update fileSize and insure sync will update dir entry
    m_flags |= FILE_FLAG_DIR_DIRTY;
    a6ae:	ldrb.w	r1, [r4, #51]	; 0x33
    a6b2:	ldr	r0, [sp, #0]
    a6b4:	orn	r1, r1, #127	; 0x7f
      m_flags |= FILE_FLAG_DIR_DIRTY;
      m_validLength = m_curPosition;
    }
  }
  if (m_curPosition > m_dataLength) {
    m_dataLength = m_curPosition;
    a6b8:	strd	r2, r3, [r4, #8]
    // update fileSize and insure sync will update dir entry
    m_flags |= FILE_FLAG_DIR_DIRTY;
    a6bc:	strb.w	r1, [r4, #51]	; 0x33
    a6c0:	b.n	a482 <ExFatFile::write(void const*, unsigned int)+0x22>
    a6c2:	ldr	r0, [sp, #0]
    a6c4:	b.n	a482 <ExFatFile::write(void const*, unsigned int)+0x22>
    a6c6:	ldrd	r2, r3, [r4]
    a6ca:	b.n	a5be <ExFatFile::write(void const*, unsigned int)+0x15e>
    a6cc:	.word	0x20044068

0000a6d0 <FatFile::openRoot(FatVolume*) [clone .part.38]>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
    a6d0:	push	{r3, r4, r5, lr}
    a6d2:	mov	r5, r1
    a6d4:	mov	r4, r0
  // error if file is already open
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(FatFile));
    a6d6:	movs	r2, #36	; 0x24
    a6d8:	movs	r1, #0
    a6da:	bl	10bfc <memset>

  m_vol = vol;
    a6de:	str	r5, [r4, #8]
  switch (vol->fatType()) {
    a6e0:	ldrb	r3, [r5, #7]
    a6e2:	cmp	r3, #16
    a6e4:	beq.n	a6f8 <FatFile::openRoot(FatVolume*) [clone .part.38]+0x28>
    a6e6:	cmp	r3, #32
    a6e8:	bne.n	a6f4 <FatFile::openRoot(FatVolume*) [clone .part.38]+0x24>
  case 16:
    m_attributes = FILE_ATTR_ROOT_FIXED;
    break;

  case 32:
    m_attributes = FILE_ATTR_ROOT32;
    a6ea:	movs	r3, #64	; 0x40
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = FILE_FLAG_READ;
    a6ec:	movs	r0, #1
  case 16:
    m_attributes = FILE_ATTR_ROOT_FIXED;
    break;

  case 32:
    m_attributes = FILE_ATTR_ROOT32;
    a6ee:	strb	r3, [r4, #0]
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = FILE_FLAG_READ;
    a6f0:	strb	r0, [r4, #2]
    a6f2:	pop	{r3, r4, r5, pc}
  return true;

 fail:
  return false;
    a6f4:	movs	r0, #0
}
    a6f6:	pop	{r3, r4, r5, pc}
  switch (vol->fatType()) {
#if FAT12_SUPPORT
  case 12:
#endif  // FAT12_SUPPORT
  case 16:
    m_attributes = FILE_ATTR_ROOT_FIXED;
    a6f8:	movs	r3, #32
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = FILE_FLAG_READ;
    a6fa:	movs	r0, #1
  switch (vol->fatType()) {
#if FAT12_SUPPORT
  case 12:
#endif  // FAT12_SUPPORT
  case 16:
    m_attributes = FILE_ATTR_ROOT_FIXED;
    a6fc:	strb	r3, [r4, #0]
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = FILE_FLAG_READ;
    a6fe:	strb	r0, [r4, #2]
    a700:	pop	{r3, r4, r5, pc}
    a702:	nop

0000a704 <FatFile::addCluster()>:
#include "FatVolume.h"
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
#if USE_FAT_FILE_FLAG_CONTIGUOUS
  uint32_t cc = m_curCluster;
    a704:	mov	r2, r0
#include "../common/DebugMacros.h"
#include "FatFile.h"
#include "FatVolume.h"
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
    a706:	push	{r3, r4, r5, lr}
#if USE_FAT_FILE_FLAG_CONTIGUOUS
  uint32_t cc = m_curCluster;
    a708:	ldr.w	r5, [r2, #16]!
#include "../common/DebugMacros.h"
#include "FatFile.h"
#include "FatVolume.h"
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
    a70c:	mov	r4, r0
#if USE_FAT_FILE_FLAG_CONTIGUOUS
  uint32_t cc = m_curCluster;
  if (!m_vol->allocateCluster(m_curCluster, &m_curCluster)) {
    a70e:	ldr	r0, [r0, #8]
    a710:	mov	r1, r5
    a712:	bl	b57c <FatPartition::allocateCluster(unsigned long, unsigned long*)>
    a716:	cbz	r0, a72e <FatFile::addCluster()+0x2a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (cc == 0) {
    a718:	cbz	r5, a730 <FatFile::addCluster()+0x2c>
    m_flags |= FILE_FLAG_CONTIGUOUS;
  } else if (m_curCluster != (cc + 1)) {
    a71a:	ldr	r3, [r4, #16]
    a71c:	adds	r5, #1
    a71e:	cmp	r3, r5
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
    a720:	ldrb	r3, [r4, #2]
    a722:	it	ne
    a724:	andne.w	r3, r3, #191	; 0xbf
  }
  m_flags |= FILE_FLAG_DIR_DIRTY;
    a728:	orn	r3, r3, #127	; 0x7f
    a72c:	strb	r3, [r4, #2]
  return false;
#else  // USE_FAT_FILE_FLAG_CONTIGUOUS
  m_flags |= FILE_FLAG_DIR_DIRTY;
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
}
    a72e:	pop	{r3, r4, r5, pc}
  if (!m_vol->allocateCluster(m_curCluster, &m_curCluster)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (cc == 0) {
    m_flags |= FILE_FLAG_CONTIGUOUS;
    a730:	ldrb	r3, [r4, #2]
    a732:	orr.w	r3, r3, #64	; 0x40
    a736:	b.n	a728 <FatFile::addCluster()+0x24>

0000a738 <FatFile::addDirCluster()>:
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
}
//------------------------------------------------------------------------------
// Add a cluster to a directory file and zero the cluster.
// Return with first sector of cluster in the cache.
bool FatFile::addDirCluster() {
    a738:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t sector;
  cache_t* pc;

  if (isRootFixed()) {
    a73c:	ldrb	r3, [r0, #0]
    a73e:	and.w	r3, r3, #32
    a742:	cbnz	r3, a750 <FatFile::addDirCluster()+0x18>
    a744:	and.w	r4, r3, #255	; 0xff
    DBG_FAIL_MACRO;
    goto fail;
  }
  // max folder size
  if (m_curPosition >= 512UL*4095) {
    a748:	ldr	r1, [r0, #20]
    a74a:	ldr	r3, [pc, #128]	; (a7cc <FatFile::addDirCluster()+0x94>)
    a74c:	cmp	r1, r3
    a74e:	bls.n	a758 <FatFile::addDirCluster()+0x20>
  // Set position to EOF to avoid inconsistent curCluster/curPosition.
  m_curPosition += m_vol->bytesPerCluster();
  return true;

 fail:
  return false;
    a750:	movs	r6, #0
}
    a752:	mov	r0, r6
    a754:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a758:	mov	r5, r0
  // max folder size
  if (m_curPosition >= 512UL*4095) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!addCluster()) {
    a75a:	bl	a704 <FatFile::addCluster()>
    a75e:	mov	r6, r0
    a760:	cmp	r0, #0
    a762:	beq.n	a750 <FatFile::addDirCluster()+0x18>
    DBG_FAIL_MACRO;
    goto fail;
  }
  sector = m_vol->clusterStartSector(m_curCluster);
    a764:	ldr	r1, [r5, #8]
  bool cacheSync() {
    return m_cache.sync() && syncDevice();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t sector, uint8_t options) {
    return reinterpret_cast<cache_t*>(m_cache.get(sector, options));
    a766:	movs	r2, #5
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t sectorOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterSectorMask;
  }
  uint32_t clusterStartSector(uint32_t cluster) const {
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    a768:	ldr	r3, [r5, #16]
    a76a:	ldrb	r7, [r1, #6]
  bool cacheSync() {
    return m_cache.sync() && syncDevice();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t sector, uint8_t options) {
    return reinterpret_cast<cache_t*>(m_cache.get(sector, options));
    a76c:	add.w	r0, r1, #36	; 0x24
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t sectorOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterSectorMask;
  }
  uint32_t clusterStartSector(uint32_t cluster) const {
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    a770:	subs	r3, #2
    a772:	ldr	r1, [r1, #20]
    a774:	lsls	r3, r7
    a776:	adds	r7, r3, r1
  bool cacheSync() {
    return m_cache.sync() && syncDevice();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t sector, uint8_t options) {
    return reinterpret_cast<cache_t*>(m_cache.get(sector, options));
    a778:	mov	r1, r7
    a77a:	bl	8d80 <FsCache::get(unsigned long, unsigned char)>
  pc = m_vol->cacheFetchData(sector, FsCache::CACHE_RESERVE_FOR_WRITE);
  if (!pc) {
    a77e:	mov	r8, r0
    a780:	cmp	r0, #0
    a782:	beq.n	a750 <FatFile::addDirCluster()+0x18>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(pc, 0, m_vol->bytesPerSector());
    a784:	mov.w	r2, #512	; 0x200
    a788:	mov	r1, r4
    a78a:	bl	10bfc <memset>
  // zero rest of clusters
  for (uint8_t i = 1; i < m_vol->sectorsPerCluster(); i++) {
    a78e:	ldr	r3, [r5, #8]
    a790:	ldrb	r2, [r3, #4]
    a792:	cmp	r2, #1
    a794:	bls.n	a7b8 <FatFile::addDirCluster()+0x80>
    a796:	movs	r4, #1
    a798:	b.n	a7a4 <FatFile::addDirCluster()+0x6c>
    a79a:	ldr	r3, [r5, #8]
    a79c:	uxtb	r4, r4
    a79e:	ldrb	r2, [r3, #4]
    a7a0:	cmp	r2, r4
    a7a2:	bls.n	a7b8 <FatFile::addDirCluster()+0x80>
    a7a4:	ldr	r0, [r3, #0]
  }
  bool syncDevice() {
    return m_blockDev->syncDevice();
  }
  bool writeSector(uint32_t sector, const uint8_t* src) {
    return m_blockDev->writeSector(sector, src);
    a7a6:	adds	r1, r4, r7
    a7a8:	mov	r2, r8
    a7aa:	adds	r4, #1
    a7ac:	ldr	r3, [r0, #0]
    a7ae:	ldr	r3, [r3, #28]
    a7b0:	blx	r3
    if (!m_vol->writeSector(sector + i, pc->data)) {
    a7b2:	cmp	r0, #0
    a7b4:	bne.n	a79a <FatFile::addDirCluster()+0x62>
    a7b6:	b.n	a750 <FatFile::addDirCluster()+0x18>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Set position to EOF to avoid inconsistent curCluster/curPosition.
  m_curPosition += m_vol->bytesPerCluster();
    a7b8:	ldrb	r3, [r3, #6]
    a7ba:	mov.w	r2, #512	; 0x200
    a7be:	ldr	r1, [r5, #20]
    a7c0:	lsl.w	r3, r2, r3
    a7c4:	uxtah	r3, r1, r3
    a7c8:	str	r3, [r5, #20]
    a7ca:	b.n	a752 <FatFile::addDirCluster()+0x1a>
    a7cc:	.word	0x001ffdff

0000a7d0 <FatFile::cacheDirEntry(unsigned char)>:
  return false;
}
//------------------------------------------------------------------------------
// cache a file's directory entry
// return pointer to cached entry or null for failure
DirFat_t* FatFile::cacheDirEntry(uint8_t action) {
    a7d0:	push	{r4, lr}
    a7d2:	mov	r4, r0
  bool cacheSync() {
    return m_cache.sync() && syncDevice();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t sector, uint8_t options) {
    return reinterpret_cast<cache_t*>(m_cache.get(sector, options));
    a7d4:	ldr	r0, [r0, #8]
    a7d6:	mov	r2, r1
    a7d8:	adds	r0, #36	; 0x24
    a7da:	ldr	r1, [r4, #24]
    a7dc:	bl	8d80 <FsCache::get(unsigned long, unsigned char)>
  cache_t* pc;
  pc = m_vol->cacheFetchData(m_dirSector, action);
  if (!pc) {
    a7e0:	cbz	r0, a7ec <FatFile::cacheDirEntry(unsigned char)+0x1c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  return pc->dir + (m_dirIndex & 0XF);
    a7e2:	ldrh	r3, [r4, #4]
    a7e4:	and.w	r3, r3, #15
    a7e8:	add.w	r0, r0, r3, lsl #5

 fail:
  return nullptr;
}
    a7ec:	pop	{r4, pc}
    a7ee:	nop

0000a7f0 <FatFile::sync() [clone .part.42]>:
 fail:
  m_curCluster = tmp;
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
    a7f0:	push	{r4, r5, lr}
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    a7f2:	ldrsb.w	r3, [r0, #2]
 fail:
  m_curCluster = tmp;
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
    a7f6:	sub	sp, #12
    a7f8:	mov	r4, r0
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    a7fa:	cmp	r3, #0
    a7fc:	blt.n	a832 <FatFile::sync() [clone .part.42]+0x42>
      setLe16(dir->modifyTime, time);
    }
    // clear directory dirty
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
  }
  if (m_vol->cacheSync()) {
    a7fe:	ldr	r5, [r4, #8]
  cache_t* cacheFetchFat(uint32_t sector, uint8_t options) {
    options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    return reinterpret_cast<cache_t*>(m_fatCache.get(sector, options));
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    a800:	add.w	r0, r5, #36	; 0x24
    a804:	bl	8de0 <FsCache::sync()>
    a808:	cbnz	r0, a818 <FatFile::sync() [clone .part.42]+0x28>
    return true;
  }
  DBG_FAIL_MACRO;

 fail:
  m_error |= WRITE_ERROR;
    a80a:	ldrb	r3, [r4, #1]
  return false;
    a80c:	movs	r0, #0
    return true;
  }
  DBG_FAIL_MACRO;

 fail:
  m_error |= WRITE_ERROR;
    a80e:	orr.w	r3, r3, #1
    a812:	strb	r3, [r4, #1]
  return false;
}
    a814:	add	sp, #12
    a816:	pop	{r4, r5, pc}
    a818:	add.w	r0, r5, #564	; 0x234
    a81c:	bl	8de0 <FsCache::sync()>
    a820:	cmp	r0, #0
    a822:	beq.n	a80a <FatFile::sync() [clone .part.42]+0x1a>
    a824:	ldr	r0, [r5, #0]
  }
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
  }
  bool syncDevice() {
    return m_blockDev->syncDevice();
    a826:	ldr	r3, [r0, #0]
    a828:	ldr	r3, [r3, #24]
    a82a:	blx	r3
  cache_t* cacheFetchFat(uint32_t sector, uint8_t options) {
    options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    return reinterpret_cast<cache_t*>(m_fatCache.get(sector, options));
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    a82c:	cmp	r0, #0
    a82e:	beq.n	a80a <FatFile::sync() [clone .part.42]+0x1a>
    a830:	b.n	a814 <FatFile::sync() [clone .part.42]+0x24>
  uint8_t ms10;
  if (!isOpen()) {
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    DirFat_t* dir = cacheDirEntry(FsCache::CACHE_FOR_WRITE);
    a832:	movs	r1, #1
    a834:	bl	a7d0 <FatFile::cacheDirEntry(unsigned char)>
    // check for deleted by another open file object
    if (!dir || dir->name[0] == FAT_NAME_DELETED) {
    a838:	mov	r5, r0
    a83a:	cmp	r0, #0
    a83c:	beq.n	a80a <FatFile::sync() [clone .part.42]+0x1a>
    a83e:	ldrb	r3, [r0, #0]
    a840:	cmp	r3, #229	; 0xe5
    a842:	beq.n	a80a <FatFile::sync() [clone .part.42]+0x1a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // do not set filesize for dir files
    if (isFile()) {
    a844:	ldrb	r3, [r4, #0]
    a846:	lsls	r3, r3, #28
    a848:	bpl.n	a84e <FatFile::sync() [clone .part.42]+0x5e>
      setLe32(dir->fileSize, m_fileSize);
    a84a:	ldr	r3, [r4, #28]
}

inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
    a84c:	str	r3, [r0, #28]
    }

    // update first cluster fields
    setLe16(dir->firstClusterLow, m_firstCluster & 0XFFFF);
    a84e:	ldr	r3, [r4, #32]
    setLe16(dir->firstClusterHigh, m_firstCluster >> 16);

    // set modify time if user supplied a callback date/time function
    if (FsDateTime::callback) {
    a850:	ldr	r1, [pc, #44]	; (a880 <FatFile::sync() [clone .part.42]+0x90>)
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    a852:	lsrs	r2, r3, #16
    a854:	strh	r3, [r5, #26]
    a856:	ldr	r3, [r1, #0]
    a858:	strh	r2, [r5, #20]
    a85a:	cbz	r3, a876 <FatFile::sync() [clone .part.42]+0x86>
      FsDateTime::callback(&date, &time, &ms10);
    a85c:	add.w	r2, sp, #3
    a860:	add.w	r1, sp, #6
    a864:	add	r0, sp, #4
    a866:	blx	r3
      setLe16(dir->modifyDate, date);
    a868:	ldrh.w	r3, [sp, #4]
    a86c:	ldrh.w	r2, [sp, #6]
    a870:	strh	r3, [r5, #24]
    a872:	strh	r3, [r5, #18]
    a874:	strh	r2, [r5, #22]
      setLe16(dir->accessDate, date);
      setLe16(dir->modifyTime, time);
    }
    // clear directory dirty
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    a876:	ldrb	r3, [r4, #2]
    a878:	and.w	r3, r3, #127	; 0x7f
    a87c:	strb	r3, [r4, #2]
    a87e:	b.n	a7fe <FatFile::sync() [clone .part.42]+0xe>
    a880:	.word	0x20044068

0000a884 <FatFile::close()>:

 fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
    a884:	push	{r4, lr}
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    a886:	ldrb	r3, [r0, #0]

 fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
    a888:	mov	r4, r0
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    a88a:	cbnz	r3, a896 <FatFile::close()+0x12>
  return nullptr;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
  bool rtn = sync();
  m_attributes = FILE_ATTR_CLOSED;
    a88c:	movs	r3, #0
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    return true;
    a88e:	movs	r0, #1
  return nullptr;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
  bool rtn = sync();
  m_attributes = FILE_ATTR_CLOSED;
    a890:	strb	r3, [r4, #0]
  m_flags = 0;
    a892:	strb	r3, [r4, #2]
  return rtn;
}
    a894:	pop	{r4, pc}
    a896:	bl	a7f0 <FatFile::sync() [clone .part.42]>
  return nullptr;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
  bool rtn = sync();
  m_attributes = FILE_ATTR_CLOSED;
    a89a:	movs	r3, #0
    a89c:	strb	r3, [r4, #0]
  m_flags = 0;
    a89e:	strb	r3, [r4, #2]
  return rtn;
}
    a8a0:	pop	{r4, pc}
    a8a2:	nop

0000a8a4 <FatFile::mkdir(FatFile*, fname_t*)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::mkdir(FatFile* parent, fname_t* fname) {
    a8a4:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t sector;
  DirFat_t dot;
  DirFat_t* dir;
  cache_t* pc;

  if (!parent->isDir()) {
    a8a8:	ldrb	r4, [r1, #0]

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::mkdir(FatFile* parent, fname_t* fname) {
    a8aa:	sub	sp, #32
  uint32_t sector;
  DirFat_t dot;
  DirFat_t* dir;
  cache_t* pc;

  if (!parent->isDir()) {
    a8ac:	tst.w	r4, #112	; 0x70
    a8b0:	bne.n	a8ba <FatFile::mkdir(FatFile*, fname_t*)+0x16>
  // write first sector
  return m_vol->cacheSync();

 fail:
  return false;
}
    a8b2:	movs	r0, #0
    a8b4:	add	sp, #32
    a8b6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (!parent->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // create a normal file
  if (!open(parent, fname, O_CREAT | O_EXCL | O_RDWR)) {
    a8ba:	movw	r3, #2562	; 0xa02
    a8be:	mov	r5, r0
    a8c0:	mov	r4, r1
    a8c2:	bl	bdf0 <FatFile::open(FatFile*, fname_t*, int)>
    a8c6:	cmp	r0, #0
    a8c8:	beq.n	a8b2 <FatFile::mkdir(FatFile*, fname_t*)+0xe>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // convert file to directory
  m_flags = FILE_FLAG_READ;
    a8ca:	movs	r2, #1
  m_attributes = FILE_ATTR_SUBDIR;
    a8cc:	movs	r3, #16

  // allocate and zero first cluster
  if (!addDirCluster()) {
    a8ce:	mov	r0, r5
  if (!open(parent, fname, O_CREAT | O_EXCL | O_RDWR)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // convert file to directory
  m_flags = FILE_FLAG_READ;
    a8d0:	strb	r2, [r5, #2]
  m_attributes = FILE_ATTR_SUBDIR;
    a8d2:	strb	r3, [r5, #0]

  // allocate and zero first cluster
  if (!addDirCluster()) {
    a8d4:	bl	a738 <FatFile::addDirCluster()>
    a8d8:	cmp	r0, #0
    a8da:	beq.n	a8b2 <FatFile::mkdir(FatFile*, fname_t*)+0xe>
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_firstCluster = m_curCluster;
    a8dc:	ldr	r2, [r5, #16]
bool FatFile::seekSet(uint32_t pos) {
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
  // error if file not open
  if (!isOpen()) {
    a8de:	ldrb	r3, [r5, #0]
  // allocate and zero first cluster
  if (!addDirCluster()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_firstCluster = m_curCluster;
    a8e0:	str	r2, [r5, #32]
bool FatFile::seekSet(uint32_t pos) {
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
  // error if file not open
  if (!isOpen()) {
    a8e2:	cmp	r3, #0
    a8e4:	bne.n	a9e6 <FatFile::mkdir(FatFile*, fname_t*)+0x142>
  if (!sync()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // cache entry - should already be in cache due to sync() call
  dir = cacheDirEntry(FsCache::CACHE_FOR_WRITE);
    a8e6:	movs	r1, #1
    a8e8:	mov	r0, r5
    a8ea:	bl	a7d0 <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    a8ee:	mov	r7, r0
    a8f0:	cmp	r0, #0
    a8f2:	beq.n	a8b2 <FatFile::mkdir(FatFile*, fname_t*)+0xe>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // change directory entry  attribute
  dir->attributes = FAT_ATTRIB_DIRECTORY;
    a8f4:	movs	r3, #16

  // make entry for '.'
  memcpy(&dot, dir, sizeof(dot));
    a8f6:	ldr	r0, [r0, #0]
    a8f8:	ldr	r1, [r7, #4]
    a8fa:	mov	lr, sp
  if (!dir) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // change directory entry  attribute
  dir->attributes = FAT_ATTRIB_DIRECTORY;
    a8fc:	strb	r3, [r7, #11]

  // make entry for '.'
  memcpy(&dot, dir, sizeof(dot));
  dot.name[0] = '.';
    a8fe:	mov.w	ip, #46	; 0x2e
  }
  // change directory entry  attribute
  dir->attributes = FAT_ATTRIB_DIRECTORY;

  // make entry for '.'
  memcpy(&dot, dir, sizeof(dot));
    a902:	ldr	r2, [r7, #8]
  dot.name[0] = '.';
    a904:	add	r6, sp, #32
  }
  // change directory entry  attribute
  dir->attributes = FAT_ATTRIB_DIRECTORY;

  // make entry for '.'
  memcpy(&dot, dir, sizeof(dot));
    a906:	ldr	r3, [r7, #12]
    a908:	ldrh.w	r8, [r7, #20]
    a90c:	stmia.w	lr!, {r0, r1, r2, r3}
    a910:	ldr	r2, [r7, #24]
    a912:	ldr	r3, [r7, #28]
    a914:	ldr	r0, [r7, #16]
    a916:	ldr	r1, [r7, #20]
  dot.name[0] = '.';
    a918:	strb.w	ip, [r6, #-32]!
    a91c:	add.w	ip, sp, #10
  }
  // change directory entry  attribute
  dir->attributes = FAT_ATTRIB_DIRECTORY;

  // make entry for '.'
  memcpy(&dot, dir, sizeof(dot));
    a920:	ldrh	r7, [r7, #26]
    a922:	stmia.w	lr!, {r0, r1, r2, r3}
    a926:	mov	r3, r6
  dot.name[0] = '.';
  for (uint8_t i = 1; i < 11; i++) {
    dot.name[i] = ' ';
    a928:	movs	r2, #32
    a92a:	strb.w	r2, [r3, #1]!
  dir->attributes = FAT_ATTRIB_DIRECTORY;

  // make entry for '.'
  memcpy(&dot, dir, sizeof(dot));
  dot.name[0] = '.';
  for (uint8_t i = 1; i < 11; i++) {
    a92e:	cmp	r3, ip
    a930:	bne.n	a92a <FatFile::mkdir(FatFile*, fname_t*)+0x86>
    dot.name[i] = ' ';
  }

  // cache sector for '.'  and '..'
  sector = m_vol->clusterStartSector(m_firstCluster);
    a932:	ldr	r0, [r5, #8]
  bool cacheSync() {
    return m_cache.sync() && syncDevice();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t sector, uint8_t options) {
    return reinterpret_cast<cache_t*>(m_cache.get(sector, options));
    a934:	movs	r2, #1
    a936:	ldr	r3, [r5, #32]
    a938:	ldrb.w	lr, [r0, #6]
    a93c:	adds	r0, #36	; 0x24
    a93e:	subs	r3, #2
    a940:	ldr.w	r1, [r0, #-16]
    a944:	lsl.w	r3, r3, lr
    a948:	add	r1, r3
    a94a:	bl	8d80 <FsCache::get(unsigned long, unsigned char)>
  pc = m_vol->cacheFetchData(sector, FsCache::CACHE_FOR_WRITE);
  if (!pc) {
    a94e:	mov	lr, r0
    a950:	cmp	r0, #0
    a952:	beq.n	a8b2 <FatFile::mkdir(FatFile*, fname_t*)+0xe>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // copy '.' to sector
  memcpy(&pc->dir[0], &dot, sizeof(dot));
    a954:	strh.w	r8, [sp, #20]
  // make entry for '..'
  dot.name[1] = '.';
    a958:	mov.w	r8, #46	; 0x2e
  if (!pc) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // copy '.' to sector
  memcpy(&pc->dir[0], &dot, sizeof(dot));
    a95c:	strh.w	r7, [sp, #26]
  // make entry for '..'
  dot.name[1] = '.';
  setLe16(dot.firstClusterLow, parent->m_firstCluster & 0XFFFF);
  setLe16(dot.firstClusterHigh, parent->m_firstCluster >> 16);
  // copy '..' to sector
  memcpy(&pc->dir[1], &dot, sizeof(dot));
    a960:	mov	r7, r6
  if (!pc) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // copy '.' to sector
  memcpy(&pc->dir[0], &dot, sizeof(dot));
    a962:	ldmia	r6!, {r0, r1, r2, r3}
    a964:	str.w	r0, [lr]
    a968:	str.w	r1, [lr, #4]
    a96c:	str.w	r2, [lr, #8]
    a970:	str.w	r3, [lr, #12]
  // make entry for '..'
  dot.name[1] = '.';
    a974:	strb.w	r8, [sp, #1]
  if (!pc) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // copy '.' to sector
  memcpy(&pc->dir[0], &dot, sizeof(dot));
    a978:	ldmia	r6!, {r0, r1, r2, r3}
    a97a:	str.w	r0, [lr, #16]
    a97e:	str.w	r1, [lr, #20]
    a982:	str.w	r2, [lr, #24]
    a986:	str.w	r3, [lr, #28]
  // make entry for '..'
  dot.name[1] = '.';
  setLe16(dot.firstClusterLow, parent->m_firstCluster & 0XFFFF);
    a98a:	ldr	r3, [r4, #32]
  setLe16(dot.firstClusterHigh, parent->m_firstCluster >> 16);
  // copy '..' to sector
  memcpy(&pc->dir[1], &dot, sizeof(dot));
    a98c:	lsrs	r2, r3, #16
    a98e:	strh.w	r3, [sp, #26]
    a992:	strh.w	r2, [sp, #20]
    a996:	ldmia	r7!, {r0, r1, r2, r3}
    a998:	str.w	r0, [lr, #32]
    a99c:	str.w	r1, [lr, #36]	; 0x24
    a9a0:	str.w	r2, [lr, #40]	; 0x28
    a9a4:	str.w	r3, [lr, #44]	; 0x2c
    a9a8:	ldmia	r7!, {r0, r1, r2, r3}
    a9aa:	str.w	r0, [lr, #48]	; 0x30
    a9ae:	str.w	r1, [lr, #52]	; 0x34
    a9b2:	str.w	r2, [lr, #56]	; 0x38
    a9b6:	str.w	r3, [lr, #60]	; 0x3c
  // write first sector
  return m_vol->cacheSync();
    a9ba:	ldr	r4, [r5, #8]
  cache_t* cacheFetchFat(uint32_t sector, uint8_t options) {
    options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    return reinterpret_cast<cache_t*>(m_fatCache.get(sector, options));
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    a9bc:	add.w	r0, r4, #36	; 0x24
    a9c0:	bl	8de0 <FsCache::sync()>
    a9c4:	cmp	r0, #0
    a9c6:	beq.w	a8b2 <FatFile::mkdir(FatFile*, fname_t*)+0xe>
    a9ca:	add.w	r0, r4, #564	; 0x234
    a9ce:	bl	8de0 <FsCache::sync()>
    a9d2:	cmp	r0, #0
    a9d4:	beq.w	a8b2 <FatFile::mkdir(FatFile*, fname_t*)+0xe>
    a9d8:	ldr	r0, [r4, #0]
  }
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
  }
  bool syncDevice() {
    return m_blockDev->syncDevice();
    a9da:	ldr	r3, [r0, #0]
    a9dc:	ldr	r3, [r3, #24]

 fail:
  return false;
}
    a9de:	add	sp, #32
    a9e0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    a9e4:	bx	r3
  if (!isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    a9e6:	ldr	r3, [r5, #20]
    a9e8:	cbz	r3, a9f8 <FatFile::mkdir(FatFile*, fname_t*)+0x154>
    }
  }

 done:
  m_curPosition = pos;
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    a9ea:	ldrb	r3, [r5, #2]
  if (pos == m_curPosition) {
    return true;
  }
  if (pos == 0) {
    // set position to start of file
    m_curCluster = 0;
    a9ec:	movs	r2, #0
    }
  }

 done:
  m_curPosition = pos;
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    a9ee:	bic.w	r3, r3, #32
  if (pos == m_curPosition) {
    return true;
  }
  if (pos == 0) {
    // set position to start of file
    m_curCluster = 0;
    a9f2:	str	r2, [r5, #16]
      goto fail;
    }
  }

 done:
  m_curPosition = pos;
    a9f4:	str	r2, [r5, #20]
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    a9f6:	strb	r3, [r5, #2]
    a9f8:	mov	r0, r5
    a9fa:	bl	a7f0 <FatFile::sync() [clone .part.42]>
  }
  m_firstCluster = m_curCluster;
  // Set to start of dir
  rewind();
  // force entry to device
  if (!sync()) {
    a9fe:	cmp	r0, #0
    aa00:	beq.w	a8b2 <FatFile::mkdir(FatFile*, fname_t*)+0xe>
    aa04:	b.n	a8e6 <FatFile::mkdir(FatFile*, fname_t*)+0x42>
    aa06:	nop

0000aa08 <FatFile::mkdir(FatFile*, char const*, bool)>:
//------------------------------------------------------------------------------
bool FatFile::isBusy() {
  return m_vol->isBusy();
}
//------------------------------------------------------------------------------
bool FatFile::mkdir(FatFile* parent, const char* path, bool pFlag) {
    aa08:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    aa0c:	mov	r6, r0
    aa0e:	sub	sp, #72	; 0x48
    aa10:	movs	r0, #0
    aa12:	mov	r4, r1
  fname_t fname;
  FatFile tmpDir;

  if (isOpen() || !parent->isDir()) {
    aa14:	ldrb	r1, [r6, #0]
//------------------------------------------------------------------------------
bool FatFile::isBusy() {
  return m_vol->isBusy();
}
//------------------------------------------------------------------------------
bool FatFile::mkdir(FatFile* parent, const char* path, bool pFlag) {
    aa16:	str	r2, [sp, #4]
    aa18:	strb.w	r0, [sp, #36]	; 0x24
    aa1c:	strb.w	r0, [sp, #37]	; 0x25
    aa20:	strb.w	r0, [sp, #38]	; 0x26
  fname_t fname;
  FatFile tmpDir;

  if (isOpen() || !parent->isDir()) {
    aa24:	cbnz	r1, aa30 <FatFile::mkdir(FatFile*, char const*, bool)+0x28>
    aa26:	mov	r8, r3
    aa28:	ldrb	r3, [r4, #0]
    aa2a:	tst.w	r3, #112	; 0x70
    aa2e:	bne.n	aa38 <FatFile::mkdir(FatFile*, char const*, bool)+0x30>
    close();
  }
  return mkdir(parent, &fname);

 fail:
  return false;
    aa30:	movs	r0, #0
}
    aa32:	add	sp, #72	; 0x48
    aa34:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

  if (isOpen() || !parent->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    aa38:	ldrb	r3, [r2, #0]
    aa3a:	mov	r0, r2
    aa3c:	cmp	r3, #47	; 0x2f
    aa3e:	beq.n	aa9c <FatFile::mkdir(FatFile*, char const*, bool)+0x94>
      goto fail;
    }
    if (!*path) {
      break;
    }
    if (!open(parent, &fname, O_RDONLY)) {
    aa40:	movs	r7, #0
      goto fail;
    }
    parent = &tmpDir;
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
    aa42:	add	r2, sp, #4
    aa44:	add	r1, sp, #12
    aa46:	bl	b984 <FatFile::parsePathName(char const*, fname_t*, char const**)>
      goto fail;
    }
    if (!*path) {
      break;
    }
    if (!open(parent, &fname, O_RDONLY)) {
    aa4a:	add	r2, sp, #12
    aa4c:	mov	r1, r4
    aa4e:	movs	r3, #0
      goto fail;
    }
    parent = &tmpDir;
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
    aa50:	cmp	r0, #0
    aa52:	beq.n	aa30 <FatFile::mkdir(FatFile*, char const*, bool)+0x28>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!*path) {
    aa54:	ldr	r5, [sp, #4]
      break;
    }
    if (!open(parent, &fname, O_RDONLY)) {
    aa56:	mov	r0, r6
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!*path) {
    aa58:	ldrb	r5, [r5, #0]
    aa5a:	cmp	r5, #0
    aa5c:	beq.n	aac0 <FatFile::mkdir(FatFile*, char const*, bool)+0xb8>
      break;
    }
    if (!open(parent, &fname, O_RDONLY)) {
    aa5e:	bl	bdf0 <FatFile::open(FatFile*, fname_t*, int)>
    aa62:	cbnz	r0, aa78 <FatFile::mkdir(FatFile*, char const*, bool)+0x70>
      if (!pFlag || !mkdir(parent, &fname)) {
    aa64:	cmp.w	r8, #0
    aa68:	beq.n	aa30 <FatFile::mkdir(FatFile*, char const*, bool)+0x28>
    aa6a:	mov	r1, r4
    aa6c:	add	r2, sp, #12
    aa6e:	mov	r0, r6
    aa70:	bl	a8a4 <FatFile::mkdir(FatFile*, fname_t*)>
    aa74:	cmp	r0, #0
    aa76:	beq.n	aa30 <FatFile::mkdir(FatFile*, char const*, bool)+0x28>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    tmpDir = *this;
    aa78:	mov	r5, r6
    aa7a:	add	r4, sp, #36	; 0x24
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    aa7c:	ldrb.w	lr, [r6]
      if (!pFlag || !mkdir(parent, &fname)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    tmpDir = *this;
    aa80:	ldmia	r5!, {r0, r1, r2, r3}
    aa82:	stmia	r4!, {r0, r1, r2, r3}
    aa84:	ldmia	r5!, {r0, r1, r2, r3}
    aa86:	ldr	r5, [r5, #0]
    aa88:	stmia	r4!, {r0, r1, r2, r3}
    aa8a:	str	r5, [r4, #0]
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    aa8c:	cmp.w	lr, #0
    aa90:	bne.n	aab8 <FatFile::mkdir(FatFile*, char const*, bool)+0xb0>
  return nullptr;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
  bool rtn = sync();
  m_attributes = FILE_ATTR_CLOSED;
    aa92:	strb	r7, [r6, #0]
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    tmpDir = *this;
    parent = &tmpDir;
    aa94:	add	r4, sp, #36	; 0x24
}
//------------------------------------------------------------------------------
bool FatFile::close() {
  bool rtn = sync();
  m_attributes = FILE_ATTR_CLOSED;
  m_flags = 0;
    aa96:	strb	r7, [r6, #2]
    aa98:	ldr	r0, [sp, #4]
    aa9a:	b.n	aa42 <FatFile::mkdir(FatFile*, char const*, bool)+0x3a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
      path++;
    aa9c:	adds	r0, #1
    aa9e:	str	r0, [sp, #4]
  if (isOpen() || !parent->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
    aaa0:	ldrb	r3, [r0, #0]
    aaa2:	cmp	r3, #47	; 0x2f
    aaa4:	beq.n	aa9c <FatFile::mkdir(FatFile*, char const*, bool)+0x94>
    aaa6:	ldr	r1, [r4, #8]
    aaa8:	add	r0, sp, #36	; 0x24
    aaaa:	bl	a6d0 <FatFile::openRoot(FatVolume*) [clone .part.38]>
      path++;
    }
    if (!tmpDir.openRoot(parent->m_vol)) {
    aaae:	cmp	r0, #0
    aab0:	beq.n	aa30 <FatFile::mkdir(FatFile*, char const*, bool)+0x28>
      DBG_FAIL_MACRO;
      goto fail;
    }
    parent = &tmpDir;
    aab2:	add	r4, sp, #36	; 0x24
    aab4:	ldr	r0, [sp, #4]
    aab6:	b.n	aa40 <FatFile::mkdir(FatFile*, char const*, bool)+0x38>
    aab8:	mov	r0, r6
    aaba:	bl	a7f0 <FatFile::sync() [clone .part.42]>
    aabe:	b.n	aa92 <FatFile::mkdir(FatFile*, char const*, bool)+0x8a>
    }
    tmpDir = *this;
    parent = &tmpDir;
    close();
  }
  return mkdir(parent, &fname);
    aac0:	add	r2, sp, #12
    aac2:	mov	r1, r4
    aac4:	mov	r0, r6
    aac6:	bl	a8a4 <FatFile::mkdir(FatFile*, fname_t*)>

 fail:
  return false;
}
    aaca:	add	sp, #72	; 0x48
    aacc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000aad0 <FatFile::open(FatFile*, char const*, int)>:
//------------------------------------------------------------------------------
bool FatFile::open(FatVolume* vol, const char* path, oflag_t oflag) {
  return vol && open(vol->vwd(), path, oflag);
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
    aad0:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    aad4:	mov	r6, r0
    aad6:	sub	sp, #72	; 0x48
    aad8:	movs	r0, #0
    aada:	mov	r5, r1
  FatFile tmpDir;
  fname_t fname;

  // error if already open
  if (isOpen() || !dirFile->isDir()) {
    aadc:	ldrb	r1, [r6, #0]
//------------------------------------------------------------------------------
bool FatFile::open(FatVolume* vol, const char* path, oflag_t oflag) {
  return vol && open(vol->vwd(), path, oflag);
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
    aade:	str	r2, [sp, #4]
    aae0:	strb.w	r0, [sp, #36]	; 0x24
    aae4:	strb.w	r0, [sp, #37]	; 0x25
    aae8:	strb.w	r0, [sp, #38]	; 0x26
  FatFile tmpDir;
  fname_t fname;

  // error if already open
  if (isOpen() || !dirFile->isDir()) {
    aaec:	cbnz	r1, aaf8 <FatFile::open(FatFile*, char const*, int)+0x28>
    aaee:	mov	r8, r3
    aaf0:	ldrb	r3, [r5, #0]
    aaf2:	tst.w	r3, #112	; 0x70
    aaf6:	bne.n	ab00 <FatFile::open(FatFile*, char const*, int)+0x30>
    close();
  }
  return open(dirFile, &fname, oflag);

 fail:
  return false;
    aaf8:	movs	r0, #0
}
    aafa:	add	sp, #72	; 0x48
    aafc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  // error if already open
  if (isOpen() || !dirFile->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    ab00:	ldrb	r3, [r2, #0]
    ab02:	mov	r0, r2
    ab04:	cmp	r3, #47	; 0x2f
    ab06:	beq.n	ab5c <FatFile::open(FatFile*, char const*, int)+0x8c>
      goto fail;
    }
    if (*path == 0) {
      break;
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
    ab08:	movs	r7, #0
    ab0a:	b.n	ab12 <FatFile::open(FatFile*, char const*, int)+0x42>
    ab0c:	ldr	r0, [sp, #4]
  return nullptr;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
  bool rtn = sync();
  m_attributes = FILE_ATTR_CLOSED;
    ab0e:	strb	r7, [r6, #0]
  m_flags = 0;
    ab10:	strb	r7, [r6, #2]
      goto fail;
    }
    dirFile = &tmpDir;
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
    ab12:	add	r2, sp, #4
    ab14:	add	r1, sp, #12
    ab16:	bl	b984 <FatFile::parsePathName(char const*, fname_t*, char const**)>
      goto fail;
    }
    if (*path == 0) {
      break;
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
    ab1a:	add	r2, sp, #12
    ab1c:	mov	r1, r5
    ab1e:	movs	r3, #0
      goto fail;
    }
    dirFile = &tmpDir;
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
    ab20:	cmp	r0, #0
    ab22:	beq.n	aaf8 <FatFile::open(FatFile*, char const*, int)+0x28>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (*path == 0) {
    ab24:	ldr	r4, [sp, #4]
      break;
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
    ab26:	mov	r0, r6
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (*path == 0) {
    ab28:	ldrb	r4, [r4, #0]
    ab2a:	cbz	r4, ab7a <FatFile::open(FatFile*, char const*, int)+0xaa>
      break;
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
    ab2c:	bl	bdf0 <FatFile::open(FatFile*, fname_t*, int)>
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
    ab30:	mov	r5, r6
    ab32:	add	r4, sp, #36	; 0x24
      goto fail;
    }
    if (*path == 0) {
      break;
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
    ab34:	cmp	r0, #0
    ab36:	beq.n	aaf8 <FatFile::open(FatFile*, char const*, int)+0x28>
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    ab38:	ldrb.w	lr, [r6]
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
    ab3c:	ldmia	r5!, {r0, r1, r2, r3}
    ab3e:	stmia	r4!, {r0, r1, r2, r3}
    ab40:	ldmia	r5!, {r0, r1, r2, r3}
    ab42:	ldr.w	ip, [r5]
    dirFile = &tmpDir;
    ab46:	add	r5, sp, #36	; 0x24
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
    ab48:	stmia	r4!, {r0, r1, r2, r3}
    ab4a:	str.w	ip, [r4]
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    ab4e:	cmp.w	lr, #0
    ab52:	beq.n	ab0c <FatFile::open(FatFile*, char const*, int)+0x3c>
    ab54:	mov	r0, r6
    ab56:	bl	a7f0 <FatFile::sync() [clone .part.42]>
    ab5a:	b.n	ab0c <FatFile::open(FatFile*, char const*, int)+0x3c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
      path++;
    ab5c:	adds	r0, #1
    ab5e:	str	r0, [sp, #4]
  if (isOpen() || !dirFile->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
    ab60:	ldrb	r3, [r0, #0]
    ab62:	cmp	r3, #47	; 0x2f
    ab64:	beq.n	ab5c <FatFile::open(FatFile*, char const*, int)+0x8c>
      path++;
    }
    if (*path == 0) {
    ab66:	cbz	r3, ab8c <FatFile::open(FatFile*, char const*, int)+0xbc>
    ab68:	ldr	r1, [r5, #8]
    ab6a:	add	r0, sp, #36	; 0x24
    ab6c:	bl	a6d0 <FatFile::openRoot(FatVolume*) [clone .part.38]>
      return openRoot(dirFile->m_vol);
    }
    if (!tmpDir.openRoot(dirFile->m_vol)) {
    ab70:	cmp	r0, #0
    ab72:	beq.n	aaf8 <FatFile::open(FatFile*, char const*, int)+0x28>
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile = &tmpDir;
    ab74:	add	r5, sp, #36	; 0x24
    ab76:	ldr	r0, [sp, #4]
    ab78:	b.n	ab08 <FatFile::open(FatFile*, char const*, int)+0x38>
    }
    tmpDir = *this;
    dirFile = &tmpDir;
    close();
  }
  return open(dirFile, &fname, oflag);
    ab7a:	mov	r3, r8
    ab7c:	add	r2, sp, #12
    ab7e:	mov	r1, r5
    ab80:	mov	r0, r6
    ab82:	bl	bdf0 <FatFile::open(FatFile*, fname_t*, int)>

 fail:
  return false;
}
    ab86:	add	sp, #72	; 0x48
    ab88:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ab8c:	ldr	r1, [r5, #8]
    ab8e:	mov	r0, r6
    ab90:	bl	a6d0 <FatFile::openRoot(FatVolume*) [clone .part.38]>
    ab94:	b.n	aafa <FatFile::open(FatFile*, char const*, int)+0x2a>
    ab96:	nop

0000ab98 <FatFile::open(FatVolume*, char const*, int)>:
bool FatFile::open(const char* path, oflag_t oflag) {
  return open(FatVolume::cwv(), path, oflag);
}
//------------------------------------------------------------------------------
bool FatFile::open(FatVolume* vol, const char* path, oflag_t oflag) {
  return vol && open(vol->vwd(), path, oflag);
    ab98:	cbz	r1, aba2 <FatFile::open(FatVolume*, char const*, int)+0xa>
    ab9a:	addw	r1, r1, #1092	; 0x444
    ab9e:	b.w	aad0 <FatFile::open(FatFile*, char const*, int)>
}
    aba2:	mov	r0, r1
    aba4:	bx	lr
    aba6:	nop

0000aba8 <FatFile::openRoot(FatVolume*)>:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
  // error if file is already open
  if (isOpen()) {
    aba8:	ldrb	r3, [r0, #0]
    abaa:	cbz	r3, abb0 <FatFile::openRoot(FatVolume*)+0x8>
  m_flags = FILE_FLAG_READ;
  return true;

 fail:
  return false;
}
    abac:	movs	r0, #0
    abae:	bx	lr
    abb0:	b.w	a6d0 <FatFile::openRoot(FatVolume*) [clone .part.38]>

0000abb4 <FatFile::read(void*, unsigned int)>:
  m_curPosition = curPosition;
  m_curCluster = curCluster;
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
    abb4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  size_t toRead;
  uint32_t sector;  // raw device sector number
  cache_t* pc;

  // error if not open for read
  if (!isReadable()) {
    abb8:	ldrb	r3, [r0, #2]
  m_curPosition = curPosition;
  m_curCluster = curCluster;
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
    abba:	sub	sp, #12
    abbc:	mov	r5, r0
  size_t toRead;
  uint32_t sector;  // raw device sector number
  cache_t* pc;

  // error if not open for read
  if (!isReadable()) {
    abbe:	lsls	r7, r3, #31
    abc0:	bpl.w	ace4 <FatFile::read(void*, unsigned int)+0x130>
    abc4:	mov	r7, r1
    abc6:	ldrb	r1, [r0, #0]
    abc8:	mov	r9, r2
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (isFile()) {
    abca:	lsls	r6, r1, #28
    abcc:	bmi.w	acf6 <FatFile::read(void*, unsigned int)+0x142>
    uint32_t tmp32 = m_fileSize - m_curPosition;
    if (nbyte >= tmp32) {
      nbyte = tmp32;
    }
  } else if (isRootFixed()) {
    abd0:	lsls	r4, r1, #26
    abd2:	bpl.n	abe6 <FatFile::read(void*, unsigned int)+0x32>
    uint16_t tmp16 = 32*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
    abd4:	ldr	r2, [r0, #8]
    if (nbyte > tmp16) {
    abd6:	ldr	r3, [r0, #20]
    abd8:	ldrh	r2, [r2, #8]
    abda:	rsb	r3, r3, r2, lsl #5
    abde:	uxth	r3, r3
    abe0:	cmp	r9, r3
    abe2:	it	cs
    abe4:	movcs	r9, r3
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
    abe6:	cmp.w	r9, #0
    abea:	beq.w	ad42 <FatFile::read(void*, unsigned int)+0x18e>
    abee:	ldr	r3, [r5, #20]
    size_t n;
    offset = m_curPosition & m_vol->sectorMask();  // offset in sector
    if (isRootFixed()) {
    abf0:	lsls	r0, r1, #26
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
    abf2:	mov	r6, r9
    abf4:	mov.w	r8, #0
        } else if (isFile() && isContiguous()) {
          m_curCluster++;
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    abf8:	add.w	sl, r5, #16
    }
  }
  toRead = nbyte;
  while (toRead) {
    size_t n;
    offset = m_curPosition & m_vol->sectorMask();  // offset in sector
    abfc:	ldr	r2, [r5, #8]
    abfe:	ubfx	r4, r3, #0, #9
    if (isRootFixed()) {
    ac02:	bpl.n	ac86 <FatFile::read(void*, unsigned int)+0xd2>
      sector = m_vol->rootDirStart()
               + (m_curPosition >> m_vol->bytesPerSectorShift());
    ac04:	ldr	r1, [r2, #32]
    ac06:	add.w	r1, r1, r3, lsr #9
        }
      }
      sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
    }
    if (offset != 0 || toRead < m_vol->bytesPerSector()
        || sector == m_vol->cacheSectorNumber()) {
    ac0a:	cmp	r4, #0
    ac0c:	bne.n	acb8 <FatFile::read(void*, unsigned int)+0x104>
          }
        }
      }
      sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
    }
    if (offset != 0 || toRead < m_vol->bytesPerSector()
    ac0e:	cmp.w	r6, #512	; 0x200
    ac12:	bcc.n	acb8 <FatFile::read(void*, unsigned int)+0x104>
    ac14:	ldr	r3, [r2, #48]	; 0x30
        || sector == m_vol->cacheSectorNumber()) {
    ac16:	cmp	r1, r3
    ac18:	beq.n	acb8 <FatFile::read(void*, unsigned int)+0x104>
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_SECTOR_IO
    } else if (toRead >= 2*m_vol->bytesPerSector()) {
    ac1a:	cmp.w	r6, #1024	; 0x400
    ac1e:	bcc.n	ad08 <FatFile::read(void*, unsigned int)+0x154>
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
      if (!isRootFixed()) {
    ac20:	ldrb	r0, [r5, #0]
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_SECTOR_IO
    } else if (toRead >= 2*m_vol->bytesPerSector()) {
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
    ac22:	mov.w	fp, r6, lsr #9
      if (!isRootFixed()) {
    ac26:	lsls	r0, r0, #26
    ac28:	bmi.n	ac36 <FatFile::read(void*, unsigned int)+0x82>
        uint32_t mb = m_vol->sectorsPerCluster() - sectorOfCluster;
    ac2a:	ldrb	r0, [r2, #4]
    ac2c:	rsb	r0, r8, r0
    ac30:	cmp	fp, r0
    ac32:	it	cs
    ac34:	movcs	fp, r0
   * \param[in] sector Start sector of the range.
   * \param[in] count Number of sectors in the range.
   * \return true if a sector in the range is cached.
   */
  bool isCached(uint32_t sector, size_t count) {
    return sector <= m_sector && m_sector < (sector + count);
    ac36:	cmp	r1, r3
        if (mb < ns) {
          ns = mb;
        }
      }
      n = ns << m_vol->bytesPerSectorShift();
    ac38:	mov.w	r4, fp, lsl #9
    ac3c:	bhi.n	ac5a <FatFile::read(void*, unsigned int)+0xa6>
    ac3e:	add.w	r0, r1, fp
    ac42:	cmp	r3, r0
    ac44:	bcs.n	ac5a <FatFile::read(void*, unsigned int)+0xa6>
   * \param[in] count Number of sectors to be read.
   * \param[out] dst Pointer to the location that will receive the data.
   * \return true for success or false for failure.
   */
  bool cacheSafeRead(uint32_t sector, uint8_t* dst, size_t count) {
    if (isCached(sector, count) && !sync()) {
    ac46:	add.w	r0, r2, #36	; 0x24
    ac4a:	str	r1, [sp, #4]
    ac4c:	str	r2, [sp, #0]
    ac4e:	bl	8de0 <FsCache::sync()>
    ac52:	ldr	r2, [sp, #0]
    ac54:	ldr	r1, [sp, #4]
    ac56:	cmp	r0, #0
    ac58:	beq.n	ace4 <FatFile::read(void*, unsigned int)+0x130>
      return false;
    }
    return m_blockDev->readSectors(sector, dst, count);
    ac5a:	ldr	r0, [r2, #40]	; 0x28
    ac5c:	mov	r3, fp
    ac5e:	mov	r2, r7
    ac60:	ldr.w	lr, [r0]
    ac64:	ldr.w	fp, [lr, #16]
    ac68:	blx	fp
      if (!m_vol->cacheSafeRead(sector, dst, ns)) {
    ac6a:	cmp	r0, #0
    ac6c:	beq.n	ace4 <FatFile::read(void*, unsigned int)+0x130>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    m_curPosition += n;
    ac6e:	ldr	r3, [r5, #20]
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
    ac70:	subs	r6, r6, r4
      if (!m_vol->cacheSafeRead(sector, dst)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    ac72:	add	r7, r4
    m_curPosition += n;
    ac74:	add	r3, r4
    ac76:	str	r3, [r5, #20]
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
    ac78:	beq.n	ad42 <FatFile::read(void*, unsigned int)+0x18e>
    ac7a:	ldrb	r1, [r5, #0]
    size_t n;
    offset = m_curPosition & m_vol->sectorMask();  // offset in sector
    ac7c:	ubfx	r4, r3, #0, #9
    ac80:	ldr	r2, [r5, #8]
    if (isRootFixed()) {
    ac82:	lsls	r0, r1, #26
    ac84:	bmi.n	ac04 <FatFile::read(void*, unsigned int)+0x50>
  }
  //----------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t sectorOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterSectorMask;
    ac86:	ldrb.w	r8, [r2, #5]
    ac8a:	and.w	r8, r8, r3, lsr #9
      sector = m_vol->rootDirStart()
               + (m_curPosition >> m_vol->bytesPerSectorShift());
    } else {
      sectorOfCluster = m_vol->sectorOfCluster(m_curPosition);
      if (offset == 0 && sectorOfCluster == 0) {
    ac8e:	cmp	r4, #0
    ac90:	bne.n	ad04 <FatFile::read(void*, unsigned int)+0x150>
    ac92:	cmp.w	r8, #0
    ac96:	bne.n	ad04 <FatFile::read(void*, unsigned int)+0x150>
        // start of new cluster
        if (m_curPosition == 0) {
    ac98:	cmp	r3, #0
    ac9a:	bne.n	ad1c <FatFile::read(void*, unsigned int)+0x168>
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
    ac9c:	lsls	r0, r1, #25
    ac9e:	ite	mi
    aca0:	ldrmi	r3, [r2, #32]
    aca2:	ldrpl	r3, [r5, #32]
#if USE_FAT_FILE_FLAG_CONTIGUOUS
        } else if (isFile() && isContiguous()) {
          m_curCluster++;
    aca4:	str	r3, [r5, #16]
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
      }
      sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
    aca6:	ldrb	r1, [r2, #6]
    aca8:	subs	r3, #2
    acaa:	ldr	r0, [r2, #20]
    acac:	lsls	r3, r1
    acae:	add.w	r1, r8, r0
    acb2:	add	r1, r3
    }
    if (offset != 0 || toRead < m_vol->bytesPerSector()
        || sector == m_vol->cacheSectorNumber()) {
    acb4:	cmp	r4, #0
    acb6:	beq.n	ac0e <FatFile::read(void*, unsigned int)+0x5a>
  bool cacheSync() {
    return m_cache.sync() && syncDevice();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t sector, uint8_t options) {
    return reinterpret_cast<cache_t*>(m_cache.get(sector, options));
    acb8:	add.w	r0, r2, #36	; 0x24
    acbc:	movs	r2, #0
    acbe:	bl	8d80 <FsCache::get(unsigned long, unsigned char)>
      if (n > toRead) {
        n = toRead;
      }
      // read sector to cache and copy data to caller
      pc = m_vol->cacheFetchData(sector, FsCache::CACHE_FOR_READ);
      if (!pc) {
    acc2:	cbz	r0, ace4 <FatFile::read(void*, unsigned int)+0x130>
      sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
    }
    if (offset != 0 || toRead < m_vol->bytesPerSector()
        || sector == m_vol->cacheSectorNumber()) {
      // amount to be read from current sector
      n = m_vol->bytesPerSector() - offset;
    acc4:	rsb	r3, r4, #512	; 0x200
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
    acc8:	adds	r1, r0, r4
    acca:	mov	r0, r7
    accc:	cmp	r3, r6
    acce:	it	cs
    acd0:	movcs	r3, r6
    acd2:	mov	r2, r3
    acd4:	mov	r4, r3
    acd6:	bl	db14 <memcpy>
    acda:	b.n	ac6e <FatFile::read(void*, unsigned int)+0xba>
          if (fg < 0) {
            DBG_FAIL_MACRO;
            goto fail;
          }
          if (fg == 0) {
            if (isDir()) {
    acdc:	ldrb	r3, [r5, #0]
    acde:	tst.w	r3, #112	; 0x70
    ace2:	bne.n	ad44 <FatFile::read(void*, unsigned int)+0x190>
    toRead -= n;
  }
  return nbyte - toRead;

 fail:
  m_error |= READ_ERROR;
    ace4:	ldrb	r3, [r5, #1]
  return -1;
    ace6:	mov.w	r0, #4294967295
    toRead -= n;
  }
  return nbyte - toRead;

 fail:
  m_error |= READ_ERROR;
    acea:	orr.w	r3, r3, #2
    acee:	strb	r3, [r5, #1]
  return -1;
}
    acf0:	add	sp, #12
    acf2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (isFile()) {
    uint32_t tmp32 = m_fileSize - m_curPosition;
    acf6:	ldr	r3, [r0, #28]
    acf8:	ldr	r2, [r0, #20]
    acfa:	subs	r3, r3, r2
    acfc:	cmp	r9, r3
    acfe:	it	cs
    ad00:	movcs	r9, r3
    ad02:	b.n	abe6 <FatFile::read(void*, unsigned int)+0x32>
    ad04:	ldr	r3, [r5, #16]
    ad06:	b.n	aca6 <FatFile::read(void*, unsigned int)+0xf2>
  bool cacheSafeRead(uint32_t sector, uint8_t* dst) {
    if (isCached(sector)) {
      memcpy(dst, m_buffer, 512);
      return true;
    }
    return m_blockDev->readSector(sector, dst);
    ad08:	ldr	r0, [r2, #40]	; 0x28
    ad0a:	mov	r2, r7
    ad0c:	ldr	r3, [r0, #0]
    ad0e:	ldr	r3, [r3, #12]
    ad10:	blx	r3
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // read single sector
      n = m_vol->bytesPerSector();
      if (!m_vol->cacheSafeRead(sector, dst)) {
    ad12:	cmp	r0, #0
    ad14:	beq.n	ace4 <FatFile::read(void*, unsigned int)+0x130>
        goto fail;
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // read single sector
      n = m_vol->bytesPerSector();
    ad16:	mov.w	r4, #512	; 0x200
    ad1a:	b.n	ac6e <FatFile::read(void*, unsigned int)+0xba>
        // start of new cluster
        if (m_curPosition == 0) {
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
#if USE_FAT_FILE_FLAG_CONTIGUOUS
        } else if (isFile() && isContiguous()) {
    ad1c:	lsls	r1, r1, #28
    ad1e:	bpl.n	ad2c <FatFile::read(void*, unsigned int)+0x178>
    ad20:	ldrb	r3, [r5, #2]
    ad22:	lsls	r3, r3, #25
    ad24:	bpl.n	ad2c <FatFile::read(void*, unsigned int)+0x178>
          m_curCluster++;
    ad26:	ldr	r3, [r5, #16]
    ad28:	adds	r3, #1
    ad2a:	b.n	aca4 <FatFile::read(void*, unsigned int)+0xf0>
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    ad2c:	mov	r0, r2
    ad2e:	ldr	r1, [r5, #16]
    ad30:	mov	r2, sl
    ad32:	bl	b4a4 <FatPartition::fatGet(unsigned long, unsigned long*)>
          if (fg < 0) {
    ad36:	cmp	r0, #0
    ad38:	blt.n	ace4 <FatFile::read(void*, unsigned int)+0x130>
            DBG_FAIL_MACRO;
            goto fail;
          }
          if (fg == 0) {
    ad3a:	beq.n	acdc <FatFile::read(void*, unsigned int)+0x128>
    ad3c:	ldr	r2, [r5, #8]
    ad3e:	ldr	r3, [r5, #16]
    ad40:	b.n	aca6 <FatFile::read(void*, unsigned int)+0xf2>
        goto fail;
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // read single sector
      n = m_vol->bytesPerSector();
    ad42:	movs	r6, #0
    }
    dst += n;
    m_curPosition += n;
    toRead -= n;
  }
  return nbyte - toRead;
    ad44:	rsb	r0, r6, r9

 fail:
  m_error |= READ_ERROR;
  return -1;
}
    ad48:	add	sp, #12
    ad4a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ad4e:	nop

0000ad50 <FatFile::peek()>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::peek() {
    ad50:	push	{r4, r5, r6, lr}
    ad52:	sub	sp, #8
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
    ad54:	movs	r2, #1
    ad56:	mov	r4, r0
  uint32_t curPosition = m_curPosition;
    ad58:	ldr	r6, [r0, #20]
    ad5a:	add.w	r1, sp, #7
  uint32_t curCluster = m_curCluster;
    ad5e:	ldr	r5, [r0, #16]
    ad60:	bl	abb4 <FatFile::read(void*, unsigned int)>
    ad64:	cmp	r0, #1
  int c = read();
  m_curPosition = curPosition;
    ad66:	str	r6, [r4, #20]
    ad68:	ite	eq
    ad6a:	ldrbeq.w	r0, [sp, #7]
    ad6e:	movne.w	r0, #4294967295
  m_curCluster = curCluster;
    ad72:	str	r5, [r4, #16]
  return c;
}
    ad74:	add	sp, #8
    ad76:	pop	{r4, r5, r6, pc}

0000ad78 <FatFile::readDirCache(bool)>:
}
//------------------------------------------------------------------------------
// Read next directory entry into the cache
// Assumes file is correctly positioned
DirFat_t* FatFile::readDirCache(bool skipReadOk) {
  uint8_t i = (m_curPosition >> 5) & 0XF;
    ad78:	ldr	r3, [r0, #20]
  }
}
//------------------------------------------------------------------------------
// Read next directory entry into the cache
// Assumes file is correctly positioned
DirFat_t* FatFile::readDirCache(bool skipReadOk) {
    ad7a:	push	{r4, r5, lr}
  uint8_t i = (m_curPosition >> 5) & 0XF;
    ad7c:	ubfx	r5, r3, #5, #4
  }
}
//------------------------------------------------------------------------------
// Read next directory entry into the cache
// Assumes file is correctly positioned
DirFat_t* FatFile::readDirCache(bool skipReadOk) {
    ad80:	sub	sp, #12
    ad82:	mov	r4, r0
  uint8_t i = (m_curPosition >> 5) & 0XF;

  if (i == 0 || !skipReadOk) {
    ad84:	clz	r2, r5
    ad88:	lsrs	r2, r2, #5
    ad8a:	cmp	r2, r1
    ad8c:	bcs.n	ad9e <FatFile::readDirCache(bool)+0x26>
      }
      goto fail;
    }
    m_curPosition += 31;
  } else {
    m_curPosition += 32;
    ad8e:	adds	r3, #32
    ad90:	str	r3, [r0, #20]
  static const uint8_t CACHE_RESERVE_FOR_WRITE =
    CACHE_STATUS_DIRTY | CACHE_OPTION_NO_READ;
  //----------------------------------------------------------------------------
  /** \return Cache buffer address. */
  uint8_t* cacheBuffer() {
    return m_buffer;
    ad92:	ldr	r0, [r4, #8]
    ad94:	adds	r0, #52	; 0x34
  }
  // return pointer to entry
  return reinterpret_cast<DirFat_t*>(m_vol->cacheAddress()) + i;
    ad96:	add.w	r0, r0, r5, lsl #5

 fail:
  return nullptr;
}
    ad9a:	add	sp, #12
    ad9c:	pop	{r4, r5, pc}
// Assumes file is correctly positioned
DirFat_t* FatFile::readDirCache(bool skipReadOk) {
  uint8_t i = (m_curPosition >> 5) & 0XF;

  if (i == 0 || !skipReadOk) {
    int8_t n = read(&n, 1);
    ad9e:	movs	r2, #1
    ada0:	add.w	r1, sp, #7
    ada4:	bl	abb4 <FatFile::read(void*, unsigned int)>
    ada8:	sxtb	r0, r0
    if  (n != 1) {
    adaa:	cmp	r0, #1
    adac:	bne.n	adb6 <FatFile::readDirCache(bool)+0x3e>
      if (n != 0) {
        DBG_FAIL_MACRO;
      }
      goto fail;
    }
    m_curPosition += 31;
    adae:	ldr	r3, [r4, #20]
    adb0:	adds	r3, #31
    adb2:	str	r3, [r4, #20]
    adb4:	b.n	ad92 <FatFile::readDirCache(bool)+0x1a>
  }
  // return pointer to entry
  return reinterpret_cast<DirFat_t*>(m_vol->cacheAddress()) + i;

 fail:
  return nullptr;
    adb6:	movs	r0, #0
    adb8:	b.n	ad9a <FatFile::readDirCache(bool)+0x22>
    adba:	nop

0000adbc <FatFile::rename(FatFile*, char const*)>:
//------------------------------------------------------------------------------
bool FatFile::rename(const char* newPath) {
  return rename(m_vol->vwd(), newPath);
}
//------------------------------------------------------------------------------
bool FatFile::rename(FatFile* dirFile, const char* newPath) {
    adbc:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  FatFile oldFile;
  cache_t* pc;
  DirFat_t* dir;

  // Must be an open file or subdirectory.
  if (!(isFile() || isSubDir())) {
    adc0:	ldrb	r5, [r0, #0]
//------------------------------------------------------------------------------
bool FatFile::rename(const char* newPath) {
  return rename(m_vol->vwd(), newPath);
}
//------------------------------------------------------------------------------
bool FatFile::rename(FatFile* dirFile, const char* newPath) {
    adc2:	sub	sp, #108	; 0x6c
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() {}
    adc4:	movs	r4, #0
  FatFile oldFile;
  cache_t* pc;
  DirFat_t* dir;

  // Must be an open file or subdirectory.
  if (!(isFile() || isSubDir())) {
    adc6:	tst.w	r5, #24
    adca:	strb.w	r4, [sp, #32]
    adce:	strb.w	r4, [sp, #33]	; 0x21
    add2:	strb.w	r4, [sp, #34]	; 0x22
    add6:	strb.w	r4, [sp, #68]	; 0x44
    adda:	strb.w	r4, [sp, #69]	; 0x45
    adde:	strb.w	r4, [sp, #70]	; 0x46
    ade2:	beq.n	adee <FatFile::rename(FatFile*, char const*)+0x32>
  if (!USE_LONG_FILE_NAMES && isLFN()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Can't move file to new volume.
  if (m_vol != dirFile->m_vol) {
    ade4:	ldr	r6, [r0, #8]
    ade6:	mov	r3, r0
    ade8:	ldr	r5, [r1, #8]
    adea:	cmp	r6, r5
    adec:	beq.n	adf6 <FatFile::rename(FatFile*, char const*)+0x3a>
    goto fail;
  }
  return m_vol->cacheSync();

 fail:
  return false;
    adee:	movs	r0, #0
}
    adf0:	add	sp, #108	; 0x6c
    adf2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    adf6:	mov	r5, r3
    adf8:	mov	r8, r2
    adfa:	mov	r6, r1
    adfc:	bl	a7f0 <FatFile::sync() [clone .part.42]>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // sync() and cache directory entry
  sync();
  oldFile = *this;
    ae00:	mov	lr, r5
    ae02:	add	r7, sp, #68	; 0x44
    ae04:	ldmia.w	lr!, {r0, r1, r2, r3}
    ae08:	stmia	r7!, {r0, r1, r2, r3}
    ae0a:	ldmia.w	lr!, {r0, r1, r2, r3}
    ae0e:	ldr.w	lr, [lr]
    ae12:	stmia	r7!, {r0, r1, r2, r3}
  dir = cacheDirEntry(FsCache::CACHE_FOR_READ);
    ae14:	mov	r1, r4
    ae16:	mov	r0, r5
    DBG_FAIL_MACRO;
    goto fail;
  }
  // sync() and cache directory entry
  sync();
  oldFile = *this;
    ae18:	str.w	lr, [r7]
  dir = cacheDirEntry(FsCache::CACHE_FOR_READ);
    ae1c:	bl	a7d0 <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    ae20:	mov	lr, r0
    ae22:	cmp	r0, #0
    ae24:	beq.n	adee <FatFile::rename(FatFile*, char const*)+0x32>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // save directory entry
  memcpy(&entry, dir, sizeof(entry));
    ae26:	ldr	r0, [r0, #0]
    ae28:	mov	r7, sp
    ae2a:	ldr.w	r1, [lr, #4]
    ae2e:	ldr.w	r2, [lr, #8]
    ae32:	ldr.w	r3, [lr, #12]
  // make directory entry for new path
  if (isFile()) {
    ae36:	ldrb.w	ip, [r5]
  if (!dir) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // save directory entry
  memcpy(&entry, dir, sizeof(entry));
    ae3a:	stmia	r7!, {r0, r1, r2, r3}
  // make directory entry for new path
  if (isFile()) {
    ae3c:	and.w	ip, ip, #8
  if (!dir) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // save directory entry
  memcpy(&entry, dir, sizeof(entry));
    ae40:	ldr.w	r0, [lr, #16]
    ae44:	ldr.w	r1, [lr, #20]
    ae48:	ldr.w	r2, [lr, #24]
  // make directory entry for new path
  if (isFile()) {
    ae4c:	and.w	r9, ip, #255	; 0xff
  if (!dir) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // save directory entry
  memcpy(&entry, dir, sizeof(entry));
    ae50:	ldr.w	r3, [lr, #28]
    ae54:	stmia	r7!, {r0, r1, r2, r3}
  // make directory entry for new path
  if (isFile()) {
    ae56:	cmp.w	ip, #0
    ae5a:	beq.w	af8a <FatFile::rename(FatFile*, char const*)+0x1ce>
    if (!file.open(dirFile, newPath, O_CREAT | O_EXCL | O_WRONLY)) {
    ae5e:	mov	r2, r8
    ae60:	mov	r1, r6
    ae62:	movw	r3, #2561	; 0xa01
    ae66:	add	r0, sp, #32
    ae68:	bl	aad0 <FatFile::open(FatFile*, char const*, int)>
    ae6c:	cmp	r0, #0
    ae6e:	beq.n	adee <FatFile::rename(FatFile*, char const*)+0x32>
    // save cluster containing new dot dot
    dirCluster = file.m_firstCluster;
  }
  // change to new directory entry

  m_dirSector = file.m_dirSector;
    ae70:	ldr	r2, [sp, #56]	; 0x38
  m_dirIndex = file.m_dirIndex;
  m_lfnOrd = file.m_lfnOrd;
  m_dirCluster = file.m_dirCluster;
  // mark closed to avoid possible destructor close call
  file.m_attributes = FILE_ATTR_CLOSED;
    ae72:	movs	r6, #0
    dirCluster = file.m_firstCluster;
  }
  // change to new directory entry

  m_dirSector = file.m_dirSector;
  m_dirIndex = file.m_dirIndex;
    ae74:	ldrh.w	r3, [sp, #36]	; 0x24
  // mark closed to avoid possible destructor close call
  file.m_attributes = FILE_ATTR_CLOSED;
  file.m_flags = 0;

  // cache new directory entry
  dir = cacheDirEntry(FsCache::CACHE_FOR_WRITE);
    ae78:	movs	r1, #1
    // save cluster containing new dot dot
    dirCluster = file.m_firstCluster;
  }
  // change to new directory entry

  m_dirSector = file.m_dirSector;
    ae7a:	str	r2, [r5, #24]
  // mark closed to avoid possible destructor close call
  file.m_attributes = FILE_ATTR_CLOSED;
  file.m_flags = 0;

  // cache new directory entry
  dir = cacheDirEntry(FsCache::CACHE_FOR_WRITE);
    ae7c:	mov	r0, r5
    dirCluster = file.m_firstCluster;
  }
  // change to new directory entry

  m_dirSector = file.m_dirSector;
  m_dirIndex = file.m_dirIndex;
    ae7e:	strh	r3, [r5, #4]
  m_lfnOrd = file.m_lfnOrd;
    ae80:	ldrb.w	r2, [sp, #35]	; 0x23
  m_dirCluster = file.m_dirCluster;
    ae84:	ldr	r3, [sp, #44]	; 0x2c
  }
  // change to new directory entry

  m_dirSector = file.m_dirSector;
  m_dirIndex = file.m_dirIndex;
  m_lfnOrd = file.m_lfnOrd;
    ae86:	strb	r2, [r5, #3]
  m_dirCluster = file.m_dirCluster;
    ae88:	str	r3, [r5, #12]
  // mark closed to avoid possible destructor close call
  file.m_attributes = FILE_ATTR_CLOSED;
    ae8a:	strb.w	r6, [sp, #32]
  file.m_flags = 0;
    ae8e:	strb.w	r6, [sp, #34]	; 0x22

  // cache new directory entry
  dir = cacheDirEntry(FsCache::CACHE_FOR_WRITE);
    ae92:	bl	a7d0 <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    ae96:	cmp	r0, #0
    ae98:	beq.n	adee <FatFile::rename(FatFile*, char const*)+0x32>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // copy all but name and name flags to new directory entry
  memcpy(&dir->createTimeMs, &entry.createTimeMs,
         sizeof(entry) - sizeof(dir->name) - 2);
    ae9a:	add	r3, sp, #104	; 0x68
  dir->attributes = entry.attributes;
    ae9c:	ldrb.w	r2, [sp, #11]
    DBG_FAIL_MACRO;
    goto fail;
  }
  // copy all but name and name flags to new directory entry
  memcpy(&dir->createTimeMs, &entry.createTimeMs,
         sizeof(entry) - sizeof(dir->name) - 2);
    aea0:	ldr.w	r7, [r3, #-91]!
  dir->attributes = entry.attributes;
    aea4:	strb	r2, [r0, #11]
    DBG_FAIL_MACRO;
    goto fail;
  }
  // copy all but name and name flags to new directory entry
  memcpy(&dir->createTimeMs, &entry.createTimeMs,
         sizeof(entry) - sizeof(dir->name) - 2);
    aea6:	ldr.w	lr, [r3, #4]
    aeaa:	str.w	r7, [r0, #13]
    aeae:	ldr	r7, [r3, #8]
    aeb0:	str.w	lr, [r0, #17]
    aeb4:	str.w	r7, [r0, #21]
    aeb8:	ldr.w	lr, [r3, #12]
    aebc:	ldrh	r7, [r3, #16]
    aebe:	ldrb	r3, [r3, #18]
    aec0:	str.w	lr, [r0, #25]
    aec4:	strh.w	r7, [r0, #29]
    aec8:	strb	r3, [r0, #31]
  dir->attributes = entry.attributes;

  // update dot dot if directory
  if (dirCluster) {
    aeca:	cmp	r4, #0
    aecc:	beq.n	af46 <FatFile::rename(FatFile*, char const*)+0x18a>
    // get new dot dot
    uint32_t sector = m_vol->clusterStartSector(dirCluster);
    aece:	ldr	r7, [r5, #8]
    aed0:	subs	r3, r4, #2
    aed2:	mov	r2, r6
    aed4:	ldrb	r6, [r7, #6]
    aed6:	add.w	r0, r7, #36	; 0x24
    aeda:	ldr	r1, [r7, #20]
    aedc:	lsls	r3, r6
    aede:	add	r1, r3
    aee0:	bl	8d80 <FsCache::get(unsigned long, unsigned char)>
    pc = m_vol->cacheFetchData(sector, FsCache::CACHE_FOR_READ);
    if (!pc) {
    aee4:	cmp	r0, #0
    aee6:	beq.n	adee <FatFile::rename(FatFile*, char const*)+0x32>
      DBG_FAIL_MACRO;
      goto fail;
    }
    memcpy(&entry, &pc->dir[1], sizeof(entry));
    aee8:	mov	r6, r0
    aeea:	mov	r7, sp
    aeec:	ldr.w	r0, [r6, #32]!
    aef0:	ldr	r1, [r6, #4]
    aef2:	ldr	r2, [r6, #8]
    aef4:	ldr	r3, [r6, #12]
    aef6:	stmia	r7!, {r0, r1, r2, r3}
    aef8:	ldr	r0, [r6, #16]
    aefa:	ldr	r1, [r6, #20]
    aefc:	ldr	r2, [r6, #24]
    aefe:	ldr	r3, [r6, #28]
    af00:	stmia	r7!, {r0, r1, r2, r3}

    // free unused cluster
    if (!m_vol->freeChain(dirCluster)) {
    af02:	mov	r1, r4
    af04:	ldr	r0, [r5, #8]
    af06:	bl	b600 <FatPartition::freeChain(unsigned long)>
    af0a:	cmp	r0, #0
    af0c:	beq.w	adee <FatFile::rename(FatFile*, char const*)+0x32>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // store new dot dot
    sector = m_vol->clusterStartSector(m_firstCluster);
    af10:	ldr	r1, [r5, #8]
    af12:	movs	r2, #1
    af14:	ldr	r3, [r5, #32]
    af16:	ldrb	r4, [r1, #6]
    af18:	add.w	r0, r1, #36	; 0x24
    af1c:	subs	r3, #2
    af1e:	ldr	r1, [r1, #20]
    af20:	lsls	r3, r4
    af22:	add	r1, r3
    af24:	bl	8d80 <FsCache::get(unsigned long, unsigned char)>
    pc = m_vol->cacheFetchData(sector, FsCache::CACHE_FOR_WRITE);
    if (!pc) {
    af28:	mov	r7, r0
    af2a:	cmp	r0, #0
    af2c:	beq.w	adee <FatFile::rename(FatFile*, char const*)+0x32>
      DBG_FAIL_MACRO;
      goto fail;
    }
    memcpy(&pc->dir[1], &entry, sizeof(entry));
    af30:	mov	r4, sp
    af32:	ldmia	r4!, {r0, r1, r2, r3}
    af34:	str	r0, [r7, #32]
    af36:	str	r1, [r7, #36]	; 0x24
    af38:	str	r2, [r7, #40]	; 0x28
    af3a:	str	r3, [r7, #44]	; 0x2c
    af3c:	ldmia	r4!, {r0, r1, r2, r3}
    af3e:	str	r0, [r7, #48]	; 0x30
    af40:	str	r1, [r7, #52]	; 0x34
    af42:	str	r2, [r7, #56]	; 0x38
    af44:	str	r3, [r7, #60]	; 0x3c
  }
  // Remove old directory entry;
  oldFile.m_firstCluster = 0;
    af46:	movs	r1, #0
  oldFile.m_flags = FILE_FLAG_WRITE;
    af48:	movs	r2, #2
  oldFile.m_attributes = FILE_ATTR_FILE;
    af4a:	movs	r3, #8
  if (!oldFile.remove()) {
    af4c:	add	r0, sp, #68	; 0x44
      goto fail;
    }
    memcpy(&pc->dir[1], &entry, sizeof(entry));
  }
  // Remove old directory entry;
  oldFile.m_firstCluster = 0;
    af4e:	str	r1, [sp, #100]	; 0x64
  oldFile.m_flags = FILE_FLAG_WRITE;
    af50:	strb.w	r2, [sp, #70]	; 0x46
  oldFile.m_attributes = FILE_ATTR_FILE;
    af54:	strb.w	r3, [sp, #68]	; 0x44
  if (!oldFile.remove()) {
    af58:	bl	bc08 <FatFile::remove()>
    af5c:	cmp	r0, #0
    af5e:	beq.w	adee <FatFile::rename(FatFile*, char const*)+0x32>
    DBG_FAIL_MACRO;
    goto fail;
  }
  return m_vol->cacheSync();
    af62:	ldr	r4, [r5, #8]
  cache_t* cacheFetchFat(uint32_t sector, uint8_t options) {
    options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    return reinterpret_cast<cache_t*>(m_fatCache.get(sector, options));
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    af64:	add.w	r0, r4, #36	; 0x24
    af68:	bl	8de0 <FsCache::sync()>
    af6c:	cmp	r0, #0
    af6e:	beq.w	adee <FatFile::rename(FatFile*, char const*)+0x32>
    af72:	add.w	r0, r4, #564	; 0x234
    af76:	bl	8de0 <FsCache::sync()>
    af7a:	cmp	r0, #0
    af7c:	beq.w	adee <FatFile::rename(FatFile*, char const*)+0x32>
    af80:	ldr	r0, [r4, #0]
  }
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
  }
  bool syncDevice() {
    return m_blockDev->syncDevice();
    af82:	ldr	r3, [r0, #0]
    af84:	ldr	r3, [r3, #24]
    af86:	blx	r3
    af88:	b.n	adf0 <FatFile::rename(FatFile*, char const*)+0x34>
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else {
    // don't create missing path prefix components
    if (!file.mkdir(dirFile, newPath, false)) {
    af8a:	mov	r3, r9
    af8c:	mov	r2, r8
    af8e:	mov	r1, r6
    af90:	add	r0, sp, #32
    af92:	bl	aa08 <FatFile::mkdir(FatFile*, char const*, bool)>
    af96:	cmp	r0, #0
    af98:	beq.w	adee <FatFile::rename(FatFile*, char const*)+0x32>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // save cluster containing new dot dot
    dirCluster = file.m_firstCluster;
    af9c:	ldr	r4, [sp, #64]	; 0x40
    af9e:	b.n	ae70 <FatFile::rename(FatFile*, char const*)+0xb4>

0000afa0 <FatFile::rmdir()>:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::rmdir() {
  // must be open subdirectory
  if (!isSubDir() || (!USE_LONG_FILE_NAMES && isLFN())) {
    afa0:	ldrb	r3, [r0, #0]
    afa2:	lsls	r2, r3, #27
    afa4:	bpl.n	afdc <FatFile::rmdir()+0x3c>
  if (!isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    afa6:	ldr	r3, [r0, #20]

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::rmdir() {
    afa8:	push	{r4, lr}
    afaa:	mov	r4, r0
  if (!isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    afac:	cbz	r3, afbc <FatFile::rmdir()+0x1c>
    }
  }

 done:
  m_curPosition = pos;
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    afae:	ldrb	r3, [r0, #2]
  if (pos == m_curPosition) {
    return true;
  }
  if (pos == 0) {
    // set position to start of file
    m_curCluster = 0;
    afb0:	movs	r2, #0
    }
  }

 done:
  m_curPosition = pos;
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    afb2:	bic.w	r3, r3, #32
  if (pos == m_curPosition) {
    return true;
  }
  if (pos == 0) {
    // set position to start of file
    m_curCluster = 0;
    afb6:	str	r2, [r0, #16]
      goto fail;
    }
  }

 done:
  m_curPosition = pos;
    afb8:	str	r2, [r0, #20]
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    afba:	strb	r3, [r0, #2]
  }
  rewind();

  // make sure directory is empty
  while (1) {
    DirFat_t* dir = readDirCache(true);
    afbc:	movs	r1, #1
    afbe:	mov	r0, r4
    afc0:	bl	ad78 <FatFile::readDirCache(bool)>
    if (!dir) {
    afc4:	cbz	r0, afe0 <FatFile::rmdir()+0x40>
      }
      DBG_FAIL_MACRO;
      goto fail;
    }
    // done if past last used entry
    if (dir->name[0] == FAT_NAME_FREE) {
    afc6:	ldrb	r3, [r0, #0]
    afc8:	cbz	r3, afe6 <FatFile::rmdir()+0x46>
      break;
    }
    // skip empty slot, '.' or '..'
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == '.') {
    afca:	cmp	r3, #229	; 0xe5
    afcc:	beq.n	afbc <FatFile::rmdir()+0x1c>
    afce:	cmp	r3, #46	; 0x2e
    afd0:	beq.n	afbc <FatFile::rmdir()+0x1c>
      continue;
    }
    // error not empty
    if (isFileOrSubdir(dir)) {
    afd2:	ldrb	r3, [r0, #11]
    afd4:	lsls	r3, r3, #28
    afd6:	bmi.n	afbc <FatFile::rmdir()+0x1c>
  m_flags |= FILE_FLAG_WRITE;
  return remove();

 fail:
  return false;
}
    afd8:	movs	r0, #0
    afda:	pop	{r4, pc}
    afdc:	movs	r0, #0
    afde:	bx	lr
  // make sure directory is empty
  while (1) {
    DirFat_t* dir = readDirCache(true);
    if (!dir) {
      // EOF if no error.
      if (!getError()) {
    afe0:	ldrb	r3, [r4, #1]
    afe2:	cmp	r3, #0
    afe4:	bne.n	afd8 <FatFile::rmdir()+0x38>
      goto fail;
    }
  }
  // convert empty directory to normal file for remove
  m_attributes = FILE_ATTR_FILE;
  m_flags |= FILE_FLAG_WRITE;
    afe6:	ldrb	r3, [r4, #2]
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // convert empty directory to normal file for remove
  m_attributes = FILE_ATTR_FILE;
    afe8:	movs	r2, #8
  m_flags |= FILE_FLAG_WRITE;
  return remove();
    afea:	mov	r0, r4
      goto fail;
    }
  }
  // convert empty directory to normal file for remove
  m_attributes = FILE_ATTR_FILE;
  m_flags |= FILE_FLAG_WRITE;
    afec:	orr.w	r3, r3, #2
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // convert empty directory to normal file for remove
  m_attributes = FILE_ATTR_FILE;
    aff0:	strb	r2, [r4, #0]
  m_flags |= FILE_FLAG_WRITE;
    aff2:	strb	r3, [r4, #2]
  return remove();

 fail:
  return false;
}
    aff4:	ldmia.w	sp!, {r4, lr}
    }
  }
  // convert empty directory to normal file for remove
  m_attributes = FILE_ATTR_FILE;
  m_flags |= FILE_FLAG_WRITE;
  return remove();
    aff8:	b.w	bc08 <FatFile::remove()>

0000affc <FatFile::seekSet(unsigned long)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::seekSet(uint32_t pos) {
    affc:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b000:	ldrb	r3, [r0, #0]
    b002:	mov	r4, r0
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
    b004:	ldr	r7, [r0, #16]
  // error if file not open
  if (!isOpen()) {
    b006:	cbz	r3, b036 <FatFile::seekSet(unsigned long)+0x3a>
    b008:	mov	r5, r1
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    b00a:	ldr	r1, [r0, #20]
    b00c:	cmp	r1, r5
    b00e:	beq.n	b06a <FatFile::seekSet(unsigned long)+0x6e>
    return true;
  }
  if (pos == 0) {
    b010:	cbnz	r5, b024 <FatFile::seekSet(unsigned long)+0x28>
    b012:	ldrb	r3, [r0, #2]
    // set position to start of file
    m_curCluster = 0;
    b014:	str	r5, [r0, #16]
    }
  }

 done:
  m_curPosition = pos;
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    b016:	bic.w	r3, r3, #32
      goto fail;
    }
  }

 done:
  m_curPosition = pos;
    b01a:	str	r5, [r4, #20]
  m_flags &= ~FILE_FLAG_PREALLOCATE;
  return true;
    b01c:	movs	r0, #1
    }
  }

 done:
  m_curPosition = pos;
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    b01e:	strb	r3, [r4, #2]
  return true;
    b020:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (pos == 0) {
    // set position to start of file
    m_curCluster = 0;
    goto done;
  }
  if (isFile()) {
    b024:	lsls	r0, r3, #28
    b026:	bmi.n	b03e <FatFile::seekSet(unsigned long)+0x42>
    if (pos > m_fileSize) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if (isRootFixed()) {
    b028:	lsls	r2, r3, #26
    b02a:	bpl.n	b044 <FatFile::seekSet(unsigned long)+0x48>
    b02c:	ldr	r3, [r4, #8]
    if (pos <= 32*m_vol->rootDirEntryCount()) {
    b02e:	ldrh	r3, [r3, #8]
    b030:	cmp.w	r5, r3, lsl #5
    b034:	bls.n	b098 <FatFile::seekSet(unsigned long)+0x9c>
  m_curPosition = pos;
  m_flags &= ~FILE_FLAG_PREALLOCATE;
  return true;

 fail:
  m_curCluster = tmp;
    b036:	str	r7, [r4, #16]
  return false;
    b038:	movs	r0, #0
    b03a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    // set position to start of file
    m_curCluster = 0;
    goto done;
  }
  if (isFile()) {
    if (pos > m_fileSize) {
    b03e:	ldr	r2, [r4, #28]
    b040:	cmp	r5, r2
    b042:	bhi.n	b036 <FatFile::seekSet(unsigned long)+0x3a>
    }
    DBG_FAIL_MACRO;
    goto fail;
  }
  // calculate cluster index for new position
  nNew = (pos - 1) >> (m_vol->bytesPerClusterShift());
    b044:	ldr.w	lr, [r4, #8]
    b048:	subs	r6, r5, #1
    b04a:	ldrb	r2, [r4, #2]
    b04c:	ldrb.w	r0, [lr, #6]
#if USE_FAT_FILE_FLAG_CONTIGUOUS
  if (isContiguous()) {
    b050:	tst.w	r2, #64	; 0x40
    }
    DBG_FAIL_MACRO;
    goto fail;
  }
  // calculate cluster index for new position
  nNew = (pos - 1) >> (m_vol->bytesPerClusterShift());
    b054:	add.w	r0, r0, #9
    b058:	uxtb	r0, r0
    b05a:	lsr.w	r6, r6, r0
#if USE_FAT_FILE_FLAG_CONTIGUOUS
  if (isContiguous()) {
    b05e:	beq.n	b070 <FatFile::seekSet(unsigned long)+0x74>
    m_curCluster = m_firstCluster + nNew;
    b060:	ldr	r1, [r4, #32]
    goto done;
    b062:	mov	r3, r2
  }
  // calculate cluster index for new position
  nNew = (pos - 1) >> (m_vol->bytesPerClusterShift());
#if USE_FAT_FILE_FLAG_CONTIGUOUS
  if (isContiguous()) {
    m_curCluster = m_firstCluster + nNew;
    b064:	add	r6, r1
    b066:	str	r6, [r4, #16]
    goto done;
    b068:	b.n	b016 <FatFile::seekSet(unsigned long)+0x1a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    return true;
    b06a:	movs	r0, #1
  return true;

 fail:
  m_curCluster = tmp;
  return false;
}
    b06c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    m_curCluster = m_firstCluster + nNew;
    goto done;
  }
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
  // calculate cluster index for current position
  nCur = (m_curPosition - 1) >> (m_vol->bytesPerClusterShift());
    b070:	subs	r2, r1, #1
    b072:	lsr.w	r0, r2, r0

  if (nNew < nCur || m_curPosition == 0) {
    b076:	cmp	r6, r0
    b078:	bcc.n	b09c <FatFile::seekSet(unsigned long)+0xa0>
    b07a:	cbz	r1, b09c <FatFile::seekSet(unsigned long)+0xa0>
    // must follow chain from first cluster
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
    b07c:	subs	r6, r6, r0
  }
  while (nNew--) {
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
    b07e:	add.w	r8, r4, #16
    b082:	b.n	b092 <FatFile::seekSet(unsigned long)+0x96>
    b084:	ldr	r1, [r4, #16]
    b086:	subs	r6, #1
    b088:	ldr	r0, [r4, #8]
    b08a:	bl	b4a4 <FatPartition::fatGet(unsigned long, unsigned long*)>
    b08e:	cmp	r0, #0
    b090:	ble.n	b036 <FatFile::seekSet(unsigned long)+0x3a>
    b092:	mov	r2, r8
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    b094:	cmp	r6, #0
    b096:	bne.n	b084 <FatFile::seekSet(unsigned long)+0x88>
    b098:	ldrb	r3, [r4, #2]
    b09a:	b.n	b016 <FatFile::seekSet(unsigned long)+0x1a>
  // calculate cluster index for current position
  nCur = (m_curPosition - 1) >> (m_vol->bytesPerClusterShift());

  if (nNew < nCur || m_curPosition == 0) {
    // must follow chain from first cluster
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
    b09c:	lsls	r3, r3, #25
    b09e:	ite	mi
    b0a0:	ldrmi.w	r3, [lr, #32]
    b0a4:	ldrpl	r3, [r4, #32]
    b0a6:	str	r3, [r4, #16]
    b0a8:	b.n	b07e <FatFile::seekSet(unsigned long)+0x82>
    b0aa:	nop

0000b0ac <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)>:
  return false;
}
//------------------------------------------------------------------------------
// open a cached directory entry.
bool FatFile::openCachedEntry(FatFile* dirFile, uint16_t dirIndex,
                              oflag_t oflag, uint8_t lfnOrd) {
    b0ac:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b0b0:	mov	r5, r1
    b0b2:	mov	r8, r2
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
    b0b4:	movs	r1, #0
    b0b6:	movs	r2, #36	; 0x24
  return false;
}
//------------------------------------------------------------------------------
// open a cached directory entry.
bool FatFile::openCachedEntry(FatFile* dirFile, uint16_t dirIndex,
                              oflag_t oflag, uint8_t lfnOrd) {
    b0b8:	mov	r4, r0
    b0ba:	mov	r7, r3
    b0bc:	ldrb.w	r6, [sp, #24]
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
    b0c0:	bl	10bfc <memset>
  // location of entry in cache
  m_vol = dirFile->m_vol;
    b0c4:	ldr	r0, [r5, #8]
  m_dirIndex = dirIndex;
  m_dirCluster = dirFile->m_firstCluster;
  DirFat_t* dir = reinterpret_cast<DirFat_t*>(m_vol->cacheAddress());
  dir += 0XF & dirIndex;
    b0c6:	and.w	r3, r8, #15
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
  // location of entry in cache
  m_vol = dirFile->m_vol;
  m_dirIndex = dirIndex;
  m_dirCluster = dirFile->m_firstCluster;
    b0ca:	ldr	r1, [r5, #32]
    b0cc:	add.w	r2, r0, #52	; 0x34
bool FatFile::openCachedEntry(FatFile* dirFile, uint16_t dirIndex,
                              oflag_t oflag, uint8_t lfnOrd) {
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
  // location of entry in cache
  m_vol = dirFile->m_vol;
    b0d0:	str	r0, [r4, #8]
  m_dirIndex = dirIndex;
  m_dirCluster = dirFile->m_firstCluster;
    b0d2:	str	r1, [r4, #12]
  DirFat_t* dir = reinterpret_cast<DirFat_t*>(m_vol->cacheAddress());
  dir += 0XF & dirIndex;
    b0d4:	add.w	r2, r2, r3, lsl #5
                              oflag_t oflag, uint8_t lfnOrd) {
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
  // location of entry in cache
  m_vol = dirFile->m_vol;
  m_dirIndex = dirIndex;
    b0d8:	strh.w	r8, [r4, #4]
    b0dc:	ldrb	r1, [r2, #11]
  m_dirCluster = dirFile->m_firstCluster;
  DirFat_t* dir = reinterpret_cast<DirFat_t*>(m_vol->cacheAddress());
  dir += 0XF & dirIndex;

  // Must be file or subdirectory.
  if (!isFileOrSubdir(dir)) {
    b0de:	lsls	r5, r1, #28
    b0e0:	bmi.n	b106 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x5a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_attributes = dir->attributes & FILE_ATTR_COPY;
    b0e2:	and.w	r1, r1, #23
    b0e6:	strb	r1, [r4, #0]
  if (isFileDir(dir)) {
    b0e8:	ldrb	r3, [r2, #11]
    b0ea:	tst.w	r3, #24
    b0ee:	bne.n	b0f6 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x4a>
    m_attributes |= FILE_ATTR_FILE;
    b0f0:	orr.w	r1, r1, #8
    b0f4:	strb	r1, [r4, #0]
  }
  m_lfnOrd = lfnOrd;

  switch (oflag & O_ACCMODE) {
    b0f6:	and.w	r3, r7, #3
  }
  m_attributes = dir->attributes & FILE_ATTR_COPY;
  if (isFileDir(dir)) {
    m_attributes |= FILE_ATTR_FILE;
  }
  m_lfnOrd = lfnOrd;
    b0fa:	strb	r6, [r4, #3]

  switch (oflag & O_ACCMODE) {
    b0fc:	cmp	r3, #1
    b0fe:	beq.n	b112 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x66>
    b100:	cmp	r3, #2
    b102:	beq.n	b15a <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xae>
    b104:	cbz	r3, b150 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xa4>
    goto fail;
  }
  return true;

 fail:
  m_attributes = FILE_ATTR_CLOSED;
    b106:	movs	r3, #0
    b108:	strb	r3, [r4, #0]
  m_flags = 0;
  return false;
    b10a:	mov	r0, r3
  }
  return true;

 fail:
  m_attributes = FILE_ATTR_CLOSED;
  m_flags = 0;
    b10c:	strb	r3, [r4, #2]
  return false;
    b10e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    case O_RDWR:
      m_flags = FILE_FLAG_READ | FILE_FLAG_WRITE;
      break;

    case O_WRONLY:
      m_flags = FILE_FLAG_WRITE;
    b112:	movs	r3, #2
    b114:	strb	r3, [r4, #2]
      DBG_FAIL_MACRO;
      goto fail;
  }

  if (m_flags & FILE_FLAG_WRITE) {
    if (isSubDir() || isReadOnly()) {
    b116:	ldrb	r1, [r4, #0]
    b118:	tst.w	r1, #17
    b11c:	bne.n	b106 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x5a>
    b11e:	sxtb	r1, r3
    b120:	and.w	r5, r7, #1024	; 0x400
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  m_flags |= (oflag & O_APPEND ? FILE_FLAG_APPEND : 0);
    b124:	and.w	r3, r7, #8
    b128:	orrs	r3, r1
    b12a:	uxtb	r3, r3
    b12c:	strb	r3, [r4, #2]

  m_dirSector = m_vol->cacheSectorNumber();

  // copy first cluster number for directory fields
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16)
                 | getLe16(dir->firstClusterLow);
    b12e:	ldrh.w	lr, [r2, #20]
    b132:	ldrh	r1, [r2, #26]
    b134:	ldr	r6, [r0, #48]	; 0x30
    b136:	orr.w	r1, r1, lr, lsl #16
      goto fail;
    }
  }
  m_flags |= (oflag & O_APPEND ? FILE_FLAG_APPEND : 0);

  m_dirSector = m_vol->cacheSectorNumber();
    b13a:	str	r6, [r4, #24]

  // copy first cluster number for directory fields
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16)
                 | getLe16(dir->firstClusterLow);

  if (oflag & O_TRUNC) {
    b13c:	cbz	r5, b160 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xb4>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
    b13e:	cbnz	r1, b176 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xca>
      DBG_FAIL_MACRO;
      goto fail;
    }

    // need to update directory entry
    m_flags |= FILE_FLAG_DIR_DIRTY;
    b140:	orn	r3, r3, #127	; 0x7f
    b144:	strb	r3, [r4, #2]
  } else {
    m_firstCluster = firstCluster;
    m_fileSize = getLe32(dir->fileSize);
  }
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
    b146:	lsls	r3, r7, #17
    b148:	bmi.n	b168 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xbc>
    DBG_FAIL_MACRO;
    goto fail;
  }
  return true;
    b14a:	movs	r0, #1
    b14c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  }
  m_lfnOrd = lfnOrd;

  switch (oflag & O_ACCMODE) {
    case O_RDONLY:
      if (oflag & O_TRUNC) {
    b150:	ands.w	r5, r7, #1024	; 0x400
    b154:	bne.n	b106 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x5a>
    b156:	movs	r1, #1
    b158:	b.n	b124 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x78>
      }
      m_flags = FILE_FLAG_READ;
      break;

    case O_RDWR:
      m_flags = FILE_FLAG_READ | FILE_FLAG_WRITE;
    b15a:	movs	r3, #3
    b15c:	strb	r3, [r4, #2]
      break;
    b15e:	b.n	b116 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x6a>
    }

    // need to update directory entry
    m_flags |= FILE_FLAG_DIR_DIRTY;
  } else {
    m_firstCluster = firstCluster;
    b160:	str	r1, [r4, #32]
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
}
inline uint32_t getLe32(const uint8_t* src) {
  return *reinterpret_cast<const uint32_t*>(src);
    b162:	ldr	r3, [r2, #28]
    m_fileSize = getLe32(dir->fileSize);
    b164:	str	r3, [r4, #28]
    b166:	b.n	b146 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x9a>
  }
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
    b168:	ldr	r1, [r4, #28]
    b16a:	mov	r0, r4
    b16c:	bl	affc <FatFile::seekSet(unsigned long)>
    b170:	cmp	r0, #0
    b172:	bne.n	b14a <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x9e>
    b174:	b.n	b106 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x5a>
  // copy first cluster number for directory fields
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16)
                 | getLe16(dir->firstClusterLow);

  if (oflag & O_TRUNC) {
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
    b176:	bl	b600 <FatPartition::freeChain(unsigned long)>
    b17a:	cmp	r0, #0
    b17c:	beq.n	b106 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x5a>
    b17e:	ldrb	r3, [r4, #2]
    b180:	b.n	b140 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x94>
    b182:	nop

0000b184 <FatFile::openNext(FatFile*, int)>:
  DirLfn_t* ldir;
  uint8_t lfnOrd = 0;
  uint16_t index;

  // Check for not open and valid directory..
  if (isOpen() || !dirFile->isDir() || (dirFile->curPosition() & 0X1F)) {
    b184:	ldrb	r3, [r0, #0]
    b186:	cbnz	r3, b190 <FatFile::openNext(FatFile*, int)+0xc>
    b188:	ldrb	r3, [r1, #0]
    b18a:	tst.w	r3, #112	; 0x70
    b18e:	bne.n	b194 <FatFile::openNext(FatFile*, int)+0x10>
      lfnOrd = 0;
    }
  }

 fail:
  return false;
    b190:	movs	r0, #0
}
    b192:	bx	lr
  m_attributes = FILE_ATTR_CLOSED;
  m_flags = 0;
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openNext(FatFile* dirFile, oflag_t oflag) {
    b194:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b198:	ldr	r6, [r1, #20]
    b19a:	sub	sp, #8
  DirLfn_t* ldir;
  uint8_t lfnOrd = 0;
  uint16_t index;

  // Check for not open and valid directory..
  if (isOpen() || !dirFile->isDir() || (dirFile->curPosition() & 0X1F)) {
    b19c:	ands.w	r7, r6, #31
    b1a0:	bne.n	b1e6 <FatFile::openNext(FatFile*, int)+0x62>
    b1a2:	mov	r9, r2
    b1a4:	mov	r5, r1
    b1a6:	mov	r8, r0
    b1a8:	mov	sl, r7
    b1aa:	b.n	b1c8 <FatFile::openNext(FatFile*, int)+0x44>
    // done if last entry
    if (dir->name[0] == FAT_NAME_FREE) {
      goto fail;
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == '.' || dir->name[0] == FAT_NAME_DELETED) {
    b1ac:	sub.w	r2, r3, #229	; 0xe5
    b1b0:	clz	r2, r2
    b1b4:	lsrs	r2, r2, #5
    b1b6:	cbnz	r2, b1da <FatFile::openNext(FatFile*, int)+0x56>
    b1b8:	ldrb	r1, [r0, #11]
      lfnOrd = 0;
    } else if (isFileOrSubdir(dir)) {
    b1ba:	tst.w	r1, #8
    b1be:	beq.n	b1fc <FatFile::openNext(FatFile*, int)+0x78>
      if (!openCachedEntry(dirFile, index, oflag, lfnOrd)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      return true;
    } else if (isLongName(dir)) {
    b1c0:	cmp	r1, #15
    b1c2:	beq.n	b1ee <FatFile::openNext(FatFile*, int)+0x6a>
      if (ldir->order & FAT_ORDER_LAST_LONG_ENTRY) {
        lfnOrd = ldir->order & 0X1F;
        checksum = ldir->checksum;
      }
    } else {
      lfnOrd = 0;
    b1c4:	mov	r7, r2
    b1c6:	ldr	r6, [r5, #20]
    goto fail;
  }
  while (1) {
    // read entry into cache
    index = dirFile->curPosition()/32;
    DirFat_t* dir = dirFile->readDirCache();
    b1c8:	movs	r1, #0
    b1ca:	mov	r0, r5
    b1cc:	bl	ad78 <FatFile::readDirCache(bool)>
    if (!dir) {
    b1d0:	cbz	r0, b1e6 <FatFile::openNext(FatFile*, int)+0x62>
        DBG_FAIL_MACRO;
      }
      goto fail;
    }
    // done if last entry
    if (dir->name[0] == FAT_NAME_FREE) {
    b1d2:	ldrb	r3, [r0, #0]
    b1d4:	cbz	r3, b1e6 <FatFile::openNext(FatFile*, int)+0x62>
      goto fail;
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == '.' || dir->name[0] == FAT_NAME_DELETED) {
    b1d6:	cmp	r3, #46	; 0x2e
    b1d8:	bne.n	b1ac <FatFile::openNext(FatFile*, int)+0x28>
      lfnOrd = 0;
    b1da:	movs	r7, #0
    b1dc:	b.n	b1c6 <FatFile::openNext(FatFile*, int)+0x42>
    } else if (isFileOrSubdir(dir)) {
      if (lfnOrd && checksum != lfnChecksum(dir->name)) {
    b1de:	bl	b83c <FatFile::lfnChecksum(unsigned char*)>
    b1e2:	cmp	r0, sl
    b1e4:	beq.n	b200 <FatFile::openNext(FatFile*, int)+0x7c>
      lfnOrd = 0;
    }
  }

 fail:
  return false;
    b1e6:	movs	r0, #0
}
    b1e8:	add	sp, #8
    b1ea:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        goto fail;
      }
      return true;
    } else if (isLongName(dir)) {
      ldir = reinterpret_cast<DirLfn_t*>(dir);
      if (ldir->order & FAT_ORDER_LAST_LONG_ENTRY) {
    b1ee:	lsls	r2, r3, #25
    b1f0:	bpl.n	b1c6 <FatFile::openNext(FatFile*, int)+0x42>
        lfnOrd = ldir->order & 0X1F;
    b1f2:	and.w	r7, r3, #31
        checksum = ldir->checksum;
    b1f6:	ldrb.w	sl, [r0, #13]
    b1fa:	b.n	b1c6 <FatFile::openNext(FatFile*, int)+0x42>
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == '.' || dir->name[0] == FAT_NAME_DELETED) {
      lfnOrd = 0;
    } else if (isFileOrSubdir(dir)) {
      if (lfnOrd && checksum != lfnChecksum(dir->name)) {
    b1fc:	cmp	r7, #0
    b1fe:	bne.n	b1de <FatFile::openNext(FatFile*, int)+0x5a>
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!openCachedEntry(dirFile, index, oflag, lfnOrd)) {
    b200:	str	r7, [sp, #0]
    b202:	mov	r3, r9
    b204:	ubfx	r2, r6, #5, #16
    b208:	mov	r1, r5
    b20a:	mov	r0, r8
    b20c:	bl	b0ac <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)>
    b210:	b.n	b1e8 <FatFile::openNext(FatFile*, int)+0x64>
    b212:	nop

0000b214 <FatFile::sync()>:
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    b214:	ldrb	r3, [r0, #0]
    b216:	cbz	r3, b21c <FatFile::sync()+0x8>
    b218:	b.w	a7f0 <FatFile::sync() [clone .part.42]>
  DBG_FAIL_MACRO;

 fail:
  m_error |= WRITE_ERROR;
  return false;
}
    b21c:	movs	r0, #1
    b21e:	bx	lr

0000b220 <FatFile::truncate()>:
}
//------------------------------------------------------------------------------
bool FatFile::truncate() {
  uint32_t toFree;
  // error if not a normal file or read-only
  if (!isWritable()) {
    b220:	ldrb	r3, [r0, #2]
    b222:	lsls	r3, r3, #30
    b224:	bpl.n	b25c <FatFile::truncate()+0x3c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_firstCluster == 0) {
    b226:	ldr	r3, [r0, #32]
    b228:	cbz	r3, b258 <FatFile::truncate()+0x38>
      return true;
  }
  if (m_curCluster) {
    b22a:	ldr	r1, [r0, #16]

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::truncate() {
    b22c:	push	{r4, lr}
    b22e:	mov	r4, r0
    b230:	sub	sp, #8
    goto fail;
  }
  if (m_firstCluster == 0) {
      return true;
  }
  if (m_curCluster) {
    b232:	cbnz	r1, b272 <FatFile::truncate()+0x52>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
  } else {
    toFree = m_firstCluster;
    b234:	str	r3, [sp, #4]
    m_firstCluster = 0;
    b236:	str	r1, [r0, #32]
  }
  if (toFree) {
    if (!m_vol->freeChain(toFree)) {
    b238:	mov	r1, r3
    b23a:	ldr	r0, [r4, #8]
    b23c:	bl	b600 <FatPartition::freeChain(unsigned long)>
    b240:	cbz	r0, b26e <FatFile::truncate()+0x4e>
    }
  }
  m_fileSize = m_curPosition;

  // need to update directory entry
  m_flags |= FILE_FLAG_DIR_DIRTY;
    b242:	ldrb	r3, [r4, #2]
    if (!m_vol->freeChain(toFree)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  m_fileSize = m_curPosition;
    b244:	ldr	r1, [r4, #20]

  // need to update directory entry
  m_flags |= FILE_FLAG_DIR_DIRTY;
    b246:	orn	r3, r3, #127	; 0x7f
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    b24a:	ldrb	r2, [r4, #0]
    if (!m_vol->freeChain(toFree)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  m_fileSize = m_curPosition;
    b24c:	str	r1, [r4, #28]

  // need to update directory entry
  m_flags |= FILE_FLAG_DIR_DIRTY;
    b24e:	strb	r3, [r4, #2]
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    b250:	cbnz	r2, b28e <FatFile::truncate()+0x6e>
  if (!isWritable()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_firstCluster == 0) {
      return true;
    b252:	movs	r0, #1
  }
  return true;

 fail:
  return false;
}
    b254:	add	sp, #8
    b256:	pop	{r4, pc}
  if (!isWritable()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_firstCluster == 0) {
      return true;
    b258:	movs	r0, #1
  }
  return true;

 fail:
  return false;
}
    b25a:	bx	lr
    goto fail;
  }
  return true;

 fail:
  return false;
    b25c:	movs	r0, #0
}
    b25e:	bx	lr
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
  }
  int8_t fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  bool fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
    b260:	mvn.w	r2, #4026531840	; 0xf0000000
    b264:	ldr	r1, [r4, #16]
    b266:	ldr	r0, [r4, #8]
    b268:	bl	b514 <FatPartition::fatPut(unsigned long, unsigned long)>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (fg) {
      // current cluster is end of chain
      if (!m_vol->fatPutEOC(m_curCluster)) {
    b26c:	cbnz	r0, b286 <FatFile::truncate()+0x66>
    goto fail;
  }
  return true;

 fail:
  return false;
    b26e:	movs	r0, #0
    b270:	b.n	b254 <FatFile::truncate()+0x34>
  }
  if (m_firstCluster == 0) {
      return true;
  }
  if (m_curCluster) {
    toFree = 0;
    b272:	movs	r3, #0
    b274:	add	r2, sp, #8
    int8_t fg = m_vol->fatGet(m_curCluster, &toFree);
    b276:	ldr	r0, [r0, #8]
  }
  if (m_firstCluster == 0) {
      return true;
  }
  if (m_curCluster) {
    toFree = 0;
    b278:	str.w	r3, [r2, #-4]!
    int8_t fg = m_vol->fatGet(m_curCluster, &toFree);
    b27c:	bl	b4a4 <FatPartition::fatGet(unsigned long, unsigned long*)>
    if (fg < 0) {
    b280:	cmp	r0, #0
    b282:	blt.n	b26e <FatFile::truncate()+0x4e>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (fg) {
    b284:	bne.n	b260 <FatFile::truncate()+0x40>
    }
  } else {
    toFree = m_firstCluster;
    m_firstCluster = 0;
  }
  if (toFree) {
    b286:	ldr	r3, [sp, #4]
    b288:	cmp	r3, #0
    b28a:	beq.n	b242 <FatFile::truncate()+0x22>
    b28c:	b.n	b238 <FatFile::truncate()+0x18>
    b28e:	mov	r0, r4
    b290:	bl	a7f0 <FatFile::sync() [clone .part.42]>
    b294:	b.n	b254 <FatFile::truncate()+0x34>
    b296:	nop

0000b298 <FatFile::write(void const*, unsigned int)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
size_t FatFile::write(const void* buf, size_t nbyte) {
    b298:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b29c:	ldrb	r3, [r0, #2]
    b29e:	mov	r4, r0
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isWritable()) {
    b2a0:	lsls	r5, r3, #30
    b2a2:	bmi.n	b2b4 <FatFile::write(void const*, unsigned int)+0x1c>
  }
  return nbyte;

 fail:
  // return for write error
  m_error |= WRITE_ERROR;
    b2a4:	ldrb	r3, [r4, #1]
  return -1;
    b2a6:	mov.w	r0, #4294967295
  }
  return nbyte;

 fail:
  // return for write error
  m_error |= WRITE_ERROR;
    b2aa:	orr.w	r3, r3, #1
    b2ae:	strb	r3, [r4, #1]
  return -1;
    b2b0:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b2b4:	mov	r8, r2
  if (!isWritable()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & FILE_FLAG_APPEND)) {
    b2b6:	lsls	r2, r3, #28
    b2b8:	mov	r7, r1
    b2ba:	bmi.w	b460 <FatFile::write(void const*, unsigned int)+0x1c8>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
    b2be:	ldr	r2, [r4, #20]
    b2c0:	mvns	r3, r2
    b2c2:	cmp	r8, r3
    b2c4:	bhi.n	b2a4 <FatFile::write(void const*, unsigned int)+0xc>
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
    b2c6:	cmp.w	r8, #0
    b2ca:	beq.w	b46e <FatFile::write(void const*, unsigned int)+0x1d6>
    b2ce:	mov	r6, r8
    m_blockDev = blockDev;
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    b2d0:	mov.w	sl, #0
    m_sector = 0XFFFFFFFF;
    b2d4:	mov.w	r9, #4294967295
    b2d8:	b.n	b356 <FatFile::write(void const*, unsigned int)+0xbe>
    uint8_t sectorOfCluster = m_vol->sectorOfCluster(m_curPosition);
    uint16_t sectorOffset = m_curPosition & m_vol->sectorMask();
    if (sectorOfCluster == 0 && sectorOffset == 0) {
    b2da:	cmp.w	fp, #0
    b2de:	bne.n	b364 <FatFile::write(void const*, unsigned int)+0xcc>
      // start of new cluster
      if (m_curCluster != 0) {
    b2e0:	ldr	r1, [r4, #16]
    b2e2:	cmp	r1, #0
    b2e4:	beq.n	b3ce <FatFile::write(void const*, unsigned int)+0x136>
#if USE_FAT_FILE_FLAG_CONTIGUOUS
        int8_t fg;
        if (isContiguous() && m_fileSize > m_curPosition) {
    b2e6:	ldrb	r3, [r4, #2]
    b2e8:	lsls	r3, r3, #25
    b2ea:	bpl.w	b410 <FatFile::write(void const*, unsigned int)+0x178>
    b2ee:	ldr	r3, [r4, #28]
    b2f0:	cmp	r3, r2
    b2f2:	bls.w	b410 <FatFile::write(void const*, unsigned int)+0x178>
          m_curCluster++;
    b2f6:	adds	r3, r1, #1
        }
      }
    }
    // sector for data write
    uint32_t sector = m_vol->clusterStartSector(m_curCluster)
                      + sectorOfCluster;
    b2f8:	subs	r1, #1
      // start of new cluster
      if (m_curCluster != 0) {
#if USE_FAT_FILE_FLAG_CONTIGUOUS
        int8_t fg;
        if (isContiguous() && m_fileSize > m_curPosition) {
          m_curCluster++;
    b2fa:	str	r3, [r4, #16]
        }
      }
    }
    // sector for data write
    uint32_t sector = m_vol->clusterStartSector(m_curCluster)
                      + sectorOfCluster;
    b2fc:	ldrb.w	lr, [r0, #6]
    b300:	ldr	r3, [r0, #20]
    b302:	lsl.w	r1, r1, lr
    b306:	add	r3, r5
    b308:	add	r1, r3

    if (sectorOffset != 0 || nToWrite < m_vol->bytesPerSector()) {
    b30a:	cmp.w	r6, #512	; 0x200
    b30e:	bcs.n	b38a <FatFile::write(void const*, unsigned int)+0xf2>
    b310:	cmp.w	r6, #512	; 0x200
    b314:	mov	r5, r6
    b316:	it	cs
    b318:	movcs.w	r5, #512	; 0x200
      // lesser of space and amount to write
      if (n > nToWrite) {
        n = nToWrite;
      }

      if (sectorOffset == 0 &&
    b31c:	ldr	r3, [r4, #28]
    b31e:	cmp	r3, r2
    b320:	bls.n	b328 <FatFile::write(void const*, unsigned int)+0x90>
         (m_curPosition >= m_fileSize || m_flags & FILE_FLAG_PREALLOCATE)) {
    b322:	ldrb	r3, [r4, #2]
    b324:	lsls	r3, r3, #26
    b326:	bpl.n	b386 <FatFile::write(void const*, unsigned int)+0xee>
        // start of new sector don't need to read into cache
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
    b328:	movs	r2, #5
  bool cacheSync() {
    return m_cache.sync() && syncDevice();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t sector, uint8_t options) {
    return reinterpret_cast<cache_t*>(m_cache.get(sector, options));
    b32a:	adds	r0, #36	; 0x24
    b32c:	bl	8d80 <FsCache::get(unsigned long, unsigned char)>
      } else {
        // rewrite part of sector
        cacheOption = FsCache::CACHE_FOR_WRITE;
      }
      pc = m_vol->cacheFetchData(sector, cacheOption);
      if (!pc) {
    b330:	cmp	r0, #0
    b332:	beq.n	b2a4 <FatFile::write(void const*, unsigned int)+0xc>
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + sectorOffset;
      memcpy(dst, src, n);
    b334:	add	r0, fp
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    b336:	add	fp, r5
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + sectorOffset;
      memcpy(dst, src, n);
    b338:	mov	r2, r5
    b33a:	mov	r1, r7
    b33c:	bl	db14 <memcpy>
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    b340:	cmp.w	fp, #512	; 0x200
    b344:	beq.w	b450 <FatFile::write(void const*, unsigned int)+0x1b8>
      if (!m_vol->cacheSafeWrite(sector, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    b348:	ldr	r2, [r4, #20]
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
    b34a:	subs	r6, r6, r5
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    src += n;
    b34c:	add	r7, r5
      if (!m_vol->cacheSafeWrite(sector, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    b34e:	add	r2, r5
    b350:	str	r2, [r4, #20]
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
    b352:	beq.w	b46e <FatFile::write(void const*, unsigned int)+0x1d6>
    uint8_t sectorOfCluster = m_vol->sectorOfCluster(m_curPosition);
    b356:	ldr	r0, [r4, #8]
    uint16_t sectorOffset = m_curPosition & m_vol->sectorMask();
    b358:	ubfx	fp, r2, #0, #9
  }
  //----------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t sectorOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterSectorMask;
    b35c:	ldrb	r5, [r0, #5]
    if (sectorOfCluster == 0 && sectorOffset == 0) {
    b35e:	ands.w	r5, r5, r2, lsr #9
    b362:	beq.n	b2da <FatFile::write(void const*, unsigned int)+0x42>
        }
      }
    }
    // sector for data write
    uint32_t sector = m_vol->clusterStartSector(m_curCluster)
                      + sectorOfCluster;
    b364:	ldr	r3, [r4, #16]
    b366:	ldrb.w	lr, [r0, #6]
    b36a:	subs	r1, r3, #2
    b36c:	ldr	r3, [r0, #20]
    b36e:	lsl.w	lr, r1, lr
    b372:	adds	r1, r5, r3
    b374:	add	r1, lr

    if (sectorOffset != 0 || nToWrite < m_vol->bytesPerSector()) {
    b376:	cmp.w	fp, #0
    b37a:	beq.n	b30a <FatFile::write(void const*, unsigned int)+0x72>
      // partial sector - must use cache
      // max space in sector
      n = m_vol->bytesPerSector() - sectorOffset;
    b37c:	rsb	r5, fp, #512	; 0x200
    b380:	cmp	r5, r6
    b382:	it	cs
    b384:	movcs	r5, r6
         (m_curPosition >= m_fileSize || m_flags & FILE_FLAG_PREALLOCATE)) {
        // start of new sector don't need to read into cache
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
      } else {
        // rewrite part of sector
        cacheOption = FsCache::CACHE_FOR_WRITE;
    b386:	movs	r2, #1
    b388:	b.n	b32a <FatFile::write(void const*, unsigned int)+0x92>
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
#if USE_MULTI_SECTOR_IO
    } else if (nToWrite >= 2*m_vol->bytesPerSector()) {
    b38a:	cmp.w	r6, #1024	; 0x400
    b38e:	bcc.n	b3f4 <FatFile::write(void const*, unsigned int)+0x15c>
      // use multiple sector write command
      uint32_t maxSectors = m_vol->sectorsPerCluster() - sectorOfCluster;
    b390:	ldrb.w	lr, [r0, #4]
      uint32_t nSector = nToWrite >> m_vol->bytesPerSectorShift();
    b394:	lsrs	r3, r6, #9
    b396:	ldr	r2, [r0, #48]	; 0x30
        }
      }
#if USE_MULTI_SECTOR_IO
    } else if (nToWrite >= 2*m_vol->bytesPerSector()) {
      // use multiple sector write command
      uint32_t maxSectors = m_vol->sectorsPerCluster() - sectorOfCluster;
    b398:	rsb	r5, r5, lr
    b39c:	cmp	r3, r5
    b39e:	it	cs
    b3a0:	movcs	r3, r5
   * \param[in] sector Start sector of the range.
   * \param[in] count Number of sectors in the range.
   * \return true if a sector in the range is cached.
   */
  bool isCached(uint32_t sector, size_t count) {
    return sector <= m_sector && m_sector < (sector + count);
    b3a2:	cmp	r2, r1
      uint32_t nSector = nToWrite >> m_vol->bytesPerSectorShift();
      if (nSector > maxSectors) {
        nSector = maxSectors;
      }
      n = nSector << m_vol->bytesPerSectorShift();
    b3a4:	mov.w	r5, r3, lsl #9
    b3a8:	bcc.n	b3ba <FatFile::write(void const*, unsigned int)+0x122>
    b3aa:	add.w	lr, r3, r1
    b3ae:	cmp	r2, lr
    b3b0:	bcs.n	b3ba <FatFile::write(void const*, unsigned int)+0x122>
    m_blockDev = blockDev;
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    b3b2:	strb.w	sl, [r0, #36]	; 0x24
    m_sector = 0XFFFFFFFF;
    b3b6:	str.w	r9, [r0, #48]	; 0x30
   */
  bool cacheSafeWrite(uint32_t sector, const uint8_t* src, size_t count) {
     if (isCached(sector, count)) {
      invalidate();
    }
    return m_blockDev->writeSectors(sector, src, count);
    b3ba:	ldr	r0, [r0, #40]	; 0x28
    b3bc:	mov	r2, r7
    b3be:	ldr.w	lr, [r0]
    b3c2:	ldr.w	fp, [lr, #32]
    b3c6:	blx	fp
      if (!m_vol->cacheSafeWrite(sector, src, nSector)) {
    b3c8:	cmp	r0, #0
    b3ca:	bne.n	b348 <FatFile::write(void const*, unsigned int)+0xb0>
    b3cc:	b.n	b2a4 <FatFile::write(void const*, unsigned int)+0xc>
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
      } else {
        if (m_firstCluster == 0) {
    b3ce:	ldr	r1, [r4, #32]
    b3d0:	cbz	r1, b432 <FatFile::write(void const*, unsigned int)+0x19a>
            DBG_FAIL_MACRO;
            goto fail;
          }
          m_firstCluster = m_curCluster;
        } else {
          m_curCluster = m_firstCluster;
    b3d2:	str	r1, [r4, #16]
        }
      }
    }
    // sector for data write
    uint32_t sector = m_vol->clusterStartSector(m_curCluster)
                      + sectorOfCluster;
    b3d4:	subs	r1, #2
    b3d6:	ldrb	r2, [r0, #6]
    b3d8:	ldr	r3, [r0, #20]

    if (sectorOffset != 0 || nToWrite < m_vol->bytesPerSector()) {
    b3da:	cmp.w	r6, #512	; 0x200
        }
      }
    }
    // sector for data write
    uint32_t sector = m_vol->clusterStartSector(m_curCluster)
                      + sectorOfCluster;
    b3de:	lsl.w	r1, r1, r2
    b3e2:	add	r1, r3

    if (sectorOffset != 0 || nToWrite < m_vol->bytesPerSector()) {
    b3e4:	bcs.n	b38a <FatFile::write(void const*, unsigned int)+0xf2>
      // partial sector - must use cache
      // max space in sector
      n = m_vol->bytesPerSector() - sectorOffset;
    b3e6:	rsb	r5, fp, #512	; 0x200
    b3ea:	ldr	r2, [r4, #20]
    b3ec:	cmp	r5, r6
    b3ee:	it	cs
    b3f0:	movcs	r5, r6
    b3f2:	b.n	b31c <FatFile::write(void const*, unsigned int)+0x84>
   * \param[in] sector Logical sector to be written.
   * \param[in] src Pointer to the location of the data to be written.
   * \return true for success or false for failure.
   */
  bool cacheSafeWrite(uint32_t sector, const uint8_t* src) {
    if (isCached(sector)) {
    b3f4:	ldr	r3, [r0, #48]	; 0x30
    b3f6:	cmp	r3, r1
    b3f8:	beq.n	b446 <FatFile::write(void const*, unsigned int)+0x1ae>
      invalidate();
    }
    return m_blockDev->writeSector(sector, src);
    b3fa:	ldr	r0, [r0, #40]	; 0x28
    b3fc:	mov	r2, r7
    b3fe:	ldr	r3, [r0, #0]
    b400:	ldr	r3, [r3, #28]
    b402:	blx	r3
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // use single sector write command
      n = m_vol->bytesPerSector();
      if (!m_vol->cacheSafeWrite(sector, src)) {
    b404:	cmp	r0, #0
    b406:	beq.w	b2a4 <FatFile::write(void const*, unsigned int)+0xc>
        goto fail;
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // use single sector write command
      n = m_vol->bytesPerSector();
    b40a:	mov.w	r5, #512	; 0x200
    b40e:	b.n	b348 <FatFile::write(void const*, unsigned int)+0xb0>
        int8_t fg;
        if (isContiguous() && m_fileSize > m_curPosition) {
          m_curCluster++;
          fg = 1;
        } else {
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    b410:	add.w	r2, r4, #16
    b414:	bl	b4a4 <FatPartition::fatGet(unsigned long, unsigned long*)>
          if (fg < 0) {
    b418:	cmp	r0, #0
    b41a:	blt.w	b2a4 <FatFile::write(void const*, unsigned int)+0xc>
        if (fg < 0) {
          DBG_FAIL_MACRO;
          goto fail;
        }
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
        if (fg == 0) {
    b41e:	bne.n	b42c <FatFile::write(void const*, unsigned int)+0x194>
          // add cluster if at end of chain
          if (!addCluster()) {
    b420:	mov	r0, r4
    b422:	bl	a704 <FatFile::addCluster()>
    b426:	cmp	r0, #0
    b428:	beq.w	b2a4 <FatFile::write(void const*, unsigned int)+0xc>
    b42c:	ldr	r1, [r4, #16]
    b42e:	ldr	r0, [r4, #8]
    b430:	b.n	b3d4 <FatFile::write(void const*, unsigned int)+0x13c>
          }
        }
      } else {
        if (m_firstCluster == 0) {
          // allocate first cluster of file
          if (!addCluster()) {
    b432:	mov	r0, r4
    b434:	bl	a704 <FatFile::addCluster()>
    b438:	cmp	r0, #0
    b43a:	beq.w	b2a4 <FatFile::write(void const*, unsigned int)+0xc>
            DBG_FAIL_MACRO;
            goto fail;
          }
          m_firstCluster = m_curCluster;
    b43e:	ldr	r1, [r4, #16]
    b440:	ldr	r0, [r4, #8]
    b442:	str	r1, [r4, #32]
    b444:	b.n	b3d4 <FatFile::write(void const*, unsigned int)+0x13c>
    m_blockDev = blockDev;
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    b446:	strb.w	sl, [r0, #36]	; 0x24
    m_sector = 0XFFFFFFFF;
    b44a:	str.w	r9, [r0, #48]	; 0x30
    b44e:	b.n	b3fa <FatFile::write(void const*, unsigned int)+0x162>
  }
  void cacheInvalidate() {
    m_cache.invalidate();
  }
  bool cacheSyncData() {
    return m_cache.sync();
    b450:	ldr	r0, [r4, #8]
    b452:	adds	r0, #36	; 0x24
    b454:	bl	8de0 <FsCache::sync()>
      }
      uint8_t* dst = pc->data + sectorOffset;
      memcpy(dst, src, n);
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
        // Force write if sector is full - improves large writes.
        if (!m_vol->cacheSyncData()) {
    b458:	cmp	r0, #0
    b45a:	bne.w	b348 <FatFile::write(void const*, unsigned int)+0xb0>
    b45e:	b.n	b2a4 <FatFile::write(void const*, unsigned int)+0xc>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & FILE_FLAG_APPEND)) {
    if (!seekSet(m_fileSize)) {
    b460:	ldr	r1, [r0, #28]
    b462:	bl	affc <FatFile::seekSet(unsigned long)>
    b466:	cmp	r0, #0
    b468:	beq.w	b2a4 <FatFile::write(void const*, unsigned int)+0xc>
    b46c:	b.n	b2be <FatFile::write(void const*, unsigned int)+0x26>
    }
    m_curPosition += n;
    src += n;
    nToWrite -= n;
  }
  if (m_curPosition > m_fileSize) {
    b46e:	ldr	r3, [r4, #28]
    b470:	cmp	r3, r2
    b472:	bcc.n	b488 <FatFile::write(void const*, unsigned int)+0x1f0>
    // update fileSize and insure sync will update dir entry
    m_fileSize = m_curPosition;
    m_flags |= FILE_FLAG_DIR_DIRTY;
  } else if (FsDateTime::callback) {
    b474:	ldr	r3, [pc, #40]	; (b4a0 <FatFile::write(void const*, unsigned int)+0x208>)
    b476:	ldr	r3, [r3, #0]
    b478:	cbz	r3, b498 <FatFile::write(void const*, unsigned int)+0x200>
    // insure sync will update modified date and time
    m_flags |= FILE_FLAG_DIR_DIRTY;
    b47a:	ldrb	r3, [r4, #2]
    b47c:	mov	r0, r8
    b47e:	orn	r3, r3, #127	; 0x7f
    b482:	strb	r3, [r4, #2]
    b484:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    nToWrite -= n;
  }
  if (m_curPosition > m_fileSize) {
    // update fileSize and insure sync will update dir entry
    m_fileSize = m_curPosition;
    m_flags |= FILE_FLAG_DIR_DIRTY;
    b488:	ldrb	r3, [r4, #2]
    b48a:	mov	r0, r8
    src += n;
    nToWrite -= n;
  }
  if (m_curPosition > m_fileSize) {
    // update fileSize and insure sync will update dir entry
    m_fileSize = m_curPosition;
    b48c:	str	r2, [r4, #28]
    m_flags |= FILE_FLAG_DIR_DIRTY;
    b48e:	orn	r3, r3, #127	; 0x7f
    b492:	strb	r3, [r4, #2]
    b494:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b498:	mov	r0, r8
    b49a:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b49e:	nop
    b4a0:	.word	0x20044068

0000b4a4 <FatPartition::fatGet(unsigned long, unsigned long*)>:
  uint32_t sector;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
    b4a4:	cmp	r1, #1
    b4a6:	bls.n	b50e <FatPartition::fatGet(unsigned long, unsigned long*)+0x6a>
    b4a8:	ldr	r3, [r0, #28]
    b4aa:	cmp	r1, r3
    b4ac:	bhi.n	b50e <FatPartition::fatGet(unsigned long, unsigned long*)+0x6a>
 fail:
  return false;
}
//------------------------------------------------------------------------------
// Fetch a FAT entry - return -1 error, 0 EOC, else 1.
int8_t FatPartition::fatGet(uint32_t cluster, uint32_t* value) {
    b4ae:	push	{r4, r5, r6, lr}
    b4b0:	ldrb	r3, [r0, #7]
    b4b2:	mov	r6, r2
    b4b4:	mov	r5, r0
    b4b6:	mov	r4, r1
  if (cluster < 2 || cluster > m_lastCluster) {
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (fatType() == 32) {
    b4b8:	cmp	r3, #32
    b4ba:	beq.n	b4f0 <FatPartition::fatGet(unsigned long, unsigned long*)+0x4c>
      DBG_FAIL_MACRO;
      goto fail;
    }
    next = getLe32(reinterpret_cast<uint8_t*>
                  (&pc->fat32[cluster & (m_sectorMask >> 2)]));
  } else if (fatType() == 16) {
    b4bc:	cmp	r3, #16
    b4be:	bne.n	b4ea <FatPartition::fatGet(unsigned long, unsigned long*)+0x46>
  FsCache m_cache;
#if USE_SEPARATE_FAT_CACHE
  FsCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t sector, uint8_t options) {
    options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    return reinterpret_cast<cache_t*>(m_fatCache.get(sector, options));
    b4c0:	ldr	r3, [r0, #24]
    b4c2:	ubfx	r1, r1, #8, #8
    b4c6:	movs	r2, #2
    b4c8:	add.w	r0, r0, #564	; 0x234
    b4cc:	add	r1, r3
    b4ce:	bl	8d80 <FsCache::get(unsigned long, unsigned char)>
    cluster &= 0XFFFF;
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 1) );
    pc = cacheFetchFat(sector, FsCache::CACHE_FOR_READ);
    if (!pc) {
    b4d2:	cbz	r0, b4ea <FatPartition::fatGet(unsigned long, unsigned long*)+0x46>
void lbaToMbrChs(uint8_t* chs, uint32_t capacityMB, uint32_t lba);
//-----------------------------------------------------------------------------
#if !defined(USE_SIMPLE_LITTLE_ENDIAN) || USE_SIMPLE_LITTLE_ENDIAN
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
    b4d4:	uxtb	r1, r4
      DBG_FAIL_MACRO;
      goto fail;
    }
    next = getLe16(reinterpret_cast<uint8_t*>
                  (&pc->fat16[cluster & (m_sectorMask >> 1)]));
    b4d6:	ldrh.w	r3, [r0, r1, lsl #1]
    next = cluster & 1 ? tmp >> 4 : tmp & 0XFFF;
  } else {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isEOC(next)) {
    b4da:	ldr	r2, [r5, #28]
    b4dc:	cmp	r3, r2
    b4de:	bhi.n	b4e6 <FatPartition::fatGet(unsigned long, unsigned long*)+0x42>
    return 0;
  }
  *value = next;
    b4e0:	str	r3, [r6, #0]
  return 1;
    b4e2:	movs	r0, #1
    b4e4:	pop	{r4, r5, r6, pc}
  } else {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isEOC(next)) {
    return 0;
    b4e6:	movs	r0, #0
  *value = next;
  return 1;

 fail:
  return -1;
}
    b4e8:	pop	{r4, r5, r6, pc}
  }
  *value = next;
  return 1;

 fail:
  return -1;
    b4ea:	mov.w	r0, #4294967295
    b4ee:	pop	{r4, r5, r6, pc}
    b4f0:	ldr	r1, [r0, #24]
    b4f2:	movs	r2, #2
    b4f4:	add.w	r0, r0, #564	; 0x234
    b4f8:	add.w	r1, r1, r4, lsr #7
    b4fc:	bl	8d80 <FsCache::get(unsigned long, unsigned char)>
  }

  if (fatType() == 32) {
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    pc = cacheFetchFat(sector, FsCache::CACHE_FOR_READ);
    if (!pc) {
    b500:	cmp	r0, #0
    b502:	beq.n	b4ea <FatPartition::fatGet(unsigned long, unsigned long*)+0x46>
}
inline uint32_t getLe32(const uint8_t* src) {
  return *reinterpret_cast<const uint32_t*>(src);
    b504:	and.w	r1, r4, #127	; 0x7f
    b508:	ldr.w	r3, [r0, r1, lsl #2]
    b50c:	b.n	b4da <FatPartition::fatGet(unsigned long, unsigned long*)+0x36>
  }
  *value = next;
  return 1;

 fail:
  return -1;
    b50e:	mov.w	r0, #4294967295
}
    b512:	bx	lr

0000b514 <FatPartition::fatPut(unsigned long, unsigned long)>:
bool FatPartition::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t sector;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
    b514:	cmp	r1, #1
    b516:	bls.n	b554 <FatPartition::fatPut(unsigned long, unsigned long)+0x40>
 fail:
  return -1;
}
//------------------------------------------------------------------------------
// Store a FAT entry
bool FatPartition::fatPut(uint32_t cluster, uint32_t value) {
    b518:	push	{r3, r4, r5, lr}
  uint32_t sector;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
    b51a:	ldr	r3, [r0, #28]
    b51c:	cmp	r1, r3
    b51e:	bhi.n	b52e <FatPartition::fatPut(unsigned long, unsigned long)+0x1a>
    b520:	ldrb	r3, [r0, #7]
    b522:	mov	r5, r2
    b524:	mov	r4, r1
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (fatType() == 32) {
    b526:	cmp	r3, #32
    b528:	beq.n	b558 <FatPartition::fatPut(unsigned long, unsigned long)+0x44>
    setLe32(reinterpret_cast<uint8_t*>
           (&pc->fat32[cluster & (m_sectorMask >> 2)]), value);
    return true;
  }

  if (fatType() == 16) {
    b52a:	cmp	r3, #16
    b52c:	beq.n	b532 <FatPartition::fatPut(unsigned long, unsigned long)+0x1e>
    DBG_FAIL_MACRO;
    goto fail;
  }

 fail:
  return false;
    b52e:	movs	r0, #0
    b530:	pop	{r3, r4, r5, pc}
    b532:	ldr	r3, [r0, #24]
    b534:	ubfx	r1, r1, #8, #8
    b538:	add.w	r0, r0, #564	; 0x234
    b53c:	movs	r2, #3
    b53e:	add	r1, r3
    b540:	bl	8d80 <FsCache::get(unsigned long, unsigned char)>

  if (fatType() == 16) {
    cluster &= 0XFFFF;
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 1) );
    pc = cacheFetchFat(sector, FsCache::CACHE_FOR_WRITE);
    if (!pc) {
    b544:	mov	r3, r0
    b546:	cmp	r0, #0
    b548:	beq.n	b52e <FatPartition::fatPut(unsigned long, unsigned long)+0x1a>
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    b54a:	uxtb	r1, r4
      DBG_FAIL_MACRO;
      goto fail;
    }
    setLe16(reinterpret_cast<uint8_t*>
           (&pc->fat16[cluster & (m_sectorMask >> 1)]), value);
    return true;
    b54c:	movs	r0, #1
    b54e:	strh.w	r5, [r3, r1, lsl #1]
    goto fail;
  }

 fail:
  return false;
}
    b552:	pop	{r3, r4, r5, pc}
    DBG_FAIL_MACRO;
    goto fail;
  }

 fail:
  return false;
    b554:	movs	r0, #0
}
    b556:	bx	lr
    b558:	ldr	r1, [r0, #24]
    b55a:	movs	r2, #3
    b55c:	add.w	r0, r0, #564	; 0x234
    b560:	add.w	r1, r1, r4, lsr #7
    b564:	bl	8d80 <FsCache::get(unsigned long, unsigned char)>
  }

  if (fatType() == 32) {
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    pc = cacheFetchFat(sector, FsCache::CACHE_FOR_WRITE);
    if (!pc) {
    b568:	mov	r3, r0
    b56a:	cmp	r0, #0
    b56c:	beq.n	b52e <FatPartition::fatPut(unsigned long, unsigned long)+0x1a>
}

inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
    b56e:	and.w	r1, r4, #127	; 0x7f
      DBG_FAIL_MACRO;
      goto fail;
    }
    setLe32(reinterpret_cast<uint8_t*>
           (&pc->fat32[cluster & (m_sectorMask >> 2)]), value);
    return true;
    b572:	movs	r0, #1
    b574:	str.w	r5, [r3, r1, lsl #2]
    b578:	pop	{r3, r4, r5, pc}
    b57a:	nop

0000b57c <FatPartition::allocateCluster(unsigned long, unsigned long*)>:
#define DBG_FILE "FatPartition.cpp"
#include "../common/DebugMacros.h"
#include "../common/FsStructs.h"
#include "FatPartition.h"
//------------------------------------------------------------------------------
bool FatPartition::allocateCluster(uint32_t current, uint32_t* next) {
    b57c:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t find;
  bool setStart;
  if (m_allocSearchStart < current) {
    b580:	ldr	r4, [r0, #12]
#define DBG_FILE "FatPartition.cpp"
#include "../common/DebugMacros.h"
#include "../common/FsStructs.h"
#include "FatPartition.h"
//------------------------------------------------------------------------------
bool FatPartition::allocateCluster(uint32_t current, uint32_t* next) {
    b582:	sub	sp, #8
    b584:	mov	r5, r0
    b586:	mov	r7, r1
  uint32_t find;
  bool setStart;
  if (m_allocSearchStart < current) {
    b588:	cmp	r4, r1
#define DBG_FILE "FatPartition.cpp"
#include "../common/DebugMacros.h"
#include "../common/FsStructs.h"
#include "FatPartition.h"
//------------------------------------------------------------------------------
bool FatPartition::allocateCluster(uint32_t current, uint32_t* next) {
    b58a:	mov	r8, r2
  uint32_t find;
  bool setStart;
  if (m_allocSearchStart < current) {
    b58c:	bcs.n	b5fa <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x7e>
    b58e:	mov	r4, r1
    // Try to keep file contiguous. Start just after current cluster.
    find = current;
    setStart = false;
    b590:	movs	r6, #0
  } else {
    find = m_allocSearchStart;
    setStart = true;
  }
  while (1) {
    find++;
    b592:	adds	r4, #1
    b594:	ldr	r3, [r5, #28]
      // Can't find space, already searched clusters after current.
      DBG_FAIL_MACRO;
      goto fail;
    }
    uint32_t f;
    int8_t fg = fatGet(find, &f);
    b596:	add	r2, sp, #4
    b598:	mov	r0, r5
    find = m_allocSearchStart;
    setStart = true;
  }
  while (1) {
    find++;
    if (find > m_lastCluster) {
    b59a:	cmp	r4, r3
      // Can't find space, already searched clusters after current.
      DBG_FAIL_MACRO;
      goto fail;
    }
    uint32_t f;
    int8_t fg = fatGet(find, &f);
    b59c:	mov	r1, r4
    find = m_allocSearchStart;
    setStart = true;
  }
  while (1) {
    find++;
    if (find > m_lastCluster) {
    b59e:	bls.n	b5b2 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x36>
      if (setStart) {
    b5a0:	cbnz	r6, b5f0 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x74>
        // Can't find space, checked all clusters.
        DBG_FAIL_MACRO;
        goto fail;
      }
      find = m_allocSearchStart;
    b5a2:	ldr	r4, [r5, #12]
      setStart = true;
    b5a4:	movs	r6, #1
      // Can't find space, already searched clusters after current.
      DBG_FAIL_MACRO;
      goto fail;
    }
    uint32_t f;
    int8_t fg = fatGet(find, &f);
    b5a6:	add	r2, sp, #4
    b5a8:	mov	r0, r5
  } else {
    find = m_allocSearchStart;
    setStart = true;
  }
  while (1) {
    find++;
    b5aa:	adds	r4, #1
    if (find > m_lastCluster) {
    b5ac:	cmp	r4, r3
      // Can't find space, already searched clusters after current.
      DBG_FAIL_MACRO;
      goto fail;
    }
    uint32_t f;
    int8_t fg = fatGet(find, &f);
    b5ae:	mov	r1, r4
    find = m_allocSearchStart;
    setStart = true;
  }
  while (1) {
    find++;
    if (find > m_lastCluster) {
    b5b0:	bhi.n	b5a0 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x24>
      }
      find = m_allocSearchStart;
      setStart = true;
      continue;
    }
    if (find == current) {
    b5b2:	cmp	r7, r4
    b5b4:	beq.n	b5f0 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x74>
      // Can't find space, already searched clusters after current.
      DBG_FAIL_MACRO;
      goto fail;
    }
    uint32_t f;
    int8_t fg = fatGet(find, &f);
    b5b6:	bl	b4a4 <FatPartition::fatGet(unsigned long, unsigned long*)>
    if (fg < 0) {
    b5ba:	cmp	r0, #0
    b5bc:	blt.n	b5f0 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x74>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (fg && f == 0) {
    b5be:	beq.n	b592 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x16>
    b5c0:	ldr	r3, [sp, #4]
    b5c2:	cmp	r3, #0
    b5c4:	bne.n	b592 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x16>
      break;
    }
  }
  if (setStart) {
    b5c6:	cbz	r6, b5ca <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x4e>
    m_allocSearchStart = find;
    b5c8:	str	r4, [r5, #12]
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
  }
  int8_t fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  bool fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
    b5ca:	mvn.w	r2, #4026531840	; 0xf0000000
    b5ce:	mov	r1, r4
    b5d0:	mov	r0, r5
    b5d2:	bl	b514 <FatPartition::fatPut(unsigned long, unsigned long)>
  }
  // Mark end of chain.
  if (!fatPutEOC(find)) {
    b5d6:	mov	r6, r0
    b5d8:	cbz	r0, b5f0 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x74>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (current) {
    b5da:	cbnz	r7, b5e2 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x66>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  updateFreeClusterCount(-1);
  *next = find;
    b5dc:	str.w	r4, [r8]
  return true;
    b5e0:	b.n	b5f2 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x76>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (current) {
    // Link clusters.
    if (!fatPut(current, find)) {
    b5e2:	mov	r1, r7
    b5e4:	mov	r0, r5
    b5e6:	mov	r2, r4
    b5e8:	bl	b514 <FatPartition::fatPut(unsigned long, unsigned long)>
    b5ec:	cmp	r0, #0
    b5ee:	bne.n	b5dc <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x60>
  updateFreeClusterCount(-1);
  *next = find;
  return true;

 fail:
  return false;
    b5f0:	movs	r6, #0
}
    b5f2:	mov	r0, r6
    b5f4:	add	sp, #8
    b5f6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    // Try to keep file contiguous. Start just after current cluster.
    find = current;
    setStart = false;
  } else {
    find = m_allocSearchStart;
    setStart = true;
    b5fa:	movs	r6, #1
    b5fc:	b.n	b592 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x16>
    b5fe:	nop

0000b600 <FatPartition::freeChain(unsigned long)>:
 fail:
  return false;
}
//------------------------------------------------------------------------------
// free a cluster chain
bool FatPartition::freeChain(uint32_t cluster) {
    b600:	push	{r4, r5, r6, lr}
    b602:	mov	r5, r0
    b604:	sub	sp, #8
    b606:	mov	r4, r1
    b608:	b.n	b61e <FatPartition::freeChain(unsigned long)+0x1e>
    if (fg < 0) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // free cluster
    if (!fatPut(cluster, 0)) {
    b60a:	bl	b514 <FatPartition::fatPut(unsigned long, unsigned long)>
      goto fail;
    }
    // Add one to count of free clusters.
    updateFreeClusterCount(1);
    if (cluster < m_allocSearchStart) {
      m_allocSearchStart = cluster - 1;
    b60e:	subs	r2, r4, #1
    if (fg < 0) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // free cluster
    if (!fatPut(cluster, 0)) {
    b610:	cbz	r0, b634 <FatPartition::freeChain(unsigned long)+0x34>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // Add one to count of free clusters.
    updateFreeClusterCount(1);
    if (cluster < m_allocSearchStart) {
    b612:	ldr	r3, [r5, #12]
    b614:	cmp	r4, r3
      m_allocSearchStart = cluster - 1;
    }
    cluster = next;
    b616:	ldr	r4, [sp, #4]
      goto fail;
    }
    // Add one to count of free clusters.
    updateFreeClusterCount(1);
    if (cluster < m_allocSearchStart) {
      m_allocSearchStart = cluster - 1;
    b618:	it	cc
    b61a:	strcc	r2, [r5, #12]
//------------------------------------------------------------------------------
// free a cluster chain
bool FatPartition::freeChain(uint32_t cluster) {
  uint32_t next;
  int8_t fg;
  do {
    b61c:	cbz	r6, b636 <FatPartition::freeChain(unsigned long)+0x36>
    fg = fatGet(cluster, &next);
    b61e:	add	r2, sp, #4
    b620:	mov	r1, r4
    b622:	mov	r0, r5
    b624:	bl	b4a4 <FatPartition::fatGet(unsigned long, unsigned long*)>
    if (fg < 0) {
    b628:	subs	r6, r0, #0
      DBG_FAIL_MACRO;
      goto fail;
    }
    // free cluster
    if (!fatPut(cluster, 0)) {
    b62a:	mov	r1, r4
    b62c:	mov.w	r2, #0
    b630:	mov	r0, r5
bool FatPartition::freeChain(uint32_t cluster) {
  uint32_t next;
  int8_t fg;
  do {
    fg = fatGet(cluster, &next);
    if (fg < 0) {
    b632:	bge.n	b60a <FatPartition::freeChain(unsigned long)+0xa>
  } while (fg);

  return true;

 fail:
  return false;
    b634:	movs	r0, #0
}
    b636:	add	sp, #8
    b638:	pop	{r4, r5, r6, pc}
    b63a:	nop

0000b63c <FatPartition::freeClusterCount()>:
//------------------------------------------------------------------------------
int32_t FatPartition::freeClusterCount() {
    b63c:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b640:	ldrb	r3, [r0, #7]
    return m_freeClusterCount;
  }
#endif  // MAINTAIN_FREE_CLUSTER_COUNT
  uint32_t free = 0;
  uint32_t sector;
  uint32_t todo = m_lastCluster + 1;
    b642:	ldr	r2, [r0, #28]
      }
      if (fg && c == 0) {
        free++;
      }
    }
  } else if (fatType() == 16 || fatType() == 32) {
    b644:	cmp	r3, #32
    return m_freeClusterCount;
  }
#endif  // MAINTAIN_FREE_CLUSTER_COUNT
  uint32_t free = 0;
  uint32_t sector;
  uint32_t todo = m_lastCluster + 1;
    b646:	add.w	r8, r2, #1
      }
      if (fg && c == 0) {
        free++;
      }
    }
  } else if (fatType() == 16 || fatType() == 32) {
    b64a:	beq.n	b658 <FatPartition::freeClusterCount()+0x1c>
    b64c:	cmp	r3, #16
    b64e:	beq.n	b658 <FatPartition::freeClusterCount()+0x1c>
  }
  setFreeClusterCount(free);
  return free;

 fail:
  return -1;
    b650:	mov.w	r0, #4294967295
    b654:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (fg && c == 0) {
        free++;
      }
    }
  } else if (fatType() == 16 || fatType() == 32) {
    sector = m_fatStartSector;
    b658:	ldr	r5, [r0, #24]
    while (todo) {
    b65a:	cmp.w	r8, #0
    b65e:	beq.n	b6dc <FatPartition::freeClusterCount()+0xa0>
    b660:	mov	r6, r0
    b662:	add.w	r7, r0, #564	; 0x234
    b666:	movs	r4, #0
  FsCache m_cache;
#if USE_SEPARATE_FAT_CACHE
  FsCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t sector, uint8_t options) {
    options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    return reinterpret_cast<cache_t*>(m_fatCache.get(sector, options));
    b668:	mov	r1, r5
    b66a:	movs	r2, #2
    b66c:	mov	r0, r7
      cache_t* pc = cacheFetchFat(sector++, FsCache::CACHE_FOR_READ);
    b66e:	adds	r5, #1
    b670:	bl	8d80 <FsCache::get(unsigned long, unsigned char)>
      if (!pc) {
    b674:	cmp	r0, #0
    b676:	beq.n	b650 <FatPartition::freeClusterCount()+0x14>
        DBG_FAIL_MACRO;
        goto fail;
      }
      n =  fatType() == 16 ? m_bytesPerSector/2 : m_bytesPerSector/4;
    b678:	ldrb	r3, [r6, #7]
    b67a:	cmp	r3, #16
    b67c:	beq.n	b6aa <FatPartition::freeClusterCount()+0x6e>
      if (todo < n) {
    b67e:	cmp.w	r8, #127	; 0x7f
    b682:	bls.n	b6d4 <FatPartition::freeClusterCount()+0x98>
    b684:	movs	r1, #128	; 0x80
      cache_t* pc = cacheFetchFat(sector++, FsCache::CACHE_FOR_READ);
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      n =  fatType() == 16 ? m_bytesPerSector/2 : m_bytesPerSector/4;
    b686:	mov	r2, r1
    b688:	subs	r2, #1
    b68a:	subs	r3, r0, #4
    b68c:	uxth	r2, r2
    b68e:	add.w	r0, r0, r2, lsl #2
            free++;
          }
        }
      } else {
        for (uint16_t i = 0; i < n; i++) {
          if (pc->fat32[i] == 0) {
    b692:	ldr.w	r2, [r3, #4]!
    b696:	cbnz	r2, b69a <FatPartition::freeClusterCount()+0x5e>
            free++;
    b698:	adds	r4, #1
          if (pc->fat16[i] == 0) {
            free++;
          }
        }
      } else {
        for (uint16_t i = 0; i < n; i++) {
    b69a:	cmp	r3, r0
    b69c:	bne.n	b692 <FatPartition::freeClusterCount()+0x56>
        free++;
      }
    }
  } else if (fatType() == 16 || fatType() == 32) {
    sector = m_fatStartSector;
    while (todo) {
    b69e:	subs.w	r8, r8, r1
    b6a2:	bne.n	b668 <FatPartition::freeClusterCount()+0x2c>
    b6a4:	mov	r0, r4
    b6a6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      n =  fatType() == 16 ? m_bytesPerSector/2 : m_bytesPerSector/4;
      if (todo < n) {
    b6aa:	cmp.w	r8, #255	; 0xff
    b6ae:	bhi.n	b6e2 <FatPartition::freeClusterCount()+0xa6>
        n = todo;
    b6b0:	uxth.w	r3, r8
    b6b4:	mov	r1, r8
    b6b6:	subs	r2, r3, #1
    b6b8:	subs	r3, r0, #2
    b6ba:	uxth	r2, r2
    b6bc:	add.w	r0, r0, r2, lsl #1
      }
      if (fatType() == 16) {
        for (uint16_t i = 0; i < n; i++) {
          if (pc->fat16[i] == 0) {
    b6c0:	ldrh.w	r2, [r3, #2]!
    b6c4:	cbnz	r2, b6c8 <FatPartition::freeClusterCount()+0x8c>
            free++;
    b6c6:	adds	r4, #1
      n =  fatType() == 16 ? m_bytesPerSector/2 : m_bytesPerSector/4;
      if (todo < n) {
        n = todo;
      }
      if (fatType() == 16) {
        for (uint16_t i = 0; i < n; i++) {
    b6c8:	cmp	r0, r3
    b6ca:	bne.n	b6c0 <FatPartition::freeClusterCount()+0x84>
        free++;
      }
    }
  } else if (fatType() == 16 || fatType() == 32) {
    sector = m_fatStartSector;
    while (todo) {
    b6cc:	subs.w	r8, r8, r1
    b6d0:	bne.n	b668 <FatPartition::freeClusterCount()+0x2c>
    b6d2:	b.n	b6a4 <FatPartition::freeClusterCount()+0x68>
        DBG_FAIL_MACRO;
        goto fail;
      }
      n =  fatType() == 16 ? m_bytesPerSector/2 : m_bytesPerSector/4;
      if (todo < n) {
        n = todo;
    b6d4:	uxth.w	r2, r8
    b6d8:	mov	r1, r8
    b6da:	b.n	b688 <FatPartition::freeClusterCount()+0x4c>
        free++;
      }
    }
  } else if (fatType() == 16 || fatType() == 32) {
    sector = m_fatStartSector;
    while (todo) {
    b6dc:	mov	r0, r8
    // invalid FAT type
    DBG_FAIL_MACRO;
    goto fail;
  }
  setFreeClusterCount(free);
  return free;
    b6de:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      n =  fatType() == 16 ? m_bytesPerSector/2 : m_bytesPerSector/4;
      if (todo < n) {
    b6e2:	mov.w	r1, #256	; 0x100
      cache_t* pc = cacheFetchFat(sector++, FsCache::CACHE_FOR_READ);
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      n =  fatType() == 16 ? m_bytesPerSector/2 : m_bytesPerSector/4;
    b6e6:	mov	r3, r1
    b6e8:	b.n	b6b6 <FatPartition::freeClusterCount()+0x7a>
    b6ea:	nop

0000b6ec <FatPartition::init(BlockDeviceInterface*, unsigned char)>:

 fail:
  return -1;
}
//------------------------------------------------------------------------------
bool FatPartition::init(BlockDevice* dev, uint8_t part) {
    b6ec:	push	{r3, r4, r5, r6, r7, lr}
    b6ee:	mov	r4, r0
  m_blockDev = dev;
  pbs_t* pbs;
  BpbFat32_t* bpb;
  MbrSector_t* mbr;
  uint8_t tmp;
  m_fatType = 0;
    b6f0:	movs	r3, #0
    b6f2:	mov.w	r0, #4294967295
  m_allocSearchStart = 1;
    b6f6:	movs	r5, #1
//------------------------------------------------------------------------------
bool FatPartition::init(BlockDevice* dev, uint8_t part) {
  uint32_t clusterCount;
  uint32_t totalSectors;
  uint32_t volumeStartSector = 0;
  m_blockDev = dev;
    b6f8:	str	r1, [r4, #0]
#if USE_SEPARATE_FAT_CACHE
  m_fatCache.init(dev);
#endif  // USE_SEPARATE_FAT_CACHE
  // if part == 0 assume super floppy with FAT boot sector in sector zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
    b6fa:	mov	r6, r2
  }
  /** Initialize the cache.
   * \param[in] blockDev Block device for this cache.
   */
  void init(BlockDevice* blockDev) {
    m_blockDev = blockDev;
    b6fc:	str	r1, [r4, #40]	; 0x28
    b6fe:	str.w	r1, [r4, #568]	; 0x238
  pbs_t* pbs;
  BpbFat32_t* bpb;
  MbrSector_t* mbr;
  uint8_t tmp;
  m_fatType = 0;
  m_allocSearchStart = 1;
    b702:	str	r5, [r4, #12]
  m_blockDev = dev;
  pbs_t* pbs;
  BpbFat32_t* bpb;
  MbrSector_t* mbr;
  uint8_t tmp;
  m_fatType = 0;
    b704:	strb	r3, [r4, #7]
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    b706:	strb.w	r3, [r4, #36]	; 0x24
    b70a:	strb.w	r3, [r4, #564]	; 0x234
    m_sector = 0XFFFFFFFF;
    b70e:	str	r0, [r4, #48]	; 0x30
    b710:	str.w	r0, [r4, #576]	; 0x240
#if USE_SEPARATE_FAT_CACHE
  m_fatCache.init(dev);
#endif  // USE_SEPARATE_FAT_CACHE
  // if part == 0 assume super floppy with FAT boot sector in sector zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
    b714:	cbz	r2, b74e <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x62>
    if (part > 4) {
    b716:	cmp	r2, #4
    b718:	bls.n	b71e <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x32>
  m_fatCache.setMirrorOffset(m_sectorsPerFat);
#endif  // USE_SEPARATE_FAT_CACHE
  return true;

 fail:
  return false;
    b71a:	movs	r0, #0
    b71c:	pop	{r3, r4, r5, r6, r7, pc}
  bool cacheSync() {
    return m_cache.sync() && syncDevice();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t sector, uint8_t options) {
    return reinterpret_cast<cache_t*>(m_cache.get(sector, options));
    b71e:	add.w	r5, r4, #36	; 0x24
    b722:	mov	r2, r3
    b724:	mov	r1, r3
    b726:	mov	r0, r5
    b728:	bl	8d80 <FsCache::get(unsigned long, unsigned char)>
      DBG_FAIL_MACRO;
      goto fail;
    }
    mbr = reinterpret_cast<MbrSector_t*>
          (cacheFetchData(0, FsCache::CACHE_FOR_READ));
    MbrPart_t* mp = mbr->part + part - 1;
    b72c:	mvn.w	r3, #4026531840	; 0xf0000000
    b730:	add.w	r1, r0, #446	; 0x1be
    b734:	add	r3, r6
    b736:	lsls	r3, r3, #4
    b738:	adds	r2, r1, r3

    if (!mbr || mp->type == 0 || (mp->boot != 0 && mp->boot != 0X80)) {
    b73a:	cmp	r0, #0
    b73c:	beq.n	b71a <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x2e>
    b73e:	ldrb	r0, [r2, #4]
    b740:	cmp	r0, #0
    b742:	beq.n	b71a <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x2e>
    b744:	ldrb	r3, [r1, r3]
    b746:	lsls	r3, r3, #25
    b748:	bne.n	b71a <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x2e>
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
}
inline uint32_t getLe32(const uint8_t* src) {
  return *reinterpret_cast<const uint32_t*>(src);
    b74a:	ldr	r6, [r2, #8]
    b74c:	b.n	b752 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x66>
    b74e:	add.w	r5, r4, #36	; 0x24
    b752:	mov	r0, r5
    b754:	movs	r2, #0
    b756:	mov	r1, r6
    b758:	bl	8d80 <FsCache::get(unsigned long, unsigned char)>
    volumeStartSector = getLe32(mp->relativeSectors);
  }
  pbs = reinterpret_cast<pbs_t*>
        (cacheFetchData(volumeStartSector, FsCache::CACHE_FOR_READ));
  bpb = reinterpret_cast<BpbFat32_t*>(pbs->bpb);
  if (!pbs || bpb->fatCount != 2 || getLe16(bpb->bytesPerSector) != 512) {
    b75c:	cmp	r0, #0
    b75e:	beq.n	b71a <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x2e>
    b760:	ldrb	r3, [r0, #16]
    b762:	cmp	r3, #2
    b764:	bne.n	b71a <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x2e>
    b766:	ldrh.w	r3, [r0, #11]
    b76a:	cmp.w	r3, #512	; 0x200
    b76e:	bne.n	b71a <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x2e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_sectorsPerCluster = bpb->sectorsPerCluster;
    b770:	ldrb	r2, [r0, #13]
  m_clusterSectorMask = m_sectorsPerCluster - 1;
  // determine shift that is same as multiply by m_sectorsPerCluster
  m_sectorsPerClusterShift = 0;
    b772:	movs	r5, #0
  if (!pbs || bpb->fatCount != 2 || getLe16(bpb->bytesPerSector) != 512) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_sectorsPerCluster = bpb->sectorsPerCluster;
  m_clusterSectorMask = m_sectorsPerCluster - 1;
    b774:	subs	r3, r2, #1
  // determine shift that is same as multiply by m_sectorsPerCluster
  m_sectorsPerClusterShift = 0;
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    b776:	cmp	r2, #1
  bpb = reinterpret_cast<BpbFat32_t*>(pbs->bpb);
  if (!pbs || bpb->fatCount != 2 || getLe16(bpb->bytesPerSector) != 512) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_sectorsPerCluster = bpb->sectorsPerCluster;
    b778:	strb	r2, [r4, #4]
  m_clusterSectorMask = m_sectorsPerCluster - 1;
  // determine shift that is same as multiply by m_sectorsPerCluster
  m_sectorsPerClusterShift = 0;
    b77a:	strb	r5, [r4, #6]
  if (!pbs || bpb->fatCount != 2 || getLe16(bpb->bytesPerSector) != 512) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_sectorsPerCluster = bpb->sectorsPerCluster;
  m_clusterSectorMask = m_sectorsPerCluster - 1;
    b77c:	strb	r3, [r4, #5]
  // determine shift that is same as multiply by m_sectorsPerCluster
  m_sectorsPerClusterShift = 0;
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    b77e:	beq.n	b7a0 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0xb4>
    b780:	movs	r5, #1
    b782:	mov	r1, r5
    b784:	b.n	b788 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x9c>
    b786:	mov	r5, r3
    b788:	lsls	r1, r1, #1
    b78a:	adds	r3, r5, #1
    b78c:	uxtb	r1, r1
    b78e:	uxtb	r3, r3
    b790:	cmp	r2, r1
    b792:	beq.n	b79e <FatPartition::init(BlockDeviceInterface*, unsigned char)+0xb2>
    if (tmp == 0) {
    b794:	cmp	r3, #9
    b796:	bne.n	b786 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x9a>
    b798:	strb	r5, [r4, #6]
  m_fatCache.setMirrorOffset(m_sectorsPerFat);
#endif  // USE_SEPARATE_FAT_CACHE
  return true;

 fail:
  return false;
    b79a:	movs	r0, #0
    b79c:	pop	{r3, r4, r5, r6, r7, pc}
    b79e:	strb	r5, [r4, #6]
      DBG_FAIL_MACRO;
      goto fail;
    }
    m_sectorsPerClusterShift++;
  }
  m_sectorsPerFat = getLe16(bpb->sectorsPerFat16);
    b7a0:	ldrh	r7, [r0, #22]
    b7a2:	str	r7, [r4, #16]
  if (m_sectorsPerFat == 0) {
    b7a4:	cbnz	r7, b7aa <FatPartition::init(BlockDeviceInterface*, unsigned char)+0xbe>
    b7a6:	ldr	r7, [r0, #36]	; 0x24
    m_sectorsPerFat = getLe32(bpb->sectorsPerFat32);
    b7a8:	str	r7, [r4, #16]
void lbaToMbrChs(uint8_t* chs, uint32_t capacityMB, uint32_t lba);
//-----------------------------------------------------------------------------
#if !defined(USE_SIMPLE_LITTLE_ENDIAN) || USE_SIMPLE_LITTLE_ENDIAN
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
    b7aa:	ldrh.w	r1, [r0, #17]
  }
  m_fatStartSector = volumeStartSector + getLe16(bpb->reservedSectorCount);
    b7ae:	ldrh	r3, [r0, #14]
  m_rootDirEntryCount = getLe16(bpb->rootDirEntryCount);

  // directory start for FAT16 dataStart for FAT32
  m_rootDirStart = m_fatStartSector + 2 * m_sectorsPerFat;
  // data start for FAT16 and FAT32
  m_dataStartSector = m_rootDirStart +
    b7b0:	lsls	r2, r1, #5
    m_sectorsPerFat = getLe32(bpb->sectorsPerFat32);
  }
  m_fatStartSector = volumeStartSector + getLe16(bpb->reservedSectorCount);

  // count for FAT16 zero for FAT32
  m_rootDirEntryCount = getLe16(bpb->rootDirEntryCount);
    b7b2:	strh	r1, [r4, #8]
  }
  m_sectorsPerFat = getLe16(bpb->sectorsPerFat16);
  if (m_sectorsPerFat == 0) {
    m_sectorsPerFat = getLe32(bpb->sectorsPerFat32);
  }
  m_fatStartSector = volumeStartSector + getLe16(bpb->reservedSectorCount);
    b7b4:	add	r3, r6
  m_rootDirEntryCount = getLe16(bpb->rootDirEntryCount);

  // directory start for FAT16 dataStart for FAT32
  m_rootDirStart = m_fatStartSector + 2 * m_sectorsPerFat;
  // data start for FAT16 and FAT32
  m_dataStartSector = m_rootDirStart +
    b7b6:	addw	r2, r2, #511	; 0x1ff

  // count for FAT16 zero for FAT32
  m_rootDirEntryCount = getLe16(bpb->rootDirEntryCount);

  // directory start for FAT16 dataStart for FAT32
  m_rootDirStart = m_fatStartSector + 2 * m_sectorsPerFat;
    b7ba:	add.w	r1, r3, r7, lsl #1
  }
  m_sectorsPerFat = getLe16(bpb->sectorsPerFat16);
  if (m_sectorsPerFat == 0) {
    m_sectorsPerFat = getLe32(bpb->sectorsPerFat32);
  }
  m_fatStartSector = volumeStartSector + getLe16(bpb->reservedSectorCount);
    b7be:	str	r3, [r4, #24]
  // data start for FAT16 and FAT32
  m_dataStartSector = m_rootDirStart +
    ((32 * m_rootDirEntryCount + m_bytesPerSector - 1)/m_bytesPerSector);

  // total sectors for FAT16 or FAT32
  totalSectors = getLe16(bpb->totalSectors16);
    b7c0:	ldrh.w	r3, [r0, #19]
  m_rootDirEntryCount = getLe16(bpb->rootDirEntryCount);

  // directory start for FAT16 dataStart for FAT32
  m_rootDirStart = m_fatStartSector + 2 * m_sectorsPerFat;
  // data start for FAT16 and FAT32
  m_dataStartSector = m_rootDirStart +
    b7c4:	add.w	r2, r1, r2, asr #9

  // count for FAT16 zero for FAT32
  m_rootDirEntryCount = getLe16(bpb->rootDirEntryCount);

  // directory start for FAT16 dataStart for FAT32
  m_rootDirStart = m_fatStartSector + 2 * m_sectorsPerFat;
    b7c8:	str	r1, [r4, #32]
  // data start for FAT16 and FAT32
  m_dataStartSector = m_rootDirStart +
    ((32 * m_rootDirEntryCount + m_bytesPerSector - 1)/m_bytesPerSector);
    b7ca:	str	r2, [r4, #20]

  // total sectors for FAT16 or FAT32
  totalSectors = getLe16(bpb->totalSectors16);
  if (totalSectors == 0) {
    b7cc:	cbz	r3, b7fc <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x110>
    totalSectors = getLe32(bpb->totalSectors32);
  }
  // total data sectors
  clusterCount = totalSectors - (m_dataStartSector - volumeStartSector);
    b7ce:	subs	r6, r6, r2
  m_lastCluster = clusterCount + 1;

  // Indicate unknown number of free clusters.
  setFreeClusterCount(-1);
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
    b7d0:	movw	r2, #4084	; 0xff4
  totalSectors = getLe16(bpb->totalSectors16);
  if (totalSectors == 0) {
    totalSectors = getLe32(bpb->totalSectors32);
  }
  // total data sectors
  clusterCount = totalSectors - (m_dataStartSector - volumeStartSector);
    b7d4:	add	r3, r6

  // divide by cluster size to get cluster count
  clusterCount >>= m_sectorsPerClusterShift;
    b7d6:	lsr.w	r5, r3, r5
  m_lastCluster = clusterCount + 1;
    b7da:	adds	r3, r5, #1

  // Indicate unknown number of free clusters.
  setFreeClusterCount(-1);
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
    b7dc:	cmp	r5, r2
  // total data sectors
  clusterCount = totalSectors - (m_dataStartSector - volumeStartSector);

  // divide by cluster size to get cluster count
  clusterCount >>= m_sectorsPerClusterShift;
  m_lastCluster = clusterCount + 1;
    b7de:	str	r3, [r4, #28]

  // Indicate unknown number of free clusters.
  setFreeClusterCount(-1);
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
    b7e0:	bls.n	b806 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x11a>
    m_fatType = 12;
    if (!FAT12_SUPPORT) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if (clusterCount < 65525) {
    b7e2:	movw	r3, #65524	; 0xfff4
    b7e6:	cmp	r5, r3
    b7e8:	bls.n	b800 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x114>
}
inline uint32_t getLe32(const uint8_t* src) {
  return *reinterpret_cast<const uint32_t*>(src);
    b7ea:	ldr	r2, [r0, #44]	; 0x2c
    m_fatType = 16;
  } else {
    m_rootDirStart = getLe32(bpb->fat32RootCluster);
    m_fatType = 32;
    b7ec:	movs	r3, #32
      goto fail;
    }
  } else if (clusterCount < 65525) {
    m_fatType = 16;
  } else {
    m_rootDirStart = getLe32(bpb->fat32RootCluster);
    b7ee:	str	r2, [r4, #32]
    m_fatType = 32;
    b7f0:	strb	r3, [r4, #7]
  }
  /** Set the offset to the second FAT for mirroring.
   * \param[in] offset Sector offset to second FAT.
   */
  void setMirrorOffset(uint32_t offset) {
    m_mirrorOffset = offset;
    b7f2:	str	r7, [r4, #44]	; 0x2c
  }
  m_cache.setMirrorOffset(m_sectorsPerFat);
#if USE_SEPARATE_FAT_CACHE
  m_fatCache.setMirrorOffset(m_sectorsPerFat);
#endif  // USE_SEPARATE_FAT_CACHE
  return true;
    b7f4:	movs	r0, #1
    b7f6:	str.w	r7, [r4, #572]	; 0x23c
    b7fa:	pop	{r3, r4, r5, r6, r7, pc}
    b7fc:	ldr	r3, [r0, #32]
    b7fe:	b.n	b7ce <FatPartition::init(BlockDeviceInterface*, unsigned char)+0xe2>
    if (!FAT12_SUPPORT) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if (clusterCount < 65525) {
    m_fatType = 16;
    b800:	movs	r3, #16
    b802:	strb	r3, [r4, #7]
    b804:	b.n	b7f2 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x106>

  // Indicate unknown number of free clusters.
  setFreeClusterCount(-1);
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
    m_fatType = 12;
    b806:	movs	r3, #12
  m_fatCache.setMirrorOffset(m_sectorsPerFat);
#endif  // USE_SEPARATE_FAT_CACHE
  return true;

 fail:
  return false;
    b808:	movs	r0, #0

  // Indicate unknown number of free clusters.
  setFreeClusterCount(-1);
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
    m_fatType = 12;
    b80a:	strb	r3, [r4, #7]
    if (!FAT12_SUPPORT) {
      DBG_FAIL_MACRO;
      goto fail;
    b80c:	pop	{r3, r4, r5, r6, r7, pc}
    b80e:	nop

0000b810 <lfnGetChar(DirLfn_t*, unsigned char)>:
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \return The 16-bit character.
 */
static uint16_t lfnGetChar(DirLfn_t* ldir, uint8_t i) {
  if (i < 5) {
    b810:	cmp	r1, #4
    b812:	bls.n	b82c <lfnGetChar(DirLfn_t*, unsigned char)+0x1c>
    return getLe16(ldir->unicode1 + 2*i);
  } else if (i < 11) {
    b814:	cmp	r1, #10
    b816:	bls.n	b824 <lfnGetChar(DirLfn_t*, unsigned char)+0x14>
    return getLe16(ldir->unicode2 + 2*i - 10);
  } else if (i < 13) {
    b818:	cmp	r1, #12
    b81a:	bhi.n	b836 <lfnGetChar(DirLfn_t*, unsigned char)+0x26>
void lbaToMbrChs(uint8_t* chs, uint32_t capacityMB, uint32_t lba);
//-----------------------------------------------------------------------------
#if !defined(USE_SIMPLE_LITTLE_ENDIAN) || USE_SIMPLE_LITTLE_ENDIAN
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
    b81c:	add.w	r1, r0, r1, lsl #1
    b820:	ldrh	r0, [r1, #6]
    b822:	bx	lr
    b824:	add.w	r1, r0, r1, lsl #1
    b828:	ldrh	r0, [r1, #4]
 */
static uint16_t lfnGetChar(DirLfn_t* ldir, uint8_t i) {
  if (i < 5) {
    return getLe16(ldir->unicode1 + 2*i);
  } else if (i < 11) {
    return getLe16(ldir->unicode2 + 2*i - 10);
    b82a:	bx	lr
    b82c:	add.w	r1, r0, r1, lsl #1
    b830:	ldrh.w	r0, [r1, #1]
 * \param[in] i Index of character.
 * \return The 16-bit character.
 */
static uint16_t lfnGetChar(DirLfn_t* ldir, uint8_t i) {
  if (i < 5) {
    return getLe16(ldir->unicode1 + 2*i);
    b834:	bx	lr
  } else if (i < 11) {
    return getLe16(ldir->unicode2 + 2*i - 10);
  } else if (i < 13) {
    return getLe16(ldir->unicode3 + 2*i - 22);
  }
  return 0;
    b836:	movs	r0, #0
}
    b838:	bx	lr
    b83a:	nop

0000b83c <FatFile::lfnChecksum(unsigned char*)>:
#include "../common/DebugMacros.h"
#include "FatFile.h"
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
    b83c:	push	{r4}
    b83e:	mov	r4, r0
  uint8_t sum = 0;
    b840:	movs	r0, #0
    b842:	subs	r2, r4, #1
    b844:	adds	r4, #10
  for (uint8_t i = 0; i < 11; i++) {
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
    b846:	lsrs	r3, r0, #1
    b848:	ldrb.w	r1, [r2, #1]!
    b84c:	orr.w	r0, r3, r0, lsl #7
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
    b850:	cmp	r4, r2
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
    b852:	uxtab	r0, r1, r0
    b856:	uxtb	r0, r0
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
    b858:	bne.n	b846 <FatFile::lfnChecksum(unsigned char*)+0xa>
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
  }
  return sum;
}
    b85a:	ldr.w	r4, [sp], #4
    b85e:	bx	lr

0000b860 <FatFile::openCluster(FatFile*)>:
 fail:
  name[0] = '\0';
  return 0;
}
//------------------------------------------------------------------------------
bool FatFile::openCluster(FatFile* file) {
    b860:	push	{r3, r4, r5, lr}
  if (file->m_dirCluster == 0) {
    b862:	ldr	r3, [r1, #12]
    b864:	cbz	r3, b884 <FatFile::openCluster(FatFile*)+0x24>
    b866:	mov	r4, r1
    return openRoot(file->m_vol);
  }
  memset(this, 0, sizeof(FatFile));
    b868:	movs	r2, #36	; 0x24
    b86a:	movs	r1, #0
    b86c:	mov	r5, r0
    b86e:	bl	10bfc <memset>
  m_attributes = FILE_ATTR_SUBDIR;
    b872:	movs	r3, #16
  m_flags = FILE_FLAG_READ;
    b874:	movs	r0, #1
bool FatFile::openCluster(FatFile* file) {
  if (file->m_dirCluster == 0) {
    return openRoot(file->m_vol);
  }
  memset(this, 0, sizeof(FatFile));
  m_attributes = FILE_ATTR_SUBDIR;
    b876:	strb	r3, [r5, #0]
  m_flags = FILE_FLAG_READ;
    b878:	strb	r0, [r5, #2]
  m_vol = file->m_vol;
    b87a:	ldr	r2, [r4, #8]
  m_firstCluster = file->m_dirCluster;
    b87c:	ldr	r3, [r4, #12]
    return openRoot(file->m_vol);
  }
  memset(this, 0, sizeof(FatFile));
  m_attributes = FILE_ATTR_SUBDIR;
  m_flags = FILE_FLAG_READ;
  m_vol = file->m_vol;
    b87e:	str	r2, [r5, #8]
  m_firstCluster = file->m_dirCluster;
    b880:	str	r3, [r5, #32]
  return true;
}
    b882:	pop	{r3, r4, r5, pc}
  return 0;
}
//------------------------------------------------------------------------------
bool FatFile::openCluster(FatFile* file) {
  if (file->m_dirCluster == 0) {
    return openRoot(file->m_vol);
    b884:	ldr	r1, [r1, #8]
  m_attributes = FILE_ATTR_SUBDIR;
  m_flags = FILE_FLAG_READ;
  m_vol = file->m_vol;
  m_firstCluster = file->m_dirCluster;
  return true;
}
    b886:	ldmia.w	sp!, {r3, r4, r5, lr}
  return 0;
}
//------------------------------------------------------------------------------
bool FatFile::openCluster(FatFile* file) {
  if (file->m_dirCluster == 0) {
    return openRoot(file->m_vol);
    b88a:	b.w	aba8 <FatFile::openRoot(FatVolume*)>
    b88e:	nop

0000b890 <FatFile::getName(char*, unsigned int)>:
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
    lfnPutChar(ldir, i, c);
  }
}
//==============================================================================
size_t FatFile::getName(char* name, size_t size) {
    b890:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b894:	movs	r3, #0
    b896:	sub	sp, #52	; 0x34
    b898:	mov	r9, r2
  size_t n = 0;
  FatFile dirFile;
  DirLfn_t* ldir;
  if (!isOpen() || size < 13) {
    b89a:	ldrb	r2, [r0, #0]
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
    lfnPutChar(ldir, i, c);
  }
}
//==============================================================================
size_t FatFile::getName(char* name, size_t size) {
    b89c:	mov	r8, r1
    b89e:	strb.w	r3, [sp, #12]
    b8a2:	strb.w	r3, [sp, #13]
    b8a6:	strb.w	r3, [sp, #14]
  size_t n = 0;
  FatFile dirFile;
  DirLfn_t* ldir;
  if (!isOpen() || size < 13) {
    b8aa:	cmp	r2, #0
    b8ac:	beq.n	b964 <FatFile::getName(char*, unsigned int)+0xd4>
    b8ae:	cmp.w	r9, #12
    b8b2:	ite	hi
    b8b4:	movhi	r4, #0
    b8b6:	movls	r4, #1
    b8b8:	cmp	r4, #0
    b8ba:	bne.n	b964 <FatFile::getName(char*, unsigned int)+0xd4>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!isLFN()) {
    b8bc:	ldrb	r3, [r0, #3]
    b8be:	mov	r7, r0
    b8c0:	cmp	r3, #0
    b8c2:	beq.n	b970 <FatFile::getName(char*, unsigned int)+0xe0>
    return getSFN(name);
  }
  if (!dirFile.openCluster(this)) {
    b8c4:	mov	r1, r7
    b8c6:	add	r0, sp, #12
    b8c8:	bl	b860 <FatFile::openCluster(FatFile*)>
    b8cc:	cmp	r0, #0
    b8ce:	beq.n	b964 <FatFile::getName(char*, unsigned int)+0xd4>
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    b8d0:	ldrb	r3, [r7, #3]
    b8d2:	cmp	r3, #0
    b8d4:	beq.n	b964 <FatFile::getName(char*, unsigned int)+0xd4>
    b8d6:	movs	r6, #1
  uint8_t i;
  size_t k = 13*((ldir->order & 0X1F) - 1);
  // https://github.com/greiman/SdFat-beta/issues/67#issuecomment-774508283
  for (i = 0; i < 13; i++) {
    uint16_t c = lfnGetChar(ldir, i);
    if (c == 0 || k >= (n - 1)) {
    b8d8:	add.w	r5, r9, #4294967295
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    if (!dirFile.seekSet(32UL*(m_dirIndex - order))) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    ldir = reinterpret_cast<DirLfn_t*>(dirFile.readDirCache());
    b8dc:	str	r4, [sp, #4]
  if (!dirFile.openCluster(this)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    if (!dirFile.seekSet(32UL*(m_dirIndex - order))) {
    b8de:	ldrh	r1, [r7, #4]
    b8e0:	add	r0, sp, #12
    b8e2:	subs	r1, r1, r6
    b8e4:	lsls	r1, r1, #5
    b8e6:	bl	affc <FatFile::seekSet(unsigned long)>
    b8ea:	cmp	r0, #0
    b8ec:	beq.n	b964 <FatFile::getName(char*, unsigned int)+0xd4>
      DBG_FAIL_MACRO;
      goto fail;
    }
    ldir = reinterpret_cast<DirLfn_t*>(dirFile.readDirCache());
    b8ee:	movs	r1, #0
    b8f0:	add	r0, sp, #12
    b8f2:	bl	ad78 <FatFile::readDirCache(bool)>
    if (!ldir) {
    b8f6:	mov	fp, r0
    b8f8:	cbz	r0, b964 <FatFile::getName(char*, unsigned int)+0xd4>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME) {
    b8fa:	ldrb	r3, [r0, #11]
    b8fc:	cmp	r3, #15
    b8fe:	bne.n	b964 <FatFile::getName(char*, unsigned int)+0xd4>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (order != (ldir->order & 0X1F)) {
    b900:	ldrb	r3, [r0, #0]
    b902:	and.w	r3, r3, #31
    b906:	cmp	r6, r3
    b908:	bne.n	b964 <FatFile::getName(char*, unsigned int)+0xd4>
  return 0;
}
//------------------------------------------------------------------------------
static size_t lfnGetName(DirLfn_t* ldir, char* name, size_t n) {
  uint8_t i;
  size_t k = 13*((ldir->order & 0X1F) - 1);
    b90a:	subs	r3, r6, #1
    b90c:	add.w	r4, r3, r3, lsl #1
    b910:	add.w	r4, r3, r4, lsl #2
    b914:	mov	r3, r4
    b916:	add.w	sl, r8, r4
    b91a:	add.w	r2, r4, #13
  // https://github.com/greiman/SdFat-beta/issues/67#issuecomment-774508283
  for (i = 0; i < 13; i++) {
    uint16_t c = lfnGetChar(ldir, i);
    b91e:	subs	r1, r3, r4
    b920:	mov	r0, fp
    b922:	uxtb	r1, r1
    b924:	bl	b810 <lfnGetChar(DirLfn_t*, unsigned char)>
    if (c == 0 || k >= (n - 1)) {
     //       k = n - 1;   <<-------removed
      break;
    }
    name[k++] = c >= 0X7F ? '?' : c;
    b928:	movs	r1, #63	; 0x3f
  uint8_t i;
  size_t k = 13*((ldir->order & 0X1F) - 1);
  // https://github.com/greiman/SdFat-beta/issues/67#issuecomment-774508283
  for (i = 0; i < 13; i++) {
    uint16_t c = lfnGetChar(ldir, i);
    if (c == 0 || k >= (n - 1)) {
    b92a:	cbz	r0, b97a <FatFile::getName(char*, unsigned int)+0xea>
    b92c:	cmp	r5, r3
    b92e:	bls.n	b97a <FatFile::getName(char*, unsigned int)+0xea>
     //       k = n - 1;   <<-------removed
      break;
    }
    name[k++] = c >= 0X7F ? '?' : c;
    b930:	cmp	r0, #126	; 0x7e
    b932:	add.w	r3, r3, #1
    b936:	it	ls
    b938:	uxtbls	r1, r0
//------------------------------------------------------------------------------
static size_t lfnGetName(DirLfn_t* ldir, char* name, size_t n) {
  uint8_t i;
  size_t k = 13*((ldir->order & 0X1F) - 1);
  // https://github.com/greiman/SdFat-beta/issues/67#issuecomment-774508283
  for (i = 0; i < 13; i++) {
    b93a:	cmp	r3, r2
    uint16_t c = lfnGetChar(ldir, i);
    if (c == 0 || k >= (n - 1)) {
     //       k = n - 1;   <<-------removed
      break;
    }
    name[k++] = c >= 0X7F ? '?' : c;
    b93c:	strb.w	r1, [sl], #1
//------------------------------------------------------------------------------
static size_t lfnGetName(DirLfn_t* ldir, char* name, size_t n) {
  uint8_t i;
  size_t k = 13*((ldir->order & 0X1F) - 1);
  // https://github.com/greiman/SdFat-beta/issues/67#issuecomment-774508283
  for (i = 0; i < 13; i++) {
    b940:	bne.n	b91e <FatFile::getName(char*, unsigned int)+0x8e>
    }
    name[k++] = c >= 0X7F ? '?' : c;
  }
  // Terminate with zero byte.
  if (k >= n) {  // <<----------added
    k = n - 1;   // <<--------- added
    b942:	cmp	r9, r2
  }             // <<---------added
  name[k] = '\0';
    b944:	ldrb.w	r3, [sp, #4]
    }
    name[k++] = c >= 0X7F ? '?' : c;
  }
  // Terminate with zero byte.
  if (k >= n) {  // <<----------added
    k = n - 1;   // <<--------- added
    b948:	it	ls
    b94a:	movls	r2, r5
  }             // <<---------added
  name[k] = '\0';
    b94c:	strb.w	r3, [r8, r2]
    if (order != (ldir->order & 0X1F)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    n = lfnGetName(ldir, name, size);
    if (n == 0) {
    b950:	cbz	r2, b964 <FatFile::getName(char*, unsigned int)+0xd4>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (ldir->order & FAT_ORDER_LAST_LONG_ENTRY) {
    b952:	ldrb.w	r3, [fp]
    b956:	lsls	r3, r3, #25
    b958:	bmi.n	b97e <FatFile::getName(char*, unsigned int)+0xee>
  }
  if (!dirFile.openCluster(this)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    b95a:	adds	r6, #1
    b95c:	ldrb	r3, [r7, #3]
    b95e:	uxtb	r6, r6
    b960:	cmp	r3, r6
    b962:	bcs.n	b8de <FatFile::getName(char*, unsigned int)+0x4e>
  }
  // Fall into fail.
  DBG_FAIL_MACRO;

 fail:
  name[0] = '\0';
    b964:	movs	r0, #0
    b966:	strb.w	r0, [r8]
  return 0;
}
    b96a:	add	sp, #52	; 0x34
    b96c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (!isOpen() || size < 13) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!isLFN()) {
    return getSFN(name);
    b970:	bl	c18c <FatFile::getSFN(char*)>
  DBG_FAIL_MACRO;

 fail:
  name[0] = '\0';
  return 0;
}
    b974:	add	sp, #52	; 0x34
    b976:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  uint8_t i;
  size_t k = 13*((ldir->order & 0X1F) - 1);
  // https://github.com/greiman/SdFat-beta/issues/67#issuecomment-774508283
  for (i = 0; i < 13; i++) {
    uint16_t c = lfnGetChar(ldir, i);
    if (c == 0 || k >= (n - 1)) {
    b97a:	mov	r2, r3
    b97c:	b.n	b942 <FatFile::getName(char*, unsigned int)+0xb2>
    b97e:	mov	r0, r2
    b980:	b.n	b96a <FatFile::getName(char*, unsigned int)+0xda>
    b982:	nop

0000b984 <FatFile::parsePathName(char const*, fname_t*, char const**)>:
  m_firstCluster = file->m_dirCluster;
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::parsePathName(const char* path,
                            fname_t* fname, const char** ptr) {
    b984:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int len = 0;
  int si;
  int dot;

  // Skip leading spaces.
  while (*path == ' ') {
    b988:	ldrb	r3, [r0, #0]
    b98a:	cmp	r3, #32
    b98c:	bne.n	b996 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x12>
    b98e:	ldrb.w	r3, [r0, #1]!
    b992:	cmp	r3, #32
    b994:	beq.n	b98e <FatFile::parsePathName(char const*, fname_t*, char const**)+0xa>
    path++;
  }
  fname->lfn = path;
    b996:	str	r0, [r1, #8]

  for (len = 0; ; len++) {
    c = path[len];
    b998:	ldrb	r3, [r0, #0]
    if (c == 0 || isDirSeparator(c)) {
    b99a:	cmp	r3, #47	; 0x2f
    b99c:	beq.w	bbe4 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x260>
    b9a0:	cmp	r3, #0
    b9a2:	beq.w	bbe4 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x260>
  name[k] = '\0';
  return k;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(uint8_t c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
    b9a6:	cmp	r3, #92	; 0x5c
    b9a8:	beq.n	b9f6 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x72>
    b9aa:	sub.w	r4, r3, #34	; 0x22
    b9ae:	uxtb	r4, r4
    b9b0:	cmp	r4, #26
    b9b2:	bls.n	b9fc <FatFile::parsePathName(char const*, fname_t*, char const**)+0x78>
    b9b4:	adds	r6, r0, #1
  m_firstCluster = file->m_dirCluster;
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::parsePathName(const char* path,
                            fname_t* fname, const char** ptr) {
    b9b6:	movs	r5, #0
  name[k] = '\0';
  return k;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(uint8_t c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
    b9b8:	ldr.w	lr, [pc, #584]	; bc04 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x280>
    b9bc:	b.n	b9c6 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x42>
    b9be:	cmp	r4, #26
    b9c0:	lsr.w	r7, lr, r4
    b9c4:	bls.n	ba0c <FatFile::parsePathName(char const*, fname_t*, char const**)+0x88>
      c == ':' || c == '<' || c == '>' || c == '?' || c == '|') {
    b9c6:	sub.w	r4, r3, #62	; 0x3e
  while (*path == ' ') {
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    b9ca:	adds	r5, #1
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
    b9cc:	sub.w	ip, r3, #32
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    c = path[len];
    b9d0:	mov	r8, r6
  return k;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(uint8_t c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
      c == ':' || c == '<' || c == '>' || c == '?' || c == '|') {
    b9d2:	cmp	r4, #1
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    c = path[len];
    b9d4:	mov	r7, r5
  return k;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(uint8_t c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
      c == ':' || c == '<' || c == '>' || c == '?' || c == '|') {
    b9d6:	bls.n	b9f6 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x72>
    b9d8:	cmp	r3, #124	; 0x7c
    b9da:	beq.n	b9f6 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x72>
  for (len = 0; ; len++) {
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
    b9dc:	cmp.w	ip, #94	; 0x5e
    b9e0:	bhi.n	b9f6 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x72>
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    c = path[len];
    b9e2:	ldrb.w	r3, [r6], #1
  name[k] = '\0';
  return k;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(uint8_t c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
    b9e6:	sub.w	r4, r3, #34	; 0x22
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
    b9ea:	cmp	r3, #47	; 0x2f
  name[k] = '\0';
  return k;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(uint8_t c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
    b9ec:	uxtb	r4, r4
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
    b9ee:	beq.n	ba16 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x92>
    b9f0:	cbz	r3, ba16 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x92>
  name[k] = '\0';
  return k;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(uint8_t c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
    b9f2:	cmp	r3, #92	; 0x5c
    b9f4:	bne.n	b9be <FatFile::parsePathName(char const*, fname_t*, char const**)+0x3a>
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;

 fail:
  return false;
    b9f6:	movs	r0, #0
    b9f8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  name[k] = '\0';
  return k;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(uint8_t c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
    b9fc:	ldr	r5, [pc, #516]	; (bc04 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x280>)
    b9fe:	lsr.w	r4, r5, r4
    ba02:	lsls	r5, r4, #31
    ba04:	bpl.n	b9b4 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x30>
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;

 fail:
  return false;
    ba06:	movs	r0, #0
    ba08:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  name[k] = '\0';
  return k;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(uint8_t c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
    ba0c:	lsls	r4, r7, #31
    ba0e:	bpl.n	b9c6 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x42>
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;

 fail:
  return false;
    ba10:	movs	r0, #0
    ba12:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
    ba16:	cmp	r3, #32
    ba18:	beq.n	ba20 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x9c>
    ba1a:	cmp	r3, #47	; 0x2f
    ba1c:	bne.w	bbde <FatFile::parsePathName(char const*, fname_t*, char const**)+0x25a>
    ba20:	adds	r3, r5, #1
    ba22:	add	r3, r0
    ba24:	mov	r6, r3
    ba26:	ldrb.w	r4, [r3], #1
    ba2a:	cmp	r4, #32
    ba2c:	beq.n	ba24 <FatFile::parsePathName(char const*, fname_t*, char const**)+0xa0>
    ba2e:	cmp	r4, #47	; 0x2f
    ba30:	beq.n	ba24 <FatFile::parsePathName(char const*, fname_t*, char const**)+0xa0>
  *ptr = &path[end];
    ba32:	str	r6, [r2, #0]

  // Back over spaces and dots.
  while (len) {
    ba34:	cbz	r5, ba64 <FatFile::parsePathName(char const*, fname_t*, char const**)+0xe0>
    c = path[len - 1];
    ba36:	add	r7, r0
    ba38:	ldrb.w	r3, [r7, #-1]
    if (c != '.' && c != ' ') {
    ba3c:	cmp	r3, #32
    ba3e:	beq.n	ba44 <FatFile::parsePathName(char const*, fname_t*, char const**)+0xc0>
    ba40:	cmp	r3, #46	; 0x2e
    ba42:	bne.n	ba5a <FatFile::parsePathName(char const*, fname_t*, char const**)+0xd6>
    ba44:	subs	r3, r5, #1
    ba46:	adds	r4, r0, r3
      break;
    }
    len--;
    ba48:	mov	r5, r3
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
  *ptr = &path[end];

  // Back over spaces and dots.
  while (len) {
    ba4a:	cbz	r3, ba64 <FatFile::parsePathName(char const*, fname_t*, char const**)+0xe0>
    c = path[len - 1];
    ba4c:	ldrb.w	r2, [r4, #-1]!
    ba50:	subs	r3, #1
    if (c != '.' && c != ' ') {
    ba52:	cmp	r2, #46	; 0x2e
    ba54:	beq.n	ba48 <FatFile::parsePathName(char const*, fname_t*, char const**)+0xc4>
    ba56:	cmp	r2, #32
    ba58:	beq.n	ba48 <FatFile::parsePathName(char const*, fname_t*, char const**)+0xc4>
      break;
    }
    len--;
  }
  // Max length of LFN is 255.
  if (len > 255) {
    ba5a:	cmp	r5, #255	; 0xff
    ba5c:	bgt.n	b9f6 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x72>
    ba5e:	mov	r7, r5
    ba60:	subs	r4, r5, #1
    ba62:	b.n	ba6a <FatFile::parsePathName(char const*, fname_t*, char const**)+0xe6>
    ba64:	mov.w	r4, #4294967295
    ba68:	mov	r7, r5
    ba6a:	add.w	r3, r1, #12
    ba6e:	add.w	r6, r1, #23
    goto fail;
  }
  fname->len = len;
  // Blank file short name.
  for (uint8_t k = 0; k < 11; k++) {
    fname->sfn[k] = ' ';
    ba72:	movs	r2, #32
  // Max length of LFN is 255.
  if (len > 255) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  fname->len = len;
    ba74:	str	r7, [r1, #4]
  // Blank file short name.
  for (uint8_t k = 0; k < 11; k++) {
    fname->sfn[k] = ' ';
    ba76:	strb.w	r2, [r3, #1]!
    DBG_FAIL_MACRO;
    goto fail;
  }
  fname->len = len;
  // Blank file short name.
  for (uint8_t k = 0; k < 11; k++) {
    ba7a:	cmp	r3, r6
    ba7c:	bne.n	ba76 <FatFile::parsePathName(char const*, fname_t*, char const**)+0xf2>
    fname->sfn[k] = ' ';
  }
  // skip leading spaces and dots.
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
    ba7e:	ldrb	r3, [r0, #0]
    ba80:	cmp	r3, #46	; 0x2e
    ba82:	beq.n	ba8a <FatFile::parsePathName(char const*, fname_t*, char const**)+0x106>
    ba84:	cmp	r3, #32
    ba86:	bne.w	bbd6 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x252>
    ba8a:	mov	r6, r0
    ba8c:	movs	r3, #0
    ba8e:	ldrb.w	r2, [r6, #1]!
    ba92:	adds	r3, #1
    ba94:	cmp	r2, #46	; 0x2e
    ba96:	beq.n	ba8e <FatFile::parsePathName(char const*, fname_t*, char const**)+0x10a>
    ba98:	cmp	r2, #32
    ba9a:	beq.n	ba8e <FatFile::parsePathName(char const*, fname_t*, char const**)+0x10a>
    ba9c:	mov.w	lr, #0
  // Not 8.3 if leading dot or space.
  is83 = !si;

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
    baa0:	adds	r2, r4, #1
    baa2:	beq.n	babc <FatFile::parsePathName(char const*, fname_t*, char const**)+0x138>
    baa4:	ldrb	r6, [r0, r4]
    baa6:	adds	r2, r0, r4
    baa8:	cmp	r6, #46	; 0x2e
    baaa:	bne.n	bab6 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x132>
    baac:	b.n	babc <FatFile::parsePathName(char const*, fname_t*, char const**)+0x138>
    baae:	ldrb.w	r6, [r2, #-1]!
    bab2:	cmp	r6, #46	; 0x2e
    bab4:	beq.n	babc <FatFile::parsePathName(char const*, fname_t*, char const**)+0x138>
    bab6:	adds.w	r4, r4, #4294967295
    baba:	bcs.n	baae <FatFile::parsePathName(char const*, fname_t*, char const**)+0x12a>
  for (; si < len; si++) {
    babc:	cmp	r5, r3
    babe:	mov.w	r9, #0
    bac2:	ble.w	bbfe <FatFile::parsePathName(char const*, fname_t*, char const**)+0x27a>
    bac6:	mov.w	ip, #7
    baca:	mov.w	r8, #8
    bace:	mov	r6, r9
    bad0:	mov	sl, r9
    c = path[si];
    bad2:	ldrb	r2, [r0, r3]
    if (c == ' ' || (c == '.' && dot != si)) {
    bad4:	cmp	r2, #32
    bad6:	beq.n	bae0 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x15c>
    bad8:	cmp	r2, #46	; 0x2e
    bada:	bne.n	bb0c <FatFile::parsePathName(char const*, fname_t*, char const**)+0x188>
    badc:	cmp	r4, r3
    bade:	beq.n	bb0c <FatFile::parsePathName(char const*, fname_t*, char const**)+0x188>
      is83 = false;
    bae0:	mov.w	lr, #0
  // Not 8.3 if leading dot or space.
  is83 = !si;

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
  for (; si < len; si++) {
    bae4:	adds	r3, #1
    bae6:	cmp	r3, r5
    bae8:	blt.n	bad2 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x14e>
      if (i < 7) {
        fname->seqPos = i;
      }
    }
  }
  if (fname->sfn[0] == ' ') {
    baea:	ldrb	r3, [r1, #13]
    baec:	cmp	r3, #32
    baee:	beq.n	b9f6 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x72>
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (is83) {
    baf0:	cmp.w	lr, #0
    baf4:	beq.n	bba6 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x222>
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
    baf6:	tst.w	sl, r9
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
    bafa:	mov.w	r0, #1
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (is83) {
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
    bafe:	it	ne
    bb00:	movne.w	r9, #2
    bb04:	strb.w	r9, [r1]
    bb08:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  /** Check for a legal 8.3 character.
   * \param[in] c Character to be checked.
   * \return true for a legal 8.3 character.
   */
  static bool legal83Char(uint8_t c) {
    if (c == '"' || c == '|') {
    bb0c:	cmp	r2, #34	; 0x22
    bb0e:	beq.n	bb20 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x19c>
    bb10:	cmp	r2, #124	; 0x7c
    bb12:	beq.n	bb20 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x19c>
      return false;
    }
    // *+,./
    if (0X2A <= c && c <= 0X2F && c != 0X2D) {
    bb14:	sub.w	r7, r2, #42	; 0x2a
    bb18:	cmp	r7, #5
    bb1a:	bhi.n	bb46 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x1c2>
    bb1c:	cmp	r2, #45	; 0x2d
    bb1e:	beq.n	bb46 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x1c2>
    c = path[si];
    if (c == ' ' || (c == '.' && dot != si)) {
      is83 = false;
      continue;
    }
    if (!legal83Char(c) && si != dot) {
    bb20:	cmp	r4, r3
    bb22:	beq.n	bb5e <FatFile::parsePathName(char const*, fname_t*, char const**)+0x1da>
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
    bb24:	cmp	r6, ip
    bb26:	ite	ls
    bb28:	movls	r2, #0
    bb2a:	movhi	r2, #1
    bb2c:	cbnz	r2, bb98 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x214>
    if (c == ' ' || (c == '.' && dot != si)) {
      is83 = false;
      continue;
    }
    if (!legal83Char(c) && si != dot) {
      is83 = false;
    bb2e:	mov	lr, r2
      c = '_';
    bb30:	movs	r2, #95	; 0x5f
        c += 'A' - 'a';
        lc |= bit;
      } else if ('A' <= c && c <= 'Z') {
        uc |= bit;
      }
      fname->sfn[i++] = c;
    bb32:	adds	r7, r6, #1
    bb34:	add.w	fp, r1, r6
    bb38:	uxtb	r6, r7
    bb3a:	strb.w	r2, [fp, #13]
      if (i < 7) {
    bb3e:	cmp	r6, #6
    bb40:	bhi.n	bae4 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x160>
        fname->seqPos = i;
    bb42:	strb	r6, [r1, #12]
    bb44:	b.n	bae4 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x160>
      return false;
    }
    // :;<=>?
    if (0X3A <= c && c <= 0X3F) {
    bb46:	sub.w	r7, r2, #58	; 0x3a
    bb4a:	cmp	r7, #5
    bb4c:	bls.n	bb20 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x19c>
      return false;
    }
    // [\]
    if (0X5B <= c && c <= 0X5D) {
    bb4e:	sub.w	r7, r2, #91	; 0x5b
    bb52:	cmp	r7, #2
    bb54:	bls.n	bb20 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x19c>
    c = path[si];
    if (c == ' ' || (c == '.' && dot != si)) {
      is83 = false;
      continue;
    }
    if (!legal83Char(c) && si != dot) {
    bb56:	sub.w	r7, r2, #33	; 0x21
    bb5a:	cmp	r7, #93	; 0x5d
    bb5c:	bhi.n	bb20 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x19c>
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
    bb5e:	cmp	r4, r3
    bb60:	beq.n	bb78 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x1f4>
    bb62:	cmp	r6, ip
    bb64:	bhi.n	bb78 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x1f4>
      si = dot;
      in = 10;  // Max index for full 8.3 name.
      i = 8;    // Place for extension.
      bit = FAT_CASE_LC_EXT;  // bit for extension.
    } else {
      if ('a' <= c && c <= 'z') {
    bb66:	sub.w	r7, r2, #97	; 0x61
    bb6a:	cmp	r7, #25
    bb6c:	bhi.n	bbc8 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x244>
        c += 'A' - 'a';
    bb6e:	subs	r2, #32
        lc |= bit;
    bb70:	orr.w	r9, r8, r9
      in = 10;  // Max index for full 8.3 name.
      i = 8;    // Place for extension.
      bit = FAT_CASE_LC_EXT;  // bit for extension.
    } else {
      if ('a' <= c && c <= 'z') {
        c += 'A' - 'a';
    bb74:	uxtb	r2, r2
    bb76:	b.n	bb32 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x1ae>
    if (!legal83Char(c) && si != dot) {
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
      if (in == 10) {
    bb78:	cmp.w	ip, #10
    bb7c:	beq.n	bb9e <FatFile::parsePathName(char const*, fname_t*, char const**)+0x21a>
        // Done - extension longer than three characters.
        is83 = false;
        break;
      }
      if (si != dot) {
    bb7e:	cmp	r4, r3
    bb80:	beq.n	bbba <FatFile::parsePathName(char const*, fname_t*, char const**)+0x236>
        is83 = false;
      }
      // Break if no dot and base-name is longer than eight characters.
      if (si > dot) {
    bb82:	cmp	r4, r3
    bb84:	blt.n	bb9e <FatFile::parsePathName(char const*, fname_t*, char const**)+0x21a>
    bb86:	mov	r3, r4
        break;
      }
      si = dot;
      in = 10;  // Max index for full 8.3 name.
    bb88:	mov.w	ip, #10
      i = 8;    // Place for extension.
    bb8c:	movs	r6, #8
      bit = FAT_CASE_LC_EXT;  // bit for extension.
    bb8e:	mov.w	r8, #16
        // Done - extension longer than three characters.
        is83 = false;
        break;
      }
      if (si != dot) {
        is83 = false;
    bb92:	mov.w	lr, #0
    bb96:	b.n	bae4 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x160>
    if (!legal83Char(c) && si != dot) {
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
      if (in == 10) {
    bb98:	cmp.w	ip, #10
    bb9c:	bne.n	bb82 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x1fe>
      if (i < 7) {
        fname->seqPos = i;
      }
    }
  }
  if (fname->sfn[0] == ' ') {
    bb9e:	ldrb	r3, [r1, #13]
    bba0:	cmp	r3, #32
    bba2:	beq.w	b9f6 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x72>

  if (is83) {
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
    bba6:	ldrb	r3, [r1, #12]
  }

  if (is83) {
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    bba8:	movs	r0, #1
    fname->sfn[fname->seqPos] = '~';
    bbaa:	movs	r4, #126	; 0x7e
    fname->sfn[fname->seqPos + 1] = '1';
    bbac:	movs	r2, #49	; 0x31

  if (is83) {
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
    bbae:	add	r3, r1
  }

  if (is83) {
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    bbb0:	strb	r0, [r1, #0]
    fname->sfn[fname->seqPos] = '~';
    bbb2:	strb	r4, [r3, #13]
    fname->sfn[fname->seqPos + 1] = '1';
    bbb4:	strb	r2, [r3, #14]
    bbb6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    bbba:	mov	r3, r4
      // Break if no dot and base-name is longer than eight characters.
      if (si > dot) {
        break;
      }
      si = dot;
      in = 10;  // Max index for full 8.3 name.
    bbbc:	mov.w	ip, #10
      i = 8;    // Place for extension.
    bbc0:	movs	r6, #8
      bit = FAT_CASE_LC_EXT;  // bit for extension.
    bbc2:	mov.w	r8, #16
    bbc6:	b.n	bae4 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x160>
    } else {
      if ('a' <= c && c <= 'z') {
        c += 'A' - 'a';
        lc |= bit;
      } else if ('A' <= c && c <= 'Z') {
    bbc8:	sub.w	r7, r2, #65	; 0x41
    bbcc:	cmp	r7, #25
    bbce:	bhi.n	bb32 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x1ae>
        uc |= bit;
    bbd0:	orr.w	sl, r8, sl
    bbd4:	b.n	bb32 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x1ae>
  // Blank file short name.
  for (uint8_t k = 0; k < 11; k++) {
    fname->sfn[k] = ' ';
  }
  // skip leading spaces and dots.
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
    bbd6:	mov.w	lr, #1
    bbda:	movs	r3, #0
    bbdc:	b.n	baa0 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x11c>
      goto fail;
    }
  }
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
  *ptr = &path[end];
    bbde:	str.w	r8, [r2]
    bbe2:	b.n	ba36 <FatFile::parsePathName(char const*, fname_t*, char const**)+0xb2>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
    bbe4:	cmp	r3, #47	; 0x2f
  *ptr = &path[end];
    bbe6:	mov.w	r7, #0
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
    bbea:	beq.n	bbf0 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x26c>
    bbec:	cmp	r3, #32
    bbee:	bne.n	bbf4 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x270>
  while (*path == ' ') {
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    bbf0:	mov	r5, r7
    bbf2:	b.n	ba20 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x9c>
      goto fail;
    }
  }
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
  *ptr = &path[end];
    bbf4:	str	r0, [r2, #0]
    bbf6:	mov.w	r4, #4294967295
    bbfa:	mov	r5, r7
    bbfc:	b.n	ba6a <FatFile::parsePathName(char const*, fname_t*, char const**)+0xe6>
  // Not 8.3 if leading dot or space.
  is83 = !si;

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
  for (; si < len; si++) {
    bbfe:	mov	sl, r9
    bc00:	b.n	baea <FatFile::parsePathName(char const*, fname_t*, char const**)+0x166>
    bc02:	nop
    bc04:	.word	0x05000101

0000bc08 <FatFile::remove()>:

 fail:
  return 0;
}
//------------------------------------------------------------------------------
bool FatFile::remove() {
    bc08:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  FatFile dirFile;
  DirFat_t* dir;
  DirLfn_t* ldir;

  // Cant' remove not open for write.
  if (!isWritable()) {
    bc0c:	ldrb	r2, [r0, #2]

 fail:
  return 0;
}
//------------------------------------------------------------------------------
bool FatFile::remove() {
    bc0e:	sub	sp, #40	; 0x28
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() {}
    bc10:	movs	r3, #0
  FatFile dirFile;
  DirFat_t* dir;
  DirLfn_t* ldir;

  // Cant' remove not open for write.
  if (!isWritable()) {
    bc12:	lsls	r2, r2, #30
    bc14:	strb.w	r3, [sp, #4]
    bc18:	strb.w	r3, [sp, #5]
    bc1c:	strb.w	r3, [sp, #6]
    bc20:	bpl.n	bc68 <FatFile::remove()+0x60>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Free any clusters.
  if (m_firstCluster && !m_vol->freeChain(m_firstCluster)) {
    bc22:	ldr	r1, [r0, #32]
    bc24:	mov	r5, r0
    bc26:	cbnz	r1, bc72 <FatFile::remove()+0x6a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Cache directory entry.
  dir = cacheDirEntry(FsCache::CACHE_FOR_WRITE);
    bc28:	movs	r1, #1
    bc2a:	mov	r0, r5
    bc2c:	bl	a7d0 <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    bc30:	cbz	r0, bc68 <FatFile::remove()+0x60>
    bc32:	subs	r1, r0, #1
    bc34:	add.w	r7, r0, #10
#include "FatFile.h"
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
    bc38:	movs	r4, #0
  for (uint8_t i = 0; i < 11; i++) {
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
    bc3a:	lsrs	r2, r4, #1
    bc3c:	ldrb.w	r6, [r1, #1]!
    bc40:	orr.w	r3, r2, r4, lsl #7
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
    bc44:	cmp	r7, r1
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
    bc46:	uxtab	r3, r6, r3
    bc4a:	uxtb	r4, r3
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
    bc4c:	bne.n	bc3a <FatFile::remove()+0x32>
    goto fail;
  }
  checksum = lfnChecksum(dir->name);

  // Mark entry deleted.
  dir->name[0] = FAT_NAME_DELETED;
    bc4e:	mov.w	r8, #229	; 0xe5

  // Set this file closed.
  m_attributes = FILE_ATTR_CLOSED;
    bc52:	movs	r3, #0
    goto fail;
  }
  checksum = lfnChecksum(dir->name);

  // Mark entry deleted.
  dir->name[0] = FAT_NAME_DELETED;
    bc54:	strb.w	r8, [r0]
  // Set this file closed.
  m_attributes = FILE_ATTR_CLOSED;
  m_flags = 0;

  // Write entry to device.
  if (!m_vol->cacheSync()) {
    bc58:	ldr	r6, [r5, #8]

  // Mark entry deleted.
  dir->name[0] = FAT_NAME_DELETED;

  // Set this file closed.
  m_attributes = FILE_ATTR_CLOSED;
    bc5a:	strb	r3, [r5, #0]
  cache_t* cacheFetchFat(uint32_t sector, uint8_t options) {
    options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    return reinterpret_cast<cache_t*>(m_fatCache.get(sector, options));
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    bc5c:	add.w	r0, r6, #36	; 0x24
  m_flags = 0;
    bc60:	strb	r3, [r5, #2]
    bc62:	bl	8de0 <FsCache::sync()>
    bc66:	cbnz	r0, bc7e <FatFile::remove()+0x76>
  }
  // Fall into fail.
  DBG_FAIL_MACRO;

 fail:
  return false;
    bc68:	movs	r6, #0
}
    bc6a:	mov	r0, r6
    bc6c:	add	sp, #40	; 0x28
    bc6e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (!isWritable()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Free any clusters.
  if (m_firstCluster && !m_vol->freeChain(m_firstCluster)) {
    bc72:	ldr	r0, [r0, #8]
    bc74:	bl	b600 <FatPartition::freeChain(unsigned long)>
    bc78:	cmp	r0, #0
    bc7a:	bne.n	bc28 <FatFile::remove()+0x20>
    bc7c:	b.n	bc68 <FatFile::remove()+0x60>
    bc7e:	add.w	r0, r6, #564	; 0x234
    bc82:	bl	8de0 <FsCache::sync()>
    bc86:	cmp	r0, #0
    bc88:	beq.n	bc68 <FatFile::remove()+0x60>
    bc8a:	ldr	r0, [r6, #0]
  }
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
  }
  bool syncDevice() {
    return m_blockDev->syncDevice();
    bc8c:	ldr	r3, [r0, #0]
    bc8e:	ldr	r3, [r3, #24]
    bc90:	blx	r3
  cache_t* cacheFetchFat(uint32_t sector, uint8_t options) {
    options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    return reinterpret_cast<cache_t*>(m_fatCache.get(sector, options));
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    bc92:	mov	r6, r0
    bc94:	cmp	r0, #0
    bc96:	beq.n	bc68 <FatFile::remove()+0x60>
  // Write entry to device.
  if (!m_vol->cacheSync()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!isLFN()) {
    bc98:	ldrb	r3, [r5, #3]
    bc9a:	cmp	r3, #0
    bc9c:	beq.n	bc6a <FatFile::remove()+0x62>
    // Done, no LFN entries.
    return true;
  }
  if (!dirFile.openCluster(this)) {
    bc9e:	mov	r1, r5
    bca0:	add	r0, sp, #4
    bca2:	bl	b860 <FatFile::openCluster(FatFile*)>
    bca6:	cmp	r0, #0
    bca8:	beq.n	bc68 <FatFile::remove()+0x60>
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    bcaa:	ldrb	r3, [r5, #3]
    bcac:	cmp	r3, #0
    bcae:	beq.n	bc68 <FatFile::remove()+0x60>
    bcb0:	movs	r7, #1
    bcb2:	b.n	bcf4 <FatFile::remove()+0xec>
    if (!dirFile.seekSet(32UL*(m_dirIndex - order))) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    ldir = reinterpret_cast<DirLfn_t*>(dirFile.readDirCache());
    bcb4:	add	r0, sp, #4
    bcb6:	bl	ad78 <FatFile::readDirCache(bool)>
  }
  if (!dirFile.openCluster(this)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    bcba:	adds	r3, r7, #1
    if (!dirFile.seekSet(32UL*(m_dirIndex - order))) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    ldir = reinterpret_cast<DirLfn_t*>(dirFile.readDirCache());
    if (!ldir) {
    bcbc:	cmp	r0, #0
    bcbe:	beq.n	bc68 <FatFile::remove()+0x60>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME ||
    bcc0:	ldrb	r2, [r0, #11]
    bcc2:	cmp	r2, #15
    bcc4:	bne.n	bc68 <FatFile::remove()+0x60>
        order != (ldir->order & 0X1F) ||
    bcc6:	ldrb	r2, [r0, #0]
    ldir = reinterpret_cast<DirLfn_t*>(dirFile.readDirCache());
    if (!ldir) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME ||
    bcc8:	and.w	r1, r2, #31
    bccc:	cmp	r7, r1
  }
  if (!dirFile.openCluster(this)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    bcce:	uxtb	r7, r3
    ldir = reinterpret_cast<DirLfn_t*>(dirFile.readDirCache());
    if (!ldir) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME ||
    bcd0:	bne.n	bc68 <FatFile::remove()+0x60>
        order != (ldir->order & 0X1F) ||
    bcd2:	ldrb	r3, [r0, #13]
    bcd4:	cmp	r3, r4
    bcd6:	bne.n	bc68 <FatFile::remove()+0x60>
        checksum != ldir->checksum) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    last = ldir->order & FAT_ORDER_LAST_LONG_ENTRY;
    ldir->order = FAT_NAME_DELETED;
    bcd8:	strb.w	r8, [r0]
    m_vol->cacheDirty();
    bcdc:	ldr	r1, [r5, #8]
    invalidate();
    return m_buffer;
  }
  /** Set current sector dirty. */
  void dirty() {
    m_status |= CACHE_STATUS_DIRTY;
    bcde:	ldrb.w	r3, [r1, #36]	; 0x24
    bce2:	orr.w	r3, r3, #1
    bce6:	strb.w	r3, [r1, #36]	; 0x24
    if (last) {
    bcea:	lsls	r3, r2, #25
    bcec:	bmi.n	bd08 <FatFile::remove()+0x100>
  }
  if (!dirFile.openCluster(this)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    bcee:	ldrb	r3, [r5, #3]
    bcf0:	cmp	r3, r7
    bcf2:	bcc.n	bc68 <FatFile::remove()+0x60>
    if (!dirFile.seekSet(32UL*(m_dirIndex - order))) {
    bcf4:	ldrh	r1, [r5, #4]
    bcf6:	add	r0, sp, #4
    bcf8:	subs	r1, r1, r7
    bcfa:	lsls	r1, r1, #5
    bcfc:	bl	affc <FatFile::seekSet(unsigned long)>
      DBG_FAIL_MACRO;
      goto fail;
    }
    ldir = reinterpret_cast<DirLfn_t*>(dirFile.readDirCache());
    bd00:	movs	r1, #0
  if (!dirFile.openCluster(this)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    if (!dirFile.seekSet(32UL*(m_dirIndex - order))) {
    bd02:	cmp	r0, #0
    bd04:	bne.n	bcb4 <FatFile::remove()+0xac>
    bd06:	b.n	bc68 <FatFile::remove()+0x60>
    }
    last = ldir->order & FAT_ORDER_LAST_LONG_ENTRY;
    ldir->order = FAT_NAME_DELETED;
    m_vol->cacheDirty();
    if (last) {
      if (!m_vol->cacheSync()) {
    bd08:	ldr	r4, [r5, #8]
    bd0a:	add.w	r0, r4, #36	; 0x24
    bd0e:	bl	8de0 <FsCache::sync()>
    bd12:	cmp	r0, #0
    bd14:	beq.n	bc68 <FatFile::remove()+0x60>
    bd16:	add.w	r0, r4, #564	; 0x234
    bd1a:	bl	8de0 <FsCache::sync()>
    bd1e:	cmp	r0, #0
    bd20:	beq.n	bc68 <FatFile::remove()+0x60>
    bd22:	ldr	r0, [r4, #0]
  }
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
  }
  bool syncDevice() {
    return m_blockDev->syncDevice();
    bd24:	ldr	r3, [r0, #0]
    bd26:	ldr	r3, [r3, #24]
    bd28:	blx	r3
  cache_t* cacheFetchFat(uint32_t sector, uint8_t options) {
    options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    return reinterpret_cast<cache_t*>(m_fatCache.get(sector, options));
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    bd2a:	cmp	r0, #0
    bd2c:	beq.n	bc68 <FatFile::remove()+0x60>
    bd2e:	b.n	bc6a <FatFile::remove()+0x62>

0000bd30 <FatFile::lfnUniqueSfn(fname_t*)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::lfnUniqueSfn(fname_t* fname) {
    bd30:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    bd34:	mov	r6, r1
    bd36:	mov	r4, r0
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;;
    bd38:	mov.w	r8, #2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
      }
    }
    fname->sfn[pos] = '~';
    bd3c:	mov.w	r9, #126	; 0x7e
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::lfnUniqueSfn(fname_t* fname) {
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;;
    bd40:	ldrb	r7, [r1, #12]
        goto fail;
      }
      if (dir->name[0] == FAT_NAME_FREE) {
        goto done;
      }
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    bd42:	add.w	r5, r1, #13
  for (uint8_t seq = 2; seq < 100; seq++) {
    if (seq < FIRST_HASH_SEQ) {
      fname->sfn[pos + 1] = '0' + seq;
    } else {
      DBG_PRINT_IF(seq > FIRST_HASH_SEQ);
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
    bd46:	ldr	r0, [r6, #4]
    bd48:	ldr	r1, [r6, #8]
    bd4a:	add.w	r3, r8, r0
    bd4e:	uxth	r3, r3
}
//------------------------------------------------------------------------------
// Daniel Bernstein University of Illinois at Chicago.
// Original had + instead of ^
static uint16_t Bernstein(uint16_t hash, const char *str, size_t len) {
  for (size_t i = 0; i < len; i++) {
    bd50:	cbz	r0, bd66 <FatFile::lfnUniqueSfn(fname_t*)+0x36>
    bd52:	add	r0, r1
    // hash = hash * 33 ^ str[i];
    hash = ((hash << 5) + hash) ^ str[i];
    bd54:	ldrb.w	r2, [r1], #1
    bd58:	add.w	r3, r3, r3, lsl #5
}
//------------------------------------------------------------------------------
// Daniel Bernstein University of Illinois at Chicago.
// Original had + instead of ^
static uint16_t Bernstein(uint16_t hash, const char *str, size_t len) {
  for (size_t i = 0; i < len; i++) {
    bd5c:	cmp	r0, r1
    // hash = hash * 33 ^ str[i];
    hash = ((hash << 5) + hash) ^ str[i];
    bd5e:	eor.w	r3, r3, r2
    bd62:	uxth	r3, r3
}
//------------------------------------------------------------------------------
// Daniel Bernstein University of Illinois at Chicago.
// Original had + instead of ^
static uint16_t Bernstein(uint16_t hash, const char *str, size_t len) {
  for (size_t i = 0; i < len; i++) {
    bd64:	bne.n	bd54 <FatFile::lfnUniqueSfn(fname_t*)+0x24>
    bd66:	cmp	r7, #3
    bd68:	it	cs
    bd6a:	movcs	r7, #3
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
    bd6c:	adds	r2, r7, #4
    bd6e:	uxtb	r2, r2
        uint8_t h = hex & 0XF;
    bd70:	and.w	r1, r3, #15
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
    bd74:	add.w	lr, r2, #4294967295
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
    bd78:	lsrs	r3, r3, #4
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
    bd7a:	cmp	r1, #9
    bd7c:	add.w	r0, r1, #55	; 0x37
    bd80:	it	ls
    bd82:	addls.w	r0, r1, #48	; 0x30
    bd86:	adds	r1, r6, r2
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
    bd88:	uxtb.w	r2, lr
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
    bd8c:	strb	r0, [r1, #13]
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
    bd8e:	cmp	r7, r2
    bd90:	bcc.n	bd70 <FatFile::lfnUniqueSfn(fname_t*)+0x40>
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
      }
    }
    fname->sfn[pos] = '~';
    bd92:	adds	r3, r6, r7
   * \return true for success or false for failure.
   */
  bool rename(FatFile* dirFile, const char* newPath);
  /** Set the file's current position to zero. */
  void rewind() {
    seekSet(0);
    bd94:	movs	r1, #0
    bd96:	mov	r0, r4
    bd98:	strb.w	r9, [r3, #13]
    bd9c:	bl	affc <FatFile::seekSet(unsigned long)>
    rewind();
    while (1) {
      dir = readDirCache(true);
    bda0:	movs	r1, #1
    bda2:	mov	r0, r4
    bda4:	bl	ad78 <FatFile::readDirCache(bool)>
        goto fail;
      }
      if (dir->name[0] == FAT_NAME_FREE) {
        goto done;
      }
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    bda8:	movs	r2, #11
    }
    fname->sfn[pos] = '~';
    rewind();
    while (1) {
      dir = readDirCache(true);
      if (!dir) {
    bdaa:	mov	r3, r0
    bdac:	cbz	r0, bddc <FatFile::lfnUniqueSfn(fname_t*)+0xac>
          goto done;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (dir->name[0] == FAT_NAME_FREE) {
    bdae:	ldrb.w	lr, [r0]
        goto done;
      }
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    bdb2:	mov	r1, r0
    bdb4:	mov	r0, r5
          goto done;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (dir->name[0] == FAT_NAME_FREE) {
    bdb6:	cmp.w	lr, #0
    bdba:	beq.n	bde8 <FatFile::lfnUniqueSfn(fname_t*)+0xb8>
        goto done;
      }
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    bdbc:	ldrb	r3, [r3, #11]
    bdbe:	lsls	r3, r3, #28
    bdc0:	bmi.n	bda0 <FatFile::lfnUniqueSfn(fname_t*)+0x70>
    bdc2:	bl	10ad0 <memcmp>
    bdc6:	cmp	r0, #0
    bdc8:	bne.n	bda0 <FatFile::lfnUniqueSfn(fname_t*)+0x70>
    bdca:	add.w	r8, r8, #1
    bdce:	uxth.w	r8, r8
  uint16_t hex;

  DBG_HALT_IF(!(fname->flags & FNAME_FLAG_LOST_CHARS));
  DBG_HALT_IF(fname->sfn[pos] != '~' && fname->sfn[pos + 1] != '1');

  for (uint8_t seq = 2; seq < 100; seq++) {
    bdd2:	cmp.w	r8, #100	; 0x64
    bdd6:	bne.n	bd46 <FatFile::lfnUniqueSfn(fname_t*)+0x16>
 fail:
  return false;

 done:
  return true;
}
    bdd8:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    fname->sfn[pos] = '~';
    rewind();
    while (1) {
      dir = readDirCache(true);
      if (!dir) {
        if (!getError()) {
    bddc:	ldrb	r0, [r4, #1]
    bdde:	clz	r0, r0
    bde2:	lsrs	r0, r0, #5
    bde4:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

 fail:
  return false;

 done:
  return true;
    bde8:	movs	r0, #1
    bdea:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    bdee:	nop

0000bdf0 <FatFile::open(FatFile*, fname_t*, int)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
    bdf0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint16_t time;
  DirFat_t* dir;
  DirLfn_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
    bdf4:	ldrb	r4, [r1, #0]

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
    bdf6:	sub	sp, #52	; 0x34
  uint16_t time;
  DirFat_t* dir;
  DirLfn_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
    bdf8:	tst.w	r4, #112	; 0x70
    bdfc:	beq.n	be02 <FatFile::open(FatFile*, fname_t*, int)+0x12>
    bdfe:	ldrb	r4, [r0, #0]
    be00:	cbz	r4, be0a <FatFile::open(FatFile*, fname_t*, int)+0x1a>
    goto fail;
  }
  return true;

 fail:
  return false;
    be02:	movs	r0, #0
}
    be04:	add	sp, #52	; 0x34
    be06:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (!dirFile->isDir() || isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
    be0a:	ldrb	r4, [r2, #0]
  uint16_t curIndex;
  uint16_t date;
  uint16_t time;
  DirFat_t* dir;
  DirLfn_t* ldir;
  size_t len = fname->len;
    be0c:	ldr.w	sl, [r2, #4]
  if (!dirFile->isDir() || isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
    be10:	lsls	r4, r4, #30
    be12:	bne.n	bea6 <FatFile::open(FatFile*, fname_t*, int)+0xb6>
    be14:	movs	r7, #1
  uint8_t freeNeed;
  uint8_t freeFound = 0;
  uint8_t order = 0;
  uint8_t checksum = 0;
  uint8_t ms10;
  uint16_t freeIndex = 0;
    be16:	mov.w	r9, #0
    be1a:	mov	r6, r1
    be1c:	str	r3, [sp, #28]
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
    be1e:	add.w	r3, r2, #13
    be22:	str	r0, [sp, #36]	; 0x24
    be24:	mov	r1, r9
    be26:	mov	r0, r6
    be28:	mov	fp, r2
    be2a:	str	r3, [sp, #16]
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
    be2c:	mov	r4, r9
  uint8_t order = 0;
  uint8_t checksum = 0;
    be2e:	str.w	r9, [sp, #24]
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
    be32:	mov	r8, r9
  uint8_t freeNeed;
  uint8_t freeFound = 0;
  uint8_t order = 0;
    be34:	str.w	r9, [sp, #12]
 fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
    be38:	str.w	r9, [sp, #20]
    be3c:	bl	affc <FatFile::seekSet(unsigned long)>
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
    be40:	ldr	r5, [r6, #20]
    dir = dirFile->readDirCache(true);
    be42:	movs	r1, #1
    be44:	mov	r0, r6
    be46:	bl	ad78 <FatFile::readDirCache(bool)>
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
    be4a:	ubfx	r5, r5, #5, #16
    dir = dirFile->readDirCache(true);
    if (!dir) {
    be4e:	mov	r3, r0
    be50:	cmp	r0, #0
    be52:	beq.w	bfbe <FatFile::open(FatFile*, fname_t*, int)+0x1ce>
        goto fail;
      }
      // At EOF
      goto create;
    }
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == FAT_NAME_FREE) {
    be56:	ldrb	r2, [r0, #0]
    be58:	sub.w	r1, r2, #229	; 0xe5
    be5c:	clz	r1, r1
    be60:	lsrs	r1, r1, #5
    be62:	cmp	r2, #0
    be64:	beq.n	bed2 <FatFile::open(FatFile*, fname_t*, int)+0xe2>
    be66:	cmp	r1, #0
    be68:	bne.n	bed2 <FatFile::open(FatFile*, fname_t*, int)+0xe2>
      if (dir->name[0] == FAT_NAME_FREE) {
        goto create;
      }
    } else {
      if (freeFound < freeNeed) {
        freeFound = 0;
    be6a:	cmp	r4, r7
    be6c:	it	cc
    be6e:	movcc	r4, #0
      }
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == '.') {
    be70:	cmp	r2, #46	; 0x2e
    be72:	beq.n	becc <FatFile::open(FatFile*, fname_t*, int)+0xdc>
    be74:	cbnz	r1, becc <FatFile::open(FatFile*, fname_t*, int)+0xdc>
    be76:	ldrb	r0, [r3, #11]
      lfnOrd = 0;
    } else if (isLongName(dir)) {
    be78:	cmp	r0, #15
    be7a:	beq.n	bf38 <FatFile::open(FatFile*, fname_t*, int)+0x148>
          // Not found.
          lfnOrd = 0;
          break;
        }
      }
    } else if (isFileOrSubdir(dir)) {
    be7c:	lsls	r2, r0, #28
    be7e:	bmi.n	becc <FatFile::open(FatFile*, fname_t*, int)+0xdc>
      if (lfnOrd) {
    be80:	cmp.w	r8, #0
    be84:	bne.w	c144 <FatFile::open(FatFile*, fname_t*, int)+0x354>
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
    be88:	mov	r0, r3
    be8a:	movs	r2, #11
    be8c:	ldr	r1, [sp, #16]
    be8e:	bl	10ad0 <memcmp>
    be92:	cmp	r0, #0
    be94:	bne.n	be40 <FatFile::open(FatFile*, fname_t*, int)+0x50>
        if (!(fname->flags & FNAME_FLAG_LOST_CHARS)) {
    be96:	ldrb.w	r3, [fp]
    be9a:	lsls	r0, r3, #31
    be9c:	bpl.w	c16e <FatFile::open(FatFile*, fname_t*, int)+0x37e>
          goto found;
        }
        fnameFound = true;
    bea0:	movs	r3, #1
    bea2:	str	r3, [sp, #20]
    bea4:	b.n	be40 <FatFile::open(FatFile*, fname_t*, int)+0x50>
  if (!dirFile->isDir() || isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
    bea6:	add.w	r4, sl, #12
    beaa:	ldr	r7, [pc, #728]	; (c184 <FatFile::open(FatFile*, fname_t*, int)+0x394>)
    beac:	umull	r4, r7, r7, r4
    beb0:	lsrs	r7, r7, #2
    beb2:	adds	r7, #1
    beb4:	uxtb	r7, r7
    beb6:	b.n	be16 <FatFile::open(FatFile*, fname_t*, int)+0x26>
        if ((ldir->order & FAT_ORDER_LAST_LONG_ENTRY) == 0) {
          continue;
        }
        lfnOrd = order = ldir->order & 0X1F;
        checksum = ldir->checksum;
      } else if (ldir->order != --order || checksum != ldir->checksum) {
    beb8:	ldr	r0, [sp, #12]
    beba:	subs	r0, #1
    bebc:	uxtb	r0, r0
    bebe:	cmp	r2, r0
    bec0:	str	r0, [sp, #12]
    bec2:	bne.n	becc <FatFile::open(FatFile*, fname_t*, int)+0xdc>
    bec4:	ldrb	r2, [r3, #13]
    bec6:	ldr	r0, [sp, #24]
    bec8:	cmp	r0, r2
    beca:	beq.n	bf50 <FatFile::open(FatFile*, fname_t*, int)+0x160>
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
          // Not found.
          lfnOrd = 0;
    becc:	mov.w	r8, #0
    bed0:	b.n	be40 <FatFile::open(FatFile*, fname_t*, int)+0x50>
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
    bed2:	cmp	r4, #0
    bed4:	it	eq
    bed6:	moveq	r9, r5
    }
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == FAT_NAME_FREE) {
      if (freeFound == 0) {
        freeIndex = curIndex;
      }
      if (freeFound < freeNeed) {
    bed8:	cmp	r4, r7
    beda:	bcs.n	bee0 <FatFile::open(FatFile*, fname_t*, int)+0xf0>
        freeFound++;
    bedc:	adds	r4, #1
    bede:	uxtb	r4, r4
      }
      if (dir->name[0] == FAT_NAME_FREE) {
    bee0:	cmp	r2, #0
    bee2:	bne.n	be70 <FatFile::open(FatFile*, fname_t*, int)+0x80>
  }
  goto open;

 create:
  // don't create unless O_CREAT and write mode
  if (!(oflag & O_CREAT) || !isWriteMode(oflag)) {
    bee4:	ldr	r2, [sp, #28]
    bee6:	mov	r3, r2
    bee8:	lsls	r2, r3, #22
    beea:	bpl.n	be02 <FatFile::open(FatFile*, fname_t*, int)+0x12>
    beec:	and.w	r3, r3, #3
    bef0:	subs	r3, #1
    bef2:	cmp	r3, #1
    bef4:	bhi.n	be02 <FatFile::open(FatFile*, fname_t*, int)+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // If at EOF start in next cluster.
  if (freeFound == 0) {
    bef6:	cmp	r4, #0
    bef8:	it	eq
    befa:	moveq	r9, r5
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
    befc:	cmp	r4, r7
    befe:	bcc.n	bf08 <FatFile::open(FatFile*, fname_t*, int)+0x118>
    bf00:	b.n	bfd8 <FatFile::open(FatFile*, fname_t*, int)+0x1e8>
        goto fail;
      }
      // EOF if no error.
      break;
    }
    freeFound++;
    bf02:	uxtb	r4, r3
  // If at EOF start in next cluster.
  if (freeFound == 0) {
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
    bf04:	cmp	r7, r4
    bf06:	bls.n	bfd8 <FatFile::open(FatFile*, fname_t*, int)+0x1e8>
    dir = dirFile->readDirCache();
    bf08:	movs	r1, #0
    bf0a:	mov	r0, r6
    bf0c:	bl	ad78 <FatFile::readDirCache(bool)>
        goto fail;
      }
      // EOF if no error.
      break;
    }
    freeFound++;
    bf10:	adds	r3, r4, #1
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
    dir = dirFile->readDirCache();
    if (!dir) {
    bf12:	cmp	r0, #0
    bf14:	bne.n	bf02 <FatFile::open(FatFile*, fname_t*, int)+0x112>
      if (dirFile->getError()) {
    bf16:	ldrb	r3, [r6, #1]
    bf18:	cbz	r3, bf26 <FatFile::open(FatFile*, fname_t*, int)+0x136>
    bf1a:	b.n	be02 <FatFile::open(FatFile*, fname_t*, int)+0x12>
    bf1c:	ldr	r3, [r6, #8]
    }
    // Done if more than one sector per cluster.  Max freeNeed is 21.
    if (dirFile->m_vol->sectorsPerCluster() > 1) {
      break;
    }
    freeFound += 16;
    bf1e:	uxtb	r4, r4
    if (!dirFile->addDirCluster()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // Done if more than one sector per cluster.  Max freeNeed is 21.
    if (dirFile->m_vol->sectorsPerCluster() > 1) {
    bf20:	ldrb	r3, [r3, #4]
    bf22:	cmp	r3, #1
    bf24:	bhi.n	bfd8 <FatFile::open(FatFile*, fname_t*, int)+0x1e8>
      // EOF if no error.
      break;
    }
    freeFound++;
  }
  while (freeFound < freeNeed) {
    bf26:	cmp	r7, r4
    bf28:	bls.n	bfd8 <FatFile::open(FatFile*, fname_t*, int)+0x1e8>
    // Will fail if FAT16 root.
    if (!dirFile->addDirCluster()) {
    bf2a:	mov	r0, r6
    }
    // Done if more than one sector per cluster.  Max freeNeed is 21.
    if (dirFile->m_vol->sectorsPerCluster() > 1) {
      break;
    }
    freeFound += 16;
    bf2c:	adds	r4, #16
    }
    freeFound++;
  }
  while (freeFound < freeNeed) {
    // Will fail if FAT16 root.
    if (!dirFile->addDirCluster()) {
    bf2e:	bl	a738 <FatFile::addDirCluster()>
    bf32:	cmp	r0, #0
    bf34:	bne.n	bf1c <FatFile::open(FatFile*, fname_t*, int)+0x12c>
    bf36:	b.n	be02 <FatFile::open(FatFile*, fname_t*, int)+0x12>
    // skip empty slot or '.' or '..'
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == '.') {
      lfnOrd = 0;
    } else if (isLongName(dir)) {
      ldir = reinterpret_cast<DirLfn_t*>(dir);
      if (!lfnOrd) {
    bf38:	cmp.w	r8, #0
    bf3c:	bne.n	beb8 <FatFile::open(FatFile*, fname_t*, int)+0xc8>
        if ((ldir->order & FAT_ORDER_LAST_LONG_ENTRY) == 0) {
    bf3e:	lsls	r1, r2, #25
    bf40:	bpl.w	be40 <FatFile::open(FatFile*, fname_t*, int)+0x50>
          continue;
        }
        lfnOrd = order = ldir->order & 0X1F;
    bf44:	and.w	r8, r2, #31
        checksum = ldir->checksum;
    bf48:	ldrb	r2, [r3, #13]
      ldir = reinterpret_cast<DirLfn_t*>(dir);
      if (!lfnOrd) {
        if ((ldir->order & FAT_ORDER_LAST_LONG_ENTRY) == 0) {
          continue;
        }
        lfnOrd = order = ldir->order & 0X1F;
    bf4a:	str.w	r8, [sp, #12]
        checksum = ldir->checksum;
    bf4e:	str	r2, [sp, #24]
      } else if (ldir->order != --order || checksum != ldir->checksum) {
        lfnOrd = 0;
        continue;
      }
      size_t k = 13*(order - 1);
    bf50:	ldr	r2, [sp, #12]
    bf52:	subs	r2, #1
    bf54:	add.w	r5, r2, r2, lsl #1
    bf58:	add.w	r5, r2, r5, lsl #2
      if (k >= len) {
    bf5c:	cmp	sl, r5
        checksum = ldir->checksum;
      } else if (ldir->order != --order || checksum != ldir->checksum) {
        lfnOrd = 0;
        continue;
      }
      size_t k = 13*(order - 1);
    bf5e:	mov	r2, r5
      if (k >= len) {
    bf60:	bls.n	becc <FatFile::open(FatFile*, fname_t*, int)+0xdc>
    bf62:	add.w	r1, r5, #13
    bf66:	str.w	r8, [sp, #32]
    bf6a:	mov	r8, r1
    bf6c:	b.n	bf9a <FatFile::open(FatFile*, fname_t*, int)+0x1aa>
}
#if USE_LONG_FILE_NAMES
//------------------------------------------------------------------------------
// Saves about 90 bytes of flash on 328 over tolower().
inline char lfnToLower(char c) {
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
    bf6e:	cmp.w	ip, #25
    bf72:	add.w	r0, r1, #32
    bf76:	it	ls
    bf78:	uxtbls	r1, r0
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
    bf7a:	ldr.w	r0, [fp, #8]
    bf7e:	ldrb	r2, [r0, r2]
}
#if USE_LONG_FILE_NAMES
//------------------------------------------------------------------------------
// Saves about 90 bytes of flash on 328 over tolower().
inline char lfnToLower(char c) {
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
    bf80:	sub.w	r0, r2, #65	; 0x41
    bf84:	add.w	ip, r2, #32
    bf88:	cmp	r0, #25
    bf8a:	it	ls
    bf8c:	uxtbls.w	r2, ip
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
    bf90:	cmp	r1, r2
    bf92:	bne.n	becc <FatFile::open(FatFile*, fname_t*, int)+0xdc>
      if (k >= len) {
        // Not found.
        lfnOrd = 0;
        continue;
      }
      for (uint8_t i = 0; i < 13; i++) {
    bf94:	cmp	lr, r8
    bf96:	mov	r2, lr
    bf98:	beq.n	bfd2 <FatFile::open(FatFile*, fname_t*, int)+0x1e2>
        uint16_t u = lfnGetChar(ldir, i);
    bf9a:	subs	r1, r2, r5
    bf9c:	mov	r0, r3
    bf9e:	uxtb	r1, r1
    bfa0:	bl	b810 <lfnGetChar(DirLfn_t*, unsigned char)>
        if (k == len) {
    bfa4:	cmp	sl, r2
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
    bfa6:	add.w	lr, r2, #1
    bfaa:	uxtb	r1, r0
        lfnOrd = 0;
        continue;
      }
      for (uint8_t i = 0; i < 13; i++) {
        uint16_t u = lfnGetChar(ldir, i);
        if (k == len) {
    bfac:	beq.w	c136 <FatFile::open(FatFile*, fname_t*, int)+0x346>
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
    bfb0:	cmp	r0, #255	; 0xff
}
#if USE_LONG_FILE_NAMES
//------------------------------------------------------------------------------
// Saves about 90 bytes of flash on 328 over tolower().
inline char lfnToLower(char c) {
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
    bfb2:	sub.w	ip, r1, #65	; 0x41
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
    bfb6:	bls.n	bf6e <FatFile::open(FatFile*, fname_t*, int)+0x17e>
          // Not found.
          lfnOrd = 0;
    bfb8:	mov.w	r8, #0
    bfbc:	b.n	be40 <FatFile::open(FatFile*, fname_t*, int)+0x50>
  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
    dir = dirFile->readDirCache(true);
    if (!dir) {
      if (dirFile->getError()) {
    bfbe:	ldrb	r3, [r6, #1]
    bfc0:	cmp	r3, #0
    bfc2:	bne.w	be02 <FatFile::open(FatFile*, fname_t*, int)+0x12>
  }
  goto open;

 create:
  // don't create unless O_CREAT and write mode
  if (!(oflag & O_CREAT) || !isWriteMode(oflag)) {
    bfc6:	ldr	r2, [sp, #28]
    bfc8:	mov	r3, r2
    bfca:	lsls	r2, r3, #22
    bfcc:	bpl.w	be02 <FatFile::open(FatFile*, fname_t*, int)+0x12>
    bfd0:	b.n	beec <FatFile::open(FatFile*, fname_t*, int)+0xfc>
    bfd2:	ldr.w	r8, [sp, #32]
    bfd6:	b.n	be40 <FatFile::open(FatFile*, fname_t*, int)+0x50>
    if (dirFile->m_vol->sectorsPerCluster() > 1) {
      break;
    }
    freeFound += 16;
  }
  if (fnameFound) {
    bfd8:	ldr	r3, [sp, #20]
    bfda:	cbz	r3, bfea <FatFile::open(FatFile*, fname_t*, int)+0x1fa>
    if (!dirFile->lfnUniqueSfn(fname)) {
    bfdc:	mov	r1, fp
    bfde:	mov	r0, r6
    bfe0:	bl	bd30 <FatFile::lfnUniqueSfn(fname_t*)>
    bfe4:	cmp	r0, #0
    bfe6:	beq.w	be02 <FatFile::open(FatFile*, fname_t*, int)+0x12>
      goto fail;
    }
  }
  if (!dirFile->seekSet(32UL*freeIndex)) {
    bfea:	mov.w	r1, r9, lsl #5
    bfee:	mov	r0, r6
    bff0:	bl	affc <FatFile::seekSet(unsigned long)>
    bff4:	cmp	r0, #0
    bff6:	beq.w	be02 <FatFile::open(FatFile*, fname_t*, int)+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
    bffa:	subs	r7, #1
  for (order = lfnOrd ; order ; order--) {
    bffc:	ands.w	r8, r7, #255	; 0xff
    c000:	beq.n	c0b4 <FatFile::open(FatFile*, fname_t*, int)+0x2c4>
    if (!ldir) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    c002:	orr.w	r3, r8, #64	; 0x40
  if (!dirFile->seekSet(32UL*freeIndex)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
  for (order = lfnOrd ; order ; order--) {
    c006:	mov	r7, r8
    ldir = reinterpret_cast<DirLfn_t*>(dirFile->readDirCache());
    c008:	movs	r4, #0
    if (!ldir) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    c00a:	uxtb	r3, r3
    c00c:	str	r3, [sp, #12]
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
  for (order = lfnOrd ; order ; order--) {
    ldir = reinterpret_cast<DirLfn_t*>(dirFile->readDirCache());
    c00e:	movs	r1, #0
    c010:	mov	r0, r6
    c012:	bl	ad78 <FatFile::readDirCache(bool)>
    if (!ldir) {
    c016:	cmp	r0, #0
    c018:	beq.w	be02 <FatFile::open(FatFile*, fname_t*, int)+0x12>
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
    c01c:	ldr.w	ip, [r6, #8]
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    c020:	cmp	r8, r7
    c022:	ldr	r3, [sp, #12]
    ldir->attributes = FAT_ATTRIB_LONG_NAME;
    c024:	mov.w	r9, #15
    c028:	ldrb.w	lr, [ip, #36]	; 0x24
    if (!ldir) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    c02c:	ite	ne
    c02e:	movne	r2, r7
    c030:	moveq	r2, r3
    c032:	add.w	r1, fp, #12
    c036:	orr.w	lr, lr, #1
    c03a:	add.w	r5, fp, #23
#include "FatFile.h"
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
    c03e:	movs	r3, #0
    c040:	strb.w	lr, [ip, #36]	; 0x24
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    ldir->attributes = FAT_ATTRIB_LONG_NAME;
    ldir->mustBeZero1 = 0;
    c044:	strb	r4, [r0, #12]
    if (!ldir) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    c046:	strb	r2, [r0, #0]
    ldir->attributes = FAT_ATTRIB_LONG_NAME;
    c048:	strb.w	r9, [r0, #11]
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
    c04c:	mov.w	lr, r3, lsr #1
    c050:	ldrb.w	ip, [r1, #1]!
    c054:	orr.w	r3, lr, r3, lsl #7
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
    c058:	cmp	r1, r5
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
    c05a:	uxtab	r3, ip, r3
    c05e:	uxtb	r3, r3
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
    c060:	bne.n	c04c <FatFile::open(FatFile*, fname_t*, int)+0x25c>
    setLe16(ldir->unicode3 + 2*i - 22, c);
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(DirLfn_t* ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->order & 0X1F) - 1);
    c062:	and.w	r2, r2, #31
    }
    dirFile->m_vol->cacheDirty();
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    ldir->attributes = FAT_ATTRIB_LONG_NAME;
    ldir->mustBeZero1 = 0;
    ldir->checksum = lfnChecksum(fname->sfn);
    c066:	strb	r3, [r0, #13]
    c068:	adds	r1, r0, #4
    setLe16(ldir->mustBeZero2, 0);
    lfnPutName(ldir, fname->lfn, len);
    c06a:	ldr.w	r5, [fp, #8]
    setLe16(ldir->unicode3 + 2*i - 22, c);
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(DirLfn_t* ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->order & 0X1F) - 1);
    c06e:	subs	r2, #1
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    c070:	strh	r4, [r0, #26]
  for (uint8_t i = 0; i < 13; i++, k++) {
    c072:	movs	r3, #0
    setLe16(ldir->unicode3 + 2*i - 22, c);
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(DirLfn_t* ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->order & 0X1F) - 1);
    c074:	add.w	r0, r2, r2, lsl #1
    c078:	add.w	r2, r2, r0, lsl #2
    c07c:	b.n	c092 <FatFile::open(FatFile*, fname_t*, int)+0x2a2>
 * \param[in] c  The 16-bit character.
 */
static void lfnPutChar(DirLfn_t* ldir, uint8_t i, uint16_t c) {
  if (i < 5) {
    setLe16(ldir->unicode1 + 2*i, c);
  } else if (i < 11) {
    c07e:	cmp	r3, #10
    c080:	ite	ls
    c082:	strhls	r0, [r1, #0]
    c084:	strhhi	r0, [r1, #2]
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(DirLfn_t* ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->order & 0X1F) - 1);
  for (uint8_t i = 0; i < 13; i++, k++) {
    c086:	adds	r3, #1
    c088:	adds	r2, #1
    c08a:	adds	r1, #2
    c08c:	uxtb	r3, r3
    c08e:	cmp	r3, #13
    c090:	beq.n	c0ac <FatFile::open(FatFile*, fname_t*, int)+0x2bc>
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
    c092:	cmp	sl, r2
    c094:	ite	ne
    c096:	movne.w	r0, #4294967295
    c09a:	moveq	r0, #0
    c09c:	ite	hi
    c09e:	ldrbhi	r0, [r5, r2]
    c0a0:	uxthls	r0, r0
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \param[in] c  The 16-bit character.
 */
static void lfnPutChar(DirLfn_t* ldir, uint8_t i, uint16_t c) {
  if (i < 5) {
    c0a2:	cmp	r3, #4
    c0a4:	bhi.n	c07e <FatFile::open(FatFile*, fname_t*, int)+0x28e>
    c0a6:	strh.w	r0, [r1, #-3]
    c0aa:	b.n	c086 <FatFile::open(FatFile*, fname_t*, int)+0x296>
  if (!dirFile->seekSet(32UL*freeIndex)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
  for (order = lfnOrd ; order ; order--) {
    c0ac:	subs	r7, #1
    c0ae:	ands.w	r7, r7, #255	; 0xff
    c0b2:	bne.n	c00e <FatFile::open(FatFile*, fname_t*, int)+0x21e>
    ldir->mustBeZero1 = 0;
    ldir->checksum = lfnChecksum(fname->sfn);
    setLe16(ldir->mustBeZero2, 0);
    lfnPutName(ldir, fname->lfn, len);
  }
  curIndex = dirFile->m_curPosition/32;
    c0b4:	ldr	r5, [r6, #20]
  dir = dirFile->readDirCache();
    c0b6:	movs	r1, #0
    c0b8:	mov	r0, r6
    c0ba:	bl	ad78 <FatFile::readDirCache(bool)>
    ldir->mustBeZero1 = 0;
    ldir->checksum = lfnChecksum(fname->sfn);
    setLe16(ldir->mustBeZero2, 0);
    lfnPutName(ldir, fname->lfn, len);
  }
  curIndex = dirFile->m_curPosition/32;
    c0be:	ubfx	r5, r5, #5, #16
  dir = dirFile->readDirCache();
  if (!dir) {
    c0c2:	mov	r4, r0
    c0c4:	cmp	r0, #0
    c0c6:	beq.w	be02 <FatFile::open(FatFile*, fname_t*, int)+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // initialize as empty file
  memset(dir, 0, sizeof(DirFat_t));
    c0ca:	movs	r2, #32
    c0cc:	movs	r1, #0
    c0ce:	bl	10bfc <memset>
  memcpy(dir->name, fname->sfn, 11);
    c0d2:	mov	r3, fp

  // Set base-name and extension lower case bits.
  dir->caseFlags =  (FAT_CASE_LC_BASE | FAT_CASE_LC_EXT) & fname->flags;

  // Set timestamps.
  if (FsDateTime::callback) {
    c0d4:	ldr	r2, [pc, #176]	; (c188 <FatFile::open(FatFile*, fname_t*, int)+0x398>)
    DBG_FAIL_MACRO;
    goto fail;
  }
  // initialize as empty file
  memset(dir, 0, sizeof(DirFat_t));
  memcpy(dir->name, fname->sfn, 11);
    c0d6:	ldr.w	r0, [r3, #13]!
    c0da:	ldr	r1, [r3, #4]
    c0dc:	str	r0, [r4, #0]
    c0de:	str	r1, [r4, #4]
    c0e0:	ldrh	r1, [r3, #8]
    c0e2:	ldrb	r3, [r3, #10]
    c0e4:	strh	r1, [r4, #8]
    c0e6:	strb	r3, [r4, #10]

  // Set base-name and extension lower case bits.
  dir->caseFlags =  (FAT_CASE_LC_BASE | FAT_CASE_LC_EXT) & fname->flags;
    c0e8:	ldrb.w	r3, [fp]

  // Set timestamps.
  if (FsDateTime::callback) {
    c0ec:	ldr	r7, [r2, #0]
  // initialize as empty file
  memset(dir, 0, sizeof(DirFat_t));
  memcpy(dir->name, fname->sfn, 11);

  // Set base-name and extension lower case bits.
  dir->caseFlags =  (FAT_CASE_LC_BASE | FAT_CASE_LC_EXT) & fname->flags;
    c0ee:	and.w	r3, r3, #24
    c0f2:	strb	r3, [r4, #12]

  // Set timestamps.
  if (FsDateTime::callback) {
    c0f4:	cmp	r7, #0
    c0f6:	beq.n	c176 <FatFile::open(FatFile*, fname_t*, int)+0x386>
    // call user date/time function
    FsDateTime::callback(&date, &time, &ms10);
    c0f8:	add.w	r2, sp, #43	; 0x2b
    c0fc:	add.w	r1, sp, #46	; 0x2e
    c100:	add	r0, sp, #44	; 0x2c
    c102:	blx	r7
    c104:	ldrh.w	r1, [sp, #44]	; 0x2c
    c108:	ldrh.w	r2, [sp, #46]	; 0x2e
    setLe16(dir->createDate, date);
    setLe16(dir->createTime, time);
    dir->createTimeMs = ms10;
    c10c:	ldrb.w	r3, [sp, #43]	; 0x2b
    c110:	strh	r1, [r4, #16]
    c112:	strh	r2, [r4, #14]
    c114:	strb	r3, [r4, #13]
      setLe16(dir->createTime, FS_DEFAULT_TIME);
      setLe16(dir->modifyTime, FS_DEFAULT_TIME);
    }
  }
  // Force write of entry to device.
  dirFile->m_vol->cacheDirty();
    c116:	ldr	r2, [r6, #8]
    c118:	ldrb.w	r3, [r2, #36]	; 0x24
    c11c:	orr.w	r3, r3, #1
    c120:	strb.w	r3, [r2, #36]	; 0x24

 open:
  // open entry in cache.
  if (!openCachedEntry(dirFile, curIndex, oflag, lfnOrd)) {
    c124:	str.w	r8, [sp]
    c128:	mov	r2, r5
    c12a:	ldr	r3, [sp, #28]
    c12c:	mov	r1, r6
    c12e:	ldr	r0, [sp, #36]	; 0x24
    c130:	bl	b0ac <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)>
    c134:	b.n	be04 <FatFile::open(FatFile*, fname_t*, int)+0x14>
      for (uint8_t i = 0; i < 13; i++) {
        uint16_t u = lfnGetChar(ldir, i);
        if (k == len) {
          if (u != 0) {
            // Not found.
            lfnOrd = 0;
    c136:	cmp	r0, #0
    c138:	ldr.w	r8, [sp, #32]
    c13c:	it	ne
    c13e:	movne.w	r8, #0
    c142:	b.n	be40 <FatFile::open(FatFile*, fname_t*, int)+0x50>
          break;
        }
      }
    } else if (isFileOrSubdir(dir)) {
      if (lfnOrd) {
        if (1 == order && lfnChecksum(dir->name) == checksum) {
    c144:	ldr	r2, [sp, #12]
    c146:	cmp	r2, #1
    c148:	bne.w	be02 <FatFile::open(FatFile*, fname_t*, int)+0x12>
    c14c:	subs	r4, r3, #1
    c14e:	mov	r2, r1
    c150:	adds	r3, #10
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
    c152:	lsrs	r0, r2, #1
    c154:	ldrb.w	r1, [r4, #1]!
    c158:	orr.w	r2, r0, r2, lsl #7
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
    c15c:	cmp	r4, r3
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
    c15e:	uxtab	r2, r1, r2
    c162:	uxtb	r2, r2
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
    c164:	bne.n	c152 <FatFile::open(FatFile*, fname_t*, int)+0x362>
          break;
        }
      }
    } else if (isFileOrSubdir(dir)) {
      if (lfnOrd) {
        if (1 == order && lfnChecksum(dir->name) == checksum) {
    c166:	ldr	r3, [sp, #24]
    c168:	cmp	r3, r2
    c16a:	bne.w	be02 <FatFile::open(FatFile*, fname_t*, int)+0x12>
    }
  }

 found:
  // Don't open if create only.
  if (oflag & O_EXCL) {
    c16e:	ldr	r3, [sp, #28]
    c170:	lsls	r1, r3, #20
    c172:	bpl.n	c124 <FatFile::open(FatFile*, fname_t*, int)+0x334>
    c174:	b.n	be02 <FatFile::open(FatFile*, fname_t*, int)+0x12>
    c176:	movw	r3, #21025	; 0x5221
    c17a:	strh	r3, [r4, #16]
    c17c:	strh	r3, [r4, #24]
    c17e:	strh	r3, [r4, #18]
    c180:	b.n	c116 <FatFile::open(FatFile*, fname_t*, int)+0x326>
    c182:	nop
    c184:	.word	0x4ec4ec4f
    c188:	.word	0x20044068

0000c18c <FatFile::getSFN(char*)>:
#include "../common/DebugMacros.h"
#include "../common/FsStructs.h"
#include "FatFile.h"
#include "FatVolume.h"
//------------------------------------------------------------------------------
size_t FatFile::getSFN(char* name) {
    c18c:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c190:	ldrb	r3, [r0, #0]
    c192:	mov	r6, r1
  uint8_t j = 0;
  uint8_t lcBit = FAT_CASE_LC_BASE;
  DirFat_t* dir;

  if (!isOpen()) {
    c194:	cbz	r3, c1aa <FatFile::getSFN(char*)+0x1e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isRoot()) {
    c196:	ands.w	r4, r3, #96	; 0x60
    c19a:	beq.n	c1b4 <FatFile::getSFN(char*)+0x28>
    name[0] = '/';
    c19c:	movs	r2, #47	; 0x2f
    name[1] = '\0';
    c19e:	movs	r3, #0
    return 1;
    c1a0:	movs	r0, #1
  if (!isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isRoot()) {
    name[0] = '/';
    c1a2:	strb	r2, [r1, #0]
    name[1] = '\0';
    c1a4:	strb	r3, [r1, #1]
    return 1;
    c1a6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  }
  name[j] = '\0';
  return j;

 fail:
  name[0] = '\0';
    c1aa:	movs	r3, #0
  return 0;
    c1ac:	mov	r0, r3
  }
  name[j] = '\0';
  return j;

 fail:
  name[0] = '\0';
    c1ae:	strb	r3, [r6, #0]
  return 0;
}
    c1b0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    name[0] = '/';
    name[1] = '\0';
    return 1;
  }
  // cache entry
  dir = reinterpret_cast<DirFat_t*>(cacheDirEntry(FsCache::CACHE_FOR_READ));
    c1b4:	mov	r1, r4
    c1b6:	bl	a7d0 <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    c1ba:	cmp	r0, #0
    c1bc:	beq.n	c1aa <FatFile::getSFN(char*)+0x1e>
    c1be:	mov	r1, r4
    c1c0:	subs	r5, r0, #1
    c1c2:	mov.w	ip, #8
      continue;
    }
    if (i == 8) {
      // Position bit for extension.
      lcBit = FAT_CASE_LC_EXT;
      name[j++] = '.';
    c1c6:	mov.w	r8, #46	; 0x2e
    DBG_FAIL_MACRO;
    goto fail;
  }
  // format name
  for (uint8_t i = 0; i < 11; i++) {
    if (dir->name[i] == ' ') {
    c1ca:	ldrb.w	r3, [r5, #1]!
    c1ce:	cmp	r3, #32
    c1d0:	beq.n	c1f4 <FatFile::getSFN(char*)+0x68>
      continue;
    }
    if (i == 8) {
    c1d2:	cmp	r1, #8
    c1d4:	beq.n	c204 <FatFile::getSFN(char*)+0x78>
      // Position bit for extension.
      lcBit = FAT_CASE_LC_EXT;
      name[j++] = '.';
    }
    char c = dir->name[i];
    if ('A' <= c && c <= 'Z' && (lcBit & dir->caseFlags)) {
    c1d6:	sub.w	r2, r3, #65	; 0x41
      c += 'a' - 'A';
    }
    name[j++] = c;
    c1da:	adds	r7, r4, #1
      // Position bit for extension.
      lcBit = FAT_CASE_LC_EXT;
      name[j++] = '.';
    }
    char c = dir->name[i];
    if ('A' <= c && c <= 'Z' && (lcBit & dir->caseFlags)) {
    c1dc:	cmp	r2, #25
    c1de:	bhi.n	c1f0 <FatFile::getSFN(char*)+0x64>
    c1e0:	ldrb	r2, [r0, #12]
      c += 'a' - 'A';
    c1e2:	add.w	lr, r3, #32
      // Position bit for extension.
      lcBit = FAT_CASE_LC_EXT;
      name[j++] = '.';
    }
    char c = dir->name[i];
    if ('A' <= c && c <= 'Z' && (lcBit & dir->caseFlags)) {
    c1e6:	tst.w	ip, r2
      c += 'a' - 'A';
    c1ea:	it	ne
    c1ec:	uxtbne.w	r3, lr
    }
    name[j++] = c;
    c1f0:	strb	r3, [r6, r4]
    c1f2:	uxtb	r4, r7
    c1f4:	adds	r1, #1
  if (!dir) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // format name
  for (uint8_t i = 0; i < 11; i++) {
    c1f6:	cmp	r1, #11
    c1f8:	bne.n	c1ca <FatFile::getSFN(char*)+0x3e>
    if ('A' <= c && c <= 'Z' && (lcBit & dir->caseFlags)) {
      c += 'a' - 'A';
    }
    name[j++] = c;
  }
  name[j] = '\0';
    c1fa:	movs	r3, #0
  return j;
    c1fc:	mov	r0, r4
    if ('A' <= c && c <= 'Z' && (lcBit & dir->caseFlags)) {
      c += 'a' - 'A';
    }
    name[j++] = c;
  }
  name[j] = '\0';
    c1fe:	strb	r3, [r6, r4]
  return j;
    c200:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      continue;
    }
    if (i == 8) {
      // Position bit for extension.
      lcBit = FAT_CASE_LC_EXT;
      name[j++] = '.';
    c204:	adds	r2, r4, #1
    c206:	strb.w	r8, [r6, r4]
    if (dir->name[i] == ' ') {
      continue;
    }
    if (i == 8) {
      // Position bit for extension.
      lcBit = FAT_CASE_LC_EXT;
    c20a:	mov.w	ip, #16
    c20e:	ldrb	r3, [r5, #0]
      name[j++] = '.';
    c210:	uxtb	r4, r2
    c212:	b.n	c1d6 <FatFile::getSFN(char*)+0x4a>

0000c214 <FsBaseFile::FsBaseFile(FsBaseFile const&)>:
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */
#include "FsLib.h"
//------------------------------------------------------------------------------
FsBaseFile::FsBaseFile(const FsBaseFile& from) {
    c214:	push	{r3, r4, r5, r6, r7, lr}
    c216:	movs	r5, #0
    c218:	mov	r6, r0
    c21a:	mov	r7, r1
    c21c:	str	r5, [r0, #56]	; 0x38
  m_fFile = nullptr;
  m_xFile = nullptr;
  if (from.m_fFile) {
    c21e:	ldr	r4, [r1, #56]	; 0x38
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */
#include "FsLib.h"
//------------------------------------------------------------------------------
FsBaseFile::FsBaseFile(const FsBaseFile& from) {
    c220:	str	r5, [r0, #60]	; 0x3c
  m_fFile = nullptr;
  m_xFile = nullptr;
  if (from.m_fFile) {
    c222:	cbz	r4, c248 <FsBaseFile::FsBaseFile(FsBaseFile const&)+0x34>
    m_fFile = new (m_fileMem) FatFile;
    c224:	mov	r1, r0
    c226:	movs	r0, #36	; 0x24
    c228:	bl	c494 <operator new(unsigned int, unsigned long*)>
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() {}
    c22c:	strb	r5, [r0, #0]
    c22e:	strb	r5, [r0, #1]
    *m_fFile = *from.m_fFile;
    c230:	mov	r4, r0
    c232:	strb	r5, [r0, #2]
//------------------------------------------------------------------------------
FsBaseFile::FsBaseFile(const FsBaseFile& from) {
  m_fFile = nullptr;
  m_xFile = nullptr;
  if (from.m_fFile) {
    m_fFile = new (m_fileMem) FatFile;
    c234:	str	r0, [r6, #56]	; 0x38
    *m_fFile = *from.m_fFile;
    c236:	ldr	r5, [r7, #56]	; 0x38
    c238:	ldmia	r5!, {r0, r1, r2, r3}
    c23a:	stmia	r4!, {r0, r1, r2, r3}
    c23c:	ldmia	r5!, {r0, r1, r2, r3}
    c23e:	stmia	r4!, {r0, r1, r2, r3}
    c240:	ldr	r3, [r5, #0]
    c242:	str	r3, [r4, #0]
  } else if (from.m_xFile) {
    m_xFile = new (m_fileMem) ExFatFile;
    *m_xFile = *from.m_xFile;
  }
}
    c244:	mov	r0, r6
    c246:	pop	{r3, r4, r5, r6, r7, pc}
  m_fFile = nullptr;
  m_xFile = nullptr;
  if (from.m_fFile) {
    m_fFile = new (m_fileMem) FatFile;
    *m_fFile = *from.m_fFile;
  } else if (from.m_xFile) {
    c248:	ldr	r3, [r1, #60]	; 0x3c
    c24a:	cmp	r3, #0
    c24c:	beq.n	c244 <FsBaseFile::FsBaseFile(FsBaseFile const&)+0x30>
    m_xFile = new (m_fileMem) ExFatFile;
    c24e:	mov	r1, r0
    c250:	movs	r0, #56	; 0x38
    c252:	bl	c494 <operator new(unsigned int, unsigned long*)>
    c256:	strb.w	r4, [r0, #49]	; 0x31
    c25a:	strb.w	r4, [r0, #50]	; 0x32
    *m_xFile = *from.m_xFile;
    c25e:	mov	r2, r0
    c260:	strb.w	r4, [r0, #51]	; 0x33
  m_xFile = nullptr;
  if (from.m_fFile) {
    m_fFile = new (m_fileMem) FatFile;
    *m_fFile = *from.m_fFile;
  } else if (from.m_xFile) {
    m_xFile = new (m_fileMem) ExFatFile;
    c264:	str	r0, [r6, #60]	; 0x3c
    *m_xFile = *from.m_xFile;
    c266:	ldr	r3, [r7, #60]	; 0x3c
    c268:	add.w	r1, r3, #48	; 0x30
    c26c:	ldr	r7, [r3, #0]
    c26e:	adds	r3, #16
    c270:	ldr.w	r5, [r3, #-12]
    c274:	adds	r2, #16
    c276:	ldr.w	r4, [r3, #-8]
    c27a:	ldr.w	r0, [r3, #-4]
    c27e:	cmp	r3, r1
    c280:	str.w	r7, [r2, #-16]
    c284:	str.w	r5, [r2, #-12]
    c288:	str.w	r4, [r2, #-8]
    c28c:	str.w	r0, [r2, #-4]
    c290:	bne.n	c26c <FsBaseFile::FsBaseFile(FsBaseFile const&)+0x58>
    c292:	ldr	r3, [r3, #0]
    c294:	str	r3, [r2, #0]
    c296:	b.n	c244 <FsBaseFile::FsBaseFile(FsBaseFile const&)+0x30>

0000c298 <FsBaseFile::close()>:
    *m_xFile = *from.m_xFile;
  }
  return *this;
}
//------------------------------------------------------------------------------
bool FsBaseFile::close() {
    c298:	push	{r4, lr}
    c29a:	mov	r4, r0
  if (m_fFile && m_fFile->close()) {
    c29c:	ldr	r0, [r0, #56]	; 0x38
    c29e:	cbz	r0, c2ac <FsBaseFile::close()+0x14>
    c2a0:	bl	a884 <FatFile::close()>
    c2a4:	cbz	r0, c2ac <FsBaseFile::close()+0x14>
    m_fFile = nullptr;
    c2a6:	movs	r3, #0
    c2a8:	str	r3, [r4, #56]	; 0x38
    return true;
    c2aa:	pop	{r4, pc}
  }
  if (m_xFile && m_xFile->close()) {
    c2ac:	ldr	r0, [r4, #60]	; 0x3c
    c2ae:	cbz	r0, c2bc <FsBaseFile::close()+0x24>
    c2b0:	bl	8df0 <ExFatFile::close()>
    c2b4:	cbz	r0, c2bc <FsBaseFile::close()+0x24>
    m_xFile = nullptr;
    c2b6:	movs	r3, #0
    c2b8:	str	r3, [r4, #60]	; 0x3c
    c2ba:	pop	{r4, pc}
    return true;
  }
  return false;
    c2bc:	movs	r0, #0
}
    c2be:	pop	{r4, pc}

0000c2c0 <FsBaseFile::open(FsVolume*, char const*, int)>:
  }
  return false;
}
//------------------------------------------------------------------------------
bool FsBaseFile::open(FsVolume* vol, const char* path, oflag_t oflag) {
  if (!vol) {
    c2c0:	cbz	r1, c336 <FsBaseFile::open(FsVolume*, char const*, int)+0x76>
    m_xFile = nullptr;
  }
  return false;
}
//------------------------------------------------------------------------------
bool FsBaseFile::open(FsVolume* vol, const char* path, oflag_t oflag) {
    c2c2:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c2c6:	mov	r4, r1
    c2c8:	mov	r5, r0
    c2ca:	mov	r8, r3
    c2cc:	mov	r7, r2
  if (!vol) {
    return false;
  }
  close();
    c2ce:	bl	c298 <FsBaseFile::close()>
  if (vol->m_fVol) {
    c2d2:	ldr.w	r6, [r4, #1152]	; 0x480
    c2d6:	cbz	r6, c304 <FsBaseFile::open(FsVolume*, char const*, int)+0x44>
    c2d8:	movs	r6, #0
    m_fFile = new (m_fileMem) FatFile;
    c2da:	mov	r1, r5
    c2dc:	movs	r0, #36	; 0x24
    c2de:	bl	c494 <operator new(unsigned int, unsigned long*)>
    if (m_fFile && m_fFile->open(vol->m_fVol, path, oflag)) {
    c2e2:	mov	r3, r8
    c2e4:	strb	r6, [r0, #0]
    c2e6:	mov	r2, r7
    c2e8:	strb	r6, [r0, #1]
    c2ea:	strb	r6, [r0, #2]
  if (!vol) {
    return false;
  }
  close();
  if (vol->m_fVol) {
    m_fFile = new (m_fileMem) FatFile;
    c2ec:	str	r0, [r5, #56]	; 0x38
    if (m_fFile && m_fFile->open(vol->m_fVol, path, oflag)) {
    c2ee:	ldr.w	r1, [r4, #1152]	; 0x480
    c2f2:	bl	ab98 <FatFile::open(FatVolume*, char const*, int)>
    c2f6:	cbz	r0, c2fe <FsBaseFile::open(FsVolume*, char const*, int)+0x3e>
      return true;
    c2f8:	movs	r0, #1
    c2fa:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    }
    m_fFile = nullptr;
    c2fe:	str	r0, [r5, #56]	; 0x38
    c300:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  } else if (vol->m_xVol) {
    c304:	ldr.w	r3, [r4, #1156]	; 0x484
    c308:	cbz	r3, c33a <FsBaseFile::open(FsVolume*, char const*, int)+0x7a>
    m_xFile = new (m_fileMem) ExFatFile;
    c30a:	mov	r1, r5
    c30c:	movs	r0, #56	; 0x38
    c30e:	bl	c494 <operator new(unsigned int, unsigned long*)>
    if (m_xFile && m_xFile->open(vol->m_xVol, path, oflag)) {
    c312:	mov	r3, r8
    c314:	strb.w	r6, [r0, #49]	; 0x31
    c318:	mov	r2, r7
    c31a:	strb.w	r6, [r0, #50]	; 0x32
    c31e:	strb.w	r6, [r0, #51]	; 0x33
    if (m_fFile && m_fFile->open(vol->m_fVol, path, oflag)) {
      return true;
    }
    m_fFile = nullptr;
  } else if (vol->m_xVol) {
    m_xFile = new (m_fileMem) ExFatFile;
    c322:	str	r0, [r5, #60]	; 0x3c
    if (m_xFile && m_xFile->open(vol->m_xVol, path, oflag)) {
    c324:	ldr.w	r1, [r4, #1156]	; 0x484
    c328:	bl	97a0 <ExFatFile::open(ExFatVolume*, char const*, int)>
    c32c:	cmp	r0, #0
    c32e:	bne.n	c2f8 <FsBaseFile::open(FsVolume*, char const*, int)+0x38>
      return true;
    }
    m_xFile = nullptr;
    c330:	str	r0, [r5, #60]	; 0x3c
  }
  return false;
}
    c332:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return false;
}
//------------------------------------------------------------------------------
bool FsBaseFile::open(FsVolume* vol, const char* path, oflag_t oflag) {
  if (!vol) {
    return false;
    c336:	movs	r0, #0
      return true;
    }
    m_xFile = nullptr;
  }
  return false;
}
    c338:	bx	lr
  return false;
}
//------------------------------------------------------------------------------
bool FsBaseFile::open(FsVolume* vol, const char* path, oflag_t oflag) {
  if (!vol) {
    return false;
    c33a:	movs	r0, #0
    c33c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000c340 <FsBaseFile::openNext(FsBaseFile*, int)>:
    m_xFile = nullptr;
  }
  return false;
}
//------------------------------------------------------------------------------
bool FsBaseFile::openNext(FsBaseFile* dir, oflag_t oflag) {
    c340:	push	{r3, r4, r5, r6, r7, lr}
    c342:	mov	r5, r1
    c344:	mov	r7, r2
    c346:	mov	r4, r0
  close();
    c348:	bl	c298 <FsBaseFile::close()>
  if (dir->m_fFile) {
    c34c:	ldr	r6, [r5, #56]	; 0x38
    c34e:	cbz	r6, c374 <FsBaseFile::openNext(FsBaseFile*, int)+0x34>
    m_fFile = new (m_fileMem) FatFile;
    c350:	mov	r1, r4
    c352:	movs	r0, #36	; 0x24
    c354:	bl	c494 <operator new(unsigned int, unsigned long*)>
    c358:	movs	r1, #0
    if (m_fFile->openNext(dir->m_fFile, oflag)) {
    c35a:	mov	r2, r7
    c35c:	strb	r1, [r0, #0]
    c35e:	strb	r1, [r0, #1]
    c360:	strb	r1, [r0, #2]
}
//------------------------------------------------------------------------------
bool FsBaseFile::openNext(FsBaseFile* dir, oflag_t oflag) {
  close();
  if (dir->m_fFile) {
    m_fFile = new (m_fileMem) FatFile;
    c362:	str	r0, [r4, #56]	; 0x38
    if (m_fFile->openNext(dir->m_fFile, oflag)) {
    c364:	ldr	r1, [r5, #56]	; 0x38
    c366:	bl	b184 <FatFile::openNext(FatFile*, int)>
    c36a:	cbz	r0, c370 <FsBaseFile::openNext(FsBaseFile*, int)+0x30>
      return true;
    c36c:	movs	r0, #1
    c36e:	pop	{r3, r4, r5, r6, r7, pc}
    }
    m_fFile = nullptr;
    c370:	str	r0, [r4, #56]	; 0x38
    c372:	pop	{r3, r4, r5, r6, r7, pc}
  } else if (dir->m_xFile) {
    c374:	ldr	r0, [r5, #60]	; 0x3c
    c376:	cbz	r0, c39c <FsBaseFile::openNext(FsBaseFile*, int)+0x5c>
    m_xFile = new (m_fileMem) ExFatFile;
    c378:	mov	r1, r4
    c37a:	movs	r0, #56	; 0x38
    c37c:	bl	c494 <operator new(unsigned int, unsigned long*)>
    if (m_xFile->openNext(dir->m_xFile, oflag)) {
    c380:	mov	r2, r7
    c382:	strb.w	r6, [r0, #49]	; 0x31
    c386:	strb.w	r6, [r0, #50]	; 0x32
    c38a:	strb.w	r6, [r0, #51]	; 0x33
    if (m_fFile->openNext(dir->m_fFile, oflag)) {
      return true;
    }
    m_fFile = nullptr;
  } else if (dir->m_xFile) {
    m_xFile = new (m_fileMem) ExFatFile;
    c38e:	str	r0, [r4, #60]	; 0x3c
    if (m_xFile->openNext(dir->m_xFile, oflag)) {
    c390:	ldr	r1, [r5, #60]	; 0x3c
    c392:	bl	97b0 <ExFatFile::openNext(ExFatFile*, int)>
    c396:	cmp	r0, #0
    c398:	bne.n	c36c <FsBaseFile::openNext(FsBaseFile*, int)+0x2c>
      return true;
    }
    m_xFile = nullptr;
    c39a:	str	r0, [r4, #60]	; 0x3c
  }
  return false;
}
    c39c:	pop	{r3, r4, r5, r6, r7, pc}
    c39e:	nop

0000c3a0 <FsVolume::begin(BlockDeviceInterface*)>:
 * DEALINGS IN THE SOFTWARE.
 */
#include "FsLib.h"
FsVolume* FsVolume::m_cwv = nullptr;
//------------------------------------------------------------------------------
bool FsVolume::begin(BlockDevice* blockDev) {
    c3a0:	push	{r4, r5, r6, lr}
    c3a2:	mov	r4, r0
  m_blockDev = blockDev;
  m_fVol = nullptr;
    c3a4:	movs	r6, #0
  m_xVol = new (m_volMem) ExFatVolume;
    c3a6:	mov.w	r0, #1152	; 0x480
 */
#include "FsLib.h"
FsVolume* FsVolume::m_cwv = nullptr;
//------------------------------------------------------------------------------
bool FsVolume::begin(BlockDevice* blockDev) {
  m_blockDev = blockDev;
    c3aa:	str.w	r1, [r4, #1160]	; 0x488
  m_fVol = nullptr;
  m_xVol = new (m_volMem) ExFatVolume;
    c3ae:	mov	r1, r4
#include "FsLib.h"
FsVolume* FsVolume::m_cwv = nullptr;
//------------------------------------------------------------------------------
bool FsVolume::begin(BlockDevice* blockDev) {
  m_blockDev = blockDev;
  m_fVol = nullptr;
    c3b0:	str.w	r6, [r4, #1152]	; 0x480
  m_xVol = new (m_volMem) ExFatVolume;
    c3b4:	bl	c494 <operator new(unsigned int, unsigned long*)>
   * \param[in] setCwv Set current working volume if true.
   * \param[in] part partition to initialize.
   * \return true for success or false for failure.
   */
  bool begin(BlockDevice* dev, bool setCwv = true, uint8_t part = 1) {
    if (!init(dev, part)) {
    c3b8:	movs	r2, #1
 * \class ExFatPartition
 * \brief Access exFat partitions on raw file devices.
 */
class ExFatPartition {
 public:
  ExFatPartition() {}
    c3ba:	strb.w	r6, [r0, #1092]	; 0x444
    c3be:	mov	r5, r0
    c3c0:	strb.w	r6, [r0, #1145]	; 0x479
    c3c4:	strb.w	r6, [r0, #1146]	; 0x47a
    c3c8:	strb.w	r6, [r0, #1147]	; 0x47b
    c3cc:	str.w	r0, [r4, #1156]	; 0x484
    c3d0:	ldr.w	r1, [r4, #1160]	; 0x488
    c3d4:	bl	9b88 <ExFatPartition::init(BlockDeviceInterface*, unsigned char)>
    c3d8:	cbnz	r0, c418 <FsVolume::begin(BlockDeviceInterface*)+0x78>
  if (m_xVol && m_xVol->begin(m_blockDev, false)) {
    goto done;
  }
  m_xVol = nullptr;
    c3da:	movs	r6, #0
  m_fVol = new (m_volMem) FatVolume;
    c3dc:	mov	r1, r4
    c3de:	mov.w	r0, #1128	; 0x468
  m_fVol = nullptr;
  m_xVol = new (m_volMem) ExFatVolume;
  if (m_xVol && m_xVol->begin(m_blockDev, false)) {
    goto done;
  }
  m_xVol = nullptr;
    c3e2:	str.w	r6, [r4, #1156]	; 0x484
  m_fVol = new (m_volMem) FatVolume;
    c3e6:	bl	c494 <operator new(unsigned int, unsigned long*)>
   * \param[in] setCwv Set current working volume if true.
   * \param[in] part partition to initialize.
   * \return true for success or false for failure.
   */
  bool begin(BlockDevice* dev, bool setCwv = true, uint8_t part = 1) {
    if (!init(dev, part)) {
    c3ea:	movs	r2, #1
 */
class FatPartition {
 public:
  /** Create an instance of FatPartition
   */
  FatPartition() {}
    c3ec:	strb	r6, [r0, #7]
    c3ee:	mov	r5, r0
    c3f0:	strb.w	r6, [r0, #1092]	; 0x444
    c3f4:	strb.w	r6, [r0, #1093]	; 0x445
    c3f8:	strb.w	r6, [r0, #1094]	; 0x446
    c3fc:	str.w	r0, [r4, #1152]	; 0x480
    c400:	ldr.w	r1, [r4, #1160]	; 0x488
    c404:	bl	b6ec <FatPartition::init(BlockDeviceInterface*, unsigned char)>
    c408:	cbnz	r0, c43c <FsVolume::begin(BlockDeviceInterface*)+0x9c>
  if (m_fVol && m_fVol->begin(m_blockDev, false)) {
    goto done;
  }
  m_cwv = nullptr;
    c40a:	movs	r3, #0
    c40c:	ldr	r2, [pc, #80]	; (c460 <FsVolume::begin(BlockDeviceInterface*)+0xc0>)
  m_fVol = nullptr;
  return false;
    c40e:	mov	r0, r3
  m_fVol = new (m_volMem) FatVolume;
  if (m_fVol && m_fVol->begin(m_blockDev, false)) {
    goto done;
  }
  m_cwv = nullptr;
  m_fVol = nullptr;
    c410:	str.w	r3, [r4, #1152]	; 0x480
  m_xVol = nullptr;
  m_fVol = new (m_volMem) FatVolume;
  if (m_fVol && m_fVol->begin(m_blockDev, false)) {
    goto done;
  }
  m_cwv = nullptr;
    c414:	str	r3, [r2, #0]
  return false;

 done:
  m_cwv = this;
  return true;
}
    c416:	pop	{r4, r5, r6, pc}
  /**
   * Set volume working directory to root.
   * \return true for success or false for failure.
   */
  bool chdir() {
    m_vwd.close();
    c418:	add.w	r6, r5, #1096	; 0x448
    c41c:	mov	r0, r6
    c41e:	bl	8df0 <ExFatFile::close()>
    return m_vwd.openRoot(this);
    c422:	mov	r1, r5
    c424:	mov	r0, r6
    c426:	bl	8eb0 <ExFatFile::openRoot(ExFatVolume*)>
   */
  bool begin(BlockDevice* dev, bool setCwv = true, uint8_t part = 1) {
    if (!init(dev, part)) {
      return false;
    }
    if (!chdir()) {
    c42a:	cmp	r0, #0
    c42c:	beq.n	c3da <FsVolume::begin(BlockDeviceInterface*)+0x3a>
      return false;
    }
    if (setCwv || !m_cwv) {
    c42e:	ldr	r3, [pc, #52]	; (c464 <FsVolume::begin(BlockDeviceInterface*)+0xc4>)
    c430:	ldr	r2, [r3, #0]
    c432:	cbz	r2, c45a <FsVolume::begin(BlockDeviceInterface*)+0xba>
  m_cwv = nullptr;
  m_fVol = nullptr;
  return false;

 done:
  m_cwv = this;
    c434:	ldr	r3, [pc, #40]	; (c460 <FsVolume::begin(BlockDeviceInterface*)+0xc0>)
  return true;
    c436:	movs	r0, #1
  m_cwv = nullptr;
  m_fVol = nullptr;
  return false;

 done:
  m_cwv = this;
    c438:	str	r4, [r3, #0]
  return true;
    c43a:	pop	{r4, r5, r6, pc}
  /**
   * Set volume working directory to root.
   * \return true for success or false for failure.
   */
  bool chdir() {
    m_vwd.close();
    c43c:	addw	r6, r5, #1092	; 0x444
    c440:	mov	r0, r6
    c442:	bl	a884 <FatFile::close()>
    return m_vwd.openRoot(this);
    c446:	mov	r1, r5
    c448:	mov	r0, r6
    c44a:	bl	aba8 <FatFile::openRoot(FatVolume*)>
   */
  bool begin(BlockDevice* dev, bool setCwv = true, uint8_t part = 1) {
    if (!init(dev, part)) {
      return false;
    }
    if (!chdir()) {
    c44e:	cmp	r0, #0
    c450:	beq.n	c40a <FsVolume::begin(BlockDeviceInterface*)+0x6a>
      return false;
    }
    if (setCwv || !m_cwv) {
    c452:	ldr	r3, [pc, #20]	; (c468 <FsVolume::begin(BlockDeviceInterface*)+0xc8>)
    c454:	ldr	r2, [r3, #0]
    c456:	cmp	r2, #0
    c458:	bne.n	c434 <FsVolume::begin(BlockDeviceInterface*)+0x94>
      m_cwv = this;
    c45a:	str	r5, [r3, #0]
    c45c:	b.n	c434 <FsVolume::begin(BlockDeviceInterface*)+0x94>
    c45e:	nop
    c460:	.word	0x20044074
    c464:	.word	0x2004406c
    c468:	.word	0x20044070

0000c46c <FsVolume::open(char const*, int)>:
bool FsVolume::ls(print_t* pr, const char* path, uint8_t flags) {
  FsBaseFile dir;
  return dir.open(this, path, O_RDONLY) && dir.ls(pr, flags);
}
//------------------------------------------------------------------------------
FsFile FsVolume::open(const char *path, oflag_t oflag) {
    c46c:	push	{r3, r4, r5, r6, r7, lr}
class __FlashStringHelper;

class Print
{
  public:
	constexpr Print() : write_error(0) {}
    c46e:	movs	r5, #0
    c470:	mov.w	r7, #1000	; 0x3e8
};
/**
 * \class FsFile
 * \brief FsBaseFile file with Arduino Stream.
 */
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    c474:	ldr	r6, [pc, #24]	; (c490 <FsVolume::open(char const*, int)+0x24>)
    c476:	mov	r4, r0
    c478:	str	r7, [r0, #8]
    c47a:	strb	r5, [r0, #4]
    c47c:	strb	r5, [r0, #12]
 * \brief FsBaseFile class.
 */
class FsBaseFile {
 public:
  /** Create an instance. */
  FsBaseFile() {}
    c47e:	str	r5, [r0, #72]	; 0x48
    c480:	str	r5, [r0, #76]	; 0x4c
};
/**
 * \class FsFile
 * \brief FsBaseFile file with Arduino Stream.
 */
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    c482:	str.w	r6, [r0], #16
  FsFile tmpFile;
  tmpFile.open(this, path, oflag);
    c486:	bl	c2c0 <FsBaseFile::open(FsVolume*, char const*, int)>
  return tmpFile;
}
    c48a:	mov	r0, r4
    c48c:	pop	{r3, r4, r5, r6, r7, pc}
    c48e:	nop
    c490:	.word	0x20000050

0000c494 <operator new(unsigned int, unsigned long*)>:
 */
#include "FsNew.h"
void* operator new(size_t size, newalign_t* ptr) {
  (void)size;
  return ptr;
}
    c494:	mov	r0, r1
    c496:	bx	lr

0000c498 <SdSpiCard::errorCode() const>:
  /**
   * \return code for the last error. See SdCardInfo.h for a list of error codes.
   */
  uint8_t errorCode() const {
    return m_errorCode;
  }
    c498:	ldrb	r0, [r0, #23]
    c49a:	bx	lr

0000c49c <SdSpiCard::errorData() const>:
  /** \return error data for last error. */
  uint32_t errorData() const {
    return m_status;
  }
    c49c:	ldrb	r0, [r0, #25]
    c49e:	bx	lr

0000c4a0 <SdSpiCard::readSector(unsigned long, unsigned char*)>:
   *
   * \param[in] sector Logical sector to be read.
   * \param[out] dst Pointer to the location that will receive the data.
   * \return true for success or false for failure.
   */
  bool readSector(uint32_t sector, uint8_t* dst) {
    c4a0:	push	{r4}
#if ENABLE_DEDICATED_SPI
    return readSectors(sector, dst, 1);
    c4a2:	ldr	r4, [r0, #0]
    c4a4:	movs	r3, #1
    c4a6:	ldr	r4, [r4, #16]
    c4a8:	mov	ip, r4
#else  // ENABLE_DEDICATED_SPI
    return readSingle(sector, dst);
#endif  // ENABLE_DEDICATED_SPI
  }
    c4aa:	ldr.w	r4, [sp], #4
   * \param[out] dst Pointer to the location that will receive the data.
   * \return true for success or false for failure.
   */
  bool readSector(uint32_t sector, uint8_t* dst) {
#if ENABLE_DEDICATED_SPI
    return readSectors(sector, dst, 1);
    c4ae:	bx	ip

0000c4b0 <SdSpiCard::type() const>:
  /** Return the card type: SD V1, SD V2 or SDHC/SDXC
   * \return 0 - SD V1, 1 - SD V2, or 3 - SDHC/SDXC.
   */
  uint8_t type() const {
    return m_type;
  }
    c4b0:	ldrb	r0, [r0, #26]
    c4b2:	bx	lr

0000c4b4 <SdSpiCard::~SdSpiCard()>:
/**
 * \class SdSpiCard
 * \brief Raw access to SD and SDHC flash memory cards via SPI protocol.
 */
#if HAS_SDIO_CLASS
class SdSpiCard : public SdCardInterface {
    c4b4:	bx	lr
    c4b6:	nop

0000c4b8 <SdSpiCard::~SdSpiCard()>:
    c4b8:	push	{r4, lr}
    c4ba:	mov	r4, r0
    c4bc:	movs	r1, #28
    c4be:	bl	1006c <operator delete(void*, unsigned int)>
    c4c2:	mov	r0, r4
    c4c4:	pop	{r4, pc}
    c4c6:	nop

0000c4c8 <SdSpiCard::spiStart() [clone .part.5] [clone .constprop.25]>:
uint32_t SdSpiCard::sectorCount() {
  csd_t csd;
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStart() {
    c4c8:	push	{r4, lr}
    c4ca:	mov	r4, r0
  bool waitNotBusy(SdMillis_t timeoutMS);
  bool writeData(uint8_t token, const uint8_t* src);

#if SPI_DRIVER_SELECT < 2
  void spiActivate() {
    m_spiDriver.activate();
    c4cc:	adds	r0, #4
    c4ce:	bl	d86c <SdSpiArduinoDriver::activate()>
  uint8_t cardCommand(uint8_t cmd, uint32_t arg);
  bool isTimedOut(SdMillis_t startMS, SdMillis_t timeoutMS);
  bool readData(uint8_t* dst, size_t count);
  bool readRegister(uint8_t cmd, void* buf);
  void spiSelect() {
    sdCsWrite(m_csPin, false);
    c4d2:	movs	r1, #0
    c4d4:	ldrb	r0, [r4, #22]
    c4d6:	bl	daa0 <sdCsWrite(unsigned char, bool)>
  if (!m_spiActive) {
    spiActivate();
    spiSelect();
    m_spiActive = true;
    c4da:	movs	r3, #1
    c4dc:	strb	r3, [r4, #24]
    c4de:	pop	{r4, pc}

0000c4e0 <SdSpiCard::spiStop() [clone .part.6] [clone .constprop.27]>:
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
    c4e0:	push	{r3, r4, r5, lr}
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver.receive(buf, n);
  }
  void spiSend(uint8_t data) {
    m_spiDriver.send(data);
    c4e2:	adds	r5, r0, #4
    c4e4:	mov	r4, r0
  }
  void type(uint8_t value) {
    m_type = value;
  }
  void spiUnselect() {
    sdCsWrite(m_csPin, true);
    c4e6:	movs	r1, #1
    c4e8:	ldrb	r0, [r0, #22]
    c4ea:	bl	daa0 <sdCsWrite(unsigned char, bool)>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver.receive(buf, n);
  }
  void spiSend(uint8_t data) {
    m_spiDriver.send(data);
    c4ee:	movs	r1, #255	; 0xff
    c4f0:	mov	r0, r5
    c4f2:	bl	da34 <SdSpiArduinoDriver::send(unsigned char)>
  }
  void spiBegin(SdSpiConfig spiConfig) {
    m_spiDriver.begin(spiConfig);
  }
  void spiDeactivate() {
    m_spiDriver.deactivate();
    c4f6:	mov	r0, r5
    c4f8:	bl	d9a4 <SdSpiArduinoDriver::deactivate()>
  if (m_spiActive) {
    spiUnselect();
    spiSend(0XFF);
    spiDeactivate();
    m_spiActive = false;
    c4fc:	movs	r3, #0
    c4fe:	strb	r3, [r4, #24]
    c500:	pop	{r3, r4, r5, pc}
    c502:	nop

0000c504 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)>:
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeSectors(uint32_t sector, const uint8_t* src, size_t ns) {
    c504:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c508:	mov	r7, r3
#if ENABLE_DEDICATED_SPI
  if (m_curState != WRITE_STATE || m_curSector != sector) {
    c50a:	ldrb	r3, [r0, #20]
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeSectors(uint32_t sector, const uint8_t* src, size_t ns) {
    c50c:	mov	r5, r0
    c50e:	mov	r6, r1
#if ENABLE_DEDICATED_SPI
  if (m_curState != WRITE_STATE || m_curSector != sector) {
    c510:	cmp	r3, #2
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeSectors(uint32_t sector, const uint8_t* src, size_t ns) {
    c512:	mov	r4, r2
#if ENABLE_DEDICATED_SPI
  if (m_curState != WRITE_STATE || m_curSector != sector) {
    c514:	beq.n	c55c <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x58>
    if (!writeStart(sector)) {
    c516:	ldr	r3, [r5, #0]
    c518:	mov	r1, r6
    c51a:	mov	r0, r5
    c51c:	ldr	r3, [r3, #72]	; 0x48
    c51e:	blx	r3
    c520:	cbnz	r0, c52a <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x26>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    c522:	ldrb	r0, [r5, #24]
    c524:	cbnz	r0, c550 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x4c>
#endif  // ENABLE_DEDICATED_SPI

 fail:
  spiStop();
  return false;
}
    c526:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (m_curState != WRITE_STATE || m_curSector != sector) {
    if (!writeStart(sector)) {
      goto fail;
    }
    m_curSector = sector;
    m_curState = WRITE_STATE;
    c52a:	movs	r3, #2
#if ENABLE_DEDICATED_SPI
  if (m_curState != WRITE_STATE || m_curSector != sector) {
    if (!writeStart(sector)) {
      goto fail;
    }
    m_curSector = sector;
    c52c:	str	r6, [r5, #16]
    m_curState = WRITE_STATE;
    c52e:	strb	r3, [r5, #20]
  }
  for (size_t i = 0; i < ns; i++, src += 512) {
    c530:	cbz	r7, c564 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x60>
    c532:	movs	r6, #0
    c534:	b.n	c53a <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x36>
    c536:	cmp	r7, r6
    c538:	beq.n	c564 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x60>
    if (!writeData(src)) {
    c53a:	ldr	r3, [r5, #0]
    c53c:	mov	r1, r4
    c53e:	mov	r0, r5
      goto fail;
    }
    m_curSector = sector;
    m_curState = WRITE_STATE;
  }
  for (size_t i = 0; i < ns; i++, src += 512) {
    c540:	adds	r6, #1
    if (!writeData(src)) {
    c542:	ldr	r3, [r3, #68]	; 0x44
      goto fail;
    }
    m_curSector = sector;
    m_curState = WRITE_STATE;
  }
  for (size_t i = 0; i < ns; i++, src += 512) {
    c544:	add.w	r4, r4, #512	; 0x200
    if (!writeData(src)) {
    c548:	blx	r3
    c54a:	cmp	r0, #0
    c54c:	bne.n	c536 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x32>
    c54e:	b.n	c522 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x1e>
    c550:	mov	r0, r5
    c552:	bl	c4e0 <SdSpiCard::spiStop() [clone .part.6] [clone .constprop.27]>
  return writeStop();
#endif  // ENABLE_DEDICATED_SPI

 fail:
  spiStop();
  return false;
    c556:	movs	r0, #0
}
    c558:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeSectors(uint32_t sector, const uint8_t* src, size_t ns) {
#if ENABLE_DEDICATED_SPI
  if (m_curState != WRITE_STATE || m_curSector != sector) {
    c55c:	ldr	r3, [r0, #16]
    c55e:	cmp	r3, r1
    c560:	bne.n	c516 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x12>
    c562:	b.n	c530 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x2c>
  for (size_t i = 0; i < ns; i++, src += 512) {
    if (!writeData(src)) {
      goto fail;
    }
  }
  m_curSector += ns;
    c564:	ldr	r3, [r5, #16]
  return m_sharedSpi ? syncDevice() : true;
    c566:	ldrb	r2, [r5, #21]
  for (size_t i = 0; i < ns; i++, src += 512) {
    if (!writeData(src)) {
      goto fail;
    }
  }
  m_curSector += ns;
    c568:	add	r7, r3
    c56a:	str	r7, [r5, #16]
  return m_sharedSpi ? syncDevice() : true;
    c56c:	cbnz	r2, c574 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x70>
    c56e:	movs	r0, #1
    c570:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c574:	ldr	r3, [r5, #0]
    c576:	mov	r0, r5
    c578:	ldr	r3, [r3, #24]
#endif  // ENABLE_DEDICATED_SPI

 fail:
  spiStop();
  return false;
}
    c57a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    if (!writeData(src)) {
      goto fail;
    }
  }
  m_curSector += ns;
  return m_sharedSpi ? syncDevice() : true;
    c57e:	bx	r3

0000c580 <SdSpiCard::isBusy()>:
bool SdSpiCard::eraseSingleSectorEnable() {
  csd_t csd;
  return readCSD(&csd) ? csd.v1.erase_blk_en : false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isBusy() {
    c580:	push	{r3, r4, r5, r6, r7, lr}
#if ENABLE_DEDICATED_SPI
  if (m_curState == READ_STATE) {
    c582:	ldrb	r3, [r0, #20]
    c584:	cmp	r3, #1
    c586:	beq.n	c5ca <SdSpiCard::isBusy()+0x4a>
    return false;
  }
#endif  // ENABLE_DEDICATED_SPI
  bool rtn = true;
  bool spiActive = m_spiActive;
    c588:	ldrb	r7, [r0, #24]
    c58a:	mov	r5, r0
  if (!spiActive) {
    c58c:	cbz	r7, c5ba <SdSpiCard::isBusy()+0x3a>
    c58e:	adds	r6, r5, #4
bool SdSpiCard::eraseSingleSectorEnable() {
  csd_t csd;
  return readCSD(&csd) ? csd.v1.erase_blk_en : false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isBusy() {
    c590:	movs	r4, #8
  }
  uint8_t spiReceive() {
    return m_spiDriver.receive();
    c592:	mov	r0, r6
    c594:	bl	d9fc <SdSpiArduinoDriver::receive()>
  bool spiActive = m_spiActive;
  if (!spiActive) {
    spiStart();
  }
  for (uint8_t i = 0; i < 8; i++) {
    if (0XFF == spiReceive()) {
    c598:	cmp	r0, #255	; 0xff
    c59a:	add.w	r3, r4, #4294967295
    c59e:	beq.n	c5b2 <SdSpiCard::isBusy()+0x32>
  bool rtn = true;
  bool spiActive = m_spiActive;
  if (!spiActive) {
    spiStart();
  }
  for (uint8_t i = 0; i < 8; i++) {
    c5a0:	ands.w	r4, r3, #255	; 0xff
    c5a4:	bne.n	c592 <SdSpiCard::isBusy()+0x12>
#if ENABLE_DEDICATED_SPI
  if (m_curState == READ_STATE) {
    return false;
  }
#endif  // ENABLE_DEDICATED_SPI
  bool rtn = true;
    c5a6:	movs	r4, #1
    if (0XFF == spiReceive()) {
      rtn = false;
      break;
    }
  }
  if (!spiActive) {
    c5a8:	cbnz	r7, c5ae <SdSpiCard::isBusy()+0x2e>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    c5aa:	ldrb	r3, [r5, #24]
    c5ac:	cbnz	r3, c5c0 <SdSpiCard::isBusy()+0x40>
    }
  }
  if (!spiActive) {
    spiStop();
  }
  return rtn;
    c5ae:	mov	r0, r4
}
    c5b0:	pop	{r3, r4, r5, r6, r7, pc}
  if (!spiActive) {
    spiStart();
  }
  for (uint8_t i = 0; i < 8; i++) {
    if (0XFF == spiReceive()) {
      rtn = false;
    c5b2:	movs	r4, #0
      break;
    }
  }
  if (!spiActive) {
    c5b4:	cmp	r7, #0
    c5b6:	beq.n	c5aa <SdSpiCard::isBusy()+0x2a>
    c5b8:	b.n	c5ae <SdSpiCard::isBusy()+0x2e>
    c5ba:	bl	c4c8 <SdSpiCard::spiStart() [clone .part.5] [clone .constprop.25]>
    c5be:	b.n	c58e <SdSpiCard::isBusy()+0xe>
    c5c0:	mov	r0, r5
    c5c2:	bl	c4e0 <SdSpiCard::spiStop() [clone .part.6] [clone .constprop.27]>
    spiStop();
  }
  return rtn;
    c5c6:	mov	r0, r4
    c5c8:	pop	{r3, r4, r5, r6, r7, pc}
}
//------------------------------------------------------------------------------
bool SdSpiCard::isBusy() {
#if ENABLE_DEDICATED_SPI
  if (m_curState == READ_STATE) {
    return false;
    c5ca:	movs	r0, #0
    c5cc:	pop	{r3, r4, r5, r6, r7, pc}
    c5ce:	nop

0000c5d0 <SdSpiCard::readData(unsigned char*, unsigned int)>:
//------------------------------------------------------------------------------
bool SdSpiCard::readData(uint8_t* dst) {
  return readData(dst, 512);
}
//------------------------------------------------------------------------------
bool SdSpiCard::readData(uint8_t* dst, size_t count) {
    c5d0:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    c5d4:	ldr	r6, [pc, #104]	; (c640 <SdSpiCard::readData(unsigned char*, unsigned int)+0x70>)
    c5d6:	mov	r4, r0
    c5d8:	mov	r8, r1
    c5da:	mov	r9, r2
    c5dc:	ldr	r5, [r6, #0]
    c5de:	adds	r7, r0, #4

  DBG_BEGIN_TIME(DBG_WAIT_READ);
  // wait for start sector token
  SdMillis_t t0 = SysCall::curTimeMS();
  while ((m_status = spiReceive()) == 0XFF) {
    if (isTimedOut(t0, SD_READ_TIMEOUT)) {
    c5e0:	uxth	r5, r5
    c5e2:	b.n	c5f0 <SdSpiCard::readData(unsigned char*, unsigned int)+0x20>
    c5e4:	ldr	r3, [r6, #0]
    c5e6:	uxth	r3, r3
    c5e8:	subs	r3, r3, r5
    c5ea:	cmp.w	r3, #300	; 0x12c
    c5ee:	bgt.n	c614 <SdSpiCard::readData(unsigned char*, unsigned int)+0x44>
    c5f0:	mov	r0, r7
    c5f2:	bl	d9fc <SdSpiArduinoDriver::receive()>
#endif  // USE_SD_CRC

  DBG_BEGIN_TIME(DBG_WAIT_READ);
  // wait for start sector token
  SdMillis_t t0 = SysCall::curTimeMS();
  while ((m_status = spiReceive()) == 0XFF) {
    c5f6:	cmp	r0, #255	; 0xff
    c5f8:	strb	r0, [r4, #25]
    c5fa:	beq.n	c5e4 <SdSpiCard::readData(unsigned char*, unsigned int)+0x14>
      error(SD_CARD_ERROR_READ_TIMEOUT);
      goto fail;
    }
  }
  DBG_END_TIME(DBG_WAIT_READ);
  if (m_status != DATA_START_SECTOR) {
    c5fc:	cmp	r0, #254	; 0xfe
    c5fe:	beq.n	c61a <SdSpiCard::readData(unsigned char*, unsigned int)+0x4a>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    c600:	movs	r3, #24
    c602:	strb	r3, [r4, #23]
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    c604:	ldrb	r0, [r4, #24]
    c606:	cbz	r0, c610 <SdSpiCard::readData(unsigned char*, unsigned int)+0x40>
    c608:	mov	r0, r4
    c60a:	bl	c4e0 <SdSpiCard::spiStop() [clone .part.6] [clone .constprop.27]>
#endif  // USE_SD_CRC
  return true;

 fail:
  spiStop();
  return false;
    c60e:	movs	r0, #0
}
    c610:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    c614:	movs	r3, #29
    c616:	strb	r3, [r4, #23]
    c618:	b.n	c604 <SdSpiCard::readData(unsigned char*, unsigned int)+0x34>
  }
  uint8_t spiReceive() {
    return m_spiDriver.receive();
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver.receive(buf, n);
    c61a:	mov	r2, r9
    c61c:	mov	r1, r8
    c61e:	mov	r0, r7
    c620:	bl	da14 <SdSpiArduinoDriver::receive(unsigned char*, unsigned int)>
  if (m_status != DATA_START_SECTOR) {
    error(SD_CARD_ERROR_READ_TOKEN);
    goto fail;
  }
  // transfer data
  if ((m_status = spiReceive(dst, count))) {
    c624:	strb	r0, [r4, #25]
    c626:	cbz	r0, c62e <SdSpiCard::readData(unsigned char*, unsigned int)+0x5e>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    c628:	movs	r3, #37	; 0x25
    c62a:	strb	r3, [r4, #23]
    c62c:	b.n	c604 <SdSpiCard::readData(unsigned char*, unsigned int)+0x34>
  }
  void spiDeactivate() {
    m_spiDriver.deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver.receive();
    c62e:	mov	r0, r7
    c630:	bl	d9fc <SdSpiArduinoDriver::receive()>
    c634:	mov	r0, r7
    c636:	bl	d9fc <SdSpiArduinoDriver::receive()>
#else  // USE_SD_CRC
  // discard crc
  spiReceive();
  spiReceive();
#endif  // USE_SD_CRC
  return true;
    c63a:	movs	r0, #1
    c63c:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    c640:	.word	0x200447a4

0000c644 <SdSpiCard::waitNotBusy(unsigned short)>:
#endif  // ENABLE_DEDICATED_SPI
  return true;
}
//------------------------------------------------------------------------------
// wait for card to go not busy
bool SdSpiCard::waitNotBusy(SdMillis_t timeoutMS) {
    c644:	push	{r3, r4, r5, r6, r7, lr}
    c646:	ldr	r5, [pc, #40]	; (c670 <SdSpiCard::waitNotBusy(unsigned short)+0x2c>)
    c648:	mov	r7, r1
    c64a:	adds	r6, r0, #4
    c64c:	ldr	r4, [r5, #0]
  }
  return false;
#else  // WDT_YIELD_TIME_MILLIS
  // Check not busy first since yield is not called in isTimedOut.
  while (spiReceive() != 0XFF) {
    if (isTimedOut(t0, timeoutMS)) {
    c64e:	uxth	r4, r4
    c650:	b.n	c65c <SdSpiCard::waitNotBusy(unsigned short)+0x18>
    c652:	ldr	r3, [r5, #0]
    c654:	uxth	r3, r3
    c656:	subs	r3, r3, r4
    c658:	cmp	r3, r7
    c65a:	bgt.n	c66a <SdSpiCard::waitNotBusy(unsigned short)+0x26>
    c65c:	mov	r0, r6
    c65e:	bl	d9fc <SdSpiArduinoDriver::receive()>
    }
  }
  return false;
#else  // WDT_YIELD_TIME_MILLIS
  // Check not busy first since yield is not called in isTimedOut.
  while (spiReceive() != 0XFF) {
    c662:	cmp	r0, #255	; 0xff
    c664:	bne.n	c652 <SdSpiCard::waitNotBusy(unsigned short)+0xe>
    if (isTimedOut(t0, timeoutMS)) {
      return false;
    }
  }
  return true;
    c666:	movs	r0, #1
#endif  // WDT_YIELD_TIME_MILLIS
}
    c668:	pop	{r3, r4, r5, r6, r7, pc}
  return false;
#else  // WDT_YIELD_TIME_MILLIS
  // Check not busy first since yield is not called in isTimedOut.
  while (spiReceive() != 0XFF) {
    if (isTimedOut(t0, timeoutMS)) {
      return false;
    c66a:	movs	r0, #0
    c66c:	pop	{r3, r4, r5, r6, r7, pc}
    c66e:	nop
    c670:	.word	0x200447a4

0000c674 <SdSpiCard::cardCommand(unsigned char, unsigned long)>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
    c674:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c678:	sub	sp, #8
#if ENABLE_DEDICATED_SPI
  if (m_curState != IDLE_STATE && !syncDevice()) {
    c67a:	ldrb	r3, [r0, #20]
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
    c67c:	mov	r5, r0
    c67e:	mov	r7, r1
    c680:	str	r2, [sp, #4]
#if ENABLE_DEDICATED_SPI
  if (m_curState != IDLE_STATE && !syncDevice()) {
    c682:	cmp	r3, #0
    c684:	bne.n	c6ea <SdSpiCard::cardCommand(unsigned char, unsigned long)+0x76>
    return 0XFF;
  }
#endif  // ENABLE_DEDICATED_SPI
  // select card
  if (!m_spiActive) {
    c686:	ldrb	r3, [r5, #24]
    c688:	cmp	r3, #0
    c68a:	beq.n	c708 <SdSpiCard::cardCommand(unsigned char, unsigned long)+0x94>
    spiStart();
  }
  // wait if busy unless CMD0
  if (cmd != CMD0) {
    c68c:	cmp	r7, #0
    c68e:	bne.n	c6fc <SdSpiCard::cardCommand(unsigned char, unsigned long)+0x88>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver.receive(buf, n);
  }
  void spiSend(uint8_t data) {
    m_spiDriver.send(data);
    c690:	adds	r6, r5, #4
    c692:	orr.w	r1, r7, #64	; 0x40
    c696:	add.w	r8, sp, #4
    c69a:	add	r4, sp, #8
    c69c:	mov	r0, r6
    c69e:	bl	da34 <SdSpiArduinoDriver::send(unsigned char)>
    c6a2:	ldrb.w	r1, [r4, #-1]!
    c6a6:	mov	r0, r6
    c6a8:	bl	da34 <SdSpiArduinoDriver::send(unsigned char)>
  // send command
  spiSend(cmd | 0x40);

  // send argument
  uint8_t* pa = reinterpret_cast<uint8_t*>(&arg);
  for (int8_t i = 3; i >= 0; i--) {
    c6ac:	cmp	r8, r4
    c6ae:	bne.n	c6a2 <SdSpiCard::cardCommand(unsigned char, unsigned long)+0x2e>
    spiSend(pa[i]);
  }

  // send CRC - correct for CMD0 with arg zero or CMD8 with arg 0X1AA
  spiSend(cmd == CMD0 ? 0X95 : 0X87);
    c6b0:	cmp	r7, #0
    c6b2:	mov	r0, r6
  }
  void spiDeactivate() {
    m_spiDriver.deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver.receive();
    c6b4:	mov.w	r4, #0
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver.receive(buf, n);
  }
  void spiSend(uint8_t data) {
    m_spiDriver.send(data);
    c6b8:	ite	eq
    c6ba:	moveq	r1, #149	; 0x95
    c6bc:	movne	r1, #135	; 0x87
    c6be:	bl	da34 <SdSpiArduinoDriver::send(unsigned char)>
  }
  void spiDeactivate() {
    m_spiDriver.deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver.receive();
    c6c2:	mov	r0, r6
    c6c4:	bl	d9fc <SdSpiArduinoDriver::receive()>
    c6c8:	mov	r0, r6
    c6ca:	bl	d9fc <SdSpiArduinoDriver::receive()>

  // discard first fill byte to avoid MISO pull-up problem.
  spiReceive();

  // there are 1-8 fill bytes before response.  fill bytes should be 0XFF.
  for (uint8_t i = 0; ((m_status = spiReceive()) & 0X80) && i < 10; i++) {
    c6ce:	strb	r0, [r5, #25]
    c6d0:	uxtb	r3, r4
    c6d2:	adds	r4, #1
    c6d4:	lsrs	r2, r0, #7
    c6d6:	cmp	r3, #9
    c6d8:	ite	hi
    c6da:	movhi	r3, #0
    c6dc:	andls.w	r3, r2, #1
    c6e0:	cmp	r3, #0
    c6e2:	bne.n	c6c8 <SdSpiCard::cardCommand(unsigned char, unsigned long)+0x54>
  }
  return m_status;
}
    c6e4:	add	sp, #8
    c6e6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
}
//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
#if ENABLE_DEDICATED_SPI
  if (m_curState != IDLE_STATE && !syncDevice()) {
    c6ea:	ldr	r3, [r0, #0]
    c6ec:	ldr	r3, [r3, #24]
    c6ee:	blx	r3
    c6f0:	cmp	r0, #0
    c6f2:	bne.n	c686 <SdSpiCard::cardCommand(unsigned char, unsigned long)+0x12>
    return 0XFF;
    c6f4:	movs	r0, #255	; 0xff

  // there are 1-8 fill bytes before response.  fill bytes should be 0XFF.
  for (uint8_t i = 0; ((m_status = spiReceive()) & 0X80) && i < 10; i++) {
  }
  return m_status;
}
    c6f6:	add	sp, #8
    c6f8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    spiStart();
  }
  // wait if busy unless CMD0
  if (cmd != CMD0) {
    DBG_BEGIN_TIME(DBG_CMD_BUSY);
    waitNotBusy(SD_CMD_TIMEOUT);
    c6fc:	mov.w	r1, #300	; 0x12c
    c700:	mov	r0, r5
    c702:	bl	c644 <SdSpiCard::waitNotBusy(unsigned short)>
    c706:	b.n	c690 <SdSpiCard::cardCommand(unsigned char, unsigned long)+0x1c>
    c708:	mov	r0, r5
    c70a:	bl	c4c8 <SdSpiCard::spiStart() [clone .part.5] [clone .constprop.25]>
    c70e:	b.n	c68c <SdSpiCard::cardCommand(unsigned char, unsigned long)+0x18>

0000c710 <SdSpiCard::begin(SdSpiConfig)>:
#endif  // CRC_CCITT
#endif  // USE_SD_CRC
//==============================================================================
// SdSpiCard member functions
//------------------------------------------------------------------------------
bool SdSpiCard::begin(SdSpiConfig spiConfig) {
    c710:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c714:	sub	sp, #36	; 0x24
  SdMillis_t t0 = SysCall::curTimeMS();
  m_spiActive = false;
    c716:	mov.w	fp, #0
#endif  // CRC_CCITT
#endif  // USE_SD_CRC
//==============================================================================
// SdSpiCard member functions
//------------------------------------------------------------------------------
bool SdSpiCard::begin(SdSpiConfig spiConfig) {
    c71a:	mov	r6, r0
#if SPI_DRIVER_SELECT < 2
  void spiActivate() {
    m_spiDriver.activate();
  }
  void spiBegin(SdSpiConfig spiConfig) {
    m_spiDriver.begin(spiConfig);
    c71c:	adds	r5, r0, #4
    c71e:	add	r4, sp, #4
  SdMillis_t t0 = SysCall::curTimeMS();
  m_spiActive = false;
    c720:	strb.w	fp, [r0, #24]
  m_errorCode = SD_CARD_ERROR_NONE;
    c724:	strb.w	fp, [r0, #23]
  m_type = 0;
    c728:	strb.w	fp, [r0, #26]
    c72c:	ldr	r7, [pc, #428]	; (c8dc <SdSpiCard::begin(SdSpiConfig)+0x1cc>)
#endif  // CRC_CCITT
#endif  // USE_SD_CRC
//==============================================================================
// SdSpiCard member functions
//------------------------------------------------------------------------------
bool SdSpiCard::begin(SdSpiConfig spiConfig) {
    c72e:	stmia.w	r4, {r1, r2, r3}
    c732:	ldrb.w	r0, [sp, #4]
    c736:	ldrb.w	sl, [sp, #5]
  SdMillis_t t0 = SysCall::curTimeMS();
  m_spiActive = false;
  m_errorCode = SD_CARD_ERROR_NONE;
  m_type = 0;
  m_csPin = spiConfig.csPin;
    c73a:	strb	r0, [r6, #22]
    c73c:	ldr.w	r8, [r7]
    c740:	ldr.w	r9, [sp, #8]
  if (!m_spiDriverPtr) {
    error(SD_CARD_ERROR_INVALID_CARD_CONFIG);
    goto fail;
  }
#endif  // SPI_DRIVER_SELECT
  sdCsInit(m_csPin);
    c744:	bl	da98 <sdCsInit(unsigned char)>
  }
  void type(uint8_t value) {
    m_type = value;
  }
  void spiUnselect() {
    sdCsWrite(m_csPin, true);
    c748:	ldrb	r0, [r6, #22]
    c74a:	movs	r1, #1
    c74c:	bl	daa0 <sdCsWrite(unsigned char, bool)>
  /** Save high speed SPISettings after SD initialization.
   *
   * \param[in] maxSck Maximum SCK frequency.
   */
  void setSckSpeed(uint32_t maxSck) {
    m_spiSettings = SPISettings(maxSck, MSBFIRST, SPI_MODE0);
    c750:	ldr	r1, [pc, #396]	; (c8e0 <SdSpiCard::begin(SdSpiConfig)+0x1d0>)
    c752:	movs	r2, #7
    c754:	add	r3, sp, #20
    c756:	str	r1, [r6, #8]
    c758:	str	r2, [r6, #12]
    c75a:	ldmia.w	r4, {r0, r1, r2}
    c75e:	stmia.w	r3, {r0, r1, r2}
#if SPI_DRIVER_SELECT < 2
  void spiActivate() {
    m_spiDriver.activate();
  }
  void spiBegin(SdSpiConfig spiConfig) {
    m_spiDriver.begin(spiConfig);
    c762:	mov	r0, r5
    c764:	ldmia	r3, {r1, r2, r3}
    c766:	bl	d970 <SdSpiArduinoDriver::begin(SdSpiConfig)>
  spiSetSckSpeed(1000UL*SD_MAX_INIT_RATE_KHZ);
  spiBegin(spiConfig);
  uint32_t arg;
#if ENABLE_DEDICATED_SPI
  m_curState = IDLE_STATE;
  m_sharedSpi = spiOptionShared(spiConfig.options);
    c76a:	and.w	r3, sl, #1
  csd_t csd;
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStart() {
  if (!m_spiActive) {
    c76e:	ldrb	r2, [r6, #24]
  spiSetSckSpeed(1000UL*SD_MAX_INIT_RATE_KHZ);
  spiBegin(spiConfig);
  uint32_t arg;
#if ENABLE_DEDICATED_SPI
  m_curState = IDLE_STATE;
  m_sharedSpi = spiOptionShared(spiConfig.options);
    c770:	eor.w	r3, r3, #1
  spiUnselect();
  spiSetSckSpeed(1000UL*SD_MAX_INIT_RATE_KHZ);
  spiBegin(spiConfig);
  uint32_t arg;
#if ENABLE_DEDICATED_SPI
  m_curState = IDLE_STATE;
    c774:	strb.w	fp, [r6, #20]
  m_sharedSpi = spiOptionShared(spiConfig.options);
    c778:	strb	r3, [r6, #21]
  csd_t csd;
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStart() {
  if (!m_spiActive) {
    c77a:	cmp	r2, #0
    c77c:	beq.w	c88a <SdSpiCard::begin(SdSpiConfig)+0x17a>
  }
  void type(uint8_t value) {
    m_type = value;
  }
  void spiUnselect() {
    sdCsWrite(m_csPin, true);
    c780:	movs	r1, #1
    c782:	ldrb	r0, [r6, #22]
    c784:	movs	r4, #10
    c786:	bl	daa0 <sdCsWrite(unsigned char, bool)>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver.receive(buf, n);
  }
  void spiSend(uint8_t data) {
    m_spiDriver.send(data);
    c78a:	movs	r1, #255	; 0xff
    c78c:	mov	r0, r5
    c78e:	bl	da34 <SdSpiArduinoDriver::send(unsigned char)>
    c792:	subs	r3, r4, #1
#endif  // ENABLE_DEDICATED_SPI
  spiStart();

  // must supply min of 74 clock cycles with CS high.
  spiUnselect();
  for (uint8_t i = 0; i < 10; i++) {
    c794:	ands.w	r4, r3, #255	; 0xff
    c798:	bne.n	c78a <SdSpiCard::begin(SdSpiConfig)+0x7a>
  uint8_t cardCommand(uint8_t cmd, uint32_t arg);
  bool isTimedOut(SdMillis_t startMS, SdMillis_t timeoutMS);
  bool readData(uint8_t* dst, size_t count);
  bool readRegister(uint8_t cmd, void* buf);
  void spiSelect() {
    sdCsWrite(m_csPin, false);
    c79a:	mov	r1, r4
    c79c:	ldrb	r0, [r6, #22]
    c79e:	mov.w	sl, #10
    c7a2:	bl	daa0 <sdCsWrite(unsigned char, bool)>
  spiSelect();
  DBG_BEGIN_TIME(DBG_CMD0_TIME);
  // command to go idle in SPI mode
  for (uint8_t i = 1;; i++) {
    DBG_EVENT_COUNT(DBG_CMD0_COUNT);
    if (cardCommand(CMD0, 0) == R1_IDLE_STATE) {
    c7a6:	movs	r2, #0
    c7a8:	mov	r0, r6
    c7aa:	mov	r1, r2
    c7ac:	bl	c674 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    c7b0:	cmp	r0, #1
    c7b2:	mov	r4, r0
    c7b4:	beq.n	c7ee <SdSpiCard::begin(SdSpiConfig)+0xde>
    c7b6:	add.w	r3, sl, #4294967295
      break;
    }
    if (i == SD_CMD0_RETRY) {
    c7ba:	ands.w	sl, r3, #255	; 0xff
    c7be:	beq.n	c7d8 <SdSpiCard::begin(SdSpiConfig)+0xc8>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver.receive(buf, n);
  }
  void spiSend(uint8_t data) {
    m_spiDriver.send(data);
    c7c0:	movs	r1, #253	; 0xfd
    c7c2:	mov	r0, r5
    c7c4:	mov.w	r4, #520	; 0x208
    c7c8:	bl	da34 <SdSpiArduinoDriver::send(unsigned char)>
  }
  void spiDeactivate() {
    m_spiDriver.deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver.receive();
    c7cc:	mov	r0, r5
    c7ce:	bl	d9fc <SdSpiArduinoDriver::receive()>
      goto fail;
    }
    // stop multi-block write
    spiSend(STOP_TRAN_TOKEN);
    // finish block transfer
    for (int i = 0; i < 520; i++) {
    c7d2:	subs	r4, #1
    c7d4:	bne.n	c7cc <SdSpiCard::begin(SdSpiConfig)+0xbc>
    c7d6:	b.n	c7a6 <SdSpiCard::begin(SdSpiConfig)+0x96>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    c7d8:	movs	r3, #1
    c7da:	strb	r3, [r6, #23]
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    c7dc:	ldrb	r0, [r6, #24]
    c7de:	cbz	r0, c7e8 <SdSpiCard::begin(SdSpiConfig)+0xd8>
    c7e0:	mov	r0, r6
    c7e2:	bl	c4e0 <SdSpiCard::spiStop() [clone .part.6] [clone .constprop.27]>
  spiSetSckSpeed(spiConfig.maxSck);
  return true;

 fail:
  spiStop();
  return false;
    c7e6:	movs	r0, #0
}
    c7e8:	add	sp, #36	; 0x24
    c7ea:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    goto fail;
  }
#endif  // USE_SD_CRC

  // check SD version
  if (!(cardCommand(CMD8, 0x1AA) & R1_ILLEGAL_COMMAND)) {
    c7ee:	mov.w	r2, #426	; 0x1aa
    c7f2:	movs	r1, #8
    c7f4:	mov	r0, r6
    c7f6:	bl	c674 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    c7fa:	lsls	r3, r0, #29
    c7fc:	bmi.n	c81e <SdSpiCard::begin(SdSpiConfig)+0x10e>
  bool readRegister(uint8_t cmd, void* buf);
  void spiSelect() {
    sdCsWrite(m_csPin, false);
  }
  void type(uint8_t value) {
    m_type = value;
    c7fe:	movs	r3, #2
    c800:	movs	r4, #4
    c802:	strb	r3, [r6, #26]
    c804:	subs	r4, #1
  }
  void spiDeactivate() {
    m_spiDriver.deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver.receive();
    c806:	mov	r0, r5
    c808:	bl	d9fc <SdSpiArduinoDriver::receive()>
    type(SD_CARD_TYPE_SD2);
    for (uint8_t i = 0; i < 4; i++) {
      m_status = spiReceive();
    c80c:	strb	r0, [r6, #25]
#endif  // USE_SD_CRC

  // check SD version
  if (!(cardCommand(CMD8, 0x1AA) & R1_ILLEGAL_COMMAND)) {
    type(SD_CARD_TYPE_SD2);
    for (uint8_t i = 0; i < 4; i++) {
    c80e:	ands.w	r4, r4, #255	; 0xff
    c812:	bne.n	c804 <SdSpiCard::begin(SdSpiConfig)+0xf4>
      m_status = spiReceive();
    }
    if (m_status != 0XAA) {
    c814:	cmp	r0, #170	; 0xaa
    c816:	beq.n	c820 <SdSpiCard::begin(SdSpiConfig)+0x110>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    c818:	movs	r3, #6
    c81a:	strb	r3, [r6, #23]
    c81c:	b.n	c7dc <SdSpiCard::begin(SdSpiConfig)+0xcc>
  bool readRegister(uint8_t cmd, void* buf);
  void spiSelect() {
    sdCsWrite(m_csPin, false);
  }
  void type(uint8_t value) {
    m_type = value;
    c81e:	strb	r4, [r6, #26]
    }
  } else {
    type(SD_CARD_TYPE_SD1);
  }
  // initialize card and send host supports SDHC if SD2
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
    c820:	ldr	r3, [r6, #0]
    c822:	ldr.w	sl, [pc, #192]	; c8e4 <SdSpiCard::begin(SdSpiConfig)+0x1d4>
    c826:	ldr	r3, [r3, #64]	; 0x40
    c828:	cmp	r3, sl
    c82a:	bne.n	c892 <SdSpiCard::begin(SdSpiConfig)+0x182>
  bool syncDevice();
  /** Return the card type: SD V1, SD V2 or SDHC/SDXC
   * \return 0 - SD V1, 1 - SD V2, or 3 - SDHC/SDXC.
   */
  uint8_t type() const {
    return m_type;
    c82c:	ldrb	r0, [r6, #26]
    c82e:	cmp	r0, #2
    c830:	ite	eq
    c832:	moveq.w	r4, #1073741824	; 0x40000000
    c836:	movne	r4, #0
    c838:	b.n	c846 <SdSpiCard::begin(SdSpiConfig)+0x136>
    c83a:	ldr	r3, [r7, #0]
  DBG_BEGIN_TIME(DBG_ACMD41_TIME);
  while (cardAcmd(ACMD41, arg) != R1_READY_STATE) {
    DBG_EVENT_COUNT(DBG_ACMD41_COUNT);
    // check for timeout
    if (isTimedOut(t0, SD_INIT_TIMEOUT)) {
    c83c:	uxth	r3, r3
    c83e:	subs	r3, r3, r2
    c840:	cmp.w	r3, #2000	; 0x7d0
    c844:	bgt.n	c898 <SdSpiCard::begin(SdSpiConfig)+0x188>
  void spiStop();

 private:
  // private functions
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
    cardCommand(CMD55, 0);
    c846:	movs	r2, #0
    c848:	movs	r1, #55	; 0x37
    c84a:	mov	r0, r6
    c84c:	bl	c674 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    return cardCommand(cmd, arg);
    c850:	mov	r2, r4
    c852:	movs	r1, #41	; 0x29
    c854:	mov	r0, r6
    c856:	bl	c674 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    c85a:	uxth.w	r2, r8
    type(SD_CARD_TYPE_SD1);
  }
  // initialize card and send host supports SDHC if SD2
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
  DBG_BEGIN_TIME(DBG_ACMD41_TIME);
  while (cardAcmd(ACMD41, arg) != R1_READY_STATE) {
    c85e:	cmp	r0, #0
    c860:	bne.n	c83a <SdSpiCard::begin(SdSpiConfig)+0x12a>
    }
  }
  DBG_END_TIME(DBG_ACMD41_TIME);

  // if SD2 read OCR register to check for SDHC card
  if (type() == SD_CARD_TYPE_SD2) {
    c862:	ldr	r3, [r6, #0]
    c864:	ldr	r3, [r3, #64]	; 0x40
    c866:	cmp	r3, sl
    c868:	bne.n	c89e <SdSpiCard::begin(SdSpiConfig)+0x18e>
  bool syncDevice();
  /** Return the card type: SD V1, SD V2 or SDHC/SDXC
   * \return 0 - SD V1, 1 - SD V2, or 3 - SDHC/SDXC.
   */
  uint8_t type() const {
    return m_type;
    c86a:	ldrb	r0, [r6, #26]
    c86c:	cmp	r0, #2
    c86e:	beq.n	c8a4 <SdSpiCard::begin(SdSpiConfig)+0x194>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    c870:	ldrb	r3, [r6, #24]
    c872:	cbz	r3, c87a <SdSpiCard::begin(SdSpiConfig)+0x16a>
    c874:	mov	r0, r6
    c876:	bl	c4e0 <SdSpiCard::spiStop() [clone .part.6] [clone .constprop.27]>
    c87a:	movs	r3, #7
      spiReceive();
    }
  }
  spiStop();
  spiSetSckSpeed(spiConfig.maxSck);
  return true;
    c87c:	movs	r0, #1
    c87e:	str.w	r9, [r6, #8]
    c882:	str	r3, [r6, #12]

 fail:
  spiStop();
  return false;
}
    c884:	add	sp, #36	; 0x24
    c886:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c88a:	mov	r0, r6
    c88c:	bl	c4c8 <SdSpiCard::spiStart() [clone .part.5] [clone .constprop.25]>
    c890:	b.n	c780 <SdSpiCard::begin(SdSpiConfig)+0x70>
    }
  } else {
    type(SD_CARD_TYPE_SD1);
  }
  // initialize card and send host supports SDHC if SD2
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
    c892:	mov	r0, r6
    c894:	blx	r3
    c896:	b.n	c82e <SdSpiCard::begin(SdSpiConfig)+0x11e>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    c898:	movs	r3, #23
    c89a:	strb	r3, [r6, #23]
    c89c:	b.n	c7dc <SdSpiCard::begin(SdSpiConfig)+0xcc>
    }
  }
  DBG_END_TIME(DBG_ACMD41_TIME);

  // if SD2 read OCR register to check for SDHC card
  if (type() == SD_CARD_TYPE_SD2) {
    c89e:	mov	r0, r6
    c8a0:	blx	r3
    c8a2:	b.n	c86c <SdSpiCard::begin(SdSpiConfig)+0x15c>
    if (cardCommand(CMD58, 0)) {
    c8a4:	movs	r2, #0
    c8a6:	movs	r1, #58	; 0x3a
    c8a8:	mov	r0, r6
    c8aa:	bl	c674 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    c8ae:	cbz	r0, c8b6 <SdSpiCard::begin(SdSpiConfig)+0x1a6>
    c8b0:	movs	r3, #18
    c8b2:	strb	r3, [r6, #23]
    c8b4:	b.n	c7dc <SdSpiCard::begin(SdSpiConfig)+0xcc>
  }
  void spiDeactivate() {
    m_spiDriver.deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver.receive();
    c8b6:	mov	r0, r5
    c8b8:	bl	d9fc <SdSpiArduinoDriver::receive()>
      error(SD_CARD_ERROR_CMD58);
      goto fail;
    }
    if ((spiReceive() & 0XC0) == 0XC0) {
    c8bc:	and.w	r0, r0, #192	; 0xc0
    c8c0:	cmp	r0, #192	; 0xc0
    c8c2:	bne.n	c8c8 <SdSpiCard::begin(SdSpiConfig)+0x1b8>
  bool readRegister(uint8_t cmd, void* buf);
  void spiSelect() {
    sdCsWrite(m_csPin, false);
  }
  void type(uint8_t value) {
    m_type = value;
    c8c4:	movs	r3, #3
    c8c6:	strb	r3, [r6, #26]
  }
  void spiDeactivate() {
    m_spiDriver.deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver.receive();
    c8c8:	mov	r0, r5
    c8ca:	bl	d9fc <SdSpiArduinoDriver::receive()>
    c8ce:	mov	r0, r5
    c8d0:	bl	d9fc <SdSpiArduinoDriver::receive()>
    c8d4:	mov	r0, r5
    c8d6:	bl	d9fc <SdSpiArduinoDriver::receive()>
    c8da:	b.n	c870 <SdSpiCard::begin(SdSpiConfig)+0x160>
    c8dc:	.word	0x200447a4
    c8e0:	.word	0x00061a80
    c8e4:	.word	0x0000c4b1

0000c8e8 <SdSpiCard::readOCR(unsigned long*)>:
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readOCR(uint32_t* ocr) {
    c8e8:	push	{r3, r4, r5, r6, r7, lr}
  uint8_t* p = reinterpret_cast<uint8_t*>(ocr);
  if (cardCommand(CMD58, 0)) {
    c8ea:	movs	r2, #0
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readOCR(uint32_t* ocr) {
    c8ec:	mov	r5, r1
  uint8_t* p = reinterpret_cast<uint8_t*>(ocr);
  if (cardCommand(CMD58, 0)) {
    c8ee:	movs	r1, #58	; 0x3a
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readOCR(uint32_t* ocr) {
    c8f0:	mov	r6, r0
  uint8_t* p = reinterpret_cast<uint8_t*>(ocr);
  if (cardCommand(CMD58, 0)) {
    c8f2:	bl	c674 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    c8f6:	cbnz	r0, c914 <SdSpiCard::readOCR(unsigned long*)+0x2c>
    c8f8:	adds	r7, r6, #4
    c8fa:	adds	r4, r5, #4
    c8fc:	mov	r0, r7
    c8fe:	bl	d9fc <SdSpiArduinoDriver::receive()>
    error(SD_CARD_ERROR_CMD58);
    goto fail;
  }
  for (uint8_t i = 0; i < 4; i++) {
    p[3 - i] = spiReceive();
    c902:	strb.w	r0, [r4, #-1]!
  uint8_t* p = reinterpret_cast<uint8_t*>(ocr);
  if (cardCommand(CMD58, 0)) {
    error(SD_CARD_ERROR_CMD58);
    goto fail;
  }
  for (uint8_t i = 0; i < 4; i++) {
    c906:	cmp	r5, r4
    c908:	bne.n	c8fc <SdSpiCard::readOCR(unsigned long*)+0x14>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    c90a:	ldrb	r4, [r6, #24]
    c90c:	cbnz	r4, c92a <SdSpiCard::readOCR(unsigned long*)+0x42>
    c90e:	movs	r4, #1
  return true;

 fail:
  spiStop();
  return false;
}
    c910:	mov	r0, r4
    c912:	pop	{r3, r4, r5, r6, r7, pc}
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    c914:	movs	r3, #18
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    c916:	ldrb	r4, [r6, #24]
    c918:	strb	r3, [r6, #23]
    c91a:	cmp	r4, #0
    c91c:	beq.n	c910 <SdSpiCard::readOCR(unsigned long*)+0x28>
  spiStop();
  return true;

 fail:
  spiStop();
  return false;
    c91e:	movs	r4, #0
    c920:	mov	r0, r6
    c922:	bl	c4e0 <SdSpiCard::spiStop() [clone .part.6] [clone .constprop.27]>
}
    c926:	mov	r0, r4
    c928:	pop	{r3, r4, r5, r6, r7, pc}
    c92a:	mov	r0, r6
    c92c:	bl	c4e0 <SdSpiCard::spiStop() [clone .part.6] [clone .constprop.27]>
    c930:	mov	r0, r4
    c932:	pop	{r3, r4, r5, r6, r7, pc}

0000c934 <SdSpiCard::readRegister(unsigned char, void*)>:
//------------------------------------------------------------------------------
/** read CID or CSR register */
bool SdSpiCard::readRegister(uint8_t cmd, void* buf) {
    c934:	push	{r3, r4, r5, lr}
    c936:	mov	r5, r2
  uint8_t* dst = reinterpret_cast<uint8_t*>(buf);
  if (cardCommand(cmd, 0)) {
    c938:	movs	r2, #0
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
/** read CID or CSR register */
bool SdSpiCard::readRegister(uint8_t cmd, void* buf) {
    c93a:	mov	r4, r0
  uint8_t* dst = reinterpret_cast<uint8_t*>(buf);
  if (cardCommand(cmd, 0)) {
    c93c:	bl	c674 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    c940:	cbz	r0, c954 <SdSpiCard::readRegister(unsigned char, void*)+0x20>
    c942:	movs	r3, #27
    c944:	strb	r3, [r4, #23]
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    c946:	ldrb	r0, [r4, #24]
    c948:	cbz	r0, c952 <SdSpiCard::readRegister(unsigned char, void*)+0x1e>
    c94a:	mov	r0, r4
    c94c:	bl	c4e0 <SdSpiCard::spiStop() [clone .part.6] [clone .constprop.27]>
  spiStop();
  return true;

 fail:
  spiStop();
  return false;
    c950:	movs	r0, #0
}
    c952:	pop	{r3, r4, r5, pc}
  uint8_t* dst = reinterpret_cast<uint8_t*>(buf);
  if (cardCommand(cmd, 0)) {
    error(SD_CARD_ERROR_READ_REG);
    goto fail;
  }
  if (!readData(dst, 16)) {
    c954:	mov	r1, r5
    c956:	movs	r2, #16
    c958:	mov	r0, r4
    c95a:	bl	c5d0 <SdSpiCard::readData(unsigned char*, unsigned int)>
    c95e:	cmp	r0, #0
    c960:	beq.n	c946 <SdSpiCard::readRegister(unsigned char, void*)+0x12>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    c962:	ldrb	r5, [r4, #24]
    c964:	cmp	r5, #0
    c966:	beq.n	c952 <SdSpiCard::readRegister(unsigned char, void*)+0x1e>
    c968:	mov	r0, r4
    c96a:	bl	c4e0 <SdSpiCard::spiStop() [clone .part.6] [clone .constprop.27]>
    c96e:	mov	r0, r5
    c970:	pop	{r3, r4, r5, pc}
    c972:	nop

0000c974 <SdSpiCard::readCSD(csd_t*)>:
   * \param[out] csd pointer to area for returned data.
   *
   * \return true for success or false for failure.
   */
  bool readCSD(csd_t* csd) {
    return readRegister(CMD9, csd);
    c974:	mov	r2, r1
    c976:	movs	r1, #9
    c978:	b.w	c934 <SdSpiCard::readRegister(unsigned char, void*)>

0000c97c <SdSpiCard::readCID(CID*)>:
   * \param[out] cid pointer to area for returned data.
   *
   * \return true for success or false for failure.
   */
  bool readCID(cid_t* cid) {
    return readRegister(CMD10, cid);
    c97c:	mov	r2, r1
    c97e:	movs	r1, #10
    c980:	b.w	c934 <SdSpiCard::readRegister(unsigned char, void*)>

0000c984 <SdSpiCard::sectorCount()>:
  return false;
}
//------------------------------------------------------------------------------
uint32_t SdSpiCard::sectorCount() {
  csd_t csd;
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
    c984:	ldr	r3, [r0, #0]
    c986:	ldr	r2, [pc, #144]	; (ca18 <SdSpiCard::sectorCount()+0x94>)
    c988:	ldr	r3, [r3, #52]	; 0x34
    c98a:	cmp	r3, r2
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
uint32_t SdSpiCard::sectorCount() {
    c98c:	push	{r4, r5, lr}
    c98e:	sub	sp, #20
    c990:	bne.n	c9f2 <SdSpiCard::sectorCount()+0x6e>
   * \param[out] csd pointer to area for returned data.
   *
   * \return true for success or false for failure.
   */
  bool readCSD(csd_t* csd) {
    return readRegister(CMD9, csd);
    c992:	mov	r2, sp
    c994:	movs	r1, #9
    c996:	bl	c934 <SdSpiCard::readRegister(unsigned char, void*)>
  csd_t csd;
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
    c99a:	cbz	r0, c9ac <SdSpiCard::sectorCount()+0x28>
  csd1_t v1;
  csd2_t v2;
};
//-----------------------------------------------------------------------------
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    c99c:	ldrb.w	r3, [sp]
    c9a0:	ands.w	r3, r3, #192	; 0xc0
    c9a4:	beq.n	c9b0 <SdSpiCard::sectorCount()+0x2c>
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
  } else if (csd->v2.csd_ver == 1) {
    c9a6:	cmp	r3, #64	; 0x40
    c9a8:	beq.n	c9f8 <SdSpiCard::sectorCount()+0x74>
    c9aa:	movs	r0, #0
}
    c9ac:	add	sp, #20
    c9ae:	pop	{r4, r5, pc}
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    uint8_t read_bl_len = csd->v1.read_bl_len;
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
    c9b0:	ldrb.w	r4, [sp, #9]
};
//-----------------------------------------------------------------------------
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    uint8_t read_bl_len = csd->v1.read_bl_len;
    uint16_t c_size = (csd->v1.c_size_high << 10)
    c9b4:	ldrb.w	r3, [sp, #6]
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    c9b8:	ldrb.w	r2, [sp, #7]
    c9bc:	and.w	r4, r4, #3
  if (csd->v1.csd_ver == 0) {
    uint8_t read_bl_len = csd->v1.read_bl_len;
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    c9c0:	ldrb.w	r0, [sp, #10]
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    c9c4:	and.w	r3, r3, #3
    c9c8:	lsls	r4, r4, #1
  csd2_t v2;
};
//-----------------------------------------------------------------------------
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    uint8_t read_bl_len = csd->v1.read_bl_len;
    c9ca:	ldrb.w	r1, [sp, #5]
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    c9ce:	lsls	r2, r2, #2
//-----------------------------------------------------------------------------
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    uint8_t read_bl_len = csd->v1.read_bl_len;
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    c9d0:	ldrb.w	r5, [sp, #8]
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    c9d4:	orr.w	r0, r4, r0, lsr #7
    c9d8:	and.w	r1, r1, #15
    c9dc:	orr.w	r3, r2, r3, lsl #10
    c9e0:	add	r0, r1
    c9e2:	orr.w	r3, r3, r5, lsr #6
    c9e6:	subs	r0, #7
    c9e8:	adds	r3, #1
    c9ea:	lsl.w	r0, r3, r0
    c9ee:	add	sp, #20
    c9f0:	pop	{r4, r5, pc}
  return false;
}
//------------------------------------------------------------------------------
uint32_t SdSpiCard::sectorCount() {
  csd_t csd;
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
    c9f2:	mov	r1, sp
    c9f4:	blx	r3
    c9f6:	b.n	c99a <SdSpiCard::sectorCount()+0x16>
  } else if (csd->v2.csd_ver == 1) {
    return (((uint32_t)csd->v2.c_size_high << 16) +
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    c9f8:	ldrb.w	r3, [sp, #9]
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
  } else if (csd->v2.csd_ver == 1) {
    return (((uint32_t)csd->v2.c_size_high << 16) +
    c9fc:	ldrb.w	r1, [sp, #7]
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    ca00:	adds	r2, r3, #1
    ca02:	ldrb.w	r0, [sp, #8]
    ca06:	and.w	r3, r1, #63	; 0x3f
    ca0a:	add.w	r3, r2, r3, lsl #16
    ca0e:	add.w	r0, r3, r0, lsl #8
    ca12:	lsls	r0, r0, #10
}
    ca14:	add	sp, #20
    ca16:	pop	{r4, r5, pc}
    ca18:	.word	0x0000c975

0000ca1c <SdSpiCard::readStart(unsigned long)>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t sector) {
  if (type() != SD_CARD_TYPE_SDHC) {
    ca1c:	ldr	r3, [r0, #0]
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t sector) {
    ca1e:	mov	r2, r1
    ca20:	push	{r4, r5, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
    ca22:	ldr	r3, [r3, #64]	; 0x40
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t sector) {
    ca24:	sub	sp, #12
    ca26:	ldr	r5, [pc, #64]	; (ca68 <SdSpiCard::readStart(unsigned long)+0x4c>)
    ca28:	mov	r4, r0
    ca2a:	cmp	r3, r5
    ca2c:	bne.n	ca60 <SdSpiCard::readStart(unsigned long)+0x44>
  bool syncDevice();
  /** Return the card type: SD V1, SD V2 or SDHC/SDXC
   * \return 0 - SD V1, 1 - SD V2, or 3 - SDHC/SDXC.
   */
  uint8_t type() const {
    return m_type;
    ca2e:	ldrb	r0, [r0, #26]
  if (type() != SD_CARD_TYPE_SDHC) {
    ca30:	cmp	r0, #3
    sector <<= 9;
  }
  if (cardCommand(CMD18, sector)) {
    ca32:	mov.w	r1, #18
    ca36:	mov	r0, r4
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t sector) {
  if (type() != SD_CARD_TYPE_SDHC) {
    sector <<= 9;
    ca38:	it	ne
    ca3a:	lslne	r2, r2, #9
  }
  if (cardCommand(CMD18, sector)) {
    ca3c:	bl	c674 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    ca40:	cbz	r0, ca5a <SdSpiCard::readStart(unsigned long)+0x3e>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    ca42:	movs	r3, #12
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    ca44:	ldrb	r0, [r4, #24]
    ca46:	strb	r3, [r4, #23]
    ca48:	cbnz	r0, ca4e <SdSpiCard::readStart(unsigned long)+0x32>
  return true;

 fail:
  spiStop();
  return false;
}
    ca4a:	add	sp, #12
    ca4c:	pop	{r4, r5, pc}
    ca4e:	mov	r0, r4
    ca50:	bl	c4e0 <SdSpiCard::spiStop() [clone .part.6] [clone .constprop.27]>
    ca54:	movs	r0, #0
    ca56:	add	sp, #12
    ca58:	pop	{r4, r5, pc}
  if (cardCommand(CMD18, sector)) {
    error(SD_CARD_ERROR_CMD18);
    goto fail;
  }
//  spiStop();
  return true;
    ca5a:	movs	r0, #1

 fail:
  spiStop();
  return false;
}
    ca5c:	add	sp, #12
    ca5e:	pop	{r4, r5, pc}
    ca60:	str	r1, [sp, #4]
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t sector) {
  if (type() != SD_CARD_TYPE_SDHC) {
    ca62:	blx	r3
    ca64:	ldr	r2, [sp, #4]
    ca66:	b.n	ca30 <SdSpiCard::readStart(unsigned long)+0x14>
    ca68:	.word	0x0000c4b1

0000ca6c <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)>:
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readSectors(uint32_t sector, uint8_t* dst, size_t ns) {
    ca6c:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ca70:	mov	r7, r3
#if ENABLE_DEDICATED_SPI
  if (m_curState != READ_STATE || sector != m_curSector) {
    ca72:	ldrb	r3, [r0, #20]
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readSectors(uint32_t sector, uint8_t* dst, size_t ns) {
    ca74:	mov	r6, r0
    ca76:	mov	r5, r1
#if ENABLE_DEDICATED_SPI
  if (m_curState != READ_STATE || sector != m_curSector) {
    ca78:	cmp	r3, #1
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readSectors(uint32_t sector, uint8_t* dst, size_t ns) {
    ca7a:	mov	r4, r2
#if ENABLE_DEDICATED_SPI
  if (m_curState != READ_STATE || sector != m_curSector) {
    ca7c:	beq.n	cab2 <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x46>
    if (!readStart(sector)) {
    ca7e:	mov	r1, r5
    ca80:	mov	r0, r6
    ca82:	bl	ca1c <SdSpiCard::readStart(unsigned long)>
    ca86:	cbz	r0, caac <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x40>
      goto fail;
    }
    m_curSector = sector;
    m_curState = READ_STATE;
    ca88:	movs	r3, #1
#if ENABLE_DEDICATED_SPI
  if (m_curState != READ_STATE || sector != m_curSector) {
    if (!readStart(sector)) {
      goto fail;
    }
    m_curSector = sector;
    ca8a:	str	r5, [r6, #16]
    m_curState = READ_STATE;
    ca8c:	strb	r3, [r6, #20]
  }
  for (size_t i = 0; i < ns; i++, dst += 512) {
    ca8e:	cbz	r7, caba <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x4e>
    ca90:	movs	r5, #0
    ca92:	b.n	ca98 <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x2c>
    ca94:	cmp	r7, r5
    ca96:	beq.n	caba <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x4e>
    if (!readData(dst, 512)) {
    ca98:	mov.w	r2, #512	; 0x200
    ca9c:	mov	r1, r4
    ca9e:	mov	r0, r6
      goto fail;
    }
    m_curSector = sector;
    m_curState = READ_STATE;
  }
  for (size_t i = 0; i < ns; i++, dst += 512) {
    caa0:	adds	r5, #1
    caa2:	add	r4, r2
    if (!readData(dst, 512)) {
    caa4:	bl	c5d0 <SdSpiCard::readData(unsigned char*, unsigned int)>
    caa8:	cmp	r0, #0
    caaa:	bne.n	ca94 <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x28>
    }
  }
  return readStop();
#endif  // ENABLE_DEDICATED_SPI
 fail:
  return false;
    caac:	movs	r0, #0
    caae:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readSectors(uint32_t sector, uint8_t* dst, size_t ns) {
#if ENABLE_DEDICATED_SPI
  if (m_curState != READ_STATE || sector != m_curSector) {
    cab2:	ldr	r3, [r0, #16]
    cab4:	cmp	r3, r1
    cab6:	bne.n	ca7e <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x12>
    cab8:	b.n	ca8e <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x22>
  for (size_t i = 0; i < ns; i++, dst += 512) {
    if (!readData(dst, 512)) {
      goto fail;
    }
  }
  m_curSector += ns;
    caba:	ldr	r3, [r6, #16]
  return m_sharedSpi ? syncDevice() : true;
    cabc:	ldrb	r2, [r6, #21]
  for (size_t i = 0; i < ns; i++, dst += 512) {
    if (!readData(dst, 512)) {
      goto fail;
    }
  }
  m_curSector += ns;
    cabe:	add	r7, r3
    cac0:	str	r7, [r6, #16]
  return m_sharedSpi ? syncDevice() : true;
    cac2:	cbnz	r2, caca <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x5e>
    cac4:	movs	r0, #1
    cac6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    caca:	ldr	r3, [r6, #0]
    cacc:	mov	r0, r6
    cace:	ldr	r3, [r3, #24]
  }
  return readStop();
#endif  // ENABLE_DEDICATED_SPI
 fail:
  return false;
}
    cad0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    if (!readData(dst, 512)) {
      goto fail;
    }
  }
  m_curSector += ns;
  return m_sharedSpi ? syncDevice() : true;
    cad4:	bx	r3
    cad6:	nop

0000cad8 <SdSpiCard::readStop()>:
#endif  // ENABLE_DEDICATED_SPI
 fail:
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStop() {
    cad8:	push	{r3, r4, r5, lr}
  if (cardCommand(CMD12, 0)) {
    cada:	movs	r2, #0
    cadc:	movs	r1, #12
#endif  // ENABLE_DEDICATED_SPI
 fail:
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStop() {
    cade:	mov	r5, r0
  if (cardCommand(CMD12, 0)) {
    cae0:	bl	c674 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    cae4:	cbz	r0, caf2 <SdSpiCard::readStop()+0x1a>
    cae6:	movs	r3, #9
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    cae8:	ldrb	r4, [r5, #24]
    caea:	strb	r3, [r5, #23]
    caec:	cbnz	r4, cb06 <SdSpiCard::readStop()+0x2e>
  return true;

 fail:
  spiStop();
  return false;
}
    caee:	mov	r0, r4
    caf0:	pop	{r3, r4, r5, pc}
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    caf2:	ldrb	r4, [r5, #24]
    caf4:	cbnz	r4, cafc <SdSpiCard::readStop()+0x24>
  if (cardCommand(CMD12, 0)) {
    error(SD_CARD_ERROR_CMD12);
    goto fail;
  }
  spiStop();
  return true;
    caf6:	movs	r4, #1

 fail:
  spiStop();
  return false;
}
    caf8:	mov	r0, r4
    cafa:	pop	{r3, r4, r5, pc}
    cafc:	mov	r0, r5
    cafe:	bl	c4e0 <SdSpiCard::spiStop() [clone .part.6] [clone .constprop.27]>
    cb02:	mov	r0, r4
    cb04:	pop	{r3, r4, r5, pc}
    cb06:	movs	r4, #0
    cb08:	mov	r0, r5
    cb0a:	bl	c4e0 <SdSpiCard::spiStop() [clone .part.6] [clone .constprop.27]>
    cb0e:	mov	r0, r4
    cb10:	pop	{r3, r4, r5, pc}
    cb12:	nop

0000cb14 <SdSpiCard::syncDevice()>:
}
//------------------------------------------------------------------------------
bool SdSpiCard::syncDevice() {
#if ENABLE_DEDICATED_SPI
  // Insure no recursive loop with cardCommand().
  uint8_t state = m_curState;
    cb14:	ldrb	r2, [r0, #20]
  m_curState = IDLE_STATE;
    cb16:	movs	r1, #0
  if (state == WRITE_STATE) {
    cb18:	cmp	r2, #2
//------------------------------------------------------------------------------
bool SdSpiCard::syncDevice() {
#if ENABLE_DEDICATED_SPI
  // Insure no recursive loop with cardCommand().
  uint8_t state = m_curState;
  m_curState = IDLE_STATE;
    cb1a:	strb	r1, [r0, #20]
  if (state == WRITE_STATE) {
    cb1c:	beq.n	cb2a <SdSpiCard::syncDevice()+0x16>
    return writeStop();
  }
  if (state == READ_STATE) {
    cb1e:	cmp	r2, #1
    cb20:	beq.n	cb26 <SdSpiCard::syncDevice()+0x12>
    return readStop();
  }
#endif  // ENABLE_DEDICATED_SPI
  return true;
}
    cb22:	movs	r0, #1
    cb24:	bx	lr
  m_curState = IDLE_STATE;
  if (state == WRITE_STATE) {
    return writeStop();
  }
  if (state == READ_STATE) {
    return readStop();
    cb26:	b.w	cad8 <SdSpiCard::readStop()>
#if ENABLE_DEDICATED_SPI
  // Insure no recursive loop with cardCommand().
  uint8_t state = m_curState;
  m_curState = IDLE_STATE;
  if (state == WRITE_STATE) {
    return writeStop();
    cb2a:	ldr	r3, [r0, #0]
    cb2c:	ldr	r3, [r3, #76]	; 0x4c
    cb2e:	bx	r3

0000cb30 <SdSpiCard::writeStart(unsigned long)>:
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t sector) {
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    cb30:	ldr	r3, [r0, #0]
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t sector) {
    cb32:	mov	r2, r1
    cb34:	push	{r4, r5, lr}
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    cb36:	ldr	r3, [r3, #64]	; 0x40
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t sector) {
    cb38:	sub	sp, #12
    cb3a:	ldr	r5, [pc, #64]	; (cb7c <SdSpiCard::writeStart(unsigned long)+0x4c>)
    cb3c:	mov	r4, r0
    cb3e:	cmp	r3, r5
    cb40:	bne.n	cb74 <SdSpiCard::writeStart(unsigned long)+0x44>
  bool syncDevice();
  /** Return the card type: SD V1, SD V2 or SDHC/SDXC
   * \return 0 - SD V1, 1 - SD V2, or 3 - SDHC/SDXC.
   */
  uint8_t type() const {
    return m_type;
    cb42:	ldrb	r0, [r0, #26]
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    cb44:	cmp	r0, #3
    sector <<= 9;
  }
  if (cardCommand(CMD25, sector)) {
    cb46:	mov.w	r1, #25
    cb4a:	mov	r0, r4
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t sector) {
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    sector <<= 9;
    cb4c:	it	ne
    cb4e:	lslne	r2, r2, #9
  }
  if (cardCommand(CMD25, sector)) {
    cb50:	bl	c674 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    cb54:	cbz	r0, cb6e <SdSpiCard::writeStart(unsigned long)+0x3e>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    cb56:	movs	r3, #14
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    cb58:	ldrb	r0, [r4, #24]
    cb5a:	strb	r3, [r4, #23]
    cb5c:	cbnz	r0, cb62 <SdSpiCard::writeStart(unsigned long)+0x32>
  return true;

 fail:
  spiStop();
  return false;
}
    cb5e:	add	sp, #12
    cb60:	pop	{r4, r5, pc}
    cb62:	mov	r0, r4
    cb64:	bl	c4e0 <SdSpiCard::spiStop() [clone .part.6] [clone .constprop.27]>
    cb68:	movs	r0, #0
    cb6a:	add	sp, #12
    cb6c:	pop	{r4, r5, pc}
  }
  if (cardCommand(CMD25, sector)) {
    error(SD_CARD_ERROR_CMD25);
    goto fail;
  }
  return true;
    cb6e:	movs	r0, #1

 fail:
  spiStop();
  return false;
}
    cb70:	add	sp, #12
    cb72:	pop	{r4, r5, pc}
    cb74:	str	r1, [sp, #4]
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t sector) {
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    cb76:	blx	r3
    cb78:	ldr	r2, [sp, #4]
    cb7a:	b.n	cb44 <SdSpiCard::writeStart(unsigned long)+0x14>
    cb7c:	.word	0x0000c4b1

0000cb80 <SdSpiCard::erase(unsigned long, unsigned long)>:
//------------------------------------------------------------------------------
void SdSpiCard::dbgPrintStats() {::dbgPrintStats();}
//------------------------------------------------------------------------------
bool SdSpiCard::erase(uint32_t firstSector, uint32_t lastSector) {
  csd_t csd;
  if (!readCSD(&csd)) {
    cb80:	ldr	r3, [r0, #0]
//------------------------------------------------------------------------------
void SdSpiCard::dbgClearStats() {::dbgClearStats();}
//------------------------------------------------------------------------------
void SdSpiCard::dbgPrintStats() {::dbgPrintStats();}
//------------------------------------------------------------------------------
bool SdSpiCard::erase(uint32_t firstSector, uint32_t lastSector) {
    cb82:	push	{r4, r5, r6, r7, lr}
  csd_t csd;
  if (!readCSD(&csd)) {
    cb84:	ldr	r3, [r3, #52]	; 0x34
//------------------------------------------------------------------------------
void SdSpiCard::dbgClearStats() {::dbgClearStats();}
//------------------------------------------------------------------------------
void SdSpiCard::dbgPrintStats() {::dbgPrintStats();}
//------------------------------------------------------------------------------
bool SdSpiCard::erase(uint32_t firstSector, uint32_t lastSector) {
    cb86:	sub	sp, #20
    cb88:	ldr	r7, [pc, #164]	; (cc30 <SdSpiCard::erase(unsigned long, unsigned long)+0xb0>)
    cb8a:	mov	r4, r0
    cb8c:	mov	r5, r1
    cb8e:	mov	r6, r2
    cb90:	cmp	r3, r7
    cb92:	bne.n	cbec <SdSpiCard::erase(unsigned long, unsigned long)+0x6c>
   * \param[out] csd pointer to area for returned data.
   *
   * \return true for success or false for failure.
   */
  bool readCSD(csd_t* csd) {
    return readRegister(CMD9, csd);
    cb94:	mov	r2, sp
    cb96:	movs	r1, #9
    cb98:	bl	c934 <SdSpiCard::readRegister(unsigned char, void*)>
  csd_t csd;
  if (!readCSD(&csd)) {
    cb9c:	cbz	r0, cbc0 <SdSpiCard::erase(unsigned long, unsigned long)+0x40>
    goto fail;
  }
  // check for single sector erase
  if (!csd.v1.erase_blk_en) {
    cb9e:	ldrb.w	r3, [sp, #10]
    cba2:	lsls	r2, r3, #25
    cba4:	bpl.n	cbd0 <SdSpiCard::erase(unsigned long, unsigned long)+0x50>
      // error card can't erase specified area
      error(SD_CARD_ERROR_ERASE_SINGLE_SECTOR);
      goto fail;
    }
  }
  if (m_type != SD_CARD_TYPE_SDHC) {
    cba6:	ldrb	r3, [r4, #26]
    cba8:	cmp	r3, #3
    cbaa:	beq.n	cbb0 <SdSpiCard::erase(unsigned long, unsigned long)+0x30>
    firstSector <<= 9;
    cbac:	lsls	r5, r5, #9
    lastSector <<= 9;
    cbae:	lsls	r6, r6, #9
  }
  if (cardCommand(CMD32, firstSector)
    cbb0:	mov	r2, r5
    cbb2:	movs	r1, #32
    cbb4:	mov	r0, r4
    cbb6:	bl	c674 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
      || cardCommand(CMD33, lastSector)
      || cardCommand(CMD38, 0)) {
    cbba:	cbz	r0, cbf2 <SdSpiCard::erase(unsigned long, unsigned long)+0x72>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    cbbc:	movs	r3, #38	; 0x26
    cbbe:	strb	r3, [r4, #23]
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    cbc0:	ldrb	r0, [r4, #24]
    cbc2:	cbz	r0, cbcc <SdSpiCard::erase(unsigned long, unsigned long)+0x4c>
    cbc4:	mov	r0, r4
    cbc6:	bl	c4e0 <SdSpiCard::spiStop() [clone .part.6] [clone .constprop.27]>
  spiStop();
  return true;

 fail:
  spiStop();
  return false;
    cbca:	movs	r0, #0
}
    cbcc:	add	sp, #20
    cbce:	pop	{r4, r5, r6, r7, pc}
  }
  // check for single sector erase
  if (!csd.v1.erase_blk_en) {
    // erase size mask
    uint8_t m = (csd.v1.sector_size_high << 1) | csd.v1.sector_size_low;
    if ((firstSector & m) != 0 || ((lastSector + 1) & m) != 0) {
    cbd0:	and.w	r3, r3, #63	; 0x3f
    goto fail;
  }
  // check for single sector erase
  if (!csd.v1.erase_blk_en) {
    // erase size mask
    uint8_t m = (csd.v1.sector_size_high << 1) | csd.v1.sector_size_low;
    cbd4:	ldrb.w	r1, [sp, #11]
    if ((firstSector & m) != 0 || ((lastSector + 1) & m) != 0) {
    cbd8:	adds	r2, r6, #1
    cbda:	lsls	r3, r3, #1
    cbdc:	orrs	r2, r5
    cbde:	orr.w	r3, r3, r1, lsr #7
    cbe2:	tst	r3, r2
    cbe4:	beq.n	cba6 <SdSpiCard::erase(unsigned long, unsigned long)+0x26>
    cbe6:	movs	r3, #39	; 0x27
    cbe8:	strb	r3, [r4, #23]
    cbea:	b.n	cbc0 <SdSpiCard::erase(unsigned long, unsigned long)+0x40>
//------------------------------------------------------------------------------
void SdSpiCard::dbgPrintStats() {::dbgPrintStats();}
//------------------------------------------------------------------------------
bool SdSpiCard::erase(uint32_t firstSector, uint32_t lastSector) {
  csd_t csd;
  if (!readCSD(&csd)) {
    cbec:	mov	r1, sp
    cbee:	blx	r3
    cbf0:	b.n	cb9c <SdSpiCard::erase(unsigned long, unsigned long)+0x1c>
  if (m_type != SD_CARD_TYPE_SDHC) {
    firstSector <<= 9;
    lastSector <<= 9;
  }
  if (cardCommand(CMD32, firstSector)
      || cardCommand(CMD33, lastSector)
    cbf2:	mov	r2, r6
    cbf4:	movs	r1, #33	; 0x21
    cbf6:	mov	r0, r4
    cbf8:	bl	c674 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    cbfc:	cmp	r0, #0
    cbfe:	bne.n	cbbc <SdSpiCard::erase(unsigned long, unsigned long)+0x3c>
      || cardCommand(CMD38, 0)) {
    cc00:	mov	r2, r0
    cc02:	movs	r1, #38	; 0x26
    cc04:	mov	r0, r4
    cc06:	bl	c674 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    cc0a:	cmp	r0, #0
    cc0c:	bne.n	cbbc <SdSpiCard::erase(unsigned long, unsigned long)+0x3c>
    error(SD_CARD_ERROR_ERASE);
    goto fail;
  }
  DBG_BEGIN_TIME(DBG_ERASE_BUSY);
  if (!waitNotBusy(SD_ERASE_TIMEOUT)) {
    cc0e:	movw	r1, #10000	; 0x2710
    cc12:	mov	r0, r4
    cc14:	bl	c644 <SdSpiCard::waitNotBusy(unsigned short)>
    cc18:	cbnz	r0, cc20 <SdSpiCard::erase(unsigned long, unsigned long)+0xa0>
    cc1a:	movs	r3, #40	; 0x28
    cc1c:	strb	r3, [r4, #23]
    cc1e:	b.n	cbc0 <SdSpiCard::erase(unsigned long, unsigned long)+0x40>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    cc20:	ldrb	r5, [r4, #24]
    cc22:	cmp	r5, #0
    cc24:	beq.n	cbcc <SdSpiCard::erase(unsigned long, unsigned long)+0x4c>
    cc26:	mov	r0, r4
    cc28:	bl	c4e0 <SdSpiCard::spiStop() [clone .part.6] [clone .constprop.27]>
    error(SD_CARD_ERROR_ERASE_TIMEOUT);
    goto fail;
  }
  DBG_END_TIME(DBG_ERASE_BUSY);
  spiStop();
  return true;
    cc2c:	mov	r0, r5
    cc2e:	b.n	cbcc <SdSpiCard::erase(unsigned long, unsigned long)+0x4c>
    cc30:	.word	0x0000c975

0000cc34 <SdSpiCard::writeStop()>:
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
    cc34:	push	{r4, r5, r6, lr}
  DBG_BEGIN_TIME(DBG_WRITE_STOP);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
    cc36:	mov.w	r1, #600	; 0x258
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
    cc3a:	mov	r5, r0
  DBG_BEGIN_TIME(DBG_WRITE_STOP);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
    cc3c:	bl	c644 <SdSpiCard::waitNotBusy(unsigned short)>
    cc40:	mov	r6, r0
    cc42:	cbnz	r0, cc5c <SdSpiCard::writeStop()+0x28>
    cc44:	movs	r3, #30
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    cc46:	ldrb	r4, [r5, #24]
    cc48:	strb	r3, [r5, #23]
    cc4a:	cbnz	r4, cc50 <SdSpiCard::writeStop()+0x1c>

 fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  spiStop();
  return false;
}
    cc4c:	mov	r0, r4
    cc4e:	pop	{r4, r5, r6, pc}
  return true;

 fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  spiStop();
  return false;
    cc50:	mov	r4, r6
    cc52:	mov	r0, r5
    cc54:	bl	c4e0 <SdSpiCard::spiStop() [clone .part.6] [clone .constprop.27]>
}
    cc58:	mov	r0, r4
    cc5a:	pop	{r4, r5, r6, pc}
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver.receive(buf, n);
  }
  void spiSend(uint8_t data) {
    m_spiDriver.send(data);
    cc5c:	movs	r1, #253	; 0xfd
    cc5e:	adds	r0, r5, #4
    cc60:	bl	da34 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    cc64:	ldrb	r4, [r5, #24]
    cc66:	cbnz	r4, cc6e <SdSpiCard::writeStop()+0x3a>
    cc68:	mov	r4, r6

 fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  spiStop();
  return false;
}
    cc6a:	mov	r0, r4
    cc6c:	pop	{r4, r5, r6, pc}
    cc6e:	mov	r0, r5
    cc70:	bl	c4e0 <SdSpiCard::spiStop() [clone .part.6] [clone .constprop.27]>
    cc74:	b.n	cc4c <SdSpiCard::writeStop()+0x18>
    cc76:	nop

0000cc78 <SdSpiCard::writeData(unsigned char, unsigned char const*)>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send one sector of data for write sector or write multiple sectors
bool SdSpiCard::writeData(uint8_t token, const uint8_t* src) {
    cc78:	push	{r4, r5, r6, lr}
    cc7a:	adds	r4, r0, #4
    cc7c:	mov	r6, r2
    cc7e:	mov	r5, r0
    cc80:	mov	r0, r4
    cc82:	bl	da34 <SdSpiArduinoDriver::send(unsigned char)>
  }
  void spiSend(const uint8_t* buf, size_t n) {
    m_spiDriver.send(buf, n);
    cc86:	mov.w	r2, #512	; 0x200
    cc8a:	mov	r1, r6
    cc8c:	mov	r0, r4
    cc8e:	bl	da48 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver.receive(buf, n);
  }
  void spiSend(uint8_t data) {
    m_spiDriver.send(data);
    cc92:	mov	r0, r4
    cc94:	movs	r1, #255	; 0xff
    cc96:	bl	da34 <SdSpiArduinoDriver::send(unsigned char)>
    cc9a:	mov	r0, r4
    cc9c:	movs	r1, #255	; 0xff
    cc9e:	bl	da34 <SdSpiArduinoDriver::send(unsigned char)>
  }
  void spiDeactivate() {
    m_spiDriver.deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver.receive();
    cca2:	mov	r0, r4
    cca4:	bl	d9fc <SdSpiArduinoDriver::receive()>
  spiSend(src, 512);
  spiSend(crc >> 8);
  spiSend(crc & 0XFF);

  m_status = spiReceive();
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    cca8:	and.w	r3, r0, #31
  spiSend(token);
  spiSend(src, 512);
  spiSend(crc >> 8);
  spiSend(crc & 0XFF);

  m_status = spiReceive();
    ccac:	strb	r0, [r5, #25]
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    ccae:	cmp	r3, #5
    ccb0:	beq.n	ccc6 <SdSpiCard::writeData(unsigned char, unsigned char const*)+0x4e>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    ccb2:	movs	r3, #32
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    ccb4:	ldrb	r0, [r5, #24]
    ccb6:	strb	r3, [r5, #23]
    ccb8:	cbnz	r0, ccbc <SdSpiCard::writeData(unsigned char, unsigned char const*)+0x44>
  return true;

 fail:
  spiStop();
  return false;
}
    ccba:	pop	{r4, r5, r6, pc}
    ccbc:	mov	r0, r5
    ccbe:	bl	c4e0 <SdSpiCard::spiStop() [clone .part.6] [clone .constprop.27]>
  }
  return true;

 fail:
  spiStop();
  return false;
    ccc2:	movs	r0, #0
    ccc4:	pop	{r4, r5, r6, pc}
  m_status = spiReceive();
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    error(SD_CARD_ERROR_WRITE_DATA);
    goto fail;
  }
  return true;
    ccc6:	movs	r0, #1

 fail:
  spiStop();
  return false;
}
    ccc8:	pop	{r4, r5, r6, pc}
    ccca:	nop

0000cccc <SdSpiCard::writeData(unsigned char const*)>:
  }
  return true;
#endif  // WDT_YIELD_TIME_MILLIS
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeData(const uint8_t* src) {
    cccc:	push	{r3, r4, r5, lr}
    ccce:	mov	r5, r1
  // wait for previous write to finish
  DBG_BEGIN_TIME(DBG_WRITE_BUSY);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
    ccd0:	mov.w	r1, #600	; 0x258
  }
  return true;
#endif  // WDT_YIELD_TIME_MILLIS
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeData(const uint8_t* src) {
    ccd4:	mov	r4, r0
  // wait for previous write to finish
  DBG_BEGIN_TIME(DBG_WRITE_BUSY);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
    ccd6:	bl	c644 <SdSpiCard::waitNotBusy(unsigned short)>
    ccda:	cbnz	r0, ccee <SdSpiCard::writeData(unsigned char const*)+0x22>
    ccdc:	movs	r3, #36	; 0x24
    ccde:	strb	r3, [r4, #23]
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    cce0:	ldrb	r0, [r4, #24]
    cce2:	cbz	r0, ccec <SdSpiCard::writeData(unsigned char const*)+0x20>
    cce4:	mov	r0, r4
    cce6:	bl	c4e0 <SdSpiCard::spiStop() [clone .part.6] [clone .constprop.27]>
  }
  return true;

 fail:
  spiStop();
  return false;
    ccea:	movs	r0, #0
}
    ccec:	pop	{r3, r4, r5, pc}
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
    error(SD_CARD_ERROR_WRITE_TIMEOUT);
    goto fail;
  }
  DBG_END_TIME(DBG_WRITE_BUSY);
  if (!writeData(WRITE_MULTIPLE_TOKEN, src)) {
    ccee:	mov	r2, r5
    ccf0:	movs	r1, #252	; 0xfc
    ccf2:	mov	r0, r4
    ccf4:	bl	cc78 <SdSpiCard::writeData(unsigned char, unsigned char const*)>
    ccf8:	cmp	r0, #0
    ccfa:	beq.n	cce0 <SdSpiCard::writeData(unsigned char const*)+0x14>
  return true;

 fail:
  spiStop();
  return false;
}
    ccfc:	pop	{r3, r4, r5, pc}
    ccfe:	nop

0000cd00 <SdSpiCard::writeSingle(unsigned long, unsigned char const*)>:
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeSingle(uint32_t sector, const uint8_t* src) {
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    cd00:	ldr	r3, [r0, #0]
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeSingle(uint32_t sector, const uint8_t* src) {
    cd02:	push	{r4, r5, r6, lr}
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    cd04:	ldr	r3, [r3, #64]	; 0x40
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeSingle(uint32_t sector, const uint8_t* src) {
    cd06:	sub	sp, #8
    cd08:	ldr	r5, [pc, #84]	; (cd60 <SdSpiCard::writeSingle(unsigned long, unsigned char const*)+0x60>)
    cd0a:	mov	r4, r0
    cd0c:	mov	r6, r2
    cd0e:	cmp	r3, r5
    cd10:	bne.n	cd58 <SdSpiCard::writeSingle(unsigned long, unsigned char const*)+0x58>
  bool syncDevice();
  /** Return the card type: SD V1, SD V2 or SDHC/SDXC
   * \return 0 - SD V1, 1 - SD V2, or 3 - SDHC/SDXC.
   */
  uint8_t type() const {
    return m_type;
    cd12:	ldrb	r0, [r0, #26]
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    cd14:	cmp	r0, #3
    sector <<= 9;
  }
  if (cardCommand(CMD24, sector)) {
    cd16:	mov	r0, r4
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeSingle(uint32_t sector, const uint8_t* src) {
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    sector <<= 9;
    cd18:	it	ne
    cd1a:	lslne	r1, r1, #9
  }
  if (cardCommand(CMD24, sector)) {
    cd1c:	mov	r2, r1
    cd1e:	movs	r1, #24
    cd20:	bl	c674 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    cd24:	cbz	r0, cd3a <SdSpiCard::writeSingle(unsigned long, unsigned char const*)+0x3a>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    cd26:	movs	r3, #13
    cd28:	strb	r3, [r4, #23]
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    cd2a:	ldrb	r0, [r4, #24]
    cd2c:	cbz	r0, cd36 <SdSpiCard::writeSingle(unsigned long, unsigned char const*)+0x36>
    cd2e:	mov	r0, r4
    cd30:	bl	c4e0 <SdSpiCard::spiStop() [clone .part.6] [clone .constprop.27]>
  spiStop();
  return true;

 fail:
  spiStop();
  return false;
    cd34:	movs	r0, #0
}
    cd36:	add	sp, #8
    cd38:	pop	{r4, r5, r6, pc}
  }
  if (cardCommand(CMD24, sector)) {
    error(SD_CARD_ERROR_CMD24);
    goto fail;
  }
  if (!writeData(DATA_START_SECTOR, src)) {
    cd3a:	mov	r2, r6
    cd3c:	movs	r1, #254	; 0xfe
    cd3e:	mov	r0, r4
    cd40:	bl	cc78 <SdSpiCard::writeData(unsigned char, unsigned char const*)>
    cd44:	cmp	r0, #0
    cd46:	beq.n	cd2a <SdSpiCard::writeSingle(unsigned long, unsigned char const*)+0x2a>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    cd48:	ldrb	r5, [r4, #24]
    cd4a:	cmp	r5, #0
    cd4c:	beq.n	cd36 <SdSpiCard::writeSingle(unsigned long, unsigned char const*)+0x36>
    cd4e:	mov	r0, r4
    cd50:	bl	c4e0 <SdSpiCard::spiStop() [clone .part.6] [clone .constprop.27]>
    cd54:	mov	r0, r5
    cd56:	b.n	cd36 <SdSpiCard::writeSingle(unsigned long, unsigned char const*)+0x36>
    cd58:	str	r1, [sp, #4]
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeSingle(uint32_t sector, const uint8_t* src) {
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    cd5a:	blx	r3
    cd5c:	ldr	r1, [sp, #4]
    cd5e:	b.n	cd14 <SdSpiCard::writeSingle(unsigned long, unsigned char const*)+0x14>
    cd60:	.word	0x0000c4b1

0000cd64 <SdSpiCard::writeSector(unsigned long, unsigned char const*)>:
   *
   * \param[in] sector Logical sector to be written.
   * \param[in] src Pointer to the location of the data to be written.
   * \return true for success or false for failure.
   */
  bool writeSector(uint32_t sector, const uint8_t* src) {
    cd64:	push	{r4}
    if (m_sharedSpi) {
    cd66:	ldrb	r4, [r0, #21]
    cd68:	cbnz	r4, cd78 <SdSpiCard::writeSector(unsigned long, unsigned char const*)+0x14>
      return writeSingle(sector, src);
    } else {
      return writeSectors(sector, src, 1);
    cd6a:	ldr	r4, [r0, #0]
    cd6c:	movs	r3, #1
    cd6e:	ldr	r4, [r4, #32]
    cd70:	mov	ip, r4
    }
  }
    cd72:	ldr.w	r4, [sp], #4
   */
  bool writeSector(uint32_t sector, const uint8_t* src) {
    if (m_sharedSpi) {
      return writeSingle(sector, src);
    } else {
      return writeSectors(sector, src, 1);
    cd76:	bx	ip
    }
  }
    cd78:	ldr.w	r4, [sp], #4
   * \param[in] src Pointer to the location of the data to be written.
   * \return true for success or false for failure.
   */
  bool writeSector(uint32_t sector, const uint8_t* src) {
    if (m_sharedSpi) {
      return writeSingle(sector, src);
    cd7c:	b.w	cd00 <SdSpiCard::writeSingle(unsigned long, unsigned char const*)>

0000cd80 <isBusyCommandComplete()>:
static bool isBusyCMD13() {
  return !(statusCMD13() & CARD_STATUS_READY_FOR_DATA);
}
//------------------------------------------------------------------------------
static bool isBusyCommandComplete() {
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_CC | SDHC_IRQSTAT_CMD_ERROR));
    cd80:	ldr	r3, [pc, #12]	; (cd90 <isBusyCommandComplete()+0x10>)
    cd82:	ldr	r0, [pc, #16]	; (cd94 <isBusyCommandComplete()+0x14>)
    cd84:	ldr	r3, [r3, #48]	; 0x30
    cd86:	ands	r0, r3
}
    cd88:	clz	r0, r0
    cd8c:	lsrs	r0, r0, #5
    cd8e:	bx	lr
    cd90:	.word	0x402c0000
    cd94:	.word	0x000f0001

0000cd98 <isBusyCommandInhibit()>:
//------------------------------------------------------------------------------
static bool isBusyCommandInhibit() {
  return SDHC_PRSSTAT & SDHC_PRSSTAT_CIHB;
    cd98:	ldr	r3, [pc, #8]	; (cda4 <isBusyCommandInhibit()+0xc>)
    cd9a:	ldr	r0, [r3, #36]	; 0x24
}
    cd9c:	and.w	r0, r0, #1
    cda0:	bx	lr
    cda2:	nop
    cda4:	.word	0x402c0000

0000cda8 <isBusyDat()>:
//------------------------------------------------------------------------------
static bool isBusyDat() {
  return SDHC_PRSSTAT & (1 << 24) ? false : true;
    cda8:	ldr	r3, [pc, #12]	; (cdb8 <isBusyDat()+0x10>)
    cdaa:	ldr	r0, [r3, #36]	; 0x24
    cdac:	eor.w	r0, r0, #16777216	; 0x1000000
}
    cdb0:	ubfx	r0, r0, #24, #1
    cdb4:	bx	lr
    cdb6:	nop
    cdb8:	.word	0x402c0000

0000cdbc <isBusyDMA()>:
//------------------------------------------------------------------------------
static bool isBusyDMA() {
  return m_dmaBusy;
    cdbc:	ldr	r3, [pc, #4]	; (cdc4 <isBusyDMA()+0x8>)
    cdbe:	ldrb	r0, [r3, #0]
}
    cdc0:	bx	lr
    cdc2:	nop
    cdc4:	.word	0x200440b8

0000cdc8 <isBusyFifoRead()>:
//------------------------------------------------------------------------------
static bool isBusyFifoRead() {
  return !(SDHC_PRSSTAT & SDHC_PRSSTAT_BREN);
    cdc8:	ldr	r3, [pc, #12]	; (cdd8 <isBusyFifoRead()+0x10>)
    cdca:	ldr	r0, [r3, #36]	; 0x24
    cdcc:	eor.w	r0, r0, #2048	; 0x800
}
    cdd0:	ubfx	r0, r0, #11, #1
    cdd4:	bx	lr
    cdd6:	nop
    cdd8:	.word	0x402c0000

0000cddc <isBusyFifoWrite()>:
//------------------------------------------------------------------------------
static bool isBusyFifoWrite() {
  return !(SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN);
    cddc:	ldr	r3, [pc, #12]	; (cdec <isBusyFifoWrite()+0x10>)
    cdde:	ldr	r0, [r3, #36]	; 0x24
    cde0:	eor.w	r0, r0, #1024	; 0x400
}
    cde4:	ubfx	r0, r0, #10, #1
    cde8:	bx	lr
    cdea:	nop
    cdec:	.word	0x402c0000

0000cdf0 <isBusyTransferComplete()>:
//------------------------------------------------------------------------------
static bool isBusyTransferComplete() {
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
    cdf0:	ldr	r3, [pc, #12]	; (ce00 <isBusyTransferComplete()+0x10>)
    cdf2:	ldr	r0, [pc, #16]	; (ce04 <isBusyTransferComplete()+0x14>)
    cdf4:	ldr	r3, [r3, #48]	; 0x30
    cdf6:	ands	r0, r3
}
    cdf8:	clz	r0, r0
    cdfc:	lsrs	r0, r0, #5
    cdfe:	bx	lr
    ce00:	.word	0x402c0000
    ce04:	.word	0x117f0002

0000ce08 <SdioCard::errorCode() const>:
  }
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdioCard::errorCode() const {
  return m_errorCode;
    ce08:	ldr	r3, [pc, #4]	; (ce10 <SdioCard::errorCode() const+0x8>)
}
    ce0a:	ldrb	r0, [r3, #0]
    ce0c:	bx	lr
    ce0e:	nop
    ce10:	.word	0x20000c24

0000ce14 <SdioCard::errorData() const>:
//------------------------------------------------------------------------------
uint32_t SdioCard::errorData() const {
  return m_irqstat;
    ce14:	ldr	r3, [pc, #4]	; (ce1c <SdioCard::errorData() const+0x8>)
    ce16:	ldr	r0, [r3, #0]
}
    ce18:	bx	lr
    ce1a:	nop
    ce1c:	.word	0x200440a0

0000ce20 <SdioCard::readCID(CID*)>:
//------------------------------------------------------------------------------
uint32_t SdioCard::kHzSdClk() {
  return m_sdClkKhz;
}
//------------------------------------------------------------------------------
bool SdioCard::readCID(cid_t* cid) {
    ce20:	push	{r4, r5}
  memcpy(cid, &m_cid, 16);
    ce22:	ldr	r4, [pc, #20]	; (ce38 <SdioCard::readCID(CID*)+0x18>)
//------------------------------------------------------------------------------
uint32_t SdioCard::kHzSdClk() {
  return m_sdClkKhz;
}
//------------------------------------------------------------------------------
bool SdioCard::readCID(cid_t* cid) {
    ce24:	mov	r5, r1
  memcpy(cid, &m_cid, 16);
    ce26:	ldmia	r4!, {r0, r1, r2, r3}
    ce28:	str	r0, [r5, #0]
  return true;
}
    ce2a:	movs	r0, #1
uint32_t SdioCard::kHzSdClk() {
  return m_sdClkKhz;
}
//------------------------------------------------------------------------------
bool SdioCard::readCID(cid_t* cid) {
  memcpy(cid, &m_cid, 16);
    ce2c:	str	r1, [r5, #4]
    ce2e:	str	r2, [r5, #8]
    ce30:	str	r3, [r5, #12]
  return true;
}
    ce32:	pop	{r4, r5}
    ce34:	bx	lr
    ce36:	nop
    ce38:	.word	0x2004407c

0000ce3c <SdioCard::readCSD(csd_t*)>:
//------------------------------------------------------------------------------
bool SdioCard::readCSD(csd_t* csd) {
    ce3c:	push	{r4, r5}
  memcpy(csd, &m_csd, 16);
    ce3e:	ldr	r4, [pc, #20]	; (ce54 <SdioCard::readCSD(csd_t*)+0x18>)
bool SdioCard::readCID(cid_t* cid) {
  memcpy(cid, &m_cid, 16);
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readCSD(csd_t* csd) {
    ce40:	mov	r5, r1
  memcpy(csd, &m_csd, 16);
    ce42:	ldmia	r4!, {r0, r1, r2, r3}
    ce44:	str	r0, [r5, #0]
  return true;
}
    ce46:	movs	r0, #1
  memcpy(cid, &m_cid, 16);
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readCSD(csd_t* csd) {
  memcpy(csd, &m_csd, 16);
    ce48:	str	r1, [r5, #4]
    ce4a:	str	r2, [r5, #8]
    ce4c:	str	r3, [r5, #12]
  return true;
}
    ce4e:	pop	{r4, r5}
    ce50:	bx	lr
    ce52:	nop
    ce54:	.word	0x200440a8

0000ce58 <SdioCard::readOCR(unsigned long*)>:
  SDHC_IRQSTAT = m_irqstat;
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
//------------------------------------------------------------------------------
bool SdioCard::readOCR(uint32_t* ocr) {
  *ocr = m_ocr;
    ce58:	ldr	r3, [pc, #8]	; (ce64 <SdioCard::readOCR(unsigned long*)+0xc>)
  return true;
}
    ce5a:	movs	r0, #1
  SDHC_IRQSTAT = m_irqstat;
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
//------------------------------------------------------------------------------
bool SdioCard::readOCR(uint32_t* ocr) {
  *ocr = m_ocr;
    ce5c:	ldr	r3, [r3, #0]
    ce5e:	str	r3, [r1, #0]
  return true;
}
    ce60:	bx	lr
    ce62:	nop
    ce64:	.word	0x20044094

0000ce68 <SdioCard::~SdioCard()>:
    ce68:	bx	lr
    ce6a:	nop

0000ce6c <waitTimeout(bool (*)())>:
  }
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
//------------------------------------------------------------------------------
// Return true if timeout occurs.
static bool waitTimeout(bool (*fcn)()) {
    ce6c:	push	{r3, r4, r5, r6, r7, lr}
    ce6e:	mov	r5, r0
  uint32_t m = micros();
  while (fcn()) {
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    ce70:	ldr	r7, [pc, #28]	; (ce90 <waitTimeout(bool (*)())+0x24>)
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
//------------------------------------------------------------------------------
// Return true if timeout occurs.
static bool waitTimeout(bool (*fcn)()) {
  uint32_t m = micros();
    ce72:	bl	f040 <micros>
    ce76:	mov	r6, r0
    ce78:	b.n	ce84 <waitTimeout(bool (*)())+0x18>
  while (fcn()) {
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    ce7a:	bl	f040 <micros>
    ce7e:	subs	r0, r0, r6
    ce80:	cmp	r0, r7
    ce82:	bhi.n	ce8c <waitTimeout(bool (*)())+0x20>
}
//------------------------------------------------------------------------------
// Return true if timeout occurs.
static bool waitTimeout(bool (*fcn)()) {
  uint32_t m = micros();
  while (fcn()) {
    ce84:	blx	r5
    ce86:	mov	r4, r0
    ce88:	cmp	r0, #0
    ce8a:	bne.n	ce7a <waitTimeout(bool (*)())+0xe>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
      return true;
    }
  }
  return false;  // Caller will set errorCode.
}
    ce8c:	mov	r0, r4
    ce8e:	pop	{r3, r4, r5, r6, r7, pc}
    ce90:	.word	0x000f4240

0000ce94 <yieldTimeout(bool (*)())>:
  }
  return true;
}
//------------------------------------------------------------------------------
// Return true if timeout occurs.
static bool yieldTimeout(bool (*fcn)()) {
    ce94:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  m_busyFcn = fcn;
    ce98:	ldr.w	r8, [pc, #64]	; cedc <yieldTimeout(bool (*)())+0x48>
  }
  return true;
}
//------------------------------------------------------------------------------
// Return true if timeout occurs.
static bool yieldTimeout(bool (*fcn)()) {
    ce9c:	mov	r5, r0
  m_busyFcn = fcn;
  uint32_t m = micros();
  while (fcn()) {
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    ce9e:	ldr	r7, [pc, #56]	; (ced8 <yieldTimeout(bool (*)())+0x44>)
  return true;
}
//------------------------------------------------------------------------------
// Return true if timeout occurs.
static bool yieldTimeout(bool (*fcn)()) {
  m_busyFcn = fcn;
    cea0:	str.w	r0, [r8]
  uint32_t m = micros();
    cea4:	bl	f040 <micros>
    cea8:	mov	r6, r0
    ceaa:	b.n	ceba <yieldTimeout(bool (*)())+0x26>
  while (fcn()) {
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    ceac:	bl	f040 <micros>
    ceb0:	subs	r0, r0, r6
    ceb2:	cmp	r0, r7
    ceb4:	bhi.n	cecc <yieldTimeout(bool (*)())+0x38>
  }
}
#elif defined(ARDUINO)
inline void SysCall::yield() {
  // Use the external Arduino yield() function.
  ::yield();
    ceb6:	bl	fc48 <yield>
//------------------------------------------------------------------------------
// Return true if timeout occurs.
static bool yieldTimeout(bool (*fcn)()) {
  m_busyFcn = fcn;
  uint32_t m = micros();
  while (fcn()) {
    ceba:	blx	r5
    cebc:	mov	r4, r0
    cebe:	cmp	r0, #0
    cec0:	bne.n	ceac <yieldTimeout(bool (*)())+0x18>
      m_busyFcn = 0;
      return true;
    }
    SysCall::yield();
  }
  m_busyFcn = 0;
    cec2:	str.w	r0, [r8]
  return false;  // Caller will set errorCode.
}
    cec6:	mov	r0, r4
    cec8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
static bool yieldTimeout(bool (*fcn)()) {
  m_busyFcn = fcn;
  uint32_t m = micros();
  while (fcn()) {
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
      m_busyFcn = 0;
    cecc:	movs	r3, #0
    }
    SysCall::yield();
  }
  m_busyFcn = 0;
  return false;  // Caller will set errorCode.
}
    cece:	mov	r0, r4
static bool yieldTimeout(bool (*fcn)()) {
  m_busyFcn = fcn;
  uint32_t m = micros();
  while (fcn()) {
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
      m_busyFcn = 0;
    ced0:	str.w	r3, [r8]
    }
    SysCall::yield();
  }
  m_busyFcn = 0;
  return false;  // Caller will set errorCode.
}
    ced4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ced8:	.word	0x000f4240
    cedc:	.word	0x2004408c

0000cee0 <SdioCard::~SdioCard()>:
    cee0:	push	{r4, lr}
    cee2:	mov	r4, r0
    cee4:	movs	r1, #12
    cee6:	bl	1006c <operator delete(void*, unsigned int)>
    ceea:	mov	r0, r4
    ceec:	pop	{r4, pc}
    ceee:	nop

0000cef0 <SdioCard::type() const>:
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdioCard::type() const {
  return  m_version2 ? m_highCapacity ?
          SD_CARD_TYPE_SDHC : SD_CARD_TYPE_SD2 : SD_CARD_TYPE_SD1;
    cef0:	ldr	r3, [pc, #20]	; (cf08 <SdioCard::type() const+0x18>)
    cef2:	ldrb	r3, [r3, #0]
    cef4:	cbz	r3, cf04 <SdioCard::type() const+0x14>
    cef6:	ldr	r3, [pc, #20]	; (cf0c <SdioCard::type() const+0x1c>)
    cef8:	ldrb	r3, [r3, #0]
    cefa:	cmp	r3, #0
    cefc:	ite	ne
    cefe:	movne	r0, #3
    cf00:	moveq	r0, #2
    cf02:	bx	lr
    cf04:	movs	r0, #1
}
    cf06:	bx	lr
    cf08:	.word	0x20044078
    cf0c:	.word	0x20044090

0000cf10 <cardCommand(unsigned long, unsigned long)>:
// Static functions.
static bool cardAcmd(uint32_t rca, uint32_t xfertyp, uint32_t arg) {
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
}
//------------------------------------------------------------------------------
static bool cardCommand(uint32_t xfertyp, uint32_t arg) {
    cf10:	push	{r3, r4, r5, lr}
    cf12:	mov	r4, r0
  DBG_IRQSTAT();
  if (waitTimeout(isBusyCommandInhibit)) {
    cf14:	ldr	r0, [pc, #80]	; (cf68 <cardCommand(unsigned long, unsigned long)+0x58>)
// Static functions.
static bool cardAcmd(uint32_t rca, uint32_t xfertyp, uint32_t arg) {
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
}
//------------------------------------------------------------------------------
static bool cardCommand(uint32_t xfertyp, uint32_t arg) {
    cf16:	mov	r5, r1
  DBG_IRQSTAT();
  if (waitTimeout(isBusyCommandInhibit)) {
    cf18:	bl	ce6c <waitTimeout(bool (*)())>
    cf1c:	cbnz	r0, cf62 <cardCommand(unsigned long, unsigned long)+0x52>
    return false;  // Caller will set errorCode.
  }
  SDHC_CMDARG = arg;
    cf1e:	ldr	r3, [pc, #76]	; (cf6c <cardCommand(unsigned long, unsigned long)+0x5c>)
#if defined(__IMXRT1062__)
  // Set MIX_CTRL if data transfer.
  if (xfertyp & SDHC_XFERTYP_DPSEL) {
    cf20:	lsls	r1, r4, #10
static bool cardCommand(uint32_t xfertyp, uint32_t arg) {
  DBG_IRQSTAT();
  if (waitTimeout(isBusyCommandInhibit)) {
    return false;  // Caller will set errorCode.
  }
  SDHC_CMDARG = arg;
    cf22:	str	r5, [r3, #8]
#if defined(__IMXRT1062__)
  // Set MIX_CTRL if data transfer.
  if (xfertyp & SDHC_XFERTYP_DPSEL) {
    cf24:	bpl.n	cf36 <cardCommand(unsigned long, unsigned long)+0x26>
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_MASK;
    cf26:	ldr	r1, [r3, #72]	; 0x48
    SDHC_MIX_CTRL |= xfertyp & SDHC_MIX_CTRL_MASK;
    cf28:	uxtb	r2, r4
  }
  SDHC_CMDARG = arg;
#if defined(__IMXRT1062__)
  // Set MIX_CTRL if data transfer.
  if (xfertyp & SDHC_XFERTYP_DPSEL) {
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_MASK;
    cf2a:	bic.w	r1, r1, #255	; 0xff
    cf2e:	str	r1, [r3, #72]	; 0x48
    SDHC_MIX_CTRL |= xfertyp & SDHC_MIX_CTRL_MASK;
    cf30:	ldr	r1, [r3, #72]	; 0x48
    cf32:	orrs	r2, r1
    cf34:	str	r2, [r3, #72]	; 0x48
  }
  xfertyp &= ~SDHC_MIX_CTRL_MASK;
    cf36:	bic.w	r4, r4, #255	; 0xff
#endif  // defined(__IMXRT1062__)
  SDHC_XFERTYP = xfertyp;
    cf3a:	ldr	r5, [pc, #48]	; (cf6c <cardCommand(unsigned long, unsigned long)+0x5c>)
  if (waitTimeout(isBusyCommandComplete)) {
    cf3c:	ldr	r0, [pc, #48]	; (cf70 <cardCommand(unsigned long, unsigned long)+0x60>)
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_MASK;
    SDHC_MIX_CTRL |= xfertyp & SDHC_MIX_CTRL_MASK;
  }
  xfertyp &= ~SDHC_MIX_CTRL_MASK;
#endif  // defined(__IMXRT1062__)
  SDHC_XFERTYP = xfertyp;
    cf3e:	str	r4, [r5, #12]
  if (waitTimeout(isBusyCommandComplete)) {
    cf40:	bl	ce6c <waitTimeout(bool (*)())>
    cf44:	cbnz	r0, cf62 <cardCommand(unsigned long, unsigned long)+0x52>
    return false;  // Caller will set errorCode.
  }
  m_irqstat = SDHC_IRQSTAT;
    cf46:	ldr	r2, [r5, #48]	; 0x30
    cf48:	ldr	r3, [pc, #40]	; (cf74 <cardCommand(unsigned long, unsigned long)+0x64>)
    cf4a:	str	r2, [r3, #0]
  SDHC_IRQSTAT = m_irqstat;
    cf4c:	ldr	r2, [r3, #0]
    cf4e:	str	r2, [r5, #48]	; 0x30

  return (m_irqstat & SDHC_IRQSTAT_CC) &&
    cf50:	ldr	r2, [r3, #0]
    cf52:	lsls	r2, r2, #31
    cf54:	bpl.n	cf62 <cardCommand(unsigned long, unsigned long)+0x52>
         !(m_irqstat & SDHC_IRQSTAT_CMD_ERROR);
    cf56:	ldr	r3, [r3, #0]
    return false;  // Caller will set errorCode.
  }
  m_irqstat = SDHC_IRQSTAT;
  SDHC_IRQSTAT = m_irqstat;

  return (m_irqstat & SDHC_IRQSTAT_CC) &&
    cf58:	tst.w	r3, #983040	; 0xf0000
    cf5c:	bne.n	cf62 <cardCommand(unsigned long, unsigned long)+0x52>
    cf5e:	movs	r0, #1
         !(m_irqstat & SDHC_IRQSTAT_CMD_ERROR);
}
    cf60:	pop	{r3, r4, r5, pc}
    return false;  // Caller will set errorCode.
  }
  m_irqstat = SDHC_IRQSTAT;
  SDHC_IRQSTAT = m_irqstat;

  return (m_irqstat & SDHC_IRQSTAT_CC) &&
    cf62:	movs	r0, #0
    cf64:	pop	{r3, r4, r5, pc}
    cf66:	nop
    cf68:	.word	0x0000cd99
    cf6c:	.word	0x402c0000
    cf70:	.word	0x0000cd81
    cf74:	.word	0x200440a0

0000cf78 <isBusyCMD13()>:
//------------------------------------------------------------------------------
static uint32_t statusCMD13() {
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
}
//------------------------------------------------------------------------------
static bool isBusyCMD13() {
    cf78:	push	{r3, lr}
  while (SDHC_SYSCTL & SDHC_SYSCTL_INITA) {
  }
}
//------------------------------------------------------------------------------
static uint32_t statusCMD13() {
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    cf7a:	ldr	r3, [pc, #28]	; (cf98 <isBusyCMD13()+0x20>)
    cf7c:	ldr	r0, [pc, #28]	; (cf9c <isBusyCMD13()+0x24>)
    cf7e:	ldr	r1, [r3, #0]
    cf80:	bl	cf10 <cardCommand(unsigned long, unsigned long)>
    cf84:	cbz	r0, cf94 <isBusyCMD13()+0x1c>
    cf86:	ldr	r3, [pc, #24]	; (cfa0 <isBusyCMD13()+0x28>)
    cf88:	ldr	r0, [r3, #16]
    cf8a:	eor.w	r0, r0, #256	; 0x100
    cf8e:	ubfx	r0, r0, #8, #1
    cf92:	pop	{r3, pc}
    cf94:	movs	r0, #1
}
//------------------------------------------------------------------------------
static bool isBusyCMD13() {
  return !(statusCMD13() & CARD_STATUS_READY_FOR_DATA);
}
    cf96:	pop	{r3, pc}
    cf98:	.word	0x20044098
    cf9c:	.word	0x0d1a0000
    cfa0:	.word	0x402c0000

0000cfa4 <SdioCard::status()>:
//------------------------------------------------------------------------------
uint32_t SdioCard::sectorCount() {
  return sdCardCapacity(&m_csd);
}
//------------------------------------------------------------------------------
uint32_t SdioCard::status() {
    cfa4:	push	{r3, lr}
  while (SDHC_SYSCTL & SDHC_SYSCTL_INITA) {
  }
}
//------------------------------------------------------------------------------
static uint32_t statusCMD13() {
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    cfa6:	ldr	r3, [pc, #16]	; (cfb8 <SdioCard::status()+0x14>)
    cfa8:	ldr	r0, [pc, #16]	; (cfbc <SdioCard::status()+0x18>)
    cfaa:	ldr	r1, [r3, #0]
    cfac:	bl	cf10 <cardCommand(unsigned long, unsigned long)>
    cfb0:	cbz	r0, cfb6 <SdioCard::status()+0x12>
    cfb2:	ldr	r3, [pc, #12]	; (cfc0 <SdioCard::status()+0x1c>)
    cfb4:	ldr	r0, [r3, #16]
  return sdCardCapacity(&m_csd);
}
//------------------------------------------------------------------------------
uint32_t SdioCard::status() {
  return statusCMD13();
}
    cfb6:	pop	{r3, pc}
    cfb8:	.word	0x20044098
    cfbc:	.word	0x0d1a0000
    cfc0:	.word	0x402c0000

0000cfc4 <waitDmaStatus() [clone .part.5]>:
//------------------------------------------------------------------------------
static bool waitDmaStatus() {
  if (yieldTimeout(isBusyDMA)) {
    return false;  // Caller will set errorCode.
  }
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    cfc4:	ldr	r3, [pc, #20]	; (cfdc <waitDmaStatus() [clone .part.5]+0x18>)
    cfc6:	ldr	r0, [r3, #0]
    cfc8:	ands.w	r0, r0, #2
    cfcc:	beq.n	cfda <waitDmaStatus() [clone .part.5]+0x16>
    cfce:	ldr	r3, [r3, #0]
    cfd0:	ldr	r0, [pc, #12]	; (cfe0 <waitDmaStatus() [clone .part.5]+0x1c>)
    cfd2:	ands	r0, r3
    cfd4:	clz	r0, r0
    cfd8:	lsrs	r0, r0, #5
}
    cfda:	bx	lr
    cfdc:	.word	0x200440a0
    cfe0:	.word	0x117f0000

0000cfe4 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>:
static bool isBusyTransferComplete() {
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
}
//------------------------------------------------------------------------------
static bool rdWrSectors(uint32_t xfertyp,
                       uint32_t sector, uint8_t* buf, size_t n) {
    cfe4:	push	{r3, r4, r5, r6, r7, lr}
    cfe6:	ands.w	r4, r2, #3
    cfea:	it	ne
    cfec:	movne	r4, #1
    cfee:	cmp	r3, #0
    cff0:	it	eq
    cff2:	orreq.w	r4, r4, #1
  if ((3 & (uint32_t)buf) || n == 0) {
    cff6:	cbz	r4, d00a <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x26>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    cff8:	ldr	r1, [pc, #120]	; (d074 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x90>)
    cffa:	movs	r0, #37	; 0x25
  m_errorLine = line;
    cffc:	ldr	r3, [pc, #120]	; (d078 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x94>)
    cffe:	movw	r2, #503	; 0x1f7
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    d002:	strb	r0, [r1, #0]
  m_errorLine = line;
    d004:	str	r2, [r3, #0]
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512*sector)) {
    return false;
  }
  return waitDmaStatus();
}
    d006:	movs	r0, #0
    d008:	pop	{r3, r4, r5, r6, r7, pc}
    d00a:	mov	r6, r0
static bool rdWrSectors(uint32_t xfertyp,
                       uint32_t sector, uint8_t* buf, size_t n) {
  if ((3 & (uint32_t)buf) || n == 0) {
    return sdError(SD_CARD_ERROR_DMA);
  }
  if (yieldTimeout(isBusyCMD13)) {
    d00c:	ldr	r0, [pc, #108]	; (d07c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x98>)
    d00e:	mov	r5, r3
    d010:	mov	r7, r1
    d012:	mov	r4, r2
    d014:	bl	ce94 <yieldTimeout(bool (*)())>
    d018:	cbnz	r0, d060 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x7c>
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)buf;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    d01a:	lsls	r3, r5, #16
    d01c:	ldr	r2, [pc, #96]	; (d080 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x9c>)
  }
  return true;
}
//------------------------------------------------------------------------------
static void enableDmaIrs() {
  m_dmaBusy = true;
    d01e:	ldr	r5, [pc, #100]	; (d084 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xa0>)
    d020:	mov.w	lr, #1
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)buf;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    d024:	ands	r2, r3
  return true;
}
//------------------------------------------------------------------------------
static void enableDmaIrs() {
  m_dmaBusy = true;
  m_irqstat = 0;
    d026:	ldr	r1, [pc, #96]	; (d088 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xa4>)
  }
  return true;
}
//------------------------------------------------------------------------------
static void enableDmaIrs() {
  m_dmaBusy = true;
    d028:	strb.w	lr, [r5]
  }
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)buf;
    d02c:	ldr	r3, [pc, #92]	; (d08c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xa8>)
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    d02e:	orr.w	r2, r2, #512	; 0x200
  return true;
}
//------------------------------------------------------------------------------
static void enableDmaIrs() {
  m_dmaBusy = true;
  m_irqstat = 0;
    d032:	str	r0, [r1, #0]
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)buf;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    d034:	ldr	r5, [pc, #88]	; (d090 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xac>)
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512*sector)) {
    d036:	ldr	r1, [pc, #92]	; (d094 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xb0>)
  }
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)buf;
    d038:	str	r4, [r3, #0]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    d03a:	str	r2, [r3, #4]
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    d03c:	str	r5, [r3, #56]	; 0x38
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512*sector)) {
    d03e:	ldrb	r3, [r1, #0]
    d040:	cbnz	r3, d070 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x8c>
    d042:	lsls	r1, r7, #9
    d044:	mov	r0, r6
    d046:	bl	cf10 <cardCommand(unsigned long, unsigned long)>
    d04a:	cmp	r0, #0
    d04c:	beq.n	d006 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x22>
  m_busyFcn = 0;
  return false;  // Caller will set errorCode.
}
//------------------------------------------------------------------------------
static bool waitDmaStatus() {
  if (yieldTimeout(isBusyDMA)) {
    d04e:	ldr	r0, [pc, #72]	; (d098 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xb4>)
    d050:	bl	ce94 <yieldTimeout(bool (*)())>
    d054:	cmp	r0, #0
    d056:	bne.n	d006 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x22>
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512*sector)) {
    return false;
  }
  return waitDmaStatus();
}
    d058:	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    d05c:	b.w	cfc4 <waitDmaStatus() [clone .part.5]>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    d060:	ldr	r1, [pc, #16]	; (d074 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x90>)
    d062:	movs	r0, #10
  m_errorLine = line;
    d064:	ldr	r3, [pc, #16]	; (d078 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x94>)
    d066:	mov.w	r2, #506	; 0x1fa
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    d06a:	strb	r0, [r1, #0]
  m_errorLine = line;
    d06c:	str	r2, [r3, #0]
                       uint32_t sector, uint8_t* buf, size_t n) {
  if ((3 & (uint32_t)buf) || n == 0) {
    return sdError(SD_CARD_ERROR_DMA);
  }
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
    d06e:	b.n	d006 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x22>
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)buf;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512*sector)) {
    d070:	mov	r1, r7
    d072:	b.n	d044 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x60>
    d074:	.word	0x20000c24
    d078:	.word	0x200440bc
    d07c:	.word	0x0000cf79
    d080:	.word	0x1fff0000
    d084:	.word	0x200440b8
    d088:	.word	0x200440a0
    d08c:	.word	0x402c0000
    d090:	.word	0x117f0002
    d094:	.word	0x20044090
    d098:	.word	0x0000cdbd

0000d09c <SdioCard::sectorCount()>:
  csd1_t v1;
  csd2_t v2;
};
//-----------------------------------------------------------------------------
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    d09c:	ldr	r1, [pc, #100]	; (d104 <SdioCard::sectorCount()+0x68>)
//------------------------------------------------------------------------------
bool SdioCard::readStop() {
  return transferStop();
}
//------------------------------------------------------------------------------
uint32_t SdioCard::sectorCount() {
    d09e:	push	{r4, r5, r6}
    d0a0:	ldrb	r3, [r1, #0]
    d0a2:	ands.w	r3, r3, #192	; 0xc0
    d0a6:	beq.n	d0cc <SdioCard::sectorCount()+0x30>
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
  } else if (csd->v2.csd_ver == 1) {
    d0a8:	cmp	r3, #64	; 0x40
    d0aa:	beq.n	d0b2 <SdioCard::sectorCount()+0x16>
    return (((uint32_t)csd->v2.c_size_high << 16) +
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
  } else {
    return 0;
    d0ac:	movs	r0, #0
  return sdCardCapacity(&m_csd);
}
    d0ae:	pop	{r4, r5, r6}
    d0b0:	bx	lr
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
  } else if (csd->v2.csd_ver == 1) {
    return (((uint32_t)csd->v2.c_size_high << 16) +
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    d0b2:	ldrb	r3, [r1, #9]
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
  } else if (csd->v2.csd_ver == 1) {
    return (((uint32_t)csd->v2.c_size_high << 16) +
    d0b4:	ldrb	r4, [r1, #7]
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    d0b6:	adds	r2, r3, #1
    d0b8:	ldrb	r0, [r1, #8]
    d0ba:	and.w	r3, r4, #63	; 0x3f
    d0be:	add.w	r3, r2, r3, lsl #16
    d0c2:	add.w	r0, r3, r0, lsl #8
    d0c6:	pop	{r4, r5, r6}
    d0c8:	lsls	r0, r0, #10
    d0ca:	bx	lr
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    uint8_t read_bl_len = csd->v1.read_bl_len;
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
    d0cc:	ldrb	r5, [r1, #9]
};
//-----------------------------------------------------------------------------
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    uint8_t read_bl_len = csd->v1.read_bl_len;
    uint16_t c_size = (csd->v1.c_size_high << 10)
    d0ce:	ldrb	r3, [r1, #6]
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    d0d0:	ldrb	r2, [r1, #7]
    d0d2:	and.w	r5, r5, #3
  if (csd->v1.csd_ver == 0) {
    uint8_t read_bl_len = csd->v1.read_bl_len;
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    d0d6:	ldrb	r0, [r1, #10]
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    d0d8:	and.w	r3, r3, #3
    d0dc:	lsls	r5, r5, #1
  csd2_t v2;
};
//-----------------------------------------------------------------------------
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    uint8_t read_bl_len = csd->v1.read_bl_len;
    d0de:	ldrb	r4, [r1, #5]
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    d0e0:	lsls	r2, r2, #2
//-----------------------------------------------------------------------------
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    uint8_t read_bl_len = csd->v1.read_bl_len;
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    d0e2:	ldrb	r6, [r1, #8]
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    d0e4:	orr.w	r0, r5, r0, lsr #7
    d0e8:	and.w	r1, r4, #15
    d0ec:	orr.w	r3, r2, r3, lsl #10
    d0f0:	add	r0, r1
    d0f2:	orr.w	r3, r3, r6, lsr #6
    d0f6:	subs	r0, #7
    d0f8:	adds	r3, #1
    d0fa:	pop	{r4, r5, r6}
    d0fc:	lsl.w	r0, r3, r0
    d100:	bx	lr
    d102:	nop
    d104:	.word	0x200440a8

0000d108 <SdioCard::isBusy()>:
  return m_errorLine;
}
//------------------------------------------------------------------------------
bool SdioCard::isBusy() {
#if ENABLE_TEENSY_SDIO_MOD
  if (m_sdioConfig.useDma()) {
    d108:	ldrb	r3, [r0, #8]
    d10a:	lsls	r3, r3, #31
    d10c:	bpl.n	d116 <SdioCard::isBusy()+0xe>
    return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
    d10e:	ldr	r3, [pc, #56]	; (d148 <SdioCard::isBusy()+0x40>)
    d110:	ldr	r3, [r3, #0]
    d112:	cbz	r3, d13a <SdioCard::isBusy()+0x32>
    d114:	bx	r3
  } else {
    if (m_transferActive) {
    d116:	ldr	r3, [pc, #52]	; (d14c <SdioCard::isBusy()+0x44>)
    d118:	ldrb	r3, [r3, #0]
    d11a:	cbnz	r3, d12a <SdioCard::isBusy()+0x22>
#else  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
      return false;
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
    }
    // Use DAT0 low as busy.
    return SDHC_PRSSTAT & (1 << 24) ? false : true;
    d11c:	ldr	r3, [pc, #48]	; (d150 <SdioCard::isBusy()+0x48>)
    d11e:	ldr	r0, [r3, #36]	; 0x24
    d120:	eor.w	r0, r0, #16777216	; 0x1000000
    d124:	ubfx	r0, r0, #24, #1
  }
#else  // ENABLE_TEENSY_SDIO_MOD
  return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
#endif  // ENABLE_TEENSY_SDIO_MOD
}
    d128:	bx	lr
static bool isBusyFifoWrite() {
  return !(SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN);
}
//------------------------------------------------------------------------------
static bool isBusyTransferComplete() {
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
    d12a:	ldr	r3, [pc, #36]	; (d150 <SdioCard::isBusy()+0x48>)
#if ENABLE_TEENSY_SDIO_MOD
  if (m_sdioConfig.useDma()) {
    return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
  } else {
    if (m_transferActive) {
      if (isBusyTransferComplete()) {
    d12c:	ldr	r0, [pc, #36]	; (d154 <SdioCard::isBusy()+0x4c>)
static bool isBusyFifoWrite() {
  return !(SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN);
}
//------------------------------------------------------------------------------
static bool isBusyTransferComplete() {
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
    d12e:	ldr	r3, [r3, #48]	; 0x30
#if ENABLE_TEENSY_SDIO_MOD
  if (m_sdioConfig.useDma()) {
    return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
  } else {
    if (m_transferActive) {
      if (isBusyTransferComplete()) {
    d130:	ands	r0, r3
    d132:	clz	r0, r0
    d136:	lsrs	r0, r0, #5
    d138:	bx	lr
}
//------------------------------------------------------------------------------
bool SdioCard::isBusy() {
#if ENABLE_TEENSY_SDIO_MOD
  if (m_sdioConfig.useDma()) {
    return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
    d13a:	ldr	r3, [pc, #28]	; (d158 <SdioCard::isBusy()+0x50>)
    d13c:	ldrb	r0, [r3, #0]
    d13e:	cmp	r0, #0
    d140:	beq.n	d128 <SdioCard::isBusy()+0x20>
    d142:	b.w	cf78 <isBusyCMD13()>
    d146:	nop
    d148:	.word	0x2004408c
    d14c:	.word	0x2004409c
    d150:	.word	0x402c0000
    d154:	.word	0x117f0002
    d158:	.word	0x200440a4

0000d15c <SdioCard::erase(unsigned long, unsigned long)>:
  enableGPIO(true);
  m_initDone = true;
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::erase(uint32_t firstSector, uint32_t lastSector) {
    d15c:	push	{r4, r5, r6, lr}
    d15e:	mov	r6, r2
#if ENABLE_TEENSY_SDIO_MOD
  if (m_curState != IDLE_STATE && !syncDevice()) {
    d160:	ldrb	r2, [r0, #9]
  enableGPIO(true);
  m_initDone = true;
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::erase(uint32_t firstSector, uint32_t lastSector) {
    d162:	mov	r5, r1
#if ENABLE_TEENSY_SDIO_MOD
  if (m_curState != IDLE_STATE && !syncDevice()) {
    d164:	cbnz	r2, d1c2 <SdioCard::erase(unsigned long, unsigned long)+0x66>
    return false;
  }
#endif  // ENABLE_TEENSY_SDIO_MOD
  // check for single sector erase
  if (!m_csd.v1.erase_blk_en) {
    d166:	ldr	r2, [pc, #192]	; (d228 <SdioCard::erase(unsigned long, unsigned long)+0xcc>)
    d168:	ldrb	r3, [r2, #10]
    d16a:	and.w	r0, r3, #64	; 0x40
    d16e:	and.w	r4, r0, #255	; 0xff
    d172:	cbz	r0, d19c <SdioCard::erase(unsigned long, unsigned long)+0x40>
    if ((firstSector & m) != 0 || ((lastSector + 1) & m) != 0) {
      // error card can't erase specified area
      return sdError(SD_CARD_ERROR_ERASE_SINGLE_SECTOR);
    }
  }
  if (!m_highCapacity) {
    d174:	ldr	r3, [pc, #180]	; (d22c <SdioCard::erase(unsigned long, unsigned long)+0xd0>)
    d176:	ldrb	r3, [r3, #0]
    d178:	cbnz	r3, d17e <SdioCard::erase(unsigned long, unsigned long)+0x22>
    firstSector <<= 9;
    d17a:	lsls	r5, r5, #9
    lastSector <<= 9;
    d17c:	lsls	r6, r6, #9
  }
  if (!cardCommand(CMD32_XFERTYP, firstSector)) {
    d17e:	mov	r1, r5
    d180:	ldr	r0, [pc, #172]	; (d230 <SdioCard::erase(unsigned long, unsigned long)+0xd4>)
    d182:	bl	cf10 <cardCommand(unsigned long, unsigned long)>
    d186:	mov	r4, r0
    d188:	cbnz	r0, d1d2 <SdioCard::erase(unsigned long, unsigned long)+0x76>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    d18a:	ldr	r1, [pc, #168]	; (d234 <SdioCard::erase(unsigned long, unsigned long)+0xd8>)
    d18c:	movs	r0, #15
  m_errorLine = line;
    d18e:	ldr	r3, [pc, #168]	; (d238 <SdioCard::erase(unsigned long, unsigned long)+0xdc>)
    d190:	mov.w	r2, #752	; 0x2f0
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    d194:	strb	r0, [r1, #0]
  m_errorLine = line;
    d196:	str	r2, [r3, #0]
  }
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_ERASE_TIMEOUT);
  }
  return true;
}
    d198:	mov	r0, r4
    d19a:	pop	{r4, r5, r6, pc}
#endif  // ENABLE_TEENSY_SDIO_MOD
  // check for single sector erase
  if (!m_csd.v1.erase_blk_en) {
    // erase size mask
    uint8_t m = (m_csd.v1.sector_size_high << 1) | m_csd.v1.sector_size_low;
    if ((firstSector & m) != 0 || ((lastSector + 1) & m) != 0) {
    d19c:	and.w	r3, r3, #63	; 0x3f
  }
#endif  // ENABLE_TEENSY_SDIO_MOD
  // check for single sector erase
  if (!m_csd.v1.erase_blk_en) {
    // erase size mask
    uint8_t m = (m_csd.v1.sector_size_high << 1) | m_csd.v1.sector_size_low;
    d1a0:	ldrb	r1, [r2, #11]
    if ((firstSector & m) != 0 || ((lastSector + 1) & m) != 0) {
    d1a2:	adds	r2, r6, #1
    d1a4:	lsls	r3, r3, #1
    d1a6:	orrs	r2, r5
    d1a8:	orr.w	r3, r3, r1, lsr #7
    d1ac:	tst	r3, r2
    d1ae:	beq.n	d174 <SdioCard::erase(unsigned long, unsigned long)+0x18>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    d1b0:	ldr	r1, [pc, #128]	; (d234 <SdioCard::erase(unsigned long, unsigned long)+0xd8>)
    d1b2:	movs	r0, #39	; 0x27
  m_errorLine = line;
    d1b4:	ldr	r3, [pc, #128]	; (d238 <SdioCard::erase(unsigned long, unsigned long)+0xdc>)
    d1b6:	mov.w	r2, #744	; 0x2e8
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    d1ba:	strb	r0, [r1, #0]
  }
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_ERASE_TIMEOUT);
  }
  return true;
}
    d1bc:	mov	r0, r4
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    d1be:	str	r2, [r3, #0]
  }
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_ERASE_TIMEOUT);
  }
  return true;
}
    d1c0:	pop	{r4, r5, r6, pc}
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::erase(uint32_t firstSector, uint32_t lastSector) {
#if ENABLE_TEENSY_SDIO_MOD
  if (m_curState != IDLE_STATE && !syncDevice()) {
    d1c2:	ldr	r3, [r0, #0]
    d1c4:	ldr	r3, [r3, #24]
    d1c6:	blx	r3
    d1c8:	mov	r4, r0
    d1ca:	cmp	r0, #0
    d1cc:	bne.n	d166 <SdioCard::erase(unsigned long, unsigned long)+0xa>
  }
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_ERASE_TIMEOUT);
  }
  return true;
}
    d1ce:	mov	r0, r4
    d1d0:	pop	{r4, r5, r6, pc}
    lastSector <<= 9;
  }
  if (!cardCommand(CMD32_XFERTYP, firstSector)) {
    return sdError(SD_CARD_ERROR_CMD32);
  }
  if (!cardCommand(CMD33_XFERTYP, lastSector)) {
    d1d2:	mov	r1, r6
    d1d4:	ldr	r0, [pc, #100]	; (d23c <SdioCard::erase(unsigned long, unsigned long)+0xe0>)
    d1d6:	bl	cf10 <cardCommand(unsigned long, unsigned long)>
    d1da:	mov	r4, r0
    d1dc:	cbnz	r0, d1ee <SdioCard::erase(unsigned long, unsigned long)+0x92>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    d1de:	ldr	r1, [pc, #84]	; (d234 <SdioCard::erase(unsigned long, unsigned long)+0xd8>)
    d1e0:	movs	r0, #16
  m_errorLine = line;
    d1e2:	ldr	r3, [pc, #84]	; (d238 <SdioCard::erase(unsigned long, unsigned long)+0xdc>)
    d1e4:	movw	r2, #755	; 0x2f3
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    d1e8:	strb	r0, [r1, #0]
  m_errorLine = line;
    d1ea:	str	r2, [r3, #0]
    d1ec:	b.n	d198 <SdioCard::erase(unsigned long, unsigned long)+0x3c>
    return sdError(SD_CARD_ERROR_CMD32);
  }
  if (!cardCommand(CMD33_XFERTYP, lastSector)) {
     return sdError(SD_CARD_ERROR_CMD33);
  }
  if (!cardCommand(CMD38_XFERTYP, 0)) {
    d1ee:	movs	r1, #0
    d1f0:	ldr	r0, [pc, #76]	; (d240 <SdioCard::erase(unsigned long, unsigned long)+0xe4>)
    d1f2:	bl	cf10 <cardCommand(unsigned long, unsigned long)>
    d1f6:	mov	r4, r0
    d1f8:	cbnz	r0, d20a <SdioCard::erase(unsigned long, unsigned long)+0xae>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    d1fa:	ldr	r1, [pc, #56]	; (d234 <SdioCard::erase(unsigned long, unsigned long)+0xd8>)
    d1fc:	movs	r0, #17
  m_errorLine = line;
    d1fe:	ldr	r3, [pc, #56]	; (d238 <SdioCard::erase(unsigned long, unsigned long)+0xdc>)
    d200:	movw	r2, #758	; 0x2f6
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    d204:	strb	r0, [r1, #0]
  m_errorLine = line;
    d206:	str	r2, [r3, #0]
    d208:	b.n	d198 <SdioCard::erase(unsigned long, unsigned long)+0x3c>
     return sdError(SD_CARD_ERROR_CMD33);
  }
  if (!cardCommand(CMD38_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD38);
  }
  if (waitTimeout(isBusyCMD13)) {
    d20a:	ldr	r0, [pc, #56]	; (d244 <SdioCard::erase(unsigned long, unsigned long)+0xe8>)
    d20c:	bl	ce6c <waitTimeout(bool (*)())>
    d210:	cmp	r0, #0
    d212:	beq.n	d198 <SdioCard::erase(unsigned long, unsigned long)+0x3c>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    d214:	ldr	r1, [pc, #28]	; (d234 <SdioCard::erase(unsigned long, unsigned long)+0xd8>)
    d216:	movs	r0, #40	; 0x28
  m_errorLine = line;
    d218:	ldr	r3, [pc, #28]	; (d238 <SdioCard::erase(unsigned long, unsigned long)+0xdc>)
    d21a:	movw	r2, #761	; 0x2f9
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    d21e:	strb	r0, [r1, #0]
  }
  if (!cardCommand(CMD38_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD38);
  }
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_ERASE_TIMEOUT);
    d220:	movs	r4, #0
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    d222:	str	r2, [r3, #0]
    d224:	b.n	d198 <SdioCard::erase(unsigned long, unsigned long)+0x3c>
    d226:	nop
    d228:	.word	0x200440a8
    d22c:	.word	0x20044090
    d230:	.word	0x201a0000
    d234:	.word	0x20000c24
    d238:	.word	0x200440bc
    d23c:	.word	0x211a0000
    d240:	.word	0x261b0000
    d244:	.word	0x0000cf79

0000d248 <waitTransferComplete() [clone .part.10]>:
  }
  return false;  // Caller will set errorCode.
}
#if ENABLE_TEENSY_SDIO_MOD
//------------------------------------------------------------------------------
static bool waitTransferComplete() {
    d248:	push	{r4, lr}
  if (!m_transferActive) {
    return true;
  }
  bool timeOut = waitTimeout(isBusyTransferComplete);
    d24a:	ldr	r0, [pc, #56]	; (d284 <waitTransferComplete() [clone .part.10]+0x3c>)
  m_transferActive = false;
    d24c:	movs	r4, #0
//------------------------------------------------------------------------------
static bool waitTransferComplete() {
  if (!m_transferActive) {
    return true;
  }
  bool timeOut = waitTimeout(isBusyTransferComplete);
    d24e:	bl	ce6c <waitTimeout(bool (*)())>
  m_transferActive = false;
    d252:	ldr	r1, [pc, #52]	; (d288 <waitTransferComplete() [clone .part.10]+0x40>)
  m_irqstat = SDHC_IRQSTAT;
    d254:	ldr	r2, [pc, #52]	; (d28c <waitTransferComplete() [clone .part.10]+0x44>)
    d256:	ldr	r3, [pc, #56]	; (d290 <waitTransferComplete() [clone .part.10]+0x48>)
static bool waitTransferComplete() {
  if (!m_transferActive) {
    return true;
  }
  bool timeOut = waitTimeout(isBusyTransferComplete);
  m_transferActive = false;
    d258:	strb	r4, [r1, #0]
  m_irqstat = SDHC_IRQSTAT;
    d25a:	ldr	r1, [r2, #48]	; 0x30
    d25c:	str	r1, [r3, #0]
  SDHC_IRQSTAT = m_irqstat;
    d25e:	ldr	r1, [r3, #0]
    d260:	str	r1, [r2, #48]	; 0x30
  if (timeOut || (m_irqstat & SDHC_IRQSTAT_ERROR)) {
    d262:	cbnz	r0, d26c <waitTransferComplete() [clone .part.10]+0x24>
    d264:	ldr	r2, [r3, #0]
    d266:	ldr	r3, [pc, #44]	; (d294 <waitTransferComplete() [clone .part.10]+0x4c>)
    d268:	ands	r3, r2
    d26a:	cbz	r3, d27e <waitTransferComplete() [clone .part.10]+0x36>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    d26c:	ldr	r1, [pc, #40]	; (d298 <waitTransferComplete() [clone .part.10]+0x50>)
    d26e:	movs	r4, #31
  m_errorLine = line;
    d270:	ldr	r3, [pc, #40]	; (d29c <waitTransferComplete() [clone .part.10]+0x54>)
    d272:	movw	r2, #638	; 0x27e
  bool timeOut = waitTimeout(isBusyTransferComplete);
  m_transferActive = false;
  m_irqstat = SDHC_IRQSTAT;
  SDHC_IRQSTAT = m_irqstat;
  if (timeOut || (m_irqstat & SDHC_IRQSTAT_ERROR)) {
    return sdError(SD_CARD_ERROR_TRANSFER_COMPLETE);
    d276:	movs	r0, #0
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    d278:	strb	r4, [r1, #0]
  m_errorLine = line;
    d27a:	str	r2, [r3, #0]
  SDHC_IRQSTAT = m_irqstat;
  if (timeOut || (m_irqstat & SDHC_IRQSTAT_ERROR)) {
    return sdError(SD_CARD_ERROR_TRANSFER_COMPLETE);
  }
  return true;
}
    d27c:	pop	{r4, pc}
  m_irqstat = SDHC_IRQSTAT;
  SDHC_IRQSTAT = m_irqstat;
  if (timeOut || (m_irqstat & SDHC_IRQSTAT_ERROR)) {
    return sdError(SD_CARD_ERROR_TRANSFER_COMPLETE);
  }
  return true;
    d27e:	movs	r0, #1
    d280:	pop	{r4, pc}
    d282:	nop
    d284:	.word	0x0000cdf1
    d288:	.word	0x2004409c
    d28c:	.word	0x402c0000
    d290:	.word	0x200440a0
    d294:	.word	0x117f0000
    d298:	.word	0x20000c24
    d29c:	.word	0x200440bc

0000d2a0 <SdioCard::readStop()>:
    return sdError(SD_CARD_ERROR_CMD25);
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeStop() {
    d2a0:	push	{r3, r4, r5, lr}
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
}
//------------------------------------------------------------------------------
static bool transferStop() {
  // This fix allows CDIHB to be cleared in Tennsy 3.x without a reset.
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    d2a2:	ldr	r4, [pc, #96]	; (d304 <SdioCard::readStop()+0x64>)
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    d2a4:	movs	r1, #0
    d2a6:	ldr	r0, [pc, #96]	; (d308 <SdioCard::readStop()+0x68>)
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
}
//------------------------------------------------------------------------------
static bool transferStop() {
  // This fix allows CDIHB to be cleared in Tennsy 3.x without a reset.
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    d2a8:	ldr	r3, [r4, #40]	; 0x28
    d2aa:	bic.w	r3, r3, #65536	; 0x10000
    d2ae:	str	r3, [r4, #40]	; 0x28
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    d2b0:	bl	cf10 <cardCommand(unsigned long, unsigned long)>
    d2b4:	mov	r5, r0
    d2b6:	cbnz	r0, d2ca <SdioCard::readStop()+0x2a>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    d2b8:	ldr	r1, [pc, #80]	; (d30c <SdioCard::readStop()+0x6c>)
    d2ba:	movs	r0, #9
  m_errorLine = line;
    d2bc:	ldr	r3, [pc, #80]	; (d310 <SdioCard::readStop()+0x70>)
    d2be:	movw	r2, #575	; 0x23f
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    d2c2:	strb	r0, [r1, #0]
  m_errorLine = line;
    d2c4:	str	r2, [r3, #0]
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeStop() {
  return transferStop();
}
    d2c6:	mov	r0, r5
    d2c8:	pop	{r3, r4, r5, pc}
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD12);
  }
//  if (yieldTimeout(isBusyCMD13)) {
  if (yieldTimeout(isBusyDat)) {
    d2ca:	ldr	r0, [pc, #72]	; (d314 <SdioCard::readStop()+0x74>)
    d2cc:	bl	ce94 <yieldTimeout(bool (*)())>
    d2d0:	cbnz	r0, d2f0 <SdioCard::readStop()+0x50>
    return sdError(SD_CARD_ERROR_CMD13);
  }
  if (SDHC_PRSSTAT & SDHC_PRSSTAT_CDIHB) {
    d2d2:	ldr	r3, [r4, #36]	; 0x24
    d2d4:	lsls	r3, r3, #30
    d2d6:	bpl.n	d2c6 <SdioCard::readStop()+0x26>
    // This should not happen after above fix.
    // Save registers before reset DAT lines.
    uint32_t irqsststen = SDHC_IRQSTATEN;
    d2d8:	ldr	r1, [r4, #52]	; 0x34
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeStop() {
  return transferStop();
}
    d2da:	mov	r0, r5
  }
  if (SDHC_PRSSTAT & SDHC_PRSSTAT_CDIHB) {
    // This should not happen after above fix.
    // Save registers before reset DAT lines.
    uint32_t irqsststen = SDHC_IRQSTATEN;
    uint32_t proctl = SDHC_PROCTL & ~SDHC_PROCTL_SABGREQ;
    d2dc:	ldr	r3, [r4, #40]	; 0x28
    // Do reset to clear CDIHB.  Should be a better way!
    SDHC_SYSCTL |= SDHC_SYSCTL_RSTD;
    d2de:	ldr	r2, [r4, #44]	; 0x2c
  }
  if (SDHC_PRSSTAT & SDHC_PRSSTAT_CDIHB) {
    // This should not happen after above fix.
    // Save registers before reset DAT lines.
    uint32_t irqsststen = SDHC_IRQSTATEN;
    uint32_t proctl = SDHC_PROCTL & ~SDHC_PROCTL_SABGREQ;
    d2e0:	bic.w	r3, r3, #65536	; 0x10000
    // Do reset to clear CDIHB.  Should be a better way!
    SDHC_SYSCTL |= SDHC_SYSCTL_RSTD;
    d2e4:	orr.w	r2, r2, #67108864	; 0x4000000
    d2e8:	str	r2, [r4, #44]	; 0x2c
    // Restore registers.
    SDHC_IRQSTATEN = irqsststen;
    d2ea:	str	r1, [r4, #52]	; 0x34
    SDHC_PROCTL = proctl;
    d2ec:	str	r3, [r4, #40]	; 0x28
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeStop() {
  return transferStop();
}
    d2ee:	pop	{r3, r4, r5, pc}
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    d2f0:	ldr	r1, [pc, #24]	; (d30c <SdioCard::readStop()+0x6c>)
    d2f2:	movs	r0, #10
  m_errorLine = line;
    d2f4:	ldr	r3, [pc, #24]	; (d310 <SdioCard::readStop()+0x70>)
    d2f6:	movw	r2, #579	; 0x243
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD12);
  }
//  if (yieldTimeout(isBusyCMD13)) {
  if (yieldTimeout(isBusyDat)) {
    return sdError(SD_CARD_ERROR_CMD13);
    d2fa:	movs	r5, #0
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    d2fc:	strb	r0, [r1, #0]
  m_errorLine = line;
    d2fe:	str	r2, [r3, #0]
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeStop() {
  return transferStop();
}
    d300:	mov	r0, r5
    d302:	pop	{r3, r4, r5, pc}
    d304:	.word	0x402c0000
    d308:	.word	0x0cdb0000
    d30c:	.word	0x20000c24
    d310:	.word	0x200440bc
    d314:	.word	0x0000cda9

0000d318 <SdioCard::writeData(unsigned char const*)>:
uint8_t SdioCard::type() const {
  return  m_version2 ? m_highCapacity ?
          SD_CARD_TYPE_SDHC : SD_CARD_TYPE_SD2 : SD_CARD_TYPE_SD1;
}
//------------------------------------------------------------------------------
bool SdioCard::writeData(const uint8_t* src) {
    d318:	push	{r4, r5, r6, lr}
  return false;  // Caller will set errorCode.
}
#if ENABLE_TEENSY_SDIO_MOD
//------------------------------------------------------------------------------
static bool waitTransferComplete() {
  if (!m_transferActive) {
    d31a:	ldr	r6, [pc, #120]	; (d394 <SdioCard::writeData(unsigned char const*)+0x7c>)
uint8_t SdioCard::type() const {
  return  m_version2 ? m_highCapacity ?
          SD_CARD_TYPE_SDHC : SD_CARD_TYPE_SD2 : SD_CARD_TYPE_SD1;
}
//------------------------------------------------------------------------------
bool SdioCard::writeData(const uint8_t* src) {
    d31c:	mov	r5, r1
  return false;  // Caller will set errorCode.
}
#if ENABLE_TEENSY_SDIO_MOD
//------------------------------------------------------------------------------
static bool waitTransferComplete() {
  if (!m_transferActive) {
    d31e:	ldrb	r3, [r6, #0]
    d320:	cmp	r3, #0
    d322:	bne.n	d388 <SdioCard::writeData(unsigned char const*)+0x70>
  if (!waitTransferComplete()) {
    return false;
  }
#endif  // ENABLE_TEENSY_SDIO_MOD
  const uint32_t* p32 = reinterpret_cast<const uint32_t*>(src);
  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_WTA)) {
    d324:	ldr	r3, [pc, #112]	; (d398 <SdioCard::writeData(unsigned char const*)+0x80>)
    d326:	ldr	r2, [r3, #36]	; 0x24
    d328:	lsls	r1, r2, #23
    d32a:	bmi.n	d33c <SdioCard::writeData(unsigned char const*)+0x24>
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    d32c:	ldr	r2, [r3, #40]	; 0x28
    d32e:	bic.w	r2, r2, #65536	; 0x10000
    d332:	str	r2, [r3, #40]	; 0x28
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
    d334:	ldr	r2, [r3, #40]	; 0x28
    d336:	orr.w	r2, r2, #131072	; 0x20000
    d33a:	str	r2, [r3, #40]	; 0x28
  }
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    d33c:	ldr	r4, [pc, #88]	; (d398 <SdioCard::writeData(unsigned char const*)+0x80>)
  if (waitTimeout(isBusyFifoWrite)) {
    d33e:	ldr	r0, [pc, #92]	; (d39c <SdioCard::writeData(unsigned char const*)+0x84>)
  const uint32_t* p32 = reinterpret_cast<const uint32_t*>(src);
  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_WTA)) {
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
  }
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    d340:	ldr	r3, [r4, #40]	; 0x28
    d342:	orr.w	r3, r3, #65536	; 0x10000
    d346:	str	r3, [r4, #40]	; 0x28
  if (waitTimeout(isBusyFifoWrite)) {
    d348:	bl	ce6c <waitTimeout(bool (*)())>
    d34c:	cbnz	r0, d376 <SdioCard::writeData(unsigned char const*)+0x5e>
    return sdError(SD_CARD_ERROR_WRITE_FIFO);
  }
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN)) {
    d34e:	mov	r0, r4
    d350:	subs	r3, r5, #4
    d352:	add.w	r4, r5, #508	; 0x1fc
    d356:	ldr	r2, [r0, #36]	; 0x24
    d358:	lsls	r2, r2, #21
    d35a:	bpl.n	d356 <SdioCard::writeData(unsigned char const*)+0x3e>
    d35c:	add.w	r1, r3, #64	; 0x40
    }
    for (uint32_t i = 0; i < FIFO_WML; i++) {
      SDHC_DATPORT = p32[i];
    d360:	ldr.w	r2, [r3, #4]!
    return sdError(SD_CARD_ERROR_WRITE_FIFO);
  }
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN)) {
    }
    for (uint32_t i = 0; i < FIFO_WML; i++) {
    d364:	cmp	r1, r3
      SDHC_DATPORT = p32[i];
    d366:	str	r2, [r0, #32]
    return sdError(SD_CARD_ERROR_WRITE_FIFO);
  }
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN)) {
    }
    for (uint32_t i = 0; i < FIFO_WML; i++) {
    d368:	bne.n	d360 <SdioCard::writeData(unsigned char const*)+0x48>
  }
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
  if (waitTimeout(isBusyFifoWrite)) {
    return sdError(SD_CARD_ERROR_WRITE_FIFO);
  }
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    d36a:	cmp	r4, r1
    d36c:	mov	r3, r1
    d36e:	bne.n	d356 <SdioCard::writeData(unsigned char const*)+0x3e>
      SDHC_DATPORT = p32[i];
    }
    p32 += FIFO_WML;
  }
#if ENABLE_TEENSY_SDIO_MOD
  m_transferActive = true;
    d370:	movs	r0, #1
    d372:	strb	r0, [r6, #0]
    d374:	pop	{r4, r5, r6, pc}
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    d376:	ldr	r1, [pc, #40]	; (d3a0 <SdioCard::writeData(unsigned char const*)+0x88>)
    d378:	movs	r4, #33	; 0x21
  m_errorLine = line;
    d37a:	ldr	r3, [pc, #40]	; (d3a4 <SdioCard::writeData(unsigned char const*)+0x8c>)
    d37c:	mov.w	r2, #1012	; 0x3f4
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
  }
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
  if (waitTimeout(isBusyFifoWrite)) {
    return sdError(SD_CARD_ERROR_WRITE_FIFO);
    d380:	movs	r0, #0
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    d382:	strb	r4, [r1, #0]
  m_errorLine = line;
    d384:	str	r2, [r3, #0]
  }
  m_irqstat = SDHC_IRQSTAT;
  SDHC_IRQSTAT = m_irqstat;
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
#endif  // ENABLE_TEENSY_SDIO_MOD
}
    d386:	pop	{r4, r5, r6, pc}
    d388:	bl	d248 <waitTransferComplete() [clone .part.10]>
}
//------------------------------------------------------------------------------
bool SdioCard::writeData(const uint8_t* src) {
  DBG_IRQSTAT();
#if ENABLE_TEENSY_SDIO_MOD
  if (!waitTransferComplete()) {
    d38c:	cmp	r0, #0
    d38e:	bne.n	d324 <SdioCard::writeData(unsigned char const*)+0xc>
  }
  m_irqstat = SDHC_IRQSTAT;
  SDHC_IRQSTAT = m_irqstat;
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
#endif  // ENABLE_TEENSY_SDIO_MOD
}
    d390:	pop	{r4, r5, r6, pc}
    d392:	nop
    d394:	.word	0x2004409c
    d398:	.word	0x402c0000
    d39c:	.word	0x0000cddd
    d3a0:	.word	0x20000c24
    d3a4:	.word	0x200440bc

0000d3a8 <SdioCard::writeStart(unsigned long)>:
    }
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeStart(uint32_t sector) {
    d3a8:	push	{r4, lr}
  if (yieldTimeout(isBusyCMD13)) {
    d3aa:	ldr	r0, [pc, #80]	; (d3fc <SdioCard::writeStart(unsigned long)+0x54>)
    }
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeStart(uint32_t sector) {
    d3ac:	mov	r4, r1
  if (yieldTimeout(isBusyCMD13)) {
    d3ae:	bl	ce94 <yieldTimeout(bool (*)())>
    d3b2:	cbnz	r0, d3e8 <SdioCard::writeStart(unsigned long)+0x40>
    return sdError(SD_CARD_ERROR_CMD13);
  }
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    d3b4:	ldr	r3, [pc, #72]	; (d400 <SdioCard::writeStart(unsigned long)+0x58>)

#if defined(__IMXRT1062__)
  // Infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
    d3b6:	mov.w	r0, #512	; 0x200
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(MAX_BLKCNT) | SDHC_BLKATTR_BLKSIZE(512);
#endif  // defined(__IMXRT1062__)
  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    d3ba:	ldr	r1, [pc, #72]	; (d404 <SdioCard::writeStart(unsigned long)+0x5c>)
//------------------------------------------------------------------------------
bool SdioCard::writeStart(uint32_t sector) {
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    d3bc:	ldr	r2, [r3, #40]	; 0x28
    d3be:	bic.w	r2, r2, #65536	; 0x10000
    d3c2:	str	r2, [r3, #40]	; 0x28

#if defined(__IMXRT1062__)
  // Infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
    d3c4:	str	r0, [r3, #4]
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(MAX_BLKCNT) | SDHC_BLKATTR_BLKSIZE(512);
#endif  // defined(__IMXRT1062__)
  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    d3c6:	ldrb	r3, [r1, #0]
    d3c8:	cbnz	r3, d3e4 <SdioCard::writeStart(unsigned long)+0x3c>
    d3ca:	lsls	r1, r4, #9
    d3cc:	ldr	r0, [pc, #56]	; (d408 <SdioCard::writeStart(unsigned long)+0x60>)
    d3ce:	bl	cf10 <cardCommand(unsigned long, unsigned long)>
    d3d2:	cbnz	r0, d3e2 <SdioCard::writeStart(unsigned long)+0x3a>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    d3d4:	ldr	r1, [pc, #52]	; (d40c <SdioCard::writeStart(unsigned long)+0x64>)
    d3d6:	movs	r4, #14
  m_errorLine = line;
    d3d8:	ldr	r3, [pc, #52]	; (d410 <SdioCard::writeStart(unsigned long)+0x68>)
    d3da:	mov.w	r2, #1128	; 0x468
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    d3de:	strb	r4, [r1, #0]
  m_errorLine = line;
    d3e0:	str	r2, [r3, #0]
#endif  // defined(__IMXRT1062__)
  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    return sdError(SD_CARD_ERROR_CMD25);
  }
  return true;
}
    d3e2:	pop	{r4, pc}
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(MAX_BLKCNT) | SDHC_BLKATTR_BLKSIZE(512);
#endif  // defined(__IMXRT1062__)
  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    d3e4:	mov	r1, r4
    d3e6:	b.n	d3cc <SdioCard::writeStart(unsigned long)+0x24>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    d3e8:	ldr	r1, [pc, #32]	; (d40c <SdioCard::writeStart(unsigned long)+0x64>)
    d3ea:	movs	r0, #10
  m_errorLine = line;
    d3ec:	ldr	r3, [pc, #32]	; (d410 <SdioCard::writeStart(unsigned long)+0x68>)
    d3ee:	movw	r2, #1116	; 0x45c
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    d3f2:	strb	r0, [r1, #0]
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeStart(uint32_t sector) {
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
    d3f4:	movs	r0, #0
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    d3f6:	str	r2, [r3, #0]
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeStart(uint32_t sector) {
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
    d3f8:	pop	{r4, pc}
    d3fa:	nop
    d3fc:	.word	0x0000cf79
    d400:	.word	0x402c0000
    d404:	.word	0x20044090
    d408:	.word	0x193a0020
    d40c:	.word	0x20000c24
    d410:	.word	0x200440bc

0000d414 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)>:
#endif  // !ENABLE_TEENSY_SDIO_MOD
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeSectors(uint32_t sector, const uint8_t* src, size_t n) {
    d414:	push	{r3, r4, r5, r6, r7, lr}
    d416:	mov	r6, r0
  if (m_sdioConfig.useDma()) {
    d418:	ldrb	r0, [r0, #8]
#endif  // !ENABLE_TEENSY_SDIO_MOD
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeSectors(uint32_t sector, const uint8_t* src, size_t n) {
    d41a:	mov	r4, r1
    d41c:	mov	r5, r2
  if (m_sdioConfig.useDma()) {
    d41e:	lsls	r0, r0, #31
#endif  // !ENABLE_TEENSY_SDIO_MOD
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeSectors(uint32_t sector, const uint8_t* src, size_t n) {
    d420:	mov	r7, r3
  if (m_sdioConfig.useDma()) {
    d422:	bmi.n	d44c <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x38>
    }
    if (!rdWrSectors(CMD25_DMA_XFERTYP, sector, ptr, n)) {
      return sdError(SD_CARD_ERROR_CMD25);
    }
  } else {
    for (size_t i = 0; i < n; i++) {
    d424:	cbz	r3, d448 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
    d426:	add	r7, r1
    d428:	b.n	d42e <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x1a>
    d42a:	cmp	r4, r7
    d42c:	beq.n	d448 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
      if (!writeSector(sector + i, src + i*512UL)) {
    d42e:	ldr	r3, [r6, #0]
    d430:	mov	r2, r5
    d432:	mov	r1, r4
    d434:	mov	r0, r6
    d436:	ldr	r3, [r3, #28]
    d438:	add.w	r5, r5, #512	; 0x200
    d43c:	adds	r4, #1
    d43e:	blx	r3
    d440:	cmp	r0, #0
    d442:	bne.n	d42a <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x16>
  if (m_sdioConfig.useDma()) {
    uint8_t* ptr = const_cast<uint8_t*>(src);
    if (3 & (uint32_t)ptr) {
      for (size_t i = 0; i < n; i++, sector++, ptr += 512) {
        if (!writeSector(sector, ptr)) {
          return false;  // writeSector will set errorCode.
    d444:	movs	r0, #0
    d446:	pop	{r3, r4, r5, r6, r7, pc}
      if (!writeSector(sector + i, src + i*512UL)) {
        return false;
      }
    }
  }
  return true;
    d448:	movs	r0, #1
    d44a:	pop	{r3, r4, r5, r6, r7, pc}
}
//------------------------------------------------------------------------------
bool SdioCard::writeSectors(uint32_t sector, const uint8_t* src, size_t n) {
  if (m_sdioConfig.useDma()) {
    uint8_t* ptr = const_cast<uint8_t*>(src);
    if (3 & (uint32_t)ptr) {
    d44c:	lsls	r0, r2, #30
    d44e:	beq.n	d476 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x62>
      for (size_t i = 0; i < n; i++, sector++, ptr += 512) {
    d450:	cmp	r3, #0
    d452:	beq.n	d448 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
    d454:	add	r7, r1
    d456:	b.n	d45c <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x48>
    d458:	cmp	r7, r4
    d45a:	beq.n	d448 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
        if (!writeSector(sector, ptr)) {
    d45c:	ldr	r3, [r6, #0]
    d45e:	mov	r2, r5
    d460:	mov	r1, r4
    d462:	mov	r0, r6
    d464:	ldr	r3, [r3, #28]
//------------------------------------------------------------------------------
bool SdioCard::writeSectors(uint32_t sector, const uint8_t* src, size_t n) {
  if (m_sdioConfig.useDma()) {
    uint8_t* ptr = const_cast<uint8_t*>(src);
    if (3 & (uint32_t)ptr) {
      for (size_t i = 0; i < n; i++, sector++, ptr += 512) {
    d466:	add.w	r5, r5, #512	; 0x200
    d46a:	adds	r4, #1
        if (!writeSector(sector, ptr)) {
    d46c:	blx	r3
    d46e:	cmp	r0, #0
    d470:	bne.n	d458 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x44>
          return false;  // writeSector will set errorCode.
    d472:	movs	r0, #0
    d474:	pop	{r3, r4, r5, r6, r7, pc}
        }
      }
      return true;
    }
    if (!rdWrSectors(CMD25_DMA_XFERTYP, sector, ptr, n)) {
    d476:	ldr	r0, [pc, #24]	; (d490 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x7c>)
    d478:	bl	cfe4 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    d47c:	cmp	r0, #0
    d47e:	bne.n	d448 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    d480:	ldr	r1, [pc, #16]	; (d494 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x80>)
    d482:	movs	r4, #14
  m_errorLine = line;
    d484:	ldr	r3, [pc, #16]	; (d498 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x84>)
    d486:	movw	r2, #1102	; 0x44e
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    d48a:	strb	r4, [r1, #0]
  m_errorLine = line;
    d48c:	str	r2, [r3, #0]
    d48e:	pop	{r3, r4, r5, r6, r7, pc}
    d490:	.word	0x193a0027
    d494:	.word	0x20000c24
    d498:	.word	0x200440bc

0000d49c <SdioCard::writeSector(unsigned long, unsigned char const*)>:
  SDHC_IRQSTAT = m_irqstat;
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
#endif  // ENABLE_TEENSY_SDIO_MOD
}
//------------------------------------------------------------------------------
bool SdioCard::writeSector(uint32_t sector, const uint8_t* src) {
    d49c:	push	{r4, r5, r6, lr}
  if (m_sdioConfig.useDma()) {
    d49e:	ldrb	r3, [r0, #8]
  SDHC_IRQSTAT = m_irqstat;
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
#endif  // ENABLE_TEENSY_SDIO_MOD
}
//------------------------------------------------------------------------------
bool SdioCard::writeSector(uint32_t sector, const uint8_t* src) {
    d4a0:	mov	r5, r2
    d4a2:	sub.w	sp, sp, #512	; 0x200
    d4a6:	mov	r6, r1
  if (m_sdioConfig.useDma()) {
    d4a8:	lsls	r2, r3, #31
    d4aa:	bpl.n	d4e0 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x44>
    uint8_t* ptr;
    uint8_t aligned[512];
    if (3 & (uint32_t)src) {
    d4ac:	lsls	r3, r5, #30
    d4ae:	beq.n	d4be <SdioCard::writeSector(unsigned long, unsigned char const*)+0x22>
      ptr = aligned;
      memcpy(aligned, src, 512);
    d4b0:	mov	r1, r5
    d4b2:	mov.w	r2, #512	; 0x200
    d4b6:	mov	r0, sp
bool SdioCard::writeSector(uint32_t sector, const uint8_t* src) {
  if (m_sdioConfig.useDma()) {
    uint8_t* ptr;
    uint8_t aligned[512];
    if (3 & (uint32_t)src) {
      ptr = aligned;
    d4b8:	mov	r5, sp
      memcpy(aligned, src, 512);
    d4ba:	bl	db14 <memcpy>
    } else {
      ptr = const_cast<uint8_t*>(src);
    }
    if (!rdWrSectors(CMD24_DMA_XFERTYP, sector, ptr, 1)) {
    d4be:	mov	r2, r5
    d4c0:	mov	r1, r6
    d4c2:	movs	r3, #1
    d4c4:	ldr	r0, [pc, #132]	; (d54c <SdioCard::writeSector(unsigned long, unsigned char const*)+0xb0>)
    d4c6:	bl	cfe4 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    d4ca:	cbnz	r0, d4da <SdioCard::writeSector(unsigned long, unsigned char const*)+0x3e>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    d4cc:	ldr	r1, [pc, #128]	; (d550 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xb4>)
    d4ce:	movs	r4, #13
  m_errorLine = line;
    d4d0:	ldr	r3, [pc, #128]	; (d554 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xb8>)
    d4d2:	movw	r2, #1046	; 0x416
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    d4d6:	strb	r4, [r1, #0]
  m_errorLine = line;
    d4d8:	str	r2, [r3, #0]
    }
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
#endif  // !ENABLE_TEENSY_SDIO_MOD
  }
  return true;
}
    d4da:	add.w	sp, sp, #512	; 0x200
    d4de:	pop	{r4, r5, r6, pc}
  return false;  // Caller will set errorCode.
}
#if ENABLE_TEENSY_SDIO_MOD
//------------------------------------------------------------------------------
static bool waitTransferComplete() {
  if (!m_transferActive) {
    d4e0:	ldr	r3, [pc, #116]	; (d558 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xbc>)
    d4e2:	mov	r4, r0
    d4e4:	ldrb	r3, [r3, #0]
    d4e6:	cbnz	r3, d514 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x78>
        return false;
      }
    }
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
#endif  // ENABLE_TEENSY_SDIO_MOD
    if (m_curState != WRITE_STATE || m_curSector != sector) {
    d4e8:	ldrb	r3, [r4, #9]
    d4ea:	cmp	r3, #2
    d4ec:	beq.n	d500 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x64>
      if (!syncDevice()) {
    d4ee:	ldr	r3, [r4, #0]
    d4f0:	mov	r0, r4
    d4f2:	ldr	r3, [r3, #24]
    d4f4:	blx	r3
    d4f6:	cbnz	r0, d520 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x84>
      return sdError(SD_CARD_ERROR_CMD24);
    }
  } else {
#if ENABLE_TEENSY_SDIO_MOD
    if (!waitTransferComplete()) {
      return false;
    d4f8:	movs	r0, #0
    }
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
#endif  // !ENABLE_TEENSY_SDIO_MOD
  }
  return true;
}
    d4fa:	add.w	sp, sp, #512	; 0x200
    d4fe:	pop	{r4, r5, r6, pc}
        return false;
      }
    }
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
#endif  // ENABLE_TEENSY_SDIO_MOD
    if (m_curState != WRITE_STATE || m_curSector != sector) {
    d500:	ldr	r3, [r4, #4]
    d502:	cmp	r6, r3
    d504:	beq.n	d534 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x98>
      if (!syncDevice()) {
    d506:	ldr	r3, [r4, #0]
    d508:	mov	r0, r4
    d50a:	ldr	r3, [r3, #24]
    d50c:	blx	r3
    d50e:	cmp	r0, #0
    d510:	beq.n	d4f8 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x5c>
    d512:	b.n	d520 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x84>
    d514:	bl	d248 <waitTransferComplete() [clone .part.10]>
    if (!rdWrSectors(CMD24_DMA_XFERTYP, sector, ptr, 1)) {
      return sdError(SD_CARD_ERROR_CMD24);
    }
  } else {
#if ENABLE_TEENSY_SDIO_MOD
    if (!waitTransferComplete()) {
    d518:	cmp	r0, #0
    d51a:	bne.n	d4e8 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x4c>
      return false;
    d51c:	movs	r0, #0
    d51e:	b.n	d4fa <SdioCard::writeSector(unsigned long, unsigned char const*)+0x5e>
#endif  // ENABLE_TEENSY_SDIO_MOD
    if (m_curState != WRITE_STATE || m_curSector != sector) {
      if (!syncDevice()) {
        return false;
      }
      if (!writeStart(sector )) {
    d520:	ldr	r3, [r4, #0]
    d522:	mov	r1, r6
    d524:	mov	r0, r4
    d526:	ldr	r3, [r3, #72]	; 0x48
    d528:	blx	r3
    d52a:	cmp	r0, #0
    d52c:	beq.n	d4f8 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x5c>
        return false;
      }
      m_curSector = sector;
      m_curState = WRITE_STATE;
    d52e:	movs	r3, #2
        return false;
      }
      if (!writeStart(sector )) {
        return false;
      }
      m_curSector = sector;
    d530:	str	r6, [r4, #4]
      m_curState = WRITE_STATE;
    d532:	strb	r3, [r4, #9]
    }
    if (!writeData(src)) {
    d534:	ldr	r3, [r4, #0]
    d536:	mov	r1, r5
    d538:	mov	r0, r4
    d53a:	ldr	r3, [r3, #68]	; 0x44
    d53c:	blx	r3
    d53e:	cmp	r0, #0
    d540:	beq.n	d4f8 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x5c>
      return false;
    }
    m_curSector++;
    d542:	ldr	r3, [r4, #4]
    d544:	adds	r3, #1
    d546:	str	r3, [r4, #4]
    d548:	b.n	d4da <SdioCard::writeSector(unsigned long, unsigned char const*)+0x3e>
    d54a:	nop
    d54c:	.word	0x183a0001
    d550:	.word	0x20000c24
    d554:	.word	0x200440bc
    d558:	.word	0x2004409c

0000d55c <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)>:
    m_curSector++;
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
    d55c:	push	{r3, r4, r5, r6, r7, lr}
    d55e:	mov	r6, r0
  if (m_sdioConfig.useDma()) {
    d560:	ldrb	r0, [r0, #8]
    m_curSector++;
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
    d562:	mov	r4, r1
    d564:	mov	r5, r2
  if (m_sdioConfig.useDma()) {
    d566:	lsls	r0, r0, #31
    m_curSector++;
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
    d568:	mov	r7, r3
  if (m_sdioConfig.useDma()) {
    d56a:	bmi.n	d594 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x38>
    }
    if (!rdWrSectors(CMD18_DMA_XFERTYP, sector, dst, n)) {
      return sdError(SD_CARD_ERROR_CMD18);
    }
  } else {
    for (size_t i = 0; i < n; i++) {
    d56c:	cbz	r3, d590 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
    d56e:	add	r7, r1
    d570:	b.n	d576 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x1a>
    d572:	cmp	r4, r7
    d574:	beq.n	d590 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
      if (!readSector(sector + i, dst + i*512UL)) {
    d576:	ldr	r3, [r6, #0]
    d578:	mov	r2, r5
    d57a:	mov	r1, r4
    d57c:	mov	r0, r6
    d57e:	ldr	r3, [r3, #12]
    d580:	add.w	r5, r5, #512	; 0x200
    d584:	adds	r4, #1
    d586:	blx	r3
    d588:	cmp	r0, #0
    d58a:	bne.n	d572 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x16>
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
  if (m_sdioConfig.useDma()) {
    if ((uint32_t)dst & 3) {
      for (size_t i = 0; i < n; i++, sector++, dst += 512) {
        if (!readSector(sector, dst)) {
          return false;  // readSector will set errorCode.
    d58c:	movs	r0, #0
    d58e:	pop	{r3, r4, r5, r6, r7, pc}
      if (!readSector(sector + i, dst + i*512UL)) {
        return false;
      }
    }
  }
  return true;
    d590:	movs	r0, #1
    d592:	pop	{r3, r4, r5, r6, r7, pc}
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
  if (m_sdioConfig.useDma()) {
    if ((uint32_t)dst & 3) {
    d594:	lsls	r0, r2, #30
    d596:	beq.n	d5be <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x62>
      for (size_t i = 0; i < n; i++, sector++, dst += 512) {
    d598:	cmp	r3, #0
    d59a:	beq.n	d590 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
    d59c:	add	r7, r1
    d59e:	b.n	d5a4 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x48>
    d5a0:	cmp	r7, r4
    d5a2:	beq.n	d590 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
        if (!readSector(sector, dst)) {
    d5a4:	ldr	r3, [r6, #0]
    d5a6:	mov	r2, r5
    d5a8:	mov	r1, r4
    d5aa:	mov	r0, r6
    d5ac:	ldr	r3, [r3, #12]
}
//------------------------------------------------------------------------------
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
  if (m_sdioConfig.useDma()) {
    if ((uint32_t)dst & 3) {
      for (size_t i = 0; i < n; i++, sector++, dst += 512) {
    d5ae:	add.w	r5, r5, #512	; 0x200
    d5b2:	adds	r4, #1
        if (!readSector(sector, dst)) {
    d5b4:	blx	r3
    d5b6:	cmp	r0, #0
    d5b8:	bne.n	d5a0 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x44>
          return false;  // readSector will set errorCode.
    d5ba:	movs	r0, #0
    d5bc:	pop	{r3, r4, r5, r6, r7, pc}
        }
      }
      return true;
    }
    if (!rdWrSectors(CMD18_DMA_XFERTYP, sector, dst, n)) {
    d5be:	ldr	r0, [pc, #24]	; (d5d8 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x7c>)
    d5c0:	bl	cfe4 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    d5c4:	cmp	r0, #0
    d5c6:	bne.n	d590 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    d5c8:	ldr	r1, [pc, #16]	; (d5dc <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x80>)
    d5ca:	movs	r4, #12
  m_errorLine = line;
    d5cc:	ldr	r3, [pc, #16]	; (d5e0 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x84>)
    d5ce:	movw	r2, #909	; 0x38d
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    d5d2:	strb	r4, [r1, #0]
  m_errorLine = line;
    d5d4:	str	r2, [r3, #0]
    d5d6:	pop	{r3, r4, r5, r6, r7, pc}
    d5d8:	.word	0x123a0037
    d5dc:	.word	0x20000c24
    d5e0:	.word	0x200440bc

0000d5e4 <SdioCard::readData(unsigned char*)>:
bool SdioCard::readCSD(csd_t* csd) {
  memcpy(csd, &m_csd, 16);
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readData(uint8_t* dst) {
    d5e4:	push	{r3, r4, r5, lr}
  DBG_IRQSTAT();
  uint32_t* p32 = reinterpret_cast<uint32_t*>(dst);

  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_RTA)) {
    d5e6:	ldr	r3, [pc, #156]	; (d684 <SdioCard::readData(unsigned char*)+0xa0>)
bool SdioCard::readCSD(csd_t* csd) {
  memcpy(csd, &m_csd, 16);
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readData(uint8_t* dst) {
    d5e8:	mov	r5, r1
  DBG_IRQSTAT();
  uint32_t* p32 = reinterpret_cast<uint32_t*>(dst);

  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_RTA)) {
    d5ea:	ldr	r2, [r3, #36]	; 0x24
    d5ec:	lsls	r4, r2, #22
    d5ee:	bmi.n	d60c <SdioCard::readData(unsigned char*)+0x28>
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    d5f0:	ldr	r2, [r3, #40]	; 0x28
    d5f2:	bic.w	r2, r2, #65536	; 0x10000
    d5f6:	str	r2, [r3, #40]	; 0x28
    noInterrupts();
    d5f8:	cpsid	i
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
    d5fa:	ldr	r2, [r3, #40]	; 0x28
    d5fc:	orr.w	r2, r2, #131072	; 0x20000
    d600:	str	r2, [r3, #40]	; 0x28
    SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    d602:	ldr	r2, [r3, #40]	; 0x28
    d604:	orr.w	r2, r2, #65536	; 0x10000
    d608:	str	r2, [r3, #40]	; 0x28
    interrupts();
    d60a:	cpsie	i
  }
  if (waitTimeout(isBusyFifoRead)) {
    d60c:	ldr	r0, [pc, #120]	; (d688 <SdioCard::readData(unsigned char*)+0xa4>)
    d60e:	bl	ce6c <waitTimeout(bool (*)())>
    d612:	cmp	r0, #0
    d614:	bne.n	d672 <SdioCard::readData(unsigned char*)+0x8e>
    d616:	subs	r3, r5, #4
    return sdError(SD_CARD_ERROR_READ_FIFO);
  }
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BREN)) {
    d618:	ldr	r1, [pc, #104]	; (d684 <SdioCard::readData(unsigned char*)+0xa0>)
    d61a:	add.w	r5, r5, #508	; 0x1fc
    d61e:	ldr	r2, [r1, #36]	; 0x24
    d620:	lsls	r0, r2, #20
    d622:	bpl.n	d61e <SdioCard::readData(unsigned char*)+0x3a>
    d624:	add.w	r0, r3, #64	; 0x40
    }
    for (uint32_t i = 0; i < FIFO_WML; i++) {
      p32[i] = SDHC_DATPORT;
    d628:	ldr	r2, [r1, #32]
    d62a:	ldr	r4, [pc, #88]	; (d684 <SdioCard::readData(unsigned char*)+0xa0>)
    d62c:	str.w	r2, [r3, #4]!
    return sdError(SD_CARD_ERROR_READ_FIFO);
  }
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BREN)) {
    }
    for (uint32_t i = 0; i < FIFO_WML; i++) {
    d630:	cmp	r0, r3
    d632:	bne.n	d628 <SdioCard::readData(unsigned char*)+0x44>
    interrupts();
  }
  if (waitTimeout(isBusyFifoRead)) {
    return sdError(SD_CARD_ERROR_READ_FIFO);
  }
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    d634:	cmp	r5, r0
    d636:	mov	r3, r0
    d638:	bne.n	d61e <SdioCard::readData(unsigned char*)+0x3a>
    for (uint32_t i = 0; i < FIFO_WML; i++) {
      p32[i] = SDHC_DATPORT;
    }
    p32 += FIFO_WML;
  }
  if (waitTimeout(isBusyTransferComplete)) {
    d63a:	ldr	r0, [pc, #80]	; (d68c <SdioCard::readData(unsigned char*)+0xa8>)
    d63c:	bl	ce6c <waitTimeout(bool (*)())>
    d640:	cbnz	r0, d660 <SdioCard::readData(unsigned char*)+0x7c>
    return sdError(SD_CARD_ERROR_READ_TIMEOUT);
  }
  m_irqstat = SDHC_IRQSTAT;
    d642:	ldr	r2, [r4, #48]	; 0x30
    d644:	ldr	r3, [pc, #72]	; (d690 <SdioCard::readData(unsigned char*)+0xac>)
    d646:	str	r2, [r3, #0]
  SDHC_IRQSTAT = m_irqstat;
    d648:	ldr	r2, [r3, #0]
    d64a:	str	r2, [r4, #48]	; 0x30
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    d64c:	ldr	r2, [r3, #0]
    d64e:	lsls	r2, r2, #30
    d650:	bpl.n	d682 <SdioCard::readData(unsigned char*)+0x9e>
    d652:	ldr	r3, [r3, #0]
    d654:	ldr	r0, [pc, #60]	; (d694 <SdioCard::readData(unsigned char*)+0xb0>)
    d656:	ands	r0, r3
    d658:	clz	r0, r0
    d65c:	lsrs	r0, r0, #5
    d65e:	pop	{r3, r4, r5, pc}
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    d660:	ldr	r1, [pc, #52]	; (d698 <SdioCard::readData(unsigned char*)+0xb4>)
    d662:	movs	r0, #29
  m_errorLine = line;
    d664:	ldr	r3, [pc, #52]	; (d69c <SdioCard::readData(unsigned char*)+0xb8>)
    d666:	movw	r2, #843	; 0x34b
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    d66a:	strb	r0, [r1, #0]
      p32[i] = SDHC_DATPORT;
    }
    p32 += FIFO_WML;
  }
  if (waitTimeout(isBusyTransferComplete)) {
    return sdError(SD_CARD_ERROR_READ_TIMEOUT);
    d66c:	movs	r0, #0
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    d66e:	str	r2, [r3, #0]
    d670:	pop	{r3, r4, r5, pc}
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    d672:	ldr	r1, [pc, #36]	; (d698 <SdioCard::readData(unsigned char*)+0xb4>)
    d674:	movs	r4, #26
  m_errorLine = line;
    d676:	ldr	r3, [pc, #36]	; (d69c <SdioCard::readData(unsigned char*)+0xb8>)
    d678:	mov.w	r2, #832	; 0x340
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
    SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    interrupts();
  }
  if (waitTimeout(isBusyFifoRead)) {
    return sdError(SD_CARD_ERROR_READ_FIFO);
    d67c:	movs	r0, #0
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    d67e:	strb	r4, [r1, #0]
  m_errorLine = line;
    d680:	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_READ_TIMEOUT);
  }
  m_irqstat = SDHC_IRQSTAT;
  SDHC_IRQSTAT = m_irqstat;
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
    d682:	pop	{r3, r4, r5, pc}
    d684:	.word	0x402c0000
    d688:	.word	0x0000cdc9
    d68c:	.word	0x0000cdf1
    d690:	.word	0x200440a0
    d694:	.word	0x117f0000
    d698:	.word	0x20000c24
    d69c:	.word	0x200440bc

0000d6a0 <SdioCard::readStart(unsigned long)>:
  }
  return true;
}
//------------------------------------------------------------------------------
// SDHC will do Auto CMD12 after count sectors.
bool SdioCard::readStart(uint32_t sector) {
    d6a0:	push	{r4, lr}
  DBG_IRQSTAT();
  if (yieldTimeout(isBusyCMD13)) {
    d6a2:	ldr	r0, [pc, #80]	; (d6f4 <SdioCard::readStart(unsigned long)+0x54>)
  }
  return true;
}
//------------------------------------------------------------------------------
// SDHC will do Auto CMD12 after count sectors.
bool SdioCard::readStart(uint32_t sector) {
    d6a4:	mov	r4, r1
  DBG_IRQSTAT();
  if (yieldTimeout(isBusyCMD13)) {
    d6a6:	bl	ce94 <yieldTimeout(bool (*)())>
    d6aa:	cbnz	r0, d6e0 <SdioCard::readStart(unsigned long)+0x40>
    return sdError(SD_CARD_ERROR_CMD13);
  }
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    d6ac:	ldr	r3, [pc, #72]	; (d6f8 <SdioCard::readStart(unsigned long)+0x58>)
#if defined(__IMXRT1062__)
  // Infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
    d6ae:	mov.w	r0, #512	; 0x200
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(MAX_BLKCNT) | SDHC_BLKATTR_BLKSIZE(512);
#endif  // defined(__IMXRT1062__)

  if (!cardCommand(CMD18_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    d6b2:	ldr	r1, [pc, #72]	; (d6fc <SdioCard::readStart(unsigned long)+0x5c>)
bool SdioCard::readStart(uint32_t sector) {
  DBG_IRQSTAT();
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    d6b4:	ldr	r2, [r3, #40]	; 0x28
    d6b6:	orr.w	r2, r2, #65536	; 0x10000
    d6ba:	str	r2, [r3, #40]	; 0x28
#if defined(__IMXRT1062__)
  // Infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
    d6bc:	str	r0, [r3, #4]
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(MAX_BLKCNT) | SDHC_BLKATTR_BLKSIZE(512);
#endif  // defined(__IMXRT1062__)

  if (!cardCommand(CMD18_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    d6be:	ldrb	r3, [r1, #0]
    d6c0:	cbnz	r3, d6dc <SdioCard::readStart(unsigned long)+0x3c>
    d6c2:	lsls	r1, r4, #9
    d6c4:	ldr	r0, [pc, #56]	; (d700 <SdioCard::readStart(unsigned long)+0x60>)
    d6c6:	bl	cf10 <cardCommand(unsigned long, unsigned long)>
    d6ca:	cbnz	r0, d6da <SdioCard::readStart(unsigned long)+0x3a>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    d6cc:	ldr	r1, [pc, #52]	; (d704 <SdioCard::readStart(unsigned long)+0x64>)
    d6ce:	movs	r4, #12
  m_errorLine = line;
    d6d0:	ldr	r3, [pc, #52]	; (d708 <SdioCard::readStart(unsigned long)+0x68>)
    d6d2:	movw	r2, #937	; 0x3a9
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    d6d6:	strb	r4, [r1, #0]
  m_errorLine = line;
    d6d8:	str	r2, [r3, #0]

  if (!cardCommand(CMD18_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    return sdError(SD_CARD_ERROR_CMD18);
  }
  return true;
}
    d6da:	pop	{r4, pc}
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(MAX_BLKCNT) | SDHC_BLKATTR_BLKSIZE(512);
#endif  // defined(__IMXRT1062__)

  if (!cardCommand(CMD18_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    d6dc:	mov	r1, r4
    d6de:	b.n	d6c4 <SdioCard::readStart(unsigned long)+0x24>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    d6e0:	ldr	r1, [pc, #32]	; (d704 <SdioCard::readStart(unsigned long)+0x64>)
    d6e2:	movs	r0, #10
  m_errorLine = line;
    d6e4:	ldr	r3, [pc, #32]	; (d708 <SdioCard::readStart(unsigned long)+0x68>)
    d6e6:	movw	r2, #925	; 0x39d
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    d6ea:	strb	r0, [r1, #0]
//------------------------------------------------------------------------------
// SDHC will do Auto CMD12 after count sectors.
bool SdioCard::readStart(uint32_t sector) {
  DBG_IRQSTAT();
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
    d6ec:	movs	r0, #0
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    d6ee:	str	r2, [r3, #0]
//------------------------------------------------------------------------------
// SDHC will do Auto CMD12 after count sectors.
bool SdioCard::readStart(uint32_t sector) {
  DBG_IRQSTAT();
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
    d6f0:	pop	{r4, pc}
    d6f2:	nop
    d6f4:	.word	0x0000cf79
    d6f8:	.word	0x402c0000
    d6fc:	.word	0x20044090
    d700:	.word	0x123a0030
    d704:	.word	0x20000c24
    d708:	.word	0x200440bc

0000d70c <SdioCard::readSector(unsigned long, unsigned char*)>:
bool SdioCard::readOCR(uint32_t* ocr) {
  *ocr = m_ocr;
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readSector(uint32_t sector, uint8_t* dst) {
    d70c:	push	{r4, r5, r6, lr}
  if (m_sdioConfig.useDma()) {
    d70e:	ldrb	r3, [r0, #8]
bool SdioCard::readOCR(uint32_t* ocr) {
  *ocr = m_ocr;
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readSector(uint32_t sector, uint8_t* dst) {
    d710:	sub.w	sp, sp, #512	; 0x200
    d714:	mov	r5, r2
  if (m_sdioConfig.useDma()) {
    d716:	lsls	r4, r3, #31
    d718:	bpl.n	d73e <SdioCard::readSector(unsigned long, unsigned char*)+0x32>
    uint8_t aligned[512];

    uint8_t* ptr = (uint32_t)dst & 3 ? aligned : dst;
    d71a:	lsls	r3, r2, #30
    d71c:	beq.n	d760 <SdioCard::readSector(unsigned long, unsigned char*)+0x54>

    if (!rdWrSectors(CMD17_DMA_XFERTYP, sector, ptr, 1)) {
    d71e:	movs	r3, #1
    d720:	ldr	r0, [pc, #164]	; (d7c8 <SdioCard::readSector(unsigned long, unsigned char*)+0xbc>)
    d722:	mov	r2, sp
    d724:	bl	cfe4 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    d728:	cbz	r0, d76c <SdioCard::readSector(unsigned long, unsigned char*)+0x60>
      return sdError(SD_CARD_ERROR_CMD17);
    }
    if (ptr != dst) {
      memcpy(dst, aligned, 512);
    d72a:	mov	r1, sp
    d72c:	mov	r0, r5
    d72e:	mov.w	r2, #512	; 0x200
    d732:	bl	db14 <memcpy>
      }
    }
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
    m_curSector++;
  }
  return true;
    d736:	movs	r0, #1
}
    d738:	add.w	sp, sp, #512	; 0x200
    d73c:	pop	{r4, r5, r6, pc}
  return false;  // Caller will set errorCode.
}
#if ENABLE_TEENSY_SDIO_MOD
//------------------------------------------------------------------------------
static bool waitTransferComplete() {
  if (!m_transferActive) {
    d73e:	ldr	r3, [pc, #140]	; (d7cc <SdioCard::readSector(unsigned long, unsigned char*)+0xc0>)
    d740:	mov	r4, r0
    d742:	mov	r6, r1
    d744:	ldrb	r3, [r3, #0]
    d746:	cbnz	r3, d796 <SdioCard::readSector(unsigned long, unsigned char*)+0x8a>
#if ENABLE_TEENSY_SDIO_MOD
    if (!waitTransferComplete()) {
      return false;
    }
#endif  // ENABLE_TEENSY_SDIO_MOD
    if (m_curState != READ_STATE || sector != m_curSector) {
    d748:	ldrb	r3, [r4, #9]
    d74a:	cmp	r3, #1
    d74c:	beq.n	d782 <SdioCard::readSector(unsigned long, unsigned char*)+0x76>
      if (!syncDevice()) {
    d74e:	ldr	r3, [r4, #0]
    d750:	mov	r0, r4
    d752:	ldr	r3, [r3, #24]
    d754:	blx	r3
    d756:	cbnz	r0, d7a2 <SdioCard::readSector(unsigned long, unsigned char*)+0x96>
      memcpy(dst, aligned, 512);
    }
  } else {
#if ENABLE_TEENSY_SDIO_MOD
    if (!waitTransferComplete()) {
      return false;
    d758:	movs	r0, #0
    }
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
    m_curSector++;
  }
  return true;
}
    d75a:	add.w	sp, sp, #512	; 0x200
    d75e:	pop	{r4, r5, r6, pc}
  if (m_sdioConfig.useDma()) {
    uint8_t aligned[512];

    uint8_t* ptr = (uint32_t)dst & 3 ? aligned : dst;

    if (!rdWrSectors(CMD17_DMA_XFERTYP, sector, ptr, 1)) {
    d760:	movs	r3, #1
    d762:	ldr	r0, [pc, #100]	; (d7c8 <SdioCard::readSector(unsigned long, unsigned char*)+0xbc>)
    d764:	bl	cfe4 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    d768:	cmp	r0, #0
    d76a:	bne.n	d736 <SdioCard::readSector(unsigned long, unsigned char*)+0x2a>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    d76c:	movs	r0, #11
    d76e:	ldr	r1, [pc, #96]	; (d7d0 <SdioCard::readSector(unsigned long, unsigned char*)+0xc4>)
  m_errorLine = line;
    d770:	ldr	r3, [pc, #96]	; (d7d4 <SdioCard::readSector(unsigned long, unsigned char*)+0xc8>)
    d772:	movw	r2, #862	; 0x35e
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    d776:	strb	r0, [r1, #0]
    uint8_t aligned[512];

    uint8_t* ptr = (uint32_t)dst & 3 ? aligned : dst;

    if (!rdWrSectors(CMD17_DMA_XFERTYP, sector, ptr, 1)) {
      return sdError(SD_CARD_ERROR_CMD17);
    d778:	movs	r0, #0
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    d77a:	str	r2, [r3, #0]
    }
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
    m_curSector++;
  }
  return true;
}
    d77c:	add.w	sp, sp, #512	; 0x200
    d780:	pop	{r4, r5, r6, pc}
#if ENABLE_TEENSY_SDIO_MOD
    if (!waitTransferComplete()) {
      return false;
    }
#endif  // ENABLE_TEENSY_SDIO_MOD
    if (m_curState != READ_STATE || sector != m_curSector) {
    d782:	ldr	r3, [r4, #4]
    d784:	cmp	r6, r3
    d786:	beq.n	d7b4 <SdioCard::readSector(unsigned long, unsigned char*)+0xa8>
      if (!syncDevice()) {
    d788:	ldr	r3, [r4, #0]
    d78a:	mov	r0, r4
    d78c:	ldr	r3, [r3, #24]
    d78e:	blx	r3
    d790:	cmp	r0, #0
    d792:	beq.n	d758 <SdioCard::readSector(unsigned long, unsigned char*)+0x4c>
    d794:	b.n	d7a2 <SdioCard::readSector(unsigned long, unsigned char*)+0x96>
    d796:	bl	d248 <waitTransferComplete() [clone .part.10]>
    if (ptr != dst) {
      memcpy(dst, aligned, 512);
    }
  } else {
#if ENABLE_TEENSY_SDIO_MOD
    if (!waitTransferComplete()) {
    d79a:	cmp	r0, #0
    d79c:	bne.n	d748 <SdioCard::readSector(unsigned long, unsigned char*)+0x3c>
      return false;
    d79e:	movs	r0, #0
    d7a0:	b.n	d75a <SdioCard::readSector(unsigned long, unsigned char*)+0x4e>
#endif  // ENABLE_TEENSY_SDIO_MOD
    if (m_curState != READ_STATE || sector != m_curSector) {
      if (!syncDevice()) {
        return false;
      }
      if (!readStart(sector)) {
    d7a2:	mov	r1, r6
    d7a4:	mov	r0, r4
    d7a6:	bl	d6a0 <SdioCard::readStart(unsigned long)>
    d7aa:	cmp	r0, #0
    d7ac:	beq.n	d758 <SdioCard::readSector(unsigned long, unsigned char*)+0x4c>
        return false;
      }
      m_curSector = sector;
      m_curState = READ_STATE;
    d7ae:	movs	r3, #1
        return false;
      }
      if (!readStart(sector)) {
        return false;
      }
      m_curSector = sector;
    d7b0:	str	r6, [r4, #4]
      m_curState = READ_STATE;
    d7b2:	strb	r3, [r4, #9]
    }
    if (!readData(dst)) {
    d7b4:	mov	r1, r5
    d7b6:	mov	r0, r4
    d7b8:	bl	d5e4 <SdioCard::readData(unsigned char*)>
    d7bc:	cmp	r0, #0
    d7be:	beq.n	d758 <SdioCard::readSector(unsigned long, unsigned char*)+0x4c>
      if (!syncDevice()) {
        return false;
      }
    }
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
    m_curSector++;
    d7c0:	ldr	r3, [r4, #4]
    d7c2:	adds	r3, #1
    d7c4:	str	r3, [r4, #4]
    d7c6:	b.n	d77c <SdioCard::readSector(unsigned long, unsigned char*)+0x70>
    d7c8:	.word	0x113a0011
    d7cc:	.word	0x2004409c
    d7d0:	.word	0x20000c24
    d7d4:	.word	0x200440bc

0000d7d8 <SdioCard::stopTransmission(bool)>:
//------------------------------------------------------------------------------
uint32_t SdioCard::status() {
  return statusCMD13();
}
//------------------------------------------------------------------------------
bool SdioCard::stopTransmission(bool blocking) {
    d7d8:	push	{r4, r5, r6, lr}
  m_curState = IDLE_STATE;
  // This fix allows CDIHB to be cleared in Tennsy 3.x without a reset.
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    d7da:	ldr	r2, [pc, #80]	; (d82c <SdioCard::stopTransmission(bool)+0x54>)
uint32_t SdioCard::status() {
  return statusCMD13();
}
//------------------------------------------------------------------------------
bool SdioCard::stopTransmission(bool blocking) {
  m_curState = IDLE_STATE;
    d7dc:	movs	r5, #0
//------------------------------------------------------------------------------
uint32_t SdioCard::status() {
  return statusCMD13();
}
//------------------------------------------------------------------------------
bool SdioCard::stopTransmission(bool blocking) {
    d7de:	mov	r6, r1
  m_curState = IDLE_STATE;
    d7e0:	strb	r5, [r0, #9]
  // This fix allows CDIHB to be cleared in Tennsy 3.x without a reset.
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    d7e2:	mov	r1, r5
}
//------------------------------------------------------------------------------
bool SdioCard::stopTransmission(bool blocking) {
  m_curState = IDLE_STATE;
  // This fix allows CDIHB to be cleared in Tennsy 3.x without a reset.
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    d7e4:	ldr	r3, [r2, #40]	; 0x28
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    d7e6:	ldr	r0, [pc, #72]	; (d830 <SdioCard::stopTransmission(bool)+0x58>)
}
//------------------------------------------------------------------------------
bool SdioCard::stopTransmission(bool blocking) {
  m_curState = IDLE_STATE;
  // This fix allows CDIHB to be cleared in Tennsy 3.x without a reset.
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    d7e8:	bic.w	r3, r3, #65536	; 0x10000
    d7ec:	str	r3, [r2, #40]	; 0x28
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    d7ee:	bl	cf10 <cardCommand(unsigned long, unsigned long)>
    d7f2:	mov	r4, r0
    d7f4:	cbz	r0, d81a <SdioCard::stopTransmission(bool)+0x42>
    return sdError(SD_CARD_ERROR_CMD12);
  }
  if (blocking) {
    d7f6:	cbnz	r6, d7fc <SdioCard::stopTransmission(bool)+0x24>
    if (yieldTimeout(isBusyDat)) {
      return sdError(SD_CARD_ERROR_CMD13);
    }
  }
  return true;
}
    d7f8:	mov	r0, r4
    d7fa:	pop	{r4, r5, r6, pc}
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD12);
  }
  if (blocking) {
    if (yieldTimeout(isBusyDat)) {
    d7fc:	ldr	r0, [pc, #52]	; (d834 <SdioCard::stopTransmission(bool)+0x5c>)
    d7fe:	bl	ce94 <yieldTimeout(bool (*)())>
    d802:	cmp	r0, #0
    d804:	beq.n	d7f8 <SdioCard::stopTransmission(bool)+0x20>
      return sdError(SD_CARD_ERROR_CMD13);
    d806:	mov	r4, r5
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    d808:	ldr	r1, [pc, #44]	; (d838 <SdioCard::stopTransmission(bool)+0x60>)
    d80a:	movs	r0, #10
  m_errorLine = line;
    d80c:	ldr	r3, [pc, #44]	; (d83c <SdioCard::stopTransmission(bool)+0x64>)
    d80e:	movw	r2, #963	; 0x3c3
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    d812:	strb	r0, [r1, #0]
    if (yieldTimeout(isBusyDat)) {
      return sdError(SD_CARD_ERROR_CMD13);
    }
  }
  return true;
}
    d814:	mov	r0, r4
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    d816:	str	r2, [r3, #0]
    if (yieldTimeout(isBusyDat)) {
      return sdError(SD_CARD_ERROR_CMD13);
    }
  }
  return true;
}
    d818:	pop	{r4, r5, r6, pc}
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    d81a:	ldr	r1, [pc, #28]	; (d838 <SdioCard::stopTransmission(bool)+0x60>)
    d81c:	movs	r0, #9
  m_errorLine = line;
    d81e:	ldr	r3, [pc, #28]	; (d83c <SdioCard::stopTransmission(bool)+0x64>)
    d820:	movw	r2, #959	; 0x3bf
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    d824:	strb	r0, [r1, #0]
    if (yieldTimeout(isBusyDat)) {
      return sdError(SD_CARD_ERROR_CMD13);
    }
  }
  return true;
}
    d826:	mov	r0, r4
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    d828:	str	r2, [r3, #0]
    if (yieldTimeout(isBusyDat)) {
      return sdError(SD_CARD_ERROR_CMD13);
    }
  }
  return true;
}
    d82a:	pop	{r4, r5, r6, pc}
    d82c:	.word	0x402c0000
    d830:	.word	0x0cdb0000
    d834:	.word	0x0000cda9
    d838:	.word	0x20000c24
    d83c:	.word	0x200440bc

0000d840 <SdioCard::syncDevice()>:
  return false;  // Caller will set errorCode.
}
#if ENABLE_TEENSY_SDIO_MOD
//------------------------------------------------------------------------------
static bool waitTransferComplete() {
  if (!m_transferActive) {
    d840:	ldr	r3, [pc, #36]	; (d868 <SdioCard::syncDevice()+0x28>)
    d842:	ldrb	r3, [r3, #0]
    }
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::syncDevice() {
    d844:	push	{r4, lr}
    d846:	mov	r4, r0
  return false;  // Caller will set errorCode.
}
#if ENABLE_TEENSY_SDIO_MOD
//------------------------------------------------------------------------------
static bool waitTransferComplete() {
  if (!m_transferActive) {
    d848:	cbnz	r3, d85e <SdioCard::syncDevice()+0x1e>
bool SdioCard::syncDevice() {
#if ENABLE_TEENSY_SDIO_MOD
  if (!waitTransferComplete()) {
    return false;
  }
  if (m_curState != IDLE_STATE) {
    d84a:	ldrb	r3, [r4, #9]
    d84c:	cbnz	r3, d852 <SdioCard::syncDevice()+0x12>
    if (!writeStop()) {
      return false;
    }
  }
#endif  // ENABLE_TEENSY_SDIO_MOD
  return true;
    d84e:	movs	r0, #1
    d850:	pop	{r4, pc}
#if ENABLE_TEENSY_SDIO_MOD
  if (!waitTransferComplete()) {
    return false;
  }
  if (m_curState != IDLE_STATE) {
    return stopTransmission(true);
    d852:	mov	r0, r4
    d854:	movs	r1, #1
      return false;
    }
  }
#endif  // ENABLE_TEENSY_SDIO_MOD
  return true;
}
    d856:	ldmia.w	sp!, {r4, lr}
#if ENABLE_TEENSY_SDIO_MOD
  if (!waitTransferComplete()) {
    return false;
  }
  if (m_curState != IDLE_STATE) {
    return stopTransmission(true);
    d85a:	b.w	d7d8 <SdioCard::stopTransmission(bool)>
    d85e:	bl	d248 <waitTransferComplete() [clone .part.10]>
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::syncDevice() {
#if ENABLE_TEENSY_SDIO_MOD
  if (!waitTransferComplete()) {
    d862:	cmp	r0, #0
    d864:	bne.n	d84a <SdioCard::syncDevice()+0xa>
      return false;
    }
  }
#endif  // ENABLE_TEENSY_SDIO_MOD
  return true;
}
    d866:	pop	{r4, pc}
    d868:	.word	0x2004409c

0000d86c <SdSpiArduinoDriver::activate()>:
#include "SdSpiDriver.h"
#if defined(SD_USE_CUSTOM_SPI) &&  defined(__arm__) && defined(CORE_TEENSY)
#define USE_BLOCK_TRANSFER 1
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::activate() {
  m_spi->beginTransaction(m_spiSettings);
    d86c:	ldr	r3, [r0, #0]
    d86e:	ldr	r1, [r0, #4]
 */
#include "SdSpiDriver.h"
#if defined(SD_USE_CUSTOM_SPI) &&  defined(__arm__) && defined(CORE_TEENSY)
#define USE_BLOCK_TRANSFER 1
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::activate() {
    d870:	push	{r4, r5}

	// Before using SPI.transfer() or asserting chip select pins,
	// this function is used to gain exclusive access to the SPI bus
	// and configure the correct settings.
	void beginTransaction(SPISettings settings) {
		if (interruptMasksUsed) {
    d872:	ldrb	r2, [r3, #19]
    d874:	ldr	r4, [r0, #8]
    d876:	cmp	r2, #0
    d878:	beq.n	d8cc <SdSpiArduinoDriver::activate()+0x60>
			__disable_irq();
    d87a:	cpsid	i
			if (interruptMasksUsed & 0x01) {
    d87c:	ldrb	r2, [r3, #19]
    d87e:	lsls	r5, r2, #31
    d880:	bpl.n	d890 <SdSpiArduinoDriver::activate()+0x24>
				interruptSave[0] = NVIC_ICER0 & interruptMask[0];
    d882:	ldr	r0, [pc, #204]	; (d950 <SdSpiArduinoDriver::activate()+0xe4>)
    d884:	ldr	r2, [r3, #20]
    d886:	ldr	r5, [r0, #0]
    d888:	ands	r2, r5
    d88a:	str	r2, [r3, #40]	; 0x28
				NVIC_ICER0 = interruptSave[0];
    d88c:	str	r2, [r0, #0]
    d88e:	ldrb	r2, [r3, #19]
			}
			if (interruptMasksUsed & 0x02) {
    d890:	lsls	r0, r2, #30
    d892:	bpl.n	d8a2 <SdSpiArduinoDriver::activate()+0x36>
				interruptSave[1] = NVIC_ICER1 & interruptMask[1];
    d894:	ldr	r0, [pc, #188]	; (d954 <SdSpiArduinoDriver::activate()+0xe8>)
    d896:	ldr	r2, [r3, #24]
    d898:	ldr	r5, [r0, #0]
    d89a:	ands	r2, r5
    d89c:	str	r2, [r3, #44]	; 0x2c
				NVIC_ICER1 = interruptSave[1];
    d89e:	str	r2, [r0, #0]
    d8a0:	ldrb	r2, [r3, #19]
			}
			if (interruptMasksUsed & 0x04) {
    d8a2:	lsls	r5, r2, #29
    d8a4:	bpl.n	d8b4 <SdSpiArduinoDriver::activate()+0x48>
				interruptSave[2] = NVIC_ICER2 & interruptMask[2];
    d8a6:	ldr	r0, [pc, #176]	; (d958 <SdSpiArduinoDriver::activate()+0xec>)
    d8a8:	ldr	r2, [r3, #28]
    d8aa:	ldr	r5, [r0, #0]
    d8ac:	ands	r2, r5
    d8ae:	str	r2, [r3, #48]	; 0x30
				NVIC_ICER2 = interruptSave[2];
    d8b0:	str	r2, [r0, #0]
    d8b2:	ldrb	r2, [r3, #19]
			}
			if (interruptMasksUsed & 0x08) {
    d8b4:	lsls	r0, r2, #28
    d8b6:	bpl.n	d8c6 <SdSpiArduinoDriver::activate()+0x5a>
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
    d8b8:	ldr	r0, [pc, #160]	; (d95c <SdSpiArduinoDriver::activate()+0xf0>)
    d8ba:	ldr	r2, [r3, #32]
    d8bc:	ldr	r5, [r0, #0]
    d8be:	ands	r2, r5
    d8c0:	str	r2, [r3, #52]	; 0x34
				NVIC_ICER3 = interruptSave[3];
    d8c2:	str	r2, [r0, #0]
    d8c4:	ldrb	r2, [r3, #19]
			}
			if (interruptMasksUsed & 0x10) {
    d8c6:	lsls	r2, r2, #27
    d8c8:	bmi.n	d922 <SdSpiArduinoDriver::activate()+0xb6>
				interruptSave[4] = NVIC_ICER4 & interruptMask[4];
				NVIC_ICER4 = interruptSave[4];
			}
			__enable_irq();
    d8ca:	cpsie	i
		}
		inTransactionFlag = 1;
		#endif

		//printf("trans\n");
		if (settings.clock() != _clock) {
    d8cc:	ldr	r2, [r3, #8]
    d8ce:	cmp	r2, r1
    d8d0:	beq.n	d930 <SdSpiArduinoDriver::activate()+0xc4>
						     396000000}; // PLL2 PFD2				

		    // First save away the new settings..
		    _clock = settings.clock();

			uint32_t cbcmr = CCM_CBCMR;
    d8d2:	ldr	r2, [pc, #140]	; (d960 <SdSpiArduinoDriver::activate()+0xf4>)
						     720000000,  // PLL3 PFD0
						     528000000,  // PLL2
						     396000000}; // PLL2 PFD2				

		    // First save away the new settings..
		    _clock = settings.clock();
    d8d4:	str	r1, [r3, #8]

			uint32_t cbcmr = CCM_CBCMR;
    d8d6:	ldr	r2, [r2, #24]
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
    d8d8:	ldr	r0, [pc, #136]	; (d964 <SdSpiArduinoDriver::activate()+0xf8>)
    d8da:	ubfx	r5, r2, #4, #2
    d8de:	ubfx	r2, r2, #26, #3
    d8e2:	ldr.w	r0, [r0, r5, lsl #2]
    d8e6:	adds	r2, #1
    d8e8:	udiv	r0, r0, r2
			
			uint32_t d, div;		
			d = _clock ? clkhz/_clock : clkhz;
    d8ec:	cbz	r1, d91e <SdSpiArduinoDriver::activate()+0xb2>
    d8ee:	udiv	r2, r0, r1

			if (d && clkhz/d > _clock) d++;
    d8f2:	cbz	r2, d906 <SdSpiArduinoDriver::activate()+0x9a>
    d8f4:	udiv	r0, r0, r2
    d8f8:	cmp	r0, r1
    d8fa:	it	hi
    d8fc:	addhi	r2, #1
			if (d > 257) d= 257;  // max div
    d8fe:	cmp.w	r2, #258	; 0x102
    d902:	bcc.n	d934 <SdSpiArduinoDriver::activate()+0xc8>
    d904:	ldr	r2, [pc, #96]	; (d968 <SdSpiArduinoDriver::activate()+0xfc>)
				div = d-2;
			} else {
				div =0;
			}
	
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);
    d906:	str	r2, [r3, #12]
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
private:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    d908:	ldr	r3, [r3, #0]
	
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);

		} 
		//Serial.printf("SPI.beginTransaction CCR:%x TCR:%x\n", _ccr, settings.tcr);
		port().CR = 0;
    d90a:	movs	r5, #0
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
    d90c:	movs	r0, #3
		port().CCR = _ccr;
		port().TCR = settings.tcr;
		port().CR = LPSPI_CR_MEN;
    d90e:	movs	r1, #1
	
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);

		} 
		//Serial.printf("SPI.beginTransaction CCR:%x TCR:%x\n", _ccr, settings.tcr);
		port().CR = 0;
    d910:	str	r5, [r3, #16]
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
    d912:	str	r0, [r3, #36]	; 0x24
		port().CCR = _ccr;
    d914:	str	r2, [r3, #64]	; 0x40
		port().TCR = settings.tcr;
    d916:	str	r4, [r3, #96]	; 0x60
		port().CR = LPSPI_CR_MEN;
    d918:	str	r1, [r3, #16]
  m_spi->beginTransaction(m_spiSettings);
}
    d91a:	pop	{r4, r5}
    d91c:	bx	lr

			uint32_t cbcmr = CCM_CBCMR;
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
			
			uint32_t d, div;		
			d = _clock ? clkhz/_clock : clkhz;
    d91e:	mov	r2, r0
    d920:	b.n	d8f2 <SdSpiArduinoDriver::activate()+0x86>
			if (interruptMasksUsed & 0x08) {
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
				NVIC_ICER3 = interruptSave[3];
			}
			if (interruptMasksUsed & 0x10) {
				interruptSave[4] = NVIC_ICER4 & interruptMask[4];
    d922:	ldr	r0, [pc, #72]	; (d96c <SdSpiArduinoDriver::activate()+0x100>)
    d924:	ldr	r2, [r3, #36]	; 0x24
    d926:	ldr	r5, [r0, #0]
    d928:	ands	r2, r5
    d92a:	str	r2, [r3, #56]	; 0x38
				NVIC_ICER4 = interruptSave[4];
    d92c:	str	r2, [r0, #0]
    d92e:	b.n	d8ca <SdSpiArduinoDriver::activate()+0x5e>
    d930:	ldr	r2, [r3, #12]
    d932:	b.n	d908 <SdSpiArduinoDriver::activate()+0x9c>
			uint32_t d, div;		
			d = _clock ? clkhz/_clock : clkhz;

			if (d && clkhz/d > _clock) d++;
			if (d > 257) d= 257;  // max div
			if (d > 2) {
    d934:	cmp	r2, #2
    d936:	it	ls
    d938:	movls	r2, #0
    d93a:	bls.n	d906 <SdSpiArduinoDriver::activate()+0x9a>
    d93c:	subs	r2, #2
    d93e:	lsrs	r0, r2, #1
    d940:	lsls	r1, r0, #16
    d942:	orr.w	r2, r2, r0, lsl #8
    d946:	and.w	r1, r1, #16711680	; 0xff0000
    d94a:	orrs	r2, r1
    d94c:	b.n	d906 <SdSpiArduinoDriver::activate()+0x9a>
    d94e:	nop
    d950:	.word	0xe000e180
    d954:	.word	0xe000e184
    d958:	.word	0xe000e188
    d95c:	.word	0xe000e18c
    d960:	.word	0x400fc000
    d964:	.word	0x20000424
    d968:	.word	0x007f7fff
    d96c:	.word	0xe000e190

0000d970 <SdSpiArduinoDriver::begin(SdSpiConfig)>:
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::begin(SdSpiConfig spiConfig) {
    d970:	push	{lr}
    d972:	sub	sp, #20
    d974:	add.w	lr, sp, #16
    d978:	stmdb	lr, {r1, r2, r3}
    d97c:	ldr	r3, [sp, #12]
  if (spiConfig.spiPort) {
    d97e:	cbz	r3, d98e <SdSpiArduinoDriver::begin(SdSpiConfig)+0x1e>
    m_spi = spiConfig.spiPort;
    d980:	str	r3, [r0, #0]
    m_spi->setSCK(SDCARD_SCK_PIN);
#endif  // defined(SDCARD_SPI) && defined(SDCARD_SS_PIN)
  } else {
    m_spi = &SPI;
  }
  m_spi->begin();
    d982:	mov	r0, r3
}
    d984:	add	sp, #20
    d986:	ldr.w	lr, [sp], #4
    m_spi->setSCK(SDCARD_SCK_PIN);
#endif  // defined(SDCARD_SPI) && defined(SDCARD_SS_PIN)
  } else {
    m_spi = &SPI;
  }
  m_spi->begin();
    d98a:	b.w	7c78 <SPIClass::begin()>
    m_spi->setMISO(SDCARD_MISO_PIN);
    m_spi->setMOSI(SDCARD_MOSI_PIN);
    m_spi->setSCK(SDCARD_SCK_PIN);
#endif  // defined(SDCARD_SPI) && defined(SDCARD_SS_PIN)
  } else {
    m_spi = &SPI;
    d98e:	ldr	r2, [pc, #16]	; (d9a0 <SdSpiArduinoDriver::begin(SdSpiConfig)+0x30>)
    d990:	mov	r3, r2
    d992:	str	r2, [r0, #0]
  }
  m_spi->begin();
    d994:	mov	r0, r3
}
    d996:	add	sp, #20
    d998:	ldr.w	lr, [sp], #4
    m_spi->setSCK(SDCARD_SCK_PIN);
#endif  // defined(SDCARD_SPI) && defined(SDCARD_SS_PIN)
  } else {
    m_spi = &SPI;
  }
  m_spi->begin();
    d99c:	b.w	7c78 <SPIClass::begin()>
    d9a0:	.word	0x20000b60

0000d9a4 <SdSpiArduinoDriver::deactivate()>:
}
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::deactivate() {
  m_spi->endTransaction();
    d9a4:	ldr	r2, [r0, #0]
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 0;
		#endif
		if (interruptMasksUsed) {
    d9a6:	ldrb	r3, [r2, #19]
    d9a8:	cbz	r3, d9e4 <SdSpiArduinoDriver::deactivate()+0x40>
			if (interruptMasksUsed & 0x01) NVIC_ISER0 = interruptSave[0];
    d9aa:	lsls	r0, r3, #31
    d9ac:	bpl.n	d9b6 <SdSpiArduinoDriver::deactivate()+0x12>
    d9ae:	ldr	r3, [pc, #56]	; (d9e8 <SdSpiArduinoDriver::deactivate()+0x44>)
    d9b0:	ldr	r1, [r2, #40]	; 0x28
    d9b2:	str	r1, [r3, #0]
    d9b4:	ldrb	r3, [r2, #19]
			if (interruptMasksUsed & 0x02) NVIC_ISER1 = interruptSave[1];
    d9b6:	lsls	r1, r3, #30
    d9b8:	bpl.n	d9c2 <SdSpiArduinoDriver::deactivate()+0x1e>
    d9ba:	ldr	r3, [pc, #48]	; (d9ec <SdSpiArduinoDriver::deactivate()+0x48>)
    d9bc:	ldr	r1, [r2, #44]	; 0x2c
    d9be:	str	r1, [r3, #0]
    d9c0:	ldrb	r3, [r2, #19]
			if (interruptMasksUsed & 0x04) NVIC_ISER2 = interruptSave[2];
    d9c2:	lsls	r0, r3, #29
    d9c4:	bpl.n	d9ce <SdSpiArduinoDriver::deactivate()+0x2a>
    d9c6:	ldr	r3, [pc, #40]	; (d9f0 <SdSpiArduinoDriver::deactivate()+0x4c>)
    d9c8:	ldr	r1, [r2, #48]	; 0x30
    d9ca:	str	r1, [r3, #0]
    d9cc:	ldrb	r3, [r2, #19]
			if (interruptMasksUsed & 0x08) NVIC_ISER3 = interruptSave[3];
    d9ce:	lsls	r1, r3, #28
    d9d0:	bpl.n	d9da <SdSpiArduinoDriver::deactivate()+0x36>
    d9d2:	ldr	r3, [pc, #32]	; (d9f4 <SdSpiArduinoDriver::deactivate()+0x50>)
    d9d4:	ldr	r1, [r2, #52]	; 0x34
    d9d6:	str	r1, [r3, #0]
    d9d8:	ldrb	r3, [r2, #19]
			if (interruptMasksUsed & 0x10) NVIC_ISER4 = interruptSave[4];
    d9da:	lsls	r3, r3, #27
    d9dc:	bpl.n	d9e4 <SdSpiArduinoDriver::deactivate()+0x40>
    d9de:	ldr	r2, [r2, #56]	; 0x38
    d9e0:	ldr	r3, [pc, #20]	; (d9f8 <SdSpiArduinoDriver::deactivate()+0x54>)
    d9e2:	str	r2, [r3, #0]
    d9e4:	bx	lr
    d9e6:	nop
    d9e8:	.word	0xe000e100
    d9ec:	.word	0xe000e104
    d9f0:	.word	0xe000e108
    d9f4:	.word	0xe000e10c
    d9f8:	.word	0xe000e110

0000d9fc <SdSpiArduinoDriver::receive()>:
}
//------------------------------------------------------------------------------
uint8_t SdSpiArduinoDriver::receive() {
    d9fc:	ldr	r2, [r0, #0]
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    d9fe:	movs	r3, #255	; 0xff
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
private:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    da00:	ldr	r2, [r2, #0]
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    da02:	str	r3, [r2, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    da04:	ldr	r3, [r2, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    da06:	tst.w	r3, #2031616	; 0x1f0000
    da0a:	beq.n	da04 <SdSpiArduinoDriver::receive()+0x8>
    da0c:	ldr	r0, [r2, #116]	; 0x74
  return m_spi->transfer(0XFF);
}
    da0e:	uxtb	r0, r0
    da10:	bx	lr
    da12:	nop

0000da14 <SdSpiArduinoDriver::receive(unsigned char*, unsigned int)>:
//------------------------------------------------------------------------------
uint8_t SdSpiArduinoDriver::receive(uint8_t* buf, size_t count) {
    da14:	push	{r4, r5, r6, lr}
    da16:	mov	r4, r1
    da18:	mov	r6, r2
    da1a:	mov	r5, r0
#if USE_BLOCK_TRANSFER
  memset(buf, 0XFF, count);
    da1c:	movs	r1, #255	; 0xff
    da1e:	mov	r0, r4
    da20:	bl	10bfc <memset>
				transfer16(buf, buf, count >> 1);
				return;
			}
		}
#endif
		transfer(buf, buf, count);
    da24:	ldr	r0, [r5, #0]
    da26:	mov	r3, r6
    da28:	mov	r2, r4
    da2a:	mov	r1, r4
    da2c:	bl	7f9c <SPIClass::transfer(void const*, void*, unsigned int)>
  for (size_t i = 0; i < count; i++) {
    buf[i] = m_spi->transfer(0XFF);
  }
#endif  // USE_BLOCK_TRANSFER
  return 0;
}
    da30:	movs	r0, #0
    da32:	pop	{r4, r5, r6, pc}

0000da34 <SdSpiArduinoDriver::send(unsigned char)>:
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::send(uint8_t data) {
    da34:	ldr	r3, [r0, #0]
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
private:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    da36:	ldr	r2, [r3, #0]
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    da38:	str	r1, [r2, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    da3a:	ldr	r3, [r2, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    da3c:	tst.w	r3, #2031616	; 0x1f0000
    da40:	beq.n	da3a <SdSpiArduinoDriver::send(unsigned char)+0x6>
    da42:	ldr	r3, [r2, #116]	; 0x74
    da44:	bx	lr
    da46:	nop

0000da48 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)>:
  m_spi->transfer(data);
}
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::send(const uint8_t* buf , size_t count) {
    da48:	push	{r4, r5, lr}
#if USE_BLOCK_TRANSFER
  uint32_t tmp[128];
  if (0 < count && count <= 512) {
    da4a:	subs	r5, r2, #1
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::send(uint8_t data) {
  m_spi->transfer(data);
}
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::send(const uint8_t* buf , size_t count) {
    da4c:	sub.w	sp, sp, #516	; 0x204
    da50:	mov	r3, r2
#if USE_BLOCK_TRANSFER
  uint32_t tmp[128];
  if (0 < count && count <= 512) {
    da52:	cmp.w	r5, #512	; 0x200
    da56:	bcc.n	da7a <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x32>
    memcpy(tmp, buf, count);
    m_spi->transfer(tmp, count);
    return;
  }
#endif  // USE_BLOCK_TRANSFER
  for (size_t i = 0; i < count; i++) {
    da58:	cbz	r2, da74 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x2c>
    da5a:	ldr	r2, [r0, #0]
    da5c:	adds	r0, r1, r3
    da5e:	ldr	r2, [r2, #0]
    m_spi->transfer(buf[i]);
    da60:	ldrb.w	r3, [r1], #1
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    da64:	str	r3, [r2, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    da66:	ldr	r3, [r2, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    da68:	tst.w	r3, #2031616	; 0x1f0000
    da6c:	beq.n	da66 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x1e>
    memcpy(tmp, buf, count);
    m_spi->transfer(tmp, count);
    return;
  }
#endif  // USE_BLOCK_TRANSFER
  for (size_t i = 0; i < count; i++) {
    da6e:	cmp	r1, r0
    da70:	ldr	r3, [r2, #116]	; 0x74
    da72:	bne.n	da60 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x18>
    m_spi->transfer(buf[i]);
  }
}
    da74:	add.w	sp, sp, #516	; 0x204
    da78:	pop	{r4, r5, pc}
    da7a:	mov	r4, r2
    da7c:	mov	r5, r0
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::send(const uint8_t* buf , size_t count) {
#if USE_BLOCK_TRANSFER
  uint32_t tmp[128];
  if (0 < count && count <= 512) {
    memcpy(tmp, buf, count);
    da7e:	mov	r0, sp
    da80:	bl	db14 <memcpy>
				transfer16(buf, buf, count >> 1);
				return;
			}
		}
#endif
		transfer(buf, buf, count);
    da84:	mov	r3, r4
    da86:	mov	r2, sp
    da88:	mov	r1, sp
    da8a:	ldr	r0, [r5, #0]
    da8c:	bl	7f9c <SPIClass::transfer(void const*, void*, unsigned int)>
  }
#endif  // USE_BLOCK_TRANSFER
  for (size_t i = 0; i < count; i++) {
    m_spi->transfer(buf[i]);
  }
}
    da90:	add.w	sp, sp, #516	; 0x204
    da94:	pop	{r4, r5, pc}
    da96:	nop

0000da98 <sdCsInit(unsigned char)>:
#include "SdSpiDriver.h"
#if ENABLE_ARDUINO_FEATURES
#if SD_CHIP_SELECT_MODE == 0
//------------------------------------------------------------------------------
void sdCsInit(SdCsPin_t pin) {
  pinMode(pin, OUTPUT);
    da98:	movs	r1, #1
    da9a:	b.w	f5d0 <pinMode>
    da9e:	nop

0000daa0 <sdCsWrite(unsigned char, bool)>:
}
//------------------------------------------------------------------------------
void sdCsWrite(SdCsPin_t pin, bool level) {
  digitalWrite(pin, level);
    daa0:	b.w	f5c4 <digitalWrite>

0000daa4 <SDClass::~SDClass()>:
	char *filename;
};



class SDClass : public FS
    daa4:	bx	lr
    daa6:	nop

0000daa8 <_GLOBAL__sub_I_SD>:
{
public:
	SDClass() { }
    daa8:	ldr	r3, [pc, #76]	; (daf8 <_GLOBAL__sub_I_SD+0x50>)
    daaa:	ldr	r1, [pc, #80]	; (dafc <_GLOBAL__sub_I_SD+0x54>)
    daac:	ldr	r0, [pc, #80]	; (db00 <_GLOBAL__sub_I_SD+0x58>)
#else  // HAS_SDIO_CLASS
class SdSpiCard {
#endif  // HAS_SDIO_CLASS
 public:
  /** Construct an instance of SdSpiCard. */
  SdSpiCard() {}
    daae:	ldr	r2, [pc, #84]	; (db04 <_GLOBAL__sub_I_SD+0x5c>)
 */

#include <Arduino.h>
#include <SD.h>

SDClass SD;
    dab0:	push	{r4, r5, r6, r7}
    dab2:	movs	r4, #0
		init_AlwaysInline(MSBFIRST, SPI_MODE0);
	}
private:
	void init_AlwaysInline(uint8_t bitOrder, uint8_t dataMode)
	  __attribute__((__always_inline__)) {
			tcr = LPSPI_TCR_FRAMESZ(7);    // TCR has polarity and bit order too
    dab4:	movs	r7, #7
    dab6:	movs	r6, #1
    dab8:	movs	r5, #41	; 0x29
    daba:	str.w	r1, [r3, #1172]	; 0x494
public:
	SPISettings(uint32_t clockIn, uint8_t bitOrderIn, uint8_t dataModeIn) : _clock(clockIn) {
		init_AlwaysInline(bitOrderIn, dataModeIn);
	}

	SPISettings() : _clock(4000000) {
    dabe:	ldr	r1, [pc, #72]	; (db08 <_GLOBAL__sub_I_SD+0x60>)
    dac0:	str	r0, [r3, #0]
    dac2:	mov	r0, r3
    dac4:	str.w	r2, [r3, #1184]	; 0x4a0
    dac8:	str.w	r1, [r3, #1192]	; 0x4a8
		init_AlwaysInline(MSBFIRST, SPI_MODE0);
	}
private:
	void init_AlwaysInline(uint8_t bitOrder, uint8_t dataMode)
	  __attribute__((__always_inline__)) {
			tcr = LPSPI_TCR_FRAMESZ(7);    // TCR has polarity and bit order too
    dacc:	str.w	r7, [r3, #1196]	; 0x4ac
    dad0:	strb.w	r6, [r3, #1205]	; 0x4b5
    dad4:	strb.w	r5, [r3, #1207]	; 0x4b7
    dad8:	str.w	r4, [r3, #1156]	; 0x484
    dadc:	str.w	r4, [r3, #1160]	; 0x488
 * \class SdioConfig
 * \brief SDIO card configuration.
 */
class SdioConfig {
 public:
  SdioConfig() {}
    dae0:	strb.w	r4, [r3, #1180]	; 0x49c
//------------------------------------------------------------------------------
/**
 * \class SdioCard
 * \brief Raw SDIO access to SD and SDHC flash memory cards.
 */
class SdioCard : public SdCardInterface {
    dae4:	strb.w	r4, [r3, #1181]	; 0x49d
    dae8:	strb.w	r4, [r3, #1210]	; 0x4ba
    daec:	ldr	r2, [pc, #28]	; (db0c <_GLOBAL__sub_I_SD+0x64>)
    daee:	ldr	r1, [pc, #32]	; (db10 <_GLOBAL__sub_I_SD+0x68>)
    daf0:	pop	{r4, r5, r6, r7}
    daf2:	b.w	10070 <__aeabi_atexit>
    daf6:	nop
    daf8:	.word	0x200440c0
    dafc:	.word	0x20000538
    db00:	.word	0x20000134
    db04:	.word	0x200004e0
    db08:	.word	0x003d0900
    db0c:	.word	0x20000b3c
    db10:	.word	0x0000daa5

0000db14 <memcpy>:
	@ r1: src
	@ r2: len
#ifdef __ARM_FEATURE_UNALIGNED
	/* In case of UNALIGNED access supported, ip is not used in
	   function body.  */
	mov	ip, r0
    db14:	mov	ip, r0
#else
	push	{r0}
#endif
	orr	r3, r1, r0
    db16:	orr.w	r3, r1, r0
	ands	r3, r3, #3
    db1a:	ands.w	r3, r3, #3
	bne	.Lmisaligned_copy
    db1e:	bne.n	dbfc <memcpy+0xe8>

.Lbig_block:
	subs	r2, __OPT_BIG_BLOCK_SIZE
    db20:	subs	r2, #64	; 0x40
	blo	.Lmid_block
    db22:	bcc.n	dba8 <memcpy+0x94>
.Lbig_block_loop:
	BEGIN_UNROLL_BIG_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    db24:	ldr.w	r3, [r1], #4
    db28:	str.w	r3, [r0], #4
    db2c:	ldr.w	r3, [r1], #4
    db30:	str.w	r3, [r0], #4
    db34:	ldr.w	r3, [r1], #4
    db38:	str.w	r3, [r0], #4
    db3c:	ldr.w	r3, [r1], #4
    db40:	str.w	r3, [r0], #4
    db44:	ldr.w	r3, [r1], #4
    db48:	str.w	r3, [r0], #4
    db4c:	ldr.w	r3, [r1], #4
    db50:	str.w	r3, [r0], #4
    db54:	ldr.w	r3, [r1], #4
    db58:	str.w	r3, [r0], #4
    db5c:	ldr.w	r3, [r1], #4
    db60:	str.w	r3, [r0], #4
    db64:	ldr.w	r3, [r1], #4
    db68:	str.w	r3, [r0], #4
    db6c:	ldr.w	r3, [r1], #4
    db70:	str.w	r3, [r0], #4
    db74:	ldr.w	r3, [r1], #4
    db78:	str.w	r3, [r0], #4
    db7c:	ldr.w	r3, [r1], #4
    db80:	str.w	r3, [r0], #4
    db84:	ldr.w	r3, [r1], #4
    db88:	str.w	r3, [r0], #4
    db8c:	ldr.w	r3, [r1], #4
    db90:	str.w	r3, [r0], #4
    db94:	ldr.w	r3, [r1], #4
    db98:	str.w	r3, [r0], #4
    db9c:	ldr.w	r3, [r1], #4
    dba0:	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds	r0, __OPT_BIG_BLOCK_SIZE
	adds	r1, __OPT_BIG_BLOCK_SIZE
#endif
	subs	r2, __OPT_BIG_BLOCK_SIZE
    dba4:	subs	r2, #64	; 0x40
	bhs .Lbig_block_loop
    dba6:	bcs.n	db24 <memcpy+0x10>

.Lmid_block:
	adds	r2, __OPT_BIG_BLOCK_SIZE - __OPT_MID_BLOCK_SIZE
    dba8:	adds	r2, #48	; 0x30
	blo	.Lcopy_word_by_word
    dbaa:	bcc.n	dbd0 <memcpy+0xbc>
.Lmid_block_loop:
	BEGIN_UNROLL_MID_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    dbac:	ldr.w	r3, [r1], #4
    dbb0:	str.w	r3, [r0], #4
    dbb4:	ldr.w	r3, [r1], #4
    dbb8:	str.w	r3, [r0], #4
    dbbc:	ldr.w	r3, [r1], #4
    dbc0:	str.w	r3, [r0], #4
    dbc4:	ldr.w	r3, [r1], #4
    dbc8:	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds    r0, __OPT_MID_BLOCK_SIZE
	adds    r1, __OPT_MID_BLOCK_SIZE
#endif
	subs	r2, __OPT_MID_BLOCK_SIZE
    dbcc:	subs	r2, #16
	bhs	.Lmid_block_loop
    dbce:	bcs.n	dbac <memcpy+0x98>

.Lcopy_word_by_word:
	adds	r2, __OPT_MID_BLOCK_SIZE - 4
    dbd0:	adds	r2, #12
	blo	.Lcopy_less_than_4
    dbd2:	bcc.n	dbe0 <memcpy+0xcc>

	/* Kernel loop for small block copy */
	.align 2
.Lcopy_word_by_word_loop:
	ldr	r3, [r1], #4
    dbd4:	ldr.w	r3, [r1], #4
	str	r3, [r0], #4
    dbd8:	str.w	r3, [r0], #4
	subs	r2, #4
    dbdc:	subs	r2, #4
	bhs	.Lcopy_word_by_word_loop
    dbde:	bcs.n	dbd4 <memcpy+0xc0>

.Lcopy_less_than_4:
	adds	r2, #4
    dbe0:	adds	r2, #4
	beq	.Ldone
    dbe2:	beq.n	dbf6 <memcpy+0xe2>

	lsls	r2, r2, #31
    dbe4:	lsls	r2, r2, #31
	itt ne
    dbe6:	itt	ne
	ldrbne  r3, [r1], #1
    dbe8:	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    dbec:	strbne.w	r3, [r0], #1

	bcc	.Ldone
    dbf0:	bcc.n	dbf6 <memcpy+0xe2>
#ifdef __ARM_FEATURE_UNALIGNED
	ldrh	r3, [r1]
    dbf2:	ldrh	r3, [r1, #0]
	strh	r3, [r0]
    dbf4:	strh	r3, [r0, #0]
	strb	r3, [r0, #1]
#endif /* __ARM_FEATURE_UNALIGNED */

.Ldone:
#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    dbf6:	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    dbf8:	bx	lr
    dbfa:	nop
#define Ldst_aligned Lbig_block

	/* Copy word by word using LDR when alignment can be done in hardware,
	i.e., SCTLR.A is set, supporting unaligned access in LDR and STR.  */

	cmp	r2, #8
    dbfc:	cmp	r2, #8
	blo	.Lbyte_copy
    dbfe:	bcc.n	dc28 <memcpy+0x114>

	/* if src is aligned, just go to the big block loop.  */
	lsls	r3, r1, #30
    dc00:	lsls	r3, r1, #30
	beq	.Ldst_aligned
    dc02:	beq.n	db20 <memcpy+0xc>
	handling of aligned src and misaligned dst need more overhead than
	otherwise.  By doing this the worst case is when initial src is aligned,
	additional up to 4 byte additional copy will executed, which is
	acceptable.  */

	ands	r3, r0, #3
    dc04:	ands.w	r3, r0, #3
	beq	.Ldst_aligned
    dc08:	beq.n	db20 <memcpy+0xc>

	rsb	r3, #4
    dc0a:	rsb	r3, r3, #4
	subs	r2, r3
    dc0e:	subs	r2, r2, r3

	lsls    r3, r3, #31
    dc10:	lsls	r3, r3, #31
	itt ne
    dc12:	itt	ne
	ldrbne  r3, [r1], #1
    dc14:	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    dc18:	strbne.w	r3, [r0], #1

	bcc .Ldst_aligned
    dc1c:	bcc.n	db20 <memcpy+0xc>

#ifdef __ARM_FEATURE_UNALIGNED
	ldrh    r3, [r1], #2
    dc1e:	ldrh.w	r3, [r1], #2
	strh    r3, [r0], #2
    dc22:	strh.w	r3, [r0], #2
	b	.Ldst_aligned
    dc26:	b.n	db20 <memcpy+0xc>
	pop	{r4, r5}

#endif /* __ARM_FEATURE_UNALIGNED */

.Lbyte_copy:
	subs	r2, #4
    dc28:	subs	r2, #4
	blo	.Lcopy_less_than_4
    dc2a:	bcc.n	dbe0 <memcpy+0xcc>

.Lbyte_copy_loop:
	subs    r2, #1
    dc2c:	subs	r2, #1
	ldrb    r3, [r1], #1
    dc2e:	ldrb.w	r3, [r1], #1
	strb    r3, [r0], #1
    dc32:	strb.w	r3, [r0], #1
	bhs	.Lbyte_copy_loop
    dc36:	bcs.n	dc2c <memcpy+0x118>

	ldrb	r3, [r1]
    dc38:	ldrb	r3, [r1, #0]
	strb	r3, [r0]
    dc3a:	strb	r3, [r0, #0]
	ldrb	r3, [r1, #1]
    dc3c:	ldrb	r3, [r1, #1]
	strb	r3, [r0, #1]
    dc3e:	strb	r3, [r0, #1]
	ldrb	r3, [r1, #2]
    dc40:	ldrb	r3, [r1, #2]
	strb	r3, [r0, #2]
    dc42:	strb	r3, [r0, #2]

#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    dc44:	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    dc46:	bx	lr

0000dc48 <rx_queue_transfer>:
/*************************************************************************/
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
    dc48:	push	{r3, r4, r5, r6, r7, lr}
	NVIC_DISABLE_IRQ(IRQ_USB1);
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    dc4a:	ldr	r1, [pc, #80]	; (dc9c <rx_queue_transfer+0x54>)
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
    dc4c:	mov.w	r7, #131072	; 0x20000
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    dc50:	ldr	r5, [pc, #76]	; (dca0 <rx_queue_transfer+0x58>)
/*************************************************************************/
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
    dc52:	mov	r3, r0
	NVIC_DISABLE_IRQ(IRQ_USB1);
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    dc54:	add.w	r4, r1, r0, lsl #9
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    dc58:	ldr	r6, [pc, #72]	; (dca4 <rx_queue_transfer+0x5c>)
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
    dc5a:	ldr	r2, [pc, #76]	; (dca8 <rx_queue_transfer+0x60>)
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    dc5c:	add.w	r5, r5, r0, lsl #5
    dc60:	mov	r1, r4
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
    dc62:	str	r7, [r2, #0]
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    dc64:	mov	r0, r5
    dc66:	ldrh	r2, [r6, #0]
    dc68:	bl	eed0 <usb_prepare_transfer>
// read is certain to access the physical memory.
__attribute__((always_inline, unused))
static inline void arm_dcache_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
    dc6c:	ldrh	r1, [r6, #0]
// want to delete anything the cache may have stored, so your next
// read is certain to access the physical memory.
__attribute__((always_inline, unused))
static inline void arm_dcache_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    dc6e:	bic.w	r3, r4, #31
	uint32_t end_addr = (uint32_t)addr + size;
    dc72:	add	r1, r4
	asm volatile("": : :"memory");
	asm("dsb");
    dc74:	dsb	sy
	do {
		SCB_CACHE_DCIMVAC = location;
    dc78:	ldr	r2, [pc, #48]	; (dcac <rx_queue_transfer+0x64>)
    dc7a:	str	r3, [r2, #0]
		location += 32;
    dc7c:	adds	r3, #32
	} while (location < end_addr);
    dc7e:	cmp	r1, r3
    dc80:	bhi.n	dc7a <rx_queue_transfer+0x32>
	asm("dsb");
    dc82:	dsb	sy
	asm("isb");
    dc86:	isb	sy
	arm_dcache_delete(buffer, rx_packet_size);
	usb_receive(CDC_RX_ENDPOINT, rx_transfer + i);
    dc8a:	movs	r0, #3
    dc8c:	mov	r1, r5
    dc8e:	bl	ef28 <usb_receive>
	NVIC_ENABLE_IRQ(IRQ_USB1);
    dc92:	ldr	r3, [pc, #28]	; (dcb0 <rx_queue_transfer+0x68>)
    dc94:	mov.w	r2, #131072	; 0x20000
    dc98:	str	r2, [r3, #0]
    dc9a:	pop	{r3, r4, r5, r6, r7, pc}
    dc9c:	.word	0x20200000
    dca0:	.word	0x200445a0
    dca4:	.word	0x200446ae
    dca8:	.word	0xe000e18c
    dcac:	.word	0xe000ef5c
    dcb0:	.word	0xe000e10c

0000dcb4 <rx_event>:
}

// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    dcb4:	ldr	r2, [pc, #144]	; (dd48 <rx_event+0x94>)
    dcb6:	ldr	r3, [r0, #4]
	NVIC_ENABLE_IRQ(IRQ_USB1);
}

// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
    dcb8:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    dcbc:	ubfx	r3, r3, #16, #15
    dcc0:	ldrh	r4, [r2, #0]
	int i = t->callback_param;
    dcc2:	ldr	r5, [r0, #28]
}

// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    dcc4:	subs	r4, r4, r3
	int i = t->callback_param;
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
    dcc6:	cmp	r4, #0
    dcc8:	ble.n	dd3c <rx_event+0x88>
		// received a packet with data
		uint32_t head = rx_head;
    dcca:	ldr	r1, [pc, #128]	; (dd4c <rx_event+0x98>)
		if (head != rx_tail) {
    dccc:	ldr	r2, [pc, #128]	; (dd50 <rx_event+0x9c>)
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
	int i = t->callback_param;
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
		// received a packet with data
		uint32_t head = rx_head;
    dcce:	ldrb	r3, [r1, #0]
		if (head != rx_tail) {
    dcd0:	ldrb	r2, [r2, #0]
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
	int i = t->callback_param;
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
		// received a packet with data
		uint32_t head = rx_head;
    dcd2:	uxtb	r3, r3
		if (head != rx_tail) {
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
    dcd4:	ldr	r0, [pc, #124]	; (dd54 <rx_event+0xa0>)
			uint32_t count = rx_count[ii];
    dcd6:	ldr	r6, [pc, #128]	; (dd58 <rx_event+0xa4>)
	int i = t->callback_param;
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
		// received a packet with data
		uint32_t head = rx_head;
		if (head != rx_tail) {
    dcd8:	cmp	r3, r2
    dcda:	beq.n	dcec <rx_event+0x38>
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
    dcdc:	ldrb.w	r8, [r0, r3]
			uint32_t count = rx_count[ii];
    dce0:	ldrh.w	r7, [r6, r8, lsl #1]
			if (len <= CDC_RX_SIZE_480 - count) {
    dce4:	rsb	r2, r7, #512	; 0x200
    dce8:	cmp	r4, r2
    dcea:	bls.n	dd12 <rx_event+0x5e>
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
    dcec:	adds	r3, #1
				return;
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
    dcee:	movs	r2, #0
    dcf0:	ldr	r7, [pc, #104]	; (dd5c <rx_event+0xa8>)
		if (++head > RX_NUM) head = 0;
    dcf2:	cmp	r3, #8
				// TODO: trigger serialEvent
				return;
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
    dcf4:	strh.w	r4, [r6, r5, lsl #1]
		rx_index[i] = 0;
    dcf8:	strh.w	r2, [r7, r5, lsl #1]
		if (++head > RX_NUM) head = 0;
		rx_list[head] = i;
		rx_head = head;
		rx_available += len;
    dcfc:	ldr	r6, [pc, #96]	; (dd60 <rx_event+0xac>)
    dcfe:	ite	ls
    dd00:	uxtbls	r2, r3
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
    dd02:	movhi	r3, r2
		rx_list[head] = i;
		rx_head = head;
    dd04:	strb	r2, [r1, #0]
		rx_available += len;
    dd06:	ldr	r2, [r6, #0]
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
		rx_list[head] = i;
    dd08:	strb	r5, [r0, r3]
		rx_head = head;
		rx_available += len;
    dd0a:	add	r4, r2
    dd0c:	str	r4, [r6, #0]
    dd0e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
			uint32_t count = rx_count[ii];
			if (len <= CDC_RX_SIZE_480 - count) {
				// previous buffer has enough free space for this packet's data
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
    dd12:	ldr	r3, [pc, #80]	; (dd64 <rx_event+0xb0>)
    dd14:	add.w	r0, r7, r8, lsl #9
    dd18:	mov	r2, r4
					rx_buffer + i * CDC_RX_SIZE_480, len);
				rx_count[ii] = count + len;
    dd1a:	add	r7, r4
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
			uint32_t count = rx_count[ii];
			if (len <= CDC_RX_SIZE_480 - count) {
				// previous buffer has enough free space for this packet's data
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
    dd1c:	add.w	r1, r3, r5, lsl #9
    dd20:	add	r0, r3
    dd22:	bl	db14 <memcpy>
					rx_buffer + i * CDC_RX_SIZE_480, len);
				rx_count[ii] = count + len;
				rx_available += len;
    dd26:	ldr	r2, [pc, #56]	; (dd60 <rx_event+0xac>)
				rx_queue_transfer(i);
    dd28:	mov	r0, r5
			uint32_t count = rx_count[ii];
			if (len <= CDC_RX_SIZE_480 - count) {
				// previous buffer has enough free space for this packet's data
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
					rx_buffer + i * CDC_RX_SIZE_480, len);
				rx_count[ii] = count + len;
    dd2a:	strh.w	r7, [r6, r8, lsl #1]
				rx_available += len;
    dd2e:	ldr	r3, [r2, #0]
    dd30:	add	r4, r3
    dd32:	str	r4, [r2, #0]
		// TODO: trigger serialEvent
	} else {
		// received a zero length packet
		rx_queue_transfer(i);
	}
}
    dd34:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				// previous buffer has enough free space for this packet's data
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
					rx_buffer + i * CDC_RX_SIZE_480, len);
				rx_count[ii] = count + len;
				rx_available += len;
				rx_queue_transfer(i);
    dd38:	b.w	dc48 <rx_queue_transfer>
		rx_head = head;
		rx_available += len;
		// TODO: trigger serialEvent
	} else {
		// received a zero length packet
		rx_queue_transfer(i);
    dd3c:	mov	r0, r5
	}
}
    dd3e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		rx_head = head;
		rx_available += len;
		// TODO: trigger serialEvent
	} else {
		// received a zero length packet
		rx_queue_transfer(i);
    dd42:	b.w	dc48 <rx_queue_transfer>
    dd46:	nop
    dd48:	.word	0x200446ae
    dd4c:	.word	0x200446c4
    dd50:	.word	0x200446a0
    dd54:	.word	0x200446a4
    dd58:	.word	0x200446b0
    dd5c:	.word	0x2004457c
    dd60:	.word	0x200446c0
    dd64:	.word	0x20200000

0000dd68 <usb_serial_flush_callback>:
	tx_noautoflush = 0;
}

static void usb_serial_flush_callback(void)
{
	if (tx_noautoflush) return;
    dd68:	ldr	r3, [pc, #120]	; (dde4 <usb_serial_flush_callback+0x7c>)
    dd6a:	ldrb	r2, [r3, #0]
    dd6c:	cbnz	r2, dd86 <usb_serial_flush_callback+0x1e>
    dd6e:	and.w	r3, r2, #255	; 0xff
	if (!usb_configuration) return;
    dd72:	ldr	r2, [pc, #116]	; (dde8 <usb_serial_flush_callback+0x80>)
    dd74:	ldrb	r2, [r2, #0]
    dd76:	cbz	r2, dd86 <usb_serial_flush_callback+0x1e>
	tx_available = 0;
	tx_noautoflush = 0;
}

static void usb_serial_flush_callback(void)
{
    dd78:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (tx_noautoflush) return;
	if (!usb_configuration) return;
	if (tx_available == 0) return;
    dd7c:	ldr	r5, [pc, #108]	; (ddec <usb_serial_flush_callback+0x84>)
    dd7e:	ldrh	r2, [r5, #0]
    dd80:	cbnz	r2, dd88 <usb_serial_flush_callback+0x20>
    dd82:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    dd86:	bx	lr
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
    dd88:	ldr	r6, [pc, #100]	; (ddf0 <usb_serial_flush_callback+0x88>)
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
    dd8a:	rsb	r8, r2, #2048	; 0x800
{
	if (tx_noautoflush) return;
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
    dd8e:	ldr	r7, [pc, #100]	; (ddf4 <usb_serial_flush_callback+0x8c>)
    dd90:	ldrb	r1, [r6, #0]
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    dd92:	mov	r2, r8
	if (tx_noautoflush) return;
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    dd94:	ldr	r4, [pc, #96]	; (ddf8 <usb_serial_flush_callback+0x90>)
{
	if (tx_noautoflush) return;
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
    dd96:	add.w	r7, r7, r1, lsl #5
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    dd9a:	add.w	r4, r4, r1, lsl #11
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    dd9e:	mov	r0, r7
    dda0:	mov	r1, r4
    dda2:	bl	eed0 <usb_prepare_transfer>
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
    dda6:	add.w	r2, r8, r4
// any cached data written to memory, and then removed from the cache,
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    ddaa:	bic.w	r1, r4, #31
	uint32_t end_addr = (uint32_t)addr + size;
	asm volatile("": : :"memory");
	asm("dsb");
    ddae:	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    ddb2:	ldr	r3, [pc, #72]	; (ddfc <usb_serial_flush_callback+0x94>)
    ddb4:	str	r1, [r3, #0]
		location += 32;
    ddb6:	adds	r1, #32
	} while (location < end_addr);
    ddb8:	cmp	r2, r1
    ddba:	bhi.n	ddb4 <usb_serial_flush_callback+0x4c>
	asm("dsb");
    ddbc:	dsb	sy
	asm("isb");
    ddc0:	isb	sy
	arm_dcache_flush_delete(txbuf, txnum);
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    ddc4:	movs	r0, #3
    ddc6:	mov	r1, r7
    ddc8:	bl	ef00 <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    ddcc:	ldrb	r3, [r6, #0]
    ddce:	ldr	r2, [pc, #32]	; (ddf0 <usb_serial_flush_callback+0x88>)
    ddd0:	adds	r3, #1
    ddd2:	uxtb	r3, r3
    ddd4:	cmp	r3, #3
    ddd6:	it	hi
    ddd8:	movhi	r3, #0
    ddda:	strb	r3, [r2, #0]
	tx_available = 0;
    dddc:	movs	r3, #0
    ddde:	strh	r3, [r5, #0]
    dde0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    dde4:	.word	0x2004458e
    dde8:	.word	0x20044798
    ddec:	.word	0x200446c6
    ddf0:	.word	0x2004458f
    ddf4:	.word	0x200446e0
    ddf8:	.word	0x20201000
    ddfc:	.word	0xe000ef70

0000de00 <usb_serial_write.part.1>:
{
	USB1_GPTIMER0CTRL = 0;
}


int usb_serial_write(const void *buffer, uint32_t size)
    de00:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    de04:	sub	sp, #20
    de06:	str	r0, [sp, #8]
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
    de08:	str	r1, [sp, #4]
    de0a:	cmp	r1, #0
    de0c:	beq.w	df54 <usb_serial_write.part.1+0x154>
    de10:	movs	r3, #0
    de12:	ldr.w	r8, [pc, #348]	; df70 <usb_serial_write.part.1+0x170>
    de16:	ldr.w	r9, [pc, #332]	; df64 <usb_serial_write.part.1+0x164>
    de1a:	str	r3, [sp, #0]
				tx_available = TX_SIZE;
				transmit_previous_timeout = 0;
				break;
			}
			if (!waiting) {
				wait_begin_at = systick_millis_count;
    de1c:	ldr	r6, [pc, #312]	; (df58 <usb_serial_write.part.1+0x158>)
    de1e:	ldrh.w	r3, [r8]
				//printf("tx head=%d\n", tx_head);
				//printf("TXFILLTUNING=%08lX\n", USB1_TXFILLTUNING);
				//usb_print_transfer_log();
				//while (1) ;
			}
			if (!usb_configuration) return sent;
    de22:	ldr.w	sl, [pc, #336]	; df74 <usb_serial_write.part.1+0x174>
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
	asm volatile("": : :"memory");
	asm("dsb");
	do {
		SCB_CACHE_DCCIMVAC = location;
    de26:	ldr.w	fp, [pc, #336]	; df78 <usb_serial_write.part.1+0x178>
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
		transfer_t *xfer = tx_transfer + tx_head;
    de2a:	ldr	r2, [pc, #304]	; (df5c <usb_serial_write.part.1+0x15c>)
    de2c:	ldrb	r4, [r2, #0]
    de2e:	ldr	r2, [pc, #304]	; (df60 <usb_serial_write.part.1+0x160>)
    de30:	add.w	r7, r2, r4, lsl #5
		int waiting=0;
		uint32_t wait_begin_at=0;
		while (!tx_available) {
    de34:	cmp	r3, #0
    de36:	bne.n	df16 <usb_serial_write.part.1+0x116>
    de38:	mov	r5, r3
    de3a:	mov	r4, r3
    de3c:	b.n	de68 <usb_serial_write.part.1+0x68>
			}
			if (!waiting) {
				wait_begin_at = systick_millis_count;
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
    de3e:	ldrb.w	r3, [r9]
				}
				tx_available = TX_SIZE;
				transmit_previous_timeout = 0;
				break;
			}
			if (!waiting) {
    de42:	cbnz	r4, de46 <usb_serial_write.part.1+0x46>
				wait_begin_at = systick_millis_count;
    de44:	ldr	r5, [r6, #0]
    de46:	movs	r4, #1
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
    de48:	cmp	r3, #0
    de4a:	bne.n	df0a <usb_serial_write.part.1+0x10a>
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
    de4c:	ldr	r3, [r6, #0]
    de4e:	subs	r3, r3, r5
    de50:	cmp	r3, #120	; 0x78
    de52:	bhi.n	df48 <usb_serial_write.part.1+0x148>
				//printf("tx head=%d\n", tx_head);
				//printf("TXFILLTUNING=%08lX\n", USB1_TXFILLTUNING);
				//usb_print_transfer_log();
				//while (1) ;
			}
			if (!usb_configuration) return sent;
    de54:	ldrb.w	r3, [sl]
    de58:	cmp	r3, #0
    de5a:	beq.n	df0a <usb_serial_write.part.1+0x10a>
			yield();
    de5c:	bl	fc48 <yield>
	if (!usb_configuration) return 0;
	while (size > 0) {
		transfer_t *xfer = tx_transfer + tx_head;
		int waiting=0;
		uint32_t wait_begin_at=0;
		while (!tx_available) {
    de60:	ldrh.w	r3, [r8]
    de64:	cmp	r3, #0
    de66:	bne.n	df12 <usb_serial_write.part.1+0x112>
			//digitalWriteFast(3, HIGH);
			uint32_t status = usb_transfer_status(xfer);
    de68:	mov	r0, r7
    de6a:	bl	ef4c <usb_transfer_status>
			if (!(status & 0x80)) {
    de6e:	ands.w	r0, r0, #128	; 0x80
			}
			if (!waiting) {
				wait_begin_at = systick_millis_count;
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
    de72:	ldr	r2, [pc, #240]	; (df64 <usb_serial_write.part.1+0x164>)
		int waiting=0;
		uint32_t wait_begin_at=0;
		while (!tx_available) {
			//digitalWriteFast(3, HIGH);
			uint32_t status = usb_transfer_status(xfer);
			if (!(status & 0x80)) {
    de74:	bne.n	de3e <usb_serial_write.part.1+0x3e>
				if (status & 0x68) {
					// TODO: what if status has errors???
					printf("ERROR status = %x, i=%d, ms=%u\n",
						status, tx_head, systick_millis_count);
				}
				tx_available = TX_SIZE;
    de76:	mov.w	r3, #2048	; 0x800
    de7a:	ldr	r2, [pc, #224]	; (df5c <usb_serial_write.part.1+0x15c>)
				transmit_previous_timeout = 0;
    de7c:	strb.w	r0, [r9]
    de80:	ldrb	r4, [r2, #0]
    de82:	mov	r2, r3
				if (status & 0x68) {
					// TODO: what if status has errors???
					printf("ERROR status = %x, i=%d, ms=%u\n",
						status, tx_head, systick_millis_count);
				}
				tx_available = TX_SIZE;
    de84:	strh.w	r3, [r8]
			}
			if (!usb_configuration) return sent;
			yield();
		}
		//digitalWriteFast(3, LOW);
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    de88:	lsls	r4, r4, #11
		if (size >= tx_available) {
    de8a:	ldr	r5, [sp, #4]
			}
			if (!usb_configuration) return sent;
			yield();
		}
		//digitalWriteFast(3, LOW);
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    de8c:	ldr	r1, [pc, #216]	; (df68 <usb_serial_write.part.1+0x168>)
    de8e:	add	r0, r4
		if (size >= tx_available) {
    de90:	cmp	r5, r2
			}
			if (!usb_configuration) return sent;
			yield();
		}
		//digitalWriteFast(3, LOW);
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    de92:	add	r0, r1
		if (size >= tx_available) {
    de94:	bcc.n	df1e <usb_serial_write.part.1+0x11e>
			memcpy(txdata, data, tx_available);
			//*(txbuffer + (tx_head * TX_SIZE)) = 'A' + tx_head; // to see which buffer
			//*(txbuffer + (tx_head * TX_SIZE) + 1) = ' '; // really see it
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    de96:	add	r4, r1
			yield();
		}
		//digitalWriteFast(3, LOW);
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
		if (size >= tx_available) {
			memcpy(txdata, data, tx_available);
    de98:	ldr	r1, [sp, #8]
    de9a:	bl	db14 <memcpy>
			//*(txbuffer + (tx_head * TX_SIZE)) = 'A' + tx_head; // to see which buffer
			//*(txbuffer + (tx_head * TX_SIZE) + 1) = ' '; // really see it
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
    de9e:	movs	r3, #0
    dea0:	mov	r1, r4
    dea2:	mov.w	r2, #2048	; 0x800
    dea6:	mov	r0, r7
    dea8:	bl	eed0 <usb_prepare_transfer>
// any cached data written to memory, and then removed from the cache,
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    deac:	bic.w	r3, r4, #31
	uint32_t end_addr = (uint32_t)addr + size;
    deb0:	add.w	r4, r4, #2048	; 0x800
	asm volatile("": : :"memory");
	asm("dsb");
    deb4:	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    deb8:	str.w	r3, [fp]
		location += 32;
    debc:	adds	r3, #32
	} while (location < end_addr);
    debe:	cmp	r4, r3
    dec0:	bhi.n	deb8 <usb_serial_write.part.1+0xb8>
	asm("dsb");
    dec2:	dsb	sy
	asm("isb");
    dec6:	isb	sy
			arm_dcache_flush_delete(txbuf, TX_SIZE);
			usb_transmit(CDC_TX_ENDPOINT, xfer);
    deca:	movs	r0, #3
    decc:	mov	r1, r7
    dece:	bl	ef00 <usb_transmit>
			if (++tx_head >= TX_NUM) tx_head = 0;
    ded2:	ldr	r3, [pc, #136]	; (df5c <usb_serial_write.part.1+0x15c>)
    ded4:	ldr	r2, [pc, #132]	; (df5c <usb_serial_write.part.1+0x15c>)
			size -= tx_available;
			sent += tx_available;
			data += tx_available;
			tx_available = 0;
    ded6:	movs	r1, #0
			//*(txbuffer + (tx_head * TX_SIZE) + 1) = ' '; // really see it
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
			arm_dcache_flush_delete(txbuf, TX_SIZE);
			usb_transmit(CDC_TX_ENDPOINT, xfer);
			if (++tx_head >= TX_NUM) tx_head = 0;
    ded8:	ldrb	r3, [r3, #0]
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
}

static void timer_stop(void)
{
	USB1_GPTIMER0CTRL = 0;
    deda:	ldr	r0, [pc, #144]	; (df6c <usb_serial_write.part.1+0x16c>)
			//*(txbuffer + (tx_head * TX_SIZE) + 1) = ' '; // really see it
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
			arm_dcache_flush_delete(txbuf, TX_SIZE);
			usb_transmit(CDC_TX_ENDPOINT, xfer);
			if (++tx_head >= TX_NUM) tx_head = 0;
    dedc:	adds	r3, #1
    dede:	uxtb	r3, r3
    dee0:	cmp	r3, #3
    dee2:	it	hi
    dee4:	movhi	r3, #0
    dee6:	strb	r3, [r2, #0]
			size -= tx_available;
    dee8:	ldrh.w	r2, [r8]
			sent += tx_available;
    deec:	ldr	r3, [sp, #0]
			data += tx_available;
			tx_available = 0;
    deee:	strh.w	r1, [r8]
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
			arm_dcache_flush_delete(txbuf, TX_SIZE);
			usb_transmit(CDC_TX_ENDPOINT, xfer);
			if (++tx_head >= TX_NUM) tx_head = 0;
			size -= tx_available;
			sent += tx_available;
    def2:	add	r3, r2
    def4:	str	r3, [sp, #0]
			data += tx_available;
    def6:	ldr	r3, [sp, #8]
    def8:	add	r3, r2
    defa:	str	r3, [sp, #8]
    defc:	mov	r3, r1
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
}

static void timer_stop(void)
{
	USB1_GPTIMER0CTRL = 0;
    defe:	str.w	r1, [r0, #132]	; 0x84
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
    df02:	ldr	r1, [sp, #4]
    df04:	subs	r2, r1, r2
    df06:	str	r2, [sp, #4]
    df08:	bne.n	de2a <usb_serial_write.part.1+0x2a>
    df0a:	ldr	r0, [sp, #0]
			size = 0;
			timer_start_oneshot();
		}
	}
	return sent;
}
    df0c:	add	sp, #20
    df0e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    df12:	ldr	r2, [pc, #72]	; (df5c <usb_serial_write.part.1+0x15c>)
    df14:	ldrb	r4, [r2, #0]
    df16:	mov	r2, r3
    df18:	rsb	r0, r3, #2048	; 0x800
    df1c:	b.n	de88 <usb_serial_write.part.1+0x88>
			sent += tx_available;
			data += tx_available;
			tx_available = 0;
			timer_stop();
		} else {
			memcpy(txdata, data, size);
    df1e:	ldr	r4, [sp, #4]
    df20:	ldr	r1, [sp, #8]
    df22:	mov	r2, r4
    df24:	str	r3, [sp, #12]
    df26:	bl	db14 <memcpy>
			tx_available -= size;
    df2a:	ldr	r3, [sp, #12]
}

static void timer_start_oneshot(void)
{
	// restarts timer if already running (retriggerable one-shot)
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    df2c:	ldr	r2, [pc, #60]	; (df6c <usb_serial_write.part.1+0x16c>)
    df2e:	mov.w	r1, #3221225472	; 0xc0000000
			data += tx_available;
			tx_available = 0;
			timer_stop();
		} else {
			memcpy(txdata, data, size);
			tx_available -= size;
    df32:	subs	r3, r3, r4
    df34:	strh.w	r3, [r8]
    df38:	ldr	r3, [sp, #0]
}

static void timer_start_oneshot(void)
{
	// restarts timer if already running (retriggerable one-shot)
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    df3a:	str.w	r1, [r2, #132]	; 0x84
    df3e:	mov	r0, r3
    df40:	add	r0, r4
			size = 0;
			timer_start_oneshot();
		}
	}
	return sent;
}
    df42:	add	sp, #20
    df44:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
				// waited too long, assume the USB host isn't listening
				transmit_previous_timeout = 1;
    df48:	movs	r3, #1
				return sent;
    df4a:	ldr	r0, [sp, #0]
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
				// waited too long, assume the USB host isn't listening
				transmit_previous_timeout = 1;
    df4c:	strb	r3, [r2, #0]
			size = 0;
			timer_start_oneshot();
		}
	}
	return sent;
}
    df4e:	add	sp, #20
    df50:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
    df54:	ldr	r0, [sp, #4]
    df56:	b.n	df0c <usb_serial_write.part.1+0x10c>
    df58:	.word	0x200447a4
    df5c:	.word	0x2004458f
    df60:	.word	0x200446e0
    df64:	.word	0x200446c5
    df68:	.word	0x20201000
    df6c:	.word	0x402e0000
    df70:	.word	0x200446c6
    df74:	.word	0x20044798
    df78:	.word	0xe000ef70

0000df7c <usb_serial_reset>:
static void rx_queue_transfer(int i);
static void rx_event(transfer_t *t);


void usb_serial_reset(void)
{
    df7c:	bx	lr
    df7e:	nop

0000df80 <usb_serial_configure>:
void usb_serial_configure(void)
{
	int i;

	printf("usb_serial_configure\n");
	if (usb_high_speed) {
    df80:	ldr	r3, [pc, #196]	; (e048 <usb_serial_configure+0xc8>)
	printf("usb_serial_reset\n");
	// deallocate all transfer descriptors
}

void usb_serial_configure(void)
{
    df82:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int i;

	printf("usb_serial_configure\n");
	if (usb_high_speed) {
    df86:	ldrb	r3, [r3, #0]
		tx_packet_size = CDC_TX_SIZE_480;
    df88:	ldr	r7, [pc, #192]	; (e04c <usb_serial_configure+0xcc>)
void usb_serial_configure(void)
{
	int i;

	printf("usb_serial_configure\n");
	if (usb_high_speed) {
    df8a:	cmp	r3, #0
    df8c:	beq.n	e038 <usb_serial_configure+0xb8>
		tx_packet_size = CDC_TX_SIZE_480;
    df8e:	mov.w	r3, #512	; 0x200
		rx_packet_size = CDC_RX_SIZE_480;
    df92:	ldr.w	r8, [pc, #236]	; e080 <usb_serial_configure+0x100>
{
	int i;

	printf("usb_serial_configure\n");
	if (usb_high_speed) {
		tx_packet_size = CDC_TX_SIZE_480;
    df96:	strh	r3, [r7, #0]
		rx_packet_size = CDC_RX_SIZE_480;
    df98:	strh.w	r3, [r8]
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
		rx_packet_size = CDC_RX_SIZE_12;
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
    df9c:	movs	r1, #0
    df9e:	movs	r2, #128	; 0x80
    dfa0:	ldr	r0, [pc, #172]	; (e050 <usb_serial_configure+0xd0>)
	tx_head = 0;
    dfa2:	mov	r5, r1
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
    dfa4:	ldr	r6, [pc, #172]	; (e054 <usb_serial_configure+0xd4>)
		rx_packet_size = CDC_RX_SIZE_480;
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
		rx_packet_size = CDC_RX_SIZE_12;
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
    dfa6:	bl	10bfc <memset>
	tx_head = 0;
    dfaa:	ldr	r4, [pc, #172]	; (e058 <usb_serial_configure+0xd8>)
	tx_available = 0;
    dfac:	ldr	r3, [pc, #172]	; (e05c <usb_serial_configure+0xdc>)
	memset(rx_transfer, 0, sizeof(rx_transfer));
    dfae:	mov	r1, r5
    dfb0:	mov.w	r2, #256	; 0x100
    dfb4:	ldr	r0, [pc, #168]	; (e060 <usb_serial_configure+0xe0>)
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
		rx_packet_size = CDC_RX_SIZE_12;
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
    dfb6:	strb	r5, [r4, #0]
	rx_tail = 0;
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
	usb_config_rx(CDC_RX_ENDPOINT, rx_packet_size, 0, rx_event);
	usb_config_tx(CDC_TX_ENDPOINT, tx_packet_size, 1, NULL);
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    dfb8:	mov	r4, r5
		tx_packet_size = CDC_TX_SIZE_12;
		rx_packet_size = CDC_RX_SIZE_12;
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
    dfba:	strh	r5, [r3, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
    dfbc:	bl	10bfc <memset>
	memset(rx_count, 0, sizeof(rx_count));
    dfc0:	str	r5, [r6, #0]
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
	rx_tail = 0;
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    dfc2:	mov	r3, r5
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
    dfc4:	str	r5, [r6, #4]
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
	rx_tail = 0;
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    dfc6:	mov	r2, r5
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
    dfc8:	str	r5, [r6, #8]
    dfca:	str	r5, [r6, #12]
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
    dfcc:	ldr	r1, [pc, #148]	; (e064 <usb_serial_configure+0xe4>)
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
    dfce:	ldr	r6, [pc, #152]	; (e068 <usb_serial_configure+0xe8>)
	rx_head = 0;
	rx_tail = 0;
    dfd0:	ldr	r0, [pc, #152]	; (e06c <usb_serial_configure+0xec>)
	rx_available = 0;
    dfd2:	ldr.w	lr, [pc, #176]	; e084 <usb_serial_configure+0x104>
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
    dfd6:	strb	r5, [r1, #0]
	rx_tail = 0;
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    dfd8:	movs	r1, #16
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
	rx_tail = 0;
    dfda:	strb	r5, [r0, #0]
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    dfdc:	movs	r0, #2
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
    dfde:	str	r5, [r6, #0]
    dfe0:	str	r5, [r6, #4]
    dfe2:	str	r5, [r6, #8]
    dfe4:	str	r5, [r6, #12]
	rx_head = 0;
	rx_tail = 0;
	rx_available = 0;
    dfe6:	str.w	r5, [lr]
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    dfea:	bl	ee68 <usb_config_tx>
	usb_config_rx(CDC_RX_ENDPOINT, rx_packet_size, 0, rx_event);
    dfee:	ldrh.w	r1, [r8]
    dff2:	mov	r2, r5
    dff4:	ldr	r3, [pc, #120]	; (e070 <usb_serial_configure+0xf0>)
    dff6:	movs	r0, #3
    dff8:	bl	ee04 <usb_config_rx>
	usb_config_tx(CDC_TX_ENDPOINT, tx_packet_size, 1, NULL);
    dffc:	mov	r3, r5
    dffe:	ldrh	r1, [r7, #0]
    e000:	movs	r2, #1
    e002:	movs	r0, #3
    e004:	bl	ee68 <usb_config_tx>
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    e008:	mov	r0, r4
    e00a:	adds	r4, #1
    e00c:	bl	dc48 <rx_queue_transfer>
    e010:	cmp	r4, #8
    e012:	bne.n	e008 <usb_serial_configure+0x88>
static void timer_stop();

static void timer_config(void (*callback)(void), uint32_t microseconds)
{
	usb_timer0_callback = callback;
	USB1_GPTIMER0CTRL = 0;
    e014:	ldr	r3, [pc, #92]	; (e074 <usb_serial_configure+0xf4>)
	USB1_GPTIMER0LD = microseconds - 1;
    e016:	movs	r2, #74	; 0x4a
static void timer_start_oneshot();
static void timer_stop();

static void timer_config(void (*callback)(void), uint32_t microseconds)
{
	usb_timer0_callback = callback;
    e018:	ldr	r0, [pc, #92]	; (e078 <usb_serial_configure+0xf8>)
	USB1_GPTIMER0CTRL = 0;
    e01a:	movs	r1, #0
static void timer_start_oneshot();
static void timer_stop();

static void timer_config(void (*callback)(void), uint32_t microseconds)
{
	usb_timer0_callback = callback;
    e01c:	ldr	r4, [pc, #92]	; (e07c <usb_serial_configure+0xfc>)
    e01e:	str	r4, [r0, #0]
	USB1_GPTIMER0CTRL = 0;
    e020:	str.w	r1, [r3, #132]	; 0x84
	USB1_GPTIMER0LD = microseconds - 1;
    e024:	str.w	r2, [r3, #128]	; 0x80
	USB1_USBINTR |= USB_USBINTR_TIE0;
    e028:	ldr.w	r2, [r3, #328]	; 0x148
    e02c:	orr.w	r2, r2, #16777216	; 0x1000000
    e030:	str.w	r2, [r3, #328]	; 0x148
    e034:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	printf("usb_serial_configure\n");
	if (usb_high_speed) {
		tx_packet_size = CDC_TX_SIZE_480;
		rx_packet_size = CDC_RX_SIZE_480;
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
    e038:	movs	r3, #64	; 0x40
		rx_packet_size = CDC_RX_SIZE_12;
    e03a:	ldr.w	r8, [pc, #68]	; e080 <usb_serial_configure+0x100>
	printf("usb_serial_configure\n");
	if (usb_high_speed) {
		tx_packet_size = CDC_TX_SIZE_480;
		rx_packet_size = CDC_RX_SIZE_480;
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
    e03e:	strh	r3, [r7, #0]
		rx_packet_size = CDC_RX_SIZE_12;
    e040:	strh.w	r3, [r8]
    e044:	b.n	df9c <usb_serial_configure+0x1c>
    e046:	nop
    e048:	.word	0x20044770
    e04c:	.word	0x2004458c
    e050:	.word	0x200446e0
    e054:	.word	0x200446b0
    e058:	.word	0x2004458f
    e05c:	.word	0x200446c6
    e060:	.word	0x200445a0
    e064:	.word	0x200446c4
    e068:	.word	0x2004457c
    e06c:	.word	0x200446a0
    e070:	.word	0x0000dcb5
    e074:	.word	0x402e0000
    e078:	.word	0x20044760
    e07c:	.word	0x0000dd69
    e080:	.word	0x200446ae
    e084:	.word	0x200446c0

0000e088 <usb_serial_read>:
int usb_serial_read(void *buffer, uint32_t size)
{
	uint8_t *p = (uint8_t *)buffer;
	uint32_t count=0;

	NVIC_DISABLE_IRQ(IRQ_USB1);
    e088:	ldr	r3, [pc, #196]	; (e150 <usb_serial_read+0xc8>)
    e08a:	mov.w	r2, #131072	; 0x20000

//static int maxtimes=0;

// read a block of bytes to a buffer
int usb_serial_read(void *buffer, uint32_t size)
{
    e08e:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t *p = (uint8_t *)buffer;
	uint32_t count=0;

	NVIC_DISABLE_IRQ(IRQ_USB1);
    e092:	str	r2, [r3, #0]

//static int maxtimes=0;

// read a block of bytes to a buffer
int usb_serial_read(void *buffer, uint32_t size)
{
    e094:	sub	sp, #12
	uint8_t *p = (uint8_t *)buffer;
	uint32_t count=0;

	NVIC_DISABLE_IRQ(IRQ_USB1);
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
    e096:	ldr	r3, [pc, #188]	; (e154 <usb_serial_read+0xcc>)
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
    e098:	mov	r9, r1
	uint8_t *p = (uint8_t *)buffer;
	uint32_t count=0;

	NVIC_DISABLE_IRQ(IRQ_USB1);
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
    e09a:	ldrb	r4, [r3, #0]
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
    e09c:	cmp	r1, #0
    e09e:	beq.n	e148 <usb_serial_read+0xc0>
    e0a0:	ldr	r3, [pc, #180]	; (e158 <usb_serial_read+0xd0>)
    e0a2:	uxtb	r4, r4
    e0a4:	ldrb	r3, [r3, #0]
    e0a6:	cmp	r4, r3
    e0a8:	beq.n	e14c <usb_serial_read+0xc4>
    e0aa:	mov	sl, r0
    e0ac:	movs	r7, #0
    e0ae:	ldr.w	fp, [pc, #192]	; e170 <usb_serial_read+0xe8>
		if (++tail > RX_NUM) tail = 0;
    e0b2:	adds	r4, #1
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
    e0b4:	ldr	r3, [pc, #164]	; (e15c <usb_serial_read+0xd4>)
	uint32_t tail = rx_tail;
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
    e0b6:	rsb	r8, r7, r9
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    e0ba:	mov	r0, sl
	NVIC_DISABLE_IRQ(IRQ_USB1);
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
    e0bc:	cmp	r4, #9
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
    e0be:	str	r3, [sp, #4]
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
    e0c0:	ldr	r3, [pc, #156]	; (e160 <usb_serial_read+0xd8>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
    e0c2:	it	cs
    e0c4:	movcs	r4, #0
		uint32_t i = rx_list[tail];
    e0c6:	ldrb	r5, [r3, r4]
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
    e0c8:	ldr	r3, [pc, #144]	; (e15c <usb_serial_read+0xd4>)
    e0ca:	ldrh.w	lr, [r3, r5, lsl #1]
    e0ce:	ldr	r3, [pc, #148]	; (e164 <usb_serial_read+0xdc>)
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    e0d0:	add.w	r1, lr, r5, lsl #9
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
    e0d4:	ldrh.w	r6, [r3, r5, lsl #1]
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    e0d8:	ldr	r3, [pc, #140]	; (e168 <usb_serial_read+0xe0>)
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
    e0da:	rsb	r6, lr, r6
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    e0de:	add	r1, r3
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
		 //printf("usb_serial_read, count=%d, size=%d, i=%d, index=%d, len=%d, avail=%d, c=%c\n",
		  //count, size, i, rx_index[i], len, avail, rx_buffer[i * CDC_RX_SIZE_480]);
		if (avail > len) {
    e0e0:	cmp	r8, r6
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    e0e2:	mov	r2, r6
			p += avail;
			rx_available -= avail;
			count += avail;
    e0e4:	add	r7, r6
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
		 //printf("usb_serial_read, count=%d, size=%d, i=%d, index=%d, len=%d, avail=%d, c=%c\n",
		  //count, size, i, rx_index[i], len, avail, rx_buffer[i * CDC_RX_SIZE_480]);
		if (avail > len) {
    e0e6:	bcs.n	e11c <usb_serial_read+0x94>
			// partially consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
    e0e8:	add.w	r1, lr, r5, lsl #9
    e0ec:	mov	r2, r8
    e0ee:	add	r1, r3
    e0f0:	bl	db14 <memcpy>
			rx_available -= len;
			rx_index[i] += len;
    e0f4:	ldr	r3, [sp, #4]
		 //printf("usb_serial_read, count=%d, size=%d, i=%d, index=%d, len=%d, avail=%d, c=%c\n",
		  //count, size, i, rx_index[i], len, avail, rx_buffer[i * CDC_RX_SIZE_480]);
		if (avail > len) {
			// partially consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
			rx_available -= len;
    e0f6:	ldr.w	r1, [fp]
    e0fa:	mov	r0, r9
			rx_index[i] += len;
    e0fc:	ldrh.w	r2, [r3, r5, lsl #1]
		 //printf("usb_serial_read, count=%d, size=%d, i=%d, index=%d, len=%d, avail=%d, c=%c\n",
		  //count, size, i, rx_index[i], len, avail, rx_buffer[i * CDC_RX_SIZE_480]);
		if (avail > len) {
			// partially consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
			rx_available -= len;
    e100:	rsb	r1, r8, r1
			rx_index[i] += len;
    e104:	add	r8, r2
		 //printf("usb_serial_read, count=%d, size=%d, i=%d, index=%d, len=%d, avail=%d, c=%c\n",
		  //count, size, i, rx_index[i], len, avail, rx_buffer[i * CDC_RX_SIZE_480]);
		if (avail > len) {
			// partially consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
			rx_available -= len;
    e106:	str.w	r1, [fp]
			rx_index[i] += len;
    e10a:	strh.w	r8, [r3, r5, lsl #1]
			count += avail;
			rx_tail = tail;
			rx_queue_transfer(i);
		}
	}
	NVIC_ENABLE_IRQ(IRQ_USB1);
    e10e:	ldr	r3, [pc, #92]	; (e16c <usb_serial_read+0xe4>)
    e110:	mov.w	r2, #131072	; 0x20000
    e114:	str	r2, [r3, #0]
	return count;
}
    e116:	add	sp, #12
    e118:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    e11c:	bl	db14 <memcpy>
			p += avail;
			rx_available -= avail;
    e120:	ldr.w	r2, [fp]
			count += avail;
			rx_tail = tail;
    e124:	uxtb	r3, r4
			rx_queue_transfer(i);
    e126:	mov	r0, r5
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
			p += avail;
			rx_available -= avail;
    e128:	subs	r2, r2, r6
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
			p += avail;
    e12a:	add	sl, r6
			rx_available -= avail;
    e12c:	str.w	r2, [fp]
			count += avail;
			rx_tail = tail;
    e130:	ldr	r2, [pc, #32]	; (e154 <usb_serial_read+0xcc>)
    e132:	strb	r3, [r2, #0]
			rx_queue_transfer(i);
    e134:	bl	dc48 <rx_queue_transfer>

	NVIC_DISABLE_IRQ(IRQ_USB1);
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
    e138:	cmp	r9, r7
    e13a:	bls.n	e144 <usb_serial_read+0xbc>
    e13c:	ldr	r3, [pc, #24]	; (e158 <usb_serial_read+0xd0>)
    e13e:	ldrb	r3, [r3, #0]
    e140:	cmp	r4, r3
    e142:	bne.n	e0b2 <usb_serial_read+0x2a>
    e144:	mov	r0, r7
    e146:	b.n	e10e <usb_serial_read+0x86>
    e148:	mov	r0, r1
    e14a:	b.n	e10e <usb_serial_read+0x86>
    e14c:	movs	r0, #0
    e14e:	b.n	e10e <usb_serial_read+0x86>
    e150:	.word	0xe000e18c
    e154:	.word	0x200446a0
    e158:	.word	0x200446c4
    e15c:	.word	0x2004457c
    e160:	.word	0x200446a4
    e164:	.word	0x200446b0
    e168:	.word	0x20200000
    e16c:	.word	0xe000e10c
    e170:	.word	0x200446c0

0000e174 <usb_serial_peekchar>:
}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
    e174:	ldr	r3, [pc, #44]	; (e1a4 <usb_serial_peekchar+0x30>)
	if (tail == rx_head) return -1;
    e176:	ldr	r2, [pc, #48]	; (e1a8 <usb_serial_peekchar+0x34>)
}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
    e178:	ldrb	r3, [r3, #0]
	if (tail == rx_head) return -1;
    e17a:	ldrb	r2, [r2, #0]
}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
    e17c:	uxtb	r3, r3
	if (tail == rx_head) return -1;
    e17e:	cmp	r3, r2
    e180:	beq.n	e19e <usb_serial_peekchar+0x2a>
	if (++tail > RX_NUM) tail = 0;
    e182:	adds	r3, #1
	uint32_t i = rx_list[tail];
    e184:	ldr	r0, [pc, #36]	; (e1ac <usb_serial_peekchar+0x38>)
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    e186:	ldr	r2, [pc, #40]	; (e1b0 <usb_serial_peekchar+0x3c>)
// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
	if (tail == rx_head) return -1;
	if (++tail > RX_NUM) tail = 0;
    e188:	cmp	r3, #9
	uint32_t i = rx_list[tail];
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    e18a:	ldr	r1, [pc, #40]	; (e1b4 <usb_serial_peekchar+0x40>)
// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
	if (tail == rx_head) return -1;
	if (++tail > RX_NUM) tail = 0;
    e18c:	it	cs
    e18e:	movcs	r3, #0
	uint32_t i = rx_list[tail];
    e190:	ldrb	r3, [r0, r3]
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    e192:	ldrh.w	r1, [r1, r3, lsl #1]
    e196:	add.w	r3, r2, r3, lsl #9
    e19a:	ldrb	r0, [r3, r1]
    e19c:	bx	lr

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
	if (tail == rx_head) return -1;
    e19e:	mov.w	r0, #4294967295
	if (++tail > RX_NUM) tail = 0;
	uint32_t i = rx_list[tail];
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
}
    e1a2:	bx	lr
    e1a4:	.word	0x200446a0
    e1a8:	.word	0x200446c4
    e1ac:	.word	0x200446a4
    e1b0:	.word	0x20200000
    e1b4:	.word	0x2004457c

0000e1b8 <usb_serial_available>:

// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	return rx_available;
    e1b8:	ldr	r3, [pc, #4]	; (e1c0 <usb_serial_available+0x8>)
    e1ba:	ldr	r0, [r3, #0]
}
    e1bc:	bx	lr
    e1be:	nop
    e1c0:	.word	0x200446c0

0000e1c4 <usb_serial_flush_input>:

// discard any buffered input
void usb_serial_flush_input(void)
{
    e1c4:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t tail = rx_tail;
    e1c8:	ldr	r6, [pc, #84]	; (e220 <usb_serial_flush_input+0x5c>)
	while (tail != rx_head) {
    e1ca:	ldr	r5, [pc, #88]	; (e224 <usb_serial_flush_input+0x60>)
}

// discard any buffered input
void usb_serial_flush_input(void)
{
	uint32_t tail = rx_tail;
    e1cc:	ldrb	r4, [r6, #0]
	while (tail != rx_head) {
    e1ce:	ldrb	r3, [r5, #0]
}

// discard any buffered input
void usb_serial_flush_input(void)
{
	uint32_t tail = rx_tail;
    e1d0:	uxtb	r4, r4
	while (tail != rx_head) {
    e1d2:	cmp	r4, r3
    e1d4:	beq.n	e21a <usb_serial_flush_input+0x56>
    e1d6:	ldr.w	r9, [pc, #84]	; e22c <usb_serial_flush_input+0x68>
    e1da:	ldr.w	fp, [pc, #84]	; e230 <usb_serial_flush_input+0x6c>
    e1de:	ldr.w	r8, [pc, #84]	; e234 <usb_serial_flush_input+0x70>
    e1e2:	ldr	r7, [pc, #68]	; (e228 <usb_serial_flush_input+0x64>)
		if (++tail > RX_NUM) tail = 0;
    e1e4:	adds	r4, #1
    e1e6:	cmp	r4, #8
    e1e8:	uxtb.w	sl, r4
    e1ec:	bls.n	e1f2 <usb_serial_flush_input+0x2e>
    e1ee:	movs	r4, #0
    e1f0:	mov	sl, r4
		uint32_t i = rx_list[tail];
    e1f2:	ldrb.w	r1, [r9, r4]
		rx_available -= rx_count[i] - rx_index[i];
    e1f6:	ldr.w	r2, [fp]
    e1fa:	ldrh.w	r3, [r8, r1, lsl #1]
		rx_queue_transfer(i);
    e1fe:	mov	r0, r1
{
	uint32_t tail = rx_tail;
	while (tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
		rx_available -= rx_count[i] - rx_index[i];
    e200:	ldrh.w	r1, [r7, r1, lsl #1]
    e204:	subs	r3, r3, r1
    e206:	subs	r3, r2, r3
    e208:	str.w	r3, [fp]
		rx_queue_transfer(i);
    e20c:	bl	dc48 <rx_queue_transfer>
		rx_tail = tail;
    e210:	strb.w	sl, [r6]

// discard any buffered input
void usb_serial_flush_input(void)
{
	uint32_t tail = rx_tail;
	while (tail != rx_head) {
    e214:	ldrb	r3, [r5, #0]
    e216:	cmp	r4, r3
    e218:	bne.n	e1e4 <usb_serial_flush_input+0x20>
    e21a:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e21e:	nop
    e220:	.word	0x200446a0
    e224:	.word	0x200446c4
    e228:	.word	0x2004457c
    e22c:	.word	0x200446a4
    e230:	.word	0x200446c0
    e234:	.word	0x200446b0

0000e238 <usb_serial_getchar>:
}


// get the next character, or -1 if nothing received
int usb_serial_getchar(void)
{
    e238:	push	{lr}
    e23a:	sub	sp, #12
	uint8_t c;
	if (usb_serial_read(&c, 1)) return c;
    e23c:	movs	r1, #1
    e23e:	add.w	r0, sp, #7
    e242:	bl	e088 <usb_serial_read>
    e246:	cbz	r0, e252 <usb_serial_getchar+0x1a>
    e248:	ldrb.w	r0, [sp, #7]
	return -1;
}
    e24c:	add	sp, #12
    e24e:	ldr.w	pc, [sp], #4
// get the next character, or -1 if nothing received
int usb_serial_getchar(void)
{
	uint8_t c;
	if (usb_serial_read(&c, 1)) return c;
	return -1;
    e252:	mov.w	r0, #4294967295
    e256:	b.n	e24c <usb_serial_getchar+0x14>

0000e258 <usb_serial_putchar>:
int usb_serial_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
    e258:	ldr	r3, [pc, #36]	; (e280 <usb_serial_putchar+0x28>)
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    e25a:	push	{lr}
    e25c:	sub	sp, #12
int usb_serial_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
    e25e:	ldrb	r3, [r3, #0]
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    e260:	strb.w	r0, [sp, #7]
int usb_serial_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
    e264:	cbnz	r3, e270 <usb_serial_putchar+0x18>
    e266:	and.w	r0, r3, #255	; 0xff

// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
	return usb_serial_write(&c, 1);
}
    e26a:	add	sp, #12
    e26c:	ldr.w	pc, [sp], #4
    e270:	movs	r1, #1
    e272:	add.w	r0, sp, #7
    e276:	bl	de00 <usb_serial_write.part.1>
    e27a:	add	sp, #12
    e27c:	ldr.w	pc, [sp], #4
    e280:	.word	0x20044798

0000e284 <usb_serial_write>:
int usb_serial_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
    e284:	ldr	r3, [pc, #16]	; (e298 <usb_serial_write+0x14>)
    e286:	ldrb	r3, [r3, #0]
    e288:	and.w	r2, r3, #255	; 0xff
    e28c:	cbz	r3, e292 <usb_serial_write+0xe>
    e28e:	b.w	de00 <usb_serial_write.part.1>
			size = 0;
			timer_start_oneshot();
		}
	}
	return sent;
}
    e292:	mov	r0, r2
    e294:	bx	lr
    e296:	nop
    e298:	.word	0x20044798

0000e29c <usb_serial_write_buffer_free>:

int usb_serial_write_buffer_free(void)
{
    e29c:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t sum = 0;
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
    e2a0:	movs	r4, #0
}

int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
	tx_noautoflush = 1;
    e2a2:	ldr.w	r8, [pc, #64]	; e2e4 <usb_serial_write_buffer_free+0x48>
    e2a6:	movs	r3, #1
    e2a8:	ldr	r5, [pc, #48]	; (e2dc <usb_serial_write_buffer_free+0x40>)
	return sent;
}

int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
    e2aa:	mov	r7, r4
    e2ac:	ldr	r6, [pc, #48]	; (e2e0 <usb_serial_write_buffer_free+0x44>)
	tx_noautoflush = 1;
    e2ae:	strb.w	r3, [r8]
	for (uint32_t i=0; i < TX_NUM; i++) {
		if (i == tx_head) continue;
    e2b2:	ldrb	r3, [r6, #0]
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
    e2b4:	mov	r0, r5
    e2b6:	adds	r5, #32
int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
		if (i == tx_head) continue;
    e2b8:	cmp	r3, r4

int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
    e2ba:	add.w	r4, r4, #1
		if (i == tx_head) continue;
    e2be:	beq.n	e2cc <usb_serial_write_buffer_free+0x30>
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
    e2c0:	bl	ef4c <usb_transfer_status>
    e2c4:	lsls	r3, r0, #24
    e2c6:	it	pl
    e2c8:	addpl.w	r7, r7, #2048	; 0x800

int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
    e2cc:	cmp	r4, #4
    e2ce:	bne.n	e2b2 <usb_serial_write_buffer_free+0x16>
		if (i == tx_head) continue;
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
	}
	tx_noautoflush = 0;
    e2d0:	movs	r3, #0
	return sum;
}
    e2d2:	mov	r0, r7
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
		if (i == tx_head) continue;
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
	}
	tx_noautoflush = 0;
    e2d4:	strb.w	r3, [r8]
	return sum;
}
    e2d8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e2dc:	.word	0x200446e0
    e2e0:	.word	0x2004458f
    e2e4:	.word	0x2004458e

0000e2e8 <usb_serial_flush_output>:

void usb_serial_flush_output(void)
{
    e2e8:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

	if (!usb_configuration) return;
    e2ec:	ldr	r3, [pc, #124]	; (e36c <usb_serial_flush_output+0x84>)
    e2ee:	ldrb	r3, [r3, #0]
    e2f0:	cbz	r3, e2f8 <usb_serial_flush_output+0x10>
	if (tx_available == 0) return;
    e2f2:	ldr	r5, [pc, #124]	; (e370 <usb_serial_flush_output+0x88>)
    e2f4:	ldrh	r2, [r5, #0]
    e2f6:	cbnz	r2, e2fc <usb_serial_flush_output+0x14>
    e2f8:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	tx_noautoflush = 1;
	transfer_t *xfer = tx_transfer + tx_head;
    e2fc:	ldr.w	r8, [pc, #132]	; e384 <usb_serial_flush_output+0x9c>
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
    e300:	rsb	r9, r2, #2048	; 0x800
{

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
	transfer_t *xfer = tx_transfer + tx_head;
    e304:	ldr	r6, [pc, #108]	; (e374 <usb_serial_flush_output+0x8c>)
void usb_serial_flush_output(void)
{

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
    e306:	mov.w	lr, #1
	transfer_t *xfer = tx_transfer + tx_head;
    e30a:	ldrb.w	r1, [r8]
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    e30e:	mov	r2, r9

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
	transfer_t *xfer = tx_transfer + tx_head;
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    e310:	ldr	r4, [pc, #100]	; (e378 <usb_serial_flush_output+0x90>)
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    e312:	movs	r3, #0
{

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
	transfer_t *xfer = tx_transfer + tx_head;
    e314:	add.w	r6, r6, r1, lsl #5
void usb_serial_flush_output(void)
{

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
    e318:	ldr	r7, [pc, #96]	; (e37c <usb_serial_flush_output+0x94>)
	transfer_t *xfer = tx_transfer + tx_head;
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    e31a:	add.w	r4, r4, r1, lsl #11
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    e31e:	mov	r0, r6
void usb_serial_flush_output(void)
{

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
    e320:	strb.w	lr, [r7]
	transfer_t *xfer = tx_transfer + tx_head;
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    e324:	mov	r1, r4
    e326:	bl	eed0 <usb_prepare_transfer>
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
    e32a:	add.w	r2, r9, r4
// any cached data written to memory, and then removed from the cache,
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    e32e:	bic.w	r1, r4, #31
	uint32_t end_addr = (uint32_t)addr + size;
	asm volatile("": : :"memory");
	asm("dsb");
    e332:	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    e336:	ldr	r3, [pc, #72]	; (e380 <usb_serial_flush_output+0x98>)
    e338:	str	r1, [r3, #0]
		location += 32;
    e33a:	adds	r1, #32
	} while (location < end_addr);
    e33c:	cmp	r2, r1
    e33e:	bhi.n	e338 <usb_serial_flush_output+0x50>
	asm("dsb");
    e340:	dsb	sy
	asm("isb");
    e344:	isb	sy
	arm_dcache_flush_delete(txbuf, txnum);
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    e348:	movs	r0, #3
    e34a:	mov	r1, r6
    e34c:	bl	ef00 <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    e350:	ldrb.w	r3, [r8]
    e354:	ldr	r2, [pc, #44]	; (e384 <usb_serial_flush_output+0x9c>)
    e356:	adds	r3, #1
    e358:	uxtb	r3, r3
    e35a:	cmp	r3, #3
    e35c:	it	hi
    e35e:	movhi	r3, #0
    e360:	strb	r3, [r2, #0]
	tx_available = 0;
    e362:	movs	r3, #0
    e364:	strh	r3, [r5, #0]
	tx_noautoflush = 0;
    e366:	strb	r3, [r7, #0]
    e368:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    e36c:	.word	0x20044798
    e370:	.word	0x200446c6
    e374:	.word	0x200446e0
    e378:	.word	0x20201000
    e37c:	.word	0x2004458e
    e380:	.word	0xe000ef70
    e384:	.word	0x2004458f

0000e388 <set_arm_clock>:
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
    e388:	ldr	r2, [pc, #600]	; (e5e4 <set_arm_clock+0x25c>)
//  CCM_CBCDR  AHB_PODF
//  CCM_CBCDR  SEMC_PODF

uint32_t set_arm_clock(uint32_t frequency)
{
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    e38a:	ldr	r3, [pc, #604]	; (e5e8 <set_arm_clock+0x260>)
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
    e38c:	cmp	r0, r2
//  CCM_CBCMR  PERIPH2_CLK_SEL
//  CCM_CBCDR  AHB_PODF
//  CCM_CBCDR  SEMC_PODF

uint32_t set_arm_clock(uint32_t frequency)
{
    e38e:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;
    e392:	ldr	r4, [pc, #600]	; (e5ec <set_arm_clock+0x264>)
//  CCM_CBCDR  AHB_PODF
//  CCM_CBCDR  SEMC_PODF

uint32_t set_arm_clock(uint32_t frequency)
{
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    e394:	ldr.w	lr, [r3, #20]
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
    e398:	ldr	r1, [r3, #24]
	uint32_t dcdc = DCDC_REG3;
    e39a:	ldr	r6, [r4, #12]

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
    e39c:	bls.n	e3d8 <set_arm_clock+0x50>
		voltage = 1250; // 1.25V
#if defined(OVERCLOCK_STEPSIZE) && defined(OVERCLOCK_MAX_VOLT)
		if (frequency > 600000000) {
    e39e:	ldr	r3, [pc, #592]	; (e5f0 <set_arm_clock+0x268>)
    e3a0:	cmp	r0, r3
    e3a2:	bls.w	e5d0 <set_arm_clock+0x248>
			voltage += ((frequency - 600000000) / OVERCLOCK_STEPSIZE) * 25;
    e3a6:	ldr	r3, [pc, #588]	; (e5f4 <set_arm_clock+0x26c>)
    e3a8:	movw	r5, #1575	; 0x627
    e3ac:	ldr	r7, [pc, #584]	; (e5f8 <set_arm_clock+0x270>)
    e3ae:	add	r3, r0
    e3b0:	ldr	r4, [pc, #584]	; (e5fc <set_arm_clock+0x274>)
    e3b2:	lsrs	r2, r3, #8
    e3b4:	umull	r3, r2, r7, r2
    e3b8:	lsrs	r3, r2, #7
    e3ba:	add.w	r3, r3, r3, lsl #2
    e3be:	add.w	r2, r3, r3, lsl #2
    e3c2:	addw	r3, r2, #1250	; 0x4e2
    e3c6:	cmp	r3, r5
    e3c8:	it	cs
    e3ca:	movcs	r3, r5
    e3cc:	sub.w	r3, r3, #800	; 0x320
    e3d0:	umull	r3, r5, r4, r3
    e3d4:	lsrs	r5, r5, #3
    e3d6:	b.n	e3e2 <set_arm_clock+0x5a>
			if (voltage > OVERCLOCK_MAX_VOLT) voltage = OVERCLOCK_MAX_VOLT;
		}
#endif
	} else if (frequency <= 24000000) {
    e3d8:	ldr	r5, [pc, #548]	; (e600 <set_arm_clock+0x278>)
    e3da:	cmp	r0, r5
    e3dc:	ite	ls
    e3de:	movls	r5, #6
    e3e0:	movhi	r5, #14
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    e3e2:	ldr	r2, [pc, #516]	; (e5e8 <set_arm_clock+0x260>)
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    e3e4:	and.w	r7, r6, #31
	} else if (frequency <= 24000000) {
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    e3e8:	ldr.w	r3, [r2, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    e3ec:	cmp	r7, r5
	} else if (frequency <= 24000000) {
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    e3ee:	orr.w	r3, r3, #192	; 0xc0
    e3f2:	str.w	r3, [r2, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    e3f6:	bcs.n	e40e <set_arm_clock+0x86>
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    e3f8:	ldr	r3, [pc, #496]	; (e5ec <set_arm_clock+0x264>)

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    e3fa:	bic.w	r6, r6, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    e3fe:	mov	r2, r3
	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    e400:	orrs	r6, r5
		DCDC_REG3 = dcdc;
    e402:	str	r6, [r3, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    e404:	ldr	r3, [r2, #0]
    e406:	cmp	r3, #0
    e408:	bge.n	e404 <set_arm_clock+0x7c>
    e40a:	and.w	r7, r6, #31
	}

	if (!(cbcdr & CCM_CBCDR_PERIPH_CLK_SEL)) {
    e40e:	ands.w	r3, lr, #33554432	; 0x2000000
    e412:	bne.n	e478 <set_arm_clock+0xf0>
		printf("need to switch to alternate clock during reconfigure of ARM PLL\n");
		const uint32_t need1s = CCM_ANALOG_PLL_USB1_ENABLE | CCM_ANALOG_PLL_USB1_POWER |
			CCM_ANALOG_PLL_USB1_LOCK | CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
		uint32_t sel, div;
		if ((CCM_ANALOG_PLL_USB1 & need1s) == need1s) {
    e414:	ldr	r4, [pc, #492]	; (e604 <set_arm_clock+0x27c>)
    e416:	ldr	r2, [pc, #496]	; (e608 <set_arm_clock+0x280>)
    e418:	ldr.w	ip, [r4, #16]
    e41c:	mov	r4, r2
    e41e:	and.w	r2, ip, r2
    e422:	cmp	r2, r4
    e424:	itet	eq
    e426:	moveq.w	r3, #402653184	; 0x18000000
    e42a:	movne.w	r2, #4096	; 0x1000
    e42e:	moveq	r2, #0
		} else {
			printf("USB PLL is off, use 24 MHz crystal\n");
			sel = 1;
			div = 0;
		}
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
    e430:	eor.w	r4, lr, r3
    e434:	tst.w	r4, #939524096	; 0x38000000
    e438:	beq.n	e44c <set_arm_clock+0xc4>
			// PERIPH_CLK2 divider needs to be changed
			cbcdr &= ~CCM_CBCDR_PERIPH_CLK2_PODF_MASK;
    e43a:	bic.w	lr, lr, #939524096	; 0x38000000
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
    e43e:	and.w	r3, r3, #939524096	; 0x38000000
			CCM_CBCDR = cbcdr;
    e442:	ldr	r4, [pc, #420]	; (e5e8 <set_arm_clock+0x260>)
			div = 0;
		}
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
			// PERIPH_CLK2 divider needs to be changed
			cbcdr &= ~CCM_CBCDR_PERIPH_CLK2_PODF_MASK;
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
    e444:	orr.w	lr, r3, lr
			CCM_CBCDR = cbcdr;
    e448:	str.w	lr, [r4, #20]
		}
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
    e44c:	eor.w	r3, r1, r2
    e450:	tst.w	r3, #12288	; 0x3000
    e454:	beq.n	e468 <set_arm_clock+0xe0>
			// PERIPH_CLK2 source select needs to be changed
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
			CCM_CBCMR = cbcmr;
    e456:	ldr	r3, [pc, #400]	; (e5e8 <set_arm_clock+0x260>)
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
			CCM_CBCDR = cbcdr;
		}
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
			// PERIPH_CLK2 source select needs to be changed
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
    e458:	bic.w	r1, r1, #12288	; 0x3000
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
    e45c:	orrs	r1, r2
			CCM_CBCMR = cbcmr;
			while (CCM_CDHIPR & CCM_CDHIPR_PERIPH2_CLK_SEL_BUSY) ; // wait
    e45e:	mov	r2, r3
		}
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
			// PERIPH_CLK2 source select needs to be changed
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
			CCM_CBCMR = cbcmr;
    e460:	str	r1, [r3, #24]
			while (CCM_CDHIPR & CCM_CDHIPR_PERIPH2_CLK_SEL_BUSY) ; // wait
    e462:	ldr	r3, [r2, #72]	; 0x48
    e464:	lsls	r4, r3, #28
    e466:	bmi.n	e462 <set_arm_clock+0xda>
		}
		// switch over to PERIPH_CLK2
		cbcdr |= CCM_CBCDR_PERIPH_CLK_SEL;
    e468:	orr.w	lr, lr, #33554432	; 0x2000000
		CCM_CBCDR = cbcdr;
    e46c:	ldr	r2, [pc, #376]	; (e5e8 <set_arm_clock+0x260>)
    e46e:	str.w	lr, [r2, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    e472:	ldr	r3, [r2, #72]	; 0x48
    e474:	lsls	r1, r3, #26
    e476:	bmi.n	e472 <set_arm_clock+0xea>

	// TODO: check if PLL2 running, can 352, 396 or 528 can work? (no need for ARM PLL)

	// DIV_SELECT: 54-108 = official range 648 to 1296 in 12 MHz steps
	uint32_t div_arm = 1;
	uint32_t div_ahb = 1;
    e478:	movs	r1, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    e47a:	ldr	r4, [pc, #400]	; (e60c <set_arm_clock+0x284>)
	}

	// TODO: check if PLL2 running, can 352, 396 or 528 can work? (no need for ARM PLL)

	// DIV_SELECT: 54-108 = official range 648 to 1296 in 12 MHz steps
	uint32_t div_arm = 1;
    e47c:	mov	r2, r1
	uint32_t div_ahb = 1;
	while (frequency * div_arm * div_ahb < 648000000) {
    e47e:	mul.w	r3, r1, r2
    e482:	mul.w	r3, r0, r3
    e486:	cmp	r3, r4
    e488:	bhi.n	e49e <set_arm_clock+0x116>
		if (div_arm < 8) {
    e48a:	cmp	r2, #7
    e48c:	bhi.w	e5ba <set_arm_clock+0x232>
			div_arm = div_arm + 1;
    e490:	adds	r2, #1
	// TODO: check if PLL2 running, can 352, 396 or 528 can work? (no need for ARM PLL)

	// DIV_SELECT: 54-108 = official range 648 to 1296 in 12 MHz steps
	uint32_t div_arm = 1;
	uint32_t div_ahb = 1;
	while (frequency * div_arm * div_ahb < 648000000) {
    e492:	mul.w	r3, r1, r2
    e496:	mul.w	r3, r0, r3
    e49a:	cmp	r3, r4
    e49c:	bls.n	e48a <set_arm_clock+0x102>
			} else {
				break;
			}
		}
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    e49e:	ldr	r0, [pc, #368]	; (e610 <set_arm_clock+0x288>)
    e4a0:	ldr	r4, [pc, #368]	; (e614 <set_arm_clock+0x28c>)
    e4a2:	add	r0, r3
    e4a4:	umull	r0, r3, r4, r0
    e4a8:	lsrs	r3, r3, #20
	if (mult > 108) mult = 108;
    e4aa:	cmp	r3, #108	; 0x6c
    e4ac:	bhi.w	e5c6 <set_arm_clock+0x23e>
	if (mult < 54) mult = 54;
    e4b0:	cmp	r3, #53	; 0x35
    e4b2:	bhi.w	e5d4 <set_arm_clock+0x24c>
    e4b6:	ldr.w	r8, [pc, #392]	; e640 <set_arm_clock+0x2b8>
    e4ba:	movs	r3, #54	; 0x36
    e4bc:	ldr	r0, [pc, #344]	; (e618 <set_arm_clock+0x290>)

	printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	const uint32_t arm_pll_mask = CCM_ANALOG_PLL_ARM_LOCK | CCM_ANALOG_PLL_ARM_BYPASS |
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    e4be:	ldr.w	ip, [pc, #324]	; e604 <set_arm_clock+0x27c>
    e4c2:	ldr	r4, [pc, #344]	; (e61c <set_arm_clock+0x294>)
    e4c4:	ldr.w	r9, [ip]
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
	if (mult > 108) mult = 108;
	if (mult < 54) mult = 54;
	printf("Freq: 12 MHz * %u / %u / %u\n", mult, div_arm, div_ahb);
	frequency = mult * 12000000 / div_arm / div_ahb;
    e4c8:	udiv	r0, r0, r2

	printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	const uint32_t arm_pll_mask = CCM_ANALOG_PLL_ARM_LOCK | CCM_ANALOG_PLL_ARM_BYPASS |
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    e4cc:	and.w	r4, r9, r4
    e4d0:	cmp	r4, r8
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
	if (mult > 108) mult = 108;
	if (mult < 54) mult = 54;
	printf("Freq: 12 MHz * %u / %u / %u\n", mult, div_arm, div_ahb);
	frequency = mult * 12000000 / div_arm / div_ahb;
    e4d2:	udiv	r0, r0, r1

	printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	const uint32_t arm_pll_mask = CCM_ANALOG_PLL_ARM_LOCK | CCM_ANALOG_PLL_ARM_BYPASS |
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    e4d6:	beq.n	e4f0 <set_arm_clock+0x168>
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
		printf("ARM PLL needs reconfigure\n");
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
		// TODO: delay needed?
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
    e4d8:	orr.w	r3, r3, #8192	; 0x2000
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
		printf("ARM PLL needs reconfigure\n");
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
    e4dc:	mov.w	r8, #4096	; 0x1000
		// TODO: delay needed?
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
		while (!(CCM_ANALOG_PLL_ARM & CCM_ANALOG_PLL_ARM_LOCK)) ; // wait for lock
    e4e0:	mov	r4, ip
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
		printf("ARM PLL needs reconfigure\n");
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
    e4e2:	str.w	r8, [ip]
		// TODO: delay needed?
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
    e4e6:	str.w	r3, [ip]
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
		while (!(CCM_ANALOG_PLL_ARM & CCM_ANALOG_PLL_ARM_LOCK)) ; // wait for lock
    e4ea:	ldr	r3, [r4, #0]
    e4ec:	cmp	r3, #0
    e4ee:	bge.n	e4ea <set_arm_clock+0x162>
		printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	} else {
		printf("ARM PLL already running at required frequency\n");
	}

	if ((CCM_CACRR & CCM_CACRR_ARM_PODF_MASK) != (div_arm - 1)) {
    e4f0:	ldr.w	ip, [pc, #244]	; e5e8 <set_arm_clock+0x260>
    e4f4:	subs	r2, #1
    e4f6:	ldr.w	r3, [ip, #16]
    e4fa:	and.w	r3, r3, #7
    e4fe:	cmp	r3, r2
    e500:	beq.n	e512 <set_arm_clock+0x18a>
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
    e502:	and.w	r2, r2, #7
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
    e506:	mov	r4, ip
	} else {
		printf("ARM PLL already running at required frequency\n");
	}

	if ((CCM_CACRR & CCM_CACRR_ARM_PODF_MASK) != (div_arm - 1)) {
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
    e508:	str.w	r2, [ip, #16]
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
    e50c:	ldr	r3, [r4, #72]	; 0x48
    e50e:	lsls	r3, r3, #15
    e510:	bmi.n	e50c <set_arm_clock+0x184>
	}

	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    e512:	subs	r1, #1
    e514:	lsls	r1, r1, #10
    e516:	eor.w	r3, lr, r1
    e51a:	tst.w	r3, #7168	; 0x1c00
    e51e:	beq.n	e53a <set_arm_clock+0x1b2>
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
		CCM_CBCDR = cbcdr;
    e520:	ldr	r3, [pc, #196]	; (e5e8 <set_arm_clock+0x260>)
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
	}

	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
    e522:	bic.w	lr, lr, #7168	; 0x1c00
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    e526:	and.w	r1, r1, #7168	; 0x1c00
		CCM_CBCDR = cbcdr;
		while (CCM_CDHIPR & CCM_CDHIPR_AHB_PODF_BUSY); // wait
    e52a:	mov	r2, r3
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
	}

	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    e52c:	orr.w	lr, r1, lr
		CCM_CBCDR = cbcdr;
    e530:	str.w	lr, [r3, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_AHB_PODF_BUSY); // wait
    e534:	ldr	r3, [r2, #72]	; 0x48
    e536:	lsls	r1, r3, #30
    e538:	bmi.n	e534 <set_arm_clock+0x1ac>
	}

	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    e53a:	ldr	r3, [pc, #228]	; (e620 <set_arm_clock+0x298>)
    e53c:	ldr	r1, [pc, #228]	; (e624 <set_arm_clock+0x29c>)
    e53e:	add	r3, r0
    e540:	lsrs	r3, r3, #7
    e542:	umull	r3, r1, r1, r3
    e546:	lsrs	r1, r1, #12
    e548:	cmp	r1, #4
    e54a:	it	cs
    e54c:	movcs	r1, #4
	if (div_ipg > 4) div_ipg = 4;
	if ((cbcdr & CCM_CBCDR_IPG_PODF_MASK) != (CCM_CBCDR_IPG_PODF(div_ipg - 1))) {
    e54e:	subs	r3, r1, #1
    e550:	lsls	r3, r3, #8
    e552:	eor.w	r2, lr, r3
    e556:	tst.w	r2, #768	; 0x300
    e55a:	beq.n	e56c <set_arm_clock+0x1e4>
		cbcdr &= ~CCM_CBCDR_IPG_PODF_MASK;
    e55c:	bic.w	lr, lr, #768	; 0x300
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    e560:	and.w	r3, r3, #768	; 0x300
		// TODO: how to safely change IPG_PODF ??
		CCM_CBCDR = cbcdr;
    e564:	ldr	r2, [pc, #128]	; (e5e8 <set_arm_clock+0x260>)

	uint32_t div_ipg = (frequency + 149999999) / 150000000;
	if (div_ipg > 4) div_ipg = 4;
	if ((cbcdr & CCM_CBCDR_IPG_PODF_MASK) != (CCM_CBCDR_IPG_PODF(div_ipg - 1))) {
		cbcdr &= ~CCM_CBCDR_IPG_PODF_MASK;
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    e566:	orr.w	r3, r3, lr
		// TODO: how to safely change IPG_PODF ??
		CCM_CBCDR = cbcdr;
    e56a:	str	r3, [r2, #20]
	}

	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
    e56c:	ldr	r3, [pc, #120]	; (e5e8 <set_arm_clock+0x260>)
    e56e:	ldr	r4, [r3, #20]
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    e570:	mov	r2, r3
		CCM_CBCDR = cbcdr;
	}

	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
    e572:	bic.w	r4, r4, #33554432	; 0x2000000
    e576:	str	r4, [r3, #20]
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    e578:	ldr	r3, [r2, #72]	; 0x48
    e57a:	lsls	r3, r3, #26
    e57c:	bmi.n	e578 <set_arm_clock+0x1f0>

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    e57e:	ldr	r3, [pc, #168]	; (e628 <set_arm_clock+0x2a0>)
    e580:	mov.w	r2, #4294967295
	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
    e584:	ldr	r4, [pc, #164]	; (e62c <set_arm_clock+0x2a4>)
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);

	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    e586:	cmp	r5, r7
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    e588:	umull	lr, r3, r3, r0
	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
    e58c:	str	r0, [r4, #0]
	F_BUS_ACTUAL = frequency / div_ipg;
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    e58e:	mov.w	r3, r3, lsr #18
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
    e592:	ldr	r4, [pc, #156]	; (e630 <set_arm_clock+0x2a8>)
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    e594:	udiv	r3, r2, r3
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
    e598:	udiv	r1, r0, r1
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    e59c:	ldr	r2, [pc, #148]	; (e634 <set_arm_clock+0x2ac>)
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
    e59e:	str	r1, [r4, #0]
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    e5a0:	str	r3, [r2, #0]

	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    e5a2:	bcs.n	e5b6 <set_arm_clock+0x22e>
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    e5a4:	ldr	r3, [pc, #68]	; (e5ec <set_arm_clock+0x264>)
	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    e5a6:	bic.w	r6, r6, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    e5aa:	mov	r2, r3

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    e5ac:	orrs	r6, r5
		DCDC_REG3 = dcdc;
    e5ae:	str	r6, [r3, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    e5b0:	ldr	r3, [r2, #0]
    e5b2:	cmp	r3, #0
    e5b4:	bge.n	e5b0 <set_arm_clock+0x228>
	}

	return frequency;
}
    e5b6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	uint32_t div_ahb = 1;
	while (frequency * div_arm * div_ahb < 648000000) {
		if (div_arm < 8) {
			div_arm = div_arm + 1;
		} else {
			if (div_ahb < 5) {
    e5ba:	cmp	r1, #4
    e5bc:	bhi.w	e49e <set_arm_clock+0x116>
				div_ahb = div_ahb + 1;
    e5c0:	adds	r1, #1
				div_arm = 1;
    e5c2:	movs	r2, #1
    e5c4:	b.n	e47e <set_arm_clock+0xf6>
    e5c6:	ldr.w	r8, [pc, #124]	; e644 <set_arm_clock+0x2bc>
				break;
			}
		}
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
	if (mult > 108) mult = 108;
    e5ca:	movs	r3, #108	; 0x6c
    e5cc:	ldr	r0, [pc, #104]	; (e638 <set_arm_clock+0x2b0>)
    e5ce:	b.n	e4be <set_arm_clock+0x136>
    e5d0:	movs	r5, #18
    e5d2:	b.n	e3e2 <set_arm_clock+0x5a>
    e5d4:	ldr	r0, [pc, #100]	; (e63c <set_arm_clock+0x2b4>)
    e5d6:	ldr.w	r8, [pc, #112]	; e648 <set_arm_clock+0x2c0>
    e5da:	mul.w	r0, r0, r3
    e5de:	orr.w	r8, r3, r8
    e5e2:	b.n	e4be <set_arm_clock+0x136>
    e5e4:	.word	0x1f78a400
    e5e8:	.word	0x400fc000
    e5ec:	.word	0x40080000
    e5f0:	.word	0x23c34600
    e5f4:	.word	0xdc3cba00
    e5f8:	.word	0x004cb223
    e5fc:	.word	0x51eb851f
    e600:	.word	0x016e3600
    e604:	.word	0x400d8000
    e608:	.word	0x80003040
    e60c:	.word	0x269fb1ff
    e610:	.word	0x005b8d80
    e614:	.word	0x165e9f81
    e618:	.word	0x269fb200
    e61c:	.word	0x8001307f
    e620:	.word	0x08f0d17f
    e624:	.word	0x00e5109f
    e628:	.word	0x431bde83
    e62c:	.word	0x20000c2c
    e630:	.word	0x20000c28
    e634:	.word	0x200447a0
    e638:	.word	0x4d3f6400
    e63c:	.word	0x00b71b00
    e640:	.word	0x80002036
    e644:	.word	0x8000206c
    e648:	.word	0x80002000

0000e64c <schedule_transfer>:
{
	// when we stop at 6, why is the last transfer missing from the USB output?
	//if (transfer_log_count >= 6) return;

	//uint32_t ret = (*(const uint8_t *)transfer->pointer0) << 8;
	if (endpoint->callback_function) {
    e64c:	ldr	r3, [r0, #56]	; 0x38
	}
}
#endif

static void schedule_transfer(endpoint_t *endpoint, uint32_t epmask, transfer_t *transfer)
{
    e64e:	push	{r4, r5, r6, r7}
	// when we stop at 6, why is the last transfer missing from the USB output?
	//if (transfer_log_count >= 6) return;

	//uint32_t ret = (*(const uint8_t *)transfer->pointer0) << 8;
	if (endpoint->callback_function) {
    e650:	cbz	r3, e65a <schedule_transfer+0xe>
		transfer->status |= (1<<15);
    e652:	ldr	r3, [r2, #4]
    e654:	orr.w	r3, r3, #32768	; 0x8000
    e658:	str	r3, [r2, #4]
	}
	__disable_irq();
    e65a:	cpsid	i
	//digitalWriteFast(1, HIGH);
	// Executing A Transfer Descriptor, page 2468 (RT1060 manual, Rev 1, 12/2018)
	transfer_t *last = endpoint->last_transfer;
    e65c:	ldr	r4, [r0, #52]	; 0x34
	if (last) {
    e65e:	cbz	r4, e698 <schedule_transfer+0x4c>
		last->next = (uint32_t)transfer;
		if (USB1_ENDPTPRIME & epmask) goto end;
    e660:	ldr	r3, [pc, #80]	; (e6b4 <schedule_transfer+0x68>)
	__disable_irq();
	//digitalWriteFast(1, HIGH);
	// Executing A Transfer Descriptor, page 2468 (RT1060 manual, Rev 1, 12/2018)
	transfer_t *last = endpoint->last_transfer;
	if (last) {
		last->next = (uint32_t)transfer;
    e662:	str	r2, [r4, #0]
		if (USB1_ENDPTPRIME & epmask) goto end;
    e664:	ldr.w	r4, [r3, #432]	; 0x1b0
    e668:	tst	r4, r1
    e66a:	bne.n	e6ac <schedule_transfer+0x60>
		//digitalWriteFast(2, HIGH);
		//ret |= 0x01;
		uint32_t status, cyccnt=ARM_DWT_CYCCNT;
    e66c:	ldr	r5, [pc, #72]	; (e6b8 <schedule_transfer+0x6c>)
    e66e:	ldr	r7, [r5, #0]
    e670:	b.n	e67c <schedule_transfer+0x30>
		do {
			USB1_USBCMD |= USB_USBCMD_ATDTW;
			status = USB1_ENDPTSTATUS;
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
    e672:	ldr	r4, [r5, #0]
    e674:	subs	r4, r4, r7
    e676:	cmp.w	r4, #2400	; 0x960
    e67a:	bcs.n	e694 <schedule_transfer+0x48>
		if (USB1_ENDPTPRIME & epmask) goto end;
		//digitalWriteFast(2, HIGH);
		//ret |= 0x01;
		uint32_t status, cyccnt=ARM_DWT_CYCCNT;
		do {
			USB1_USBCMD |= USB_USBCMD_ATDTW;
    e67c:	ldr.w	r4, [r3, #320]	; 0x140
    e680:	orr.w	r4, r4, #16384	; 0x4000
    e684:	str.w	r4, [r3, #320]	; 0x140
			status = USB1_ENDPTSTATUS;
    e688:	ldr.w	r6, [r3, #440]	; 0x1b8
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
    e68c:	ldr.w	r4, [r3, #320]	; 0x140
    e690:	lsls	r4, r4, #17
    e692:	bpl.n	e672 <schedule_transfer+0x26>
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
    e694:	tst	r1, r6
    e696:	bne.n	e6ac <schedule_transfer+0x60>
		//ret |= 0x02;
	}
	//digitalWriteFast(4, HIGH);
	endpoint->next = (uint32_t)transfer;
	endpoint->status = 0;
    e698:	movs	r3, #0
	USB1_ENDPTPRIME |= epmask;
    e69a:	ldr	r4, [pc, #24]	; (e6b4 <schedule_transfer+0x68>)
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
		//ret |= 0x02;
	}
	//digitalWriteFast(4, HIGH);
	endpoint->next = (uint32_t)transfer;
    e69c:	str	r2, [r0, #8]
	endpoint->status = 0;
    e69e:	str	r3, [r0, #12]
	USB1_ENDPTPRIME |= epmask;
    e6a0:	ldr.w	r3, [r4, #432]	; 0x1b0
    e6a4:	orrs	r1, r3
    e6a6:	str.w	r1, [r4, #432]	; 0x1b0
	endpoint->first_transfer = transfer;
    e6aa:	str	r2, [r0, #48]	; 0x30
end:
	endpoint->last_transfer = transfer;
    e6ac:	str	r2, [r0, #52]	; 0x34
	__enable_irq();
    e6ae:	cpsie	i
	//digitalWriteFast(2, LOW);
	//digitalWriteFast(1, LOW);
	//if (transfer_log_head > LOG_SIZE) transfer_log_head = 0;
	//transfer_log[transfer_log_head++] = ret;
	//transfer_log_count++;
}
    e6b0:	pop	{r4, r5, r6, r7}
    e6b2:	bx	lr
    e6b4:	.word	0x402e0000
    e6b8:	.word	0xe0001004

0000e6bc <run_callbacks>:
	void (*callback_function)(transfer_t *completed_transfer);
	uint32_t unused1;
};*/

static void run_callbacks(endpoint_t *ep)
{
    e6bc:	push	{r4, r5, r6, lr}
    e6be:	mov	r6, r0
	//printf("run_callbacks\n");
	transfer_t *first = ep->first_transfer;
    e6c0:	ldr	r0, [r0, #48]	; 0x30
	if (first == NULL) return;
    e6c2:	cbz	r0, e6ea <run_callbacks+0x2e>
    e6c4:	mov	r2, r0
    e6c6:	movs	r4, #0
    e6c8:	b.n	e6d2 <run_callbacks+0x16>
			//printf(" still active\n");
			ep->first_transfer = t;
			break;
		}
		count++;
		t = (transfer_t *)t->next;
    e6ca:	ldr	r2, [r2, #0]
			// found a still-active transfer, new list begins here
			//printf(" still active\n");
			ep->first_transfer = t;
			break;
		}
		count++;
    e6cc:	adds	r4, #1
		t = (transfer_t *)t->next;
		if ((uint32_t)t == 1) {
    e6ce:	cmp	r2, #1
    e6d0:	beq.n	e6ec <run_callbacks+0x30>

	// count how many transfers are completed, then remove them from the endpoint's list
	uint32_t count = 0;
	transfer_t *t = first;
	while (1) {
		if (t->status & (1<<7)) {
    e6d2:	ldr	r3, [r2, #4]
    e6d4:	ands.w	r3, r3, #128	; 0x80
    e6d8:	beq.n	e6ca <run_callbacks+0xe>
			// found a still-active transfer, new list begins here
			//printf(" still active\n");
			ep->first_transfer = t;
    e6da:	str	r2, [r6, #48]	; 0x30
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
    e6dc:	cbz	r4, e6ea <run_callbacks+0x2e>
		transfer_t *next = (transfer_t *)first->next;
		ep->callback_function(first);
    e6de:	ldr	r3, [r6, #56]	; 0x38
			break;
		}
	}
	// do all the callbacks
	while (count) {
		transfer_t *next = (transfer_t *)first->next;
    e6e0:	ldr	r5, [r0, #0]
		ep->callback_function(first);
    e6e2:	blx	r3
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
    e6e4:	subs	r4, #1
		transfer_t *next = (transfer_t *)first->next;
		ep->callback_function(first);
		first = next;
    e6e6:	mov	r0, r5
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
    e6e8:	bne.n	e6de <run_callbacks+0x22>
    e6ea:	pop	{r4, r5, r6, pc}
		count++;
		t = (transfer_t *)t->next;
		if ((uint32_t)t == 1) {
			// reached end of list, all need callbacks, new list is empty
			//printf(" end of list\n");
			ep->first_transfer = NULL;
    e6ec:	str	r3, [r6, #48]	; 0x30
			ep->last_transfer = NULL;
    e6ee:	str	r3, [r6, #52]	; 0x34
			break;
    e6f0:	b.n	e6dc <run_callbacks+0x20>
    e6f2:	nop

0000e6f4 <endpoint0_transmit.constprop.1>:
#endif
	}
	USB1_ENDPTCTRL0 = 0x000010001; // stall
}

static void endpoint0_transmit(const void *data, uint32_t len, int notify)
    e6f4:	push	{r4, r5, r6, r7, lr}
{
	//printf("tx %lu\n", len);
	if (len > 0) {
    e6f6:	cbnz	r1, e732 <endpoint0_transmit.constprop.1+0x3e>
    e6f8:	ldr	r4, [pc, #132]	; (e780 <endpoint0_transmit.constprop.1+0x8c>)
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    e6fa:	ldr	r1, [pc, #136]	; (e784 <endpoint0_transmit.constprop.1+0x90>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    e6fc:	movs	r0, #0
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    e6fe:	ldr	r3, [pc, #136]	; (e788 <endpoint0_transmit.constprop.1+0x94>)
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    e700:	movs	r2, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    e702:	mov.w	r5, #65537	; 0x10001
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    e706:	movs	r6, #128	; 0x80
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    e708:	str	r2, [r1, #0]
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<0);
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
	while (USB1_ENDPTPRIME) ;
    e70a:	mov	r2, r3
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
    e70c:	str	r1, [r4, #8]
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    e70e:	str	r6, [r1, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
    e710:	str	r0, [r4, #12]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    e712:	str.w	r5, [r3, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<0);
    e716:	ldr.w	r4, [r3, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    e71a:	ldr	r5, [pc, #112]	; (e78c <endpoint0_transmit.constprop.1+0x98>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<0);
    e71c:	orr.w	r4, r4, #1
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    e720:	str	r0, [r1, #8]
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<0);
    e722:	str.w	r4, [r3, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    e726:	str	r0, [r5, #0]
	while (USB1_ENDPTPRIME) ;
    e728:	ldr.w	r3, [r2, #432]	; 0x1b0
    e72c:	cmp	r3, #0
    e72e:	bne.n	e728 <endpoint0_transmit.constprop.1+0x34>
}
    e730:	pop	{r4, r5, r6, r7, pc}
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    e732:	lsls	r1, r1, #16
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    e734:	ldr	r3, [pc, #88]	; (e790 <endpoint0_transmit.constprop.1+0x9c>)
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    e736:	ldr	r5, [pc, #80]	; (e788 <endpoint0_transmit.constprop.1+0x94>)
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    e738:	movs	r6, #1
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    e73a:	ldr	r4, [pc, #68]	; (e780 <endpoint0_transmit.constprop.1+0x8c>)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    e73c:	orr.w	r1, r1, #128	; 0x80
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
    e740:	movs	r2, #0
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    e742:	str	r6, [r3, #0]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    e744:	str	r1, [r3, #4]
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
    e746:	add.w	ip, r0, #4096	; 0x1000
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
    e74a:	str	r2, [r4, #76]	; 0x4c
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
    e74c:	add.w	lr, r0, #8192	; 0x2000
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    e750:	str	r3, [r4, #72]	; 0x48
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
    e752:	add.w	r7, r0, #12288	; 0x3000
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    e756:	ldr.w	r1, [r5, #432]	; 0x1b0
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
    e75a:	add.w	r6, r0, #16384	; 0x4000
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
    e75e:	mov	r2, r5
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    e760:	str	r0, [r3, #8]
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    e762:	orr.w	r1, r1, #65536	; 0x10000
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
    e766:	str.w	ip, [r3, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    e76a:	str.w	lr, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    e76e:	str	r7, [r3, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
    e770:	str	r6, [r3, #24]
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    e772:	str.w	r1, [r5, #432]	; 0x1b0
		while (USB1_ENDPTPRIME) ;
    e776:	ldr.w	r3, [r2, #432]	; 0x1b0
    e77a:	cmp	r3, #0
    e77c:	bne.n	e776 <endpoint0_transmit.constprop.1+0x82>
    e77e:	b.n	e6fa <endpoint0_transmit.constprop.1+0x6>
    e780:	.word	0x20046000
    e784:	.word	0x20045020
    e788:	.word	0x402e0000
    e78c:	.word	0x20044774
    e790:	.word	0x20045000

0000e794 <isr>:
	//USB1_PORTSC1 |= USB_PORTSC1_PFSC; // force 12 Mbit/sec
}


static void isr(void)
{
    e794:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	//printf("*");

	//  Port control in device mode is only used for
	//  status port reset, suspend, and current connect status.
	uint32_t status = USB1_USBSTS;
    e798:	ldr	r4, [pc, #700]	; (ea58 <isr+0x2c4>)
	//USB1_PORTSC1 |= USB_PORTSC1_PFSC; // force 12 Mbit/sec
}


static void isr(void)
{
    e79a:	sub	sp, #12
	//printf("*");

	//  Port control in device mode is only used for
	//  status port reset, suspend, and current connect status.
	uint32_t status = USB1_USBSTS;
    e79c:	ldr.w	r8, [r4, #324]	; 0x144

	// USB_USBSTS_SLI - set to 1 when enters a suspend state from an active state
	// USB_USBSTS_SRI - set at start of frame
	// USB_USBSTS_SRI - set when USB reset detected

	if (status & USB_USBSTS_UI) {
    e7a0:	tst.w	r8, #1
	//printf("*");

	//  Port control in device mode is only used for
	//  status port reset, suspend, and current connect status.
	uint32_t status = USB1_USBSTS;
	USB1_USBSTS = status;
    e7a4:	str.w	r8, [r4, #324]	; 0x144

	// USB_USBSTS_SLI - set to 1 when enters a suspend state from an active state
	// USB_USBSTS_SRI - set at start of frame
	// USB_USBSTS_SRI - set when USB reset detected

	if (status & USB_USBSTS_UI) {
    e7a8:	beq.n	e868 <isr+0xd4>
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
    e7aa:	ldr.w	r3, [r4, #428]	; 0x1ac
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    e7ae:	cmp	r3, #0
    e7b0:	beq.n	e85e <isr+0xca>
				s.word1 = endpoint_queue_head[0].setup0;
				s.word2 = endpoint_queue_head[0].setup1;
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    e7b2:	mov.w	fp, #65537	; 0x10001
    e7b6:	ldr.w	r9, [pc, #712]	; ea80 <isr+0x2ec>
    e7ba:	ldr	r6, [pc, #672]	; (ea5c <isr+0x2c8>)
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
			USB1_ENDPTSETUPSTAT = setupstatus;
			setup_t s;
			do {
				USB1_USBCMD |= USB_USBCMD_SUTW;
    e7bc:	mov	r5, r4
				s.word1 = endpoint_queue_head[0].setup0;
				s.word2 = endpoint_queue_head[0].setup1;
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    e7be:	mov	sl, fp
	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
			USB1_ENDPTSETUPSTAT = setupstatus;
    e7c0:	str.w	r3, [r4, #428]	; 0x1ac
    e7c4:	ldr	r0, [r6, #40]	; 0x28
    e7c6:	ldr	r2, [r6, #44]	; 0x2c
			setup_t s;
			do {
				USB1_USBCMD |= USB_USBCMD_SUTW;
    e7c8:	ldr.w	r3, [r4, #320]	; 0x140
    e7cc:	orr.w	r3, r3, #8192	; 0x2000
    e7d0:	str.w	r3, [r4, #320]	; 0x140
				s.word1 = endpoint_queue_head[0].setup0;
				s.word2 = endpoint_queue_head[0].setup1;
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
    e7d4:	ldr.w	r3, [r4, #320]	; 0x140
    e7d8:	lsls	r7, r3, #18
    e7da:	bpl.n	e7c8 <isr+0x34>
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
    e7dc:	ldr.w	r3, [r5, #320]	; 0x140
    e7e0:	bic.w	r3, r3, #8192	; 0x2000
    e7e4:	str.w	r3, [r5, #320]	; 0x140
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    e7e8:	str.w	sl, [r5, #436]	; 0x1b4
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
    e7ec:	ldr.w	r3, [r4, #436]	; 0x1b4
    e7f0:	ands.w	r3, r3, #65537	; 0x10001
    e7f4:	bne.n	e7ec <isr+0x58>
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    e7f6:	uxth	r1, r0
    e7f8:	movw	r7, #1665	; 0x681
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
    e7fc:	str.w	r3, [r9]
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    e800:	cmp	r1, r7
    e802:	bhi.w	e96e <isr+0x1da>
    e806:	cmp.w	r1, #1664	; 0x680
    e80a:	bcs.w	ebe4 <isr+0x450>
    e80e:	cmp.w	r1, #258	; 0x102
    e812:	beq.w	eaf0 <isr+0x35c>
    e816:	bhi.w	ea06 <isr+0x272>
    e81a:	cmp	r1, #128	; 0x80
    e81c:	beq.w	ead6 <isr+0x342>
    e820:	cmp	r1, #130	; 0x82
    e822:	bne.w	e9f6 <isr+0x262>
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		endpoint0_transmit(reply_buffer, 2, 0);
		return;
	  case 0x0082: // GET_STATUS (endpoint)
		endpoint = setup.wIndex & 0x7F;
    e826:	uxth	r2, r2
    e828:	and.w	r1, r2, #127	; 0x7f
		if (endpoint > 7) break;
    e82c:	cmp	r1, #7
    e82e:	bhi.w	e9f6 <isr+0x262>
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
    e832:	lsls	r1, r1, #2
    e834:	ldr	r0, [pc, #552]	; (ea60 <isr+0x2cc>)
		reply_buffer[0] = 0;
    e836:	ldr	r7, [pc, #556]	; (ea64 <isr+0x2d0>)
		return;
	  case 0x0082: // GET_STATUS (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
    e838:	add	r0, r1
    e83a:	ldr	r1, [r0, #0]
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    e83c:	lsls	r0, r2, #24
	  case 0x0082: // GET_STATUS (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
		reply_buffer[0] = 0;
    e83e:	strb	r3, [r7, #0]
		reply_buffer[1] = 0;
    e840:	strb	r3, [r7, #1]
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    e842:	bpl.w	ec62 <isr+0x4ce>
    e846:	lsls	r2, r1, #15
    e848:	bpl.n	e84e <isr+0xba>
			reply_buffer[0] = 1;
    e84a:	movs	r3, #1
    e84c:	strb	r3, [r7, #0]
		}
		endpoint0_transmit(reply_buffer, 2, 0);
    e84e:	movs	r1, #2
    e850:	ldr	r0, [pc, #528]	; (ea64 <isr+0x2d0>)
    e852:	bl	e6f4 <endpoint0_transmit.constprop.1>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    e856:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    e85a:	cmp	r3, #0
    e85c:	bne.n	e7c0 <isr+0x2c>
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
		}
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
    e85e:	ldr	r2, [pc, #504]	; (ea58 <isr+0x2c4>)
    e860:	ldr.w	r3, [r2, #444]	; 0x1bc
		if (completestatus) {
    e864:	cmp	r3, #0
    e866:	bne.n	e90a <isr+0x176>
			}
#endif

		}
	}
	if (status & USB_USBSTS_URI) { // page 3164
    e868:	tst.w	r8, #64	; 0x40
    e86c:	beq.n	e8a0 <isr+0x10c>
		USB1_ENDPTSETUPSTAT = USB1_ENDPTSETUPSTAT; // Clear all setup token semaphores
    e86e:	ldr	r3, [pc, #488]	; (ea58 <isr+0x2c4>)
    e870:	ldr.w	r1, [r3, #428]	; 0x1ac
		USB1_ENDPTCOMPLETE = USB1_ENDPTCOMPLETE; // Clear all the endpoint complete status
		while (USB1_ENDPTPRIME != 0) ; // Wait for any endpoint priming
    e874:	mov	r2, r3
#endif

		}
	}
	if (status & USB_USBSTS_URI) { // page 3164
		USB1_ENDPTSETUPSTAT = USB1_ENDPTSETUPSTAT; // Clear all setup token semaphores
    e876:	str.w	r1, [r3, #428]	; 0x1ac
		USB1_ENDPTCOMPLETE = USB1_ENDPTCOMPLETE; // Clear all the endpoint complete status
    e87a:	ldr.w	r1, [r3, #444]	; 0x1bc
    e87e:	str.w	r1, [r3, #444]	; 0x1bc
		while (USB1_ENDPTPRIME != 0) ; // Wait for any endpoint priming
    e882:	ldr.w	r4, [r2, #432]	; 0x1b0
    e886:	ldr	r3, [pc, #464]	; (ea58 <isr+0x2c4>)
    e888:	cmp	r4, #0
    e88a:	bne.n	e882 <isr+0xee>
		USB1_ENDPTFLUSH = 0xFFFFFFFF;  // Cancel all endpoint primed status
    e88c:	mov.w	r2, #4294967295
    e890:	str.w	r2, [r3, #436]	; 0x1b4
		if ((USB1_PORTSC1 & USB_PORTSC1_PR)) {
    e894:	ldr.w	r3, [r3, #388]	; 0x184
			// we took too long to respond :(
			// TODO; is this ever really a problem?
			//printf("reset too slow\n");
		}
		#if defined(CDC_STATUS_INTERFACE) && defined(CDC_DATA_INTERFACE)
		usb_serial_reset();
    e898:	bl	df7c <usb_serial_reset>
		#endif
		endpointN_notify_mask = 0;
    e89c:	ldr	r3, [pc, #456]	; (ea68 <isr+0x2d4>)
    e89e:	str	r4, [r3, #0]
			// shut off USB - easier to see results in protocol analyzer
			//USB1_USBCMD &= ~USB_USBCMD_RS;
			//printf("shut off USB\n");
		//}
	}
	if (status & USB_USBSTS_TI0) {
    e8a0:	tst.w	r8, #16777216	; 0x1000000
    e8a4:	beq.n	e8ae <isr+0x11a>
		if (usb_timer0_callback != NULL) usb_timer0_callback();
    e8a6:	ldr	r3, [pc, #452]	; (ea6c <isr+0x2d8>)
    e8a8:	ldr	r3, [r3, #0]
    e8aa:	cbz	r3, e8ae <isr+0x11a>
    e8ac:	blx	r3
	}
	if (status & USB_USBSTS_TI1) {
    e8ae:	tst.w	r8, #33554432	; 0x2000000
    e8b2:	beq.n	e8bc <isr+0x128>
		if (usb_timer1_callback != NULL) usb_timer1_callback();
    e8b4:	ldr	r3, [pc, #440]	; (ea70 <isr+0x2dc>)
    e8b6:	ldr	r3, [r3, #0]
    e8b8:	cbz	r3, e8bc <isr+0x128>
    e8ba:	blx	r3
	}
	if (status & USB_USBSTS_PCI) {
    e8bc:	tst.w	r8, #4
    e8c0:	beq.n	e8d4 <isr+0x140>
		if (USB1_PORTSC1 & USB_PORTSC1_HSP) {
    e8c2:	ldr	r3, [pc, #404]	; (ea58 <isr+0x2c4>)
    e8c4:	ldr.w	r3, [r3, #388]	; 0x184
    e8c8:	ands.w	r3, r3, #512	; 0x200
    e8cc:	beq.n	e968 <isr+0x1d4>
			//printf("port at 480 Mbit\n");
			usb_high_speed = 1;
    e8ce:	ldr	r3, [pc, #420]	; (ea74 <isr+0x2e0>)
    e8d0:	movs	r2, #1
    e8d2:	strb	r2, [r3, #0]
		//printf("suspend\n");
	}
	if (status & USB_USBSTS_UEI) {
		//printf("error\n");
	}
	if ((USB1_USBINTR & USB_USBINTR_SRE) && (status & USB_USBSTS_SRI)) {
    e8d4:	ldr	r3, [pc, #384]	; (ea58 <isr+0x2c4>)
    e8d6:	ldr.w	r2, [r3, #328]	; 0x148
    e8da:	lsls	r2, r2, #24
    e8dc:	bpl.n	e904 <isr+0x170>
    e8de:	tst.w	r8, #128	; 0x80
    e8e2:	beq.n	e904 <isr+0x170>
		//printf("sof %d\n", usb_reboot_timer);
		if (usb_reboot_timer) {
    e8e4:	ldr	r1, [pc, #400]	; (ea78 <isr+0x2e4>)
    e8e6:	ldrb	r2, [r1, #0]
    e8e8:	cbz	r2, e904 <isr+0x170>
			if (--usb_reboot_timer == 0) {
    e8ea:	subs	r2, #1
    e8ec:	uxtb	r2, r2
    e8ee:	strb	r2, [r1, #0]
    e8f0:	cbnz	r2, e904 <isr+0x170>
	__enable_irq();
}

void usb_stop_sof_interrupts(int interface)
{
	sof_usage &= ~(1 << interface);
    e8f2:	ldr	r1, [pc, #392]	; (ea7c <isr+0x2e8>)
    e8f4:	ldrb	r2, [r1, #0]
    e8f6:	and.w	r2, r2, #247	; 0xf7
    e8fa:	strb	r2, [r1, #0]
	if (sof_usage == 0) {
    e8fc:	cmp	r2, #0
    e8fe:	beq.w	ed6a <isr+0x5d6>
	if ((USB1_USBINTR & USB_USBINTR_SRE) && (status & USB_USBSTS_SRI)) {
		//printf("sof %d\n", usb_reboot_timer);
		if (usb_reboot_timer) {
			if (--usb_reboot_timer == 0) {
				usb_stop_sof_interrupts(NUM_INTERFACE);
				asm("bkpt #251"); // run bootloader
    e902:	bkpt	0x00fb
		#endif
		#ifdef FLIGHTSIM_INTERFACE
		usb_flightsim_flush_output();
		#endif
	}
}
    e904:	add	sp, #12
    e906:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		}
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
    e90a:	ldr	r1, [pc, #372]	; (ea80 <isr+0x2ec>)
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
		}
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
    e90c:	str.w	r3, [r2, #444]	; 0x1bc
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
    e910:	ldr	r0, [r1, #0]
    e912:	tst	r3, r0
    e914:	bne.w	ece8 <isr+0x554>
				endpoint0_notify_mask = 0;
				endpoint0_complete();
			}
			completestatus &= endpointN_notify_mask;
    e918:	ldr	r2, [pc, #332]	; (ea68 <isr+0x2d4>)
    e91a:	ldr	r5, [r2, #0]
#if 1
			if (completestatus) {
    e91c:	ands	r5, r3
    e91e:	beq.n	e868 <isr+0xd4>

				// transmit:
				uint32_t tx = completestatus >> 16;
				while (tx) {
    e920:	lsrs	r7, r5, #16
    e922:	beq.n	e944 <isr+0x1b0>
    e924:	ldr	r6, [pc, #308]	; (ea5c <isr+0x2c8>)
					int p=__builtin_ctz(tx);
					run_callbacks(endpoint_queue_head + p * 2 + 1);
					tx &= ~(1<<p);
    e926:	mov.w	r9, #1
			if (completestatus) {

				// transmit:
				uint32_t tx = completestatus >> 16;
				while (tx) {
					int p=__builtin_ctz(tx);
    e92a:	rbit	r4, r7
    e92e:	clz	r4, r4
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    e932:	add.w	r0, r6, r4, lsl #7
					tx &= ~(1<<p);
    e936:	lsl.w	r4, r9, r4

				// transmit:
				uint32_t tx = completestatus >> 16;
				while (tx) {
					int p=__builtin_ctz(tx);
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    e93a:	adds	r0, #64	; 0x40
    e93c:	bl	e6bc <run_callbacks>
#if 1
			if (completestatus) {

				// transmit:
				uint32_t tx = completestatus >> 16;
				while (tx) {
    e940:	bics	r7, r4
    e942:	bne.n	e92a <isr+0x196>
					run_callbacks(endpoint_queue_head + p * 2 + 1);
					tx &= ~(1<<p);
				}

				// receive:
				uint32_t rx = completestatus & 0xffff;
    e944:	uxth	r5, r5
				while(rx) {
    e946:	cmp	r5, #0
    e948:	beq.n	e868 <isr+0xd4>
    e94a:	ldr	r6, [pc, #272]	; (ea5c <isr+0x2c8>)
					int p=__builtin_ctz(rx);
					run_callbacks(endpoint_queue_head + p * 2);
					rx &= ~(1<<p);
    e94c:	movs	r7, #1
				}

				// receive:
				uint32_t rx = completestatus & 0xffff;
				while(rx) {
					int p=__builtin_ctz(rx);
    e94e:	rbit	r4, r5
    e952:	clz	r4, r4
					run_callbacks(endpoint_queue_head + p * 2);
    e956:	add.w	r0, r6, r4, lsl #7
					rx &= ~(1<<p);
    e95a:	lsl.w	r4, r7, r4

				// receive:
				uint32_t rx = completestatus & 0xffff;
				while(rx) {
					int p=__builtin_ctz(rx);
					run_callbacks(endpoint_queue_head + p * 2);
    e95e:	bl	e6bc <run_callbacks>
					tx &= ~(1<<p);
				}

				// receive:
				uint32_t rx = completestatus & 0xffff;
				while(rx) {
    e962:	bics	r5, r4
    e964:	bne.n	e94e <isr+0x1ba>
    e966:	b.n	e868 <isr+0xd4>
		if (USB1_PORTSC1 & USB_PORTSC1_HSP) {
			//printf("port at 480 Mbit\n");
			usb_high_speed = 1;
		} else {
			//printf("port at 12 Mbit\n");
			usb_high_speed = 0;
    e968:	ldr	r2, [pc, #264]	; (ea74 <isr+0x2e0>)
    e96a:	strb	r3, [r2, #0]
    e96c:	b.n	e8d4 <isr+0x140>
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    e96e:	movw	r7, #8225	; 0x2021
    e972:	cmp	r1, r7
    e974:	beq.n	e9ee <isr+0x25a>
    e976:	bhi.w	ea90 <isr+0x2fc>
    e97a:	cmp.w	r1, #2176	; 0x880
    e97e:	beq.w	ebc8 <isr+0x434>
    e982:	cmp.w	r1, #2304	; 0x900
    e986:	bne.n	e9f6 <isr+0x262>
	  case 0x0500: // SET_ADDRESS
		endpoint0_receive(NULL, 0, 0);
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
		return;
	  case 0x0900: // SET_CONFIGURATION
		usb_configuration = setup.wValue;
    e988:	ubfx	r0, r0, #16, #8
    e98c:	ldr	r1, [pc, #244]	; (ea84 <isr+0x2f0>)
		// configure all other endpoints
		#if defined(ENDPOINT2_CONFIG)
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
		#endif
		#if defined(ENDPOINT3_CONFIG)
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
    e98e:	mov.w	r2, #13107400	; 0xc800c8
		return;
	  case 0x0900: // SET_CONFIGURATION
		usb_configuration = setup.wValue;
		// configure all other endpoints
		#if defined(ENDPOINT2_CONFIG)
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
    e992:	ldr	r7, [pc, #244]	; (ea88 <isr+0x2f4>)
	  case 0x0500: // SET_ADDRESS
		endpoint0_receive(NULL, 0, 0);
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
		return;
	  case 0x0900: // SET_CONFIGURATION
		usb_configuration = setup.wValue;
    e994:	strb	r0, [r1, #0]
		#endif
		#if defined(ENDPOINT4_CONFIG)
		USB1_ENDPTCTRL4 = ENDPOINT4_CONFIG;
		#endif
		#if defined(ENDPOINT5_CONFIG)
		USB1_ENDPTCTRL5 = ENDPOINT5_CONFIG;
    e996:	mov.w	r1, #13369548	; 0xcc00cc
    e99a:	str	r3, [sp, #4]
		return;
	  case 0x0900: // SET_CONFIGURATION
		usb_configuration = setup.wValue;
		// configure all other endpoints
		#if defined(ENDPOINT2_CONFIG)
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
    e99c:	str.w	r7, [r5, #456]	; 0x1c8
		#endif
		#if defined(ENDPOINT3_CONFIG)
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
    e9a0:	str.w	r2, [r5, #460]	; 0x1cc
		#endif
		#if defined(ENDPOINT4_CONFIG)
		USB1_ENDPTCTRL4 = ENDPOINT4_CONFIG;
    e9a4:	str.w	r2, [r5, #464]	; 0x1d0
		#endif
		#if defined(ENDPOINT5_CONFIG)
		USB1_ENDPTCTRL5 = ENDPOINT5_CONFIG;
    e9a8:	str.w	r1, [r5, #468]	; 0x1d4
		#endif
		#if defined(ENDPOINT7_CONFIG)
		USB1_ENDPTCTRL7 = ENDPOINT7_CONFIG;
		#endif
		#if defined(CDC_STATUS_INTERFACE) && defined(CDC_DATA_INTERFACE)
		usb_serial_configure();
    e9ac:	bl	df80 <usb_serial_configure>
		#endif
		#if defined(AUDIO_INTERFACE)
		usb_audio_configure();
		#endif
		#if defined(MTP_INTERFACE)
		usb_mtp_configure();
    e9b0:	bl	f9a4 <usb_mtp_configure>
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    e9b4:	ldr	r2, [pc, #212]	; (ea8c <isr+0x2f8>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    e9b6:	ldr	r3, [sp, #4]
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    e9b8:	movs	r1, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    e9ba:	movs	r0, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    e9bc:	str	r2, [r6, #72]	; 0x48
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    e9be:	str	r1, [r2, #4]
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    e9c0:	str	r0, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    e9c2:	str	r3, [r6, #76]	; 0x4c
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    e9c4:	str.w	fp, [r5, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    e9c8:	ldr.w	r1, [r5, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    e9cc:	str	r3, [r2, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
    e9ce:	orr.w	r2, r1, #65536	; 0x10000
    e9d2:	str.w	r2, [r5, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    e9d6:	ldr	r2, [pc, #168]	; (ea80 <isr+0x2ec>)
    e9d8:	str	r3, [r2, #0]
	while (USB1_ENDPTPRIME) ;
    e9da:	ldr.w	r3, [r4, #432]	; 0x1b0
    e9de:	cmp	r3, #0
    e9e0:	bne.n	e9da <isr+0x246>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    e9e2:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    e9e6:	cmp	r3, #0
    e9e8:	bne.w	e7c0 <isr+0x2c>
    e9ec:	b.n	e85e <isr+0xca>
		// fall through to next case, to always send ZLP ACK
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
    e9ee:	lsrs	r1, r2, #16
    e9f0:	cmp	r1, #7
    e9f2:	beq.w	ec6a <isr+0x4d6>
			return;
		}
		break;
#endif
	}
	USB1_ENDPTCTRL0 = 0x000010001; // stall
    e9f6:	str.w	fp, [r4, #448]	; 0x1c0
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    e9fa:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    e9fe:	cmp	r3, #0
    ea00:	bne.w	e7c0 <isr+0x2c>
    ea04:	b.n	e85e <isr+0xca>
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    ea06:	movw	r7, #770	; 0x302
    ea0a:	cmp	r1, r7
    ea0c:	beq.w	eb68 <isr+0x3d4>
    ea10:	cmp.w	r1, #1280	; 0x500
    ea14:	bne.n	e9f6 <isr+0x262>
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    ea16:	ldr	r2, [pc, #116]	; (ea8c <isr+0x2f8>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    ea18:	movs	r1, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    ea1a:	movs	r7, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    ea1c:	str	r3, [r6, #76]	; 0x4c
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    ea1e:	str	r2, [r6, #72]	; 0x48
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    ea20:	str	r7, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    ea22:	str	r1, [r2, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    ea24:	str.w	fp, [r5, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    ea28:	ldr.w	r1, [r5, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    ea2c:	str	r3, [r2, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
    ea2e:	orr.w	r3, r1, #65536	; 0x10000
    ea32:	str.w	r3, [r5, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    ea36:	ldr.w	r3, [r4, #432]	; 0x1b0
    ea3a:	cmp	r3, #0
    ea3c:	bne.n	ea36 <isr+0x2a2>

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
	  case 0x0500: // SET_ADDRESS
		endpoint0_receive(NULL, 0, 0);
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
    ea3e:	lsrs	r3, r0, #16
    ea40:	lsls	r3, r3, #25
    ea42:	orr.w	r3, r3, #16777216	; 0x1000000
    ea46:	str.w	r3, [r5, #340]	; 0x154
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    ea4a:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    ea4e:	cmp	r3, #0
    ea50:	bne.w	e7c0 <isr+0x2c>
    ea54:	b.n	e85e <isr+0xca>
    ea56:	nop
    ea58:	.word	0x402e0000
    ea5c:	.word	0x20046000
    ea60:	.word	0x402e01c0
    ea64:	.word	0x20044788
    ea68:	.word	0x20044764
    ea6c:	.word	0x20044760
    ea70:	.word	0x2004476c
    ea74:	.word	0x20044770
    ea78:	.word	0x20044778
    ea7c:	.word	0x20044768
    ea80:	.word	0x20044774
    ea84:	.word	0x20044798
    ea88:	.word	0x00cc0002
    ea8c:	.word	0x20045020
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    ea90:	movw	r3, #8737	; 0x2221
    ea94:	cmp	r1, r3
    ea96:	beq.n	eb50 <isr+0x3bc>
    ea98:	movw	r3, #8993	; 0x2321
    ea9c:	cmp	r1, r3
    ea9e:	bne.n	e9f6 <isr+0x262>
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    eaa0:	ldr	r3, [pc, #724]	; (ed78 <isr+0x5e4>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    eaa2:	movs	r2, #128	; 0x80
	endpoint0_transfer_ack.pointer0 = 0;
    eaa4:	movs	r1, #0
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    eaa6:	movs	r0, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    eaa8:	str	r3, [r6, #72]	; 0x48
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    eaaa:	str	r0, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    eaac:	str	r2, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    eaae:	str	r1, [r6, #76]	; 0x4c
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    eab0:	str.w	fp, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    eab4:	ldr.w	r2, [r4, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    eab8:	str	r1, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
    eaba:	orr.w	r3, r2, #65536	; 0x10000
    eabe:	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    eac2:	ldr.w	r3, [r4, #432]	; 0x1b0
    eac6:	cmp	r3, #0
    eac8:	bne.n	eac2 <isr+0x32e>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    eaca:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    eace:	cmp	r3, #0
    ead0:	bne.w	e7c0 <isr+0x2c>
    ead4:	b.n	e85e <isr+0xca>
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
		endpoint0_transmit(reply_buffer, 1, 0);
		return;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    ead6:	ldr	r2, [pc, #676]	; (ed7c <isr+0x5e8>)
		reply_buffer[1] = 0;
		endpoint0_transmit(reply_buffer, 2, 0);
    ead8:	movs	r1, #2
    eada:	mov	r0, r2
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
		endpoint0_transmit(reply_buffer, 1, 0);
		return;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    eadc:	strb	r3, [r2, #0]
		reply_buffer[1] = 0;
    eade:	strb	r3, [r2, #1]
		endpoint0_transmit(reply_buffer, 2, 0);
    eae0:	bl	e6f4 <endpoint0_transmit.constprop.1>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    eae4:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    eae8:	cmp	r3, #0
    eaea:	bne.w	e7c0 <isr+0x2c>
    eaee:	b.n	e85e <isr+0xca>
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
		}
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
    eaf0:	uxth	r2, r2
    eaf2:	and.w	r3, r2, #127	; 0x7f
		if (endpoint > 7) break;
    eaf6:	cmp	r3, #7
    eaf8:	bhi.w	e9f6 <isr+0x262>
		dir = setup.wIndex & 0x80;
		if (dir) {
    eafc:	tst.w	r2, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_TXS;
    eb00:	mov.w	r3, r3, lsl #2
    eb04:	ldr	r2, [pc, #632]	; (ed80 <isr+0x5ec>)
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    eb06:	mov.w	r1, #0
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    eb0a:	mov.w	r0, #1
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		if (dir) {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_TXS;
    eb0e:	add	r2, r3
    eb10:	ldr	r3, [r2, #0]
    eb12:	ite	ne
    eb14:	bicne.w	r3, r3, #65536	; 0x10000
		} else {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_RXS;
    eb18:	biceq.w	r3, r3, #1
    eb1c:	str	r3, [r2, #0]
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    eb1e:	movs	r2, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    eb20:	ldr	r3, [pc, #596]	; (ed78 <isr+0x5e4>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    eb22:	str	r1, [r6, #76]	; 0x4c
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    eb24:	str	r3, [r6, #72]	; 0x48
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    eb26:	str	r0, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    eb28:	str	r2, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    eb2a:	str.w	fp, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    eb2e:	ldr.w	r2, [r4, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    eb32:	str	r1, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
    eb34:	orr.w	r3, r2, #65536	; 0x10000
    eb38:	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    eb3c:	ldr.w	r3, [r4, #432]	; 0x1b0
    eb40:	cmp	r3, #0
    eb42:	bne.n	eb3c <isr+0x3a8>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    eb44:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    eb48:	cmp	r3, #0
    eb4a:	bne.w	e7c0 <isr+0x2c>
    eb4e:	b.n	e85e <isr+0xca>
		}
		break;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		#ifdef CDC_STATUS_INTERFACE
		if (setup.wIndex == CDC_STATUS_INTERFACE) {
    eb50:	uxth	r2, r2
    eb52:	cmp	r2, #1
    eb54:	bne.n	eaa0 <isr+0x30c>
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    eb56:	ldr	r3, [pc, #556]	; (ed84 <isr+0x5f0>)
			usb_cdc_line_rtsdtr = setup.wValue;
    eb58:	ubfx	r0, r0, #16, #8
		break;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		#ifdef CDC_STATUS_INTERFACE
		if (setup.wIndex == CDC_STATUS_INTERFACE) {
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    eb5c:	ldr	r2, [pc, #552]	; (ed88 <isr+0x5f4>)
    eb5e:	ldr	r1, [r3, #0]
			usb_cdc_line_rtsdtr = setup.wValue;
    eb60:	ldr	r3, [pc, #552]	; (ed8c <isr+0x5f8>)
		break;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		#ifdef CDC_STATUS_INTERFACE
		if (setup.wIndex == CDC_STATUS_INTERFACE) {
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    eb62:	str	r1, [r2, #0]
			usb_cdc_line_rtsdtr = setup.wValue;
    eb64:	strb	r0, [r3, #0]
    eb66:	b.n	eaa0 <isr+0x30c>
			reply_buffer[0] = 1;
		}
		endpoint0_transmit(reply_buffer, 2, 0);
		return;
	  case 0x0302: // SET_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
    eb68:	uxth	r2, r2
    eb6a:	and.w	r3, r2, #127	; 0x7f
		if (endpoint > 7) break;
    eb6e:	cmp	r3, #7
    eb70:	bhi.w	e9f6 <isr+0x262>
		dir = setup.wIndex & 0x80;
		if (dir) {
    eb74:	tst.w	r2, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_TXS;
    eb78:	mov.w	r3, r3, lsl #2
    eb7c:	ldr	r2, [pc, #512]	; (ed80 <isr+0x5ec>)
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    eb7e:	mov.w	r1, #0
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    eb82:	mov.w	r0, #1
	  case 0x0302: // SET_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		if (dir) {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_TXS;
    eb86:	add	r2, r3
    eb88:	ldr	r3, [r2, #0]
    eb8a:	ite	ne
    eb8c:	orrne.w	r3, r3, #65536	; 0x10000
		} else {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
    eb90:	orreq.w	r3, r3, #1
    eb94:	str	r3, [r2, #0]
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    eb96:	movs	r2, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    eb98:	ldr	r3, [pc, #476]	; (ed78 <isr+0x5e4>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    eb9a:	str	r1, [r6, #76]	; 0x4c
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    eb9c:	str	r3, [r6, #72]	; 0x48
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    eb9e:	str	r0, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    eba0:	str	r2, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    eba2:	str.w	fp, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    eba6:	ldr.w	r2, [r4, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    ebaa:	str	r1, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
    ebac:	orr.w	r3, r2, #65536	; 0x10000
    ebb0:	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    ebb4:	ldr.w	r3, [r4, #432]	; 0x1b0
    ebb8:	cmp	r3, #0
    ebba:	bne.n	ebb4 <isr+0x420>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    ebbc:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    ebc0:	cmp	r3, #0
    ebc2:	bne.w	e7c0 <isr+0x2c>
    ebc6:	b.n	e85e <isr+0xca>
		endpoint_queue_head[2].unused1 = (uint32_t)experimental_buffer;
		#endif
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    ebc8:	ldr	r2, [pc, #452]	; (ed90 <isr+0x5fc>)
		endpoint0_transmit(reply_buffer, 1, 0);
    ebca:	movs	r1, #1
		endpoint_queue_head[2].unused1 = (uint32_t)experimental_buffer;
		#endif
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    ebcc:	ldr	r3, [pc, #428]	; (ed7c <isr+0x5e8>)
    ebce:	ldrb	r2, [r2, #0]
		endpoint0_transmit(reply_buffer, 1, 0);
    ebd0:	mov	r0, r3
		endpoint_queue_head[2].unused1 = (uint32_t)experimental_buffer;
		#endif
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    ebd2:	strb	r2, [r3, #0]
		endpoint0_transmit(reply_buffer, 1, 0);
    ebd4:	bl	e6f4 <endpoint0_transmit.constprop.1>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    ebd8:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    ebdc:	cmp	r3, #0
    ebde:	bne.w	e7c0 <isr+0x2c>
    ebe2:	b.n	e85e <isr+0xca>
		}
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    ebe4:	ldr	r3, [pc, #428]	; (ed94 <isr+0x600>)
    ebe6:	ldr	r1, [r3, #4]
    ebe8:	cmp	r1, #0
    ebea:	beq.w	e9f6 <isr+0x262>
    ebee:	lsrs	r0, r0, #16
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    ebf0:	uxth.w	lr, r2
    ebf4:	b.n	ec00 <isr+0x46c>
		}
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    ebf6:	adds	r3, #12
    ebf8:	ldr	r1, [r3, #4]
    ebfa:	cmp	r1, #0
    ebfc:	beq.w	e9f6 <isr+0x262>
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    ec00:	ldrh	r7, [r3, #0]
    ec02:	cmp	r7, r0
    ec04:	bne.n	ebf6 <isr+0x462>
    ec06:	ldrh	r7, [r3, #2]
    ec08:	cmp	r7, lr
    ec0a:	bne.n	ebf6 <isr+0x462>
				uint32_t datalen;
				if ((setup.wValue >> 8) == 3) {
    ec0c:	lsrs	r7, r0, #8
    ec0e:	cmp	r7, #3
    ec10:	beq.w	ede6 <isr+0x652>
					// for string descriptors, use the descriptor's
					// length field, allowing runtime configured length.
					datalen = *(list->addr);
				} else {
					datalen = list->length;
    ec14:	ldrh	r3, [r3, #8]
				}
				if (datalen > setup.wLength) datalen = setup.wLength;
    ec16:	lsrs	r2, r2, #16
    ec18:	cmp	r3, r2
    ec1a:	it	cs
    ec1c:	movcs	r3, r2

				// copy the descriptor, from PROGMEM to DMAMEM
				if (setup.wValue == 0x200) {
    ec1e:	cmp.w	r0, #512	; 0x200
    ec22:	beq.w	edc8 <isr+0x634>
					// config descriptor needs to adapt to speed
					const uint8_t *src = usb_config_descriptor_12;
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
				} else if (setup.wValue == 0x700) {
    ec26:	cmp.w	r0, #1792	; 0x700
    ec2a:	beq.w	ed44 <isr+0x5b0>
    ec2e:	ldr	r7, [pc, #360]	; (ed98 <isr+0x604>)
					const uint8_t *src = usb_config_descriptor_480;
					if (usb_high_speed) src = usb_config_descriptor_12;
					memcpy(usb_descriptor_buffer, src, datalen);
					usb_descriptor_buffer[1] = 7;
				} else {
					memcpy(usb_descriptor_buffer, list->addr, datalen);
    ec30:	mov	r2, r3
    ec32:	str	r3, [sp, #4]
    ec34:	mov	r0, r7
    ec36:	bl	db14 <memcpy>
    ec3a:	ldr	r3, [sp, #4]
// any cached data written to memory, and then removed from the cache,
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    ec3c:	bic.w	r2, r7, #31
	uint32_t end_addr = (uint32_t)addr + size;
    ec40:	add	r7, r3
	asm volatile("": : :"memory");
	asm("dsb");
    ec42:	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    ec46:	ldr	r1, [pc, #340]	; (ed9c <isr+0x608>)
    ec48:	str	r2, [r1, #0]
		location += 32;
    ec4a:	adds	r2, #32
	} while (location < end_addr);
    ec4c:	cmp	r7, r2
    ec4e:	bhi.n	ec46 <isr+0x4b2>
	asm("dsb");
    ec50:	dsb	sy
	asm("isb");
    ec54:	isb	sy
				}
				// prep transmit
				arm_dcache_flush_delete(usb_descriptor_buffer, datalen);
				endpoint0_transmit(usb_descriptor_buffer, datalen, 0);
    ec58:	ldr	r0, [pc, #316]	; (ed98 <isr+0x604>)
    ec5a:	mov	r1, r3
    ec5c:	bl	e6f4 <endpoint0_transmit.constprop.1>
    ec60:	b.n	e856 <isr+0xc2>
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    ec62:	lsls	r3, r1, #31
    ec64:	bpl.w	e84e <isr+0xba>
    ec68:	b.n	e84a <isr+0xb6>
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
		endpoint0_setupdata.bothwords = setupdata;
    ec6a:	ldr	r7, [pc, #308]	; (eda0 <isr+0x60c>)
static void endpoint0_receive(void *data, uint32_t len, int notify)
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    ec6c:	mov.w	lr, #1
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
    ec70:	str	r3, [r6, #12]
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    ec72:	ldr	r1, [pc, #304]	; (eda4 <isr+0x610>)
static void endpoint0_receive(void *data, uint32_t len, int notify)
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    ec74:	ldr	r3, [pc, #304]	; (eda8 <isr+0x614>)
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
		endpoint0_setupdata.bothwords = setupdata;
    ec76:	str	r0, [r7, #0]
static void endpoint0_receive(void *data, uint32_t len, int notify)
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    ec78:	str.w	lr, [r3]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    ec7c:	str	r1, [r3, #4]
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
    ec7e:	str	r3, [r6, #8]
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
    ec80:	ldr	r1, [pc, #296]	; (edac <isr+0x618>)
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
    ec82:	ldr.w	r0, [r5, #432]	; 0x1b0
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
		endpoint0_setupdata.bothwords = setupdata;
    ec86:	str	r2, [r7, #4]
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
    ec88:	add.w	r7, r1, #4096	; 0x1000
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
    ec8c:	orr.w	r2, r0, lr
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    ec90:	str	r1, [r3, #8]
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
    ec92:	add.w	lr, r1, #8192	; 0x2000
		endpoint0_transfer_data.pointer3 = addr + 12288;
    ec96:	add.w	r0, r1, #12288	; 0x3000
		endpoint0_transfer_data.pointer4 = addr + 16384;
    ec9a:	add.w	r1, r1, #16384	; 0x4000
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
    ec9e:	str.w	r2, [r5, #432]	; 0x1b0
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
    eca2:	str	r7, [r3, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    eca4:	str.w	lr, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    eca8:	str	r0, [r3, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
    ecaa:	str	r1, [r3, #24]
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
    ecac:	ldr.w	r3, [r4, #432]	; 0x1b0
    ecb0:	cmp	r3, #0
    ecb2:	bne.n	ecac <isr+0x518>
	}
	endpoint0_transfer_ack.next = 1;
    ecb4:	ldr	r2, [pc, #192]	; (ed78 <isr+0x5e4>)
    ecb6:	movs	r0, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    ecb8:	movw	r1, #32896	; 0x8080
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    ecbc:	str	r3, [r6, #76]	; 0x4c
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    ecbe:	str	r0, [r2, #0]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    ecc0:	mov.w	r0, #65536	; 0x10000
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    ecc4:	str	r2, [r6, #72]	; 0x48
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    ecc6:	str	r1, [r2, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    ecc8:	str.w	fp, [r5, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    eccc:	ldr.w	r1, [r5, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    ecd0:	str	r3, [r2, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
    ecd2:	orr.w	r3, r1, r0
    ecd6:	str.w	r3, [r5, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    ecda:	str.w	r0, [r9]
	while (USB1_ENDPTPRIME) ;
    ecde:	ldr.w	r3, [r4, #432]	; 0x1b0
    ece2:	cmp	r3, #0
    ece4:	bne.n	ecde <isr+0x54a>
    ece6:	b.n	e856 <isr+0xc2>

static void endpoint0_complete(void)
{
	setup_t setup;

	setup.bothwords = endpoint0_setupdata.bothwords;
    ece8:	ldr	r0, [pc, #180]	; (eda0 <isr+0x60c>)
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	// 0x2021 is CDC_SET_LINE_CODING
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    ecea:	movw	r4, #8225	; 0x2021
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
				endpoint0_notify_mask = 0;
    ecee:	movs	r6, #0

	setup.bothwords = endpoint0_setupdata.bothwords;
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	// 0x2021 is CDC_SET_LINE_CODING
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    ecf0:	ldrh	r5, [r0, #0]
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
				endpoint0_notify_mask = 0;
    ecf2:	str	r6, [r1, #0]

	setup.bothwords = endpoint0_setupdata.bothwords;
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	// 0x2021 is CDC_SET_LINE_CODING
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    ecf4:	cmp	r5, r4

static void endpoint0_complete(void)
{
	setup_t setup;

	setup.bothwords = endpoint0_setupdata.bothwords;
    ecf6:	ldr	r0, [r0, #4]
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	// 0x2021 is CDC_SET_LINE_CODING
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    ecf8:	bne.w	e918 <isr+0x184>
    ecfc:	uxth	r1, r0
    ecfe:	cmp	r1, #1
    ed00:	bne.w	e918 <isr+0x184>
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    ed04:	ldr	r1, [pc, #164]	; (edac <isr+0x618>)
    ed06:	ldr	r4, [pc, #168]	; (edb0 <isr+0x61c>)
    ed08:	ldmia	r1, {r0, r1}
    ed0a:	lsrs	r5, r1, #16
		printf("usb_cdc_line_coding, baud=%u\n", usb_cdc_line_coding[0]);
		if (usb_cdc_line_coding[0] == 134) {
    ed0c:	cmp	r0, #134	; 0x86
	setup.bothwords = endpoint0_setupdata.bothwords;
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	// 0x2021 is CDC_SET_LINE_CODING
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    ed0e:	str	r0, [r4, #0]
    ed10:	strh	r1, [r4, #4]
    ed12:	strb	r5, [r4, #6]
		printf("usb_cdc_line_coding, baud=%u\n", usb_cdc_line_coding[0]);
		if (usb_cdc_line_coding[0] == 134) {
    ed14:	bne.w	e918 <isr+0x184>
}


void usb_start_sof_interrupts(int interface)
{
	__disable_irq();
    ed18:	cpsid	i
	sof_usage |= (1 << interface);
    ed1a:	ldr	r0, [pc, #152]	; (edb4 <isr+0x620>)
    ed1c:	ldrb	r1, [r0, #0]
    ed1e:	orr.w	r1, r1, #8
    ed22:	strb	r1, [r0, #0]
	uint32_t intr = USB1_USBINTR;
    ed24:	ldr.w	r1, [r2, #328]	; 0x148
	if (!(intr & USB_USBINTR_SRE)) {
    ed28:	lsls	r0, r1, #24
    ed2a:	bmi.n	ed3a <isr+0x5a6>
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    ed2c:	orr.w	r1, r1, #128	; 0x80
{
	__disable_irq();
	sof_usage |= (1 << interface);
	uint32_t intr = USB1_USBINTR;
	if (!(intr & USB_USBINTR_SRE)) {
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
    ed30:	movs	r0, #128	; 0x80
    ed32:	str.w	r0, [r2, #324]	; 0x144
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    ed36:	str.w	r1, [r2, #328]	; 0x148
	}
	__enable_irq();
    ed3a:	cpsie	i
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
		printf("usb_cdc_line_coding, baud=%u\n", usb_cdc_line_coding[0]);
		if (usb_cdc_line_coding[0] == 134) {
			usb_start_sof_interrupts(NUM_INTERFACE);
			usb_reboot_timer = 80; // TODO: 10 if only 12 Mbit/sec
    ed3c:	ldr	r2, [pc, #120]	; (edb8 <isr+0x624>)
    ed3e:	movs	r1, #80	; 0x50
    ed40:	strb	r1, [r2, #0]
    ed42:	b.n	e918 <isr+0x184>
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
				} else if (setup.wValue == 0x700) {
					// other speed config also needs to adapt
					const uint8_t *src = usb_config_descriptor_480;
					if (usb_high_speed) src = usb_config_descriptor_12;
    ed44:	ldr	r0, [pc, #116]	; (edbc <isr+0x628>)
					memcpy(usb_descriptor_buffer, src, datalen);
    ed46:	mov	r2, r3
    ed48:	ldr	r7, [pc, #76]	; (ed98 <isr+0x604>)
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
				} else if (setup.wValue == 0x700) {
					// other speed config also needs to adapt
					const uint8_t *src = usb_config_descriptor_480;
					if (usb_high_speed) src = usb_config_descriptor_12;
    ed4a:	ldrb.w	lr, [r0]
					const uint8_t *src = usb_config_descriptor_12;
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
				} else if (setup.wValue == 0x700) {
					// other speed config also needs to adapt
					const uint8_t *src = usb_config_descriptor_480;
    ed4e:	ldr	r1, [pc, #112]	; (edc0 <isr+0x62c>)
    ed50:	ldr	r0, [pc, #112]	; (edc4 <isr+0x630>)
					if (usb_high_speed) src = usb_config_descriptor_12;
					memcpy(usb_descriptor_buffer, src, datalen);
    ed52:	str	r3, [sp, #4]
    ed54:	cmp.w	lr, #0
    ed58:	it	eq
    ed5a:	moveq	r1, r0
    ed5c:	mov	r0, r7
    ed5e:	bl	db14 <memcpy>
					usb_descriptor_buffer[1] = 7;
    ed62:	movs	r2, #7
    ed64:	ldr	r3, [sp, #4]
    ed66:	strb	r2, [r7, #1]
    ed68:	b.n	ec3c <isr+0x4a8>

void usb_stop_sof_interrupts(int interface)
{
	sof_usage &= ~(1 << interface);
	if (sof_usage == 0) {
		USB1_USBINTR &= ~USB_USBINTR_SRE;
    ed6a:	ldr.w	r2, [r3, #328]	; 0x148
    ed6e:	bic.w	r2, r2, #128	; 0x80
    ed72:	str.w	r2, [r3, #328]	; 0x148
    ed76:	b.n	e902 <isr+0x16e>
    ed78:	.word	0x20045020
    ed7c:	.word	0x20044788
    ed80:	.word	0x402e01c0
    ed84:	.word	0x200447a4
    ed88:	.word	0x20044954
    ed8c:	.word	0x200446c8
    ed90:	.word	0x20044798
    ed94:	.word	0x20000810
    ed98:	.word	0x20204000
    ed9c:	.word	0xe000ef70
    eda0:	.word	0x20044780
    eda4:	.word	0x00070080
    eda8:	.word	0x20045000
    edac:	.word	0x20044790
    edb0:	.word	0x2004494c
    edb4:	.word	0x20044768
    edb8:	.word	0x20044778
    edbc:	.word	0x20044770
    edc0:	.word	0x60001cf0
    edc4:	.word	0x60001d5c

				// copy the descriptor, from PROGMEM to DMAMEM
				if (setup.wValue == 0x200) {
					// config descriptor needs to adapt to speed
					const uint8_t *src = usb_config_descriptor_12;
					if (usb_high_speed) src = usb_config_descriptor_480;
    edc8:	ldr	r0, [pc, #40]	; (edf4 <isr+0x660>)
					memcpy(usb_descriptor_buffer, src, datalen);
    edca:	mov	r2, r3
				if (datalen > setup.wLength) datalen = setup.wLength;

				// copy the descriptor, from PROGMEM to DMAMEM
				if (setup.wValue == 0x200) {
					// config descriptor needs to adapt to speed
					const uint8_t *src = usb_config_descriptor_12;
    edcc:	ldr	r1, [pc, #40]	; (edf8 <isr+0x664>)
					if (usb_high_speed) src = usb_config_descriptor_480;
    edce:	ldrb	r7, [r0, #0]
				if (datalen > setup.wLength) datalen = setup.wLength;

				// copy the descriptor, from PROGMEM to DMAMEM
				if (setup.wValue == 0x200) {
					// config descriptor needs to adapt to speed
					const uint8_t *src = usb_config_descriptor_12;
    edd0:	ldr	r0, [pc, #40]	; (edfc <isr+0x668>)
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
    edd2:	str	r3, [sp, #4]
    edd4:	cmp	r7, #0
    edd6:	it	eq
    edd8:	moveq	r1, r0
    edda:	ldr	r0, [pc, #36]	; (ee00 <isr+0x66c>)
    eddc:	bl	db14 <memcpy>
    ede0:	ldr	r7, [pc, #28]	; (ee00 <isr+0x66c>)
    ede2:	ldr	r3, [sp, #4]
    ede4:	b.n	ec3c <isr+0x4a8>
					// length field, allowing runtime configured length.
					datalen = *(list->addr);
				} else {
					datalen = list->length;
				}
				if (datalen > setup.wLength) datalen = setup.wLength;
    ede6:	lsrs	r2, r2, #16
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
				uint32_t datalen;
				if ((setup.wValue >> 8) == 3) {
					// for string descriptors, use the descriptor's
					// length field, allowing runtime configured length.
					datalen = *(list->addr);
    ede8:	ldrb	r3, [r1, #0]
    edea:	cmp	r3, r2
    edec:	it	cs
    edee:	movcs	r3, r2
    edf0:	b.n	ec26 <isr+0x492>
    edf2:	nop
    edf4:	.word	0x20044770
    edf8:	.word	0x60001d5c
    edfc:	.word	0x60001cf0
    ee00:	.word	0x20204000

0000ee04 <usb_config_rx>:
	qh->callback_function = callback;
}

void usb_config_rx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    ee04:	cmp	r2, #0
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    ee06:	sub.w	r2, r0, #2
	qh->next = 1; // Terminate bit = 1
	qh->callback_function = callback;
}

void usb_config_rx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
    ee0a:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    ee0e:	ite	ne
    ee10:	movne	r7, #0
    ee12:	moveq.w	r7, #536870912	; 0x20000000
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    ee16:	cmp	r2, #3
    ee18:	bls.n	ee1e <usb_config_rx+0x1a>
    ee1a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    ee1e:	mov.w	sl, r0, lsl #7
    ee22:	ldr.w	r9, [pc, #64]	; ee64 <usb_config_rx+0x60>
    ee26:	mov	r5, r1
    ee28:	mov	r4, r0
    ee2a:	add.w	r6, sl, r9
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    ee2e:	movs	r1, #0
    ee30:	movs	r2, #64	; 0x40
    ee32:	mov	r8, r3
    ee34:	mov	r0, r6
    ee36:	bl	10bfc <memset>
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    ee3a:	movs	r0, #1
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
    ee3c:	orr.w	r1, r7, r5, lsl #16
    ee40:	str.w	r1, [sl, r9]
	qh->next = 1; // Terminate bit = 1
	qh->callback_function = callback;
    ee44:	str.w	r8, [r6, #56]	; 0x38

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    ee48:	str	r0, [r6, #8]
void usb_config_rx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
	if (cb) endpointN_notify_mask |= (1 << ep);
    ee4a:	cmp.w	r8, #0
    ee4e:	beq.n	ee1a <usb_config_rx+0x16>
    ee50:	ldr	r3, [pc, #12]	; (ee60 <usb_config_rx+0x5c>)
    ee52:	lsls	r0, r4
    ee54:	ldr	r4, [r3, #0]
    ee56:	orrs	r0, r4
    ee58:	str	r0, [r3, #0]
    ee5a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ee5e:	nop
    ee60:	.word	0x20044764
    ee64:	.word	0x20046000

0000ee68 <usb_config_tx>:
}

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    ee68:	cmp	r2, #0
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    ee6a:	sub.w	r2, r0, #2
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
	if (cb) endpointN_notify_mask |= (1 << ep);
}

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
    ee6e:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    ee72:	ite	ne
    ee74:	movne	r7, #0
    ee76:	moveq.w	r7, #536870912	; 0x20000000
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    ee7a:	cmp	r2, #3
    ee7c:	bls.n	ee82 <usb_config_tx+0x1a>
    ee7e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    ee82:	movs	r2, #64	; 0x40

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    ee84:	lsls	r5, r0, #7
    ee86:	ldr.w	r9, [pc, #68]	; eecc <usb_config_tx+0x64>
    ee8a:	mov	r8, r1
    ee8c:	add	r5, r2
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    ee8e:	movs	r1, #0
    ee90:	mov	r4, r0
    ee92:	mov	r6, r3

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    ee94:	add.w	sl, r5, r9
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    ee98:	mov	r0, sl
    ee9a:	bl	10bfc <memset>
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    ee9e:	movs	r2, #1
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
    eea0:	orr.w	r1, r7, r8, lsl #16
    eea4:	str.w	r1, [r5, r9]
	qh->next = 1; // Terminate bit = 1
	qh->callback_function = callback;
    eea8:	str.w	r6, [sl, #56]	; 0x38

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    eeac:	str.w	r2, [sl, #8]
void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
    eeb0:	cmp	r6, #0
    eeb2:	beq.n	ee7e <usb_config_tx+0x16>
    eeb4:	add.w	r0, r4, #16
    eeb8:	ldr	r3, [pc, #12]	; (eec8 <usb_config_tx+0x60>)
    eeba:	lsls	r2, r0
    eebc:	ldr	r0, [r3, #0]
    eebe:	orrs	r2, r0
    eec0:	str	r2, [r3, #0]
    eec2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    eec6:	nop
    eec8:	.word	0x20044764
    eecc:	.word	0x20046000

0000eed0 <usb_prepare_transfer>:


void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
	transfer->status = (len << 16) | (1<<7);
    eed0:	lsls	r2, r2, #16
	uint32_t addr = (uint32_t)data;
	transfer->pointer0 = addr;
    eed2:	str	r1, [r0, #8]
	transfer->pointer1 = addr + 4096;
	transfer->pointer2 = addr + 8192;
	transfer->pointer3 = addr + 12288;
	transfer->pointer4 = addr + 16384;
	transfer->callback_param = param;
    eed4:	str	r3, [r0, #28]


void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
	transfer->status = (len << 16) | (1<<7);
    eed6:	orr.w	r2, r2, #128	; 0x80
}



void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
    eeda:	push	{r4, r5, r6, r7}
	transfer->next = 1;
	transfer->status = (len << 16) | (1<<7);
    eedc:	str	r2, [r0, #4]



void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
    eede:	movs	r7, #1
	transfer->status = (len << 16) | (1<<7);
	uint32_t addr = (uint32_t)data;
	transfer->pointer0 = addr;
	transfer->pointer1 = addr + 4096;
    eee0:	add.w	r6, r1, #4096	; 0x1000
	transfer->pointer2 = addr + 8192;
    eee4:	add.w	r5, r1, #8192	; 0x2000
	transfer->pointer3 = addr + 12288;
    eee8:	add.w	r4, r1, #12288	; 0x3000
	transfer->pointer4 = addr + 16384;
    eeec:	add.w	r2, r1, #16384	; 0x4000



void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
    eef0:	str	r7, [r0, #0]
	transfer->status = (len << 16) | (1<<7);
	uint32_t addr = (uint32_t)data;
	transfer->pointer0 = addr;
	transfer->pointer1 = addr + 4096;
    eef2:	str	r6, [r0, #12]
	transfer->pointer2 = addr + 8192;
    eef4:	str	r5, [r0, #16]
	transfer->pointer3 = addr + 12288;
    eef6:	str	r4, [r0, #20]
	transfer->pointer4 = addr + 16384;
    eef8:	str	r2, [r0, #24]
	transfer->callback_param = param;
}
    eefa:	pop	{r4, r5, r6, r7}
    eefc:	bx	lr
    eefe:	nop

0000ef00 <usb_transmit>:
	}
}

void usb_transmit(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    ef00:	subs	r3, r0, #2
    ef02:	cmp	r3, #3
    ef04:	bls.n	ef08 <usb_transmit+0x8>
    ef06:	bx	lr
		count--;
	}
}

void usb_transmit(int endpoint_number, transfer_t *transfer)
{
    ef08:	push	{r4, r5}
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
    ef0a:	ldr	r3, [pc, #24]	; (ef24 <usb_transmit+0x24>)
    ef0c:	add.w	r4, r0, #16
    ef10:	movs	r5, #1
    ef12:	mov	r2, r1
    ef14:	add.w	r0, r3, r0, lsl #7
    ef18:	lsl.w	r1, r5, r4
}
    ef1c:	pop	{r4, r5}
void usb_transmit(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
    ef1e:	b.w	e64c <schedule_transfer>
    ef22:	nop
    ef24:	.word	0x20046040

0000ef28 <usb_receive>:
}

void usb_receive(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    ef28:	subs	r3, r0, #2
    ef2a:	cmp	r3, #3
    ef2c:	bls.n	ef30 <usb_receive+0x8>
    ef2e:	bx	lr
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
}

void usb_receive(int endpoint_number, transfer_t *transfer)
{
    ef30:	push	{r4}
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
	uint32_t mask = 1 << endpoint_number;
	schedule_transfer(endpoint, mask, transfer);
    ef32:	ldr	r3, [pc, #20]	; (ef48 <usb_receive+0x20>)
    ef34:	movs	r4, #1
    ef36:	mov	r2, r1
    ef38:	lsl.w	r1, r4, r0
    ef3c:	add.w	r0, r3, r0, lsl #7
}
    ef40:	ldr.w	r4, [sp], #4
void usb_receive(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
	uint32_t mask = 1 << endpoint_number;
	schedule_transfer(endpoint, mask, transfer);
    ef44:	b.w	e64c <schedule_transfer>
    ef48:	.word	0x20046000

0000ef4c <usb_transfer_status>:
uint32_t usb_transfer_status(const transfer_t *transfer)
{
#if defined(USB_MTPDISK) || defined(USB_MTPDISK_SERIAL)
	uint32_t status, cmd;
	//int count=0;
	cmd = USB1_USBCMD;
    ef4c:	ldr	r2, [pc, #32]	; (ef70 <usb_transfer_status+0x24>)
    ef4e:	ldr.w	r3, [r2, #320]	; 0x140
	while (1) {
		__disable_irq();
    ef52:	cpsid	i
		USB1_USBCMD = cmd | USB_USBCMD_ATDTW;
    ef54:	orr.w	r3, r3, #16384	; 0x4000
    ef58:	str.w	r3, [r2, #320]	; 0x140
		status = transfer->status;
    ef5c:	ldr	r1, [r0, #4]
		cmd = USB1_USBCMD;
    ef5e:	ldr.w	r3, [r2, #320]	; 0x140
		__enable_irq();
    ef62:	cpsie	i
		if (cmd & USB_USBCMD_ATDTW) return status;
    ef64:	tst.w	r3, #16384	; 0x4000
    ef68:	beq.n	ef52 <usb_transfer_status+0x6>
		//if (++count > 1) break; // for completed, check 10 times
	}
#else
	return transfer->status;
#endif
}
    ef6a:	mov	r0, r1
    ef6c:	bx	lr
    ef6e:	nop
    ef70:	.word	0x402e0000

0000ef74 <delay>:

void delay(uint32_t msec)
{
	uint32_t start;

	if (msec == 0) return;
    ef74:	cmp	r0, #0
    ef76:	beq.n	f028 <delay+0xb4>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    ef78:	movs	r2, #1
{

}*/

void delay(uint32_t msec)
{
    ef7a:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ef7e:	sub	sp, #20
    ef80:	mov	fp, r0
    ef82:	ldr	r4, [pc, #168]	; (f02c <delay+0xb8>)
    ef84:	ldr	r5, [pc, #168]	; (f030 <delay+0xbc>)
    ef86:	ldr	r6, [pc, #172]	; (f034 <delay+0xc0>)
    ef88:	ldrd	r8, r9, [sp, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    ef8c:	ldrex	r3, [r4]
uint32_t micros(void)
{
	uint32_t smc, scc;
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
    ef90:	ldr	r0, [r5, #0]
		scc = systick_cycle_count;
    ef92:	ldr	r3, [r6, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    ef94:	strex	r1, r2, [r4]
	} while ( __STREXW(1, &systick_safe_read));
    ef98:	cmp	r1, #0
    ef9a:	bne.n	ef8c <delay+0x18>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    ef9c:	ldr	r7, [pc, #152]	; (f038 <delay+0xc4>)
    ef9e:	strd	r8, r9, [sp, #8]
    efa2:	ldr	r2, [r7, #0]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
    efa4:	subs	r3, r2, r3
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    efa6:	ldr	r2, [pc, #148]	; (f03c <delay+0xc8>)
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
    efa8:	mov.w	lr, #1000	; 0x3e8
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    efac:	str	r7, [sp, #4]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    efae:	ldr	r2, [r2, #0]
    efb0:	movs	r7, #1
    efb2:	umull	r2, r3, r3, r2
	if (frac > 1000) frac = 1000;
    efb6:	mov.w	r2, #1000	; 0x3e8
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    efba:	mov	r8, r3
	if (frac > 1000) frac = 1000;
    efbc:	movs	r3, #0
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    efbe:	cmp	r3, r1
    efc0:	it	eq
    efc2:	cmpeq	r2, r8
    efc4:	ite	cs
    efc6:	movcs	sl, r8
    efc8:	movcc	sl, lr
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
    efca:	mla	sl, lr, r0, sl
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    efce:	ldrex	r3, [r4]
uint32_t micros(void)
{
	uint32_t smc, scc;
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
    efd2:	ldr	r2, [r5, #0]
		scc = systick_cycle_count;
    efd4:	ldr	r1, [r6, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    efd6:	strex	r3, r7, [r4]
	} while ( __STREXW(1, &systick_safe_read));
    efda:	cmp	r3, #0
    efdc:	bne.n	efce <delay+0x5a>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    efde:	ldr	r0, [sp, #4]
    efe0:	ldr	r0, [r0, #0]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
    efe2:	subs	r1, r0, r1
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    efe4:	ldr	r0, [pc, #84]	; (f03c <delay+0xc8>)
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
    efe6:	mov.w	lr, #1000	; 0x3e8
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    efea:	ldr	r0, [r0, #0]
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
    efec:	mul.w	r2, lr, r2
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    eff0:	umull	r0, r1, r1, r0
	if (frac > 1000) frac = 1000;
    eff4:	mov.w	r0, #1000	; 0x3e8
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
    eff8:	rsb	r2, sl, r2
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    effc:	mov	r8, r1
	if (frac > 1000) frac = 1000;
    effe:	movs	r1, #0
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    f000:	cmp	r1, r3
    f002:	it	eq
    f004:	cmpeq	r0, r8
    f006:	ite	cs
    f008:	movcs	r3, r8
    f00a:	movcc	r3, lr
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
    f00c:	add	r2, r3
    f00e:	cmp	r2, lr
    f010:	bcc.n	f022 <delay+0xae>
			if (--msec == 0) return;
    f012:	subs.w	fp, fp, #1
			start += 1000;
    f016:	add.w	sl, sl, #1000	; 0x3e8

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
			if (--msec == 0) return;
    f01a:	bne.n	efce <delay+0x5a>
			start += 1000;
		}
		yield();
	}
	// TODO...
}
    f01c:	add	sp, #20
    f01e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	while (1) {
		while ((micros() - start) >= 1000) {
			if (--msec == 0) return;
			start += 1000;
		}
		yield();
    f022:	bl	fc48 <yield>
	}
    f026:	b.n	efce <delay+0x5a>
    f028:	bx	lr
    f02a:	nop
    f02c:	.word	0x20046300
    f030:	.word	0x200447a4
    f034:	.word	0x2004479c
    f038:	.word	0xe0001004
    f03c:	.word	0x200447a0

0000f040 <micros>:
	// TODO...
}

uint32_t micros(void)
{
    f040:	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
    f044:	ldr	r2, [pc, #72]	; (f090 <micros+0x50>)
    f046:	movs	r6, #1
    f048:	ldr	r5, [pc, #72]	; (f094 <micros+0x54>)
    f04a:	ldr	r4, [pc, #76]	; (f098 <micros+0x58>)
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    f04c:	ldrex	r3, [r2]
	uint32_t smc, scc;
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
    f050:	ldr	r1, [r5, #0]
		scc = systick_cycle_count;
    f052:	ldr	r0, [r4, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    f054:	strex	r3, r6, [r2]
	} while ( __STREXW(1, &systick_safe_read));
    f058:	cmp	r3, #0
    f05a:	bne.n	f04c <micros+0xc>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    f05c:	ldr	r2, [pc, #60]	; (f09c <micros+0x5c>)
    f05e:	ldr	r6, [r2, #0]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    f060:	ldr	r7, [pc, #60]	; (f0a0 <micros+0x60>)
		smc = systick_millis_count;
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
    f062:	subs	r2, r6, r0
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
	if (frac > 1000) frac = 1000;
    f064:	mov.w	r9, #0
    f068:	mov.w	r8, #1000	; 0x3e8
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    f06c:	ldr	r6, [r7, #0]
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
	return usec;
    f06e:	mov.w	r0, #1000	; 0x3e8
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    f072:	cmp	r9, r3
    f074:	umull	r6, r7, r2, r6
    f078:	it	eq
    f07a:	cmpeq	r8, r7
    f07c:	mov	r4, r7
    f07e:	ite	cs
    f080:	movcs	r4, r7
    f082:	movcc	r4, r0
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
	return usec;
}
    f084:	mla	r0, r0, r1, r4
    f088:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
    f08c:	bx	lr
    f08e:	nop
    f090:	.word	0x20046300
    f094:	.word	0x200447a4
    f098:	.word	0x2004479c
    f09c:	.word	0xe0001004
    f0a0:	.word	0x200447a0

0000f0a4 <unused_interrupt_vector>:
//  R0
// Code from :: https://community.nxp.com/thread/389002
__attribute__((naked))
void unused_interrupt_vector(void)
{
  __asm( ".syntax unified\n"
    f0a4:	movs	r0, #4
    f0a6:	mov	r1, lr
    f0a8:	tst	r0, r1
    f0aa:	beq.n	f0b4 <_MSP>
    f0ac:	mrs	r0, PSP
    f0b0:	b.w	f0c4 <HardFault_HandlerC>

0000f0b4 <_MSP>:
    f0b4:	mrs	r0, MSP
    f0b8:	b.w	f0c4 <HardFault_HandlerC>

0000f0bc <startup_default_early_hook>:
         "B HardFault_HandlerC \n"
         "_MSP: \n"
         "MRS R0, MSP \n"
         "B HardFault_HandlerC \n"
         ".syntax divided\n") ;
}
    f0bc:	bx	lr
    f0be:	nop

0000f0c0 <startup_default_late_hook>:
#endif

extern int main (void);
void startup_default_early_hook(void) {}
void startup_early_hook(void)		__attribute__ ((weak, alias("startup_default_early_hook")));
void startup_default_late_hook(void) {}
    f0c0:	bx	lr
    f0c2:	nop

0000f0c4 <HardFault_HandlerC>:
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
    f0c4:	ldr	r3, [pc, #108]	; (f134 <HardFault_HandlerC+0x70>)
  printf(" _AFSR ::  %x\n", _AFSR);
  printf(" _BFAR ::  %x\n", _BFAR);
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
    f0c6:	movs	r1, #5
    f0c8:	ldr	r2, [pc, #108]	; (f138 <HardFault_HandlerC+0x74>)
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
    f0ca:	movs	r0, #56	; 0x38
         ".syntax divided\n") ;
}

__attribute__((weak))
void HardFault_HandlerC(unsigned int *hardfault_args)
{
    f0cc:	push	{r4, r5, lr}
  printf(" _AFSR ::  %x\n", _AFSR);
  printf(" _BFAR ::  %x\n", _BFAR);
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
    f0ce:	str.w	r1, [r2, #328]	; 0x148
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
  GPIO2_DR_SET = (1 << 3);
    f0d2:	movs	r1, #8
  printf(" _BFAR ::  %x\n", _BFAR);
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
    f0d4:	str.w	r0, [r2, #824]	; 0x338
         ".syntax divided\n") ;
}

__attribute__((weak))
void HardFault_HandlerC(unsigned int *hardfault_args)
{
    f0d8:	sub	sp, #12
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
    f0da:	ldr	r2, [r3, #4]
  GPIO2_DR_SET = (1 << 3);
  GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);

  if ( F_CPU_ACTUAL >= 600000000 )
    f0dc:	ldr	r4, [pc, #92]	; (f13c <HardFault_HandlerC+0x78>)
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
    f0de:	orrs	r2, r1
  GPIO2_DR_SET = (1 << 3);
  GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);

  if ( F_CPU_ACTUAL >= 600000000 )
    f0e0:	ldr	r0, [pc, #92]	; (f140 <HardFault_HandlerC+0x7c>)
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
    f0e2:	str	r2, [r3, #4]
  GPIO2_DR_SET = (1 << 3);
    f0e4:	str.w	r1, [r3, #132]	; 0x84
  GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);
    f0e8:	str.w	r1, [r3, #136]	; 0x88

  if ( F_CPU_ACTUAL >= 600000000 )
    f0ec:	ldr	r3, [r4, #0]
    f0ee:	cmp	r3, r0
    f0f0:	bls.n	f0f8 <HardFault_HandlerC+0x34>
    set_arm_clock(300000000);
    f0f2:	ldr	r0, [pc, #80]	; (f144 <HardFault_HandlerC+0x80>)
    f0f4:	bl	e388 <set_arm_clock>

  while (1)
  {
    GPIO2_DR_SET = (1 << 3); //digitalWrite(13, HIGH);
    f0f8:	ldr	r5, [pc, #56]	; (f134 <HardFault_HandlerC+0x70>)
    f0fa:	movs	r4, #8
    // digitalWrite(13, HIGH);
    for (nn = 0; nn < 2000000/2; nn++) ;
    f0fc:	movs	r0, #0
    f0fe:	ldr	r2, [pc, #72]	; (f148 <HardFault_HandlerC+0x84>)
    GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);
    // digitalWrite(13, LOW);
    for (nn = 0; nn < 18000000/2; nn++) ;
    f100:	ldr	r1, [pc, #72]	; (f14c <HardFault_HandlerC+0x88>)
  if ( F_CPU_ACTUAL >= 600000000 )
    set_arm_clock(300000000);

  while (1)
  {
    GPIO2_DR_SET = (1 << 3); //digitalWrite(13, HIGH);
    f102:	str.w	r4, [r5, #132]	; 0x84
    // digitalWrite(13, HIGH);
    for (nn = 0; nn < 2000000/2; nn++) ;
    f106:	str	r0, [sp, #4]
    f108:	ldr	r3, [sp, #4]
    f10a:	cmp	r3, r2
    f10c:	bhi.n	f11a <HardFault_HandlerC+0x56>
    f10e:	ldr	r3, [sp, #4]
    f110:	adds	r3, #1
    f112:	str	r3, [sp, #4]
    f114:	ldr	r3, [sp, #4]
    f116:	cmp	r3, r2
    f118:	bls.n	f10e <HardFault_HandlerC+0x4a>
    GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);
    f11a:	str.w	r4, [r5, #136]	; 0x88
    // digitalWrite(13, LOW);
    for (nn = 0; nn < 18000000/2; nn++) ;
    f11e:	str	r0, [sp, #4]
    f120:	ldr	r3, [sp, #4]
    f122:	cmp	r3, r1
    f124:	bhi.n	f102 <HardFault_HandlerC+0x3e>
    f126:	ldr	r3, [sp, #4]
    f128:	adds	r3, #1
    f12a:	str	r3, [sp, #4]
    f12c:	ldr	r3, [sp, #4]
    f12e:	cmp	r3, r1
    f130:	bls.n	f126 <HardFault_HandlerC+0x62>
    f132:	b.n	f102 <HardFault_HandlerC+0x3e>
    f134:	.word	0x401bc000
    f138:	.word	0x401f8000
    f13c:	.word	0x20000c2c
    f140:	.word	0x23c345ff
    f144:	.word	0x11e1a300
    f148:	.word	0x000f423f
    f14c:	.word	0x0089543f

0000f150 <_sbrk>:

char *__brkval = (char *)&_heap_start;

void * _sbrk(int incr)
{
        char *prev = __brkval;
    f150:	ldr	r2, [pc, #36]	; (f178 <_sbrk+0x28>)
extern unsigned long _heap_end;

char *__brkval = (char *)&_heap_start;

void * _sbrk(int incr)
{
    f152:	push	{r3, lr}
        char *prev = __brkval;
    f154:	ldr	r3, [r2, #0]
        if (incr != 0) {
    f156:	cbz	r0, f162 <_sbrk+0x12>
                if (prev + incr > (char *)&_heap_end) {
    f158:	add	r0, r3
    f15a:	ldr	r1, [pc, #32]	; (f17c <_sbrk+0x2c>)
    f15c:	cmp	r0, r1
    f15e:	bhi.n	f166 <_sbrk+0x16>
                        errno = ENOMEM;
                        return (void *)-1;
                }
                __brkval = prev + incr;
    f160:	str	r0, [r2, #0]
        }
        return prev;
}
    f162:	mov	r0, r3
    f164:	pop	{r3, pc}
void * _sbrk(int incr)
{
        char *prev = __brkval;
        if (incr != 0) {
                if (prev + incr > (char *)&_heap_end) {
                        errno = ENOMEM;
    f166:	bl	1040c <__errno>
    f16a:	movs	r2, #12
                        return (void *)-1;
    f16c:	mov.w	r3, #4294967295
void * _sbrk(int incr)
{
        char *prev = __brkval;
        if (incr != 0) {
                if (prev + incr > (char *)&_heap_end) {
                        errno = ENOMEM;
    f170:	str	r2, [r0, #0]
                        return (void *)-1;
                }
                __brkval = prev + incr;
        }
        return prev;
}
    f172:	mov	r0, r3
    f174:	pop	{r3, pc}
    f176:	nop
    f178:	.word	0x20000c30
    f17c:	.word	0x20280000

0000f180 <__cxa_pure_virtual>:
}

__attribute__((weak))
void __cxa_pure_virtual()
{
	while (1) asm ("WFI");
    f180:	wfi
    f182:	b.n	f180 <__cxa_pure_virtual>

0000f184 <rtc_get>:
#include "debug/printf.h"


unsigned long rtc_get(void)
{
	uint32_t hi1 = SNVS_HPRTCMR;
    f184:	ldr	r3, [pc, #40]	; (f1b0 <rtc_get+0x2c>)
#include "imxrt.h"
#include "debug/printf.h"


unsigned long rtc_get(void)
{
    f186:	push	{r4, r5}
	uint32_t hi1 = SNVS_HPRTCMR;
    f188:	ldr	r0, [r3, #36]	; 0x24
	uint32_t lo1 = SNVS_HPRTCLR;
	while (1) {
		uint32_t hi2 = SNVS_HPRTCMR;
    f18a:	mov	r4, r3


unsigned long rtc_get(void)
{
	uint32_t hi1 = SNVS_HPRTCMR;
	uint32_t lo1 = SNVS_HPRTCLR;
    f18c:	ldr	r1, [r3, #40]	; 0x28
	while (1) {
		uint32_t hi2 = SNVS_HPRTCMR;
    f18e:	ldr	r2, [r4, #36]	; 0x24
		uint32_t lo2 = SNVS_HPRTCLR;
    f190:	ldr	r3, [r4, #40]	; 0x28
		if (lo1 == lo2 && hi1 == hi2) {
    f192:	cmp	r1, r3
    f194:	it	eq
    f196:	cmpeq	r0, r2
unsigned long rtc_get(void)
{
	uint32_t hi1 = SNVS_HPRTCMR;
	uint32_t lo1 = SNVS_HPRTCLR;
	while (1) {
		uint32_t hi2 = SNVS_HPRTCMR;
    f198:	mov	r0, r2
		uint32_t lo2 = SNVS_HPRTCLR;
    f19a:	mov	r1, r3
		if (lo1 == lo2 && hi1 == hi2) {
    f19c:	ite	eq
    f19e:	moveq	r5, #1
    f1a0:	movne	r5, #0
    f1a2:	cmp	r5, #0
    f1a4:	beq.n	f18e <rtc_get+0xa>
			return (hi2 << 17) | (lo2 >> 15);
    f1a6:	lsrs	r1, r3, #15
		}
		hi1 = hi2;
		lo1 = lo2;
	}
}
    f1a8:	pop	{r4, r5}
    f1aa:	orr.w	r0, r1, r2, lsl #17
    f1ae:	bx	lr
    f1b0:	.word	0x400d4000

0000f1b4 <ultoa>:
#include <stdlib.h>
#include <math.h>


char * ultoa(unsigned long val, char *buf, int radix)
{
    f1b4:	push	{r4, r5, r6, r7}
    f1b6:	subs	r6, r1, #1
	unsigned digit;
	int i=0, j;
    f1b8:	movs	r5, #0
#include <stdlib.h>
#include <math.h>


char * ultoa(unsigned long val, char *buf, int radix)
{
    f1ba:	mov	r7, r6
    f1bc:	b.n	f1c0 <ultoa+0xc>
	while (1) {
		digit = val % radix;
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
		val /= radix;
		if (val == 0) break;
		i++;
    f1be:	adds	r5, #1
	unsigned digit;
	int i=0, j;
	char t;

	while (1) {
		digit = val % radix;
    f1c0:	udiv	r3, r0, r2
    f1c4:	mls	r0, r2, r3, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    f1c8:	add.w	r4, r0, #55	; 0x37
    f1cc:	cmp	r0, #9
    f1ce:	add.w	r0, r0, #48	; 0x30
    f1d2:	uxtb	r4, r4
    f1d4:	it	ls
    f1d6:	uxtbls	r4, r0
		val /= radix;
		if (val == 0) break;
    f1d8:	mov	r0, r3
	int i=0, j;
	char t;

	while (1) {
		digit = val % radix;
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    f1da:	strb.w	r4, [r7, #1]!
		val /= radix;
		if (val == 0) break;
    f1de:	cmp	r3, #0
    f1e0:	bne.n	f1be <ultoa+0xa>
		i++;
	}
	buf[i + 1] = 0;
    f1e2:	adds	r2, r1, r5
    f1e4:	strb	r3, [r2, #1]
	for (j=0; j < i; j++, i--) {
    f1e6:	cbz	r5, f1fc <ultoa+0x48>
    f1e8:	adds	r3, #1
		t = buf[j];
    f1ea:	ldrb.w	r4, [r6, #1]!
		buf[j] = buf[i];
    f1ee:	ldrb	r7, [r2, #0]
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    f1f0:	subs	r0, r5, r3
		t = buf[j];
		buf[j] = buf[i];
    f1f2:	strb	r7, [r6, #0]
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    f1f4:	cmp	r3, r0
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
    f1f6:	strb.w	r4, [r2], #-1
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    f1fa:	blt.n	f1e8 <ultoa+0x34>
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
	}
	return buf;
}
    f1fc:	mov	r0, r1
    f1fe:	pop	{r4, r5, r6, r7}
    f200:	bx	lr
    f202:	nop

0000f204 <dtostrf>:
	int decpt, sign, reqd, pad;
	const char *s, *e;
	char *p;

	int awidth = abs(width);
	if (isnanf(val)) {
    f204:	vcmp.f32	s0, s0
{
	int decpt, sign, reqd, pad;
	const char *s, *e;
	char *p;

	int awidth = abs(width);
    f208:	eor.w	r3, r0, r0, asr #31
char * fcvtf(float, int, int *, int *);
int isnanf (float x);
int isinff (float x);

char * dtostrf(float val, int width, unsigned int precision, char *buf)
{
    f20c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	int decpt, sign, reqd, pad;
	const char *s, *e;
	char *p;

	int awidth = abs(width);
	if (isnanf(val)) {
    f210:	vmrs	APSR_nzcv, fpscr
char * fcvtf(float, int, int *, int *);
int isnanf (float x);
int isinff (float x);

char * dtostrf(float val, int width, unsigned int precision, char *buf)
{
    f214:	mov	r5, r0
    f216:	mov	r4, r2
	int decpt, sign, reqd, pad;
	const char *s, *e;
	char *p;

	int awidth = abs(width);
    f218:	sub.w	r3, r3, r0, asr #31
char * fcvtf(float, int, int *, int *);
int isnanf (float x);
int isinff (float x);

char * dtostrf(float val, int width, unsigned int precision, char *buf)
{
    f21c:	vpush	{d8}
    f220:	vmov.f32	s16, s0
    f224:	sub	sp, #16
	int decpt, sign, reqd, pad;
	const char *s, *e;
	char *p;

	int awidth = abs(width);
	if (isnanf(val)) {
    f226:	bvs.w	f470 <dtostrf+0x26c>
			awidth--;
		}
		*buf = 0;
		return buf;
	}
	if (isinff(val)) {
    f22a:	vabs.f32	s15, s0
    f22e:	vldr	s14, [pc, #792]	; f548 <dtostrf+0x344>
    f232:	vcmp.f32	s15, s14
    f236:	vmrs	APSR_nzcv, fpscr
    f23a:	ble.n	f2c2 <dtostrf+0xbe>
		int ndigs = (val<0) ? 4 : 3;
    f23c:	vcmpe.f32	s0, #0.0
    f240:	vmrs	APSR_nzcv, fpscr
    f244:	ite	mi
    f246:	movmi	r2, #4
    f248:	movpl	r2, #3
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
    f24a:	cmp	r2, r3
    f24c:	blt.n	f292 <dtostrf+0x8e>
		if (width<0) {
    f24e:	cmp	r0, #0
    f250:	blt.w	f534 <dtostrf+0x330>
		*buf = 0;
		return buf;
	}
	if (isinff(val)) {
		int ndigs = (val<0) ? 4 : 3;
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
    f254:	movs	r2, #0
			while (awidth) {
				*buf++ = ' ';
				awidth--;
			}
		}
		if (val<0) *buf++ = '-';
    f256:	vcmpe.f32	s16, #0.0
    f25a:	vmrs	APSR_nzcv, fpscr
    f25e:	bmi.w	f4f6 <dtostrf+0x2f2>
		if (DTOA_UPPER) {
			*buf++ = 'I';  *buf++ = 'N';  *buf++ = 'F';
    f262:	movs	r5, #73	; 0x49
    f264:	movs	r0, #78	; 0x4e
    f266:	movs	r1, #70	; 0x46
    f268:	adds	r3, r4, #3
    f26a:	strb	r5, [r4, #0]
    f26c:	strb	r0, [r4, #1]
    f26e:	strb	r1, [r4, #2]
		} else {
			*buf++ = 'i';  *buf++ = 'n';  *buf++ = 'f';
		}
		while (awidth) {
    f270:	cmp	r2, #0
    f272:	beq.w	f544 <dtostrf+0x340>
    f276:	add	r2, r3
			*buf++ = ' ';
    f278:	movs	r1, #32
    f27a:	strb.w	r1, [r3], #1
		if (DTOA_UPPER) {
			*buf++ = 'I';  *buf++ = 'N';  *buf++ = 'F';
		} else {
			*buf++ = 'i';  *buf++ = 'n';  *buf++ = 'f';
		}
		while (awidth) {
    f27e:	cmp	r2, r3
    f280:	bne.n	f27a <dtostrf+0x76>
			*buf++ = ' ';
			awidth--;
		}
		*buf = 0;
    f282:	movs	r3, #0
		return buf;
    f284:	mov	r0, r2
		}
		while (awidth) {
			*buf++ = ' ';
			awidth--;
		}
		*buf = 0;
    f286:	strb	r3, [r2, #0]

	//char format[20];
	//sprintf(format, "%%%d.%df", width, precision);
	//sprintf(buf, format, val);
	return buf;
}
    f288:	add	sp, #16
    f28a:	vpop	{d8}
    f28e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return buf;
	}
	if (isinff(val)) {
		int ndigs = (val<0) ? 4 : 3;
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
		if (width<0) {
    f292:	cmp	r0, #0
		*buf = 0;
		return buf;
	}
	if (isinff(val)) {
		int ndigs = (val<0) ? 4 : 3;
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
    f294:	sub.w	r2, r3, r2
		if (width<0) {
    f298:	bge.n	f256 <dtostrf+0x52>
			while (awidth) {
    f29a:	cmp	r2, #0
    f29c:	beq.w	f534 <dtostrf+0x330>
    f2a0:	adds	r3, r4, r2
				*buf++ = ' ';
    f2a2:	movs	r2, #32
    f2a4:	strb.w	r2, [r4], #1
	}
	if (isinff(val)) {
		int ndigs = (val<0) ? 4 : 3;
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
		if (width<0) {
			while (awidth) {
    f2a8:	cmp	r4, r3
    f2aa:	bne.n	f2a4 <dtostrf+0xa0>
				*buf++ = ' ';
				awidth--;
			}
		}
		if (val<0) *buf++ = '-';
    f2ac:	vcmpe.f32	s16, #0.0
    f2b0:	vmrs	APSR_nzcv, fpscr
    f2b4:	bpl.w	f4e6 <dtostrf+0x2e2>
    f2b8:	movs	r2, #0
    f2ba:	movs	r1, #45	; 0x2d
    f2bc:	adds	r4, r3, #1
    f2be:	strb	r1, [r3, #0]
    f2c0:	b.n	f262 <dtostrf+0x5e>
    f2c2:	mov	r7, r1
		}
		*buf = 0;
		return buf;
	}

	s = fcvtf(val, precision, &decpt, &sign);
    f2c4:	add	r2, sp, #8
    f2c6:	add	r1, sp, #4
    f2c8:	mov	r0, r7
    f2ca:	mov	sl, r7
    f2cc:	bl	10400 <fcvtf>

	// if only 1 digit in output
	if (precision == 0 && decpt == 0) {
    f2d0:	ldr.w	r9, [sp, #4]
		}
		*buf = 0;
		return buf;
	}

	s = fcvtf(val, precision, &decpt, &sign);
    f2d4:	mov	r8, r0

	// if only 1 digit in output
	if (precision == 0 && decpt == 0) {
    f2d6:	cmp	r7, #0
    f2d8:	beq.w	f3ea <dtostrf+0x1e6>
    f2dc:	rsb	r3, r9, #0
		s = (*s < '5') ? "0" : "1";
		decpt++;
	}

	// if all zeros, limit to precision
	if (-decpt  > (int)precision) {
    f2e0:	cmp	r3, r7
    f2e2:	bgt.w	f45e <dtostrf+0x25a>
    f2e6:	mov	r0, r8
    f2e8:	bl	11240 <strlen>
    f2ec:	mov	r6, r0
	}

	reqd = strlen(s);

	// add 1 for decimal point
	if (reqd > decpt) reqd++;
    f2ee:	cmp	r9, r6
    f2f0:	it	lt
    f2f2:	addlt	r6, #1

	// add 1 for zero in front of decimal point
	if (decpt == 0) reqd++;
    f2f4:	cmp.w	r9, #0
    f2f8:	beq.w	f45a <dtostrf+0x256>

	// if leading zeros after decimal point
	if (decpt < 0 && precision > 0) {
    f2fc:	cmp.w	r9, #0
    f300:	bge.n	f348 <dtostrf+0x144>
    f302:	cbz	r7, f348 <dtostrf+0x144>
		// ensure enough trailing zeros, add 2 for '0.'
		reqd = precision + 2;

		if (strlen(s) > precision + decpt) {
    f304:	add.w	r3, r9, r7
	if (decpt == 0) reqd++;

	// if leading zeros after decimal point
	if (decpt < 0 && precision > 0) {
		// ensure enough trailing zeros, add 2 for '0.'
		reqd = precision + 2;
    f308:	adds	r6, r7, #2

		if (strlen(s) > precision + decpt) {
    f30a:	cmp	r3, r0
    f30c:	bcs.n	f348 <dtostrf+0x144>

			int newPrecision = precision;
			int newDecimalPoint;

			// shift decimal point
			while (newPrecision > 0) {
    f30e:	cmp	r7, #0
    f310:	ble.n	f320 <dtostrf+0x11c>
				val *= 10.0f;
    f312:	vmov.f32	s15, #36	; 0x41200000  10.0

			int newPrecision = precision;
			int newDecimalPoint;

			// shift decimal point
			while (newPrecision > 0) {
    f316:	subs.w	sl, sl, #1
				val *= 10.0f;
    f31a:	vmul.f32	s16, s16, s15

			int newPrecision = precision;
			int newDecimalPoint;

			// shift decimal point
			while (newPrecision > 0) {
    f31e:	bne.n	f316 <dtostrf+0x112>
				val *= 10.0f;
				newPrecision--;
			}

			// round after accounting for leading 0's
			s = fcvtf(val, newPrecision, &newDecimalPoint, &sign);
    f320:	add	r2, sp, #8
    f322:	mov	r0, sl
    f324:	vmov.f32	s0, s16
    f328:	add	r1, sp, #12
    f32a:	bl	10400 <fcvtf>

			// if rounded up to new digit (e.g. 0.09 to 0.1), move decimal point
			if (newDecimalPoint - decpt == precision + 1) decpt++;
    f32e:	ldr.w	r9, [sp, #4]
    f332:	ldr	r2, [sp, #12]
    f334:	adds	r3, r7, #1
				val *= 10.0f;
				newPrecision--;
			}

			// round after accounting for leading 0's
			s = fcvtf(val, newPrecision, &newDecimalPoint, &sign);
    f336:	mov	r8, r0

			// if rounded up to new digit (e.g. 0.09 to 0.1), move decimal point
			if (newDecimalPoint - decpt == precision + 1) decpt++;
    f338:	rsb	r2, r9, r2
    f33c:	cmp	r2, r3
    f33e:	bne.n	f348 <dtostrf+0x144>
    f340:	add.w	r9, r9, #1
    f344:	str.w	r9, [sp, #4]
		}
	}

	// add 1 for sign if negative
	if (sign) reqd++;
    f348:	ldr.w	lr, [sp, #8]
    f34c:	cmp.w	lr, #0
    f350:	beq.n	f410 <dtostrf+0x20c>
    f352:	adds	r6, #1

	p = buf;
	e = p + reqd;
	pad = width - reqd;
    f354:	subs	r0, r5, r6

	// add 1 for sign if negative
	if (sign) reqd++;

	p = buf;
	e = p + reqd;
    f356:	adds	r1, r4, r6
	pad = width - reqd;
	if (pad > 0) {
    f358:	cmp	r0, #0
    f35a:	bgt.n	f41a <dtostrf+0x216>
	}

	// add 1 for sign if negative
	if (sign) reqd++;

	p = buf;
    f35c:	mov	r2, r4
	pad = width - reqd;
	if (pad > 0) {
		e += pad;
		while (pad-- > 0) *p++ = ' ';
	}
	if (sign) *p++ = '-';
    f35e:	movs	r0, #45	; 0x2d
    f360:	adds	r3, r2, #1
    f362:	strb	r0, [r2, #0]
	if (decpt == 0 && precision > 0) {
    f364:	cmp.w	r9, #0
    f368:	beq.n	f446 <dtostrf+0x242>
		*p++ = '0';
		*p++ = '.';
	}
	else if (decpt < 0 && precision > 0) {
    f36a:	cbz	r7, f38e <dtostrf+0x18a>
    f36c:	cmp.w	r9, #0
    f370:	bge.n	f38e <dtostrf+0x18a>
		*p++ = '0';
    f372:	mov	r2, r3
    f374:	movs	r0, #48	; 0x30
		*p++ = '.';
    f376:	movs	r7, #46	; 0x2e
	if (decpt == 0 && precision > 0) {
		*p++ = '0';
		*p++ = '.';
	}
	else if (decpt < 0 && precision > 0) {
		*p++ = '0';
    f378:	strb.w	r0, [r2], #2
		*p++ = '.';
    f37c:	strb	r7, [r3, #1]
    f37e:	rsb	r3, r9, r2
		// print leading zeros
		while ( decpt < 0 ) {
			decpt++;
			*p++ = '0';
    f382:	strb.w	r0, [r2], #1
	}
	else if (decpt < 0 && precision > 0) {
		*p++ = '0';
		*p++ = '.';
		// print leading zeros
		while ( decpt < 0 ) {
    f386:	cmp	r2, r3
    f388:	bne.n	f382 <dtostrf+0x17e>
    f38a:	movs	r2, #0
    f38c:	str	r2, [sp, #4]
			decpt++;
			*p++ = '0';
		}
	}
	// print digits
	while (p < e) {
    f38e:	cmp	r3, r1
    f390:	bcs.n	f3d4 <dtostrf+0x1d0>
		*p++ = *s++;
    f392:	adds	r7, r3, #1
    f394:	ldrb.w	r2, [r8]
    f398:	add.w	r8, r8, #1
		if (p == e) break;
    f39c:	cmp	r7, r1
			*p++ = '0';
		}
	}
	// print digits
	while (p < e) {
		*p++ = *s++;
    f39e:	strb	r2, [r3, #0]
		if (p == e) break;
    f3a0:	beq.n	f3d6 <dtostrf+0x1d2>
    f3a2:	ldr	r2, [sp, #4]
		if (--decpt == 0) *p++ = '.';
    f3a4:	mov.w	lr, #46	; 0x2e
    f3a8:	b.n	f3c2 <dtostrf+0x1be>
    f3aa:	strb.w	lr, [r3, #1]
    f3ae:	adds	r3, #2
			decpt++;
			*p++ = '0';
		}
	}
	// print digits
	while (p < e) {
    f3b0:	cmp	r3, r1
		*p++ = *s++;
    f3b2:	add.w	r7, r3, #1
			decpt++;
			*p++ = '0';
		}
	}
	// print digits
	while (p < e) {
    f3b6:	bcs.n	f3d4 <dtostrf+0x1d0>
		*p++ = *s++;
    f3b8:	ldrb.w	r0, [r8], #1
		if (p == e) break;
    f3bc:	cmp	r7, r1
			*p++ = '0';
		}
	}
	// print digits
	while (p < e) {
		*p++ = *s++;
    f3be:	strb	r0, [r3, #0]
		if (p == e) break;
    f3c0:	beq.n	f3d6 <dtostrf+0x1d2>
		if (--decpt == 0) *p++ = '.';
    f3c2:	subs	r2, #1
    f3c4:	str	r2, [sp, #4]
    f3c6:	cmp	r2, #0
    f3c8:	beq.n	f3aa <dtostrf+0x1a6>
    f3ca:	mov	r3, r7
			decpt++;
			*p++ = '0';
		}
	}
	// print digits
	while (p < e) {
    f3cc:	cmp	r3, r1
		*p++ = *s++;
    f3ce:	add.w	r7, r3, #1
			decpt++;
			*p++ = '0';
		}
	}
	// print digits
	while (p < e) {
    f3d2:	bcc.n	f3b8 <dtostrf+0x1b4>
    f3d4:	mov	r1, r3
		*p++ = *s++;
		if (p == e) break;
		if (--decpt == 0) *p++ = '.';
	}
	if (width < 0) {
    f3d6:	cmp	r5, #0
    f3d8:	blt.n	f4be <dtostrf+0x2ba>
		pad = (reqd + width) * -1;
		while (pad-- > 0) *p++ = ' ';
	}
	*p = 0;
    f3da:	movs	r3, #0

	//char format[20];
	//sprintf(format, "%%%d.%df", width, precision);
	//sprintf(buf, format, val);
	return buf;
    f3dc:	mov	r0, r4
	}
	if (width < 0) {
		pad = (reqd + width) * -1;
		while (pad-- > 0) *p++ = ' ';
	}
	*p = 0;
    f3de:	strb	r3, [r1, #0]

	//char format[20];
	//sprintf(format, "%%%d.%df", width, precision);
	//sprintf(buf, format, val);
	return buf;
}
    f3e0:	add	sp, #16
    f3e2:	vpop	{d8}
    f3e6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	}

	s = fcvtf(val, precision, &decpt, &sign);

	// if only 1 digit in output
	if (precision == 0 && decpt == 0) {
    f3ea:	cmp.w	r9, #0
    f3ee:	bne.w	f2dc <dtostrf+0xd8>
		// round and move decimal point
		s = (*s < '5') ? "0" : "1";
		decpt++;
    f3f2:	movs	r3, #1
	s = fcvtf(val, precision, &decpt, &sign);

	// if only 1 digit in output
	if (precision == 0 && decpt == 0) {
		// round and move decimal point
		s = (*s < '5') ? "0" : "1";
    f3f4:	ldrb.w	r8, [r0]
    f3f8:	ldr	r1, [pc, #336]	; (f54c <dtostrf+0x348>)
    f3fa:	ldr	r2, [pc, #340]	; (f550 <dtostrf+0x34c>)
		decpt++;
    f3fc:	mov	r9, r3
    f3fe:	str	r3, [sp, #4]
    f400:	mov.w	r3, #4294967295
	s = fcvtf(val, precision, &decpt, &sign);

	// if only 1 digit in output
	if (precision == 0 && decpt == 0) {
		// round and move decimal point
		s = (*s < '5') ? "0" : "1";
    f404:	cmp.w	r8, #52	; 0x34
    f408:	ite	hi
    f40a:	movhi	r8, r1
    f40c:	movls	r8, r2
    f40e:	b.n	f2e0 <dtostrf+0xdc>
	// add 1 for sign if negative
	if (sign) reqd++;

	p = buf;
	e = p + reqd;
	pad = width - reqd;
    f410:	subs	r0, r5, r6

	// add 1 for sign if negative
	if (sign) reqd++;

	p = buf;
	e = p + reqd;
    f412:	adds	r1, r4, r6
	pad = width - reqd;
	if (pad > 0) {
    f414:	cmp	r0, #0
    f416:	ble.w	f540 <dtostrf+0x33c>
		e += pad;
    f41a:	add	r1, r0
		decpt++;
	}

	// if all zeros, limit to precision
	if (-decpt  > (int)precision) {
		s = "0";
    f41c:	mov	r2, r4
	p = buf;
	e = p + reqd;
	pad = width - reqd;
	if (pad > 0) {
		e += pad;
		while (pad-- > 0) *p++ = ' ';
    f41e:	subs	r0, #1
    f420:	mov.w	ip, #32
    f424:	strb.w	ip, [r2], #1
    f428:	rsb	r3, r2, #1
    f42c:	add	r3, r0
    f42e:	add	r3, r4
    f430:	cmp	r3, #0
    f432:	bgt.n	f424 <dtostrf+0x220>
    f434:	bic.w	r3, r0, r0, asr #31
    f438:	adds	r3, #1
    f43a:	add	r3, r4
	}
	if (sign) *p++ = '-';
    f43c:	cmp.w	lr, #0
    f440:	beq.n	f364 <dtostrf+0x160>
	p = buf;
	e = p + reqd;
	pad = width - reqd;
	if (pad > 0) {
		e += pad;
		while (pad-- > 0) *p++ = ' ';
    f442:	mov	r2, r3
    f444:	b.n	f35e <dtostrf+0x15a>
	}
	if (sign) *p++ = '-';
	if (decpt == 0 && precision > 0) {
    f446:	cmp	r7, #0
    f448:	beq.n	f38e <dtostrf+0x18a>
		*p++ = '0';
    f44a:	mov	r2, r3
    f44c:	movs	r7, #48	; 0x30
		*p++ = '.';
    f44e:	movs	r0, #46	; 0x2e
		e += pad;
		while (pad-- > 0) *p++ = ' ';
	}
	if (sign) *p++ = '-';
	if (decpt == 0 && precision > 0) {
		*p++ = '0';
    f450:	strb.w	r7, [r2], #2
		*p++ = '.';
    f454:	strb	r0, [r3, #1]
    f456:	mov	r3, r2
    f458:	b.n	f38e <dtostrf+0x18a>

	// add 1 for decimal point
	if (reqd > decpt) reqd++;

	// add 1 for zero in front of decimal point
	if (decpt == 0) reqd++;
    f45a:	adds	r6, #1
    f45c:	b.n	f348 <dtostrf+0x144>
	}

	// if all zeros, limit to precision
	if (-decpt  > (int)precision) {
		s = "0";
		decpt = -precision;
    f45e:	movs	r6, #1
    f460:	rsb	r9, r7, #0
		decpt++;
	}

	// if all zeros, limit to precision
	if (-decpt  > (int)precision) {
		s = "0";
    f464:	ldr.w	r8, [pc, #232]	; f550 <dtostrf+0x34c>
		decpt = -precision;
    f468:	mov	r0, r6
    f46a:	str.w	r9, [sp, #4]
    f46e:	b.n	f2ee <dtostrf+0xea>
	const char *s, *e;
	char *p;

	int awidth = abs(width);
	if (isnanf(val)) {
		int ndigs = (val<0) ? 4 : 3;
    f470:	vcmpe.f32	s0, #0.0
    f474:	vmrs	APSR_nzcv, fpscr
    f478:	ite	mi
    f47a:	movmi	r2, #4
    f47c:	movpl	r2, #3
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
    f47e:	cmp	r2, r3
    f480:	bge.n	f4fa <dtostrf+0x2f6>
		if (width<0) {
    f482:	cmp	r0, #0
	char *p;

	int awidth = abs(width);
	if (isnanf(val)) {
		int ndigs = (val<0) ? 4 : 3;
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
    f484:	sub.w	r3, r3, r2
		if (width<0) {
    f488:	blt.n	f50c <dtostrf+0x308>
			while (awidth) {
				*buf++ = ' ';
				awidth--;
			}
		}
		if (copysignf(1.0f, val)<0) *buf++ = '-';
    f48a:	vmov	r2, s16
    f48e:	cmp	r2, #0
    f490:	blt.n	f502 <dtostrf+0x2fe>
		if (DTOA_UPPER) {
			*buf++ = 'N';  *buf++ = 'A';  *buf++ = 'N';
    f492:	movs	r1, #78	; 0x4e
    f494:	movs	r0, #65	; 0x41
    f496:	adds	r2, r4, #3
    f498:	strb	r1, [r4, #0]
    f49a:	strb	r1, [r4, #2]
    f49c:	strb	r0, [r4, #1]
		} else {
			*buf++ = 'n';  *buf++ = 'a';  *buf++ = 'n';
		}
		while (awidth) {
    f49e:	cmp	r3, #0
    f4a0:	beq.n	f53c <dtostrf+0x338>
    f4a2:	add	r3, r2
			*buf++ = ' ';
    f4a4:	movs	r1, #32
    f4a6:	strb.w	r1, [r2], #1
		if (DTOA_UPPER) {
			*buf++ = 'N';  *buf++ = 'A';  *buf++ = 'N';
		} else {
			*buf++ = 'n';  *buf++ = 'a';  *buf++ = 'n';
		}
		while (awidth) {
    f4aa:	cmp	r2, r3
    f4ac:	bne.n	f4a6 <dtostrf+0x2a2>
			*buf++ = ' ';
			awidth--;
		}
		*buf = 0;
    f4ae:	movs	r2, #0
		return buf;
    f4b0:	mov	r0, r3
		}
		while (awidth) {
			*buf++ = ' ';
			awidth--;
		}
		*buf = 0;
    f4b2:	strb	r2, [r3, #0]

	//char format[20];
	//sprintf(format, "%%%d.%df", width, precision);
	//sprintf(buf, format, val);
	return buf;
}
    f4b4:	add	sp, #16
    f4b6:	vpop	{d8}
    f4ba:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		*p++ = *s++;
		if (p == e) break;
		if (--decpt == 0) *p++ = '.';
	}
	if (width < 0) {
		pad = (reqd + width) * -1;
    f4be:	adds	r0, r5, r6
		while (pad-- > 0) *p++ = ' ';
    f4c0:	negs	r3, r0
    f4c2:	mvns	r0, r0
    f4c4:	cmp	r3, #0
    f4c6:	ble.n	f3da <dtostrf+0x1d6>
    f4c8:	mov	r2, r1
    f4ca:	movs	r5, #32
    f4cc:	strb.w	r5, [r2], #1
    f4d0:	rsb	r3, r2, #1
    f4d4:	add	r3, r0
    f4d6:	add	r3, r1
    f4d8:	cmp	r3, #0
    f4da:	bgt.n	f4cc <dtostrf+0x2c8>
    f4dc:	bic.w	r3, r0, r0, asr #31
    f4e0:	adds	r3, #1
    f4e2:	add	r1, r3
    f4e4:	b.n	f3da <dtostrf+0x1d6>
				awidth--;
			}
		}
		if (val<0) *buf++ = '-';
		if (DTOA_UPPER) {
			*buf++ = 'I';  *buf++ = 'N';  *buf++ = 'F';
    f4e6:	movs	r4, #73	; 0x49
    f4e8:	movs	r0, #78	; 0x4e
    f4ea:	movs	r1, #70	; 0x46
    f4ec:	adds	r2, r3, #3
    f4ee:	strb	r4, [r3, #0]
    f4f0:	strb	r0, [r3, #1]
    f4f2:	strb	r1, [r3, #2]
    f4f4:	b.n	f282 <dtostrf+0x7e>
    f4f6:	mov	r3, r4
    f4f8:	b.n	f2ba <dtostrf+0xb6>

	int awidth = abs(width);
	if (isnanf(val)) {
		int ndigs = (val<0) ? 4 : 3;
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
		if (width<0) {
    f4fa:	cmp	r0, #0
    f4fc:	blt.n	f530 <dtostrf+0x32c>
	char *p;

	int awidth = abs(width);
	if (isnanf(val)) {
		int ndigs = (val<0) ? 4 : 3;
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
    f4fe:	movs	r3, #0
    f500:	b.n	f48a <dtostrf+0x286>
    f502:	mov	r2, r4
			while (awidth) {
				*buf++ = ' ';
				awidth--;
			}
		}
		if (copysignf(1.0f, val)<0) *buf++ = '-';
    f504:	movs	r1, #45	; 0x2d
    f506:	adds	r4, r2, #1
    f508:	strb	r1, [r2, #0]
    f50a:	b.n	f492 <dtostrf+0x28e>
	int awidth = abs(width);
	if (isnanf(val)) {
		int ndigs = (val<0) ? 4 : 3;
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
		if (width<0) {
			while (awidth) {
    f50c:	cbz	r3, f530 <dtostrf+0x32c>
    f50e:	adds	r2, r4, r3
				*buf++ = ' ';
    f510:	movs	r3, #32
    f512:	strb.w	r3, [r4], #1
	int awidth = abs(width);
	if (isnanf(val)) {
		int ndigs = (val<0) ? 4 : 3;
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
		if (width<0) {
			while (awidth) {
    f516:	cmp	r4, r2
    f518:	bne.n	f512 <dtostrf+0x30e>
				*buf++ = ' ';
				awidth--;
			}
		}
		if (copysignf(1.0f, val)<0) *buf++ = '-';
    f51a:	vmov	r3, s16
    f51e:	cmp	r3, #0
    f520:	blt.n	f538 <dtostrf+0x334>
		if (DTOA_UPPER) {
			*buf++ = 'N';  *buf++ = 'A';  *buf++ = 'N';
    f522:	movs	r1, #78	; 0x4e
    f524:	movs	r0, #65	; 0x41
    f526:	adds	r3, r2, #3
    f528:	strb	r1, [r2, #0]
    f52a:	strb	r1, [r2, #2]
    f52c:	strb	r0, [r2, #1]
    f52e:	b.n	f4ae <dtostrf+0x2aa>

	int awidth = abs(width);
	if (isnanf(val)) {
		int ndigs = (val<0) ? 4 : 3;
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
		if (width<0) {
    f530:	mov	r2, r4
    f532:	b.n	f51a <dtostrf+0x316>
		return buf;
	}
	if (isinff(val)) {
		int ndigs = (val<0) ? 4 : 3;
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
		if (width<0) {
    f534:	mov	r3, r4
    f536:	b.n	f2ac <dtostrf+0xa8>
			while (awidth) {
				*buf++ = ' ';
				awidth--;
			}
		}
		if (copysignf(1.0f, val)<0) *buf++ = '-';
    f538:	movs	r3, #0
    f53a:	b.n	f504 <dtostrf+0x300>
		if (DTOA_UPPER) {
			*buf++ = 'N';  *buf++ = 'A';  *buf++ = 'N';
    f53c:	mov	r3, r2
    f53e:	b.n	f4ae <dtostrf+0x2aa>
	}

	// add 1 for sign if negative
	if (sign) reqd++;

	p = buf;
    f540:	mov	r3, r4
    f542:	b.n	f364 <dtostrf+0x160>
				awidth--;
			}
		}
		if (val<0) *buf++ = '-';
		if (DTOA_UPPER) {
			*buf++ = 'I';  *buf++ = 'N';  *buf++ = 'F';
    f544:	mov	r2, r3
    f546:	b.n	f282 <dtostrf+0x7e>
    f548:	.word	0x7f7fffff
    f54c:	.word	0x2000058c
    f550:	.word	0x20000588

0000f554 <Panic_Temp_isr>:

static uint32_t s_hotTemp, s_hotCount, s_roomC_hotC;
static float s_hot_ROOM;

void Panic_Temp_isr(void) {
  __disable_irq();
    f554:	cpsid	i
  IOMUXC_GPR_GPR16 = 0x00000007;
  SNVS_LPCR |= SNVS_LPCR_TOP; //Switch off now
    f556:	ldr	r2, [pc, #24]	; (f570 <Panic_Temp_isr+0x1c>)
static uint32_t s_hotTemp, s_hotCount, s_roomC_hotC;
static float s_hot_ROOM;

void Panic_Temp_isr(void) {
  __disable_irq();
  IOMUXC_GPR_GPR16 = 0x00000007;
    f558:	movs	r1, #7
    f55a:	ldr	r3, [pc, #24]	; (f574 <Panic_Temp_isr+0x20>)
    f55c:	str	r1, [r3, #64]	; 0x40
  SNVS_LPCR |= SNVS_LPCR_TOP; //Switch off now
    f55e:	ldr	r3, [r2, #56]	; 0x38
    f560:	orr.w	r3, r3, #64	; 0x40
    f564:	str	r3, [r2, #56]	; 0x38
  asm volatile ("dsb":::"memory");
    f566:	dsb	sy
  while (1) asm ("wfi");
    f56a:	wfi
    f56c:	b.n	f56a <Panic_Temp_isr+0x16>
    f56e:	nop
    f570:	.word	0x400d4000
    f574:	.word	0x400ac000

0000f578 <digitalWrite.part.0>:
{
	const struct digital_pin_bitband_and_config_table_struct *p;
	uint32_t pinmode, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
    f578:	lsls	r0, r0, #4
    f57a:	ldr	r3, [pc, #60]	; (f5b8 <digitalWrite.part.0+0x40>)
    f57c:	adds	r2, r3, r0
	pinmode = *(p->reg + 1);
    f57e:	ldr	r3, [r3, r0]
	{&CORE_PIN53_PORTREG, &CORE_PIN53_CONFIG, &CORE_PIN53_PADCONFIG, CORE_PIN53_BITMASK},
	{&CORE_PIN54_PORTREG, &CORE_PIN54_CONFIG, &CORE_PIN54_PADCONFIG, CORE_PIN54_BITMASK},
#endif
};

void digitalWrite(uint8_t pin, uint8_t val)
    f580:	push	{r4}
	uint32_t pinmode, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	pinmode = *(p->reg + 1);
	mask = p->mask;
    f582:	ldr	r0, [r2, #12]
	const struct digital_pin_bitband_and_config_table_struct *p;
	uint32_t pinmode, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	pinmode = *(p->reg + 1);
    f584:	ldr	r4, [r3, #4]
	mask = p->mask;
	if (pinmode & mask) {
    f586:	tst	r4, r0
    f588:	beq.n	f596 <digitalWrite.part.0+0x1e>
		// pin is configured for output mode
		if (val) {
    f58a:	cbz	r1, f5a4 <digitalWrite.part.0+0x2c>
			*(p->reg + 0x21) = mask; // set register
    f58c:	str.w	r0, [r3, #132]	; 0x84
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		}
	}
}
    f590:	ldr.w	r4, [sp], #4
    f594:	bx	lr
		}
	} else {
		// pin is configured for input mode
		// value controls PULLUP/PULLDOWN resistors
		if (val) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    f596:	ldr	r3, [r2, #8]
			*(p->reg + 0x22) = mask; // clear register
		}
	} else {
		// pin is configured for input mode
		// value controls PULLUP/PULLDOWN resistors
		if (val) {
    f598:	cbnz	r1, f5ae <digitalWrite.part.0+0x36>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    f59a:	ldr	r2, [pc, #32]	; (f5bc <digitalWrite.part.0+0x44>)
		}
	}
}
    f59c:	ldr.w	r4, [sp], #4
		// pin is configured for input mode
		// value controls PULLUP/PULLDOWN resistors
		if (val) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    f5a0:	str	r2, [r3, #0]
		}
	}
}
    f5a2:	bx	lr
	if (pinmode & mask) {
		// pin is configured for output mode
		if (val) {
			*(p->reg + 0x21) = mask; // set register
		} else {
			*(p->reg + 0x22) = mask; // clear register
    f5a4:	str.w	r0, [r3, #136]	; 0x88
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		}
	}
}
    f5a8:	ldr.w	r4, [sp], #4
    f5ac:	bx	lr
		}
	} else {
		// pin is configured for input mode
		// value controls PULLUP/PULLDOWN resistors
		if (val) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    f5ae:	ldr	r2, [pc, #16]	; (f5c0 <digitalWrite.part.0+0x48>)
		} else {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		}
	}
}
    f5b0:	ldr.w	r4, [sp], #4
		}
	} else {
		// pin is configured for input mode
		// value controls PULLUP/PULLDOWN resistors
		if (val) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    f5b4:	str	r2, [r3, #0]
		} else {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		}
	}
}
    f5b6:	bx	lr
    f5b8:	.word	0x20000590
    f5bc:	.word	0x00013038
    f5c0:	.word	0x0001f038

0000f5c4 <digitalWrite>:
void digitalWrite(uint8_t pin, uint8_t val)
{
	const struct digital_pin_bitband_and_config_table_struct *p;
	uint32_t pinmode, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
    f5c4:	cmp	r0, #39	; 0x27
    f5c6:	bhi.n	f5cc <digitalWrite+0x8>
    f5c8:	b.w	f578 <digitalWrite.part.0>
    f5cc:	bx	lr
    f5ce:	nop

0000f5d0 <pinMode>:

void pinMode(uint8_t pin, uint8_t mode)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
    f5d0:	cmp	r0, #39	; 0x27
    f5d2:	bhi.n	f60e <pinMode+0x3e>
	p = digital_pin_to_info_PGM + pin;
    f5d4:	lsls	r0, r0, #4
    f5d6:	ldr	r2, [pc, #104]	; (f640 <pinMode+0x70>)
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    f5d8:	cmp	r1, #1
void pinMode(uint8_t pin, uint8_t mode)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
    f5da:	add.w	r3, r2, r0
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    f5de:	ldr	r0, [r2, r0]
	p = digital_pin_to_info_PGM + pin;
	return (*(p->reg + 2) & p->mask) ? 1 : 0;
}

void pinMode(uint8_t pin, uint8_t mode)
{
    f5e0:	push	{r4}
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    f5e2:	beq.n	f610 <pinMode+0x40>
    f5e4:	cmp	r1, #4
    f5e6:	beq.n	f610 <pinMode+0x40>
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    f5e8:	ldr	r4, [r3, #12]
    f5ea:	ldr	r2, [r0, #4]
    f5ec:	bic.w	r2, r2, r4
    f5f0:	str	r2, [r0, #4]
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
    f5f2:	ldr	r2, [r3, #8]
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
		if (mode == INPUT) {
    f5f4:	cbz	r1, f632 <pinMode+0x62>
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else if (mode == INPUT_PULLUP) {
    f5f6:	cmp	r1, #2
    f5f8:	beq.n	f638 <pinMode+0x68>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else if (mode == INPUT_PULLDOWN) {
    f5fa:	cmp	r1, #3
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
		}
	}
	*(p->mux) = 5 | 0x10;
    f5fc:	ldr	r3, [r3, #4]
}
    f5fe:	ldr.w	r4, [sp], #4
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else if (mode == INPUT_PULLUP) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else if (mode == INPUT_PULLDOWN) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    f602:	ite	eq
    f604:	ldreq	r1, [pc, #60]	; (f644 <pinMode+0x74>)
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
    f606:	ldrne	r1, [pc, #64]	; (f648 <pinMode+0x78>)
    f608:	str	r1, [r2, #0]
		}
	}
	*(p->mux) = 5 | 0x10;
    f60a:	movs	r2, #21
    f60c:	str	r2, [r3, #0]
}
    f60e:	bx	lr
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
		*(p->reg + 1) |= p->mask; // TODO: atomic
    f610:	ldr	r2, [r3, #12]
		if (mode == OUTPUT) {
    f612:	cmp	r1, #1
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
		*(p->reg + 1) |= p->mask; // TODO: atomic
    f614:	ldr	r4, [r0, #4]
    f616:	orr.w	r2, r2, r4
    f61a:	str	r2, [r0, #4]
		if (mode == OUTPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
    f61c:	ldr	r2, [r3, #8]

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
		*(p->reg + 1) |= p->mask; // TODO: atomic
		if (mode == OUTPUT) {
    f61e:	beq.n	f632 <pinMode+0x62>
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
    f620:	movw	r1, #2104	; 0x838
    f624:	str	r1, [r2, #0]
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
		}
	}
	*(p->mux) = 5 | 0x10;
    f626:	ldr	r3, [r3, #4]
    f628:	movs	r2, #21
}
    f62a:	ldr.w	r4, [sp], #4
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
		}
	}
	*(p->mux) = 5 | 0x10;
    f62e:	str	r2, [r3, #0]
}
    f630:	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
    f632:	movs	r1, #56	; 0x38
    f634:	str	r1, [r2, #0]
    f636:	b.n	f626 <pinMode+0x56>
		} else if (mode == INPUT_PULLUP) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    f638:	ldr	r1, [pc, #16]	; (f64c <pinMode+0x7c>)
    f63a:	str	r1, [r2, #0]
    f63c:	b.n	f626 <pinMode+0x56>
    f63e:	nop
    f640:	.word	0x20000590
    f644:	.word	0x00013038
    f648:	.word	0x00010038
    f64c:	.word	0x0001f038

0000f650 <pwm_init>:
}

void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    f650:	ldr	r0, [pc, #656]	; (f8e4 <pwm_init+0x294>)
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    f652:	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    f656:	ldr	r3, [pc, #656]	; (f8e8 <pwm_init+0x298>)
}

void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    f658:	ldr	r2, [r0, #120]	; 0x78
    f65a:	orr.w	r2, r2, #16711680	; 0xff0000
			TMR_CTRL_LENGTH | TMR_CTRL_OUTMODE(6);
	}
}

void pwm_init(void)
{
    f65e:	push	{r4, r5, r6, r7, lr}
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    f660:	str	r2, [r0, #120]	; 0x78
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
    f662:	movs	r5, #0
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    f664:	ldr.w	r2, [r0, #128]	; 0x80

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    f668:	mov.w	r6, #61440	; 0xf000
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    f66c:	ldr	r4, [pc, #636]	; (f8ec <pwm_init+0x29c>)
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    f66e:	mov.w	lr, #57344	; 0xe000

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    f672:	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    f674:	mov.w	r7, #1024	; 0x400
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    f678:	orrs	r4, r2
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    f67a:	mov	r2, r5
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    f67c:	str.w	r4, [r0, #128]	; 0x80

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    f680:	strh.w	r6, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    f684:	movw	r6, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    f688:	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
    f68c:	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    f690:	ldrh.w	r0, [r3, #392]	; 0x188
    f694:	uxth	r0, r0
    f696:	orr.w	r0, r0, #240	; 0xf0
    f69a:	strh.w	r0, [r3, #392]	; 0x188
    f69e:	add.w	r0, r1, r1, lsl #1
    f6a2:	ldr	r3, [pc, #580]	; (f8e8 <pwm_init+0x298>)
	for (i=0; i < 4; i++) {
    f6a4:	adds	r1, #1
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    f6a6:	movs	r5, #0
    f6a8:	lsls	r0, r0, #5
    f6aa:	mov	r4, r3

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    f6ac:	cmp	r1, #4
    f6ae:	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    f6b0:	strh.w	lr, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    f6b4:	strh	r7, [r3, #6]
		p->SM[i].OCTRL = 0;
    f6b6:	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    f6b8:	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    f6ba:	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    f6bc:	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    f6be:	strh	r6, [r3, #14]
		p->SM[i].VAL2 = 0;
    f6c0:	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    f6c2:	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    f6c4:	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    f6c6:	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    f6c8:	bne.n	f69e <pwm_init+0x4e>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    f6ca:	ldrh.w	r0, [r4, #392]	; 0x188
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    f6ce:	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    f6d2:	ldr	r3, [pc, #540]	; (f8f0 <pwm_init+0x2a0>)
    f6d4:	mov.w	r6, #61440	; 0xf000
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    f6d8:	uxth	r0, r0

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    f6da:	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    f6dc:	mov.w	r7, #57344	; 0xe000
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    f6e0:	mov	r2, r5
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    f6e2:	orr.w	r0, r0, ip
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    f6e6:	mov.w	lr, #1024	; 0x400
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    f6ea:	strh.w	r0, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    f6ee:	ldrh.w	r0, [r4, #392]	; 0x188
    f6f2:	uxth	r0, r0
    f6f4:	orr.w	r0, r0, #3840	; 0xf00
    f6f8:	strh.w	r0, [r4, #392]	; 0x188

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    f6fc:	strh.w	r6, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    f700:	movw	r6, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    f704:	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
    f708:	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    f70c:	ldrh.w	r0, [r3, #392]	; 0x188
    f710:	uxth	r0, r0
    f712:	orr.w	r0, r0, #240	; 0xf0
    f716:	strh.w	r0, [r3, #392]	; 0x188
    f71a:	add.w	r0, r1, r1, lsl #1
    f71e:	ldr	r3, [pc, #464]	; (f8f0 <pwm_init+0x2a0>)
	for (i=0; i < 4; i++) {
    f720:	adds	r1, #1
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    f722:	movs	r5, #0
    f724:	lsls	r0, r0, #5
    f726:	mov	r4, r3

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    f728:	cmp	r1, #4
    f72a:	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    f72c:	strh	r7, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    f72e:	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
    f732:	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    f734:	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    f736:	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    f738:	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    f73a:	strh	r6, [r3, #14]
		p->SM[i].VAL2 = 0;
    f73c:	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    f73e:	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    f740:	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    f742:	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    f744:	bne.n	f71a <pwm_init+0xca>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    f746:	ldrh.w	r0, [r4, #392]	; 0x188
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    f74a:	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    f74e:	ldr	r3, [pc, #420]	; (f8f4 <pwm_init+0x2a4>)
    f750:	mov.w	r6, #61440	; 0xf000
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    f754:	uxth	r0, r0

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    f756:	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    f758:	mov.w	r7, #57344	; 0xe000
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    f75c:	mov	r2, r5
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    f75e:	orr.w	r0, r0, ip
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    f762:	mov.w	lr, #1024	; 0x400
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    f766:	strh.w	r0, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    f76a:	ldrh.w	r0, [r4, #392]	; 0x188
    f76e:	uxth	r0, r0
    f770:	orr.w	r0, r0, #3840	; 0xf00
    f774:	strh.w	r0, [r4, #392]	; 0x188

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    f778:	strh.w	r6, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    f77c:	movw	r6, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    f780:	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
    f784:	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    f788:	ldrh.w	r0, [r3, #392]	; 0x188
    f78c:	uxth	r0, r0
    f78e:	orr.w	r0, r0, #240	; 0xf0
    f792:	strh.w	r0, [r3, #392]	; 0x188
    f796:	add.w	r0, r1, r1, lsl #1
    f79a:	ldr	r3, [pc, #344]	; (f8f4 <pwm_init+0x2a4>)
	for (i=0; i < 4; i++) {
    f79c:	adds	r1, #1
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    f79e:	movs	r5, #0
    f7a0:	lsls	r0, r0, #5
    f7a2:	mov	r4, r3

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    f7a4:	cmp	r1, #4
    f7a6:	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    f7a8:	strh	r7, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    f7aa:	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
    f7ae:	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    f7b0:	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    f7b2:	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    f7b4:	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    f7b6:	strh	r6, [r3, #14]
		p->SM[i].VAL2 = 0;
    f7b8:	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    f7ba:	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    f7bc:	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    f7be:	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    f7c0:	bne.n	f796 <pwm_init+0x146>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    f7c2:	ldrh.w	r0, [r4, #392]	; 0x188
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    f7c6:	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    f7ca:	ldr	r3, [pc, #300]	; (f8f8 <pwm_init+0x2a8>)
    f7cc:	mov.w	r7, #61440	; 0xf000
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    f7d0:	uxth	r0, r0

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    f7d2:	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    f7d4:	mov.w	r6, #57344	; 0xe000
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    f7d8:	mov	r2, r5
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    f7da:	orr.w	r0, r0, ip
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    f7de:	mov.w	lr, #1024	; 0x400
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    f7e2:	strh.w	r0, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    f7e6:	ldrh.w	r0, [r4, #392]	; 0x188
    f7ea:	uxth	r0, r0
    f7ec:	orr.w	r0, r0, #3840	; 0xf00
    f7f0:	strh.w	r0, [r4, #392]	; 0x188

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    f7f4:	strh.w	r7, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    f7f8:	movw	r7, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    f7fc:	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
    f800:	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    f804:	ldrh.w	r0, [r3, #392]	; 0x188
    f808:	uxth	r0, r0
    f80a:	orr.w	r0, r0, #240	; 0xf0
    f80e:	strh.w	r0, [r3, #392]	; 0x188
    f812:	add.w	r0, r1, r1, lsl #1
    f816:	ldr	r3, [pc, #224]	; (f8f8 <pwm_init+0x2a8>)
	for (i=0; i < 4; i++) {
    f818:	adds	r1, #1
    f81a:	lsls	r0, r0, #5
    f81c:	mov	r4, r3
    f81e:	cmp	r1, #4
    f820:	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    f822:	strh	r6, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    f824:	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
    f828:	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    f82a:	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    f82c:	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    f82e:	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    f830:	strh	r7, [r3, #14]
		p->SM[i].VAL2 = 0;
    f832:	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    f834:	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    f836:	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    f838:	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    f83a:	bne.n	f812 <pwm_init+0x1c2>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    f83c:	ldrh.w	r3, [r4, #392]	; 0x188
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    f840:	movs	r7, #15

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    f842:	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    f844:	movw	r6, #4097	; 0x1001
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    f848:	uxth	r3, r3
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    f84a:	movw	lr, #24000	; 0x5dc0
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    f84e:	mov	r1, r2
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
		p->CH[i].CMPLD1 = 0;
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    f850:	movw	r5, #12326	; 0x3026
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    f854:	orrs	r3, r7
    f856:	strh.w	r3, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    f85a:	ldrh.w	r3, [r4, #392]	; 0x188
    f85e:	uxth	r3, r3
    f860:	orr.w	r3, r3, #3840	; 0xf00
    f864:	strh.w	r3, [r4, #392]	; 0x188
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    f868:	lsls	r0, r2, #5
    f86a:	ldr	r3, [pc, #144]	; (f8fc <pwm_init+0x2ac>)

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    f86c:	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    f86e:	add	r3, r0

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    f870:	cmp	r2, #4
		p->CH[i].CTRL = 0; // stop timer
    f872:	strh	r1, [r3, #12]
		p->CH[i].CNTR = 0;
    f874:	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    f876:	strh	r7, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    f878:	strh	r6, [r3, #20]
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    f87a:	strh.w	lr, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    f87e:	strh	r1, [r3, #0]
		p->CH[i].CMPLD1 = 0;
    f880:	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    f882:	strh	r5, [r3, #12]

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    f884:	bne.n	f868 <pwm_init+0x218>
    f886:	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    f888:	movs	r7, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    f88a:	movw	r6, #4097	; 0x1001
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    f88e:	movw	r5, #24000	; 0x5dc0
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    f892:	mov	r1, r2
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
		p->CH[i].CMPLD1 = 0;
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    f894:	movw	r4, #12326	; 0x3026
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    f898:	lsls	r0, r2, #5
    f89a:	ldr	r3, [pc, #100]	; (f900 <pwm_init+0x2b0>)

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    f89c:	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    f89e:	add	r3, r0

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    f8a0:	cmp	r2, #4
		p->CH[i].CTRL = 0; // stop timer
    f8a2:	strh	r1, [r3, #12]
		p->CH[i].CNTR = 0;
    f8a4:	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    f8a6:	strh	r7, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    f8a8:	strh	r6, [r3, #20]
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    f8aa:	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    f8ac:	strh	r1, [r3, #0]
		p->CH[i].CMPLD1 = 0;
    f8ae:	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    f8b0:	strh	r4, [r3, #12]

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    f8b2:	bne.n	f898 <pwm_init+0x248>
    f8b4:	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    f8b6:	movs	r7, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    f8b8:	movw	r6, #4097	; 0x1001
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    f8bc:	movw	r5, #24000	; 0x5dc0
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    f8c0:	mov	r1, r2
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
		p->CH[i].CMPLD1 = 0;
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    f8c2:	movw	r4, #12326	; 0x3026
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    f8c6:	lsls	r0, r2, #5
    f8c8:	ldr	r3, [pc, #56]	; (f904 <pwm_init+0x2b4>)

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    f8ca:	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    f8cc:	add	r3, r0

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    f8ce:	cmp	r2, #4
		p->CH[i].CTRL = 0; // stop timer
    f8d0:	strh	r1, [r3, #12]
		p->CH[i].CNTR = 0;
    f8d2:	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    f8d4:	strh	r7, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    f8d6:	strh	r6, [r3, #20]
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    f8d8:	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    f8da:	strh	r1, [r3, #0]
		p->CH[i].CMPLD1 = 0;
    f8dc:	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    f8de:	strh	r4, [r3, #12]

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    f8e0:	bne.n	f8c6 <pwm_init+0x276>
	flexpwm_init(&IMXRT_FLEXPWM3);
	flexpwm_init(&IMXRT_FLEXPWM4);
	quadtimer_init(&IMXRT_TMR1);
	quadtimer_init(&IMXRT_TMR2);
	quadtimer_init(&IMXRT_TMR3);
}
    f8e2:	pop	{r4, r5, r6, r7, pc}
    f8e4:	.word	0x400fc000
    f8e8:	.word	0x403dc000
    f8ec:	.word	0xfc030000
    f8f0:	.word	0x403e0000
    f8f4:	.word	0x403e4000
    f8f8:	.word	0x403e8000
    f8fc:	.word	0x401dc000
    f900:	.word	0x401e0000
    f904:	.word	0x401e4000

0000f908 <rx_event>:
static void rx_event(transfer_t *t)
{
	int i = t->callback_param;
	//printf("rx event i=%d\n", i);
	// received a packet with data
	uint32_t head = rx_head;
    f908:	ldr	r2, [pc, #40]	; (f934 <rx_event+0x2c>)
	usb_receive(MTP_RX_ENDPOINT, rx_transfer + i);
	NVIC_ENABLE_IRQ(IRQ_USB1);
}

static void rx_event(transfer_t *t)
{
    f90a:	push	{r4}
	int i = t->callback_param;
	//printf("rx event i=%d\n", i);
	// received a packet with data
	uint32_t head = rx_head;
    f90c:	ldrb	r3, [r2, #0]
	NVIC_ENABLE_IRQ(IRQ_USB1);
}

static void rx_event(transfer_t *t)
{
	int i = t->callback_param;
    f90e:	ldr	r4, [r0, #28]
	//printf("rx event i=%d\n", i);
	// received a packet with data
	uint32_t head = rx_head;
	if (++head > RX_NUM) head = 0;
    f910:	adds	r3, #1
    f912:	cmp	r3, #4
    f914:	bls.n	f926 <rx_event+0x1e>
    f916:	movs	r1, #0
	rx_list[head] = i;
    f918:	ldr	r0, [pc, #28]	; (f938 <rx_event+0x30>)
{
	int i = t->callback_param;
	//printf("rx event i=%d\n", i);
	// received a packet with data
	uint32_t head = rx_head;
	if (++head > RX_NUM) head = 0;
    f91a:	mov	r3, r1
	rx_list[head] = i;
	rx_head = head;
    f91c:	strb	r1, [r2, #0]
	int i = t->callback_param;
	//printf("rx event i=%d\n", i);
	// received a packet with data
	uint32_t head = rx_head;
	if (++head > RX_NUM) head = 0;
	rx_list[head] = i;
    f91e:	strb	r4, [r0, r3]
	rx_head = head;
}
    f920:	ldr.w	r4, [sp], #4
    f924:	bx	lr
    f926:	uxtb	r1, r3
	int i = t->callback_param;
	//printf("rx event i=%d\n", i);
	// received a packet with data
	uint32_t head = rx_head;
	if (++head > RX_NUM) head = 0;
	rx_list[head] = i;
    f928:	ldr	r0, [pc, #12]	; (f938 <rx_event+0x30>)
	rx_head = head;
    f92a:	strb	r1, [r2, #0]
	int i = t->callback_param;
	//printf("rx event i=%d\n", i);
	// received a packet with data
	uint32_t head = rx_head;
	if (++head > RX_NUM) head = 0;
	rx_list[head] = i;
    f92c:	strb	r4, [r0, r3]
	rx_head = head;
}
    f92e:	ldr.w	r4, [sp], #4
    f932:	bx	lr
    f934:	.word	0x2004484c
    f938:	.word	0x20044844

0000f93c <rx_queue_transfer>:
/*************************************************************************/
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
    f93c:	push	{r4, r5, r6, lr}
	void *buffer = rx_buffer + i * MTP_RX_SIZE_480;
    f93e:	ldr	r1, [pc, #76]	; (f98c <rx_queue_transfer+0x50>)
/*************************************************************************/
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
    f940:	mov	r3, r0
	void *buffer = rx_buffer + i * MTP_RX_SIZE_480;
	arm_dcache_delete(buffer, rx_packet_size);
    f942:	ldr	r6, [pc, #76]	; (f990 <rx_queue_transfer+0x54>)
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
	void *buffer = rx_buffer + i * MTP_RX_SIZE_480;
    f944:	add.w	r1, r1, r0, lsl #9
// read is certain to access the physical memory.
__attribute__((always_inline, unused))
static inline void arm_dcache_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
    f948:	ldrh	r4, [r6, #0]
// want to delete anything the cache may have stored, so your next
// read is certain to access the physical memory.
__attribute__((always_inline, unused))
static inline void arm_dcache_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    f94a:	bic.w	r2, r1, #31
	uint32_t end_addr = (uint32_t)addr + size;
    f94e:	add	r4, r1
	asm volatile("": : :"memory");
	asm("dsb");
    f950:	dsb	sy
	do {
		SCB_CACHE_DCIMVAC = location;
    f954:	ldr	r5, [pc, #60]	; (f994 <rx_queue_transfer+0x58>)
    f956:	str	r2, [r5, #0]
		location += 32;
    f958:	adds	r2, #32
	} while (location < end_addr);
    f95a:	cmp	r4, r2
    f95c:	bhi.n	f956 <rx_queue_transfer+0x1a>
	asm("dsb");
    f95e:	dsb	sy
	asm("isb");
    f962:	isb	sy
	arm_dcache_delete(buffer, rx_packet_size);
	//memset(buffer, )
	NVIC_DISABLE_IRQ(IRQ_USB1);
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    f966:	ldr	r4, [pc, #48]	; (f998 <rx_queue_transfer+0x5c>)
static void rx_queue_transfer(int i)
{
	void *buffer = rx_buffer + i * MTP_RX_SIZE_480;
	arm_dcache_delete(buffer, rx_packet_size);
	//memset(buffer, )
	NVIC_DISABLE_IRQ(IRQ_USB1);
    f968:	mov.w	r5, #131072	; 0x20000
    f96c:	ldr	r2, [pc, #44]	; (f99c <rx_queue_transfer+0x60>)
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    f96e:	add.w	r4, r4, r3, lsl #5
static void rx_queue_transfer(int i)
{
	void *buffer = rx_buffer + i * MTP_RX_SIZE_480;
	arm_dcache_delete(buffer, rx_packet_size);
	//memset(buffer, )
	NVIC_DISABLE_IRQ(IRQ_USB1);
    f972:	str	r5, [r2, #0]
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    f974:	mov	r0, r4
    f976:	ldrh	r2, [r6, #0]
    f978:	bl	eed0 <usb_prepare_transfer>
	usb_receive(MTP_RX_ENDPOINT, rx_transfer + i);
    f97c:	mov	r1, r4
    f97e:	movs	r0, #4
    f980:	bl	ef28 <usb_receive>
	NVIC_ENABLE_IRQ(IRQ_USB1);
    f984:	ldr	r3, [pc, #24]	; (f9a0 <rx_queue_transfer+0x64>)
    f986:	str	r5, [r3, #0]
    f988:	pop	{r4, r5, r6, pc}
    f98a:	nop
    f98c:	.word	0x20203000
    f990:	.word	0x2004484a
    f994:	.word	0xe000ef5c
    f998:	.word	0x200447c0
    f99c:	.word	0xe000e18c
    f9a0:	.word	0xe000e10c

0000f9a4 <usb_mtp_configure>:
static void rx_event(transfer_t *t);
extern volatile uint8_t usb_configuration;


void usb_mtp_configure(void)
{
    f9a4:	push	{r3, r4, r5, r6, r7, lr}
	printf("usb_mtp_configure\n");
    	if (usb_high_speed) {
    f9a6:	ldr	r3, [pc, #120]	; (fa20 <usb_mtp_configure+0x7c>)
    f9a8:	ldrb	r3, [r3, #0]
    f9aa:	cbz	r3, fa10 <usb_mtp_configure+0x6c>
		tx_packet_size = MTP_TX_SIZE_480;
    f9ac:	mov.w	r3, #512	; 0x200
    f9b0:	ldr	r2, [pc, #112]	; (fa24 <usb_mtp_configure+0x80>)
		rx_packet_size = MTP_RX_SIZE_480;
    f9b2:	ldr	r5, [pc, #116]	; (fa28 <usb_mtp_configure+0x84>)
    f9b4:	mov	r6, r3

void usb_mtp_configure(void)
{
	printf("usb_mtp_configure\n");
    	if (usb_high_speed) {
		tx_packet_size = MTP_TX_SIZE_480;
    f9b6:	strh	r3, [r2, #0]
		rx_packet_size = MTP_RX_SIZE_480;
    f9b8:	strh	r3, [r5, #0]
	} else {
		tx_packet_size = MTP_TX_SIZE_12;
		rx_packet_size = MTP_RX_SIZE_12;
    }
	memset(tx_transfer, 0, sizeof(tx_transfer));
    f9ba:	movs	r1, #0
    f9bc:	movs	r2, #128	; 0x80
    f9be:	ldr	r0, [pc, #108]	; (fa2c <usb_mtp_configure+0x88>)
	memset(rx_transfer, 0, sizeof(rx_transfer));
	tx_head = 0;
    f9c0:	mov	r4, r1
		rx_packet_size = MTP_RX_SIZE_480;
	} else {
		tx_packet_size = MTP_TX_SIZE_12;
		rx_packet_size = MTP_RX_SIZE_12;
    }
	memset(tx_transfer, 0, sizeof(tx_transfer));
    f9c2:	bl	10bfc <memset>
	memset(rx_transfer, 0, sizeof(rx_transfer));
    f9c6:	movs	r2, #128	; 0x80
    f9c8:	ldr	r0, [pc, #100]	; (fa30 <usb_mtp_configure+0x8c>)
    f9ca:	mov	r1, r4
	tx_head = 0;
    f9cc:	ldr	r7, [pc, #100]	; (fa34 <usb_mtp_configure+0x90>)
	} else {
		tx_packet_size = MTP_TX_SIZE_12;
		rx_packet_size = MTP_RX_SIZE_12;
    }
	memset(tx_transfer, 0, sizeof(tx_transfer));
	memset(rx_transfer, 0, sizeof(rx_transfer));
    f9ce:	bl	10bfc <memset>
	tx_head = 0;
	rx_head = 0;
    f9d2:	ldr	r0, [pc, #100]	; (fa38 <usb_mtp_configure+0x94>)
	rx_tail = 0;
	usb_config_tx(MTP_TX_ENDPOINT, tx_packet_size, 0, NULL);
    f9d4:	mov	r1, r6
    }
	memset(tx_transfer, 0, sizeof(tx_transfer));
	memset(rx_transfer, 0, sizeof(rx_transfer));
	tx_head = 0;
	rx_head = 0;
	rx_tail = 0;
    f9d6:	ldr	r6, [pc, #100]	; (fa3c <usb_mtp_configure+0x98>)
		rx_packet_size = MTP_RX_SIZE_12;
    }
	memset(tx_transfer, 0, sizeof(tx_transfer));
	memset(rx_transfer, 0, sizeof(rx_transfer));
	tx_head = 0;
	rx_head = 0;
    f9d8:	strb	r4, [r0, #0]
	rx_tail = 0;
	usb_config_tx(MTP_TX_ENDPOINT, tx_packet_size, 0, NULL);
    f9da:	mov	r3, r4
    f9dc:	mov	r2, r4
    f9de:	movs	r0, #4
		tx_packet_size = MTP_TX_SIZE_12;
		rx_packet_size = MTP_RX_SIZE_12;
    }
	memset(tx_transfer, 0, sizeof(tx_transfer));
	memset(rx_transfer, 0, sizeof(rx_transfer));
	tx_head = 0;
    f9e0:	strb	r4, [r7, #0]
	rx_head = 0;
	rx_tail = 0;
    f9e2:	strb	r4, [r6, #0]
	usb_config_tx(MTP_TX_ENDPOINT, tx_packet_size, 0, NULL);
    f9e4:	bl	ee68 <usb_config_tx>
	usb_config_rx(MTP_RX_ENDPOINT, rx_packet_size, 0, rx_event);
    f9e8:	ldrh	r1, [r5, #0]
    f9ea:	mov	r2, r4
    f9ec:	ldr	r3, [pc, #80]	; (fa40 <usb_mtp_configure+0x9c>)
    f9ee:	movs	r0, #4
    f9f0:	bl	ee04 <usb_config_rx>
	int i;
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    f9f4:	mov	r0, r4
    f9f6:	bl	f93c <rx_queue_transfer>
    f9fa:	movs	r0, #1
    f9fc:	bl	f93c <rx_queue_transfer>
    fa00:	movs	r0, #2
    fa02:	bl	f93c <rx_queue_transfer>
    fa06:	movs	r0, #3
}
    fa08:	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	rx_head = 0;
	rx_tail = 0;
	usb_config_tx(MTP_TX_ENDPOINT, tx_packet_size, 0, NULL);
	usb_config_rx(MTP_RX_ENDPOINT, rx_packet_size, 0, rx_event);
	int i;
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    fa0c:	b.w	f93c <rx_queue_transfer>
	printf("usb_mtp_configure\n");
    	if (usb_high_speed) {
		tx_packet_size = MTP_TX_SIZE_480;
		rx_packet_size = MTP_RX_SIZE_480;
	} else {
		tx_packet_size = MTP_TX_SIZE_12;
    fa10:	movs	r3, #64	; 0x40
    fa12:	ldr	r2, [pc, #16]	; (fa24 <usb_mtp_configure+0x80>)
		rx_packet_size = MTP_RX_SIZE_12;
    fa14:	ldr	r5, [pc, #16]	; (fa28 <usb_mtp_configure+0x84>)
    fa16:	mov	r6, r3
	printf("usb_mtp_configure\n");
    	if (usb_high_speed) {
		tx_packet_size = MTP_TX_SIZE_480;
		rx_packet_size = MTP_RX_SIZE_480;
	} else {
		tx_packet_size = MTP_TX_SIZE_12;
    fa18:	strh	r3, [r2, #0]
		rx_packet_size = MTP_RX_SIZE_12;
    fa1a:	strh	r3, [r5, #0]
    fa1c:	b.n	f9ba <usb_mtp_configure+0x16>
    fa1e:	nop
    fa20:	.word	0x20044770
    fa24:	.word	0x200447b8
    fa28:	.word	0x2004484a
    fa2c:	.word	0x20044860
    fa30:	.word	0x200447c0
    fa34:	.word	0x200447ba
    fa38:	.word	0x2004484c
    fa3c:	.word	0x20044840
    fa40:	.word	0x0000f909

0000fa44 <usb_mtp_recv>:
	rx_head = head;
}


int usb_mtp_recv(void *buffer, uint32_t timeout)
{
    fa44:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t wait_begin_at = systick_millis_count;
    fa48:	ldr	r6, [pc, #140]	; (fad8 <usb_mtp_recv+0x94>)
	uint32_t tail = rx_tail;
    fa4a:	ldr.w	fp, [pc, #160]	; faec <usb_mtp_recv+0xa8>
	while (1) {
		if (!usb_configuration) return -1; // usb not enumerated by host
    fa4e:	ldr	r7, [pc, #140]	; (fadc <usb_mtp_recv+0x98>)
}


int usb_mtp_recv(void *buffer, uint32_t timeout)
{
	uint32_t wait_begin_at = systick_millis_count;
    fa50:	ldr.w	r9, [r6]
	uint32_t tail = rx_tail;
    fa54:	ldrb.w	r4, [fp]
	while (1) {
		if (!usb_configuration) return -1; // usb not enumerated by host
    fa58:	ldrb	r3, [r7, #0]
    fa5a:	cbz	r3, fa96 <usb_mtp_recv+0x52>
		if (tail != rx_head) break;
    fa5c:	ldr.w	r8, [pc, #144]	; faf0 <usb_mtp_recv+0xac>
    fa60:	uxtb	r4, r4
    fa62:	mov	r5, r1
    fa64:	mov	sl, r0
    fa66:	ldrb.w	r3, [r8]
    fa6a:	cmp	r4, r3
    fa6c:	bne.n	fa9e <usb_mtp_recv+0x5a>
		if (systick_millis_count - wait_begin_at > timeout)  {
    fa6e:	ldr	r3, [r6, #0]
    fa70:	rsb	r3, r9, r3
    fa74:	cmp	r1, r3
    fa76:	bcs.n	fa8c <usb_mtp_recv+0x48>
    fa78:	b.n	faca <usb_mtp_recv+0x86>
{
	uint32_t wait_begin_at = systick_millis_count;
	uint32_t tail = rx_tail;
	while (1) {
		if (!usb_configuration) return -1; // usb not enumerated by host
		if (tail != rx_head) break;
    fa7a:	ldrb.w	r3, [r8]
    fa7e:	cmp	r4, r3
    fa80:	bne.n	fa9e <usb_mtp_recv+0x5a>
		if (systick_millis_count - wait_begin_at > timeout)  {
    fa82:	ldr	r3, [r6, #0]
    fa84:	rsb	r3, r9, r3
    fa88:	cmp	r3, r5
    fa8a:	bhi.n	faca <usb_mtp_recv+0x86>
			return 0;
		}
		yield();
    fa8c:	bl	fc48 <yield>
int usb_mtp_recv(void *buffer, uint32_t timeout)
{
	uint32_t wait_begin_at = systick_millis_count;
	uint32_t tail = rx_tail;
	while (1) {
		if (!usb_configuration) return -1; // usb not enumerated by host
    fa90:	ldrb	r3, [r7, #0]
    fa92:	cmp	r3, #0
    fa94:	bne.n	fa7a <usb_mtp_recv+0x36>
    fa96:	mov.w	r0, #4294967295
    fa9a:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			return 0;
		}
		yield();
	}
//	digitalWriteFast(0, LOW);
	if (++tail > RX_NUM) tail = 0;
    fa9e:	adds	r4, #1
    faa0:	cmp	r4, #4
    faa2:	bhi.n	fad0 <usb_mtp_recv+0x8c>
    faa4:	uxtb	r3, r4
	uint32_t i = rx_list[tail];
    faa6:	ldr	r2, [pc, #56]	; (fae0 <usb_mtp_recv+0x9c>)
	rx_tail = tail;

	memcpy(buffer,  rx_buffer + i * MTP_RX_SIZE_480, rx_packet_size);
    faa8:	mov	r0, sl
    faaa:	ldr	r1, [pc, #56]	; (fae4 <usb_mtp_recv+0xa0>)
		}
		yield();
	}
//	digitalWriteFast(0, LOW);
	if (++tail > RX_NUM) tail = 0;
	uint32_t i = rx_list[tail];
    faac:	ldrb	r5, [r2, r4]
	rx_tail = tail;

	memcpy(buffer,  rx_buffer + i * MTP_RX_SIZE_480, rx_packet_size);
    faae:	ldr	r4, [pc, #56]	; (fae8 <usb_mtp_recv+0xa4>)
    fab0:	add.w	r1, r1, r5, lsl #9
		yield();
	}
//	digitalWriteFast(0, LOW);
	if (++tail > RX_NUM) tail = 0;
	uint32_t i = rx_list[tail];
	rx_tail = tail;
    fab4:	strb.w	r3, [fp]

	memcpy(buffer,  rx_buffer + i * MTP_RX_SIZE_480, rx_packet_size);
    fab8:	ldrh	r2, [r4, #0]
    faba:	bl	db14 <memcpy>
	rx_queue_transfer(i);
    fabe:	mov	r0, r5
    fac0:	bl	f93c <rx_queue_transfer>
	//memset(rx_transfer, 0, sizeof(rx_transfer));
	//usb_prepare_transfer(rx_transfer + 0, rx_buffer, rx_packet_size, 0);
	//usb_receive(MTP_RX_ENDPOINT, rx_transfer + 0);
	return rx_packet_size;
    fac4:	ldrh	r0, [r4, #0]
}
    fac6:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t tail = rx_tail;
	while (1) {
		if (!usb_configuration) return -1; // usb not enumerated by host
		if (tail != rx_head) break;
		if (systick_millis_count - wait_begin_at > timeout)  {
			return 0;
    faca:	movs	r0, #0
    facc:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fad0:	movs	r3, #0
		}
		yield();
	}
//	digitalWriteFast(0, LOW);
	if (++tail > RX_NUM) tail = 0;
    fad2:	mov	r4, r3
    fad4:	b.n	faa6 <usb_mtp_recv+0x62>
    fad6:	nop
    fad8:	.word	0x200447a4
    fadc:	.word	0x20044798
    fae0:	.word	0x20044844
    fae4:	.word	0x20203000
    fae8:	.word	0x2004484a
    faec:	.word	0x20044840
    faf0:	.word	0x2004484c

0000faf4 <usb_mtp_send>:
	//usb_receive(MTP_RX_ENDPOINT, rx_transfer + 0);
	return rx_packet_size;
}

int usb_mtp_send(const void *buffer, uint32_t len, uint32_t timeout)
{
    faf4:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	transfer_t *xfer = tx_transfer + tx_head;
    faf8:	ldr.w	sl, [pc, #192]	; fbbc <usb_mtp_send+0xc8>
	//usb_receive(MTP_RX_ENDPOINT, rx_transfer + 0);
	return rx_packet_size;
}

int usb_mtp_send(const void *buffer, uint32_t len, uint32_t timeout)
{
    fafc:	mov	r8, r2
	transfer_t *xfer = tx_transfer + tx_head;
	uint32_t wait_begin_at = systick_millis_count;
    fafe:	ldr	r5, [pc, #164]	; (fba4 <usb_mtp_send+0xb0>)

	while (1) {
		if (!usb_configuration) return -1; // usb not enumerated by host
    fb00:	ldr	r6, [pc, #164]	; (fba8 <usb_mtp_send+0xb4>)
	return rx_packet_size;
}

int usb_mtp_send(const void *buffer, uint32_t len, uint32_t timeout)
{
	transfer_t *xfer = tx_transfer + tx_head;
    fb02:	ldrb.w	r4, [sl]
    fb06:	ldr	r2, [pc, #164]	; (fbac <usb_mtp_send+0xb8>)
	uint32_t wait_begin_at = systick_millis_count;
    fb08:	ldr	r7, [r5, #0]

	while (1) {
		if (!usb_configuration) return -1; // usb not enumerated by host
    fb0a:	ldrb	r3, [r6, #0]
	return rx_packet_size;
}

int usb_mtp_send(const void *buffer, uint32_t len, uint32_t timeout)
{
	transfer_t *xfer = tx_transfer + tx_head;
    fb0c:	add.w	r4, r2, r4, lsl #5
	uint32_t wait_begin_at = systick_millis_count;

	while (1) {
		if (!usb_configuration) return -1; // usb not enumerated by host
    fb10:	cmp	r3, #0
    fb12:	beq.n	fb94 <usb_mtp_send+0xa0>
    fb14:	mov	fp, r0
    fb16:	mov	r9, r1
    fb18:	b.n	fb2a <usb_mtp_send+0x36>
		uint32_t status = usb_transfer_status(xfer);
		if (!(status & 0x80)) break; // transfer descriptor ready
		if (systick_millis_count - wait_begin_at > timeout) return 0;
    fb1a:	ldr	r3, [r5, #0]
    fb1c:	subs	r3, r3, r7
    fb1e:	cmp	r3, r8
    fb20:	bhi.n	fb9c <usb_mtp_send+0xa8>
		yield();
    fb22:	bl	fc48 <yield>
{
	transfer_t *xfer = tx_transfer + tx_head;
	uint32_t wait_begin_at = systick_millis_count;

	while (1) {
		if (!usb_configuration) return -1; // usb not enumerated by host
    fb26:	ldrb	r3, [r6, #0]
    fb28:	cbz	r3, fb94 <usb_mtp_send+0xa0>
		uint32_t status = usb_transfer_status(xfer);
    fb2a:	mov	r0, r4
    fb2c:	bl	ef4c <usb_transfer_status>
		if (!(status & 0x80)) break; // transfer descriptor ready
    fb30:	lsls	r3, r0, #24
    fb32:	bmi.n	fb1a <usb_mtp_send+0x26>
		if (systick_millis_count - wait_begin_at > timeout) return 0;
		yield();
	}
	uint8_t *txdata = txbuffer + (tx_head * MTP_TX_SIZE_480);
    fb34:	ldr	r3, [pc, #120]	; (fbb0 <usb_mtp_send+0xbc>)
	memcpy(txdata, buffer, len);
    fb36:	mov	r2, r9
		uint32_t status = usb_transfer_status(xfer);
		if (!(status & 0x80)) break; // transfer descriptor ready
		if (systick_millis_count - wait_begin_at > timeout) return 0;
		yield();
	}
	uint8_t *txdata = txbuffer + (tx_head * MTP_TX_SIZE_480);
    fb38:	ldrb.w	r5, [sl]
	memcpy(txdata, buffer, len);
    fb3c:	mov	r1, fp
		uint32_t status = usb_transfer_status(xfer);
		if (!(status & 0x80)) break; // transfer descriptor ready
		if (systick_millis_count - wait_begin_at > timeout) return 0;
		yield();
	}
	uint8_t *txdata = txbuffer + (tx_head * MTP_TX_SIZE_480);
    fb3e:	add.w	r5, r3, r5, lsl #9
	memcpy(txdata, buffer, len);
    fb42:	mov	r0, r5
    fb44:	bl	db14 <memcpy>
	arm_dcache_flush_delete(txdata, tx_packet_size );
    fb48:	ldr	r2, [pc, #104]	; (fbb4 <usb_mtp_send+0xc0>)
// any cached data written to memory, and then removed from the cache,
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    fb4a:	bic.w	r3, r5, #31
	uint32_t end_addr = (uint32_t)addr + size;
    fb4e:	ldrh	r2, [r2, #0]
    fb50:	add	r2, r5
	asm volatile("": : :"memory");
	asm("dsb");
    fb52:	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    fb56:	ldr	r1, [pc, #96]	; (fbb8 <usb_mtp_send+0xc4>)
    fb58:	str	r3, [r1, #0]
		location += 32;
    fb5a:	adds	r3, #32
	} while (location < end_addr);
    fb5c:	cmp	r2, r3
    fb5e:	bhi.n	fb58 <usb_mtp_send+0x64>
	asm("dsb");
    fb60:	dsb	sy
	asm("isb");
    fb64:	isb	sy
	usb_prepare_transfer(xfer, txdata, len, 0);
    fb68:	movs	r3, #0
    fb6a:	mov	r2, r9
    fb6c:	mov	r1, r5
    fb6e:	mov	r0, r4
    fb70:	bl	eed0 <usb_prepare_transfer>
	usb_transmit(MTP_TX_ENDPOINT, xfer);
    fb74:	mov	r1, r4
    fb76:	movs	r0, #4
    fb78:	bl	ef00 <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    fb7c:	ldrb.w	r3, [sl]
    fb80:	ldr	r2, [pc, #56]	; (fbbc <usb_mtp_send+0xc8>)
	return len;
    fb82:	mov	r0, r9
	uint8_t *txdata = txbuffer + (tx_head * MTP_TX_SIZE_480);
	memcpy(txdata, buffer, len);
	arm_dcache_flush_delete(txdata, tx_packet_size );
	usb_prepare_transfer(xfer, txdata, len, 0);
	usb_transmit(MTP_TX_ENDPOINT, xfer);
	if (++tx_head >= TX_NUM) tx_head = 0;
    fb84:	adds	r3, #1
    fb86:	uxtb	r3, r3
    fb88:	cmp	r3, #3
    fb8a:	it	hi
    fb8c:	movhi	r3, #0
    fb8e:	strb	r3, [r2, #0]
	return len;
    fb90:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
{
	transfer_t *xfer = tx_transfer + tx_head;
	uint32_t wait_begin_at = systick_millis_count;

	while (1) {
		if (!usb_configuration) return -1; // usb not enumerated by host
    fb94:	mov.w	r0, #4294967295
    fb98:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		uint32_t status = usb_transfer_status(xfer);
		if (!(status & 0x80)) break; // transfer descriptor ready
		if (systick_millis_count - wait_begin_at > timeout) return 0;
    fb9c:	movs	r0, #0
	arm_dcache_flush_delete(txdata, tx_packet_size );
	usb_prepare_transfer(xfer, txdata, len, 0);
	usb_transmit(MTP_TX_ENDPOINT, xfer);
	if (++tx_head >= TX_NUM) tx_head = 0;
	return len;
}
    fb9e:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fba2:	nop
    fba4:	.word	0x200447a4
    fba8:	.word	0x20044798
    fbac:	.word	0x20044860
    fbb0:	.word	0x20203800
    fbb4:	.word	0x200447b8
    fbb8:	.word	0xe000ef70
    fbbc:	.word	0x200447ba

0000fbc0 <usb_mtp_available>:

int usb_mtp_available(void)
{
	if (!usb_configuration) return 0;
    fbc0:	ldr	r3, [pc, #28]	; (fbe0 <usb_mtp_available+0x20>)
    fbc2:	ldrb	r3, [r3, #0]
    fbc4:	and.w	r0, r3, #255	; 0xff
    fbc8:	cbz	r3, fbde <usb_mtp_available+0x1e>
	if (rx_head != rx_tail) return rx_packet_size;
    fbca:	ldr	r2, [pc, #24]	; (fbe4 <usb_mtp_available+0x24>)
    fbcc:	ldr	r3, [pc, #24]	; (fbe8 <usb_mtp_available+0x28>)
    fbce:	ldrb	r2, [r2, #0]
    fbd0:	ldrb	r3, [r3, #0]
    fbd2:	cmp	r2, r3
    fbd4:	beq.n	fbdc <usb_mtp_available+0x1c>
    fbd6:	ldr	r3, [pc, #20]	; (fbec <usb_mtp_available+0x2c>)
    fbd8:	ldrh	r0, [r3, #0]
    fbda:	bx	lr
	return len;
}

int usb_mtp_available(void)
{
	if (!usb_configuration) return 0;
    fbdc:	movs	r0, #0
	if (rx_head != rx_tail) return rx_packet_size;
	//if (!(usb_transfer_status(rx_transfer) & 0x80)) return MTP_RX_SIZE;
	return 0;
}
    fbde:	bx	lr
    fbe0:	.word	0x20044798
    fbe4:	.word	0x2004484c
    fbe8:	.word	0x20044840
    fbec:	.word	0x2004484a

0000fbf0 <usb_init_serialnumber>:
void usb_init_serialnumber(void)
{
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    fbf0:	ldr	r2, [pc, #72]	; (fc3c <usb_init_serialnumber+0x4c>)
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    fbf2:	ldr	r3, [pc, #76]	; (fc40 <usb_init_serialnumber+0x50>)
void usb_init_serialnumber(void)
{
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    fbf4:	ldr.w	r0, [r2, #544]	; 0x220
    fbf8:	bic.w	r0, r0, #4278190080	; 0xff000000
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    fbfc:	cmp	r0, r3
	{'M','T','P'}
};
#endif

void usb_init_serialnumber(void)
{
    fbfe:	push	{r4, lr}
    fc00:	sub	sp, #16
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    fc02:	bhi.n	fc0a <usb_init_serialnumber+0x1a>
    fc04:	add.w	r0, r0, r0, lsl #2
    fc08:	lsls	r0, r0, #1
    fc0a:	ldr	r4, [pc, #56]	; (fc44 <usb_init_serialnumber+0x54>)
	ultoa(num, buf, 10);
    fc0c:	add	r1, sp, #4
    fc0e:	movs	r2, #10
    fc10:	bl	f1b4 <ultoa>
    fc14:	add	r1, sp, #4
	for (i=0; i<10; i++) {
    fc16:	movs	r3, #0
    fc18:	mov	r0, r4
		char c = buf[i];
    fc1a:	ldrb.w	r2, [r1], #1
    fc1e:	adds	r3, #1
		if (!c) break;
    fc20:	cbz	r2, fc32 <usb_init_serialnumber+0x42>

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    fc22:	cmp	r3, #10
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
    fc24:	strh.w	r2, [r0, #2]!

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    fc28:	bne.n	fc1a <usb_init_serialnumber+0x2a>
    fc2a:	movs	r3, #22
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    fc2c:	strb	r3, [r4, #0]
}
    fc2e:	add	sp, #16
    fc30:	pop	{r4, pc}
    fc32:	lsls	r3, r3, #1
    fc34:	uxtb	r3, r3
	for (i=0; i<10; i++) {
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    fc36:	strb	r3, [r4, #0]
}
    fc38:	add	sp, #16
    fc3a:	pop	{r4, pc}
    fc3c:	.word	0x401f4400
    fc40:	.word	0x0098967f
    fc44:	.word	0x20000c48

0000fc48 <yield>:

extern const uint8_t _serialEvent_default;	

void yield(void) __attribute__ ((weak));
void yield(void)
{
    fc48:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	static uint8_t running=0;
	if (!yield_active_check_flags) return;	// nothing to do
    fc4c:	ldr	r6, [pc, #200]	; (fd18 <yield+0xd0>)
    fc4e:	ldrb	r3, [r6, #0]
    fc50:	cbz	r3, fc78 <yield+0x30>
	if (running) return; // TODO: does this need to be atomic?
    fc52:	ldr	r7, [pc, #200]	; (fd1c <yield+0xd4>)
    fc54:	ldrb	r2, [r7, #0]
    fc56:	cbnz	r2, fc78 <yield+0x30>
	running = 1;
    fc58:	movs	r2, #1


	// USB Serail - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
    fc5a:	lsls	r1, r3, #31
void yield(void)
{
	static uint8_t running=0;
	if (!yield_active_check_flags) return;	// nothing to do
	if (running) return; // TODO: does this need to be atomic?
	running = 1;
    fc5c:	strb	r2, [r7, #0]


	// USB Serail - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
    fc5e:	bmi.n	fcd0 <yield+0x88>
		if (_serialEventUSB2_default) yield_active_check_flags &= ~YIELD_CHECK_USB_SERIALUSB2;
	}
#endif

	// Current workaround until integrate with EventResponder.
	if (yield_active_check_flags & YIELD_CHECK_HARDWARE_SERIAL) HardwareSerial::processSerialEventsList();
    fc60:	lsls	r2, r3, #30
    fc62:	bmi.n	fc98 <yield+0x50>

	running = 0;
    fc64:	movs	r2, #0
	if (yield_active_check_flags & YIELD_CHECK_EVENT_RESPONDER) EventResponder::runFromYield();
    fc66:	lsls	r3, r3, #29
#endif

	// Current workaround until integrate with EventResponder.
	if (yield_active_check_flags & YIELD_CHECK_HARDWARE_SERIAL) HardwareSerial::processSerialEventsList();

	running = 0;
    fc68:	strb	r2, [r7, #0]
	if (yield_active_check_flags & YIELD_CHECK_EVENT_RESPONDER) EventResponder::runFromYield();
    fc6a:	bpl.n	fc78 <yield+0x30>
	// Wait for event(s) to occur.  These are most likely to be useful when
	// used with a scheduler or RTOS.
	bool waitForEvent(EventResponderRef event, int timeout);
	EventResponder * waitForEvent(EventResponder *list, int listsize, int timeout);
	static void runFromYield() {
		if (!firstYield) return;  
    fc6c:	ldr	r3, [pc, #176]	; (fd20 <yield+0xd8>)
    fc6e:	ldr	r2, [r3, #0]
    fc70:	cbz	r2, fc78 <yield+0x30>
		// First, check if yield was called from an interrupt
		// never call normal handler functions from any interrupt context
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    fc72:	mrs	r2, IPSR
		if (ipsr != 0) return;
    fc76:	cbz	r2, fc7c <yield+0x34>
    fc78:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    fc7c:	mrs	r0, PRIMASK
		__disable_irq();
    fc80:	cpsid	i
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
		if (ipsr != 0) return;
		// Next, check if any events have been triggered
		bool irq = disableInterrupts();
		EventResponder *first = firstYield;
    fc82:	ldr	r2, [r3, #0]
		if (first == nullptr) {
    fc84:	cbz	r2, fc8e <yield+0x46>
			return;
		}
		// Finally, make sure we're not being recursively called,
		// which can happen if the user's function does anything
		// that calls yield.
		if (runningFromYield) {
    fc86:	ldr	r4, [pc, #156]	; (fd24 <yield+0xdc>)
    fc88:	ldrb	r1, [r4, #0]
    fc8a:	cmp	r1, #0
    fc8c:	beq.n	fcee <yield+0xa6>
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    fc8e:	cmp	r0, #0
    fc90:	bne.n	fc78 <yield+0x30>
    fc92:	cpsie	i
    fc94:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	*/

	operator bool()			{ return true; }

	static inline void processSerialEventsList() {
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    fc98:	ldr.w	r8, [pc, #148]	; fd30 <yield+0xe8>
    fc9c:	ldrb.w	r2, [r8]
    fca0:	cmp	r2, #0
    fca2:	beq.n	fc64 <yield+0x1c>
    fca4:	movs	r4, #0
    fca6:	ldr.w	r9, [pc, #140]	; fd34 <yield+0xec>
    fcaa:	b.n	fcb8 <yield+0x70>
    fcac:	adds	r4, #1
    fcae:	ldrb.w	r3, [r8]
    fcb2:	uxtb	r4, r4
    fcb4:	cmp	r3, r4
    fcb6:	bls.n	fce0 <yield+0x98>
			s_serials_with_serial_events[i]->doYieldCode();
    fcb8:	ldr.w	r5, [r9, r4, lsl #2]
	static HardwareSerial 	*s_serials_with_serial_events[7];
	#endif
	static uint8_t 			s_count_serials_with_serial_events;
	void addToSerialEventsList(); 
	inline void doYieldCode()  {
		if (available()) (*hardware->_serialEvent)();
    fcbc:	ldr	r3, [r5, #0]
    fcbe:	mov	r0, r5
    fcc0:	ldr	r3, [r3, #16]
    fcc2:	blx	r3
    fcc4:	cmp	r0, #0
    fcc6:	beq.n	fcac <yield+0x64>
    fcc8:	ldr	r3, [r5, #20]
    fcca:	ldr	r3, [r3, #8]
    fccc:	blx	r3
    fcce:	b.n	fcac <yield+0x64>
				if (elapsed > 750) break;
			}
		}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    fcd0:	bl	e1b8 <usb_serial_available>
	running = 1;


	// USB Serail - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
		if (Serial.available()) serialEvent();
    fcd4:	cbnz	r0, fd0c <yield+0xc4>
		if (_serialEvent_default) yield_active_check_flags &= ~YIELD_CHECK_USB_SERIAL;
    fcd6:	ldr	r3, [pc, #80]	; (fd28 <yield+0xe0>)
    fcd8:	ldrb	r3, [r3, #0]
    fcda:	cbnz	r3, fce4 <yield+0x9c>
    fcdc:	ldrb	r3, [r6, #0]
    fcde:	b.n	fc60 <yield+0x18>
    fce0:	ldrb	r3, [r6, #0]
    fce2:	b.n	fc64 <yield+0x1c>
    fce4:	ldrb	r3, [r6, #0]
    fce6:	and.w	r3, r3, #254	; 0xfe
    fcea:	strb	r3, [r6, #0]
    fcec:	b.n	fc60 <yield+0x18>
		if (runningFromYield) {
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
    fcee:	movs	r6, #1
		firstYield = first->_next;
    fcf0:	ldr	r5, [r2, #20]
		if (runningFromYield) {
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
    fcf2:	strb	r6, [r4, #0]
		firstYield = first->_next;
    fcf4:	str	r5, [r3, #0]
		if (firstYield) {
    fcf6:	cbz	r5, fd12 <yield+0xca>
			firstYield->_prev = nullptr;
    fcf8:	str	r1, [r5, #24]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    fcfa:	cbnz	r0, fcfe <yield+0xb6>
    fcfc:	cpsie	i
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
		}
		enableInterrupts(irq);
		first->_triggered = false;
    fcfe:	movs	r5, #0
		(*(first->_function))(*first);
    fd00:	ldr	r3, [r2, #8]
    fd02:	mov	r0, r2
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
		}
		enableInterrupts(irq);
		first->_triggered = false;
    fd04:	strb	r5, [r2, #29]
		(*(first->_function))(*first);
    fd06:	blx	r3
		runningFromYield = false;
    fd08:	strb	r5, [r4, #0]
    fd0a:	b.n	fc78 <yield+0x30>
	running = 1;


	// USB Serail - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
		if (Serial.available()) serialEvent();
    fd0c:	bl	10064 <serialEvent()>
    fd10:	b.n	fcd6 <yield+0x8e>
		runningFromYield = true;
		firstYield = first->_next;
		if (firstYield) {
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
    fd12:	ldr	r3, [pc, #24]	; (fd2c <yield+0xe4>)
    fd14:	str	r5, [r3, #0]
    fd16:	b.n	fcfa <yield+0xb2>
    fd18:	.word	0x20000c5e
    fd1c:	.word	0x200448e0
    fd20:	.word	0x200448f0
    fd24:	.word	0x200448f4
    fd28:	.word	0x60001dd2
    fd2c:	.word	0x200448ec
    fd30:	.word	0x20044914
    fd34:	.word	0x200448f8

0000fd38 <EventResponder::triggerEventNotImmediate()>:
uint8_t _serialEvent_default __attribute__((weak)) PROGMEM = 0 ;	
uint8_t _serialEventUSB1_default __attribute__((weak)) PROGMEM = 0 ;	
uint8_t _serialEventUSB2_default __attribute__((weak)) PROGMEM = 0 ;	

void EventResponder::triggerEventNotImmediate()
{
    fd38:	push	{r4}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    fd3a:	mrs	r2, PRIMASK
		__disable_irq();
    fd3e:	cpsid	i
	bool irq = disableInterrupts();
	if (_triggered == false) {
    fd40:	ldrb	r3, [r0, #29]
    fd42:	cbnz	r3, fd52 <EventResponder::triggerEventNotImmediate()+0x1a>
		// not already triggered
		if (_type == EventTypeYield) {
    fd44:	ldrb	r1, [r0, #28]
    fd46:	cmp	r1, #1
    fd48:	beq.n	fd5c <EventResponder::triggerEventNotImmediate()+0x24>
				_next = nullptr;
				_prev = lastYield;
				_prev->_next = this;
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
    fd4a:	cmp	r1, #3
    fd4c:	beq.n	fd70 <EventResponder::triggerEventNotImmediate()+0x38>
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
		} else {
			// detached, easy :-)
		}
		_triggered = true;
    fd4e:	movs	r3, #1
    fd50:	strb	r3, [r0, #29]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    fd52:	cbnz	r2, fd56 <EventResponder::triggerEventNotImmediate()+0x1e>
    fd54:	cpsie	i
	}
	enableInterrupts(irq);
}
    fd56:	ldr.w	r4, [sp], #4
    fd5a:	bx	lr
	bool irq = disableInterrupts();
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
    fd5c:	ldr	r4, [pc, #68]	; (fda4 <EventResponder::triggerEventNotImmediate()+0x6c>)
    fd5e:	ldr	r1, [r4, #0]
    fd60:	cbz	r1, fd8c <EventResponder::triggerEventNotImmediate()+0x54>
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
    fd62:	ldr	r1, [pc, #68]	; (fda8 <EventResponder::triggerEventNotImmediate()+0x70>)
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
    fd64:	str	r3, [r0, #20]
				_prev = lastYield;
    fd66:	ldr	r3, [r1, #0]
				_prev->_next = this;
				lastYield = this;
    fd68:	str	r0, [r1, #0]
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
    fd6a:	str	r3, [r0, #24]
				_prev->_next = this;
    fd6c:	str	r0, [r3, #20]
    fd6e:	b.n	fd4e <EventResponder::triggerEventNotImmediate()+0x16>
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
    fd70:	ldr	r4, [pc, #56]	; (fdac <EventResponder::triggerEventNotImmediate()+0x74>)
    fd72:	ldr	r1, [r4, #0]
    fd74:	cbz	r1, fd98 <EventResponder::triggerEventNotImmediate()+0x60>
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
    fd76:	ldr	r1, [pc, #56]	; (fdb0 <EventResponder::triggerEventNotImmediate()+0x78>)
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
    fd78:	str	r3, [r0, #20]
				_prev = lastInterrupt;
    fd7a:	ldr	r3, [r1, #0]
				_prev->_next = this;
				lastInterrupt = this;
    fd7c:	str	r0, [r1, #0]
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
    fd7e:	str	r3, [r0, #24]
				_prev->_next = this;
    fd80:	str	r0, [r3, #20]
				lastInterrupt = this;
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
    fd82:	ldr	r3, [pc, #48]	; (fdb4 <EventResponder::triggerEventNotImmediate()+0x7c>)
    fd84:	mov.w	r1, #268435456	; 0x10000000
    fd88:	str	r1, [r3, #0]
    fd8a:	b.n	fd4e <EventResponder::triggerEventNotImmediate()+0x16>
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
    fd8c:	ldr	r3, [pc, #24]	; (fda8 <EventResponder::triggerEventNotImmediate()+0x70>)
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
    fd8e:	str	r1, [r0, #20]
				_prev = nullptr;
    fd90:	str	r1, [r0, #24]
				firstYield = this;
    fd92:	str	r0, [r4, #0]
				lastYield = this;
    fd94:	str	r0, [r3, #0]
    fd96:	b.n	fd4e <EventResponder::triggerEventNotImmediate()+0x16>
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
    fd98:	ldr	r3, [pc, #20]	; (fdb0 <EventResponder::triggerEventNotImmediate()+0x78>)
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
    fd9a:	str	r1, [r0, #20]
				_prev = nullptr;
    fd9c:	str	r1, [r0, #24]
				firstInterrupt = this;
    fd9e:	str	r0, [r4, #0]
				lastInterrupt = this;
    fda0:	str	r0, [r3, #0]
    fda2:	b.n	fd82 <EventResponder::triggerEventNotImmediate()+0x4a>
    fda4:	.word	0x200448f0
    fda8:	.word	0x200448ec
    fdac:	.word	0x200448e4
    fdb0:	.word	0x200448e8
    fdb4:	.word	0xe000ed04

0000fdb8 <EventResponder::runFromInterrupt()>:
{
	EventResponder::runFromInterrupt();
}

void EventResponder::runFromInterrupt()
{
    fdb8:	push	{r4, r5, r6, lr}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    fdba:	mrs	r1, PRIMASK
		__disable_irq();
    fdbe:	cpsid	i
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    fdc0:	ldr	r4, [pc, #48]	; (fdf4 <EventResponder::runFromInterrupt()+0x3c>)
    fdc2:	ldr	r3, [r4, #0]
		if (first) {
    fdc4:	cbz	r3, fdea <EventResponder::runFromInterrupt()+0x32>
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    fdc6:	ldr	r6, [pc, #48]	; (fdf8 <EventResponder::runFromInterrupt()+0x40>)
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
    fdc8:	movs	r5, #0
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
    fdca:	ldr	r2, [r3, #20]
    fdcc:	str	r2, [r4, #0]
			if (firstInterrupt) {
    fdce:	cbz	r2, fdf0 <EventResponder::runFromInterrupt()+0x38>
				firstInterrupt->_prev = nullptr;
    fdd0:	str	r5, [r2, #24]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    fdd2:	cbnz	r1, fdd6 <EventResponder::runFromInterrupt()+0x1e>
    fdd4:	cpsie	i
			} else {
				lastInterrupt = nullptr;
			}
			enableInterrupts(irq);
			first->_triggered = false;
    fdd6:	strb	r5, [r3, #29]
			(*(first->_function))(*first);
    fdd8:	mov	r0, r3
    fdda:	ldr	r3, [r3, #8]
    fddc:	blx	r3
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    fdde:	mrs	r1, PRIMASK
		__disable_irq();
    fde2:	cpsid	i

void EventResponder::runFromInterrupt()
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    fde4:	ldr	r3, [r4, #0]
		if (first) {
    fde6:	cmp	r3, #0
    fde8:	bne.n	fdca <EventResponder::runFromInterrupt()+0x12>
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    fdea:	cbnz	r1, fdee <EventResponder::runFromInterrupt()+0x36>
    fdec:	cpsie	i
    fdee:	pop	{r4, r5, r6, pc}
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    fdf0:	str	r2, [r6, #0]
    fdf2:	b.n	fdd2 <EventResponder::runFromInterrupt()+0x1a>
    fdf4:	.word	0x200448e4
    fdf8:	.word	0x200448e8

0000fdfc <pendablesrvreq_isr>:
	enableInterrupts(irq);
}

extern "C" void pendablesrvreq_isr(void)
{
	EventResponder::runFromInterrupt();
    fdfc:	b.w	fdb8 <EventResponder::runFromInterrupt()>

0000fe00 <systick_isr>:
extern "C" volatile uint32_t systick_millis_count;
extern "C" volatile uint32_t systick_cycle_count;
extern "C" uint32_t systick_safe_read; // micros() synchronization
extern "C" void systick_isr(void)
{
	systick_cycle_count = ARM_DWT_CYCCNT;
    fe00:	ldr	r2, [pc, #16]	; (fe14 <systick_isr+0x14>)
    fe02:	ldr	r3, [pc, #20]	; (fe18 <systick_isr+0x18>)
    fe04:	ldr	r1, [r2, #0]
	systick_millis_count++;
    fe06:	ldr	r2, [pc, #20]	; (fe1c <systick_isr+0x1c>)
extern "C" volatile uint32_t systick_millis_count;
extern "C" volatile uint32_t systick_cycle_count;
extern "C" uint32_t systick_safe_read; // micros() synchronization
extern "C" void systick_isr(void)
{
	systick_cycle_count = ARM_DWT_CYCCNT;
    fe08:	str	r1, [r3, #0]
	systick_millis_count++;
    fe0a:	ldr	r3, [r2, #0]
    fe0c:	adds	r3, #1
    fe0e:	str	r3, [r2, #0]
    fe10:	bx	lr
    fe12:	nop
    fe14:	.word	0xe0001004
    fe18:	.word	0x2004479c
    fe1c:	.word	0x200447a4

0000fe20 <DMAChannel::begin(bool)>:
#warning "CR is defined as something?"
#endif


void DMAChannel::begin(bool force_initialization)
{
    fe20:	push	{r4, r5, r6, r7}
	uint32_t ch = 0;

	__disable_irq();
    fe22:	cpsid	i
	if (!force_initialization && TCD && channel < DMA_MAX_CHANNELS
    fe24:	cbnz	r1, fe4a <DMAChannel::begin(bool)+0x2a>
    fe26:	ldr	r2, [r0, #0]
    fe28:	cbz	r2, fe4a <DMAChannel::begin(bool)+0x2a>
    fe2a:	ldrb	r3, [r0, #4]
    fe2c:	cmp	r3, #15
    fe2e:	bhi.n	fe4a <DMAChannel::begin(bool)+0x2a>
	  && (dma_channel_allocated_mask & (1 << channel))
    fe30:	ldr	r4, [pc, #124]	; (feb0 <DMAChannel::begin(bool)+0x90>)
    fe32:	ldrh	r1, [r4, #0]
    fe34:	asr.w	r5, r1, r3
    fe38:	lsls	r5, r5, #31
    fe3a:	bpl.n	fe4e <DMAChannel::begin(bool)+0x2e>
	  && (uint32_t)TCD == (uint32_t)(0x400E9000 + channel * 32)) {
    fe3c:	ldr	r5, [pc, #116]	; (feb4 <DMAChannel::begin(bool)+0x94>)
    fe3e:	add	r5, r3
    fe40:	cmp.w	r2, r5, lsl #5
    fe44:	bne.n	fe4e <DMAChannel::begin(bool)+0x2e>
		// DMA channel already allocated
		__enable_irq();
    fe46:	cpsie	i
		return;
    fe48:	b.n	fe68 <DMAChannel::begin(bool)+0x48>
    fe4a:	ldr	r4, [pc, #100]	; (feb0 <DMAChannel::begin(bool)+0x90>)
    fe4c:	ldrh	r1, [r4, #0]
#warning "CR is defined as something?"
#endif


void DMAChannel::begin(bool force_initialization)
{
    fe4e:	movs	r3, #0
		// DMA channel already allocated
		__enable_irq();
		return;
	}
	while (1) {
		if (!(dma_channel_allocated_mask & (1 << ch))) {
    fe50:	asr.w	r2, r1, r3
    fe54:	ands.w	r2, r2, #1
    fe58:	beq.n	fe6c <DMAChannel::begin(bool)+0x4c>
			dma_channel_allocated_mask |= (1 << ch);
			__enable_irq();
			break;
		}
		if (++ch >= DMA_MAX_CHANNELS) {
    fe5a:	adds	r3, #1
    fe5c:	cmp	r3, #16
    fe5e:	bne.n	fe50 <DMAChannel::begin(bool)+0x30>
			__enable_irq();
    fe60:	cpsie	i
			TCD = (TCD_t *)0;
    fe62:	movs	r2, #0
			channel = DMA_MAX_CHANNELS;
    fe64:	strb	r3, [r0, #4]
			__enable_irq();
			break;
		}
		if (++ch >= DMA_MAX_CHANNELS) {
			__enable_irq();
			TCD = (TCD_t *)0;
    fe66:	str	r2, [r0, #0]
	*p++ = 0;
	*p++ = 0;
	*p++ = 0;
	*p++ = 0;
	*p++ = 0;
}
    fe68:	pop	{r4, r5, r6, r7}
    fe6a:	bx	lr
		__enable_irq();
		return;
	}
	while (1) {
		if (!(dma_channel_allocated_mask & (1 << ch))) {
			dma_channel_allocated_mask |= (1 << ch);
    fe6c:	movs	r5, #1
    fe6e:	lsls	r5, r3
    fe70:	orrs	r1, r5
    fe72:	strh	r1, [r4, #0]
			__enable_irq();
    fe74:	cpsie	i
			// attempts to use this object will hardfault
		}
	}
	channel = ch;

	CCM_CCGR5 |= CCM_CCGR5_DMA(CCM_CCGR_ON);
    fe76:	ldr	r6, [pc, #64]	; (feb8 <DMAChannel::begin(bool)+0x98>)
			channel = DMA_MAX_CHANNELS;
			return; // no more channels available
			// attempts to use this object will hardfault
		}
	}
	channel = ch;
    fe78:	uxtb	r4, r3
	DMA_CR = DMA_CR_GRP1PRI | DMA_CR_EMLM | DMA_CR_EDBG;
	DMA_CERQ = ch;
	DMA_CERR = ch;
	DMA_CEEI = ch;
	DMA_CINT = ch;
	TCD = (TCD_t *)(0x400E9000 + ch * 32);
    fe7a:	ldr	r1, [pc, #56]	; (feb4 <DMAChannel::begin(bool)+0x94>)
		}
	}
	channel = ch;

	CCM_CCGR5 |= CCM_CCGR5_DMA(CCM_CCGR_ON);
	DMA_CR = DMA_CR_GRP1PRI | DMA_CR_EMLM | DMA_CR_EDBG;
    fe7c:	movw	r7, #1154	; 0x482
			channel = DMA_MAX_CHANNELS;
			return; // no more channels available
			// attempts to use this object will hardfault
		}
	}
	channel = ch;
    fe80:	strb	r4, [r0, #4]
	DMA_CR = DMA_CR_GRP1PRI | DMA_CR_EMLM | DMA_CR_EDBG;
	DMA_CERQ = ch;
	DMA_CERR = ch;
	DMA_CEEI = ch;
	DMA_CINT = ch;
	TCD = (TCD_t *)(0x400E9000 + ch * 32);
    fe82:	add	r1, r3
			// attempts to use this object will hardfault
		}
	}
	channel = ch;

	CCM_CCGR5 |= CCM_CCGR5_DMA(CCM_CCGR_ON);
    fe84:	ldr	r5, [r6, #124]	; 0x7c
	DMA_CR = DMA_CR_GRP1PRI | DMA_CR_EMLM | DMA_CR_EDBG;
	DMA_CERQ = ch;
	DMA_CERR = ch;
	DMA_CEEI = ch;
	DMA_CINT = ch;
	TCD = (TCD_t *)(0x400E9000 + ch * 32);
    fe86:	lsls	r3, r1, #5
			// attempts to use this object will hardfault
		}
	}
	channel = ch;

	CCM_CCGR5 |= CCM_CCGR5_DMA(CCM_CCGR_ON);
    fe88:	orr.w	r5, r5, #192	; 0xc0
	DMA_CR = DMA_CR_GRP1PRI | DMA_CR_EMLM | DMA_CR_EDBG;
    fe8c:	ldr	r1, [pc, #44]	; (febc <DMAChannel::begin(bool)+0x9c>)
			// attempts to use this object will hardfault
		}
	}
	channel = ch;

	CCM_CCGR5 |= CCM_CCGR5_DMA(CCM_CCGR_ON);
    fe8e:	str	r5, [r6, #124]	; 0x7c
	DMA_CR = DMA_CR_GRP1PRI | DMA_CR_EMLM | DMA_CR_EDBG;
    fe90:	str	r7, [r1, #0]
	DMA_CERQ = ch;
    fe92:	strb	r4, [r1, #26]
	DMA_CERR = ch;
    fe94:	strb	r4, [r1, #30]
	DMA_CEEI = ch;
    fe96:	strb	r4, [r1, #24]
	DMA_CINT = ch;
    fe98:	strb	r4, [r1, #31]
	TCD = (TCD_t *)(0x400E9000 + ch * 32);
    fe9a:	str	r3, [r0, #0]
	uint32_t *p = (uint32_t *)TCD;
	*p++ = 0;
    fe9c:	str	r2, [r3, #0]
	*p++ = 0;
    fe9e:	str	r2, [r3, #4]
	*p++ = 0;
    fea0:	str	r2, [r3, #8]
	*p++ = 0;
    fea2:	str	r2, [r3, #12]
	*p++ = 0;
    fea4:	str	r2, [r3, #16]
	*p++ = 0;
    fea6:	str	r2, [r3, #20]
	*p++ = 0;
    fea8:	str	r2, [r3, #24]
	*p++ = 0;
    feaa:	str	r2, [r3, #28]
}
    feac:	pop	{r4, r5, r6, r7}
    feae:	bx	lr
    feb0:	.word	0x200448f6
    feb4:	.word	0x02007480
    feb8:	.word	0x400fc000
    febc:	.word	0x400e8000

0000fec0 <DMAChannel::release()>:

void DMAChannel::release(void)
{
	if (channel >= DMA_MAX_CHANNELS) return;
    fec0:	ldrb	r3, [r0, #4]
    fec2:	cmp	r3, #15
    fec4:	bhi.n	fee8 <DMAChannel::release()+0x28>
	DMA_CERQ = channel;
    fec6:	ldr	r2, [pc, #36]	; (feec <DMAChannel::release()+0x2c>)
    fec8:	strb	r3, [r2, #26]
	__disable_irq();
    feca:	cpsid	i
	dma_channel_allocated_mask &= ~(1 << channel);
    fecc:	ldr	r1, [pc, #32]	; (fef0 <DMAChannel::release()+0x30>)
    fece:	movs	r3, #1
    fed0:	ldrb	r2, [r0, #4]
    fed2:	lsl.w	r2, r3, r2
    fed6:	ldrh	r3, [r1, #0]
    fed8:	bic.w	r3, r3, r2
    fedc:	strh	r3, [r1, #0]
	__enable_irq();
    fede:	cpsie	i
	channel = DMA_MAX_CHANNELS;
    fee0:	movs	r2, #16
	TCD = (TCD_t *)0;
    fee2:	movs	r3, #0
	if (channel >= DMA_MAX_CHANNELS) return;
	DMA_CERQ = channel;
	__disable_irq();
	dma_channel_allocated_mask &= ~(1 << channel);
	__enable_irq();
	channel = DMA_MAX_CHANNELS;
    fee4:	strb	r2, [r0, #4]
	TCD = (TCD_t *)0;
    fee6:	str	r3, [r0, #0]
    fee8:	bx	lr
    feea:	nop
    feec:	.word	0x400e8000
    fef0:	.word	0x200448f6

0000fef4 <usb_serial_class::clear()>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
    fef4:	b.w	e1c4 <usb_serial_flush_input>

0000fef8 <usb_serial_class::peek()>:
		}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
    fef8:	b.w	e174 <usb_serial_peekchar>

0000fefc <usb_serial_class::read()>:
			}
		}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
    fefc:	b.w	e238 <usb_serial_getchar>

0000ff00 <usb_serial_class::available()>:
				if (elapsed > 750) break;
			}
		}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    ff00:	b.w	e1b8 <usb_serial_available>

0000ff04 <usb_serial_class::flush()>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
    ff04:	b.w	e2e8 <usb_serial_flush_output>

0000ff08 <usb_serial_class::availableForWrite()>:
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
	size_t write(unsigned long n) { return write((uint8_t)n); }
	size_t write(long n) { return write((uint8_t)n); }
	size_t write(unsigned int n) { return write((uint8_t)n); }
	size_t write(int n) { return write((uint8_t)n); }
	virtual int availableForWrite() { return usb_serial_write_buffer_free(); }
    ff08:	b.w	e29c <usb_serial_write_buffer_free>

0000ff0c <usb_serial_class::write(unsigned char const*, unsigned int)>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    ff0c:	mov	r0, r1
    ff0e:	mov	r1, r2
    ff10:	b.w	e284 <usb_serial_write>

0000ff14 <usb_serial_class::write(unsigned char)>:
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    ff14:	mov	r0, r1
    ff16:	b.w	e258 <usb_serial_putchar>
    ff1a:	nop

0000ff1c <Print::write(unsigned char const*, unsigned int)>:

#include "debug/printf.h"
#undef printf

size_t Print::write(const uint8_t *buffer, size_t size)
{
    ff1c:	push	{r3, r4, r5, r6, r7, lr}
	if (buffer == nullptr) return 0;
    ff1e:	mov	r6, r1
    ff20:	cbz	r1, ff40 <Print::write(unsigned char const*, unsigned int)+0x24>
	size_t count = 0;
	while (size--) count += write(*buffer++);
    ff22:	cbz	r2, ff44 <Print::write(unsigned char const*, unsigned int)+0x28>
    ff24:	mov	r7, r0
    ff26:	mov	r4, r2
    ff28:	movs	r5, #0
    ff2a:	ldr	r3, [r7, #0]
    ff2c:	mov	r0, r7
    ff2e:	ldrb.w	r1, [r6], #1
    ff32:	ldr	r3, [r3, #0]
    ff34:	blx	r3
    ff36:	subs	r4, #1
    ff38:	add	r5, r0
    ff3a:	bne.n	ff2a <Print::write(unsigned char const*, unsigned int)+0xe>
    ff3c:	mov	r0, r5
    ff3e:	pop	{r3, r4, r5, r6, r7, pc}
#include "debug/printf.h"
#undef printf

size_t Print::write(const uint8_t *buffer, size_t size)
{
	if (buffer == nullptr) return 0;
    ff40:	mov	r0, r1
    ff42:	pop	{r3, r4, r5, r6, r7, pc}
    ff44:	mov	r0, r2
	size_t count = 0;
	while (size--) count += write(*buffer++);
	return count;
}
    ff46:	pop	{r3, r4, r5, r6, r7, pc}

0000ff48 <Print::println()>:
	if (n < 0) return printNumber64(-n, 10, 1);
	return printNumber64(n, 10, 0);
}

size_t Print::println(void)
{
    ff48:	push	{r4, lr}
	uint8_t buf[2]={'\r', '\n'};
    ff4a:	ldr	r4, [pc, #24]	; (ff64 <Print::println()+0x1c>)
	if (n < 0) return printNumber64(-n, 10, 1);
	return printNumber64(n, 10, 0);
}

size_t Print::println(void)
{
    ff4c:	sub	sp, #8
	uint8_t buf[2]={'\r', '\n'};
	return write(buf, 2);
    ff4e:	ldr	r3, [r0, #0]
    ff50:	movs	r2, #2
	return printNumber64(n, 10, 0);
}

size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    ff52:	ldrh	r4, [r4, #0]
	return write(buf, 2);
    ff54:	add	r1, sp, #4
    ff56:	ldr	r3, [r3, #4]
	return printNumber64(n, 10, 0);
}

size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    ff58:	strh.w	r4, [sp, #4]
	return write(buf, 2);
    ff5c:	blx	r3
}
    ff5e:	add	sp, #8
    ff60:	pop	{r4, pc}
    ff62:	nop
    ff64:	.word	0x200008b0

0000ff68 <_write>:

extern "C" {
__attribute__((weak))
int _write(int file, char *ptr, int len)
{
	((class Print *)file)->write((uint8_t *)ptr, len);
    ff68:	ldr	r3, [r0, #0]
}

extern "C" {
__attribute__((weak))
int _write(int file, char *ptr, int len)
{
    ff6a:	push	{r4, lr}
    ff6c:	mov	r4, r2
	((class Print *)file)->write((uint8_t *)ptr, len);
    ff6e:	ldr	r3, [r3, #4]
    ff70:	blx	r3
	return len;
}
    ff72:	mov	r0, r4
    ff74:	pop	{r4, pc}
    ff76:	nop

0000ff78 <Print::printf(char const*, ...)>:
}

int Print::printf(const char *format, ...)
{
    ff78:	push	{r1, r2, r3}
    ff7a:	push	{lr}
    ff7c:	sub	sp, #8
    ff7e:	add	r3, sp, #12
    ff80:	ldr.w	r1, [r3], #4
	va_list ap;
	va_start(ap, format);
#ifdef __STRICT_ANSI__
	return 0;  // TODO: make this work with -std=c++0x
#else
	return vdprintf((int)this, format, ap);
    ff84:	mov	r2, r3
}

int Print::printf(const char *format, ...)
{
	va_list ap;
	va_start(ap, format);
    ff86:	str	r3, [sp, #4]
#ifdef __STRICT_ANSI__
	return 0;  // TODO: make this work with -std=c++0x
#else
	return vdprintf((int)this, format, ap);
    ff88:	bl	1297c <vdprintf>
#endif
}
    ff8c:	add	sp, #8
    ff8e:	ldr.w	lr, [sp], #4
    ff92:	add	sp, #12
    ff94:	bx	lr
    ff96:	nop

0000ff98 <Print::printNumber64(unsigned long long, unsigned char, unsigned char)>:
	}
	return write(buf + i, sizeof(buf) - i);
}

size_t Print::printNumber64(uint64_t n, uint8_t base, uint8_t sign)
{
    ff98:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    ff9c:	sub	sp, #72	; 0x48
    ff9e:	ldrb.w	r6, [sp, #104]	; 0x68
    ffa2:	ldrb.w	sl, [sp, #108]	; 0x6c
	uint8_t buf[66];
	uint8_t digit, i;

	if (base < 2) return 0;
    ffa6:	cmp	r6, #1
    ffa8:	bls.n	1004c <Print::printNumber64(unsigned long long, unsigned char, unsigned char)+0xb4>
    ffaa:	mov	r4, r2
    ffac:	mov	r5, r3
    ffae:	mov	r9, r0
	if (n == 0) {
    ffb0:	orrs.w	r3, r4, r5
    ffb4:	beq.n	10040 <Print::printNumber64(unsigned long long, unsigned char, unsigned char)+0xa8>
    ffb6:	uxtb	r6, r6
    ffb8:	movs	r7, #0
    ffba:	mov.w	r8, #65	; 0x41
    ffbe:	b.n	ffc4 <Print::printNumber64(unsigned long long, unsigned char, unsigned char)+0x2c>
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
			n /= base;
			if (n == 0) break;
			i--;
    ffc0:	uxtb.w	r8, r3
		buf[sizeof(buf) - 1] = '0';
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
    ffc4:	mov	r0, r4
    ffc6:	mov	r1, r5
    ffc8:	mov	r2, r6
    ffca:	mov	r3, r7
    ffcc:	bl	1007c <__aeabi_uldivmod>
    ffd0:	mov	r1, r3
    ffd2:	uxtb	r3, r2
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
			n /= base;
    ffd4:	mov	r0, r4
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    ffd6:	cmp	r1, #0
    ffd8:	add	r4, sp, #72	; 0x48
    ffda:	add.w	lr, r3, #55	; 0x37
    ffde:	add.w	r3, r3, #48	; 0x30
    ffe2:	it	eq
    ffe4:	cmpeq	r2, #10
    ffe6:	add	r4, r8
			n /= base;
    ffe8:	mov	r1, r5
    ffea:	mov	r2, r6
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    ffec:	it	cc
    ffee:	uxtbcc.w	lr, r3
			n /= base;
    fff2:	mov	r3, r7
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    fff4:	it	cs
    fff6:	uxtbcs.w	lr, lr
    fffa:	strb.w	lr, [r4, #-68]
			n /= base;
    fffe:	bl	1007c <__aeabi_uldivmod>
   10002:	mov	r4, r0
   10004:	mov	r5, r1
			if (n == 0) break;
			i--;
   10006:	add.w	r3, r8, #4294967295
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
			n /= base;
			if (n == 0) break;
   1000a:	orrs.w	r2, r4, r5
   1000e:	bne.n	ffc0 <Print::printNumber64(unsigned long long, unsigned char, unsigned char)+0x28>
			i--;
		}
	}
	if (sign) {
   10010:	cmp.w	sl, #0
   10014:	beq.n	10028 <Print::printNumber64(unsigned long long, unsigned char, unsigned char)+0x90>
		i--;
   10016:	add.w	r8, r8, #4294967295
		buf[i] = '-';
   1001a:	add	r3, sp, #72	; 0x48
   1001c:	movs	r2, #45	; 0x2d
			if (n == 0) break;
			i--;
		}
	}
	if (sign) {
		i--;
   1001e:	uxtb.w	r8, r8
		buf[i] = '-';
   10022:	add	r3, r8
   10024:	strb.w	r2, [r3, #-68]
	}
	return write(buf + i, sizeof(buf) - i);
   10028:	ldr.w	r3, [r9]
   1002c:	add	r1, sp, #4
   1002e:	rsb	r2, r8, #66	; 0x42
   10032:	mov	r0, r9
   10034:	add	r1, r8
   10036:	ldr	r3, [r3, #4]
   10038:	blx	r3
}
   1003a:	add	sp, #72	; 0x48
   1003c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	uint8_t buf[66];
	uint8_t digit, i;

	if (base < 2) return 0;
	if (n == 0) {
		buf[sizeof(buf) - 1] = '0';
   10040:	movs	r3, #48	; 0x30
		i = sizeof(buf) - 1;
   10042:	mov.w	r8, #65	; 0x41
	uint8_t buf[66];
	uint8_t digit, i;

	if (base < 2) return 0;
	if (n == 0) {
		buf[sizeof(buf) - 1] = '0';
   10046:	strb.w	r3, [sp, #69]	; 0x45
   1004a:	b.n	10010 <Print::printNumber64(unsigned long long, unsigned char, unsigned char)+0x78>
size_t Print::printNumber64(uint64_t n, uint8_t base, uint8_t sign)
{
	uint8_t buf[66];
	uint8_t digit, i;

	if (base < 2) return 0;
   1004c:	movs	r0, #0
	if (sign) {
		i--;
		buf[i] = '-';
	}
	return write(buf + i, sizeof(buf) - i);
}
   1004e:	add	sp, #72	; 0x48
   10050:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00010054 <main>:
 */

#include <Arduino.h>

extern "C" int main(void)
{
   10054:	push	{r3, lr}
	}


#else
	// Arduino's main() function just calls setup() and loop()....
	setup();
   10056:	bl	1904 <setup>
	while (1) {
		loop();
   1005a:	bl	141c <loop>
		yield();
   1005e:	bl	fc48 <yield>
   10062:	b.n	1005a <main+0x6>

00010064 <serialEvent()>:

#include <Arduino.h>
void serialEvent() __attribute__((weak));
void serialEvent() {
   10064:	bx	lr
   10066:	nop

00010068 <operator new(unsigned int)>:
   10068:	b.w	10468 <malloc>

0001006c <operator delete(void*, unsigned int)>:
   1006c:	b.w	10478 <free>

00010070 <__aeabi_atexit>:
   10070:	mov	r3, r1
   10072:	mov	r1, r0
   10074:	mov	r0, r3
   10076:	b.w	103f4 <__cxa_atexit>
   1007a:	nop

0001007c <__aeabi_uldivmod>:
   1007c:	cbnz	r3, 10094 <__aeabi_uldivmod+0x18>
   1007e:	cbnz	r2, 10094 <__aeabi_uldivmod+0x18>
   10080:	cmp	r1, #0
   10082:	it	eq
   10084:	cmpeq	r0, #0
   10086:	itt	ne
   10088:	movne.w	r1, #4294967295
   1008c:	movne.w	r0, #4294967295
   10090:	b.w	10390 <__aeabi_idiv0>
   10094:	sub.w	ip, sp, #8
   10098:	strd	ip, lr, [sp, #-16]!
   1009c:	bl	100ac <__udivmoddi4>
   100a0:	ldr.w	lr, [sp, #4]
   100a4:	ldrd	r2, r3, [sp, #8]
   100a8:	add	sp, #16
   100aa:	bx	lr

000100ac <__udivmoddi4>:
   100ac:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   100b0:	mov	ip, r1
   100b2:	mov	r6, r1
   100b4:	mov	r4, r0
   100b6:	ldr	r5, [sp, #32]
   100b8:	cmp	r3, #0
   100ba:	bne.n	1015e <__udivmoddi4+0xb2>
   100bc:	cmp	r2, r1
   100be:	mov	r7, r2
   100c0:	bls.n	1019c <__udivmoddi4+0xf0>
   100c2:	clz	lr, r2
   100c6:	cmp.w	lr, #0
   100ca:	beq.n	100e4 <__udivmoddi4+0x38>
   100cc:	rsb	r4, lr, #32
   100d0:	lsr.w	r4, r0, r4
   100d4:	lsl.w	r6, r1, lr
   100d8:	orr.w	ip, r4, r6
   100dc:	lsl.w	r7, r2, lr
   100e0:	lsl.w	r4, r0, lr
   100e4:	mov.w	r9, r7, lsr #16
   100e8:	lsrs	r2, r4, #16
   100ea:	udiv	r0, ip, r9
   100ee:	uxth.w	r8, r7
   100f2:	mls	r6, r9, r0, ip
   100f6:	orr.w	r6, r2, r6, lsl #16
   100fa:	mul.w	r3, r0, r8
   100fe:	cmp	r3, r6
   10100:	bls.n	10116 <__udivmoddi4+0x6a>
   10102:	adds	r6, r6, r7
   10104:	add.w	r2, r0, #4294967295
   10108:	bcs.w	10350 <__udivmoddi4+0x2a4>
   1010c:	cmp	r3, r6
   1010e:	bls.w	10350 <__udivmoddi4+0x2a4>
   10112:	subs	r0, #2
   10114:	add	r6, r7
   10116:	subs	r6, r6, r3
   10118:	uxth	r2, r4
   1011a:	udiv	r3, r6, r9
   1011e:	mls	r6, r9, r3, r6
   10122:	orr.w	r4, r2, r6, lsl #16
   10126:	mul.w	r8, r3, r8
   1012a:	cmp	r8, r4
   1012c:	bls.n	10142 <__udivmoddi4+0x96>
   1012e:	adds	r4, r4, r7
   10130:	add.w	r2, r3, #4294967295
   10134:	bcs.w	1034c <__udivmoddi4+0x2a0>
   10138:	cmp	r8, r4
   1013a:	bls.w	1034c <__udivmoddi4+0x2a0>
   1013e:	subs	r3, #2
   10140:	add	r4, r7
   10142:	rsb	r4, r8, r4
   10146:	orr.w	r0, r3, r0, lsl #16
   1014a:	movs	r1, #0
   1014c:	cmp	r5, #0
   1014e:	beq.n	10216 <__udivmoddi4+0x16a>
   10150:	lsr.w	r4, r4, lr
   10154:	movs	r3, #0
   10156:	str	r4, [r5, #0]
   10158:	str	r3, [r5, #4]
   1015a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1015e:	cmp	r3, r1
   10160:	bls.n	10172 <__udivmoddi4+0xc6>
   10162:	cmp	r5, #0
   10164:	beq.n	10212 <__udivmoddi4+0x166>
   10166:	movs	r1, #0
   10168:	stmia.w	r5, {r0, r6}
   1016c:	mov	r0, r1
   1016e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   10172:	clz	r1, r3
   10176:	cmp	r1, #0
   10178:	bne.w	1029c <__udivmoddi4+0x1f0>
   1017c:	cmp	r3, r6
   1017e:	bcc.n	10186 <__udivmoddi4+0xda>
   10180:	cmp	r2, r0
   10182:	bhi.w	10376 <__udivmoddi4+0x2ca>
   10186:	subs	r4, r0, r2
   10188:	sbc.w	r6, r6, r3
   1018c:	movs	r0, #1
   1018e:	mov	ip, r6
   10190:	cmp	r5, #0
   10192:	beq.n	10216 <__udivmoddi4+0x16a>
   10194:	stmia.w	r5, {r4, ip}
   10198:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1019c:	cbnz	r2, 101a4 <__udivmoddi4+0xf8>
   1019e:	movs	r7, #1
   101a0:	udiv	r7, r7, r2
   101a4:	clz	lr, r7
   101a8:	cmp.w	lr, #0
   101ac:	bne.n	1021a <__udivmoddi4+0x16e>
   101ae:	subs	r3, r6, r7
   101b0:	mov.w	r8, r7, lsr #16
   101b4:	uxth.w	ip, r7
   101b8:	movs	r1, #1
   101ba:	udiv	r0, r3, r8
   101be:	lsrs	r2, r4, #16
   101c0:	mls	r6, r8, r0, r3
   101c4:	orr.w	r6, r2, r6, lsl #16
   101c8:	mul.w	r3, ip, r0
   101cc:	cmp	r3, r6
   101ce:	bls.n	101e0 <__udivmoddi4+0x134>
   101d0:	adds	r6, r6, r7
   101d2:	add.w	r2, r0, #4294967295
   101d6:	bcs.n	101de <__udivmoddi4+0x132>
   101d8:	cmp	r3, r6
   101da:	bhi.w	1037a <__udivmoddi4+0x2ce>
   101de:	mov	r0, r2
   101e0:	subs	r6, r6, r3
   101e2:	uxth	r2, r4
   101e4:	udiv	r3, r6, r8
   101e8:	mls	r6, r8, r3, r6
   101ec:	orr.w	r4, r2, r6, lsl #16
   101f0:	mul.w	ip, ip, r3
   101f4:	cmp	ip, r4
   101f6:	bls.n	10208 <__udivmoddi4+0x15c>
   101f8:	adds	r4, r4, r7
   101fa:	add.w	r2, r3, #4294967295
   101fe:	bcs.n	10206 <__udivmoddi4+0x15a>
   10200:	cmp	ip, r4
   10202:	bhi.w	10370 <__udivmoddi4+0x2c4>
   10206:	mov	r3, r2
   10208:	rsb	r4, ip, r4
   1020c:	orr.w	r0, r3, r0, lsl #16
   10210:	b.n	1014c <__udivmoddi4+0xa0>
   10212:	mov	r1, r5
   10214:	mov	r0, r5
   10216:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1021a:	rsb	r1, lr, #32
   1021e:	lsl.w	r3, r6, lr
   10222:	lsl.w	r7, r7, lr
   10226:	lsr.w	r9, r0, r1
   1022a:	mov.w	r8, r7, lsr #16
   1022e:	lsrs	r6, r1
   10230:	orr.w	r9, r9, r3
   10234:	udiv	sl, r6, r8
   10238:	mov.w	r4, r9, lsr #16
   1023c:	mls	r6, r8, sl, r6
   10240:	uxth.w	ip, r7
   10244:	orr.w	r3, r4, r6, lsl #16
   10248:	mul.w	r2, sl, ip
   1024c:	cmp	r2, r3
   1024e:	lsl.w	r4, r0, lr
   10252:	bls.n	1026a <__udivmoddi4+0x1be>
   10254:	adds	r3, r3, r7
   10256:	add.w	r1, sl, #4294967295
   1025a:	bcs.w	1036c <__udivmoddi4+0x2c0>
   1025e:	cmp	r2, r3
   10260:	bls.w	1036c <__udivmoddi4+0x2c0>
   10264:	sub.w	sl, sl, #2
   10268:	add	r3, r7
   1026a:	subs	r3, r3, r2
   1026c:	uxth.w	r9, r9
   10270:	udiv	r1, r3, r8
   10274:	mls	r3, r8, r1, r3
   10278:	orr.w	r3, r9, r3, lsl #16
   1027c:	mul.w	r6, r1, ip
   10280:	cmp	r6, r3
   10282:	bls.n	10294 <__udivmoddi4+0x1e8>
   10284:	adds	r3, r3, r7
   10286:	add.w	r2, r1, #4294967295
   1028a:	bcs.n	10364 <__udivmoddi4+0x2b8>
   1028c:	cmp	r6, r3
   1028e:	bls.n	10364 <__udivmoddi4+0x2b8>
   10290:	subs	r1, #2
   10292:	add	r3, r7
   10294:	subs	r3, r3, r6
   10296:	orr.w	r1, r1, sl, lsl #16
   1029a:	b.n	101ba <__udivmoddi4+0x10e>
   1029c:	rsb	lr, r1, #32
   102a0:	lsr.w	r4, r2, lr
   102a4:	lsls	r3, r1
   102a6:	orrs	r3, r4
   102a8:	lsr.w	r7, r0, lr
   102ac:	lsl.w	r4, r6, r1
   102b0:	mov.w	ip, r3, lsr #16
   102b4:	lsr.w	r6, r6, lr
   102b8:	orrs	r4, r7
   102ba:	udiv	r9, r6, ip
   102be:	lsrs	r7, r4, #16
   102c0:	mls	r6, ip, r9, r6
   102c4:	uxth.w	r8, r3
   102c8:	orr.w	r6, r7, r6, lsl #16
   102cc:	mul.w	r7, r9, r8
   102d0:	cmp	r7, r6
   102d2:	lsl.w	r2, r2, r1
   102d6:	lsl.w	sl, r0, r1
   102da:	bls.n	102ee <__udivmoddi4+0x242>
   102dc:	adds	r6, r6, r3
   102de:	add.w	r0, r9, #4294967295
   102e2:	bcs.n	10368 <__udivmoddi4+0x2bc>
   102e4:	cmp	r7, r6
   102e6:	bls.n	10368 <__udivmoddi4+0x2bc>
   102e8:	sub.w	r9, r9, #2
   102ec:	add	r6, r3
   102ee:	subs	r6, r6, r7
   102f0:	uxth	r0, r4
   102f2:	udiv	r4, r6, ip
   102f6:	mls	r6, ip, r4, r6
   102fa:	orr.w	r7, r0, r6, lsl #16
   102fe:	mul.w	r8, r4, r8
   10302:	cmp	r8, r7
   10304:	bls.n	10316 <__udivmoddi4+0x26a>
   10306:	adds	r7, r7, r3
   10308:	add.w	r0, r4, #4294967295
   1030c:	bcs.n	10360 <__udivmoddi4+0x2b4>
   1030e:	cmp	r8, r7
   10310:	bls.n	10360 <__udivmoddi4+0x2b4>
   10312:	subs	r4, #2
   10314:	add	r7, r3
   10316:	orr.w	r0, r4, r9, lsl #16
   1031a:	rsb	r7, r8, r7
   1031e:	umull	r8, r9, r0, r2
   10322:	cmp	r7, r9
   10324:	mov	r4, r8
   10326:	mov	r6, r9
   10328:	bcc.n	10354 <__udivmoddi4+0x2a8>
   1032a:	beq.n	10380 <__udivmoddi4+0x2d4>
   1032c:	cbz	r5, 10388 <__udivmoddi4+0x2dc>
   1032e:	subs.w	r3, sl, r4
   10332:	sbc.w	r7, r7, r6
   10336:	lsl.w	lr, r7, lr
   1033a:	lsrs	r3, r1
   1033c:	lsrs	r7, r1
   1033e:	orr.w	r3, lr, r3
   10342:	stmia.w	r5, {r3, r7}
   10346:	movs	r1, #0
   10348:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1034c:	mov	r3, r2
   1034e:	b.n	10142 <__udivmoddi4+0x96>
   10350:	mov	r0, r2
   10352:	b.n	10116 <__udivmoddi4+0x6a>
   10354:	subs.w	r4, r8, r2
   10358:	sbc.w	r6, r9, r3
   1035c:	subs	r0, #1
   1035e:	b.n	1032c <__udivmoddi4+0x280>
   10360:	mov	r4, r0
   10362:	b.n	10316 <__udivmoddi4+0x26a>
   10364:	mov	r1, r2
   10366:	b.n	10294 <__udivmoddi4+0x1e8>
   10368:	mov	r9, r0
   1036a:	b.n	102ee <__udivmoddi4+0x242>
   1036c:	mov	sl, r1
   1036e:	b.n	1026a <__udivmoddi4+0x1be>
   10370:	subs	r3, #2
   10372:	add	r4, r7
   10374:	b.n	10208 <__udivmoddi4+0x15c>
   10376:	mov	r0, r1
   10378:	b.n	10190 <__udivmoddi4+0xe4>
   1037a:	subs	r0, #2
   1037c:	add	r6, r7
   1037e:	b.n	101e0 <__udivmoddi4+0x134>
   10380:	cmp	sl, r8
   10382:	bcc.n	10354 <__udivmoddi4+0x2a8>
   10384:	mov	r6, r7
   10386:	b.n	1032c <__udivmoddi4+0x280>
   10388:	mov	r1, r5
   1038a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1038e:	nop

00010390 <__aeabi_idiv0>:
   10390:	bx	lr
   10392:	nop

00010394 <_calloc_r>:
   10394:	push	{r4, lr}
   10396:	mul.w	r1, r2, r1
   1039a:	bl	10488 <_malloc_r>
   1039e:	mov	r4, r0
   103a0:	cbz	r0, 103da <_calloc_r+0x46>
   103a2:	ldr.w	r2, [r0, #-4]
   103a6:	bic.w	r2, r2, #3
   103aa:	subs	r2, #4
   103ac:	cmp	r2, #36	; 0x24
   103ae:	bhi.n	103e2 <_calloc_r+0x4e>
   103b0:	cmp	r2, #19
   103b2:	bls.n	103de <_calloc_r+0x4a>
   103b4:	movs	r3, #0
   103b6:	cmp	r2, #27
   103b8:	str	r3, [r0, #0]
   103ba:	str	r3, [r0, #4]
   103bc:	bls.n	103ec <_calloc_r+0x58>
   103be:	cmp	r2, #36	; 0x24
   103c0:	str	r3, [r0, #8]
   103c2:	str	r3, [r0, #12]
   103c4:	iteee	ne
   103c6:	addne.w	r2, r0, #16
   103ca:	streq	r3, [r0, #16]
   103cc:	streq	r3, [r0, #20]
   103ce:	addeq.w	r2, r0, #24
   103d2:	movs	r3, #0
   103d4:	str	r3, [r2, #0]
   103d6:	str	r3, [r2, #4]
   103d8:	str	r3, [r2, #8]
   103da:	mov	r0, r4
   103dc:	pop	{r4, pc}
   103de:	mov	r2, r0
   103e0:	b.n	103d2 <_calloc_r+0x3e>
   103e2:	movs	r1, #0
   103e4:	bl	10bfc <memset>
   103e8:	mov	r0, r4
   103ea:	pop	{r4, pc}
   103ec:	add.w	r2, r0, #8
   103f0:	b.n	103d2 <_calloc_r+0x3e>
   103f2:	nop

000103f4 <__cxa_atexit>:
   103f4:	mov	r3, r2
   103f6:	mov	r2, r1
   103f8:	mov	r1, r0
   103fa:	movs	r0, #2
   103fc:	b.w	129dc <__register_exitproc>

00010400 <fcvtf>:
   10400:	movs	r3, #0
   10402:	vcvt.f64.f32	d0, s0
   10406:	b.w	1382c <fcvtbuf>
   1040a:	nop

0001040c <__errno>:
   1040c:	ldr	r3, [pc, #4]	; (10414 <__errno+0x8>)
   1040e:	ldr	r0, [r3, #0]
   10410:	bx	lr
   10412:	nop
   10414:	.word	0x20001098

00010418 <__libc_init_array>:
   10418:	push	{r4, r5, r6, lr}
   1041a:	ldr	r6, [pc, #60]	; (10458 <__libc_init_array+0x40>)
   1041c:	ldr	r5, [pc, #60]	; (1045c <__libc_init_array+0x44>)
   1041e:	subs	r6, r6, r5
   10420:	asrs	r6, r6, #2
   10422:	it	ne
   10424:	movne	r4, #0
   10426:	beq.n	10434 <__libc_init_array+0x1c>
   10428:	adds	r4, #1
   1042a:	ldr.w	r3, [r5], #4
   1042e:	blx	r3
   10430:	cmp	r6, r4
   10432:	bne.n	10428 <__libc_init_array+0x10>
   10434:	ldr	r6, [pc, #40]	; (10460 <__libc_init_array+0x48>)
   10436:	ldr	r5, [pc, #44]	; (10464 <__libc_init_array+0x4c>)
   10438:	subs	r6, r6, r5
   1043a:	bl	14308 <___init_veneer>
   1043e:	asrs	r6, r6, #2
   10440:	it	ne
   10442:	movne	r4, #0
   10444:	beq.n	10454 <__libc_init_array+0x3c>
   10446:	adds	r4, #1
   10448:	ldr.w	r3, [r5], #4
   1044c:	blx	r3
   1044e:	cmp	r6, r4
   10450:	bne.n	10446 <__libc_init_array+0x2e>
   10452:	pop	{r4, r5, r6, pc}
   10454:	pop	{r4, r5, r6, pc}
   10456:	nop
   10458:	.word	0x60001b48
   1045c:	.word	0x60001b48
   10460:	.word	0x60001bb8
   10464:	.word	0x60001b48

00010468 <malloc>:
   10468:	ldr	r3, [pc, #8]	; (10474 <malloc+0xc>)
   1046a:	mov	r1, r0
   1046c:	ldr	r0, [r3, #0]
   1046e:	b.w	10488 <_malloc_r>
   10472:	nop
   10474:	.word	0x20001098

00010478 <free>:
   10478:	ldr	r3, [pc, #8]	; (10484 <free+0xc>)
   1047a:	mov	r1, r0
   1047c:	ldr	r0, [r3, #0]
   1047e:	b.w	13998 <_free_r>
   10482:	nop
   10484:	.word	0x20001098

00010488 <_malloc_r>:
   10488:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1048c:	add.w	r5, r1, #11
   10490:	cmp	r5, #22
   10492:	sub	sp, #12
   10494:	mov	r6, r0
   10496:	bls.w	105d8 <_malloc_r+0x150>
   1049a:	bics.w	r5, r5, #7
   1049e:	bmi.w	10620 <_malloc_r+0x198>
   104a2:	cmp	r1, r5
   104a4:	bhi.w	10620 <_malloc_r+0x198>
   104a8:	bl	10c98 <__malloc_lock>
   104ac:	cmp.w	r5, #504	; 0x1f8
   104b0:	bcc.w	109ec <_malloc_r+0x564>
   104b4:	lsrs	r3, r5, #9
   104b6:	beq.w	1062e <_malloc_r+0x1a6>
   104ba:	cmp	r3, #4
   104bc:	bhi.w	107c6 <_malloc_r+0x33e>
   104c0:	lsrs	r0, r5, #6
   104c2:	add.w	lr, r0, #57	; 0x39
   104c6:	mov.w	r3, lr, lsl #1
   104ca:	adds	r0, #56	; 0x38
   104cc:	ldr	r7, [pc, #784]	; (107e0 <_malloc_r+0x358>)
   104ce:	add.w	r3, r7, r3, lsl #2
   104d2:	sub.w	r1, r3, #8
   104d6:	ldr	r4, [r3, #4]
   104d8:	cmp	r1, r4
   104da:	bne.n	104ec <_malloc_r+0x64>
   104dc:	b.n	10638 <_malloc_r+0x1b0>
   104de:	cmp	r2, #0
   104e0:	bge.w	1063c <_malloc_r+0x1b4>
   104e4:	ldr	r4, [r4, #12]
   104e6:	cmp	r1, r4
   104e8:	beq.w	10638 <_malloc_r+0x1b0>
   104ec:	ldr	r3, [r4, #4]
   104ee:	bic.w	r3, r3, #3
   104f2:	subs	r2, r3, r5
   104f4:	cmp	r2, #15
   104f6:	ble.n	104de <_malloc_r+0x56>
   104f8:	ldr	r1, [pc, #740]	; (107e0 <_malloc_r+0x358>)
   104fa:	ldr	r4, [r7, #16]
   104fc:	add.w	lr, r1, #8
   10500:	cmp	r4, lr
   10502:	beq.w	1086c <_malloc_r+0x3e4>
   10506:	ldr	r3, [r4, #4]
   10508:	bic.w	r3, r3, #3
   1050c:	subs	r2, r3, r5
   1050e:	cmp	r2, #15
   10510:	bgt.w	10846 <_malloc_r+0x3be>
   10514:	cmp	r2, #0
   10516:	str.w	lr, [r1, #20]
   1051a:	str.w	lr, [r1, #16]
   1051e:	bge.w	1065e <_malloc_r+0x1d6>
   10522:	cmp.w	r3, #512	; 0x200
   10526:	bcs.w	107f8 <_malloc_r+0x370>
   1052a:	lsrs	r3, r3, #3
   1052c:	add.w	ip, r3, #1
   10530:	movs	r2, #1
   10532:	asrs	r3, r3, #2
   10534:	lsl.w	r3, r2, r3
   10538:	ldr	r2, [r1, #4]
   1053a:	ldr.w	r8, [r1, ip, lsl #3]
   1053e:	str.w	r8, [r4, #8]
   10542:	add.w	r9, r1, ip, lsl #3
   10546:	orrs	r2, r3
   10548:	sub.w	r3, r9, #8
   1054c:	str	r3, [r4, #12]
   1054e:	str	r2, [r1, #4]
   10550:	str.w	r4, [r1, ip, lsl #3]
   10554:	str.w	r4, [r8, #12]
   10558:	asrs	r3, r0, #2
   1055a:	movs	r4, #1
   1055c:	lsls	r4, r3
   1055e:	cmp	r4, r2
   10560:	bhi.w	10678 <_malloc_r+0x1f0>
   10564:	tst	r4, r2
   10566:	bne.n	10576 <_malloc_r+0xee>
   10568:	bic.w	r0, r0, #3
   1056c:	lsls	r4, r4, #1
   1056e:	tst	r4, r2
   10570:	add.w	r0, r0, #4
   10574:	beq.n	1056c <_malloc_r+0xe4>
   10576:	add.w	r9, r7, r0, lsl #3
   1057a:	mov	ip, r9
   1057c:	mov	r8, r0
   1057e:	ldr.w	r1, [ip, #12]
   10582:	cmp	ip, r1
   10584:	bne.n	10596 <_malloc_r+0x10e>
   10586:	b.n	10870 <_malloc_r+0x3e8>
   10588:	cmp	r2, #0
   1058a:	bge.w	10890 <_malloc_r+0x408>
   1058e:	ldr	r1, [r1, #12]
   10590:	cmp	ip, r1
   10592:	beq.w	10870 <_malloc_r+0x3e8>
   10596:	ldr	r3, [r1, #4]
   10598:	bic.w	r3, r3, #3
   1059c:	subs	r2, r3, r5
   1059e:	cmp	r2, #15
   105a0:	ble.n	10588 <_malloc_r+0x100>
   105a2:	mov	r4, r1
   105a4:	ldr.w	ip, [r1, #12]
   105a8:	ldr.w	r8, [r4, #8]!
   105ac:	adds	r3, r1, r5
   105ae:	orr.w	r5, r5, #1
   105b2:	str	r5, [r1, #4]
   105b4:	orr.w	r1, r2, #1
   105b8:	str.w	ip, [r8, #12]
   105bc:	mov	r0, r6
   105be:	str.w	r8, [ip, #8]
   105c2:	str	r3, [r7, #20]
   105c4:	str	r3, [r7, #16]
   105c6:	str.w	lr, [r3, #12]
   105ca:	str.w	lr, [r3, #8]
   105ce:	str	r1, [r3, #4]
   105d0:	str	r2, [r3, r2]
   105d2:	bl	10c9c <__malloc_unlock>
   105d6:	b.n	10618 <_malloc_r+0x190>
   105d8:	cmp	r1, #16
   105da:	bhi.n	10620 <_malloc_r+0x198>
   105dc:	bl	10c98 <__malloc_lock>
   105e0:	movs	r5, #16
   105e2:	movs	r3, #6
   105e4:	movs	r0, #2
   105e6:	ldr	r7, [pc, #504]	; (107e0 <_malloc_r+0x358>)
   105e8:	add.w	r3, r7, r3, lsl #2
   105ec:	sub.w	r2, r3, #8
   105f0:	ldr	r4, [r3, #4]
   105f2:	cmp	r4, r2
   105f4:	beq.w	10882 <_malloc_r+0x3fa>
   105f8:	ldr	r3, [r4, #4]
   105fa:	ldr	r1, [r4, #12]
   105fc:	ldr	r5, [r4, #8]
   105fe:	bic.w	r3, r3, #3
   10602:	add	r3, r4
   10604:	mov	r0, r6
   10606:	ldr	r2, [r3, #4]
   10608:	str	r1, [r5, #12]
   1060a:	orr.w	r2, r2, #1
   1060e:	str	r5, [r1, #8]
   10610:	str	r2, [r3, #4]
   10612:	bl	10c9c <__malloc_unlock>
   10616:	adds	r4, #8
   10618:	mov	r0, r4
   1061a:	add	sp, #12
   1061c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10620:	movs	r4, #0
   10622:	movs	r3, #12
   10624:	mov	r0, r4
   10626:	str	r3, [r6, #0]
   10628:	add	sp, #12
   1062a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1062e:	movs	r3, #128	; 0x80
   10630:	mov.w	lr, #64	; 0x40
   10634:	movs	r0, #63	; 0x3f
   10636:	b.n	104cc <_malloc_r+0x44>
   10638:	mov	r0, lr
   1063a:	b.n	104f8 <_malloc_r+0x70>
   1063c:	add	r3, r4
   1063e:	ldr	r1, [r4, #12]
   10640:	ldr	r2, [r3, #4]
   10642:	ldr	r5, [r4, #8]
   10644:	orr.w	r2, r2, #1
   10648:	str	r1, [r5, #12]
   1064a:	mov	r0, r6
   1064c:	str	r5, [r1, #8]
   1064e:	str	r2, [r3, #4]
   10650:	bl	10c9c <__malloc_unlock>
   10654:	adds	r4, #8
   10656:	mov	r0, r4
   10658:	add	sp, #12
   1065a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1065e:	add	r3, r4
   10660:	mov	r0, r6
   10662:	ldr	r2, [r3, #4]
   10664:	orr.w	r2, r2, #1
   10668:	str	r2, [r3, #4]
   1066a:	bl	10c9c <__malloc_unlock>
   1066e:	adds	r4, #8
   10670:	mov	r0, r4
   10672:	add	sp, #12
   10674:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10678:	ldr	r4, [r7, #8]
   1067a:	ldr	r3, [r4, #4]
   1067c:	bic.w	r8, r3, #3
   10680:	cmp	r8, r5
   10682:	bcc.n	1068e <_malloc_r+0x206>
   10684:	rsb	r3, r5, r8
   10688:	cmp	r3, #15
   1068a:	bgt.w	107a6 <_malloc_r+0x31e>
   1068e:	ldr	r3, [pc, #340]	; (107e4 <_malloc_r+0x35c>)
   10690:	ldr.w	r9, [pc, #352]	; 107f4 <_malloc_r+0x36c>
   10694:	ldr	r2, [r3, #0]
   10696:	ldr.w	r3, [r9]
   1069a:	adds	r3, #1
   1069c:	add	r2, r5
   1069e:	add.w	sl, r4, r8
   106a2:	beq.w	10966 <_malloc_r+0x4de>
   106a6:	add.w	r2, r2, #4096	; 0x1000
   106aa:	adds	r2, #15
   106ac:	bic.w	r2, r2, #4080	; 0xff0
   106b0:	bic.w	r2, r2, #15
   106b4:	mov	r1, r2
   106b6:	mov	r0, r6
   106b8:	str	r2, [sp, #4]
   106ba:	bl	11080 <_sbrk_r>
   106be:	cmp.w	r0, #4294967295
   106c2:	mov	fp, r0
   106c4:	ldr	r2, [sp, #4]
   106c6:	beq.w	1097a <_malloc_r+0x4f2>
   106ca:	cmp	sl, r0
   106cc:	bhi.w	108c8 <_malloc_r+0x440>
   106d0:	ldr	r3, [pc, #276]	; (107e8 <_malloc_r+0x360>)
   106d2:	ldr	r1, [r3, #0]
   106d4:	cmp	sl, fp
   106d6:	add	r1, r2
   106d8:	str	r1, [r3, #0]
   106da:	beq.w	10984 <_malloc_r+0x4fc>
   106de:	ldr.w	r0, [r9]
   106e2:	ldr.w	lr, [pc, #272]	; 107f4 <_malloc_r+0x36c>
   106e6:	adds	r0, #1
   106e8:	ittet	ne
   106ea:	rsbne	sl, sl, fp
   106ee:	addne	r1, sl
   106f0:	streq.w	fp, [lr]
   106f4:	strne	r1, [r3, #0]
   106f6:	ands.w	r1, fp, #7
   106fa:	beq.w	1092c <_malloc_r+0x4a4>
   106fe:	rsb	r0, r1, #8
   10702:	rsb	r1, r1, #4096	; 0x1000
   10706:	add	fp, r0
   10708:	adds	r1, #8
   1070a:	add	r2, fp
   1070c:	ubfx	r2, r2, #0, #12
   10710:	rsb	r9, r2, r1
   10714:	mov	r1, r9
   10716:	mov	r0, r6
   10718:	str	r3, [sp, #4]
   1071a:	bl	11080 <_sbrk_r>
   1071e:	adds	r3, r0, #1
   10720:	ldr	r3, [sp, #4]
   10722:	beq.w	109a4 <_malloc_r+0x51c>
   10726:	rsb	r2, fp, r0
   1072a:	add	r2, r9
   1072c:	orr.w	r2, r2, #1
   10730:	ldr	r1, [r3, #0]
   10732:	str.w	fp, [r7, #8]
   10736:	add	r1, r9
   10738:	cmp	r4, r7
   1073a:	str.w	r2, [fp, #4]
   1073e:	str	r1, [r3, #0]
   10740:	ldr.w	r9, [pc, #164]	; 107e8 <_malloc_r+0x360>
   10744:	beq.n	10774 <_malloc_r+0x2ec>
   10746:	cmp.w	r8, #15
   1074a:	bls.w	10948 <_malloc_r+0x4c0>
   1074e:	ldr	r2, [r4, #4]
   10750:	sub.w	r3, r8, #12
   10754:	bic.w	r3, r3, #7
   10758:	adds	r0, r4, r3
   1075a:	and.w	r2, r2, #1
   1075e:	mov.w	lr, #5
   10762:	orrs	r2, r3
   10764:	cmp	r3, #15
   10766:	str	r2, [r4, #4]
   10768:	str.w	lr, [r0, #4]
   1076c:	str.w	lr, [r0, #8]
   10770:	bhi.w	109ac <_malloc_r+0x524>
   10774:	ldr	r3, [pc, #116]	; (107ec <_malloc_r+0x364>)
   10776:	ldr	r4, [r7, #8]
   10778:	ldr	r2, [r3, #0]
   1077a:	cmp	r1, r2
   1077c:	it	hi
   1077e:	strhi	r1, [r3, #0]
   10780:	ldr	r3, [pc, #108]	; (107f0 <_malloc_r+0x368>)
   10782:	ldr	r2, [r3, #0]
   10784:	cmp	r1, r2
   10786:	ldr	r2, [r4, #4]
   10788:	it	hi
   1078a:	strhi	r1, [r3, #0]
   1078c:	bic.w	r2, r2, #3
   10790:	cmp	r5, r2
   10792:	sub.w	r3, r2, r5
   10796:	bhi.n	1079c <_malloc_r+0x314>
   10798:	cmp	r3, #15
   1079a:	bgt.n	107a6 <_malloc_r+0x31e>
   1079c:	mov	r0, r6
   1079e:	bl	10c9c <__malloc_unlock>
   107a2:	movs	r4, #0
   107a4:	b.n	10618 <_malloc_r+0x190>
   107a6:	adds	r2, r4, r5
   107a8:	orr.w	r3, r3, #1
   107ac:	orr.w	r5, r5, #1
   107b0:	str	r5, [r4, #4]
   107b2:	mov	r0, r6
   107b4:	str	r2, [r7, #8]
   107b6:	str	r3, [r2, #4]
   107b8:	bl	10c9c <__malloc_unlock>
   107bc:	adds	r4, #8
   107be:	mov	r0, r4
   107c0:	add	sp, #12
   107c2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   107c6:	cmp	r3, #20
   107c8:	bls.n	108ae <_malloc_r+0x426>
   107ca:	cmp	r3, #84	; 0x54
   107cc:	bhi.w	10918 <_malloc_r+0x490>
   107d0:	lsrs	r0, r5, #12
   107d2:	add.w	lr, r0, #111	; 0x6f
   107d6:	mov.w	r3, lr, lsl #1
   107da:	adds	r0, #110	; 0x6e
   107dc:	b.n	104cc <_malloc_r+0x44>
   107de:	nop
   107e0:	.word	0x20001208
   107e4:	.word	0x20044920
   107e8:	.word	0x20044924
   107ec:	.word	0x2004491c
   107f0:	.word	0x20044918
   107f4:	.word	0x20001614
   107f8:	lsrs	r2, r3, #9
   107fa:	cmp	r2, #4
   107fc:	bls.n	108bc <_malloc_r+0x434>
   107fe:	cmp	r2, #20
   10800:	bhi.w	1096a <_malloc_r+0x4e2>
   10804:	add.w	r1, r2, #92	; 0x5c
   10808:	lsls	r1, r1, #1
   1080a:	adds	r2, #91	; 0x5b
   1080c:	add.w	ip, r7, r1, lsl #2
   10810:	ldr.w	r1, [r7, r1, lsl #2]
   10814:	ldr.w	r8, [pc, #476]	; 109f4 <_malloc_r+0x56c>
   10818:	sub.w	ip, ip, #8
   1081c:	cmp	ip, r1
   1081e:	beq.w	10932 <_malloc_r+0x4aa>
   10822:	ldr	r2, [r1, #4]
   10824:	bic.w	r2, r2, #3
   10828:	cmp	r3, r2
   1082a:	bcs.n	10832 <_malloc_r+0x3aa>
   1082c:	ldr	r1, [r1, #8]
   1082e:	cmp	ip, r1
   10830:	bne.n	10822 <_malloc_r+0x39a>
   10832:	ldr.w	ip, [r1, #12]
   10836:	ldr	r2, [r7, #4]
   10838:	str.w	ip, [r4, #12]
   1083c:	str	r1, [r4, #8]
   1083e:	str.w	r4, [ip, #8]
   10842:	str	r4, [r1, #12]
   10844:	b.n	10558 <_malloc_r+0xd0>
   10846:	adds	r3, r4, r5
   10848:	orr.w	r7, r2, #1
   1084c:	orr.w	r5, r5, #1
   10850:	str	r5, [r4, #4]
   10852:	mov	r0, r6
   10854:	str	r3, [r1, #20]
   10856:	str	r3, [r1, #16]
   10858:	str.w	lr, [r3, #12]
   1085c:	str.w	lr, [r3, #8]
   10860:	str	r7, [r3, #4]
   10862:	str	r2, [r3, r2]
   10864:	adds	r4, #8
   10866:	bl	10c9c <__malloc_unlock>
   1086a:	b.n	10618 <_malloc_r+0x190>
   1086c:	ldr	r2, [r1, #4]
   1086e:	b.n	10558 <_malloc_r+0xd0>
   10870:	add.w	r8, r8, #1
   10874:	tst.w	r8, #3
   10878:	add.w	ip, ip, #8
   1087c:	bne.w	1057e <_malloc_r+0xf6>
   10880:	b.n	108e4 <_malloc_r+0x45c>
   10882:	ldr	r4, [r3, #12]
   10884:	cmp	r3, r4
   10886:	it	eq
   10888:	addeq	r0, #2
   1088a:	beq.w	104f8 <_malloc_r+0x70>
   1088e:	b.n	105f8 <_malloc_r+0x170>
   10890:	add	r3, r1
   10892:	mov	r4, r1
   10894:	ldr	r2, [r3, #4]
   10896:	ldr	r1, [r1, #12]
   10898:	ldr.w	r5, [r4, #8]!
   1089c:	orr.w	r2, r2, #1
   108a0:	str	r2, [r3, #4]
   108a2:	mov	r0, r6
   108a4:	str	r1, [r5, #12]
   108a6:	str	r5, [r1, #8]
   108a8:	bl	10c9c <__malloc_unlock>
   108ac:	b.n	10618 <_malloc_r+0x190>
   108ae:	add.w	lr, r3, #92	; 0x5c
   108b2:	add.w	r0, r3, #91	; 0x5b
   108b6:	mov.w	r3, lr, lsl #1
   108ba:	b.n	104cc <_malloc_r+0x44>
   108bc:	lsrs	r2, r3, #6
   108be:	add.w	r1, r2, #57	; 0x39
   108c2:	lsls	r1, r1, #1
   108c4:	adds	r2, #56	; 0x38
   108c6:	b.n	1080c <_malloc_r+0x384>
   108c8:	cmp	r4, r7
   108ca:	ldr	r3, [pc, #296]	; (109f4 <_malloc_r+0x56c>)
   108cc:	beq.w	106d0 <_malloc_r+0x248>
   108d0:	ldr	r4, [r3, #8]
   108d2:	ldr	r2, [r4, #4]
   108d4:	bic.w	r2, r2, #3
   108d8:	b.n	10790 <_malloc_r+0x308>
   108da:	ldr.w	r3, [r9], #-8
   108de:	cmp	r9, r3
   108e0:	bne.w	109e8 <_malloc_r+0x560>
   108e4:	tst.w	r0, #3
   108e8:	add.w	r0, r0, #4294967295
   108ec:	bne.n	108da <_malloc_r+0x452>
   108ee:	ldr	r3, [r7, #4]
   108f0:	bic.w	r3, r3, r4
   108f4:	str	r3, [r7, #4]
   108f6:	lsls	r4, r4, #1
   108f8:	cmp	r4, r3
   108fa:	bhi.w	10678 <_malloc_r+0x1f0>
   108fe:	cmp	r4, #0
   10900:	beq.w	10678 <_malloc_r+0x1f0>
   10904:	tst	r4, r3
   10906:	mov	r0, r8
   10908:	bne.w	10576 <_malloc_r+0xee>
   1090c:	lsls	r4, r4, #1
   1090e:	tst	r4, r3
   10910:	add.w	r0, r0, #4
   10914:	beq.n	1090c <_malloc_r+0x484>
   10916:	b.n	10576 <_malloc_r+0xee>
   10918:	cmp.w	r3, #340	; 0x154
   1091c:	bhi.n	10950 <_malloc_r+0x4c8>
   1091e:	lsrs	r0, r5, #15
   10920:	add.w	lr, r0, #120	; 0x78
   10924:	mov.w	r3, lr, lsl #1
   10928:	adds	r0, #119	; 0x77
   1092a:	b.n	104cc <_malloc_r+0x44>
   1092c:	mov.w	r1, #4096	; 0x1000
   10930:	b.n	1070a <_malloc_r+0x282>
   10932:	movs	r1, #1
   10934:	ldr.w	r3, [r8, #4]
   10938:	asrs	r2, r2, #2
   1093a:	lsl.w	r2, r1, r2
   1093e:	orrs	r2, r3
   10940:	str.w	r2, [r8, #4]
   10944:	mov	r1, ip
   10946:	b.n	10838 <_malloc_r+0x3b0>
   10948:	movs	r3, #1
   1094a:	str.w	r3, [fp, #4]
   1094e:	b.n	1079c <_malloc_r+0x314>
   10950:	movw	r2, #1364	; 0x554
   10954:	cmp	r3, r2
   10956:	bhi.n	1099a <_malloc_r+0x512>
   10958:	lsrs	r0, r5, #18
   1095a:	add.w	lr, r0, #125	; 0x7d
   1095e:	mov.w	r3, lr, lsl #1
   10962:	adds	r0, #124	; 0x7c
   10964:	b.n	104cc <_malloc_r+0x44>
   10966:	adds	r2, #16
   10968:	b.n	106b4 <_malloc_r+0x22c>
   1096a:	cmp	r2, #84	; 0x54
   1096c:	bhi.n	109bc <_malloc_r+0x534>
   1096e:	lsrs	r2, r3, #12
   10970:	add.w	r1, r2, #111	; 0x6f
   10974:	lsls	r1, r1, #1
   10976:	adds	r2, #110	; 0x6e
   10978:	b.n	1080c <_malloc_r+0x384>
   1097a:	ldr	r4, [r7, #8]
   1097c:	ldr	r2, [r4, #4]
   1097e:	bic.w	r2, r2, #3
   10982:	b.n	10790 <_malloc_r+0x308>
   10984:	ubfx	r0, sl, #0, #12
   10988:	cmp	r0, #0
   1098a:	bne.w	106de <_malloc_r+0x256>
   1098e:	add	r2, r8
   10990:	ldr	r3, [r7, #8]
   10992:	orr.w	r2, r2, #1
   10996:	str	r2, [r3, #4]
   10998:	b.n	10774 <_malloc_r+0x2ec>
   1099a:	movs	r3, #254	; 0xfe
   1099c:	mov.w	lr, #127	; 0x7f
   109a0:	movs	r0, #126	; 0x7e
   109a2:	b.n	104cc <_malloc_r+0x44>
   109a4:	movs	r2, #1
   109a6:	mov.w	r9, #0
   109aa:	b.n	10730 <_malloc_r+0x2a8>
   109ac:	add.w	r1, r4, #8
   109b0:	mov	r0, r6
   109b2:	bl	13998 <_free_r>
   109b6:	ldr.w	r1, [r9]
   109ba:	b.n	10774 <_malloc_r+0x2ec>
   109bc:	cmp.w	r2, #340	; 0x154
   109c0:	bhi.n	109ce <_malloc_r+0x546>
   109c2:	lsrs	r2, r3, #15
   109c4:	add.w	r1, r2, #120	; 0x78
   109c8:	lsls	r1, r1, #1
   109ca:	adds	r2, #119	; 0x77
   109cc:	b.n	1080c <_malloc_r+0x384>
   109ce:	movw	r1, #1364	; 0x554
   109d2:	cmp	r2, r1
   109d4:	bhi.n	109e2 <_malloc_r+0x55a>
   109d6:	lsrs	r2, r3, #18
   109d8:	add.w	r1, r2, #125	; 0x7d
   109dc:	lsls	r1, r1, #1
   109de:	adds	r2, #124	; 0x7c
   109e0:	b.n	1080c <_malloc_r+0x384>
   109e2:	movs	r1, #254	; 0xfe
   109e4:	movs	r2, #126	; 0x7e
   109e6:	b.n	1080c <_malloc_r+0x384>
   109e8:	ldr	r3, [r7, #4]
   109ea:	b.n	108f6 <_malloc_r+0x46e>
   109ec:	lsrs	r0, r5, #3
   109ee:	adds	r3, r0, #1
   109f0:	lsls	r3, r3, #1
   109f2:	b.n	105e6 <_malloc_r+0x15e>
   109f4:	.word	0x20001208

000109f8 <__ascii_mbtowc>:
   109f8:	sub	sp, #8
   109fa:	cbz	r1, 10a10 <__ascii_mbtowc+0x18>
   109fc:	cbz	r2, 10a16 <__ascii_mbtowc+0x1e>
   109fe:	cbz	r3, 10a1c <__ascii_mbtowc+0x24>
   10a00:	ldrb	r3, [r2, #0]
   10a02:	str	r3, [r1, #0]
   10a04:	ldrb	r2, [r2, #0]
   10a06:	adds	r0, r2, #0
   10a08:	it	ne
   10a0a:	movne	r0, #1
   10a0c:	add	sp, #8
   10a0e:	bx	lr
   10a10:	add	r1, sp, #4
   10a12:	cmp	r2, #0
   10a14:	bne.n	109fe <__ascii_mbtowc+0x6>
   10a16:	mov	r0, r2
   10a18:	add	sp, #8
   10a1a:	bx	lr
   10a1c:	mvn.w	r0, #1
   10a20:	b.n	10a0c <__ascii_mbtowc+0x14>
   10a22:	nop
	...

00010a30 <memchr>:
   10a30:	and.w	r1, r1, #255	; 0xff
   10a34:	cmp	r2, #16
   10a36:	blt.n	10a90 <memchr+0x60>
   10a38:	tst.w	r0, #7
   10a3c:	beq.n	10a50 <memchr+0x20>
   10a3e:	ldrb.w	r3, [r0], #1
   10a42:	subs	r2, #1
   10a44:	cmp	r3, r1
   10a46:	beq.n	10aa4 <memchr+0x74>
   10a48:	tst.w	r0, #7
   10a4c:	cbz	r2, 10aa0 <memchr+0x70>
   10a4e:	bne.n	10a3e <memchr+0xe>
   10a50:	push	{r4, r5, r6, r7}
   10a52:	orr.w	r1, r1, r1, lsl #8
   10a56:	orr.w	r1, r1, r1, lsl #16
   10a5a:	bic.w	r4, r2, #7
   10a5e:	mvns.w	r7, #0
   10a62:	movs	r3, #0
   10a64:	ldrd	r5, r6, [r0], #8
   10a68:	subs	r4, #8
   10a6a:	eor.w	r5, r5, r1
   10a6e:	eor.w	r6, r6, r1
   10a72:	uadd8	r5, r5, r7
   10a76:	sel	r5, r3, r7
   10a7a:	uadd8	r6, r6, r7
   10a7e:	sel	r6, r5, r7
   10a82:	cbnz	r6, 10aa8 <memchr+0x78>
   10a84:	bne.n	10a64 <memchr+0x34>
   10a86:	pop	{r4, r5, r6, r7}
   10a88:	and.w	r1, r1, #255	; 0xff
   10a8c:	and.w	r2, r2, #7
   10a90:	cbz	r2, 10aa0 <memchr+0x70>
   10a92:	ldrb.w	r3, [r0], #1
   10a96:	subs	r2, #1
   10a98:	eor.w	r3, r3, r1
   10a9c:	cbz	r3, 10aa4 <memchr+0x74>
   10a9e:	bne.n	10a92 <memchr+0x62>
   10aa0:	movs	r0, #0
   10aa2:	bx	lr
   10aa4:	subs	r0, #1
   10aa6:	bx	lr
   10aa8:	cmp	r5, #0
   10aaa:	itte	eq
   10aac:	moveq	r5, r6
   10aae:	subeq	r0, #3
   10ab0:	subne	r0, #7
   10ab2:	tst.w	r5, #1
   10ab6:	bne.n	10ac8 <memchr+0x98>
   10ab8:	adds	r0, #1
   10aba:	tst.w	r5, #256	; 0x100
   10abe:	ittt	eq
   10ac0:	addeq	r0, #1
   10ac2:	tsteq.w	r5, #98304	; 0x18000
   10ac6:	addeq	r0, #1
   10ac8:	pop	{r4, r5, r6, r7}
   10aca:	subs	r0, #1
   10acc:	bx	lr
   10ace:	nop

00010ad0 <memcmp>:
   10ad0:	cmp	r2, #3
   10ad2:	push	{r4, r5, r6}
   10ad4:	bls.n	10b24 <memcmp+0x54>
   10ad6:	orr.w	r3, r0, r1
   10ada:	lsls	r3, r3, #30
   10adc:	beq.n	10b02 <memcmp+0x32>
   10ade:	ldrb	r4, [r0, #0]
   10ae0:	ldrb	r5, [r1, #0]
   10ae2:	cmp	r4, r5
   10ae4:	bne.n	10b2c <memcmp+0x5c>
   10ae6:	add	r2, r0
   10ae8:	adds	r3, r0, #1
   10aea:	b.n	10af8 <memcmp+0x28>
   10aec:	ldrb.w	r4, [r3], #1
   10af0:	ldrb.w	r5, [r1, #1]!
   10af4:	cmp	r4, r5
   10af6:	bne.n	10b2c <memcmp+0x5c>
   10af8:	cmp	r3, r2
   10afa:	bne.n	10aec <memcmp+0x1c>
   10afc:	movs	r0, #0
   10afe:	pop	{r4, r5, r6}
   10b00:	bx	lr
   10b02:	mov	r4, r1
   10b04:	mov	r3, r0
   10b06:	ldr	r6, [r3, #0]
   10b08:	ldr	r5, [r4, #0]
   10b0a:	cmp	r6, r5
   10b0c:	mov	r0, r3
   10b0e:	mov	r1, r4
   10b10:	add.w	r3, r3, #4
   10b14:	add.w	r4, r4, #4
   10b18:	bne.n	10ade <memcmp+0xe>
   10b1a:	subs	r2, #4
   10b1c:	cmp	r2, #3
   10b1e:	mov	r0, r3
   10b20:	mov	r1, r4
   10b22:	bhi.n	10b06 <memcmp+0x36>
   10b24:	cmp	r2, #0
   10b26:	bne.n	10ade <memcmp+0xe>
   10b28:	mov	r0, r2
   10b2a:	b.n	10afe <memcmp+0x2e>
   10b2c:	subs	r0, r4, r5
   10b2e:	pop	{r4, r5, r6}
   10b30:	bx	lr
   10b32:	nop

00010b34 <memmove>:
   10b34:	cmp	r0, r1
   10b36:	push	{r4, r5, r6, r7, lr}
   10b38:	bls.n	10b56 <memmove+0x22>
   10b3a:	adds	r3, r1, r2
   10b3c:	cmp	r0, r3
   10b3e:	bcs.n	10b56 <memmove+0x22>
   10b40:	adds	r1, r0, r2
   10b42:	cmp	r2, #0
   10b44:	beq.n	10bea <memmove+0xb6>
   10b46:	subs	r2, r3, r2
   10b48:	ldrb.w	r4, [r3, #-1]!
   10b4c:	strb.w	r4, [r1, #-1]!
   10b50:	cmp	r3, r2
   10b52:	bne.n	10b48 <memmove+0x14>
   10b54:	pop	{r4, r5, r6, r7, pc}
   10b56:	cmp	r2, #15
   10b58:	bls.n	10bec <memmove+0xb8>
   10b5a:	orr.w	r3, r1, r0
   10b5e:	lsls	r3, r3, #30
   10b60:	bne.n	10bf0 <memmove+0xbc>
   10b62:	add.w	r4, r0, #16
   10b66:	add.w	r3, r1, #16
   10b6a:	mov	r5, r2
   10b6c:	ldr.w	r6, [r3, #-16]
   10b70:	str.w	r6, [r4, #-16]
   10b74:	ldr.w	r6, [r3, #-12]
   10b78:	str.w	r6, [r4, #-12]
   10b7c:	ldr.w	r6, [r3, #-8]
   10b80:	str.w	r6, [r4, #-8]
   10b84:	subs	r5, #16
   10b86:	ldr.w	r6, [r3, #-4]
   10b8a:	str.w	r6, [r4, #-4]
   10b8e:	cmp	r5, #15
   10b90:	add.w	r3, r3, #16
   10b94:	add.w	r4, r4, #16
   10b98:	bhi.n	10b6c <memmove+0x38>
   10b9a:	sub.w	r3, r2, #16
   10b9e:	bic.w	r3, r3, #15
   10ba2:	and.w	lr, r2, #15
   10ba6:	adds	r3, #16
   10ba8:	cmp.w	lr, #3
   10bac:	add	r1, r3
   10bae:	add	r3, r0
   10bb0:	bls.n	10bf6 <memmove+0xc2>
   10bb2:	subs	r6, r3, #4
   10bb4:	mov	r5, r1
   10bb6:	mov	r4, lr
   10bb8:	subs	r4, #4
   10bba:	ldr.w	r7, [r5], #4
   10bbe:	str.w	r7, [r6, #4]!
   10bc2:	cmp	r4, #3
   10bc4:	bhi.n	10bb8 <memmove+0x84>
   10bc6:	sub.w	r4, lr, #4
   10bca:	bic.w	r4, r4, #3
   10bce:	adds	r4, #4
   10bd0:	add	r3, r4
   10bd2:	add	r1, r4
   10bd4:	and.w	r2, r2, #3
   10bd8:	cbz	r2, 10bf4 <memmove+0xc0>
   10bda:	subs	r3, #1
   10bdc:	add	r2, r1
   10bde:	ldrb.w	r4, [r1], #1
   10be2:	strb.w	r4, [r3, #1]!
   10be6:	cmp	r2, r1
   10be8:	bne.n	10bde <memmove+0xaa>
   10bea:	pop	{r4, r5, r6, r7, pc}
   10bec:	mov	r3, r0
   10bee:	b.n	10bd8 <memmove+0xa4>
   10bf0:	mov	r3, r0
   10bf2:	b.n	10bda <memmove+0xa6>
   10bf4:	pop	{r4, r5, r6, r7, pc}
   10bf6:	mov	r2, lr
   10bf8:	b.n	10bd8 <memmove+0xa4>
   10bfa:	nop

00010bfc <memset>:
   10bfc:	push	{r4, r5, r6}
   10bfe:	lsls	r4, r0, #30
   10c00:	beq.n	10c90 <memset+0x94>
   10c02:	subs	r4, r2, #1
   10c04:	cmp	r2, #0
   10c06:	beq.n	10c8c <memset+0x90>
   10c08:	uxtb	r5, r1
   10c0a:	mov	r3, r0
   10c0c:	b.n	10c14 <memset+0x18>
   10c0e:	subs	r2, r4, #1
   10c10:	cbz	r4, 10c8c <memset+0x90>
   10c12:	mov	r4, r2
   10c14:	strb.w	r5, [r3], #1
   10c18:	lsls	r2, r3, #30
   10c1a:	bne.n	10c0e <memset+0x12>
   10c1c:	cmp	r4, #3
   10c1e:	bls.n	10c7e <memset+0x82>
   10c20:	uxtb	r5, r1
   10c22:	orr.w	r5, r5, r5, lsl #8
   10c26:	cmp	r4, #15
   10c28:	orr.w	r5, r5, r5, lsl #16
   10c2c:	bls.n	10c62 <memset+0x66>
   10c2e:	add.w	r2, r3, #16
   10c32:	mov	r6, r4
   10c34:	subs	r6, #16
   10c36:	cmp	r6, #15
   10c38:	str.w	r5, [r2, #-16]
   10c3c:	str.w	r5, [r2, #-12]
   10c40:	str.w	r5, [r2, #-8]
   10c44:	str.w	r5, [r2, #-4]
   10c48:	add.w	r2, r2, #16
   10c4c:	bhi.n	10c34 <memset+0x38>
   10c4e:	sub.w	r2, r4, #16
   10c52:	bic.w	r2, r2, #15
   10c56:	and.w	r4, r4, #15
   10c5a:	adds	r2, #16
   10c5c:	cmp	r4, #3
   10c5e:	add	r3, r2
   10c60:	bls.n	10c7e <memset+0x82>
   10c62:	mov	r6, r3
   10c64:	mov	r2, r4
   10c66:	subs	r2, #4
   10c68:	cmp	r2, #3
   10c6a:	str.w	r5, [r6], #4
   10c6e:	bhi.n	10c66 <memset+0x6a>
   10c70:	subs	r2, r4, #4
   10c72:	bic.w	r2, r2, #3
   10c76:	adds	r2, #4
   10c78:	add	r3, r2
   10c7a:	and.w	r4, r4, #3
   10c7e:	cbz	r4, 10c8c <memset+0x90>
   10c80:	uxtb	r1, r1
   10c82:	add	r4, r3
   10c84:	strb.w	r1, [r3], #1
   10c88:	cmp	r3, r4
   10c8a:	bne.n	10c84 <memset+0x88>
   10c8c:	pop	{r4, r5, r6}
   10c8e:	bx	lr
   10c90:	mov	r4, r2
   10c92:	mov	r3, r0
   10c94:	b.n	10c1c <memset+0x20>
   10c96:	nop

00010c98 <__malloc_lock>:
   10c98:	bx	lr
   10c9a:	nop

00010c9c <__malloc_unlock>:
   10c9c:	bx	lr
   10c9e:	nop

00010ca0 <_realloc_r>:
   10ca0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10ca4:	mov	r7, r2
   10ca6:	sub	sp, #12
   10ca8:	cmp	r1, #0
   10caa:	beq.w	10e30 <_realloc_r+0x190>
   10cae:	mov	r6, r1
   10cb0:	mov	r9, r0
   10cb2:	add.w	r5, r7, #11
   10cb6:	bl	10c98 <__malloc_lock>
   10cba:	ldr.w	lr, [r6, #-4]
   10cbe:	cmp	r5, #22
   10cc0:	bic.w	r4, lr, #3
   10cc4:	sub.w	r8, r6, #8
   10cc8:	bhi.n	10d4c <_realloc_r+0xac>
   10cca:	movs	r2, #16
   10ccc:	mov	r5, r2
   10cce:	cmp	r7, r5
   10cd0:	bhi.n	10d56 <_realloc_r+0xb6>
   10cd2:	cmp	r4, r2
   10cd4:	bge.n	10dc2 <_realloc_r+0x122>
   10cd6:	ldr	r3, [pc, #804]	; (10ffc <_realloc_r+0x35c>)
   10cd8:	ldr	r1, [r3, #8]
   10cda:	add.w	r0, r8, r4
   10cde:	cmp	r0, r1
   10ce0:	ldr	r1, [r0, #4]
   10ce2:	beq.w	10e98 <_realloc_r+0x1f8>
   10ce6:	bic.w	r3, r1, #1
   10cea:	add	r3, r0
   10cec:	ldr	r3, [r3, #4]
   10cee:	lsls	r3, r3, #31
   10cf0:	bpl.n	10dee <_realloc_r+0x14e>
   10cf2:	tst.w	lr, #1
   10cf6:	beq.n	10d64 <_realloc_r+0xc4>
   10cf8:	mov	r1, r7
   10cfa:	mov	r0, r9
   10cfc:	bl	10488 <_malloc_r>
   10d00:	mov	r7, r0
   10d02:	cbz	r0, 10d3e <_realloc_r+0x9e>
   10d04:	ldr.w	r3, [r6, #-4]
   10d08:	bic.w	r3, r3, #1
   10d0c:	add	r3, r8
   10d0e:	sub.w	r2, r0, #8
   10d12:	cmp	r2, r3
   10d14:	beq.w	10fa0 <_realloc_r+0x300>
   10d18:	subs	r2, r4, #4
   10d1a:	cmp	r2, #36	; 0x24
   10d1c:	bhi.w	10f82 <_realloc_r+0x2e2>
   10d20:	cmp	r2, #19
   10d22:	bhi.w	10f2e <_realloc_r+0x28e>
   10d26:	mov	r3, r0
   10d28:	mov	r2, r6
   10d2a:	ldr	r1, [r2, #0]
   10d2c:	str	r1, [r3, #0]
   10d2e:	ldr	r1, [r2, #4]
   10d30:	str	r1, [r3, #4]
   10d32:	ldr	r2, [r2, #8]
   10d34:	str	r2, [r3, #8]
   10d36:	mov	r1, r6
   10d38:	mov	r0, r9
   10d3a:	bl	13998 <_free_r>
   10d3e:	mov	r0, r9
   10d40:	bl	10c9c <__malloc_unlock>
   10d44:	mov	r0, r7
   10d46:	add	sp, #12
   10d48:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10d4c:	bic.w	r5, r5, #7
   10d50:	cmp	r5, #0
   10d52:	mov	r2, r5
   10d54:	bge.n	10cce <_realloc_r+0x2e>
   10d56:	movs	r3, #12
   10d58:	movs	r0, #0
   10d5a:	str.w	r3, [r9]
   10d5e:	add	sp, #12
   10d60:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10d64:	ldr.w	r3, [r6, #-8]
   10d68:	rsb	sl, r3, r8
   10d6c:	ldr.w	r3, [sl, #4]
   10d70:	bic.w	ip, r3, #3
   10d74:	add.w	r3, r4, ip
   10d78:	cmp	r3, r2
   10d7a:	blt.n	10cf8 <_realloc_r+0x58>
   10d7c:	mov	r7, sl
   10d7e:	ldr.w	r1, [sl, #12]
   10d82:	ldr.w	r0, [r7, #8]!
   10d86:	subs	r2, r4, #4
   10d88:	cmp	r2, #36	; 0x24
   10d8a:	str	r1, [r0, #12]
   10d8c:	str	r0, [r1, #8]
   10d8e:	bhi.w	10fc0 <_realloc_r+0x320>
   10d92:	cmp	r2, #19
   10d94:	bls.w	10fbc <_realloc_r+0x31c>
   10d98:	ldr	r1, [r6, #0]
   10d9a:	str.w	r1, [sl, #8]
   10d9e:	ldr	r1, [r6, #4]
   10da0:	str.w	r1, [sl, #12]
   10da4:	cmp	r2, #27
   10da6:	bhi.w	11000 <_realloc_r+0x360>
   10daa:	adds	r6, #8
   10dac:	add.w	r2, sl, #16
   10db0:	ldr	r1, [r6, #0]
   10db2:	str	r1, [r2, #0]
   10db4:	ldr	r1, [r6, #4]
   10db6:	str	r1, [r2, #4]
   10db8:	ldr	r1, [r6, #8]
   10dba:	str	r1, [r2, #8]
   10dbc:	mov	r6, r7
   10dbe:	mov	r4, r3
   10dc0:	mov	r8, sl
   10dc2:	subs	r3, r4, r5
   10dc4:	cmp	r3, #15
   10dc6:	bhi.n	10e04 <_realloc_r+0x164>
   10dc8:	ldr.w	r3, [r8, #4]
   10dcc:	and.w	r3, r3, #1
   10dd0:	orrs	r3, r4
   10dd2:	add	r4, r8
   10dd4:	str.w	r3, [r8, #4]
   10dd8:	ldr	r3, [r4, #4]
   10dda:	orr.w	r3, r3, #1
   10dde:	str	r3, [r4, #4]
   10de0:	mov	r0, r9
   10de2:	bl	10c9c <__malloc_unlock>
   10de6:	mov	r0, r6
   10de8:	add	sp, #12
   10dea:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10dee:	bic.w	r1, r1, #3
   10df2:	add	r1, r4
   10df4:	cmp	r1, r2
   10df6:	blt.n	10e3c <_realloc_r+0x19c>
   10df8:	ldr	r3, [r0, #12]
   10dfa:	ldr	r2, [r0, #8]
   10dfc:	mov	r4, r1
   10dfe:	str	r3, [r2, #12]
   10e00:	str	r2, [r3, #8]
   10e02:	b.n	10dc2 <_realloc_r+0x122>
   10e04:	ldr.w	r2, [r8, #4]
   10e08:	add.w	r1, r8, r5
   10e0c:	and.w	r2, r2, #1
   10e10:	orrs	r5, r2
   10e12:	orr.w	r2, r3, #1
   10e16:	add	r3, r1
   10e18:	str.w	r5, [r8, #4]
   10e1c:	str	r2, [r1, #4]
   10e1e:	ldr	r2, [r3, #4]
   10e20:	orr.w	r2, r2, #1
   10e24:	adds	r1, #8
   10e26:	str	r2, [r3, #4]
   10e28:	mov	r0, r9
   10e2a:	bl	13998 <_free_r>
   10e2e:	b.n	10de0 <_realloc_r+0x140>
   10e30:	mov	r1, r2
   10e32:	add	sp, #12
   10e34:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10e38:	b.w	10488 <_malloc_r>
   10e3c:	tst.w	lr, #1
   10e40:	bne.w	10cf8 <_realloc_r+0x58>
   10e44:	ldr.w	r3, [r6, #-8]
   10e48:	rsb	sl, r3, r8
   10e4c:	ldr.w	r3, [sl, #4]
   10e50:	bic.w	ip, r3, #3
   10e54:	add.w	lr, r1, ip
   10e58:	cmp	lr, r2
   10e5a:	blt.n	10d74 <_realloc_r+0xd4>
   10e5c:	ldr	r3, [r0, #12]
   10e5e:	ldr	r2, [r0, #8]
   10e60:	mov	r7, sl
   10e62:	str	r3, [r2, #12]
   10e64:	str	r2, [r3, #8]
   10e66:	ldr.w	r1, [r7, #8]!
   10e6a:	ldr.w	r3, [sl, #12]
   10e6e:	str	r3, [r1, #12]
   10e70:	subs	r2, r4, #4
   10e72:	cmp	r2, #36	; 0x24
   10e74:	str	r1, [r3, #8]
   10e76:	bhi.w	10fac <_realloc_r+0x30c>
   10e7a:	cmp	r2, #19
   10e7c:	bls.n	10f44 <_realloc_r+0x2a4>
   10e7e:	ldr	r3, [r6, #0]
   10e80:	str.w	r3, [sl, #8]
   10e84:	ldr	r3, [r6, #4]
   10e86:	str.w	r3, [sl, #12]
   10e8a:	cmp	r2, #27
   10e8c:	bhi.w	10fd0 <_realloc_r+0x330>
   10e90:	adds	r6, #8
   10e92:	add.w	r3, sl, #16
   10e96:	b.n	10f46 <_realloc_r+0x2a6>
   10e98:	bic.w	fp, r1, #3
   10e9c:	add	fp, r4
   10e9e:	add.w	r0, r5, #16
   10ea2:	cmp	fp, r0
   10ea4:	bge.n	10f5a <_realloc_r+0x2ba>
   10ea6:	tst.w	lr, #1
   10eaa:	bne.w	10cf8 <_realloc_r+0x58>
   10eae:	ldr.w	r1, [r6, #-8]
   10eb2:	rsb	sl, r1, r8
   10eb6:	ldr.w	r1, [sl, #4]
   10eba:	bic.w	ip, r1, #3
   10ebe:	add	fp, ip
   10ec0:	cmp	r0, fp
   10ec2:	bgt.w	10d74 <_realloc_r+0xd4>
   10ec6:	mov	r7, sl
   10ec8:	ldr.w	r1, [sl, #12]
   10ecc:	ldr.w	r0, [r7, #8]!
   10ed0:	subs	r2, r4, #4
   10ed2:	cmp	r2, #36	; 0x24
   10ed4:	str	r1, [r0, #12]
   10ed6:	str	r0, [r1, #8]
   10ed8:	bhi.w	11044 <_realloc_r+0x3a4>
   10edc:	cmp	r2, #19
   10ede:	bls.w	1102c <_realloc_r+0x38c>
   10ee2:	ldr	r1, [r6, #0]
   10ee4:	str.w	r1, [sl, #8]
   10ee8:	ldr	r1, [r6, #4]
   10eea:	str.w	r1, [sl, #12]
   10eee:	cmp	r2, #27
   10ef0:	bhi.w	11052 <_realloc_r+0x3b2>
   10ef4:	adds	r6, #8
   10ef6:	add.w	r2, sl, #16
   10efa:	ldr	r1, [r6, #0]
   10efc:	str	r1, [r2, #0]
   10efe:	ldr	r1, [r6, #4]
   10f00:	str	r1, [r2, #4]
   10f02:	ldr	r1, [r6, #8]
   10f04:	str	r1, [r2, #8]
   10f06:	add.w	r1, sl, r5
   10f0a:	rsb	r2, r5, fp
   10f0e:	orr.w	r2, r2, #1
   10f12:	str	r1, [r3, #8]
   10f14:	str	r2, [r1, #4]
   10f16:	ldr.w	r3, [sl, #4]
   10f1a:	and.w	r3, r3, #1
   10f1e:	orrs	r5, r3
   10f20:	mov	r0, r9
   10f22:	str.w	r5, [sl, #4]
   10f26:	bl	10c9c <__malloc_unlock>
   10f2a:	mov	r0, r7
   10f2c:	b.n	10de8 <_realloc_r+0x148>
   10f2e:	ldr	r3, [r6, #0]
   10f30:	str	r3, [r0, #0]
   10f32:	ldr	r3, [r6, #4]
   10f34:	str	r3, [r0, #4]
   10f36:	cmp	r2, #27
   10f38:	bhi.n	10f8a <_realloc_r+0x2ea>
   10f3a:	add.w	r3, r0, #8
   10f3e:	add.w	r2, r6, #8
   10f42:	b.n	10d2a <_realloc_r+0x8a>
   10f44:	mov	r3, r7
   10f46:	ldr	r2, [r6, #0]
   10f48:	str	r2, [r3, #0]
   10f4a:	ldr	r2, [r6, #4]
   10f4c:	str	r2, [r3, #4]
   10f4e:	ldr	r2, [r6, #8]
   10f50:	str	r2, [r3, #8]
   10f52:	mov	r6, r7
   10f54:	mov	r4, lr
   10f56:	mov	r8, sl
   10f58:	b.n	10dc2 <_realloc_r+0x122>
   10f5a:	add.w	r1, r8, r5
   10f5e:	rsb	fp, r5, fp
   10f62:	orr.w	r2, fp, #1
   10f66:	str	r1, [r3, #8]
   10f68:	str	r2, [r1, #4]
   10f6a:	ldr.w	r3, [r6, #-4]
   10f6e:	and.w	r3, r3, #1
   10f72:	orrs	r5, r3
   10f74:	mov	r0, r9
   10f76:	str.w	r5, [r6, #-4]
   10f7a:	bl	10c9c <__malloc_unlock>
   10f7e:	mov	r0, r6
   10f80:	b.n	10de8 <_realloc_r+0x148>
   10f82:	mov	r1, r6
   10f84:	bl	10b34 <memmove>
   10f88:	b.n	10d36 <_realloc_r+0x96>
   10f8a:	ldr	r3, [r6, #8]
   10f8c:	str	r3, [r0, #8]
   10f8e:	ldr	r3, [r6, #12]
   10f90:	str	r3, [r0, #12]
   10f92:	cmp	r2, #36	; 0x24
   10f94:	beq.n	10fe8 <_realloc_r+0x348>
   10f96:	add.w	r3, r0, #16
   10f9a:	add.w	r2, r6, #16
   10f9e:	b.n	10d2a <_realloc_r+0x8a>
   10fa0:	ldr.w	r3, [r0, #-4]
   10fa4:	bic.w	r3, r3, #3
   10fa8:	add	r4, r3
   10faa:	b.n	10dc2 <_realloc_r+0x122>
   10fac:	mov	r1, r6
   10fae:	mov	r0, r7
   10fb0:	mov	r4, lr
   10fb2:	mov	r8, sl
   10fb4:	bl	10b34 <memmove>
   10fb8:	mov	r6, r7
   10fba:	b.n	10dc2 <_realloc_r+0x122>
   10fbc:	mov	r2, r7
   10fbe:	b.n	10db0 <_realloc_r+0x110>
   10fc0:	mov	r1, r6
   10fc2:	mov	r0, r7
   10fc4:	mov	r4, r3
   10fc6:	mov	r8, sl
   10fc8:	bl	10b34 <memmove>
   10fcc:	mov	r6, r7
   10fce:	b.n	10dc2 <_realloc_r+0x122>
   10fd0:	ldr	r3, [r6, #8]
   10fd2:	str.w	r3, [sl, #16]
   10fd6:	ldr	r3, [r6, #12]
   10fd8:	str.w	r3, [sl, #20]
   10fdc:	cmp	r2, #36	; 0x24
   10fde:	beq.n	11018 <_realloc_r+0x378>
   10fe0:	adds	r6, #16
   10fe2:	add.w	r3, sl, #24
   10fe6:	b.n	10f46 <_realloc_r+0x2a6>
   10fe8:	ldr	r3, [r6, #16]
   10fea:	str	r3, [r0, #16]
   10fec:	ldr	r3, [r6, #20]
   10fee:	str	r3, [r0, #20]
   10ff0:	add.w	r2, r6, #24
   10ff4:	add.w	r3, r0, #24
   10ff8:	b.n	10d2a <_realloc_r+0x8a>
   10ffa:	nop
   10ffc:	.word	0x20001208
   11000:	ldr	r1, [r6, #8]
   11002:	str.w	r1, [sl, #16]
   11006:	ldr	r1, [r6, #12]
   11008:	str.w	r1, [sl, #20]
   1100c:	cmp	r2, #36	; 0x24
   1100e:	beq.n	11030 <_realloc_r+0x390>
   11010:	adds	r6, #16
   11012:	add.w	r2, sl, #24
   11016:	b.n	10db0 <_realloc_r+0x110>
   11018:	ldr	r3, [r6, #16]
   1101a:	str.w	r3, [sl, #24]
   1101e:	ldr	r3, [r6, #20]
   11020:	str.w	r3, [sl, #28]
   11024:	adds	r6, #24
   11026:	add.w	r3, sl, #32
   1102a:	b.n	10f46 <_realloc_r+0x2a6>
   1102c:	mov	r2, r7
   1102e:	b.n	10efa <_realloc_r+0x25a>
   11030:	ldr	r2, [r6, #16]
   11032:	str.w	r2, [sl, #24]
   11036:	ldr	r2, [r6, #20]
   11038:	str.w	r2, [sl, #28]
   1103c:	adds	r6, #24
   1103e:	add.w	r2, sl, #32
   11042:	b.n	10db0 <_realloc_r+0x110>
   11044:	mov	r1, r6
   11046:	mov	r0, r7
   11048:	str	r3, [sp, #4]
   1104a:	bl	10b34 <memmove>
   1104e:	ldr	r3, [sp, #4]
   11050:	b.n	10f06 <_realloc_r+0x266>
   11052:	ldr	r1, [r6, #8]
   11054:	str.w	r1, [sl, #16]
   11058:	ldr	r1, [r6, #12]
   1105a:	str.w	r1, [sl, #20]
   1105e:	cmp	r2, #36	; 0x24
   11060:	beq.n	1106a <_realloc_r+0x3ca>
   11062:	adds	r6, #16
   11064:	add.w	r2, sl, #24
   11068:	b.n	10efa <_realloc_r+0x25a>
   1106a:	ldr	r2, [r6, #16]
   1106c:	str.w	r2, [sl, #24]
   11070:	ldr	r2, [r6, #20]
   11072:	str.w	r2, [sl, #28]
   11076:	adds	r6, #24
   11078:	add.w	r2, sl, #32
   1107c:	b.n	10efa <_realloc_r+0x25a>
   1107e:	nop

00011080 <_sbrk_r>:
   11080:	push	{r3, r4, r5, lr}
   11082:	ldr	r4, [pc, #28]	; (110a0 <_sbrk_r+0x20>)
   11084:	movs	r3, #0
   11086:	mov	r5, r0
   11088:	mov	r0, r1
   1108a:	str	r3, [r4, #0]
   1108c:	bl	f150 <_sbrk>
   11090:	adds	r3, r0, #1
   11092:	beq.n	11096 <_sbrk_r+0x16>
   11094:	pop	{r3, r4, r5, pc}
   11096:	ldr	r3, [r4, #0]
   11098:	cmp	r3, #0
   1109a:	beq.n	11094 <_sbrk_r+0x14>
   1109c:	str	r3, [r5, #0]
   1109e:	pop	{r3, r4, r5, pc}
   110a0:	.word	0x200466c0

000110a4 <sprintf>:
   110a4:	push	{r1, r2, r3}
   110a6:	push	{r4, r5, r6, r7, lr}
   110a8:	sub	sp, #112	; 0x70
   110aa:	add	r3, sp, #132	; 0x84
   110ac:	ldr	r1, [pc, #60]	; (110ec <sprintf+0x48>)
   110ae:	ldr.w	r2, [r3], #4
   110b2:	str	r3, [sp, #4]
   110b4:	mov	r5, r0
   110b6:	mvn.w	r4, #2147483648	; 0x80000000
   110ba:	ldr	r0, [r1, #0]
   110bc:	str	r5, [sp, #8]
   110be:	mov.w	r7, #520	; 0x208
   110c2:	movw	r6, #65535	; 0xffff
   110c6:	add	r1, sp, #8
   110c8:	str	r5, [sp, #24]
   110ca:	strh.w	r7, [sp, #20]
   110ce:	str	r4, [sp, #16]
   110d0:	str	r4, [sp, #28]
   110d2:	strh.w	r6, [sp, #22]
   110d6:	bl	113c0 <_svfprintf_r>
   110da:	ldr	r3, [sp, #8]
   110dc:	movs	r2, #0
   110de:	strb	r2, [r3, #0]
   110e0:	add	sp, #112	; 0x70
   110e2:	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   110e6:	add	sp, #12
   110e8:	bx	lr
   110ea:	nop
   110ec:	.word	0x20001098

000110f0 <strcpy>:
   110f0:	eor.w	r2, r0, r1
   110f4:	mov	ip, r0
   110f6:	tst.w	r2, #3
   110fa:	bne.n	1119c <strcpy+0xac>
   110fc:	tst.w	r1, #3
   11100:	bne.n	11168 <strcpy+0x78>
   11102:	str.w	r4, [sp, #-4]!
   11106:	tst.w	r1, #4
   1110a:	ldr.w	r3, [r1], #4
   1110e:	beq.n	11128 <strcpy+0x38>
   11110:	sub.w	r2, r3, #16843009	; 0x1010101
   11114:	bics	r2, r3
   11116:	tst.w	r2, #2155905152	; 0x80808080
   1111a:	itt	eq
   1111c:	streq.w	r3, [ip], #4
   11120:	ldreq.w	r3, [r1], #4
   11124:	bne.n	11154 <strcpy+0x64>
   11126:	nop
   11128:	ldr.w	r4, [r1], #4
   1112c:	sub.w	r2, r3, #16843009	; 0x1010101
   11130:	bics	r2, r3
   11132:	tst.w	r2, #2155905152	; 0x80808080
   11136:	sub.w	r2, r4, #16843009	; 0x1010101
   1113a:	bne.n	11154 <strcpy+0x64>
   1113c:	str.w	r3, [ip], #4
   11140:	bics	r2, r4
   11142:	tst.w	r2, #2155905152	; 0x80808080
   11146:	itt	eq
   11148:	ldreq.w	r3, [r1], #4
   1114c:	streq.w	r4, [ip], #4
   11150:	beq.n	11128 <strcpy+0x38>
   11152:	mov	r3, r4
   11154:	strb.w	r3, [ip], #1
   11158:	tst.w	r3, #255	; 0xff
   1115c:	mov.w	r3, r3, ror #8
   11160:	bne.n	11154 <strcpy+0x64>
   11162:	ldr.w	r4, [sp], #4
   11166:	bx	lr
   11168:	tst.w	r1, #1
   1116c:	beq.n	1117c <strcpy+0x8c>
   1116e:	ldrb.w	r2, [r1], #1
   11172:	strb.w	r2, [ip], #1
   11176:	cmp	r2, #0
   11178:	it	eq
   1117a:	bxeq	lr
   1117c:	tst.w	r1, #2
   11180:	beq.n	11102 <strcpy+0x12>
   11182:	ldrh.w	r2, [r1], #2
   11186:	tst.w	r2, #255	; 0xff
   1118a:	itet	ne
   1118c:	strhne.w	r2, [ip], #2
   11190:	strbeq.w	r2, [ip]
   11194:	tstne.w	r2, #65280	; 0xff00
   11198:	bne.n	11102 <strcpy+0x12>
   1119a:	bx	lr
   1119c:	ldrb.w	r2, [r1], #1
   111a0:	strb.w	r2, [ip], #1
   111a4:	cmp	r2, #0
   111a6:	bne.n	1119c <strcpy+0xac>
   111a8:	bx	lr
   111aa:	nop

000111ac <strlcat>:
   111ac:	push	{r4, r5, r6, lr}
   111ae:	cbz	r2, 111ee <strlcat+0x42>
   111b0:	ldrb	r6, [r0, #0]
   111b2:	cbz	r6, 111fa <strlcat+0x4e>
   111b4:	adds	r3, r0, #1
   111b6:	adds	r6, r0, r2
   111b8:	b.n	111c0 <strlcat+0x14>
   111ba:	ldrb	r5, [r3, #0]
   111bc:	adds	r3, #1
   111be:	cbz	r5, 111c6 <strlcat+0x1a>
   111c0:	cmp	r6, r3
   111c2:	mov	r4, r3
   111c4:	bne.n	111ba <strlcat+0xe>
   111c6:	subs	r6, r4, r0
   111c8:	subs	r2, r2, r6
   111ca:	beq.n	111f0 <strlcat+0x44>
   111cc:	ldrb	r3, [r1, #0]
   111ce:	mov	r5, r1
   111d0:	cbz	r3, 111e6 <strlcat+0x3a>
   111d2:	cmp	r2, #1
   111d4:	beq.n	111dc <strlcat+0x30>
   111d6:	strb	r3, [r4, #0]
   111d8:	subs	r2, #1
   111da:	adds	r4, #1
   111dc:	ldrb.w	r3, [r5, #1]!
   111e0:	cmp	r3, #0
   111e2:	bne.n	111d2 <strlcat+0x26>
   111e4:	subs	r3, r5, r1
   111e6:	movs	r2, #0
   111e8:	strb	r2, [r4, #0]
   111ea:	adds	r0, r6, r3
   111ec:	pop	{r4, r5, r6, pc}
   111ee:	mov	r6, r2
   111f0:	mov	r0, r1
   111f2:	bl	11240 <strlen>
   111f6:	add	r0, r6
   111f8:	pop	{r4, r5, r6, pc}
   111fa:	mov	r4, r0
   111fc:	b.n	111cc <strlcat+0x20>
   111fe:	nop

00011200 <strlcpy>:
   11200:	push	{r4}
   11202:	mov	r3, r1
   11204:	cbz	r2, 1121a <strlcpy+0x1a>
   11206:	b.n	11212 <strlcpy+0x12>
   11208:	ldrb.w	r4, [r3], #1
   1120c:	strb.w	r4, [r0], #1
   11210:	cbz	r4, 11222 <strlcpy+0x22>
   11212:	subs	r2, #1
   11214:	bne.n	11208 <strlcpy+0x8>
   11216:	movs	r2, #0
   11218:	strb	r2, [r0, #0]
   1121a:	ldrb.w	r2, [r3], #1
   1121e:	cmp	r2, #0
   11220:	bne.n	1121a <strlcpy+0x1a>
   11222:	subs	r0, r3, r1
   11224:	subs	r0, #1
   11226:	ldr.w	r4, [sp], #4
   1122a:	bx	lr
	...

00011240 <strlen>:
   11240:	pld	[r0]
   11244:	strd	r4, r5, [sp, #-8]!
   11248:	bic.w	r1, r0, #7
   1124c:	mvn.w	ip, #0
   11250:	ands.w	r4, r0, #7
   11254:	pld	[r1, #32]
   11258:	bne.w	112ee <strlen+0xae>
   1125c:	mov.w	r4, #0
   11260:	mvn.w	r0, #7
   11264:	ldrd	r2, r3, [r1]
   11268:	pld	[r1, #64]	; 0x40
   1126c:	add.w	r0, r0, #8
   11270:	uadd8	r2, r2, ip
   11274:	sel	r2, r4, ip
   11278:	uadd8	r3, r3, ip
   1127c:	sel	r3, r2, ip
   11280:	cbnz	r3, 112d6 <strlen+0x96>
   11282:	ldrd	r2, r3, [r1, #8]
   11286:	uadd8	r2, r2, ip
   1128a:	add.w	r0, r0, #8
   1128e:	sel	r2, r4, ip
   11292:	uadd8	r3, r3, ip
   11296:	sel	r3, r2, ip
   1129a:	cbnz	r3, 112d6 <strlen+0x96>
   1129c:	ldrd	r2, r3, [r1, #16]
   112a0:	uadd8	r2, r2, ip
   112a4:	add.w	r0, r0, #8
   112a8:	sel	r2, r4, ip
   112ac:	uadd8	r3, r3, ip
   112b0:	sel	r3, r2, ip
   112b4:	cbnz	r3, 112d6 <strlen+0x96>
   112b6:	ldrd	r2, r3, [r1, #24]
   112ba:	add.w	r1, r1, #32
   112be:	uadd8	r2, r2, ip
   112c2:	add.w	r0, r0, #8
   112c6:	sel	r2, r4, ip
   112ca:	uadd8	r3, r3, ip
   112ce:	sel	r3, r2, ip
   112d2:	cmp	r3, #0
   112d4:	beq.n	11264 <strlen+0x24>
   112d6:	cmp	r2, #0
   112d8:	itt	eq
   112da:	addeq	r0, #4
   112dc:	moveq	r2, r3
   112de:	rev	r2, r2
   112e0:	clz	r2, r2
   112e4:	ldrd	r4, r5, [sp], #8
   112e8:	add.w	r0, r0, r2, lsr #3
   112ec:	bx	lr
   112ee:	ldrd	r2, r3, [r1]
   112f2:	and.w	r5, r4, #3
   112f6:	rsb	r0, r4, #0
   112fa:	mov.w	r5, r5, lsl #3
   112fe:	tst.w	r4, #4
   11302:	pld	[r1, #64]	; 0x40
   11306:	lsl.w	r5, ip, r5
   1130a:	orn	r2, r2, r5
   1130e:	itt	ne
   11310:	ornne	r3, r3, r5
   11314:	movne	r2, ip
   11316:	mov.w	r4, #0
   1131a:	b.n	11270 <strlen+0x30>

0001131c <strncmp>:
   1131c:	cmp	r2, #0
   1131e:	beq.n	113a4 <strncmp+0x88>
   11320:	orr.w	r3, r0, r1
   11324:	ands.w	r3, r3, #3
   11328:	push	{r4, r5, r6, r7}
   1132a:	bne.n	11378 <strncmp+0x5c>
   1132c:	cmp	r2, #3
   1132e:	bls.n	11378 <strncmp+0x5c>
   11330:	ldr	r4, [r0, #0]
   11332:	ldr	r5, [r1, #0]
   11334:	cmp	r4, r5
   11336:	bne.n	11378 <strncmp+0x5c>
   11338:	subs	r2, #4
   1133a:	beq.n	113a8 <strncmp+0x8c>
   1133c:	sub.w	r5, r4, #16843009	; 0x1010101
   11340:	bic.w	r4, r5, r4
   11344:	tst.w	r4, #2155905152	; 0x80808080
   11348:	bne.n	113ae <strncmp+0x92>
   1134a:	adds	r7, r0, #4
   1134c:	adds	r5, r1, #4
   1134e:	b.n	1136c <strncmp+0x50>
   11350:	ldr.w	r3, [r7], #4
   11354:	ldr	r6, [r1, #0]
   11356:	sub.w	r4, r3, #16843009	; 0x1010101
   1135a:	cmp	r3, r6
   1135c:	bic.w	r4, r4, r3
   11360:	bne.n	11378 <strncmp+0x5c>
   11362:	subs	r2, #4
   11364:	beq.n	113a8 <strncmp+0x8c>
   11366:	tst.w	r4, #2155905152	; 0x80808080
   1136a:	bne.n	113b4 <strncmp+0x98>
   1136c:	cmp	r2, #3
   1136e:	mov	r1, r5
   11370:	mov	r0, r7
   11372:	add.w	r5, r5, #4
   11376:	bhi.n	11350 <strncmp+0x34>
   11378:	ldrb	r3, [r0, #0]
   1137a:	ldrb	r4, [r1, #0]
   1137c:	cmp	r4, r3
   1137e:	add.w	r2, r2, #4294967295
   11382:	bne.n	1139e <strncmp+0x82>
   11384:	cbz	r2, 113a8 <strncmp+0x8c>
   11386:	cbnz	r4, 1138e <strncmp+0x72>
   11388:	b.n	113b8 <strncmp+0x9c>
   1138a:	cbz	r2, 113a8 <strncmp+0x8c>
   1138c:	cbz	r3, 113ae <strncmp+0x92>
   1138e:	ldrb.w	r3, [r0, #1]!
   11392:	ldrb.w	r4, [r1, #1]!
   11396:	cmp	r3, r4
   11398:	add.w	r2, r2, #4294967295
   1139c:	beq.n	1138a <strncmp+0x6e>
   1139e:	subs	r0, r3, r4
   113a0:	pop	{r4, r5, r6, r7}
   113a2:	bx	lr
   113a4:	mov	r0, r2
   113a6:	bx	lr
   113a8:	mov	r0, r2
   113aa:	pop	{r4, r5, r6, r7}
   113ac:	bx	lr
   113ae:	mov	r0, r3
   113b0:	pop	{r4, r5, r6, r7}
   113b2:	bx	lr
   113b4:	movs	r0, #0
   113b6:	b.n	113a0 <strncmp+0x84>
   113b8:	mov	r0, r4
   113ba:	b.n	113a0 <strncmp+0x84>
   113bc:	movs	r0, r0
	...

000113c0 <_svfprintf_r>:
   113c0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   113c4:	vpush	{d8-d10}
   113c8:	sub	sp, #228	; 0xe4
   113ca:	mov	r4, r1
   113cc:	str	r1, [sp, #12]
   113ce:	mov	sl, r2
   113d0:	str	r3, [sp, #36]	; 0x24
   113d2:	str	r0, [sp, #20]
   113d4:	bl	13b68 <_localeconv_r>
   113d8:	ldr	r3, [r0, #0]
   113da:	str	r3, [sp, #64]	; 0x40
   113dc:	mov	r0, r3
   113de:	bl	11240 <strlen>
   113e2:	ldrh	r3, [r4, #12]
   113e4:	str	r0, [sp, #60]	; 0x3c
   113e6:	lsls	r1, r3, #24
   113e8:	bpl.n	113f2 <_svfprintf_r+0x32>
   113ea:	ldr	r3, [r4, #16]
   113ec:	cmp	r3, #0
   113ee:	beq.w	124ec <_svfprintf_r+0x112c>
   113f2:	movs	r3, #0
   113f4:	vldr	d8, [pc, #656]	; 11688 <_svfprintf_r+0x2c8>
   113f8:	vldr	d9, [pc, #660]	; 11690 <_svfprintf_r+0x2d0>
   113fc:	str	r3, [sp, #52]	; 0x34
   113fe:	str	r3, [sp, #116]	; 0x74
   11400:	str	r3, [sp, #112]	; 0x70
   11402:	str	r3, [sp, #68]	; 0x44
   11404:	str	r3, [sp, #24]
   11406:	add	r3, sp, #160	; 0xa0
   11408:	str	r3, [sp, #108]	; 0x6c
   1140a:	mov	r9, r3
   1140c:	ldrb.w	r3, [sl]
   11410:	mov	r4, sl
   11412:	cbz	r3, 11450 <_svfprintf_r+0x90>
   11414:	cmp	r3, #37	; 0x25
   11416:	bne.n	1141e <_svfprintf_r+0x5e>
   11418:	b.n	11450 <_svfprintf_r+0x90>
   1141a:	cmp	r3, #37	; 0x25
   1141c:	beq.n	11426 <_svfprintf_r+0x66>
   1141e:	ldrb.w	r3, [r4, #1]!
   11422:	cmp	r3, #0
   11424:	bne.n	1141a <_svfprintf_r+0x5a>
   11426:	rsb	r5, sl, r4
   1142a:	cbz	r5, 11450 <_svfprintf_r+0x90>
   1142c:	ldr	r3, [sp, #112]	; 0x70
   1142e:	ldr	r2, [sp, #116]	; 0x74
   11430:	str.w	sl, [r9]
   11434:	adds	r3, #1
   11436:	add	r2, r5
   11438:	cmp	r3, #7
   1143a:	str.w	r5, [r9, #4]
   1143e:	str	r2, [sp, #116]	; 0x74
   11440:	str	r3, [sp, #112]	; 0x70
   11442:	bgt.w	1158c <_svfprintf_r+0x1cc>
   11446:	add.w	r9, r9, #8
   1144a:	ldr	r3, [sp, #24]
   1144c:	add	r3, r5
   1144e:	str	r3, [sp, #24]
   11450:	ldrb	r3, [r4, #0]
   11452:	cmp	r3, #0
   11454:	beq.w	1159e <_svfprintf_r+0x1de>
   11458:	movs	r3, #0
   1145a:	mov	r2, r3
   1145c:	strb.w	r3, [sp, #79]	; 0x4f
   11460:	mov	r1, r3
   11462:	str	r3, [sp, #28]
   11464:	mov	fp, r3
   11466:	mov.w	r8, #4294967295
   1146a:	ldrb	r3, [r4, #1]
   1146c:	add.w	sl, r4, #1
   11470:	mov	r5, r8
   11472:	add.w	sl, sl, #1
   11476:	sub.w	r0, r3, #32
   1147a:	cmp	r0, #88	; 0x58
   1147c:	bhi.w	11c70 <_svfprintf_r+0x8b0>
   11480:	tbh	[pc, r0, lsl #1]
   11484:	.word	0x03f60363
   11488:	.word	0x036b03f6
   1148c:	.word	0x03f603f6
   11490:	.word	0x03f603f6
   11494:	.word	0x03f603f6
   11498:	.word	0x037e0370
   1149c:	.word	0x005d03f6
   114a0:	.word	0x03f600df
   114a4:	.word	0x010c00fb
   114a8:	.word	0x010c010c
   114ac:	.word	0x010c010c
   114b0:	.word	0x010c010c
   114b4:	.word	0x010c010c
   114b8:	.word	0x03f603f6
   114bc:	.word	0x03f603f6
   114c0:	.word	0x03f603f6
   114c4:	.word	0x03f603f6
   114c8:	.word	0x03f603f6
   114cc:	.word	0x015e011c
   114d0:	.word	0x015e03f6
   114d4:	.word	0x03f603f6
   114d8:	.word	0x03f603f6
   114dc:	.word	0x03f602a1
   114e0:	.word	0x02a603f6
   114e4:	.word	0x03f603f6
   114e8:	.word	0x03f603f6
   114ec:	.word	0x02d803f6
   114f0:	.word	0x03f603f6
   114f4:	.word	0x03f60305
   114f8:	.word	0x03f603f6
   114fc:	.word	0x03f603f6
   11500:	.word	0x03f603f6
   11504:	.word	0x03f603f6
   11508:	.word	0x034303f6
   1150c:	.word	0x015e0356
   11510:	.word	0x015e015e
   11514:	.word	0x0356035e
   11518:	.word	0x03f603f6
   1151c:	.word	0x03f603a4
   11520:	.word	0x00a203b1
   11524:	.word	0x03c30062
   11528:	.word	0x03c803f6
   1152c:	.word	0x038303f6
   11530:	.word	0x03f603f6
   11534:	.short	0x038b
   11536:	ldr	r0, [sp, #28]
   11538:	str	r3, [sp, #36]	; 0x24
   1153a:	negs	r0, r0
   1153c:	str	r0, [sp, #28]
   1153e:	orr.w	fp, fp, #4
   11542:	ldrb.w	r3, [sl]
   11546:	b.n	11472 <_svfprintf_r+0xb2>
   11548:	mov	r8, r5
   1154a:	ldr	r0, [sp, #36]	; 0x24
   1154c:	movs	r1, #0
   1154e:	movs	r3, #48	; 0x30
   11550:	movs	r2, #120	; 0x78
   11552:	cmp	r8, r1
   11554:	strb.w	r3, [sp, #80]	; 0x50
   11558:	ldr	r4, [r0, #0]
   1155a:	strb.w	r2, [sp, #81]	; 0x51
   1155e:	add.w	r7, r0, #4
   11562:	mov.w	r5, #0
   11566:	strb.w	r1, [sp, #79]	; 0x4f
   1156a:	orr.w	r3, fp, #2
   1156e:	blt.w	11caa <_svfprintf_r+0x8ea>
   11572:	bic.w	r3, fp, #128	; 0x80
   11576:	orr.w	fp, r3, #2
   1157a:	orrs.w	r3, r4, r5
   1157e:	str	r7, [sp, #36]	; 0x24
   11580:	beq.w	11c56 <_svfprintf_r+0x896>
   11584:	mov	r7, r1
   11586:	str	r2, [sp, #48]	; 0x30
   11588:	ldr	r0, [pc, #268]	; (11698 <_svfprintf_r+0x2d8>)
   1158a:	b.n	11aea <_svfprintf_r+0x72a>
   1158c:	add	r2, sp, #108	; 0x6c
   1158e:	ldr	r1, [sp, #12]
   11590:	ldr	r0, [sp, #20]
   11592:	bl	141a8 <__ssprint_r>
   11596:	cbnz	r0, 115ac <_svfprintf_r+0x1ec>
   11598:	add.w	r9, sp, #160	; 0xa0
   1159c:	b.n	1144a <_svfprintf_r+0x8a>
   1159e:	ldr	r3, [sp, #116]	; 0x74
   115a0:	cbz	r3, 115ac <_svfprintf_r+0x1ec>
   115a2:	ldr	r0, [sp, #20]
   115a4:	ldr	r1, [sp, #12]
   115a6:	add	r2, sp, #108	; 0x6c
   115a8:	bl	141a8 <__ssprint_r>
   115ac:	ldr	r3, [sp, #12]
   115ae:	ldrh	r3, [r3, #12]
   115b0:	tst.w	r3, #64	; 0x40
   115b4:	ldr	r3, [sp, #24]
   115b6:	it	ne
   115b8:	movne.w	r3, #4294967295
   115bc:	mov	r0, r3
   115be:	add	sp, #228	; 0xe4
   115c0:	vpop	{d8-d10}
   115c4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   115c8:	str	r3, [sp, #48]	; 0x30
   115ca:	mov	r8, r5
   115cc:	cmp	r2, #0
   115ce:	bne.w	12906 <_svfprintf_r+0x1546>
   115d2:	ands.w	r3, fp, #32
   115d6:	beq.w	119e6 <_svfprintf_r+0x626>
   115da:	ldr	r7, [sp, #36]	; 0x24
   115dc:	adds	r7, #7
   115de:	bic.w	r3, r7, #7
   115e2:	movs	r7, #0
   115e4:	add.w	r2, r3, #8
   115e8:	cmp	r8, r7
   115ea:	str	r2, [sp, #36]	; 0x24
   115ec:	ldrd	r4, r5, [r3]
   115f0:	strb.w	r7, [sp, #79]	; 0x4f
   115f4:	blt.w	122b4 <_svfprintf_r+0xef4>
   115f8:	orrs.w	r3, r4, r5
   115fc:	bic.w	fp, fp, #128	; 0x80
   11600:	beq.w	11c9a <_svfprintf_r+0x8da>
   11604:	add	r6, sp, #160	; 0xa0
   11606:	lsrs	r2, r4, #3
   11608:	orr.w	r2, r2, r5, lsl #29
   1160c:	lsrs	r1, r5, #3
   1160e:	and.w	r3, r4, #7
   11612:	mov	r5, r1
   11614:	mov	r4, r2
   11616:	adds	r3, #48	; 0x30
   11618:	orrs.w	r2, r4, r5
   1161c:	strb.w	r3, [r6, #-1]!
   11620:	bne.n	11606 <_svfprintf_r+0x246>
   11622:	tst.w	fp, #1
   11626:	beq.w	11a78 <_svfprintf_r+0x6b8>
   1162a:	cmp	r3, #48	; 0x30
   1162c:	beq.w	11a78 <_svfprintf_r+0x6b8>
   11630:	movs	r2, #48	; 0x30
   11632:	subs	r3, r6, #1
   11634:	strb.w	r2, [r6, #-1]
   11638:	add	r2, sp, #160	; 0xa0
   1163a:	subs	r2, r2, r3
   1163c:	str	r2, [sp, #32]
   1163e:	mov	r6, r3
   11640:	b.n	11a7e <_svfprintf_r+0x6be>
   11642:	ldrb.w	r3, [sl]
   11646:	cmp	r3, #42	; 0x2a
   11648:	add.w	r4, sl, #1
   1164c:	beq.w	128ae <_svfprintf_r+0x14ee>
   11650:	sub.w	r0, r3, #48	; 0x30
   11654:	cmp	r0, #9
   11656:	it	ls
   11658:	movls	r5, #0
   1165a:	bhi.w	12808 <_svfprintf_r+0x1448>
   1165e:	ldrb.w	r3, [r4], #1
   11662:	add.w	r5, r5, r5, lsl #2
   11666:	add.w	r5, r0, r5, lsl #1
   1166a:	sub.w	r0, r3, #48	; 0x30
   1166e:	cmp	r0, #9
   11670:	bls.n	1165e <_svfprintf_r+0x29e>
   11672:	orr.w	r5, r5, r5, asr #31
   11676:	mov	sl, r4
   11678:	b.n	11476 <_svfprintf_r+0xb6>
   1167a:	orr.w	fp, fp, #128	; 0x80
   1167e:	ldrb.w	r3, [sl]
   11682:	b.n	11472 <_svfprintf_r+0xb2>
   11684:	nop.w
	...
   11690:	.word	0xffffffff
   11694:	.word	0x7fefffff
   11698:	.word	0x200008fc
   1169c:	sub.w	r0, r3, #48	; 0x30
   116a0:	movs	r3, #0
   116a2:	mov	r4, r3
   116a4:	ldrb.w	r3, [sl], #1
   116a8:	add.w	r4, r4, r4, lsl #2
   116ac:	add.w	r4, r0, r4, lsl #1
   116b0:	sub.w	r0, r3, #48	; 0x30
   116b4:	cmp	r0, #9
   116b6:	bls.n	116a4 <_svfprintf_r+0x2e4>
   116b8:	str	r4, [sp, #28]
   116ba:	b.n	11476 <_svfprintf_r+0xb6>
   116bc:	str	r3, [sp, #48]	; 0x30
   116be:	mov	r8, r5
   116c0:	cmp	r2, #0
   116c2:	bne.w	1291e <_svfprintf_r+0x155e>
   116c6:	orr.w	fp, fp, #16
   116ca:	tst.w	fp, #32
   116ce:	beq.w	120d8 <_svfprintf_r+0xd18>
   116d2:	ldr	r7, [sp, #36]	; 0x24
   116d4:	adds	r7, #7
   116d6:	bic.w	r7, r7, #7
   116da:	ldrd	r2, r3, [r7]
   116de:	add.w	r1, r7, #8
   116e2:	str	r1, [sp, #36]	; 0x24
   116e4:	mov	r4, r2
   116e6:	mov	r5, r3
   116e8:	cmp	r2, #0
   116ea:	sbcs.w	r3, r3, #0
   116ee:	blt.w	12160 <_svfprintf_r+0xda0>
   116f2:	cmp.w	r8, #0
   116f6:	ldrb.w	r7, [sp, #79]	; 0x4f
   116fa:	blt.w	11a68 <_svfprintf_r+0x6a8>
   116fe:	orrs.w	r3, r4, r5
   11702:	bic.w	fp, fp, #128	; 0x80
   11706:	beq.w	11ef6 <_svfprintf_r+0xb36>
   1170a:	cmp	r5, #0
   1170c:	it	eq
   1170e:	cmpeq	r4, #10
   11710:	bcc.w	11a70 <_svfprintf_r+0x6b0>
   11714:	add	r6, sp, #160	; 0xa0
   11716:	mov	r0, r4
   11718:	mov	r1, r5
   1171a:	movs	r2, #10
   1171c:	movs	r3, #0
   1171e:	bl	1007c <__aeabi_uldivmod>
   11722:	adds	r2, #48	; 0x30
   11724:	strb.w	r2, [r6, #-1]!
   11728:	mov	r0, r4
   1172a:	mov	r1, r5
   1172c:	movs	r3, #0
   1172e:	movs	r2, #10
   11730:	bl	1007c <__aeabi_uldivmod>
   11734:	mov	r4, r0
   11736:	mov	r5, r1
   11738:	orrs.w	r3, r4, r5
   1173c:	bne.n	11716 <_svfprintf_r+0x356>
   1173e:	b.n	11a78 <_svfprintf_r+0x6b8>
   11740:	str	r3, [sp, #48]	; 0x30
   11742:	mov	r8, r5
   11744:	cmp	r2, #0
   11746:	bne.w	12916 <_svfprintf_r+0x1556>
   1174a:	ldr	r7, [sp, #36]	; 0x24
   1174c:	tst.w	fp, #8
   11750:	add.w	r7, r7, #7
   11754:	beq.w	123d8 <_svfprintf_r+0x1018>
   11758:	bic.w	r3, r7, #7
   1175c:	vldr	d8, [r3]
   11760:	add.w	r2, r3, #8
   11764:	str	r2, [sp, #36]	; 0x24
   11766:	vabs.f64	d7, d8
   1176a:	vcmp.f64	d7, d9
   1176e:	vmrs	APSR_nzcv, fpscr
   11772:	ble.w	122ee <_svfprintf_r+0xf2e>
   11776:	vcmpe.f64	d8, #0.0
   1177a:	vmrs	APSR_nzcv, fpscr
   1177e:	bmi.w	12716 <_svfprintf_r+0x1356>
   11782:	ldrb.w	r7, [sp, #79]	; 0x4f
   11786:	ldr	r6, [pc, #668]	; (11a24 <_svfprintf_r+0x664>)
   11788:	ldr	r3, [pc, #668]	; (11a28 <_svfprintf_r+0x668>)
   1178a:	ldr	r1, [sp, #48]	; 0x30
   1178c:	movs	r2, #3
   1178e:	mov.w	r8, #0
   11792:	str	r2, [sp, #16]
   11794:	bic.w	fp, fp, #128	; 0x80
   11798:	cmp	r1, #71	; 0x47
   1179a:	it	le
   1179c:	movle	r6, r3
   1179e:	str	r2, [sp, #32]
   117a0:	str.w	r8, [sp, #56]	; 0x38
   117a4:	cbz	r7, 117ac <_svfprintf_r+0x3ec>
   117a6:	ldr	r3, [sp, #16]
   117a8:	adds	r3, #1
   117aa:	str	r3, [sp, #16]
   117ac:	ands.w	r3, fp, #2
   117b0:	str	r3, [sp, #40]	; 0x28
   117b2:	beq.n	117ba <_svfprintf_r+0x3fa>
   117b4:	ldr	r3, [sp, #16]
   117b6:	adds	r3, #2
   117b8:	str	r3, [sp, #16]
   117ba:	ands.w	r3, fp, #132	; 0x84
   117be:	str	r3, [sp, #44]	; 0x2c
   117c0:	bne.w	11cc4 <_svfprintf_r+0x904>
   117c4:	ldr	r3, [sp, #28]
   117c6:	ldr	r2, [sp, #16]
   117c8:	subs	r4, r3, r2
   117ca:	cmp	r4, #0
   117cc:	ble.w	11cc4 <_svfprintf_r+0x904>
   117d0:	cmp	r4, #16
   117d2:	ldr	r1, [sp, #116]	; 0x74
   117d4:	ldr	r2, [sp, #112]	; 0x70
   117d6:	ldr	r7, [pc, #596]	; (11a2c <_svfprintf_r+0x66c>)
   117d8:	ble.n	11822 <_svfprintf_r+0x462>
   117da:	mov	r0, r9
   117dc:	movs	r5, #16
   117de:	mov	r9, r8
   117e0:	mov	r8, r6
   117e2:	ldr	r6, [sp, #20]
   117e4:	b.n	117f0 <_svfprintf_r+0x430>
   117e6:	subs	r4, #16
   117e8:	cmp	r4, #16
   117ea:	add.w	r0, r0, #8
   117ee:	ble.n	1181c <_svfprintf_r+0x45c>
   117f0:	adds	r2, #1
   117f2:	adds	r1, #16
   117f4:	cmp	r2, #7
   117f6:	str	r1, [sp, #116]	; 0x74
   117f8:	str	r2, [sp, #112]	; 0x70
   117fa:	str	r7, [r0, #0]
   117fc:	str	r5, [r0, #4]
   117fe:	ble.n	117e6 <_svfprintf_r+0x426>
   11800:	add	r2, sp, #108	; 0x6c
   11802:	ldr	r1, [sp, #12]
   11804:	mov	r0, r6
   11806:	bl	141a8 <__ssprint_r>
   1180a:	cmp	r0, #0
   1180c:	bne.w	115ac <_svfprintf_r+0x1ec>
   11810:	subs	r4, #16
   11812:	cmp	r4, #16
   11814:	ldr	r1, [sp, #116]	; 0x74
   11816:	ldr	r2, [sp, #112]	; 0x70
   11818:	add	r0, sp, #160	; 0xa0
   1181a:	bgt.n	117f0 <_svfprintf_r+0x430>
   1181c:	mov	r6, r8
   1181e:	mov	r8, r9
   11820:	mov	r9, r0
   11822:	adds	r2, #1
   11824:	adds	r3, r4, r1
   11826:	cmp	r2, #7
   11828:	str	r3, [sp, #116]	; 0x74
   1182a:	str	r2, [sp, #112]	; 0x70
   1182c:	str.w	r7, [r9]
   11830:	str.w	r4, [r9, #4]
   11834:	bgt.w	11ffc <_svfprintf_r+0xc3c>
   11838:	ldrb.w	r7, [sp, #79]	; 0x4f
   1183c:	add.w	r9, r9, #8
   11840:	cbz	r7, 11860 <_svfprintf_r+0x4a0>
   11842:	ldr	r2, [sp, #112]	; 0x70
   11844:	adds	r2, #1
   11846:	adds	r3, #1
   11848:	add.w	r0, sp, #79	; 0x4f
   1184c:	movs	r1, #1
   1184e:	cmp	r2, #7
   11850:	str	r3, [sp, #116]	; 0x74
   11852:	str	r2, [sp, #112]	; 0x70
   11854:	stmia.w	r9, {r0, r1}
   11858:	bgt.w	11f1a <_svfprintf_r+0xb5a>
   1185c:	add.w	r9, r9, #8
   11860:	ldr	r2, [sp, #40]	; 0x28
   11862:	cbz	r2, 11880 <_svfprintf_r+0x4c0>
   11864:	ldr	r2, [sp, #112]	; 0x70
   11866:	adds	r2, #1
   11868:	adds	r3, #2
   1186a:	add	r0, sp, #80	; 0x50
   1186c:	movs	r1, #2
   1186e:	cmp	r2, #7
   11870:	str	r3, [sp, #116]	; 0x74
   11872:	str	r2, [sp, #112]	; 0x70
   11874:	stmia.w	r9, {r0, r1}
   11878:	bgt.w	11f32 <_svfprintf_r+0xb72>
   1187c:	add.w	r9, r9, #8
   11880:	ldr	r2, [sp, #44]	; 0x2c
   11882:	cmp	r2, #128	; 0x80
   11884:	beq.w	11d84 <_svfprintf_r+0x9c4>
   11888:	ldr	r2, [sp, #32]
   1188a:	rsb	r4, r2, r8
   1188e:	cmp	r4, #0
   11890:	ble.n	118fc <_svfprintf_r+0x53c>
   11892:	cmp	r4, #16
   11894:	ldr	r2, [sp, #112]	; 0x70
   11896:	ldr	r7, [pc, #408]	; (11a30 <_svfprintf_r+0x670>)
   11898:	ble.n	118e2 <_svfprintf_r+0x522>
   1189a:	mov	r1, r9
   1189c:	mov.w	r8, #16
   118a0:	mov	r9, r6
   118a2:	ldr	r5, [sp, #20]
   118a4:	ldr	r6, [sp, #12]
   118a6:	b.n	118b2 <_svfprintf_r+0x4f2>
   118a8:	subs	r4, #16
   118aa:	cmp	r4, #16
   118ac:	add.w	r1, r1, #8
   118b0:	ble.n	118de <_svfprintf_r+0x51e>
   118b2:	adds	r2, #1
   118b4:	adds	r3, #16
   118b6:	cmp	r2, #7
   118b8:	str	r3, [sp, #116]	; 0x74
   118ba:	str	r2, [sp, #112]	; 0x70
   118bc:	stmia.w	r1, {r7, r8}
   118c0:	ble.n	118a8 <_svfprintf_r+0x4e8>
   118c2:	add	r2, sp, #108	; 0x6c
   118c4:	mov	r1, r6
   118c6:	mov	r0, r5
   118c8:	bl	141a8 <__ssprint_r>
   118cc:	cmp	r0, #0
   118ce:	bne.w	115ac <_svfprintf_r+0x1ec>
   118d2:	subs	r4, #16
   118d4:	cmp	r4, #16
   118d6:	ldr	r3, [sp, #116]	; 0x74
   118d8:	ldr	r2, [sp, #112]	; 0x70
   118da:	add	r1, sp, #160	; 0xa0
   118dc:	bgt.n	118b2 <_svfprintf_r+0x4f2>
   118de:	mov	r6, r9
   118e0:	mov	r9, r1
   118e2:	adds	r2, #1
   118e4:	add	r3, r4
   118e6:	cmp	r2, #7
   118e8:	str	r3, [sp, #116]	; 0x74
   118ea:	str	r2, [sp, #112]	; 0x70
   118ec:	str.w	r7, [r9]
   118f0:	str.w	r4, [r9, #4]
   118f4:	bgt.w	11f02 <_svfprintf_r+0xb42>
   118f8:	add.w	r9, r9, #8
   118fc:	tst.w	fp, #256	; 0x100
   11900:	bne.w	11cc8 <_svfprintf_r+0x908>
   11904:	ldr	r2, [sp, #112]	; 0x70
   11906:	ldr	r0, [sp, #32]
   11908:	str.w	r6, [r9]
   1190c:	adds	r2, #1
   1190e:	add	r3, r0
   11910:	cmp	r2, #7
   11912:	str	r3, [sp, #116]	; 0x74
   11914:	str.w	r0, [r9, #4]
   11918:	str	r2, [sp, #112]	; 0x70
   1191a:	bgt.w	11ea2 <_svfprintf_r+0xae2>
   1191e:	add.w	r9, r9, #8
   11922:	tst.w	fp, #4
   11926:	beq.n	119a6 <_svfprintf_r+0x5e6>
   11928:	ldr	r2, [sp, #28]
   1192a:	ldr	r1, [sp, #16]
   1192c:	subs	r4, r2, r1
   1192e:	cmp	r4, #0
   11930:	ble.n	119a6 <_svfprintf_r+0x5e6>
   11932:	cmp	r4, #16
   11934:	ldr	r2, [sp, #112]	; 0x70
   11936:	ldr	r7, [pc, #244]	; (11a2c <_svfprintf_r+0x66c>)
   11938:	ble.n	11980 <_svfprintf_r+0x5c0>
   1193a:	movs	r5, #16
   1193c:	ldr	r6, [sp, #20]
   1193e:	ldr.w	r8, [sp, #12]
   11942:	b.n	1194e <_svfprintf_r+0x58e>
   11944:	subs	r4, #16
   11946:	cmp	r4, #16
   11948:	add.w	r9, r9, #8
   1194c:	ble.n	11980 <_svfprintf_r+0x5c0>
   1194e:	adds	r2, #1
   11950:	adds	r3, #16
   11952:	cmp	r2, #7
   11954:	str	r3, [sp, #116]	; 0x74
   11956:	str	r2, [sp, #112]	; 0x70
   11958:	str.w	r7, [r9]
   1195c:	str.w	r5, [r9, #4]
   11960:	ble.n	11944 <_svfprintf_r+0x584>
   11962:	add	r2, sp, #108	; 0x6c
   11964:	mov	r1, r8
   11966:	mov	r0, r6
   11968:	bl	141a8 <__ssprint_r>
   1196c:	cmp	r0, #0
   1196e:	bne.w	115ac <_svfprintf_r+0x1ec>
   11972:	subs	r4, #16
   11974:	cmp	r4, #16
   11976:	ldr	r3, [sp, #116]	; 0x74
   11978:	ldr	r2, [sp, #112]	; 0x70
   1197a:	add.w	r9, sp, #160	; 0xa0
   1197e:	bgt.n	1194e <_svfprintf_r+0x58e>
   11980:	adds	r2, #1
   11982:	add	r3, r4
   11984:	cmp	r2, #7
   11986:	str	r3, [sp, #116]	; 0x74
   11988:	str	r2, [sp, #112]	; 0x70
   1198a:	str.w	r7, [r9]
   1198e:	str.w	r4, [r9, #4]
   11992:	ble.n	119a6 <_svfprintf_r+0x5e6>
   11994:	add	r2, sp, #108	; 0x6c
   11996:	ldr	r1, [sp, #12]
   11998:	ldr	r0, [sp, #20]
   1199a:	bl	141a8 <__ssprint_r>
   1199e:	cmp	r0, #0
   119a0:	bne.w	115ac <_svfprintf_r+0x1ec>
   119a4:	ldr	r3, [sp, #116]	; 0x74
   119a6:	ldr	r2, [sp, #24]
   119a8:	ldr	r1, [sp, #28]
   119aa:	ldr	r0, [sp, #16]
   119ac:	cmp	r1, r0
   119ae:	ite	ge
   119b0:	addge	r2, r2, r1
   119b2:	addlt	r2, r2, r0
   119b4:	str	r2, [sp, #24]
   119b6:	cmp	r3, #0
   119b8:	bne.w	11eba <_svfprintf_r+0xafa>
   119bc:	movs	r3, #0
   119be:	str	r3, [sp, #112]	; 0x70
   119c0:	add.w	r9, sp, #160	; 0xa0
   119c4:	b.n	1140c <_svfprintf_r+0x4c>
   119c6:	orr.w	fp, fp, #8
   119ca:	ldrb.w	r3, [sl]
   119ce:	b.n	11472 <_svfprintf_r+0xb2>
   119d0:	str	r3, [sp, #48]	; 0x30
   119d2:	mov	r8, r5
   119d4:	cmp	r2, #0
   119d6:	bne.w	1290e <_svfprintf_r+0x154e>
   119da:	orr.w	fp, fp, #16
   119de:	ands.w	r3, fp, #32
   119e2:	bne.w	115da <_svfprintf_r+0x21a>
   119e6:	ands.w	r2, fp, #16
   119ea:	bne.w	12110 <_svfprintf_r+0xd50>
   119ee:	ands.w	r3, fp, #64	; 0x40
   119f2:	beq.w	12110 <_svfprintf_r+0xd50>
   119f6:	ldr	r1, [sp, #36]	; 0x24
   119f8:	strb.w	r2, [sp, #79]	; 0x4f
   119fc:	mov	r3, r1
   119fe:	cmp.w	r8, #0
   11a02:	add.w	r3, r3, #4
   11a06:	ldrh	r4, [r1, #0]
   11a08:	mov.w	r5, #0
   11a0c:	blt.w	12566 <_svfprintf_r+0x11a6>
   11a10:	orrs.w	r1, r4, r5
   11a14:	bic.w	fp, fp, #128	; 0x80
   11a18:	str	r3, [sp, #36]	; 0x24
   11a1a:	beq.w	11c9a <_svfprintf_r+0x8da>
   11a1e:	mov	r7, r2
   11a20:	b.n	11604 <_svfprintf_r+0x244>
   11a22:	nop
   11a24:	.word	0x200008dc
   11a28:	.word	0x200008d8
   11a2c:	.word	0x20000918
   11a30:	.word	0x200008c8
   11a34:	str	r3, [sp, #48]	; 0x30
   11a36:	mov	r8, r5
   11a38:	cmp	r2, #0
   11a3a:	bne.w	128f0 <_svfprintf_r+0x1530>
   11a3e:	orr.w	fp, fp, #16
   11a42:	ands.w	r3, fp, #32
   11a46:	beq.w	12018 <_svfprintf_r+0xc58>
   11a4a:	ldr	r7, [sp, #36]	; 0x24
   11a4c:	adds	r7, #7
   11a4e:	bic.w	r3, r7, #7
   11a52:	movs	r7, #0
   11a54:	add.w	r2, r3, #8
   11a58:	cmp	r8, r7
   11a5a:	str	r2, [sp, #36]	; 0x24
   11a5c:	ldrd	r4, r5, [r3]
   11a60:	strb.w	r7, [sp, #79]	; 0x4f
   11a64:	bge.w	116fe <_svfprintf_r+0x33e>
   11a68:	orrs.w	r3, r4, r5
   11a6c:	bne.w	1170a <_svfprintf_r+0x34a>
   11a70:	add	r6, sp, #224	; 0xe0
   11a72:	adds	r4, #48	; 0x30
   11a74:	strb.w	r4, [r6, #-65]!
   11a78:	add	r3, sp, #160	; 0xa0
   11a7a:	subs	r3, r3, r6
   11a7c:	str	r3, [sp, #32]
   11a7e:	ldr	r3, [sp, #32]
   11a80:	cmp	r3, r8
   11a82:	it	lt
   11a84:	movlt	r3, r8
   11a86:	str	r3, [sp, #16]
   11a88:	movs	r3, #0
   11a8a:	str	r3, [sp, #56]	; 0x38
   11a8c:	b.n	117a4 <_svfprintf_r+0x3e4>
   11a8e:	str	r3, [sp, #48]	; 0x30
   11a90:	mov	r8, r5
   11a92:	cmp	r2, #0
   11a94:	bne.w	128e8 <_svfprintf_r+0x1528>
   11a98:	tst.w	fp, #32
   11a9c:	ldr	r0, [pc, #776]	; (11da8 <_svfprintf_r+0x9e8>)
   11a9e:	beq.w	11bae <_svfprintf_r+0x7ee>
   11aa2:	ldr	r7, [sp, #36]	; 0x24
   11aa4:	adds	r7, #7
   11aa6:	bic.w	r3, r7, #7
   11aaa:	ldrd	r4, r5, [r3]
   11aae:	add.w	r2, r3, #8
   11ab2:	str	r2, [sp, #36]	; 0x24
   11ab4:	ands.w	r7, fp, #1
   11ab8:	beq.w	11f4a <_svfprintf_r+0xb8a>
   11abc:	orrs.w	r3, r4, r5
   11ac0:	beq.w	1240a <_svfprintf_r+0x104a>
   11ac4:	movs	r7, #0
   11ac6:	movs	r3, #48	; 0x30
   11ac8:	ldrb.w	r2, [sp, #48]	; 0x30
   11acc:	strb.w	r3, [sp, #80]	; 0x50
   11ad0:	cmp	r8, r7
   11ad2:	strb.w	r2, [sp, #81]	; 0x51
   11ad6:	strb.w	r7, [sp, #79]	; 0x4f
   11ada:	orr.w	r3, fp, #2
   11ade:	blt.w	12710 <_svfprintf_r+0x1350>
   11ae2:	bic.w	r3, fp, #128	; 0x80
   11ae6:	orr.w	fp, r3, #2
   11aea:	add	r6, sp, #160	; 0xa0
   11aec:	lsrs	r3, r4, #4
   11aee:	and.w	r1, r4, #15
   11af2:	orr.w	r3, r3, r5, lsl #28
   11af6:	lsrs	r2, r5, #4
   11af8:	mov	r4, r3
   11afa:	mov	r5, r2
   11afc:	ldrb	r3, [r0, r1]
   11afe:	strb.w	r3, [r6, #-1]!
   11b02:	orrs.w	r3, r4, r5
   11b06:	bne.n	11aec <_svfprintf_r+0x72c>
   11b08:	b.n	11a78 <_svfprintf_r+0x6b8>
   11b0a:	ldr	r1, [sp, #36]	; 0x24
   11b0c:	str	r3, [sp, #48]	; 0x30
   11b0e:	ldr	r2, [r1, #0]
   11b10:	strb.w	r2, [sp, #120]	; 0x78
   11b14:	movs	r3, #0
   11b16:	mov	r2, r1
   11b18:	mov	r7, r3
   11b1a:	strb.w	r3, [sp, #79]	; 0x4f
   11b1e:	adds	r2, #4
   11b20:	movs	r3, #1
   11b22:	str	r3, [sp, #16]
   11b24:	mov	r8, r7
   11b26:	str	r7, [sp, #56]	; 0x38
   11b28:	str	r2, [sp, #36]	; 0x24
   11b2a:	str	r3, [sp, #32]
   11b2c:	add	r6, sp, #120	; 0x78
   11b2e:	b.n	117ac <_svfprintf_r+0x3ec>
   11b30:	str	r3, [sp, #48]	; 0x30
   11b32:	mov	r8, r5
   11b34:	cmp	r2, #0
   11b36:	beq.w	116ca <_svfprintf_r+0x30a>
   11b3a:	strb.w	r1, [sp, #79]	; 0x4f
   11b3e:	b.n	116ca <_svfprintf_r+0x30a>
   11b40:	orr.w	fp, fp, #64	; 0x40
   11b44:	ldrb.w	r3, [sl]
   11b48:	b.n	11472 <_svfprintf_r+0xb2>
   11b4a:	ldrb.w	r3, [sl]
   11b4e:	cmp	r1, #0
   11b50:	bne.w	11472 <_svfprintf_r+0xb2>
   11b54:	movs	r2, #1
   11b56:	movs	r1, #32
   11b58:	b.n	11472 <_svfprintf_r+0xb2>
   11b5a:	orr.w	fp, fp, #1
   11b5e:	ldrb.w	r3, [sl]
   11b62:	b.n	11472 <_svfprintf_r+0xb2>
   11b64:	ldr	r4, [sp, #36]	; 0x24
   11b66:	ldr	r3, [r4, #0]
   11b68:	str	r3, [sp, #28]
   11b6a:	mov	r0, r3
   11b6c:	cmp	r0, #0
   11b6e:	mov	r3, r4
   11b70:	add.w	r3, r3, #4
   11b74:	blt.w	11536 <_svfprintf_r+0x176>
   11b78:	str	r3, [sp, #36]	; 0x24
   11b7a:	ldrb.w	r3, [sl]
   11b7e:	b.n	11472 <_svfprintf_r+0xb2>
   11b80:	ldrb.w	r3, [sl]
   11b84:	movs	r2, #1
   11b86:	movs	r1, #43	; 0x2b
   11b88:	b.n	11472 <_svfprintf_r+0xb2>
   11b8a:	str	r3, [sp, #48]	; 0x30
   11b8c:	mov	r8, r5
   11b8e:	cmp	r2, #0
   11b90:	beq.w	11a42 <_svfprintf_r+0x682>
   11b94:	strb.w	r1, [sp, #79]	; 0x4f
   11b98:	b.n	11a42 <_svfprintf_r+0x682>
   11b9a:	str	r3, [sp, #48]	; 0x30
   11b9c:	mov	r8, r5
   11b9e:	cmp	r2, #0
   11ba0:	bne.w	128f8 <_svfprintf_r+0x1538>
   11ba4:	tst.w	fp, #32
   11ba8:	ldr	r0, [pc, #512]	; (11dac <_svfprintf_r+0x9ec>)
   11baa:	bne.w	11aa2 <_svfprintf_r+0x6e2>
   11bae:	ldr	r2, [sp, #36]	; 0x24
   11bb0:	tst.w	fp, #16
   11bb4:	mov	r3, r2
   11bb6:	bne.w	1213c <_svfprintf_r+0xd7c>
   11bba:	tst.w	fp, #64	; 0x40
   11bbe:	beq.w	1213c <_svfprintf_r+0xd7c>
   11bc2:	adds	r3, #4
   11bc4:	ldrh	r4, [r2, #0]
   11bc6:	str	r3, [sp, #36]	; 0x24
   11bc8:	movs	r5, #0
   11bca:	b.n	11ab4 <_svfprintf_r+0x6f4>
   11bcc:	ldrb.w	r3, [sl]
   11bd0:	cmp	r3, #108	; 0x6c
   11bd2:	ittte	eq
   11bd4:	ldrbeq.w	r3, [sl, #1]
   11bd8:	orreq.w	fp, fp, #32
   11bdc:	addeq.w	sl, sl, #1
   11be0:	orrne.w	fp, fp, #16
   11be4:	b.n	11472 <_svfprintf_r+0xb2>
   11be6:	cmp	r2, #0
   11be8:	bne.w	128ca <_svfprintf_r+0x150a>
   11bec:	tst.w	fp, #32
   11bf0:	beq.w	122c0 <_svfprintf_r+0xf00>
   11bf4:	ldr	r2, [sp, #36]	; 0x24
   11bf6:	ldr	r1, [sp, #24]
   11bf8:	ldr	r3, [r2, #0]
   11bfa:	asrs	r5, r1, #31
   11bfc:	mov	r0, r1
   11bfe:	adds	r2, #4
   11c00:	mov	r1, r5
   11c02:	str	r2, [sp, #36]	; 0x24
   11c04:	strd	r0, r1, [r3]
   11c08:	b.n	1140c <_svfprintf_r+0x4c>
   11c0a:	orr.w	fp, fp, #32
   11c0e:	ldrb.w	r3, [sl]
   11c12:	b.n	11472 <_svfprintf_r+0xb2>
   11c14:	ldr	r2, [sp, #36]	; 0x24
   11c16:	str	r3, [sp, #48]	; 0x30
   11c18:	ldr	r6, [r2, #0]
   11c1a:	movs	r4, #0
   11c1c:	strb.w	r4, [sp, #79]	; 0x4f
   11c20:	adds	r7, r2, #4
   11c22:	cmp	r6, #0
   11c24:	beq.w	126f2 <_svfprintf_r+0x1332>
   11c28:	cmp	r5, #0
   11c2a:	blt.w	12572 <_svfprintf_r+0x11b2>
   11c2e:	mov	r2, r5
   11c30:	mov	r1, r4
   11c32:	mov	r0, r6
   11c34:	bl	10a30 <memchr>
   11c38:	cmp	r0, #0
   11c3a:	beq.w	127d6 <_svfprintf_r+0x1416>
   11c3e:	subs	r3, r0, r6
   11c40:	str	r3, [sp, #32]
   11c42:	mov	r8, r4
   11c44:	bic.w	r3, r3, r3, asr #31
   11c48:	str	r7, [sp, #36]	; 0x24
   11c4a:	str	r3, [sp, #16]
   11c4c:	str.w	r8, [sp, #56]	; 0x38
   11c50:	ldrb.w	r7, [sp, #79]	; 0x4f
   11c54:	b.n	117a4 <_svfprintf_r+0x3e4>
   11c56:	ldr	r0, [pc, #340]	; (11dac <_svfprintf_r+0x9ec>)
   11c58:	str	r2, [sp, #48]	; 0x30
   11c5a:	cmp.w	r8, #0
   11c5e:	bne.w	11f6a <_svfprintf_r+0xbaa>
   11c62:	mov	r7, r8
   11c64:	mov.w	r8, #0
   11c68:	str.w	r8, [sp, #32]
   11c6c:	add	r6, sp, #160	; 0xa0
   11c6e:	b.n	11a7e <_svfprintf_r+0x6be>
   11c70:	str	r3, [sp, #48]	; 0x30
   11c72:	cmp	r2, #0
   11c74:	bne.w	128d2 <_svfprintf_r+0x1512>
   11c78:	ldr	r2, [sp, #48]	; 0x30
   11c7a:	cmp	r2, #0
   11c7c:	beq.w	1159e <_svfprintf_r+0x1de>
   11c80:	movs	r3, #0
   11c82:	movs	r1, #1
   11c84:	mov	r7, r3
   11c86:	str	r1, [sp, #16]
   11c88:	strb.w	r2, [sp, #120]	; 0x78
   11c8c:	strb.w	r3, [sp, #79]	; 0x4f
   11c90:	mov	r8, r3
   11c92:	str	r3, [sp, #56]	; 0x38
   11c94:	str	r1, [sp, #32]
   11c96:	add	r6, sp, #120	; 0x78
   11c98:	b.n	117ac <_svfprintf_r+0x3ec>
   11c9a:	cmp.w	r8, #0
   11c9e:	beq.w	127b8 <_svfprintf_r+0x13f8>
   11ca2:	movs	r7, #0
   11ca4:	movs	r4, #0
   11ca6:	movs	r5, #0
   11ca8:	b.n	11604 <_svfprintf_r+0x244>
   11caa:	ldr	r0, [pc, #256]	; (11dac <_svfprintf_r+0x9ec>)
   11cac:	str	r2, [sp, #48]	; 0x30
   11cae:	mov	fp, r3
   11cb0:	orrs.w	r3, r4, r5
   11cb4:	str	r7, [sp, #36]	; 0x24
   11cb6:	mov.w	r7, #0
   11cba:	bne.w	11aea <_svfprintf_r+0x72a>
   11cbe:	movs	r4, #0
   11cc0:	movs	r5, #0
   11cc2:	b.n	11aea <_svfprintf_r+0x72a>
   11cc4:	ldr	r3, [sp, #116]	; 0x74
   11cc6:	b.n	11840 <_svfprintf_r+0x480>
   11cc8:	ldr	r2, [sp, #48]	; 0x30
   11cca:	cmp	r2, #101	; 0x65
   11ccc:	ble.w	11e12 <_svfprintf_r+0xa52>
   11cd0:	vcmp.f64	d8, #0.0
   11cd4:	vmrs	APSR_nzcv, fpscr
   11cd8:	bne.w	11f6e <_svfprintf_r+0xbae>
   11cdc:	ldr	r2, [sp, #112]	; 0x70
   11cde:	ldr	r1, [pc, #208]	; (11db0 <_svfprintf_r+0x9f0>)
   11ce0:	str.w	r1, [r9]
   11ce4:	adds	r2, #1
   11ce6:	adds	r3, #1
   11ce8:	movs	r1, #1
   11cea:	cmp	r2, #7
   11cec:	str	r3, [sp, #116]	; 0x74
   11cee:	str	r2, [sp, #112]	; 0x70
   11cf0:	str.w	r1, [r9, #4]
   11cf4:	bgt.w	1241c <_svfprintf_r+0x105c>
   11cf8:	add.w	r9, r9, #8
   11cfc:	ldr	r2, [sp, #84]	; 0x54
   11cfe:	ldr	r1, [sp, #52]	; 0x34
   11d00:	cmp	r2, r1
   11d02:	blt.n	11d0c <_svfprintf_r+0x94c>
   11d04:	tst.w	fp, #1
   11d08:	beq.w	11922 <_svfprintf_r+0x562>
   11d0c:	ldr	r2, [sp, #112]	; 0x70
   11d0e:	ldr	r0, [sp, #60]	; 0x3c
   11d10:	ldr	r1, [sp, #64]	; 0x40
   11d12:	str.w	r1, [r9]
   11d16:	adds	r2, #1
   11d18:	add	r3, r0
   11d1a:	cmp	r2, #7
   11d1c:	str	r3, [sp, #116]	; 0x74
   11d1e:	str.w	r0, [r9, #4]
   11d22:	str	r2, [sp, #112]	; 0x70
   11d24:	bgt.w	124d4 <_svfprintf_r+0x1114>
   11d28:	add.w	r9, r9, #8
   11d2c:	ldr	r2, [sp, #52]	; 0x34
   11d2e:	subs	r4, r2, #1
   11d30:	cmp	r4, #0
   11d32:	ble.w	11922 <_svfprintf_r+0x562>
   11d36:	cmp	r4, #16
   11d38:	ldr	r2, [sp, #112]	; 0x70
   11d3a:	ldr	r7, [pc, #120]	; (11db4 <_svfprintf_r+0x9f4>)
   11d3c:	ble.w	120f8 <_svfprintf_r+0xd38>
   11d40:	movs	r5, #16
   11d42:	ldr	r6, [sp, #20]
   11d44:	ldr.w	r8, [sp, #12]
   11d48:	b.n	11d56 <_svfprintf_r+0x996>
   11d4a:	add.w	r9, r9, #8
   11d4e:	subs	r4, #16
   11d50:	cmp	r4, #16
   11d52:	ble.w	120f8 <_svfprintf_r+0xd38>
   11d56:	adds	r2, #1
   11d58:	adds	r3, #16
   11d5a:	cmp	r2, #7
   11d5c:	str	r3, [sp, #116]	; 0x74
   11d5e:	str	r2, [sp, #112]	; 0x70
   11d60:	str.w	r7, [r9]
   11d64:	str.w	r5, [r9, #4]
   11d68:	ble.n	11d4a <_svfprintf_r+0x98a>
   11d6a:	add	r2, sp, #108	; 0x6c
   11d6c:	mov	r1, r8
   11d6e:	mov	r0, r6
   11d70:	bl	141a8 <__ssprint_r>
   11d74:	cmp	r0, #0
   11d76:	bne.w	115ac <_svfprintf_r+0x1ec>
   11d7a:	ldr	r3, [sp, #116]	; 0x74
   11d7c:	ldr	r2, [sp, #112]	; 0x70
   11d7e:	add.w	r9, sp, #160	; 0xa0
   11d82:	b.n	11d4e <_svfprintf_r+0x98e>
   11d84:	ldr	r2, [sp, #28]
   11d86:	ldr	r1, [sp, #16]
   11d88:	subs	r4, r2, r1
   11d8a:	cmp	r4, #0
   11d8c:	ble.w	11888 <_svfprintf_r+0x4c8>
   11d90:	cmp	r4, #16
   11d92:	ldr	r2, [sp, #112]	; 0x70
   11d94:	ldr	r7, [pc, #28]	; (11db4 <_svfprintf_r+0x9f4>)
   11d96:	ble.n	11df6 <_svfprintf_r+0xa36>
   11d98:	mov	r1, r9
   11d9a:	movs	r5, #16
   11d9c:	mov	r9, r8
   11d9e:	mov	r0, r3
   11da0:	mov	r8, r6
   11da2:	ldr	r6, [sp, #20]
   11da4:	b.n	11dc2 <_svfprintf_r+0xa02>
   11da6:	nop
   11da8:	.word	0x200008e8
   11dac:	.word	0x200008fc
   11db0:	.word	0x20000588
   11db4:	.word	0x200008c8
   11db8:	subs	r4, #16
   11dba:	cmp	r4, #16
   11dbc:	add.w	r1, r1, #8
   11dc0:	ble.n	11dee <_svfprintf_r+0xa2e>
   11dc2:	adds	r2, #1
   11dc4:	adds	r0, #16
   11dc6:	cmp	r2, #7
   11dc8:	str	r0, [sp, #116]	; 0x74
   11dca:	str	r2, [sp, #112]	; 0x70
   11dcc:	str	r7, [r1, #0]
   11dce:	str	r5, [r1, #4]
   11dd0:	ble.n	11db8 <_svfprintf_r+0x9f8>
   11dd2:	add	r2, sp, #108	; 0x6c
   11dd4:	ldr	r1, [sp, #12]
   11dd6:	mov	r0, r6
   11dd8:	bl	141a8 <__ssprint_r>
   11ddc:	cmp	r0, #0
   11dde:	bne.w	115ac <_svfprintf_r+0x1ec>
   11de2:	subs	r4, #16
   11de4:	cmp	r4, #16
   11de6:	ldr	r0, [sp, #116]	; 0x74
   11de8:	ldr	r2, [sp, #112]	; 0x70
   11dea:	add	r1, sp, #160	; 0xa0
   11dec:	bgt.n	11dc2 <_svfprintf_r+0xa02>
   11dee:	mov	r6, r8
   11df0:	mov	r3, r0
   11df2:	mov	r8, r9
   11df4:	mov	r9, r1
   11df6:	adds	r2, #1
   11df8:	add	r3, r4
   11dfa:	cmp	r2, #7
   11dfc:	str	r3, [sp, #116]	; 0x74
   11dfe:	str	r2, [sp, #112]	; 0x70
   11e00:	str.w	r7, [r9]
   11e04:	str.w	r4, [r9, #4]
   11e08:	bgt.w	12298 <_svfprintf_r+0xed8>
   11e0c:	add.w	r9, r9, #8
   11e10:	b.n	11888 <_svfprintf_r+0x4c8>
   11e12:	ldr	r2, [sp, #52]	; 0x34
   11e14:	str.w	r6, [r9]
   11e18:	cmp	r2, #1
   11e1a:	ldr	r2, [sp, #112]	; 0x70
   11e1c:	add.w	r3, r3, #1
   11e20:	add.w	r2, r2, #1
   11e24:	mov.w	r1, #1
   11e28:	str	r3, [sp, #116]	; 0x74
   11e2a:	str	r2, [sp, #112]	; 0x70
   11e2c:	str.w	r1, [r9, #4]
   11e30:	ble.w	12254 <_svfprintf_r+0xe94>
   11e34:	cmp	r2, #7
   11e36:	bgt.w	12264 <_svfprintf_r+0xea4>
   11e3a:	add.w	r9, r9, #8
   11e3e:	ldr	r0, [sp, #60]	; 0x3c
   11e40:	ldr	r1, [sp, #64]	; 0x40
   11e42:	str.w	r1, [r9]
   11e46:	adds	r2, #1
   11e48:	add	r3, r0
   11e4a:	cmp	r2, #7
   11e4c:	str	r3, [sp, #116]	; 0x74
   11e4e:	str	r2, [sp, #112]	; 0x70
   11e50:	str.w	r0, [r9, #4]
   11e54:	bgt.w	1227e <_svfprintf_r+0xebe>
   11e58:	add.w	r9, r9, #8
   11e5c:	vcmp.f64	d8, #0.0
   11e60:	vmrs	APSR_nzcv, fpscr
   11e64:	ldr	r1, [sp, #52]	; 0x34
   11e66:	beq.w	12054 <_svfprintf_r+0xc94>
   11e6a:	subs	r1, #1
   11e6c:	adds	r2, #1
   11e6e:	adds	r6, #1
   11e70:	add	r3, r1
   11e72:	cmp	r2, #7
   11e74:	str.w	r6, [r9]
   11e78:	str	r2, [sp, #112]	; 0x70
   11e7a:	str	r3, [sp, #116]	; 0x74
   11e7c:	str.w	r1, [r9, #4]
   11e80:	bgt.w	120be <_svfprintf_r+0xcfe>
   11e84:	add.w	r9, r9, #8
   11e88:	ldr	r0, [sp, #68]	; 0x44
   11e8a:	str.w	r0, [r9, #4]
   11e8e:	adds	r2, #1
   11e90:	add	r3, r0
   11e92:	add	r1, sp, #92	; 0x5c
   11e94:	cmp	r2, #7
   11e96:	str	r3, [sp, #116]	; 0x74
   11e98:	str	r2, [sp, #112]	; 0x70
   11e9a:	str.w	r1, [r9]
   11e9e:	ble.w	1191e <_svfprintf_r+0x55e>
   11ea2:	add	r2, sp, #108	; 0x6c
   11ea4:	ldr	r1, [sp, #12]
   11ea6:	ldr	r0, [sp, #20]
   11ea8:	bl	141a8 <__ssprint_r>
   11eac:	cmp	r0, #0
   11eae:	bne.w	115ac <_svfprintf_r+0x1ec>
   11eb2:	ldr	r3, [sp, #116]	; 0x74
   11eb4:	add.w	r9, sp, #160	; 0xa0
   11eb8:	b.n	11922 <_svfprintf_r+0x562>
   11eba:	add	r2, sp, #108	; 0x6c
   11ebc:	ldr	r1, [sp, #12]
   11ebe:	ldr	r0, [sp, #20]
   11ec0:	bl	141a8 <__ssprint_r>
   11ec4:	cmp	r0, #0
   11ec6:	beq.w	119bc <_svfprintf_r+0x5fc>
   11eca:	b.w	115ac <_svfprintf_r+0x1ec>
   11ece:	ldr	r1, [sp, #36]	; 0x24
   11ed0:	cmp.w	r8, #0
   11ed4:	ldr	r4, [r1, #0]
   11ed6:	strb.w	r3, [sp, #79]	; 0x4f
   11eda:	add.w	r7, r1, #4
   11ede:	mov.w	r5, #0
   11ee2:	blt.w	125c8 <_svfprintf_r+0x1208>
   11ee6:	orrs.w	r2, r4, r5
   11eea:	str	r7, [sp, #36]	; 0x24
   11eec:	bic.w	fp, fp, #128	; 0x80
   11ef0:	mov	r7, r3
   11ef2:	bne.w	1170a <_svfprintf_r+0x34a>
   11ef6:	cmp.w	r8, #0
   11efa:	beq.w	11c64 <_svfprintf_r+0x8a4>
   11efe:	movs	r4, #0
   11f00:	b.n	11a70 <_svfprintf_r+0x6b0>
   11f02:	add	r2, sp, #108	; 0x6c
   11f04:	ldr	r1, [sp, #12]
   11f06:	ldr	r0, [sp, #20]
   11f08:	bl	141a8 <__ssprint_r>
   11f0c:	cmp	r0, #0
   11f0e:	bne.w	115ac <_svfprintf_r+0x1ec>
   11f12:	ldr	r3, [sp, #116]	; 0x74
   11f14:	add.w	r9, sp, #160	; 0xa0
   11f18:	b.n	118fc <_svfprintf_r+0x53c>
   11f1a:	add	r2, sp, #108	; 0x6c
   11f1c:	ldr	r1, [sp, #12]
   11f1e:	ldr	r0, [sp, #20]
   11f20:	bl	141a8 <__ssprint_r>
   11f24:	cmp	r0, #0
   11f26:	bne.w	115ac <_svfprintf_r+0x1ec>
   11f2a:	ldr	r3, [sp, #116]	; 0x74
   11f2c:	add.w	r9, sp, #160	; 0xa0
   11f30:	b.n	11860 <_svfprintf_r+0x4a0>
   11f32:	add	r2, sp, #108	; 0x6c
   11f34:	ldr	r1, [sp, #12]
   11f36:	ldr	r0, [sp, #20]
   11f38:	bl	141a8 <__ssprint_r>
   11f3c:	cmp	r0, #0
   11f3e:	bne.w	115ac <_svfprintf_r+0x1ec>
   11f42:	ldr	r3, [sp, #116]	; 0x74
   11f44:	add.w	r9, sp, #160	; 0xa0
   11f48:	b.n	11880 <_svfprintf_r+0x4c0>
   11f4a:	cmp.w	r8, #0
   11f4e:	strb.w	r7, [sp, #79]	; 0x4f
   11f52:	blt.w	12434 <_svfprintf_r+0x1074>
   11f56:	orrs.w	r3, r4, r5
   11f5a:	bic.w	fp, fp, #128	; 0x80
   11f5e:	bne.w	11aea <_svfprintf_r+0x72a>
   11f62:	cmp.w	r8, #0
   11f66:	beq.w	11c62 <_svfprintf_r+0x8a2>
   11f6a:	movs	r7, #0
   11f6c:	b.n	11cbe <_svfprintf_r+0x8fe>
   11f6e:	ldr	r4, [sp, #84]	; 0x54
   11f70:	cmp	r4, #0
   11f72:	ble.w	12438 <_svfprintf_r+0x1078>
   11f76:	ldr	r2, [sp, #56]	; 0x38
   11f78:	ldr	r1, [sp, #52]	; 0x34
   11f7a:	cmp	r2, r1
   11f7c:	it	ge
   11f7e:	movge	r2, r1
   11f80:	cmp	r2, #0
   11f82:	mov	r4, r2
   11f84:	ble.n	11fa2 <_svfprintf_r+0xbe2>
   11f86:	ldr	r2, [sp, #112]	; 0x70
   11f88:	str.w	r6, [r9]
   11f8c:	adds	r2, #1
   11f8e:	add	r3, r4
   11f90:	cmp	r2, #7
   11f92:	str	r3, [sp, #116]	; 0x74
   11f94:	str.w	r4, [r9, #4]
   11f98:	str	r2, [sp, #112]	; 0x70
   11f9a:	bgt.w	12682 <_svfprintf_r+0x12c2>
   11f9e:	add.w	r9, r9, #8
   11fa2:	ldr	r2, [sp, #56]	; 0x38
   11fa4:	cmp	r4, #0
   11fa6:	it	ge
   11fa8:	subge	r2, r2, r4
   11faa:	cmp	r2, #0
   11fac:	mov	r4, r2
   11fae:	ble.w	12194 <_svfprintf_r+0xdd4>
   11fb2:	cmp	r4, #16
   11fb4:	ldr	r2, [sp, #112]	; 0x70
   11fb6:	ldr	r7, [pc, #772]	; (122bc <_svfprintf_r+0xefc>)
   11fb8:	ble.w	123ee <_svfprintf_r+0x102e>
   11fbc:	mov	r1, r9
   11fbe:	movs	r5, #16
   11fc0:	mov	r9, r6
   11fc2:	ldr.w	r8, [sp, #20]
   11fc6:	ldr	r6, [sp, #12]
   11fc8:	b.n	11fd4 <_svfprintf_r+0xc14>
   11fca:	adds	r1, #8
   11fcc:	subs	r4, #16
   11fce:	cmp	r4, #16
   11fd0:	ble.w	123ea <_svfprintf_r+0x102a>
   11fd4:	adds	r2, #1
   11fd6:	adds	r3, #16
   11fd8:	cmp	r2, #7
   11fda:	str	r3, [sp, #116]	; 0x74
   11fdc:	str	r2, [sp, #112]	; 0x70
   11fde:	str	r7, [r1, #0]
   11fe0:	str	r5, [r1, #4]
   11fe2:	ble.n	11fca <_svfprintf_r+0xc0a>
   11fe4:	add	r2, sp, #108	; 0x6c
   11fe6:	mov	r1, r6
   11fe8:	mov	r0, r8
   11fea:	bl	141a8 <__ssprint_r>
   11fee:	cmp	r0, #0
   11ff0:	bne.w	115ac <_svfprintf_r+0x1ec>
   11ff4:	ldr	r3, [sp, #116]	; 0x74
   11ff6:	ldr	r2, [sp, #112]	; 0x70
   11ff8:	add	r1, sp, #160	; 0xa0
   11ffa:	b.n	11fcc <_svfprintf_r+0xc0c>
   11ffc:	add	r2, sp, #108	; 0x6c
   11ffe:	ldr	r1, [sp, #12]
   12000:	ldr	r0, [sp, #20]
   12002:	bl	141a8 <__ssprint_r>
   12006:	cmp	r0, #0
   12008:	bne.w	115ac <_svfprintf_r+0x1ec>
   1200c:	ldrb.w	r7, [sp, #79]	; 0x4f
   12010:	ldr	r3, [sp, #116]	; 0x74
   12012:	add.w	r9, sp, #160	; 0xa0
   12016:	b.n	11840 <_svfprintf_r+0x480>
   12018:	ands.w	r2, fp, #16
   1201c:	bne.w	11ece <_svfprintf_r+0xb0e>
   12020:	ands.w	r3, fp, #64	; 0x40
   12024:	beq.w	11ece <_svfprintf_r+0xb0e>
   12028:	ldr	r1, [sp, #36]	; 0x24
   1202a:	strb.w	r2, [sp, #79]	; 0x4f
   1202e:	mov	r3, r1
   12030:	cmp.w	r8, #0
   12034:	add.w	r3, r3, #4
   12038:	ldrh	r4, [r1, #0]
   1203a:	mov.w	r5, #0
   1203e:	blt.w	1256a <_svfprintf_r+0x11aa>
   12042:	orrs.w	r1, r4, r5
   12046:	bic.w	fp, fp, #128	; 0x80
   1204a:	str	r3, [sp, #36]	; 0x24
   1204c:	mov	r7, r2
   1204e:	bne.w	1170a <_svfprintf_r+0x34a>
   12052:	b.n	11ef6 <_svfprintf_r+0xb36>
   12054:	subs	r4, r1, #1
   12056:	cmp	r4, #0
   12058:	ble.w	11e88 <_svfprintf_r+0xac8>
   1205c:	cmp	r4, #16
   1205e:	ldr	r7, [pc, #604]	; (122bc <_svfprintf_r+0xefc>)
   12060:	ble.n	120a8 <_svfprintf_r+0xce8>
   12062:	movs	r5, #16
   12064:	ldr	r6, [sp, #20]
   12066:	ldr.w	r8, [sp, #12]
   1206a:	b.n	12076 <_svfprintf_r+0xcb6>
   1206c:	subs	r4, #16
   1206e:	cmp	r4, #16
   12070:	add.w	r9, r9, #8
   12074:	ble.n	120a8 <_svfprintf_r+0xce8>
   12076:	adds	r2, #1
   12078:	adds	r3, #16
   1207a:	cmp	r2, #7
   1207c:	str	r3, [sp, #116]	; 0x74
   1207e:	str	r2, [sp, #112]	; 0x70
   12080:	str.w	r7, [r9]
   12084:	str.w	r5, [r9, #4]
   12088:	ble.n	1206c <_svfprintf_r+0xcac>
   1208a:	add	r2, sp, #108	; 0x6c
   1208c:	mov	r1, r8
   1208e:	mov	r0, r6
   12090:	bl	141a8 <__ssprint_r>
   12094:	cmp	r0, #0
   12096:	bne.w	115ac <_svfprintf_r+0x1ec>
   1209a:	subs	r4, #16
   1209c:	cmp	r4, #16
   1209e:	ldr	r3, [sp, #116]	; 0x74
   120a0:	ldr	r2, [sp, #112]	; 0x70
   120a2:	add.w	r9, sp, #160	; 0xa0
   120a6:	bgt.n	12076 <_svfprintf_r+0xcb6>
   120a8:	adds	r2, #1
   120aa:	add	r3, r4
   120ac:	cmp	r2, #7
   120ae:	str	r3, [sp, #116]	; 0x74
   120b0:	str	r2, [sp, #112]	; 0x70
   120b2:	str.w	r7, [r9]
   120b6:	str.w	r4, [r9, #4]
   120ba:	ble.w	11e84 <_svfprintf_r+0xac4>
   120be:	add	r2, sp, #108	; 0x6c
   120c0:	ldr	r1, [sp, #12]
   120c2:	ldr	r0, [sp, #20]
   120c4:	bl	141a8 <__ssprint_r>
   120c8:	cmp	r0, #0
   120ca:	bne.w	115ac <_svfprintf_r+0x1ec>
   120ce:	ldr	r3, [sp, #116]	; 0x74
   120d0:	ldr	r2, [sp, #112]	; 0x70
   120d2:	add.w	r9, sp, #160	; 0xa0
   120d6:	b.n	11e88 <_svfprintf_r+0xac8>
   120d8:	tst.w	fp, #16
   120dc:	bne.n	12146 <_svfprintf_r+0xd86>
   120de:	tst.w	fp, #64	; 0x40
   120e2:	beq.n	12146 <_svfprintf_r+0xd86>
   120e4:	ldr	r1, [sp, #36]	; 0x24
   120e6:	ldrsh.w	r4, [r1]
   120ea:	adds	r1, #4
   120ec:	asrs	r5, r4, #31
   120ee:	mov	r2, r4
   120f0:	mov	r3, r5
   120f2:	str	r1, [sp, #36]	; 0x24
   120f4:	b.w	116e8 <_svfprintf_r+0x328>
   120f8:	adds	r2, #1
   120fa:	add	r3, r4
   120fc:	cmp	r2, #7
   120fe:	str	r3, [sp, #116]	; 0x74
   12100:	str	r2, [sp, #112]	; 0x70
   12102:	str.w	r7, [r9]
   12106:	str.w	r4, [r9, #4]
   1210a:	ble.w	1191e <_svfprintf_r+0x55e>
   1210e:	b.n	11ea2 <_svfprintf_r+0xae2>
   12110:	ldr	r1, [sp, #36]	; 0x24
   12112:	cmp.w	r8, #0
   12116:	ldr	r4, [r1, #0]
   12118:	strb.w	r3, [sp, #79]	; 0x4f
   1211c:	add.w	r7, r1, #4
   12120:	mov.w	r5, #0
   12124:	blt.w	122b2 <_svfprintf_r+0xef2>
   12128:	orrs.w	r2, r4, r5
   1212c:	bic.w	fp, fp, #128	; 0x80
   12130:	str	r7, [sp, #36]	; 0x24
   12132:	beq.w	11c9a <_svfprintf_r+0x8da>
   12136:	mov	r7, r3
   12138:	b.w	11604 <_svfprintf_r+0x244>
   1213c:	ldr	r4, [r3, #0]
   1213e:	adds	r3, #4
   12140:	str	r3, [sp, #36]	; 0x24
   12142:	movs	r5, #0
   12144:	b.n	11ab4 <_svfprintf_r+0x6f4>
   12146:	ldr	r2, [sp, #36]	; 0x24
   12148:	ldr	r4, [r2, #0]
   1214a:	mov	r3, r2
   1214c:	adds	r3, #4
   1214e:	asrs	r5, r4, #31
   12150:	mov	r2, r4
   12152:	str	r3, [sp, #36]	; 0x24
   12154:	cmp	r2, #0
   12156:	mov	r3, r5
   12158:	sbcs.w	r3, r3, #0
   1215c:	bge.w	116f2 <_svfprintf_r+0x332>
   12160:	negs	r4, r4
   12162:	mov.w	r7, #45	; 0x2d
   12166:	sbc.w	r5, r5, r5, lsl #1
   1216a:	cmp.w	r8, #0
   1216e:	strb.w	r7, [sp, #79]	; 0x4f
   12172:	blt.w	1170a <_svfprintf_r+0x34a>
   12176:	bic.w	fp, fp, #128	; 0x80
   1217a:	b.w	1170a <_svfprintf_r+0x34a>
   1217e:	add	r2, sp, #108	; 0x6c
   12180:	ldr	r1, [sp, #12]
   12182:	ldr	r0, [sp, #20]
   12184:	bl	141a8 <__ssprint_r>
   12188:	cmp	r0, #0
   1218a:	bne.w	115ac <_svfprintf_r+0x1ec>
   1218e:	ldr	r3, [sp, #116]	; 0x74
   12190:	add.w	r9, sp, #160	; 0xa0
   12194:	ldr	r1, [sp, #56]	; 0x38
   12196:	ldr	r2, [sp, #84]	; 0x54
   12198:	add	r1, r6
   1219a:	mov	r5, r1
   1219c:	ldr	r1, [sp, #52]	; 0x34
   1219e:	cmp	r2, r1
   121a0:	blt.n	12232 <_svfprintf_r+0xe72>
   121a2:	tst.w	fp, #1
   121a6:	bne.n	12232 <_svfprintf_r+0xe72>
   121a8:	ldr	r0, [sp, #52]	; 0x34
   121aa:	add	r6, r0
   121ac:	subs	r4, r6, r5
   121ae:	subs	r2, r0, r2
   121b0:	cmp	r4, r2
   121b2:	it	ge
   121b4:	movge	r4, r2
   121b6:	cmp	r4, #0
   121b8:	mov	r6, r4
   121ba:	ble.n	121d8 <_svfprintf_r+0xe18>
   121bc:	ldr	r1, [sp, #112]	; 0x70
   121be:	str.w	r5, [r9]
   121c2:	adds	r1, #1
   121c4:	add	r3, r4
   121c6:	cmp	r1, #7
   121c8:	str	r3, [sp, #116]	; 0x74
   121ca:	str.w	r4, [r9, #4]
   121ce:	str	r1, [sp, #112]	; 0x70
   121d0:	bgt.w	126d4 <_svfprintf_r+0x1314>
   121d4:	add.w	r9, r9, #8
   121d8:	cmp	r6, #0
   121da:	ite	ge
   121dc:	subge	r4, r2, r6
   121de:	movlt	r4, r2
   121e0:	cmp	r4, #0
   121e2:	ble.w	11922 <_svfprintf_r+0x562>
   121e6:	cmp	r4, #16
   121e8:	ldr	r2, [sp, #112]	; 0x70
   121ea:	ldr	r7, [pc, #208]	; (122bc <_svfprintf_r+0xefc>)
   121ec:	ble.n	120f8 <_svfprintf_r+0xd38>
   121ee:	movs	r5, #16
   121f0:	ldr	r6, [sp, #20]
   121f2:	ldr.w	r8, [sp, #12]
   121f6:	b.n	12204 <_svfprintf_r+0xe44>
   121f8:	add.w	r9, r9, #8
   121fc:	subs	r4, #16
   121fe:	cmp	r4, #16
   12200:	ble.w	120f8 <_svfprintf_r+0xd38>
   12204:	adds	r2, #1
   12206:	adds	r3, #16
   12208:	cmp	r2, #7
   1220a:	str	r3, [sp, #116]	; 0x74
   1220c:	str	r2, [sp, #112]	; 0x70
   1220e:	str.w	r7, [r9]
   12212:	str.w	r5, [r9, #4]
   12216:	ble.n	121f8 <_svfprintf_r+0xe38>
   12218:	add	r2, sp, #108	; 0x6c
   1221a:	mov	r1, r8
   1221c:	mov	r0, r6
   1221e:	bl	141a8 <__ssprint_r>
   12222:	cmp	r0, #0
   12224:	bne.w	115ac <_svfprintf_r+0x1ec>
   12228:	ldr	r3, [sp, #116]	; 0x74
   1222a:	ldr	r2, [sp, #112]	; 0x70
   1222c:	add.w	r9, sp, #160	; 0xa0
   12230:	b.n	121fc <_svfprintf_r+0xe3c>
   12232:	ldr	r1, [sp, #112]	; 0x70
   12234:	ldr	r4, [sp, #60]	; 0x3c
   12236:	ldr	r0, [sp, #64]	; 0x40
   12238:	str.w	r0, [r9]
   1223c:	adds	r1, #1
   1223e:	add	r3, r4
   12240:	cmp	r1, #7
   12242:	str	r3, [sp, #116]	; 0x74
   12244:	str.w	r4, [r9, #4]
   12248:	str	r1, [sp, #112]	; 0x70
   1224a:	bgt.w	1269a <_svfprintf_r+0x12da>
   1224e:	add.w	r9, r9, #8
   12252:	b.n	121a8 <_svfprintf_r+0xde8>
   12254:	tst.w	fp, #1
   12258:	bne.w	11e34 <_svfprintf_r+0xa74>
   1225c:	cmp	r2, #7
   1225e:	ble.w	11e84 <_svfprintf_r+0xac4>
   12262:	b.n	120be <_svfprintf_r+0xcfe>
   12264:	add	r2, sp, #108	; 0x6c
   12266:	ldr	r1, [sp, #12]
   12268:	ldr	r0, [sp, #20]
   1226a:	bl	141a8 <__ssprint_r>
   1226e:	cmp	r0, #0
   12270:	bne.w	115ac <_svfprintf_r+0x1ec>
   12274:	ldr	r3, [sp, #116]	; 0x74
   12276:	ldr	r2, [sp, #112]	; 0x70
   12278:	add.w	r9, sp, #160	; 0xa0
   1227c:	b.n	11e3e <_svfprintf_r+0xa7e>
   1227e:	add	r2, sp, #108	; 0x6c
   12280:	ldr	r1, [sp, #12]
   12282:	ldr	r0, [sp, #20]
   12284:	bl	141a8 <__ssprint_r>
   12288:	cmp	r0, #0
   1228a:	bne.w	115ac <_svfprintf_r+0x1ec>
   1228e:	ldr	r3, [sp, #116]	; 0x74
   12290:	ldr	r2, [sp, #112]	; 0x70
   12292:	add.w	r9, sp, #160	; 0xa0
   12296:	b.n	11e5c <_svfprintf_r+0xa9c>
   12298:	add	r2, sp, #108	; 0x6c
   1229a:	ldr	r1, [sp, #12]
   1229c:	ldr	r0, [sp, #20]
   1229e:	bl	141a8 <__ssprint_r>
   122a2:	cmp	r0, #0
   122a4:	bne.w	115ac <_svfprintf_r+0x1ec>
   122a8:	ldr	r3, [sp, #116]	; 0x74
   122aa:	add.w	r9, sp, #160	; 0xa0
   122ae:	b.w	11888 <_svfprintf_r+0x4c8>
   122b2:	str	r7, [sp, #36]	; 0x24
   122b4:	movs	r7, #0
   122b6:	b.w	11604 <_svfprintf_r+0x244>
   122ba:	nop
   122bc:	.word	0x200008c8
   122c0:	tst.w	fp, #16
   122c4:	bne.n	122de <_svfprintf_r+0xf1e>
   122c6:	tst.w	fp, #64	; 0x40
   122ca:	beq.n	122de <_svfprintf_r+0xf1e>
   122cc:	ldr	r2, [sp, #36]	; 0x24
   122ce:	ldr	r3, [r2, #0]
   122d0:	adds	r2, #4
   122d2:	str	r2, [sp, #36]	; 0x24
   122d4:	ldrh.w	r2, [sp, #24]
   122d8:	strh	r2, [r3, #0]
   122da:	b.w	1140c <_svfprintf_r+0x4c>
   122de:	ldr	r2, [sp, #36]	; 0x24
   122e0:	ldr	r3, [r2, #0]
   122e2:	adds	r2, #4
   122e4:	str	r2, [sp, #36]	; 0x24
   122e6:	ldr	r2, [sp, #24]
   122e8:	str	r2, [r3, #0]
   122ea:	b.w	1140c <_svfprintf_r+0x4c>
   122ee:	vcmp.f64	d8, d8
   122f2:	vmrs	APSR_nzcv, fpscr
   122f6:	bvs.w	12836 <_svfprintf_r+0x1476>
   122fa:	ldr	r3, [sp, #48]	; 0x30
   122fc:	cmp.w	r8, #4294967295
   12300:	bic.w	r5, r3, #32
   12304:	beq.w	12752 <_svfprintf_r+0x1392>
   12308:	cmp	r5, #71	; 0x47
   1230a:	beq.w	1255a <_svfprintf_r+0x119a>
   1230e:	orr.w	r3, fp, #256	; 0x100
   12312:	str	r3, [sp, #40]	; 0x28
   12314:	vmov	r3, s17
   12318:	cmp	r3, #0
   1231a:	blt.w	12758 <_svfprintf_r+0x1398>
   1231e:	vmov.f64	d10, d8
   12322:	movs	r7, #0
   12324:	ldr	r3, [sp, #48]	; 0x30
   12326:	cmp	r3, #102	; 0x66
   12328:	beq.w	12730 <_svfprintf_r+0x1370>
   1232c:	cmp	r3, #70	; 0x46
   1232e:	beq.w	1250a <_svfprintf_r+0x114a>
   12332:	vmov.f64	d0, d10
   12336:	cmp	r5, #69	; 0x45
   12338:	ite	eq
   1233a:	addeq.w	r4, r8, #1
   1233e:	movne	r4, r8
   12340:	add	r2, sp, #100	; 0x64
   12342:	add	r3, sp, #88	; 0x58
   12344:	str	r2, [sp, #4]
   12346:	str	r3, [sp, #0]
   12348:	mov	r2, r4
   1234a:	add	r3, sp, #84	; 0x54
   1234c:	movs	r1, #2
   1234e:	ldr	r0, [sp, #20]
   12350:	bl	12ba8 <_dtoa_r>
   12354:	ldr	r3, [sp, #48]	; 0x30
   12356:	cmp	r3, #103	; 0x67
   12358:	mov	r6, r0
   1235a:	bne.w	1277a <_svfprintf_r+0x13ba>
   1235e:	tst.w	fp, #1
   12362:	beq.w	12832 <_svfprintf_r+0x1472>
   12366:	adds	r1, r6, r4
   12368:	vcmp.f64	d10, #0.0
   1236c:	vmrs	APSR_nzcv, fpscr
   12370:	beq.w	1267e <_svfprintf_r+0x12be>
   12374:	ldr	r3, [sp, #100]	; 0x64
   12376:	cmp	r1, r3
   12378:	bls.n	12388 <_svfprintf_r+0xfc8>
   1237a:	movs	r0, #48	; 0x30
   1237c:	adds	r2, r3, #1
   1237e:	str	r2, [sp, #100]	; 0x64
   12380:	strb	r0, [r3, #0]
   12382:	ldr	r3, [sp, #100]	; 0x64
   12384:	cmp	r1, r3
   12386:	bhi.n	1237c <_svfprintf_r+0xfbc>
   12388:	subs	r3, r3, r6
   1238a:	cmp	r5, #71	; 0x47
   1238c:	str	r3, [sp, #52]	; 0x34
   1238e:	beq.w	125d0 <_svfprintf_r+0x1210>
   12392:	ldr	r3, [sp, #48]	; 0x30
   12394:	cmp	r3, #101	; 0x65
   12396:	ble.w	12798 <_svfprintf_r+0x13d8>
   1239a:	ldr	r3, [sp, #48]	; 0x30
   1239c:	cmp	r3, #102	; 0x66
   1239e:	ldr	r3, [sp, #84]	; 0x54
   123a0:	beq.w	1279c <_svfprintf_r+0x13dc>
   123a4:	str	r3, [sp, #56]	; 0x38
   123a6:	ldr	r2, [sp, #56]	; 0x38
   123a8:	ldr	r1, [sp, #52]	; 0x34
   123aa:	cmp	r2, r1
   123ac:	blt.w	12760 <_svfprintf_r+0x13a0>
   123b0:	tst.w	fp, #1
   123b4:	bne.w	12820 <_svfprintf_r+0x1460>
   123b8:	bic.w	r3, r2, r2, asr #31
   123bc:	str	r2, [sp, #32]
   123be:	movs	r2, #103	; 0x67
   123c0:	str	r2, [sp, #48]	; 0x30
   123c2:	cmp	r7, #0
   123c4:	bne.w	125b4 <_svfprintf_r+0x11f4>
   123c8:	mov	r8, r7
   123ca:	str	r3, [sp, #16]
   123cc:	ldr.w	fp, [sp, #40]	; 0x28
   123d0:	ldrb.w	r7, [sp, #79]	; 0x4f
   123d4:	b.w	117a4 <_svfprintf_r+0x3e4>
   123d8:	bic.w	r7, r7, #7
   123dc:	add.w	r3, r7, #8
   123e0:	vldr	d8, [r7]
   123e4:	str	r3, [sp, #36]	; 0x24
   123e6:	b.w	11766 <_svfprintf_r+0x3a6>
   123ea:	mov	r6, r9
   123ec:	mov	r9, r1
   123ee:	adds	r2, #1
   123f0:	add	r3, r4
   123f2:	cmp	r2, #7
   123f4:	str	r3, [sp, #116]	; 0x74
   123f6:	str	r2, [sp, #112]	; 0x70
   123f8:	str.w	r7, [r9]
   123fc:	str.w	r4, [r9, #4]
   12400:	bgt.w	1217e <_svfprintf_r+0xdbe>
   12404:	add.w	r9, r9, #8
   12408:	b.n	12194 <_svfprintf_r+0xdd4>
   1240a:	movs	r7, #0
   1240c:	cmp	r8, r7
   1240e:	strb.w	r7, [sp, #79]	; 0x4f
   12412:	blt.w	11cbe <_svfprintf_r+0x8fe>
   12416:	bic.w	fp, fp, #128	; 0x80
   1241a:	b.n	11c5a <_svfprintf_r+0x89a>
   1241c:	add	r2, sp, #108	; 0x6c
   1241e:	ldr	r1, [sp, #12]
   12420:	ldr	r0, [sp, #20]
   12422:	bl	141a8 <__ssprint_r>
   12426:	cmp	r0, #0
   12428:	bne.w	115ac <_svfprintf_r+0x1ec>
   1242c:	ldr	r3, [sp, #116]	; 0x74
   1242e:	add.w	r9, sp, #160	; 0xa0
   12432:	b.n	11cfc <_svfprintf_r+0x93c>
   12434:	ldr	r7, [sp, #36]	; 0x24
   12436:	b.n	11cb0 <_svfprintf_r+0x8f0>
   12438:	ldr	r2, [sp, #112]	; 0x70
   1243a:	ldr	r1, [pc, #740]	; (12720 <_svfprintf_r+0x1360>)
   1243c:	str.w	r1, [r9]
   12440:	adds	r2, #1
   12442:	adds	r3, #1
   12444:	movs	r1, #1
   12446:	cmp	r2, #7
   12448:	str	r3, [sp, #116]	; 0x74
   1244a:	str	r2, [sp, #112]	; 0x70
   1244c:	str.w	r1, [r9, #4]
   12450:	bgt.n	12540 <_svfprintf_r+0x1180>
   12452:	add.w	r9, r9, #8
   12456:	cbnz	r4, 12464 <_svfprintf_r+0x10a4>
   12458:	ldr	r2, [sp, #52]	; 0x34
   1245a:	cbnz	r2, 12464 <_svfprintf_r+0x10a4>
   1245c:	tst.w	fp, #1
   12460:	beq.w	11922 <_svfprintf_r+0x562>
   12464:	ldr	r2, [sp, #112]	; 0x70
   12466:	ldr	r0, [sp, #60]	; 0x3c
   12468:	ldr	r1, [sp, #64]	; 0x40
   1246a:	str.w	r1, [r9]
   1246e:	adds	r2, #1
   12470:	add	r3, r0
   12472:	cmp	r2, #7
   12474:	str	r3, [sp, #116]	; 0x74
   12476:	str.w	r0, [r9, #4]
   1247a:	str	r2, [sp, #112]	; 0x70
   1247c:	bgt.w	127ec <_svfprintf_r+0x142c>
   12480:	add.w	r9, r9, #8
   12484:	negs	r4, r4
   12486:	cmp	r4, #0
   12488:	ble.w	1259a <_svfprintf_r+0x11da>
   1248c:	cmp	r4, #16
   1248e:	ldr	r7, [pc, #660]	; (12724 <_svfprintf_r+0x1364>)
   12490:	ble.w	126b8 <_svfprintf_r+0x12f8>
   12494:	mov	r1, r9
   12496:	movs	r5, #16
   12498:	mov	r9, r6
   1249a:	ldr.w	r8, [sp, #20]
   1249e:	ldr	r6, [sp, #12]
   124a0:	b.n	124ac <_svfprintf_r+0x10ec>
   124a2:	adds	r1, #8
   124a4:	subs	r4, #16
   124a6:	cmp	r4, #16
   124a8:	ble.w	126b4 <_svfprintf_r+0x12f4>
   124ac:	adds	r2, #1
   124ae:	adds	r3, #16
   124b0:	cmp	r2, #7
   124b2:	str	r3, [sp, #116]	; 0x74
   124b4:	str	r2, [sp, #112]	; 0x70
   124b6:	str	r7, [r1, #0]
   124b8:	str	r5, [r1, #4]
   124ba:	ble.n	124a2 <_svfprintf_r+0x10e2>
   124bc:	add	r2, sp, #108	; 0x6c
   124be:	mov	r1, r6
   124c0:	mov	r0, r8
   124c2:	bl	141a8 <__ssprint_r>
   124c6:	cmp	r0, #0
   124c8:	bne.w	115ac <_svfprintf_r+0x1ec>
   124cc:	ldr	r3, [sp, #116]	; 0x74
   124ce:	ldr	r2, [sp, #112]	; 0x70
   124d0:	add	r1, sp, #160	; 0xa0
   124d2:	b.n	124a4 <_svfprintf_r+0x10e4>
   124d4:	add	r2, sp, #108	; 0x6c
   124d6:	ldr	r1, [sp, #12]
   124d8:	ldr	r0, [sp, #20]
   124da:	bl	141a8 <__ssprint_r>
   124de:	cmp	r0, #0
   124e0:	bne.w	115ac <_svfprintf_r+0x1ec>
   124e4:	ldr	r3, [sp, #116]	; 0x74
   124e6:	add.w	r9, sp, #160	; 0xa0
   124ea:	b.n	11d2c <_svfprintf_r+0x96c>
   124ec:	movs	r1, #64	; 0x40
   124ee:	ldr	r0, [sp, #20]
   124f0:	bl	10488 <_malloc_r>
   124f4:	ldr	r2, [sp, #12]
   124f6:	str	r0, [r2, #0]
   124f8:	str	r0, [r2, #16]
   124fa:	cmp	r0, #0
   124fc:	beq.w	128da <_svfprintf_r+0x151a>
   12500:	ldr	r2, [sp, #12]
   12502:	movs	r3, #64	; 0x40
   12504:	str	r3, [r2, #20]
   12506:	b.w	113f2 <_svfprintf_r+0x32>
   1250a:	add	r2, sp, #100	; 0x64
   1250c:	add	r3, sp, #88	; 0x58
   1250e:	str	r2, [sp, #4]
   12510:	str	r3, [sp, #0]
   12512:	mov	r2, r8
   12514:	add	r3, sp, #84	; 0x54
   12516:	movs	r1, #3
   12518:	vmov.f64	d0, d10
   1251c:	ldr	r0, [sp, #20]
   1251e:	bl	12ba8 <_dtoa_r>
   12522:	mov	r4, r8
   12524:	mov	r6, r0
   12526:	ldr	r3, [sp, #48]	; 0x30
   12528:	cmp	r3, #70	; 0x46
   1252a:	add.w	r1, r6, r4
   1252e:	bne.w	12368 <_svfprintf_r+0xfa8>
   12532:	ldrb	r3, [r6, #0]
   12534:	cmp	r3, #48	; 0x30
   12536:	beq.w	12854 <_svfprintf_r+0x1494>
   1253a:	ldr	r4, [sp, #84]	; 0x54
   1253c:	add	r1, r4
   1253e:	b.n	12368 <_svfprintf_r+0xfa8>
   12540:	add	r2, sp, #108	; 0x6c
   12542:	ldr	r1, [sp, #12]
   12544:	ldr	r0, [sp, #20]
   12546:	bl	141a8 <__ssprint_r>
   1254a:	cmp	r0, #0
   1254c:	bne.w	115ac <_svfprintf_r+0x1ec>
   12550:	ldr	r4, [sp, #84]	; 0x54
   12552:	ldr	r3, [sp, #116]	; 0x74
   12554:	add.w	r9, sp, #160	; 0xa0
   12558:	b.n	12456 <_svfprintf_r+0x1096>
   1255a:	cmp.w	r8, #0
   1255e:	it	eq
   12560:	moveq.w	r8, #1
   12564:	b.n	1230e <_svfprintf_r+0xf4e>
   12566:	str	r3, [sp, #36]	; 0x24
   12568:	b.n	122b4 <_svfprintf_r+0xef4>
   1256a:	str	r3, [sp, #36]	; 0x24
   1256c:	mov	r7, r2
   1256e:	b.w	11a68 <_svfprintf_r+0x6a8>
   12572:	mov	r0, r6
   12574:	bl	11240 <strlen>
   12578:	mov	r8, r4
   1257a:	mov	r3, r0
   1257c:	str	r0, [sp, #32]
   1257e:	b.w	11c44 <_svfprintf_r+0x884>
   12582:	add	r2, sp, #108	; 0x6c
   12584:	ldr	r1, [sp, #12]
   12586:	ldr	r0, [sp, #20]
   12588:	bl	141a8 <__ssprint_r>
   1258c:	cmp	r0, #0
   1258e:	bne.w	115ac <_svfprintf_r+0x1ec>
   12592:	ldr	r3, [sp, #116]	; 0x74
   12594:	ldr	r2, [sp, #112]	; 0x70
   12596:	add.w	r9, sp, #160	; 0xa0
   1259a:	ldr	r0, [sp, #52]	; 0x34
   1259c:	str.w	r6, [r9]
   125a0:	adds	r2, #1
   125a2:	add	r3, r0
   125a4:	cmp	r2, #7
   125a6:	str	r3, [sp, #116]	; 0x74
   125a8:	str	r2, [sp, #112]	; 0x70
   125aa:	str.w	r0, [r9, #4]
   125ae:	ble.w	1191e <_svfprintf_r+0x55e>
   125b2:	b.n	11ea2 <_svfprintf_r+0xae2>
   125b4:	movs	r7, #45	; 0x2d
   125b6:	str	r3, [sp, #16]
   125b8:	ldr.w	fp, [sp, #40]	; 0x28
   125bc:	strb.w	r7, [sp, #79]	; 0x4f
   125c0:	mov.w	r8, #0
   125c4:	b.w	117a6 <_svfprintf_r+0x3e6>
   125c8:	str	r7, [sp, #36]	; 0x24
   125ca:	mov	r7, r3
   125cc:	b.w	11a68 <_svfprintf_r+0x6a8>
   125d0:	ldr	r3, [sp, #84]	; 0x54
   125d2:	adds	r2, r3, #3
   125d4:	blt.n	125dc <_svfprintf_r+0x121c>
   125d6:	cmp	r8, r3
   125d8:	bge.w	123a4 <_svfprintf_r+0xfe4>
   125dc:	ldr	r2, [sp, #48]	; 0x30
   125de:	subs	r2, #2
   125e0:	str	r2, [sp, #48]	; 0x30
   125e2:	subs	r3, #1
   125e4:	cmp	r3, #0
   125e6:	ldrb.w	r2, [sp, #48]	; 0x30
   125ea:	str	r3, [sp, #84]	; 0x54
   125ec:	it	lt
   125ee:	neglt	r3, r3
   125f0:	strb.w	r2, [sp, #92]	; 0x5c
   125f4:	ite	lt
   125f6:	movlt	r2, #45	; 0x2d
   125f8:	movge	r2, #43	; 0x2b
   125fa:	cmp	r3, #9
   125fc:	strb.w	r2, [sp, #93]	; 0x5d
   12600:	ble.w	12810 <_svfprintf_r+0x1450>
   12604:	add.w	r0, sp, #107	; 0x6b
   12608:	mov	r4, r0
   1260a:	ldr	r2, [pc, #284]	; (12728 <_svfprintf_r+0x1368>)
   1260c:	smull	r2, r1, r2, r3
   12610:	asrs	r2, r3, #31
   12612:	rsb	r2, r2, r1, asr #2
   12616:	add.w	r1, r2, r2, lsl #2
   1261a:	sub.w	r3, r3, r1, lsl #1
   1261e:	add.w	r1, r3, #48	; 0x30
   12622:	cmp	r2, #9
   12624:	mov	r3, r2
   12626:	strb.w	r1, [r4, #-1]!
   1262a:	bgt.n	1260a <_svfprintf_r+0x124a>
   1262c:	mov	r1, r4
   1262e:	adds	r3, #48	; 0x30
   12630:	uxtb	r2, r3
   12632:	strb.w	r2, [r1, #-1]!
   12636:	cmp	r0, r1
   12638:	bls.w	12900 <_svfprintf_r+0x1540>
   1263c:	add.w	r1, sp, #94	; 0x5e
   12640:	mov	r3, r4
   12642:	b.n	12648 <_svfprintf_r+0x1288>
   12644:	ldrb.w	r2, [r3], #1
   12648:	strb.w	r2, [r1], #1
   1264c:	cmp	r0, r3
   1264e:	bne.n	12644 <_svfprintf_r+0x1284>
   12650:	adds	r3, r0, #1
   12652:	subs	r3, r3, r4
   12654:	add.w	r2, sp, #94	; 0x5e
   12658:	add	r3, r2
   1265a:	add	r2, sp, #92	; 0x5c
   1265c:	subs	r3, r3, r2
   1265e:	ldr	r2, [sp, #52]	; 0x34
   12660:	str	r3, [sp, #68]	; 0x44
   12662:	cmp	r2, #1
   12664:	add	r3, r2
   12666:	str	r3, [sp, #32]
   12668:	ble.w	1286a <_svfprintf_r+0x14aa>
   1266c:	ldr	r3, [sp, #32]
   1266e:	ldr	r2, [sp, #60]	; 0x3c
   12670:	add	r3, r2
   12672:	movs	r2, #0
   12674:	str	r3, [sp, #32]
   12676:	str	r2, [sp, #56]	; 0x38
   12678:	bic.w	r3, r3, r3, asr #31
   1267c:	b.n	123c2 <_svfprintf_r+0x1002>
   1267e:	mov	r3, r1
   12680:	b.n	12388 <_svfprintf_r+0xfc8>
   12682:	add	r2, sp, #108	; 0x6c
   12684:	ldr	r1, [sp, #12]
   12686:	ldr	r0, [sp, #20]
   12688:	bl	141a8 <__ssprint_r>
   1268c:	cmp	r0, #0
   1268e:	bne.w	115ac <_svfprintf_r+0x1ec>
   12692:	ldr	r3, [sp, #116]	; 0x74
   12694:	add.w	r9, sp, #160	; 0xa0
   12698:	b.n	11fa2 <_svfprintf_r+0xbe2>
   1269a:	add	r2, sp, #108	; 0x6c
   1269c:	ldr	r1, [sp, #12]
   1269e:	ldr	r0, [sp, #20]
   126a0:	bl	141a8 <__ssprint_r>
   126a4:	cmp	r0, #0
   126a6:	bne.w	115ac <_svfprintf_r+0x1ec>
   126aa:	ldr	r2, [sp, #84]	; 0x54
   126ac:	ldr	r3, [sp, #116]	; 0x74
   126ae:	add.w	r9, sp, #160	; 0xa0
   126b2:	b.n	121a8 <_svfprintf_r+0xde8>
   126b4:	mov	r6, r9
   126b6:	mov	r9, r1
   126b8:	adds	r2, #1
   126ba:	add	r3, r4
   126bc:	cmp	r2, #7
   126be:	str	r3, [sp, #116]	; 0x74
   126c0:	str	r2, [sp, #112]	; 0x70
   126c2:	str.w	r7, [r9]
   126c6:	str.w	r4, [r9, #4]
   126ca:	bgt.w	12582 <_svfprintf_r+0x11c2>
   126ce:	add.w	r9, r9, #8
   126d2:	b.n	1259a <_svfprintf_r+0x11da>
   126d4:	add	r2, sp, #108	; 0x6c
   126d6:	ldr	r1, [sp, #12]
   126d8:	ldr	r0, [sp, #20]
   126da:	bl	141a8 <__ssprint_r>
   126de:	cmp	r0, #0
   126e0:	bne.w	115ac <_svfprintf_r+0x1ec>
   126e4:	ldr	r2, [sp, #84]	; 0x54
   126e6:	ldr	r1, [sp, #52]	; 0x34
   126e8:	ldr	r3, [sp, #116]	; 0x74
   126ea:	subs	r2, r1, r2
   126ec:	add.w	r9, sp, #160	; 0xa0
   126f0:	b.n	121d8 <_svfprintf_r+0xe18>
   126f2:	cmp	r5, #6
   126f4:	mov	r3, r5
   126f6:	it	cs
   126f8:	movcs	r3, #6
   126fa:	str	r3, [sp, #32]
   126fc:	bic.w	r3, r3, r3, asr #31
   12700:	mov	r8, r6
   12702:	str	r7, [sp, #36]	; 0x24
   12704:	str	r6, [sp, #56]	; 0x38
   12706:	mov	r7, r6
   12708:	str	r3, [sp, #16]
   1270a:	ldr	r6, [pc, #32]	; (1272c <_svfprintf_r+0x136c>)
   1270c:	b.w	117a4 <_svfprintf_r+0x3e4>
   12710:	mov	fp, r3
   12712:	b.w	11aea <_svfprintf_r+0x72a>
   12716:	movs	r7, #45	; 0x2d
   12718:	strb.w	r7, [sp, #79]	; 0x4f
   1271c:	b.w	11786 <_svfprintf_r+0x3c6>
   12720:	.word	0x20000588
   12724:	.word	0x200008c8
   12728:	.word	0x66666667
   1272c:	.word	0x20000910
   12730:	add	r2, sp, #100	; 0x64
   12732:	add	r3, sp, #88	; 0x58
   12734:	str	r2, [sp, #4]
   12736:	str	r3, [sp, #0]
   12738:	movs	r1, #3
   1273a:	add	r3, sp, #84	; 0x54
   1273c:	mov	r2, r8
   1273e:	vmov.f64	d0, d10
   12742:	ldr	r0, [sp, #20]
   12744:	bl	12ba8 <_dtoa_r>
   12748:	mov	r4, r8
   1274a:	mov	r6, r0
   1274c:	add.w	r1, r0, r8
   12750:	b.n	12532 <_svfprintf_r+0x1172>
   12752:	mov.w	r8, #6
   12756:	b.n	1230e <_svfprintf_r+0xf4e>
   12758:	vneg.f64	d10, d8
   1275c:	movs	r7, #45	; 0x2d
   1275e:	b.n	12324 <_svfprintf_r+0xf64>
   12760:	ldr	r2, [sp, #60]	; 0x3c
   12762:	ldr	r3, [sp, #52]	; 0x34
   12764:	add	r3, r2
   12766:	ldr	r2, [sp, #56]	; 0x38
   12768:	str	r3, [sp, #32]
   1276a:	cmp	r2, #0
   1276c:	ble.w	1287c <_svfprintf_r+0x14bc>
   12770:	movs	r2, #103	; 0x67
   12772:	bic.w	r3, r3, r3, asr #31
   12776:	str	r2, [sp, #48]	; 0x30
   12778:	b.n	123c2 <_svfprintf_r+0x1002>
   1277a:	ldr	r3, [sp, #48]	; 0x30
   1277c:	cmp	r3, #71	; 0x47
   1277e:	bne.w	12366 <_svfprintf_r+0xfa6>
   12782:	tst.w	fp, #1
   12786:	bne.w	12526 <_svfprintf_r+0x1166>
   1278a:	ldr	r3, [sp, #100]	; 0x64
   1278c:	cmp	r5, #71	; 0x47
   1278e:	sub.w	r3, r3, r6
   12792:	str	r3, [sp, #52]	; 0x34
   12794:	beq.w	125d0 <_svfprintf_r+0x1210>
   12798:	ldr	r3, [sp, #84]	; 0x54
   1279a:	b.n	125e2 <_svfprintf_r+0x1222>
   1279c:	cmp	r3, #0
   1279e:	mov	r2, r3
   127a0:	str	r3, [sp, #56]	; 0x38
   127a2:	ble.n	1288c <_svfprintf_r+0x14cc>
   127a4:	cmp.w	r8, #0
   127a8:	bne.n	12842 <_svfprintf_r+0x1482>
   127aa:	tst.w	fp, #1
   127ae:	bne.n	12842 <_svfprintf_r+0x1482>
   127b0:	bic.w	r3, r3, r3, asr #31
   127b4:	str	r2, [sp, #32]
   127b6:	b.n	123c2 <_svfprintf_r+0x1002>
   127b8:	tst.w	fp, #1
   127bc:	mov	r7, r8
   127be:	beq.n	127cc <_svfprintf_r+0x140c>
   127c0:	add	r6, sp, #224	; 0xe0
   127c2:	movs	r3, #48	; 0x30
   127c4:	strb.w	r3, [r6, #-65]!
   127c8:	b.w	11a78 <_svfprintf_r+0x6b8>
   127cc:	str.w	r8, [sp, #32]
   127d0:	add	r6, sp, #160	; 0xa0
   127d2:	b.w	11a7e <_svfprintf_r+0x6be>
   127d6:	bic.w	r3, r5, r5, asr #31
   127da:	str	r7, [sp, #36]	; 0x24
   127dc:	str	r3, [sp, #16]
   127de:	str	r5, [sp, #32]
   127e0:	mov	r8, r0
   127e2:	str	r0, [sp, #56]	; 0x38
   127e4:	ldrb.w	r7, [sp, #79]	; 0x4f
   127e8:	b.w	117a4 <_svfprintf_r+0x3e4>
   127ec:	add	r2, sp, #108	; 0x6c
   127ee:	ldr	r1, [sp, #12]
   127f0:	ldr	r0, [sp, #20]
   127f2:	bl	141a8 <__ssprint_r>
   127f6:	cmp	r0, #0
   127f8:	bne.w	115ac <_svfprintf_r+0x1ec>
   127fc:	ldr	r4, [sp, #84]	; 0x54
   127fe:	ldr	r3, [sp, #116]	; 0x74
   12800:	ldr	r2, [sp, #112]	; 0x70
   12802:	add.w	r9, sp, #160	; 0xa0
   12806:	b.n	12484 <_svfprintf_r+0x10c4>
   12808:	mov	sl, r4
   1280a:	movs	r5, #0
   1280c:	b.w	11476 <_svfprintf_r+0xb6>
   12810:	adds	r3, #48	; 0x30
   12812:	movs	r2, #48	; 0x30
   12814:	strb.w	r3, [sp, #95]	; 0x5f
   12818:	strb.w	r2, [sp, #94]	; 0x5e
   1281c:	add	r3, sp, #96	; 0x60
   1281e:	b.n	1265a <_svfprintf_r+0x129a>
   12820:	ldr	r2, [sp, #60]	; 0x3c
   12822:	ldr	r3, [sp, #56]	; 0x38
   12824:	add	r3, r2
   12826:	movs	r2, #103	; 0x67
   12828:	str	r3, [sp, #32]
   1282a:	str	r2, [sp, #48]	; 0x30
   1282c:	bic.w	r3, r3, r3, asr #31
   12830:	b.n	123c2 <_svfprintf_r+0x1002>
   12832:	ldr	r3, [sp, #100]	; 0x64
   12834:	b.n	12388 <_svfprintf_r+0xfc8>
   12836:	ldr	r6, [pc, #240]	; (12928 <_svfprintf_r+0x1568>)
   12838:	ldr	r3, [pc, #240]	; (1292c <_svfprintf_r+0x156c>)
   1283a:	ldrb.w	r7, [sp, #79]	; 0x4f
   1283e:	b.w	1178a <_svfprintf_r+0x3ca>
   12842:	ldr	r3, [sp, #56]	; 0x38
   12844:	ldr	r2, [sp, #60]	; 0x3c
   12846:	adds	r5, r3, r2
   12848:	add.w	r3, r5, r8
   1284c:	str	r3, [sp, #32]
   1284e:	bic.w	r3, r3, r3, asr #31
   12852:	b.n	123c2 <_svfprintf_r+0x1002>
   12854:	vcmp.f64	d10, #0.0
   12858:	vmrs	APSR_nzcv, fpscr
   1285c:	beq.w	1253a <_svfprintf_r+0x117a>
   12860:	rsb	r4, r4, #1
   12864:	str	r4, [sp, #84]	; 0x54
   12866:	add	r1, r4
   12868:	b.n	12368 <_svfprintf_r+0xfa8>
   1286a:	ands.w	r3, fp, #1
   1286e:	bne.w	1266c <_svfprintf_r+0x12ac>
   12872:	str	r3, [sp, #56]	; 0x38
   12874:	ldr	r3, [sp, #32]
   12876:	bic.w	r3, r3, r3, asr #31
   1287a:	b.n	123c2 <_svfprintf_r+0x1002>
   1287c:	ldr	r3, [sp, #56]	; 0x38
   1287e:	ldr	r2, [sp, #32]
   12880:	rsb	r3, r3, #1
   12884:	add	r2, r3
   12886:	mov	r3, r2
   12888:	str	r2, [sp, #32]
   1288a:	b.n	12770 <_svfprintf_r+0x13b0>
   1288c:	cmp.w	r8, #0
   12890:	bne.n	12898 <_svfprintf_r+0x14d8>
   12892:	tst.w	fp, #1
   12896:	beq.n	128a8 <_svfprintf_r+0x14e8>
   12898:	ldr	r3, [sp, #60]	; 0x3c
   1289a:	adds	r5, r3, #1
   1289c:	add.w	r3, r5, r8
   128a0:	str	r3, [sp, #32]
   128a2:	bic.w	r3, r3, r3, asr #31
   128a6:	b.n	123c2 <_svfprintf_r+0x1002>
   128a8:	movs	r3, #1
   128aa:	str	r3, [sp, #32]
   128ac:	b.n	123c2 <_svfprintf_r+0x1002>
   128ae:	ldr	r0, [sp, #36]	; 0x24
   128b0:	ldrb.w	r3, [sl, #1]
   128b4:	ldr	r5, [r0, #0]
   128b6:	adds	r0, #4
   128b8:	cmp	r5, #0
   128ba:	str	r0, [sp, #36]	; 0x24
   128bc:	mov	sl, r4
   128be:	bge.w	11472 <_svfprintf_r+0xb2>
   128c2:	mov.w	r5, #4294967295
   128c6:	b.w	11472 <_svfprintf_r+0xb2>
   128ca:	strb.w	r1, [sp, #79]	; 0x4f
   128ce:	b.w	11bec <_svfprintf_r+0x82c>
   128d2:	strb.w	r1, [sp, #79]	; 0x4f
   128d6:	b.w	11c78 <_svfprintf_r+0x8b8>
   128da:	ldr	r2, [sp, #20]
   128dc:	movs	r3, #12
   128de:	str	r3, [r2, #0]
   128e0:	mov.w	r0, #4294967295
   128e4:	b.w	115be <_svfprintf_r+0x1fe>
   128e8:	strb.w	r1, [sp, #79]	; 0x4f
   128ec:	b.w	11a98 <_svfprintf_r+0x6d8>
   128f0:	strb.w	r1, [sp, #79]	; 0x4f
   128f4:	b.w	11a3e <_svfprintf_r+0x67e>
   128f8:	strb.w	r1, [sp, #79]	; 0x4f
   128fc:	b.w	11ba4 <_svfprintf_r+0x7e4>
   12900:	add.w	r3, sp, #94	; 0x5e
   12904:	b.n	1265a <_svfprintf_r+0x129a>
   12906:	strb.w	r1, [sp, #79]	; 0x4f
   1290a:	b.w	115d2 <_svfprintf_r+0x212>
   1290e:	strb.w	r1, [sp, #79]	; 0x4f
   12912:	b.w	119da <_svfprintf_r+0x61a>
   12916:	strb.w	r1, [sp, #79]	; 0x4f
   1291a:	b.w	1174a <_svfprintf_r+0x38a>
   1291e:	strb.w	r1, [sp, #79]	; 0x4f
   12922:	b.w	116c6 <_svfprintf_r+0x306>
   12926:	nop
   12928:	.word	0x200008e4
   1292c:	.word	0x200008e0

00012930 <_vdprintf_r>:
   12930:	push	{r4, r5, r6, r7, lr}
   12932:	sub.w	sp, sp, #532	; 0x214
   12936:	add	r5, sp, #16
   12938:	str	r3, [sp, #0]
   1293a:	mov	r7, r1
   1293c:	mov	r3, r2
   1293e:	mov.w	r4, #512	; 0x200
   12942:	add	r2, sp, #12
   12944:	mov	r1, r5
   12946:	str	r4, [sp, #12]
   12948:	mov	r6, r0
   1294a:	bl	142a8 <_vasnprintf_r>
   1294e:	cbz	r0, 12974 <_vdprintf_r+0x44>
   12950:	mov	r4, r0
   12952:	mov	r2, r0
   12954:	mov	r1, r7
   12956:	ldr	r3, [sp, #12]
   12958:	mov	r0, r6
   1295a:	bl	129b0 <_write_r>
   1295e:	cmp	r4, r5
   12960:	str	r0, [sp, #12]
   12962:	beq.n	1296e <_vdprintf_r+0x3e>
   12964:	mov	r0, r6
   12966:	mov	r1, r4
   12968:	bl	13998 <_free_r>
   1296c:	ldr	r0, [sp, #12]
   1296e:	add.w	sp, sp, #532	; 0x214
   12972:	pop	{r4, r5, r6, r7, pc}
   12974:	mov.w	r0, #4294967295
   12978:	b.n	1296e <_vdprintf_r+0x3e>
   1297a:	nop

0001297c <vdprintf>:
   1297c:	push	{r4}
   1297e:	ldr	r4, [pc, #16]	; (12990 <vdprintf+0x14>)
   12980:	mov	r3, r2
   12982:	mov	r2, r1
   12984:	mov	r1, r0
   12986:	ldr	r0, [r4, #0]
   12988:	ldr.w	r4, [sp], #4
   1298c:	b.w	12930 <_vdprintf_r>
   12990:	.word	0x20001098

00012994 <__ascii_wctomb>:
   12994:	cbz	r1, 129a0 <__ascii_wctomb+0xc>
   12996:	cmp	r2, #255	; 0xff
   12998:	bhi.n	129a4 <__ascii_wctomb+0x10>
   1299a:	strb	r2, [r1, #0]
   1299c:	movs	r0, #1
   1299e:	bx	lr
   129a0:	mov	r0, r1
   129a2:	bx	lr
   129a4:	movs	r3, #138	; 0x8a
   129a6:	str	r3, [r0, #0]
   129a8:	mov.w	r0, #4294967295
   129ac:	bx	lr
   129ae:	nop

000129b0 <_write_r>:
   129b0:	push	{r4, r5, r6, lr}
   129b2:	mov	r5, r1
   129b4:	ldr	r4, [pc, #32]	; (129d8 <_write_r+0x28>)
   129b6:	mov	r1, r2
   129b8:	mov	r6, r0
   129ba:	mov	r2, r3
   129bc:	mov	r0, r5
   129be:	movs	r3, #0
   129c0:	str	r3, [r4, #0]
   129c2:	bl	ff68 <_write>
   129c6:	adds	r3, r0, #1
   129c8:	beq.n	129cc <_write_r+0x1c>
   129ca:	pop	{r4, r5, r6, pc}
   129cc:	ldr	r3, [r4, #0]
   129ce:	cmp	r3, #0
   129d0:	beq.n	129ca <_write_r+0x1a>
   129d2:	str	r3, [r6, #0]
   129d4:	pop	{r4, r5, r6, pc}
   129d6:	nop
   129d8:	.word	0x200466c0

000129dc <__register_exitproc>:
   129dc:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   129e0:	ldr	r4, [pc, #148]	; (12a78 <__register_exitproc+0x9c>)
   129e2:	ldr	r5, [r4, #0]
   129e4:	ldr.w	r4, [r5, #328]	; 0x148
   129e8:	mov	r6, r0
   129ea:	mov	r8, r1
   129ec:	mov	sl, r2
   129ee:	mov	r9, r3
   129f0:	cbz	r4, 12a64 <__register_exitproc+0x88>
   129f2:	ldr	r0, [r4, #4]
   129f4:	cmp	r0, #31
   129f6:	bgt.n	12a28 <__register_exitproc+0x4c>
   129f8:	adds	r3, r0, #1
   129fa:	cbz	r6, 12a1a <__register_exitproc+0x3e>
   129fc:	add.w	r5, r4, r0, lsl #2
   12a00:	movs	r2, #1
   12a02:	str.w	sl, [r5, #136]	; 0x88
   12a06:	ldr.w	r1, [r4, #392]	; 0x188
   12a0a:	lsls	r2, r0
   12a0c:	orrs	r1, r2
   12a0e:	cmp	r6, #2
   12a10:	str.w	r1, [r4, #392]	; 0x188
   12a14:	str.w	r9, [r5, #264]	; 0x108
   12a18:	beq.n	12a58 <__register_exitproc+0x7c>
   12a1a:	adds	r0, #2
   12a1c:	str	r3, [r4, #4]
   12a1e:	str.w	r8, [r4, r0, lsl #2]
   12a22:	movs	r0, #0
   12a24:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   12a28:	ldr	r3, [pc, #80]	; (12a7c <__register_exitproc+0xa0>)
   12a2a:	cbz	r3, 12a6e <__register_exitproc+0x92>
   12a2c:	mov.w	r0, #400	; 0x190
   12a30:	bl	10468 <malloc>
   12a34:	mov	r4, r0
   12a36:	cbz	r0, 12a6e <__register_exitproc+0x92>
   12a38:	ldr.w	r3, [r5, #328]	; 0x148
   12a3c:	movs	r7, #0
   12a3e:	stmia.w	r0, {r3, r7}
   12a42:	str.w	r4, [r5, #328]	; 0x148
   12a46:	mov	r0, r7
   12a48:	movs	r3, #1
   12a4a:	str.w	r7, [r4, #392]	; 0x188
   12a4e:	str.w	r7, [r4, #396]	; 0x18c
   12a52:	cmp	r6, #0
   12a54:	beq.n	12a1a <__register_exitproc+0x3e>
   12a56:	b.n	129fc <__register_exitproc+0x20>
   12a58:	ldr.w	r1, [r4, #396]	; 0x18c
   12a5c:	orrs	r2, r1
   12a5e:	str.w	r2, [r4, #396]	; 0x18c
   12a62:	b.n	12a1a <__register_exitproc+0x3e>
   12a64:	add.w	r4, r5, #332	; 0x14c
   12a68:	str.w	r4, [r5, #328]	; 0x148
   12a6c:	b.n	129f2 <__register_exitproc+0x16>
   12a6e:	mov.w	r0, #4294967295
   12a72:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   12a76:	nop
   12a78:	.word	0x200008b4
   12a7c:	.word	0x00010469

00012a80 <quorem>:
   12a80:	ldr	r2, [r0, #16]
   12a82:	ldr	r3, [r1, #16]
   12a84:	cmp	r3, r2
   12a86:	bgt.w	12ba4 <quorem+0x124>
   12a8a:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12a8e:	add.w	r8, r3, #4294967295
   12a92:	add.w	r7, r1, #20
   12a96:	add.w	fp, r0, #20
   12a9a:	ldr.w	r2, [r7, r8, lsl #2]
   12a9e:	ldr.w	r3, [fp, r8, lsl #2]
   12aa2:	mov.w	r4, r8, lsl #2
   12aa6:	sub	sp, #12
   12aa8:	adds	r2, #1
   12aaa:	udiv	r9, r3, r2
   12aae:	add.w	r3, fp, r4
   12ab2:	str	r4, [sp, #0]
   12ab4:	add.w	sl, r7, r4
   12ab8:	str	r3, [sp, #4]
   12aba:	cmp.w	r9, #0
   12abe:	beq.n	12b34 <quorem+0xb4>
   12ac0:	movs	r5, #0
   12ac2:	mov	ip, r7
   12ac4:	mov	lr, fp
   12ac6:	mov	r3, r5
   12ac8:	ldr.w	r6, [ip], #4
   12acc:	ldr.w	r2, [lr]
   12ad0:	uxth	r4, r6
   12ad2:	mla	r5, r9, r4, r5
   12ad6:	lsrs	r6, r6, #16
   12ad8:	lsrs	r4, r5, #16
   12ada:	mla	r4, r9, r6, r4
   12ade:	uxth	r5, r5
   12ae0:	subs	r3, r3, r5
   12ae2:	uxth	r6, r4
   12ae4:	uxtah	r3, r3, r2
   12ae8:	rsb	r6, r6, r2, lsr #16
   12aec:	add.w	r6, r6, r3, asr #16
   12af0:	uxth	r3, r3
   12af2:	orr.w	r3, r3, r6, lsl #16
   12af6:	cmp	sl, ip
   12af8:	str.w	r3, [lr], #4
   12afc:	mov.w	r5, r4, lsr #16
   12b00:	mov.w	r3, r6, asr #16
   12b04:	bcs.n	12ac8 <quorem+0x48>
   12b06:	ldr	r3, [sp, #0]
   12b08:	ldr.w	r3, [fp, r3]
   12b0c:	cbnz	r3, 12b34 <quorem+0xb4>
   12b0e:	ldr	r4, [sp, #4]
   12b10:	subs	r3, r4, #4
   12b12:	cmp	fp, r3
   12b14:	bcs.n	12b30 <quorem+0xb0>
   12b16:	ldr.w	r3, [r4, #-4]
   12b1a:	cbnz	r3, 12b30 <quorem+0xb0>
   12b1c:	sub.w	r3, r4, #8
   12b20:	b.n	12b28 <quorem+0xa8>
   12b22:	ldr	r2, [r3, #0]
   12b24:	subs	r3, #4
   12b26:	cbnz	r2, 12b30 <quorem+0xb0>
   12b28:	cmp	fp, r3
   12b2a:	add.w	r8, r8, #4294967295
   12b2e:	bcc.n	12b22 <quorem+0xa2>
   12b30:	str.w	r8, [r0, #16]
   12b34:	mov	r4, r0
   12b36:	bl	13f94 <__mcmp>
   12b3a:	cmp	r0, #0
   12b3c:	blt.n	12b9c <quorem+0x11c>
   12b3e:	add.w	r9, r9, #1
   12b42:	mov	r5, fp
   12b44:	movs	r3, #0
   12b46:	ldr.w	r1, [r7], #4
   12b4a:	ldr	r0, [r5, #0]
   12b4c:	uxth	r2, r1
   12b4e:	subs	r2, r3, r2
   12b50:	lsrs	r1, r1, #16
   12b52:	uxtah	r2, r2, r0
   12b56:	rsb	r3, r1, r0, lsr #16
   12b5a:	add.w	r3, r3, r2, asr #16
   12b5e:	uxth	r1, r2
   12b60:	orr.w	r1, r1, r3, lsl #16
   12b64:	cmp	sl, r7
   12b66:	str.w	r1, [r5], #4
   12b6a:	mov.w	r3, r3, asr #16
   12b6e:	bcs.n	12b46 <quorem+0xc6>
   12b70:	ldr.w	r2, [fp, r8, lsl #2]
   12b74:	add.w	r3, fp, r8, lsl #2
   12b78:	cbnz	r2, 12b9c <quorem+0x11c>
   12b7a:	subs	r2, r3, #4
   12b7c:	cmp	fp, r2
   12b7e:	bcs.n	12b98 <quorem+0x118>
   12b80:	ldr.w	r2, [r3, #-4]
   12b84:	cbnz	r2, 12b98 <quorem+0x118>
   12b86:	subs	r3, #8
   12b88:	b.n	12b90 <quorem+0x110>
   12b8a:	ldr	r2, [r3, #0]
   12b8c:	subs	r3, #4
   12b8e:	cbnz	r2, 12b98 <quorem+0x118>
   12b90:	cmp	fp, r3
   12b92:	add.w	r8, r8, #4294967295
   12b96:	bcc.n	12b8a <quorem+0x10a>
   12b98:	str.w	r8, [r4, #16]
   12b9c:	mov	r0, r9
   12b9e:	add	sp, #12
   12ba0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12ba4:	movs	r0, #0
   12ba6:	bx	lr

00012ba8 <_dtoa_r>:
   12ba8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12bac:	vmov	r6, r7, d0
   12bb0:	sub	sp, #76	; 0x4c
   12bb2:	ldr	r5, [r0, #64]	; 0x40
   12bb4:	str	r1, [sp, #4]
   12bb6:	mov	r4, r0
   12bb8:	mov	r8, r2
   12bba:	str	r3, [sp, #16]
   12bbc:	vmov	sl, s0
   12bc0:	mov	fp, r7
   12bc2:	cbz	r5, 12bd8 <_dtoa_r+0x30>
   12bc4:	ldr	r2, [r0, #68]	; 0x44
   12bc6:	str	r2, [r5, #4]
   12bc8:	movs	r3, #1
   12bca:	lsls	r3, r2
   12bcc:	str	r3, [r5, #8]
   12bce:	mov	r1, r5
   12bd0:	bl	13bd0 <_Bfree>
   12bd4:	movs	r3, #0
   12bd6:	str	r3, [r4, #64]	; 0x40
   12bd8:	cmp.w	fp, #0
   12bdc:	mov	r6, fp
   12bde:	blt.n	12c4a <_dtoa_r+0xa2>
   12be0:	ldr	r2, [sp, #112]	; 0x70
   12be2:	movs	r3, #0
   12be4:	str	r3, [r2, #0]
   12be6:	ldr	r3, [pc, #784]	; (12ef8 <_dtoa_r+0x350>)
   12be8:	mov	r2, r3
   12bea:	ands	r3, r6
   12bec:	cmp	r3, r2
   12bee:	beq.n	12c1c <_dtoa_r+0x74>
   12bf0:	vmov	d7, sl, fp
   12bf4:	vcmp.f64	d7, #0.0
   12bf8:	vmrs	APSR_nzcv, fpscr
   12bfc:	strd	sl, fp, [sp, #8]
   12c00:	bne.n	12c58 <_dtoa_r+0xb0>
   12c02:	ldr	r2, [sp, #16]
   12c04:	movs	r3, #1
   12c06:	str	r3, [r2, #0]
   12c08:	ldr	r3, [sp, #116]	; 0x74
   12c0a:	cmp	r3, #0
   12c0c:	beq.w	12d7e <_dtoa_r+0x1d6>
   12c10:	ldr	r0, [pc, #744]	; (12efc <_dtoa_r+0x354>)
   12c12:	str	r0, [r3, #0]
   12c14:	subs	r0, #1
   12c16:	add	sp, #76	; 0x4c
   12c18:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12c1c:	ldr	r2, [sp, #16]
   12c1e:	movw	r3, #9999	; 0x270f
   12c22:	str	r3, [r2, #0]
   12c24:	cmp.w	sl, #0
   12c28:	beq.w	12d50 <_dtoa_r+0x1a8>
   12c2c:	ldr	r0, [pc, #720]	; (12f00 <_dtoa_r+0x358>)
   12c2e:	ldr	r3, [sp, #116]	; 0x74
   12c30:	cmp	r3, #0
   12c32:	beq.n	12c16 <_dtoa_r+0x6e>
   12c34:	ldrb	r3, [r0, #3]
   12c36:	cmp	r3, #0
   12c38:	beq.w	12d82 <_dtoa_r+0x1da>
   12c3c:	add.w	r3, r0, #8
   12c40:	ldr	r2, [sp, #116]	; 0x74
   12c42:	str	r3, [r2, #0]
   12c44:	add	sp, #76	; 0x4c
   12c46:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12c4a:	ldr	r2, [sp, #112]	; 0x70
   12c4c:	movs	r3, #1
   12c4e:	bic.w	r6, fp, #2147483648	; 0x80000000
   12c52:	str	r3, [r2, #0]
   12c54:	mov	fp, r6
   12c56:	b.n	12be6 <_dtoa_r+0x3e>
   12c58:	add	r1, sp, #68	; 0x44
   12c5a:	add	r2, sp, #64	; 0x40
   12c5c:	vldr	d0, [sp, #8]
   12c60:	mov	r0, r4
   12c62:	bl	140ec <__d2b>
   12c66:	lsrs	r1, r6, #20
   12c68:	str	r0, [sp, #28]
   12c6a:	bne.n	12d62 <_dtoa_r+0x1ba>
   12c6c:	ldr	r0, [sp, #64]	; 0x40
   12c6e:	ldr	r1, [sp, #68]	; 0x44
   12c70:	add	r1, r0
   12c72:	addw	r3, r1, #1074	; 0x432
   12c76:	cmp	r3, #32
   12c78:	ble.w	130fe <_dtoa_r+0x556>
   12c7c:	rsb	r3, r3, #64	; 0x40
   12c80:	addw	r2, r1, #1042	; 0x412
   12c84:	lsls	r6, r3
   12c86:	lsr.w	r3, sl, r2
   12c8a:	orrs	r3, r6
   12c8c:	vmov	s15, r3
   12c90:	vcvt.f64.u32	d7, s15
   12c94:	movs	r5, #1
   12c96:	vmov	r2, r3, d7
   12c9a:	subs	r1, #1
   12c9c:	sub.w	r3, r3, #32505856	; 0x1f00000
   12ca0:	str	r5, [sp, #40]	; 0x28
   12ca2:	vmov	d7, r2, r3
   12ca6:	vmov.f64	d6, #120	; 0x3fc00000  1.5
   12caa:	vldr	d4, [pc, #564]	; 12ee0 <_dtoa_r+0x338>
   12cae:	vsub.f64	d6, d7, d6
   12cb2:	vldr	d7, [pc, #564]	; 12ee8 <_dtoa_r+0x340>
   12cb6:	vldr	d5, [pc, #568]	; 12ef0 <_dtoa_r+0x348>
   12cba:	vfma.f64	d7, d6, d4
   12cbe:	vmov	s13, r1
   12cc2:	vcvt.f64.s32	d6, s13
   12cc6:	vfma.f64	d7, d6, d5
   12cca:	vcvt.s32.f64	s13, d7
   12cce:	vcmpe.f64	d7, #0.0
   12cd2:	vmrs	APSR_nzcv, fpscr
   12cd6:	vstr	s13, [sp, #8]
   12cda:	bmi.w	12f16 <_dtoa_r+0x36e>
   12cde:	ldr	r5, [sp, #8]
   12ce0:	cmp	r5, #22
   12ce2:	bhi.w	12f10 <_dtoa_r+0x368>
   12ce6:	ldr	r3, [pc, #540]	; (12f04 <_dtoa_r+0x35c>)
   12ce8:	add.w	r3, r3, r5, lsl #3
   12cec:	vldr	d7, [r3]
   12cf0:	vmov	d6, sl, fp
   12cf4:	vcmpe.f64	d7, d6
   12cf8:	vmrs	APSR_nzcv, fpscr
   12cfc:	ble.w	1310c <_dtoa_r+0x564>
   12d00:	subs	r3, r5, #1
   12d02:	str	r3, [sp, #8]
   12d04:	movs	r3, #0
   12d06:	str	r3, [sp, #48]	; 0x30
   12d08:	subs	r1, r0, r1
   12d0a:	subs.w	r9, r1, #1
   12d0e:	bmi.w	12f40 <_dtoa_r+0x398>
   12d12:	movs	r3, #0
   12d14:	str	r3, [sp, #24]
   12d16:	ldr	r3, [sp, #8]
   12d18:	cmp	r3, #0
   12d1a:	blt.w	12f2e <_dtoa_r+0x386>
   12d1e:	add	r9, r3
   12d20:	str	r3, [sp, #44]	; 0x2c
   12d22:	movs	r3, #0
   12d24:	str	r3, [sp, #20]
   12d26:	ldr	r3, [sp, #4]
   12d28:	cmp	r3, #9
   12d2a:	bhi.n	12d86 <_dtoa_r+0x1de>
   12d2c:	cmp	r3, #5
   12d2e:	ble.w	137f0 <_dtoa_r+0xc48>
   12d32:	subs	r3, #4
   12d34:	str	r3, [sp, #4]
   12d36:	movs	r3, #0
   12d38:	str	r3, [sp, #56]	; 0x38
   12d3a:	ldr	r3, [sp, #4]
   12d3c:	subs	r3, #2
   12d3e:	cmp	r3, #3
   12d40:	bhi.w	13802 <_dtoa_r+0xc5a>
   12d44:	tbh	[pc, r3, lsl #1]
   12d48:	.word	0x01e502a9
   12d4c:	.word	0x03c802b5
   12d50:	ldr	r3, [pc, #428]	; (12f00 <_dtoa_r+0x358>)
   12d52:	ldr	r2, [pc, #436]	; (12f08 <_dtoa_r+0x360>)
   12d54:	ubfx	r0, r6, #0, #20
   12d58:	cmp	r0, #0
   12d5a:	ite	ne
   12d5c:	movne	r0, r3
   12d5e:	moveq	r0, r2
   12d60:	b.n	12c2e <_dtoa_r+0x86>
   12d62:	ldrd	r2, r3, [sp, #8]
   12d66:	ubfx	r0, r3, #0, #20
   12d6a:	orr.w	r3, r0, #1069547520	; 0x3fc00000
   12d6e:	movs	r5, #0
   12d70:	subw	r1, r1, #1023	; 0x3ff
   12d74:	orr.w	r3, r3, #3145728	; 0x300000
   12d78:	ldr	r0, [sp, #64]	; 0x40
   12d7a:	str	r5, [sp, #40]	; 0x28
   12d7c:	b.n	12ca2 <_dtoa_r+0xfa>
   12d7e:	ldr	r0, [pc, #396]	; (12f0c <_dtoa_r+0x364>)
   12d80:	b.n	12c16 <_dtoa_r+0x6e>
   12d82:	adds	r3, r0, #3
   12d84:	b.n	12c40 <_dtoa_r+0x98>
   12d86:	movs	r1, #0
   12d88:	str	r1, [r4, #68]	; 0x44
   12d8a:	mov	r0, r4
   12d8c:	mov	r8, r1
   12d8e:	str	r1, [sp, #4]
   12d90:	bl	13b84 <_Balloc>
   12d94:	mov.w	r7, #4294967295
   12d98:	movs	r3, #1
   12d9a:	str	r0, [sp, #32]
   12d9c:	str	r0, [r4, #64]	; 0x40
   12d9e:	str	r7, [sp, #52]	; 0x34
   12da0:	str	r3, [sp, #36]	; 0x24
   12da2:	ldr	r3, [sp, #68]	; 0x44
   12da4:	cmp	r3, #0
   12da6:	blt.n	12e9e <_dtoa_r+0x2f6>
   12da8:	ldr	r2, [sp, #8]
   12daa:	cmp	r2, #14
   12dac:	bgt.n	12e9e <_dtoa_r+0x2f6>
   12dae:	ldr	r3, [pc, #340]	; (12f04 <_dtoa_r+0x35c>)
   12db0:	cmp.w	r8, #0
   12db4:	add.w	r3, r3, r2, lsl #3
   12db8:	vldr	d4, [r3]
   12dbc:	blt.w	132c8 <_dtoa_r+0x720>
   12dc0:	vneg.f64	d2, d4
   12dc4:	vmov	d7, sl, fp
   12dc8:	vdiv.f64	d6, d7, d4
   12dcc:	vcvt.s32.f64	s12, d6
   12dd0:	ldr	r2, [sp, #32]
   12dd2:	vmov	r3, s12
   12dd6:	cmp	r7, #1
   12dd8:	add.w	r3, r3, #48	; 0x30
   12ddc:	vcvt.f64.s32	d5, s12
   12de0:	add.w	fp, r2, #1
   12de4:	strb	r3, [r2, #0]
   12de6:	vfma.f64	d7, d2, d5
   12dea:	beq.n	12e32 <_dtoa_r+0x28a>
   12dec:	vmov.f64	d3, #36	; 0x41200000  10.0
   12df0:	vmul.f64	d7, d7, d3
   12df4:	vcmp.f64	d7, #0.0
   12df8:	vmrs	APSR_nzcv, fpscr
   12dfc:	beq.n	12e74 <_dtoa_r+0x2cc>
   12dfe:	ldr	r2, [sp, #32]
   12e00:	b.n	12e10 <_dtoa_r+0x268>
   12e02:	vmul.f64	d7, d7, d3
   12e06:	vcmp.f64	d7, #0.0
   12e0a:	vmrs	APSR_nzcv, fpscr
   12e0e:	beq.n	12e74 <_dtoa_r+0x2cc>
   12e10:	vdiv.f64	d6, d7, d4
   12e14:	vcvt.s32.f64	s12, d6
   12e18:	vmov	r3, s12
   12e1c:	adds	r3, #48	; 0x30
   12e1e:	strb.w	r3, [fp], #1
   12e22:	rsb	r3, r2, fp
   12e26:	cmp	r3, r7
   12e28:	vcvt.f64.s32	d5, s12
   12e2c:	vfma.f64	d7, d2, d5
   12e30:	bne.n	12e02 <_dtoa_r+0x25a>
   12e32:	vadd.f64	d7, d7, d7
   12e36:	vcmpe.f64	d4, d7
   12e3a:	vmrs	APSR_nzcv, fpscr
   12e3e:	bmi.n	12e52 <_dtoa_r+0x2aa>
   12e40:	vcmp.f64	d4, d7
   12e44:	vmrs	APSR_nzcv, fpscr
   12e48:	bne.n	12e74 <_dtoa_r+0x2cc>
   12e4a:	vmov	r3, s12
   12e4e:	lsls	r3, r3, #31
   12e50:	bpl.n	12e74 <_dtoa_r+0x2cc>
   12e52:	ldrb.w	r0, [fp, #-1]
   12e56:	ldr	r2, [sp, #32]
   12e58:	add.w	r3, fp, #4294967295
   12e5c:	b.n	12e68 <_dtoa_r+0x2c0>
   12e5e:	cmp	r2, r3
   12e60:	beq.w	1362e <_dtoa_r+0xa86>
   12e64:	ldrb.w	r0, [r3, #-1]!
   12e68:	cmp	r0, #57	; 0x39
   12e6a:	add.w	fp, r3, #1
   12e6e:	beq.n	12e5e <_dtoa_r+0x2b6>
   12e70:	adds	r0, #1
   12e72:	strb	r0, [r3, #0]
   12e74:	ldr	r1, [sp, #28]
   12e76:	mov	r0, r4
   12e78:	bl	13bd0 <_Bfree>
   12e7c:	movs	r2, #0
   12e7e:	ldr	r3, [sp, #8]
   12e80:	strb.w	r2, [fp]
   12e84:	ldr	r2, [sp, #16]
   12e86:	adds	r3, #1
   12e88:	str	r3, [r2, #0]
   12e8a:	ldr	r3, [sp, #116]	; 0x74
   12e8c:	cmp	r3, #0
   12e8e:	beq.w	1355e <_dtoa_r+0x9b6>
   12e92:	ldr	r0, [sp, #32]
   12e94:	str.w	fp, [r3]
   12e98:	add	sp, #76	; 0x4c
   12e9a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12e9e:	ldr	r2, [sp, #36]	; 0x24
   12ea0:	cmp	r2, #0
   12ea2:	beq.n	12f4c <_dtoa_r+0x3a4>
   12ea4:	ldr	r2, [sp, #4]
   12ea6:	cmp	r2, #1
   12ea8:	ble.w	13308 <_dtoa_r+0x760>
   12eac:	ldr	r1, [sp, #20]
   12eae:	subs	r2, r7, #1
   12eb0:	cmp	r1, r2
   12eb2:	blt.w	13564 <_dtoa_r+0x9bc>
   12eb6:	subs	r3, r1, r2
   12eb8:	str	r3, [sp, #56]	; 0x38
   12eba:	cmp	r7, #0
   12ebc:	ldr	r3, [sp, #24]
   12ebe:	blt.w	1370a <_dtoa_r+0xb62>
   12ec2:	str	r3, [sp, #40]	; 0x28
   12ec4:	mov	r3, r7
   12ec6:	ldr	r2, [sp, #24]
   12ec8:	movs	r1, #1
   12eca:	add	r2, r3
   12ecc:	mov	r0, r4
   12ece:	str	r2, [sp, #24]
   12ed0:	add	r9, r3
   12ed2:	bl	13d00 <__i2b>
   12ed6:	mov	r6, r0
   12ed8:	b.n	12f56 <_dtoa_r+0x3ae>
   12eda:	nop
   12edc:	nop.w
   12ee0:	.word	0x636f4361
   12ee4:	.word	0x3fd287a7
   12ee8:	.word	0x8b60c8b3
   12eec:	.word	0x3fc68a28
   12ef0:	.word	0x509f79fb
   12ef4:	.word	0x3fd34413
   12ef8:	.word	0x7ff00000
   12efc:	.word	0x20000589
   12f00:	.word	0x20000a38
   12f04:	.word	0x20000a40
   12f08:	.word	0x20000a2c
   12f0c:	.word	0x20000588
   12f10:	movs	r3, #1
   12f12:	str	r3, [sp, #48]	; 0x30
   12f14:	b.n	12d08 <_dtoa_r+0x160>
   12f16:	vcvt.f64.s32	d6, s13
   12f1a:	vcmp.f64	d7, d6
   12f1e:	vmrs	APSR_nzcv, fpscr
   12f22:	beq.w	12cde <_dtoa_r+0x136>
   12f26:	ldr	r3, [sp, #8]
   12f28:	subs	r3, #1
   12f2a:	str	r3, [sp, #8]
   12f2c:	b.n	12cde <_dtoa_r+0x136>
   12f2e:	ldr	r2, [sp, #24]
   12f30:	ldr	r3, [sp, #8]
   12f32:	subs	r2, r2, r3
   12f34:	negs	r3, r3
   12f36:	str	r3, [sp, #20]
   12f38:	movs	r3, #0
   12f3a:	str	r2, [sp, #24]
   12f3c:	str	r3, [sp, #44]	; 0x2c
   12f3e:	b.n	12d26 <_dtoa_r+0x17e>
   12f40:	rsb	r3, r9, #0
   12f44:	str	r3, [sp, #24]
   12f46:	mov.w	r9, #0
   12f4a:	b.n	12d16 <_dtoa_r+0x16e>
   12f4c:	ldr	r3, [sp, #20]
   12f4e:	str	r3, [sp, #56]	; 0x38
   12f50:	ldr	r6, [sp, #36]	; 0x24
   12f52:	ldr	r3, [sp, #24]
   12f54:	str	r3, [sp, #40]	; 0x28
   12f56:	ldr	r1, [sp, #40]	; 0x28
   12f58:	mov	r3, r1
   12f5a:	cbz	r1, 12f76 <_dtoa_r+0x3ce>
   12f5c:	cmp.w	r9, #0
   12f60:	ble.n	12f76 <_dtoa_r+0x3ce>
   12f62:	cmp	r1, r9
   12f64:	ldr	r2, [sp, #24]
   12f66:	it	ge
   12f68:	movge	r3, r9
   12f6a:	subs	r2, r2, r3
   12f6c:	str	r2, [sp, #24]
   12f6e:	subs	r2, r1, r3
   12f70:	str	r2, [sp, #40]	; 0x28
   12f72:	rsb	r9, r3, r9
   12f76:	ldr	r3, [sp, #20]
   12f78:	cmp	r3, #0
   12f7a:	ble.w	1347e <_dtoa_r+0x8d6>
   12f7e:	ldr	r2, [sp, #36]	; 0x24
   12f80:	cmp	r2, #0
   12f82:	beq.w	132ba <_dtoa_r+0x712>
   12f86:	ldr	r2, [sp, #56]	; 0x38
   12f88:	cmp	r2, #0
   12f8a:	beq.w	132ba <_dtoa_r+0x712>
   12f8e:	mov	r1, r6
   12f90:	mov	r0, r4
   12f92:	bl	13e44 <__pow5mult>
   12f96:	ldr	r2, [sp, #28]
   12f98:	mov	r1, r0
   12f9a:	mov	r6, r0
   12f9c:	mov	r0, r4
   12f9e:	bl	13d14 <__multiply>
   12fa2:	ldr	r1, [sp, #28]
   12fa4:	mov	r5, r0
   12fa6:	mov	r0, r4
   12fa8:	bl	13bd0 <_Bfree>
   12fac:	ldr	r3, [sp, #20]
   12fae:	ldr	r2, [sp, #56]	; 0x38
   12fb0:	subs	r3, r3, r2
   12fb2:	str	r3, [sp, #20]
   12fb4:	bne.w	132b8 <_dtoa_r+0x710>
   12fb8:	movs	r1, #1
   12fba:	mov	r0, r4
   12fbc:	bl	13d00 <__i2b>
   12fc0:	ldr	r3, [sp, #44]	; 0x2c
   12fc2:	str	r0, [sp, #20]
   12fc4:	cmp	r3, #0
   12fc6:	beq.w	13322 <_dtoa_r+0x77a>
   12fca:	mov	r1, r0
   12fcc:	mov	r2, r3
   12fce:	mov	r0, r4
   12fd0:	bl	13e44 <__pow5mult>
   12fd4:	ldr	r3, [sp, #4]
   12fd6:	str	r0, [sp, #20]
   12fd8:	cmp	r3, #1
   12fda:	ble.w	134de <_dtoa_r+0x936>
   12fde:	movs	r3, #0
   12fe0:	str	r3, [sp, #28]
   12fe2:	ldr	r2, [sp, #20]
   12fe4:	ldr	r3, [r2, #16]
   12fe6:	add.w	r3, r2, r3, lsl #2
   12fea:	ldr	r0, [r3, #16]
   12fec:	bl	13c64 <__hi0bits>
   12ff0:	rsb	r0, r0, #32
   12ff4:	add	r0, r9
   12ff6:	ands.w	r0, r0, #31
   12ffa:	beq.w	1331e <_dtoa_r+0x776>
   12ffe:	rsb	r3, r0, #32
   13002:	cmp	r3, #4
   13004:	ble.w	137f8 <_dtoa_r+0xc50>
   13008:	rsb	r0, r0, #28
   1300c:	ldr	r3, [sp, #24]
   1300e:	add	r3, r0
   13010:	str	r3, [sp, #24]
   13012:	ldr	r3, [sp, #40]	; 0x28
   13014:	add	r3, r0
   13016:	str	r3, [sp, #40]	; 0x28
   13018:	add	r9, r0
   1301a:	ldr	r3, [sp, #24]
   1301c:	cmp	r3, #0
   1301e:	ble.n	1302c <_dtoa_r+0x484>
   13020:	mov	r1, r5
   13022:	mov	r2, r3
   13024:	mov	r0, r4
   13026:	bl	13ee4 <__lshift>
   1302a:	mov	r5, r0
   1302c:	cmp.w	r9, #0
   13030:	ble.n	1303e <_dtoa_r+0x496>
   13032:	mov	r2, r9
   13034:	ldr	r1, [sp, #20]
   13036:	mov	r0, r4
   13038:	bl	13ee4 <__lshift>
   1303c:	str	r0, [sp, #20]
   1303e:	ldr	r3, [sp, #48]	; 0x30
   13040:	cmp	r3, #0
   13042:	bne.w	13448 <_dtoa_r+0x8a0>
   13046:	cmp	r7, #0
   13048:	ble.w	1348c <_dtoa_r+0x8e4>
   1304c:	ldr	r3, [sp, #36]	; 0x24
   1304e:	cmp	r3, #0
   13050:	bne.w	1334a <_dtoa_r+0x7a2>
   13054:	ldr.w	fp, [sp, #32]
   13058:	ldr.w	sl, [sp, #20]
   1305c:	mov	r8, fp
   1305e:	b.n	13066 <_dtoa_r+0x4be>
   13060:	bl	13be4 <__multadd>
   13064:	mov	r5, r0
   13066:	mov	r1, sl
   13068:	mov	r0, r5
   1306a:	bl	12a80 <quorem>
   1306e:	add.w	r9, r0, #48	; 0x30
   13072:	strb.w	r9, [r8], #1
   13076:	rsb	r3, fp, r8
   1307a:	cmp	r3, r7
   1307c:	mov.w	r2, #10
   13080:	mov.w	r3, #0
   13084:	mov	r1, r5
   13086:	mov	r0, r4
   13088:	blt.n	13060 <_dtoa_r+0x4b8>
   1308a:	ldr	r3, [sp, #32]
   1308c:	cmp	r7, #1
   1308e:	ite	ge
   13090:	addge	r3, r3, r7
   13092:	addlt	r3, #1
   13094:	mov	fp, r3
   13096:	mov.w	sl, #0
   1309a:	mov	r1, r5
   1309c:	movs	r2, #1
   1309e:	mov	r0, r4
   130a0:	bl	13ee4 <__lshift>
   130a4:	ldr	r1, [sp, #20]
   130a6:	str	r0, [sp, #28]
   130a8:	bl	13f94 <__mcmp>
   130ac:	cmp	r0, #0
   130ae:	ble.w	135ca <_dtoa_r+0xa22>
   130b2:	ldrb.w	r2, [fp, #-1]
   130b6:	ldr	r1, [sp, #32]
   130b8:	add.w	r3, fp, #4294967295
   130bc:	b.n	130c8 <_dtoa_r+0x520>
   130be:	cmp	r3, r1
   130c0:	beq.w	134ca <_dtoa_r+0x922>
   130c4:	ldrb.w	r2, [r3, #-1]!
   130c8:	cmp	r2, #57	; 0x39
   130ca:	add.w	fp, r3, #1
   130ce:	beq.n	130be <_dtoa_r+0x516>
   130d0:	adds	r2, #1
   130d2:	strb	r2, [r3, #0]
   130d4:	ldr	r1, [sp, #20]
   130d6:	mov	r0, r4
   130d8:	bl	13bd0 <_Bfree>
   130dc:	cmp	r6, #0
   130de:	beq.w	12e74 <_dtoa_r+0x2cc>
   130e2:	cmp.w	sl, #0
   130e6:	beq.n	130f4 <_dtoa_r+0x54c>
   130e8:	cmp	sl, r6
   130ea:	beq.n	130f4 <_dtoa_r+0x54c>
   130ec:	mov	r1, sl
   130ee:	mov	r0, r4
   130f0:	bl	13bd0 <_Bfree>
   130f4:	mov	r1, r6
   130f6:	mov	r0, r4
   130f8:	bl	13bd0 <_Bfree>
   130fc:	b.n	12e74 <_dtoa_r+0x2cc>
   130fe:	rsb	r3, r3, #32
   13102:	lsl.w	r3, sl, r3
   13106:	vmov	s15, r3
   1310a:	b.n	12c90 <_dtoa_r+0xe8>
   1310c:	movs	r3, #0
   1310e:	str	r3, [sp, #48]	; 0x30
   13110:	b.n	12d08 <_dtoa_r+0x160>
   13112:	movs	r3, #0
   13114:	str	r3, [sp, #36]	; 0x24
   13116:	ldr	r3, [sp, #8]
   13118:	add	r3, r8
   1311a:	adds	r7, r3, #1
   1311c:	cmp	r7, #0
   1311e:	str	r3, [sp, #52]	; 0x34
   13120:	ble.w	1357e <_dtoa_r+0x9d6>
   13124:	mov	r6, r7
   13126:	mov	r5, r7
   13128:	movs	r1, #0
   1312a:	cmp	r6, #23
   1312c:	str	r1, [r4, #68]	; 0x44
   1312e:	bls.n	13146 <_dtoa_r+0x59e>
   13130:	movs	r2, #1
   13132:	movs	r3, #4
   13134:	lsls	r3, r3, #1
   13136:	add.w	r0, r3, #20
   1313a:	cmp	r0, r6
   1313c:	mov	r1, r2
   1313e:	add.w	r2, r2, #1
   13142:	bls.n	13134 <_dtoa_r+0x58c>
   13144:	str	r1, [r4, #68]	; 0x44
   13146:	mov	r0, r4
   13148:	bl	13b84 <_Balloc>
   1314c:	cmp	r5, #14
   1314e:	str	r0, [sp, #32]
   13150:	str	r0, [r4, #64]	; 0x40
   13152:	bhi.w	12da2 <_dtoa_r+0x1fa>
   13156:	ldr	r3, [sp, #56]	; 0x38
   13158:	cmp	r3, #0
   1315a:	beq.w	12da2 <_dtoa_r+0x1fa>
   1315e:	ldr	r1, [sp, #8]
   13160:	cmp	r1, #0
   13162:	strd	sl, fp, [sp, #56]	; 0x38
   13166:	ble.w	135ec <_dtoa_r+0xa44>
   1316a:	ldr	r3, [pc, #792]	; (13484 <_dtoa_r+0x8dc>)
   1316c:	and.w	r2, r1, #15
   13170:	add.w	r2, r3, r2, lsl #3
   13174:	asrs	r3, r1, #4
   13176:	lsls	r6, r3, #27
   13178:	vldr	d6, [r2]
   1317c:	bpl.w	13576 <_dtoa_r+0x9ce>
   13180:	ldr	r2, [pc, #772]	; (13488 <_dtoa_r+0x8e0>)
   13182:	vldr	d7, [r2, #32]
   13186:	vmov	d4, sl, fp
   1318a:	and.w	r3, r3, #15
   1318e:	movs	r1, #3
   13190:	vdiv.f64	d5, d4, d7
   13194:	cbz	r3, 131ae <_dtoa_r+0x606>
   13196:	ldr	r2, [pc, #752]	; (13488 <_dtoa_r+0x8e0>)
   13198:	lsls	r5, r3, #31
   1319a:	bpl.n	131a6 <_dtoa_r+0x5fe>
   1319c:	vldr	d7, [r2]
   131a0:	adds	r1, #1
   131a2:	vmul.f64	d6, d6, d7
   131a6:	asrs	r3, r3, #1
   131a8:	add.w	r2, r2, #8
   131ac:	bne.n	13198 <_dtoa_r+0x5f0>
   131ae:	vdiv.f64	d4, d5, d6
   131b2:	ldr	r3, [sp, #48]	; 0x30
   131b4:	cbz	r3, 131c6 <_dtoa_r+0x61e>
   131b6:	vmov.f64	d7, #112	; 0x3f800000  1.0
   131ba:	vcmpe.f64	d4, d7
   131be:	vmrs	APSR_nzcv, fpscr
   131c2:	bmi.w	13734 <_dtoa_r+0xb8c>
   131c6:	vmov	s15, r1
   131ca:	vcvt.f64.s32	d6, s15
   131ce:	vmov.f64	d7, #28	; 0x40e00000  7.0
   131d2:	vfma.f64	d7, d6, d4
   131d6:	vmov	r2, r3, d7
   131da:	sub.w	r3, r3, #54525952	; 0x3400000
   131de:	cmp	r7, #0
   131e0:	beq.w	13530 <_dtoa_r+0x988>
   131e4:	ldr	r6, [sp, #8]
   131e6:	mov	r1, r7
   131e8:	ldr	r0, [sp, #36]	; 0x24
   131ea:	cmp	r0, #0
   131ec:	beq.w	1368a <_dtoa_r+0xae2>
   131f0:	vmov.f64	d3, #96	; 0x3f000000  0.5
   131f4:	ldr	r0, [pc, #652]	; (13484 <_dtoa_r+0x8dc>)
   131f6:	ldr	r5, [sp, #32]
   131f8:	add.w	r0, r0, r1, lsl #3
   131fc:	vldr	d6, [r0, #-8]
   13200:	vcvt.s32.f64	s14, d4
   13204:	vdiv.f64	d5, d3, d6
   13208:	vmov	r0, s14
   1320c:	vmov	d6, r2, r3
   13210:	adds	r0, #48	; 0x30
   13212:	uxtb	r0, r0
   13214:	vsub.f64	d5, d5, d6
   13218:	vcvt.f64.s32	d7, s14
   1321c:	vsub.f64	d7, d4, d7
   13220:	vcmpe.f64	d5, d7
   13224:	vmrs	APSR_nzcv, fpscr
   13228:	strb	r0, [r5, #0]
   1322a:	add.w	fp, r5, #1
   1322e:	bgt.n	13296 <_dtoa_r+0x6ee>
   13230:	vmov.f64	d3, #112	; 0x3f800000  1.0
   13234:	vsub.f64	d6, d3, d7
   13238:	vcmpe.f64	d5, d6
   1323c:	vmrs	APSR_nzcv, fpscr
   13240:	bgt.w	137a0 <_dtoa_r+0xbf8>
   13244:	cmp	r1, #1
   13246:	ble.w	135e4 <_dtoa_r+0xa3c>
   1324a:	vmov.f64	d4, #36	; 0x41200000  10.0
   1324e:	ldr	r3, [sp, #32]
   13250:	add	r1, r3
   13252:	b.n	1326a <_dtoa_r+0x6c2>
   13254:	vsub.f64	d6, d3, d7
   13258:	vcmpe.f64	d6, d5
   1325c:	vmrs	APSR_nzcv, fpscr
   13260:	bmi.w	137a0 <_dtoa_r+0xbf8>
   13264:	cmp	fp, r1
   13266:	beq.w	135e4 <_dtoa_r+0xa3c>
   1326a:	vmul.f64	d7, d7, d4
   1326e:	vmul.f64	d5, d5, d4
   13272:	vcvt.s32.f64	s12, d7
   13276:	vmov	r3, s12
   1327a:	add.w	r0, r3, #48	; 0x30
   1327e:	uxtb	r0, r0
   13280:	vcvt.f64.s32	d6, s12
   13284:	vsub.f64	d7, d7, d6
   13288:	vcmpe.f64	d7, d5
   1328c:	vmrs	APSR_nzcv, fpscr
   13290:	strb.w	r0, [fp], #1
   13294:	bpl.n	13254 <_dtoa_r+0x6ac>
   13296:	str	r6, [sp, #8]
   13298:	b.n	12e74 <_dtoa_r+0x2cc>
   1329a:	movs	r3, #0
   1329c:	str	r3, [sp, #36]	; 0x24
   1329e:	cmp.w	r8, #0
   132a2:	ble.w	13586 <_dtoa_r+0x9de>
   132a6:	mov	r6, r8
   132a8:	mov	r5, r8
   132aa:	str.w	r8, [sp, #52]	; 0x34
   132ae:	mov	r7, r8
   132b0:	b.n	13128 <_dtoa_r+0x580>
   132b2:	movs	r3, #1
   132b4:	str	r3, [sp, #36]	; 0x24
   132b6:	b.n	1329e <_dtoa_r+0x6f6>
   132b8:	str	r5, [sp, #28]
   132ba:	ldr	r2, [sp, #20]
   132bc:	ldr	r1, [sp, #28]
   132be:	mov	r0, r4
   132c0:	bl	13e44 <__pow5mult>
   132c4:	mov	r5, r0
   132c6:	b.n	12fb8 <_dtoa_r+0x410>
   132c8:	cmp	r7, #0
   132ca:	bgt.w	12dc0 <_dtoa_r+0x218>
   132ce:	bne.w	13556 <_dtoa_r+0x9ae>
   132d2:	vmov.f64	d7, #20	; 0x40a00000  5.0
   132d6:	vmul.f64	d4, d4, d7
   132da:	vmov	d7, sl, fp
   132de:	vcmpe.f64	d4, d7
   132e2:	vmrs	APSR_nzcv, fpscr
   132e6:	mov	r6, r7
   132e8:	str	r7, [sp, #20]
   132ea:	blt.w	134b8 <_dtoa_r+0x910>
   132ee:	mvn.w	r3, r8
   132f2:	ldr.w	fp, [sp, #32]
   132f6:	str	r3, [sp, #8]
   132f8:	ldr	r1, [sp, #20]
   132fa:	mov	r0, r4
   132fc:	bl	13bd0 <_Bfree>
   13300:	cmp	r6, #0
   13302:	beq.w	12e74 <_dtoa_r+0x2cc>
   13306:	b.n	130f4 <_dtoa_r+0x54c>
   13308:	ldr	r2, [sp, #40]	; 0x28
   1330a:	cmp	r2, #0
   1330c:	beq.w	13714 <_dtoa_r+0xb6c>
   13310:	ldr	r2, [sp, #20]
   13312:	str	r2, [sp, #56]	; 0x38
   13314:	ldr	r2, [sp, #24]
   13316:	str	r2, [sp, #40]	; 0x28
   13318:	addw	r3, r3, #1075	; 0x433
   1331c:	b.n	12ec6 <_dtoa_r+0x31e>
   1331e:	movs	r0, #28
   13320:	b.n	1300c <_dtoa_r+0x464>
   13322:	ldr	r3, [sp, #4]
   13324:	cmp	r3, #1
   13326:	ble.w	137aa <_dtoa_r+0xc02>
   1332a:	ldr	r3, [sp, #44]	; 0x2c
   1332c:	str	r3, [sp, #28]
   1332e:	movs	r0, #1
   13330:	b.n	12ff4 <_dtoa_r+0x44c>
   13332:	mov	r1, r6
   13334:	movs	r3, #0
   13336:	movs	r2, #10
   13338:	mov	r0, r4
   1333a:	bl	13be4 <__multadd>
   1333e:	ldr	r3, [sp, #52]	; 0x34
   13340:	cmp	r3, #0
   13342:	mov	r6, r0
   13344:	ble.w	137e2 <_dtoa_r+0xc3a>
   13348:	mov	r7, r3
   1334a:	ldr	r3, [sp, #40]	; 0x28
   1334c:	cmp	r3, #0
   1334e:	ble.n	1335c <_dtoa_r+0x7b4>
   13350:	mov	r1, r6
   13352:	mov	r2, r3
   13354:	mov	r0, r4
   13356:	bl	13ee4 <__lshift>
   1335a:	mov	r6, r0
   1335c:	ldr	r3, [sp, #28]
   1335e:	cmp	r3, #0
   13360:	bne.w	13640 <_dtoa_r+0xa98>
   13364:	mov	r8, r6
   13366:	ldr	r3, [sp, #32]
   13368:	subs	r7, #1
   1336a:	adds	r2, r3, r7
   1336c:	str	r2, [sp, #36]	; 0x24
   1336e:	and.w	r2, sl, #1
   13372:	str	r2, [sp, #40]	; 0x28
   13374:	mov	r7, r3
   13376:	ldr.w	fp, [sp, #20]
   1337a:	mov	r0, r5
   1337c:	mov	r1, fp
   1337e:	bl	12a80 <quorem>
   13382:	mov	r1, r6
   13384:	mov	sl, r0
   13386:	mov	r0, r5
   13388:	bl	13f94 <__mcmp>
   1338c:	mov	r2, r8
   1338e:	mov	r1, fp
   13390:	mov	r9, r0
   13392:	mov	r0, r4
   13394:	bl	13fd8 <__mdiff>
   13398:	ldr	r3, [r0, #12]
   1339a:	mov	fp, r0
   1339c:	add.w	r2, sl, #48	; 0x30
   133a0:	cmp	r3, #0
   133a2:	bne.n	13438 <_dtoa_r+0x890>
   133a4:	mov	r1, r0
   133a6:	mov	r0, r5
   133a8:	str	r2, [sp, #28]
   133aa:	bl	13f94 <__mcmp>
   133ae:	mov	r1, fp
   133b0:	str	r0, [sp, #24]
   133b2:	mov	r0, r4
   133b4:	bl	13bd0 <_Bfree>
   133b8:	ldr	r3, [sp, #24]
   133ba:	ldr	r2, [sp, #28]
   133bc:	cbnz	r3, 133ca <_dtoa_r+0x822>
   133be:	ldr	r1, [sp, #4]
   133c0:	cbnz	r1, 133ca <_dtoa_r+0x822>
   133c2:	ldr	r1, [sp, #40]	; 0x28
   133c4:	cmp	r1, #0
   133c6:	beq.w	137b4 <_dtoa_r+0xc0c>
   133ca:	cmp.w	r9, #0
   133ce:	blt.w	13590 <_dtoa_r+0x9e8>
   133d2:	bne.n	133e0 <_dtoa_r+0x838>
   133d4:	ldr	r1, [sp, #4]
   133d6:	cbnz	r1, 133e0 <_dtoa_r+0x838>
   133d8:	ldr	r1, [sp, #40]	; 0x28
   133da:	cmp	r1, #0
   133dc:	beq.w	13590 <_dtoa_r+0x9e8>
   133e0:	cmp	r3, #0
   133e2:	bgt.w	13668 <_dtoa_r+0xac0>
   133e6:	ldr	r3, [sp, #36]	; 0x24
   133e8:	strb	r2, [r7, #0]
   133ea:	add.w	r9, r7, #1
   133ee:	cmp	r7, r3
   133f0:	mov	fp, r9
   133f2:	beq.w	13682 <_dtoa_r+0xada>
   133f6:	mov	r1, r5
   133f8:	movs	r3, #0
   133fa:	movs	r2, #10
   133fc:	mov	r0, r4
   133fe:	bl	13be4 <__multadd>
   13402:	cmp	r6, r8
   13404:	mov	r5, r0
   13406:	mov	r1, r6
   13408:	mov.w	r3, #0
   1340c:	mov.w	r2, #10
   13410:	mov	r0, r4
   13412:	beq.n	1342c <_dtoa_r+0x884>
   13414:	bl	13be4 <__multadd>
   13418:	mov	r1, r8
   1341a:	mov	r6, r0
   1341c:	movs	r3, #0
   1341e:	movs	r2, #10
   13420:	mov	r0, r4
   13422:	bl	13be4 <__multadd>
   13426:	mov	r7, r9
   13428:	mov	r8, r0
   1342a:	b.n	13376 <_dtoa_r+0x7ce>
   1342c:	bl	13be4 <__multadd>
   13430:	mov	r7, r9
   13432:	mov	r6, r0
   13434:	mov	r8, r0
   13436:	b.n	13376 <_dtoa_r+0x7ce>
   13438:	mov	r1, r0
   1343a:	mov	r0, r4
   1343c:	str	r2, [sp, #24]
   1343e:	bl	13bd0 <_Bfree>
   13442:	movs	r3, #1
   13444:	ldr	r2, [sp, #24]
   13446:	b.n	133ca <_dtoa_r+0x822>
   13448:	ldr	r1, [sp, #20]
   1344a:	mov	r0, r5
   1344c:	bl	13f94 <__mcmp>
   13450:	cmp	r0, #0
   13452:	bge.w	13046 <_dtoa_r+0x49e>
   13456:	mov	r1, r5
   13458:	ldr	r5, [sp, #8]
   1345a:	movs	r3, #0
   1345c:	subs	r5, #1
   1345e:	movs	r2, #10
   13460:	mov	r0, r4
   13462:	str	r5, [sp, #8]
   13464:	bl	13be4 <__multadd>
   13468:	ldr	r3, [sp, #36]	; 0x24
   1346a:	mov	r5, r0
   1346c:	cmp	r3, #0
   1346e:	bne.w	13332 <_dtoa_r+0x78a>
   13472:	ldr	r3, [sp, #52]	; 0x34
   13474:	cmp	r3, #0
   13476:	ble.w	137d4 <_dtoa_r+0xc2c>
   1347a:	mov	r7, r3
   1347c:	b.n	13054 <_dtoa_r+0x4ac>
   1347e:	ldr	r5, [sp, #28]
   13480:	b.n	12fb8 <_dtoa_r+0x410>
   13482:	nop
   13484:	.word	0x20000a40
   13488:	.word	0x20000b08
   1348c:	ldr	r3, [sp, #4]
   1348e:	cmp	r3, #2
   13490:	ble.w	1304c <_dtoa_r+0x4a4>
   13494:	cmp	r7, #0
   13496:	bne.w	1376c <_dtoa_r+0xbc4>
   1349a:	mov	r3, r7
   1349c:	ldr	r1, [sp, #20]
   1349e:	movs	r2, #5
   134a0:	mov	r0, r4
   134a2:	bl	13be4 <__multadd>
   134a6:	mov	r1, r0
   134a8:	str	r0, [sp, #20]
   134aa:	mov	r0, r5
   134ac:	bl	13f94 <__mcmp>
   134b0:	cmp	r0, #0
   134b2:	str	r5, [sp, #28]
   134b4:	ble.w	132ee <_dtoa_r+0x746>
   134b8:	ldr	r2, [sp, #8]
   134ba:	ldr	r1, [sp, #32]
   134bc:	movs	r3, #49	; 0x31
   134be:	adds	r2, #1
   134c0:	str	r2, [sp, #8]
   134c2:	strb	r3, [r1, #0]
   134c4:	add.w	fp, r1, #1
   134c8:	b.n	132f8 <_dtoa_r+0x750>
   134ca:	ldr	r2, [sp, #8]
   134cc:	adds	r2, #1
   134ce:	str	r2, [sp, #8]
   134d0:	ldr	r2, [sp, #32]
   134d2:	movs	r3, #49	; 0x31
   134d4:	strb	r3, [r2, #0]
   134d6:	b.n	130d4 <_dtoa_r+0x52c>
   134d8:	movs	r3, #1
   134da:	str	r3, [sp, #36]	; 0x24
   134dc:	b.n	13116 <_dtoa_r+0x56e>
   134de:	cmp.w	sl, #0
   134e2:	bne.w	12fde <_dtoa_r+0x436>
   134e6:	ubfx	r3, fp, #0, #20
   134ea:	cmp	r3, #0
   134ec:	bne.w	13726 <_dtoa_r+0xb7e>
   134f0:	bic.w	r3, fp, #2147483648	; 0x80000000
   134f4:	lsrs	r3, r3, #20
   134f6:	lsls	r3, r3, #20
   134f8:	cmp	r3, #0
   134fa:	beq.w	137a6 <_dtoa_r+0xbfe>
   134fe:	ldr	r3, [sp, #24]
   13500:	adds	r3, #1
   13502:	str	r3, [sp, #24]
   13504:	movs	r3, #1
   13506:	add.w	r9, r9, #1
   1350a:	str	r3, [sp, #28]
   1350c:	ldr	r3, [sp, #44]	; 0x2c
   1350e:	movs	r0, #1
   13510:	cmp	r3, #0
   13512:	beq.w	12ff4 <_dtoa_r+0x44c>
   13516:	b.n	12fe2 <_dtoa_r+0x43a>
   13518:	vmov	s15, r1
   1351c:	vcvt.f64.s32	d6, s15
   13520:	vmov.f64	d7, #28	; 0x40e00000  7.0
   13524:	vfma.f64	d7, d4, d6
   13528:	vmov	r2, r3, d7
   1352c:	sub.w	r3, r3, #54525952	; 0x3400000
   13530:	vmov	d6, r2, r3
   13534:	vmov.f64	d7, #20	; 0x40a00000  5.0
   13538:	vsub.f64	d7, d4, d7
   1353c:	vcmpe.f64	d7, d6
   13540:	vmrs	APSR_nzcv, fpscr
   13544:	bgt.w	13702 <_dtoa_r+0xb5a>
   13548:	vneg.f64	d6, d6
   1354c:	vcmpe.f64	d7, d6
   13550:	vmrs	APSR_nzcv, fpscr
   13554:	bpl.n	135e4 <_dtoa_r+0xa3c>
   13556:	movs	r3, #0
   13558:	str	r3, [sp, #20]
   1355a:	mov	r6, r3
   1355c:	b.n	132ee <_dtoa_r+0x746>
   1355e:	ldr	r0, [sp, #32]
   13560:	b.w	12c16 <_dtoa_r+0x6e>
   13564:	ldr	r3, [sp, #20]
   13566:	ldr	r1, [sp, #44]	; 0x2c
   13568:	str	r2, [sp, #20]
   1356a:	subs	r3, r2, r3
   1356c:	add	r1, r3
   1356e:	movs	r3, #0
   13570:	str	r1, [sp, #44]	; 0x2c
   13572:	str	r3, [sp, #56]	; 0x38
   13574:	b.n	12eba <_dtoa_r+0x312>
   13576:	vldr	d5, [sp, #56]	; 0x38
   1357a:	movs	r1, #2
   1357c:	b.n	13194 <_dtoa_r+0x5ec>
   1357e:	mov	r5, r7
   13580:	movs	r1, #0
   13582:	str	r1, [r4, #68]	; 0x44
   13584:	b.n	13146 <_dtoa_r+0x59e>
   13586:	movs	r5, #1
   13588:	str	r5, [sp, #52]	; 0x34
   1358a:	mov	r7, r5
   1358c:	mov	r8, r5
   1358e:	b.n	13580 <_dtoa_r+0x9d8>
   13590:	cmp	r3, #0
   13592:	mov	r9, r2
   13594:	ble.n	135ba <_dtoa_r+0xa12>
   13596:	mov	r1, r5
   13598:	movs	r2, #1
   1359a:	mov	r0, r4
   1359c:	bl	13ee4 <__lshift>
   135a0:	ldr	r1, [sp, #20]
   135a2:	mov	r5, r0
   135a4:	bl	13f94 <__mcmp>
   135a8:	cmp	r0, #0
   135aa:	ble.w	137c6 <_dtoa_r+0xc1e>
   135ae:	cmp.w	r9, #57	; 0x39
   135b2:	beq.w	13770 <_dtoa_r+0xbc8>
   135b6:	add.w	r9, sl, #49	; 0x31
   135ba:	mov	sl, r6
   135bc:	strb.w	r9, [r7]
   135c0:	add.w	fp, r7, #1
   135c4:	mov	r6, r8
   135c6:	str	r5, [sp, #28]
   135c8:	b.n	130d4 <_dtoa_r+0x52c>
   135ca:	bne.n	135d6 <_dtoa_r+0xa2e>
   135cc:	tst.w	r9, #1
   135d0:	beq.n	135d6 <_dtoa_r+0xa2e>
   135d2:	b.n	130b2 <_dtoa_r+0x50a>
   135d4:	mov	fp, r2
   135d6:	ldrb.w	r3, [fp, #-1]
   135da:	cmp	r3, #48	; 0x30
   135dc:	add.w	r2, fp, #4294967295
   135e0:	beq.n	135d4 <_dtoa_r+0xa2c>
   135e2:	b.n	130d4 <_dtoa_r+0x52c>
   135e4:	ldrd	sl, fp, [sp, #56]	; 0x38
   135e8:	b.w	12da2 <_dtoa_r+0x1fa>
   135ec:	ldr	r3, [sp, #8]
   135ee:	negs	r3, r3
   135f0:	cmp	r3, #0
   135f2:	beq.w	1372c <_dtoa_r+0xb84>
   135f6:	ldr	r2, [pc, #556]	; (13824 <_dtoa_r+0xc7c>)
   135f8:	and.w	r1, r3, #15
   135fc:	add.w	r2, r2, r1, lsl #3
   13600:	vldr	d7, [r2]
   13604:	vldr	d6, [sp, #56]	; 0x38
   13608:	asrs	r3, r3, #4
   1360a:	vmul.f64	d4, d6, d7
   1360e:	beq.w	137de <_dtoa_r+0xc36>
   13612:	ldr	r2, [pc, #532]	; (13828 <_dtoa_r+0xc80>)
   13614:	movs	r1, #2
   13616:	lsls	r0, r3, #31
   13618:	bpl.n	13624 <_dtoa_r+0xa7c>
   1361a:	vldr	d7, [r2]
   1361e:	adds	r1, #1
   13620:	vmul.f64	d4, d4, d7
   13624:	asrs	r3, r3, #1
   13626:	add.w	r2, r2, #8
   1362a:	bne.n	13616 <_dtoa_r+0xa6e>
   1362c:	b.n	131b2 <_dtoa_r+0x60a>
   1362e:	ldr	r1, [sp, #32]
   13630:	movs	r2, #48	; 0x30
   13632:	strb	r2, [r1, #0]
   13634:	ldr	r2, [sp, #8]
   13636:	ldrb.w	r0, [fp, #-1]
   1363a:	adds	r2, #1
   1363c:	str	r2, [sp, #8]
   1363e:	b.n	12e70 <_dtoa_r+0x2c8>
   13640:	ldr	r1, [r6, #4]
   13642:	mov	r0, r4
   13644:	bl	13b84 <_Balloc>
   13648:	ldr	r3, [r6, #16]
   1364a:	adds	r2, r3, #2
   1364c:	mov	r8, r0
   1364e:	lsls	r2, r2, #2
   13650:	add.w	r1, r6, #12
   13654:	adds	r0, #12
   13656:	bl	db14 <memcpy>
   1365a:	mov	r1, r8
   1365c:	movs	r2, #1
   1365e:	mov	r0, r4
   13660:	bl	13ee4 <__lshift>
   13664:	mov	r8, r0
   13666:	b.n	13366 <_dtoa_r+0x7be>
   13668:	cmp	r2, #57	; 0x39
   1366a:	beq.w	13770 <_dtoa_r+0xbc8>
   1366e:	add.w	r9, r2, #1
   13672:	mov	sl, r6
   13674:	strb.w	r9, [r7]
   13678:	add.w	fp, r7, #1
   1367c:	mov	r6, r8
   1367e:	str	r5, [sp, #28]
   13680:	b.n	130d4 <_dtoa_r+0x52c>
   13682:	mov	sl, r6
   13684:	mov	r9, r2
   13686:	mov	r6, r8
   13688:	b.n	1309a <_dtoa_r+0x4f2>
   1368a:	ldr	r0, [pc, #408]	; (13824 <_dtoa_r+0xc7c>)
   1368c:	vcvt.s32.f64	s12, d4
   13690:	subs	r5, r1, #1
   13692:	add.w	r0, r0, r5, lsl #3
   13696:	vmov	d7, r2, r3
   1369a:	vldr	d3, [r0]
   1369e:	vmov	r3, s12
   136a2:	vmul.f64	d3, d3, d7
   136a6:	ldr	r0, [sp, #32]
   136a8:	adds	r3, #48	; 0x30
   136aa:	cmp	r1, #1
   136ac:	vcvt.f64.s32	d6, s12
   136b0:	strb	r3, [r0, #0]
   136b2:	add.w	fp, r0, #1
   136b6:	vsub.f64	d7, d4, d6
   136ba:	beq.n	136e6 <_dtoa_r+0xb3e>
   136bc:	vmov.f64	d5, #36	; 0x41200000  10.0
   136c0:	ldr	r3, [sp, #32]
   136c2:	add	r1, r3
   136c4:	mov	r3, fp
   136c6:	vmul.f64	d7, d7, d5
   136ca:	vcvt.s32.f64	s12, d7
   136ce:	vmov	r2, s12
   136d2:	adds	r2, #48	; 0x30
   136d4:	strb.w	r2, [r3], #1
   136d8:	cmp	r1, r3
   136da:	vcvt.f64.s32	d6, s12
   136de:	vsub.f64	d7, d7, d6
   136e2:	bne.n	136c6 <_dtoa_r+0xb1e>
   136e4:	add	fp, r5
   136e6:	vmov.f64	d6, #96	; 0x3f000000  0.5
   136ea:	vadd.f64	d5, d3, d6
   136ee:	vcmpe.f64	d5, d7
   136f2:	vmrs	APSR_nzcv, fpscr
   136f6:	bpl.n	13780 <_dtoa_r+0xbd8>
   136f8:	str	r6, [sp, #8]
   136fa:	ldrb.w	r0, [fp, #-1]
   136fe:	b.w	12e56 <_dtoa_r+0x2ae>
   13702:	movs	r3, #0
   13704:	str	r3, [sp, #20]
   13706:	mov	r6, r3
   13708:	b.n	134b8 <_dtoa_r+0x910>
   1370a:	subs	r3, r3, r7
   1370c:	str	r3, [sp, #40]	; 0x28
   1370e:	movs	r3, #0
   13710:	b.w	12ec6 <_dtoa_r+0x31e>
   13714:	ldr	r2, [sp, #20]
   13716:	ldr	r3, [sp, #64]	; 0x40
   13718:	str	r2, [sp, #56]	; 0x38
   1371a:	ldr	r2, [sp, #24]
   1371c:	str	r2, [sp, #40]	; 0x28
   1371e:	rsb	r3, r3, #54	; 0x36
   13722:	b.w	12ec6 <_dtoa_r+0x31e>
   13726:	movs	r3, #0
   13728:	str	r3, [sp, #28]
   1372a:	b.n	1350c <_dtoa_r+0x964>
   1372c:	vldr	d4, [sp, #56]	; 0x38
   13730:	movs	r1, #2
   13732:	b.n	131b2 <_dtoa_r+0x60a>
   13734:	cmp	r7, #0
   13736:	beq.w	13518 <_dtoa_r+0x970>
   1373a:	ldr	r0, [sp, #52]	; 0x34
   1373c:	cmp	r0, #0
   1373e:	ble.w	135e4 <_dtoa_r+0xa3c>
   13742:	vmov.f64	d5, #36	; 0x41200000  10.0
   13746:	vmov.f64	d7, #28	; 0x40e00000  7.0
   1374a:	adds	r1, #1
   1374c:	vmov	s13, r1
   13750:	vmul.f64	d4, d4, d5
   13754:	ldr	r3, [sp, #8]
   13756:	vcvt.f64.s32	d6, s13
   1375a:	subs	r6, r3, #1
   1375c:	vfma.f64	d7, d4, d6
   13760:	vmov	r2, r3, d7
   13764:	mov	r1, r0
   13766:	sub.w	r3, r3, #54525952	; 0x3400000
   1376a:	b.n	131e8 <_dtoa_r+0x640>
   1376c:	str	r5, [sp, #28]
   1376e:	b.n	132ee <_dtoa_r+0x746>
   13770:	movs	r2, #57	; 0x39
   13772:	mov	sl, r6
   13774:	str	r5, [sp, #28]
   13776:	mov	r6, r8
   13778:	strb	r2, [r7, #0]
   1377a:	add.w	fp, r7, #1
   1377e:	b.n	130b6 <_dtoa_r+0x50e>
   13780:	vsub.f64	d6, d6, d3
   13784:	vcmpe.f64	d6, d7
   13788:	vmrs	APSR_nzcv, fpscr
   1378c:	bgt.n	13792 <_dtoa_r+0xbea>
   1378e:	b.n	135e4 <_dtoa_r+0xa3c>
   13790:	mov	fp, r2
   13792:	ldrb.w	r3, [fp, #-1]
   13796:	cmp	r3, #48	; 0x30
   13798:	add.w	r2, fp, #4294967295
   1379c:	beq.n	13790 <_dtoa_r+0xbe8>
   1379e:	b.n	13296 <_dtoa_r+0x6ee>
   137a0:	str	r6, [sp, #8]
   137a2:	b.w	12e56 <_dtoa_r+0x2ae>
   137a6:	str	r3, [sp, #28]
   137a8:	b.n	1350c <_dtoa_r+0x964>
   137aa:	cmp.w	sl, #0
   137ae:	bne.w	1332a <_dtoa_r+0x782>
   137b2:	b.n	134e6 <_dtoa_r+0x93e>
   137b4:	cmp	r2, #57	; 0x39
   137b6:	mov	fp, r9
   137b8:	mov	r9, r2
   137ba:	beq.n	13770 <_dtoa_r+0xbc8>
   137bc:	cmp.w	fp, #0
   137c0:	bgt.w	135b6 <_dtoa_r+0xa0e>
   137c4:	b.n	135ba <_dtoa_r+0xa12>
   137c6:	bne.w	135ba <_dtoa_r+0xa12>
   137ca:	tst.w	r9, #1
   137ce:	beq.w	135ba <_dtoa_r+0xa12>
   137d2:	b.n	135ae <_dtoa_r+0xa06>
   137d4:	ldr	r3, [sp, #4]
   137d6:	cmp	r3, #2
   137d8:	bgt.n	137ec <_dtoa_r+0xc44>
   137da:	ldr	r7, [sp, #52]	; 0x34
   137dc:	b.n	13054 <_dtoa_r+0x4ac>
   137de:	movs	r1, #2
   137e0:	b.n	131b2 <_dtoa_r+0x60a>
   137e2:	ldr	r3, [sp, #4]
   137e4:	cmp	r3, #2
   137e6:	bgt.n	137ec <_dtoa_r+0xc44>
   137e8:	ldr	r7, [sp, #52]	; 0x34
   137ea:	b.n	1334a <_dtoa_r+0x7a2>
   137ec:	ldr	r7, [sp, #52]	; 0x34
   137ee:	b.n	13494 <_dtoa_r+0x8ec>
   137f0:	movs	r3, #1
   137f2:	str	r3, [sp, #56]	; 0x38
   137f4:	b.w	12d3a <_dtoa_r+0x192>
   137f8:	beq.w	1301a <_dtoa_r+0x472>
   137fc:	rsb	r0, r0, #60	; 0x3c
   13800:	b.n	1300c <_dtoa_r+0x464>
   13802:	movs	r5, #0
   13804:	str	r5, [r4, #68]	; 0x44
   13806:	mov	r1, r5
   13808:	mov	r0, r4
   1380a:	bl	13b84 <_Balloc>
   1380e:	mov.w	r7, #4294967295
   13812:	movs	r3, #1
   13814:	str	r0, [sp, #32]
   13816:	mov	r8, r5
   13818:	str	r0, [r4, #64]	; 0x40
   1381a:	str	r7, [sp, #52]	; 0x34
   1381c:	str	r3, [sp, #36]	; 0x24
   1381e:	b.w	12da2 <_dtoa_r+0x1fa>
   13822:	nop
   13824:	.word	0x20000a40
   13828:	.word	0x20000b08

0001382c <fcvtbuf>:
   1382c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   13830:	ldr	r5, [pc, #196]	; (138f8 <fcvtbuf+0xcc>)
   13832:	sub	sp, #28
   13834:	ldr	r7, [r5, #0]
   13836:	mov	r4, r0
   13838:	mov	r6, r1
   1383a:	mov	r8, r2
   1383c:	mov	r5, r3
   1383e:	cmp	r3, #0
   13840:	beq.n	138ba <fcvtbuf+0x8e>
   13842:	vmov.f64	d7, #112	; 0x3f800000  1.0
   13846:	vcmpe.f64	d0, d7
   1384a:	add	r3, sp, #20
   1384c:	vmrs	APSR_nzcv, fpscr
   13850:	str	r3, [sp, #4]
   13852:	str.w	r8, [sp]
   13856:	mov	r0, r7
   13858:	mov	r3, r6
   1385a:	mov	r2, r4
   1385c:	bmi.n	138a4 <fcvtbuf+0x78>
   1385e:	movs	r1, #3
   13860:	bl	12ba8 <_dtoa_r>
   13864:	ldr	r3, [sp, #20]
   13866:	ldr	r1, [r6, #0]
   13868:	cmp	r0, r3
   1386a:	rsb	r1, r1, #0
   1386e:	bcs.n	138c8 <fcvtbuf+0x9c>
   13870:	subs	r1, r1, r5
   13872:	mov	r3, r5
   13874:	ldrb.w	r2, [r0], #1
   13878:	strb.w	r2, [r3], #1
   1387c:	ldr	r2, [sp, #20]
   1387e:	cmp	r2, r0
   13880:	add.w	r6, r3, r1
   13884:	bhi.n	13874 <fcvtbuf+0x48>
   13886:	cmp	r4, r6
   13888:	ble.n	138ce <fcvtbuf+0xa2>
   1388a:	subs	r2, r4, r6
   1388c:	add	r2, r3
   1388e:	movs	r1, #48	; 0x30
   13890:	strb.w	r1, [r3], #1
   13894:	cmp	r2, r3
   13896:	bne.n	13890 <fcvtbuf+0x64>
   13898:	movs	r3, #0
   1389a:	strb	r3, [r2, #0]
   1389c:	mov	r0, r5
   1389e:	add	sp, #28
   138a0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   138a4:	vmov.f64	d7, #240	; 0xbf800000 -1.0
   138a8:	vcmpe.f64	d0, d7
   138ac:	vmrs	APSR_nzcv, fpscr
   138b0:	ble.n	1385e <fcvtbuf+0x32>
   138b2:	movs	r1, #2
   138b4:	bl	12ba8 <_dtoa_r>
   138b8:	b.n	13864 <fcvtbuf+0x38>
   138ba:	ldr	r2, [r7, #80]	; 0x50
   138bc:	add.w	r3, r0, #35	; 0x23
   138c0:	cmp	r2, r3
   138c2:	ble.n	138d2 <fcvtbuf+0xa6>
   138c4:	ldr	r5, [r7, #84]	; 0x54
   138c6:	b.n	13842 <fcvtbuf+0x16>
   138c8:	mov	r6, r1
   138ca:	mov	r3, r5
   138cc:	b.n	13886 <fcvtbuf+0x5a>
   138ce:	mov	r2, r3
   138d0:	b.n	13898 <fcvtbuf+0x6c>
   138d2:	add.w	r9, r0, #36	; 0x24
   138d6:	mov	r2, r9
   138d8:	ldr	r1, [r7, #84]	; 0x54
   138da:	mov	r0, r7
   138dc:	vstr	d0, [sp, #8]
   138e0:	bl	10ca0 <_realloc_r>
   138e4:	mov	r5, r0
   138e6:	cmp	r0, #0
   138e8:	beq.n	1389c <fcvtbuf+0x70>
   138ea:	str.w	r9, [r7, #80]	; 0x50
   138ee:	str	r0, [r7, #84]	; 0x54
   138f0:	vldr	d0, [sp, #8]
   138f4:	b.n	13842 <fcvtbuf+0x16>
   138f6:	nop
   138f8:	.word	0x20001098

000138fc <_malloc_trim_r>:
   138fc:	push	{r3, r4, r5, r6, r7, lr}
   138fe:	ldr	r7, [pc, #140]	; (1398c <_malloc_trim_r+0x90>)
   13900:	mov	r4, r1
   13902:	mov	r6, r0
   13904:	bl	10c98 <__malloc_lock>
   13908:	ldr	r3, [r7, #8]
   1390a:	ldr	r5, [r3, #4]
   1390c:	bic.w	r5, r5, #3
   13910:	subs	r1, r5, r4
   13912:	addw	r1, r1, #4079	; 0xfef
   13916:	bic.w	r1, r1, #4080	; 0xff0
   1391a:	bic.w	r1, r1, #15
   1391e:	sub.w	r4, r1, #4096	; 0x1000
   13922:	cmp.w	r4, #4096	; 0x1000
   13926:	blt.n	13938 <_malloc_trim_r+0x3c>
   13928:	movs	r1, #0
   1392a:	mov	r0, r6
   1392c:	bl	11080 <_sbrk_r>
   13930:	ldr	r3, [r7, #8]
   13932:	add	r3, r5
   13934:	cmp	r0, r3
   13936:	beq.n	13942 <_malloc_trim_r+0x46>
   13938:	mov	r0, r6
   1393a:	bl	10c9c <__malloc_unlock>
   1393e:	movs	r0, #0
   13940:	pop	{r3, r4, r5, r6, r7, pc}
   13942:	negs	r1, r4
   13944:	mov	r0, r6
   13946:	bl	11080 <_sbrk_r>
   1394a:	adds	r0, #1
   1394c:	beq.n	1396a <_malloc_trim_r+0x6e>
   1394e:	ldr	r3, [pc, #64]	; (13990 <_malloc_trim_r+0x94>)
   13950:	ldr	r2, [r7, #8]
   13952:	ldr	r1, [r3, #0]
   13954:	subs	r5, r5, r4
   13956:	orr.w	r5, r5, #1
   1395a:	mov	r0, r6
   1395c:	subs	r1, r1, r4
   1395e:	str	r5, [r2, #4]
   13960:	str	r1, [r3, #0]
   13962:	bl	10c9c <__malloc_unlock>
   13966:	movs	r0, #1
   13968:	pop	{r3, r4, r5, r6, r7, pc}
   1396a:	movs	r1, #0
   1396c:	mov	r0, r6
   1396e:	bl	11080 <_sbrk_r>
   13972:	ldr	r2, [r7, #8]
   13974:	subs	r3, r0, r2
   13976:	cmp	r3, #15
   13978:	ble.n	13938 <_malloc_trim_r+0x3c>
   1397a:	ldr	r4, [pc, #24]	; (13994 <_malloc_trim_r+0x98>)
   1397c:	ldr	r1, [pc, #16]	; (13990 <_malloc_trim_r+0x94>)
   1397e:	ldr	r4, [r4, #0]
   13980:	orr.w	r3, r3, #1
   13984:	subs	r0, r0, r4
   13986:	str	r3, [r2, #4]
   13988:	str	r0, [r1, #0]
   1398a:	b.n	13938 <_malloc_trim_r+0x3c>
   1398c:	.word	0x20001208
   13990:	.word	0x20044924
   13994:	.word	0x20001614

00013998 <_free_r>:
   13998:	cmp	r1, #0
   1399a:	beq.n	13a28 <_free_r+0x90>
   1399c:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   139a0:	mov	r5, r1
   139a2:	mov	r8, r0
   139a4:	bl	10c98 <__malloc_lock>
   139a8:	ldr.w	r7, [r5, #-4]
   139ac:	ldr	r1, [pc, #424]	; (13b58 <_free_r+0x1c0>)
   139ae:	bic.w	r3, r7, #1
   139b2:	sub.w	r4, r5, #8
   139b6:	adds	r2, r4, r3
   139b8:	ldr	r6, [r1, #8]
   139ba:	ldr	r0, [r2, #4]
   139bc:	cmp	r2, r6
   139be:	bic.w	r0, r0, #3
   139c2:	beq.n	13a8a <_free_r+0xf2>
   139c4:	lsls	r6, r7, #31
   139c6:	str	r0, [r2, #4]
   139c8:	bmi.n	139e2 <_free_r+0x4a>
   139ca:	ldr.w	r7, [r5, #-8]
   139ce:	subs	r4, r4, r7
   139d0:	add.w	lr, r1, #8
   139d4:	ldr	r5, [r4, #8]
   139d6:	cmp	r5, lr
   139d8:	add	r3, r7
   139da:	beq.n	13abc <_free_r+0x124>
   139dc:	ldr	r7, [r4, #12]
   139de:	str	r7, [r5, #12]
   139e0:	str	r5, [r7, #8]
   139e2:	adds	r5, r2, r0
   139e4:	ldr	r5, [r5, #4]
   139e6:	lsls	r5, r5, #31
   139e8:	bpl.n	13a70 <_free_r+0xd8>
   139ea:	orr.w	r2, r3, #1
   139ee:	str	r2, [r4, #4]
   139f0:	str	r3, [r4, r3]
   139f2:	cmp.w	r3, #512	; 0x200
   139f6:	bcs.n	13a2a <_free_r+0x92>
   139f8:	lsrs	r3, r3, #3
   139fa:	adds	r2, r3, #1
   139fc:	ldr	r5, [r1, #4]
   139fe:	ldr.w	r7, [r1, r2, lsl #3]
   13a02:	str	r7, [r4, #8]
   13a04:	movs	r0, #1
   13a06:	asrs	r3, r3, #2
   13a08:	lsl.w	r3, r0, r3
   13a0c:	add.w	r0, r1, r2, lsl #3
   13a10:	orrs	r5, r3
   13a12:	subs	r0, #8
   13a14:	str	r0, [r4, #12]
   13a16:	str	r5, [r1, #4]
   13a18:	str.w	r4, [r1, r2, lsl #3]
   13a1c:	str	r4, [r7, #12]
   13a1e:	mov	r0, r8
   13a20:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   13a24:	b.w	10c9c <__malloc_unlock>
   13a28:	bx	lr
   13a2a:	lsrs	r2, r3, #9
   13a2c:	cmp	r2, #4
   13a2e:	bhi.n	13ad8 <_free_r+0x140>
   13a30:	lsrs	r2, r3, #6
   13a32:	add.w	r7, r2, #57	; 0x39
   13a36:	lsls	r7, r7, #1
   13a38:	add.w	r5, r2, #56	; 0x38
   13a3c:	add.w	r0, r1, r7, lsl #2
   13a40:	ldr.w	r2, [r1, r7, lsl #2]
   13a44:	ldr	r1, [pc, #272]	; (13b58 <_free_r+0x1c0>)
   13a46:	subs	r0, #8
   13a48:	cmp	r0, r2
   13a4a:	beq.n	13ae8 <_free_r+0x150>
   13a4c:	ldr	r1, [r2, #4]
   13a4e:	bic.w	r1, r1, #3
   13a52:	cmp	r3, r1
   13a54:	bcs.n	13a5c <_free_r+0xc4>
   13a56:	ldr	r2, [r2, #8]
   13a58:	cmp	r0, r2
   13a5a:	bne.n	13a4c <_free_r+0xb4>
   13a5c:	ldr	r0, [r2, #12]
   13a5e:	str	r0, [r4, #12]
   13a60:	str	r2, [r4, #8]
   13a62:	str	r4, [r0, #8]
   13a64:	str	r4, [r2, #12]
   13a66:	mov	r0, r8
   13a68:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   13a6c:	b.w	10c9c <__malloc_unlock>
   13a70:	ldr	r5, [r2, #8]
   13a72:	ldr	r7, [pc, #232]	; (13b5c <_free_r+0x1c4>)
   13a74:	cmp	r5, r7
   13a76:	add	r3, r0
   13a78:	beq.n	13afa <_free_r+0x162>
   13a7a:	ldr	r0, [r2, #12]
   13a7c:	str	r0, [r5, #12]
   13a7e:	orr.w	r2, r3, #1
   13a82:	str	r5, [r0, #8]
   13a84:	str	r2, [r4, #4]
   13a86:	str	r3, [r4, r3]
   13a88:	b.n	139f2 <_free_r+0x5a>
   13a8a:	lsls	r7, r7, #31
   13a8c:	add	r3, r0
   13a8e:	bmi.n	13aa0 <_free_r+0x108>
   13a90:	ldr.w	r2, [r5, #-8]
   13a94:	subs	r4, r4, r2
   13a96:	add	r3, r2
   13a98:	ldr	r0, [r4, #8]
   13a9a:	ldr	r2, [r4, #12]
   13a9c:	str	r2, [r0, #12]
   13a9e:	str	r0, [r2, #8]
   13aa0:	ldr	r2, [pc, #188]	; (13b60 <_free_r+0x1c8>)
   13aa2:	ldr	r2, [r2, #0]
   13aa4:	orr.w	r0, r3, #1
   13aa8:	cmp	r3, r2
   13aaa:	str	r0, [r4, #4]
   13aac:	str	r4, [r1, #8]
   13aae:	bcc.n	13a1e <_free_r+0x86>
   13ab0:	ldr	r3, [pc, #176]	; (13b64 <_free_r+0x1cc>)
   13ab2:	mov	r0, r8
   13ab4:	ldr	r1, [r3, #0]
   13ab6:	bl	138fc <_malloc_trim_r>
   13aba:	b.n	13a1e <_free_r+0x86>
   13abc:	adds	r1, r2, r0
   13abe:	ldr	r1, [r1, #4]
   13ac0:	lsls	r1, r1, #31
   13ac2:	bmi.n	13b4e <_free_r+0x1b6>
   13ac4:	ldr	r1, [r2, #8]
   13ac6:	ldr	r2, [r2, #12]
   13ac8:	str	r2, [r1, #12]
   13aca:	add	r3, r0
   13acc:	orr.w	r0, r3, #1
   13ad0:	str	r1, [r2, #8]
   13ad2:	str	r0, [r4, #4]
   13ad4:	str	r3, [r4, r3]
   13ad6:	b.n	13a1e <_free_r+0x86>
   13ad8:	cmp	r2, #20
   13ada:	bhi.n	13b0c <_free_r+0x174>
   13adc:	add.w	r7, r2, #92	; 0x5c
   13ae0:	lsls	r7, r7, #1
   13ae2:	add.w	r5, r2, #91	; 0x5b
   13ae6:	b.n	13a3c <_free_r+0xa4>
   13ae8:	asrs	r2, r5, #2
   13aea:	ldr	r3, [r1, #4]
   13aec:	movs	r5, #1
   13aee:	lsl.w	r2, r5, r2
   13af2:	orrs	r3, r2
   13af4:	str	r3, [r1, #4]
   13af6:	mov	r2, r0
   13af8:	b.n	13a5e <_free_r+0xc6>
   13afa:	orr.w	r2, r3, #1
   13afe:	str	r4, [r1, #20]
   13b00:	str	r4, [r1, #16]
   13b02:	str	r5, [r4, #12]
   13b04:	str	r5, [r4, #8]
   13b06:	str	r2, [r4, #4]
   13b08:	str	r3, [r4, r3]
   13b0a:	b.n	13a1e <_free_r+0x86>
   13b0c:	cmp	r2, #84	; 0x54
   13b0e:	bhi.n	13b1e <_free_r+0x186>
   13b10:	lsrs	r2, r3, #12
   13b12:	add.w	r7, r2, #111	; 0x6f
   13b16:	lsls	r7, r7, #1
   13b18:	add.w	r5, r2, #110	; 0x6e
   13b1c:	b.n	13a3c <_free_r+0xa4>
   13b1e:	cmp.w	r2, #340	; 0x154
   13b22:	bhi.n	13b32 <_free_r+0x19a>
   13b24:	lsrs	r2, r3, #15
   13b26:	add.w	r7, r2, #120	; 0x78
   13b2a:	lsls	r7, r7, #1
   13b2c:	add.w	r5, r2, #119	; 0x77
   13b30:	b.n	13a3c <_free_r+0xa4>
   13b32:	movw	r0, #1364	; 0x554
   13b36:	cmp	r2, r0
   13b38:	bhi.n	13b48 <_free_r+0x1b0>
   13b3a:	lsrs	r2, r3, #18
   13b3c:	add.w	r7, r2, #125	; 0x7d
   13b40:	lsls	r7, r7, #1
   13b42:	add.w	r5, r2, #124	; 0x7c
   13b46:	b.n	13a3c <_free_r+0xa4>
   13b48:	movs	r7, #254	; 0xfe
   13b4a:	movs	r5, #126	; 0x7e
   13b4c:	b.n	13a3c <_free_r+0xa4>
   13b4e:	orr.w	r2, r3, #1
   13b52:	str	r2, [r4, #4]
   13b54:	str	r3, [r4, r3]
   13b56:	b.n	13a1e <_free_r+0x86>
   13b58:	.word	0x20001208
   13b5c:	.word	0x20001210
   13b60:	.word	0x20001610
   13b64:	.word	0x20044920

00013b68 <_localeconv_r>:
   13b68:	ldr	r2, [pc, #16]	; (13b7c <_localeconv_r+0x14>)
   13b6a:	ldr	r3, [pc, #20]	; (13b80 <_localeconv_r+0x18>)
   13b6c:	ldr	r2, [r2, #0]
   13b6e:	ldr	r0, [r2, #52]	; 0x34
   13b70:	cmp	r0, #0
   13b72:	it	eq
   13b74:	moveq	r0, r3
   13b76:	adds	r0, #240	; 0xf0
   13b78:	bx	lr
   13b7a:	nop
   13b7c:	.word	0x20001098
   13b80:	.word	0x2000109c

00013b84 <_Balloc>:
   13b84:	ldr	r3, [r0, #76]	; 0x4c
   13b86:	push	{r4, r5, r6, lr}
   13b88:	mov	r5, r0
   13b8a:	mov	r4, r1
   13b8c:	cbz	r3, 13ba2 <_Balloc+0x1e>
   13b8e:	ldr.w	r0, [r3, r4, lsl #2]
   13b92:	cbz	r0, 13bb6 <_Balloc+0x32>
   13b94:	ldr	r2, [r0, #0]
   13b96:	str.w	r2, [r3, r4, lsl #2]
   13b9a:	movs	r3, #0
   13b9c:	str	r3, [r0, #16]
   13b9e:	str	r3, [r0, #12]
   13ba0:	pop	{r4, r5, r6, pc}
   13ba2:	movs	r2, #33	; 0x21
   13ba4:	movs	r1, #4
   13ba6:	bl	10394 <_calloc_r>
   13baa:	str	r0, [r5, #76]	; 0x4c
   13bac:	mov	r3, r0
   13bae:	cmp	r0, #0
   13bb0:	bne.n	13b8e <_Balloc+0xa>
   13bb2:	movs	r0, #0
   13bb4:	pop	{r4, r5, r6, pc}
   13bb6:	movs	r1, #1
   13bb8:	lsl.w	r6, r1, r4
   13bbc:	adds	r2, r6, #5
   13bbe:	mov	r0, r5
   13bc0:	lsls	r2, r2, #2
   13bc2:	bl	10394 <_calloc_r>
   13bc6:	cmp	r0, #0
   13bc8:	beq.n	13bb2 <_Balloc+0x2e>
   13bca:	str	r4, [r0, #4]
   13bcc:	str	r6, [r0, #8]
   13bce:	b.n	13b9a <_Balloc+0x16>

00013bd0 <_Bfree>:
   13bd0:	cbz	r1, 13be0 <_Bfree+0x10>
   13bd2:	ldr	r3, [r0, #76]	; 0x4c
   13bd4:	ldr	r2, [r1, #4]
   13bd6:	ldr.w	r0, [r3, r2, lsl #2]
   13bda:	str	r0, [r1, #0]
   13bdc:	str.w	r1, [r3, r2, lsl #2]
   13be0:	bx	lr
   13be2:	nop

00013be4 <__multadd>:
   13be4:	push	{r4, r5, r6, r7, lr}
   13be6:	ldr	r4, [r1, #16]
   13be8:	sub	sp, #12
   13bea:	mov	r5, r1
   13bec:	mov	r6, r0
   13bee:	add.w	lr, r1, #20
   13bf2:	movs	r7, #0
   13bf4:	ldr.w	r0, [lr]
   13bf8:	uxth	r1, r0
   13bfa:	mla	r1, r2, r1, r3
   13bfe:	lsrs	r3, r1, #16
   13c00:	lsrs	r0, r0, #16
   13c02:	mla	r3, r2, r0, r3
   13c06:	uxth	r1, r1
   13c08:	adds	r7, #1
   13c0a:	add.w	r1, r1, r3, lsl #16
   13c0e:	cmp	r4, r7
   13c10:	str.w	r1, [lr], #4
   13c14:	mov.w	r3, r3, lsr #16
   13c18:	bgt.n	13bf4 <__multadd+0x10>
   13c1a:	cbz	r3, 13c2c <__multadd+0x48>
   13c1c:	ldr	r2, [r5, #8]
   13c1e:	cmp	r4, r2
   13c20:	bge.n	13c32 <__multadd+0x4e>
   13c22:	add.w	r2, r5, r4, lsl #2
   13c26:	adds	r4, #1
   13c28:	str	r3, [r2, #20]
   13c2a:	str	r4, [r5, #16]
   13c2c:	mov	r0, r5
   13c2e:	add	sp, #12
   13c30:	pop	{r4, r5, r6, r7, pc}
   13c32:	ldr	r1, [r5, #4]
   13c34:	str	r3, [sp, #4]
   13c36:	adds	r1, #1
   13c38:	mov	r0, r6
   13c3a:	bl	13b84 <_Balloc>
   13c3e:	ldr	r2, [r5, #16]
   13c40:	adds	r2, #2
   13c42:	add.w	r1, r5, #12
   13c46:	mov	r7, r0
   13c48:	lsls	r2, r2, #2
   13c4a:	adds	r0, #12
   13c4c:	bl	db14 <memcpy>
   13c50:	ldr	r2, [r6, #76]	; 0x4c
   13c52:	ldr	r1, [r5, #4]
   13c54:	ldr	r3, [sp, #4]
   13c56:	ldr.w	r0, [r2, r1, lsl #2]
   13c5a:	str	r0, [r5, #0]
   13c5c:	str.w	r5, [r2, r1, lsl #2]
   13c60:	mov	r5, r7
   13c62:	b.n	13c22 <__multadd+0x3e>

00013c64 <__hi0bits>:
   13c64:	lsrs	r3, r0, #16
   13c66:	lsls	r3, r3, #16
   13c68:	cbnz	r3, 13c98 <__hi0bits+0x34>
   13c6a:	lsls	r0, r0, #16
   13c6c:	movs	r3, #16
   13c6e:	tst.w	r0, #4278190080	; 0xff000000
   13c72:	itt	eq
   13c74:	lsleq	r0, r0, #8
   13c76:	addeq	r3, #8
   13c78:	tst.w	r0, #4026531840	; 0xf0000000
   13c7c:	itt	eq
   13c7e:	lsleq	r0, r0, #4
   13c80:	addeq	r3, #4
   13c82:	tst.w	r0, #3221225472	; 0xc0000000
   13c86:	itt	eq
   13c88:	lsleq	r0, r0, #2
   13c8a:	addeq	r3, #2
   13c8c:	cmp	r0, #0
   13c8e:	blt.n	13ca0 <__hi0bits+0x3c>
   13c90:	lsls	r2, r0, #1
   13c92:	bmi.n	13c9c <__hi0bits+0x38>
   13c94:	movs	r0, #32
   13c96:	bx	lr
   13c98:	movs	r3, #0
   13c9a:	b.n	13c6e <__hi0bits+0xa>
   13c9c:	adds	r0, r3, #1
   13c9e:	bx	lr
   13ca0:	mov	r0, r3
   13ca2:	bx	lr

00013ca4 <__lo0bits>:
   13ca4:	ldr	r3, [r0, #0]
   13ca6:	ands.w	r2, r3, #7
   13caa:	beq.n	13cbc <__lo0bits+0x18>
   13cac:	lsls	r1, r3, #31
   13cae:	bmi.n	13cf2 <__lo0bits+0x4e>
   13cb0:	lsls	r2, r3, #30
   13cb2:	bmi.n	13cf6 <__lo0bits+0x52>
   13cb4:	lsrs	r3, r3, #2
   13cb6:	str	r3, [r0, #0]
   13cb8:	movs	r0, #2
   13cba:	bx	lr
   13cbc:	uxth	r1, r3
   13cbe:	cbnz	r1, 13cc4 <__lo0bits+0x20>
   13cc0:	lsrs	r3, r3, #16
   13cc2:	movs	r2, #16
   13cc4:	tst.w	r3, #255	; 0xff
   13cc8:	itt	eq
   13cca:	lsreq	r3, r3, #8
   13ccc:	addeq	r2, #8
   13cce:	lsls	r1, r3, #28
   13cd0:	itt	eq
   13cd2:	lsreq	r3, r3, #4
   13cd4:	addeq	r2, #4
   13cd6:	lsls	r1, r3, #30
   13cd8:	itt	eq
   13cda:	lsreq	r3, r3, #2
   13cdc:	addeq	r2, #2
   13cde:	lsls	r1, r3, #31
   13ce0:	bmi.n	13cec <__lo0bits+0x48>
   13ce2:	lsrs	r3, r3, #1
   13ce4:	bne.n	13cea <__lo0bits+0x46>
   13ce6:	movs	r0, #32
   13ce8:	bx	lr
   13cea:	adds	r2, #1
   13cec:	str	r3, [r0, #0]
   13cee:	mov	r0, r2
   13cf0:	bx	lr
   13cf2:	movs	r0, #0
   13cf4:	bx	lr
   13cf6:	lsrs	r3, r3, #1
   13cf8:	str	r3, [r0, #0]
   13cfa:	movs	r0, #1
   13cfc:	bx	lr
   13cfe:	nop

00013d00 <__i2b>:
   13d00:	push	{r4, lr}
   13d02:	mov	r4, r1
   13d04:	movs	r1, #1
   13d06:	bl	13b84 <_Balloc>
   13d0a:	movs	r2, #1
   13d0c:	str	r4, [r0, #20]
   13d0e:	str	r2, [r0, #16]
   13d10:	pop	{r4, pc}
   13d12:	nop

00013d14 <__multiply>:
   13d14:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13d18:	ldr	r5, [r1, #16]
   13d1a:	ldr	r7, [r2, #16]
   13d1c:	cmp	r5, r7
   13d1e:	sub	sp, #12
   13d20:	mov	r4, r1
   13d22:	mov	r6, r2
   13d24:	bge.n	13d30 <__multiply+0x1c>
   13d26:	mov	r2, r5
   13d28:	mov	r4, r6
   13d2a:	mov	r5, r7
   13d2c:	mov	r6, r1
   13d2e:	mov	r7, r2
   13d30:	ldr	r3, [r4, #8]
   13d32:	ldr	r1, [r4, #4]
   13d34:	add.w	r8, r5, r7
   13d38:	cmp	r8, r3
   13d3a:	it	gt
   13d3c:	addgt	r1, #1
   13d3e:	bl	13b84 <_Balloc>
   13d42:	add.w	ip, r0, #20
   13d46:	add.w	r9, ip, r8, lsl #2
   13d4a:	cmp	ip, r9
   13d4c:	str	r0, [sp, #0]
   13d4e:	bcs.n	13d5c <__multiply+0x48>
   13d50:	mov	r3, ip
   13d52:	movs	r1, #0
   13d54:	str.w	r1, [r3], #4
   13d58:	cmp	r9, r3
   13d5a:	bhi.n	13d54 <__multiply+0x40>
   13d5c:	add.w	r2, r6, #20
   13d60:	add.w	sl, r2, r7, lsl #2
   13d64:	add.w	r3, r4, #20
   13d68:	cmp	r2, sl
   13d6a:	add.w	lr, r3, r5, lsl #2
   13d6e:	bcs.n	13e1a <__multiply+0x106>
   13d70:	str.w	r9, [sp, #4]
   13d74:	mov	r9, r3
   13d76:	ldr.w	r3, [r2], #4
   13d7a:	uxth.w	fp, r3
   13d7e:	cmp.w	fp, #0
   13d82:	beq.n	13dc6 <__multiply+0xb2>
   13d84:	movs	r0, #0
   13d86:	mov	r7, r9
   13d88:	mov	r6, ip
   13d8a:	mov	r5, r0
   13d8c:	b.n	13d90 <__multiply+0x7c>
   13d8e:	mov	r6, r3
   13d90:	ldr.w	r4, [r7], #4
   13d94:	ldr	r0, [r6, #0]
   13d96:	uxth	r1, r4
   13d98:	uxth	r3, r0
   13d9a:	mla	r1, fp, r1, r3
   13d9e:	lsrs	r4, r4, #16
   13da0:	lsrs	r0, r0, #16
   13da2:	adds	r3, r1, r5
   13da4:	mla	r0, fp, r4, r0
   13da8:	add.w	r0, r0, r3, lsr #16
   13dac:	uxth	r1, r3
   13dae:	mov	r3, r6
   13db0:	orr.w	r1, r1, r0, lsl #16
   13db4:	cmp	lr, r7
   13db6:	mov.w	r5, r0, lsr #16
   13dba:	str.w	r1, [r3], #4
   13dbe:	bhi.n	13d8e <__multiply+0x7a>
   13dc0:	str	r5, [r6, #4]
   13dc2:	ldr.w	r3, [r2, #-4]
   13dc6:	movs.w	fp, r3, lsr #16
   13dca:	beq.n	13e0e <__multiply+0xfa>
   13dcc:	ldr.w	r3, [ip]
   13dd0:	mov	r7, ip
   13dd2:	mov	r0, r3
   13dd4:	mov	r5, r9
   13dd6:	movs	r1, #0
   13dd8:	b.n	13ddc <__multiply+0xc8>
   13dda:	mov	r7, r6
   13ddc:	ldrh	r4, [r5, #0]
   13dde:	lsrs	r0, r0, #16
   13de0:	mla	r0, fp, r4, r0
   13de4:	add	r1, r0
   13de6:	uxth	r4, r3
   13de8:	mov	r6, r7
   13dea:	orr.w	r3, r4, r1, lsl #16
   13dee:	str.w	r3, [r6], #4
   13df2:	ldr	r0, [r7, #4]
   13df4:	ldr.w	r4, [r5], #4
   13df8:	uxth	r3, r0
   13dfa:	lsrs	r4, r4, #16
   13dfc:	mla	r4, fp, r4, r3
   13e00:	add.w	r3, r4, r1, lsr #16
   13e04:	cmp	lr, r5
   13e06:	mov.w	r1, r3, lsr #16
   13e0a:	bhi.n	13dda <__multiply+0xc6>
   13e0c:	str	r3, [r7, #4]
   13e0e:	cmp	sl, r2
   13e10:	add.w	ip, ip, #4
   13e14:	bhi.n	13d76 <__multiply+0x62>
   13e16:	ldr.w	r9, [sp, #4]
   13e1a:	cmp.w	r8, #0
   13e1e:	ble.n	13e38 <__multiply+0x124>
   13e20:	ldr.w	r3, [r9, #-4]
   13e24:	sub.w	r9, r9, #4
   13e28:	cbz	r3, 13e32 <__multiply+0x11e>
   13e2a:	b.n	13e38 <__multiply+0x124>
   13e2c:	ldr.w	r3, [r9, #-4]!
   13e30:	cbnz	r3, 13e38 <__multiply+0x124>
   13e32:	subs.w	r8, r8, #1
   13e36:	bne.n	13e2c <__multiply+0x118>
   13e38:	ldr	r0, [sp, #0]
   13e3a:	str.w	r8, [r0, #16]
   13e3e:	add	sp, #12
   13e40:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00013e44 <__pow5mult>:
   13e44:	ands.w	r3, r2, #3
   13e48:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13e4c:	mov	r4, r2
   13e4e:	mov	r7, r0
   13e50:	bne.n	13eb0 <__pow5mult+0x6c>
   13e52:	mov	r6, r1
   13e54:	asrs	r4, r4, #2
   13e56:	beq.n	13e92 <__pow5mult+0x4e>
   13e58:	ldr	r5, [r7, #72]	; 0x48
   13e5a:	cbz	r5, 13ec2 <__pow5mult+0x7e>
   13e5c:	lsls	r3, r4, #31
   13e5e:	mov.w	r8, #0
   13e62:	bmi.n	13e72 <__pow5mult+0x2e>
   13e64:	asrs	r4, r4, #1
   13e66:	beq.n	13e92 <__pow5mult+0x4e>
   13e68:	ldr	r0, [r5, #0]
   13e6a:	cbz	r0, 13e98 <__pow5mult+0x54>
   13e6c:	mov	r5, r0
   13e6e:	lsls	r3, r4, #31
   13e70:	bpl.n	13e64 <__pow5mult+0x20>
   13e72:	mov	r2, r5
   13e74:	mov	r1, r6
   13e76:	mov	r0, r7
   13e78:	bl	13d14 <__multiply>
   13e7c:	cbz	r6, 13eac <__pow5mult+0x68>
   13e7e:	ldr	r2, [r6, #4]
   13e80:	ldr	r3, [r7, #76]	; 0x4c
   13e82:	asrs	r4, r4, #1
   13e84:	ldr.w	r1, [r3, r2, lsl #2]
   13e88:	str	r1, [r6, #0]
   13e8a:	str.w	r6, [r3, r2, lsl #2]
   13e8e:	mov	r6, r0
   13e90:	bne.n	13e68 <__pow5mult+0x24>
   13e92:	mov	r0, r6
   13e94:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13e98:	mov	r2, r5
   13e9a:	mov	r1, r5
   13e9c:	mov	r0, r7
   13e9e:	bl	13d14 <__multiply>
   13ea2:	str	r0, [r5, #0]
   13ea4:	str.w	r8, [r0]
   13ea8:	mov	r5, r0
   13eaa:	b.n	13e6e <__pow5mult+0x2a>
   13eac:	mov	r6, r0
   13eae:	b.n	13e64 <__pow5mult+0x20>
   13eb0:	subs	r2, r3, #1
   13eb2:	ldr	r5, [pc, #44]	; (13ee0 <__pow5mult+0x9c>)
   13eb4:	movs	r3, #0
   13eb6:	ldr.w	r2, [r5, r2, lsl #2]
   13eba:	bl	13be4 <__multadd>
   13ebe:	mov	r6, r0
   13ec0:	b.n	13e54 <__pow5mult+0x10>
   13ec2:	movs	r1, #1
   13ec4:	mov	r0, r7
   13ec6:	bl	13b84 <_Balloc>
   13eca:	movw	r1, #625	; 0x271
   13ece:	movs	r2, #1
   13ed0:	movs	r3, #0
   13ed2:	str	r1, [r0, #20]
   13ed4:	str	r2, [r0, #16]
   13ed6:	mov	r5, r0
   13ed8:	str	r0, [r7, #72]	; 0x48
   13eda:	str	r3, [r0, #0]
   13edc:	b.n	13e5c <__pow5mult+0x18>
   13ede:	nop
   13ee0:	.word	0x20000b30

00013ee4 <__lshift>:
   13ee4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   13ee8:	mov	r9, r2
   13eea:	ldr	r2, [r1, #16]
   13eec:	ldr	r3, [r1, #8]
   13eee:	mov.w	r4, r9, asr #5
   13ef2:	add.w	r8, r4, r2
   13ef6:	add.w	r5, r8, #1
   13efa:	cmp	r5, r3
   13efc:	mov	r6, r1
   13efe:	mov	sl, r0
   13f00:	ldr	r1, [r1, #4]
   13f02:	ble.n	13f0e <__lshift+0x2a>
   13f04:	lsls	r3, r3, #1
   13f06:	cmp	r5, r3
   13f08:	add.w	r1, r1, #1
   13f0c:	bgt.n	13f04 <__lshift+0x20>
   13f0e:	mov	r0, sl
   13f10:	bl	13b84 <_Balloc>
   13f14:	cmp	r4, #0
   13f16:	add.w	r2, r0, #20
   13f1a:	ble.n	13f8e <__lshift+0xaa>
   13f1c:	add.w	r3, r2, r4, lsl #2
   13f20:	movs	r1, #0
   13f22:	str.w	r1, [r2], #4
   13f26:	cmp	r3, r2
   13f28:	bne.n	13f22 <__lshift+0x3e>
   13f2a:	ldr	r4, [r6, #16]
   13f2c:	add.w	r1, r6, #20
   13f30:	ands.w	r9, r9, #31
   13f34:	add.w	lr, r1, r4, lsl #2
   13f38:	beq.n	13f7e <__lshift+0x9a>
   13f3a:	rsb	r2, r9, #32
   13f3e:	movs	r4, #0
   13f40:	ldr	r7, [r1, #0]
   13f42:	lsl.w	ip, r7, r9
   13f46:	orr.w	r4, ip, r4
   13f4a:	mov	ip, r3
   13f4c:	str.w	r4, [r3], #4
   13f50:	ldr.w	r4, [r1], #4
   13f54:	cmp	lr, r1
   13f56:	lsr.w	r4, r4, r2
   13f5a:	bhi.n	13f40 <__lshift+0x5c>
   13f5c:	str.w	r4, [ip, #4]
   13f60:	cbz	r4, 13f66 <__lshift+0x82>
   13f62:	add.w	r5, r8, #2
   13f66:	ldr.w	r3, [sl, #76]	; 0x4c
   13f6a:	ldr	r2, [r6, #4]
   13f6c:	subs	r5, #1
   13f6e:	ldr.w	r1, [r3, r2, lsl #2]
   13f72:	str	r5, [r0, #16]
   13f74:	str	r1, [r6, #0]
   13f76:	str.w	r6, [r3, r2, lsl #2]
   13f7a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   13f7e:	subs	r3, #4
   13f80:	ldr.w	r2, [r1], #4
   13f84:	str.w	r2, [r3, #4]!
   13f88:	cmp	lr, r1
   13f8a:	bhi.n	13f80 <__lshift+0x9c>
   13f8c:	b.n	13f66 <__lshift+0x82>
   13f8e:	mov	r3, r2
   13f90:	b.n	13f2a <__lshift+0x46>
   13f92:	nop

00013f94 <__mcmp>:
   13f94:	ldr	r2, [r0, #16]
   13f96:	ldr	r3, [r1, #16]
   13f98:	subs	r2, r2, r3
   13f9a:	bne.n	13fc4 <__mcmp+0x30>
   13f9c:	lsls	r3, r3, #2
   13f9e:	adds	r0, #20
   13fa0:	adds	r1, #20
   13fa2:	add	r1, r3
   13fa4:	push	{r4}
   13fa6:	add	r3, r0
   13fa8:	b.n	13fae <__mcmp+0x1a>
   13faa:	cmp	r0, r3
   13fac:	bcs.n	13fc8 <__mcmp+0x34>
   13fae:	ldr.w	r4, [r3, #-4]!
   13fb2:	ldr.w	r2, [r1, #-4]!
   13fb6:	cmp	r4, r2
   13fb8:	beq.n	13faa <__mcmp+0x16>
   13fba:	bcc.n	13fd0 <__mcmp+0x3c>
   13fbc:	movs	r0, #1
   13fbe:	ldr.w	r4, [sp], #4
   13fc2:	bx	lr
   13fc4:	mov	r0, r2
   13fc6:	bx	lr
   13fc8:	movs	r0, #0
   13fca:	ldr.w	r4, [sp], #4
   13fce:	bx	lr
   13fd0:	mov.w	r0, #4294967295
   13fd4:	b.n	13fbe <__mcmp+0x2a>
   13fd6:	nop

00013fd8 <__mdiff>:
   13fd8:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   13fdc:	ldr	r3, [r1, #16]
   13fde:	mov	r7, r1
   13fe0:	ldr	r1, [r2, #16]
   13fe2:	subs	r3, r3, r1
   13fe4:	cmp	r3, #0
   13fe6:	mov	r8, r2
   13fe8:	bne.n	1401a <__mdiff+0x42>
   13fea:	lsls	r1, r1, #2
   13fec:	add.w	r2, r7, #20
   13ff0:	add.w	r5, r8, #20
   13ff4:	adds	r3, r2, r1
   13ff6:	add	r1, r5
   13ff8:	b.n	13ffe <__mdiff+0x26>
   13ffa:	cmp	r2, r3
   13ffc:	bcs.n	140bc <__mdiff+0xe4>
   13ffe:	ldr.w	r6, [r3, #-4]!
   14002:	ldr.w	r4, [r1, #-4]!
   14006:	cmp	r6, r4
   14008:	beq.n	13ffa <__mdiff+0x22>
   1400a:	bcs.n	140ce <__mdiff+0xf6>
   1400c:	mov	r3, r7
   1400e:	mov	r4, r2
   14010:	mov	r7, r8
   14012:	mov.w	r9, #1
   14016:	mov	r8, r3
   14018:	b.n	14028 <__mdiff+0x50>
   1401a:	blt.n	140d8 <__mdiff+0x100>
   1401c:	add.w	r5, r7, #20
   14020:	add.w	r4, r2, #20
   14024:	mov.w	r9, #0
   14028:	ldr	r1, [r7, #4]
   1402a:	bl	13b84 <_Balloc>
   1402e:	ldr.w	r3, [r8, #16]
   14032:	ldr	r6, [r7, #16]
   14034:	str.w	r9, [r0, #12]
   14038:	add.w	ip, r4, r3, lsl #2
   1403c:	mov	lr, r4
   1403e:	add.w	r7, r5, r6, lsl #2
   14042:	add.w	r4, r0, #20
   14046:	movs	r3, #0
   14048:	ldr.w	r1, [lr], #4
   1404c:	ldr.w	r8, [r5], #4
   14050:	uxth	r2, r1
   14052:	uxtah	r3, r3, r8
   14056:	lsrs	r1, r1, #16
   14058:	subs	r2, r3, r2
   1405a:	rsb	r3, r1, r8, lsr #16
   1405e:	add.w	r3, r3, r2, asr #16
   14062:	uxth	r2, r2
   14064:	orr.w	r2, r2, r3, lsl #16
   14068:	cmp	ip, lr
   1406a:	str.w	r2, [r4], #4
   1406e:	mov.w	r3, r3, asr #16
   14072:	bhi.n	14048 <__mdiff+0x70>
   14074:	cmp	r7, r5
   14076:	bls.n	140a8 <__mdiff+0xd0>
   14078:	mov	ip, r4
   1407a:	mov	r1, r5
   1407c:	ldr.w	lr, [r1], #4
   14080:	uxtah	r2, r3, lr
   14084:	asrs	r3, r2, #16
   14086:	add.w	r3, r3, lr, lsr #16
   1408a:	uxth	r2, r2
   1408c:	orr.w	r2, r2, r3, lsl #16
   14090:	cmp	r7, r1
   14092:	str.w	r2, [ip], #4
   14096:	mov.w	r3, r3, asr #16
   1409a:	bhi.n	1407c <__mdiff+0xa4>
   1409c:	mvns	r5, r5
   1409e:	add	r5, r7
   140a0:	bic.w	r5, r5, #3
   140a4:	adds	r5, #4
   140a6:	add	r4, r5
   140a8:	subs	r4, #4
   140aa:	cbnz	r2, 140b6 <__mdiff+0xde>
   140ac:	ldr.w	r3, [r4, #-4]!
   140b0:	subs	r6, #1
   140b2:	cmp	r3, #0
   140b4:	beq.n	140ac <__mdiff+0xd4>
   140b6:	str	r6, [r0, #16]
   140b8:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   140bc:	movs	r1, #0
   140be:	bl	13b84 <_Balloc>
   140c2:	movs	r2, #1
   140c4:	movs	r3, #0
   140c6:	str	r2, [r0, #16]
   140c8:	str	r3, [r0, #20]
   140ca:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   140ce:	mov	r4, r5
   140d0:	mov.w	r9, #0
   140d4:	mov	r5, r2
   140d6:	b.n	14028 <__mdiff+0x50>
   140d8:	mov	r3, r7
   140da:	add.w	r4, r7, #20
   140de:	add.w	r5, r8, #20
   140e2:	mov	r7, r8
   140e4:	mov.w	r9, #1
   140e8:	mov	r8, r3
   140ea:	b.n	14028 <__mdiff+0x50>

000140ec <__d2b>:
   140ec:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   140f0:	vmov	r6, r7, d0
   140f4:	sub	sp, #12
   140f6:	mov	r8, r1
   140f8:	movs	r1, #1
   140fa:	mov	r4, r7
   140fc:	ubfx	r5, r7, #20, #11
   14100:	mov	r7, r2
   14102:	bl	13b84 <_Balloc>
   14106:	ubfx	r4, r4, #0, #20
   1410a:	mov	r9, r0
   1410c:	cbz	r5, 14112 <__d2b+0x26>
   1410e:	orr.w	r4, r4, #1048576	; 0x100000
   14112:	str	r4, [sp, #4]
   14114:	cbz	r6, 1415e <__d2b+0x72>
   14116:	add	r0, sp, #8
   14118:	str.w	r6, [r0, #-8]!
   1411c:	bl	13ca4 <__lo0bits>
   14120:	cmp	r0, #0
   14122:	bne.n	1418e <__d2b+0xa2>
   14124:	ldmia.w	sp, {r2, r3}
   14128:	str.w	r2, [r9, #20]
   1412c:	cmp	r3, #0
   1412e:	ite	eq
   14130:	moveq	r1, #1
   14132:	movne	r1, #2
   14134:	str.w	r3, [r9, #24]
   14138:	str.w	r1, [r9, #16]
   1413c:	cbnz	r5, 14176 <__d2b+0x8a>
   1413e:	add.w	r3, r9, r1, lsl #2
   14142:	subw	r0, r0, #1074	; 0x432
   14146:	str.w	r0, [r8]
   1414a:	ldr	r0, [r3, #16]
   1414c:	bl	13c64 <__hi0bits>
   14150:	rsb	r0, r0, r1, lsl #5
   14154:	str	r0, [r7, #0]
   14156:	mov	r0, r9
   14158:	add	sp, #12
   1415a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1415e:	add	r0, sp, #4
   14160:	bl	13ca4 <__lo0bits>
   14164:	ldr	r3, [sp, #4]
   14166:	str.w	r3, [r9, #20]
   1416a:	movs	r1, #1
   1416c:	adds	r0, #32
   1416e:	str.w	r1, [r9, #16]
   14172:	cmp	r5, #0
   14174:	beq.n	1413e <__d2b+0x52>
   14176:	subw	r5, r5, #1075	; 0x433
   1417a:	add	r5, r0
   1417c:	rsb	r0, r0, #53	; 0x35
   14180:	str.w	r5, [r8]
   14184:	str	r0, [r7, #0]
   14186:	mov	r0, r9
   14188:	add	sp, #12
   1418a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1418e:	ldmia.w	sp, {r2, r3}
   14192:	rsb	r1, r0, #32
   14196:	lsl.w	r1, r3, r1
   1419a:	orrs	r2, r1
   1419c:	lsrs	r3, r0
   1419e:	str	r3, [sp, #4]
   141a0:	str.w	r2, [r9, #20]
   141a4:	b.n	1412c <__d2b+0x40>
   141a6:	nop

000141a8 <__ssprint_r>:
   141a8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   141ac:	ldr	r3, [r2, #8]
   141ae:	sub	sp, #12
   141b0:	mov	r8, r2
   141b2:	cmp	r3, #0
   141b4:	beq.n	1429c <__ssprint_r+0xf4>
   141b6:	mov	fp, r0
   141b8:	mov.w	r9, #0
   141bc:	ldr	r6, [r2, #0]
   141be:	ldr	r0, [r1, #0]
   141c0:	ldr	r3, [r1, #8]
   141c2:	mov	r5, r1
   141c4:	mov	r4, r9
   141c6:	cmp	r4, #0
   141c8:	beq.n	14256 <__ssprint_r+0xae>
   141ca:	cmp	r4, r3
   141cc:	mov	r7, r3
   141ce:	mov	sl, r3
   141d0:	bcc.n	14260 <__ssprint_r+0xb8>
   141d2:	ldrh	r3, [r5, #12]
   141d4:	tst.w	r3, #1152	; 0x480
   141d8:	beq.n	14236 <__ssprint_r+0x8e>
   141da:	ldr	r7, [r5, #20]
   141dc:	ldr	r1, [r5, #16]
   141de:	add.w	r7, r7, r7, lsl #1
   141e2:	rsb	sl, r1, r0
   141e6:	add.w	r7, r7, r7, lsr #31
   141ea:	adds	r0, r4, #1
   141ec:	asrs	r7, r7, #1
   141ee:	add	r0, sl
   141f0:	cmp	r0, r7
   141f2:	mov	r2, r7
   141f4:	itt	hi
   141f6:	movhi	r7, r0
   141f8:	movhi	r2, r7
   141fa:	lsls	r3, r3, #21
   141fc:	bpl.n	14266 <__ssprint_r+0xbe>
   141fe:	mov	r1, r2
   14200:	mov	r0, fp
   14202:	bl	10488 <_malloc_r>
   14206:	cmp	r0, #0
   14208:	beq.n	1427a <__ssprint_r+0xd2>
   1420a:	mov	r2, sl
   1420c:	ldr	r1, [r5, #16]
   1420e:	str	r0, [sp, #4]
   14210:	bl	db14 <memcpy>
   14214:	ldrh	r2, [r5, #12]
   14216:	ldr	r3, [sp, #4]
   14218:	bic.w	r2, r2, #1152	; 0x480
   1421c:	orr.w	r2, r2, #128	; 0x80
   14220:	strh	r2, [r5, #12]
   14222:	rsb	r2, sl, r7
   14226:	add.w	r0, r3, sl
   1422a:	str	r7, [r5, #20]
   1422c:	str	r3, [r5, #16]
   1422e:	str	r0, [r5, #0]
   14230:	str	r2, [r5, #8]
   14232:	mov	r7, r4
   14234:	mov	sl, r4
   14236:	mov	r2, sl
   14238:	mov	r1, r9
   1423a:	bl	10b34 <memmove>
   1423e:	ldr.w	r2, [r8, #8]
   14242:	ldr	r3, [r5, #8]
   14244:	ldr	r0, [r5, #0]
   14246:	subs	r3, r3, r7
   14248:	add	r0, sl
   1424a:	subs	r4, r2, r4
   1424c:	str	r3, [r5, #8]
   1424e:	str	r0, [r5, #0]
   14250:	str.w	r4, [r8, #8]
   14254:	cbz	r4, 1429c <__ssprint_r+0xf4>
   14256:	ldr.w	r9, [r6]
   1425a:	ldr	r4, [r6, #4]
   1425c:	adds	r6, #8
   1425e:	b.n	141c6 <__ssprint_r+0x1e>
   14260:	mov	r7, r4
   14262:	mov	sl, r4
   14264:	b.n	14236 <__ssprint_r+0x8e>
   14266:	mov	r0, fp
   14268:	bl	10ca0 <_realloc_r>
   1426c:	mov	r3, r0
   1426e:	cmp	r0, #0
   14270:	bne.n	14222 <__ssprint_r+0x7a>
   14272:	ldr	r1, [r5, #16]
   14274:	mov	r0, fp
   14276:	bl	13998 <_free_r>
   1427a:	movs	r3, #12
   1427c:	str.w	r3, [fp]
   14280:	ldrh	r3, [r5, #12]
   14282:	movs	r2, #0
   14284:	orr.w	r3, r3, #64	; 0x40
   14288:	mov.w	r0, #4294967295
   1428c:	strh	r3, [r5, #12]
   1428e:	str.w	r2, [r8, #8]
   14292:	str.w	r2, [r8, #4]
   14296:	add	sp, #12
   14298:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1429c:	movs	r0, #0
   1429e:	str.w	r0, [r8, #4]
   142a2:	add	sp, #12
   142a4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000142a8 <_vasnprintf_r>:
   142a8:	push	{r4, r5, r6, lr}
   142aa:	mov	r5, r2
   142ac:	sub	sp, #104	; 0x68
   142ae:	ldr	r4, [r2, #0]
   142b0:	cbz	r1, 142b6 <_vasnprintf_r+0xe>
   142b2:	cmp	r4, #0
   142b4:	bne.n	142ec <_vasnprintf_r+0x44>
   142b6:	movs	r4, #0
   142b8:	mov.w	r2, #648	; 0x288
   142bc:	strh.w	r2, [sp, #12]
   142c0:	str	r4, [sp, #0]
   142c2:	str	r4, [sp, #16]
   142c4:	mov	r2, r3
   142c6:	movw	r6, #65535	; 0xffff
   142ca:	ldr	r3, [sp, #120]	; 0x78
   142cc:	str	r4, [sp, #8]
   142ce:	mov	r1, sp
   142d0:	str	r4, [sp, #20]
   142d2:	strh.w	r6, [sp, #14]
   142d6:	bl	113c0 <_svfprintf_r>
   142da:	cmp	r0, #0
   142dc:	blt.n	14302 <_vasnprintf_r+0x5a>
   142de:	ldr	r3, [sp, #0]
   142e0:	str	r0, [r5, #0]
   142e2:	movs	r2, #0
   142e4:	strb	r2, [r3, #0]
   142e6:	ldr	r0, [sp, #16]
   142e8:	add	sp, #104	; 0x68
   142ea:	pop	{r4, r5, r6, pc}
   142ec:	mov.w	r2, #1544	; 0x608
   142f0:	str	r1, [sp, #0]
   142f2:	str	r1, [sp, #16]
   142f4:	strh.w	r2, [sp, #12]
   142f8:	bge.n	142c4 <_vasnprintf_r+0x1c>
   142fa:	movs	r3, #139	; 0x8b
   142fc:	str	r3, [r0, #0]
   142fe:	movs	r0, #0
   14300:	b.n	142e8 <_vasnprintf_r+0x40>
   14302:	movs	r0, #0
   14304:	b.n	142e8 <_vasnprintf_r+0x40>
   14306:	nop

00014308 <___init_veneer>:
   14308:	ldr.w	pc, [pc]	; 1430c <___init_veneer+0x4>
   1430c:	.word	0x60001af1

00014310 <___ZN7TwoWire5beginEv_veneer>:
   14310:	ldr.w	pc, [pc]	; 14314 <___ZN7TwoWire5beginEv_veneer+0x4>
   14314:	.word	0x60001675
	...

Disassembly of section .fini:

00014320 <_fini>:
   14320:	push	{r3, r4, r5, r6, r7, lr}
   14322:	nop

Disassembly of section .text.csf:

60017718 <_heap_end+0x3fd97718>:
60017718:	.word	0xffffffff
6001771c:	.word	0xffffffff
60017720:	.word	0xffffffff
60017724:	.word	0xffffffff
60017728:	.word	0xffffffff
6001772c:	.word	0xffffffff
60017730:	.word	0xffffffff
60017734:	.word	0xffffffff
60017738:	.word	0xffffffff
6001773c:	.word	0xffffffff
60017740:	.word	0xffffffff
60017744:	.word	0xffffffff
60017748:	.word	0xffffffff
6001774c:	.word	0xffffffff
60017750:	.word	0xffffffff
60017754:	.word	0xffffffff
60017758:	.word	0xffffffff
6001775c:	.word	0xffffffff
60017760:	.word	0xffffffff
60017764:	.word	0xffffffff
60017768:	.word	0xffffffff
6001776c:	.word	0xffffffff
60017770:	.word	0xffffffff
60017774:	.word	0xffffffff
60017778:	.word	0xffffffff
6001777c:	.word	0xffffffff
60017780:	.word	0xffffffff
60017784:	.word	0xffffffff
60017788:	.word	0xffffffff
6001778c:	.word	0xffffffff
60017790:	.word	0xffffffff
60017794:	.word	0xffffffff
60017798:	.word	0xffffffff
6001779c:	.word	0xffffffff
600177a0:	.word	0xffffffff
600177a4:	.word	0xffffffff
600177a8:	.word	0xffffffff
600177ac:	.word	0xffffffff
600177b0:	.word	0xffffffff
600177b4:	.word	0xffffffff
600177b8:	.word	0xffffffff
600177bc:	.word	0xffffffff
600177c0:	.word	0xffffffff
600177c4:	.word	0xffffffff
600177c8:	.word	0xffffffff
600177cc:	.word	0xffffffff
600177d0:	.word	0xffffffff
600177d4:	.word	0xffffffff
600177d8:	.word	0xffffffff
600177dc:	.word	0xffffffff
600177e0:	.word	0xffffffff
600177e4:	.word	0xffffffff
600177e8:	.word	0xffffffff
600177ec:	.word	0xffffffff
600177f0:	.word	0xffffffff
600177f4:	.word	0xffffffff
600177f8:	.word	0xffffffff
600177fc:	.word	0xffffffff

60017800 <hab_csf>:
	...
